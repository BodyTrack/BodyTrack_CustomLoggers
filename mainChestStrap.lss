
mainChestStrap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000768  00802000  00008b56  00008bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002048  00802768  00802768  00009352  2**0
                  ALLOC
  3 .stab         00001644  00000000  00000000  00009354  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000541  00000000  00000000  0000a998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000aed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001368  00000000  00000000  0000af19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007696  00000000  00000000  0000c281  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006ca  00000000  00000000  00013917  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000058fa  00000000  00000000  00013fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  000198dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000041a4  00000000  00000000  0001a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000057e7  00000000  00000000  0001e360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d0  00000000  00000000  00023b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 16 2c 	jmp	0x582c	; 0x582c <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 a7 3d 	jmp	0x7b4e	; 0x7b4e <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 98 34 	jmp	0x6930	; 0x6930 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 4f 2d 	jmp	0x5a9e	; 0x5a9e <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	17 e2       	ldi	r17, 0x27	; 39
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e6 e5       	ldi	r30, 0x56	; 86
     200:	fb e8       	ldi	r31, 0x8B	; 139
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a8 36       	cpi	r26, 0x68	; 104
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	17 e4       	ldi	r17, 0x47	; 71
     214:	a8 e6       	ldi	r26, 0x68	; 104
     216:	b7 e2       	ldi	r27, 0x27	; 39
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a0 3b       	cpi	r26, 0xB0	; 176
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 03 42 	call	0x8406	; 0x8406 <main>
     226:	0c 94 a9 45 	jmp	0x8b52	; 0x8b52 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <CCPWrite>:
bool demoMode = false;
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
     22e:	0f 93       	push	r16
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	0f 92       	push	r0
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
     23a:	2f b7       	in	r18, 0x3f	; 63
     23c:	29 83       	std	Y+1, r18	; 0x01
    cli();
     23e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     240:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     242:	fc 01       	movw	r30, r24
     244:	08 ed       	ldi	r16, 0xD8	; 216
     246:	04 bf       	out	0x34, r16	; 52
     248:	60 83       	st	Z, r22
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	8f bf       	out	0x3f, r24	; 63
}
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <Debug_CharReadyToRead>:
	}
}


bool Debug_CharReadyToRead(void){
    Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
     258:	20 91 2d 01 	lds	r18, 0x012D
     25c:	92 2f       	mov	r25, r18
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	80 93 9a 27 	sts	0x279A, r24
     264:	90 93 9b 27 	sts	0x279B, r25
	Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
     268:	80 91 9a 27 	lds	r24, 0x279A
     26c:	90 91 9b 27 	lds	r25, 0x279B
     270:	20 91 2c 01 	lds	r18, 0x012C
     274:	82 0f       	add	r24, r18
     276:	91 1d       	adc	r25, r1
     278:	80 93 9a 27 	sts	0x279A, r24
     27c:	90 93 9b 27 	sts	0x279B, r25
	Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     280:	80 91 9a 27 	lds	r24, 0x279A
     284:	90 91 9b 27 	lds	r25, 0x279B
     288:	8f 53       	subi	r24, 0x3F	; 63
     28a:	9a 43       	sbci	r25, 0x3A	; 58
     28c:	80 93 9a 27 	sts	0x279A, r24
     290:	90 93 9b 27 	sts	0x279B, r25



	if(Debug_writeLocation == Debug_readLocation){
     294:	20 91 9a 27 	lds	r18, 0x279A
     298:	30 91 9b 27 	lds	r19, 0x279B
     29c:	80 91 98 27 	lds	r24, 0x2798
     2a0:	90 91 99 27 	lds	r25, 0x2799
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	09 f0       	breq	.+2      	; 0x2ae <Debug_CharReadyToRead+0x56>
     2ac:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     2ae:	84 2f       	mov	r24, r20
     2b0:	08 95       	ret

000002b2 <Debug_ClearBuffer>:
	
	Debug_ClearBuffer();
	
}
void Debug_ClearBuffer(void){
	if(Debug_CharReadyToRead()){
     2b2:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
     2b6:	88 23       	and	r24, r24
     2b8:	31 f1       	breq	.+76     	; 0x306 <Debug_ClearBuffer+0x54>
		Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
     2ba:	20 91 2d 01 	lds	r18, 0x012D
     2be:	92 2f       	mov	r25, r18
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	80 93 9a 27 	sts	0x279A, r24
     2c6:	90 93 9b 27 	sts	0x279B, r25
		Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
     2ca:	80 91 9a 27 	lds	r24, 0x279A
     2ce:	90 91 9b 27 	lds	r25, 0x279B
     2d2:	20 91 2c 01 	lds	r18, 0x012C
     2d6:	82 0f       	add	r24, r18
     2d8:	91 1d       	adc	r25, r1
     2da:	80 93 9a 27 	sts	0x279A, r24
     2de:	90 93 9b 27 	sts	0x279B, r25
		Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     2e2:	80 91 9a 27 	lds	r24, 0x279A
     2e6:	90 91 9b 27 	lds	r25, 0x279B
     2ea:	8f 53       	subi	r24, 0x3F	; 63
     2ec:	9a 43       	sbci	r25, 0x3A	; 58
     2ee:	80 93 9a 27 	sts	0x279A, r24
     2f2:	90 93 9b 27 	sts	0x279B, r25
		Debug_readLocation = Debug_writeLocation;
     2f6:	80 91 9a 27 	lds	r24, 0x279A
     2fa:	90 91 9b 27 	lds	r25, 0x279B
     2fe:	80 93 98 27 	sts	0x2798, r24
     302:	90 93 99 27 	sts	0x2799, r25
     306:	08 95       	ret

00000308 <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;



void Debug_Init(uint32_t baud){
     308:	ab 01       	movw	r20, r22
     30a:	bc 01       	movw	r22, r24
	
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	80 91 00 01 	lds	r24, 0x0100
     314:	80 68       	ori	r24, 0x80	; 128
     316:	80 93 00 01 	sts	0x0100, r24
	
	// Debug
	DMA.Debug_DMA_Channel.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
     31a:	80 91 22 01 	lds	r24, 0x0122
     31e:	85 60       	ori	r24, 0x05	; 5
     320:	82 a3       	std	Z+34, r24	; 0x22
	DMA.Debug_DMA_Channel.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     322:	8b e4       	ldi	r24, 0x4B	; 75
     324:	83 a3       	std	Z+35, r24	; 0x23
	DMA.Debug_DMA_Channel.TRFCNT = Debug_BufferSize;	// 1024 bytes in block
     326:	84 e6       	ldi	r24, 0x64	; 100
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	84 a3       	std	Z+36, r24	; 0x24
     32c:	95 a3       	std	Z+37, r25	; 0x25
	DMA.Debug_DMA_Channel.REPCNT  = 0;		// repeat forever
     32e:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.Debug_DMA_Channel.SRCADDR0 = (((uint16_t)(&Debug_Usart.DATA) >> 0) & 0xFF);
     330:	80 ea       	ldi	r24, 0xA0	; 160
     332:	80 a7       	std	Z+40, r24	; 0x28
	DMA.Debug_DMA_Channel.SRCADDR1 = (((uint16_t)(&Debug_Usart.DATA) >> 8) & 0xFF);
     334:	28 e0       	ldi	r18, 0x08	; 8
     336:	21 a7       	std	Z+41, r18	; 0x29
	DMA.Debug_DMA_Channel.SRCADDR2 = 0x00;
     338:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.Debug_DMA_Channel.DESTADDR0 = (((uint16_t)(&DebugBuffer[0]) >> 0) & 0xFF);
     33a:	8f e3       	ldi	r24, 0x3F	; 63
     33c:	9a e3       	ldi	r25, 0x3A	; 58
     33e:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.Debug_DMA_Channel.DESTADDR1 = (((uint16_t)(&DebugBuffer[0]) >> 8) & 0xFF);
     340:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.Debug_DMA_Channel.DESTADDR2 = 0x00;
     342:	16 a6       	std	Z+46, r1	; 0x2e
	
	DMA.Debug_DMA_Channel.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;
     344:	80 91 20 01 	lds	r24, 0x0120
     348:	84 6a       	ori	r24, 0xA4	; 164
     34a:	80 a3       	std	Z+32, r24	; 0x20
	
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     34c:	e0 e4       	ldi	r30, 0x40	; 64
     34e:	f6 e0       	ldi	r31, 0x06	; 6
     350:	21 83       	std	Z+1, r18	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.DIRSET = (1<<Debug_CTS_pin);
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	81 83       	std	Z+1, r24	; 0x01
	Debug_Flow_Port.OUTSET = (1<<Debug_CTS_pin);
     35e:	85 83       	std	Z+5, r24	; 0x05

	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     360:	e0 ea       	ldi	r30, 0xA0	; 160
     362:	f8 e0       	ldi	r31, 0x08	; 8
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     368:	40 38       	cpi	r20, 0x80	; 128
     36a:	25 e2       	ldi	r18, 0x25	; 37
     36c:	52 07       	cpc	r21, r18
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	62 07       	cpc	r22, r18
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	72 07       	cpc	r23, r18
     376:	11 f4       	brne	.+4      	; 0x37c <Debug_Init+0x74>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     378:	8f e5       	ldi	r24, 0x5F	; 95
     37a:	09 c0       	rjmp	.+18     	; 0x38e <Debug_Init+0x86>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     37c:	40 30       	cpi	r20, 0x00	; 0
     37e:	22 ec       	ldi	r18, 0xC2	; 194
     380:	52 07       	cpc	r21, r18
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	62 07       	cpc	r22, r18
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	72 07       	cpc	r23, r18
     38a:	19 f4       	brne	.+6      	; 0x392 <Debug_Init+0x8a>
		Debug_Usart.BAUDCTRLA = 7 & 0xFF;
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	86 83       	std	Z+6, r24	; 0x06
     390:	18 c0       	rjmp	.+48     	; 0x3c2 <Debug_Init+0xba>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     392:	40 30       	cpi	r20, 0x00	; 0
     394:	24 e8       	ldi	r18, 0x84	; 132
     396:	52 07       	cpc	r21, r18
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	62 07       	cpc	r22, r18
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	72 07       	cpc	r23, r18
     3a0:	b1 f3       	breq	.-20     	; 0x38e <Debug_Init+0x86>
		Debug_Usart.BAUDCTRLA = 3 & 0xFF;
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	}else if(baud == 460800){
     3a2:	40 30       	cpi	r20, 0x00	; 0
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	58 07       	cpc	r21, r24
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	68 07       	cpc	r22, r24
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	78 07       	cpc	r23, r24
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <Debug_Init+0xae>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     3b2:	96 83       	std	Z+6, r25	; 0x06
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <Debug_Init+0xba>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     3b6:	40 50       	subi	r20, 0x00	; 0
     3b8:	50 41       	sbci	r21, 0x10	; 16
     3ba:	6e 40       	sbci	r22, 0x0E	; 14
     3bc:	70 40       	sbci	r23, 0x00	; 0
     3be:	11 f4       	brne	.+4      	; 0x3c4 <Debug_Init+0xbc>
		Debug_Usart.BAUDCTRLA = 0 & 0xFF;
     3c0:	16 82       	std	Z+6, r1	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     3c2:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     3c4:	e0 ea       	ldi	r30, 0xA0	; 160
     3c6:	f8 e0       	ldi	r31, 0x08	; 8
     3c8:	80 91 a4 08 	lds	r24, 0x08A4
     3cc:	80 61       	ori	r24, 0x10	; 16
     3ce:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     3d0:	80 91 a4 08 	lds	r24, 0x08A4
     3d4:	88 60       	ori	r24, 0x08	; 8
     3d6:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_ClearBuffer();
     3d8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
	
}
     3dc:	08 95       	ret

000003de <Debug_GetByte>:
		return true;
	}
}

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     3de:	88 23       	and	r24, r24
     3e0:	21 f0       	breq	.+8      	; 0x3ea <Debug_GetByte+0xc>
		while(!Debug_CharReadyToRead());
     3e2:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
     3e6:	88 23       	and	r24, r24
     3e8:	e1 f3       	breq	.-8      	; 0x3e2 <Debug_GetByte+0x4>
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     3ea:	e0 91 98 27 	lds	r30, 0x2798
     3ee:	f0 91 99 27 	lds	r31, 0x2799
     3f2:	e1 5c       	subi	r30, 0xC1	; 193
     3f4:	f5 4c       	sbci	r31, 0xC5	; 197
     3f6:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     3f8:	80 91 98 27 	lds	r24, 0x2798
     3fc:	90 91 99 27 	lds	r25, 0x2799
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	80 93 98 27 	sts	0x2798, r24
     406:	90 93 99 27 	sts	0x2799, r25
	if(Debug_readLocation >= Debug_BufferSize){
     40a:	80 91 98 27 	lds	r24, 0x2798
     40e:	90 91 99 27 	lds	r25, 0x2799
     412:	84 36       	cpi	r24, 0x64	; 100
     414:	91 05       	cpc	r25, r1
     416:	20 f0       	brcs	.+8      	; 0x420 <Debug_GetByte+0x42>
	  Debug_readLocation=0;
     418:	10 92 98 27 	sts	0x2798, r1
     41c:	10 92 99 27 	sts	0x2799, r1
	}
	return tmp;
}
     420:	8e 2f       	mov	r24, r30
     422:	08 95       	ret

00000424 <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     424:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     426:	80 91 a1 08 	lds	r24, 0x08A1
     42a:	85 ff       	sbrs	r24, 5
     42c:	fc cf       	rjmp	.-8      	; 0x426 <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0); // Wait for RTS to be low
     42e:	80 91 48 06 	lds	r24, 0x0648
     432:	80 fd       	sbrc	r24, 0
     434:	fc cf       	rjmp	.-8      	; 0x42e <Debug_SendByte+0xa>
	Debug_Usart.DATA = data;
     436:	90 93 a0 08 	sts	0x08A0, r25
}
     43a:	08 95       	ret

0000043c <Leds_Init>:

volatile uint8_t ledState[numberOfLeds]; 
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
     43c:	e8 2f       	mov	r30, r24
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 2e       	mov	r0, r30
     446:	02 c0       	rjmp	.+4      	; 0x44c <Leds_Init+0x10>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <Leds_Init+0xc>
     450:	a0 ea       	ldi	r26, 0xA0	; 160
     452:	b6 e0       	ldi	r27, 0x06	; 6
     454:	11 96       	adiw	r26, 0x01	; 1
     456:	8c 93       	st	X, r24
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
     458:	e4 5b       	subi	r30, 0xB4	; 180
     45a:	f6 4c       	sbci	r31, 0xC6	; 198
     45c:	10 82       	st	Z, r1
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
	Leds_State(led, off);
}
     45e:	08 95       	ret

00000460 <Leds_State>:

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
     460:	ec e4       	ldi	r30, 0x4C	; 76
     462:	f9 e3       	ldi	r31, 0x39	; 57
     464:	e8 0f       	add	r30, r24
     466:	f1 1d       	adc	r31, r1
     468:	60 83       	st	Z, r22
}
     46a:	08 95       	ret

0000046c <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1<<led);
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <Leds_Set+0xa>
     472:	22 0f       	add	r18, r18
     474:	33 1f       	adc	r19, r19
     476:	8a 95       	dec	r24
     478:	e2 f7       	brpl	.-8      	; 0x472 <Leds_Set+0x6>
     47a:	e0 ea       	ldi	r30, 0xA0	; 160
     47c:	f6 e0       	ldi	r31, 0x06	; 6
     47e:	25 83       	std	Z+5, r18	; 0x05
}
     480:	08 95       	ret

00000482 <Leds_Clear>:


void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1<<led);
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <Leds_Clear+0xa>
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	8a 95       	dec	r24
     48e:	e2 f7       	brpl	.-8      	; 0x488 <Leds_Clear+0x6>
     490:	e0 ea       	ldi	r30, 0xA0	; 160
     492:	f6 e0       	ldi	r31, 0x06	; 6
     494:	26 83       	std	Z+6, r18	; 0x06
}
     496:	08 95       	ret

00000498 <Leds_Toggle>:


void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1<<led);	
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <Leds_Toggle+0xa>
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	8a 95       	dec	r24
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <Leds_Toggle+0x6>
     4a6:	e0 ea       	ldi	r30, 0xA0	; 160
     4a8:	f6 e0       	ldi	r31, 0x06	; 6
     4aa:	27 83       	std	Z+7, r18	; 0x07
     4ac:	08 95       	ret

000004ae <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
	Time_TimerHigh.CTRLA = Time_EventClockSource; //Select event channel 0 as clock source for TCC1.
     4ae:	88 e0       	ldi	r24, 0x08	; 8
     4b0:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
	EVSYS.Time_EventChannelMux = Time_EventInput;
     4b4:	80 ec       	ldi	r24, 0xC0	; 192
     4b6:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
	Time_TimerLow.PER = 0xFFFF;
     4ba:	e0 e0       	ldi	r30, 0x00	; 0
     4bc:	f8 e0       	ldi	r31, 0x08	; 8
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	86 a3       	std	Z+38, r24	; 0x26
     4c4:	97 a3       	std	Z+39, r25	; 0x27
	Time_TimerLow.CTRLA = (Time_TimerLow.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
     4c6:	80 81       	ld	r24, Z
     4c8:	80 7f       	andi	r24, 0xF0	; 240
     4ca:	84 60       	ori	r24, 0x04	; 4
     4cc:	80 83       	st	Z, r24
	
	
}
     4ce:	08 95       	ret

000004d0 <Time_Set>:

void Time_Set(uint32_t time){
     4d0:	0f 93       	push	r16
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	0f 92       	push	r0
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	ab 01       	movw	r20, r22
     4de:	bc 01       	movw	r22, r24
	cli();
     4e0:	f8 94       	cli
	VBAT.CTRL = VBAT_ACCEN_bm;
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     4e8:	8f b7       	in	r24, 0x3f	; 63
     4ea:	89 83       	std	Y+1, r24	; 0x01
    cli();
     4ec:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     4ee:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	80 ef       	ldi	r24, 0xF0	; 240
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	fc 01       	movw	r30, r24
     4f8:	08 ed       	ldi	r16, 0xD8	; 216
     4fa:	04 bf       	out	0x34, r16	; 52
     4fc:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	8f bf       	out	0x3f, r24	; 63
	CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
	VBAT.CTRL |= VBAT_XOSCFDEN_bm;				// enable oscillator failure detection
     502:	80 91 f0 00 	lds	r24, 0x00F0
     506:	84 60       	ori	r24, 0x04	; 4
     508:	80 93 f0 00 	sts	0x00F0, r24
	VBAT.CTRL |= VBAT_XOSCEN_bm;				// enable 1hz output from oscillator
     50c:	80 91 f0 00 	lds	r24, 0x00F0
     510:	88 60       	ori	r24, 0x08	; 8
     512:	80 93 f0 00 	sts	0x00F0, r24
	
	/* Disable the RTC32 module before writing to it. Wait for synch. */
	RTC32.CTRL &= ~RTC32_ENABLE_bm;
     516:	80 91 20 04 	lds	r24, 0x0420
     51a:	8e 7f       	andi	r24, 0xFE	; 254
     51c:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     520:	e0 e2       	ldi	r30, 0x20	; 32
     522:	f4 e0       	ldi	r31, 0x04	; 4
     524:	80 91 21 04 	lds	r24, 0x0421
     528:	80 fd       	sbrc	r24, 0
     52a:	fa cf       	rjmp	.-12     	; 0x520 <Time_Set+0x50>
	
	/* Write PER, COMP and CNT. */
	RTC32.PER = 0xFFFFFFFF - 1;
     52c:	8e ef       	ldi	r24, 0xFE	; 254
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	af ef       	ldi	r26, 0xFF	; 255
     532:	bf ef       	ldi	r27, 0xFF	; 255
     534:	80 87       	std	Z+8, r24	; 0x08
     536:	91 87       	std	Z+9, r25	; 0x09
     538:	a2 87       	std	Z+10, r26	; 0x0a
     53a:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.COMP = 0;
     53c:	14 86       	std	Z+12, r1	; 0x0c
     53e:	15 86       	std	Z+13, r1	; 0x0d
     540:	16 86       	std	Z+14, r1	; 0x0e
     542:	17 86       	std	Z+15, r1	; 0x0f
	RTC32.CNT = time;
     544:	44 83       	std	Z+4, r20	; 0x04
     546:	55 83       	std	Z+5, r21	; 0x05
     548:	66 83       	std	Z+6, r22	; 0x06
     54a:	77 83       	std	Z+7, r23	; 0x07
	
	/* Re-enable the RTC32 module, synchronize before returning. */
	RTC32.CTRL |= RTC32_ENABLE_bm;
     54c:	80 91 20 04 	lds	r24, 0x0420
     550:	81 60       	ori	r24, 0x01	; 1
     552:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     556:	80 91 21 04 	lds	r24, 0x0421
     55a:	80 fd       	sbrc	r24, 0
     55c:	fc cf       	rjmp	.-8      	; 0x556 <Time_Set+0x86>
	
	RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
     55e:	80 91 22 04 	lds	r24, 0x0422
     562:	83 7f       	andi	r24, 0xF3	; 243
     564:	84 60       	ori	r24, 0x04	; 4
     566:	e0 e2       	ldi	r30, 0x20	; 32
     568:	f4 e0       	ldi	r31, 0x04	; 4
     56a:	82 83       	std	Z+2, r24	; 0x02
	sei();
     56c:	78 94       	sei
}
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	0f 91       	pop	r16
     576:	08 95       	ret

00000578 <Time_CheckVBatSystem>:

bool Time_CheckVBatSystem(void){
	if (VBAT.STATUS & VBAT_BBPWR_bm){
     578:	80 91 f1 00 	lds	r24, 0x00F1
     57c:	87 fd       	sbrc	r24, 7
     57e:	12 c0       	rjmp	.+36     	; 0x5a4 <Time_CheckVBatSystem+0x2c>
		//Debug_SendByte('A');
		return false;
	} else {
		if (VBAT.STATUS & VBAT_BBPORF_bm) {
     580:	80 91 f1 00 	lds	r24, 0x00F1
     584:	80 fd       	sbrc	r24, 0
     586:	0e c0       	rjmp	.+28     	; 0x5a4 <Time_CheckVBatSystem+0x2c>
			
			//Debug_SendByte('B');
			return false;
		} else if (VBAT.STATUS & VBAT_BBBORF_bm){
     588:	80 91 f1 00 	lds	r24, 0x00F1
     58c:	81 fd       	sbrc	r24, 1
     58e:	0a c0       	rjmp	.+20     	; 0x5a4 <Time_CheckVBatSystem+0x2c>
			
			//Debug_SendByte('C');
			return false;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	80 93 f0 00 	sts	0x00F0, r24
			if (VBAT.STATUS & VBAT_XOSCFAIL_bm){
     596:	80 91 f1 00 	lds	r24, 0x00F1
     59a:	86 95       	lsr	r24
     59c:	86 95       	lsr	r24
     59e:	80 95       	com	r24
     5a0:	81 70       	andi	r24, 0x01	; 1
     5a2:	08 95       	ret
     5a4:	80 e0       	ldi	r24, 0x00	; 0
				return false;
			} 
		}
	}
	return true;
}
     5a6:	08 95       	ret

000005a8 <Time_Get>:

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
     5a8:	80 91 21 04 	lds	r24, 0x0421
     5ac:	80 61       	ori	r24, 0x10	; 16
     5ae:	e0 e2       	ldi	r30, 0x20	; 32
     5b0:	f4 e0       	ldi	r31, 0x04	; 4
     5b2:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
     5b4:	80 91 21 04 	lds	r24, 0x0421
     5b8:	84 fd       	sbrc	r24, 4
     5ba:	fc cf       	rjmp	.-8      	; 0x5b4 <Time_Get+0xc>
	return RTC32.CNT;
     5bc:	20 91 24 04 	lds	r18, 0x0424
     5c0:	30 91 25 04 	lds	r19, 0x0425
     5c4:	40 91 26 04 	lds	r20, 0x0426
     5c8:	50 91 27 04 	lds	r21, 0x0427
	//sei();
}
     5cc:	b9 01       	movw	r22, r18
     5ce:	ca 01       	movw	r24, r20
     5d0:	08 95       	ret

000005d2 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
     5d2:	f8 94       	cli
  uint16_t high = Time_TimerHighCNT;
     5d4:	20 91 60 08 	lds	r18, 0x0860
     5d8:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = Time_TimerLowCNT;
     5dc:	60 91 20 08 	lds	r22, 0x0820
     5e0:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != Time_TimerHighCNT){
     5e4:	80 91 60 08 	lds	r24, 0x0860
     5e8:	90 91 61 08 	lds	r25, 0x0861
     5ec:	28 17       	cp	r18, r24
     5ee:	39 07       	cpc	r19, r25
     5f0:	41 f0       	breq	.+16     	; 0x602 <Time_Get32BitTimer+0x30>
	 high = Time_TimerHighCNT;
     5f2:	20 91 60 08 	lds	r18, 0x0860
     5f6:	30 91 61 08 	lds	r19, 0x0861
	 low  = Time_TimerLowCNT;
     5fa:	60 91 20 08 	lds	r22, 0x0820
     5fe:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
     602:	78 94       	sei
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	a9 01       	movw	r20, r18
     60a:	33 27       	eor	r19, r19
     60c:	22 27       	eor	r18, r18
     60e:	cb 01       	movw	r24, r22
     610:	a0 e0       	ldi	r26, 0x00	; 0
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	28 0f       	add	r18, r24
     616:	39 1f       	adc	r19, r25
     618:	4a 1f       	adc	r20, r26
     61a:	5b 1f       	adc	r21, r27
  return result;
}
     61c:	b9 01       	movw	r22, r18
     61e:	ca 01       	movw	r24, r20
     620:	08 95       	ret

00000622 <Time_UTCSecsToTime>:


//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * Time_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
     622:	8f 92       	push	r8
     624:	9f 92       	push	r9
     626:	af 92       	push	r10
     628:	bf 92       	push	r11
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	7b 01       	movw	r14, r22
     63c:	8c 01       	movw	r16, r24
     63e:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
     640:	2c e3       	ldi	r18, 0x3C	; 60
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     64c:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
     64e:	c8 01       	movw	r24, r16
     650:	b7 01       	movw	r22, r14
     652:	2c e3       	ldi	r18, 0x3C	; 60
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     65e:	12 2f       	mov	r17, r18
     660:	03 2f       	mov	r16, r19
     662:	f4 2e       	mov	r15, r20
     664:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
     666:	62 2f       	mov	r22, r18
     668:	73 2f       	mov	r23, r19
     66a:	84 2f       	mov	r24, r20
     66c:	95 2f       	mov	r25, r21
     66e:	2c e3       	ldi	r18, 0x3C	; 60
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     67a:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
     67c:	61 2f       	mov	r22, r17
     67e:	70 2f       	mov	r23, r16
     680:	8f 2d       	mov	r24, r15
     682:	9e 2d       	mov	r25, r14
     684:	2c e3       	ldi	r18, 0x3C	; 60
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     690:	12 2f       	mov	r17, r18
     692:	03 2f       	mov	r16, r19
     694:	f4 2e       	mov	r15, r20
     696:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
     698:	62 2f       	mov	r22, r18
     69a:	73 2f       	mov	r23, r19
     69c:	84 2f       	mov	r24, r20
     69e:	95 2f       	mov	r25, r21
     6a0:	28 e1       	ldi	r18, 0x18	; 24
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     6ac:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
     6ae:	61 2f       	mov	r22, r17
     6b0:	70 2f       	mov	r23, r16
     6b2:	8f 2d       	mov	r24, r15
     6b4:	9e 2d       	mov	r25, r14
     6b6:	28 e1       	ldi	r18, 0x18	; 24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     6c2:	79 01       	movw	r14, r18
     6c4:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
     6c6:	c8 01       	movw	r24, r16
     6c8:	b7 01       	movw	r22, r14
     6ca:	6c 5f       	subi	r22, 0xFC	; 252
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	8f 4f       	sbci	r24, 0xFF	; 255
     6d0:	9f 4f       	sbci	r25, 0xFF	; 255
     6d2:	27 e0       	ldi	r18, 0x07	; 7
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	6c 83       	std	Y+4, r22	; 0x04
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	aa 24       	eor	r10, r10
     6e6:	bb 24       	eor	r11, r11
     6e8:	65 01       	movw	r12, r10
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <Time_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
     6ec:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
     6ee:	82 2e       	mov	r8, r18
     6f0:	99 24       	eor	r9, r9
     6f2:	f4 01       	movw	r30, r8
     6f4:	ee 54       	subi	r30, 0x4E	; 78
     6f6:	f8 4f       	sbci	r31, 0xF8	; 248
     6f8:	cf 01       	movw	r24, r30
     6fa:	83 70       	andi	r24, 0x03	; 3
     6fc:	90 70       	andi	r25, 0x00	; 0
     6fe:	89 2b       	or	r24, r25
     700:	99 f4       	brne	.+38     	; 0x728 <Time_UTCSecsToTime+0x106>
     702:	cf 01       	movw	r24, r30
     704:	64 e6       	ldi	r22, 0x64	; 100
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	0e 94 3d 44 	call	0x887a	; 0x887a <__divmodhi4>
     70c:	89 2b       	or	r24, r25
     70e:	39 f4       	brne	.+14     	; 0x71e <Time_UTCSecsToTime+0xfc>
     710:	cf 01       	movw	r24, r30
     712:	60 e9       	ldi	r22, 0x90	; 144
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	0e 94 3d 44 	call	0x887a	; 0x887a <__divmodhi4>
     71a:	89 2b       	or	r24, r25
     71c:	29 f4       	brne	.+10     	; 0x728 <Time_UTCSecsToTime+0x106>
     71e:	8e e6       	ldi	r24, 0x6E	; 110
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	a0 e0       	ldi	r26, 0x00	; 0
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	04 c0       	rjmp	.+8      	; 0x730 <Time_UTCSecsToTime+0x10e>
     728:	8d e6       	ldi	r24, 0x6D	; 109
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	a0 e0       	ldi	r26, 0x00	; 0
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	a8 0e       	add	r10, r24
     732:	b9 1e       	adc	r11, r25
     734:	ca 1e       	adc	r12, r26
     736:	db 1e       	adc	r13, r27
     738:	c5 01       	movw	r24, r10
     73a:	a0 e0       	ldi	r26, 0x00	; 0
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e8 16       	cp	r14, r24
     740:	f9 06       	cpc	r15, r25
     742:	0a 07       	cpc	r16, r26
     744:	1b 07       	cpc	r17, r27
     746:	90 f6       	brcc	.-92     	; 0x6ec <Time_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
     748:	2f 83       	std	Y+7, r18	; 0x07
	
	
	days -= LEAP_YEAR(year) ? 366 : 365;
     74a:	f4 01       	movw	r30, r8
     74c:	ee 54       	subi	r30, 0x4E	; 78
     74e:	f8 4f       	sbci	r31, 0xF8	; 248
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	89 2e       	mov	r8, r25
     754:	91 2c       	mov	r9, r1
     756:	8e 22       	and	r8, r30
     758:	9f 22       	and	r9, r31
     75a:	81 14       	cp	r8, r1
     75c:	91 04       	cpc	r9, r1
     75e:	99 f4       	brne	.+38     	; 0x786 <Time_UTCSecsToTime+0x164>
     760:	cf 01       	movw	r24, r30
     762:	64 e6       	ldi	r22, 0x64	; 100
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	0e 94 3d 44 	call	0x887a	; 0x887a <__divmodhi4>
     76a:	89 2b       	or	r24, r25
     76c:	39 f4       	brne	.+14     	; 0x77c <Time_UTCSecsToTime+0x15a>
     76e:	cf 01       	movw	r24, r30
     770:	60 e9       	ldi	r22, 0x90	; 144
     772:	71 e0       	ldi	r23, 0x01	; 1
     774:	0e 94 3d 44 	call	0x887a	; 0x887a <__divmodhi4>
     778:	89 2b       	or	r24, r25
     77a:	29 f4       	brne	.+10     	; 0x786 <Time_UTCSecsToTime+0x164>
     77c:	8e e6       	ldi	r24, 0x6E	; 110
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	a0 e0       	ldi	r26, 0x00	; 0
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	04 c0       	rjmp	.+8      	; 0x78e <Time_UTCSecsToTime+0x16c>
     786:	8d e6       	ldi	r24, 0x6D	; 109
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
     78e:	a8 1a       	sub	r10, r24
     790:	b9 0a       	sbc	r11, r25
     792:	ca 0a       	sbc	r12, r26
     794:	db 0a       	sbc	r13, r27
     796:	98 01       	movw	r18, r16
     798:	87 01       	movw	r16, r14
     79a:	0a 19       	sub	r16, r10
     79c:	1b 09       	sbc	r17, r11
     79e:	2c 09       	sbc	r18, r12
     7a0:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
     7a2:	cf 01       	movw	r24, r30
     7a4:	64 e6       	ldi	r22, 0x64	; 100
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	0e 94 3d 44 	call	0x887a	; 0x887a <__divmodhi4>
     7ac:	7c 01       	movw	r14, r24
     7ae:	cf 01       	movw	r24, r30
     7b0:	60 e9       	ldi	r22, 0x90	; 144
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	0e 94 3d 44 	call	0x887a	; 0x887a <__divmodhi4>
     7b8:	ac 01       	movw	r20, r24
     7ba:	ec e5       	ldi	r30, 0x5C	; 92
     7bc:	f7 e2       	ldi	r31, 0x27	; 39
     7be:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
     7c0:	61 30       	cpi	r22, 0x01	; 1
     7c2:	51 f4       	brne	.+20     	; 0x7d8 <Time_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
     7c4:	81 14       	cp	r8, r1
     7c6:	91 04       	cpc	r9, r1
     7c8:	49 f4       	brne	.+18     	; 0x7dc <Time_UTCSecsToTime+0x1ba>
     7ca:	e1 14       	cp	r14, r1
     7cc:	f1 04       	cpc	r15, r1
     7ce:	41 f4       	brne	.+16     	; 0x7e0 <Time_UTCSecsToTime+0x1be>
     7d0:	41 15       	cp	r20, r1
     7d2:	51 05       	cpc	r21, r1
     7d4:	29 f0       	breq	.+10     	; 0x7e0 <Time_UTCSecsToTime+0x1be>
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <Time_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
     7d8:	80 81       	ld	r24, Z
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <Time_UTCSecsToTime+0x1c0>
     7dc:	8c e1       	ldi	r24, 0x1C	; 28
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <Time_UTCSecsToTime+0x1c0>
     7e0:	8d e1       	ldi	r24, 0x1D	; 29
    	}
		
    	if (UTCSecs >= monthLength) {
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	08 17       	cp	r16, r24
     7ea:	19 07       	cpc	r17, r25
     7ec:	2a 07       	cpc	r18, r26
     7ee:	3b 07       	cpc	r19, r27
     7f0:	40 f0       	brcs	.+16     	; 0x802 <Time_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
     7f2:	08 1b       	sub	r16, r24
     7f4:	19 0b       	sbc	r17, r25
     7f6:	2a 0b       	sbc	r18, r26
     7f8:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
     7fa:	6f 5f       	subi	r22, 0xFF	; 255
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	6c 30       	cpi	r22, 0x0C	; 12
     800:	f9 f6       	brne	.-66     	; 0x7c0 <Time_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
     802:	6f 5f       	subi	r22, 0xFF	; 255
     804:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
     806:	80 2f       	mov	r24, r16
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
     80c:	ce 01       	movw	r24, r28
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	bf 90       	pop	r11
     820:	af 90       	pop	r10
     822:	9f 90       	pop	r9
     824:	8f 90       	pop	r8
     826:	08 95       	ret

00000828 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     828:	82 e3       	ldi	r24, 0x32	; 50
     82a:	80 93 f8 27 	sts	0x27F8, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	e0 ec       	ldi	r30, 0xC0	; 192
     832:	f9 e0       	ldi	r31, 0x09	; 9
     834:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     836:	80 91 c2 09 	lds	r24, 0x09C2
     83a:	87 ff       	sbrs	r24, 7
     83c:	fc cf       	rjmp	.-8      	; 0x836 <wait_ready+0xe>
	return SD_SPI.DATA;
     83e:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     842:	e0 ec       	ldi	r30, 0xC0	; 192
     844:	f9 e0       	ldi	r31, 0x09	; 9
     846:	2f ef       	ldi	r18, 0xFF	; 255
     848:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     84a:	80 91 c2 09 	lds	r24, 0x09C2
     84e:	87 ff       	sbrs	r24, 7
     850:	fc cf       	rjmp	.-8      	; 0x84a <wait_ready+0x22>
	return SD_SPI.DATA;
     852:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     856:	9f 3f       	cpi	r25, 0xFF	; 255
     858:	21 f0       	breq	.+8      	; 0x862 <wait_ready+0x3a>
     85a:	80 91 f8 27 	lds	r24, 0x27F8
     85e:	88 23       	and	r24, r24
     860:	99 f7       	brne	.-26     	; 0x848 <wait_ready+0x20>

	return res;
}
     862:	89 2f       	mov	r24, r25
     864:	08 95       	ret

00000866 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
	CS_LOW();
     86c:	c0 e6       	ldi	r28, 0x60	; 96
     86e:	d6 e0       	ldi	r29, 0x06	; 6
     870:	10 e1       	ldi	r17, 0x10	; 16
     872:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     874:	0e 94 14 04 	call	0x828	; 0x828 <wait_ready>
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	11 f4       	brne	.+4      	; 0x880 <select+0x1a>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0c c0       	rjmp	.+24     	; 0x898 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     880:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	e0 ec       	ldi	r30, 0xC0	; 192
     886:	f9 e0       	ldi	r31, 0x09	; 9
     888:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     88a:	80 91 c2 09 	lds	r24, 0x09C2
     88e:	87 ff       	sbrs	r24, 7
     890:	fc cf       	rjmp	.-8      	; 0x88a <select+0x24>
	return SD_SPI.DATA;
     892:	80 91 c3 09 	lds	r24, 0x09C3
     896:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	08 95       	ret

000008a0 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     8a0:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     8a2:	84 e1       	ldi	r24, 0x14	; 20
     8a4:	80 93 f7 27 	sts	0x27F7, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8a8:	a0 ec       	ldi	r26, 0xC0	; 192
     8aa:	b9 e0       	ldi	r27, 0x09	; 9
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	13 96       	adiw	r26, 0x03	; 3
     8b0:	9c 93       	st	X, r25
     8b2:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8b4:	80 91 c2 09 	lds	r24, 0x09C2
     8b8:	87 ff       	sbrs	r24, 7
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     8bc:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     8c0:	8f 3f       	cpi	r24, 0xFF	; 255
     8c2:	29 f4       	brne	.+10     	; 0x8ce <rcvr_datablock+0x2e>
     8c4:	80 91 f7 27 	lds	r24, 0x27F7
     8c8:	88 23       	and	r24, r24
     8ca:	89 f7       	brne	.-30     	; 0x8ae <rcvr_datablock+0xe>
     8cc:	49 c0       	rjmp	.+146    	; 0x960 <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     8ce:	8e 3f       	cpi	r24, 0xFE	; 254
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <rcvr_datablock+0x34>
     8d2:	46 c0       	rjmp	.+140    	; 0x960 <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     8d4:	a0 ec       	ldi	r26, 0xC0	; 192
     8d6:	b9 e0       	ldi	r27, 0x09	; 9
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
     8da:	13 96       	adiw	r26, 0x03	; 3
     8dc:	9c 93       	st	X, r25
     8de:	13 97       	sbiw	r26, 0x03	; 3
     8e0:	80 91 c2 09 	lds	r24, 0x09C2
     8e4:	87 ff       	sbrs	r24, 7
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <rcvr_datablock+0x40>
     8e8:	80 91 c3 09 	lds	r24, 0x09C3
     8ec:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     8ee:	13 96       	adiw	r26, 0x03	; 3
     8f0:	9c 93       	st	X, r25
     8f2:	13 97       	sbiw	r26, 0x03	; 3
     8f4:	80 91 c2 09 	lds	r24, 0x09C2
     8f8:	87 ff       	sbrs	r24, 7
     8fa:	fc cf       	rjmp	.-8      	; 0x8f4 <rcvr_datablock+0x54>
     8fc:	80 91 c3 09 	lds	r24, 0x09C3
     900:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     902:	13 96       	adiw	r26, 0x03	; 3
     904:	9c 93       	st	X, r25
     906:	13 97       	sbiw	r26, 0x03	; 3
     908:	80 91 c2 09 	lds	r24, 0x09C2
     90c:	87 ff       	sbrs	r24, 7
     90e:	fc cf       	rjmp	.-8      	; 0x908 <rcvr_datablock+0x68>
     910:	80 91 c3 09 	lds	r24, 0x09C3
     914:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     916:	13 96       	adiw	r26, 0x03	; 3
     918:	9c 93       	st	X, r25
     91a:	13 97       	sbiw	r26, 0x03	; 3
     91c:	80 91 c2 09 	lds	r24, 0x09C2
     920:	87 ff       	sbrs	r24, 7
     922:	fc cf       	rjmp	.-8      	; 0x91c <rcvr_datablock+0x7c>
     924:	80 91 c3 09 	lds	r24, 0x09C3
     928:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     92a:	64 50       	subi	r22, 0x04	; 4
     92c:	70 40       	sbci	r23, 0x00	; 0
     92e:	11 f0       	breq	.+4      	; 0x934 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     930:	34 96       	adiw	r30, 0x04	; 4
     932:	d3 cf       	rjmp	.-90     	; 0x8da <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	e0 ec       	ldi	r30, 0xC0	; 192
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     93c:	80 91 c2 09 	lds	r24, 0x09C2
     940:	87 ff       	sbrs	r24, 7
     942:	fc cf       	rjmp	.-8      	; 0x93c <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     944:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	e0 ec       	ldi	r30, 0xC0	; 192
     94c:	f9 e0       	ldi	r31, 0x09	; 9
     94e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     950:	80 91 c2 09 	lds	r24, 0x09C2
     954:	87 ff       	sbrs	r24, 7
     956:	fc cf       	rjmp	.-8      	; 0x950 <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     958:	80 91 c3 09 	lds	r24, 0x09C3
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     960:	80 e0       	ldi	r24, 0x00	; 0
}
     962:	08 95       	ret

00000964 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ec 01       	movw	r28, r24
     96c:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     96e:	0e 94 14 04 	call	0x828	; 0x828 <wait_ready>
     972:	8f 3f       	cpi	r24, 0xFF	; 255
     974:	11 f0       	breq	.+4      	; 0x97a <xmit_datablock+0x16>
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	3f c0       	rjmp	.+126    	; 0x9f8 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     97a:	e0 ec       	ldi	r30, 0xC0	; 192
     97c:	f9 e0       	ldi	r31, 0x09	; 9
     97e:	13 83       	std	Z+3, r17	; 0x03
     980:	80 91 c2 09 	lds	r24, 0x09C2
     984:	87 ff       	sbrs	r24, 7
     986:	fc cf       	rjmp	.-8      	; 0x980 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     988:	1d 3f       	cpi	r17, 0xFD	; 253
     98a:	11 f4       	brne	.+4      	; 0x990 <xmit_datablock+0x2c>
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	34 c0       	rjmp	.+104    	; 0x9f8 <xmit_datablock+0x94>
     990:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     992:	e0 ec       	ldi	r30, 0xC0	; 192
     994:	f9 e0       	ldi	r31, 0x09	; 9
     996:	88 81       	ld	r24, Y
     998:	83 83       	std	Z+3, r24	; 0x03
     99a:	80 91 c2 09 	lds	r24, 0x09C2
     99e:	87 ff       	sbrs	r24, 7
     9a0:	fc cf       	rjmp	.-8      	; 0x99a <xmit_datablock+0x36>
			xmit_spi(*buff++);
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	83 83       	std	Z+3, r24	; 0x03
     9a6:	80 91 c2 09 	lds	r24, 0x09C2
     9aa:	87 ff       	sbrs	r24, 7
     9ac:	fc cf       	rjmp	.-8      	; 0x9a6 <xmit_datablock+0x42>
		} while (--wc);
     9ae:	91 50       	subi	r25, 0x01	; 1
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     9b2:	22 96       	adiw	r28, 0x02	; 2
     9b4:	f0 cf       	rjmp	.-32     	; 0x996 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ba:	f9 e0       	ldi	r31, 0x09	; 9
     9bc:	83 83       	std	Z+3, r24	; 0x03
     9be:	80 91 c2 09 	lds	r24, 0x09C2
     9c2:	87 ff       	sbrs	r24, 7
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ca:	f9 e0       	ldi	r31, 0x09	; 9
     9cc:	83 83       	std	Z+3, r24	; 0x03
     9ce:	80 91 c2 09 	lds	r24, 0x09C2
     9d2:	87 ff       	sbrs	r24, 7
     9d4:	fc cf       	rjmp	.-8      	; 0x9ce <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	e0 ec       	ldi	r30, 0xC0	; 192
     9da:	f9 e0       	ldi	r31, 0x09	; 9
     9dc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9de:	80 91 c2 09 	lds	r24, 0x09C2
     9e2:	87 ff       	sbrs	r24, 7
     9e4:	fc cf       	rjmp	.-8      	; 0x9de <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     9e6:	80 91 c3 09 	lds	r24, 0x09C3
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	8f 71       	andi	r24, 0x1F	; 31
     9ee:	85 30       	cpi	r24, 0x05	; 5
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <xmit_datablock+0x90>
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     9f8:	89 2f       	mov	r24, r25
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	08 95       	ret

00000a02 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	d8 2e       	mov	r13, r24
     a0e:	7a 01       	movw	r14, r20
     a10:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     a12:	87 ff       	sbrs	r24, 7
     a14:	0c c0       	rjmp	.+24     	; 0xa2e <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     a16:	87 e7       	ldi	r24, 0x77	; 119
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
		if (res > 1) return res;
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	08 f0       	brcs	.+2      	; 0xa2a <send_cmd+0x28>
     a28:	72 c0       	rjmp	.+228    	; 0xb0e <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     a2a:	8f e7       	ldi	r24, 0x7F	; 127
     a2c:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     a2e:	80 e1       	ldi	r24, 0x10	; 16
     a30:	e0 e6       	ldi	r30, 0x60	; 96
     a32:	f6 e0       	ldi	r31, 0x06	; 6
     a34:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	e0 ec       	ldi	r30, 0xC0	; 192
     a3a:	f9 e0       	ldi	r31, 0x09	; 9
     a3c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a3e:	80 91 c2 09 	lds	r24, 0x09C2
     a42:	87 ff       	sbrs	r24, 7
     a44:	fc cf       	rjmp	.-8      	; 0xa3e <send_cmd+0x3c>
	return SD_SPI.DATA;
     a46:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     a4a:	0e 94 33 04 	call	0x866	; 0x866 <select>
     a4e:	88 23       	and	r24, r24
     a50:	11 f4       	brne	.+4      	; 0xa56 <send_cmd+0x54>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	5c c0       	rjmp	.+184    	; 0xb0e <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     a56:	e0 ec       	ldi	r30, 0xC0	; 192
     a58:	f9 e0       	ldi	r31, 0x09	; 9
     a5a:	d3 82       	std	Z+3, r13	; 0x03
     a5c:	80 91 c2 09 	lds	r24, 0x09C2
     a60:	87 ff       	sbrs	r24, 7
     a62:	fc cf       	rjmp	.-8      	; 0xa5c <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     a64:	81 2f       	mov	r24, r17
     a66:	99 27       	eor	r25, r25
     a68:	aa 27       	eor	r26, r26
     a6a:	bb 27       	eor	r27, r27
     a6c:	e0 ec       	ldi	r30, 0xC0	; 192
     a6e:	f9 e0       	ldi	r31, 0x09	; 9
     a70:	83 83       	std	Z+3, r24	; 0x03
     a72:	80 91 c2 09 	lds	r24, 0x09C2
     a76:	87 ff       	sbrs	r24, 7
     a78:	fc cf       	rjmp	.-8      	; 0xa72 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     a7a:	c8 01       	movw	r24, r16
     a7c:	aa 27       	eor	r26, r26
     a7e:	bb 27       	eor	r27, r27
     a80:	e0 ec       	ldi	r30, 0xC0	; 192
     a82:	f9 e0       	ldi	r31, 0x09	; 9
     a84:	83 83       	std	Z+3, r24	; 0x03
     a86:	80 91 c2 09 	lds	r24, 0x09C2
     a8a:	87 ff       	sbrs	r24, 7
     a8c:	fc cf       	rjmp	.-8      	; 0xa86 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     a8e:	bb 27       	eor	r27, r27
     a90:	a1 2f       	mov	r26, r17
     a92:	90 2f       	mov	r25, r16
     a94:	8f 2d       	mov	r24, r15
     a96:	e0 ec       	ldi	r30, 0xC0	; 192
     a98:	f9 e0       	ldi	r31, 0x09	; 9
     a9a:	83 83       	std	Z+3, r24	; 0x03
     a9c:	80 91 c2 09 	lds	r24, 0x09C2
     aa0:	87 ff       	sbrs	r24, 7
     aa2:	fc cf       	rjmp	.-8      	; 0xa9c <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     aa4:	e0 ec       	ldi	r30, 0xC0	; 192
     aa6:	f9 e0       	ldi	r31, 0x09	; 9
     aa8:	e3 82       	std	Z+3, r14	; 0x03
     aaa:	80 91 c2 09 	lds	r24, 0x09C2
     aae:	87 ff       	sbrs	r24, 7
     ab0:	fc cf       	rjmp	.-8      	; 0xaaa <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     ab2:	80 e4       	ldi	r24, 0x40	; 64
     ab4:	d8 16       	cp	r13, r24
     ab6:	11 f4       	brne	.+4      	; 0xabc <send_cmd+0xba>
     ab8:	85 e9       	ldi	r24, 0x95	; 149
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     abc:	88 e4       	ldi	r24, 0x48	; 72
     abe:	d8 16       	cp	r13, r24
     ac0:	11 f4       	brne	.+4      	; 0xac6 <send_cmd+0xc4>
     ac2:	87 e8       	ldi	r24, 0x87	; 135
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <send_cmd+0xc6>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     ac8:	e0 ec       	ldi	r30, 0xC0	; 192
     aca:	f9 e0       	ldi	r31, 0x09	; 9
     acc:	83 83       	std	Z+3, r24	; 0x03
     ace:	80 91 c2 09 	lds	r24, 0x09C2
     ad2:	87 ff       	sbrs	r24, 7
     ad4:	fc cf       	rjmp	.-8      	; 0xace <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     ad6:	8c e4       	ldi	r24, 0x4C	; 76
     ad8:	d8 16       	cp	r13, r24
     ada:	51 f4       	brne	.+20     	; 0xaf0 <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	e0 ec       	ldi	r30, 0xC0	; 192
     ae0:	f9 e0       	ldi	r31, 0x09	; 9
     ae2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ae4:	80 91 c2 09 	lds	r24, 0x09C2
     ae8:	87 ff       	sbrs	r24, 7
     aea:	fc cf       	rjmp	.-8      	; 0xae4 <send_cmd+0xe2>
	return SD_SPI.DATA;
     aec:	80 91 c3 09 	lds	r24, 0x09C3
     af0:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     af2:	e0 ec       	ldi	r30, 0xC0	; 192
     af4:	f9 e0       	ldi	r31, 0x09	; 9
     af6:	2f ef       	ldi	r18, 0xFF	; 255
     af8:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     afa:	80 91 c2 09 	lds	r24, 0x09C2
     afe:	87 ff       	sbrs	r24, 7
     b00:	fc cf       	rjmp	.-8      	; 0xafa <send_cmd+0xf8>
	return SD_SPI.DATA;
     b02:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     b06:	87 ff       	sbrs	r24, 7
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <send_cmd+0x10c>
     b0a:	91 50       	subi	r25, 0x01	; 1
     b0c:	a9 f7       	brne	.-22     	; 0xaf8 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	08 95       	ret

00000b1a <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	00 d0       	rcall	.+0      	; 0xb28 <disk_initialize+0xe>
     b28:	0f 92       	push	r0
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     b2e:	80 91 5b 27 	lds	r24, 0x275B
     b32:	81 fd       	sbrc	r24, 1
     b34:	cc c0       	rjmp	.+408    	; 0xcce <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     b36:	e0 e6       	ldi	r30, 0x60	; 96
     b38:	f6 e0       	ldi	r31, 0x06	; 6
     b3a:	80 eb       	ldi	r24, 0xB0	; 176
     b3c:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     b3e:	88 e3       	ldi	r24, 0x38	; 56
     b40:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     b42:	14 82       	std	Z+4, r1	; 0x04
     b44:	8c e2       	ldi	r24, 0x2C	; 44
     b46:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b48:	20 e7       	ldi	r18, 0x70	; 112
     b4a:	31 e0       	ldi	r19, 0x01	; 1
     b4c:	f9 01       	movw	r30, r18
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b54:	d9 f7       	brne	.-10     	; 0xb4c <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     b56:	83 e5       	ldi	r24, 0x53	; 83
     b58:	80 93 c0 09 	sts	0x09C0, r24
     b5c:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b5e:	e0 ec       	ldi	r30, 0xC0	; 192
     b60:	f9 e0       	ldi	r31, 0x09	; 9
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b66:	80 91 c2 09 	lds	r24, 0x09C2
     b6a:	87 ff       	sbrs	r24, 7
     b6c:	fc cf       	rjmp	.-8      	; 0xb66 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     b6e:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     b72:	91 50       	subi	r25, 0x01	; 1
     b74:	b9 f7       	brne	.-18     	; 0xb64 <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	09 f0       	breq	.+2      	; 0xb8a <disk_initialize+0x70>
     b88:	87 c0       	rjmp	.+270    	; 0xc98 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     b8a:	84 e6       	ldi	r24, 0x64	; 100
     b8c:	80 93 f7 27 	sts	0x27F7, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     b90:	88 e4       	ldi	r24, 0x48	; 72
     b92:	4a ea       	ldi	r20, 0xAA	; 170
     b94:	51 e0       	ldi	r21, 0x01	; 1
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	09 f0       	breq	.+2      	; 0xba4 <disk_initialize+0x8a>
     ba2:	53 c0       	rjmp	.+166    	; 0xc4a <disk_initialize+0x130>
     ba4:	7e 01       	movw	r14, r28
     ba6:	08 94       	sec
     ba8:	e1 1c       	adc	r14, r1
     baa:	f1 1c       	adc	r15, r1
     bac:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bae:	e0 ec       	ldi	r30, 0xC0	; 192
     bb0:	f9 e0       	ldi	r31, 0x09	; 9
     bb2:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     bb4:	9e 01       	movw	r18, r28
     bb6:	2b 5f       	subi	r18, 0xFB	; 251
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bba:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bbc:	80 91 c2 09 	lds	r24, 0x09C2
     bc0:	87 ff       	sbrs	r24, 7
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <disk_initialize+0xa2>
	return SD_SPI.DATA;
     bc4:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     bc8:	d8 01       	movw	r26, r16
     bca:	8d 93       	st	X+, r24
     bcc:	8d 01       	movw	r16, r26
     bce:	a2 17       	cp	r26, r18
     bd0:	b3 07       	cpc	r27, r19
     bd2:	99 f7       	brne	.-26     	; 0xbba <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <disk_initialize+0xc2>
     bda:	5e c0       	rjmp	.+188    	; 0xc98 <disk_initialize+0x17e>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	8a 3a       	cpi	r24, 0xAA	; 170
     be0:	09 f0       	breq	.+2      	; 0xbe4 <disk_initialize+0xca>
     be2:	5a c0       	rjmp	.+180    	; 0xc98 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     be4:	80 91 f7 27 	lds	r24, 0x27F7
     be8:	88 23       	and	r24, r24
     bea:	49 f0       	breq	.+18     	; 0xbfe <disk_initialize+0xe4>
     bec:	89 ee       	ldi	r24, 0xE9	; 233
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e4       	ldi	r23, 0x40	; 64
     bf6:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     bfa:	88 23       	and	r24, r24
     bfc:	99 f7       	brne	.-26     	; 0xbe4 <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     bfe:	80 91 f7 27 	lds	r24, 0x27F7
     c02:	88 23       	and	r24, r24
     c04:	09 f4       	brne	.+2      	; 0xc08 <disk_initialize+0xee>
     c06:	48 c0       	rjmp	.+144    	; 0xc98 <disk_initialize+0x17e>
     c08:	8a e7       	ldi	r24, 0x7A	; 122
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     c16:	88 23       	and	r24, r24
     c18:	09 f0       	breq	.+2      	; 0xc1c <disk_initialize+0x102>
     c1a:	3e c0       	rjmp	.+124    	; 0xc98 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f9 e0       	ldi	r31, 0x09	; 9
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c24:	80 91 c2 09 	lds	r24, 0x09C2
     c28:	87 ff       	sbrs	r24, 7
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <disk_initialize+0x10a>
	return SD_SPI.DATA;
     c2c:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     c30:	d7 01       	movw	r26, r14
     c32:	8d 93       	st	X+, r24
     c34:	7d 01       	movw	r14, r26
     c36:	a0 17       	cp	r26, r16
     c38:	b1 07       	cpc	r27, r17
     c3a:	99 f7       	brne	.-26     	; 0xc22 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	86 fd       	sbrc	r24, 6
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <disk_initialize+0x12c>
     c42:	14 e0       	ldi	r17, 0x04	; 4
     c44:	2a c0       	rjmp	.+84     	; 0xc9a <disk_initialize+0x180>
     c46:	1c e0       	ldi	r17, 0x0C	; 12
     c48:	28 c0       	rjmp	.+80     	; 0xc9a <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     c4a:	89 ee       	ldi	r24, 0xE9	; 233
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	18 f0       	brcs	.+6      	; 0xc62 <disk_initialize+0x148>
     c5c:	01 e4       	ldi	r16, 0x41	; 65
     c5e:	11 e0       	ldi	r17, 0x01	; 1
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <disk_initialize+0x14c>
     c62:	09 ee       	ldi	r16, 0xE9	; 233
     c64:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     c66:	80 91 f7 27 	lds	r24, 0x27F7
     c6a:	88 23       	and	r24, r24
     c6c:	49 f0       	breq	.+18     	; 0xc80 <disk_initialize+0x166>
     c6e:	80 2f       	mov	r24, r16
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     c7c:	88 23       	and	r24, r24
     c7e:	99 f7       	brne	.-26     	; 0xc66 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     c80:	80 91 f7 27 	lds	r24, 0x27F7
     c84:	88 23       	and	r24, r24
     c86:	41 f0       	breq	.+16     	; 0xc98 <disk_initialize+0x17e>
     c88:	80 e5       	ldi	r24, 0x50	; 80
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	52 e0       	ldi	r21, 0x02	; 2
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     c96:	81 11       	cpse	r24, r1
     c98:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     c9a:	10 93 f9 27 	sts	0x27F9, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     c9e:	80 e1       	ldi	r24, 0x10	; 16
     ca0:	e0 e6       	ldi	r30, 0x60	; 96
     ca2:	f6 e0       	ldi	r31, 0x06	; 6
     ca4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	e0 ec       	ldi	r30, 0xC0	; 192
     caa:	f9 e0       	ldi	r31, 0x09	; 9
     cac:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     cae:	80 91 c2 09 	lds	r24, 0x09C2
     cb2:	87 ff       	sbrs	r24, 7
     cb4:	fc cf       	rjmp	.-8      	; 0xcae <disk_initialize+0x194>
	return SD_SPI.DATA;
     cb6:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     cba:	11 23       	and	r17, r17
     cbc:	41 f0       	breq	.+16     	; 0xcce <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     cbe:	80 91 5b 27 	lds	r24, 0x275B
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	80 93 5b 27 	sts	0x275B, r24
		FCLK_FAST();
     cc8:	80 ed       	ldi	r24, 0xD0	; 208
     cca:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     cce:	80 91 5b 27 	lds	r24, 0x275B
}
     cd2:	24 96       	adiw	r28, 0x04	; 4
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret

00000ce6 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     ce6:	88 23       	and	r24, r24
     ce8:	11 f0       	breq	.+4      	; 0xcee <disk_status+0x8>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	08 95       	ret
	return Stat;
     cee:	80 91 5b 27 	lds	r24, 0x275B
}
     cf2:	08 95       	ret

00000cf4 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     cf4:	0f 93       	push	r16
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     cfc:	88 23       	and	r24, r24
     cfe:	09 f0       	breq	.+2      	; 0xd02 <disk_read+0xe>
     d00:	53 c0       	rjmp	.+166    	; 0xda8 <disk_read+0xb4>
     d02:	00 23       	and	r16, r16
     d04:	09 f4       	brne	.+2      	; 0xd08 <disk_read+0x14>
     d06:	50 c0       	rjmp	.+160    	; 0xda8 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d08:	80 91 5b 27 	lds	r24, 0x275B
     d0c:	80 ff       	sbrs	r24, 0
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <disk_read+0x20>
     d10:	03 e0       	ldi	r16, 0x03	; 3
     d12:	4b c0       	rjmp	.+150    	; 0xdaa <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d14:	80 91 f9 27 	lds	r24, 0x27F9
     d18:	83 fd       	sbrc	r24, 3
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <disk_read+0x36>
     d1c:	69 e0       	ldi	r22, 0x09	; 9
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	44 1f       	adc	r20, r20
     d24:	55 1f       	adc	r21, r21
     d26:	6a 95       	dec	r22
     d28:	d1 f7       	brne	.-12     	; 0xd1e <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     d2a:	01 30       	cpi	r16, 0x01	; 1
     d2c:	89 f4       	brne	.+34     	; 0xd50 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     d2e:	81 e5       	ldi	r24, 0x51	; 81
     d30:	ba 01       	movw	r22, r20
     d32:	a9 01       	movw	r20, r18
     d34:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     d38:	88 23       	and	r24, r24
     d3a:	21 f5       	brne	.+72     	; 0xd84 <disk_read+0x90>
     d3c:	ce 01       	movw	r24, r28
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rcvr_datablock>
     d46:	00 e0       	ldi	r16, 0x00	; 0
     d48:	88 23       	and	r24, r24
     d4a:	e1 f4       	brne	.+56     	; 0xd84 <disk_read+0x90>
     d4c:	01 e0       	ldi	r16, 0x01	; 1
     d4e:	1a c0       	rjmp	.+52     	; 0xd84 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     d50:	82 e5       	ldi	r24, 0x52	; 82
     d52:	ba 01       	movw	r22, r20
     d54:	a9 01       	movw	r20, r18
     d56:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     d5a:	88 23       	and	r24, r24
     d5c:	99 f4       	brne	.+38     	; 0xd84 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     d5e:	ce 01       	movw	r24, r28
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	72 e0       	ldi	r23, 0x02	; 2
     d64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rcvr_datablock>
     d68:	88 23       	and	r24, r24
     d6a:	29 f0       	breq	.+10     	; 0xd76 <disk_read+0x82>
				buff += 512;
			} while (--count);
     d6c:	01 50       	subi	r16, 0x01	; 1
     d6e:	19 f0       	breq	.+6      	; 0xd76 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     d70:	c0 50       	subi	r28, 0x00	; 0
     d72:	de 4f       	sbci	r29, 0xFE	; 254
     d74:	f4 cf       	rjmp	.-24     	; 0xd5e <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     d76:	8c e4       	ldi	r24, 0x4C	; 76
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d84:	80 e1       	ldi	r24, 0x10	; 16
     d86:	e0 e6       	ldi	r30, 0x60	; 96
     d88:	f6 e0       	ldi	r31, 0x06	; 6
     d8a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	e0 ec       	ldi	r30, 0xC0	; 192
     d90:	f9 e0       	ldi	r31, 0x09	; 9
     d92:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d94:	80 91 c2 09 	lds	r24, 0x09C2
     d98:	87 ff       	sbrs	r24, 7
     d9a:	fc cf       	rjmp	.-8      	; 0xd94 <disk_read+0xa0>
	return SD_SPI.DATA;
     d9c:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     da0:	00 23       	and	r16, r16
     da2:	19 f0       	breq	.+6      	; 0xdaa <disk_read+0xb6>
     da4:	01 e0       	ldi	r16, 0x01	; 1
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <disk_read+0xb6>
     da8:	04 e0       	ldi	r16, 0x04	; 4
}
     daa:	80 2f       	mov	r24, r16
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	eb 01       	movw	r28, r22
     dc4:	69 01       	movw	r12, r18
     dc6:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     dc8:	88 23       	and	r24, r24
     dca:	09 f0       	breq	.+2      	; 0xdce <disk_write+0x1a>
     dcc:	61 c0       	rjmp	.+194    	; 0xe90 <disk_write+0xdc>
     dce:	00 23       	and	r16, r16
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <disk_write+0x20>
     dd2:	5e c0       	rjmp	.+188    	; 0xe90 <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     dd4:	80 91 5b 27 	lds	r24, 0x275B
     dd8:	80 ff       	sbrs	r24, 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <disk_write+0x2c>
     ddc:	03 e0       	ldi	r16, 0x03	; 3
     dde:	59 c0       	rjmp	.+178    	; 0xe92 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     de0:	80 91 5b 27 	lds	r24, 0x275B
     de4:	82 ff       	sbrs	r24, 2
     de6:	02 c0       	rjmp	.+4      	; 0xdec <disk_write+0x38>
     de8:	02 e0       	ldi	r16, 0x02	; 2
     dea:	53 c0       	rjmp	.+166    	; 0xe92 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     dec:	80 91 f9 27 	lds	r24, 0x27F9
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	83 fd       	sbrc	r24, 3
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <disk_write+0x50>
     df6:	79 e0       	ldi	r23, 0x09	; 9
     df8:	cc 0c       	add	r12, r12
     dfa:	dd 1c       	adc	r13, r13
     dfc:	ee 1c       	adc	r14, r14
     dfe:	ff 1c       	adc	r15, r15
     e00:	7a 95       	dec	r23
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     e04:	01 30       	cpi	r16, 0x01	; 1
     e06:	69 f4       	brne	.+26     	; 0xe22 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     e08:	88 e5       	ldi	r24, 0x58	; 88
     e0a:	b7 01       	movw	r22, r14
     e0c:	a6 01       	movw	r20, r12
     e0e:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     e12:	88 23       	and	r24, r24
     e14:	59 f5       	brne	.+86     	; 0xe6c <disk_write+0xb8>
     e16:	ce 01       	movw	r24, r28
     e18:	6e ef       	ldi	r22, 0xFE	; 254
     e1a:	0e 94 b2 04 	call	0x964	; 0x964 <xmit_datablock>
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	22 c0       	rjmp	.+68     	; 0xe66 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e22:	86 70       	andi	r24, 0x06	; 6
     e24:	90 70       	andi	r25, 0x00	; 0
     e26:	89 2b       	or	r24, r25
     e28:	39 f0       	breq	.+14     	; 0xe38 <disk_write+0x84>
     e2a:	40 2f       	mov	r20, r16
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	87 ed       	ldi	r24, 0xD7	; 215
     e34:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     e38:	89 e5       	ldi	r24, 0x59	; 89
     e3a:	b7 01       	movw	r22, r14
     e3c:	a6 01       	movw	r20, r12
     e3e:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     e42:	88 23       	and	r24, r24
     e44:	99 f4       	brne	.+38     	; 0xe6c <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     e46:	ce 01       	movw	r24, r28
     e48:	6c ef       	ldi	r22, 0xFC	; 252
     e4a:	0e 94 b2 04 	call	0x964	; 0x964 <xmit_datablock>
     e4e:	88 23       	and	r24, r24
     e50:	29 f0       	breq	.+10     	; 0xe5c <disk_write+0xa8>
				buff += 512;
			} while (--count);
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	19 f0       	breq	.+6      	; 0xe5c <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     e56:	c0 50       	subi	r28, 0x00	; 0
     e58:	de 4f       	sbci	r29, 0xFE	; 254
     e5a:	f5 cf       	rjmp	.-22     	; 0xe46 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	6d ef       	ldi	r22, 0xFD	; 253
     e62:	0e 94 b2 04 	call	0x964	; 0x964 <xmit_datablock>
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <disk_write+0xb8>
     e6a:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     e6c:	80 e1       	ldi	r24, 0x10	; 16
     e6e:	e0 e6       	ldi	r30, 0x60	; 96
     e70:	f6 e0       	ldi	r31, 0x06	; 6
     e72:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	e0 ec       	ldi	r30, 0xC0	; 192
     e78:	f9 e0       	ldi	r31, 0x09	; 9
     e7a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e7c:	80 91 c2 09 	lds	r24, 0x09C2
     e80:	87 ff       	sbrs	r24, 7
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <disk_write+0xc8>
	return SD_SPI.DATA;
     e84:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     e88:	00 23       	and	r16, r16
     e8a:	19 f0       	breq	.+6      	; 0xe92 <disk_write+0xde>
     e8c:	01 e0       	ldi	r16, 0x01	; 1
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <disk_write+0xde>
     e90:	04 e0       	ldi	r16, 0x04	; 4
}
     e92:	80 2f       	mov	r24, r16
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	08 95       	ret

00000ea4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	60 97       	sbiw	r28, 0x10	; 16
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     eba:	88 23       	and	r24, r24
     ebc:	09 f0       	breq	.+2      	; 0xec0 <disk_ioctl+0x1c>
     ebe:	b8 c1       	rjmp	.+880    	; 0x1230 <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     ec0:	64 30       	cpi	r22, 0x04	; 4
     ec2:	01 f5       	brne	.+64     	; 0xf04 <disk_ioctl+0x60>
		switch (*ptr) {
     ec4:	fa 01       	movw	r30, r20
     ec6:	80 81       	ld	r24, Z
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	39 f0       	breq	.+14     	; 0xeda <disk_ioctl+0x36>
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	08 f4       	brcc	.+2      	; 0xed2 <disk_ioctl+0x2e>
     ed0:	b1 c1       	rjmp	.+866    	; 0x1234 <disk_ioctl+0x390>
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	09 f0       	breq	.+2      	; 0xed8 <disk_ioctl+0x34>
     ed6:	ac c1       	rjmp	.+856    	; 0x1230 <disk_ioctl+0x38c>
     ed8:	11 c0       	rjmp	.+34     	; 0xefc <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     eda:	e0 e6       	ldi	r30, 0x60	; 96
     edc:	f6 e0       	ldi	r31, 0x06	; 6
     ede:	80 eb       	ldi	r24, 0xB0	; 176
     ee0:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     ee2:	88 e3       	ldi	r24, 0x38	; 56
     ee4:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     ee6:	14 82       	std	Z+4, r1	; 0x04
     ee8:	8c e2       	ldi	r24, 0x2C	; 44
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	20 e7       	ldi	r18, 0x70	; 112
     eee:	31 e0       	ldi	r19, 0x01	; 1
     ef0:	f9 01       	movw	r30, r18
     ef2:	31 97       	sbiw	r30, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	d9 f7       	brne	.-10     	; 0xef0 <disk_ioctl+0x4c>
     efa:	9c c1       	rjmp	.+824    	; 0x1234 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	fa 01       	movw	r30, r20
     f00:	81 83       	std	Z+1, r24	; 0x01
     f02:	98 c1       	rjmp	.+816    	; 0x1234 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     f04:	80 91 5b 27 	lds	r24, 0x275B
     f08:	80 ff       	sbrs	r24, 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <disk_ioctl+0x6c>
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	93 c1       	rjmp	.+806    	; 0x1236 <disk_ioctl+0x392>

		switch (ctrl) {
     f10:	6a 30       	cpi	r22, 0x0A	; 10
     f12:	09 f4       	brne	.+2      	; 0xf16 <disk_ioctl+0x72>
     f14:	2f c1       	rjmp	.+606    	; 0x1174 <disk_ioctl+0x2d0>
     f16:	6b 30       	cpi	r22, 0x0B	; 11
     f18:	50 f4       	brcc	.+20     	; 0xf2e <disk_ioctl+0x8a>
     f1a:	61 30       	cpi	r22, 0x01	; 1
     f1c:	51 f1       	breq	.+84     	; 0xf72 <disk_ioctl+0xce>
     f1e:	61 30       	cpi	r22, 0x01	; 1
     f20:	a0 f0       	brcs	.+40     	; 0xf4a <disk_ioctl+0xa6>
     f22:	62 30       	cpi	r22, 0x02	; 2
     f24:	09 f4       	brne	.+2      	; 0xf28 <disk_ioctl+0x84>
     f26:	86 c0       	rjmp	.+268    	; 0x1034 <disk_ioctl+0x190>
     f28:	63 30       	cpi	r22, 0x03	; 3
     f2a:	69 f4       	brne	.+26     	; 0xf46 <disk_ioctl+0xa2>
     f2c:	89 c0       	rjmp	.+274    	; 0x1040 <disk_ioctl+0x19c>
     f2e:	6c 30       	cpi	r22, 0x0C	; 12
     f30:	09 f4       	brne	.+2      	; 0xf34 <disk_ioctl+0x90>
     f32:	27 c1       	rjmp	.+590    	; 0x1182 <disk_ioctl+0x2de>
     f34:	6c 30       	cpi	r22, 0x0C	; 12
     f36:	08 f4       	brcc	.+2      	; 0xf3a <disk_ioctl+0x96>
     f38:	22 c1       	rjmp	.+580    	; 0x117e <disk_ioctl+0x2da>
     f3a:	6d 30       	cpi	r22, 0x0D	; 13
     f3c:	09 f4       	brne	.+2      	; 0xf40 <disk_ioctl+0x9c>
     f3e:	2e c1       	rjmp	.+604    	; 0x119c <disk_ioctl+0x2f8>
     f40:	6e 30       	cpi	r22, 0x0E	; 14
     f42:	09 f4       	brne	.+2      	; 0xf46 <disk_ioctl+0xa2>
     f44:	4a c1       	rjmp	.+660    	; 0x11da <disk_ioctl+0x336>
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	64 c1       	rjmp	.+712    	; 0x1212 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     f4a:	0e 94 33 04 	call	0x866	; 0x866 <select>
     f4e:	88 23       	and	r24, r24
     f50:	09 f4       	brne	.+2      	; 0xf54 <disk_ioctl+0xb0>
     f52:	5e c1       	rjmp	.+700    	; 0x1210 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	e0 e6       	ldi	r30, 0x60	; 96
     f58:	f6 e0       	ldi	r31, 0x06	; 6
     f5a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	e0 ec       	ldi	r30, 0xC0	; 192
     f60:	f9 e0       	ldi	r31, 0x09	; 9
     f62:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     f64:	80 91 c2 09 	lds	r24, 0x09C2
     f68:	87 ff       	sbrs	r24, 7
     f6a:	fc cf       	rjmp	.-8      	; 0xf64 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     f6c:	80 91 c3 09 	lds	r24, 0x09C3
     f70:	ff c0       	rjmp	.+510    	; 0x1170 <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     f72:	89 e4       	ldi	r24, 0x49	; 73
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <disk_ioctl+0xe2>
     f84:	45 c1       	rjmp	.+650    	; 0x1210 <disk_ioctl+0x36c>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	60 e1       	ldi	r22, 0x10	; 16
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rcvr_datablock>
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <disk_ioctl+0xf4>
     f96:	3c c1       	rjmp	.+632    	; 0x1210 <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	82 95       	swap	r24
     f9c:	86 95       	lsr	r24
     f9e:	86 95       	lsr	r24
     fa0:	83 70       	andi	r24, 0x03	; 3
     fa2:	7a 85       	ldd	r23, Y+10	; 0x0a
     fa4:	49 85       	ldd	r20, Y+9	; 0x09
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	89 f4       	brne	.+34     	; 0xfcc <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
     faa:	87 2f       	mov	r24, r23
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	34 2f       	mov	r19, r20
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	aa 1f       	adc	r26, r26
     fc4:	bb 1f       	adc	r27, r27
     fc6:	2a 95       	dec	r18
     fc8:	d1 f7       	brne	.-12     	; 0xfbe <disk_ioctl+0x11a>
     fca:	cd c0       	rjmp	.+410    	; 0x1166 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     fcc:	42 95       	swap	r20
     fce:	46 95       	lsr	r20
     fd0:	46 95       	lsr	r20
     fd2:	43 70       	andi	r20, 0x03	; 3
     fd4:	28 85       	ldd	r18, Y+8	; 0x08
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	24 0f       	add	r18, r20
     fe2:	31 1d       	adc	r19, r1
     fe4:	2f 5f       	subi	r18, 0xFF	; 255
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	8f 81       	ldd	r24, Y+7	; 0x07
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	83 70       	andi	r24, 0x03	; 3
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	98 2f       	mov	r25, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	99 0f       	add	r25, r25
     ff6:	99 0f       	add	r25, r25
     ff8:	28 0f       	add	r18, r24
     ffa:	39 1f       	adc	r19, r25
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	6b 85       	ldd	r22, Y+11	; 0x0b
    1006:	66 1f       	adc	r22, r22
    1008:	66 27       	eor	r22, r22
    100a:	66 1f       	adc	r22, r22
    100c:	86 0f       	add	r24, r22
    100e:	8e 5f       	subi	r24, 0xFE	; 254
    1010:	73 70       	andi	r23, 0x03	; 3
    1012:	77 0f       	add	r23, r23
    1014:	87 0f       	add	r24, r23
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	09 97       	sbiw	r24, 0x09	; 9
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <disk_ioctl+0x180>
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	44 1f       	adc	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	8a 95       	dec	r24
    1026:	d2 f7       	brpl	.-12     	; 0x101c <disk_ioctl+0x178>
    1028:	f8 01       	movw	r30, r16
    102a:	20 83       	st	Z, r18
    102c:	31 83       	std	Z+1, r19	; 0x01
    102e:	42 83       	std	Z+2, r20	; 0x02
    1030:	53 83       	std	Z+3, r21	; 0x03
    1032:	9e c0       	rjmp	.+316    	; 0x1170 <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	fa 01       	movw	r30, r20
    103a:	80 83       	st	Z, r24
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	98 c0       	rjmp	.+304    	; 0x1170 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    1040:	80 91 f9 27 	lds	r24, 0x27F9
    1044:	f8 2e       	mov	r15, r24
    1046:	82 ff       	sbrs	r24, 2
    1048:	39 c0       	rjmp	.+114    	; 0x10bc <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    104a:	8d ec       	ldi	r24, 0xCD	; 205
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
    1058:	88 23       	and	r24, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <disk_ioctl+0x1ba>
    105c:	d9 c0       	rjmp	.+434    	; 0x1210 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	e0 ec       	ldi	r30, 0xC0	; 192
    1062:	f9 e0       	ldi	r31, 0x09	; 9
    1064:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1066:	80 91 c2 09 	lds	r24, 0x09C2
    106a:	87 ff       	sbrs	r24, 7
    106c:	fc cf       	rjmp	.-8      	; 0x1066 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    106e:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	60 e1       	ldi	r22, 0x10	; 16
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rcvr_datablock>
    107e:	88 23       	and	r24, r24
    1080:	09 f4       	brne	.+2      	; 0x1084 <disk_ioctl+0x1e0>
    1082:	c6 c0       	rjmp	.+396    	; 0x1210 <disk_ioctl+0x36c>
    1084:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1086:	e0 ec       	ldi	r30, 0xC0	; 192
    1088:	f9 e0       	ldi	r31, 0x09	; 9
    108a:	2f ef       	ldi	r18, 0xFF	; 255
    108c:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    108e:	80 91 c2 09 	lds	r24, 0x09C2
    1092:	87 ff       	sbrs	r24, 7
    1094:	fc cf       	rjmp	.-8      	; 0x108e <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    1096:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    109a:	91 50       	subi	r25, 0x01	; 1
    109c:	b9 f7       	brne	.-18     	; 0x108c <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    109e:	2b 85       	ldd	r18, Y+11	; 0x0b
    10a0:	22 95       	swap	r18
    10a2:	2f 70       	andi	r18, 0x0F	; 15
    10a4:	80 e1       	ldi	r24, 0x10	; 16
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <disk_ioctl+0x212>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	aa 1f       	adc	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	2a 95       	dec	r18
    10b8:	d2 f7       	brpl	.-12     	; 0x10ae <disk_ioctl+0x20a>
    10ba:	55 c0       	rjmp	.+170    	; 0x1166 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    10bc:	89 e4       	ldi	r24, 0x49	; 73
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
    10ca:	88 23       	and	r24, r24
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <disk_ioctl+0x22c>
    10ce:	a0 c0       	rjmp	.+320    	; 0x1210 <disk_ioctl+0x36c>
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	60 e1       	ldi	r22, 0x10	; 16
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rcvr_datablock>
    10dc:	88 23       	and	r24, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <disk_ioctl+0x23e>
    10e0:	97 c0       	rjmp	.+302    	; 0x1210 <disk_ioctl+0x36c>
    10e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    10e4:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    10e6:	f1 fe       	sbrs	r15, 1
    10e8:	1b c0       	rjmp	.+54     	; 0x1120 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    10ea:	88 1f       	adc	r24, r24
    10ec:	88 27       	eor	r24, r24
    10ee:	88 1f       	adc	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	24 2f       	mov	r18, r20
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	2f 73       	andi	r18, 0x3F	; 63
    10fa:	30 70       	andi	r19, 0x00	; 0
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	2e 85       	ldd	r18, Y+14	; 0x0e
    1106:	22 95       	swap	r18
    1108:	26 95       	lsr	r18
    110a:	26 95       	lsr	r18
    110c:	23 70       	andi	r18, 0x03	; 3
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	30 40       	sbci	r19, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <disk_ioctl+0x276>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	2a 95       	dec	r18
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <disk_ioctl+0x272>
    111e:	21 c0       	rjmp	.+66     	; 0x1162 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	23 70       	andi	r18, 0x03	; 3
    1126:	30 70       	andi	r19, 0x00	; 0
    1128:	f3 e0       	ldi	r31, 0x03	; 3
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	fa 95       	dec	r31
    1130:	e1 f7       	brne	.-8      	; 0x112a <disk_ioctl+0x286>
    1132:	82 95       	swap	r24
    1134:	86 95       	lsr	r24
    1136:	87 70       	andi	r24, 0x07	; 7
    1138:	28 0f       	add	r18, r24
    113a:	31 1d       	adc	r19, r1
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	84 2f       	mov	r24, r20
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	8c 77       	andi	r24, 0x7C	; 124
    1146:	90 70       	andi	r25, 0x00	; 0
    1148:	95 95       	asr	r25
    114a:	87 95       	ror	r24
    114c:	95 95       	asr	r25
    114e:	87 95       	ror	r24
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	ac 01       	movw	r20, r24
    1154:	24 9f       	mul	r18, r20
    1156:	c0 01       	movw	r24, r0
    1158:	25 9f       	mul	r18, r21
    115a:	90 0d       	add	r25, r0
    115c:	34 9f       	mul	r19, r20
    115e:	90 0d       	add	r25, r0
    1160:	11 24       	eor	r1, r1
    1162:	a0 e0       	ldi	r26, 0x00	; 0
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	f8 01       	movw	r30, r16
    1168:	80 83       	st	Z, r24
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	a2 83       	std	Z+2, r26	; 0x02
    116e:	b3 83       	std	Z+3, r27	; 0x03
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	4f c0       	rjmp	.+158    	; 0x1212 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    1174:	80 91 f9 27 	lds	r24, 0x27F9
    1178:	fa 01       	movw	r30, r20
    117a:	80 83       	st	Z, r24
    117c:	f9 cf       	rjmp	.-14     	; 0x1170 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    117e:	89 e4       	ldi	r24, 0x49	; 73
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1182:	8a e4       	ldi	r24, 0x4A	; 74
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
    1190:	88 23       	and	r24, r24
    1192:	f1 f5       	brne	.+124    	; 0x1210 <disk_ioctl+0x36c>
    1194:	c8 01       	movw	r24, r16
    1196:	60 e1       	ldi	r22, 0x10	; 16
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	35 c0       	rjmp	.+106    	; 0x1206 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    119c:	8a e7       	ldi	r24, 0x7A	; 122
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
    11aa:	88 23       	and	r24, r24
    11ac:	89 f5       	brne	.+98     	; 0x1210 <disk_ioctl+0x36c>
    11ae:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    11b0:	a0 ec       	ldi	r26, 0xC0	; 192
    11b2:	b9 e0       	ldi	r27, 0x09	; 9
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    11b6:	98 01       	movw	r18, r16
    11b8:	2d 5f       	subi	r18, 0xFD	; 253
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    11bc:	13 96       	adiw	r26, 0x03	; 3
    11be:	9c 93       	st	X, r25
    11c0:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    11c2:	80 91 c2 09 	lds	r24, 0x09C2
    11c6:	87 ff       	sbrs	r24, 7
    11c8:	fc cf       	rjmp	.-8      	; 0x11c2 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    11ca:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    11ce:	80 83       	st	Z, r24
    11d0:	e2 17       	cp	r30, r18
    11d2:	f3 07       	cpc	r31, r19
    11d4:	69 f2       	breq	.-102    	; 0x1170 <disk_ioctl+0x2cc>
    11d6:	31 96       	adiw	r30, 0x01	; 1
    11d8:	f1 cf       	rjmp	.-30     	; 0x11bc <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    11da:	8d ec       	ldi	r24, 0xCD	; 205
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	0e 94 01 05 	call	0xa02	; 0xa02 <send_cmd>
    11e8:	88 23       	and	r24, r24
    11ea:	91 f4       	brne	.+36     	; 0x1210 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	e0 ec       	ldi	r30, 0xC0	; 192
    11f0:	f9 e0       	ldi	r31, 0x09	; 9
    11f2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    11f4:	80 91 c2 09 	lds	r24, 0x09C2
    11f8:	87 ff       	sbrs	r24, 7
    11fa:	fc cf       	rjmp	.-8      	; 0x11f4 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    11fc:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    1200:	c8 01       	movw	r24, r16
    1202:	60 e4       	ldi	r22, 0x40	; 64
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rcvr_datablock>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <disk_ioctl+0x36e>
    1210:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    1212:	80 e1       	ldi	r24, 0x10	; 16
    1214:	e0 e6       	ldi	r30, 0x60	; 96
    1216:	f6 e0       	ldi	r31, 0x06	; 6
    1218:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	e0 ec       	ldi	r30, 0xC0	; 192
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1222:	80 91 c2 09 	lds	r24, 0x09C2
    1226:	87 ff       	sbrs	r24, 7
    1228:	fc cf       	rjmp	.-8      	; 0x1222 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    122a:	80 91 c3 09 	lds	r24, 0x09C3
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <disk_ioctl+0x392>
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <disk_ioctl+0x392>
    1234:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    1236:	89 2f       	mov	r24, r25
    1238:	60 96       	adiw	r28, 0x10	; 16
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	08 95       	ret

0000124a <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    124a:	80 91 f7 27 	lds	r24, 0x27F7
    if (n) Timer1 = --n;
    124e:	88 23       	and	r24, r24
    1250:	19 f0       	breq	.+6      	; 0x1258 <disk_timerproc+0xe>
    1252:	81 50       	subi	r24, 0x01	; 1
    1254:	80 93 f7 27 	sts	0x27F7, r24
    n = Timer2;
    1258:	80 91 f8 27 	lds	r24, 0x27F8
    if (n) Timer2 = --n;
    125c:	88 23       	and	r24, r24
    125e:	19 f0       	breq	.+6      	; 0x1266 <disk_timerproc+0x1c>
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	80 93 f8 27 	sts	0x27F8, r24

	s = Stat;
    1266:	80 91 5b 27 	lds	r24, 0x275B

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    126a:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    126c:	80 93 5b 27 	sts	0x275B, r24
}
    1270:	08 95       	ret

00001272 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	08 95       	ret

0000127c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    127c:	6f 92       	push	r6
    127e:	7f 92       	push	r7
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	4a 01       	movw	r8, r20
    129c:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    129e:	ca a4       	ldd	r12, Y+42	; 0x2a
    12a0:	db a4       	ldd	r13, Y+43	; 0x2b
    12a2:	ec a4       	ldd	r14, Y+44	; 0x2c
    12a4:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    12a6:	c4 16       	cp	r12, r20
    12a8:	d5 06       	cpc	r13, r21
    12aa:	e6 06       	cpc	r14, r22
    12ac:	f7 06       	cpc	r15, r23
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <move_window+0x36>
    12b0:	4e c0       	rjmp	.+156    	; 0x134e <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	88 23       	and	r24, r24
    12b6:	a1 f1       	breq	.+104    	; 0x1320 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    12b8:	3e e2       	ldi	r19, 0x2E	; 46
    12ba:	63 2e       	mov	r6, r19
    12bc:	71 2c       	mov	r7, r1
    12be:	6c 0e       	add	r6, r28
    12c0:	7d 1e       	adc	r7, r29
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	b3 01       	movw	r22, r6
    12c6:	a7 01       	movw	r20, r14
    12c8:	96 01       	movw	r18, r12
    12ca:	01 e0       	ldi	r16, 0x01	; 1
    12cc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    12d0:	88 23       	and	r24, r24
    12d2:	d9 f5       	brne	.+118    	; 0x134a <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    12d4:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    12d6:	8e 89       	ldd	r24, Y+22	; 0x16
    12d8:	9f 89       	ldd	r25, Y+23	; 0x17
    12da:	a8 8d       	ldd	r26, Y+24	; 0x18
    12dc:	b9 8d       	ldd	r27, Y+25	; 0x19
    12de:	2e 8d       	ldd	r18, Y+30	; 0x1e
    12e0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    12e2:	48 a1       	ldd	r20, Y+32	; 0x20
    12e4:	59 a1       	ldd	r21, Y+33	; 0x21
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	a4 1f       	adc	r26, r20
    12ec:	b5 1f       	adc	r27, r21
    12ee:	c8 16       	cp	r12, r24
    12f0:	d9 06       	cpc	r13, r25
    12f2:	ea 06       	cpc	r14, r26
    12f4:	fb 06       	cpc	r15, r27
    12f6:	a0 f4       	brcc	.+40     	; 0x1320 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    12f8:	1b 81       	ldd	r17, Y+3	; 0x03
    12fa:	10 c0       	rjmp	.+32     	; 0x131c <move_window+0xa0>
					wsect += fs->sects_fat;
    12fc:	8e 89       	ldd	r24, Y+22	; 0x16
    12fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1300:	a8 8d       	ldd	r26, Y+24	; 0x18
    1302:	b9 8d       	ldd	r27, Y+25	; 0x19
    1304:	c8 0e       	add	r12, r24
    1306:	d9 1e       	adc	r13, r25
    1308:	ea 1e       	adc	r14, r26
    130a:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	b3 01       	movw	r22, r6
    1310:	a7 01       	movw	r20, r14
    1312:	96 01       	movw	r18, r12
    1314:	01 e0       	ldi	r16, 0x01	; 1
    1316:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    131a:	11 50       	subi	r17, 0x01	; 1
    131c:	12 30       	cpi	r17, 0x02	; 2
    131e:	70 f7       	brcc	.-36     	; 0x12fc <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1320:	81 14       	cp	r8, r1
    1322:	91 04       	cpc	r9, r1
    1324:	a1 04       	cpc	r10, r1
    1326:	b1 04       	cpc	r11, r1
    1328:	91 f0       	breq	.+36     	; 0x134e <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    132a:	be 01       	movw	r22, r28
    132c:	62 5d       	subi	r22, 0xD2	; 210
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	a5 01       	movw	r20, r10
    1334:	94 01       	movw	r18, r8
    1336:	01 e0       	ldi	r16, 0x01	; 1
    1338:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    133c:	88 23       	and	r24, r24
    133e:	29 f4       	brne	.+10     	; 0x134a <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1340:	8a a6       	std	Y+42, r8	; 0x2a
    1342:	9b a6       	std	Y+43, r9	; 0x2b
    1344:	ac a6       	std	Y+44, r10	; 0x2c
    1346:	bd a6       	std	Y+45, r11	; 0x2d
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <move_window+0xd4>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <move_window+0xd4>
    134e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	7f 90       	pop	r7
    136a:	6f 90       	pop	r6
    136c:	08 95       	ret

0000136e <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    136e:	0f 93       	push	r16
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
	if (res == FR_OK) {
    1382:	88 23       	and	r24, r24
    1384:	09 f0       	breq	.+2      	; 0x1388 <sync+0x1a>
    1386:	7e c0       	rjmp	.+252    	; 0x1484 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1388:	88 81       	ld	r24, Y
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	09 f0       	breq	.+2      	; 0x1390 <sync+0x22>
    138e:	72 c0       	rjmp	.+228    	; 0x1474 <sync+0x106>
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <sync+0x2a>
    1396:	6e c0       	rjmp	.+220    	; 0x1474 <sync+0x106>
			fs->winsect = 0;
    1398:	1a a6       	std	Y+42, r1	; 0x2a
    139a:	1b a6       	std	Y+43, r1	; 0x2b
    139c:	1c a6       	std	Y+44, r1	; 0x2c
    139e:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    13a0:	be 01       	movw	r22, r28
    13a2:	62 5d       	subi	r22, 0xD2	; 210
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	fb 01       	movw	r30, r22
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    13ae:	11 92       	st	Z+, r1
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	2f ef       	ldi	r18, 0xFF	; 255
    13b4:	8f 3f       	cpi	r24, 0xFF	; 255
    13b6:	92 07       	cpc	r25, r18
    13b8:	d1 f7       	brne	.-12     	; 0x13ae <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    13ba:	c4 5d       	subi	r28, 0xD4	; 212
    13bc:	dd 4f       	sbci	r29, 0xFD	; 253
    13be:	85 e5       	ldi	r24, 0x55	; 85
    13c0:	89 93       	st	Y+, r24
    13c2:	8a ea       	ldi	r24, 0xAA	; 170
    13c4:	88 83       	st	Y, r24
    13c6:	cd 52       	subi	r28, 0x2D	; 45
    13c8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    13ca:	82 e5       	ldi	r24, 0x52	; 82
    13cc:	8e a7       	std	Y+46, r24	; 0x2e
    13ce:	8f a7       	std	Y+47, r24	; 0x2f
    13d0:	21 e6       	ldi	r18, 0x61	; 97
    13d2:	28 ab       	std	Y+48, r18	; 0x30
    13d4:	91 e4       	ldi	r25, 0x41	; 65
    13d6:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    13d8:	ce 5e       	subi	r28, 0xEE	; 238
    13da:	dd 4f       	sbci	r29, 0xFD	; 253
    13dc:	82 e7       	ldi	r24, 0x72	; 114
    13de:	89 93       	st	Y+, r24
    13e0:	89 93       	st	Y+, r24
    13e2:	99 93       	st	Y+, r25
    13e4:	28 83       	st	Y, r18
    13e6:	c5 51       	subi	r28, 0x15	; 21
    13e8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    13ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ec:	ca 5e       	subi	r28, 0xEA	; 234
    13ee:	dd 4f       	sbci	r29, 0xFD	; 253
    13f0:	88 83       	st	Y, r24
    13f2:	c6 51       	subi	r28, 0x16	; 22
    13f4:	d2 40       	sbci	r29, 0x02	; 2
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	c9 5e       	subi	r28, 0xE9	; 233
    13fa:	dd 4f       	sbci	r29, 0xFD	; 253
    13fc:	88 83       	st	Y, r24
    13fe:	c7 51       	subi	r28, 0x17	; 23
    1400:	d2 40       	sbci	r29, 0x02	; 2
    1402:	8e 85       	ldd	r24, Y+14	; 0x0e
    1404:	9f 85       	ldd	r25, Y+15	; 0x0f
    1406:	a8 89       	ldd	r26, Y+16	; 0x10
    1408:	b9 89       	ldd	r27, Y+17	; 0x11
    140a:	9d 01       	movw	r18, r26
    140c:	44 27       	eor	r20, r20
    140e:	55 27       	eor	r21, r21
    1410:	c8 5e       	subi	r28, 0xE8	; 232
    1412:	dd 4f       	sbci	r29, 0xFD	; 253
    1414:	28 83       	st	Y, r18
    1416:	21 96       	adiw	r28, 0x01	; 1
    1418:	8b 2f       	mov	r24, r27
    141a:	99 27       	eor	r25, r25
    141c:	aa 27       	eor	r26, r26
    141e:	bb 27       	eor	r27, r27
    1420:	88 83       	st	Y, r24
    1422:	c9 51       	subi	r28, 0x19	; 25
    1424:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1426:	8a 85       	ldd	r24, Y+10	; 0x0a
    1428:	c6 5e       	subi	r28, 0xE6	; 230
    142a:	dd 4f       	sbci	r29, 0xFD	; 253
    142c:	88 83       	st	Y, r24
    142e:	ca 51       	subi	r28, 0x1A	; 26
    1430:	d2 40       	sbci	r29, 0x02	; 2
    1432:	8b 85       	ldd	r24, Y+11	; 0x0b
    1434:	c5 5e       	subi	r28, 0xE5	; 229
    1436:	dd 4f       	sbci	r29, 0xFD	; 253
    1438:	88 83       	st	Y, r24
    143a:	cb 51       	subi	r28, 0x1B	; 27
    143c:	d2 40       	sbci	r29, 0x02	; 2
    143e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1440:	9b 85       	ldd	r25, Y+11	; 0x0b
    1442:	ac 85       	ldd	r26, Y+12	; 0x0c
    1444:	bd 85       	ldd	r27, Y+13	; 0x0d
    1446:	9d 01       	movw	r18, r26
    1448:	44 27       	eor	r20, r20
    144a:	55 27       	eor	r21, r21
    144c:	c4 5e       	subi	r28, 0xE4	; 228
    144e:	dd 4f       	sbci	r29, 0xFD	; 253
    1450:	28 83       	st	Y, r18
    1452:	21 96       	adiw	r28, 0x01	; 1
    1454:	8b 2f       	mov	r24, r27
    1456:	99 27       	eor	r25, r25
    1458:	aa 27       	eor	r26, r26
    145a:	bb 27       	eor	r27, r27
    145c:	88 83       	st	Y, r24
    145e:	cd 51       	subi	r28, 0x1D	; 29
    1460:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    1462:	2a 89       	ldd	r18, Y+18	; 0x12
    1464:	3b 89       	ldd	r19, Y+19	; 0x13
    1466:	4c 89       	ldd	r20, Y+20	; 0x14
    1468:	5d 89       	ldd	r21, Y+21	; 0x15
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	01 e0       	ldi	r16, 0x01	; 1
    146e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
			fs->fsi_flag = 0;
    1472:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	0e 94 52 07 	call	0xea4	; 0xea4 <disk_ioctl>
    1480:	81 11       	cpse	r24, r1
    1482:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	0f 91       	pop	r16
    148a:	08 95       	ret

0000148c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    148c:	7f 92       	push	r7
    148e:	8f 92       	push	r8
    1490:	9f 92       	push	r9
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	4c 01       	movw	r8, r24
    14a8:	7a 01       	movw	r14, r20
    14aa:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    14ac:	42 30       	cpi	r20, 0x02	; 2
    14ae:	51 05       	cpc	r21, r1
    14b0:	61 05       	cpc	r22, r1
    14b2:	71 05       	cpc	r23, r1
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <get_fat+0x2c>
    14b6:	bb c0       	rjmp	.+374    	; 0x162e <get_fat+0x1a2>
    14b8:	f4 01       	movw	r30, r8
    14ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    14bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    14be:	a4 8d       	ldd	r26, Z+28	; 0x1c
    14c0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    14c2:	48 17       	cp	r20, r24
    14c4:	59 07       	cpc	r21, r25
    14c6:	6a 07       	cpc	r22, r26
    14c8:	7b 07       	cpc	r23, r27
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <get_fat+0x42>
    14cc:	b0 c0       	rjmp	.+352    	; 0x162e <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    14ce:	a6 8c       	ldd	r10, Z+30	; 0x1e
    14d0:	b7 8c       	ldd	r11, Z+31	; 0x1f
    14d2:	c0 a0       	ldd	r12, Z+32	; 0x20
    14d4:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    14d6:	80 81       	ld	r24, Z
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	09 f4       	brne	.+2      	; 0x14de <get_fat+0x52>
    14dc:	4d c0       	rjmp	.+154    	; 0x1578 <get_fat+0xec>
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <get_fat+0x58>
    14e2:	68 c0       	rjmp	.+208    	; 0x15b4 <get_fat+0x128>
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <get_fat+0x5e>
    14e8:	a7 c0       	rjmp	.+334    	; 0x1638 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    14ea:	ea 01       	movw	r28, r20
    14ec:	d6 95       	lsr	r29
    14ee:	c7 95       	ror	r28
    14f0:	c4 0f       	add	r28, r20
    14f2:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    14f4:	ae 01       	movw	r20, r28
    14f6:	45 2f       	mov	r20, r21
    14f8:	55 27       	eor	r21, r21
    14fa:	46 95       	lsr	r20
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	4a 0d       	add	r20, r10
    1502:	5b 1d       	adc	r21, r11
    1504:	6c 1d       	adc	r22, r12
    1506:	7d 1d       	adc	r23, r13
    1508:	c4 01       	movw	r24, r8
    150a:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    150e:	88 23       	and	r24, r24
    1510:	09 f0       	breq	.+2      	; 0x1514 <get_fat+0x88>
    1512:	92 c0       	rjmp	.+292    	; 0x1638 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1514:	fe 01       	movw	r30, r28
    1516:	f1 70       	andi	r31, 0x01	; 1
    1518:	e8 0d       	add	r30, r8
    151a:	f9 1d       	adc	r31, r9
    151c:	76 a4       	ldd	r7, Z+46	; 0x2e
    151e:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1520:	ae 01       	movw	r20, r28
    1522:	45 2f       	mov	r20, r21
    1524:	55 27       	eor	r21, r21
    1526:	46 95       	lsr	r20
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	4a 0d       	add	r20, r10
    152e:	5b 1d       	adc	r21, r11
    1530:	6c 1d       	adc	r22, r12
    1532:	7d 1d       	adc	r23, r13
    1534:	c4 01       	movw	r24, r8
    1536:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    153a:	88 23       	and	r24, r24
    153c:	09 f0       	breq	.+2      	; 0x1540 <get_fat+0xb4>
    153e:	7c c0       	rjmp	.+248    	; 0x1638 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1540:	67 2d       	mov	r22, r7
    1542:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1544:	d1 70       	andi	r29, 0x01	; 1
    1546:	c8 0d       	add	r28, r8
    1548:	d9 1d       	adc	r29, r9
    154a:	9e a5       	ldd	r25, Y+46	; 0x2e
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	68 2b       	or	r22, r24
    1550:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1552:	c7 01       	movw	r24, r14
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	90 70       	andi	r25, 0x00	; 0
    1558:	89 2b       	or	r24, r25
    155a:	39 f0       	breq	.+14     	; 0x156a <get_fat+0xde>
    155c:	44 e0       	ldi	r20, 0x04	; 4
    155e:	76 95       	lsr	r23
    1560:	67 95       	ror	r22
    1562:	4a 95       	dec	r20
    1564:	e1 f7       	brne	.-8      	; 0x155e <get_fat+0xd2>
    1566:	9b 01       	movw	r18, r22
    1568:	22 c0       	rjmp	.+68     	; 0x15ae <get_fat+0x122>
    156a:	9b 01       	movw	r18, r22
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	3f 70       	andi	r19, 0x0F	; 15
    1572:	40 70       	andi	r20, 0x00	; 0
    1574:	50 70       	andi	r21, 0x00	; 0
    1576:	64 c0       	rjmp	.+200    	; 0x1640 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    1578:	45 2f       	mov	r20, r21
    157a:	56 2f       	mov	r21, r22
    157c:	67 2f       	mov	r22, r23
    157e:	77 27       	eor	r23, r23
    1580:	4a 0d       	add	r20, r10
    1582:	5b 1d       	adc	r21, r11
    1584:	6c 1d       	adc	r22, r12
    1586:	7d 1d       	adc	r23, r13
    1588:	c4 01       	movw	r24, r8
    158a:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    158e:	88 23       	and	r24, r24
    1590:	09 f0       	breq	.+2      	; 0x1594 <get_fat+0x108>
    1592:	52 c0       	rjmp	.+164    	; 0x1638 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1594:	f7 01       	movw	r30, r14
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	f1 70       	andi	r31, 0x01	; 1
    159c:	e8 0d       	add	r30, r8
    159e:	f9 1d       	adc	r31, r9
    15a0:	97 a5       	ldd	r25, Z+47	; 0x2f
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	26 a5       	ldd	r18, Z+46	; 0x2e
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	82 2b       	or	r24, r18
    15aa:	93 2b       	or	r25, r19
    15ac:	9c 01       	movw	r18, r24
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    15b4:	97 e0       	ldi	r25, 0x07	; 7
    15b6:	76 95       	lsr	r23
    15b8:	67 95       	ror	r22
    15ba:	57 95       	ror	r21
    15bc:	47 95       	ror	r20
    15be:	9a 95       	dec	r25
    15c0:	d1 f7       	brne	.-12     	; 0x15b6 <get_fat+0x12a>
    15c2:	4a 0d       	add	r20, r10
    15c4:	5b 1d       	adc	r21, r11
    15c6:	6c 1d       	adc	r22, r12
    15c8:	7d 1d       	adc	r23, r13
    15ca:	c4 01       	movw	r24, r8
    15cc:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    15d0:	88 23       	and	r24, r24
    15d2:	91 f5       	brne	.+100    	; 0x1638 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    15d4:	f7 01       	movw	r30, r14
    15d6:	ee 0f       	add	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	f1 70       	andi	r31, 0x01	; 1
    15e0:	e8 0d       	add	r30, r8
    15e2:	f9 1d       	adc	r31, r9
    15e4:	81 a9       	ldd	r24, Z+49	; 0x31
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	58 2f       	mov	r21, r24
    15ee:	44 27       	eor	r20, r20
    15f0:	33 27       	eor	r19, r19
    15f2:	22 27       	eor	r18, r18
    15f4:	80 a9       	ldd	r24, Z+48	; 0x30
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e0       	ldi	r26, 0x00	; 0
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	dc 01       	movw	r26, r24
    15fe:	99 27       	eor	r25, r25
    1600:	88 27       	eor	r24, r24
    1602:	28 2b       	or	r18, r24
    1604:	39 2b       	or	r19, r25
    1606:	4a 2b       	or	r20, r26
    1608:	5b 2b       	or	r21, r27
    160a:	86 a5       	ldd	r24, Z+46	; 0x2e
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	28 2b       	or	r18, r24
    1614:	39 2b       	or	r19, r25
    1616:	4a 2b       	or	r20, r26
    1618:	5b 2b       	or	r21, r27
    161a:	97 a5       	ldd	r25, Z+47	; 0x2f
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	28 2b       	or	r18, r24
    1624:	39 2b       	or	r19, r25
    1626:	4a 2b       	or	r20, r26
    1628:	5b 2b       	or	r21, r27
    162a:	5f 70       	andi	r21, 0x0F	; 15
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <get_fat+0x1b4>
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <get_fat+0x1b4>
    1638:	2f ef       	ldi	r18, 0xFF	; 255
    163a:	3f ef       	ldi	r19, 0xFF	; 255
    163c:	4f ef       	ldi	r20, 0xFF	; 255
    163e:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    1640:	b9 01       	movw	r22, r18
    1642:	ca 01       	movw	r24, r20
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	9f 90       	pop	r9
    165a:	8f 90       	pop	r8
    165c:	7f 90       	pop	r7
    165e:	08 95       	ret

00001660 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1660:	2f 92       	push	r2
    1662:	3f 92       	push	r3
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	3c 01       	movw	r6, r24
    1686:	6a 01       	movw	r12, r20
    1688:	7b 01       	movw	r14, r22
    168a:	48 01       	movw	r8, r16
    168c:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    168e:	42 30       	cpi	r20, 0x02	; 2
    1690:	51 05       	cpc	r21, r1
    1692:	61 05       	cpc	r22, r1
    1694:	71 05       	cpc	r23, r1
    1696:	08 f4       	brcc	.+2      	; 0x169a <put_fat+0x3a>
    1698:	ba c0       	rjmp	.+372    	; 0x180e <put_fat+0x1ae>
    169a:	f3 01       	movw	r30, r6
    169c:	82 8d       	ldd	r24, Z+26	; 0x1a
    169e:	93 8d       	ldd	r25, Z+27	; 0x1b
    16a0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16a2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    16a4:	48 17       	cp	r20, r24
    16a6:	59 07       	cpc	r21, r25
    16a8:	6a 07       	cpc	r22, r26
    16aa:	7b 07       	cpc	r23, r27
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <put_fat+0x50>
    16ae:	af c0       	rjmp	.+350    	; 0x180e <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    16b0:	26 8c       	ldd	r2, Z+30	; 0x1e
    16b2:	37 8c       	ldd	r3, Z+31	; 0x1f
    16b4:	40 a0       	ldd	r4, Z+32	; 0x20
    16b6:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    16b8:	80 81       	ld	r24, Z
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <put_fat+0x60>
    16be:	64 c0       	rjmp	.+200    	; 0x1788 <put_fat+0x128>
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <put_fat+0x66>
    16c4:	7a c0       	rjmp	.+244    	; 0x17ba <put_fat+0x15a>
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	11 f0       	breq	.+4      	; 0x16ce <put_fat+0x6e>
    16ca:	22 e0       	ldi	r18, 0x02	; 2
    16cc:	9c c0       	rjmp	.+312    	; 0x1806 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    16ce:	ea 01       	movw	r28, r20
    16d0:	d6 95       	lsr	r29
    16d2:	c7 95       	ror	r28
    16d4:	c4 0f       	add	r28, r20
    16d6:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    16d8:	ae 01       	movw	r20, r28
    16da:	45 2f       	mov	r20, r21
    16dc:	55 27       	eor	r21, r21
    16de:	46 95       	lsr	r20
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	42 0d       	add	r20, r2
    16e6:	53 1d       	adc	r21, r3
    16e8:	64 1d       	adc	r22, r4
    16ea:	75 1d       	adc	r23, r5
    16ec:	c3 01       	movw	r24, r6
    16ee:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    16f2:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    16f4:	88 23       	and	r24, r24
    16f6:	09 f0       	breq	.+2      	; 0x16fa <put_fat+0x9a>
    16f8:	86 c0       	rjmp	.+268    	; 0x1806 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    16fa:	de 01       	movw	r26, r28
    16fc:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    16fe:	86 01       	movw	r16, r12
    1700:	01 70       	andi	r16, 0x01	; 1
    1702:	10 70       	andi	r17, 0x00	; 0
    1704:	01 15       	cp	r16, r1
    1706:	11 05       	cpc	r17, r1
    1708:	51 f0       	breq	.+20     	; 0x171e <put_fat+0xbe>
    170a:	f3 01       	movw	r30, r6
    170c:	ea 0f       	add	r30, r26
    170e:	fb 1f       	adc	r31, r27
    1710:	86 a5       	ldd	r24, Z+46	; 0x2e
    1712:	8f 70       	andi	r24, 0x0F	; 15
    1714:	98 2d       	mov	r25, r8
    1716:	92 95       	swap	r25
    1718:	90 7f       	andi	r25, 0xF0	; 240
    171a:	98 2b       	or	r25, r24
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <put_fat+0xc0>
    171e:	98 2d       	mov	r25, r8
    1720:	a6 0d       	add	r26, r6
    1722:	b7 1d       	adc	r27, r7
    1724:	9e 96       	adiw	r26, 0x2e	; 46
    1726:	9c 93       	st	X, r25
			bc++;
    1728:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	f3 01       	movw	r30, r6
    172e:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    1730:	ae 01       	movw	r20, r28
    1732:	45 2f       	mov	r20, r21
    1734:	55 27       	eor	r21, r21
    1736:	46 95       	lsr	r20
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	42 0d       	add	r20, r2
    173e:	53 1d       	adc	r21, r3
    1740:	64 1d       	adc	r22, r4
    1742:	75 1d       	adc	r23, r5
    1744:	c3 01       	movw	r24, r6
    1746:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    174a:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    174c:	88 23       	and	r24, r24
    174e:	09 f0       	breq	.+2      	; 0x1752 <put_fat+0xf2>
    1750:	5a c0       	rjmp	.+180    	; 0x1806 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1752:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1754:	01 2b       	or	r16, r17
    1756:	49 f0       	breq	.+18     	; 0x176a <put_fat+0x10a>
    1758:	64 e0       	ldi	r22, 0x04	; 4
    175a:	b6 94       	lsr	r11
    175c:	a7 94       	ror	r10
    175e:	97 94       	ror	r9
    1760:	87 94       	ror	r8
    1762:	6a 95       	dec	r22
    1764:	d1 f7       	brne	.-12     	; 0x175a <put_fat+0xfa>
    1766:	48 2d       	mov	r20, r8
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <put_fat+0x120>
    176a:	f3 01       	movw	r30, r6
    176c:	ec 0f       	add	r30, r28
    176e:	fd 1f       	adc	r31, r29
    1770:	46 a5       	ldd	r20, Z+46	; 0x2e
    1772:	40 7f       	andi	r20, 0xF0	; 240
    1774:	bb 27       	eor	r27, r27
    1776:	ab 2d       	mov	r26, r11
    1778:	9a 2d       	mov	r25, r10
    177a:	89 2d       	mov	r24, r9
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	48 2b       	or	r20, r24
    1780:	c6 0d       	add	r28, r6
    1782:	d7 1d       	adc	r29, r7
    1784:	4e a7       	std	Y+46, r20	; 0x2e
    1786:	3f c0       	rjmp	.+126    	; 0x1806 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    1788:	77 27       	eor	r23, r23
    178a:	6f 2d       	mov	r22, r15
    178c:	5e 2d       	mov	r21, r14
    178e:	4d 2d       	mov	r20, r13
    1790:	42 0d       	add	r20, r2
    1792:	53 1d       	adc	r21, r3
    1794:	64 1d       	adc	r22, r4
    1796:	75 1d       	adc	r23, r5
    1798:	c3 01       	movw	r24, r6
    179a:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    179e:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17a0:	88 23       	and	r24, r24
    17a2:	89 f5       	brne	.+98     	; 0x1806 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    17a4:	f6 01       	movw	r30, r12
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	f1 70       	andi	r31, 0x01	; 1
    17ac:	e6 0d       	add	r30, r6
    17ae:	f7 1d       	adc	r31, r7
    17b0:	86 a6       	std	Z+46, r8	; 0x2e
    17b2:	89 2d       	mov	r24, r9
    17b4:	99 27       	eor	r25, r25
    17b6:	87 a7       	std	Z+47, r24	; 0x2f
    17b8:	26 c0       	rjmp	.+76     	; 0x1806 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    17ba:	87 e0       	ldi	r24, 0x07	; 7
    17bc:	76 95       	lsr	r23
    17be:	67 95       	ror	r22
    17c0:	57 95       	ror	r21
    17c2:	47 95       	ror	r20
    17c4:	8a 95       	dec	r24
    17c6:	d1 f7       	brne	.-12     	; 0x17bc <put_fat+0x15c>
    17c8:	42 0d       	add	r20, r2
    17ca:	53 1d       	adc	r21, r3
    17cc:	64 1d       	adc	r22, r4
    17ce:	75 1d       	adc	r23, r5
    17d0:	c3 01       	movw	r24, r6
    17d2:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    17d6:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17d8:	88 23       	and	r24, r24
    17da:	a9 f4       	brne	.+42     	; 0x1806 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    17dc:	f6 01       	movw	r30, r12
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	f1 70       	andi	r31, 0x01	; 1
    17e8:	e6 0d       	add	r30, r6
    17ea:	f7 1d       	adc	r31, r7
    17ec:	86 a6       	std	Z+46, r8	; 0x2e
    17ee:	89 2d       	mov	r24, r9
    17f0:	99 27       	eor	r25, r25
    17f2:	87 a7       	std	Z+47, r24	; 0x2f
    17f4:	c5 01       	movw	r24, r10
    17f6:	aa 27       	eor	r26, r26
    17f8:	bb 27       	eor	r27, r27
    17fa:	80 ab       	std	Z+48, r24	; 0x30
    17fc:	8b 2d       	mov	r24, r11
    17fe:	99 27       	eor	r25, r25
    1800:	aa 27       	eor	r26, r26
    1802:	bb 27       	eor	r27, r27
    1804:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	f3 01       	movw	r30, r6
    180a:	84 83       	std	Z+4, r24	; 0x04
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <put_fat+0x1b0>
    180e:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1810:	82 2f       	mov	r24, r18
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	4f 90       	pop	r4
    1832:	3f 90       	pop	r3
    1834:	2f 90       	pop	r2
    1836:	08 95       	ret

00001838 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
    1850:	7a 01       	movw	r14, r20
    1852:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1854:	42 30       	cpi	r20, 0x02	; 2
    1856:	51 05       	cpc	r21, r1
    1858:	61 05       	cpc	r22, r1
    185a:	71 05       	cpc	r23, r1
    185c:	08 f4       	brcc	.+2      	; 0x1860 <remove_chain+0x28>
    185e:	58 c0       	rjmp	.+176    	; 0x1910 <remove_chain+0xd8>
    1860:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1862:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1864:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1866:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1868:	48 17       	cp	r20, r24
    186a:	59 07       	cpc	r21, r25
    186c:	6a 07       	cpc	r22, r26
    186e:	7b 07       	cpc	r23, r27
    1870:	08 f4       	brcc	.+2      	; 0x1874 <remove_chain+0x3c>
    1872:	41 c0       	rjmp	.+130    	; 0x18f6 <remove_chain+0xbe>
    1874:	4d c0       	rjmp	.+154    	; 0x1910 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1876:	ce 01       	movw	r24, r28
    1878:	b8 01       	movw	r22, r16
    187a:	a7 01       	movw	r20, r14
    187c:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    1880:	5b 01       	movw	r10, r22
    1882:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1884:	61 15       	cp	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	81 05       	cpc	r24, r1
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <remove_chain+0x58>
    188e:	42 c0       	rjmp	.+132    	; 0x1914 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	a8 16       	cp	r10, r24
    1894:	b1 04       	cpc	r11, r1
    1896:	c1 04       	cpc	r12, r1
    1898:	d1 04       	cpc	r13, r1
    189a:	d1 f1       	breq	.+116    	; 0x1910 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    189c:	2f ef       	ldi	r18, 0xFF	; 255
    189e:	a2 16       	cp	r10, r18
    18a0:	2f ef       	ldi	r18, 0xFF	; 255
    18a2:	b2 06       	cpc	r11, r18
    18a4:	2f ef       	ldi	r18, 0xFF	; 255
    18a6:	c2 06       	cpc	r12, r18
    18a8:	2f ef       	ldi	r18, 0xFF	; 255
    18aa:	d2 06       	cpc	r13, r18
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <remove_chain+0x7a>
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	32 c0       	rjmp	.+100    	; 0x1916 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    18b2:	ce 01       	movw	r24, r28
    18b4:	b8 01       	movw	r22, r16
    18b6:	a7 01       	movw	r20, r14
    18b8:	00 e0       	ldi	r16, 0x00	; 0
    18ba:	10 e0       	ldi	r17, 0x00	; 0
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	0e 94 30 0b 	call	0x1660	; 0x1660 <put_fat>
			if (res != FR_OK) break;
    18c4:	88 23       	and	r24, r24
    18c6:	39 f5       	brne	.+78     	; 0x1916 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    18c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    18cc:	a8 89       	ldd	r26, Y+16	; 0x10
    18ce:	b9 89       	ldd	r27, Y+17	; 0x11
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	2f ef       	ldi	r18, 0xFF	; 255
    18d4:	92 07       	cpc	r25, r18
    18d6:	2f ef       	ldi	r18, 0xFF	; 255
    18d8:	a2 07       	cpc	r26, r18
    18da:	2f ef       	ldi	r18, 0xFF	; 255
    18dc:	b2 07       	cpc	r27, r18
    18de:	41 f0       	breq	.+16     	; 0x18f0 <remove_chain+0xb8>
				fs->free_clust++;
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	a1 1d       	adc	r26, r1
    18e4:	b1 1d       	adc	r27, r1
    18e6:	8e 87       	std	Y+14, r24	; 0x0e
    18e8:	9f 87       	std	Y+15, r25	; 0x0f
    18ea:	a8 8b       	std	Y+16, r26	; 0x10
    18ec:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    18ee:	9d 82       	std	Y+5, r9	; 0x05
    18f0:	86 01       	movw	r16, r12
    18f2:	75 01       	movw	r14, r10
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <remove_chain+0xc2>
    18f6:	99 24       	eor	r9, r9
    18f8:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    18fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18fe:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1900:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1902:	e8 16       	cp	r14, r24
    1904:	f9 06       	cpc	r15, r25
    1906:	0a 07       	cpc	r16, r26
    1908:	1b 07       	cpc	r17, r27
    190a:	08 f4       	brcc	.+2      	; 0x190e <remove_chain+0xd6>
    190c:	b4 cf       	rjmp	.-152    	; 0x1876 <remove_chain+0x3e>
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <remove_chain+0xdc>
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <remove_chain+0xde>
    1914:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	df 90       	pop	r13
    1924:	cf 90       	pop	r12
    1926:	bf 90       	pop	r11
    1928:	af 90       	pop	r10
    192a:	9f 90       	pop	r9
    192c:	08 95       	ret

0000192e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    192e:	2f 92       	push	r2
    1930:	3f 92       	push	r3
    1932:	4f 92       	push	r4
    1934:	5f 92       	push	r5
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <create_chain+0x26>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	1c 01       	movw	r2, r24
    195c:	2a 01       	movw	r4, r20
    195e:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    1960:	dc 01       	movw	r26, r24
    1962:	5a 96       	adiw	r26, 0x1a	; 26
    1964:	8d 91       	ld	r24, X+
    1966:	9d 91       	ld	r25, X+
    1968:	0d 90       	ld	r0, X+
    196a:	bc 91       	ld	r27, X
    196c:	a0 2d       	mov	r26, r0
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	ab 83       	std	Y+3, r26	; 0x03
    1974:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1976:	41 15       	cp	r20, r1
    1978:	51 05       	cpc	r21, r1
    197a:	61 05       	cpc	r22, r1
    197c:	71 05       	cpc	r23, r1
    197e:	81 f4       	brne	.+32     	; 0x19a0 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    1980:	f1 01       	movw	r30, r2
    1982:	82 84       	ldd	r8, Z+10	; 0x0a
    1984:	93 84       	ldd	r9, Z+11	; 0x0b
    1986:	a4 84       	ldd	r10, Z+12	; 0x0c
    1988:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    198a:	81 14       	cp	r8, r1
    198c:	91 04       	cpc	r9, r1
    198e:	a1 04       	cpc	r10, r1
    1990:	b1 04       	cpc	r11, r1
    1992:	11 f1       	breq	.+68     	; 0x19d8 <create_chain+0xaa>
    1994:	88 16       	cp	r8, r24
    1996:	99 06       	cpc	r9, r25
    1998:	aa 06       	cpc	r10, r26
    199a:	bb 06       	cpc	r11, r27
    199c:	e8 f4       	brcc	.+58     	; 0x19d8 <create_chain+0xaa>
    199e:	21 c0       	rjmp	.+66     	; 0x19e2 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    19a0:	c1 01       	movw	r24, r2
    19a2:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    19aa:	62 30       	cpi	r22, 0x02	; 2
    19ac:	71 05       	cpc	r23, r1
    19ae:	81 05       	cpc	r24, r1
    19b0:	91 05       	cpc	r25, r1
    19b2:	28 f4       	brcc	.+10     	; 0x19be <create_chain+0x90>
    19b4:	21 e0       	ldi	r18, 0x01	; 1
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	93 c0       	rjmp	.+294    	; 0x1ae4 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	ab 81       	ldd	r26, Y+3	; 0x03
    19c4:	bc 81       	ldd	r27, Y+4	; 0x04
    19c6:	28 17       	cp	r18, r24
    19c8:	39 07       	cpc	r19, r25
    19ca:	4a 07       	cpc	r20, r26
    19cc:	5b 07       	cpc	r21, r27
    19ce:	08 f4       	brcc	.+2      	; 0x19d2 <create_chain+0xa4>
    19d0:	89 c0       	rjmp	.+274    	; 0x1ae4 <create_chain+0x1b6>
    19d2:	53 01       	movw	r10, r6
    19d4:	42 01       	movw	r8, r4
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <create_chain+0xb4>
    19d8:	b1 e0       	ldi	r27, 0x01	; 1
    19da:	8b 2e       	mov	r8, r27
    19dc:	91 2c       	mov	r9, r1
    19de:	a1 2c       	mov	r10, r1
    19e0:	b1 2c       	mov	r11, r1
    19e2:	75 01       	movw	r14, r10
    19e4:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    19e6:	08 94       	sec
    19e8:	c1 1c       	adc	r12, r1
    19ea:	d1 1c       	adc	r13, r1
    19ec:	e1 1c       	adc	r14, r1
    19ee:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	ab 81       	ldd	r26, Y+3	; 0x03
    19f6:	bc 81       	ldd	r27, Y+4	; 0x04
    19f8:	c8 16       	cp	r12, r24
    19fa:	d9 06       	cpc	r13, r25
    19fc:	ea 06       	cpc	r14, r26
    19fe:	fb 06       	cpc	r15, r27
    1a00:	60 f0       	brcs	.+24     	; 0x1a1a <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	89 16       	cp	r8, r25
    1a06:	91 04       	cpc	r9, r1
    1a08:	a1 04       	cpc	r10, r1
    1a0a:	b1 04       	cpc	r11, r1
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <create_chain+0xe2>
    1a0e:	61 c0       	rjmp	.+194    	; 0x1ad2 <create_chain+0x1a4>
    1a10:	a2 e0       	ldi	r26, 0x02	; 2
    1a12:	ca 2e       	mov	r12, r26
    1a14:	d1 2c       	mov	r13, r1
    1a16:	e1 2c       	mov	r14, r1
    1a18:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a1a:	c1 01       	movw	r24, r2
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	a6 01       	movw	r20, r12
    1a20:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1a28:	61 15       	cp	r22, r1
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	81 05       	cpc	r24, r1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	a9 f0       	breq	.+42     	; 0x1a5c <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1a32:	6f 3f       	cpi	r22, 0xFF	; 255
    1a34:	af ef       	ldi	r26, 0xFF	; 255
    1a36:	7a 07       	cpc	r23, r26
    1a38:	af ef       	ldi	r26, 0xFF	; 255
    1a3a:	8a 07       	cpc	r24, r26
    1a3c:	af ef       	ldi	r26, 0xFF	; 255
    1a3e:	9a 07       	cpc	r25, r26
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <create_chain+0x116>
    1a42:	50 c0       	rjmp	.+160    	; 0x1ae4 <create_chain+0x1b6>
    1a44:	61 30       	cpi	r22, 0x01	; 1
    1a46:	71 05       	cpc	r23, r1
    1a48:	81 05       	cpc	r24, r1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <create_chain+0x122>
    1a4e:	4a c0       	rjmp	.+148    	; 0x1ae4 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1a50:	c8 14       	cp	r12, r8
    1a52:	d9 04       	cpc	r13, r9
    1a54:	ea 04       	cpc	r14, r10
    1a56:	fb 04       	cpc	r15, r11
    1a58:	31 f6       	brne	.-116    	; 0x19e6 <create_chain+0xb8>
    1a5a:	3b c0       	rjmp	.+118    	; 0x1ad2 <create_chain+0x1a4>
    1a5c:	bc 2c       	mov	r11, r12
    1a5e:	ad 2c       	mov	r10, r13
    1a60:	9e 2c       	mov	r9, r14
    1a62:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1a64:	c1 01       	movw	r24, r2
    1a66:	a6 01       	movw	r20, r12
    1a68:	b7 01       	movw	r22, r14
    1a6a:	0f ef       	ldi	r16, 0xFF	; 255
    1a6c:	1f ef       	ldi	r17, 0xFF	; 255
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	3f e0       	ldi	r19, 0x0F	; 15
    1a72:	0e 94 30 0b 	call	0x1660	; 0x1660 <put_fat>
    1a76:	88 23       	and	r24, r24
    1a78:	89 f5       	brne	.+98     	; 0x1adc <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1a7a:	41 14       	cp	r4, r1
    1a7c:	51 04       	cpc	r5, r1
    1a7e:	61 04       	cpc	r6, r1
    1a80:	71 04       	cpc	r7, r1
    1a82:	49 f0       	breq	.+18     	; 0x1a96 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1a84:	c1 01       	movw	r24, r2
    1a86:	b3 01       	movw	r22, r6
    1a88:	a2 01       	movw	r20, r4
    1a8a:	86 01       	movw	r16, r12
    1a8c:	97 01       	movw	r18, r14
    1a8e:	0e 94 30 0b 	call	0x1660	; 0x1660 <put_fat>
    1a92:	88 23       	and	r24, r24
    1a94:	19 f5       	brne	.+70     	; 0x1adc <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1a96:	f1 01       	movw	r30, r2
    1a98:	b2 86       	std	Z+10, r11	; 0x0a
    1a9a:	a3 86       	std	Z+11, r10	; 0x0b
    1a9c:	94 86       	std	Z+12, r9	; 0x0c
    1a9e:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1aa0:	86 85       	ldd	r24, Z+14	; 0x0e
    1aa2:	97 85       	ldd	r25, Z+15	; 0x0f
    1aa4:	a0 89       	ldd	r26, Z+16	; 0x10
    1aa6:	b1 89       	ldd	r27, Z+17	; 0x11
    1aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aaa:	ff ef       	ldi	r31, 0xFF	; 255
    1aac:	9f 07       	cpc	r25, r31
    1aae:	ff ef       	ldi	r31, 0xFF	; 255
    1ab0:	af 07       	cpc	r26, r31
    1ab2:	ff ef       	ldi	r31, 0xFF	; 255
    1ab4:	bf 07       	cpc	r27, r31
    1ab6:	51 f0       	breq	.+20     	; 0x1acc <create_chain+0x19e>
		fs->free_clust--;
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	a1 09       	sbc	r26, r1
    1abc:	b1 09       	sbc	r27, r1
    1abe:	f1 01       	movw	r30, r2
    1ac0:	86 87       	std	Z+14, r24	; 0x0e
    1ac2:	97 87       	std	Z+15, r25	; 0x0f
    1ac4:	a0 8b       	std	Z+16, r26	; 0x10
    1ac6:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	85 83       	std	Z+5, r24	; 0x05
    1acc:	a7 01       	movw	r20, r14
    1ace:	96 01       	movw	r18, r12
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <create_chain+0x1b6>
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <create_chain+0x1b6>
    1adc:	2f ef       	ldi	r18, 0xFF	; 255
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f ef       	ldi	r20, 0xFF	; 255
    1ae2:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1ae4:	b9 01       	movw	r22, r18
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	24 96       	adiw	r28, 0x04	; 4
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	9f 90       	pop	r9
    1b04:	8f 90       	pop	r8
    1b06:	7f 90       	pop	r7
    1b08:	6f 90       	pop	r6
    1b0a:	5f 90       	pop	r5
    1b0c:	4f 90       	pop	r4
    1b0e:	3f 90       	pop	r3
    1b10:	2f 90       	pop	r2
    1b12:	08 95       	ret

00001b14 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	ec 01       	movw	r28, r24
    1b22:	7a 01       	movw	r14, r20
    1b24:	8b 01       	movw	r16, r22
	clst -= 2;
    1b26:	8e ef       	ldi	r24, 0xFE	; 254
    1b28:	9f ef       	ldi	r25, 0xFF	; 255
    1b2a:	af ef       	ldi	r26, 0xFF	; 255
    1b2c:	bf ef       	ldi	r27, 0xFF	; 255
    1b2e:	e8 0e       	add	r14, r24
    1b30:	f9 1e       	adc	r15, r25
    1b32:	0a 1f       	adc	r16, r26
    1b34:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1b36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b3a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b3c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b3e:	02 97       	sbiw	r24, 0x02	; 2
    1b40:	a1 09       	sbc	r26, r1
    1b42:	b1 09       	sbc	r27, r1
    1b44:	e8 16       	cp	r14, r24
    1b46:	f9 06       	cpc	r15, r25
    1b48:	0a 07       	cpc	r16, r26
    1b4a:	1b 07       	cpc	r17, r27
    1b4c:	28 f0       	brcs	.+10     	; 0x1b58 <clust2sect+0x44>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	12 c0       	rjmp	.+36     	; 0x1b7c <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1b58:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	c8 01       	movw	r24, r16
    1b62:	b7 01       	movw	r22, r14
    1b64:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	8e a1       	ldd	r24, Y+38	; 0x26
    1b6e:	9f a1       	ldd	r25, Y+39	; 0x27
    1b70:	a8 a5       	ldd	r26, Y+40	; 0x28
    1b72:	b9 a5       	ldd	r27, Y+41	; 0x29
    1b74:	28 0f       	add	r18, r24
    1b76:	39 1f       	adc	r19, r25
    1b78:	4a 1f       	adc	r20, r26
    1b7a:	5b 1f       	adc	r21, r27
}
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	ca 01       	movw	r24, r20
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	08 95       	ret

00001b8e <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1b8e:	af 92       	push	r10
    1b90:	bf 92       	push	r11
    1b92:	cf 92       	push	r12
    1b94:	df 92       	push	r13
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	5c 01       	movw	r10, r24
    1ba4:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	14 96       	adiw	r26, 0x04	; 4
    1baa:	6d 93       	st	X+, r22
    1bac:	7c 93       	st	X, r23
    1bae:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1bb0:	16 96       	adiw	r26, 0x06	; 6
    1bb2:	4d 91       	ld	r20, X+
    1bb4:	5d 91       	ld	r21, X+
    1bb6:	6d 91       	ld	r22, X+
    1bb8:	7c 91       	ld	r23, X
    1bba:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1bbc:	41 30       	cpi	r20, 0x01	; 1
    1bbe:	51 05       	cpc	r21, r1
    1bc0:	61 05       	cpc	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <dir_seek+0x3a>
    1bc6:	d3 c0       	rjmp	.+422    	; 0x1d6e <dir_seek+0x1e0>
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bce:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bd0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1bd2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1bd4:	48 17       	cp	r20, r24
    1bd6:	59 07       	cpc	r21, r25
    1bd8:	6a 07       	cpc	r22, r26
    1bda:	7b 07       	cpc	r23, r27
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <dir_seek+0x52>
    1bde:	c7 c0       	rjmp	.+398    	; 0x1d6e <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1be0:	41 15       	cp	r20, r1
    1be2:	51 05       	cpc	r21, r1
    1be4:	61 05       	cpc	r22, r1
    1be6:	71 05       	cpc	r23, r1
    1be8:	81 f5       	brne	.+96     	; 0x1c4a <dir_seek+0xbc>
    1bea:	80 81       	ld	r24, Z
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	49 f4       	brne	.+18     	; 0x1c02 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1bf0:	42 a1       	ldd	r20, Z+34	; 0x22
    1bf2:	53 a1       	ldd	r21, Z+35	; 0x23
    1bf4:	64 a1       	ldd	r22, Z+36	; 0x24
    1bf6:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1bf8:	41 15       	cp	r20, r1
    1bfa:	51 05       	cpc	r21, r1
    1bfc:	61 05       	cpc	r22, r1
    1bfe:	71 05       	cpc	r23, r1
    1c00:	21 f5       	brne	.+72     	; 0x1c4a <dir_seek+0xbc>
		dj->clust = clst;
    1c02:	f5 01       	movw	r30, r10
    1c04:	12 86       	std	Z+10, r1	; 0x0a
    1c06:	13 86       	std	Z+11, r1	; 0x0b
    1c08:	14 86       	std	Z+12, r1	; 0x0c
    1c0a:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	f0 81       	ld	r31, Z
    1c10:	e0 2d       	mov	r30, r0
    1c12:	80 85       	ldd	r24, Z+8	; 0x08
    1c14:	91 85       	ldd	r25, Z+9	; 0x09
    1c16:	c8 16       	cp	r12, r24
    1c18:	d9 06       	cpc	r13, r25
    1c1a:	08 f0       	brcs	.+2      	; 0x1c1e <dir_seek+0x90>
    1c1c:	a8 c0       	rjmp	.+336    	; 0x1d6e <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1c1e:	c6 01       	movw	r24, r12
    1c20:	24 e0       	ldi	r18, 0x04	; 4
    1c22:	96 95       	lsr	r25
    1c24:	87 95       	ror	r24
    1c26:	2a 95       	dec	r18
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <dir_seek+0x94>
    1c2a:	a0 e0       	ldi	r26, 0x00	; 0
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	22 a1       	ldd	r18, Z+34	; 0x22
    1c30:	33 a1       	ldd	r19, Z+35	; 0x23
    1c32:	44 a1       	ldd	r20, Z+36	; 0x24
    1c34:	55 a1       	ldd	r21, Z+37	; 0x25
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	a4 1f       	adc	r26, r20
    1c3c:	b5 1f       	adc	r27, r21
    1c3e:	f5 01       	movw	r30, r10
    1c40:	86 87       	std	Z+14, r24	; 0x0e
    1c42:	97 87       	std	Z+15, r25	; 0x0f
    1c44:	a0 8b       	std	Z+16, r26	; 0x10
    1c46:	b1 8b       	std	Z+17, r27	; 0x11
    1c48:	7a c0       	rjmp	.+244    	; 0x1d3e <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	08 2f       	mov	r16, r24
    1c4e:	10 e0       	ldi	r17, 0x00	; 0
    1c50:	94 e0       	ldi	r25, 0x04	; 4
    1c52:	00 0f       	add	r16, r16
    1c54:	11 1f       	adc	r17, r17
    1c56:	9a 95       	dec	r25
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <dir_seek+0xc4>
    1c5a:	24 c0       	rjmp	.+72     	; 0x1ca4 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    1c62:	ab 01       	movw	r20, r22
    1c64:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1c66:	4f 3f       	cpi	r20, 0xFF	; 255
    1c68:	ff ef       	ldi	r31, 0xFF	; 255
    1c6a:	5f 07       	cpc	r21, r31
    1c6c:	ff ef       	ldi	r31, 0xFF	; 255
    1c6e:	6f 07       	cpc	r22, r31
    1c70:	ff ef       	ldi	r31, 0xFF	; 255
    1c72:	7f 07       	cpc	r23, r31
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <dir_seek+0xec>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	7b c0       	rjmp	.+246    	; 0x1d70 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1c7a:	42 30       	cpi	r20, 0x02	; 2
    1c7c:	51 05       	cpc	r21, r1
    1c7e:	61 05       	cpc	r22, r1
    1c80:	71 05       	cpc	r23, r1
    1c82:	08 f4       	brcc	.+2      	; 0x1c86 <dir_seek+0xf8>
    1c84:	74 c0       	rjmp	.+232    	; 0x1d6e <dir_seek+0x1e0>
    1c86:	d5 01       	movw	r26, r10
    1c88:	ed 91       	ld	r30, X+
    1c8a:	fc 91       	ld	r31, X
    1c8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c8e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c90:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c92:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c94:	48 17       	cp	r20, r24
    1c96:	59 07       	cpc	r21, r25
    1c98:	6a 07       	cpc	r22, r26
    1c9a:	7b 07       	cpc	r23, r27
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <dir_seek+0x112>
    1c9e:	67 c0       	rjmp	.+206    	; 0x1d6e <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1ca0:	c0 1a       	sub	r12, r16
    1ca2:	d1 0a       	sbc	r13, r17
    1ca4:	f5 01       	movw	r30, r10
    1ca6:	c0 81       	ld	r28, Z
    1ca8:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1caa:	c0 16       	cp	r12, r16
    1cac:	d1 06       	cpc	r13, r17
    1cae:	b0 f6       	brcc	.-84     	; 0x1c5c <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1cb0:	d5 01       	movw	r26, r10
    1cb2:	1a 96       	adiw	r26, 0x0a	; 10
    1cb4:	4d 93       	st	X+, r20
    1cb6:	5d 93       	st	X+, r21
    1cb8:	6d 93       	st	X+, r22
    1cba:	7c 93       	st	X, r23
    1cbc:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1cbe:	8e ef       	ldi	r24, 0xFE	; 254
    1cc0:	e8 2e       	mov	r14, r24
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	f8 2e       	mov	r15, r24
    1cc6:	8f ef       	ldi	r24, 0xFF	; 255
    1cc8:	08 2f       	mov	r16, r24
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	18 2f       	mov	r17, r24
    1cce:	e4 0e       	add	r14, r20
    1cd0:	f5 1e       	adc	r15, r21
    1cd2:	06 1f       	adc	r16, r22
    1cd4:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1cd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cda:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1cdc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1cde:	02 97       	sbiw	r24, 0x02	; 2
    1ce0:	a1 09       	sbc	r26, r1
    1ce2:	b1 09       	sbc	r27, r1
    1ce4:	e8 16       	cp	r14, r24
    1ce6:	f9 06       	cpc	r15, r25
    1ce8:	0a 07       	cpc	r16, r26
    1cea:	1b 07       	cpc	r17, r27
    1cec:	28 f0       	brcs	.+10     	; 0x1cf8 <dir_seek+0x16a>
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	12 c0       	rjmp	.+36     	; 0x1d1c <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1cf8:	2a 81       	ldd	r18, Y+2	; 0x02
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	c8 01       	movw	r24, r16
    1d02:	b7 01       	movw	r22, r14
    1d04:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	8e a1       	ldd	r24, Y+38	; 0x26
    1d0e:	9f a1       	ldd	r25, Y+39	; 0x27
    1d10:	a8 a5       	ldd	r26, Y+40	; 0x28
    1d12:	b9 a5       	ldd	r27, Y+41	; 0x29
    1d14:	28 0f       	add	r18, r24
    1d16:	39 1f       	adc	r19, r25
    1d18:	4a 1f       	adc	r20, r26
    1d1a:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d1c:	c6 01       	movw	r24, r12
    1d1e:	04 e0       	ldi	r16, 0x04	; 4
    1d20:	96 95       	lsr	r25
    1d22:	87 95       	ror	r24
    1d24:	0a 95       	dec	r16
    1d26:	e1 f7       	brne	.-8      	; 0x1d20 <dir_seek+0x192>
    1d28:	a0 e0       	ldi	r26, 0x00	; 0
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	28 0f       	add	r18, r24
    1d2e:	39 1f       	adc	r19, r25
    1d30:	4a 1f       	adc	r20, r26
    1d32:	5b 1f       	adc	r21, r27
    1d34:	f5 01       	movw	r30, r10
    1d36:	26 87       	std	Z+14, r18	; 0x0e
    1d38:	37 87       	std	Z+15, r19	; 0x0f
    1d3a:	40 8b       	std	Z+16, r20	; 0x10
    1d3c:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1d3e:	ff e0       	ldi	r31, 0x0F	; 15
    1d40:	cf 22       	and	r12, r31
    1d42:	dd 24       	eor	r13, r13
    1d44:	15 e0       	ldi	r17, 0x05	; 5
    1d46:	cc 0c       	add	r12, r12
    1d48:	dd 1c       	adc	r13, r13
    1d4a:	1a 95       	dec	r17
    1d4c:	e1 f7       	brne	.-8      	; 0x1d46 <dir_seek+0x1b8>
    1d4e:	8e e2       	ldi	r24, 0x2E	; 46
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	c8 0e       	add	r12, r24
    1d54:	d9 1e       	adc	r13, r25
    1d56:	d5 01       	movw	r26, r10
    1d58:	8d 91       	ld	r24, X+
    1d5a:	9c 91       	ld	r25, X
    1d5c:	11 97       	sbiw	r26, 0x01	; 1
    1d5e:	8c 0d       	add	r24, r12
    1d60:	9d 1d       	adc	r25, r13
    1d62:	52 96       	adiw	r26, 0x12	; 18
    1d64:	8d 93       	st	X+, r24
    1d66:	9c 93       	st	X, r25
    1d68:	53 97       	sbiw	r26, 0x13	; 19
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	bf 90       	pop	r11
    1d82:	af 90       	pop	r10
    1d84:	08 95       	ret

00001d86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1d86:	4f 92       	push	r4
    1d88:	5f 92       	push	r5
    1d8a:	6f 92       	push	r6
    1d8c:	7f 92       	push	r7
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	ec 01       	movw	r28, r24
    1da8:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1daa:	6c 80       	ldd	r6, Y+4	; 0x04
    1dac:	7d 80       	ldd	r7, Y+5	; 0x05
    1dae:	08 94       	sec
    1db0:	61 1c       	adc	r6, r1
    1db2:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1db4:	61 14       	cp	r6, r1
    1db6:	71 04       	cpc	r7, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <dir_next+0x36>
    1dba:	4c c1       	rjmp	.+664    	; 0x2054 <dir_next+0x2ce>
    1dbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dc0:	a8 89       	ldd	r26, Y+16	; 0x10
    1dc2:	b9 89       	ldd	r27, Y+17	; 0x11
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	a1 05       	cpc	r26, r1
    1dc8:	b1 05       	cpc	r27, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <dir_next+0x48>
    1dcc:	43 c1       	rjmp	.+646    	; 0x2054 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1dce:	1f e0       	ldi	r17, 0x0F	; 15
    1dd0:	41 2e       	mov	r4, r17
    1dd2:	51 2c       	mov	r5, r1
    1dd4:	46 20       	and	r4, r6
    1dd6:	57 20       	and	r5, r7
    1dd8:	41 14       	cp	r4, r1
    1dda:	51 04       	cpc	r5, r1
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <dir_next+0x5a>
    1dde:	27 c1       	rjmp	.+590    	; 0x202e <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	a1 1d       	adc	r26, r1
    1de4:	b1 1d       	adc	r27, r1
    1de6:	8e 87       	std	Y+14, r24	; 0x0e
    1de8:	9f 87       	std	Y+15, r25	; 0x0f
    1dea:	a8 8b       	std	Y+16, r26	; 0x10
    1dec:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1dee:	4a 85       	ldd	r20, Y+10	; 0x0a
    1df0:	5b 85       	ldd	r21, Y+11	; 0x0b
    1df2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1df4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1df6:	e8 81       	ld	r30, Y
    1df8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dfa:	41 15       	cp	r20, r1
    1dfc:	51 05       	cpc	r21, r1
    1dfe:	61 05       	cpc	r22, r1
    1e00:	71 05       	cpc	r23, r1
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1e04:	80 85       	ldd	r24, Z+8	; 0x08
    1e06:	91 85       	ldd	r25, Z+9	; 0x09
    1e08:	68 16       	cp	r6, r24
    1e0a:	79 06       	cpc	r7, r25
    1e0c:	08 f4       	brcc	.+2      	; 0x1e10 <dir_next+0x8a>
    1e0e:	0f c1       	rjmp	.+542    	; 0x202e <dir_next+0x2a8>
    1e10:	21 c1       	rjmp	.+578    	; 0x2054 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	93 01       	movw	r18, r6
    1e1a:	a4 e0       	ldi	r26, 0x04	; 4
    1e1c:	36 95       	lsr	r19
    1e1e:	27 95       	ror	r18
    1e20:	aa 95       	dec	r26
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <dir_next+0x96>
    1e24:	82 23       	and	r24, r18
    1e26:	93 23       	and	r25, r19
    1e28:	89 2b       	or	r24, r25
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <dir_next+0xa8>
    1e2c:	00 c1       	rjmp	.+512    	; 0x202e <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1e2e:	cf 01       	movw	r24, r30
    1e30:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    1e34:	7b 01       	movw	r14, r22
    1e36:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1e38:	62 30       	cpi	r22, 0x02	; 2
    1e3a:	71 05       	cpc	r23, r1
    1e3c:	81 05       	cpc	r24, r1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <dir_next+0xbe>
    1e42:	0a c1       	rjmp	.+532    	; 0x2058 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	e8 16       	cp	r14, r24
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	f8 06       	cpc	r15, r24
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	08 07       	cpc	r16, r24
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	18 07       	cpc	r17, r24
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <dir_next+0xd2>
    1e56:	02 c1       	rjmp	.+516    	; 0x205c <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1e58:	e8 81       	ld	r30, Y
    1e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e5e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e60:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1e62:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1e64:	e8 16       	cp	r14, r24
    1e66:	f9 06       	cpc	r15, r25
    1e68:	0a 07       	cpc	r16, r26
    1e6a:	1b 07       	cpc	r17, r27
    1e6c:	08 f4       	brcc	.+2      	; 0x1e70 <dir_next+0xea>
    1e6e:	a6 c0       	rjmp	.+332    	; 0x1fbc <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1e70:	dd 20       	and	r13, r13
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <dir_next+0xf0>
    1e74:	ef c0       	rjmp	.+478    	; 0x2054 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1e76:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e78:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e7e:	cf 01       	movw	r24, r30
    1e80:	0e 94 97 0c 	call	0x192e	; 0x192e <create_chain>
    1e84:	7b 01       	movw	r14, r22
    1e86:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1e88:	61 15       	cp	r22, r1
    1e8a:	71 05       	cpc	r23, r1
    1e8c:	81 05       	cpc	r24, r1
    1e8e:	91 05       	cpc	r25, r1
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <dir_next+0x110>
    1e92:	87 e0       	ldi	r24, 0x07	; 7
    1e94:	e4 c0       	rjmp	.+456    	; 0x205e <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	e9 16       	cp	r14, r25
    1e9a:	f1 04       	cpc	r15, r1
    1e9c:	01 05       	cpc	r16, r1
    1e9e:	11 05       	cpc	r17, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <dir_next+0x11e>
    1ea2:	da c0       	rjmp	.+436    	; 0x2058 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1ea4:	af ef       	ldi	r26, 0xFF	; 255
    1ea6:	ea 16       	cp	r14, r26
    1ea8:	af ef       	ldi	r26, 0xFF	; 255
    1eaa:	fa 06       	cpc	r15, r26
    1eac:	af ef       	ldi	r26, 0xFF	; 255
    1eae:	0a 07       	cpc	r16, r26
    1eb0:	af ef       	ldi	r26, 0xFF	; 255
    1eb2:	1a 07       	cpc	r17, r26
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <dir_next+0x132>
    1eb6:	d2 c0       	rjmp	.+420    	; 0x205c <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1eb8:	88 81       	ld	r24, Y
    1eba:	99 81       	ldd	r25, Y+1	; 0x01
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f0       	breq	.+2      	; 0x1ece <dir_next+0x148>
    1ecc:	c7 c0       	rjmp	.+398    	; 0x205c <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1ece:	e8 81       	ld	r30, Y
    1ed0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed2:	be 96       	adiw	r30, 0x2e	; 46
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	92 e0       	ldi	r25, 0x02	; 2
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1eda:	11 92       	st	Z+, r1
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	bf ef       	ldi	r27, 0xFF	; 255
    1ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee2:	9b 07       	cpc	r25, r27
    1ee4:	d1 f7       	brne	.-12     	; 0x1eda <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1ee6:	88 80       	ld	r8, Y
    1ee8:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1eea:	4e ef       	ldi	r20, 0xFE	; 254
    1eec:	a4 2e       	mov	r10, r20
    1eee:	4f ef       	ldi	r20, 0xFF	; 255
    1ef0:	b4 2e       	mov	r11, r20
    1ef2:	4f ef       	ldi	r20, 0xFF	; 255
    1ef4:	c4 2e       	mov	r12, r20
    1ef6:	4f ef       	ldi	r20, 0xFF	; 255
    1ef8:	d4 2e       	mov	r13, r20
    1efa:	ae 0c       	add	r10, r14
    1efc:	bf 1c       	adc	r11, r15
    1efe:	c0 1e       	adc	r12, r16
    1f00:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1f02:	f4 01       	movw	r30, r8
    1f04:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f06:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f08:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f0a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f0c:	02 97       	sbiw	r24, 0x02	; 2
    1f0e:	a1 09       	sbc	r26, r1
    1f10:	b1 09       	sbc	r27, r1
    1f12:	a8 16       	cp	r10, r24
    1f14:	b9 06       	cpc	r11, r25
    1f16:	ca 06       	cpc	r12, r26
    1f18:	db 06       	cpc	r13, r27
    1f1a:	28 f0       	brcs	.+10     	; 0x1f26 <dir_next+0x1a0>
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	15 c0       	rjmp	.+42     	; 0x1f50 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1f26:	d4 01       	movw	r26, r8
    1f28:	12 96       	adiw	r26, 0x02	; 2
    1f2a:	2c 91       	ld	r18, X
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	c6 01       	movw	r24, r12
    1f34:	b5 01       	movw	r22, r10
    1f36:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	f4 01       	movw	r30, r8
    1f40:	86 a1       	ldd	r24, Z+38	; 0x26
    1f42:	97 a1       	ldd	r25, Z+39	; 0x27
    1f44:	a0 a5       	ldd	r26, Z+40	; 0x28
    1f46:	b1 a5       	ldd	r27, Z+41	; 0x29
    1f48:	28 0f       	add	r18, r24
    1f4a:	39 1f       	adc	r19, r25
    1f4c:	4a 1f       	adc	r20, r26
    1f4e:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1f50:	d4 01       	movw	r26, r8
    1f52:	9a 96       	adiw	r26, 0x2a	; 42
    1f54:	2d 93       	st	X+, r18
    1f56:	3d 93       	st	X+, r19
    1f58:	4d 93       	st	X+, r20
    1f5a:	5c 93       	st	X, r21
    1f5c:	9d 97       	sbiw	r26, 0x2d	; 45
    1f5e:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1f60:	cc 24       	eor	r12, r12
    1f62:	c3 94       	inc	r12
    1f64:	1a c0       	rjmp	.+52     	; 0x1f9a <dir_next+0x214>
    1f66:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1f68:	88 81       	ld	r24, Y
    1f6a:	99 81       	ldd	r25, Y+1	; 0x01
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <dir_next+0x1f8>
    1f7c:	6f c0       	rjmp	.+222    	; 0x205c <dir_next+0x2d6>
						dj->fs->winsect++;
    1f7e:	e8 81       	ld	r30, Y
    1f80:	f9 81       	ldd	r31, Y+1	; 0x01
    1f82:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f84:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f86:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f88:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	a1 1d       	adc	r26, r1
    1f8e:	b1 1d       	adc	r27, r1
    1f90:	82 a7       	std	Z+42, r24	; 0x2a
    1f92:	93 a7       	std	Z+43, r25	; 0x2b
    1f94:	a4 a7       	std	Z+44, r26	; 0x2c
    1f96:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1f98:	d3 94       	inc	r13
    1f9a:	e8 81       	ld	r30, Y
    1f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	d8 16       	cp	r13, r24
    1fa2:	08 f3       	brcs	.-62     	; 0x1f66 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1fa4:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fa6:	93 a5       	ldd	r25, Z+43	; 0x2b
    1fa8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1faa:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1fac:	8d 19       	sub	r24, r13
    1fae:	91 09       	sbc	r25, r1
    1fb0:	a1 09       	sbc	r26, r1
    1fb2:	b1 09       	sbc	r27, r1
    1fb4:	82 a7       	std	Z+42, r24	; 0x2a
    1fb6:	93 a7       	std	Z+43, r25	; 0x2b
    1fb8:	a4 a7       	std	Z+44, r26	; 0x2c
    1fba:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1fbc:	ea 86       	std	Y+10, r14	; 0x0a
    1fbe:	fb 86       	std	Y+11, r15	; 0x0b
    1fc0:	0c 87       	std	Y+12, r16	; 0x0c
    1fc2:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1fc4:	c8 80       	ld	r12, Y
    1fc6:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1fc8:	8e ef       	ldi	r24, 0xFE	; 254
    1fca:	9f ef       	ldi	r25, 0xFF	; 255
    1fcc:	af ef       	ldi	r26, 0xFF	; 255
    1fce:	bf ef       	ldi	r27, 0xFF	; 255
    1fd0:	e8 0e       	add	r14, r24
    1fd2:	f9 1e       	adc	r15, r25
    1fd4:	0a 1f       	adc	r16, r26
    1fd6:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1fd8:	f6 01       	movw	r30, r12
    1fda:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fdc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fde:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fe0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fe2:	02 97       	sbiw	r24, 0x02	; 2
    1fe4:	a1 09       	sbc	r26, r1
    1fe6:	b1 09       	sbc	r27, r1
    1fe8:	e8 16       	cp	r14, r24
    1fea:	f9 06       	cpc	r15, r25
    1fec:	0a 07       	cpc	r16, r26
    1fee:	1b 07       	cpc	r17, r27
    1ff0:	28 f0       	brcs	.+10     	; 0x1ffc <dir_next+0x276>
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	15 c0       	rjmp	.+42     	; 0x2026 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    1ffc:	d6 01       	movw	r26, r12
    1ffe:	12 96       	adiw	r26, 0x02	; 2
    2000:	2c 91       	ld	r18, X
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	c8 01       	movw	r24, r16
    200a:	b7 01       	movw	r22, r14
    200c:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    2010:	9b 01       	movw	r18, r22
    2012:	ac 01       	movw	r20, r24
    2014:	f6 01       	movw	r30, r12
    2016:	86 a1       	ldd	r24, Z+38	; 0x26
    2018:	97 a1       	ldd	r25, Z+39	; 0x27
    201a:	a0 a5       	ldd	r26, Z+40	; 0x28
    201c:	b1 a5       	ldd	r27, Z+41	; 0x29
    201e:	28 0f       	add	r18, r24
    2020:	39 1f       	adc	r19, r25
    2022:	4a 1f       	adc	r20, r26
    2024:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2026:	2e 87       	std	Y+14, r18	; 0x0e
    2028:	3f 87       	std	Y+15, r19	; 0x0f
    202a:	48 8b       	std	Y+16, r20	; 0x10
    202c:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    202e:	6c 82       	std	Y+4, r6	; 0x04
    2030:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2032:	35 e0       	ldi	r19, 0x05	; 5
    2034:	44 0c       	add	r4, r4
    2036:	55 1c       	adc	r5, r5
    2038:	3a 95       	dec	r19
    203a:	e1 f7       	brne	.-8      	; 0x2034 <dir_next+0x2ae>
    203c:	8e e2       	ldi	r24, 0x2E	; 46
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	48 0e       	add	r4, r24
    2042:	59 1e       	adc	r5, r25
    2044:	88 81       	ld	r24, Y
    2046:	99 81       	ldd	r25, Y+1	; 0x01
    2048:	84 0d       	add	r24, r4
    204a:	95 1d       	adc	r25, r5
    204c:	8a 8b       	std	Y+18, r24	; 0x12
    204e:	9b 8b       	std	Y+19, r25	; 0x13
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	05 c0       	rjmp	.+10     	; 0x205e <dir_next+0x2d8>

	return FR_OK;
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	03 c0       	rjmp	.+6      	; 0x205e <dir_next+0x2d8>
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	01 c0       	rjmp	.+2      	; 0x205e <dir_next+0x2d8>
    205c:	81 e0       	ldi	r24, 0x01	; 1
}
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	bf 90       	pop	r11
    2070:	af 90       	pop	r10
    2072:	9f 90       	pop	r9
    2074:	8f 90       	pop	r8
    2076:	7f 90       	pop	r7
    2078:	6f 90       	pop	r6
    207a:	5f 90       	pop	r5
    207c:	4f 90       	pop	r4
    207e:	08 95       	ret

00002080 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	ec 01       	movw	r28, r24
    2086:	94 e0       	ldi	r25, 0x04	; 4
    2088:	1a c0       	rjmp	.+52     	; 0x20be <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    208a:	88 81       	ld	r24, Y
    208c:	99 81       	ldd	r25, Y+1	; 0x01
    208e:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    2092:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2094:	88 23       	and	r24, r24
    2096:	f1 f4       	brne	.+60     	; 0x20d4 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2098:	ea 89       	ldd	r30, Y+18	; 0x12
    209a:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    209c:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    209e:	88 23       	and	r24, r24
    20a0:	09 f1       	breq	.+66     	; 0x20e4 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    20a2:	85 3e       	cpi	r24, 0xE5	; 229
    20a4:	29 f0       	breq	.+10     	; 0x20b0 <dir_read+0x30>
    20a6:	8e 32       	cpi	r24, 0x2E	; 46
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <dir_read+0x30>
    20aa:	83 85       	ldd	r24, Z+11	; 0x0b
    20ac:	83 ff       	sbrs	r24, 3
    20ae:	16 c0       	rjmp	.+44     	; 0x20dc <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    20b0:	ce 01       	movw	r24, r28
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <dir_next>
    20b8:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    20ba:	88 23       	and	r24, r24
    20bc:	59 f4       	brne	.+22     	; 0x20d4 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    20be:	4e 85       	ldd	r20, Y+14	; 0x0e
    20c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    20c2:	68 89       	ldd	r22, Y+16	; 0x10
    20c4:	79 89       	ldd	r23, Y+17	; 0x11
    20c6:	41 15       	cp	r20, r1
    20c8:	51 05       	cpc	r21, r1
    20ca:	61 05       	cpc	r22, r1
    20cc:	71 05       	cpc	r23, r1
    20ce:	e9 f6       	brne	.-70     	; 0x208a <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    20d0:	99 23       	and	r25, r25
    20d2:	21 f0       	breq	.+8      	; 0x20dc <dir_read+0x5c>
    20d4:	1e 86       	std	Y+14, r1	; 0x0e
    20d6:	1f 86       	std	Y+15, r1	; 0x0f
    20d8:	18 8a       	std	Y+16, r1	; 0x10
    20da:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    20dc:	89 2f       	mov	r24, r25
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    20e4:	94 e0       	ldi	r25, 0x04	; 4
    20e6:	f6 cf       	rjmp	.-20     	; 0x20d4 <dir_read+0x54>

000020e8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
    20f6:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    20f8:	88 23       	and	r24, r24
    20fa:	e9 f5       	brne	.+122    	; 0x2176 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    20fc:	4e 85       	ldd	r20, Y+14	; 0x0e
    20fe:	5f 85       	ldd	r21, Y+15	; 0x0f
    2100:	68 89       	ldd	r22, Y+16	; 0x10
    2102:	79 89       	ldd	r23, Y+17	; 0x11
    2104:	88 81       	ld	r24, Y
    2106:	99 81       	ldd	r25, Y+1	; 0x01
    2108:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    210c:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    210e:	88 23       	and	r24, r24
    2110:	91 f5       	brne	.+100    	; 0x2176 <dir_register+0x8e>
			c = *dj->dir;
    2112:	ea 89       	ldd	r30, Y+18	; 0x12
    2114:	fb 89       	ldd	r31, Y+19	; 0x13
    2116:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2118:	e5 3e       	cpi	r30, 0xE5	; 229
    211a:	89 f1       	breq	.+98     	; 0x217e <dir_register+0x96>
    211c:	ee 23       	and	r30, r30
    211e:	79 f1       	breq	.+94     	; 0x217e <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2120:	ce 01       	movw	r24, r28
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <dir_next>
    2128:	e6 cf       	rjmp	.-52     	; 0x20f6 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    212a:	6a 89       	ldd	r22, Y+18	; 0x12
    212c:	7b 89       	ldd	r23, Y+19	; 0x13
    212e:	fb 01       	movw	r30, r22
    2130:	80 e2       	ldi	r24, 0x20	; 32
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2136:	11 92       	st	Z+, r1
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	2f ef       	ldi	r18, 0xFF	; 255
    213c:	8f 3f       	cpi	r24, 0xFF	; 255
    213e:	92 07       	cpc	r25, r18
    2140:	d1 f7       	brne	.-12     	; 0x2136 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2142:	8c 89       	ldd	r24, Y+20	; 0x14
    2144:	9d 89       	ldd	r25, Y+21	; 0x15
    2146:	9c 01       	movw	r18, r24
    2148:	d9 01       	movw	r26, r18
    214a:	fb 01       	movw	r30, r22
    214c:	2b e0       	ldi	r18, 0x0B	; 11
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    2152:	8d 91       	ld	r24, X+
    2154:	81 93       	st	Z+, r24
    2156:	21 50       	subi	r18, 0x01	; 1
    2158:	30 40       	sbci	r19, 0x00	; 0
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	2f 3f       	cpi	r18, 0xFF	; 255
    215e:	38 07       	cpc	r19, r24
    2160:	c1 f7       	brne	.-16     	; 0x2152 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2162:	ec 89       	ldd	r30, Y+20	; 0x14
    2164:	fd 89       	ldd	r31, Y+21	; 0x15
    2166:	83 85       	ldd	r24, Z+11	; 0x0b
    2168:	88 71       	andi	r24, 0x18	; 24
    216a:	fb 01       	movw	r30, r22
    216c:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    216e:	e8 81       	ld	r30, Y
    2170:	f9 81       	ldd	r31, Y+1	; 0x01
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2176:	84 2f       	mov	r24, r20
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    217e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2180:	5f 85       	ldd	r21, Y+15	; 0x0f
    2182:	68 89       	ldd	r22, Y+16	; 0x10
    2184:	79 89       	ldd	r23, Y+17	; 0x11
    2186:	88 81       	ld	r24, Y
    2188:	99 81       	ldd	r25, Y+1	; 0x01
    218a:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    218e:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    2190:	88 23       	and	r24, r24
    2192:	59 f2       	breq	.-106    	; 0x212a <dir_register+0x42>
    2194:	f0 cf       	rjmp	.-32     	; 0x2176 <dir_register+0x8e>

00002196 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    219c:	6c 81       	ldd	r22, Y+4	; 0x04
    219e:	7d 81       	ldd	r23, Y+5	; 0x05
    21a0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
    21a4:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    21a6:	88 23       	and	r24, r24
    21a8:	99 f4       	brne	.+38     	; 0x21d0 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    21aa:	4e 85       	ldd	r20, Y+14	; 0x0e
    21ac:	5f 85       	ldd	r21, Y+15	; 0x0f
    21ae:	68 89       	ldd	r22, Y+16	; 0x10
    21b0:	79 89       	ldd	r23, Y+17	; 0x11
    21b2:	88 81       	ld	r24, Y
    21b4:	99 81       	ldd	r25, Y+1	; 0x01
    21b6:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    21ba:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    21bc:	88 23       	and	r24, r24
    21be:	41 f4       	brne	.+16     	; 0x21d0 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    21c0:	ea 89       	ldd	r30, Y+18	; 0x12
    21c2:	fb 89       	ldd	r31, Y+19	; 0x13
    21c4:	85 ee       	ldi	r24, 0xE5	; 229
    21c6:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    21c8:	e8 81       	ld	r30, Y
    21ca:	f9 81       	ldd	r31, Y+1	; 0x01
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    21d0:	89 2f       	mov	r24, r25
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	fc 01       	movw	r30, r24
    21e6:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    21e8:	eb 01       	movw	r28, r22
    21ea:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    21ec:	86 85       	ldd	r24, Z+14	; 0x0e
    21ee:	97 85       	ldd	r25, Z+15	; 0x0f
    21f0:	a0 89       	ldd	r26, Z+16	; 0x10
    21f2:	b1 89       	ldd	r27, Z+17	; 0x11
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	a1 05       	cpc	r26, r1
    21f8:	b1 05       	cpc	r27, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <get_fileinfo+0x26>
    21fc:	71 c0       	rjmp	.+226    	; 0x22e0 <get_fileinfo+0x108>
		dir = dj->dir;
    21fe:	62 89       	ldd	r22, Z+18	; 0x12
    2200:	73 89       	ldd	r23, Z+19	; 0x13
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2206:	fb 01       	movw	r30, r22
    2208:	e8 0f       	add	r30, r24
    220a:	f9 1f       	adc	r31, r25
    220c:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    220e:	e0 32       	cpi	r30, 0x20	; 32
    2210:	41 f0       	breq	.+16     	; 0x2222 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    2212:	e5 30       	cpi	r30, 0x05	; 5
    2214:	09 f4       	brne	.+2      	; 0x2218 <get_fileinfo+0x40>
    2216:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    2218:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	88 30       	cpi	r24, 0x08	; 8
    221e:	91 05       	cpc	r25, r1
    2220:	91 f7       	brne	.-28     	; 0x2206 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    2222:	db 01       	movw	r26, r22
    2224:	18 96       	adiw	r26, 0x08	; 8
    2226:	8c 91       	ld	r24, X
    2228:	80 32       	cpi	r24, 0x20	; 32
    222a:	11 f4       	brne	.+4      	; 0x2230 <get_fileinfo+0x58>
    222c:	8e 01       	movw	r16, r28
    222e:	12 c0       	rjmp	.+36     	; 0x2254 <get_fileinfo+0x7c>
			*p++ = '.';
    2230:	8e e2       	ldi	r24, 0x2E	; 46
    2232:	fe 01       	movw	r30, r28
    2234:	81 93       	st	Z+, r24
    2236:	8f 01       	movw	r16, r30
    2238:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    223a:	9e 01       	movw	r18, r28
    223c:	2c 5f       	subi	r18, 0xFC	; 252
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2240:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2242:	80 32       	cpi	r24, 0x20	; 32
    2244:	39 f0       	breq	.+14     	; 0x2254 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2246:	d8 01       	movw	r26, r16
    2248:	8d 93       	st	X+, r24
    224a:	8d 01       	movw	r16, r26
    224c:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    224e:	a2 17       	cp	r26, r18
    2250:	b3 07       	cpc	r27, r19
    2252:	b1 f7       	brne	.-20     	; 0x2240 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2254:	fb 01       	movw	r30, r22
    2256:	83 85       	ldd	r24, Z+11	; 0x0b
    2258:	d7 01       	movw	r26, r14
    225a:	18 96       	adiw	r26, 0x08	; 8
    225c:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    225e:	27 8d       	ldd	r18, Z+31	; 0x1f
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	52 2f       	mov	r21, r18
    2268:	44 27       	eor	r20, r20
    226a:	33 27       	eor	r19, r19
    226c:	22 27       	eor	r18, r18
    226e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	dc 01       	movw	r26, r24
    2278:	99 27       	eor	r25, r25
    227a:	88 27       	eor	r24, r24
    227c:	28 2b       	or	r18, r24
    227e:	39 2b       	or	r19, r25
    2280:	4a 2b       	or	r20, r26
    2282:	5b 2b       	or	r21, r27
    2284:	84 8d       	ldd	r24, Z+28	; 0x1c
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	28 2b       	or	r18, r24
    228e:	39 2b       	or	r19, r25
    2290:	4a 2b       	or	r20, r26
    2292:	5b 2b       	or	r21, r27
    2294:	95 8d       	ldd	r25, Z+29	; 0x1d
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	a0 e0       	ldi	r26, 0x00	; 0
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	28 2b       	or	r18, r24
    229e:	39 2b       	or	r19, r25
    22a0:	4a 2b       	or	r20, r26
    22a2:	5b 2b       	or	r21, r27
    22a4:	f7 01       	movw	r30, r14
    22a6:	20 83       	st	Z, r18
    22a8:	31 83       	std	Z+1, r19	; 0x01
    22aa:	42 83       	std	Z+2, r20	; 0x02
    22ac:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    22ae:	db 01       	movw	r26, r22
    22b0:	59 96       	adiw	r26, 0x19	; 25
    22b2:	9c 91       	ld	r25, X
    22b4:	59 97       	sbiw	r26, 0x19	; 25
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	58 96       	adiw	r26, 0x18	; 24
    22ba:	2c 91       	ld	r18, X
    22bc:	58 97       	sbiw	r26, 0x18	; 24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	82 2b       	or	r24, r18
    22c2:	93 2b       	or	r25, r19
    22c4:	84 83       	std	Z+4, r24	; 0x04
    22c6:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    22c8:	57 96       	adiw	r26, 0x17	; 23
    22ca:	9c 91       	ld	r25, X
    22cc:	57 97       	sbiw	r26, 0x17	; 23
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	56 96       	adiw	r26, 0x16	; 22
    22d2:	2c 91       	ld	r18, X
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	82 2b       	or	r24, r18
    22d8:	93 2b       	or	r25, r19
    22da:	86 83       	std	Z+6, r24	; 0x06
    22dc:	97 83       	std	Z+7, r25	; 0x07
    22de:	e8 01       	movw	r28, r16
	}
	*p = 0;
    22e0:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	ff 90       	pop	r15
    22ec:	ef 90       	pop	r14
    22ee:	08 95       	ret

000022f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	ec 01       	movw	r28, r24
    2310:	7b 01       	movw	r14, r22
    2312:	03 c0       	rjmp	.+6      	; 0x231a <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    2314:	08 94       	sec
    2316:	e1 1c       	adc	r14, r1
    2318:	f1 1c       	adc	r15, r1
    231a:	f7 01       	movw	r30, r14
    231c:	80 81       	ld	r24, Z
    231e:	80 32       	cpi	r24, 0x20	; 32
    2320:	c9 f3       	breq	.-14     	; 0x2314 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2322:	8f 32       	cpi	r24, 0x2F	; 47
    2324:	11 f0       	breq	.+4      	; 0x232a <follow_path+0x3a>
    2326:	8c 35       	cpi	r24, 0x5C	; 92
    2328:	19 f4       	brne	.+6      	; 0x2330 <follow_path+0x40>
		path++;
    232a:	08 94       	sec
    232c:	e1 1c       	adc	r14, r1
    232e:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2330:	1e 82       	std	Y+6, r1	; 0x06
    2332:	1f 82       	std	Y+7, r1	; 0x07
    2334:	18 86       	std	Y+8, r1	; 0x08
    2336:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    2338:	f7 01       	movw	r30, r14
    233a:	80 81       	ld	r24, Z
    233c:	80 32       	cpi	r24, 0x20	; 32
    233e:	40 f4       	brcc	.+16     	; 0x2350 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2340:	ce 01       	movw	r24, r28
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
		dj->dir = NULL;
    234a:	1a 8a       	std	Y+18, r1	; 0x12
    234c:	1b 8a       	std	Y+19, r1	; 0x13
    234e:	13 c1       	rjmp	.+550    	; 0x2576 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2350:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2352:	45 e0       	ldi	r20, 0x05	; 5
    2354:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2356:	ac 89       	ldd	r26, Y+20	; 0x14
    2358:	bd 89       	ldd	r27, Y+21	; 0x15
    235a:	fd 01       	movw	r30, r26
    235c:	8b e0       	ldi	r24, 0x0B	; 11
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2362:	01 93       	st	Z+, r16
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	2f ef       	ldi	r18, 0xFF	; 255
    2368:	8f 3f       	cpi	r24, 0xFF	; 255
    236a:	92 07       	cpc	r25, r18
    236c:	d1 f7       	brne	.-12     	; 0x2362 <follow_path+0x72>
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	cc 24       	eor	r12, r12
    2374:	dd 24       	eor	r13, r13
    2376:	38 e0       	ldi	r19, 0x08	; 8
    2378:	a3 2e       	mov	r10, r19
    237a:	b1 2c       	mov	r11, r1
    237c:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    237e:	f7 01       	movw	r30, r14
    2380:	ec 0d       	add	r30, r12
    2382:	fd 1d       	adc	r31, r13
    2384:	20 81       	ld	r18, Z
    2386:	08 94       	sec
    2388:	c1 1c       	adc	r12, r1
    238a:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    238c:	21 32       	cpi	r18, 0x21	; 33
    238e:	08 f4       	brcc	.+2      	; 0x2392 <follow_path+0xa2>
    2390:	66 c0       	rjmp	.+204    	; 0x245e <follow_path+0x16e>
    2392:	2f 32       	cpi	r18, 0x2F	; 47
    2394:	09 f4       	brne	.+2      	; 0x2398 <follow_path+0xa8>
    2396:	ff c0       	rjmp	.+510    	; 0x2596 <follow_path+0x2a6>
    2398:	2c 35       	cpi	r18, 0x5C	; 92
    239a:	09 f4       	brne	.+2      	; 0x239e <follow_path+0xae>
    239c:	fc c0       	rjmp	.+504    	; 0x2596 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    239e:	2e 32       	cpi	r18, 0x2E	; 46
    23a0:	19 f0       	breq	.+6      	; 0x23a8 <follow_path+0xb8>
    23a2:	4a 15       	cp	r20, r10
    23a4:	5b 05       	cpc	r21, r11
    23a6:	84 f0       	brlt	.+32     	; 0x23c8 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    23a8:	88 e0       	ldi	r24, 0x08	; 8
    23aa:	a8 16       	cp	r10, r24
    23ac:	b1 04       	cpc	r11, r1
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <follow_path+0xc2>
    23b0:	dd c0       	rjmp	.+442    	; 0x256c <follow_path+0x27c>
    23b2:	2e 32       	cpi	r18, 0x2E	; 46
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <follow_path+0xc8>
    23b6:	da c0       	rjmp	.+436    	; 0x256c <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    23b8:	11 0f       	add	r17, r17
    23ba:	11 0f       	add	r17, r17
    23bc:	48 e0       	ldi	r20, 0x08	; 8
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	2b e0       	ldi	r18, 0x0B	; 11
    23c2:	a2 2e       	mov	r10, r18
    23c4:	b1 2c       	mov	r11, r1
    23c6:	db cf       	rjmp	.-74     	; 0x237e <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    23c8:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    23ca:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    23cc:	82 2f       	mov	r24, r18
    23ce:	81 58       	subi	r24, 0x81	; 129
    23d0:	8f 31       	cpi	r24, 0x1F	; 31
    23d2:	18 f0       	brcs	.+6      	; 0x23da <follow_path+0xea>
    23d4:	8f 55       	subi	r24, 0x5F	; 95
    23d6:	8d 31       	cpi	r24, 0x1D	; 29
    23d8:	08 f5       	brcc	.+66     	; 0x241c <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    23da:	f7 01       	movw	r30, r14
    23dc:	ec 0d       	add	r30, r12
    23de:	fd 1d       	adc	r31, r13
    23e0:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    23e2:	83 2f       	mov	r24, r19
    23e4:	80 54       	subi	r24, 0x40	; 64
    23e6:	8f 33       	cpi	r24, 0x3F	; 63
    23e8:	20 f0       	brcs	.+8      	; 0x23f2 <follow_path+0x102>
    23ea:	80 54       	subi	r24, 0x40	; 64
    23ec:	8d 37       	cpi	r24, 0x7D	; 125
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <follow_path+0x102>
    23f0:	bd c0       	rjmp	.+378    	; 0x256c <follow_path+0x27c>
    23f2:	c5 01       	movw	r24, r10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	48 17       	cp	r20, r24
    23f8:	59 07       	cpc	r21, r25
    23fa:	0c f0       	brlt	.+2      	; 0x23fe <follow_path+0x10e>
    23fc:	b7 c0       	rjmp	.+366    	; 0x256c <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    23fe:	08 94       	sec
    2400:	c1 1c       	adc	r12, r1
    2402:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2404:	fd 01       	movw	r30, r26
    2406:	e4 0f       	add	r30, r20
    2408:	f5 1f       	adc	r31, r21
    240a:	20 83       	st	Z, r18
    240c:	ca 01       	movw	r24, r20
    240e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2410:	fd 01       	movw	r30, r26
    2412:	e8 0f       	add	r30, r24
    2414:	f9 1f       	adc	r31, r25
    2416:	30 83       	st	Z, r19
    2418:	ac 01       	movw	r20, r24
    241a:	1e c0       	rjmp	.+60     	; 0x2458 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    241c:	62 2f       	mov	r22, r18
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	e0 e0       	ldi	r30, 0x00	; 0
    2422:	f0 e2       	ldi	r31, 0x20	; 32
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2426:	31 96       	adiw	r30, 0x01	; 1
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	29 f0       	breq	.+10     	; 0x2438 <follow_path+0x148>
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	86 17       	cp	r24, r22
    2432:	97 07       	cpc	r25, r23
    2434:	c1 f7       	brne	.-16     	; 0x2426 <follow_path+0x136>
    2436:	9a c0       	rjmp	.+308    	; 0x256c <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2438:	82 2f       	mov	r24, r18
    243a:	81 54       	subi	r24, 0x41	; 65
    243c:	8a 31       	cpi	r24, 0x1A	; 26
    243e:	10 f4       	brcc	.+4      	; 0x2444 <follow_path+0x154>
				b |= 2;
    2440:	12 60       	ori	r17, 0x02	; 2
    2442:	06 c0       	rjmp	.+12     	; 0x2450 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2444:	82 2f       	mov	r24, r18
    2446:	81 56       	subi	r24, 0x61	; 97
    2448:	8a 31       	cpi	r24, 0x1A	; 26
    244a:	10 f4       	brcc	.+4      	; 0x2450 <follow_path+0x160>
					b |= 1; c -= 0x20;
    244c:	11 60       	ori	r17, 0x01	; 1
    244e:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2450:	fd 01       	movw	r30, r26
    2452:	e4 0f       	add	r30, r20
    2454:	f5 1f       	adc	r31, r21
    2456:	20 83       	st	Z, r18
    2458:	4f 5f       	subi	r20, 0xFF	; 255
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	90 cf       	rjmp	.-224    	; 0x237e <follow_path+0x8e>
    245e:	91 2f       	mov	r25, r17
    2460:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2462:	45 2b       	or	r20, r21
    2464:	09 f4       	brne	.+2      	; 0x2468 <follow_path+0x178>
    2466:	82 c0       	rjmp	.+260    	; 0x256c <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2468:	8c 91       	ld	r24, X
    246a:	85 3e       	cpi	r24, 0xE5	; 229
    246c:	09 f4       	brne	.+2      	; 0x2470 <follow_path+0x180>
    246e:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    2470:	e8 e0       	ldi	r30, 0x08	; 8
    2472:	ae 16       	cp	r10, r30
    2474:	b1 04       	cpc	r11, r1
    2476:	19 f4       	brne	.+6      	; 0x247e <follow_path+0x18e>
    2478:	91 2f       	mov	r25, r17
    247a:	99 0f       	add	r25, r25
    247c:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    247e:	29 2f       	mov	r18, r25
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	c9 01       	movw	r24, r18
    2484:	83 70       	andi	r24, 0x03	; 3
    2486:	90 70       	andi	r25, 0x00	; 0
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	09 f4       	brne	.+2      	; 0x248e <follow_path+0x19e>
    248c:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    248e:	2c 70       	andi	r18, 0x0C	; 12
    2490:	30 70       	andi	r19, 0x00	; 0
    2492:	24 30       	cpi	r18, 0x04	; 4
    2494:	31 05       	cpc	r19, r1
    2496:	09 f4       	brne	.+2      	; 0x249a <follow_path+0x1aa>
    2498:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    249a:	1b 96       	adiw	r26, 0x0b	; 11
    249c:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    249e:	ce 01       	movw	r24, r28
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
    24a8:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    24aa:	88 23       	and	r24, r24
    24ac:	71 f5       	brne	.+92     	; 0x250a <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    24ae:	4e 85       	ldd	r20, Y+14	; 0x0e
    24b0:	5f 85       	ldd	r21, Y+15	; 0x0f
    24b2:	68 89       	ldd	r22, Y+16	; 0x10
    24b4:	79 89       	ldd	r23, Y+17	; 0x11
    24b6:	88 81       	ld	r24, Y
    24b8:	99 81       	ldd	r25, Y+1	; 0x01
    24ba:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    24be:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    24c0:	88 23       	and	r24, r24
    24c2:	19 f5       	brne	.+70     	; 0x250a <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    24c4:	ea 89       	ldd	r30, Y+18	; 0x12
    24c6:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    24c8:	80 81       	ld	r24, Z
    24ca:	88 23       	and	r24, r24
    24cc:	11 f4       	brne	.+4      	; 0x24d2 <follow_path+0x1e2>
    24ce:	44 e0       	ldi	r20, 0x04	; 4
    24d0:	1c c0       	rjmp	.+56     	; 0x250a <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    24d2:	83 85       	ldd	r24, Z+11	; 0x0b
    24d4:	83 fd       	sbrc	r24, 3
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <follow_path+0x210>
    24d8:	df 01       	movw	r26, r30
    24da:	8c 89       	ldd	r24, Y+20	; 0x14
    24dc:	9d 89       	ldd	r25, Y+21	; 0x15
    24de:	9c 01       	movw	r18, r24
    24e0:	f9 01       	movw	r30, r18
    24e2:	2b e0       	ldi	r18, 0x0B	; 11
    24e4:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    24e6:	21 50       	subi	r18, 0x01	; 1
    24e8:	30 40       	sbci	r19, 0x00	; 0
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	2f 3f       	cpi	r18, 0xFF	; 255
    24ee:	38 07       	cpc	r19, r24
    24f0:	61 f0       	breq	.+24     	; 0x250a <follow_path+0x21a>
    24f2:	9c 91       	ld	r25, X
    24f4:	80 81       	ld	r24, Z
    24f6:	98 17       	cp	r25, r24
    24f8:	19 f4       	brne	.+6      	; 0x2500 <follow_path+0x210>
    24fa:	11 96       	adiw	r26, 0x01	; 1
    24fc:	31 96       	adiw	r30, 0x01	; 1
    24fe:	f3 cf       	rjmp	.-26     	; 0x24e6 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    2500:	ce 01       	movw	r24, r28
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <dir_next>
    2508:	cf cf       	rjmp	.-98     	; 0x24a8 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    250a:	ec 89       	ldd	r30, Y+20	; 0x14
    250c:	fd 89       	ldd	r31, Y+21	; 0x15
    250e:	93 85       	ldd	r25, Z+11	; 0x0b
    2510:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    2512:	44 23       	and	r20, r20
    2514:	31 f0       	breq	.+12     	; 0x2522 <follow_path+0x232>
    2516:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    2518:	44 30       	cpi	r20, 0x04	; 4
    251a:	51 f5       	brne	.+84     	; 0x2570 <follow_path+0x280>
    251c:	99 23       	and	r25, r25
    251e:	51 f1       	breq	.+84     	; 0x2574 <follow_path+0x284>
    2520:	2a c0       	rjmp	.+84     	; 0x2576 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    2522:	99 23       	and	r25, r25
    2524:	29 f5       	brne	.+74     	; 0x2570 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    2526:	ea 89       	ldd	r30, Y+18	; 0x12
    2528:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    252a:	83 85       	ldd	r24, Z+11	; 0x0b
    252c:	84 ff       	sbrs	r24, 4
    252e:	22 c0       	rjmp	.+68     	; 0x2574 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2530:	ec 0c       	add	r14, r12
    2532:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2534:	75 88       	ldd	r7, Z+21	; 0x15
    2536:	66 24       	eor	r6, r6
    2538:	24 89       	ldd	r18, Z+20	; 0x14
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	26 29       	or	r18, r6
    253e:	37 29       	or	r19, r7
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	a9 01       	movw	r20, r18
    2546:	33 27       	eor	r19, r19
    2548:	22 27       	eor	r18, r18
    254a:	93 8c       	ldd	r9, Z+27	; 0x1b
    254c:	88 24       	eor	r8, r8
    254e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	88 29       	or	r24, r8
    2554:	99 29       	or	r25, r9
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	28 2b       	or	r18, r24
    255c:	39 2b       	or	r19, r25
    255e:	4a 2b       	or	r20, r26
    2560:	5b 2b       	or	r21, r27
    2562:	2e 83       	std	Y+6, r18	; 0x06
    2564:	3f 83       	std	Y+7, r19	; 0x07
    2566:	48 87       	std	Y+8, r20	; 0x08
    2568:	59 87       	std	Y+9, r21	; 0x09
    256a:	f5 ce       	rjmp	.-534    	; 0x2356 <follow_path+0x66>
		}
    256c:	86 e0       	ldi	r24, 0x06	; 6
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <follow_path+0x286>
    2570:	84 2f       	mov	r24, r20
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <follow_path+0x286>
    2574:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	5f 90       	pop	r5
    2594:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2596:	91 2f       	mov	r25, r17
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	63 cf       	rjmp	.-314    	; 0x2462 <follow_path+0x172>

0000259c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    259c:	0f 93       	push	r16
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	ec 01       	movw	r28, r24
    25a4:	9a 01       	movw	r18, r20
    25a6:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    25a8:	bc 01       	movw	r22, r24
    25aa:	62 5d       	subi	r22, 0xD2	; 210
    25ac:	7f 4f       	sbci	r23, 0xFF	; 255
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	01 e0       	ldi	r16, 0x01	; 1
    25b2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    25b6:	88 23       	and	r24, r24
    25b8:	11 f0       	breq	.+4      	; 0x25be <check_fs+0x22>
    25ba:	63 e0       	ldi	r22, 0x03	; 3
    25bc:	6d c0       	rjmp	.+218    	; 0x2698 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    25be:	c3 5d       	subi	r28, 0xD3	; 211
    25c0:	dd 4f       	sbci	r29, 0xFD	; 253
    25c2:	98 81       	ld	r25, Y
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	2a 91       	ld	r18, -Y
    25c8:	cc 52       	subi	r28, 0x2C	; 44
    25ca:	d2 40       	sbci	r29, 0x02	; 2
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	82 2b       	or	r24, r18
    25d0:	93 2b       	or	r25, r19
    25d2:	85 55       	subi	r24, 0x55	; 85
    25d4:	9a 4a       	sbci	r25, 0xAA	; 170
    25d6:	11 f0       	breq	.+4      	; 0x25dc <check_fs+0x40>
    25d8:	62 e0       	ldi	r22, 0x02	; 2
    25da:	5e c0       	rjmp	.+188    	; 0x2698 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    25dc:	c9 59       	subi	r28, 0x99	; 153
    25de:	df 4f       	sbci	r29, 0xFF	; 255
    25e0:	28 81       	ld	r18, Y
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	52 2f       	mov	r21, r18
    25ea:	44 27       	eor	r20, r20
    25ec:	33 27       	eor	r19, r19
    25ee:	22 27       	eor	r18, r18
    25f0:	8a 91       	ld	r24, -Y
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	dc 01       	movw	r26, r24
    25fa:	99 27       	eor	r25, r25
    25fc:	88 27       	eor	r24, r24
    25fe:	28 2b       	or	r18, r24
    2600:	39 2b       	or	r19, r25
    2602:	4a 2b       	or	r20, r26
    2604:	5b 2b       	or	r21, r27
    2606:	22 97       	sbiw	r28, 0x02	; 2
    2608:	89 91       	ld	r24, Y+
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	28 2b       	or	r18, r24
    2612:	39 2b       	or	r19, r25
    2614:	4a 2b       	or	r20, r26
    2616:	5b 2b       	or	r21, r27
    2618:	98 81       	ld	r25, Y
    261a:	c5 56       	subi	r28, 0x65	; 101
    261c:	d0 40       	sbci	r29, 0x00	; 0
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	a0 e0       	ldi	r26, 0x00	; 0
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	28 2b       	or	r18, r24
    2626:	39 2b       	or	r19, r25
    2628:	4a 2b       	or	r20, r26
    262a:	5b 2b       	or	r21, r27
    262c:	50 70       	andi	r21, 0x00	; 0
    262e:	26 54       	subi	r18, 0x46	; 70
    2630:	31 44       	sbci	r19, 0x41	; 65
    2632:	44 45       	sbci	r20, 0x54	; 84
    2634:	50 40       	sbci	r21, 0x00	; 0
    2636:	11 f4       	brne	.+4      	; 0x263c <check_fs+0xa0>
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	2e c0       	rjmp	.+92     	; 0x2698 <check_fs+0xfc>
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	cd 57       	subi	r28, 0x7D	; 125
    2640:	df 4f       	sbci	r29, 0xFF	; 255
    2642:	28 81       	ld	r18, Y
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	52 2f       	mov	r21, r18
    264c:	44 27       	eor	r20, r20
    264e:	33 27       	eor	r19, r19
    2650:	22 27       	eor	r18, r18
    2652:	8a 91       	ld	r24, -Y
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e0       	ldi	r26, 0x00	; 0
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	dc 01       	movw	r26, r24
    265c:	99 27       	eor	r25, r25
    265e:	88 27       	eor	r24, r24
    2660:	28 2b       	or	r18, r24
    2662:	39 2b       	or	r19, r25
    2664:	4a 2b       	or	r20, r26
    2666:	5b 2b       	or	r21, r27
    2668:	22 97       	sbiw	r28, 0x02	; 2
    266a:	89 91       	ld	r24, Y+
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	28 2b       	or	r18, r24
    2674:	39 2b       	or	r19, r25
    2676:	4a 2b       	or	r20, r26
    2678:	5b 2b       	or	r21, r27
    267a:	98 81       	ld	r25, Y
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	28 2b       	or	r18, r24
    2684:	39 2b       	or	r19, r25
    2686:	4a 2b       	or	r20, r26
    2688:	5b 2b       	or	r21, r27
    268a:	50 70       	andi	r21, 0x00	; 0
    268c:	26 54       	subi	r18, 0x46	; 70
    268e:	31 44       	sbci	r19, 0x41	; 65
    2690:	44 45       	sbci	r20, 0x54	; 84
    2692:	50 40       	sbci	r21, 0x00	; 0
    2694:	09 f0       	breq	.+2      	; 0x2698 <check_fs+0xfc>
    2696:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2698:	86 2f       	mov	r24, r22
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	0f 91       	pop	r16
    26a0:	08 95       	ret

000026a2 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    26a2:	6f 92       	push	r6
    26a4:	7f 92       	push	r7
    26a6:	8f 92       	push	r8
    26a8:	9f 92       	push	r9
    26aa:	af 92       	push	r10
    26ac:	bf 92       	push	r11
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	fc 01       	movw	r30, r24
    26c0:	9b 01       	movw	r18, r22
    26c2:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    26c4:	a0 81       	ld	r26, Z
    26c6:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    26c8:	8c 91       	ld	r24, X
    26ca:	08 2f       	mov	r16, r24
    26cc:	10 e0       	ldi	r17, 0x00	; 0
    26ce:	00 53       	subi	r16, 0x30	; 48
    26d0:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    26d2:	0a 30       	cpi	r16, 0x0A	; 10
    26d4:	11 05       	cpc	r17, r1
    26d6:	68 f4       	brcc	.+26     	; 0x26f2 <chk_mounted+0x50>
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	8c 91       	ld	r24, X
    26dc:	11 97       	sbiw	r26, 0x01	; 1
    26de:	8a 33       	cpi	r24, 0x3A	; 58
    26e0:	41 f4       	brne	.+16     	; 0x26f2 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    26e2:	12 96       	adiw	r26, 0x02	; 2
    26e4:	a0 83       	st	Z, r26
    26e6:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    26e8:	02 30       	cpi	r16, 0x02	; 2
    26ea:	11 05       	cpc	r17, r1
    26ec:	20 f0       	brcs	.+8      	; 0x26f6 <chk_mounted+0x54>
    26ee:	8b e0       	ldi	r24, 0x0B	; 11
    26f0:	91 c2       	rjmp	.+1314   	; 0x2c14 <chk_mounted+0x572>
    26f2:	00 e0       	ldi	r16, 0x00	; 0
    26f4:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    26f6:	f8 01       	movw	r30, r16
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	e6 50       	subi	r30, 0x06	; 6
    26fe:	f8 4d       	sbci	r31, 0xD8	; 216
    2700:	c0 81       	ld	r28, Z
    2702:	d1 81       	ldd	r29, Z+1	; 0x01
    2704:	f9 01       	movw	r30, r18
    2706:	c0 83       	st	Z, r28
    2708:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    270a:	20 97       	sbiw	r28, 0x00	; 0
    270c:	11 f4       	brne	.+4      	; 0x2712 <chk_mounted+0x70>
    270e:	8c e0       	ldi	r24, 0x0C	; 12
    2710:	81 c2       	rjmp	.+1282   	; 0x2c14 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2712:	88 81       	ld	r24, Y
    2714:	88 23       	and	r24, r24
    2716:	79 f0       	breq	.+30     	; 0x2736 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	88 23       	and	r24, r24
    271c:	11 f0       	breq	.+4      	; 0x2722 <chk_mounted+0x80>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <chk_mounted+0x84>
	return Stat;
    2722:	80 91 5b 27 	lds	r24, 0x275B
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2726:	80 fd       	sbrc	r24, 0
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    272a:	ff 20       	and	r15, r15
    272c:	09 f4       	brne	.+2      	; 0x2730 <chk_mounted+0x8e>
    272e:	6f c2       	rjmp	.+1246   	; 0x2c0e <chk_mounted+0x56c>
    2730:	82 fd       	sbrc	r24, 2
    2732:	6b c2       	rjmp	.+1238   	; 0x2c0a <chk_mounted+0x568>
    2734:	6c c2       	rjmp	.+1240   	; 0x2c0e <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2736:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    2738:	f8 01       	movw	r30, r16
    273a:	ee 0f       	add	r30, r30
    273c:	ff 1f       	adc	r31, r31
    273e:	e8 53       	subi	r30, 0x38	; 56
    2740:	fd 4d       	sbci	r31, 0xDD	; 221
    2742:	80 81       	ld	r24, Z
    2744:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    2746:	0e 94 8d 05 	call	0xb1a	; 0xb1a <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    274a:	80 ff       	sbrs	r24, 0
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <chk_mounted+0xb0>
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	61 c2       	rjmp	.+1218   	; 0x2c14 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2752:	ff 20       	and	r15, r15
    2754:	11 f0       	breq	.+4      	; 0x275a <chk_mounted+0xb8>
    2756:	82 fd       	sbrc	r24, 2
    2758:	58 c2       	rjmp	.+1200   	; 0x2c0a <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    275a:	ce 01       	movw	r24, r28
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	0e 94 ce 12 	call	0x259c	; 0x259c <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	21 f0       	breq	.+8      	; 0x2774 <chk_mounted+0xd2>
    276c:	aa 24       	eor	r10, r10
    276e:	bb 24       	eor	r11, r11
    2770:	65 01       	movw	r12, r10
    2772:	3d c0       	rjmp	.+122    	; 0x27ee <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2774:	00 0f       	add	r16, r16
    2776:	11 1f       	adc	r17, r17
    2778:	08 53       	subi	r16, 0x38	; 56
    277a:	1d 4d       	sbci	r17, 0xDD	; 221
    277c:	f8 01       	movw	r30, r16
    277e:	81 81       	ldd	r24, Z+1	; 0x01
    2780:	e8 2f       	mov	r30, r24
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	a4 e0       	ldi	r26, 0x04	; 4
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	aa 95       	dec	r26
    278c:	e1 f7       	brne	.-8      	; 0x2786 <chk_mounted+0xe4>
    278e:	e4 51       	subi	r30, 0x14	; 20
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	ec 0f       	add	r30, r28
    2794:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2796:	84 81       	ldd	r24, Z+4	; 0x04
    2798:	88 23       	and	r24, r24
    279a:	09 f4       	brne	.+2      	; 0x279e <chk_mounted+0xfc>
    279c:	3a c2       	rjmp	.+1140   	; 0x2c12 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    279e:	83 85       	ldd	r24, Z+11	; 0x0b
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	d8 2e       	mov	r13, r24
    27a8:	cc 24       	eor	r12, r12
    27aa:	bb 24       	eor	r11, r11
    27ac:	aa 24       	eor	r10, r10
    27ae:	82 85       	ldd	r24, Z+10	; 0x0a
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e0       	ldi	r26, 0x00	; 0
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	dc 01       	movw	r26, r24
    27b8:	99 27       	eor	r25, r25
    27ba:	88 27       	eor	r24, r24
    27bc:	a8 2a       	or	r10, r24
    27be:	b9 2a       	or	r11, r25
    27c0:	ca 2a       	or	r12, r26
    27c2:	db 2a       	or	r13, r27
    27c4:	80 85       	ldd	r24, Z+8	; 0x08
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e0       	ldi	r26, 0x00	; 0
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	a8 2a       	or	r10, r24
    27ce:	b9 2a       	or	r11, r25
    27d0:	ca 2a       	or	r12, r26
    27d2:	db 2a       	or	r13, r27
    27d4:	91 85       	ldd	r25, Z+9	; 0x09
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	a8 2a       	or	r10, r24
    27de:	b9 2a       	or	r11, r25
    27e0:	ca 2a       	or	r12, r26
    27e2:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    27e4:	ce 01       	movw	r24, r28
    27e6:	b6 01       	movw	r22, r12
    27e8:	a5 01       	movw	r20, r10
    27ea:	0e 94 ce 12 	call	0x259c	; 0x259c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	11 f4       	brne	.+4      	; 0x27f6 <chk_mounted+0x154>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	0f c2       	rjmp	.+1054   	; 0x2c14 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    27f6:	88 23       	and	r24, r24
    27f8:	09 f0       	breq	.+2      	; 0x27fc <chk_mounted+0x15a>
    27fa:	0b c2       	rjmp	.+1046   	; 0x2c12 <chk_mounted+0x570>
    27fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	29 ad       	ldd	r18, Y+57	; 0x39
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	82 2b       	or	r24, r18
    2806:	93 2b       	or	r25, r19
    2808:	80 50       	subi	r24, 0x00	; 0
    280a:	92 40       	sbci	r25, 0x02	; 2
    280c:	09 f0       	breq	.+2      	; 0x2810 <chk_mounted+0x16e>
    280e:	01 c2       	rjmp	.+1026   	; 0x2c12 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2810:	cb 5b       	subi	r28, 0xBB	; 187
    2812:	df 4f       	sbci	r29, 0xFF	; 255
    2814:	98 81       	ld	r25, Y
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	2a 91       	ld	r18, -Y
    281a:	c4 54       	subi	r28, 0x44	; 68
    281c:	d0 40       	sbci	r29, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	82 2b       	or	r24, r18
    2822:	93 2b       	or	r25, r19
    2824:	7c 01       	movw	r14, r24
    2826:	00 e0       	ldi	r16, 0x00	; 0
    2828:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    282a:	e1 14       	cp	r14, r1
    282c:	f1 04       	cpc	r15, r1
    282e:	01 05       	cpc	r16, r1
    2830:	11 05       	cpc	r17, r1
    2832:	41 f5       	brne	.+80     	; 0x2884 <chk_mounted+0x1e2>
    2834:	cb 5a       	subi	r28, 0xAB	; 171
    2836:	df 4f       	sbci	r29, 0xFF	; 255
    2838:	88 81       	ld	r24, Y
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e0       	ldi	r26, 0x00	; 0
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	18 2f       	mov	r17, r24
    2842:	00 27       	eor	r16, r16
    2844:	ff 24       	eor	r15, r15
    2846:	ee 24       	eor	r14, r14
    2848:	8a 91       	ld	r24, -Y
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	a0 e0       	ldi	r26, 0x00	; 0
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	dc 01       	movw	r26, r24
    2852:	99 27       	eor	r25, r25
    2854:	88 27       	eor	r24, r24
    2856:	e8 2a       	or	r14, r24
    2858:	f9 2a       	or	r15, r25
    285a:	0a 2b       	or	r16, r26
    285c:	1b 2b       	or	r17, r27
    285e:	22 97       	sbiw	r28, 0x02	; 2
    2860:	89 91       	ld	r24, Y+
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a0 e0       	ldi	r26, 0x00	; 0
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e8 2a       	or	r14, r24
    286a:	f9 2a       	or	r15, r25
    286c:	0a 2b       	or	r16, r26
    286e:	1b 2b       	or	r17, r27
    2870:	98 81       	ld	r25, Y
    2872:	c3 55       	subi	r28, 0x53	; 83
    2874:	d0 40       	sbci	r29, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	a0 e0       	ldi	r26, 0x00	; 0
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e8 2a       	or	r14, r24
    287e:	f9 2a       	or	r15, r25
    2880:	0a 2b       	or	r16, r26
    2882:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    2884:	ee 8a       	std	Y+22, r14	; 0x16
    2886:	ff 8a       	std	Y+23, r15	; 0x17
    2888:	08 8f       	std	Y+24, r16	; 0x18
    288a:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    288c:	2e ad       	ldd	r18, Y+62	; 0x3e
    288e:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	c8 01       	movw	r24, r16
    2898:	b7 01       	movw	r22, r14
    289a:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    289e:	3b 01       	movw	r6, r22
    28a0:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    28a2:	9d ad       	ldd	r25, Y+61	; 0x3d
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	82 2b       	or	r24, r18
    28ac:	93 2b       	or	r25, r19
    28ae:	a0 e0       	ldi	r26, 0x00	; 0
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	8a 0d       	add	r24, r10
    28b4:	9b 1d       	adc	r25, r11
    28b6:	ac 1d       	adc	r26, r12
    28b8:	bd 1d       	adc	r27, r13
    28ba:	8e 8f       	std	Y+30, r24	; 0x1e
    28bc:	9f 8f       	std	Y+31, r25	; 0x1f
    28be:	a8 a3       	std	Y+32, r26	; 0x20
    28c0:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    28c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    28c4:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    28c6:	c0 5c       	subi	r28, 0xC0	; 192
    28c8:	df 4f       	sbci	r29, 0xFF	; 255
    28ca:	98 81       	ld	r25, Y
    28cc:	c0 54       	subi	r28, 0x40	; 64
    28ce:	d0 40       	sbci	r29, 0x00	; 0
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	2f ad       	ldd	r18, Y+63	; 0x3f
    28d4:	42 2f       	mov	r20, r18
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	48 2b       	or	r20, r24
    28da:	59 2b       	or	r21, r25
    28dc:	48 87       	std	Y+8, r20	; 0x08
    28de:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    28e0:	ce 5b       	subi	r28, 0xBE	; 190
    28e2:	df 4f       	sbci	r29, 0xFF	; 255
    28e4:	98 81       	ld	r25, Y
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	2a 91       	ld	r18, -Y
    28ea:	c1 54       	subi	r28, 0x41	; 65
    28ec:	d0 40       	sbci	r29, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	82 2b       	or	r24, r18
    28f2:	93 2b       	or	r25, r19
    28f4:	7c 01       	movw	r14, r24
    28f6:	00 e0       	ldi	r16, 0x00	; 0
    28f8:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    28fa:	e1 14       	cp	r14, r1
    28fc:	f1 04       	cpc	r15, r1
    28fe:	01 05       	cpc	r16, r1
    2900:	11 05       	cpc	r17, r1
    2902:	41 f5       	brne	.+80     	; 0x2954 <chk_mounted+0x2b2>
    2904:	cf 5a       	subi	r28, 0xAF	; 175
    2906:	df 4f       	sbci	r29, 0xFF	; 255
    2908:	88 81       	ld	r24, Y
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 e0       	ldi	r26, 0x00	; 0
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	18 2f       	mov	r17, r24
    2912:	00 27       	eor	r16, r16
    2914:	ff 24       	eor	r15, r15
    2916:	ee 24       	eor	r14, r14
    2918:	8a 91       	ld	r24, -Y
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	dc 01       	movw	r26, r24
    2922:	99 27       	eor	r25, r25
    2924:	88 27       	eor	r24, r24
    2926:	e8 2a       	or	r14, r24
    2928:	f9 2a       	or	r15, r25
    292a:	0a 2b       	or	r16, r26
    292c:	1b 2b       	or	r17, r27
    292e:	22 97       	sbiw	r28, 0x02	; 2
    2930:	89 91       	ld	r24, Y+
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e8 2a       	or	r14, r24
    293a:	f9 2a       	or	r15, r25
    293c:	0a 2b       	or	r16, r26
    293e:	1b 2b       	or	r17, r27
    2940:	98 81       	ld	r25, Y
    2942:	cf 54       	subi	r28, 0x4F	; 79
    2944:	d0 40       	sbci	r29, 0x00	; 0
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	a0 e0       	ldi	r26, 0x00	; 0
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e8 2a       	or	r14, r24
    294e:	f9 2a       	or	r15, r25
    2950:	0a 2b       	or	r16, r26
    2952:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2954:	9d ad       	ldd	r25, Y+61	; 0x3d
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	2c ad       	ldd	r18, Y+60	; 0x3c
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	82 2b       	or	r24, r18
    295e:	93 2b       	or	r25, r19
    2960:	a0 e0       	ldi	r26, 0x00	; 0
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e8 1a       	sub	r14, r24
    2966:	f9 0a       	sbc	r15, r25
    2968:	0a 0b       	sbc	r16, r26
    296a:	1b 0b       	sbc	r17, r27
    296c:	e6 18       	sub	r14, r6
    296e:	f7 08       	sbc	r15, r7
    2970:	08 09       	sbc	r16, r8
    2972:	19 09       	sbc	r17, r9
    2974:	f4 e0       	ldi	r31, 0x04	; 4
    2976:	56 95       	lsr	r21
    2978:	47 95       	ror	r20
    297a:	fa 95       	dec	r31
    297c:	e1 f7       	brne	.-8      	; 0x2976 <chk_mounted+0x2d4>
    297e:	ca 01       	movw	r24, r20
    2980:	a0 e0       	ldi	r26, 0x00	; 0
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e8 1a       	sub	r14, r24
    2986:	f9 0a       	sbc	r15, r25
    2988:	0a 0b       	sbc	r16, r26
    298a:	1b 0b       	sbc	r17, r27
    298c:	2a 81       	ldd	r18, Y+2	; 0x02
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	c8 01       	movw	r24, r16
    2996:	b7 01       	movw	r22, r14
    2998:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    299c:	2e 5f       	subi	r18, 0xFE	; 254
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	4f 4f       	sbci	r20, 0xFF	; 255
    29a2:	5f 4f       	sbci	r21, 0xFF	; 255
    29a4:	2a 8f       	std	Y+26, r18	; 0x1a
    29a6:	3b 8f       	std	Y+27, r19	; 0x1b
    29a8:	4c 8f       	std	Y+28, r20	; 0x1c
    29aa:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    29ac:	27 3f       	cpi	r18, 0xF7	; 247
    29ae:	8f e0       	ldi	r24, 0x0F	; 15
    29b0:	38 07       	cpc	r19, r24
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	48 07       	cpc	r20, r24
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	58 07       	cpc	r21, r24
    29ba:	10 f4       	brcc	.+4      	; 0x29c0 <chk_mounted+0x31e>
    29bc:	11 e0       	ldi	r17, 0x01	; 1
    29be:	07 c0       	rjmp	.+14     	; 0x29ce <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    29c0:	27 5f       	subi	r18, 0xF7	; 247
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	40 40       	sbci	r20, 0x00	; 0
    29c6:	50 40       	sbci	r21, 0x00	; 0
    29c8:	08 f0       	brcs	.+2      	; 0x29cc <chk_mounted+0x32a>
    29ca:	33 c1       	rjmp	.+614    	; 0x2c32 <chk_mounted+0x590>
    29cc:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    29ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29d2:	a8 a1       	ldd	r26, Y+32	; 0x20
    29d4:	b9 a1       	ldd	r27, Y+33	; 0x21
    29d6:	86 0d       	add	r24, r6
    29d8:	97 1d       	adc	r25, r7
    29da:	a8 1d       	adc	r26, r8
    29dc:	b9 1d       	adc	r27, r9
    29de:	8a a3       	std	Y+34, r24	; 0x22
    29e0:	9b a3       	std	Y+35, r25	; 0x23
    29e2:	ac a3       	std	Y+36, r26	; 0x24
    29e4:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    29e6:	88 85       	ldd	r24, Y+8	; 0x08
    29e8:	99 85       	ldd	r25, Y+9	; 0x09
    29ea:	e4 e0       	ldi	r30, 0x04	; 4
    29ec:	96 95       	lsr	r25
    29ee:	87 95       	ror	r24
    29f0:	ea 95       	dec	r30
    29f2:	e1 f7       	brne	.-8      	; 0x29ec <chk_mounted+0x34a>
    29f4:	a0 e0       	ldi	r26, 0x00	; 0
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    29fa:	3f 8d       	ldd	r19, Y+31	; 0x1f
    29fc:	48 a1       	ldd	r20, Y+32	; 0x20
    29fe:	59 a1       	ldd	r21, Y+33	; 0x21
    2a00:	82 0f       	add	r24, r18
    2a02:	93 1f       	adc	r25, r19
    2a04:	a4 1f       	adc	r26, r20
    2a06:	b5 1f       	adc	r27, r21
    2a08:	86 0d       	add	r24, r6
    2a0a:	97 1d       	adc	r25, r7
    2a0c:	a8 1d       	adc	r26, r8
    2a0e:	b9 1d       	adc	r27, r9
    2a10:	8e a3       	std	Y+38, r24	; 0x26
    2a12:	9f a3       	std	Y+39, r25	; 0x27
    2a14:	a8 a7       	std	Y+40, r26	; 0x28
    2a16:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	9f ef       	ldi	r25, 0xFF	; 255
    2a1c:	af ef       	ldi	r26, 0xFF	; 255
    2a1e:	bf ef       	ldi	r27, 0xFF	; 255
    2a20:	8e 87       	std	Y+14, r24	; 0x0e
    2a22:	9f 87       	std	Y+15, r25	; 0x0f
    2a24:	a8 8b       	std	Y+16, r26	; 0x10
    2a26:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2a28:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2a2a:	13 30       	cpi	r17, 0x03	; 3
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <chk_mounted+0x38e>
    2a2e:	dc c0       	rjmp	.+440    	; 0x2be8 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2a30:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2a32:	c1 5a       	subi	r28, 0xA1	; 161
    2a34:	df 4f       	sbci	r29, 0xFF	; 255
    2a36:	38 81       	ld	r19, Y
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	8a 91       	ld	r24, -Y
    2a3c:	ce 55       	subi	r28, 0x5E	; 94
    2a3e:	d0 40       	sbci	r29, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	28 2b       	or	r18, r24
    2a44:	39 2b       	or	r19, r25
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	2a 0d       	add	r18, r10
    2a4c:	3b 1d       	adc	r19, r11
    2a4e:	4c 1d       	adc	r20, r12
    2a50:	5d 1d       	adc	r21, r13
    2a52:	2a 8b       	std	Y+18, r18	; 0x12
    2a54:	3b 8b       	std	Y+19, r19	; 0x13
    2a56:	4c 8b       	std	Y+20, r20	; 0x14
    2a58:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2a5a:	be 01       	movw	r22, r28
    2a5c:	62 5d       	subi	r22, 0xD2	; 210
    2a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	01 e0       	ldi	r16, 0x01	; 1
    2a64:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    2a68:	88 23       	and	r24, r24
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <chk_mounted+0x3cc>
    2a6c:	bd c0       	rjmp	.+378    	; 0x2be8 <chk_mounted+0x546>
    2a6e:	c3 5d       	subi	r28, 0xD3	; 211
    2a70:	dd 4f       	sbci	r29, 0xFD	; 253
    2a72:	98 81       	ld	r25, Y
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	2a 91       	ld	r18, -Y
    2a78:	cc 52       	subi	r28, 0x2C	; 44
    2a7a:	d2 40       	sbci	r29, 0x02	; 2
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	82 2b       	or	r24, r18
    2a80:	93 2b       	or	r25, r19
    2a82:	85 55       	subi	r24, 0x55	; 85
    2a84:	9a 4a       	sbci	r25, 0xAA	; 170
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <chk_mounted+0x3e8>
    2a88:	af c0       	rjmp	.+350    	; 0x2be8 <chk_mounted+0x546>
    2a8a:	29 a9       	ldd	r18, Y+49	; 0x31
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	52 2f       	mov	r21, r18
    2a94:	44 27       	eor	r20, r20
    2a96:	33 27       	eor	r19, r19
    2a98:	22 27       	eor	r18, r18
    2a9a:	88 a9       	ldd	r24, Y+48	; 0x30
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	99 27       	eor	r25, r25
    2aa6:	88 27       	eor	r24, r24
    2aa8:	28 2b       	or	r18, r24
    2aaa:	39 2b       	or	r19, r25
    2aac:	4a 2b       	or	r20, r26
    2aae:	5b 2b       	or	r21, r27
    2ab0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 e0       	ldi	r26, 0x00	; 0
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	28 2b       	or	r18, r24
    2aba:	39 2b       	or	r19, r25
    2abc:	4a 2b       	or	r20, r26
    2abe:	5b 2b       	or	r21, r27
    2ac0:	9f a5       	ldd	r25, Y+47	; 0x2f
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	a0 e0       	ldi	r26, 0x00	; 0
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	28 2b       	or	r18, r24
    2aca:	39 2b       	or	r19, r25
    2acc:	4a 2b       	or	r20, r26
    2ace:	5b 2b       	or	r21, r27
    2ad0:	22 55       	subi	r18, 0x52	; 82
    2ad2:	32 45       	sbci	r19, 0x52	; 82
    2ad4:	41 46       	sbci	r20, 0x61	; 97
    2ad6:	51 44       	sbci	r21, 0x41	; 65
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <chk_mounted+0x43a>
    2ada:	86 c0       	rjmp	.+268    	; 0x2be8 <chk_mounted+0x546>
    2adc:	cb 5e       	subi	r28, 0xEB	; 235
    2ade:	dd 4f       	sbci	r29, 0xFD	; 253
    2ae0:	28 81       	ld	r18, Y
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	52 2f       	mov	r21, r18
    2aea:	44 27       	eor	r20, r20
    2aec:	33 27       	eor	r19, r19
    2aee:	22 27       	eor	r18, r18
    2af0:	8a 91       	ld	r24, -Y
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a0 e0       	ldi	r26, 0x00	; 0
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	dc 01       	movw	r26, r24
    2afa:	99 27       	eor	r25, r25
    2afc:	88 27       	eor	r24, r24
    2afe:	28 2b       	or	r18, r24
    2b00:	39 2b       	or	r19, r25
    2b02:	4a 2b       	or	r20, r26
    2b04:	5b 2b       	or	r21, r27
    2b06:	22 97       	sbiw	r28, 0x02	; 2
    2b08:	89 91       	ld	r24, Y+
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	28 2b       	or	r18, r24
    2b12:	39 2b       	or	r19, r25
    2b14:	4a 2b       	or	r20, r26
    2b16:	5b 2b       	or	r21, r27
    2b18:	98 81       	ld	r25, Y
    2b1a:	c3 51       	subi	r28, 0x13	; 19
    2b1c:	d2 40       	sbci	r29, 0x02	; 2
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	28 2b       	or	r18, r24
    2b26:	39 2b       	or	r19, r25
    2b28:	4a 2b       	or	r20, r26
    2b2a:	5b 2b       	or	r21, r27
    2b2c:	22 57       	subi	r18, 0x72	; 114
    2b2e:	32 47       	sbci	r19, 0x72	; 114
    2b30:	41 44       	sbci	r20, 0x41	; 65
    2b32:	51 46       	sbci	r21, 0x61	; 97
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <chk_mounted+0x496>
    2b36:	58 c0       	rjmp	.+176    	; 0x2be8 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2b38:	c3 5e       	subi	r28, 0xE3	; 227
    2b3a:	dd 4f       	sbci	r29, 0xFD	; 253
    2b3c:	28 81       	ld	r18, Y
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	52 2f       	mov	r21, r18
    2b46:	44 27       	eor	r20, r20
    2b48:	33 27       	eor	r19, r19
    2b4a:	22 27       	eor	r18, r18
    2b4c:	8a 91       	ld	r24, -Y
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 e0       	ldi	r26, 0x00	; 0
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	dc 01       	movw	r26, r24
    2b56:	99 27       	eor	r25, r25
    2b58:	88 27       	eor	r24, r24
    2b5a:	28 2b       	or	r18, r24
    2b5c:	39 2b       	or	r19, r25
    2b5e:	4a 2b       	or	r20, r26
    2b60:	5b 2b       	or	r21, r27
    2b62:	22 97       	sbiw	r28, 0x02	; 2
    2b64:	89 91       	ld	r24, Y+
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	28 2b       	or	r18, r24
    2b6e:	39 2b       	or	r19, r25
    2b70:	4a 2b       	or	r20, r26
    2b72:	5b 2b       	or	r21, r27
    2b74:	98 81       	ld	r25, Y
    2b76:	cb 51       	subi	r28, 0x1B	; 27
    2b78:	d2 40       	sbci	r29, 0x02	; 2
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	28 2b       	or	r18, r24
    2b82:	39 2b       	or	r19, r25
    2b84:	4a 2b       	or	r20, r26
    2b86:	5b 2b       	or	r21, r27
    2b88:	2a 87       	std	Y+10, r18	; 0x0a
    2b8a:	3b 87       	std	Y+11, r19	; 0x0b
    2b8c:	4c 87       	std	Y+12, r20	; 0x0c
    2b8e:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2b90:	c7 5e       	subi	r28, 0xE7	; 231
    2b92:	dd 4f       	sbci	r29, 0xFD	; 253
    2b94:	28 81       	ld	r18, Y
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	52 2f       	mov	r21, r18
    2b9e:	44 27       	eor	r20, r20
    2ba0:	33 27       	eor	r19, r19
    2ba2:	22 27       	eor	r18, r18
    2ba4:	8a 91       	ld	r24, -Y
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	dc 01       	movw	r26, r24
    2bae:	99 27       	eor	r25, r25
    2bb0:	88 27       	eor	r24, r24
    2bb2:	28 2b       	or	r18, r24
    2bb4:	39 2b       	or	r19, r25
    2bb6:	4a 2b       	or	r20, r26
    2bb8:	5b 2b       	or	r21, r27
    2bba:	22 97       	sbiw	r28, 0x02	; 2
    2bbc:	89 91       	ld	r24, Y+
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e0       	ldi	r26, 0x00	; 0
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	28 2b       	or	r18, r24
    2bc6:	39 2b       	or	r19, r25
    2bc8:	4a 2b       	or	r20, r26
    2bca:	5b 2b       	or	r21, r27
    2bcc:	98 81       	ld	r25, Y
    2bce:	c7 51       	subi	r28, 0x17	; 23
    2bd0:	d2 40       	sbci	r29, 0x02	; 2
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	a0 e0       	ldi	r26, 0x00	; 0
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	28 2b       	or	r18, r24
    2bda:	39 2b       	or	r19, r25
    2bdc:	4a 2b       	or	r20, r26
    2bde:	5b 2b       	or	r21, r27
    2be0:	2e 87       	std	Y+14, r18	; 0x0e
    2be2:	3f 87       	std	Y+15, r19	; 0x0f
    2be4:	48 8b       	std	Y+16, r20	; 0x10
    2be6:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2be8:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2bea:	1a a6       	std	Y+42, r1	; 0x2a
    2bec:	1b a6       	std	Y+43, r1	; 0x2b
    2bee:	1c a6       	std	Y+44, r1	; 0x2c
    2bf0:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2bf2:	80 91 fe 27 	lds	r24, 0x27FE
    2bf6:	90 91 ff 27 	lds	r25, 0x27FF
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	80 93 fe 27 	sts	0x27FE, r24
    2c00:	90 93 ff 27 	sts	0x27FF, r25
    2c04:	8e 83       	std	Y+6, r24	; 0x06
    2c06:	9f 83       	std	Y+7, r25	; 0x07
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <chk_mounted+0x56c>

	return FR_OK;
    2c0a:	8a e0       	ldi	r24, 0x0A	; 10
    2c0c:	03 c0       	rjmp	.+6      	; 0x2c14 <chk_mounted+0x572>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <chk_mounted+0x572>
    2c12:	8d e0       	ldi	r24, 0x0D	; 13
}
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	bf 90       	pop	r11
    2c26:	af 90       	pop	r10
    2c28:	9f 90       	pop	r9
    2c2a:	8f 90       	pop	r8
    2c2c:	7f 90       	pop	r7
    2c2e:	6f 90       	pop	r6
    2c30:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2c32:	c3 5a       	subi	r28, 0xA3	; 163
    2c34:	df 4f       	sbci	r29, 0xFF	; 255
    2c36:	28 81       	ld	r18, Y
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	52 2f       	mov	r21, r18
    2c40:	44 27       	eor	r20, r20
    2c42:	33 27       	eor	r19, r19
    2c44:	22 27       	eor	r18, r18
    2c46:	8a 91       	ld	r24, -Y
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 e0       	ldi	r26, 0x00	; 0
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	dc 01       	movw	r26, r24
    2c50:	99 27       	eor	r25, r25
    2c52:	88 27       	eor	r24, r24
    2c54:	28 2b       	or	r18, r24
    2c56:	39 2b       	or	r19, r25
    2c58:	4a 2b       	or	r20, r26
    2c5a:	5b 2b       	or	r21, r27
    2c5c:	22 97       	sbiw	r28, 0x02	; 2
    2c5e:	89 91       	ld	r24, Y+
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e0       	ldi	r26, 0x00	; 0
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	28 2b       	or	r18, r24
    2c68:	39 2b       	or	r19, r25
    2c6a:	4a 2b       	or	r20, r26
    2c6c:	5b 2b       	or	r21, r27
    2c6e:	98 81       	ld	r25, Y
    2c70:	cb 55       	subi	r28, 0x5B	; 91
    2c72:	d0 40       	sbci	r29, 0x00	; 0
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	a0 e0       	ldi	r26, 0x00	; 0
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	28 2b       	or	r18, r24
    2c7c:	39 2b       	or	r19, r25
    2c7e:	4a 2b       	or	r20, r26
    2c80:	5b 2b       	or	r21, r27
    2c82:	2a a3       	std	Y+34, r18	; 0x22
    2c84:	3b a3       	std	Y+35, r19	; 0x23
    2c86:	4c a3       	std	Y+36, r20	; 0x24
    2c88:	5d a3       	std	Y+37, r21	; 0x25
    2c8a:	13 e0       	ldi	r17, 0x03	; 3
    2c8c:	ac ce       	rjmp	.-680    	; 0x29e6 <chk_mounted+0x344>

00002c8e <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2c8e:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	a9 f0       	breq	.+42     	; 0x2cbe <validate+0x30>
    2c94:	80 81       	ld	r24, Z
    2c96:	88 23       	and	r24, r24
    2c98:	91 f0       	breq	.+36     	; 0x2cbe <validate+0x30>
    2c9a:	86 81       	ldd	r24, Z+6	; 0x06
    2c9c:	97 81       	ldd	r25, Z+7	; 0x07
    2c9e:	86 17       	cp	r24, r22
    2ca0:	97 07       	cpc	r25, r23
    2ca2:	69 f4       	brne	.+26     	; 0x2cbe <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2ca4:	81 81       	ldd	r24, Z+1	; 0x01
    2ca6:	88 23       	and	r24, r24
    2ca8:	11 f0       	breq	.+4      	; 0x2cae <validate+0x20>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	02 c0       	rjmp	.+4      	; 0x2cb2 <validate+0x24>
	return Stat;
    2cae:	80 91 5b 27 	lds	r24, 0x275B
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2cb2:	80 fd       	sbrc	r24, 0
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <validate+0x2c>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	08 95       	ret
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	08 95       	ret
    2cbe:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2cc0:	08 95       	ret

00002cc2 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	10 f0       	brcs	.+4      	; 0x2cd0 <f_mount+0xe>
    2ccc:	8b e0       	ldi	r24, 0x0B	; 11
    2cce:	17 c0       	rjmp	.+46     	; 0x2cfe <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2cd0:	a8 2f       	mov	r26, r24
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	fd 01       	movw	r30, r26
    2cd6:	ee 0f       	add	r30, r30
    2cd8:	ff 1f       	adc	r31, r31
    2cda:	e6 50       	subi	r30, 0x06	; 6
    2cdc:	f8 4d       	sbci	r31, 0xD8	; 216
    2cde:	01 90       	ld	r0, Z+
    2ce0:	f0 81       	ld	r31, Z
    2ce2:	e0 2d       	mov	r30, r0

	if (rfs) {
    2ce4:	30 97       	sbiw	r30, 0x00	; 0
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2ce8:	10 82       	st	Z, r1
	}

	if (fs) {
    2cea:	20 97       	sbiw	r28, 0x00	; 0
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2cee:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2cf0:	aa 0f       	add	r26, r26
    2cf2:	bb 1f       	adc	r27, r27
    2cf4:	a6 50       	subi	r26, 0x06	; 6
    2cf6:	b8 4d       	sbci	r27, 0xD8	; 216
    2cf8:	cd 93       	st	X+, r28
    2cfa:	dc 93       	st	X, r29
    2cfc:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d04:	5f 92       	push	r5
    2d06:	6f 92       	push	r6
    2d08:	7f 92       	push	r7
    2d0a:	8f 92       	push	r8
    2d0c:	9f 92       	push	r9
    2d0e:	af 92       	push	r10
    2d10:	bf 92       	push	r11
    2d12:	cf 92       	push	r12
    2d14:	df 92       	push	r13
    2d16:	ef 92       	push	r14
    2d18:	ff 92       	push	r15
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	a4 97       	sbiw	r28, 0x24	; 36
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	3c 01       	movw	r6, r24
    2d2e:	6b a3       	std	Y+35, r22	; 0x23
    2d30:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2d32:	dc 01       	movw	r26, r24
    2d34:	1d 92       	st	X+, r1
    2d36:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2d38:	3f e1       	ldi	r19, 0x1F	; 31
    2d3a:	53 2e       	mov	r5, r19
    2d3c:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2d3e:	8e 01       	movw	r16, r28
    2d40:	03 5f       	subi	r16, 0xF3	; 243
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	4e 71       	andi	r20, 0x1E	; 30
    2d46:	ce 01       	movw	r24, r28
    2d48:	83 96       	adiw	r24, 0x23	; 35
    2d4a:	b8 01       	movw	r22, r16
    2d4c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2d50:	88 23       	and	r24, r24
    2d52:	11 f0       	breq	.+4      	; 0x2d58 <f_open+0x54>
    2d54:	28 2f       	mov	r18, r24
    2d56:	32 c1       	rjmp	.+612    	; 0x2fbc <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2d58:	ce 01       	movw	r24, r28
    2d5a:	01 96       	adiw	r24, 0x01	; 1
    2d5c:	89 a3       	std	Y+33, r24	; 0x21
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2d60:	6b a1       	ldd	r22, Y+35	; 0x23
    2d62:	7c a1       	ldd	r23, Y+36	; 0x24
    2d64:	c8 01       	movw	r24, r16
    2d66:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
    2d6a:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2d6c:	45 2d       	mov	r20, r5
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	ca 01       	movw	r24, r20
    2d72:	8c 71       	andi	r24, 0x1C	; 28
    2d74:	90 70       	andi	r25, 0x00	; 0
    2d76:	89 2b       	or	r24, r25
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <f_open+0x78>
    2d7a:	84 c0       	rjmp	.+264    	; 0x2e84 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2d7c:	22 23       	and	r18, r18
    2d7e:	79 f0       	breq	.+30     	; 0x2d9e <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2d80:	24 30       	cpi	r18, 0x04	; 4
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <f_open+0x82>
    2d84:	1b c1       	rjmp	.+566    	; 0x2fbc <f_open+0x2b8>
				res = dir_register(&dj);
    2d86:	c8 01       	movw	r24, r16
    2d88:	0e 94 74 10 	call	0x20e8	; 0x20e8 <dir_register>
    2d8c:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2d8e:	88 23       	and	r24, r24
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <f_open+0x90>
    2d92:	14 c1       	rjmp	.+552    	; 0x2fbc <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2d94:	b8 e0       	ldi	r27, 0x08	; 8
    2d96:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2d98:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2d9a:	18 a1       	ldd	r17, Y+32	; 0x20
    2d9c:	5b c0       	rjmp	.+182    	; 0x2e54 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2d9e:	52 fe       	sbrs	r5, 2
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <f_open+0xa2>
    2da2:	28 e0       	ldi	r18, 0x08	; 8
    2da4:	0b c1       	rjmp	.+534    	; 0x2fbc <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2da6:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2da8:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2daa:	01 15       	cp	r16, r1
    2dac:	11 05       	cpc	r17, r1
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <f_open+0xae>
    2db0:	02 c1       	rjmp	.+516    	; 0x2fb6 <f_open+0x2b2>
    2db2:	f8 01       	movw	r30, r16
    2db4:	83 85       	ldd	r24, Z+11	; 0x0b
    2db6:	81 71       	andi	r24, 0x11	; 17
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <f_open+0xb8>
    2dba:	fd c0       	rjmp	.+506    	; 0x2fb6 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2dbc:	53 fe       	sbrs	r5, 3
    2dbe:	4a c0       	rjmp	.+148    	; 0x2e54 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2dc0:	95 89       	ldd	r25, Z+21	; 0x15
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	24 89       	ldd	r18, Z+20	; 0x14
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	82 2b       	or	r24, r18
    2dca:	93 2b       	or	r25, r19
    2dcc:	a0 e0       	ldi	r26, 0x00	; 0
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	7c 01       	movw	r14, r24
    2dd2:	dd 24       	eor	r13, r13
    2dd4:	cc 24       	eor	r12, r12
    2dd6:	93 8d       	ldd	r25, Z+27	; 0x1b
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	82 2b       	or	r24, r18
    2de0:	93 2b       	or	r25, r19
    2de2:	a0 e0       	ldi	r26, 0x00	; 0
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	c8 2a       	or	r12, r24
    2de8:	d9 2a       	or	r13, r25
    2dea:	ea 2a       	or	r14, r26
    2dec:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2dee:	14 8a       	std	Z+20, r1	; 0x14
    2df0:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2df2:	12 8e       	std	Z+26, r1	; 0x1a
    2df4:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2df6:	14 8e       	std	Z+28, r1	; 0x1c
    2df8:	15 8e       	std	Z+29, r1	; 0x1d
    2dfa:	16 8e       	std	Z+30, r1	; 0x1e
    2dfc:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2dfe:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e00:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2e06:	82 a4       	ldd	r8, Z+42	; 0x2a
    2e08:	93 a4       	ldd	r9, Z+43	; 0x2b
    2e0a:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2e0c:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2e0e:	c1 14       	cp	r12, r1
    2e10:	d1 04       	cpc	r13, r1
    2e12:	e1 04       	cpc	r14, r1
    2e14:	f1 04       	cpc	r15, r1
    2e16:	a1 f0       	breq	.+40     	; 0x2e40 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2e18:	cf 01       	movw	r24, r30
    2e1a:	b7 01       	movw	r22, r14
    2e1c:	a6 01       	movw	r20, r12
    2e1e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <remove_chain>
    2e22:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2e24:	88 23       	and	r24, r24
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <f_open+0x126>
    2e28:	c9 c0       	rjmp	.+402    	; 0x2fbc <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2e2a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e2c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e2e:	08 94       	sec
    2e30:	c1 08       	sbc	r12, r1
    2e32:	d1 08       	sbc	r13, r1
    2e34:	e1 08       	sbc	r14, r1
    2e36:	f1 08       	sbc	r15, r1
    2e38:	c2 86       	std	Z+10, r12	; 0x0a
    2e3a:	d3 86       	std	Z+11, r13	; 0x0b
    2e3c:	e4 86       	std	Z+12, r14	; 0x0c
    2e3e:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e44:	b5 01       	movw	r22, r10
    2e46:	a4 01       	movw	r20, r8
    2e48:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    2e4c:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e4e:	88 23       	and	r24, r24
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <f_open+0x150>
    2e52:	b4 c0       	rjmp	.+360    	; 0x2fbc <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2e54:	53 fe       	sbrs	r5, 3
    2e56:	27 c0       	rjmp	.+78     	; 0x2ea6 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2e58:	d8 01       	movw	r26, r16
    2e5a:	1b 96       	adiw	r26, 0x0b	; 11
    2e5c:	1c 92       	st	X, r1
    2e5e:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2e60:	1e 96       	adiw	r26, 0x0e	; 14
    2e62:	1c 92       	st	X, r1
    2e64:	1e 97       	sbiw	r26, 0x0e	; 14
    2e66:	1f 96       	adiw	r26, 0x0f	; 15
    2e68:	1c 92       	st	X, r1
    2e6a:	1f 97       	sbiw	r26, 0x0f	; 15
    2e6c:	50 96       	adiw	r26, 0x10	; 16
    2e6e:	1c 92       	st	X, r1
    2e70:	50 97       	sbiw	r26, 0x10	; 16
    2e72:	51 96       	adiw	r26, 0x11	; 17
    2e74:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2e76:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e78:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2e7e:	b0 e2       	ldi	r27, 0x20	; 32
    2e80:	5b 2a       	or	r5, r27
    2e82:	11 c0       	rjmp	.+34     	; 0x2ea6 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2e84:	22 23       	and	r18, r18
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <f_open+0x186>
    2e88:	99 c0       	rjmp	.+306    	; 0x2fbc <f_open+0x2b8>
		dir = dj.dir;
    2e8a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e8c:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2e8e:	01 15       	cp	r16, r1
    2e90:	11 05       	cpc	r17, r1
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <f_open+0x192>
    2e94:	92 c0       	rjmp	.+292    	; 0x2fba <f_open+0x2b6>
    2e96:	f8 01       	movw	r30, r16
    2e98:	83 85       	ldd	r24, Z+11	; 0x0b
    2e9a:	84 fd       	sbrc	r24, 4
    2e9c:	8e c0       	rjmp	.+284    	; 0x2fba <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2e9e:	51 fe       	sbrs	r5, 1
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <f_open+0x1a2>
    2ea2:	80 fd       	sbrc	r24, 0
    2ea4:	88 c0       	rjmp	.+272    	; 0x2fb6 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2ea6:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ea8:	fe 85       	ldd	r31, Y+14	; 0x0e
    2eaa:	22 a5       	ldd	r18, Z+42	; 0x2a
    2eac:	33 a5       	ldd	r19, Z+43	; 0x2b
    2eae:	44 a5       	ldd	r20, Z+44	; 0x2c
    2eb0:	55 a5       	ldd	r21, Z+45	; 0x2d
    2eb2:	d3 01       	movw	r26, r6
    2eb4:	5a 96       	adiw	r26, 0x1a	; 26
    2eb6:	2d 93       	st	X+, r18
    2eb8:	3d 93       	st	X+, r19
    2eba:	4d 93       	st	X+, r20
    2ebc:	5c 93       	st	X, r21
    2ebe:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2ec0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ec2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ec4:	5e 96       	adiw	r26, 0x1e	; 30
    2ec6:	8d 93       	st	X+, r24
    2ec8:	9c 93       	st	X, r25
    2eca:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2ecc:	14 96       	adiw	r26, 0x04	; 4
    2ece:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2ed0:	d8 01       	movw	r26, r16
    2ed2:	55 96       	adiw	r26, 0x15	; 21
    2ed4:	3c 91       	ld	r19, X
    2ed6:	55 97       	sbiw	r26, 0x15	; 21
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	54 96       	adiw	r26, 0x14	; 20
    2edc:	8c 91       	ld	r24, X
    2ede:	54 97       	sbiw	r26, 0x14	; 20
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	28 2b       	or	r18, r24
    2ee4:	39 2b       	or	r19, r25
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	a9 01       	movw	r20, r18
    2eec:	33 27       	eor	r19, r19
    2eee:	22 27       	eor	r18, r18
    2ef0:	5b 96       	adiw	r26, 0x1b	; 27
    2ef2:	9c 91       	ld	r25, X
    2ef4:	5b 97       	sbiw	r26, 0x1b	; 27
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	5a 96       	adiw	r26, 0x1a	; 26
    2efa:	6c 91       	ld	r22, X
    2efc:	70 e0       	ldi	r23, 0x00	; 0
    2efe:	86 2b       	or	r24, r22
    2f00:	97 2b       	or	r25, r23
    2f02:	a0 e0       	ldi	r26, 0x00	; 0
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	28 2b       	or	r18, r24
    2f08:	39 2b       	or	r19, r25
    2f0a:	4a 2b       	or	r20, r26
    2f0c:	5b 2b       	or	r21, r27
    2f0e:	d3 01       	movw	r26, r6
    2f10:	1e 96       	adiw	r26, 0x0e	; 14
    2f12:	2d 93       	st	X+, r18
    2f14:	3d 93       	st	X+, r19
    2f16:	4d 93       	st	X+, r20
    2f18:	5c 93       	st	X, r21
    2f1a:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2f1c:	d8 01       	movw	r26, r16
    2f1e:	5f 96       	adiw	r26, 0x1f	; 31
    2f20:	2c 91       	ld	r18, X
    2f22:	5f 97       	sbiw	r26, 0x1f	; 31
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	50 e0       	ldi	r21, 0x00	; 0
    2f2a:	52 2f       	mov	r21, r18
    2f2c:	44 27       	eor	r20, r20
    2f2e:	33 27       	eor	r19, r19
    2f30:	22 27       	eor	r18, r18
    2f32:	5e 96       	adiw	r26, 0x1e	; 30
    2f34:	8c 91       	ld	r24, X
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e0       	ldi	r26, 0x00	; 0
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	99 27       	eor	r25, r25
    2f40:	88 27       	eor	r24, r24
    2f42:	28 2b       	or	r18, r24
    2f44:	39 2b       	or	r19, r25
    2f46:	4a 2b       	or	r20, r26
    2f48:	5b 2b       	or	r21, r27
    2f4a:	d8 01       	movw	r26, r16
    2f4c:	5c 96       	adiw	r26, 0x1c	; 28
    2f4e:	8c 91       	ld	r24, X
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a0 e0       	ldi	r26, 0x00	; 0
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	28 2b       	or	r18, r24
    2f58:	39 2b       	or	r19, r25
    2f5a:	4a 2b       	or	r20, r26
    2f5c:	5b 2b       	or	r21, r27
    2f5e:	d8 01       	movw	r26, r16
    2f60:	5d 96       	adiw	r26, 0x1d	; 29
    2f62:	9c 91       	ld	r25, X
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	a0 e0       	ldi	r26, 0x00	; 0
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	28 2b       	or	r18, r24
    2f6c:	39 2b       	or	r19, r25
    2f6e:	4a 2b       	or	r20, r26
    2f70:	5b 2b       	or	r21, r27
    2f72:	d3 01       	movw	r26, r6
    2f74:	1a 96       	adiw	r26, 0x0a	; 10
    2f76:	2d 93       	st	X+, r18
    2f78:	3d 93       	st	X+, r19
    2f7a:	4d 93       	st	X+, r20
    2f7c:	5c 93       	st	X, r21
    2f7e:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2f80:	16 96       	adiw	r26, 0x06	; 6
    2f82:	1d 92       	st	X+, r1
    2f84:	1d 92       	st	X+, r1
    2f86:	1d 92       	st	X+, r1
    2f88:	1c 92       	st	X, r1
    2f8a:	19 97       	sbiw	r26, 0x09	; 9
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255
    2f8e:	15 96       	adiw	r26, 0x05	; 5
    2f90:	8c 93       	st	X, r24
    2f92:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2f94:	56 96       	adiw	r26, 0x16	; 22
    2f96:	1d 92       	st	X+, r1
    2f98:	1d 92       	st	X+, r1
    2f9a:	1d 92       	st	X+, r1
    2f9c:	1c 92       	st	X, r1
    2f9e:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2fa0:	ed 93       	st	X+, r30
    2fa2:	fc 93       	st	X, r31
    2fa4:	11 97       	sbiw	r26, 0x01	; 1
    2fa6:	86 81       	ldd	r24, Z+6	; 0x06
    2fa8:	97 81       	ldd	r25, Z+7	; 0x07
    2faa:	12 96       	adiw	r26, 0x02	; 2
    2fac:	8d 93       	st	X+, r24
    2fae:	9c 93       	st	X, r25
    2fb0:	13 97       	sbiw	r26, 0x03	; 3
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	03 c0       	rjmp	.+6      	; 0x2fbc <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    2fb6:	27 e0       	ldi	r18, 0x07	; 7
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <f_open+0x2b8>
    2fba:	24 e0       	ldi	r18, 0x04	; 4
}
    2fbc:	82 2f       	mov	r24, r18
    2fbe:	a4 96       	adiw	r28, 0x24	; 36
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	cf 90       	pop	r12
    2fd4:	bf 90       	pop	r11
    2fd6:	af 90       	pop	r10
    2fd8:	9f 90       	pop	r9
    2fda:	8f 90       	pop	r8
    2fdc:	7f 90       	pop	r7
    2fde:	6f 90       	pop	r6
    2fe0:	5f 90       	pop	r5
    2fe2:	08 95       	ret

00002fe4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2fe4:	2f 92       	push	r2
    2fe6:	3f 92       	push	r3
    2fe8:	4f 92       	push	r4
    2fea:	5f 92       	push	r5
    2fec:	6f 92       	push	r6
    2fee:	7f 92       	push	r7
    2ff0:	8f 92       	push	r8
    2ff2:	9f 92       	push	r9
    2ff4:	af 92       	push	r10
    2ff6:	bf 92       	push	r11
    2ff8:	cf 92       	push	r12
    2ffa:	df 92       	push	r13
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	00 d0       	rcall	.+0      	; 0x300a <f_read+0x26>
    300a:	0f 92       	push	r0
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	8b 83       	std	Y+3, r24	; 0x03
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	16 2f       	mov	r17, r22
    3016:	07 2f       	mov	r16, r23
    3018:	4a 01       	movw	r8, r20
    301a:	29 83       	std	Y+1, r18	; 0x01
    301c:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    301e:	d9 01       	movw	r26, r18
    3020:	1d 92       	st	X+, r1
    3022:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    3024:	fc 01       	movw	r30, r24
    3026:	62 81       	ldd	r22, Z+2	; 0x02
    3028:	73 81       	ldd	r23, Z+3	; 0x03
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <validate>
    3032:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3034:	88 23       	and	r24, r24
    3036:	09 f0       	breq	.+2      	; 0x303a <f_read+0x56>
    3038:	b4 c1       	rjmp	.+872    	; 0x33a2 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    303a:	ab 81       	ldd	r26, Y+3	; 0x03
    303c:	bc 81       	ldd	r27, Y+4	; 0x04
    303e:	14 96       	adiw	r26, 0x04	; 4
    3040:	8c 91       	ld	r24, X
    3042:	87 fd       	sbrc	r24, 7
    3044:	66 c0       	rjmp	.+204    	; 0x3112 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    3046:	80 fd       	sbrc	r24, 0
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <f_read+0x6c>
    304a:	a7 e0       	ldi	r26, 0x07	; 7
    304c:	7a 2e       	mov	r7, r26
    304e:	a9 c1       	rjmp	.+850    	; 0x33a2 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    3050:	eb 81       	ldd	r30, Y+3	; 0x03
    3052:	fc 81       	ldd	r31, Y+4	; 0x04
    3054:	22 85       	ldd	r18, Z+10	; 0x0a
    3056:	33 85       	ldd	r19, Z+11	; 0x0b
    3058:	44 85       	ldd	r20, Z+12	; 0x0c
    305a:	55 85       	ldd	r21, Z+13	; 0x0d
    305c:	86 81       	ldd	r24, Z+6	; 0x06
    305e:	97 81       	ldd	r25, Z+7	; 0x07
    3060:	a0 85       	ldd	r26, Z+8	; 0x08
    3062:	b1 85       	ldd	r27, Z+9	; 0x09
    3064:	28 1b       	sub	r18, r24
    3066:	39 0b       	sbc	r19, r25
    3068:	4a 0b       	sbc	r20, r26
    306a:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    306c:	c4 01       	movw	r24, r8
    306e:	a0 e0       	ldi	r26, 0x00	; 0
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	28 17       	cp	r18, r24
    3074:	39 07       	cpc	r19, r25
    3076:	4a 07       	cpc	r20, r26
    3078:	5b 07       	cpc	r21, r27
    307a:	08 f4       	brcc	.+2      	; 0x307e <f_read+0x9a>
    307c:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    307e:	81 2f       	mov	r24, r17
    3080:	90 2f       	mov	r25, r16
    3082:	9c 01       	movw	r18, r24
    3084:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3086:	f0 e2       	ldi	r31, 0x20	; 32
    3088:	2f 2e       	mov	r2, r31
    308a:	31 2c       	mov	r3, r1
    308c:	6b 81       	ldd	r22, Y+3	; 0x03
    308e:	7c 81       	ldd	r23, Y+4	; 0x04
    3090:	26 0e       	add	r2, r22
    3092:	37 1e       	adc	r3, r23
    3094:	82 c1       	rjmp	.+772    	; 0x339a <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3096:	ab 81       	ldd	r26, Y+3	; 0x03
    3098:	bc 81       	ldd	r27, Y+4	; 0x04
    309a:	16 96       	adiw	r26, 0x06	; 6
    309c:	2d 91       	ld	r18, X+
    309e:	3d 91       	ld	r19, X+
    30a0:	4d 91       	ld	r20, X+
    30a2:	5c 91       	ld	r21, X
    30a4:	19 97       	sbiw	r26, 0x09	; 9
    30a6:	da 01       	movw	r26, r20
    30a8:	c9 01       	movw	r24, r18
    30aa:	91 70       	andi	r25, 0x01	; 1
    30ac:	a0 70       	andi	r26, 0x00	; 0
    30ae:	b0 70       	andi	r27, 0x00	; 0
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	a1 05       	cpc	r26, r1
    30b4:	b1 05       	cpc	r27, r1
    30b6:	09 f0       	breq	.+2      	; 0x30ba <f_read+0xd6>
    30b8:	2c c1       	rjmp	.+600    	; 0x3312 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    30ba:	ab 81       	ldd	r26, Y+3	; 0x03
    30bc:	bc 81       	ldd	r27, Y+4	; 0x04
    30be:	ed 91       	ld	r30, X+
    30c0:	fc 91       	ld	r31, X
    30c2:	11 97       	sbiw	r26, 0x01	; 1
    30c4:	15 96       	adiw	r26, 0x05	; 5
    30c6:	9c 91       	ld	r25, X
    30c8:	15 97       	sbiw	r26, 0x05	; 5
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	98 17       	cp	r25, r24
    30ce:	a0 f1       	brcs	.+104    	; 0x3138 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    30d0:	21 15       	cp	r18, r1
    30d2:	31 05       	cpc	r19, r1
    30d4:	41 05       	cpc	r20, r1
    30d6:	51 05       	cpc	r21, r1
    30d8:	39 f4       	brne	.+14     	; 0x30e8 <f_read+0x104>
    30da:	1e 96       	adiw	r26, 0x0e	; 14
    30dc:	6d 91       	ld	r22, X+
    30de:	7d 91       	ld	r23, X+
    30e0:	8d 91       	ld	r24, X+
    30e2:	9c 91       	ld	r25, X
    30e4:	51 97       	sbiw	r26, 0x11	; 17
    30e6:	0b c0       	rjmp	.+22     	; 0x30fe <f_read+0x11a>
    30e8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ea:	bc 81       	ldd	r27, Y+4	; 0x04
    30ec:	52 96       	adiw	r26, 0x12	; 18
    30ee:	4d 91       	ld	r20, X+
    30f0:	5d 91       	ld	r21, X+
    30f2:	6d 91       	ld	r22, X+
    30f4:	7c 91       	ld	r23, X
    30f6:	55 97       	sbiw	r26, 0x15	; 21
    30f8:	cf 01       	movw	r24, r30
    30fa:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    30fe:	62 30       	cpi	r22, 0x02	; 2
    3100:	71 05       	cpc	r23, r1
    3102:	81 05       	cpc	r24, r1
    3104:	91 05       	cpc	r25, r1
    3106:	40 f4       	brcc	.+16     	; 0x3118 <f_read+0x134>
    3108:	eb 81       	ldd	r30, Y+3	; 0x03
    310a:	fc 81       	ldd	r31, Y+4	; 0x04
    310c:	84 81       	ldd	r24, Z+4	; 0x04
    310e:	80 68       	ori	r24, 0x80	; 128
    3110:	84 83       	std	Z+4, r24	; 0x04
    3112:	e2 e0       	ldi	r30, 0x02	; 2
    3114:	7e 2e       	mov	r7, r30
    3116:	45 c1       	rjmp	.+650    	; 0x33a2 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3118:	6f 3f       	cpi	r22, 0xFF	; 255
    311a:	ff ef       	ldi	r31, 0xFF	; 255
    311c:	7f 07       	cpc	r23, r31
    311e:	ff ef       	ldi	r31, 0xFF	; 255
    3120:	8f 07       	cpc	r24, r31
    3122:	ff ef       	ldi	r31, 0xFF	; 255
    3124:	9f 07       	cpc	r25, r31
    3126:	09 f4       	brne	.+2      	; 0x312a <f_read+0x146>
    3128:	e0 c0       	rjmp	.+448    	; 0x32ea <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    312a:	eb 81       	ldd	r30, Y+3	; 0x03
    312c:	fc 81       	ldd	r31, Y+4	; 0x04
    312e:	62 8b       	std	Z+18, r22	; 0x12
    3130:	73 8b       	std	Z+19, r23	; 0x13
    3132:	84 8b       	std	Z+20, r24	; 0x14
    3134:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    3136:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3138:	ab 81       	ldd	r26, Y+3	; 0x03
    313a:	bc 81       	ldd	r27, Y+4	; 0x04
    313c:	0d 91       	ld	r16, X+
    313e:	1c 91       	ld	r17, X
    3140:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3142:	52 96       	adiw	r26, 0x12	; 18
    3144:	2d 91       	ld	r18, X+
    3146:	3d 91       	ld	r19, X+
    3148:	4d 91       	ld	r20, X+
    314a:	5c 91       	ld	r21, X
    314c:	55 97       	sbiw	r26, 0x15	; 21
    314e:	22 50       	subi	r18, 0x02	; 2
    3150:	30 40       	sbci	r19, 0x00	; 0
    3152:	40 40       	sbci	r20, 0x00	; 0
    3154:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3156:	f8 01       	movw	r30, r16
    3158:	82 8d       	ldd	r24, Z+26	; 0x1a
    315a:	93 8d       	ldd	r25, Z+27	; 0x1b
    315c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    315e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3160:	02 97       	sbiw	r24, 0x02	; 2
    3162:	a1 09       	sbc	r26, r1
    3164:	b1 09       	sbc	r27, r1
    3166:	28 17       	cp	r18, r24
    3168:	39 07       	cpc	r19, r25
    316a:	4a 07       	cpc	r20, r26
    316c:	5b 07       	cpc	r21, r27
    316e:	b8 f4       	brcc	.+46     	; 0x319e <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    3170:	62 80       	ldd	r6, Z+2	; 0x02
    3172:	66 2d       	mov	r22, r6
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    317e:	9b 01       	movw	r18, r22
    3180:	ac 01       	movw	r20, r24
    3182:	f8 01       	movw	r30, r16
    3184:	86 a1       	ldd	r24, Z+38	; 0x26
    3186:	97 a1       	ldd	r25, Z+39	; 0x27
    3188:	a0 a5       	ldd	r26, Z+40	; 0x28
    318a:	b1 a5       	ldd	r27, Z+41	; 0x29
    318c:	28 0f       	add	r18, r24
    318e:	39 1f       	adc	r19, r25
    3190:	4a 1f       	adc	r20, r26
    3192:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3194:	21 15       	cp	r18, r1
    3196:	31 05       	cpc	r19, r1
    3198:	41 05       	cpc	r20, r1
    319a:	51 05       	cpc	r21, r1
    319c:	49 f4       	brne	.+18     	; 0x31b0 <f_read+0x1cc>
    319e:	ab 81       	ldd	r26, Y+3	; 0x03
    31a0:	bc 81       	ldd	r27, Y+4	; 0x04
    31a2:	14 96       	adiw	r26, 0x04	; 4
    31a4:	8c 91       	ld	r24, X
    31a6:	14 97       	sbiw	r26, 0x04	; 4
    31a8:	80 68       	ori	r24, 0x80	; 128
    31aa:	14 96       	adiw	r26, 0x04	; 4
    31ac:	8c 93       	st	X, r24
    31ae:	b1 cf       	rjmp	.-158    	; 0x3112 <f_read+0x12e>
			sect += fp->csect;
    31b0:	eb 81       	ldd	r30, Y+3	; 0x03
    31b2:	fc 81       	ldd	r31, Y+4	; 0x04
    31b4:	85 81       	ldd	r24, Z+5	; 0x05
    31b6:	59 01       	movw	r10, r18
    31b8:	6a 01       	movw	r12, r20
    31ba:	a8 0e       	add	r10, r24
    31bc:	b1 1c       	adc	r11, r1
    31be:	c1 1c       	adc	r12, r1
    31c0:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    31c2:	74 01       	movw	r14, r8
    31c4:	ef 2c       	mov	r14, r15
    31c6:	ff 24       	eor	r15, r15
    31c8:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    31ca:	e1 14       	cp	r14, r1
    31cc:	f1 04       	cpc	r15, r1
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <f_read+0x1ee>
    31d0:	53 c0       	rjmp	.+166    	; 0x3278 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c7 01       	movw	r24, r14
    31d8:	82 0f       	add	r24, r18
    31da:	93 1f       	adc	r25, r19
    31dc:	66 2d       	mov	r22, r6
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	68 17       	cp	r22, r24
    31e2:	79 07       	cpc	r23, r25
    31e4:	18 f4       	brcc	.+6      	; 0x31ec <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    31e6:	7b 01       	movw	r14, r22
    31e8:	e2 1a       	sub	r14, r18
    31ea:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    31ec:	d8 01       	movw	r26, r16
    31ee:	11 96       	adiw	r26, 0x01	; 1
    31f0:	8c 91       	ld	r24, X
    31f2:	b2 01       	movw	r22, r4
    31f4:	a6 01       	movw	r20, r12
    31f6:	95 01       	movw	r18, r10
    31f8:	0e 2d       	mov	r16, r14
    31fa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    31fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3200:	fc 81       	ldd	r31, Y+4	; 0x04
    3202:	94 81       	ldd	r25, Z+4	; 0x04
    3204:	88 23       	and	r24, r24
    3206:	19 f0       	breq	.+6      	; 0x320e <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    3208:	90 68       	ori	r25, 0x80	; 128
    320a:	94 83       	std	Z+4, r25	; 0x04
    320c:	76 c0       	rjmp	.+236    	; 0x32fa <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    320e:	96 ff       	sbrs	r25, 6
    3210:	29 c0       	rjmp	.+82     	; 0x3264 <f_read+0x280>
    3212:	ab 81       	ldd	r26, Y+3	; 0x03
    3214:	bc 81       	ldd	r27, Y+4	; 0x04
    3216:	56 96       	adiw	r26, 0x16	; 22
    3218:	2d 91       	ld	r18, X+
    321a:	3d 91       	ld	r19, X+
    321c:	4d 91       	ld	r20, X+
    321e:	5c 91       	ld	r21, X
    3220:	59 97       	sbiw	r26, 0x19	; 25
    3222:	2a 19       	sub	r18, r10
    3224:	3b 09       	sbc	r19, r11
    3226:	4c 09       	sbc	r20, r12
    3228:	5d 09       	sbc	r21, r13
    322a:	c7 01       	movw	r24, r14
    322c:	a0 e0       	ldi	r26, 0x00	; 0
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	28 17       	cp	r18, r24
    3232:	39 07       	cpc	r19, r25
    3234:	4a 07       	cpc	r20, r26
    3236:	5b 07       	cpc	r21, r27
    3238:	a8 f4       	brcc	.+42     	; 0x3264 <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    323a:	69 e0       	ldi	r22, 0x09	; 9
    323c:	22 0f       	add	r18, r18
    323e:	33 1f       	adc	r19, r19
    3240:	44 1f       	adc	r20, r20
    3242:	55 1f       	adc	r21, r21
    3244:	6a 95       	dec	r22
    3246:	d1 f7       	brne	.-12     	; 0x323c <f_read+0x258>
    3248:	c2 01       	movw	r24, r4
    324a:	82 0f       	add	r24, r18
    324c:	93 1f       	adc	r25, r19
    324e:	d1 01       	movw	r26, r2
    3250:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3252:	9c 01       	movw	r18, r24
    3254:	20 50       	subi	r18, 0x00	; 0
    3256:	3e 4f       	sbci	r19, 0xFE	; 254
    3258:	02 c0       	rjmp	.+4      	; 0x325e <f_read+0x27a>
    325a:	8d 91       	ld	r24, X+
    325c:	81 93       	st	Z+, r24
    325e:	e2 17       	cp	r30, r18
    3260:	f3 07       	cpc	r31, r19
    3262:	d9 f7       	brne	.-10     	; 0x325a <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3264:	eb 81       	ldd	r30, Y+3	; 0x03
    3266:	fc 81       	ldd	r31, Y+4	; 0x04
    3268:	85 81       	ldd	r24, Z+5	; 0x05
    326a:	8e 0d       	add	r24, r14
    326c:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    326e:	b7 01       	movw	r22, r14
    3270:	76 2f       	mov	r23, r22
    3272:	66 27       	eor	r22, r22
    3274:	77 0f       	add	r23, r23
    3276:	74 c0       	rjmp	.+232    	; 0x3360 <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    3278:	ab 81       	ldd	r26, Y+3	; 0x03
    327a:	bc 81       	ldd	r27, Y+4	; 0x04
    327c:	14 96       	adiw	r26, 0x04	; 4
    327e:	8c 91       	ld	r24, X
    3280:	14 97       	sbiw	r26, 0x04	; 4
    3282:	86 ff       	sbrs	r24, 6
    3284:	1b c0       	rjmp	.+54     	; 0x32bc <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3286:	56 96       	adiw	r26, 0x16	; 22
    3288:	2d 91       	ld	r18, X+
    328a:	3d 91       	ld	r19, X+
    328c:	4d 91       	ld	r20, X+
    328e:	5c 91       	ld	r21, X
    3290:	59 97       	sbiw	r26, 0x19	; 25
    3292:	f8 01       	movw	r30, r16
    3294:	81 81       	ldd	r24, Z+1	; 0x01
    3296:	b1 01       	movw	r22, r2
    3298:	01 e0       	ldi	r16, 0x01	; 1
    329a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    329e:	ab 81       	ldd	r26, Y+3	; 0x03
    32a0:	bc 81       	ldd	r27, Y+4	; 0x04
    32a2:	14 96       	adiw	r26, 0x04	; 4
    32a4:	9c 91       	ld	r25, X
    32a6:	14 97       	sbiw	r26, 0x04	; 4
    32a8:	88 23       	and	r24, r24
    32aa:	21 f0       	breq	.+8      	; 0x32b4 <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    32ac:	90 68       	ori	r25, 0x80	; 128
    32ae:	14 96       	adiw	r26, 0x04	; 4
    32b0:	9c 93       	st	X, r25
    32b2:	23 c0       	rjmp	.+70     	; 0x32fa <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    32b4:	9f 7b       	andi	r25, 0xBF	; 191
    32b6:	eb 81       	ldd	r30, Y+3	; 0x03
    32b8:	fc 81       	ldd	r31, Y+4	; 0x04
    32ba:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    32bc:	eb 81       	ldd	r30, Y+3	; 0x03
    32be:	fc 81       	ldd	r31, Y+4	; 0x04
    32c0:	86 89       	ldd	r24, Z+22	; 0x16
    32c2:	97 89       	ldd	r25, Z+23	; 0x17
    32c4:	a0 8d       	ldd	r26, Z+24	; 0x18
    32c6:	b1 8d       	ldd	r27, Z+25	; 0x19
    32c8:	8a 15       	cp	r24, r10
    32ca:	9b 05       	cpc	r25, r11
    32cc:	ac 05       	cpc	r26, r12
    32ce:	bd 05       	cpc	r27, r13
    32d0:	b9 f0       	breq	.+46     	; 0x3300 <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    32d2:	01 90       	ld	r0, Z+
    32d4:	f0 81       	ld	r31, Z
    32d6:	e0 2d       	mov	r30, r0
    32d8:	81 81       	ldd	r24, Z+1	; 0x01
    32da:	b1 01       	movw	r22, r2
    32dc:	a6 01       	movw	r20, r12
    32de:	95 01       	movw	r18, r10
    32e0:	01 e0       	ldi	r16, 0x01	; 1
    32e2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    32e6:	88 23       	and	r24, r24
    32e8:	59 f0       	breq	.+22     	; 0x3300 <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    32ea:	ab 81       	ldd	r26, Y+3	; 0x03
    32ec:	bc 81       	ldd	r27, Y+4	; 0x04
    32ee:	14 96       	adiw	r26, 0x04	; 4
    32f0:	8c 91       	ld	r24, X
    32f2:	14 97       	sbiw	r26, 0x04	; 4
    32f4:	80 68       	ori	r24, 0x80	; 128
    32f6:	14 96       	adiw	r26, 0x04	; 4
    32f8:	8c 93       	st	X, r24
    32fa:	77 24       	eor	r7, r7
    32fc:	73 94       	inc	r7
    32fe:	51 c0       	rjmp	.+162    	; 0x33a2 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    3300:	eb 81       	ldd	r30, Y+3	; 0x03
    3302:	fc 81       	ldd	r31, Y+4	; 0x04
    3304:	a6 8a       	std	Z+22, r10	; 0x16
    3306:	b7 8a       	std	Z+23, r11	; 0x17
    3308:	c0 8e       	std	Z+24, r12	; 0x18
    330a:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    330c:	85 81       	ldd	r24, Z+5	; 0x05
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3312:	ab 81       	ldd	r26, Y+3	; 0x03
    3314:	bc 81       	ldd	r27, Y+4	; 0x04
    3316:	16 96       	adiw	r26, 0x06	; 6
    3318:	2d 91       	ld	r18, X+
    331a:	3d 91       	ld	r19, X+
    331c:	4d 91       	ld	r20, X+
    331e:	5c 91       	ld	r21, X
    3320:	19 97       	sbiw	r26, 0x09	; 9
    3322:	c9 01       	movw	r24, r18
    3324:	91 70       	andi	r25, 0x01	; 1
    3326:	e0 e0       	ldi	r30, 0x00	; 0
    3328:	f2 e0       	ldi	r31, 0x02	; 2
    332a:	e8 1b       	sub	r30, r24
    332c:	f9 0b       	sbc	r31, r25
    332e:	b4 01       	movw	r22, r8
    3330:	e8 15       	cp	r30, r8
    3332:	f9 05       	cpc	r31, r9
    3334:	08 f4       	brcc	.+2      	; 0x3338 <f_read+0x354>
    3336:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    3338:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    333a:	f9 01       	movw	r30, r18
    333c:	f1 70       	andi	r31, 0x01	; 1
    333e:	b0 96       	adiw	r30, 0x20	; 32
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	9c 81       	ldd	r25, Y+4	; 0x04
    3344:	e8 0f       	add	r30, r24
    3346:	f9 1f       	adc	r31, r25
    3348:	92 01       	movw	r18, r4
    334a:	04 c0       	rjmp	.+8      	; 0x3354 <f_read+0x370>
	while (cnt--) *d++ = *s++;
    334c:	81 91       	ld	r24, Z+
    334e:	d9 01       	movw	r26, r18
    3350:	8d 93       	st	X+, r24
    3352:	9d 01       	movw	r18, r26
    3354:	01 50       	subi	r16, 0x01	; 1
    3356:	10 40       	sbci	r17, 0x00	; 0
    3358:	bf ef       	ldi	r27, 0xFF	; 255
    335a:	0f 3f       	cpi	r16, 0xFF	; 255
    335c:	1b 07       	cpc	r17, r27
    335e:	b1 f7       	brne	.-20     	; 0x334c <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3360:	46 0e       	add	r4, r22
    3362:	57 1e       	adc	r5, r23
    3364:	cb 01       	movw	r24, r22
    3366:	a0 e0       	ldi	r26, 0x00	; 0
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	eb 81       	ldd	r30, Y+3	; 0x03
    336c:	fc 81       	ldd	r31, Y+4	; 0x04
    336e:	26 81       	ldd	r18, Z+6	; 0x06
    3370:	37 81       	ldd	r19, Z+7	; 0x07
    3372:	40 85       	ldd	r20, Z+8	; 0x08
    3374:	51 85       	ldd	r21, Z+9	; 0x09
    3376:	28 0f       	add	r18, r24
    3378:	39 1f       	adc	r19, r25
    337a:	4a 1f       	adc	r20, r26
    337c:	5b 1f       	adc	r21, r27
    337e:	26 83       	std	Z+6, r18	; 0x06
    3380:	37 83       	std	Z+7, r19	; 0x07
    3382:	40 87       	std	Z+8, r20	; 0x08
    3384:	51 87       	std	Z+9, r21	; 0x09
    3386:	e9 81       	ldd	r30, Y+1	; 0x01
    3388:	fa 81       	ldd	r31, Y+2	; 0x02
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	86 0f       	add	r24, r22
    3390:	97 1f       	adc	r25, r23
    3392:	80 83       	st	Z, r24
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	86 1a       	sub	r8, r22
    3398:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    339a:	81 14       	cp	r8, r1
    339c:	91 04       	cpc	r9, r1
    339e:	09 f0       	breq	.+2      	; 0x33a2 <f_read+0x3be>
    33a0:	7a ce       	rjmp	.-780    	; 0x3096 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    33a2:	87 2d       	mov	r24, r7
    33a4:	24 96       	adiw	r28, 0x04	; 4
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	bf 90       	pop	r11
    33bc:	af 90       	pop	r10
    33be:	9f 90       	pop	r9
    33c0:	8f 90       	pop	r8
    33c2:	7f 90       	pop	r7
    33c4:	6f 90       	pop	r6
    33c6:	5f 90       	pop	r5
    33c8:	4f 90       	pop	r4
    33ca:	3f 90       	pop	r3
    33cc:	2f 90       	pop	r2
    33ce:	08 95       	ret

000033d0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    33d0:	2f 92       	push	r2
    33d2:	3f 92       	push	r3
    33d4:	4f 92       	push	r4
    33d6:	5f 92       	push	r5
    33d8:	6f 92       	push	r6
    33da:	7f 92       	push	r7
    33dc:	8f 92       	push	r8
    33de:	9f 92       	push	r9
    33e0:	af 92       	push	r10
    33e2:	bf 92       	push	r11
    33e4:	cf 92       	push	r12
    33e6:	df 92       	push	r13
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <f_write+0x26>
    33f6:	0f 92       	push	r0
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	8b 83       	std	Y+3, r24	; 0x03
    33fe:	9c 83       	std	Y+4, r25	; 0x04
    3400:	16 2f       	mov	r17, r22
    3402:	07 2f       	mov	r16, r23
    3404:	4a 01       	movw	r8, r20
    3406:	29 83       	std	Y+1, r18	; 0x01
    3408:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    340a:	d9 01       	movw	r26, r18
    340c:	1d 92       	st	X+, r1
    340e:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    3410:	fc 01       	movw	r30, r24
    3412:	62 81       	ldd	r22, Z+2	; 0x02
    3414:	73 81       	ldd	r23, Z+3	; 0x03
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <validate>
    341e:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3420:	88 23       	and	r24, r24
    3422:	09 f0       	breq	.+2      	; 0x3426 <f_write+0x56>
    3424:	02 c2       	rjmp	.+1028   	; 0x382a <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3426:	ab 81       	ldd	r26, Y+3	; 0x03
    3428:	bc 81       	ldd	r27, Y+4	; 0x04
    342a:	14 96       	adiw	r26, 0x04	; 4
    342c:	8c 91       	ld	r24, X
    342e:	87 fd       	sbrc	r24, 7
    3430:	7c c0       	rjmp	.+248    	; 0x352a <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    3432:	81 fd       	sbrc	r24, 1
    3434:	03 c0       	rjmp	.+6      	; 0x343c <f_write+0x6c>
    3436:	47 e0       	ldi	r20, 0x07	; 7
    3438:	64 2e       	mov	r6, r20
    343a:	f7 c1       	rjmp	.+1006   	; 0x382a <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    343c:	eb 81       	ldd	r30, Y+3	; 0x03
    343e:	fc 81       	ldd	r31, Y+4	; 0x04
    3440:	22 85       	ldd	r18, Z+10	; 0x0a
    3442:	33 85       	ldd	r19, Z+11	; 0x0b
    3444:	44 85       	ldd	r20, Z+12	; 0x0c
    3446:	55 85       	ldd	r21, Z+13	; 0x0d
    3448:	c4 01       	movw	r24, r8
    344a:	a0 e0       	ldi	r26, 0x00	; 0
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	a4 1f       	adc	r26, r20
    3454:	b5 1f       	adc	r27, r21
    3456:	82 17       	cp	r24, r18
    3458:	93 07       	cpc	r25, r19
    345a:	a4 07       	cpc	r26, r20
    345c:	b5 07       	cpc	r27, r21
    345e:	10 f4       	brcc	.+4      	; 0x3464 <f_write+0x94>
    3460:	88 24       	eor	r8, r8
    3462:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    3464:	81 2f       	mov	r24, r17
    3466:	90 2f       	mov	r25, r16
    3468:	9c 01       	movw	r18, r24
    346a:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    346c:	30 e2       	ldi	r19, 0x20	; 32
    346e:	23 2e       	mov	r2, r19
    3470:	31 2c       	mov	r3, r1
    3472:	6b 81       	ldd	r22, Y+3	; 0x03
    3474:	7c 81       	ldd	r23, Y+4	; 0x04
    3476:	26 0e       	add	r2, r22
    3478:	37 1e       	adc	r3, r23
    347a:	b2 c1       	rjmp	.+868    	; 0x37e0 <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    347c:	ab 81       	ldd	r26, Y+3	; 0x03
    347e:	bc 81       	ldd	r27, Y+4	; 0x04
    3480:	16 96       	adiw	r26, 0x06	; 6
    3482:	2d 91       	ld	r18, X+
    3484:	3d 91       	ld	r19, X+
    3486:	4d 91       	ld	r20, X+
    3488:	5c 91       	ld	r21, X
    348a:	19 97       	sbiw	r26, 0x09	; 9
    348c:	da 01       	movw	r26, r20
    348e:	c9 01       	movw	r24, r18
    3490:	91 70       	andi	r25, 0x01	; 1
    3492:	a0 70       	andi	r26, 0x00	; 0
    3494:	b0 70       	andi	r27, 0x00	; 0
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	a1 05       	cpc	r26, r1
    349a:	b1 05       	cpc	r27, r1
    349c:	09 f0       	breq	.+2      	; 0x34a0 <f_write+0xd0>
    349e:	58 c1       	rjmp	.+688    	; 0x3750 <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    34a0:	ab 81       	ldd	r26, Y+3	; 0x03
    34a2:	bc 81       	ldd	r27, Y+4	; 0x04
    34a4:	ed 91       	ld	r30, X+
    34a6:	fc 91       	ld	r31, X
    34a8:	11 97       	sbiw	r26, 0x01	; 1
    34aa:	15 96       	adiw	r26, 0x05	; 5
    34ac:	9c 91       	ld	r25, X
    34ae:	15 97       	sbiw	r26, 0x05	; 5
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	98 17       	cp	r25, r24
    34b4:	08 f4       	brcc	.+2      	; 0x34b8 <f_write+0xe8>
    34b6:	54 c0       	rjmp	.+168    	; 0x3560 <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    34b8:	21 15       	cp	r18, r1
    34ba:	31 05       	cpc	r19, r1
    34bc:	41 05       	cpc	r20, r1
    34be:	51 05       	cpc	r21, r1
    34c0:	c9 f4       	brne	.+50     	; 0x34f4 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    34c2:	1e 96       	adiw	r26, 0x0e	; 14
    34c4:	6d 91       	ld	r22, X+
    34c6:	7d 91       	ld	r23, X+
    34c8:	8d 91       	ld	r24, X+
    34ca:	9c 91       	ld	r25, X
    34cc:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    34ce:	61 15       	cp	r22, r1
    34d0:	71 05       	cpc	r23, r1
    34d2:	81 05       	cpc	r24, r1
    34d4:	91 05       	cpc	r25, r1
    34d6:	f9 f4       	brne	.+62     	; 0x3516 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    34d8:	cf 01       	movw	r24, r30
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	0e 94 97 0c 	call	0x192e	; 0x192e <create_chain>
    34e6:	eb 81       	ldd	r30, Y+3	; 0x03
    34e8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ea:	66 87       	std	Z+14, r22	; 0x0e
    34ec:	77 87       	std	Z+15, r23	; 0x0f
    34ee:	80 8b       	std	Z+16, r24	; 0x10
    34f0:	91 8b       	std	Z+17, r25	; 0x11
    34f2:	0b c0       	rjmp	.+22     	; 0x350a <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    34f4:	ab 81       	ldd	r26, Y+3	; 0x03
    34f6:	bc 81       	ldd	r27, Y+4	; 0x04
    34f8:	52 96       	adiw	r26, 0x12	; 18
    34fa:	4d 91       	ld	r20, X+
    34fc:	5d 91       	ld	r21, X+
    34fe:	6d 91       	ld	r22, X+
    3500:	7c 91       	ld	r23, X
    3502:	55 97       	sbiw	r26, 0x15	; 21
    3504:	cf 01       	movw	r24, r30
    3506:	0e 94 97 0c 	call	0x192e	; 0x192e <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    350a:	61 15       	cp	r22, r1
    350c:	71 05       	cpc	r23, r1
    350e:	81 05       	cpc	r24, r1
    3510:	91 05       	cpc	r25, r1
    3512:	09 f4       	brne	.+2      	; 0x3516 <f_write+0x146>
    3514:	69 c1       	rjmp	.+722    	; 0x37e8 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3516:	61 30       	cpi	r22, 0x01	; 1
    3518:	71 05       	cpc	r23, r1
    351a:	81 05       	cpc	r24, r1
    351c:	91 05       	cpc	r25, r1
    351e:	41 f4       	brne	.+16     	; 0x3530 <f_write+0x160>
    3520:	eb 81       	ldd	r30, Y+3	; 0x03
    3522:	fc 81       	ldd	r31, Y+4	; 0x04
    3524:	84 81       	ldd	r24, Z+4	; 0x04
    3526:	80 68       	ori	r24, 0x80	; 128
    3528:	84 83       	std	Z+4, r24	; 0x04
    352a:	22 e0       	ldi	r18, 0x02	; 2
    352c:	62 2e       	mov	r6, r18
    352e:	7d c1       	rjmp	.+762    	; 0x382a <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3530:	6f 3f       	cpi	r22, 0xFF	; 255
    3532:	ff ef       	ldi	r31, 0xFF	; 255
    3534:	7f 07       	cpc	r23, r31
    3536:	ff ef       	ldi	r31, 0xFF	; 255
    3538:	8f 07       	cpc	r24, r31
    353a:	ff ef       	ldi	r31, 0xFF	; 255
    353c:	9f 07       	cpc	r25, r31
    353e:	49 f4       	brne	.+18     	; 0x3552 <f_write+0x182>
    3540:	ab 81       	ldd	r26, Y+3	; 0x03
    3542:	bc 81       	ldd	r27, Y+4	; 0x04
    3544:	14 96       	adiw	r26, 0x04	; 4
    3546:	8c 91       	ld	r24, X
    3548:	14 97       	sbiw	r26, 0x04	; 4
    354a:	80 68       	ori	r24, 0x80	; 128
    354c:	14 96       	adiw	r26, 0x04	; 4
    354e:	8c 93       	st	X, r24
    3550:	ee c0       	rjmp	.+476    	; 0x372e <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    3552:	eb 81       	ldd	r30, Y+3	; 0x03
    3554:	fc 81       	ldd	r31, Y+4	; 0x04
    3556:	62 8b       	std	Z+18, r22	; 0x12
    3558:	73 8b       	std	Z+19, r23	; 0x13
    355a:	84 8b       	std	Z+20, r24	; 0x14
    355c:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    355e:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    3560:	ab 81       	ldd	r26, Y+3	; 0x03
    3562:	bc 81       	ldd	r27, Y+4	; 0x04
    3564:	14 96       	adiw	r26, 0x04	; 4
    3566:	8c 91       	ld	r24, X
    3568:	14 97       	sbiw	r26, 0x04	; 4
    356a:	86 ff       	sbrs	r24, 6
    356c:	1b c0       	rjmp	.+54     	; 0x35a4 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    356e:	ed 91       	ld	r30, X+
    3570:	fc 91       	ld	r31, X
    3572:	11 97       	sbiw	r26, 0x01	; 1
    3574:	56 96       	adiw	r26, 0x16	; 22
    3576:	2d 91       	ld	r18, X+
    3578:	3d 91       	ld	r19, X+
    357a:	4d 91       	ld	r20, X+
    357c:	5c 91       	ld	r21, X
    357e:	59 97       	sbiw	r26, 0x19	; 25
    3580:	81 81       	ldd	r24, Z+1	; 0x01
    3582:	b1 01       	movw	r22, r2
    3584:	01 e0       	ldi	r16, 0x01	; 1
    3586:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    358a:	eb 81       	ldd	r30, Y+3	; 0x03
    358c:	fc 81       	ldd	r31, Y+4	; 0x04
    358e:	94 81       	ldd	r25, Z+4	; 0x04
    3590:	88 23       	and	r24, r24
    3592:	19 f0       	breq	.+6      	; 0x359a <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3594:	90 68       	ori	r25, 0x80	; 128
    3596:	94 83       	std	Z+4, r25	; 0x04
    3598:	ca c0       	rjmp	.+404    	; 0x372e <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    359a:	9f 7b       	andi	r25, 0xBF	; 191
    359c:	ab 81       	ldd	r26, Y+3	; 0x03
    359e:	bc 81       	ldd	r27, Y+4	; 0x04
    35a0:	14 96       	adiw	r26, 0x04	; 4
    35a2:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    35a4:	eb 81       	ldd	r30, Y+3	; 0x03
    35a6:	fc 81       	ldd	r31, Y+4	; 0x04
    35a8:	00 81       	ld	r16, Z
    35aa:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    35ac:	22 89       	ldd	r18, Z+18	; 0x12
    35ae:	33 89       	ldd	r19, Z+19	; 0x13
    35b0:	44 89       	ldd	r20, Z+20	; 0x14
    35b2:	55 89       	ldd	r21, Z+21	; 0x15
    35b4:	22 50       	subi	r18, 0x02	; 2
    35b6:	30 40       	sbci	r19, 0x00	; 0
    35b8:	40 40       	sbci	r20, 0x00	; 0
    35ba:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    35bc:	f8 01       	movw	r30, r16
    35be:	82 8d       	ldd	r24, Z+26	; 0x1a
    35c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    35c2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    35c4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    35c6:	02 97       	sbiw	r24, 0x02	; 2
    35c8:	a1 09       	sbc	r26, r1
    35ca:	b1 09       	sbc	r27, r1
    35cc:	28 17       	cp	r18, r24
    35ce:	39 07       	cpc	r19, r25
    35d0:	4a 07       	cpc	r20, r26
    35d2:	5b 07       	cpc	r21, r27
    35d4:	b8 f4       	brcc	.+46     	; 0x3604 <f_write+0x234>
	return clst * fs->csize + fs->database;
    35d6:	72 80       	ldd	r7, Z+2	; 0x02
    35d8:	67 2d       	mov	r22, r7
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    35e4:	9b 01       	movw	r18, r22
    35e6:	ac 01       	movw	r20, r24
    35e8:	f8 01       	movw	r30, r16
    35ea:	86 a1       	ldd	r24, Z+38	; 0x26
    35ec:	97 a1       	ldd	r25, Z+39	; 0x27
    35ee:	a0 a5       	ldd	r26, Z+40	; 0x28
    35f0:	b1 a5       	ldd	r27, Z+41	; 0x29
    35f2:	28 0f       	add	r18, r24
    35f4:	39 1f       	adc	r19, r25
    35f6:	4a 1f       	adc	r20, r26
    35f8:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    35fa:	21 15       	cp	r18, r1
    35fc:	31 05       	cpc	r19, r1
    35fe:	41 05       	cpc	r20, r1
    3600:	51 05       	cpc	r21, r1
    3602:	49 f4       	brne	.+18     	; 0x3616 <f_write+0x246>
    3604:	ab 81       	ldd	r26, Y+3	; 0x03
    3606:	bc 81       	ldd	r27, Y+4	; 0x04
    3608:	14 96       	adiw	r26, 0x04	; 4
    360a:	8c 91       	ld	r24, X
    360c:	14 97       	sbiw	r26, 0x04	; 4
    360e:	80 68       	ori	r24, 0x80	; 128
    3610:	14 96       	adiw	r26, 0x04	; 4
    3612:	8c 93       	st	X, r24
    3614:	8a cf       	rjmp	.-236    	; 0x352a <f_write+0x15a>
			sect += fp->csect;
    3616:	eb 81       	ldd	r30, Y+3	; 0x03
    3618:	fc 81       	ldd	r31, Y+4	; 0x04
    361a:	85 81       	ldd	r24, Z+5	; 0x05
    361c:	69 01       	movw	r12, r18
    361e:	7a 01       	movw	r14, r20
    3620:	c8 0e       	add	r12, r24
    3622:	d1 1c       	adc	r13, r1
    3624:	e1 1c       	adc	r14, r1
    3626:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3628:	54 01       	movw	r10, r8
    362a:	ab 2c       	mov	r10, r11
    362c:	bb 24       	eor	r11, r11
    362e:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    3630:	a1 14       	cp	r10, r1
    3632:	b1 04       	cpc	r11, r1
    3634:	09 f4       	brne	.+2      	; 0x3638 <f_write+0x268>
    3636:	53 c0       	rjmp	.+166    	; 0x36de <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	c5 01       	movw	r24, r10
    363e:	82 0f       	add	r24, r18
    3640:	93 1f       	adc	r25, r19
    3642:	67 2d       	mov	r22, r7
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	68 17       	cp	r22, r24
    3648:	79 07       	cpc	r23, r25
    364a:	18 f4       	brcc	.+6      	; 0x3652 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    364c:	5b 01       	movw	r10, r22
    364e:	a2 1a       	sub	r10, r18
    3650:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    3652:	d8 01       	movw	r26, r16
    3654:	11 96       	adiw	r26, 0x01	; 1
    3656:	8c 91       	ld	r24, X
    3658:	b2 01       	movw	r22, r4
    365a:	a7 01       	movw	r20, r14
    365c:	96 01       	movw	r18, r12
    365e:	0a 2d       	mov	r16, r10
    3660:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    3664:	88 23       	and	r24, r24
    3666:	09 f0       	breq	.+2      	; 0x366a <f_write+0x29a>
    3668:	5d c0       	rjmp	.+186    	; 0x3724 <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    366a:	ab 81       	ldd	r26, Y+3	; 0x03
    366c:	bc 81       	ldd	r27, Y+4	; 0x04
    366e:	56 96       	adiw	r26, 0x16	; 22
    3670:	2d 91       	ld	r18, X+
    3672:	3d 91       	ld	r19, X+
    3674:	4d 91       	ld	r20, X+
    3676:	5c 91       	ld	r21, X
    3678:	59 97       	sbiw	r26, 0x19	; 25
    367a:	2c 19       	sub	r18, r12
    367c:	3d 09       	sbc	r19, r13
    367e:	4e 09       	sbc	r20, r14
    3680:	5f 09       	sbc	r21, r15
    3682:	c5 01       	movw	r24, r10
    3684:	a0 e0       	ldi	r26, 0x00	; 0
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	28 17       	cp	r18, r24
    368a:	39 07       	cpc	r19, r25
    368c:	4a 07       	cpc	r20, r26
    368e:	5b 07       	cpc	r21, r27
    3690:	c8 f4       	brcc	.+50     	; 0x36c4 <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3692:	19 e0       	ldi	r17, 0x09	; 9
    3694:	22 0f       	add	r18, r18
    3696:	33 1f       	adc	r19, r19
    3698:	44 1f       	adc	r20, r20
    369a:	55 1f       	adc	r21, r21
    369c:	1a 95       	dec	r17
    369e:	d1 f7       	brne	.-12     	; 0x3694 <f_write+0x2c4>
    36a0:	f2 01       	movw	r30, r4
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    36a8:	9f 01       	movw	r18, r30
    36aa:	20 50       	subi	r18, 0x00	; 0
    36ac:	3e 4f       	sbci	r19, 0xFE	; 254
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <f_write+0x2e4>
    36b0:	81 91       	ld	r24, Z+
    36b2:	8d 93       	st	X+, r24
    36b4:	e2 17       	cp	r30, r18
    36b6:	f3 07       	cpc	r31, r19
    36b8:	d9 f7       	brne	.-10     	; 0x36b0 <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    36ba:	eb 81       	ldd	r30, Y+3	; 0x03
    36bc:	fc 81       	ldd	r31, Y+4	; 0x04
    36be:	84 81       	ldd	r24, Z+4	; 0x04
    36c0:	8f 7b       	andi	r24, 0xBF	; 191
    36c2:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    36c4:	ab 81       	ldd	r26, Y+3	; 0x03
    36c6:	bc 81       	ldd	r27, Y+4	; 0x04
    36c8:	15 96       	adiw	r26, 0x05	; 5
    36ca:	8c 91       	ld	r24, X
    36cc:	15 97       	sbiw	r26, 0x05	; 5
    36ce:	8a 0d       	add	r24, r10
    36d0:	15 96       	adiw	r26, 0x05	; 5
    36d2:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    36d4:	b5 01       	movw	r22, r10
    36d6:	76 2f       	mov	r23, r22
    36d8:	66 27       	eor	r22, r22
    36da:	77 0f       	add	r23, r23
    36dc:	64 c0       	rjmp	.+200    	; 0x37a6 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    36de:	eb 81       	ldd	r30, Y+3	; 0x03
    36e0:	fc 81       	ldd	r31, Y+4	; 0x04
    36e2:	86 89       	ldd	r24, Z+22	; 0x16
    36e4:	97 89       	ldd	r25, Z+23	; 0x17
    36e6:	a0 8d       	ldd	r26, Z+24	; 0x18
    36e8:	b1 8d       	ldd	r27, Z+25	; 0x19
    36ea:	8c 15       	cp	r24, r12
    36ec:	9d 05       	cpc	r25, r13
    36ee:	ae 05       	cpc	r26, r14
    36f0:	bf 05       	cpc	r27, r15
    36f2:	01 f1       	breq	.+64     	; 0x3734 <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    36f4:	26 81       	ldd	r18, Z+6	; 0x06
    36f6:	37 81       	ldd	r19, Z+7	; 0x07
    36f8:	40 85       	ldd	r20, Z+8	; 0x08
    36fa:	51 85       	ldd	r21, Z+9	; 0x09
    36fc:	82 85       	ldd	r24, Z+10	; 0x0a
    36fe:	93 85       	ldd	r25, Z+11	; 0x0b
    3700:	a4 85       	ldd	r26, Z+12	; 0x0c
    3702:	b5 85       	ldd	r27, Z+13	; 0x0d
    3704:	28 17       	cp	r18, r24
    3706:	39 07       	cpc	r19, r25
    3708:	4a 07       	cpc	r20, r26
    370a:	5b 07       	cpc	r21, r27
    370c:	98 f4       	brcc	.+38     	; 0x3734 <f_write+0x364>
    370e:	d8 01       	movw	r26, r16
    3710:	11 96       	adiw	r26, 0x01	; 1
    3712:	8c 91       	ld	r24, X
    3714:	b1 01       	movw	r22, r2
    3716:	a7 01       	movw	r20, r14
    3718:	96 01       	movw	r18, r12
    371a:	01 e0       	ldi	r16, 0x01	; 1
    371c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    3720:	88 23       	and	r24, r24
    3722:	41 f0       	breq	.+16     	; 0x3734 <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    3724:	eb 81       	ldd	r30, Y+3	; 0x03
    3726:	fc 81       	ldd	r31, Y+4	; 0x04
    3728:	84 81       	ldd	r24, Z+4	; 0x04
    372a:	80 68       	ori	r24, 0x80	; 128
    372c:	84 83       	std	Z+4, r24	; 0x04
    372e:	66 24       	eor	r6, r6
    3730:	63 94       	inc	r6
    3732:	7b c0       	rjmp	.+246    	; 0x382a <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    3734:	ab 81       	ldd	r26, Y+3	; 0x03
    3736:	bc 81       	ldd	r27, Y+4	; 0x04
    3738:	56 96       	adiw	r26, 0x16	; 22
    373a:	cd 92       	st	X+, r12
    373c:	dd 92       	st	X+, r13
    373e:	ed 92       	st	X+, r14
    3740:	fc 92       	st	X, r15
    3742:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    3744:	15 96       	adiw	r26, 0x05	; 5
    3746:	8c 91       	ld	r24, X
    3748:	15 97       	sbiw	r26, 0x05	; 5
    374a:	8f 5f       	subi	r24, 0xFF	; 255
    374c:	15 96       	adiw	r26, 0x05	; 5
    374e:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    3750:	eb 81       	ldd	r30, Y+3	; 0x03
    3752:	fc 81       	ldd	r31, Y+4	; 0x04
    3754:	26 81       	ldd	r18, Z+6	; 0x06
    3756:	37 81       	ldd	r19, Z+7	; 0x07
    3758:	40 85       	ldd	r20, Z+8	; 0x08
    375a:	51 85       	ldd	r21, Z+9	; 0x09
    375c:	c9 01       	movw	r24, r18
    375e:	91 70       	andi	r25, 0x01	; 1
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	72 e0       	ldi	r23, 0x02	; 2
    3764:	68 1b       	sub	r22, r24
    3766:	79 0b       	sbc	r23, r25
    3768:	cb 01       	movw	r24, r22
    376a:	b4 01       	movw	r22, r8
    376c:	88 15       	cp	r24, r8
    376e:	99 05       	cpc	r25, r9
    3770:	08 f4       	brcc	.+2      	; 0x3774 <f_write+0x3a4>
    3772:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3774:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3776:	f9 01       	movw	r30, r18
    3778:	f1 70       	andi	r31, 0x01	; 1
    377a:	b0 96       	adiw	r30, 0x20	; 32
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	e8 0f       	add	r30, r24
    3782:	f9 1f       	adc	r31, r25
    3784:	92 01       	movw	r18, r4
    3786:	04 c0       	rjmp	.+8      	; 0x3790 <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3788:	d9 01       	movw	r26, r18
    378a:	8d 91       	ld	r24, X+
    378c:	9d 01       	movw	r18, r26
    378e:	81 93       	st	Z+, r24
    3790:	01 50       	subi	r16, 0x01	; 1
    3792:	10 40       	sbci	r17, 0x00	; 0
    3794:	bf ef       	ldi	r27, 0xFF	; 255
    3796:	0f 3f       	cpi	r16, 0xFF	; 255
    3798:	1b 07       	cpc	r17, r27
    379a:	b1 f7       	brne	.-20     	; 0x3788 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    379c:	eb 81       	ldd	r30, Y+3	; 0x03
    379e:	fc 81       	ldd	r31, Y+4	; 0x04
    37a0:	84 81       	ldd	r24, Z+4	; 0x04
    37a2:	80 64       	ori	r24, 0x40	; 64
    37a4:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    37a6:	46 0e       	add	r4, r22
    37a8:	57 1e       	adc	r5, r23
    37aa:	cb 01       	movw	r24, r22
    37ac:	a0 e0       	ldi	r26, 0x00	; 0
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	eb 81       	ldd	r30, Y+3	; 0x03
    37b2:	fc 81       	ldd	r31, Y+4	; 0x04
    37b4:	26 81       	ldd	r18, Z+6	; 0x06
    37b6:	37 81       	ldd	r19, Z+7	; 0x07
    37b8:	40 85       	ldd	r20, Z+8	; 0x08
    37ba:	51 85       	ldd	r21, Z+9	; 0x09
    37bc:	28 0f       	add	r18, r24
    37be:	39 1f       	adc	r19, r25
    37c0:	4a 1f       	adc	r20, r26
    37c2:	5b 1f       	adc	r21, r27
    37c4:	26 83       	std	Z+6, r18	; 0x06
    37c6:	37 83       	std	Z+7, r19	; 0x07
    37c8:	40 87       	std	Z+8, r20	; 0x08
    37ca:	51 87       	std	Z+9, r21	; 0x09
    37cc:	e9 81       	ldd	r30, Y+1	; 0x01
    37ce:	fa 81       	ldd	r31, Y+2	; 0x02
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	86 0f       	add	r24, r22
    37d6:	97 1f       	adc	r25, r23
    37d8:	80 83       	st	Z, r24
    37da:	91 83       	std	Z+1, r25	; 0x01
    37dc:	86 1a       	sub	r8, r22
    37de:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    37e0:	81 14       	cp	r8, r1
    37e2:	91 04       	cpc	r9, r1
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <f_write+0x418>
    37e6:	4a ce       	rjmp	.-876    	; 0x347c <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    37e8:	ab 81       	ldd	r26, Y+3	; 0x03
    37ea:	bc 81       	ldd	r27, Y+4	; 0x04
    37ec:	16 96       	adiw	r26, 0x06	; 6
    37ee:	2d 91       	ld	r18, X+
    37f0:	3d 91       	ld	r19, X+
    37f2:	4d 91       	ld	r20, X+
    37f4:	5c 91       	ld	r21, X
    37f6:	19 97       	sbiw	r26, 0x09	; 9
    37f8:	1a 96       	adiw	r26, 0x0a	; 10
    37fa:	8d 91       	ld	r24, X+
    37fc:	9d 91       	ld	r25, X+
    37fe:	0d 90       	ld	r0, X+
    3800:	bc 91       	ld	r27, X
    3802:	a0 2d       	mov	r26, r0
    3804:	82 17       	cp	r24, r18
    3806:	93 07       	cpc	r25, r19
    3808:	a4 07       	cpc	r26, r20
    380a:	b5 07       	cpc	r27, r21
    380c:	30 f4       	brcc	.+12     	; 0x381a <f_write+0x44a>
    380e:	eb 81       	ldd	r30, Y+3	; 0x03
    3810:	fc 81       	ldd	r31, Y+4	; 0x04
    3812:	22 87       	std	Z+10, r18	; 0x0a
    3814:	33 87       	std	Z+11, r19	; 0x0b
    3816:	44 87       	std	Z+12, r20	; 0x0c
    3818:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    381a:	ab 81       	ldd	r26, Y+3	; 0x03
    381c:	bc 81       	ldd	r27, Y+4	; 0x04
    381e:	14 96       	adiw	r26, 0x04	; 4
    3820:	8c 91       	ld	r24, X
    3822:	14 97       	sbiw	r26, 0x04	; 4
    3824:	80 62       	ori	r24, 0x20	; 32
    3826:	14 96       	adiw	r26, 0x04	; 4
    3828:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    382a:	86 2d       	mov	r24, r6
    382c:	24 96       	adiw	r28, 0x04	; 4
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	df 90       	pop	r13
    3840:	cf 90       	pop	r12
    3842:	bf 90       	pop	r11
    3844:	af 90       	pop	r10
    3846:	9f 90       	pop	r9
    3848:	8f 90       	pop	r8
    384a:	7f 90       	pop	r7
    384c:	6f 90       	pop	r6
    384e:	5f 90       	pop	r5
    3850:	4f 90       	pop	r4
    3852:	3f 90       	pop	r3
    3854:	2f 90       	pop	r2
    3856:	08 95       	ret

00003858 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3858:	0f 93       	push	r16
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3860:	6a 81       	ldd	r22, Y+2	; 0x02
    3862:	7b 81       	ldd	r23, Y+3	; 0x03
    3864:	88 81       	ld	r24, Y
    3866:	99 81       	ldd	r25, Y+1	; 0x01
    3868:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <validate>
    386c:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    386e:	88 23       	and	r24, r24
    3870:	09 f0       	breq	.+2      	; 0x3874 <f_sync+0x1c>
    3872:	65 c0       	rjmp	.+202    	; 0x393e <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3874:	8c 81       	ldd	r24, Y+4	; 0x04
    3876:	85 ff       	sbrs	r24, 5
    3878:	62 c0       	rjmp	.+196    	; 0x393e <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    387a:	86 ff       	sbrs	r24, 6
    387c:	14 c0       	rjmp	.+40     	; 0x38a6 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    387e:	e8 81       	ld	r30, Y
    3880:	f9 81       	ldd	r31, Y+1	; 0x01
    3882:	be 01       	movw	r22, r28
    3884:	60 5e       	subi	r22, 0xE0	; 224
    3886:	7f 4f       	sbci	r23, 0xFF	; 255
    3888:	2e 89       	ldd	r18, Y+22	; 0x16
    388a:	3f 89       	ldd	r19, Y+23	; 0x17
    388c:	48 8d       	ldd	r20, Y+24	; 0x18
    388e:	59 8d       	ldd	r21, Y+25	; 0x19
    3890:	81 81       	ldd	r24, Z+1	; 0x01
    3892:	01 e0       	ldi	r16, 0x01	; 1
    3894:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    3898:	88 23       	and	r24, r24
    389a:	11 f0       	breq	.+4      	; 0x38a0 <f_sync+0x48>
    389c:	91 e0       	ldi	r25, 0x01	; 1
    389e:	4f c0       	rjmp	.+158    	; 0x393e <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    38a0:	8c 81       	ldd	r24, Y+4	; 0x04
    38a2:	8f 7b       	andi	r24, 0xBF	; 191
    38a4:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    38a6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    38a8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    38aa:	6c 8d       	ldd	r22, Y+28	; 0x1c
    38ac:	7d 8d       	ldd	r23, Y+29	; 0x1d
    38ae:	88 81       	ld	r24, Y
    38b0:	99 81       	ldd	r25, Y+1	; 0x01
    38b2:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    38b6:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    38b8:	88 23       	and	r24, r24
    38ba:	09 f0       	breq	.+2      	; 0x38be <f_sync+0x66>
    38bc:	40 c0       	rjmp	.+128    	; 0x393e <f_sync+0xe6>
				dir = fp->dir_ptr;
    38be:	ee 8d       	ldd	r30, Y+30	; 0x1e
    38c0:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    38c2:	83 85       	ldd	r24, Z+11	; 0x0b
    38c4:	80 62       	ori	r24, 0x20	; 32
    38c6:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    38c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ca:	84 8f       	std	Z+28, r24	; 0x1c
    38cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    38ce:	85 8f       	std	Z+29, r24	; 0x1d
    38d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    38d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    38d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    38d8:	cd 01       	movw	r24, r26
    38da:	aa 27       	eor	r26, r26
    38dc:	bb 27       	eor	r27, r27
    38de:	86 8f       	std	Z+30, r24	; 0x1e
    38e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    38e4:	ac 85       	ldd	r26, Y+12	; 0x0c
    38e6:	bd 85       	ldd	r27, Y+13	; 0x0d
    38e8:	8b 2f       	mov	r24, r27
    38ea:	99 27       	eor	r25, r25
    38ec:	aa 27       	eor	r26, r26
    38ee:	bb 27       	eor	r27, r27
    38f0:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    38f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    38f4:	82 8f       	std	Z+26, r24	; 0x1a
    38f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f8:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    38fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    38fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    38fe:	a8 89       	ldd	r26, Y+16	; 0x10
    3900:	b9 89       	ldd	r27, Y+17	; 0x11
    3902:	cd 01       	movw	r24, r26
    3904:	aa 27       	eor	r26, r26
    3906:	bb 27       	eor	r27, r27
    3908:	84 8b       	std	Z+20, r24	; 0x14
    390a:	8e 85       	ldd	r24, Y+14	; 0x0e
    390c:	9f 85       	ldd	r25, Y+15	; 0x0f
    390e:	a8 89       	ldd	r26, Y+16	; 0x10
    3910:	b9 89       	ldd	r27, Y+17	; 0x11
    3912:	cd 01       	movw	r24, r26
    3914:	aa 27       	eor	r26, r26
    3916:	bb 27       	eor	r27, r27
    3918:	89 2f       	mov	r24, r25
    391a:	99 27       	eor	r25, r25
    391c:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    391e:	16 8a       	std	Z+22, r1	; 0x16
    3920:	17 8a       	std	Z+23, r1	; 0x17
    3922:	10 8e       	std	Z+24, r1	; 0x18
    3924:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    3926:	8c 81       	ldd	r24, Y+4	; 0x04
    3928:	8f 7d       	andi	r24, 0xDF	; 223
    392a:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    392c:	e8 81       	ld	r30, Y
    392e:	f9 81       	ldd	r31, Y+1	; 0x01
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3934:	88 81       	ld	r24, Y
    3936:	99 81       	ldd	r25, Y+1	; 0x01
    3938:	0e 94 b7 09 	call	0x136e	; 0x136e <sync>
    393c:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    393e:	89 2f       	mov	r24, r25
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	0f 91       	pop	r16
    3946:	08 95       	ret

00003948 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    394e:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    3952:	88 23       	and	r24, r24
    3954:	11 f4       	brne	.+4      	; 0x395a <f_close+0x12>
    3956:	18 82       	st	Y, r1
    3958:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	08 95       	ret

00003960 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3960:	2f 92       	push	r2
    3962:	3f 92       	push	r3
    3964:	4f 92       	push	r4
    3966:	5f 92       	push	r5
    3968:	6f 92       	push	r6
    396a:	7f 92       	push	r7
    396c:	8f 92       	push	r8
    396e:	9f 92       	push	r9
    3970:	af 92       	push	r10
    3972:	bf 92       	push	r11
    3974:	cf 92       	push	r12
    3976:	df 92       	push	r13
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	28 97       	sbiw	r28, 0x08	; 8
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	8f 83       	std	Y+7, r24	; 0x07
    398c:	98 87       	std	Y+8, r25	; 0x08
    398e:	3a 01       	movw	r6, r20
    3990:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3992:	dc 01       	movw	r26, r24
    3994:	12 96       	adiw	r26, 0x02	; 2
    3996:	6d 91       	ld	r22, X+
    3998:	7c 91       	ld	r23, X
    399a:	13 97       	sbiw	r26, 0x03	; 3
    399c:	8d 91       	ld	r24, X+
    399e:	9c 91       	ld	r25, X
    39a0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <validate>
    39a4:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    39a6:	88 23       	and	r24, r24
    39a8:	09 f0       	breq	.+2      	; 0x39ac <f_lseek+0x4c>
    39aa:	f3 c1       	rjmp	.+998    	; 0x3d92 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    39ac:	ef 81       	ldd	r30, Y+7	; 0x07
    39ae:	f8 85       	ldd	r31, Y+8	; 0x08
    39b0:	84 81       	ldd	r24, Z+4	; 0x04
    39b2:	87 fd       	sbrc	r24, 7
    39b4:	98 c0       	rjmp	.+304    	; 0x3ae6 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    39b6:	af 81       	ldd	r26, Y+7	; 0x07
    39b8:	b8 85       	ldd	r27, Y+8	; 0x08
    39ba:	1a 96       	adiw	r26, 0x0a	; 10
    39bc:	ad 90       	ld	r10, X+
    39be:	bd 90       	ld	r11, X+
    39c0:	cd 90       	ld	r12, X+
    39c2:	dc 90       	ld	r13, X
    39c4:	1d 97       	sbiw	r26, 0x0d	; 13
    39c6:	a6 14       	cp	r10, r6
    39c8:	b7 04       	cpc	r11, r7
    39ca:	c8 04       	cpc	r12, r8
    39cc:	d9 04       	cpc	r13, r9
    39ce:	10 f4       	brcc	.+4      	; 0x39d4 <f_lseek+0x74>
    39d0:	81 ff       	sbrs	r24, 1
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <f_lseek+0x78>
    39d4:	64 01       	movw	r12, r8
    39d6:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    39d8:	ef 81       	ldd	r30, Y+7	; 0x07
    39da:	f8 85       	ldd	r31, Y+8	; 0x08
    39dc:	26 81       	ldd	r18, Z+6	; 0x06
    39de:	37 81       	ldd	r19, Z+7	; 0x07
    39e0:	40 85       	ldd	r20, Z+8	; 0x08
    39e2:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    39e4:	16 82       	std	Z+6, r1	; 0x06
    39e6:	17 82       	std	Z+7, r1	; 0x07
    39e8:	10 86       	std	Z+8, r1	; 0x08
    39ea:	11 86       	std	Z+9, r1	; 0x09
    39ec:	8f ef       	ldi	r24, 0xFF	; 255
    39ee:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    39f0:	a1 14       	cp	r10, r1
    39f2:	b1 04       	cpc	r11, r1
    39f4:	c1 04       	cpc	r12, r1
    39f6:	d1 04       	cpc	r13, r1
    39f8:	09 f4       	brne	.+2      	; 0x39fc <f_lseek+0x9c>
    39fa:	5f c1       	rjmp	.+702    	; 0x3cba <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    39fc:	01 90       	ld	r0, Z+
    39fe:	f0 81       	ld	r31, Z
    3a00:	e0 2d       	mov	r30, r0
    3a02:	e9 83       	std	Y+1, r30	; 0x01
    3a04:	fa 83       	std	Y+2, r31	; 0x02
    3a06:	82 81       	ldd	r24, Z+2	; 0x02
    3a08:	68 2e       	mov	r6, r24
    3a0a:	77 24       	eor	r7, r7
    3a0c:	88 24       	eor	r8, r8
    3a0e:	99 24       	eor	r9, r9
    3a10:	89 e0       	ldi	r24, 0x09	; 9
    3a12:	66 0c       	add	r6, r6
    3a14:	77 1c       	adc	r7, r7
    3a16:	88 1c       	adc	r8, r8
    3a18:	99 1c       	adc	r9, r9
    3a1a:	8a 95       	dec	r24
    3a1c:	d1 f7       	brne	.-12     	; 0x3a12 <f_lseek+0xb2>
		if (ifptr > 0 &&
    3a1e:	21 15       	cp	r18, r1
    3a20:	31 05       	cpc	r19, r1
    3a22:	41 05       	cpc	r20, r1
    3a24:	51 05       	cpc	r21, r1
    3a26:	f1 f1       	breq	.+124    	; 0x3aa4 <f_lseek+0x144>
    3a28:	19 01       	movw	r2, r18
    3a2a:	2a 01       	movw	r4, r20
    3a2c:	08 94       	sec
    3a2e:	21 08       	sbc	r2, r1
    3a30:	31 08       	sbc	r3, r1
    3a32:	41 08       	sbc	r4, r1
    3a34:	51 08       	sbc	r5, r1
    3a36:	c6 01       	movw	r24, r12
    3a38:	b5 01       	movw	r22, r10
    3a3a:	61 50       	subi	r22, 0x01	; 1
    3a3c:	70 40       	sbci	r23, 0x00	; 0
    3a3e:	80 40       	sbci	r24, 0x00	; 0
    3a40:	90 40       	sbci	r25, 0x00	; 0
    3a42:	a4 01       	movw	r20, r8
    3a44:	93 01       	movw	r18, r6
    3a46:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    3a4a:	2b 83       	std	Y+3, r18	; 0x03
    3a4c:	3c 83       	std	Y+4, r19	; 0x04
    3a4e:	4d 83       	std	Y+5, r20	; 0x05
    3a50:	5e 83       	std	Y+6, r21	; 0x06
    3a52:	c2 01       	movw	r24, r4
    3a54:	b1 01       	movw	r22, r2
    3a56:	a4 01       	movw	r20, r8
    3a58:	93 01       	movw	r18, r6
    3a5a:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	9c 81       	ldd	r25, Y+4	; 0x04
    3a62:	ad 81       	ldd	r26, Y+5	; 0x05
    3a64:	be 81       	ldd	r27, Y+6	; 0x06
    3a66:	82 17       	cp	r24, r18
    3a68:	93 07       	cpc	r25, r19
    3a6a:	a4 07       	cpc	r26, r20
    3a6c:	b5 07       	cpc	r27, r21
    3a6e:	d0 f0       	brcs	.+52     	; 0x3aa4 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3a70:	88 27       	eor	r24, r24
    3a72:	99 27       	eor	r25, r25
    3a74:	dc 01       	movw	r26, r24
    3a76:	86 19       	sub	r24, r6
    3a78:	97 09       	sbc	r25, r7
    3a7a:	a8 09       	sbc	r26, r8
    3a7c:	b9 09       	sbc	r27, r9
    3a7e:	82 21       	and	r24, r2
    3a80:	93 21       	and	r25, r3
    3a82:	a4 21       	and	r26, r4
    3a84:	b5 21       	and	r27, r5
    3a86:	ef 81       	ldd	r30, Y+7	; 0x07
    3a88:	f8 85       	ldd	r31, Y+8	; 0x08
    3a8a:	86 83       	std	Z+6, r24	; 0x06
    3a8c:	97 83       	std	Z+7, r25	; 0x07
    3a8e:	a0 87       	std	Z+8, r26	; 0x08
    3a90:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3a92:	a8 1a       	sub	r10, r24
    3a94:	b9 0a       	sbc	r11, r25
    3a96:	ca 0a       	sbc	r12, r26
    3a98:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3a9a:	42 89       	ldd	r20, Z+18	; 0x12
    3a9c:	53 89       	ldd	r21, Z+19	; 0x13
    3a9e:	64 89       	ldd	r22, Z+20	; 0x14
    3aa0:	75 89       	ldd	r23, Z+21	; 0x15
    3aa2:	39 c0       	rjmp	.+114    	; 0x3b16 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3aa4:	af 81       	ldd	r26, Y+7	; 0x07
    3aa6:	b8 85       	ldd	r27, Y+8	; 0x08
    3aa8:	1e 96       	adiw	r26, 0x0e	; 14
    3aaa:	4d 91       	ld	r20, X+
    3aac:	5d 91       	ld	r21, X+
    3aae:	6d 91       	ld	r22, X+
    3ab0:	7c 91       	ld	r23, X
    3ab2:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3ab4:	41 15       	cp	r20, r1
    3ab6:	51 05       	cpc	r21, r1
    3ab8:	61 05       	cpc	r22, r1
    3aba:	71 05       	cpc	r23, r1
    3abc:	21 f5       	brne	.+72     	; 0x3b06 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac2:	40 e0       	ldi	r20, 0x00	; 0
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	60 e0       	ldi	r22, 0x00	; 0
    3ac8:	70 e0       	ldi	r23, 0x00	; 0
    3aca:	0e 94 97 0c 	call	0x192e	; 0x192e <create_chain>
    3ace:	ab 01       	movw	r20, r22
    3ad0:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3ad2:	41 30       	cpi	r20, 0x01	; 1
    3ad4:	51 05       	cpc	r21, r1
    3ad6:	61 05       	cpc	r22, r1
    3ad8:	71 05       	cpc	r23, r1
    3ada:	39 f4       	brne	.+14     	; 0x3aea <f_lseek+0x18a>
    3adc:	ef 81       	ldd	r30, Y+7	; 0x07
    3ade:	f8 85       	ldd	r31, Y+8	; 0x08
    3ae0:	84 81       	ldd	r24, Z+4	; 0x04
    3ae2:	80 68       	ori	r24, 0x80	; 128
    3ae4:	84 83       	std	Z+4, r24	; 0x04
    3ae6:	12 e0       	ldi	r17, 0x02	; 2
    3ae8:	54 c1       	rjmp	.+680    	; 0x3d92 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3aea:	4f 3f       	cpi	r20, 0xFF	; 255
    3aec:	ff ef       	ldi	r31, 0xFF	; 255
    3aee:	5f 07       	cpc	r21, r31
    3af0:	ff ef       	ldi	r31, 0xFF	; 255
    3af2:	6f 07       	cpc	r22, r31
    3af4:	ff ef       	ldi	r31, 0xFF	; 255
    3af6:	7f 07       	cpc	r23, r31
    3af8:	b1 f1       	breq	.+108    	; 0x3b66 <f_lseek+0x206>
				fp->org_clust = clst;
    3afa:	ef 81       	ldd	r30, Y+7	; 0x07
    3afc:	f8 85       	ldd	r31, Y+8	; 0x08
    3afe:	46 87       	std	Z+14, r20	; 0x0e
    3b00:	57 87       	std	Z+15, r21	; 0x0f
    3b02:	60 8b       	std	Z+16, r22	; 0x10
    3b04:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3b06:	af 81       	ldd	r26, Y+7	; 0x07
    3b08:	b8 85       	ldd	r27, Y+8	; 0x08
    3b0a:	52 96       	adiw	r26, 0x12	; 18
    3b0c:	4d 93       	st	X+, r20
    3b0e:	5d 93       	st	X+, r21
    3b10:	6d 93       	st	X+, r22
    3b12:	7c 93       	st	X, r23
    3b14:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3b16:	41 15       	cp	r20, r1
    3b18:	51 05       	cpc	r21, r1
    3b1a:	61 05       	cpc	r22, r1
    3b1c:	71 05       	cpc	r23, r1
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <f_lseek+0x1c2>
    3b20:	58 c0       	rjmp	.+176    	; 0x3bd2 <f_lseek+0x272>
    3b22:	cb c0       	rjmp	.+406    	; 0x3cba <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3b24:	ef 81       	ldd	r30, Y+7	; 0x07
    3b26:	f8 85       	ldd	r31, Y+8	; 0x08
    3b28:	84 81       	ldd	r24, Z+4	; 0x04
    3b2a:	20 81       	ld	r18, Z
    3b2c:	31 81       	ldd	r19, Z+1	; 0x01
    3b2e:	81 ff       	sbrs	r24, 1
    3b30:	0d c0       	rjmp	.+26     	; 0x3b4c <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3b32:	c9 01       	movw	r24, r18
    3b34:	0e 94 97 0c 	call	0x192e	; 0x192e <create_chain>
    3b38:	ab 01       	movw	r20, r22
    3b3a:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3b3c:	41 15       	cp	r20, r1
    3b3e:	51 05       	cpc	r21, r1
    3b40:	61 05       	cpc	r22, r1
    3b42:	71 05       	cpc	r23, r1
    3b44:	41 f4       	brne	.+16     	; 0x3b56 <f_lseek+0x1f6>
    3b46:	64 01       	movw	r12, r8
    3b48:	53 01       	movw	r10, r6
    3b4a:	49 c0       	rjmp	.+146    	; 0x3bde <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3b4c:	c9 01       	movw	r24, r18
    3b4e:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    3b52:	ab 01       	movw	r20, r22
    3b54:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b56:	4f 3f       	cpi	r20, 0xFF	; 255
    3b58:	ff ef       	ldi	r31, 0xFF	; 255
    3b5a:	5f 07       	cpc	r21, r31
    3b5c:	ff ef       	ldi	r31, 0xFF	; 255
    3b5e:	6f 07       	cpc	r22, r31
    3b60:	ff ef       	ldi	r31, 0xFF	; 255
    3b62:	7f 07       	cpc	r23, r31
    3b64:	49 f4       	brne	.+18     	; 0x3b78 <f_lseek+0x218>
    3b66:	af 81       	ldd	r26, Y+7	; 0x07
    3b68:	b8 85       	ldd	r27, Y+8	; 0x08
    3b6a:	14 96       	adiw	r26, 0x04	; 4
    3b6c:	8c 91       	ld	r24, X
    3b6e:	14 97       	sbiw	r26, 0x04	; 4
    3b70:	80 68       	ori	r24, 0x80	; 128
    3b72:	14 96       	adiw	r26, 0x04	; 4
    3b74:	8c 93       	st	X, r24
    3b76:	ed c0       	rjmp	.+474    	; 0x3d52 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3b78:	42 30       	cpi	r20, 0x02	; 2
    3b7a:	51 05       	cpc	r21, r1
    3b7c:	61 05       	cpc	r22, r1
    3b7e:	71 05       	cpc	r23, r1
    3b80:	08 f4       	brcc	.+2      	; 0x3b84 <f_lseek+0x224>
    3b82:	ac cf       	rjmp	.-168    	; 0x3adc <f_lseek+0x17c>
    3b84:	af 81       	ldd	r26, Y+7	; 0x07
    3b86:	b8 85       	ldd	r27, Y+8	; 0x08
    3b88:	ed 91       	ld	r30, X+
    3b8a:	fc 91       	ld	r31, X
    3b8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b8e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3b90:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3b92:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3b94:	48 17       	cp	r20, r24
    3b96:	59 07       	cpc	r21, r25
    3b98:	6a 07       	cpc	r22, r26
    3b9a:	7b 07       	cpc	r23, r27
    3b9c:	08 f0       	brcs	.+2      	; 0x3ba0 <f_lseek+0x240>
    3b9e:	9e cf       	rjmp	.-196    	; 0x3adc <f_lseek+0x17c>
				fp->curr_clust = clst;
    3ba0:	af 81       	ldd	r26, Y+7	; 0x07
    3ba2:	b8 85       	ldd	r27, Y+8	; 0x08
    3ba4:	52 96       	adiw	r26, 0x12	; 18
    3ba6:	4d 93       	st	X+, r20
    3ba8:	5d 93       	st	X+, r21
    3baa:	6d 93       	st	X+, r22
    3bac:	7c 93       	st	X, r23
    3bae:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3bb0:	fd 01       	movw	r30, r26
    3bb2:	86 81       	ldd	r24, Z+6	; 0x06
    3bb4:	97 81       	ldd	r25, Z+7	; 0x07
    3bb6:	a0 85       	ldd	r26, Z+8	; 0x08
    3bb8:	b1 85       	ldd	r27, Z+9	; 0x09
    3bba:	86 0d       	add	r24, r6
    3bbc:	97 1d       	adc	r25, r7
    3bbe:	a8 1d       	adc	r26, r8
    3bc0:	b9 1d       	adc	r27, r9
    3bc2:	86 83       	std	Z+6, r24	; 0x06
    3bc4:	97 83       	std	Z+7, r25	; 0x07
    3bc6:	a0 87       	std	Z+8, r26	; 0x08
    3bc8:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3bca:	a6 18       	sub	r10, r6
    3bcc:	b7 08       	sbc	r11, r7
    3bce:	c8 08       	sbc	r12, r8
    3bd0:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3bd2:	6a 14       	cp	r6, r10
    3bd4:	7b 04       	cpc	r7, r11
    3bd6:	8c 04       	cpc	r8, r12
    3bd8:	9d 04       	cpc	r9, r13
    3bda:	08 f4       	brcc	.+2      	; 0x3bde <f_lseek+0x27e>
    3bdc:	a3 cf       	rjmp	.-186    	; 0x3b24 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3bde:	ef 81       	ldd	r30, Y+7	; 0x07
    3be0:	f8 85       	ldd	r31, Y+8	; 0x08
    3be2:	86 81       	ldd	r24, Z+6	; 0x06
    3be4:	97 81       	ldd	r25, Z+7	; 0x07
    3be6:	a0 85       	ldd	r26, Z+8	; 0x08
    3be8:	b1 85       	ldd	r27, Z+9	; 0x09
    3bea:	8a 0d       	add	r24, r10
    3bec:	9b 1d       	adc	r25, r11
    3bee:	ac 1d       	adc	r26, r12
    3bf0:	bd 1d       	adc	r27, r13
    3bf2:	86 83       	std	Z+6, r24	; 0x06
    3bf4:	97 83       	std	Z+7, r25	; 0x07
    3bf6:	a0 87       	std	Z+8, r26	; 0x08
    3bf8:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3bfa:	d6 01       	movw	r26, r12
    3bfc:	c5 01       	movw	r24, r10
    3bfe:	09 e0       	ldi	r16, 0x09	; 9
    3c00:	b6 95       	lsr	r27
    3c02:	a7 95       	ror	r26
    3c04:	97 95       	ror	r25
    3c06:	87 95       	ror	r24
    3c08:	0a 95       	dec	r16
    3c0a:	d1 f7       	brne	.-12     	; 0x3c00 <f_lseek+0x2a0>
    3c0c:	08 2f       	mov	r16, r24
    3c0e:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3c10:	8f ef       	ldi	r24, 0xFF	; 255
    3c12:	91 e0       	ldi	r25, 0x01	; 1
    3c14:	a0 e0       	ldi	r26, 0x00	; 0
    3c16:	b0 e0       	ldi	r27, 0x00	; 0
    3c18:	a8 22       	and	r10, r24
    3c1a:	b9 22       	and	r11, r25
    3c1c:	ca 22       	and	r12, r26
    3c1e:	db 22       	and	r13, r27
    3c20:	a1 14       	cp	r10, r1
    3c22:	b1 04       	cpc	r11, r1
    3c24:	c1 04       	cpc	r12, r1
    3c26:	d1 04       	cpc	r13, r1
    3c28:	09 f4       	brne	.+2      	; 0x3c2c <f_lseek+0x2cc>
    3c2a:	47 c0       	rjmp	.+142    	; 0x3cba <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3c2c:	80 80       	ld	r8, Z
    3c2e:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3c30:	3e ef       	ldi	r19, 0xFE	; 254
    3c32:	a3 2e       	mov	r10, r19
    3c34:	3f ef       	ldi	r19, 0xFF	; 255
    3c36:	b3 2e       	mov	r11, r19
    3c38:	3f ef       	ldi	r19, 0xFF	; 255
    3c3a:	c3 2e       	mov	r12, r19
    3c3c:	3f ef       	ldi	r19, 0xFF	; 255
    3c3e:	d3 2e       	mov	r13, r19
    3c40:	a4 0e       	add	r10, r20
    3c42:	b5 1e       	adc	r11, r21
    3c44:	c6 1e       	adc	r12, r22
    3c46:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3c48:	f4 01       	movw	r30, r8
    3c4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c4c:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c4e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c50:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c52:	02 97       	sbiw	r24, 0x02	; 2
    3c54:	a1 09       	sbc	r26, r1
    3c56:	b1 09       	sbc	r27, r1
    3c58:	a8 16       	cp	r10, r24
    3c5a:	b9 06       	cpc	r11, r25
    3c5c:	ca 06       	cpc	r12, r26
    3c5e:	db 06       	cpc	r13, r27
    3c60:	c0 f4       	brcc	.+48     	; 0x3c92 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3c62:	22 81       	ldd	r18, Z+2	; 0x02
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	c6 01       	movw	r24, r12
    3c6c:	b5 01       	movw	r22, r10
    3c6e:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    3c72:	9b 01       	movw	r18, r22
    3c74:	ac 01       	movw	r20, r24
    3c76:	f4 01       	movw	r30, r8
    3c78:	86 a1       	ldd	r24, Z+38	; 0x26
    3c7a:	97 a1       	ldd	r25, Z+39	; 0x27
    3c7c:	a0 a5       	ldd	r26, Z+40	; 0x28
    3c7e:	b1 a5       	ldd	r27, Z+41	; 0x29
    3c80:	28 0f       	add	r18, r24
    3c82:	39 1f       	adc	r19, r25
    3c84:	4a 1f       	adc	r20, r26
    3c86:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3c88:	21 15       	cp	r18, r1
    3c8a:	31 05       	cpc	r19, r1
    3c8c:	41 05       	cpc	r20, r1
    3c8e:	51 05       	cpc	r21, r1
    3c90:	49 f4       	brne	.+18     	; 0x3ca4 <f_lseek+0x344>
    3c92:	af 81       	ldd	r26, Y+7	; 0x07
    3c94:	b8 85       	ldd	r27, Y+8	; 0x08
    3c96:	14 96       	adiw	r26, 0x04	; 4
    3c98:	8c 91       	ld	r24, X
    3c9a:	14 97       	sbiw	r26, 0x04	; 4
    3c9c:	80 68       	ori	r24, 0x80	; 128
    3c9e:	14 96       	adiw	r26, 0x04	; 4
    3ca0:	8c 93       	st	X, r24
    3ca2:	21 cf       	rjmp	.-446    	; 0x3ae6 <f_lseek+0x186>
				nsect += fp->csect;
    3ca4:	59 01       	movw	r10, r18
    3ca6:	6a 01       	movw	r12, r20
    3ca8:	a0 0e       	add	r10, r16
    3caa:	b1 1c       	adc	r11, r1
    3cac:	c1 1c       	adc	r12, r1
    3cae:	d1 1c       	adc	r13, r1
				fp->csect++;
    3cb0:	0f 5f       	subi	r16, 0xFF	; 255
    3cb2:	ef 81       	ldd	r30, Y+7	; 0x07
    3cb4:	f8 85       	ldd	r31, Y+8	; 0x08
    3cb6:	05 83       	std	Z+5, r16	; 0x05
    3cb8:	03 c0       	rjmp	.+6      	; 0x3cc0 <f_lseek+0x360>
    3cba:	aa 24       	eor	r10, r10
    3cbc:	bb 24       	eor	r11, r11
    3cbe:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3cc0:	ef 81       	ldd	r30, Y+7	; 0x07
    3cc2:	f8 85       	ldd	r31, Y+8	; 0x08
    3cc4:	86 81       	ldd	r24, Z+6	; 0x06
    3cc6:	97 81       	ldd	r25, Z+7	; 0x07
    3cc8:	a0 85       	ldd	r26, Z+8	; 0x08
    3cca:	b1 85       	ldd	r27, Z+9	; 0x09
    3ccc:	91 70       	andi	r25, 0x01	; 1
    3cce:	a0 70       	andi	r26, 0x00	; 0
    3cd0:	b0 70       	andi	r27, 0x00	; 0
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	a1 05       	cpc	r26, r1
    3cd6:	b1 05       	cpc	r27, r1
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <f_lseek+0x37c>
    3cda:	45 c0       	rjmp	.+138    	; 0x3d66 <f_lseek+0x406>
    3cdc:	26 89       	ldd	r18, Z+22	; 0x16
    3cde:	37 89       	ldd	r19, Z+23	; 0x17
    3ce0:	40 8d       	ldd	r20, Z+24	; 0x18
    3ce2:	51 8d       	ldd	r21, Z+25	; 0x19
    3ce4:	a2 16       	cp	r10, r18
    3ce6:	b3 06       	cpc	r11, r19
    3ce8:	c4 06       	cpc	r12, r20
    3cea:	d5 06       	cpc	r13, r21
    3cec:	e1 f1       	breq	.+120    	; 0x3d66 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3cee:	84 81       	ldd	r24, Z+4	; 0x04
    3cf0:	86 ff       	sbrs	r24, 6
    3cf2:	1a c0       	rjmp	.+52     	; 0x3d28 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3cf4:	01 90       	ld	r0, Z+
    3cf6:	f0 81       	ld	r31, Z
    3cf8:	e0 2d       	mov	r30, r0
    3cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3cfc:	78 85       	ldd	r23, Y+8	; 0x08
    3cfe:	60 5e       	subi	r22, 0xE0	; 224
    3d00:	7f 4f       	sbci	r23, 0xFF	; 255
    3d02:	81 81       	ldd	r24, Z+1	; 0x01
    3d04:	01 e0       	ldi	r16, 0x01	; 1
    3d06:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    3d0a:	af 81       	ldd	r26, Y+7	; 0x07
    3d0c:	b8 85       	ldd	r27, Y+8	; 0x08
    3d0e:	14 96       	adiw	r26, 0x04	; 4
    3d10:	9c 91       	ld	r25, X
    3d12:	14 97       	sbiw	r26, 0x04	; 4
    3d14:	88 23       	and	r24, r24
    3d16:	21 f0       	breq	.+8      	; 0x3d20 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3d18:	90 68       	ori	r25, 0x80	; 128
    3d1a:	14 96       	adiw	r26, 0x04	; 4
    3d1c:	9c 93       	st	X, r25
    3d1e:	19 c0       	rjmp	.+50     	; 0x3d52 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3d20:	9f 7b       	andi	r25, 0xBF	; 191
    3d22:	ef 81       	ldd	r30, Y+7	; 0x07
    3d24:	f8 85       	ldd	r31, Y+8	; 0x08
    3d26:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3d28:	af 81       	ldd	r26, Y+7	; 0x07
    3d2a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d2c:	ed 91       	ld	r30, X+
    3d2e:	fc 91       	ld	r31, X
    3d30:	11 97       	sbiw	r26, 0x01	; 1
    3d32:	bd 01       	movw	r22, r26
    3d34:	60 5e       	subi	r22, 0xE0	; 224
    3d36:	7f 4f       	sbci	r23, 0xFF	; 255
    3d38:	81 81       	ldd	r24, Z+1	; 0x01
    3d3a:	a6 01       	movw	r20, r12
    3d3c:	95 01       	movw	r18, r10
    3d3e:	01 e0       	ldi	r16, 0x01	; 1
    3d40:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <disk_read>
    3d44:	88 23       	and	r24, r24
    3d46:	39 f0       	breq	.+14     	; 0x3d56 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3d48:	ef 81       	ldd	r30, Y+7	; 0x07
    3d4a:	f8 85       	ldd	r31, Y+8	; 0x08
    3d4c:	84 81       	ldd	r24, Z+4	; 0x04
    3d4e:	80 68       	ori	r24, 0x80	; 128
    3d50:	84 83       	std	Z+4, r24	; 0x04
    3d52:	11 e0       	ldi	r17, 0x01	; 1
    3d54:	1e c0       	rjmp	.+60     	; 0x3d92 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3d56:	af 81       	ldd	r26, Y+7	; 0x07
    3d58:	b8 85       	ldd	r27, Y+8	; 0x08
    3d5a:	56 96       	adiw	r26, 0x16	; 22
    3d5c:	ad 92       	st	X+, r10
    3d5e:	bd 92       	st	X+, r11
    3d60:	cd 92       	st	X+, r12
    3d62:	dc 92       	st	X, r13
    3d64:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3d66:	ef 81       	ldd	r30, Y+7	; 0x07
    3d68:	f8 85       	ldd	r31, Y+8	; 0x08
    3d6a:	26 81       	ldd	r18, Z+6	; 0x06
    3d6c:	37 81       	ldd	r19, Z+7	; 0x07
    3d6e:	40 85       	ldd	r20, Z+8	; 0x08
    3d70:	51 85       	ldd	r21, Z+9	; 0x09
    3d72:	82 85       	ldd	r24, Z+10	; 0x0a
    3d74:	93 85       	ldd	r25, Z+11	; 0x0b
    3d76:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d78:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d7a:	82 17       	cp	r24, r18
    3d7c:	93 07       	cpc	r25, r19
    3d7e:	a4 07       	cpc	r26, r20
    3d80:	b5 07       	cpc	r27, r21
    3d82:	38 f4       	brcc	.+14     	; 0x3d92 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3d84:	22 87       	std	Z+10, r18	; 0x0a
    3d86:	33 87       	std	Z+11, r19	; 0x0b
    3d88:	44 87       	std	Z+12, r20	; 0x0c
    3d8a:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3d8c:	84 81       	ldd	r24, Z+4	; 0x04
    3d8e:	80 62       	ori	r24, 0x20	; 32
    3d90:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3d92:	81 2f       	mov	r24, r17
    3d94:	28 96       	adiw	r28, 0x08	; 8
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	cf 91       	pop	r28
    3d9c:	df 91       	pop	r29
    3d9e:	1f 91       	pop	r17
    3da0:	0f 91       	pop	r16
    3da2:	df 90       	pop	r13
    3da4:	cf 90       	pop	r12
    3da6:	bf 90       	pop	r11
    3da8:	af 90       	pop	r10
    3daa:	9f 90       	pop	r9
    3dac:	8f 90       	pop	r8
    3dae:	7f 90       	pop	r7
    3db0:	6f 90       	pop	r6
    3db2:	5f 90       	pop	r5
    3db4:	4f 90       	pop	r4
    3db6:	3f 90       	pop	r3
    3db8:	2f 90       	pop	r2
    3dba:	08 95       	ret

00003dbc <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	2e 97       	sbiw	r28, 0x0e	; 14
    3dca:	cd bf       	out	0x3d, r28	; 61
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	8c 01       	movw	r16, r24
    3dd0:	6d 87       	std	Y+13, r22	; 0x0d
    3dd2:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3dd4:	ce 01       	movw	r24, r28
    3dd6:	0d 96       	adiw	r24, 0x0d	; 13
    3dd8:	b8 01       	movw	r22, r16
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
	if (res == FR_OK) {
    3de0:	88 23       	and	r24, r24
    3de2:	09 f0       	breq	.+2      	; 0x3de6 <f_opendir+0x2a>
    3de4:	46 c0       	rjmp	.+140    	; 0x3e72 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3de6:	ce 01       	movw	r24, r28
    3de8:	01 96       	adiw	r24, 0x01	; 1
    3dea:	d8 01       	movw	r26, r16
    3dec:	54 96       	adiw	r26, 0x14	; 20
    3dee:	8d 93       	st	X+, r24
    3df0:	9c 93       	st	X, r25
    3df2:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3df4:	6d 85       	ldd	r22, Y+13	; 0x0d
    3df6:	7e 85       	ldd	r23, Y+14	; 0x0e
    3df8:	c8 01       	movw	r24, r16
    3dfa:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3dfe:	88 23       	and	r24, r24
    3e00:	a9 f5       	brne	.+106    	; 0x3e6c <f_opendir+0xb0>
			dir = dj->dir;
    3e02:	d8 01       	movw	r26, r16
    3e04:	52 96       	adiw	r26, 0x12	; 18
    3e06:	ed 91       	ld	r30, X+
    3e08:	fc 91       	ld	r31, X
    3e0a:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3e0c:	30 97       	sbiw	r30, 0x00	; 0
    3e0e:	f9 f0       	breq	.+62     	; 0x3e4e <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3e10:	83 85       	ldd	r24, Z+11	; 0x0b
    3e12:	84 ff       	sbrs	r24, 4
    3e14:	2d c0       	rjmp	.+90     	; 0x3e70 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3e16:	35 89       	ldd	r19, Z+21	; 0x15
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	84 89       	ldd	r24, Z+20	; 0x14
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	28 2b       	or	r18, r24
    3e20:	39 2b       	or	r19, r25
    3e22:	40 e0       	ldi	r20, 0x00	; 0
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	a9 01       	movw	r20, r18
    3e28:	33 27       	eor	r19, r19
    3e2a:	22 27       	eor	r18, r18
    3e2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	62 8d       	ldd	r22, Z+26	; 0x1a
    3e32:	70 e0       	ldi	r23, 0x00	; 0
    3e34:	86 2b       	or	r24, r22
    3e36:	97 2b       	or	r25, r23
    3e38:	a0 e0       	ldi	r26, 0x00	; 0
    3e3a:	b0 e0       	ldi	r27, 0x00	; 0
    3e3c:	28 2b       	or	r18, r24
    3e3e:	39 2b       	or	r19, r25
    3e40:	4a 2b       	or	r20, r26
    3e42:	5b 2b       	or	r21, r27
    3e44:	f8 01       	movw	r30, r16
    3e46:	26 83       	std	Z+6, r18	; 0x06
    3e48:	37 83       	std	Z+7, r19	; 0x07
    3e4a:	40 87       	std	Z+8, r20	; 0x08
    3e4c:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3e4e:	d8 01       	movw	r26, r16
    3e50:	ed 91       	ld	r30, X+
    3e52:	fc 91       	ld	r31, X
    3e54:	11 97       	sbiw	r26, 0x01	; 1
    3e56:	86 81       	ldd	r24, Z+6	; 0x06
    3e58:	97 81       	ldd	r25, Z+7	; 0x07
    3e5a:	12 96       	adiw	r26, 0x02	; 2
    3e5c:	8d 93       	st	X+, r24
    3e5e:	9c 93       	st	X, r25
    3e60:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3e62:	c8 01       	movw	r24, r16
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	70 e0       	ldi	r23, 0x00	; 0
    3e68:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3e6c:	84 30       	cpi	r24, 0x04	; 4
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <f_opendir+0xb6>
    3e70:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3e72:	2e 96       	adiw	r28, 0x0e	; 14
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	1f 91       	pop	r17
    3e7e:	0f 91       	pop	r16
    3e80:	08 95       	ret

00003e82 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3e82:	ef 92       	push	r14
    3e84:	ff 92       	push	r15
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	df 93       	push	r29
    3e8c:	cf 93       	push	r28
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	2c 97       	sbiw	r28, 0x0c	; 12
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	8c 01       	movw	r16, r24
    3e9a:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	62 81       	ldd	r22, Z+2	; 0x02
    3ea0:	73 81       	ldd	r23, Z+3	; 0x03
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <validate>
	if (res == FR_OK) {
    3eaa:	88 23       	and	r24, r24
    3eac:	59 f5       	brne	.+86     	; 0x3f04 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3eae:	ce 01       	movw	r24, r28
    3eb0:	01 96       	adiw	r24, 0x01	; 1
    3eb2:	f8 01       	movw	r30, r16
    3eb4:	84 8b       	std	Z+20, r24	; 0x14
    3eb6:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3eb8:	e1 14       	cp	r14, r1
    3eba:	f1 04       	cpc	r15, r1
    3ebc:	31 f4       	brne	.+12     	; 0x3eca <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3ebe:	c8 01       	movw	r24, r16
    3ec0:	60 e0       	ldi	r22, 0x00	; 0
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
    3ec8:	1d c0       	rjmp	.+58     	; 0x3f04 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3eca:	c8 01       	movw	r24, r16
    3ecc:	0e 94 40 10 	call	0x2080	; 0x2080 <dir_read>
			if (res == FR_NO_FILE) {
    3ed0:	84 30       	cpi	r24, 0x04	; 4
    3ed2:	31 f4       	brne	.+12     	; 0x3ee0 <f_readdir+0x5e>
				dj->sect = 0;
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	16 86       	std	Z+14, r1	; 0x0e
    3ed8:	17 86       	std	Z+15, r1	; 0x0f
    3eda:	10 8a       	std	Z+16, r1	; 0x10
    3edc:	11 8a       	std	Z+17, r1	; 0x11
    3ede:	02 c0       	rjmp	.+4      	; 0x3ee4 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3ee0:	88 23       	and	r24, r24
    3ee2:	81 f4       	brne	.+32     	; 0x3f04 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3ee4:	c8 01       	movw	r24, r16
    3ee6:	b7 01       	movw	r22, r14
    3ee8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3eec:	c8 01       	movw	r24, r16
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <dir_next>
				if (res == FR_NO_FILE) {
    3ef4:	84 30       	cpi	r24, 0x04	; 4
    3ef6:	31 f4       	brne	.+12     	; 0x3f04 <f_readdir+0x82>
					dj->sect = 0;
    3ef8:	f8 01       	movw	r30, r16
    3efa:	16 86       	std	Z+14, r1	; 0x0e
    3efc:	17 86       	std	Z+15, r1	; 0x0f
    3efe:	10 8a       	std	Z+16, r1	; 0x10
    3f00:	11 8a       	std	Z+17, r1	; 0x11
    3f02:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3f04:	2c 96       	adiw	r28, 0x0c	; 12
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	1f 91       	pop	r17
    3f10:	0f 91       	pop	r16
    3f12:	ff 90       	pop	r15
    3f14:	ef 90       	pop	r14
    3f16:	08 95       	ret

00003f18 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3f18:	cf 92       	push	r12
    3f1a:	df 92       	push	r13
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	1f 93       	push	r17
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	a4 97       	sbiw	r28, 0x24	; 36
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	8b a3       	std	Y+35, r24	; 0x23
    3f32:	9c a3       	std	Y+36, r25	; 0x24
    3f34:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3f36:	2d e0       	ldi	r18, 0x0D	; 13
    3f38:	e2 2e       	mov	r14, r18
    3f3a:	f1 2c       	mov	r15, r1
    3f3c:	ec 0e       	add	r14, r28
    3f3e:	fd 1e       	adc	r15, r29
    3f40:	ce 01       	movw	r24, r28
    3f42:	83 96       	adiw	r24, 0x23	; 35
    3f44:	b7 01       	movw	r22, r14
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
    3f4c:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3f4e:	88 23       	and	r24, r24
    3f50:	b1 f4       	brne	.+44     	; 0x3f7e <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3f52:	ce 01       	movw	r24, r28
    3f54:	01 96       	adiw	r24, 0x01	; 1
    3f56:	89 a3       	std	Y+33, r24	; 0x21
    3f58:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f5e:	c7 01       	movw	r24, r14
    3f60:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
    3f64:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3f66:	88 23       	and	r24, r24
    3f68:	51 f4       	brne	.+20     	; 0x3f7e <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f6c:	98 a1       	ldd	r25, Y+32	; 0x20
    3f6e:	89 2b       	or	r24, r25
    3f70:	11 f4       	brne	.+4      	; 0x3f76 <f_stat+0x5e>
    3f72:	16 e0       	ldi	r17, 0x06	; 6
    3f74:	04 c0       	rjmp	.+8      	; 0x3f7e <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3f76:	c7 01       	movw	r24, r14
    3f78:	b6 01       	movw	r22, r12
    3f7a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3f7e:	81 2f       	mov	r24, r17
    3f80:	a4 96       	adiw	r28, 0x24	; 36
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	1f 91       	pop	r17
    3f8c:	ff 90       	pop	r15
    3f8e:	ef 90       	pop	r14
    3f90:	df 90       	pop	r13
    3f92:	cf 90       	pop	r12
    3f94:	08 95       	ret

00003f96 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3f96:	2f 92       	push	r2
    3f98:	3f 92       	push	r3
    3f9a:	4f 92       	push	r4
    3f9c:	5f 92       	push	r5
    3f9e:	6f 92       	push	r6
    3fa0:	7f 92       	push	r7
    3fa2:	8f 92       	push	r8
    3fa4:	9f 92       	push	r9
    3fa6:	af 92       	push	r10
    3fa8:	bf 92       	push	r11
    3faa:	cf 92       	push	r12
    3fac:	df 92       	push	r13
    3fae:	ef 92       	push	r14
    3fb0:	ff 92       	push	r15
    3fb2:	0f 93       	push	r16
    3fb4:	1f 93       	push	r17
    3fb6:	df 93       	push	r29
    3fb8:	cf 93       	push	r28
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	29 97       	sbiw	r28, 0x09	; 9
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	de bf       	out	0x3e, r29	; 62
    3fc4:	89 83       	std	Y+1, r24	; 0x01
    3fc6:	9a 83       	std	Y+2, r25	; 0x02
    3fc8:	6c 83       	std	Y+4, r22	; 0x04
    3fca:	7d 83       	std	Y+5, r23	; 0x05
    3fcc:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3fce:	ce 01       	movw	r24, r28
    3fd0:	01 96       	adiw	r24, 0x01	; 1
    3fd2:	ba 01       	movw	r22, r20
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    3fda:	88 23       	and	r24, r24
    3fdc:	09 f0       	breq	.+2      	; 0x3fe0 <f_getfree+0x4a>
    3fde:	eb c0       	rjmp	.+470    	; 0x41b6 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    3fe0:	d2 01       	movw	r26, r4
    3fe2:	ed 91       	ld	r30, X+
    3fe4:	fc 91       	ld	r31, X
    3fe6:	26 85       	ldd	r18, Z+14	; 0x0e
    3fe8:	37 85       	ldd	r19, Z+15	; 0x0f
    3fea:	40 89       	ldd	r20, Z+16	; 0x10
    3fec:	51 89       	ldd	r21, Z+17	; 0x11
    3fee:	e2 8c       	ldd	r14, Z+26	; 0x1a
    3ff0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    3ff2:	04 8d       	ldd	r16, Z+28	; 0x1c
    3ff4:	15 8d       	ldd	r17, Z+29	; 0x1d
    3ff6:	d8 01       	movw	r26, r16
    3ff8:	c7 01       	movw	r24, r14
    3ffa:	02 97       	sbiw	r24, 0x02	; 2
    3ffc:	a1 09       	sbc	r26, r1
    3ffe:	b1 09       	sbc	r27, r1
    4000:	82 17       	cp	r24, r18
    4002:	93 07       	cpc	r25, r19
    4004:	a4 07       	cpc	r26, r20
    4006:	b5 07       	cpc	r27, r21
    4008:	38 f0       	brcs	.+14     	; 0x4018 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    400a:	ec 81       	ldd	r30, Y+4	; 0x04
    400c:	fd 81       	ldd	r31, Y+5	; 0x05
    400e:	20 83       	st	Z, r18
    4010:	31 83       	std	Z+1, r19	; 0x01
    4012:	42 83       	std	Z+2, r20	; 0x02
    4014:	53 83       	std	Z+3, r21	; 0x03
    4016:	ce c0       	rjmp	.+412    	; 0x41b4 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    4018:	30 80       	ld	r3, Z
    401a:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    401c:	23 2d       	mov	r18, r3
    401e:	21 30       	cpi	r18, 0x01	; 1
    4020:	e1 f5       	brne	.+120    	; 0x409a <f_getfree+0x104>
    4022:	aa 24       	eor	r10, r10
    4024:	bb 24       	eor	r11, r11
    4026:	65 01       	movw	r12, r10
    4028:	92 e0       	ldi	r25, 0x02	; 2
    402a:	e9 2e       	mov	r14, r25
    402c:	f1 2c       	mov	r15, r1
    402e:	01 2d       	mov	r16, r1
    4030:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    4032:	d2 01       	movw	r26, r4
    4034:	8d 91       	ld	r24, X+
    4036:	9c 91       	ld	r25, X
    4038:	b8 01       	movw	r22, r16
    403a:	a7 01       	movw	r20, r14
    403c:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    4040:	6f 3f       	cpi	r22, 0xFF	; 255
    4042:	bf ef       	ldi	r27, 0xFF	; 255
    4044:	7b 07       	cpc	r23, r27
    4046:	bf ef       	ldi	r27, 0xFF	; 255
    4048:	8b 07       	cpc	r24, r27
    404a:	bf ef       	ldi	r27, 0xFF	; 255
    404c:	9b 07       	cpc	r25, r27
    404e:	11 f4       	brne	.+4      	; 0x4054 <f_getfree+0xbe>
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	b1 c0       	rjmp	.+354    	; 0x41b6 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    4054:	61 30       	cpi	r22, 0x01	; 1
    4056:	71 05       	cpc	r23, r1
    4058:	81 05       	cpc	r24, r1
    405a:	91 05       	cpc	r25, r1
    405c:	11 f4       	brne	.+4      	; 0x4062 <f_getfree+0xcc>
    405e:	82 e0       	ldi	r24, 0x02	; 2
    4060:	aa c0       	rjmp	.+340    	; 0x41b6 <f_getfree+0x220>
			if (stat == 0) n++;
    4062:	61 15       	cp	r22, r1
    4064:	71 05       	cpc	r23, r1
    4066:	81 05       	cpc	r24, r1
    4068:	91 05       	cpc	r25, r1
    406a:	29 f4       	brne	.+10     	; 0x4076 <f_getfree+0xe0>
    406c:	08 94       	sec
    406e:	a1 1c       	adc	r10, r1
    4070:	b1 1c       	adc	r11, r1
    4072:	c1 1c       	adc	r12, r1
    4074:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    4076:	08 94       	sec
    4078:	e1 1c       	adc	r14, r1
    407a:	f1 1c       	adc	r15, r1
    407c:	01 1d       	adc	r16, r1
    407e:	11 1d       	adc	r17, r1
    4080:	d2 01       	movw	r26, r4
    4082:	ed 91       	ld	r30, X+
    4084:	fc 91       	ld	r31, X
    4086:	82 8d       	ldd	r24, Z+26	; 0x1a
    4088:	93 8d       	ldd	r25, Z+27	; 0x1b
    408a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    408c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    408e:	e8 16       	cp	r14, r24
    4090:	f9 06       	cpc	r15, r25
    4092:	0a 07       	cpc	r16, r26
    4094:	1b 07       	cpc	r17, r27
    4096:	68 f2       	brcs	.-102    	; 0x4032 <f_getfree+0x9c>
    4098:	7b c0       	rjmp	.+246    	; 0x4190 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    409a:	66 8c       	ldd	r6, Z+30	; 0x1e
    409c:	77 8c       	ldd	r7, Z+31	; 0x1f
    409e:	80 a0       	ldd	r8, Z+32	; 0x20
    40a0:	91 a0       	ldd	r9, Z+33	; 0x21
    40a2:	aa 24       	eor	r10, r10
    40a4:	bb 24       	eor	r11, r11
    40a6:	65 01       	movw	r12, r10
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	e0 e0       	ldi	r30, 0x00	; 0
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    40b0:	61 15       	cp	r22, r1
    40b2:	71 05       	cpc	r23, r1
    40b4:	a9 f4       	brne	.+42     	; 0x40e0 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    40b6:	f2 01       	movw	r30, r4
    40b8:	80 81       	ld	r24, Z
    40ba:	91 81       	ldd	r25, Z+1	; 0x01
    40bc:	b4 01       	movw	r22, r8
    40be:	a3 01       	movw	r20, r6
    40c0:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
				if (res != FR_OK)
    40c4:	88 23       	and	r24, r24
    40c6:	09 f0       	breq	.+2      	; 0x40ca <f_getfree+0x134>
    40c8:	76 c0       	rjmp	.+236    	; 0x41b6 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    40ca:	08 94       	sec
    40cc:	61 1c       	adc	r6, r1
    40ce:	71 1c       	adc	r7, r1
    40d0:	81 1c       	adc	r8, r1
    40d2:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    40d4:	d2 01       	movw	r26, r4
    40d6:	ed 91       	ld	r30, X+
    40d8:	fc 91       	ld	r31, X
    40da:	be 96       	adiw	r30, 0x2e	; 46
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	72 e0       	ldi	r23, 0x02	; 2
    40e0:	b1 81       	ldd	r27, Z+1	; 0x01
    40e2:	b8 87       	std	Y+8, r27	; 0x08
    40e4:	20 81       	ld	r18, Z
    40e6:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    40e8:	3b 81       	ldd	r19, Y+3	; 0x03
    40ea:	32 30       	cpi	r19, 0x02	; 2
    40ec:	99 f4       	brne	.+38     	; 0x4114 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    40ee:	bf 83       	std	Y+7, r27	; 0x07
    40f0:	1e 82       	std	Y+6, r1	; 0x06
    40f2:	82 2f       	mov	r24, r18
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	ae 81       	ldd	r26, Y+6	; 0x06
    40f8:	bf 81       	ldd	r27, Y+7	; 0x07
    40fa:	8a 2b       	or	r24, r26
    40fc:	9b 2b       	or	r25, r27
    40fe:	89 2b       	or	r24, r25
    4100:	29 f4       	brne	.+10     	; 0x410c <f_getfree+0x176>
    4102:	08 94       	sec
    4104:	a1 1c       	adc	r10, r1
    4106:	b1 1c       	adc	r11, r1
    4108:	c1 1c       	adc	r12, r1
    410a:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    410c:	32 96       	adiw	r30, 0x02	; 2
    410e:	62 50       	subi	r22, 0x02	; 2
    4110:	70 40       	sbci	r23, 0x00	; 0
    4112:	33 c0       	rjmp	.+102    	; 0x417a <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    4114:	23 81       	ldd	r18, Z+3	; 0x03
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	40 e0       	ldi	r20, 0x00	; 0
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	52 2f       	mov	r21, r18
    411e:	44 27       	eor	r20, r20
    4120:	33 27       	eor	r19, r19
    4122:	22 27       	eor	r18, r18
    4124:	82 81       	ldd	r24, Z+2	; 0x02
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	a0 e0       	ldi	r26, 0x00	; 0
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	dc 01       	movw	r26, r24
    412e:	99 27       	eor	r25, r25
    4130:	88 27       	eor	r24, r24
    4132:	28 2b       	or	r18, r24
    4134:	39 2b       	or	r19, r25
    4136:	4a 2b       	or	r20, r26
    4138:	5b 2b       	or	r21, r27
    413a:	39 84       	ldd	r3, Y+9	; 0x09
    413c:	83 2d       	mov	r24, r3
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	a0 e0       	ldi	r26, 0x00	; 0
    4142:	b0 e0       	ldi	r27, 0x00	; 0
    4144:	28 2b       	or	r18, r24
    4146:	39 2b       	or	r19, r25
    4148:	4a 2b       	or	r20, r26
    414a:	5b 2b       	or	r21, r27
    414c:	38 84       	ldd	r3, Y+8	; 0x08
    414e:	22 24       	eor	r2, r2
    4150:	c1 01       	movw	r24, r2
    4152:	a0 e0       	ldi	r26, 0x00	; 0
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	28 2b       	or	r18, r24
    4158:	39 2b       	or	r19, r25
    415a:	4a 2b       	or	r20, r26
    415c:	5b 2b       	or	r21, r27
    415e:	5f 70       	andi	r21, 0x0F	; 15
    4160:	21 15       	cp	r18, r1
    4162:	31 05       	cpc	r19, r1
    4164:	41 05       	cpc	r20, r1
    4166:	51 05       	cpc	r21, r1
    4168:	29 f4       	brne	.+10     	; 0x4174 <f_getfree+0x1de>
    416a:	08 94       	sec
    416c:	a1 1c       	adc	r10, r1
    416e:	b1 1c       	adc	r11, r1
    4170:	c1 1c       	adc	r12, r1
    4172:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    4174:	34 96       	adiw	r30, 0x04	; 4
    4176:	64 50       	subi	r22, 0x04	; 4
    4178:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    417a:	08 94       	sec
    417c:	e1 08       	sbc	r14, r1
    417e:	f1 08       	sbc	r15, r1
    4180:	01 09       	sbc	r16, r1
    4182:	11 09       	sbc	r17, r1
    4184:	e1 14       	cp	r14, r1
    4186:	f1 04       	cpc	r15, r1
    4188:	01 05       	cpc	r16, r1
    418a:	11 05       	cpc	r17, r1
    418c:	09 f0       	breq	.+2      	; 0x4190 <f_getfree+0x1fa>
    418e:	90 cf       	rjmp	.-224    	; 0x40b0 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    4190:	d2 01       	movw	r26, r4
    4192:	ed 91       	ld	r30, X+
    4194:	fc 91       	ld	r31, X
    4196:	a6 86       	std	Z+14, r10	; 0x0e
    4198:	b7 86       	std	Z+15, r11	; 0x0f
    419a:	c0 8a       	std	Z+16, r12	; 0x10
    419c:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    419e:	bb 81       	ldd	r27, Y+3	; 0x03
    41a0:	b3 30       	cpi	r27, 0x03	; 3
    41a2:	11 f4       	brne	.+4      	; 0x41a8 <f_getfree+0x212>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    41a8:	ec 81       	ldd	r30, Y+4	; 0x04
    41aa:	fd 81       	ldd	r31, Y+5	; 0x05
    41ac:	a0 82       	st	Z, r10
    41ae:	b1 82       	std	Z+1, r11	; 0x01
    41b0:	c2 82       	std	Z+2, r12	; 0x02
    41b2:	d3 82       	std	Z+3, r13	; 0x03
    41b4:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    41b6:	29 96       	adiw	r28, 0x09	; 9
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	de bf       	out	0x3e, r29	; 62
    41bc:	cf 91       	pop	r28
    41be:	df 91       	pop	r29
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	ff 90       	pop	r15
    41c6:	ef 90       	pop	r14
    41c8:	df 90       	pop	r13
    41ca:	cf 90       	pop	r12
    41cc:	bf 90       	pop	r11
    41ce:	af 90       	pop	r10
    41d0:	9f 90       	pop	r9
    41d2:	8f 90       	pop	r8
    41d4:	7f 90       	pop	r7
    41d6:	6f 90       	pop	r6
    41d8:	5f 90       	pop	r5
    41da:	4f 90       	pop	r4
    41dc:	3f 90       	pop	r3
    41de:	2f 90       	pop	r2
    41e0:	08 95       	ret

000041e2 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    41e2:	cf 92       	push	r12
    41e4:	df 92       	push	r13
    41e6:	ef 92       	push	r14
    41e8:	ff 92       	push	r15
    41ea:	0f 93       	push	r16
    41ec:	1f 93       	push	r17
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    41f4:	6a 81       	ldd	r22, Y+2	; 0x02
    41f6:	7b 81       	ldd	r23, Y+3	; 0x03
    41f8:	88 81       	ld	r24, Y
    41fa:	99 81       	ldd	r25, Y+1	; 0x01
    41fc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <validate>
    4200:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4202:	88 23       	and	r24, r24
    4204:	09 f0       	breq	.+2      	; 0x4208 <f_truncate+0x26>
    4206:	6e c0       	rjmp	.+220    	; 0x42e4 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    4208:	6c 81       	ldd	r22, Y+4	; 0x04
    420a:	67 ff       	sbrs	r22, 7
    420c:	02 c0       	rjmp	.+4      	; 0x4212 <f_truncate+0x30>
    420e:	12 e0       	ldi	r17, 0x02	; 2
    4210:	69 c0       	rjmp	.+210    	; 0x42e4 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    4212:	61 fd       	sbrc	r22, 1
    4214:	02 c0       	rjmp	.+4      	; 0x421a <f_truncate+0x38>
    4216:	17 e0       	ldi	r17, 0x07	; 7
    4218:	65 c0       	rjmp	.+202    	; 0x42e4 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    421a:	2e 81       	ldd	r18, Y+6	; 0x06
    421c:	3f 81       	ldd	r19, Y+7	; 0x07
    421e:	48 85       	ldd	r20, Y+8	; 0x08
    4220:	59 85       	ldd	r21, Y+9	; 0x09
    4222:	8a 85       	ldd	r24, Y+10	; 0x0a
    4224:	9b 85       	ldd	r25, Y+11	; 0x0b
    4226:	ac 85       	ldd	r26, Y+12	; 0x0c
    4228:	bd 85       	ldd	r27, Y+13	; 0x0d
    422a:	28 17       	cp	r18, r24
    422c:	39 07       	cpc	r19, r25
    422e:	4a 07       	cpc	r20, r26
    4230:	5b 07       	cpc	r21, r27
    4232:	08 f0       	brcs	.+2      	; 0x4236 <f_truncate+0x54>
    4234:	57 c0       	rjmp	.+174    	; 0x42e4 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    4236:	2a 87       	std	Y+10, r18	; 0x0a
    4238:	3b 87       	std	Y+11, r19	; 0x0b
    423a:	4c 87       	std	Y+12, r20	; 0x0c
    423c:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    423e:	60 62       	ori	r22, 0x20	; 32
    4240:	6c 83       	std	Y+4, r22	; 0x04
    4242:	88 81       	ld	r24, Y
    4244:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    4246:	21 15       	cp	r18, r1
    4248:	31 05       	cpc	r19, r1
    424a:	41 05       	cpc	r20, r1
    424c:	51 05       	cpc	r21, r1
    424e:	61 f4       	brne	.+24     	; 0x4268 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    4250:	4e 85       	ldd	r20, Y+14	; 0x0e
    4252:	5f 85       	ldd	r21, Y+15	; 0x0f
    4254:	68 89       	ldd	r22, Y+16	; 0x10
    4256:	79 89       	ldd	r23, Y+17	; 0x11
    4258:	0e 94 1c 0c 	call	0x1838	; 0x1838 <remove_chain>
    425c:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    425e:	1e 86       	std	Y+14, r1	; 0x0e
    4260:	1f 86       	std	Y+15, r1	; 0x0f
    4262:	18 8a       	std	Y+16, r1	; 0x10
    4264:	19 8a       	std	Y+17, r1	; 0x11
    4266:	39 c0       	rjmp	.+114    	; 0x42da <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    4268:	4a 89       	ldd	r20, Y+18	; 0x12
    426a:	5b 89       	ldd	r21, Y+19	; 0x13
    426c:	6c 89       	ldd	r22, Y+20	; 0x14
    426e:	7d 89       	ldd	r23, Y+21	; 0x15
    4270:	0e 94 46 0a 	call	0x148c	; 0x148c <get_fat>
    4274:	6b 01       	movw	r12, r22
    4276:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4278:	8f ef       	ldi	r24, 0xFF	; 255
    427a:	c8 16       	cp	r12, r24
    427c:	8f ef       	ldi	r24, 0xFF	; 255
    427e:	d8 06       	cpc	r13, r24
    4280:	8f ef       	ldi	r24, 0xFF	; 255
    4282:	e8 06       	cpc	r14, r24
    4284:	8f ef       	ldi	r24, 0xFF	; 255
    4286:	f8 06       	cpc	r15, r24
    4288:	b9 f1       	breq	.+110    	; 0x42f8 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	c8 16       	cp	r12, r24
    428e:	d1 04       	cpc	r13, r1
    4290:	e1 04       	cpc	r14, r1
    4292:	f1 04       	cpc	r15, r1
    4294:	11 f4       	brne	.+4      	; 0x429a <f_truncate+0xb8>
    4296:	12 e0       	ldi	r17, 0x02	; 2
    4298:	22 c0       	rjmp	.+68     	; 0x42de <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    429a:	e8 81       	ld	r30, Y
    429c:	f9 81       	ldd	r31, Y+1	; 0x01
    429e:	82 8d       	ldd	r24, Z+26	; 0x1a
    42a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    42a2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    42a4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    42a6:	c8 16       	cp	r12, r24
    42a8:	d9 06       	cpc	r13, r25
    42aa:	ea 06       	cpc	r14, r26
    42ac:	fb 06       	cpc	r15, r27
    42ae:	d0 f4       	brcc	.+52     	; 0x42e4 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    42b0:	4a 89       	ldd	r20, Y+18	; 0x12
    42b2:	5b 89       	ldd	r21, Y+19	; 0x13
    42b4:	6c 89       	ldd	r22, Y+20	; 0x14
    42b6:	7d 89       	ldd	r23, Y+21	; 0x15
    42b8:	cf 01       	movw	r24, r30
    42ba:	0f ef       	ldi	r16, 0xFF	; 255
    42bc:	1f ef       	ldi	r17, 0xFF	; 255
    42be:	2f ef       	ldi	r18, 0xFF	; 255
    42c0:	3f e0       	ldi	r19, 0x0F	; 15
    42c2:	0e 94 30 0b 	call	0x1660	; 0x1660 <put_fat>
    42c6:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    42c8:	88 23       	and	r24, r24
    42ca:	49 f4       	brne	.+18     	; 0x42de <f_truncate+0xfc>
    42cc:	88 81       	ld	r24, Y
    42ce:	99 81       	ldd	r25, Y+1	; 0x01
    42d0:	b7 01       	movw	r22, r14
    42d2:	a6 01       	movw	r20, r12
    42d4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <remove_chain>
    42d8:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    42da:	11 23       	and	r17, r17
    42dc:	19 f0       	breq	.+6      	; 0x42e4 <f_truncate+0x102>
    42de:	8c 81       	ldd	r24, Y+4	; 0x04
    42e0:	80 68       	ori	r24, 0x80	; 128
    42e2:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    42e4:	81 2f       	mov	r24, r17
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	1f 91       	pop	r17
    42ec:	0f 91       	pop	r16
    42ee:	ff 90       	pop	r15
    42f0:	ef 90       	pop	r14
    42f2:	df 90       	pop	r13
    42f4:	cf 90       	pop	r12
    42f6:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    42f8:	11 e0       	ldi	r17, 0x01	; 1
    42fa:	f1 cf       	rjmp	.-30     	; 0x42de <f_truncate+0xfc>

000042fc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    42fc:	cf 92       	push	r12
    42fe:	df 92       	push	r13
    4300:	ef 92       	push	r14
    4302:	ff 92       	push	r15
    4304:	0f 93       	push	r16
    4306:	1f 93       	push	r17
    4308:	df 93       	push	r29
    430a:	cf 93       	push	r28
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	ea 97       	sbiw	r28, 0x3a	; 58
    4312:	cd bf       	out	0x3d, r28	; 61
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	89 af       	std	Y+57, r24	; 0x39
    4318:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    431a:	4d e0       	ldi	r20, 0x0D	; 13
    431c:	c4 2e       	mov	r12, r20
    431e:	d1 2c       	mov	r13, r1
    4320:	cc 0e       	add	r12, r28
    4322:	dd 1e       	adc	r13, r29
    4324:	ce 01       	movw	r24, r28
    4326:	c9 96       	adiw	r24, 0x39	; 57
    4328:	b6 01       	movw	r22, r12
    432a:	41 e0       	ldi	r20, 0x01	; 1
    432c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4330:	88 23       	and	r24, r24
    4332:	09 f0       	breq	.+2      	; 0x4336 <f_unlink+0x3a>
    4334:	71 c0       	rjmp	.+226    	; 0x4418 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    4336:	ce 01       	movw	r24, r28
    4338:	01 96       	adiw	r24, 0x01	; 1
    433a:	89 a3       	std	Y+33, r24	; 0x21
    433c:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    433e:	69 ad       	ldd	r22, Y+57	; 0x39
    4340:	7a ad       	ldd	r23, Y+58	; 0x3a
    4342:	c6 01       	movw	r24, r12
    4344:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    4348:	88 23       	and	r24, r24
    434a:	09 f0       	breq	.+2      	; 0x434e <f_unlink+0x52>
    434c:	65 c0       	rjmp	.+202    	; 0x4418 <f_unlink+0x11c>

	dir = dj.dir;
    434e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4350:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    4352:	30 97       	sbiw	r30, 0x00	; 0
    4354:	11 f4       	brne	.+4      	; 0x435a <f_unlink+0x5e>
    4356:	86 e0       	ldi	r24, 0x06	; 6
    4358:	5f c0       	rjmp	.+190    	; 0x4418 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    435a:	83 85       	ldd	r24, Z+11	; 0x0b
    435c:	48 2f       	mov	r20, r24
    435e:	80 fd       	sbrc	r24, 0
    4360:	5a c0       	rjmp	.+180    	; 0x4416 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    4362:	95 89       	ldd	r25, Z+21	; 0x15
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	24 89       	ldd	r18, Z+20	; 0x14
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	82 2b       	or	r24, r18
    436c:	93 2b       	or	r25, r19
    436e:	a0 e0       	ldi	r26, 0x00	; 0
    4370:	b0 e0       	ldi	r27, 0x00	; 0
    4372:	8c 01       	movw	r16, r24
    4374:	ff 24       	eor	r15, r15
    4376:	ee 24       	eor	r14, r14
    4378:	93 8d       	ldd	r25, Z+27	; 0x1b
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	22 8d       	ldd	r18, Z+26	; 0x1a
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	82 2b       	or	r24, r18
    4382:	93 2b       	or	r25, r19
    4384:	a0 e0       	ldi	r26, 0x00	; 0
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e8 2a       	or	r14, r24
    438a:	f9 2a       	or	r15, r25
    438c:	0a 2b       	or	r16, r26
    438e:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    4390:	44 ff       	sbrs	r20, 4
    4392:	29 c0       	rjmp	.+82     	; 0x43e6 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	e8 16       	cp	r14, r24
    4398:	f1 04       	cpc	r15, r1
    439a:	01 05       	cpc	r16, r1
    439c:	11 05       	cpc	r17, r1
    439e:	10 f4       	brcc	.+4      	; 0x43a4 <f_unlink+0xa8>
    43a0:	82 e0       	ldi	r24, 0x02	; 2
    43a2:	3a c0       	rjmp	.+116    	; 0x4418 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    43a4:	de 01       	movw	r26, r28
    43a6:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    43a8:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    43aa:	9d 01       	movw	r18, r26
    43ac:	02 c0       	rjmp	.+4      	; 0x43b2 <f_unlink+0xb6>
    43ae:	81 91       	ld	r24, Z+
    43b0:	8d 93       	st	X+, r24
    43b2:	e2 17       	cp	r30, r18
    43b4:	f3 07       	cpc	r31, r19
    43b6:	d9 f7       	brne	.-10     	; 0x43ae <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    43b8:	e9 a6       	std	Y+41, r14	; 0x29
    43ba:	fa a6       	std	Y+42, r15	; 0x2a
    43bc:	0b a7       	std	Y+43, r16	; 0x2b
    43be:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    43c0:	23 e2       	ldi	r18, 0x23	; 35
    43c2:	c2 2e       	mov	r12, r18
    43c4:	d1 2c       	mov	r13, r1
    43c6:	cc 0e       	add	r12, r28
    43c8:	dd 1e       	adc	r13, r29
    43ca:	c6 01       	movw	r24, r12
    43cc:	62 e0       	ldi	r22, 0x02	; 2
    43ce:	70 e0       	ldi	r23, 0x00	; 0
    43d0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    43d4:	88 23       	and	r24, r24
    43d6:	01 f5       	brne	.+64     	; 0x4418 <f_unlink+0x11c>
		res = dir_read(&sdj);
    43d8:	c6 01       	movw	r24, r12
    43da:	0e 94 40 10 	call	0x2080	; 0x2080 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    43de:	88 23       	and	r24, r24
    43e0:	d1 f0       	breq	.+52     	; 0x4416 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    43e2:	84 30       	cpi	r24, 0x04	; 4
    43e4:	c9 f4       	brne	.+50     	; 0x4418 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    43e6:	ce 01       	movw	r24, r28
    43e8:	0d 96       	adiw	r24, 0x0d	; 13
    43ea:	0e 94 cb 10 	call	0x2196	; 0x2196 <dir_remove>
	if (res == FR_OK) {
    43ee:	88 23       	and	r24, r24
    43f0:	99 f4       	brne	.+38     	; 0x4418 <f_unlink+0x11c>
		if (dclst)
    43f2:	e1 14       	cp	r14, r1
    43f4:	f1 04       	cpc	r15, r1
    43f6:	01 05       	cpc	r16, r1
    43f8:	11 05       	cpc	r17, r1
    43fa:	41 f0       	breq	.+16     	; 0x440c <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    43fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4400:	b8 01       	movw	r22, r16
    4402:	a7 01       	movw	r20, r14
    4404:	0e 94 1c 0c 	call	0x1838	; 0x1838 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    4408:	88 23       	and	r24, r24
    440a:	31 f4       	brne	.+12     	; 0x4418 <f_unlink+0x11c>
    440c:	8d 85       	ldd	r24, Y+13	; 0x0d
    440e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4410:	0e 94 b7 09 	call	0x136e	; 0x136e <sync>
    4414:	01 c0       	rjmp	.+2      	; 0x4418 <f_unlink+0x11c>
    4416:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    4418:	ea 96       	adiw	r28, 0x3a	; 58
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	cf 91       	pop	r28
    4420:	df 91       	pop	r29
    4422:	1f 91       	pop	r17
    4424:	0f 91       	pop	r16
    4426:	ff 90       	pop	r15
    4428:	ef 90       	pop	r14
    442a:	df 90       	pop	r13
    442c:	cf 90       	pop	r12
    442e:	08 95       	ret

00004430 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    4430:	2f 92       	push	r2
    4432:	3f 92       	push	r3
    4434:	4f 92       	push	r4
    4436:	5f 92       	push	r5
    4438:	6f 92       	push	r6
    443a:	7f 92       	push	r7
    443c:	8f 92       	push	r8
    443e:	9f 92       	push	r9
    4440:	af 92       	push	r10
    4442:	bf 92       	push	r11
    4444:	cf 92       	push	r12
    4446:	df 92       	push	r13
    4448:	ef 92       	push	r14
    444a:	ff 92       	push	r15
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	df 93       	push	r29
    4452:	cf 93       	push	r28
    4454:	cd b7       	in	r28, 0x3d	; 61
    4456:	de b7       	in	r29, 0x3e	; 62
    4458:	a8 97       	sbiw	r28, 0x28	; 40
    445a:	cd bf       	out	0x3d, r28	; 61
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	8b a3       	std	Y+35, r24	; 0x23
    4460:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    4462:	3d e0       	ldi	r19, 0x0D	; 13
    4464:	e3 2e       	mov	r14, r19
    4466:	f1 2c       	mov	r15, r1
    4468:	ec 0e       	add	r14, r28
    446a:	fd 1e       	adc	r15, r29
    446c:	ce 01       	movw	r24, r28
    446e:	83 96       	adiw	r24, 0x23	; 35
    4470:	b7 01       	movw	r22, r14
    4472:	41 e0       	ldi	r20, 0x01	; 1
    4474:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
    4478:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    447a:	88 23       	and	r24, r24
    447c:	09 f0       	breq	.+2      	; 0x4480 <f_mkdir+0x50>
    447e:	38 c1       	rjmp	.+624    	; 0x46f0 <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    4480:	ce 01       	movw	r24, r28
    4482:	01 96       	adiw	r24, 0x01	; 1
    4484:	89 a3       	std	Y+33, r24	; 0x21
    4486:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4488:	6b a1       	ldd	r22, Y+35	; 0x23
    448a:	7c a1       	ldd	r23, Y+36	; 0x24
    448c:	c7 01       	movw	r24, r14
    448e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
    4492:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4494:	88 23       	and	r24, r24
    4496:	11 f4       	brne	.+4      	; 0x449c <f_mkdir+0x6c>
    4498:	18 e0       	ldi	r17, 0x08	; 8
    449a:	2a c1       	rjmp	.+596    	; 0x46f0 <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    449c:	84 30       	cpi	r24, 0x04	; 4
    449e:	09 f0       	breq	.+2      	; 0x44a2 <f_mkdir+0x72>
    44a0:	27 c1       	rjmp	.+590    	; 0x46f0 <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    44a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a6:	40 e0       	ldi	r20, 0x00	; 0
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	0e 94 97 0c 	call	0x192e	; 0x192e <create_chain>
    44b2:	4b 01       	movw	r8, r22
    44b4:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    44b6:	61 15       	cp	r22, r1
    44b8:	71 05       	cpc	r23, r1
    44ba:	81 05       	cpc	r24, r1
    44bc:	91 05       	cpc	r25, r1
    44be:	11 f4       	brne	.+4      	; 0x44c4 <f_mkdir+0x94>
    44c0:	17 e0       	ldi	r17, 0x07	; 7
    44c2:	16 c1       	rjmp	.+556    	; 0x46f0 <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    44c4:	61 30       	cpi	r22, 0x01	; 1
    44c6:	71 05       	cpc	r23, r1
    44c8:	81 05       	cpc	r24, r1
    44ca:	91 05       	cpc	r25, r1
    44cc:	11 f4       	brne	.+4      	; 0x44d2 <f_mkdir+0xa2>
    44ce:	12 e0       	ldi	r17, 0x02	; 2
    44d0:	0f c1       	rjmp	.+542    	; 0x46f0 <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    44d2:	6f 3f       	cpi	r22, 0xFF	; 255
    44d4:	3f ef       	ldi	r19, 0xFF	; 255
    44d6:	73 07       	cpc	r23, r19
    44d8:	3f ef       	ldi	r19, 0xFF	; 255
    44da:	83 07       	cpc	r24, r19
    44dc:	3f ef       	ldi	r19, 0xFF	; 255
    44de:	93 07       	cpc	r25, r19
    44e0:	09 f4       	brne	.+2      	; 0x44e4 <f_mkdir+0xb4>
    44e2:	1d c1       	rjmp	.+570    	; 0x471e <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    44e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e8:	40 e0       	ldi	r20, 0x00	; 0
    44ea:	50 e0       	ldi	r21, 0x00	; 0
    44ec:	60 e0       	ldi	r22, 0x00	; 0
    44ee:	70 e0       	ldi	r23, 0x00	; 0
    44f0:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    44f4:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44f6:	88 23       	and	r24, r24
    44f8:	09 f0       	breq	.+2      	; 0x44fc <f_mkdir+0xcc>
    44fa:	fa c0       	rjmp	.+500    	; 0x46f0 <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    44fc:	0d 85       	ldd	r16, Y+13	; 0x0d
    44fe:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4500:	2e ef       	ldi	r18, 0xFE	; 254
    4502:	c2 2e       	mov	r12, r18
    4504:	2f ef       	ldi	r18, 0xFF	; 255
    4506:	d2 2e       	mov	r13, r18
    4508:	2f ef       	ldi	r18, 0xFF	; 255
    450a:	e2 2e       	mov	r14, r18
    450c:	2f ef       	ldi	r18, 0xFF	; 255
    450e:	f2 2e       	mov	r15, r18
    4510:	c8 0c       	add	r12, r8
    4512:	d9 1c       	adc	r13, r9
    4514:	ea 1c       	adc	r14, r10
    4516:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4518:	f8 01       	movw	r30, r16
    451a:	82 8d       	ldd	r24, Z+26	; 0x1a
    451c:	93 8d       	ldd	r25, Z+27	; 0x1b
    451e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4520:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4522:	02 97       	sbiw	r24, 0x02	; 2
    4524:	a1 09       	sbc	r26, r1
    4526:	b1 09       	sbc	r27, r1
    4528:	c8 16       	cp	r12, r24
    452a:	d9 06       	cpc	r13, r25
    452c:	ea 06       	cpc	r14, r26
    452e:	fb 06       	cpc	r15, r27
    4530:	20 f0       	brcs	.+8      	; 0x453a <f_mkdir+0x10a>
    4532:	44 24       	eor	r4, r4
    4534:	55 24       	eor	r5, r5
    4536:	32 01       	movw	r6, r4
    4538:	14 c0       	rjmp	.+40     	; 0x4562 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    453a:	f8 01       	movw	r30, r16
    453c:	22 81       	ldd	r18, Z+2	; 0x02
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	40 e0       	ldi	r20, 0x00	; 0
    4542:	50 e0       	ldi	r21, 0x00	; 0
    4544:	c7 01       	movw	r24, r14
    4546:	b6 01       	movw	r22, r12
    4548:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    454c:	2b 01       	movw	r4, r22
    454e:	3c 01       	movw	r6, r24
    4550:	f8 01       	movw	r30, r16
    4552:	86 a1       	ldd	r24, Z+38	; 0x26
    4554:	97 a1       	ldd	r25, Z+39	; 0x27
    4556:	a0 a5       	ldd	r26, Z+40	; 0x28
    4558:	b1 a5       	ldd	r27, Z+41	; 0x29
    455a:	48 0e       	add	r4, r24
    455c:	59 1e       	adc	r5, r25
    455e:	6a 1e       	adc	r6, r26
    4560:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    4562:	9e e2       	ldi	r25, 0x2E	; 46
    4564:	29 2e       	mov	r2, r25
    4566:	31 2c       	mov	r3, r1
    4568:	20 0e       	add	r2, r16
    456a:	31 1e       	adc	r3, r17
    456c:	f1 01       	movw	r30, r2
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	92 e0       	ldi	r25, 0x02	; 2
    4572:	01 c0       	rjmp	.+2      	; 0x4576 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4574:	11 92       	st	Z+, r1
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	2f ef       	ldi	r18, 0xFF	; 255
    457a:	8f 3f       	cpi	r24, 0xFF	; 255
    457c:	92 07       	cpc	r25, r18
    457e:	d1 f7       	brne	.-12     	; 0x4574 <f_mkdir+0x144>
    4580:	f1 01       	movw	r30, r2
    4582:	8b e0       	ldi	r24, 0x0B	; 11
    4584:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    4586:	20 e2       	ldi	r18, 0x20	; 32
    4588:	01 c0       	rjmp	.+2      	; 0x458c <f_mkdir+0x15c>
    458a:	21 93       	st	Z+, r18
    458c:	01 97       	sbiw	r24, 0x01	; 1
    458e:	3f ef       	ldi	r19, 0xFF	; 255
    4590:	8f 3f       	cpi	r24, 0xFF	; 255
    4592:	93 07       	cpc	r25, r19
    4594:	d1 f7       	brne	.-12     	; 0x458a <f_mkdir+0x15a>
    4596:	8e e2       	ldi	r24, 0x2E	; 46
    4598:	f8 01       	movw	r30, r16
    459a:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    459c:	80 e1       	ldi	r24, 0x10	; 16
    459e:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    45a0:	0c 5b       	subi	r16, 0xBC	; 188
    45a2:	1f 4f       	sbci	r17, 0xFF	; 255
    45a4:	f8 01       	movw	r30, r16
    45a6:	11 92       	st	Z+, r1
    45a8:	11 92       	st	Z+, r1
    45aa:	11 92       	st	Z+, r1
    45ac:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    45ae:	88 a6       	std	Y+40, r8	; 0x28
    45b0:	81 92       	st	Z+, r8
    45b2:	8f 01       	movw	r16, r30
    45b4:	89 2d       	mov	r24, r9
    45b6:	99 27       	eor	r25, r25
    45b8:	8f a3       	std	Y+39, r24	; 0x27
    45ba:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    45bc:	c5 01       	movw	r24, r10
    45be:	aa 27       	eor	r26, r26
    45c0:	bb 27       	eor	r27, r27
    45c2:	8e a3       	std	Y+38, r24	; 0x26
    45c4:	07 50       	subi	r16, 0x07	; 7
    45c6:	10 40       	sbci	r17, 0x00	; 0
    45c8:	f8 01       	movw	r30, r16
    45ca:	81 93       	st	Z+, r24
    45cc:	8f 01       	movw	r16, r30
    45ce:	89 2f       	mov	r24, r25
    45d0:	99 27       	eor	r25, r25
    45d2:	8d a3       	std	Y+37, r24	; 0x25
    45d4:	80 83       	st	Z, r24
    45d6:	03 54       	subi	r16, 0x43	; 67
    45d8:	10 40       	sbci	r17, 0x00	; 0
    45da:	f1 01       	movw	r30, r2
    45dc:	20 e2       	ldi	r18, 0x20	; 32
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	03 c0       	rjmp	.+6      	; 0x45e8 <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    45e2:	80 81       	ld	r24, Z
    45e4:	80 a3       	std	Z+32, r24	; 0x20
    45e6:	31 96       	adiw	r30, 0x01	; 1
    45e8:	21 50       	subi	r18, 0x01	; 1
    45ea:	30 40       	sbci	r19, 0x00	; 0
    45ec:	8f ef       	ldi	r24, 0xFF	; 255
    45ee:	2f 3f       	cpi	r18, 0xFF	; 255
    45f0:	38 07       	cpc	r19, r24
    45f2:	b9 f7       	brne	.-18     	; 0x45e2 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    45f4:	01 5b       	subi	r16, 0xB1	; 177
    45f6:	1f 4f       	sbci	r17, 0xFF	; 255
    45f8:	8e e2       	ldi	r24, 0x2E	; 46
    45fa:	f8 01       	movw	r30, r16
    45fc:	80 83       	st	Z, r24
    45fe:	0f 54       	subi	r16, 0x4F	; 79
    4600:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4602:	2b 89       	ldd	r18, Y+19	; 0x13
    4604:	3c 89       	ldd	r19, Y+20	; 0x14
    4606:	4d 89       	ldd	r20, Y+21	; 0x15
    4608:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    460a:	ed 85       	ldd	r30, Y+13	; 0x0d
    460c:	fe 85       	ldd	r31, Y+14	; 0x0e
    460e:	80 81       	ld	r24, Z
    4610:	83 30       	cpi	r24, 0x03	; 3
    4612:	69 f4       	brne	.+26     	; 0x462e <f_mkdir+0x1fe>
    4614:	82 a1       	ldd	r24, Z+34	; 0x22
    4616:	93 a1       	ldd	r25, Z+35	; 0x23
    4618:	a4 a1       	ldd	r26, Z+36	; 0x24
    461a:	b5 a1       	ldd	r27, Z+37	; 0x25
    461c:	28 17       	cp	r18, r24
    461e:	39 07       	cpc	r19, r25
    4620:	4a 07       	cpc	r20, r26
    4622:	5b 07       	cpc	r21, r27
    4624:	21 f4       	brne	.+8      	; 0x462e <f_mkdir+0x1fe>
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    462e:	08 59       	subi	r16, 0x98	; 152
    4630:	1f 4f       	sbci	r17, 0xFF	; 255
    4632:	f8 01       	movw	r30, r16
    4634:	21 93       	st	Z+, r18
    4636:	8f 01       	movw	r16, r30
    4638:	83 2f       	mov	r24, r19
    463a:	99 27       	eor	r25, r25
    463c:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    463e:	ca 01       	movw	r24, r20
    4640:	aa 27       	eor	r26, r26
    4642:	bb 27       	eor	r27, r27
    4644:	07 50       	subi	r16, 0x07	; 7
    4646:	10 40       	sbci	r17, 0x00	; 0
    4648:	f8 01       	movw	r30, r16
    464a:	81 93       	st	Z+, r24
    464c:	89 2f       	mov	r24, r25
    464e:	99 27       	eor	r25, r25
    4650:	80 83       	st	Z, r24
    4652:	73 01       	movw	r14, r6
    4654:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    4656:	01 e0       	ldi	r16, 0x01	; 1
    4658:	1e c0       	rjmp	.+60     	; 0x4696 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    465a:	c2 a6       	std	Z+42, r12	; 0x2a
    465c:	d3 a6       	std	Z+43, r13	; 0x2b
    465e:	e4 a6       	std	Z+44, r14	; 0x2c
    4660:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    4662:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    4664:	cf 01       	movw	r24, r30
    4666:	40 e0       	ldi	r20, 0x00	; 0
    4668:	50 e0       	ldi	r21, 0x00	; 0
    466a:	60 e0       	ldi	r22, 0x00	; 0
    466c:	70 e0       	ldi	r23, 0x00	; 0
    466e:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
    4672:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    4674:	88 23       	and	r24, r24
    4676:	e1 f5       	brne	.+120    	; 0x46f0 <f_mkdir+0x2c0>
    4678:	f1 01       	movw	r30, r2
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	92 e0       	ldi	r25, 0x02	; 2
    467e:	01 c0       	rjmp	.+2      	; 0x4682 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4680:	11 92       	st	Z+, r1
    4682:	01 97       	sbiw	r24, 0x01	; 1
    4684:	2f ef       	ldi	r18, 0xFF	; 255
    4686:	8f 3f       	cpi	r24, 0xFF	; 255
    4688:	92 07       	cpc	r25, r18
    468a:	d1 f7       	brne	.-12     	; 0x4680 <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    468c:	08 94       	sec
    468e:	c1 1c       	adc	r12, r1
    4690:	d1 1c       	adc	r13, r1
    4692:	e1 1c       	adc	r14, r1
    4694:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4696:	ed 85       	ldd	r30, Y+13	; 0x0d
    4698:	fe 85       	ldd	r31, Y+14	; 0x0e
    469a:	9c 2d       	mov	r25, r12
    469c:	94 19       	sub	r25, r4
    469e:	82 81       	ldd	r24, Z+2	; 0x02
    46a0:	98 17       	cp	r25, r24
    46a2:	d8 f2       	brcs	.-74     	; 0x465a <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    46a4:	ce 01       	movw	r24, r28
    46a6:	0d 96       	adiw	r24, 0x0d	; 13
    46a8:	0e 94 74 10 	call	0x20e8	; 0x20e8 <dir_register>
    46ac:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    46ae:	88 23       	and	r24, r24
    46b0:	39 f0       	breq	.+14     	; 0x46c0 <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    46b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46b6:	b5 01       	movw	r22, r10
    46b8:	a4 01       	movw	r20, r8
    46ba:	0e 94 1c 0c 	call	0x1838	; 0x1838 <remove_chain>
    46be:	18 c0       	rjmp	.+48     	; 0x46f0 <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    46c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    46c2:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    46c4:	80 e1       	ldi	r24, 0x10	; 16
    46c6:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    46c8:	16 8a       	std	Z+22, r1	; 0x16
    46ca:	17 8a       	std	Z+23, r1	; 0x17
    46cc:	10 8e       	std	Z+24, r1	; 0x18
    46ce:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    46d0:	38 a5       	ldd	r19, Y+40	; 0x28
    46d2:	32 8f       	std	Z+26, r19	; 0x1a
    46d4:	8f a1       	ldd	r24, Y+39	; 0x27
    46d6:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    46d8:	2e a1       	ldd	r18, Y+38	; 0x26
    46da:	24 8b       	std	Z+20, r18	; 0x14
    46dc:	3d a1       	ldd	r19, Y+37	; 0x25
    46de:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    46e0:	ed 85       	ldd	r30, Y+13	; 0x0d
    46e2:	fe 85       	ldd	r31, Y+14	; 0x0e
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    46e8:	cf 01       	movw	r24, r30
    46ea:	0e 94 b7 09 	call	0x136e	; 0x136e <sync>
    46ee:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    46f0:	81 2f       	mov	r24, r17
    46f2:	a8 96       	adiw	r28, 0x28	; 40
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	1f 91       	pop	r17
    46fe:	0f 91       	pop	r16
    4700:	ff 90       	pop	r15
    4702:	ef 90       	pop	r14
    4704:	df 90       	pop	r13
    4706:	cf 90       	pop	r12
    4708:	bf 90       	pop	r11
    470a:	af 90       	pop	r10
    470c:	9f 90       	pop	r9
    470e:	8f 90       	pop	r8
    4710:	7f 90       	pop	r7
    4712:	6f 90       	pop	r6
    4714:	5f 90       	pop	r5
    4716:	4f 90       	pop	r4
    4718:	3f 90       	pop	r3
    471a:	2f 90       	pop	r2
    471c:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    471e:	11 e0       	ldi	r17, 0x01	; 1
    4720:	e7 cf       	rjmp	.-50     	; 0x46f0 <f_mkdir+0x2c0>

00004722 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4722:	ef 92       	push	r14
    4724:	ff 92       	push	r15
    4726:	0f 93       	push	r16
    4728:	1f 93       	push	r17
    472a:	df 93       	push	r29
    472c:	cf 93       	push	r28
    472e:	cd b7       	in	r28, 0x3d	; 61
    4730:	de b7       	in	r29, 0x3e	; 62
    4732:	a4 97       	sbiw	r28, 0x24	; 36
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	8b a3       	std	Y+35, r24	; 0x23
    473a:	9c a3       	std	Y+36, r25	; 0x24
    473c:	e6 2e       	mov	r14, r22
    473e:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4740:	8e 01       	movw	r16, r28
    4742:	03 5f       	subi	r16, 0xF3	; 243
    4744:	1f 4f       	sbci	r17, 0xFF	; 255
    4746:	ce 01       	movw	r24, r28
    4748:	83 96       	adiw	r24, 0x23	; 35
    474a:	b8 01       	movw	r22, r16
    474c:	41 e0       	ldi	r20, 0x01	; 1
    474e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
	if (res == FR_OK) {
    4752:	88 23       	and	r24, r24
    4754:	09 f5       	brne	.+66     	; 0x4798 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    4756:	ce 01       	movw	r24, r28
    4758:	01 96       	adiw	r24, 0x01	; 1
    475a:	89 a3       	std	Y+33, r24	; 0x21
    475c:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    475e:	6b a1       	ldd	r22, Y+35	; 0x23
    4760:	7c a1       	ldd	r23, Y+36	; 0x24
    4762:	c8 01       	movw	r24, r16
    4764:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4768:	88 23       	and	r24, r24
    476a:	b1 f4       	brne	.+44     	; 0x4798 <f_chmod+0x76>
			dir = dj.dir;
    476c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    476e:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    4770:	30 97       	sbiw	r30, 0x00	; 0
    4772:	11 f4       	brne	.+4      	; 0x4778 <f_chmod+0x56>
    4774:	86 e0       	ldi	r24, 0x06	; 6
    4776:	10 c0       	rjmp	.+32     	; 0x4798 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4778:	9f 2d       	mov	r25, r15
    477a:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    477c:	89 2f       	mov	r24, r25
    477e:	80 95       	com	r24
    4780:	23 85       	ldd	r18, Z+11	; 0x0b
    4782:	82 23       	and	r24, r18
    4784:	9e 21       	and	r25, r14
    4786:	89 2b       	or	r24, r25
    4788:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    478a:	ed 85       	ldd	r30, Y+13	; 0x0d
    478c:	fe 85       	ldd	r31, Y+14	; 0x0e
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4792:	cf 01       	movw	r24, r30
    4794:	0e 94 b7 09 	call	0x136e	; 0x136e <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4798:	a4 96       	adiw	r28, 0x24	; 36
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	de bf       	out	0x3e, r29	; 62
    479e:	cf 91       	pop	r28
    47a0:	df 91       	pop	r29
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	ff 90       	pop	r15
    47a8:	ef 90       	pop	r14
    47aa:	08 95       	ret

000047ac <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    47ac:	ef 92       	push	r14
    47ae:	ff 92       	push	r15
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62
    47bc:	a4 97       	sbiw	r28, 0x24	; 36
    47be:	cd bf       	out	0x3d, r28	; 61
    47c0:	de bf       	out	0x3e, r29	; 62
    47c2:	8b a3       	std	Y+35, r24	; 0x23
    47c4:	9c a3       	std	Y+36, r25	; 0x24
    47c6:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    47c8:	4d e0       	ldi	r20, 0x0D	; 13
    47ca:	e4 2e       	mov	r14, r20
    47cc:	f1 2c       	mov	r15, r1
    47ce:	ec 0e       	add	r14, r28
    47d0:	fd 1e       	adc	r15, r29
    47d2:	ce 01       	movw	r24, r28
    47d4:	83 96       	adiw	r24, 0x23	; 35
    47d6:	b7 01       	movw	r22, r14
    47d8:	41 e0       	ldi	r20, 0x01	; 1
    47da:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
	if (res == FR_OK) {
    47de:	88 23       	and	r24, r24
    47e0:	41 f5       	brne	.+80     	; 0x4832 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    47e2:	ce 01       	movw	r24, r28
    47e4:	01 96       	adiw	r24, 0x01	; 1
    47e6:	89 a3       	std	Y+33, r24	; 0x21
    47e8:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    47ea:	6b a1       	ldd	r22, Y+35	; 0x23
    47ec:	7c a1       	ldd	r23, Y+36	; 0x24
    47ee:	c7 01       	movw	r24, r14
    47f0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    47f4:	88 23       	and	r24, r24
    47f6:	e9 f4       	brne	.+58     	; 0x4832 <f_utime+0x86>
			dir = dj.dir;
    47f8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47fa:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    47fc:	30 97       	sbiw	r30, 0x00	; 0
    47fe:	11 f4       	brne	.+4      	; 0x4804 <f_utime+0x58>
    4800:	86 e0       	ldi	r24, 0x06	; 6
    4802:	17 c0       	rjmp	.+46     	; 0x4832 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4804:	d8 01       	movw	r26, r16
    4806:	16 96       	adiw	r26, 0x06	; 6
    4808:	8c 91       	ld	r24, X
    480a:	16 97       	sbiw	r26, 0x06	; 6
    480c:	86 8b       	std	Z+22, r24	; 0x16
    480e:	17 96       	adiw	r26, 0x07	; 7
    4810:	8c 91       	ld	r24, X
    4812:	17 97       	sbiw	r26, 0x07	; 7
    4814:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4816:	14 96       	adiw	r26, 0x04	; 4
    4818:	8c 91       	ld	r24, X
    481a:	14 97       	sbiw	r26, 0x04	; 4
    481c:	80 8f       	std	Z+24, r24	; 0x18
    481e:	15 96       	adiw	r26, 0x05	; 5
    4820:	8c 91       	ld	r24, X
    4822:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    4824:	ed 85       	ldd	r30, Y+13	; 0x0d
    4826:	fe 85       	ldd	r31, Y+14	; 0x0e
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    482c:	cf 01       	movw	r24, r30
    482e:	0e 94 b7 09 	call	0x136e	; 0x136e <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4832:	a4 96       	adiw	r28, 0x24	; 36
    4834:	cd bf       	out	0x3d, r28	; 61
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	cf 91       	pop	r28
    483a:	df 91       	pop	r29
    483c:	1f 91       	pop	r17
    483e:	0f 91       	pop	r16
    4840:	ff 90       	pop	r15
    4842:	ef 90       	pop	r14
    4844:	08 95       	ret

00004846 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    4846:	cf 92       	push	r12
    4848:	df 92       	push	r13
    484a:	ef 92       	push	r14
    484c:	ff 92       	push	r15
    484e:	0f 93       	push	r16
    4850:	1f 93       	push	r17
    4852:	df 93       	push	r29
    4854:	cf 93       	push	r28
    4856:	cd b7       	in	r28, 0x3d	; 61
    4858:	de b7       	in	r29, 0x3e	; 62
    485a:	cf 54       	subi	r28, 0x4F	; 79
    485c:	d0 40       	sbci	r29, 0x00	; 0
    485e:	cd bf       	out	0x3d, r28	; 61
    4860:	de bf       	out	0x3e, r29	; 62
    4862:	8e 01       	movw	r16, r28
    4864:	02 5b       	subi	r16, 0xB2	; 178
    4866:	1f 4f       	sbci	r17, 0xFF	; 255
    4868:	d8 01       	movw	r26, r16
    486a:	8d 93       	st	X+, r24
    486c:	9c 93       	st	X, r25
    486e:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    4870:	ce 01       	movw	r24, r28
    4872:	01 96       	adiw	r24, 0x01	; 1
    4874:	8e ab       	std	Y+54, r24	; 0x36
    4876:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    4878:	a2 e2       	ldi	r26, 0x22	; 34
    487a:	ea 2e       	mov	r14, r26
    487c:	f1 2c       	mov	r15, r1
    487e:	ec 0e       	add	r14, r28
    4880:	fd 1e       	adc	r15, r29
    4882:	c8 01       	movw	r24, r16
    4884:	b7 01       	movw	r22, r14
    4886:	41 e0       	ldi	r20, 0x01	; 1
    4888:	0e 94 51 13 	call	0x26a2	; 0x26a2 <chk_mounted>
	if (res == FR_OK) {
    488c:	88 23       	and	r24, r24
    488e:	09 f0       	breq	.+2      	; 0x4892 <f_rename+0x4c>
    4890:	f4 c0       	rjmp	.+488    	; 0x4a7a <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4892:	8a a1       	ldd	r24, Y+34	; 0x22
    4894:	9b a1       	ldd	r25, Y+35	; 0x23
    4896:	88 af       	std	Y+56, r24	; 0x38
    4898:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    489a:	f8 01       	movw	r30, r16
    489c:	60 81       	ld	r22, Z
    489e:	71 81       	ldd	r23, Z+1	; 0x01
    48a0:	c7 01       	movw	r24, r14
    48a2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    48a6:	88 23       	and	r24, r24
    48a8:	09 f0       	breq	.+2      	; 0x48ac <f_rename+0x66>
    48aa:	e7 c0       	rjmp	.+462    	; 0x4a7a <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    48ac:	8c a9       	ldd	r24, Y+52	; 0x34
    48ae:	9d a9       	ldd	r25, Y+53	; 0x35
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	11 f4       	brne	.+4      	; 0x48b8 <f_rename+0x72>
    48b4:	84 e0       	ldi	r24, 0x04	; 4
    48b6:	e1 c0       	rjmp	.+450    	; 0x4a7a <f_rename+0x234>
    48b8:	dc 01       	movw	r26, r24
    48ba:	fe 01       	movw	r30, r28
    48bc:	3d 96       	adiw	r30, 0x0d	; 13
    48be:	04 c0       	rjmp	.+8      	; 0x48c8 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    48c0:	1a 96       	adiw	r26, 0x0a	; 10
    48c2:	8c 91       	ld	r24, X
    48c4:	1a 97       	sbiw	r26, 0x0a	; 10
    48c6:	81 93       	st	Z+, r24
    48c8:	11 96       	adiw	r26, 0x01	; 1
    48ca:	ee 15       	cp	r30, r14
    48cc:	ff 05       	cpc	r31, r15
    48ce:	c1 f7       	brne	.-16     	; 0x48c0 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    48d0:	de 01       	movw	r26, r28
    48d2:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    48d4:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    48d6:	9d 01       	movw	r18, r26
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <f_rename+0x98>
    48da:	81 91       	ld	r24, Z+
    48dc:	8d 93       	st	X+, r24
    48de:	e2 17       	cp	r30, r18
    48e0:	f3 07       	cpc	r31, r19
    48e2:	d9 f7       	brne	.-10     	; 0x48da <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    48e4:	8e 01       	movw	r16, r28
    48e6:	08 5c       	subi	r16, 0xC8	; 200
    48e8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ea:	c8 01       	movw	r24, r16
    48ec:	b6 01       	movw	r22, r12
    48ee:	0e 94 78 11 	call	0x22f0	; 0x22f0 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    48f2:	88 23       	and	r24, r24
    48f4:	11 f4       	brne	.+4      	; 0x48fa <f_rename+0xb4>
    48f6:	88 e0       	ldi	r24, 0x08	; 8
    48f8:	c0 c0       	rjmp	.+384    	; 0x4a7a <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    48fa:	84 30       	cpi	r24, 0x04	; 4
    48fc:	09 f0       	breq	.+2      	; 0x4900 <f_rename+0xba>
    48fe:	bd c0       	rjmp	.+378    	; 0x4a7a <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    4900:	c8 01       	movw	r24, r16
    4902:	0e 94 74 10 	call	0x20e8	; 0x20e8 <dir_register>
		if (res == FR_OK) {
    4906:	88 23       	and	r24, r24
    4908:	09 f0       	breq	.+2      	; 0x490c <f_rename+0xc6>
    490a:	b7 c0       	rjmp	.+366    	; 0x4a7a <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    490c:	fe 01       	movw	r30, r28
    490e:	e6 5b       	subi	r30, 0xB6	; 182
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	40 81       	ld	r20, Z
    4914:	51 81       	ldd	r21, Z+1	; 0x01
    4916:	da 01       	movw	r26, r20
    4918:	fe 01       	movw	r30, r28
    491a:	3f 96       	adiw	r30, 0x0f	; 15
    491c:	04 c0       	rjmp	.+8      	; 0x4926 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    491e:	81 91       	ld	r24, Z+
    4920:	1c 96       	adiw	r26, 0x0c	; 12
    4922:	8c 93       	st	X, r24
    4924:	1c 97       	sbiw	r26, 0x0c	; 12
    4926:	11 96       	adiw	r26, 0x01	; 1
    4928:	ee 15       	cp	r30, r14
    492a:	ff 05       	cpc	r31, r15
    492c:	c1 f7       	brne	.-16     	; 0x491e <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    492e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4930:	80 62       	ori	r24, 0x20	; 32
    4932:	da 01       	movw	r26, r20
    4934:	1b 96       	adiw	r26, 0x0b	; 11
    4936:	8c 93       	st	X, r24
    4938:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    493a:	ea a1       	ldd	r30, Y+34	; 0x22
    493c:	fb a1       	ldd	r31, Y+35	; 0x23
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4942:	1b 96       	adiw	r26, 0x0b	; 11
    4944:	8c 91       	ld	r24, X
    4946:	1b 97       	sbiw	r26, 0x0b	; 11
    4948:	84 ff       	sbrs	r24, 4
    494a:	8b c0       	rjmp	.+278    	; 0x4a62 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    494c:	c8 ac       	ldd	r12, Y+56	; 0x38
    494e:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4950:	5a 96       	adiw	r26, 0x1a	; 26
    4952:	2c 91       	ld	r18, X
    4954:	5a 97       	sbiw	r26, 0x1a	; 26
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	54 96       	adiw	r26, 0x14	; 20
    495a:	8c 91       	ld	r24, X
    495c:	54 97       	sbiw	r26, 0x14	; 20
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	28 2b       	or	r18, r24
    4962:	39 2b       	or	r19, r25
    4964:	55 96       	adiw	r26, 0x15	; 21
    4966:	9c 91       	ld	r25, X
    4968:	55 97       	sbiw	r26, 0x15	; 21
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	28 2b       	or	r18, r24
    496e:	39 2b       	or	r19, r25
    4970:	5b 96       	adiw	r26, 0x1b	; 27
    4972:	9c 91       	ld	r25, X
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	28 2b       	or	r18, r24
    4978:	39 2b       	or	r19, r25
    497a:	79 01       	movw	r14, r18
    497c:	00 e0       	ldi	r16, 0x00	; 0
    497e:	10 e0       	ldi	r17, 0x00	; 0
    4980:	8e ef       	ldi	r24, 0xFE	; 254
    4982:	9f ef       	ldi	r25, 0xFF	; 255
    4984:	af ef       	ldi	r26, 0xFF	; 255
    4986:	bf ef       	ldi	r27, 0xFF	; 255
    4988:	e8 0e       	add	r14, r24
    498a:	f9 1e       	adc	r15, r25
    498c:	0a 1f       	adc	r16, r26
    498e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4990:	f6 01       	movw	r30, r12
    4992:	82 8d       	ldd	r24, Z+26	; 0x1a
    4994:	93 8d       	ldd	r25, Z+27	; 0x1b
    4996:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4998:	b5 8d       	ldd	r27, Z+29	; 0x1d
    499a:	02 97       	sbiw	r24, 0x02	; 2
    499c:	a1 09       	sbc	r26, r1
    499e:	b1 09       	sbc	r27, r1
    49a0:	e8 16       	cp	r14, r24
    49a2:	f9 06       	cpc	r15, r25
    49a4:	0a 07       	cpc	r16, r26
    49a6:	1b 07       	cpc	r17, r27
    49a8:	08 f0       	brcs	.+2      	; 0x49ac <f_rename+0x166>
    49aa:	66 c0       	rjmp	.+204    	; 0x4a78 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    49ac:	22 81       	ldd	r18, Z+2	; 0x02
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	40 e0       	ldi	r20, 0x00	; 0
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	c8 01       	movw	r24, r16
    49b6:	b7 01       	movw	r22, r14
    49b8:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    49bc:	ab 01       	movw	r20, r22
    49be:	bc 01       	movw	r22, r24
    49c0:	f6 01       	movw	r30, r12
    49c2:	86 a1       	ldd	r24, Z+38	; 0x26
    49c4:	97 a1       	ldd	r25, Z+39	; 0x27
    49c6:	a0 a5       	ldd	r26, Z+40	; 0x28
    49c8:	b1 a5       	ldd	r27, Z+41	; 0x29
    49ca:	48 0f       	add	r20, r24
    49cc:	59 1f       	adc	r21, r25
    49ce:	6a 1f       	adc	r22, r26
    49d0:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    49d2:	41 15       	cp	r20, r1
    49d4:	51 05       	cpc	r21, r1
    49d6:	61 05       	cpc	r22, r1
    49d8:	71 05       	cpc	r23, r1
    49da:	09 f4       	brne	.+2      	; 0x49de <f_rename+0x198>
    49dc:	4d c0       	rjmp	.+154    	; 0x4a78 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    49de:	c6 01       	movw	r24, r12
    49e0:	0e 94 3e 09 	call	0x127c	; 0x127c <move_window>
					dir = dj_new.fs->win+32;
    49e4:	a8 ad       	ldd	r26, Y+56	; 0x38
    49e6:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    49e8:	88 23       	and	r24, r24
    49ea:	09 f0       	breq	.+2      	; 0x49ee <f_rename+0x1a8>
    49ec:	46 c0       	rjmp	.+140    	; 0x4a7a <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    49ee:	bd 01       	movw	r22, r26
    49f0:	62 5b       	subi	r22, 0xB2	; 178
    49f2:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    49f4:	fb 01       	movw	r30, r22
    49f6:	81 81       	ldd	r24, Z+1	; 0x01
    49f8:	8e 32       	cpi	r24, 0x2E	; 46
    49fa:	99 f5       	brne	.+102    	; 0x4a62 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    49fc:	8c 91       	ld	r24, X
    49fe:	83 30       	cpi	r24, 0x03	; 3
    4a00:	b1 f4       	brne	.+44     	; 0x4a2e <f_rename+0x1e8>
    4a02:	fe 01       	movw	r30, r28
    4a04:	fe 96       	adiw	r30, 0x3e	; 62
    4a06:	20 81       	ld	r18, Z
    4a08:	31 81       	ldd	r19, Z+1	; 0x01
    4a0a:	42 81       	ldd	r20, Z+2	; 0x02
    4a0c:	53 81       	ldd	r21, Z+3	; 0x03
    4a0e:	92 96       	adiw	r26, 0x22	; 34
    4a10:	8d 91       	ld	r24, X+
    4a12:	9d 91       	ld	r25, X+
    4a14:	0d 90       	ld	r0, X+
    4a16:	bc 91       	ld	r27, X
    4a18:	a0 2d       	mov	r26, r0
    4a1a:	28 17       	cp	r18, r24
    4a1c:	39 07       	cpc	r19, r25
    4a1e:	4a 07       	cpc	r20, r26
    4a20:	5b 07       	cpc	r21, r27
    4a22:	29 f4       	brne	.+10     	; 0x4a2e <f_rename+0x1e8>
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	40 e0       	ldi	r20, 0x00	; 0
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	06 c0       	rjmp	.+12     	; 0x4a3a <f_rename+0x1f4>
    4a2e:	fe 01       	movw	r30, r28
    4a30:	fe 96       	adiw	r30, 0x3e	; 62
    4a32:	20 81       	ld	r18, Z
    4a34:	31 81       	ldd	r19, Z+1	; 0x01
    4a36:	42 81       	ldd	r20, Z+2	; 0x02
    4a38:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4a3a:	db 01       	movw	r26, r22
    4a3c:	5a 96       	adiw	r26, 0x1a	; 26
    4a3e:	2c 93       	st	X, r18
    4a40:	5a 97       	sbiw	r26, 0x1a	; 26
    4a42:	83 2f       	mov	r24, r19
    4a44:	99 27       	eor	r25, r25
    4a46:	5b 96       	adiw	r26, 0x1b	; 27
    4a48:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4a4a:	ca 01       	movw	r24, r20
    4a4c:	aa 27       	eor	r26, r26
    4a4e:	bb 27       	eor	r27, r27
    4a50:	fb 01       	movw	r30, r22
    4a52:	84 8b       	std	Z+20, r24	; 0x14
    4a54:	89 2f       	mov	r24, r25
    4a56:	99 27       	eor	r25, r25
    4a58:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4a5a:	e8 ad       	ldd	r30, Y+56	; 0x38
    4a5c:	f9 ad       	ldd	r31, Y+57	; 0x39
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4a62:	ce 01       	movw	r24, r28
    4a64:	82 96       	adiw	r24, 0x22	; 34
    4a66:	0e 94 cb 10 	call	0x2196	; 0x2196 <dir_remove>
				if (res == FR_OK)
    4a6a:	88 23       	and	r24, r24
    4a6c:	31 f4       	brne	.+12     	; 0x4a7a <f_rename+0x234>
					res = sync(dj_old.fs);
    4a6e:	8a a1       	ldd	r24, Y+34	; 0x22
    4a70:	9b a1       	ldd	r25, Y+35	; 0x23
    4a72:	0e 94 b7 09 	call	0x136e	; 0x136e <sync>
    4a76:	01 c0       	rjmp	.+2      	; 0x4a7a <f_rename+0x234>
    4a78:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4a7a:	c1 5b       	subi	r28, 0xB1	; 177
    4a7c:	df 4f       	sbci	r29, 0xFF	; 255
    4a7e:	cd bf       	out	0x3d, r28	; 61
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	cf 91       	pop	r28
    4a84:	df 91       	pop	r29
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	ff 90       	pop	r15
    4a8c:	ef 90       	pop	r14
    4a8e:	df 90       	pop	r13
    4a90:	cf 90       	pop	r12
    4a92:	08 95       	ret

00004a94 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4a94:	2f 92       	push	r2
    4a96:	3f 92       	push	r3
    4a98:	4f 92       	push	r4
    4a9a:	5f 92       	push	r5
    4a9c:	6f 92       	push	r6
    4a9e:	7f 92       	push	r7
    4aa0:	8f 92       	push	r8
    4aa2:	9f 92       	push	r9
    4aa4:	af 92       	push	r10
    4aa6:	bf 92       	push	r11
    4aa8:	cf 92       	push	r12
    4aaa:	df 92       	push	r13
    4aac:	ef 92       	push	r14
    4aae:	ff 92       	push	r15
    4ab0:	0f 93       	push	r16
    4ab2:	1f 93       	push	r17
    4ab4:	df 93       	push	r29
    4ab6:	cf 93       	push	r28
    4ab8:	cd b7       	in	r28, 0x3d	; 61
    4aba:	de b7       	in	r29, 0x3e	; 62
    4abc:	a4 97       	sbiw	r28, 0x24	; 36
    4abe:	cd bf       	out	0x3d, r28	; 61
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	68 a3       	std	Y+32, r22	; 0x20
    4ac4:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4ac6:	82 30       	cpi	r24, 0x02	; 2
    4ac8:	10 f0       	brcs	.+4      	; 0x4ace <f_mkfs+0x3a>
    4aca:	8b e0       	ldi	r24, 0x0B	; 11
    4acc:	e2 c4       	rjmp	.+2500   	; 0x5492 <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4ace:	28 a1       	ldd	r18, Y+32	; 0x20
    4ad0:	22 30       	cpi	r18, 0x02	; 2
    4ad2:	08 f0       	brcs	.+2      	; 0x4ad6 <f_mkfs+0x42>
    4ad4:	db c4       	rjmp	.+2486   	; 0x548c <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4ad6:	a8 2f       	mov	r26, r24
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	aa 0f       	add	r26, r26
    4adc:	bb 1f       	adc	r27, r27
    4ade:	fd 01       	movw	r30, r26
    4ae0:	e6 50       	subi	r30, 0x06	; 6
    4ae2:	f8 4d       	sbci	r31, 0xD8	; 216
    4ae4:	c0 80       	ld	r12, Z
    4ae6:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4ae8:	c1 14       	cp	r12, r1
    4aea:	d1 04       	cpc	r13, r1
    4aec:	11 f4       	brne	.+4      	; 0x4af2 <f_mkfs+0x5e>
    4aee:	8c e0       	ldi	r24, 0x0C	; 12
    4af0:	d0 c4       	rjmp	.+2464   	; 0x5492 <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4af2:	f6 01       	movw	r30, r12
    4af4:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4af6:	a8 53       	subi	r26, 0x38	; 56
    4af8:	bd 4d       	sbci	r27, 0xDD	; 221
    4afa:	fc 91       	ld	r31, X
    4afc:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4afe:	8f 2f       	mov	r24, r31
    4b00:	0e 94 8d 05 	call	0xb1a	; 0xb1a <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4b04:	80 ff       	sbrs	r24, 0
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <f_mkfs+0x78>
    4b08:	83 e0       	ldi	r24, 0x03	; 3
    4b0a:	c3 c4       	rjmp	.+2438   	; 0x5492 <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4b0c:	82 ff       	sbrs	r24, 2
    4b0e:	02 c0       	rjmp	.+4      	; 0x4b14 <f_mkfs+0x80>
    4b10:	8a e0       	ldi	r24, 0x0A	; 10
    4b12:	bf c4       	rjmp	.+2430   	; 0x5492 <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4b14:	89 89       	ldd	r24, Y+17	; 0x11
    4b16:	61 e0       	ldi	r22, 0x01	; 1
    4b18:	ae 01       	movw	r20, r28
    4b1a:	4f 5f       	subi	r20, 0xFF	; 255
    4b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1e:	0e 94 52 07 	call	0xea4	; 0xea4 <disk_ioctl>
    4b22:	88 23       	and	r24, r24
    4b24:	09 f0       	breq	.+2      	; 0x4b28 <f_mkfs+0x94>
    4b26:	b2 c4       	rjmp	.+2404   	; 0x548c <f_mkfs+0x9f8>
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b2c:	ab 81       	ldd	r26, Y+3	; 0x03
    4b2e:	bc 81       	ldd	r27, Y+4	; 0x04
    4b30:	80 3d       	cpi	r24, 0xD0	; 208
    4b32:	27 e0       	ldi	r18, 0x07	; 7
    4b34:	92 07       	cpc	r25, r18
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	a2 07       	cpc	r26, r18
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	b2 07       	cpc	r27, r18
    4b3e:	08 f4       	brcc	.+2      	; 0x4b42 <f_mkfs+0xae>
    4b40:	a5 c4       	rjmp	.+2378   	; 0x548c <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4b42:	81 50       	subi	r24, 0x01	; 1
    4b44:	90 40       	sbci	r25, 0x00	; 0
    4b46:	a0 4d       	sbci	r26, 0xD0	; 208
    4b48:	b7 40       	sbci	r27, 0x07	; 7
    4b4a:	40 f0       	brcs	.+16     	; 0x4b5c <f_mkfs+0xc8>
    4b4c:	80 e0       	ldi	r24, 0x00	; 0
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	a0 ed       	ldi	r26, 0xD0	; 208
    4b52:	b7 e0       	ldi	r27, 0x07	; 7
    4b54:	89 83       	std	Y+1, r24	; 0x01
    4b56:	9a 83       	std	Y+2, r25	; 0x02
    4b58:	ab 83       	std	Y+3, r26	; 0x03
    4b5a:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4b5c:	48 a1       	ldd	r20, Y+32	; 0x20
    4b5e:	44 23       	and	r20, r20
    4b60:	29 f0       	breq	.+10     	; 0x4b6c <f_mkfs+0xd8>
    4b62:	1a 8e       	std	Y+26, r1	; 0x1a
    4b64:	1b 8e       	std	Y+27, r1	; 0x1b
    4b66:	1c 8e       	std	Y+28, r1	; 0x1c
    4b68:	1d 8e       	std	Y+29, r1	; 0x1d
    4b6a:	08 c0       	rjmp	.+16     	; 0x4b7c <f_mkfs+0xe8>
    4b6c:	8f e3       	ldi	r24, 0x3F	; 63
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	a0 e0       	ldi	r26, 0x00	; 0
    4b72:	b0 e0       	ldi	r27, 0x00	; 0
    4b74:	8a 8f       	std	Y+26, r24	; 0x1a
    4b76:	9b 8f       	std	Y+27, r25	; 0x1b
    4b78:	ac 8f       	std	Y+28, r26	; 0x1c
    4b7a:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4b7c:	89 80       	ldd	r8, Y+1	; 0x01
    4b7e:	9a 80       	ldd	r9, Y+2	; 0x02
    4b80:	ab 80       	ldd	r10, Y+3	; 0x03
    4b82:	bc 80       	ldd	r11, Y+4	; 0x04
    4b84:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4b86:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4b88:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4b8a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4b8c:	82 1a       	sub	r8, r18
    4b8e:	93 0a       	sbc	r9, r19
    4b90:	a4 0a       	sbc	r10, r20
    4b92:	b5 0a       	sbc	r11, r21
    4b94:	89 82       	std	Y+1, r8	; 0x01
    4b96:	9a 82       	std	Y+2, r9	; 0x02
    4b98:	ab 82       	std	Y+3, r10	; 0x03
    4b9a:	bc 82       	std	Y+4, r11	; 0x04
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	92 e0       	ldi	r25, 0x02	; 2
    4ba0:	a0 e0       	ldi	r26, 0x00	; 0
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4ba8:	73 01       	movw	r14, r6
    4baa:	00 e0       	ldi	r16, 0x00	; 0
    4bac:	10 e0       	ldi	r17, 0x00	; 0
    4bae:	09 c0       	rjmp	.+18     	; 0x4bc2 <f_mkfs+0x12e>
    4bb0:	88 0f       	add	r24, r24
    4bb2:	99 1f       	adc	r25, r25
    4bb4:	aa 1f       	adc	r26, r26
    4bb6:	bb 1f       	adc	r27, r27
    4bb8:	2f 5f       	subi	r18, 0xFF	; 255
    4bba:	3f 4f       	sbci	r19, 0xFF	; 255
    4bbc:	27 30       	cpi	r18, 0x07	; 7
    4bbe:	31 05       	cpc	r19, r1
    4bc0:	31 f0       	breq	.+12     	; 0x4bce <f_mkfs+0x13a>
    4bc2:	8e 15       	cp	r24, r14
    4bc4:	9f 05       	cpc	r25, r15
    4bc6:	a0 07       	cpc	r26, r16
    4bc8:	b1 07       	cpc	r27, r17
    4bca:	91 f7       	brne	.-28     	; 0x4bb0 <f_mkfs+0x11c>
    4bcc:	05 c0       	rjmp	.+10     	; 0x4bd8 <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4bce:	8e 15       	cp	r24, r14
    4bd0:	9f 05       	cpc	r25, r15
    4bd2:	a0 07       	cpc	r26, r16
    4bd4:	b1 07       	cpc	r27, r17
    4bd6:	19 f4       	brne	.+6      	; 0x4bde <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4bd8:	61 14       	cp	r6, r1
    4bda:	71 04       	cpc	r7, r1
    4bdc:	11 f5       	brne	.+68     	; 0x4c22 <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4bde:	ef e2       	ldi	r30, 0x2F	; 47
    4be0:	f7 e2       	ldi	r31, 0x27	; 39
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	40 e0       	ldi	r20, 0x00	; 0
    4be8:	50 e0       	ldi	r21, 0x00	; 0
    4bea:	81 91       	ld	r24, Z+
    4bec:	91 91       	ld	r25, Z+
    4bee:	a1 91       	ld	r26, Z+
    4bf0:	b1 91       	ld	r27, Z+
    4bf2:	b9 01       	movw	r22, r18
    4bf4:	14 2f       	mov	r17, r20
    4bf6:	05 2f       	mov	r16, r21
    4bf8:	2f 5f       	subi	r18, 0xFF	; 255
    4bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfc:	4f 4f       	sbci	r20, 0xFF	; 255
    4bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    4c00:	88 16       	cp	r8, r24
    4c02:	99 06       	cpc	r9, r25
    4c04:	aa 06       	cpc	r10, r26
    4c06:	bb 06       	cpc	r11, r27
    4c08:	80 f3       	brcs	.-32     	; 0x4bea <f_mkfs+0x156>
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	6d 83       	std	Y+5, r22	; 0x05
    4c0e:	9e 83       	std	Y+6, r25	; 0x06
    4c10:	1f 83       	std	Y+7, r17	; 0x07
    4c12:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4c14:	fb 01       	movw	r30, r22
    4c16:	ee 0f       	add	r30, r30
    4c18:	ff 1f       	adc	r31, r31
    4c1a:	e7 5e       	subi	r30, 0xE7	; 231
    4c1c:	f8 4d       	sbci	r31, 0xD8	; 216
    4c1e:	60 80       	ld	r6, Z
    4c20:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	63 16       	cp	r6, r19
    4c26:	32 e0       	ldi	r19, 0x02	; 2
    4c28:	73 06       	cpc	r7, r19
    4c2a:	18 f4       	brcc	.+6      	; 0x4c32 <f_mkfs+0x19e>
    4c2c:	61 2c       	mov	r6, r1
    4c2e:	f2 e0       	ldi	r31, 0x02	; 2
    4c30:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4c32:	13 01       	movw	r2, r6
    4c34:	23 2c       	mov	r2, r3
    4c36:	33 24       	eor	r3, r3
    4c38:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4c3a:	c1 01       	movw	r24, r2
    4c3c:	a0 e0       	ldi	r26, 0x00	; 0
    4c3e:	b0 e0       	ldi	r27, 0x00	; 0
    4c40:	8d 87       	std	Y+13, r24	; 0x0d
    4c42:	9e 87       	std	Y+14, r25	; 0x0e
    4c44:	af 87       	std	Y+15, r26	; 0x0f
    4c46:	b8 8b       	std	Y+16, r27	; 0x10
    4c48:	c5 01       	movw	r24, r10
    4c4a:	b4 01       	movw	r22, r8
    4c4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c50:	4f 85       	ldd	r20, Y+15	; 0x0f
    4c52:	58 89       	ldd	r21, Y+16	; 0x10
    4c54:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    4c58:	c9 01       	movw	r24, r18
    4c5a:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4c5c:	85 3f       	cpi	r24, 0xF5	; 245
    4c5e:	ef e0       	ldi	r30, 0x0F	; 15
    4c60:	9e 07       	cpc	r25, r30
    4c62:	e0 e0       	ldi	r30, 0x00	; 0
    4c64:	ae 07       	cpc	r26, r30
    4c66:	e0 e0       	ldi	r30, 0x00	; 0
    4c68:	be 07       	cpc	r27, r30
    4c6a:	08 f4       	brcc	.+2      	; 0x4c6e <f_mkfs+0x1da>
    4c6c:	28 c4       	rjmp	.+2128   	; 0x54be <f_mkfs+0xa2a>
    4c6e:	f8 a1       	ldd	r31, Y+32	; 0x20
    4c70:	2f 2f       	mov	r18, r31
    4c72:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4c74:	85 3f       	cpi	r24, 0xF5	; 245
    4c76:	4f ef       	ldi	r20, 0xFF	; 255
    4c78:	94 07       	cpc	r25, r20
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	a4 07       	cpc	r26, r20
    4c7e:	40 e0       	ldi	r20, 0x00	; 0
    4c80:	b4 07       	cpc	r27, r20
    4c82:	50 f5       	brcc	.+84     	; 0x4cd8 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4c84:	7c 01       	movw	r14, r24
    4c86:	8d 01       	movw	r16, r26
    4c88:	ee 0c       	add	r14, r14
    4c8a:	ff 1c       	adc	r15, r15
    4c8c:	00 1f       	adc	r16, r16
    4c8e:	11 1f       	adc	r17, r17
    4c90:	83 e0       	ldi	r24, 0x03	; 3
    4c92:	92 e0       	ldi	r25, 0x02	; 2
    4c94:	a0 e0       	ldi	r26, 0x00	; 0
    4c96:	b0 e0       	ldi	r27, 0x00	; 0
    4c98:	e8 0e       	add	r14, r24
    4c9a:	f9 1e       	adc	r15, r25
    4c9c:	0a 1f       	adc	r16, r26
    4c9e:	1b 1f       	adc	r17, r27
    4ca0:	69 e0       	ldi	r22, 0x09	; 9
    4ca2:	16 95       	lsr	r17
    4ca4:	07 95       	ror	r16
    4ca6:	f7 94       	ror	r15
    4ca8:	e7 94       	ror	r14
    4caa:	6a 95       	dec	r22
    4cac:	d1 f7       	brne	.-12     	; 0x4ca2 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4cae:	2f 5f       	subi	r18, 0xFF	; 255
    4cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb2:	c9 01       	movw	r24, r18
    4cb4:	aa 27       	eor	r26, r26
    4cb6:	97 fd       	sbrc	r25, 7
    4cb8:	a0 95       	com	r26
    4cba:	ba 2f       	mov	r27, r26
    4cbc:	8e 8b       	std	Y+22, r24	; 0x16
    4cbe:	9f 8b       	std	Y+23, r25	; 0x17
    4cc0:	a8 8f       	std	Y+24, r26	; 0x18
    4cc2:	b9 8f       	std	Y+25, r27	; 0x19
    4cc4:	20 e2       	ldi	r18, 0x20	; 32
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e0       	ldi	r20, 0x00	; 0
    4cca:	50 e0       	ldi	r21, 0x00	; 0
    4ccc:	2a 8b       	std	Y+18, r18	; 0x12
    4cce:	3b 8b       	std	Y+19, r19	; 0x13
    4cd0:	4c 8b       	std	Y+20, r20	; 0x14
    4cd2:	5d 8b       	std	Y+21, r21	; 0x15
    4cd4:	32 e0       	ldi	r19, 0x02	; 2
    4cd6:	2a c0       	rjmp	.+84     	; 0x4d2c <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4cd8:	7c 01       	movw	r14, r24
    4cda:	8d 01       	movw	r16, r26
    4cdc:	52 e0       	ldi	r21, 0x02	; 2
    4cde:	ee 0c       	add	r14, r14
    4ce0:	ff 1c       	adc	r15, r15
    4ce2:	00 1f       	adc	r16, r16
    4ce4:	11 1f       	adc	r17, r17
    4ce6:	5a 95       	dec	r21
    4ce8:	d1 f7       	brne	.-12     	; 0x4cde <f_mkfs+0x24a>
    4cea:	87 e0       	ldi	r24, 0x07	; 7
    4cec:	92 e0       	ldi	r25, 0x02	; 2
    4cee:	a0 e0       	ldi	r26, 0x00	; 0
    4cf0:	b0 e0       	ldi	r27, 0x00	; 0
    4cf2:	e8 0e       	add	r14, r24
    4cf4:	f9 1e       	adc	r15, r25
    4cf6:	0a 1f       	adc	r16, r26
    4cf8:	1b 1f       	adc	r17, r27
    4cfa:	49 e0       	ldi	r20, 0x09	; 9
    4cfc:	16 95       	lsr	r17
    4cfe:	07 95       	ror	r16
    4d00:	f7 94       	ror	r15
    4d02:	e7 94       	ror	r14
    4d04:	4a 95       	dec	r20
    4d06:	d1 f7       	brne	.-12     	; 0x4cfc <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4d08:	81 e2       	ldi	r24, 0x21	; 33
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	82 1b       	sub	r24, r18
    4d0e:	93 0b       	sbc	r25, r19
    4d10:	9c 01       	movw	r18, r24
    4d12:	44 27       	eor	r20, r20
    4d14:	37 fd       	sbrc	r19, 7
    4d16:	40 95       	com	r20
    4d18:	54 2f       	mov	r21, r20
    4d1a:	2e 8b       	std	Y+22, r18	; 0x16
    4d1c:	3f 8b       	std	Y+23, r19	; 0x17
    4d1e:	48 8f       	std	Y+24, r20	; 0x18
    4d20:	59 8f       	std	Y+25, r21	; 0x19
    4d22:	1a 8a       	std	Y+18, r1	; 0x12
    4d24:	1b 8a       	std	Y+19, r1	; 0x13
    4d26:	1c 8a       	std	Y+20, r1	; 0x14
    4d28:	1d 8a       	std	Y+21, r1	; 0x15
    4d2a:	33 e0       	ldi	r19, 0x03	; 3
    4d2c:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4d2e:	89 89       	ldd	r24, Y+17	; 0x11
    4d30:	63 e0       	ldi	r22, 0x03	; 3
    4d32:	ae 01       	movw	r20, r28
    4d34:	4b 5f       	subi	r20, 0xFB	; 251
    4d36:	5f 4f       	sbci	r21, 0xFF	; 255
    4d38:	0e 94 52 07 	call	0xea4	; 0xea4 <disk_ioctl>
    4d3c:	88 23       	and	r24, r24
    4d3e:	09 f0       	breq	.+2      	; 0x4d42 <f_mkfs+0x2ae>
    4d40:	a5 c3       	rjmp	.+1866   	; 0x548c <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4d42:	8e 89       	ldd	r24, Y+22	; 0x16
    4d44:	9f 89       	ldd	r25, Y+23	; 0x17
    4d46:	a8 8d       	ldd	r26, Y+24	; 0x18
    4d48:	b9 8d       	ldd	r27, Y+25	; 0x19
    4d4a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4d4c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4d4e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4d50:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4d52:	82 0f       	add	r24, r18
    4d54:	93 1f       	adc	r25, r19
    4d56:	a4 1f       	adc	r26, r20
    4d58:	b5 1f       	adc	r27, r21
    4d5a:	89 87       	std	Y+9, r24	; 0x09
    4d5c:	9a 87       	std	Y+10, r25	; 0x0a
    4d5e:	ab 87       	std	Y+11, r26	; 0x0b
    4d60:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4d62:	2a 89       	ldd	r18, Y+18	; 0x12
    4d64:	3b 89       	ldd	r19, Y+19	; 0x13
    4d66:	4c 89       	ldd	r20, Y+20	; 0x14
    4d68:	5d 89       	ldd	r21, Y+21	; 0x15
    4d6a:	2e 0d       	add	r18, r14
    4d6c:	3f 1d       	adc	r19, r15
    4d6e:	40 1f       	adc	r20, r16
    4d70:	51 1f       	adc	r21, r17
    4d72:	28 0f       	add	r18, r24
    4d74:	39 1f       	adc	r19, r25
    4d76:	4a 1f       	adc	r20, r26
    4d78:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d7e:	af 81       	ldd	r26, Y+7	; 0x07
    4d80:	b8 85       	ldd	r27, Y+8	; 0x08
    4d82:	4c 01       	movw	r8, r24
    4d84:	5d 01       	movw	r10, r26
    4d86:	08 94       	sec
    4d88:	81 08       	sbc	r8, r1
    4d8a:	91 08       	sbc	r9, r1
    4d8c:	a1 08       	sbc	r10, r1
    4d8e:	b1 08       	sbc	r11, r1
    4d90:	82 0e       	add	r8, r18
    4d92:	93 1e       	adc	r9, r19
    4d94:	a4 1e       	adc	r10, r20
    4d96:	b5 1e       	adc	r11, r21
    4d98:	b0 95       	com	r27
    4d9a:	a0 95       	com	r26
    4d9c:	90 95       	com	r25
    4d9e:	81 95       	neg	r24
    4da0:	9f 4f       	sbci	r25, 0xFF	; 255
    4da2:	af 4f       	sbci	r26, 0xFF	; 255
    4da4:	bf 4f       	sbci	r27, 0xFF	; 255
    4da6:	88 22       	and	r8, r24
    4da8:	99 22       	and	r9, r25
    4daa:	aa 22       	and	r10, r26
    4dac:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4dae:	27 01       	movw	r4, r14
    4db0:	38 01       	movw	r6, r16
    4db2:	42 1a       	sub	r4, r18
    4db4:	53 0a       	sbc	r5, r19
    4db6:	64 0a       	sbc	r6, r20
    4db8:	75 0a       	sbc	r7, r21
    4dba:	48 0c       	add	r4, r8
    4dbc:	59 1c       	adc	r5, r9
    4dbe:	6a 1c       	adc	r6, r10
    4dc0:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4dc2:	e9 80       	ldd	r14, Y+1	; 0x01
    4dc4:	fa 80       	ldd	r15, Y+2	; 0x02
    4dc6:	0b 81       	ldd	r16, Y+3	; 0x03
    4dc8:	1c 81       	ldd	r17, Y+4	; 0x04
    4dca:	c8 01       	movw	r24, r16
    4dcc:	b7 01       	movw	r22, r14
    4dce:	2e 89       	ldd	r18, Y+22	; 0x16
    4dd0:	3f 89       	ldd	r19, Y+23	; 0x17
    4dd2:	48 8d       	ldd	r20, Y+24	; 0x18
    4dd4:	59 8d       	ldd	r21, Y+25	; 0x19
    4dd6:	62 1b       	sub	r22, r18
    4dd8:	73 0b       	sbc	r23, r19
    4dda:	84 0b       	sbc	r24, r20
    4ddc:	95 0b       	sbc	r25, r21
    4dde:	64 19       	sub	r22, r4
    4de0:	75 09       	sbc	r23, r5
    4de2:	86 09       	sbc	r24, r6
    4de4:	97 09       	sbc	r25, r7
    4de6:	2a 89       	ldd	r18, Y+18	; 0x12
    4de8:	3b 89       	ldd	r19, Y+19	; 0x13
    4dea:	4c 89       	ldd	r20, Y+20	; 0x14
    4dec:	5d 89       	ldd	r21, Y+21	; 0x15
    4dee:	62 1b       	sub	r22, r18
    4df0:	73 0b       	sbc	r23, r19
    4df2:	84 0b       	sbc	r24, r20
    4df4:	95 0b       	sbc	r25, r21
    4df6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4df8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4dfa:	4f 85       	ldd	r20, Y+15	; 0x0f
    4dfc:	58 89       	ldd	r21, Y+16	; 0x10
    4dfe:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    4e02:	29 a3       	std	Y+33, r18	; 0x21
    4e04:	3a a3       	std	Y+34, r19	; 0x22
    4e06:	4b a3       	std	Y+35, r20	; 0x23
    4e08:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4e0a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4e0c:	32 30       	cpi	r19, 0x02	; 2
    4e0e:	51 f4       	brne	.+20     	; 0x4e24 <f_mkfs+0x390>
    4e10:	89 a1       	ldd	r24, Y+33	; 0x21
    4e12:	9a a1       	ldd	r25, Y+34	; 0x22
    4e14:	ab a1       	ldd	r26, Y+35	; 0x23
    4e16:	bc a1       	ldd	r27, Y+36	; 0x24
    4e18:	85 5f       	subi	r24, 0xF5	; 245
    4e1a:	9f 40       	sbci	r25, 0x0F	; 15
    4e1c:	a0 40       	sbci	r26, 0x00	; 0
    4e1e:	b0 40       	sbci	r27, 0x00	; 0
    4e20:	70 f4       	brcc	.+28     	; 0x4e3e <f_mkfs+0x3aa>
    4e22:	34 c3       	rjmp	.+1640   	; 0x548c <f_mkfs+0x9f8>
    4e24:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4e26:	f3 30       	cpi	r31, 0x03	; 3
    4e28:	51 f4       	brne	.+20     	; 0x4e3e <f_mkfs+0x3aa>
    4e2a:	29 a1       	ldd	r18, Y+33	; 0x21
    4e2c:	3a a1       	ldd	r19, Y+34	; 0x22
    4e2e:	4b a1       	ldd	r20, Y+35	; 0x23
    4e30:	5c a1       	ldd	r21, Y+36	; 0x24
    4e32:	25 5f       	subi	r18, 0xF5	; 245
    4e34:	3f 4f       	sbci	r19, 0xFF	; 255
    4e36:	40 40       	sbci	r20, 0x00	; 0
    4e38:	50 40       	sbci	r21, 0x00	; 0
    4e3a:	08 f4       	brcc	.+2      	; 0x4e3e <f_mkfs+0x3aa>
    4e3c:	27 c3       	rjmp	.+1614   	; 0x548c <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4e3e:	8d 82       	std	Y+5, r8	; 0x05
    4e40:	9e 82       	std	Y+6, r9	; 0x06
    4e42:	af 82       	std	Y+7, r10	; 0x07
    4e44:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4e46:	98 a1       	ldd	r25, Y+32	; 0x20
    4e48:	99 23       	and	r25, r25
    4e4a:	11 f0       	breq	.+4      	; 0x4e50 <f_mkfs+0x3bc>
    4e4c:	10 ef       	ldi	r17, 0xF0	; 240
    4e4e:	9c c0       	rjmp	.+312    	; 0x4f88 <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4e50:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4e52:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4e54:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4e56:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4e58:	4e 0d       	add	r20, r14
    4e5a:	5f 1d       	adc	r21, r15
    4e5c:	60 1f       	adc	r22, r16
    4e5e:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4e60:	3e e2       	ldi	r19, 0x2E	; 46
    4e62:	e3 2e       	mov	r14, r19
    4e64:	f1 2c       	mov	r15, r1
    4e66:	ec 0c       	add	r14, r12
    4e68:	fd 1c       	adc	r15, r13
    4e6a:	f7 01       	movw	r30, r14
    4e6c:	20 e0       	ldi	r18, 0x00	; 0
    4e6e:	32 e0       	ldi	r19, 0x02	; 2
    4e70:	01 c0       	rjmp	.+2      	; 0x4e74 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4e72:	11 92       	st	Z+, r1
    4e74:	21 50       	subi	r18, 0x01	; 1
    4e76:	30 40       	sbci	r19, 0x00	; 0
    4e78:	af ef       	ldi	r26, 0xFF	; 255
    4e7a:	2f 3f       	cpi	r18, 0xFF	; 255
    4e7c:	3a 07       	cpc	r19, r26
    4e7e:	c9 f7       	brne	.-14     	; 0x4e72 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4e80:	86 01       	movw	r16, r12
    4e82:	04 51       	subi	r16, 0x14	; 20
    4e84:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4e86:	80 e8       	ldi	r24, 0x80	; 128
    4e88:	f8 01       	movw	r30, r16
    4e8a:	80 83       	st	Z, r24
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	81 83       	std	Z+1, r24	; 0x01
    4e90:	82 83       	std	Z+2, r24	; 0x02
    4e92:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4e94:	40 30       	cpi	r20, 0x00	; 0
    4e96:	f4 e0       	ldi	r31, 0x04	; 4
    4e98:	5f 07       	cpc	r21, r31
    4e9a:	fb ef       	ldi	r31, 0xFB	; 251
    4e9c:	6f 07       	cpc	r22, r31
    4e9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ea0:	7f 07       	cpc	r23, r31
    4ea2:	b0 f4       	brcc	.+44     	; 0x4ed0 <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	ba 01       	movw	r22, r20
    4ea8:	21 ec       	ldi	r18, 0xC1	; 193
    4eaa:	3e e3       	ldi	r19, 0x3E	; 62
    4eac:	40 e0       	ldi	r20, 0x00	; 0
    4eae:	50 e0       	ldi	r21, 0x00	; 0
    4eb0:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    4eb4:	c9 01       	movw	r24, r18
    4eb6:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4eb8:	f8 01       	movw	r30, r16
    4eba:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4ebc:	22 e0       	ldi	r18, 0x02	; 2
    4ebe:	b6 95       	lsr	r27
    4ec0:	a7 95       	ror	r26
    4ec2:	97 95       	ror	r25
    4ec4:	87 95       	ror	r24
    4ec6:	2a 95       	dec	r18
    4ec8:	d1 f7       	brne	.-12     	; 0x4ebe <f_mkfs+0x42a>
    4eca:	8f 63       	ori	r24, 0x3F	; 63
    4ecc:	86 83       	std	Z+6, r24	; 0x06
    4ece:	07 c0       	rjmp	.+14     	; 0x4ede <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4ed0:	8f ef       	ldi	r24, 0xFF	; 255
    4ed2:	d8 01       	movw	r26, r16
    4ed4:	16 96       	adiw	r26, 0x06	; 6
    4ed6:	8c 93       	st	X, r24
    4ed8:	16 97       	sbiw	r26, 0x06	; 6
    4eda:	17 96       	adiw	r26, 0x07	; 7
    4edc:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4ede:	8e ef       	ldi	r24, 0xFE	; 254
    4ee0:	f8 01       	movw	r30, r16
    4ee2:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4ee4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4ee6:	f3 30       	cpi	r31, 0x03	; 3
    4ee8:	81 f0       	breq	.+32     	; 0x4f0a <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4eea:	89 81       	ldd	r24, Y+1	; 0x01
    4eec:	9a 81       	ldd	r25, Y+2	; 0x02
    4eee:	ab 81       	ldd	r26, Y+3	; 0x03
    4ef0:	bc 81       	ldd	r27, Y+4	; 0x04
    4ef2:	80 50       	subi	r24, 0x00	; 0
    4ef4:	90 40       	sbci	r25, 0x00	; 0
    4ef6:	a1 40       	sbci	r26, 0x01	; 1
    4ef8:	b0 40       	sbci	r27, 0x00	; 0
    4efa:	10 f0       	brcs	.+4      	; 0x4f00 <f_mkfs+0x46c>
    4efc:	86 e0       	ldi	r24, 0x06	; 6
    4efe:	01 c0       	rjmp	.+2      	; 0x4f02 <f_mkfs+0x46e>
    4f00:	84 e0       	ldi	r24, 0x04	; 4
    4f02:	d8 01       	movw	r26, r16
    4f04:	14 96       	adiw	r26, 0x04	; 4
    4f06:	8c 93       	st	X, r24
    4f08:	03 c0       	rjmp	.+6      	; 0x4f10 <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4f0a:	8c e0       	ldi	r24, 0x0C	; 12
    4f0c:	f8 01       	movw	r30, r16
    4f0e:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4f10:	8f e3       	ldi	r24, 0x3F	; 63
    4f12:	d8 01       	movw	r26, r16
    4f14:	18 96       	adiw	r26, 0x08	; 8
    4f16:	8c 93       	st	X, r24
    4f18:	18 97       	sbiw	r26, 0x08	; 8
    4f1a:	19 96       	adiw	r26, 0x09	; 9
    4f1c:	1c 92       	st	X, r1
    4f1e:	19 97       	sbiw	r26, 0x09	; 9
    4f20:	1a 96       	adiw	r26, 0x0a	; 10
    4f22:	1c 92       	st	X, r1
    4f24:	1a 97       	sbiw	r26, 0x0a	; 10
    4f26:	1b 96       	adiw	r26, 0x0b	; 11
    4f28:	1c 92       	st	X, r1
    4f2a:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4f2c:	89 81       	ldd	r24, Y+1	; 0x01
    4f2e:	1c 96       	adiw	r26, 0x0c	; 12
    4f30:	8c 93       	st	X, r24
    4f32:	1c 97       	sbiw	r26, 0x0c	; 12
    4f34:	8a 81       	ldd	r24, Y+2	; 0x02
    4f36:	1d 96       	adiw	r26, 0x0d	; 13
    4f38:	8c 93       	st	X, r24
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
    4f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3e:	ab 81       	ldd	r26, Y+3	; 0x03
    4f40:	bc 81       	ldd	r27, Y+4	; 0x04
    4f42:	cd 01       	movw	r24, r26
    4f44:	aa 27       	eor	r26, r26
    4f46:	bb 27       	eor	r27, r27
    4f48:	f8 01       	movw	r30, r16
    4f4a:	86 87       	std	Z+14, r24	; 0x0e
    4f4c:	89 81       	ldd	r24, Y+1	; 0x01
    4f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f50:	ab 81       	ldd	r26, Y+3	; 0x03
    4f52:	bc 81       	ldd	r27, Y+4	; 0x04
    4f54:	8b 2f       	mov	r24, r27
    4f56:	99 27       	eor	r25, r25
    4f58:	aa 27       	eor	r26, r26
    4f5a:	bb 27       	eor	r27, r27
    4f5c:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4f5e:	00 5c       	subi	r16, 0xC0	; 192
    4f60:	1f 4f       	sbci	r17, 0xFF	; 255
    4f62:	85 e5       	ldi	r24, 0x55	; 85
    4f64:	d8 01       	movw	r26, r16
    4f66:	8d 93       	st	X+, r24
    4f68:	fd 01       	movw	r30, r26
    4f6a:	8a ea       	ldi	r24, 0xAA	; 170
    4f6c:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4f6e:	89 89       	ldd	r24, Y+17	; 0x11
    4f70:	b7 01       	movw	r22, r14
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	40 e0       	ldi	r20, 0x00	; 0
    4f78:	50 e0       	ldi	r21, 0x00	; 0
    4f7a:	01 e0       	ldi	r16, 0x01	; 1
    4f7c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    4f80:	88 23       	and	r24, r24
    4f82:	09 f0       	breq	.+2      	; 0x4f86 <f_mkfs+0x4f2>
    4f84:	85 c2       	rjmp	.+1290   	; 0x5490 <f_mkfs+0x9fc>
    4f86:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    4f88:	5e e2       	ldi	r21, 0x2E	; 46
    4f8a:	e5 2e       	mov	r14, r21
    4f8c:	f1 2c       	mov	r15, r1
    4f8e:	ec 0c       	add	r14, r12
    4f90:	fd 1c       	adc	r15, r13
    4f92:	f7 01       	movw	r30, r14
    4f94:	80 e0       	ldi	r24, 0x00	; 0
    4f96:	92 e0       	ldi	r25, 0x02	; 2
    4f98:	01 c0       	rjmp	.+2      	; 0x4f9c <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4f9a:	11 92       	st	Z+, r1
    4f9c:	01 97       	sbiw	r24, 0x01	; 1
    4f9e:	bf ef       	ldi	r27, 0xFF	; 255
    4fa0:	8f 3f       	cpi	r24, 0xFF	; 255
    4fa2:	9b 07       	cpc	r25, r27
    4fa4:	d1 f7       	brne	.-12     	; 0x4f9a <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    4fa6:	8b ee       	ldi	r24, 0xEB	; 235
    4fa8:	f6 01       	movw	r30, r12
    4faa:	86 a7       	std	Z+46, r24	; 0x2e
    4fac:	8e ef       	ldi	r24, 0xFE	; 254
    4fae:	87 a7       	std	Z+47, r24	; 0x2f
    4fb0:	80 e9       	ldi	r24, 0x90	; 144
    4fb2:	80 ab       	std	Z+48, r24	; 0x30
    4fb4:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    4fb6:	11 ae       	std	Z+57, r1	; 0x39
    4fb8:	82 e0       	ldi	r24, 0x02	; 2
    4fba:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    4fbc:	2e 8e       	std	Y+30, r2	; 0x1e
    4fbe:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    4fc0:	2e 89       	ldd	r18, Y+22	; 0x16
    4fc2:	24 af       	std	Z+60, r18	; 0x3c
    4fc4:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    4fca:	8a 89       	ldd	r24, Y+18	; 0x12
    4fcc:	9b 89       	ldd	r25, Y+19	; 0x13
    4fce:	ac 89       	ldd	r26, Y+20	; 0x14
    4fd0:	bd 89       	ldd	r27, Y+21	; 0x15
    4fd2:	44 e0       	ldi	r20, 0x04	; 4
    4fd4:	88 0f       	add	r24, r24
    4fd6:	99 1f       	adc	r25, r25
    4fd8:	aa 1f       	adc	r26, r26
    4fda:	bb 1f       	adc	r27, r27
    4fdc:	4a 95       	dec	r20
    4fde:	d1 f7       	brne	.-12     	; 0x4fd4 <f_mkfs+0x540>
    4fe0:	87 af       	std	Z+63, r24	; 0x3f
    4fe2:	40 e4       	ldi	r20, 0x40	; 64
    4fe4:	50 e0       	ldi	r21, 0x00	; 0
    4fe6:	c4 0e       	add	r12, r20
    4fe8:	d5 1e       	adc	r13, r21
    4fea:	89 2f       	mov	r24, r25
    4fec:	99 27       	eor	r25, r25
    4fee:	d6 01       	movw	r26, r12
    4ff0:	8c 93       	st	X, r24
    4ff2:	e0 ec       	ldi	r30, 0xC0	; 192
    4ff4:	ff ef       	ldi	r31, 0xFF	; 255
    4ff6:	ce 0e       	add	r12, r30
    4ff8:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    4ffa:	89 81       	ldd	r24, Y+1	; 0x01
    4ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    5000:	bc 81       	ldd	r27, Y+4	; 0x04
    5002:	80 30       	cpi	r24, 0x00	; 0
    5004:	f0 e0       	ldi	r31, 0x00	; 0
    5006:	9f 07       	cpc	r25, r31
    5008:	f1 e0       	ldi	r31, 0x01	; 1
    500a:	af 07       	cpc	r26, r31
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	bf 07       	cpc	r27, r31
    5010:	60 f4       	brcc	.+24     	; 0x502a <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    5012:	21 e4       	ldi	r18, 0x41	; 65
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	c2 0e       	add	r12, r18
    5018:	d3 1e       	adc	r13, r19
    501a:	f6 01       	movw	r30, r12
    501c:	81 93       	st	Z+, r24
    501e:	6f 01       	movw	r12, r30
    5020:	8a 81       	ldd	r24, Y+2	; 0x02
    5022:	80 83       	st	Z, r24
    5024:	2e eb       	ldi	r18, 0xBE	; 190
    5026:	3f ef       	ldi	r19, 0xFF	; 255
    5028:	1f c0       	rjmp	.+62     	; 0x5068 <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    502a:	4e e4       	ldi	r20, 0x4E	; 78
    502c:	50 e0       	ldi	r21, 0x00	; 0
    502e:	c4 0e       	add	r12, r20
    5030:	d5 1e       	adc	r13, r21
    5032:	f6 01       	movw	r30, r12
    5034:	81 93       	st	Z+, r24
    5036:	8a 81       	ldd	r24, Y+2	; 0x02
    5038:	df 01       	movw	r26, r30
    503a:	8d 93       	st	X+, r24
    503c:	6d 01       	movw	r12, r26
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	ab 81       	ldd	r26, Y+3	; 0x03
    5044:	bc 81       	ldd	r27, Y+4	; 0x04
    5046:	cd 01       	movw	r24, r26
    5048:	aa 27       	eor	r26, r26
    504a:	bb 27       	eor	r27, r27
    504c:	f6 01       	movw	r30, r12
    504e:	81 93       	st	Z+, r24
    5050:	6f 01       	movw	r12, r30
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	9a 81       	ldd	r25, Y+2	; 0x02
    5056:	ab 81       	ldd	r26, Y+3	; 0x03
    5058:	bc 81       	ldd	r27, Y+4	; 0x04
    505a:	8b 2f       	mov	r24, r27
    505c:	99 27       	eor	r25, r25
    505e:	aa 27       	eor	r26, r26
    5060:	bb 27       	eor	r27, r27
    5062:	80 83       	st	Z, r24
    5064:	2f ea       	ldi	r18, 0xAF	; 175
    5066:	3f ef       	ldi	r19, 0xFF	; 255
    5068:	c2 0e       	add	r12, r18
    506a:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    506c:	43 e4       	ldi	r20, 0x43	; 67
    506e:	50 e0       	ldi	r21, 0x00	; 0
    5070:	c4 0e       	add	r12, r20
    5072:	d5 1e       	adc	r13, r21
    5074:	d6 01       	movw	r26, r12
    5076:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    5078:	e3 e0       	ldi	r30, 0x03	; 3
    507a:	f0 e0       	ldi	r31, 0x00	; 0
    507c:	ce 0e       	add	r12, r30
    507e:	df 1e       	adc	r13, r31
    5080:	8f e3       	ldi	r24, 0x3F	; 63
    5082:	d6 01       	movw	r26, r12
    5084:	8d 93       	st	X+, r24
    5086:	fd 01       	movw	r30, r26
    5088:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	df 01       	movw	r26, r30
    508e:	8d 93       	st	X+, r24
    5090:	fd 01       	movw	r30, r26
    5092:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    5094:	df 01       	movw	r26, r30
    5096:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5098:	ed 93       	st	X+, r30
    509a:	1d 92       	st	X+, r1
    509c:	fd 01       	movw	r30, r26
    509e:	11 92       	st	Z+, r1
    50a0:	6f 01       	movw	r12, r30
    50a2:	10 82       	st	Z, r1
    50a4:	23 eb       	ldi	r18, 0xB3	; 179
    50a6:	3f ef       	ldi	r19, 0xFF	; 255
    50a8:	c2 0e       	add	r12, r18
    50aa:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    50ac:	1d 82       	std	Y+5, r1	; 0x05
    50ae:	1e 82       	std	Y+6, r1	; 0x06
    50b0:	1f 82       	std	Y+7, r1	; 0x07
    50b2:	18 86       	std	Y+8, r1	; 0x08
    50b4:	b6 01       	movw	r22, r12
    50b6:	6b 5a       	subi	r22, 0xAB	; 171
    50b8:	7f 4f       	sbci	r23, 0xFF	; 255
    50ba:	85 2d       	mov	r24, r5
    50bc:	99 27       	eor	r25, r25
    50be:	d6 01       	movw	r26, r12
    50c0:	ae 5a       	subi	r26, 0xAE	; 174
    50c2:	bf 4f       	sbci	r27, 0xFF	; 255
    50c4:	96 01       	movw	r18, r12
    50c6:	2c 5a       	subi	r18, 0xAC	; 172
    50c8:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    50ca:	4f 8d       	ldd	r20, Y+31	; 0x1f
    50cc:	43 30       	cpi	r20, 0x03	; 3
    50ce:	41 f1       	breq	.+80     	; 0x5120 <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    50d0:	fb 01       	movw	r30, r22
    50d2:	10 82       	st	Z, r1
    50d4:	46 e5       	ldi	r20, 0x56	; 86
    50d6:	50 e0       	ldi	r21, 0x00	; 0
    50d8:	c4 0e       	add	r12, r20
    50da:	d5 1e       	adc	r13, r21
    50dc:	f6 01       	movw	r30, r12
    50de:	11 92       	st	Z+, r1
    50e0:	11 92       	st	Z+, r1
    50e2:	6f 01       	movw	r12, r30
    50e4:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    50e6:	4c ee       	ldi	r20, 0xEC	; 236
    50e8:	5f ef       	ldi	r21, 0xFF	; 255
    50ea:	c4 0e       	add	r12, r20
    50ec:	d5 1e       	adc	r13, r21
    50ee:	f6 01       	movw	r30, r12
    50f0:	41 92       	st	Z+, r4
    50f2:	6f 01       	movw	r12, r30
    50f4:	80 83       	st	Z, r24
    50f6:	4b eb       	ldi	r20, 0xBB	; 187
    50f8:	5f ef       	ldi	r21, 0xFF	; 255
    50fa:	c4 0e       	add	r12, r20
    50fc:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    50fe:	80 e8       	ldi	r24, 0x80	; 128
    5100:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    5102:	89 e2       	ldi	r24, 0x29	; 41
    5104:	d9 01       	movw	r26, r18
    5106:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5108:	d7 01       	movw	r26, r14
    510a:	9b 96       	adiw	r26, 0x2b	; 43
    510c:	eb e0       	ldi	r30, 0x0B	; 11
    510e:	f0 e2       	ldi	r31, 0x20	; 32
    5110:	02 c0       	rjmp	.+4      	; 0x5116 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5112:	81 91       	ld	r24, Z+
    5114:	8d 93       	st	X+, r24
    5116:	20 e2       	ldi	r18, 0x20	; 32
    5118:	ee 31       	cpi	r30, 0x1E	; 30
    511a:	f2 07       	cpc	r31, r18
    511c:	d1 f7       	brne	.-12     	; 0x5112 <f_mkfs+0x67e>
    511e:	51 c0       	rjmp	.+162    	; 0x51c2 <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    5120:	41 e7       	ldi	r20, 0x71	; 113
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	c4 0e       	add	r12, r20
    5126:	d5 1e       	adc	r13, r21
    5128:	f6 01       	movw	r30, r12
    512a:	11 92       	st	Z+, r1
    512c:	11 92       	st	Z+, r1
    512e:	11 92       	st	Z+, r1
    5130:	6f 01       	movw	r12, r30
    5132:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    5134:	4c 92       	st	X, r4
    5136:	4f ed       	ldi	r20, 0xDF	; 223
    5138:	5f ef       	ldi	r21, 0xFF	; 255
    513a:	c4 0e       	add	r12, r20
    513c:	d5 1e       	adc	r13, r21
    513e:	d6 01       	movw	r26, r12
    5140:	8c 93       	st	X, r24
    5142:	c3 01       	movw	r24, r6
    5144:	aa 27       	eor	r26, r26
    5146:	bb 27       	eor	r27, r27
    5148:	f9 01       	movw	r30, r18
    514a:	80 83       	st	Z, r24
    514c:	87 2d       	mov	r24, r7
    514e:	99 27       	eor	r25, r25
    5150:	aa 27       	eor	r26, r26
    5152:	bb 27       	eor	r27, r27
    5154:	fb 01       	movw	r30, r22
    5156:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    5158:	27 e0       	ldi	r18, 0x07	; 7
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	c2 0e       	add	r12, r18
    515e:	d3 1e       	adc	r13, r19
    5160:	82 e0       	ldi	r24, 0x02	; 2
    5162:	d6 01       	movw	r26, r12
    5164:	8d 93       	st	X+, r24
    5166:	fd 01       	movw	r30, r26
    5168:	11 92       	st	Z+, r1
    516a:	df 01       	movw	r26, r30
    516c:	1d 92       	st	X+, r1
    516e:	fd 01       	movw	r30, r26
    5170:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	df 01       	movw	r26, r30
    5176:	8d 93       	st	X+, r24
    5178:	fd 01       	movw	r30, r26
    517a:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    517c:	86 e0       	ldi	r24, 0x06	; 6
    517e:	df 01       	movw	r26, r30
    5180:	8d 93       	st	X+, r24
    5182:	6d 01       	movw	r12, r26
    5184:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    5186:	ed e0       	ldi	r30, 0x0D	; 13
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	ce 0e       	add	r12, r30
    518c:	df 1e       	adc	r13, r31
    518e:	80 e8       	ldi	r24, 0x80	; 128
    5190:	d6 01       	movw	r26, r12
    5192:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    5194:	e2 e0       	ldi	r30, 0x02	; 2
    5196:	f0 e0       	ldi	r31, 0x00	; 0
    5198:	ce 0e       	add	r12, r30
    519a:	df 1e       	adc	r13, r31
    519c:	89 e2       	ldi	r24, 0x29	; 41
    519e:	d6 01       	movw	r26, r12
    51a0:	8c 93       	st	X, r24
    51a2:	e0 e9       	ldi	r30, 0x90	; 144
    51a4:	ff ef       	ldi	r31, 0xFF	; 255
    51a6:	ce 0e       	add	r12, r30
    51a8:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    51aa:	d7 01       	movw	r26, r14
    51ac:	a9 5b       	subi	r26, 0xB9	; 185
    51ae:	bf 4f       	sbci	r27, 0xFF	; 255
    51b0:	ef e1       	ldi	r30, 0x1F	; 31
    51b2:	f0 e2       	ldi	r31, 0x20	; 32
    51b4:	02 c0       	rjmp	.+4      	; 0x51ba <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    51b6:	81 91       	ld	r24, Z+
    51b8:	8d 93       	st	X+, r24
    51ba:	20 e2       	ldi	r18, 0x20	; 32
    51bc:	e2 33       	cpi	r30, 0x32	; 50
    51be:	f2 07       	cpc	r31, r18
    51c0:	d1 f7       	brne	.-12     	; 0x51b6 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    51c2:	4c e2       	ldi	r20, 0x2C	; 44
    51c4:	52 e0       	ldi	r21, 0x02	; 2
    51c6:	c4 0e       	add	r12, r20
    51c8:	d5 1e       	adc	r13, r21
    51ca:	85 e5       	ldi	r24, 0x55	; 85
    51cc:	d6 01       	movw	r26, r12
    51ce:	8d 93       	st	X+, r24
    51d0:	6d 01       	movw	r12, r26
    51d2:	8a ea       	ldi	r24, 0xAA	; 170
    51d4:	8c 93       	st	X, r24
    51d6:	e3 ed       	ldi	r30, 0xD3	; 211
    51d8:	fd ef       	ldi	r31, 0xFD	; 253
    51da:	ce 0e       	add	r12, r30
    51dc:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    51de:	89 89       	ldd	r24, Y+17	; 0x11
    51e0:	b7 01       	movw	r22, r14
    51e2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    51e4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    51e6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    51e8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    51ea:	01 e0       	ldi	r16, 0x01	; 1
    51ec:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    51f0:	88 23       	and	r24, r24
    51f2:	09 f0       	breq	.+2      	; 0x51f6 <f_mkfs+0x762>
    51f4:	4d c1       	rjmp	.+666    	; 0x5490 <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    51f6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    51f8:	f3 30       	cpi	r31, 0x03	; 3
    51fa:	61 f4       	brne	.+24     	; 0x5214 <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    51fc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    51fe:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5200:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5202:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5204:	2a 5f       	subi	r18, 0xFA	; 250
    5206:	3f 4f       	sbci	r19, 0xFF	; 255
    5208:	4f 4f       	sbci	r20, 0xFF	; 255
    520a:	5f 4f       	sbci	r21, 0xFF	; 255
    520c:	89 89       	ldd	r24, Y+17	; 0x11
    520e:	b7 01       	movw	r22, r14
    5210:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    5214:	f7 01       	movw	r30, r14
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	92 e0       	ldi	r25, 0x02	; 2
    521a:	01 c0       	rjmp	.+2      	; 0x521e <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    521c:	11 92       	st	Z+, r1
    521e:	01 97       	sbiw	r24, 0x01	; 1
    5220:	2f ef       	ldi	r18, 0xFF	; 255
    5222:	8f 3f       	cpi	r24, 0xFF	; 255
    5224:	92 07       	cpc	r25, r18
    5226:	d1 f7       	brne	.-12     	; 0x521c <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    5228:	3f 8d       	ldd	r19, Y+31	; 0x1f
    522a:	33 30       	cpi	r19, 0x03	; 3
    522c:	31 f1       	breq	.+76     	; 0x527a <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    522e:	31 30       	cpi	r19, 0x01	; 1
    5230:	29 f0       	breq	.+10     	; 0x523c <f_mkfs+0x7a8>
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	3f ef       	ldi	r19, 0xFF	; 255
    5236:	4f ef       	ldi	r20, 0xFF	; 255
    5238:	5f ef       	ldi	r21, 0xFF	; 255
    523a:	04 c0       	rjmp	.+8      	; 0x5244 <f_mkfs+0x7b0>
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	3f ef       	ldi	r19, 0xFF	; 255
    5240:	4f ef       	ldi	r20, 0xFF	; 255
    5242:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    5244:	81 2f       	mov	r24, r17
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	a0 e0       	ldi	r26, 0x00	; 0
    524a:	b0 e0       	ldi	r27, 0x00	; 0
    524c:	82 2b       	or	r24, r18
    524e:	93 2b       	or	r25, r19
    5250:	a4 2b       	or	r26, r20
    5252:	b5 2b       	or	r27, r21
    5254:	8d 83       	std	Y+5, r24	; 0x05
    5256:	9e 83       	std	Y+6, r25	; 0x06
    5258:	af 83       	std	Y+7, r26	; 0x07
    525a:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    525c:	f6 01       	movw	r30, r12
    525e:	86 a7       	std	Z+46, r24	; 0x2e
    5260:	29 2f       	mov	r18, r25
    5262:	33 27       	eor	r19, r19
    5264:	27 a7       	std	Z+47, r18	; 0x2f
    5266:	9d 01       	movw	r18, r26
    5268:	44 27       	eor	r20, r20
    526a:	55 27       	eor	r21, r21
    526c:	20 ab       	std	Z+48, r18	; 0x30
    526e:	8b 2f       	mov	r24, r27
    5270:	99 27       	eor	r25, r25
    5272:	aa 27       	eor	r26, r26
    5274:	bb 27       	eor	r27, r27
    5276:	81 ab       	std	Z+49, r24	; 0x31
    5278:	27 c0       	rjmp	.+78     	; 0x52c8 <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    527a:	88 ef       	ldi	r24, 0xF8	; 248
    527c:	d6 01       	movw	r26, r12
    527e:	9e 96       	adiw	r26, 0x2e	; 46
    5280:	8c 93       	st	X, r24
    5282:	9e 97       	sbiw	r26, 0x2e	; 46
    5284:	8f ef       	ldi	r24, 0xFF	; 255
    5286:	9f 96       	adiw	r26, 0x2f	; 47
    5288:	8c 93       	st	X, r24
    528a:	9f 97       	sbiw	r26, 0x2f	; 47
    528c:	d0 96       	adiw	r26, 0x30	; 48
    528e:	8c 93       	st	X, r24
    5290:	d0 97       	sbiw	r26, 0x30	; 48
    5292:	d1 96       	adiw	r26, 0x31	; 49
    5294:	8c 93       	st	X, r24
    5296:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5298:	d2 96       	adiw	r26, 0x32	; 50
    529a:	8c 93       	st	X, r24
    529c:	d2 97       	sbiw	r26, 0x32	; 50
    529e:	d3 96       	adiw	r26, 0x33	; 51
    52a0:	8c 93       	st	X, r24
    52a2:	d3 97       	sbiw	r26, 0x33	; 51
    52a4:	d4 96       	adiw	r26, 0x34	; 52
    52a6:	8c 93       	st	X, r24
    52a8:	d4 97       	sbiw	r26, 0x34	; 52
    52aa:	d5 96       	adiw	r26, 0x35	; 53
    52ac:	8c 93       	st	X, r24
    52ae:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    52b0:	d6 96       	adiw	r26, 0x36	; 54
    52b2:	8c 93       	st	X, r24
    52b4:	d6 97       	sbiw	r26, 0x36	; 54
    52b6:	d7 96       	adiw	r26, 0x37	; 55
    52b8:	8c 93       	st	X, r24
    52ba:	d7 97       	sbiw	r26, 0x37	; 55
    52bc:	d8 96       	adiw	r26, 0x38	; 56
    52be:	8c 93       	st	X, r24
    52c0:	d8 97       	sbiw	r26, 0x38	; 56
    52c2:	8f e0       	ldi	r24, 0x0F	; 15
    52c4:	d9 96       	adiw	r26, 0x39	; 57
    52c6:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    52c8:	89 89       	ldd	r24, Y+17	; 0x11
    52ca:	b7 01       	movw	r22, r14
    52cc:	29 85       	ldd	r18, Y+9	; 0x09
    52ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    52d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    52d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    52d4:	01 e0       	ldi	r16, 0x01	; 1
    52d6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    52da:	88 23       	and	r24, r24
    52dc:	09 f0       	breq	.+2      	; 0x52e0 <f_mkfs+0x84c>
    52de:	d8 c0       	rjmp	.+432    	; 0x5490 <f_mkfs+0x9fc>
    52e0:	f7 01       	movw	r30, r14
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	92 e0       	ldi	r25, 0x02	; 2
    52e6:	01 c0       	rjmp	.+2      	; 0x52ea <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    52e8:	11 92       	st	Z+, r1
    52ea:	01 97       	sbiw	r24, 0x01	; 1
    52ec:	bf ef       	ldi	r27, 0xFF	; 255
    52ee:	8f 3f       	cpi	r24, 0xFF	; 255
    52f0:	9b 07       	cpc	r25, r27
    52f2:	d1 f7       	brne	.-12     	; 0x52e8 <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    52f4:	89 84       	ldd	r8, Y+9	; 0x09
    52f6:	9a 84       	ldd	r9, Y+10	; 0x0a
    52f8:	ab 84       	ldd	r10, Y+11	; 0x0b
    52fa:	bc 84       	ldd	r11, Y+12	; 0x0c
    52fc:	08 94       	sec
    52fe:	81 1c       	adc	r8, r1
    5300:	91 1c       	adc	r9, r1
    5302:	a1 1c       	adc	r10, r1
    5304:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	a0 e0       	ldi	r26, 0x00	; 0
    530c:	b0 e0       	ldi	r27, 0x00	; 0
    530e:	16 c0       	rjmp	.+44     	; 0x533c <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5310:	89 89       	ldd	r24, Y+17	; 0x11
    5312:	b7 01       	movw	r22, r14
    5314:	a5 01       	movw	r20, r10
    5316:	94 01       	movw	r18, r8
    5318:	01 e0       	ldi	r16, 0x01	; 1
    531a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    531e:	88 23       	and	r24, r24
    5320:	09 f0       	breq	.+2      	; 0x5324 <f_mkfs+0x890>
    5322:	b6 c0       	rjmp	.+364    	; 0x5490 <f_mkfs+0x9fc>
    5324:	08 94       	sec
    5326:	81 1c       	adc	r8, r1
    5328:	91 1c       	adc	r9, r1
    532a:	a1 1c       	adc	r10, r1
    532c:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	af 81       	ldd	r26, Y+7	; 0x07
    5334:	b8 85       	ldd	r27, Y+8	; 0x08
    5336:	01 96       	adiw	r24, 0x01	; 1
    5338:	a1 1d       	adc	r26, r1
    533a:	b1 1d       	adc	r27, r1
    533c:	8d 83       	std	Y+5, r24	; 0x05
    533e:	9e 83       	std	Y+6, r25	; 0x06
    5340:	af 83       	std	Y+7, r26	; 0x07
    5342:	b8 87       	std	Y+8, r27	; 0x08
    5344:	8d 81       	ldd	r24, Y+5	; 0x05
    5346:	9e 81       	ldd	r25, Y+6	; 0x06
    5348:	af 81       	ldd	r26, Y+7	; 0x07
    534a:	b8 85       	ldd	r27, Y+8	; 0x08
    534c:	84 15       	cp	r24, r4
    534e:	95 05       	cpc	r25, r5
    5350:	a6 05       	cpc	r26, r6
    5352:	b7 05       	cpc	r27, r7
    5354:	e8 f2       	brcs	.-70     	; 0x5310 <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    5356:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5358:	e3 30       	cpi	r30, 0x03	; 3
    535a:	11 f0       	breq	.+4      	; 0x5360 <f_mkfs+0x8cc>
    535c:	fa 89       	ldd	r31, Y+18	; 0x12
    535e:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5360:	24 01       	movw	r4, r8
    5362:	35 01       	movw	r6, r10
    5364:	08 94       	sec
    5366:	41 1c       	adc	r4, r1
    5368:	51 1c       	adc	r5, r1
    536a:	61 1c       	adc	r6, r1
    536c:	71 1c       	adc	r7, r1
    536e:	89 89       	ldd	r24, Y+17	; 0x11
    5370:	b7 01       	movw	r22, r14
    5372:	a5 01       	movw	r20, r10
    5374:	94 01       	movw	r18, r8
    5376:	01 e0       	ldi	r16, 0x01	; 1
    5378:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
    537c:	88 23       	and	r24, r24
    537e:	09 f0       	breq	.+2      	; 0x5382 <f_mkfs+0x8ee>
    5380:	87 c0       	rjmp	.+270    	; 0x5490 <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    5382:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5384:	21 50       	subi	r18, 0x01	; 1
    5386:	2e 8f       	std	Y+30, r18	; 0x1e
    5388:	22 23       	and	r18, r18
    538a:	19 f0       	breq	.+6      	; 0x5392 <f_mkfs+0x8fe>
    538c:	53 01       	movw	r10, r6
    538e:	42 01       	movw	r8, r4
    5390:	e7 cf       	rjmp	.-50     	; 0x5360 <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    5392:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5394:	33 30       	cpi	r19, 0x03	; 3
    5396:	09 f0       	breq	.+2      	; 0x539a <f_mkfs+0x906>
    5398:	70 c0       	rjmp	.+224    	; 0x547a <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    539a:	4c e2       	ldi	r20, 0x2C	; 44
    539c:	52 e0       	ldi	r21, 0x02	; 2
    539e:	c4 0e       	add	r12, r20
    53a0:	d5 1e       	adc	r13, r21
    53a2:	85 e5       	ldi	r24, 0x55	; 85
    53a4:	d6 01       	movw	r26, r12
    53a6:	8d 93       	st	X+, r24
    53a8:	6d 01       	movw	r12, r26
    53aa:	8a ea       	ldi	r24, 0xAA	; 170
    53ac:	8c 93       	st	X, r24
    53ae:	e3 ed       	ldi	r30, 0xD3	; 211
    53b0:	fd ef       	ldi	r31, 0xFD	; 253
    53b2:	ce 0e       	add	r12, r30
    53b4:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    53b6:	82 e5       	ldi	r24, 0x52	; 82
    53b8:	d6 01       	movw	r26, r12
    53ba:	9e 96       	adiw	r26, 0x2e	; 46
    53bc:	8c 93       	st	X, r24
    53be:	9e 97       	sbiw	r26, 0x2e	; 46
    53c0:	9f 96       	adiw	r26, 0x2f	; 47
    53c2:	8c 93       	st	X, r24
    53c4:	9f 97       	sbiw	r26, 0x2f	; 47
    53c6:	21 e6       	ldi	r18, 0x61	; 97
    53c8:	d0 96       	adiw	r26, 0x30	; 48
    53ca:	2c 93       	st	X, r18
    53cc:	d0 97       	sbiw	r26, 0x30	; 48
    53ce:	91 e4       	ldi	r25, 0x41	; 65
    53d0:	d1 96       	adiw	r26, 0x31	; 49
    53d2:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    53d4:	e2 e1       	ldi	r30, 0x12	; 18
    53d6:	f2 e0       	ldi	r31, 0x02	; 2
    53d8:	ce 0e       	add	r12, r30
    53da:	df 1e       	adc	r13, r31
    53dc:	82 e7       	ldi	r24, 0x72	; 114
    53de:	d6 01       	movw	r26, r12
    53e0:	8d 93       	st	X+, r24
    53e2:	fd 01       	movw	r30, r26
    53e4:	81 93       	st	Z+, r24
    53e6:	df 01       	movw	r26, r30
    53e8:	9d 93       	st	X+, r25
    53ea:	fd 01       	movw	r30, r26
    53ec:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    53ee:	89 a1       	ldd	r24, Y+33	; 0x21
    53f0:	81 50       	subi	r24, 0x01	; 1
    53f2:	df 01       	movw	r26, r30
    53f4:	8d 93       	st	X+, r24
    53f6:	89 a1       	ldd	r24, Y+33	; 0x21
    53f8:	9a a1       	ldd	r25, Y+34	; 0x22
    53fa:	01 97       	sbiw	r24, 0x01	; 1
    53fc:	fd 01       	movw	r30, r26
    53fe:	91 93       	st	Z+, r25
    5400:	89 a1       	ldd	r24, Y+33	; 0x21
    5402:	9a a1       	ldd	r25, Y+34	; 0x22
    5404:	ab a1       	ldd	r26, Y+35	; 0x23
    5406:	bc a1       	ldd	r27, Y+36	; 0x24
    5408:	01 97       	sbiw	r24, 0x01	; 1
    540a:	a1 09       	sbc	r26, r1
    540c:	b1 09       	sbc	r27, r1
    540e:	9d 01       	movw	r18, r26
    5410:	44 27       	eor	r20, r20
    5412:	55 27       	eor	r21, r21
    5414:	21 93       	st	Z+, r18
    5416:	8b 2f       	mov	r24, r27
    5418:	99 27       	eor	r25, r25
    541a:	aa 27       	eor	r26, r26
    541c:	bb 27       	eor	r27, r27
    541e:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    5420:	8f ef       	ldi	r24, 0xFF	; 255
    5422:	df 01       	movw	r26, r30
    5424:	8d 93       	st	X+, r24
    5426:	fd 01       	movw	r30, r26
    5428:	81 93       	st	Z+, r24
    542a:	df 01       	movw	r26, r30
    542c:	8d 93       	st	X+, r24
    542e:	fd 01       	movw	r30, r26
    5430:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    5432:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5434:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5436:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5438:	5d 8d       	ldd	r21, Y+29	; 0x1d
    543a:	2f 5f       	subi	r18, 0xFF	; 255
    543c:	3f 4f       	sbci	r19, 0xFF	; 255
    543e:	4f 4f       	sbci	r20, 0xFF	; 255
    5440:	5f 4f       	sbci	r21, 0xFF	; 255
    5442:	2a 8f       	std	Y+26, r18	; 0x1a
    5444:	3b 8f       	std	Y+27, r19	; 0x1b
    5446:	4c 8f       	std	Y+28, r20	; 0x1c
    5448:	5d 8f       	std	Y+29, r21	; 0x1d
    544a:	89 89       	ldd	r24, Y+17	; 0x11
    544c:	b7 01       	movw	r22, r14
    544e:	01 e0       	ldi	r16, 0x01	; 1
    5450:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    5454:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5456:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5458:	ac 8d       	ldd	r26, Y+28	; 0x1c
    545a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    545c:	06 96       	adiw	r24, 0x06	; 6
    545e:	a1 1d       	adc	r26, r1
    5460:	b1 1d       	adc	r27, r1
    5462:	8a 8f       	std	Y+26, r24	; 0x1a
    5464:	9b 8f       	std	Y+27, r25	; 0x1b
    5466:	ac 8f       	std	Y+28, r26	; 0x1c
    5468:	bd 8f       	std	Y+29, r27	; 0x1d
    546a:	89 89       	ldd	r24, Y+17	; 0x11
    546c:	b7 01       	movw	r22, r14
    546e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5470:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5472:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5474:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5476:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    547a:	89 89       	ldd	r24, Y+17	; 0x11
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	0e 94 52 07 	call	0xea4	; 0xea4 <disk_ioctl>
    5486:	88 23       	and	r24, r24
    5488:	21 f0       	breq	.+8      	; 0x5492 <f_mkfs+0x9fe>
    548a:	02 c0       	rjmp	.+4      	; 0x5490 <f_mkfs+0x9fc>
    548c:	8e e0       	ldi	r24, 0x0E	; 14
    548e:	01 c0       	rjmp	.+2      	; 0x5492 <f_mkfs+0x9fe>
    5490:	81 e0       	ldi	r24, 0x01	; 1
}
    5492:	a4 96       	adiw	r28, 0x24	; 36
    5494:	cd bf       	out	0x3d, r28	; 61
    5496:	de bf       	out	0x3e, r29	; 62
    5498:	cf 91       	pop	r28
    549a:	df 91       	pop	r29
    549c:	1f 91       	pop	r17
    549e:	0f 91       	pop	r16
    54a0:	ff 90       	pop	r15
    54a2:	ef 90       	pop	r14
    54a4:	df 90       	pop	r13
    54a6:	cf 90       	pop	r12
    54a8:	bf 90       	pop	r11
    54aa:	af 90       	pop	r10
    54ac:	9f 90       	pop	r9
    54ae:	8f 90       	pop	r8
    54b0:	7f 90       	pop	r7
    54b2:	6f 90       	pop	r6
    54b4:	5f 90       	pop	r5
    54b6:	4f 90       	pop	r4
    54b8:	3f 90       	pop	r3
    54ba:	2f 90       	pop	r2
    54bc:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    54be:	7c 01       	movw	r14, r24
    54c0:	8d 01       	movw	r16, r26
    54c2:	ee 0c       	add	r14, r14
    54c4:	ff 1c       	adc	r15, r15
    54c6:	00 1f       	adc	r16, r16
    54c8:	11 1f       	adc	r17, r17
    54ca:	e8 0e       	add	r14, r24
    54cc:	f9 1e       	adc	r15, r25
    54ce:	0a 1f       	adc	r16, r26
    54d0:	1b 1f       	adc	r17, r27
    54d2:	08 94       	sec
    54d4:	e1 1c       	adc	r14, r1
    54d6:	f1 1c       	adc	r15, r1
    54d8:	01 1d       	adc	r16, r1
    54da:	11 1d       	adc	r17, r1
    54dc:	16 95       	lsr	r17
    54de:	07 95       	ror	r16
    54e0:	f7 94       	ror	r15
    54e2:	e7 94       	ror	r14
    54e4:	22 e0       	ldi	r18, 0x02	; 2
    54e6:	32 e0       	ldi	r19, 0x02	; 2
    54e8:	40 e0       	ldi	r20, 0x00	; 0
    54ea:	50 e0       	ldi	r21, 0x00	; 0
    54ec:	e2 0e       	add	r14, r18
    54ee:	f3 1e       	adc	r15, r19
    54f0:	04 1f       	adc	r16, r20
    54f2:	15 1f       	adc	r17, r21
    54f4:	b9 e0       	ldi	r27, 0x09	; 9
    54f6:	16 95       	lsr	r17
    54f8:	07 95       	ror	r16
    54fa:	f7 94       	ror	r15
    54fc:	e7 94       	ror	r14
    54fe:	ba 95       	dec	r27
    5500:	d1 f7       	brne	.-12     	; 0x54f6 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    5502:	38 a1       	ldd	r19, Y+32	; 0x20
    5504:	83 2f       	mov	r24, r19
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	01 96       	adiw	r24, 0x01	; 1
    550a:	9c 01       	movw	r18, r24
    550c:	44 27       	eor	r20, r20
    550e:	37 fd       	sbrc	r19, 7
    5510:	40 95       	com	r20
    5512:	54 2f       	mov	r21, r20
    5514:	2e 8b       	std	Y+22, r18	; 0x16
    5516:	3f 8b       	std	Y+23, r19	; 0x17
    5518:	48 8f       	std	Y+24, r20	; 0x18
    551a:	59 8f       	std	Y+25, r21	; 0x19
    551c:	80 e2       	ldi	r24, 0x20	; 32
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	a0 e0       	ldi	r26, 0x00	; 0
    5522:	b0 e0       	ldi	r27, 0x00	; 0
    5524:	8a 8b       	std	Y+18, r24	; 0x12
    5526:	9b 8b       	std	Y+19, r25	; 0x13
    5528:	ac 8b       	std	Y+20, r26	; 0x14
    552a:	bd 8b       	std	Y+21, r27	; 0x15
    552c:	91 e0       	ldi	r25, 0x01	; 1
    552e:	9f 8f       	std	Y+31, r25	; 0x1f
    5530:	fe cb       	rjmp	.-2052   	; 0x4d2e <f_mkfs+0x29a>

00005532 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    5532:	6f 92       	push	r6
    5534:	7f 92       	push	r7
    5536:	8f 92       	push	r8
    5538:	9f 92       	push	r9
    553a:	af 92       	push	r10
    553c:	bf 92       	push	r11
    553e:	cf 92       	push	r12
    5540:	df 92       	push	r13
    5542:	ef 92       	push	r14
    5544:	ff 92       	push	r15
    5546:	0f 93       	push	r16
    5548:	1f 93       	push	r17
    554a:	df 93       	push	r29
    554c:	cf 93       	push	r28
    554e:	0f 92       	push	r0
    5550:	0f 92       	push	r0
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	5c 01       	movw	r10, r24
    5558:	6b 01       	movw	r12, r22
    555a:	4a 01       	movw	r8, r20
    555c:	8c 01       	movw	r16, r24
    555e:	ee 24       	eor	r14, r14
    5560:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5562:	08 94       	sec
    5564:	c1 08       	sbc	r12, r1
    5566:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    5568:	3e 01       	movw	r6, r28
    556a:	08 94       	sec
    556c:	61 1c       	adc	r6, r1
    556e:	71 1c       	adc	r7, r1
    5570:	13 c0       	rjmp	.+38     	; 0x5598 <f_gets+0x66>
    5572:	c4 01       	movw	r24, r8
    5574:	b8 01       	movw	r22, r16
    5576:	41 e0       	ldi	r20, 0x01	; 1
    5578:	50 e0       	ldi	r21, 0x00	; 0
    557a:	93 01       	movw	r18, r6
    557c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    5580:	89 81       	ldd	r24, Y+1	; 0x01
    5582:	9a 81       	ldd	r25, Y+2	; 0x02
    5584:	01 97       	sbiw	r24, 0x01	; 1
    5586:	59 f4       	brne	.+22     	; 0x559e <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    5588:	08 94       	sec
    558a:	e1 1c       	adc	r14, r1
    558c:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    558e:	f8 01       	movw	r30, r16
    5590:	81 91       	ld	r24, Z+
    5592:	8f 01       	movw	r16, r30
    5594:	8a 30       	cpi	r24, 0x0A	; 10
    5596:	19 f0       	breq	.+6      	; 0x559e <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5598:	ec 14       	cp	r14, r12
    559a:	fd 04       	cpc	r15, r13
    559c:	54 f3       	brlt	.-44     	; 0x5572 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    559e:	f8 01       	movw	r30, r16
    55a0:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    55a2:	ef 28       	or	r14, r15
    55a4:	11 f4       	brne	.+4      	; 0x55aa <f_gets+0x78>
    55a6:	aa 24       	eor	r10, r10
    55a8:	bb 24       	eor	r11, r11
}
    55aa:	c5 01       	movw	r24, r10
    55ac:	0f 90       	pop	r0
    55ae:	0f 90       	pop	r0
    55b0:	cf 91       	pop	r28
    55b2:	df 91       	pop	r29
    55b4:	1f 91       	pop	r17
    55b6:	0f 91       	pop	r16
    55b8:	ff 90       	pop	r15
    55ba:	ef 90       	pop	r14
    55bc:	df 90       	pop	r13
    55be:	cf 90       	pop	r12
    55c0:	bf 90       	pop	r11
    55c2:	af 90       	pop	r10
    55c4:	9f 90       	pop	r9
    55c6:	8f 90       	pop	r8
    55c8:	7f 90       	pop	r7
    55ca:	6f 90       	pop	r6
    55cc:	08 95       	ret

000055ce <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    55ce:	0f 93       	push	r16
    55d0:	1f 93       	push	r17
    55d2:	df 93       	push	r29
    55d4:	cf 93       	push	r28
    55d6:	00 d0       	rcall	.+0      	; 0x55d8 <f_putc+0xa>
    55d8:	cd b7       	in	r28, 0x3d	; 61
    55da:	de b7       	in	r29, 0x3e	; 62
    55dc:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    55de:	61 15       	cp	r22, r1
    55e0:	71 05       	cpc	r23, r1
    55e2:	91 f0       	breq	.+36     	; 0x5608 <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    55e4:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    55e6:	cb 01       	movw	r24, r22
    55e8:	be 01       	movw	r22, r28
    55ea:	6f 5f       	subi	r22, 0xFF	; 255
    55ec:	7f 4f       	sbci	r23, 0xFF	; 255
    55ee:	41 e0       	ldi	r20, 0x01	; 1
    55f0:	50 e0       	ldi	r21, 0x00	; 0
    55f2:	9e 01       	movw	r18, r28
    55f4:	2e 5f       	subi	r18, 0xFE	; 254
    55f6:	3f 4f       	sbci	r19, 0xFF	; 255
    55f8:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    55fc:	8a 81       	ldd	r24, Y+2	; 0x02
    55fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5600:	89 2b       	or	r24, r25
    5602:	11 f4       	brne	.+4      	; 0x5608 <f_putc+0x3a>
    5604:	0f ef       	ldi	r16, 0xFF	; 255
    5606:	1f ef       	ldi	r17, 0xFF	; 255
}
    5608:	c8 01       	movw	r24, r16
    560a:	23 96       	adiw	r28, 0x03	; 3
    560c:	cd bf       	out	0x3d, r28	; 61
    560e:	de bf       	out	0x3e, r29	; 62
    5610:	cf 91       	pop	r28
    5612:	df 91       	pop	r29
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	08 95       	ret

0000561a <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    561a:	ef 92       	push	r14
    561c:	ff 92       	push	r15
    561e:	0f 93       	push	r16
    5620:	1f 93       	push	r17
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	8c 01       	movw	r16, r24
    5628:	7b 01       	movw	r14, r22
    562a:	c0 e0       	ldi	r28, 0x00	; 0
    562c:	d0 e0       	ldi	r29, 0x00	; 0
    562e:	0d c0       	rjmp	.+26     	; 0x564a <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	b7 01       	movw	r22, r14
    5634:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <f_putc>
    5638:	8f 5f       	subi	r24, 0xFF	; 255
    563a:	9f 4f       	sbci	r25, 0xFF	; 255
    563c:	19 f4       	brne	.+6      	; 0x5644 <f_puts+0x2a>
    563e:	cf ef       	ldi	r28, 0xFF	; 255
    5640:	df ef       	ldi	r29, 0xFF	; 255
    5642:	07 c0       	rjmp	.+14     	; 0x5652 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    5644:	0f 5f       	subi	r16, 0xFF	; 255
    5646:	1f 4f       	sbci	r17, 0xFF	; 255
    5648:	21 96       	adiw	r28, 0x01	; 1
    564a:	f8 01       	movw	r30, r16
    564c:	80 81       	ld	r24, Z
    564e:	88 23       	and	r24, r24
    5650:	79 f7       	brne	.-34     	; 0x5630 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    5652:	ce 01       	movw	r24, r28
    5654:	df 91       	pop	r29
    5656:	cf 91       	pop	r28
    5658:	1f 91       	pop	r17
    565a:	0f 91       	pop	r16
    565c:	ff 90       	pop	r15
    565e:	ef 90       	pop	r14
    5660:	08 95       	ret

00005662 <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    5662:	8d ed       	ldi	r24, 0xDD	; 221
    5664:	9a e3       	ldi	r25, 0x3A	; 58
    5666:	0e 94 a4 1c 	call	0x3948	; 0x3948 <f_close>
}
    566a:	08 95       	ret

0000566c <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    566c:	e0 ea       	ldi	r30, 0xA0	; 160
    566e:	f6 e0       	ldi	r31, 0x06	; 6
    5670:	80 85       	ldd	r24, Z+8	; 0x08
    5672:	82 95       	swap	r24
    5674:	8f 70       	andi	r24, 0x0F	; 15
    5676:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    5678:	81 70       	andi	r24, 0x01	; 1
    567a:	08 95       	ret

0000567c <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    567c:	af 92       	push	r10
    567e:	bf 92       	push	r11
    5680:	cf 92       	push	r12
    5682:	df 92       	push	r13
    5684:	ef 92       	push	r14
    5686:	ff 92       	push	r15
    5688:	0f 93       	push	r16
    568a:	1f 93       	push	r17
    568c:	df 93       	push	r29
    568e:	cf 93       	push	r28
    5690:	0f 92       	push	r0
    5692:	0f 92       	push	r0
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
    5698:	5c 01       	movw	r10, r24
    569a:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    569c:	8d ed       	ldi	r24, 0xDD	; 221
    569e:	9a e3       	ldi	r25, 0x3A	; 58
    56a0:	b5 01       	movw	r22, r10
    56a2:	a6 01       	movw	r20, r12
    56a4:	9e 01       	movw	r18, r28
    56a6:	2f 5f       	subi	r18, 0xFF	; 255
    56a8:	3f 4f       	sbci	r19, 0xFF	; 255
    56aa:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <f_write>
    56ae:	60 e0       	ldi	r22, 0x00	; 0
    56b0:	70 e0       	ldi	r23, 0x00	; 0
    56b2:	3b c0       	rjmp	.+118    	; 0x572a <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    56b4:	e0 90 9d 45 	lds	r14, 0x459D
    56b8:	f0 90 9e 45 	lds	r15, 0x459E
    56bc:	00 91 9f 45 	lds	r16, 0x459F
    56c0:	10 91 a0 45 	lds	r17, 0x45A0
    56c4:	20 91 9d 45 	lds	r18, 0x459D
    56c8:	30 91 9e 45 	lds	r19, 0x459E
    56cc:	40 91 9f 45 	lds	r20, 0x459F
    56d0:	50 91 a0 45 	lds	r21, 0x45A0
    56d4:	30 70       	andi	r19, 0x00	; 0
    56d6:	40 70       	andi	r20, 0x00	; 0
    56d8:	50 70       	andi	r21, 0x00	; 0
    56da:	f5 01       	movw	r30, r10
    56dc:	e6 0f       	add	r30, r22
    56de:	f7 1f       	adc	r31, r23
    56e0:	80 81       	ld	r24, Z
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	a0 e0       	ldi	r26, 0x00	; 0
    56e6:	b0 e0       	ldi	r27, 0x00	; 0
    56e8:	28 27       	eor	r18, r24
    56ea:	39 27       	eor	r19, r25
    56ec:	4a 27       	eor	r20, r26
    56ee:	5b 27       	eor	r21, r27
    56f0:	22 0f       	add	r18, r18
    56f2:	33 1f       	adc	r19, r19
    56f4:	22 0f       	add	r18, r18
    56f6:	33 1f       	adc	r19, r19
    56f8:	2e 5e       	subi	r18, 0xEE	; 238
    56fa:	3c 4d       	sbci	r19, 0xDC	; 220
    56fc:	ef 2c       	mov	r14, r15
    56fe:	f0 2e       	mov	r15, r16
    5700:	01 2f       	mov	r16, r17
    5702:	11 27       	eor	r17, r17
    5704:	f9 01       	movw	r30, r18
    5706:	80 81       	ld	r24, Z
    5708:	91 81       	ldd	r25, Z+1	; 0x01
    570a:	a2 81       	ldd	r26, Z+2	; 0x02
    570c:	b3 81       	ldd	r27, Z+3	; 0x03
    570e:	e8 26       	eor	r14, r24
    5710:	f9 26       	eor	r15, r25
    5712:	0a 27       	eor	r16, r26
    5714:	1b 27       	eor	r17, r27
    5716:	e0 92 9d 45 	sts	0x459D, r14
    571a:	f0 92 9e 45 	sts	0x459E, r15
    571e:	00 93 9f 45 	sts	0x459F, r16
    5722:	10 93 a0 45 	sts	0x45A0, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    5726:	6f 5f       	subi	r22, 0xFF	; 255
    5728:	7f 4f       	sbci	r23, 0xFF	; 255
    572a:	6c 15       	cp	r22, r12
    572c:	7d 05       	cpc	r23, r13
    572e:	10 f2       	brcs	.-124    	; 0x56b4 <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	cf 91       	pop	r28
    5736:	df 91       	pop	r29
    5738:	1f 91       	pop	r17
    573a:	0f 91       	pop	r16
    573c:	ff 90       	pop	r15
    573e:	ef 90       	pop	r14
    5740:	df 90       	pop	r13
    5742:	cf 90       	pop	r12
    5744:	bf 90       	pop	r11
    5746:	af 90       	pop	r10
    5748:	08 95       	ret

0000574a <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    574a:	60 93 16 34 	sts	0x3416, r22
	tmp32[1] = (uint8_t)(var >> 8);
    574e:	27 2f       	mov	r18, r23
    5750:	38 2f       	mov	r19, r24
    5752:	49 2f       	mov	r20, r25
    5754:	55 27       	eor	r21, r21
    5756:	20 93 17 34 	sts	0x3417, r18
	tmp32[2] = (uint8_t)(var >> 16);
    575a:	9c 01       	movw	r18, r24
    575c:	44 27       	eor	r20, r20
    575e:	55 27       	eor	r21, r21
    5760:	20 93 18 34 	sts	0x3418, r18
	tmp32[3] = (uint8_t)(var >> 24);
    5764:	69 2f       	mov	r22, r25
    5766:	77 27       	eor	r23, r23
    5768:	88 27       	eor	r24, r24
    576a:	99 27       	eor	r25, r25
    576c:	60 93 19 34 	sts	0x3419, r22
	SD_WriteBuffer(tmp32,4);
    5770:	86 e1       	ldi	r24, 0x16	; 22
    5772:	94 e3       	ldi	r25, 0x34	; 52
    5774:	64 e0       	ldi	r22, 0x04	; 4
    5776:	70 e0       	ldi	r23, 0x00	; 0
    5778:	0e 94 3e 2b 	call	0x567c	; 0x567c <SD_WriteBuffer>
}
    577c:	08 95       	ret

0000577e <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    577e:	80 93 1e 46 	sts	0x461E, r24
	tmp16[1] = (uint8_t)(var >> 8);
    5782:	90 93 1f 46 	sts	0x461F, r25
	SD_WriteBuffer(tmp16,2);
    5786:	8e e1       	ldi	r24, 0x1E	; 30
    5788:	96 e4       	ldi	r25, 0x46	; 70
    578a:	62 e0       	ldi	r22, 0x02	; 2
    578c:	70 e0       	ldi	r23, 0x00	; 0
    578e:	0e 94 3e 2b 	call	0x567c	; 0x567c <SD_WriteBuffer>
}
    5792:	08 95       	ret

00005794 <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    5794:	80 93 08 3a 	sts	0x3A08, r24
	SD_WriteBuffer(tmp8,1);
    5798:	88 e0       	ldi	r24, 0x08	; 8
    579a:	9a e3       	ldi	r25, 0x3A	; 58
    579c:	61 e0       	ldi	r22, 0x01	; 1
    579e:	70 e0       	ldi	r23, 0x00	; 0
    57a0:	0e 94 3e 2b 	call	0x567c	; 0x567c <SD_WriteBuffer>
}
    57a4:	08 95       	ret

000057a6 <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    57a6:	8f ef       	ldi	r24, 0xFF	; 255
    57a8:	9f ef       	ldi	r25, 0xFF	; 255
    57aa:	af ef       	ldi	r26, 0xFF	; 255
    57ac:	bf ef       	ldi	r27, 0xFF	; 255
    57ae:	80 93 9d 45 	sts	0x459D, r24
    57b2:	90 93 9e 45 	sts	0x459E, r25
    57b6:	a0 93 9f 45 	sts	0x459F, r26
    57ba:	b0 93 a0 45 	sts	0x45A0, r27
}
    57be:	08 95       	ret

000057c0 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    57c0:	60 91 9d 45 	lds	r22, 0x459D
    57c4:	70 91 9e 45 	lds	r23, 0x459E
    57c8:	80 91 9f 45 	lds	r24, 0x459F
    57cc:	90 91 a0 45 	lds	r25, 0x45A0
    57d0:	60 95       	com	r22
    57d2:	70 95       	com	r23
    57d4:	80 95       	com	r24
    57d6:	90 95       	com	r25
    57d8:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
}
    57dc:	08 95       	ret

000057de <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	SD_Timer.PER = 576;
    57de:	e0 e0       	ldi	r30, 0x00	; 0
    57e0:	fa e0       	ldi	r31, 0x0A	; 10
    57e2:	80 e4       	ldi	r24, 0x40	; 64
    57e4:	92 e0       	ldi	r25, 0x02	; 2
    57e6:	86 a3       	std	Z+38, r24	; 0x26
    57e8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	SD_Timer.CTRLA = (SD_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    57ea:	80 81       	ld	r24, Z
    57ec:	80 7f       	andi	r24, 0xF0	; 240
    57ee:	86 60       	ori	r24, 0x06	; 6
    57f0:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	SD_Timer.INTCTRLA = (SD_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    57f2:	86 81       	ldd	r24, Z+6	; 0x06
    57f4:	8c 7f       	andi	r24, 0xFC	; 252
    57f6:	82 60       	ori	r24, 0x02	; 2
    57f8:	86 83       	std	Z+6, r24	; 0x06
	
}
    57fa:	08 95       	ret

000057fc <SD_Init>:
0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
};


uint8_t SD_Init(void){
    57fc:	1f 93       	push	r17
	uint8_t tmp;

	SD_CD_Port.DIRCLR = 1 << SD_CD;
    57fe:	80 e1       	ldi	r24, 0x10	; 16
    5800:	e0 ea       	ldi	r30, 0xA0	; 160
    5802:	f6 e0       	ldi	r31, 0x06	; 6
    5804:	82 83       	std	Z+2, r24	; 0x02
	SD_Timer_Init();
    5806:	0e 94 ef 2b 	call	0x57de	; 0x57de <SD_Timer_Init>
	tmp = disk_initialize(0);
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <disk_initialize>
    5810:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    5812:	80 e0       	ldi	r24, 0x00	; 0
    5814:	60 e0       	ldi	r22, 0x00	; 0
    5816:	78 e2       	ldi	r23, 0x28	; 40
    5818:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <f_mount>
	f_mount(1, &fso1);
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	6e e2       	ldi	r22, 0x2E	; 46
    5820:	7a e2       	ldi	r23, 0x2A	; 42
    5822:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <f_mount>
	return tmp;
}
    5826:	81 2f       	mov	r24, r17
    5828:	1f 91       	pop	r17
    582a:	08 95       	ret

0000582c <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(SD_Timer_vect)
{
    582c:	1f 92       	push	r1
    582e:	0f 92       	push	r0
    5830:	0f b6       	in	r0, 0x3f	; 63
    5832:	0f 92       	push	r0
    5834:	0b b6       	in	r0, 0x3b	; 59
    5836:	0f 92       	push	r0
    5838:	11 24       	eor	r1, r1
    583a:	2f 93       	push	r18
    583c:	3f 93       	push	r19
    583e:	4f 93       	push	r20
    5840:	5f 93       	push	r21
    5842:	6f 93       	push	r22
    5844:	7f 93       	push	r23
    5846:	8f 93       	push	r24
    5848:	9f 93       	push	r25
    584a:	af 93       	push	r26
    584c:	bf 93       	push	r27
    584e:	ef 93       	push	r30
    5850:	ff 93       	push	r31
	disk_timerproc();
    5852:	0e 94 25 09 	call	0x124a	; 0x124a <disk_timerproc>
}
    5856:	ff 91       	pop	r31
    5858:	ef 91       	pop	r30
    585a:	bf 91       	pop	r27
    585c:	af 91       	pop	r26
    585e:	9f 91       	pop	r25
    5860:	8f 91       	pop	r24
    5862:	7f 91       	pop	r23
    5864:	6f 91       	pop	r22
    5866:	5f 91       	pop	r21
    5868:	4f 91       	pop	r20
    586a:	3f 91       	pop	r19
    586c:	2f 91       	pop	r18
    586e:	0f 90       	pop	r0
    5870:	0b be       	out	0x3b, r0	; 59
    5872:	0f 90       	pop	r0
    5874:	0f be       	out	0x3f, r0	; 63
    5876:	0f 90       	pop	r0
    5878:	1f 90       	pop	r1
    587a:	18 95       	reti

0000587c <Button_Init>:
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button){
	Button_Port.DIRCLR = (1 << button);
    587c:	21 e0       	ldi	r18, 0x01	; 1
    587e:	30 e0       	ldi	r19, 0x00	; 0
    5880:	02 c0       	rjmp	.+4      	; 0x5886 <Button_Init+0xa>
    5882:	22 0f       	add	r18, r18
    5884:	33 1f       	adc	r19, r19
    5886:	8a 95       	dec	r24
    5888:	e2 f7       	brpl	.-8      	; 0x5882 <Button_Init+0x6>
    588a:	e0 ea       	ldi	r30, 0xA0	; 160
    588c:	f6 e0       	ldi	r31, 0x06	; 6
    588e:	22 83       	std	Z+2, r18	; 0x02
	PORTCFG.MPCMASK = (1 << button);
    5890:	20 93 b0 00 	sts	0x00B0, r18
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
    5894:	88 e3       	ldi	r24, 0x38	; 56
    5896:	80 8b       	std	Z+16, r24	; 0x10
}
    5898:	08 95       	ret

0000589a <Button_Pressed>:


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    589a:	40 91 a8 06 	lds	r20, 0x06A8
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	21 e0       	ldi	r18, 0x01	; 1
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	02 c0       	rjmp	.+4      	; 0x58aa <Button_Pressed+0x10>
    58a6:	22 0f       	add	r18, r18
    58a8:	33 1f       	adc	r19, r19
    58aa:	8a 95       	dec	r24
    58ac:	e2 f7       	brpl	.-8      	; 0x58a6 <Button_Pressed+0xc>
    58ae:	50 e0       	ldi	r21, 0x00	; 0
    58b0:	24 23       	and	r18, r20
    58b2:	35 23       	and	r19, r21
    58b4:	12 16       	cp	r1, r18
    58b6:	13 06       	cpc	r1, r19
    58b8:	0c f0       	brlt	.+2      	; 0x58bc <Button_Pressed+0x22>
    58ba:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
} 
    58bc:	89 2f       	mov	r24, r25
    58be:	08 95       	ret

000058c0 <Accel_Write_Byte>:
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    58c0:	e0 ec       	ldi	r30, 0xC0	; 192
    58c2:	f8 e0       	ldi	r31, 0x08	; 8
    58c4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    58c6:	80 91 c2 08 	lds	r24, 0x08C2
    58ca:	87 ff       	sbrs	r24, 7
    58cc:	fc cf       	rjmp	.-8      	; 0x58c6 <Accel_Write_Byte+0x6>
}
    58ce:	08 95       	ret

000058d0 <Accel_Read_Byte>:
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    58d0:	e0 ec       	ldi	r30, 0xC0	; 192
    58d2:	f8 e0       	ldi	r31, 0x08	; 8
    58d4:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    58d6:	80 91 c2 08 	lds	r24, 0x08C2
    58da:	87 ff       	sbrs	r24, 7
    58dc:	fc cf       	rjmp	.-8      	; 0x58d6 <Accel_Read_Byte+0x6>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    58de:	80 91 c3 08 	lds	r24, 0x08C3
}
    58e2:	08 95       	ret

000058e4 <Accel_WriteToAddress>:


void Accel_WriteToAddress(uint8_t addr, uint8_t byte){
    Accel_selectChip();
    58e4:	90 e1       	ldi	r25, 0x10	; 16
    58e6:	e0 e4       	ldi	r30, 0x40	; 64
    58e8:	f6 e0       	ldi	r31, 0x06	; 6
    58ea:	96 83       	std	Z+6, r25	; 0x06
    Accel_Write_Byte(addr & 0b00111111);
    58ec:	8f 73       	andi	r24, 0x3F	; 63
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    58ee:	e0 ec       	ldi	r30, 0xC0	; 192
    58f0:	f8 e0       	ldi	r31, 0x08	; 8
    58f2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    58f4:	80 91 c2 08 	lds	r24, 0x08C2
    58f8:	87 ff       	sbrs	r24, 7
    58fa:	fc cf       	rjmp	.-8      	; 0x58f4 <Accel_WriteToAddress+0x10>
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    58fc:	e0 ec       	ldi	r30, 0xC0	; 192
    58fe:	f8 e0       	ldi	r31, 0x08	; 8
    5900:	63 83       	std	Z+3, r22	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5902:	80 91 c2 08 	lds	r24, 0x08C2
    5906:	87 ff       	sbrs	r24, 7
    5908:	fc cf       	rjmp	.-8      	; 0x5902 <Accel_WriteToAddress+0x1e>

void Accel_WriteToAddress(uint8_t addr, uint8_t byte){
    Accel_selectChip();
    Accel_Write_Byte(addr & 0b00111111);
    Accel_Write_Byte(byte);
    Accel_deselectChip();
    590a:	80 e1       	ldi	r24, 0x10	; 16
    590c:	e0 e4       	ldi	r30, 0x40	; 64
    590e:	f6 e0       	ldi	r31, 0x06	; 6
    5910:	85 83       	std	Z+5, r24	; 0x05
}
    5912:	08 95       	ret

00005914 <Accel_Init>:
uint8_t       accelBufferToWriteTo  = 1;
uint16_t      accelBufferCounter    = 0;

void Accel_Init(void){

    Accel_PORT.DIRSET = Accel_MOSI_bm | Accel_SCK_bm | Accel_SS_bm;
    5914:	e0 e4       	ldi	r30, 0x40	; 64
    5916:	f6 e0       	ldi	r31, 0x06	; 6
    5918:	80 eb       	ldi	r24, 0xB0	; 176
    591a:	81 83       	std	Z+1, r24	; 0x01
    Accel_PORT.Accel_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    591c:	88 e3       	ldi	r24, 0x38	; 56
    591e:	84 8b       	std	Z+20, r24	; 0x14
    Accel_deselectChip();
    5920:	80 e1       	ldi	r24, 0x10	; 16
    5922:	85 83       	std	Z+5, r24	; 0x05

	  //Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
  	Accel_SPI.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_3_gc | SPI_PRESCALER_DIV4_gc;
    5924:	e0 ec       	ldi	r30, 0xC0	; 192
    5926:	f8 e0       	ldi	r31, 0x08	; 8
    5928:	80 81       	ld	r24, Z
    592a:	8c 65       	ori	r24, 0x5C	; 92
    592c:	80 83       	st	Z, r24

    Accel_INT_Port.DIRCLR = (1 << Accel_INT1) | (1 << Accel_INT2);
    592e:	8c e0       	ldi	r24, 0x0C	; 12
    5930:	e0 ea       	ldi	r30, 0xA0	; 160
    5932:	f6 e0       	ldi	r31, 0x06	; 6
    5934:	82 83       	std	Z+2, r24	; 0x02

    Accel_WriteToAddress(0x31,0x09);    // Data format:  4 wire spi, full resolution, right justified, 4 g's
    5936:	81 e3       	ldi	r24, 0x31	; 49
    5938:	69 e0       	ldi	r22, 0x09	; 9
    593a:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <Accel_WriteToAddress>
    Accel_WriteToAddress(0x2C,0x0C);    // normal operation, rate code of 400
    593e:	8c e2       	ldi	r24, 0x2C	; 44
    5940:	6c e0       	ldi	r22, 0x0C	; 12
    5942:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <Accel_WriteToAddress>
    Accel_WriteToAddress(0x2D,0x08);    // measure mode
    5946:	8d e2       	ldi	r24, 0x2D	; 45
    5948:	68 e0       	ldi	r22, 0x08	; 8
    594a:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <Accel_WriteToAddress>
    	// div  = 8
    	// per  = 5760
    	//  => 320 samples per second

    	// Set period/TOP value
    Accel_Sample_Timer.PER = 5760;
    594e:	e0 e0       	ldi	r30, 0x00	; 0
    5950:	fb e0       	ldi	r31, 0x0B	; 11
    5952:	80 e8       	ldi	r24, 0x80	; 128
    5954:	96 e1       	ldi	r25, 0x16	; 22
    5956:	86 a3       	std	Z+38, r24	; 0x26
    5958:	97 a3       	std	Z+39, r25	; 0x27

    	// Select clock source
    Accel_Sample_Timer.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    595a:	80 81       	ld	r24, Z
    595c:	80 7f       	andi	r24, 0xF0	; 240
    595e:	84 60       	ori	r24, 0x04	; 4
    5960:	80 83       	st	Z, r24

    	// Enable CCA interrupt
    Accel_Sample_Timer.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    5962:	86 81       	ldd	r24, Z+6	; 0x06
    5964:	83 60       	ori	r24, 0x03	; 3
    5966:	86 83       	std	Z+6, r24	; 0x06

}
    5968:	08 95       	ret

0000596a <Accel_ReadFromAddress>:
}


uint8_t Accel_ReadFromAddress(uint8_t addr){
    uint8_t tmp;
    Accel_selectChip();
    596a:	90 e1       	ldi	r25, 0x10	; 16
    596c:	e0 e4       	ldi	r30, 0x40	; 64
    596e:	f6 e0       	ldi	r31, 0x06	; 6
    5970:	96 83       	std	Z+6, r25	; 0x06
    Accel_Write_Byte(addr | 0b10000000);
    5972:	80 68       	ori	r24, 0x80	; 128
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5974:	e0 ec       	ldi	r30, 0xC0	; 192
    5976:	f8 e0       	ldi	r31, 0x08	; 8
    5978:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    597a:	80 91 c2 08 	lds	r24, 0x08C2
    597e:	87 ff       	sbrs	r24, 7
    5980:	fc cf       	rjmp	.-8      	; 0x597a <Accel_ReadFromAddress+0x10>
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5982:	e0 ec       	ldi	r30, 0xC0	; 192
    5984:	f8 e0       	ldi	r31, 0x08	; 8
    5986:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5988:	80 91 c2 08 	lds	r24, 0x08C2
    598c:	87 ff       	sbrs	r24, 7
    598e:	fc cf       	rjmp	.-8      	; 0x5988 <Accel_ReadFromAddress+0x1e>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5990:	80 91 c3 08 	lds	r24, 0x08C3
uint8_t Accel_ReadFromAddress(uint8_t addr){
    uint8_t tmp;
    Accel_selectChip();
    Accel_Write_Byte(addr | 0b10000000);
    tmp = Accel_Read_Byte();
    Accel_deselectChip();
    5994:	90 e1       	ldi	r25, 0x10	; 16
    5996:	e0 e4       	ldi	r30, 0x40	; 64
    5998:	f6 e0       	ldi	r31, 0x06	; 6
    599a:	95 83       	std	Z+5, r25	; 0x05
    return tmp;
}
    599c:	08 95       	ret

0000599e <Accel_ReadResults>:

void Accel_ReadResults(uint16_t * buffLocation, uint16_t buffCounter){
    599e:	dc 01       	movw	r26, r24
    // 0 = x, 1 = y, 2 = z

    Accel_selectChip();
    59a0:	80 e1       	ldi	r24, 0x10	; 16
    59a2:	e0 e4       	ldi	r30, 0x40	; 64
    59a4:	f6 e0       	ldi	r31, 0x06	; 6
    59a6:	86 83       	std	Z+6, r24	; 0x06
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    59a8:	82 ef       	ldi	r24, 0xF2	; 242
    59aa:	e0 ec       	ldi	r30, 0xC0	; 192
    59ac:	f8 e0       	ldi	r31, 0x08	; 8
    59ae:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    59b0:	80 91 c2 08 	lds	r24, 0x08C2
    59b4:	87 ff       	sbrs	r24, 7
    59b6:	fc cf       	rjmp	.-8      	; 0x59b0 <Accel_ReadResults+0x12>
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    59b8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ba:	f8 e0       	ldi	r31, 0x08	; 8
    59bc:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    59be:	80 91 c2 08 	lds	r24, 0x08C2
    59c2:	87 ff       	sbrs	r24, 7
    59c4:	fc cf       	rjmp	.-8      	; 0x59be <Accel_ReadResults+0x20>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    59c6:	20 91 c3 08 	lds	r18, 0x08C3
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    59ca:	e0 ec       	ldi	r30, 0xC0	; 192
    59cc:	f8 e0       	ldi	r31, 0x08	; 8
    59ce:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    59d0:	80 91 c2 08 	lds	r24, 0x08C2
    59d4:	87 ff       	sbrs	r24, 7
    59d6:	fc cf       	rjmp	.-8      	; 0x59d0 <Accel_ReadResults+0x32>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    59d8:	40 91 c3 08 	lds	r20, 0x08C3

    Accel_selectChip();
    Accel_Write_Byte(0x32 | 0b11000000);
    buffLocation[buffCounter] = Accel_Read_Byte();
    buffLocation[buffCounter] += Accel_Read_Byte() * 256;
    buffLocation[buffCounter] += 1024;
    59dc:	fb 01       	movw	r30, r22
    59de:	ee 0f       	add	r30, r30
    59e0:	ff 1f       	adc	r31, r31
    59e2:	ea 0f       	add	r30, r26
    59e4:	fb 1f       	adc	r31, r27
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	20 50       	subi	r18, 0x00	; 0
    59ea:	3c 4f       	sbci	r19, 0xFC	; 252
    59ec:	94 2f       	mov	r25, r20
    59ee:	80 e0       	ldi	r24, 0x00	; 0
    59f0:	28 0f       	add	r18, r24
    59f2:	39 1f       	adc	r19, r25
    59f4:	20 83       	st	Z, r18
    59f6:	31 83       	std	Z+1, r19	; 0x01
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    59f8:	e0 ec       	ldi	r30, 0xC0	; 192
    59fa:	f8 e0       	ldi	r31, 0x08	; 8
    59fc:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    59fe:	80 91 c2 08 	lds	r24, 0x08C2
    5a02:	87 ff       	sbrs	r24, 7
    5a04:	fc cf       	rjmp	.-8      	; 0x59fe <Accel_ReadResults+0x60>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5a06:	20 91 c3 08 	lds	r18, 0x08C3
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5a0a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a0c:	f8 e0       	ldi	r31, 0x08	; 8
    5a0e:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5a10:	80 91 c2 08 	lds	r24, 0x08C2
    5a14:	87 ff       	sbrs	r24, 7
    5a16:	fc cf       	rjmp	.-8      	; 0x5a10 <Accel_ReadResults+0x72>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5a18:	40 91 c3 08 	lds	r20, 0x08C3
    buffLocation[buffCounter] = Accel_Read_Byte();
    buffLocation[buffCounter] += Accel_Read_Byte() * 256;
    buffLocation[buffCounter] += 1024;
    buffLocation[buffCounter+1] = Accel_Read_Byte();
    buffLocation[buffCounter+1] += Accel_Read_Byte() * 256;
    buffLocation[buffCounter+1] += 1024;
    5a1c:	fb 01       	movw	r30, r22
    5a1e:	31 96       	adiw	r30, 0x01	; 1
    5a20:	ee 0f       	add	r30, r30
    5a22:	ff 1f       	adc	r31, r31
    5a24:	ea 0f       	add	r30, r26
    5a26:	fb 1f       	adc	r31, r27
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	20 50       	subi	r18, 0x00	; 0
    5a2c:	3c 4f       	sbci	r19, 0xFC	; 252
    5a2e:	94 2f       	mov	r25, r20
    5a30:	80 e0       	ldi	r24, 0x00	; 0
    5a32:	28 0f       	add	r18, r24
    5a34:	39 1f       	adc	r19, r25
    5a36:	20 83       	st	Z, r18
    5a38:	31 83       	std	Z+1, r19	; 0x01
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5a3a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a3c:	f8 e0       	ldi	r31, 0x08	; 8
    5a3e:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5a40:	80 91 c2 08 	lds	r24, 0x08C2
    5a44:	87 ff       	sbrs	r24, 7
    5a46:	fc cf       	rjmp	.-8      	; 0x5a40 <Accel_ReadResults+0xa2>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5a48:	20 91 c3 08 	lds	r18, 0x08C3
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5a4c:	e0 ec       	ldi	r30, 0xC0	; 192
    5a4e:	f8 e0       	ldi	r31, 0x08	; 8
    5a50:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5a52:	80 91 c2 08 	lds	r24, 0x08C2
    5a56:	87 ff       	sbrs	r24, 7
    5a58:	fc cf       	rjmp	.-8      	; 0x5a52 <Accel_ReadResults+0xb4>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5a5a:	40 91 c3 08 	lds	r20, 0x08C3
    buffLocation[buffCounter+1] = Accel_Read_Byte();
    buffLocation[buffCounter+1] += Accel_Read_Byte() * 256;
    buffLocation[buffCounter+1] += 1024;
    buffLocation[buffCounter+2] = Accel_Read_Byte();
    buffLocation[buffCounter+2] += Accel_Read_Byte() * 256;
    buffLocation[buffCounter+2] += 1024;
    5a5e:	6e 5f       	subi	r22, 0xFE	; 254
    5a60:	7f 4f       	sbci	r23, 0xFF	; 255
    5a62:	66 0f       	add	r22, r22
    5a64:	77 1f       	adc	r23, r23
    5a66:	a6 0f       	add	r26, r22
    5a68:	b7 1f       	adc	r27, r23
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	20 50       	subi	r18, 0x00	; 0
    5a6e:	3c 4f       	sbci	r19, 0xFC	; 252
    5a70:	94 2f       	mov	r25, r20
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	28 0f       	add	r18, r24
    5a76:	39 1f       	adc	r19, r25
    5a78:	2d 93       	st	X+, r18
    5a7a:	3c 93       	st	X, r19
    Accel_deselectChip();
    5a7c:	80 e1       	ldi	r24, 0x10	; 16
    5a7e:	e0 e4       	ldi	r30, 0x40	; 64
    5a80:	f6 e0       	ldi	r31, 0x06	; 6
    5a82:	85 83       	std	Z+5, r24	; 0x05
}
    5a84:	08 95       	ret

00005a86 <Sensors_ResetAccelBuffers>:

void Sensors_ResetAccelBuffers(void){
	accelBufferCounter = 0;
    5a86:	10 92 a8 27 	sts	0x27A8, r1
    5a8a:	10 92 a9 27 	sts	0x27A9, r1
  	accelBufferToWriteTo = 1;
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	80 93 12 27 	sts	0x2712, r24
	okToSendAccelBuffer1 = false;
    5a94:	10 92 a6 27 	sts	0x27A6, r1
	okToSendAccelBuffer2 = false;
    5a98:	10 92 a7 27 	sts	0x27A7, r1
}
    5a9c:	08 95       	ret

00005a9e <__vector_108>:


ISR(Accel_Sample_Timer_vect)
{
    5a9e:	1f 92       	push	r1
    5aa0:	0f 92       	push	r0
    5aa2:	0f b6       	in	r0, 0x3f	; 63
    5aa4:	0f 92       	push	r0
    5aa6:	0b b6       	in	r0, 0x3b	; 59
    5aa8:	0f 92       	push	r0
    5aaa:	11 24       	eor	r1, r1
    5aac:	2f 93       	push	r18
    5aae:	3f 93       	push	r19
    5ab0:	4f 93       	push	r20
    5ab2:	5f 93       	push	r21
    5ab4:	6f 93       	push	r22
    5ab6:	7f 93       	push	r23
    5ab8:	8f 93       	push	r24
    5aba:	9f 93       	push	r25
    5abc:	af 93       	push	r26
    5abe:	bf 93       	push	r27
    5ac0:	ef 93       	push	r30
    5ac2:	ff 93       	push	r31
	if(recording && wantToRecordFast){
    5ac4:	80 91 69 27 	lds	r24, 0x2769
    5ac8:	88 23       	and	r24, r24
    5aca:	09 f4       	brne	.+2      	; 0x5ace <__vector_108+0x30>
    5acc:	67 c0       	rjmp	.+206    	; 0x5b9c <__vector_108+0xfe>
    5ace:	80 91 68 27 	lds	r24, 0x2768
    5ad2:	88 23       	and	r24, r24
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <__vector_108+0x3a>
    5ad6:	62 c0       	rjmp	.+196    	; 0x5b9c <__vector_108+0xfe>
		if(accelBufferToWriteTo == 1){
    5ad8:	80 91 12 27 	lds	r24, 0x2712
    5adc:	81 30       	cpi	r24, 0x01	; 1
    5ade:	79 f5       	brne	.+94     	; 0x5b3e <__vector_108+0xa0>
			if(accelBufferCounter == 0){
    5ae0:	80 91 a8 27 	lds	r24, 0x27A8
    5ae4:	90 91 a9 27 	lds	r25, 0x27A9
    5ae8:	89 2b       	or	r24, r25
    5aea:	51 f4       	brne	.+20     	; 0x5b00 <__vector_108+0x62>
				accelSampleStartTime1 = Time_Get32BitTimer();
    5aec:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    5af0:	60 93 8a 27 	sts	0x278A, r22
    5af4:	70 93 8b 27 	sts	0x278B, r23
    5af8:	80 93 8c 27 	sts	0x278C, r24
    5afc:	90 93 8d 27 	sts	0x278D, r25
			}
			Accel_ReadResults(accelBuffer1,accelBufferCounter);
    5b00:	60 91 a8 27 	lds	r22, 0x27A8
    5b04:	70 91 a9 27 	lds	r23, 0x27A9
    5b08:	8d e5       	ldi	r24, 0x5D	; 93
    5b0a:	9f e3       	ldi	r25, 0x3F	; 63
    5b0c:	0e 94 cf 2c 	call	0x599e	; 0x599e <Accel_ReadResults>

			accelBufferCounter+=3;
    5b10:	80 91 a8 27 	lds	r24, 0x27A8
    5b14:	90 91 a9 27 	lds	r25, 0x27A9
    5b18:	03 96       	adiw	r24, 0x03	; 3
    5b1a:	80 93 a8 27 	sts	0x27A8, r24
    5b1e:	90 93 a9 27 	sts	0x27A9, r25

			if(accelBufferCounter == accelNumberOfSamples*accelNumberOfChannels){
    5b22:	88 55       	subi	r24, 0x58	; 88
    5b24:	92 40       	sbci	r25, 0x02	; 2
    5b26:	d1 f5       	brne	.+116    	; 0x5b9c <__vector_108+0xfe>
				accelBufferCounter=0;
    5b28:	10 92 a8 27 	sts	0x27A8, r1
    5b2c:	10 92 a9 27 	sts	0x27A9, r1
				accelBufferToWriteTo = 2;
    5b30:	82 e0       	ldi	r24, 0x02	; 2
    5b32:	80 93 12 27 	sts	0x2712, r24
				okToSendAccelBuffer1 = true;
    5b36:	81 e0       	ldi	r24, 0x01	; 1
    5b38:	80 93 a6 27 	sts	0x27A6, r24
    5b3c:	2f c0       	rjmp	.+94     	; 0x5b9c <__vector_108+0xfe>
			}
		} else if (accelBufferToWriteTo == 2){
    5b3e:	82 30       	cpi	r24, 0x02	; 2
    5b40:	69 f5       	brne	.+90     	; 0x5b9c <__vector_108+0xfe>
			if(accelBufferCounter == 0){
    5b42:	80 91 a8 27 	lds	r24, 0x27A8
    5b46:	90 91 a9 27 	lds	r25, 0x27A9
    5b4a:	89 2b       	or	r24, r25
    5b4c:	51 f4       	brne	.+20     	; 0x5b62 <__vector_108+0xc4>
				accelSampleStartTime2 = Time_Get32BitTimer();
    5b4e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    5b52:	60 93 8e 27 	sts	0x278E, r22
    5b56:	70 93 8f 27 	sts	0x278F, r23
    5b5a:	80 93 90 27 	sts	0x2790, r24
    5b5e:	90 93 91 27 	sts	0x2791, r25
			}
			Accel_ReadResults(accelBuffer2,accelBufferCounter);
    5b62:	60 91 a8 27 	lds	r22, 0x27A8
    5b66:	70 91 a9 27 	lds	r23, 0x27A9
    5b6a:	8c e9       	ldi	r24, 0x9C	; 156
    5b6c:	94 e3       	ldi	r25, 0x34	; 52
    5b6e:	0e 94 cf 2c 	call	0x599e	; 0x599e <Accel_ReadResults>

			accelBufferCounter+=3;
    5b72:	80 91 a8 27 	lds	r24, 0x27A8
    5b76:	90 91 a9 27 	lds	r25, 0x27A9
    5b7a:	03 96       	adiw	r24, 0x03	; 3
    5b7c:	80 93 a8 27 	sts	0x27A8, r24
    5b80:	90 93 a9 27 	sts	0x27A9, r25
			if(accelBufferCounter == accelNumberOfSamples*accelNumberOfChannels){
    5b84:	88 55       	subi	r24, 0x58	; 88
    5b86:	92 40       	sbci	r25, 0x02	; 2
    5b88:	49 f4       	brne	.+18     	; 0x5b9c <__vector_108+0xfe>
				accelBufferCounter=0;
    5b8a:	10 92 a8 27 	sts	0x27A8, r1
    5b8e:	10 92 a9 27 	sts	0x27A9, r1
				accelBufferToWriteTo = 1;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	80 93 12 27 	sts	0x2712, r24
				okToSendAccelBuffer2 = true;
    5b98:	80 93 a7 27 	sts	0x27A7, r24
			}
		}
	}
}
    5b9c:	ff 91       	pop	r31
    5b9e:	ef 91       	pop	r30
    5ba0:	bf 91       	pop	r27
    5ba2:	af 91       	pop	r26
    5ba4:	9f 91       	pop	r25
    5ba6:	8f 91       	pop	r24
    5ba8:	7f 91       	pop	r23
    5baa:	6f 91       	pop	r22
    5bac:	5f 91       	pop	r21
    5bae:	4f 91       	pop	r20
    5bb0:	3f 91       	pop	r19
    5bb2:	2f 91       	pop	r18
    5bb4:	0f 90       	pop	r0
    5bb6:	0b be       	out	0x3b, r0	; 59
    5bb8:	0f 90       	pop	r0
    5bba:	0f be       	out	0x3f, r0	; 63
    5bbc:	0f 90       	pop	r0
    5bbe:	1f 90       	pop	r1
    5bc0:	18 95       	reti

00005bc2 <Sensors_Init>:
uint16_t zeroOffsetA, zeroOffsetB;

uint16_t HZ_RefeshCounter = 0;


void Sensors_Init(void){
    5bc2:	cf 93       	push	r28
    5bc4:	df 93       	push	r29
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5bc6:	8a ec       	ldi	r24, 0xCA	; 202
    5bc8:	91 e0       	ldi	r25, 0x01	; 1
    5bca:	42 e0       	ldi	r20, 0x02	; 2
    5bcc:	dc 01       	movw	r26, r24
    5bce:	4c 93       	st	X, r20
 	result = pgm_read_byte(index);
    5bd0:	e0 e2       	ldi	r30, 0x20	; 32
    5bd2:	f0 e0       	ldi	r31, 0x00	; 0
    5bd4:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5bd6:	1c 92       	st	X, r1


void Sensors_Init(void){
	
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    5bd8:	a0 e0       	ldi	r26, 0x00	; 0
    5bda:	b2 e0       	ldi	r27, 0x02	; 2
    5bdc:	1c 96       	adiw	r26, 0x0c	; 12
    5bde:	ec 93       	st	X, r30
    5be0:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5be2:	ec 01       	movw	r28, r24
    5be4:	48 83       	st	Y, r20
 	result = pgm_read_byte(index);
    5be6:	e1 e2       	ldi	r30, 0x21	; 33
    5be8:	f0 e0       	ldi	r31, 0x00	; 0
    5bea:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5bec:	18 82       	st	Y, r1

void Sensors_Init(void){
	
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    5bee:	1d 96       	adiw	r26, 0x0d	; 13
    5bf0:	ec 93       	st	X, r30
    5bf2:	1d 97       	sbiw	r26, 0x0d	; 13
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5bf4:	48 83       	st	Y, r20
 	result = pgm_read_byte(index);
    5bf6:	e4 e2       	ldi	r30, 0x24	; 36
    5bf8:	f0 e0       	ldi	r31, 0x00	; 0
    5bfa:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5bfc:	18 82       	st	Y, r1
	
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    5bfe:	20 e4       	ldi	r18, 0x40	; 64
    5c00:	32 e0       	ldi	r19, 0x02	; 2
    5c02:	e9 01       	movw	r28, r18
    5c04:	ec 87       	std	Y+12, r30	; 0x0c
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5c06:	fc 01       	movw	r30, r24
    5c08:	40 83       	st	Z, r20
 	result = pgm_read_byte(index);
    5c0a:	e5 e2       	ldi	r30, 0x25	; 37
    5c0c:	f0 e0       	ldi	r31, 0x00	; 0
    5c0e:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5c10:	ec 01       	movw	r28, r24
    5c12:	18 82       	st	Y, r1
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
	ADCB.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    5c14:	e9 01       	movw	r28, r18
    5c16:	ed 87       	std	Y+13, r30	; 0x0d
	
    // Port A = ekg, temperature, humdity
	
    ADCA.EKGChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5c18:	61 e0       	ldi	r22, 0x01	; 1
    5c1a:	90 96       	adiw	r26, 0x20	; 32
    5c1c:	6c 93       	st	X, r22
    5c1e:	90 97       	sbiw	r26, 0x20	; 32
    ADCA.EKGChannel.MUXCTRL = EKGMUXPos;
    5c20:	70 e2       	ldi	r23, 0x20	; 32
    5c22:	91 96       	adiw	r26, 0x21	; 33
    5c24:	7c 93       	st	X, r23
    5c26:	91 97       	sbiw	r26, 0x21	; 33
	
    ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5c28:	98 96       	adiw	r26, 0x28	; 40
    5c2a:	6c 93       	st	X, r22
    5c2c:	98 97       	sbiw	r26, 0x28	; 40
    ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos;
    5c2e:	88 e2       	ldi	r24, 0x28	; 40
    5c30:	99 96       	adiw	r26, 0x29	; 41
    5c32:	8c 93       	st	X, r24
    5c34:	99 97       	sbiw	r26, 0x29	; 41
	
    ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5c36:	d0 96       	adiw	r26, 0x30	; 48
    5c38:	6c 93       	st	X, r22
    5c3a:	d0 97       	sbiw	r26, 0x30	; 48
    ADCA.humidityChannel.MUXCTRL = humidityMUXPos;
    5c3c:	80 e3       	ldi	r24, 0x30	; 48
    5c3e:	d1 96       	adiw	r26, 0x31	; 49
    5c40:	8c 93       	st	X, r24
    5c42:	d1 97       	sbiw	r26, 0x31	; 49
	
	ADCA.groundChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5c44:	d8 96       	adiw	r26, 0x38	; 56
    5c46:	6c 93       	st	X, r22
    5c48:	d8 97       	sbiw	r26, 0x38	; 56
    ADCA.groundChannel.MUXCTRL = groundMUxPos;
    5c4a:	88 e0       	ldi	r24, 0x08	; 8
    5c4c:	d9 96       	adiw	r26, 0x39	; 57
    5c4e:	8c 93       	st	X, r24
    5c50:	d9 97       	sbiw	r26, 0x39	; 57
	
    ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    5c52:	14 96       	adiw	r26, 0x04	; 4
    5c54:	8c 91       	ld	r24, X
    5c56:	14 97       	sbiw	r26, 0x04	; 4
    5c58:	88 7f       	andi	r24, 0xF8	; 248
    5c5a:	84 60       	ori	r24, 0x04	; 4
    5c5c:	14 96       	adiw	r26, 0x04	; 4
    5c5e:	8c 93       	st	X, r24
    5c60:	14 97       	sbiw	r26, 0x04	; 4
	
    ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    5c62:	12 96       	adiw	r26, 0x02	; 2
    5c64:	7c 93       	st	X, r23
    5c66:	12 97       	sbiw	r26, 0x02	; 2
    ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    5c68:	13 96       	adiw	r26, 0x03	; 3
    5c6a:	8c 91       	ld	r24, X
    5c6c:	13 97       	sbiw	r26, 0x03	; 3
    5c6e:	80 6c       	ori	r24, 0xC0	; 192
    5c70:	13 96       	adiw	r26, 0x03	; 3
    5c72:	8c 93       	st	X, r24
    5c74:	13 97       	sbiw	r26, 0x03	; 3
	
    ADCA.CTRLB |= ADC_FREERUN_bm; // free running mode
    5c76:	11 96       	adiw	r26, 0x01	; 1
    5c78:	8c 91       	ld	r24, X
    5c7a:	11 97       	sbiw	r26, 0x01	; 1
    5c7c:	88 60       	ori	r24, 0x08	; 8
    5c7e:	11 96       	adiw	r26, 0x01	; 1
    5c80:	8c 93       	st	X, r24
    5c82:	11 97       	sbiw	r26, 0x01	; 1
	
    ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    5c84:	98 96       	adiw	r26, 0x28	; 40
    5c86:	8c 91       	ld	r24, X
    5c88:	98 97       	sbiw	r26, 0x28	; 40
    5c8a:	80 68       	ori	r24, 0x80	; 128
    5c8c:	98 96       	adiw	r26, 0x28	; 40
    5c8e:	8c 93       	st	X, r24
    5c90:	98 97       	sbiw	r26, 0x28	; 40
    ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    5c92:	d0 96       	adiw	r26, 0x30	; 48
    5c94:	8c 91       	ld	r24, X
    5c96:	d0 97       	sbiw	r26, 0x30	; 48
    5c98:	80 68       	ori	r24, 0x80	; 128
    5c9a:	d0 96       	adiw	r26, 0x30	; 48
    5c9c:	8c 93       	st	X, r24
    5c9e:	d0 97       	sbiw	r26, 0x30	; 48
    ADCA.EKGChannel.CTRL |= ADC_CH_START_bm;
    5ca0:	90 96       	adiw	r26, 0x20	; 32
    5ca2:	8c 91       	ld	r24, X
    5ca4:	90 97       	sbiw	r26, 0x20	; 32
    5ca6:	80 68       	ori	r24, 0x80	; 128
    5ca8:	90 96       	adiw	r26, 0x20	; 32
    5caa:	8c 93       	st	X, r24
    5cac:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.groundChannel.CTRL |= ADC_CH_START_bm;
    5cae:	d8 96       	adiw	r26, 0x38	; 56
    5cb0:	8c 91       	ld	r24, X
    5cb2:	d8 97       	sbiw	r26, 0x38	; 56
    5cb4:	80 68       	ori	r24, 0x80	; 128
    5cb6:	d8 96       	adiw	r26, 0x38	; 56
    5cb8:	8c 93       	st	X, r24
    5cba:	d8 97       	sbiw	r26, 0x38	; 56
    ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    5cbc:	6c 93       	st	X, r22
    5cbe:	40 e0       	ldi	r20, 0x00	; 0
    5cc0:	50 e9       	ldi	r21, 0x90	; 144
    5cc2:	ca 01       	movw	r24, r20
    5cc4:	01 97       	sbiw	r24, 0x01	; 1
    5cc6:	f1 f7       	brne	.-4      	; 0x5cc4 <Sensors_Init+0x102>
	
	_delay_ms(10);
	zeroOffsetA = ADCA.groundResult;
    5cc8:	56 96       	adiw	r26, 0x16	; 22
    5cca:	8d 91       	ld	r24, X+
    5ccc:	9c 91       	ld	r25, X
    5cce:	57 97       	sbiw	r26, 0x17	; 23
    5cd0:	80 93 5b 3f 	sts	0x3F5B, r24
    5cd4:	90 93 5c 3f 	sts	0x3F5C, r25
	
	// Port B = Respiration
	
	ADCB.respirationChannel.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_8X_gc;	// set input mode
    5cd8:	8f e0       	ldi	r24, 0x0F	; 15
    5cda:	f9 01       	movw	r30, r18
    5cdc:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.respirationChannel.MUXCTRL = respirationMUXPos | neg_resipirationMUXPos;
    5cde:	8c e0       	ldi	r24, 0x0C	; 12
    5ce0:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCB.PRESCALER = (ADCB.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    5ce2:	84 81       	ldd	r24, Z+4	; 0x04
    5ce4:	88 7f       	andi	r24, 0xF8	; 248
    5ce6:	84 60       	ori	r24, 0x04	; 4
    5ce8:	84 83       	std	Z+4, r24	; 0x04
	
	ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    5cea:	72 83       	std	Z+2, r23	; 0x02
	ADCB.EVCTRL = (ADCB.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    5cec:	83 81       	ldd	r24, Z+3	; 0x03
    5cee:	80 6c       	ori	r24, 0xC0	; 192
    5cf0:	83 83       	std	Z+3, r24	; 0x03
	
	ADCB.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode & signed
    5cf2:	81 81       	ldd	r24, Z+1	; 0x01
    5cf4:	88 61       	ori	r24, 0x18	; 24
    5cf6:	81 83       	std	Z+1, r24	; 0x01
	
	ADCB.respirationChannel.CTRL |= ADC_CH_START_bm;
    5cf8:	80 a1       	ldd	r24, Z+32	; 0x20
    5cfa:	80 68       	ori	r24, 0x80	; 128
    5cfc:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCB.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    5cfe:	60 83       	st	Z, r22
    5d00:	ca 01       	movw	r24, r20
    5d02:	01 97       	sbiw	r24, 0x01	; 1
    5d04:	f1 f7       	brne	.-4      	; 0x5d02 <Sensors_Init+0x140>
	
	_delay_ms(10);
	zeroOffsetB = ADCB.groundResult;
    5d06:	d9 01       	movw	r26, r18
    5d08:	56 96       	adiw	r26, 0x16	; 22
    5d0a:	8d 91       	ld	r24, X+
    5d0c:	9c 91       	ld	r25, X
    5d0e:	57 97       	sbiw	r26, 0x17	; 23
    5d10:	80 93 90 2c 	sts	0x2C90, r24
    5d14:	90 93 91 2c 	sts	0x2C91, r25
	
	respirationPort.DIRSET = 1<<respirationDriver;
    5d18:	e0 e2       	ldi	r30, 0x20	; 32
    5d1a:	f6 e0       	ldi	r31, 0x06	; 6
    5d1c:	84 e0       	ldi	r24, 0x04	; 4
    5d1e:	81 83       	std	Z+1, r24	; 0x01
	respirationPort.OUTSET = 1<<respirationDriver;
    5d20:	85 83       	std	Z+5, r24	; 0x05
	// div  = 64
	// per  = 768
	// => 300 samples per second
	
	// Set period/TOP value
	Sensors_Timer_300HZ.PER = 768;
    5d22:	e0 e4       	ldi	r30, 0x40	; 64
    5d24:	f9 e0       	ldi	r31, 0x09	; 9
    5d26:	80 e0       	ldi	r24, 0x00	; 0
    5d28:	93 e0       	ldi	r25, 0x03	; 3
    5d2a:	86 a3       	std	Z+38, r24	; 0x26
    5d2c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Select clock source
	Sensors_Timer_300HZ.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    5d2e:	80 81       	ld	r24, Z
    5d30:	80 7f       	andi	r24, 0xF0	; 240
    5d32:	85 60       	ori	r24, 0x05	; 5
    5d34:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	Sensors_Timer_300HZ.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    5d36:	86 81       	ldd	r24, Z+6	; 0x06
    5d38:	83 60       	ori	r24, 0x03	; 3
    5d3a:	86 83       	std	Z+6, r24	; 0x06
	
	
}
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	08 95       	ret

00005d42 <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
    5d42:	e0 e0       	ldi	r30, 0x00	; 0
    5d44:	f2 e0       	ldi	r31, 0x02	; 2
    5d46:	22 89       	ldd	r18, Z+18	; 0x12
    5d48:	33 89       	ldd	r19, Z+19	; 0x13
}
    5d4a:	c9 01       	movw	r24, r18
    5d4c:	08 95       	ret

00005d4e <Sensors_ReadRespiration>:

uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
    5d4e:	e0 e4       	ldi	r30, 0x40	; 64
    5d50:	f2 e0       	ldi	r31, 0x02	; 2
    5d52:	20 89       	ldd	r18, Z+16	; 0x10
    5d54:	31 89       	ldd	r19, Z+17	; 0x11
}
    5d56:	c9 01       	movw	r24, r18
    5d58:	08 95       	ret

00005d5a <Sensors_ReadEKG>:

uint16_t Sensors_ReadEKG(void){
	return ADCA.EKGResult; 
    5d5a:	e0 e0       	ldi	r30, 0x00	; 0
    5d5c:	f2 e0       	ldi	r31, 0x02	; 2
    5d5e:	20 89       	ldd	r18, Z+16	; 0x10
    5d60:	31 89       	ldd	r19, Z+17	; 0x11
}
    5d62:	c9 01       	movw	r24, r18
    5d64:	08 95       	ret

00005d66 <Sensors_ReadHumidity>:

uint16_t Sensors_ReadHumidity(void){
    5d66:	0f 93       	push	r16
    5d68:	1f 93       	push	r17
	uint32_t tmp =  ADCA.humidityResult - zeroOffsetA;
    5d6a:	e0 e0       	ldi	r30, 0x00	; 0
    5d6c:	f2 e0       	ldi	r31, 0x02	; 2
    5d6e:	64 89       	ldd	r22, Z+20	; 0x14
    5d70:	75 89       	ldd	r23, Z+21	; 0x15
    5d72:	00 91 5b 3f 	lds	r16, 0x3F5B
    5d76:	10 91 5c 3f 	lds	r17, 0x3F5C
    5d7a:	60 1b       	sub	r22, r16
    5d7c:	71 0b       	sbc	r23, r17
    5d7e:	80 e0       	ldi	r24, 0x00	; 0
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t tmp2 = 0;
    uint32_t tmp3;
	
    tmp *= 19554;
    5d82:	22 e6       	ldi	r18, 0x62	; 98
    5d84:	3c e4       	ldi	r19, 0x4C	; 76
    5d86:	40 e0       	ldi	r20, 0x00	; 0
    5d88:	50 e0       	ldi	r21, 0x00	; 0
    5d8a:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
    5d8e:	9b 01       	movw	r18, r22
    5d90:	ac 01       	movw	r20, r24
    tmp -= 9756672;
    5d92:	8e e4       	ldi	r24, 0x4E	; 78
    5d94:	99 e0       	ldi	r25, 0x09	; 9
    5d96:	08 9f       	mul	r16, r24
    5d98:	b0 01       	movw	r22, r0
    5d9a:	09 9f       	mul	r16, r25
    5d9c:	70 0d       	add	r23, r0
    5d9e:	18 9f       	mul	r17, r24
    5da0:	70 0d       	add	r23, r0
    5da2:	11 24       	eor	r1, r1
    5da4:	80 e0       	ldi	r24, 0x00	; 0
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	60 50       	subi	r22, 0x00	; 0
    5daa:	70 4e       	sbci	r23, 0xE0	; 224
    5dac:	84 49       	sbci	r24, 0x94	; 148
    5dae:	90 40       	sbci	r25, 0x00	; 0
    5db0:	62 0f       	add	r22, r18
    5db2:	73 1f       	adc	r23, r19
    5db4:	84 1f       	adc	r24, r20
    5db6:	95 1f       	adc	r25, r21
    5db8:	20 e0       	ldi	r18, 0x00	; 0
    5dba:	30 e1       	ldi	r19, 0x10	; 16
    5dbc:	20 1b       	sub	r18, r16
    5dbe:	31 0b       	sbc	r19, r17
    5dc0:	40 e0       	ldi	r20, 0x00	; 0
    5dc2:	50 e0       	ldi	r21, 0x00	; 0
    5dc4:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    5dc8:	ca 01       	movw	r24, r20
    5dca:	b9 01       	movw	r22, r18
    5dcc:	2a e0       	ldi	r18, 0x0A	; 10
    5dce:	30 e0       	ldi	r19, 0x00	; 0
    5dd0:	40 e0       	ldi	r20, 0x00	; 0
    5dd2:	50 e0       	ldi	r21, 0x00	; 0
    5dd4:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    5dd8:	c9 01       	movw	r24, r18
    tmp += (2382*zeroOffsetA);
    tmp3 = tmp / (4096 - zeroOffsetA);       // %RH * 100
	tmp2 = tmp3/10;
	return tmp2;
}
    5dda:	1f 91       	pop	r17
    5ddc:	0f 91       	pop	r16
    5dde:	08 95       	ret

00005de0 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    5de0:	10 92 b0 27 	sts	0x27B0, r1
    5de4:	10 92 b1 27 	sts	0x27B1, r1
  	temperatureBufferToWriteTo = 1;
    5de8:	81 e0       	ldi	r24, 0x01	; 1
    5dea:	80 93 14 27 	sts	0x2714, r24
	okToSendTemperatureBuffer1 = false;
    5dee:	10 92 ae 27 	sts	0x27AE, r1
	okToSendTemperatureBuffer2 = false;
    5df2:	10 92 af 27 	sts	0x27AF, r1
}
    5df6:	08 95       	ret

00005df8 <Sensors_ResetRespirationBuffers>:

void Sensors_ResetRespirationBuffers(void){
	respirationBufferCounter = 0;
    5df8:	10 92 ac 27 	sts	0x27AC, r1
    5dfc:	10 92 ad 27 	sts	0x27AD, r1
  	respirationBufferToWriteTo = 1;
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	80 93 13 27 	sts	0x2713, r24
	okToSendRespirationBuffer1 = false;
    5e06:	10 92 aa 27 	sts	0x27AA, r1
	okToSendRespirationBuffer2 = false;
    5e0a:	10 92 ab 27 	sts	0x27AB, r1
}
    5e0e:	08 95       	ret

00005e10 <Sensors_ResetEKGBuffers>:

void Sensors_ResetEKGBuffers(void){
	EKGBufferCounter = 0;
    5e10:	10 92 b4 27 	sts	0x27B4, r1
    5e14:	10 92 b5 27 	sts	0x27B5, r1
  	EKGBufferToWriteTo = 1;
    5e18:	81 e0       	ldi	r24, 0x01	; 1
    5e1a:	80 93 15 27 	sts	0x2715, r24
	okToSendEKGBuffer1 = false;
    5e1e:	10 92 b2 27 	sts	0x27B2, r1
	okToSendEKGBuffer2 = false;
    5e22:	10 92 b3 27 	sts	0x27B3, r1
}
    5e26:	08 95       	ret

00005e28 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    5e28:	10 92 b8 27 	sts	0x27B8, r1
    5e2c:	10 92 b9 27 	sts	0x27B9, r1
  	humidityBufferToWriteTo = 1;
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	80 93 16 27 	sts	0x2716, r24
	okToSendHumidityBuffer1 = false;
    5e36:	10 92 b6 27 	sts	0x27B6, r1
	okToSendHumidityBuffer2 = false;
    5e3a:	10 92 b7 27 	sts	0x27B7, r1
}
    5e3e:	08 95       	ret

00005e40 <__vector_83>:




ISR(Sensors_Timer_300HZ_vect)
{
    5e40:	1f 92       	push	r1
    5e42:	0f 92       	push	r0
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	0f 92       	push	r0
    5e48:	0b b6       	in	r0, 0x3b	; 59
    5e4a:	0f 92       	push	r0
    5e4c:	11 24       	eor	r1, r1
    5e4e:	0f 93       	push	r16
    5e50:	1f 93       	push	r17
    5e52:	2f 93       	push	r18
    5e54:	3f 93       	push	r19
    5e56:	4f 93       	push	r20
    5e58:	5f 93       	push	r21
    5e5a:	6f 93       	push	r22
    5e5c:	7f 93       	push	r23
    5e5e:	8f 93       	push	r24
    5e60:	9f 93       	push	r25
    5e62:	af 93       	push	r26
    5e64:	bf 93       	push	r27
    5e66:	ef 93       	push	r30
    5e68:	ff 93       	push	r31
	if(recording){
    5e6a:	80 91 69 27 	lds	r24, 0x2769
    5e6e:	88 23       	and	r24, r24
    5e70:	09 f4       	brne	.+2      	; 0x5e74 <__vector_83+0x34>
    5e72:	e3 c1       	rjmp	.+966    	; 0x623a <__stack+0x23b>
		if(wantToRecordRespiration){
    5e74:	80 91 c7 22 	lds	r24, 0x22C7
    5e78:	88 23       	and	r24, r24
    5e7a:	09 f4       	brne	.+2      	; 0x5e7e <__vector_83+0x3e>
    5e7c:	68 c0       	rjmp	.+208    	; 0x5f4e <__vector_83+0x10e>
			if(respirationBufferToWriteTo == 1){
    5e7e:	80 91 13 27 	lds	r24, 0x2713
    5e82:	81 30       	cpi	r24, 0x01	; 1
    5e84:	91 f5       	brne	.+100    	; 0x5eea <__vector_83+0xaa>
				if(respirationBufferCounter == 0){
    5e86:	80 91 ac 27 	lds	r24, 0x27AC
    5e8a:	90 91 ad 27 	lds	r25, 0x27AD
    5e8e:	89 2b       	or	r24, r25
    5e90:	51 f4       	brne	.+20     	; 0x5ea6 <__vector_83+0x66>
					respirationSampleStartTime1 = Time_Get32BitTimer();
    5e92:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    5e96:	60 93 72 27 	sts	0x2772, r22
    5e9a:	70 93 73 27 	sts	0x2773, r23
    5e9e:	80 93 74 27 	sts	0x2774, r24
    5ea2:	90 93 75 27 	sts	0x2775, r25
				}
				respirationBuffer1[respirationBufferCounter] = Sensors_ReadRespiration();
    5ea6:	80 91 ac 27 	lds	r24, 0x27AC
    5eaa:	90 91 ad 27 	lds	r25, 0x27AD
uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
}

uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
    5eae:	20 91 50 02 	lds	r18, 0x0250
    5eb2:	30 91 51 02 	lds	r19, 0x0251
		if(wantToRecordRespiration){
			if(respirationBufferToWriteTo == 1){
				if(respirationBufferCounter == 0){
					respirationSampleStartTime1 = Time_Get32BitTimer();
				}
				respirationBuffer1[respirationBufferCounter] = Sensors_ReadRespiration();
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	ee 0f       	add	r30, r30
    5eba:	ff 1f       	adc	r31, r31
    5ebc:	e7 57       	subi	r30, 0x77	; 119
    5ebe:	ff 4c       	sbci	r31, 0xCF	; 207
    5ec0:	20 83       	st	Z, r18
    5ec2:	31 83       	std	Z+1, r19	; 0x01
				respirationBufferCounter++;
    5ec4:	01 96       	adiw	r24, 0x01	; 1
    5ec6:	80 93 ac 27 	sts	0x27AC, r24
    5eca:	90 93 ad 27 	sts	0x27AD, r25
				if(respirationBufferCounter == respirationNumberOfSamples){
    5ece:	88 3c       	cpi	r24, 0xC8	; 200
    5ed0:	91 05       	cpc	r25, r1
    5ed2:	e9 f5       	brne	.+122    	; 0x5f4e <__vector_83+0x10e>
					respirationBufferCounter=0;
    5ed4:	10 92 ac 27 	sts	0x27AC, r1
    5ed8:	10 92 ad 27 	sts	0x27AD, r1
					respirationBufferToWriteTo = 2;
    5edc:	82 e0       	ldi	r24, 0x02	; 2
    5ede:	80 93 13 27 	sts	0x2713, r24
					okToSendRespirationBuffer1 = true;
    5ee2:	81 e0       	ldi	r24, 0x01	; 1
    5ee4:	80 93 aa 27 	sts	0x27AA, r24
    5ee8:	32 c0       	rjmp	.+100    	; 0x5f4e <__vector_83+0x10e>
				}
			} else if (respirationBufferToWriteTo == 2){
    5eea:	82 30       	cpi	r24, 0x02	; 2
    5eec:	81 f5       	brne	.+96     	; 0x5f4e <__vector_83+0x10e>
				if(respirationBufferCounter == 0){
    5eee:	80 91 ac 27 	lds	r24, 0x27AC
    5ef2:	90 91 ad 27 	lds	r25, 0x27AD
    5ef6:	89 2b       	or	r24, r25
    5ef8:	51 f4       	brne	.+20     	; 0x5f0e <__vector_83+0xce>
					respirationSampleStartTime2 = Time_Get32BitTimer();
    5efa:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    5efe:	60 93 76 27 	sts	0x2776, r22
    5f02:	70 93 77 27 	sts	0x2777, r23
    5f06:	80 93 78 27 	sts	0x2778, r24
    5f0a:	90 93 79 27 	sts	0x2779, r25
				}
				respirationBuffer2[respirationBufferCounter] = Sensors_ReadRespiration();
    5f0e:	80 91 ac 27 	lds	r24, 0x27AC
    5f12:	90 91 ad 27 	lds	r25, 0x27AD
uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
}

uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
    5f16:	20 91 50 02 	lds	r18, 0x0250
    5f1a:	30 91 51 02 	lds	r19, 0x0251
				}
			} else if (respirationBufferToWriteTo == 2){
				if(respirationBufferCounter == 0){
					respirationSampleStartTime2 = Time_Get32BitTimer();
				}
				respirationBuffer2[respirationBufferCounter] = Sensors_ReadRespiration();
    5f1e:	fc 01       	movw	r30, r24
    5f20:	ee 0f       	add	r30, r30
    5f22:	ff 1f       	adc	r31, r31
    5f24:	e0 5e       	subi	r30, 0xE0	; 224
    5f26:	f9 4b       	sbci	r31, 0xB9	; 185
    5f28:	20 83       	st	Z, r18
    5f2a:	31 83       	std	Z+1, r19	; 0x01
				respirationBufferCounter++;
    5f2c:	01 96       	adiw	r24, 0x01	; 1
    5f2e:	80 93 ac 27 	sts	0x27AC, r24
    5f32:	90 93 ad 27 	sts	0x27AD, r25
				if(respirationBufferCounter == respirationNumberOfSamples){
    5f36:	88 3c       	cpi	r24, 0xC8	; 200
    5f38:	91 05       	cpc	r25, r1
    5f3a:	49 f4       	brne	.+18     	; 0x5f4e <__vector_83+0x10e>
					respirationBufferCounter=0;
    5f3c:	10 92 ac 27 	sts	0x27AC, r1
    5f40:	10 92 ad 27 	sts	0x27AD, r1
					respirationBufferToWriteTo = 1;
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	80 93 13 27 	sts	0x2713, r24
					okToSendRespirationBuffer2 = true;
    5f4a:	80 93 ab 27 	sts	0x27AB, r24
				}
			}
		}
		
		if(wantToRecordEKG){
    5f4e:	80 91 c6 22 	lds	r24, 0x22C6
    5f52:	88 23       	and	r24, r24
    5f54:	09 f4       	brne	.+2      	; 0x5f58 <__vector_83+0x118>
    5f56:	68 c0       	rjmp	.+208    	; 0x6028 <__stack+0x29>
			if(EKGBufferToWriteTo == 1){
    5f58:	80 91 15 27 	lds	r24, 0x2715
    5f5c:	81 30       	cpi	r24, 0x01	; 1
    5f5e:	91 f5       	brne	.+100    	; 0x5fc4 <__vector_83+0x184>
				if(EKGBufferCounter == 0){
    5f60:	80 91 b4 27 	lds	r24, 0x27B4
    5f64:	90 91 b5 27 	lds	r25, 0x27B5
    5f68:	89 2b       	or	r24, r25
    5f6a:	51 f4       	brne	.+20     	; 0x5f80 <__vector_83+0x140>
					EKGSampleStartTime1 = Time_Get32BitTimer();
    5f6c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    5f70:	60 93 7a 27 	sts	0x277A, r22
    5f74:	70 93 7b 27 	sts	0x277B, r23
    5f78:	80 93 7c 27 	sts	0x277C, r24
    5f7c:	90 93 7d 27 	sts	0x277D, r25
				}
				EKGBuffer1[EKGBufferCounter] = Sensors_ReadEKG();
    5f80:	80 91 b4 27 	lds	r24, 0x27B4
    5f84:	90 91 b5 27 	lds	r25, 0x27B5
uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
}

uint16_t Sensors_ReadEKG(void){
	return ADCA.EKGResult; 
    5f88:	20 91 10 02 	lds	r18, 0x0210
    5f8c:	30 91 11 02 	lds	r19, 0x0211
		if(wantToRecordEKG){
			if(EKGBufferToWriteTo == 1){
				if(EKGBufferCounter == 0){
					EKGSampleStartTime1 = Time_Get32BitTimer();
				}
				EKGBuffer1[EKGBufferCounter] = Sensors_ReadEKG();
    5f90:	fc 01       	movw	r30, r24
    5f92:	ee 0f       	add	r30, r30
    5f94:	ff 1f       	adc	r31, r31
    5f96:	e3 5f       	subi	r30, 0xF3	; 243
    5f98:	fb 4b       	sbci	r31, 0xBB	; 187
    5f9a:	20 83       	st	Z, r18
    5f9c:	31 83       	std	Z+1, r19	; 0x01
				EKGBufferCounter++;
    5f9e:	01 96       	adiw	r24, 0x01	; 1
    5fa0:	80 93 b4 27 	sts	0x27B4, r24
    5fa4:	90 93 b5 27 	sts	0x27B5, r25
				if(EKGBufferCounter == EKGNumberOfSamples){
    5fa8:	88 3c       	cpi	r24, 0xC8	; 200
    5faa:	91 05       	cpc	r25, r1
    5fac:	e9 f5       	brne	.+122    	; 0x6028 <__stack+0x29>
					EKGBufferCounter=0;
    5fae:	10 92 b4 27 	sts	0x27B4, r1
    5fb2:	10 92 b5 27 	sts	0x27B5, r1
					EKGBufferToWriteTo = 2;
    5fb6:	82 e0       	ldi	r24, 0x02	; 2
    5fb8:	80 93 15 27 	sts	0x2715, r24
					okToSendEKGBuffer1 = true;
    5fbc:	81 e0       	ldi	r24, 0x01	; 1
    5fbe:	80 93 b2 27 	sts	0x27B2, r24
    5fc2:	32 c0       	rjmp	.+100    	; 0x6028 <__stack+0x29>
				}
			} else if (EKGBufferToWriteTo == 2){
    5fc4:	82 30       	cpi	r24, 0x02	; 2
    5fc6:	81 f5       	brne	.+96     	; 0x6028 <__stack+0x29>
				if(EKGBufferCounter == 0){
    5fc8:	80 91 b4 27 	lds	r24, 0x27B4
    5fcc:	90 91 b5 27 	lds	r25, 0x27B5
    5fd0:	89 2b       	or	r24, r25
    5fd2:	51 f4       	brne	.+20     	; 0x5fe8 <__vector_83+0x1a8>
					EKGSampleStartTime2 = Time_Get32BitTimer();
    5fd4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    5fd8:	60 93 7e 27 	sts	0x277E, r22
    5fdc:	70 93 7f 27 	sts	0x277F, r23
    5fe0:	80 93 80 27 	sts	0x2780, r24
    5fe4:	90 93 81 27 	sts	0x2781, r25
				}
				EKGBuffer2[EKGBufferCounter] = Sensors_ReadEKG();
    5fe8:	80 91 b4 27 	lds	r24, 0x27B4
    5fec:	90 91 b5 27 	lds	r25, 0x27B5
uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
}

uint16_t Sensors_ReadEKG(void){
	return ADCA.EKGResult; 
    5ff0:	20 91 10 02 	lds	r18, 0x0210
    5ff4:	30 91 11 02 	lds	r19, 0x0211
				}
			} else if (EKGBufferToWriteTo == 2){
				if(EKGBufferCounter == 0){
					EKGSampleStartTime2 = Time_Get32BitTimer();
				}
				EKGBuffer2[EKGBufferCounter] = Sensors_ReadEKG();
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	ee 0f       	add	r30, r30
    5ffc:	ff 1f       	adc	r31, r31
    5ffe:	e8 5d       	subi	r30, 0xD8	; 216
    6000:	fd 4c       	sbci	r31, 0xCD	; 205
    6002:	20 83       	st	Z, r18
    6004:	31 83       	std	Z+1, r19	; 0x01
				EKGBufferCounter++;
    6006:	01 96       	adiw	r24, 0x01	; 1
    6008:	80 93 b4 27 	sts	0x27B4, r24
    600c:	90 93 b5 27 	sts	0x27B5, r25
				if(EKGBufferCounter == EKGNumberOfSamples){
    6010:	88 3c       	cpi	r24, 0xC8	; 200
    6012:	91 05       	cpc	r25, r1
    6014:	49 f4       	brne	.+18     	; 0x6028 <__stack+0x29>
					EKGBufferCounter=0;
    6016:	10 92 b4 27 	sts	0x27B4, r1
    601a:	10 92 b5 27 	sts	0x27B5, r1
					EKGBufferToWriteTo = 1;
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	80 93 15 27 	sts	0x2715, r24
					okToSendEKGBuffer2 = true;
    6024:	80 93 b3 27 	sts	0x27B3, r24
				}
			}
		}
		HZ_RefeshCounter++;
    6028:	80 91 bc 27 	lds	r24, 0x27BC
    602c:	90 91 bd 27 	lds	r25, 0x27BD
    6030:	01 96       	adiw	r24, 0x01	; 1
    6032:	80 93 bc 27 	sts	0x27BC, r24
    6036:	90 93 bd 27 	sts	0x27BD, r25
		if(HZ_RefeshCounter == 300){
    603a:	8c 52       	subi	r24, 0x2C	; 44
    603c:	91 40       	sbci	r25, 0x01	; 1
    603e:	09 f0       	breq	.+2      	; 0x6042 <__stack+0x43>
    6040:	fc c0       	rjmp	.+504    	; 0x623a <__stack+0x23b>
			HZ_RefeshCounter = 0;
    6042:	10 92 bc 27 	sts	0x27BC, r1
    6046:	10 92 bd 27 	sts	0x27BD, r1
			
			UNIX_Time++;
    604a:	80 91 9c 27 	lds	r24, 0x279C
    604e:	90 91 9d 27 	lds	r25, 0x279D
    6052:	a0 91 9e 27 	lds	r26, 0x279E
    6056:	b0 91 9f 27 	lds	r27, 0x279F
    605a:	01 96       	adiw	r24, 0x01	; 1
    605c:	a1 1d       	adc	r26, r1
    605e:	b1 1d       	adc	r27, r1
    6060:	80 93 9c 27 	sts	0x279C, r24
    6064:	90 93 9d 27 	sts	0x279D, r25
    6068:	a0 93 9e 27 	sts	0x279E, r26
    606c:	b0 93 9f 27 	sts	0x279F, r27
			
			rtcBlockCounter++;
    6070:	80 91 bb 27 	lds	r24, 0x27BB
    6074:	8f 5f       	subi	r24, 0xFF	; 255
    6076:	80 93 bb 27 	sts	0x27BB, r24
			if(rtcBlockCounter == 0){
    607a:	88 23       	and	r24, r24
    607c:	19 f4       	brne	.+6      	; 0x6084 <__stack+0x85>
				okToSendRTCBlock = true;
    607e:	81 e0       	ldi	r24, 0x01	; 1
    6080:	80 93 ba 27 	sts	0x27BA, r24
			}
			if(wantToRecordTemperature){
    6084:	80 91 c4 22 	lds	r24, 0x22C4
    6088:	88 23       	and	r24, r24
    608a:	09 f4       	brne	.+2      	; 0x608e <__stack+0x8f>
    608c:	66 c0       	rjmp	.+204    	; 0x615a <__stack+0x15b>
				if(temperatureBufferToWriteTo == 1){
    608e:	80 91 14 27 	lds	r24, 0x2714
    6092:	81 30       	cpi	r24, 0x01	; 1
    6094:	89 f5       	brne	.+98     	; 0x60f8 <__stack+0xf9>
					if(temperatureBufferCounter == 0){
    6096:	80 91 b0 27 	lds	r24, 0x27B0
    609a:	90 91 b1 27 	lds	r25, 0x27B1
    609e:	89 2b       	or	r24, r25
    60a0:	51 f4       	brne	.+20     	; 0x60b6 <__stack+0xb7>
						temperatureSampleStartTime1 = Time_Get32BitTimer();
    60a2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    60a6:	60 93 6a 27 	sts	0x276A, r22
    60aa:	70 93 6b 27 	sts	0x276B, r23
    60ae:	80 93 6c 27 	sts	0x276C, r24
    60b2:	90 93 6d 27 	sts	0x276D, r25
					}
					temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    60b6:	80 91 b0 27 	lds	r24, 0x27B0
    60ba:	90 91 b1 27 	lds	r25, 0x27B1
	
	
}

uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
    60be:	20 91 12 02 	lds	r18, 0x0212
    60c2:	30 91 13 02 	lds	r19, 0x0213
			if(wantToRecordTemperature){
				if(temperatureBufferToWriteTo == 1){
					if(temperatureBufferCounter == 0){
						temperatureSampleStartTime1 = Time_Get32BitTimer();
					}
					temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    60c6:	fc 01       	movw	r30, r24
    60c8:	ee 0f       	add	r30, r30
    60ca:	ff 1f       	adc	r31, r31
    60cc:	e4 5b       	subi	r30, 0xB4	; 180
    60ce:	fb 4c       	sbci	r31, 0xCB	; 203
    60d0:	20 83       	st	Z, r18
    60d2:	31 83       	std	Z+1, r19	; 0x01
					temperatureBufferCounter++;
    60d4:	01 96       	adiw	r24, 0x01	; 1
    60d6:	80 93 b0 27 	sts	0x27B0, r24
    60da:	90 93 b1 27 	sts	0x27B1, r25
					if(temperatureBufferCounter == temperatureNumberOfSamples){
    60de:	0a 97       	sbiw	r24, 0x0a	; 10
    60e0:	e1 f5       	brne	.+120    	; 0x615a <__stack+0x15b>
						temperatureBufferCounter=0;
    60e2:	10 92 b0 27 	sts	0x27B0, r1
    60e6:	10 92 b1 27 	sts	0x27B1, r1
						temperatureBufferToWriteTo = 2;
    60ea:	82 e0       	ldi	r24, 0x02	; 2
    60ec:	80 93 14 27 	sts	0x2714, r24
						okToSendTemperatureBuffer1 = true;
    60f0:	81 e0       	ldi	r24, 0x01	; 1
    60f2:	80 93 ae 27 	sts	0x27AE, r24
    60f6:	31 c0       	rjmp	.+98     	; 0x615a <__stack+0x15b>
					}
				} else if (temperatureBufferToWriteTo == 2){
    60f8:	82 30       	cpi	r24, 0x02	; 2
    60fa:	79 f5       	brne	.+94     	; 0x615a <__stack+0x15b>
					if(temperatureBufferCounter == 0){
    60fc:	80 91 b0 27 	lds	r24, 0x27B0
    6100:	90 91 b1 27 	lds	r25, 0x27B1
    6104:	89 2b       	or	r24, r25
    6106:	51 f4       	brne	.+20     	; 0x611c <__stack+0x11d>
						temperatureSampleStartTime2 = Time_Get32BitTimer();
    6108:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    610c:	60 93 6e 27 	sts	0x276E, r22
    6110:	70 93 6f 27 	sts	0x276F, r23
    6114:	80 93 70 27 	sts	0x2770, r24
    6118:	90 93 71 27 	sts	0x2771, r25
					}
					temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    611c:	80 91 b0 27 	lds	r24, 0x27B0
    6120:	90 91 b1 27 	lds	r25, 0x27B1
	
	
}

uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
    6124:	20 91 12 02 	lds	r18, 0x0212
    6128:	30 91 13 02 	lds	r19, 0x0213
					}
				} else if (temperatureBufferToWriteTo == 2){
					if(temperatureBufferCounter == 0){
						temperatureSampleStartTime2 = Time_Get32BitTimer();
					}
					temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    612c:	fc 01       	movw	r30, r24
    612e:	ee 0f       	add	r30, r30
    6130:	ff 1f       	adc	r31, r31
    6132:	e4 54       	subi	r30, 0x44	; 68
    6134:	f6 4c       	sbci	r31, 0xC6	; 198
    6136:	20 83       	st	Z, r18
    6138:	31 83       	std	Z+1, r19	; 0x01
					temperatureBufferCounter++;
    613a:	01 96       	adiw	r24, 0x01	; 1
    613c:	80 93 b0 27 	sts	0x27B0, r24
    6140:	90 93 b1 27 	sts	0x27B1, r25
					if(temperatureBufferCounter == temperatureNumberOfSamples){
    6144:	0a 97       	sbiw	r24, 0x0a	; 10
    6146:	49 f4       	brne	.+18     	; 0x615a <__stack+0x15b>
						temperatureBufferCounter=0;
    6148:	10 92 b0 27 	sts	0x27B0, r1
    614c:	10 92 b1 27 	sts	0x27B1, r1
						temperatureBufferToWriteTo = 1;
    6150:	81 e0       	ldi	r24, 0x01	; 1
    6152:	80 93 14 27 	sts	0x2714, r24
						okToSendTemperatureBuffer2 = true;
    6156:	80 93 af 27 	sts	0x27AF, r24
					}
				}
			}
			
			if(wantToRecordHumidity){
    615a:	80 91 c5 22 	lds	r24, 0x22C5
    615e:	88 23       	and	r24, r24
    6160:	09 f4       	brne	.+2      	; 0x6164 <__stack+0x165>
    6162:	6b c0       	rjmp	.+214    	; 0x623a <__stack+0x23b>
				if(humidityBufferToWriteTo == 1){
    6164:	80 91 16 27 	lds	r24, 0x2716
    6168:	81 30       	cpi	r24, 0x01	; 1
    616a:	a1 f5       	brne	.+104    	; 0x61d4 <__stack+0x1d5>
					if(humidityBufferCounter == 0){
    616c:	80 91 b8 27 	lds	r24, 0x27B8
    6170:	90 91 b9 27 	lds	r25, 0x27B9
    6174:	89 2b       	or	r24, r25
    6176:	51 f4       	brne	.+20     	; 0x618c <__stack+0x18d>
						humiditySampleStartTime1 = Time_Get32BitTimer();
    6178:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    617c:	60 93 82 27 	sts	0x2782, r22
    6180:	70 93 83 27 	sts	0x2783, r23
    6184:	80 93 84 27 	sts	0x2784, r24
    6188:	90 93 85 27 	sts	0x2785, r25
					}
					humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    618c:	00 91 b8 27 	lds	r16, 0x27B8
    6190:	10 91 b9 27 	lds	r17, 0x27B9
    6194:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <Sensors_ReadHumidity>
    6198:	00 0f       	add	r16, r16
    619a:	11 1f       	adc	r17, r17
    619c:	0c 50       	subi	r16, 0x0C	; 12
    619e:	16 4c       	sbci	r17, 0xC6	; 198
    61a0:	f8 01       	movw	r30, r16
    61a2:	80 83       	st	Z, r24
    61a4:	91 83       	std	Z+1, r25	; 0x01
					humidityBufferCounter++;
    61a6:	80 91 b8 27 	lds	r24, 0x27B8
    61aa:	90 91 b9 27 	lds	r25, 0x27B9
    61ae:	01 96       	adiw	r24, 0x01	; 1
    61b0:	80 93 b8 27 	sts	0x27B8, r24
    61b4:	90 93 b9 27 	sts	0x27B9, r25
					if(humidityBufferCounter == humidityNumberOfSamples){
    61b8:	0a 97       	sbiw	r24, 0x0a	; 10
    61ba:	09 f0       	breq	.+2      	; 0x61be <__stack+0x1bf>
    61bc:	3e c0       	rjmp	.+124    	; 0x623a <__stack+0x23b>
						humidityBufferCounter=0;
    61be:	10 92 b8 27 	sts	0x27B8, r1
    61c2:	10 92 b9 27 	sts	0x27B9, r1
						humidityBufferToWriteTo = 2;
    61c6:	82 e0       	ldi	r24, 0x02	; 2
    61c8:	80 93 16 27 	sts	0x2716, r24
						okToSendHumidityBuffer1 = true;
    61cc:	81 e0       	ldi	r24, 0x01	; 1
    61ce:	80 93 b6 27 	sts	0x27B6, r24
    61d2:	33 c0       	rjmp	.+102    	; 0x623a <__stack+0x23b>
					}
				} else if (humidityBufferToWriteTo == 2){
    61d4:	82 30       	cpi	r24, 0x02	; 2
    61d6:	89 f5       	brne	.+98     	; 0x623a <__stack+0x23b>
					if(humidityBufferCounter == 0){
    61d8:	80 91 b8 27 	lds	r24, 0x27B8
    61dc:	90 91 b9 27 	lds	r25, 0x27B9
    61e0:	89 2b       	or	r24, r25
    61e2:	51 f4       	brne	.+20     	; 0x61f8 <__stack+0x1f9>
						humiditySampleStartTime2 = Time_Get32BitTimer();
    61e4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    61e8:	60 93 86 27 	sts	0x2786, r22
    61ec:	70 93 87 27 	sts	0x2787, r23
    61f0:	80 93 88 27 	sts	0x2788, r24
    61f4:	90 93 89 27 	sts	0x2789, r25
					}
					humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    61f8:	00 91 b8 27 	lds	r16, 0x27B8
    61fc:	10 91 b9 27 	lds	r17, 0x27B9
    6200:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <Sensors_ReadHumidity>
    6204:	00 0f       	add	r16, r16
    6206:	11 1f       	adc	r17, r17
    6208:	09 5b       	subi	r16, 0xB9	; 185
    620a:	10 4c       	sbci	r17, 0xC0	; 192
    620c:	f8 01       	movw	r30, r16
    620e:	80 83       	st	Z, r24
    6210:	91 83       	std	Z+1, r25	; 0x01
					humidityBufferCounter++;
    6212:	80 91 b8 27 	lds	r24, 0x27B8
    6216:	90 91 b9 27 	lds	r25, 0x27B9
    621a:	01 96       	adiw	r24, 0x01	; 1
    621c:	80 93 b8 27 	sts	0x27B8, r24
    6220:	90 93 b9 27 	sts	0x27B9, r25
					if(humidityBufferCounter == humidityNumberOfSamples){
    6224:	0a 97       	sbiw	r24, 0x0a	; 10
    6226:	49 f4       	brne	.+18     	; 0x623a <__stack+0x23b>
						humidityBufferCounter=0;
    6228:	10 92 b8 27 	sts	0x27B8, r1
    622c:	10 92 b9 27 	sts	0x27B9, r1
						humidityBufferToWriteTo = 1;
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	80 93 16 27 	sts	0x2716, r24
						okToSendHumidityBuffer2 = true;
    6236:	80 93 b7 27 	sts	0x27B7, r24
				}	  
			}  
		}
	}
	
}
    623a:	ff 91       	pop	r31
    623c:	ef 91       	pop	r30
    623e:	bf 91       	pop	r27
    6240:	af 91       	pop	r26
    6242:	9f 91       	pop	r25
    6244:	8f 91       	pop	r24
    6246:	7f 91       	pop	r23
    6248:	6f 91       	pop	r22
    624a:	5f 91       	pop	r21
    624c:	4f 91       	pop	r20
    624e:	3f 91       	pop	r19
    6250:	2f 91       	pop	r18
    6252:	1f 91       	pop	r17
    6254:	0f 91       	pop	r16
    6256:	0f 90       	pop	r0
    6258:	0b be       	out	0x3b, r0	; 59
    625a:	0f 90       	pop	r0
    625c:	0f be       	out	0x3f, r0	; 63
    625e:	0f 90       	pop	r0
    6260:	1f 90       	pop	r1
    6262:	18 95       	reti

00006264 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6264:	aa ec       	ldi	r26, 0xCA	; 202
    6266:	b1 e0       	ldi	r27, 0x01	; 1
    6268:	92 e0       	ldi	r25, 0x02	; 2
    626a:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    626c:	e8 2f       	mov	r30, r24
    626e:	f0 e0       	ldi	r31, 0x00	; 0
    6270:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6272:	1c 92       	st	X, r1
	
	return result;
    6274:	8e 2f       	mov	r24, r30
    6276:	08 95       	ret

00006278 <Uploader_getTime>:
			singCounter--;
		}
	}
}

bool Uploader_getTime(void){
    6278:	0f 93       	push	r16
    627a:	1f 93       	push	r17
    627c:	cf 93       	push	r28
    627e:	df 93       	push	r29
    uint32_t tempTime = 0;
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    Debug_SendByte('T');
    6280:	84 e5       	ldi	r24, 0x54	; 84
    6282:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6286:	00 e0       	ldi	r16, 0x00	; 0
    6288:	10 e0       	ldi	r17, 0x00	; 0
    628a:	c6 e6       	ldi	r28, 0x66	; 102
    628c:	de e0       	ldi	r29, 0x0E	; 14
    while(true){
        if(Debug_CharReadyToRead()){
    628e:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6292:	88 23       	and	r24, r24
    6294:	a1 f1       	breq	.+104    	; 0x62fe <Uploader_getTime+0x86>
            command[commandCounter+1] = Debug_GetByte(false);
    6296:	80 e0       	ldi	r24, 0x00	; 0
    6298:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    629c:	e1 2f       	mov	r30, r17
    629e:	f0 e0       	ldi	r31, 0x00	; 0
    62a0:	e6 5e       	subi	r30, 0xE6	; 230
    62a2:	fb 4c       	sbci	r31, 0xCB	; 203
    62a4:	81 83       	std	Z+1, r24	; 0x01
            Debug_SendByte(command[commandCounter+1]);
    62a6:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
            commandCounter++;
    62aa:	1f 5f       	subi	r17, 0xFF	; 255
            if(commandCounter == 4){
    62ac:	14 30       	cpi	r17, 0x04	; 4
    62ae:	39 f5       	brne	.+78     	; 0x62fe <Uploader_getTime+0x86>
                tempTime = command[1];
    62b0:	60 91 1b 34 	lds	r22, 0x341B
    62b4:	70 e0       	ldi	r23, 0x00	; 0
    62b6:	80 e0       	ldi	r24, 0x00	; 0
    62b8:	90 e0       	ldi	r25, 0x00	; 0
                tempTime <<= 8;
    62ba:	98 2f       	mov	r25, r24
    62bc:	87 2f       	mov	r24, r23
    62be:	76 2f       	mov	r23, r22
    62c0:	66 27       	eor	r22, r22
                tempTime += command[2];
    62c2:	20 91 1c 34 	lds	r18, 0x341C
    62c6:	62 0f       	add	r22, r18
    62c8:	71 1d       	adc	r23, r1
    62ca:	81 1d       	adc	r24, r1
    62cc:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    62ce:	98 2f       	mov	r25, r24
    62d0:	87 2f       	mov	r24, r23
    62d2:	76 2f       	mov	r23, r22
    62d4:	66 27       	eor	r22, r22
                tempTime += command[3];
    62d6:	20 91 1d 34 	lds	r18, 0x341D
    62da:	62 0f       	add	r22, r18
    62dc:	71 1d       	adc	r23, r1
    62de:	81 1d       	adc	r24, r1
    62e0:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    62e2:	98 2f       	mov	r25, r24
    62e4:	87 2f       	mov	r24, r23
    62e6:	76 2f       	mov	r23, r22
    62e8:	66 27       	eor	r22, r22
                tempTime += command[4];
				
                Time_Set(tempTime);
    62ea:	20 91 1e 34 	lds	r18, 0x341E
    62ee:	62 0f       	add	r22, r18
    62f0:	71 1d       	adc	r23, r1
    62f2:	81 1d       	adc	r24, r1
    62f4:	91 1d       	adc	r25, r1
    62f6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Time_Set>
    62fa:	81 e0       	ldi	r24, 0x01	; 1
    62fc:	08 c0       	rjmp	.+16     	; 0x630e <Uploader_getTime+0x96>
    62fe:	ce 01       	movw	r24, r28
    6300:	01 97       	sbiw	r24, 0x01	; 1
    6302:	f1 f7       	brne	.-4      	; 0x6300 <Uploader_getTime+0x88>
                return true;
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6304:	0f 5f       	subi	r16, 0xFF	; 255
        if(timeOutCounter > 100){
    6306:	05 36       	cpi	r16, 0x65	; 101
    6308:	09 f0       	breq	.+2      	; 0x630c <Uploader_getTime+0x94>
    630a:	c1 cf       	rjmp	.-126    	; 0x628e <Uploader_getTime+0x16>
    630c:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    630e:	df 91       	pop	r29
    6310:	cf 91       	pop	r28
    6312:	1f 91       	pop	r17
    6314:	0f 91       	pop	r16
    6316:	08 95       	ret

00006318 <Uploader_eraseFile>:
    okToUpload = false;
    uploadPercentBS = 100;
    return true;
}

bool Uploader_eraseFile(void){
    6318:	ff 92       	push	r15
    631a:	0f 93       	push	r16
    631c:	1f 93       	push	r17
    631e:	cf 93       	push	r28
    6320:	df 93       	push	r29
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    Debug_SendByte('E');
    6322:	85 e4       	ldi	r24, 0x45	; 69
    6324:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6328:	ff 24       	eor	r15, r15
    632a:	10 e0       	ldi	r17, 0x00	; 0
    632c:	00 e0       	ldi	r16, 0x00	; 0
    632e:	c6 e6       	ldi	r28, 0x66	; 102
    6330:	de e0       	ldi	r29, 0x0E	; 14
    while(true){
        if(Debug_CharReadyToRead()){
    6332:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6336:	88 23       	and	r24, r24
    6338:	91 f1       	breq	.+100    	; 0x639e <Uploader_eraseFile+0x86>
            if(commandCounter == 0){
    633a:	11 23       	and	r17, r17
    633c:	41 f4       	brne	.+16     	; 0x634e <Uploader_eraseFile+0x36>
                numBytesToRead = Debug_GetByte(false);
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6344:	08 2f       	mov	r16, r24
                Debug_SendByte(numBytesToRead);
    6346:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    634a:	11 e0       	ldi	r17, 0x01	; 1
    634c:	28 c0       	rjmp	.+80     	; 0x639e <Uploader_eraseFile+0x86>
                commandCounter++;
            } else {
                fileToErase[commandCounter-1] = Debug_GetByte(false);
    634e:	80 e0       	ldi	r24, 0x00	; 0
    6350:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6354:	e1 2f       	mov	r30, r17
    6356:	f0 e0       	ldi	r31, 0x00	; 0
    6358:	ee 5c       	subi	r30, 0xCE	; 206
    635a:	f0 4c       	sbci	r31, 0xC0	; 192
    635c:	80 83       	st	Z, r24
                Debug_SendByte(fileToErase[commandCounter-1]);
    635e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
                commandCounter++;
    6362:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    6364:	80 2f       	mov	r24, r16
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	01 96       	adiw	r24, 0x01	; 1
    636a:	e1 2f       	mov	r30, r17
    636c:	f0 e0       	ldi	r31, 0x00	; 0
    636e:	e8 17       	cp	r30, r24
    6370:	f9 07       	cpc	r31, r25
    6372:	a9 f4       	brne	.+42     	; 0x639e <Uploader_eraseFile+0x86>
                    fileToErase[numBytesToRead+1] = 0;
    6374:	ed 5c       	subi	r30, 0xCD	; 205
    6376:	f0 4c       	sbci	r31, 0xC0	; 192
    6378:	10 82       	st	Z, r1
                    okToEraseFile = true;
    637a:	81 e0       	ldi	r24, 0x01	; 1
    637c:	80 93 dc 27 	sts	0x27DC, r24
                    while(okToEraseFile);
    6380:	80 91 dc 27 	lds	r24, 0x27DC
    6384:	88 23       	and	r24, r24
    6386:	e1 f7       	brne	.-8      	; 0x6380 <Uploader_eraseFile+0x68>
                    if(eraseFileReturn == FR_OK){
    6388:	80 91 0a 3a 	lds	r24, 0x3A0A
    638c:	88 23       	and	r24, r24
    638e:	11 f4       	brne	.+4      	; 0x6394 <Uploader_eraseFile+0x7c>
                        Debug_SendByte('T');
    6390:	84 e5       	ldi	r24, 0x54	; 84
    6392:	01 c0       	rjmp	.+2      	; 0x6396 <Uploader_eraseFile+0x7e>
                        return true;
                    } else {
                        Debug_SendByte('F');
    6394:	86 e4       	ldi	r24, 0x46	; 70
    6396:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    639a:	81 e0       	ldi	r24, 0x01	; 1
    639c:	08 c0       	rjmp	.+16     	; 0x63ae <Uploader_eraseFile+0x96>
    639e:	ce 01       	movw	r24, r28
    63a0:	01 97       	sbiw	r24, 0x01	; 1
    63a2:	f1 f7       	brne	.-4      	; 0x63a0 <Uploader_eraseFile+0x88>
                    }
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    63a4:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    63a6:	85 e6       	ldi	r24, 0x65	; 101
    63a8:	f8 16       	cp	r15, r24
    63aa:	19 f6       	brne	.-122    	; 0x6332 <Uploader_eraseFile+0x1a>
    63ac:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    63ae:	df 91       	pop	r29
    63b0:	cf 91       	pop	r28
    63b2:	1f 91       	pop	r17
    63b4:	0f 91       	pop	r16
    63b6:	ff 90       	pop	r15
    63b8:	08 95       	ret

000063ba <Uploader_ClearCRC>:
	Debug_SendString(port,true);
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    63ba:	8f ef       	ldi	r24, 0xFF	; 255
    63bc:	9f ef       	ldi	r25, 0xFF	; 255
    63be:	af ef       	ldi	r26, 0xFF	; 255
    63c0:	bf ef       	ldi	r27, 0xFF	; 255
    63c2:	80 93 f0 39 	sts	0x39F0, r24
    63c6:	90 93 f1 39 	sts	0x39F1, r25
    63ca:	a0 93 f2 39 	sts	0x39F2, r26
    63ce:	b0 93 f3 39 	sts	0x39F3, r27
}
    63d2:	08 95       	ret

000063d4 <Uploader_WriteCRC>:

void Uploader_WriteCRC(void){
    63d4:	ef 92       	push	r14
    63d6:	ff 92       	push	r15
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    uint32_t tmpCRC = uploadCRC^0xFFFFFFFF;
    63dc:	e0 90 f0 39 	lds	r14, 0x39F0
    63e0:	f0 90 f1 39 	lds	r15, 0x39F1
    63e4:	00 91 f2 39 	lds	r16, 0x39F2
    63e8:	10 91 f3 39 	lds	r17, 0x39F3
    63ec:	e0 94       	com	r14
    63ee:	f0 94       	com	r15
    63f0:	00 95       	com	r16
    63f2:	10 95       	com	r17
    Debug_SendByte((tmpCRC >> 24) & 0xFF);
    63f4:	81 2f       	mov	r24, r17
    63f6:	99 27       	eor	r25, r25
    63f8:	aa 27       	eor	r26, r26
    63fa:	bb 27       	eor	r27, r27
    63fc:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >> 16) & 0xFF);
    6400:	c8 01       	movw	r24, r16
    6402:	aa 27       	eor	r26, r26
    6404:	bb 27       	eor	r27, r27
    6406:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  8) & 0xFF);
    640a:	bb 27       	eor	r27, r27
    640c:	a1 2f       	mov	r26, r17
    640e:	90 2f       	mov	r25, r16
    6410:	8f 2d       	mov	r24, r15
    6412:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
    6416:	8e 2d       	mov	r24, r14
    6418:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
}
    641c:	1f 91       	pop	r17
    641e:	0f 91       	pop	r16
    6420:	ff 90       	pop	r15
    6422:	ef 90       	pop	r14
    6424:	08 95       	ret

00006426 <Uploader_uploadFile>:
    }
}



bool Uploader_uploadFile(void){
    6426:	5f 92       	push	r5
    6428:	6f 92       	push	r6
    642a:	7f 92       	push	r7
    642c:	8f 92       	push	r8
    642e:	9f 92       	push	r9
    6430:	af 92       	push	r10
    6432:	bf 92       	push	r11
    6434:	cf 92       	push	r12
    6436:	df 92       	push	r13
    6438:	ef 92       	push	r14
    643a:	ff 92       	push	r15
    643c:	0f 93       	push	r16
    643e:	1f 93       	push	r17
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    uint32_t responseLength;
    bool gotFileName = false;
	
    uploading = true;
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	80 93 d2 27 	sts	0x27D2, r24
    644a:	88 ee       	ldi	r24, 0xE8	; 232
    644c:	93 e0       	ldi	r25, 0x03	; 3
    644e:	20 e7       	ldi	r18, 0x70	; 112
    6450:	31 e0       	ldi	r19, 0x01	; 1
    6452:	f9 01       	movw	r30, r18
    6454:	31 97       	sbiw	r30, 0x01	; 1
    6456:	f1 f7       	brne	.-4      	; 0x6454 <Uploader_uploadFile+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6458:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    645a:	d9 f7       	brne	.-10     	; 0x6452 <Uploader_uploadFile+0x2c>
    _delay_ms(100);
	
    Debug_SendByte('D');
    645c:	84 e4       	ldi	r24, 0x44	; 68
    645e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6462:	ee 24       	eor	r14, r14
    6464:	10 e0       	ldi	r17, 0x00	; 0
    6466:	00 e0       	ldi	r16, 0x00	; 0
    6468:	c6 e6       	ldi	r28, 0x66	; 102
    646a:	de e0       	ldi	r29, 0x0E	; 14
	
    while(!gotFileName){
        if(Debug_CharReadyToRead()){
    646c:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6470:	88 23       	and	r24, r24
    6472:	11 f1       	breq	.+68     	; 0x64b8 <Uploader_uploadFile+0x92>
            if(commandCounter == 0){
    6474:	11 23       	and	r17, r17
    6476:	41 f4       	brne	.+16     	; 0x6488 <Uploader_uploadFile+0x62>
                numBytesToRead = Debug_GetByte(false);
    6478:	80 e0       	ldi	r24, 0x00	; 0
    647a:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    647e:	08 2f       	mov	r16, r24
                Debug_SendByte(numBytesToRead);
    6480:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6484:	11 e0       	ldi	r17, 0x01	; 1
    6486:	18 c0       	rjmp	.+48     	; 0x64b8 <Uploader_uploadFile+0x92>
                commandCounter++;
            } else {
                fileToUpload[commandCounter-1] = Debug_GetByte(false);
    6488:	80 e0       	ldi	r24, 0x00	; 0
    648a:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    648e:	e1 2f       	mov	r30, r17
    6490:	f0 e0       	ldi	r31, 0x00	; 0
    6492:	e7 58       	subi	r30, 0x87	; 135
    6494:	ff 4c       	sbci	r31, 0xCF	; 207
    6496:	80 83       	st	Z, r24
                Debug_SendByte(fileToUpload[commandCounter-1]);
    6498:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
                commandCounter++;
    649c:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    649e:	e1 2f       	mov	r30, r17
    64a0:	f0 e0       	ldi	r31, 0x00	; 0
    64a2:	80 2f       	mov	r24, r16
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	01 96       	adiw	r24, 0x01	; 1
    64a8:	e8 17       	cp	r30, r24
    64aa:	f9 07       	cpc	r31, r25
    64ac:	29 f4       	brne	.+10     	; 0x64b8 <Uploader_uploadFile+0x92>
                    fileToUpload[numBytesToRead+1] = 0;
    64ae:	e6 58       	subi	r30, 0x86	; 134
    64b0:	ff 4c       	sbci	r31, 0xCF	; 207
    64b2:	10 82       	st	Z, r1
    64b4:	21 e0       	ldi	r18, 0x01	; 1
    64b6:	01 c0       	rjmp	.+2      	; 0x64ba <Uploader_uploadFile+0x94>
    64b8:	20 e0       	ldi	r18, 0x00	; 0
    64ba:	ce 01       	movw	r24, r28
    64bc:	01 97       	sbiw	r24, 0x01	; 1
    64be:	f1 f7       	brne	.-4      	; 0x64bc <Uploader_uploadFile+0x96>
                    gotFileName = true;
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    64c0:	e3 94       	inc	r14
        if(timeOutCounter > 100){
    64c2:	85 e6       	ldi	r24, 0x65	; 101
    64c4:	e8 16       	cp	r14, r24
    64c6:	11 f4       	brne	.+4      	; 0x64cc <Uploader_uploadFile+0xa6>
    64c8:	80 e0       	ldi	r24, 0x00	; 0
    64ca:	77 c1       	rjmp	.+750    	; 0x67ba <Uploader_uploadFile+0x394>
    uploading = true;
    _delay_ms(100);
	
    Debug_SendByte('D');
	
    while(!gotFileName){
    64cc:	22 23       	and	r18, r18
    64ce:	71 f2       	breq	.-100    	; 0x646c <Uploader_uploadFile+0x46>
        if(timeOutCounter > 100){
            return false;
        }
    }
	
    okToOpenFileToUpload = true;
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	80 93 d7 27 	sts	0x27D7, r24
    while(!uploadFileOpened);
    64d6:	80 91 d8 27 	lds	r24, 0x27D8
    64da:	88 23       	and	r24, r24
    64dc:	e1 f3       	breq	.-8      	; 0x64d6 <Uploader_uploadFile+0xb0>
    64de:	80 e1       	ldi	r24, 0x10	; 16
    64e0:	97 e2       	ldi	r25, 0x27	; 39
    64e2:	20 e7       	ldi	r18, 0x70	; 112
    64e4:	31 e0       	ldi	r19, 0x01	; 1
    64e6:	f9 01       	movw	r30, r18
    64e8:	31 97       	sbiw	r30, 0x01	; 1
    64ea:	f1 f7       	brne	.-4      	; 0x64e8 <Uploader_uploadFile+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64ee:	d9 f7       	brne	.-10     	; 0x64e6 <Uploader_uploadFile+0xc0>
	_delay_ms(1000);
	
	if(!fileExists){
    64f0:	80 91 dd 27 	lds	r24, 0x27DD
    64f4:	88 23       	and	r24, r24
    64f6:	b9 f4       	brne	.+46     	; 0x6526 <Uploader_uploadFile+0x100>
        Debug_SendByte(0);
    64f8:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        Debug_SendByte(0);
    64fc:	80 e0       	ldi	r24, 0x00	; 0
    64fe:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        Debug_SendByte(0);
    6502:	80 e0       	ldi	r24, 0x00	; 0
    6504:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        Debug_SendByte(0);
    6508:	80 e0       	ldi	r24, 0x00	; 0
    650a:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        okToCloseUploadFile = true;
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	80 93 db 27 	sts	0x27DB, r24
        while(okToCloseUploadFile);
    6514:	80 91 db 27 	lds	r24, 0x27DB
    6518:	88 23       	and	r24, r24
    651a:	e1 f7       	brne	.-8      	; 0x6514 <Uploader_uploadFile+0xee>
        uploading = false;
    651c:	10 92 d2 27 	sts	0x27D2, r1
        okToUpload = false;
    6520:	10 92 d5 27 	sts	0x27D5, r1
    6524:	49 c1       	rjmp	.+658    	; 0x67b8 <Uploader_uploadFile+0x392>
	Debug_SendString(port,true);
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    6526:	8f ef       	ldi	r24, 0xFF	; 255
    6528:	9f ef       	ldi	r25, 0xFF	; 255
    652a:	af ef       	ldi	r26, 0xFF	; 255
    652c:	bf ef       	ldi	r27, 0xFF	; 255
    652e:	80 93 f0 39 	sts	0x39F0, r24
    6532:	90 93 f1 39 	sts	0x39F1, r25
    6536:	a0 93 f2 39 	sts	0x39F2, r26
    653a:	b0 93 f3 39 	sts	0x39F3, r27
        okToUpload = false;
        return true;
    }
	
    Uploader_ClearCRC();
    responseLength = uploadFileSize + 4;
    653e:	e0 90 c4 27 	lds	r14, 0x27C4
    6542:	f0 90 c5 27 	lds	r15, 0x27C5
    6546:	00 91 c6 27 	lds	r16, 0x27C6
    654a:	10 91 c7 27 	lds	r17, 0x27C7
    654e:	84 e0       	ldi	r24, 0x04	; 4
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	a0 e0       	ldi	r26, 0x00	; 0
    6554:	b0 e0       	ldi	r27, 0x00	; 0
    6556:	e8 0e       	add	r14, r24
    6558:	f9 1e       	adc	r15, r25
    655a:	0a 1f       	adc	r16, r26
    655c:	1b 1f       	adc	r17, r27
    Debug_SendByte((responseLength >> 24) & 0xFF);
    655e:	81 2f       	mov	r24, r17
    6560:	99 27       	eor	r25, r25
    6562:	aa 27       	eor	r26, r26
    6564:	bb 27       	eor	r27, r27
    6566:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((responseLength >> 16) & 0xFF);
    656a:	c8 01       	movw	r24, r16
    656c:	aa 27       	eor	r26, r26
    656e:	bb 27       	eor	r27, r27
    6570:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((responseLength >>  8) & 0xFF);
    6574:	bb 27       	eor	r27, r27
    6576:	a1 2f       	mov	r26, r17
    6578:	90 2f       	mov	r25, r16
    657a:	8f 2d       	mov	r24, r15
    657c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((responseLength >>  0) & 0xFF);
    6580:	8e 2d       	mov	r24, r14
    6582:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    6586:	60 91 c4 27 	lds	r22, 0x27C4
    658a:	70 91 c5 27 	lds	r23, 0x27C5
    658e:	80 91 c6 27 	lds	r24, 0x27C6
    6592:	90 91 c7 27 	lds	r25, 0x27C7
    6596:	28 ee       	ldi	r18, 0xE8	; 232
    6598:	33 e0       	ldi	r19, 0x03	; 3
    659a:	40 e0       	ldi	r20, 0x00	; 0
    659c:	50 e0       	ldi	r21, 0x00	; 0
    659e:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    65a2:	c9 01       	movw	r24, r18
    65a4:	da 01       	movw	r26, r20
    65a6:	80 93 c9 27 	sts	0x27C9, r24
    65aa:	90 93 ca 27 	sts	0x27CA, r25
    65ae:	a0 93 cb 27 	sts	0x27CB, r26
    65b2:	b0 93 cc 27 	sts	0x27CC, r27
    leftOverBytesToUpload   = uploadFileSize %  1000;
    65b6:	60 91 c4 27 	lds	r22, 0x27C4
    65ba:	70 91 c5 27 	lds	r23, 0x27C5
    65be:	80 91 c6 27 	lds	r24, 0x27C6
    65c2:	90 91 c7 27 	lds	r25, 0x27C7
    65c6:	28 ee       	ldi	r18, 0xE8	; 232
    65c8:	33 e0       	ldi	r19, 0x03	; 3
    65ca:	40 e0       	ldi	r20, 0x00	; 0
    65cc:	50 e0       	ldi	r21, 0x00	; 0
    65ce:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    65d2:	9b 01       	movw	r18, r22
    65d4:	ac 01       	movw	r20, r24
    65d6:	20 93 cd 27 	sts	0x27CD, r18
    65da:	30 93 ce 27 	sts	0x27CE, r19
    65de:	40 93 cf 27 	sts	0x27CF, r20
    65e2:	50 93 d0 27 	sts	0x27D0, r21
    65e6:	66 24       	eor	r6, r6
    65e8:	77 24       	eor	r7, r7
    65ea:	43 01       	movw	r8, r6
    65ec:	aa 24       	eor	r10, r10
    65ee:	bb 24       	eor	r11, r11
    65f0:	65 01       	movw	r12, r10
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
    65f2:	55 24       	eor	r5, r5
    65f4:	53 94       	inc	r5
    65f6:	62 c0       	rjmp	.+196    	; 0x66bc <Uploader_uploadFile+0x296>
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
    65f8:	10 92 da 27 	sts	0x27DA, r1
        okToFillUploadFileBuffer = true;
    65fc:	50 92 d9 27 	sts	0x27D9, r5
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    6600:	20 91 c9 27 	lds	r18, 0x27C9
    6604:	30 91 ca 27 	lds	r19, 0x27CA
    6608:	40 91 cb 27 	lds	r20, 0x27CB
    660c:	50 91 cc 27 	lds	r21, 0x27CC
    6610:	c6 01       	movw	r24, r12
    6612:	b5 01       	movw	r22, r10
    6614:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    6618:	20 93 c8 27 	sts	0x27C8, r18
        while(!uploadFileBufferFull);
    661c:	80 91 da 27 	lds	r24, 0x27DA
    6620:	88 23       	and	r24, r24
    6622:	e1 f3       	breq	.-8      	; 0x661c <Uploader_uploadFile+0x1f6>
    6624:	c2 e9       	ldi	r28, 0x92	; 146
    6626:	dc e2       	ldi	r29, 0x2C	; 44
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
			Debug_SendByte(uploadFileBuffer[j]);
    6628:	88 81       	ld	r24, Y
    662a:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    662e:	e0 90 f0 39 	lds	r14, 0x39F0
    6632:	f0 90 f1 39 	lds	r15, 0x39F1
    6636:	00 91 f2 39 	lds	r16, 0x39F2
    663a:	10 91 f3 39 	lds	r17, 0x39F3
    663e:	80 91 f0 39 	lds	r24, 0x39F0
    6642:	90 91 f1 39 	lds	r25, 0x39F1
    6646:	a0 91 f2 39 	lds	r26, 0x39F2
    664a:	b0 91 f3 39 	lds	r27, 0x39F3
    664e:	90 70       	andi	r25, 0x00	; 0
    6650:	a0 70       	andi	r26, 0x00	; 0
    6652:	b0 70       	andi	r27, 0x00	; 0
    6654:	29 91       	ld	r18, Y+
    6656:	30 e0       	ldi	r19, 0x00	; 0
    6658:	40 e0       	ldi	r20, 0x00	; 0
    665a:	50 e0       	ldi	r21, 0x00	; 0
    665c:	82 27       	eor	r24, r18
    665e:	93 27       	eor	r25, r19
    6660:	a4 27       	eor	r26, r20
    6662:	b5 27       	eor	r27, r21
    6664:	88 0f       	add	r24, r24
    6666:	99 1f       	adc	r25, r25
    6668:	88 0f       	add	r24, r24
    666a:	99 1f       	adc	r25, r25
    666c:	8e 5e       	subi	r24, 0xEE	; 238
    666e:	9c 4d       	sbci	r25, 0xDC	; 220
    6670:	ef 2c       	mov	r14, r15
    6672:	f0 2e       	mov	r15, r16
    6674:	01 2f       	mov	r16, r17
    6676:	11 27       	eor	r17, r17
    6678:	fc 01       	movw	r30, r24
    667a:	80 81       	ld	r24, Z
    667c:	91 81       	ldd	r25, Z+1	; 0x01
    667e:	a2 81       	ldd	r26, Z+2	; 0x02
    6680:	b3 81       	ldd	r27, Z+3	; 0x03
    6682:	e8 26       	eor	r14, r24
    6684:	f9 26       	eor	r15, r25
    6686:	0a 27       	eor	r16, r26
    6688:	1b 27       	eor	r17, r27
    668a:	e0 92 f0 39 	sts	0x39F0, r14
    668e:	f0 92 f1 39 	sts	0x39F1, r15
    6692:	00 93 f2 39 	sts	0x39F2, r16
    6696:	10 93 f3 39 	sts	0x39F3, r17
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
        while(!uploadFileBufferFull);
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
    669a:	f0 e3       	ldi	r31, 0x30	; 48
    669c:	ca 37       	cpi	r28, 0x7A	; 122
    669e:	df 07       	cpc	r29, r31
    66a0:	19 f6       	brne	.-122    	; 0x6628 <Uploader_uploadFile+0x202>
    Debug_SendByte((responseLength >>  0) & 0xFF);
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    66a2:	08 94       	sec
    66a4:	61 1c       	adc	r6, r1
    66a6:	71 1c       	adc	r7, r1
    66a8:	81 1c       	adc	r8, r1
    66aa:	91 1c       	adc	r9, r1
    66ac:	84 e6       	ldi	r24, 0x64	; 100
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	a0 e0       	ldi	r26, 0x00	; 0
    66b2:	b0 e0       	ldi	r27, 0x00	; 0
    66b4:	a8 0e       	add	r10, r24
    66b6:	b9 1e       	adc	r11, r25
    66b8:	ca 1e       	adc	r12, r26
    66ba:	db 1e       	adc	r13, r27
    66bc:	80 91 c9 27 	lds	r24, 0x27C9
    66c0:	90 91 ca 27 	lds	r25, 0x27CA
    66c4:	a0 91 cb 27 	lds	r26, 0x27CB
    66c8:	b0 91 cc 27 	lds	r27, 0x27CC
    66cc:	68 16       	cp	r6, r24
    66ce:	79 06       	cpc	r7, r25
    66d0:	8a 06       	cpc	r8, r26
    66d2:	9b 06       	cpc	r9, r27
    66d4:	08 f4       	brcc	.+2      	; 0x66d8 <Uploader_uploadFile+0x2b2>
    66d6:	90 cf       	rjmp	.-224    	; 0x65f8 <Uploader_uploadFile+0x1d2>
			Uploader_UpdateCRC(uploadFileBuffer[j]);
			
			
		}
    }
    uploadFileBufferFull = false;
    66d8:	10 92 da 27 	sts	0x27DA, r1
    okToFillUploadFileBuffer = true;
    66dc:	81 e0       	ldi	r24, 0x01	; 1
    66de:	80 93 d9 27 	sts	0x27D9, r24
    while(!uploadFileBufferFull);
    66e2:	80 91 da 27 	lds	r24, 0x27DA
    66e6:	88 23       	and	r24, r24
    66e8:	e1 f3       	breq	.-8      	; 0x66e2 <Uploader_uploadFile+0x2bc>
    66ea:	c2 e9       	ldi	r28, 0x92	; 146
    66ec:	dc e2       	ldi	r29, 0x2C	; 44
    66ee:	20 e0       	ldi	r18, 0x00	; 0
    66f0:	30 e0       	ldi	r19, 0x00	; 0
    66f2:	40 e0       	ldi	r20, 0x00	; 0
    66f4:	50 e0       	ldi	r21, 0x00	; 0
    66f6:	3b c0       	rjmp	.+118    	; 0x676e <Uploader_uploadFile+0x348>
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
        Debug_SendByte(uploadFileBuffer[j]);
    66f8:	88 81       	ld	r24, Y
    66fa:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    66fe:	e0 90 f0 39 	lds	r14, 0x39F0
    6702:	f0 90 f1 39 	lds	r15, 0x39F1
    6706:	00 91 f2 39 	lds	r16, 0x39F2
    670a:	10 91 f3 39 	lds	r17, 0x39F3
    670e:	80 91 f0 39 	lds	r24, 0x39F0
    6712:	90 91 f1 39 	lds	r25, 0x39F1
    6716:	a0 91 f2 39 	lds	r26, 0x39F2
    671a:	b0 91 f3 39 	lds	r27, 0x39F3
    671e:	90 70       	andi	r25, 0x00	; 0
    6720:	a0 70       	andi	r26, 0x00	; 0
    6722:	b0 70       	andi	r27, 0x00	; 0
    6724:	29 91       	ld	r18, Y+
    6726:	30 e0       	ldi	r19, 0x00	; 0
    6728:	40 e0       	ldi	r20, 0x00	; 0
    672a:	50 e0       	ldi	r21, 0x00	; 0
    672c:	82 27       	eor	r24, r18
    672e:	93 27       	eor	r25, r19
    6730:	a4 27       	eor	r26, r20
    6732:	b5 27       	eor	r27, r21
    6734:	88 0f       	add	r24, r24
    6736:	99 1f       	adc	r25, r25
    6738:	88 0f       	add	r24, r24
    673a:	99 1f       	adc	r25, r25
    673c:	8e 5e       	subi	r24, 0xEE	; 238
    673e:	9c 4d       	sbci	r25, 0xDC	; 220
    6740:	ef 2c       	mov	r14, r15
    6742:	f0 2e       	mov	r15, r16
    6744:	01 2f       	mov	r16, r17
    6746:	11 27       	eor	r17, r17
    6748:	fc 01       	movw	r30, r24
    674a:	80 81       	ld	r24, Z
    674c:	91 81       	ldd	r25, Z+1	; 0x01
    674e:	a2 81       	ldd	r26, Z+2	; 0x02
    6750:	b3 81       	ldd	r27, Z+3	; 0x03
    6752:	e8 26       	eor	r14, r24
    6754:	f9 26       	eor	r15, r25
    6756:	0a 27       	eor	r16, r26
    6758:	1b 27       	eor	r17, r27
    675a:	e0 92 f0 39 	sts	0x39F0, r14
    675e:	f0 92 f1 39 	sts	0x39F1, r15
    6762:	00 93 f2 39 	sts	0x39F2, r16
    6766:	10 93 f3 39 	sts	0x39F3, r17
    676a:	a6 01       	movw	r20, r12
    676c:	95 01       	movw	r18, r10
		}
    }
    uploadFileBufferFull = false;
    okToFillUploadFileBuffer = true;
    while(!uploadFileBufferFull);
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    676e:	80 91 cd 27 	lds	r24, 0x27CD
    6772:	90 91 ce 27 	lds	r25, 0x27CE
    6776:	a0 91 cf 27 	lds	r26, 0x27CF
    677a:	b0 91 d0 27 	lds	r27, 0x27D0
    677e:	59 01       	movw	r10, r18
    6780:	6a 01       	movw	r12, r20
    6782:	08 94       	sec
    6784:	a1 1c       	adc	r10, r1
    6786:	b1 1c       	adc	r11, r1
    6788:	c1 1c       	adc	r12, r1
    678a:	d1 1c       	adc	r13, r1
    678c:	28 17       	cp	r18, r24
    678e:	39 07       	cpc	r19, r25
    6790:	4a 07       	cpc	r20, r26
    6792:	5b 07       	cpc	r21, r27
    6794:	08 f4       	brcc	.+2      	; 0x6798 <Uploader_uploadFile+0x372>
    6796:	b0 cf       	rjmp	.-160    	; 0x66f8 <Uploader_uploadFile+0x2d2>
        Debug_SendByte(uploadFileBuffer[j]);
        Uploader_UpdateCRC(uploadFileBuffer[j]);
    }
	
    Uploader_WriteCRC();
    6798:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <Uploader_WriteCRC>
	
    okToCloseUploadFile = true;
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	80 93 db 27 	sts	0x27DB, r24
    while(okToCloseUploadFile);
    67a2:	80 91 db 27 	lds	r24, 0x27DB
    67a6:	88 23       	and	r24, r24
    67a8:	e1 f7       	brne	.-8      	; 0x67a2 <Uploader_uploadFile+0x37c>
    uploading = false;
    67aa:	10 92 d2 27 	sts	0x27D2, r1
    okToUpload = false;
    67ae:	10 92 d5 27 	sts	0x27D5, r1
    uploadPercentBS = 100;
    67b2:	84 e6       	ldi	r24, 0x64	; 100
    67b4:	80 93 c8 27 	sts	0x27C8, r24
    67b8:	81 e0       	ldi	r24, 0x01	; 1
    return true;
}
    67ba:	df 91       	pop	r29
    67bc:	cf 91       	pop	r28
    67be:	1f 91       	pop	r17
    67c0:	0f 91       	pop	r16
    67c2:	ff 90       	pop	r15
    67c4:	ef 90       	pop	r14
    67c6:	df 90       	pop	r13
    67c8:	cf 90       	pop	r12
    67ca:	bf 90       	pop	r11
    67cc:	af 90       	pop	r10
    67ce:	9f 90       	pop	r9
    67d0:	8f 90       	pop	r8
    67d2:	7f 90       	pop	r7
    67d4:	6f 90       	pop	r6
    67d6:	5f 90       	pop	r5
    67d8:	08 95       	ret

000067da <Uploader_UpdateCRC>:
    Debug_SendByte((tmpCRC >>  8) & 0xFF);
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
}


void Uploader_UpdateCRC(uint8_t byte){
    67da:	ef 92       	push	r14
    67dc:	ff 92       	push	r15
    67de:	0f 93       	push	r16
    67e0:	1f 93       	push	r17
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    67e2:	e0 90 f0 39 	lds	r14, 0x39F0
    67e6:	f0 90 f1 39 	lds	r15, 0x39F1
    67ea:	00 91 f2 39 	lds	r16, 0x39F2
    67ee:	10 91 f3 39 	lds	r17, 0x39F3
    67f2:	20 91 f0 39 	lds	r18, 0x39F0
    67f6:	30 91 f1 39 	lds	r19, 0x39F1
    67fa:	40 91 f2 39 	lds	r20, 0x39F2
    67fe:	50 91 f3 39 	lds	r21, 0x39F3
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	a0 e0       	ldi	r26, 0x00	; 0
    6806:	b0 e0       	ldi	r27, 0x00	; 0
    6808:	30 70       	andi	r19, 0x00	; 0
    680a:	40 70       	andi	r20, 0x00	; 0
    680c:	50 70       	andi	r21, 0x00	; 0
    680e:	82 27       	eor	r24, r18
    6810:	93 27       	eor	r25, r19
    6812:	a4 27       	eor	r26, r20
    6814:	b5 27       	eor	r27, r21
    6816:	88 0f       	add	r24, r24
    6818:	99 1f       	adc	r25, r25
    681a:	88 0f       	add	r24, r24
    681c:	99 1f       	adc	r25, r25
    681e:	8e 5e       	subi	r24, 0xEE	; 238
    6820:	9c 4d       	sbci	r25, 0xDC	; 220
    6822:	ef 2c       	mov	r14, r15
    6824:	f0 2e       	mov	r15, r16
    6826:	01 2f       	mov	r16, r17
    6828:	11 27       	eor	r17, r17
    682a:	fc 01       	movw	r30, r24
    682c:	80 81       	ld	r24, Z
    682e:	91 81       	ldd	r25, Z+1	; 0x01
    6830:	a2 81       	ldd	r26, Z+2	; 0x02
    6832:	b3 81       	ldd	r27, Z+3	; 0x03
    6834:	e8 26       	eor	r14, r24
    6836:	f9 26       	eor	r15, r25
    6838:	0a 27       	eor	r16, r26
    683a:	1b 27       	eor	r17, r27
    683c:	e0 92 f0 39 	sts	0x39F0, r14
    6840:	f0 92 f1 39 	sts	0x39F1, r15
    6844:	00 93 f2 39 	sts	0x39F2, r16
    6848:	10 93 f3 39 	sts	0x39F3, r17
    684c:	1f 91       	pop	r17
    684e:	0f 91       	pop	r16
    6850:	ff 90       	pop	r15
    6852:	ef 90       	pop	r14
    6854:	08 95       	ret

00006856 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    6856:	0f 93       	push	r16
    6858:	df 93       	push	r29
    685a:	cf 93       	push	r28
    685c:	0f 92       	push	r0
    685e:	cd b7       	in	r28, 0x3d	; 61
    6860:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    6862:	80 ec       	ldi	r24, 0xC0	; 192
    6864:	e0 e5       	ldi	r30, 0x50	; 80
    6866:	f0 e0       	ldi	r31, 0x00	; 0
    6868:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    686a:	80 91 50 00 	lds	r24, 0x0050
    686e:	88 60       	ori	r24, 0x08	; 8
    6870:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    6874:	80 91 51 00 	lds	r24, 0x0051
    6878:	83 ff       	sbrs	r24, 3
    687a:	fc cf       	rjmp	.-8      	; 0x6874 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    687c:	20 91 40 00 	lds	r18, 0x0040
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    6880:	8f b7       	in	r24, 0x3f	; 63
    6882:	89 83       	std	Y+1, r24	; 0x01
    cli();
    6884:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    6886:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    6888:	28 7f       	andi	r18, 0xF8	; 248
    688a:	23 60       	ori	r18, 0x03	; 3
    688c:	80 e4       	ldi	r24, 0x40	; 64
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	fc 01       	movw	r30, r24
    6892:	08 ed       	ldi	r16, 0xD8	; 216
    6894:	04 bf       	out	0x34, r16	; 52
    6896:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    6898:	89 81       	ldd	r24, Y+1	; 0x01
    689a:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    689c:	80 91 50 00 	lds	r24, 0x0050
    68a0:	8e 7f       	andi	r24, 0xFE	; 254
    68a2:	80 93 50 00 	sts	0x0050, r24
}
    68a6:	0f 90       	pop	r0
    68a8:	cf 91       	pop	r28
    68aa:	df 91       	pop	r29
    68ac:	0f 91       	pop	r16
    68ae:	08 95       	ret

000068b0 <Disable_JTAG>:

void Disable_JTAG(void){
    68b0:	0f 93       	push	r16
    68b2:	df 93       	push	r29
    68b4:	cf 93       	push	r28
    68b6:	0f 92       	push	r0
    68b8:	cd b7       	in	r28, 0x3d	; 61
    68ba:	de b7       	in	r29, 0x3e	; 62
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    68bc:	8f b7       	in	r24, 0x3f	; 63
    68be:	89 83       	std	Y+1, r24	; 0x01
    cli();
    68c0:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    68c2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    68c4:	21 e0       	ldi	r18, 0x01	; 1
    68c6:	86 e9       	ldi	r24, 0x96	; 150
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	fc 01       	movw	r30, r24
    68cc:	08 ed       	ldi	r16, 0xD8	; 216
    68ce:	04 bf       	out	0x34, r16	; 52
    68d0:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    68d2:	89 81       	ldd	r24, Y+1	; 0x01
    68d4:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    68d6:	0f 90       	pop	r0
    68d8:	cf 91       	pop	r28
    68da:	df 91       	pop	r29
    68dc:	0f 91       	pop	r16
    68de:	08 95       	ret

000068e0 <Interrupt_Init>:


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    68e0:	e0 ea       	ldi	r30, 0xA0	; 160
    68e2:	f0 e0       	ldi	r31, 0x00	; 0
    68e4:	82 81       	ldd	r24, Z+2	; 0x02
    68e6:	87 60       	ori	r24, 0x07	; 7
    68e8:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    68ea:	78 94       	sei
}
    68ec:	08 95       	ret

000068ee <Charger_Init>:

		   
void Charger_Init(void){
   Charger_Port.DIRCLR = 1 << Charger_Pin;
    68ee:	e0 e6       	ldi	r30, 0x60	; 96
    68f0:	f6 e0       	ldi	r31, 0x06	; 6
    68f2:	88 e0       	ldi	r24, 0x08	; 8
    68f4:	82 83       	std	Z+2, r24	; 0x02
   Charger_Port.Charger_Pin_CNTL = PORT_OPC_WIREDANDPULL_gc;
    68f6:	88 e3       	ldi	r24, 0x38	; 56
    68f8:	83 8b       	std	Z+19, r24	; 0x13
}
    68fa:	08 95       	ret

000068fc <Charged>:

bool Charged(void){
   if((Button_Port.IN & (1<<Charger_Pin)) >0 ){
    68fc:	e0 ea       	ldi	r30, 0xA0	; 160
    68fe:	f6 e0       	ldi	r31, 0x06	; 6
    6900:	80 85       	ldd	r24, Z+8	; 0x08
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	43 e0       	ldi	r20, 0x03	; 3
    6906:	96 95       	lsr	r25
    6908:	87 95       	ror	r24
    690a:	4a 95       	dec	r20
    690c:	e1 f7       	brne	.-8      	; 0x6906 <Charged+0xa>
	   return true;
   } else {
	   return false;
   }
}
    690e:	81 70       	andi	r24, 0x01	; 1
    6910:	08 95       	ret

00006912 <GUI_Init>:
	// div  = 1024
	// per  = 1440
	// => 10 samples per second
	
	// Set period/TOP value
	GUI_Timer.PER = 1440;
    6912:	e0 e0       	ldi	r30, 0x00	; 0
    6914:	f9 e0       	ldi	r31, 0x09	; 9
    6916:	80 ea       	ldi	r24, 0xA0	; 160
    6918:	95 e0       	ldi	r25, 0x05	; 5
    691a:	86 a3       	std	Z+38, r24	; 0x26
    691c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Select clock source
	GUI_Timer.CTRLA = (GUI_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    691e:	80 81       	ld	r24, Z
    6920:	80 7f       	andi	r24, 0xF0	; 240
    6922:	87 60       	ori	r24, 0x07	; 7
    6924:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	GUI_Timer.INTCTRLA = (GUI_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    6926:	86 81       	ldd	r24, Z+6	; 0x06
    6928:	8c 7f       	andi	r24, 0xFC	; 252
    692a:	81 60       	ori	r24, 0x01	; 1
    692c:	86 83       	std	Z+6, r24	; 0x06
	
	
	
}
    692e:	08 95       	ret

00006930 <__vector_77>:

ISR(GUI_Timer_vect)                          // 10HZ
{
    6930:	1f 92       	push	r1
    6932:	0f 92       	push	r0
    6934:	0f b6       	in	r0, 0x3f	; 63
    6936:	0f 92       	push	r0
    6938:	0b b6       	in	r0, 0x3b	; 59
    693a:	0f 92       	push	r0
    693c:	11 24       	eor	r1, r1
    693e:	2f 93       	push	r18
    6940:	3f 93       	push	r19
    6942:	4f 93       	push	r20
    6944:	5f 93       	push	r21
    6946:	8f 93       	push	r24
    6948:	9f 93       	push	r25
    694a:	af 93       	push	r26
    694c:	bf 93       	push	r27
    694e:	cf 93       	push	r28
    6950:	df 93       	push	r29
    6952:	ef 93       	push	r30
    6954:	ff 93       	push	r31
	
	
	if(recording){
    6956:	80 91 69 27 	lds	r24, 0x2769
    695a:	88 23       	and	r24, r24
    695c:	b1 f1       	breq	.+108    	; 0x69ca <__vector_77+0x9a>
		if(UNIX_Time > timeToStopRecording){
    695e:	20 91 e3 27 	lds	r18, 0x27E3
    6962:	30 91 e4 27 	lds	r19, 0x27E4
    6966:	40 91 e5 27 	lds	r20, 0x27E5
    696a:	50 91 e6 27 	lds	r21, 0x27E6
    696e:	80 91 9c 27 	lds	r24, 0x279C
    6972:	90 91 9d 27 	lds	r25, 0x279D
    6976:	a0 91 9e 27 	lds	r26, 0x279E
    697a:	b0 91 9f 27 	lds	r27, 0x279F
    697e:	28 17       	cp	r18, r24
    6980:	39 07       	cpc	r19, r25
    6982:	4a 07       	cpc	r20, r26
    6984:	5b 07       	cpc	r21, r27
    6986:	08 f5       	brcc	.+66     	; 0x69ca <__vector_77+0x9a>
			restartingFile = true;
    6988:	81 e0       	ldi	r24, 0x01	; 1
    698a:	80 93 e2 27 	sts	0x27E2, r24
			recording = false;
    698e:	10 92 69 27 	sts	0x2769, r1
			okToCloseLogFile = true;
    6992:	80 93 e1 27 	sts	0x27E1, r24
			while(okToCloseLogFile);
    6996:	80 91 e1 27 	lds	r24, 0x27E1
    699a:	88 23       	and	r24, r24
    699c:	e1 f7       	brne	.-8      	; 0x6996 <__vector_77+0x66>
			if(percentDiskUsed < 950){
    699e:	80 91 ef 27 	lds	r24, 0x27EF
    69a2:	90 91 f0 27 	lds	r25, 0x27F0
    69a6:	a0 91 f1 27 	lds	r26, 0x27F1
    69aa:	b0 91 f2 27 	lds	r27, 0x27F2
    69ae:	86 5b       	subi	r24, 0xB6	; 182
    69b0:	93 40       	sbci	r25, 0x03	; 3
    69b2:	a0 40       	sbci	r26, 0x00	; 0
    69b4:	b0 40       	sbci	r27, 0x00	; 0
    69b6:	38 f4       	brcc	.+14     	; 0x69c6 <__vector_77+0x96>
				okToOpenLogFile = true;
    69b8:	81 e0       	ldi	r24, 0x01	; 1
    69ba:	80 93 df 27 	sts	0x27DF, r24
				while(!recording);
    69be:	80 91 69 27 	lds	r24, 0x2769
    69c2:	88 23       	and	r24, r24
    69c4:	e1 f3       	breq	.-8      	; 0x69be <__vector_77+0x8e>
			}
			restartingFile = false;
    69c6:	10 92 e2 27 	sts	0x27E2, r1
		}
	}
	
	if(timeIsValid){
    69ca:	80 91 de 27 	lds	r24, 0x27DE
    69ce:	88 23       	and	r24, r24
    69d0:	71 f1       	breq	.+92     	; 0x6a2e <__vector_77+0xfe>
		syncCounter++;
    69d2:	80 91 f3 27 	lds	r24, 0x27F3
    69d6:	90 91 f4 27 	lds	r25, 0x27F4
    69da:	01 96       	adiw	r24, 0x01	; 1
    69dc:	80 93 f3 27 	sts	0x27F3, r24
    69e0:	90 93 f4 27 	sts	0x27F4, r25
		if(syncCounter > 6000){
    69e4:	80 91 f3 27 	lds	r24, 0x27F3
    69e8:	90 91 f4 27 	lds	r25, 0x27F4
    69ec:	81 57       	subi	r24, 0x71	; 113
    69ee:	97 41       	sbci	r25, 0x17	; 23
    69f0:	f0 f0       	brcs	.+60     	; 0x6a2e <__vector_77+0xfe>
			syncCounter = 0;
    69f2:	10 92 f3 27 	sts	0x27F3, r1
    69f6:	10 92 f4 27 	sts	0x27F4, r1
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    69fa:	80 91 21 04 	lds	r24, 0x0421
    69fe:	80 61       	ori	r24, 0x10	; 16
    6a00:	e0 e2       	ldi	r30, 0x20	; 32
    6a02:	f4 e0       	ldi	r31, 0x04	; 4
    6a04:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    6a06:	80 91 21 04 	lds	r24, 0x0421
    6a0a:	84 fd       	sbrc	r24, 4
    6a0c:	fc cf       	rjmp	.-8      	; 0x6a06 <__vector_77+0xd6>
	return RTC32.CNT;
    6a0e:	80 91 24 04 	lds	r24, 0x0424
    6a12:	90 91 25 04 	lds	r25, 0x0425
    6a16:	a0 91 26 04 	lds	r26, 0x0426
    6a1a:	b0 91 27 04 	lds	r27, 0x0427
			UNIX_Time = Time_Get();
    6a1e:	80 93 9c 27 	sts	0x279C, r24
    6a22:	90 93 9d 27 	sts	0x279D, r25
    6a26:	a0 93 9e 27 	sts	0x279E, r26
    6a2a:	b0 93 9f 27 	sts	0x279F, r27
		}
	}
	
	if(debounceEnabled){
    6a2e:	80 91 f6 27 	lds	r24, 0x27F6
    6a32:	88 23       	and	r24, r24
    6a34:	69 f0       	breq	.+26     	; 0x6a50 <__vector_77+0x120>
		debounceTimer++;
    6a36:	80 91 f5 27 	lds	r24, 0x27F5
    6a3a:	8f 5f       	subi	r24, 0xFF	; 255
    6a3c:	80 93 f5 27 	sts	0x27F5, r24
		if(debounceTimer > 10){
    6a40:	80 91 f5 27 	lds	r24, 0x27F5
    6a44:	8b 30       	cpi	r24, 0x0B	; 11
    6a46:	20 f0       	brcs	.+8      	; 0x6a50 <__vector_77+0x120>
			debounceTimer = 0;
    6a48:	10 92 f5 27 	sts	0x27F5, r1
			debounceEnabled = false;
    6a4c:	10 92 f6 27 	sts	0x27F6, r1
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
}


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    6a50:	80 91 a8 06 	lds	r24, 0x06A8
    6a54:	86 fd       	sbrc	r24, 6
    6a56:	28 c0       	rjmp	.+80     	; 0x6aa8 <__vector_77+0x178>
    6a58:	d7 c0       	rjmp	.+430    	; 0x6c08 <__vector_77+0x2d8>
		}
	}
		
	if(Button_Pressed(Button_Pin) && !recording && timeIsValid && SD_Inserted() && !debounceEnabled){			// start recording
    6a5a:	80 91 de 27 	lds	r24, 0x27DE
    6a5e:	88 23       	and	r24, r24
    6a60:	19 f1       	breq	.+70     	; 0x6aa8 <__vector_77+0x178>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    6a62:	80 91 a8 06 	lds	r24, 0x06A8
    6a66:	84 fd       	sbrc	r24, 4
    6a68:	1f c0       	rjmp	.+62     	; 0x6aa8 <__vector_77+0x178>
    6a6a:	d4 c0       	rjmp	.+424    	; 0x6c14 <__vector_77+0x2e4>
		if(percentDiskUsed < 950){
    6a6c:	80 91 ef 27 	lds	r24, 0x27EF
    6a70:	90 91 f0 27 	lds	r25, 0x27F0
    6a74:	a0 91 f1 27 	lds	r26, 0x27F1
    6a78:	b0 91 f2 27 	lds	r27, 0x27F2
    6a7c:	86 5b       	subi	r24, 0xB6	; 182
    6a7e:	93 40       	sbci	r25, 0x03	; 3
    6a80:	a0 40       	sbci	r26, 0x00	; 0
    6a82:	b0 40       	sbci	r27, 0x00	; 0
    6a84:	08 f0       	brcs	.+2      	; 0x6a88 <__vector_77+0x158>
    6a86:	59 c0       	rjmp	.+178    	; 0x6b3a <__vector_77+0x20a>
			okToGetRemainingSpace = true;
    6a88:	81 e0       	ldi	r24, 0x01	; 1
    6a8a:	80 93 09 3a 	sts	0x3A09, r24
			while(!okToGetRemainingSpace);
    6a8e:	80 91 09 3a 	lds	r24, 0x3A09
    6a92:	88 23       	and	r24, r24
    6a94:	e1 f3       	breq	.-8      	; 0x6a8e <__vector_77+0x15e>
			
			okToOpenLogFile = true;
    6a96:	81 e0       	ldi	r24, 0x01	; 1
    6a98:	80 93 df 27 	sts	0x27DF, r24
			while(okToOpenLogFile);
    6a9c:	80 91 df 27 	lds	r24, 0x27DF
    6aa0:	88 23       	and	r24, r24
    6aa2:	e1 f7       	brne	.-8      	; 0x6a9c <__vector_77+0x16c>
			debounceEnabled = true;
    6aa4:	81 e0       	ldi	r24, 0x01	; 1
    6aa6:	47 c0       	rjmp	.+142    	; 0x6b36 <__vector_77+0x206>
    6aa8:	80 91 a8 06 	lds	r24, 0x06A8
    6aac:	86 ff       	sbrs	r24, 6
    6aae:	04 c0       	rjmp	.+8      	; 0x6ab8 <__vector_77+0x188>
    6ab0:	80 91 a8 06 	lds	r24, 0x06A8
    6ab4:	84 ff       	sbrs	r24, 4
    6ab6:	41 c0       	rjmp	.+130    	; 0x6b3a <__vector_77+0x20a>
		}
	} else if((Button_Pressed(Button_Pin) || !SD_Inserted()) && recording && !debounceEnabled){		// stop recording
    6ab8:	80 91 69 27 	lds	r24, 0x2769
    6abc:	88 23       	and	r24, r24
    6abe:	e9 f1       	breq	.+122    	; 0x6b3a <__vector_77+0x20a>
    6ac0:	80 91 f6 27 	lds	r24, 0x27F6
    6ac4:	88 23       	and	r24, r24
    6ac6:	c9 f5       	brne	.+114    	; 0x6b3a <__vector_77+0x20a>
		recording = false;
    6ac8:	10 92 69 27 	sts	0x2769, r1
	okToSendEKGBuffer1 = false;
	okToSendEKGBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    6acc:	10 92 b8 27 	sts	0x27B8, r1
    6ad0:	10 92 b9 27 	sts	0x27B9, r1
  	humidityBufferToWriteTo = 1;
    6ad4:	81 e0       	ldi	r24, 0x01	; 1
    6ad6:	80 93 16 27 	sts	0x2716, r24
	okToSendHumidityBuffer1 = false;
    6ada:	10 92 b6 27 	sts	0x27B6, r1
	okToSendHumidityBuffer2 = false;
    6ade:	10 92 b7 27 	sts	0x27B7, r1
	tmp2 = tmp3/10;
	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    6ae2:	10 92 b0 27 	sts	0x27B0, r1
    6ae6:	10 92 b1 27 	sts	0x27B1, r1
  	temperatureBufferToWriteTo = 1;
    6aea:	80 93 14 27 	sts	0x2714, r24
	okToSendTemperatureBuffer1 = false;
    6aee:	10 92 ae 27 	sts	0x27AE, r1
	okToSendTemperatureBuffer2 = false;
    6af2:	10 92 af 27 	sts	0x27AF, r1
}

void Sensors_ResetRespirationBuffers(void){
	respirationBufferCounter = 0;
    6af6:	10 92 ac 27 	sts	0x27AC, r1
    6afa:	10 92 ad 27 	sts	0x27AD, r1
  	respirationBufferToWriteTo = 1;
    6afe:	80 93 13 27 	sts	0x2713, r24
	okToSendRespirationBuffer1 = false;
    6b02:	10 92 aa 27 	sts	0x27AA, r1
	okToSendRespirationBuffer2 = false;
    6b06:	10 92 ab 27 	sts	0x27AB, r1
}

void Sensors_ResetEKGBuffers(void){
	EKGBufferCounter = 0;
    6b0a:	10 92 b4 27 	sts	0x27B4, r1
    6b0e:	10 92 b5 27 	sts	0x27B5, r1
  	EKGBufferToWriteTo = 1;
    6b12:	80 93 15 27 	sts	0x2715, r24
	okToSendEKGBuffer1 = false;
    6b16:	10 92 b2 27 	sts	0x27B2, r1
	okToSendEKGBuffer2 = false;
    6b1a:	10 92 b3 27 	sts	0x27B3, r1
    buffLocation[buffCounter+2] += 1024;
    Accel_deselectChip();
}

void Sensors_ResetAccelBuffers(void){
	accelBufferCounter = 0;
    6b1e:	10 92 a8 27 	sts	0x27A8, r1
    6b22:	10 92 a9 27 	sts	0x27A9, r1
  	accelBufferToWriteTo = 1;
    6b26:	80 93 12 27 	sts	0x2712, r24
	okToSendAccelBuffer1 = false;
    6b2a:	10 92 a6 27 	sts	0x27A6, r1
	okToSendAccelBuffer2 = false;
    6b2e:	10 92 a7 27 	sts	0x27A7, r1
		Sensors_ResetHumidityBuffers();
		Sensors_ResetTemperatureBuffers();
		Sensors_ResetRespirationBuffers();
		Sensors_ResetEKGBuffers();
		Sensors_ResetAccelBuffers();
		okToCloseLogFile = true;
    6b32:	80 93 e1 27 	sts	0x27E1, r24
		debounceEnabled = true;		
    6b36:	80 93 f6 27 	sts	0x27F6, r24
    6b3a:	80 91 a8 06 	lds	r24, 0x06A8
    6b3e:	84 ff       	sbrs	r24, 4
    6b40:	6f c0       	rjmp	.+222    	; 0x6c20 <__vector_77+0x2f0>
	Leds_Port.DIRSET = (1<<led);
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    6b42:	81 e0       	ldi	r24, 0x01	; 1
    6b44:	01 c0       	rjmp	.+2      	; 0x6b48 <__vector_77+0x218>
	
	if(!SD_Inserted()){
		Leds_State(Red,on);
	} else if(!timeIsValid){
		Leds_State(Red,slow);
	} else if(!batteryVoltageOk){
    6b46:	82 e0       	ldi	r24, 0x02	; 2
    6b48:	80 93 4c 39 	sts	0x394C, r24
    6b4c:	08 c0       	rjmp	.+16     	; 0x6b5e <__vector_77+0x22e>
    6b4e:	80 91 18 27 	lds	r24, 0x2718
    6b52:	88 23       	and	r24, r24
    6b54:	11 f4       	brne	.+4      	; 0x6b5a <__vector_77+0x22a>
    6b56:	83 e0       	ldi	r24, 0x03	; 3
    6b58:	f7 cf       	rjmp	.-18     	; 0x6b48 <__vector_77+0x218>
		Leds_State(Red,fast);
	} else {
		Leds_State(Red,off);
	}
	
	if(recording){
    6b5a:	10 92 4c 39 	sts	0x394C, r1
    6b5e:	80 91 69 27 	lds	r24, 0x2769
    6b62:	88 23       	and	r24, r24
    6b64:	11 f0       	breq	.+4      	; 0x6b6a <__vector_77+0x23a>
    6b66:	81 e0       	ldi	r24, 0x01	; 1
    6b68:	0d c0       	rjmp	.+26     	; 0x6b84 <__vector_77+0x254>
		Leds_State(Green,on);
	} else if(connected && !Charged()){
    6b6a:	80 91 d1 27 	lds	r24, 0x27D1
    6b6e:	88 23       	and	r24, r24
    6b70:	21 f0       	breq	.+8      	; 0x6b7a <__vector_77+0x24a>
   Charger_Port.DIRCLR = 1 << Charger_Pin;
   Charger_Port.Charger_Pin_CNTL = PORT_OPC_WIREDANDPULL_gc;
}

bool Charged(void){
   if((Button_Port.IN & (1<<Charger_Pin)) >0 ){
    6b72:	80 91 a8 06 	lds	r24, 0x06A8
    6b76:	83 ff       	sbrs	r24, 3
    6b78:	59 c0       	rjmp	.+178    	; 0x6c2c <__vector_77+0x2fc>
    6b7a:	80 91 a8 06 	lds	r24, 0x06A8
    6b7e:	83 ff       	sbrs	r24, 3
    6b80:	57 c0       	rjmp	.+174    	; 0x6c30 <__vector_77+0x300>
    6b82:	83 e0       	ldi	r24, 0x03	; 3
    6b84:	80 93 4d 39 	sts	0x394D, r24
    6b88:	20 e0       	ldi	r18, 0x00	; 0
    6b8a:	30 e0       	ldi	r19, 0x00	; 0
	Leds_Port.OUTSET = (1<<led);
}


void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1<<led);
    6b8c:	41 e0       	ldi	r20, 0x01	; 1
    6b8e:	50 e0       	ldi	r21, 0x00	; 0
    6b90:	c0 ea       	ldi	r28, 0xA0	; 160
    6b92:	d6 e0       	ldi	r29, 0x06	; 6
	}
	
	
	
	for(uint8_t i = 0; i < numberOfLeds; i++){
		ledCounter[i]++;
    6b94:	d9 01       	movw	r26, r18
    6b96:	a5 5f       	subi	r26, 0xF5	; 245
    6b98:	b5 4c       	sbci	r27, 0xC5	; 197
    6b9a:	8c 91       	ld	r24, X
    6b9c:	8f 5f       	subi	r24, 0xFF	; 255
    6b9e:	8c 93       	st	X, r24
		if (ledState[i] == on) {
    6ba0:	f9 01       	movw	r30, r18
    6ba2:	e4 5b       	subi	r30, 0xB4	; 180
    6ba4:	f6 4c       	sbci	r31, 0xC6	; 198
    6ba6:	80 81       	ld	r24, Z
    6ba8:	81 30       	cpi	r24, 0x01	; 1
    6baa:	49 f4       	brne	.+18     	; 0x6bbe <__vector_77+0x28e>
void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1<<led);
    6bac:	ca 01       	movw	r24, r20
    6bae:	02 2e       	mov	r0, r18
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <__vector_77+0x286>
    6bb2:	88 0f       	add	r24, r24
    6bb4:	99 1f       	adc	r25, r25
    6bb6:	0a 94       	dec	r0
    6bb8:	e2 f7       	brpl	.-8      	; 0x6bb2 <__vector_77+0x282>
    6bba:	8d 83       	std	Y+5, r24	; 0x05
    6bbc:	1f c0       	rjmp	.+62     	; 0x6bfc <__vector_77+0x2cc>
			Leds_Set(i);
		} else if (ledState[i] == slow) {
    6bbe:	80 81       	ld	r24, Z
    6bc0:	82 30       	cpi	r24, 0x02	; 2
    6bc2:	21 f4       	brne	.+8      	; 0x6bcc <__vector_77+0x29c>
			if(ledCounter[i] > 10){
    6bc4:	8c 91       	ld	r24, X
    6bc6:	8b 30       	cpi	r24, 0x0B	; 11
    6bc8:	c8 f0       	brcs	.+50     	; 0x6bfc <__vector_77+0x2cc>
    6bca:	06 c0       	rjmp	.+12     	; 0x6bd8 <__vector_77+0x2a8>
				Leds_Toggle(i);
				ledCounter[i] = 0;
			}
		} else if (ledState[i] == fast) {
    6bcc:	80 81       	ld	r24, Z
    6bce:	83 30       	cpi	r24, 0x03	; 3
    6bd0:	69 f4       	brne	.+26     	; 0x6bec <__vector_77+0x2bc>
			if(ledCounter[i] > 2){
    6bd2:	8c 91       	ld	r24, X
    6bd4:	83 30       	cpi	r24, 0x03	; 3
    6bd6:	90 f0       	brcs	.+36     	; 0x6bfc <__vector_77+0x2cc>
	Leds_Port.OUTCLR = (1<<led);
}


void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1<<led);	
    6bd8:	ca 01       	movw	r24, r20
    6bda:	02 2e       	mov	r0, r18
    6bdc:	02 c0       	rjmp	.+4      	; 0x6be2 <__vector_77+0x2b2>
    6bde:	88 0f       	add	r24, r24
    6be0:	99 1f       	adc	r25, r25
    6be2:	0a 94       	dec	r0
    6be4:	e2 f7       	brpl	.-8      	; 0x6bde <__vector_77+0x2ae>
    6be6:	8f 83       	std	Y+7, r24	; 0x07
				Leds_Toggle(i);
				ledCounter[i] = 0;
    6be8:	1c 92       	st	X, r1
    6bea:	08 c0       	rjmp	.+16     	; 0x6bfc <__vector_77+0x2cc>
	Leds_Port.OUTSET = (1<<led);
}


void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1<<led);
    6bec:	ca 01       	movw	r24, r20
    6bee:	02 2e       	mov	r0, r18
    6bf0:	02 c0       	rjmp	.+4      	; 0x6bf6 <__vector_77+0x2c6>
    6bf2:	88 0f       	add	r24, r24
    6bf4:	99 1f       	adc	r25, r25
    6bf6:	0a 94       	dec	r0
    6bf8:	e2 f7       	brpl	.-8      	; 0x6bf2 <__vector_77+0x2c2>
    6bfa:	8e 83       	std	Y+6, r24	; 0x06
    6bfc:	2f 5f       	subi	r18, 0xFF	; 255
    6bfe:	3f 4f       	sbci	r19, 0xFF	; 255
		Leds_State(Green,off);
	}
	
	
	
	for(uint8_t i = 0; i < numberOfLeds; i++){
    6c00:	22 30       	cpi	r18, 0x02	; 2
    6c02:	31 05       	cpc	r19, r1
    6c04:	39 f6       	brne	.-114    	; 0x6b94 <__vector_77+0x264>
    6c06:	17 c0       	rjmp	.+46     	; 0x6c36 <__vector_77+0x306>
			debounceTimer = 0;
			debounceEnabled = false;
		}
	}
		
	if(Button_Pressed(Button_Pin) && !recording && timeIsValid && SD_Inserted() && !debounceEnabled){			// start recording
    6c08:	80 91 69 27 	lds	r24, 0x2769
    6c0c:	88 23       	and	r24, r24
    6c0e:	09 f0       	breq	.+2      	; 0x6c12 <__vector_77+0x2e2>
    6c10:	4b cf       	rjmp	.-362    	; 0x6aa8 <__vector_77+0x178>
    6c12:	23 cf       	rjmp	.-442    	; 0x6a5a <__vector_77+0x12a>
    6c14:	80 91 f6 27 	lds	r24, 0x27F6
    6c18:	88 23       	and	r24, r24
    6c1a:	09 f0       	breq	.+2      	; 0x6c1e <__vector_77+0x2ee>
    6c1c:	45 cf       	rjmp	.-374    	; 0x6aa8 <__vector_77+0x178>
    6c1e:	26 cf       	rjmp	.-436    	; 0x6a6c <__vector_77+0x13c>
		debounceEnabled = true;		
	} 	
	
	if(!SD_Inserted()){
		Leds_State(Red,on);
	} else if(!timeIsValid){
    6c20:	80 91 de 27 	lds	r24, 0x27DE
    6c24:	88 23       	and	r24, r24
    6c26:	09 f4       	brne	.+2      	; 0x6c2a <__vector_77+0x2fa>
    6c28:	8e cf       	rjmp	.-228    	; 0x6b46 <__vector_77+0x216>
    6c2a:	91 cf       	rjmp	.-222    	; 0x6b4e <__vector_77+0x21e>
	Leds_Port.DIRSET = (1<<led);
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    6c2c:	82 e0       	ldi	r24, 0x02	; 2
    6c2e:	aa cf       	rjmp	.-172    	; 0x6b84 <__vector_77+0x254>
		Leds_State(Red,off);
	}
	
	if(recording){
		Leds_State(Green,on);
	} else if(connected && !Charged()){
    6c30:	10 92 4d 39 	sts	0x394D, r1
    6c34:	a9 cf       	rjmp	.-174    	; 0x6b88 <__vector_77+0x258>
			}
		} else {
			Leds_Clear(i);
		}	
	}
}
    6c36:	ff 91       	pop	r31
    6c38:	ef 91       	pop	r30
    6c3a:	df 91       	pop	r29
    6c3c:	cf 91       	pop	r28
    6c3e:	bf 91       	pop	r27
    6c40:	af 91       	pop	r26
    6c42:	9f 91       	pop	r25
    6c44:	8f 91       	pop	r24
    6c46:	5f 91       	pop	r21
    6c48:	4f 91       	pop	r20
    6c4a:	3f 91       	pop	r19
    6c4c:	2f 91       	pop	r18
    6c4e:	0f 90       	pop	r0
    6c50:	0b be       	out	0x3b, r0	; 59
    6c52:	0f 90       	pop	r0
    6c54:	0f be       	out	0x3f, r0	; 63
    6c56:	0f 90       	pop	r0
    6c58:	1f 90       	pop	r1
    6c5a:	18 95       	reti

00006c5c <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second
	
	// Set period/TOP value
	SD_Writer_Timer.PER = 2304;
    6c5c:	e0 e4       	ldi	r30, 0x40	; 64
    6c5e:	fa e0       	ldi	r31, 0x0A	; 10
    6c60:	80 e0       	ldi	r24, 0x00	; 0
    6c62:	99 e0       	ldi	r25, 0x09	; 9
    6c64:	86 a3       	std	Z+38, r24	; 0x26
    6c66:	97 a3       	std	Z+39, r25	; 0x27
	
	// Select clock source
	SD_Writer_Timer.CTRLA = (SD_Writer_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    6c68:	80 81       	ld	r24, Z
    6c6a:	80 7f       	andi	r24, 0xF0	; 240
    6c6c:	85 60       	ori	r24, 0x05	; 5
    6c6e:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    6c70:	86 81       	ldd	r24, Z+6	; 0x06
    6c72:	8c 7f       	andi	r24, 0xFC	; 252
    6c74:	82 60       	ori	r24, 0x02	; 2
    6c76:	86 83       	std	Z+6, r24	; 0x06
	
}
    6c78:	08 95       	ret

00006c7a <SD_WriteRTCBlock>:
	
	return resp;
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    6c7a:	af 92       	push	r10
    6c7c:	bf 92       	push	r11
    6c7e:	cf 92       	push	r12
    6c80:	df 92       	push	r13
    6c82:	ef 92       	push	r14
    6c84:	ff 92       	push	r15
    6c86:	0f 93       	push	r16
    6c88:	1f 93       	push	r17
    6c8a:	7b 01       	movw	r14, r22
    6c8c:	8c 01       	movw	r16, r24
    6c8e:	59 01       	movw	r10, r18
    6c90:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    6c92:	8f ef       	ldi	r24, 0xFF	; 255
    6c94:	9f ef       	ldi	r25, 0xFF	; 255
    6c96:	af ef       	ldi	r26, 0xFF	; 255
    6c98:	bf ef       	ldi	r27, 0xFF	; 255
    6c9a:	80 93 9d 45 	sts	0x459D, r24
    6c9e:	90 93 9e 45 	sts	0x459E, r25
    6ca2:	a0 93 9f 45 	sts	0x459F, r26
    6ca6:	b0 93 a0 45 	sts	0x45A0, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);		// magic number 
    6caa:	6c e4       	ldi	r22, 0x4C	; 76
    6cac:	74 e7       	ldi	r23, 0x74	; 116
    6cae:	8e ed       	ldi	r24, 0xDE	; 222
    6cb0:	90 eb       	ldi	r25, 0xB0	; 176
    6cb2:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(27);					// record size  
    6cb6:	6b e1       	ldi	r22, 0x1B	; 27
    6cb8:	70 e0       	ldi	r23, 0x00	; 0
    6cba:	80 e0       	ldi	r24, 0x00	; 0
    6cbc:	90 e0       	ldi	r25, 0x00	; 0
    6cbe:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(2);					// record type  
    6cc2:	82 e0       	ldi	r24, 0x02	; 2
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	
	SD_Write32(ticker);				// 32-bit counter
    6cca:	c8 01       	movw	r24, r16
    6ccc:	b7 01       	movw	r22, r14
    6cce:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    6cd2:	c6 01       	movw	r24, r12
    6cd4:	b5 01       	movw	r22, r10
    6cd6:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write8(0);
    6cda:	80 e0       	ldi	r24, 0x00	; 0
    6cdc:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_Write32(0);					// unix time nanoseconds
    6ce0:	60 e0       	ldi	r22, 0x00	; 0
    6ce2:	70 e0       	ldi	r23, 0x00	; 0
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_WriteCRC();					// CRC			
    6cec:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    6cf0:	8d ed       	ldi	r24, 0xDD	; 221
    6cf2:	9a e3       	ldi	r25, 0x3A	; 58
    6cf4:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
}
    6cf8:	1f 91       	pop	r17
    6cfa:	0f 91       	pop	r16
    6cfc:	ff 90       	pop	r15
    6cfe:	ef 90       	pop	r14
    6d00:	df 90       	pop	r13
    6d02:	cf 90       	pop	r12
    6d04:	bf 90       	pop	r11
    6d06:	af 90       	pop	r10
    6d08:	08 95       	ret

00006d0a <getDeviceID>:
	
	f_sync(&Log_File);
	
}

void getDeviceID(void){
    6d0a:	bf 92       	push	r11
    6d0c:	cf 92       	push	r12
    6d0e:	df 92       	push	r13
    6d10:	ef 92       	push	r14
    6d12:	ff 92       	push	r15
    6d14:	0f 93       	push	r16
    6d16:	1f 93       	push	r17
    6d18:	df 93       	push	r29
    6d1a:	cf 93       	push	r28
    6d1c:	cd b7       	in	r28, 0x3d	; 61
    6d1e:	de b7       	in	r29, 0x3e	; 62
    6d20:	25 97       	sbiw	r28, 0x05	; 5
    6d22:	cd bf       	out	0x3d, r28	; 61
    6d24:	de bf       	out	0x3e, r29	; 62
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6d26:	0a ec       	ldi	r16, 0xCA	; 202
    6d28:	11 e0       	ldi	r17, 0x01	; 1
    6d2a:	62 e0       	ldi	r22, 0x02	; 2
    6d2c:	b6 2e       	mov	r11, r22
    6d2e:	d8 01       	movw	r26, r16
    6d30:	bc 92       	st	X, r11
 	result = pgm_read_byte(index);
    6d32:	e8 e0       	ldi	r30, 0x08	; 8
    6d34:	f0 e0       	ldi	r31, 0x00	; 0
    6d36:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6d38:	1c 92       	st	X, r1
	
	char tmp [5];
	
	strcpy(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM0_offset),tmp,16));
    6d3a:	8e 2f       	mov	r24, r30
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
    6d3e:	6e 01       	movw	r12, r28
    6d40:	08 94       	sec
    6d42:	c1 1c       	adc	r12, r1
    6d44:	d1 1c       	adc	r13, r1
    6d46:	b6 01       	movw	r22, r12
    6d48:	40 e1       	ldi	r20, 0x10	; 16
    6d4a:	50 e0       	ldi	r21, 0x00	; 0
    6d4c:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6d50:	bc 01       	movw	r22, r24
    6d52:	5a e8       	ldi	r21, 0x8A	; 138
    6d54:	e5 2e       	mov	r14, r21
    6d56:	59 e3       	ldi	r21, 0x39	; 57
    6d58:	f5 2e       	mov	r15, r21
    6d5a:	c7 01       	movw	r24, r14
    6d5c:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6d60:	f8 01       	movw	r30, r16
    6d62:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6d64:	e9 e0       	ldi	r30, 0x09	; 9
    6d66:	f0 e0       	ldi	r31, 0x00	; 0
    6d68:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6d6a:	d8 01       	movw	r26, r16
    6d6c:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM1_offset),tmp,16));
    6d6e:	8e 2f       	mov	r24, r30
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	b6 01       	movw	r22, r12
    6d74:	40 e1       	ldi	r20, 0x10	; 16
    6d76:	50 e0       	ldi	r21, 0x00	; 0
    6d78:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6d7c:	bc 01       	movw	r22, r24
    6d7e:	c7 01       	movw	r24, r14
    6d80:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6d84:	f8 01       	movw	r30, r16
    6d86:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6d88:	ea e0       	ldi	r30, 0x0A	; 10
    6d8a:	f0 e0       	ldi	r31, 0x00	; 0
    6d8c:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6d8e:	d8 01       	movw	r26, r16
    6d90:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM2_offset),tmp,16));
    6d92:	8e 2f       	mov	r24, r30
    6d94:	90 e0       	ldi	r25, 0x00	; 0
    6d96:	b6 01       	movw	r22, r12
    6d98:	40 e1       	ldi	r20, 0x10	; 16
    6d9a:	50 e0       	ldi	r21, 0x00	; 0
    6d9c:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6da0:	bc 01       	movw	r22, r24
    6da2:	c7 01       	movw	r24, r14
    6da4:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6da8:	f8 01       	movw	r30, r16
    6daa:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6dac:	eb e0       	ldi	r30, 0x0B	; 11
    6dae:	f0 e0       	ldi	r31, 0x00	; 0
    6db0:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6db2:	d8 01       	movw	r26, r16
    6db4:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM3_offset),tmp,16));
    6db6:	8e 2f       	mov	r24, r30
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	b6 01       	movw	r22, r12
    6dbc:	40 e1       	ldi	r20, 0x10	; 16
    6dbe:	50 e0       	ldi	r21, 0x00	; 0
    6dc0:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6dc4:	bc 01       	movw	r22, r24
    6dc6:	c7 01       	movw	r24, r14
    6dc8:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6dcc:	f8 01       	movw	r30, r16
    6dce:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6dd0:	ec e0       	ldi	r30, 0x0C	; 12
    6dd2:	f0 e0       	ldi	r31, 0x00	; 0
    6dd4:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6dd6:	d8 01       	movw	r26, r16
    6dd8:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM4_offset),tmp,16));
    6dda:	8e 2f       	mov	r24, r30
    6ddc:	90 e0       	ldi	r25, 0x00	; 0
    6dde:	b6 01       	movw	r22, r12
    6de0:	40 e1       	ldi	r20, 0x10	; 16
    6de2:	50 e0       	ldi	r21, 0x00	; 0
    6de4:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6de8:	bc 01       	movw	r22, r24
    6dea:	c7 01       	movw	r24, r14
    6dec:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6df0:	f8 01       	movw	r30, r16
    6df2:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6df4:	ed e0       	ldi	r30, 0x0D	; 13
    6df6:	f0 e0       	ldi	r31, 0x00	; 0
    6df8:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6dfa:	d8 01       	movw	r26, r16
    6dfc:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM5_offset),tmp,16));
    6dfe:	8e 2f       	mov	r24, r30
    6e00:	90 e0       	ldi	r25, 0x00	; 0
    6e02:	b6 01       	movw	r22, r12
    6e04:	40 e1       	ldi	r20, 0x10	; 16
    6e06:	50 e0       	ldi	r21, 0x00	; 0
    6e08:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6e0c:	bc 01       	movw	r22, r24
    6e0e:	c7 01       	movw	r24, r14
    6e10:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6e14:	f8 01       	movw	r30, r16
    6e16:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6e18:	e0 e1       	ldi	r30, 0x10	; 16
    6e1a:	f0 e0       	ldi	r31, 0x00	; 0
    6e1c:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6e1e:	d8 01       	movw	r26, r16
    6e20:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+WAFNUM_offset) ,tmp,16));
    6e22:	8e 2f       	mov	r24, r30
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	b6 01       	movw	r22, r12
    6e28:	40 e1       	ldi	r20, 0x10	; 16
    6e2a:	50 e0       	ldi	r21, 0x00	; 0
    6e2c:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6e30:	bc 01       	movw	r22, r24
    6e32:	c7 01       	movw	r24, r14
    6e34:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6e38:	f8 01       	movw	r30, r16
    6e3a:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6e3c:	e2 e1       	ldi	r30, 0x12	; 18
    6e3e:	f0 e0       	ldi	r31, 0x00	; 0
    6e40:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6e42:	d8 01       	movw	r26, r16
    6e44:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDX0_offset),tmp,16));
    6e46:	8e 2f       	mov	r24, r30
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	b6 01       	movw	r22, r12
    6e4c:	40 e1       	ldi	r20, 0x10	; 16
    6e4e:	50 e0       	ldi	r21, 0x00	; 0
    6e50:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6e54:	bc 01       	movw	r22, r24
    6e56:	c7 01       	movw	r24, r14
    6e58:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6e5c:	f8 01       	movw	r30, r16
    6e5e:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6e60:	e3 e1       	ldi	r30, 0x13	; 19
    6e62:	f0 e0       	ldi	r31, 0x00	; 0
    6e64:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6e66:	d8 01       	movw	r26, r16
    6e68:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDX1_offset),tmp,16));
    6e6a:	8e 2f       	mov	r24, r30
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	b6 01       	movw	r22, r12
    6e70:	40 e1       	ldi	r20, 0x10	; 16
    6e72:	50 e0       	ldi	r21, 0x00	; 0
    6e74:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6e78:	bc 01       	movw	r22, r24
    6e7a:	c7 01       	movw	r24, r14
    6e7c:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6e80:	f8 01       	movw	r30, r16
    6e82:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6e84:	e4 e1       	ldi	r30, 0x14	; 20
    6e86:	f0 e0       	ldi	r31, 0x00	; 0
    6e88:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6e8a:	d8 01       	movw	r26, r16
    6e8c:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDY0_offset),tmp,16));
    6e8e:	8e 2f       	mov	r24, r30
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	b6 01       	movw	r22, r12
    6e94:	40 e1       	ldi	r20, 0x10	; 16
    6e96:	50 e0       	ldi	r21, 0x00	; 0
    6e98:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6e9c:	bc 01       	movw	r22, r24
    6e9e:	c7 01       	movw	r24, r14
    6ea0:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6ea4:	f8 01       	movw	r30, r16
    6ea6:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    6ea8:	e5 e1       	ldi	r30, 0x15	; 21
    6eaa:	f0 e0       	ldi	r31, 0x00	; 0
    6eac:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6eae:	d8 01       	movw	r26, r16
    6eb0:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDY1_offset),tmp,16));
    6eb2:	8e 2f       	mov	r24, r30
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	b6 01       	movw	r22, r12
    6eb8:	40 e1       	ldi	r20, 0x10	; 16
    6eba:	50 e0       	ldi	r21, 0x00	; 0
    6ebc:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <itoa>
    6ec0:	bc 01       	movw	r22, r24
    6ec2:	c7 01       	movw	r24, r14
    6ec4:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
}
    6ec8:	25 96       	adiw	r28, 0x05	; 5
    6eca:	cd bf       	out	0x3d, r28	; 61
    6ecc:	de bf       	out	0x3e, r29	; 62
    6ece:	cf 91       	pop	r28
    6ed0:	df 91       	pop	r29
    6ed2:	1f 91       	pop	r17
    6ed4:	0f 91       	pop	r16
    6ed6:	ff 90       	pop	r15
    6ed8:	ef 90       	pop	r14
    6eda:	df 90       	pop	r13
    6edc:	cf 90       	pop	r12
    6ede:	bf 90       	pop	r11
    6ee0:	08 95       	ret

00006ee2 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    6ee2:	ef 92       	push	r14
    6ee4:	ff 92       	push	r15
    6ee6:	0f 93       	push	r16
    6ee8:	1f 93       	push	r17
    6eea:	cf 93       	push	r28
    6eec:	df 93       	push	r29
    6eee:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    6ef0:	6d ed       	ldi	r22, 0xDD	; 221
    6ef2:	7a e3       	ldi	r23, 0x3A	; 58
    6ef4:	0e 94 0d 2b 	call	0x561a	; 0x561a <f_puts>
    6ef8:	60 e0       	ldi	r22, 0x00	; 0
    6efa:	70 e0       	ldi	r23, 0x00	; 0
    6efc:	3b c0       	rjmp	.+118    	; 0x6f74 <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    6efe:	e0 90 9d 45 	lds	r14, 0x459D
    6f02:	f0 90 9e 45 	lds	r15, 0x459E
    6f06:	00 91 9f 45 	lds	r16, 0x459F
    6f0a:	10 91 a0 45 	lds	r17, 0x45A0
    6f0e:	20 91 9d 45 	lds	r18, 0x459D
    6f12:	30 91 9e 45 	lds	r19, 0x459E
    6f16:	40 91 9f 45 	lds	r20, 0x459F
    6f1a:	50 91 a0 45 	lds	r21, 0x45A0
    6f1e:	30 70       	andi	r19, 0x00	; 0
    6f20:	40 70       	andi	r20, 0x00	; 0
    6f22:	50 70       	andi	r21, 0x00	; 0
    6f24:	fe 01       	movw	r30, r28
    6f26:	e6 0f       	add	r30, r22
    6f28:	f7 1f       	adc	r31, r23
    6f2a:	80 81       	ld	r24, Z
    6f2c:	90 e0       	ldi	r25, 0x00	; 0
    6f2e:	a0 e0       	ldi	r26, 0x00	; 0
    6f30:	b0 e0       	ldi	r27, 0x00	; 0
    6f32:	28 27       	eor	r18, r24
    6f34:	39 27       	eor	r19, r25
    6f36:	4a 27       	eor	r20, r26
    6f38:	5b 27       	eor	r21, r27
    6f3a:	22 0f       	add	r18, r18
    6f3c:	33 1f       	adc	r19, r19
    6f3e:	22 0f       	add	r18, r18
    6f40:	33 1f       	adc	r19, r19
    6f42:	2e 5e       	subi	r18, 0xEE	; 238
    6f44:	3c 4d       	sbci	r19, 0xDC	; 220
    6f46:	ef 2c       	mov	r14, r15
    6f48:	f0 2e       	mov	r15, r16
    6f4a:	01 2f       	mov	r16, r17
    6f4c:	11 27       	eor	r17, r17
    6f4e:	f9 01       	movw	r30, r18
    6f50:	80 81       	ld	r24, Z
    6f52:	91 81       	ldd	r25, Z+1	; 0x01
    6f54:	a2 81       	ldd	r26, Z+2	; 0x02
    6f56:	b3 81       	ldd	r27, Z+3	; 0x03
    6f58:	e8 26       	eor	r14, r24
    6f5a:	f9 26       	eor	r15, r25
    6f5c:	0a 27       	eor	r16, r26
    6f5e:	1b 27       	eor	r17, r27
    6f60:	e0 92 9d 45 	sts	0x459D, r14
    6f64:	f0 92 9e 45 	sts	0x459E, r15
    6f68:	00 93 9f 45 	sts	0x459F, r16
    6f6c:	10 93 a0 45 	sts	0x45A0, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    6f70:	6f 5f       	subi	r22, 0xFF	; 255
    6f72:	7f 4f       	sbci	r23, 0xFF	; 255
    6f74:	fe 01       	movw	r30, r28
    6f76:	01 90       	ld	r0, Z+
    6f78:	00 20       	and	r0, r0
    6f7a:	e9 f7       	brne	.-6      	; 0x6f76 <SD_WriteString+0x94>
    6f7c:	31 97       	sbiw	r30, 0x01	; 1
    6f7e:	ec 1b       	sub	r30, r28
    6f80:	fd 0b       	sbc	r31, r29
    6f82:	6e 17       	cp	r22, r30
    6f84:	7f 07       	cpc	r23, r31
    6f86:	08 f4       	brcc	.+2      	; 0x6f8a <SD_WriteString+0xa8>
    6f88:	ba cf       	rjmp	.-140    	; 0x6efe <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    6f8a:	df 91       	pop	r29
    6f8c:	cf 91       	pop	r28
    6f8e:	1f 91       	pop	r17
    6f90:	0f 91       	pop	r16
    6f92:	ff 90       	pop	r15
    6f94:	ef 90       	pop	r14
    6f96:	08 95       	ret

00006f98 <SD_WriteAccelBuffer>:
	
	f_sync(&Log_File);
	
}

void SD_WriteAccelBuffer(uint8_t bufferNumber){
    6f98:	1f 93       	push	r17
    6f9a:	cf 93       	push	r28
    6f9c:	df 93       	push	r29
    6f9e:	18 2f       	mov	r17, r24
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    6fa0:	8f ef       	ldi	r24, 0xFF	; 255
    6fa2:	9f ef       	ldi	r25, 0xFF	; 255
    6fa4:	af ef       	ldi	r26, 0xFF	; 255
    6fa6:	bf ef       	ldi	r27, 0xFF	; 255
    6fa8:	80 93 9d 45 	sts	0x459D, r24
    6fac:	90 93 9e 45 	sts	0x459E, r25
    6fb0:	a0 93 9f 45 	sts	0x459F, r26
    6fb4:	b0 93 a0 45 	sts	0x45A0, r27
	
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6fb8:	6c e4       	ldi	r22, 0x4C	; 76
    6fba:	74 e7       	ldi	r23, 0x74	; 116
    6fbc:	8e ed       	ldi	r24, 0xDE	; 222
    6fbe:	90 eb       	ldi	r25, 0xB0	; 176
    6fc0:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(1260);				// record size
    6fc4:	6c ee       	ldi	r22, 0xEC	; 236
    6fc6:	74 e0       	ldi	r23, 0x04	; 4
    6fc8:	80 e0       	ldi	r24, 0x00	; 0
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(3); 		// record type
    6fd0:	83 e0       	ldi	r24, 0x03	; 3
    6fd2:	90 e0       	ldi	r25, 0x00	; 0
    6fd4:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	if(bufferNumber == 1){
    6fd8:	11 30       	cpi	r17, 0x01	; 1
    6fda:	49 f4       	brne	.+18     	; 0x6fee <SD_WriteAccelBuffer+0x56>
		SD_Write32(accelSampleStartTime1);					// time
    6fdc:	60 91 8a 27 	lds	r22, 0x278A
    6fe0:	70 91 8b 27 	lds	r23, 0x278B
    6fe4:	80 91 8c 27 	lds	r24, 0x278C
    6fe8:	90 91 8d 27 	lds	r25, 0x278D
    6fec:	08 c0       	rjmp	.+16     	; 0x6ffe <SD_WriteAccelBuffer+0x66>
	} else {
		SD_Write32(accelSampleStartTime2);					// time
    6fee:	60 91 8e 27 	lds	r22, 0x278E
    6ff2:	70 91 8f 27 	lds	r23, 0x278F
    6ff6:	80 91 90 27 	lds	r24, 0x2790
    6ffa:	90 91 91 27 	lds	r25, 0x2791
    6ffe:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	}
	SD_Write32(5760);										// sample period (320hz)
    7002:	60 e8       	ldi	r22, 0x80	; 128
    7004:	76 e1       	ldi	r23, 0x16	; 22
    7006:	80 e0       	ldi	r24, 0x00	; 0
    7008:	90 e0       	ldi	r25, 0x00	; 0
    700a:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(accelNumberOfSamples);												// number of samples
    700e:	68 ec       	ldi	r22, 0xC8	; 200
    7010:	70 e0       	ldi	r23, 0x00	; 0
    7012:	80 e0       	ldi	r24, 0x00	; 0
    7014:	90 e0       	ldi	r25, 0x00	; 0
    7016:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	
	SD_WriteString("Accel_X");
    701a:	83 e3       	ldi	r24, 0x33	; 51
    701c:	90 e2       	ldi	r25, 0x20	; 32
    701e:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7022:	89 e0       	ldi	r24, 0x09	; 9
    7024:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    7028:	8b e3       	ldi	r24, 0x3B	; 59
    702a:	90 e2       	ldi	r25, 0x20	; 32
    702c:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7030:	8a e0       	ldi	r24, 0x0A	; 10
    7032:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("Accel_Y");
    7036:	8e e3       	ldi	r24, 0x3E	; 62
    7038:	90 e2       	ldi	r25, 0x20	; 32
    703a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    703e:	89 e0       	ldi	r24, 0x09	; 9
    7040:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    7044:	8b e3       	ldi	r24, 0x3B	; 59
    7046:	90 e2       	ldi	r25, 0x20	; 32
    7048:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    704c:	8a e0       	ldi	r24, 0x0A	; 10
    704e:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("Accel_Z");
    7052:	86 e4       	ldi	r24, 0x46	; 70
    7054:	90 e2       	ldi	r25, 0x20	; 32
    7056:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    705a:	89 e0       	ldi	r24, 0x09	; 9
    705c:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    7060:	8b e3       	ldi	r24, 0x3B	; 59
    7062:	90 e2       	ldi	r25, 0x20	; 32
    7064:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7068:	8a e0       	ldi	r24, 0x0A	; 10
    706a:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_Write8(0x00);
    706e:	80 e0       	ldi	r24, 0x00	; 0
    7070:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	if(bufferNumber == 1){
    7074:	11 30       	cpi	r17, 0x01	; 1
    7076:	59 f4       	brne	.+22     	; 0x708e <SD_WriteAccelBuffer+0xf6>
    7078:	cd e5       	ldi	r28, 0x5D	; 93
    707a:	df e3       	ldi	r29, 0x3F	; 63
		for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
			SD_Write16(accelBuffer1[i]);
    707c:	89 91       	ld	r24, Y+
    707e:	99 91       	ld	r25, Y+
    7080:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	SD_Write8(0x0A);
	
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
    7084:	84 e4       	ldi	r24, 0x44	; 68
    7086:	cd 30       	cpi	r28, 0x0D	; 13
    7088:	d8 07       	cpc	r29, r24
    708a:	c1 f7       	brne	.-16     	; 0x707c <SD_WriteAccelBuffer+0xe4>
    708c:	0a c0       	rjmp	.+20     	; 0x70a2 <SD_WriteAccelBuffer+0x10a>
    708e:	cc e9       	ldi	r28, 0x9C	; 156
    7090:	d4 e3       	ldi	r29, 0x34	; 52
			SD_Write16(accelBuffer1[i]);
		}
	} else {
		for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
			SD_Write16(accelBuffer2[i]);
    7092:	89 91       	ld	r24, Y+
    7094:	99 91       	ld	r25, Y+
    7096:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	if(bufferNumber == 1){
		for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
			SD_Write16(accelBuffer1[i]);
		}
	} else {
		for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
    709a:	89 e3       	ldi	r24, 0x39	; 57
    709c:	cc 34       	cpi	r28, 0x4C	; 76
    709e:	d8 07       	cpc	r29, r24
    70a0:	c1 f7       	brne	.-16     	; 0x7092 <SD_WriteAccelBuffer+0xfa>
			SD_Write16(accelBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC
    70a2:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    70a6:	8d ed       	ldi	r24, 0xDD	; 221
    70a8:	9a e3       	ldi	r25, 0x3A	; 58
    70aa:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
}
    70ae:	df 91       	pop	r29
    70b0:	cf 91       	pop	r28
    70b2:	1f 91       	pop	r17
    70b4:	08 95       	ret

000070b6 <SD_WriteEKGBuffer>:
	
}



void SD_WriteEKGBuffer(uint8_t bufferNumber){
    70b6:	1f 93       	push	r17
    70b8:	cf 93       	push	r28
    70ba:	df 93       	push	r29
    70bc:	18 2f       	mov	r17, r24
    70be:	8f ef       	ldi	r24, 0xFF	; 255
    70c0:	9f ef       	ldi	r25, 0xFF	; 255
    70c2:	af ef       	ldi	r26, 0xFF	; 255
    70c4:	bf ef       	ldi	r27, 0xFF	; 255
    70c6:	80 93 9d 45 	sts	0x459D, r24
    70ca:	90 93 9e 45 	sts	0x459E, r25
    70ce:	a0 93 9f 45 	sts	0x459F, r26
    70d2:	b0 93 a0 45 	sts	0x45A0, r27
	
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    70d6:	6c e4       	ldi	r22, 0x4C	; 76
    70d8:	74 e7       	ldi	r23, 0x74	; 116
    70da:	8e ed       	ldi	r24, 0xDE	; 222
    70dc:	90 eb       	ldi	r25, 0xB0	; 176
    70de:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(434);				// record size
    70e2:	62 eb       	ldi	r22, 0xB2	; 178
    70e4:	71 e0       	ldi	r23, 0x01	; 1
    70e6:	80 e0       	ldi	r24, 0x00	; 0
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(3); 		// record type
    70ee:	83 e0       	ldi	r24, 0x03	; 3
    70f0:	90 e0       	ldi	r25, 0x00	; 0
    70f2:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	if(bufferNumber == 1){
    70f6:	11 30       	cpi	r17, 0x01	; 1
    70f8:	49 f4       	brne	.+18     	; 0x710c <SD_WriteEKGBuffer+0x56>
		SD_Write32(EKGSampleStartTime1);					// time
    70fa:	60 91 7a 27 	lds	r22, 0x277A
    70fe:	70 91 7b 27 	lds	r23, 0x277B
    7102:	80 91 7c 27 	lds	r24, 0x277C
    7106:	90 91 7d 27 	lds	r25, 0x277D
    710a:	08 c0       	rjmp	.+16     	; 0x711c <SD_WriteEKGBuffer+0x66>
	} else {
		SD_Write32(EKGSampleStartTime2);					// time
    710c:	60 91 7e 27 	lds	r22, 0x277E
    7110:	70 91 7f 27 	lds	r23, 0x277F
    7114:	80 91 80 27 	lds	r24, 0x2780
    7118:	90 91 81 27 	lds	r25, 0x2781
    711c:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	}
	SD_Write32(6144);										// sample period (300hz)
    7120:	60 e0       	ldi	r22, 0x00	; 0
    7122:	78 e1       	ldi	r23, 0x18	; 24
    7124:	80 e0       	ldi	r24, 0x00	; 0
    7126:	90 e0       	ldi	r25, 0x00	; 0
    7128:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(200);												// number of samples
    712c:	68 ec       	ldi	r22, 0xC8	; 200
    712e:	70 e0       	ldi	r23, 0x00	; 0
    7130:	80 e0       	ldi	r24, 0x00	; 0
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	
	SD_WriteString("EKG");
    7138:	8e e4       	ldi	r24, 0x4E	; 78
    713a:	90 e2       	ldi	r25, 0x20	; 32
    713c:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7140:	89 e0       	ldi	r24, 0x09	; 9
    7142:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    7146:	8b e3       	ldi	r24, 0x3B	; 59
    7148:	90 e2       	ldi	r25, 0x20	; 32
    714a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    714e:	8a e0       	ldi	r24, 0x0A	; 10
    7150:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_Write8(0x00);
    7154:	80 e0       	ldi	r24, 0x00	; 0
    7156:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	if(bufferNumber == 1){
    715a:	11 30       	cpi	r17, 0x01	; 1
    715c:	59 f4       	brne	.+22     	; 0x7174 <SD_WriteEKGBuffer+0xbe>
    715e:	cd e0       	ldi	r28, 0x0D	; 13
    7160:	d4 e4       	ldi	r29, 0x44	; 68
		for(uint16_t i = 0; i < 200; i++){
			SD_Write16(EKGBuffer1[i]);
    7162:	89 91       	ld	r24, Y+
    7164:	99 91       	ld	r25, Y+
    7166:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint16_t i = 0; i < 200; i++){
    716a:	85 e4       	ldi	r24, 0x45	; 69
    716c:	cd 39       	cpi	r28, 0x9D	; 157
    716e:	d8 07       	cpc	r29, r24
    7170:	c1 f7       	brne	.-16     	; 0x7162 <SD_WriteEKGBuffer+0xac>
    7172:	0a c0       	rjmp	.+20     	; 0x7188 <SD_WriteEKGBuffer+0xd2>
    7174:	c8 e2       	ldi	r28, 0x28	; 40
    7176:	d2 e3       	ldi	r29, 0x32	; 50
			SD_Write16(EKGBuffer1[i]);
		}
	} else {
		for(uint16_t i = 0; i < 200; i++){
			SD_Write16(EKGBuffer2[i]);
    7178:	89 91       	ld	r24, Y+
    717a:	99 91       	ld	r25, Y+
    717c:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	if(bufferNumber == 1){
		for(uint16_t i = 0; i < 200; i++){
			SD_Write16(EKGBuffer1[i]);
		}
	} else {
		for(uint16_t i = 0; i < 200; i++){
    7180:	83 e3       	ldi	r24, 0x33	; 51
    7182:	c8 3b       	cpi	r28, 0xB8	; 184
    7184:	d8 07       	cpc	r29, r24
    7186:	c1 f7       	brne	.-16     	; 0x7178 <SD_WriteEKGBuffer+0xc2>
			SD_Write16(EKGBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC
    7188:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    718c:	8d ed       	ldi	r24, 0xDD	; 221
    718e:	9a e3       	ldi	r25, 0x3A	; 58
    7190:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
}
    7194:	df 91       	pop	r29
    7196:	cf 91       	pop	r28
    7198:	1f 91       	pop	r17
    719a:	08 95       	ret

0000719c <SD_WriteRespirationBuffer>:
	
	f_sync(&Log_File);
	
}

void SD_WriteRespirationBuffer(uint8_t bufferNumber){
    719c:	1f 93       	push	r17
    719e:	cf 93       	push	r28
    71a0:	df 93       	push	r29
    71a2:	18 2f       	mov	r17, r24
    71a4:	8f ef       	ldi	r24, 0xFF	; 255
    71a6:	9f ef       	ldi	r25, 0xFF	; 255
    71a8:	af ef       	ldi	r26, 0xFF	; 255
    71aa:	bf ef       	ldi	r27, 0xFF	; 255
    71ac:	80 93 9d 45 	sts	0x459D, r24
    71b0:	90 93 9e 45 	sts	0x459E, r25
    71b4:	a0 93 9f 45 	sts	0x459F, r26
    71b8:	b0 93 a0 45 	sts	0x45A0, r27
	
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    71bc:	6c e4       	ldi	r22, 0x4C	; 76
    71be:	74 e7       	ldi	r23, 0x74	; 116
    71c0:	8e ed       	ldi	r24, 0xDE	; 222
    71c2:	90 eb       	ldi	r25, 0xB0	; 176
    71c4:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(442);				// record size
    71c8:	6a eb       	ldi	r22, 0xBA	; 186
    71ca:	71 e0       	ldi	r23, 0x01	; 1
    71cc:	80 e0       	ldi	r24, 0x00	; 0
    71ce:	90 e0       	ldi	r25, 0x00	; 0
    71d0:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(3); 		// record type
    71d4:	83 e0       	ldi	r24, 0x03	; 3
    71d6:	90 e0       	ldi	r25, 0x00	; 0
    71d8:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	if(bufferNumber == 1){
    71dc:	11 30       	cpi	r17, 0x01	; 1
    71de:	49 f4       	brne	.+18     	; 0x71f2 <SD_WriteRespirationBuffer+0x56>
		SD_Write32(respirationSampleStartTime1);					// time
    71e0:	60 91 72 27 	lds	r22, 0x2772
    71e4:	70 91 73 27 	lds	r23, 0x2773
    71e8:	80 91 74 27 	lds	r24, 0x2774
    71ec:	90 91 75 27 	lds	r25, 0x2775
    71f0:	08 c0       	rjmp	.+16     	; 0x7202 <SD_WriteRespirationBuffer+0x66>
	} else {
		SD_Write32(respirationSampleStartTime2);					// time
    71f2:	60 91 76 27 	lds	r22, 0x2776
    71f6:	70 91 77 27 	lds	r23, 0x2777
    71fa:	80 91 78 27 	lds	r24, 0x2778
    71fe:	90 91 79 27 	lds	r25, 0x2779
    7202:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	}
	SD_Write32(6144);										// sample period (300hz)
    7206:	60 e0       	ldi	r22, 0x00	; 0
    7208:	78 e1       	ldi	r23, 0x18	; 24
    720a:	80 e0       	ldi	r24, 0x00	; 0
    720c:	90 e0       	ldi	r25, 0x00	; 0
    720e:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(200);												// number of samples
    7212:	68 ec       	ldi	r22, 0xC8	; 200
    7214:	70 e0       	ldi	r23, 0x00	; 0
    7216:	80 e0       	ldi	r24, 0x00	; 0
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	
	SD_WriteString("Respiration");
    721e:	82 e5       	ldi	r24, 0x52	; 82
    7220:	90 e2       	ldi	r25, 0x20	; 32
    7222:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7226:	89 e0       	ldi	r24, 0x09	; 9
    7228:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    722c:	8b e3       	ldi	r24, 0x3B	; 59
    722e:	90 e2       	ldi	r25, 0x20	; 32
    7230:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7234:	8a e0       	ldi	r24, 0x0A	; 10
    7236:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_Write8(0x00);
    723a:	80 e0       	ldi	r24, 0x00	; 0
    723c:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	if(bufferNumber == 1){
    7240:	11 30       	cpi	r17, 0x01	; 1
    7242:	59 f4       	brne	.+22     	; 0x725a <SD_WriteRespirationBuffer+0xbe>
    7244:	c9 e8       	ldi	r28, 0x89	; 137
    7246:	d0 e3       	ldi	r29, 0x30	; 48
		for(uint16_t i = 0; i < 200; i++){
			SD_Write16(respirationBuffer1[i]);
    7248:	89 91       	ld	r24, Y+
    724a:	99 91       	ld	r25, Y+
    724c:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint16_t i = 0; i < 200; i++){
    7250:	82 e3       	ldi	r24, 0x32	; 50
    7252:	c9 31       	cpi	r28, 0x19	; 25
    7254:	d8 07       	cpc	r29, r24
    7256:	c1 f7       	brne	.-16     	; 0x7248 <SD_WriteRespirationBuffer+0xac>
    7258:	0a c0       	rjmp	.+20     	; 0x726e <SD_WriteRespirationBuffer+0xd2>
    725a:	c0 e2       	ldi	r28, 0x20	; 32
    725c:	d6 e4       	ldi	r29, 0x46	; 70
			SD_Write16(respirationBuffer1[i]);
		}
	} else {
		for(uint16_t i = 0; i < 200; i++){
			SD_Write16(respirationBuffer2[i]);
    725e:	89 91       	ld	r24, Y+
    7260:	99 91       	ld	r25, Y+
    7262:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	if(bufferNumber == 1){
		for(uint16_t i = 0; i < 200; i++){
			SD_Write16(respirationBuffer1[i]);
		}
	} else {
		for(uint16_t i = 0; i < 200; i++){
    7266:	87 e4       	ldi	r24, 0x47	; 71
    7268:	c0 3b       	cpi	r28, 0xB0	; 176
    726a:	d8 07       	cpc	r29, r24
    726c:	c1 f7       	brne	.-16     	; 0x725e <SD_WriteRespirationBuffer+0xc2>
			SD_Write16(respirationBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC
    726e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    7272:	8d ed       	ldi	r24, 0xDD	; 221
    7274:	9a e3       	ldi	r25, 0x3A	; 58
    7276:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
}
    727a:	df 91       	pop	r29
    727c:	cf 91       	pop	r28
    727e:	1f 91       	pop	r17
    7280:	08 95       	ret

00007282 <SD_WriteHumidityBuffer>:
	
	f_sync(&Log_File);
	
}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    7282:	1f 93       	push	r17
    7284:	cf 93       	push	r28
    7286:	df 93       	push	r29
    7288:	18 2f       	mov	r17, r24
    728a:	8f ef       	ldi	r24, 0xFF	; 255
    728c:	9f ef       	ldi	r25, 0xFF	; 255
    728e:	af ef       	ldi	r26, 0xFF	; 255
    7290:	bf ef       	ldi	r27, 0xFF	; 255
    7292:	80 93 9d 45 	sts	0x459D, r24
    7296:	90 93 9e 45 	sts	0x459E, r25
    729a:	a0 93 9f 45 	sts	0x459F, r26
    729e:	b0 93 a0 45 	sts	0x45A0, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    72a2:	6c e4       	ldi	r22, 0x4C	; 76
    72a4:	74 e7       	ldi	r23, 0x74	; 116
    72a6:	8e ed       	ldi	r24, 0xDE	; 222
    72a8:	90 eb       	ldi	r25, 0xB0	; 176
    72aa:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(59);				// record size
    72ae:	6b e3       	ldi	r22, 0x3B	; 59
    72b0:	70 e0       	ldi	r23, 0x00	; 0
    72b2:	80 e0       	ldi	r24, 0x00	; 0
    72b4:	90 e0       	ldi	r25, 0x00	; 0
    72b6:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(3); 		// record type
    72ba:	83 e0       	ldi	r24, 0x03	; 3
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	if(bufferNumber == 1){
    72c2:	11 30       	cpi	r17, 0x01	; 1
    72c4:	49 f4       	brne	.+18     	; 0x72d8 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    72c6:	60 91 82 27 	lds	r22, 0x2782
    72ca:	70 91 83 27 	lds	r23, 0x2783
    72ce:	80 91 84 27 	lds	r24, 0x2784
    72d2:	90 91 85 27 	lds	r25, 0x2785
    72d6:	08 c0       	rjmp	.+16     	; 0x72e8 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    72d8:	60 91 86 27 	lds	r22, 0x2786
    72dc:	70 91 87 27 	lds	r23, 0x2787
    72e0:	80 91 88 27 	lds	r24, 0x2788
    72e4:	90 91 89 27 	lds	r25, 0x2789
    72e8:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    72ec:	60 e0       	ldi	r22, 0x00	; 0
    72ee:	70 e2       	ldi	r23, 0x20	; 32
    72f0:	8c e1       	ldi	r24, 0x1C	; 28
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(10);												// number of samples
    72f8:	6a e0       	ldi	r22, 0x0A	; 10
    72fa:	70 e0       	ldi	r23, 0x00	; 0
    72fc:	80 e0       	ldi	r24, 0x00	; 0
    72fe:	90 e0       	ldi	r25, 0x00	; 0
    7300:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	
	SD_WriteString("Humidity");
    7304:	8e e5       	ldi	r24, 0x5E	; 94
    7306:	90 e2       	ldi	r25, 0x20	; 32
    7308:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    730c:	89 e0       	ldi	r24, 0x09	; 9
    730e:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    7312:	8b e3       	ldi	r24, 0x3B	; 59
    7314:	90 e2       	ldi	r25, 0x20	; 32
    7316:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    731a:	8a e0       	ldi	r24, 0x0A	; 10
    731c:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_Write8(0x00);
    7320:	80 e0       	ldi	r24, 0x00	; 0
    7322:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	if(bufferNumber == 1){
    7326:	11 30       	cpi	r17, 0x01	; 1
    7328:	59 f4       	brne	.+22     	; 0x7340 <SD_WriteHumidityBuffer+0xbe>
    732a:	c4 ef       	ldi	r28, 0xF4	; 244
    732c:	d9 e3       	ldi	r29, 0x39	; 57
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer1[i]);
    732e:	89 91       	ld	r24, Y+
    7330:	99 91       	ld	r25, Y+
    7332:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7336:	8a e3       	ldi	r24, 0x3A	; 58
    7338:	c8 30       	cpi	r28, 0x08	; 8
    733a:	d8 07       	cpc	r29, r24
    733c:	c1 f7       	brne	.-16     	; 0x732e <SD_WriteHumidityBuffer+0xac>
    733e:	0a c0       	rjmp	.+20     	; 0x7354 <SD_WriteHumidityBuffer+0xd2>
    7340:	c7 e4       	ldi	r28, 0x47	; 71
    7342:	df e3       	ldi	r29, 0x3F	; 63
			SD_Write16(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer2[i]);
    7344:	89 91       	ld	r24, Y+
    7346:	99 91       	ld	r25, Y+
    7348:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    734c:	8f e3       	ldi	r24, 0x3F	; 63
    734e:	cb 35       	cpi	r28, 0x5B	; 91
    7350:	d8 07       	cpc	r29, r24
    7352:	c1 f7       	brne	.-16     	; 0x7344 <SD_WriteHumidityBuffer+0xc2>
			SD_Write16(humidityBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC
    7354:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    7358:	8d ed       	ldi	r24, 0xDD	; 221
    735a:	9a e3       	ldi	r25, 0x3A	; 58
    735c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
}
    7360:	df 91       	pop	r29
    7362:	cf 91       	pop	r28
    7364:	1f 91       	pop	r17
    7366:	08 95       	ret

00007368 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);
	
}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    7368:	1f 93       	push	r17
    736a:	cf 93       	push	r28
    736c:	df 93       	push	r29
    736e:	18 2f       	mov	r17, r24
    7370:	8f ef       	ldi	r24, 0xFF	; 255
    7372:	9f ef       	ldi	r25, 0xFF	; 255
    7374:	af ef       	ldi	r26, 0xFF	; 255
    7376:	bf ef       	ldi	r27, 0xFF	; 255
    7378:	80 93 9d 45 	sts	0x459D, r24
    737c:	90 93 9e 45 	sts	0x459E, r25
    7380:	a0 93 9f 45 	sts	0x459F, r26
    7384:	b0 93 a0 45 	sts	0x45A0, r27
	
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7388:	6c e4       	ldi	r22, 0x4C	; 76
    738a:	74 e7       	ldi	r23, 0x74	; 116
    738c:	8e ed       	ldi	r24, 0xDE	; 222
    738e:	90 eb       	ldi	r25, 0xB0	; 176
    7390:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(62);				// record size  
    7394:	6e e3       	ldi	r22, 0x3E	; 62
    7396:	70 e0       	ldi	r23, 0x00	; 0
    7398:	80 e0       	ldi	r24, 0x00	; 0
    739a:	90 e0       	ldi	r25, 0x00	; 0
    739c:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(3); 		// record type  
    73a0:	83 e0       	ldi	r24, 0x03	; 3
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	if(bufferNumber == 1){
    73a8:	11 30       	cpi	r17, 0x01	; 1
    73aa:	49 f4       	brne	.+18     	; 0x73be <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    73ac:	60 91 6a 27 	lds	r22, 0x276A
    73b0:	70 91 6b 27 	lds	r23, 0x276B
    73b4:	80 91 6c 27 	lds	r24, 0x276C
    73b8:	90 91 6d 27 	lds	r25, 0x276D
    73bc:	08 c0       	rjmp	.+16     	; 0x73ce <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    73be:	60 91 6e 27 	lds	r22, 0x276E
    73c2:	70 91 6f 27 	lds	r23, 0x276F
    73c6:	80 91 70 27 	lds	r24, 0x2770
    73ca:	90 91 71 27 	lds	r25, 0x2771
    73ce:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    73d2:	60 e0       	ldi	r22, 0x00	; 0
    73d4:	70 e2       	ldi	r23, 0x20	; 32
    73d6:	8c e1       	ldi	r24, 0x1C	; 28
    73d8:	90 e0       	ldi	r25, 0x00	; 0
    73da:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(10);												// number of samples
    73de:	6a e0       	ldi	r22, 0x0A	; 10
    73e0:	70 e0       	ldi	r23, 0x00	; 0
    73e2:	80 e0       	ldi	r24, 0x00	; 0
    73e4:	90 e0       	ldi	r25, 0x00	; 0
    73e6:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	
	SD_WriteString("Temperature");
    73ea:	87 e6       	ldi	r24, 0x67	; 103
    73ec:	90 e2       	ldi	r25, 0x20	; 32
    73ee:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    73f2:	89 e0       	ldi	r24, 0x09	; 9
    73f4:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("16");
    73f8:	8b e3       	ldi	r24, 0x3B	; 59
    73fa:	90 e2       	ldi	r25, 0x20	; 32
    73fc:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7400:	8a e0       	ldi	r24, 0x0A	; 10
    7402:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_Write8(0x00);
    7406:	80 e0       	ldi	r24, 0x00	; 0
    7408:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	if(bufferNumber == 1){
    740c:	11 30       	cpi	r17, 0x01	; 1
    740e:	59 f4       	brne	.+22     	; 0x7426 <SD_WriteTemperatureBuffer+0xbe>
    7410:	cc e4       	ldi	r28, 0x4C	; 76
    7412:	d4 e3       	ldi	r29, 0x34	; 52
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    7414:	89 91       	ld	r24, Y+
    7416:	99 91       	ld	r25, Y+
    7418:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    741c:	84 e3       	ldi	r24, 0x34	; 52
    741e:	c0 36       	cpi	r28, 0x60	; 96
    7420:	d8 07       	cpc	r29, r24
    7422:	c1 f7       	brne	.-16     	; 0x7414 <SD_WriteTemperatureBuffer+0xac>
    7424:	0a c0       	rjmp	.+20     	; 0x743a <SD_WriteTemperatureBuffer+0xd2>
    7426:	cc eb       	ldi	r28, 0xBC	; 188
    7428:	d9 e3       	ldi	r29, 0x39	; 57
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    742a:	89 91       	ld	r24, Y+
    742c:	99 91       	ld	r25, Y+
    742e:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7432:	89 e3       	ldi	r24, 0x39	; 57
    7434:	c0 3d       	cpi	r28, 0xD0	; 208
    7436:	d8 07       	cpc	r29, r24
    7438:	c1 f7       	brne	.-16     	; 0x742a <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    743a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    743e:	8d ed       	ldi	r24, 0xDD	; 221
    7440:	9a e3       	ldi	r25, 0x3A	; 58
    7442:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
}
    7446:	df 91       	pop	r29
    7448:	cf 91       	pop	r28
    744a:	1f 91       	pop	r17
    744c:	08 95       	ret

0000744e <Debug_SendString>:

void Debug_SendString(char string [],bool CR){
    744e:	ef 92       	push	r14
    7450:	ff 92       	push	r15
    7452:	0f 93       	push	r16
    7454:	1f 93       	push	r17
    7456:	cf 93       	push	r28
    7458:	df 93       	push	r29
    745a:	8c 01       	movw	r16, r24
    745c:	e6 2e       	mov	r14, r22
    745e:	ff 24       	eor	r15, r15
    7460:	06 c0       	rjmp	.+12     	; 0x746e <Debug_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Debug_SendByte(string[i]);
    7462:	c0 0f       	add	r28, r16
    7464:	d1 1f       	adc	r29, r17
    7466:	88 81       	ld	r24, Y
    7468:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0); // Wait for RTS to be low
	Debug_Usart.DATA = data;
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    746c:	f3 94       	inc	r15
    746e:	cf 2d       	mov	r28, r15
    7470:	d0 e0       	ldi	r29, 0x00	; 0
    7472:	f8 01       	movw	r30, r16
    7474:	01 90       	ld	r0, Z+
    7476:	00 20       	and	r0, r0
    7478:	e9 f7       	brne	.-6      	; 0x7474 <Debug_SendString+0x26>
    747a:	31 97       	sbiw	r30, 0x01	; 1
    747c:	e0 1b       	sub	r30, r16
    747e:	f1 0b       	sbc	r31, r17
    7480:	ce 17       	cp	r28, r30
    7482:	df 07       	cpc	r29, r31
    7484:	70 f3       	brcs	.-36     	; 0x7462 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    7486:	ee 20       	and	r14, r14
    7488:	31 f0       	breq	.+12     	; 0x7496 <Debug_SendString+0x48>
		Debug_SendByte(13);
    748a:	8d e0       	ldi	r24, 0x0D	; 13
    748c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(10);
    7490:	8a e0       	ldi	r24, 0x0A	; 10
    7492:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	}
    7496:	df 91       	pop	r29
    7498:	cf 91       	pop	r28
    749a:	1f 91       	pop	r17
    749c:	0f 91       	pop	r16
    749e:	ff 90       	pop	r15
    74a0:	ef 90       	pop	r14
    74a2:	08 95       	ret

000074a4 <Uploader_connectToComputer>:
		return false;
	}
	return true;
}

void Uploader_connectToComputer(void){
    74a4:	df 92       	push	r13
    74a6:	ef 92       	push	r14
    74a8:	ff 92       	push	r15
    74aa:	0f 93       	push	r16
    74ac:	1f 93       	push	r17
    74ae:	cf 93       	push	r28
    74b0:	df 93       	push	r29
	uint16_t singCounter;
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
    74b2:	10 92 d1 27 	sts	0x27D1, r1
	Debug_ClearBuffer();
    74b6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
    74ba:	e1 2c       	mov	r14, r1
    74bc:	a8 e4       	ldi	r26, 0x48	; 72
    74be:	fa 2e       	mov	r15, r26
				char1 = Debug_GetByte(false);
				if(char1 == 'B'){
					_delay_ms(5);
					char2 = Debug_GetByte(false);
					if(char2 == 'T'){
						connected = true;
    74c0:	06 e6       	ldi	r16, 0x66	; 102
    74c2:	1e e0       	ldi	r17, 0x0E	; 14
    74c4:	dd 24       	eor	r13, r13
    74c6:	d3 94       	inc	r13
    74c8:	2b c0       	rjmp	.+86     	; 0x7520 <Uploader_connectToComputer+0x7c>
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		Debug_SendString("BS",false);
    74ca:	83 e7       	ldi	r24, 0x73	; 115
    74cc:	90 e2       	ldi	r25, 0x20	; 32
    74ce:	60 e0       	ldi	r22, 0x00	; 0
    74d0:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
    74d4:	ce ee       	ldi	r28, 0xEE	; 238
    74d6:	d2 e0       	ldi	r29, 0x02	; 2
		singCounter = 750;
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
    74d8:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    74dc:	88 23       	and	r24, r24
    74de:	d9 f0       	breq	.+54     	; 0x7516 <Uploader_connectToComputer+0x72>
				char1 = Debug_GetByte(false);
    74e0:	80 e0       	ldi	r24, 0x00	; 0
    74e2:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
				if(char1 == 'B'){
    74e6:	82 34       	cpi	r24, 0x42	; 66
    74e8:	b1 f4       	brne	.+44     	; 0x7516 <Uploader_connectToComputer+0x72>
    74ea:	c7 01       	movw	r24, r14
    74ec:	01 97       	sbiw	r24, 0x01	; 1
    74ee:	f1 f7       	brne	.-4      	; 0x74ec <Uploader_connectToComputer+0x48>
					_delay_ms(5);
					char2 = Debug_GetByte(false);
    74f0:	80 e0       	ldi	r24, 0x00	; 0
    74f2:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
					if(char2 == 'T'){
    74f6:	84 35       	cpi	r24, 0x54	; 84
    74f8:	71 f4       	brne	.+28     	; 0x7516 <Uploader_connectToComputer+0x72>
						connected = true;
    74fa:	d0 92 d1 27 	sts	0x27D1, r13
						Debug_SendString("BT",false);
    74fe:	86 e7       	ldi	r24, 0x76	; 118
    7500:	90 e2       	ldi	r25, 0x20	; 32
    7502:	60 e0       	ldi	r22, 0x00	; 0
    7504:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
						timeOutCounter = 0;
    7508:	10 92 c2 27 	sts	0x27C2, r1
    750c:	10 92 c3 27 	sts	0x27C3, r1
						Debug_ClearBuffer();
    7510:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
    7514:	05 c0       	rjmp	.+10     	; 0x7520 <Uploader_connectToComputer+0x7c>
    7516:	c8 01       	movw	r24, r16
    7518:	01 97       	sbiw	r24, 0x01	; 1
    751a:	f1 f7       	brne	.-4      	; 0x7518 <Uploader_connectToComputer+0x74>
						break;
					}
				}
			}
			_delay_ms(1);
			singCounter--;
    751c:	21 97       	sbiw	r28, 0x01	; 1
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		Debug_SendString("BS",false);
		singCounter = 750;
		while(singCounter > 0){
    751e:	e1 f6       	brne	.-72     	; 0x74d8 <Uploader_connectToComputer+0x34>
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
    7520:	80 91 d1 27 	lds	r24, 0x27D1
    7524:	88 23       	and	r24, r24
    7526:	89 f2       	breq	.-94     	; 0x74ca <Uploader_connectToComputer+0x26>
			}
			_delay_ms(1);
			singCounter--;
		}
	}
}
    7528:	df 91       	pop	r29
    752a:	cf 91       	pop	r28
    752c:	1f 91       	pop	r17
    752e:	0f 91       	pop	r16
    7530:	ff 90       	pop	r15
    7532:	ef 90       	pop	r14
    7534:	df 90       	pop	r13
    7536:	08 95       	ret

00007538 <Uploader_sendPort>:
    }
	Debug_SendByte(strlen(server)+2);
	Debug_SendString(server,true);
}

void Uploader_sendPort(void){
    7538:	0f 93       	push	r16
    753a:	1f 93       	push	r17
	Debug_SendByte('O');
    753c:	8f e4       	ldi	r24, 0x4F	; 79
    753e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(port[strlen(port)-1] < 32){
    7542:	e0 eb       	ldi	r30, 0xB0	; 176
    7544:	f5 e4       	ldi	r31, 0x45	; 69
    7546:	01 90       	ld	r0, Z+
    7548:	00 20       	and	r0, r0
    754a:	e9 f7       	brne	.-6      	; 0x7546 <Uploader_sendPort+0xe>
    754c:	32 97       	sbiw	r30, 0x02	; 2
    754e:	80 81       	ld	r24, Z
    7550:	80 32       	cpi	r24, 0x20	; 32
    7552:	08 f4       	brcc	.+2      	; 0x7556 <Uploader_sendPort+0x1e>
        port[strlen(port)-1] = 0;
    7554:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(port)+2);
    7556:	00 eb       	ldi	r16, 0xB0	; 176
    7558:	15 e4       	ldi	r17, 0x45	; 69
    755a:	f8 01       	movw	r30, r16
    755c:	01 90       	ld	r0, Z+
    755e:	00 20       	and	r0, r0
    7560:	e9 f7       	brne	.-6      	; 0x755c <Uploader_sendPort+0x24>
    7562:	31 97       	sbiw	r30, 0x01	; 1
    7564:	e0 1b       	sub	r30, r16
    7566:	f1 0b       	sbc	r31, r17
    7568:	8e 2f       	mov	r24, r30
    756a:	8e 5f       	subi	r24, 0xFE	; 254
    756c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(port,true);
    7570:	c8 01       	movw	r24, r16
    7572:	61 e0       	ldi	r22, 0x01	; 1
    7574:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
}
    7578:	1f 91       	pop	r17
    757a:	0f 91       	pop	r16
    757c:	08 95       	ret

0000757e <Uploader_sendServer>:
            return false;
        }
    }
}

void Uploader_sendServer(void){
    757e:	0f 93       	push	r16
    7580:	1f 93       	push	r17
	Debug_SendByte('V');
    7582:	86 e5       	ldi	r24, 0x56	; 86
    7584:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(server[strlen(server)-1] < 32){
    7588:	e8 e5       	ldi	r30, 0x58	; 88
    758a:	f9 e3       	ldi	r31, 0x39	; 57
    758c:	01 90       	ld	r0, Z+
    758e:	00 20       	and	r0, r0
    7590:	e9 f7       	brne	.-6      	; 0x758c <Uploader_sendServer+0xe>
    7592:	32 97       	sbiw	r30, 0x02	; 2
    7594:	80 81       	ld	r24, Z
    7596:	80 32       	cpi	r24, 0x20	; 32
    7598:	08 f4       	brcc	.+2      	; 0x759c <Uploader_sendServer+0x1e>
        server[strlen(server)-1] = 0;
    759a:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(server)+2);
    759c:	08 e5       	ldi	r16, 0x58	; 88
    759e:	19 e3       	ldi	r17, 0x39	; 57
    75a0:	f8 01       	movw	r30, r16
    75a2:	01 90       	ld	r0, Z+
    75a4:	00 20       	and	r0, r0
    75a6:	e9 f7       	brne	.-6      	; 0x75a2 <Uploader_sendServer+0x24>
    75a8:	31 97       	sbiw	r30, 0x01	; 1
    75aa:	e0 1b       	sub	r30, r16
    75ac:	f1 0b       	sbc	r31, r17
    75ae:	8e 2f       	mov	r24, r30
    75b0:	8e 5f       	subi	r24, 0xFE	; 254
    75b2:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(server,true);
    75b6:	c8 01       	movw	r24, r16
    75b8:	61 e0       	ldi	r22, 0x01	; 1
    75ba:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
}
    75be:	1f 91       	pop	r17
    75c0:	0f 91       	pop	r16
    75c2:	08 95       	ret

000075c4 <Uploader_sendNickname>:
    }
	Debug_SendByte(strlen(user)+2);
	Debug_SendString(user,true);
}

void Uploader_sendNickname(void){
    75c4:	0f 93       	push	r16
    75c6:	1f 93       	push	r17
	Debug_SendByte('N');
    75c8:	8e e4       	ldi	r24, 0x4E	; 78
    75ca:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(nickname[strlen(nickname)-1] < 32){
    75ce:	e2 ee       	ldi	r30, 0xE2	; 226
    75d0:	f5 e4       	ldi	r31, 0x45	; 69
    75d2:	01 90       	ld	r0, Z+
    75d4:	00 20       	and	r0, r0
    75d6:	e9 f7       	brne	.-6      	; 0x75d2 <Uploader_sendNickname+0xe>
    75d8:	32 97       	sbiw	r30, 0x02	; 2
    75da:	80 81       	ld	r24, Z
    75dc:	80 32       	cpi	r24, 0x20	; 32
    75de:	08 f4       	brcc	.+2      	; 0x75e2 <Uploader_sendNickname+0x1e>
		nickname[strlen(nickname)-1] = 0;
    75e0:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(nickname)+2);
    75e2:	02 ee       	ldi	r16, 0xE2	; 226
    75e4:	15 e4       	ldi	r17, 0x45	; 69
    75e6:	f8 01       	movw	r30, r16
    75e8:	01 90       	ld	r0, Z+
    75ea:	00 20       	and	r0, r0
    75ec:	e9 f7       	brne	.-6      	; 0x75e8 <Uploader_sendNickname+0x24>
    75ee:	31 97       	sbiw	r30, 0x01	; 1
    75f0:	e0 1b       	sub	r30, r16
    75f2:	f1 0b       	sbc	r31, r17
    75f4:	8e 2f       	mov	r24, r30
    75f6:	8e 5f       	subi	r24, 0xFE	; 254
    75f8:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(nickname,true);
    75fc:	c8 01       	movw	r24, r16
    75fe:	61 e0       	ldi	r22, 0x01	; 1
    7600:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
}
    7604:	1f 91       	pop	r17
    7606:	0f 91       	pop	r16
    7608:	08 95       	ret

0000760a <Uploader_sendUser>:
		Debug_SendByte(0);
		Debug_SendString("",true);
	}
}

void Uploader_sendUser(void){
    760a:	0f 93       	push	r16
    760c:	1f 93       	push	r17
	Debug_SendByte('U');
    760e:	85 e5       	ldi	r24, 0x55	; 85
    7610:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(user[strlen(user)-1] < 32){
    7614:	e2 e9       	ldi	r30, 0x92	; 146
    7616:	f4 e3       	ldi	r31, 0x34	; 52
    7618:	01 90       	ld	r0, Z+
    761a:	00 20       	and	r0, r0
    761c:	e9 f7       	brne	.-6      	; 0x7618 <Uploader_sendUser+0xe>
    761e:	32 97       	sbiw	r30, 0x02	; 2
    7620:	80 81       	ld	r24, Z
    7622:	80 32       	cpi	r24, 0x20	; 32
    7624:	08 f4       	brcc	.+2      	; 0x7628 <Uploader_sendUser+0x1e>
        user[strlen(user)-1] = 0;
    7626:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(user)+2);
    7628:	02 e9       	ldi	r16, 0x92	; 146
    762a:	14 e3       	ldi	r17, 0x34	; 52
    762c:	f8 01       	movw	r30, r16
    762e:	01 90       	ld	r0, Z+
    7630:	00 20       	and	r0, r0
    7632:	e9 f7       	brne	.-6      	; 0x762e <Uploader_sendUser+0x24>
    7634:	31 97       	sbiw	r30, 0x01	; 1
    7636:	e0 1b       	sub	r30, r16
    7638:	f1 0b       	sbc	r31, r17
    763a:	8e 2f       	mov	r24, r30
    763c:	8e 5f       	subi	r24, 0xFE	; 254
    763e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(user,true);
    7642:	c8 01       	movw	r24, r16
    7644:	61 e0       	ldi	r22, 0x01	; 1
    7646:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
}
    764a:	1f 91       	pop	r17
    764c:	0f 91       	pop	r16
    764e:	08 95       	ret

00007650 <Uploader_sendKey>:
		Debug_SendByte(0);
		Debug_SendString("",true);
	}
}

void Uploader_sendKey(void){
    7650:	0f 93       	push	r16
    7652:	1f 93       	push	r17
	if(phraseRead){
    7654:	80 91 a2 27 	lds	r24, 0x27A2
    7658:	88 23       	and	r24, r24
    765a:	81 f0       	breq	.+32     	; 0x767c <Uploader_sendKey+0x2c>
		if(phrase[strlen(phrase)-1] < 32){
    765c:	ed e0       	ldi	r30, 0x0D	; 13
    765e:	fa e3       	ldi	r31, 0x3A	; 58
    7660:	01 90       	ld	r0, Z+
    7662:	00 20       	and	r0, r0
    7664:	e9 f7       	brne	.-6      	; 0x7660 <Uploader_sendKey+0x10>
    7666:	32 97       	sbiw	r30, 0x02	; 2
    7668:	80 81       	ld	r24, Z
    766a:	80 32       	cpi	r24, 0x20	; 32
    766c:	08 f4       	brcc	.+2      	; 0x7670 <Uploader_sendKey+0x20>
			phrase[strlen(phrase)-1] = 0;
    766e:	10 82       	st	Z, r1
		}
		Debug_SendByte('K');
    7670:	8b e4       	ldi	r24, 0x4B	; 75
    7672:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(phrase)+2);
    7676:	0d e0       	ldi	r16, 0x0D	; 13
    7678:	1a e3       	ldi	r17, 0x3A	; 58
    767a:	13 c0       	rjmp	.+38     	; 0x76a2 <Uploader_sendKey+0x52>
		Debug_SendString(phrase,true);
	} else if(keyRead){
    767c:	80 91 a3 27 	lds	r24, 0x27A3
    7680:	88 23       	and	r24, r24
    7682:	e1 f0       	breq	.+56     	; 0x76bc <Uploader_sendKey+0x6c>
		if(key[strlen(key)-1] < 32){
    7684:	eb ea       	ldi	r30, 0xAB	; 171
    7686:	fa e3       	ldi	r31, 0x3A	; 58
    7688:	01 90       	ld	r0, Z+
    768a:	00 20       	and	r0, r0
    768c:	e9 f7       	brne	.-6      	; 0x7688 <Uploader_sendKey+0x38>
    768e:	32 97       	sbiw	r30, 0x02	; 2
    7690:	80 81       	ld	r24, Z
    7692:	80 32       	cpi	r24, 0x20	; 32
    7694:	08 f4       	brcc	.+2      	; 0x7698 <Uploader_sendKey+0x48>
			key[strlen(key)-1] = 0;
    7696:	10 82       	st	Z, r1
		}
		Debug_SendByte('K');
    7698:	8b e4       	ldi	r24, 0x4B	; 75
    769a:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(key)+2);
    769e:	0b ea       	ldi	r16, 0xAB	; 171
    76a0:	1a e3       	ldi	r17, 0x3A	; 58
    76a2:	f8 01       	movw	r30, r16
    76a4:	01 90       	ld	r0, Z+
    76a6:	00 20       	and	r0, r0
    76a8:	e9 f7       	brne	.-6      	; 0x76a4 <Uploader_sendKey+0x54>
    76aa:	31 97       	sbiw	r30, 0x01	; 1
    76ac:	e0 1b       	sub	r30, r16
    76ae:	f1 0b       	sbc	r31, r17
    76b0:	8e 2f       	mov	r24, r30
    76b2:	8e 5f       	subi	r24, 0xFE	; 254
    76b4:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString(key,true);
    76b8:	c8 01       	movw	r24, r16
    76ba:	08 c0       	rjmp	.+16     	; 0x76cc <Uploader_sendKey+0x7c>
	} else {
		Debug_SendByte('K');
    76bc:	8b e4       	ldi	r24, 0x4B	; 75
    76be:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(0);
    76c2:	80 e0       	ldi	r24, 0x00	; 0
    76c4:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString("",true);
    76c8:	89 e7       	ldi	r24, 0x79	; 121
    76ca:	90 e2       	ldi	r25, 0x20	; 32
    76cc:	61 e0       	ldi	r22, 0x01	; 1
    76ce:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
	}
}
    76d2:	1f 91       	pop	r17
    76d4:	0f 91       	pop	r16
    76d6:	08 95       	ret

000076d8 <Uploader_sendAuthType>:
		Debug_SendByte(0);
		Debug_SendString("",true);
	}
}

void Uploader_sendAuthType(void){
    76d8:	0f 93       	push	r16
    76da:	1f 93       	push	r17
	if(authRead){
    76dc:	80 91 a1 27 	lds	r24, 0x27A1
    76e0:	88 23       	and	r24, r24
    76e2:	e1 f0       	breq	.+56     	; 0x771c <Uploader_sendAuthType+0x44>
		if(auth[strlen(auth)-1] < 32){
    76e4:	e4 ee       	ldi	r30, 0xE4	; 228
    76e6:	f3 e3       	ldi	r31, 0x33	; 51
    76e8:	01 90       	ld	r0, Z+
    76ea:	00 20       	and	r0, r0
    76ec:	e9 f7       	brne	.-6      	; 0x76e8 <Uploader_sendAuthType+0x10>
    76ee:	32 97       	sbiw	r30, 0x02	; 2
    76f0:	80 81       	ld	r24, Z
    76f2:	80 32       	cpi	r24, 0x20	; 32
    76f4:	08 f4       	brcc	.+2      	; 0x76f8 <Uploader_sendAuthType+0x20>
			auth[strlen(auth)-1] = 0;
    76f6:	10 82       	st	Z, r1
		}
		Debug_SendByte('A');
    76f8:	81 e4       	ldi	r24, 0x41	; 65
    76fa:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(auth)+2);
    76fe:	04 ee       	ldi	r16, 0xE4	; 228
    7700:	13 e3       	ldi	r17, 0x33	; 51
    7702:	f8 01       	movw	r30, r16
    7704:	01 90       	ld	r0, Z+
    7706:	00 20       	and	r0, r0
    7708:	e9 f7       	brne	.-6      	; 0x7704 <Uploader_sendAuthType+0x2c>
    770a:	31 97       	sbiw	r30, 0x01	; 1
    770c:	e0 1b       	sub	r30, r16
    770e:	f1 0b       	sbc	r31, r17
    7710:	8e 2f       	mov	r24, r30
    7712:	8e 5f       	subi	r24, 0xFE	; 254
    7714:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString(auth,true);
    7718:	c8 01       	movw	r24, r16
    771a:	08 c0       	rjmp	.+16     	; 0x772c <Uploader_sendAuthType+0x54>
	} else {
		Debug_SendByte('A');
    771c:	81 e4       	ldi	r24, 0x41	; 65
    771e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(0);
    7722:	80 e0       	ldi	r24, 0x00	; 0
    7724:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString("",true);
    7728:	89 e7       	ldi	r24, 0x79	; 121
    772a:	90 e2       	ldi	r25, 0x20	; 32
    772c:	61 e0       	ldi	r22, 0x01	; 1
    772e:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
	}
}
    7732:	1f 91       	pop	r17
    7734:	0f 91       	pop	r16
    7736:	08 95       	ret

00007738 <Uploader_sendSSID>:
        }
    }
}


void Uploader_sendSSID(void){
    7738:	0f 93       	push	r16
    773a:	1f 93       	push	r17
	if(ssidRead){
    773c:	80 91 a4 27 	lds	r24, 0x27A4
    7740:	88 23       	and	r24, r24
    7742:	e1 f0       	breq	.+56     	; 0x777c <Uploader_sendSSID+0x44>
		if(ssid[strlen(ssid)-1] < 32){
    7744:	ee e5       	ldi	r30, 0x5E	; 94
    7746:	fc e2       	ldi	r31, 0x2C	; 44
    7748:	01 90       	ld	r0, Z+
    774a:	00 20       	and	r0, r0
    774c:	e9 f7       	brne	.-6      	; 0x7748 <Uploader_sendSSID+0x10>
    774e:	32 97       	sbiw	r30, 0x02	; 2
    7750:	80 81       	ld	r24, Z
    7752:	80 32       	cpi	r24, 0x20	; 32
    7754:	08 f4       	brcc	.+2      	; 0x7758 <Uploader_sendSSID+0x20>
			ssid[strlen(ssid)-1] = 0;
    7756:	10 82       	st	Z, r1
		}
		Debug_SendByte('S');
    7758:	83 e5       	ldi	r24, 0x53	; 83
    775a:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(ssid)+2);
    775e:	0e e5       	ldi	r16, 0x5E	; 94
    7760:	1c e2       	ldi	r17, 0x2C	; 44
    7762:	f8 01       	movw	r30, r16
    7764:	01 90       	ld	r0, Z+
    7766:	00 20       	and	r0, r0
    7768:	e9 f7       	brne	.-6      	; 0x7764 <Uploader_sendSSID+0x2c>
    776a:	31 97       	sbiw	r30, 0x01	; 1
    776c:	e0 1b       	sub	r30, r16
    776e:	f1 0b       	sbc	r31, r17
    7770:	8e 2f       	mov	r24, r30
    7772:	8e 5f       	subi	r24, 0xFE	; 254
    7774:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString(ssid,true);
    7778:	c8 01       	movw	r24, r16
    777a:	08 c0       	rjmp	.+16     	; 0x778c <Uploader_sendSSID+0x54>
	} else {
		Debug_SendByte('S');
    777c:	83 e5       	ldi	r24, 0x53	; 83
    777e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(0);
    7782:	80 e0       	ldi	r24, 0x00	; 0
    7784:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString("",true);
    7788:	89 e7       	ldi	r24, 0x79	; 121
    778a:	90 e2       	ldi	r25, 0x20	; 32
    778c:	61 e0       	ldi	r22, 0x01	; 1
    778e:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
	}
}
    7792:	1f 91       	pop	r17
    7794:	0f 91       	pop	r16
    7796:	08 95       	ret

00007798 <Uploader_sendFilename>:
    }
	Debug_SendByte(strlen(nickname)+2);
	Debug_SendString(nickname,true);
}

void Uploader_sendFilename(void){
    7798:	1f 93       	push	r17
    Debug_SendByte('F');
    779a:	86 e4       	ldi	r24, 0x46	; 70
    779c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    okToOpenDirectory = true;
    77a0:	81 e0       	ldi	r24, 0x01	; 1
    77a2:	80 93 d3 27 	sts	0x27D3, r24
    while(okToOpenDirectory);
    77a6:	80 91 d3 27 	lds	r24, 0x27D3
    77aa:	88 23       	and	r24, r24
    77ac:	e1 f7       	brne	.-8      	; 0x77a6 <Uploader_sendFilename+0xe>
	
    while(true){
        okToGrabNextFileName = true;
    77ae:	11 e0       	ldi	r17, 0x01	; 1
    77b0:	10 93 d4 27 	sts	0x27D4, r17
        while(okToGrabNextFileName);
    77b4:	80 91 d4 27 	lds	r24, 0x27D4
    77b8:	88 23       	and	r24, r24
    77ba:	e1 f7       	brne	.-8      	; 0x77b4 <Uploader_sendFilename+0x1c>
        if(availableFileName[0] == 0){
    77bc:	80 91 a1 45 	lds	r24, 0x45A1
    77c0:	88 23       	and	r24, r24
    77c2:	39 f4       	brne	.+14     	; 0x77d2 <Uploader_sendFilename+0x3a>
            Debug_SendString("",true);
    77c4:	89 e7       	ldi	r24, 0x79	; 121
    77c6:	90 e2       	ldi	r25, 0x20	; 32
    77c8:	61 e0       	ldi	r22, 0x01	; 1
    77ca:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
					}
				}
			}
        }
    }
}
    77ce:	1f 91       	pop	r17
    77d0:	08 95       	ret
        while(okToGrabNextFileName);
        if(availableFileName[0] == 0){
            Debug_SendString("",true);
            return;
        } else {
            if(recording){
    77d2:	80 91 69 27 	lds	r24, 0x2769
    77d6:	88 23       	and	r24, r24
    77d8:	b9 f0       	breq	.+46     	; 0x7808 <Uploader_sendFilename+0x70>
				if((strcasecmp(currentLogFile,fno.fname)) != 0){		// file is NOT the current file
    77da:	89 e1       	ldi	r24, 0x19	; 25
    77dc:	92 e3       	ldi	r25, 0x32	; 50
    77de:	61 ec       	ldi	r22, 0xC1	; 193
    77e0:	73 e3       	ldi	r23, 0x33	; 51
    77e2:	0e 94 9d 44 	call	0x893a	; 0x893a <strcasecmp>
    77e6:	89 2b       	or	r24, r25
    77e8:	19 f3       	breq	.-58     	; 0x77b0 <Uploader_sendFilename+0x18>
			    	if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    77ea:	81 ec       	ldi	r24, 0xC1	; 193
    77ec:	93 e3       	ldi	r25, 0x33	; 51
    77ee:	6a e7       	ldi	r22, 0x7A	; 122
    77f0:	70 e2       	ldi	r23, 0x20	; 32
    77f2:	0e 94 b0 44 	call	0x8960	; 0x8960 <strcasestr>
    77f6:	89 2b       	or	r24, r25
    77f8:	d9 f2       	breq	.-74     	; 0x77b0 <Uploader_sendFilename+0x18>
				    	if(strcasestr(fno.fname,".BTU") == NULL){
    77fa:	81 ec       	ldi	r24, 0xC1	; 193
    77fc:	93 e3       	ldi	r25, 0x33	; 51
    77fe:	6e e7       	ldi	r22, 0x7E	; 126
    7800:	70 e2       	ldi	r23, 0x20	; 32
    7802:	0e 94 b0 44 	call	0x8960	; 0x8960 <strcasestr>
    7806:	0e c0       	rjmp	.+28     	; 0x7824 <Uploader_sendFilename+0x8c>
						    Debug_SendByte(',');
						}
					}
				}
			} else {
				if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    7808:	81 ec       	ldi	r24, 0xC1	; 193
    780a:	93 e3       	ldi	r25, 0x33	; 51
    780c:	6a e7       	ldi	r22, 0x7A	; 122
    780e:	70 e2       	ldi	r23, 0x20	; 32
    7810:	0e 94 b0 44 	call	0x8960	; 0x8960 <strcasestr>
    7814:	89 2b       	or	r24, r25
    7816:	61 f2       	breq	.-104    	; 0x77b0 <Uploader_sendFilename+0x18>
					if(strcasestr(fno.fname,".BTU") == NULL){
    7818:	81 ec       	ldi	r24, 0xC1	; 193
    781a:	93 e3       	ldi	r25, 0x33	; 51
    781c:	6e e7       	ldi	r22, 0x7E	; 126
    781e:	70 e2       	ldi	r23, 0x20	; 32
    7820:	0e 94 b0 44 	call	0x8960	; 0x8960 <strcasestr>
    7824:	89 2b       	or	r24, r25
    7826:	21 f6       	brne	.-120    	; 0x77b0 <Uploader_sendFilename+0x18>
						strcpy(availableFileName,fno.fname);
    7828:	81 ea       	ldi	r24, 0xA1	; 161
    782a:	95 e4       	ldi	r25, 0x45	; 69
    782c:	61 ec       	ldi	r22, 0xC1	; 193
    782e:	73 e3       	ldi	r23, 0x33	; 51
    7830:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
						Debug_SendString(availableFileName,false);
    7834:	81 ea       	ldi	r24, 0xA1	; 161
    7836:	95 e4       	ldi	r25, 0x45	; 69
    7838:	60 e0       	ldi	r22, 0x00	; 0
    783a:	0e 94 27 3a 	call	0x744e	; 0x744e <Debug_SendString>
						Debug_SendByte(',');
    783e:	8c e2       	ldi	r24, 0x2C	; 44
    7840:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    7844:	b5 cf       	rjmp	.-150    	; 0x77b0 <Uploader_sendFilename+0x18>

00007846 <Uploader_Update>:
volatile bool fileExists				= false;
volatile bool timeIsValid				= false;


bool Uploader_Update(void){
	if(Debug_CharReadyToRead()){
    7846:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    784a:	88 23       	and	r24, r24
    784c:	09 f4       	brne	.+2      	; 0x7850 <Uploader_Update+0xa>
    784e:	6e c0       	rjmp	.+220    	; 0x792c <Uploader_Update+0xe6>
		
		timeOutCounter = 0;
    7850:	10 92 c2 27 	sts	0x27C2, r1
    7854:	10 92 c3 27 	sts	0x27C3, r1
		command[0] = Debug_GetByte(false);
    7858:	80 e0       	ldi	r24, 0x00	; 0
    785a:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    785e:	80 93 1a 34 	sts	0x341A, r24
		
		if(command[0] == 'T'){                          // supply the time
    7862:	84 35       	cpi	r24, 0x54	; 84
    7864:	29 f5       	brne	.+74     	; 0x78b0 <Uploader_Update+0x6a>
			if(Uploader_getTime()){
    7866:	0e 94 3c 31 	call	0x6278	; 0x6278 <Uploader_getTime>
    786a:	88 23       	and	r24, r24
    786c:	f1 f0       	breq	.+60     	; 0x78aa <Uploader_Update+0x64>
				timeIsValid = true;
    786e:	81 e0       	ldi	r24, 0x01	; 1
    7870:	80 93 de 27 	sts	0x27DE, r24
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    7874:	80 91 21 04 	lds	r24, 0x0421
    7878:	80 61       	ori	r24, 0x10	; 16
    787a:	e0 e2       	ldi	r30, 0x20	; 32
    787c:	f4 e0       	ldi	r31, 0x04	; 4
    787e:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    7880:	80 91 21 04 	lds	r24, 0x0421
    7884:	84 fd       	sbrc	r24, 4
    7886:	fc cf       	rjmp	.-8      	; 0x7880 <Uploader_Update+0x3a>
	return RTC32.CNT;
    7888:	80 91 24 04 	lds	r24, 0x0424
    788c:	90 91 25 04 	lds	r25, 0x0425
    7890:	a0 91 26 04 	lds	r26, 0x0426
    7894:	b0 91 27 04 	lds	r27, 0x0427
				UNIX_Time = Time_Get();
    7898:	80 93 9c 27 	sts	0x279C, r24
    789c:	90 93 9d 27 	sts	0x279D, r25
    78a0:	a0 93 9e 27 	sts	0x279E, r26
    78a4:	b0 93 9f 27 	sts	0x279F, r27
    78a8:	41 c0       	rjmp	.+130    	; 0x792c <Uploader_Update+0xe6>
			} else {
				timeIsValid = false;
    78aa:	10 92 de 27 	sts	0x27DE, r1
    78ae:	55 c0       	rjmp	.+170    	; 0x795a <Uploader_Update+0x114>
				return false;
			}
		} else if(command[0] == 'S'){                          // request SSID
    78b0:	83 35       	cpi	r24, 0x53	; 83
    78b2:	19 f4       	brne	.+6      	; 0x78ba <Uploader_Update+0x74>
			Uploader_sendSSID();
    78b4:	0e 94 9c 3b 	call	0x7738	; 0x7738 <Uploader_sendSSID>
    78b8:	39 c0       	rjmp	.+114    	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'A'){                          // request authorization type
    78ba:	81 34       	cpi	r24, 0x41	; 65
    78bc:	19 f4       	brne	.+6      	; 0x78c4 <Uploader_Update+0x7e>
			Uploader_sendAuthType();
    78be:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Uploader_sendAuthType>
    78c2:	34 c0       	rjmp	.+104    	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'K'){                          // request authorisation key
    78c4:	8b 34       	cpi	r24, 0x4B	; 75
    78c6:	19 f4       	brne	.+6      	; 0x78ce <Uploader_Update+0x88>
			Uploader_sendKey();
    78c8:	0e 94 28 3b 	call	0x7650	; 0x7650 <Uploader_sendKey>
    78cc:	2f c0       	rjmp	.+94     	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'U'){                          // request user
    78ce:	85 35       	cpi	r24, 0x55	; 85
    78d0:	19 f4       	brne	.+6      	; 0x78d8 <Uploader_Update+0x92>
			Uploader_sendUser();
    78d2:	0e 94 05 3b 	call	0x760a	; 0x760a <Uploader_sendUser>
    78d6:	2a c0       	rjmp	.+84     	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'N'){                           // request nickname
    78d8:	8e 34       	cpi	r24, 0x4E	; 78
    78da:	19 f4       	brne	.+6      	; 0x78e2 <Uploader_Update+0x9c>
			Uploader_sendNickname();
    78dc:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <Uploader_sendNickname>
    78e0:	25 c0       	rjmp	.+74     	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'F'){                           // request filename
    78e2:	86 34       	cpi	r24, 0x46	; 70
    78e4:	19 f4       	brne	.+6      	; 0x78ec <Uploader_Update+0xa6>
			Uploader_sendFilename();
    78e6:	0e 94 cc 3b 	call	0x7798	; 0x7798 <Uploader_sendFilename>
    78ea:	20 c0       	rjmp	.+64     	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'D'){                           // request data from file
    78ec:	84 34       	cpi	r24, 0x44	; 68
    78ee:	19 f4       	brne	.+6      	; 0x78f6 <Uploader_Update+0xb0>
			if(!Uploader_uploadFile()){
    78f0:	0e 94 13 32 	call	0x6426	; 0x6426 <Uploader_uploadFile>
    78f4:	04 c0       	rjmp	.+8      	; 0x78fe <Uploader_Update+0xb8>
				return false;
			}
		} else if(command[0] == 'E'){                   // erase file
    78f6:	85 34       	cpi	r24, 0x45	; 69
    78f8:	29 f4       	brne	.+10     	; 0x7904 <Uploader_Update+0xbe>
			if(!Uploader_eraseFile()){
    78fa:	0e 94 8c 31 	call	0x6318	; 0x6318 <Uploader_eraseFile>
    78fe:	88 23       	and	r24, r24
    7900:	a9 f4       	brne	.+42     	; 0x792c <Uploader_Update+0xe6>
    7902:	2b c0       	rjmp	.+86     	; 0x795a <Uploader_Update+0x114>
				return false;
			}
		} else if(command[0] == 'V'){                   // request server for post
    7904:	86 35       	cpi	r24, 0x56	; 86
    7906:	19 f4       	brne	.+6      	; 0x790e <Uploader_Update+0xc8>
			Uploader_sendServer();
    7908:	0e 94 bf 3a 	call	0x757e	; 0x757e <Uploader_sendServer>
    790c:	0f c0       	rjmp	.+30     	; 0x792c <Uploader_Update+0xe6>
		} else if(command[0] == 'O'){                   // request port for post
    790e:	8f 34       	cpi	r24, 0x4F	; 79
    7910:	19 f4       	brne	.+6      	; 0x7918 <Uploader_Update+0xd2>
			Uploader_sendPort();
    7912:	0e 94 9c 3a 	call	0x7538	; 0x7538 <Uploader_sendPort>
    7916:	0a c0       	rjmp	.+20     	; 0x792c <Uploader_Update+0xe6>
		}  else if(command[0] == 'R'){                   // reset
    7918:	82 35       	cpi	r24, 0x52	; 82
    791a:	41 f4       	brne	.+16     	; 0x792c <Uploader_Update+0xe6>
    791c:	80 e0       	ldi	r24, 0x00	; 0
    791e:	98 e4       	ldi	r25, 0x48	; 72
    7920:	01 97       	sbiw	r24, 0x01	; 1
    7922:	f1 f7       	brne	.-4      	; 0x7920 <Uploader_Update+0xda>
			_delay_ms(5);
			Debug_SendByte('R');
    7924:	82 e5       	ldi	r24, 0x52	; 82
    7926:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    792a:	17 c0       	rjmp	.+46     	; 0x795a <Uploader_Update+0x114>
    792c:	86 e6       	ldi	r24, 0x66	; 102
    792e:	9e e0       	ldi	r25, 0x0E	; 14
    7930:	01 97       	sbiw	r24, 0x01	; 1
    7932:	f1 f7       	brne	.-4      	; 0x7930 <Uploader_Update+0xea>
			return false;
		}
	}
	_delay_ms(1);
	timeOutCounter++;
    7934:	80 91 c2 27 	lds	r24, 0x27C2
    7938:	90 91 c3 27 	lds	r25, 0x27C3
    793c:	01 96       	adiw	r24, 0x01	; 1
    793e:	80 93 c2 27 	sts	0x27C2, r24
    7942:	90 93 c3 27 	sts	0x27C3, r25
	if(timeOutCounter > 30000){
    7946:	80 91 c2 27 	lds	r24, 0x27C2
    794a:	90 91 c3 27 	lds	r25, 0x27C3
    794e:	20 e0       	ldi	r18, 0x00	; 0
    7950:	81 53       	subi	r24, 0x31	; 49
    7952:	95 47       	sbci	r25, 0x75	; 117
    7954:	18 f4       	brcc	.+6      	; 0x795c <Uploader_Update+0x116>
    7956:	21 e0       	ldi	r18, 0x01	; 1
    7958:	01 c0       	rjmp	.+2      	; 0x795c <Uploader_Update+0x116>
    795a:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}
	return true;
}
    795c:	82 2f       	mov	r24, r18
    795e:	08 95       	ret

00007960 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    7960:	0f 93       	push	r16
    7962:	1f 93       	push	r17
	fileName[0] = '/';
    7964:	00 ed       	ldi	r16, 0xD0	; 208
    7966:	13 e3       	ldi	r17, 0x33	; 51
    7968:	2f e2       	ldi	r18, 0x2F	; 47
    796a:	20 93 d0 33 	sts	0x33D0, r18
	ltoa(var, fileName+1, 16);
    796e:	a8 01       	movw	r20, r16
    7970:	4f 5f       	subi	r20, 0xFF	; 255
    7972:	5f 4f       	sbci	r21, 0xFF	; 255
    7974:	20 e1       	ldi	r18, 0x10	; 16
    7976:	30 e0       	ldi	r19, 0x00	; 0
    7978:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <ltoa>
	strcat(fileName, ".bt");
    797c:	c8 01       	movw	r24, r16
    797e:	63 e8       	ldi	r22, 0x83	; 131
    7980:	70 e2       	ldi	r23, 0x20	; 32
    7982:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
}
    7986:	1f 91       	pop	r17
    7988:	0f 91       	pop	r16
    798a:	08 95       	ret

0000798c <SD_Open>:
	f_mount(1, &fso1);
	return tmp;
}


uint8_t SD_Open(char string []){
    798c:	cf 93       	push	r28
    798e:	df 93       	push	r29
    7990:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    7992:	89 e1       	ldi	r24, 0x19	; 25
    7994:	92 e3       	ldi	r25, 0x32	; 50
    7996:	be 01       	movw	r22, r28
    7998:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
	strupr(currentLogFile);
    799c:	89 e1       	ldi	r24, 0x19	; 25
    799e:	92 e3       	ldi	r25, 0x32	; 50
    79a0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <strupr>
    79a4:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    79a6:	a9 e1       	ldi	r26, 0x19	; 25
    79a8:	b2 e3       	ldi	r27, 0x32	; 50
    79aa:	07 c0       	rjmp	.+14     	; 0x79ba <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    79ac:	fc 01       	movw	r30, r24
    79ae:	e7 5e       	subi	r30, 0xE7	; 231
    79b0:	fd 4c       	sbci	r31, 0xCD	; 205
    79b2:	80 81       	ld	r24, Z
    79b4:	31 97       	sbiw	r30, 0x01	; 1
    79b6:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    79b8:	2f 5f       	subi	r18, 0xFF	; 255
    79ba:	fd 01       	movw	r30, r26
    79bc:	01 90       	ld	r0, Z+
    79be:	00 20       	and	r0, r0
    79c0:	e9 f7       	brne	.-6      	; 0x79bc <SD_Open+0x30>
    79c2:	31 97       	sbiw	r30, 0x01	; 1
    79c4:	e9 51       	subi	r30, 0x19	; 25
    79c6:	f2 43       	sbci	r31, 0x32	; 50
    79c8:	82 2f       	mov	r24, r18
    79ca:	90 e0       	ldi	r25, 0x00	; 0
    79cc:	8e 17       	cp	r24, r30
    79ce:	9f 07       	cpc	r25, r31
    79d0:	68 f3       	brcs	.-38     	; 0x79ac <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    79d2:	e8 5e       	subi	r30, 0xE8	; 232
    79d4:	fd 4c       	sbci	r31, 0xCD	; 205
    79d6:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    79d8:	8d ed       	ldi	r24, 0xDD	; 221
    79da:	9a e3       	ldi	r25, 0x3A	; 58
    79dc:	be 01       	movw	r22, r28
    79de:	43 e1       	ldi	r20, 0x13	; 19
    79e0:	0e 94 82 16 	call	0x2d04	; 0x2d04 <f_open>
}
    79e4:	df 91       	pop	r29
    79e6:	cf 91       	pop	r28
    79e8:	08 95       	ret

000079ea <SD_StartLogFile>:
        okToEraseFile = false;
	    goto sdInterrupt;
	}
}

uint8_t SD_StartLogFile(uint32_t time){
    79ea:	ff 92       	push	r15
    79ec:	0f 93       	push	r16
    79ee:	1f 93       	push	r17
	uint8_t resp;
	
	SD_MakeFileName(time);
    79f0:	0e 94 b0 3c 	call	0x7960	; 0x7960 <SD_MakeFileName>
	resp = SD_Open(fileName);
    79f4:	80 ed       	ldi	r24, 0xD0	; 208
    79f6:	93 e3       	ldi	r25, 0x33	; 51
    79f8:	0e 94 c6 3c 	call	0x798c	; 0x798c <SD_Open>
    79fc:	f8 2e       	mov	r15, r24
	if(resp != FR_OK){
    79fe:	88 23       	and	r24, r24
    7a00:	09 f0       	breq	.+2      	; 0x7a04 <SD_StartLogFile+0x1a>
    7a02:	a0 c0       	rjmp	.+320    	; 0x7b44 <SD_StartLogFile+0x15a>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7a04:	8f ef       	ldi	r24, 0xFF	; 255
    7a06:	9f ef       	ldi	r25, 0xFF	; 255
    7a08:	af ef       	ldi	r26, 0xFF	; 255
    7a0a:	bf ef       	ldi	r27, 0xFF	; 255
    7a0c:	80 93 9d 45 	sts	0x459D, r24
    7a10:	90 93 9e 45 	sts	0x459E, r25
    7a14:	a0 93 9f 45 	sts	0x459F, r26
    7a18:	b0 93 a0 45 	sts	0x45A0, r27
	    return resp;
	}
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    7a1c:	6c e4       	ldi	r22, 0x4C	; 76
    7a1e:	74 e7       	ldi	r23, 0x74	; 116
    7a20:	8e ed       	ldi	r24, 0xDE	; 222
    7a22:	90 eb       	ldi	r25, 0xB0	; 176
    7a24:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(StartFileLength+strlen(deviceID));		    // record size
    7a28:	0a e8       	ldi	r16, 0x8A	; 138
    7a2a:	19 e3       	ldi	r17, 0x39	; 57
    7a2c:	f8 01       	movw	r30, r16
    7a2e:	01 90       	ld	r0, Z+
    7a30:	00 20       	and	r0, r0
    7a32:	e9 f7       	brne	.-6      	; 0x7a2e <SD_StartLogFile+0x44>
    7a34:	cf 01       	movw	r24, r30
    7a36:	86 5b       	subi	r24, 0xB6	; 182
    7a38:	97 43       	sbci	r25, 0x37	; 55
    7a3a:	a0 e0       	ldi	r26, 0x00	; 0
    7a3c:	b0 e0       	ldi	r27, 0x00	; 0
    7a3e:	bc 01       	movw	r22, r24
    7a40:	cd 01       	movw	r24, r26
    7a42:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    7a46:	81 e0       	ldi	r24, 0x01	; 1
    7a48:	90 e0       	ldi	r25, 0x00	; 0
    7a4a:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	// payload
	SD_Write16(0x0100);				// protocol version
    7a4e:	80 e0       	ldi	r24, 0x00	; 0
    7a50:	91 e0       	ldi	r25, 0x01	; 1
    7a52:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	SD_Write8(0x02);					// time protocol
    7a56:	82 e0       	ldi	r24, 0x02	; 2
    7a58:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    7a5c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    7a60:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit)
    7a64:	67 e4       	ldi	r22, 0x47	; 71
    7a66:	77 e4       	ldi	r23, 0x47	; 71
    7a68:	88 e0       	ldi	r24, 0x08	; 8
    7a6a:	90 e0       	ldi	r25, 0x00	; 0
    7a6c:	0e 94 a5 2b 	call	0x574a	; 0x574a <SD_Write32>
	SD_Write16(0);
    7a70:	80 e0       	ldi	r24, 0x00	; 0
    7a72:	90 e0       	ldi	r25, 0x00	; 0
    7a74:	0e 94 bf 2b 	call	0x577e	; 0x577e <SD_Write16>
	
	SD_WriteString("device_class");
    7a78:	87 e8       	ldi	r24, 0x87	; 135
    7a7a:	90 e2       	ldi	r25, 0x20	; 32
    7a7c:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7a80:	89 e0       	ldi	r24, 0x09	; 9
    7a82:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString(DeviceClass);
    7a86:	84 e9       	ldi	r24, 0x94	; 148
    7a88:	90 e2       	ldi	r25, 0x20	; 32
    7a8a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7a8e:	8a e0       	ldi	r24, 0x0A	; 10
    7a90:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_WriteString("device_id");
    7a94:	8f e9       	ldi	r24, 0x9F	; 159
    7a96:	90 e2       	ldi	r25, 0x20	; 32
    7a98:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7a9c:	89 e0       	ldi	r24, 0x09	; 9
    7a9e:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString(deviceID);                                         
    7aa2:	c8 01       	movw	r24, r16
    7aa4:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7aa8:	8a e0       	ldi	r24, 0x0A	; 10
    7aaa:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_WriteString("firmware_version");
    7aae:	89 ea       	ldi	r24, 0xA9	; 169
    7ab0:	90 e2       	ldi	r25, 0x20	; 32
    7ab2:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7ab6:	89 e0       	ldi	r24, 0x09	; 9
    7ab8:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString(FirmwareVersion);
    7abc:	8a eb       	ldi	r24, 0xBA	; 186
    7abe:	90 e2       	ldi	r25, 0x20	; 32
    7ac0:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7ac4:	8a e0       	ldi	r24, 0x0A	; 10
    7ac6:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_WriteString("hardware_version");
    7aca:	8f eb       	ldi	r24, 0xBF	; 191
    7acc:	90 e2       	ldi	r25, 0x20	; 32
    7ace:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7ad2:	89 e0       	ldi	r24, 0x09	; 9
    7ad4:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString(HardwareVersion);
    7ad8:	80 ed       	ldi	r24, 0xD0	; 208
    7ada:	90 e2       	ldi	r25, 0x20	; 32
    7adc:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x0A);
    7ae0:	8a e0       	ldi	r24, 0x0A	; 10
    7ae2:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_WriteString("channel_specs");
    7ae6:	82 ed       	ldi	r24, 0xD2	; 210
    7ae8:	90 e2       	ldi	r25, 0x20	; 32
    7aea:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_Write8(0x09);
    7aee:	89 e0       	ldi	r24, 0x09	; 9
    7af0:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"bits\", \"scale\": 1},");
    7af4:	80 ee       	ldi	r24, 0xE0	; 224
    7af6:	90 e2       	ldi	r25, 0x20	; 32
    7af8:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_WriteString("\"Respiration\":{\"units\": \"bits\", \"scale\": 1},");
    7afc:	8e e0       	ldi	r24, 0x0E	; 14
    7afe:	91 e2       	ldi	r25, 0x21	; 33
    7b00:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_WriteString("\"EKG\":{\"units\": \"bits\", \"scale\": 1},");
    7b04:	8b e3       	ldi	r24, 0x3B	; 59
    7b06:	91 e2       	ldi	r25, 0x21	; 33
    7b08:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 0.1},");					   // 42
    7b0c:	80 e6       	ldi	r24, 0x60	; 96
    7b0e:	91 e2       	ldi	r25, 0x21	; 33
    7b10:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_WriteString("\"Accel_X\":{\"units\": \"bits\", \"offset\": -1024, \"scale\": 0.004},"); // 61
    7b14:	8b e8       	ldi	r24, 0x8B	; 139
    7b16:	91 e2       	ldi	r25, 0x21	; 33
    7b18:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_WriteString("\"Accel_Y\":{\"units\": \"bits\", \"offset\": -1024, \"scale\": 0.004},"); // 61
    7b1c:	89 ec       	ldi	r24, 0xC9	; 201
    7b1e:	91 e2       	ldi	r25, 0x21	; 33
    7b20:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	SD_WriteString("\"Accel_Z\":{\"units\": \"bits\", \"offset\": -1024, \"scale\": 0.004}}"); // 61
    7b24:	87 e0       	ldi	r24, 0x07	; 7
    7b26:	92 e2       	ldi	r25, 0x22	; 34
    7b28:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <SD_WriteString>
	
	SD_Write8(0x0A);
    7b2c:	8a e0       	ldi	r24, 0x0A	; 10
    7b2e:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_Write8(0x00);
    7b32:	80 e0       	ldi	r24, 0x00	; 0
    7b34:	0e 94 ca 2b 	call	0x5794	; 0x5794 <SD_Write8>
	
	SD_WriteCRC();			// CRC			
    7b38:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_WriteCRC>
	
	f_sync(&Log_File);
    7b3c:	8d ed       	ldi	r24, 0xDD	; 221
    7b3e:	9a e3       	ldi	r25, 0x3A	; 58
    7b40:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	
	return resp;
}
    7b44:	8f 2d       	mov	r24, r15
    7b46:	1f 91       	pop	r17
    7b48:	0f 91       	pop	r16
    7b4a:	ff 90       	pop	r15
    7b4c:	08 95       	ret

00007b4e <__vector_53>:
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
	
}

ISR(SD_Writer_Timer_vect)
{	
    7b4e:	1f 92       	push	r1
    7b50:	0f 92       	push	r0
    7b52:	0f b6       	in	r0, 0x3f	; 63
    7b54:	0f 92       	push	r0
    7b56:	0b b6       	in	r0, 0x3b	; 59
    7b58:	0f 92       	push	r0
    7b5a:	11 24       	eor	r1, r1
    7b5c:	af 92       	push	r10
    7b5e:	bf 92       	push	r11
    7b60:	cf 92       	push	r12
    7b62:	df 92       	push	r13
    7b64:	ef 92       	push	r14
    7b66:	ff 92       	push	r15
    7b68:	0f 93       	push	r16
    7b6a:	1f 93       	push	r17
    7b6c:	2f 93       	push	r18
    7b6e:	3f 93       	push	r19
    7b70:	4f 93       	push	r20
    7b72:	5f 93       	push	r21
    7b74:	6f 93       	push	r22
    7b76:	7f 93       	push	r23
    7b78:	8f 93       	push	r24
    7b7a:	9f 93       	push	r25
    7b7c:	af 93       	push	r26
    7b7e:	bf 93       	push	r27
    7b80:	ef 93       	push	r30
    7b82:	ff 93       	push	r31
    7b84:	df 93       	push	r29
    7b86:	cf 93       	push	r28
    7b88:	0f 92       	push	r0
    7b8a:	0f 92       	push	r0
    7b8c:	cd b7       	in	r28, 0x3d	; 61
    7b8e:	de b7       	in	r29, 0x3e	; 62
		goto sdInterrupt;
	}
	
    if(okToFillUploadFileBuffer){
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    7b90:	6e 01       	movw	r12, r28
    7b92:	08 94       	sec
    7b94:	c1 1c       	adc	r12, r1
    7b96:	d1 1c       	adc	r13, r1
    7b98:	b0 e7       	ldi	r27, 0x70	; 112
    7b9a:	ab 2e       	mov	r10, r27
    7b9c:	b1 e0       	ldi	r27, 0x01	; 1
    7b9e:	bb 2e       	mov	r11, r27
ISR(SD_Writer_Timer_vect)
{	
	
sdInterrupt:
	
	if(okToSendAccelBuffer1 && recording){
    7ba0:	80 91 a6 27 	lds	r24, 0x27A6
    7ba4:	88 23       	and	r24, r24
    7ba6:	51 f0       	breq	.+20     	; 0x7bbc <__vector_53+0x6e>
    7ba8:	80 91 69 27 	lds	r24, 0x2769
    7bac:	88 23       	and	r24, r24
    7bae:	31 f0       	breq	.+12     	; 0x7bbc <__vector_53+0x6e>
		SD_WriteAccelBuffer(1);
    7bb0:	81 e0       	ldi	r24, 0x01	; 1
    7bb2:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <SD_WriteAccelBuffer>
		okToSendAccelBuffer1 = false;
    7bb6:	10 92 a6 27 	sts	0x27A6, r1
    7bba:	f2 cf       	rjmp	.-28     	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	} else if (okToSendAccelBuffer2 && recording){
    7bbc:	80 91 a7 27 	lds	r24, 0x27A7
    7bc0:	88 23       	and	r24, r24
    7bc2:	51 f0       	breq	.+20     	; 0x7bd8 <__vector_53+0x8a>
    7bc4:	80 91 69 27 	lds	r24, 0x2769
    7bc8:	88 23       	and	r24, r24
    7bca:	31 f0       	breq	.+12     	; 0x7bd8 <__vector_53+0x8a>
		SD_WriteAccelBuffer(2);
    7bcc:	82 e0       	ldi	r24, 0x02	; 2
    7bce:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <SD_WriteAccelBuffer>
		okToSendAccelBuffer2 = false;
    7bd2:	10 92 a7 27 	sts	0x27A7, r1
    7bd6:	e4 cf       	rjmp	.-56     	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToSendTemperatureBuffer1 && recording){
    7bd8:	80 91 ae 27 	lds	r24, 0x27AE
    7bdc:	88 23       	and	r24, r24
    7bde:	51 f0       	breq	.+20     	; 0x7bf4 <__vector_53+0xa6>
    7be0:	80 91 69 27 	lds	r24, 0x2769
    7be4:	88 23       	and	r24, r24
    7be6:	31 f0       	breq	.+12     	; 0x7bf4 <__vector_53+0xa6>
		SD_WriteTemperatureBuffer(1);
    7be8:	81 e0       	ldi	r24, 0x01	; 1
    7bea:	0e 94 b4 39 	call	0x7368	; 0x7368 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    7bee:	10 92 ae 27 	sts	0x27AE, r1
    7bf2:	d6 cf       	rjmp	.-84     	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	} else if (okToSendTemperatureBuffer2 && recording){
    7bf4:	80 91 af 27 	lds	r24, 0x27AF
    7bf8:	88 23       	and	r24, r24
    7bfa:	51 f0       	breq	.+20     	; 0x7c10 <__vector_53+0xc2>
    7bfc:	80 91 69 27 	lds	r24, 0x2769
    7c00:	88 23       	and	r24, r24
    7c02:	31 f0       	breq	.+12     	; 0x7c10 <__vector_53+0xc2>
		SD_WriteTemperatureBuffer(2);
    7c04:	82 e0       	ldi	r24, 0x02	; 2
    7c06:	0e 94 b4 39 	call	0x7368	; 0x7368 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    7c0a:	10 92 af 27 	sts	0x27AF, r1
    7c0e:	c8 cf       	rjmp	.-112    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToSendHumidityBuffer1 && recording){
    7c10:	80 91 b6 27 	lds	r24, 0x27B6
    7c14:	88 23       	and	r24, r24
    7c16:	51 f0       	breq	.+20     	; 0x7c2c <__vector_53+0xde>
    7c18:	80 91 69 27 	lds	r24, 0x2769
    7c1c:	88 23       	and	r24, r24
    7c1e:	31 f0       	breq	.+12     	; 0x7c2c <__vector_53+0xde>
		SD_WriteHumidityBuffer(1);
    7c20:	81 e0       	ldi	r24, 0x01	; 1
    7c22:	0e 94 41 39 	call	0x7282	; 0x7282 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    7c26:	10 92 b6 27 	sts	0x27B6, r1
    7c2a:	ba cf       	rjmp	.-140    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	} else if (okToSendHumidityBuffer2 && recording){
    7c2c:	80 91 b7 27 	lds	r24, 0x27B7
    7c30:	88 23       	and	r24, r24
    7c32:	51 f0       	breq	.+20     	; 0x7c48 <__vector_53+0xfa>
    7c34:	80 91 69 27 	lds	r24, 0x2769
    7c38:	88 23       	and	r24, r24
    7c3a:	31 f0       	breq	.+12     	; 0x7c48 <__vector_53+0xfa>
		SD_WriteHumidityBuffer(2);
    7c3c:	82 e0       	ldi	r24, 0x02	; 2
    7c3e:	0e 94 41 39 	call	0x7282	; 0x7282 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    7c42:	10 92 b7 27 	sts	0x27B7, r1
    7c46:	ac cf       	rjmp	.-168    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToSendRespirationBuffer1 && recording){
    7c48:	80 91 aa 27 	lds	r24, 0x27AA
    7c4c:	88 23       	and	r24, r24
    7c4e:	51 f0       	breq	.+20     	; 0x7c64 <__vector_53+0x116>
    7c50:	80 91 69 27 	lds	r24, 0x2769
    7c54:	88 23       	and	r24, r24
    7c56:	31 f0       	breq	.+12     	; 0x7c64 <__vector_53+0x116>
		SD_WriteRespirationBuffer(1);
    7c58:	81 e0       	ldi	r24, 0x01	; 1
    7c5a:	0e 94 ce 38 	call	0x719c	; 0x719c <SD_WriteRespirationBuffer>
		okToSendRespirationBuffer1 = false;
    7c5e:	10 92 aa 27 	sts	0x27AA, r1
    7c62:	9e cf       	rjmp	.-196    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	} else if (okToSendRespirationBuffer2 && recording){
    7c64:	80 91 ab 27 	lds	r24, 0x27AB
    7c68:	88 23       	and	r24, r24
    7c6a:	51 f0       	breq	.+20     	; 0x7c80 <__vector_53+0x132>
    7c6c:	80 91 69 27 	lds	r24, 0x2769
    7c70:	88 23       	and	r24, r24
    7c72:	31 f0       	breq	.+12     	; 0x7c80 <__vector_53+0x132>
		SD_WriteRespirationBuffer(2);
    7c74:	82 e0       	ldi	r24, 0x02	; 2
    7c76:	0e 94 ce 38 	call	0x719c	; 0x719c <SD_WriteRespirationBuffer>
		okToSendRespirationBuffer2 = false;
    7c7a:	10 92 ab 27 	sts	0x27AB, r1
    7c7e:	90 cf       	rjmp	.-224    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToSendEKGBuffer1 && recording){
    7c80:	80 91 b2 27 	lds	r24, 0x27B2
    7c84:	88 23       	and	r24, r24
    7c86:	51 f0       	breq	.+20     	; 0x7c9c <__vector_53+0x14e>
    7c88:	80 91 69 27 	lds	r24, 0x2769
    7c8c:	88 23       	and	r24, r24
    7c8e:	31 f0       	breq	.+12     	; 0x7c9c <__vector_53+0x14e>
		SD_WriteEKGBuffer(1);
    7c90:	81 e0       	ldi	r24, 0x01	; 1
    7c92:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <SD_WriteEKGBuffer>
		okToSendEKGBuffer1 = false;
    7c96:	10 92 b2 27 	sts	0x27B2, r1
    7c9a:	82 cf       	rjmp	.-252    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	} else if (okToSendEKGBuffer2 && recording){
    7c9c:	80 91 b3 27 	lds	r24, 0x27B3
    7ca0:	88 23       	and	r24, r24
    7ca2:	51 f0       	breq	.+20     	; 0x7cb8 <__vector_53+0x16a>
    7ca4:	80 91 69 27 	lds	r24, 0x2769
    7ca8:	88 23       	and	r24, r24
    7caa:	31 f0       	breq	.+12     	; 0x7cb8 <__vector_53+0x16a>
		SD_WriteEKGBuffer(2);
    7cac:	82 e0       	ldi	r24, 0x02	; 2
    7cae:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <SD_WriteEKGBuffer>
		okToSendEKGBuffer2 = false;
    7cb2:	10 92 b3 27 	sts	0x27B3, r1
    7cb6:	74 cf       	rjmp	.-280    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToSendRTCBlock && recording){
    7cb8:	80 91 ba 27 	lds	r24, 0x27BA
    7cbc:	88 23       	and	r24, r24
    7cbe:	99 f0       	breq	.+38     	; 0x7ce6 <__vector_53+0x198>
    7cc0:	80 91 69 27 	lds	r24, 0x2769
    7cc4:	88 23       	and	r24, r24
    7cc6:	79 f0       	breq	.+30     	; 0x7ce6 <__vector_53+0x198>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    7cc8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    7ccc:	20 91 9c 27 	lds	r18, 0x279C
    7cd0:	30 91 9d 27 	lds	r19, 0x279D
    7cd4:	40 91 9e 27 	lds	r20, 0x279E
    7cd8:	50 91 9f 27 	lds	r21, 0x279F
    7cdc:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <SD_WriteRTCBlock>
		okToSendRTCBlock = false;
    7ce0:	10 92 ba 27 	sts	0x27BA, r1
    7ce4:	5d cf       	rjmp	.-326    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToOpenLogFile && (percentDiskUsed < 950)){
    7ce6:	80 91 df 27 	lds	r24, 0x27DF
    7cea:	88 23       	and	r24, r24
    7cec:	09 f4       	brne	.+2      	; 0x7cf0 <__vector_53+0x1a2>
    7cee:	55 c0       	rjmp	.+170    	; 0x7d9a <__vector_53+0x24c>
    7cf0:	80 91 ef 27 	lds	r24, 0x27EF
    7cf4:	90 91 f0 27 	lds	r25, 0x27F0
    7cf8:	a0 91 f1 27 	lds	r26, 0x27F1
    7cfc:	b0 91 f2 27 	lds	r27, 0x27F2
    7d00:	86 5b       	subi	r24, 0xB6	; 182
    7d02:	93 40       	sbci	r25, 0x03	; 3
    7d04:	a0 40       	sbci	r26, 0x00	; 0
    7d06:	b0 40       	sbci	r27, 0x00	; 0
    7d08:	08 f0       	brcs	.+2      	; 0x7d0c <__vector_53+0x1be>
    7d0a:	47 c0       	rjmp	.+142    	; 0x7d9a <__vector_53+0x24c>
		if(SD_StartLogFile(UNIX_Time) == FR_OK){  // open file
    7d0c:	60 91 9c 27 	lds	r22, 0x279C
    7d10:	70 91 9d 27 	lds	r23, 0x279D
    7d14:	80 91 9e 27 	lds	r24, 0x279E
    7d18:	90 91 9f 27 	lds	r25, 0x279F
    7d1c:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <SD_StartLogFile>
    7d20:	88 23       	and	r24, r24
    7d22:	c9 f5       	brne	.+114    	; 0x7d96 <__vector_53+0x248>
    7d24:	88 ee       	ldi	r24, 0xE8	; 232
    7d26:	93 e0       	ldi	r25, 0x03	; 3
    7d28:	f5 01       	movw	r30, r10
    7d2a:	31 97       	sbiw	r30, 0x01	; 1
    7d2c:	f1 f7       	brne	.-4      	; 0x7d2a <__vector_53+0x1dc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d2e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d30:	d9 f7       	brne	.-10     	; 0x7d28 <__vector_53+0x1da>
			_delay_ms(100);
			
            timeToStopRecording = UNIX_Time + fileLengthInSeconds;
    7d32:	80 91 9c 27 	lds	r24, 0x279C
    7d36:	90 91 9d 27 	lds	r25, 0x279D
    7d3a:	a0 91 9e 27 	lds	r26, 0x279E
    7d3e:	b0 91 9f 27 	lds	r27, 0x279F
    7d42:	8c 57       	subi	r24, 0x7C	; 124
    7d44:	9c 4f       	sbci	r25, 0xFC	; 252
    7d46:	af 4f       	sbci	r26, 0xFF	; 255
    7d48:	bf 4f       	sbci	r27, 0xFF	; 255
    7d4a:	80 93 e3 27 	sts	0x27E3, r24
    7d4e:	90 93 e4 27 	sts	0x27E4, r25
    7d52:	a0 93 e5 27 	sts	0x27E5, r26
    7d56:	b0 93 e6 27 	sts	0x27E6, r27
    7d5a:	84 58       	subi	r24, 0x84	; 132
    7d5c:	93 40       	sbci	r25, 0x03	; 3
    7d5e:	a0 40       	sbci	r26, 0x00	; 0
    7d60:	b0 40       	sbci	r27, 0x00	; 0
			
		    timeRecordingStarted = UNIX_Time;
    7d62:	80 93 92 27 	sts	0x2792, r24
    7d66:	90 93 93 27 	sts	0x2793, r25
    7d6a:	a0 93 94 27 	sts	0x2794, r26
    7d6e:	b0 93 95 27 	sts	0x2795, r27
		    SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    7d72:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_Get32BitTimer>
    7d76:	20 91 9c 27 	lds	r18, 0x279C
    7d7a:	30 91 9d 27 	lds	r19, 0x279D
    7d7e:	40 91 9e 27 	lds	r20, 0x279E
    7d82:	50 91 9f 27 	lds	r21, 0x279F
    7d86:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <SD_WriteRTCBlock>
			
		    recording = true;
    7d8a:	81 e0       	ldi	r24, 0x01	; 1
    7d8c:	80 93 69 27 	sts	0x2769, r24
		    okToOpenLogFile = false;
    7d90:	10 92 df 27 	sts	0x27DF, r1
    7d94:	02 c0       	rjmp	.+4      	; 0x7d9a <__vector_53+0x24c>
		} else {
		    SD_Init();
    7d96:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Init>
		}
	}
	
	if(okToCloseLogFile){
    7d9a:	80 91 e1 27 	lds	r24, 0x27E1
    7d9e:	88 23       	and	r24, r24
    7da0:	29 f0       	breq	.+10     	; 0x7dac <__vector_53+0x25e>
		SD_Close();
    7da2:	0e 94 31 2b 	call	0x5662	; 0x5662 <SD_Close>
		okToCloseLogFile = false;
    7da6:	10 92 e1 27 	sts	0x27E1, r1
    7daa:	fa ce       	rjmp	.-524    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToOpenDirectory){
    7dac:	80 91 d3 27 	lds	r24, 0x27D3
    7db0:	88 23       	and	r24, r24
    7db2:	41 f0       	breq	.+16     	; 0x7dc4 <__vector_53+0x276>
        f_opendir(&dir, "/");
    7db4:	8d ef       	ldi	r24, 0xFD	; 253
    7db6:	9c e3       	ldi	r25, 0x3C	; 60
    7db8:	65 e4       	ldi	r22, 0x45	; 69
    7dba:	72 e2       	ldi	r23, 0x22	; 34
    7dbc:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <f_opendir>
        okToOpenDirectory = false;
    7dc0:	10 92 d3 27 	sts	0x27D3, r1
	}
	
	if(okToGrabNextFileName){
    7dc4:	80 91 d4 27 	lds	r24, 0x27D4
    7dc8:	88 23       	and	r24, r24
    7dca:	d9 f0       	breq	.+54     	; 0x7e02 <__vector_53+0x2b4>
        availableFileName[0] = 0;
    7dcc:	10 92 a1 45 	sts	0x45A1, r1
        if((f_readdir(&dir, &fno) == FR_OK)){
    7dd0:	8d ef       	ldi	r24, 0xFD	; 253
    7dd2:	9c e3       	ldi	r25, 0x3C	; 60
    7dd4:	68 eb       	ldi	r22, 0xB8	; 184
    7dd6:	73 e3       	ldi	r23, 0x33	; 51
    7dd8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <f_readdir>
    7ddc:	88 23       	and	r24, r24
    7dde:	69 f4       	brne	.+26     	; 0x7dfa <__vector_53+0x2ac>
            if(fno.fname[0] != 0){
    7de0:	80 91 c1 33 	lds	r24, 0x33C1
    7de4:	88 23       	and	r24, r24
    7de6:	31 f0       	breq	.+12     	; 0x7df4 <__vector_53+0x2a6>
                strcpy(availableFileName,fno.fname);
    7de8:	81 ea       	ldi	r24, 0xA1	; 161
    7dea:	95 e4       	ldi	r25, 0x45	; 69
    7dec:	61 ec       	ldi	r22, 0xC1	; 193
    7dee:	73 e3       	ldi	r23, 0x33	; 51
    7df0:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
	        }
	        okToGrabNextFileName = false;
    7df4:	10 92 d4 27 	sts	0x27D4, r1
    7df8:	04 c0       	rjmp	.+8      	; 0x7e02 <__vector_53+0x2b4>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    7dfa:	80 91 a8 06 	lds	r24, 0x06A8
    7dfe:	84 ff       	sbrs	r24, 4
    7e00:	be c0       	rjmp	.+380    	; 0x7f7e <__vector_53+0x430>
            SD_Init();
            f_opendir(&dir, "/");
        }
	}
	
	if(okToOpenFileToUpload){
    7e02:	80 91 d7 27 	lds	r24, 0x27D7
    7e06:	88 23       	and	r24, r24
    7e08:	99 f1       	breq	.+102    	; 0x7e70 <__vector_53+0x322>
		f_stat(fileToUpload,&fno);
    7e0a:	8a e7       	ldi	r24, 0x7A	; 122
    7e0c:	90 e3       	ldi	r25, 0x30	; 48
    7e0e:	68 eb       	ldi	r22, 0xB8	; 184
    7e10:	73 e3       	ldi	r23, 0x33	; 51
    7e12:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <f_stat>
		uploadFileSize = fno.fsize;
    7e16:	80 91 b8 33 	lds	r24, 0x33B8
    7e1a:	90 91 b9 33 	lds	r25, 0x33B9
    7e1e:	a0 91 ba 33 	lds	r26, 0x33BA
    7e22:	b0 91 bb 33 	lds	r27, 0x33BB
    7e26:	80 93 c4 27 	sts	0x27C4, r24
    7e2a:	90 93 c5 27 	sts	0x27C5, r25
    7e2e:	a0 93 c6 27 	sts	0x27C6, r26
    7e32:	b0 93 c7 27 	sts	0x27C7, r27
		
		if(f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_EXISTING) == FR_OK){
    7e36:	83 e1       	ldi	r24, 0x13	; 19
    7e38:	9d e3       	ldi	r25, 0x3D	; 61
    7e3a:	6a e7       	ldi	r22, 0x7A	; 122
    7e3c:	70 e3       	ldi	r23, 0x30	; 48
    7e3e:	43 e0       	ldi	r20, 0x03	; 3
    7e40:	0e 94 82 16 	call	0x2d04	; 0x2d04 <f_open>
    7e44:	88 23       	and	r24, r24
    7e46:	21 f4       	brne	.+8      	; 0x7e50 <__vector_53+0x302>
			fileExists = true;
    7e48:	81 e0       	ldi	r24, 0x01	; 1
    7e4a:	80 93 dd 27 	sts	0x27DD, r24
    7e4e:	02 c0       	rjmp	.+4      	; 0x7e54 <__vector_53+0x306>
		} else {
			fileExists = false;
    7e50:	10 92 dd 27 	sts	0x27DD, r1
		}
		f_lseek(&Upload_File, 0);
    7e54:	83 e1       	ldi	r24, 0x13	; 19
    7e56:	9d e3       	ldi	r25, 0x3D	; 61
    7e58:	40 e0       	ldi	r20, 0x00	; 0
    7e5a:	50 e0       	ldi	r21, 0x00	; 0
    7e5c:	60 e0       	ldi	r22, 0x00	; 0
    7e5e:	70 e0       	ldi	r23, 0x00	; 0
    7e60:	0e 94 b0 1c 	call	0x3960	; 0x3960 <f_lseek>
		uploadFileOpened = true;
    7e64:	81 e0       	ldi	r24, 0x01	; 1
    7e66:	80 93 d8 27 	sts	0x27D8, r24
		okToOpenFileToUpload = false;
    7e6a:	10 92 d7 27 	sts	0x27D7, r1
    7e6e:	98 ce       	rjmp	.-720    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
    if(okToFillUploadFileBuffer){
    7e70:	80 91 d9 27 	lds	r24, 0x27D9
    7e74:	88 23       	and	r24, r24
    7e76:	79 f0       	breq	.+30     	; 0x7e96 <__vector_53+0x348>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    7e78:	83 e1       	ldi	r24, 0x13	; 19
    7e7a:	9d e3       	ldi	r25, 0x3D	; 61
    7e7c:	62 e9       	ldi	r22, 0x92	; 146
    7e7e:	7c e2       	ldi	r23, 0x2C	; 44
    7e80:	48 ee       	ldi	r20, 0xE8	; 232
    7e82:	53 e0       	ldi	r21, 0x03	; 3
    7e84:	96 01       	movw	r18, r12
    7e86:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <f_read>
        okToFillUploadFileBuffer = false;
    7e8a:	10 92 d9 27 	sts	0x27D9, r1
        uploadFileBufferFull = true;
    7e8e:	81 e0       	ldi	r24, 0x01	; 1
    7e90:	80 93 da 27 	sts	0x27DA, r24
    7e94:	85 ce       	rjmp	.-758    	; 0x7ba0 <__vector_53+0x52>
        goto sdInterrupt;
    }
	
	
	if(okToCloseUploadFile){
    7e96:	80 91 db 27 	lds	r24, 0x27DB
    7e9a:	88 23       	and	r24, r24
    7e9c:	89 f0       	breq	.+34     	; 0x7ec0 <__vector_53+0x372>
	    f_sync(&Upload_File);
    7e9e:	83 e1       	ldi	r24, 0x13	; 19
    7ea0:	9d e3       	ldi	r25, 0x3D	; 61
    7ea2:	0e 94 2c 1c 	call	0x3858	; 0x3858 <f_sync>
	    f_close(&Upload_File);
    7ea6:	83 e1       	ldi	r24, 0x13	; 19
    7ea8:	9d e3       	ldi	r25, 0x3D	; 61
    7eaa:	0e 94 a4 1c 	call	0x3948	; 0x3948 <f_close>
	    strcpy(fileToUpload,"");
    7eae:	8a e7       	ldi	r24, 0x7A	; 122
    7eb0:	90 e3       	ldi	r25, 0x30	; 48
    7eb2:	69 e7       	ldi	r22, 0x79	; 121
    7eb4:	70 e2       	ldi	r23, 0x20	; 32
    7eb6:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
		okToCloseUploadFile = false;
    7eba:	10 92 db 27 	sts	0x27DB, r1
    7ebe:	70 ce       	rjmp	.-800    	; 0x7ba0 <__vector_53+0x52>
		goto sdInterrupt;
	}
	
	if(okToGetRemainingSpace){
    7ec0:	80 91 09 3a 	lds	r24, 0x3A09
    7ec4:	88 23       	and	r24, r24
    7ec6:	09 f4       	brne	.+2      	; 0x7eca <__vector_53+0x37c>
    7ec8:	47 c0       	rjmp	.+142    	; 0x7f58 <__vector_53+0x40a>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    7eca:	87 e4       	ldi	r24, 0x47	; 71
    7ecc:	92 e2       	ldi	r25, 0x22	; 34
    7ece:	67 ee       	ldi	r22, 0xE7	; 231
    7ed0:	77 e2       	ldi	r23, 0x27	; 39
    7ed2:	4e ec       	ldi	r20, 0xCE	; 206
    7ed4:	53 e3       	ldi	r21, 0x33	; 51
    7ed6:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <f_getfree>
    7eda:	88 23       	and	r24, r24
    7edc:	41 f0       	breq	.+16     	; 0x7eee <__vector_53+0x3a0>
			spaceRemainingOnDisk = 0;
    7ede:	10 92 e7 27 	sts	0x27E7, r1
    7ee2:	10 92 e8 27 	sts	0x27E8, r1
    7ee6:	10 92 e9 27 	sts	0x27E9, r1
    7eea:	10 92 ea 27 	sts	0x27EA, r1
	    }
	    totalDiskSpace = fs->max_clust;
    7eee:	e0 91 ce 33 	lds	r30, 0x33CE
    7ef2:	f0 91 cf 33 	lds	r31, 0x33CF
    7ef6:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7ef8:	f3 8c       	ldd	r15, Z+27	; 0x1b
    7efa:	04 8d       	ldd	r16, Z+28	; 0x1c
    7efc:	15 8d       	ldd	r17, Z+29	; 0x1d
    7efe:	e0 92 eb 27 	sts	0x27EB, r14
    7f02:	f0 92 ec 27 	sts	0x27EC, r15
    7f06:	00 93 ed 27 	sts	0x27ED, r16
    7f0a:	10 93 ee 27 	sts	0x27EE, r17
		
        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
    7f0e:	80 91 e7 27 	lds	r24, 0x27E7
    7f12:	90 91 e8 27 	lds	r25, 0x27E8
    7f16:	a0 91 e9 27 	lds	r26, 0x27E9
    7f1a:	b0 91 ea 27 	lds	r27, 0x27EA
    7f1e:	a8 01       	movw	r20, r16
    7f20:	97 01       	movw	r18, r14
    7f22:	28 1b       	sub	r18, r24
    7f24:	39 0b       	sbc	r19, r25
    7f26:	4a 0b       	sbc	r20, r26
    7f28:	5b 0b       	sbc	r21, r27
    7f2a:	ca 01       	movw	r24, r20
    7f2c:	b9 01       	movw	r22, r18
    7f2e:	28 ee       	ldi	r18, 0xE8	; 232
    7f30:	33 e0       	ldi	r19, 0x03	; 3
    7f32:	40 e0       	ldi	r20, 0x00	; 0
    7f34:	50 e0       	ldi	r21, 0x00	; 0
    7f36:	0e 94 1e 44 	call	0x883c	; 0x883c <__mulsi3>
	    percentDiskUsed /= totalDiskSpace;
    7f3a:	a8 01       	movw	r20, r16
    7f3c:	97 01       	movw	r18, r14
    7f3e:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    7f42:	20 93 ef 27 	sts	0x27EF, r18
    7f46:	30 93 f0 27 	sts	0x27F0, r19
    7f4a:	40 93 f1 27 	sts	0x27F1, r20
    7f4e:	50 93 f2 27 	sts	0x27F2, r21
		
	    okToGetRemainingSpace = false;
    7f52:	10 92 09 3a 	sts	0x3A09, r1
    7f56:	24 ce       	rjmp	.-952    	; 0x7ba0 <__vector_53+0x52>
	    goto sdInterrupt;
	}
	
	if(okToEraseFile){
    7f58:	80 91 dc 27 	lds	r24, 0x27DC
    7f5c:	88 23       	and	r24, r24
    7f5e:	c1 f0       	breq	.+48     	; 0x7f90 <__vector_53+0x442>
        eraseFileReturn = f_unlink(fileToErase);
    7f60:	83 e3       	ldi	r24, 0x33	; 51
    7f62:	9f e3       	ldi	r25, 0x3F	; 63
    7f64:	0e 94 7e 21 	call	0x42fc	; 0x42fc <f_unlink>
    7f68:	80 93 0a 3a 	sts	0x3A0A, r24
        strcpy(fileToUpload,"");
    7f6c:	8a e7       	ldi	r24, 0x7A	; 122
    7f6e:	90 e3       	ldi	r25, 0x30	; 48
    7f70:	69 e7       	ldi	r22, 0x79	; 121
    7f72:	70 e2       	ldi	r23, 0x20	; 32
    7f74:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
        okToEraseFile = false;
    7f78:	10 92 dc 27 	sts	0x27DC, r1
    7f7c:	11 ce       	rjmp	.-990    	; 0x7ba0 <__vector_53+0x52>
            if(fno.fname[0] != 0){
                strcpy(availableFileName,fno.fname);
	        }
	        okToGrabNextFileName = false;
        } else if(SD_Inserted()){
            SD_Init();
    7f7e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Init>
            f_opendir(&dir, "/");
    7f82:	8d ef       	ldi	r24, 0xFD	; 253
    7f84:	9c e3       	ldi	r25, 0x3C	; 60
    7f86:	65 e4       	ldi	r22, 0x45	; 69
    7f88:	72 e2       	ldi	r23, 0x22	; 34
    7f8a:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <f_opendir>
    7f8e:	39 cf       	rjmp	.-398    	; 0x7e02 <__vector_53+0x2b4>
        eraseFileReturn = f_unlink(fileToErase);
        strcpy(fileToUpload,"");
        okToEraseFile = false;
	    goto sdInterrupt;
	}
}
    7f90:	0f 90       	pop	r0
    7f92:	0f 90       	pop	r0
    7f94:	cf 91       	pop	r28
    7f96:	df 91       	pop	r29
    7f98:	ff 91       	pop	r31
    7f9a:	ef 91       	pop	r30
    7f9c:	bf 91       	pop	r27
    7f9e:	af 91       	pop	r26
    7fa0:	9f 91       	pop	r25
    7fa2:	8f 91       	pop	r24
    7fa4:	7f 91       	pop	r23
    7fa6:	6f 91       	pop	r22
    7fa8:	5f 91       	pop	r21
    7faa:	4f 91       	pop	r20
    7fac:	3f 91       	pop	r19
    7fae:	2f 91       	pop	r18
    7fb0:	1f 91       	pop	r17
    7fb2:	0f 91       	pop	r16
    7fb4:	ff 90       	pop	r15
    7fb6:	ef 90       	pop	r14
    7fb8:	df 90       	pop	r13
    7fba:	cf 90       	pop	r12
    7fbc:	bf 90       	pop	r11
    7fbe:	af 90       	pop	r10
    7fc0:	0f 90       	pop	r0
    7fc2:	0b be       	out	0x3b, r0	; 59
    7fc4:	0f 90       	pop	r0
    7fc6:	0f be       	out	0x3f, r0	; 63
    7fc8:	0f 90       	pop	r0
    7fca:	1f 90       	pop	r1
    7fcc:	18 95       	reti

00007fce <SD_Read_config_file>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

void SD_Read_config_file(void){
    7fce:	af 92       	push	r10
    7fd0:	bf 92       	push	r11
    7fd2:	cf 92       	push	r12
    7fd4:	df 92       	push	r13
    7fd6:	ef 92       	push	r14
    7fd8:	ff 92       	push	r15
    7fda:	0f 93       	push	r16
    7fdc:	1f 93       	push	r17
    7fde:	df 93       	push	r29
    7fe0:	cf 93       	push	r28
    7fe2:	cd b7       	in	r28, 0x3d	; 61
    7fe4:	de b7       	in	r29, 0x3e	; 62
    7fe6:	e2 97       	sbiw	r28, 0x32	; 50
    7fe8:	cd bf       	out	0x3d, r28	; 61
    7fea:	de bf       	out	0x3e, r29	; 62
	char temp [50];
	
	SD_Open("/config.txt");
    7fec:	8a e4       	ldi	r24, 0x4A	; 74
    7fee:	92 e2       	ldi	r25, 0x22	; 34
    7ff0:	0e 94 c6 3c 	call	0x798c	; 0x798c <SD_Open>
    f_lseek(&Log_File, 0);
    7ff4:	8d ed       	ldi	r24, 0xDD	; 221
    7ff6:	9a e3       	ldi	r25, 0x3A	; 58
    7ff8:	40 e0       	ldi	r20, 0x00	; 0
    7ffa:	50 e0       	ldi	r21, 0x00	; 0
    7ffc:	60 e0       	ldi	r22, 0x00	; 0
    7ffe:	70 e0       	ldi	r23, 0x00	; 0
    8000:	0e 94 b0 1c 	call	0x3960	; 0x3960 <f_lseek>
	
	while(true){
        f_gets(temp,50,&Log_File);
    8004:	8e 01       	movw	r16, r28
    8006:	0f 5f       	subi	r16, 0xFF	; 255
    8008:	1f 4f       	sbci	r17, 0xFF	; 255
            } else if(strstr(temp,"recordFast") != 0){
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
    800a:	2e ef       	ldi	r18, 0xFE	; 254
    800c:	e2 2e       	mov	r14, r18
    800e:	22 e2       	ldi	r18, 0x22	; 34
    8010:	f2 2e       	mov	r15, r18
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
    8012:	92 ee       	ldi	r25, 0xE2	; 226
    8014:	c9 2e       	mov	r12, r25
    8016:	95 e4       	ldi	r25, 0x45	; 69
    8018:	d9 2e       	mov	r13, r25
				strtok(temp,"=");
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
    801a:	82 e9       	ldi	r24, 0x92	; 146
    801c:	a8 2e       	mov	r10, r24
    801e:	84 e3       	ldi	r24, 0x34	; 52
    8020:	b8 2e       	mov	r11, r24
	
	SD_Open("/config.txt");
    f_lseek(&Log_File, 0);
	
	while(true){
        f_gets(temp,50,&Log_File);
    8022:	c8 01       	movw	r24, r16
    8024:	62 e3       	ldi	r22, 0x32	; 50
    8026:	70 e0       	ldi	r23, 0x00	; 0
    8028:	4d ed       	ldi	r20, 0xDD	; 221
    802a:	5a e3       	ldi	r21, 0x3A	; 58
    802c:	0e 94 99 2a 	call	0x5532	; 0x5532 <f_gets>
        if(temp[0] != 0){
    8030:	89 81       	ldd	r24, Y+1	; 0x01
    8032:	88 23       	and	r24, r24
    8034:	09 f4       	brne	.+2      	; 0x8038 <SD_Read_config_file+0x6a>
    8036:	96 c1       	rjmp	.+812    	; 0x8364 <SD_Read_config_file+0x396>
            if(strstr(temp,"ssid") != 0){
    8038:	c8 01       	movw	r24, r16
    803a:	66 e5       	ldi	r22, 0x56	; 86
    803c:	72 e2       	ldi	r23, 0x22	; 34
    803e:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    8042:	00 97       	sbiw	r24, 0x00	; 0
    8044:	a1 f0       	breq	.+40     	; 0x806e <SD_Read_config_file+0xa0>
                strtok(temp,"=");
    8046:	c8 01       	movw	r24, r16
    8048:	6b e5       	ldi	r22, 0x5B	; 91
    804a:	72 e2       	ldi	r23, 0x22	; 34
    804c:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(ssid,strtok(NULL,"="));
    8050:	80 e0       	ldi	r24, 0x00	; 0
    8052:	90 e0       	ldi	r25, 0x00	; 0
    8054:	6b e5       	ldi	r22, 0x5B	; 91
    8056:	72 e2       	ldi	r23, 0x22	; 34
    8058:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    805c:	bc 01       	movw	r22, r24
    805e:	8e e5       	ldi	r24, 0x5E	; 94
    8060:	9c e2       	ldi	r25, 0x2C	; 44
    8062:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
                ssidRead = true;
    8066:	81 e0       	ldi	r24, 0x01	; 1
    8068:	80 93 a4 27 	sts	0x27A4, r24
    806c:	da cf       	rjmp	.-76     	; 0x8022 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"phrase") != 0){
    806e:	c8 01       	movw	r24, r16
    8070:	6d e5       	ldi	r22, 0x5D	; 93
    8072:	72 e2       	ldi	r23, 0x22	; 34
    8074:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    8078:	00 97       	sbiw	r24, 0x00	; 0
    807a:	a1 f0       	breq	.+40     	; 0x80a4 <SD_Read_config_file+0xd6>
                strtok(temp,"=");
    807c:	c8 01       	movw	r24, r16
    807e:	6b e5       	ldi	r22, 0x5B	; 91
    8080:	72 e2       	ldi	r23, 0x22	; 34
    8082:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(phrase,strtok(NULL,"="));
    8086:	80 e0       	ldi	r24, 0x00	; 0
    8088:	90 e0       	ldi	r25, 0x00	; 0
    808a:	6b e5       	ldi	r22, 0x5B	; 91
    808c:	72 e2       	ldi	r23, 0x22	; 34
    808e:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    8092:	bc 01       	movw	r22, r24
    8094:	8d e0       	ldi	r24, 0x0D	; 13
    8096:	9a e3       	ldi	r25, 0x3A	; 58
    8098:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
                phraseRead = true;
    809c:	81 e0       	ldi	r24, 0x01	; 1
    809e:	80 93 a2 27 	sts	0x27A2, r24
    80a2:	bf cf       	rjmp	.-130    	; 0x8022 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"key") != 0){
    80a4:	c8 01       	movw	r24, r16
    80a6:	64 e6       	ldi	r22, 0x64	; 100
    80a8:	72 e2       	ldi	r23, 0x22	; 34
    80aa:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    80ae:	00 97       	sbiw	r24, 0x00	; 0
    80b0:	a1 f0       	breq	.+40     	; 0x80da <SD_Read_config_file+0x10c>
                strtok(temp,"=");
    80b2:	c8 01       	movw	r24, r16
    80b4:	6b e5       	ldi	r22, 0x5B	; 91
    80b6:	72 e2       	ldi	r23, 0x22	; 34
    80b8:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(key,strtok(NULL,"="));
    80bc:	80 e0       	ldi	r24, 0x00	; 0
    80be:	90 e0       	ldi	r25, 0x00	; 0
    80c0:	6b e5       	ldi	r22, 0x5B	; 91
    80c2:	72 e2       	ldi	r23, 0x22	; 34
    80c4:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    80c8:	bc 01       	movw	r22, r24
    80ca:	8b ea       	ldi	r24, 0xAB	; 171
    80cc:	9a e3       	ldi	r25, 0x3A	; 58
    80ce:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
                keyRead = true;
    80d2:	81 e0       	ldi	r24, 0x01	; 1
    80d4:	80 93 a3 27 	sts	0x27A3, r24
    80d8:	a4 cf       	rjmp	.-184    	; 0x8022 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"port") != 0){
    80da:	c8 01       	movw	r24, r16
    80dc:	68 e6       	ldi	r22, 0x68	; 104
    80de:	72 e2       	ldi	r23, 0x22	; 34
    80e0:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    80e4:	00 97       	sbiw	r24, 0x00	; 0
    80e6:	79 f0       	breq	.+30     	; 0x8106 <SD_Read_config_file+0x138>
                strtok(temp,"=");
    80e8:	c8 01       	movw	r24, r16
    80ea:	6b e5       	ldi	r22, 0x5B	; 91
    80ec:	72 e2       	ldi	r23, 0x22	; 34
    80ee:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
				strcpy(port,strtok(NULL,"="));
    80f2:	80 e0       	ldi	r24, 0x00	; 0
    80f4:	90 e0       	ldi	r25, 0x00	; 0
    80f6:	6b e5       	ldi	r22, 0x5B	; 91
    80f8:	72 e2       	ldi	r23, 0x22	; 34
    80fa:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    80fe:	bc 01       	movw	r22, r24
    8100:	80 eb       	ldi	r24, 0xB0	; 176
    8102:	95 e4       	ldi	r25, 0x45	; 69
    8104:	8c c0       	rjmp	.+280    	; 0x821e <SD_Read_config_file+0x250>
            } else if(strstr(temp,"auth") != 0){
    8106:	c8 01       	movw	r24, r16
    8108:	6d e6       	ldi	r22, 0x6D	; 109
    810a:	72 e2       	ldi	r23, 0x22	; 34
    810c:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    8110:	00 97       	sbiw	r24, 0x00	; 0
    8112:	a1 f0       	breq	.+40     	; 0x813c <SD_Read_config_file+0x16e>
				strtok(temp,"=");
    8114:	c8 01       	movw	r24, r16
    8116:	6b e5       	ldi	r22, 0x5B	; 91
    8118:	72 e2       	ldi	r23, 0x22	; 34
    811a:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(auth,strtok(NULL,"="));
    811e:	80 e0       	ldi	r24, 0x00	; 0
    8120:	90 e0       	ldi	r25, 0x00	; 0
    8122:	6b e5       	ldi	r22, 0x5B	; 91
    8124:	72 e2       	ldi	r23, 0x22	; 34
    8126:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    812a:	bc 01       	movw	r22, r24
    812c:	84 ee       	ldi	r24, 0xE4	; 228
    812e:	93 e3       	ldi	r25, 0x33	; 51
    8130:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
				authRead = true;
    8134:	81 e0       	ldi	r24, 0x01	; 1
    8136:	80 93 a1 27 	sts	0x27A1, r24
    813a:	73 cf       	rjmp	.-282    	; 0x8022 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"user") != 0){
    813c:	c8 01       	movw	r24, r16
    813e:	62 e7       	ldi	r22, 0x72	; 114
    8140:	72 e2       	ldi	r23, 0x22	; 34
    8142:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    8146:	00 97       	sbiw	r24, 0x00	; 0
    8148:	31 f1       	breq	.+76     	; 0x8196 <SD_Read_config_file+0x1c8>
                strtok(temp,"=");
    814a:	c8 01       	movw	r24, r16
    814c:	6b e5       	ldi	r22, 0x5B	; 91
    814e:	72 e2       	ldi	r23, 0x22	; 34
    8150:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(user,strtok(NULL,"="));
    8154:	80 e0       	ldi	r24, 0x00	; 0
    8156:	90 e0       	ldi	r25, 0x00	; 0
    8158:	6b e5       	ldi	r22, 0x5B	; 91
    815a:	72 e2       	ldi	r23, 0x22	; 34
    815c:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    8160:	bc 01       	movw	r22, r24
    8162:	82 e9       	ldi	r24, 0x92	; 146
    8164:	94 e3       	ldi	r25, 0x34	; 52
    8166:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
                for(uint8_t i = 0; i < strlen(user); i++){
    816a:	f5 01       	movw	r30, r10
    816c:	01 90       	ld	r0, Z+
    816e:	00 20       	and	r0, r0
    8170:	e9 f7       	brne	.-6      	; 0x816c <SD_Read_config_file+0x19e>
    8172:	31 97       	sbiw	r30, 0x01	; 1
    8174:	e2 59       	subi	r30, 0x92	; 146
    8176:	f4 43       	sbci	r31, 0x34	; 52
    8178:	20 e0       	ldi	r18, 0x00	; 0
    817a:	07 c0       	rjmp	.+14     	; 0x818a <SD_Read_config_file+0x1bc>
                    if(user[i] < ' '){
    817c:	dc 01       	movw	r26, r24
    817e:	ae 56       	subi	r26, 0x6E	; 110
    8180:	bb 4c       	sbci	r27, 0xCB	; 203
    8182:	8c 91       	ld	r24, X
    8184:	80 32       	cpi	r24, 0x20	; 32
    8186:	68 f1       	brcs	.+90     	; 0x81e2 <SD_Read_config_file+0x214>
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(user); i++){
    8188:	2f 5f       	subi	r18, 0xFF	; 255
    818a:	82 2f       	mov	r24, r18
    818c:	90 e0       	ldi	r25, 0x00	; 0
    818e:	8e 17       	cp	r24, r30
    8190:	9f 07       	cpc	r25, r31
    8192:	a0 f3       	brcs	.-24     	; 0x817c <SD_Read_config_file+0x1ae>
    8194:	46 cf       	rjmp	.-372    	; 0x8022 <SD_Read_config_file+0x54>
                    if(user[i] < ' '){
                        user[i] = 0;
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
    8196:	c8 01       	movw	r24, r16
    8198:	67 e7       	ldi	r22, 0x77	; 119
    819a:	72 e2       	ldi	r23, 0x22	; 34
    819c:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    81a0:	00 97       	sbiw	r24, 0x00	; 0
    81a2:	41 f1       	breq	.+80     	; 0x81f4 <SD_Read_config_file+0x226>
                strtok(temp,"=");
    81a4:	c8 01       	movw	r24, r16
    81a6:	6b e5       	ldi	r22, 0x5B	; 91
    81a8:	72 e2       	ldi	r23, 0x22	; 34
    81aa:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
	            strcpy(nickname,strtok(NULL,"="));
    81ae:	80 e0       	ldi	r24, 0x00	; 0
    81b0:	90 e0       	ldi	r25, 0x00	; 0
    81b2:	6b e5       	ldi	r22, 0x5B	; 91
    81b4:	72 e2       	ldi	r23, 0x22	; 34
    81b6:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    81ba:	bc 01       	movw	r22, r24
    81bc:	82 ee       	ldi	r24, 0xE2	; 226
    81be:	95 e4       	ldi	r25, 0x45	; 69
    81c0:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
                for(uint8_t i = 0; i < strlen(nickname); i++){
    81c4:	f6 01       	movw	r30, r12
    81c6:	01 90       	ld	r0, Z+
    81c8:	00 20       	and	r0, r0
    81ca:	e9 f7       	brne	.-6      	; 0x81c6 <SD_Read_config_file+0x1f8>
    81cc:	31 97       	sbiw	r30, 0x01	; 1
    81ce:	e2 5e       	subi	r30, 0xE2	; 226
    81d0:	f5 44       	sbci	r31, 0x45	; 69
    81d2:	20 e0       	ldi	r18, 0x00	; 0
    81d4:	09 c0       	rjmp	.+18     	; 0x81e8 <SD_Read_config_file+0x21a>
                    if(nickname[i] < ' '){
    81d6:	dc 01       	movw	r26, r24
    81d8:	ae 51       	subi	r26, 0x1E	; 30
    81da:	ba 4b       	sbci	r27, 0xBA	; 186
    81dc:	8c 91       	ld	r24, X
    81de:	80 32       	cpi	r24, 0x20	; 32
    81e0:	10 f4       	brcc	.+4      	; 0x81e6 <SD_Read_config_file+0x218>
                        nickname[i] = 0;
    81e2:	1c 92       	st	X, r1
    81e4:	1e cf       	rjmp	.-452    	; 0x8022 <SD_Read_config_file+0x54>
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(nickname); i++){
    81e6:	2f 5f       	subi	r18, 0xFF	; 255
    81e8:	82 2f       	mov	r24, r18
    81ea:	90 e0       	ldi	r25, 0x00	; 0
    81ec:	8e 17       	cp	r24, r30
    81ee:	9f 07       	cpc	r25, r31
    81f0:	90 f3       	brcs	.-28     	; 0x81d6 <SD_Read_config_file+0x208>
    81f2:	17 cf       	rjmp	.-466    	; 0x8022 <SD_Read_config_file+0x54>
                        nickname[i] = 0;
                        break;
                    }
                }
				
            } else if(strstr(temp,"server") != 0){
    81f4:	c8 01       	movw	r24, r16
    81f6:	60 e8       	ldi	r22, 0x80	; 128
    81f8:	72 e2       	ldi	r23, 0x22	; 34
    81fa:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    81fe:	00 97       	sbiw	r24, 0x00	; 0
    8200:	89 f0       	breq	.+34     	; 0x8224 <SD_Read_config_file+0x256>
                strtok(temp,"=");
    8202:	c8 01       	movw	r24, r16
    8204:	6b e5       	ldi	r22, 0x5B	; 91
    8206:	72 e2       	ldi	r23, 0x22	; 34
    8208:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(server,strtok(NULL,"="));
    820c:	80 e0       	ldi	r24, 0x00	; 0
    820e:	90 e0       	ldi	r25, 0x00	; 0
    8210:	6b e5       	ldi	r22, 0x5B	; 91
    8212:	72 e2       	ldi	r23, 0x22	; 34
    8214:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    8218:	bc 01       	movw	r22, r24
    821a:	88 e5       	ldi	r24, 0x58	; 88
    821c:	99 e3       	ldi	r25, 0x39	; 57
    821e:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <strcpy>
    8222:	ff ce       	rjmp	.-514    	; 0x8022 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"daylightTime") != 0){
    8224:	c8 01       	movw	r24, r16
    8226:	67 e8       	ldi	r22, 0x87	; 135
    8228:	72 e2       	ldi	r23, 0x22	; 34
    822a:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    822e:	00 97       	sbiw	r24, 0x00	; 0
    8230:	79 f0       	breq	.+30     	; 0x8250 <SD_Read_config_file+0x282>
                strtok(temp,"=");
    8232:	c8 01       	movw	r24, r16
    8234:	6b e5       	ldi	r22, 0x5B	; 91
    8236:	72 e2       	ldi	r23, 0x22	; 34
    8238:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(daylightTime,strtok(NULL,"="));
    823c:	80 e0       	ldi	r24, 0x00	; 0
    823e:	90 e0       	ldi	r25, 0x00	; 0
    8240:	6b e5       	ldi	r22, 0x5B	; 91
    8242:	72 e2       	ldi	r23, 0x22	; 34
    8244:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    8248:	bc 01       	movw	r22, r24
    824a:	86 ee       	ldi	r24, 0xE6	; 230
    824c:	99 e3       	ldi	r25, 0x39	; 57
    824e:	e7 cf       	rjmp	.-50     	; 0x821e <SD_Read_config_file+0x250>
            } else if(strstr(temp,"demoMode") != 0){
    8250:	c8 01       	movw	r24, r16
    8252:	64 e9       	ldi	r22, 0x94	; 148
    8254:	72 e2       	ldi	r23, 0x22	; 34
    8256:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    825a:	00 97       	sbiw	r24, 0x00	; 0
    825c:	79 f0       	breq	.+30     	; 0x827c <SD_Read_config_file+0x2ae>
                strtok(temp,"=");
    825e:	c8 01       	movw	r24, r16
    8260:	6b e5       	ldi	r22, 0x5B	; 91
    8262:	72 e2       	ldi	r23, 0x22	; 34
    8264:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(demoModeString,strtok(NULL,"="));
    8268:	80 e0       	ldi	r24, 0x00	; 0
    826a:	90 e0       	ldi	r25, 0x00	; 0
    826c:	6b e5       	ldi	r22, 0x5B	; 91
    826e:	72 e2       	ldi	r23, 0x22	; 34
    8270:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    8274:	bc 01       	movw	r22, r24
    8276:	8e e4       	ldi	r24, 0x4E	; 78
    8278:	99 e3       	ldi	r25, 0x39	; 57
    827a:	d1 cf       	rjmp	.-94     	; 0x821e <SD_Read_config_file+0x250>
            } else if(strstr(temp,"recordFast") != 0){
    827c:	c8 01       	movw	r24, r16
    827e:	6d e9       	ldi	r22, 0x9D	; 157
    8280:	72 e2       	ldi	r23, 0x22	; 34
    8282:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    8286:	00 97       	sbiw	r24, 0x00	; 0
    8288:	79 f0       	breq	.+30     	; 0x82a8 <SD_Read_config_file+0x2da>
                strtok(temp,"=");
    828a:	c8 01       	movw	r24, r16
    828c:	6b e5       	ldi	r22, 0x5B	; 91
    828e:	72 e2       	ldi	r23, 0x22	; 34
    8290:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                strcpy(fastString,strtok(NULL,"="));
    8294:	80 e0       	ldi	r24, 0x00	; 0
    8296:	90 e0       	ldi	r25, 0x00	; 0
    8298:	6b e5       	ldi	r22, 0x5B	; 91
    829a:	72 e2       	ldi	r23, 0x22	; 34
    829c:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    82a0:	bc 01       	movw	r22, r24
    82a2:	84 e1       	ldi	r24, 0x14	; 20
    82a4:	96 e4       	ldi	r25, 0x46	; 70
    82a6:	bb cf       	rjmp	.-138    	; 0x821e <SD_Read_config_file+0x250>
            } else if(strstr(temp,"zone") != 0){
    82a8:	c8 01       	movw	r24, r16
    82aa:	68 ea       	ldi	r22, 0xA8	; 168
    82ac:	72 e2       	ldi	r23, 0x22	; 34
    82ae:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    82b2:	00 97       	sbiw	r24, 0x00	; 0
    82b4:	09 f4       	brne	.+2      	; 0x82b8 <SD_Read_config_file+0x2ea>
    82b6:	b5 ce       	rjmp	.-662    	; 0x8022 <SD_Read_config_file+0x54>
				strtok(temp,"=");
    82b8:	c8 01       	movw	r24, r16
    82ba:	6b e5       	ldi	r22, 0x5B	; 91
    82bc:	72 e2       	ldi	r23, 0x22	; 34
    82be:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
                memmove(zone,strtok(NULL,"="),4);
    82c2:	80 e0       	ldi	r24, 0x00	; 0
    82c4:	90 e0       	ldi	r25, 0x00	; 0
    82c6:	6b e5       	ldi	r22, 0x5B	; 91
    82c8:	72 e2       	ldi	r23, 0x22	; 34
    82ca:	0e 94 86 44 	call	0x890c	; 0x890c <strtok>
    82ce:	bc 01       	movw	r22, r24
    82d0:	8e ef       	ldi	r24, 0xFE	; 254
    82d2:	92 e2       	ldi	r25, 0x22	; 34
    82d4:	44 e0       	ldi	r20, 0x04	; 4
    82d6:	50 e0       	ldi	r21, 0x00	; 0
    82d8:	0e 94 8b 44 	call	0x8916	; 0x8916 <memmove>
    82dc:	20 e0       	ldi	r18, 0x00	; 0
    82de:	08 c0       	rjmp	.+16     	; 0x82f0 <SD_Read_config_file+0x322>
                for(uint8_t i = 0;  i < strlen(zone); i++){
                    if(zone[i] < ' '){
    82e0:	fc 01       	movw	r30, r24
    82e2:	e2 50       	subi	r30, 0x02	; 2
    82e4:	fd 4d       	sbci	r31, 0xDD	; 221
    82e6:	80 81       	ld	r24, Z
    82e8:	80 32       	cpi	r24, 0x20	; 32
    82ea:	08 f4       	brcc	.+2      	; 0x82ee <SD_Read_config_file+0x320>
                        zone[i] = 0;
    82ec:	10 82       	st	Z, r1
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
                for(uint8_t i = 0;  i < strlen(zone); i++){
    82ee:	2f 5f       	subi	r18, 0xFF	; 255
    82f0:	f7 01       	movw	r30, r14
    82f2:	01 90       	ld	r0, Z+
    82f4:	00 20       	and	r0, r0
    82f6:	e9 f7       	brne	.-6      	; 0x82f2 <SD_Read_config_file+0x324>
    82f8:	31 97       	sbiw	r30, 0x01	; 1
    82fa:	ee 5f       	subi	r30, 0xFE	; 254
    82fc:	f2 42       	sbci	r31, 0x22	; 34
    82fe:	82 2f       	mov	r24, r18
    8300:	90 e0       	ldi	r25, 0x00	; 0
    8302:	8e 17       	cp	r24, r30
    8304:	9f 07       	cpc	r25, r31
    8306:	60 f3       	brcs	.-40     	; 0x82e0 <SD_Read_config_file+0x312>
                    if(zone[i] < ' '){
                        zone[i] = 0;
                    }
                }
                if(strcmp(zone,"EST") == 0){
    8308:	8e ef       	ldi	r24, 0xFE	; 254
    830a:	92 e2       	ldi	r25, 0x22	; 34
    830c:	6d ea       	ldi	r22, 0xAD	; 173
    830e:	72 e2       	ldi	r23, 0x22	; 34
    8310:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <strcmp>
    8314:	00 97       	sbiw	r24, 0x00	; 0
    8316:	11 f4       	brne	.+4      	; 0x831c <SD_Read_config_file+0x34e>
                    timeZoneShift = 5;
    8318:	85 e0       	ldi	r24, 0x05	; 5
    831a:	1e c0       	rjmp	.+60     	; 0x8358 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"CST") == 0){
    831c:	8e ef       	ldi	r24, 0xFE	; 254
    831e:	92 e2       	ldi	r25, 0x22	; 34
    8320:	61 eb       	ldi	r22, 0xB1	; 177
    8322:	72 e2       	ldi	r23, 0x22	; 34
    8324:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <strcmp>
    8328:	00 97       	sbiw	r24, 0x00	; 0
    832a:	11 f4       	brne	.+4      	; 0x8330 <SD_Read_config_file+0x362>
                    timeZoneShift = 6;
    832c:	86 e0       	ldi	r24, 0x06	; 6
    832e:	14 c0       	rjmp	.+40     	; 0x8358 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"MST") == 0){
    8330:	8e ef       	ldi	r24, 0xFE	; 254
    8332:	92 e2       	ldi	r25, 0x22	; 34
    8334:	65 eb       	ldi	r22, 0xB5	; 181
    8336:	72 e2       	ldi	r23, 0x22	; 34
    8338:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <strcmp>
    833c:	00 97       	sbiw	r24, 0x00	; 0
    833e:	11 f4       	brne	.+4      	; 0x8344 <SD_Read_config_file+0x376>
                    timeZoneShift = 7;
    8340:	87 e0       	ldi	r24, 0x07	; 7
    8342:	0a c0       	rjmp	.+20     	; 0x8358 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"PST") == 0){
    8344:	8e ef       	ldi	r24, 0xFE	; 254
    8346:	92 e2       	ldi	r25, 0x22	; 34
    8348:	69 eb       	ldi	r22, 0xB9	; 185
    834a:	72 e2       	ldi	r23, 0x22	; 34
    834c:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <strcmp>
    8350:	00 97       	sbiw	r24, 0x00	; 0
    8352:	09 f0       	breq	.+2      	; 0x8356 <SD_Read_config_file+0x388>
    8354:	66 ce       	rjmp	.-820    	; 0x8022 <SD_Read_config_file+0x54>
                    timeZoneShift = 8;
    8356:	88 e0       	ldi	r24, 0x08	; 8
    8358:	80 93 a0 27 	sts	0x27A0, r24
                    zoneChanged = true;
    835c:	81 e0       	ldi	r24, 0x01	; 1
    835e:	80 93 a5 27 	sts	0x27A5, r24
    8362:	5f ce       	rjmp	.-834    	; 0x8022 <SD_Read_config_file+0x54>
	        }
	    } else {
	        break;
	    }
	}
    if(server[strlen(server)-1] < 32){
    8364:	e8 e5       	ldi	r30, 0x58	; 88
    8366:	f9 e3       	ldi	r31, 0x39	; 57
    8368:	01 90       	ld	r0, Z+
    836a:	00 20       	and	r0, r0
    836c:	e9 f7       	brne	.-6      	; 0x8368 <SD_Read_config_file+0x39a>
    836e:	32 97       	sbiw	r30, 0x02	; 2
    8370:	80 81       	ld	r24, Z
    8372:	80 32       	cpi	r24, 0x20	; 32
    8374:	08 f4       	brcc	.+2      	; 0x8378 <SD_Read_config_file+0x3aa>
        server[strlen(server)-1] = 0;
    8376:	10 82       	st	Z, r1
    }
	strcat(serverOpenCommand,server);
    8378:	8c ec       	ldi	r24, 0xCC	; 204
    837a:	92 e2       	ldi	r25, 0x22	; 34
    837c:	68 e5       	ldi	r22, 0x58	; 88
    837e:	79 e3       	ldi	r23, 0x39	; 57
    8380:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
	strcat(serverOpenCommand," ");
    8384:	8c ec       	ldi	r24, 0xCC	; 204
    8386:	92 e2       	ldi	r25, 0x22	; 34
    8388:	6d eb       	ldi	r22, 0xBD	; 189
    838a:	72 e2       	ldi	r23, 0x22	; 34
    838c:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
	strcat(serverOpenCommand,port);
    8390:	8c ec       	ldi	r24, 0xCC	; 204
    8392:	92 e2       	ldi	r25, 0x22	; 34
    8394:	60 eb       	ldi	r22, 0xB0	; 176
    8396:	75 e4       	ldi	r23, 0x45	; 69
    8398:	0e 94 d5 44 	call	0x89aa	; 0x89aa <strcat>
	
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    839c:	86 ee       	ldi	r24, 0xE6	; 230
    839e:	99 e3       	ldi	r25, 0x39	; 57
    83a0:	6f eb       	ldi	r22, 0xBF	; 191
    83a2:	72 e2       	ldi	r23, 0x22	; 34
    83a4:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    83a8:	00 97       	sbiw	r24, 0x00	; 0
    83aa:	49 f0       	breq	.+18     	; 0x83be <SD_Read_config_file+0x3f0>
    83ac:	80 91 a5 27 	lds	r24, 0x27A5
    83b0:	88 23       	and	r24, r24
    83b2:	29 f0       	breq	.+10     	; 0x83be <SD_Read_config_file+0x3f0>
        timeZoneShift--;
    83b4:	80 91 a0 27 	lds	r24, 0x27A0
    83b8:	81 50       	subi	r24, 0x01	; 1
    83ba:	80 93 a0 27 	sts	0x27A0, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    83be:	8e e4       	ldi	r24, 0x4E	; 78
    83c0:	99 e3       	ldi	r25, 0x39	; 57
    83c2:	6f eb       	ldi	r22, 0xBF	; 191
    83c4:	72 e2       	ldi	r23, 0x22	; 34
    83c6:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    83ca:	00 97       	sbiw	r24, 0x00	; 0
    83cc:	19 f0       	breq	.+6      	; 0x83d4 <SD_Read_config_file+0x406>
        demoMode = true;
    83ce:	81 e0       	ldi	r24, 0x01	; 1
    83d0:	80 93 96 27 	sts	0x2796, r24
    }
    if((strstr(fastString,"true") != 0)){
    83d4:	84 e1       	ldi	r24, 0x14	; 20
    83d6:	96 e4       	ldi	r25, 0x46	; 70
    83d8:	6f eb       	ldi	r22, 0xBF	; 191
    83da:	72 e2       	ldi	r23, 0x22	; 34
    83dc:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <strstr>
    83e0:	00 97       	sbiw	r24, 0x00	; 0
    83e2:	19 f0       	breq	.+6      	; 0x83ea <SD_Read_config_file+0x41c>
        wantToRecordFast = true;
    83e4:	81 e0       	ldi	r24, 0x01	; 1
    83e6:	80 93 68 27 	sts	0x2768, r24
    }
}
    83ea:	e2 96       	adiw	r28, 0x32	; 50
    83ec:	cd bf       	out	0x3d, r28	; 61
    83ee:	de bf       	out	0x3e, r29	; 62
    83f0:	cf 91       	pop	r28
    83f2:	df 91       	pop	r29
    83f4:	1f 91       	pop	r17
    83f6:	0f 91       	pop	r16
    83f8:	ff 90       	pop	r15
    83fa:	ef 90       	pop	r14
    83fc:	df 90       	pop	r13
    83fe:	cf 90       	pop	r12
    8400:	bf 90       	pop	r11
    8402:	af 90       	pop	r10
    8404:	08 95       	ret

00008406 <main>:
volatile bool batteryVoltageOk = true;

// ********************************** Main Program *********************************


int main(void){
    8406:	ff 92       	push	r15
    8408:	0f 93       	push	r16
    840a:	1f 93       	push	r17
    840c:	df 93       	push	r29
    840e:	cf 93       	push	r28
    8410:	0f 92       	push	r0
    8412:	cd b7       	in	r28, 0x3d	; 61
    8414:	de b7       	in	r29, 0x3e	; 62
	Clock_Init();
    8416:	0e 94 2b 34 	call	0x6856	; 0x6856 <Clock_Init>
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    841a:	8f b7       	in	r24, 0x3f	; 63
    841c:	89 83       	std	Y+1, r24	; 0x01
    cli();
    841e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    8420:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    8422:	ff 24       	eor	r15, r15
    8424:	f3 94       	inc	r15
    8426:	86 e9       	ldi	r24, 0x96	; 150
    8428:	90 e0       	ldi	r25, 0x00	; 0
    842a:	fc 01       	movw	r30, r24
    842c:	08 ed       	ldi	r16, 0xD8	; 216
    842e:	04 bf       	out	0x34, r16	; 52
    8430:	f0 82       	st	Z, r15
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    8432:	89 81       	ldd	r24, Y+1	; 0x01
    8434:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();
	getDeviceID();
    8436:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <getDeviceID>
	Time_Init();
    843a:	0e 94 57 02 	call	0x4ae	; 0x4ae <Time_Init>
	Sensors_Init();
    843e:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <Sensors_Init>
	Debug_Init(460800);
    8442:	60 e0       	ldi	r22, 0x00	; 0
    8444:	78 e0       	ldi	r23, 0x08	; 8
    8446:	87 e0       	ldi	r24, 0x07	; 7
    8448:	90 e0       	ldi	r25, 0x00	; 0
    844a:	0e 94 84 01 	call	0x308	; 0x308 <Debug_Init>
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button){
	Button_Port.DIRCLR = (1 << button);
    844e:	00 ea       	ldi	r16, 0xA0	; 160
    8450:	16 e0       	ldi	r17, 0x06	; 6
    8452:	80 e4       	ldi	r24, 0x40	; 64
    8454:	f8 01       	movw	r30, r16
    8456:	82 83       	std	Z+2, r24	; 0x02
	PORTCFG.MPCMASK = (1 << button);
    8458:	80 93 b0 00 	sts	0x00B0, r24
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
    845c:	88 e3       	ldi	r24, 0x38	; 56
    845e:	80 8b       	std	Z+16, r24	; 0x10
	Button_Init(Button_Pin);
	Accel_Init();
    8460:	0e 94 8a 2c 	call	0x5914	; 0x5914 <Accel_Init>

volatile uint8_t ledState[numberOfLeds]; 
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
    8464:	82 e0       	ldi	r24, 0x02	; 2
    8466:	f8 01       	movw	r30, r16
    8468:	81 83       	std	Z+1, r24	; 0x01
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    846a:	10 92 4d 39 	sts	0x394D, r1

volatile uint8_t ledState[numberOfLeds]; 
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
    846e:	f1 82       	std	Z+1, r15	; 0x01
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    8470:	10 92 4c 39 	sts	0x394C, r1
	Leds_Init(Green);
	Leds_Init(Red);
	GUI_Init();
    8474:	0e 94 89 34 	call	0x6912	; 0x6912 <GUI_Init>
	SD_BackroundWriter_Init();
    8478:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <SD_BackroundWriter_Init>
    SD_Init();
    847c:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Init>
}


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    8480:	80 91 a2 00 	lds	r24, 0x00A2
    8484:	87 60       	ori	r24, 0x07	; 7
    8486:	e0 ea       	ldi	r30, 0xA0	; 160
    8488:	f0 e0       	ldi	r31, 0x00	; 0
    848a:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    848c:	78 94       	sei
	GUI_Init();
	SD_BackroundWriter_Init();
    SD_Init();
	Interrupt_Init();
	
	if(Time_CheckVBatSystem() && (Time_Get() > 1000000)){				// grab time from rtc32 if enabled and valid
    848e:	0e 94 bc 02 	call	0x578	; 0x578 <Time_CheckVBatSystem>
    8492:	88 23       	and	r24, r24
    8494:	d1 f1       	breq	.+116    	; 0x850a <main+0x104>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    8496:	80 91 21 04 	lds	r24, 0x0421
    849a:	80 61       	ori	r24, 0x10	; 16
    849c:	e0 e2       	ldi	r30, 0x20	; 32
    849e:	f4 e0       	ldi	r31, 0x04	; 4
    84a0:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    84a2:	e0 e2       	ldi	r30, 0x20	; 32
    84a4:	f4 e0       	ldi	r31, 0x04	; 4
    84a6:	80 91 21 04 	lds	r24, 0x0421
    84aa:	84 fd       	sbrc	r24, 4
    84ac:	fa cf       	rjmp	.-12     	; 0x84a2 <main+0x9c>
	return RTC32.CNT;
    84ae:	80 91 24 04 	lds	r24, 0x0424
    84b2:	90 91 25 04 	lds	r25, 0x0425
    84b6:	a0 91 26 04 	lds	r26, 0x0426
    84ba:	b0 91 27 04 	lds	r27, 0x0427
    84be:	81 54       	subi	r24, 0x41	; 65
    84c0:	92 44       	sbci	r25, 0x42	; 66
    84c2:	af 40       	sbci	r26, 0x0F	; 15
    84c4:	b0 40       	sbci	r27, 0x00	; 0
    84c6:	08 f1       	brcs	.+66     	; 0x850a <main+0x104>
		timeIsValid = true;
    84c8:	81 e0       	ldi	r24, 0x01	; 1
    84ca:	80 93 de 27 	sts	0x27DE, r24
		RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
    84ce:	80 91 22 04 	lds	r24, 0x0422
    84d2:	83 7f       	andi	r24, 0xF3	; 243
    84d4:	84 60       	ori	r24, 0x04	; 4
    84d6:	82 83       	std	Z+2, r24	; 0x02
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    84d8:	80 91 21 04 	lds	r24, 0x0421
    84dc:	80 61       	ori	r24, 0x10	; 16
    84de:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    84e0:	80 91 21 04 	lds	r24, 0x0421
    84e4:	84 fd       	sbrc	r24, 4
    84e6:	fc cf       	rjmp	.-8      	; 0x84e0 <main+0xda>
	return RTC32.CNT;
    84e8:	80 91 24 04 	lds	r24, 0x0424
    84ec:	90 91 25 04 	lds	r25, 0x0425
    84f0:	a0 91 26 04 	lds	r26, 0x0426
    84f4:	b0 91 27 04 	lds	r27, 0x0427
		UNIX_Time = Time_Get();
    84f8:	80 93 9c 27 	sts	0x279C, r24
    84fc:	90 93 9d 27 	sts	0x279D, r25
    8500:	a0 93 9e 27 	sts	0x279E, r26
    8504:	b0 93 9f 27 	sts	0x279F, r27
    8508:	15 c0       	rjmp	.+42     	; 0x8534 <main+0x12e>
	} else {
		VBAT.CTRL = VBAT_ACCEN_bm;
    850a:	82 e0       	ldi	r24, 0x02	; 2
    850c:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    8510:	8f b7       	in	r24, 0x3f	; 63
    8512:	89 83       	std	Y+1, r24	; 0x01
    cli();
    8514:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    8516:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    8518:	21 e0       	ldi	r18, 0x01	; 1
    851a:	80 ef       	ldi	r24, 0xF0	; 240
    851c:	90 e0       	ldi	r25, 0x00	; 0
    851e:	fc 01       	movw	r30, r24
    8520:	08 ed       	ldi	r16, 0xD8	; 216
    8522:	04 bf       	out	0x34, r16	; 52
    8524:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    8526:	89 81       	ldd	r24, Y+1	; 0x01
    8528:	8f bf       	out	0x3f, r24	; 63
		CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
		RTC32.CTRL = 0;								// disable RTC32
    852a:	10 92 20 04 	sts	0x0420, r1
		RTC32.INTCTRL = 0;
    852e:	e0 e2       	ldi	r30, 0x20	; 32
    8530:	f4 e0       	ldi	r31, 0x04	; 4
    8532:	12 82       	std	Z+2, r1	; 0x02
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8534:	80 91 a8 06 	lds	r24, 0x06A8
    8538:	84 fd       	sbrc	r24, 4
    853a:	fc cf       	rjmp	.-8      	; 0x8534 <main+0x12e>
    853c:	80 e1       	ldi	r24, 0x10	; 16
    853e:	97 e2       	ldi	r25, 0x27	; 39
    8540:	20 e7       	ldi	r18, 0x70	; 112
    8542:	31 e0       	ldi	r19, 0x01	; 1
    8544:	f9 01       	movw	r30, r18
    8546:	31 97       	sbiw	r30, 0x01	; 1
    8548:	f1 f7       	brne	.-4      	; 0x8546 <main+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    854a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    854c:	d9 f7       	brne	.-10     	; 0x8544 <main+0x13e>
	}
	
	while(!SD_Inserted());
	_delay_ms(1000);
	
	SD_Read_config_file();
    854e:	0e 94 e7 3f 	call	0x7fce	; 0x7fce <SD_Read_config_file>
    8552:	28 e8       	ldi	r18, 0x88	; 136
    8554:	33 e1       	ldi	r19, 0x13	; 19
Reset:
	
	_delay_ms(500);
	connected = false;
	Uploader_connectToComputer();
	connected = true;
    8556:	ff 24       	eor	r15, r15
    8558:	f3 94       	inc	r15
    855a:	00 e7       	ldi	r16, 0x70	; 112
    855c:	11 e0       	ldi	r17, 0x01	; 1
    855e:	05 c0       	rjmp	.+10     	; 0x856a <main+0x164>
    8560:	c8 01       	movw	r24, r16
    8562:	01 97       	sbiw	r24, 0x01	; 1
    8564:	f1 f7       	brne	.-4      	; 0x8562 <main+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8566:	21 50       	subi	r18, 0x01	; 1
    8568:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    856a:	21 15       	cp	r18, r1
    856c:	31 05       	cpc	r19, r1
    856e:	c1 f7       	brne	.-16     	; 0x8560 <main+0x15a>
	SD_Read_config_file();
	
Reset:
	
	_delay_ms(500);
	connected = false;
    8570:	10 92 d1 27 	sts	0x27D1, r1
	Uploader_connectToComputer();
    8574:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <Uploader_connectToComputer>
	connected = true;
    8578:	f0 92 d1 27 	sts	0x27D1, r15
	
    while(true){
		if(!Uploader_Update()){
    857c:	0e 94 23 3c 	call	0x7846	; 0x7846 <Uploader_Update>
    8580:	88 23       	and	r24, r24
    8582:	e1 f7       	brne	.-8      	; 0x857c <main+0x176>
    8584:	28 e8       	ldi	r18, 0x88	; 136
    8586:	33 e1       	ldi	r19, 0x13	; 19
    8588:	eb cf       	rjmp	.-42     	; 0x8560 <main+0x15a>

0000858a <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    858a:	2f 92       	push	r2
    858c:	3f 92       	push	r3
    858e:	4f 92       	push	r4
    8590:	5f 92       	push	r5
    8592:	6f 92       	push	r6
    8594:	7f 92       	push	r7
    8596:	8f 92       	push	r8
    8598:	9f 92       	push	r9
    859a:	af 92       	push	r10
    859c:	bf 92       	push	r11
    859e:	cf 92       	push	r12
    85a0:	df 92       	push	r13
    85a2:	ef 92       	push	r14
    85a4:	ff 92       	push	r15
    85a6:	0f 93       	push	r16
    85a8:	1f 93       	push	r17
    85aa:	df 93       	push	r29
    85ac:	cf 93       	push	r28
    85ae:	cd b7       	in	r28, 0x3d	; 61
    85b0:	de b7       	in	r29, 0x3e	; 62
    85b2:	63 97       	sbiw	r28, 0x13	; 19
    85b4:	cd bf       	out	0x3d, r28	; 61
    85b6:	de bf       	out	0x3e, r29	; 62
    85b8:	6b a4       	ldd	r6, Y+43	; 0x2b
    85ba:	7c a4       	ldd	r7, Y+44	; 0x2c
    85bc:	8e 01       	movw	r16, r28
    85be:	03 5d       	subi	r16, 0xD3	; 211
    85c0:	1f 4f       	sbci	r17, 0xFF	; 255
    85c2:	19 8a       	std	Y+17, r1	; 0x11
    85c4:	1a 8a       	std	Y+18, r1	; 0x12
    85c6:	20 e0       	ldi	r18, 0x00	; 0
    85c8:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    85ca:	d3 01       	movw	r26, r6
    85cc:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    85ce:	88 23       	and	r24, r24
    85d0:	09 f4       	brne	.+2      	; 0x85d4 <f_printf+0x4a>
    85d2:	17 c1       	rjmp	.+558    	; 0x8802 <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    85d4:	08 94       	sec
    85d6:	61 1c       	adc	r6, r1
    85d8:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    85da:	85 32       	cpi	r24, 0x25	; 37
    85dc:	71 f0       	breq	.+28     	; 0x85fa <f_printf+0x70>
			cc = f_putc(c, fil);
    85de:	90 e0       	ldi	r25, 0x00	; 0
    85e0:	69 a5       	ldd	r22, Y+41	; 0x29
    85e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    85e4:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <f_putc>
    85e8:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    85ea:	bf ef       	ldi	r27, 0xFF	; 255
    85ec:	8f 3f       	cpi	r24, 0xFF	; 255
    85ee:	9b 07       	cpc	r25, r27
    85f0:	11 f4       	brne	.+4      	; 0x85f6 <f_printf+0x6c>
    85f2:	48 01       	movw	r8, r16
    85f4:	fa c0       	rjmp	.+500    	; 0x87ea <f_printf+0x260>
    85f6:	48 01       	movw	r8, r16
    85f8:	4c c0       	rjmp	.+152    	; 0x8692 <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    85fa:	d3 01       	movw	r26, r6
    85fc:	ed 91       	ld	r30, X+
    85fe:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    8600:	e0 33       	cpi	r30, 0x30	; 48
    8602:	11 f0       	breq	.+4      	; 0x8608 <f_printf+0x7e>
    8604:	1b 8a       	std	Y+19, r1	; 0x13
    8606:	04 c0       	rjmp	.+8      	; 0x8610 <f_printf+0x86>
			f = 1; c = *str++;
    8608:	ed 91       	ld	r30, X+
    860a:	3d 01       	movw	r6, r26
    860c:	b1 e0       	ldi	r27, 0x01	; 1
    860e:	bb 8b       	std	Y+19, r27	; 0x13
    8610:	aa 24       	eor	r10, r10
    8612:	bb 24       	eor	r11, r11
    8614:	13 c0       	rjmp	.+38     	; 0x863c <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    8616:	c5 01       	movw	r24, r10
    8618:	f3 e0       	ldi	r31, 0x03	; 3
    861a:	88 0f       	add	r24, r24
    861c:	99 1f       	adc	r25, r25
    861e:	fa 95       	dec	r31
    8620:	e1 f7       	brne	.-8      	; 0x861a <f_printf+0x90>
    8622:	aa 0c       	add	r10, r10
    8624:	bb 1c       	adc	r11, r11
    8626:	a8 0e       	add	r10, r24
    8628:	b9 1e       	adc	r11, r25
    862a:	ae 0e       	add	r10, r30
    862c:	b1 1c       	adc	r11, r1
    862e:	e0 ed       	ldi	r30, 0xD0	; 208
    8630:	ff ef       	ldi	r31, 0xFF	; 255
    8632:	ae 0e       	add	r10, r30
    8634:	bf 1e       	adc	r11, r31
			c = *str++;
    8636:	d3 01       	movw	r26, r6
    8638:	ed 91       	ld	r30, X+
    863a:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    863c:	8e 2f       	mov	r24, r30
    863e:	80 53       	subi	r24, 0x30	; 48
    8640:	8a 30       	cpi	r24, 0x0A	; 10
    8642:	48 f3       	brcs	.-46     	; 0x8616 <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    8644:	ec 36       	cpi	r30, 0x6C	; 108
    8646:	31 f4       	brne	.+12     	; 0x8654 <f_printf+0xca>
			f |= 2; c = *str++;
    8648:	bb 89       	ldd	r27, Y+19	; 0x13
    864a:	b2 60       	ori	r27, 0x02	; 2
    864c:	bb 8b       	std	Y+19, r27	; 0x13
    864e:	d3 01       	movw	r26, r6
    8650:	ed 91       	ld	r30, X+
    8652:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    8654:	e3 37       	cpi	r30, 0x73	; 115
    8656:	49 f4       	brne	.+18     	; 0x866a <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    8658:	62 e0       	ldi	r22, 0x02	; 2
    865a:	86 2e       	mov	r8, r22
    865c:	91 2c       	mov	r9, r1
    865e:	80 0e       	add	r8, r16
    8660:	91 1e       	adc	r9, r17
    8662:	f8 01       	movw	r30, r16
    8664:	80 81       	ld	r24, Z
    8666:	91 81       	ldd	r25, Z+1	; 0x01
    8668:	bb c0       	rjmp	.+374    	; 0x87e0 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    866a:	e3 36       	cpi	r30, 0x63	; 99
    866c:	a9 f4       	brne	.+42     	; 0x8698 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    866e:	52 e0       	ldi	r21, 0x02	; 2
    8670:	85 2e       	mov	r8, r21
    8672:	91 2c       	mov	r9, r1
    8674:	80 0e       	add	r8, r16
    8676:	91 1e       	adc	r9, r17
    8678:	d8 01       	movw	r26, r16
    867a:	8d 91       	ld	r24, X+
    867c:	9c 91       	ld	r25, X
    867e:	69 a5       	ldd	r22, Y+41	; 0x29
    8680:	7a a5       	ldd	r23, Y+42	; 0x2a
    8682:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <f_putc>
    8686:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    8688:	bf ef       	ldi	r27, 0xFF	; 255
    868a:	8f 3f       	cpi	r24, 0xFF	; 255
    868c:	9b 07       	cpc	r25, r27
    868e:	09 f4       	brne	.+2      	; 0x8692 <f_printf+0x108>
    8690:	ac c0       	rjmp	.+344    	; 0x87ea <f_printf+0x260>
    8692:	21 e0       	ldi	r18, 0x01	; 1
    8694:	30 e0       	ldi	r19, 0x00	; 0
    8696:	a9 c0       	rjmp	.+338    	; 0x87ea <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    8698:	e4 36       	cpi	r30, 0x64	; 100
    869a:	39 f0       	breq	.+14     	; 0x86aa <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    869c:	e5 37       	cpi	r30, 0x75	; 117
    869e:	29 f0       	breq	.+10     	; 0x86aa <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    86a0:	e8 35       	cpi	r30, 0x58	; 88
    86a2:	09 f0       	breq	.+2      	; 0x86a6 <f_printf+0x11c>
    86a4:	ae c0       	rjmp	.+348    	; 0x8802 <f_printf+0x278>
    86a6:	20 e1       	ldi	r18, 0x10	; 16
    86a8:	01 c0       	rjmp	.+2      	; 0x86ac <f_printf+0x122>
    86aa:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    86ac:	fb 89       	ldd	r31, Y+19	; 0x13
    86ae:	f1 ff       	sbrs	r31, 1
    86b0:	0d c0       	rjmp	.+26     	; 0x86cc <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    86b2:	44 e0       	ldi	r20, 0x04	; 4
    86b4:	84 2e       	mov	r8, r20
    86b6:	91 2c       	mov	r9, r1
    86b8:	80 0e       	add	r8, r16
    86ba:	91 1e       	adc	r9, r17
    86bc:	d8 01       	movw	r26, r16
    86be:	ed 90       	ld	r14, X+
    86c0:	fd 90       	ld	r15, X+
    86c2:	0d 91       	ld	r16, X+
    86c4:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    86c6:	e4 36       	cpi	r30, 0x64	; 100
    86c8:	09 f5       	brne	.+66     	; 0x870c <f_printf+0x182>
    86ca:	13 c0       	rjmp	.+38     	; 0x86f2 <f_printf+0x168>
    86cc:	c8 01       	movw	r24, r16
    86ce:	02 96       	adiw	r24, 0x02	; 2
    86d0:	d8 01       	movw	r26, r16
    86d2:	6d 91       	ld	r22, X+
    86d4:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    86d6:	e4 36       	cpi	r30, 0x64	; 100
    86d8:	39 f4       	brne	.+14     	; 0x86e8 <f_printf+0x15e>
    86da:	4c 01       	movw	r8, r24
    86dc:	7b 01       	movw	r14, r22
    86de:	00 27       	eor	r16, r16
    86e0:	f7 fc       	sbrc	r15, 7
    86e2:	00 95       	com	r16
    86e4:	10 2f       	mov	r17, r16
    86e6:	05 c0       	rjmp	.+10     	; 0x86f2 <f_printf+0x168>
    86e8:	4c 01       	movw	r8, r24
    86ea:	7b 01       	movw	r14, r22
    86ec:	00 e0       	ldi	r16, 0x00	; 0
    86ee:	10 e0       	ldi	r17, 0x00	; 0
    86f0:	0d c0       	rjmp	.+26     	; 0x870c <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    86f2:	17 ff       	sbrs	r17, 7
    86f4:	0b c0       	rjmp	.+22     	; 0x870c <f_printf+0x182>
				val = 0 - val;
    86f6:	10 95       	com	r17
    86f8:	00 95       	com	r16
    86fa:	f0 94       	com	r15
    86fc:	e0 94       	com	r14
    86fe:	e1 1c       	adc	r14, r1
    8700:	f1 1c       	adc	r15, r1
    8702:	01 1d       	adc	r16, r1
    8704:	11 1d       	adc	r17, r1
				f |= 4;
    8706:	bb 89       	ldd	r27, Y+19	; 0x13
    8708:	b4 60       	ori	r27, 0x04	; 4
    870a:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    870c:	18 8a       	std	Y+16, r1	; 0x10
    870e:	3f e0       	ldi	r19, 0x0F	; 15
    8710:	c3 2e       	mov	r12, r19
    8712:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    8714:	22 2e       	mov	r2, r18
    8716:	33 24       	eor	r3, r3
    8718:	44 24       	eor	r4, r4
    871a:	55 24       	eor	r5, r5
    871c:	c8 01       	movw	r24, r16
    871e:	b7 01       	movw	r22, r14
    8720:	a2 01       	movw	r20, r4
    8722:	91 01       	movw	r18, r2
    8724:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    8728:	86 2f       	mov	r24, r22
    872a:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    872c:	8a 33       	cpi	r24, 0x3A	; 58
    872e:	08 f0       	brcs	.+2      	; 0x8732 <f_printf+0x1a8>
    8730:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    8732:	08 94       	sec
    8734:	c1 08       	sbc	r12, r1
    8736:	d1 08       	sbc	r13, r1
    8738:	e1 e0       	ldi	r30, 0x01	; 1
    873a:	f0 e0       	ldi	r31, 0x00	; 0
    873c:	ec 0f       	add	r30, r28
    873e:	fd 1f       	adc	r31, r29
    8740:	ec 0d       	add	r30, r12
    8742:	fd 1d       	adc	r31, r13
    8744:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    8746:	c1 14       	cp	r12, r1
    8748:	d1 04       	cpc	r13, r1
    874a:	e9 f0       	breq	.+58     	; 0x8786 <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    874c:	c8 01       	movw	r24, r16
    874e:	b7 01       	movw	r22, r14
    8750:	a2 01       	movw	r20, r4
    8752:	91 01       	movw	r18, r2
    8754:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    8758:	c9 01       	movw	r24, r18
    875a:	da 01       	movw	r26, r20
    875c:	7c 01       	movw	r14, r24
    875e:	8d 01       	movw	r16, r26
		} while (i && val);
    8760:	e1 14       	cp	r14, r1
    8762:	f1 04       	cpc	r15, r1
    8764:	01 05       	cpc	r16, r1
    8766:	11 05       	cpc	r17, r1
    8768:	c9 f6       	brne	.-78     	; 0x871c <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    876a:	eb 89       	ldd	r30, Y+19	; 0x13
    876c:	e2 ff       	sbrs	r30, 2
    876e:	0b c0       	rjmp	.+22     	; 0x8786 <f_printf+0x1fc>
    8770:	08 94       	sec
    8772:	c1 08       	sbc	r12, r1
    8774:	d1 08       	sbc	r13, r1
    8776:	e1 e0       	ldi	r30, 0x01	; 1
    8778:	f0 e0       	ldi	r31, 0x00	; 0
    877a:	ec 0f       	add	r30, r28
    877c:	fd 1f       	adc	r31, r29
    877e:	ec 0d       	add	r30, r12
    8780:	fd 1d       	adc	r31, r13
    8782:	4d e2       	ldi	r20, 0x2D	; 45
    8784:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    8786:	8f e0       	ldi	r24, 0x0F	; 15
    8788:	90 e0       	ldi	r25, 0x00	; 0
    878a:	8a 19       	sub	r24, r10
    878c:	9b 09       	sbc	r25, r11
    878e:	08 94       	sec
    8790:	c1 08       	sbc	r12, r1
    8792:	d1 08       	sbc	r13, r1
    8794:	e1 e0       	ldi	r30, 0x01	; 1
    8796:	f0 e0       	ldi	r31, 0x00	; 0
    8798:	ec 0f       	add	r30, r28
    879a:	fd 1f       	adc	r31, r29
    879c:	ec 0d       	add	r30, r12
    879e:	fd 1d       	adc	r31, r13
    87a0:	08 94       	sec
    87a2:	c1 1c       	adc	r12, r1
    87a4:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    87a6:	ab 89       	ldd	r26, Y+19	; 0x13
    87a8:	2a 2f       	mov	r18, r26
    87aa:	30 e0       	ldi	r19, 0x00	; 0
    87ac:	21 70       	andi	r18, 0x01	; 1
    87ae:	30 70       	andi	r19, 0x00	; 0
    87b0:	0b c0       	rjmp	.+22     	; 0x87c8 <f_printf+0x23e>
    87b2:	08 94       	sec
    87b4:	c1 08       	sbc	r12, r1
    87b6:	d1 08       	sbc	r13, r1
    87b8:	21 15       	cp	r18, r1
    87ba:	31 05       	cpc	r19, r1
    87bc:	11 f4       	brne	.+4      	; 0x87c2 <f_printf+0x238>
    87be:	40 e2       	ldi	r20, 0x20	; 32
    87c0:	01 c0       	rjmp	.+2      	; 0x87c4 <f_printf+0x23a>
    87c2:	40 e3       	ldi	r20, 0x30	; 48
    87c4:	40 83       	st	Z, r20
    87c6:	31 97       	sbiw	r30, 0x01	; 1
    87c8:	c1 14       	cp	r12, r1
    87ca:	d1 04       	cpc	r13, r1
    87cc:	19 f0       	breq	.+6      	; 0x87d4 <f_printf+0x24a>
    87ce:	8c 15       	cp	r24, r12
    87d0:	9d 05       	cpc	r25, r13
    87d2:	7c f3       	brlt	.-34     	; 0x87b2 <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    87d4:	81 e0       	ldi	r24, 0x01	; 1
    87d6:	90 e0       	ldi	r25, 0x00	; 0
    87d8:	8c 0f       	add	r24, r28
    87da:	9d 1f       	adc	r25, r29
    87dc:	8c 0d       	add	r24, r12
    87de:	9d 1d       	adc	r25, r13
    87e0:	69 a5       	ldd	r22, Y+41	; 0x29
    87e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    87e4:	0e 94 0d 2b 	call	0x561a	; 0x561a <f_puts>
    87e8:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    87ea:	e9 89       	ldd	r30, Y+17	; 0x11
    87ec:	fa 89       	ldd	r31, Y+18	; 0x12
    87ee:	e2 0f       	add	r30, r18
    87f0:	f3 1f       	adc	r31, r19
    87f2:	e9 8b       	std	Y+17, r30	; 0x11
    87f4:	fa 8b       	std	Y+18, r31	; 0x12
    87f6:	ff ef       	ldi	r31, 0xFF	; 255
    87f8:	2f 3f       	cpi	r18, 0xFF	; 255
    87fa:	3f 07       	cpc	r19, r31
    87fc:	41 f0       	breq	.+16     	; 0x880e <f_printf+0x284>
    87fe:	84 01       	movw	r16, r8
    8800:	e4 ce       	rjmp	.-568    	; 0x85ca <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    8802:	4f ef       	ldi	r20, 0xFF	; 255
    8804:	2f 3f       	cpi	r18, 0xFF	; 255
    8806:	34 07       	cpc	r19, r20
    8808:	11 f0       	breq	.+4      	; 0x880e <f_printf+0x284>
    880a:	29 89       	ldd	r18, Y+17	; 0x11
    880c:	3a 89       	ldd	r19, Y+18	; 0x12
}
    880e:	c9 01       	movw	r24, r18
    8810:	63 96       	adiw	r28, 0x13	; 19
    8812:	cd bf       	out	0x3d, r28	; 61
    8814:	de bf       	out	0x3e, r29	; 62
    8816:	cf 91       	pop	r28
    8818:	df 91       	pop	r29
    881a:	1f 91       	pop	r17
    881c:	0f 91       	pop	r16
    881e:	ff 90       	pop	r15
    8820:	ef 90       	pop	r14
    8822:	df 90       	pop	r13
    8824:	cf 90       	pop	r12
    8826:	bf 90       	pop	r11
    8828:	af 90       	pop	r10
    882a:	9f 90       	pop	r9
    882c:	8f 90       	pop	r8
    882e:	7f 90       	pop	r7
    8830:	6f 90       	pop	r6
    8832:	5f 90       	pop	r5
    8834:	4f 90       	pop	r4
    8836:	3f 90       	pop	r3
    8838:	2f 90       	pop	r2
    883a:	08 95       	ret

0000883c <__mulsi3>:
    883c:	62 9f       	mul	r22, r18
    883e:	d0 01       	movw	r26, r0
    8840:	73 9f       	mul	r23, r19
    8842:	f0 01       	movw	r30, r0
    8844:	82 9f       	mul	r24, r18
    8846:	e0 0d       	add	r30, r0
    8848:	f1 1d       	adc	r31, r1
    884a:	64 9f       	mul	r22, r20
    884c:	e0 0d       	add	r30, r0
    884e:	f1 1d       	adc	r31, r1
    8850:	92 9f       	mul	r25, r18
    8852:	f0 0d       	add	r31, r0
    8854:	83 9f       	mul	r24, r19
    8856:	f0 0d       	add	r31, r0
    8858:	74 9f       	mul	r23, r20
    885a:	f0 0d       	add	r31, r0
    885c:	65 9f       	mul	r22, r21
    885e:	f0 0d       	add	r31, r0
    8860:	99 27       	eor	r25, r25
    8862:	72 9f       	mul	r23, r18
    8864:	b0 0d       	add	r27, r0
    8866:	e1 1d       	adc	r30, r1
    8868:	f9 1f       	adc	r31, r25
    886a:	63 9f       	mul	r22, r19
    886c:	b0 0d       	add	r27, r0
    886e:	e1 1d       	adc	r30, r1
    8870:	f9 1f       	adc	r31, r25
    8872:	bd 01       	movw	r22, r26
    8874:	cf 01       	movw	r24, r30
    8876:	11 24       	eor	r1, r1
    8878:	08 95       	ret

0000887a <__divmodhi4>:
    887a:	97 fb       	bst	r25, 7
    887c:	09 2e       	mov	r0, r25
    887e:	07 26       	eor	r0, r23
    8880:	0a d0       	rcall	.+20     	; 0x8896 <__divmodhi4_neg1>
    8882:	77 fd       	sbrc	r23, 7
    8884:	04 d0       	rcall	.+8      	; 0x888e <__divmodhi4_neg2>
    8886:	2e d0       	rcall	.+92     	; 0x88e4 <__udivmodhi4>
    8888:	06 d0       	rcall	.+12     	; 0x8896 <__divmodhi4_neg1>
    888a:	00 20       	and	r0, r0
    888c:	1a f4       	brpl	.+6      	; 0x8894 <__divmodhi4_exit>

0000888e <__divmodhi4_neg2>:
    888e:	70 95       	com	r23
    8890:	61 95       	neg	r22
    8892:	7f 4f       	sbci	r23, 0xFF	; 255

00008894 <__divmodhi4_exit>:
    8894:	08 95       	ret

00008896 <__divmodhi4_neg1>:
    8896:	f6 f7       	brtc	.-4      	; 0x8894 <__divmodhi4_exit>
    8898:	90 95       	com	r25
    889a:	81 95       	neg	r24
    889c:	9f 4f       	sbci	r25, 0xFF	; 255
    889e:	08 95       	ret

000088a0 <__udivmodsi4>:
    88a0:	a1 e2       	ldi	r26, 0x21	; 33
    88a2:	1a 2e       	mov	r1, r26
    88a4:	aa 1b       	sub	r26, r26
    88a6:	bb 1b       	sub	r27, r27
    88a8:	fd 01       	movw	r30, r26
    88aa:	0d c0       	rjmp	.+26     	; 0x88c6 <__udivmodsi4_ep>

000088ac <__udivmodsi4_loop>:
    88ac:	aa 1f       	adc	r26, r26
    88ae:	bb 1f       	adc	r27, r27
    88b0:	ee 1f       	adc	r30, r30
    88b2:	ff 1f       	adc	r31, r31
    88b4:	a2 17       	cp	r26, r18
    88b6:	b3 07       	cpc	r27, r19
    88b8:	e4 07       	cpc	r30, r20
    88ba:	f5 07       	cpc	r31, r21
    88bc:	20 f0       	brcs	.+8      	; 0x88c6 <__udivmodsi4_ep>
    88be:	a2 1b       	sub	r26, r18
    88c0:	b3 0b       	sbc	r27, r19
    88c2:	e4 0b       	sbc	r30, r20
    88c4:	f5 0b       	sbc	r31, r21

000088c6 <__udivmodsi4_ep>:
    88c6:	66 1f       	adc	r22, r22
    88c8:	77 1f       	adc	r23, r23
    88ca:	88 1f       	adc	r24, r24
    88cc:	99 1f       	adc	r25, r25
    88ce:	1a 94       	dec	r1
    88d0:	69 f7       	brne	.-38     	; 0x88ac <__udivmodsi4_loop>
    88d2:	60 95       	com	r22
    88d4:	70 95       	com	r23
    88d6:	80 95       	com	r24
    88d8:	90 95       	com	r25
    88da:	9b 01       	movw	r18, r22
    88dc:	ac 01       	movw	r20, r24
    88de:	bd 01       	movw	r22, r26
    88e0:	cf 01       	movw	r24, r30
    88e2:	08 95       	ret

000088e4 <__udivmodhi4>:
    88e4:	aa 1b       	sub	r26, r26
    88e6:	bb 1b       	sub	r27, r27
    88e8:	51 e1       	ldi	r21, 0x11	; 17
    88ea:	07 c0       	rjmp	.+14     	; 0x88fa <__udivmodhi4_ep>

000088ec <__udivmodhi4_loop>:
    88ec:	aa 1f       	adc	r26, r26
    88ee:	bb 1f       	adc	r27, r27
    88f0:	a6 17       	cp	r26, r22
    88f2:	b7 07       	cpc	r27, r23
    88f4:	10 f0       	brcs	.+4      	; 0x88fa <__udivmodhi4_ep>
    88f6:	a6 1b       	sub	r26, r22
    88f8:	b7 0b       	sbc	r27, r23

000088fa <__udivmodhi4_ep>:
    88fa:	88 1f       	adc	r24, r24
    88fc:	99 1f       	adc	r25, r25
    88fe:	5a 95       	dec	r21
    8900:	a9 f7       	brne	.-22     	; 0x88ec <__udivmodhi4_loop>
    8902:	80 95       	com	r24
    8904:	90 95       	com	r25
    8906:	bc 01       	movw	r22, r24
    8908:	cd 01       	movw	r24, r26
    890a:	08 95       	ret

0000890c <strtok>:
    890c:	4c e5       	ldi	r20, 0x5C	; 92
    890e:	5c e2       	ldi	r21, 0x2C	; 44
    8910:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <strtok_r>
    8914:	08 95       	ret

00008916 <memmove>:
    8916:	68 17       	cp	r22, r24
    8918:	79 07       	cpc	r23, r25
    891a:	68 f4       	brcc	.+26     	; 0x8936 <memmove+0x20>
    891c:	fb 01       	movw	r30, r22
    891e:	dc 01       	movw	r26, r24
    8920:	e4 0f       	add	r30, r20
    8922:	f5 1f       	adc	r31, r21
    8924:	a4 0f       	add	r26, r20
    8926:	b5 1f       	adc	r27, r21
    8928:	02 c0       	rjmp	.+4      	; 0x892e <memmove+0x18>
    892a:	02 90       	ld	r0, -Z
    892c:	0e 92       	st	-X, r0
    892e:	41 50       	subi	r20, 0x01	; 1
    8930:	50 40       	sbci	r21, 0x00	; 0
    8932:	d8 f7       	brcc	.-10     	; 0x892a <memmove+0x14>
    8934:	08 95       	ret
    8936:	0c 94 90 45 	jmp	0x8b20	; 0x8b20 <memcpy>

0000893a <strcasecmp>:
    893a:	fb 01       	movw	r30, r22
    893c:	dc 01       	movw	r26, r24
    893e:	8d 91       	ld	r24, X+
    8940:	81 34       	cpi	r24, 0x41	; 65
    8942:	1c f0       	brlt	.+6      	; 0x894a <strcasecmp+0x10>
    8944:	8b 35       	cpi	r24, 0x5B	; 91
    8946:	0c f4       	brge	.+2      	; 0x894a <strcasecmp+0x10>
    8948:	80 5e       	subi	r24, 0xE0	; 224
    894a:	61 91       	ld	r22, Z+
    894c:	61 34       	cpi	r22, 0x41	; 65
    894e:	1c f0       	brlt	.+6      	; 0x8956 <strcasecmp+0x1c>
    8950:	6b 35       	cpi	r22, 0x5B	; 91
    8952:	0c f4       	brge	.+2      	; 0x8956 <strcasecmp+0x1c>
    8954:	60 5e       	subi	r22, 0xE0	; 224
    8956:	86 1b       	sub	r24, r22
    8958:	61 11       	cpse	r22, r1
    895a:	89 f3       	breq	.-30     	; 0x893e <strcasecmp+0x4>
    895c:	99 0b       	sbc	r25, r25
    895e:	08 95       	ret

00008960 <strcasestr>:
    8960:	fb 01       	movw	r30, r22
    8962:	51 91       	ld	r21, Z+
    8964:	55 23       	and	r21, r21
    8966:	b1 f0       	breq	.+44     	; 0x8994 <strcasestr+0x34>
    8968:	bf 01       	movw	r22, r30
    896a:	dc 01       	movw	r26, r24
    896c:	05 2e       	mov	r0, r21
    896e:	4d 91       	ld	r20, X+
    8970:	44 23       	and	r20, r20
    8972:	69 f0       	breq	.+26     	; 0x898e <strcasestr+0x2e>
    8974:	10 d0       	rcall	.+32     	; 0x8996 <strcasestr+0x36>
    8976:	d9 f7       	brne	.-10     	; 0x896e <strcasestr+0xe>
    8978:	cd 01       	movw	r24, r26
    897a:	01 90       	ld	r0, Z+
    897c:	00 20       	and	r0, r0
    897e:	49 f0       	breq	.+18     	; 0x8992 <strcasestr+0x32>
    8980:	4d 91       	ld	r20, X+
    8982:	41 11       	cpse	r20, r1
    8984:	08 d0       	rcall	.+16     	; 0x8996 <strcasestr+0x36>
    8986:	c9 f3       	breq	.-14     	; 0x897a <strcasestr+0x1a>
    8988:	fb 01       	movw	r30, r22
    898a:	41 11       	cpse	r20, r1
    898c:	ee cf       	rjmp	.-36     	; 0x896a <strcasestr+0xa>
    898e:	81 e0       	ldi	r24, 0x01	; 1
    8990:	90 e0       	ldi	r25, 0x00	; 0
    8992:	01 97       	sbiw	r24, 0x01	; 1
    8994:	08 95       	ret
    8996:	40 25       	eor	r20, r0
    8998:	39 f0       	breq	.+14     	; 0x89a8 <strcasestr+0x48>
    899a:	40 32       	cpi	r20, 0x20	; 32
    899c:	29 f4       	brne	.+10     	; 0x89a8 <strcasestr+0x48>
    899e:	40 29       	or	r20, r0
    89a0:	4b 57       	subi	r20, 0x7B	; 123
    89a2:	46 5e       	subi	r20, 0xE6	; 230
    89a4:	08 f0       	brcs	.+2      	; 0x89a8 <strcasestr+0x48>
    89a6:	18 94       	sez
    89a8:	08 95       	ret

000089aa <strcat>:
    89aa:	fb 01       	movw	r30, r22
    89ac:	dc 01       	movw	r26, r24
    89ae:	0d 90       	ld	r0, X+
    89b0:	00 20       	and	r0, r0
    89b2:	e9 f7       	brne	.-6      	; 0x89ae <strcat+0x4>
    89b4:	11 97       	sbiw	r26, 0x01	; 1
    89b6:	01 90       	ld	r0, Z+
    89b8:	0d 92       	st	X+, r0
    89ba:	00 20       	and	r0, r0
    89bc:	e1 f7       	brne	.-8      	; 0x89b6 <strcat+0xc>
    89be:	08 95       	ret

000089c0 <strcmp>:
    89c0:	fb 01       	movw	r30, r22
    89c2:	dc 01       	movw	r26, r24
    89c4:	8d 91       	ld	r24, X+
    89c6:	01 90       	ld	r0, Z+
    89c8:	80 19       	sub	r24, r0
    89ca:	01 10       	cpse	r0, r1
    89cc:	d9 f3       	breq	.-10     	; 0x89c4 <strcmp+0x4>
    89ce:	99 0b       	sbc	r25, r25
    89d0:	08 95       	ret

000089d2 <strcpy>:
    89d2:	fb 01       	movw	r30, r22
    89d4:	dc 01       	movw	r26, r24
    89d6:	01 90       	ld	r0, Z+
    89d8:	0d 92       	st	X+, r0
    89da:	00 20       	and	r0, r0
    89dc:	e1 f7       	brne	.-8      	; 0x89d6 <strcpy+0x4>
    89de:	08 95       	ret

000089e0 <strstr>:
    89e0:	fb 01       	movw	r30, r22
    89e2:	51 91       	ld	r21, Z+
    89e4:	55 23       	and	r21, r21
    89e6:	a9 f0       	breq	.+42     	; 0x8a12 <strstr+0x32>
    89e8:	bf 01       	movw	r22, r30
    89ea:	dc 01       	movw	r26, r24
    89ec:	4d 91       	ld	r20, X+
    89ee:	45 17       	cp	r20, r21
    89f0:	41 11       	cpse	r20, r1
    89f2:	e1 f7       	brne	.-8      	; 0x89ec <strstr+0xc>
    89f4:	59 f4       	brne	.+22     	; 0x8a0c <strstr+0x2c>
    89f6:	cd 01       	movw	r24, r26
    89f8:	01 90       	ld	r0, Z+
    89fa:	00 20       	and	r0, r0
    89fc:	49 f0       	breq	.+18     	; 0x8a10 <strstr+0x30>
    89fe:	4d 91       	ld	r20, X+
    8a00:	40 15       	cp	r20, r0
    8a02:	41 11       	cpse	r20, r1
    8a04:	c9 f3       	breq	.-14     	; 0x89f8 <strstr+0x18>
    8a06:	fb 01       	movw	r30, r22
    8a08:	41 11       	cpse	r20, r1
    8a0a:	ef cf       	rjmp	.-34     	; 0x89ea <strstr+0xa>
    8a0c:	81 e0       	ldi	r24, 0x01	; 1
    8a0e:	90 e0       	ldi	r25, 0x00	; 0
    8a10:	01 97       	sbiw	r24, 0x01	; 1
    8a12:	08 95       	ret

00008a14 <strtok_r>:
    8a14:	fa 01       	movw	r30, r20
    8a16:	a1 91       	ld	r26, Z+
    8a18:	b0 81       	ld	r27, Z
    8a1a:	00 97       	sbiw	r24, 0x00	; 0
    8a1c:	19 f4       	brne	.+6      	; 0x8a24 <strtok_r+0x10>
    8a1e:	10 97       	sbiw	r26, 0x00	; 0
    8a20:	e1 f0       	breq	.+56     	; 0x8a5a <strtok_r+0x46>
    8a22:	cd 01       	movw	r24, r26
    8a24:	dc 01       	movw	r26, r24
    8a26:	cd 01       	movw	r24, r26
    8a28:	0d 90       	ld	r0, X+
    8a2a:	00 20       	and	r0, r0
    8a2c:	11 f4       	brne	.+4      	; 0x8a32 <strtok_r+0x1e>
    8a2e:	c0 01       	movw	r24, r0
    8a30:	13 c0       	rjmp	.+38     	; 0x8a58 <strtok_r+0x44>
    8a32:	fb 01       	movw	r30, r22
    8a34:	21 91       	ld	r18, Z+
    8a36:	22 23       	and	r18, r18
    8a38:	19 f0       	breq	.+6      	; 0x8a40 <strtok_r+0x2c>
    8a3a:	20 15       	cp	r18, r0
    8a3c:	d9 f7       	brne	.-10     	; 0x8a34 <strtok_r+0x20>
    8a3e:	f3 cf       	rjmp	.-26     	; 0x8a26 <strtok_r+0x12>
    8a40:	fb 01       	movw	r30, r22
    8a42:	21 91       	ld	r18, Z+
    8a44:	20 15       	cp	r18, r0
    8a46:	19 f4       	brne	.+6      	; 0x8a4e <strtok_r+0x3a>
    8a48:	1e 92       	st	-X, r1
    8a4a:	11 96       	adiw	r26, 0x01	; 1
    8a4c:	06 c0       	rjmp	.+12     	; 0x8a5a <strtok_r+0x46>
    8a4e:	22 23       	and	r18, r18
    8a50:	c1 f7       	brne	.-16     	; 0x8a42 <strtok_r+0x2e>
    8a52:	0d 90       	ld	r0, X+
    8a54:	00 20       	and	r0, r0
    8a56:	a1 f7       	brne	.-24     	; 0x8a40 <strtok_r+0x2c>
    8a58:	d0 01       	movw	r26, r0
    8a5a:	fa 01       	movw	r30, r20
    8a5c:	a1 93       	st	Z+, r26
    8a5e:	b0 83       	st	Z, r27
    8a60:	08 95       	ret

00008a62 <strupr>:
    8a62:	dc 01       	movw	r26, r24
    8a64:	6c 91       	ld	r22, X
    8a66:	61 56       	subi	r22, 0x61	; 97
    8a68:	6a 31       	cpi	r22, 0x1A	; 26
    8a6a:	08 f0       	brcs	.+2      	; 0x8a6e <strupr+0xc>
    8a6c:	60 5e       	subi	r22, 0xE0	; 224
    8a6e:	6f 5b       	subi	r22, 0xBF	; 191
    8a70:	6d 93       	st	X+, r22
    8a72:	c1 f7       	brne	.-16     	; 0x8a64 <strupr+0x2>
    8a74:	08 95       	ret

00008a76 <itoa>:
    8a76:	fb 01       	movw	r30, r22
    8a78:	9f 01       	movw	r18, r30
    8a7a:	e8 94       	clt
    8a7c:	42 30       	cpi	r20, 0x02	; 2
    8a7e:	c4 f0       	brlt	.+48     	; 0x8ab0 <itoa+0x3a>
    8a80:	45 32       	cpi	r20, 0x25	; 37
    8a82:	b4 f4       	brge	.+44     	; 0x8ab0 <itoa+0x3a>
    8a84:	4a 30       	cpi	r20, 0x0A	; 10
    8a86:	29 f4       	brne	.+10     	; 0x8a92 <itoa+0x1c>
    8a88:	97 fb       	bst	r25, 7
    8a8a:	1e f4       	brtc	.+6      	; 0x8a92 <itoa+0x1c>
    8a8c:	90 95       	com	r25
    8a8e:	81 95       	neg	r24
    8a90:	9f 4f       	sbci	r25, 0xFF	; 255
    8a92:	64 2f       	mov	r22, r20
    8a94:	77 27       	eor	r23, r23
    8a96:	0e 94 72 44 	call	0x88e4	; 0x88e4 <__udivmodhi4>
    8a9a:	80 5d       	subi	r24, 0xD0	; 208
    8a9c:	8a 33       	cpi	r24, 0x3A	; 58
    8a9e:	0c f0       	brlt	.+2      	; 0x8aa2 <itoa+0x2c>
    8aa0:	89 5d       	subi	r24, 0xD9	; 217
    8aa2:	81 93       	st	Z+, r24
    8aa4:	cb 01       	movw	r24, r22
    8aa6:	00 97       	sbiw	r24, 0x00	; 0
    8aa8:	a1 f7       	brne	.-24     	; 0x8a92 <itoa+0x1c>
    8aaa:	16 f4       	brtc	.+4      	; 0x8ab0 <itoa+0x3a>
    8aac:	5d e2       	ldi	r21, 0x2D	; 45
    8aae:	51 93       	st	Z+, r21
    8ab0:	10 82       	st	Z, r1
    8ab2:	c9 01       	movw	r24, r18
    8ab4:	0c 94 99 45 	jmp	0x8b32	; 0x8b32 <strrev>

00008ab8 <ltoa>:
    8ab8:	fa 01       	movw	r30, r20
    8aba:	cf 93       	push	r28
    8abc:	ff 93       	push	r31
    8abe:	ef 93       	push	r30
    8ac0:	22 30       	cpi	r18, 0x02	; 2
    8ac2:	44 f1       	brlt	.+80     	; 0x8b14 <ltoa+0x5c>
    8ac4:	25 32       	cpi	r18, 0x25	; 37
    8ac6:	34 f5       	brge	.+76     	; 0x8b14 <ltoa+0x5c>
    8ac8:	c2 2f       	mov	r28, r18
    8aca:	e8 94       	clt
    8acc:	ca 30       	cpi	r28, 0x0A	; 10
    8ace:	49 f4       	brne	.+18     	; 0x8ae2 <ltoa+0x2a>
    8ad0:	97 fb       	bst	r25, 7
    8ad2:	3e f4       	brtc	.+14     	; 0x8ae2 <ltoa+0x2a>
    8ad4:	90 95       	com	r25
    8ad6:	80 95       	com	r24
    8ad8:	70 95       	com	r23
    8ada:	61 95       	neg	r22
    8adc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ade:	8f 4f       	sbci	r24, 0xFF	; 255
    8ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae2:	2c 2f       	mov	r18, r28
    8ae4:	33 27       	eor	r19, r19
    8ae6:	44 27       	eor	r20, r20
    8ae8:	55 27       	eor	r21, r21
    8aea:	ff 93       	push	r31
    8aec:	ef 93       	push	r30
    8aee:	0e 94 50 44 	call	0x88a0	; 0x88a0 <__udivmodsi4>
    8af2:	ef 91       	pop	r30
    8af4:	ff 91       	pop	r31
    8af6:	60 5d       	subi	r22, 0xD0	; 208
    8af8:	6a 33       	cpi	r22, 0x3A	; 58
    8afa:	0c f0       	brlt	.+2      	; 0x8afe <ltoa+0x46>
    8afc:	69 5d       	subi	r22, 0xD9	; 217
    8afe:	61 93       	st	Z+, r22
    8b00:	b9 01       	movw	r22, r18
    8b02:	ca 01       	movw	r24, r20
    8b04:	60 50       	subi	r22, 0x00	; 0
    8b06:	70 40       	sbci	r23, 0x00	; 0
    8b08:	80 40       	sbci	r24, 0x00	; 0
    8b0a:	90 40       	sbci	r25, 0x00	; 0
    8b0c:	51 f7       	brne	.-44     	; 0x8ae2 <ltoa+0x2a>
    8b0e:	16 f4       	brtc	.+4      	; 0x8b14 <ltoa+0x5c>
    8b10:	cd e2       	ldi	r28, 0x2D	; 45
    8b12:	c1 93       	st	Z+, r28
    8b14:	10 82       	st	Z, r1
    8b16:	8f 91       	pop	r24
    8b18:	9f 91       	pop	r25
    8b1a:	cf 91       	pop	r28
    8b1c:	0c 94 99 45 	jmp	0x8b32	; 0x8b32 <strrev>

00008b20 <memcpy>:
    8b20:	fb 01       	movw	r30, r22
    8b22:	dc 01       	movw	r26, r24
    8b24:	02 c0       	rjmp	.+4      	; 0x8b2a <memcpy+0xa>
    8b26:	01 90       	ld	r0, Z+
    8b28:	0d 92       	st	X+, r0
    8b2a:	41 50       	subi	r20, 0x01	; 1
    8b2c:	50 40       	sbci	r21, 0x00	; 0
    8b2e:	d8 f7       	brcc	.-10     	; 0x8b26 <memcpy+0x6>
    8b30:	08 95       	ret

00008b32 <strrev>:
    8b32:	dc 01       	movw	r26, r24
    8b34:	fc 01       	movw	r30, r24
    8b36:	67 2f       	mov	r22, r23
    8b38:	71 91       	ld	r23, Z+
    8b3a:	77 23       	and	r23, r23
    8b3c:	e1 f7       	brne	.-8      	; 0x8b36 <strrev+0x4>
    8b3e:	32 97       	sbiw	r30, 0x02	; 2
    8b40:	04 c0       	rjmp	.+8      	; 0x8b4a <strrev+0x18>
    8b42:	7c 91       	ld	r23, X
    8b44:	6d 93       	st	X+, r22
    8b46:	70 83       	st	Z, r23
    8b48:	62 91       	ld	r22, -Z
    8b4a:	ae 17       	cp	r26, r30
    8b4c:	bf 07       	cpc	r27, r31
    8b4e:	c8 f3       	brcs	.-14     	; 0x8b42 <strrev+0x10>
    8b50:	08 95       	ret

00008b52 <_exit>:
    8b52:	f8 94       	cli

00008b54 <__stop_program>:
    8b54:	ff cf       	rjmp	.-2      	; 0x8b54 <__stop_program>
