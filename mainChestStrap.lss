
mainChestStrap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000760  00802000  00008f1e  00008fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003155  00802760  00802760  00009712  2**0
                  ALLOC
  3 .stab         00001644  00000000  00000000  00009714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000541  00000000  00000000  0000ad58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000b299  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001281  00000000  00000000  0000b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007367  00000000  00000000  0000c55a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006ba  00000000  00000000  000138c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000057e4  00000000  00000000  00013f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000910  00000000  00000000  00019760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000364b  00000000  00000000  0001a070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005a64  00000000  00000000  0001d6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a0  00000000  00000000  0002311f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 55 2d 	jmp	0x5aaa	; 0x5aaa <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 b0 3f 	jmp	0x7f60	; 0x7f60 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 82 36 	jmp	0x6d04	; 0x6d04 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 76 30 	jmp	0x60ec	; 0x60ec <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 ff 35 	jmp	0x6bfe	; 0x6bfe <__vector_104>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	17 e2       	ldi	r17, 0x27	; 39
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ee e1       	ldi	r30, 0x1E	; 30
     200:	ff e8       	ldi	r31, 0x8F	; 143
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a0 36       	cpi	r26, 0x60	; 96
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	18 e5       	ldi	r17, 0x58	; 88
     214:	a0 e6       	ldi	r26, 0x60	; 96
     216:	b7 e2       	ldi	r27, 0x27	; 39
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a5 3b       	cpi	r26, 0xB5	; 181
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 e7 43 	call	0x87ce	; 0x87ce <main>
     226:	0c 94 8d 47 	jmp	0x8f1a	; 0x8f1a <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <CCPWrite>:
bool demoMode = false;
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
     22e:	0f 93       	push	r16
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	0f 92       	push	r0
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
     23a:	2f b7       	in	r18, 0x3f	; 63
     23c:	29 83       	std	Y+1, r18	; 0x01
    cli();
     23e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     240:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     242:	fc 01       	movw	r30, r24
     244:	08 ed       	ldi	r16, 0xD8	; 216
     246:	04 bf       	out	0x34, r16	; 52
     248:	60 83       	st	Z, r22
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	8f bf       	out	0x3f, r24	; 63
}
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;

volatile uint32_t	Debug_timeOutCounter = 0;

void Debug_Init(uint32_t baud){
     258:	9b 01       	movw	r18, r22
     25a:	ac 01       	movw	r20, r24
	DMA.Debug_DMA_Channel.DESTADDR1 = (((uint16_t)(&DebugBuffer[0]) >> 8) & 0xFF);
	DMA.Debug_DMA_Channel.DESTADDR2 = 0x00;
	
	DMA.Debug_DMA_Channel.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;*/
	
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     25c:	e0 e4       	ldi	r30, 0x40	; 64
     25e:	f6 e0       	ldi	r31, 0x06	; 6
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.DIRSET = (1<<Debug_CTS_pin);
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	81 83       	std	Z+1, r24	; 0x01
	Debug_Flow_Port.OUTCLR = (1<<Debug_CTS_pin);
     270:	86 83       	std	Z+6, r24	; 0x06

	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     272:	e0 ea       	ldi	r30, 0xA0	; 160
     274:	f8 e0       	ldi	r31, 0x08	; 8
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     27a:	20 38       	cpi	r18, 0x80	; 128
     27c:	65 e2       	ldi	r22, 0x25	; 37
     27e:	36 07       	cpc	r19, r22
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	46 07       	cpc	r20, r22
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	56 07       	cpc	r21, r22
     288:	11 f4       	brne	.+4      	; 0x28e <Debug_Init+0x36>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     28a:	8f e5       	ldi	r24, 0x5F	; 95
     28c:	09 c0       	rjmp	.+18     	; 0x2a0 <Debug_Init+0x48>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     28e:	20 30       	cpi	r18, 0x00	; 0
     290:	62 ec       	ldi	r22, 0xC2	; 194
     292:	36 07       	cpc	r19, r22
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	46 07       	cpc	r20, r22
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	56 07       	cpc	r21, r22
     29c:	19 f4       	brne	.+6      	; 0x2a4 <Debug_Init+0x4c>
		Debug_Usart.BAUDCTRLA = 7 & 0xFF;
     29e:	87 e0       	ldi	r24, 0x07	; 7
     2a0:	86 83       	std	Z+6, r24	; 0x06
     2a2:	18 c0       	rjmp	.+48     	; 0x2d4 <Debug_Init+0x7c>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     2a4:	20 30       	cpi	r18, 0x00	; 0
     2a6:	64 e8       	ldi	r22, 0x84	; 132
     2a8:	36 07       	cpc	r19, r22
     2aa:	63 e0       	ldi	r22, 0x03	; 3
     2ac:	46 07       	cpc	r20, r22
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	56 07       	cpc	r21, r22
     2b2:	b1 f3       	breq	.-20     	; 0x2a0 <Debug_Init+0x48>
		Debug_Usart.BAUDCTRLA = 3 & 0xFF;
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	}else if(baud == 460800){
     2b4:	20 30       	cpi	r18, 0x00	; 0
     2b6:	88 e0       	ldi	r24, 0x08	; 8
     2b8:	38 07       	cpc	r19, r24
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	48 07       	cpc	r20, r24
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	58 07       	cpc	r21, r24
     2c2:	11 f4       	brne	.+4      	; 0x2c8 <Debug_Init+0x70>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     2c4:	96 83       	std	Z+6, r25	; 0x06
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <Debug_Init+0x7c>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     2c8:	20 50       	subi	r18, 0x00	; 0
     2ca:	30 41       	sbci	r19, 0x10	; 16
     2cc:	4e 40       	sbci	r20, 0x0E	; 14
     2ce:	50 40       	sbci	r21, 0x00	; 0
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <Debug_Init+0x7e>
		Debug_Usart.BAUDCTRLA = 0 & 0xFF;
     2d2:	16 82       	std	Z+6, r1	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     2d4:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     2d6:	e0 ea       	ldi	r30, 0xA0	; 160
     2d8:	f8 e0       	ldi	r31, 0x08	; 8
     2da:	80 91 a4 08 	lds	r24, 0x08A4
     2de:	80 61       	ori	r24, 0x10	; 16
     2e0:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     2e2:	80 91 a4 08 	lds	r24, 0x08A4
     2e6:	88 60       	ori	r24, 0x08	; 8
     2e8:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     2ea:	80 91 a3 08 	lds	r24, 0x08A3
     2ee:	80 62       	ori	r24, 0x20	; 32
     2f0:	83 83       	std	Z+3, r24	; 0x03
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
     2f2:	20 91 7b 27 	lds	r18, 0x277B
     2f6:	30 91 7c 27 	lds	r19, 0x277C
     2fa:	80 91 79 27 	lds	r24, 0x2779
     2fe:	90 91 7a 27 	lds	r25, 0x277A
     302:	28 17       	cp	r18, r24
     304:	39 07       	cpc	r19, r25
     306:	41 f0       	breq	.+16     	; 0x318 <Debug_Init+0xc0>
void Debug_ClearBuffer(void){
	if(Debug_CharReadyToRead()){
		//Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
		//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
		//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
		Debug_readLocation = Debug_writeLocation;
     308:	80 91 7b 27 	lds	r24, 0x277B
     30c:	90 91 7c 27 	lds	r25, 0x277C
     310:	80 93 79 27 	sts	0x2779, r24
     314:	90 93 7a 27 	sts	0x277A, r25
     318:	08 95       	ret

0000031a <Debug_ClearBuffer>:
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
     31a:	20 91 7b 27 	lds	r18, 0x277B
     31e:	30 91 7c 27 	lds	r19, 0x277C
     322:	80 91 79 27 	lds	r24, 0x2779
     326:	90 91 7a 27 	lds	r25, 0x277A
     32a:	28 17       	cp	r18, r24
     32c:	39 07       	cpc	r19, r25
     32e:	41 f0       	breq	.+16     	; 0x340 <Debug_ClearBuffer+0x26>
void Debug_ClearBuffer(void){
	if(Debug_CharReadyToRead()){
		//Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
		//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
		//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
		Debug_readLocation = Debug_writeLocation;
     330:	80 91 7b 27 	lds	r24, 0x277B
     334:	90 91 7c 27 	lds	r25, 0x277C
     338:	80 93 79 27 	sts	0x2779, r24
     33c:	90 93 7a 27 	sts	0x277A, r25
     340:	08 95       	ret

00000342 <Debug_CharReadyToRead>:
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
     342:	20 91 7b 27 	lds	r18, 0x277B
     346:	30 91 7c 27 	lds	r19, 0x277C
     34a:	80 91 79 27 	lds	r24, 0x2779
     34e:	90 91 7a 27 	lds	r25, 0x277A
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	28 17       	cp	r18, r24
     356:	39 07       	cpc	r19, r25
     358:	09 f0       	breq	.+2      	; 0x35c <Debug_CharReadyToRead+0x1a>
     35a:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     35c:	84 2f       	mov	r24, r20
     35e:	08 95       	ret

00000360 <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     360:	88 23       	and	r24, r24
     362:	59 f0       	breq	.+22     	; 0x37a <Debug_GetByte+0x1a>
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
     364:	20 91 7b 27 	lds	r18, 0x277B
     368:	30 91 7c 27 	lds	r19, 0x277C
     36c:	80 91 79 27 	lds	r24, 0x2779
     370:	90 91 7a 27 	lds	r25, 0x277A
     374:	28 17       	cp	r18, r24
     376:	39 07       	cpc	r19, r25
     378:	a9 f3       	breq	.-22     	; 0x364 <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     37a:	e0 91 79 27 	lds	r30, 0x2779
     37e:	f0 91 7a 27 	lds	r31, 0x277A
     382:	e5 5d       	subi	r30, 0xD5	; 213
     384:	f4 4b       	sbci	r31, 0xB4	; 180
     386:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     388:	80 91 79 27 	lds	r24, 0x2779
     38c:	90 91 7a 27 	lds	r25, 0x277A
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	80 93 79 27 	sts	0x2779, r24
     396:	90 93 7a 27 	sts	0x277A, r25
	if(Debug_readLocation >= Debug_BufferSize){
     39a:	80 91 79 27 	lds	r24, 0x2779
     39e:	90 91 7a 27 	lds	r25, 0x277A
     3a2:	84 36       	cpi	r24, 0x64	; 100
     3a4:	91 05       	cpc	r25, r1
     3a6:	20 f0       	brcs	.+8      	; 0x3b0 <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     3a8:	10 92 79 27 	sts	0x2779, r1
     3ac:	10 92 7a 27 	sts	0x277A, r1
	}
	return tmp;
}
     3b0:	8e 2f       	mov	r24, r30
     3b2:	08 95       	ret

000003b4 <Debug_SendByte>:


bool Debug_SendByte(uint8_t data){
     3b4:	48 2f       	mov	r20, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     3b6:	80 91 a1 08 	lds	r24, 0x08A1
     3ba:	85 ff       	sbrs	r24, 5
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <Debug_SendByte+0x2>
     3be:	2e c0       	rjmp	.+92     	; 0x41c <Debug_SendByte+0x68>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){	// Wait for RTS to be low
		Debug_timeOutCounter++;
     3c0:	80 91 7d 27 	lds	r24, 0x277D
     3c4:	90 91 7e 27 	lds	r25, 0x277E
     3c8:	a0 91 7f 27 	lds	r26, 0x277F
     3cc:	b0 91 80 27 	lds	r27, 0x2780
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	a1 1d       	adc	r26, r1
     3d4:	b1 1d       	adc	r27, r1
     3d6:	80 93 7d 27 	sts	0x277D, r24
     3da:	90 93 7e 27 	sts	0x277E, r25
     3de:	a0 93 7f 27 	sts	0x277F, r26
     3e2:	b0 93 80 27 	sts	0x2780, r27
		if(Debug_timeOutCounter > 10000){
     3e6:	80 91 7d 27 	lds	r24, 0x277D
     3ea:	90 91 7e 27 	lds	r25, 0x277E
     3ee:	a0 91 7f 27 	lds	r26, 0x277F
     3f2:	b0 91 80 27 	lds	r27, 0x2780
     3f6:	81 51       	subi	r24, 0x11	; 17
     3f8:	97 42       	sbci	r25, 0x27	; 39
     3fa:	a0 40       	sbci	r26, 0x00	; 0
     3fc:	b0 40       	sbci	r27, 0x00	; 0
     3fe:	50 f0       	brcs	.+20     	; 0x414 <Debug_SendByte+0x60>
			Debug_timeOutCounter = 0;
     400:	10 92 7d 27 	sts	0x277D, r1
     404:	10 92 7e 27 	sts	0x277E, r1
     408:	10 92 7f 27 	sts	0x277F, r1
     40c:	10 92 80 27 	sts	0x2780, r1
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	08 95       	ret
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     414:	c9 01       	movw	r24, r18
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <Debug_SendByte+0x62>
     41a:	02 c0       	rjmp	.+4      	; 0x420 <Debug_SendByte+0x6c>
     41c:	26 e6       	ldi	r18, 0x66	; 102
     41e:	3e e0       	ldi	r19, 0x0E	; 14
}


bool Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){	// Wait for RTS to be low
     420:	80 91 48 06 	lds	r24, 0x0648
     424:	80 fd       	sbrc	r24, 0
     426:	cc cf       	rjmp	.-104    	; 0x3c0 <Debug_SendByte+0xc>
			return false;
		} else {
			_delay_ms(1);
		}
	}
	Debug_Usart.DATA = data;
     428:	40 93 a0 08 	sts	0x08A0, r20
     42c:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
     42e:	08 95       	ret

00000430 <__vector_25>:
		}
	}
	return true;
}

ISR(Debug_INTVector){
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     446:	e0 91 7b 27 	lds	r30, 0x277B
     44a:	f0 91 7c 27 	lds	r31, 0x277C
     44e:	80 91 a0 08 	lds	r24, 0x08A0
     452:	e5 5d       	subi	r30, 0xD5	; 213
     454:	f4 4b       	sbci	r31, 0xB4	; 180
     456:	80 83       	st	Z, r24
	Debug_writeLocation++;
     458:	80 91 7b 27 	lds	r24, 0x277B
     45c:	90 91 7c 27 	lds	r25, 0x277C
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	80 93 7b 27 	sts	0x277B, r24
     466:	90 93 7c 27 	sts	0x277C, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     46a:	80 91 7b 27 	lds	r24, 0x277B
     46e:	90 91 7c 27 	lds	r25, 0x277C
     472:	84 36       	cpi	r24, 0x64	; 100
     474:	91 05       	cpc	r25, r1
     476:	20 f0       	brcs	.+8      	; 0x480 <__vector_25+0x50>
		Debug_writeLocation = 0;
     478:	10 92 7b 27 	sts	0x277B, r1
     47c:	10 92 7c 27 	sts	0x277C, r1
	}
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	0f 90       	pop	r0
     48a:	0b be       	out	0x3b, r0	; 59
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <Leds_Init>:

volatile uint8_t ledState[numberOfLeds]; 
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
     496:	e8 2f       	mov	r30, r24
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 2e       	mov	r0, r30
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <Leds_Init+0x10>
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <Leds_Init+0xc>
     4aa:	a0 ea       	ldi	r26, 0xA0	; 160
     4ac:	b6 e0       	ldi	r27, 0x06	; 6
     4ae:	11 96       	adiw	r26, 0x01	; 1
     4b0:	8c 93       	st	X, r24
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
     4b2:	ea 58       	subi	r30, 0x8A	; 138
     4b4:	f8 4c       	sbci	r31, 0xC8	; 200
     4b6:	10 82       	st	Z, r1
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
	Leds_State(led, off);
}
     4b8:	08 95       	ret

000004ba <Leds_State>:

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
     4ba:	e6 e7       	ldi	r30, 0x76	; 118
     4bc:	f7 e3       	ldi	r31, 0x37	; 55
     4be:	e8 0f       	add	r30, r24
     4c0:	f1 1d       	adc	r31, r1
     4c2:	60 83       	st	Z, r22
}
     4c4:	08 95       	ret

000004c6 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1<<led);
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <Leds_Set+0xa>
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	8a 95       	dec	r24
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <Leds_Set+0x6>
     4d4:	e0 ea       	ldi	r30, 0xA0	; 160
     4d6:	f6 e0       	ldi	r31, 0x06	; 6
     4d8:	25 83       	std	Z+5, r18	; 0x05
}
     4da:	08 95       	ret

000004dc <Leds_Clear>:


void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1<<led);
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <Leds_Clear+0xa>
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	8a 95       	dec	r24
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <Leds_Clear+0x6>
     4ea:	e0 ea       	ldi	r30, 0xA0	; 160
     4ec:	f6 e0       	ldi	r31, 0x06	; 6
     4ee:	26 83       	std	Z+6, r18	; 0x06
}
     4f0:	08 95       	ret

000004f2 <Leds_Toggle>:


void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1<<led);	
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <Leds_Toggle+0xa>
     4f8:	22 0f       	add	r18, r18
     4fa:	33 1f       	adc	r19, r19
     4fc:	8a 95       	dec	r24
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <Leds_Toggle+0x6>
     500:	e0 ea       	ldi	r30, 0xA0	; 160
     502:	f6 e0       	ldi	r31, 0x06	; 6
     504:	27 83       	std	Z+7, r18	; 0x07
     506:	08 95       	ret

00000508 <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
	Time_TimerHigh.CTRLA = Time_EventClockSource; //Select event channel 0 as clock source for TCC1.
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
	EVSYS.Time_EventChannelMux = Time_EventInput;
     50e:	80 ec       	ldi	r24, 0xC0	; 192
     510:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
	Time_TimerLow.PER = 0xFFFF;
     514:	e0 e0       	ldi	r30, 0x00	; 0
     516:	f8 e0       	ldi	r31, 0x08	; 8
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	9f ef       	ldi	r25, 0xFF	; 255
     51c:	86 a3       	std	Z+38, r24	; 0x26
     51e:	97 a3       	std	Z+39, r25	; 0x27
	Time_TimerLow.CTRLA = (Time_TimerLow.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
     520:	80 81       	ld	r24, Z
     522:	80 7f       	andi	r24, 0xF0	; 240
     524:	84 60       	ori	r24, 0x04	; 4
     526:	80 83       	st	Z, r24
	
	
}
     528:	08 95       	ret

0000052a <Time_Set>:

void Time_Set(uint32_t time){
     52a:	0f 93       	push	r16
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0f 92       	push	r0
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	ab 01       	movw	r20, r22
     538:	bc 01       	movw	r22, r24
	cli();
     53a:	f8 94       	cli
	VBAT.CTRL = VBAT_ACCEN_bm;
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     542:	8f b7       	in	r24, 0x3f	; 63
     544:	89 83       	std	Y+1, r24	; 0x01
    cli();
     546:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     548:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	80 ef       	ldi	r24, 0xF0	; 240
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	08 ed       	ldi	r16, 0xD8	; 216
     554:	04 bf       	out	0x34, r16	; 52
     556:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	8f bf       	out	0x3f, r24	; 63
	CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
	VBAT.CTRL |= VBAT_XOSCFDEN_bm;				// enable oscillator failure detection
     55c:	80 91 f0 00 	lds	r24, 0x00F0
     560:	84 60       	ori	r24, 0x04	; 4
     562:	80 93 f0 00 	sts	0x00F0, r24
	VBAT.CTRL |= VBAT_XOSCEN_bm;				// enable 1hz output from oscillator
     566:	80 91 f0 00 	lds	r24, 0x00F0
     56a:	88 60       	ori	r24, 0x08	; 8
     56c:	80 93 f0 00 	sts	0x00F0, r24
	
	/* Disable the RTC32 module before writing to it. Wait for synch. */
	RTC32.CTRL &= ~RTC32_ENABLE_bm;
     570:	80 91 20 04 	lds	r24, 0x0420
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     57a:	e0 e2       	ldi	r30, 0x20	; 32
     57c:	f4 e0       	ldi	r31, 0x04	; 4
     57e:	80 91 21 04 	lds	r24, 0x0421
     582:	80 fd       	sbrc	r24, 0
     584:	fa cf       	rjmp	.-12     	; 0x57a <Time_Set+0x50>
	
	/* Write PER, COMP and CNT. */
	RTC32.PER = 0xFFFFFFFF - 1;
     586:	8e ef       	ldi	r24, 0xFE	; 254
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	af ef       	ldi	r26, 0xFF	; 255
     58c:	bf ef       	ldi	r27, 0xFF	; 255
     58e:	80 87       	std	Z+8, r24	; 0x08
     590:	91 87       	std	Z+9, r25	; 0x09
     592:	a2 87       	std	Z+10, r26	; 0x0a
     594:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.COMP = 0;
     596:	14 86       	std	Z+12, r1	; 0x0c
     598:	15 86       	std	Z+13, r1	; 0x0d
     59a:	16 86       	std	Z+14, r1	; 0x0e
     59c:	17 86       	std	Z+15, r1	; 0x0f
	RTC32.CNT = time;
     59e:	44 83       	std	Z+4, r20	; 0x04
     5a0:	55 83       	std	Z+5, r21	; 0x05
     5a2:	66 83       	std	Z+6, r22	; 0x06
     5a4:	77 83       	std	Z+7, r23	; 0x07
	
	/* Re-enable the RTC32 module, synchronize before returning. */
	RTC32.CTRL |= RTC32_ENABLE_bm;
     5a6:	80 91 20 04 	lds	r24, 0x0420
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     5b0:	80 91 21 04 	lds	r24, 0x0421
     5b4:	80 fd       	sbrc	r24, 0
     5b6:	fc cf       	rjmp	.-8      	; 0x5b0 <Time_Set+0x86>
	
	RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
     5b8:	80 91 22 04 	lds	r24, 0x0422
     5bc:	83 7f       	andi	r24, 0xF3	; 243
     5be:	84 60       	ori	r24, 0x04	; 4
     5c0:	e0 e2       	ldi	r30, 0x20	; 32
     5c2:	f4 e0       	ldi	r31, 0x04	; 4
     5c4:	82 83       	std	Z+2, r24	; 0x02
	sei();
     5c6:	78 94       	sei
}
     5c8:	0f 90       	pop	r0
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <Time_CheckVBatSystem>:

bool Time_CheckVBatSystem(void){
	if (VBAT.STATUS & VBAT_BBPWR_bm){
     5d2:	80 91 f1 00 	lds	r24, 0x00F1
     5d6:	87 fd       	sbrc	r24, 7
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <Time_CheckVBatSystem+0x2c>
		return false;
	} else {
		if (VBAT.STATUS & VBAT_BBPORF_bm) {
     5da:	80 91 f1 00 	lds	r24, 0x00F1
     5de:	80 fd       	sbrc	r24, 0
     5e0:	0e c0       	rjmp	.+28     	; 0x5fe <Time_CheckVBatSystem+0x2c>
			return false;
		} else if (VBAT.STATUS & VBAT_BBBORF_bm){
     5e2:	80 91 f1 00 	lds	r24, 0x00F1
     5e6:	81 fd       	sbrc	r24, 1
     5e8:	0a c0       	rjmp	.+20     	; 0x5fe <Time_CheckVBatSystem+0x2c>
			return false;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 f0 00 	sts	0x00F0, r24
			if (VBAT.STATUS & VBAT_XOSCFAIL_bm){
     5f0:	80 91 f1 00 	lds	r24, 0x00F1
     5f4:	86 95       	lsr	r24
     5f6:	86 95       	lsr	r24
     5f8:	80 95       	com	r24
     5fa:	81 70       	andi	r24, 0x01	; 1
     5fc:	08 95       	ret
     5fe:	80 e0       	ldi	r24, 0x00	; 0
				return false;
			} 
		}
	}
	return true;
}
     600:	08 95       	ret

00000602 <Time_Get>:

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
     602:	80 91 21 04 	lds	r24, 0x0421
     606:	80 61       	ori	r24, 0x10	; 16
     608:	e0 e2       	ldi	r30, 0x20	; 32
     60a:	f4 e0       	ldi	r31, 0x04	; 4
     60c:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
     60e:	80 91 21 04 	lds	r24, 0x0421
     612:	84 fd       	sbrc	r24, 4
     614:	fc cf       	rjmp	.-8      	; 0x60e <Time_Get+0xc>
	return RTC32.CNT;
     616:	20 91 24 04 	lds	r18, 0x0424
     61a:	30 91 25 04 	lds	r19, 0x0425
     61e:	40 91 26 04 	lds	r20, 0x0426
     622:	50 91 27 04 	lds	r21, 0x0427
	//sei();
}
     626:	b9 01       	movw	r22, r18
     628:	ca 01       	movw	r24, r20
     62a:	08 95       	ret

0000062c <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
     62c:	f8 94       	cli
  uint16_t high = Time_TimerHighCNT;
     62e:	20 91 60 08 	lds	r18, 0x0860
     632:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = Time_TimerLowCNT;
     636:	60 91 20 08 	lds	r22, 0x0820
     63a:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != Time_TimerHighCNT){
     63e:	80 91 60 08 	lds	r24, 0x0860
     642:	90 91 61 08 	lds	r25, 0x0861
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	41 f0       	breq	.+16     	; 0x65c <Time_Get32BitTimer+0x30>
	 high = Time_TimerHighCNT;
     64c:	20 91 60 08 	lds	r18, 0x0860
     650:	30 91 61 08 	lds	r19, 0x0861
	 low  = Time_TimerLowCNT;
     654:	60 91 20 08 	lds	r22, 0x0820
     658:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
     65c:	78 94       	sei
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	a9 01       	movw	r20, r18
     664:	33 27       	eor	r19, r19
     666:	22 27       	eor	r18, r18
     668:	cb 01       	movw	r24, r22
     66a:	a0 e0       	ldi	r26, 0x00	; 0
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	4a 1f       	adc	r20, r26
     674:	5b 1f       	adc	r21, r27
  return result;
}
     676:	b9 01       	movw	r22, r18
     678:	ca 01       	movw	r24, r20
     67a:	08 95       	ret

0000067c <Time_UTCSecsToTime>:


//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * Time_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
     67c:	8f 92       	push	r8
     67e:	9f 92       	push	r9
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	7b 01       	movw	r14, r22
     696:	8c 01       	movw	r16, r24
     698:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
     69a:	2c e3       	ldi	r18, 0x3C	; 60
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     6a6:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
     6a8:	c8 01       	movw	r24, r16
     6aa:	b7 01       	movw	r22, r14
     6ac:	2c e3       	ldi	r18, 0x3C	; 60
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     6b8:	12 2f       	mov	r17, r18
     6ba:	03 2f       	mov	r16, r19
     6bc:	f4 2e       	mov	r15, r20
     6be:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
     6c0:	62 2f       	mov	r22, r18
     6c2:	73 2f       	mov	r23, r19
     6c4:	84 2f       	mov	r24, r20
     6c6:	95 2f       	mov	r25, r21
     6c8:	2c e3       	ldi	r18, 0x3C	; 60
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     6d4:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
     6d6:	61 2f       	mov	r22, r17
     6d8:	70 2f       	mov	r23, r16
     6da:	8f 2d       	mov	r24, r15
     6dc:	9e 2d       	mov	r25, r14
     6de:	2c e3       	ldi	r18, 0x3C	; 60
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     6ea:	12 2f       	mov	r17, r18
     6ec:	03 2f       	mov	r16, r19
     6ee:	f4 2e       	mov	r15, r20
     6f0:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
     6f2:	62 2f       	mov	r22, r18
     6f4:	73 2f       	mov	r23, r19
     6f6:	84 2f       	mov	r24, r20
     6f8:	95 2f       	mov	r25, r21
     6fa:	28 e1       	ldi	r18, 0x18	; 24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     706:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
     708:	61 2f       	mov	r22, r17
     70a:	70 2f       	mov	r23, r16
     70c:	8f 2d       	mov	r24, r15
     70e:	9e 2d       	mov	r25, r14
     710:	28 e1       	ldi	r18, 0x18	; 24
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     71c:	79 01       	movw	r14, r18
     71e:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
     720:	c8 01       	movw	r24, r16
     722:	b7 01       	movw	r22, r14
     724:	6c 5f       	subi	r22, 0xFC	; 252
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	8f 4f       	sbci	r24, 0xFF	; 255
     72a:	9f 4f       	sbci	r25, 0xFF	; 255
     72c:	27 e0       	ldi	r18, 0x07	; 7
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	6c 83       	std	Y+4, r22	; 0x04
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	aa 24       	eor	r10, r10
     740:	bb 24       	eor	r11, r11
     742:	65 01       	movw	r12, r10
     744:	01 c0       	rjmp	.+2      	; 0x748 <Time_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
     746:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
     748:	82 2e       	mov	r8, r18
     74a:	99 24       	eor	r9, r9
     74c:	f4 01       	movw	r30, r8
     74e:	ee 54       	subi	r30, 0x4E	; 78
     750:	f8 4f       	sbci	r31, 0xF8	; 248
     752:	cf 01       	movw	r24, r30
     754:	83 70       	andi	r24, 0x03	; 3
     756:	90 70       	andi	r25, 0x00	; 0
     758:	89 2b       	or	r24, r25
     75a:	99 f4       	brne	.+38     	; 0x782 <Time_UTCSecsToTime+0x106>
     75c:	cf 01       	movw	r24, r30
     75e:	64 e6       	ldi	r22, 0x64	; 100
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	0e 94 21 46 	call	0x8c42	; 0x8c42 <__divmodhi4>
     766:	89 2b       	or	r24, r25
     768:	39 f4       	brne	.+14     	; 0x778 <Time_UTCSecsToTime+0xfc>
     76a:	cf 01       	movw	r24, r30
     76c:	60 e9       	ldi	r22, 0x90	; 144
     76e:	71 e0       	ldi	r23, 0x01	; 1
     770:	0e 94 21 46 	call	0x8c42	; 0x8c42 <__divmodhi4>
     774:	89 2b       	or	r24, r25
     776:	29 f4       	brne	.+10     	; 0x782 <Time_UTCSecsToTime+0x106>
     778:	8e e6       	ldi	r24, 0x6E	; 110
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	a0 e0       	ldi	r26, 0x00	; 0
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	04 c0       	rjmp	.+8      	; 0x78a <Time_UTCSecsToTime+0x10e>
     782:	8d e6       	ldi	r24, 0x6D	; 109
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	a0 e0       	ldi	r26, 0x00	; 0
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	a8 0e       	add	r10, r24
     78c:	b9 1e       	adc	r11, r25
     78e:	ca 1e       	adc	r12, r26
     790:	db 1e       	adc	r13, r27
     792:	c5 01       	movw	r24, r10
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	e8 16       	cp	r14, r24
     79a:	f9 06       	cpc	r15, r25
     79c:	0a 07       	cpc	r16, r26
     79e:	1b 07       	cpc	r17, r27
     7a0:	90 f6       	brcc	.-92     	; 0x746 <Time_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
     7a2:	2f 83       	std	Y+7, r18	; 0x07
	
	
	days -= LEAP_YEAR(year) ? 366 : 365;
     7a4:	f4 01       	movw	r30, r8
     7a6:	ee 54       	subi	r30, 0x4E	; 78
     7a8:	f8 4f       	sbci	r31, 0xF8	; 248
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	89 2e       	mov	r8, r25
     7ae:	91 2c       	mov	r9, r1
     7b0:	8e 22       	and	r8, r30
     7b2:	9f 22       	and	r9, r31
     7b4:	81 14       	cp	r8, r1
     7b6:	91 04       	cpc	r9, r1
     7b8:	99 f4       	brne	.+38     	; 0x7e0 <Time_UTCSecsToTime+0x164>
     7ba:	cf 01       	movw	r24, r30
     7bc:	64 e6       	ldi	r22, 0x64	; 100
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	0e 94 21 46 	call	0x8c42	; 0x8c42 <__divmodhi4>
     7c4:	89 2b       	or	r24, r25
     7c6:	39 f4       	brne	.+14     	; 0x7d6 <Time_UTCSecsToTime+0x15a>
     7c8:	cf 01       	movw	r24, r30
     7ca:	60 e9       	ldi	r22, 0x90	; 144
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	0e 94 21 46 	call	0x8c42	; 0x8c42 <__divmodhi4>
     7d2:	89 2b       	or	r24, r25
     7d4:	29 f4       	brne	.+10     	; 0x7e0 <Time_UTCSecsToTime+0x164>
     7d6:	8e e6       	ldi	r24, 0x6E	; 110
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <Time_UTCSecsToTime+0x16c>
     7e0:	8d e6       	ldi	r24, 0x6D	; 109
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
     7e8:	a8 1a       	sub	r10, r24
     7ea:	b9 0a       	sbc	r11, r25
     7ec:	ca 0a       	sbc	r12, r26
     7ee:	db 0a       	sbc	r13, r27
     7f0:	98 01       	movw	r18, r16
     7f2:	87 01       	movw	r16, r14
     7f4:	0a 19       	sub	r16, r10
     7f6:	1b 09       	sbc	r17, r11
     7f8:	2c 09       	sbc	r18, r12
     7fa:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
     7fc:	cf 01       	movw	r24, r30
     7fe:	64 e6       	ldi	r22, 0x64	; 100
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	0e 94 21 46 	call	0x8c42	; 0x8c42 <__divmodhi4>
     806:	7c 01       	movw	r14, r24
     808:	cf 01       	movw	r24, r30
     80a:	60 e9       	ldi	r22, 0x90	; 144
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	0e 94 21 46 	call	0x8c42	; 0x8c42 <__divmodhi4>
     812:	ac 01       	movw	r20, r24
     814:	e3 e5       	ldi	r30, 0x53	; 83
     816:	f7 e2       	ldi	r31, 0x27	; 39
     818:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
     81a:	61 30       	cpi	r22, 0x01	; 1
     81c:	51 f4       	brne	.+20     	; 0x832 <Time_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
     81e:	81 14       	cp	r8, r1
     820:	91 04       	cpc	r9, r1
     822:	49 f4       	brne	.+18     	; 0x836 <Time_UTCSecsToTime+0x1ba>
     824:	e1 14       	cp	r14, r1
     826:	f1 04       	cpc	r15, r1
     828:	41 f4       	brne	.+16     	; 0x83a <Time_UTCSecsToTime+0x1be>
     82a:	41 15       	cp	r20, r1
     82c:	51 05       	cpc	r21, r1
     82e:	29 f0       	breq	.+10     	; 0x83a <Time_UTCSecsToTime+0x1be>
     830:	02 c0       	rjmp	.+4      	; 0x836 <Time_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
     832:	80 81       	ld	r24, Z
     834:	03 c0       	rjmp	.+6      	; 0x83c <Time_UTCSecsToTime+0x1c0>
     836:	8c e1       	ldi	r24, 0x1C	; 28
     838:	01 c0       	rjmp	.+2      	; 0x83c <Time_UTCSecsToTime+0x1c0>
     83a:	8d e1       	ldi	r24, 0x1D	; 29
    	}
		
    	if (UTCSecs >= monthLength) {
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	a0 e0       	ldi	r26, 0x00	; 0
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	08 17       	cp	r16, r24
     844:	19 07       	cpc	r17, r25
     846:	2a 07       	cpc	r18, r26
     848:	3b 07       	cpc	r19, r27
     84a:	40 f0       	brcs	.+16     	; 0x85c <Time_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
     84c:	08 1b       	sub	r16, r24
     84e:	19 0b       	sbc	r17, r25
     850:	2a 0b       	sbc	r18, r26
     852:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
     854:	6f 5f       	subi	r22, 0xFF	; 255
     856:	31 96       	adiw	r30, 0x01	; 1
     858:	6c 30       	cpi	r22, 0x0C	; 12
     85a:	f9 f6       	brne	.-66     	; 0x81a <Time_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
     860:	80 2f       	mov	r24, r16
     862:	8f 5f       	subi	r24, 0xFF	; 255
     864:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
     866:	ce 01       	movw	r24, r28
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	08 95       	ret

00000882 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     882:	82 e3       	ldi	r24, 0x32	; 50
     884:	80 93 cb 27 	sts	0x27CB, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	e0 ec       	ldi	r30, 0xC0	; 192
     88c:	f9 e0       	ldi	r31, 0x09	; 9
     88e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     890:	80 91 c2 09 	lds	r24, 0x09C2
     894:	87 ff       	sbrs	r24, 7
     896:	fc cf       	rjmp	.-8      	; 0x890 <wait_ready+0xe>
	return SD_SPI.DATA;
     898:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     89c:	e0 ec       	ldi	r30, 0xC0	; 192
     89e:	f9 e0       	ldi	r31, 0x09	; 9
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8a4:	80 91 c2 09 	lds	r24, 0x09C2
     8a8:	87 ff       	sbrs	r24, 7
     8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <wait_ready+0x22>
	return SD_SPI.DATA;
     8ac:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     8b0:	9f 3f       	cpi	r25, 0xFF	; 255
     8b2:	21 f0       	breq	.+8      	; 0x8bc <wait_ready+0x3a>
     8b4:	80 91 cb 27 	lds	r24, 0x27CB
     8b8:	88 23       	and	r24, r24
     8ba:	99 f7       	brne	.-26     	; 0x8a2 <wait_ready+0x20>

	return res;
}
     8bc:	89 2f       	mov	r24, r25
     8be:	08 95       	ret

000008c0 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
	CS_LOW();
     8c6:	c0 e6       	ldi	r28, 0x60	; 96
     8c8:	d6 e0       	ldi	r29, 0x06	; 6
     8ca:	10 e1       	ldi	r17, 0x10	; 16
     8cc:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     8ce:	0e 94 41 04 	call	0x882	; 0x882 <wait_ready>
     8d2:	8f 3f       	cpi	r24, 0xFF	; 255
     8d4:	11 f4       	brne	.+4      	; 0x8da <select+0x1a>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     8da:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	e0 ec       	ldi	r30, 0xC0	; 192
     8e0:	f9 e0       	ldi	r31, 0x09	; 9
     8e2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8e4:	80 91 c2 09 	lds	r24, 0x09C2
     8e8:	87 ff       	sbrs	r24, 7
     8ea:	fc cf       	rjmp	.-8      	; 0x8e4 <select+0x24>
	return SD_SPI.DATA;
     8ec:	80 91 c3 09 	lds	r24, 0x09C3
     8f0:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	08 95       	ret

000008fa <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     8fa:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     8fc:	84 e1       	ldi	r24, 0x14	; 20
     8fe:	80 93 ca 27 	sts	0x27CA, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     902:	a0 ec       	ldi	r26, 0xC0	; 192
     904:	b9 e0       	ldi	r27, 0x09	; 9
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	13 96       	adiw	r26, 0x03	; 3
     90a:	9c 93       	st	X, r25
     90c:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     90e:	80 91 c2 09 	lds	r24, 0x09C2
     912:	87 ff       	sbrs	r24, 7
     914:	fc cf       	rjmp	.-8      	; 0x90e <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     916:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     91a:	8f 3f       	cpi	r24, 0xFF	; 255
     91c:	29 f4       	brne	.+10     	; 0x928 <rcvr_datablock+0x2e>
     91e:	80 91 ca 27 	lds	r24, 0x27CA
     922:	88 23       	and	r24, r24
     924:	89 f7       	brne	.-30     	; 0x908 <rcvr_datablock+0xe>
     926:	49 c0       	rjmp	.+146    	; 0x9ba <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     928:	8e 3f       	cpi	r24, 0xFE	; 254
     92a:	09 f0       	breq	.+2      	; 0x92e <rcvr_datablock+0x34>
     92c:	46 c0       	rjmp	.+140    	; 0x9ba <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     92e:	a0 ec       	ldi	r26, 0xC0	; 192
     930:	b9 e0       	ldi	r27, 0x09	; 9
     932:	9f ef       	ldi	r25, 0xFF	; 255
     934:	13 96       	adiw	r26, 0x03	; 3
     936:	9c 93       	st	X, r25
     938:	13 97       	sbiw	r26, 0x03	; 3
     93a:	80 91 c2 09 	lds	r24, 0x09C2
     93e:	87 ff       	sbrs	r24, 7
     940:	fc cf       	rjmp	.-8      	; 0x93a <rcvr_datablock+0x40>
     942:	80 91 c3 09 	lds	r24, 0x09C3
     946:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	9c 93       	st	X, r25
     94c:	13 97       	sbiw	r26, 0x03	; 3
     94e:	80 91 c2 09 	lds	r24, 0x09C2
     952:	87 ff       	sbrs	r24, 7
     954:	fc cf       	rjmp	.-8      	; 0x94e <rcvr_datablock+0x54>
     956:	80 91 c3 09 	lds	r24, 0x09C3
     95a:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     95c:	13 96       	adiw	r26, 0x03	; 3
     95e:	9c 93       	st	X, r25
     960:	13 97       	sbiw	r26, 0x03	; 3
     962:	80 91 c2 09 	lds	r24, 0x09C2
     966:	87 ff       	sbrs	r24, 7
     968:	fc cf       	rjmp	.-8      	; 0x962 <rcvr_datablock+0x68>
     96a:	80 91 c3 09 	lds	r24, 0x09C3
     96e:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     970:	13 96       	adiw	r26, 0x03	; 3
     972:	9c 93       	st	X, r25
     974:	13 97       	sbiw	r26, 0x03	; 3
     976:	80 91 c2 09 	lds	r24, 0x09C2
     97a:	87 ff       	sbrs	r24, 7
     97c:	fc cf       	rjmp	.-8      	; 0x976 <rcvr_datablock+0x7c>
     97e:	80 91 c3 09 	lds	r24, 0x09C3
     982:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     984:	64 50       	subi	r22, 0x04	; 4
     986:	70 40       	sbci	r23, 0x00	; 0
     988:	11 f0       	breq	.+4      	; 0x98e <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     98a:	34 96       	adiw	r30, 0x04	; 4
     98c:	d3 cf       	rjmp	.-90     	; 0x934 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	e0 ec       	ldi	r30, 0xC0	; 192
     992:	f9 e0       	ldi	r31, 0x09	; 9
     994:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     996:	80 91 c2 09 	lds	r24, 0x09C2
     99a:	87 ff       	sbrs	r24, 7
     99c:	fc cf       	rjmp	.-8      	; 0x996 <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     99e:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e0 ec       	ldi	r30, 0xC0	; 192
     9a6:	f9 e0       	ldi	r31, 0x09	; 9
     9a8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9aa:	80 91 c2 09 	lds	r24, 0x09C2
     9ae:	87 ff       	sbrs	r24, 7
     9b0:	fc cf       	rjmp	.-8      	; 0x9aa <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     9b2:	80 91 c3 09 	lds	r24, 0x09C3
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     9ba:	80 e0       	ldi	r24, 0x00	; 0
}
     9bc:	08 95       	ret

000009be <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
     9c6:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     9c8:	0e 94 41 04 	call	0x882	; 0x882 <wait_ready>
     9cc:	8f 3f       	cpi	r24, 0xFF	; 255
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <xmit_datablock+0x16>
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	3f c0       	rjmp	.+126    	; 0xa52 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     9d4:	e0 ec       	ldi	r30, 0xC0	; 192
     9d6:	f9 e0       	ldi	r31, 0x09	; 9
     9d8:	13 83       	std	Z+3, r17	; 0x03
     9da:	80 91 c2 09 	lds	r24, 0x09C2
     9de:	87 ff       	sbrs	r24, 7
     9e0:	fc cf       	rjmp	.-8      	; 0x9da <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     9e2:	1d 3f       	cpi	r17, 0xFD	; 253
     9e4:	11 f4       	brne	.+4      	; 0x9ea <xmit_datablock+0x2c>
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	34 c0       	rjmp	.+104    	; 0xa52 <xmit_datablock+0x94>
     9ea:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     9ec:	e0 ec       	ldi	r30, 0xC0	; 192
     9ee:	f9 e0       	ldi	r31, 0x09	; 9
     9f0:	88 81       	ld	r24, Y
     9f2:	83 83       	std	Z+3, r24	; 0x03
     9f4:	80 91 c2 09 	lds	r24, 0x09C2
     9f8:	87 ff       	sbrs	r24, 7
     9fa:	fc cf       	rjmp	.-8      	; 0x9f4 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	83 83       	std	Z+3, r24	; 0x03
     a00:	80 91 c2 09 	lds	r24, 0x09C2
     a04:	87 ff       	sbrs	r24, 7
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <xmit_datablock+0x42>
		} while (--wc);
     a08:	91 50       	subi	r25, 0x01	; 1
     a0a:	11 f0       	breq	.+4      	; 0xa10 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a0c:	22 96       	adiw	r28, 0x02	; 2
     a0e:	f0 cf       	rjmp	.-32     	; 0x9f0 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	e0 ec       	ldi	r30, 0xC0	; 192
     a14:	f9 e0       	ldi	r31, 0x09	; 9
     a16:	83 83       	std	Z+3, r24	; 0x03
     a18:	80 91 c2 09 	lds	r24, 0x09C2
     a1c:	87 ff       	sbrs	r24, 7
     a1e:	fc cf       	rjmp	.-8      	; 0xa18 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	e0 ec       	ldi	r30, 0xC0	; 192
     a24:	f9 e0       	ldi	r31, 0x09	; 9
     a26:	83 83       	std	Z+3, r24	; 0x03
     a28:	80 91 c2 09 	lds	r24, 0x09C2
     a2c:	87 ff       	sbrs	r24, 7
     a2e:	fc cf       	rjmp	.-8      	; 0xa28 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	e0 ec       	ldi	r30, 0xC0	; 192
     a34:	f9 e0       	ldi	r31, 0x09	; 9
     a36:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a38:	80 91 c2 09 	lds	r24, 0x09C2
     a3c:	87 ff       	sbrs	r24, 7
     a3e:	fc cf       	rjmp	.-8      	; 0xa38 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     a40:	80 91 c3 09 	lds	r24, 0x09C3
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	8f 71       	andi	r24, 0x1F	; 31
     a48:	85 30       	cpi	r24, 0x05	; 5
     a4a:	09 f0       	breq	.+2      	; 0xa4e <xmit_datablock+0x90>
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     a52:	89 2f       	mov	r24, r25
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	08 95       	ret

00000a5c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	d8 2e       	mov	r13, r24
     a68:	7a 01       	movw	r14, r20
     a6a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     a6c:	87 ff       	sbrs	r24, 7
     a6e:	0c c0       	rjmp	.+24     	; 0xa88 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     a70:	87 e7       	ldi	r24, 0x77	; 119
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
		if (res > 1) return res;
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	08 f0       	brcs	.+2      	; 0xa84 <send_cmd+0x28>
     a82:	72 c0       	rjmp	.+228    	; 0xb68 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     a84:	8f e7       	ldi	r24, 0x7F	; 127
     a86:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	e0 e6       	ldi	r30, 0x60	; 96
     a8c:	f6 e0       	ldi	r31, 0x06	; 6
     a8e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	e0 ec       	ldi	r30, 0xC0	; 192
     a94:	f9 e0       	ldi	r31, 0x09	; 9
     a96:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a98:	80 91 c2 09 	lds	r24, 0x09C2
     a9c:	87 ff       	sbrs	r24, 7
     a9e:	fc cf       	rjmp	.-8      	; 0xa98 <send_cmd+0x3c>
	return SD_SPI.DATA;
     aa0:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     aa4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <select>
     aa8:	88 23       	and	r24, r24
     aaa:	11 f4       	brne	.+4      	; 0xab0 <send_cmd+0x54>
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	5c c0       	rjmp	.+184    	; 0xb68 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     ab0:	e0 ec       	ldi	r30, 0xC0	; 192
     ab2:	f9 e0       	ldi	r31, 0x09	; 9
     ab4:	d3 82       	std	Z+3, r13	; 0x03
     ab6:	80 91 c2 09 	lds	r24, 0x09C2
     aba:	87 ff       	sbrs	r24, 7
     abc:	fc cf       	rjmp	.-8      	; 0xab6 <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     abe:	81 2f       	mov	r24, r17
     ac0:	99 27       	eor	r25, r25
     ac2:	aa 27       	eor	r26, r26
     ac4:	bb 27       	eor	r27, r27
     ac6:	e0 ec       	ldi	r30, 0xC0	; 192
     ac8:	f9 e0       	ldi	r31, 0x09	; 9
     aca:	83 83       	std	Z+3, r24	; 0x03
     acc:	80 91 c2 09 	lds	r24, 0x09C2
     ad0:	87 ff       	sbrs	r24, 7
     ad2:	fc cf       	rjmp	.-8      	; 0xacc <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     ad4:	c8 01       	movw	r24, r16
     ad6:	aa 27       	eor	r26, r26
     ad8:	bb 27       	eor	r27, r27
     ada:	e0 ec       	ldi	r30, 0xC0	; 192
     adc:	f9 e0       	ldi	r31, 0x09	; 9
     ade:	83 83       	std	Z+3, r24	; 0x03
     ae0:	80 91 c2 09 	lds	r24, 0x09C2
     ae4:	87 ff       	sbrs	r24, 7
     ae6:	fc cf       	rjmp	.-8      	; 0xae0 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     ae8:	bb 27       	eor	r27, r27
     aea:	a1 2f       	mov	r26, r17
     aec:	90 2f       	mov	r25, r16
     aee:	8f 2d       	mov	r24, r15
     af0:	e0 ec       	ldi	r30, 0xC0	; 192
     af2:	f9 e0       	ldi	r31, 0x09	; 9
     af4:	83 83       	std	Z+3, r24	; 0x03
     af6:	80 91 c2 09 	lds	r24, 0x09C2
     afa:	87 ff       	sbrs	r24, 7
     afc:	fc cf       	rjmp	.-8      	; 0xaf6 <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     afe:	e0 ec       	ldi	r30, 0xC0	; 192
     b00:	f9 e0       	ldi	r31, 0x09	; 9
     b02:	e3 82       	std	Z+3, r14	; 0x03
     b04:	80 91 c2 09 	lds	r24, 0x09C2
     b08:	87 ff       	sbrs	r24, 7
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b0c:	80 e4       	ldi	r24, 0x40	; 64
     b0e:	d8 16       	cp	r13, r24
     b10:	11 f4       	brne	.+4      	; 0xb16 <send_cmd+0xba>
     b12:	85 e9       	ldi	r24, 0x95	; 149
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b16:	88 e4       	ldi	r24, 0x48	; 72
     b18:	d8 16       	cp	r13, r24
     b1a:	11 f4       	brne	.+4      	; 0xb20 <send_cmd+0xc4>
     b1c:	87 e8       	ldi	r24, 0x87	; 135
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <send_cmd+0xc6>
     b20:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b22:	e0 ec       	ldi	r30, 0xC0	; 192
     b24:	f9 e0       	ldi	r31, 0x09	; 9
     b26:	83 83       	std	Z+3, r24	; 0x03
     b28:	80 91 c2 09 	lds	r24, 0x09C2
     b2c:	87 ff       	sbrs	r24, 7
     b2e:	fc cf       	rjmp	.-8      	; 0xb28 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     b30:	8c e4       	ldi	r24, 0x4C	; 76
     b32:	d8 16       	cp	r13, r24
     b34:	51 f4       	brne	.+20     	; 0xb4a <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	e0 ec       	ldi	r30, 0xC0	; 192
     b3a:	f9 e0       	ldi	r31, 0x09	; 9
     b3c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b3e:	80 91 c2 09 	lds	r24, 0x09C2
     b42:	87 ff       	sbrs	r24, 7
     b44:	fc cf       	rjmp	.-8      	; 0xb3e <send_cmd+0xe2>
	return SD_SPI.DATA;
     b46:	80 91 c3 09 	lds	r24, 0x09C3
     b4a:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b4c:	e0 ec       	ldi	r30, 0xC0	; 192
     b4e:	f9 e0       	ldi	r31, 0x09	; 9
     b50:	2f ef       	ldi	r18, 0xFF	; 255
     b52:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b54:	80 91 c2 09 	lds	r24, 0x09C2
     b58:	87 ff       	sbrs	r24, 7
     b5a:	fc cf       	rjmp	.-8      	; 0xb54 <send_cmd+0xf8>
	return SD_SPI.DATA;
     b5c:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     b60:	87 ff       	sbrs	r24, 7
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <send_cmd+0x10c>
     b64:	91 50       	subi	r25, 0x01	; 1
     b66:	a9 f7       	brne	.-22     	; 0xb52 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	08 95       	ret

00000b74 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <disk_initialize+0xe>
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     b88:	80 91 52 27 	lds	r24, 0x2752
     b8c:	81 fd       	sbrc	r24, 1
     b8e:	cc c0       	rjmp	.+408    	; 0xd28 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     b90:	e0 e6       	ldi	r30, 0x60	; 96
     b92:	f6 e0       	ldi	r31, 0x06	; 6
     b94:	80 eb       	ldi	r24, 0xB0	; 176
     b96:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     b98:	88 e3       	ldi	r24, 0x38	; 56
     b9a:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     b9c:	14 82       	std	Z+4, r1	; 0x04
     b9e:	8c e2       	ldi	r24, 0x2C	; 44
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	20 e7       	ldi	r18, 0x70	; 112
     ba4:	31 e0       	ldi	r19, 0x01	; 1
     ba6:	f9 01       	movw	r30, r18
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bae:	d9 f7       	brne	.-10     	; 0xba6 <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     bb0:	83 e5       	ldi	r24, 0x53	; 83
     bb2:	80 93 c0 09 	sts	0x09C0, r24
     bb6:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bb8:	e0 ec       	ldi	r30, 0xC0	; 192
     bba:	f9 e0       	ldi	r31, 0x09	; 9
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bc0:	80 91 c2 09 	lds	r24, 0x09C2
     bc4:	87 ff       	sbrs	r24, 7
     bc6:	fc cf       	rjmp	.-8      	; 0xbc0 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     bc8:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     bcc:	91 50       	subi	r25, 0x01	; 1
     bce:	b9 f7       	brne	.-18     	; 0xbbe <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	09 f0       	breq	.+2      	; 0xbe4 <disk_initialize+0x70>
     be2:	87 c0       	rjmp	.+270    	; 0xcf2 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     be4:	84 e6       	ldi	r24, 0x64	; 100
     be6:	80 93 ca 27 	sts	0x27CA, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     bea:	88 e4       	ldi	r24, 0x48	; 72
     bec:	4a ea       	ldi	r20, 0xAA	; 170
     bee:	51 e0       	ldi	r21, 0x01	; 1
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <disk_initialize+0x8a>
     bfc:	53 c0       	rjmp	.+166    	; 0xca4 <disk_initialize+0x130>
     bfe:	7e 01       	movw	r14, r28
     c00:	08 94       	sec
     c02:	e1 1c       	adc	r14, r1
     c04:	f1 1c       	adc	r15, r1
     c06:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c08:	e0 ec       	ldi	r30, 0xC0	; 192
     c0a:	f9 e0       	ldi	r31, 0x09	; 9
     c0c:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c0e:	9e 01       	movw	r18, r28
     c10:	2b 5f       	subi	r18, 0xFB	; 251
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c14:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c16:	80 91 c2 09 	lds	r24, 0x09C2
     c1a:	87 ff       	sbrs	r24, 7
     c1c:	fc cf       	rjmp	.-8      	; 0xc16 <disk_initialize+0xa2>
	return SD_SPI.DATA;
     c1e:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c22:	d8 01       	movw	r26, r16
     c24:	8d 93       	st	X+, r24
     c26:	8d 01       	movw	r16, r26
     c28:	a2 17       	cp	r26, r18
     c2a:	b3 07       	cpc	r27, r19
     c2c:	99 f7       	brne	.-26     	; 0xc14 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	09 f0       	breq	.+2      	; 0xc36 <disk_initialize+0xc2>
     c34:	5e c0       	rjmp	.+188    	; 0xcf2 <disk_initialize+0x17e>
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	8a 3a       	cpi	r24, 0xAA	; 170
     c3a:	09 f0       	breq	.+2      	; 0xc3e <disk_initialize+0xca>
     c3c:	5a c0       	rjmp	.+180    	; 0xcf2 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     c3e:	80 91 ca 27 	lds	r24, 0x27CA
     c42:	88 23       	and	r24, r24
     c44:	49 f0       	breq	.+18     	; 0xc58 <disk_initialize+0xe4>
     c46:	89 ee       	ldi	r24, 0xE9	; 233
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e4       	ldi	r23, 0x40	; 64
     c50:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     c54:	88 23       	and	r24, r24
     c56:	99 f7       	brne	.-26     	; 0xc3e <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     c58:	80 91 ca 27 	lds	r24, 0x27CA
     c5c:	88 23       	and	r24, r24
     c5e:	09 f4       	brne	.+2      	; 0xc62 <disk_initialize+0xee>
     c60:	48 c0       	rjmp	.+144    	; 0xcf2 <disk_initialize+0x17e>
     c62:	8a e7       	ldi	r24, 0x7A	; 122
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     c70:	88 23       	and	r24, r24
     c72:	09 f0       	breq	.+2      	; 0xc76 <disk_initialize+0x102>
     c74:	3e c0       	rjmp	.+124    	; 0xcf2 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c76:	e0 ec       	ldi	r30, 0xC0	; 192
     c78:	f9 e0       	ldi	r31, 0x09	; 9
     c7a:	9f ef       	ldi	r25, 0xFF	; 255
     c7c:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c7e:	80 91 c2 09 	lds	r24, 0x09C2
     c82:	87 ff       	sbrs	r24, 7
     c84:	fc cf       	rjmp	.-8      	; 0xc7e <disk_initialize+0x10a>
	return SD_SPI.DATA;
     c86:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     c8a:	d7 01       	movw	r26, r14
     c8c:	8d 93       	st	X+, r24
     c8e:	7d 01       	movw	r14, r26
     c90:	a0 17       	cp	r26, r16
     c92:	b1 07       	cpc	r27, r17
     c94:	99 f7       	brne	.-26     	; 0xc7c <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 fd       	sbrc	r24, 6
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <disk_initialize+0x12c>
     c9c:	14 e0       	ldi	r17, 0x04	; 4
     c9e:	2a c0       	rjmp	.+84     	; 0xcf4 <disk_initialize+0x180>
     ca0:	1c e0       	ldi	r17, 0x0C	; 12
     ca2:	28 c0       	rjmp	.+80     	; 0xcf4 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     ca4:	89 ee       	ldi	r24, 0xE9	; 233
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	18 f0       	brcs	.+6      	; 0xcbc <disk_initialize+0x148>
     cb6:	01 e4       	ldi	r16, 0x41	; 65
     cb8:	11 e0       	ldi	r17, 0x01	; 1
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <disk_initialize+0x14c>
     cbc:	09 ee       	ldi	r16, 0xE9	; 233
     cbe:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     cc0:	80 91 ca 27 	lds	r24, 0x27CA
     cc4:	88 23       	and	r24, r24
     cc6:	49 f0       	breq	.+18     	; 0xcda <disk_initialize+0x166>
     cc8:	80 2f       	mov	r24, r16
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     cd6:	88 23       	and	r24, r24
     cd8:	99 f7       	brne	.-26     	; 0xcc0 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     cda:	80 91 ca 27 	lds	r24, 0x27CA
     cde:	88 23       	and	r24, r24
     ce0:	41 f0       	breq	.+16     	; 0xcf2 <disk_initialize+0x17e>
     ce2:	80 e5       	ldi	r24, 0x50	; 80
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	52 e0       	ldi	r21, 0x02	; 2
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     cf0:	81 11       	cpse	r24, r1
     cf2:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     cf4:	10 93 cc 27 	sts	0x27CC, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     cf8:	80 e1       	ldi	r24, 0x10	; 16
     cfa:	e0 e6       	ldi	r30, 0x60	; 96
     cfc:	f6 e0       	ldi	r31, 0x06	; 6
     cfe:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	e0 ec       	ldi	r30, 0xC0	; 192
     d04:	f9 e0       	ldi	r31, 0x09	; 9
     d06:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d08:	80 91 c2 09 	lds	r24, 0x09C2
     d0c:	87 ff       	sbrs	r24, 7
     d0e:	fc cf       	rjmp	.-8      	; 0xd08 <disk_initialize+0x194>
	return SD_SPI.DATA;
     d10:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     d14:	11 23       	and	r17, r17
     d16:	41 f0       	breq	.+16     	; 0xd28 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     d18:	80 91 52 27 	lds	r24, 0x2752
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	80 93 52 27 	sts	0x2752, r24
		FCLK_FAST();
     d22:	80 ed       	ldi	r24, 0xD0	; 208
     d24:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     d28:	80 91 52 27 	lds	r24, 0x2752
}
     d2c:	24 96       	adiw	r28, 0x04	; 4
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     d40:	88 23       	and	r24, r24
     d42:	11 f0       	breq	.+4      	; 0xd48 <disk_status+0x8>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret
	return Stat;
     d48:	80 91 52 27 	lds	r24, 0x2752
}
     d4c:	08 95       	ret

00000d4e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d4e:	0f 93       	push	r16
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     d56:	88 23       	and	r24, r24
     d58:	09 f0       	breq	.+2      	; 0xd5c <disk_read+0xe>
     d5a:	53 c0       	rjmp	.+166    	; 0xe02 <disk_read+0xb4>
     d5c:	00 23       	and	r16, r16
     d5e:	09 f4       	brne	.+2      	; 0xd62 <disk_read+0x14>
     d60:	50 c0       	rjmp	.+160    	; 0xe02 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d62:	80 91 52 27 	lds	r24, 0x2752
     d66:	80 ff       	sbrs	r24, 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <disk_read+0x20>
     d6a:	03 e0       	ldi	r16, 0x03	; 3
     d6c:	4b c0       	rjmp	.+150    	; 0xe04 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d6e:	80 91 cc 27 	lds	r24, 0x27CC
     d72:	83 fd       	sbrc	r24, 3
     d74:	07 c0       	rjmp	.+14     	; 0xd84 <disk_read+0x36>
     d76:	69 e0       	ldi	r22, 0x09	; 9
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	44 1f       	adc	r20, r20
     d7e:	55 1f       	adc	r21, r21
     d80:	6a 95       	dec	r22
     d82:	d1 f7       	brne	.-12     	; 0xd78 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     d84:	01 30       	cpi	r16, 0x01	; 1
     d86:	89 f4       	brne	.+34     	; 0xdaa <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     d88:	81 e5       	ldi	r24, 0x51	; 81
     d8a:	ba 01       	movw	r22, r20
     d8c:	a9 01       	movw	r20, r18
     d8e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     d92:	88 23       	and	r24, r24
     d94:	21 f5       	brne	.+72     	; 0xdde <disk_read+0x90>
     d96:	ce 01       	movw	r24, r28
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	72 e0       	ldi	r23, 0x02	; 2
     d9c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rcvr_datablock>
     da0:	00 e0       	ldi	r16, 0x00	; 0
     da2:	88 23       	and	r24, r24
     da4:	e1 f4       	brne	.+56     	; 0xdde <disk_read+0x90>
     da6:	01 e0       	ldi	r16, 0x01	; 1
     da8:	1a c0       	rjmp	.+52     	; 0xdde <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     daa:	82 e5       	ldi	r24, 0x52	; 82
     dac:	ba 01       	movw	r22, r20
     dae:	a9 01       	movw	r20, r18
     db0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     db4:	88 23       	and	r24, r24
     db6:	99 f4       	brne	.+38     	; 0xdde <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     db8:	ce 01       	movw	r24, r28
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	72 e0       	ldi	r23, 0x02	; 2
     dbe:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rcvr_datablock>
     dc2:	88 23       	and	r24, r24
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <disk_read+0x82>
				buff += 512;
			} while (--count);
     dc6:	01 50       	subi	r16, 0x01	; 1
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     dca:	c0 50       	subi	r28, 0x00	; 0
     dcc:	de 4f       	sbci	r29, 0xFE	; 254
     dce:	f4 cf       	rjmp	.-24     	; 0xdb8 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     dd0:	8c e4       	ldi	r24, 0x4C	; 76
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     dde:	80 e1       	ldi	r24, 0x10	; 16
     de0:	e0 e6       	ldi	r30, 0x60	; 96
     de2:	f6 e0       	ldi	r31, 0x06	; 6
     de4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	e0 ec       	ldi	r30, 0xC0	; 192
     dea:	f9 e0       	ldi	r31, 0x09	; 9
     dec:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     dee:	80 91 c2 09 	lds	r24, 0x09C2
     df2:	87 ff       	sbrs	r24, 7
     df4:	fc cf       	rjmp	.-8      	; 0xdee <disk_read+0xa0>
	return SD_SPI.DATA;
     df6:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     dfa:	00 23       	and	r16, r16
     dfc:	19 f0       	breq	.+6      	; 0xe04 <disk_read+0xb6>
     dfe:	01 e0       	ldi	r16, 0x01	; 1
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <disk_read+0xb6>
     e02:	04 e0       	ldi	r16, 0x04	; 4
}
     e04:	80 2f       	mov	r24, r16
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	eb 01       	movw	r28, r22
     e1e:	69 01       	movw	r12, r18
     e20:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     e22:	88 23       	and	r24, r24
     e24:	09 f0       	breq	.+2      	; 0xe28 <disk_write+0x1a>
     e26:	61 c0       	rjmp	.+194    	; 0xeea <disk_write+0xdc>
     e28:	00 23       	and	r16, r16
     e2a:	09 f4       	brne	.+2      	; 0xe2e <disk_write+0x20>
     e2c:	5e c0       	rjmp	.+188    	; 0xeea <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e2e:	80 91 52 27 	lds	r24, 0x2752
     e32:	80 ff       	sbrs	r24, 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <disk_write+0x2c>
     e36:	03 e0       	ldi	r16, 0x03	; 3
     e38:	59 c0       	rjmp	.+178    	; 0xeec <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e3a:	80 91 52 27 	lds	r24, 0x2752
     e3e:	82 ff       	sbrs	r24, 2
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <disk_write+0x38>
     e42:	02 e0       	ldi	r16, 0x02	; 2
     e44:	53 c0       	rjmp	.+166    	; 0xeec <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e46:	80 91 cc 27 	lds	r24, 0x27CC
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	83 fd       	sbrc	r24, 3
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <disk_write+0x50>
     e50:	79 e0       	ldi	r23, 0x09	; 9
     e52:	cc 0c       	add	r12, r12
     e54:	dd 1c       	adc	r13, r13
     e56:	ee 1c       	adc	r14, r14
     e58:	ff 1c       	adc	r15, r15
     e5a:	7a 95       	dec	r23
     e5c:	d1 f7       	brne	.-12     	; 0xe52 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     e5e:	01 30       	cpi	r16, 0x01	; 1
     e60:	69 f4       	brne	.+26     	; 0xe7c <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     e62:	88 e5       	ldi	r24, 0x58	; 88
     e64:	b7 01       	movw	r22, r14
     e66:	a6 01       	movw	r20, r12
     e68:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     e6c:	88 23       	and	r24, r24
     e6e:	59 f5       	brne	.+86     	; 0xec6 <disk_write+0xb8>
     e70:	ce 01       	movw	r24, r28
     e72:	6e ef       	ldi	r22, 0xFE	; 254
     e74:	0e 94 df 04 	call	0x9be	; 0x9be <xmit_datablock>
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	22 c0       	rjmp	.+68     	; 0xec0 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e7c:	86 70       	andi	r24, 0x06	; 6
     e7e:	90 70       	andi	r25, 0x00	; 0
     e80:	89 2b       	or	r24, r25
     e82:	39 f0       	breq	.+14     	; 0xe92 <disk_write+0x84>
     e84:	40 2f       	mov	r20, r16
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	87 ed       	ldi	r24, 0xD7	; 215
     e8e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     e92:	89 e5       	ldi	r24, 0x59	; 89
     e94:	b7 01       	movw	r22, r14
     e96:	a6 01       	movw	r20, r12
     e98:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     e9c:	88 23       	and	r24, r24
     e9e:	99 f4       	brne	.+38     	; 0xec6 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     ea0:	ce 01       	movw	r24, r28
     ea2:	6c ef       	ldi	r22, 0xFC	; 252
     ea4:	0e 94 df 04 	call	0x9be	; 0x9be <xmit_datablock>
     ea8:	88 23       	and	r24, r24
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <disk_write+0xa8>
				buff += 512;
			} while (--count);
     eac:	01 50       	subi	r16, 0x01	; 1
     eae:	19 f0       	breq	.+6      	; 0xeb6 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     eb0:	c0 50       	subi	r28, 0x00	; 0
     eb2:	de 4f       	sbci	r29, 0xFE	; 254
     eb4:	f5 cf       	rjmp	.-22     	; 0xea0 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	6d ef       	ldi	r22, 0xFD	; 253
     ebc:	0e 94 df 04 	call	0x9be	; 0x9be <xmit_datablock>
     ec0:	88 23       	and	r24, r24
     ec2:	09 f4       	brne	.+2      	; 0xec6 <disk_write+0xb8>
     ec4:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     ec6:	80 e1       	ldi	r24, 0x10	; 16
     ec8:	e0 e6       	ldi	r30, 0x60	; 96
     eca:	f6 e0       	ldi	r31, 0x06	; 6
     ecc:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	e0 ec       	ldi	r30, 0xC0	; 192
     ed2:	f9 e0       	ldi	r31, 0x09	; 9
     ed4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ed6:	80 91 c2 09 	lds	r24, 0x09C2
     eda:	87 ff       	sbrs	r24, 7
     edc:	fc cf       	rjmp	.-8      	; 0xed6 <disk_write+0xc8>
	return SD_SPI.DATA;
     ede:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     ee2:	00 23       	and	r16, r16
     ee4:	19 f0       	breq	.+6      	; 0xeec <disk_write+0xde>
     ee6:	01 e0       	ldi	r16, 0x01	; 1
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <disk_write+0xde>
     eea:	04 e0       	ldi	r16, 0x04	; 4
}
     eec:	80 2f       	mov	r24, r16
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	08 95       	ret

00000efe <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	60 97       	sbiw	r28, 0x10	; 16
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     f14:	88 23       	and	r24, r24
     f16:	09 f0       	breq	.+2      	; 0xf1a <disk_ioctl+0x1c>
     f18:	b8 c1       	rjmp	.+880    	; 0x128a <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     f1a:	64 30       	cpi	r22, 0x04	; 4
     f1c:	01 f5       	brne	.+64     	; 0xf5e <disk_ioctl+0x60>
		switch (*ptr) {
     f1e:	fa 01       	movw	r30, r20
     f20:	80 81       	ld	r24, Z
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	39 f0       	breq	.+14     	; 0xf34 <disk_ioctl+0x36>
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	08 f4       	brcc	.+2      	; 0xf2c <disk_ioctl+0x2e>
     f2a:	b1 c1       	rjmp	.+866    	; 0x128e <disk_ioctl+0x390>
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	09 f0       	breq	.+2      	; 0xf32 <disk_ioctl+0x34>
     f30:	ac c1       	rjmp	.+856    	; 0x128a <disk_ioctl+0x38c>
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     f34:	e0 e6       	ldi	r30, 0x60	; 96
     f36:	f6 e0       	ldi	r31, 0x06	; 6
     f38:	80 eb       	ldi	r24, 0xB0	; 176
     f3a:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     f3c:	88 e3       	ldi	r24, 0x38	; 56
     f3e:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     f40:	14 82       	std	Z+4, r1	; 0x04
     f42:	8c e2       	ldi	r24, 0x2C	; 44
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	20 e7       	ldi	r18, 0x70	; 112
     f48:	31 e0       	ldi	r19, 0x01	; 1
     f4a:	f9 01       	movw	r30, r18
     f4c:	31 97       	sbiw	r30, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	d9 f7       	brne	.-10     	; 0xf4a <disk_ioctl+0x4c>
     f54:	9c c1       	rjmp	.+824    	; 0x128e <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	fa 01       	movw	r30, r20
     f5a:	81 83       	std	Z+1, r24	; 0x01
     f5c:	98 c1       	rjmp	.+816    	; 0x128e <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     f5e:	80 91 52 27 	lds	r24, 0x2752
     f62:	80 ff       	sbrs	r24, 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <disk_ioctl+0x6c>
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	93 c1       	rjmp	.+806    	; 0x1290 <disk_ioctl+0x392>

		switch (ctrl) {
     f6a:	6a 30       	cpi	r22, 0x0A	; 10
     f6c:	09 f4       	brne	.+2      	; 0xf70 <disk_ioctl+0x72>
     f6e:	2f c1       	rjmp	.+606    	; 0x11ce <disk_ioctl+0x2d0>
     f70:	6b 30       	cpi	r22, 0x0B	; 11
     f72:	50 f4       	brcc	.+20     	; 0xf88 <disk_ioctl+0x8a>
     f74:	61 30       	cpi	r22, 0x01	; 1
     f76:	51 f1       	breq	.+84     	; 0xfcc <disk_ioctl+0xce>
     f78:	61 30       	cpi	r22, 0x01	; 1
     f7a:	a0 f0       	brcs	.+40     	; 0xfa4 <disk_ioctl+0xa6>
     f7c:	62 30       	cpi	r22, 0x02	; 2
     f7e:	09 f4       	brne	.+2      	; 0xf82 <disk_ioctl+0x84>
     f80:	86 c0       	rjmp	.+268    	; 0x108e <disk_ioctl+0x190>
     f82:	63 30       	cpi	r22, 0x03	; 3
     f84:	69 f4       	brne	.+26     	; 0xfa0 <disk_ioctl+0xa2>
     f86:	89 c0       	rjmp	.+274    	; 0x109a <disk_ioctl+0x19c>
     f88:	6c 30       	cpi	r22, 0x0C	; 12
     f8a:	09 f4       	brne	.+2      	; 0xf8e <disk_ioctl+0x90>
     f8c:	27 c1       	rjmp	.+590    	; 0x11dc <disk_ioctl+0x2de>
     f8e:	6c 30       	cpi	r22, 0x0C	; 12
     f90:	08 f4       	brcc	.+2      	; 0xf94 <disk_ioctl+0x96>
     f92:	22 c1       	rjmp	.+580    	; 0x11d8 <disk_ioctl+0x2da>
     f94:	6d 30       	cpi	r22, 0x0D	; 13
     f96:	09 f4       	brne	.+2      	; 0xf9a <disk_ioctl+0x9c>
     f98:	2e c1       	rjmp	.+604    	; 0x11f6 <disk_ioctl+0x2f8>
     f9a:	6e 30       	cpi	r22, 0x0E	; 14
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <disk_ioctl+0xa2>
     f9e:	4a c1       	rjmp	.+660    	; 0x1234 <disk_ioctl+0x336>
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	64 c1       	rjmp	.+712    	; 0x126c <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     fa4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <select>
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <disk_ioctl+0xb0>
     fac:	5e c1       	rjmp	.+700    	; 0x126a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     fae:	80 e1       	ldi	r24, 0x10	; 16
     fb0:	e0 e6       	ldi	r30, 0x60	; 96
     fb2:	f6 e0       	ldi	r31, 0x06	; 6
     fb4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	e0 ec       	ldi	r30, 0xC0	; 192
     fba:	f9 e0       	ldi	r31, 0x09	; 9
     fbc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fbe:	80 91 c2 09 	lds	r24, 0x09C2
     fc2:	87 ff       	sbrs	r24, 7
     fc4:	fc cf       	rjmp	.-8      	; 0xfbe <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     fc6:	80 91 c3 09 	lds	r24, 0x09C3
     fca:	ff c0       	rjmp	.+510    	; 0x11ca <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     fcc:	89 e4       	ldi	r24, 0x49	; 73
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
     fda:	88 23       	and	r24, r24
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <disk_ioctl+0xe2>
     fde:	45 c1       	rjmp	.+650    	; 0x126a <disk_ioctl+0x36c>
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	60 e1       	ldi	r22, 0x10	; 16
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rcvr_datablock>
     fec:	88 23       	and	r24, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <disk_ioctl+0xf4>
     ff0:	3c c1       	rjmp	.+632    	; 0x126a <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	82 95       	swap	r24
     ff6:	86 95       	lsr	r24
     ff8:	86 95       	lsr	r24
     ffa:	83 70       	andi	r24, 0x03	; 3
     ffc:	7a 85       	ldd	r23, Y+10	; 0x0a
     ffe:	49 85       	ldd	r20, Y+9	; 0x09
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	89 f4       	brne	.+34     	; 0x1026 <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    1004:	87 2f       	mov	r24, r23
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	34 2f       	mov	r19, r20
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	82 0f       	add	r24, r18
    1010:	93 1f       	adc	r25, r19
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	2a e0       	ldi	r18, 0x0A	; 10
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	aa 1f       	adc	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	2a 95       	dec	r18
    1022:	d1 f7       	brne	.-12     	; 0x1018 <disk_ioctl+0x11a>
    1024:	cd c0       	rjmp	.+410    	; 0x11c0 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1026:	42 95       	swap	r20
    1028:	46 95       	lsr	r20
    102a:	46 95       	lsr	r20
    102c:	43 70       	andi	r20, 0x03	; 3
    102e:	28 85       	ldd	r18, Y+8	; 0x08
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	24 0f       	add	r18, r20
    103c:	31 1d       	adc	r19, r1
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	83 70       	andi	r24, 0x03	; 3
    1048:	90 70       	andi	r25, 0x00	; 0
    104a:	98 2f       	mov	r25, r24
    104c:	88 27       	eor	r24, r24
    104e:	99 0f       	add	r25, r25
    1050:	99 0f       	add	r25, r25
    1052:	28 0f       	add	r18, r24
    1054:	39 1f       	adc	r19, r25
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1060:	66 1f       	adc	r22, r22
    1062:	66 27       	eor	r22, r22
    1064:	66 1f       	adc	r22, r22
    1066:	86 0f       	add	r24, r22
    1068:	8e 5f       	subi	r24, 0xFE	; 254
    106a:	73 70       	andi	r23, 0x03	; 3
    106c:	77 0f       	add	r23, r23
    106e:	87 0f       	add	r24, r23
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	09 97       	sbiw	r24, 0x09	; 9
    1074:	04 c0       	rjmp	.+8      	; 0x107e <disk_ioctl+0x180>
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	44 1f       	adc	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	8a 95       	dec	r24
    1080:	d2 f7       	brpl	.-12     	; 0x1076 <disk_ioctl+0x178>
    1082:	f8 01       	movw	r30, r16
    1084:	20 83       	st	Z, r18
    1086:	31 83       	std	Z+1, r19	; 0x01
    1088:	42 83       	std	Z+2, r20	; 0x02
    108a:	53 83       	std	Z+3, r21	; 0x03
    108c:	9e c0       	rjmp	.+316    	; 0x11ca <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	fa 01       	movw	r30, r20
    1094:	80 83       	st	Z, r24
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	98 c0       	rjmp	.+304    	; 0x11ca <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    109a:	80 91 cc 27 	lds	r24, 0x27CC
    109e:	f8 2e       	mov	r15, r24
    10a0:	82 ff       	sbrs	r24, 2
    10a2:	39 c0       	rjmp	.+114    	; 0x1116 <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    10a4:	8d ec       	ldi	r24, 0xCD	; 205
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
    10b2:	88 23       	and	r24, r24
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <disk_ioctl+0x1ba>
    10b6:	d9 c0       	rjmp	.+434    	; 0x126a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	e0 ec       	ldi	r30, 0xC0	; 192
    10bc:	f9 e0       	ldi	r31, 0x09	; 9
    10be:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10c0:	80 91 c2 09 	lds	r24, 0x09C2
    10c4:	87 ff       	sbrs	r24, 7
    10c6:	fc cf       	rjmp	.-8      	; 0x10c0 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    10c8:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	60 e1       	ldi	r22, 0x10	; 16
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rcvr_datablock>
    10d8:	88 23       	and	r24, r24
    10da:	09 f4       	brne	.+2      	; 0x10de <disk_ioctl+0x1e0>
    10dc:	c6 c0       	rjmp	.+396    	; 0x126a <disk_ioctl+0x36c>
    10de:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10e0:	e0 ec       	ldi	r30, 0xC0	; 192
    10e2:	f9 e0       	ldi	r31, 0x09	; 9
    10e4:	2f ef       	ldi	r18, 0xFF	; 255
    10e6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10e8:	80 91 c2 09 	lds	r24, 0x09C2
    10ec:	87 ff       	sbrs	r24, 7
    10ee:	fc cf       	rjmp	.-8      	; 0x10e8 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    10f0:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    10f4:	91 50       	subi	r25, 0x01	; 1
    10f6:	b9 f7       	brne	.-18     	; 0x10e6 <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    10f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    10fa:	22 95       	swap	r18
    10fc:	2f 70       	andi	r18, 0x0F	; 15
    10fe:	80 e1       	ldi	r24, 0x10	; 16
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <disk_ioctl+0x212>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	aa 1f       	adc	r26, r26
    110e:	bb 1f       	adc	r27, r27
    1110:	2a 95       	dec	r18
    1112:	d2 f7       	brpl	.-12     	; 0x1108 <disk_ioctl+0x20a>
    1114:	55 c0       	rjmp	.+170    	; 0x11c0 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1116:	89 e4       	ldi	r24, 0x49	; 73
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
    1124:	88 23       	and	r24, r24
    1126:	09 f0       	breq	.+2      	; 0x112a <disk_ioctl+0x22c>
    1128:	a0 c0       	rjmp	.+320    	; 0x126a <disk_ioctl+0x36c>
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	60 e1       	ldi	r22, 0x10	; 16
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rcvr_datablock>
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <disk_ioctl+0x23e>
    113a:	97 c0       	rjmp	.+302    	; 0x126a <disk_ioctl+0x36c>
    113c:	4b 85       	ldd	r20, Y+11	; 0x0b
    113e:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    1140:	f1 fe       	sbrs	r15, 1
    1142:	1b c0       	rjmp	.+54     	; 0x117a <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1144:	88 1f       	adc	r24, r24
    1146:	88 27       	eor	r24, r24
    1148:	88 1f       	adc	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	24 2f       	mov	r18, r20
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	2f 73       	andi	r18, 0x3F	; 63
    1154:	30 70       	andi	r19, 0x00	; 0
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1160:	22 95       	swap	r18
    1162:	26 95       	lsr	r18
    1164:	26 95       	lsr	r18
    1166:	23 70       	andi	r18, 0x03	; 3
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	30 40       	sbci	r19, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <disk_ioctl+0x276>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	2a 95       	dec	r18
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <disk_ioctl+0x272>
    1178:	21 c0       	rjmp	.+66     	; 0x11bc <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	23 70       	andi	r18, 0x03	; 3
    1180:	30 70       	andi	r19, 0x00	; 0
    1182:	f3 e0       	ldi	r31, 0x03	; 3
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	fa 95       	dec	r31
    118a:	e1 f7       	brne	.-8      	; 0x1184 <disk_ioctl+0x286>
    118c:	82 95       	swap	r24
    118e:	86 95       	lsr	r24
    1190:	87 70       	andi	r24, 0x07	; 7
    1192:	28 0f       	add	r18, r24
    1194:	31 1d       	adc	r19, r1
    1196:	2f 5f       	subi	r18, 0xFF	; 255
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	84 2f       	mov	r24, r20
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	8c 77       	andi	r24, 0x7C	; 124
    11a0:	90 70       	andi	r25, 0x00	; 0
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	95 95       	asr	r25
    11a8:	87 95       	ror	r24
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	ac 01       	movw	r20, r24
    11ae:	24 9f       	mul	r18, r20
    11b0:	c0 01       	movw	r24, r0
    11b2:	25 9f       	mul	r18, r21
    11b4:	90 0d       	add	r25, r0
    11b6:	34 9f       	mul	r19, r20
    11b8:	90 0d       	add	r25, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	f8 01       	movw	r30, r16
    11c2:	80 83       	st	Z, r24
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	a2 83       	std	Z+2, r26	; 0x02
    11c8:	b3 83       	std	Z+3, r27	; 0x03
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	4f c0       	rjmp	.+158    	; 0x126c <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    11ce:	80 91 cc 27 	lds	r24, 0x27CC
    11d2:	fa 01       	movw	r30, r20
    11d4:	80 83       	st	Z, r24
    11d6:	f9 cf       	rjmp	.-14     	; 0x11ca <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    11d8:	89 e4       	ldi	r24, 0x49	; 73
    11da:	01 c0       	rjmp	.+2      	; 0x11de <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    11dc:	8a e4       	ldi	r24, 0x4A	; 74
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
    11ea:	88 23       	and	r24, r24
    11ec:	f1 f5       	brne	.+124    	; 0x126a <disk_ioctl+0x36c>
    11ee:	c8 01       	movw	r24, r16
    11f0:	60 e1       	ldi	r22, 0x10	; 16
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	35 c0       	rjmp	.+106    	; 0x1260 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    11f6:	8a e7       	ldi	r24, 0x7A	; 122
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
    1204:	88 23       	and	r24, r24
    1206:	89 f5       	brne	.+98     	; 0x126a <disk_ioctl+0x36c>
    1208:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    120a:	a0 ec       	ldi	r26, 0xC0	; 192
    120c:	b9 e0       	ldi	r27, 0x09	; 9
    120e:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1210:	98 01       	movw	r18, r16
    1212:	2d 5f       	subi	r18, 0xFD	; 253
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1216:	13 96       	adiw	r26, 0x03	; 3
    1218:	9c 93       	st	X, r25
    121a:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    121c:	80 91 c2 09 	lds	r24, 0x09C2
    1220:	87 ff       	sbrs	r24, 7
    1222:	fc cf       	rjmp	.-8      	; 0x121c <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1224:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1228:	80 83       	st	Z, r24
    122a:	e2 17       	cp	r30, r18
    122c:	f3 07       	cpc	r31, r19
    122e:	69 f2       	breq	.-102    	; 0x11ca <disk_ioctl+0x2cc>
    1230:	31 96       	adiw	r30, 0x01	; 1
    1232:	f1 cf       	rjmp	.-30     	; 0x1216 <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1234:	8d ec       	ldi	r24, 0xCD	; 205
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <send_cmd>
    1242:	88 23       	and	r24, r24
    1244:	91 f4       	brne	.+36     	; 0x126a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	e0 ec       	ldi	r30, 0xC0	; 192
    124a:	f9 e0       	ldi	r31, 0x09	; 9
    124c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    124e:	80 91 c2 09 	lds	r24, 0x09C2
    1252:	87 ff       	sbrs	r24, 7
    1254:	fc cf       	rjmp	.-8      	; 0x124e <disk_ioctl+0x350>
	return SD_SPI.DATA;
    1256:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    125a:	c8 01       	movw	r24, r16
    125c:	60 e4       	ldi	r22, 0x40	; 64
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rcvr_datablock>
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <disk_ioctl+0x36e>
    126a:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    126c:	80 e1       	ldi	r24, 0x10	; 16
    126e:	e0 e6       	ldi	r30, 0x60	; 96
    1270:	f6 e0       	ldi	r31, 0x06	; 6
    1272:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	e0 ec       	ldi	r30, 0xC0	; 192
    1278:	f9 e0       	ldi	r31, 0x09	; 9
    127a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    127c:	80 91 c2 09 	lds	r24, 0x09C2
    1280:	87 ff       	sbrs	r24, 7
    1282:	fc cf       	rjmp	.-8      	; 0x127c <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    1284:	80 91 c3 09 	lds	r24, 0x09C3
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <disk_ioctl+0x392>
    128a:	94 e0       	ldi	r25, 0x04	; 4
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <disk_ioctl+0x392>
    128e:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    1290:	89 2f       	mov	r24, r25
    1292:	60 96       	adiw	r28, 0x10	; 16
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	08 95       	ret

000012a4 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    12a4:	80 91 ca 27 	lds	r24, 0x27CA
    if (n) Timer1 = --n;
    12a8:	88 23       	and	r24, r24
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <disk_timerproc+0xe>
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	80 93 ca 27 	sts	0x27CA, r24
    n = Timer2;
    12b2:	80 91 cb 27 	lds	r24, 0x27CB
    if (n) Timer2 = --n;
    12b6:	88 23       	and	r24, r24
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <disk_timerproc+0x1c>
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	80 93 cb 27 	sts	0x27CB, r24

	s = Stat;
    12c0:	80 91 52 27 	lds	r24, 0x2752

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    12c4:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    12c6:	80 93 52 27 	sts	0x2752, r24
}
    12ca:	08 95       	ret

000012cc <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */


DWORD get_fattime (void)
{
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	28 97       	sbiw	r28, 0x08	; 8
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	de bf       	out	0x3e, r29	; 62
	uint32_t temp;
	time_t tempT;
	
	Time_UTCSecsToTime((UNIX_Time-14400),&tempT);
    12e2:	60 91 81 27 	lds	r22, 0x2781
    12e6:	70 91 82 27 	lds	r23, 0x2782
    12ea:	80 91 83 27 	lds	r24, 0x2783
    12ee:	90 91 84 27 	lds	r25, 0x2784
    12f2:	60 54       	subi	r22, 0x40	; 64
    12f4:	78 43       	sbci	r23, 0x38	; 56
    12f6:	80 40       	sbci	r24, 0x00	; 0
    12f8:	90 40       	sbci	r25, 0x00	; 0
    12fa:	ae 01       	movw	r20, r28
    12fc:	4f 5f       	subi	r20, 0xFF	; 255
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1300:	0e 94 3e 03 	call	0x67c	; 0x67c <Time_UTCSecsToTime>
		
	temp =  ((uint32_t)(tempT.Year - 10) << 25); //set year (since 1980)
    1304:	88 85       	ldd	r24, Y+8	; 0x08
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0a 97       	sbiw	r24, 0x0a	; 10
    130a:	7c 01       	movw	r14, r24
    130c:	00 27       	eor	r16, r16
    130e:	f7 fc       	sbrc	r15, 7
    1310:	00 95       	com	r16
    1312:	10 2f       	mov	r17, r16
    1314:	a9 e1       	ldi	r26, 0x19	; 25
    1316:	ee 0c       	add	r14, r14
    1318:	ff 1c       	adc	r15, r15
    131a:	00 1f       	adc	r16, r16
    131c:	11 1f       	adc	r17, r17
    131e:	aa 95       	dec	r26
    1320:	d1 f7       	brne	.-12     	; 0x1316 <get_fattime+0x4a>
	temp |= ((uint32_t)tempT.Month       << 21); 
    1322:	2e 81       	ldd	r18, Y+6	; 0x06
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	33 27       	eor	r19, r19
    132e:	22 27       	eor	r18, r18
    1330:	8f 81       	ldd	r24, Y+7	; 0x07
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e1       	ldi	r30, 0x15	; 21
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	ea 95       	dec	r30
    1344:	d1 f7       	brne	.-12     	; 0x133a <get_fattime+0x6e>
    1346:	28 2b       	or	r18, r24
    1348:	39 2b       	or	r19, r25
    134a:	4a 2b       	or	r20, r26
    134c:	5b 2b       	or	r21, r27
	temp |= ((uint32_t)tempT.Day         << 16);
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	7b e0       	ldi	r23, 0x0B	; 11
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	aa 1f       	adc	r26, r26
    135e:	bb 1f       	adc	r27, r27
    1360:	7a 95       	dec	r23
    1362:	d1 f7       	brne	.-12     	; 0x1358 <get_fattime+0x8c>
    1364:	28 2b       	or	r18, r24
    1366:	39 2b       	or	r19, r25
    1368:	4a 2b       	or	r20, r26
    136a:	5b 2b       	or	r21, r27
	temp |= ((uint32_t)tempT.Hour        << 11);
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a0 e0       	ldi	r26, 0x00	; 0
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	65 e0       	ldi	r22, 0x05	; 5
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	aa 1f       	adc	r26, r26
    137c:	bb 1f       	adc	r27, r27
    137e:	6a 95       	dec	r22
    1380:	d1 f7       	brne	.-12     	; 0x1376 <get_fattime+0xaa>
    1382:	28 2b       	or	r18, r24
    1384:	39 2b       	or	r19, r25
    1386:	4a 2b       	or	r20, r26
    1388:	5b 2b       	or	r21, r27
	temp |= ((uint32_t)tempT.Minute      <<  5);
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	86 95       	lsr	r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a0 e0       	ldi	r26, 0x00	; 0
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	28 2b       	or	r18, r24
    1396:	39 2b       	or	r19, r25
    1398:	4a 2b       	or	r20, r26
    139a:	5b 2b       	or	r21, r27
    139c:	2e 29       	or	r18, r14
    139e:	3f 29       	or	r19, r15
    13a0:	40 2b       	or	r20, r16
    13a2:	51 2b       	or	r21, r17
	temp |= ((uint32_t)tempT.Second / 2); //seconds/2, ie 0..29 is the range
	return (temp);
}
    13a4:	b9 01       	movw	r22, r18
    13a6:	ca 01       	movw	r24, r20
    13a8:	28 96       	adiw	r28, 0x08	; 8
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	08 95       	ret

000013bc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
    13da:	4a 01       	movw	r8, r20
    13dc:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    13de:	ca a4       	ldd	r12, Y+42	; 0x2a
    13e0:	db a4       	ldd	r13, Y+43	; 0x2b
    13e2:	ec a4       	ldd	r14, Y+44	; 0x2c
    13e4:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    13e6:	c4 16       	cp	r12, r20
    13e8:	d5 06       	cpc	r13, r21
    13ea:	e6 06       	cpc	r14, r22
    13ec:	f7 06       	cpc	r15, r23
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <move_window+0x36>
    13f0:	4e c0       	rjmp	.+156    	; 0x148e <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	88 23       	and	r24, r24
    13f6:	a1 f1       	breq	.+104    	; 0x1460 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    13f8:	be e2       	ldi	r27, 0x2E	; 46
    13fa:	6b 2e       	mov	r6, r27
    13fc:	71 2c       	mov	r7, r1
    13fe:	6c 0e       	add	r6, r28
    1400:	7d 1e       	adc	r7, r29
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	b3 01       	movw	r22, r6
    1406:	a7 01       	movw	r20, r14
    1408:	96 01       	movw	r18, r12
    140a:	01 e0       	ldi	r16, 0x01	; 1
    140c:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    1410:	88 23       	and	r24, r24
    1412:	d9 f5       	brne	.+118    	; 0x148a <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1414:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    1416:	8e 89       	ldd	r24, Y+22	; 0x16
    1418:	9f 89       	ldd	r25, Y+23	; 0x17
    141a:	a8 8d       	ldd	r26, Y+24	; 0x18
    141c:	b9 8d       	ldd	r27, Y+25	; 0x19
    141e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1420:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1422:	48 a1       	ldd	r20, Y+32	; 0x20
    1424:	59 a1       	ldd	r21, Y+33	; 0x21
    1426:	82 0f       	add	r24, r18
    1428:	93 1f       	adc	r25, r19
    142a:	a4 1f       	adc	r26, r20
    142c:	b5 1f       	adc	r27, r21
    142e:	c8 16       	cp	r12, r24
    1430:	d9 06       	cpc	r13, r25
    1432:	ea 06       	cpc	r14, r26
    1434:	fb 06       	cpc	r15, r27
    1436:	a0 f4       	brcc	.+40     	; 0x1460 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1438:	1b 81       	ldd	r17, Y+3	; 0x03
    143a:	10 c0       	rjmp	.+32     	; 0x145c <move_window+0xa0>
					wsect += fs->sects_fat;
    143c:	8e 89       	ldd	r24, Y+22	; 0x16
    143e:	9f 89       	ldd	r25, Y+23	; 0x17
    1440:	a8 8d       	ldd	r26, Y+24	; 0x18
    1442:	b9 8d       	ldd	r27, Y+25	; 0x19
    1444:	c8 0e       	add	r12, r24
    1446:	d9 1e       	adc	r13, r25
    1448:	ea 1e       	adc	r14, r26
    144a:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	b3 01       	movw	r22, r6
    1450:	a7 01       	movw	r20, r14
    1452:	96 01       	movw	r18, r12
    1454:	01 e0       	ldi	r16, 0x01	; 1
    1456:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    145a:	11 50       	subi	r17, 0x01	; 1
    145c:	12 30       	cpi	r17, 0x02	; 2
    145e:	70 f7       	brcc	.-36     	; 0x143c <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1460:	81 14       	cp	r8, r1
    1462:	91 04       	cpc	r9, r1
    1464:	a1 04       	cpc	r10, r1
    1466:	b1 04       	cpc	r11, r1
    1468:	91 f0       	breq	.+36     	; 0x148e <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    146a:	be 01       	movw	r22, r28
    146c:	62 5d       	subi	r22, 0xD2	; 210
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	a5 01       	movw	r20, r10
    1474:	94 01       	movw	r18, r8
    1476:	01 e0       	ldi	r16, 0x01	; 1
    1478:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    147c:	88 23       	and	r24, r24
    147e:	29 f4       	brne	.+10     	; 0x148a <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1480:	8a a6       	std	Y+42, r8	; 0x2a
    1482:	9b a6       	std	Y+43, r9	; 0x2b
    1484:	ac a6       	std	Y+44, r10	; 0x2c
    1486:	bd a6       	std	Y+45, r11	; 0x2d
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <move_window+0xd4>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <move_window+0xd4>
    148e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	af 90       	pop	r10
    14a4:	9f 90       	pop	r9
    14a6:	8f 90       	pop	r8
    14a8:	7f 90       	pop	r7
    14aa:	6f 90       	pop	r6
    14ac:	08 95       	ret

000014ae <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    14ae:	0f 93       	push	r16
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
	if (res == FR_OK) {
    14c2:	88 23       	and	r24, r24
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <sync+0x1a>
    14c6:	7e c0       	rjmp	.+252    	; 0x15c4 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    14c8:	88 81       	ld	r24, Y
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <sync+0x22>
    14ce:	72 c0       	rjmp	.+228    	; 0x15b4 <sync+0x106>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <sync+0x2a>
    14d6:	6e c0       	rjmp	.+220    	; 0x15b4 <sync+0x106>
			fs->winsect = 0;
    14d8:	1a a6       	std	Y+42, r1	; 0x2a
    14da:	1b a6       	std	Y+43, r1	; 0x2b
    14dc:	1c a6       	std	Y+44, r1	; 0x2c
    14de:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    14e0:	be 01       	movw	r22, r28
    14e2:	62 5d       	subi	r22, 0xD2	; 210
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	fb 01       	movw	r30, r22
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	92 e0       	ldi	r25, 0x02	; 2
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    14ee:	11 92       	st	Z+, r1
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	2f ef       	ldi	r18, 0xFF	; 255
    14f4:	8f 3f       	cpi	r24, 0xFF	; 255
    14f6:	92 07       	cpc	r25, r18
    14f8:	d1 f7       	brne	.-12     	; 0x14ee <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    14fa:	c4 5d       	subi	r28, 0xD4	; 212
    14fc:	dd 4f       	sbci	r29, 0xFD	; 253
    14fe:	85 e5       	ldi	r24, 0x55	; 85
    1500:	89 93       	st	Y+, r24
    1502:	8a ea       	ldi	r24, 0xAA	; 170
    1504:	88 83       	st	Y, r24
    1506:	cd 52       	subi	r28, 0x2D	; 45
    1508:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    150a:	82 e5       	ldi	r24, 0x52	; 82
    150c:	8e a7       	std	Y+46, r24	; 0x2e
    150e:	8f a7       	std	Y+47, r24	; 0x2f
    1510:	21 e6       	ldi	r18, 0x61	; 97
    1512:	28 ab       	std	Y+48, r18	; 0x30
    1514:	91 e4       	ldi	r25, 0x41	; 65
    1516:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1518:	ce 5e       	subi	r28, 0xEE	; 238
    151a:	dd 4f       	sbci	r29, 0xFD	; 253
    151c:	82 e7       	ldi	r24, 0x72	; 114
    151e:	89 93       	st	Y+, r24
    1520:	89 93       	st	Y+, r24
    1522:	99 93       	st	Y+, r25
    1524:	28 83       	st	Y, r18
    1526:	c5 51       	subi	r28, 0x15	; 21
    1528:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    152a:	8e 85       	ldd	r24, Y+14	; 0x0e
    152c:	ca 5e       	subi	r28, 0xEA	; 234
    152e:	dd 4f       	sbci	r29, 0xFD	; 253
    1530:	88 83       	st	Y, r24
    1532:	c6 51       	subi	r28, 0x16	; 22
    1534:	d2 40       	sbci	r29, 0x02	; 2
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	c9 5e       	subi	r28, 0xE9	; 233
    153a:	dd 4f       	sbci	r29, 0xFD	; 253
    153c:	88 83       	st	Y, r24
    153e:	c7 51       	subi	r28, 0x17	; 23
    1540:	d2 40       	sbci	r29, 0x02	; 2
    1542:	8e 85       	ldd	r24, Y+14	; 0x0e
    1544:	9f 85       	ldd	r25, Y+15	; 0x0f
    1546:	a8 89       	ldd	r26, Y+16	; 0x10
    1548:	b9 89       	ldd	r27, Y+17	; 0x11
    154a:	9d 01       	movw	r18, r26
    154c:	44 27       	eor	r20, r20
    154e:	55 27       	eor	r21, r21
    1550:	c8 5e       	subi	r28, 0xE8	; 232
    1552:	dd 4f       	sbci	r29, 0xFD	; 253
    1554:	28 83       	st	Y, r18
    1556:	21 96       	adiw	r28, 0x01	; 1
    1558:	8b 2f       	mov	r24, r27
    155a:	99 27       	eor	r25, r25
    155c:	aa 27       	eor	r26, r26
    155e:	bb 27       	eor	r27, r27
    1560:	88 83       	st	Y, r24
    1562:	c9 51       	subi	r28, 0x19	; 25
    1564:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1566:	8a 85       	ldd	r24, Y+10	; 0x0a
    1568:	c6 5e       	subi	r28, 0xE6	; 230
    156a:	dd 4f       	sbci	r29, 0xFD	; 253
    156c:	88 83       	st	Y, r24
    156e:	ca 51       	subi	r28, 0x1A	; 26
    1570:	d2 40       	sbci	r29, 0x02	; 2
    1572:	8b 85       	ldd	r24, Y+11	; 0x0b
    1574:	c5 5e       	subi	r28, 0xE5	; 229
    1576:	dd 4f       	sbci	r29, 0xFD	; 253
    1578:	88 83       	st	Y, r24
    157a:	cb 51       	subi	r28, 0x1B	; 27
    157c:	d2 40       	sbci	r29, 0x02	; 2
    157e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1580:	9b 85       	ldd	r25, Y+11	; 0x0b
    1582:	ac 85       	ldd	r26, Y+12	; 0x0c
    1584:	bd 85       	ldd	r27, Y+13	; 0x0d
    1586:	9d 01       	movw	r18, r26
    1588:	44 27       	eor	r20, r20
    158a:	55 27       	eor	r21, r21
    158c:	c4 5e       	subi	r28, 0xE4	; 228
    158e:	dd 4f       	sbci	r29, 0xFD	; 253
    1590:	28 83       	st	Y, r18
    1592:	21 96       	adiw	r28, 0x01	; 1
    1594:	8b 2f       	mov	r24, r27
    1596:	99 27       	eor	r25, r25
    1598:	aa 27       	eor	r26, r26
    159a:	bb 27       	eor	r27, r27
    159c:	88 83       	st	Y, r24
    159e:	cd 51       	subi	r28, 0x1D	; 29
    15a0:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    15a2:	2a 89       	ldd	r18, Y+18	; 0x12
    15a4:	3b 89       	ldd	r19, Y+19	; 0x13
    15a6:	4c 89       	ldd	r20, Y+20	; 0x14
    15a8:	5d 89       	ldd	r21, Y+21	; 0x15
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	01 e0       	ldi	r16, 0x01	; 1
    15ae:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
			fs->fsi_flag = 0;
    15b2:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 7f 07 	call	0xefe	; 0xefe <disk_ioctl>
    15c0:	81 11       	cpse	r24, r1
    15c2:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    15cc:	7f 92       	push	r7
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	4c 01       	movw	r8, r24
    15e8:	7a 01       	movw	r14, r20
    15ea:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    15ec:	42 30       	cpi	r20, 0x02	; 2
    15ee:	51 05       	cpc	r21, r1
    15f0:	61 05       	cpc	r22, r1
    15f2:	71 05       	cpc	r23, r1
    15f4:	08 f4       	brcc	.+2      	; 0x15f8 <get_fat+0x2c>
    15f6:	bb c0       	rjmp	.+374    	; 0x176e <get_fat+0x1a2>
    15f8:	f4 01       	movw	r30, r8
    15fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    15fc:	93 8d       	ldd	r25, Z+27	; 0x1b
    15fe:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1600:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1602:	48 17       	cp	r20, r24
    1604:	59 07       	cpc	r21, r25
    1606:	6a 07       	cpc	r22, r26
    1608:	7b 07       	cpc	r23, r27
    160a:	08 f0       	brcs	.+2      	; 0x160e <get_fat+0x42>
    160c:	b0 c0       	rjmp	.+352    	; 0x176e <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    160e:	a6 8c       	ldd	r10, Z+30	; 0x1e
    1610:	b7 8c       	ldd	r11, Z+31	; 0x1f
    1612:	c0 a0       	ldd	r12, Z+32	; 0x20
    1614:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    1616:	80 81       	ld	r24, Z
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	09 f4       	brne	.+2      	; 0x161e <get_fat+0x52>
    161c:	4d c0       	rjmp	.+154    	; 0x16b8 <get_fat+0xec>
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	09 f4       	brne	.+2      	; 0x1624 <get_fat+0x58>
    1622:	68 c0       	rjmp	.+208    	; 0x16f4 <get_fat+0x128>
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	09 f0       	breq	.+2      	; 0x162a <get_fat+0x5e>
    1628:	a7 c0       	rjmp	.+334    	; 0x1778 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    162a:	ea 01       	movw	r28, r20
    162c:	d6 95       	lsr	r29
    162e:	c7 95       	ror	r28
    1630:	ce 0d       	add	r28, r14
    1632:	df 1d       	adc	r29, r15
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1634:	ae 01       	movw	r20, r28
    1636:	45 2f       	mov	r20, r21
    1638:	55 27       	eor	r21, r21
    163a:	46 95       	lsr	r20
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	4a 0d       	add	r20, r10
    1642:	5b 1d       	adc	r21, r11
    1644:	6c 1d       	adc	r22, r12
    1646:	7d 1d       	adc	r23, r13
    1648:	c4 01       	movw	r24, r8
    164a:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    164e:	88 23       	and	r24, r24
    1650:	09 f0       	breq	.+2      	; 0x1654 <get_fat+0x88>
    1652:	92 c0       	rjmp	.+292    	; 0x1778 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1654:	fe 01       	movw	r30, r28
    1656:	f1 70       	andi	r31, 0x01	; 1
    1658:	e8 0d       	add	r30, r8
    165a:	f9 1d       	adc	r31, r9
    165c:	76 a4       	ldd	r7, Z+46	; 0x2e
    165e:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1660:	ae 01       	movw	r20, r28
    1662:	45 2f       	mov	r20, r21
    1664:	55 27       	eor	r21, r21
    1666:	46 95       	lsr	r20
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	4a 0d       	add	r20, r10
    166e:	5b 1d       	adc	r21, r11
    1670:	6c 1d       	adc	r22, r12
    1672:	7d 1d       	adc	r23, r13
    1674:	c4 01       	movw	r24, r8
    1676:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    167a:	88 23       	and	r24, r24
    167c:	09 f0       	breq	.+2      	; 0x1680 <get_fat+0xb4>
    167e:	7c c0       	rjmp	.+248    	; 0x1778 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1680:	67 2d       	mov	r22, r7
    1682:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1684:	d1 70       	andi	r29, 0x01	; 1
    1686:	c8 0d       	add	r28, r8
    1688:	d9 1d       	adc	r29, r9
    168a:	9e a5       	ldd	r25, Y+46	; 0x2e
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	68 2b       	or	r22, r24
    1690:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1692:	c7 01       	movw	r24, r14
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	90 70       	andi	r25, 0x00	; 0
    1698:	89 2b       	or	r24, r25
    169a:	39 f0       	breq	.+14     	; 0x16aa <get_fat+0xde>
    169c:	94 e0       	ldi	r25, 0x04	; 4
    169e:	76 95       	lsr	r23
    16a0:	67 95       	ror	r22
    16a2:	9a 95       	dec	r25
    16a4:	e1 f7       	brne	.-8      	; 0x169e <get_fat+0xd2>
    16a6:	9b 01       	movw	r18, r22
    16a8:	22 c0       	rjmp	.+68     	; 0x16ee <get_fat+0x122>
    16aa:	9b 01       	movw	r18, r22
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	3f 70       	andi	r19, 0x0F	; 15
    16b2:	40 70       	andi	r20, 0x00	; 0
    16b4:	50 70       	andi	r21, 0x00	; 0
    16b6:	64 c0       	rjmp	.+200    	; 0x1780 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    16b8:	45 2f       	mov	r20, r21
    16ba:	56 2f       	mov	r21, r22
    16bc:	67 2f       	mov	r22, r23
    16be:	77 27       	eor	r23, r23
    16c0:	4a 0d       	add	r20, r10
    16c2:	5b 1d       	adc	r21, r11
    16c4:	6c 1d       	adc	r22, r12
    16c6:	7d 1d       	adc	r23, r13
    16c8:	c4 01       	movw	r24, r8
    16ca:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    16ce:	88 23       	and	r24, r24
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <get_fat+0x108>
    16d2:	52 c0       	rjmp	.+164    	; 0x1778 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    16d4:	f7 01       	movw	r30, r14
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	f1 70       	andi	r31, 0x01	; 1
    16dc:	e8 0d       	add	r30, r8
    16de:	f9 1d       	adc	r31, r9
    16e0:	97 a5       	ldd	r25, Z+47	; 0x2f
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	26 a5       	ldd	r18, Z+46	; 0x2e
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	82 2b       	or	r24, r18
    16ea:	93 2b       	or	r25, r19
    16ec:	9c 01       	movw	r18, r24
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	46 c0       	rjmp	.+140    	; 0x1780 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    16f4:	b7 e0       	ldi	r27, 0x07	; 7
    16f6:	76 95       	lsr	r23
    16f8:	67 95       	ror	r22
    16fa:	57 95       	ror	r21
    16fc:	47 95       	ror	r20
    16fe:	ba 95       	dec	r27
    1700:	d1 f7       	brne	.-12     	; 0x16f6 <get_fat+0x12a>
    1702:	4a 0d       	add	r20, r10
    1704:	5b 1d       	adc	r21, r11
    1706:	6c 1d       	adc	r22, r12
    1708:	7d 1d       	adc	r23, r13
    170a:	c4 01       	movw	r24, r8
    170c:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    1710:	88 23       	and	r24, r24
    1712:	91 f5       	brne	.+100    	; 0x1778 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    1714:	f7 01       	movw	r30, r14
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	f1 70       	andi	r31, 0x01	; 1
    1720:	e8 0d       	add	r30, r8
    1722:	f9 1d       	adc	r31, r9
    1724:	81 a9       	ldd	r24, Z+49	; 0x31
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	58 2f       	mov	r21, r24
    172e:	44 27       	eor	r20, r20
    1730:	33 27       	eor	r19, r19
    1732:	22 27       	eor	r18, r18
    1734:	80 a9       	ldd	r24, Z+48	; 0x30
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e0       	ldi	r26, 0x00	; 0
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	dc 01       	movw	r26, r24
    173e:	99 27       	eor	r25, r25
    1740:	88 27       	eor	r24, r24
    1742:	28 2b       	or	r18, r24
    1744:	39 2b       	or	r19, r25
    1746:	4a 2b       	or	r20, r26
    1748:	5b 2b       	or	r21, r27
    174a:	86 a5       	ldd	r24, Z+46	; 0x2e
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	28 2b       	or	r18, r24
    1754:	39 2b       	or	r19, r25
    1756:	4a 2b       	or	r20, r26
    1758:	5b 2b       	or	r21, r27
    175a:	97 a5       	ldd	r25, Z+47	; 0x2f
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	a0 e0       	ldi	r26, 0x00	; 0
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	28 2b       	or	r18, r24
    1764:	39 2b       	or	r19, r25
    1766:	4a 2b       	or	r20, r26
    1768:	5b 2b       	or	r21, r27
    176a:	5f 70       	andi	r21, 0x0F	; 15
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <get_fat+0x1b4>
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <get_fat+0x1b4>
    1778:	2f ef       	ldi	r18, 0xFF	; 255
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f ef       	ldi	r20, 0xFF	; 255
    177e:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    1780:	b9 01       	movw	r22, r18
    1782:	ca 01       	movw	r24, r20
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	7f 90       	pop	r7
    179e:	08 95       	ret

000017a0 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    17a0:	2f 92       	push	r2
    17a2:	3f 92       	push	r3
    17a4:	4f 92       	push	r4
    17a6:	5f 92       	push	r5
    17a8:	6f 92       	push	r6
    17aa:	7f 92       	push	r7
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	3c 01       	movw	r6, r24
    17c6:	6a 01       	movw	r12, r20
    17c8:	7b 01       	movw	r14, r22
    17ca:	48 01       	movw	r8, r16
    17cc:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    17ce:	42 30       	cpi	r20, 0x02	; 2
    17d0:	51 05       	cpc	r21, r1
    17d2:	61 05       	cpc	r22, r1
    17d4:	71 05       	cpc	r23, r1
    17d6:	08 f4       	brcc	.+2      	; 0x17da <put_fat+0x3a>
    17d8:	ba c0       	rjmp	.+372    	; 0x194e <put_fat+0x1ae>
    17da:	f3 01       	movw	r30, r6
    17dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    17de:	93 8d       	ldd	r25, Z+27	; 0x1b
    17e0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    17e2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    17e4:	48 17       	cp	r20, r24
    17e6:	59 07       	cpc	r21, r25
    17e8:	6a 07       	cpc	r22, r26
    17ea:	7b 07       	cpc	r23, r27
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <put_fat+0x50>
    17ee:	af c0       	rjmp	.+350    	; 0x194e <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    17f0:	26 8c       	ldd	r2, Z+30	; 0x1e
    17f2:	37 8c       	ldd	r3, Z+31	; 0x1f
    17f4:	40 a0       	ldd	r4, Z+32	; 0x20
    17f6:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    17f8:	80 81       	ld	r24, Z
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	09 f4       	brne	.+2      	; 0x1800 <put_fat+0x60>
    17fe:	64 c0       	rjmp	.+200    	; 0x18c8 <put_fat+0x128>
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	09 f4       	brne	.+2      	; 0x1806 <put_fat+0x66>
    1804:	7a c0       	rjmp	.+244    	; 0x18fa <put_fat+0x15a>
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	11 f0       	breq	.+4      	; 0x180e <put_fat+0x6e>
    180a:	22 e0       	ldi	r18, 0x02	; 2
    180c:	9c c0       	rjmp	.+312    	; 0x1946 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    180e:	ea 01       	movw	r28, r20
    1810:	d6 95       	lsr	r29
    1812:	c7 95       	ror	r28
    1814:	c4 0f       	add	r28, r20
    1816:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    1818:	ae 01       	movw	r20, r28
    181a:	45 2f       	mov	r20, r21
    181c:	55 27       	eor	r21, r21
    181e:	46 95       	lsr	r20
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	42 0d       	add	r20, r2
    1826:	53 1d       	adc	r21, r3
    1828:	64 1d       	adc	r22, r4
    182a:	75 1d       	adc	r23, r5
    182c:	c3 01       	movw	r24, r6
    182e:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    1832:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1834:	88 23       	and	r24, r24
    1836:	09 f0       	breq	.+2      	; 0x183a <put_fat+0x9a>
    1838:	86 c0       	rjmp	.+268    	; 0x1946 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    183a:	de 01       	movw	r26, r28
    183c:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    183e:	86 01       	movw	r16, r12
    1840:	01 70       	andi	r16, 0x01	; 1
    1842:	10 70       	andi	r17, 0x00	; 0
    1844:	01 15       	cp	r16, r1
    1846:	11 05       	cpc	r17, r1
    1848:	51 f0       	breq	.+20     	; 0x185e <put_fat+0xbe>
    184a:	f3 01       	movw	r30, r6
    184c:	ea 0f       	add	r30, r26
    184e:	fb 1f       	adc	r31, r27
    1850:	86 a5       	ldd	r24, Z+46	; 0x2e
    1852:	8f 70       	andi	r24, 0x0F	; 15
    1854:	98 2d       	mov	r25, r8
    1856:	92 95       	swap	r25
    1858:	90 7f       	andi	r25, 0xF0	; 240
    185a:	98 2b       	or	r25, r24
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <put_fat+0xc0>
    185e:	98 2d       	mov	r25, r8
    1860:	a6 0d       	add	r26, r6
    1862:	b7 1d       	adc	r27, r7
    1864:	9e 96       	adiw	r26, 0x2e	; 46
    1866:	9c 93       	st	X, r25
			bc++;
    1868:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	f3 01       	movw	r30, r6
    186e:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    1870:	ae 01       	movw	r20, r28
    1872:	45 2f       	mov	r20, r21
    1874:	55 27       	eor	r21, r21
    1876:	46 95       	lsr	r20
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	42 0d       	add	r20, r2
    187e:	53 1d       	adc	r21, r3
    1880:	64 1d       	adc	r22, r4
    1882:	75 1d       	adc	r23, r5
    1884:	c3 01       	movw	r24, r6
    1886:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    188a:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    188c:	88 23       	and	r24, r24
    188e:	09 f0       	breq	.+2      	; 0x1892 <put_fat+0xf2>
    1890:	5a c0       	rjmp	.+180    	; 0x1946 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1892:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1894:	01 2b       	or	r16, r17
    1896:	49 f0       	breq	.+18     	; 0x18aa <put_fat+0x10a>
    1898:	34 e0       	ldi	r19, 0x04	; 4
    189a:	b6 94       	lsr	r11
    189c:	a7 94       	ror	r10
    189e:	97 94       	ror	r9
    18a0:	87 94       	ror	r8
    18a2:	3a 95       	dec	r19
    18a4:	d1 f7       	brne	.-12     	; 0x189a <put_fat+0xfa>
    18a6:	48 2d       	mov	r20, r8
    18a8:	0b c0       	rjmp	.+22     	; 0x18c0 <put_fat+0x120>
    18aa:	f3 01       	movw	r30, r6
    18ac:	ec 0f       	add	r30, r28
    18ae:	fd 1f       	adc	r31, r29
    18b0:	46 a5       	ldd	r20, Z+46	; 0x2e
    18b2:	40 7f       	andi	r20, 0xF0	; 240
    18b4:	bb 27       	eor	r27, r27
    18b6:	ab 2d       	mov	r26, r11
    18b8:	9a 2d       	mov	r25, r10
    18ba:	89 2d       	mov	r24, r9
    18bc:	8f 70       	andi	r24, 0x0F	; 15
    18be:	48 2b       	or	r20, r24
    18c0:	c6 0d       	add	r28, r6
    18c2:	d7 1d       	adc	r29, r7
    18c4:	4e a7       	std	Y+46, r20	; 0x2e
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    18c8:	45 2f       	mov	r20, r21
    18ca:	56 2f       	mov	r21, r22
    18cc:	67 2f       	mov	r22, r23
    18ce:	77 27       	eor	r23, r23
    18d0:	42 0d       	add	r20, r2
    18d2:	53 1d       	adc	r21, r3
    18d4:	64 1d       	adc	r22, r4
    18d6:	75 1d       	adc	r23, r5
    18d8:	c3 01       	movw	r24, r6
    18da:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    18de:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    18e0:	88 23       	and	r24, r24
    18e2:	89 f5       	brne	.+98     	; 0x1946 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    18e4:	f6 01       	movw	r30, r12
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	f1 70       	andi	r31, 0x01	; 1
    18ec:	e6 0d       	add	r30, r6
    18ee:	f7 1d       	adc	r31, r7
    18f0:	86 a6       	std	Z+46, r8	; 0x2e
    18f2:	89 2d       	mov	r24, r9
    18f4:	99 27       	eor	r25, r25
    18f6:	87 a7       	std	Z+47, r24	; 0x2f
    18f8:	26 c0       	rjmp	.+76     	; 0x1946 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    18fa:	b7 e0       	ldi	r27, 0x07	; 7
    18fc:	76 95       	lsr	r23
    18fe:	67 95       	ror	r22
    1900:	57 95       	ror	r21
    1902:	47 95       	ror	r20
    1904:	ba 95       	dec	r27
    1906:	d1 f7       	brne	.-12     	; 0x18fc <put_fat+0x15c>
    1908:	42 0d       	add	r20, r2
    190a:	53 1d       	adc	r21, r3
    190c:	64 1d       	adc	r22, r4
    190e:	75 1d       	adc	r23, r5
    1910:	c3 01       	movw	r24, r6
    1912:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    1916:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1918:	88 23       	and	r24, r24
    191a:	a9 f4       	brne	.+42     	; 0x1946 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    191c:	f6 01       	movw	r30, r12
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	ee 0f       	add	r30, r30
    1924:	ff 1f       	adc	r31, r31
    1926:	f1 70       	andi	r31, 0x01	; 1
    1928:	e6 0d       	add	r30, r6
    192a:	f7 1d       	adc	r31, r7
    192c:	86 a6       	std	Z+46, r8	; 0x2e
    192e:	89 2d       	mov	r24, r9
    1930:	99 27       	eor	r25, r25
    1932:	87 a7       	std	Z+47, r24	; 0x2f
    1934:	c5 01       	movw	r24, r10
    1936:	aa 27       	eor	r26, r26
    1938:	bb 27       	eor	r27, r27
    193a:	80 ab       	std	Z+48, r24	; 0x30
    193c:	8b 2d       	mov	r24, r11
    193e:	99 27       	eor	r25, r25
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	f3 01       	movw	r30, r6
    194a:	84 83       	std	Z+4, r24	; 0x04
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <put_fat+0x1b0>
    194e:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1950:	82 2f       	mov	r24, r18
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	7f 90       	pop	r7
    196c:	6f 90       	pop	r6
    196e:	5f 90       	pop	r5
    1970:	4f 90       	pop	r4
    1972:	3f 90       	pop	r3
    1974:	2f 90       	pop	r2
    1976:	08 95       	ret

00001978 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	ec 01       	movw	r28, r24
    1990:	7a 01       	movw	r14, r20
    1992:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1994:	42 30       	cpi	r20, 0x02	; 2
    1996:	51 05       	cpc	r21, r1
    1998:	61 05       	cpc	r22, r1
    199a:	71 05       	cpc	r23, r1
    199c:	08 f4       	brcc	.+2      	; 0x19a0 <remove_chain+0x28>
    199e:	58 c0       	rjmp	.+176    	; 0x1a50 <remove_chain+0xd8>
    19a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19a4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    19a6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    19a8:	48 17       	cp	r20, r24
    19aa:	59 07       	cpc	r21, r25
    19ac:	6a 07       	cpc	r22, r26
    19ae:	7b 07       	cpc	r23, r27
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <remove_chain+0x3c>
    19b2:	41 c0       	rjmp	.+130    	; 0x1a36 <remove_chain+0xbe>
    19b4:	4d c0       	rjmp	.+154    	; 0x1a50 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    19b6:	ce 01       	movw	r24, r28
    19b8:	b8 01       	movw	r22, r16
    19ba:	a7 01       	movw	r20, r14
    19bc:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    19c0:	5b 01       	movw	r10, r22
    19c2:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    19c4:	61 15       	cp	r22, r1
    19c6:	71 05       	cpc	r23, r1
    19c8:	81 05       	cpc	r24, r1
    19ca:	91 05       	cpc	r25, r1
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <remove_chain+0x58>
    19ce:	42 c0       	rjmp	.+132    	; 0x1a54 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	a8 16       	cp	r10, r24
    19d4:	b1 04       	cpc	r11, r1
    19d6:	c1 04       	cpc	r12, r1
    19d8:	d1 04       	cpc	r13, r1
    19da:	d1 f1       	breq	.+116    	; 0x1a50 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    19dc:	2f ef       	ldi	r18, 0xFF	; 255
    19de:	a2 16       	cp	r10, r18
    19e0:	2f ef       	ldi	r18, 0xFF	; 255
    19e2:	b2 06       	cpc	r11, r18
    19e4:	2f ef       	ldi	r18, 0xFF	; 255
    19e6:	c2 06       	cpc	r12, r18
    19e8:	2f ef       	ldi	r18, 0xFF	; 255
    19ea:	d2 06       	cpc	r13, r18
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <remove_chain+0x7a>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	32 c0       	rjmp	.+100    	; 0x1a56 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    19f2:	ce 01       	movw	r24, r28
    19f4:	b8 01       	movw	r22, r16
    19f6:	a7 01       	movw	r20, r14
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <put_fat>
			if (res != FR_OK) break;
    1a04:	88 23       	and	r24, r24
    1a06:	39 f5       	brne	.+78     	; 0x1a56 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1a08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a0c:	a8 89       	ldd	r26, Y+16	; 0x10
    1a0e:	b9 89       	ldd	r27, Y+17	; 0x11
    1a10:	8f 3f       	cpi	r24, 0xFF	; 255
    1a12:	2f ef       	ldi	r18, 0xFF	; 255
    1a14:	92 07       	cpc	r25, r18
    1a16:	2f ef       	ldi	r18, 0xFF	; 255
    1a18:	a2 07       	cpc	r26, r18
    1a1a:	2f ef       	ldi	r18, 0xFF	; 255
    1a1c:	b2 07       	cpc	r27, r18
    1a1e:	41 f0       	breq	.+16     	; 0x1a30 <remove_chain+0xb8>
				fs->free_clust++;
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	a1 1d       	adc	r26, r1
    1a24:	b1 1d       	adc	r27, r1
    1a26:	8e 87       	std	Y+14, r24	; 0x0e
    1a28:	9f 87       	std	Y+15, r25	; 0x0f
    1a2a:	a8 8b       	std	Y+16, r26	; 0x10
    1a2c:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1a2e:	9d 82       	std	Y+5, r9	; 0x05
    1a30:	86 01       	movw	r16, r12
    1a32:	75 01       	movw	r14, r10
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <remove_chain+0xc2>
    1a36:	99 24       	eor	r9, r9
    1a38:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1a3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a3e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1a40:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1a42:	e8 16       	cp	r14, r24
    1a44:	f9 06       	cpc	r15, r25
    1a46:	0a 07       	cpc	r16, r26
    1a48:	1b 07       	cpc	r17, r27
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <remove_chain+0xd6>
    1a4c:	b4 cf       	rjmp	.-152    	; 0x19b6 <remove_chain+0x3e>
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <remove_chain+0xdc>
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <remove_chain+0xde>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	df 90       	pop	r13
    1a64:	cf 90       	pop	r12
    1a66:	bf 90       	pop	r11
    1a68:	af 90       	pop	r10
    1a6a:	9f 90       	pop	r9
    1a6c:	08 95       	ret

00001a6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1a6e:	2f 92       	push	r2
    1a70:	3f 92       	push	r3
    1a72:	4f 92       	push	r4
    1a74:	5f 92       	push	r5
    1a76:	6f 92       	push	r6
    1a78:	7f 92       	push	r7
    1a7a:	8f 92       	push	r8
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <create_chain+0x26>
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	1c 01       	movw	r2, r24
    1a9c:	2a 01       	movw	r4, r20
    1a9e:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	5a 96       	adiw	r26, 0x1a	; 26
    1aa4:	8d 91       	ld	r24, X+
    1aa6:	9d 91       	ld	r25, X+
    1aa8:	0d 90       	ld	r0, X+
    1aaa:	bc 91       	ld	r27, X
    1aac:	a0 2d       	mov	r26, r0
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	ab 83       	std	Y+3, r26	; 0x03
    1ab4:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1ab6:	41 15       	cp	r20, r1
    1ab8:	51 05       	cpc	r21, r1
    1aba:	61 05       	cpc	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	81 f4       	brne	.+32     	; 0x1ae0 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    1ac0:	f1 01       	movw	r30, r2
    1ac2:	82 84       	ldd	r8, Z+10	; 0x0a
    1ac4:	93 84       	ldd	r9, Z+11	; 0x0b
    1ac6:	a4 84       	ldd	r10, Z+12	; 0x0c
    1ac8:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1aca:	81 14       	cp	r8, r1
    1acc:	91 04       	cpc	r9, r1
    1ace:	a1 04       	cpc	r10, r1
    1ad0:	b1 04       	cpc	r11, r1
    1ad2:	11 f1       	breq	.+68     	; 0x1b18 <create_chain+0xaa>
    1ad4:	88 16       	cp	r8, r24
    1ad6:	99 06       	cpc	r9, r25
    1ad8:	aa 06       	cpc	r10, r26
    1ada:	bb 06       	cpc	r11, r27
    1adc:	e8 f4       	brcc	.+58     	; 0x1b18 <create_chain+0xaa>
    1ade:	21 c0       	rjmp	.+66     	; 0x1b22 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1ae0:	c1 01       	movw	r24, r2
    1ae2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1aea:	62 30       	cpi	r22, 0x02	; 2
    1aec:	71 05       	cpc	r23, r1
    1aee:	81 05       	cpc	r24, r1
    1af0:	91 05       	cpc	r25, r1
    1af2:	28 f4       	brcc	.+10     	; 0x1afe <create_chain+0x90>
    1af4:	21 e0       	ldi	r18, 0x01	; 1
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	93 c0       	rjmp	.+294    	; 0x1c24 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	ab 81       	ldd	r26, Y+3	; 0x03
    1b04:	bc 81       	ldd	r27, Y+4	; 0x04
    1b06:	28 17       	cp	r18, r24
    1b08:	39 07       	cpc	r19, r25
    1b0a:	4a 07       	cpc	r20, r26
    1b0c:	5b 07       	cpc	r21, r27
    1b0e:	08 f4       	brcc	.+2      	; 0x1b12 <create_chain+0xa4>
    1b10:	89 c0       	rjmp	.+274    	; 0x1c24 <create_chain+0x1b6>
    1b12:	53 01       	movw	r10, r6
    1b14:	42 01       	movw	r8, r4
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <create_chain+0xb4>
    1b18:	a1 e0       	ldi	r26, 0x01	; 1
    1b1a:	8a 2e       	mov	r8, r26
    1b1c:	91 2c       	mov	r9, r1
    1b1e:	a1 2c       	mov	r10, r1
    1b20:	b1 2c       	mov	r11, r1
    1b22:	75 01       	movw	r14, r10
    1b24:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1b26:	08 94       	sec
    1b28:	c1 1c       	adc	r12, r1
    1b2a:	d1 1c       	adc	r13, r1
    1b2c:	e1 1c       	adc	r14, r1
    1b2e:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	ab 81       	ldd	r26, Y+3	; 0x03
    1b36:	bc 81       	ldd	r27, Y+4	; 0x04
    1b38:	c8 16       	cp	r12, r24
    1b3a:	d9 06       	cpc	r13, r25
    1b3c:	ea 06       	cpc	r14, r26
    1b3e:	fb 06       	cpc	r15, r27
    1b40:	60 f0       	brcs	.+24     	; 0x1b5a <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	89 16       	cp	r8, r25
    1b46:	91 04       	cpc	r9, r1
    1b48:	a1 04       	cpc	r10, r1
    1b4a:	b1 04       	cpc	r11, r1
    1b4c:	08 f4       	brcc	.+2      	; 0x1b50 <create_chain+0xe2>
    1b4e:	61 c0       	rjmp	.+194    	; 0x1c12 <create_chain+0x1a4>
    1b50:	f2 e0       	ldi	r31, 0x02	; 2
    1b52:	cf 2e       	mov	r12, r31
    1b54:	d1 2c       	mov	r13, r1
    1b56:	e1 2c       	mov	r14, r1
    1b58:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1b5a:	c1 01       	movw	r24, r2
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	a6 01       	movw	r20, r12
    1b60:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    1b64:	9b 01       	movw	r18, r22
    1b66:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1b68:	61 15       	cp	r22, r1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	81 05       	cpc	r24, r1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	a9 f0       	breq	.+42     	; 0x1b9c <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1b72:	6f 3f       	cpi	r22, 0xFF	; 255
    1b74:	af ef       	ldi	r26, 0xFF	; 255
    1b76:	7a 07       	cpc	r23, r26
    1b78:	af ef       	ldi	r26, 0xFF	; 255
    1b7a:	8a 07       	cpc	r24, r26
    1b7c:	af ef       	ldi	r26, 0xFF	; 255
    1b7e:	9a 07       	cpc	r25, r26
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <create_chain+0x116>
    1b82:	50 c0       	rjmp	.+160    	; 0x1c24 <create_chain+0x1b6>
    1b84:	61 30       	cpi	r22, 0x01	; 1
    1b86:	71 05       	cpc	r23, r1
    1b88:	81 05       	cpc	r24, r1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <create_chain+0x122>
    1b8e:	4a c0       	rjmp	.+148    	; 0x1c24 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1b90:	c8 14       	cp	r12, r8
    1b92:	d9 04       	cpc	r13, r9
    1b94:	ea 04       	cpc	r14, r10
    1b96:	fb 04       	cpc	r15, r11
    1b98:	31 f6       	brne	.-116    	; 0x1b26 <create_chain+0xb8>
    1b9a:	3b c0       	rjmp	.+118    	; 0x1c12 <create_chain+0x1a4>
    1b9c:	bc 2c       	mov	r11, r12
    1b9e:	ad 2c       	mov	r10, r13
    1ba0:	9e 2c       	mov	r9, r14
    1ba2:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1ba4:	c1 01       	movw	r24, r2
    1ba6:	a6 01       	movw	r20, r12
    1ba8:	b7 01       	movw	r22, r14
    1baa:	0f ef       	ldi	r16, 0xFF	; 255
    1bac:	1f ef       	ldi	r17, 0xFF	; 255
    1bae:	2f ef       	ldi	r18, 0xFF	; 255
    1bb0:	3f e0       	ldi	r19, 0x0F	; 15
    1bb2:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <put_fat>
    1bb6:	88 23       	and	r24, r24
    1bb8:	89 f5       	brne	.+98     	; 0x1c1c <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1bba:	41 14       	cp	r4, r1
    1bbc:	51 04       	cpc	r5, r1
    1bbe:	61 04       	cpc	r6, r1
    1bc0:	71 04       	cpc	r7, r1
    1bc2:	49 f0       	breq	.+18     	; 0x1bd6 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1bc4:	c1 01       	movw	r24, r2
    1bc6:	b3 01       	movw	r22, r6
    1bc8:	a2 01       	movw	r20, r4
    1bca:	86 01       	movw	r16, r12
    1bcc:	97 01       	movw	r18, r14
    1bce:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <put_fat>
    1bd2:	88 23       	and	r24, r24
    1bd4:	19 f5       	brne	.+70     	; 0x1c1c <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1bd6:	f1 01       	movw	r30, r2
    1bd8:	b2 86       	std	Z+10, r11	; 0x0a
    1bda:	a3 86       	std	Z+11, r10	; 0x0b
    1bdc:	94 86       	std	Z+12, r9	; 0x0c
    1bde:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1be0:	86 85       	ldd	r24, Z+14	; 0x0e
    1be2:	97 85       	ldd	r25, Z+15	; 0x0f
    1be4:	a0 89       	ldd	r26, Z+16	; 0x10
    1be6:	b1 89       	ldd	r27, Z+17	; 0x11
    1be8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bea:	ff ef       	ldi	r31, 0xFF	; 255
    1bec:	9f 07       	cpc	r25, r31
    1bee:	ff ef       	ldi	r31, 0xFF	; 255
    1bf0:	af 07       	cpc	r26, r31
    1bf2:	ff ef       	ldi	r31, 0xFF	; 255
    1bf4:	bf 07       	cpc	r27, r31
    1bf6:	51 f0       	breq	.+20     	; 0x1c0c <create_chain+0x19e>
		fs->free_clust--;
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	a1 09       	sbc	r26, r1
    1bfc:	b1 09       	sbc	r27, r1
    1bfe:	f1 01       	movw	r30, r2
    1c00:	86 87       	std	Z+14, r24	; 0x0e
    1c02:	97 87       	std	Z+15, r25	; 0x0f
    1c04:	a0 8b       	std	Z+16, r26	; 0x10
    1c06:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	85 83       	std	Z+5, r24	; 0x05
    1c0c:	a7 01       	movw	r20, r14
    1c0e:	96 01       	movw	r18, r12
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <create_chain+0x1b6>
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <create_chain+0x1b6>
    1c1c:	2f ef       	ldi	r18, 0xFF	; 255
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f ef       	ldi	r20, 0xFF	; 255
    1c22:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1c24:	b9 01       	movw	r22, r18
    1c26:	ca 01       	movw	r24, r20
    1c28:	24 96       	adiw	r28, 0x04	; 4
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	ff 90       	pop	r15
    1c38:	ef 90       	pop	r14
    1c3a:	df 90       	pop	r13
    1c3c:	cf 90       	pop	r12
    1c3e:	bf 90       	pop	r11
    1c40:	af 90       	pop	r10
    1c42:	9f 90       	pop	r9
    1c44:	8f 90       	pop	r8
    1c46:	7f 90       	pop	r7
    1c48:	6f 90       	pop	r6
    1c4a:	5f 90       	pop	r5
    1c4c:	4f 90       	pop	r4
    1c4e:	3f 90       	pop	r3
    1c50:	2f 90       	pop	r2
    1c52:	08 95       	ret

00001c54 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	ec 01       	movw	r28, r24
    1c62:	7a 01       	movw	r14, r20
    1c64:	8b 01       	movw	r16, r22
	clst -= 2;
    1c66:	8e ef       	ldi	r24, 0xFE	; 254
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	af ef       	ldi	r26, 0xFF	; 255
    1c6c:	bf ef       	ldi	r27, 0xFF	; 255
    1c6e:	e8 0e       	add	r14, r24
    1c70:	f9 1e       	adc	r15, r25
    1c72:	0a 1f       	adc	r16, r26
    1c74:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1c76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c7a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1c7c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1c7e:	02 97       	sbiw	r24, 0x02	; 2
    1c80:	a1 09       	sbc	r26, r1
    1c82:	b1 09       	sbc	r27, r1
    1c84:	e8 16       	cp	r14, r24
    1c86:	f9 06       	cpc	r15, r25
    1c88:	0a 07       	cpc	r16, r26
    1c8a:	1b 07       	cpc	r17, r27
    1c8c:	28 f0       	brcs	.+10     	; 0x1c98 <clust2sect+0x44>
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	12 c0       	rjmp	.+36     	; 0x1cbc <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1c98:	2a 81       	ldd	r18, Y+2	; 0x02
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	c8 01       	movw	r24, r16
    1ca2:	b7 01       	movw	r22, r14
    1ca4:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    1ca8:	9b 01       	movw	r18, r22
    1caa:	ac 01       	movw	r20, r24
    1cac:	8e a1       	ldd	r24, Y+38	; 0x26
    1cae:	9f a1       	ldd	r25, Y+39	; 0x27
    1cb0:	a8 a5       	ldd	r26, Y+40	; 0x28
    1cb2:	b9 a5       	ldd	r27, Y+41	; 0x29
    1cb4:	28 0f       	add	r18, r24
    1cb6:	39 1f       	adc	r19, r25
    1cb8:	4a 1f       	adc	r20, r26
    1cba:	5b 1f       	adc	r21, r27
}
    1cbc:	b9 01       	movw	r22, r18
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	08 95       	ret

00001cce <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1cce:	af 92       	push	r10
    1cd0:	bf 92       	push	r11
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	5c 01       	movw	r10, r24
    1ce4:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	14 96       	adiw	r26, 0x04	; 4
    1cea:	6d 93       	st	X+, r22
    1cec:	7c 93       	st	X, r23
    1cee:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1cf0:	16 96       	adiw	r26, 0x06	; 6
    1cf2:	4d 91       	ld	r20, X+
    1cf4:	5d 91       	ld	r21, X+
    1cf6:	6d 91       	ld	r22, X+
    1cf8:	7c 91       	ld	r23, X
    1cfa:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1cfc:	41 30       	cpi	r20, 0x01	; 1
    1cfe:	51 05       	cpc	r21, r1
    1d00:	61 05       	cpc	r22, r1
    1d02:	71 05       	cpc	r23, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <dir_seek+0x3a>
    1d06:	d3 c0       	rjmp	.+422    	; 0x1eae <dir_seek+0x1e0>
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d0e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d10:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d12:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d14:	48 17       	cp	r20, r24
    1d16:	59 07       	cpc	r21, r25
    1d18:	6a 07       	cpc	r22, r26
    1d1a:	7b 07       	cpc	r23, r27
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <dir_seek+0x52>
    1d1e:	c7 c0       	rjmp	.+398    	; 0x1eae <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1d20:	41 15       	cp	r20, r1
    1d22:	51 05       	cpc	r21, r1
    1d24:	61 05       	cpc	r22, r1
    1d26:	71 05       	cpc	r23, r1
    1d28:	81 f5       	brne	.+96     	; 0x1d8a <dir_seek+0xbc>
    1d2a:	80 81       	ld	r24, Z
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	49 f4       	brne	.+18     	; 0x1d42 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1d30:	42 a1       	ldd	r20, Z+34	; 0x22
    1d32:	53 a1       	ldd	r21, Z+35	; 0x23
    1d34:	64 a1       	ldd	r22, Z+36	; 0x24
    1d36:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1d38:	41 15       	cp	r20, r1
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	61 05       	cpc	r22, r1
    1d3e:	71 05       	cpc	r23, r1
    1d40:	21 f5       	brne	.+72     	; 0x1d8a <dir_seek+0xbc>
		dj->clust = clst;
    1d42:	f5 01       	movw	r30, r10
    1d44:	12 86       	std	Z+10, r1	; 0x0a
    1d46:	13 86       	std	Z+11, r1	; 0x0b
    1d48:	14 86       	std	Z+12, r1	; 0x0c
    1d4a:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1d4c:	01 90       	ld	r0, Z+
    1d4e:	f0 81       	ld	r31, Z
    1d50:	e0 2d       	mov	r30, r0
    1d52:	80 85       	ldd	r24, Z+8	; 0x08
    1d54:	91 85       	ldd	r25, Z+9	; 0x09
    1d56:	c8 16       	cp	r12, r24
    1d58:	d9 06       	cpc	r13, r25
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <dir_seek+0x90>
    1d5c:	a8 c0       	rjmp	.+336    	; 0x1eae <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d5e:	c6 01       	movw	r24, r12
    1d60:	24 e0       	ldi	r18, 0x04	; 4
    1d62:	96 95       	lsr	r25
    1d64:	87 95       	ror	r24
    1d66:	2a 95       	dec	r18
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <dir_seek+0x94>
    1d6a:	a0 e0       	ldi	r26, 0x00	; 0
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	22 a1       	ldd	r18, Z+34	; 0x22
    1d70:	33 a1       	ldd	r19, Z+35	; 0x23
    1d72:	44 a1       	ldd	r20, Z+36	; 0x24
    1d74:	55 a1       	ldd	r21, Z+37	; 0x25
    1d76:	82 0f       	add	r24, r18
    1d78:	93 1f       	adc	r25, r19
    1d7a:	a4 1f       	adc	r26, r20
    1d7c:	b5 1f       	adc	r27, r21
    1d7e:	f5 01       	movw	r30, r10
    1d80:	86 87       	std	Z+14, r24	; 0x0e
    1d82:	97 87       	std	Z+15, r25	; 0x0f
    1d84:	a0 8b       	std	Z+16, r26	; 0x10
    1d86:	b1 8b       	std	Z+17, r27	; 0x11
    1d88:	7a c0       	rjmp	.+244    	; 0x1e7e <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	08 2f       	mov	r16, r24
    1d8e:	10 e0       	ldi	r17, 0x00	; 0
    1d90:	94 e0       	ldi	r25, 0x04	; 4
    1d92:	00 0f       	add	r16, r16
    1d94:	11 1f       	adc	r17, r17
    1d96:	9a 95       	dec	r25
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <dir_seek+0xc4>
    1d9a:	24 c0       	rjmp	.+72     	; 0x1de4 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    1da2:	ab 01       	movw	r20, r22
    1da4:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1da6:	4f 3f       	cpi	r20, 0xFF	; 255
    1da8:	ff ef       	ldi	r31, 0xFF	; 255
    1daa:	5f 07       	cpc	r21, r31
    1dac:	ff ef       	ldi	r31, 0xFF	; 255
    1dae:	6f 07       	cpc	r22, r31
    1db0:	ff ef       	ldi	r31, 0xFF	; 255
    1db2:	7f 07       	cpc	r23, r31
    1db4:	11 f4       	brne	.+4      	; 0x1dba <dir_seek+0xec>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	7b c0       	rjmp	.+246    	; 0x1eb0 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1dba:	42 30       	cpi	r20, 0x02	; 2
    1dbc:	51 05       	cpc	r21, r1
    1dbe:	61 05       	cpc	r22, r1
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <dir_seek+0xf8>
    1dc4:	74 c0       	rjmp	.+232    	; 0x1eae <dir_seek+0x1e0>
    1dc6:	d5 01       	movw	r26, r10
    1dc8:	ed 91       	ld	r30, X+
    1dca:	fc 91       	ld	r31, X
    1dcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dce:	93 8d       	ldd	r25, Z+27	; 0x1b
    1dd0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1dd2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1dd4:	48 17       	cp	r20, r24
    1dd6:	59 07       	cpc	r21, r25
    1dd8:	6a 07       	cpc	r22, r26
    1dda:	7b 07       	cpc	r23, r27
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <dir_seek+0x112>
    1dde:	67 c0       	rjmp	.+206    	; 0x1eae <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1de0:	c0 1a       	sub	r12, r16
    1de2:	d1 0a       	sbc	r13, r17
    1de4:	f5 01       	movw	r30, r10
    1de6:	c0 81       	ld	r28, Z
    1de8:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1dea:	c0 16       	cp	r12, r16
    1dec:	d1 06       	cpc	r13, r17
    1dee:	b0 f6       	brcc	.-84     	; 0x1d9c <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1df0:	d5 01       	movw	r26, r10
    1df2:	1a 96       	adiw	r26, 0x0a	; 10
    1df4:	4d 93       	st	X+, r20
    1df6:	5d 93       	st	X+, r21
    1df8:	6d 93       	st	X+, r22
    1dfa:	7c 93       	st	X, r23
    1dfc:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1dfe:	8e ef       	ldi	r24, 0xFE	; 254
    1e00:	e8 2e       	mov	r14, r24
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	f8 2e       	mov	r15, r24
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	08 2f       	mov	r16, r24
    1e0a:	8f ef       	ldi	r24, 0xFF	; 255
    1e0c:	18 2f       	mov	r17, r24
    1e0e:	e4 0e       	add	r14, r20
    1e10:	f5 1e       	adc	r15, r21
    1e12:	06 1f       	adc	r16, r22
    1e14:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1e16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e1a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1e1c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1e1e:	02 97       	sbiw	r24, 0x02	; 2
    1e20:	a1 09       	sbc	r26, r1
    1e22:	b1 09       	sbc	r27, r1
    1e24:	e8 16       	cp	r14, r24
    1e26:	f9 06       	cpc	r15, r25
    1e28:	0a 07       	cpc	r16, r26
    1e2a:	1b 07       	cpc	r17, r27
    1e2c:	28 f0       	brcs	.+10     	; 0x1e38 <dir_seek+0x16a>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	12 c0       	rjmp	.+36     	; 0x1e5c <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1e38:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	c8 01       	movw	r24, r16
    1e42:	b7 01       	movw	r22, r14
    1e44:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    1e48:	9b 01       	movw	r18, r22
    1e4a:	ac 01       	movw	r20, r24
    1e4c:	8e a1       	ldd	r24, Y+38	; 0x26
    1e4e:	9f a1       	ldd	r25, Y+39	; 0x27
    1e50:	a8 a5       	ldd	r26, Y+40	; 0x28
    1e52:	b9 a5       	ldd	r27, Y+41	; 0x29
    1e54:	28 0f       	add	r18, r24
    1e56:	39 1f       	adc	r19, r25
    1e58:	4a 1f       	adc	r20, r26
    1e5a:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1e5c:	c6 01       	movw	r24, r12
    1e5e:	14 e0       	ldi	r17, 0x04	; 4
    1e60:	96 95       	lsr	r25
    1e62:	87 95       	ror	r24
    1e64:	1a 95       	dec	r17
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <dir_seek+0x192>
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	28 0f       	add	r18, r24
    1e6e:	39 1f       	adc	r19, r25
    1e70:	4a 1f       	adc	r20, r26
    1e72:	5b 1f       	adc	r21, r27
    1e74:	f5 01       	movw	r30, r10
    1e76:	26 87       	std	Z+14, r18	; 0x0e
    1e78:	37 87       	std	Z+15, r19	; 0x0f
    1e7a:	40 8b       	std	Z+16, r20	; 0x10
    1e7c:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1e7e:	ff e0       	ldi	r31, 0x0F	; 15
    1e80:	cf 22       	and	r12, r31
    1e82:	dd 24       	eor	r13, r13
    1e84:	b5 e0       	ldi	r27, 0x05	; 5
    1e86:	cc 0c       	add	r12, r12
    1e88:	dd 1c       	adc	r13, r13
    1e8a:	ba 95       	dec	r27
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <dir_seek+0x1b8>
    1e8e:	8e e2       	ldi	r24, 0x2E	; 46
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	c8 0e       	add	r12, r24
    1e94:	d9 1e       	adc	r13, r25
    1e96:	d5 01       	movw	r26, r10
    1e98:	8d 91       	ld	r24, X+
    1e9a:	9c 91       	ld	r25, X
    1e9c:	11 97       	sbiw	r26, 0x01	; 1
    1e9e:	8c 0d       	add	r24, r12
    1ea0:	9d 1d       	adc	r25, r13
    1ea2:	52 96       	adiw	r26, 0x12	; 18
    1ea4:	8d 93       	st	X+, r24
    1ea6:	9c 93       	st	X, r25
    1ea8:	53 97       	sbiw	r26, 0x13	; 19
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1eae:	82 e0       	ldi	r24, 0x02	; 2
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	08 95       	ret

00001ec6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1ec6:	4f 92       	push	r4
    1ec8:	5f 92       	push	r5
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	9f 92       	push	r9
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	ec 01       	movw	r28, r24
    1ee8:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1eea:	6c 80       	ldd	r6, Y+4	; 0x04
    1eec:	7d 80       	ldd	r7, Y+5	; 0x05
    1eee:	08 94       	sec
    1ef0:	61 1c       	adc	r6, r1
    1ef2:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1ef4:	61 14       	cp	r6, r1
    1ef6:	71 04       	cpc	r7, r1
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <dir_next+0x36>
    1efa:	4c c1       	rjmp	.+664    	; 0x2194 <dir_next+0x2ce>
    1efc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f00:	a8 89       	ldd	r26, Y+16	; 0x10
    1f02:	b9 89       	ldd	r27, Y+17	; 0x11
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <dir_next+0x48>
    1f0c:	43 c1       	rjmp	.+646    	; 0x2194 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1f0e:	1f e0       	ldi	r17, 0x0F	; 15
    1f10:	41 2e       	mov	r4, r17
    1f12:	51 2c       	mov	r5, r1
    1f14:	46 20       	and	r4, r6
    1f16:	57 20       	and	r5, r7
    1f18:	41 14       	cp	r4, r1
    1f1a:	51 04       	cpc	r5, r1
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <dir_next+0x5a>
    1f1e:	27 c1       	rjmp	.+590    	; 0x216e <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	a1 1d       	adc	r26, r1
    1f24:	b1 1d       	adc	r27, r1
    1f26:	8e 87       	std	Y+14, r24	; 0x0e
    1f28:	9f 87       	std	Y+15, r25	; 0x0f
    1f2a:	a8 8b       	std	Y+16, r26	; 0x10
    1f2c:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1f2e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f30:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f34:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f36:	e8 81       	ld	r30, Y
    1f38:	f9 81       	ldd	r31, Y+1	; 0x01
    1f3a:	41 15       	cp	r20, r1
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	61 05       	cpc	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	39 f4       	brne	.+14     	; 0x1f52 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1f44:	80 85       	ldd	r24, Z+8	; 0x08
    1f46:	91 85       	ldd	r25, Z+9	; 0x09
    1f48:	68 16       	cp	r6, r24
    1f4a:	79 06       	cpc	r7, r25
    1f4c:	08 f4       	brcc	.+2      	; 0x1f50 <dir_next+0x8a>
    1f4e:	0f c1       	rjmp	.+542    	; 0x216e <dir_next+0x2a8>
    1f50:	21 c1       	rjmp	.+578    	; 0x2194 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	93 01       	movw	r18, r6
    1f5a:	a4 e0       	ldi	r26, 0x04	; 4
    1f5c:	36 95       	lsr	r19
    1f5e:	27 95       	ror	r18
    1f60:	aa 95       	dec	r26
    1f62:	e1 f7       	brne	.-8      	; 0x1f5c <dir_next+0x96>
    1f64:	82 23       	and	r24, r18
    1f66:	93 23       	and	r25, r19
    1f68:	89 2b       	or	r24, r25
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <dir_next+0xa8>
    1f6c:	00 c1       	rjmp	.+512    	; 0x216e <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1f6e:	cf 01       	movw	r24, r30
    1f70:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    1f74:	7b 01       	movw	r14, r22
    1f76:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1f78:	62 30       	cpi	r22, 0x02	; 2
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	81 05       	cpc	r24, r1
    1f7e:	91 05       	cpc	r25, r1
    1f80:	08 f4       	brcc	.+2      	; 0x1f84 <dir_next+0xbe>
    1f82:	0a c1       	rjmp	.+532    	; 0x2198 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	e8 16       	cp	r14, r24
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	f8 06       	cpc	r15, r24
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	08 07       	cpc	r16, r24
    1f90:	8f ef       	ldi	r24, 0xFF	; 255
    1f92:	18 07       	cpc	r17, r24
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <dir_next+0xd2>
    1f96:	02 c1       	rjmp	.+516    	; 0x219c <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1f98:	e8 81       	ld	r30, Y
    1f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f9e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fa0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fa2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fa4:	e8 16       	cp	r14, r24
    1fa6:	f9 06       	cpc	r15, r25
    1fa8:	0a 07       	cpc	r16, r26
    1faa:	1b 07       	cpc	r17, r27
    1fac:	08 f4       	brcc	.+2      	; 0x1fb0 <dir_next+0xea>
    1fae:	a6 c0       	rjmp	.+332    	; 0x20fc <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1fb0:	dd 20       	and	r13, r13
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <dir_next+0xf0>
    1fb4:	ef c0       	rjmp	.+478    	; 0x2194 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1fb6:	4a 85       	ldd	r20, Y+10	; 0x0a
    1fb8:	5b 85       	ldd	r21, Y+11	; 0x0b
    1fba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fbe:	cf 01       	movw	r24, r30
    1fc0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <create_chain>
    1fc4:	7b 01       	movw	r14, r22
    1fc6:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1fc8:	61 15       	cp	r22, r1
    1fca:	71 05       	cpc	r23, r1
    1fcc:	81 05       	cpc	r24, r1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <dir_next+0x110>
    1fd2:	87 e0       	ldi	r24, 0x07	; 7
    1fd4:	e4 c0       	rjmp	.+456    	; 0x219e <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	e9 16       	cp	r14, r25
    1fda:	f1 04       	cpc	r15, r1
    1fdc:	01 05       	cpc	r16, r1
    1fde:	11 05       	cpc	r17, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <dir_next+0x11e>
    1fe2:	da c0       	rjmp	.+436    	; 0x2198 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1fe4:	af ef       	ldi	r26, 0xFF	; 255
    1fe6:	ea 16       	cp	r14, r26
    1fe8:	af ef       	ldi	r26, 0xFF	; 255
    1fea:	fa 06       	cpc	r15, r26
    1fec:	af ef       	ldi	r26, 0xFF	; 255
    1fee:	0a 07       	cpc	r16, r26
    1ff0:	af ef       	ldi	r26, 0xFF	; 255
    1ff2:	1a 07       	cpc	r17, r26
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <dir_next+0x132>
    1ff6:	d2 c0       	rjmp	.+420    	; 0x219c <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1ff8:	88 81       	ld	r24, Y
    1ffa:	99 81       	ldd	r25, Y+1	; 0x01
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    2008:	88 23       	and	r24, r24
    200a:	09 f0       	breq	.+2      	; 0x200e <dir_next+0x148>
    200c:	c7 c0       	rjmp	.+398    	; 0x219c <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    200e:	e8 81       	ld	r30, Y
    2010:	f9 81       	ldd	r31, Y+1	; 0x01
    2012:	be 96       	adiw	r30, 0x2e	; 46
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	92 e0       	ldi	r25, 0x02	; 2
    2018:	01 c0       	rjmp	.+2      	; 0x201c <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    201a:	11 92       	st	Z+, r1
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	bf ef       	ldi	r27, 0xFF	; 255
    2020:	8f 3f       	cpi	r24, 0xFF	; 255
    2022:	9b 07       	cpc	r25, r27
    2024:	d1 f7       	brne	.-12     	; 0x201a <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2026:	88 80       	ld	r8, Y
    2028:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    202a:	4e ef       	ldi	r20, 0xFE	; 254
    202c:	a4 2e       	mov	r10, r20
    202e:	4f ef       	ldi	r20, 0xFF	; 255
    2030:	b4 2e       	mov	r11, r20
    2032:	4f ef       	ldi	r20, 0xFF	; 255
    2034:	c4 2e       	mov	r12, r20
    2036:	4f ef       	ldi	r20, 0xFF	; 255
    2038:	d4 2e       	mov	r13, r20
    203a:	ae 0c       	add	r10, r14
    203c:	bf 1c       	adc	r11, r15
    203e:	c0 1e       	adc	r12, r16
    2040:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2042:	f4 01       	movw	r30, r8
    2044:	82 8d       	ldd	r24, Z+26	; 0x1a
    2046:	93 8d       	ldd	r25, Z+27	; 0x1b
    2048:	a4 8d       	ldd	r26, Z+28	; 0x1c
    204a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    204c:	02 97       	sbiw	r24, 0x02	; 2
    204e:	a1 09       	sbc	r26, r1
    2050:	b1 09       	sbc	r27, r1
    2052:	a8 16       	cp	r10, r24
    2054:	b9 06       	cpc	r11, r25
    2056:	ca 06       	cpc	r12, r26
    2058:	db 06       	cpc	r13, r27
    205a:	28 f0       	brcs	.+10     	; 0x2066 <dir_next+0x1a0>
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	15 c0       	rjmp	.+42     	; 0x2090 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    2066:	d4 01       	movw	r26, r8
    2068:	12 96       	adiw	r26, 0x02	; 2
    206a:	2c 91       	ld	r18, X
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	c6 01       	movw	r24, r12
    2074:	b5 01       	movw	r22, r10
    2076:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	f4 01       	movw	r30, r8
    2080:	86 a1       	ldd	r24, Z+38	; 0x26
    2082:	97 a1       	ldd	r25, Z+39	; 0x27
    2084:	a0 a5       	ldd	r26, Z+40	; 0x28
    2086:	b1 a5       	ldd	r27, Z+41	; 0x29
    2088:	28 0f       	add	r18, r24
    208a:	39 1f       	adc	r19, r25
    208c:	4a 1f       	adc	r20, r26
    208e:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2090:	d4 01       	movw	r26, r8
    2092:	9a 96       	adiw	r26, 0x2a	; 42
    2094:	2d 93       	st	X+, r18
    2096:	3d 93       	st	X+, r19
    2098:	4d 93       	st	X+, r20
    209a:	5c 93       	st	X, r21
    209c:	9d 97       	sbiw	r26, 0x2d	; 45
    209e:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    20a0:	cc 24       	eor	r12, r12
    20a2:	c3 94       	inc	r12
    20a4:	1a c0       	rjmp	.+52     	; 0x20da <dir_next+0x214>
    20a6:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    20a8:	88 81       	ld	r24, Y
    20aa:	99 81       	ldd	r25, Y+1	; 0x01
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    20b8:	88 23       	and	r24, r24
    20ba:	09 f0       	breq	.+2      	; 0x20be <dir_next+0x1f8>
    20bc:	6f c0       	rjmp	.+222    	; 0x219c <dir_next+0x2d6>
						dj->fs->winsect++;
    20be:	e8 81       	ld	r30, Y
    20c0:	f9 81       	ldd	r31, Y+1	; 0x01
    20c2:	82 a5       	ldd	r24, Z+42	; 0x2a
    20c4:	93 a5       	ldd	r25, Z+43	; 0x2b
    20c6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    20c8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	a1 1d       	adc	r26, r1
    20ce:	b1 1d       	adc	r27, r1
    20d0:	82 a7       	std	Z+42, r24	; 0x2a
    20d2:	93 a7       	std	Z+43, r25	; 0x2b
    20d4:	a4 a7       	std	Z+44, r26	; 0x2c
    20d6:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    20d8:	d3 94       	inc	r13
    20da:	e8 81       	ld	r30, Y
    20dc:	f9 81       	ldd	r31, Y+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	d8 16       	cp	r13, r24
    20e2:	08 f3       	brcs	.-62     	; 0x20a6 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    20e4:	82 a5       	ldd	r24, Z+42	; 0x2a
    20e6:	93 a5       	ldd	r25, Z+43	; 0x2b
    20e8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    20ea:	b5 a5       	ldd	r27, Z+45	; 0x2d
    20ec:	8d 19       	sub	r24, r13
    20ee:	91 09       	sbc	r25, r1
    20f0:	a1 09       	sbc	r26, r1
    20f2:	b1 09       	sbc	r27, r1
    20f4:	82 a7       	std	Z+42, r24	; 0x2a
    20f6:	93 a7       	std	Z+43, r25	; 0x2b
    20f8:	a4 a7       	std	Z+44, r26	; 0x2c
    20fa:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    20fc:	ea 86       	std	Y+10, r14	; 0x0a
    20fe:	fb 86       	std	Y+11, r15	; 0x0b
    2100:	0c 87       	std	Y+12, r16	; 0x0c
    2102:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2104:	c8 80       	ld	r12, Y
    2106:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2108:	8e ef       	ldi	r24, 0xFE	; 254
    210a:	9f ef       	ldi	r25, 0xFF	; 255
    210c:	af ef       	ldi	r26, 0xFF	; 255
    210e:	bf ef       	ldi	r27, 0xFF	; 255
    2110:	e8 0e       	add	r14, r24
    2112:	f9 1e       	adc	r15, r25
    2114:	0a 1f       	adc	r16, r26
    2116:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2118:	f6 01       	movw	r30, r12
    211a:	82 8d       	ldd	r24, Z+26	; 0x1a
    211c:	93 8d       	ldd	r25, Z+27	; 0x1b
    211e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2120:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2122:	02 97       	sbiw	r24, 0x02	; 2
    2124:	a1 09       	sbc	r26, r1
    2126:	b1 09       	sbc	r27, r1
    2128:	e8 16       	cp	r14, r24
    212a:	f9 06       	cpc	r15, r25
    212c:	0a 07       	cpc	r16, r26
    212e:	1b 07       	cpc	r17, r27
    2130:	28 f0       	brcs	.+10     	; 0x213c <dir_next+0x276>
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	15 c0       	rjmp	.+42     	; 0x2166 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    213c:	d6 01       	movw	r26, r12
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	2c 91       	ld	r18, X
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	c8 01       	movw	r24, r16
    214a:	b7 01       	movw	r22, r14
    214c:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    2150:	9b 01       	movw	r18, r22
    2152:	ac 01       	movw	r20, r24
    2154:	f6 01       	movw	r30, r12
    2156:	86 a1       	ldd	r24, Z+38	; 0x26
    2158:	97 a1       	ldd	r25, Z+39	; 0x27
    215a:	a0 a5       	ldd	r26, Z+40	; 0x28
    215c:	b1 a5       	ldd	r27, Z+41	; 0x29
    215e:	28 0f       	add	r18, r24
    2160:	39 1f       	adc	r19, r25
    2162:	4a 1f       	adc	r20, r26
    2164:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2166:	2e 87       	std	Y+14, r18	; 0x0e
    2168:	3f 87       	std	Y+15, r19	; 0x0f
    216a:	48 8b       	std	Y+16, r20	; 0x10
    216c:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    216e:	6c 82       	std	Y+4, r6	; 0x04
    2170:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2172:	35 e0       	ldi	r19, 0x05	; 5
    2174:	44 0c       	add	r4, r4
    2176:	55 1c       	adc	r5, r5
    2178:	3a 95       	dec	r19
    217a:	e1 f7       	brne	.-8      	; 0x2174 <dir_next+0x2ae>
    217c:	8e e2       	ldi	r24, 0x2E	; 46
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	48 0e       	add	r4, r24
    2182:	59 1e       	adc	r5, r25
    2184:	88 81       	ld	r24, Y
    2186:	99 81       	ldd	r25, Y+1	; 0x01
    2188:	84 0d       	add	r24, r4
    218a:	95 1d       	adc	r25, r5
    218c:	8a 8b       	std	Y+18, r24	; 0x12
    218e:	9b 8b       	std	Y+19, r25	; 0x13
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	05 c0       	rjmp	.+10     	; 0x219e <dir_next+0x2d8>

	return FR_OK;
    2194:	84 e0       	ldi	r24, 0x04	; 4
    2196:	03 c0       	rjmp	.+6      	; 0x219e <dir_next+0x2d8>
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	01 c0       	rjmp	.+2      	; 0x219e <dir_next+0x2d8>
    219c:	81 e0       	ldi	r24, 0x01	; 1
}
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	bf 90       	pop	r11
    21b0:	af 90       	pop	r10
    21b2:	9f 90       	pop	r9
    21b4:	8f 90       	pop	r8
    21b6:	7f 90       	pop	r7
    21b8:	6f 90       	pop	r6
    21ba:	5f 90       	pop	r5
    21bc:	4f 90       	pop	r4
    21be:	08 95       	ret

000021c0 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	ec 01       	movw	r28, r24
    21c6:	94 e0       	ldi	r25, 0x04	; 4
    21c8:	1a c0       	rjmp	.+52     	; 0x21fe <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    21ca:	88 81       	ld	r24, Y
    21cc:	99 81       	ldd	r25, Y+1	; 0x01
    21ce:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    21d2:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    21d4:	88 23       	and	r24, r24
    21d6:	f1 f4       	brne	.+60     	; 0x2214 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    21d8:	ea 89       	ldd	r30, Y+18	; 0x12
    21da:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    21dc:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    21de:	88 23       	and	r24, r24
    21e0:	09 f1       	breq	.+66     	; 0x2224 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    21e2:	85 3e       	cpi	r24, 0xE5	; 229
    21e4:	29 f0       	breq	.+10     	; 0x21f0 <dir_read+0x30>
    21e6:	8e 32       	cpi	r24, 0x2E	; 46
    21e8:	19 f0       	breq	.+6      	; 0x21f0 <dir_read+0x30>
    21ea:	83 85       	ldd	r24, Z+11	; 0x0b
    21ec:	83 ff       	sbrs	r24, 3
    21ee:	16 c0       	rjmp	.+44     	; 0x221c <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    21f0:	ce 01       	movw	r24, r28
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <dir_next>
    21f8:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    21fa:	88 23       	and	r24, r24
    21fc:	59 f4       	brne	.+22     	; 0x2214 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    21fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    2200:	5f 85       	ldd	r21, Y+15	; 0x0f
    2202:	68 89       	ldd	r22, Y+16	; 0x10
    2204:	79 89       	ldd	r23, Y+17	; 0x11
    2206:	41 15       	cp	r20, r1
    2208:	51 05       	cpc	r21, r1
    220a:	61 05       	cpc	r22, r1
    220c:	71 05       	cpc	r23, r1
    220e:	e9 f6       	brne	.-70     	; 0x21ca <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2210:	99 23       	and	r25, r25
    2212:	21 f0       	breq	.+8      	; 0x221c <dir_read+0x5c>
    2214:	1e 86       	std	Y+14, r1	; 0x0e
    2216:	1f 86       	std	Y+15, r1	; 0x0f
    2218:	18 8a       	std	Y+16, r1	; 0x10
    221a:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    221c:	89 2f       	mov	r24, r25
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2224:	94 e0       	ldi	r25, 0x04	; 4
    2226:	f6 cf       	rjmp	.-20     	; 0x2214 <dir_read+0x54>

00002228 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
    2236:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    2238:	88 23       	and	r24, r24
    223a:	e9 f5       	brne	.+122    	; 0x22b6 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    223c:	4e 85       	ldd	r20, Y+14	; 0x0e
    223e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2240:	68 89       	ldd	r22, Y+16	; 0x10
    2242:	79 89       	ldd	r23, Y+17	; 0x11
    2244:	88 81       	ld	r24, Y
    2246:	99 81       	ldd	r25, Y+1	; 0x01
    2248:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    224c:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    224e:	88 23       	and	r24, r24
    2250:	91 f5       	brne	.+100    	; 0x22b6 <dir_register+0x8e>
			c = *dj->dir;
    2252:	ea 89       	ldd	r30, Y+18	; 0x12
    2254:	fb 89       	ldd	r31, Y+19	; 0x13
    2256:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2258:	e5 3e       	cpi	r30, 0xE5	; 229
    225a:	89 f1       	breq	.+98     	; 0x22be <dir_register+0x96>
    225c:	ee 23       	and	r30, r30
    225e:	79 f1       	breq	.+94     	; 0x22be <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2260:	ce 01       	movw	r24, r28
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <dir_next>
    2268:	e6 cf       	rjmp	.-52     	; 0x2236 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    226a:	6a 89       	ldd	r22, Y+18	; 0x12
    226c:	7b 89       	ldd	r23, Y+19	; 0x13
    226e:	fb 01       	movw	r30, r22
    2270:	80 e2       	ldi	r24, 0x20	; 32
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2276:	11 92       	st	Z+, r1
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	2f ef       	ldi	r18, 0xFF	; 255
    227c:	8f 3f       	cpi	r24, 0xFF	; 255
    227e:	92 07       	cpc	r25, r18
    2280:	d1 f7       	brne	.-12     	; 0x2276 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2282:	8c 89       	ldd	r24, Y+20	; 0x14
    2284:	9d 89       	ldd	r25, Y+21	; 0x15
    2286:	9c 01       	movw	r18, r24
    2288:	d9 01       	movw	r26, r18
    228a:	fb 01       	movw	r30, r22
    228c:	2b e0       	ldi	r18, 0x0B	; 11
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    2292:	8d 91       	ld	r24, X+
    2294:	81 93       	st	Z+, r24
    2296:	21 50       	subi	r18, 0x01	; 1
    2298:	30 40       	sbci	r19, 0x00	; 0
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	2f 3f       	cpi	r18, 0xFF	; 255
    229e:	38 07       	cpc	r19, r24
    22a0:	c1 f7       	brne	.-16     	; 0x2292 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    22a2:	ec 89       	ldd	r30, Y+20	; 0x14
    22a4:	fd 89       	ldd	r31, Y+21	; 0x15
    22a6:	83 85       	ldd	r24, Z+11	; 0x0b
    22a8:	88 71       	andi	r24, 0x18	; 24
    22aa:	fb 01       	movw	r30, r22
    22ac:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    22ae:	e8 81       	ld	r30, Y
    22b0:	f9 81       	ldd	r31, Y+1	; 0x01
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    22b6:	84 2f       	mov	r24, r20
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    22be:	4e 85       	ldd	r20, Y+14	; 0x0e
    22c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    22c2:	68 89       	ldd	r22, Y+16	; 0x10
    22c4:	79 89       	ldd	r23, Y+17	; 0x11
    22c6:	88 81       	ld	r24, Y
    22c8:	99 81       	ldd	r25, Y+1	; 0x01
    22ca:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    22ce:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    22d0:	88 23       	and	r24, r24
    22d2:	59 f2       	breq	.-106    	; 0x226a <dir_register+0x42>
    22d4:	f0 cf       	rjmp	.-32     	; 0x22b6 <dir_register+0x8e>

000022d6 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    22dc:	6c 81       	ldd	r22, Y+4	; 0x04
    22de:	7d 81       	ldd	r23, Y+5	; 0x05
    22e0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
    22e4:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    22e6:	88 23       	and	r24, r24
    22e8:	99 f4       	brne	.+38     	; 0x2310 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    22ea:	4e 85       	ldd	r20, Y+14	; 0x0e
    22ec:	5f 85       	ldd	r21, Y+15	; 0x0f
    22ee:	68 89       	ldd	r22, Y+16	; 0x10
    22f0:	79 89       	ldd	r23, Y+17	; 0x11
    22f2:	88 81       	ld	r24, Y
    22f4:	99 81       	ldd	r25, Y+1	; 0x01
    22f6:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    22fa:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    22fc:	88 23       	and	r24, r24
    22fe:	41 f4       	brne	.+16     	; 0x2310 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    2300:	ea 89       	ldd	r30, Y+18	; 0x12
    2302:	fb 89       	ldd	r31, Y+19	; 0x13
    2304:	85 ee       	ldi	r24, 0xE5	; 229
    2306:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    2308:	e8 81       	ld	r30, Y
    230a:	f9 81       	ldd	r31, Y+1	; 0x01
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    2310:	89 2f       	mov	r24, r25
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	fc 01       	movw	r30, r24
    2326:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    2328:	eb 01       	movw	r28, r22
    232a:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    232c:	86 85       	ldd	r24, Z+14	; 0x0e
    232e:	97 85       	ldd	r25, Z+15	; 0x0f
    2330:	a0 89       	ldd	r26, Z+16	; 0x10
    2332:	b1 89       	ldd	r27, Z+17	; 0x11
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	a1 05       	cpc	r26, r1
    2338:	b1 05       	cpc	r27, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <get_fileinfo+0x26>
    233c:	71 c0       	rjmp	.+226    	; 0x2420 <get_fileinfo+0x108>
		dir = dj->dir;
    233e:	62 89       	ldd	r22, Z+18	; 0x12
    2340:	73 89       	ldd	r23, Z+19	; 0x13
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2346:	fb 01       	movw	r30, r22
    2348:	e8 0f       	add	r30, r24
    234a:	f9 1f       	adc	r31, r25
    234c:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    234e:	e0 32       	cpi	r30, 0x20	; 32
    2350:	41 f0       	breq	.+16     	; 0x2362 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    2352:	e5 30       	cpi	r30, 0x05	; 5
    2354:	09 f4       	brne	.+2      	; 0x2358 <get_fileinfo+0x40>
    2356:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    2358:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    235a:	01 96       	adiw	r24, 0x01	; 1
    235c:	88 30       	cpi	r24, 0x08	; 8
    235e:	91 05       	cpc	r25, r1
    2360:	91 f7       	brne	.-28     	; 0x2346 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    2362:	db 01       	movw	r26, r22
    2364:	18 96       	adiw	r26, 0x08	; 8
    2366:	8c 91       	ld	r24, X
    2368:	80 32       	cpi	r24, 0x20	; 32
    236a:	11 f4       	brne	.+4      	; 0x2370 <get_fileinfo+0x58>
    236c:	8e 01       	movw	r16, r28
    236e:	12 c0       	rjmp	.+36     	; 0x2394 <get_fileinfo+0x7c>
			*p++ = '.';
    2370:	8e e2       	ldi	r24, 0x2E	; 46
    2372:	fe 01       	movw	r30, r28
    2374:	81 93       	st	Z+, r24
    2376:	8f 01       	movw	r16, r30
    2378:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    237a:	9e 01       	movw	r18, r28
    237c:	2c 5f       	subi	r18, 0xFC	; 252
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2380:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2382:	80 32       	cpi	r24, 0x20	; 32
    2384:	39 f0       	breq	.+14     	; 0x2394 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2386:	d8 01       	movw	r26, r16
    2388:	8d 93       	st	X+, r24
    238a:	8d 01       	movw	r16, r26
    238c:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    238e:	a2 17       	cp	r26, r18
    2390:	b3 07       	cpc	r27, r19
    2392:	b1 f7       	brne	.-20     	; 0x2380 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2394:	fb 01       	movw	r30, r22
    2396:	83 85       	ldd	r24, Z+11	; 0x0b
    2398:	d7 01       	movw	r26, r14
    239a:	18 96       	adiw	r26, 0x08	; 8
    239c:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    239e:	27 8d       	ldd	r18, Z+31	; 0x1f
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	52 2f       	mov	r21, r18
    23a8:	44 27       	eor	r20, r20
    23aa:	33 27       	eor	r19, r19
    23ac:	22 27       	eor	r18, r18
    23ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	dc 01       	movw	r26, r24
    23b8:	99 27       	eor	r25, r25
    23ba:	88 27       	eor	r24, r24
    23bc:	28 2b       	or	r18, r24
    23be:	39 2b       	or	r19, r25
    23c0:	4a 2b       	or	r20, r26
    23c2:	5b 2b       	or	r21, r27
    23c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	28 2b       	or	r18, r24
    23ce:	39 2b       	or	r19, r25
    23d0:	4a 2b       	or	r20, r26
    23d2:	5b 2b       	or	r21, r27
    23d4:	95 8d       	ldd	r25, Z+29	; 0x1d
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	a0 e0       	ldi	r26, 0x00	; 0
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	28 2b       	or	r18, r24
    23de:	39 2b       	or	r19, r25
    23e0:	4a 2b       	or	r20, r26
    23e2:	5b 2b       	or	r21, r27
    23e4:	f7 01       	movw	r30, r14
    23e6:	20 83       	st	Z, r18
    23e8:	31 83       	std	Z+1, r19	; 0x01
    23ea:	42 83       	std	Z+2, r20	; 0x02
    23ec:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    23ee:	db 01       	movw	r26, r22
    23f0:	59 96       	adiw	r26, 0x19	; 25
    23f2:	9c 91       	ld	r25, X
    23f4:	59 97       	sbiw	r26, 0x19	; 25
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	58 96       	adiw	r26, 0x18	; 24
    23fa:	2c 91       	ld	r18, X
    23fc:	58 97       	sbiw	r26, 0x18	; 24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	82 2b       	or	r24, r18
    2402:	93 2b       	or	r25, r19
    2404:	84 83       	std	Z+4, r24	; 0x04
    2406:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2408:	57 96       	adiw	r26, 0x17	; 23
    240a:	9c 91       	ld	r25, X
    240c:	57 97       	sbiw	r26, 0x17	; 23
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	56 96       	adiw	r26, 0x16	; 22
    2412:	2c 91       	ld	r18, X
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	82 2b       	or	r24, r18
    2418:	93 2b       	or	r25, r19
    241a:	86 83       	std	Z+6, r24	; 0x06
    241c:	97 83       	std	Z+7, r25	; 0x07
    241e:	e8 01       	movw	r28, r16
	}
	*p = 0;
    2420:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	08 95       	ret

00002430 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    2430:	5f 92       	push	r5
    2432:	6f 92       	push	r6
    2434:	7f 92       	push	r7
    2436:	8f 92       	push	r8
    2438:	9f 92       	push	r9
    243a:	af 92       	push	r10
    243c:	bf 92       	push	r11
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	ec 01       	movw	r28, r24
    2450:	7b 01       	movw	r14, r22
    2452:	03 c0       	rjmp	.+6      	; 0x245a <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    2454:	08 94       	sec
    2456:	e1 1c       	adc	r14, r1
    2458:	f1 1c       	adc	r15, r1
    245a:	f7 01       	movw	r30, r14
    245c:	80 81       	ld	r24, Z
    245e:	80 32       	cpi	r24, 0x20	; 32
    2460:	c9 f3       	breq	.-14     	; 0x2454 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2462:	8f 32       	cpi	r24, 0x2F	; 47
    2464:	11 f0       	breq	.+4      	; 0x246a <follow_path+0x3a>
    2466:	8c 35       	cpi	r24, 0x5C	; 92
    2468:	19 f4       	brne	.+6      	; 0x2470 <follow_path+0x40>
		path++;
    246a:	08 94       	sec
    246c:	e1 1c       	adc	r14, r1
    246e:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2470:	1e 82       	std	Y+6, r1	; 0x06
    2472:	1f 82       	std	Y+7, r1	; 0x07
    2474:	18 86       	std	Y+8, r1	; 0x08
    2476:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    2478:	f7 01       	movw	r30, r14
    247a:	80 81       	ld	r24, Z
    247c:	80 32       	cpi	r24, 0x20	; 32
    247e:	40 f4       	brcc	.+16     	; 0x2490 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2480:	ce 01       	movw	r24, r28
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
		dj->dir = NULL;
    248a:	1a 8a       	std	Y+18, r1	; 0x12
    248c:	1b 8a       	std	Y+19, r1	; 0x13
    248e:	13 c1       	rjmp	.+550    	; 0x26b6 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2490:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2492:	45 e0       	ldi	r20, 0x05	; 5
    2494:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2496:	ac 89       	ldd	r26, Y+20	; 0x14
    2498:	bd 89       	ldd	r27, Y+21	; 0x15
    249a:	fd 01       	movw	r30, r26
    249c:	8b e0       	ldi	r24, 0x0B	; 11
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    24a2:	01 93       	st	Z+, r16
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	2f ef       	ldi	r18, 0xFF	; 255
    24a8:	8f 3f       	cpi	r24, 0xFF	; 255
    24aa:	92 07       	cpc	r25, r18
    24ac:	d1 f7       	brne	.-12     	; 0x24a2 <follow_path+0x72>
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	cc 24       	eor	r12, r12
    24b4:	dd 24       	eor	r13, r13
    24b6:	38 e0       	ldi	r19, 0x08	; 8
    24b8:	a3 2e       	mov	r10, r19
    24ba:	b1 2c       	mov	r11, r1
    24bc:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    24be:	f7 01       	movw	r30, r14
    24c0:	ec 0d       	add	r30, r12
    24c2:	fd 1d       	adc	r31, r13
    24c4:	20 81       	ld	r18, Z
    24c6:	08 94       	sec
    24c8:	c1 1c       	adc	r12, r1
    24ca:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    24cc:	21 32       	cpi	r18, 0x21	; 33
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <follow_path+0xa2>
    24d0:	66 c0       	rjmp	.+204    	; 0x259e <follow_path+0x16e>
    24d2:	2f 32       	cpi	r18, 0x2F	; 47
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <follow_path+0xa8>
    24d6:	ff c0       	rjmp	.+510    	; 0x26d6 <follow_path+0x2a6>
    24d8:	2c 35       	cpi	r18, 0x5C	; 92
    24da:	09 f4       	brne	.+2      	; 0x24de <follow_path+0xae>
    24dc:	fc c0       	rjmp	.+504    	; 0x26d6 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    24de:	2e 32       	cpi	r18, 0x2E	; 46
    24e0:	19 f0       	breq	.+6      	; 0x24e8 <follow_path+0xb8>
    24e2:	4a 15       	cp	r20, r10
    24e4:	5b 05       	cpc	r21, r11
    24e6:	84 f0       	brlt	.+32     	; 0x2508 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    24e8:	88 e0       	ldi	r24, 0x08	; 8
    24ea:	a8 16       	cp	r10, r24
    24ec:	b1 04       	cpc	r11, r1
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <follow_path+0xc2>
    24f0:	dd c0       	rjmp	.+442    	; 0x26ac <follow_path+0x27c>
    24f2:	2e 32       	cpi	r18, 0x2E	; 46
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <follow_path+0xc8>
    24f6:	da c0       	rjmp	.+436    	; 0x26ac <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    24f8:	11 0f       	add	r17, r17
    24fa:	11 0f       	add	r17, r17
    24fc:	48 e0       	ldi	r20, 0x08	; 8
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	2b e0       	ldi	r18, 0x0B	; 11
    2502:	a2 2e       	mov	r10, r18
    2504:	b1 2c       	mov	r11, r1
    2506:	db cf       	rjmp	.-74     	; 0x24be <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    2508:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    250a:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    250c:	82 2f       	mov	r24, r18
    250e:	81 58       	subi	r24, 0x81	; 129
    2510:	8f 31       	cpi	r24, 0x1F	; 31
    2512:	18 f0       	brcs	.+6      	; 0x251a <follow_path+0xea>
    2514:	8f 55       	subi	r24, 0x5F	; 95
    2516:	8d 31       	cpi	r24, 0x1D	; 29
    2518:	08 f5       	brcc	.+66     	; 0x255c <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    251a:	f7 01       	movw	r30, r14
    251c:	ec 0d       	add	r30, r12
    251e:	fd 1d       	adc	r31, r13
    2520:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2522:	83 2f       	mov	r24, r19
    2524:	80 54       	subi	r24, 0x40	; 64
    2526:	8f 33       	cpi	r24, 0x3F	; 63
    2528:	20 f0       	brcs	.+8      	; 0x2532 <follow_path+0x102>
    252a:	80 54       	subi	r24, 0x40	; 64
    252c:	8d 37       	cpi	r24, 0x7D	; 125
    252e:	08 f0       	brcs	.+2      	; 0x2532 <follow_path+0x102>
    2530:	bd c0       	rjmp	.+378    	; 0x26ac <follow_path+0x27c>
    2532:	c5 01       	movw	r24, r10
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	48 17       	cp	r20, r24
    2538:	59 07       	cpc	r21, r25
    253a:	0c f0       	brlt	.+2      	; 0x253e <follow_path+0x10e>
    253c:	b7 c0       	rjmp	.+366    	; 0x26ac <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    253e:	08 94       	sec
    2540:	c1 1c       	adc	r12, r1
    2542:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2544:	fd 01       	movw	r30, r26
    2546:	e4 0f       	add	r30, r20
    2548:	f5 1f       	adc	r31, r21
    254a:	20 83       	st	Z, r18
    254c:	ca 01       	movw	r24, r20
    254e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2550:	fd 01       	movw	r30, r26
    2552:	e8 0f       	add	r30, r24
    2554:	f9 1f       	adc	r31, r25
    2556:	30 83       	st	Z, r19
    2558:	ac 01       	movw	r20, r24
    255a:	1e c0       	rjmp	.+60     	; 0x2598 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    255c:	62 2f       	mov	r22, r18
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	e0 e0       	ldi	r30, 0x00	; 0
    2562:	f0 e2       	ldi	r31, 0x20	; 32
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2566:	31 96       	adiw	r30, 0x01	; 1
    2568:	80 81       	ld	r24, Z
    256a:	88 23       	and	r24, r24
    256c:	29 f0       	breq	.+10     	; 0x2578 <follow_path+0x148>
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	86 17       	cp	r24, r22
    2572:	97 07       	cpc	r25, r23
    2574:	c1 f7       	brne	.-16     	; 0x2566 <follow_path+0x136>
    2576:	9a c0       	rjmp	.+308    	; 0x26ac <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2578:	82 2f       	mov	r24, r18
    257a:	81 54       	subi	r24, 0x41	; 65
    257c:	8a 31       	cpi	r24, 0x1A	; 26
    257e:	10 f4       	brcc	.+4      	; 0x2584 <follow_path+0x154>
				b |= 2;
    2580:	12 60       	ori	r17, 0x02	; 2
    2582:	06 c0       	rjmp	.+12     	; 0x2590 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2584:	82 2f       	mov	r24, r18
    2586:	81 56       	subi	r24, 0x61	; 97
    2588:	8a 31       	cpi	r24, 0x1A	; 26
    258a:	10 f4       	brcc	.+4      	; 0x2590 <follow_path+0x160>
					b |= 1; c -= 0x20;
    258c:	11 60       	ori	r17, 0x01	; 1
    258e:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2590:	fd 01       	movw	r30, r26
    2592:	e4 0f       	add	r30, r20
    2594:	f5 1f       	adc	r31, r21
    2596:	20 83       	st	Z, r18
    2598:	4f 5f       	subi	r20, 0xFF	; 255
    259a:	5f 4f       	sbci	r21, 0xFF	; 255
    259c:	90 cf       	rjmp	.-224    	; 0x24be <follow_path+0x8e>
    259e:	91 2f       	mov	r25, r17
    25a0:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    25a2:	45 2b       	or	r20, r21
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <follow_path+0x178>
    25a6:	82 c0       	rjmp	.+260    	; 0x26ac <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    25a8:	8c 91       	ld	r24, X
    25aa:	85 3e       	cpi	r24, 0xE5	; 229
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <follow_path+0x180>
    25ae:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    25b0:	e8 e0       	ldi	r30, 0x08	; 8
    25b2:	ae 16       	cp	r10, r30
    25b4:	b1 04       	cpc	r11, r1
    25b6:	19 f4       	brne	.+6      	; 0x25be <follow_path+0x18e>
    25b8:	91 2f       	mov	r25, r17
    25ba:	99 0f       	add	r25, r25
    25bc:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    25be:	29 2f       	mov	r18, r25
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	c9 01       	movw	r24, r18
    25c4:	83 70       	andi	r24, 0x03	; 3
    25c6:	90 70       	andi	r25, 0x00	; 0
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <follow_path+0x19e>
    25cc:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    25ce:	2c 70       	andi	r18, 0x0C	; 12
    25d0:	30 70       	andi	r19, 0x00	; 0
    25d2:	24 30       	cpi	r18, 0x04	; 4
    25d4:	31 05       	cpc	r19, r1
    25d6:	09 f4       	brne	.+2      	; 0x25da <follow_path+0x1aa>
    25d8:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    25da:	1b 96       	adiw	r26, 0x0b	; 11
    25dc:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    25de:	ce 01       	movw	r24, r28
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
    25e8:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    25ea:	88 23       	and	r24, r24
    25ec:	71 f5       	brne	.+92     	; 0x264a <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    25ee:	4e 85       	ldd	r20, Y+14	; 0x0e
    25f0:	5f 85       	ldd	r21, Y+15	; 0x0f
    25f2:	68 89       	ldd	r22, Y+16	; 0x10
    25f4:	79 89       	ldd	r23, Y+17	; 0x11
    25f6:	88 81       	ld	r24, Y
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    25fe:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    2600:	88 23       	and	r24, r24
    2602:	19 f5       	brne	.+70     	; 0x264a <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2604:	ea 89       	ldd	r30, Y+18	; 0x12
    2606:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2608:	80 81       	ld	r24, Z
    260a:	88 23       	and	r24, r24
    260c:	11 f4       	brne	.+4      	; 0x2612 <follow_path+0x1e2>
    260e:	44 e0       	ldi	r20, 0x04	; 4
    2610:	1c c0       	rjmp	.+56     	; 0x264a <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2612:	83 85       	ldd	r24, Z+11	; 0x0b
    2614:	83 fd       	sbrc	r24, 3
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <follow_path+0x210>
    2618:	df 01       	movw	r26, r30
    261a:	8c 89       	ldd	r24, Y+20	; 0x14
    261c:	9d 89       	ldd	r25, Y+21	; 0x15
    261e:	9c 01       	movw	r18, r24
    2620:	f9 01       	movw	r30, r18
    2622:	2b e0       	ldi	r18, 0x0B	; 11
    2624:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2626:	21 50       	subi	r18, 0x01	; 1
    2628:	30 40       	sbci	r19, 0x00	; 0
    262a:	8f ef       	ldi	r24, 0xFF	; 255
    262c:	2f 3f       	cpi	r18, 0xFF	; 255
    262e:	38 07       	cpc	r19, r24
    2630:	61 f0       	breq	.+24     	; 0x264a <follow_path+0x21a>
    2632:	9c 91       	ld	r25, X
    2634:	80 81       	ld	r24, Z
    2636:	98 17       	cp	r25, r24
    2638:	19 f4       	brne	.+6      	; 0x2640 <follow_path+0x210>
    263a:	11 96       	adiw	r26, 0x01	; 1
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	f3 cf       	rjmp	.-26     	; 0x2626 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    2640:	ce 01       	movw	r24, r28
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <dir_next>
    2648:	cf cf       	rjmp	.-98     	; 0x25e8 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    264a:	ec 89       	ldd	r30, Y+20	; 0x14
    264c:	fd 89       	ldd	r31, Y+21	; 0x15
    264e:	93 85       	ldd	r25, Z+11	; 0x0b
    2650:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    2652:	44 23       	and	r20, r20
    2654:	31 f0       	breq	.+12     	; 0x2662 <follow_path+0x232>
    2656:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    2658:	44 30       	cpi	r20, 0x04	; 4
    265a:	51 f5       	brne	.+84     	; 0x26b0 <follow_path+0x280>
    265c:	99 23       	and	r25, r25
    265e:	51 f1       	breq	.+84     	; 0x26b4 <follow_path+0x284>
    2660:	2a c0       	rjmp	.+84     	; 0x26b6 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    2662:	99 23       	and	r25, r25
    2664:	29 f5       	brne	.+74     	; 0x26b0 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    2666:	ea 89       	ldd	r30, Y+18	; 0x12
    2668:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    266a:	83 85       	ldd	r24, Z+11	; 0x0b
    266c:	84 ff       	sbrs	r24, 4
    266e:	22 c0       	rjmp	.+68     	; 0x26b4 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2670:	ec 0c       	add	r14, r12
    2672:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2674:	75 88       	ldd	r7, Z+21	; 0x15
    2676:	66 24       	eor	r6, r6
    2678:	24 89       	ldd	r18, Z+20	; 0x14
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	26 29       	or	r18, r6
    267e:	37 29       	or	r19, r7
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	a9 01       	movw	r20, r18
    2686:	33 27       	eor	r19, r19
    2688:	22 27       	eor	r18, r18
    268a:	93 8c       	ldd	r9, Z+27	; 0x1b
    268c:	88 24       	eor	r8, r8
    268e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	88 29       	or	r24, r8
    2694:	99 29       	or	r25, r9
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	28 2b       	or	r18, r24
    269c:	39 2b       	or	r19, r25
    269e:	4a 2b       	or	r20, r26
    26a0:	5b 2b       	or	r21, r27
    26a2:	2e 83       	std	Y+6, r18	; 0x06
    26a4:	3f 83       	std	Y+7, r19	; 0x07
    26a6:	48 87       	std	Y+8, r20	; 0x08
    26a8:	59 87       	std	Y+9, r21	; 0x09
    26aa:	f5 ce       	rjmp	.-534    	; 0x2496 <follow_path+0x66>
		}
    26ac:	86 e0       	ldi	r24, 0x06	; 6
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <follow_path+0x286>
    26b0:	84 2f       	mov	r24, r20
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <follow_path+0x286>
    26b4:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	bf 90       	pop	r11
    26c8:	af 90       	pop	r10
    26ca:	9f 90       	pop	r9
    26cc:	8f 90       	pop	r8
    26ce:	7f 90       	pop	r7
    26d0:	6f 90       	pop	r6
    26d2:	5f 90       	pop	r5
    26d4:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    26d6:	91 2f       	mov	r25, r17
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	63 cf       	rjmp	.-314    	; 0x25a2 <follow_path+0x172>

000026dc <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    26dc:	0f 93       	push	r16
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	ec 01       	movw	r28, r24
    26e4:	9a 01       	movw	r18, r20
    26e6:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    26e8:	bc 01       	movw	r22, r24
    26ea:	62 5d       	subi	r22, 0xD2	; 210
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	01 e0       	ldi	r16, 0x01	; 1
    26f2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    26f6:	88 23       	and	r24, r24
    26f8:	11 f0       	breq	.+4      	; 0x26fe <check_fs+0x22>
    26fa:	63 e0       	ldi	r22, 0x03	; 3
    26fc:	6d c0       	rjmp	.+218    	; 0x27d8 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    26fe:	c3 5d       	subi	r28, 0xD3	; 211
    2700:	dd 4f       	sbci	r29, 0xFD	; 253
    2702:	98 81       	ld	r25, Y
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	2a 91       	ld	r18, -Y
    2708:	cc 52       	subi	r28, 0x2C	; 44
    270a:	d2 40       	sbci	r29, 0x02	; 2
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	82 2b       	or	r24, r18
    2710:	93 2b       	or	r25, r19
    2712:	85 55       	subi	r24, 0x55	; 85
    2714:	9a 4a       	sbci	r25, 0xAA	; 170
    2716:	11 f0       	breq	.+4      	; 0x271c <check_fs+0x40>
    2718:	62 e0       	ldi	r22, 0x02	; 2
    271a:	5e c0       	rjmp	.+188    	; 0x27d8 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    271c:	c9 59       	subi	r28, 0x99	; 153
    271e:	df 4f       	sbci	r29, 0xFF	; 255
    2720:	28 81       	ld	r18, Y
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	52 2f       	mov	r21, r18
    272a:	44 27       	eor	r20, r20
    272c:	33 27       	eor	r19, r19
    272e:	22 27       	eor	r18, r18
    2730:	8a 91       	ld	r24, -Y
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	a0 e0       	ldi	r26, 0x00	; 0
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	dc 01       	movw	r26, r24
    273a:	99 27       	eor	r25, r25
    273c:	88 27       	eor	r24, r24
    273e:	28 2b       	or	r18, r24
    2740:	39 2b       	or	r19, r25
    2742:	4a 2b       	or	r20, r26
    2744:	5b 2b       	or	r21, r27
    2746:	22 97       	sbiw	r28, 0x02	; 2
    2748:	89 91       	ld	r24, Y+
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e0       	ldi	r26, 0x00	; 0
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	28 2b       	or	r18, r24
    2752:	39 2b       	or	r19, r25
    2754:	4a 2b       	or	r20, r26
    2756:	5b 2b       	or	r21, r27
    2758:	98 81       	ld	r25, Y
    275a:	c5 56       	subi	r28, 0x65	; 101
    275c:	d0 40       	sbci	r29, 0x00	; 0
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	a0 e0       	ldi	r26, 0x00	; 0
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	28 2b       	or	r18, r24
    2766:	39 2b       	or	r19, r25
    2768:	4a 2b       	or	r20, r26
    276a:	5b 2b       	or	r21, r27
    276c:	50 70       	andi	r21, 0x00	; 0
    276e:	26 54       	subi	r18, 0x46	; 70
    2770:	31 44       	sbci	r19, 0x41	; 65
    2772:	44 45       	sbci	r20, 0x54	; 84
    2774:	50 40       	sbci	r21, 0x00	; 0
    2776:	11 f4       	brne	.+4      	; 0x277c <check_fs+0xa0>
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	2e c0       	rjmp	.+92     	; 0x27d8 <check_fs+0xfc>
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	cd 57       	subi	r28, 0x7D	; 125
    2780:	df 4f       	sbci	r29, 0xFF	; 255
    2782:	28 81       	ld	r18, Y
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	52 2f       	mov	r21, r18
    278c:	44 27       	eor	r20, r20
    278e:	33 27       	eor	r19, r19
    2790:	22 27       	eor	r18, r18
    2792:	8a 91       	ld	r24, -Y
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e0       	ldi	r26, 0x00	; 0
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	dc 01       	movw	r26, r24
    279c:	99 27       	eor	r25, r25
    279e:	88 27       	eor	r24, r24
    27a0:	28 2b       	or	r18, r24
    27a2:	39 2b       	or	r19, r25
    27a4:	4a 2b       	or	r20, r26
    27a6:	5b 2b       	or	r21, r27
    27a8:	22 97       	sbiw	r28, 0x02	; 2
    27aa:	89 91       	ld	r24, Y+
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	28 2b       	or	r18, r24
    27b4:	39 2b       	or	r19, r25
    27b6:	4a 2b       	or	r20, r26
    27b8:	5b 2b       	or	r21, r27
    27ba:	98 81       	ld	r25, Y
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	a0 e0       	ldi	r26, 0x00	; 0
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	28 2b       	or	r18, r24
    27c4:	39 2b       	or	r19, r25
    27c6:	4a 2b       	or	r20, r26
    27c8:	5b 2b       	or	r21, r27
    27ca:	50 70       	andi	r21, 0x00	; 0
    27cc:	26 54       	subi	r18, 0x46	; 70
    27ce:	31 44       	sbci	r19, 0x41	; 65
    27d0:	44 45       	sbci	r20, 0x54	; 84
    27d2:	50 40       	sbci	r21, 0x00	; 0
    27d4:	09 f0       	breq	.+2      	; 0x27d8 <check_fs+0xfc>
    27d6:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    27d8:	86 2f       	mov	r24, r22
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    27e2:	6f 92       	push	r6
    27e4:	7f 92       	push	r7
    27e6:	8f 92       	push	r8
    27e8:	9f 92       	push	r9
    27ea:	af 92       	push	r10
    27ec:	bf 92       	push	r11
    27ee:	cf 92       	push	r12
    27f0:	df 92       	push	r13
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	fc 01       	movw	r30, r24
    2800:	9b 01       	movw	r18, r22
    2802:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2804:	a0 81       	ld	r26, Z
    2806:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2808:	8c 91       	ld	r24, X
    280a:	08 2f       	mov	r16, r24
    280c:	10 e0       	ldi	r17, 0x00	; 0
    280e:	00 53       	subi	r16, 0x30	; 48
    2810:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    2812:	0a 30       	cpi	r16, 0x0A	; 10
    2814:	11 05       	cpc	r17, r1
    2816:	68 f4       	brcc	.+26     	; 0x2832 <chk_mounted+0x50>
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	8c 91       	ld	r24, X
    281c:	11 97       	sbiw	r26, 0x01	; 1
    281e:	8a 33       	cpi	r24, 0x3A	; 58
    2820:	41 f4       	brne	.+16     	; 0x2832 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    2822:	12 96       	adiw	r26, 0x02	; 2
    2824:	a0 83       	st	Z, r26
    2826:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2828:	02 30       	cpi	r16, 0x02	; 2
    282a:	11 05       	cpc	r17, r1
    282c:	20 f0       	brcs	.+8      	; 0x2836 <chk_mounted+0x54>
    282e:	8b e0       	ldi	r24, 0x0B	; 11
    2830:	91 c2       	rjmp	.+1314   	; 0x2d54 <chk_mounted+0x572>
    2832:	00 e0       	ldi	r16, 0x00	; 0
    2834:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2836:	f8 01       	movw	r30, r16
    2838:	ee 0f       	add	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	e3 53       	subi	r30, 0x33	; 51
    283e:	f8 4d       	sbci	r31, 0xD8	; 216
    2840:	c0 81       	ld	r28, Z
    2842:	d1 81       	ldd	r29, Z+1	; 0x01
    2844:	f9 01       	movw	r30, r18
    2846:	c0 83       	st	Z, r28
    2848:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    284a:	20 97       	sbiw	r28, 0x00	; 0
    284c:	11 f4       	brne	.+4      	; 0x2852 <chk_mounted+0x70>
    284e:	8c e0       	ldi	r24, 0x0C	; 12
    2850:	81 c2       	rjmp	.+1282   	; 0x2d54 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2852:	88 81       	ld	r24, Y
    2854:	88 23       	and	r24, r24
    2856:	79 f0       	breq	.+30     	; 0x2876 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	88 23       	and	r24, r24
    285c:	11 f0       	breq	.+4      	; 0x2862 <chk_mounted+0x80>
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <chk_mounted+0x84>
	return Stat;
    2862:	80 91 52 27 	lds	r24, 0x2752
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2866:	80 fd       	sbrc	r24, 0
    2868:	06 c0       	rjmp	.+12     	; 0x2876 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    286a:	ff 20       	and	r15, r15
    286c:	09 f4       	brne	.+2      	; 0x2870 <chk_mounted+0x8e>
    286e:	6f c2       	rjmp	.+1246   	; 0x2d4e <chk_mounted+0x56c>
    2870:	82 fd       	sbrc	r24, 2
    2872:	6b c2       	rjmp	.+1238   	; 0x2d4a <chk_mounted+0x568>
    2874:	6c c2       	rjmp	.+1240   	; 0x2d4e <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2876:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    2878:	f8 01       	movw	r30, r16
    287a:	ee 0f       	add	r30, r30
    287c:	ff 1f       	adc	r31, r31
    287e:	ec 53       	subi	r30, 0x3C	; 60
    2880:	fd 4d       	sbci	r31, 0xDD	; 221
    2882:	80 81       	ld	r24, Z
    2884:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    2886:	0e 94 ba 05 	call	0xb74	; 0xb74 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    288a:	80 ff       	sbrs	r24, 0
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <chk_mounted+0xb0>
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	61 c2       	rjmp	.+1218   	; 0x2d54 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2892:	ff 20       	and	r15, r15
    2894:	11 f0       	breq	.+4      	; 0x289a <chk_mounted+0xb8>
    2896:	82 fd       	sbrc	r24, 2
    2898:	58 c2       	rjmp	.+1200   	; 0x2d4a <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    289a:	ce 01       	movw	r24, r28
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	0e 94 6e 13 	call	0x26dc	; 0x26dc <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	21 f0       	breq	.+8      	; 0x28b4 <chk_mounted+0xd2>
    28ac:	aa 24       	eor	r10, r10
    28ae:	bb 24       	eor	r11, r11
    28b0:	65 01       	movw	r12, r10
    28b2:	3d c0       	rjmp	.+122    	; 0x292e <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    28b4:	00 0f       	add	r16, r16
    28b6:	11 1f       	adc	r17, r17
    28b8:	0c 53       	subi	r16, 0x3C	; 60
    28ba:	1d 4d       	sbci	r17, 0xDD	; 221
    28bc:	f8 01       	movw	r30, r16
    28be:	81 81       	ldd	r24, Z+1	; 0x01
    28c0:	e8 2f       	mov	r30, r24
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	a4 e0       	ldi	r26, 0x04	; 4
    28c6:	ee 0f       	add	r30, r30
    28c8:	ff 1f       	adc	r31, r31
    28ca:	aa 95       	dec	r26
    28cc:	e1 f7       	brne	.-8      	; 0x28c6 <chk_mounted+0xe4>
    28ce:	e4 51       	subi	r30, 0x14	; 20
    28d0:	fe 4f       	sbci	r31, 0xFE	; 254
    28d2:	ec 0f       	add	r30, r28
    28d4:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    28d6:	84 81       	ldd	r24, Z+4	; 0x04
    28d8:	88 23       	and	r24, r24
    28da:	09 f4       	brne	.+2      	; 0x28de <chk_mounted+0xfc>
    28dc:	3a c2       	rjmp	.+1140   	; 0x2d52 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    28de:	83 85       	ldd	r24, Z+11	; 0x0b
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	d8 2e       	mov	r13, r24
    28e8:	cc 24       	eor	r12, r12
    28ea:	bb 24       	eor	r11, r11
    28ec:	aa 24       	eor	r10, r10
    28ee:	82 85       	ldd	r24, Z+10	; 0x0a
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	dc 01       	movw	r26, r24
    28f8:	99 27       	eor	r25, r25
    28fa:	88 27       	eor	r24, r24
    28fc:	a8 2a       	or	r10, r24
    28fe:	b9 2a       	or	r11, r25
    2900:	ca 2a       	or	r12, r26
    2902:	db 2a       	or	r13, r27
    2904:	80 85       	ldd	r24, Z+8	; 0x08
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	a8 2a       	or	r10, r24
    290e:	b9 2a       	or	r11, r25
    2910:	ca 2a       	or	r12, r26
    2912:	db 2a       	or	r13, r27
    2914:	91 85       	ldd	r25, Z+9	; 0x09
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	a0 e0       	ldi	r26, 0x00	; 0
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	a8 2a       	or	r10, r24
    291e:	b9 2a       	or	r11, r25
    2920:	ca 2a       	or	r12, r26
    2922:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2924:	ce 01       	movw	r24, r28
    2926:	b6 01       	movw	r22, r12
    2928:	a5 01       	movw	r20, r10
    292a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    292e:	83 30       	cpi	r24, 0x03	; 3
    2930:	11 f4       	brne	.+4      	; 0x2936 <chk_mounted+0x154>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	0f c2       	rjmp	.+1054   	; 0x2d54 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2936:	88 23       	and	r24, r24
    2938:	09 f0       	breq	.+2      	; 0x293c <chk_mounted+0x15a>
    293a:	0b c2       	rjmp	.+1046   	; 0x2d52 <chk_mounted+0x570>
    293c:	9a ad       	ldd	r25, Y+58	; 0x3a
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	29 ad       	ldd	r18, Y+57	; 0x39
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	82 2b       	or	r24, r18
    2946:	93 2b       	or	r25, r19
    2948:	80 50       	subi	r24, 0x00	; 0
    294a:	92 40       	sbci	r25, 0x02	; 2
    294c:	09 f0       	breq	.+2      	; 0x2950 <chk_mounted+0x16e>
    294e:	01 c2       	rjmp	.+1026   	; 0x2d52 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2950:	cb 5b       	subi	r28, 0xBB	; 187
    2952:	df 4f       	sbci	r29, 0xFF	; 255
    2954:	98 81       	ld	r25, Y
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	2a 91       	ld	r18, -Y
    295a:	c4 54       	subi	r28, 0x44	; 68
    295c:	d0 40       	sbci	r29, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	82 2b       	or	r24, r18
    2962:	93 2b       	or	r25, r19
    2964:	7c 01       	movw	r14, r24
    2966:	00 e0       	ldi	r16, 0x00	; 0
    2968:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    296a:	e1 14       	cp	r14, r1
    296c:	f1 04       	cpc	r15, r1
    296e:	01 05       	cpc	r16, r1
    2970:	11 05       	cpc	r17, r1
    2972:	41 f5       	brne	.+80     	; 0x29c4 <chk_mounted+0x1e2>
    2974:	cb 5a       	subi	r28, 0xAB	; 171
    2976:	df 4f       	sbci	r29, 0xFF	; 255
    2978:	88 81       	ld	r24, Y
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	18 2f       	mov	r17, r24
    2982:	00 27       	eor	r16, r16
    2984:	ff 24       	eor	r15, r15
    2986:	ee 24       	eor	r14, r14
    2988:	8a 91       	ld	r24, -Y
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e0       	ldi	r26, 0x00	; 0
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	dc 01       	movw	r26, r24
    2992:	99 27       	eor	r25, r25
    2994:	88 27       	eor	r24, r24
    2996:	e8 2a       	or	r14, r24
    2998:	f9 2a       	or	r15, r25
    299a:	0a 2b       	or	r16, r26
    299c:	1b 2b       	or	r17, r27
    299e:	22 97       	sbiw	r28, 0x02	; 2
    29a0:	89 91       	ld	r24, Y+
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a0 e0       	ldi	r26, 0x00	; 0
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e8 2a       	or	r14, r24
    29aa:	f9 2a       	or	r15, r25
    29ac:	0a 2b       	or	r16, r26
    29ae:	1b 2b       	or	r17, r27
    29b0:	98 81       	ld	r25, Y
    29b2:	c3 55       	subi	r28, 0x53	; 83
    29b4:	d0 40       	sbci	r29, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e8 2a       	or	r14, r24
    29be:	f9 2a       	or	r15, r25
    29c0:	0a 2b       	or	r16, r26
    29c2:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    29c4:	ee 8a       	std	Y+22, r14	; 0x16
    29c6:	ff 8a       	std	Y+23, r15	; 0x17
    29c8:	08 8f       	std	Y+24, r16	; 0x18
    29ca:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    29cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    29ce:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	c8 01       	movw	r24, r16
    29d8:	b7 01       	movw	r22, r14
    29da:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    29de:	3b 01       	movw	r6, r22
    29e0:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    29e2:	9d ad       	ldd	r25, Y+61	; 0x3d
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	82 2b       	or	r24, r18
    29ec:	93 2b       	or	r25, r19
    29ee:	a0 e0       	ldi	r26, 0x00	; 0
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	8a 0d       	add	r24, r10
    29f4:	9b 1d       	adc	r25, r11
    29f6:	ac 1d       	adc	r26, r12
    29f8:	bd 1d       	adc	r27, r13
    29fa:	8e 8f       	std	Y+30, r24	; 0x1e
    29fc:	9f 8f       	std	Y+31, r25	; 0x1f
    29fe:	a8 a3       	std	Y+32, r26	; 0x20
    2a00:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2a02:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a04:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2a06:	c0 5c       	subi	r28, 0xC0	; 192
    2a08:	df 4f       	sbci	r29, 0xFF	; 255
    2a0a:	98 81       	ld	r25, Y
    2a0c:	c0 54       	subi	r28, 0x40	; 64
    2a0e:	d0 40       	sbci	r29, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a14:	42 2f       	mov	r20, r18
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	48 2b       	or	r20, r24
    2a1a:	59 2b       	or	r21, r25
    2a1c:	48 87       	std	Y+8, r20	; 0x08
    2a1e:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2a20:	ce 5b       	subi	r28, 0xBE	; 190
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	98 81       	ld	r25, Y
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	2a 91       	ld	r18, -Y
    2a2a:	c1 54       	subi	r28, 0x41	; 65
    2a2c:	d0 40       	sbci	r29, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	82 2b       	or	r24, r18
    2a32:	93 2b       	or	r25, r19
    2a34:	7c 01       	movw	r14, r24
    2a36:	00 e0       	ldi	r16, 0x00	; 0
    2a38:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2a3a:	e1 14       	cp	r14, r1
    2a3c:	f1 04       	cpc	r15, r1
    2a3e:	01 05       	cpc	r16, r1
    2a40:	11 05       	cpc	r17, r1
    2a42:	41 f5       	brne	.+80     	; 0x2a94 <chk_mounted+0x2b2>
    2a44:	cf 5a       	subi	r28, 0xAF	; 175
    2a46:	df 4f       	sbci	r29, 0xFF	; 255
    2a48:	88 81       	ld	r24, Y
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e0       	ldi	r26, 0x00	; 0
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	18 2f       	mov	r17, r24
    2a52:	00 27       	eor	r16, r16
    2a54:	ff 24       	eor	r15, r15
    2a56:	ee 24       	eor	r14, r14
    2a58:	8a 91       	ld	r24, -Y
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a0 e0       	ldi	r26, 0x00	; 0
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	dc 01       	movw	r26, r24
    2a62:	99 27       	eor	r25, r25
    2a64:	88 27       	eor	r24, r24
    2a66:	e8 2a       	or	r14, r24
    2a68:	f9 2a       	or	r15, r25
    2a6a:	0a 2b       	or	r16, r26
    2a6c:	1b 2b       	or	r17, r27
    2a6e:	22 97       	sbiw	r28, 0x02	; 2
    2a70:	89 91       	ld	r24, Y+
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e8 2a       	or	r14, r24
    2a7a:	f9 2a       	or	r15, r25
    2a7c:	0a 2b       	or	r16, r26
    2a7e:	1b 2b       	or	r17, r27
    2a80:	98 81       	ld	r25, Y
    2a82:	cf 54       	subi	r28, 0x4F	; 79
    2a84:	d0 40       	sbci	r29, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	a0 e0       	ldi	r26, 0x00	; 0
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e8 2a       	or	r14, r24
    2a8e:	f9 2a       	or	r15, r25
    2a90:	0a 2b       	or	r16, r26
    2a92:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2a94:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	82 2b       	or	r24, r18
    2a9e:	93 2b       	or	r25, r19
    2aa0:	a0 e0       	ldi	r26, 0x00	; 0
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e8 1a       	sub	r14, r24
    2aa6:	f9 0a       	sbc	r15, r25
    2aa8:	0a 0b       	sbc	r16, r26
    2aaa:	1b 0b       	sbc	r17, r27
    2aac:	e6 18       	sub	r14, r6
    2aae:	f7 08       	sbc	r15, r7
    2ab0:	08 09       	sbc	r16, r8
    2ab2:	19 09       	sbc	r17, r9
    2ab4:	f4 e0       	ldi	r31, 0x04	; 4
    2ab6:	56 95       	lsr	r21
    2ab8:	47 95       	ror	r20
    2aba:	fa 95       	dec	r31
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <chk_mounted+0x2d4>
    2abe:	ca 01       	movw	r24, r20
    2ac0:	a0 e0       	ldi	r26, 0x00	; 0
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e8 1a       	sub	r14, r24
    2ac6:	f9 0a       	sbc	r15, r25
    2ac8:	0a 0b       	sbc	r16, r26
    2aca:	1b 0b       	sbc	r17, r27
    2acc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	b7 01       	movw	r22, r14
    2ad8:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    2adc:	2e 5f       	subi	r18, 0xFE	; 254
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	2a 8f       	std	Y+26, r18	; 0x1a
    2ae6:	3b 8f       	std	Y+27, r19	; 0x1b
    2ae8:	4c 8f       	std	Y+28, r20	; 0x1c
    2aea:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2aec:	27 3f       	cpi	r18, 0xF7	; 247
    2aee:	8f e0       	ldi	r24, 0x0F	; 15
    2af0:	38 07       	cpc	r19, r24
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	48 07       	cpc	r20, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	58 07       	cpc	r21, r24
    2afa:	10 f4       	brcc	.+4      	; 0x2b00 <chk_mounted+0x31e>
    2afc:	11 e0       	ldi	r17, 0x01	; 1
    2afe:	07 c0       	rjmp	.+14     	; 0x2b0e <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2b00:	27 5f       	subi	r18, 0xF7	; 247
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	40 40       	sbci	r20, 0x00	; 0
    2b06:	50 40       	sbci	r21, 0x00	; 0
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <chk_mounted+0x32a>
    2b0a:	33 c1       	rjmp	.+614    	; 0x2d72 <chk_mounted+0x590>
    2b0c:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2b0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b12:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b14:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b16:	86 0d       	add	r24, r6
    2b18:	97 1d       	adc	r25, r7
    2b1a:	a8 1d       	adc	r26, r8
    2b1c:	b9 1d       	adc	r27, r9
    2b1e:	8a a3       	std	Y+34, r24	; 0x22
    2b20:	9b a3       	std	Y+35, r25	; 0x23
    2b22:	ac a3       	std	Y+36, r26	; 0x24
    2b24:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2b26:	88 85       	ldd	r24, Y+8	; 0x08
    2b28:	99 85       	ldd	r25, Y+9	; 0x09
    2b2a:	e4 e0       	ldi	r30, 0x04	; 4
    2b2c:	96 95       	lsr	r25
    2b2e:	87 95       	ror	r24
    2b30:	ea 95       	dec	r30
    2b32:	e1 f7       	brne	.-8      	; 0x2b2c <chk_mounted+0x34a>
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2b3a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2b3c:	48 a1       	ldd	r20, Y+32	; 0x20
    2b3e:	59 a1       	ldd	r21, Y+33	; 0x21
    2b40:	82 0f       	add	r24, r18
    2b42:	93 1f       	adc	r25, r19
    2b44:	a4 1f       	adc	r26, r20
    2b46:	b5 1f       	adc	r27, r21
    2b48:	86 0d       	add	r24, r6
    2b4a:	97 1d       	adc	r25, r7
    2b4c:	a8 1d       	adc	r26, r8
    2b4e:	b9 1d       	adc	r27, r9
    2b50:	8e a3       	std	Y+38, r24	; 0x26
    2b52:	9f a3       	std	Y+39, r25	; 0x27
    2b54:	a8 a7       	std	Y+40, r26	; 0x28
    2b56:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	9f ef       	ldi	r25, 0xFF	; 255
    2b5c:	af ef       	ldi	r26, 0xFF	; 255
    2b5e:	bf ef       	ldi	r27, 0xFF	; 255
    2b60:	8e 87       	std	Y+14, r24	; 0x0e
    2b62:	9f 87       	std	Y+15, r25	; 0x0f
    2b64:	a8 8b       	std	Y+16, r26	; 0x10
    2b66:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2b68:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2b6a:	13 30       	cpi	r17, 0x03	; 3
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <chk_mounted+0x38e>
    2b6e:	dc c0       	rjmp	.+440    	; 0x2d28 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2b70:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2b72:	c1 5a       	subi	r28, 0xA1	; 161
    2b74:	df 4f       	sbci	r29, 0xFF	; 255
    2b76:	38 81       	ld	r19, Y
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	8a 91       	ld	r24, -Y
    2b7c:	ce 55       	subi	r28, 0x5E	; 94
    2b7e:	d0 40       	sbci	r29, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	28 2b       	or	r18, r24
    2b84:	39 2b       	or	r19, r25
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	2a 0d       	add	r18, r10
    2b8c:	3b 1d       	adc	r19, r11
    2b8e:	4c 1d       	adc	r20, r12
    2b90:	5d 1d       	adc	r21, r13
    2b92:	2a 8b       	std	Y+18, r18	; 0x12
    2b94:	3b 8b       	std	Y+19, r19	; 0x13
    2b96:	4c 8b       	std	Y+20, r20	; 0x14
    2b98:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2b9a:	be 01       	movw	r22, r28
    2b9c:	62 5d       	subi	r22, 0xD2	; 210
    2b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	01 e0       	ldi	r16, 0x01	; 1
    2ba4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    2ba8:	88 23       	and	r24, r24
    2baa:	09 f0       	breq	.+2      	; 0x2bae <chk_mounted+0x3cc>
    2bac:	bd c0       	rjmp	.+378    	; 0x2d28 <chk_mounted+0x546>
    2bae:	c3 5d       	subi	r28, 0xD3	; 211
    2bb0:	dd 4f       	sbci	r29, 0xFD	; 253
    2bb2:	98 81       	ld	r25, Y
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	2a 91       	ld	r18, -Y
    2bb8:	cc 52       	subi	r28, 0x2C	; 44
    2bba:	d2 40       	sbci	r29, 0x02	; 2
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	82 2b       	or	r24, r18
    2bc0:	93 2b       	or	r25, r19
    2bc2:	85 55       	subi	r24, 0x55	; 85
    2bc4:	9a 4a       	sbci	r25, 0xAA	; 170
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <chk_mounted+0x3e8>
    2bc8:	af c0       	rjmp	.+350    	; 0x2d28 <chk_mounted+0x546>
    2bca:	29 a9       	ldd	r18, Y+49	; 0x31
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	52 2f       	mov	r21, r18
    2bd4:	44 27       	eor	r20, r20
    2bd6:	33 27       	eor	r19, r19
    2bd8:	22 27       	eor	r18, r18
    2bda:	88 a9       	ldd	r24, Y+48	; 0x30
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	dc 01       	movw	r26, r24
    2be4:	99 27       	eor	r25, r25
    2be6:	88 27       	eor	r24, r24
    2be8:	28 2b       	or	r18, r24
    2bea:	39 2b       	or	r19, r25
    2bec:	4a 2b       	or	r20, r26
    2bee:	5b 2b       	or	r21, r27
    2bf0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	28 2b       	or	r18, r24
    2bfa:	39 2b       	or	r19, r25
    2bfc:	4a 2b       	or	r20, r26
    2bfe:	5b 2b       	or	r21, r27
    2c00:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	28 2b       	or	r18, r24
    2c0a:	39 2b       	or	r19, r25
    2c0c:	4a 2b       	or	r20, r26
    2c0e:	5b 2b       	or	r21, r27
    2c10:	22 55       	subi	r18, 0x52	; 82
    2c12:	32 45       	sbci	r19, 0x52	; 82
    2c14:	41 46       	sbci	r20, 0x61	; 97
    2c16:	51 44       	sbci	r21, 0x41	; 65
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <chk_mounted+0x43a>
    2c1a:	86 c0       	rjmp	.+268    	; 0x2d28 <chk_mounted+0x546>
    2c1c:	cb 5e       	subi	r28, 0xEB	; 235
    2c1e:	dd 4f       	sbci	r29, 0xFD	; 253
    2c20:	28 81       	ld	r18, Y
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	52 2f       	mov	r21, r18
    2c2a:	44 27       	eor	r20, r20
    2c2c:	33 27       	eor	r19, r19
    2c2e:	22 27       	eor	r18, r18
    2c30:	8a 91       	ld	r24, -Y
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 e0       	ldi	r26, 0x00	; 0
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	dc 01       	movw	r26, r24
    2c3a:	99 27       	eor	r25, r25
    2c3c:	88 27       	eor	r24, r24
    2c3e:	28 2b       	or	r18, r24
    2c40:	39 2b       	or	r19, r25
    2c42:	4a 2b       	or	r20, r26
    2c44:	5b 2b       	or	r21, r27
    2c46:	22 97       	sbiw	r28, 0x02	; 2
    2c48:	89 91       	ld	r24, Y+
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a0 e0       	ldi	r26, 0x00	; 0
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	28 2b       	or	r18, r24
    2c52:	39 2b       	or	r19, r25
    2c54:	4a 2b       	or	r20, r26
    2c56:	5b 2b       	or	r21, r27
    2c58:	98 81       	ld	r25, Y
    2c5a:	c3 51       	subi	r28, 0x13	; 19
    2c5c:	d2 40       	sbci	r29, 0x02	; 2
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	a0 e0       	ldi	r26, 0x00	; 0
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	28 2b       	or	r18, r24
    2c66:	39 2b       	or	r19, r25
    2c68:	4a 2b       	or	r20, r26
    2c6a:	5b 2b       	or	r21, r27
    2c6c:	22 57       	subi	r18, 0x72	; 114
    2c6e:	32 47       	sbci	r19, 0x72	; 114
    2c70:	41 44       	sbci	r20, 0x41	; 65
    2c72:	51 46       	sbci	r21, 0x61	; 97
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <chk_mounted+0x496>
    2c76:	58 c0       	rjmp	.+176    	; 0x2d28 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2c78:	c3 5e       	subi	r28, 0xE3	; 227
    2c7a:	dd 4f       	sbci	r29, 0xFD	; 253
    2c7c:	28 81       	ld	r18, Y
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	52 2f       	mov	r21, r18
    2c86:	44 27       	eor	r20, r20
    2c88:	33 27       	eor	r19, r19
    2c8a:	22 27       	eor	r18, r18
    2c8c:	8a 91       	ld	r24, -Y
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e0       	ldi	r26, 0x00	; 0
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	dc 01       	movw	r26, r24
    2c96:	99 27       	eor	r25, r25
    2c98:	88 27       	eor	r24, r24
    2c9a:	28 2b       	or	r18, r24
    2c9c:	39 2b       	or	r19, r25
    2c9e:	4a 2b       	or	r20, r26
    2ca0:	5b 2b       	or	r21, r27
    2ca2:	22 97       	sbiw	r28, 0x02	; 2
    2ca4:	89 91       	ld	r24, Y+
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 e0       	ldi	r26, 0x00	; 0
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	28 2b       	or	r18, r24
    2cae:	39 2b       	or	r19, r25
    2cb0:	4a 2b       	or	r20, r26
    2cb2:	5b 2b       	or	r21, r27
    2cb4:	98 81       	ld	r25, Y
    2cb6:	cb 51       	subi	r28, 0x1B	; 27
    2cb8:	d2 40       	sbci	r29, 0x02	; 2
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	a0 e0       	ldi	r26, 0x00	; 0
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	28 2b       	or	r18, r24
    2cc2:	39 2b       	or	r19, r25
    2cc4:	4a 2b       	or	r20, r26
    2cc6:	5b 2b       	or	r21, r27
    2cc8:	2a 87       	std	Y+10, r18	; 0x0a
    2cca:	3b 87       	std	Y+11, r19	; 0x0b
    2ccc:	4c 87       	std	Y+12, r20	; 0x0c
    2cce:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2cd0:	c7 5e       	subi	r28, 0xE7	; 231
    2cd2:	dd 4f       	sbci	r29, 0xFD	; 253
    2cd4:	28 81       	ld	r18, Y
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	52 2f       	mov	r21, r18
    2cde:	44 27       	eor	r20, r20
    2ce0:	33 27       	eor	r19, r19
    2ce2:	22 27       	eor	r18, r18
    2ce4:	8a 91       	ld	r24, -Y
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a0 e0       	ldi	r26, 0x00	; 0
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	dc 01       	movw	r26, r24
    2cee:	99 27       	eor	r25, r25
    2cf0:	88 27       	eor	r24, r24
    2cf2:	28 2b       	or	r18, r24
    2cf4:	39 2b       	or	r19, r25
    2cf6:	4a 2b       	or	r20, r26
    2cf8:	5b 2b       	or	r21, r27
    2cfa:	22 97       	sbiw	r28, 0x02	; 2
    2cfc:	89 91       	ld	r24, Y+
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	28 2b       	or	r18, r24
    2d06:	39 2b       	or	r19, r25
    2d08:	4a 2b       	or	r20, r26
    2d0a:	5b 2b       	or	r21, r27
    2d0c:	98 81       	ld	r25, Y
    2d0e:	c7 51       	subi	r28, 0x17	; 23
    2d10:	d2 40       	sbci	r29, 0x02	; 2
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	28 2b       	or	r18, r24
    2d1a:	39 2b       	or	r19, r25
    2d1c:	4a 2b       	or	r20, r26
    2d1e:	5b 2b       	or	r21, r27
    2d20:	2e 87       	std	Y+14, r18	; 0x0e
    2d22:	3f 87       	std	Y+15, r19	; 0x0f
    2d24:	48 8b       	std	Y+16, r20	; 0x10
    2d26:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2d28:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2d2a:	1a a6       	std	Y+42, r1	; 0x2a
    2d2c:	1b a6       	std	Y+43, r1	; 0x2b
    2d2e:	1c a6       	std	Y+44, r1	; 0x2c
    2d30:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2d32:	80 91 d1 27 	lds	r24, 0x27D1
    2d36:	90 91 d2 27 	lds	r25, 0x27D2
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	80 93 d1 27 	sts	0x27D1, r24
    2d40:	90 93 d2 27 	sts	0x27D2, r25
    2d44:	8e 83       	std	Y+6, r24	; 0x06
    2d46:	9f 83       	std	Y+7, r25	; 0x07
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <chk_mounted+0x56c>

	return FR_OK;
    2d4a:	8a e0       	ldi	r24, 0x0A	; 10
    2d4c:	03 c0       	rjmp	.+6      	; 0x2d54 <chk_mounted+0x572>
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	01 c0       	rjmp	.+2      	; 0x2d54 <chk_mounted+0x572>
    2d52:	8d e0       	ldi	r24, 0x0D	; 13
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	ff 90       	pop	r15
    2d5e:	ef 90       	pop	r14
    2d60:	df 90       	pop	r13
    2d62:	cf 90       	pop	r12
    2d64:	bf 90       	pop	r11
    2d66:	af 90       	pop	r10
    2d68:	9f 90       	pop	r9
    2d6a:	8f 90       	pop	r8
    2d6c:	7f 90       	pop	r7
    2d6e:	6f 90       	pop	r6
    2d70:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2d72:	c3 5a       	subi	r28, 0xA3	; 163
    2d74:	df 4f       	sbci	r29, 0xFF	; 255
    2d76:	28 81       	ld	r18, Y
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	52 2f       	mov	r21, r18
    2d80:	44 27       	eor	r20, r20
    2d82:	33 27       	eor	r19, r19
    2d84:	22 27       	eor	r18, r18
    2d86:	8a 91       	ld	r24, -Y
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	a0 e0       	ldi	r26, 0x00	; 0
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	dc 01       	movw	r26, r24
    2d90:	99 27       	eor	r25, r25
    2d92:	88 27       	eor	r24, r24
    2d94:	28 2b       	or	r18, r24
    2d96:	39 2b       	or	r19, r25
    2d98:	4a 2b       	or	r20, r26
    2d9a:	5b 2b       	or	r21, r27
    2d9c:	22 97       	sbiw	r28, 0x02	; 2
    2d9e:	89 91       	ld	r24, Y+
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 e0       	ldi	r26, 0x00	; 0
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	28 2b       	or	r18, r24
    2da8:	39 2b       	or	r19, r25
    2daa:	4a 2b       	or	r20, r26
    2dac:	5b 2b       	or	r21, r27
    2dae:	98 81       	ld	r25, Y
    2db0:	cb 55       	subi	r28, 0x5B	; 91
    2db2:	d0 40       	sbci	r29, 0x00	; 0
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	a0 e0       	ldi	r26, 0x00	; 0
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	28 2b       	or	r18, r24
    2dbc:	39 2b       	or	r19, r25
    2dbe:	4a 2b       	or	r20, r26
    2dc0:	5b 2b       	or	r21, r27
    2dc2:	2a a3       	std	Y+34, r18	; 0x22
    2dc4:	3b a3       	std	Y+35, r19	; 0x23
    2dc6:	4c a3       	std	Y+36, r20	; 0x24
    2dc8:	5d a3       	std	Y+37, r21	; 0x25
    2dca:	13 e0       	ldi	r17, 0x03	; 3
    2dcc:	ac ce       	rjmp	.-680    	; 0x2b26 <chk_mounted+0x344>

00002dce <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2dce:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	a9 f0       	breq	.+42     	; 0x2dfe <validate+0x30>
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 23       	and	r24, r24
    2dd8:	91 f0       	breq	.+36     	; 0x2dfe <validate+0x30>
    2dda:	86 81       	ldd	r24, Z+6	; 0x06
    2ddc:	97 81       	ldd	r25, Z+7	; 0x07
    2dde:	86 17       	cp	r24, r22
    2de0:	97 07       	cpc	r25, r23
    2de2:	69 f4       	brne	.+26     	; 0x2dfe <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2de4:	81 81       	ldd	r24, Z+1	; 0x01
    2de6:	88 23       	and	r24, r24
    2de8:	11 f0       	breq	.+4      	; 0x2dee <validate+0x20>
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <validate+0x24>
	return Stat;
    2dee:	80 91 52 27 	lds	r24, 0x2752
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2df2:	80 fd       	sbrc	r24, 0
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <validate+0x2c>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	08 95       	ret
    2dfa:	83 e0       	ldi	r24, 0x03	; 3
    2dfc:	08 95       	ret
    2dfe:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2e00:	08 95       	ret

00002e02 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	10 f0       	brcs	.+4      	; 0x2e10 <f_mount+0xe>
    2e0c:	8b e0       	ldi	r24, 0x0B	; 11
    2e0e:	17 c0       	rjmp	.+46     	; 0x2e3e <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2e10:	a8 2f       	mov	r26, r24
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	fd 01       	movw	r30, r26
    2e16:	ee 0f       	add	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	e3 53       	subi	r30, 0x33	; 51
    2e1c:	f8 4d       	sbci	r31, 0xD8	; 216
    2e1e:	01 90       	ld	r0, Z+
    2e20:	f0 81       	ld	r31, Z
    2e22:	e0 2d       	mov	r30, r0

	if (rfs) {
    2e24:	30 97       	sbiw	r30, 0x00	; 0
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2e28:	10 82       	st	Z, r1
	}

	if (fs) {
    2e2a:	20 97       	sbiw	r28, 0x00	; 0
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2e2e:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2e30:	aa 0f       	add	r26, r26
    2e32:	bb 1f       	adc	r27, r27
    2e34:	a3 53       	subi	r26, 0x33	; 51
    2e36:	b8 4d       	sbci	r27, 0xD8	; 216
    2e38:	cd 93       	st	X+, r28
    2e3a:	dc 93       	st	X, r29
    2e3c:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	08 95       	ret

00002e44 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2e44:	5f 92       	push	r5
    2e46:	6f 92       	push	r6
    2e48:	7f 92       	push	r7
    2e4a:	8f 92       	push	r8
    2e4c:	9f 92       	push	r9
    2e4e:	af 92       	push	r10
    2e50:	bf 92       	push	r11
    2e52:	cf 92       	push	r12
    2e54:	df 92       	push	r13
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	a4 97       	sbiw	r28, 0x24	; 36
    2e68:	cd bf       	out	0x3d, r28	; 61
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	3c 01       	movw	r6, r24
    2e6e:	6b a3       	std	Y+35, r22	; 0x23
    2e70:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2e72:	dc 01       	movw	r26, r24
    2e74:	1d 92       	st	X+, r1
    2e76:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2e78:	5f e1       	ldi	r21, 0x1F	; 31
    2e7a:	55 2e       	mov	r5, r21
    2e7c:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2e7e:	8e 01       	movw	r16, r28
    2e80:	03 5f       	subi	r16, 0xF3	; 243
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	4e 71       	andi	r20, 0x1E	; 30
    2e86:	ce 01       	movw	r24, r28
    2e88:	83 96       	adiw	r24, 0x23	; 35
    2e8a:	b8 01       	movw	r22, r16
    2e8c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e90:	88 23       	and	r24, r24
    2e92:	11 f0       	breq	.+4      	; 0x2e98 <f_open+0x54>
    2e94:	28 2f       	mov	r18, r24
    2e96:	37 c1       	rjmp	.+622    	; 0x3106 <f_open+0x2c2>
	INITBUF(dj, sfn, lfn);
    2e98:	ce 01       	movw	r24, r28
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	89 a3       	std	Y+33, r24	; 0x21
    2e9e:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea4:	c8 01       	movw	r24, r16
    2ea6:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
    2eaa:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2eac:	45 2d       	mov	r20, r5
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	ca 01       	movw	r24, r20
    2eb2:	8c 71       	andi	r24, 0x1C	; 28
    2eb4:	90 70       	andi	r25, 0x00	; 0
    2eb6:	89 2b       	or	r24, r25
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <f_open+0x78>
    2eba:	88 c0       	rjmp	.+272    	; 0x2fcc <f_open+0x188>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2ebc:	22 23       	and	r18, r18
    2ebe:	79 f0       	breq	.+30     	; 0x2ede <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2ec0:	24 30       	cpi	r18, 0x04	; 4
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <f_open+0x82>
    2ec4:	20 c1       	rjmp	.+576    	; 0x3106 <f_open+0x2c2>
				res = dir_register(&dj);
    2ec6:	c8 01       	movw	r24, r16
    2ec8:	0e 94 14 11 	call	0x2228	; 0x2228 <dir_register>
    2ecc:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2ece:	88 23       	and	r24, r24
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <f_open+0x90>
    2ed2:	19 c1       	rjmp	.+562    	; 0x3106 <f_open+0x2c2>
			mode |= FA_CREATE_ALWAYS;
    2ed4:	b8 e0       	ldi	r27, 0x08	; 8
    2ed6:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2ed8:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2eda:	d8 a0       	ldd	r13, Y+32	; 0x20
    2edc:	5b c0       	rjmp	.+182    	; 0x2f94 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2ede:	52 fe       	sbrs	r5, 2
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <f_open+0xa2>
    2ee2:	28 e0       	ldi	r18, 0x08	; 8
    2ee4:	10 c1       	rjmp	.+544    	; 0x3106 <f_open+0x2c2>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2ee6:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2ee8:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2eea:	c1 14       	cp	r12, r1
    2eec:	d1 04       	cpc	r13, r1
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <f_open+0xae>
    2ef0:	07 c1       	rjmp	.+526    	; 0x3100 <f_open+0x2bc>
    2ef2:	f6 01       	movw	r30, r12
    2ef4:	83 85       	ldd	r24, Z+11	; 0x0b
    2ef6:	81 71       	andi	r24, 0x11	; 17
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <f_open+0xb8>
    2efa:	02 c1       	rjmp	.+516    	; 0x3100 <f_open+0x2bc>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2efc:	53 fe       	sbrs	r5, 3
    2efe:	4a c0       	rjmp	.+148    	; 0x2f94 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2f00:	95 89       	ldd	r25, Z+21	; 0x15
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	24 89       	ldd	r18, Z+20	; 0x14
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	82 2b       	or	r24, r18
    2f0a:	93 2b       	or	r25, r19
    2f0c:	a0 e0       	ldi	r26, 0x00	; 0
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	8c 01       	movw	r16, r24
    2f12:	ff 24       	eor	r15, r15
    2f14:	ee 24       	eor	r14, r14
    2f16:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	82 2b       	or	r24, r18
    2f20:	93 2b       	or	r25, r19
    2f22:	a0 e0       	ldi	r26, 0x00	; 0
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e8 2a       	or	r14, r24
    2f28:	f9 2a       	or	r15, r25
    2f2a:	0a 2b       	or	r16, r26
    2f2c:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2f2e:	14 8a       	std	Z+20, r1	; 0x14
    2f30:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2f32:	12 8e       	std	Z+26, r1	; 0x1a
    2f34:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2f36:	14 8e       	std	Z+28, r1	; 0x1c
    2f38:	15 8e       	std	Z+29, r1	; 0x1d
    2f3a:	16 8e       	std	Z+30, r1	; 0x1e
    2f3c:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2f3e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f40:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2f46:	82 a4       	ldd	r8, Z+42	; 0x2a
    2f48:	93 a4       	ldd	r9, Z+43	; 0x2b
    2f4a:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2f4c:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2f4e:	e1 14       	cp	r14, r1
    2f50:	f1 04       	cpc	r15, r1
    2f52:	01 05       	cpc	r16, r1
    2f54:	11 05       	cpc	r17, r1
    2f56:	a1 f0       	breq	.+40     	; 0x2f80 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2f58:	cf 01       	movw	r24, r30
    2f5a:	b8 01       	movw	r22, r16
    2f5c:	a7 01       	movw	r20, r14
    2f5e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <remove_chain>
    2f62:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2f64:	88 23       	and	r24, r24
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <f_open+0x126>
    2f68:	ce c0       	rjmp	.+412    	; 0x3106 <f_open+0x2c2>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2f6a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f6c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f6e:	08 94       	sec
    2f70:	e1 08       	sbc	r14, r1
    2f72:	f1 08       	sbc	r15, r1
    2f74:	01 09       	sbc	r16, r1
    2f76:	11 09       	sbc	r17, r1
    2f78:	e2 86       	std	Z+10, r14	; 0x0a
    2f7a:	f3 86       	std	Z+11, r15	; 0x0b
    2f7c:	04 87       	std	Z+12, r16	; 0x0c
    2f7e:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f84:	b5 01       	movw	r22, r10
    2f86:	a4 01       	movw	r20, r8
    2f88:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    2f8c:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2f8e:	88 23       	and	r24, r24
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <f_open+0x150>
    2f92:	b9 c0       	rjmp	.+370    	; 0x3106 <f_open+0x2c2>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2f94:	53 fe       	sbrs	r5, 3
    2f96:	2c c0       	rjmp	.+88     	; 0x2ff0 <f_open+0x1ac>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2f98:	d6 01       	movw	r26, r12
    2f9a:	1b 96       	adiw	r26, 0x0b	; 11
    2f9c:	1c 92       	st	X, r1
			ps = get_fattime();
    2f9e:	0e 94 66 09 	call	0x12cc	; 0x12cc <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2fa2:	f6 01       	movw	r30, r12
    2fa4:	66 87       	std	Z+14, r22	; 0x0e
    2fa6:	27 2f       	mov	r18, r23
    2fa8:	33 27       	eor	r19, r19
    2faa:	27 87       	std	Z+15, r18	; 0x0f
    2fac:	9c 01       	movw	r18, r24
    2fae:	44 27       	eor	r20, r20
    2fb0:	55 27       	eor	r21, r21
    2fb2:	20 8b       	std	Z+16, r18	; 0x10
    2fb4:	69 2f       	mov	r22, r25
    2fb6:	77 27       	eor	r23, r23
    2fb8:	88 27       	eor	r24, r24
    2fba:	99 27       	eor	r25, r25
    2fbc:	61 8b       	std	Z+17, r22	; 0x11
			dj.fs->wflag = 1;
    2fbe:	ed 85       	ldd	r30, Y+13	; 0x0d
    2fc0:	fe 85       	ldd	r31, Y+14	; 0x0e
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2fc6:	f0 e2       	ldi	r31, 0x20	; 32
    2fc8:	5f 2a       	or	r5, r31
    2fca:	12 c0       	rjmp	.+36     	; 0x2ff0 <f_open+0x1ac>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2fcc:	22 23       	and	r18, r18
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <f_open+0x18e>
    2fd0:	9a c0       	rjmp	.+308    	; 0x3106 <f_open+0x2c2>
		dir = dj.dir;
    2fd2:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2fd4:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2fd6:	c1 14       	cp	r12, r1
    2fd8:	d1 04       	cpc	r13, r1
    2fda:	09 f4       	brne	.+2      	; 0x2fde <f_open+0x19a>
    2fdc:	93 c0       	rjmp	.+294    	; 0x3104 <f_open+0x2c0>
    2fde:	d6 01       	movw	r26, r12
    2fe0:	1b 96       	adiw	r26, 0x0b	; 11
    2fe2:	8c 91       	ld	r24, X
    2fe4:	84 fd       	sbrc	r24, 4
    2fe6:	8e c0       	rjmp	.+284    	; 0x3104 <f_open+0x2c0>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2fe8:	51 fe       	sbrs	r5, 1
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <f_open+0x1ac>
    2fec:	80 fd       	sbrc	r24, 0
    2fee:	88 c0       	rjmp	.+272    	; 0x3100 <f_open+0x2bc>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2ff0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ff2:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ff4:	22 a5       	ldd	r18, Z+42	; 0x2a
    2ff6:	33 a5       	ldd	r19, Z+43	; 0x2b
    2ff8:	44 a5       	ldd	r20, Z+44	; 0x2c
    2ffa:	55 a5       	ldd	r21, Z+45	; 0x2d
    2ffc:	d3 01       	movw	r26, r6
    2ffe:	5a 96       	adiw	r26, 0x1a	; 26
    3000:	2d 93       	st	X+, r18
    3002:	3d 93       	st	X+, r19
    3004:	4d 93       	st	X+, r20
    3006:	5c 93       	st	X, r21
    3008:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    300a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    300c:	98 a1       	ldd	r25, Y+32	; 0x20
    300e:	5e 96       	adiw	r26, 0x1e	; 30
    3010:	8d 93       	st	X+, r24
    3012:	9c 93       	st	X, r25
    3014:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    3016:	14 96       	adiw	r26, 0x04	; 4
    3018:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    301a:	d6 01       	movw	r26, r12
    301c:	55 96       	adiw	r26, 0x15	; 21
    301e:	3c 91       	ld	r19, X
    3020:	55 97       	sbiw	r26, 0x15	; 21
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	54 96       	adiw	r26, 0x14	; 20
    3026:	8c 91       	ld	r24, X
    3028:	54 97       	sbiw	r26, 0x14	; 20
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	28 2b       	or	r18, r24
    302e:	39 2b       	or	r19, r25
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	a9 01       	movw	r20, r18
    3036:	33 27       	eor	r19, r19
    3038:	22 27       	eor	r18, r18
    303a:	5b 96       	adiw	r26, 0x1b	; 27
    303c:	9c 91       	ld	r25, X
    303e:	5b 97       	sbiw	r26, 0x1b	; 27
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	5a 96       	adiw	r26, 0x1a	; 26
    3044:	6c 91       	ld	r22, X
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	86 2b       	or	r24, r22
    304a:	97 2b       	or	r25, r23
    304c:	a0 e0       	ldi	r26, 0x00	; 0
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	28 2b       	or	r18, r24
    3052:	39 2b       	or	r19, r25
    3054:	4a 2b       	or	r20, r26
    3056:	5b 2b       	or	r21, r27
    3058:	d3 01       	movw	r26, r6
    305a:	1e 96       	adiw	r26, 0x0e	; 14
    305c:	2d 93       	st	X+, r18
    305e:	3d 93       	st	X+, r19
    3060:	4d 93       	st	X+, r20
    3062:	5c 93       	st	X, r21
    3064:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    3066:	d6 01       	movw	r26, r12
    3068:	5f 96       	adiw	r26, 0x1f	; 31
    306a:	2c 91       	ld	r18, X
    306c:	5f 97       	sbiw	r26, 0x1f	; 31
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	52 2f       	mov	r21, r18
    3076:	44 27       	eor	r20, r20
    3078:	33 27       	eor	r19, r19
    307a:	22 27       	eor	r18, r18
    307c:	5e 96       	adiw	r26, 0x1e	; 30
    307e:	8c 91       	ld	r24, X
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a0 e0       	ldi	r26, 0x00	; 0
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	dc 01       	movw	r26, r24
    3088:	99 27       	eor	r25, r25
    308a:	88 27       	eor	r24, r24
    308c:	28 2b       	or	r18, r24
    308e:	39 2b       	or	r19, r25
    3090:	4a 2b       	or	r20, r26
    3092:	5b 2b       	or	r21, r27
    3094:	d6 01       	movw	r26, r12
    3096:	5c 96       	adiw	r26, 0x1c	; 28
    3098:	8c 91       	ld	r24, X
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	28 2b       	or	r18, r24
    30a2:	39 2b       	or	r19, r25
    30a4:	4a 2b       	or	r20, r26
    30a6:	5b 2b       	or	r21, r27
    30a8:	d6 01       	movw	r26, r12
    30aa:	5d 96       	adiw	r26, 0x1d	; 29
    30ac:	9c 91       	ld	r25, X
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	a0 e0       	ldi	r26, 0x00	; 0
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	28 2b       	or	r18, r24
    30b6:	39 2b       	or	r19, r25
    30b8:	4a 2b       	or	r20, r26
    30ba:	5b 2b       	or	r21, r27
    30bc:	d3 01       	movw	r26, r6
    30be:	1a 96       	adiw	r26, 0x0a	; 10
    30c0:	2d 93       	st	X+, r18
    30c2:	3d 93       	st	X+, r19
    30c4:	4d 93       	st	X+, r20
    30c6:	5c 93       	st	X, r21
    30c8:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    30ca:	16 96       	adiw	r26, 0x06	; 6
    30cc:	1d 92       	st	X+, r1
    30ce:	1d 92       	st	X+, r1
    30d0:	1d 92       	st	X+, r1
    30d2:	1c 92       	st	X, r1
    30d4:	19 97       	sbiw	r26, 0x09	; 9
    30d6:	8f ef       	ldi	r24, 0xFF	; 255
    30d8:	15 96       	adiw	r26, 0x05	; 5
    30da:	8c 93       	st	X, r24
    30dc:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    30de:	56 96       	adiw	r26, 0x16	; 22
    30e0:	1d 92       	st	X+, r1
    30e2:	1d 92       	st	X+, r1
    30e4:	1d 92       	st	X+, r1
    30e6:	1c 92       	st	X, r1
    30e8:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    30ea:	ed 93       	st	X+, r30
    30ec:	fc 93       	st	X, r31
    30ee:	11 97       	sbiw	r26, 0x01	; 1
    30f0:	86 81       	ldd	r24, Z+6	; 0x06
    30f2:	97 81       	ldd	r25, Z+7	; 0x07
    30f4:	12 96       	adiw	r26, 0x02	; 2
    30f6:	8d 93       	st	X+, r24
    30f8:	9c 93       	st	X, r25
    30fa:	13 97       	sbiw	r26, 0x03	; 3
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	03 c0       	rjmp	.+6      	; 0x3106 <f_open+0x2c2>

	LEAVE_FF(dj.fs, FR_OK);
    3100:	27 e0       	ldi	r18, 0x07	; 7
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <f_open+0x2c2>
    3104:	24 e0       	ldi	r18, 0x04	; 4
}
    3106:	82 2f       	mov	r24, r18
    3108:	a4 96       	adiw	r28, 0x24	; 36
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	df 90       	pop	r13
    311c:	cf 90       	pop	r12
    311e:	bf 90       	pop	r11
    3120:	af 90       	pop	r10
    3122:	9f 90       	pop	r9
    3124:	8f 90       	pop	r8
    3126:	7f 90       	pop	r7
    3128:	6f 90       	pop	r6
    312a:	5f 90       	pop	r5
    312c:	08 95       	ret

0000312e <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    312e:	2f 92       	push	r2
    3130:	3f 92       	push	r3
    3132:	4f 92       	push	r4
    3134:	5f 92       	push	r5
    3136:	6f 92       	push	r6
    3138:	7f 92       	push	r7
    313a:	8f 92       	push	r8
    313c:	9f 92       	push	r9
    313e:	af 92       	push	r10
    3140:	bf 92       	push	r11
    3142:	cf 92       	push	r12
    3144:	df 92       	push	r13
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <f_read+0x26>
    3154:	0f 92       	push	r0
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	8b 83       	std	Y+3, r24	; 0x03
    315c:	9c 83       	std	Y+4, r25	; 0x04
    315e:	16 2f       	mov	r17, r22
    3160:	07 2f       	mov	r16, r23
    3162:	4a 01       	movw	r8, r20
    3164:	29 83       	std	Y+1, r18	; 0x01
    3166:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    3168:	d9 01       	movw	r26, r18
    316a:	1d 92       	st	X+, r1
    316c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    316e:	fc 01       	movw	r30, r24
    3170:	62 81       	ldd	r22, Z+2	; 0x02
    3172:	73 81       	ldd	r23, Z+3	; 0x03
    3174:	80 81       	ld	r24, Z
    3176:	91 81       	ldd	r25, Z+1	; 0x01
    3178:	0e 94 e7 16 	call	0x2dce	; 0x2dce <validate>
    317c:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    317e:	88 23       	and	r24, r24
    3180:	09 f0       	breq	.+2      	; 0x3184 <f_read+0x56>
    3182:	b4 c1       	rjmp	.+872    	; 0x34ec <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3184:	ab 81       	ldd	r26, Y+3	; 0x03
    3186:	bc 81       	ldd	r27, Y+4	; 0x04
    3188:	14 96       	adiw	r26, 0x04	; 4
    318a:	8c 91       	ld	r24, X
    318c:	87 fd       	sbrc	r24, 7
    318e:	66 c0       	rjmp	.+204    	; 0x325c <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    3190:	80 fd       	sbrc	r24, 0
    3192:	03 c0       	rjmp	.+6      	; 0x319a <f_read+0x6c>
    3194:	07 e0       	ldi	r16, 0x07	; 7
    3196:	70 2e       	mov	r7, r16
    3198:	a9 c1       	rjmp	.+850    	; 0x34ec <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    319a:	eb 81       	ldd	r30, Y+3	; 0x03
    319c:	fc 81       	ldd	r31, Y+4	; 0x04
    319e:	22 85       	ldd	r18, Z+10	; 0x0a
    31a0:	33 85       	ldd	r19, Z+11	; 0x0b
    31a2:	44 85       	ldd	r20, Z+12	; 0x0c
    31a4:	55 85       	ldd	r21, Z+13	; 0x0d
    31a6:	86 81       	ldd	r24, Z+6	; 0x06
    31a8:	97 81       	ldd	r25, Z+7	; 0x07
    31aa:	a0 85       	ldd	r26, Z+8	; 0x08
    31ac:	b1 85       	ldd	r27, Z+9	; 0x09
    31ae:	28 1b       	sub	r18, r24
    31b0:	39 0b       	sbc	r19, r25
    31b2:	4a 0b       	sbc	r20, r26
    31b4:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    31b6:	c4 01       	movw	r24, r8
    31b8:	a0 e0       	ldi	r26, 0x00	; 0
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	28 17       	cp	r18, r24
    31be:	39 07       	cpc	r19, r25
    31c0:	4a 07       	cpc	r20, r26
    31c2:	5b 07       	cpc	r21, r27
    31c4:	08 f4       	brcc	.+2      	; 0x31c8 <f_read+0x9a>
    31c6:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    31c8:	81 2f       	mov	r24, r17
    31ca:	90 2f       	mov	r25, r16
    31cc:	9c 01       	movw	r18, r24
    31ce:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    31d0:	10 e2       	ldi	r17, 0x20	; 32
    31d2:	21 2e       	mov	r2, r17
    31d4:	31 2c       	mov	r3, r1
    31d6:	6b 81       	ldd	r22, Y+3	; 0x03
    31d8:	7c 81       	ldd	r23, Y+4	; 0x04
    31da:	26 0e       	add	r2, r22
    31dc:	37 1e       	adc	r3, r23
    31de:	82 c1       	rjmp	.+772    	; 0x34e4 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    31e0:	ab 81       	ldd	r26, Y+3	; 0x03
    31e2:	bc 81       	ldd	r27, Y+4	; 0x04
    31e4:	16 96       	adiw	r26, 0x06	; 6
    31e6:	2d 91       	ld	r18, X+
    31e8:	3d 91       	ld	r19, X+
    31ea:	4d 91       	ld	r20, X+
    31ec:	5c 91       	ld	r21, X
    31ee:	19 97       	sbiw	r26, 0x09	; 9
    31f0:	da 01       	movw	r26, r20
    31f2:	c9 01       	movw	r24, r18
    31f4:	91 70       	andi	r25, 0x01	; 1
    31f6:	a0 70       	andi	r26, 0x00	; 0
    31f8:	b0 70       	andi	r27, 0x00	; 0
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	a1 05       	cpc	r26, r1
    31fe:	b1 05       	cpc	r27, r1
    3200:	09 f0       	breq	.+2      	; 0x3204 <f_read+0xd6>
    3202:	2c c1       	rjmp	.+600    	; 0x345c <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3204:	ab 81       	ldd	r26, Y+3	; 0x03
    3206:	bc 81       	ldd	r27, Y+4	; 0x04
    3208:	ed 91       	ld	r30, X+
    320a:	fc 91       	ld	r31, X
    320c:	11 97       	sbiw	r26, 0x01	; 1
    320e:	15 96       	adiw	r26, 0x05	; 5
    3210:	9c 91       	ld	r25, X
    3212:	15 97       	sbiw	r26, 0x05	; 5
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	98 17       	cp	r25, r24
    3218:	a0 f1       	brcs	.+104    	; 0x3282 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    321a:	21 15       	cp	r18, r1
    321c:	31 05       	cpc	r19, r1
    321e:	41 05       	cpc	r20, r1
    3220:	51 05       	cpc	r21, r1
    3222:	39 f4       	brne	.+14     	; 0x3232 <f_read+0x104>
    3224:	1e 96       	adiw	r26, 0x0e	; 14
    3226:	6d 91       	ld	r22, X+
    3228:	7d 91       	ld	r23, X+
    322a:	8d 91       	ld	r24, X+
    322c:	9c 91       	ld	r25, X
    322e:	51 97       	sbiw	r26, 0x11	; 17
    3230:	0b c0       	rjmp	.+22     	; 0x3248 <f_read+0x11a>
    3232:	ab 81       	ldd	r26, Y+3	; 0x03
    3234:	bc 81       	ldd	r27, Y+4	; 0x04
    3236:	52 96       	adiw	r26, 0x12	; 18
    3238:	4d 91       	ld	r20, X+
    323a:	5d 91       	ld	r21, X+
    323c:	6d 91       	ld	r22, X+
    323e:	7c 91       	ld	r23, X
    3240:	55 97       	sbiw	r26, 0x15	; 21
    3242:	cf 01       	movw	r24, r30
    3244:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3248:	62 30       	cpi	r22, 0x02	; 2
    324a:	71 05       	cpc	r23, r1
    324c:	81 05       	cpc	r24, r1
    324e:	91 05       	cpc	r25, r1
    3250:	40 f4       	brcc	.+16     	; 0x3262 <f_read+0x134>
    3252:	eb 81       	ldd	r30, Y+3	; 0x03
    3254:	fc 81       	ldd	r31, Y+4	; 0x04
    3256:	84 81       	ldd	r24, Z+4	; 0x04
    3258:	80 68       	ori	r24, 0x80	; 128
    325a:	84 83       	std	Z+4, r24	; 0x04
    325c:	b2 e0       	ldi	r27, 0x02	; 2
    325e:	7b 2e       	mov	r7, r27
    3260:	45 c1       	rjmp	.+650    	; 0x34ec <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3262:	6f 3f       	cpi	r22, 0xFF	; 255
    3264:	ff ef       	ldi	r31, 0xFF	; 255
    3266:	7f 07       	cpc	r23, r31
    3268:	ff ef       	ldi	r31, 0xFF	; 255
    326a:	8f 07       	cpc	r24, r31
    326c:	ff ef       	ldi	r31, 0xFF	; 255
    326e:	9f 07       	cpc	r25, r31
    3270:	09 f4       	brne	.+2      	; 0x3274 <f_read+0x146>
    3272:	e0 c0       	rjmp	.+448    	; 0x3434 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    3274:	eb 81       	ldd	r30, Y+3	; 0x03
    3276:	fc 81       	ldd	r31, Y+4	; 0x04
    3278:	62 8b       	std	Z+18, r22	; 0x12
    327a:	73 8b       	std	Z+19, r23	; 0x13
    327c:	84 8b       	std	Z+20, r24	; 0x14
    327e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    3280:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3282:	ab 81       	ldd	r26, Y+3	; 0x03
    3284:	bc 81       	ldd	r27, Y+4	; 0x04
    3286:	0d 91       	ld	r16, X+
    3288:	1c 91       	ld	r17, X
    328a:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    328c:	52 96       	adiw	r26, 0x12	; 18
    328e:	2d 91       	ld	r18, X+
    3290:	3d 91       	ld	r19, X+
    3292:	4d 91       	ld	r20, X+
    3294:	5c 91       	ld	r21, X
    3296:	55 97       	sbiw	r26, 0x15	; 21
    3298:	22 50       	subi	r18, 0x02	; 2
    329a:	30 40       	sbci	r19, 0x00	; 0
    329c:	40 40       	sbci	r20, 0x00	; 0
    329e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    32a0:	f8 01       	movw	r30, r16
    32a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    32a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    32a6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    32a8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    32aa:	02 97       	sbiw	r24, 0x02	; 2
    32ac:	a1 09       	sbc	r26, r1
    32ae:	b1 09       	sbc	r27, r1
    32b0:	28 17       	cp	r18, r24
    32b2:	39 07       	cpc	r19, r25
    32b4:	4a 07       	cpc	r20, r26
    32b6:	5b 07       	cpc	r21, r27
    32b8:	b8 f4       	brcc	.+46     	; 0x32e8 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    32ba:	62 80       	ldd	r6, Z+2	; 0x02
    32bc:	66 2d       	mov	r22, r6
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    32c8:	9b 01       	movw	r18, r22
    32ca:	ac 01       	movw	r20, r24
    32cc:	f8 01       	movw	r30, r16
    32ce:	86 a1       	ldd	r24, Z+38	; 0x26
    32d0:	97 a1       	ldd	r25, Z+39	; 0x27
    32d2:	a0 a5       	ldd	r26, Z+40	; 0x28
    32d4:	b1 a5       	ldd	r27, Z+41	; 0x29
    32d6:	28 0f       	add	r18, r24
    32d8:	39 1f       	adc	r19, r25
    32da:	4a 1f       	adc	r20, r26
    32dc:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    32de:	21 15       	cp	r18, r1
    32e0:	31 05       	cpc	r19, r1
    32e2:	41 05       	cpc	r20, r1
    32e4:	51 05       	cpc	r21, r1
    32e6:	49 f4       	brne	.+18     	; 0x32fa <f_read+0x1cc>
    32e8:	ab 81       	ldd	r26, Y+3	; 0x03
    32ea:	bc 81       	ldd	r27, Y+4	; 0x04
    32ec:	14 96       	adiw	r26, 0x04	; 4
    32ee:	8c 91       	ld	r24, X
    32f0:	14 97       	sbiw	r26, 0x04	; 4
    32f2:	80 68       	ori	r24, 0x80	; 128
    32f4:	14 96       	adiw	r26, 0x04	; 4
    32f6:	8c 93       	st	X, r24
    32f8:	b1 cf       	rjmp	.-158    	; 0x325c <f_read+0x12e>
			sect += fp->csect;
    32fa:	eb 81       	ldd	r30, Y+3	; 0x03
    32fc:	fc 81       	ldd	r31, Y+4	; 0x04
    32fe:	85 81       	ldd	r24, Z+5	; 0x05
    3300:	59 01       	movw	r10, r18
    3302:	6a 01       	movw	r12, r20
    3304:	a8 0e       	add	r10, r24
    3306:	b1 1c       	adc	r11, r1
    3308:	c1 1c       	adc	r12, r1
    330a:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    330c:	74 01       	movw	r14, r8
    330e:	ef 2c       	mov	r14, r15
    3310:	ff 24       	eor	r15, r15
    3312:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    3314:	e1 14       	cp	r14, r1
    3316:	f1 04       	cpc	r15, r1
    3318:	09 f4       	brne	.+2      	; 0x331c <f_read+0x1ee>
    331a:	53 c0       	rjmp	.+166    	; 0x33c2 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	c7 01       	movw	r24, r14
    3322:	82 0f       	add	r24, r18
    3324:	93 1f       	adc	r25, r19
    3326:	66 2d       	mov	r22, r6
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	68 17       	cp	r22, r24
    332c:	79 07       	cpc	r23, r25
    332e:	18 f4       	brcc	.+6      	; 0x3336 <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3330:	7b 01       	movw	r14, r22
    3332:	e2 1a       	sub	r14, r18
    3334:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    3336:	d8 01       	movw	r26, r16
    3338:	11 96       	adiw	r26, 0x01	; 1
    333a:	8c 91       	ld	r24, X
    333c:	b2 01       	movw	r22, r4
    333e:	a6 01       	movw	r20, r12
    3340:	95 01       	movw	r18, r10
    3342:	0e 2d       	mov	r16, r14
    3344:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    3348:	eb 81       	ldd	r30, Y+3	; 0x03
    334a:	fc 81       	ldd	r31, Y+4	; 0x04
    334c:	94 81       	ldd	r25, Z+4	; 0x04
    334e:	88 23       	and	r24, r24
    3350:	19 f0       	breq	.+6      	; 0x3358 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    3352:	90 68       	ori	r25, 0x80	; 128
    3354:	94 83       	std	Z+4, r25	; 0x04
    3356:	76 c0       	rjmp	.+236    	; 0x3444 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3358:	96 ff       	sbrs	r25, 6
    335a:	29 c0       	rjmp	.+82     	; 0x33ae <f_read+0x280>
    335c:	ab 81       	ldd	r26, Y+3	; 0x03
    335e:	bc 81       	ldd	r27, Y+4	; 0x04
    3360:	56 96       	adiw	r26, 0x16	; 22
    3362:	2d 91       	ld	r18, X+
    3364:	3d 91       	ld	r19, X+
    3366:	4d 91       	ld	r20, X+
    3368:	5c 91       	ld	r21, X
    336a:	59 97       	sbiw	r26, 0x19	; 25
    336c:	2a 19       	sub	r18, r10
    336e:	3b 09       	sbc	r19, r11
    3370:	4c 09       	sbc	r20, r12
    3372:	5d 09       	sbc	r21, r13
    3374:	c7 01       	movw	r24, r14
    3376:	a0 e0       	ldi	r26, 0x00	; 0
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	28 17       	cp	r18, r24
    337c:	39 07       	cpc	r19, r25
    337e:	4a 07       	cpc	r20, r26
    3380:	5b 07       	cpc	r21, r27
    3382:	a8 f4       	brcc	.+42     	; 0x33ae <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3384:	f9 e0       	ldi	r31, 0x09	; 9
    3386:	22 0f       	add	r18, r18
    3388:	33 1f       	adc	r19, r19
    338a:	44 1f       	adc	r20, r20
    338c:	55 1f       	adc	r21, r21
    338e:	fa 95       	dec	r31
    3390:	d1 f7       	brne	.-12     	; 0x3386 <f_read+0x258>
    3392:	c2 01       	movw	r24, r4
    3394:	82 0f       	add	r24, r18
    3396:	93 1f       	adc	r25, r19
    3398:	d1 01       	movw	r26, r2
    339a:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    339c:	9c 01       	movw	r18, r24
    339e:	20 50       	subi	r18, 0x00	; 0
    33a0:	3e 4f       	sbci	r19, 0xFE	; 254
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <f_read+0x27a>
    33a4:	8d 91       	ld	r24, X+
    33a6:	81 93       	st	Z+, r24
    33a8:	e2 17       	cp	r30, r18
    33aa:	f3 07       	cpc	r31, r19
    33ac:	d9 f7       	brne	.-10     	; 0x33a4 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    33ae:	eb 81       	ldd	r30, Y+3	; 0x03
    33b0:	fc 81       	ldd	r31, Y+4	; 0x04
    33b2:	85 81       	ldd	r24, Z+5	; 0x05
    33b4:	8e 0d       	add	r24, r14
    33b6:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    33b8:	b7 01       	movw	r22, r14
    33ba:	76 2f       	mov	r23, r22
    33bc:	66 27       	eor	r22, r22
    33be:	77 0f       	add	r23, r23
    33c0:	74 c0       	rjmp	.+232    	; 0x34aa <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    33c2:	ab 81       	ldd	r26, Y+3	; 0x03
    33c4:	bc 81       	ldd	r27, Y+4	; 0x04
    33c6:	14 96       	adiw	r26, 0x04	; 4
    33c8:	8c 91       	ld	r24, X
    33ca:	14 97       	sbiw	r26, 0x04	; 4
    33cc:	86 ff       	sbrs	r24, 6
    33ce:	1b c0       	rjmp	.+54     	; 0x3406 <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    33d0:	56 96       	adiw	r26, 0x16	; 22
    33d2:	2d 91       	ld	r18, X+
    33d4:	3d 91       	ld	r19, X+
    33d6:	4d 91       	ld	r20, X+
    33d8:	5c 91       	ld	r21, X
    33da:	59 97       	sbiw	r26, 0x19	; 25
    33dc:	f8 01       	movw	r30, r16
    33de:	81 81       	ldd	r24, Z+1	; 0x01
    33e0:	b1 01       	movw	r22, r2
    33e2:	01 e0       	ldi	r16, 0x01	; 1
    33e4:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    33e8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ea:	bc 81       	ldd	r27, Y+4	; 0x04
    33ec:	14 96       	adiw	r26, 0x04	; 4
    33ee:	9c 91       	ld	r25, X
    33f0:	14 97       	sbiw	r26, 0x04	; 4
    33f2:	88 23       	and	r24, r24
    33f4:	21 f0       	breq	.+8      	; 0x33fe <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    33f6:	90 68       	ori	r25, 0x80	; 128
    33f8:	14 96       	adiw	r26, 0x04	; 4
    33fa:	9c 93       	st	X, r25
    33fc:	23 c0       	rjmp	.+70     	; 0x3444 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    33fe:	9f 7b       	andi	r25, 0xBF	; 191
    3400:	eb 81       	ldd	r30, Y+3	; 0x03
    3402:	fc 81       	ldd	r31, Y+4	; 0x04
    3404:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    3406:	eb 81       	ldd	r30, Y+3	; 0x03
    3408:	fc 81       	ldd	r31, Y+4	; 0x04
    340a:	86 89       	ldd	r24, Z+22	; 0x16
    340c:	97 89       	ldd	r25, Z+23	; 0x17
    340e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3410:	b1 8d       	ldd	r27, Z+25	; 0x19
    3412:	8a 15       	cp	r24, r10
    3414:	9b 05       	cpc	r25, r11
    3416:	ac 05       	cpc	r26, r12
    3418:	bd 05       	cpc	r27, r13
    341a:	b9 f0       	breq	.+46     	; 0x344a <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    341c:	01 90       	ld	r0, Z+
    341e:	f0 81       	ld	r31, Z
    3420:	e0 2d       	mov	r30, r0
    3422:	81 81       	ldd	r24, Z+1	; 0x01
    3424:	b1 01       	movw	r22, r2
    3426:	a6 01       	movw	r20, r12
    3428:	95 01       	movw	r18, r10
    342a:	01 e0       	ldi	r16, 0x01	; 1
    342c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    3430:	88 23       	and	r24, r24
    3432:	59 f0       	breq	.+22     	; 0x344a <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    3434:	ab 81       	ldd	r26, Y+3	; 0x03
    3436:	bc 81       	ldd	r27, Y+4	; 0x04
    3438:	14 96       	adiw	r26, 0x04	; 4
    343a:	8c 91       	ld	r24, X
    343c:	14 97       	sbiw	r26, 0x04	; 4
    343e:	80 68       	ori	r24, 0x80	; 128
    3440:	14 96       	adiw	r26, 0x04	; 4
    3442:	8c 93       	st	X, r24
    3444:	77 24       	eor	r7, r7
    3446:	73 94       	inc	r7
    3448:	51 c0       	rjmp	.+162    	; 0x34ec <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    344a:	eb 81       	ldd	r30, Y+3	; 0x03
    344c:	fc 81       	ldd	r31, Y+4	; 0x04
    344e:	a6 8a       	std	Z+22, r10	; 0x16
    3450:	b7 8a       	std	Z+23, r11	; 0x17
    3452:	c0 8e       	std	Z+24, r12	; 0x18
    3454:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    3456:	85 81       	ldd	r24, Z+5	; 0x05
    3458:	8f 5f       	subi	r24, 0xFF	; 255
    345a:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    345c:	ab 81       	ldd	r26, Y+3	; 0x03
    345e:	bc 81       	ldd	r27, Y+4	; 0x04
    3460:	16 96       	adiw	r26, 0x06	; 6
    3462:	2d 91       	ld	r18, X+
    3464:	3d 91       	ld	r19, X+
    3466:	4d 91       	ld	r20, X+
    3468:	5c 91       	ld	r21, X
    346a:	19 97       	sbiw	r26, 0x09	; 9
    346c:	c9 01       	movw	r24, r18
    346e:	91 70       	andi	r25, 0x01	; 1
    3470:	e0 e0       	ldi	r30, 0x00	; 0
    3472:	f2 e0       	ldi	r31, 0x02	; 2
    3474:	e8 1b       	sub	r30, r24
    3476:	f9 0b       	sbc	r31, r25
    3478:	b4 01       	movw	r22, r8
    347a:	e8 15       	cp	r30, r8
    347c:	f9 05       	cpc	r31, r9
    347e:	08 f4       	brcc	.+2      	; 0x3482 <f_read+0x354>
    3480:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    3482:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3484:	f9 01       	movw	r30, r18
    3486:	f1 70       	andi	r31, 0x01	; 1
    3488:	b0 96       	adiw	r30, 0x20	; 32
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	9c 81       	ldd	r25, Y+4	; 0x04
    348e:	e8 0f       	add	r30, r24
    3490:	f9 1f       	adc	r31, r25
    3492:	92 01       	movw	r18, r4
    3494:	04 c0       	rjmp	.+8      	; 0x349e <f_read+0x370>
	while (cnt--) *d++ = *s++;
    3496:	81 91       	ld	r24, Z+
    3498:	d9 01       	movw	r26, r18
    349a:	8d 93       	st	X+, r24
    349c:	9d 01       	movw	r18, r26
    349e:	01 50       	subi	r16, 0x01	; 1
    34a0:	10 40       	sbci	r17, 0x00	; 0
    34a2:	bf ef       	ldi	r27, 0xFF	; 255
    34a4:	0f 3f       	cpi	r16, 0xFF	; 255
    34a6:	1b 07       	cpc	r17, r27
    34a8:	b1 f7       	brne	.-20     	; 0x3496 <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    34aa:	46 0e       	add	r4, r22
    34ac:	57 1e       	adc	r5, r23
    34ae:	cb 01       	movw	r24, r22
    34b0:	a0 e0       	ldi	r26, 0x00	; 0
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	eb 81       	ldd	r30, Y+3	; 0x03
    34b6:	fc 81       	ldd	r31, Y+4	; 0x04
    34b8:	26 81       	ldd	r18, Z+6	; 0x06
    34ba:	37 81       	ldd	r19, Z+7	; 0x07
    34bc:	40 85       	ldd	r20, Z+8	; 0x08
    34be:	51 85       	ldd	r21, Z+9	; 0x09
    34c0:	28 0f       	add	r18, r24
    34c2:	39 1f       	adc	r19, r25
    34c4:	4a 1f       	adc	r20, r26
    34c6:	5b 1f       	adc	r21, r27
    34c8:	26 83       	std	Z+6, r18	; 0x06
    34ca:	37 83       	std	Z+7, r19	; 0x07
    34cc:	40 87       	std	Z+8, r20	; 0x08
    34ce:	51 87       	std	Z+9, r21	; 0x09
    34d0:	e9 81       	ldd	r30, Y+1	; 0x01
    34d2:	fa 81       	ldd	r31, Y+2	; 0x02
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	86 0f       	add	r24, r22
    34da:	97 1f       	adc	r25, r23
    34dc:	80 83       	st	Z, r24
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	86 1a       	sub	r8, r22
    34e2:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    34e4:	81 14       	cp	r8, r1
    34e6:	91 04       	cpc	r9, r1
    34e8:	09 f0       	breq	.+2      	; 0x34ec <f_read+0x3be>
    34ea:	7a ce       	rjmp	.-780    	; 0x31e0 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    34ec:	87 2d       	mov	r24, r7
    34ee:	24 96       	adiw	r28, 0x04	; 4
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	bf 90       	pop	r11
    3506:	af 90       	pop	r10
    3508:	9f 90       	pop	r9
    350a:	8f 90       	pop	r8
    350c:	7f 90       	pop	r7
    350e:	6f 90       	pop	r6
    3510:	5f 90       	pop	r5
    3512:	4f 90       	pop	r4
    3514:	3f 90       	pop	r3
    3516:	2f 90       	pop	r2
    3518:	08 95       	ret

0000351a <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    351a:	2f 92       	push	r2
    351c:	3f 92       	push	r3
    351e:	4f 92       	push	r4
    3520:	5f 92       	push	r5
    3522:	6f 92       	push	r6
    3524:	7f 92       	push	r7
    3526:	8f 92       	push	r8
    3528:	9f 92       	push	r9
    352a:	af 92       	push	r10
    352c:	bf 92       	push	r11
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	00 d0       	rcall	.+0      	; 0x3540 <f_write+0x26>
    3540:	0f 92       	push	r0
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	8b 83       	std	Y+3, r24	; 0x03
    3548:	9c 83       	std	Y+4, r25	; 0x04
    354a:	16 2f       	mov	r17, r22
    354c:	07 2f       	mov	r16, r23
    354e:	4a 01       	movw	r8, r20
    3550:	29 83       	std	Y+1, r18	; 0x01
    3552:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    3554:	d9 01       	movw	r26, r18
    3556:	1d 92       	st	X+, r1
    3558:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    355a:	fc 01       	movw	r30, r24
    355c:	62 81       	ldd	r22, Z+2	; 0x02
    355e:	73 81       	ldd	r23, Z+3	; 0x03
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	0e 94 e7 16 	call	0x2dce	; 0x2dce <validate>
    3568:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    356a:	88 23       	and	r24, r24
    356c:	09 f0       	breq	.+2      	; 0x3570 <f_write+0x56>
    356e:	02 c2       	rjmp	.+1028   	; 0x3974 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3570:	ab 81       	ldd	r26, Y+3	; 0x03
    3572:	bc 81       	ldd	r27, Y+4	; 0x04
    3574:	14 96       	adiw	r26, 0x04	; 4
    3576:	8c 91       	ld	r24, X
    3578:	87 fd       	sbrc	r24, 7
    357a:	7c c0       	rjmp	.+248    	; 0x3674 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    357c:	81 fd       	sbrc	r24, 1
    357e:	03 c0       	rjmp	.+6      	; 0x3586 <f_write+0x6c>
    3580:	57 e0       	ldi	r21, 0x07	; 7
    3582:	65 2e       	mov	r6, r21
    3584:	f7 c1       	rjmp	.+1006   	; 0x3974 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    3586:	eb 81       	ldd	r30, Y+3	; 0x03
    3588:	fc 81       	ldd	r31, Y+4	; 0x04
    358a:	22 85       	ldd	r18, Z+10	; 0x0a
    358c:	33 85       	ldd	r19, Z+11	; 0x0b
    358e:	44 85       	ldd	r20, Z+12	; 0x0c
    3590:	55 85       	ldd	r21, Z+13	; 0x0d
    3592:	c4 01       	movw	r24, r8
    3594:	a0 e0       	ldi	r26, 0x00	; 0
    3596:	b0 e0       	ldi	r27, 0x00	; 0
    3598:	82 0f       	add	r24, r18
    359a:	93 1f       	adc	r25, r19
    359c:	a4 1f       	adc	r26, r20
    359e:	b5 1f       	adc	r27, r21
    35a0:	82 17       	cp	r24, r18
    35a2:	93 07       	cpc	r25, r19
    35a4:	a4 07       	cpc	r26, r20
    35a6:	b5 07       	cpc	r27, r21
    35a8:	10 f4       	brcc	.+4      	; 0x35ae <f_write+0x94>
    35aa:	88 24       	eor	r8, r8
    35ac:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    35ae:	81 2f       	mov	r24, r17
    35b0:	90 2f       	mov	r25, r16
    35b2:	9c 01       	movw	r18, r24
    35b4:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	24 2e       	mov	r2, r20
    35ba:	31 2c       	mov	r3, r1
    35bc:	6b 81       	ldd	r22, Y+3	; 0x03
    35be:	7c 81       	ldd	r23, Y+4	; 0x04
    35c0:	26 0e       	add	r2, r22
    35c2:	37 1e       	adc	r3, r23
    35c4:	b2 c1       	rjmp	.+868    	; 0x392a <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    35c6:	ab 81       	ldd	r26, Y+3	; 0x03
    35c8:	bc 81       	ldd	r27, Y+4	; 0x04
    35ca:	16 96       	adiw	r26, 0x06	; 6
    35cc:	2d 91       	ld	r18, X+
    35ce:	3d 91       	ld	r19, X+
    35d0:	4d 91       	ld	r20, X+
    35d2:	5c 91       	ld	r21, X
    35d4:	19 97       	sbiw	r26, 0x09	; 9
    35d6:	da 01       	movw	r26, r20
    35d8:	c9 01       	movw	r24, r18
    35da:	91 70       	andi	r25, 0x01	; 1
    35dc:	a0 70       	andi	r26, 0x00	; 0
    35de:	b0 70       	andi	r27, 0x00	; 0
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	a1 05       	cpc	r26, r1
    35e4:	b1 05       	cpc	r27, r1
    35e6:	09 f0       	breq	.+2      	; 0x35ea <f_write+0xd0>
    35e8:	58 c1       	rjmp	.+688    	; 0x389a <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    35ea:	ab 81       	ldd	r26, Y+3	; 0x03
    35ec:	bc 81       	ldd	r27, Y+4	; 0x04
    35ee:	ed 91       	ld	r30, X+
    35f0:	fc 91       	ld	r31, X
    35f2:	11 97       	sbiw	r26, 0x01	; 1
    35f4:	15 96       	adiw	r26, 0x05	; 5
    35f6:	9c 91       	ld	r25, X
    35f8:	15 97       	sbiw	r26, 0x05	; 5
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	98 17       	cp	r25, r24
    35fe:	08 f4       	brcc	.+2      	; 0x3602 <f_write+0xe8>
    3600:	54 c0       	rjmp	.+168    	; 0x36aa <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    3602:	21 15       	cp	r18, r1
    3604:	31 05       	cpc	r19, r1
    3606:	41 05       	cpc	r20, r1
    3608:	51 05       	cpc	r21, r1
    360a:	c9 f4       	brne	.+50     	; 0x363e <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    360c:	1e 96       	adiw	r26, 0x0e	; 14
    360e:	6d 91       	ld	r22, X+
    3610:	7d 91       	ld	r23, X+
    3612:	8d 91       	ld	r24, X+
    3614:	9c 91       	ld	r25, X
    3616:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    3618:	61 15       	cp	r22, r1
    361a:	71 05       	cpc	r23, r1
    361c:	81 05       	cpc	r24, r1
    361e:	91 05       	cpc	r25, r1
    3620:	f9 f4       	brne	.+62     	; 0x3660 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3622:	cf 01       	movw	r24, r30
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <create_chain>
    3630:	eb 81       	ldd	r30, Y+3	; 0x03
    3632:	fc 81       	ldd	r31, Y+4	; 0x04
    3634:	66 87       	std	Z+14, r22	; 0x0e
    3636:	77 87       	std	Z+15, r23	; 0x0f
    3638:	80 8b       	std	Z+16, r24	; 0x10
    363a:	91 8b       	std	Z+17, r25	; 0x11
    363c:	0b c0       	rjmp	.+22     	; 0x3654 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    363e:	ab 81       	ldd	r26, Y+3	; 0x03
    3640:	bc 81       	ldd	r27, Y+4	; 0x04
    3642:	52 96       	adiw	r26, 0x12	; 18
    3644:	4d 91       	ld	r20, X+
    3646:	5d 91       	ld	r21, X+
    3648:	6d 91       	ld	r22, X+
    364a:	7c 91       	ld	r23, X
    364c:	55 97       	sbiw	r26, 0x15	; 21
    364e:	cf 01       	movw	r24, r30
    3650:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    3654:	61 15       	cp	r22, r1
    3656:	71 05       	cpc	r23, r1
    3658:	81 05       	cpc	r24, r1
    365a:	91 05       	cpc	r25, r1
    365c:	09 f4       	brne	.+2      	; 0x3660 <f_write+0x146>
    365e:	69 c1       	rjmp	.+722    	; 0x3932 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3660:	61 30       	cpi	r22, 0x01	; 1
    3662:	71 05       	cpc	r23, r1
    3664:	81 05       	cpc	r24, r1
    3666:	91 05       	cpc	r25, r1
    3668:	41 f4       	brne	.+16     	; 0x367a <f_write+0x160>
    366a:	eb 81       	ldd	r30, Y+3	; 0x03
    366c:	fc 81       	ldd	r31, Y+4	; 0x04
    366e:	84 81       	ldd	r24, Z+4	; 0x04
    3670:	80 68       	ori	r24, 0x80	; 128
    3672:	84 83       	std	Z+4, r24	; 0x04
    3674:	32 e0       	ldi	r19, 0x02	; 2
    3676:	63 2e       	mov	r6, r19
    3678:	7d c1       	rjmp	.+762    	; 0x3974 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    367a:	6f 3f       	cpi	r22, 0xFF	; 255
    367c:	ff ef       	ldi	r31, 0xFF	; 255
    367e:	7f 07       	cpc	r23, r31
    3680:	ff ef       	ldi	r31, 0xFF	; 255
    3682:	8f 07       	cpc	r24, r31
    3684:	ff ef       	ldi	r31, 0xFF	; 255
    3686:	9f 07       	cpc	r25, r31
    3688:	49 f4       	brne	.+18     	; 0x369c <f_write+0x182>
    368a:	ab 81       	ldd	r26, Y+3	; 0x03
    368c:	bc 81       	ldd	r27, Y+4	; 0x04
    368e:	14 96       	adiw	r26, 0x04	; 4
    3690:	8c 91       	ld	r24, X
    3692:	14 97       	sbiw	r26, 0x04	; 4
    3694:	80 68       	ori	r24, 0x80	; 128
    3696:	14 96       	adiw	r26, 0x04	; 4
    3698:	8c 93       	st	X, r24
    369a:	ee c0       	rjmp	.+476    	; 0x3878 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    369c:	eb 81       	ldd	r30, Y+3	; 0x03
    369e:	fc 81       	ldd	r31, Y+4	; 0x04
    36a0:	62 8b       	std	Z+18, r22	; 0x12
    36a2:	73 8b       	std	Z+19, r23	; 0x13
    36a4:	84 8b       	std	Z+20, r24	; 0x14
    36a6:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    36a8:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    36aa:	ab 81       	ldd	r26, Y+3	; 0x03
    36ac:	bc 81       	ldd	r27, Y+4	; 0x04
    36ae:	14 96       	adiw	r26, 0x04	; 4
    36b0:	8c 91       	ld	r24, X
    36b2:	14 97       	sbiw	r26, 0x04	; 4
    36b4:	86 ff       	sbrs	r24, 6
    36b6:	1b c0       	rjmp	.+54     	; 0x36ee <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    36b8:	ed 91       	ld	r30, X+
    36ba:	fc 91       	ld	r31, X
    36bc:	11 97       	sbiw	r26, 0x01	; 1
    36be:	56 96       	adiw	r26, 0x16	; 22
    36c0:	2d 91       	ld	r18, X+
    36c2:	3d 91       	ld	r19, X+
    36c4:	4d 91       	ld	r20, X+
    36c6:	5c 91       	ld	r21, X
    36c8:	59 97       	sbiw	r26, 0x19	; 25
    36ca:	81 81       	ldd	r24, Z+1	; 0x01
    36cc:	b1 01       	movw	r22, r2
    36ce:	01 e0       	ldi	r16, 0x01	; 1
    36d0:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    36d4:	eb 81       	ldd	r30, Y+3	; 0x03
    36d6:	fc 81       	ldd	r31, Y+4	; 0x04
    36d8:	94 81       	ldd	r25, Z+4	; 0x04
    36da:	88 23       	and	r24, r24
    36dc:	19 f0       	breq	.+6      	; 0x36e4 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    36de:	90 68       	ori	r25, 0x80	; 128
    36e0:	94 83       	std	Z+4, r25	; 0x04
    36e2:	ca c0       	rjmp	.+404    	; 0x3878 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    36e4:	9f 7b       	andi	r25, 0xBF	; 191
    36e6:	ab 81       	ldd	r26, Y+3	; 0x03
    36e8:	bc 81       	ldd	r27, Y+4	; 0x04
    36ea:	14 96       	adiw	r26, 0x04	; 4
    36ec:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    36ee:	eb 81       	ldd	r30, Y+3	; 0x03
    36f0:	fc 81       	ldd	r31, Y+4	; 0x04
    36f2:	00 81       	ld	r16, Z
    36f4:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    36f6:	22 89       	ldd	r18, Z+18	; 0x12
    36f8:	33 89       	ldd	r19, Z+19	; 0x13
    36fa:	44 89       	ldd	r20, Z+20	; 0x14
    36fc:	55 89       	ldd	r21, Z+21	; 0x15
    36fe:	22 50       	subi	r18, 0x02	; 2
    3700:	30 40       	sbci	r19, 0x00	; 0
    3702:	40 40       	sbci	r20, 0x00	; 0
    3704:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3706:	f8 01       	movw	r30, r16
    3708:	82 8d       	ldd	r24, Z+26	; 0x1a
    370a:	93 8d       	ldd	r25, Z+27	; 0x1b
    370c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    370e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3710:	02 97       	sbiw	r24, 0x02	; 2
    3712:	a1 09       	sbc	r26, r1
    3714:	b1 09       	sbc	r27, r1
    3716:	28 17       	cp	r18, r24
    3718:	39 07       	cpc	r19, r25
    371a:	4a 07       	cpc	r20, r26
    371c:	5b 07       	cpc	r21, r27
    371e:	b8 f4       	brcc	.+46     	; 0x374e <f_write+0x234>
	return clst * fs->csize + fs->database;
    3720:	72 80       	ldd	r7, Z+2	; 0x02
    3722:	67 2d       	mov	r22, r7
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    372e:	9b 01       	movw	r18, r22
    3730:	ac 01       	movw	r20, r24
    3732:	f8 01       	movw	r30, r16
    3734:	86 a1       	ldd	r24, Z+38	; 0x26
    3736:	97 a1       	ldd	r25, Z+39	; 0x27
    3738:	a0 a5       	ldd	r26, Z+40	; 0x28
    373a:	b1 a5       	ldd	r27, Z+41	; 0x29
    373c:	28 0f       	add	r18, r24
    373e:	39 1f       	adc	r19, r25
    3740:	4a 1f       	adc	r20, r26
    3742:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3744:	21 15       	cp	r18, r1
    3746:	31 05       	cpc	r19, r1
    3748:	41 05       	cpc	r20, r1
    374a:	51 05       	cpc	r21, r1
    374c:	49 f4       	brne	.+18     	; 0x3760 <f_write+0x246>
    374e:	ab 81       	ldd	r26, Y+3	; 0x03
    3750:	bc 81       	ldd	r27, Y+4	; 0x04
    3752:	14 96       	adiw	r26, 0x04	; 4
    3754:	8c 91       	ld	r24, X
    3756:	14 97       	sbiw	r26, 0x04	; 4
    3758:	80 68       	ori	r24, 0x80	; 128
    375a:	14 96       	adiw	r26, 0x04	; 4
    375c:	8c 93       	st	X, r24
    375e:	8a cf       	rjmp	.-236    	; 0x3674 <f_write+0x15a>
			sect += fp->csect;
    3760:	eb 81       	ldd	r30, Y+3	; 0x03
    3762:	fc 81       	ldd	r31, Y+4	; 0x04
    3764:	85 81       	ldd	r24, Z+5	; 0x05
    3766:	69 01       	movw	r12, r18
    3768:	7a 01       	movw	r14, r20
    376a:	c8 0e       	add	r12, r24
    376c:	d1 1c       	adc	r13, r1
    376e:	e1 1c       	adc	r14, r1
    3770:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3772:	54 01       	movw	r10, r8
    3774:	ab 2c       	mov	r10, r11
    3776:	bb 24       	eor	r11, r11
    3778:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    377a:	a1 14       	cp	r10, r1
    377c:	b1 04       	cpc	r11, r1
    377e:	09 f4       	brne	.+2      	; 0x3782 <f_write+0x268>
    3780:	53 c0       	rjmp	.+166    	; 0x3828 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3782:	28 2f       	mov	r18, r24
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	c5 01       	movw	r24, r10
    3788:	82 0f       	add	r24, r18
    378a:	93 1f       	adc	r25, r19
    378c:	67 2d       	mov	r22, r7
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	68 17       	cp	r22, r24
    3792:	79 07       	cpc	r23, r25
    3794:	18 f4       	brcc	.+6      	; 0x379c <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    3796:	5b 01       	movw	r10, r22
    3798:	a2 1a       	sub	r10, r18
    379a:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    379c:	d8 01       	movw	r26, r16
    379e:	11 96       	adiw	r26, 0x01	; 1
    37a0:	8c 91       	ld	r24, X
    37a2:	b2 01       	movw	r22, r4
    37a4:	a7 01       	movw	r20, r14
    37a6:	96 01       	movw	r18, r12
    37a8:	0a 2d       	mov	r16, r10
    37aa:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    37ae:	88 23       	and	r24, r24
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <f_write+0x29a>
    37b2:	5d c0       	rjmp	.+186    	; 0x386e <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    37b4:	ab 81       	ldd	r26, Y+3	; 0x03
    37b6:	bc 81       	ldd	r27, Y+4	; 0x04
    37b8:	56 96       	adiw	r26, 0x16	; 22
    37ba:	2d 91       	ld	r18, X+
    37bc:	3d 91       	ld	r19, X+
    37be:	4d 91       	ld	r20, X+
    37c0:	5c 91       	ld	r21, X
    37c2:	59 97       	sbiw	r26, 0x19	; 25
    37c4:	2c 19       	sub	r18, r12
    37c6:	3d 09       	sbc	r19, r13
    37c8:	4e 09       	sbc	r20, r14
    37ca:	5f 09       	sbc	r21, r15
    37cc:	c5 01       	movw	r24, r10
    37ce:	a0 e0       	ldi	r26, 0x00	; 0
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	28 17       	cp	r18, r24
    37d4:	39 07       	cpc	r19, r25
    37d6:	4a 07       	cpc	r20, r26
    37d8:	5b 07       	cpc	r21, r27
    37da:	c8 f4       	brcc	.+50     	; 0x380e <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    37dc:	99 e0       	ldi	r25, 0x09	; 9
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	44 1f       	adc	r20, r20
    37e4:	55 1f       	adc	r21, r21
    37e6:	9a 95       	dec	r25
    37e8:	d1 f7       	brne	.-12     	; 0x37de <f_write+0x2c4>
    37ea:	f2 01       	movw	r30, r4
    37ec:	e2 0f       	add	r30, r18
    37ee:	f3 1f       	adc	r31, r19
    37f0:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    37f2:	9f 01       	movw	r18, r30
    37f4:	20 50       	subi	r18, 0x00	; 0
    37f6:	3e 4f       	sbci	r19, 0xFE	; 254
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <f_write+0x2e4>
    37fa:	81 91       	ld	r24, Z+
    37fc:	8d 93       	st	X+, r24
    37fe:	e2 17       	cp	r30, r18
    3800:	f3 07       	cpc	r31, r19
    3802:	d9 f7       	brne	.-10     	; 0x37fa <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    3804:	eb 81       	ldd	r30, Y+3	; 0x03
    3806:	fc 81       	ldd	r31, Y+4	; 0x04
    3808:	84 81       	ldd	r24, Z+4	; 0x04
    380a:	8f 7b       	andi	r24, 0xBF	; 191
    380c:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    380e:	ab 81       	ldd	r26, Y+3	; 0x03
    3810:	bc 81       	ldd	r27, Y+4	; 0x04
    3812:	15 96       	adiw	r26, 0x05	; 5
    3814:	8c 91       	ld	r24, X
    3816:	15 97       	sbiw	r26, 0x05	; 5
    3818:	8a 0d       	add	r24, r10
    381a:	15 96       	adiw	r26, 0x05	; 5
    381c:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    381e:	b5 01       	movw	r22, r10
    3820:	76 2f       	mov	r23, r22
    3822:	66 27       	eor	r22, r22
    3824:	77 0f       	add	r23, r23
    3826:	64 c0       	rjmp	.+200    	; 0x38f0 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3828:	eb 81       	ldd	r30, Y+3	; 0x03
    382a:	fc 81       	ldd	r31, Y+4	; 0x04
    382c:	86 89       	ldd	r24, Z+22	; 0x16
    382e:	97 89       	ldd	r25, Z+23	; 0x17
    3830:	a0 8d       	ldd	r26, Z+24	; 0x18
    3832:	b1 8d       	ldd	r27, Z+25	; 0x19
    3834:	8c 15       	cp	r24, r12
    3836:	9d 05       	cpc	r25, r13
    3838:	ae 05       	cpc	r26, r14
    383a:	bf 05       	cpc	r27, r15
    383c:	01 f1       	breq	.+64     	; 0x387e <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    383e:	26 81       	ldd	r18, Z+6	; 0x06
    3840:	37 81       	ldd	r19, Z+7	; 0x07
    3842:	40 85       	ldd	r20, Z+8	; 0x08
    3844:	51 85       	ldd	r21, Z+9	; 0x09
    3846:	82 85       	ldd	r24, Z+10	; 0x0a
    3848:	93 85       	ldd	r25, Z+11	; 0x0b
    384a:	a4 85       	ldd	r26, Z+12	; 0x0c
    384c:	b5 85       	ldd	r27, Z+13	; 0x0d
    384e:	28 17       	cp	r18, r24
    3850:	39 07       	cpc	r19, r25
    3852:	4a 07       	cpc	r20, r26
    3854:	5b 07       	cpc	r21, r27
    3856:	98 f4       	brcc	.+38     	; 0x387e <f_write+0x364>
    3858:	d8 01       	movw	r26, r16
    385a:	11 96       	adiw	r26, 0x01	; 1
    385c:	8c 91       	ld	r24, X
    385e:	b1 01       	movw	r22, r2
    3860:	a7 01       	movw	r20, r14
    3862:	96 01       	movw	r18, r12
    3864:	01 e0       	ldi	r16, 0x01	; 1
    3866:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    386a:	88 23       	and	r24, r24
    386c:	41 f0       	breq	.+16     	; 0x387e <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    386e:	eb 81       	ldd	r30, Y+3	; 0x03
    3870:	fc 81       	ldd	r31, Y+4	; 0x04
    3872:	84 81       	ldd	r24, Z+4	; 0x04
    3874:	80 68       	ori	r24, 0x80	; 128
    3876:	84 83       	std	Z+4, r24	; 0x04
    3878:	66 24       	eor	r6, r6
    387a:	63 94       	inc	r6
    387c:	7b c0       	rjmp	.+246    	; 0x3974 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    387e:	ab 81       	ldd	r26, Y+3	; 0x03
    3880:	bc 81       	ldd	r27, Y+4	; 0x04
    3882:	56 96       	adiw	r26, 0x16	; 22
    3884:	cd 92       	st	X+, r12
    3886:	dd 92       	st	X+, r13
    3888:	ed 92       	st	X+, r14
    388a:	fc 92       	st	X, r15
    388c:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    388e:	15 96       	adiw	r26, 0x05	; 5
    3890:	8c 91       	ld	r24, X
    3892:	15 97       	sbiw	r26, 0x05	; 5
    3894:	8f 5f       	subi	r24, 0xFF	; 255
    3896:	15 96       	adiw	r26, 0x05	; 5
    3898:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    389a:	eb 81       	ldd	r30, Y+3	; 0x03
    389c:	fc 81       	ldd	r31, Y+4	; 0x04
    389e:	26 81       	ldd	r18, Z+6	; 0x06
    38a0:	37 81       	ldd	r19, Z+7	; 0x07
    38a2:	40 85       	ldd	r20, Z+8	; 0x08
    38a4:	51 85       	ldd	r21, Z+9	; 0x09
    38a6:	c9 01       	movw	r24, r18
    38a8:	91 70       	andi	r25, 0x01	; 1
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	72 e0       	ldi	r23, 0x02	; 2
    38ae:	68 1b       	sub	r22, r24
    38b0:	79 0b       	sbc	r23, r25
    38b2:	cb 01       	movw	r24, r22
    38b4:	b4 01       	movw	r22, r8
    38b6:	88 15       	cp	r24, r8
    38b8:	99 05       	cpc	r25, r9
    38ba:	08 f4       	brcc	.+2      	; 0x38be <f_write+0x3a4>
    38bc:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    38be:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    38c0:	f9 01       	movw	r30, r18
    38c2:	f1 70       	andi	r31, 0x01	; 1
    38c4:	b0 96       	adiw	r30, 0x20	; 32
    38c6:	8b 81       	ldd	r24, Y+3	; 0x03
    38c8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ca:	e8 0f       	add	r30, r24
    38cc:	f9 1f       	adc	r31, r25
    38ce:	92 01       	movw	r18, r4
    38d0:	04 c0       	rjmp	.+8      	; 0x38da <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    38d2:	d9 01       	movw	r26, r18
    38d4:	8d 91       	ld	r24, X+
    38d6:	9d 01       	movw	r18, r26
    38d8:	81 93       	st	Z+, r24
    38da:	01 50       	subi	r16, 0x01	; 1
    38dc:	10 40       	sbci	r17, 0x00	; 0
    38de:	bf ef       	ldi	r27, 0xFF	; 255
    38e0:	0f 3f       	cpi	r16, 0xFF	; 255
    38e2:	1b 07       	cpc	r17, r27
    38e4:	b1 f7       	brne	.-20     	; 0x38d2 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    38e6:	eb 81       	ldd	r30, Y+3	; 0x03
    38e8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ea:	84 81       	ldd	r24, Z+4	; 0x04
    38ec:	80 64       	ori	r24, 0x40	; 64
    38ee:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    38f0:	46 0e       	add	r4, r22
    38f2:	57 1e       	adc	r5, r23
    38f4:	cb 01       	movw	r24, r22
    38f6:	a0 e0       	ldi	r26, 0x00	; 0
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	eb 81       	ldd	r30, Y+3	; 0x03
    38fc:	fc 81       	ldd	r31, Y+4	; 0x04
    38fe:	26 81       	ldd	r18, Z+6	; 0x06
    3900:	37 81       	ldd	r19, Z+7	; 0x07
    3902:	40 85       	ldd	r20, Z+8	; 0x08
    3904:	51 85       	ldd	r21, Z+9	; 0x09
    3906:	28 0f       	add	r18, r24
    3908:	39 1f       	adc	r19, r25
    390a:	4a 1f       	adc	r20, r26
    390c:	5b 1f       	adc	r21, r27
    390e:	26 83       	std	Z+6, r18	; 0x06
    3910:	37 83       	std	Z+7, r19	; 0x07
    3912:	40 87       	std	Z+8, r20	; 0x08
    3914:	51 87       	std	Z+9, r21	; 0x09
    3916:	e9 81       	ldd	r30, Y+1	; 0x01
    3918:	fa 81       	ldd	r31, Y+2	; 0x02
    391a:	80 81       	ld	r24, Z
    391c:	91 81       	ldd	r25, Z+1	; 0x01
    391e:	86 0f       	add	r24, r22
    3920:	97 1f       	adc	r25, r23
    3922:	80 83       	st	Z, r24
    3924:	91 83       	std	Z+1, r25	; 0x01
    3926:	86 1a       	sub	r8, r22
    3928:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    392a:	81 14       	cp	r8, r1
    392c:	91 04       	cpc	r9, r1
    392e:	09 f0       	breq	.+2      	; 0x3932 <f_write+0x418>
    3930:	4a ce       	rjmp	.-876    	; 0x35c6 <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3932:	ab 81       	ldd	r26, Y+3	; 0x03
    3934:	bc 81       	ldd	r27, Y+4	; 0x04
    3936:	16 96       	adiw	r26, 0x06	; 6
    3938:	2d 91       	ld	r18, X+
    393a:	3d 91       	ld	r19, X+
    393c:	4d 91       	ld	r20, X+
    393e:	5c 91       	ld	r21, X
    3940:	19 97       	sbiw	r26, 0x09	; 9
    3942:	1a 96       	adiw	r26, 0x0a	; 10
    3944:	8d 91       	ld	r24, X+
    3946:	9d 91       	ld	r25, X+
    3948:	0d 90       	ld	r0, X+
    394a:	bc 91       	ld	r27, X
    394c:	a0 2d       	mov	r26, r0
    394e:	82 17       	cp	r24, r18
    3950:	93 07       	cpc	r25, r19
    3952:	a4 07       	cpc	r26, r20
    3954:	b5 07       	cpc	r27, r21
    3956:	30 f4       	brcc	.+12     	; 0x3964 <f_write+0x44a>
    3958:	eb 81       	ldd	r30, Y+3	; 0x03
    395a:	fc 81       	ldd	r31, Y+4	; 0x04
    395c:	22 87       	std	Z+10, r18	; 0x0a
    395e:	33 87       	std	Z+11, r19	; 0x0b
    3960:	44 87       	std	Z+12, r20	; 0x0c
    3962:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    3964:	ab 81       	ldd	r26, Y+3	; 0x03
    3966:	bc 81       	ldd	r27, Y+4	; 0x04
    3968:	14 96       	adiw	r26, 0x04	; 4
    396a:	8c 91       	ld	r24, X
    396c:	14 97       	sbiw	r26, 0x04	; 4
    396e:	80 62       	ori	r24, 0x20	; 32
    3970:	14 96       	adiw	r26, 0x04	; 4
    3972:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    3974:	86 2d       	mov	r24, r6
    3976:	24 96       	adiw	r28, 0x04	; 4
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	df 90       	pop	r13
    398a:	cf 90       	pop	r12
    398c:	bf 90       	pop	r11
    398e:	af 90       	pop	r10
    3990:	9f 90       	pop	r9
    3992:	8f 90       	pop	r8
    3994:	7f 90       	pop	r7
    3996:	6f 90       	pop	r6
    3998:	5f 90       	pop	r5
    399a:	4f 90       	pop	r4
    399c:	3f 90       	pop	r3
    399e:	2f 90       	pop	r2
    39a0:	08 95       	ret

000039a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    39ac:	6a 81       	ldd	r22, Y+2	; 0x02
    39ae:	7b 81       	ldd	r23, Y+3	; 0x03
    39b0:	88 81       	ld	r24, Y
    39b2:	99 81       	ldd	r25, Y+1	; 0x01
    39b4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <validate>
    39b8:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    39ba:	88 23       	and	r24, r24
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <f_sync+0x1e>
    39be:	72 c0       	rjmp	.+228    	; 0x3aa4 <f_sync+0x102>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    39c0:	8c 81       	ldd	r24, Y+4	; 0x04
    39c2:	85 ff       	sbrs	r24, 5
    39c4:	6f c0       	rjmp	.+222    	; 0x3aa4 <f_sync+0x102>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    39c6:	86 ff       	sbrs	r24, 6
    39c8:	14 c0       	rjmp	.+40     	; 0x39f2 <f_sync+0x50>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    39ca:	e8 81       	ld	r30, Y
    39cc:	f9 81       	ldd	r31, Y+1	; 0x01
    39ce:	be 01       	movw	r22, r28
    39d0:	60 5e       	subi	r22, 0xE0	; 224
    39d2:	7f 4f       	sbci	r23, 0xFF	; 255
    39d4:	2e 89       	ldd	r18, Y+22	; 0x16
    39d6:	3f 89       	ldd	r19, Y+23	; 0x17
    39d8:	48 8d       	ldd	r20, Y+24	; 0x18
    39da:	59 8d       	ldd	r21, Y+25	; 0x19
    39dc:	81 81       	ldd	r24, Z+1	; 0x01
    39de:	01 e0       	ldi	r16, 0x01	; 1
    39e0:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    39e4:	88 23       	and	r24, r24
    39e6:	11 f0       	breq	.+4      	; 0x39ec <f_sync+0x4a>
    39e8:	91 e0       	ldi	r25, 0x01	; 1
    39ea:	5c c0       	rjmp	.+184    	; 0x3aa4 <f_sync+0x102>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    39ec:	8c 81       	ldd	r24, Y+4	; 0x04
    39ee:	8f 7b       	andi	r24, 0xBF	; 191
    39f0:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    39f2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    39f4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    39f6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    39f8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    39fa:	88 81       	ld	r24, Y
    39fc:	99 81       	ldd	r25, Y+1	; 0x01
    39fe:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    3a02:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3a04:	88 23       	and	r24, r24
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <f_sync+0x68>
    3a08:	4d c0       	rjmp	.+154    	; 0x3aa4 <f_sync+0x102>
				dir = fp->dir_ptr;
    3a0a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3a0c:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3a0e:	f8 01       	movw	r30, r16
    3a10:	83 85       	ldd	r24, Z+11	; 0x0b
    3a12:	80 62       	ori	r24, 0x20	; 32
    3a14:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3a16:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a18:	84 8f       	std	Z+28, r24	; 0x1c
    3a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a1c:	85 8f       	std	Z+29, r24	; 0x1d
    3a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a20:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a22:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a24:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a26:	cd 01       	movw	r24, r26
    3a28:	aa 27       	eor	r26, r26
    3a2a:	bb 27       	eor	r27, r27
    3a2c:	86 8f       	std	Z+30, r24	; 0x1e
    3a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a32:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a34:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a36:	8b 2f       	mov	r24, r27
    3a38:	99 27       	eor	r25, r25
    3a3a:	aa 27       	eor	r26, r26
    3a3c:	bb 27       	eor	r27, r27
    3a3e:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    3a40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a42:	82 8f       	std	Z+26, r24	; 0x1a
    3a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a46:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    3a48:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a4c:	a8 89       	ldd	r26, Y+16	; 0x10
    3a4e:	b9 89       	ldd	r27, Y+17	; 0x11
    3a50:	cd 01       	movw	r24, r26
    3a52:	aa 27       	eor	r26, r26
    3a54:	bb 27       	eor	r27, r27
    3a56:	84 8b       	std	Z+20, r24	; 0x14
    3a58:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a5c:	a8 89       	ldd	r26, Y+16	; 0x10
    3a5e:	b9 89       	ldd	r27, Y+17	; 0x11
    3a60:	cd 01       	movw	r24, r26
    3a62:	aa 27       	eor	r26, r26
    3a64:	bb 27       	eor	r27, r27
    3a66:	89 2f       	mov	r24, r25
    3a68:	99 27       	eor	r25, r25
    3a6a:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
    3a6c:	0e 94 66 09 	call	0x12cc	; 0x12cc <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    3a70:	f8 01       	movw	r30, r16
    3a72:	66 8b       	std	Z+22, r22	; 0x16
    3a74:	27 2f       	mov	r18, r23
    3a76:	33 27       	eor	r19, r19
    3a78:	27 8b       	std	Z+23, r18	; 0x17
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	44 27       	eor	r20, r20
    3a7e:	55 27       	eor	r21, r21
    3a80:	20 8f       	std	Z+24, r18	; 0x18
    3a82:	69 2f       	mov	r22, r25
    3a84:	77 27       	eor	r23, r23
    3a86:	88 27       	eor	r24, r24
    3a88:	99 27       	eor	r25, r25
    3a8a:	61 8f       	std	Z+25, r22	; 0x19
				fp->flag &= ~FA__WRITTEN;
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	8f 7d       	andi	r24, 0xDF	; 223
    3a90:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3a92:	e8 81       	ld	r30, Y
    3a94:	f9 81       	ldd	r31, Y+1	; 0x01
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3a9a:	88 81       	ld	r24, Y
    3a9c:	99 81       	ldd	r25, Y+1	; 0x01
    3a9e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <sync>
    3aa2:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3aa4:	89 2f       	mov	r24, r25
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	08 95       	ret

00003ab0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    3ab6:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    3aba:	88 23       	and	r24, r24
    3abc:	11 f4       	brne	.+4      	; 0x3ac2 <f_close+0x12>
    3abe:	18 82       	st	Y, r1
    3ac0:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	08 95       	ret

00003ac8 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3ac8:	2f 92       	push	r2
    3aca:	3f 92       	push	r3
    3acc:	4f 92       	push	r4
    3ace:	5f 92       	push	r5
    3ad0:	6f 92       	push	r6
    3ad2:	7f 92       	push	r7
    3ad4:	8f 92       	push	r8
    3ad6:	9f 92       	push	r9
    3ad8:	af 92       	push	r10
    3ada:	bf 92       	push	r11
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	28 97       	sbiw	r28, 0x08	; 8
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	8f 83       	std	Y+7, r24	; 0x07
    3af4:	98 87       	std	Y+8, r25	; 0x08
    3af6:	3a 01       	movw	r6, r20
    3af8:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3afa:	dc 01       	movw	r26, r24
    3afc:	12 96       	adiw	r26, 0x02	; 2
    3afe:	6d 91       	ld	r22, X+
    3b00:	7c 91       	ld	r23, X
    3b02:	13 97       	sbiw	r26, 0x03	; 3
    3b04:	8d 91       	ld	r24, X+
    3b06:	9c 91       	ld	r25, X
    3b08:	0e 94 e7 16 	call	0x2dce	; 0x2dce <validate>
    3b0c:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3b0e:	88 23       	and	r24, r24
    3b10:	09 f0       	breq	.+2      	; 0x3b14 <f_lseek+0x4c>
    3b12:	f3 c1       	rjmp	.+998    	; 0x3efa <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3b14:	ef 81       	ldd	r30, Y+7	; 0x07
    3b16:	f8 85       	ldd	r31, Y+8	; 0x08
    3b18:	84 81       	ldd	r24, Z+4	; 0x04
    3b1a:	87 fd       	sbrc	r24, 7
    3b1c:	98 c0       	rjmp	.+304    	; 0x3c4e <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3b1e:	af 81       	ldd	r26, Y+7	; 0x07
    3b20:	b8 85       	ldd	r27, Y+8	; 0x08
    3b22:	1a 96       	adiw	r26, 0x0a	; 10
    3b24:	ad 90       	ld	r10, X+
    3b26:	bd 90       	ld	r11, X+
    3b28:	cd 90       	ld	r12, X+
    3b2a:	dc 90       	ld	r13, X
    3b2c:	1d 97       	sbiw	r26, 0x0d	; 13
    3b2e:	a6 14       	cp	r10, r6
    3b30:	b7 04       	cpc	r11, r7
    3b32:	c8 04       	cpc	r12, r8
    3b34:	d9 04       	cpc	r13, r9
    3b36:	10 f4       	brcc	.+4      	; 0x3b3c <f_lseek+0x74>
    3b38:	81 ff       	sbrs	r24, 1
    3b3a:	02 c0       	rjmp	.+4      	; 0x3b40 <f_lseek+0x78>
    3b3c:	64 01       	movw	r12, r8
    3b3e:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3b40:	ef 81       	ldd	r30, Y+7	; 0x07
    3b42:	f8 85       	ldd	r31, Y+8	; 0x08
    3b44:	26 81       	ldd	r18, Z+6	; 0x06
    3b46:	37 81       	ldd	r19, Z+7	; 0x07
    3b48:	40 85       	ldd	r20, Z+8	; 0x08
    3b4a:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3b4c:	16 82       	std	Z+6, r1	; 0x06
    3b4e:	17 82       	std	Z+7, r1	; 0x07
    3b50:	10 86       	std	Z+8, r1	; 0x08
    3b52:	11 86       	std	Z+9, r1	; 0x09
    3b54:	8f ef       	ldi	r24, 0xFF	; 255
    3b56:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3b58:	a1 14       	cp	r10, r1
    3b5a:	b1 04       	cpc	r11, r1
    3b5c:	c1 04       	cpc	r12, r1
    3b5e:	d1 04       	cpc	r13, r1
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <f_lseek+0x9c>
    3b62:	5f c1       	rjmp	.+702    	; 0x3e22 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3b64:	01 90       	ld	r0, Z+
    3b66:	f0 81       	ld	r31, Z
    3b68:	e0 2d       	mov	r30, r0
    3b6a:	e9 83       	std	Y+1, r30	; 0x01
    3b6c:	fa 83       	std	Y+2, r31	; 0x02
    3b6e:	82 81       	ldd	r24, Z+2	; 0x02
    3b70:	68 2e       	mov	r6, r24
    3b72:	77 24       	eor	r7, r7
    3b74:	88 24       	eor	r8, r8
    3b76:	99 24       	eor	r9, r9
    3b78:	89 e0       	ldi	r24, 0x09	; 9
    3b7a:	66 0c       	add	r6, r6
    3b7c:	77 1c       	adc	r7, r7
    3b7e:	88 1c       	adc	r8, r8
    3b80:	99 1c       	adc	r9, r9
    3b82:	8a 95       	dec	r24
    3b84:	d1 f7       	brne	.-12     	; 0x3b7a <f_lseek+0xb2>
		if (ifptr > 0 &&
    3b86:	21 15       	cp	r18, r1
    3b88:	31 05       	cpc	r19, r1
    3b8a:	41 05       	cpc	r20, r1
    3b8c:	51 05       	cpc	r21, r1
    3b8e:	f1 f1       	breq	.+124    	; 0x3c0c <f_lseek+0x144>
    3b90:	19 01       	movw	r2, r18
    3b92:	2a 01       	movw	r4, r20
    3b94:	08 94       	sec
    3b96:	21 08       	sbc	r2, r1
    3b98:	31 08       	sbc	r3, r1
    3b9a:	41 08       	sbc	r4, r1
    3b9c:	51 08       	sbc	r5, r1
    3b9e:	c6 01       	movw	r24, r12
    3ba0:	b5 01       	movw	r22, r10
    3ba2:	61 50       	subi	r22, 0x01	; 1
    3ba4:	70 40       	sbci	r23, 0x00	; 0
    3ba6:	80 40       	sbci	r24, 0x00	; 0
    3ba8:	90 40       	sbci	r25, 0x00	; 0
    3baa:	a4 01       	movw	r20, r8
    3bac:	93 01       	movw	r18, r6
    3bae:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    3bb2:	2b 83       	std	Y+3, r18	; 0x03
    3bb4:	3c 83       	std	Y+4, r19	; 0x04
    3bb6:	4d 83       	std	Y+5, r20	; 0x05
    3bb8:	5e 83       	std	Y+6, r21	; 0x06
    3bba:	c2 01       	movw	r24, r4
    3bbc:	b1 01       	movw	r22, r2
    3bbe:	a4 01       	movw	r20, r8
    3bc0:	93 01       	movw	r18, r6
    3bc2:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    3bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bca:	ad 81       	ldd	r26, Y+5	; 0x05
    3bcc:	be 81       	ldd	r27, Y+6	; 0x06
    3bce:	82 17       	cp	r24, r18
    3bd0:	93 07       	cpc	r25, r19
    3bd2:	a4 07       	cpc	r26, r20
    3bd4:	b5 07       	cpc	r27, r21
    3bd6:	d0 f0       	brcs	.+52     	; 0x3c0c <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3bd8:	88 27       	eor	r24, r24
    3bda:	99 27       	eor	r25, r25
    3bdc:	dc 01       	movw	r26, r24
    3bde:	86 19       	sub	r24, r6
    3be0:	97 09       	sbc	r25, r7
    3be2:	a8 09       	sbc	r26, r8
    3be4:	b9 09       	sbc	r27, r9
    3be6:	82 21       	and	r24, r2
    3be8:	93 21       	and	r25, r3
    3bea:	a4 21       	and	r26, r4
    3bec:	b5 21       	and	r27, r5
    3bee:	ef 81       	ldd	r30, Y+7	; 0x07
    3bf0:	f8 85       	ldd	r31, Y+8	; 0x08
    3bf2:	86 83       	std	Z+6, r24	; 0x06
    3bf4:	97 83       	std	Z+7, r25	; 0x07
    3bf6:	a0 87       	std	Z+8, r26	; 0x08
    3bf8:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3bfa:	a8 1a       	sub	r10, r24
    3bfc:	b9 0a       	sbc	r11, r25
    3bfe:	ca 0a       	sbc	r12, r26
    3c00:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3c02:	42 89       	ldd	r20, Z+18	; 0x12
    3c04:	53 89       	ldd	r21, Z+19	; 0x13
    3c06:	64 89       	ldd	r22, Z+20	; 0x14
    3c08:	75 89       	ldd	r23, Z+21	; 0x15
    3c0a:	39 c0       	rjmp	.+114    	; 0x3c7e <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3c0c:	af 81       	ldd	r26, Y+7	; 0x07
    3c0e:	b8 85       	ldd	r27, Y+8	; 0x08
    3c10:	1e 96       	adiw	r26, 0x0e	; 14
    3c12:	4d 91       	ld	r20, X+
    3c14:	5d 91       	ld	r21, X+
    3c16:	6d 91       	ld	r22, X+
    3c18:	7c 91       	ld	r23, X
    3c1a:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3c1c:	41 15       	cp	r20, r1
    3c1e:	51 05       	cpc	r21, r1
    3c20:	61 05       	cpc	r22, r1
    3c22:	71 05       	cpc	r23, r1
    3c24:	21 f5       	brne	.+72     	; 0x3c6e <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	40 e0       	ldi	r20, 0x00	; 0
    3c2c:	50 e0       	ldi	r21, 0x00	; 0
    3c2e:	60 e0       	ldi	r22, 0x00	; 0
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <create_chain>
    3c36:	ab 01       	movw	r20, r22
    3c38:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3c3a:	41 30       	cpi	r20, 0x01	; 1
    3c3c:	51 05       	cpc	r21, r1
    3c3e:	61 05       	cpc	r22, r1
    3c40:	71 05       	cpc	r23, r1
    3c42:	39 f4       	brne	.+14     	; 0x3c52 <f_lseek+0x18a>
    3c44:	ef 81       	ldd	r30, Y+7	; 0x07
    3c46:	f8 85       	ldd	r31, Y+8	; 0x08
    3c48:	84 81       	ldd	r24, Z+4	; 0x04
    3c4a:	80 68       	ori	r24, 0x80	; 128
    3c4c:	84 83       	std	Z+4, r24	; 0x04
    3c4e:	12 e0       	ldi	r17, 0x02	; 2
    3c50:	54 c1       	rjmp	.+680    	; 0x3efa <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3c52:	4f 3f       	cpi	r20, 0xFF	; 255
    3c54:	ff ef       	ldi	r31, 0xFF	; 255
    3c56:	5f 07       	cpc	r21, r31
    3c58:	ff ef       	ldi	r31, 0xFF	; 255
    3c5a:	6f 07       	cpc	r22, r31
    3c5c:	ff ef       	ldi	r31, 0xFF	; 255
    3c5e:	7f 07       	cpc	r23, r31
    3c60:	b1 f1       	breq	.+108    	; 0x3cce <f_lseek+0x206>
				fp->org_clust = clst;
    3c62:	ef 81       	ldd	r30, Y+7	; 0x07
    3c64:	f8 85       	ldd	r31, Y+8	; 0x08
    3c66:	46 87       	std	Z+14, r20	; 0x0e
    3c68:	57 87       	std	Z+15, r21	; 0x0f
    3c6a:	60 8b       	std	Z+16, r22	; 0x10
    3c6c:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3c6e:	af 81       	ldd	r26, Y+7	; 0x07
    3c70:	b8 85       	ldd	r27, Y+8	; 0x08
    3c72:	52 96       	adiw	r26, 0x12	; 18
    3c74:	4d 93       	st	X+, r20
    3c76:	5d 93       	st	X+, r21
    3c78:	6d 93       	st	X+, r22
    3c7a:	7c 93       	st	X, r23
    3c7c:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3c7e:	41 15       	cp	r20, r1
    3c80:	51 05       	cpc	r21, r1
    3c82:	61 05       	cpc	r22, r1
    3c84:	71 05       	cpc	r23, r1
    3c86:	09 f0       	breq	.+2      	; 0x3c8a <f_lseek+0x1c2>
    3c88:	58 c0       	rjmp	.+176    	; 0x3d3a <f_lseek+0x272>
    3c8a:	cb c0       	rjmp	.+406    	; 0x3e22 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3c8c:	ef 81       	ldd	r30, Y+7	; 0x07
    3c8e:	f8 85       	ldd	r31, Y+8	; 0x08
    3c90:	84 81       	ldd	r24, Z+4	; 0x04
    3c92:	20 81       	ld	r18, Z
    3c94:	31 81       	ldd	r19, Z+1	; 0x01
    3c96:	81 ff       	sbrs	r24, 1
    3c98:	0d c0       	rjmp	.+26     	; 0x3cb4 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3c9a:	c9 01       	movw	r24, r18
    3c9c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <create_chain>
    3ca0:	ab 01       	movw	r20, r22
    3ca2:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3ca4:	41 15       	cp	r20, r1
    3ca6:	51 05       	cpc	r21, r1
    3ca8:	61 05       	cpc	r22, r1
    3caa:	71 05       	cpc	r23, r1
    3cac:	41 f4       	brne	.+16     	; 0x3cbe <f_lseek+0x1f6>
    3cae:	64 01       	movw	r12, r8
    3cb0:	53 01       	movw	r10, r6
    3cb2:	49 c0       	rjmp	.+146    	; 0x3d46 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3cb4:	c9 01       	movw	r24, r18
    3cb6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    3cba:	ab 01       	movw	r20, r22
    3cbc:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3cbe:	4f 3f       	cpi	r20, 0xFF	; 255
    3cc0:	ff ef       	ldi	r31, 0xFF	; 255
    3cc2:	5f 07       	cpc	r21, r31
    3cc4:	ff ef       	ldi	r31, 0xFF	; 255
    3cc6:	6f 07       	cpc	r22, r31
    3cc8:	ff ef       	ldi	r31, 0xFF	; 255
    3cca:	7f 07       	cpc	r23, r31
    3ccc:	49 f4       	brne	.+18     	; 0x3ce0 <f_lseek+0x218>
    3cce:	af 81       	ldd	r26, Y+7	; 0x07
    3cd0:	b8 85       	ldd	r27, Y+8	; 0x08
    3cd2:	14 96       	adiw	r26, 0x04	; 4
    3cd4:	8c 91       	ld	r24, X
    3cd6:	14 97       	sbiw	r26, 0x04	; 4
    3cd8:	80 68       	ori	r24, 0x80	; 128
    3cda:	14 96       	adiw	r26, 0x04	; 4
    3cdc:	8c 93       	st	X, r24
    3cde:	ed c0       	rjmp	.+474    	; 0x3eba <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3ce0:	42 30       	cpi	r20, 0x02	; 2
    3ce2:	51 05       	cpc	r21, r1
    3ce4:	61 05       	cpc	r22, r1
    3ce6:	71 05       	cpc	r23, r1
    3ce8:	08 f4       	brcc	.+2      	; 0x3cec <f_lseek+0x224>
    3cea:	ac cf       	rjmp	.-168    	; 0x3c44 <f_lseek+0x17c>
    3cec:	af 81       	ldd	r26, Y+7	; 0x07
    3cee:	b8 85       	ldd	r27, Y+8	; 0x08
    3cf0:	ed 91       	ld	r30, X+
    3cf2:	fc 91       	ld	r31, X
    3cf4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cf6:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cf8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3cfa:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3cfc:	48 17       	cp	r20, r24
    3cfe:	59 07       	cpc	r21, r25
    3d00:	6a 07       	cpc	r22, r26
    3d02:	7b 07       	cpc	r23, r27
    3d04:	08 f0       	brcs	.+2      	; 0x3d08 <f_lseek+0x240>
    3d06:	9e cf       	rjmp	.-196    	; 0x3c44 <f_lseek+0x17c>
				fp->curr_clust = clst;
    3d08:	af 81       	ldd	r26, Y+7	; 0x07
    3d0a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d0c:	52 96       	adiw	r26, 0x12	; 18
    3d0e:	4d 93       	st	X+, r20
    3d10:	5d 93       	st	X+, r21
    3d12:	6d 93       	st	X+, r22
    3d14:	7c 93       	st	X, r23
    3d16:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3d18:	fd 01       	movw	r30, r26
    3d1a:	86 81       	ldd	r24, Z+6	; 0x06
    3d1c:	97 81       	ldd	r25, Z+7	; 0x07
    3d1e:	a0 85       	ldd	r26, Z+8	; 0x08
    3d20:	b1 85       	ldd	r27, Z+9	; 0x09
    3d22:	86 0d       	add	r24, r6
    3d24:	97 1d       	adc	r25, r7
    3d26:	a8 1d       	adc	r26, r8
    3d28:	b9 1d       	adc	r27, r9
    3d2a:	86 83       	std	Z+6, r24	; 0x06
    3d2c:	97 83       	std	Z+7, r25	; 0x07
    3d2e:	a0 87       	std	Z+8, r26	; 0x08
    3d30:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3d32:	a6 18       	sub	r10, r6
    3d34:	b7 08       	sbc	r11, r7
    3d36:	c8 08       	sbc	r12, r8
    3d38:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3d3a:	6a 14       	cp	r6, r10
    3d3c:	7b 04       	cpc	r7, r11
    3d3e:	8c 04       	cpc	r8, r12
    3d40:	9d 04       	cpc	r9, r13
    3d42:	08 f4       	brcc	.+2      	; 0x3d46 <f_lseek+0x27e>
    3d44:	a3 cf       	rjmp	.-186    	; 0x3c8c <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3d46:	ef 81       	ldd	r30, Y+7	; 0x07
    3d48:	f8 85       	ldd	r31, Y+8	; 0x08
    3d4a:	86 81       	ldd	r24, Z+6	; 0x06
    3d4c:	97 81       	ldd	r25, Z+7	; 0x07
    3d4e:	a0 85       	ldd	r26, Z+8	; 0x08
    3d50:	b1 85       	ldd	r27, Z+9	; 0x09
    3d52:	8a 0d       	add	r24, r10
    3d54:	9b 1d       	adc	r25, r11
    3d56:	ac 1d       	adc	r26, r12
    3d58:	bd 1d       	adc	r27, r13
    3d5a:	86 83       	std	Z+6, r24	; 0x06
    3d5c:	97 83       	std	Z+7, r25	; 0x07
    3d5e:	a0 87       	std	Z+8, r26	; 0x08
    3d60:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3d62:	d6 01       	movw	r26, r12
    3d64:	c5 01       	movw	r24, r10
    3d66:	09 e0       	ldi	r16, 0x09	; 9
    3d68:	b6 95       	lsr	r27
    3d6a:	a7 95       	ror	r26
    3d6c:	97 95       	ror	r25
    3d6e:	87 95       	ror	r24
    3d70:	0a 95       	dec	r16
    3d72:	d1 f7       	brne	.-12     	; 0x3d68 <f_lseek+0x2a0>
    3d74:	08 2f       	mov	r16, r24
    3d76:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	91 e0       	ldi	r25, 0x01	; 1
    3d7c:	a0 e0       	ldi	r26, 0x00	; 0
    3d7e:	b0 e0       	ldi	r27, 0x00	; 0
    3d80:	a8 22       	and	r10, r24
    3d82:	b9 22       	and	r11, r25
    3d84:	ca 22       	and	r12, r26
    3d86:	db 22       	and	r13, r27
    3d88:	a1 14       	cp	r10, r1
    3d8a:	b1 04       	cpc	r11, r1
    3d8c:	c1 04       	cpc	r12, r1
    3d8e:	d1 04       	cpc	r13, r1
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <f_lseek+0x2cc>
    3d92:	47 c0       	rjmp	.+142    	; 0x3e22 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3d94:	80 80       	ld	r8, Z
    3d96:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3d98:	ee ef       	ldi	r30, 0xFE	; 254
    3d9a:	ae 2e       	mov	r10, r30
    3d9c:	ef ef       	ldi	r30, 0xFF	; 255
    3d9e:	be 2e       	mov	r11, r30
    3da0:	ef ef       	ldi	r30, 0xFF	; 255
    3da2:	ce 2e       	mov	r12, r30
    3da4:	ef ef       	ldi	r30, 0xFF	; 255
    3da6:	de 2e       	mov	r13, r30
    3da8:	a4 0e       	add	r10, r20
    3daa:	b5 1e       	adc	r11, r21
    3dac:	c6 1e       	adc	r12, r22
    3dae:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3db0:	f4 01       	movw	r30, r8
    3db2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3db4:	93 8d       	ldd	r25, Z+27	; 0x1b
    3db6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3db8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3dba:	02 97       	sbiw	r24, 0x02	; 2
    3dbc:	a1 09       	sbc	r26, r1
    3dbe:	b1 09       	sbc	r27, r1
    3dc0:	a8 16       	cp	r10, r24
    3dc2:	b9 06       	cpc	r11, r25
    3dc4:	ca 06       	cpc	r12, r26
    3dc6:	db 06       	cpc	r13, r27
    3dc8:	c0 f4       	brcc	.+48     	; 0x3dfa <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3dca:	22 81       	ldd	r18, Z+2	; 0x02
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	c6 01       	movw	r24, r12
    3dd4:	b5 01       	movw	r22, r10
    3dd6:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    3dda:	9b 01       	movw	r18, r22
    3ddc:	ac 01       	movw	r20, r24
    3dde:	f4 01       	movw	r30, r8
    3de0:	86 a1       	ldd	r24, Z+38	; 0x26
    3de2:	97 a1       	ldd	r25, Z+39	; 0x27
    3de4:	a0 a5       	ldd	r26, Z+40	; 0x28
    3de6:	b1 a5       	ldd	r27, Z+41	; 0x29
    3de8:	28 0f       	add	r18, r24
    3dea:	39 1f       	adc	r19, r25
    3dec:	4a 1f       	adc	r20, r26
    3dee:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3df0:	21 15       	cp	r18, r1
    3df2:	31 05       	cpc	r19, r1
    3df4:	41 05       	cpc	r20, r1
    3df6:	51 05       	cpc	r21, r1
    3df8:	49 f4       	brne	.+18     	; 0x3e0c <f_lseek+0x344>
    3dfa:	af 81       	ldd	r26, Y+7	; 0x07
    3dfc:	b8 85       	ldd	r27, Y+8	; 0x08
    3dfe:	14 96       	adiw	r26, 0x04	; 4
    3e00:	8c 91       	ld	r24, X
    3e02:	14 97       	sbiw	r26, 0x04	; 4
    3e04:	80 68       	ori	r24, 0x80	; 128
    3e06:	14 96       	adiw	r26, 0x04	; 4
    3e08:	8c 93       	st	X, r24
    3e0a:	21 cf       	rjmp	.-446    	; 0x3c4e <f_lseek+0x186>
				nsect += fp->csect;
    3e0c:	59 01       	movw	r10, r18
    3e0e:	6a 01       	movw	r12, r20
    3e10:	a0 0e       	add	r10, r16
    3e12:	b1 1c       	adc	r11, r1
    3e14:	c1 1c       	adc	r12, r1
    3e16:	d1 1c       	adc	r13, r1
				fp->csect++;
    3e18:	0f 5f       	subi	r16, 0xFF	; 255
    3e1a:	ef 81       	ldd	r30, Y+7	; 0x07
    3e1c:	f8 85       	ldd	r31, Y+8	; 0x08
    3e1e:	05 83       	std	Z+5, r16	; 0x05
    3e20:	03 c0       	rjmp	.+6      	; 0x3e28 <f_lseek+0x360>
    3e22:	aa 24       	eor	r10, r10
    3e24:	bb 24       	eor	r11, r11
    3e26:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3e28:	ef 81       	ldd	r30, Y+7	; 0x07
    3e2a:	f8 85       	ldd	r31, Y+8	; 0x08
    3e2c:	86 81       	ldd	r24, Z+6	; 0x06
    3e2e:	97 81       	ldd	r25, Z+7	; 0x07
    3e30:	a0 85       	ldd	r26, Z+8	; 0x08
    3e32:	b1 85       	ldd	r27, Z+9	; 0x09
    3e34:	91 70       	andi	r25, 0x01	; 1
    3e36:	a0 70       	andi	r26, 0x00	; 0
    3e38:	b0 70       	andi	r27, 0x00	; 0
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	a1 05       	cpc	r26, r1
    3e3e:	b1 05       	cpc	r27, r1
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <f_lseek+0x37c>
    3e42:	45 c0       	rjmp	.+138    	; 0x3ece <f_lseek+0x406>
    3e44:	26 89       	ldd	r18, Z+22	; 0x16
    3e46:	37 89       	ldd	r19, Z+23	; 0x17
    3e48:	40 8d       	ldd	r20, Z+24	; 0x18
    3e4a:	51 8d       	ldd	r21, Z+25	; 0x19
    3e4c:	a2 16       	cp	r10, r18
    3e4e:	b3 06       	cpc	r11, r19
    3e50:	c4 06       	cpc	r12, r20
    3e52:	d5 06       	cpc	r13, r21
    3e54:	e1 f1       	breq	.+120    	; 0x3ece <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3e56:	84 81       	ldd	r24, Z+4	; 0x04
    3e58:	86 ff       	sbrs	r24, 6
    3e5a:	1a c0       	rjmp	.+52     	; 0x3e90 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3e5c:	01 90       	ld	r0, Z+
    3e5e:	f0 81       	ld	r31, Z
    3e60:	e0 2d       	mov	r30, r0
    3e62:	6f 81       	ldd	r22, Y+7	; 0x07
    3e64:	78 85       	ldd	r23, Y+8	; 0x08
    3e66:	60 5e       	subi	r22, 0xE0	; 224
    3e68:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6a:	81 81       	ldd	r24, Z+1	; 0x01
    3e6c:	01 e0       	ldi	r16, 0x01	; 1
    3e6e:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    3e72:	af 81       	ldd	r26, Y+7	; 0x07
    3e74:	b8 85       	ldd	r27, Y+8	; 0x08
    3e76:	14 96       	adiw	r26, 0x04	; 4
    3e78:	9c 91       	ld	r25, X
    3e7a:	14 97       	sbiw	r26, 0x04	; 4
    3e7c:	88 23       	and	r24, r24
    3e7e:	21 f0       	breq	.+8      	; 0x3e88 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3e80:	90 68       	ori	r25, 0x80	; 128
    3e82:	14 96       	adiw	r26, 0x04	; 4
    3e84:	9c 93       	st	X, r25
    3e86:	19 c0       	rjmp	.+50     	; 0x3eba <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3e88:	9f 7b       	andi	r25, 0xBF	; 191
    3e8a:	ef 81       	ldd	r30, Y+7	; 0x07
    3e8c:	f8 85       	ldd	r31, Y+8	; 0x08
    3e8e:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3e90:	af 81       	ldd	r26, Y+7	; 0x07
    3e92:	b8 85       	ldd	r27, Y+8	; 0x08
    3e94:	ed 91       	ld	r30, X+
    3e96:	fc 91       	ld	r31, X
    3e98:	11 97       	sbiw	r26, 0x01	; 1
    3e9a:	bd 01       	movw	r22, r26
    3e9c:	60 5e       	subi	r22, 0xE0	; 224
    3e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea0:	81 81       	ldd	r24, Z+1	; 0x01
    3ea2:	a6 01       	movw	r20, r12
    3ea4:	95 01       	movw	r18, r10
    3ea6:	01 e0       	ldi	r16, 0x01	; 1
    3ea8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <disk_read>
    3eac:	88 23       	and	r24, r24
    3eae:	39 f0       	breq	.+14     	; 0x3ebe <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3eb0:	ef 81       	ldd	r30, Y+7	; 0x07
    3eb2:	f8 85       	ldd	r31, Y+8	; 0x08
    3eb4:	84 81       	ldd	r24, Z+4	; 0x04
    3eb6:	80 68       	ori	r24, 0x80	; 128
    3eb8:	84 83       	std	Z+4, r24	; 0x04
    3eba:	11 e0       	ldi	r17, 0x01	; 1
    3ebc:	1e c0       	rjmp	.+60     	; 0x3efa <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3ebe:	af 81       	ldd	r26, Y+7	; 0x07
    3ec0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ec2:	56 96       	adiw	r26, 0x16	; 22
    3ec4:	ad 92       	st	X+, r10
    3ec6:	bd 92       	st	X+, r11
    3ec8:	cd 92       	st	X+, r12
    3eca:	dc 92       	st	X, r13
    3ecc:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3ece:	ef 81       	ldd	r30, Y+7	; 0x07
    3ed0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ed2:	26 81       	ldd	r18, Z+6	; 0x06
    3ed4:	37 81       	ldd	r19, Z+7	; 0x07
    3ed6:	40 85       	ldd	r20, Z+8	; 0x08
    3ed8:	51 85       	ldd	r21, Z+9	; 0x09
    3eda:	82 85       	ldd	r24, Z+10	; 0x0a
    3edc:	93 85       	ldd	r25, Z+11	; 0x0b
    3ede:	a4 85       	ldd	r26, Z+12	; 0x0c
    3ee0:	b5 85       	ldd	r27, Z+13	; 0x0d
    3ee2:	82 17       	cp	r24, r18
    3ee4:	93 07       	cpc	r25, r19
    3ee6:	a4 07       	cpc	r26, r20
    3ee8:	b5 07       	cpc	r27, r21
    3eea:	38 f4       	brcc	.+14     	; 0x3efa <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3eec:	22 87       	std	Z+10, r18	; 0x0a
    3eee:	33 87       	std	Z+11, r19	; 0x0b
    3ef0:	44 87       	std	Z+12, r20	; 0x0c
    3ef2:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3ef4:	84 81       	ldd	r24, Z+4	; 0x04
    3ef6:	80 62       	ori	r24, 0x20	; 32
    3ef8:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3efa:	81 2f       	mov	r24, r17
    3efc:	28 96       	adiw	r28, 0x08	; 8
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	df 90       	pop	r13
    3f0c:	cf 90       	pop	r12
    3f0e:	bf 90       	pop	r11
    3f10:	af 90       	pop	r10
    3f12:	9f 90       	pop	r9
    3f14:	8f 90       	pop	r8
    3f16:	7f 90       	pop	r7
    3f18:	6f 90       	pop	r6
    3f1a:	5f 90       	pop	r5
    3f1c:	4f 90       	pop	r4
    3f1e:	3f 90       	pop	r3
    3f20:	2f 90       	pop	r2
    3f22:	08 95       	ret

00003f24 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	2e 97       	sbiw	r28, 0x0e	; 14
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	8c 01       	movw	r16, r24
    3f38:	6d 87       	std	Y+13, r22	; 0x0d
    3f3a:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	0d 96       	adiw	r24, 0x0d	; 13
    3f40:	b8 01       	movw	r22, r16
    3f42:	40 e0       	ldi	r20, 0x00	; 0
    3f44:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
	if (res == FR_OK) {
    3f48:	88 23       	and	r24, r24
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <f_opendir+0x2a>
    3f4c:	46 c0       	rjmp	.+140    	; 0x3fda <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3f4e:	ce 01       	movw	r24, r28
    3f50:	01 96       	adiw	r24, 0x01	; 1
    3f52:	d8 01       	movw	r26, r16
    3f54:	54 96       	adiw	r26, 0x14	; 20
    3f56:	8d 93       	st	X+, r24
    3f58:	9c 93       	st	X, r25
    3f5a:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3f5c:	6d 85       	ldd	r22, Y+13	; 0x0d
    3f5e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3f60:	c8 01       	movw	r24, r16
    3f62:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3f66:	88 23       	and	r24, r24
    3f68:	a9 f5       	brne	.+106    	; 0x3fd4 <f_opendir+0xb0>
			dir = dj->dir;
    3f6a:	d8 01       	movw	r26, r16
    3f6c:	52 96       	adiw	r26, 0x12	; 18
    3f6e:	ed 91       	ld	r30, X+
    3f70:	fc 91       	ld	r31, X
    3f72:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3f74:	30 97       	sbiw	r30, 0x00	; 0
    3f76:	f9 f0       	breq	.+62     	; 0x3fb6 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3f78:	83 85       	ldd	r24, Z+11	; 0x0b
    3f7a:	84 ff       	sbrs	r24, 4
    3f7c:	2d c0       	rjmp	.+90     	; 0x3fd8 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3f7e:	35 89       	ldd	r19, Z+21	; 0x15
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	84 89       	ldd	r24, Z+20	; 0x14
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	28 2b       	or	r18, r24
    3f88:	39 2b       	or	r19, r25
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	a9 01       	movw	r20, r18
    3f90:	33 27       	eor	r19, r19
    3f92:	22 27       	eor	r18, r18
    3f94:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	62 8d       	ldd	r22, Z+26	; 0x1a
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	86 2b       	or	r24, r22
    3f9e:	97 2b       	or	r25, r23
    3fa0:	a0 e0       	ldi	r26, 0x00	; 0
    3fa2:	b0 e0       	ldi	r27, 0x00	; 0
    3fa4:	28 2b       	or	r18, r24
    3fa6:	39 2b       	or	r19, r25
    3fa8:	4a 2b       	or	r20, r26
    3faa:	5b 2b       	or	r21, r27
    3fac:	f8 01       	movw	r30, r16
    3fae:	26 83       	std	Z+6, r18	; 0x06
    3fb0:	37 83       	std	Z+7, r19	; 0x07
    3fb2:	40 87       	std	Z+8, r20	; 0x08
    3fb4:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3fb6:	d8 01       	movw	r26, r16
    3fb8:	ed 91       	ld	r30, X+
    3fba:	fc 91       	ld	r31, X
    3fbc:	11 97       	sbiw	r26, 0x01	; 1
    3fbe:	86 81       	ldd	r24, Z+6	; 0x06
    3fc0:	97 81       	ldd	r25, Z+7	; 0x07
    3fc2:	12 96       	adiw	r26, 0x02	; 2
    3fc4:	8d 93       	st	X+, r24
    3fc6:	9c 93       	st	X, r25
    3fc8:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3fca:	c8 01       	movw	r24, r16
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3fd4:	84 30       	cpi	r24, 0x04	; 4
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <f_opendir+0xb6>
    3fd8:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3fda:	2e 96       	adiw	r28, 0x0e	; 14
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	1f 91       	pop	r17
    3fe6:	0f 91       	pop	r16
    3fe8:	08 95       	ret

00003fea <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3fea:	ef 92       	push	r14
    3fec:	ff 92       	push	r15
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	2c 97       	sbiw	r28, 0x0c	; 12
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	8c 01       	movw	r16, r24
    4002:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    4004:	fc 01       	movw	r30, r24
    4006:	62 81       	ldd	r22, Z+2	; 0x02
    4008:	73 81       	ldd	r23, Z+3	; 0x03
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <validate>
	if (res == FR_OK) {
    4012:	88 23       	and	r24, r24
    4014:	59 f5       	brne	.+86     	; 0x406c <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    4016:	ce 01       	movw	r24, r28
    4018:	01 96       	adiw	r24, 0x01	; 1
    401a:	f8 01       	movw	r30, r16
    401c:	84 8b       	std	Z+20, r24	; 0x14
    401e:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    4020:	e1 14       	cp	r14, r1
    4022:	f1 04       	cpc	r15, r1
    4024:	31 f4       	brne	.+12     	; 0x4032 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    4026:	c8 01       	movw	r24, r16
    4028:	60 e0       	ldi	r22, 0x00	; 0
    402a:	70 e0       	ldi	r23, 0x00	; 0
    402c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
    4030:	1d c0       	rjmp	.+58     	; 0x406c <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    4032:	c8 01       	movw	r24, r16
    4034:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <dir_read>
			if (res == FR_NO_FILE) {
    4038:	84 30       	cpi	r24, 0x04	; 4
    403a:	31 f4       	brne	.+12     	; 0x4048 <f_readdir+0x5e>
				dj->sect = 0;
    403c:	f8 01       	movw	r30, r16
    403e:	16 86       	std	Z+14, r1	; 0x0e
    4040:	17 86       	std	Z+15, r1	; 0x0f
    4042:	10 8a       	std	Z+16, r1	; 0x10
    4044:	11 8a       	std	Z+17, r1	; 0x11
    4046:	02 c0       	rjmp	.+4      	; 0x404c <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    4048:	88 23       	and	r24, r24
    404a:	81 f4       	brne	.+32     	; 0x406c <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    404c:	c8 01       	movw	r24, r16
    404e:	b7 01       	movw	r22, r14
    4050:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    4054:	c8 01       	movw	r24, r16
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <dir_next>
				if (res == FR_NO_FILE) {
    405c:	84 30       	cpi	r24, 0x04	; 4
    405e:	31 f4       	brne	.+12     	; 0x406c <f_readdir+0x82>
					dj->sect = 0;
    4060:	f8 01       	movw	r30, r16
    4062:	16 86       	std	Z+14, r1	; 0x0e
    4064:	17 86       	std	Z+15, r1	; 0x0f
    4066:	10 8a       	std	Z+16, r1	; 0x10
    4068:	11 8a       	std	Z+17, r1	; 0x11
    406a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    406c:	2c 96       	adiw	r28, 0x0c	; 12
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	ff 90       	pop	r15
    407c:	ef 90       	pop	r14
    407e:	08 95       	ret

00004080 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    4080:	cf 92       	push	r12
    4082:	df 92       	push	r13
    4084:	ef 92       	push	r14
    4086:	ff 92       	push	r15
    4088:	1f 93       	push	r17
    408a:	df 93       	push	r29
    408c:	cf 93       	push	r28
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	a4 97       	sbiw	r28, 0x24	; 36
    4094:	cd bf       	out	0x3d, r28	; 61
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	8b a3       	std	Y+35, r24	; 0x23
    409a:	9c a3       	std	Y+36, r25	; 0x24
    409c:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    409e:	2d e0       	ldi	r18, 0x0D	; 13
    40a0:	e2 2e       	mov	r14, r18
    40a2:	f1 2c       	mov	r15, r1
    40a4:	ec 0e       	add	r14, r28
    40a6:	fd 1e       	adc	r15, r29
    40a8:	ce 01       	movw	r24, r28
    40aa:	83 96       	adiw	r24, 0x23	; 35
    40ac:	b7 01       	movw	r22, r14
    40ae:	40 e0       	ldi	r20, 0x00	; 0
    40b0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
    40b4:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    40b6:	88 23       	and	r24, r24
    40b8:	b1 f4       	brne	.+44     	; 0x40e6 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    40ba:	ce 01       	movw	r24, r28
    40bc:	01 96       	adiw	r24, 0x01	; 1
    40be:	89 a3       	std	Y+33, r24	; 0x21
    40c0:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    40c2:	6b a1       	ldd	r22, Y+35	; 0x23
    40c4:	7c a1       	ldd	r23, Y+36	; 0x24
    40c6:	c7 01       	movw	r24, r14
    40c8:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
    40cc:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    40ce:	88 23       	and	r24, r24
    40d0:	51 f4       	brne	.+20     	; 0x40e6 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    40d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40d4:	98 a1       	ldd	r25, Y+32	; 0x20
    40d6:	89 2b       	or	r24, r25
    40d8:	11 f4       	brne	.+4      	; 0x40de <f_stat+0x5e>
    40da:	16 e0       	ldi	r17, 0x06	; 6
    40dc:	04 c0       	rjmp	.+8      	; 0x40e6 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    40de:	c7 01       	movw	r24, r14
    40e0:	b6 01       	movw	r22, r12
    40e2:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    40e6:	81 2f       	mov	r24, r17
    40e8:	a4 96       	adiw	r28, 0x24	; 36
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	cf 91       	pop	r28
    40f0:	df 91       	pop	r29
    40f2:	1f 91       	pop	r17
    40f4:	ff 90       	pop	r15
    40f6:	ef 90       	pop	r14
    40f8:	df 90       	pop	r13
    40fa:	cf 90       	pop	r12
    40fc:	08 95       	ret

000040fe <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    40fe:	2f 92       	push	r2
    4100:	3f 92       	push	r3
    4102:	4f 92       	push	r4
    4104:	5f 92       	push	r5
    4106:	6f 92       	push	r6
    4108:	7f 92       	push	r7
    410a:	8f 92       	push	r8
    410c:	9f 92       	push	r9
    410e:	af 92       	push	r10
    4110:	bf 92       	push	r11
    4112:	cf 92       	push	r12
    4114:	df 92       	push	r13
    4116:	ef 92       	push	r14
    4118:	ff 92       	push	r15
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	29 97       	sbiw	r28, 0x09	; 9
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	89 83       	std	Y+1, r24	; 0x01
    412e:	9a 83       	std	Y+2, r25	; 0x02
    4130:	6c 83       	std	Y+4, r22	; 0x04
    4132:	7d 83       	std	Y+5, r23	; 0x05
    4134:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4136:	ce 01       	movw	r24, r28
    4138:	01 96       	adiw	r24, 0x01	; 1
    413a:	ba 01       	movw	r22, r20
    413c:	40 e0       	ldi	r20, 0x00	; 0
    413e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    4142:	88 23       	and	r24, r24
    4144:	09 f0       	breq	.+2      	; 0x4148 <f_getfree+0x4a>
    4146:	eb c0       	rjmp	.+470    	; 0x431e <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    4148:	d2 01       	movw	r26, r4
    414a:	ed 91       	ld	r30, X+
    414c:	fc 91       	ld	r31, X
    414e:	26 85       	ldd	r18, Z+14	; 0x0e
    4150:	37 85       	ldd	r19, Z+15	; 0x0f
    4152:	40 89       	ldd	r20, Z+16	; 0x10
    4154:	51 89       	ldd	r21, Z+17	; 0x11
    4156:	e2 8c       	ldd	r14, Z+26	; 0x1a
    4158:	f3 8c       	ldd	r15, Z+27	; 0x1b
    415a:	04 8d       	ldd	r16, Z+28	; 0x1c
    415c:	15 8d       	ldd	r17, Z+29	; 0x1d
    415e:	d8 01       	movw	r26, r16
    4160:	c7 01       	movw	r24, r14
    4162:	02 97       	sbiw	r24, 0x02	; 2
    4164:	a1 09       	sbc	r26, r1
    4166:	b1 09       	sbc	r27, r1
    4168:	82 17       	cp	r24, r18
    416a:	93 07       	cpc	r25, r19
    416c:	a4 07       	cpc	r26, r20
    416e:	b5 07       	cpc	r27, r21
    4170:	38 f0       	brcs	.+14     	; 0x4180 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    4172:	ec 81       	ldd	r30, Y+4	; 0x04
    4174:	fd 81       	ldd	r31, Y+5	; 0x05
    4176:	20 83       	st	Z, r18
    4178:	31 83       	std	Z+1, r19	; 0x01
    417a:	42 83       	std	Z+2, r20	; 0x02
    417c:	53 83       	std	Z+3, r21	; 0x03
    417e:	ce c0       	rjmp	.+412    	; 0x431c <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    4180:	30 80       	ld	r3, Z
    4182:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    4184:	23 2d       	mov	r18, r3
    4186:	21 30       	cpi	r18, 0x01	; 1
    4188:	e1 f5       	brne	.+120    	; 0x4202 <f_getfree+0x104>
    418a:	aa 24       	eor	r10, r10
    418c:	bb 24       	eor	r11, r11
    418e:	65 01       	movw	r12, r10
    4190:	92 e0       	ldi	r25, 0x02	; 2
    4192:	e9 2e       	mov	r14, r25
    4194:	f1 2c       	mov	r15, r1
    4196:	01 2d       	mov	r16, r1
    4198:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    419a:	d2 01       	movw	r26, r4
    419c:	8d 91       	ld	r24, X+
    419e:	9c 91       	ld	r25, X
    41a0:	b8 01       	movw	r22, r16
    41a2:	a7 01       	movw	r20, r14
    41a4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    41a8:	6f 3f       	cpi	r22, 0xFF	; 255
    41aa:	bf ef       	ldi	r27, 0xFF	; 255
    41ac:	7b 07       	cpc	r23, r27
    41ae:	bf ef       	ldi	r27, 0xFF	; 255
    41b0:	8b 07       	cpc	r24, r27
    41b2:	bf ef       	ldi	r27, 0xFF	; 255
    41b4:	9b 07       	cpc	r25, r27
    41b6:	11 f4       	brne	.+4      	; 0x41bc <f_getfree+0xbe>
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	b1 c0       	rjmp	.+354    	; 0x431e <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    41bc:	61 30       	cpi	r22, 0x01	; 1
    41be:	71 05       	cpc	r23, r1
    41c0:	81 05       	cpc	r24, r1
    41c2:	91 05       	cpc	r25, r1
    41c4:	11 f4       	brne	.+4      	; 0x41ca <f_getfree+0xcc>
    41c6:	82 e0       	ldi	r24, 0x02	; 2
    41c8:	aa c0       	rjmp	.+340    	; 0x431e <f_getfree+0x220>
			if (stat == 0) n++;
    41ca:	61 15       	cp	r22, r1
    41cc:	71 05       	cpc	r23, r1
    41ce:	81 05       	cpc	r24, r1
    41d0:	91 05       	cpc	r25, r1
    41d2:	29 f4       	brne	.+10     	; 0x41de <f_getfree+0xe0>
    41d4:	08 94       	sec
    41d6:	a1 1c       	adc	r10, r1
    41d8:	b1 1c       	adc	r11, r1
    41da:	c1 1c       	adc	r12, r1
    41dc:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    41de:	08 94       	sec
    41e0:	e1 1c       	adc	r14, r1
    41e2:	f1 1c       	adc	r15, r1
    41e4:	01 1d       	adc	r16, r1
    41e6:	11 1d       	adc	r17, r1
    41e8:	d2 01       	movw	r26, r4
    41ea:	ed 91       	ld	r30, X+
    41ec:	fc 91       	ld	r31, X
    41ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    41f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    41f2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    41f4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    41f6:	e8 16       	cp	r14, r24
    41f8:	f9 06       	cpc	r15, r25
    41fa:	0a 07       	cpc	r16, r26
    41fc:	1b 07       	cpc	r17, r27
    41fe:	68 f2       	brcs	.-102    	; 0x419a <f_getfree+0x9c>
    4200:	7b c0       	rjmp	.+246    	; 0x42f8 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    4202:	66 8c       	ldd	r6, Z+30	; 0x1e
    4204:	77 8c       	ldd	r7, Z+31	; 0x1f
    4206:	80 a0       	ldd	r8, Z+32	; 0x20
    4208:	91 a0       	ldd	r9, Z+33	; 0x21
    420a:	aa 24       	eor	r10, r10
    420c:	bb 24       	eor	r11, r11
    420e:	65 01       	movw	r12, r10
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	70 e0       	ldi	r23, 0x00	; 0
    4214:	e0 e0       	ldi	r30, 0x00	; 0
    4216:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    4218:	61 15       	cp	r22, r1
    421a:	71 05       	cpc	r23, r1
    421c:	a9 f4       	brne	.+42     	; 0x4248 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    421e:	f2 01       	movw	r30, r4
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	b4 01       	movw	r22, r8
    4226:	a3 01       	movw	r20, r6
    4228:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
				if (res != FR_OK)
    422c:	88 23       	and	r24, r24
    422e:	09 f0       	breq	.+2      	; 0x4232 <f_getfree+0x134>
    4230:	76 c0       	rjmp	.+236    	; 0x431e <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    4232:	08 94       	sec
    4234:	61 1c       	adc	r6, r1
    4236:	71 1c       	adc	r7, r1
    4238:	81 1c       	adc	r8, r1
    423a:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    423c:	d2 01       	movw	r26, r4
    423e:	ed 91       	ld	r30, X+
    4240:	fc 91       	ld	r31, X
    4242:	be 96       	adiw	r30, 0x2e	; 46
    4244:	60 e0       	ldi	r22, 0x00	; 0
    4246:	72 e0       	ldi	r23, 0x02	; 2
    4248:	b1 81       	ldd	r27, Z+1	; 0x01
    424a:	b8 87       	std	Y+8, r27	; 0x08
    424c:	20 81       	ld	r18, Z
    424e:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    4250:	3b 81       	ldd	r19, Y+3	; 0x03
    4252:	32 30       	cpi	r19, 0x02	; 2
    4254:	99 f4       	brne	.+38     	; 0x427c <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    4256:	bf 83       	std	Y+7, r27	; 0x07
    4258:	1e 82       	std	Y+6, r1	; 0x06
    425a:	82 2f       	mov	r24, r18
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	ae 81       	ldd	r26, Y+6	; 0x06
    4260:	bf 81       	ldd	r27, Y+7	; 0x07
    4262:	8a 2b       	or	r24, r26
    4264:	9b 2b       	or	r25, r27
    4266:	89 2b       	or	r24, r25
    4268:	29 f4       	brne	.+10     	; 0x4274 <f_getfree+0x176>
    426a:	08 94       	sec
    426c:	a1 1c       	adc	r10, r1
    426e:	b1 1c       	adc	r11, r1
    4270:	c1 1c       	adc	r12, r1
    4272:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    4274:	32 96       	adiw	r30, 0x02	; 2
    4276:	62 50       	subi	r22, 0x02	; 2
    4278:	70 40       	sbci	r23, 0x00	; 0
    427a:	33 c0       	rjmp	.+102    	; 0x42e2 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    427c:	23 81       	ldd	r18, Z+3	; 0x03
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e0       	ldi	r20, 0x00	; 0
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	52 2f       	mov	r21, r18
    4286:	44 27       	eor	r20, r20
    4288:	33 27       	eor	r19, r19
    428a:	22 27       	eor	r18, r18
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	a0 e0       	ldi	r26, 0x00	; 0
    4292:	b0 e0       	ldi	r27, 0x00	; 0
    4294:	dc 01       	movw	r26, r24
    4296:	99 27       	eor	r25, r25
    4298:	88 27       	eor	r24, r24
    429a:	28 2b       	or	r18, r24
    429c:	39 2b       	or	r19, r25
    429e:	4a 2b       	or	r20, r26
    42a0:	5b 2b       	or	r21, r27
    42a2:	39 84       	ldd	r3, Y+9	; 0x09
    42a4:	83 2d       	mov	r24, r3
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	a0 e0       	ldi	r26, 0x00	; 0
    42aa:	b0 e0       	ldi	r27, 0x00	; 0
    42ac:	28 2b       	or	r18, r24
    42ae:	39 2b       	or	r19, r25
    42b0:	4a 2b       	or	r20, r26
    42b2:	5b 2b       	or	r21, r27
    42b4:	38 84       	ldd	r3, Y+8	; 0x08
    42b6:	22 24       	eor	r2, r2
    42b8:	c1 01       	movw	r24, r2
    42ba:	a0 e0       	ldi	r26, 0x00	; 0
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	28 2b       	or	r18, r24
    42c0:	39 2b       	or	r19, r25
    42c2:	4a 2b       	or	r20, r26
    42c4:	5b 2b       	or	r21, r27
    42c6:	5f 70       	andi	r21, 0x0F	; 15
    42c8:	21 15       	cp	r18, r1
    42ca:	31 05       	cpc	r19, r1
    42cc:	41 05       	cpc	r20, r1
    42ce:	51 05       	cpc	r21, r1
    42d0:	29 f4       	brne	.+10     	; 0x42dc <f_getfree+0x1de>
    42d2:	08 94       	sec
    42d4:	a1 1c       	adc	r10, r1
    42d6:	b1 1c       	adc	r11, r1
    42d8:	c1 1c       	adc	r12, r1
    42da:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    42dc:	34 96       	adiw	r30, 0x04	; 4
    42de:	64 50       	subi	r22, 0x04	; 4
    42e0:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    42e2:	08 94       	sec
    42e4:	e1 08       	sbc	r14, r1
    42e6:	f1 08       	sbc	r15, r1
    42e8:	01 09       	sbc	r16, r1
    42ea:	11 09       	sbc	r17, r1
    42ec:	e1 14       	cp	r14, r1
    42ee:	f1 04       	cpc	r15, r1
    42f0:	01 05       	cpc	r16, r1
    42f2:	11 05       	cpc	r17, r1
    42f4:	09 f0       	breq	.+2      	; 0x42f8 <f_getfree+0x1fa>
    42f6:	90 cf       	rjmp	.-224    	; 0x4218 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    42f8:	d2 01       	movw	r26, r4
    42fa:	ed 91       	ld	r30, X+
    42fc:	fc 91       	ld	r31, X
    42fe:	a6 86       	std	Z+14, r10	; 0x0e
    4300:	b7 86       	std	Z+15, r11	; 0x0f
    4302:	c0 8a       	std	Z+16, r12	; 0x10
    4304:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4306:	bb 81       	ldd	r27, Y+3	; 0x03
    4308:	b3 30       	cpi	r27, 0x03	; 3
    430a:	11 f4       	brne	.+4      	; 0x4310 <f_getfree+0x212>
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    4310:	ec 81       	ldd	r30, Y+4	; 0x04
    4312:	fd 81       	ldd	r31, Y+5	; 0x05
    4314:	a0 82       	st	Z, r10
    4316:	b1 82       	std	Z+1, r11	; 0x01
    4318:	c2 82       	std	Z+2, r12	; 0x02
    431a:	d3 82       	std	Z+3, r13	; 0x03
    431c:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    431e:	29 96       	adiw	r28, 0x09	; 9
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	cf 91       	pop	r28
    4326:	df 91       	pop	r29
    4328:	1f 91       	pop	r17
    432a:	0f 91       	pop	r16
    432c:	ff 90       	pop	r15
    432e:	ef 90       	pop	r14
    4330:	df 90       	pop	r13
    4332:	cf 90       	pop	r12
    4334:	bf 90       	pop	r11
    4336:	af 90       	pop	r10
    4338:	9f 90       	pop	r9
    433a:	8f 90       	pop	r8
    433c:	7f 90       	pop	r7
    433e:	6f 90       	pop	r6
    4340:	5f 90       	pop	r5
    4342:	4f 90       	pop	r4
    4344:	3f 90       	pop	r3
    4346:	2f 90       	pop	r2
    4348:	08 95       	ret

0000434a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    434a:	cf 92       	push	r12
    434c:	df 92       	push	r13
    434e:	ef 92       	push	r14
    4350:	ff 92       	push	r15
    4352:	0f 93       	push	r16
    4354:	1f 93       	push	r17
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    435c:	6a 81       	ldd	r22, Y+2	; 0x02
    435e:	7b 81       	ldd	r23, Y+3	; 0x03
    4360:	88 81       	ld	r24, Y
    4362:	99 81       	ldd	r25, Y+1	; 0x01
    4364:	0e 94 e7 16 	call	0x2dce	; 0x2dce <validate>
    4368:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    436a:	88 23       	and	r24, r24
    436c:	09 f0       	breq	.+2      	; 0x4370 <f_truncate+0x26>
    436e:	6e c0       	rjmp	.+220    	; 0x444c <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    4370:	6c 81       	ldd	r22, Y+4	; 0x04
    4372:	67 ff       	sbrs	r22, 7
    4374:	02 c0       	rjmp	.+4      	; 0x437a <f_truncate+0x30>
    4376:	12 e0       	ldi	r17, 0x02	; 2
    4378:	69 c0       	rjmp	.+210    	; 0x444c <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    437a:	61 fd       	sbrc	r22, 1
    437c:	02 c0       	rjmp	.+4      	; 0x4382 <f_truncate+0x38>
    437e:	17 e0       	ldi	r17, 0x07	; 7
    4380:	65 c0       	rjmp	.+202    	; 0x444c <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    4382:	2e 81       	ldd	r18, Y+6	; 0x06
    4384:	3f 81       	ldd	r19, Y+7	; 0x07
    4386:	48 85       	ldd	r20, Y+8	; 0x08
    4388:	59 85       	ldd	r21, Y+9	; 0x09
    438a:	8a 85       	ldd	r24, Y+10	; 0x0a
    438c:	9b 85       	ldd	r25, Y+11	; 0x0b
    438e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4390:	bd 85       	ldd	r27, Y+13	; 0x0d
    4392:	28 17       	cp	r18, r24
    4394:	39 07       	cpc	r19, r25
    4396:	4a 07       	cpc	r20, r26
    4398:	5b 07       	cpc	r21, r27
    439a:	08 f0       	brcs	.+2      	; 0x439e <f_truncate+0x54>
    439c:	57 c0       	rjmp	.+174    	; 0x444c <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    439e:	2a 87       	std	Y+10, r18	; 0x0a
    43a0:	3b 87       	std	Y+11, r19	; 0x0b
    43a2:	4c 87       	std	Y+12, r20	; 0x0c
    43a4:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    43a6:	60 62       	ori	r22, 0x20	; 32
    43a8:	6c 83       	std	Y+4, r22	; 0x04
    43aa:	88 81       	ld	r24, Y
    43ac:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    43ae:	21 15       	cp	r18, r1
    43b0:	31 05       	cpc	r19, r1
    43b2:	41 05       	cpc	r20, r1
    43b4:	51 05       	cpc	r21, r1
    43b6:	61 f4       	brne	.+24     	; 0x43d0 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    43b8:	4e 85       	ldd	r20, Y+14	; 0x0e
    43ba:	5f 85       	ldd	r21, Y+15	; 0x0f
    43bc:	68 89       	ldd	r22, Y+16	; 0x10
    43be:	79 89       	ldd	r23, Y+17	; 0x11
    43c0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <remove_chain>
    43c4:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    43c6:	1e 86       	std	Y+14, r1	; 0x0e
    43c8:	1f 86       	std	Y+15, r1	; 0x0f
    43ca:	18 8a       	std	Y+16, r1	; 0x10
    43cc:	19 8a       	std	Y+17, r1	; 0x11
    43ce:	39 c0       	rjmp	.+114    	; 0x4442 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    43d0:	4a 89       	ldd	r20, Y+18	; 0x12
    43d2:	5b 89       	ldd	r21, Y+19	; 0x13
    43d4:	6c 89       	ldd	r22, Y+20	; 0x14
    43d6:	7d 89       	ldd	r23, Y+21	; 0x15
    43d8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    43dc:	6b 01       	movw	r12, r22
    43de:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    43e0:	8f ef       	ldi	r24, 0xFF	; 255
    43e2:	c8 16       	cp	r12, r24
    43e4:	8f ef       	ldi	r24, 0xFF	; 255
    43e6:	d8 06       	cpc	r13, r24
    43e8:	8f ef       	ldi	r24, 0xFF	; 255
    43ea:	e8 06       	cpc	r14, r24
    43ec:	8f ef       	ldi	r24, 0xFF	; 255
    43ee:	f8 06       	cpc	r15, r24
    43f0:	b9 f1       	breq	.+110    	; 0x4460 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	c8 16       	cp	r12, r24
    43f6:	d1 04       	cpc	r13, r1
    43f8:	e1 04       	cpc	r14, r1
    43fa:	f1 04       	cpc	r15, r1
    43fc:	11 f4       	brne	.+4      	; 0x4402 <f_truncate+0xb8>
    43fe:	12 e0       	ldi	r17, 0x02	; 2
    4400:	22 c0       	rjmp	.+68     	; 0x4446 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    4402:	e8 81       	ld	r30, Y
    4404:	f9 81       	ldd	r31, Y+1	; 0x01
    4406:	82 8d       	ldd	r24, Z+26	; 0x1a
    4408:	93 8d       	ldd	r25, Z+27	; 0x1b
    440a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    440c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    440e:	c8 16       	cp	r12, r24
    4410:	d9 06       	cpc	r13, r25
    4412:	ea 06       	cpc	r14, r26
    4414:	fb 06       	cpc	r15, r27
    4416:	d0 f4       	brcc	.+52     	; 0x444c <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    4418:	4a 89       	ldd	r20, Y+18	; 0x12
    441a:	5b 89       	ldd	r21, Y+19	; 0x13
    441c:	6c 89       	ldd	r22, Y+20	; 0x14
    441e:	7d 89       	ldd	r23, Y+21	; 0x15
    4420:	cf 01       	movw	r24, r30
    4422:	0f ef       	ldi	r16, 0xFF	; 255
    4424:	1f ef       	ldi	r17, 0xFF	; 255
    4426:	2f ef       	ldi	r18, 0xFF	; 255
    4428:	3f e0       	ldi	r19, 0x0F	; 15
    442a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <put_fat>
    442e:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4430:	88 23       	and	r24, r24
    4432:	49 f4       	brne	.+18     	; 0x4446 <f_truncate+0xfc>
    4434:	88 81       	ld	r24, Y
    4436:	99 81       	ldd	r25, Y+1	; 0x01
    4438:	b7 01       	movw	r22, r14
    443a:	a6 01       	movw	r20, r12
    443c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <remove_chain>
    4440:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4442:	11 23       	and	r17, r17
    4444:	19 f0       	breq	.+6      	; 0x444c <f_truncate+0x102>
    4446:	8c 81       	ldd	r24, Y+4	; 0x04
    4448:	80 68       	ori	r24, 0x80	; 128
    444a:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    444c:	81 2f       	mov	r24, r17
    444e:	df 91       	pop	r29
    4450:	cf 91       	pop	r28
    4452:	1f 91       	pop	r17
    4454:	0f 91       	pop	r16
    4456:	ff 90       	pop	r15
    4458:	ef 90       	pop	r14
    445a:	df 90       	pop	r13
    445c:	cf 90       	pop	r12
    445e:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4460:	11 e0       	ldi	r17, 0x01	; 1
    4462:	f1 cf       	rjmp	.-30     	; 0x4446 <f_truncate+0xfc>

00004464 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    4464:	cf 92       	push	r12
    4466:	df 92       	push	r13
    4468:	ef 92       	push	r14
    446a:	ff 92       	push	r15
    446c:	0f 93       	push	r16
    446e:	1f 93       	push	r17
    4470:	df 93       	push	r29
    4472:	cf 93       	push	r28
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	ea 97       	sbiw	r28, 0x3a	; 58
    447a:	cd bf       	out	0x3d, r28	; 61
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	89 af       	std	Y+57, r24	; 0x39
    4480:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    4482:	4d e0       	ldi	r20, 0x0D	; 13
    4484:	c4 2e       	mov	r12, r20
    4486:	d1 2c       	mov	r13, r1
    4488:	cc 0e       	add	r12, r28
    448a:	dd 1e       	adc	r13, r29
    448c:	ce 01       	movw	r24, r28
    448e:	c9 96       	adiw	r24, 0x39	; 57
    4490:	b6 01       	movw	r22, r12
    4492:	41 e0       	ldi	r20, 0x01	; 1
    4494:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4498:	88 23       	and	r24, r24
    449a:	09 f0       	breq	.+2      	; 0x449e <f_unlink+0x3a>
    449c:	71 c0       	rjmp	.+226    	; 0x4580 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    449e:	ce 01       	movw	r24, r28
    44a0:	01 96       	adiw	r24, 0x01	; 1
    44a2:	89 a3       	std	Y+33, r24	; 0x21
    44a4:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    44a6:	69 ad       	ldd	r22, Y+57	; 0x39
    44a8:	7a ad       	ldd	r23, Y+58	; 0x3a
    44aa:	c6 01       	movw	r24, r12
    44ac:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    44b0:	88 23       	and	r24, r24
    44b2:	09 f0       	breq	.+2      	; 0x44b6 <f_unlink+0x52>
    44b4:	65 c0       	rjmp	.+202    	; 0x4580 <f_unlink+0x11c>

	dir = dj.dir;
    44b6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    44b8:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    44ba:	30 97       	sbiw	r30, 0x00	; 0
    44bc:	11 f4       	brne	.+4      	; 0x44c2 <f_unlink+0x5e>
    44be:	86 e0       	ldi	r24, 0x06	; 6
    44c0:	5f c0       	rjmp	.+190    	; 0x4580 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    44c2:	83 85       	ldd	r24, Z+11	; 0x0b
    44c4:	48 2f       	mov	r20, r24
    44c6:	80 fd       	sbrc	r24, 0
    44c8:	5a c0       	rjmp	.+180    	; 0x457e <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    44ca:	95 89       	ldd	r25, Z+21	; 0x15
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	24 89       	ldd	r18, Z+20	; 0x14
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	82 2b       	or	r24, r18
    44d4:	93 2b       	or	r25, r19
    44d6:	a0 e0       	ldi	r26, 0x00	; 0
    44d8:	b0 e0       	ldi	r27, 0x00	; 0
    44da:	8c 01       	movw	r16, r24
    44dc:	ff 24       	eor	r15, r15
    44de:	ee 24       	eor	r14, r14
    44e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	82 2b       	or	r24, r18
    44ea:	93 2b       	or	r25, r19
    44ec:	a0 e0       	ldi	r26, 0x00	; 0
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	e8 2a       	or	r14, r24
    44f2:	f9 2a       	or	r15, r25
    44f4:	0a 2b       	or	r16, r26
    44f6:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    44f8:	44 ff       	sbrs	r20, 4
    44fa:	29 c0       	rjmp	.+82     	; 0x454e <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    44fc:	82 e0       	ldi	r24, 0x02	; 2
    44fe:	e8 16       	cp	r14, r24
    4500:	f1 04       	cpc	r15, r1
    4502:	01 05       	cpc	r16, r1
    4504:	11 05       	cpc	r17, r1
    4506:	10 f4       	brcc	.+4      	; 0x450c <f_unlink+0xa8>
    4508:	82 e0       	ldi	r24, 0x02	; 2
    450a:	3a c0       	rjmp	.+116    	; 0x4580 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    450c:	de 01       	movw	r26, r28
    450e:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    4510:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    4512:	9d 01       	movw	r18, r26
    4514:	02 c0       	rjmp	.+4      	; 0x451a <f_unlink+0xb6>
    4516:	81 91       	ld	r24, Z+
    4518:	8d 93       	st	X+, r24
    451a:	e2 17       	cp	r30, r18
    451c:	f3 07       	cpc	r31, r19
    451e:	d9 f7       	brne	.-10     	; 0x4516 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    4520:	e9 a6       	std	Y+41, r14	; 0x29
    4522:	fa a6       	std	Y+42, r15	; 0x2a
    4524:	0b a7       	std	Y+43, r16	; 0x2b
    4526:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4528:	23 e2       	ldi	r18, 0x23	; 35
    452a:	c2 2e       	mov	r12, r18
    452c:	d1 2c       	mov	r13, r1
    452e:	cc 0e       	add	r12, r28
    4530:	dd 1e       	adc	r13, r29
    4532:	c6 01       	movw	r24, r12
    4534:	62 e0       	ldi	r22, 0x02	; 2
    4536:	70 e0       	ldi	r23, 0x00	; 0
    4538:	0e 94 67 0e 	call	0x1cce	; 0x1cce <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    453c:	88 23       	and	r24, r24
    453e:	01 f5       	brne	.+64     	; 0x4580 <f_unlink+0x11c>
		res = dir_read(&sdj);
    4540:	c6 01       	movw	r24, r12
    4542:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4546:	88 23       	and	r24, r24
    4548:	d1 f0       	breq	.+52     	; 0x457e <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    454a:	84 30       	cpi	r24, 0x04	; 4
    454c:	c9 f4       	brne	.+50     	; 0x4580 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    454e:	ce 01       	movw	r24, r28
    4550:	0d 96       	adiw	r24, 0x0d	; 13
    4552:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <dir_remove>
	if (res == FR_OK) {
    4556:	88 23       	and	r24, r24
    4558:	99 f4       	brne	.+38     	; 0x4580 <f_unlink+0x11c>
		if (dclst)
    455a:	e1 14       	cp	r14, r1
    455c:	f1 04       	cpc	r15, r1
    455e:	01 05       	cpc	r16, r1
    4560:	11 05       	cpc	r17, r1
    4562:	41 f0       	breq	.+16     	; 0x4574 <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    4564:	8d 85       	ldd	r24, Y+13	; 0x0d
    4566:	9e 85       	ldd	r25, Y+14	; 0x0e
    4568:	b8 01       	movw	r22, r16
    456a:	a7 01       	movw	r20, r14
    456c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    4570:	88 23       	and	r24, r24
    4572:	31 f4       	brne	.+12     	; 0x4580 <f_unlink+0x11c>
    4574:	8d 85       	ldd	r24, Y+13	; 0x0d
    4576:	9e 85       	ldd	r25, Y+14	; 0x0e
    4578:	0e 94 57 0a 	call	0x14ae	; 0x14ae <sync>
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <f_unlink+0x11c>
    457e:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    4580:	ea 96       	adiw	r28, 0x3a	; 58
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	08 95       	ret

00004598 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    4598:	2f 92       	push	r2
    459a:	3f 92       	push	r3
    459c:	4f 92       	push	r4
    459e:	5f 92       	push	r5
    45a0:	6f 92       	push	r6
    45a2:	7f 92       	push	r7
    45a4:	8f 92       	push	r8
    45a6:	9f 92       	push	r9
    45a8:	af 92       	push	r10
    45aa:	bf 92       	push	r11
    45ac:	cf 92       	push	r12
    45ae:	df 92       	push	r13
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
    45c0:	ac 97       	sbiw	r28, 0x2c	; 44
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	de bf       	out	0x3e, r29	; 62
    45c6:	8b a3       	std	Y+35, r24	; 0x23
    45c8:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    45ca:	7d e0       	ldi	r23, 0x0D	; 13
    45cc:	e7 2e       	mov	r14, r23
    45ce:	f1 2c       	mov	r15, r1
    45d0:	ec 0e       	add	r14, r28
    45d2:	fd 1e       	adc	r15, r29
    45d4:	ce 01       	movw	r24, r28
    45d6:	83 96       	adiw	r24, 0x23	; 35
    45d8:	b7 01       	movw	r22, r14
    45da:	41 e0       	ldi	r20, 0x01	; 1
    45dc:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
    45e0:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    45e2:	88 23       	and	r24, r24
    45e4:	09 f0       	breq	.+2      	; 0x45e8 <f_mkdir+0x50>
    45e6:	4c c1       	rjmp	.+664    	; 0x4880 <f_mkdir+0x2e8>

	INITBUF(dj, sfn, lfn);
    45e8:	ce 01       	movw	r24, r28
    45ea:	01 96       	adiw	r24, 0x01	; 1
    45ec:	89 a3       	std	Y+33, r24	; 0x21
    45ee:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    45f0:	6b a1       	ldd	r22, Y+35	; 0x23
    45f2:	7c a1       	ldd	r23, Y+36	; 0x24
    45f4:	c7 01       	movw	r24, r14
    45f6:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
    45fa:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    45fc:	88 23       	and	r24, r24
    45fe:	11 f4       	brne	.+4      	; 0x4604 <f_mkdir+0x6c>
    4600:	18 e0       	ldi	r17, 0x08	; 8
    4602:	3e c1       	rjmp	.+636    	; 0x4880 <f_mkdir+0x2e8>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    4604:	84 30       	cpi	r24, 0x04	; 4
    4606:	09 f0       	breq	.+2      	; 0x460a <f_mkdir+0x72>
    4608:	3b c1       	rjmp	.+630    	; 0x4880 <f_mkdir+0x2e8>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    460a:	8d 85       	ldd	r24, Y+13	; 0x0d
    460c:	9e 85       	ldd	r25, Y+14	; 0x0e
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	50 e0       	ldi	r21, 0x00	; 0
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <create_chain>
    461a:	4b 01       	movw	r8, r22
    461c:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    461e:	61 15       	cp	r22, r1
    4620:	71 05       	cpc	r23, r1
    4622:	81 05       	cpc	r24, r1
    4624:	91 05       	cpc	r25, r1
    4626:	11 f4       	brne	.+4      	; 0x462c <f_mkdir+0x94>
    4628:	17 e0       	ldi	r17, 0x07	; 7
    462a:	2a c1       	rjmp	.+596    	; 0x4880 <f_mkdir+0x2e8>
	if (dclst == 1) res = FR_INT_ERR;
    462c:	61 30       	cpi	r22, 0x01	; 1
    462e:	71 05       	cpc	r23, r1
    4630:	81 05       	cpc	r24, r1
    4632:	91 05       	cpc	r25, r1
    4634:	11 f4       	brne	.+4      	; 0x463a <f_mkdir+0xa2>
    4636:	12 e0       	ldi	r17, 0x02	; 2
    4638:	23 c1       	rjmp	.+582    	; 0x4880 <f_mkdir+0x2e8>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    463a:	6f 3f       	cpi	r22, 0xFF	; 255
    463c:	3f ef       	ldi	r19, 0xFF	; 255
    463e:	73 07       	cpc	r23, r19
    4640:	3f ef       	ldi	r19, 0xFF	; 255
    4642:	83 07       	cpc	r24, r19
    4644:	3f ef       	ldi	r19, 0xFF	; 255
    4646:	93 07       	cpc	r25, r19
    4648:	09 f4       	brne	.+2      	; 0x464c <f_mkdir+0xb4>
    464a:	31 c1       	rjmp	.+610    	; 0x48ae <f_mkdir+0x316>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    464c:	8d 85       	ldd	r24, Y+13	; 0x0d
    464e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	60 e0       	ldi	r22, 0x00	; 0
    4656:	70 e0       	ldi	r23, 0x00	; 0
    4658:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    465c:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    465e:	88 23       	and	r24, r24
    4660:	09 f0       	breq	.+2      	; 0x4664 <f_mkdir+0xcc>
    4662:	0e c1       	rjmp	.+540    	; 0x4880 <f_mkdir+0x2e8>
	dsect = clust2sect(dj.fs, dclst);
    4664:	0d 85       	ldd	r16, Y+13	; 0x0d
    4666:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4668:	6e ef       	ldi	r22, 0xFE	; 254
    466a:	c6 2e       	mov	r12, r22
    466c:	6f ef       	ldi	r22, 0xFF	; 255
    466e:	d6 2e       	mov	r13, r22
    4670:	6f ef       	ldi	r22, 0xFF	; 255
    4672:	e6 2e       	mov	r14, r22
    4674:	6f ef       	ldi	r22, 0xFF	; 255
    4676:	f6 2e       	mov	r15, r22
    4678:	c8 0c       	add	r12, r8
    467a:	d9 1c       	adc	r13, r9
    467c:	ea 1c       	adc	r14, r10
    467e:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4680:	f8 01       	movw	r30, r16
    4682:	82 8d       	ldd	r24, Z+26	; 0x1a
    4684:	93 8d       	ldd	r25, Z+27	; 0x1b
    4686:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4688:	b5 8d       	ldd	r27, Z+29	; 0x1d
    468a:	02 97       	sbiw	r24, 0x02	; 2
    468c:	a1 09       	sbc	r26, r1
    468e:	b1 09       	sbc	r27, r1
    4690:	c8 16       	cp	r12, r24
    4692:	d9 06       	cpc	r13, r25
    4694:	ea 06       	cpc	r14, r26
    4696:	fb 06       	cpc	r15, r27
    4698:	20 f0       	brcs	.+8      	; 0x46a2 <f_mkdir+0x10a>
    469a:	44 24       	eor	r4, r4
    469c:	55 24       	eor	r5, r5
    469e:	32 01       	movw	r6, r4
    46a0:	14 c0       	rjmp	.+40     	; 0x46ca <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    46a2:	f8 01       	movw	r30, r16
    46a4:	22 81       	ldd	r18, Z+2	; 0x02
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	40 e0       	ldi	r20, 0x00	; 0
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	c7 01       	movw	r24, r14
    46ae:	b6 01       	movw	r22, r12
    46b0:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    46b4:	2b 01       	movw	r4, r22
    46b6:	3c 01       	movw	r6, r24
    46b8:	f8 01       	movw	r30, r16
    46ba:	86 a1       	ldd	r24, Z+38	; 0x26
    46bc:	97 a1       	ldd	r25, Z+39	; 0x27
    46be:	a0 a5       	ldd	r26, Z+40	; 0x28
    46c0:	b1 a5       	ldd	r27, Z+41	; 0x29
    46c2:	48 0e       	add	r4, r24
    46c4:	59 1e       	adc	r5, r25
    46c6:	6a 1e       	adc	r6, r26
    46c8:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    46ca:	5e e2       	ldi	r21, 0x2E	; 46
    46cc:	25 2e       	mov	r2, r21
    46ce:	31 2c       	mov	r3, r1
    46d0:	20 0e       	add	r2, r16
    46d2:	31 1e       	adc	r3, r17
    46d4:	f1 01       	movw	r30, r2
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	92 e0       	ldi	r25, 0x02	; 2
    46da:	01 c0       	rjmp	.+2      	; 0x46de <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    46dc:	11 92       	st	Z+, r1
    46de:	01 97       	sbiw	r24, 0x01	; 1
    46e0:	2f ef       	ldi	r18, 0xFF	; 255
    46e2:	8f 3f       	cpi	r24, 0xFF	; 255
    46e4:	92 07       	cpc	r25, r18
    46e6:	d1 f7       	brne	.-12     	; 0x46dc <f_mkdir+0x144>
    46e8:	f1 01       	movw	r30, r2
    46ea:	8b e0       	ldi	r24, 0x0B	; 11
    46ec:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    46ee:	20 e2       	ldi	r18, 0x20	; 32
    46f0:	01 c0       	rjmp	.+2      	; 0x46f4 <f_mkdir+0x15c>
    46f2:	21 93       	st	Z+, r18
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	3f ef       	ldi	r19, 0xFF	; 255
    46f8:	8f 3f       	cpi	r24, 0xFF	; 255
    46fa:	93 07       	cpc	r25, r19
    46fc:	d1 f7       	brne	.-12     	; 0x46f2 <f_mkdir+0x15a>
    46fe:	8e e2       	ldi	r24, 0x2E	; 46
    4700:	f8 01       	movw	r30, r16
    4702:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    4704:	80 e1       	ldi	r24, 0x10	; 16
    4706:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
    4708:	0e 94 66 09 	call	0x12cc	; 0x12cc <get_fattime>
	ST_DWORD(dir+DIR_WrtTime, tim);
    470c:	6c a7       	std	Y+44, r22	; 0x2c
    470e:	0c 5b       	subi	r16, 0xBC	; 188
    4710:	1f 4f       	sbci	r17, 0xFF	; 255
    4712:	f8 01       	movw	r30, r16
    4714:	61 93       	st	Z+, r22
    4716:	27 2f       	mov	r18, r23
    4718:	33 27       	eor	r19, r19
    471a:	2b a7       	std	Y+43, r18	; 0x2b
    471c:	21 93       	st	Z+, r18
    471e:	9c 01       	movw	r18, r24
    4720:	44 27       	eor	r20, r20
    4722:	55 27       	eor	r21, r21
    4724:	2a a7       	std	Y+42, r18	; 0x2a
    4726:	21 93       	st	Z+, r18
    4728:	69 2f       	mov	r22, r25
    472a:	77 27       	eor	r23, r23
    472c:	88 27       	eor	r24, r24
    472e:	99 27       	eor	r25, r25
    4730:	69 a7       	std	Y+41, r22	; 0x29
    4732:	61 93       	st	Z+, r22
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4734:	88 a6       	std	Y+40, r8	; 0x28
    4736:	81 92       	st	Z+, r8
    4738:	8f 01       	movw	r16, r30
    473a:	89 2d       	mov	r24, r9
    473c:	99 27       	eor	r25, r25
    473e:	8f a3       	std	Y+39, r24	; 0x27
    4740:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4742:	c5 01       	movw	r24, r10
    4744:	aa 27       	eor	r26, r26
    4746:	bb 27       	eor	r27, r27
    4748:	8e a3       	std	Y+38, r24	; 0x26
    474a:	07 50       	subi	r16, 0x07	; 7
    474c:	10 40       	sbci	r17, 0x00	; 0
    474e:	f8 01       	movw	r30, r16
    4750:	81 93       	st	Z+, r24
    4752:	8f 01       	movw	r16, r30
    4754:	89 2f       	mov	r24, r25
    4756:	99 27       	eor	r25, r25
    4758:	8d a3       	std	Y+37, r24	; 0x25
    475a:	80 83       	st	Z, r24
    475c:	03 54       	subi	r16, 0x43	; 67
    475e:	10 40       	sbci	r17, 0x00	; 0
    4760:	f1 01       	movw	r30, r2
    4762:	20 e2       	ldi	r18, 0x20	; 32
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	03 c0       	rjmp	.+6      	; 0x476e <f_mkdir+0x1d6>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4768:	80 81       	ld	r24, Z
    476a:	80 a3       	std	Z+32, r24	; 0x20
    476c:	31 96       	adiw	r30, 0x01	; 1
    476e:	21 50       	subi	r18, 0x01	; 1
    4770:	30 40       	sbci	r19, 0x00	; 0
    4772:	8f ef       	ldi	r24, 0xFF	; 255
    4774:	2f 3f       	cpi	r18, 0xFF	; 255
    4776:	38 07       	cpc	r19, r24
    4778:	b9 f7       	brne	.-18     	; 0x4768 <f_mkdir+0x1d0>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    477a:	01 5b       	subi	r16, 0xB1	; 177
    477c:	1f 4f       	sbci	r17, 0xFF	; 255
    477e:	8e e2       	ldi	r24, 0x2E	; 46
    4780:	f8 01       	movw	r30, r16
    4782:	80 83       	st	Z, r24
    4784:	0f 54       	subi	r16, 0x4F	; 79
    4786:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4788:	2b 89       	ldd	r18, Y+19	; 0x13
    478a:	3c 89       	ldd	r19, Y+20	; 0x14
    478c:	4d 89       	ldd	r20, Y+21	; 0x15
    478e:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    4790:	ed 85       	ldd	r30, Y+13	; 0x0d
    4792:	fe 85       	ldd	r31, Y+14	; 0x0e
    4794:	80 81       	ld	r24, Z
    4796:	83 30       	cpi	r24, 0x03	; 3
    4798:	69 f4       	brne	.+26     	; 0x47b4 <f_mkdir+0x21c>
    479a:	82 a1       	ldd	r24, Z+34	; 0x22
    479c:	93 a1       	ldd	r25, Z+35	; 0x23
    479e:	a4 a1       	ldd	r26, Z+36	; 0x24
    47a0:	b5 a1       	ldd	r27, Z+37	; 0x25
    47a2:	28 17       	cp	r18, r24
    47a4:	39 07       	cpc	r19, r25
    47a6:	4a 07       	cpc	r20, r26
    47a8:	5b 07       	cpc	r21, r27
    47aa:	21 f4       	brne	.+8      	; 0x47b4 <f_mkdir+0x21c>
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e0       	ldi	r20, 0x00	; 0
    47b2:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    47b4:	08 59       	subi	r16, 0x98	; 152
    47b6:	1f 4f       	sbci	r17, 0xFF	; 255
    47b8:	f8 01       	movw	r30, r16
    47ba:	21 93       	st	Z+, r18
    47bc:	8f 01       	movw	r16, r30
    47be:	83 2f       	mov	r24, r19
    47c0:	99 27       	eor	r25, r25
    47c2:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    47c4:	ca 01       	movw	r24, r20
    47c6:	aa 27       	eor	r26, r26
    47c8:	bb 27       	eor	r27, r27
    47ca:	07 50       	subi	r16, 0x07	; 7
    47cc:	10 40       	sbci	r17, 0x00	; 0
    47ce:	f8 01       	movw	r30, r16
    47d0:	81 93       	st	Z+, r24
    47d2:	89 2f       	mov	r24, r25
    47d4:	99 27       	eor	r25, r25
    47d6:	80 83       	st	Z, r24
    47d8:	73 01       	movw	r14, r6
    47da:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    47dc:	01 e0       	ldi	r16, 0x01	; 1
    47de:	1f c0       	rjmp	.+62     	; 0x481e <f_mkdir+0x286>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    47e0:	c2 a6       	std	Z+42, r12	; 0x2a
    47e2:	d3 a6       	std	Z+43, r13	; 0x2b
    47e4:	e4 a6       	std	Z+44, r14	; 0x2c
    47e6:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    47e8:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    47ea:	cf 01       	movw	r24, r30
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	60 e0       	ldi	r22, 0x00	; 0
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
    47f8:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    47fa:	88 23       	and	r24, r24
    47fc:	09 f0       	breq	.+2      	; 0x4800 <f_mkdir+0x268>
    47fe:	40 c0       	rjmp	.+128    	; 0x4880 <f_mkdir+0x2e8>
    4800:	f1 01       	movw	r30, r2
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	92 e0       	ldi	r25, 0x02	; 2
    4806:	01 c0       	rjmp	.+2      	; 0x480a <f_mkdir+0x272>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4808:	11 92       	st	Z+, r1
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	2f ef       	ldi	r18, 0xFF	; 255
    480e:	8f 3f       	cpi	r24, 0xFF	; 255
    4810:	92 07       	cpc	r25, r18
    4812:	d1 f7       	brne	.-12     	; 0x4808 <f_mkdir+0x270>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    4814:	08 94       	sec
    4816:	c1 1c       	adc	r12, r1
    4818:	d1 1c       	adc	r13, r1
    481a:	e1 1c       	adc	r14, r1
    481c:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    481e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4820:	fe 85       	ldd	r31, Y+14	; 0x0e
    4822:	9c 2d       	mov	r25, r12
    4824:	94 19       	sub	r25, r4
    4826:	82 81       	ldd	r24, Z+2	; 0x02
    4828:	98 17       	cp	r25, r24
    482a:	d0 f2       	brcs	.-76     	; 0x47e0 <f_mkdir+0x248>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    482c:	ce 01       	movw	r24, r28
    482e:	0d 96       	adiw	r24, 0x0d	; 13
    4830:	0e 94 14 11 	call	0x2228	; 0x2228 <dir_register>
    4834:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4836:	88 23       	and	r24, r24
    4838:	39 f0       	breq	.+14     	; 0x4848 <f_mkdir+0x2b0>
		remove_chain(dj.fs, dclst);
    483a:	8d 85       	ldd	r24, Y+13	; 0x0d
    483c:	9e 85       	ldd	r25, Y+14	; 0x0e
    483e:	b5 01       	movw	r22, r10
    4840:	a4 01       	movw	r20, r8
    4842:	0e 94 bc 0c 	call	0x1978	; 0x1978 <remove_chain>
    4846:	1c c0       	rjmp	.+56     	; 0x4880 <f_mkdir+0x2e8>
	} else {
		dir = dj.dir;
    4848:	ef 8d       	ldd	r30, Y+31	; 0x1f
    484a:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    484c:	80 e1       	ldi	r24, 0x10	; 16
    484e:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    4850:	3c a5       	ldd	r19, Y+44	; 0x2c
    4852:	36 8b       	std	Z+22, r19	; 0x16
    4854:	8b a5       	ldd	r24, Y+43	; 0x2b
    4856:	87 8b       	std	Z+23, r24	; 0x17
    4858:	2a a5       	ldd	r18, Y+42	; 0x2a
    485a:	20 8f       	std	Z+24, r18	; 0x18
    485c:	39 a5       	ldd	r19, Y+41	; 0x29
    485e:	31 8f       	std	Z+25, r19	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    4860:	88 a5       	ldd	r24, Y+40	; 0x28
    4862:	82 8f       	std	Z+26, r24	; 0x1a
    4864:	2f a1       	ldd	r18, Y+39	; 0x27
    4866:	23 8f       	std	Z+27, r18	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4868:	3e a1       	ldd	r19, Y+38	; 0x26
    486a:	34 8b       	std	Z+20, r19	; 0x14
    486c:	8d a1       	ldd	r24, Y+37	; 0x25
    486e:	85 8b       	std	Z+21, r24	; 0x15
		dj.fs->wflag = 1;
    4870:	ed 85       	ldd	r30, Y+13	; 0x0d
    4872:	fe 85       	ldd	r31, Y+14	; 0x0e
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    4878:	cf 01       	movw	r24, r30
    487a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <sync>
    487e:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    4880:	81 2f       	mov	r24, r17
    4882:	ac 96       	adiw	r28, 0x2c	; 44
    4884:	cd bf       	out	0x3d, r28	; 61
    4886:	de bf       	out	0x3e, r29	; 62
    4888:	cf 91       	pop	r28
    488a:	df 91       	pop	r29
    488c:	1f 91       	pop	r17
    488e:	0f 91       	pop	r16
    4890:	ff 90       	pop	r15
    4892:	ef 90       	pop	r14
    4894:	df 90       	pop	r13
    4896:	cf 90       	pop	r12
    4898:	bf 90       	pop	r11
    489a:	af 90       	pop	r10
    489c:	9f 90       	pop	r9
    489e:	8f 90       	pop	r8
    48a0:	7f 90       	pop	r7
    48a2:	6f 90       	pop	r6
    48a4:	5f 90       	pop	r5
    48a6:	4f 90       	pop	r4
    48a8:	3f 90       	pop	r3
    48aa:	2f 90       	pop	r2
    48ac:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    48ae:	11 e0       	ldi	r17, 0x01	; 1
    48b0:	e7 cf       	rjmp	.-50     	; 0x4880 <f_mkdir+0x2e8>

000048b2 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	0f 93       	push	r16
    48b8:	1f 93       	push	r17
    48ba:	df 93       	push	r29
    48bc:	cf 93       	push	r28
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	a4 97       	sbiw	r28, 0x24	; 36
    48c4:	cd bf       	out	0x3d, r28	; 61
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	8b a3       	std	Y+35, r24	; 0x23
    48ca:	9c a3       	std	Y+36, r25	; 0x24
    48cc:	e6 2e       	mov	r14, r22
    48ce:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    48d0:	8e 01       	movw	r16, r28
    48d2:	03 5f       	subi	r16, 0xF3	; 243
    48d4:	1f 4f       	sbci	r17, 0xFF	; 255
    48d6:	ce 01       	movw	r24, r28
    48d8:	83 96       	adiw	r24, 0x23	; 35
    48da:	b8 01       	movw	r22, r16
    48dc:	41 e0       	ldi	r20, 0x01	; 1
    48de:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
	if (res == FR_OK) {
    48e2:	88 23       	and	r24, r24
    48e4:	09 f5       	brne	.+66     	; 0x4928 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    48e6:	ce 01       	movw	r24, r28
    48e8:	01 96       	adiw	r24, 0x01	; 1
    48ea:	89 a3       	std	Y+33, r24	; 0x21
    48ec:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    48ee:	6b a1       	ldd	r22, Y+35	; 0x23
    48f0:	7c a1       	ldd	r23, Y+36	; 0x24
    48f2:	c8 01       	movw	r24, r16
    48f4:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    48f8:	88 23       	and	r24, r24
    48fa:	b1 f4       	brne	.+44     	; 0x4928 <f_chmod+0x76>
			dir = dj.dir;
    48fc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    48fe:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    4900:	30 97       	sbiw	r30, 0x00	; 0
    4902:	11 f4       	brne	.+4      	; 0x4908 <f_chmod+0x56>
    4904:	86 e0       	ldi	r24, 0x06	; 6
    4906:	10 c0       	rjmp	.+32     	; 0x4928 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4908:	9f 2d       	mov	r25, r15
    490a:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    490c:	89 2f       	mov	r24, r25
    490e:	80 95       	com	r24
    4910:	23 85       	ldd	r18, Z+11	; 0x0b
    4912:	82 23       	and	r24, r18
    4914:	9e 21       	and	r25, r14
    4916:	89 2b       	or	r24, r25
    4918:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    491a:	ed 85       	ldd	r30, Y+13	; 0x0d
    491c:	fe 85       	ldd	r31, Y+14	; 0x0e
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4922:	cf 01       	movw	r24, r30
    4924:	0e 94 57 0a 	call	0x14ae	; 0x14ae <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4928:	a4 96       	adiw	r28, 0x24	; 36
    492a:	cd bf       	out	0x3d, r28	; 61
    492c:	de bf       	out	0x3e, r29	; 62
    492e:	cf 91       	pop	r28
    4930:	df 91       	pop	r29
    4932:	1f 91       	pop	r17
    4934:	0f 91       	pop	r16
    4936:	ff 90       	pop	r15
    4938:	ef 90       	pop	r14
    493a:	08 95       	ret

0000493c <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    493c:	ef 92       	push	r14
    493e:	ff 92       	push	r15
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	df 93       	push	r29
    4946:	cf 93       	push	r28
    4948:	cd b7       	in	r28, 0x3d	; 61
    494a:	de b7       	in	r29, 0x3e	; 62
    494c:	a4 97       	sbiw	r28, 0x24	; 36
    494e:	cd bf       	out	0x3d, r28	; 61
    4950:	de bf       	out	0x3e, r29	; 62
    4952:	8b a3       	std	Y+35, r24	; 0x23
    4954:	9c a3       	std	Y+36, r25	; 0x24
    4956:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4958:	ed e0       	ldi	r30, 0x0D	; 13
    495a:	ee 2e       	mov	r14, r30
    495c:	f1 2c       	mov	r15, r1
    495e:	ec 0e       	add	r14, r28
    4960:	fd 1e       	adc	r15, r29
    4962:	ce 01       	movw	r24, r28
    4964:	83 96       	adiw	r24, 0x23	; 35
    4966:	b7 01       	movw	r22, r14
    4968:	41 e0       	ldi	r20, 0x01	; 1
    496a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
	if (res == FR_OK) {
    496e:	88 23       	and	r24, r24
    4970:	41 f5       	brne	.+80     	; 0x49c2 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    4972:	ce 01       	movw	r24, r28
    4974:	01 96       	adiw	r24, 0x01	; 1
    4976:	89 a3       	std	Y+33, r24	; 0x21
    4978:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    497a:	6b a1       	ldd	r22, Y+35	; 0x23
    497c:	7c a1       	ldd	r23, Y+36	; 0x24
    497e:	c7 01       	movw	r24, r14
    4980:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4984:	88 23       	and	r24, r24
    4986:	e9 f4       	brne	.+58     	; 0x49c2 <f_utime+0x86>
			dir = dj.dir;
    4988:	ef 8d       	ldd	r30, Y+31	; 0x1f
    498a:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    498c:	30 97       	sbiw	r30, 0x00	; 0
    498e:	11 f4       	brne	.+4      	; 0x4994 <f_utime+0x58>
    4990:	86 e0       	ldi	r24, 0x06	; 6
    4992:	17 c0       	rjmp	.+46     	; 0x49c2 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4994:	d8 01       	movw	r26, r16
    4996:	16 96       	adiw	r26, 0x06	; 6
    4998:	8c 91       	ld	r24, X
    499a:	16 97       	sbiw	r26, 0x06	; 6
    499c:	86 8b       	std	Z+22, r24	; 0x16
    499e:	17 96       	adiw	r26, 0x07	; 7
    49a0:	8c 91       	ld	r24, X
    49a2:	17 97       	sbiw	r26, 0x07	; 7
    49a4:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    49a6:	14 96       	adiw	r26, 0x04	; 4
    49a8:	8c 91       	ld	r24, X
    49aa:	14 97       	sbiw	r26, 0x04	; 4
    49ac:	80 8f       	std	Z+24, r24	; 0x18
    49ae:	15 96       	adiw	r26, 0x05	; 5
    49b0:	8c 91       	ld	r24, X
    49b2:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    49b4:	ed 85       	ldd	r30, Y+13	; 0x0d
    49b6:	fe 85       	ldd	r31, Y+14	; 0x0e
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    49bc:	cf 01       	movw	r24, r30
    49be:	0e 94 57 0a 	call	0x14ae	; 0x14ae <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    49c2:	a4 96       	adiw	r28, 0x24	; 36
    49c4:	cd bf       	out	0x3d, r28	; 61
    49c6:	de bf       	out	0x3e, r29	; 62
    49c8:	cf 91       	pop	r28
    49ca:	df 91       	pop	r29
    49cc:	1f 91       	pop	r17
    49ce:	0f 91       	pop	r16
    49d0:	ff 90       	pop	r15
    49d2:	ef 90       	pop	r14
    49d4:	08 95       	ret

000049d6 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    49d6:	cf 92       	push	r12
    49d8:	df 92       	push	r13
    49da:	ef 92       	push	r14
    49dc:	ff 92       	push	r15
    49de:	0f 93       	push	r16
    49e0:	1f 93       	push	r17
    49e2:	df 93       	push	r29
    49e4:	cf 93       	push	r28
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
    49ea:	cf 54       	subi	r28, 0x4F	; 79
    49ec:	d0 40       	sbci	r29, 0x00	; 0
    49ee:	cd bf       	out	0x3d, r28	; 61
    49f0:	de bf       	out	0x3e, r29	; 62
    49f2:	8e 01       	movw	r16, r28
    49f4:	02 5b       	subi	r16, 0xB2	; 178
    49f6:	1f 4f       	sbci	r17, 0xFF	; 255
    49f8:	d8 01       	movw	r26, r16
    49fa:	8d 93       	st	X+, r24
    49fc:	9c 93       	st	X, r25
    49fe:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    4a00:	ce 01       	movw	r24, r28
    4a02:	01 96       	adiw	r24, 0x01	; 1
    4a04:	8e ab       	std	Y+54, r24	; 0x36
    4a06:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    4a08:	82 e2       	ldi	r24, 0x22	; 34
    4a0a:	e8 2e       	mov	r14, r24
    4a0c:	f1 2c       	mov	r15, r1
    4a0e:	ec 0e       	add	r14, r28
    4a10:	fd 1e       	adc	r15, r29
    4a12:	c8 01       	movw	r24, r16
    4a14:	b7 01       	movw	r22, r14
    4a16:	41 e0       	ldi	r20, 0x01	; 1
    4a18:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <chk_mounted>
	if (res == FR_OK) {
    4a1c:	88 23       	and	r24, r24
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <f_rename+0x4c>
    4a20:	f4 c0       	rjmp	.+488    	; 0x4c0a <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4a22:	8a a1       	ldd	r24, Y+34	; 0x22
    4a24:	9b a1       	ldd	r25, Y+35	; 0x23
    4a26:	88 af       	std	Y+56, r24	; 0x38
    4a28:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    4a2a:	f8 01       	movw	r30, r16
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	c7 01       	movw	r24, r14
    4a32:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4a36:	88 23       	and	r24, r24
    4a38:	09 f0       	breq	.+2      	; 0x4a3c <f_rename+0x66>
    4a3a:	e7 c0       	rjmp	.+462    	; 0x4c0a <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    4a3c:	8c a9       	ldd	r24, Y+52	; 0x34
    4a3e:	9d a9       	ldd	r25, Y+53	; 0x35
    4a40:	00 97       	sbiw	r24, 0x00	; 0
    4a42:	11 f4       	brne	.+4      	; 0x4a48 <f_rename+0x72>
    4a44:	84 e0       	ldi	r24, 0x04	; 4
    4a46:	e1 c0       	rjmp	.+450    	; 0x4c0a <f_rename+0x234>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	3d 96       	adiw	r30, 0x0d	; 13
    4a4e:	04 c0       	rjmp	.+8      	; 0x4a58 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4a50:	1a 96       	adiw	r26, 0x0a	; 10
    4a52:	8c 91       	ld	r24, X
    4a54:	1a 97       	sbiw	r26, 0x0a	; 10
    4a56:	81 93       	st	Z+, r24
    4a58:	11 96       	adiw	r26, 0x01	; 1
    4a5a:	ee 15       	cp	r30, r14
    4a5c:	ff 05       	cpc	r31, r15
    4a5e:	c1 f7       	brne	.-16     	; 0x4a50 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4a60:	de 01       	movw	r26, r28
    4a62:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    4a64:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4a66:	9d 01       	movw	r18, r26
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <f_rename+0x98>
    4a6a:	81 91       	ld	r24, Z+
    4a6c:	8d 93       	st	X+, r24
    4a6e:	e2 17       	cp	r30, r18
    4a70:	f3 07       	cpc	r31, r19
    4a72:	d9 f7       	brne	.-10     	; 0x4a6a <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    4a74:	8e 01       	movw	r16, r28
    4a76:	08 5c       	subi	r16, 0xC8	; 200
    4a78:	1f 4f       	sbci	r17, 0xFF	; 255
    4a7a:	c8 01       	movw	r24, r16
    4a7c:	b6 01       	movw	r22, r12
    4a7e:	0e 94 18 12 	call	0x2430	; 0x2430 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    4a82:	88 23       	and	r24, r24
    4a84:	11 f4       	brne	.+4      	; 0x4a8a <f_rename+0xb4>
    4a86:	88 e0       	ldi	r24, 0x08	; 8
    4a88:	c0 c0       	rjmp	.+384    	; 0x4c0a <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    4a8a:	84 30       	cpi	r24, 0x04	; 4
    4a8c:	09 f0       	breq	.+2      	; 0x4a90 <f_rename+0xba>
    4a8e:	bd c0       	rjmp	.+378    	; 0x4c0a <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    4a90:	c8 01       	movw	r24, r16
    4a92:	0e 94 14 11 	call	0x2228	; 0x2228 <dir_register>
		if (res == FR_OK) {
    4a96:	88 23       	and	r24, r24
    4a98:	09 f0       	breq	.+2      	; 0x4a9c <f_rename+0xc6>
    4a9a:	b7 c0       	rjmp	.+366    	; 0x4c0a <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e6 5b       	subi	r30, 0xB6	; 182
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	40 81       	ld	r20, Z
    4aa4:	51 81       	ldd	r21, Z+1	; 0x01
    4aa6:	da 01       	movw	r26, r20
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	3f 96       	adiw	r30, 0x0f	; 15
    4aac:	04 c0       	rjmp	.+8      	; 0x4ab6 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4aae:	81 91       	ld	r24, Z+
    4ab0:	1c 96       	adiw	r26, 0x0c	; 12
    4ab2:	8c 93       	st	X, r24
    4ab4:	1c 97       	sbiw	r26, 0x0c	; 12
    4ab6:	11 96       	adiw	r26, 0x01	; 1
    4ab8:	ee 15       	cp	r30, r14
    4aba:	ff 05       	cpc	r31, r15
    4abc:	c1 f7       	brne	.-16     	; 0x4aae <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    4abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ac0:	80 62       	ori	r24, 0x20	; 32
    4ac2:	da 01       	movw	r26, r20
    4ac4:	1b 96       	adiw	r26, 0x0b	; 11
    4ac6:	8c 93       	st	X, r24
    4ac8:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    4aca:	ea a1       	ldd	r30, Y+34	; 0x22
    4acc:	fb a1       	ldd	r31, Y+35	; 0x23
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4ad2:	1b 96       	adiw	r26, 0x0b	; 11
    4ad4:	8c 91       	ld	r24, X
    4ad6:	1b 97       	sbiw	r26, 0x0b	; 11
    4ad8:	84 ff       	sbrs	r24, 4
    4ada:	8b c0       	rjmp	.+278    	; 0x4bf2 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    4adc:	c8 ac       	ldd	r12, Y+56	; 0x38
    4ade:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4ae0:	5a 96       	adiw	r26, 0x1a	; 26
    4ae2:	2c 91       	ld	r18, X
    4ae4:	5a 97       	sbiw	r26, 0x1a	; 26
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	54 96       	adiw	r26, 0x14	; 20
    4aea:	8c 91       	ld	r24, X
    4aec:	54 97       	sbiw	r26, 0x14	; 20
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	28 2b       	or	r18, r24
    4af2:	39 2b       	or	r19, r25
    4af4:	55 96       	adiw	r26, 0x15	; 21
    4af6:	9c 91       	ld	r25, X
    4af8:	55 97       	sbiw	r26, 0x15	; 21
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	28 2b       	or	r18, r24
    4afe:	39 2b       	or	r19, r25
    4b00:	5b 96       	adiw	r26, 0x1b	; 27
    4b02:	9c 91       	ld	r25, X
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	28 2b       	or	r18, r24
    4b08:	39 2b       	or	r19, r25
    4b0a:	79 01       	movw	r14, r18
    4b0c:	00 e0       	ldi	r16, 0x00	; 0
    4b0e:	10 e0       	ldi	r17, 0x00	; 0
    4b10:	8e ef       	ldi	r24, 0xFE	; 254
    4b12:	9f ef       	ldi	r25, 0xFF	; 255
    4b14:	af ef       	ldi	r26, 0xFF	; 255
    4b16:	bf ef       	ldi	r27, 0xFF	; 255
    4b18:	e8 0e       	add	r14, r24
    4b1a:	f9 1e       	adc	r15, r25
    4b1c:	0a 1f       	adc	r16, r26
    4b1e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4b20:	f6 01       	movw	r30, r12
    4b22:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b24:	93 8d       	ldd	r25, Z+27	; 0x1b
    4b26:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4b28:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4b2a:	02 97       	sbiw	r24, 0x02	; 2
    4b2c:	a1 09       	sbc	r26, r1
    4b2e:	b1 09       	sbc	r27, r1
    4b30:	e8 16       	cp	r14, r24
    4b32:	f9 06       	cpc	r15, r25
    4b34:	0a 07       	cpc	r16, r26
    4b36:	1b 07       	cpc	r17, r27
    4b38:	08 f0       	brcs	.+2      	; 0x4b3c <f_rename+0x166>
    4b3a:	66 c0       	rjmp	.+204    	; 0x4c08 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4b3c:	22 81       	ldd	r18, Z+2	; 0x02
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	40 e0       	ldi	r20, 0x00	; 0
    4b42:	50 e0       	ldi	r21, 0x00	; 0
    4b44:	c8 01       	movw	r24, r16
    4b46:	b7 01       	movw	r22, r14
    4b48:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    4b4c:	ab 01       	movw	r20, r22
    4b4e:	bc 01       	movw	r22, r24
    4b50:	f6 01       	movw	r30, r12
    4b52:	86 a1       	ldd	r24, Z+38	; 0x26
    4b54:	97 a1       	ldd	r25, Z+39	; 0x27
    4b56:	a0 a5       	ldd	r26, Z+40	; 0x28
    4b58:	b1 a5       	ldd	r27, Z+41	; 0x29
    4b5a:	48 0f       	add	r20, r24
    4b5c:	59 1f       	adc	r21, r25
    4b5e:	6a 1f       	adc	r22, r26
    4b60:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4b62:	41 15       	cp	r20, r1
    4b64:	51 05       	cpc	r21, r1
    4b66:	61 05       	cpc	r22, r1
    4b68:	71 05       	cpc	r23, r1
    4b6a:	09 f4       	brne	.+2      	; 0x4b6e <f_rename+0x198>
    4b6c:	4d c0       	rjmp	.+154    	; 0x4c08 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4b6e:	c6 01       	movw	r24, r12
    4b70:	0e 94 de 09 	call	0x13bc	; 0x13bc <move_window>
					dir = dj_new.fs->win+32;
    4b74:	a8 ad       	ldd	r26, Y+56	; 0x38
    4b76:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4b78:	88 23       	and	r24, r24
    4b7a:	09 f0       	breq	.+2      	; 0x4b7e <f_rename+0x1a8>
    4b7c:	46 c0       	rjmp	.+140    	; 0x4c0a <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4b7e:	bd 01       	movw	r22, r26
    4b80:	62 5b       	subi	r22, 0xB2	; 178
    4b82:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4b84:	fb 01       	movw	r30, r22
    4b86:	81 81       	ldd	r24, Z+1	; 0x01
    4b88:	8e 32       	cpi	r24, 0x2E	; 46
    4b8a:	99 f5       	brne	.+102    	; 0x4bf2 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4b8c:	8c 91       	ld	r24, X
    4b8e:	83 30       	cpi	r24, 0x03	; 3
    4b90:	b1 f4       	brne	.+44     	; 0x4bbe <f_rename+0x1e8>
    4b92:	fe 01       	movw	r30, r28
    4b94:	fe 96       	adiw	r30, 0x3e	; 62
    4b96:	20 81       	ld	r18, Z
    4b98:	31 81       	ldd	r19, Z+1	; 0x01
    4b9a:	42 81       	ldd	r20, Z+2	; 0x02
    4b9c:	53 81       	ldd	r21, Z+3	; 0x03
    4b9e:	92 96       	adiw	r26, 0x22	; 34
    4ba0:	8d 91       	ld	r24, X+
    4ba2:	9d 91       	ld	r25, X+
    4ba4:	0d 90       	ld	r0, X+
    4ba6:	bc 91       	ld	r27, X
    4ba8:	a0 2d       	mov	r26, r0
    4baa:	28 17       	cp	r18, r24
    4bac:	39 07       	cpc	r19, r25
    4bae:	4a 07       	cpc	r20, r26
    4bb0:	5b 07       	cpc	r21, r27
    4bb2:	29 f4       	brne	.+10     	; 0x4bbe <f_rename+0x1e8>
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e0       	ldi	r20, 0x00	; 0
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	06 c0       	rjmp	.+12     	; 0x4bca <f_rename+0x1f4>
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	fe 96       	adiw	r30, 0x3e	; 62
    4bc2:	20 81       	ld	r18, Z
    4bc4:	31 81       	ldd	r19, Z+1	; 0x01
    4bc6:	42 81       	ldd	r20, Z+2	; 0x02
    4bc8:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4bca:	db 01       	movw	r26, r22
    4bcc:	5a 96       	adiw	r26, 0x1a	; 26
    4bce:	2c 93       	st	X, r18
    4bd0:	5a 97       	sbiw	r26, 0x1a	; 26
    4bd2:	83 2f       	mov	r24, r19
    4bd4:	99 27       	eor	r25, r25
    4bd6:	5b 96       	adiw	r26, 0x1b	; 27
    4bd8:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4bda:	ca 01       	movw	r24, r20
    4bdc:	aa 27       	eor	r26, r26
    4bde:	bb 27       	eor	r27, r27
    4be0:	fb 01       	movw	r30, r22
    4be2:	84 8b       	std	Z+20, r24	; 0x14
    4be4:	89 2f       	mov	r24, r25
    4be6:	99 27       	eor	r25, r25
    4be8:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4bea:	e8 ad       	ldd	r30, Y+56	; 0x38
    4bec:	f9 ad       	ldd	r31, Y+57	; 0x39
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	82 96       	adiw	r24, 0x22	; 34
    4bf6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <dir_remove>
				if (res == FR_OK)
    4bfa:	88 23       	and	r24, r24
    4bfc:	31 f4       	brne	.+12     	; 0x4c0a <f_rename+0x234>
					res = sync(dj_old.fs);
    4bfe:	8a a1       	ldd	r24, Y+34	; 0x22
    4c00:	9b a1       	ldd	r25, Y+35	; 0x23
    4c02:	0e 94 57 0a 	call	0x14ae	; 0x14ae <sync>
    4c06:	01 c0       	rjmp	.+2      	; 0x4c0a <f_rename+0x234>
    4c08:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4c0a:	c1 5b       	subi	r28, 0xB1	; 177
    4c0c:	df 4f       	sbci	r29, 0xFF	; 255
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	cf 91       	pop	r28
    4c14:	df 91       	pop	r29
    4c16:	1f 91       	pop	r17
    4c18:	0f 91       	pop	r16
    4c1a:	ff 90       	pop	r15
    4c1c:	ef 90       	pop	r14
    4c1e:	df 90       	pop	r13
    4c20:	cf 90       	pop	r12
    4c22:	08 95       	ret

00004c24 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4c24:	2f 92       	push	r2
    4c26:	3f 92       	push	r3
    4c28:	4f 92       	push	r4
    4c2a:	5f 92       	push	r5
    4c2c:	6f 92       	push	r6
    4c2e:	7f 92       	push	r7
    4c30:	8f 92       	push	r8
    4c32:	9f 92       	push	r9
    4c34:	af 92       	push	r10
    4c36:	bf 92       	push	r11
    4c38:	cf 92       	push	r12
    4c3a:	df 92       	push	r13
    4c3c:	ef 92       	push	r14
    4c3e:	ff 92       	push	r15
    4c40:	0f 93       	push	r16
    4c42:	1f 93       	push	r17
    4c44:	df 93       	push	r29
    4c46:	cf 93       	push	r28
    4c48:	cd b7       	in	r28, 0x3d	; 61
    4c4a:	de b7       	in	r29, 0x3e	; 62
    4c4c:	ae 97       	sbiw	r28, 0x2e	; 46
    4c4e:	cd bf       	out	0x3d, r28	; 61
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	36 2e       	mov	r3, r22
    4c54:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4c56:	82 30       	cpi	r24, 0x02	; 2
    4c58:	10 f0       	brcs	.+4      	; 0x4c5e <f_mkfs+0x3a>
    4c5a:	8b e0       	ldi	r24, 0x0B	; 11
    4c5c:	16 c5       	rjmp	.+2604   	; 0x568a <f_mkfs+0xa66>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4c5e:	21 e0       	ldi	r18, 0x01	; 1
    4c60:	26 17       	cp	r18, r22
    4c62:	08 f4       	brcc	.+2      	; 0x4c66 <f_mkfs+0x42>
    4c64:	0f c5       	rjmp	.+2590   	; 0x5684 <f_mkfs+0xa60>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4c66:	a8 2f       	mov	r26, r24
    4c68:	b0 e0       	ldi	r27, 0x00	; 0
    4c6a:	aa 0f       	add	r26, r26
    4c6c:	bb 1f       	adc	r27, r27
    4c6e:	fd 01       	movw	r30, r26
    4c70:	e3 53       	subi	r30, 0x33	; 51
    4c72:	f8 4d       	sbci	r31, 0xD8	; 216
    4c74:	c0 80       	ld	r12, Z
    4c76:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4c78:	c1 14       	cp	r12, r1
    4c7a:	d1 04       	cpc	r13, r1
    4c7c:	11 f4       	brne	.+4      	; 0x4c82 <f_mkfs+0x5e>
    4c7e:	8c e0       	ldi	r24, 0x0C	; 12
    4c80:	04 c5       	rjmp	.+2568   	; 0x568a <f_mkfs+0xa66>
	fs->fs_type = 0;
    4c82:	f6 01       	movw	r30, r12
    4c84:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4c86:	ac 53       	subi	r26, 0x3C	; 60
    4c88:	bd 4d       	sbci	r27, 0xDD	; 221
    4c8a:	fc 91       	ld	r31, X
    4c8c:	fb 8b       	std	Y+19, r31	; 0x13

	/* Get disk statics */
	stat = disk_initialize(drv);
    4c8e:	8f 2f       	mov	r24, r31
    4c90:	0e 94 ba 05 	call	0xb74	; 0xb74 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4c94:	80 ff       	sbrs	r24, 0
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <f_mkfs+0x78>
    4c98:	83 e0       	ldi	r24, 0x03	; 3
    4c9a:	f7 c4       	rjmp	.+2542   	; 0x568a <f_mkfs+0xa66>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4c9c:	82 ff       	sbrs	r24, 2
    4c9e:	02 c0       	rjmp	.+4      	; 0x4ca4 <f_mkfs+0x80>
    4ca0:	8a e0       	ldi	r24, 0x0A	; 10
    4ca2:	f3 c4       	rjmp	.+2534   	; 0x568a <f_mkfs+0xa66>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	ae 01       	movw	r20, r28
    4caa:	4f 5f       	subi	r20, 0xFF	; 255
    4cac:	5f 4f       	sbci	r21, 0xFF	; 255
    4cae:	0e 94 7f 07 	call	0xefe	; 0xefe <disk_ioctl>
    4cb2:	88 23       	and	r24, r24
    4cb4:	09 f0       	breq	.+2      	; 0x4cb8 <f_mkfs+0x94>
    4cb6:	e6 c4       	rjmp	.+2508   	; 0x5684 <f_mkfs+0xa60>
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	ab 81       	ldd	r26, Y+3	; 0x03
    4cbe:	bc 81       	ldd	r27, Y+4	; 0x04
    4cc0:	80 3d       	cpi	r24, 0xD0	; 208
    4cc2:	27 e0       	ldi	r18, 0x07	; 7
    4cc4:	92 07       	cpc	r25, r18
    4cc6:	20 e0       	ldi	r18, 0x00	; 0
    4cc8:	a2 07       	cpc	r26, r18
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	b2 07       	cpc	r27, r18
    4cce:	08 f4       	brcc	.+2      	; 0x4cd2 <f_mkfs+0xae>
    4cd0:	d9 c4       	rjmp	.+2482   	; 0x5684 <f_mkfs+0xa60>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4cd2:	81 50       	subi	r24, 0x01	; 1
    4cd4:	90 40       	sbci	r25, 0x00	; 0
    4cd6:	a0 4d       	sbci	r26, 0xD0	; 208
    4cd8:	b7 40       	sbci	r27, 0x07	; 7
    4cda:	40 f0       	brcs	.+16     	; 0x4cec <f_mkfs+0xc8>
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	a0 ed       	ldi	r26, 0xD0	; 208
    4ce2:	b7 e0       	ldi	r27, 0x07	; 7
    4ce4:	89 83       	std	Y+1, r24	; 0x01
    4ce6:	9a 83       	std	Y+2, r25	; 0x02
    4ce8:	ab 83       	std	Y+3, r26	; 0x03
    4cea:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4cec:	33 20       	and	r3, r3
    4cee:	29 f0       	breq	.+10     	; 0x4cfa <f_mkfs+0xd6>
    4cf0:	1d 8e       	std	Y+29, r1	; 0x1d
    4cf2:	1e 8e       	std	Y+30, r1	; 0x1e
    4cf4:	1f 8e       	std	Y+31, r1	; 0x1f
    4cf6:	18 a2       	std	Y+32, r1	; 0x20
    4cf8:	08 c0       	rjmp	.+16     	; 0x4d0a <f_mkfs+0xe6>
    4cfa:	8f e3       	ldi	r24, 0x3F	; 63
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	a0 e0       	ldi	r26, 0x00	; 0
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	8d 8f       	std	Y+29, r24	; 0x1d
    4d04:	9e 8f       	std	Y+30, r25	; 0x1e
    4d06:	af 8f       	std	Y+31, r26	; 0x1f
    4d08:	b8 a3       	std	Y+32, r27	; 0x20
	n_part -= b_part;
    4d0a:	89 80       	ldd	r8, Y+1	; 0x01
    4d0c:	9a 80       	ldd	r9, Y+2	; 0x02
    4d0e:	ab 80       	ldd	r10, Y+3	; 0x03
    4d10:	bc 80       	ldd	r11, Y+4	; 0x04
    4d12:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4d14:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4d16:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4d18:	58 a1       	ldd	r21, Y+32	; 0x20
    4d1a:	82 1a       	sub	r8, r18
    4d1c:	93 0a       	sbc	r9, r19
    4d1e:	a4 0a       	sbc	r10, r20
    4d20:	b5 0a       	sbc	r11, r21
    4d22:	89 82       	std	Y+1, r8	; 0x01
    4d24:	9a 82       	std	Y+2, r9	; 0x02
    4d26:	ab 82       	std	Y+3, r10	; 0x03
    4d28:	bc 82       	std	Y+4, r11	; 0x04
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	92 e0       	ldi	r25, 0x02	; 2
    4d2e:	a0 e0       	ldi	r26, 0x00	; 0
    4d30:	b0 e0       	ldi	r27, 0x00	; 0
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4d36:	73 01       	movw	r14, r6
    4d38:	00 e0       	ldi	r16, 0x00	; 0
    4d3a:	10 e0       	ldi	r17, 0x00	; 0
    4d3c:	09 c0       	rjmp	.+18     	; 0x4d50 <f_mkfs+0x12c>
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	aa 1f       	adc	r26, r26
    4d44:	bb 1f       	adc	r27, r27
    4d46:	2f 5f       	subi	r18, 0xFF	; 255
    4d48:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4a:	27 30       	cpi	r18, 0x07	; 7
    4d4c:	31 05       	cpc	r19, r1
    4d4e:	31 f0       	breq	.+12     	; 0x4d5c <f_mkfs+0x138>
    4d50:	8e 15       	cp	r24, r14
    4d52:	9f 05       	cpc	r25, r15
    4d54:	a0 07       	cpc	r26, r16
    4d56:	b1 07       	cpc	r27, r17
    4d58:	91 f7       	brne	.-28     	; 0x4d3e <f_mkfs+0x11a>
    4d5a:	05 c0       	rjmp	.+10     	; 0x4d66 <f_mkfs+0x142>
	if (d != allocsize) allocsize = 0;
    4d5c:	8e 15       	cp	r24, r14
    4d5e:	9f 05       	cpc	r25, r15
    4d60:	a0 07       	cpc	r26, r16
    4d62:	b1 07       	cpc	r27, r17
    4d64:	19 f4       	brne	.+6      	; 0x4d6c <f_mkfs+0x148>
	if (!allocsize) {					/* Auto selection of cluster size */
    4d66:	61 14       	cp	r6, r1
    4d68:	71 04       	cpc	r7, r1
    4d6a:	11 f5       	brne	.+68     	; 0x4db0 <f_mkfs+0x18c>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4d6c:	e6 e2       	ldi	r30, 0x26	; 38
    4d6e:	f7 e2       	ldi	r31, 0x27	; 39
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e0       	ldi	r20, 0x00	; 0
    4d76:	50 e0       	ldi	r21, 0x00	; 0
    4d78:	81 91       	ld	r24, Z+
    4d7a:	91 91       	ld	r25, Z+
    4d7c:	a1 91       	ld	r26, Z+
    4d7e:	b1 91       	ld	r27, Z+
    4d80:	b9 01       	movw	r22, r18
    4d82:	14 2f       	mov	r17, r20
    4d84:	05 2f       	mov	r16, r21
    4d86:	2f 5f       	subi	r18, 0xFF	; 255
    4d88:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8a:	4f 4f       	sbci	r20, 0xFF	; 255
    4d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8e:	88 16       	cp	r8, r24
    4d90:	99 06       	cpc	r9, r25
    4d92:	aa 06       	cpc	r10, r26
    4d94:	bb 06       	cpc	r11, r27
    4d96:	80 f3       	brcs	.-32     	; 0x4d78 <f_mkfs+0x154>
    4d98:	cb 01       	movw	r24, r22
    4d9a:	6d 83       	std	Y+5, r22	; 0x05
    4d9c:	9e 83       	std	Y+6, r25	; 0x06
    4d9e:	1f 83       	std	Y+7, r17	; 0x07
    4da0:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4da2:	fb 01       	movw	r30, r22
    4da4:	ee 0f       	add	r30, r30
    4da6:	ff 1f       	adc	r31, r31
    4da8:	e0 5f       	subi	r30, 0xF0	; 240
    4daa:	f8 4d       	sbci	r31, 0xD8	; 216
    4dac:	60 80       	ld	r6, Z
    4dae:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	63 16       	cp	r6, r19
    4db4:	32 e0       	ldi	r19, 0x02	; 2
    4db6:	73 06       	cpc	r7, r19
    4db8:	18 f4       	brcc	.+6      	; 0x4dc0 <f_mkfs+0x19c>
    4dba:	61 2c       	mov	r6, r1
    4dbc:	22 e0       	ldi	r18, 0x02	; 2
    4dbe:	72 2e       	mov	r7, r18

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4dc0:	a3 01       	movw	r20, r6
    4dc2:	45 2f       	mov	r20, r21
    4dc4:	55 27       	eor	r21, r21
    4dc6:	46 95       	lsr	r20
    4dc8:	49 8b       	std	Y+17, r20	; 0x11
    4dca:	5a 8b       	std	Y+18, r21	; 0x12

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4dcc:	ca 01       	movw	r24, r20
    4dce:	a0 e0       	ldi	r26, 0x00	; 0
    4dd0:	b0 e0       	ldi	r27, 0x00	; 0
    4dd2:	8d 87       	std	Y+13, r24	; 0x0d
    4dd4:	9e 87       	std	Y+14, r25	; 0x0e
    4dd6:	af 87       	std	Y+15, r26	; 0x0f
    4dd8:	b8 8b       	std	Y+16, r27	; 0x10
    4dda:	c5 01       	movw	r24, r10
    4ddc:	b4 01       	movw	r22, r8
    4dde:	2d 85       	ldd	r18, Y+13	; 0x0d
    4de0:	3e 85       	ldd	r19, Y+14	; 0x0e
    4de2:	4f 85       	ldd	r20, Y+15	; 0x0f
    4de4:	58 89       	ldd	r21, Y+16	; 0x10
    4de6:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    4dea:	c9 01       	movw	r24, r18
    4dec:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4dee:	85 3f       	cpi	r24, 0xF5	; 245
    4df0:	ef e0       	ldi	r30, 0x0F	; 15
    4df2:	9e 07       	cpc	r25, r30
    4df4:	e0 e0       	ldi	r30, 0x00	; 0
    4df6:	ae 07       	cpc	r26, r30
    4df8:	e0 e0       	ldi	r30, 0x00	; 0
    4dfa:	be 07       	cpc	r27, r30
    4dfc:	08 f4       	brcc	.+2      	; 0x4e00 <f_mkfs+0x1dc>
    4dfe:	5b c4       	rjmp	.+2230   	; 0x56b6 <f_mkfs+0xa92>
    4e00:	23 2d       	mov	r18, r3
    4e02:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4e04:	85 3f       	cpi	r24, 0xF5	; 245
    4e06:	ff ef       	ldi	r31, 0xFF	; 255
    4e08:	9f 07       	cpc	r25, r31
    4e0a:	f0 e0       	ldi	r31, 0x00	; 0
    4e0c:	af 07       	cpc	r26, r31
    4e0e:	f0 e0       	ldi	r31, 0x00	; 0
    4e10:	bf 07       	cpc	r27, r31
    4e12:	50 f5       	brcc	.+84     	; 0x4e68 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4e14:	7c 01       	movw	r14, r24
    4e16:	8d 01       	movw	r16, r26
    4e18:	ee 0c       	add	r14, r14
    4e1a:	ff 1c       	adc	r15, r15
    4e1c:	00 1f       	adc	r16, r16
    4e1e:	11 1f       	adc	r17, r17
    4e20:	83 e0       	ldi	r24, 0x03	; 3
    4e22:	92 e0       	ldi	r25, 0x02	; 2
    4e24:	a0 e0       	ldi	r26, 0x00	; 0
    4e26:	b0 e0       	ldi	r27, 0x00	; 0
    4e28:	e8 0e       	add	r14, r24
    4e2a:	f9 1e       	adc	r15, r25
    4e2c:	0a 1f       	adc	r16, r26
    4e2e:	1b 1f       	adc	r17, r27
    4e30:	b9 e0       	ldi	r27, 0x09	; 9
    4e32:	16 95       	lsr	r17
    4e34:	07 95       	ror	r16
    4e36:	f7 94       	ror	r15
    4e38:	e7 94       	ror	r14
    4e3a:	ba 95       	dec	r27
    4e3c:	d1 f7       	brne	.-12     	; 0x4e32 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4e3e:	2f 5f       	subi	r18, 0xFF	; 255
    4e40:	3f 4f       	sbci	r19, 0xFF	; 255
    4e42:	c9 01       	movw	r24, r18
    4e44:	aa 27       	eor	r26, r26
    4e46:	97 fd       	sbrc	r25, 7
    4e48:	a0 95       	com	r26
    4e4a:	ba 2f       	mov	r27, r26
    4e4c:	89 8f       	std	Y+25, r24	; 0x19
    4e4e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e50:	ab 8f       	std	Y+27, r26	; 0x1b
    4e52:	bc 8f       	std	Y+28, r27	; 0x1c
    4e54:	20 e2       	ldi	r18, 0x20	; 32
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	40 e0       	ldi	r20, 0x00	; 0
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	2d 8b       	std	Y+21, r18	; 0x15
    4e5e:	3e 8b       	std	Y+22, r19	; 0x16
    4e60:	4f 8b       	std	Y+23, r20	; 0x17
    4e62:	58 8f       	std	Y+24, r21	; 0x18
    4e64:	32 e0       	ldi	r19, 0x02	; 2
    4e66:	2a c0       	rjmp	.+84     	; 0x4ebc <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4e68:	7c 01       	movw	r14, r24
    4e6a:	8d 01       	movw	r16, r26
    4e6c:	a2 e0       	ldi	r26, 0x02	; 2
    4e6e:	ee 0c       	add	r14, r14
    4e70:	ff 1c       	adc	r15, r15
    4e72:	00 1f       	adc	r16, r16
    4e74:	11 1f       	adc	r17, r17
    4e76:	aa 95       	dec	r26
    4e78:	d1 f7       	brne	.-12     	; 0x4e6e <f_mkfs+0x24a>
    4e7a:	87 e0       	ldi	r24, 0x07	; 7
    4e7c:	92 e0       	ldi	r25, 0x02	; 2
    4e7e:	a0 e0       	ldi	r26, 0x00	; 0
    4e80:	b0 e0       	ldi	r27, 0x00	; 0
    4e82:	e8 0e       	add	r14, r24
    4e84:	f9 1e       	adc	r15, r25
    4e86:	0a 1f       	adc	r16, r26
    4e88:	1b 1f       	adc	r17, r27
    4e8a:	f9 e0       	ldi	r31, 0x09	; 9
    4e8c:	16 95       	lsr	r17
    4e8e:	07 95       	ror	r16
    4e90:	f7 94       	ror	r15
    4e92:	e7 94       	ror	r14
    4e94:	fa 95       	dec	r31
    4e96:	d1 f7       	brne	.-12     	; 0x4e8c <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4e98:	81 e2       	ldi	r24, 0x21	; 33
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	82 1b       	sub	r24, r18
    4e9e:	93 0b       	sbc	r25, r19
    4ea0:	9c 01       	movw	r18, r24
    4ea2:	44 27       	eor	r20, r20
    4ea4:	37 fd       	sbrc	r19, 7
    4ea6:	40 95       	com	r20
    4ea8:	54 2f       	mov	r21, r20
    4eaa:	29 8f       	std	Y+25, r18	; 0x19
    4eac:	3a 8f       	std	Y+26, r19	; 0x1a
    4eae:	4b 8f       	std	Y+27, r20	; 0x1b
    4eb0:	5c 8f       	std	Y+28, r21	; 0x1c
    4eb2:	1d 8a       	std	Y+21, r1	; 0x15
    4eb4:	1e 8a       	std	Y+22, r1	; 0x16
    4eb6:	1f 8a       	std	Y+23, r1	; 0x17
    4eb8:	18 8e       	std	Y+24, r1	; 0x18
    4eba:	33 e0       	ldi	r19, 0x03	; 3
    4ebc:	3a a3       	std	Y+34, r19	; 0x22
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec0:	63 e0       	ldi	r22, 0x03	; 3
    4ec2:	ae 01       	movw	r20, r28
    4ec4:	4b 5f       	subi	r20, 0xFB	; 251
    4ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec8:	0e 94 7f 07 	call	0xefe	; 0xefe <disk_ioctl>
    4ecc:	88 23       	and	r24, r24
    4ece:	09 f0       	breq	.+2      	; 0x4ed2 <f_mkfs+0x2ae>
    4ed0:	d9 c3       	rjmp	.+1970   	; 0x5684 <f_mkfs+0xa60>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4ed2:	89 8d       	ldd	r24, Y+25	; 0x19
    4ed4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ed6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4ed8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4eda:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4edc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4ede:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4ee0:	58 a1       	ldd	r21, Y+32	; 0x20
    4ee2:	82 0f       	add	r24, r18
    4ee4:	93 1f       	adc	r25, r19
    4ee6:	a4 1f       	adc	r26, r20
    4ee8:	b5 1f       	adc	r27, r21
    4eea:	89 87       	std	Y+9, r24	; 0x09
    4eec:	9a 87       	std	Y+10, r25	; 0x0a
    4eee:	ab 87       	std	Y+11, r26	; 0x0b
    4ef0:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4ef2:	2d 89       	ldd	r18, Y+21	; 0x15
    4ef4:	3e 89       	ldd	r19, Y+22	; 0x16
    4ef6:	4f 89       	ldd	r20, Y+23	; 0x17
    4ef8:	58 8d       	ldd	r21, Y+24	; 0x18
    4efa:	2e 0d       	add	r18, r14
    4efc:	3f 1d       	adc	r19, r15
    4efe:	40 1f       	adc	r20, r16
    4f00:	51 1f       	adc	r21, r17
    4f02:	28 0f       	add	r18, r24
    4f04:	39 1f       	adc	r19, r25
    4f06:	4a 1f       	adc	r20, r26
    4f08:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0e:	af 81       	ldd	r26, Y+7	; 0x07
    4f10:	b8 85       	ldd	r27, Y+8	; 0x08
    4f12:	4c 01       	movw	r8, r24
    4f14:	5d 01       	movw	r10, r26
    4f16:	08 94       	sec
    4f18:	81 08       	sbc	r8, r1
    4f1a:	91 08       	sbc	r9, r1
    4f1c:	a1 08       	sbc	r10, r1
    4f1e:	b1 08       	sbc	r11, r1
    4f20:	82 0e       	add	r8, r18
    4f22:	93 1e       	adc	r9, r19
    4f24:	a4 1e       	adc	r10, r20
    4f26:	b5 1e       	adc	r11, r21
    4f28:	b0 95       	com	r27
    4f2a:	a0 95       	com	r26
    4f2c:	90 95       	com	r25
    4f2e:	81 95       	neg	r24
    4f30:	9f 4f       	sbci	r25, 0xFF	; 255
    4f32:	af 4f       	sbci	r26, 0xFF	; 255
    4f34:	bf 4f       	sbci	r27, 0xFF	; 255
    4f36:	88 22       	and	r8, r24
    4f38:	99 22       	and	r9, r25
    4f3a:	aa 22       	and	r10, r26
    4f3c:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4f3e:	27 01       	movw	r4, r14
    4f40:	38 01       	movw	r6, r16
    4f42:	42 1a       	sub	r4, r18
    4f44:	53 0a       	sbc	r5, r19
    4f46:	64 0a       	sbc	r6, r20
    4f48:	75 0a       	sbc	r7, r21
    4f4a:	48 0c       	add	r4, r8
    4f4c:	59 1c       	adc	r5, r9
    4f4e:	6a 1c       	adc	r6, r10
    4f50:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4f52:	e9 80       	ldd	r14, Y+1	; 0x01
    4f54:	fa 80       	ldd	r15, Y+2	; 0x02
    4f56:	0b 81       	ldd	r16, Y+3	; 0x03
    4f58:	1c 81       	ldd	r17, Y+4	; 0x04
    4f5a:	c8 01       	movw	r24, r16
    4f5c:	b7 01       	movw	r22, r14
    4f5e:	29 8d       	ldd	r18, Y+25	; 0x19
    4f60:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4f62:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4f64:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4f66:	62 1b       	sub	r22, r18
    4f68:	73 0b       	sbc	r23, r19
    4f6a:	84 0b       	sbc	r24, r20
    4f6c:	95 0b       	sbc	r25, r21
    4f6e:	64 19       	sub	r22, r4
    4f70:	75 09       	sbc	r23, r5
    4f72:	86 09       	sbc	r24, r6
    4f74:	97 09       	sbc	r25, r7
    4f76:	2d 89       	ldd	r18, Y+21	; 0x15
    4f78:	3e 89       	ldd	r19, Y+22	; 0x16
    4f7a:	4f 89       	ldd	r20, Y+23	; 0x17
    4f7c:	58 8d       	ldd	r21, Y+24	; 0x18
    4f7e:	62 1b       	sub	r22, r18
    4f80:	73 0b       	sbc	r23, r19
    4f82:	84 0b       	sbc	r24, r20
    4f84:	95 0b       	sbc	r25, r21
    4f86:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f88:	3e 85       	ldd	r19, Y+14	; 0x0e
    4f8a:	4f 85       	ldd	r20, Y+15	; 0x0f
    4f8c:	58 89       	ldd	r21, Y+16	; 0x10
    4f8e:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    4f92:	2b a3       	std	Y+35, r18	; 0x23
    4f94:	3c a3       	std	Y+36, r19	; 0x24
    4f96:	4d a3       	std	Y+37, r20	; 0x25
    4f98:	5e a3       	std	Y+38, r21	; 0x26
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4f9a:	3a a1       	ldd	r19, Y+34	; 0x22
    4f9c:	32 30       	cpi	r19, 0x02	; 2
    4f9e:	51 f4       	brne	.+20     	; 0x4fb4 <f_mkfs+0x390>
    4fa0:	8b a1       	ldd	r24, Y+35	; 0x23
    4fa2:	9c a1       	ldd	r25, Y+36	; 0x24
    4fa4:	ad a1       	ldd	r26, Y+37	; 0x25
    4fa6:	be a1       	ldd	r27, Y+38	; 0x26
    4fa8:	85 5f       	subi	r24, 0xF5	; 245
    4faa:	9f 40       	sbci	r25, 0x0F	; 15
    4fac:	a0 40       	sbci	r26, 0x00	; 0
    4fae:	b0 40       	sbci	r27, 0x00	; 0
    4fb0:	70 f4       	brcc	.+28     	; 0x4fce <f_mkfs+0x3aa>
    4fb2:	68 c3       	rjmp	.+1744   	; 0x5684 <f_mkfs+0xa60>
    4fb4:	fa a1       	ldd	r31, Y+34	; 0x22
    4fb6:	f3 30       	cpi	r31, 0x03	; 3
    4fb8:	51 f4       	brne	.+20     	; 0x4fce <f_mkfs+0x3aa>
    4fba:	2b a1       	ldd	r18, Y+35	; 0x23
    4fbc:	3c a1       	ldd	r19, Y+36	; 0x24
    4fbe:	4d a1       	ldd	r20, Y+37	; 0x25
    4fc0:	5e a1       	ldd	r21, Y+38	; 0x26
    4fc2:	25 5f       	subi	r18, 0xF5	; 245
    4fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    4fc6:	40 40       	sbci	r20, 0x00	; 0
    4fc8:	50 40       	sbci	r21, 0x00	; 0
    4fca:	08 f4       	brcc	.+2      	; 0x4fce <f_mkfs+0x3aa>
    4fcc:	5b c3       	rjmp	.+1718   	; 0x5684 <f_mkfs+0xa60>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4fce:	8d 82       	std	Y+5, r8	; 0x05
    4fd0:	9e 82       	std	Y+6, r9	; 0x06
    4fd2:	af 82       	std	Y+7, r10	; 0x07
    4fd4:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4fd6:	33 20       	and	r3, r3
    4fd8:	19 f0       	breq	.+6      	; 0x4fe0 <f_mkfs+0x3bc>
    4fda:	80 ef       	ldi	r24, 0xF0	; 240
    4fdc:	8c 8b       	std	Y+20, r24	; 0x14
    4fde:	a2 c0       	rjmp	.+324    	; 0x5124 <f_mkfs+0x500>
		DWORD n_disk = b_part + n_part;
    4fe0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4fe2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4fe4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4fe6:	78 a1       	ldd	r23, Y+32	; 0x20
    4fe8:	4e 0d       	add	r20, r14
    4fea:	5f 1d       	adc	r21, r15
    4fec:	60 1f       	adc	r22, r16
    4fee:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4ff0:	ee e2       	ldi	r30, 0x2E	; 46
    4ff2:	ee 2e       	mov	r14, r30
    4ff4:	f1 2c       	mov	r15, r1
    4ff6:	ec 0c       	add	r14, r12
    4ff8:	fd 1c       	adc	r15, r13
    4ffa:	f7 01       	movw	r30, r14
    4ffc:	20 e0       	ldi	r18, 0x00	; 0
    4ffe:	32 e0       	ldi	r19, 0x02	; 2
    5000:	01 c0       	rjmp	.+2      	; 0x5004 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    5002:	11 92       	st	Z+, r1
    5004:	21 50       	subi	r18, 0x01	; 1
    5006:	30 40       	sbci	r19, 0x00	; 0
    5008:	9f ef       	ldi	r25, 0xFF	; 255
    500a:	2f 3f       	cpi	r18, 0xFF	; 255
    500c:	39 07       	cpc	r19, r25
    500e:	c9 f7       	brne	.-14     	; 0x5002 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    5010:	86 01       	movw	r16, r12
    5012:	04 51       	subi	r16, 0x14	; 20
    5014:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    5016:	80 e8       	ldi	r24, 0x80	; 128
    5018:	d8 01       	movw	r26, r16
    501a:	8c 93       	st	X, r24
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	11 96       	adiw	r26, 0x01	; 1
    5020:	8c 93       	st	X, r24
    5022:	11 97       	sbiw	r26, 0x01	; 1
    5024:	12 96       	adiw	r26, 0x02	; 2
    5026:	8c 93       	st	X, r24
    5028:	12 97       	sbiw	r26, 0x02	; 2
    502a:	13 96       	adiw	r26, 0x03	; 3
    502c:	1c 92       	st	X, r1
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    502e:	40 30       	cpi	r20, 0x00	; 0
    5030:	b4 e0       	ldi	r27, 0x04	; 4
    5032:	5b 07       	cpc	r21, r27
    5034:	bb ef       	ldi	r27, 0xFB	; 251
    5036:	6b 07       	cpc	r22, r27
    5038:	b0 e0       	ldi	r27, 0x00	; 0
    503a:	7b 07       	cpc	r23, r27
    503c:	b0 f4       	brcc	.+44     	; 0x506a <f_mkfs+0x446>
			n_disk = n_disk / 63 / 255;
    503e:	cb 01       	movw	r24, r22
    5040:	ba 01       	movw	r22, r20
    5042:	21 ec       	ldi	r18, 0xC1	; 193
    5044:	3e e3       	ldi	r19, 0x3E	; 62
    5046:	40 e0       	ldi	r20, 0x00	; 0
    5048:	50 e0       	ldi	r21, 0x00	; 0
    504a:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    504e:	c9 01       	movw	r24, r18
    5050:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    5052:	f8 01       	movw	r30, r16
    5054:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    5056:	72 e0       	ldi	r23, 0x02	; 2
    5058:	b6 95       	lsr	r27
    505a:	a7 95       	ror	r26
    505c:	97 95       	ror	r25
    505e:	87 95       	ror	r24
    5060:	7a 95       	dec	r23
    5062:	d1 f7       	brne	.-12     	; 0x5058 <f_mkfs+0x434>
    5064:	8f 63       	ori	r24, 0x3F	; 63
    5066:	86 83       	std	Z+6, r24	; 0x06
    5068:	07 c0       	rjmp	.+14     	; 0x5078 <f_mkfs+0x454>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    506a:	8f ef       	ldi	r24, 0xFF	; 255
    506c:	d8 01       	movw	r26, r16
    506e:	16 96       	adiw	r26, 0x06	; 6
    5070:	8c 93       	st	X, r24
    5072:	16 97       	sbiw	r26, 0x06	; 6
    5074:	17 96       	adiw	r26, 0x07	; 7
    5076:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    5078:	8e ef       	ldi	r24, 0xFE	; 254
    507a:	f8 01       	movw	r30, r16
    507c:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    507e:	fa a1       	ldd	r31, Y+34	; 0x22
    5080:	f3 30       	cpi	r31, 0x03	; 3
    5082:	81 f0       	breq	.+32     	; 0x50a4 <f_mkfs+0x480>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    5084:	89 81       	ldd	r24, Y+1	; 0x01
    5086:	9a 81       	ldd	r25, Y+2	; 0x02
    5088:	ab 81       	ldd	r26, Y+3	; 0x03
    508a:	bc 81       	ldd	r27, Y+4	; 0x04
    508c:	80 50       	subi	r24, 0x00	; 0
    508e:	90 40       	sbci	r25, 0x00	; 0
    5090:	a1 40       	sbci	r26, 0x01	; 1
    5092:	b0 40       	sbci	r27, 0x00	; 0
    5094:	10 f0       	brcs	.+4      	; 0x509a <f_mkfs+0x476>
    5096:	86 e0       	ldi	r24, 0x06	; 6
    5098:	01 c0       	rjmp	.+2      	; 0x509c <f_mkfs+0x478>
    509a:	84 e0       	ldi	r24, 0x04	; 4
    509c:	d8 01       	movw	r26, r16
    509e:	14 96       	adiw	r26, 0x04	; 4
    50a0:	8c 93       	st	X, r24
    50a2:	03 c0       	rjmp	.+6      	; 0x50aa <f_mkfs+0x486>
		else
			tbl[4] = 0x0c;
    50a4:	8c e0       	ldi	r24, 0x0C	; 12
    50a6:	f8 01       	movw	r30, r16
    50a8:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    50aa:	8f e3       	ldi	r24, 0x3F	; 63
    50ac:	d8 01       	movw	r26, r16
    50ae:	18 96       	adiw	r26, 0x08	; 8
    50b0:	8c 93       	st	X, r24
    50b2:	18 97       	sbiw	r26, 0x08	; 8
    50b4:	19 96       	adiw	r26, 0x09	; 9
    50b6:	1c 92       	st	X, r1
    50b8:	19 97       	sbiw	r26, 0x09	; 9
    50ba:	1a 96       	adiw	r26, 0x0a	; 10
    50bc:	1c 92       	st	X, r1
    50be:	1a 97       	sbiw	r26, 0x0a	; 10
    50c0:	1b 96       	adiw	r26, 0x0b	; 11
    50c2:	1c 92       	st	X, r1
    50c4:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    50c6:	89 81       	ldd	r24, Y+1	; 0x01
    50c8:	1c 96       	adiw	r26, 0x0c	; 12
    50ca:	8c 93       	st	X, r24
    50cc:	1c 97       	sbiw	r26, 0x0c	; 12
    50ce:	8a 81       	ldd	r24, Y+2	; 0x02
    50d0:	1d 96       	adiw	r26, 0x0d	; 13
    50d2:	8c 93       	st	X, r24
    50d4:	89 81       	ldd	r24, Y+1	; 0x01
    50d6:	9a 81       	ldd	r25, Y+2	; 0x02
    50d8:	ab 81       	ldd	r26, Y+3	; 0x03
    50da:	bc 81       	ldd	r27, Y+4	; 0x04
    50dc:	cd 01       	movw	r24, r26
    50de:	aa 27       	eor	r26, r26
    50e0:	bb 27       	eor	r27, r27
    50e2:	f8 01       	movw	r30, r16
    50e4:	86 87       	std	Z+14, r24	; 0x0e
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	9a 81       	ldd	r25, Y+2	; 0x02
    50ea:	ab 81       	ldd	r26, Y+3	; 0x03
    50ec:	bc 81       	ldd	r27, Y+4	; 0x04
    50ee:	8b 2f       	mov	r24, r27
    50f0:	99 27       	eor	r25, r25
    50f2:	aa 27       	eor	r26, r26
    50f4:	bb 27       	eor	r27, r27
    50f6:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    50f8:	00 5c       	subi	r16, 0xC0	; 192
    50fa:	1f 4f       	sbci	r17, 0xFF	; 255
    50fc:	85 e5       	ldi	r24, 0x55	; 85
    50fe:	d8 01       	movw	r26, r16
    5100:	8d 93       	st	X+, r24
    5102:	fd 01       	movw	r30, r26
    5104:	8a ea       	ldi	r24, 0xAA	; 170
    5106:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    5108:	8b 89       	ldd	r24, Y+19	; 0x13
    510a:	b7 01       	movw	r22, r14
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e0       	ldi	r20, 0x00	; 0
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	01 e0       	ldi	r16, 0x01	; 1
    5116:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    511a:	88 23       	and	r24, r24
    511c:	09 f0       	breq	.+2      	; 0x5120 <f_mkfs+0x4fc>
    511e:	b4 c2       	rjmp	.+1384   	; 0x5688 <f_mkfs+0xa64>
    5120:	b8 ef       	ldi	r27, 0xF8	; 248
    5122:	bc 8b       	std	Y+20, r27	; 0x14
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    5124:	4e e2       	ldi	r20, 0x2E	; 46
    5126:	24 2e       	mov	r2, r20
    5128:	31 2c       	mov	r3, r1
    512a:	2c 0c       	add	r2, r12
    512c:	3d 1c       	adc	r3, r13
    512e:	f1 01       	movw	r30, r2
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	92 e0       	ldi	r25, 0x02	; 2
    5134:	01 c0       	rjmp	.+2      	; 0x5138 <f_mkfs+0x514>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5136:	11 92       	st	Z+, r1
    5138:	01 97       	sbiw	r24, 0x01	; 1
    513a:	2f ef       	ldi	r18, 0xFF	; 255
    513c:	8f 3f       	cpi	r24, 0xFF	; 255
    513e:	92 07       	cpc	r25, r18
    5140:	d1 f7       	brne	.-12     	; 0x5136 <f_mkfs+0x512>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    5142:	8b ee       	ldi	r24, 0xEB	; 235
    5144:	d6 01       	movw	r26, r12
    5146:	9e 96       	adiw	r26, 0x2e	; 46
    5148:	8c 93       	st	X, r24
    514a:	9e 97       	sbiw	r26, 0x2e	; 46
    514c:	8e ef       	ldi	r24, 0xFE	; 254
    514e:	9f 96       	adiw	r26, 0x2f	; 47
    5150:	8c 93       	st	X, r24
    5152:	9f 97       	sbiw	r26, 0x2f	; 47
    5154:	80 e9       	ldi	r24, 0x90	; 144
    5156:	d0 96       	adiw	r26, 0x30	; 48
    5158:	8c 93       	st	X, r24
    515a:	d0 97       	sbiw	r26, 0x30	; 48
    515c:	d1 96       	adiw	r26, 0x31	; 49
    515e:	1c 92       	st	X, r1
    5160:	d1 97       	sbiw	r26, 0x31	; 49
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    5162:	d9 96       	adiw	r26, 0x39	; 57
    5164:	1c 92       	st	X, r1
    5166:	d9 97       	sbiw	r26, 0x39	; 57
    5168:	82 e0       	ldi	r24, 0x02	; 2
    516a:	da 96       	adiw	r26, 0x3a	; 58
    516c:	8c 93       	st	X, r24
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    516e:	b9 89       	ldd	r27, Y+17	; 0x11
    5170:	b9 a3       	std	Y+33, r27	; 0x21
    5172:	f6 01       	movw	r30, r12
    5174:	b3 af       	std	Z+59, r27	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    5176:	39 8d       	ldd	r19, Y+25	; 0x19
    5178:	34 af       	std	Z+60, r19	; 0x3c
    517a:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    5180:	8d 89       	ldd	r24, Y+21	; 0x15
    5182:	9e 89       	ldd	r25, Y+22	; 0x16
    5184:	af 89       	ldd	r26, Y+23	; 0x17
    5186:	b8 8d       	ldd	r27, Y+24	; 0x18
    5188:	34 e0       	ldi	r19, 0x04	; 4
    518a:	88 0f       	add	r24, r24
    518c:	99 1f       	adc	r25, r25
    518e:	aa 1f       	adc	r26, r26
    5190:	bb 1f       	adc	r27, r27
    5192:	3a 95       	dec	r19
    5194:	d1 f7       	brne	.-12     	; 0x518a <f_mkfs+0x566>
    5196:	87 af       	std	Z+63, r24	; 0x3f
    5198:	40 e4       	ldi	r20, 0x40	; 64
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	c4 0e       	add	r12, r20
    519e:	d5 1e       	adc	r13, r21
    51a0:	89 2f       	mov	r24, r25
    51a2:	99 27       	eor	r25, r25
    51a4:	d6 01       	movw	r26, r12
    51a6:	8c 93       	st	X, r24
    51a8:	e0 ec       	ldi	r30, 0xC0	; 192
    51aa:	ff ef       	ldi	r31, 0xFF	; 255
    51ac:	ce 0e       	add	r12, r30
    51ae:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    51b0:	89 81       	ldd	r24, Y+1	; 0x01
    51b2:	9a 81       	ldd	r25, Y+2	; 0x02
    51b4:	ab 81       	ldd	r26, Y+3	; 0x03
    51b6:	bc 81       	ldd	r27, Y+4	; 0x04
    51b8:	80 30       	cpi	r24, 0x00	; 0
    51ba:	f0 e0       	ldi	r31, 0x00	; 0
    51bc:	9f 07       	cpc	r25, r31
    51be:	f1 e0       	ldi	r31, 0x01	; 1
    51c0:	af 07       	cpc	r26, r31
    51c2:	f0 e0       	ldi	r31, 0x00	; 0
    51c4:	bf 07       	cpc	r27, r31
    51c6:	60 f4       	brcc	.+24     	; 0x51e0 <f_mkfs+0x5bc>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    51c8:	21 e4       	ldi	r18, 0x41	; 65
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	c2 0e       	add	r12, r18
    51ce:	d3 1e       	adc	r13, r19
    51d0:	f6 01       	movw	r30, r12
    51d2:	81 93       	st	Z+, r24
    51d4:	6f 01       	movw	r12, r30
    51d6:	8a 81       	ldd	r24, Y+2	; 0x02
    51d8:	80 83       	st	Z, r24
    51da:	2e eb       	ldi	r18, 0xBE	; 190
    51dc:	3f ef       	ldi	r19, 0xFF	; 255
    51de:	1f c0       	rjmp	.+62     	; 0x521e <f_mkfs+0x5fa>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    51e0:	4e e4       	ldi	r20, 0x4E	; 78
    51e2:	50 e0       	ldi	r21, 0x00	; 0
    51e4:	c4 0e       	add	r12, r20
    51e6:	d5 1e       	adc	r13, r21
    51e8:	f6 01       	movw	r30, r12
    51ea:	81 93       	st	Z+, r24
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	df 01       	movw	r26, r30
    51f0:	8d 93       	st	X+, r24
    51f2:	6d 01       	movw	r12, r26
    51f4:	89 81       	ldd	r24, Y+1	; 0x01
    51f6:	9a 81       	ldd	r25, Y+2	; 0x02
    51f8:	ab 81       	ldd	r26, Y+3	; 0x03
    51fa:	bc 81       	ldd	r27, Y+4	; 0x04
    51fc:	cd 01       	movw	r24, r26
    51fe:	aa 27       	eor	r26, r26
    5200:	bb 27       	eor	r27, r27
    5202:	f6 01       	movw	r30, r12
    5204:	81 93       	st	Z+, r24
    5206:	6f 01       	movw	r12, r30
    5208:	89 81       	ldd	r24, Y+1	; 0x01
    520a:	9a 81       	ldd	r25, Y+2	; 0x02
    520c:	ab 81       	ldd	r26, Y+3	; 0x03
    520e:	bc 81       	ldd	r27, Y+4	; 0x04
    5210:	8b 2f       	mov	r24, r27
    5212:	99 27       	eor	r25, r25
    5214:	aa 27       	eor	r26, r26
    5216:	bb 27       	eor	r27, r27
    5218:	80 83       	st	Z, r24
    521a:	2f ea       	ldi	r18, 0xAF	; 175
    521c:	3f ef       	ldi	r19, 0xFF	; 255
    521e:	c2 0e       	add	r12, r18
    5220:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    5222:	43 e4       	ldi	r20, 0x43	; 67
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	c4 0e       	add	r12, r20
    5228:	d5 1e       	adc	r13, r21
    522a:	ec 89       	ldd	r30, Y+20	; 0x14
    522c:	d6 01       	movw	r26, r12
    522e:	ec 93       	st	X, r30
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    5230:	23 e0       	ldi	r18, 0x03	; 3
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	c2 0e       	add	r12, r18
    5236:	d3 1e       	adc	r13, r19
    5238:	8f e3       	ldi	r24, 0x3F	; 63
    523a:	d6 01       	movw	r26, r12
    523c:	8d 93       	st	X+, r24
    523e:	fd 01       	movw	r30, r26
    5240:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    5242:	8f ef       	ldi	r24, 0xFF	; 255
    5244:	df 01       	movw	r26, r30
    5246:	8d 93       	st	X+, r24
    5248:	fd 01       	movw	r30, r26
    524a:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    524c:	df 01       	movw	r26, r30
    524e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5250:	ed 93       	st	X+, r30
    5252:	1d 92       	st	X+, r1
    5254:	fd 01       	movw	r30, r26
    5256:	11 92       	st	Z+, r1
    5258:	6f 01       	movw	r12, r30
    525a:	10 82       	st	Z, r1
    525c:	23 eb       	ldi	r18, 0xB3	; 179
    525e:	3f ef       	ldi	r19, 0xFF	; 255
    5260:	c2 0e       	add	r12, r18
    5262:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    5264:	0e 94 66 09 	call	0x12cc	; 0x12cc <get_fattime>
    5268:	6d 83       	std	Y+5, r22	; 0x05
    526a:	7e 83       	std	Y+6, r23	; 0x06
    526c:	8f 83       	std	Y+7, r24	; 0x07
    526e:	98 87       	std	Y+8, r25	; 0x08
    5270:	e5 e5       	ldi	r30, 0x55	; 85
    5272:	8e 2e       	mov	r8, r30
    5274:	91 2c       	mov	r9, r1
    5276:	8c 0c       	add	r8, r12
    5278:	9d 1c       	adc	r9, r13
    527a:	47 2f       	mov	r20, r23
    527c:	55 27       	eor	r21, r21
    527e:	49 a7       	std	Y+41, r20	; 0x29
    5280:	5a a7       	std	Y+42, r21	; 0x2a
    5282:	9c 01       	movw	r18, r24
    5284:	44 27       	eor	r20, r20
    5286:	55 27       	eor	r21, r21
    5288:	2b a7       	std	Y+43, r18	; 0x2b
    528a:	3c a7       	std	Y+44, r19	; 0x2c
    528c:	4d a7       	std	Y+45, r20	; 0x2d
    528e:	5e a7       	std	Y+46, r21	; 0x2e
    5290:	e9 2e       	mov	r14, r25
    5292:	ff 24       	eor	r15, r15
    5294:	00 27       	eor	r16, r16
    5296:	11 27       	eor	r17, r17
    5298:	a5 2d       	mov	r26, r5
    529a:	bb 27       	eor	r27, r27
    529c:	92 e5       	ldi	r25, 0x52	; 82
    529e:	a9 2e       	mov	r10, r25
    52a0:	b1 2c       	mov	r11, r1
    52a2:	ac 0c       	add	r10, r12
    52a4:	bd 1c       	adc	r11, r13
    52a6:	a6 01       	movw	r20, r12
    52a8:	4c 5a       	subi	r20, 0xAC	; 172
    52aa:	5f 4f       	sbci	r21, 0xFF	; 255
    52ac:	4f a3       	std	Y+39, r20	; 0x27
    52ae:	58 a7       	std	Y+40, r21	; 0x28
	if (fmt != FS_FAT32) {
    52b0:	5a a1       	ldd	r21, Y+34	; 0x22
    52b2:	53 30       	cpi	r21, 0x03	; 3
    52b4:	61 f1       	breq	.+88     	; 0x530e <f_mkfs+0x6ea>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    52b6:	f4 01       	movw	r30, r8
    52b8:	60 83       	st	Z, r22
    52ba:	26 e5       	ldi	r18, 0x56	; 86
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	c2 0e       	add	r12, r18
    52c0:	d3 1e       	adc	r13, r19
    52c2:	f6 01       	movw	r30, r12
    52c4:	29 a5       	ldd	r18, Y+41	; 0x29
    52c6:	21 93       	st	Z+, r18
    52c8:	2b a5       	ldd	r18, Y+43	; 0x2b
    52ca:	21 93       	st	Z+, r18
    52cc:	6f 01       	movw	r12, r30
    52ce:	e0 82       	st	Z, r14
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    52d0:	4c ee       	ldi	r20, 0xEC	; 236
    52d2:	5f ef       	ldi	r21, 0xFF	; 255
    52d4:	c4 0e       	add	r12, r20
    52d6:	d5 1e       	adc	r13, r21
    52d8:	f6 01       	movw	r30, r12
    52da:	41 92       	st	Z+, r4
    52dc:	6f 01       	movw	r12, r30
    52de:	a0 83       	st	Z, r26
    52e0:	2b eb       	ldi	r18, 0xBB	; 187
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	c2 0e       	add	r12, r18
    52e6:	d3 1e       	adc	r13, r19
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    52e8:	80 e8       	ldi	r24, 0x80	; 128
    52ea:	d5 01       	movw	r26, r10
    52ec:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    52ee:	89 e2       	ldi	r24, 0x29	; 41
    52f0:	ef a1       	ldd	r30, Y+39	; 0x27
    52f2:	f8 a5       	ldd	r31, Y+40	; 0x28
    52f4:	80 83       	st	Z, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    52f6:	d1 01       	movw	r26, r2
    52f8:	9b 96       	adiw	r26, 0x2b	; 43
    52fa:	eb e0       	ldi	r30, 0x0B	; 11
    52fc:	f0 e2       	ldi	r31, 0x20	; 32
    52fe:	02 c0       	rjmp	.+4      	; 0x5304 <f_mkfs+0x6e0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5300:	81 91       	ld	r24, Z+
    5302:	8d 93       	st	X+, r24
    5304:	20 e2       	ldi	r18, 0x20	; 32
    5306:	ee 31       	cpi	r30, 0x1E	; 30
    5308:	f2 07       	cpc	r31, r18
    530a:	d1 f7       	brne	.-12     	; 0x5300 <f_mkfs+0x6dc>
    530c:	55 c0       	rjmp	.+170    	; 0x53b8 <f_mkfs+0x794>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    530e:	41 e7       	ldi	r20, 0x71	; 113
    5310:	50 e0       	ldi	r21, 0x00	; 0
    5312:	c4 0e       	add	r12, r20
    5314:	d5 1e       	adc	r13, r21
    5316:	f6 01       	movw	r30, r12
    5318:	61 93       	st	Z+, r22
    531a:	29 a5       	ldd	r18, Y+41	; 0x29
    531c:	21 93       	st	Z+, r18
    531e:	2b a5       	ldd	r18, Y+43	; 0x2b
    5320:	21 93       	st	Z+, r18
    5322:	6f 01       	movw	r12, r30
    5324:	e0 82       	st	Z, r14
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    5326:	f5 01       	movw	r30, r10
    5328:	40 82       	st	Z, r4
    532a:	2f ed       	ldi	r18, 0xDF	; 223
    532c:	3f ef       	ldi	r19, 0xFF	; 255
    532e:	c2 0e       	add	r12, r18
    5330:	d3 1e       	adc	r13, r19
    5332:	f6 01       	movw	r30, r12
    5334:	a0 83       	st	Z, r26
    5336:	c3 01       	movw	r24, r6
    5338:	aa 27       	eor	r26, r26
    533a:	bb 27       	eor	r27, r27
    533c:	ef a1       	ldd	r30, Y+39	; 0x27
    533e:	f8 a5       	ldd	r31, Y+40	; 0x28
    5340:	80 83       	st	Z, r24
    5342:	87 2d       	mov	r24, r7
    5344:	99 27       	eor	r25, r25
    5346:	aa 27       	eor	r26, r26
    5348:	bb 27       	eor	r27, r27
    534a:	f4 01       	movw	r30, r8
    534c:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    534e:	27 e0       	ldi	r18, 0x07	; 7
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	c2 0e       	add	r12, r18
    5354:	d3 1e       	adc	r13, r19
    5356:	82 e0       	ldi	r24, 0x02	; 2
    5358:	d6 01       	movw	r26, r12
    535a:	8d 93       	st	X+, r24
    535c:	fd 01       	movw	r30, r26
    535e:	11 92       	st	Z+, r1
    5360:	df 01       	movw	r26, r30
    5362:	1d 92       	st	X+, r1
    5364:	fd 01       	movw	r30, r26
    5366:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	df 01       	movw	r26, r30
    536c:	8d 93       	st	X+, r24
    536e:	fd 01       	movw	r30, r26
    5370:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    5372:	86 e0       	ldi	r24, 0x06	; 6
    5374:	df 01       	movw	r26, r30
    5376:	8d 93       	st	X+, r24
    5378:	6d 01       	movw	r12, r26
    537a:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    537c:	ed e0       	ldi	r30, 0x0D	; 13
    537e:	f0 e0       	ldi	r31, 0x00	; 0
    5380:	ce 0e       	add	r12, r30
    5382:	df 1e       	adc	r13, r31
    5384:	80 e8       	ldi	r24, 0x80	; 128
    5386:	d6 01       	movw	r26, r12
    5388:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    538a:	e2 e0       	ldi	r30, 0x02	; 2
    538c:	f0 e0       	ldi	r31, 0x00	; 0
    538e:	ce 0e       	add	r12, r30
    5390:	df 1e       	adc	r13, r31
    5392:	89 e2       	ldi	r24, 0x29	; 41
    5394:	d6 01       	movw	r26, r12
    5396:	8c 93       	st	X, r24
    5398:	e0 e9       	ldi	r30, 0x90	; 144
    539a:	ff ef       	ldi	r31, 0xFF	; 255
    539c:	ce 0e       	add	r12, r30
    539e:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    53a0:	d1 01       	movw	r26, r2
    53a2:	a9 5b       	subi	r26, 0xB9	; 185
    53a4:	bf 4f       	sbci	r27, 0xFF	; 255
    53a6:	ef e1       	ldi	r30, 0x1F	; 31
    53a8:	f0 e2       	ldi	r31, 0x20	; 32
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <f_mkfs+0x78c>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    53ac:	81 91       	ld	r24, Z+
    53ae:	8d 93       	st	X+, r24
    53b0:	20 e2       	ldi	r18, 0x20	; 32
    53b2:	e2 33       	cpi	r30, 0x32	; 50
    53b4:	f2 07       	cpc	r31, r18
    53b6:	d1 f7       	brne	.-12     	; 0x53ac <f_mkfs+0x788>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    53b8:	4c e2       	ldi	r20, 0x2C	; 44
    53ba:	52 e0       	ldi	r21, 0x02	; 2
    53bc:	c4 0e       	add	r12, r20
    53be:	d5 1e       	adc	r13, r21
    53c0:	85 e5       	ldi	r24, 0x55	; 85
    53c2:	d6 01       	movw	r26, r12
    53c4:	8d 93       	st	X+, r24
    53c6:	6d 01       	movw	r12, r26
    53c8:	8a ea       	ldi	r24, 0xAA	; 170
    53ca:	8c 93       	st	X, r24
    53cc:	e3 ed       	ldi	r30, 0xD3	; 211
    53ce:	fd ef       	ldi	r31, 0xFD	; 253
    53d0:	ce 0e       	add	r12, r30
    53d2:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    53d4:	8b 89       	ldd	r24, Y+19	; 0x13
    53d6:	b1 01       	movw	r22, r2
    53d8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    53da:	3e 8d       	ldd	r19, Y+30	; 0x1e
    53dc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    53de:	58 a1       	ldd	r21, Y+32	; 0x20
    53e0:	01 e0       	ldi	r16, 0x01	; 1
    53e2:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    53e6:	88 23       	and	r24, r24
    53e8:	09 f0       	breq	.+2      	; 0x53ec <f_mkfs+0x7c8>
    53ea:	4e c1       	rjmp	.+668    	; 0x5688 <f_mkfs+0xa64>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    53ec:	fa a1       	ldd	r31, Y+34	; 0x22
    53ee:	f3 30       	cpi	r31, 0x03	; 3
    53f0:	61 f4       	brne	.+24     	; 0x540a <f_mkfs+0x7e6>
		disk_write(drv, tbl, b_part+6, 1);
    53f2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    53f4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    53f6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    53f8:	58 a1       	ldd	r21, Y+32	; 0x20
    53fa:	2a 5f       	subi	r18, 0xFA	; 250
    53fc:	3f 4f       	sbci	r19, 0xFF	; 255
    53fe:	4f 4f       	sbci	r20, 0xFF	; 255
    5400:	5f 4f       	sbci	r21, 0xFF	; 255
    5402:	8b 89       	ldd	r24, Y+19	; 0x13
    5404:	b1 01       	movw	r22, r2
    5406:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    540a:	f1 01       	movw	r30, r2
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	92 e0       	ldi	r25, 0x02	; 2
    5410:	01 c0       	rjmp	.+2      	; 0x5414 <f_mkfs+0x7f0>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5412:	11 92       	st	Z+, r1
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	2f ef       	ldi	r18, 0xFF	; 255
    5418:	8f 3f       	cpi	r24, 0xFF	; 255
    541a:	92 07       	cpc	r25, r18
    541c:	d1 f7       	brne	.-12     	; 0x5412 <f_mkfs+0x7ee>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    541e:	3a a1       	ldd	r19, Y+34	; 0x22
    5420:	33 30       	cpi	r19, 0x03	; 3
    5422:	39 f1       	breq	.+78     	; 0x5472 <f_mkfs+0x84e>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    5424:	31 30       	cpi	r19, 0x01	; 1
    5426:	29 f0       	breq	.+10     	; 0x5432 <f_mkfs+0x80e>
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	3f ef       	ldi	r19, 0xFF	; 255
    542c:	4f ef       	ldi	r20, 0xFF	; 255
    542e:	5f ef       	ldi	r21, 0xFF	; 255
    5430:	04 c0       	rjmp	.+8      	; 0x543a <f_mkfs+0x816>
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	3f ef       	ldi	r19, 0xFF	; 255
    5436:	4f ef       	ldi	r20, 0xFF	; 255
    5438:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    543a:	6c 89       	ldd	r22, Y+20	; 0x14
    543c:	86 2f       	mov	r24, r22
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	a0 e0       	ldi	r26, 0x00	; 0
    5442:	b0 e0       	ldi	r27, 0x00	; 0
    5444:	82 2b       	or	r24, r18
    5446:	93 2b       	or	r25, r19
    5448:	a4 2b       	or	r26, r20
    544a:	b5 2b       	or	r27, r21
    544c:	8d 83       	std	Y+5, r24	; 0x05
    544e:	9e 83       	std	Y+6, r25	; 0x06
    5450:	af 83       	std	Y+7, r26	; 0x07
    5452:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    5454:	f6 01       	movw	r30, r12
    5456:	86 a7       	std	Z+46, r24	; 0x2e
    5458:	29 2f       	mov	r18, r25
    545a:	33 27       	eor	r19, r19
    545c:	27 a7       	std	Z+47, r18	; 0x2f
    545e:	9d 01       	movw	r18, r26
    5460:	44 27       	eor	r20, r20
    5462:	55 27       	eor	r21, r21
    5464:	20 ab       	std	Z+48, r18	; 0x30
    5466:	8b 2f       	mov	r24, r27
    5468:	99 27       	eor	r25, r25
    546a:	aa 27       	eor	r26, r26
    546c:	bb 27       	eor	r27, r27
    546e:	81 ab       	std	Z+49, r24	; 0x31
    5470:	27 c0       	rjmp	.+78     	; 0x54c0 <f_mkfs+0x89c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    5472:	88 ef       	ldi	r24, 0xF8	; 248
    5474:	d6 01       	movw	r26, r12
    5476:	9e 96       	adiw	r26, 0x2e	; 46
    5478:	8c 93       	st	X, r24
    547a:	9e 97       	sbiw	r26, 0x2e	; 46
    547c:	8f ef       	ldi	r24, 0xFF	; 255
    547e:	9f 96       	adiw	r26, 0x2f	; 47
    5480:	8c 93       	st	X, r24
    5482:	9f 97       	sbiw	r26, 0x2f	; 47
    5484:	d0 96       	adiw	r26, 0x30	; 48
    5486:	8c 93       	st	X, r24
    5488:	d0 97       	sbiw	r26, 0x30	; 48
    548a:	d1 96       	adiw	r26, 0x31	; 49
    548c:	8c 93       	st	X, r24
    548e:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5490:	d2 96       	adiw	r26, 0x32	; 50
    5492:	8c 93       	st	X, r24
    5494:	d2 97       	sbiw	r26, 0x32	; 50
    5496:	d3 96       	adiw	r26, 0x33	; 51
    5498:	8c 93       	st	X, r24
    549a:	d3 97       	sbiw	r26, 0x33	; 51
    549c:	d4 96       	adiw	r26, 0x34	; 52
    549e:	8c 93       	st	X, r24
    54a0:	d4 97       	sbiw	r26, 0x34	; 52
    54a2:	d5 96       	adiw	r26, 0x35	; 53
    54a4:	8c 93       	st	X, r24
    54a6:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    54a8:	d6 96       	adiw	r26, 0x36	; 54
    54aa:	8c 93       	st	X, r24
    54ac:	d6 97       	sbiw	r26, 0x36	; 54
    54ae:	d7 96       	adiw	r26, 0x37	; 55
    54b0:	8c 93       	st	X, r24
    54b2:	d7 97       	sbiw	r26, 0x37	; 55
    54b4:	d8 96       	adiw	r26, 0x38	; 56
    54b6:	8c 93       	st	X, r24
    54b8:	d8 97       	sbiw	r26, 0x38	; 56
    54ba:	8f e0       	ldi	r24, 0x0F	; 15
    54bc:	d9 96       	adiw	r26, 0x39	; 57
    54be:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    54c0:	8b 89       	ldd	r24, Y+19	; 0x13
    54c2:	b1 01       	movw	r22, r2
    54c4:	29 85       	ldd	r18, Y+9	; 0x09
    54c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    54c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    54ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    54cc:	01 e0       	ldi	r16, 0x01	; 1
    54ce:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    54d2:	88 23       	and	r24, r24
    54d4:	09 f0       	breq	.+2      	; 0x54d8 <f_mkfs+0x8b4>
    54d6:	d8 c0       	rjmp	.+432    	; 0x5688 <f_mkfs+0xa64>
    54d8:	f1 01       	movw	r30, r2
    54da:	80 e0       	ldi	r24, 0x00	; 0
    54dc:	92 e0       	ldi	r25, 0x02	; 2
    54de:	01 c0       	rjmp	.+2      	; 0x54e2 <f_mkfs+0x8be>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    54e0:	11 92       	st	Z+, r1
    54e2:	01 97       	sbiw	r24, 0x01	; 1
    54e4:	bf ef       	ldi	r27, 0xFF	; 255
    54e6:	8f 3f       	cpi	r24, 0xFF	; 255
    54e8:	9b 07       	cpc	r25, r27
    54ea:	d1 f7       	brne	.-12     	; 0x54e0 <f_mkfs+0x8bc>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    54ec:	89 84       	ldd	r8, Y+9	; 0x09
    54ee:	9a 84       	ldd	r9, Y+10	; 0x0a
    54f0:	ab 84       	ldd	r10, Y+11	; 0x0b
    54f2:	bc 84       	ldd	r11, Y+12	; 0x0c
    54f4:	08 94       	sec
    54f6:	81 1c       	adc	r8, r1
    54f8:	91 1c       	adc	r9, r1
    54fa:	a1 1c       	adc	r10, r1
    54fc:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    54fe:	81 e0       	ldi	r24, 0x01	; 1
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	a0 e0       	ldi	r26, 0x00	; 0
    5504:	b0 e0       	ldi	r27, 0x00	; 0
    5506:	16 c0       	rjmp	.+44     	; 0x5534 <f_mkfs+0x910>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5508:	8b 89       	ldd	r24, Y+19	; 0x13
    550a:	b1 01       	movw	r22, r2
    550c:	a5 01       	movw	r20, r10
    550e:	94 01       	movw	r18, r8
    5510:	01 e0       	ldi	r16, 0x01	; 1
    5512:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    5516:	88 23       	and	r24, r24
    5518:	09 f0       	breq	.+2      	; 0x551c <f_mkfs+0x8f8>
    551a:	b6 c0       	rjmp	.+364    	; 0x5688 <f_mkfs+0xa64>
    551c:	08 94       	sec
    551e:	81 1c       	adc	r8, r1
    5520:	91 1c       	adc	r9, r1
    5522:	a1 1c       	adc	r10, r1
    5524:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5526:	8d 81       	ldd	r24, Y+5	; 0x05
    5528:	9e 81       	ldd	r25, Y+6	; 0x06
    552a:	af 81       	ldd	r26, Y+7	; 0x07
    552c:	b8 85       	ldd	r27, Y+8	; 0x08
    552e:	01 96       	adiw	r24, 0x01	; 1
    5530:	a1 1d       	adc	r26, r1
    5532:	b1 1d       	adc	r27, r1
    5534:	8d 83       	std	Y+5, r24	; 0x05
    5536:	9e 83       	std	Y+6, r25	; 0x06
    5538:	af 83       	std	Y+7, r26	; 0x07
    553a:	b8 87       	std	Y+8, r27	; 0x08
    553c:	8d 81       	ldd	r24, Y+5	; 0x05
    553e:	9e 81       	ldd	r25, Y+6	; 0x06
    5540:	af 81       	ldd	r26, Y+7	; 0x07
    5542:	b8 85       	ldd	r27, Y+8	; 0x08
    5544:	84 15       	cp	r24, r4
    5546:	95 05       	cpc	r25, r5
    5548:	a6 05       	cpc	r26, r6
    554a:	b7 05       	cpc	r27, r7
    554c:	e8 f2       	brcs	.-70     	; 0x5508 <f_mkfs+0x8e4>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    554e:	ea a1       	ldd	r30, Y+34	; 0x22
    5550:	e3 30       	cpi	r30, 0x03	; 3
    5552:	11 f0       	breq	.+4      	; 0x5558 <f_mkfs+0x934>
    5554:	fd 89       	ldd	r31, Y+21	; 0x15
    5556:	f9 a3       	std	Y+33, r31	; 0x21
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5558:	24 01       	movw	r4, r8
    555a:	35 01       	movw	r6, r10
    555c:	08 94       	sec
    555e:	41 1c       	adc	r4, r1
    5560:	51 1c       	adc	r5, r1
    5562:	61 1c       	adc	r6, r1
    5564:	71 1c       	adc	r7, r1
    5566:	8b 89       	ldd	r24, Y+19	; 0x13
    5568:	b1 01       	movw	r22, r2
    556a:	a5 01       	movw	r20, r10
    556c:	94 01       	movw	r18, r8
    556e:	01 e0       	ldi	r16, 0x01	; 1
    5570:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
    5574:	88 23       	and	r24, r24
    5576:	09 f0       	breq	.+2      	; 0x557a <f_mkfs+0x956>
    5578:	87 c0       	rjmp	.+270    	; 0x5688 <f_mkfs+0xa64>
			return FR_DISK_ERR;
	} while (--m);
    557a:	29 a1       	ldd	r18, Y+33	; 0x21
    557c:	21 50       	subi	r18, 0x01	; 1
    557e:	29 a3       	std	Y+33, r18	; 0x21
    5580:	22 23       	and	r18, r18
    5582:	19 f0       	breq	.+6      	; 0x558a <f_mkfs+0x966>
    5584:	53 01       	movw	r10, r6
    5586:	42 01       	movw	r8, r4
    5588:	e7 cf       	rjmp	.-50     	; 0x5558 <f_mkfs+0x934>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    558a:	3a a1       	ldd	r19, Y+34	; 0x22
    558c:	33 30       	cpi	r19, 0x03	; 3
    558e:	09 f0       	breq	.+2      	; 0x5592 <f_mkfs+0x96e>
    5590:	70 c0       	rjmp	.+224    	; 0x5672 <f_mkfs+0xa4e>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    5592:	4c e2       	ldi	r20, 0x2C	; 44
    5594:	52 e0       	ldi	r21, 0x02	; 2
    5596:	c4 0e       	add	r12, r20
    5598:	d5 1e       	adc	r13, r21
    559a:	85 e5       	ldi	r24, 0x55	; 85
    559c:	d6 01       	movw	r26, r12
    559e:	8d 93       	st	X+, r24
    55a0:	6d 01       	movw	r12, r26
    55a2:	8a ea       	ldi	r24, 0xAA	; 170
    55a4:	8c 93       	st	X, r24
    55a6:	e3 ed       	ldi	r30, 0xD3	; 211
    55a8:	fd ef       	ldi	r31, 0xFD	; 253
    55aa:	ce 0e       	add	r12, r30
    55ac:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    55ae:	82 e5       	ldi	r24, 0x52	; 82
    55b0:	d6 01       	movw	r26, r12
    55b2:	9e 96       	adiw	r26, 0x2e	; 46
    55b4:	8c 93       	st	X, r24
    55b6:	9e 97       	sbiw	r26, 0x2e	; 46
    55b8:	9f 96       	adiw	r26, 0x2f	; 47
    55ba:	8c 93       	st	X, r24
    55bc:	9f 97       	sbiw	r26, 0x2f	; 47
    55be:	21 e6       	ldi	r18, 0x61	; 97
    55c0:	d0 96       	adiw	r26, 0x30	; 48
    55c2:	2c 93       	st	X, r18
    55c4:	d0 97       	sbiw	r26, 0x30	; 48
    55c6:	91 e4       	ldi	r25, 0x41	; 65
    55c8:	d1 96       	adiw	r26, 0x31	; 49
    55ca:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    55cc:	e2 e1       	ldi	r30, 0x12	; 18
    55ce:	f2 e0       	ldi	r31, 0x02	; 2
    55d0:	ce 0e       	add	r12, r30
    55d2:	df 1e       	adc	r13, r31
    55d4:	82 e7       	ldi	r24, 0x72	; 114
    55d6:	d6 01       	movw	r26, r12
    55d8:	8d 93       	st	X+, r24
    55da:	fd 01       	movw	r30, r26
    55dc:	81 93       	st	Z+, r24
    55de:	df 01       	movw	r26, r30
    55e0:	9d 93       	st	X+, r25
    55e2:	fd 01       	movw	r30, r26
    55e4:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    55e6:	8b a1       	ldd	r24, Y+35	; 0x23
    55e8:	81 50       	subi	r24, 0x01	; 1
    55ea:	df 01       	movw	r26, r30
    55ec:	8d 93       	st	X+, r24
    55ee:	8b a1       	ldd	r24, Y+35	; 0x23
    55f0:	9c a1       	ldd	r25, Y+36	; 0x24
    55f2:	01 97       	sbiw	r24, 0x01	; 1
    55f4:	fd 01       	movw	r30, r26
    55f6:	91 93       	st	Z+, r25
    55f8:	8b a1       	ldd	r24, Y+35	; 0x23
    55fa:	9c a1       	ldd	r25, Y+36	; 0x24
    55fc:	ad a1       	ldd	r26, Y+37	; 0x25
    55fe:	be a1       	ldd	r27, Y+38	; 0x26
    5600:	01 97       	sbiw	r24, 0x01	; 1
    5602:	a1 09       	sbc	r26, r1
    5604:	b1 09       	sbc	r27, r1
    5606:	9d 01       	movw	r18, r26
    5608:	44 27       	eor	r20, r20
    560a:	55 27       	eor	r21, r21
    560c:	21 93       	st	Z+, r18
    560e:	8b 2f       	mov	r24, r27
    5610:	99 27       	eor	r25, r25
    5612:	aa 27       	eor	r26, r26
    5614:	bb 27       	eor	r27, r27
    5616:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    5618:	8f ef       	ldi	r24, 0xFF	; 255
    561a:	df 01       	movw	r26, r30
    561c:	8d 93       	st	X+, r24
    561e:	fd 01       	movw	r30, r26
    5620:	81 93       	st	Z+, r24
    5622:	df 01       	movw	r26, r30
    5624:	8d 93       	st	X+, r24
    5626:	fd 01       	movw	r30, r26
    5628:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    562a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    562c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    562e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5630:	58 a1       	ldd	r21, Y+32	; 0x20
    5632:	2f 5f       	subi	r18, 0xFF	; 255
    5634:	3f 4f       	sbci	r19, 0xFF	; 255
    5636:	4f 4f       	sbci	r20, 0xFF	; 255
    5638:	5f 4f       	sbci	r21, 0xFF	; 255
    563a:	2d 8f       	std	Y+29, r18	; 0x1d
    563c:	3e 8f       	std	Y+30, r19	; 0x1e
    563e:	4f 8f       	std	Y+31, r20	; 0x1f
    5640:	58 a3       	std	Y+32, r21	; 0x20
    5642:	8b 89       	ldd	r24, Y+19	; 0x13
    5644:	b1 01       	movw	r22, r2
    5646:	01 e0       	ldi	r16, 0x01	; 1
    5648:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    564c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    564e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5650:	af 8d       	ldd	r26, Y+31	; 0x1f
    5652:	b8 a1       	ldd	r27, Y+32	; 0x20
    5654:	06 96       	adiw	r24, 0x06	; 6
    5656:	a1 1d       	adc	r26, r1
    5658:	b1 1d       	adc	r27, r1
    565a:	8d 8f       	std	Y+29, r24	; 0x1d
    565c:	9e 8f       	std	Y+30, r25	; 0x1e
    565e:	af 8f       	std	Y+31, r26	; 0x1f
    5660:	b8 a3       	std	Y+32, r27	; 0x20
    5662:	8b 89       	ldd	r24, Y+19	; 0x13
    5664:	b1 01       	movw	r22, r2
    5666:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5668:	3e 8d       	ldd	r19, Y+30	; 0x1e
    566a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    566c:	58 a1       	ldd	r21, Y+32	; 0x20
    566e:	0e 94 07 07 	call	0xe0e	; 0xe0e <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    5672:	8b 89       	ldd	r24, Y+19	; 0x13
    5674:	60 e0       	ldi	r22, 0x00	; 0
    5676:	40 e0       	ldi	r20, 0x00	; 0
    5678:	50 e0       	ldi	r21, 0x00	; 0
    567a:	0e 94 7f 07 	call	0xefe	; 0xefe <disk_ioctl>
    567e:	88 23       	and	r24, r24
    5680:	21 f0       	breq	.+8      	; 0x568a <f_mkfs+0xa66>
    5682:	02 c0       	rjmp	.+4      	; 0x5688 <f_mkfs+0xa64>
    5684:	8e e0       	ldi	r24, 0x0E	; 14
    5686:	01 c0       	rjmp	.+2      	; 0x568a <f_mkfs+0xa66>
    5688:	81 e0       	ldi	r24, 0x01	; 1
}
    568a:	ae 96       	adiw	r28, 0x2e	; 46
    568c:	cd bf       	out	0x3d, r28	; 61
    568e:	de bf       	out	0x3e, r29	; 62
    5690:	cf 91       	pop	r28
    5692:	df 91       	pop	r29
    5694:	1f 91       	pop	r17
    5696:	0f 91       	pop	r16
    5698:	ff 90       	pop	r15
    569a:	ef 90       	pop	r14
    569c:	df 90       	pop	r13
    569e:	cf 90       	pop	r12
    56a0:	bf 90       	pop	r11
    56a2:	af 90       	pop	r10
    56a4:	9f 90       	pop	r9
    56a6:	8f 90       	pop	r8
    56a8:	7f 90       	pop	r7
    56aa:	6f 90       	pop	r6
    56ac:	5f 90       	pop	r5
    56ae:	4f 90       	pop	r4
    56b0:	3f 90       	pop	r3
    56b2:	2f 90       	pop	r2
    56b4:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    56b6:	7c 01       	movw	r14, r24
    56b8:	8d 01       	movw	r16, r26
    56ba:	ee 0c       	add	r14, r14
    56bc:	ff 1c       	adc	r15, r15
    56be:	00 1f       	adc	r16, r16
    56c0:	11 1f       	adc	r17, r17
    56c2:	e8 0e       	add	r14, r24
    56c4:	f9 1e       	adc	r15, r25
    56c6:	0a 1f       	adc	r16, r26
    56c8:	1b 1f       	adc	r17, r27
    56ca:	08 94       	sec
    56cc:	e1 1c       	adc	r14, r1
    56ce:	f1 1c       	adc	r15, r1
    56d0:	01 1d       	adc	r16, r1
    56d2:	11 1d       	adc	r17, r1
    56d4:	16 95       	lsr	r17
    56d6:	07 95       	ror	r16
    56d8:	f7 94       	ror	r15
    56da:	e7 94       	ror	r14
    56dc:	22 e0       	ldi	r18, 0x02	; 2
    56de:	32 e0       	ldi	r19, 0x02	; 2
    56e0:	40 e0       	ldi	r20, 0x00	; 0
    56e2:	50 e0       	ldi	r21, 0x00	; 0
    56e4:	e2 0e       	add	r14, r18
    56e6:	f3 1e       	adc	r15, r19
    56e8:	04 1f       	adc	r16, r20
    56ea:	15 1f       	adc	r17, r21
    56ec:	99 e0       	ldi	r25, 0x09	; 9
    56ee:	16 95       	lsr	r17
    56f0:	07 95       	ror	r16
    56f2:	f7 94       	ror	r15
    56f4:	e7 94       	ror	r14
    56f6:	9a 95       	dec	r25
    56f8:	d1 f7       	brne	.-12     	; 0x56ee <f_mkfs+0xaca>
		n_rsv = 1 + partition;
    56fa:	83 2d       	mov	r24, r3
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	01 96       	adiw	r24, 0x01	; 1
    5700:	9c 01       	movw	r18, r24
    5702:	44 27       	eor	r20, r20
    5704:	37 fd       	sbrc	r19, 7
    5706:	40 95       	com	r20
    5708:	54 2f       	mov	r21, r20
    570a:	29 8f       	std	Y+25, r18	; 0x19
    570c:	3a 8f       	std	Y+26, r19	; 0x1a
    570e:	4b 8f       	std	Y+27, r20	; 0x1b
    5710:	5c 8f       	std	Y+28, r21	; 0x1c
    5712:	80 e2       	ldi	r24, 0x20	; 32
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	a0 e0       	ldi	r26, 0x00	; 0
    5718:	b0 e0       	ldi	r27, 0x00	; 0
    571a:	8d 8b       	std	Y+21, r24	; 0x15
    571c:	9e 8b       	std	Y+22, r25	; 0x16
    571e:	af 8b       	std	Y+23, r26	; 0x17
    5720:	b8 8f       	std	Y+24, r27	; 0x18
    5722:	91 e0       	ldi	r25, 0x01	; 1
    5724:	9a a3       	std	Y+34, r25	; 0x22
    5726:	cb cb       	rjmp	.-2154   	; 0x4ebe <f_mkfs+0x29a>

00005728 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    5728:	6f 92       	push	r6
    572a:	7f 92       	push	r7
    572c:	8f 92       	push	r8
    572e:	9f 92       	push	r9
    5730:	af 92       	push	r10
    5732:	bf 92       	push	r11
    5734:	cf 92       	push	r12
    5736:	df 92       	push	r13
    5738:	ef 92       	push	r14
    573a:	ff 92       	push	r15
    573c:	0f 93       	push	r16
    573e:	1f 93       	push	r17
    5740:	df 93       	push	r29
    5742:	cf 93       	push	r28
    5744:	0f 92       	push	r0
    5746:	0f 92       	push	r0
    5748:	cd b7       	in	r28, 0x3d	; 61
    574a:	de b7       	in	r29, 0x3e	; 62
    574c:	5c 01       	movw	r10, r24
    574e:	6b 01       	movw	r12, r22
    5750:	4a 01       	movw	r8, r20
    5752:	8c 01       	movw	r16, r24
    5754:	ee 24       	eor	r14, r14
    5756:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5758:	08 94       	sec
    575a:	c1 08       	sbc	r12, r1
    575c:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    575e:	3e 01       	movw	r6, r28
    5760:	08 94       	sec
    5762:	61 1c       	adc	r6, r1
    5764:	71 1c       	adc	r7, r1
    5766:	13 c0       	rjmp	.+38     	; 0x578e <f_gets+0x66>
    5768:	c4 01       	movw	r24, r8
    576a:	b8 01       	movw	r22, r16
    576c:	41 e0       	ldi	r20, 0x01	; 1
    576e:	50 e0       	ldi	r21, 0x00	; 0
    5770:	93 01       	movw	r18, r6
    5772:	0e 94 97 18 	call	0x312e	; 0x312e <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    5776:	89 81       	ldd	r24, Y+1	; 0x01
    5778:	9a 81       	ldd	r25, Y+2	; 0x02
    577a:	01 97       	sbiw	r24, 0x01	; 1
    577c:	59 f4       	brne	.+22     	; 0x5794 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    577e:	08 94       	sec
    5780:	e1 1c       	adc	r14, r1
    5782:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    5784:	f8 01       	movw	r30, r16
    5786:	81 91       	ld	r24, Z+
    5788:	8f 01       	movw	r16, r30
    578a:	8a 30       	cpi	r24, 0x0A	; 10
    578c:	19 f0       	breq	.+6      	; 0x5794 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    578e:	ec 14       	cp	r14, r12
    5790:	fd 04       	cpc	r15, r13
    5792:	54 f3       	brlt	.-44     	; 0x5768 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    5794:	f8 01       	movw	r30, r16
    5796:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    5798:	ef 28       	or	r14, r15
    579a:	11 f4       	brne	.+4      	; 0x57a0 <f_gets+0x78>
    579c:	aa 24       	eor	r10, r10
    579e:	bb 24       	eor	r11, r11
}
    57a0:	c5 01       	movw	r24, r10
    57a2:	0f 90       	pop	r0
    57a4:	0f 90       	pop	r0
    57a6:	cf 91       	pop	r28
    57a8:	df 91       	pop	r29
    57aa:	1f 91       	pop	r17
    57ac:	0f 91       	pop	r16
    57ae:	ff 90       	pop	r15
    57b0:	ef 90       	pop	r14
    57b2:	df 90       	pop	r13
    57b4:	cf 90       	pop	r12
    57b6:	bf 90       	pop	r11
    57b8:	af 90       	pop	r10
    57ba:	9f 90       	pop	r9
    57bc:	8f 90       	pop	r8
    57be:	7f 90       	pop	r7
    57c0:	6f 90       	pop	r6
    57c2:	08 95       	ret

000057c4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    57c4:	0f 93       	push	r16
    57c6:	1f 93       	push	r17
    57c8:	df 93       	push	r29
    57ca:	cf 93       	push	r28
    57cc:	00 d0       	rcall	.+0      	; 0x57ce <f_putc+0xa>
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    57d4:	61 15       	cp	r22, r1
    57d6:	71 05       	cpc	r23, r1
    57d8:	91 f0       	breq	.+36     	; 0x57fe <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    57da:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    57dc:	cb 01       	movw	r24, r22
    57de:	be 01       	movw	r22, r28
    57e0:	6f 5f       	subi	r22, 0xFF	; 255
    57e2:	7f 4f       	sbci	r23, 0xFF	; 255
    57e4:	41 e0       	ldi	r20, 0x01	; 1
    57e6:	50 e0       	ldi	r21, 0x00	; 0
    57e8:	9e 01       	movw	r18, r28
    57ea:	2e 5f       	subi	r18, 0xFE	; 254
    57ec:	3f 4f       	sbci	r19, 0xFF	; 255
    57ee:	0e 94 8d 1a 	call	0x351a	; 0x351a <f_write>
	return bw ? chr : EOF;		/* Return the result */
    57f2:	8a 81       	ldd	r24, Y+2	; 0x02
    57f4:	9b 81       	ldd	r25, Y+3	; 0x03
    57f6:	89 2b       	or	r24, r25
    57f8:	11 f4       	brne	.+4      	; 0x57fe <f_putc+0x3a>
    57fa:	0f ef       	ldi	r16, 0xFF	; 255
    57fc:	1f ef       	ldi	r17, 0xFF	; 255
}
    57fe:	c8 01       	movw	r24, r16
    5800:	23 96       	adiw	r28, 0x03	; 3
    5802:	cd bf       	out	0x3d, r28	; 61
    5804:	de bf       	out	0x3e, r29	; 62
    5806:	cf 91       	pop	r28
    5808:	df 91       	pop	r29
    580a:	1f 91       	pop	r17
    580c:	0f 91       	pop	r16
    580e:	08 95       	ret

00005810 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5810:	ef 92       	push	r14
    5812:	ff 92       	push	r15
    5814:	0f 93       	push	r16
    5816:	1f 93       	push	r17
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	8c 01       	movw	r16, r24
    581e:	7b 01       	movw	r14, r22
    5820:	c0 e0       	ldi	r28, 0x00	; 0
    5822:	d0 e0       	ldi	r29, 0x00	; 0
    5824:	0d c0       	rjmp	.+26     	; 0x5840 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	b7 01       	movw	r22, r14
    582a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <f_putc>
    582e:	8f 5f       	subi	r24, 0xFF	; 255
    5830:	9f 4f       	sbci	r25, 0xFF	; 255
    5832:	19 f4       	brne	.+6      	; 0x583a <f_puts+0x2a>
    5834:	cf ef       	ldi	r28, 0xFF	; 255
    5836:	df ef       	ldi	r29, 0xFF	; 255
    5838:	07 c0       	rjmp	.+14     	; 0x5848 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    583a:	0f 5f       	subi	r16, 0xFF	; 255
    583c:	1f 4f       	sbci	r17, 0xFF	; 255
    583e:	21 96       	adiw	r28, 0x01	; 1
    5840:	f8 01       	movw	r30, r16
    5842:	80 81       	ld	r24, Z
    5844:	88 23       	and	r24, r24
    5846:	79 f7       	brne	.-34     	; 0x5826 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    5848:	ce 01       	movw	r24, r28
    584a:	df 91       	pop	r29
    584c:	cf 91       	pop	r28
    584e:	1f 91       	pop	r17
    5850:	0f 91       	pop	r16
    5852:	ff 90       	pop	r15
    5854:	ef 90       	pop	r14
    5856:	08 95       	ret

00005858 <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    5858:	89 ec       	ldi	r24, 0xC9	; 201
    585a:	9b e4       	ldi	r25, 0x4B	; 75
    585c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <f_close>
}
    5860:	08 95       	ret

00005862 <SD_Inserted>:

bool SD_Inserted(void){
	return sdValid;
    5862:	80 91 8b 27 	lds	r24, 0x278B
}
    5866:	08 95       	ret

00005868 <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    5868:	af 92       	push	r10
    586a:	bf 92       	push	r11
    586c:	cf 92       	push	r12
    586e:	df 92       	push	r13
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	df 93       	push	r29
    587a:	cf 93       	push	r28
    587c:	0f 92       	push	r0
    587e:	0f 92       	push	r0
    5880:	cd b7       	in	r28, 0x3d	; 61
    5882:	de b7       	in	r29, 0x3e	; 62
    5884:	5c 01       	movw	r10, r24
    5886:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    5888:	89 ec       	ldi	r24, 0xC9	; 201
    588a:	9b e4       	ldi	r25, 0x4B	; 75
    588c:	b5 01       	movw	r22, r10
    588e:	a6 01       	movw	r20, r12
    5890:	9e 01       	movw	r18, r28
    5892:	2f 5f       	subi	r18, 0xFF	; 255
    5894:	3f 4f       	sbci	r19, 0xFF	; 255
    5896:	0e 94 8d 1a 	call	0x351a	; 0x351a <f_write>
    589a:	60 e0       	ldi	r22, 0x00	; 0
    589c:	70 e0       	ldi	r23, 0x00	; 0
    589e:	3b c0       	rjmp	.+118    	; 0x5916 <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    58a0:	e0 90 0a 58 	lds	r14, 0x580A
    58a4:	f0 90 0b 58 	lds	r15, 0x580B
    58a8:	00 91 0c 58 	lds	r16, 0x580C
    58ac:	10 91 0d 58 	lds	r17, 0x580D
    58b0:	20 91 0a 58 	lds	r18, 0x580A
    58b4:	30 91 0b 58 	lds	r19, 0x580B
    58b8:	40 91 0c 58 	lds	r20, 0x580C
    58bc:	50 91 0d 58 	lds	r21, 0x580D
    58c0:	30 70       	andi	r19, 0x00	; 0
    58c2:	40 70       	andi	r20, 0x00	; 0
    58c4:	50 70       	andi	r21, 0x00	; 0
    58c6:	f5 01       	movw	r30, r10
    58c8:	e6 0f       	add	r30, r22
    58ca:	f7 1f       	adc	r31, r23
    58cc:	80 81       	ld	r24, Z
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	a0 e0       	ldi	r26, 0x00	; 0
    58d2:	b0 e0       	ldi	r27, 0x00	; 0
    58d4:	28 27       	eor	r18, r24
    58d6:	39 27       	eor	r19, r25
    58d8:	4a 27       	eor	r20, r26
    58da:	5b 27       	eor	r21, r27
    58dc:	22 0f       	add	r18, r18
    58de:	33 1f       	adc	r19, r19
    58e0:	22 0f       	add	r18, r18
    58e2:	33 1f       	adc	r19, r19
    58e4:	22 5f       	subi	r18, 0xF2	; 242
    58e6:	3c 4d       	sbci	r19, 0xDC	; 220
    58e8:	ef 2c       	mov	r14, r15
    58ea:	f0 2e       	mov	r15, r16
    58ec:	01 2f       	mov	r16, r17
    58ee:	11 27       	eor	r17, r17
    58f0:	f9 01       	movw	r30, r18
    58f2:	80 81       	ld	r24, Z
    58f4:	91 81       	ldd	r25, Z+1	; 0x01
    58f6:	a2 81       	ldd	r26, Z+2	; 0x02
    58f8:	b3 81       	ldd	r27, Z+3	; 0x03
    58fa:	e8 26       	eor	r14, r24
    58fc:	f9 26       	eor	r15, r25
    58fe:	0a 27       	eor	r16, r26
    5900:	1b 27       	eor	r17, r27
    5902:	e0 92 0a 58 	sts	0x580A, r14
    5906:	f0 92 0b 58 	sts	0x580B, r15
    590a:	00 93 0c 58 	sts	0x580C, r16
    590e:	10 93 0d 58 	sts	0x580D, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    5912:	6f 5f       	subi	r22, 0xFF	; 255
    5914:	7f 4f       	sbci	r23, 0xFF	; 255
    5916:	6c 15       	cp	r22, r12
    5918:	7d 05       	cpc	r23, r13
    591a:	10 f2       	brcs	.-124    	; 0x58a0 <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    591c:	0f 90       	pop	r0
    591e:	0f 90       	pop	r0
    5920:	cf 91       	pop	r28
    5922:	df 91       	pop	r29
    5924:	1f 91       	pop	r17
    5926:	0f 91       	pop	r16
    5928:	ff 90       	pop	r15
    592a:	ef 90       	pop	r14
    592c:	df 90       	pop	r13
    592e:	cf 90       	pop	r12
    5930:	bf 90       	pop	r11
    5932:	af 90       	pop	r10
    5934:	08 95       	ret

00005936 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    5936:	60 93 28 31 	sts	0x3128, r22
	tmp32[1] = (uint8_t)(var >> 8);
    593a:	27 2f       	mov	r18, r23
    593c:	38 2f       	mov	r19, r24
    593e:	49 2f       	mov	r20, r25
    5940:	55 27       	eor	r21, r21
    5942:	20 93 29 31 	sts	0x3129, r18
	tmp32[2] = (uint8_t)(var >> 16);
    5946:	9c 01       	movw	r18, r24
    5948:	44 27       	eor	r20, r20
    594a:	55 27       	eor	r21, r21
    594c:	20 93 2a 31 	sts	0x312A, r18
	tmp32[3] = (uint8_t)(var >> 24);
    5950:	69 2f       	mov	r22, r25
    5952:	77 27       	eor	r23, r23
    5954:	88 27       	eor	r24, r24
    5956:	99 27       	eor	r25, r25
    5958:	60 93 2b 31 	sts	0x312B, r22
	SD_WriteBuffer(tmp32,4);
    595c:	88 e2       	ldi	r24, 0x28	; 40
    595e:	91 e3       	ldi	r25, 0x31	; 49
    5960:	64 e0       	ldi	r22, 0x04	; 4
    5962:	70 e0       	ldi	r23, 0x00	; 0
    5964:	0e 94 34 2c 	call	0x5868	; 0x5868 <SD_WriteBuffer>
}
    5968:	08 95       	ret

0000596a <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    596a:	80 93 b3 58 	sts	0x58B3, r24
	tmp16[1] = (uint8_t)(var >> 8);
    596e:	90 93 b4 58 	sts	0x58B4, r25
	SD_WriteBuffer(tmp16,2);
    5972:	83 eb       	ldi	r24, 0xB3	; 179
    5974:	98 e5       	ldi	r25, 0x58	; 88
    5976:	62 e0       	ldi	r22, 0x02	; 2
    5978:	70 e0       	ldi	r23, 0x00	; 0
    597a:	0e 94 34 2c 	call	0x5868	; 0x5868 <SD_WriteBuffer>
}
    597e:	08 95       	ret

00005980 <SD_Write8>:
	return sdValid;
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    5980:	80 93 34 38 	sts	0x3834, r24
	SD_WriteBuffer(tmp8,1);
    5984:	84 e3       	ldi	r24, 0x34	; 52
    5986:	98 e3       	ldi	r25, 0x38	; 56
    5988:	61 e0       	ldi	r22, 0x01	; 1
    598a:	70 e0       	ldi	r23, 0x00	; 0
    598c:	0e 94 34 2c 	call	0x5868	; 0x5868 <SD_WriteBuffer>
}
    5990:	08 95       	ret

00005992 <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5992:	8f ef       	ldi	r24, 0xFF	; 255
    5994:	9f ef       	ldi	r25, 0xFF	; 255
    5996:	af ef       	ldi	r26, 0xFF	; 255
    5998:	bf ef       	ldi	r27, 0xFF	; 255
    599a:	80 93 0a 58 	sts	0x580A, r24
    599e:	90 93 0b 58 	sts	0x580B, r25
    59a2:	a0 93 0c 58 	sts	0x580C, r26
    59a6:	b0 93 0d 58 	sts	0x580D, r27
}
    59aa:	08 95       	ret

000059ac <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    59ac:	60 91 0a 58 	lds	r22, 0x580A
    59b0:	70 91 0b 58 	lds	r23, 0x580B
    59b4:	80 91 0c 58 	lds	r24, 0x580C
    59b8:	90 91 0d 58 	lds	r25, 0x580D
    59bc:	60 95       	com	r22
    59be:	70 95       	com	r23
    59c0:	80 95       	com	r24
    59c2:	90 95       	com	r25
    59c4:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
}
    59c8:	08 95       	ret

000059ca <SD_GetSpaceRemaining>:
    if((strstr(fastString,"true") != 0)){
        wantToRecordFast = true;
    }
}

uint32_t SD_GetSpaceRemaining(void){
    59ca:	ef 92       	push	r14
    59cc:	ff 92       	push	r15
    59ce:	0f 93       	push	r16
    59d0:	1f 93       	push	r17
    59d2:	df 93       	push	r29
    59d4:	cf 93       	push	r28
    59d6:	00 d0       	rcall	.+0      	; 0x59d8 <SD_GetSpaceRemaining+0xe>
    59d8:	0f 92       	push	r0
    59da:	cd b7       	in	r28, 0x3d	; 61
    59dc:	de b7       	in	r29, 0x3e	; 62
	uint32_t totalDiskSpace;
	uint32_t freeSpace;
	uint32_t percentUsed;
	
	f_getfree("0:",&freeSpace,&fs);
    59de:	83 e3       	ldi	r24, 0x33	; 51
    59e0:	90 e2       	ldi	r25, 0x20	; 32
    59e2:	be 01       	movw	r22, r28
    59e4:	6f 5f       	subi	r22, 0xFF	; 255
    59e6:	7f 4f       	sbci	r23, 0xFF	; 255
    59e8:	4e ed       	ldi	r20, 0xDE	; 222
    59ea:	50 e3       	ldi	r21, 0x30	; 48
    59ec:	0e 94 7f 20 	call	0x40fe	; 0x40fe <f_getfree>
	totalDiskSpace = fs->max_clust;
    59f0:	e0 91 de 30 	lds	r30, 0x30DE
    59f4:	f0 91 df 30 	lds	r31, 0x30DF
    59f8:	e2 8c       	ldd	r14, Z+26	; 0x1a
    59fa:	f3 8c       	ldd	r15, Z+27	; 0x1b
    59fc:	04 8d       	ldd	r16, Z+28	; 0x1c
    59fe:	15 8d       	ldd	r17, Z+29	; 0x1d
	
	percentUsed = totalDiskSpace - freeSpace;
    5a00:	89 81       	ldd	r24, Y+1	; 0x01
    5a02:	9a 81       	ldd	r25, Y+2	; 0x02
    5a04:	ab 81       	ldd	r26, Y+3	; 0x03
    5a06:	bc 81       	ldd	r27, Y+4	; 0x04
    5a08:	a8 01       	movw	r20, r16
    5a0a:	97 01       	movw	r18, r14
    5a0c:	28 1b       	sub	r18, r24
    5a0e:	39 0b       	sbc	r19, r25
    5a10:	4a 0b       	sbc	r20, r26
    5a12:	5b 0b       	sbc	r21, r27
    5a14:	ca 01       	movw	r24, r20
    5a16:	b9 01       	movw	r22, r18
	percentUsed *= 1000;
    5a18:	28 ee       	ldi	r18, 0xE8	; 232
    5a1a:	33 e0       	ldi	r19, 0x03	; 3
    5a1c:	40 e0       	ldi	r20, 0x00	; 0
    5a1e:	50 e0       	ldi	r21, 0x00	; 0
    5a20:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    5a24:	a8 01       	movw	r20, r16
    5a26:	97 01       	movw	r18, r14
    5a28:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    5a2c:	ca 01       	movw	r24, r20
	percentUsed /= totalDiskSpace;
	return percentUsed;
}
    5a2e:	b9 01       	movw	r22, r18
    5a30:	24 96       	adiw	r28, 0x04	; 4
    5a32:	cd bf       	out	0x3d, r28	; 61
    5a34:	de bf       	out	0x3e, r29	; 62
    5a36:	cf 91       	pop	r28
    5a38:	df 91       	pop	r29
    5a3a:	1f 91       	pop	r17
    5a3c:	0f 91       	pop	r16
    5a3e:	ff 90       	pop	r15
    5a40:	ef 90       	pop	r14
    5a42:	08 95       	ret

00005a44 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	SD_Timer.PER = 576;
    5a44:	e0 e0       	ldi	r30, 0x00	; 0
    5a46:	fa e0       	ldi	r31, 0x0A	; 10
    5a48:	80 e4       	ldi	r24, 0x40	; 64
    5a4a:	92 e0       	ldi	r25, 0x02	; 2
    5a4c:	86 a3       	std	Z+38, r24	; 0x26
    5a4e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	SD_Timer.CTRLA = (SD_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    5a50:	80 81       	ld	r24, Z
    5a52:	80 7f       	andi	r24, 0xF0	; 240
    5a54:	86 60       	ori	r24, 0x06	; 6
    5a56:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	SD_Timer.INTCTRLA = (SD_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5a58:	86 81       	ldd	r24, Z+6	; 0x06
    5a5a:	8c 7f       	andi	r24, 0xFC	; 252
    5a5c:	82 60       	ori	r24, 0x02	; 2
    5a5e:	86 83       	std	Z+6, r24	; 0x06
	
}
    5a60:	08 95       	ret

00005a62 <SD_Init>:
0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
};


uint8_t SD_Init(void){
    5a62:	1f 93       	push	r17
	uint8_t tmp;

	SD_CD_Port.DIRCLR = 1 << SD_CD;
    5a64:	80 e1       	ldi	r24, 0x10	; 16
    5a66:	e0 ea       	ldi	r30, 0xA0	; 160
    5a68:	f6 e0       	ldi	r31, 0x06	; 6
    5a6a:	82 83       	std	Z+2, r24	; 0x02
	SD_Timer_Init();
    5a6c:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <SD_Timer_Init>
	tmp = disk_initialize(0);
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	0e 94 ba 05 	call	0xb74	; 0xb74 <disk_initialize>
    5a76:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	63 ed       	ldi	r22, 0xD3	; 211
    5a7c:	77 e2       	ldi	r23, 0x27	; 39
    5a7e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <f_mount>
	f_mount(1, &fso1);
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	61 e0       	ldi	r22, 0x01	; 1
    5a86:	7a e2       	ldi	r23, 0x2A	; 42
    5a88:	0e 94 01 17 	call	0x2e02	; 0x2e02 <f_mount>
	if(tmp == FR_OK){
    5a8c:	11 23       	and	r17, r17
    5a8e:	21 f4       	brne	.+8      	; 0x5a98 <SD_Init+0x36>
		sdValid = true;
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	80 93 8b 27 	sts	0x278B, r24
    5a96:	02 c0       	rjmp	.+4      	; 0x5a9c <SD_Init+0x3a>
	} else {
		sdValid = false;
    5a98:	10 92 8b 27 	sts	0x278B, r1
	}
	
	
	Button_Port.PIN4CTRL =  PORT_OPC_WIREDORPULL_gc;
    5a9c:	80 e3       	ldi	r24, 0x30	; 48
    5a9e:	e0 ea       	ldi	r30, 0xA0	; 160
    5aa0:	f6 e0       	ldi	r31, 0x06	; 6
    5aa2:	84 8b       	std	Z+20, r24	; 0x14
	return tmp;
}
    5aa4:	81 2f       	mov	r24, r17
    5aa6:	1f 91       	pop	r17
    5aa8:	08 95       	ret

00005aaa <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(SD_Timer_vect)
{
    5aaa:	1f 92       	push	r1
    5aac:	0f 92       	push	r0
    5aae:	0f b6       	in	r0, 0x3f	; 63
    5ab0:	0f 92       	push	r0
    5ab2:	0b b6       	in	r0, 0x3b	; 59
    5ab4:	0f 92       	push	r0
    5ab6:	11 24       	eor	r1, r1
    5ab8:	2f 93       	push	r18
    5aba:	3f 93       	push	r19
    5abc:	4f 93       	push	r20
    5abe:	5f 93       	push	r21
    5ac0:	6f 93       	push	r22
    5ac2:	7f 93       	push	r23
    5ac4:	8f 93       	push	r24
    5ac6:	9f 93       	push	r25
    5ac8:	af 93       	push	r26
    5aca:	bf 93       	push	r27
    5acc:	ef 93       	push	r30
    5ace:	ff 93       	push	r31
	disk_timerproc();
    5ad0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <disk_timerproc>
	if(!sdValid){
    5ad4:	80 91 8b 27 	lds	r24, 0x278B
    5ad8:	88 23       	and	r24, r24
    5ada:	31 f4       	brne	.+12     	; 0x5ae8 <__vector_47+0x3e>
		if((SD_CD_Port.IN & (1<<SD_CD)) == 0 ){
    5adc:	80 91 a8 06 	lds	r24, 0x06A8
    5ae0:	84 fd       	sbrc	r24, 4
    5ae2:	02 c0       	rjmp	.+4      	; 0x5ae8 <__vector_47+0x3e>
			SD_Init();
    5ae4:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <SD_Init>
		}
	}
}
    5ae8:	ff 91       	pop	r31
    5aea:	ef 91       	pop	r30
    5aec:	bf 91       	pop	r27
    5aee:	af 91       	pop	r26
    5af0:	9f 91       	pop	r25
    5af2:	8f 91       	pop	r24
    5af4:	7f 91       	pop	r23
    5af6:	6f 91       	pop	r22
    5af8:	5f 91       	pop	r21
    5afa:	4f 91       	pop	r20
    5afc:	3f 91       	pop	r19
    5afe:	2f 91       	pop	r18
    5b00:	0f 90       	pop	r0
    5b02:	0b be       	out	0x3b, r0	; 59
    5b04:	0f 90       	pop	r0
    5b06:	0f be       	out	0x3f, r0	; 63
    5b08:	0f 90       	pop	r0
    5b0a:	1f 90       	pop	r1
    5b0c:	18 95       	reti

00005b0e <Button_Init>:
//				Joshua Schapiro
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button, bool enableInt, uint8_t edge, uint8_t intNumber,uint8_t intLevel){
    5b0e:	0f 93       	push	r16
	Button_Port.DIRCLR = (1 << button);
    5b10:	e1 e0       	ldi	r30, 0x01	; 1
    5b12:	f0 e0       	ldi	r31, 0x00	; 0
    5b14:	02 c0       	rjmp	.+4      	; 0x5b1a <Button_Init+0xc>
    5b16:	ee 0f       	add	r30, r30
    5b18:	ff 1f       	adc	r31, r31
    5b1a:	8a 95       	dec	r24
    5b1c:	e2 f7       	brpl	.-8      	; 0x5b16 <Button_Init+0x8>
    5b1e:	a0 ea       	ldi	r26, 0xA0	; 160
    5b20:	b6 e0       	ldi	r27, 0x06	; 6
    5b22:	12 96       	adiw	r26, 0x02	; 2
    5b24:	ec 93       	st	X, r30
    5b26:	12 97       	sbiw	r26, 0x02	; 2
	
	PORTCFG.MPCMASK = (1 << button);
    5b28:	e0 93 b0 00 	sts	0x00B0, r30
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc | edge;
    5b2c:	48 63       	ori	r20, 0x38	; 56
    5b2e:	50 96       	adiw	r26, 0x10	; 16
    5b30:	4c 93       	st	X, r20
    5b32:	50 97       	sbiw	r26, 0x10	; 16
	if(enableInt){
    5b34:	66 23       	and	r22, r22
    5b36:	a1 f0       	breq	.+40     	; 0x5b60 <Button_Init+0x52>
		if(intNumber == 0){
    5b38:	22 23       	and	r18, r18
    5b3a:	31 f4       	brne	.+12     	; 0x5b48 <Button_Init+0x3a>
			Button_Port.INT0MASK = (1<<button); 
    5b3c:	1a 96       	adiw	r26, 0x0a	; 10
    5b3e:	ec 93       	st	X, r30
    5b40:	1a 97       	sbiw	r26, 0x0a	; 10
			Button_Port.INTCTRL |= intLevel;
    5b42:	80 91 a9 06 	lds	r24, 0x06A9
    5b46:	09 c0       	rjmp	.+18     	; 0x5b5a <Button_Init+0x4c>
		} else if (intNumber == 1){
    5b48:	21 30       	cpi	r18, 0x01	; 1
    5b4a:	51 f4       	brne	.+20     	; 0x5b60 <Button_Init+0x52>
			Button_Port.INT1MASK = (1<<button); 
    5b4c:	1b 96       	adiw	r26, 0x0b	; 11
    5b4e:	ec 93       	st	X, r30
    5b50:	1b 97       	sbiw	r26, 0x0b	; 11
			Button_Port.INTCTRL |= (intLevel << 2);
    5b52:	80 91 a9 06 	lds	r24, 0x06A9
    5b56:	00 0f       	add	r16, r16
    5b58:	00 0f       	add	r16, r16
    5b5a:	80 2b       	or	r24, r16
    5b5c:	19 96       	adiw	r26, 0x09	; 9
    5b5e:	8c 93       	st	X, r24
		}
	}
}
    5b60:	0f 91       	pop	r16
    5b62:	08 95       	ret

00005b64 <Button_Pressed>:


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    5b64:	40 91 a8 06 	lds	r20, 0x06A8
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	21 e0       	ldi	r18, 0x01	; 1
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	02 c0       	rjmp	.+4      	; 0x5b74 <Button_Pressed+0x10>
    5b70:	22 0f       	add	r18, r18
    5b72:	33 1f       	adc	r19, r19
    5b74:	8a 95       	dec	r24
    5b76:	e2 f7       	brpl	.-8      	; 0x5b70 <Button_Pressed+0xc>
    5b78:	50 e0       	ldi	r21, 0x00	; 0
    5b7a:	24 23       	and	r18, r20
    5b7c:	35 23       	and	r19, r21
    5b7e:	12 16       	cp	r1, r18
    5b80:	13 06       	cpc	r1, r19
    5b82:	0c f0       	brlt	.+2      	; 0x5b86 <Button_Pressed+0x22>
    5b84:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
} 
    5b86:	89 2f       	mov	r24, r25
    5b88:	08 95       	ret

00005b8a <Accel_Write_Byte>:
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5b8a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b8c:	f8 e0       	ldi	r31, 0x08	; 8
    5b8e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5b90:	80 91 c2 08 	lds	r24, 0x08C2
    5b94:	87 ff       	sbrs	r24, 7
    5b96:	fc cf       	rjmp	.-8      	; 0x5b90 <Accel_Write_Byte+0x6>
}
    5b98:	08 95       	ret

00005b9a <Accel_Read_Byte>:
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5b9a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b9c:	f8 e0       	ldi	r31, 0x08	; 8
    5b9e:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5ba0:	80 91 c2 08 	lds	r24, 0x08C2
    5ba4:	87 ff       	sbrs	r24, 7
    5ba6:	fc cf       	rjmp	.-8      	; 0x5ba0 <Accel_Read_Byte+0x6>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5ba8:	80 91 c3 08 	lds	r24, 0x08C3
}
    5bac:	08 95       	ret

00005bae <Accel_WriteToAddress>:


void Accel_WriteToAddress(uint8_t addr, uint8_t byte){
    Accel_selectChip();
    5bae:	90 e1       	ldi	r25, 0x10	; 16
    5bb0:	e0 e4       	ldi	r30, 0x40	; 64
    5bb2:	f6 e0       	ldi	r31, 0x06	; 6
    5bb4:	96 83       	std	Z+6, r25	; 0x06
    Accel_Write_Byte(addr & 0b00111111);
    5bb6:	8f 73       	andi	r24, 0x3F	; 63
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5bb8:	e0 ec       	ldi	r30, 0xC0	; 192
    5bba:	f8 e0       	ldi	r31, 0x08	; 8
    5bbc:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5bbe:	80 91 c2 08 	lds	r24, 0x08C2
    5bc2:	87 ff       	sbrs	r24, 7
    5bc4:	fc cf       	rjmp	.-8      	; 0x5bbe <Accel_WriteToAddress+0x10>
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5bc6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bc8:	f8 e0       	ldi	r31, 0x08	; 8
    5bca:	63 83       	std	Z+3, r22	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5bcc:	80 91 c2 08 	lds	r24, 0x08C2
    5bd0:	87 ff       	sbrs	r24, 7
    5bd2:	fc cf       	rjmp	.-8      	; 0x5bcc <Accel_WriteToAddress+0x1e>

void Accel_WriteToAddress(uint8_t addr, uint8_t byte){
    Accel_selectChip();
    Accel_Write_Byte(addr & 0b00111111);
    Accel_Write_Byte(byte);
    Accel_deselectChip();
    5bd4:	80 e1       	ldi	r24, 0x10	; 16
    5bd6:	e0 e4       	ldi	r30, 0x40	; 64
    5bd8:	f6 e0       	ldi	r31, 0x06	; 6
    5bda:	85 83       	std	Z+5, r24	; 0x05
}
    5bdc:	08 95       	ret

00005bde <Accel_ReadFromAddress>:


uint8_t Accel_ReadFromAddress(uint8_t addr){
    uint8_t tmp;
    Accel_selectChip();
    5bde:	90 e1       	ldi	r25, 0x10	; 16
    5be0:	e0 e4       	ldi	r30, 0x40	; 64
    5be2:	f6 e0       	ldi	r31, 0x06	; 6
    5be4:	96 83       	std	Z+6, r25	; 0x06
    Accel_Write_Byte(addr | 0b10000000);
    5be6:	80 68       	ori	r24, 0x80	; 128
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5be8:	e0 ec       	ldi	r30, 0xC0	; 192
    5bea:	f8 e0       	ldi	r31, 0x08	; 8
    5bec:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5bee:	80 91 c2 08 	lds	r24, 0x08C2
    5bf2:	87 ff       	sbrs	r24, 7
    5bf4:	fc cf       	rjmp	.-8      	; 0x5bee <Accel_ReadFromAddress+0x10>
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5bf6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bf8:	f8 e0       	ldi	r31, 0x08	; 8
    5bfa:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5bfc:	80 91 c2 08 	lds	r24, 0x08C2
    5c00:	87 ff       	sbrs	r24, 7
    5c02:	fc cf       	rjmp	.-8      	; 0x5bfc <Accel_ReadFromAddress+0x1e>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5c04:	80 91 c3 08 	lds	r24, 0x08C3
uint8_t Accel_ReadFromAddress(uint8_t addr){
    uint8_t tmp;
    Accel_selectChip();
    Accel_Write_Byte(addr | 0b10000000);
    tmp = Accel_Read_Byte();
    Accel_deselectChip();
    5c08:	90 e1       	ldi	r25, 0x10	; 16
    5c0a:	e0 e4       	ldi	r30, 0x40	; 64
    5c0c:	f6 e0       	ldi	r31, 0x06	; 6
    5c0e:	95 83       	std	Z+5, r25	; 0x05
    return tmp;
}
    5c10:	08 95       	ret

00005c12 <Accel_ReadResults>:

void Accel_ReadResults(uint16_t  ** buffLocation, uint8_t bufferNumber, uint16_t bufferCounter){
    5c12:	cf 93       	push	r28
    5c14:	df 93       	push	r29
    5c16:	9c 01       	movw	r18, r24
    5c18:	da 01       	movw	r26, r20
    // 0 = x, 1 = y, 2 = z

    Accel_selectChip();
    5c1a:	80 e1       	ldi	r24, 0x10	; 16
    5c1c:	e0 e4       	ldi	r30, 0x40	; 64
    5c1e:	f6 e0       	ldi	r31, 0x06	; 6
    5c20:	86 83       	std	Z+6, r24	; 0x06
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5c22:	82 ef       	ldi	r24, 0xF2	; 242
    5c24:	e0 ec       	ldi	r30, 0xC0	; 192
    5c26:	f8 e0       	ldi	r31, 0x08	; 8
    5c28:	83 83       	std	Z+3, r24	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5c2a:	80 91 c2 08 	lds	r24, 0x08C2
    5c2e:	87 ff       	sbrs	r24, 7
    5c30:	fc cf       	rjmp	.-8      	; 0x5c2a <Accel_ReadResults+0x18>
void Accel_ReadResults(uint16_t  ** buffLocation, uint8_t bufferNumber, uint16_t bufferCounter){
    // 0 = x, 1 = y, 2 = z

    Accel_selectChip();
    Accel_Write_Byte(0x32 | 0b11000000);
    buffLocation[bufferNumber][bufferCounter] = Accel_Read_Byte();
    5c32:	e6 2f       	mov	r30, r22
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	ee 0f       	add	r30, r30
    5c38:	ff 1f       	adc	r31, r31
    5c3a:	e2 0f       	add	r30, r18
    5c3c:	f3 1f       	adc	r31, r19
    5c3e:	c0 81       	ld	r28, Z
    5c40:	d1 81       	ldd	r29, Z+1	; 0x01
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5c42:	e0 ec       	ldi	r30, 0xC0	; 192
    5c44:	f8 e0       	ldi	r31, 0x08	; 8
    5c46:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5c48:	80 91 c2 08 	lds	r24, 0x08C2
    5c4c:	87 ff       	sbrs	r24, 7
    5c4e:	fc cf       	rjmp	.-8      	; 0x5c48 <Accel_ReadResults+0x36>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5c50:	20 91 c3 08 	lds	r18, 0x08C3
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5c54:	e0 ec       	ldi	r30, 0xC0	; 192
    5c56:	f8 e0       	ldi	r31, 0x08	; 8
    5c58:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5c5a:	80 91 c2 08 	lds	r24, 0x08C2
    5c5e:	87 ff       	sbrs	r24, 7
    5c60:	fc cf       	rjmp	.-8      	; 0x5c5a <Accel_ReadResults+0x48>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5c62:	40 91 c3 08 	lds	r20, 0x08C3

    Accel_selectChip();
    Accel_Write_Byte(0x32 | 0b11000000);
    buffLocation[bufferNumber][bufferCounter] = Accel_Read_Byte();
    buffLocation[bufferNumber][bufferCounter] += Accel_Read_Byte() * 256;
    buffLocation[bufferNumber][bufferCounter] += 1024;
    5c66:	fd 01       	movw	r30, r26
    5c68:	ee 0f       	add	r30, r30
    5c6a:	ff 1f       	adc	r31, r31
    5c6c:	ec 0f       	add	r30, r28
    5c6e:	fd 1f       	adc	r31, r29
    5c70:	30 e0       	ldi	r19, 0x00	; 0
    5c72:	20 50       	subi	r18, 0x00	; 0
    5c74:	3c 4f       	sbci	r19, 0xFC	; 252
    5c76:	94 2f       	mov	r25, r20
    5c78:	80 e0       	ldi	r24, 0x00	; 0
    5c7a:	28 0f       	add	r18, r24
    5c7c:	39 1f       	adc	r19, r25
    5c7e:	20 83       	st	Z, r18
    5c80:	31 83       	std	Z+1, r19	; 0x01
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5c82:	e0 ec       	ldi	r30, 0xC0	; 192
    5c84:	f8 e0       	ldi	r31, 0x08	; 8
    5c86:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5c88:	80 91 c2 08 	lds	r24, 0x08C2
    5c8c:	87 ff       	sbrs	r24, 7
    5c8e:	fc cf       	rjmp	.-8      	; 0x5c88 <Accel_ReadResults+0x76>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5c90:	20 91 c3 08 	lds	r18, 0x08C3
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5c94:	e0 ec       	ldi	r30, 0xC0	; 192
    5c96:	f8 e0       	ldi	r31, 0x08	; 8
    5c98:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5c9a:	80 91 c2 08 	lds	r24, 0x08C2
    5c9e:	87 ff       	sbrs	r24, 7
    5ca0:	fc cf       	rjmp	.-8      	; 0x5c9a <Accel_ReadResults+0x88>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5ca2:	40 91 c3 08 	lds	r20, 0x08C3
    buffLocation[bufferNumber][bufferCounter] = Accel_Read_Byte();
    buffLocation[bufferNumber][bufferCounter] += Accel_Read_Byte() * 256;
    buffLocation[bufferNumber][bufferCounter] += 1024;
    buffLocation[bufferNumber][bufferCounter+1] = Accel_Read_Byte();
    buffLocation[bufferNumber][bufferCounter+1] += Accel_Read_Byte() * 256;
    buffLocation[bufferNumber][bufferCounter+1] += 1024;
    5ca6:	fd 01       	movw	r30, r26
    5ca8:	31 96       	adiw	r30, 0x01	; 1
    5caa:	ee 0f       	add	r30, r30
    5cac:	ff 1f       	adc	r31, r31
    5cae:	ec 0f       	add	r30, r28
    5cb0:	fd 1f       	adc	r31, r29
    5cb2:	30 e0       	ldi	r19, 0x00	; 0
    5cb4:	20 50       	subi	r18, 0x00	; 0
    5cb6:	3c 4f       	sbci	r19, 0xFC	; 252
    5cb8:	94 2f       	mov	r25, r20
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	28 0f       	add	r18, r24
    5cbe:	39 1f       	adc	r19, r25
    5cc0:	20 83       	st	Z, r18
    5cc2:	31 83       	std	Z+1, r19	; 0x01
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5cc4:	e0 ec       	ldi	r30, 0xC0	; 192
    5cc6:	f8 e0       	ldi	r31, 0x08	; 8
    5cc8:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5cca:	80 91 c2 08 	lds	r24, 0x08C2
    5cce:	87 ff       	sbrs	r24, 7
    5cd0:	fc cf       	rjmp	.-8      	; 0x5cca <Accel_ReadResults+0xb8>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5cd2:	20 91 c3 08 	lds	r18, 0x08C3
}



void Accel_Write_Byte(uint8_t tmp){
	Accel_SPI.DATA = tmp;
    5cd6:	e0 ec       	ldi	r30, 0xC0	; 192
    5cd8:	f8 e0       	ldi	r31, 0x08	; 8
    5cda:	13 82       	std	Z+3, r1	; 0x03
	while(!(Accel_SPI.STATUS & SPI_IF_bm));
    5cdc:	80 91 c2 08 	lds	r24, 0x08C2
    5ce0:	87 ff       	sbrs	r24, 7
    5ce2:	fc cf       	rjmp	.-8      	; 0x5cdc <Accel_ReadResults+0xca>
}

uint8_t Accel_Read_Byte(void){
	Accel_Write_Byte(0);
	return Accel_SPI.DATA;
    5ce4:	40 91 c3 08 	lds	r20, 0x08C3
    buffLocation[bufferNumber][bufferCounter+1] = Accel_Read_Byte();
    buffLocation[bufferNumber][bufferCounter+1] += Accel_Read_Byte() * 256;
    buffLocation[bufferNumber][bufferCounter+1] += 1024;
    buffLocation[bufferNumber][bufferCounter+2] = Accel_Read_Byte();
    buffLocation[bufferNumber][bufferCounter+2] += Accel_Read_Byte() * 256;
    buffLocation[bufferNumber][bufferCounter+2] += 1024;
    5ce8:	12 96       	adiw	r26, 0x02	; 2
    5cea:	aa 0f       	add	r26, r26
    5cec:	bb 1f       	adc	r27, r27
    5cee:	ca 0f       	add	r28, r26
    5cf0:	db 1f       	adc	r29, r27
    5cf2:	30 e0       	ldi	r19, 0x00	; 0
    5cf4:	20 50       	subi	r18, 0x00	; 0
    5cf6:	3c 4f       	sbci	r19, 0xFC	; 252
    5cf8:	94 2f       	mov	r25, r20
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
    5cfc:	28 0f       	add	r18, r24
    5cfe:	39 1f       	adc	r19, r25
    5d00:	28 83       	st	Y, r18
    5d02:	39 83       	std	Y+1, r19	; 0x01
    Accel_deselectChip();
    5d04:	80 e1       	ldi	r24, 0x10	; 16
    5d06:	e0 e4       	ldi	r30, 0x40	; 64
    5d08:	f6 e0       	ldi	r31, 0x06	; 6
    5d0a:	85 83       	std	Z+5, r24	; 0x05
}
    5d0c:	df 91       	pop	r29
    5d0e:	cf 91       	pop	r28
    5d10:	08 95       	ret

00005d12 <Sensors_ResetAccelBuffers>:

void Sensors_ResetAccelBuffers(void){
	accelBufferCounter = 0;
    5d12:	10 92 6f 27 	sts	0x276F, r1
    5d16:	10 92 70 27 	sts	0x2770, r1
  	accelBufferToWriteTo = 0;
    5d1a:	10 92 6e 27 	sts	0x276E, r1
	for(uint8_t i = 0; i < accelNumberOfBuffers; i++){
		okToSendAccelBuffer[i] = false;
    5d1e:	10 92 26 31 	sts	0x3126, r1
    5d22:	10 92 27 31 	sts	0x3127, r1
	}	
}
    5d26:	08 95       	ret

00005d28 <Accel_Init>:



void Accel_Init(void){

    Accel_PORT.DIRSET = Accel_MOSI_bm | Accel_SCK_bm | Accel_SS_bm;
    5d28:	e0 e4       	ldi	r30, 0x40	; 64
    5d2a:	f6 e0       	ldi	r31, 0x06	; 6
    5d2c:	80 eb       	ldi	r24, 0xB0	; 176
    5d2e:	81 83       	std	Z+1, r24	; 0x01
    Accel_PORT.Accel_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5d30:	88 e3       	ldi	r24, 0x38	; 56
    5d32:	84 8b       	std	Z+20, r24	; 0x14
    Accel_deselectChip();
    5d34:	80 e1       	ldi	r24, 0x10	; 16
    5d36:	85 83       	std	Z+5, r24	; 0x05

	  //Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
  	Accel_SPI.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_3_gc | SPI_PRESCALER_DIV4_gc;
    5d38:	e0 ec       	ldi	r30, 0xC0	; 192
    5d3a:	f8 e0       	ldi	r31, 0x08	; 8
    5d3c:	80 81       	ld	r24, Z
    5d3e:	8c 65       	ori	r24, 0x5C	; 92
    5d40:	80 83       	st	Z, r24

    Accel_INT_Port.DIRCLR = (1 << Accel_INT1) | (1 << Accel_INT2);
    5d42:	8c e0       	ldi	r24, 0x0C	; 12
    5d44:	e0 ea       	ldi	r30, 0xA0	; 160
    5d46:	f6 e0       	ldi	r31, 0x06	; 6
    5d48:	82 83       	std	Z+2, r24	; 0x02

    Accel_WriteToAddress(0x31,0x09);    // Data format:  4 wire spi, full resolution, right justified, 4 g's
    5d4a:	81 e3       	ldi	r24, 0x31	; 49
    5d4c:	69 e0       	ldi	r22, 0x09	; 9
    5d4e:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <Accel_WriteToAddress>
    Accel_WriteToAddress(0x2C,0x0C);    // normal operation, rate code of 400
    5d52:	8c e2       	ldi	r24, 0x2C	; 44
    5d54:	6c e0       	ldi	r22, 0x0C	; 12
    5d56:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <Accel_WriteToAddress>
    Accel_WriteToAddress(0x2D,0x08);    // measure mode
    5d5a:	8d e2       	ldi	r24, 0x2D	; 45
    5d5c:	68 e0       	ldi	r22, 0x08	; 8
    5d5e:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <Accel_WriteToAddress>
    	// div  = 8
    	// per  = 5760 (remember to subtract 1)
    	//  => 320 samples per second

    	// Set period/TOP value
    Accel_Sample_Timer.PER = 5759;
    5d62:	e0 e0       	ldi	r30, 0x00	; 0
    5d64:	fb e0       	ldi	r31, 0x0B	; 11
    5d66:	8f e7       	ldi	r24, 0x7F	; 127
    5d68:	96 e1       	ldi	r25, 0x16	; 22
    5d6a:	86 a3       	std	Z+38, r24	; 0x26
    5d6c:	97 a3       	std	Z+39, r25	; 0x27

    	// Select clock source
    Accel_Sample_Timer.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    5d6e:	80 81       	ld	r24, Z
    5d70:	80 7f       	andi	r24, 0xF0	; 240
    5d72:	84 60       	ori	r24, 0x04	; 4
    5d74:	80 83       	st	Z, r24

    	// Enable CCA interrupt
    Accel_Sample_Timer.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    5d76:	86 81       	ldd	r24, Z+6	; 0x06
    5d78:	83 60       	ori	r24, 0x03	; 3
    5d7a:	86 83       	std	Z+6, r24	; 0x06

	
	Sensors_ResetAccelBuffers();
    5d7c:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <Sensors_ResetAccelBuffers>
}
    5d80:	08 95       	ret

00005d82 <__vector_108>:
	}	
}


ISR(Accel_Sample_Timer_vect)
{
    5d82:	1f 92       	push	r1
    5d84:	0f 92       	push	r0
    5d86:	0f b6       	in	r0, 0x3f	; 63
    5d88:	0f 92       	push	r0
    5d8a:	0b b6       	in	r0, 0x3b	; 59
    5d8c:	0f 92       	push	r0
    5d8e:	11 24       	eor	r1, r1
    5d90:	2f 93       	push	r18
    5d92:	3f 93       	push	r19
    5d94:	4f 93       	push	r20
    5d96:	5f 93       	push	r21
    5d98:	6f 93       	push	r22
    5d9a:	7f 93       	push	r23
    5d9c:	8f 93       	push	r24
    5d9e:	9f 93       	push	r25
    5da0:	af 93       	push	r26
    5da2:	bf 93       	push	r27
    5da4:	cf 93       	push	r28
    5da6:	df 93       	push	r29
    5da8:	ef 93       	push	r30
    5daa:	ff 93       	push	r31
	if(recording && wantToRecordFast && !okToSendAccelBuffer[accelBufferToWriteTo]){ 
    5dac:	80 91 61 27 	lds	r24, 0x2761
    5db0:	88 23       	and	r24, r24
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <__vector_108+0x34>
    5db4:	3f c0       	rjmp	.+126    	; 0x5e34 <__vector_108+0xb2>
    5db6:	80 91 60 27 	lds	r24, 0x2760
    5dba:	88 23       	and	r24, r24
    5dbc:	d9 f1       	breq	.+118    	; 0x5e34 <__vector_108+0xb2>
    5dbe:	80 91 6e 27 	lds	r24, 0x276E
    5dc2:	c8 2f       	mov	r28, r24
    5dc4:	d0 e0       	ldi	r29, 0x00	; 0
    5dc6:	fe 01       	movw	r30, r28
    5dc8:	ea 5d       	subi	r30, 0xDA	; 218
    5dca:	fe 4c       	sbci	r31, 0xCE	; 206
    5dcc:	80 81       	ld	r24, Z
    5dce:	88 23       	and	r24, r24
    5dd0:	89 f5       	brne	.+98     	; 0x5e34 <__vector_108+0xb2>
		if(accelBufferCounter == 0){
    5dd2:	80 91 6f 27 	lds	r24, 0x276F
    5dd6:	90 91 70 27 	lds	r25, 0x2770
    5dda:	89 2b       	or	r24, r25
    5ddc:	61 f4       	brne	.+24     	; 0x5df6 <__vector_108+0x74>
			accelSampleStartTime[accelBufferToWriteTo] = Time_Get32BitTimer();
    5dde:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    5de2:	cc 0f       	add	r28, r28
    5de4:	dd 1f       	adc	r29, r29
    5de6:	cc 0f       	add	r28, r28
    5de8:	dd 1f       	adc	r29, r29
    5dea:	c4 54       	subi	r28, 0x44	; 68
    5dec:	dd 4c       	sbci	r29, 0xCD	; 205
    5dee:	68 83       	st	Y, r22
    5df0:	79 83       	std	Y+1, r23	; 0x01
    5df2:	8a 83       	std	Y+2, r24	; 0x02
    5df4:	9b 83       	std	Y+3, r25	; 0x03
		}
		
		
		//Accel_ReadResults(accelBuffer,accelBufferToWriteTo,accelBufferCounter);
		
		accelBufferCounter+=3;
    5df6:	80 91 6f 27 	lds	r24, 0x276F
    5dfa:	90 91 70 27 	lds	r25, 0x2770
    5dfe:	03 96       	adiw	r24, 0x03	; 3
    5e00:	80 93 6f 27 	sts	0x276F, r24
    5e04:	90 93 70 27 	sts	0x2770, r25
		
		if(accelBufferCounter == accelNumberOfSamples*accelNumberOfChannels){
    5e08:	84 58       	subi	r24, 0x84	; 132
    5e0a:	93 40       	sbci	r25, 0x03	; 3
    5e0c:	99 f4       	brne	.+38     	; 0x5e34 <__vector_108+0xb2>
			accelBufferCounter=0;
    5e0e:	10 92 6f 27 	sts	0x276F, r1
    5e12:	10 92 70 27 	sts	0x2770, r1
			okToSendAccelBuffer[accelBufferToWriteTo] = true;
    5e16:	80 91 6e 27 	lds	r24, 0x276E
    5e1a:	e8 2f       	mov	r30, r24
    5e1c:	f0 e0       	ldi	r31, 0x00	; 0
    5e1e:	ea 5d       	subi	r30, 0xDA	; 218
    5e20:	fe 4c       	sbci	r31, 0xCE	; 206
    5e22:	91 e0       	ldi	r25, 0x01	; 1
    5e24:	90 83       	st	Z, r25
			accelBufferToWriteTo++;
    5e26:	8f 5f       	subi	r24, 0xFF	; 255
    5e28:	80 93 6e 27 	sts	0x276E, r24
			if(accelBufferToWriteTo == accelNumberOfBuffers){
    5e2c:	82 30       	cpi	r24, 0x02	; 2
    5e2e:	11 f4       	brne	.+4      	; 0x5e34 <__vector_108+0xb2>
				accelBufferToWriteTo = 0;
    5e30:	10 92 6e 27 	sts	0x276E, r1
			}
		}
	}
}
    5e34:	ff 91       	pop	r31
    5e36:	ef 91       	pop	r30
    5e38:	df 91       	pop	r29
    5e3a:	cf 91       	pop	r28
    5e3c:	bf 91       	pop	r27
    5e3e:	af 91       	pop	r26
    5e40:	9f 91       	pop	r25
    5e42:	8f 91       	pop	r24
    5e44:	7f 91       	pop	r23
    5e46:	6f 91       	pop	r22
    5e48:	5f 91       	pop	r21
    5e4a:	4f 91       	pop	r20
    5e4c:	3f 91       	pop	r19
    5e4e:	2f 91       	pop	r18
    5e50:	0f 90       	pop	r0
    5e52:	0b be       	out	0x3b, r0	; 59
    5e54:	0f 90       	pop	r0
    5e56:	0f be       	out	0x3f, r0	; 63
    5e58:	0f 90       	pop	r0
    5e5a:	1f 90       	pop	r1
    5e5c:	18 95       	reti

00005e5e <Sensors_ReadTemperature>:
	Sensors_ResetEKGBuffers();
	Sensors_ResetHumidityBuffers();
}

uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
    5e5e:	e0 e0       	ldi	r30, 0x00	; 0
    5e60:	f2 e0       	ldi	r31, 0x02	; 2
    5e62:	22 89       	ldd	r18, Z+18	; 0x12
    5e64:	33 89       	ldd	r19, Z+19	; 0x13
}
    5e66:	c9 01       	movw	r24, r18
    5e68:	08 95       	ret

00005e6a <Sensors_ReadRespiration>:

uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
    5e6a:	e0 e4       	ldi	r30, 0x40	; 64
    5e6c:	f2 e0       	ldi	r31, 0x02	; 2
    5e6e:	20 89       	ldd	r18, Z+16	; 0x10
    5e70:	31 89       	ldd	r19, Z+17	; 0x11
}
    5e72:	c9 01       	movw	r24, r18
    5e74:	08 95       	ret

00005e76 <Sensors_ReadEKG>:

uint16_t Sensors_ReadEKG(void){
	return ADCA.EKGResult; 
    5e76:	e0 e0       	ldi	r30, 0x00	; 0
    5e78:	f2 e0       	ldi	r31, 0x02	; 2
    5e7a:	20 89       	ldd	r18, Z+16	; 0x10
    5e7c:	31 89       	ldd	r19, Z+17	; 0x11
}
    5e7e:	c9 01       	movw	r24, r18
    5e80:	08 95       	ret

00005e82 <Sensors_ReadHumidity>:

uint16_t Sensors_ReadHumidity(void){
    5e82:	0f 93       	push	r16
    5e84:	1f 93       	push	r17
	uint32_t tmp =  ADCA.humidityResult - zeroOffsetA;
    5e86:	e0 e0       	ldi	r30, 0x00	; 0
    5e88:	f2 e0       	ldi	r31, 0x02	; 2
    5e8a:	64 89       	ldd	r22, Z+20	; 0x14
    5e8c:	75 89       	ldd	r23, Z+21	; 0x15
    5e8e:	00 91 fe 50 	lds	r16, 0x50FE
    5e92:	10 91 ff 50 	lds	r17, 0x50FF
    5e96:	60 1b       	sub	r22, r16
    5e98:	71 0b       	sbc	r23, r17
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t tmp2 = 0;
    uint32_t tmp3;
	
    tmp *= 19554;
    5e9e:	22 e6       	ldi	r18, 0x62	; 98
    5ea0:	3c e4       	ldi	r19, 0x4C	; 76
    5ea2:	40 e0       	ldi	r20, 0x00	; 0
    5ea4:	50 e0       	ldi	r21, 0x00	; 0
    5ea6:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
    5eaa:	9b 01       	movw	r18, r22
    5eac:	ac 01       	movw	r20, r24
    tmp -= 9756672;
    5eae:	8e e4       	ldi	r24, 0x4E	; 78
    5eb0:	99 e0       	ldi	r25, 0x09	; 9
    5eb2:	08 9f       	mul	r16, r24
    5eb4:	b0 01       	movw	r22, r0
    5eb6:	09 9f       	mul	r16, r25
    5eb8:	70 0d       	add	r23, r0
    5eba:	18 9f       	mul	r17, r24
    5ebc:	70 0d       	add	r23, r0
    5ebe:	11 24       	eor	r1, r1
    5ec0:	80 e0       	ldi	r24, 0x00	; 0
    5ec2:	90 e0       	ldi	r25, 0x00	; 0
    5ec4:	60 50       	subi	r22, 0x00	; 0
    5ec6:	70 4e       	sbci	r23, 0xE0	; 224
    5ec8:	84 49       	sbci	r24, 0x94	; 148
    5eca:	90 40       	sbci	r25, 0x00	; 0
    5ecc:	62 0f       	add	r22, r18
    5ece:	73 1f       	adc	r23, r19
    5ed0:	84 1f       	adc	r24, r20
    5ed2:	95 1f       	adc	r25, r21
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	30 e1       	ldi	r19, 0x10	; 16
    5ed8:	20 1b       	sub	r18, r16
    5eda:	31 0b       	sbc	r19, r17
    5edc:	40 e0       	ldi	r20, 0x00	; 0
    5ede:	50 e0       	ldi	r21, 0x00	; 0
    5ee0:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    5ee4:	ca 01       	movw	r24, r20
    5ee6:	b9 01       	movw	r22, r18
    5ee8:	2a e0       	ldi	r18, 0x0A	; 10
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	40 e0       	ldi	r20, 0x00	; 0
    5eee:	50 e0       	ldi	r21, 0x00	; 0
    5ef0:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    5ef4:	c9 01       	movw	r24, r18
    tmp += (2382*zeroOffsetA);
    tmp3 = tmp / (4096 - zeroOffsetA);       // %RH * 100
	tmp2 = tmp3/10;
	return tmp2;
}
    5ef6:	1f 91       	pop	r17
    5ef8:	0f 91       	pop	r16
    5efa:	08 95       	ret

00005efc <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    5efc:	10 92 63 27 	sts	0x2763, r1
    5f00:	10 92 64 27 	sts	0x2764, r1
  	temperatureBufferToWriteTo = 0;
    5f04:	10 92 62 27 	sts	0x2762, r1
	for(uint16_t i = 0; i < temperatureNumberOfBuffers; i++){
		okToSendTemperatureBuffer[i] = false;
    5f08:	10 92 08 58 	sts	0x5808, r1
    5f0c:	10 92 09 58 	sts	0x5809, r1
	}	
}
    5f10:	08 95       	ret

00005f12 <Sensors_ResetRespirationBuffers>:

void Sensors_ResetRespirationBuffers(void){
	respirationBufferCounter = 0;
    5f12:	10 92 66 27 	sts	0x2766, r1
    5f16:	10 92 67 27 	sts	0x2767, r1
  	respirationBufferToWriteTo = 0;
    5f1a:	10 92 65 27 	sts	0x2765, r1
	for(uint16_t i = 0; i < respirationNumberOfBuffers; i++){
		okToSendRespirationBuffer[i] = false;
    5f1e:	10 92 66 30 	sts	0x3066, r1
    5f22:	10 92 67 30 	sts	0x3067, r1
    5f26:	10 92 68 30 	sts	0x3068, r1
	}	
}
    5f2a:	08 95       	ret

00005f2c <Sensors_ResetEKGBuffers>:

void Sensors_ResetEKGBuffers(void){
	EKGBufferCounter = 0;
    5f2c:	10 92 69 27 	sts	0x2769, r1
    5f30:	10 92 6a 27 	sts	0x276A, r1
  	EKGBufferToWriteTo = 0;
    5f34:	10 92 68 27 	sts	0x2768, r1
	for(uint16_t i = 0; i < EKGNumberOfBuffers; i++){
		okToSendEKGBuffer[i] = false;
    5f38:	10 92 e7 50 	sts	0x50E7, r1
    5f3c:	10 92 e8 50 	sts	0x50E8, r1
    5f40:	10 92 e9 50 	sts	0x50E9, r1
	}	
}
    5f44:	08 95       	ret

00005f46 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    5f46:	10 92 6c 27 	sts	0x276C, r1
    5f4a:	10 92 6d 27 	sts	0x276D, r1
  	humidityBufferToWriteTo = 0;
    5f4e:	10 92 6b 27 	sts	0x276B, r1
	for(uint16_t i = 0; i < humidityNumberOfBuffers; i++){
		okToSendHumidityBuffer[i] = false;
    5f52:	10 92 0e 38 	sts	0x380E, r1
    5f56:	10 92 0f 38 	sts	0x380F, r1
	}	
}
    5f5a:	08 95       	ret

00005f5c <Sensors_Init>:
volatile uint16_t HZ_RefeshCounter2 = 0;

volatile uint16_t ekgCounter = 0;


void Sensors_Init(void){
    5f5c:	cf 93       	push	r28
    5f5e:	df 93       	push	r29
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5f60:	8a ec       	ldi	r24, 0xCA	; 202
    5f62:	91 e0       	ldi	r25, 0x01	; 1
    5f64:	42 e0       	ldi	r20, 0x02	; 2
    5f66:	dc 01       	movw	r26, r24
    5f68:	4c 93       	st	X, r20
 	result = pgm_read_byte(index);
    5f6a:	e0 e2       	ldi	r30, 0x20	; 32
    5f6c:	f0 e0       	ldi	r31, 0x00	; 0
    5f6e:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5f70:	1c 92       	st	X, r1


void Sensors_Init(void){
	
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    5f72:	a0 e0       	ldi	r26, 0x00	; 0
    5f74:	b2 e0       	ldi	r27, 0x02	; 2
    5f76:	1c 96       	adiw	r26, 0x0c	; 12
    5f78:	ec 93       	st	X, r30
    5f7a:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5f7c:	ec 01       	movw	r28, r24
    5f7e:	48 83       	st	Y, r20
 	result = pgm_read_byte(index);
    5f80:	e1 e2       	ldi	r30, 0x21	; 33
    5f82:	f0 e0       	ldi	r31, 0x00	; 0
    5f84:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5f86:	18 82       	st	Y, r1

void Sensors_Init(void){
	
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    5f88:	1d 96       	adiw	r26, 0x0d	; 13
    5f8a:	ec 93       	st	X, r30
    5f8c:	1d 97       	sbiw	r26, 0x0d	; 13
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5f8e:	48 83       	st	Y, r20
 	result = pgm_read_byte(index);
    5f90:	e4 e2       	ldi	r30, 0x24	; 36
    5f92:	f0 e0       	ldi	r31, 0x00	; 0
    5f94:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5f96:	18 82       	st	Y, r1
	
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    5f98:	20 e4       	ldi	r18, 0x40	; 64
    5f9a:	32 e0       	ldi	r19, 0x02	; 2
    5f9c:	e9 01       	movw	r28, r18
    5f9e:	ec 87       	std	Y+12, r30	; 0x0c
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	40 83       	st	Z, r20
 	result = pgm_read_byte(index);
    5fa4:	e5 e2       	ldi	r30, 0x25	; 37
    5fa6:	f0 e0       	ldi	r31, 0x00	; 0
    5fa8:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    5faa:	ec 01       	movw	r28, r24
    5fac:	18 82       	st	Y, r1
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
	ADCB.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    5fae:	e9 01       	movw	r28, r18
    5fb0:	ed 87       	std	Y+13, r30	; 0x0d
	
    // Port A = ekg, temperature, humdity
	
    ADCA.EKGChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5fb2:	61 e0       	ldi	r22, 0x01	; 1
    5fb4:	90 96       	adiw	r26, 0x20	; 32
    5fb6:	6c 93       	st	X, r22
    5fb8:	90 97       	sbiw	r26, 0x20	; 32
    ADCA.EKGChannel.MUXCTRL = EKGMUXPos;
    5fba:	70 e2       	ldi	r23, 0x20	; 32
    5fbc:	91 96       	adiw	r26, 0x21	; 33
    5fbe:	7c 93       	st	X, r23
    5fc0:	91 97       	sbiw	r26, 0x21	; 33
	
    ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5fc2:	98 96       	adiw	r26, 0x28	; 40
    5fc4:	6c 93       	st	X, r22
    5fc6:	98 97       	sbiw	r26, 0x28	; 40
    ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos;
    5fc8:	88 e2       	ldi	r24, 0x28	; 40
    5fca:	99 96       	adiw	r26, 0x29	; 41
    5fcc:	8c 93       	st	X, r24
    5fce:	99 97       	sbiw	r26, 0x29	; 41
	
    ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5fd0:	d0 96       	adiw	r26, 0x30	; 48
    5fd2:	6c 93       	st	X, r22
    5fd4:	d0 97       	sbiw	r26, 0x30	; 48
    ADCA.humidityChannel.MUXCTRL = humidityMUXPos;
    5fd6:	80 e3       	ldi	r24, 0x30	; 48
    5fd8:	d1 96       	adiw	r26, 0x31	; 49
    5fda:	8c 93       	st	X, r24
    5fdc:	d1 97       	sbiw	r26, 0x31	; 49
	
	ADCA.groundChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    5fde:	d8 96       	adiw	r26, 0x38	; 56
    5fe0:	6c 93       	st	X, r22
    5fe2:	d8 97       	sbiw	r26, 0x38	; 56
    ADCA.groundChannel.MUXCTRL = groundMUxPos;
    5fe4:	88 e0       	ldi	r24, 0x08	; 8
    5fe6:	d9 96       	adiw	r26, 0x39	; 57
    5fe8:	8c 93       	st	X, r24
    5fea:	d9 97       	sbiw	r26, 0x39	; 57
	
    ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    5fec:	14 96       	adiw	r26, 0x04	; 4
    5fee:	8c 91       	ld	r24, X
    5ff0:	14 97       	sbiw	r26, 0x04	; 4
    5ff2:	88 7f       	andi	r24, 0xF8	; 248
    5ff4:	84 60       	ori	r24, 0x04	; 4
    5ff6:	14 96       	adiw	r26, 0x04	; 4
    5ff8:	8c 93       	st	X, r24
    5ffa:	14 97       	sbiw	r26, 0x04	; 4
	
    ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    5ffc:	12 96       	adiw	r26, 0x02	; 2
    5ffe:	7c 93       	st	X, r23
    6000:	12 97       	sbiw	r26, 0x02	; 2
    ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    6002:	13 96       	adiw	r26, 0x03	; 3
    6004:	8c 91       	ld	r24, X
    6006:	13 97       	sbiw	r26, 0x03	; 3
    6008:	80 6c       	ori	r24, 0xC0	; 192
    600a:	13 96       	adiw	r26, 0x03	; 3
    600c:	8c 93       	st	X, r24
    600e:	13 97       	sbiw	r26, 0x03	; 3
	
    ADCA.CTRLB |= ADC_FREERUN_bm; // free running mode
    6010:	11 96       	adiw	r26, 0x01	; 1
    6012:	8c 91       	ld	r24, X
    6014:	11 97       	sbiw	r26, 0x01	; 1
    6016:	88 60       	ori	r24, 0x08	; 8
    6018:	11 96       	adiw	r26, 0x01	; 1
    601a:	8c 93       	st	X, r24
    601c:	11 97       	sbiw	r26, 0x01	; 1
	
    ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    601e:	98 96       	adiw	r26, 0x28	; 40
    6020:	8c 91       	ld	r24, X
    6022:	98 97       	sbiw	r26, 0x28	; 40
    6024:	80 68       	ori	r24, 0x80	; 128
    6026:	98 96       	adiw	r26, 0x28	; 40
    6028:	8c 93       	st	X, r24
    602a:	98 97       	sbiw	r26, 0x28	; 40
    ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    602c:	d0 96       	adiw	r26, 0x30	; 48
    602e:	8c 91       	ld	r24, X
    6030:	d0 97       	sbiw	r26, 0x30	; 48
    6032:	80 68       	ori	r24, 0x80	; 128
    6034:	d0 96       	adiw	r26, 0x30	; 48
    6036:	8c 93       	st	X, r24
    6038:	d0 97       	sbiw	r26, 0x30	; 48
    ADCA.EKGChannel.CTRL |= ADC_CH_START_bm;
    603a:	90 96       	adiw	r26, 0x20	; 32
    603c:	8c 91       	ld	r24, X
    603e:	90 97       	sbiw	r26, 0x20	; 32
    6040:	80 68       	ori	r24, 0x80	; 128
    6042:	90 96       	adiw	r26, 0x20	; 32
    6044:	8c 93       	st	X, r24
    6046:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.groundChannel.CTRL |= ADC_CH_START_bm;
    6048:	d8 96       	adiw	r26, 0x38	; 56
    604a:	8c 91       	ld	r24, X
    604c:	d8 97       	sbiw	r26, 0x38	; 56
    604e:	80 68       	ori	r24, 0x80	; 128
    6050:	d8 96       	adiw	r26, 0x38	; 56
    6052:	8c 93       	st	X, r24
    6054:	d8 97       	sbiw	r26, 0x38	; 56
    ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    6056:	6c 93       	st	X, r22
    6058:	40 e0       	ldi	r20, 0x00	; 0
    605a:	50 e9       	ldi	r21, 0x90	; 144
    605c:	ca 01       	movw	r24, r20
    605e:	01 97       	sbiw	r24, 0x01	; 1
    6060:	f1 f7       	brne	.-4      	; 0x605e <__stack+0x5f>
	
	_delay_ms(10);
	zeroOffsetA = ADCA.groundResult;
    6062:	56 96       	adiw	r26, 0x16	; 22
    6064:	8d 91       	ld	r24, X+
    6066:	9c 91       	ld	r25, X
    6068:	57 97       	sbiw	r26, 0x17	; 23
    606a:	80 93 fe 50 	sts	0x50FE, r24
    606e:	90 93 ff 50 	sts	0x50FF, r25
	
	// Port B = Respiration
	
	ADCB.respirationChannel.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_8X_gc;	// set input mode
    6072:	8f e0       	ldi	r24, 0x0F	; 15
    6074:	f9 01       	movw	r30, r18
    6076:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.respirationChannel.MUXCTRL = respirationMUXPos | neg_resipirationMUXPos;
    6078:	8c e0       	ldi	r24, 0x0C	; 12
    607a:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCB.PRESCALER = (ADCB.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    607c:	84 81       	ldd	r24, Z+4	; 0x04
    607e:	88 7f       	andi	r24, 0xF8	; 248
    6080:	84 60       	ori	r24, 0x04	; 4
    6082:	84 83       	std	Z+4, r24	; 0x04
	
	ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    6084:	72 83       	std	Z+2, r23	; 0x02
	ADCB.EVCTRL = (ADCB.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    6086:	83 81       	ldd	r24, Z+3	; 0x03
    6088:	80 6c       	ori	r24, 0xC0	; 192
    608a:	83 83       	std	Z+3, r24	; 0x03
	
	ADCB.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode & signed
    608c:	81 81       	ldd	r24, Z+1	; 0x01
    608e:	88 61       	ori	r24, 0x18	; 24
    6090:	81 83       	std	Z+1, r24	; 0x01
	
	ADCB.respirationChannel.CTRL |= ADC_CH_START_bm;
    6092:	80 a1       	ldd	r24, Z+32	; 0x20
    6094:	80 68       	ori	r24, 0x80	; 128
    6096:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCB.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    6098:	60 83       	st	Z, r22
    609a:	ca 01       	movw	r24, r20
    609c:	01 97       	sbiw	r24, 0x01	; 1
    609e:	f1 f7       	brne	.-4      	; 0x609c <__stack+0x9d>
	
	_delay_ms(10);
	zeroOffsetB = ADCB.groundResult;
    60a0:	d9 01       	movw	r26, r18
    60a2:	56 96       	adiw	r26, 0x16	; 22
    60a4:	8d 91       	ld	r24, X+
    60a6:	9c 91       	ld	r25, X
    60a8:	57 97       	sbiw	r26, 0x17	; 23
    60aa:	80 93 63 2c 	sts	0x2C63, r24
    60ae:	90 93 64 2c 	sts	0x2C64, r25
	
	respirationPort.DIRSET = 1<<respirationDriver;
    60b2:	e0 e2       	ldi	r30, 0x20	; 32
    60b4:	f6 e0       	ldi	r31, 0x06	; 6
    60b6:	84 e0       	ldi	r24, 0x04	; 4
    60b8:	81 83       	std	Z+1, r24	; 0x01
	respirationPort.OUTSET = 1<<respirationDriver;
    60ba:	85 83       	std	Z+5, r24	; 0x05
	// div  = 64
	// per  = 768 (remember to subtract 1)
	// => 300 samples per second
	
	// Set period/TOP value
	Sensors_Timer_300HZ.PER = 767;
    60bc:	e0 e4       	ldi	r30, 0x40	; 64
    60be:	f9 e0       	ldi	r31, 0x09	; 9
    60c0:	8f ef       	ldi	r24, 0xFF	; 255
    60c2:	92 e0       	ldi	r25, 0x02	; 2
    60c4:	86 a3       	std	Z+38, r24	; 0x26
    60c6:	97 a3       	std	Z+39, r25	; 0x27
	//Sensors_Timer_300HZ.PER = 2303;		// 100 hz
	
	// Select clock source
	Sensors_Timer_300HZ.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) |  TC_CLKSEL_DIV64_gc;
    60c8:	80 81       	ld	r24, Z
    60ca:	80 7f       	andi	r24, 0xF0	; 240
    60cc:	85 60       	ori	r24, 0x05	; 5
    60ce:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	Sensors_Timer_300HZ.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    60d0:	86 81       	ldd	r24, Z+6	; 0x06
    60d2:	83 60       	ori	r24, 0x03	; 3
    60d4:	86 83       	std	Z+6, r24	; 0x06
	
	Sensors_ResetTemperatureBuffers();
    60d6:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <Sensors_ResetTemperatureBuffers>
	Sensors_ResetRespirationBuffers();
    60da:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <Sensors_ResetRespirationBuffers>
	Sensors_ResetEKGBuffers();
    60de:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <Sensors_ResetEKGBuffers>
	Sensors_ResetHumidityBuffers();
    60e2:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <Sensors_ResetHumidityBuffers>
}
    60e6:	df 91       	pop	r29
    60e8:	cf 91       	pop	r28
    60ea:	08 95       	ret

000060ec <__vector_83>:




ISR(Sensors_Timer_300HZ_vect)
{
    60ec:	1f 92       	push	r1
    60ee:	0f 92       	push	r0
    60f0:	0f b6       	in	r0, 0x3f	; 63
    60f2:	0f 92       	push	r0
    60f4:	0b b6       	in	r0, 0x3b	; 59
    60f6:	0f 92       	push	r0
    60f8:	11 24       	eor	r1, r1
    60fa:	ef 92       	push	r14
    60fc:	ff 92       	push	r15
    60fe:	1f 93       	push	r17
    6100:	2f 93       	push	r18
    6102:	3f 93       	push	r19
    6104:	4f 93       	push	r20
    6106:	5f 93       	push	r21
    6108:	6f 93       	push	r22
    610a:	7f 93       	push	r23
    610c:	8f 93       	push	r24
    610e:	9f 93       	push	r25
    6110:	af 93       	push	r26
    6112:	bf 93       	push	r27
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	ef 93       	push	r30
    611a:	ff 93       	push	r31
	if(recording){
    611c:	80 91 61 27 	lds	r24, 0x2761
    6120:	88 23       	and	r24, r24
    6122:	09 f4       	brne	.+2      	; 0x6126 <__vector_83+0x3a>
    6124:	c4 c0       	rjmp	.+392    	; 0x62ae <__vector_83+0x1c2>
		if(wantToRecordEKG && !okToSendEKGBuffer[EKGBufferToWriteTo]){ 
    6126:	80 91 c2 22 	lds	r24, 0x22C2
    612a:	88 23       	and	r24, r24
    612c:	09 f4       	brne	.+2      	; 0x6130 <__vector_83+0x44>
    612e:	53 c0       	rjmp	.+166    	; 0x61d6 <__vector_83+0xea>
    6130:	80 91 68 27 	lds	r24, 0x2768
    6134:	c8 2f       	mov	r28, r24
    6136:	d0 e0       	ldi	r29, 0x00	; 0
    6138:	fe 01       	movw	r30, r28
    613a:	e9 51       	subi	r30, 0x19	; 25
    613c:	ff 4a       	sbci	r31, 0xAF	; 175
    613e:	80 81       	ld	r24, Z
    6140:	88 23       	and	r24, r24
    6142:	09 f0       	breq	.+2      	; 0x6146 <__vector_83+0x5a>
    6144:	48 c0       	rjmp	.+144    	; 0x61d6 <__vector_83+0xea>
			if(EKGBufferCounter == 0){
    6146:	80 91 69 27 	lds	r24, 0x2769
    614a:	90 91 6a 27 	lds	r25, 0x276A
    614e:	89 2b       	or	r24, r25
    6150:	61 f4       	brne	.+24     	; 0x616a <__vector_83+0x7e>
				EKGSampleStartTime[EKGBufferToWriteTo] = Time_Get32BitTimer();
    6152:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    6156:	cc 0f       	add	r28, r28
    6158:	dd 1f       	adc	r29, r29
    615a:	cc 0f       	add	r28, r28
    615c:	dd 1f       	adc	r29, r29
    615e:	c7 5b       	subi	r28, 0xB7	; 183
    6160:	d9 4b       	sbci	r29, 0xB9	; 185
    6162:	68 83       	st	Y, r22
    6164:	79 83       	std	Y+1, r23	; 0x01
    6166:	8a 83       	std	Y+2, r24	; 0x02
    6168:	9b 83       	std	Y+3, r25	; 0x03
			}
			EKGBuffer[EKGBufferToWriteTo][EKGBufferCounter] = Sensors_ReadEKG();
    616a:	60 91 68 27 	lds	r22, 0x2768
    616e:	a6 2f       	mov	r26, r22
    6170:	b0 e0       	ldi	r27, 0x00	; 0
    6172:	20 91 69 27 	lds	r18, 0x2769
    6176:	30 91 6a 27 	lds	r19, 0x276A
uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
}

uint16_t Sensors_ReadEKG(void){
	return ADCA.EKGResult; 
    617a:	40 91 10 02 	lds	r20, 0x0210
    617e:	50 91 11 02 	lds	r21, 0x0211
	if(recording){
		if(wantToRecordEKG && !okToSendEKGBuffer[EKGBufferToWriteTo]){ 
			if(EKGBufferCounter == 0){
				EKGSampleStartTime[EKGBufferToWriteTo] = Time_Get32BitTimer();
			}
			EKGBuffer[EKGBufferToWriteTo][EKGBufferCounter] = Sensors_ReadEKG();
    6182:	8c e2       	ldi	r24, 0x2C	; 44
    6184:	91 e0       	ldi	r25, 0x01	; 1
    6186:	a8 9f       	mul	r26, r24
    6188:	f0 01       	movw	r30, r0
    618a:	a9 9f       	mul	r26, r25
    618c:	f0 0d       	add	r31, r0
    618e:	b8 9f       	mul	r27, r24
    6190:	f0 0d       	add	r31, r0
    6192:	11 24       	eor	r1, r1
    6194:	e2 0f       	add	r30, r18
    6196:	f3 1f       	adc	r31, r19
    6198:	ee 0f       	add	r30, r30
    619a:	ff 1f       	adc	r31, r31
    619c:	e0 50       	subi	r30, 0x00	; 0
    619e:	ff 4a       	sbci	r31, 0xAF	; 175
    61a0:	40 83       	st	Z, r20
    61a2:	51 83       	std	Z+1, r21	; 0x01
			EKGBufferCounter++;
    61a4:	2f 5f       	subi	r18, 0xFF	; 255
    61a6:	3f 4f       	sbci	r19, 0xFF	; 255
    61a8:	20 93 69 27 	sts	0x2769, r18
    61ac:	30 93 6a 27 	sts	0x276A, r19
			if(EKGBufferCounter == EKGNumberOfSamples){
    61b0:	2c 52       	subi	r18, 0x2C	; 44
    61b2:	31 40       	sbci	r19, 0x01	; 1
    61b4:	81 f4       	brne	.+32     	; 0x61d6 <__vector_83+0xea>
				EKGBufferCounter=0;
    61b6:	10 92 69 27 	sts	0x2769, r1
    61ba:	10 92 6a 27 	sts	0x276A, r1
				okToSendEKGBuffer[EKGBufferToWriteTo] = true;
    61be:	a9 51       	subi	r26, 0x19	; 25
    61c0:	bf 4a       	sbci	r27, 0xAF	; 175
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	8c 93       	st	X, r24
				EKGBufferToWriteTo++;
    61c6:	86 2f       	mov	r24, r22
    61c8:	8f 5f       	subi	r24, 0xFF	; 255
    61ca:	80 93 68 27 	sts	0x2768, r24
				if(EKGBufferToWriteTo == EKGNumberOfBuffers){
    61ce:	83 30       	cpi	r24, 0x03	; 3
    61d0:	11 f4       	brne	.+4      	; 0x61d6 <__vector_83+0xea>
					EKGBufferToWriteTo = 0;
    61d2:	10 92 68 27 	sts	0x2768, r1
				}
			}
		}
		
		HZ_RefeshCounter2++;
    61d6:	80 91 8f 27 	lds	r24, 0x278F
    61da:	90 91 90 27 	lds	r25, 0x2790
    61de:	01 96       	adiw	r24, 0x01	; 1
    61e0:	80 93 8f 27 	sts	0x278F, r24
    61e4:	90 93 90 27 	sts	0x2790, r25
		if(HZ_RefeshCounter2 == 6){
    61e8:	80 91 8f 27 	lds	r24, 0x278F
    61ec:	90 91 90 27 	lds	r25, 0x2790
    61f0:	06 97       	sbiw	r24, 0x06	; 6
    61f2:	09 f0       	breq	.+2      	; 0x61f6 <__vector_83+0x10a>
    61f4:	5c c0       	rjmp	.+184    	; 0x62ae <__vector_83+0x1c2>
			HZ_RefeshCounter2 = 0;
    61f6:	10 92 8f 27 	sts	0x278F, r1
    61fa:	10 92 90 27 	sts	0x2790, r1
			if(wantToRecordRespiration && !okToSendRespirationBuffer[respirationBufferToWriteTo]){ 
    61fe:	80 91 c3 22 	lds	r24, 0x22C3
    6202:	88 23       	and	r24, r24
    6204:	09 f4       	brne	.+2      	; 0x6208 <__vector_83+0x11c>
    6206:	53 c0       	rjmp	.+166    	; 0x62ae <__vector_83+0x1c2>
    6208:	80 91 65 27 	lds	r24, 0x2765
    620c:	c8 2f       	mov	r28, r24
    620e:	d0 e0       	ldi	r29, 0x00	; 0
    6210:	fe 01       	movw	r30, r28
    6212:	ea 59       	subi	r30, 0x9A	; 154
    6214:	ff 4c       	sbci	r31, 0xCF	; 207
    6216:	80 81       	ld	r24, Z
    6218:	88 23       	and	r24, r24
    621a:	09 f0       	breq	.+2      	; 0x621e <__vector_83+0x132>
    621c:	48 c0       	rjmp	.+144    	; 0x62ae <__vector_83+0x1c2>
				if(respirationBufferCounter == 0){
    621e:	80 91 66 27 	lds	r24, 0x2766
    6222:	90 91 67 27 	lds	r25, 0x2767
    6226:	89 2b       	or	r24, r25
    6228:	61 f4       	brne	.+24     	; 0x6242 <__vector_83+0x156>
					respirationSampleStartTime[respirationBufferToWriteTo] = Time_Get32BitTimer();
    622a:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    622e:	cc 0f       	add	r28, r28
    6230:	dd 1f       	adc	r29, r29
    6232:	cc 0f       	add	r28, r28
    6234:	dd 1f       	adc	r29, r29
    6236:	c7 51       	subi	r28, 0x17	; 23
    6238:	d2 4b       	sbci	r29, 0xB2	; 178
    623a:	68 83       	st	Y, r22
    623c:	79 83       	std	Y+1, r23	; 0x01
    623e:	8a 83       	std	Y+2, r24	; 0x02
    6240:	9b 83       	std	Y+3, r25	; 0x03
				}
				respirationBuffer[respirationBufferToWriteTo][respirationBufferCounter] = Sensors_ReadRespiration();
    6242:	60 91 65 27 	lds	r22, 0x2765
    6246:	a6 2f       	mov	r26, r22
    6248:	b0 e0       	ldi	r27, 0x00	; 0
    624a:	20 91 66 27 	lds	r18, 0x2766
    624e:	30 91 67 27 	lds	r19, 0x2767
uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
}

uint16_t Sensors_ReadRespiration(void){
	return ADCB.respirationResult;
    6252:	40 91 50 02 	lds	r20, 0x0250
    6256:	50 91 51 02 	lds	r21, 0x0251
			HZ_RefeshCounter2 = 0;
			if(wantToRecordRespiration && !okToSendRespirationBuffer[respirationBufferToWriteTo]){ 
				if(respirationBufferCounter == 0){
					respirationSampleStartTime[respirationBufferToWriteTo] = Time_Get32BitTimer();
				}
				respirationBuffer[respirationBufferToWriteTo][respirationBufferCounter] = Sensors_ReadRespiration();
    625a:	82 e3       	ldi	r24, 0x32	; 50
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	a8 9f       	mul	r26, r24
    6260:	f0 01       	movw	r30, r0
    6262:	a9 9f       	mul	r26, r25
    6264:	f0 0d       	add	r31, r0
    6266:	b8 9f       	mul	r27, r24
    6268:	f0 0d       	add	r31, r0
    626a:	11 24       	eor	r1, r1
    626c:	e2 0f       	add	r30, r18
    626e:	f3 1f       	adc	r31, r19
    6270:	ee 0f       	add	r30, r30
    6272:	ff 1f       	adc	r31, r31
    6274:	e0 57       	subi	r30, 0x70	; 112
    6276:	fe 4c       	sbci	r31, 0xCE	; 206
    6278:	40 83       	st	Z, r20
    627a:	51 83       	std	Z+1, r21	; 0x01
				respirationBufferCounter++;
    627c:	2f 5f       	subi	r18, 0xFF	; 255
    627e:	3f 4f       	sbci	r19, 0xFF	; 255
    6280:	20 93 66 27 	sts	0x2766, r18
    6284:	30 93 67 27 	sts	0x2767, r19
				if(respirationBufferCounter == respirationNumberOfSamples){
    6288:	22 33       	cpi	r18, 0x32	; 50
    628a:	31 05       	cpc	r19, r1
    628c:	81 f4       	brne	.+32     	; 0x62ae <__vector_83+0x1c2>
					respirationBufferCounter=0;
    628e:	10 92 66 27 	sts	0x2766, r1
    6292:	10 92 67 27 	sts	0x2767, r1
					okToSendRespirationBuffer[respirationBufferToWriteTo] = true;
    6296:	aa 59       	subi	r26, 0x9A	; 154
    6298:	bf 4c       	sbci	r27, 0xCF	; 207
    629a:	81 e0       	ldi	r24, 0x01	; 1
    629c:	8c 93       	st	X, r24
					respirationBufferToWriteTo++;
    629e:	86 2f       	mov	r24, r22
    62a0:	8f 5f       	subi	r24, 0xFF	; 255
    62a2:	80 93 65 27 	sts	0x2765, r24
					if(respirationBufferToWriteTo == respirationNumberOfBuffers){
    62a6:	83 30       	cpi	r24, 0x03	; 3
    62a8:	11 f4       	brne	.+4      	; 0x62ae <__vector_83+0x1c2>
						respirationBufferToWriteTo = 0;
    62aa:	10 92 65 27 	sts	0x2765, r1
			}
		}
		
	}
	
	HZ_RefeshCounter++;
    62ae:	80 91 8d 27 	lds	r24, 0x278D
    62b2:	90 91 8e 27 	lds	r25, 0x278E
    62b6:	01 96       	adiw	r24, 0x01	; 1
    62b8:	80 93 8d 27 	sts	0x278D, r24
    62bc:	90 93 8e 27 	sts	0x278E, r25
	if(HZ_RefeshCounter == 300){
    62c0:	80 91 8d 27 	lds	r24, 0x278D
    62c4:	90 91 8e 27 	lds	r25, 0x278E
    62c8:	8c 52       	subi	r24, 0x2C	; 44
    62ca:	91 40       	sbci	r25, 0x01	; 1
    62cc:	09 f0       	breq	.+2      	; 0x62d0 <__vector_83+0x1e4>
    62ce:	dc c0       	rjmp	.+440    	; 0x6488 <__vector_83+0x39c>
		HZ_RefeshCounter = 0;
    62d0:	10 92 8d 27 	sts	0x278D, r1
    62d4:	10 92 8e 27 	sts	0x278E, r1
		
		UNIX_Time++;
    62d8:	80 91 81 27 	lds	r24, 0x2781
    62dc:	90 91 82 27 	lds	r25, 0x2782
    62e0:	a0 91 83 27 	lds	r26, 0x2783
    62e4:	b0 91 84 27 	lds	r27, 0x2784
    62e8:	01 96       	adiw	r24, 0x01	; 1
    62ea:	a1 1d       	adc	r26, r1
    62ec:	b1 1d       	adc	r27, r1
    62ee:	80 93 81 27 	sts	0x2781, r24
    62f2:	90 93 82 27 	sts	0x2782, r25
    62f6:	a0 93 83 27 	sts	0x2783, r26
    62fa:	b0 93 84 27 	sts	0x2784, r27
		
		rtcBlockCounter++;
    62fe:	80 91 72 27 	lds	r24, 0x2772
    6302:	8f 5f       	subi	r24, 0xFF	; 255
    6304:	80 93 72 27 	sts	0x2772, r24
		if(rtcBlockCounter == 0){
    6308:	88 23       	and	r24, r24
    630a:	19 f4       	brne	.+6      	; 0x6312 <__vector_83+0x226>
			okToSendRTCBlock = true;
    630c:	81 e0       	ldi	r24, 0x01	; 1
    630e:	80 93 71 27 	sts	0x2771, r24
		}
		
		if(recording){
    6312:	80 91 61 27 	lds	r24, 0x2761
    6316:	88 23       	and	r24, r24
    6318:	09 f4       	brne	.+2      	; 0x631c <__vector_83+0x230>
    631a:	b6 c0       	rjmp	.+364    	; 0x6488 <__vector_83+0x39c>
			if(wantToRecordTemperature && !okToSendTemperatureBuffer[temperatureBufferToWriteTo]){ 
    631c:	80 91 c0 22 	lds	r24, 0x22C0
    6320:	88 23       	and	r24, r24
    6322:	09 f4       	brne	.+2      	; 0x6326 <__vector_83+0x23a>
    6324:	55 c0       	rjmp	.+170    	; 0x63d0 <__vector_83+0x2e4>
    6326:	80 91 62 27 	lds	r24, 0x2762
    632a:	c8 2f       	mov	r28, r24
    632c:	d0 e0       	ldi	r29, 0x00	; 0
    632e:	fe 01       	movw	r30, r28
    6330:	e8 5f       	subi	r30, 0xF8	; 248
    6332:	f7 4a       	sbci	r31, 0xA7	; 167
    6334:	80 81       	ld	r24, Z
    6336:	88 23       	and	r24, r24
    6338:	09 f0       	breq	.+2      	; 0x633c <__vector_83+0x250>
    633a:	4a c0       	rjmp	.+148    	; 0x63d0 <__vector_83+0x2e4>
				if(temperatureBufferCounter == 0){
    633c:	80 91 63 27 	lds	r24, 0x2763
    6340:	90 91 64 27 	lds	r25, 0x2764
    6344:	89 2b       	or	r24, r25
    6346:	61 f4       	brne	.+24     	; 0x6360 <__vector_83+0x274>
					temperatureSampleStartTime[temperatureBufferToWriteTo] = Time_Get32BitTimer();
    6348:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    634c:	cc 0f       	add	r28, r28
    634e:	dd 1f       	adc	r29, r29
    6350:	cc 0f       	add	r28, r28
    6352:	dd 1f       	adc	r29, r29
    6354:	c0 56       	subi	r28, 0x60	; 96
    6356:	df 4c       	sbci	r29, 0xCF	; 207
    6358:	68 83       	st	Y, r22
    635a:	79 83       	std	Y+1, r23	; 0x01
    635c:	8a 83       	std	Y+2, r24	; 0x02
    635e:	9b 83       	std	Y+3, r25	; 0x03
				}
				temperatureBuffer[temperatureBufferToWriteTo][temperatureBufferCounter] = Sensors_ReadTemperature();
    6360:	60 91 62 27 	lds	r22, 0x2762
    6364:	a6 2f       	mov	r26, r22
    6366:	b0 e0       	ldi	r27, 0x00	; 0
    6368:	20 91 63 27 	lds	r18, 0x2763
    636c:	30 91 64 27 	lds	r19, 0x2764
	Sensors_ResetEKGBuffers();
	Sensors_ResetHumidityBuffers();
}

uint16_t Sensors_ReadTemperature(void){
	return ADCA.temperatureResult;
    6370:	40 91 12 02 	lds	r20, 0x0212
    6374:	50 91 13 02 	lds	r21, 0x0213
		if(recording){
			if(wantToRecordTemperature && !okToSendTemperatureBuffer[temperatureBufferToWriteTo]){ 
				if(temperatureBufferCounter == 0){
					temperatureSampleStartTime[temperatureBufferToWriteTo] = Time_Get32BitTimer();
				}
				temperatureBuffer[temperatureBufferToWriteTo][temperatureBufferCounter] = Sensors_ReadTemperature();
    6378:	fd 01       	movw	r30, r26
    637a:	ee 0f       	add	r30, r30
    637c:	ff 1f       	adc	r31, r31
    637e:	cd 01       	movw	r24, r26
    6380:	13 e0       	ldi	r17, 0x03	; 3
    6382:	88 0f       	add	r24, r24
    6384:	99 1f       	adc	r25, r25
    6386:	1a 95       	dec	r17
    6388:	e1 f7       	brne	.-8      	; 0x6382 <__vector_83+0x296>
    638a:	e8 0f       	add	r30, r24
    638c:	f9 1f       	adc	r31, r25
    638e:	e2 0f       	add	r30, r18
    6390:	f3 1f       	adc	r31, r19
    6392:	ee 0f       	add	r30, r30
    6394:	ff 1f       	adc	r31, r31
    6396:	e7 59       	subi	r30, 0x97	; 151
    6398:	ff 4c       	sbci	r31, 0xCF	; 207
    639a:	40 83       	st	Z, r20
    639c:	51 83       	std	Z+1, r21	; 0x01
				temperatureBufferCounter++;
    639e:	2f 5f       	subi	r18, 0xFF	; 255
    63a0:	3f 4f       	sbci	r19, 0xFF	; 255
    63a2:	20 93 63 27 	sts	0x2763, r18
    63a6:	30 93 64 27 	sts	0x2764, r19
				if(temperatureBufferCounter == temperatureNumberOfSamples){
    63aa:	2a 30       	cpi	r18, 0x0A	; 10
    63ac:	31 05       	cpc	r19, r1
    63ae:	81 f4       	brne	.+32     	; 0x63d0 <__vector_83+0x2e4>
					temperatureBufferCounter=0;
    63b0:	10 92 63 27 	sts	0x2763, r1
    63b4:	10 92 64 27 	sts	0x2764, r1
					okToSendTemperatureBuffer[temperatureBufferToWriteTo] = true;
    63b8:	a8 5f       	subi	r26, 0xF8	; 248
    63ba:	b7 4a       	sbci	r27, 0xA7	; 167
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	8c 93       	st	X, r24
					temperatureBufferToWriteTo++;
    63c0:	86 2f       	mov	r24, r22
    63c2:	8f 5f       	subi	r24, 0xFF	; 255
    63c4:	80 93 62 27 	sts	0x2762, r24
					if(temperatureBufferToWriteTo == temperatureNumberOfBuffers){
    63c8:	82 30       	cpi	r24, 0x02	; 2
    63ca:	11 f4       	brne	.+4      	; 0x63d0 <__vector_83+0x2e4>
						temperatureBufferToWriteTo = 0;
    63cc:	10 92 62 27 	sts	0x2762, r1
					}
				}
			}
			
			
			if(wantToRecordHumidity && !okToSendHumidityBuffer[humidityBufferToWriteTo]){ 
    63d0:	80 91 c1 22 	lds	r24, 0x22C1
    63d4:	88 23       	and	r24, r24
    63d6:	09 f4       	brne	.+2      	; 0x63da <__vector_83+0x2ee>
    63d8:	57 c0       	rjmp	.+174    	; 0x6488 <__vector_83+0x39c>
    63da:	80 91 6b 27 	lds	r24, 0x276B
    63de:	c8 2f       	mov	r28, r24
    63e0:	d0 e0       	ldi	r29, 0x00	; 0
    63e2:	fe 01       	movw	r30, r28
    63e4:	e2 5f       	subi	r30, 0xF2	; 242
    63e6:	f7 4c       	sbci	r31, 0xC7	; 199
    63e8:	80 81       	ld	r24, Z
    63ea:	88 23       	and	r24, r24
    63ec:	09 f0       	breq	.+2      	; 0x63f0 <__vector_83+0x304>
    63ee:	4c c0       	rjmp	.+152    	; 0x6488 <__vector_83+0x39c>
				if(humidityBufferCounter == 0){
    63f0:	80 91 6c 27 	lds	r24, 0x276C
    63f4:	90 91 6d 27 	lds	r25, 0x276D
    63f8:	89 2b       	or	r24, r25
    63fa:	61 f4       	brne	.+24     	; 0x6414 <__vector_83+0x328>
					humiditySampleStartTime[humidityBufferToWriteTo] = Time_Get32BitTimer();
    63fc:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    6400:	cc 0f       	add	r28, r28
    6402:	dd 1f       	adc	r29, r29
    6404:	cc 0f       	add	r28, r28
    6406:	dd 1f       	adc	r29, r29
    6408:	ca 51       	subi	r28, 0x1A	; 26
    640a:	d8 4c       	sbci	r29, 0xC8	; 200
    640c:	68 83       	st	Y, r22
    640e:	79 83       	std	Y+1, r23	; 0x01
    6410:	8a 83       	std	Y+2, r24	; 0x02
    6412:	9b 83       	std	Y+3, r25	; 0x03
				}
				humidityBuffer[humidityBufferToWriteTo][humidityBufferCounter] = Sensors_ReadHumidity();
    6414:	10 91 6b 27 	lds	r17, 0x276B
    6418:	e0 90 6c 27 	lds	r14, 0x276C
    641c:	f0 90 6d 27 	lds	r15, 0x276D
    6420:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <Sensors_ReadHumidity>
    6424:	21 2f       	mov	r18, r17
    6426:	30 e0       	ldi	r19, 0x00	; 0
    6428:	f9 01       	movw	r30, r18
    642a:	13 e0       	ldi	r17, 0x03	; 3
    642c:	ee 0f       	add	r30, r30
    642e:	ff 1f       	adc	r31, r31
    6430:	1a 95       	dec	r17
    6432:	e1 f7       	brne	.-8      	; 0x642c <__vector_83+0x340>
    6434:	22 0f       	add	r18, r18
    6436:	33 1f       	adc	r19, r19
    6438:	e2 0f       	add	r30, r18
    643a:	f3 1f       	adc	r31, r19
    643c:	ee 0d       	add	r30, r14
    643e:	ff 1d       	adc	r31, r15
    6440:	ee 0f       	add	r30, r30
    6442:	ff 1f       	adc	r31, r31
    6444:	ef 57       	subi	r30, 0x7F	; 127
    6446:	f7 4a       	sbci	r31, 0xA7	; 167
    6448:	80 83       	st	Z, r24
    644a:	91 83       	std	Z+1, r25	; 0x01
				humidityBufferCounter++;
    644c:	80 91 6c 27 	lds	r24, 0x276C
    6450:	90 91 6d 27 	lds	r25, 0x276D
    6454:	01 96       	adiw	r24, 0x01	; 1
    6456:	80 93 6c 27 	sts	0x276C, r24
    645a:	90 93 6d 27 	sts	0x276D, r25
				if(humidityBufferCounter == humidityNumberOfSamples){
    645e:	0a 97       	sbiw	r24, 0x0a	; 10
    6460:	99 f4       	brne	.+38     	; 0x6488 <__vector_83+0x39c>
					humidityBufferCounter=0;
    6462:	10 92 6c 27 	sts	0x276C, r1
    6466:	10 92 6d 27 	sts	0x276D, r1
					okToSendHumidityBuffer[humidityBufferToWriteTo] = true;
    646a:	80 91 6b 27 	lds	r24, 0x276B
    646e:	e8 2f       	mov	r30, r24
    6470:	f0 e0       	ldi	r31, 0x00	; 0
    6472:	e2 5f       	subi	r30, 0xF2	; 242
    6474:	f7 4c       	sbci	r31, 0xC7	; 199
    6476:	91 e0       	ldi	r25, 0x01	; 1
    6478:	90 83       	st	Z, r25
					humidityBufferToWriteTo++;
    647a:	8f 5f       	subi	r24, 0xFF	; 255
    647c:	80 93 6b 27 	sts	0x276B, r24
					if(humidityBufferToWriteTo == humidityNumberOfBuffers){
    6480:	82 30       	cpi	r24, 0x02	; 2
    6482:	11 f4       	brne	.+4      	; 0x6488 <__vector_83+0x39c>
						humidityBufferToWriteTo = 0;
    6484:	10 92 6b 27 	sts	0x276B, r1
					}
				}
			}
		}
	}
}
    6488:	ff 91       	pop	r31
    648a:	ef 91       	pop	r30
    648c:	df 91       	pop	r29
    648e:	cf 91       	pop	r28
    6490:	bf 91       	pop	r27
    6492:	af 91       	pop	r26
    6494:	9f 91       	pop	r25
    6496:	8f 91       	pop	r24
    6498:	7f 91       	pop	r23
    649a:	6f 91       	pop	r22
    649c:	5f 91       	pop	r21
    649e:	4f 91       	pop	r20
    64a0:	3f 91       	pop	r19
    64a2:	2f 91       	pop	r18
    64a4:	1f 91       	pop	r17
    64a6:	ff 90       	pop	r15
    64a8:	ef 90       	pop	r14
    64aa:	0f 90       	pop	r0
    64ac:	0b be       	out	0x3b, r0	; 59
    64ae:	0f 90       	pop	r0
    64b0:	0f be       	out	0x3f, r0	; 63
    64b2:	0f 90       	pop	r0
    64b4:	1f 90       	pop	r1
    64b6:	18 95       	reti

000064b8 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    64b8:	aa ec       	ldi	r26, 0xCA	; 202
    64ba:	b1 e0       	ldi	r27, 0x01	; 1
    64bc:	92 e0       	ldi	r25, 0x02	; 2
    64be:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    64c0:	e8 2f       	mov	r30, r24
    64c2:	f0 e0       	ldi	r31, 0x00	; 0
    64c4:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    64c6:	1c 92       	st	X, r1
	
	return result;
    64c8:	8e 2f       	mov	r24, r30
    64ca:	08 95       	ret

000064cc <Uploader_getTime>:
		}
	}
	return true;
}

bool Uploader_getTime(void){
    64cc:	0f 93       	push	r16
    64ce:	1f 93       	push	r17
    64d0:	cf 93       	push	r28
    64d2:	df 93       	push	r29
    uint32_t tempTime = 0;
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    if(!Debug_SendByte('T')){
    64d4:	84 e5       	ldi	r24, 0x54	; 84
    64d6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    64da:	88 23       	and	r24, r24
    64dc:	09 f4       	brne	.+2      	; 0x64e0 <Uploader_getTime+0x14>
    64de:	40 c0       	rjmp	.+128    	; 0x6560 <Uploader_getTime+0x94>
    64e0:	00 e0       	ldi	r16, 0x00	; 0
    64e2:	10 e0       	ldi	r17, 0x00	; 0
    64e4:	c6 e6       	ldi	r28, 0x66	; 102
    64e6:	de e0       	ldi	r29, 0x0E	; 14
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
    64e8:	20 91 7b 27 	lds	r18, 0x277B
    64ec:	30 91 7c 27 	lds	r19, 0x277C
    64f0:	80 91 79 27 	lds	r24, 0x2779
    64f4:	90 91 7a 27 	lds	r25, 0x277A
    64f8:	28 17       	cp	r18, r24
    64fa:	39 07       	cpc	r19, r25
    64fc:	b9 f5       	brne	.+110    	; 0x656c <Uploader_getTime+0xa0>
    64fe:	2a c0       	rjmp	.+84     	; 0x6554 <Uploader_getTime+0x88>
        if(Debug_CharReadyToRead()){
            command[commandCounter+1] = Debug_GetByte(false);
			if(!Debug_SendByte(command[commandCounter+1])){
				return false;
			}
            commandCounter++;
    6500:	1f 5f       	subi	r17, 0xFF	; 255
            if(commandCounter == 4){
    6502:	14 30       	cpi	r17, 0x04	; 4
    6504:	39 f5       	brne	.+78     	; 0x6554 <Uploader_getTime+0x88>
                tempTime = command[1];
    6506:	60 91 2d 31 	lds	r22, 0x312D
    650a:	70 e0       	ldi	r23, 0x00	; 0
    650c:	80 e0       	ldi	r24, 0x00	; 0
    650e:	90 e0       	ldi	r25, 0x00	; 0
                tempTime <<= 8;
    6510:	98 2f       	mov	r25, r24
    6512:	87 2f       	mov	r24, r23
    6514:	76 2f       	mov	r23, r22
    6516:	66 27       	eor	r22, r22
                tempTime += command[2];
    6518:	20 91 2e 31 	lds	r18, 0x312E
    651c:	62 0f       	add	r22, r18
    651e:	71 1d       	adc	r23, r1
    6520:	81 1d       	adc	r24, r1
    6522:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    6524:	98 2f       	mov	r25, r24
    6526:	87 2f       	mov	r24, r23
    6528:	76 2f       	mov	r23, r22
    652a:	66 27       	eor	r22, r22
                tempTime += command[3];
    652c:	20 91 2f 31 	lds	r18, 0x312F
    6530:	62 0f       	add	r22, r18
    6532:	71 1d       	adc	r23, r1
    6534:	81 1d       	adc	r24, r1
    6536:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    6538:	98 2f       	mov	r25, r24
    653a:	87 2f       	mov	r24, r23
    653c:	76 2f       	mov	r23, r22
    653e:	66 27       	eor	r22, r22
                tempTime += command[4];
				
                Time_Set(tempTime);
    6540:	20 91 30 31 	lds	r18, 0x3130
    6544:	62 0f       	add	r22, r18
    6546:	71 1d       	adc	r23, r1
    6548:	81 1d       	adc	r24, r1
    654a:	91 1d       	adc	r25, r1
    654c:	0e 94 95 02 	call	0x52a	; 0x52a <Time_Set>
    6550:	81 e0       	ldi	r24, 0x01	; 1
    6552:	07 c0       	rjmp	.+14     	; 0x6562 <Uploader_getTime+0x96>
    6554:	ce 01       	movw	r24, r28
    6556:	01 97       	sbiw	r24, 0x01	; 1
    6558:	f1 f7       	brne	.-4      	; 0x6556 <Uploader_getTime+0x8a>
                return true;
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    655a:	0f 5f       	subi	r16, 0xFF	; 255
        if(timeOutCounter > 100){
    655c:	05 36       	cpi	r16, 0x65	; 101
    655e:	21 f6       	brne	.-120    	; 0x64e8 <Uploader_getTime+0x1c>
    6560:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
	return true;
}
    6562:	df 91       	pop	r29
    6564:	cf 91       	pop	r28
    6566:	1f 91       	pop	r17
    6568:	0f 91       	pop	r16
    656a:	08 95       	ret
    if(!Debug_SendByte('T')){
		return false;
	}
    while(true){
        if(Debug_CharReadyToRead()){
            command[commandCounter+1] = Debug_GetByte(false);
    656c:	80 e0       	ldi	r24, 0x00	; 0
    656e:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
    6572:	e1 2f       	mov	r30, r17
    6574:	f0 e0       	ldi	r31, 0x00	; 0
    6576:	e4 5d       	subi	r30, 0xD4	; 212
    6578:	fe 4c       	sbci	r31, 0xCE	; 206
    657a:	81 83       	std	Z+1, r24	; 0x01
			if(!Debug_SendByte(command[commandCounter+1])){
    657c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6580:	88 23       	and	r24, r24
    6582:	09 f0       	breq	.+2      	; 0x6586 <Uploader_getTime+0xba>
    6584:	bd cf       	rjmp	.-134    	; 0x6500 <Uploader_getTime+0x34>
    6586:	ec cf       	rjmp	.-40     	; 0x6560 <Uploader_getTime+0x94>

00006588 <Uploader_eraseFile>:
    okToUpload = false;
    uploadPercentBS = 100;
    return true;
}

bool Uploader_eraseFile(void){
    6588:	ff 92       	push	r15
    658a:	0f 93       	push	r16
    658c:	1f 93       	push	r17
    658e:	cf 93       	push	r28
    6590:	df 93       	push	r29
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    if(!Debug_SendByte('E')){
    6592:	85 e4       	ldi	r24, 0x45	; 69
    6594:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6598:	88 23       	and	r24, r24
    659a:	09 f4       	brne	.+2      	; 0x659e <Uploader_eraseFile+0x16>
    659c:	50 c0       	rjmp	.+160    	; 0x663e <Uploader_eraseFile+0xb6>
    659e:	00 e0       	ldi	r16, 0x00	; 0
    65a0:	ff 24       	eor	r15, r15
    65a2:	10 e0       	ldi	r17, 0x00	; 0
    65a4:	c6 e6       	ldi	r28, 0x66	; 102
    65a6:	de e0       	ldi	r29, 0x0E	; 14
    65a8:	20 91 7b 27 	lds	r18, 0x277B
    65ac:	30 91 7c 27 	lds	r19, 0x277C
    65b0:	80 91 79 27 	lds	r24, 0x2779
    65b4:	90 91 7a 27 	lds	r25, 0x277A
    65b8:	28 17       	cp	r18, r24
    65ba:	39 07       	cpc	r19, r25
    65bc:	09 f0       	breq	.+2      	; 0x65c0 <Uploader_eraseFile+0x38>
    65be:	46 c0       	rjmp	.+140    	; 0x664c <Uploader_eraseFile+0xc4>
    65c0:	36 c0       	rjmp	.+108    	; 0x662e <Uploader_eraseFile+0xa6>
		return false;
	}
    while(true){
        if(Debug_CharReadyToRead()){
            if(commandCounter == 0){
                numBytesToRead = Debug_GetByte(false);
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    65c4:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
    65c8:	08 2f       	mov	r16, r24
                if(!Debug_SendByte(numBytesToRead)){
    65ca:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    65ce:	88 23       	and	r24, r24
    65d0:	69 f5       	brne	.+90     	; 0x662c <Uploader_eraseFile+0xa4>
    65d2:	35 c0       	rjmp	.+106    	; 0x663e <Uploader_eraseFile+0xb6>
					return false;
				}
                commandCounter++;
            } else {
                fileToErase[commandCounter-1] = Debug_GetByte(false);
    65d4:	80 e0       	ldi	r24, 0x00	; 0
    65d6:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
    65da:	e1 2f       	mov	r30, r17
    65dc:	f0 e0       	ldi	r31, 0x00	; 0
    65de:	e7 51       	subi	r30, 0x17	; 23
    65e0:	ff 4a       	sbci	r31, 0xAF	; 175
    65e2:	80 83       	st	Z, r24
                if(!Debug_SendByte(fileToErase[commandCounter-1])){
    65e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    65e8:	88 23       	and	r24, r24
    65ea:	49 f1       	breq	.+82     	; 0x663e <Uploader_eraseFile+0xb6>
					return false;
				}
                commandCounter++;
    65ec:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    65ee:	80 2f       	mov	r24, r16
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	01 96       	adiw	r24, 0x01	; 1
    65f4:	e1 2f       	mov	r30, r17
    65f6:	f0 e0       	ldi	r31, 0x00	; 0
    65f8:	e8 17       	cp	r30, r24
    65fa:	f9 07       	cpc	r31, r25
    65fc:	c1 f4       	brne	.+48     	; 0x662e <Uploader_eraseFile+0xa6>
                    fileToErase[numBytesToRead+1] = 0;
    65fe:	e6 51       	subi	r30, 0x16	; 22
    6600:	ff 4a       	sbci	r31, 0xAF	; 175
    6602:	10 82       	st	Z, r1
                    okToEraseFile = true;
    6604:	81 e0       	ldi	r24, 0x01	; 1
    6606:	80 93 b1 27 	sts	0x27B1, r24
                    while(okToEraseFile);
    660a:	80 91 b1 27 	lds	r24, 0x27B1
    660e:	88 23       	and	r24, r24
    6610:	e1 f7       	brne	.-8      	; 0x660a <Uploader_eraseFile+0x82>
                    if(eraseFileReturn == FR_OK){
    6612:	80 91 46 46 	lds	r24, 0x4646
    6616:	88 23       	and	r24, r24
    6618:	11 f4       	brne	.+4      	; 0x661e <Uploader_eraseFile+0x96>
                        if(!Debug_SendByte('T')){
    661a:	84 e5       	ldi	r24, 0x54	; 84
    661c:	01 c0       	rjmp	.+2      	; 0x6620 <Uploader_eraseFile+0x98>
							return false;
						}
                        return true;
                    } else {
                        if(!Debug_SendByte('F')){
    661e:	86 e4       	ldi	r24, 0x46	; 70
    6620:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6624:	88 23       	and	r24, r24
    6626:	61 f0       	breq	.+24     	; 0x6640 <Uploader_eraseFile+0xb8>
    6628:	81 e0       	ldi	r24, 0x01	; 1
    662a:	0a c0       	rjmp	.+20     	; 0x6640 <Uploader_eraseFile+0xb8>
    662c:	11 e0       	ldi	r17, 0x01	; 1
    662e:	ce 01       	movw	r24, r28
    6630:	01 97       	sbiw	r24, 0x01	; 1
    6632:	f1 f7       	brne	.-4      	; 0x6630 <Uploader_eraseFile+0xa8>
                    }
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6634:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    6636:	85 e6       	ldi	r24, 0x65	; 101
    6638:	f8 16       	cp	r15, r24
    663a:	09 f0       	breq	.+2      	; 0x663e <Uploader_eraseFile+0xb6>
    663c:	b5 cf       	rjmp	.-150    	; 0x65a8 <Uploader_eraseFile+0x20>
    663e:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    6640:	df 91       	pop	r29
    6642:	cf 91       	pop	r28
    6644:	1f 91       	pop	r17
    6646:	0f 91       	pop	r16
    6648:	ff 90       	pop	r15
    664a:	08 95       	ret
    if(!Debug_SendByte('E')){
		return false;
	}
    while(true){
        if(Debug_CharReadyToRead()){
            if(commandCounter == 0){
    664c:	11 23       	and	r17, r17
    664e:	09 f4       	brne	.+2      	; 0x6652 <Uploader_eraseFile+0xca>
    6650:	b8 cf       	rjmp	.-144    	; 0x65c2 <Uploader_eraseFile+0x3a>
    6652:	c0 cf       	rjmp	.-128    	; 0x65d4 <Uploader_eraseFile+0x4c>

00006654 <Uploader_ClearCRC>:
	return true;
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    6654:	8f ef       	ldi	r24, 0xFF	; 255
    6656:	9f ef       	ldi	r25, 0xFF	; 255
    6658:	af ef       	ldi	r26, 0xFF	; 255
    665a:	bf ef       	ldi	r27, 0xFF	; 255
    665c:	80 93 30 38 	sts	0x3830, r24
    6660:	90 93 31 38 	sts	0x3831, r25
    6664:	a0 93 32 38 	sts	0x3832, r26
    6668:	b0 93 33 38 	sts	0x3833, r27
}
    666c:	08 95       	ret

0000666e <Uploader_WriteCRC>:

bool Uploader_WriteCRC(void){
    666e:	ef 92       	push	r14
    6670:	ff 92       	push	r15
    6672:	0f 93       	push	r16
    6674:	1f 93       	push	r17
    uint32_t tmpCRC = uploadCRC^0xFFFFFFFF;
    6676:	e0 90 30 38 	lds	r14, 0x3830
    667a:	f0 90 31 38 	lds	r15, 0x3831
    667e:	00 91 32 38 	lds	r16, 0x3832
    6682:	10 91 33 38 	lds	r17, 0x3833
    6686:	e0 94       	com	r14
    6688:	f0 94       	com	r15
    668a:	00 95       	com	r16
    668c:	10 95       	com	r17
    if(!Debug_SendByte((tmpCRC >> 24) & 0xFF)){
    668e:	81 2f       	mov	r24, r17
    6690:	99 27       	eor	r25, r25
    6692:	aa 27       	eor	r26, r26
    6694:	bb 27       	eor	r27, r27
    6696:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    669a:	88 23       	and	r24, r24
    669c:	b1 f0       	breq	.+44     	; 0x66ca <Uploader_WriteCRC+0x5c>
		return false;
	}
    if(!Debug_SendByte((tmpCRC >> 16) & 0xFF)){
    669e:	c8 01       	movw	r24, r16
    66a0:	aa 27       	eor	r26, r26
    66a2:	bb 27       	eor	r27, r27
    66a4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    66a8:	88 23       	and	r24, r24
    66aa:	79 f0       	breq	.+30     	; 0x66ca <Uploader_WriteCRC+0x5c>
		return false;
	}
    if(!Debug_SendByte((tmpCRC >>  8) & 0xFF)){
    66ac:	bb 27       	eor	r27, r27
    66ae:	a1 2f       	mov	r26, r17
    66b0:	90 2f       	mov	r25, r16
    66b2:	8f 2d       	mov	r24, r15
    66b4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    66b8:	88 23       	and	r24, r24
    66ba:	39 f0       	breq	.+14     	; 0x66ca <Uploader_WriteCRC+0x5c>
		return false;
	}
    if(!Debug_SendByte((tmpCRC >>  0) & 0xFF)){
    66bc:	8e 2d       	mov	r24, r14
    66be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    66c2:	88 23       	and	r24, r24
    66c4:	19 f0       	breq	.+6      	; 0x66cc <Uploader_WriteCRC+0x5e>
    66c6:	81 e0       	ldi	r24, 0x01	; 1
    66c8:	01 c0       	rjmp	.+2      	; 0x66cc <Uploader_WriteCRC+0x5e>
    66ca:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    66cc:	1f 91       	pop	r17
    66ce:	0f 91       	pop	r16
    66d0:	ff 90       	pop	r15
    66d2:	ef 90       	pop	r14
    66d4:	08 95       	ret

000066d6 <Uploader_uploadFile>:





bool Uploader_uploadFile(void){
    66d6:	5f 92       	push	r5
    66d8:	6f 92       	push	r6
    66da:	7f 92       	push	r7
    66dc:	8f 92       	push	r8
    66de:	9f 92       	push	r9
    66e0:	af 92       	push	r10
    66e2:	bf 92       	push	r11
    66e4:	cf 92       	push	r12
    66e6:	df 92       	push	r13
    66e8:	ef 92       	push	r14
    66ea:	ff 92       	push	r15
    66ec:	0f 93       	push	r16
    66ee:	1f 93       	push	r17
    66f0:	cf 93       	push	r28
    66f2:	df 93       	push	r29
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    uint32_t responseLength;
    bool gotFileName = false;
	
    uploading = true;
    66f4:	81 e0       	ldi	r24, 0x01	; 1
    66f6:	80 93 a7 27 	sts	0x27A7, r24
    66fa:	88 ee       	ldi	r24, 0xE8	; 232
    66fc:	93 e0       	ldi	r25, 0x03	; 3
    66fe:	20 e7       	ldi	r18, 0x70	; 112
    6700:	31 e0       	ldi	r19, 0x01	; 1
    6702:	f9 01       	movw	r30, r18
    6704:	31 97       	sbiw	r30, 0x01	; 1
    6706:	f1 f7       	brne	.-4      	; 0x6704 <Uploader_uploadFile+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6708:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    670a:	d9 f7       	brne	.-10     	; 0x6702 <Uploader_uploadFile+0x2c>
    _delay_ms(100);
	
    if(!Debug_SendByte('D')){
    670c:	84 e4       	ldi	r24, 0x44	; 68
    670e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6712:	88 23       	and	r24, r24
    6714:	09 f4       	brne	.+2      	; 0x6718 <Uploader_uploadFile+0x42>
    6716:	d4 c1       	rjmp	.+936    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
    6718:	ff 24       	eor	r15, r15
    671a:	10 e0       	ldi	r17, 0x00	; 0
    671c:	00 e0       	ldi	r16, 0x00	; 0
    671e:	c6 e6       	ldi	r28, 0x66	; 102
    6720:	de e0       	ldi	r29, 0x0E	; 14
    6722:	20 91 7b 27 	lds	r18, 0x277B
    6726:	30 91 7c 27 	lds	r19, 0x277C
    672a:	80 91 79 27 	lds	r24, 0x2779
    672e:	90 91 7a 27 	lds	r25, 0x277A
    6732:	28 17       	cp	r18, r24
    6734:	39 07       	cpc	r19, r25
    6736:	09 f0       	breq	.+2      	; 0x673a <Uploader_uploadFile+0x64>
    6738:	d4 c1       	rjmp	.+936    	; 0x6ae2 <Uploader_uploadFile+0x40c>
    673a:	26 c0       	rjmp	.+76     	; 0x6788 <Uploader_uploadFile+0xb2>
	}
	
    while(!gotFileName){
        if(Debug_CharReadyToRead()){
            if(commandCounter == 0){
                numBytesToRead = Debug_GetByte(false);
    673c:	80 e0       	ldi	r24, 0x00	; 0
    673e:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
    6742:	08 2f       	mov	r16, r24
                if(!Debug_SendByte(numBytesToRead)){
    6744:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6748:	88 23       	and	r24, r24
    674a:	09 f4       	brne	.+2      	; 0x674e <Uploader_uploadFile+0x78>
    674c:	b9 c1       	rjmp	.+882    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
    674e:	11 e0       	ldi	r17, 0x01	; 1
    6750:	1b c0       	rjmp	.+54     	; 0x6788 <Uploader_uploadFile+0xb2>
					return false;
				}
                commandCounter++;
            } else {
                fileToUpload[commandCounter-1] = Debug_GetByte(false);
    6752:	80 e0       	ldi	r24, 0x00	; 0
    6754:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
    6758:	e1 2f       	mov	r30, r17
    675a:	f0 e0       	ldi	r31, 0x00	; 0
    675c:	ea 5a       	subi	r30, 0xAA	; 170
    675e:	ff 4c       	sbci	r31, 0xCF	; 207
    6760:	80 83       	st	Z, r24
                if(!Debug_SendByte(fileToUpload[commandCounter-1])){
    6762:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6766:	88 23       	and	r24, r24
    6768:	09 f4       	brne	.+2      	; 0x676c <Uploader_uploadFile+0x96>
    676a:	aa c1       	rjmp	.+852    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
					return false;
				}
                commandCounter++;
    676c:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    676e:	e1 2f       	mov	r30, r17
    6770:	f0 e0       	ldi	r31, 0x00	; 0
    6772:	80 2f       	mov	r24, r16
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	01 96       	adiw	r24, 0x01	; 1
    6778:	e8 17       	cp	r30, r24
    677a:	f9 07       	cpc	r31, r25
    677c:	29 f4       	brne	.+10     	; 0x6788 <Uploader_uploadFile+0xb2>
                    fileToUpload[numBytesToRead+1] = 0;
    677e:	e9 5a       	subi	r30, 0xA9	; 169
    6780:	ff 4c       	sbci	r31, 0xCF	; 207
    6782:	10 82       	st	Z, r1
    6784:	21 e0       	ldi	r18, 0x01	; 1
    6786:	01 c0       	rjmp	.+2      	; 0x678a <Uploader_uploadFile+0xb4>
    6788:	20 e0       	ldi	r18, 0x00	; 0
    678a:	ce 01       	movw	r24, r28
    678c:	01 97       	sbiw	r24, 0x01	; 1
    678e:	f1 f7       	brne	.-4      	; 0x678c <Uploader_uploadFile+0xb6>
                    gotFileName = true;
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6790:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    6792:	85 e6       	ldi	r24, 0x65	; 101
    6794:	f8 16       	cp	r15, r24
    6796:	09 f4       	brne	.+2      	; 0x679a <Uploader_uploadFile+0xc4>
    6798:	93 c1       	rjmp	.+806    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
	
    if(!Debug_SendByte('D')){
		return false;
	}
	
    while(!gotFileName){
    679a:	22 23       	and	r18, r18
    679c:	09 f4       	brne	.+2      	; 0x67a0 <Uploader_uploadFile+0xca>
    679e:	c1 cf       	rjmp	.-126    	; 0x6722 <Uploader_uploadFile+0x4c>
        if(timeOutCounter > 100){
            return false;
        }
    }
	
    okToOpenFileToUpload = true;
    67a0:	81 e0       	ldi	r24, 0x01	; 1
    67a2:	80 93 ac 27 	sts	0x27AC, r24
    while(!uploadFileOpened);
    67a6:	80 91 ad 27 	lds	r24, 0x27AD
    67aa:	88 23       	and	r24, r24
    67ac:	e1 f3       	breq	.-8      	; 0x67a6 <Uploader_uploadFile+0xd0>
    67ae:	80 e1       	ldi	r24, 0x10	; 16
    67b0:	97 e2       	ldi	r25, 0x27	; 39
    67b2:	20 e7       	ldi	r18, 0x70	; 112
    67b4:	31 e0       	ldi	r19, 0x01	; 1
    67b6:	f9 01       	movw	r30, r18
    67b8:	31 97       	sbiw	r30, 0x01	; 1
    67ba:	f1 f7       	brne	.-4      	; 0x67b8 <Uploader_uploadFile+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67be:	d9 f7       	brne	.-10     	; 0x67b6 <Uploader_uploadFile+0xe0>
	_delay_ms(1000);
	
	if(!fileExists){
    67c0:	80 91 b2 27 	lds	r24, 0x27B2
    67c4:	88 23       	and	r24, r24
    67c6:	19 f5       	brne	.+70     	; 0x680e <Uploader_uploadFile+0x138>
        if(!Debug_SendByte(0)){
    67c8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    67cc:	88 23       	and	r24, r24
    67ce:	09 f4       	brne	.+2      	; 0x67d2 <Uploader_uploadFile+0xfc>
    67d0:	77 c1       	rjmp	.+750    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
			return false;
		}
        if(!Debug_SendByte(0)){
    67d2:	80 e0       	ldi	r24, 0x00	; 0
    67d4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    67d8:	88 23       	and	r24, r24
    67da:	09 f4       	brne	.+2      	; 0x67de <Uploader_uploadFile+0x108>
    67dc:	71 c1       	rjmp	.+738    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
			return false;
		}
        if(!Debug_SendByte(0)){
    67de:	80 e0       	ldi	r24, 0x00	; 0
    67e0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    67e4:	88 23       	and	r24, r24
    67e6:	09 f4       	brne	.+2      	; 0x67ea <Uploader_uploadFile+0x114>
    67e8:	6b c1       	rjmp	.+726    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
			return false;
		}
        if(!Debug_SendByte(0)){
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    67f0:	88 23       	and	r24, r24
    67f2:	09 f4       	brne	.+2      	; 0x67f6 <Uploader_uploadFile+0x120>
    67f4:	65 c1       	rjmp	.+714    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
			return false;
		}
        okToCloseUploadFile = true;
    67f6:	81 e0       	ldi	r24, 0x01	; 1
    67f8:	80 93 b0 27 	sts	0x27B0, r24
        while(okToCloseUploadFile);
    67fc:	80 91 b0 27 	lds	r24, 0x27B0
    6800:	88 23       	and	r24, r24
    6802:	e1 f7       	brne	.-8      	; 0x67fc <Uploader_uploadFile+0x126>
        uploading = false;
    6804:	10 92 a7 27 	sts	0x27A7, r1
        okToUpload = false;
    6808:	10 92 aa 27 	sts	0x27AA, r1
    680c:	57 c1       	rjmp	.+686    	; 0x6abc <Uploader_uploadFile+0x3e6>
	return true;
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    680e:	8f ef       	ldi	r24, 0xFF	; 255
    6810:	9f ef       	ldi	r25, 0xFF	; 255
    6812:	af ef       	ldi	r26, 0xFF	; 255
    6814:	bf ef       	ldi	r27, 0xFF	; 255
    6816:	80 93 30 38 	sts	0x3830, r24
    681a:	90 93 31 38 	sts	0x3831, r25
    681e:	a0 93 32 38 	sts	0x3832, r26
    6822:	b0 93 33 38 	sts	0x3833, r27
        okToUpload = false;
        return true;
    }
	
    Uploader_ClearCRC();
    responseLength = uploadFileSize + 4;
    6826:	e0 90 99 27 	lds	r14, 0x2799
    682a:	f0 90 9a 27 	lds	r15, 0x279A
    682e:	00 91 9b 27 	lds	r16, 0x279B
    6832:	10 91 9c 27 	lds	r17, 0x279C
    6836:	84 e0       	ldi	r24, 0x04	; 4
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	a0 e0       	ldi	r26, 0x00	; 0
    683c:	b0 e0       	ldi	r27, 0x00	; 0
    683e:	e8 0e       	add	r14, r24
    6840:	f9 1e       	adc	r15, r25
    6842:	0a 1f       	adc	r16, r26
    6844:	1b 1f       	adc	r17, r27
	if(!Debug_SendByte((responseLength >> 24) & 0xFF)){
    6846:	81 2f       	mov	r24, r17
    6848:	99 27       	eor	r25, r25
    684a:	aa 27       	eor	r26, r26
    684c:	bb 27       	eor	r27, r27
    684e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6852:	88 23       	and	r24, r24
    6854:	09 f4       	brne	.+2      	; 0x6858 <Uploader_uploadFile+0x182>
    6856:	34 c1       	rjmp	.+616    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
	   return false;
	}
	if(!Debug_SendByte((responseLength >> 16) & 0xFF)){
    6858:	c8 01       	movw	r24, r16
    685a:	aa 27       	eor	r26, r26
    685c:	bb 27       	eor	r27, r27
    685e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6862:	88 23       	and	r24, r24
    6864:	09 f4       	brne	.+2      	; 0x6868 <Uploader_uploadFile+0x192>
    6866:	2c c1       	rjmp	.+600    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
		return false;
	}
	if(!Debug_SendByte((responseLength >>  8) & 0xFF)){
    6868:	bb 27       	eor	r27, r27
    686a:	a1 2f       	mov	r26, r17
    686c:	90 2f       	mov	r25, r16
    686e:	8f 2d       	mov	r24, r15
    6870:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6874:	88 23       	and	r24, r24
    6876:	09 f4       	brne	.+2      	; 0x687a <Uploader_uploadFile+0x1a4>
    6878:	23 c1       	rjmp	.+582    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
		return false;
	}
	if(!Debug_SendByte((responseLength >>  0) & 0xFF)){
    687a:	8e 2d       	mov	r24, r14
    687c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6880:	88 23       	and	r24, r24
    6882:	09 f4       	brne	.+2      	; 0x6886 <Uploader_uploadFile+0x1b0>
    6884:	1d c1       	rjmp	.+570    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
	   return false;
	}
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    6886:	60 91 99 27 	lds	r22, 0x2799
    688a:	70 91 9a 27 	lds	r23, 0x279A
    688e:	80 91 9b 27 	lds	r24, 0x279B
    6892:	90 91 9c 27 	lds	r25, 0x279C
    6896:	28 ee       	ldi	r18, 0xE8	; 232
    6898:	33 e0       	ldi	r19, 0x03	; 3
    689a:	40 e0       	ldi	r20, 0x00	; 0
    689c:	50 e0       	ldi	r21, 0x00	; 0
    689e:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    68a2:	c9 01       	movw	r24, r18
    68a4:	da 01       	movw	r26, r20
    68a6:	80 93 9e 27 	sts	0x279E, r24
    68aa:	90 93 9f 27 	sts	0x279F, r25
    68ae:	a0 93 a0 27 	sts	0x27A0, r26
    68b2:	b0 93 a1 27 	sts	0x27A1, r27
    leftOverBytesToUpload   = uploadFileSize %  1000;
    68b6:	60 91 99 27 	lds	r22, 0x2799
    68ba:	70 91 9a 27 	lds	r23, 0x279A
    68be:	80 91 9b 27 	lds	r24, 0x279B
    68c2:	90 91 9c 27 	lds	r25, 0x279C
    68c6:	28 ee       	ldi	r18, 0xE8	; 232
    68c8:	33 e0       	ldi	r19, 0x03	; 3
    68ca:	40 e0       	ldi	r20, 0x00	; 0
    68cc:	50 e0       	ldi	r21, 0x00	; 0
    68ce:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    68d2:	9b 01       	movw	r18, r22
    68d4:	ac 01       	movw	r20, r24
    68d6:	20 93 a2 27 	sts	0x27A2, r18
    68da:	30 93 a3 27 	sts	0x27A3, r19
    68de:	40 93 a4 27 	sts	0x27A4, r20
    68e2:	50 93 a5 27 	sts	0x27A5, r21
    68e6:	66 24       	eor	r6, r6
    68e8:	77 24       	eor	r7, r7
    68ea:	43 01       	movw	r8, r6
    68ec:	aa 24       	eor	r10, r10
    68ee:	bb 24       	eor	r11, r11
    68f0:	65 01       	movw	r12, r10
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
    68f2:	55 24       	eor	r5, r5
    68f4:	53 94       	inc	r5
    68f6:	66 c0       	rjmp	.+204    	; 0x69c4 <Uploader_uploadFile+0x2ee>
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
    68f8:	10 92 af 27 	sts	0x27AF, r1
        okToFillUploadFileBuffer = true;
    68fc:	50 92 ae 27 	sts	0x27AE, r5
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    6900:	20 91 9e 27 	lds	r18, 0x279E
    6904:	30 91 9f 27 	lds	r19, 0x279F
    6908:	40 91 a0 27 	lds	r20, 0x27A0
    690c:	50 91 a1 27 	lds	r21, 0x27A1
    6910:	c6 01       	movw	r24, r12
    6912:	b5 01       	movw	r22, r10
    6914:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    6918:	20 93 9d 27 	sts	0x279D, r18
        while(!uploadFileBufferFull);
    691c:	80 91 af 27 	lds	r24, 0x27AF
    6920:	88 23       	and	r24, r24
    6922:	e1 f3       	breq	.-8      	; 0x691c <Uploader_uploadFile+0x246>
    6924:	c5 e6       	ldi	r28, 0x65	; 101
    6926:	dc e2       	ldi	r29, 0x2C	; 44
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
			if(!Debug_SendByte(uploadFileBuffer[j])){
    6928:	88 81       	ld	r24, Y
    692a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    692e:	88 23       	and	r24, r24
    6930:	09 f4       	brne	.+2      	; 0x6934 <Uploader_uploadFile+0x25e>
    6932:	c6 c0       	rjmp	.+396    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
	return true;
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    6934:	e0 90 30 38 	lds	r14, 0x3830
    6938:	f0 90 31 38 	lds	r15, 0x3831
    693c:	00 91 32 38 	lds	r16, 0x3832
    6940:	10 91 33 38 	lds	r17, 0x3833
    6944:	80 91 30 38 	lds	r24, 0x3830
    6948:	90 91 31 38 	lds	r25, 0x3831
    694c:	a0 91 32 38 	lds	r26, 0x3832
    6950:	b0 91 33 38 	lds	r27, 0x3833
    6954:	90 70       	andi	r25, 0x00	; 0
    6956:	a0 70       	andi	r26, 0x00	; 0
    6958:	b0 70       	andi	r27, 0x00	; 0
    695a:	29 91       	ld	r18, Y+
    695c:	30 e0       	ldi	r19, 0x00	; 0
    695e:	40 e0       	ldi	r20, 0x00	; 0
    6960:	50 e0       	ldi	r21, 0x00	; 0
    6962:	82 27       	eor	r24, r18
    6964:	93 27       	eor	r25, r19
    6966:	a4 27       	eor	r26, r20
    6968:	b5 27       	eor	r27, r21
    696a:	88 0f       	add	r24, r24
    696c:	99 1f       	adc	r25, r25
    696e:	88 0f       	add	r24, r24
    6970:	99 1f       	adc	r25, r25
    6972:	82 5f       	subi	r24, 0xF2	; 242
    6974:	9c 4d       	sbci	r25, 0xDC	; 220
    6976:	ef 2c       	mov	r14, r15
    6978:	f0 2e       	mov	r15, r16
    697a:	01 2f       	mov	r16, r17
    697c:	11 27       	eor	r17, r17
    697e:	fc 01       	movw	r30, r24
    6980:	80 81       	ld	r24, Z
    6982:	91 81       	ldd	r25, Z+1	; 0x01
    6984:	a2 81       	ldd	r26, Z+2	; 0x02
    6986:	b3 81       	ldd	r27, Z+3	; 0x03
    6988:	e8 26       	eor	r14, r24
    698a:	f9 26       	eor	r15, r25
    698c:	0a 27       	eor	r16, r26
    698e:	1b 27       	eor	r17, r27
    6990:	e0 92 30 38 	sts	0x3830, r14
    6994:	f0 92 31 38 	sts	0x3831, r15
    6998:	00 93 32 38 	sts	0x3832, r16
    699c:	10 93 33 38 	sts	0x3833, r17
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
        while(!uploadFileBufferFull);
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
    69a0:	f0 e3       	ldi	r31, 0x30	; 48
    69a2:	cd 34       	cpi	r28, 0x4D	; 77
    69a4:	df 07       	cpc	r29, r31
    69a6:	09 f0       	breq	.+2      	; 0x69aa <Uploader_uploadFile+0x2d4>
    69a8:	bf cf       	rjmp	.-130    	; 0x6928 <Uploader_uploadFile+0x252>
	}
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    69aa:	08 94       	sec
    69ac:	61 1c       	adc	r6, r1
    69ae:	71 1c       	adc	r7, r1
    69b0:	81 1c       	adc	r8, r1
    69b2:	91 1c       	adc	r9, r1
    69b4:	84 e6       	ldi	r24, 0x64	; 100
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	a0 e0       	ldi	r26, 0x00	; 0
    69ba:	b0 e0       	ldi	r27, 0x00	; 0
    69bc:	a8 0e       	add	r10, r24
    69be:	b9 1e       	adc	r11, r25
    69c0:	ca 1e       	adc	r12, r26
    69c2:	db 1e       	adc	r13, r27
    69c4:	80 91 9e 27 	lds	r24, 0x279E
    69c8:	90 91 9f 27 	lds	r25, 0x279F
    69cc:	a0 91 a0 27 	lds	r26, 0x27A0
    69d0:	b0 91 a1 27 	lds	r27, 0x27A1
    69d4:	68 16       	cp	r6, r24
    69d6:	79 06       	cpc	r7, r25
    69d8:	8a 06       	cpc	r8, r26
    69da:	9b 06       	cpc	r9, r27
    69dc:	08 f4       	brcc	.+2      	; 0x69e0 <Uploader_uploadFile+0x30a>
    69de:	8c cf       	rjmp	.-232    	; 0x68f8 <Uploader_uploadFile+0x222>
			Uploader_UpdateCRC(uploadFileBuffer[j]);
			
			
		}
    }
    uploadFileBufferFull = false;
    69e0:	10 92 af 27 	sts	0x27AF, r1
    okToFillUploadFileBuffer = true;
    69e4:	81 e0       	ldi	r24, 0x01	; 1
    69e6:	80 93 ae 27 	sts	0x27AE, r24
    while(!uploadFileBufferFull);
    69ea:	80 91 af 27 	lds	r24, 0x27AF
    69ee:	88 23       	and	r24, r24
    69f0:	e1 f3       	breq	.-8      	; 0x69ea <Uploader_uploadFile+0x314>
    69f2:	c5 e6       	ldi	r28, 0x65	; 101
    69f4:	dc e2       	ldi	r29, 0x2C	; 44
    69f6:	aa 24       	eor	r10, r10
    69f8:	bb 24       	eor	r11, r11
    69fa:	65 01       	movw	r12, r10
    69fc:	41 c0       	rjmp	.+130    	; 0x6a80 <Uploader_uploadFile+0x3aa>
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
        if(!Debug_SendByte(uploadFileBuffer[j])){
    69fe:	88 81       	ld	r24, Y
    6a00:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    6a04:	08 94       	sec
    6a06:	a1 1c       	adc	r10, r1
    6a08:	b1 1c       	adc	r11, r1
    6a0a:	c1 1c       	adc	r12, r1
    6a0c:	d1 1c       	adc	r13, r1
    6a0e:	88 23       	and	r24, r24
    6a10:	09 f4       	brne	.+2      	; 0x6a14 <Uploader_uploadFile+0x33e>
    6a12:	56 c0       	rjmp	.+172    	; 0x6ac0 <Uploader_uploadFile+0x3ea>
	return true;
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    6a14:	e0 90 30 38 	lds	r14, 0x3830
    6a18:	f0 90 31 38 	lds	r15, 0x3831
    6a1c:	00 91 32 38 	lds	r16, 0x3832
    6a20:	10 91 33 38 	lds	r17, 0x3833
    6a24:	80 91 30 38 	lds	r24, 0x3830
    6a28:	90 91 31 38 	lds	r25, 0x3831
    6a2c:	a0 91 32 38 	lds	r26, 0x3832
    6a30:	b0 91 33 38 	lds	r27, 0x3833
    6a34:	90 70       	andi	r25, 0x00	; 0
    6a36:	a0 70       	andi	r26, 0x00	; 0
    6a38:	b0 70       	andi	r27, 0x00	; 0
    6a3a:	29 91       	ld	r18, Y+
    6a3c:	30 e0       	ldi	r19, 0x00	; 0
    6a3e:	40 e0       	ldi	r20, 0x00	; 0
    6a40:	50 e0       	ldi	r21, 0x00	; 0
    6a42:	82 27       	eor	r24, r18
    6a44:	93 27       	eor	r25, r19
    6a46:	a4 27       	eor	r26, r20
    6a48:	b5 27       	eor	r27, r21
    6a4a:	88 0f       	add	r24, r24
    6a4c:	99 1f       	adc	r25, r25
    6a4e:	88 0f       	add	r24, r24
    6a50:	99 1f       	adc	r25, r25
    6a52:	82 5f       	subi	r24, 0xF2	; 242
    6a54:	9c 4d       	sbci	r25, 0xDC	; 220
    6a56:	ef 2c       	mov	r14, r15
    6a58:	f0 2e       	mov	r15, r16
    6a5a:	01 2f       	mov	r16, r17
    6a5c:	11 27       	eor	r17, r17
    6a5e:	fc 01       	movw	r30, r24
    6a60:	80 81       	ld	r24, Z
    6a62:	91 81       	ldd	r25, Z+1	; 0x01
    6a64:	a2 81       	ldd	r26, Z+2	; 0x02
    6a66:	b3 81       	ldd	r27, Z+3	; 0x03
    6a68:	e8 26       	eor	r14, r24
    6a6a:	f9 26       	eor	r15, r25
    6a6c:	0a 27       	eor	r16, r26
    6a6e:	1b 27       	eor	r17, r27
    6a70:	e0 92 30 38 	sts	0x3830, r14
    6a74:	f0 92 31 38 	sts	0x3831, r15
    6a78:	00 93 32 38 	sts	0x3832, r16
    6a7c:	10 93 33 38 	sts	0x3833, r17
		}
    }
    uploadFileBufferFull = false;
    okToFillUploadFileBuffer = true;
    while(!uploadFileBufferFull);
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    6a80:	80 91 a2 27 	lds	r24, 0x27A2
    6a84:	90 91 a3 27 	lds	r25, 0x27A3
    6a88:	a0 91 a4 27 	lds	r26, 0x27A4
    6a8c:	b0 91 a5 27 	lds	r27, 0x27A5
    6a90:	a8 16       	cp	r10, r24
    6a92:	b9 06       	cpc	r11, r25
    6a94:	ca 06       	cpc	r12, r26
    6a96:	db 06       	cpc	r13, r27
    6a98:	08 f4       	brcc	.+2      	; 0x6a9c <Uploader_uploadFile+0x3c6>
    6a9a:	b1 cf       	rjmp	.-158    	; 0x69fe <Uploader_uploadFile+0x328>
			return false;
		}
        Uploader_UpdateCRC(uploadFileBuffer[j]);
    }
	
    Uploader_WriteCRC();
    6a9c:	0e 94 37 33 	call	0x666e	; 0x666e <Uploader_WriteCRC>
	
    okToCloseUploadFile = true;
    6aa0:	81 e0       	ldi	r24, 0x01	; 1
    6aa2:	80 93 b0 27 	sts	0x27B0, r24
    while(okToCloseUploadFile);
    6aa6:	80 91 b0 27 	lds	r24, 0x27B0
    6aaa:	88 23       	and	r24, r24
    6aac:	e1 f7       	brne	.-8      	; 0x6aa6 <Uploader_uploadFile+0x3d0>
    uploading = false;
    6aae:	10 92 a7 27 	sts	0x27A7, r1
    okToUpload = false;
    6ab2:	10 92 aa 27 	sts	0x27AA, r1
    uploadPercentBS = 100;
    6ab6:	84 e6       	ldi	r24, 0x64	; 100
    6ab8:	80 93 9d 27 	sts	0x279D, r24
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	01 c0       	rjmp	.+2      	; 0x6ac2 <Uploader_uploadFile+0x3ec>
    return true;
    6ac0:	80 e0       	ldi	r24, 0x00	; 0
}
    6ac2:	df 91       	pop	r29
    6ac4:	cf 91       	pop	r28
    6ac6:	1f 91       	pop	r17
    6ac8:	0f 91       	pop	r16
    6aca:	ff 90       	pop	r15
    6acc:	ef 90       	pop	r14
    6ace:	df 90       	pop	r13
    6ad0:	cf 90       	pop	r12
    6ad2:	bf 90       	pop	r11
    6ad4:	af 90       	pop	r10
    6ad6:	9f 90       	pop	r9
    6ad8:	8f 90       	pop	r8
    6ada:	7f 90       	pop	r7
    6adc:	6f 90       	pop	r6
    6ade:	5f 90       	pop	r5
    6ae0:	08 95       	ret
		return false;
	}
	
    while(!gotFileName){
        if(Debug_CharReadyToRead()){
            if(commandCounter == 0){
    6ae2:	11 23       	and	r17, r17
    6ae4:	09 f4       	brne	.+2      	; 0x6ae8 <Uploader_uploadFile+0x412>
    6ae6:	2a ce       	rjmp	.-940    	; 0x673c <Uploader_uploadFile+0x66>
    6ae8:	34 ce       	rjmp	.-920    	; 0x6752 <Uploader_uploadFile+0x7c>

00006aea <Uploader_UpdateCRC>:
	}
	return true;
}


void Uploader_UpdateCRC(uint8_t byte){
    6aea:	ef 92       	push	r14
    6aec:	ff 92       	push	r15
    6aee:	0f 93       	push	r16
    6af0:	1f 93       	push	r17
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    6af2:	e0 90 30 38 	lds	r14, 0x3830
    6af6:	f0 90 31 38 	lds	r15, 0x3831
    6afa:	00 91 32 38 	lds	r16, 0x3832
    6afe:	10 91 33 38 	lds	r17, 0x3833
    6b02:	20 91 30 38 	lds	r18, 0x3830
    6b06:	30 91 31 38 	lds	r19, 0x3831
    6b0a:	40 91 32 38 	lds	r20, 0x3832
    6b0e:	50 91 33 38 	lds	r21, 0x3833
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	a0 e0       	ldi	r26, 0x00	; 0
    6b16:	b0 e0       	ldi	r27, 0x00	; 0
    6b18:	30 70       	andi	r19, 0x00	; 0
    6b1a:	40 70       	andi	r20, 0x00	; 0
    6b1c:	50 70       	andi	r21, 0x00	; 0
    6b1e:	82 27       	eor	r24, r18
    6b20:	93 27       	eor	r25, r19
    6b22:	a4 27       	eor	r26, r20
    6b24:	b5 27       	eor	r27, r21
    6b26:	88 0f       	add	r24, r24
    6b28:	99 1f       	adc	r25, r25
    6b2a:	88 0f       	add	r24, r24
    6b2c:	99 1f       	adc	r25, r25
    6b2e:	82 5f       	subi	r24, 0xF2	; 242
    6b30:	9c 4d       	sbci	r25, 0xDC	; 220
    6b32:	ef 2c       	mov	r14, r15
    6b34:	f0 2e       	mov	r15, r16
    6b36:	01 2f       	mov	r16, r17
    6b38:	11 27       	eor	r17, r17
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	80 81       	ld	r24, Z
    6b3e:	91 81       	ldd	r25, Z+1	; 0x01
    6b40:	a2 81       	ldd	r26, Z+2	; 0x02
    6b42:	b3 81       	ldd	r27, Z+3	; 0x03
    6b44:	e8 26       	eor	r14, r24
    6b46:	f9 26       	eor	r15, r25
    6b48:	0a 27       	eor	r16, r26
    6b4a:	1b 27       	eor	r17, r27
    6b4c:	e0 92 30 38 	sts	0x3830, r14
    6b50:	f0 92 31 38 	sts	0x3831, r15
    6b54:	00 93 32 38 	sts	0x3832, r16
    6b58:	10 93 33 38 	sts	0x3833, r17
    6b5c:	1f 91       	pop	r17
    6b5e:	0f 91       	pop	r16
    6b60:	ff 90       	pop	r15
    6b62:	ef 90       	pop	r14
    6b64:	08 95       	ret

00006b66 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    6b66:	0f 93       	push	r16
    6b68:	df 93       	push	r29
    6b6a:	cf 93       	push	r28
    6b6c:	0f 92       	push	r0
    6b6e:	cd b7       	in	r28, 0x3d	; 61
    6b70:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    6b72:	80 ec       	ldi	r24, 0xC0	; 192
    6b74:	e0 e5       	ldi	r30, 0x50	; 80
    6b76:	f0 e0       	ldi	r31, 0x00	; 0
    6b78:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    6b7a:	80 91 50 00 	lds	r24, 0x0050
    6b7e:	88 60       	ori	r24, 0x08	; 8
    6b80:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    6b84:	80 91 51 00 	lds	r24, 0x0051
    6b88:	83 ff       	sbrs	r24, 3
    6b8a:	fc cf       	rjmp	.-8      	; 0x6b84 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    6b8c:	20 91 40 00 	lds	r18, 0x0040
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    6b90:	8f b7       	in	r24, 0x3f	; 63
    6b92:	89 83       	std	Y+1, r24	; 0x01
    cli();
    6b94:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    6b96:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    6b98:	28 7f       	andi	r18, 0xF8	; 248
    6b9a:	23 60       	ori	r18, 0x03	; 3
    6b9c:	80 e4       	ldi	r24, 0x40	; 64
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	fc 01       	movw	r30, r24
    6ba2:	08 ed       	ldi	r16, 0xD8	; 216
    6ba4:	04 bf       	out	0x34, r16	; 52
    6ba6:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    6ba8:	89 81       	ldd	r24, Y+1	; 0x01
    6baa:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    6bac:	80 91 50 00 	lds	r24, 0x0050
    6bb0:	8e 7f       	andi	r24, 0xFE	; 254
    6bb2:	80 93 50 00 	sts	0x0050, r24
}
    6bb6:	0f 90       	pop	r0
    6bb8:	cf 91       	pop	r28
    6bba:	df 91       	pop	r29
    6bbc:	0f 91       	pop	r16
    6bbe:	08 95       	ret

00006bc0 <Disable_JTAG>:

void Disable_JTAG(void){
    6bc0:	0f 93       	push	r16
    6bc2:	df 93       	push	r29
    6bc4:	cf 93       	push	r28
    6bc6:	0f 92       	push	r0
    6bc8:	cd b7       	in	r28, 0x3d	; 61
    6bca:	de b7       	in	r29, 0x3e	; 62
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    6bcc:	8f b7       	in	r24, 0x3f	; 63
    6bce:	89 83       	std	Y+1, r24	; 0x01
    cli();
    6bd0:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    6bd2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    6bd4:	21 e0       	ldi	r18, 0x01	; 1
    6bd6:	86 e9       	ldi	r24, 0x96	; 150
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	fc 01       	movw	r30, r24
    6bdc:	08 ed       	ldi	r16, 0xD8	; 216
    6bde:	04 bf       	out	0x34, r16	; 52
    6be0:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    6be2:	89 81       	ldd	r24, Y+1	; 0x01
    6be4:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    6be6:	0f 90       	pop	r0
    6be8:	cf 91       	pop	r28
    6bea:	df 91       	pop	r29
    6bec:	0f 91       	pop	r16
    6bee:	08 95       	ret

00006bf0 <Interrupt_Init>:


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    6bf0:	e0 ea       	ldi	r30, 0xA0	; 160
    6bf2:	f0 e0       	ldi	r31, 0x00	; 0
    6bf4:	82 81       	ldd	r24, Z+2	; 0x02
    6bf6:	87 60       	ori	r24, 0x07	; 7
    6bf8:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    6bfa:	78 94       	sei
}
    6bfc:	08 95       	ret

00006bfe <__vector_104>:

ISR(Button_IntVector){
    6bfe:	1f 92       	push	r1
    6c00:	0f 92       	push	r0
    6c02:	0f b6       	in	r0, 0x3f	; 63
    6c04:	0f 92       	push	r0
    6c06:	0b b6       	in	r0, 0x3b	; 59
    6c08:	0f 92       	push	r0
    6c0a:	11 24       	eor	r1, r1
    6c0c:	2f 93       	push	r18
    6c0e:	3f 93       	push	r19
    6c10:	4f 93       	push	r20
    6c12:	5f 93       	push	r21
    6c14:	6f 93       	push	r22
    6c16:	7f 93       	push	r23
    6c18:	8f 93       	push	r24
    6c1a:	9f 93       	push	r25
    6c1c:	af 93       	push	r26
    6c1e:	bf 93       	push	r27
    6c20:	ef 93       	push	r30
    6c22:	ff 93       	push	r31
	if(!recording && timeIsValid && SD_Inserted() && !debounceEnabled){			// start recording
    6c24:	80 91 61 27 	lds	r24, 0x2761
    6c28:	88 23       	and	r24, r24
    6c2a:	f9 f4       	brne	.+62     	; 0x6c6a <__vector_104+0x6c>
    6c2c:	80 91 b3 27 	lds	r24, 0x27B3
    6c30:	88 23       	and	r24, r24
    6c32:	d9 f0       	breq	.+54     	; 0x6c6a <__vector_104+0x6c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    6c34:	80 91 8b 27 	lds	r24, 0x278B
    6c38:	88 23       	and	r24, r24
    6c3a:	b9 f0       	breq	.+46     	; 0x6c6a <__vector_104+0x6c>
    6c3c:	80 91 c9 27 	lds	r24, 0x27C9
    6c40:	88 23       	and	r24, r24
    6c42:	99 f4       	brne	.+38     	; 0x6c6a <__vector_104+0x6c>
		if(percentDiskUsed < 950){
    6c44:	80 91 c2 27 	lds	r24, 0x27C2
    6c48:	90 91 c3 27 	lds	r25, 0x27C3
    6c4c:	a0 91 c4 27 	lds	r26, 0x27C4
    6c50:	b0 91 c5 27 	lds	r27, 0x27C5
    6c54:	86 5b       	subi	r24, 0xB6	; 182
    6c56:	93 40       	sbci	r25, 0x03	; 3
    6c58:	a0 40       	sbci	r26, 0x00	; 0
    6c5a:	b0 40       	sbci	r27, 0x00	; 0
    6c5c:	f8 f4       	brcc	.+62     	; 0x6c9c <__vector_104+0x9e>
			debounceEnabled = true;
    6c5e:	81 e0       	ldi	r24, 0x01	; 1
    6c60:	80 93 c9 27 	sts	0x27C9, r24
			okToOpenLogFile = true;	
    6c64:	80 93 b4 27 	sts	0x27B4, r24
    6c68:	19 c0       	rjmp	.+50     	; 0x6c9c <__vector_104+0x9e>
		}
	} else if(recording && !debounceEnabled){		// stop recording
    6c6a:	80 91 61 27 	lds	r24, 0x2761
    6c6e:	88 23       	and	r24, r24
    6c70:	a9 f0       	breq	.+42     	; 0x6c9c <__vector_104+0x9e>
    6c72:	80 91 c9 27 	lds	r24, 0x27C9
    6c76:	88 23       	and	r24, r24
    6c78:	89 f4       	brne	.+34     	; 0x6c9c <__vector_104+0x9e>
		recording = false;
    6c7a:	10 92 61 27 	sts	0x2761, r1
		Sensors_ResetHumidityBuffers();
    6c7e:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <Sensors_ResetHumidityBuffers>
		Sensors_ResetTemperatureBuffers();
    6c82:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <Sensors_ResetTemperatureBuffers>
		Sensors_ResetRespirationBuffers();
    6c86:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <Sensors_ResetRespirationBuffers>
		Sensors_ResetEKGBuffers();
    6c8a:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <Sensors_ResetEKGBuffers>
		Sensors_ResetAccelBuffers();
    6c8e:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <Sensors_ResetAccelBuffers>
		okToCloseLogFile = true;
    6c92:	81 e0       	ldi	r24, 0x01	; 1
    6c94:	80 93 b6 27 	sts	0x27B6, r24
		debounceEnabled = true;	
    6c98:	80 93 c9 27 	sts	0x27C9, r24
	}
}
    6c9c:	ff 91       	pop	r31
    6c9e:	ef 91       	pop	r30
    6ca0:	bf 91       	pop	r27
    6ca2:	af 91       	pop	r26
    6ca4:	9f 91       	pop	r25
    6ca6:	8f 91       	pop	r24
    6ca8:	7f 91       	pop	r23
    6caa:	6f 91       	pop	r22
    6cac:	5f 91       	pop	r21
    6cae:	4f 91       	pop	r20
    6cb0:	3f 91       	pop	r19
    6cb2:	2f 91       	pop	r18
    6cb4:	0f 90       	pop	r0
    6cb6:	0b be       	out	0x3b, r0	; 59
    6cb8:	0f 90       	pop	r0
    6cba:	0f be       	out	0x3f, r0	; 63
    6cbc:	0f 90       	pop	r0
    6cbe:	1f 90       	pop	r1
    6cc0:	18 95       	reti

00006cc2 <Charger_Init>:
		   
void Charger_Init(void){
   Charger_Port.DIRCLR = 1 << Charger_Pin;
    6cc2:	e0 e6       	ldi	r30, 0x60	; 96
    6cc4:	f6 e0       	ldi	r31, 0x06	; 6
    6cc6:	88 e0       	ldi	r24, 0x08	; 8
    6cc8:	82 83       	std	Z+2, r24	; 0x02
   Charger_Port.Charger_Pin_CNTL = PORT_OPC_WIREDANDPULL_gc;
    6cca:	88 e3       	ldi	r24, 0x38	; 56
    6ccc:	83 8b       	std	Z+19, r24	; 0x13
}
    6cce:	08 95       	ret

00006cd0 <Charged>:

bool Charged(void){
   if((Button_Port.IN & (1<<Charger_Pin)) >0 ){
    6cd0:	e0 ea       	ldi	r30, 0xA0	; 160
    6cd2:	f6 e0       	ldi	r31, 0x06	; 6
    6cd4:	80 85       	ldd	r24, Z+8	; 0x08
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	e3 e0       	ldi	r30, 0x03	; 3
    6cda:	96 95       	lsr	r25
    6cdc:	87 95       	ror	r24
    6cde:	ea 95       	dec	r30
    6ce0:	e1 f7       	brne	.-8      	; 0x6cda <Charged+0xa>
	   return true;
   } else {
	   return false;
   }
}
    6ce2:	81 70       	andi	r24, 0x01	; 1
    6ce4:	08 95       	ret

00006ce6 <GUI_Init>:
	// div  = 1024
	// per  = 1440
	// => 10 samples per second
	
	// Set period/TOP value
	GUI_Timer.PER = 1440;
    6ce6:	e0 e0       	ldi	r30, 0x00	; 0
    6ce8:	f9 e0       	ldi	r31, 0x09	; 9
    6cea:	80 ea       	ldi	r24, 0xA0	; 160
    6cec:	95 e0       	ldi	r25, 0x05	; 5
    6cee:	86 a3       	std	Z+38, r24	; 0x26
    6cf0:	97 a3       	std	Z+39, r25	; 0x27
	
	// Select clock source
	GUI_Timer.CTRLA = (GUI_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    6cf2:	80 81       	ld	r24, Z
    6cf4:	80 7f       	andi	r24, 0xF0	; 240
    6cf6:	87 60       	ori	r24, 0x07	; 7
    6cf8:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	GUI_Timer.INTCTRLA = (GUI_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    6cfa:	86 81       	ldd	r24, Z+6	; 0x06
    6cfc:	8c 7f       	andi	r24, 0xFC	; 252
    6cfe:	81 60       	ori	r24, 0x01	; 1
    6d00:	86 83       	std	Z+6, r24	; 0x06
	
	
	
}
    6d02:	08 95       	ret

00006d04 <__vector_77>:

ISR(GUI_Timer_vect)                          // 10HZ
{
    6d04:	1f 92       	push	r1
    6d06:	0f 92       	push	r0
    6d08:	0f b6       	in	r0, 0x3f	; 63
    6d0a:	0f 92       	push	r0
    6d0c:	0b b6       	in	r0, 0x3b	; 59
    6d0e:	0f 92       	push	r0
    6d10:	11 24       	eor	r1, r1
    6d12:	2f 93       	push	r18
    6d14:	3f 93       	push	r19
    6d16:	4f 93       	push	r20
    6d18:	5f 93       	push	r21
    6d1a:	6f 93       	push	r22
    6d1c:	7f 93       	push	r23
    6d1e:	8f 93       	push	r24
    6d20:	9f 93       	push	r25
    6d22:	af 93       	push	r26
    6d24:	bf 93       	push	r27
    6d26:	cf 93       	push	r28
    6d28:	df 93       	push	r29
    6d2a:	ef 93       	push	r30
    6d2c:	ff 93       	push	r31
	
	
	if(recording){
    6d2e:	80 91 61 27 	lds	r24, 0x2761
    6d32:	88 23       	and	r24, r24
    6d34:	89 f1       	breq	.+98     	; 0x6d98 <__vector_77+0x94>
		lengthOfCurrentFile++;
    6d36:	80 91 b8 27 	lds	r24, 0x27B8
    6d3a:	90 91 b9 27 	lds	r25, 0x27B9
    6d3e:	01 96       	adiw	r24, 0x01	; 1
    6d40:	80 93 b8 27 	sts	0x27B8, r24
    6d44:	90 93 b9 27 	sts	0x27B9, r25
		if(lengthOfCurrentFile > maxFileLength){
    6d48:	80 91 b8 27 	lds	r24, 0x27B8
    6d4c:	90 91 b9 27 	lds	r25, 0x27B9
    6d50:	89 52       	subi	r24, 0x29	; 41
    6d52:	93 42       	sbci	r25, 0x23	; 35
    6d54:	08 f1       	brcs	.+66     	; 0x6d98 <__vector_77+0x94>
			restartingFile = true;
    6d56:	81 e0       	ldi	r24, 0x01	; 1
    6d58:	80 93 b7 27 	sts	0x27B7, r24
			recording = false;
    6d5c:	10 92 61 27 	sts	0x2761, r1
			okToCloseLogFile = true;
    6d60:	80 93 b6 27 	sts	0x27B6, r24
			while(okToCloseLogFile);
    6d64:	80 91 b6 27 	lds	r24, 0x27B6
    6d68:	88 23       	and	r24, r24
    6d6a:	e1 f7       	brne	.-8      	; 0x6d64 <__vector_77+0x60>
			if(percentDiskUsed < 950){
    6d6c:	80 91 c2 27 	lds	r24, 0x27C2
    6d70:	90 91 c3 27 	lds	r25, 0x27C3
    6d74:	a0 91 c4 27 	lds	r26, 0x27C4
    6d78:	b0 91 c5 27 	lds	r27, 0x27C5
    6d7c:	86 5b       	subi	r24, 0xB6	; 182
    6d7e:	93 40       	sbci	r25, 0x03	; 3
    6d80:	a0 40       	sbci	r26, 0x00	; 0
    6d82:	b0 40       	sbci	r27, 0x00	; 0
    6d84:	38 f4       	brcc	.+14     	; 0x6d94 <__vector_77+0x90>
				okToOpenLogFile = true;
    6d86:	81 e0       	ldi	r24, 0x01	; 1
    6d88:	80 93 b4 27 	sts	0x27B4, r24
				while(!recording);
    6d8c:	80 91 61 27 	lds	r24, 0x2761
    6d90:	88 23       	and	r24, r24
    6d92:	e1 f3       	breq	.-8      	; 0x6d8c <__vector_77+0x88>
			}
			restartingFile = false;
    6d94:	10 92 b7 27 	sts	0x27B7, r1
		}
	}
	
	if(timeIsValid && !okToSendRTCBlock){
    6d98:	80 91 b3 27 	lds	r24, 0x27B3
    6d9c:	88 23       	and	r24, r24
    6d9e:	91 f1       	breq	.+100    	; 0x6e04 <__vector_77+0x100>
    6da0:	80 91 71 27 	lds	r24, 0x2771
    6da4:	88 23       	and	r24, r24
    6da6:	71 f5       	brne	.+92     	; 0x6e04 <__vector_77+0x100>
		syncCounter++;
    6da8:	80 91 c6 27 	lds	r24, 0x27C6
    6dac:	90 91 c7 27 	lds	r25, 0x27C7
    6db0:	01 96       	adiw	r24, 0x01	; 1
    6db2:	80 93 c6 27 	sts	0x27C6, r24
    6db6:	90 93 c7 27 	sts	0x27C7, r25
		if(syncCounter > 6000){
    6dba:	80 91 c6 27 	lds	r24, 0x27C6
    6dbe:	90 91 c7 27 	lds	r25, 0x27C7
    6dc2:	81 57       	subi	r24, 0x71	; 113
    6dc4:	97 41       	sbci	r25, 0x17	; 23
    6dc6:	f0 f0       	brcs	.+60     	; 0x6e04 <__vector_77+0x100>
			syncCounter = 0;
    6dc8:	10 92 c6 27 	sts	0x27C6, r1
    6dcc:	10 92 c7 27 	sts	0x27C7, r1
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    6dd0:	80 91 21 04 	lds	r24, 0x0421
    6dd4:	80 61       	ori	r24, 0x10	; 16
    6dd6:	e0 e2       	ldi	r30, 0x20	; 32
    6dd8:	f4 e0       	ldi	r31, 0x04	; 4
    6dda:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    6ddc:	80 91 21 04 	lds	r24, 0x0421
    6de0:	84 fd       	sbrc	r24, 4
    6de2:	fc cf       	rjmp	.-8      	; 0x6ddc <__vector_77+0xd8>
	return RTC32.CNT;
    6de4:	80 91 24 04 	lds	r24, 0x0424
    6de8:	90 91 25 04 	lds	r25, 0x0425
    6dec:	a0 91 26 04 	lds	r26, 0x0426
    6df0:	b0 91 27 04 	lds	r27, 0x0427
			UNIX_Time = Time_Get();
    6df4:	80 93 81 27 	sts	0x2781, r24
    6df8:	90 93 82 27 	sts	0x2782, r25
    6dfc:	a0 93 83 27 	sts	0x2783, r26
    6e00:	b0 93 84 27 	sts	0x2784, r27
		}
	}
	
	if(debounceEnabled){
    6e04:	80 91 c9 27 	lds	r24, 0x27C9
    6e08:	88 23       	and	r24, r24
    6e0a:	69 f0       	breq	.+26     	; 0x6e26 <__vector_77+0x122>
		debounceTimer++;
    6e0c:	80 91 c8 27 	lds	r24, 0x27C8
    6e10:	8f 5f       	subi	r24, 0xFF	; 255
    6e12:	80 93 c8 27 	sts	0x27C8, r24
		if(debounceTimer > 10){
    6e16:	80 91 c8 27 	lds	r24, 0x27C8
    6e1a:	8b 30       	cpi	r24, 0x0B	; 11
    6e1c:	20 f0       	brcs	.+8      	; 0x6e26 <__vector_77+0x122>
			debounceTimer = 0;
    6e1e:	10 92 c8 27 	sts	0x27C8, r1
			debounceEnabled = false;
    6e22:	10 92 c9 27 	sts	0x27C9, r1
    6e26:	80 91 8b 27 	lds	r24, 0x278B
		}
	}
		
	
	if(!SD_Inserted() && recording){		// stop recording
    6e2a:	88 23       	and	r24, r24
    6e2c:	a9 f4       	brne	.+42     	; 0x6e58 <__vector_77+0x154>
    6e2e:	80 91 61 27 	lds	r24, 0x2761
    6e32:	88 23       	and	r24, r24
    6e34:	89 f0       	breq	.+34     	; 0x6e58 <__vector_77+0x154>
		recording = false;
    6e36:	10 92 61 27 	sts	0x2761, r1
		
		Sensors_ResetHumidityBuffers();
    6e3a:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <Sensors_ResetHumidityBuffers>
		Sensors_ResetTemperatureBuffers();
    6e3e:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <Sensors_ResetTemperatureBuffers>
		Sensors_ResetRespirationBuffers();
    6e42:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <Sensors_ResetRespirationBuffers>
		Sensors_ResetEKGBuffers();
    6e46:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <Sensors_ResetEKGBuffers>
		Sensors_ResetAccelBuffers();
    6e4a:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <Sensors_ResetAccelBuffers>
		okToCloseLogFile = true;
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	80 93 b6 27 	sts	0x27B6, r24
		debounceEnabled = true;		
    6e54:	80 93 c9 27 	sts	0x27C9, r24
    6e58:	80 91 8b 27 	lds	r24, 0x278B
	} 	
	
	
	if(!SD_Inserted()){
    6e5c:	88 23       	and	r24, r24
    6e5e:	11 f4       	brne	.+4      	; 0x6e64 <__vector_77+0x160>
	Leds_Port.DIRSET = (1<<led);
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    6e60:	81 e0       	ldi	r24, 0x01	; 1
    6e62:	05 c0       	rjmp	.+10     	; 0x6e6e <__vector_77+0x16a>
		Leds_State(Red,on);
	} else if(!timeIsValid){
    6e64:	80 91 b3 27 	lds	r24, 0x27B3
    6e68:	88 23       	and	r24, r24
    6e6a:	21 f4       	brne	.+8      	; 0x6e74 <__vector_77+0x170>
    6e6c:	82 e0       	ldi	r24, 0x02	; 2
    6e6e:	80 93 76 37 	sts	0x3776, r24
    6e72:	08 c0       	rjmp	.+16     	; 0x6e84 <__vector_77+0x180>
		Leds_State(Red,slow);
	} else if(!batteryVoltageOk){
    6e74:	80 91 0f 27 	lds	r24, 0x270F
    6e78:	88 23       	and	r24, r24
    6e7a:	11 f4       	brne	.+4      	; 0x6e80 <__vector_77+0x17c>
    6e7c:	83 e0       	ldi	r24, 0x03	; 3
    6e7e:	f7 cf       	rjmp	.-18     	; 0x6e6e <__vector_77+0x16a>
		Leds_State(Red,fast);
	} else {
		Leds_State(Red,off);
	}
	
	if(recording){
    6e80:	10 92 76 37 	sts	0x3776, r1
    6e84:	80 91 61 27 	lds	r24, 0x2761
    6e88:	88 23       	and	r24, r24
    6e8a:	11 f0       	breq	.+4      	; 0x6e90 <__vector_77+0x18c>
    6e8c:	81 e0       	ldi	r24, 0x01	; 1
    6e8e:	0d c0       	rjmp	.+26     	; 0x6eaa <__vector_77+0x1a6>
		Leds_State(Green,on);
	} else if(connected && !Charged()){
    6e90:	80 91 a6 27 	lds	r24, 0x27A6
    6e94:	88 23       	and	r24, r24
    6e96:	21 f0       	breq	.+8      	; 0x6ea0 <__vector_77+0x19c>
   Charger_Port.DIRCLR = 1 << Charger_Pin;
   Charger_Port.Charger_Pin_CNTL = PORT_OPC_WIREDANDPULL_gc;
}

bool Charged(void){
   if((Button_Port.IN & (1<<Charger_Pin)) >0 ){
    6e98:	80 91 a8 06 	lds	r24, 0x06A8
    6e9c:	83 ff       	sbrs	r24, 3
    6e9e:	47 c0       	rjmp	.+142    	; 0x6f2e <__vector_77+0x22a>
    6ea0:	80 91 a8 06 	lds	r24, 0x06A8
    6ea4:	83 ff       	sbrs	r24, 3
    6ea6:	45 c0       	rjmp	.+138    	; 0x6f32 <__vector_77+0x22e>
    6ea8:	83 e0       	ldi	r24, 0x03	; 3
    6eaa:	80 93 77 37 	sts	0x3777, r24
    6eae:	20 e0       	ldi	r18, 0x00	; 0
    6eb0:	30 e0       	ldi	r19, 0x00	; 0
	Leds_Port.OUTSET = (1<<led);
}


void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1<<led);
    6eb2:	41 e0       	ldi	r20, 0x01	; 1
    6eb4:	50 e0       	ldi	r21, 0x00	; 0
    6eb6:	c0 ea       	ldi	r28, 0xA0	; 160
    6eb8:	d6 e0       	ldi	r29, 0x06	; 6
	}
	
	
	
	for(uint8_t i = 0; i < numberOfLeds; i++){
		ledCounter[i]++;
    6eba:	d9 01       	movw	r26, r18
    6ebc:	a9 5b       	subi	r26, 0xB9	; 185
    6ebe:	b9 4b       	sbci	r27, 0xB9	; 185
    6ec0:	8c 91       	ld	r24, X
    6ec2:	8f 5f       	subi	r24, 0xFF	; 255
    6ec4:	8c 93       	st	X, r24
		if (ledState[i] == on) {
    6ec6:	f9 01       	movw	r30, r18
    6ec8:	ea 58       	subi	r30, 0x8A	; 138
    6eca:	f8 4c       	sbci	r31, 0xC8	; 200
    6ecc:	80 81       	ld	r24, Z
    6ece:	81 30       	cpi	r24, 0x01	; 1
    6ed0:	49 f4       	brne	.+18     	; 0x6ee4 <__vector_77+0x1e0>
void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1<<led);
    6ed2:	ca 01       	movw	r24, r20
    6ed4:	02 2e       	mov	r0, r18
    6ed6:	02 c0       	rjmp	.+4      	; 0x6edc <__vector_77+0x1d8>
    6ed8:	88 0f       	add	r24, r24
    6eda:	99 1f       	adc	r25, r25
    6edc:	0a 94       	dec	r0
    6ede:	e2 f7       	brpl	.-8      	; 0x6ed8 <__vector_77+0x1d4>
    6ee0:	8d 83       	std	Y+5, r24	; 0x05
    6ee2:	1f c0       	rjmp	.+62     	; 0x6f22 <__vector_77+0x21e>
			Leds_Set(i);
		} else if (ledState[i] == slow) {
    6ee4:	80 81       	ld	r24, Z
    6ee6:	82 30       	cpi	r24, 0x02	; 2
    6ee8:	21 f4       	brne	.+8      	; 0x6ef2 <__vector_77+0x1ee>
			if(ledCounter[i] > 10){
    6eea:	8c 91       	ld	r24, X
    6eec:	8b 30       	cpi	r24, 0x0B	; 11
    6eee:	c8 f0       	brcs	.+50     	; 0x6f22 <__vector_77+0x21e>
    6ef0:	06 c0       	rjmp	.+12     	; 0x6efe <__vector_77+0x1fa>
				Leds_Toggle(i);
				ledCounter[i] = 0;
			}
		} else if (ledState[i] == fast) {
    6ef2:	80 81       	ld	r24, Z
    6ef4:	83 30       	cpi	r24, 0x03	; 3
    6ef6:	69 f4       	brne	.+26     	; 0x6f12 <__vector_77+0x20e>
			if(ledCounter[i] > 2){
    6ef8:	8c 91       	ld	r24, X
    6efa:	83 30       	cpi	r24, 0x03	; 3
    6efc:	90 f0       	brcs	.+36     	; 0x6f22 <__vector_77+0x21e>
	Leds_Port.OUTCLR = (1<<led);
}


void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1<<led);	
    6efe:	ca 01       	movw	r24, r20
    6f00:	02 2e       	mov	r0, r18
    6f02:	02 c0       	rjmp	.+4      	; 0x6f08 <__vector_77+0x204>
    6f04:	88 0f       	add	r24, r24
    6f06:	99 1f       	adc	r25, r25
    6f08:	0a 94       	dec	r0
    6f0a:	e2 f7       	brpl	.-8      	; 0x6f04 <__vector_77+0x200>
    6f0c:	8f 83       	std	Y+7, r24	; 0x07
				Leds_Toggle(i);
				ledCounter[i] = 0;
    6f0e:	1c 92       	st	X, r1
    6f10:	08 c0       	rjmp	.+16     	; 0x6f22 <__vector_77+0x21e>
	Leds_Port.OUTSET = (1<<led);
}


void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1<<led);
    6f12:	ca 01       	movw	r24, r20
    6f14:	02 2e       	mov	r0, r18
    6f16:	02 c0       	rjmp	.+4      	; 0x6f1c <__vector_77+0x218>
    6f18:	88 0f       	add	r24, r24
    6f1a:	99 1f       	adc	r25, r25
    6f1c:	0a 94       	dec	r0
    6f1e:	e2 f7       	brpl	.-8      	; 0x6f18 <__vector_77+0x214>
    6f20:	8e 83       	std	Y+6, r24	; 0x06
    6f22:	2f 5f       	subi	r18, 0xFF	; 255
    6f24:	3f 4f       	sbci	r19, 0xFF	; 255
		Leds_State(Green,off);
	}
	
	
	
	for(uint8_t i = 0; i < numberOfLeds; i++){
    6f26:	22 30       	cpi	r18, 0x02	; 2
    6f28:	31 05       	cpc	r19, r1
    6f2a:	39 f6       	brne	.-114    	; 0x6eba <__vector_77+0x1b6>
    6f2c:	05 c0       	rjmp	.+10     	; 0x6f38 <__vector_77+0x234>
	Leds_Port.DIRSET = (1<<led);
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    6f2e:	82 e0       	ldi	r24, 0x02	; 2
    6f30:	bc cf       	rjmp	.-136    	; 0x6eaa <__vector_77+0x1a6>
		Leds_State(Red,off);
	}
	
	if(recording){
		Leds_State(Green,on);
	} else if(connected && !Charged()){
    6f32:	10 92 77 37 	sts	0x3777, r1
    6f36:	bb cf       	rjmp	.-138    	; 0x6eae <__vector_77+0x1aa>
			}
		} else {
			Leds_Clear(i);
		}	
	}
}
    6f38:	ff 91       	pop	r31
    6f3a:	ef 91       	pop	r30
    6f3c:	df 91       	pop	r29
    6f3e:	cf 91       	pop	r28
    6f40:	bf 91       	pop	r27
    6f42:	af 91       	pop	r26
    6f44:	9f 91       	pop	r25
    6f46:	8f 91       	pop	r24
    6f48:	7f 91       	pop	r23
    6f4a:	6f 91       	pop	r22
    6f4c:	5f 91       	pop	r21
    6f4e:	4f 91       	pop	r20
    6f50:	3f 91       	pop	r19
    6f52:	2f 91       	pop	r18
    6f54:	0f 90       	pop	r0
    6f56:	0b be       	out	0x3b, r0	; 59
    6f58:	0f 90       	pop	r0
    6f5a:	0f be       	out	0x3f, r0	; 63
    6f5c:	0f 90       	pop	r0
    6f5e:	1f 90       	pop	r1
    6f60:	18 95       	reti

00006f62 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second
	
	// Set period/TOP value
	SD_Writer_Timer.PER = 2304;
    6f62:	e0 e4       	ldi	r30, 0x40	; 64
    6f64:	fa e0       	ldi	r31, 0x0A	; 10
    6f66:	80 e0       	ldi	r24, 0x00	; 0
    6f68:	99 e0       	ldi	r25, 0x09	; 9
    6f6a:	86 a3       	std	Z+38, r24	; 0x26
    6f6c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Select clock source
	SD_Writer_Timer.CTRLA = (SD_Writer_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    6f6e:	80 81       	ld	r24, Z
    6f70:	80 7f       	andi	r24, 0xF0	; 240
    6f72:	85 60       	ori	r24, 0x05	; 5
    6f74:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    6f76:	86 81       	ldd	r24, Z+6	; 0x06
    6f78:	8c 7f       	andi	r24, 0xFC	; 252
    6f7a:	82 60       	ori	r24, 0x02	; 2
    6f7c:	86 83       	std	Z+6, r24	; 0x06
	
}
    6f7e:	08 95       	ret

00006f80 <SD_WriteRTCBlock>:
	f_sync(&Log_File);
	
	return resp;
}

void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    6f80:	af 92       	push	r10
    6f82:	bf 92       	push	r11
    6f84:	cf 92       	push	r12
    6f86:	df 92       	push	r13
    6f88:	ef 92       	push	r14
    6f8a:	ff 92       	push	r15
    6f8c:	0f 93       	push	r16
    6f8e:	1f 93       	push	r17
    6f90:	7b 01       	movw	r14, r22
    6f92:	8c 01       	movw	r16, r24
    6f94:	59 01       	movw	r10, r18
    6f96:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    6f98:	8f ef       	ldi	r24, 0xFF	; 255
    6f9a:	9f ef       	ldi	r25, 0xFF	; 255
    6f9c:	af ef       	ldi	r26, 0xFF	; 255
    6f9e:	bf ef       	ldi	r27, 0xFF	; 255
    6fa0:	80 93 0a 58 	sts	0x580A, r24
    6fa4:	90 93 0b 58 	sts	0x580B, r25
    6fa8:	a0 93 0c 58 	sts	0x580C, r26
    6fac:	b0 93 0d 58 	sts	0x580D, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);					// magic number 
    6fb0:	6c e4       	ldi	r22, 0x4C	; 76
    6fb2:	74 e7       	ldi	r23, 0x74	; 116
    6fb4:	8e ed       	ldi	r24, 0xDE	; 222
    6fb6:	90 eb       	ldi	r25, 0xB0	; 176
    6fb8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(27);								// record size  
    6fbc:	6b e1       	ldi	r22, 0x1B	; 27
    6fbe:	70 e0       	ldi	r23, 0x00	; 0
    6fc0:	80 e0       	ldi	r24, 0x00	; 0
    6fc2:	90 e0       	ldi	r25, 0x00	; 0
    6fc4:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(2);								// record type  
    6fc8:	82 e0       	ldi	r24, 0x02	; 2
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	// ***** payload *****
	SD_Write32(ticker);							// 32-bit counter
    6fd0:	c8 01       	movw	r24, r16
    6fd2:	b7 01       	movw	r22, r14
    6fd4:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(time);							// UNIX time  (40bit)
    6fd8:	c6 01       	movw	r24, r12
    6fda:	b5 01       	movw	r22, r10
    6fdc:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write8(0);
    6fe0:	80 e0       	ldi	r24, 0x00	; 0
    6fe2:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write32(0);								// unix time nanoseconds
    6fe6:	60 e0       	ldi	r22, 0x00	; 0
    6fe8:	70 e0       	ldi	r23, 0x00	; 0
    6fea:	80 e0       	ldi	r24, 0x00	; 0
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_WriteCRC();								// CRC			
    6ff2:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	f_sync(&Log_File);
    6ff6:	89 ec       	ldi	r24, 0xC9	; 201
    6ff8:	9b e4       	ldi	r25, 0x4B	; 75
    6ffa:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
	
}
    6ffe:	1f 91       	pop	r17
    7000:	0f 91       	pop	r16
    7002:	ff 90       	pop	r15
    7004:	ef 90       	pop	r14
    7006:	df 90       	pop	r13
    7008:	cf 90       	pop	r12
    700a:	bf 90       	pop	r11
    700c:	af 90       	pop	r10
    700e:	08 95       	ret

00007010 <getDeviceID>:
	
	SD_WriteCRC();			
	f_sync(&Log_File);
}

void getDeviceID(void){
    7010:	bf 92       	push	r11
    7012:	cf 92       	push	r12
    7014:	df 92       	push	r13
    7016:	ef 92       	push	r14
    7018:	ff 92       	push	r15
    701a:	0f 93       	push	r16
    701c:	1f 93       	push	r17
    701e:	df 93       	push	r29
    7020:	cf 93       	push	r28
    7022:	cd b7       	in	r28, 0x3d	; 61
    7024:	de b7       	in	r29, 0x3e	; 62
    7026:	25 97       	sbiw	r28, 0x05	; 5
    7028:	cd bf       	out	0x3d, r28	; 61
    702a:	de bf       	out	0x3e, r29	; 62
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    702c:	0a ec       	ldi	r16, 0xCA	; 202
    702e:	11 e0       	ldi	r17, 0x01	; 1
    7030:	a2 e0       	ldi	r26, 0x02	; 2
    7032:	ba 2e       	mov	r11, r26
    7034:	d8 01       	movw	r26, r16
    7036:	bc 92       	st	X, r11
 	result = pgm_read_byte(index);
    7038:	e8 e0       	ldi	r30, 0x08	; 8
    703a:	f0 e0       	ldi	r31, 0x00	; 0
    703c:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    703e:	1c 92       	st	X, r1
	
	char tmp [5];
	
	strcpy(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM0_offset),tmp,16));
    7040:	8e 2f       	mov	r24, r30
    7042:	90 e0       	ldi	r25, 0x00	; 0
    7044:	6e 01       	movw	r12, r28
    7046:	08 94       	sec
    7048:	c1 1c       	adc	r12, r1
    704a:	d1 1c       	adc	r13, r1
    704c:	b6 01       	movw	r22, r12
    704e:	40 e1       	ldi	r20, 0x10	; 16
    7050:	50 e0       	ldi	r21, 0x00	; 0
    7052:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    7056:	bc 01       	movw	r22, r24
    7058:	f4 eb       	ldi	r31, 0xB4	; 180
    705a:	ef 2e       	mov	r14, r31
    705c:	f7 e3       	ldi	r31, 0x37	; 55
    705e:	ff 2e       	mov	r15, r31
    7060:	c7 01       	movw	r24, r14
    7062:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7066:	f8 01       	movw	r30, r16
    7068:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    706a:	e9 e0       	ldi	r30, 0x09	; 9
    706c:	f0 e0       	ldi	r31, 0x00	; 0
    706e:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7070:	d8 01       	movw	r26, r16
    7072:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM1_offset),tmp,16));
    7074:	8e 2f       	mov	r24, r30
    7076:	90 e0       	ldi	r25, 0x00	; 0
    7078:	b6 01       	movw	r22, r12
    707a:	40 e1       	ldi	r20, 0x10	; 16
    707c:	50 e0       	ldi	r21, 0x00	; 0
    707e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    7082:	bc 01       	movw	r22, r24
    7084:	c7 01       	movw	r24, r14
    7086:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    708a:	f8 01       	movw	r30, r16
    708c:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    708e:	ea e0       	ldi	r30, 0x0A	; 10
    7090:	f0 e0       	ldi	r31, 0x00	; 0
    7092:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7094:	d8 01       	movw	r26, r16
    7096:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM2_offset),tmp,16));
    7098:	8e 2f       	mov	r24, r30
    709a:	90 e0       	ldi	r25, 0x00	; 0
    709c:	b6 01       	movw	r22, r12
    709e:	40 e1       	ldi	r20, 0x10	; 16
    70a0:	50 e0       	ldi	r21, 0x00	; 0
    70a2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    70a6:	bc 01       	movw	r22, r24
    70a8:	c7 01       	movw	r24, r14
    70aa:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    70ae:	f8 01       	movw	r30, r16
    70b0:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    70b2:	eb e0       	ldi	r30, 0x0B	; 11
    70b4:	f0 e0       	ldi	r31, 0x00	; 0
    70b6:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    70b8:	d8 01       	movw	r26, r16
    70ba:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM3_offset),tmp,16));
    70bc:	8e 2f       	mov	r24, r30
    70be:	90 e0       	ldi	r25, 0x00	; 0
    70c0:	b6 01       	movw	r22, r12
    70c2:	40 e1       	ldi	r20, 0x10	; 16
    70c4:	50 e0       	ldi	r21, 0x00	; 0
    70c6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    70ca:	bc 01       	movw	r22, r24
    70cc:	c7 01       	movw	r24, r14
    70ce:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    70d2:	f8 01       	movw	r30, r16
    70d4:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    70d6:	ec e0       	ldi	r30, 0x0C	; 12
    70d8:	f0 e0       	ldi	r31, 0x00	; 0
    70da:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    70dc:	d8 01       	movw	r26, r16
    70de:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM4_offset),tmp,16));
    70e0:	8e 2f       	mov	r24, r30
    70e2:	90 e0       	ldi	r25, 0x00	; 0
    70e4:	b6 01       	movw	r22, r12
    70e6:	40 e1       	ldi	r20, 0x10	; 16
    70e8:	50 e0       	ldi	r21, 0x00	; 0
    70ea:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    70ee:	bc 01       	movw	r22, r24
    70f0:	c7 01       	movw	r24, r14
    70f2:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    70f6:	f8 01       	movw	r30, r16
    70f8:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    70fa:	ed e0       	ldi	r30, 0x0D	; 13
    70fc:	f0 e0       	ldi	r31, 0x00	; 0
    70fe:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7100:	d8 01       	movw	r26, r16
    7102:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM5_offset),tmp,16));
    7104:	8e 2f       	mov	r24, r30
    7106:	90 e0       	ldi	r25, 0x00	; 0
    7108:	b6 01       	movw	r22, r12
    710a:	40 e1       	ldi	r20, 0x10	; 16
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    7112:	bc 01       	movw	r22, r24
    7114:	c7 01       	movw	r24, r14
    7116:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    711a:	f8 01       	movw	r30, r16
    711c:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    711e:	e0 e1       	ldi	r30, 0x10	; 16
    7120:	f0 e0       	ldi	r31, 0x00	; 0
    7122:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7124:	d8 01       	movw	r26, r16
    7126:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+WAFNUM_offset) ,tmp,16));
    7128:	8e 2f       	mov	r24, r30
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	b6 01       	movw	r22, r12
    712e:	40 e1       	ldi	r20, 0x10	; 16
    7130:	50 e0       	ldi	r21, 0x00	; 0
    7132:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    7136:	bc 01       	movw	r22, r24
    7138:	c7 01       	movw	r24, r14
    713a:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    713e:	f8 01       	movw	r30, r16
    7140:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7142:	e2 e1       	ldi	r30, 0x12	; 18
    7144:	f0 e0       	ldi	r31, 0x00	; 0
    7146:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7148:	d8 01       	movw	r26, r16
    714a:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDX0_offset),tmp,16));
    714c:	8e 2f       	mov	r24, r30
    714e:	90 e0       	ldi	r25, 0x00	; 0
    7150:	b6 01       	movw	r22, r12
    7152:	40 e1       	ldi	r20, 0x10	; 16
    7154:	50 e0       	ldi	r21, 0x00	; 0
    7156:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    715a:	bc 01       	movw	r22, r24
    715c:	c7 01       	movw	r24, r14
    715e:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7162:	f8 01       	movw	r30, r16
    7164:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7166:	e3 e1       	ldi	r30, 0x13	; 19
    7168:	f0 e0       	ldi	r31, 0x00	; 0
    716a:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    716c:	d8 01       	movw	r26, r16
    716e:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDX1_offset),tmp,16));
    7170:	8e 2f       	mov	r24, r30
    7172:	90 e0       	ldi	r25, 0x00	; 0
    7174:	b6 01       	movw	r22, r12
    7176:	40 e1       	ldi	r20, 0x10	; 16
    7178:	50 e0       	ldi	r21, 0x00	; 0
    717a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    717e:	bc 01       	movw	r22, r24
    7180:	c7 01       	movw	r24, r14
    7182:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7186:	f8 01       	movw	r30, r16
    7188:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    718a:	e4 e1       	ldi	r30, 0x14	; 20
    718c:	f0 e0       	ldi	r31, 0x00	; 0
    718e:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7190:	d8 01       	movw	r26, r16
    7192:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDY0_offset),tmp,16));
    7194:	8e 2f       	mov	r24, r30
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	b6 01       	movw	r22, r12
    719a:	40 e1       	ldi	r20, 0x10	; 16
    719c:	50 e0       	ldi	r21, 0x00	; 0
    719e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    71a2:	bc 01       	movw	r22, r24
    71a4:	c7 01       	movw	r24, r14
    71a6:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;
	
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    71aa:	f8 01       	movw	r30, r16
    71ac:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    71ae:	e5 e1       	ldi	r30, 0x15	; 21
    71b0:	f0 e0       	ldi	r31, 0x00	; 0
    71b2:	e4 91       	lpm	r30, Z+
	
	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    71b4:	d8 01       	movw	r26, r16
    71b6:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDY1_offset),tmp,16));
    71b8:	8e 2f       	mov	r24, r30
    71ba:	90 e0       	ldi	r25, 0x00	; 0
    71bc:	b6 01       	movw	r22, r12
    71be:	40 e1       	ldi	r20, 0x10	; 16
    71c0:	50 e0       	ldi	r21, 0x00	; 0
    71c2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <itoa>
    71c6:	bc 01       	movw	r22, r24
    71c8:	c7 01       	movw	r24, r14
    71ca:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
}
    71ce:	25 96       	adiw	r28, 0x05	; 5
    71d0:	cd bf       	out	0x3d, r28	; 61
    71d2:	de bf       	out	0x3e, r29	; 62
    71d4:	cf 91       	pop	r28
    71d6:	df 91       	pop	r29
    71d8:	1f 91       	pop	r17
    71da:	0f 91       	pop	r16
    71dc:	ff 90       	pop	r15
    71de:	ef 90       	pop	r14
    71e0:	df 90       	pop	r13
    71e2:	cf 90       	pop	r12
    71e4:	bf 90       	pop	r11
    71e6:	08 95       	ret

000071e8 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    71e8:	ef 92       	push	r14
    71ea:	ff 92       	push	r15
    71ec:	0f 93       	push	r16
    71ee:	1f 93       	push	r17
    71f0:	cf 93       	push	r28
    71f2:	df 93       	push	r29
    71f4:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    71f6:	69 ec       	ldi	r22, 0xC9	; 201
    71f8:	7b e4       	ldi	r23, 0x4B	; 75
    71fa:	0e 94 08 2c 	call	0x5810	; 0x5810 <f_puts>
    71fe:	60 e0       	ldi	r22, 0x00	; 0
    7200:	70 e0       	ldi	r23, 0x00	; 0
    7202:	3b c0       	rjmp	.+118    	; 0x727a <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7204:	e0 90 0a 58 	lds	r14, 0x580A
    7208:	f0 90 0b 58 	lds	r15, 0x580B
    720c:	00 91 0c 58 	lds	r16, 0x580C
    7210:	10 91 0d 58 	lds	r17, 0x580D
    7214:	20 91 0a 58 	lds	r18, 0x580A
    7218:	30 91 0b 58 	lds	r19, 0x580B
    721c:	40 91 0c 58 	lds	r20, 0x580C
    7220:	50 91 0d 58 	lds	r21, 0x580D
    7224:	30 70       	andi	r19, 0x00	; 0
    7226:	40 70       	andi	r20, 0x00	; 0
    7228:	50 70       	andi	r21, 0x00	; 0
    722a:	fe 01       	movw	r30, r28
    722c:	e6 0f       	add	r30, r22
    722e:	f7 1f       	adc	r31, r23
    7230:	80 81       	ld	r24, Z
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	a0 e0       	ldi	r26, 0x00	; 0
    7236:	b0 e0       	ldi	r27, 0x00	; 0
    7238:	28 27       	eor	r18, r24
    723a:	39 27       	eor	r19, r25
    723c:	4a 27       	eor	r20, r26
    723e:	5b 27       	eor	r21, r27
    7240:	22 0f       	add	r18, r18
    7242:	33 1f       	adc	r19, r19
    7244:	22 0f       	add	r18, r18
    7246:	33 1f       	adc	r19, r19
    7248:	22 5f       	subi	r18, 0xF2	; 242
    724a:	3c 4d       	sbci	r19, 0xDC	; 220
    724c:	ef 2c       	mov	r14, r15
    724e:	f0 2e       	mov	r15, r16
    7250:	01 2f       	mov	r16, r17
    7252:	11 27       	eor	r17, r17
    7254:	f9 01       	movw	r30, r18
    7256:	80 81       	ld	r24, Z
    7258:	91 81       	ldd	r25, Z+1	; 0x01
    725a:	a2 81       	ldd	r26, Z+2	; 0x02
    725c:	b3 81       	ldd	r27, Z+3	; 0x03
    725e:	e8 26       	eor	r14, r24
    7260:	f9 26       	eor	r15, r25
    7262:	0a 27       	eor	r16, r26
    7264:	1b 27       	eor	r17, r27
    7266:	e0 92 0a 58 	sts	0x580A, r14
    726a:	f0 92 0b 58 	sts	0x580B, r15
    726e:	00 93 0c 58 	sts	0x580C, r16
    7272:	10 93 0d 58 	sts	0x580D, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    7276:	6f 5f       	subi	r22, 0xFF	; 255
    7278:	7f 4f       	sbci	r23, 0xFF	; 255
    727a:	fe 01       	movw	r30, r28
    727c:	01 90       	ld	r0, Z+
    727e:	00 20       	and	r0, r0
    7280:	e9 f7       	brne	.-6      	; 0x727c <SD_WriteString+0x94>
    7282:	31 97       	sbiw	r30, 0x01	; 1
    7284:	ec 1b       	sub	r30, r28
    7286:	fd 0b       	sbc	r31, r29
    7288:	6e 17       	cp	r22, r30
    728a:	7f 07       	cpc	r23, r31
    728c:	08 f4       	brcc	.+2      	; 0x7290 <SD_WriteString+0xa8>
    728e:	ba cf       	rjmp	.-140    	; 0x7204 <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    7290:	df 91       	pop	r29
    7292:	cf 91       	pop	r28
    7294:	1f 91       	pop	r17
    7296:	0f 91       	pop	r16
    7298:	ff 90       	pop	r15
    729a:	ef 90       	pop	r14
    729c:	08 95       	ret

0000729e <SD_WriteAccelBuffer>:
	
	SD_WriteCRC();			// CRC
	f_sync(&Log_File);
}

void SD_WriteAccelBuffer(uint8_t bufferNumber){
    729e:	ef 92       	push	r14
    72a0:	ff 92       	push	r15
    72a2:	0f 93       	push	r16
    72a4:	1f 93       	push	r17
    72a6:	cf 93       	push	r28
    72a8:	df 93       	push	r29
    72aa:	08 2f       	mov	r16, r24
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    72ac:	8f ef       	ldi	r24, 0xFF	; 255
    72ae:	9f ef       	ldi	r25, 0xFF	; 255
    72b0:	af ef       	ldi	r26, 0xFF	; 255
    72b2:	bf ef       	ldi	r27, 0xFF	; 255
    72b4:	80 93 0a 58 	sts	0x580A, r24
    72b8:	90 93 0b 58 	sts	0x580B, r25
    72bc:	a0 93 0c 58 	sts	0x580C, r26
    72c0:	b0 93 0d 58 	sts	0x580D, r27
	length = accelNumberOfSamples*accelNumberOfChannels;
	length *= 2;
	length += 60;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);								// magic number
    72c4:	6c e4       	ldi	r22, 0x4C	; 76
    72c6:	74 e7       	ldi	r23, 0x74	; 116
    72c8:	8e ed       	ldi	r24, 0xDE	; 222
    72ca:	90 eb       	ldi	r25, 0xB0	; 176
    72cc:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(length);										// record size
    72d0:	64 e4       	ldi	r22, 0x44	; 68
    72d2:	77 e0       	ldi	r23, 0x07	; 7
    72d4:	80 e0       	ldi	r24, 0x00	; 0
    72d6:	90 e0       	ldi	r25, 0x00	; 0
    72d8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(3);											// record type
    72dc:	83 e0       	ldi	r24, 0x03	; 3
    72de:	90 e0       	ldi	r25, 0x00	; 0
    72e0:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
								// ***** payload *****
										  
	SD_Write32(accelSampleStartTime[bufferNumber]);			// time
    72e4:	10 e0       	ldi	r17, 0x00	; 0
    72e6:	f8 01       	movw	r30, r16
    72e8:	ee 0f       	add	r30, r30
    72ea:	ff 1f       	adc	r31, r31
    72ec:	ee 0f       	add	r30, r30
    72ee:	ff 1f       	adc	r31, r31
    72f0:	e4 54       	subi	r30, 0x44	; 68
    72f2:	fd 4c       	sbci	r31, 0xCD	; 205
    72f4:	60 81       	ld	r22, Z
    72f6:	71 81       	ldd	r23, Z+1	; 0x01
    72f8:	82 81       	ldd	r24, Z+2	; 0x02
    72fa:	93 81       	ldd	r25, Z+3	; 0x03
    72fc:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(accelTicksPerSample);						// sample period 
    7300:	60 e8       	ldi	r22, 0x80	; 128
    7302:	76 e1       	ldi	r23, 0x16	; 22
    7304:	80 e0       	ldi	r24, 0x00	; 0
    7306:	90 e0       	ldi	r25, 0x00	; 0
    7308:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(accelNumberOfSamples);						// number of samples
    730c:	6c e2       	ldi	r22, 0x2C	; 44
    730e:	71 e0       	ldi	r23, 0x01	; 1
    7310:	80 e0       	ldi	r24, 0x00	; 0
    7312:	90 e0       	ldi	r25, 0x00	; 0
    7314:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	
	SD_WriteString("Accel_X");
    7318:	86 e3       	ldi	r24, 0x36	; 54
    731a:	90 e2       	ldi	r25, 0x20	; 32
    731c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7320:	89 e0       	ldi	r24, 0x09	; 9
    7322:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    7326:	8e e3       	ldi	r24, 0x3E	; 62
    7328:	90 e2       	ldi	r25, 0x20	; 32
    732a:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    732e:	8a e0       	ldi	r24, 0x0A	; 10
    7330:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("Accel_Y");
    7334:	81 e4       	ldi	r24, 0x41	; 65
    7336:	90 e2       	ldi	r25, 0x20	; 32
    7338:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    733c:	89 e0       	ldi	r24, 0x09	; 9
    733e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    7342:	8e e3       	ldi	r24, 0x3E	; 62
    7344:	90 e2       	ldi	r25, 0x20	; 32
    7346:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    734a:	8a e0       	ldi	r24, 0x0A	; 10
    734c:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("Accel_Z");
    7350:	89 e4       	ldi	r24, 0x49	; 73
    7352:	90 e2       	ldi	r25, 0x20	; 32
    7354:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7358:	89 e0       	ldi	r24, 0x09	; 9
    735a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    735e:	8e e3       	ldi	r24, 0x3E	; 62
    7360:	90 e2       	ldi	r25, 0x20	; 32
    7362:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7366:	8a e0       	ldi	r24, 0x0A	; 10
    7368:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write8(0x00);
    736c:	80 e0       	ldi	r24, 0x00	; 0
    736e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
    7372:	88 e0       	ldi	r24, 0x08	; 8
    7374:	97 e0       	ldi	r25, 0x07	; 7
    7376:	08 9f       	mul	r16, r24
    7378:	70 01       	movw	r14, r0
    737a:	09 9f       	mul	r16, r25
    737c:	f0 0c       	add	r15, r0
    737e:	18 9f       	mul	r17, r24
    7380:	f0 0c       	add	r15, r0
    7382:	11 24       	eor	r1, r1
    7384:	86 e3       	ldi	r24, 0x36	; 54
    7386:	98 e3       	ldi	r25, 0x38	; 56
    7388:	e8 0e       	add	r14, r24
    738a:	f9 1e       	adc	r15, r25
    738c:	c0 e0       	ldi	r28, 0x00	; 0
    738e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
		SD_Write16(accelBuffer[bufferNumber][i]);
    7390:	f7 01       	movw	r30, r14
    7392:	81 91       	ld	r24, Z+
    7394:	91 91       	ld	r25, Z+
    7396:	7f 01       	movw	r14, r30
    7398:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	SD_Write8(0x09);
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	for(uint16_t i = 0; i < accelNumberOfSamples*accelNumberOfChannels; i++){
    739c:	21 96       	adiw	r28, 0x01	; 1
    739e:	f3 e0       	ldi	r31, 0x03	; 3
    73a0:	c4 38       	cpi	r28, 0x84	; 132
    73a2:	df 07       	cpc	r29, r31
    73a4:	a9 f7       	brne	.-22     	; 0x7390 <SD_WriteAccelBuffer+0xf2>
		SD_Write16(accelBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();			
    73a6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	f_sync(&Log_File);
    73aa:	89 ec       	ldi	r24, 0xC9	; 201
    73ac:	9b e4       	ldi	r25, 0x4B	; 75
    73ae:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
}
    73b2:	df 91       	pop	r29
    73b4:	cf 91       	pop	r28
    73b6:	1f 91       	pop	r17
    73b8:	0f 91       	pop	r16
    73ba:	ff 90       	pop	r15
    73bc:	ef 90       	pop	r14
    73be:	08 95       	ret

000073c0 <SD_WriteEKGBuffer>:
	f_sync(&Log_File);
}



void SD_WriteEKGBuffer(uint8_t bufferNumber){
    73c0:	ef 92       	push	r14
    73c2:	ff 92       	push	r15
    73c4:	0f 93       	push	r16
    73c6:	1f 93       	push	r17
    73c8:	cf 93       	push	r28
    73ca:	df 93       	push	r29
    73cc:	08 2f       	mov	r16, r24
    73ce:	8f ef       	ldi	r24, 0xFF	; 255
    73d0:	9f ef       	ldi	r25, 0xFF	; 255
    73d2:	af ef       	ldi	r26, 0xFF	; 255
    73d4:	bf ef       	ldi	r27, 0xFF	; 255
    73d6:	80 93 0a 58 	sts	0x580A, r24
    73da:	90 93 0b 58 	sts	0x580B, r25
    73de:	a0 93 0c 58 	sts	0x580C, r26
    73e2:	b0 93 0d 58 	sts	0x580D, r27
	uint16_t length;
	length = EKGNumberOfSamples*2;
	length += 34;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);								// magic number
    73e6:	6c e4       	ldi	r22, 0x4C	; 76
    73e8:	74 e7       	ldi	r23, 0x74	; 116
    73ea:	8e ed       	ldi	r24, 0xDE	; 222
    73ec:	90 eb       	ldi	r25, 0xB0	; 176
    73ee:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(length);										// record size
    73f2:	6a e7       	ldi	r22, 0x7A	; 122
    73f4:	72 e0       	ldi	r23, 0x02	; 2
    73f6:	80 e0       	ldi	r24, 0x00	; 0
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(3);											// record type
    73fe:	83 e0       	ldi	r24, 0x03	; 3
    7400:	90 e0       	ldi	r25, 0x00	; 0
    7402:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
							// ***** payload *****
	
	SD_Write32(EKGSampleStartTime[bufferNumber]);			// time
    7406:	10 e0       	ldi	r17, 0x00	; 0
    7408:	f8 01       	movw	r30, r16
    740a:	ee 0f       	add	r30, r30
    740c:	ff 1f       	adc	r31, r31
    740e:	ee 0f       	add	r30, r30
    7410:	ff 1f       	adc	r31, r31
    7412:	e7 5b       	subi	r30, 0xB7	; 183
    7414:	f9 4b       	sbci	r31, 0xB9	; 185
    7416:	60 81       	ld	r22, Z
    7418:	71 81       	ldd	r23, Z+1	; 0x01
    741a:	82 81       	ldd	r24, Z+2	; 0x02
    741c:	93 81       	ldd	r25, Z+3	; 0x03
    741e:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(EKGTicksPerSample);							// sample period
    7422:	60 e0       	ldi	r22, 0x00	; 0
    7424:	78 e1       	ldi	r23, 0x18	; 24
    7426:	80 e0       	ldi	r24, 0x00	; 0
    7428:	90 e0       	ldi	r25, 0x00	; 0
    742a:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(EKGNumberOfSamples);							// number of samples
    742e:	6c e2       	ldi	r22, 0x2C	; 44
    7430:	71 e0       	ldi	r23, 0x01	; 1
    7432:	80 e0       	ldi	r24, 0x00	; 0
    7434:	90 e0       	ldi	r25, 0x00	; 0
    7436:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	
	SD_WriteString("EKG");
    743a:	81 e5       	ldi	r24, 0x51	; 81
    743c:	90 e2       	ldi	r25, 0x20	; 32
    743e:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7442:	89 e0       	ldi	r24, 0x09	; 9
    7444:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    7448:	8e e3       	ldi	r24, 0x3E	; 62
    744a:	90 e2       	ldi	r25, 0x20	; 32
    744c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7450:	8a e0       	ldi	r24, 0x0A	; 10
    7452:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write8(0x00);
    7456:	80 e0       	ldi	r24, 0x00	; 0
    7458:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
    745c:	88 e5       	ldi	r24, 0x58	; 88
    745e:	92 e0       	ldi	r25, 0x02	; 2
    7460:	08 9f       	mul	r16, r24
    7462:	70 01       	movw	r14, r0
    7464:	09 9f       	mul	r16, r25
    7466:	f0 0c       	add	r15, r0
    7468:	18 9f       	mul	r17, r24
    746a:	f0 0c       	add	r15, r0
    746c:	11 24       	eor	r1, r1
    746e:	80 e0       	ldi	r24, 0x00	; 0
    7470:	91 e5       	ldi	r25, 0x51	; 81
    7472:	e8 0e       	add	r14, r24
    7474:	f9 1e       	adc	r15, r25
    7476:	c0 e0       	ldi	r28, 0x00	; 0
    7478:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(uint16_t i = 0; i < EKGNumberOfSamples; i++){
		SD_Write16(EKGBuffer[bufferNumber][i]);
    747a:	f7 01       	movw	r30, r14
    747c:	81 91       	ld	r24, Z+
    747e:	91 91       	ld	r25, Z+
    7480:	7f 01       	movw	r14, r30
    7482:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	SD_Write8(0x09);
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	for(uint16_t i = 0; i < EKGNumberOfSamples; i++){
    7486:	21 96       	adiw	r28, 0x01	; 1
    7488:	f1 e0       	ldi	r31, 0x01	; 1
    748a:	cc 32       	cpi	r28, 0x2C	; 44
    748c:	df 07       	cpc	r29, r31
    748e:	a9 f7       	brne	.-22     	; 0x747a <SD_WriteEKGBuffer+0xba>
		SD_Write16(EKGBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();			// CRC
    7490:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	f_sync(&Log_File);
    7494:	89 ec       	ldi	r24, 0xC9	; 201
    7496:	9b e4       	ldi	r25, 0x4B	; 75
    7498:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
}
    749c:	df 91       	pop	r29
    749e:	cf 91       	pop	r28
    74a0:	1f 91       	pop	r17
    74a2:	0f 91       	pop	r16
    74a4:	ff 90       	pop	r15
    74a6:	ef 90       	pop	r14
    74a8:	08 95       	ret

000074aa <SD_WriteRespirationBuffer>:

	SD_WriteCRC();			// CRC
	f_sync(&Log_File);
}

void SD_WriteRespirationBuffer(uint8_t bufferNumber){
    74aa:	ef 92       	push	r14
    74ac:	ff 92       	push	r15
    74ae:	0f 93       	push	r16
    74b0:	1f 93       	push	r17
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
    74b6:	08 2f       	mov	r16, r24
    74b8:	8f ef       	ldi	r24, 0xFF	; 255
    74ba:	9f ef       	ldi	r25, 0xFF	; 255
    74bc:	af ef       	ldi	r26, 0xFF	; 255
    74be:	bf ef       	ldi	r27, 0xFF	; 255
    74c0:	80 93 0a 58 	sts	0x580A, r24
    74c4:	90 93 0b 58 	sts	0x580B, r25
    74c8:	a0 93 0c 58 	sts	0x580C, r26
    74cc:	b0 93 0d 58 	sts	0x580D, r27
	uint16_t length;
	length = respirationNumberOfSamples*2;
	length += 42;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);								// magic number
    74d0:	6c e4       	ldi	r22, 0x4C	; 76
    74d2:	74 e7       	ldi	r23, 0x74	; 116
    74d4:	8e ed       	ldi	r24, 0xDE	; 222
    74d6:	90 eb       	ldi	r25, 0xB0	; 176
    74d8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(length);										// record size
    74dc:	6e e8       	ldi	r22, 0x8E	; 142
    74de:	70 e0       	ldi	r23, 0x00	; 0
    74e0:	80 e0       	ldi	r24, 0x00	; 0
    74e2:	90 e0       	ldi	r25, 0x00	; 0
    74e4:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(3);											// record type
    74e8:	83 e0       	ldi	r24, 0x03	; 3
    74ea:	90 e0       	ldi	r25, 0x00	; 0
    74ec:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
							// ***** payload *****

	SD_Write32(respirationSampleStartTime[bufferNumber]);	// time
    74f0:	10 e0       	ldi	r17, 0x00	; 0
    74f2:	f8 01       	movw	r30, r16
    74f4:	ee 0f       	add	r30, r30
    74f6:	ff 1f       	adc	r31, r31
    74f8:	ee 0f       	add	r30, r30
    74fa:	ff 1f       	adc	r31, r31
    74fc:	e7 51       	subi	r30, 0x17	; 23
    74fe:	f2 4b       	sbci	r31, 0xB2	; 178
    7500:	60 81       	ld	r22, Z
    7502:	71 81       	ldd	r23, Z+1	; 0x01
    7504:	82 81       	ldd	r24, Z+2	; 0x02
    7506:	93 81       	ldd	r25, Z+3	; 0x03
    7508:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(respirationTicksPerSample);					// sample period (50hz)
    750c:	60 e0       	ldi	r22, 0x00	; 0
    750e:	70 e9       	ldi	r23, 0x90	; 144
    7510:	80 e0       	ldi	r24, 0x00	; 0
    7512:	90 e0       	ldi	r25, 0x00	; 0
    7514:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(respirationNumberOfSamples);					// number of samples
    7518:	62 e3       	ldi	r22, 0x32	; 50
    751a:	70 e0       	ldi	r23, 0x00	; 0
    751c:	80 e0       	ldi	r24, 0x00	; 0
    751e:	90 e0       	ldi	r25, 0x00	; 0
    7520:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	
	SD_WriteString("Respiration");
    7524:	85 e5       	ldi	r24, 0x55	; 85
    7526:	90 e2       	ldi	r25, 0x20	; 32
    7528:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    752c:	89 e0       	ldi	r24, 0x09	; 9
    752e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    7532:	8e e3       	ldi	r24, 0x3E	; 62
    7534:	90 e2       	ldi	r25, 0x20	; 32
    7536:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    753a:	8a e0       	ldi	r24, 0x0A	; 10
    753c:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write8(0x00);
    7540:	80 e0       	ldi	r24, 0x00	; 0
    7542:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
    7546:	84 e6       	ldi	r24, 0x64	; 100
    7548:	90 e0       	ldi	r25, 0x00	; 0
    754a:	08 9f       	mul	r16, r24
    754c:	70 01       	movw	r14, r0
    754e:	09 9f       	mul	r16, r25
    7550:	f0 0c       	add	r15, r0
    7552:	18 9f       	mul	r17, r24
    7554:	f0 0c       	add	r15, r0
    7556:	11 24       	eor	r1, r1
    7558:	80 e9       	ldi	r24, 0x90	; 144
    755a:	91 e3       	ldi	r25, 0x31	; 49
    755c:	e8 0e       	add	r14, r24
    755e:	f9 1e       	adc	r15, r25
    7560:	c0 e0       	ldi	r28, 0x00	; 0
    7562:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(uint16_t i = 0; i < respirationNumberOfSamples; i++){
		SD_Write16(respirationBuffer[bufferNumber][i]);
    7564:	f7 01       	movw	r30, r14
    7566:	81 91       	ld	r24, Z+
    7568:	91 91       	ld	r25, Z+
    756a:	7f 01       	movw	r14, r30
    756c:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	SD_Write8(0x09);
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	for(uint16_t i = 0; i < respirationNumberOfSamples; i++){
    7570:	21 96       	adiw	r28, 0x01	; 1
    7572:	c2 33       	cpi	r28, 0x32	; 50
    7574:	d1 05       	cpc	r29, r1
    7576:	b1 f7       	brne	.-20     	; 0x7564 <SD_WriteRespirationBuffer+0xba>
		SD_Write16(respirationBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();			// CRC
    7578:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	f_sync(&Log_File);
    757c:	89 ec       	ldi	r24, 0xC9	; 201
    757e:	9b e4       	ldi	r25, 0x4B	; 75
    7580:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
}
    7584:	df 91       	pop	r29
    7586:	cf 91       	pop	r28
    7588:	1f 91       	pop	r17
    758a:	0f 91       	pop	r16
    758c:	ff 90       	pop	r15
    758e:	ef 90       	pop	r14
    7590:	08 95       	ret

00007592 <SD_WriteHumidityBuffer>:
	
	SD_WriteCRC();					
	f_sync(&Log_File);
}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    7592:	0f 93       	push	r16
    7594:	1f 93       	push	r17
    7596:	cf 93       	push	r28
    7598:	df 93       	push	r29
    759a:	08 2f       	mov	r16, r24
    759c:	8f ef       	ldi	r24, 0xFF	; 255
    759e:	9f ef       	ldi	r25, 0xFF	; 255
    75a0:	af ef       	ldi	r26, 0xFF	; 255
    75a2:	bf ef       	ldi	r27, 0xFF	; 255
    75a4:	80 93 0a 58 	sts	0x580A, r24
    75a8:	90 93 0b 58 	sts	0x580B, r25
    75ac:	a0 93 0c 58 	sts	0x580C, r26
    75b0:	b0 93 0d 58 	sts	0x580D, r27
	uint16_t length;
	length = humidityNumberOfSamples*2;
	length += 39;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number
    75b4:	6c e4       	ldi	r22, 0x4C	; 76
    75b6:	74 e7       	ldi	r23, 0x74	; 116
    75b8:	8e ed       	ldi	r24, 0xDE	; 222
    75ba:	90 eb       	ldi	r25, 0xB0	; 176
    75bc:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(length);											// record size
    75c0:	6b e3       	ldi	r22, 0x3B	; 59
    75c2:	70 e0       	ldi	r23, 0x00	; 0
    75c4:	80 e0       	ldi	r24, 0x00	; 0
    75c6:	90 e0       	ldi	r25, 0x00	; 0
    75c8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(3);												// record type
    75cc:	83 e0       	ldi	r24, 0x03	; 3
    75ce:	90 e0       	ldi	r25, 0x00	; 0
    75d0:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
						// ***** payload *****
	
	SD_Write32(humiditySampleStartTime[bufferNumber]);			// time
    75d4:	10 e0       	ldi	r17, 0x00	; 0
    75d6:	f8 01       	movw	r30, r16
    75d8:	ee 0f       	add	r30, r30
    75da:	ff 1f       	adc	r31, r31
    75dc:	ee 0f       	add	r30, r30
    75de:	ff 1f       	adc	r31, r31
    75e0:	ea 51       	subi	r30, 0x1A	; 26
    75e2:	f8 4c       	sbci	r31, 0xC8	; 200
    75e4:	60 81       	ld	r22, Z
    75e6:	71 81       	ldd	r23, Z+1	; 0x01
    75e8:	82 81       	ldd	r24, Z+2	; 0x02
    75ea:	93 81       	ldd	r25, Z+3	; 0x03
    75ec:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(humidityTicksPerSample);							// sample period 
    75f0:	60 e0       	ldi	r22, 0x00	; 0
    75f2:	70 e2       	ldi	r23, 0x20	; 32
    75f4:	8c e1       	ldi	r24, 0x1C	; 28
    75f6:	90 e0       	ldi	r25, 0x00	; 0
    75f8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(humidityNumberOfSamples);						// number of samples
    75fc:	6a e0       	ldi	r22, 0x0A	; 10
    75fe:	70 e0       	ldi	r23, 0x00	; 0
    7600:	80 e0       	ldi	r24, 0x00	; 0
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	
	SD_WriteString("Humidity");
    7608:	81 e6       	ldi	r24, 0x61	; 97
    760a:	90 e2       	ldi	r25, 0x20	; 32
    760c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7610:	89 e0       	ldi	r24, 0x09	; 9
    7612:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    7616:	8e e3       	ldi	r24, 0x3E	; 62
    7618:	90 e2       	ldi	r25, 0x20	; 32
    761a:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    761e:	8a e0       	ldi	r24, 0x0A	; 10
    7620:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write8(0x00);
    7624:	80 e0       	ldi	r24, 0x00	; 0
    7626:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
    762a:	84 e1       	ldi	r24, 0x14	; 20
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	08 9f       	mul	r16, r24
    7630:	e0 01       	movw	r28, r0
    7632:	09 9f       	mul	r16, r25
    7634:	d0 0d       	add	r29, r0
    7636:	18 9f       	mul	r17, r24
    7638:	d0 0d       	add	r29, r0
    763a:	11 24       	eor	r1, r1
    763c:	cf 57       	subi	r28, 0x7F	; 127
    763e:	d7 4a       	sbci	r29, 0xA7	; 167
    7640:	00 e0       	ldi	r16, 0x00	; 0
	

	for(uint8_t i = 0; i < humidityNumberOfSamples; i++){
		SD_Write16(humidityBuffer[bufferNumber][i]);
    7642:	89 91       	ld	r24, Y+
    7644:	99 91       	ld	r25, Y+
    7646:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	

	for(uint8_t i = 0; i < humidityNumberOfSamples; i++){
    764a:	0f 5f       	subi	r16, 0xFF	; 255
    764c:	0a 30       	cpi	r16, 0x0A	; 10
    764e:	c9 f7       	brne	.-14     	; 0x7642 <SD_WriteHumidityBuffer+0xb0>
		SD_Write16(humidityBuffer[bufferNumber][i]);
	}

	SD_WriteCRC();			// CRC
    7650:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	f_sync(&Log_File);
    7654:	89 ec       	ldi	r24, 0xC9	; 201
    7656:	9b e4       	ldi	r25, 0x4B	; 75
    7658:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
}
    765c:	df 91       	pop	r29
    765e:	cf 91       	pop	r28
    7660:	1f 91       	pop	r17
    7662:	0f 91       	pop	r16
    7664:	08 95       	ret

00007666 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);
	
}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    7666:	0f 93       	push	r16
    7668:	1f 93       	push	r17
    766a:	cf 93       	push	r28
    766c:	df 93       	push	r29
    766e:	08 2f       	mov	r16, r24
    7670:	8f ef       	ldi	r24, 0xFF	; 255
    7672:	9f ef       	ldi	r25, 0xFF	; 255
    7674:	af ef       	ldi	r26, 0xFF	; 255
    7676:	bf ef       	ldi	r27, 0xFF	; 255
    7678:	80 93 0a 58 	sts	0x580A, r24
    767c:	90 93 0b 58 	sts	0x580B, r25
    7680:	a0 93 0c 58 	sts	0x580C, r26
    7684:	b0 93 0d 58 	sts	0x580D, r27
	uint16_t length;
	length = temperatureNumberOfSamples*2;
	length += 42;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number 
    7688:	6c e4       	ldi	r22, 0x4C	; 76
    768a:	74 e7       	ldi	r23, 0x74	; 116
    768c:	8e ed       	ldi	r24, 0xDE	; 222
    768e:	90 eb       	ldi	r25, 0xB0	; 176
    7690:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(length);											// record size  
    7694:	6e e3       	ldi	r22, 0x3E	; 62
    7696:	70 e0       	ldi	r23, 0x00	; 0
    7698:	80 e0       	ldi	r24, 0x00	; 0
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(3);												// record type
    76a0:	83 e0       	ldi	r24, 0x03	; 3
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
								// ***** payload *****
	
	SD_Write32(temperatureSampleStartTime[bufferNumber]);		// time	
    76a8:	10 e0       	ldi	r17, 0x00	; 0
    76aa:	f8 01       	movw	r30, r16
    76ac:	ee 0f       	add	r30, r30
    76ae:	ff 1f       	adc	r31, r31
    76b0:	ee 0f       	add	r30, r30
    76b2:	ff 1f       	adc	r31, r31
    76b4:	e0 56       	subi	r30, 0x60	; 96
    76b6:	ff 4c       	sbci	r31, 0xCF	; 207
    76b8:	60 81       	ld	r22, Z
    76ba:	71 81       	ldd	r23, Z+1	; 0x01
    76bc:	82 81       	ldd	r24, Z+2	; 0x02
    76be:	93 81       	ldd	r25, Z+3	; 0x03
    76c0:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(temperatureTicksPerSample);						// sample period 
    76c4:	60 e0       	ldi	r22, 0x00	; 0
    76c6:	70 e2       	ldi	r23, 0x20	; 32
    76c8:	8c e1       	ldi	r24, 0x1C	; 28
    76ca:	90 e0       	ldi	r25, 0x00	; 0
    76cc:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(temperatureNumberOfSamples);						// number of samples
    76d0:	6a e0       	ldi	r22, 0x0A	; 10
    76d2:	70 e0       	ldi	r23, 0x00	; 0
    76d4:	80 e0       	ldi	r24, 0x00	; 0
    76d6:	90 e0       	ldi	r25, 0x00	; 0
    76d8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	
	SD_WriteString("Temperature");
    76dc:	8a e6       	ldi	r24, 0x6A	; 106
    76de:	90 e2       	ldi	r25, 0x20	; 32
    76e0:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    76e4:	89 e0       	ldi	r24, 0x09	; 9
    76e6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("16");
    76ea:	8e e3       	ldi	r24, 0x3E	; 62
    76ec:	90 e2       	ldi	r25, 0x20	; 32
    76ee:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    76f2:	8a e0       	ldi	r24, 0x0A	; 10
    76f4:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write8(0x00);	
    76f8:	80 e0       	ldi	r24, 0x00	; 0
    76fa:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
    76fe:	84 e1       	ldi	r24, 0x14	; 20
    7700:	90 e0       	ldi	r25, 0x00	; 0
    7702:	08 9f       	mul	r16, r24
    7704:	e0 01       	movw	r28, r0
    7706:	09 9f       	mul	r16, r25
    7708:	d0 0d       	add	r29, r0
    770a:	18 9f       	mul	r17, r24
    770c:	d0 0d       	add	r29, r0
    770e:	11 24       	eor	r1, r1
    7710:	c7 59       	subi	r28, 0x97	; 151
    7712:	df 4c       	sbci	r29, 0xCF	; 207
    7714:	00 e0       	ldi	r16, 0x00	; 0
	
	for(uint8_t i = 0; i < temperatureNumberOfSamples; i++){
		SD_Write16(temperatureBuffer[bufferNumber][i]);
    7716:	89 91       	ld	r24, Y+
    7718:	99 91       	ld	r25, Y+
    771a:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	SD_Write8(0x09);
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);	
	
	for(uint8_t i = 0; i < temperatureNumberOfSamples; i++){
    771e:	0f 5f       	subi	r16, 0xFF	; 255
    7720:	0a 30       	cpi	r16, 0x0A	; 10
    7722:	c9 f7       	brne	.-14     	; 0x7716 <SD_WriteTemperatureBuffer+0xb0>
		SD_Write16(temperatureBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();					
    7724:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	f_sync(&Log_File);
    7728:	89 ec       	ldi	r24, 0xC9	; 201
    772a:	9b e4       	ldi	r25, 0x4B	; 75
    772c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
}
    7730:	df 91       	pop	r29
    7732:	cf 91       	pop	r28
    7734:	1f 91       	pop	r17
    7736:	0f 91       	pop	r16
    7738:	08 95       	ret

0000773a <Debug_SendString>:
	}
	Debug_Usart.DATA = data;
	return true;
}

bool Debug_SendString(char string [],bool CR){
    773a:	ef 92       	push	r14
    773c:	ff 92       	push	r15
    773e:	0f 93       	push	r16
    7740:	1f 93       	push	r17
    7742:	cf 93       	push	r28
    7744:	df 93       	push	r29
    7746:	8c 01       	movw	r16, r24
    7748:	e6 2e       	mov	r14, r22
    774a:	ff 24       	eor	r15, r15
    774c:	08 c0       	rjmp	.+16     	; 0x775e <Debug_SendString+0x24>
	for(uint8_t i = 0; i < strlen(string); i++){
		if(!Debug_SendByte(string[i])){
    774e:	c0 0f       	add	r28, r16
    7750:	d1 1f       	adc	r29, r17
    7752:	88 81       	ld	r24, Y
    7754:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7758:	88 23       	and	r24, r24
    775a:	d9 f0       	breq	.+54     	; 0x7792 <Debug_SendString+0x58>
	Debug_Usart.DATA = data;
	return true;
}

bool Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    775c:	f3 94       	inc	r15
    775e:	cf 2d       	mov	r28, r15
    7760:	d0 e0       	ldi	r29, 0x00	; 0
    7762:	f8 01       	movw	r30, r16
    7764:	01 90       	ld	r0, Z+
    7766:	00 20       	and	r0, r0
    7768:	e9 f7       	brne	.-6      	; 0x7764 <Debug_SendString+0x2a>
    776a:	31 97       	sbiw	r30, 0x01	; 1
    776c:	e0 1b       	sub	r30, r16
    776e:	f1 0b       	sbc	r31, r17
    7770:	ce 17       	cp	r28, r30
    7772:	df 07       	cpc	r29, r31
    7774:	60 f3       	brcs	.-40     	; 0x774e <Debug_SendString+0x14>
		if(!Debug_SendByte(string[i])){
			return false;
		}
	}

	if(CR){
    7776:	ee 20       	and	r14, r14
    7778:	51 f0       	breq	.+20     	; 0x778e <Debug_SendString+0x54>
		if(!Debug_SendByte(13)){
    777a:	8d e0       	ldi	r24, 0x0D	; 13
    777c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7780:	88 23       	and	r24, r24
    7782:	39 f0       	breq	.+14     	; 0x7792 <Debug_SendString+0x58>
			return false;
		}
		if(!Debug_SendByte(10)){
    7784:	8a e0       	ldi	r24, 0x0A	; 10
    7786:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    778a:	88 23       	and	r24, r24
    778c:	19 f0       	breq	.+6      	; 0x7794 <Debug_SendString+0x5a>
    778e:	81 e0       	ldi	r24, 0x01	; 1
    7790:	01 c0       	rjmp	.+2      	; 0x7794 <Debug_SendString+0x5a>
    7792:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    7794:	df 91       	pop	r29
    7796:	cf 91       	pop	r28
    7798:	1f 91       	pop	r17
    779a:	0f 91       	pop	r16
    779c:	ff 90       	pop	r15
    779e:	ef 90       	pop	r14
    77a0:	08 95       	ret

000077a2 <Uploader_connectToComputer>:
		return false;
	}
	return true;
}

bool Uploader_connectToComputer(void){
    77a2:	df 92       	push	r13
    77a4:	ef 92       	push	r14
    77a6:	ff 92       	push	r15
    77a8:	0f 93       	push	r16
    77aa:	1f 93       	push	r17
    77ac:	cf 93       	push	r28
    77ae:	df 93       	push	r29
	uint16_t singCounter;
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
    77b0:	10 92 a6 27 	sts	0x27A6, r1
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
    77b4:	20 91 7b 27 	lds	r18, 0x277B
    77b8:	30 91 7c 27 	lds	r19, 0x277C
    77bc:	80 91 79 27 	lds	r24, 0x2779
    77c0:	90 91 7a 27 	lds	r25, 0x277A
    77c4:	28 17       	cp	r18, r24
    77c6:	39 07       	cpc	r19, r25
    77c8:	09 f0       	breq	.+2      	; 0x77cc <Uploader_connectToComputer+0x2a>
    77ca:	56 c0       	rjmp	.+172    	; 0x7878 <Uploader_connectToComputer+0xd6>
    77cc:	3e c0       	rjmp	.+124    	; 0x784a <Uploader_connectToComputer+0xa8>
	Debug_ClearBuffer();
	while(!connected){
		if(!Debug_SendString("BS",false)){
    77ce:	86 e7       	ldi	r24, 0x76	; 118
    77d0:	90 e2       	ldi	r25, 0x20	; 32
    77d2:	60 e0       	ldi	r22, 0x00	; 0
    77d4:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    77d8:	88 23       	and	r24, r24
    77da:	09 f4       	brne	.+2      	; 0x77de <Uploader_connectToComputer+0x3c>
    77dc:	44 c0       	rjmp	.+136    	; 0x7866 <Uploader_connectToComputer+0xc4>
    77de:	ce ee       	ldi	r28, 0xEE	; 238
    77e0:	d2 e0       	ldi	r29, 0x02	; 2
    77e2:	20 91 7b 27 	lds	r18, 0x277B
    77e6:	30 91 7c 27 	lds	r19, 0x277C
    77ea:	80 91 79 27 	lds	r24, 0x2779
    77ee:	90 91 7a 27 	lds	r25, 0x277A
    77f2:	28 17       	cp	r18, r24
    77f4:	39 07       	cpc	r19, r25
    77f6:	09 f0       	breq	.+2      	; 0x77fa <Uploader_connectToComputer+0x58>
    77f8:	48 c0       	rjmp	.+144    	; 0x788a <Uploader_connectToComputer+0xe8>
    77fa:	21 c0       	rjmp	.+66     	; 0x783e <Uploader_connectToComputer+0x9c>
    77fc:	c7 01       	movw	r24, r14
    77fe:	01 97       	sbiw	r24, 0x01	; 1
    7800:	f1 f7       	brne	.-4      	; 0x77fe <Uploader_connectToComputer+0x5c>
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
				char1 = Debug_GetByte(false);
				if(char1 == 'B'){
					_delay_ms(5);
					char2 = Debug_GetByte(false);
    7802:	80 e0       	ldi	r24, 0x00	; 0
    7804:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
					if(char2 == 'T'){
    7808:	84 35       	cpi	r24, 0x54	; 84
    780a:	c9 f4       	brne	.+50     	; 0x783e <Uploader_connectToComputer+0x9c>
						if(!Debug_SendString("BT",false)){
    780c:	89 e7       	ldi	r24, 0x79	; 121
    780e:	90 e2       	ldi	r25, 0x20	; 32
    7810:	60 e0       	ldi	r22, 0x00	; 0
    7812:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7816:	88 23       	and	r24, r24
    7818:	31 f1       	breq	.+76     	; 0x7866 <Uploader_connectToComputer+0xc4>
							return false;
						}
						
						connected = true;
    781a:	d0 92 a6 27 	sts	0x27A6, r13
						timeOutCounter = 0;
    781e:	10 92 97 27 	sts	0x2797, r1
    7822:	10 92 98 27 	sts	0x2798, r1
    7826:	20 91 7b 27 	lds	r18, 0x277B
    782a:	30 91 7c 27 	lds	r19, 0x277C
    782e:	80 91 79 27 	lds	r24, 0x2779
    7832:	90 91 7a 27 	lds	r25, 0x277A
    7836:	28 17       	cp	r18, r24
    7838:	39 07       	cpc	r19, r25
    783a:	69 f5       	brne	.+90     	; 0x7896 <Uploader_connectToComputer+0xf4>
    783c:	0d c0       	rjmp	.+26     	; 0x7858 <Uploader_connectToComputer+0xb6>
    783e:	c8 01       	movw	r24, r16
    7840:	01 97       	sbiw	r24, 0x01	; 1
    7842:	f1 f7       	brne	.-4      	; 0x7840 <Uploader_connectToComputer+0x9e>
						break;
					}
				}
			}
			_delay_ms(1);
			singCounter--;
    7844:	21 97       	sbiw	r28, 0x01	; 1
	while(!connected){
		if(!Debug_SendString("BS",false)){
			return false;
		}
		singCounter = 750;
		while(singCounter > 0){
    7846:	69 f6       	brne	.-102    	; 0x77e2 <Uploader_connectToComputer+0x40>
    7848:	07 c0       	rjmp	.+14     	; 0x7858 <Uploader_connectToComputer+0xb6>
    784a:	e1 2c       	mov	r14, r1
    784c:	68 e4       	ldi	r22, 0x48	; 72
    784e:	f6 2e       	mov	r15, r22
    7850:	06 e6       	ldi	r16, 0x66	; 102
    7852:	1e e0       	ldi	r17, 0x0E	; 14
					if(char2 == 'T'){
						if(!Debug_SendString("BT",false)){
							return false;
						}
						
						connected = true;
    7854:	dd 24       	eor	r13, r13
    7856:	d3 94       	inc	r13
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
    7858:	80 91 a6 27 	lds	r24, 0x27A6
    785c:	88 23       	and	r24, r24
    785e:	09 f4       	brne	.+2      	; 0x7862 <Uploader_connectToComputer+0xc0>
    7860:	b6 cf       	rjmp	.-148    	; 0x77ce <Uploader_connectToComputer+0x2c>
    7862:	81 e0       	ldi	r24, 0x01	; 1
    7864:	01 c0       	rjmp	.+2      	; 0x7868 <Uploader_connectToComputer+0xc6>
    7866:	80 e0       	ldi	r24, 0x00	; 0
			_delay_ms(1);
			singCounter--;
		}
	}
	return true;
}
    7868:	df 91       	pop	r29
    786a:	cf 91       	pop	r28
    786c:	1f 91       	pop	r17
    786e:	0f 91       	pop	r16
    7870:	ff 90       	pop	r15
    7872:	ef 90       	pop	r14
    7874:	df 90       	pop	r13
    7876:	08 95       	ret
void Debug_ClearBuffer(void){
	if(Debug_CharReadyToRead()){
		//Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
		//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
		//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
		Debug_readLocation = Debug_writeLocation;
    7878:	80 91 7b 27 	lds	r24, 0x277B
    787c:	90 91 7c 27 	lds	r25, 0x277C
    7880:	80 93 79 27 	sts	0x2779, r24
    7884:	90 93 7a 27 	sts	0x277A, r25
    7888:	e0 cf       	rjmp	.-64     	; 0x784a <Uploader_connectToComputer+0xa8>
			return false;
		}
		singCounter = 750;
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
				char1 = Debug_GetByte(false);
    788a:	80 e0       	ldi	r24, 0x00	; 0
    788c:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
				if(char1 == 'B'){
    7890:	82 34       	cpi	r24, 0x42	; 66
    7892:	a9 f6       	brne	.-86     	; 0x783e <Uploader_connectToComputer+0x9c>
    7894:	b3 cf       	rjmp	.-154    	; 0x77fc <Uploader_connectToComputer+0x5a>
    7896:	80 91 7b 27 	lds	r24, 0x277B
    789a:	90 91 7c 27 	lds	r25, 0x277C
    789e:	80 93 79 27 	sts	0x2779, r24
    78a2:	90 93 7a 27 	sts	0x277A, r25
    78a6:	d8 cf       	rjmp	.-80     	; 0x7858 <Uploader_connectToComputer+0xb6>

000078a8 <Uploader_sendPort>:
		return false;
	}
	return true;
}

bool Uploader_sendPort(void){
    78a8:	cf 93       	push	r28
    78aa:	df 93       	push	r29
	if(!Debug_SendByte('O')){
    78ac:	8f e4       	ldi	r24, 0x4F	; 79
    78ae:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    78b2:	88 23       	and	r24, r24
    78b4:	09 f1       	breq	.+66     	; 0x78f8 <Uploader_sendPort+0x50>
		return false;
	}
	if(port[strlen(port)-1] < 32){
    78b6:	ed e1       	ldi	r30, 0x1D	; 29
    78b8:	f8 e5       	ldi	r31, 0x58	; 88
    78ba:	01 90       	ld	r0, Z+
    78bc:	00 20       	and	r0, r0
    78be:	e9 f7       	brne	.-6      	; 0x78ba <Uploader_sendPort+0x12>
    78c0:	32 97       	sbiw	r30, 0x02	; 2
    78c2:	80 81       	ld	r24, Z
    78c4:	80 32       	cpi	r24, 0x20	; 32
    78c6:	08 f4       	brcc	.+2      	; 0x78ca <Uploader_sendPort+0x22>
        port[strlen(port)-1] = 0;
    78c8:	10 82       	st	Z, r1
    }
	   if(!Debug_SendByte(strlen(port)+2)){
    78ca:	cd e1       	ldi	r28, 0x1D	; 29
    78cc:	d8 e5       	ldi	r29, 0x58	; 88
    78ce:	fe 01       	movw	r30, r28
    78d0:	01 90       	ld	r0, Z+
    78d2:	00 20       	and	r0, r0
    78d4:	e9 f7       	brne	.-6      	; 0x78d0 <Uploader_sendPort+0x28>
    78d6:	31 97       	sbiw	r30, 0x01	; 1
    78d8:	ec 1b       	sub	r30, r28
    78da:	fd 0b       	sbc	r31, r29
    78dc:	8e 2f       	mov	r24, r30
    78de:	8e 5f       	subi	r24, 0xFE	; 254
    78e0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    78e4:	88 23       	and	r24, r24
    78e6:	41 f0       	breq	.+16     	; 0x78f8 <Uploader_sendPort+0x50>
		return false;
	}
	if(!Debug_SendString(port,true)){
    78e8:	ce 01       	movw	r24, r28
    78ea:	61 e0       	ldi	r22, 0x01	; 1
    78ec:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    78f0:	88 23       	and	r24, r24
    78f2:	19 f0       	breq	.+6      	; 0x78fa <Uploader_sendPort+0x52>
    78f4:	81 e0       	ldi	r24, 0x01	; 1
    78f6:	01 c0       	rjmp	.+2      	; 0x78fa <Uploader_sendPort+0x52>
    78f8:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    78fa:	df 91       	pop	r29
    78fc:	cf 91       	pop	r28
    78fe:	08 95       	ret

00007900 <Uploader_sendServer>:
            return false;
        }
    }
}

bool Uploader_sendServer(void){
    7900:	cf 93       	push	r28
    7902:	df 93       	push	r29
	if(!Debug_SendByte('V')){
    7904:	86 e5       	ldi	r24, 0x56	; 86
    7906:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    790a:	88 23       	and	r24, r24
    790c:	09 f1       	breq	.+66     	; 0x7950 <Uploader_sendServer+0x50>
		return false;
	}
	if(server[strlen(server)-1] < 32){
    790e:	e2 e8       	ldi	r30, 0x82	; 130
    7910:	f7 e3       	ldi	r31, 0x37	; 55
    7912:	01 90       	ld	r0, Z+
    7914:	00 20       	and	r0, r0
    7916:	e9 f7       	brne	.-6      	; 0x7912 <Uploader_sendServer+0x12>
    7918:	32 97       	sbiw	r30, 0x02	; 2
    791a:	80 81       	ld	r24, Z
    791c:	80 32       	cpi	r24, 0x20	; 32
    791e:	08 f4       	brcc	.+2      	; 0x7922 <Uploader_sendServer+0x22>
        server[strlen(server)-1] = 0;
    7920:	10 82       	st	Z, r1
    }
	if(!Debug_SendByte(strlen(server)+2)){
    7922:	c2 e8       	ldi	r28, 0x82	; 130
    7924:	d7 e3       	ldi	r29, 0x37	; 55
    7926:	fe 01       	movw	r30, r28
    7928:	01 90       	ld	r0, Z+
    792a:	00 20       	and	r0, r0
    792c:	e9 f7       	brne	.-6      	; 0x7928 <Uploader_sendServer+0x28>
    792e:	31 97       	sbiw	r30, 0x01	; 1
    7930:	ec 1b       	sub	r30, r28
    7932:	fd 0b       	sbc	r31, r29
    7934:	8e 2f       	mov	r24, r30
    7936:	8e 5f       	subi	r24, 0xFE	; 254
    7938:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    793c:	88 23       	and	r24, r24
    793e:	41 f0       	breq	.+16     	; 0x7950 <Uploader_sendServer+0x50>
		return false;
	}
	if(!Debug_SendString(server,true)){
    7940:	ce 01       	movw	r24, r28
    7942:	61 e0       	ldi	r22, 0x01	; 1
    7944:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7948:	88 23       	and	r24, r24
    794a:	19 f0       	breq	.+6      	; 0x7952 <Uploader_sendServer+0x52>
    794c:	81 e0       	ldi	r24, 0x01	; 1
    794e:	01 c0       	rjmp	.+2      	; 0x7952 <Uploader_sendServer+0x52>
    7950:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    7952:	df 91       	pop	r29
    7954:	cf 91       	pop	r28
    7956:	08 95       	ret

00007958 <Uploader_sendNickname>:
		return false;
	}
	return true;
}

bool Uploader_sendNickname(void){
    7958:	cf 93       	push	r28
    795a:	df 93       	push	r29
	if(!Debug_SendByte('N')){
    795c:	8e e4       	ldi	r24, 0x4E	; 78
    795e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7962:	88 23       	and	r24, r24
    7964:	09 f1       	breq	.+66     	; 0x79a8 <Uploader_sendNickname+0x50>
		return false;
	}
	if(nickname[strlen(nickname)-1] < 32){
    7966:	ef e4       	ldi	r30, 0x4F	; 79
    7968:	f8 e5       	ldi	r31, 0x58	; 88
    796a:	01 90       	ld	r0, Z+
    796c:	00 20       	and	r0, r0
    796e:	e9 f7       	brne	.-6      	; 0x796a <Uploader_sendNickname+0x12>
    7970:	32 97       	sbiw	r30, 0x02	; 2
    7972:	80 81       	ld	r24, Z
    7974:	80 32       	cpi	r24, 0x20	; 32
    7976:	08 f4       	brcc	.+2      	; 0x797a <Uploader_sendNickname+0x22>
		nickname[strlen(nickname)-1] = 0;
    7978:	10 82       	st	Z, r1
    }
	if(!Debug_SendByte(strlen(nickname)+2)){
    797a:	cf e4       	ldi	r28, 0x4F	; 79
    797c:	d8 e5       	ldi	r29, 0x58	; 88
    797e:	fe 01       	movw	r30, r28
    7980:	01 90       	ld	r0, Z+
    7982:	00 20       	and	r0, r0
    7984:	e9 f7       	brne	.-6      	; 0x7980 <Uploader_sendNickname+0x28>
    7986:	31 97       	sbiw	r30, 0x01	; 1
    7988:	ec 1b       	sub	r30, r28
    798a:	fd 0b       	sbc	r31, r29
    798c:	8e 2f       	mov	r24, r30
    798e:	8e 5f       	subi	r24, 0xFE	; 254
    7990:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7994:	88 23       	and	r24, r24
    7996:	41 f0       	breq	.+16     	; 0x79a8 <Uploader_sendNickname+0x50>
		return false;
	}
	if(!Debug_SendString(nickname,true)){
    7998:	ce 01       	movw	r24, r28
    799a:	61 e0       	ldi	r22, 0x01	; 1
    799c:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    79a0:	88 23       	and	r24, r24
    79a2:	19 f0       	breq	.+6      	; 0x79aa <Uploader_sendNickname+0x52>
    79a4:	81 e0       	ldi	r24, 0x01	; 1
    79a6:	01 c0       	rjmp	.+2      	; 0x79aa <Uploader_sendNickname+0x52>
    79a8:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    79aa:	df 91       	pop	r29
    79ac:	cf 91       	pop	r28
    79ae:	08 95       	ret

000079b0 <Uploader_sendUser>:
		}
	}
	return true;
}

bool Uploader_sendUser(void){
    79b0:	cf 93       	push	r28
    79b2:	df 93       	push	r29
	if(!Debug_SendByte('U')){
    79b4:	85 e5       	ldi	r24, 0x55	; 85
    79b6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    79ba:	88 23       	and	r24, r24
    79bc:	09 f1       	breq	.+66     	; 0x7a00 <Uploader_sendUser+0x50>
		return false;
	}
	if(user[strlen(user)-1] < 32){
    79be:	ec e6       	ldi	r30, 0x6C	; 108
    79c0:	f7 e3       	ldi	r31, 0x37	; 55
    79c2:	01 90       	ld	r0, Z+
    79c4:	00 20       	and	r0, r0
    79c6:	e9 f7       	brne	.-6      	; 0x79c2 <Uploader_sendUser+0x12>
    79c8:	32 97       	sbiw	r30, 0x02	; 2
    79ca:	80 81       	ld	r24, Z
    79cc:	80 32       	cpi	r24, 0x20	; 32
    79ce:	08 f4       	brcc	.+2      	; 0x79d2 <Uploader_sendUser+0x22>
        user[strlen(user)-1] = 0;
    79d0:	10 82       	st	Z, r1
    }
	if(!Debug_SendByte(strlen(user)+2)){
    79d2:	cc e6       	ldi	r28, 0x6C	; 108
    79d4:	d7 e3       	ldi	r29, 0x37	; 55
    79d6:	fe 01       	movw	r30, r28
    79d8:	01 90       	ld	r0, Z+
    79da:	00 20       	and	r0, r0
    79dc:	e9 f7       	brne	.-6      	; 0x79d8 <Uploader_sendUser+0x28>
    79de:	31 97       	sbiw	r30, 0x01	; 1
    79e0:	ec 1b       	sub	r30, r28
    79e2:	fd 0b       	sbc	r31, r29
    79e4:	8e 2f       	mov	r24, r30
    79e6:	8e 5f       	subi	r24, 0xFE	; 254
    79e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    79ec:	88 23       	and	r24, r24
    79ee:	41 f0       	breq	.+16     	; 0x7a00 <Uploader_sendUser+0x50>
		return false;
	}
	if(!Debug_SendString(user,true)){
    79f0:	ce 01       	movw	r24, r28
    79f2:	61 e0       	ldi	r22, 0x01	; 1
    79f4:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    79f8:	88 23       	and	r24, r24
    79fa:	19 f0       	breq	.+6      	; 0x7a02 <Uploader_sendUser+0x52>
    79fc:	81 e0       	ldi	r24, 0x01	; 1
    79fe:	01 c0       	rjmp	.+2      	; 0x7a02 <Uploader_sendUser+0x52>
    7a00:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    7a02:	df 91       	pop	r29
    7a04:	cf 91       	pop	r28
    7a06:	08 95       	ret

00007a08 <Uploader_sendKey>:
		}
	}
	return true;
}

bool Uploader_sendKey(void){
    7a08:	cf 93       	push	r28
    7a0a:	df 93       	push	r29
	if(phraseRead){
    7a0c:	80 91 87 27 	lds	r24, 0x2787
    7a10:	88 23       	and	r24, r24
    7a12:	91 f0       	breq	.+36     	; 0x7a38 <Uploader_sendKey+0x30>
		if(phrase[strlen(phrase)-1] < 32){
    7a14:	e9 ef       	ldi	r30, 0xF9	; 249
    7a16:	fa e4       	ldi	r31, 0x4A	; 74
    7a18:	01 90       	ld	r0, Z+
    7a1a:	00 20       	and	r0, r0
    7a1c:	e9 f7       	brne	.-6      	; 0x7a18 <Uploader_sendKey+0x10>
    7a1e:	32 97       	sbiw	r30, 0x02	; 2
    7a20:	80 81       	ld	r24, Z
    7a22:	80 32       	cpi	r24, 0x20	; 32
    7a24:	08 f4       	brcc	.+2      	; 0x7a28 <Uploader_sendKey+0x20>
			phrase[strlen(phrase)-1] = 0;
    7a26:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('K')){
    7a28:	8b e4       	ldi	r24, 0x4B	; 75
    7a2a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7a2e:	88 23       	and	r24, r24
    7a30:	d1 f1       	breq	.+116    	; 0x7aa6 <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendByte(strlen(phrase)+2)){
    7a32:	c9 ef       	ldi	r28, 0xF9	; 249
    7a34:	da e4       	ldi	r29, 0x4A	; 74
    7a36:	15 c0       	rjmp	.+42     	; 0x7a62 <Uploader_sendKey+0x5a>
			return false;
		}		
		if(!Debug_SendString(phrase,true)){
			return false;
		}
	} else if(keyRead){
    7a38:	80 91 88 27 	lds	r24, 0x2788
    7a3c:	88 23       	and	r24, r24
    7a3e:	01 f1       	breq	.+64     	; 0x7a80 <Uploader_sendKey+0x78>
		if(key[strlen(key)-1] < 32){
    7a40:	e7 e9       	ldi	r30, 0x97	; 151
    7a42:	fb e4       	ldi	r31, 0x4B	; 75
    7a44:	01 90       	ld	r0, Z+
    7a46:	00 20       	and	r0, r0
    7a48:	e9 f7       	brne	.-6      	; 0x7a44 <Uploader_sendKey+0x3c>
    7a4a:	32 97       	sbiw	r30, 0x02	; 2
    7a4c:	80 81       	ld	r24, Z
    7a4e:	80 32       	cpi	r24, 0x20	; 32
    7a50:	08 f4       	brcc	.+2      	; 0x7a54 <Uploader_sendKey+0x4c>
			key[strlen(key)-1] = 0;
    7a52:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('K')){
    7a54:	8b e4       	ldi	r24, 0x4B	; 75
    7a56:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7a5a:	88 23       	and	r24, r24
    7a5c:	21 f1       	breq	.+72     	; 0x7aa6 <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendByte(strlen(key)+2)){
    7a5e:	c7 e9       	ldi	r28, 0x97	; 151
    7a60:	db e4       	ldi	r29, 0x4B	; 75
    7a62:	fe 01       	movw	r30, r28
    7a64:	01 90       	ld	r0, Z+
    7a66:	00 20       	and	r0, r0
    7a68:	e9 f7       	brne	.-6      	; 0x7a64 <Uploader_sendKey+0x5c>
    7a6a:	31 97       	sbiw	r30, 0x01	; 1
    7a6c:	ec 1b       	sub	r30, r28
    7a6e:	fd 0b       	sbc	r31, r29
    7a70:	8e 2f       	mov	r24, r30
    7a72:	8e 5f       	subi	r24, 0xFE	; 254
    7a74:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7a78:	88 23       	and	r24, r24
    7a7a:	a9 f0       	breq	.+42     	; 0x7aa6 <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendString(key,true)){
    7a7c:	ce 01       	movw	r24, r28
    7a7e:	0c c0       	rjmp	.+24     	; 0x7a98 <Uploader_sendKey+0x90>
			return false;
		}
	} else {
		if(!Debug_SendByte('K')){
    7a80:	8b e4       	ldi	r24, 0x4B	; 75
    7a82:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7a86:	88 23       	and	r24, r24
    7a88:	71 f0       	breq	.+28     	; 0x7aa6 <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendByte(0)){
    7a8a:	80 e0       	ldi	r24, 0x00	; 0
    7a8c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7a90:	88 23       	and	r24, r24
    7a92:	49 f0       	breq	.+18     	; 0x7aa6 <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendString("",true)){
    7a94:	8c e7       	ldi	r24, 0x7C	; 124
    7a96:	90 e2       	ldi	r25, 0x20	; 32
    7a98:	61 e0       	ldi	r22, 0x01	; 1
    7a9a:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7a9e:	88 23       	and	r24, r24
    7aa0:	19 f0       	breq	.+6      	; 0x7aa8 <Uploader_sendKey+0xa0>
    7aa2:	81 e0       	ldi	r24, 0x01	; 1
    7aa4:	01 c0       	rjmp	.+2      	; 0x7aa8 <Uploader_sendKey+0xa0>
    7aa6:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    7aa8:	df 91       	pop	r29
    7aaa:	cf 91       	pop	r28
    7aac:	08 95       	ret

00007aae <Uploader_sendAuthType>:
		}
	}
	return true;
}

bool Uploader_sendAuthType(void){
    7aae:	cf 93       	push	r28
    7ab0:	df 93       	push	r29
	if(authRead){
    7ab2:	80 91 86 27 	lds	r24, 0x2786
    7ab6:	88 23       	and	r24, r24
    7ab8:	01 f1       	breq	.+64     	; 0x7afa <Uploader_sendAuthType+0x4c>
		if(auth[strlen(auth)-1] < 32){
    7aba:	e4 ef       	ldi	r30, 0xF4	; 244
    7abc:	f0 e3       	ldi	r31, 0x30	; 48
    7abe:	01 90       	ld	r0, Z+
    7ac0:	00 20       	and	r0, r0
    7ac2:	e9 f7       	brne	.-6      	; 0x7abe <Uploader_sendAuthType+0x10>
    7ac4:	32 97       	sbiw	r30, 0x02	; 2
    7ac6:	80 81       	ld	r24, Z
    7ac8:	80 32       	cpi	r24, 0x20	; 32
    7aca:	08 f4       	brcc	.+2      	; 0x7ace <Uploader_sendAuthType+0x20>
			auth[strlen(auth)-1] = 0;
    7acc:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('A')){
    7ace:	81 e4       	ldi	r24, 0x41	; 65
    7ad0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7ad4:	88 23       	and	r24, r24
    7ad6:	21 f1       	breq	.+72     	; 0x7b20 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendByte(strlen(auth)+2)){
    7ad8:	c4 ef       	ldi	r28, 0xF4	; 244
    7ada:	d0 e3       	ldi	r29, 0x30	; 48
    7adc:	fe 01       	movw	r30, r28
    7ade:	01 90       	ld	r0, Z+
    7ae0:	00 20       	and	r0, r0
    7ae2:	e9 f7       	brne	.-6      	; 0x7ade <Uploader_sendAuthType+0x30>
    7ae4:	31 97       	sbiw	r30, 0x01	; 1
    7ae6:	ec 1b       	sub	r30, r28
    7ae8:	fd 0b       	sbc	r31, r29
    7aea:	8e 2f       	mov	r24, r30
    7aec:	8e 5f       	subi	r24, 0xFE	; 254
    7aee:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7af2:	88 23       	and	r24, r24
    7af4:	a9 f0       	breq	.+42     	; 0x7b20 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendString(auth,true)){
    7af6:	ce 01       	movw	r24, r28
    7af8:	0c c0       	rjmp	.+24     	; 0x7b12 <Uploader_sendAuthType+0x64>
			return false;
		}
	} else {
		if(!Debug_SendByte('A')){
    7afa:	81 e4       	ldi	r24, 0x41	; 65
    7afc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7b00:	88 23       	and	r24, r24
    7b02:	71 f0       	breq	.+28     	; 0x7b20 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendByte(0)){
    7b04:	80 e0       	ldi	r24, 0x00	; 0
    7b06:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7b0a:	88 23       	and	r24, r24
    7b0c:	49 f0       	breq	.+18     	; 0x7b20 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendString("",true)){
    7b0e:	8c e7       	ldi	r24, 0x7C	; 124
    7b10:	90 e2       	ldi	r25, 0x20	; 32
    7b12:	61 e0       	ldi	r22, 0x01	; 1
    7b14:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7b18:	88 23       	and	r24, r24
    7b1a:	19 f0       	breq	.+6      	; 0x7b22 <Uploader_sendAuthType+0x74>
    7b1c:	81 e0       	ldi	r24, 0x01	; 1
    7b1e:	01 c0       	rjmp	.+2      	; 0x7b22 <Uploader_sendAuthType+0x74>
    7b20:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    7b22:	df 91       	pop	r29
    7b24:	cf 91       	pop	r28
    7b26:	08 95       	ret

00007b28 <Uploader_sendSSID>:
    }
	return true;
}


bool Uploader_sendSSID(void){
    7b28:	cf 93       	push	r28
    7b2a:	df 93       	push	r29
	if(ssidRead){
    7b2c:	80 91 89 27 	lds	r24, 0x2789
    7b30:	88 23       	and	r24, r24
    7b32:	01 f1       	breq	.+64     	; 0x7b74 <Uploader_sendSSID+0x4c>
		if(ssid[strlen(ssid)-1] < 32){
    7b34:	e1 e3       	ldi	r30, 0x31	; 49
    7b36:	fc e2       	ldi	r31, 0x2C	; 44
    7b38:	01 90       	ld	r0, Z+
    7b3a:	00 20       	and	r0, r0
    7b3c:	e9 f7       	brne	.-6      	; 0x7b38 <Uploader_sendSSID+0x10>
    7b3e:	32 97       	sbiw	r30, 0x02	; 2
    7b40:	80 81       	ld	r24, Z
    7b42:	80 32       	cpi	r24, 0x20	; 32
    7b44:	08 f4       	brcc	.+2      	; 0x7b48 <Uploader_sendSSID+0x20>
			ssid[strlen(ssid)-1] = 0;
    7b46:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('S')){
    7b48:	83 e5       	ldi	r24, 0x53	; 83
    7b4a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7b4e:	88 23       	and	r24, r24
    7b50:	21 f1       	breq	.+72     	; 0x7b9a <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendByte(strlen(ssid)+2)){
    7b52:	c1 e3       	ldi	r28, 0x31	; 49
    7b54:	dc e2       	ldi	r29, 0x2C	; 44
    7b56:	fe 01       	movw	r30, r28
    7b58:	01 90       	ld	r0, Z+
    7b5a:	00 20       	and	r0, r0
    7b5c:	e9 f7       	brne	.-6      	; 0x7b58 <Uploader_sendSSID+0x30>
    7b5e:	31 97       	sbiw	r30, 0x01	; 1
    7b60:	ec 1b       	sub	r30, r28
    7b62:	fd 0b       	sbc	r31, r29
    7b64:	8e 2f       	mov	r24, r30
    7b66:	8e 5f       	subi	r24, 0xFE	; 254
    7b68:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7b6c:	88 23       	and	r24, r24
    7b6e:	a9 f0       	breq	.+42     	; 0x7b9a <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendString(ssid,true)){
    7b70:	ce 01       	movw	r24, r28
    7b72:	0c c0       	rjmp	.+24     	; 0x7b8c <Uploader_sendSSID+0x64>
			return false;
		}
	} else {
		if(!Debug_SendByte('S')){
    7b74:	83 e5       	ldi	r24, 0x53	; 83
    7b76:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7b7a:	88 23       	and	r24, r24
    7b7c:	71 f0       	breq	.+28     	; 0x7b9a <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendByte(0)){
    7b7e:	80 e0       	ldi	r24, 0x00	; 0
    7b80:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7b84:	88 23       	and	r24, r24
    7b86:	49 f0       	breq	.+18     	; 0x7b9a <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendString("",true)){
    7b88:	8c e7       	ldi	r24, 0x7C	; 124
    7b8a:	90 e2       	ldi	r25, 0x20	; 32
    7b8c:	61 e0       	ldi	r22, 0x01	; 1
    7b8e:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7b92:	88 23       	and	r24, r24
    7b94:	19 f0       	breq	.+6      	; 0x7b9c <Uploader_sendSSID+0x74>
    7b96:	81 e0       	ldi	r24, 0x01	; 1
    7b98:	01 c0       	rjmp	.+2      	; 0x7b9c <Uploader_sendSSID+0x74>
    7b9a:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    7b9c:	df 91       	pop	r29
    7b9e:	cf 91       	pop	r28
    7ba0:	08 95       	ret

00007ba2 <Uploader_sendFilename>:
		return false;
	}
	return true;
}

bool Uploader_sendFilename(void){
    7ba2:	1f 93       	push	r17
    if(!Debug_SendByte('F')){
    7ba4:	86 e4       	ldi	r24, 0x46	; 70
    7ba6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7baa:	88 23       	and	r24, r24
    7bac:	09 f4       	brne	.+2      	; 0x7bb0 <Uploader_sendFilename+0xe>
    7bae:	42 c0       	rjmp	.+132    	; 0x7c34 <Uploader_sendFilename+0x92>
		return false;
	}
	
    okToOpenDirectory = true;
    7bb0:	81 e0       	ldi	r24, 0x01	; 1
    7bb2:	80 93 a8 27 	sts	0x27A8, r24
    while(okToOpenDirectory);
    7bb6:	80 91 a8 27 	lds	r24, 0x27A8
    7bba:	88 23       	and	r24, r24
    7bbc:	e1 f7       	brne	.-8      	; 0x7bb6 <Uploader_sendFilename+0x14>
	
    while(true){
        okToGrabNextFileName = true;
    7bbe:	11 e0       	ldi	r17, 0x01	; 1
    7bc0:	10 93 a9 27 	sts	0x27A9, r17
        while(okToGrabNextFileName);
    7bc4:	80 91 a9 27 	lds	r24, 0x27A9
    7bc8:	88 23       	and	r24, r24
    7bca:	e1 f7       	brne	.-8      	; 0x7bc4 <Uploader_sendFilename+0x22>
		if(availableFileName[0] == 0){
    7bcc:	80 91 0e 58 	lds	r24, 0x580E
    7bd0:	88 23       	and	r24, r24
    7bd2:	49 f4       	brne	.+18     	; 0x7be6 <Uploader_sendFilename+0x44>
            if(!Debug_SendString("",true)){
    7bd4:	8c e7       	ldi	r24, 0x7C	; 124
    7bd6:	90 e2       	ldi	r25, 0x20	; 32
    7bd8:	61 e0       	ldi	r22, 0x01	; 1
    7bda:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7bde:	88 23       	and	r24, r24
    7be0:	51 f1       	breq	.+84     	; 0x7c36 <Uploader_sendFilename+0x94>
    7be2:	81 e0       	ldi	r24, 0x01	; 1
    7be4:	28 c0       	rjmp	.+80     	; 0x7c36 <Uploader_sendFilename+0x94>
				return false;
			}
            return true;
        } else {
			if(recording){
    7be6:	80 91 61 27 	lds	r24, 0x2761
    7bea:	88 23       	and	r24, r24
    7bec:	79 f0       	breq	.+30     	; 0x7c0c <Uploader_sendFilename+0x6a>
				if((strcasecmp(currentLogFile,availableFileName)) != 0){		// file is NOT the current file
    7bee:	81 e9       	ldi	r24, 0x91	; 145
    7bf0:	90 e3       	ldi	r25, 0x30	; 48
    7bf2:	6e e0       	ldi	r22, 0x0E	; 14
    7bf4:	78 e5       	ldi	r23, 0x58	; 88
    7bf6:	0e 94 81 46 	call	0x8d02	; 0x8d02 <strcasecmp>
    7bfa:	89 2b       	or	r24, r25
    7bfc:	09 f3       	breq	.-62     	; 0x7bc0 <Uploader_sendFilename+0x1e>
			    	if(strcasestr(availableFileName,".BT") != NULL){						// file has .bt extension
    7bfe:	8e e0       	ldi	r24, 0x0E	; 14
    7c00:	98 e5       	ldi	r25, 0x58	; 88
    7c02:	6d e7       	ldi	r22, 0x7D	; 125
    7c04:	70 e2       	ldi	r23, 0x20	; 32
    7c06:	0e 94 94 46 	call	0x8d28	; 0x8d28 <strcasestr>
    7c0a:	06 c0       	rjmp	.+12     	; 0x7c18 <Uploader_sendFilename+0x76>
							return false;
						}
					}
				}
			} else {
				if(strcasestr(availableFileName,".BT") != NULL){						// file has .bt extension
    7c0c:	8e e0       	ldi	r24, 0x0E	; 14
    7c0e:	98 e5       	ldi	r25, 0x58	; 88
    7c10:	6d e7       	ldi	r22, 0x7D	; 125
    7c12:	70 e2       	ldi	r23, 0x20	; 32
    7c14:	0e 94 94 46 	call	0x8d28	; 0x8d28 <strcasestr>
    7c18:	89 2b       	or	r24, r25
    7c1a:	91 f2       	breq	.-92     	; 0x7bc0 <Uploader_sendFilename+0x1e>
					if(!Debug_SendString(availableFileName,false)){
    7c1c:	8e e0       	ldi	r24, 0x0E	; 14
    7c1e:	98 e5       	ldi	r25, 0x58	; 88
    7c20:	60 e0       	ldi	r22, 0x00	; 0
    7c22:	0e 94 9d 3b 	call	0x773a	; 0x773a <Debug_SendString>
    7c26:	88 23       	and	r24, r24
    7c28:	29 f0       	breq	.+10     	; 0x7c34 <Uploader_sendFilename+0x92>
						return false;
					}
					if(!Debug_SendByte(',')){
    7c2a:	8c e2       	ldi	r24, 0x2C	; 44
    7c2c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7c30:	88 23       	and	r24, r24
    7c32:	31 f6       	brne	.-116    	; 0x7bc0 <Uploader_sendFilename+0x1e>
    7c34:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
			}
        }
    }
}
    7c36:	1f 91       	pop	r17
    7c38:	08 95       	ret

00007c3a <Uploader_Update>:
	//Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
	//Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);



	if(Debug_writeLocation == Debug_readLocation){
    7c3a:	20 91 7b 27 	lds	r18, 0x277B
    7c3e:	30 91 7c 27 	lds	r19, 0x277C
    7c42:	80 91 79 27 	lds	r24, 0x2779
    7c46:	90 91 7a 27 	lds	r25, 0x277A
    7c4a:	28 17       	cp	r18, r24
    7c4c:	39 07       	cpc	r19, r25
    7c4e:	09 f0       	breq	.+2      	; 0x7c52 <Uploader_Update+0x18>
    7c50:	7e c0       	rjmp	.+252    	; 0x7d4e <Uploader_Update+0x114>
    7c52:	63 c0       	rjmp	.+198    	; 0x7d1a <Uploader_Update+0xe0>
		
		timeOutCounter = 0;
		command[0] = Debug_GetByte(false);
		
		if(command[0] == 'T'){									// supply the time
			if(Uploader_getTime()){
    7c54:	0e 94 66 32 	call	0x64cc	; 0x64cc <Uploader_getTime>
    7c58:	88 23       	and	r24, r24
    7c5a:	f1 f0       	breq	.+60     	; 0x7c98 <Uploader_Update+0x5e>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    7c5c:	80 91 21 04 	lds	r24, 0x0421
    7c60:	80 61       	ori	r24, 0x10	; 16
    7c62:	e0 e2       	ldi	r30, 0x20	; 32
    7c64:	f4 e0       	ldi	r31, 0x04	; 4
    7c66:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    7c68:	80 91 21 04 	lds	r24, 0x0421
    7c6c:	84 fd       	sbrc	r24, 4
    7c6e:	fc cf       	rjmp	.-8      	; 0x7c68 <Uploader_Update+0x2e>
	return RTC32.CNT;
    7c70:	80 91 24 04 	lds	r24, 0x0424
    7c74:	90 91 25 04 	lds	r25, 0x0425
    7c78:	a0 91 26 04 	lds	r26, 0x0426
    7c7c:	b0 91 27 04 	lds	r27, 0x0427
				UNIX_Time = Time_Get();
    7c80:	80 93 81 27 	sts	0x2781, r24
    7c84:	90 93 82 27 	sts	0x2782, r25
    7c88:	a0 93 83 27 	sts	0x2783, r26
    7c8c:	b0 93 84 27 	sts	0x2784, r27
				timeIsValid = true;				
    7c90:	81 e0       	ldi	r24, 0x01	; 1
    7c92:	80 93 b3 27 	sts	0x27B3, r24
    7c96:	41 c0       	rjmp	.+130    	; 0x7d1a <Uploader_Update+0xe0>
			} else {
				timeIsValid = false;
    7c98:	10 92 b3 27 	sts	0x27B3, r1
    7c9c:	55 c0       	rjmp	.+170    	; 0x7d48 <Uploader_Update+0x10e>
				return false;
			}
		} else if(command[0] == 'S'){                          // request SSID
    7c9e:	83 35       	cpi	r24, 0x53	; 83
    7ca0:	19 f4       	brne	.+6      	; 0x7ca8 <Uploader_Update+0x6e>
			if(!Uploader_sendSSID()){
    7ca2:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <Uploader_sendSSID>
    7ca6:	2c c0       	rjmp	.+88     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'A'){                          // request authorization type
    7ca8:	81 34       	cpi	r24, 0x41	; 65
    7caa:	19 f4       	brne	.+6      	; 0x7cb2 <Uploader_Update+0x78>
			if(!Uploader_sendAuthType()){
    7cac:	0e 94 57 3d 	call	0x7aae	; 0x7aae <Uploader_sendAuthType>
    7cb0:	27 c0       	rjmp	.+78     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'K'){                          // request authorisation key
    7cb2:	8b 34       	cpi	r24, 0x4B	; 75
    7cb4:	19 f4       	brne	.+6      	; 0x7cbc <Uploader_Update+0x82>
			if(!Uploader_sendKey()){
    7cb6:	0e 94 04 3d 	call	0x7a08	; 0x7a08 <Uploader_sendKey>
    7cba:	22 c0       	rjmp	.+68     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'U'){                          // request user
    7cbc:	85 35       	cpi	r24, 0x55	; 85
    7cbe:	19 f4       	brne	.+6      	; 0x7cc6 <Uploader_Update+0x8c>
			if(!Uploader_sendUser()){
    7cc0:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <Uploader_sendUser>
    7cc4:	1d c0       	rjmp	.+58     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'N'){                           // request nickname
    7cc6:	8e 34       	cpi	r24, 0x4E	; 78
    7cc8:	19 f4       	brne	.+6      	; 0x7cd0 <Uploader_Update+0x96>
			if(!Uploader_sendNickname()){
    7cca:	0e 94 ac 3c 	call	0x7958	; 0x7958 <Uploader_sendNickname>
    7cce:	18 c0       	rjmp	.+48     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'F'){                           // request filename
    7cd0:	86 34       	cpi	r24, 0x46	; 70
    7cd2:	19 f4       	brne	.+6      	; 0x7cda <Uploader_Update+0xa0>
			if(!Uploader_sendFilename()){
    7cd4:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <Uploader_sendFilename>
    7cd8:	13 c0       	rjmp	.+38     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'D'){                           // request data from file
    7cda:	84 34       	cpi	r24, 0x44	; 68
    7cdc:	19 f4       	brne	.+6      	; 0x7ce4 <Uploader_Update+0xaa>
			if(!Uploader_uploadFile()){
    7cde:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <Uploader_uploadFile>
    7ce2:	0e c0       	rjmp	.+28     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'E'){							// erase file
    7ce4:	85 34       	cpi	r24, 0x45	; 69
    7ce6:	19 f4       	brne	.+6      	; 0x7cee <Uploader_Update+0xb4>
			if(!Uploader_eraseFile()){
    7ce8:	0e 94 c4 32 	call	0x6588	; 0x6588 <Uploader_eraseFile>
    7cec:	09 c0       	rjmp	.+18     	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'V'){							// request server for post
    7cee:	86 35       	cpi	r24, 0x56	; 86
    7cf0:	19 f4       	brne	.+6      	; 0x7cf8 <Uploader_Update+0xbe>
			if(!Uploader_sendServer()){
    7cf2:	0e 94 80 3c 	call	0x7900	; 0x7900 <Uploader_sendServer>
    7cf6:	04 c0       	rjmp	.+8      	; 0x7d00 <Uploader_Update+0xc6>
				return false;
			}
		} else if(command[0] == 'O'){							// request port for post
    7cf8:	8f 34       	cpi	r24, 0x4F	; 79
    7cfa:	29 f4       	brne	.+10     	; 0x7d06 <Uploader_Update+0xcc>
			if(!Uploader_sendPort()){
    7cfc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <Uploader_sendPort>
    7d00:	88 23       	and	r24, r24
    7d02:	59 f4       	brne	.+22     	; 0x7d1a <Uploader_Update+0xe0>
    7d04:	21 c0       	rjmp	.+66     	; 0x7d48 <Uploader_Update+0x10e>
				return false;
			}
		}  else if(command[0] == 'R'){							// reset
    7d06:	82 35       	cpi	r24, 0x52	; 82
    7d08:	41 f4       	brne	.+16     	; 0x7d1a <Uploader_Update+0xe0>
    7d0a:	80 e0       	ldi	r24, 0x00	; 0
    7d0c:	98 e4       	ldi	r25, 0x48	; 72
    7d0e:	01 97       	sbiw	r24, 0x01	; 1
    7d10:	f1 f7       	brne	.-4      	; 0x7d0e <Uploader_Update+0xd4>
			_delay_ms(5);
			Debug_SendByte('R');
    7d12:	82 e5       	ldi	r24, 0x52	; 82
    7d14:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Debug_SendByte>
    7d18:	17 c0       	rjmp	.+46     	; 0x7d48 <Uploader_Update+0x10e>
    7d1a:	86 e6       	ldi	r24, 0x66	; 102
    7d1c:	9e e0       	ldi	r25, 0x0E	; 14
    7d1e:	01 97       	sbiw	r24, 0x01	; 1
    7d20:	f1 f7       	brne	.-4      	; 0x7d1e <Uploader_Update+0xe4>
			return false;
		}
	}
	_delay_ms(1);
	timeOutCounter++;
    7d22:	80 91 97 27 	lds	r24, 0x2797
    7d26:	90 91 98 27 	lds	r25, 0x2798
    7d2a:	01 96       	adiw	r24, 0x01	; 1
    7d2c:	80 93 97 27 	sts	0x2797, r24
    7d30:	90 93 98 27 	sts	0x2798, r25
	if(timeOutCounter > 30000){
    7d34:	80 91 97 27 	lds	r24, 0x2797
    7d38:	90 91 98 27 	lds	r25, 0x2798
    7d3c:	20 e0       	ldi	r18, 0x00	; 0
    7d3e:	81 53       	subi	r24, 0x31	; 49
    7d40:	95 47       	sbci	r25, 0x75	; 117
    7d42:	18 f4       	brcc	.+6      	; 0x7d4a <Uploader_Update+0x110>
    7d44:	21 e0       	ldi	r18, 0x01	; 1
    7d46:	01 c0       	rjmp	.+2      	; 0x7d4a <Uploader_Update+0x110>
    7d48:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}
	return true;
}
    7d4a:	82 2f       	mov	r24, r18
    7d4c:	08 95       	ret


bool Uploader_Update(void){
	if(Debug_CharReadyToRead()){
		
		timeOutCounter = 0;
    7d4e:	10 92 97 27 	sts	0x2797, r1
    7d52:	10 92 98 27 	sts	0x2798, r1
		command[0] = Debug_GetByte(false);
    7d56:	80 e0       	ldi	r24, 0x00	; 0
    7d58:	0e 94 b0 01 	call	0x360	; 0x360 <Debug_GetByte>
    7d5c:	80 93 2c 31 	sts	0x312C, r24
		
		if(command[0] == 'T'){									// supply the time
    7d60:	84 35       	cpi	r24, 0x54	; 84
    7d62:	09 f0       	breq	.+2      	; 0x7d66 <Uploader_Update+0x12c>
    7d64:	9c cf       	rjmp	.-200    	; 0x7c9e <Uploader_Update+0x64>
    7d66:	76 cf       	rjmp	.-276    	; 0x7c54 <Uploader_Update+0x1a>

00007d68 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    7d68:	0f 93       	push	r16
    7d6a:	1f 93       	push	r17
	fileName[0] = '/';
    7d6c:	00 ee       	ldi	r16, 0xE0	; 224
    7d6e:	10 e3       	ldi	r17, 0x30	; 48
    7d70:	2f e2       	ldi	r18, 0x2F	; 47
    7d72:	20 93 e0 30 	sts	0x30E0, r18
	ltoa(var, fileName+1, 16);
    7d76:	a8 01       	movw	r20, r16
    7d78:	4f 5f       	subi	r20, 0xFF	; 255
    7d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d7c:	20 e1       	ldi	r18, 0x10	; 16
    7d7e:	30 e0       	ldi	r19, 0x00	; 0
    7d80:	0e 94 40 47 	call	0x8e80	; 0x8e80 <ltoa>
	strcat(fileName, ".bt");
    7d84:	c8 01       	movw	r24, r16
    7d86:	61 e8       	ldi	r22, 0x81	; 129
    7d88:	70 e2       	ldi	r23, 0x20	; 32
    7d8a:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
}
    7d8e:	1f 91       	pop	r17
    7d90:	0f 91       	pop	r16
    7d92:	08 95       	ret

00007d94 <SD_Open>:
	Button_Port.PIN4CTRL =  PORT_OPC_WIREDORPULL_gc;
	return tmp;
}


uint8_t SD_Open(char string []){
    7d94:	cf 93       	push	r28
    7d96:	df 93       	push	r29
    7d98:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    7d9a:	81 e9       	ldi	r24, 0x91	; 145
    7d9c:	90 e3       	ldi	r25, 0x30	; 48
    7d9e:	be 01       	movw	r22, r28
    7da0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
	strupr(currentLogFile);
    7da4:	81 e9       	ldi	r24, 0x91	; 145
    7da6:	90 e3       	ldi	r25, 0x30	; 48
    7da8:	0e 94 15 47 	call	0x8e2a	; 0x8e2a <strupr>
    7dac:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    7dae:	a1 e9       	ldi	r26, 0x91	; 145
    7db0:	b0 e3       	ldi	r27, 0x30	; 48
    7db2:	07 c0       	rjmp	.+14     	; 0x7dc2 <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    7db4:	fc 01       	movw	r30, r24
    7db6:	ef 56       	subi	r30, 0x6F	; 111
    7db8:	ff 4c       	sbci	r31, 0xCF	; 207
    7dba:	80 81       	ld	r24, Z
    7dbc:	31 97       	sbiw	r30, 0x01	; 1
    7dbe:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    7dc0:	2f 5f       	subi	r18, 0xFF	; 255
    7dc2:	fd 01       	movw	r30, r26
    7dc4:	01 90       	ld	r0, Z+
    7dc6:	00 20       	and	r0, r0
    7dc8:	e9 f7       	brne	.-6      	; 0x7dc4 <SD_Open+0x30>
    7dca:	31 97       	sbiw	r30, 0x01	; 1
    7dcc:	e1 59       	subi	r30, 0x91	; 145
    7dce:	f0 43       	sbci	r31, 0x30	; 48
    7dd0:	82 2f       	mov	r24, r18
    7dd2:	90 e0       	ldi	r25, 0x00	; 0
    7dd4:	8e 17       	cp	r24, r30
    7dd6:	9f 07       	cpc	r25, r31
    7dd8:	68 f3       	brcs	.-38     	; 0x7db4 <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    7dda:	e0 57       	subi	r30, 0x70	; 112
    7ddc:	ff 4c       	sbci	r31, 0xCF	; 207
    7dde:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    7de0:	89 ec       	ldi	r24, 0xC9	; 201
    7de2:	9b e4       	ldi	r25, 0x4B	; 75
    7de4:	be 01       	movw	r22, r28
    7de6:	43 e1       	ldi	r20, 0x13	; 19
    7de8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <f_open>
}
    7dec:	df 91       	pop	r29
    7dee:	cf 91       	pop	r28
    7df0:	08 95       	ret

00007df2 <SD_StartLogFile>:
        strcpy(fileToUpload,"");
        okToEraseFile = false;
	}
}

uint8_t SD_StartLogFile(uint32_t time){
    7df2:	ff 92       	push	r15
    7df4:	0f 93       	push	r16
    7df6:	1f 93       	push	r17
    7df8:	cf 93       	push	r28
    7dfa:	df 93       	push	r29
	uint8_t resp;
	uint16_t length;
	
	length = StartFileLength;			
	length += strlen(DeviceClass);
	length += strlen(deviceID);
    7dfc:	04 eb       	ldi	r16, 0xB4	; 180
    7dfe:	17 e3       	ldi	r17, 0x37	; 55
    7e00:	e8 01       	movw	r28, r16
    7e02:	09 90       	ld	r0, Y+
    7e04:	00 20       	and	r0, r0
    7e06:	e9 f7       	brne	.-6      	; 0x7e02 <SD_StartLogFile+0x10>
    7e08:	21 97       	sbiw	r28, 0x01	; 1
    7e0a:	c0 1b       	sub	r28, r16
    7e0c:	d1 0b       	sbc	r29, r17
	length += strlen(FirmwareVersion);
	length += strlen(HardwareVersion);
	
	SD_MakeFileName(time);
    7e0e:	0e 94 b4 3e 	call	0x7d68	; 0x7d68 <SD_MakeFileName>
	resp = SD_Open(fileName);
    7e12:	80 ee       	ldi	r24, 0xE0	; 224
    7e14:	90 e3       	ldi	r25, 0x30	; 48
    7e16:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <SD_Open>
    7e1a:	f8 2e       	mov	r15, r24
	if(resp != FR_OK){
    7e1c:	88 23       	and	r24, r24
    7e1e:	09 f0       	breq	.+2      	; 0x7e22 <SD_StartLogFile+0x30>
    7e20:	98 c0       	rjmp	.+304    	; 0x7f52 <SD_StartLogFile+0x160>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7e22:	8f ef       	ldi	r24, 0xFF	; 255
    7e24:	9f ef       	ldi	r25, 0xFF	; 255
    7e26:	af ef       	ldi	r26, 0xFF	; 255
    7e28:	bf ef       	ldi	r27, 0xFF	; 255
    7e2a:	80 93 0a 58 	sts	0x580A, r24
    7e2e:	90 93 0b 58 	sts	0x580B, r25
    7e32:	a0 93 0c 58 	sts	0x580C, r26
    7e36:	b0 93 0d 58 	sts	0x580D, r27
	    return resp;
	}
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);           // magic number
    7e3a:	6c e4       	ldi	r22, 0x4C	; 76
    7e3c:	74 e7       	ldi	r23, 0x74	; 116
    7e3e:	8e ed       	ldi	r24, 0xDE	; 222
    7e40:	90 eb       	ldi	r25, 0xB0	; 176
    7e42:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(length);					// record size
    7e46:	be 01       	movw	r22, r28
    7e48:	6a 52       	subi	r22, 0x2A	; 42
    7e4a:	7e 4f       	sbci	r23, 0xFE	; 254
    7e4c:	80 e0       	ldi	r24, 0x00	; 0
    7e4e:	90 e0       	ldi	r25, 0x00	; 0
    7e50:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 	// record type
    7e54:	81 e0       	ldi	r24, 0x01	; 1
    7e56:	90 e0       	ldi	r25, 0x00	; 0
    7e58:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
					// **** payload ****
	SD_Write16(0x0100);					// protocol version
    7e5c:	80 e0       	ldi	r24, 0x00	; 0
    7e5e:	91 e0       	ldi	r25, 0x01	; 1
    7e60:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	SD_Write8(0x02);					// time protocol
    7e64:	82 e0       	ldi	r24, 0x02	; 2
    7e66:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());	// time
    7e6a:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    7e6e:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write32(542535);					// picoseconds per tick (48bit)
    7e72:	67 e4       	ldi	r22, 0x47	; 71
    7e74:	77 e4       	ldi	r23, 0x47	; 71
    7e76:	88 e0       	ldi	r24, 0x08	; 8
    7e78:	90 e0       	ldi	r25, 0x00	; 0
    7e7a:	0e 94 9b 2c 	call	0x5936	; 0x5936 <SD_Write32>
	SD_Write16(0);
    7e7e:	80 e0       	ldi	r24, 0x00	; 0
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	0e 94 b5 2c 	call	0x596a	; 0x596a <SD_Write16>
	
	SD_WriteString("device_class");
    7e86:	85 e8       	ldi	r24, 0x85	; 133
    7e88:	90 e2       	ldi	r25, 0x20	; 32
    7e8a:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7e8e:	89 e0       	ldi	r24, 0x09	; 9
    7e90:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString(DeviceClass);
    7e94:	82 e9       	ldi	r24, 0x92	; 146
    7e96:	90 e2       	ldi	r25, 0x20	; 32
    7e98:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7e9c:	8a e0       	ldi	r24, 0x0A	; 10
    7e9e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	
	SD_WriteString("device_id");
    7ea2:	8d e9       	ldi	r24, 0x9D	; 157
    7ea4:	90 e2       	ldi	r25, 0x20	; 32
    7ea6:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7eaa:	89 e0       	ldi	r24, 0x09	; 9
    7eac:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString(deviceID);                                         
    7eb0:	c8 01       	movw	r24, r16
    7eb2:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7eb6:	8a e0       	ldi	r24, 0x0A	; 10
    7eb8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	
	SD_WriteString("firmware_version");
    7ebc:	87 ea       	ldi	r24, 0xA7	; 167
    7ebe:	90 e2       	ldi	r25, 0x20	; 32
    7ec0:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7ec4:	89 e0       	ldi	r24, 0x09	; 9
    7ec6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString(FirmwareVersion);
    7eca:	88 eb       	ldi	r24, 0xB8	; 184
    7ecc:	90 e2       	ldi	r25, 0x20	; 32
    7ece:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7ed2:	8a e0       	ldi	r24, 0x0A	; 10
    7ed4:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	
	SD_WriteString("hardware_version");
    7ed8:	8d eb       	ldi	r24, 0xBD	; 189
    7eda:	90 e2       	ldi	r25, 0x20	; 32
    7edc:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7ee0:	89 e0       	ldi	r24, 0x09	; 9
    7ee2:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString(HardwareVersion);
    7ee6:	8e ec       	ldi	r24, 0xCE	; 206
    7ee8:	90 e2       	ldi	r25, 0x20	; 32
    7eea:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7eee:	8a e0       	ldi	r24, 0x0A	; 10
    7ef0:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	
	SD_WriteString("channel_specs");
    7ef4:	80 ed       	ldi	r24, 0xD0	; 208
    7ef6:	90 e2       	ldi	r25, 0x20	; 32
    7ef8:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x09);
    7efc:	89 e0       	ldi	r24, 0x09	; 9
    7efe:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"bits\", \"scale\": 1},");					// 45
    7f02:	8e ed       	ldi	r24, 0xDE	; 222
    7f04:	90 e2       	ldi	r25, 0x20	; 32
    7f06:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_WriteString("\"Respiration\":{\"units\": \"bits\", \"scale\": 1},");						// 44
    7f0a:	8c e0       	ldi	r24, 0x0C	; 12
    7f0c:	91 e2       	ldi	r25, 0x21	; 33
    7f0e:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_WriteString("\"EKG\":{\"units\": \"bits\", \"scale\": -1},");							// 37
    7f12:	89 e3       	ldi	r24, 0x39	; 57
    7f14:	91 e2       	ldi	r25, 0x21	; 33
    7f16:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 0.1},");						// 42
    7f1a:	8f e5       	ldi	r24, 0x5F	; 95
    7f1c:	91 e2       	ldi	r25, 0x21	; 33
    7f1e:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_WriteString("\"Accel_X\":{\"units\": \"bits\", \"offset\": -1024, \"scale\": 0.004},");	// 61
    7f22:	8a e8       	ldi	r24, 0x8A	; 138
    7f24:	91 e2       	ldi	r25, 0x21	; 33
    7f26:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_WriteString("\"Accel_Y\":{\"units\": \"bits\", \"offset\": -1024, \"scale\": 0.004},");	// 61
    7f2a:	88 ec       	ldi	r24, 0xC8	; 200
    7f2c:	91 e2       	ldi	r25, 0x21	; 33
    7f2e:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_WriteString("\"Accel_Z\":{\"units\": \"bits\", \"offset\": -1024, \"scale\": 0.004}}");	// 61
    7f32:	86 e0       	ldi	r24, 0x06	; 6
    7f34:	92 e2       	ldi	r25, 0x22	; 34
    7f36:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <SD_WriteString>
	SD_Write8(0x0A);
    7f3a:	8a e0       	ldi	r24, 0x0A	; 10
    7f3c:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	SD_Write8(0x00);
    7f40:	80 e0       	ldi	r24, 0x00	; 0
    7f42:	0e 94 c0 2c 	call	0x5980	; 0x5980 <SD_Write8>
	
	SD_WriteCRC();						
    7f46:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <SD_WriteCRC>
	
	f_sync(&Log_File);
    7f4a:	89 ec       	ldi	r24, 0xC9	; 201
    7f4c:	9b e4       	ldi	r25, 0x4B	; 75
    7f4e:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
	
	return resp;
}
    7f52:	8f 2d       	mov	r24, r15
    7f54:	df 91       	pop	r29
    7f56:	cf 91       	pop	r28
    7f58:	1f 91       	pop	r17
    7f5a:	0f 91       	pop	r16
    7f5c:	ff 90       	pop	r15
    7f5e:	08 95       	ret

00007f60 <__vector_53>:
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
	
}

ISR(SD_Writer_Timer_vect)
{	
    7f60:	1f 92       	push	r1
    7f62:	0f 92       	push	r0
    7f64:	0f b6       	in	r0, 0x3f	; 63
    7f66:	0f 92       	push	r0
    7f68:	0b b6       	in	r0, 0x3b	; 59
    7f6a:	0f 92       	push	r0
    7f6c:	11 24       	eor	r1, r1
    7f6e:	ef 92       	push	r14
    7f70:	ff 92       	push	r15
    7f72:	0f 93       	push	r16
    7f74:	1f 93       	push	r17
    7f76:	2f 93       	push	r18
    7f78:	3f 93       	push	r19
    7f7a:	4f 93       	push	r20
    7f7c:	5f 93       	push	r21
    7f7e:	6f 93       	push	r22
    7f80:	7f 93       	push	r23
    7f82:	8f 93       	push	r24
    7f84:	9f 93       	push	r25
    7f86:	af 93       	push	r26
    7f88:	bf 93       	push	r27
    7f8a:	ef 93       	push	r30
    7f8c:	ff 93       	push	r31
    7f8e:	df 93       	push	r29
    7f90:	cf 93       	push	r28
    7f92:	0f 92       	push	r0
    7f94:	0f 92       	push	r0
    7f96:	cd b7       	in	r28, 0x3d	; 61
    7f98:	de b7       	in	r29, 0x3e	; 62
	if(recording){
    7f9a:	80 91 61 27 	lds	r24, 0x2761
    7f9e:	88 23       	and	r24, r24
    7fa0:	09 f4       	brne	.+2      	; 0x7fa4 <__vector_53+0x44>
    7fa2:	98 c0       	rjmp	.+304    	; 0x80d4 <__vector_53+0x174>
		for(uint8_t i = 0; i < accelNumberOfBuffers; i++){
			if(okToSendAccelBuffer[i]){
    7fa4:	80 91 26 31 	lds	r24, 0x3126
    7fa8:	88 23       	and	r24, r24
    7faa:	29 f0       	breq	.+10     	; 0x7fb6 <__vector_53+0x56>
				SD_WriteAccelBuffer(i);
    7fac:	80 e0       	ldi	r24, 0x00	; 0
    7fae:	0e 94 4f 39 	call	0x729e	; 0x729e <SD_WriteAccelBuffer>
				okToSendAccelBuffer[i] = false;
    7fb2:	10 92 26 31 	sts	0x3126, r1

ISR(SD_Writer_Timer_vect)
{	
	if(recording){
		for(uint8_t i = 0; i < accelNumberOfBuffers; i++){
			if(okToSendAccelBuffer[i]){
    7fb6:	80 91 27 31 	lds	r24, 0x3127
    7fba:	88 23       	and	r24, r24
    7fbc:	29 f0       	breq	.+10     	; 0x7fc8 <__vector_53+0x68>
				SD_WriteAccelBuffer(i);
    7fbe:	81 e0       	ldi	r24, 0x01	; 1
    7fc0:	0e 94 4f 39 	call	0x729e	; 0x729e <SD_WriteAccelBuffer>
				okToSendAccelBuffer[i] = false;
    7fc4:	10 92 27 31 	sts	0x3127, r1
			}
		}
	
		for(uint8_t i = 0; i < EKGNumberOfBuffers; i++){
			if(okToSendEKGBuffer[i]){
    7fc8:	80 91 e7 50 	lds	r24, 0x50E7
    7fcc:	88 23       	and	r24, r24
    7fce:	29 f0       	breq	.+10     	; 0x7fda <__vector_53+0x7a>
				SD_WriteEKGBuffer(i);
    7fd0:	80 e0       	ldi	r24, 0x00	; 0
    7fd2:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <SD_WriteEKGBuffer>
				okToSendEKGBuffer[i] = false;
    7fd6:	10 92 e7 50 	sts	0x50E7, r1
				okToSendAccelBuffer[i] = false;
			}
		}
	
		for(uint8_t i = 0; i < EKGNumberOfBuffers; i++){
			if(okToSendEKGBuffer[i]){
    7fda:	80 91 e8 50 	lds	r24, 0x50E8
    7fde:	88 23       	and	r24, r24
    7fe0:	29 f0       	breq	.+10     	; 0x7fec <__vector_53+0x8c>
				SD_WriteEKGBuffer(i);
    7fe2:	81 e0       	ldi	r24, 0x01	; 1
    7fe4:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <SD_WriteEKGBuffer>
				okToSendEKGBuffer[i] = false;
    7fe8:	10 92 e8 50 	sts	0x50E8, r1
				okToSendAccelBuffer[i] = false;
			}
		}
	
		for(uint8_t i = 0; i < EKGNumberOfBuffers; i++){
			if(okToSendEKGBuffer[i]){
    7fec:	80 91 e9 50 	lds	r24, 0x50E9
    7ff0:	88 23       	and	r24, r24
    7ff2:	29 f0       	breq	.+10     	; 0x7ffe <__vector_53+0x9e>
				SD_WriteEKGBuffer(i);
    7ff4:	82 e0       	ldi	r24, 0x02	; 2
    7ff6:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <SD_WriteEKGBuffer>
				okToSendEKGBuffer[i] = false;
    7ffa:	10 92 e9 50 	sts	0x50E9, r1
			}
		}
		
		for(uint8_t i = 0; i < respirationNumberOfBuffers; i++){
			if(okToSendRespirationBuffer[i]){
    7ffe:	80 91 66 30 	lds	r24, 0x3066
    8002:	88 23       	and	r24, r24
    8004:	29 f0       	breq	.+10     	; 0x8010 <__vector_53+0xb0>
				SD_WriteRespirationBuffer(i);
    8006:	80 e0       	ldi	r24, 0x00	; 0
    8008:	0e 94 55 3a 	call	0x74aa	; 0x74aa <SD_WriteRespirationBuffer>
				okToSendRespirationBuffer[i] = false;
    800c:	10 92 66 30 	sts	0x3066, r1
				okToSendEKGBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < respirationNumberOfBuffers; i++){
			if(okToSendRespirationBuffer[i]){
    8010:	80 91 67 30 	lds	r24, 0x3067
    8014:	88 23       	and	r24, r24
    8016:	29 f0       	breq	.+10     	; 0x8022 <__vector_53+0xc2>
				SD_WriteRespirationBuffer(i);
    8018:	81 e0       	ldi	r24, 0x01	; 1
    801a:	0e 94 55 3a 	call	0x74aa	; 0x74aa <SD_WriteRespirationBuffer>
				okToSendRespirationBuffer[i] = false;
    801e:	10 92 67 30 	sts	0x3067, r1
				okToSendEKGBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < respirationNumberOfBuffers; i++){
			if(okToSendRespirationBuffer[i]){
    8022:	80 91 68 30 	lds	r24, 0x3068
    8026:	88 23       	and	r24, r24
    8028:	29 f0       	breq	.+10     	; 0x8034 <__vector_53+0xd4>
				SD_WriteRespirationBuffer(i);
    802a:	82 e0       	ldi	r24, 0x02	; 2
    802c:	0e 94 55 3a 	call	0x74aa	; 0x74aa <SD_WriteRespirationBuffer>
				okToSendRespirationBuffer[i] = false;
    8030:	10 92 68 30 	sts	0x3068, r1
			}
		}
		
		for(uint8_t i = 0; i < temperatureNumberOfBuffers; i++){
			if(okToSendTemperatureBuffer[i]){
    8034:	80 91 08 58 	lds	r24, 0x5808
    8038:	88 23       	and	r24, r24
    803a:	29 f0       	breq	.+10     	; 0x8046 <__vector_53+0xe6>
				SD_WriteTemperatureBuffer(i);
    803c:	80 e0       	ldi	r24, 0x00	; 0
    803e:	0e 94 33 3b 	call	0x7666	; 0x7666 <SD_WriteTemperatureBuffer>
				okToSendTemperatureBuffer[i] = false;
    8042:	10 92 08 58 	sts	0x5808, r1
				okToSendRespirationBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < temperatureNumberOfBuffers; i++){
			if(okToSendTemperatureBuffer[i]){
    8046:	80 91 09 58 	lds	r24, 0x5809
    804a:	88 23       	and	r24, r24
    804c:	29 f0       	breq	.+10     	; 0x8058 <__vector_53+0xf8>
				SD_WriteTemperatureBuffer(i);
    804e:	81 e0       	ldi	r24, 0x01	; 1
    8050:	0e 94 33 3b 	call	0x7666	; 0x7666 <SD_WriteTemperatureBuffer>
				okToSendTemperatureBuffer[i] = false;
    8054:	10 92 09 58 	sts	0x5809, r1
			}
		}
		
		for(uint8_t i = 0; i < humidityNumberOfBuffers; i++){
			if(okToSendHumidityBuffer[i]){
    8058:	80 91 0e 38 	lds	r24, 0x380E
    805c:	88 23       	and	r24, r24
    805e:	29 f0       	breq	.+10     	; 0x806a <__vector_53+0x10a>
				SD_WriteHumidityBuffer(i);
    8060:	80 e0       	ldi	r24, 0x00	; 0
    8062:	0e 94 c9 3a 	call	0x7592	; 0x7592 <SD_WriteHumidityBuffer>
				okToSendHumidityBuffer[i] = false;
    8066:	10 92 0e 38 	sts	0x380E, r1
				okToSendTemperatureBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < humidityNumberOfBuffers; i++){
			if(okToSendHumidityBuffer[i]){
    806a:	80 91 0f 38 	lds	r24, 0x380F
    806e:	88 23       	and	r24, r24
    8070:	29 f0       	breq	.+10     	; 0x807c <__vector_53+0x11c>
				SD_WriteHumidityBuffer(i);
    8072:	81 e0       	ldi	r24, 0x01	; 1
    8074:	0e 94 c9 3a 	call	0x7592	; 0x7592 <SD_WriteHumidityBuffer>
				okToSendHumidityBuffer[i] = false;
    8078:	10 92 0f 38 	sts	0x380F, r1
			}
		}
		
		
		if(okToSendRTCBlock){
    807c:	80 91 71 27 	lds	r24, 0x2771
    8080:	88 23       	and	r24, r24
    8082:	41 f1       	breq	.+80     	; 0x80d4 <__vector_53+0x174>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    8084:	80 91 21 04 	lds	r24, 0x0421
    8088:	80 61       	ori	r24, 0x10	; 16
    808a:	e0 e2       	ldi	r30, 0x20	; 32
    808c:	f4 e0       	ldi	r31, 0x04	; 4
    808e:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    8090:	80 91 21 04 	lds	r24, 0x0421
    8094:	84 fd       	sbrc	r24, 4
    8096:	fc cf       	rjmp	.-8      	; 0x8090 <__vector_53+0x130>
	return RTC32.CNT;
    8098:	80 91 24 04 	lds	r24, 0x0424
    809c:	90 91 25 04 	lds	r25, 0x0425
    80a0:	a0 91 26 04 	lds	r26, 0x0426
    80a4:	b0 91 27 04 	lds	r27, 0x0427
			UNIX_Time = Time_Get();
    80a8:	80 93 81 27 	sts	0x2781, r24
    80ac:	90 93 82 27 	sts	0x2782, r25
    80b0:	a0 93 83 27 	sts	0x2783, r26
    80b4:	b0 93 84 27 	sts	0x2784, r27
			SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    80b8:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    80bc:	20 91 81 27 	lds	r18, 0x2781
    80c0:	30 91 82 27 	lds	r19, 0x2782
    80c4:	40 91 83 27 	lds	r20, 0x2783
    80c8:	50 91 84 27 	lds	r21, 0x2784
    80cc:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <SD_WriteRTCBlock>
			okToSendRTCBlock = false;
    80d0:	10 92 71 27 	sts	0x2771, r1
	
	
	

	
	if(okToOpenLogFile && (percentDiskUsed < 950)){
    80d4:	80 91 b4 27 	lds	r24, 0x27B4
    80d8:	88 23       	and	r24, r24
    80da:	09 f4       	brne	.+2      	; 0x80de <__vector_53+0x17e>
    80dc:	4b c0       	rjmp	.+150    	; 0x8174 <__vector_53+0x214>
    80de:	80 91 c2 27 	lds	r24, 0x27C2
    80e2:	90 91 c3 27 	lds	r25, 0x27C3
    80e6:	a0 91 c4 27 	lds	r26, 0x27C4
    80ea:	b0 91 c5 27 	lds	r27, 0x27C5
    80ee:	86 5b       	subi	r24, 0xB6	; 182
    80f0:	93 40       	sbci	r25, 0x03	; 3
    80f2:	a0 40       	sbci	r26, 0x00	; 0
    80f4:	b0 40       	sbci	r27, 0x00	; 0
    80f6:	08 f0       	brcs	.+2      	; 0x80fa <__vector_53+0x19a>
    80f8:	3d c0       	rjmp	.+122    	; 0x8174 <__vector_53+0x214>
		if(SD_StartLogFile(UNIX_Time) == FR_OK){  // open file
    80fa:	60 91 81 27 	lds	r22, 0x2781
    80fe:	70 91 82 27 	lds	r23, 0x2782
    8102:	80 91 83 27 	lds	r24, 0x2783
    8106:	90 91 84 27 	lds	r25, 0x2784
    810a:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <SD_StartLogFile>
    810e:	88 23       	and	r24, r24
    8110:	79 f5       	brne	.+94     	; 0x8170 <__vector_53+0x210>
    8112:	88 ee       	ldi	r24, 0xE8	; 232
    8114:	93 e0       	ldi	r25, 0x03	; 3
    8116:	20 e7       	ldi	r18, 0x70	; 112
    8118:	31 e0       	ldi	r19, 0x01	; 1
    811a:	f9 01       	movw	r30, r18
    811c:	31 97       	sbiw	r30, 0x01	; 1
    811e:	f1 f7       	brne	.-4      	; 0x811c <__vector_53+0x1bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8122:	d9 f7       	brne	.-10     	; 0x811a <__vector_53+0x1ba>
			_delay_ms(100);
			
			lengthOfCurrentFile = 0;	
    8124:	10 92 b8 27 	sts	0x27B8, r1
    8128:	10 92 b9 27 	sts	0x27B9, r1
			
		    timeRecordingStarted = UNIX_Time;
    812c:	80 91 81 27 	lds	r24, 0x2781
    8130:	90 91 82 27 	lds	r25, 0x2782
    8134:	a0 91 83 27 	lds	r26, 0x2783
    8138:	b0 91 84 27 	lds	r27, 0x2784
    813c:	80 93 73 27 	sts	0x2773, r24
    8140:	90 93 74 27 	sts	0x2774, r25
    8144:	a0 93 75 27 	sts	0x2775, r26
    8148:	b0 93 76 27 	sts	0x2776, r27
		    SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    814c:	0e 94 16 03 	call	0x62c	; 0x62c <Time_Get32BitTimer>
    8150:	20 91 81 27 	lds	r18, 0x2781
    8154:	30 91 82 27 	lds	r19, 0x2782
    8158:	40 91 83 27 	lds	r20, 0x2783
    815c:	50 91 84 27 	lds	r21, 0x2784
    8160:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <SD_WriteRTCBlock>
			
		    recording = true;
    8164:	81 e0       	ldi	r24, 0x01	; 1
    8166:	80 93 61 27 	sts	0x2761, r24
		    okToOpenLogFile = false;
    816a:	10 92 b4 27 	sts	0x27B4, r1
    816e:	02 c0       	rjmp	.+4      	; 0x8174 <__vector_53+0x214>
		} else {
		    SD_Init();
    8170:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <SD_Init>
		}
	}
	
	if(okToCloseLogFile){
    8174:	80 91 b6 27 	lds	r24, 0x27B6
    8178:	88 23       	and	r24, r24
    817a:	21 f0       	breq	.+8      	; 0x8184 <__vector_53+0x224>
		SD_Close();
    817c:	0e 94 2c 2c 	call	0x5858	; 0x5858 <SD_Close>
		okToCloseLogFile = false;
    8180:	10 92 b6 27 	sts	0x27B6, r1
	}
	
	if(okToOpenDirectory){
    8184:	80 91 a8 27 	lds	r24, 0x27A8
    8188:	88 23       	and	r24, r24
    818a:	41 f0       	breq	.+16     	; 0x819c <__vector_53+0x23c>
        f_opendir(&dir, "/");
    818c:	81 eb       	ldi	r24, 0xB1	; 177
    818e:	9e e4       	ldi	r25, 0x4E	; 78
    8190:	64 e4       	ldi	r22, 0x44	; 68
    8192:	72 e2       	ldi	r23, 0x22	; 34
    8194:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <f_opendir>
        okToOpenDirectory = false;
    8198:	10 92 a8 27 	sts	0x27A8, r1
	}
	
	if(okToGrabNextFileName){
    819c:	80 91 a9 27 	lds	r24, 0x27A9
    81a0:	88 23       	and	r24, r24
    81a2:	19 f1       	breq	.+70     	; 0x81ea <__vector_53+0x28a>
        availableFileName[0] = 0;
    81a4:	10 92 0e 58 	sts	0x580E, r1
        if((f_readdir(&dir, &fno) == FR_OK)){
    81a8:	81 eb       	ldi	r24, 0xB1	; 177
    81aa:	9e e4       	ldi	r25, 0x4E	; 78
    81ac:	68 ec       	ldi	r22, 0xC8	; 200
    81ae:	70 e3       	ldi	r23, 0x30	; 48
    81b0:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <f_readdir>
    81b4:	88 23       	and	r24, r24
    81b6:	69 f4       	brne	.+26     	; 0x81d2 <__vector_53+0x272>
            if(fno.fname[0] != 0){
    81b8:	80 91 d1 30 	lds	r24, 0x30D1
    81bc:	88 23       	and	r24, r24
    81be:	31 f0       	breq	.+12     	; 0x81cc <__vector_53+0x26c>
                strcpy(availableFileName,fno.fname);
    81c0:	8e e0       	ldi	r24, 0x0E	; 14
    81c2:	98 e5       	ldi	r25, 0x58	; 88
    81c4:	61 ed       	ldi	r22, 0xD1	; 209
    81c6:	70 e3       	ldi	r23, 0x30	; 48
    81c8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
	        }
	        okToGrabNextFileName = false;
    81cc:	10 92 a9 27 	sts	0x27A9, r1
    81d0:	0c c0       	rjmp	.+24     	; 0x81ea <__vector_53+0x28a>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    81d2:	80 91 8b 27 	lds	r24, 0x278B
        } else if(SD_Inserted()){
    81d6:	88 23       	and	r24, r24
    81d8:	41 f0       	breq	.+16     	; 0x81ea <__vector_53+0x28a>
            SD_Init();
    81da:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <SD_Init>
            f_opendir(&dir, "/");
    81de:	81 eb       	ldi	r24, 0xB1	; 177
    81e0:	9e e4       	ldi	r25, 0x4E	; 78
    81e2:	64 e4       	ldi	r22, 0x44	; 68
    81e4:	72 e2       	ldi	r23, 0x22	; 34
    81e6:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <f_opendir>
        }
	}
	
	if(okToOpenFileToUpload){
    81ea:	80 91 ac 27 	lds	r24, 0x27AC
    81ee:	88 23       	and	r24, r24
    81f0:	91 f1       	breq	.+100    	; 0x8256 <__vector_53+0x2f6>
		f_stat(fileToUpload,&fno);
    81f2:	87 e5       	ldi	r24, 0x57	; 87
    81f4:	90 e3       	ldi	r25, 0x30	; 48
    81f6:	68 ec       	ldi	r22, 0xC8	; 200
    81f8:	70 e3       	ldi	r23, 0x30	; 48
    81fa:	0e 94 40 20 	call	0x4080	; 0x4080 <f_stat>
		uploadFileSize = fno.fsize;
    81fe:	80 91 c8 30 	lds	r24, 0x30C8
    8202:	90 91 c9 30 	lds	r25, 0x30C9
    8206:	a0 91 ca 30 	lds	r26, 0x30CA
    820a:	b0 91 cb 30 	lds	r27, 0x30CB
    820e:	80 93 99 27 	sts	0x2799, r24
    8212:	90 93 9a 27 	sts	0x279A, r25
    8216:	a0 93 9b 27 	sts	0x279B, r26
    821a:	b0 93 9c 27 	sts	0x279C, r27
		
		if(f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_EXISTING) == FR_OK){
    821e:	87 ec       	ldi	r24, 0xC7	; 199
    8220:	9e e4       	ldi	r25, 0x4E	; 78
    8222:	67 e5       	ldi	r22, 0x57	; 87
    8224:	70 e3       	ldi	r23, 0x30	; 48
    8226:	43 e0       	ldi	r20, 0x03	; 3
    8228:	0e 94 22 17 	call	0x2e44	; 0x2e44 <f_open>
    822c:	88 23       	and	r24, r24
    822e:	21 f4       	brne	.+8      	; 0x8238 <__vector_53+0x2d8>
			fileExists = true;
    8230:	81 e0       	ldi	r24, 0x01	; 1
    8232:	80 93 b2 27 	sts	0x27B2, r24
    8236:	02 c0       	rjmp	.+4      	; 0x823c <__vector_53+0x2dc>
		} else {
			fileExists = false;
    8238:	10 92 b2 27 	sts	0x27B2, r1
		}
		f_lseek(&Upload_File, 0);
    823c:	87 ec       	ldi	r24, 0xC7	; 199
    823e:	9e e4       	ldi	r25, 0x4E	; 78
    8240:	40 e0       	ldi	r20, 0x00	; 0
    8242:	50 e0       	ldi	r21, 0x00	; 0
    8244:	60 e0       	ldi	r22, 0x00	; 0
    8246:	70 e0       	ldi	r23, 0x00	; 0
    8248:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <f_lseek>
		uploadFileOpened = true;
    824c:	81 e0       	ldi	r24, 0x01	; 1
    824e:	80 93 ad 27 	sts	0x27AD, r24
		okToOpenFileToUpload = false;
    8252:	10 92 ac 27 	sts	0x27AC, r1
	}
	
    if(okToFillUploadFileBuffer){
    8256:	80 91 ae 27 	lds	r24, 0x27AE
    825a:	88 23       	and	r24, r24
    825c:	81 f0       	breq	.+32     	; 0x827e <__vector_53+0x31e>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    825e:	87 ec       	ldi	r24, 0xC7	; 199
    8260:	9e e4       	ldi	r25, 0x4E	; 78
    8262:	65 e6       	ldi	r22, 0x65	; 101
    8264:	7c e2       	ldi	r23, 0x2C	; 44
    8266:	48 ee       	ldi	r20, 0xE8	; 232
    8268:	53 e0       	ldi	r21, 0x03	; 3
    826a:	9e 01       	movw	r18, r28
    826c:	2f 5f       	subi	r18, 0xFF	; 255
    826e:	3f 4f       	sbci	r19, 0xFF	; 255
    8270:	0e 94 97 18 	call	0x312e	; 0x312e <f_read>
        okToFillUploadFileBuffer = false;
    8274:	10 92 ae 27 	sts	0x27AE, r1
        uploadFileBufferFull = true;
    8278:	81 e0       	ldi	r24, 0x01	; 1
    827a:	80 93 af 27 	sts	0x27AF, r24
    }
	
	
	if(okToCloseUploadFile){
    827e:	80 91 b0 27 	lds	r24, 0x27B0
    8282:	88 23       	and	r24, r24
    8284:	81 f0       	breq	.+32     	; 0x82a6 <__vector_53+0x346>
	    f_sync(&Upload_File);
    8286:	87 ec       	ldi	r24, 0xC7	; 199
    8288:	9e e4       	ldi	r25, 0x4E	; 78
    828a:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <f_sync>
	    f_close(&Upload_File);
    828e:	87 ec       	ldi	r24, 0xC7	; 199
    8290:	9e e4       	ldi	r25, 0x4E	; 78
    8292:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <f_close>
	    strcpy(fileToUpload,"");
    8296:	87 e5       	ldi	r24, 0x57	; 87
    8298:	90 e3       	ldi	r25, 0x30	; 48
    829a:	6c e7       	ldi	r22, 0x7C	; 124
    829c:	70 e2       	ldi	r23, 0x20	; 32
    829e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
		okToCloseUploadFile = false;
    82a2:	10 92 b0 27 	sts	0x27B0, r1
	}
	
	if(okToGetRemainingSpace){
    82a6:	80 91 35 38 	lds	r24, 0x3835
    82aa:	88 23       	and	r24, r24
    82ac:	09 f4       	brne	.+2      	; 0x82b0 <__vector_53+0x350>
    82ae:	46 c0       	rjmp	.+140    	; 0x833c <__vector_53+0x3dc>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    82b0:	83 e3       	ldi	r24, 0x33	; 51
    82b2:	90 e2       	ldi	r25, 0x20	; 32
    82b4:	6a eb       	ldi	r22, 0xBA	; 186
    82b6:	77 e2       	ldi	r23, 0x27	; 39
    82b8:	4e ed       	ldi	r20, 0xDE	; 222
    82ba:	50 e3       	ldi	r21, 0x30	; 48
    82bc:	0e 94 7f 20 	call	0x40fe	; 0x40fe <f_getfree>
    82c0:	88 23       	and	r24, r24
    82c2:	41 f0       	breq	.+16     	; 0x82d4 <__vector_53+0x374>
			spaceRemainingOnDisk = 0;
    82c4:	10 92 ba 27 	sts	0x27BA, r1
    82c8:	10 92 bb 27 	sts	0x27BB, r1
    82cc:	10 92 bc 27 	sts	0x27BC, r1
    82d0:	10 92 bd 27 	sts	0x27BD, r1
	    }
	    totalDiskSpace = fs->max_clust;
    82d4:	e0 91 de 30 	lds	r30, 0x30DE
    82d8:	f0 91 df 30 	lds	r31, 0x30DF
    82dc:	e2 8c       	ldd	r14, Z+26	; 0x1a
    82de:	f3 8c       	ldd	r15, Z+27	; 0x1b
    82e0:	04 8d       	ldd	r16, Z+28	; 0x1c
    82e2:	15 8d       	ldd	r17, Z+29	; 0x1d
    82e4:	e0 92 be 27 	sts	0x27BE, r14
    82e8:	f0 92 bf 27 	sts	0x27BF, r15
    82ec:	00 93 c0 27 	sts	0x27C0, r16
    82f0:	10 93 c1 27 	sts	0x27C1, r17
		
        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
    82f4:	80 91 ba 27 	lds	r24, 0x27BA
    82f8:	90 91 bb 27 	lds	r25, 0x27BB
    82fc:	a0 91 bc 27 	lds	r26, 0x27BC
    8300:	b0 91 bd 27 	lds	r27, 0x27BD
    8304:	a8 01       	movw	r20, r16
    8306:	97 01       	movw	r18, r14
    8308:	28 1b       	sub	r18, r24
    830a:	39 0b       	sbc	r19, r25
    830c:	4a 0b       	sbc	r20, r26
    830e:	5b 0b       	sbc	r21, r27
    8310:	ca 01       	movw	r24, r20
    8312:	b9 01       	movw	r22, r18
    8314:	28 ee       	ldi	r18, 0xE8	; 232
    8316:	33 e0       	ldi	r19, 0x03	; 3
    8318:	40 e0       	ldi	r20, 0x00	; 0
    831a:	50 e0       	ldi	r21, 0x00	; 0
    831c:	0e 94 02 46 	call	0x8c04	; 0x8c04 <__mulsi3>
	    percentDiskUsed /= totalDiskSpace;
    8320:	a8 01       	movw	r20, r16
    8322:	97 01       	movw	r18, r14
    8324:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    8328:	20 93 c2 27 	sts	0x27C2, r18
    832c:	30 93 c3 27 	sts	0x27C3, r19
    8330:	40 93 c4 27 	sts	0x27C4, r20
    8334:	50 93 c5 27 	sts	0x27C5, r21
		
	    okToGetRemainingSpace = false;
    8338:	10 92 35 38 	sts	0x3835, r1
	}
	
	if(okToEraseFile){
    833c:	80 91 b1 27 	lds	r24, 0x27B1
    8340:	88 23       	and	r24, r24
    8342:	71 f0       	breq	.+28     	; 0x8360 <__vector_53+0x400>
        eraseFileReturn = f_unlink(fileToErase);
    8344:	8a ee       	ldi	r24, 0xEA	; 234
    8346:	90 e5       	ldi	r25, 0x50	; 80
    8348:	0e 94 32 22 	call	0x4464	; 0x4464 <f_unlink>
    834c:	80 93 46 46 	sts	0x4646, r24
        strcpy(fileToUpload,"");
    8350:	87 e5       	ldi	r24, 0x57	; 87
    8352:	90 e3       	ldi	r25, 0x30	; 48
    8354:	6c e7       	ldi	r22, 0x7C	; 124
    8356:	70 e2       	ldi	r23, 0x20	; 32
    8358:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
        okToEraseFile = false;
    835c:	10 92 b1 27 	sts	0x27B1, r1
	}
}
    8360:	0f 90       	pop	r0
    8362:	0f 90       	pop	r0
    8364:	cf 91       	pop	r28
    8366:	df 91       	pop	r29
    8368:	ff 91       	pop	r31
    836a:	ef 91       	pop	r30
    836c:	bf 91       	pop	r27
    836e:	af 91       	pop	r26
    8370:	9f 91       	pop	r25
    8372:	8f 91       	pop	r24
    8374:	7f 91       	pop	r23
    8376:	6f 91       	pop	r22
    8378:	5f 91       	pop	r21
    837a:	4f 91       	pop	r20
    837c:	3f 91       	pop	r19
    837e:	2f 91       	pop	r18
    8380:	1f 91       	pop	r17
    8382:	0f 91       	pop	r16
    8384:	ff 90       	pop	r15
    8386:	ef 90       	pop	r14
    8388:	0f 90       	pop	r0
    838a:	0b be       	out	0x3b, r0	; 59
    838c:	0f 90       	pop	r0
    838e:	0f be       	out	0x3f, r0	; 63
    8390:	0f 90       	pop	r0
    8392:	1f 90       	pop	r1
    8394:	18 95       	reti

00008396 <SD_Read_config_file>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

void SD_Read_config_file(void){
    8396:	af 92       	push	r10
    8398:	bf 92       	push	r11
    839a:	cf 92       	push	r12
    839c:	df 92       	push	r13
    839e:	ef 92       	push	r14
    83a0:	ff 92       	push	r15
    83a2:	0f 93       	push	r16
    83a4:	1f 93       	push	r17
    83a6:	df 93       	push	r29
    83a8:	cf 93       	push	r28
    83aa:	cd b7       	in	r28, 0x3d	; 61
    83ac:	de b7       	in	r29, 0x3e	; 62
    83ae:	e2 97       	sbiw	r28, 0x32	; 50
    83b0:	cd bf       	out	0x3d, r28	; 61
    83b2:	de bf       	out	0x3e, r29	; 62
	char temp [50];
	
	SD_Open("/config.txt");
    83b4:	86 e4       	ldi	r24, 0x46	; 70
    83b6:	92 e2       	ldi	r25, 0x22	; 34
    83b8:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <SD_Open>
    f_lseek(&Log_File, 0);
    83bc:	89 ec       	ldi	r24, 0xC9	; 201
    83be:	9b e4       	ldi	r25, 0x4B	; 75
    83c0:	40 e0       	ldi	r20, 0x00	; 0
    83c2:	50 e0       	ldi	r21, 0x00	; 0
    83c4:	60 e0       	ldi	r22, 0x00	; 0
    83c6:	70 e0       	ldi	r23, 0x00	; 0
    83c8:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <f_lseek>
	
	while(true){
        f_gets(temp,50,&Log_File);
    83cc:	8e 01       	movw	r16, r28
    83ce:	0f 5f       	subi	r16, 0xFF	; 255
    83d0:	1f 4f       	sbci	r17, 0xFF	; 255
            } else if(strstr(temp,"recordFast") != 0){
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
    83d2:	fa ef       	ldi	r31, 0xFA	; 250
    83d4:	ef 2e       	mov	r14, r31
    83d6:	f2 e2       	ldi	r31, 0x22	; 34
    83d8:	ff 2e       	mov	r15, r31
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
    83da:	ef e4       	ldi	r30, 0x4F	; 79
    83dc:	ce 2e       	mov	r12, r30
    83de:	e8 e5       	ldi	r30, 0x58	; 88
    83e0:	de 2e       	mov	r13, r30
				strtok(temp,"=");
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
    83e2:	7c e6       	ldi	r23, 0x6C	; 108
    83e4:	a7 2e       	mov	r10, r23
    83e6:	77 e3       	ldi	r23, 0x37	; 55
    83e8:	b7 2e       	mov	r11, r23
	
	SD_Open("/config.txt");
    f_lseek(&Log_File, 0);
	
	while(true){
        f_gets(temp,50,&Log_File);
    83ea:	c8 01       	movw	r24, r16
    83ec:	62 e3       	ldi	r22, 0x32	; 50
    83ee:	70 e0       	ldi	r23, 0x00	; 0
    83f0:	49 ec       	ldi	r20, 0xC9	; 201
    83f2:	5b e4       	ldi	r21, 0x4B	; 75
    83f4:	0e 94 94 2b 	call	0x5728	; 0x5728 <f_gets>
        if(temp[0] != 0){
    83f8:	89 81       	ldd	r24, Y+1	; 0x01
    83fa:	88 23       	and	r24, r24
    83fc:	09 f4       	brne	.+2      	; 0x8400 <SD_Read_config_file+0x6a>
    83fe:	96 c1       	rjmp	.+812    	; 0x872c <SD_Read_config_file+0x396>
            if(strstr(temp,"ssid") != 0){
    8400:	c8 01       	movw	r24, r16
    8402:	62 e5       	ldi	r22, 0x52	; 82
    8404:	72 e2       	ldi	r23, 0x22	; 34
    8406:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    840a:	00 97       	sbiw	r24, 0x00	; 0
    840c:	a1 f0       	breq	.+40     	; 0x8436 <SD_Read_config_file+0xa0>
                strtok(temp,"=");
    840e:	c8 01       	movw	r24, r16
    8410:	67 e5       	ldi	r22, 0x57	; 87
    8412:	72 e2       	ldi	r23, 0x22	; 34
    8414:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(ssid,strtok(NULL,"="));
    8418:	80 e0       	ldi	r24, 0x00	; 0
    841a:	90 e0       	ldi	r25, 0x00	; 0
    841c:	67 e5       	ldi	r22, 0x57	; 87
    841e:	72 e2       	ldi	r23, 0x22	; 34
    8420:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8424:	bc 01       	movw	r22, r24
    8426:	81 e3       	ldi	r24, 0x31	; 49
    8428:	9c e2       	ldi	r25, 0x2C	; 44
    842a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
                ssidRead = true;
    842e:	81 e0       	ldi	r24, 0x01	; 1
    8430:	80 93 89 27 	sts	0x2789, r24
    8434:	da cf       	rjmp	.-76     	; 0x83ea <SD_Read_config_file+0x54>
            } else if(strstr(temp,"phrase") != 0){
    8436:	c8 01       	movw	r24, r16
    8438:	69 e5       	ldi	r22, 0x59	; 89
    843a:	72 e2       	ldi	r23, 0x22	; 34
    843c:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    8440:	00 97       	sbiw	r24, 0x00	; 0
    8442:	a1 f0       	breq	.+40     	; 0x846c <SD_Read_config_file+0xd6>
                strtok(temp,"=");
    8444:	c8 01       	movw	r24, r16
    8446:	67 e5       	ldi	r22, 0x57	; 87
    8448:	72 e2       	ldi	r23, 0x22	; 34
    844a:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(phrase,strtok(NULL,"="));
    844e:	80 e0       	ldi	r24, 0x00	; 0
    8450:	90 e0       	ldi	r25, 0x00	; 0
    8452:	67 e5       	ldi	r22, 0x57	; 87
    8454:	72 e2       	ldi	r23, 0x22	; 34
    8456:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    845a:	bc 01       	movw	r22, r24
    845c:	89 ef       	ldi	r24, 0xF9	; 249
    845e:	9a e4       	ldi	r25, 0x4A	; 74
    8460:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
                phraseRead = true;
    8464:	81 e0       	ldi	r24, 0x01	; 1
    8466:	80 93 87 27 	sts	0x2787, r24
    846a:	bf cf       	rjmp	.-130    	; 0x83ea <SD_Read_config_file+0x54>
            } else if(strstr(temp,"key") != 0){
    846c:	c8 01       	movw	r24, r16
    846e:	60 e6       	ldi	r22, 0x60	; 96
    8470:	72 e2       	ldi	r23, 0x22	; 34
    8472:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    8476:	00 97       	sbiw	r24, 0x00	; 0
    8478:	a1 f0       	breq	.+40     	; 0x84a2 <SD_Read_config_file+0x10c>
                strtok(temp,"=");
    847a:	c8 01       	movw	r24, r16
    847c:	67 e5       	ldi	r22, 0x57	; 87
    847e:	72 e2       	ldi	r23, 0x22	; 34
    8480:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(key,strtok(NULL,"="));
    8484:	80 e0       	ldi	r24, 0x00	; 0
    8486:	90 e0       	ldi	r25, 0x00	; 0
    8488:	67 e5       	ldi	r22, 0x57	; 87
    848a:	72 e2       	ldi	r23, 0x22	; 34
    848c:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8490:	bc 01       	movw	r22, r24
    8492:	87 e9       	ldi	r24, 0x97	; 151
    8494:	9b e4       	ldi	r25, 0x4B	; 75
    8496:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
                keyRead = true;
    849a:	81 e0       	ldi	r24, 0x01	; 1
    849c:	80 93 88 27 	sts	0x2788, r24
    84a0:	a4 cf       	rjmp	.-184    	; 0x83ea <SD_Read_config_file+0x54>
            } else if(strstr(temp,"port") != 0){
    84a2:	c8 01       	movw	r24, r16
    84a4:	64 e6       	ldi	r22, 0x64	; 100
    84a6:	72 e2       	ldi	r23, 0x22	; 34
    84a8:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    84ac:	00 97       	sbiw	r24, 0x00	; 0
    84ae:	79 f0       	breq	.+30     	; 0x84ce <SD_Read_config_file+0x138>
                strtok(temp,"=");
    84b0:	c8 01       	movw	r24, r16
    84b2:	67 e5       	ldi	r22, 0x57	; 87
    84b4:	72 e2       	ldi	r23, 0x22	; 34
    84b6:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
				strcpy(port,strtok(NULL,"="));
    84ba:	80 e0       	ldi	r24, 0x00	; 0
    84bc:	90 e0       	ldi	r25, 0x00	; 0
    84be:	67 e5       	ldi	r22, 0x57	; 87
    84c0:	72 e2       	ldi	r23, 0x22	; 34
    84c2:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    84c6:	bc 01       	movw	r22, r24
    84c8:	8d e1       	ldi	r24, 0x1D	; 29
    84ca:	98 e5       	ldi	r25, 0x58	; 88
    84cc:	8c c0       	rjmp	.+280    	; 0x85e6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"auth") != 0){
    84ce:	c8 01       	movw	r24, r16
    84d0:	69 e6       	ldi	r22, 0x69	; 105
    84d2:	72 e2       	ldi	r23, 0x22	; 34
    84d4:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    84d8:	00 97       	sbiw	r24, 0x00	; 0
    84da:	a1 f0       	breq	.+40     	; 0x8504 <SD_Read_config_file+0x16e>
				strtok(temp,"=");
    84dc:	c8 01       	movw	r24, r16
    84de:	67 e5       	ldi	r22, 0x57	; 87
    84e0:	72 e2       	ldi	r23, 0x22	; 34
    84e2:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(auth,strtok(NULL,"="));
    84e6:	80 e0       	ldi	r24, 0x00	; 0
    84e8:	90 e0       	ldi	r25, 0x00	; 0
    84ea:	67 e5       	ldi	r22, 0x57	; 87
    84ec:	72 e2       	ldi	r23, 0x22	; 34
    84ee:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    84f2:	bc 01       	movw	r22, r24
    84f4:	84 ef       	ldi	r24, 0xF4	; 244
    84f6:	90 e3       	ldi	r25, 0x30	; 48
    84f8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
				authRead = true;
    84fc:	81 e0       	ldi	r24, 0x01	; 1
    84fe:	80 93 86 27 	sts	0x2786, r24
    8502:	73 cf       	rjmp	.-282    	; 0x83ea <SD_Read_config_file+0x54>
            } else if(strstr(temp,"user") != 0){
    8504:	c8 01       	movw	r24, r16
    8506:	6e e6       	ldi	r22, 0x6E	; 110
    8508:	72 e2       	ldi	r23, 0x22	; 34
    850a:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    850e:	00 97       	sbiw	r24, 0x00	; 0
    8510:	31 f1       	breq	.+76     	; 0x855e <SD_Read_config_file+0x1c8>
                strtok(temp,"=");
    8512:	c8 01       	movw	r24, r16
    8514:	67 e5       	ldi	r22, 0x57	; 87
    8516:	72 e2       	ldi	r23, 0x22	; 34
    8518:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(user,strtok(NULL,"="));
    851c:	80 e0       	ldi	r24, 0x00	; 0
    851e:	90 e0       	ldi	r25, 0x00	; 0
    8520:	67 e5       	ldi	r22, 0x57	; 87
    8522:	72 e2       	ldi	r23, 0x22	; 34
    8524:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8528:	bc 01       	movw	r22, r24
    852a:	8c e6       	ldi	r24, 0x6C	; 108
    852c:	97 e3       	ldi	r25, 0x37	; 55
    852e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
                for(uint8_t i = 0; i < strlen(user); i++){
    8532:	f5 01       	movw	r30, r10
    8534:	01 90       	ld	r0, Z+
    8536:	00 20       	and	r0, r0
    8538:	e9 f7       	brne	.-6      	; 0x8534 <SD_Read_config_file+0x19e>
    853a:	31 97       	sbiw	r30, 0x01	; 1
    853c:	ec 56       	subi	r30, 0x6C	; 108
    853e:	f7 43       	sbci	r31, 0x37	; 55
    8540:	20 e0       	ldi	r18, 0x00	; 0
    8542:	07 c0       	rjmp	.+14     	; 0x8552 <SD_Read_config_file+0x1bc>
                    if(user[i] < ' '){
    8544:	dc 01       	movw	r26, r24
    8546:	a4 59       	subi	r26, 0x94	; 148
    8548:	b8 4c       	sbci	r27, 0xC8	; 200
    854a:	8c 91       	ld	r24, X
    854c:	80 32       	cpi	r24, 0x20	; 32
    854e:	68 f1       	brcs	.+90     	; 0x85aa <SD_Read_config_file+0x214>
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(user); i++){
    8550:	2f 5f       	subi	r18, 0xFF	; 255
    8552:	82 2f       	mov	r24, r18
    8554:	90 e0       	ldi	r25, 0x00	; 0
    8556:	8e 17       	cp	r24, r30
    8558:	9f 07       	cpc	r25, r31
    855a:	a0 f3       	brcs	.-24     	; 0x8544 <SD_Read_config_file+0x1ae>
    855c:	46 cf       	rjmp	.-372    	; 0x83ea <SD_Read_config_file+0x54>
                    if(user[i] < ' '){
                        user[i] = 0;
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
    855e:	c8 01       	movw	r24, r16
    8560:	63 e7       	ldi	r22, 0x73	; 115
    8562:	72 e2       	ldi	r23, 0x22	; 34
    8564:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    8568:	00 97       	sbiw	r24, 0x00	; 0
    856a:	41 f1       	breq	.+80     	; 0x85bc <SD_Read_config_file+0x226>
                strtok(temp,"=");
    856c:	c8 01       	movw	r24, r16
    856e:	67 e5       	ldi	r22, 0x57	; 87
    8570:	72 e2       	ldi	r23, 0x22	; 34
    8572:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
	            strcpy(nickname,strtok(NULL,"="));
    8576:	80 e0       	ldi	r24, 0x00	; 0
    8578:	90 e0       	ldi	r25, 0x00	; 0
    857a:	67 e5       	ldi	r22, 0x57	; 87
    857c:	72 e2       	ldi	r23, 0x22	; 34
    857e:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8582:	bc 01       	movw	r22, r24
    8584:	8f e4       	ldi	r24, 0x4F	; 79
    8586:	98 e5       	ldi	r25, 0x58	; 88
    8588:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
                for(uint8_t i = 0; i < strlen(nickname); i++){
    858c:	f6 01       	movw	r30, r12
    858e:	01 90       	ld	r0, Z+
    8590:	00 20       	and	r0, r0
    8592:	e9 f7       	brne	.-6      	; 0x858e <SD_Read_config_file+0x1f8>
    8594:	31 97       	sbiw	r30, 0x01	; 1
    8596:	ef 54       	subi	r30, 0x4F	; 79
    8598:	f8 45       	sbci	r31, 0x58	; 88
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	09 c0       	rjmp	.+18     	; 0x85b0 <SD_Read_config_file+0x21a>
                    if(nickname[i] < ' '){
    859e:	dc 01       	movw	r26, r24
    85a0:	a1 5b       	subi	r26, 0xB1	; 177
    85a2:	b7 4a       	sbci	r27, 0xA7	; 167
    85a4:	8c 91       	ld	r24, X
    85a6:	80 32       	cpi	r24, 0x20	; 32
    85a8:	10 f4       	brcc	.+4      	; 0x85ae <SD_Read_config_file+0x218>
                        nickname[i] = 0;
    85aa:	1c 92       	st	X, r1
    85ac:	1e cf       	rjmp	.-452    	; 0x83ea <SD_Read_config_file+0x54>
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(nickname); i++){
    85ae:	2f 5f       	subi	r18, 0xFF	; 255
    85b0:	82 2f       	mov	r24, r18
    85b2:	90 e0       	ldi	r25, 0x00	; 0
    85b4:	8e 17       	cp	r24, r30
    85b6:	9f 07       	cpc	r25, r31
    85b8:	90 f3       	brcs	.-28     	; 0x859e <SD_Read_config_file+0x208>
    85ba:	17 cf       	rjmp	.-466    	; 0x83ea <SD_Read_config_file+0x54>
                        nickname[i] = 0;
                        break;
                    }
                }
				
            } else if(strstr(temp,"server") != 0){
    85bc:	c8 01       	movw	r24, r16
    85be:	6c e7       	ldi	r22, 0x7C	; 124
    85c0:	72 e2       	ldi	r23, 0x22	; 34
    85c2:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    85c6:	00 97       	sbiw	r24, 0x00	; 0
    85c8:	89 f0       	breq	.+34     	; 0x85ec <SD_Read_config_file+0x256>
                strtok(temp,"=");
    85ca:	c8 01       	movw	r24, r16
    85cc:	67 e5       	ldi	r22, 0x57	; 87
    85ce:	72 e2       	ldi	r23, 0x22	; 34
    85d0:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(server,strtok(NULL,"="));
    85d4:	80 e0       	ldi	r24, 0x00	; 0
    85d6:	90 e0       	ldi	r25, 0x00	; 0
    85d8:	67 e5       	ldi	r22, 0x57	; 87
    85da:	72 e2       	ldi	r23, 0x22	; 34
    85dc:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    85e0:	bc 01       	movw	r22, r24
    85e2:	82 e8       	ldi	r24, 0x82	; 130
    85e4:	97 e3       	ldi	r25, 0x37	; 55
    85e6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <strcpy>
    85ea:	ff ce       	rjmp	.-514    	; 0x83ea <SD_Read_config_file+0x54>
            } else if(strstr(temp,"daylightTime") != 0){
    85ec:	c8 01       	movw	r24, r16
    85ee:	63 e8       	ldi	r22, 0x83	; 131
    85f0:	72 e2       	ldi	r23, 0x22	; 34
    85f2:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    85f6:	00 97       	sbiw	r24, 0x00	; 0
    85f8:	79 f0       	breq	.+30     	; 0x8618 <SD_Read_config_file+0x282>
                strtok(temp,"=");
    85fa:	c8 01       	movw	r24, r16
    85fc:	67 e5       	ldi	r22, 0x57	; 87
    85fe:	72 e2       	ldi	r23, 0x22	; 34
    8600:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(daylightTime,strtok(NULL,"="));
    8604:	80 e0       	ldi	r24, 0x00	; 0
    8606:	90 e0       	ldi	r25, 0x00	; 0
    8608:	67 e5       	ldi	r22, 0x57	; 87
    860a:	72 e2       	ldi	r23, 0x22	; 34
    860c:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8610:	bc 01       	movw	r22, r24
    8612:	86 e2       	ldi	r24, 0x26	; 38
    8614:	98 e3       	ldi	r25, 0x38	; 56
    8616:	e7 cf       	rjmp	.-50     	; 0x85e6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"demoMode") != 0){
    8618:	c8 01       	movw	r24, r16
    861a:	60 e9       	ldi	r22, 0x90	; 144
    861c:	72 e2       	ldi	r23, 0x22	; 34
    861e:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    8622:	00 97       	sbiw	r24, 0x00	; 0
    8624:	79 f0       	breq	.+30     	; 0x8644 <SD_Read_config_file+0x2ae>
                strtok(temp,"=");
    8626:	c8 01       	movw	r24, r16
    8628:	67 e5       	ldi	r22, 0x57	; 87
    862a:	72 e2       	ldi	r23, 0x22	; 34
    862c:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(demoModeString,strtok(NULL,"="));
    8630:	80 e0       	ldi	r24, 0x00	; 0
    8632:	90 e0       	ldi	r25, 0x00	; 0
    8634:	67 e5       	ldi	r22, 0x57	; 87
    8636:	72 e2       	ldi	r23, 0x22	; 34
    8638:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    863c:	bc 01       	movw	r22, r24
    863e:	88 e7       	ldi	r24, 0x78	; 120
    8640:	97 e3       	ldi	r25, 0x37	; 55
    8642:	d1 cf       	rjmp	.-94     	; 0x85e6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"recordFast") != 0){
    8644:	c8 01       	movw	r24, r16
    8646:	69 e9       	ldi	r22, 0x99	; 153
    8648:	72 e2       	ldi	r23, 0x22	; 34
    864a:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    864e:	00 97       	sbiw	r24, 0x00	; 0
    8650:	79 f0       	breq	.+30     	; 0x8670 <SD_Read_config_file+0x2da>
                strtok(temp,"=");
    8652:	c8 01       	movw	r24, r16
    8654:	67 e5       	ldi	r22, 0x57	; 87
    8656:	72 e2       	ldi	r23, 0x22	; 34
    8658:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                strcpy(fastString,strtok(NULL,"="));
    865c:	80 e0       	ldi	r24, 0x00	; 0
    865e:	90 e0       	ldi	r25, 0x00	; 0
    8660:	67 e5       	ldi	r22, 0x57	; 87
    8662:	72 e2       	ldi	r23, 0x22	; 34
    8664:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8668:	bc 01       	movw	r22, r24
    866a:	89 ea       	ldi	r24, 0xA9	; 169
    866c:	98 e5       	ldi	r25, 0x58	; 88
    866e:	bb cf       	rjmp	.-138    	; 0x85e6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"zone") != 0){
    8670:	c8 01       	movw	r24, r16
    8672:	64 ea       	ldi	r22, 0xA4	; 164
    8674:	72 e2       	ldi	r23, 0x22	; 34
    8676:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    867a:	00 97       	sbiw	r24, 0x00	; 0
    867c:	09 f4       	brne	.+2      	; 0x8680 <SD_Read_config_file+0x2ea>
    867e:	b5 ce       	rjmp	.-662    	; 0x83ea <SD_Read_config_file+0x54>
				strtok(temp,"=");
    8680:	c8 01       	movw	r24, r16
    8682:	67 e5       	ldi	r22, 0x57	; 87
    8684:	72 e2       	ldi	r23, 0x22	; 34
    8686:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
                memmove(zone,strtok(NULL,"="),4);
    868a:	80 e0       	ldi	r24, 0x00	; 0
    868c:	90 e0       	ldi	r25, 0x00	; 0
    868e:	67 e5       	ldi	r22, 0x57	; 87
    8690:	72 e2       	ldi	r23, 0x22	; 34
    8692:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <strtok>
    8696:	bc 01       	movw	r22, r24
    8698:	8a ef       	ldi	r24, 0xFA	; 250
    869a:	92 e2       	ldi	r25, 0x22	; 34
    869c:	44 e0       	ldi	r20, 0x04	; 4
    869e:	50 e0       	ldi	r21, 0x00	; 0
    86a0:	0e 94 6f 46 	call	0x8cde	; 0x8cde <memmove>
    86a4:	20 e0       	ldi	r18, 0x00	; 0
    86a6:	08 c0       	rjmp	.+16     	; 0x86b8 <SD_Read_config_file+0x322>
                for(uint8_t i = 0;  i < strlen(zone); i++){
                    if(zone[i] < ' '){
    86a8:	fc 01       	movw	r30, r24
    86aa:	e6 50       	subi	r30, 0x06	; 6
    86ac:	fd 4d       	sbci	r31, 0xDD	; 221
    86ae:	80 81       	ld	r24, Z
    86b0:	80 32       	cpi	r24, 0x20	; 32
    86b2:	08 f4       	brcc	.+2      	; 0x86b6 <SD_Read_config_file+0x320>
                        zone[i] = 0;
    86b4:	10 82       	st	Z, r1
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
                for(uint8_t i = 0;  i < strlen(zone); i++){
    86b6:	2f 5f       	subi	r18, 0xFF	; 255
    86b8:	f7 01       	movw	r30, r14
    86ba:	01 90       	ld	r0, Z+
    86bc:	00 20       	and	r0, r0
    86be:	e9 f7       	brne	.-6      	; 0x86ba <SD_Read_config_file+0x324>
    86c0:	31 97       	sbiw	r30, 0x01	; 1
    86c2:	ea 5f       	subi	r30, 0xFA	; 250
    86c4:	f2 42       	sbci	r31, 0x22	; 34
    86c6:	82 2f       	mov	r24, r18
    86c8:	90 e0       	ldi	r25, 0x00	; 0
    86ca:	8e 17       	cp	r24, r30
    86cc:	9f 07       	cpc	r25, r31
    86ce:	60 f3       	brcs	.-40     	; 0x86a8 <SD_Read_config_file+0x312>
                    if(zone[i] < ' '){
                        zone[i] = 0;
                    }
                }
                if(strcmp(zone,"EST") == 0){
    86d0:	8a ef       	ldi	r24, 0xFA	; 250
    86d2:	92 e2       	ldi	r25, 0x22	; 34
    86d4:	69 ea       	ldi	r22, 0xA9	; 169
    86d6:	72 e2       	ldi	r23, 0x22	; 34
    86d8:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <strcmp>
    86dc:	00 97       	sbiw	r24, 0x00	; 0
    86de:	11 f4       	brne	.+4      	; 0x86e4 <SD_Read_config_file+0x34e>
                    timeZoneShift = 5;
    86e0:	85 e0       	ldi	r24, 0x05	; 5
    86e2:	1e c0       	rjmp	.+60     	; 0x8720 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"CST") == 0){
    86e4:	8a ef       	ldi	r24, 0xFA	; 250
    86e6:	92 e2       	ldi	r25, 0x22	; 34
    86e8:	6d ea       	ldi	r22, 0xAD	; 173
    86ea:	72 e2       	ldi	r23, 0x22	; 34
    86ec:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <strcmp>
    86f0:	00 97       	sbiw	r24, 0x00	; 0
    86f2:	11 f4       	brne	.+4      	; 0x86f8 <SD_Read_config_file+0x362>
                    timeZoneShift = 6;
    86f4:	86 e0       	ldi	r24, 0x06	; 6
    86f6:	14 c0       	rjmp	.+40     	; 0x8720 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"MST") == 0){
    86f8:	8a ef       	ldi	r24, 0xFA	; 250
    86fa:	92 e2       	ldi	r25, 0x22	; 34
    86fc:	61 eb       	ldi	r22, 0xB1	; 177
    86fe:	72 e2       	ldi	r23, 0x22	; 34
    8700:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <strcmp>
    8704:	00 97       	sbiw	r24, 0x00	; 0
    8706:	11 f4       	brne	.+4      	; 0x870c <SD_Read_config_file+0x376>
                    timeZoneShift = 7;
    8708:	87 e0       	ldi	r24, 0x07	; 7
    870a:	0a c0       	rjmp	.+20     	; 0x8720 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"PST") == 0){
    870c:	8a ef       	ldi	r24, 0xFA	; 250
    870e:	92 e2       	ldi	r25, 0x22	; 34
    8710:	65 eb       	ldi	r22, 0xB5	; 181
    8712:	72 e2       	ldi	r23, 0x22	; 34
    8714:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <strcmp>
    8718:	00 97       	sbiw	r24, 0x00	; 0
    871a:	09 f0       	breq	.+2      	; 0x871e <SD_Read_config_file+0x388>
    871c:	66 ce       	rjmp	.-820    	; 0x83ea <SD_Read_config_file+0x54>
                    timeZoneShift = 8;
    871e:	88 e0       	ldi	r24, 0x08	; 8
    8720:	80 93 85 27 	sts	0x2785, r24
                    zoneChanged = true;
    8724:	81 e0       	ldi	r24, 0x01	; 1
    8726:	80 93 8a 27 	sts	0x278A, r24
    872a:	5f ce       	rjmp	.-834    	; 0x83ea <SD_Read_config_file+0x54>
	        }
	    } else {
	        break;
	    }
	}
    if(server[strlen(server)-1] < 32){
    872c:	e2 e8       	ldi	r30, 0x82	; 130
    872e:	f7 e3       	ldi	r31, 0x37	; 55
    8730:	01 90       	ld	r0, Z+
    8732:	00 20       	and	r0, r0
    8734:	e9 f7       	brne	.-6      	; 0x8730 <SD_Read_config_file+0x39a>
    8736:	32 97       	sbiw	r30, 0x02	; 2
    8738:	80 81       	ld	r24, Z
    873a:	80 32       	cpi	r24, 0x20	; 32
    873c:	08 f4       	brcc	.+2      	; 0x8740 <SD_Read_config_file+0x3aa>
        server[strlen(server)-1] = 0;
    873e:	10 82       	st	Z, r1
    }
	strcat(serverOpenCommand,server);
    8740:	88 ec       	ldi	r24, 0xC8	; 200
    8742:	92 e2       	ldi	r25, 0x22	; 34
    8744:	62 e8       	ldi	r22, 0x82	; 130
    8746:	77 e3       	ldi	r23, 0x37	; 55
    8748:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
	strcat(serverOpenCommand," ");
    874c:	88 ec       	ldi	r24, 0xC8	; 200
    874e:	92 e2       	ldi	r25, 0x22	; 34
    8750:	69 eb       	ldi	r22, 0xB9	; 185
    8752:	72 e2       	ldi	r23, 0x22	; 34
    8754:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
	strcat(serverOpenCommand,port);
    8758:	88 ec       	ldi	r24, 0xC8	; 200
    875a:	92 e2       	ldi	r25, 0x22	; 34
    875c:	6d e1       	ldi	r22, 0x1D	; 29
    875e:	78 e5       	ldi	r23, 0x58	; 88
    8760:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <strcat>
	
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    8764:	86 e2       	ldi	r24, 0x26	; 38
    8766:	98 e3       	ldi	r25, 0x38	; 56
    8768:	6b eb       	ldi	r22, 0xBB	; 187
    876a:	72 e2       	ldi	r23, 0x22	; 34
    876c:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    8770:	00 97       	sbiw	r24, 0x00	; 0
    8772:	49 f0       	breq	.+18     	; 0x8786 <SD_Read_config_file+0x3f0>
    8774:	80 91 8a 27 	lds	r24, 0x278A
    8778:	88 23       	and	r24, r24
    877a:	29 f0       	breq	.+10     	; 0x8786 <SD_Read_config_file+0x3f0>
        timeZoneShift--;
    877c:	80 91 85 27 	lds	r24, 0x2785
    8780:	81 50       	subi	r24, 0x01	; 1
    8782:	80 93 85 27 	sts	0x2785, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    8786:	88 e7       	ldi	r24, 0x78	; 120
    8788:	97 e3       	ldi	r25, 0x37	; 55
    878a:	6b eb       	ldi	r22, 0xBB	; 187
    878c:	72 e2       	ldi	r23, 0x22	; 34
    878e:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    8792:	00 97       	sbiw	r24, 0x00	; 0
    8794:	19 f0       	breq	.+6      	; 0x879c <SD_Read_config_file+0x406>
        demoMode = true;
    8796:	81 e0       	ldi	r24, 0x01	; 1
    8798:	80 93 77 27 	sts	0x2777, r24
    }
    if((strstr(fastString,"true") != 0)){
    879c:	89 ea       	ldi	r24, 0xA9	; 169
    879e:	98 e5       	ldi	r25, 0x58	; 88
    87a0:	6b eb       	ldi	r22, 0xBB	; 187
    87a2:	72 e2       	ldi	r23, 0x22	; 34
    87a4:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <strstr>
    87a8:	00 97       	sbiw	r24, 0x00	; 0
    87aa:	19 f0       	breq	.+6      	; 0x87b2 <SD_Read_config_file+0x41c>
        wantToRecordFast = true;
    87ac:	81 e0       	ldi	r24, 0x01	; 1
    87ae:	80 93 60 27 	sts	0x2760, r24
    }
}
    87b2:	e2 96       	adiw	r28, 0x32	; 50
    87b4:	cd bf       	out	0x3d, r28	; 61
    87b6:	de bf       	out	0x3e, r29	; 62
    87b8:	cf 91       	pop	r28
    87ba:	df 91       	pop	r29
    87bc:	1f 91       	pop	r17
    87be:	0f 91       	pop	r16
    87c0:	ff 90       	pop	r15
    87c2:	ef 90       	pop	r14
    87c4:	df 90       	pop	r13
    87c6:	cf 90       	pop	r12
    87c8:	bf 90       	pop	r11
    87ca:	af 90       	pop	r10
    87cc:	08 95       	ret

000087ce <main>:


// ********************************** Main Program *********************************


int main(void){
    87ce:	ff 92       	push	r15
    87d0:	0f 93       	push	r16
    87d2:	1f 93       	push	r17
    87d4:	df 93       	push	r29
    87d6:	cf 93       	push	r28
    87d8:	0f 92       	push	r0
    87da:	cd b7       	in	r28, 0x3d	; 61
    87dc:	de b7       	in	r29, 0x3e	; 62
	Clock_Init();
    87de:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <Clock_Init>
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    87e2:	8f b7       	in	r24, 0x3f	; 63
    87e4:	89 83       	std	Y+1, r24	; 0x01
    cli();
    87e6:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    87e8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    87ea:	11 e0       	ldi	r17, 0x01	; 1
    87ec:	86 e9       	ldi	r24, 0x96	; 150
    87ee:	90 e0       	ldi	r25, 0x00	; 0
    87f0:	fc 01       	movw	r30, r24
    87f2:	08 ed       	ldi	r16, 0xD8	; 216
    87f4:	04 bf       	out	0x34, r16	; 52
    87f6:	10 83       	st	Z, r17
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    87f8:	89 81       	ldd	r24, Y+1	; 0x01
    87fa:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();
	getDeviceID();
    87fc:	0e 94 08 38 	call	0x7010	; 0x7010 <getDeviceID>
	Time_Init();
    8800:	0e 94 84 02 	call	0x508	; 0x508 <Time_Init>
	Sensors_Init();
    8804:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <Sensors_Init>
	Debug_Init(460800);
    8808:	60 e0       	ldi	r22, 0x00	; 0
    880a:	78 e0       	ldi	r23, 0x08	; 8
    880c:	87 e0       	ldi	r24, 0x07	; 7
    880e:	90 e0       	ldi	r25, 0x00	; 0
    8810:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_Init>
	Button_Init(Button_Pin,true,falling,0,high);
    8814:	86 e0       	ldi	r24, 0x06	; 6
    8816:	61 e0       	ldi	r22, 0x01	; 1
    8818:	42 e0       	ldi	r20, 0x02	; 2
    881a:	20 e0       	ldi	r18, 0x00	; 0
    881c:	03 e0       	ldi	r16, 0x03	; 3
    881e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <Button_Init>
	Accel_Init();
    8822:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <Accel_Init>

volatile uint8_t ledState[numberOfLeds]; 
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
    8826:	e0 ea       	ldi	r30, 0xA0	; 160
    8828:	f6 e0       	ldi	r31, 0x06	; 6
    882a:	82 e0       	ldi	r24, 0x02	; 2
    882c:	81 83       	std	Z+1, r24	; 0x01
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    882e:	10 92 77 37 	sts	0x3777, r1

volatile uint8_t ledState[numberOfLeds]; 
volatile uint8_t ledCounter[numberOfLeds];

void Leds_Init(uint8_t led){
	Leds_Port.DIRSET = (1<<led);
    8832:	11 83       	std	Z+1, r17	; 0x01
	Leds_State(led, off);
}

void Leds_State(uint8_t led, uint8_t state){
	ledState[led] = state;
    8834:	10 92 76 37 	sts	0x3776, r1
	Leds_Init(Green);
	Leds_Init(Red);
	GUI_Init();
    8838:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <GUI_Init>
	SD_BackroundWriter_Init();
    883c:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <SD_BackroundWriter_Init>
    SD_Init();
    8840:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <SD_Init>
}


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    8844:	80 91 a2 00 	lds	r24, 0x00A2
    8848:	87 60       	ori	r24, 0x07	; 7
    884a:	e0 ea       	ldi	r30, 0xA0	; 160
    884c:	f0 e0       	ldi	r31, 0x00	; 0
    884e:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    8850:	78 94       	sei
	GUI_Init();
	SD_BackroundWriter_Init();
    SD_Init();
	Interrupt_Init();
	
	if(Time_CheckVBatSystem() && (Time_Get() > 1000000)){				// grab time from rtc32 if enabled and valid
    8852:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Time_CheckVBatSystem>
    8856:	88 23       	and	r24, r24
    8858:	d1 f1       	breq	.+116    	; 0x88ce <main+0x100>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    885a:	80 91 21 04 	lds	r24, 0x0421
    885e:	80 61       	ori	r24, 0x10	; 16
    8860:	e0 e2       	ldi	r30, 0x20	; 32
    8862:	f4 e0       	ldi	r31, 0x04	; 4
    8864:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    8866:	e0 e2       	ldi	r30, 0x20	; 32
    8868:	f4 e0       	ldi	r31, 0x04	; 4
    886a:	80 91 21 04 	lds	r24, 0x0421
    886e:	84 fd       	sbrc	r24, 4
    8870:	fa cf       	rjmp	.-12     	; 0x8866 <main+0x98>
	return RTC32.CNT;
    8872:	80 91 24 04 	lds	r24, 0x0424
    8876:	90 91 25 04 	lds	r25, 0x0425
    887a:	a0 91 26 04 	lds	r26, 0x0426
    887e:	b0 91 27 04 	lds	r27, 0x0427
    8882:	81 54       	subi	r24, 0x41	; 65
    8884:	92 44       	sbci	r25, 0x42	; 66
    8886:	af 40       	sbci	r26, 0x0F	; 15
    8888:	b0 40       	sbci	r27, 0x00	; 0
    888a:	08 f1       	brcs	.+66     	; 0x88ce <main+0x100>
		timeIsValid = true;
    888c:	81 e0       	ldi	r24, 0x01	; 1
    888e:	80 93 b3 27 	sts	0x27B3, r24
		RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
    8892:	80 91 22 04 	lds	r24, 0x0422
    8896:	83 7f       	andi	r24, 0xF3	; 243
    8898:	84 60       	ori	r24, 0x04	; 4
    889a:	82 83       	std	Z+2, r24	; 0x02
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    889c:	80 91 21 04 	lds	r24, 0x0421
    88a0:	80 61       	ori	r24, 0x10	; 16
    88a2:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    88a4:	80 91 21 04 	lds	r24, 0x0421
    88a8:	84 fd       	sbrc	r24, 4
    88aa:	fc cf       	rjmp	.-8      	; 0x88a4 <main+0xd6>
	return RTC32.CNT;
    88ac:	80 91 24 04 	lds	r24, 0x0424
    88b0:	90 91 25 04 	lds	r25, 0x0425
    88b4:	a0 91 26 04 	lds	r26, 0x0426
    88b8:	b0 91 27 04 	lds	r27, 0x0427
		UNIX_Time = Time_Get();
    88bc:	80 93 81 27 	sts	0x2781, r24
    88c0:	90 93 82 27 	sts	0x2782, r25
    88c4:	a0 93 83 27 	sts	0x2783, r26
    88c8:	b0 93 84 27 	sts	0x2784, r27
    88cc:	15 c0       	rjmp	.+42     	; 0x88f8 <main+0x12a>
	} else {
		VBAT.CTRL = VBAT_ACCEN_bm;
    88ce:	82 e0       	ldi	r24, 0x02	; 2
    88d0:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    88d4:	8f b7       	in	r24, 0x3f	; 63
    88d6:	89 83       	std	Y+1, r24	; 0x01
    cli();
    88d8:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    88da:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    88dc:	21 e0       	ldi	r18, 0x01	; 1
    88de:	80 ef       	ldi	r24, 0xF0	; 240
    88e0:	90 e0       	ldi	r25, 0x00	; 0
    88e2:	fc 01       	movw	r30, r24
    88e4:	08 ed       	ldi	r16, 0xD8	; 216
    88e6:	04 bf       	out	0x34, r16	; 52
    88e8:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    88ea:	89 81       	ldd	r24, Y+1	; 0x01
    88ec:	8f bf       	out	0x3f, r24	; 63
		CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
		RTC32.CTRL = 0;								// disable RTC32
    88ee:	10 92 20 04 	sts	0x0420, r1
		RTC32.INTCTRL = 0;
    88f2:	e0 e2       	ldi	r30, 0x20	; 32
    88f4:	f4 e0       	ldi	r31, 0x04	; 4
    88f6:	12 82       	std	Z+2, r1	; 0x02
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    88f8:	80 91 8b 27 	lds	r24, 0x278B
	}
	
	while(!SD_Inserted());
    88fc:	88 23       	and	r24, r24
    88fe:	e1 f3       	breq	.-8      	; 0x88f8 <main+0x12a>
    8900:	80 e1       	ldi	r24, 0x10	; 16
    8902:	97 e2       	ldi	r25, 0x27	; 39
    8904:	20 e7       	ldi	r18, 0x70	; 112
    8906:	31 e0       	ldi	r19, 0x01	; 1
    8908:	f9 01       	movw	r30, r18
    890a:	31 97       	sbiw	r30, 0x01	; 1
    890c:	f1 f7       	brne	.-4      	; 0x890a <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    890e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8910:	d9 f7       	brne	.-10     	; 0x8908 <main+0x13a>
	_delay_ms(1000);
	
	SD_Read_config_file();
    8912:	0e 94 cb 41 	call	0x8396	; 0x8396 <SD_Read_config_file>
    8916:	28 e8       	ldi	r18, 0x88	; 136
    8918:	33 e1       	ldi	r19, 0x13	; 19
Reset:
	
	_delay_ms(500);
	connected = false;
	while(!Uploader_connectToComputer());	
	connected = true;
    891a:	ff 24       	eor	r15, r15
    891c:	f3 94       	inc	r15
    891e:	00 e7       	ldi	r16, 0x70	; 112
    8920:	11 e0       	ldi	r17, 0x01	; 1
    8922:	05 c0       	rjmp	.+10     	; 0x892e <main+0x160>
    8924:	c8 01       	movw	r24, r16
    8926:	01 97       	sbiw	r24, 0x01	; 1
    8928:	f1 f7       	brne	.-4      	; 0x8926 <main+0x158>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    892a:	21 50       	subi	r18, 0x01	; 1
    892c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    892e:	21 15       	cp	r18, r1
    8930:	31 05       	cpc	r19, r1
    8932:	c1 f7       	brne	.-16     	; 0x8924 <main+0x156>
	SD_Read_config_file();
	
Reset:
	
	_delay_ms(500);
	connected = false;
    8934:	10 92 a6 27 	sts	0x27A6, r1
	while(!Uploader_connectToComputer());	
    8938:	0e 94 d1 3b 	call	0x77a2	; 0x77a2 <Uploader_connectToComputer>
    893c:	88 23       	and	r24, r24
    893e:	e1 f3       	breq	.-8      	; 0x8938 <main+0x16a>
	connected = true;
    8940:	f0 92 a6 27 	sts	0x27A6, r15
	
    while(true){
		if(!Uploader_Update()){
    8944:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <Uploader_Update>
    8948:	88 23       	and	r24, r24
    894a:	e1 f7       	brne	.-8      	; 0x8944 <main+0x176>
    894c:	28 e8       	ldi	r18, 0x88	; 136
    894e:	33 e1       	ldi	r19, 0x13	; 19
    8950:	e9 cf       	rjmp	.-46     	; 0x8924 <main+0x156>

00008952 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    8952:	2f 92       	push	r2
    8954:	3f 92       	push	r3
    8956:	4f 92       	push	r4
    8958:	5f 92       	push	r5
    895a:	6f 92       	push	r6
    895c:	7f 92       	push	r7
    895e:	8f 92       	push	r8
    8960:	9f 92       	push	r9
    8962:	af 92       	push	r10
    8964:	bf 92       	push	r11
    8966:	cf 92       	push	r12
    8968:	df 92       	push	r13
    896a:	ef 92       	push	r14
    896c:	ff 92       	push	r15
    896e:	0f 93       	push	r16
    8970:	1f 93       	push	r17
    8972:	df 93       	push	r29
    8974:	cf 93       	push	r28
    8976:	cd b7       	in	r28, 0x3d	; 61
    8978:	de b7       	in	r29, 0x3e	; 62
    897a:	63 97       	sbiw	r28, 0x13	; 19
    897c:	cd bf       	out	0x3d, r28	; 61
    897e:	de bf       	out	0x3e, r29	; 62
    8980:	6b a4       	ldd	r6, Y+43	; 0x2b
    8982:	7c a4       	ldd	r7, Y+44	; 0x2c
    8984:	8e 01       	movw	r16, r28
    8986:	03 5d       	subi	r16, 0xD3	; 211
    8988:	1f 4f       	sbci	r17, 0xFF	; 255
    898a:	19 8a       	std	Y+17, r1	; 0x11
    898c:	1a 8a       	std	Y+18, r1	; 0x12
    898e:	20 e0       	ldi	r18, 0x00	; 0
    8990:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    8992:	d3 01       	movw	r26, r6
    8994:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    8996:	88 23       	and	r24, r24
    8998:	09 f4       	brne	.+2      	; 0x899c <f_printf+0x4a>
    899a:	17 c1       	rjmp	.+558    	; 0x8bca <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    899c:	08 94       	sec
    899e:	61 1c       	adc	r6, r1
    89a0:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    89a2:	85 32       	cpi	r24, 0x25	; 37
    89a4:	71 f0       	breq	.+28     	; 0x89c2 <f_printf+0x70>
			cc = f_putc(c, fil);
    89a6:	90 e0       	ldi	r25, 0x00	; 0
    89a8:	69 a5       	ldd	r22, Y+41	; 0x29
    89aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    89ac:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <f_putc>
    89b0:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    89b2:	bf ef       	ldi	r27, 0xFF	; 255
    89b4:	8f 3f       	cpi	r24, 0xFF	; 255
    89b6:	9b 07       	cpc	r25, r27
    89b8:	11 f4       	brne	.+4      	; 0x89be <f_printf+0x6c>
    89ba:	48 01       	movw	r8, r16
    89bc:	fa c0       	rjmp	.+500    	; 0x8bb2 <f_printf+0x260>
    89be:	48 01       	movw	r8, r16
    89c0:	4c c0       	rjmp	.+152    	; 0x8a5a <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    89c2:	d3 01       	movw	r26, r6
    89c4:	ed 91       	ld	r30, X+
    89c6:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    89c8:	e0 33       	cpi	r30, 0x30	; 48
    89ca:	11 f0       	breq	.+4      	; 0x89d0 <f_printf+0x7e>
    89cc:	1b 8a       	std	Y+19, r1	; 0x13
    89ce:	04 c0       	rjmp	.+8      	; 0x89d8 <f_printf+0x86>
			f = 1; c = *str++;
    89d0:	ed 91       	ld	r30, X+
    89d2:	3d 01       	movw	r6, r26
    89d4:	b1 e0       	ldi	r27, 0x01	; 1
    89d6:	bb 8b       	std	Y+19, r27	; 0x13
    89d8:	aa 24       	eor	r10, r10
    89da:	bb 24       	eor	r11, r11
    89dc:	13 c0       	rjmp	.+38     	; 0x8a04 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    89de:	c5 01       	movw	r24, r10
    89e0:	53 e0       	ldi	r21, 0x03	; 3
    89e2:	88 0f       	add	r24, r24
    89e4:	99 1f       	adc	r25, r25
    89e6:	5a 95       	dec	r21
    89e8:	e1 f7       	brne	.-8      	; 0x89e2 <f_printf+0x90>
    89ea:	aa 0c       	add	r10, r10
    89ec:	bb 1c       	adc	r11, r11
    89ee:	a8 0e       	add	r10, r24
    89f0:	b9 1e       	adc	r11, r25
    89f2:	ae 0e       	add	r10, r30
    89f4:	b1 1c       	adc	r11, r1
    89f6:	e0 ed       	ldi	r30, 0xD0	; 208
    89f8:	ff ef       	ldi	r31, 0xFF	; 255
    89fa:	ae 0e       	add	r10, r30
    89fc:	bf 1e       	adc	r11, r31
			c = *str++;
    89fe:	d3 01       	movw	r26, r6
    8a00:	ed 91       	ld	r30, X+
    8a02:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    8a04:	8e 2f       	mov	r24, r30
    8a06:	80 53       	subi	r24, 0x30	; 48
    8a08:	8a 30       	cpi	r24, 0x0A	; 10
    8a0a:	48 f3       	brcs	.-46     	; 0x89de <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    8a0c:	ec 36       	cpi	r30, 0x6C	; 108
    8a0e:	31 f4       	brne	.+12     	; 0x8a1c <f_printf+0xca>
			f |= 2; c = *str++;
    8a10:	bb 89       	ldd	r27, Y+19	; 0x13
    8a12:	b2 60       	ori	r27, 0x02	; 2
    8a14:	bb 8b       	std	Y+19, r27	; 0x13
    8a16:	d3 01       	movw	r26, r6
    8a18:	ed 91       	ld	r30, X+
    8a1a:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    8a1c:	e3 37       	cpi	r30, 0x73	; 115
    8a1e:	49 f4       	brne	.+18     	; 0x8a32 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    8a20:	92 e0       	ldi	r25, 0x02	; 2
    8a22:	89 2e       	mov	r8, r25
    8a24:	91 2c       	mov	r9, r1
    8a26:	80 0e       	add	r8, r16
    8a28:	91 1e       	adc	r9, r17
    8a2a:	f8 01       	movw	r30, r16
    8a2c:	80 81       	ld	r24, Z
    8a2e:	91 81       	ldd	r25, Z+1	; 0x01
    8a30:	bb c0       	rjmp	.+374    	; 0x8ba8 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    8a32:	e3 36       	cpi	r30, 0x63	; 99
    8a34:	a9 f4       	brne	.+42     	; 0x8a60 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    8a36:	82 e0       	ldi	r24, 0x02	; 2
    8a38:	88 2e       	mov	r8, r24
    8a3a:	91 2c       	mov	r9, r1
    8a3c:	80 0e       	add	r8, r16
    8a3e:	91 1e       	adc	r9, r17
    8a40:	d8 01       	movw	r26, r16
    8a42:	8d 91       	ld	r24, X+
    8a44:	9c 91       	ld	r25, X
    8a46:	69 a5       	ldd	r22, Y+41	; 0x29
    8a48:	7a a5       	ldd	r23, Y+42	; 0x2a
    8a4a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <f_putc>
    8a4e:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    8a50:	bf ef       	ldi	r27, 0xFF	; 255
    8a52:	8f 3f       	cpi	r24, 0xFF	; 255
    8a54:	9b 07       	cpc	r25, r27
    8a56:	09 f4       	brne	.+2      	; 0x8a5a <f_printf+0x108>
    8a58:	ac c0       	rjmp	.+344    	; 0x8bb2 <f_printf+0x260>
    8a5a:	21 e0       	ldi	r18, 0x01	; 1
    8a5c:	30 e0       	ldi	r19, 0x00	; 0
    8a5e:	a9 c0       	rjmp	.+338    	; 0x8bb2 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    8a60:	e4 36       	cpi	r30, 0x64	; 100
    8a62:	39 f0       	breq	.+14     	; 0x8a72 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    8a64:	e5 37       	cpi	r30, 0x75	; 117
    8a66:	29 f0       	breq	.+10     	; 0x8a72 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    8a68:	e8 35       	cpi	r30, 0x58	; 88
    8a6a:	09 f0       	breq	.+2      	; 0x8a6e <f_printf+0x11c>
    8a6c:	ae c0       	rjmp	.+348    	; 0x8bca <f_printf+0x278>
    8a6e:	20 e1       	ldi	r18, 0x10	; 16
    8a70:	01 c0       	rjmp	.+2      	; 0x8a74 <f_printf+0x122>
    8a72:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    8a74:	fb 89       	ldd	r31, Y+19	; 0x13
    8a76:	f1 ff       	sbrs	r31, 1
    8a78:	0d c0       	rjmp	.+26     	; 0x8a94 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    8a7a:	b4 e0       	ldi	r27, 0x04	; 4
    8a7c:	8b 2e       	mov	r8, r27
    8a7e:	91 2c       	mov	r9, r1
    8a80:	80 0e       	add	r8, r16
    8a82:	91 1e       	adc	r9, r17
    8a84:	d8 01       	movw	r26, r16
    8a86:	ed 90       	ld	r14, X+
    8a88:	fd 90       	ld	r15, X+
    8a8a:	0d 91       	ld	r16, X+
    8a8c:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    8a8e:	e4 36       	cpi	r30, 0x64	; 100
    8a90:	09 f5       	brne	.+66     	; 0x8ad4 <f_printf+0x182>
    8a92:	13 c0       	rjmp	.+38     	; 0x8aba <f_printf+0x168>
    8a94:	c8 01       	movw	r24, r16
    8a96:	02 96       	adiw	r24, 0x02	; 2
    8a98:	d8 01       	movw	r26, r16
    8a9a:	6d 91       	ld	r22, X+
    8a9c:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    8a9e:	e4 36       	cpi	r30, 0x64	; 100
    8aa0:	39 f4       	brne	.+14     	; 0x8ab0 <f_printf+0x15e>
    8aa2:	4c 01       	movw	r8, r24
    8aa4:	7b 01       	movw	r14, r22
    8aa6:	00 27       	eor	r16, r16
    8aa8:	f7 fc       	sbrc	r15, 7
    8aaa:	00 95       	com	r16
    8aac:	10 2f       	mov	r17, r16
    8aae:	05 c0       	rjmp	.+10     	; 0x8aba <f_printf+0x168>
    8ab0:	4c 01       	movw	r8, r24
    8ab2:	7b 01       	movw	r14, r22
    8ab4:	00 e0       	ldi	r16, 0x00	; 0
    8ab6:	10 e0       	ldi	r17, 0x00	; 0
    8ab8:	0d c0       	rjmp	.+26     	; 0x8ad4 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    8aba:	17 ff       	sbrs	r17, 7
    8abc:	0b c0       	rjmp	.+22     	; 0x8ad4 <f_printf+0x182>
				val = 0 - val;
    8abe:	10 95       	com	r17
    8ac0:	00 95       	com	r16
    8ac2:	f0 94       	com	r15
    8ac4:	e0 94       	com	r14
    8ac6:	e1 1c       	adc	r14, r1
    8ac8:	f1 1c       	adc	r15, r1
    8aca:	01 1d       	adc	r16, r1
    8acc:	11 1d       	adc	r17, r1
				f |= 4;
    8ace:	bb 89       	ldd	r27, Y+19	; 0x13
    8ad0:	b4 60       	ori	r27, 0x04	; 4
    8ad2:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    8ad4:	18 8a       	std	Y+16, r1	; 0x10
    8ad6:	af e0       	ldi	r26, 0x0F	; 15
    8ad8:	ca 2e       	mov	r12, r26
    8ada:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    8adc:	22 2e       	mov	r2, r18
    8ade:	33 24       	eor	r3, r3
    8ae0:	44 24       	eor	r4, r4
    8ae2:	55 24       	eor	r5, r5
    8ae4:	c8 01       	movw	r24, r16
    8ae6:	b7 01       	movw	r22, r14
    8ae8:	a2 01       	movw	r20, r4
    8aea:	91 01       	movw	r18, r2
    8aec:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    8af0:	86 2f       	mov	r24, r22
    8af2:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    8af4:	8a 33       	cpi	r24, 0x3A	; 58
    8af6:	08 f0       	brcs	.+2      	; 0x8afa <f_printf+0x1a8>
    8af8:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    8afa:	08 94       	sec
    8afc:	c1 08       	sbc	r12, r1
    8afe:	d1 08       	sbc	r13, r1
    8b00:	e1 e0       	ldi	r30, 0x01	; 1
    8b02:	f0 e0       	ldi	r31, 0x00	; 0
    8b04:	ec 0f       	add	r30, r28
    8b06:	fd 1f       	adc	r31, r29
    8b08:	ec 0d       	add	r30, r12
    8b0a:	fd 1d       	adc	r31, r13
    8b0c:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    8b0e:	c1 14       	cp	r12, r1
    8b10:	d1 04       	cpc	r13, r1
    8b12:	e9 f0       	breq	.+58     	; 0x8b4e <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    8b14:	c8 01       	movw	r24, r16
    8b16:	b7 01       	movw	r22, r14
    8b18:	a2 01       	movw	r20, r4
    8b1a:	91 01       	movw	r18, r2
    8b1c:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    8b20:	c9 01       	movw	r24, r18
    8b22:	da 01       	movw	r26, r20
    8b24:	7c 01       	movw	r14, r24
    8b26:	8d 01       	movw	r16, r26
		} while (i && val);
    8b28:	e1 14       	cp	r14, r1
    8b2a:	f1 04       	cpc	r15, r1
    8b2c:	01 05       	cpc	r16, r1
    8b2e:	11 05       	cpc	r17, r1
    8b30:	c9 f6       	brne	.-78     	; 0x8ae4 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    8b32:	eb 89       	ldd	r30, Y+19	; 0x13
    8b34:	e2 ff       	sbrs	r30, 2
    8b36:	0b c0       	rjmp	.+22     	; 0x8b4e <f_printf+0x1fc>
    8b38:	08 94       	sec
    8b3a:	c1 08       	sbc	r12, r1
    8b3c:	d1 08       	sbc	r13, r1
    8b3e:	e1 e0       	ldi	r30, 0x01	; 1
    8b40:	f0 e0       	ldi	r31, 0x00	; 0
    8b42:	ec 0f       	add	r30, r28
    8b44:	fd 1f       	adc	r31, r29
    8b46:	ec 0d       	add	r30, r12
    8b48:	fd 1d       	adc	r31, r13
    8b4a:	4d e2       	ldi	r20, 0x2D	; 45
    8b4c:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    8b4e:	8f e0       	ldi	r24, 0x0F	; 15
    8b50:	90 e0       	ldi	r25, 0x00	; 0
    8b52:	8a 19       	sub	r24, r10
    8b54:	9b 09       	sbc	r25, r11
    8b56:	08 94       	sec
    8b58:	c1 08       	sbc	r12, r1
    8b5a:	d1 08       	sbc	r13, r1
    8b5c:	e1 e0       	ldi	r30, 0x01	; 1
    8b5e:	f0 e0       	ldi	r31, 0x00	; 0
    8b60:	ec 0f       	add	r30, r28
    8b62:	fd 1f       	adc	r31, r29
    8b64:	ec 0d       	add	r30, r12
    8b66:	fd 1d       	adc	r31, r13
    8b68:	08 94       	sec
    8b6a:	c1 1c       	adc	r12, r1
    8b6c:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    8b6e:	ab 89       	ldd	r26, Y+19	; 0x13
    8b70:	2a 2f       	mov	r18, r26
    8b72:	30 e0       	ldi	r19, 0x00	; 0
    8b74:	21 70       	andi	r18, 0x01	; 1
    8b76:	30 70       	andi	r19, 0x00	; 0
    8b78:	0b c0       	rjmp	.+22     	; 0x8b90 <f_printf+0x23e>
    8b7a:	08 94       	sec
    8b7c:	c1 08       	sbc	r12, r1
    8b7e:	d1 08       	sbc	r13, r1
    8b80:	21 15       	cp	r18, r1
    8b82:	31 05       	cpc	r19, r1
    8b84:	11 f4       	brne	.+4      	; 0x8b8a <f_printf+0x238>
    8b86:	40 e2       	ldi	r20, 0x20	; 32
    8b88:	01 c0       	rjmp	.+2      	; 0x8b8c <f_printf+0x23a>
    8b8a:	40 e3       	ldi	r20, 0x30	; 48
    8b8c:	40 83       	st	Z, r20
    8b8e:	31 97       	sbiw	r30, 0x01	; 1
    8b90:	c1 14       	cp	r12, r1
    8b92:	d1 04       	cpc	r13, r1
    8b94:	19 f0       	breq	.+6      	; 0x8b9c <f_printf+0x24a>
    8b96:	8c 15       	cp	r24, r12
    8b98:	9d 05       	cpc	r25, r13
    8b9a:	7c f3       	brlt	.-34     	; 0x8b7a <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    8b9c:	81 e0       	ldi	r24, 0x01	; 1
    8b9e:	90 e0       	ldi	r25, 0x00	; 0
    8ba0:	8c 0f       	add	r24, r28
    8ba2:	9d 1f       	adc	r25, r29
    8ba4:	8c 0d       	add	r24, r12
    8ba6:	9d 1d       	adc	r25, r13
    8ba8:	69 a5       	ldd	r22, Y+41	; 0x29
    8baa:	7a a5       	ldd	r23, Y+42	; 0x2a
    8bac:	0e 94 08 2c 	call	0x5810	; 0x5810 <f_puts>
    8bb0:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    8bb2:	e9 89       	ldd	r30, Y+17	; 0x11
    8bb4:	fa 89       	ldd	r31, Y+18	; 0x12
    8bb6:	e2 0f       	add	r30, r18
    8bb8:	f3 1f       	adc	r31, r19
    8bba:	e9 8b       	std	Y+17, r30	; 0x11
    8bbc:	fa 8b       	std	Y+18, r31	; 0x12
    8bbe:	ff ef       	ldi	r31, 0xFF	; 255
    8bc0:	2f 3f       	cpi	r18, 0xFF	; 255
    8bc2:	3f 07       	cpc	r19, r31
    8bc4:	41 f0       	breq	.+16     	; 0x8bd6 <f_printf+0x284>
    8bc6:	84 01       	movw	r16, r8
    8bc8:	e4 ce       	rjmp	.-568    	; 0x8992 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    8bca:	4f ef       	ldi	r20, 0xFF	; 255
    8bcc:	2f 3f       	cpi	r18, 0xFF	; 255
    8bce:	34 07       	cpc	r19, r20
    8bd0:	11 f0       	breq	.+4      	; 0x8bd6 <f_printf+0x284>
    8bd2:	29 89       	ldd	r18, Y+17	; 0x11
    8bd4:	3a 89       	ldd	r19, Y+18	; 0x12
}
    8bd6:	c9 01       	movw	r24, r18
    8bd8:	63 96       	adiw	r28, 0x13	; 19
    8bda:	cd bf       	out	0x3d, r28	; 61
    8bdc:	de bf       	out	0x3e, r29	; 62
    8bde:	cf 91       	pop	r28
    8be0:	df 91       	pop	r29
    8be2:	1f 91       	pop	r17
    8be4:	0f 91       	pop	r16
    8be6:	ff 90       	pop	r15
    8be8:	ef 90       	pop	r14
    8bea:	df 90       	pop	r13
    8bec:	cf 90       	pop	r12
    8bee:	bf 90       	pop	r11
    8bf0:	af 90       	pop	r10
    8bf2:	9f 90       	pop	r9
    8bf4:	8f 90       	pop	r8
    8bf6:	7f 90       	pop	r7
    8bf8:	6f 90       	pop	r6
    8bfa:	5f 90       	pop	r5
    8bfc:	4f 90       	pop	r4
    8bfe:	3f 90       	pop	r3
    8c00:	2f 90       	pop	r2
    8c02:	08 95       	ret

00008c04 <__mulsi3>:
    8c04:	62 9f       	mul	r22, r18
    8c06:	d0 01       	movw	r26, r0
    8c08:	73 9f       	mul	r23, r19
    8c0a:	f0 01       	movw	r30, r0
    8c0c:	82 9f       	mul	r24, r18
    8c0e:	e0 0d       	add	r30, r0
    8c10:	f1 1d       	adc	r31, r1
    8c12:	64 9f       	mul	r22, r20
    8c14:	e0 0d       	add	r30, r0
    8c16:	f1 1d       	adc	r31, r1
    8c18:	92 9f       	mul	r25, r18
    8c1a:	f0 0d       	add	r31, r0
    8c1c:	83 9f       	mul	r24, r19
    8c1e:	f0 0d       	add	r31, r0
    8c20:	74 9f       	mul	r23, r20
    8c22:	f0 0d       	add	r31, r0
    8c24:	65 9f       	mul	r22, r21
    8c26:	f0 0d       	add	r31, r0
    8c28:	99 27       	eor	r25, r25
    8c2a:	72 9f       	mul	r23, r18
    8c2c:	b0 0d       	add	r27, r0
    8c2e:	e1 1d       	adc	r30, r1
    8c30:	f9 1f       	adc	r31, r25
    8c32:	63 9f       	mul	r22, r19
    8c34:	b0 0d       	add	r27, r0
    8c36:	e1 1d       	adc	r30, r1
    8c38:	f9 1f       	adc	r31, r25
    8c3a:	bd 01       	movw	r22, r26
    8c3c:	cf 01       	movw	r24, r30
    8c3e:	11 24       	eor	r1, r1
    8c40:	08 95       	ret

00008c42 <__divmodhi4>:
    8c42:	97 fb       	bst	r25, 7
    8c44:	09 2e       	mov	r0, r25
    8c46:	07 26       	eor	r0, r23
    8c48:	0a d0       	rcall	.+20     	; 0x8c5e <__divmodhi4_neg1>
    8c4a:	77 fd       	sbrc	r23, 7
    8c4c:	04 d0       	rcall	.+8      	; 0x8c56 <__divmodhi4_neg2>
    8c4e:	2e d0       	rcall	.+92     	; 0x8cac <__udivmodhi4>
    8c50:	06 d0       	rcall	.+12     	; 0x8c5e <__divmodhi4_neg1>
    8c52:	00 20       	and	r0, r0
    8c54:	1a f4       	brpl	.+6      	; 0x8c5c <__divmodhi4_exit>

00008c56 <__divmodhi4_neg2>:
    8c56:	70 95       	com	r23
    8c58:	61 95       	neg	r22
    8c5a:	7f 4f       	sbci	r23, 0xFF	; 255

00008c5c <__divmodhi4_exit>:
    8c5c:	08 95       	ret

00008c5e <__divmodhi4_neg1>:
    8c5e:	f6 f7       	brtc	.-4      	; 0x8c5c <__divmodhi4_exit>
    8c60:	90 95       	com	r25
    8c62:	81 95       	neg	r24
    8c64:	9f 4f       	sbci	r25, 0xFF	; 255
    8c66:	08 95       	ret

00008c68 <__udivmodsi4>:
    8c68:	a1 e2       	ldi	r26, 0x21	; 33
    8c6a:	1a 2e       	mov	r1, r26
    8c6c:	aa 1b       	sub	r26, r26
    8c6e:	bb 1b       	sub	r27, r27
    8c70:	fd 01       	movw	r30, r26
    8c72:	0d c0       	rjmp	.+26     	; 0x8c8e <__udivmodsi4_ep>

00008c74 <__udivmodsi4_loop>:
    8c74:	aa 1f       	adc	r26, r26
    8c76:	bb 1f       	adc	r27, r27
    8c78:	ee 1f       	adc	r30, r30
    8c7a:	ff 1f       	adc	r31, r31
    8c7c:	a2 17       	cp	r26, r18
    8c7e:	b3 07       	cpc	r27, r19
    8c80:	e4 07       	cpc	r30, r20
    8c82:	f5 07       	cpc	r31, r21
    8c84:	20 f0       	brcs	.+8      	; 0x8c8e <__udivmodsi4_ep>
    8c86:	a2 1b       	sub	r26, r18
    8c88:	b3 0b       	sbc	r27, r19
    8c8a:	e4 0b       	sbc	r30, r20
    8c8c:	f5 0b       	sbc	r31, r21

00008c8e <__udivmodsi4_ep>:
    8c8e:	66 1f       	adc	r22, r22
    8c90:	77 1f       	adc	r23, r23
    8c92:	88 1f       	adc	r24, r24
    8c94:	99 1f       	adc	r25, r25
    8c96:	1a 94       	dec	r1
    8c98:	69 f7       	brne	.-38     	; 0x8c74 <__udivmodsi4_loop>
    8c9a:	60 95       	com	r22
    8c9c:	70 95       	com	r23
    8c9e:	80 95       	com	r24
    8ca0:	90 95       	com	r25
    8ca2:	9b 01       	movw	r18, r22
    8ca4:	ac 01       	movw	r20, r24
    8ca6:	bd 01       	movw	r22, r26
    8ca8:	cf 01       	movw	r24, r30
    8caa:	08 95       	ret

00008cac <__udivmodhi4>:
    8cac:	aa 1b       	sub	r26, r26
    8cae:	bb 1b       	sub	r27, r27
    8cb0:	51 e1       	ldi	r21, 0x11	; 17
    8cb2:	07 c0       	rjmp	.+14     	; 0x8cc2 <__udivmodhi4_ep>

00008cb4 <__udivmodhi4_loop>:
    8cb4:	aa 1f       	adc	r26, r26
    8cb6:	bb 1f       	adc	r27, r27
    8cb8:	a6 17       	cp	r26, r22
    8cba:	b7 07       	cpc	r27, r23
    8cbc:	10 f0       	brcs	.+4      	; 0x8cc2 <__udivmodhi4_ep>
    8cbe:	a6 1b       	sub	r26, r22
    8cc0:	b7 0b       	sbc	r27, r23

00008cc2 <__udivmodhi4_ep>:
    8cc2:	88 1f       	adc	r24, r24
    8cc4:	99 1f       	adc	r25, r25
    8cc6:	5a 95       	dec	r21
    8cc8:	a9 f7       	brne	.-22     	; 0x8cb4 <__udivmodhi4_loop>
    8cca:	80 95       	com	r24
    8ccc:	90 95       	com	r25
    8cce:	bc 01       	movw	r22, r24
    8cd0:	cd 01       	movw	r24, r26
    8cd2:	08 95       	ret

00008cd4 <strtok>:
    8cd4:	4f e2       	ldi	r20, 0x2F	; 47
    8cd6:	5c e2       	ldi	r21, 0x2C	; 44
    8cd8:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <strtok_r>
    8cdc:	08 95       	ret

00008cde <memmove>:
    8cde:	68 17       	cp	r22, r24
    8ce0:	79 07       	cpc	r23, r25
    8ce2:	68 f4       	brcc	.+26     	; 0x8cfe <memmove+0x20>
    8ce4:	fb 01       	movw	r30, r22
    8ce6:	dc 01       	movw	r26, r24
    8ce8:	e4 0f       	add	r30, r20
    8cea:	f5 1f       	adc	r31, r21
    8cec:	a4 0f       	add	r26, r20
    8cee:	b5 1f       	adc	r27, r21
    8cf0:	02 c0       	rjmp	.+4      	; 0x8cf6 <memmove+0x18>
    8cf2:	02 90       	ld	r0, -Z
    8cf4:	0e 92       	st	-X, r0
    8cf6:	41 50       	subi	r20, 0x01	; 1
    8cf8:	50 40       	sbci	r21, 0x00	; 0
    8cfa:	d8 f7       	brcc	.-10     	; 0x8cf2 <memmove+0x14>
    8cfc:	08 95       	ret
    8cfe:	0c 94 74 47 	jmp	0x8ee8	; 0x8ee8 <memcpy>

00008d02 <strcasecmp>:
    8d02:	fb 01       	movw	r30, r22
    8d04:	dc 01       	movw	r26, r24
    8d06:	8d 91       	ld	r24, X+
    8d08:	81 34       	cpi	r24, 0x41	; 65
    8d0a:	1c f0       	brlt	.+6      	; 0x8d12 <strcasecmp+0x10>
    8d0c:	8b 35       	cpi	r24, 0x5B	; 91
    8d0e:	0c f4       	brge	.+2      	; 0x8d12 <strcasecmp+0x10>
    8d10:	80 5e       	subi	r24, 0xE0	; 224
    8d12:	61 91       	ld	r22, Z+
    8d14:	61 34       	cpi	r22, 0x41	; 65
    8d16:	1c f0       	brlt	.+6      	; 0x8d1e <strcasecmp+0x1c>
    8d18:	6b 35       	cpi	r22, 0x5B	; 91
    8d1a:	0c f4       	brge	.+2      	; 0x8d1e <strcasecmp+0x1c>
    8d1c:	60 5e       	subi	r22, 0xE0	; 224
    8d1e:	86 1b       	sub	r24, r22
    8d20:	61 11       	cpse	r22, r1
    8d22:	89 f3       	breq	.-30     	; 0x8d06 <strcasecmp+0x4>
    8d24:	99 0b       	sbc	r25, r25
    8d26:	08 95       	ret

00008d28 <strcasestr>:
    8d28:	fb 01       	movw	r30, r22
    8d2a:	51 91       	ld	r21, Z+
    8d2c:	55 23       	and	r21, r21
    8d2e:	b1 f0       	breq	.+44     	; 0x8d5c <strcasestr+0x34>
    8d30:	bf 01       	movw	r22, r30
    8d32:	dc 01       	movw	r26, r24
    8d34:	05 2e       	mov	r0, r21
    8d36:	4d 91       	ld	r20, X+
    8d38:	44 23       	and	r20, r20
    8d3a:	69 f0       	breq	.+26     	; 0x8d56 <strcasestr+0x2e>
    8d3c:	10 d0       	rcall	.+32     	; 0x8d5e <strcasestr+0x36>
    8d3e:	d9 f7       	brne	.-10     	; 0x8d36 <strcasestr+0xe>
    8d40:	cd 01       	movw	r24, r26
    8d42:	01 90       	ld	r0, Z+
    8d44:	00 20       	and	r0, r0
    8d46:	49 f0       	breq	.+18     	; 0x8d5a <strcasestr+0x32>
    8d48:	4d 91       	ld	r20, X+
    8d4a:	41 11       	cpse	r20, r1
    8d4c:	08 d0       	rcall	.+16     	; 0x8d5e <strcasestr+0x36>
    8d4e:	c9 f3       	breq	.-14     	; 0x8d42 <strcasestr+0x1a>
    8d50:	fb 01       	movw	r30, r22
    8d52:	41 11       	cpse	r20, r1
    8d54:	ee cf       	rjmp	.-36     	; 0x8d32 <strcasestr+0xa>
    8d56:	81 e0       	ldi	r24, 0x01	; 1
    8d58:	90 e0       	ldi	r25, 0x00	; 0
    8d5a:	01 97       	sbiw	r24, 0x01	; 1
    8d5c:	08 95       	ret
    8d5e:	40 25       	eor	r20, r0
    8d60:	39 f0       	breq	.+14     	; 0x8d70 <strcasestr+0x48>
    8d62:	40 32       	cpi	r20, 0x20	; 32
    8d64:	29 f4       	brne	.+10     	; 0x8d70 <strcasestr+0x48>
    8d66:	40 29       	or	r20, r0
    8d68:	4b 57       	subi	r20, 0x7B	; 123
    8d6a:	46 5e       	subi	r20, 0xE6	; 230
    8d6c:	08 f0       	brcs	.+2      	; 0x8d70 <strcasestr+0x48>
    8d6e:	18 94       	sez
    8d70:	08 95       	ret

00008d72 <strcat>:
    8d72:	fb 01       	movw	r30, r22
    8d74:	dc 01       	movw	r26, r24
    8d76:	0d 90       	ld	r0, X+
    8d78:	00 20       	and	r0, r0
    8d7a:	e9 f7       	brne	.-6      	; 0x8d76 <strcat+0x4>
    8d7c:	11 97       	sbiw	r26, 0x01	; 1
    8d7e:	01 90       	ld	r0, Z+
    8d80:	0d 92       	st	X+, r0
    8d82:	00 20       	and	r0, r0
    8d84:	e1 f7       	brne	.-8      	; 0x8d7e <strcat+0xc>
    8d86:	08 95       	ret

00008d88 <strcmp>:
    8d88:	fb 01       	movw	r30, r22
    8d8a:	dc 01       	movw	r26, r24
    8d8c:	8d 91       	ld	r24, X+
    8d8e:	01 90       	ld	r0, Z+
    8d90:	80 19       	sub	r24, r0
    8d92:	01 10       	cpse	r0, r1
    8d94:	d9 f3       	breq	.-10     	; 0x8d8c <strcmp+0x4>
    8d96:	99 0b       	sbc	r25, r25
    8d98:	08 95       	ret

00008d9a <strcpy>:
    8d9a:	fb 01       	movw	r30, r22
    8d9c:	dc 01       	movw	r26, r24
    8d9e:	01 90       	ld	r0, Z+
    8da0:	0d 92       	st	X+, r0
    8da2:	00 20       	and	r0, r0
    8da4:	e1 f7       	brne	.-8      	; 0x8d9e <strcpy+0x4>
    8da6:	08 95       	ret

00008da8 <strstr>:
    8da8:	fb 01       	movw	r30, r22
    8daa:	51 91       	ld	r21, Z+
    8dac:	55 23       	and	r21, r21
    8dae:	a9 f0       	breq	.+42     	; 0x8dda <strstr+0x32>
    8db0:	bf 01       	movw	r22, r30
    8db2:	dc 01       	movw	r26, r24
    8db4:	4d 91       	ld	r20, X+
    8db6:	45 17       	cp	r20, r21
    8db8:	41 11       	cpse	r20, r1
    8dba:	e1 f7       	brne	.-8      	; 0x8db4 <strstr+0xc>
    8dbc:	59 f4       	brne	.+22     	; 0x8dd4 <strstr+0x2c>
    8dbe:	cd 01       	movw	r24, r26
    8dc0:	01 90       	ld	r0, Z+
    8dc2:	00 20       	and	r0, r0
    8dc4:	49 f0       	breq	.+18     	; 0x8dd8 <strstr+0x30>
    8dc6:	4d 91       	ld	r20, X+
    8dc8:	40 15       	cp	r20, r0
    8dca:	41 11       	cpse	r20, r1
    8dcc:	c9 f3       	breq	.-14     	; 0x8dc0 <strstr+0x18>
    8dce:	fb 01       	movw	r30, r22
    8dd0:	41 11       	cpse	r20, r1
    8dd2:	ef cf       	rjmp	.-34     	; 0x8db2 <strstr+0xa>
    8dd4:	81 e0       	ldi	r24, 0x01	; 1
    8dd6:	90 e0       	ldi	r25, 0x00	; 0
    8dd8:	01 97       	sbiw	r24, 0x01	; 1
    8dda:	08 95       	ret

00008ddc <strtok_r>:
    8ddc:	fa 01       	movw	r30, r20
    8dde:	a1 91       	ld	r26, Z+
    8de0:	b0 81       	ld	r27, Z
    8de2:	00 97       	sbiw	r24, 0x00	; 0
    8de4:	19 f4       	brne	.+6      	; 0x8dec <strtok_r+0x10>
    8de6:	10 97       	sbiw	r26, 0x00	; 0
    8de8:	e1 f0       	breq	.+56     	; 0x8e22 <strtok_r+0x46>
    8dea:	cd 01       	movw	r24, r26
    8dec:	dc 01       	movw	r26, r24
    8dee:	cd 01       	movw	r24, r26
    8df0:	0d 90       	ld	r0, X+
    8df2:	00 20       	and	r0, r0
    8df4:	11 f4       	brne	.+4      	; 0x8dfa <strtok_r+0x1e>
    8df6:	c0 01       	movw	r24, r0
    8df8:	13 c0       	rjmp	.+38     	; 0x8e20 <strtok_r+0x44>
    8dfa:	fb 01       	movw	r30, r22
    8dfc:	21 91       	ld	r18, Z+
    8dfe:	22 23       	and	r18, r18
    8e00:	19 f0       	breq	.+6      	; 0x8e08 <strtok_r+0x2c>
    8e02:	20 15       	cp	r18, r0
    8e04:	d9 f7       	brne	.-10     	; 0x8dfc <strtok_r+0x20>
    8e06:	f3 cf       	rjmp	.-26     	; 0x8dee <strtok_r+0x12>
    8e08:	fb 01       	movw	r30, r22
    8e0a:	21 91       	ld	r18, Z+
    8e0c:	20 15       	cp	r18, r0
    8e0e:	19 f4       	brne	.+6      	; 0x8e16 <strtok_r+0x3a>
    8e10:	1e 92       	st	-X, r1
    8e12:	11 96       	adiw	r26, 0x01	; 1
    8e14:	06 c0       	rjmp	.+12     	; 0x8e22 <strtok_r+0x46>
    8e16:	22 23       	and	r18, r18
    8e18:	c1 f7       	brne	.-16     	; 0x8e0a <strtok_r+0x2e>
    8e1a:	0d 90       	ld	r0, X+
    8e1c:	00 20       	and	r0, r0
    8e1e:	a1 f7       	brne	.-24     	; 0x8e08 <strtok_r+0x2c>
    8e20:	d0 01       	movw	r26, r0
    8e22:	fa 01       	movw	r30, r20
    8e24:	a1 93       	st	Z+, r26
    8e26:	b0 83       	st	Z, r27
    8e28:	08 95       	ret

00008e2a <strupr>:
    8e2a:	dc 01       	movw	r26, r24
    8e2c:	6c 91       	ld	r22, X
    8e2e:	61 56       	subi	r22, 0x61	; 97
    8e30:	6a 31       	cpi	r22, 0x1A	; 26
    8e32:	08 f0       	brcs	.+2      	; 0x8e36 <strupr+0xc>
    8e34:	60 5e       	subi	r22, 0xE0	; 224
    8e36:	6f 5b       	subi	r22, 0xBF	; 191
    8e38:	6d 93       	st	X+, r22
    8e3a:	c1 f7       	brne	.-16     	; 0x8e2c <strupr+0x2>
    8e3c:	08 95       	ret

00008e3e <itoa>:
    8e3e:	fb 01       	movw	r30, r22
    8e40:	9f 01       	movw	r18, r30
    8e42:	e8 94       	clt
    8e44:	42 30       	cpi	r20, 0x02	; 2
    8e46:	c4 f0       	brlt	.+48     	; 0x8e78 <itoa+0x3a>
    8e48:	45 32       	cpi	r20, 0x25	; 37
    8e4a:	b4 f4       	brge	.+44     	; 0x8e78 <itoa+0x3a>
    8e4c:	4a 30       	cpi	r20, 0x0A	; 10
    8e4e:	29 f4       	brne	.+10     	; 0x8e5a <itoa+0x1c>
    8e50:	97 fb       	bst	r25, 7
    8e52:	1e f4       	brtc	.+6      	; 0x8e5a <itoa+0x1c>
    8e54:	90 95       	com	r25
    8e56:	81 95       	neg	r24
    8e58:	9f 4f       	sbci	r25, 0xFF	; 255
    8e5a:	64 2f       	mov	r22, r20
    8e5c:	77 27       	eor	r23, r23
    8e5e:	0e 94 56 46 	call	0x8cac	; 0x8cac <__udivmodhi4>
    8e62:	80 5d       	subi	r24, 0xD0	; 208
    8e64:	8a 33       	cpi	r24, 0x3A	; 58
    8e66:	0c f0       	brlt	.+2      	; 0x8e6a <itoa+0x2c>
    8e68:	89 5d       	subi	r24, 0xD9	; 217
    8e6a:	81 93       	st	Z+, r24
    8e6c:	cb 01       	movw	r24, r22
    8e6e:	00 97       	sbiw	r24, 0x00	; 0
    8e70:	a1 f7       	brne	.-24     	; 0x8e5a <itoa+0x1c>
    8e72:	16 f4       	brtc	.+4      	; 0x8e78 <itoa+0x3a>
    8e74:	5d e2       	ldi	r21, 0x2D	; 45
    8e76:	51 93       	st	Z+, r21
    8e78:	10 82       	st	Z, r1
    8e7a:	c9 01       	movw	r24, r18
    8e7c:	0c 94 7d 47 	jmp	0x8efa	; 0x8efa <strrev>

00008e80 <ltoa>:
    8e80:	fa 01       	movw	r30, r20
    8e82:	cf 93       	push	r28
    8e84:	ff 93       	push	r31
    8e86:	ef 93       	push	r30
    8e88:	22 30       	cpi	r18, 0x02	; 2
    8e8a:	44 f1       	brlt	.+80     	; 0x8edc <ltoa+0x5c>
    8e8c:	25 32       	cpi	r18, 0x25	; 37
    8e8e:	34 f5       	brge	.+76     	; 0x8edc <ltoa+0x5c>
    8e90:	c2 2f       	mov	r28, r18
    8e92:	e8 94       	clt
    8e94:	ca 30       	cpi	r28, 0x0A	; 10
    8e96:	49 f4       	brne	.+18     	; 0x8eaa <ltoa+0x2a>
    8e98:	97 fb       	bst	r25, 7
    8e9a:	3e f4       	brtc	.+14     	; 0x8eaa <ltoa+0x2a>
    8e9c:	90 95       	com	r25
    8e9e:	80 95       	com	r24
    8ea0:	70 95       	com	r23
    8ea2:	61 95       	neg	r22
    8ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    8ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    8eaa:	2c 2f       	mov	r18, r28
    8eac:	33 27       	eor	r19, r19
    8eae:	44 27       	eor	r20, r20
    8eb0:	55 27       	eor	r21, r21
    8eb2:	ff 93       	push	r31
    8eb4:	ef 93       	push	r30
    8eb6:	0e 94 34 46 	call	0x8c68	; 0x8c68 <__udivmodsi4>
    8eba:	ef 91       	pop	r30
    8ebc:	ff 91       	pop	r31
    8ebe:	60 5d       	subi	r22, 0xD0	; 208
    8ec0:	6a 33       	cpi	r22, 0x3A	; 58
    8ec2:	0c f0       	brlt	.+2      	; 0x8ec6 <ltoa+0x46>
    8ec4:	69 5d       	subi	r22, 0xD9	; 217
    8ec6:	61 93       	st	Z+, r22
    8ec8:	b9 01       	movw	r22, r18
    8eca:	ca 01       	movw	r24, r20
    8ecc:	60 50       	subi	r22, 0x00	; 0
    8ece:	70 40       	sbci	r23, 0x00	; 0
    8ed0:	80 40       	sbci	r24, 0x00	; 0
    8ed2:	90 40       	sbci	r25, 0x00	; 0
    8ed4:	51 f7       	brne	.-44     	; 0x8eaa <ltoa+0x2a>
    8ed6:	16 f4       	brtc	.+4      	; 0x8edc <ltoa+0x5c>
    8ed8:	cd e2       	ldi	r28, 0x2D	; 45
    8eda:	c1 93       	st	Z+, r28
    8edc:	10 82       	st	Z, r1
    8ede:	8f 91       	pop	r24
    8ee0:	9f 91       	pop	r25
    8ee2:	cf 91       	pop	r28
    8ee4:	0c 94 7d 47 	jmp	0x8efa	; 0x8efa <strrev>

00008ee8 <memcpy>:
    8ee8:	fb 01       	movw	r30, r22
    8eea:	dc 01       	movw	r26, r24
    8eec:	02 c0       	rjmp	.+4      	; 0x8ef2 <memcpy+0xa>
    8eee:	01 90       	ld	r0, Z+
    8ef0:	0d 92       	st	X+, r0
    8ef2:	41 50       	subi	r20, 0x01	; 1
    8ef4:	50 40       	sbci	r21, 0x00	; 0
    8ef6:	d8 f7       	brcc	.-10     	; 0x8eee <memcpy+0x6>
    8ef8:	08 95       	ret

00008efa <strrev>:
    8efa:	dc 01       	movw	r26, r24
    8efc:	fc 01       	movw	r30, r24
    8efe:	67 2f       	mov	r22, r23
    8f00:	71 91       	ld	r23, Z+
    8f02:	77 23       	and	r23, r23
    8f04:	e1 f7       	brne	.-8      	; 0x8efe <strrev+0x4>
    8f06:	32 97       	sbiw	r30, 0x02	; 2
    8f08:	04 c0       	rjmp	.+8      	; 0x8f12 <strrev+0x18>
    8f0a:	7c 91       	ld	r23, X
    8f0c:	6d 93       	st	X+, r22
    8f0e:	70 83       	st	Z, r23
    8f10:	62 91       	ld	r22, -Z
    8f12:	ae 17       	cp	r26, r30
    8f14:	bf 07       	cpc	r27, r31
    8f16:	c8 f3       	brcs	.-14     	; 0x8f0a <strrev+0x10>
    8f18:	08 95       	ret

00008f1a <_exit>:
    8f1a:	f8 94       	cli

00008f1c <__stop_program>:
    8f1c:	ff cf       	rjmp	.-2      	; 0x8f1c <__stop_program>
