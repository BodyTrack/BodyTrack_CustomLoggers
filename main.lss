
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cd5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000013de  00802000  0000cd5c  0000cdf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002a9a  008033de  008033de  0000e1ce  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  0000e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00010864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001c38  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a886  00000000  00000000  0001253c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a12  00000000  00000000  0001cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000090bb  00000000  00000000  0001d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000be0  00000000  00000000  00026890  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004ab4  00000000  00000000  00027470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000076bc  00000000  00000000  0002bf24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000858  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 f8 50 	jmp	0xa1f0	; 0xa1f0 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 f0 46 	jmp	0x8de0	; 0x8de0 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e3       	ldi	r17, 0x33	; 51
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ec e5       	ldi	r30, 0x5C	; 92
     200:	fd ec       	ldi	r31, 0xCD	; 205
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	ae 3d       	cpi	r26, 0xDE	; 222
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1e e5       	ldi	r17, 0x5E	; 94
     214:	ae ed       	ldi	r26, 0xDE	; 222
     216:	b3 e3       	ldi	r27, 0x33	; 51
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 37       	cpi	r26, 0x78	; 120
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 b9 5a 	call	0xb572	; 0xb572 <main>
     226:	0c 94 ac 66 	jmp	0xcd58	; 0xcd58 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;



void Debug_Init(uint32_t baud){
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     232:	e0 e4       	ldi	r30, 0x40	; 64
     234:	f6 e0       	ldi	r31, 0x06	; 6
     236:	88 e0       	ldi	r24, 0x08	; 8
     238:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     23e:	e0 e6       	ldi	r30, 0x60	; 96
     240:	f6 e0       	ldi	r31, 0x06	; 6
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.Debug_RTS_CNTL = PORT_OPC_PULLUP_gc;
     246:	88 e1       	ldi	r24, 0x18	; 24
     248:	80 8b       	std	Z+16, r24	; 0x10


	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     24a:	e0 ea       	ldi	r30, 0xA0	; 160
     24c:	f8 e0       	ldi	r31, 0x08	; 8
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     252:	20 38       	cpi	r18, 0x80	; 128
     254:	65 e2       	ldi	r22, 0x25	; 37
     256:	36 07       	cpc	r19, r22
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	46 07       	cpc	r20, r22
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	56 07       	cpc	r21, r22
     260:	11 f4       	brne	.+4      	; 0x266 <Debug_Init+0x38>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     262:	8f e5       	ldi	r24, 0x5F	; 95
     264:	09 c0       	rjmp	.+18     	; 0x278 <Debug_Init+0x4a>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     266:	20 30       	cpi	r18, 0x00	; 0
     268:	62 ec       	ldi	r22, 0xC2	; 194
     26a:	36 07       	cpc	r19, r22
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	46 07       	cpc	r20, r22
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	56 07       	cpc	r21, r22
     274:	19 f4       	brne	.+6      	; 0x27c <Debug_Init+0x4e>
		Debug_Usart.BAUDCTRLA = 7 & 0xFF;
     276:	87 e0       	ldi	r24, 0x07	; 7
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	18 c0       	rjmp	.+48     	; 0x2ac <Debug_Init+0x7e>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     27c:	20 30       	cpi	r18, 0x00	; 0
     27e:	64 e8       	ldi	r22, 0x84	; 132
     280:	36 07       	cpc	r19, r22
     282:	63 e0       	ldi	r22, 0x03	; 3
     284:	46 07       	cpc	r20, r22
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	56 07       	cpc	r21, r22
     28a:	b1 f3       	breq	.-20     	; 0x278 <Debug_Init+0x4a>
		Debug_Usart.BAUDCTRLA = 3 & 0xFF;
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	}else if(baud == 460800){
     28c:	20 30       	cpi	r18, 0x00	; 0
     28e:	88 e0       	ldi	r24, 0x08	; 8
     290:	38 07       	cpc	r19, r24
     292:	87 e0       	ldi	r24, 0x07	; 7
     294:	48 07       	cpc	r20, r24
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	58 07       	cpc	r21, r24
     29a:	11 f4       	brne	.+4      	; 0x2a0 <Debug_Init+0x72>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     29c:	96 83       	std	Z+6, r25	; 0x06
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <Debug_Init+0x7e>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     2a0:	20 50       	subi	r18, 0x00	; 0
     2a2:	30 41       	sbci	r19, 0x10	; 16
     2a4:	4e 40       	sbci	r20, 0x0E	; 14
     2a6:	50 40       	sbci	r21, 0x00	; 0
     2a8:	11 f4       	brne	.+4      	; 0x2ae <Debug_Init+0x80>
		Debug_Usart.BAUDCTRLA = 0 & 0xFF;
     2aa:	16 82       	std	Z+6, r1	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     2ac:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     2ae:	e0 ea       	ldi	r30, 0xA0	; 160
     2b0:	f8 e0       	ldi	r31, 0x08	; 8
     2b2:	80 91 a4 08 	lds	r24, 0x08A4
     2b6:	80 61       	ori	r24, 0x10	; 16
     2b8:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     2ba:	80 91 a4 08 	lds	r24, 0x08A4
     2be:	88 60       	ori	r24, 0x08	; 8
     2c0:	84 83       	std	Z+4, r24	; 0x04
	
	//Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
     2c2:	08 95       	ret

000002c4 <Debug_CharReadyToRead>:
	}
}


bool Debug_CharReadyToRead(void){
    Debug_writeLocation  = DMA.CH1.DESTADDR1 << 8;
     2c4:	20 91 2d 01 	lds	r18, 0x012D
     2c8:	92 2f       	mov	r25, r18
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	80 93 12 34 	sts	0x3412, r24
     2d0:	90 93 13 34 	sts	0x3413, r25
	Debug_writeLocation += DMA.CH1.DESTADDR0;
     2d4:	80 91 12 34 	lds	r24, 0x3412
     2d8:	90 91 13 34 	lds	r25, 0x3413
     2dc:	20 91 2c 01 	lds	r18, 0x012C
     2e0:	82 0f       	add	r24, r18
     2e2:	91 1d       	adc	r25, r1
     2e4:	80 93 12 34 	sts	0x3412, r24
     2e8:	90 93 13 34 	sts	0x3413, r25
	Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     2ec:	80 91 12 34 	lds	r24, 0x3412
     2f0:	90 91 13 34 	lds	r25, 0x3413
     2f4:	86 5f       	subi	r24, 0xF6	; 246
     2f6:	9c 44       	sbci	r25, 0x4C	; 76
     2f8:	80 93 12 34 	sts	0x3412, r24
     2fc:	90 93 13 34 	sts	0x3413, r25



	if(Debug_writeLocation == Debug_readLocation){
     300:	20 91 12 34 	lds	r18, 0x3412
     304:	30 91 13 34 	lds	r19, 0x3413
     308:	80 91 10 34 	lds	r24, 0x3410
     30c:	90 91 11 34 	lds	r25, 0x3411
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	28 17       	cp	r18, r24
     314:	39 07       	cpc	r19, r25
     316:	09 f0       	breq	.+2      	; 0x31a <Debug_CharReadyToRead+0x56>
     318:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     31a:	84 2f       	mov	r24, r20
     31c:	08 95       	ret

0000031e <Debug_ClearBuffer>:
	
	//Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	//Debug_writeLocation = Debug_readLocation;
	if(Debug_CharReadyToRead()){
     31e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
     322:	88 23       	and	r24, r24
     324:	31 f1       	breq	.+76     	; 0x372 <Debug_ClearBuffer+0x54>
		Debug_writeLocation  = DMA.CH1.DESTADDR1 << 8;
     326:	20 91 2d 01 	lds	r18, 0x012D
     32a:	92 2f       	mov	r25, r18
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	80 93 12 34 	sts	0x3412, r24
     332:	90 93 13 34 	sts	0x3413, r25
		Debug_writeLocation += DMA.CH1.DESTADDR0;
     336:	80 91 12 34 	lds	r24, 0x3412
     33a:	90 91 13 34 	lds	r25, 0x3413
     33e:	20 91 2c 01 	lds	r18, 0x012C
     342:	82 0f       	add	r24, r18
     344:	91 1d       	adc	r25, r1
     346:	80 93 12 34 	sts	0x3412, r24
     34a:	90 93 13 34 	sts	0x3413, r25
		Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     34e:	80 91 12 34 	lds	r24, 0x3412
     352:	90 91 13 34 	lds	r25, 0x3413
     356:	86 5f       	subi	r24, 0xF6	; 246
     358:	9c 44       	sbci	r25, 0x4C	; 76
     35a:	80 93 12 34 	sts	0x3412, r24
     35e:	90 93 13 34 	sts	0x3413, r25
		Debug_readLocation = Debug_writeLocation;
     362:	80 91 12 34 	lds	r24, 0x3412
     366:	90 91 13 34 	lds	r25, 0x3413
     36a:	80 93 10 34 	sts	0x3410, r24
     36e:	90 93 11 34 	sts	0x3411, r25
     372:	08 95       	ret

00000374 <Debug_GetByte>:
		return true;
	}
}

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     374:	88 23       	and	r24, r24
     376:	21 f0       	breq	.+8      	; 0x380 <Debug_GetByte+0xc>
		while(!Debug_CharReadyToRead());
     378:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
     37c:	88 23       	and	r24, r24
     37e:	e1 f3       	breq	.-8      	; 0x378 <Debug_GetByte+0x4>
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     380:	e0 91 10 34 	lds	r30, 0x3410
     384:	f0 91 11 34 	lds	r31, 0x3411
     388:	ea 50       	subi	r30, 0x0A	; 10
     38a:	f3 4b       	sbci	r31, 0xB3	; 179
     38c:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     38e:	80 91 10 34 	lds	r24, 0x3410
     392:	90 91 11 34 	lds	r25, 0x3411
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	80 93 10 34 	sts	0x3410, r24
     39c:	90 93 11 34 	sts	0x3411, r25
	if(Debug_readLocation >= Debug_BufferSize){
     3a0:	80 91 10 34 	lds	r24, 0x3410
     3a4:	90 91 11 34 	lds	r25, 0x3411
     3a8:	80 50       	subi	r24, 0x00	; 0
     3aa:	94 40       	sbci	r25, 0x04	; 4
     3ac:	20 f0       	brcs	.+8      	; 0x3b6 <Debug_GetByte+0x42>
	  Debug_readLocation=0;
     3ae:	10 92 10 34 	sts	0x3410, r1
     3b2:	10 92 11 34 	sts	0x3411, r1
	}
	return tmp;
}
     3b6:	8e 2f       	mov	r24, r30
     3b8:	08 95       	ret

000003ba <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     3ba:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     3bc:	80 91 a1 08 	lds	r24, 0x08A1
     3c0:	85 ff       	sbrs	r24, 5
     3c2:	fc cf       	rjmp	.-8      	; 0x3bc <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     3c4:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     3c8:	90 93 a0 08 	sts	0x08A0, r25
}
     3cc:	08 95       	ret

000003ce <Debug_GetTime>:
	if(Debug_writeLocation >= Debug_BufferSize){
		Debug_writeLocation = 0;
	}
}    */

uint32_t Debug_GetTime(uint16_t timeOut){
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	18 2f       	mov	r17, r24
     3e2:	09 2f       	mov	r16, r25
    uint16_t to = timeOut;
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
     3e4:	0e 94 8f 01 	call	0x31e	; 0x31e <Debug_ClearBuffer>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     3e8:	80 91 a1 08 	lds	r24, 0x08A1
     3ec:	85 ff       	sbrs	r24, 5
     3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <Debug_GetTime+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     3f0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     3f4:	84 e5       	ldi	r24, 0x54	; 84
     3f6:	80 93 a0 08 	sts	0x08A0, r24
     3fa:	21 2f       	mov	r18, r17
     3fc:	30 2f       	mov	r19, r16
     3fe:	c9 01       	movw	r24, r18
     400:	ec 01       	movw	r28, r24
     402:	ee 24       	eor	r14, r14
     404:	ff 24       	eor	r15, r15
     406:	87 01       	movw	r16, r14
     408:	dd 24       	eor	r13, r13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     40a:	96 e6       	ldi	r25, 0x66	; 102
     40c:	a9 2e       	mov	r10, r25
     40e:	9e e0       	ldi	r25, 0x0E	; 14
     410:	b9 2e       	mov	r11, r25
     412:	1b c0       	rjmp	.+54     	; 0x44a <Debug_GetTime+0x7c>
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
      if(Debug_CharReadyToRead()){
     414:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
     418:	88 23       	and	r24, r24
     41a:	99 f0       	breq	.+38     	; 0x442 <Debug_GetTime+0x74>
         tempTime  |= Debug_GetByte(true) & 0xFF;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	2e 29       	or	r18, r14
     42c:	3f 29       	or	r19, r15
     42e:	40 2b       	or	r20, r16
     430:	51 2b       	or	r21, r17
         byteCounter++;
     432:	d3 94       	inc	r13
         if(byteCounter == 4){
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	d8 16       	cp	r13, r24
     438:	71 f0       	breq	.+28     	; 0x456 <Debug_GetTime+0x88>
            return tempTime;
         } else {
             tempTime <<= 8;
     43a:	ee 24       	eor	r14, r14
     43c:	f2 2e       	mov	r15, r18
     43e:	03 2f       	mov	r16, r19
     440:	14 2f       	mov	r17, r20
     442:	c5 01       	movw	r24, r10
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <Debug_GetTime+0x76>
         }
      }
      _delay_ms(1);
      to--;
     448:	21 97       	sbiw	r28, 0x01	; 1
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
     44a:	20 97       	sbiw	r28, 0x00	; 0
     44c:	19 f7       	brne	.-58     	; 0x414 <Debug_GetTime+0x46>
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return 0;
}
     456:	b9 01       	movw	r22, r18
     458:	ca 01       	movw	r24, r20
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	bf 90       	pop	r11
     46a:	af 90       	pop	r10
     46c:	08 95       	ret

0000046e <Debug_Connected>:

bool Debug_Connected(uint16_t timeOut){
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	18 2f       	mov	r17, r24
     478:	09 2f       	mov	r16, r25
    uint16_t to = timeOut;
    Debug_ClearBuffer();
     47a:	0e 94 8f 01 	call	0x31e	; 0x31e <Debug_ClearBuffer>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     47e:	80 91 a1 08 	lds	r24, 0x08A1
     482:	85 ff       	sbrs	r24, 5
     484:	fc cf       	rjmp	.-8      	; 0x47e <Debug_Connected+0x10>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     486:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     48a:	80 e5       	ldi	r24, 0x50	; 80
     48c:	80 93 a0 08 	sts	0x08A0, r24
     490:	21 2f       	mov	r18, r17
     492:	30 2f       	mov	r19, r16
     494:	c9 01       	movw	r24, r18
     496:	ec 01       	movw	r28, r24
     498:	06 e6       	ldi	r16, 0x66	; 102
     49a:	1e e0       	ldi	r17, 0x0E	; 14
     49c:	0f c0       	rjmp	.+30     	; 0x4bc <Debug_Connected+0x4e>
bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
      if(Debug_CharReadyToRead()){
     49e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
     4a2:	88 23       	and	r24, r24
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <Debug_Connected+0x46>
         if(Debug_GetByte(true) == 'P'){
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
     4ac:	80 35       	cpi	r24, 0x50	; 80
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <Debug_Connected+0x46>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <Debug_Connected+0x54>
     4b4:	c8 01       	movw	r24, r16
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <Debug_Connected+0x48>
           return true;
         }
      }
      _delay_ms(1);
      to--;
     4ba:	21 97       	sbiw	r28, 0x01	; 1

bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
     4bc:	20 97       	sbiw	r28, 0x00	; 0
     4be:	79 f7       	brne	.-34     	; 0x49e <Debug_Connected+0x30>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return false;
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     4cc:	20 91 1d 01 	lds	r18, 0x011D
     4d0:	92 2f       	mov	r25, r18
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	80 93 16 34 	sts	0x3416, r24
     4d8:	90 93 17 34 	sts	0x3417, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     4dc:	80 91 16 34 	lds	r24, 0x3416
     4e0:	90 91 17 34 	lds	r25, 0x3417
     4e4:	20 91 1c 01 	lds	r18, 0x011C
     4e8:	82 0f       	add	r24, r18
     4ea:	91 1d       	adc	r25, r1
     4ec:	80 93 16 34 	sts	0x3416, r24
     4f0:	90 93 17 34 	sts	0x3417, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     4f4:	80 91 16 34 	lds	r24, 0x3416
     4f8:	90 91 17 34 	lds	r25, 0x3417
     4fc:	8d 5e       	subi	r24, 0xED	; 237
     4fe:	9d 43       	sbci	r25, 0x3D	; 61
     500:	80 93 16 34 	sts	0x3416, r24
     504:	90 93 17 34 	sts	0x3417, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     508:	20 91 16 34 	lds	r18, 0x3416
     50c:	30 91 17 34 	lds	r19, 0x3417
     510:	80 91 14 34 	lds	r24, 0x3414
     514:	90 91 15 34 	lds	r25, 0x3415
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	28 17       	cp	r18, r24
     51c:	39 07       	cpc	r19, r25
     51e:	09 f0       	breq	.+2      	; 0x522 <Wifi_CharReadyToRead+0x56>
     520:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     522:	84 2f       	mov	r24, r20
     524:	08 95       	ret

00000526 <Wifi_ClearBuffer>:

	Wifi_ClearBuffer();
}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     526:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
     52a:	88 23       	and	r24, r24
     52c:	31 f1       	breq	.+76     	; 0x57a <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     52e:	20 91 1d 01 	lds	r18, 0x011D
     532:	92 2f       	mov	r25, r18
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	80 93 16 34 	sts	0x3416, r24
     53a:	90 93 17 34 	sts	0x3417, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     53e:	80 91 16 34 	lds	r24, 0x3416
     542:	90 91 17 34 	lds	r25, 0x3417
     546:	20 91 1c 01 	lds	r18, 0x011C
     54a:	82 0f       	add	r24, r18
     54c:	91 1d       	adc	r25, r1
     54e:	80 93 16 34 	sts	0x3416, r24
     552:	90 93 17 34 	sts	0x3417, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     556:	80 91 16 34 	lds	r24, 0x3416
     55a:	90 91 17 34 	lds	r25, 0x3417
     55e:	8d 5e       	subi	r24, 0xED	; 237
     560:	9d 43       	sbci	r25, 0x3D	; 61
     562:	80 93 16 34 	sts	0x3416, r24
     566:	90 93 17 34 	sts	0x3417, r25
		Wifi_readLocation = Wifi_writeLocation;
     56a:	80 91 16 34 	lds	r24, 0x3416
     56e:	90 91 17 34 	lds	r25, 0x3417
     572:	80 93 14 34 	sts	0x3414, r24
     576:	90 93 15 34 	sts	0x3415, r25
     57a:	08 95       	ret

0000057c <Wifi_Init>:

volatile uint16_t timeOutCounter = 0;
bool uploadTimedOut = false;


void Wifi_Init(uint32_t baud){
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24


	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     580:	80 e8       	ldi	r24, 0x80	; 128
     582:	e0 ea       	ldi	r30, 0xA0	; 160
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.DIRCLR = (1<<Wifi_RTS_pin);
     588:	e0 e6       	ldi	r30, 0x60	; 96
     58a:	f6 e0       	ldi	r31, 0x06	; 6
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.Wifi_RTS_CNTL = PORT_OPC_PULLUP_gc;
     590:	88 e1       	ldi	r24, 0x18	; 24
     592:	81 8b       	std	Z+17, r24	; 0x11
    //Wifi_Flow_Port.DIRSET = (1<<Wifi_CTS_pin);
    //Wifi_Flow_Port.OUTCLR = (1<<Wifi_CTS_pin);


	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     594:	a0 ea       	ldi	r26, 0xA0	; 160
     596:	ba e0       	ldi	r27, 0x0A	; 10
     598:	80 91 a4 0a 	lds	r24, 0x0AA4
     59c:	8f 7e       	andi	r24, 0xEF	; 239
     59e:	14 96       	adiw	r26, 0x04	; 4
     5a0:	8c 93       	st	X, r24
     5a2:	14 97       	sbiw	r26, 0x04	; 4
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     5a4:	80 91 a4 0a 	lds	r24, 0x0AA4
     5a8:	87 7f       	andi	r24, 0xF7	; 247
     5aa:	14 96       	adiw	r26, 0x04	; 4
     5ac:	8c 93       	st	X, r24
     5ae:	14 97       	sbiw	r26, 0x04	; 4
	//_delay_ms(1000);


	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     5b0:	e0 e8       	ldi	r30, 0x80	; 128
     5b2:	f6 e0       	ldi	r31, 0x06	; 6
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     5b8:	84 e0       	ldi	r24, 0x04	; 4
     5ba:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	15 96       	adiw	r26, 0x05	; 5
     5c0:	8c 93       	st	X, r24
     5c2:	15 97       	sbiw	r26, 0x05	; 5
	 	    	
	if(baud == 9600){
     5c4:	20 38       	cpi	r18, 0x80	; 128
     5c6:	95 e2       	ldi	r25, 0x25	; 37
     5c8:	39 07       	cpc	r19, r25
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	49 07       	cpc	r20, r25
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	59 07       	cpc	r21, r25
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <Wifi_Init+0x5c>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     5d4:	8f e5       	ldi	r24, 0x5F	; 95
     5d6:	1b c0       	rjmp	.+54     	; 0x60e <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     5d8:	20 30       	cpi	r18, 0x00	; 0
     5da:	92 ec       	ldi	r25, 0xC2	; 194
     5dc:	39 07       	cpc	r19, r25
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	49 07       	cpc	r20, r25
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	59 07       	cpc	r21, r25
     5e6:	11 f4       	brne	.+4      	; 0x5ec <Wifi_Init+0x70>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     5e8:	87 e0       	ldi	r24, 0x07	; 7
     5ea:	11 c0       	rjmp	.+34     	; 0x60e <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     5ec:	20 30       	cpi	r18, 0x00	; 0
     5ee:	94 e8       	ldi	r25, 0x84	; 132
     5f0:	39 07       	cpc	r19, r25
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	49 07       	cpc	r20, r25
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	59 07       	cpc	r21, r25
     5fa:	49 f0       	breq	.+18     	; 0x60e <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     5fc:	20 30       	cpi	r18, 0x00	; 0
     5fe:	88 e0       	ldi	r24, 0x08	; 8
     600:	38 07       	cpc	r19, r24
     602:	87 e0       	ldi	r24, 0x07	; 7
     604:	48 07       	cpc	r20, r24
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	58 07       	cpc	r21, r24
     60a:	29 f4       	brne	.+10     	; 0x616 <Wifi_Init+0x9a>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	16 96       	adiw	r26, 0x06	; 6
     610:	8c 93       	st	X, r24
     612:	16 97       	sbiw	r26, 0x06	; 6
     614:	08 c0       	rjmp	.+16     	; 0x626 <Wifi_Init+0xaa>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     616:	20 50       	subi	r18, 0x00	; 0
     618:	30 41       	sbci	r19, 0x10	; 16
     61a:	4e 40       	sbci	r20, 0x0E	; 14
     61c:	50 40       	sbci	r21, 0x00	; 0
     61e:	29 f4       	brne	.+10     	; 0x62a <Wifi_Init+0xae>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     620:	16 96       	adiw	r26, 0x06	; 6
     622:	1c 92       	st	X, r1
     624:	16 97       	sbiw	r26, 0x06	; 6
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     626:	17 96       	adiw	r26, 0x07	; 7
     628:	1c 92       	st	X, r1
		//Wifi_Usart.CTRLB |= USART_CLK2X_bm;
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     62a:	e0 ea       	ldi	r30, 0xA0	; 160
     62c:	fa e0       	ldi	r31, 0x0A	; 10
     62e:	80 91 a4 0a 	lds	r24, 0x0AA4
     632:	80 61       	ori	r24, 0x10	; 16
     634:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     636:	80 91 a4 0a 	lds	r24, 0x0AA4
     63a:	88 60       	ori	r24, 0x08	; 8
     63c:	84 83       	std	Z+4, r24	; 0x04

	Wifi_ClearBuffer();
     63e:	0e 94 93 02 	call	0x526	; 0x526 <Wifi_ClearBuffer>
}
     642:	08 95       	ret

00000644 <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     644:	88 23       	and	r24, r24
     646:	21 f0       	breq	.+8      	; 0x650 <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     648:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
     64c:	88 23       	and	r24, r24
     64e:	e1 f3       	breq	.-8      	; 0x648 <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     650:	e0 91 14 34 	lds	r30, 0x3414
     654:	f0 91 15 34 	lds	r31, 0x3415
     658:	e3 51       	subi	r30, 0x13	; 19
     65a:	f2 4c       	sbci	r31, 0xC2	; 194
     65c:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     65e:	80 91 14 34 	lds	r24, 0x3414
     662:	90 91 15 34 	lds	r25, 0x3415
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	80 93 14 34 	sts	0x3414, r24
     66c:	90 93 15 34 	sts	0x3415, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     670:	80 91 14 34 	lds	r24, 0x3414
     674:	90 91 15 34 	lds	r25, 0x3415
     678:	80 50       	subi	r24, 0x00	; 0
     67a:	94 40       	sbci	r25, 0x04	; 4
     67c:	20 f0       	brcs	.+8      	; 0x686 <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     67e:	10 92 14 34 	sts	0x3414, r1
     682:	10 92 15 34 	sts	0x3415, r1
	}
	return tmp;
}
     686:	8e 2f       	mov	r24, r30
     688:	08 95       	ret

0000068a <Wifi_Connected>:
    timeString[10] = 0;
    time_secs = atol(timeString);
    return true;
}

bool Wifi_Connected(uint16_t timeOut){
     68a:	ac 01       	movw	r20, r24
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	66 e6       	ldi	r22, 0x66	; 102
     692:	7e e0       	ldi	r23, 0x0E	; 14
     694:	0d c0       	rjmp	.+26     	; 0x6b0 <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     696:	80 91 a8 06 	lds	r24, 0x06A8
     69a:	87 ff       	sbrs	r24, 7
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <Wifi_Connected+0x1c>
			connected = true;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 24 34 	sts	0x3424, r24
     6a4:	08 95       	ret
     6a6:	fb 01       	movw	r30, r22
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <Wifi_Connected+0x1e>
    time_secs = atol(timeString);
    return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     6ac:	2f 5f       	subi	r18, 0xFF	; 255
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
     6b0:	24 17       	cp	r18, r20
     6b2:	35 07       	cpc	r19, r21
     6b4:	80 f3       	brcs	.-32     	; 0x696 <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     6b6:	10 92 24 34 	sts	0x3424, r1
     6ba:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     6bc:	08 95       	ret

000006be <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     6be:	e0 ea       	ldi	r30, 0xA0	; 160
     6c0:	f6 e0       	ldi	r31, 0x06	; 6
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     6c6:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     6c8:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     6ca:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     6cc:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	8c 67       	ori	r24, 0x7C	; 124
     6d2:	82 83       	std	Z+2, r24	; 0x02
}
     6d4:	08 95       	ret

000006d6 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6d6:	e0 ea       	ldi	r30, 0xA0	; 160
     6d8:	f6 e0       	ldi	r31, 0x06	; 6
     6da:	80 85       	ldd	r24, Z+8	; 0x08
}
     6dc:	8c 77       	andi	r24, 0x7C	; 124
     6de:	08 95       	ret

000006e0 <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6e0:	40 91 a8 06 	lds	r20, 0x06A8
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <Dpad_CheckButton+0x10>
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	8a 95       	dec	r24
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <Dpad_CheckButton+0xc>
     6f4:	4c 77       	andi	r20, 0x7C	; 124
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	24 23       	and	r18, r20
     6fa:	35 23       	and	r19, r21
     6fc:	12 16       	cp	r1, r18
     6fe:	13 06       	cpc	r1, r19
     700:	0c f0       	brlt	.+2      	; 0x704 <Dpad_CheckButton+0x24>
     702:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     704:	89 2f       	mov	r24, r25
     706:	08 95       	ret

00000708 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     708:	e0 e2       	ldi	r30, 0x20	; 32
     70a:	f6 e0       	ldi	r31, 0x06	; 6
     70c:	81 81       	ldd	r24, Z+1	; 0x01
     70e:	83 6f       	ori	r24, 0xF3	; 243
     710:	81 83       	std	Z+1, r24	; 0x01
}
     712:	08 95       	ret

00000714 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     714:	21 e0       	ldi	r18, 0x01	; 1
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	02 c0       	rjmp	.+4      	; 0x71e <Leds_Set+0xa>
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	8a 95       	dec	r24
     720:	e2 f7       	brpl	.-8      	; 0x71a <Leds_Set+0x6>
     722:	e0 e2       	ldi	r30, 0x20	; 32
     724:	f6 e0       	ldi	r31, 0x06	; 6
     726:	25 83       	std	Z+5, r18	; 0x05
}
     728:	08 95       	ret

0000072a <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	02 c0       	rjmp	.+4      	; 0x734 <Leds_Clear+0xa>
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	8a 95       	dec	r24
     736:	e2 f7       	brpl	.-8      	; 0x730 <Leds_Clear+0x6>
     738:	e0 e2       	ldi	r30, 0x20	; 32
     73a:	f6 e0       	ldi	r31, 0x06	; 6
     73c:	26 83       	std	Z+6, r18	; 0x06
}
     73e:	08 95       	ret

00000740 <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     740:	21 e0       	ldi	r18, 0x01	; 1
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <Leds_Toggle+0xa>
     746:	22 0f       	add	r18, r18
     748:	33 1f       	adc	r19, r19
     74a:	8a 95       	dec	r24
     74c:	e2 f7       	brpl	.-8      	; 0x746 <Leds_Toggle+0x6>
     74e:	e0 e2       	ldi	r30, 0x20	; 32
     750:	f6 e0       	ldi	r31, 0x06	; 6
     752:	27 83       	std	Z+7, r18	; 0x07
}
     754:	08 95       	ret

00000756 <Rs232_Init>:
//uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     756:	e0 e6       	ldi	r30, 0x60	; 96
     758:	f6 e0       	ldi	r31, 0x06	; 6
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     762:	e0 ea       	ldi	r30, 0xA0	; 160
     764:	f9 e0       	ldi	r31, 0x09	; 9
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     76a:	8f e5       	ldi	r24, 0x5F	; 95
     76c:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     76e:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     770:	84 81       	ldd	r24, Z+4	; 0x04
     772:	80 61       	ori	r24, 0x10	; 16
     774:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     776:	84 81       	ldd	r24, Z+4	; 0x04
     778:	88 60       	ori	r24, 0x08	; 8
     77a:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_HI_gc;
     77c:	83 81       	ldd	r24, Z+3	; 0x03
     77e:	80 63       	ori	r24, 0x30	; 48
     780:	83 83       	std	Z+3, r24	; 0x03
}
     782:	08 95       	ret

00000784 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     784:	20 91 2d 34 	lds	r18, 0x342D
     788:	30 91 2e 34 	lds	r19, 0x342E
     78c:	80 91 2b 34 	lds	r24, 0x342B
     790:	90 91 2c 34 	lds	r25, 0x342C
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	28 17       	cp	r18, r24
     798:	39 07       	cpc	r19, r25
     79a:	09 f0       	breq	.+2      	; 0x79e <Rs232_CharReadyToRead+0x1a>
     79c:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     79e:	84 2f       	mov	r24, r20
     7a0:	08 95       	ret

000007a2 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     7a2:	88 23       	and	r24, r24
     7a4:	59 f0       	breq	.+22     	; 0x7bc <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     7a6:	20 91 2d 34 	lds	r18, 0x342D
     7aa:	30 91 2e 34 	lds	r19, 0x342E
     7ae:	80 91 2b 34 	lds	r24, 0x342B
     7b2:	90 91 2c 34 	lds	r25, 0x342C
     7b6:	28 17       	cp	r18, r24
     7b8:	39 07       	cpc	r19, r25
     7ba:	a9 f3       	breq	.-22     	; 0x7a6 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     7bc:	e0 91 2b 34 	lds	r30, 0x342B
     7c0:	f0 91 2c 34 	lds	r31, 0x342C
     7c4:	ea 5c       	subi	r30, 0xCA	; 202
     7c6:	f6 4a       	sbci	r31, 0xA6	; 166
     7c8:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     7ca:	80 91 2b 34 	lds	r24, 0x342B
     7ce:	90 91 2c 34 	lds	r25, 0x342C
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	80 93 2b 34 	sts	0x342B, r24
     7d8:	90 93 2c 34 	sts	0x342C, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     7dc:	80 91 2b 34 	lds	r24, 0x342B
     7e0:	90 91 2c 34 	lds	r25, 0x342C
     7e4:	80 50       	subi	r24, 0x00	; 0
     7e6:	94 40       	sbci	r25, 0x04	; 4
     7e8:	20 f0       	brcs	.+8      	; 0x7f2 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     7ea:	10 92 2b 34 	sts	0x342B, r1
     7ee:	10 92 2c 34 	sts	0x342C, r1
	}
	return tmp;
}
     7f2:	8e 2f       	mov	r24, r30
     7f4:	08 95       	ret

000007f6 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     7f6:	80 91 2d 34 	lds	r24, 0x342D
     7fa:	90 91 2e 34 	lds	r25, 0x342E
     7fe:	80 93 2b 34 	sts	0x342B, r24
     802:	90 93 2c 34 	sts	0x342C, r25
}
     806:	08 95       	ret

00000808 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     808:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     80a:	80 91 a1 09 	lds	r24, 0x09A1
     80e:	85 ff       	sbrs	r24, 5
     810:	fc cf       	rjmp	.-8      	; 0x80a <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     812:	90 93 a0 09 	sts	0x09A0, r25
}
     816:	08 95       	ret

00000818 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	0b b6       	in	r0, 0x3b	; 59
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
     830:	e0 91 2d 34 	lds	r30, 0x342D
     834:	f0 91 2e 34 	lds	r31, 0x342E
     838:	80 91 a0 09 	lds	r24, 0x09A0
     83c:	ea 5c       	subi	r30, 0xCA	; 202
     83e:	f6 4a       	sbci	r31, 0xA6	; 166
     840:	80 83       	st	Z, r24

	if(rs232Recording){
     842:	80 91 30 34 	lds	r24, 0x3430
     846:	88 23       	and	r24, r24
     848:	61 f0       	breq	.+24     	; 0x862 <__vector_88+0x4a>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
     84a:	e0 91 2d 34 	lds	r30, 0x342D
     84e:	f0 91 2e 34 	lds	r31, 0x342E
     852:	ea 5c       	subi	r30, 0xCA	; 202
     854:	f6 4a       	sbci	r31, 0xA6	; 166
     856:	80 81       	ld	r24, Z
     858:	8a 30       	cpi	r24, 0x0A	; 10
     85a:	19 f4       	brne	.+6      	; 0x862 <__vector_88+0x4a>
            okToSendAirQuality = true;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 2f 34 	sts	0x342F, r24
		}
	}
	Rs232_writeLocation++;
     862:	80 91 2d 34 	lds	r24, 0x342D
     866:	90 91 2e 34 	lds	r25, 0x342E
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	80 93 2d 34 	sts	0x342D, r24
     870:	90 93 2e 34 	sts	0x342E, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
     874:	80 91 2d 34 	lds	r24, 0x342D
     878:	90 91 2e 34 	lds	r25, 0x342E
     87c:	80 50       	subi	r24, 0x00	; 0
     87e:	94 40       	sbci	r25, 0x04	; 4
     880:	20 f0       	brcs	.+8      	; 0x88a <__vector_88+0x72>
		Rs232_writeLocation = 0;
     882:	10 92 2d 34 	sts	0x342D, r1
     886:	10 92 2e 34 	sts	0x342E, r1
	}
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0b be       	out	0x3b, r0	; 59
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     8a2:	82 e3       	ldi	r24, 0x32	; 50
     8a4:	80 93 b0 34 	sts	0x34B0, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	e0 ec       	ldi	r30, 0xC0	; 192
     8ac:	f9 e0       	ldi	r31, 0x09	; 9
     8ae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8b0:	80 91 c2 09 	lds	r24, 0x09C2
     8b4:	87 ff       	sbrs	r24, 7
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <wait_ready+0xe>
	return SD_SPI.DATA;
     8b8:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8bc:	e0 ec       	ldi	r30, 0xC0	; 192
     8be:	f9 e0       	ldi	r31, 0x09	; 9
     8c0:	2f ef       	ldi	r18, 0xFF	; 255
     8c2:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8c4:	80 91 c2 09 	lds	r24, 0x09C2
     8c8:	87 ff       	sbrs	r24, 7
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <wait_ready+0x22>
	return SD_SPI.DATA;
     8cc:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     8d0:	9f 3f       	cpi	r25, 0xFF	; 255
     8d2:	21 f0       	breq	.+8      	; 0x8dc <wait_ready+0x3a>
     8d4:	80 91 b0 34 	lds	r24, 0x34B0
     8d8:	88 23       	and	r24, r24
     8da:	99 f7       	brne	.-26     	; 0x8c2 <wait_ready+0x20>

	return res;
}
     8dc:	89 2f       	mov	r24, r25
     8de:	08 95       	ret

000008e0 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
	CS_LOW();
     8e6:	c0 e6       	ldi	r28, 0x60	; 96
     8e8:	d6 e0       	ldi	r29, 0x06	; 6
     8ea:	10 e1       	ldi	r17, 0x10	; 16
     8ec:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     8ee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <wait_ready>
     8f2:	8f 3f       	cpi	r24, 0xFF	; 255
     8f4:	11 f4       	brne	.+4      	; 0x8fa <select+0x1a>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0c c0       	rjmp	.+24     	; 0x912 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     8fa:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	e0 ec       	ldi	r30, 0xC0	; 192
     900:	f9 e0       	ldi	r31, 0x09	; 9
     902:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     904:	80 91 c2 09 	lds	r24, 0x09C2
     908:	87 ff       	sbrs	r24, 7
     90a:	fc cf       	rjmp	.-8      	; 0x904 <select+0x24>
	return SD_SPI.DATA;
     90c:	80 91 c3 09 	lds	r24, 0x09C3
     910:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	08 95       	ret

0000091a <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     91a:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     91c:	84 e1       	ldi	r24, 0x14	; 20
     91e:	80 93 af 34 	sts	0x34AF, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     922:	a0 ec       	ldi	r26, 0xC0	; 192
     924:	b9 e0       	ldi	r27, 0x09	; 9
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	13 96       	adiw	r26, 0x03	; 3
     92a:	9c 93       	st	X, r25
     92c:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     92e:	80 91 c2 09 	lds	r24, 0x09C2
     932:	87 ff       	sbrs	r24, 7
     934:	fc cf       	rjmp	.-8      	; 0x92e <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     936:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     93a:	8f 3f       	cpi	r24, 0xFF	; 255
     93c:	29 f4       	brne	.+10     	; 0x948 <rcvr_datablock+0x2e>
     93e:	80 91 af 34 	lds	r24, 0x34AF
     942:	88 23       	and	r24, r24
     944:	89 f7       	brne	.-30     	; 0x928 <rcvr_datablock+0xe>
     946:	49 c0       	rjmp	.+146    	; 0x9da <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     948:	8e 3f       	cpi	r24, 0xFE	; 254
     94a:	09 f0       	breq	.+2      	; 0x94e <rcvr_datablock+0x34>
     94c:	46 c0       	rjmp	.+140    	; 0x9da <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     94e:	a0 ec       	ldi	r26, 0xC0	; 192
     950:	b9 e0       	ldi	r27, 0x09	; 9
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	13 96       	adiw	r26, 0x03	; 3
     956:	9c 93       	st	X, r25
     958:	13 97       	sbiw	r26, 0x03	; 3
     95a:	80 91 c2 09 	lds	r24, 0x09C2
     95e:	87 ff       	sbrs	r24, 7
     960:	fc cf       	rjmp	.-8      	; 0x95a <rcvr_datablock+0x40>
     962:	80 91 c3 09 	lds	r24, 0x09C3
     966:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     968:	13 96       	adiw	r26, 0x03	; 3
     96a:	9c 93       	st	X, r25
     96c:	13 97       	sbiw	r26, 0x03	; 3
     96e:	80 91 c2 09 	lds	r24, 0x09C2
     972:	87 ff       	sbrs	r24, 7
     974:	fc cf       	rjmp	.-8      	; 0x96e <rcvr_datablock+0x54>
     976:	80 91 c3 09 	lds	r24, 0x09C3
     97a:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     97c:	13 96       	adiw	r26, 0x03	; 3
     97e:	9c 93       	st	X, r25
     980:	13 97       	sbiw	r26, 0x03	; 3
     982:	80 91 c2 09 	lds	r24, 0x09C2
     986:	87 ff       	sbrs	r24, 7
     988:	fc cf       	rjmp	.-8      	; 0x982 <rcvr_datablock+0x68>
     98a:	80 91 c3 09 	lds	r24, 0x09C3
     98e:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	9c 93       	st	X, r25
     994:	13 97       	sbiw	r26, 0x03	; 3
     996:	80 91 c2 09 	lds	r24, 0x09C2
     99a:	87 ff       	sbrs	r24, 7
     99c:	fc cf       	rjmp	.-8      	; 0x996 <rcvr_datablock+0x7c>
     99e:	80 91 c3 09 	lds	r24, 0x09C3
     9a2:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     9a4:	64 50       	subi	r22, 0x04	; 4
     9a6:	70 40       	sbci	r23, 0x00	; 0
     9a8:	11 f0       	breq	.+4      	; 0x9ae <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     9aa:	34 96       	adiw	r30, 0x04	; 4
     9ac:	d3 cf       	rjmp	.-90     	; 0x954 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	e0 ec       	ldi	r30, 0xC0	; 192
     9b2:	f9 e0       	ldi	r31, 0x09	; 9
     9b4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9b6:	80 91 c2 09 	lds	r24, 0x09C2
     9ba:	87 ff       	sbrs	r24, 7
     9bc:	fc cf       	rjmp	.-8      	; 0x9b6 <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     9be:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	e0 ec       	ldi	r30, 0xC0	; 192
     9c6:	f9 e0       	ldi	r31, 0x09	; 9
     9c8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9ca:	80 91 c2 09 	lds	r24, 0x09C2
     9ce:	87 ff       	sbrs	r24, 7
     9d0:	fc cf       	rjmp	.-8      	; 0x9ca <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     9d2:	80 91 c3 09 	lds	r24, 0x09C3
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     9da:	80 e0       	ldi	r24, 0x00	; 0
}
     9dc:	08 95       	ret

000009de <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
     9e6:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     9e8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <wait_ready>
     9ec:	8f 3f       	cpi	r24, 0xFF	; 255
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <xmit_datablock+0x16>
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	3f c0       	rjmp	.+126    	; 0xa72 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     9f4:	e0 ec       	ldi	r30, 0xC0	; 192
     9f6:	f9 e0       	ldi	r31, 0x09	; 9
     9f8:	13 83       	std	Z+3, r17	; 0x03
     9fa:	80 91 c2 09 	lds	r24, 0x09C2
     9fe:	87 ff       	sbrs	r24, 7
     a00:	fc cf       	rjmp	.-8      	; 0x9fa <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     a02:	1d 3f       	cpi	r17, 0xFD	; 253
     a04:	11 f4       	brne	.+4      	; 0xa0a <xmit_datablock+0x2c>
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	34 c0       	rjmp	.+104    	; 0xa72 <xmit_datablock+0x94>
     a0a:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     a0c:	e0 ec       	ldi	r30, 0xC0	; 192
     a0e:	f9 e0       	ldi	r31, 0x09	; 9
     a10:	88 81       	ld	r24, Y
     a12:	83 83       	std	Z+3, r24	; 0x03
     a14:	80 91 c2 09 	lds	r24, 0x09C2
     a18:	87 ff       	sbrs	r24, 7
     a1a:	fc cf       	rjmp	.-8      	; 0xa14 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	83 83       	std	Z+3, r24	; 0x03
     a20:	80 91 c2 09 	lds	r24, 0x09C2
     a24:	87 ff       	sbrs	r24, 7
     a26:	fc cf       	rjmp	.-8      	; 0xa20 <xmit_datablock+0x42>
		} while (--wc);
     a28:	91 50       	subi	r25, 0x01	; 1
     a2a:	11 f0       	breq	.+4      	; 0xa30 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a2c:	22 96       	adiw	r28, 0x02	; 2
     a2e:	f0 cf       	rjmp	.-32     	; 0xa10 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	e0 ec       	ldi	r30, 0xC0	; 192
     a34:	f9 e0       	ldi	r31, 0x09	; 9
     a36:	83 83       	std	Z+3, r24	; 0x03
     a38:	80 91 c2 09 	lds	r24, 0x09C2
     a3c:	87 ff       	sbrs	r24, 7
     a3e:	fc cf       	rjmp	.-8      	; 0xa38 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	e0 ec       	ldi	r30, 0xC0	; 192
     a44:	f9 e0       	ldi	r31, 0x09	; 9
     a46:	83 83       	std	Z+3, r24	; 0x03
     a48:	80 91 c2 09 	lds	r24, 0x09C2
     a4c:	87 ff       	sbrs	r24, 7
     a4e:	fc cf       	rjmp	.-8      	; 0xa48 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	e0 ec       	ldi	r30, 0xC0	; 192
     a54:	f9 e0       	ldi	r31, 0x09	; 9
     a56:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a58:	80 91 c2 09 	lds	r24, 0x09C2
     a5c:	87 ff       	sbrs	r24, 7
     a5e:	fc cf       	rjmp	.-8      	; 0xa58 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     a60:	80 91 c3 09 	lds	r24, 0x09C3
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	8f 71       	andi	r24, 0x1F	; 31
     a68:	85 30       	cpi	r24, 0x05	; 5
     a6a:	09 f0       	breq	.+2      	; 0xa6e <xmit_datablock+0x90>
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     a72:	89 2f       	mov	r24, r25
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	08 95       	ret

00000a7c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	d8 2e       	mov	r13, r24
     a88:	7a 01       	movw	r14, r20
     a8a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     a8c:	87 ff       	sbrs	r24, 7
     a8e:	0c c0       	rjmp	.+24     	; 0xaa8 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     a90:	87 e7       	ldi	r24, 0x77	; 119
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
		if (res > 1) return res;
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <send_cmd+0x28>
     aa2:	72 c0       	rjmp	.+228    	; 0xb88 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     aa4:	8f e7       	ldi	r24, 0x7F	; 127
     aa6:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     aa8:	80 e1       	ldi	r24, 0x10	; 16
     aaa:	e0 e6       	ldi	r30, 0x60	; 96
     aac:	f6 e0       	ldi	r31, 0x06	; 6
     aae:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	e0 ec       	ldi	r30, 0xC0	; 192
     ab4:	f9 e0       	ldi	r31, 0x09	; 9
     ab6:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ab8:	80 91 c2 09 	lds	r24, 0x09C2
     abc:	87 ff       	sbrs	r24, 7
     abe:	fc cf       	rjmp	.-8      	; 0xab8 <send_cmd+0x3c>
	return SD_SPI.DATA;
     ac0:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     ac4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <select>
     ac8:	88 23       	and	r24, r24
     aca:	11 f4       	brne	.+4      	; 0xad0 <send_cmd+0x54>
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	5c c0       	rjmp	.+184    	; 0xb88 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     ad0:	e0 ec       	ldi	r30, 0xC0	; 192
     ad2:	f9 e0       	ldi	r31, 0x09	; 9
     ad4:	d3 82       	std	Z+3, r13	; 0x03
     ad6:	80 91 c2 09 	lds	r24, 0x09C2
     ada:	87 ff       	sbrs	r24, 7
     adc:	fc cf       	rjmp	.-8      	; 0xad6 <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     ade:	81 2f       	mov	r24, r17
     ae0:	99 27       	eor	r25, r25
     ae2:	aa 27       	eor	r26, r26
     ae4:	bb 27       	eor	r27, r27
     ae6:	e0 ec       	ldi	r30, 0xC0	; 192
     ae8:	f9 e0       	ldi	r31, 0x09	; 9
     aea:	83 83       	std	Z+3, r24	; 0x03
     aec:	80 91 c2 09 	lds	r24, 0x09C2
     af0:	87 ff       	sbrs	r24, 7
     af2:	fc cf       	rjmp	.-8      	; 0xaec <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     af4:	c8 01       	movw	r24, r16
     af6:	aa 27       	eor	r26, r26
     af8:	bb 27       	eor	r27, r27
     afa:	e0 ec       	ldi	r30, 0xC0	; 192
     afc:	f9 e0       	ldi	r31, 0x09	; 9
     afe:	83 83       	std	Z+3, r24	; 0x03
     b00:	80 91 c2 09 	lds	r24, 0x09C2
     b04:	87 ff       	sbrs	r24, 7
     b06:	fc cf       	rjmp	.-8      	; 0xb00 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     b08:	bb 27       	eor	r27, r27
     b0a:	a1 2f       	mov	r26, r17
     b0c:	90 2f       	mov	r25, r16
     b0e:	8f 2d       	mov	r24, r15
     b10:	e0 ec       	ldi	r30, 0xC0	; 192
     b12:	f9 e0       	ldi	r31, 0x09	; 9
     b14:	83 83       	std	Z+3, r24	; 0x03
     b16:	80 91 c2 09 	lds	r24, 0x09C2
     b1a:	87 ff       	sbrs	r24, 7
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     b1e:	e0 ec       	ldi	r30, 0xC0	; 192
     b20:	f9 e0       	ldi	r31, 0x09	; 9
     b22:	e3 82       	std	Z+3, r14	; 0x03
     b24:	80 91 c2 09 	lds	r24, 0x09C2
     b28:	87 ff       	sbrs	r24, 7
     b2a:	fc cf       	rjmp	.-8      	; 0xb24 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b2c:	80 e4       	ldi	r24, 0x40	; 64
     b2e:	d8 16       	cp	r13, r24
     b30:	11 f4       	brne	.+4      	; 0xb36 <send_cmd+0xba>
     b32:	85 e9       	ldi	r24, 0x95	; 149
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b36:	88 e4       	ldi	r24, 0x48	; 72
     b38:	d8 16       	cp	r13, r24
     b3a:	11 f4       	brne	.+4      	; 0xb40 <send_cmd+0xc4>
     b3c:	87 e8       	ldi	r24, 0x87	; 135
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <send_cmd+0xc6>
     b40:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b42:	e0 ec       	ldi	r30, 0xC0	; 192
     b44:	f9 e0       	ldi	r31, 0x09	; 9
     b46:	83 83       	std	Z+3, r24	; 0x03
     b48:	80 91 c2 09 	lds	r24, 0x09C2
     b4c:	87 ff       	sbrs	r24, 7
     b4e:	fc cf       	rjmp	.-8      	; 0xb48 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     b50:	8c e4       	ldi	r24, 0x4C	; 76
     b52:	d8 16       	cp	r13, r24
     b54:	51 f4       	brne	.+20     	; 0xb6a <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	e0 ec       	ldi	r30, 0xC0	; 192
     b5a:	f9 e0       	ldi	r31, 0x09	; 9
     b5c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b5e:	80 91 c2 09 	lds	r24, 0x09C2
     b62:	87 ff       	sbrs	r24, 7
     b64:	fc cf       	rjmp	.-8      	; 0xb5e <send_cmd+0xe2>
	return SD_SPI.DATA;
     b66:	80 91 c3 09 	lds	r24, 0x09C3
     b6a:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b6c:	e0 ec       	ldi	r30, 0xC0	; 192
     b6e:	f9 e0       	ldi	r31, 0x09	; 9
     b70:	2f ef       	ldi	r18, 0xFF	; 255
     b72:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b74:	80 91 c2 09 	lds	r24, 0x09C2
     b78:	87 ff       	sbrs	r24, 7
     b7a:	fc cf       	rjmp	.-8      	; 0xb74 <send_cmd+0xf8>
	return SD_SPI.DATA;
     b7c:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     b80:	87 ff       	sbrs	r24, 7
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <send_cmd+0x10c>
     b84:	91 50       	subi	r25, 0x01	; 1
     b86:	a9 f7       	brne	.-22     	; 0xb72 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <disk_initialize+0xe>
     ba2:	0f 92       	push	r0
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     ba8:	80 91 dc 33 	lds	r24, 0x33DC
     bac:	81 fd       	sbrc	r24, 1
     bae:	cc c0       	rjmp	.+408    	; 0xd48 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     bb0:	e0 e6       	ldi	r30, 0x60	; 96
     bb2:	f6 e0       	ldi	r31, 0x06	; 6
     bb4:	80 eb       	ldi	r24, 0xB0	; 176
     bb6:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     bb8:	88 e3       	ldi	r24, 0x38	; 56
     bba:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     bbc:	14 82       	std	Z+4, r1	; 0x04
     bbe:	8c e2       	ldi	r24, 0x2C	; 44
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	20 e7       	ldi	r18, 0x70	; 112
     bc4:	31 e0       	ldi	r19, 0x01	; 1
     bc6:	f9 01       	movw	r30, r18
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bcc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bce:	d9 f7       	brne	.-10     	; 0xbc6 <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     bd0:	83 e5       	ldi	r24, 0x53	; 83
     bd2:	80 93 c0 09 	sts	0x09C0, r24
     bd6:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bd8:	e0 ec       	ldi	r30, 0xC0	; 192
     bda:	f9 e0       	ldi	r31, 0x09	; 9
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     be0:	80 91 c2 09 	lds	r24, 0x09C2
     be4:	87 ff       	sbrs	r24, 7
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     be8:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     bec:	91 50       	subi	r25, 0x01	; 1
     bee:	b9 f7       	brne	.-18     	; 0xbde <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     bf0:	80 e4       	ldi	r24, 0x40	; 64
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	09 f0       	breq	.+2      	; 0xc04 <disk_initialize+0x70>
     c02:	87 c0       	rjmp	.+270    	; 0xd12 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     c04:	84 e6       	ldi	r24, 0x64	; 100
     c06:	80 93 af 34 	sts	0x34AF, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     c0a:	88 e4       	ldi	r24, 0x48	; 72
     c0c:	4a ea       	ldi	r20, 0xAA	; 170
     c0e:	51 e0       	ldi	r21, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	09 f0       	breq	.+2      	; 0xc1e <disk_initialize+0x8a>
     c1c:	53 c0       	rjmp	.+166    	; 0xcc4 <disk_initialize+0x130>
     c1e:	7e 01       	movw	r14, r28
     c20:	08 94       	sec
     c22:	e1 1c       	adc	r14, r1
     c24:	f1 1c       	adc	r15, r1
     c26:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c28:	e0 ec       	ldi	r30, 0xC0	; 192
     c2a:	f9 e0       	ldi	r31, 0x09	; 9
     c2c:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c2e:	9e 01       	movw	r18, r28
     c30:	2b 5f       	subi	r18, 0xFB	; 251
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c34:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c36:	80 91 c2 09 	lds	r24, 0x09C2
     c3a:	87 ff       	sbrs	r24, 7
     c3c:	fc cf       	rjmp	.-8      	; 0xc36 <disk_initialize+0xa2>
	return SD_SPI.DATA;
     c3e:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c42:	d8 01       	movw	r26, r16
     c44:	8d 93       	st	X+, r24
     c46:	8d 01       	movw	r16, r26
     c48:	a2 17       	cp	r26, r18
     c4a:	b3 07       	cpc	r27, r19
     c4c:	99 f7       	brne	.-26     	; 0xc34 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	09 f0       	breq	.+2      	; 0xc56 <disk_initialize+0xc2>
     c54:	5e c0       	rjmp	.+188    	; 0xd12 <disk_initialize+0x17e>
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	8a 3a       	cpi	r24, 0xAA	; 170
     c5a:	09 f0       	breq	.+2      	; 0xc5e <disk_initialize+0xca>
     c5c:	5a c0       	rjmp	.+180    	; 0xd12 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     c5e:	80 91 af 34 	lds	r24, 0x34AF
     c62:	88 23       	and	r24, r24
     c64:	49 f0       	breq	.+18     	; 0xc78 <disk_initialize+0xe4>
     c66:	89 ee       	ldi	r24, 0xE9	; 233
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e4       	ldi	r23, 0x40	; 64
     c70:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     c74:	88 23       	and	r24, r24
     c76:	99 f7       	brne	.-26     	; 0xc5e <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     c78:	80 91 af 34 	lds	r24, 0x34AF
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <disk_initialize+0xee>
     c80:	48 c0       	rjmp	.+144    	; 0xd12 <disk_initialize+0x17e>
     c82:	8a e7       	ldi	r24, 0x7A	; 122
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     c90:	88 23       	and	r24, r24
     c92:	09 f0       	breq	.+2      	; 0xc96 <disk_initialize+0x102>
     c94:	3e c0       	rjmp	.+124    	; 0xd12 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c96:	e0 ec       	ldi	r30, 0xC0	; 192
     c98:	f9 e0       	ldi	r31, 0x09	; 9
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c9e:	80 91 c2 09 	lds	r24, 0x09C2
     ca2:	87 ff       	sbrs	r24, 7
     ca4:	fc cf       	rjmp	.-8      	; 0xc9e <disk_initialize+0x10a>
	return SD_SPI.DATA;
     ca6:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     caa:	d7 01       	movw	r26, r14
     cac:	8d 93       	st	X+, r24
     cae:	7d 01       	movw	r14, r26
     cb0:	a0 17       	cp	r26, r16
     cb2:	b1 07       	cpc	r27, r17
     cb4:	99 f7       	brne	.-26     	; 0xc9c <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	86 fd       	sbrc	r24, 6
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <disk_initialize+0x12c>
     cbc:	14 e0       	ldi	r17, 0x04	; 4
     cbe:	2a c0       	rjmp	.+84     	; 0xd14 <disk_initialize+0x180>
     cc0:	1c e0       	ldi	r17, 0x0C	; 12
     cc2:	28 c0       	rjmp	.+80     	; 0xd14 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     cc4:	89 ee       	ldi	r24, 0xE9	; 233
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	18 f0       	brcs	.+6      	; 0xcdc <disk_initialize+0x148>
     cd6:	01 e4       	ldi	r16, 0x41	; 65
     cd8:	11 e0       	ldi	r17, 0x01	; 1
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <disk_initialize+0x14c>
     cdc:	09 ee       	ldi	r16, 0xE9	; 233
     cde:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     ce0:	80 91 af 34 	lds	r24, 0x34AF
     ce4:	88 23       	and	r24, r24
     ce6:	49 f0       	breq	.+18     	; 0xcfa <disk_initialize+0x166>
     ce8:	80 2f       	mov	r24, r16
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     cf6:	88 23       	and	r24, r24
     cf8:	99 f7       	brne	.-26     	; 0xce0 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     cfa:	80 91 af 34 	lds	r24, 0x34AF
     cfe:	88 23       	and	r24, r24
     d00:	41 f0       	breq	.+16     	; 0xd12 <disk_initialize+0x17e>
     d02:	80 e5       	ldi	r24, 0x50	; 80
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	52 e0       	ldi	r21, 0x02	; 2
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     d10:	81 11       	cpse	r24, r1
     d12:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     d14:	10 93 b1 34 	sts	0x34B1, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d18:	80 e1       	ldi	r24, 0x10	; 16
     d1a:	e0 e6       	ldi	r30, 0x60	; 96
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	e0 ec       	ldi	r30, 0xC0	; 192
     d24:	f9 e0       	ldi	r31, 0x09	; 9
     d26:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d28:	80 91 c2 09 	lds	r24, 0x09C2
     d2c:	87 ff       	sbrs	r24, 7
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <disk_initialize+0x194>
	return SD_SPI.DATA;
     d30:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     d34:	11 23       	and	r17, r17
     d36:	41 f0       	breq	.+16     	; 0xd48 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     d38:	80 91 dc 33 	lds	r24, 0x33DC
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
     d3e:	80 93 dc 33 	sts	0x33DC, r24
		FCLK_FAST();
     d42:	80 ed       	ldi	r24, 0xD0	; 208
     d44:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     d48:	80 91 dc 33 	lds	r24, 0x33DC
}
     d4c:	24 96       	adiw	r28, 0x04	; 4
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	08 95       	ret

00000d60 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     d60:	88 23       	and	r24, r24
     d62:	11 f0       	breq	.+4      	; 0xd68 <disk_status+0x8>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	08 95       	ret
	return Stat;
     d68:	80 91 dc 33 	lds	r24, 0x33DC
}
     d6c:	08 95       	ret

00000d6e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d6e:	0f 93       	push	r16
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     d76:	88 23       	and	r24, r24
     d78:	09 f0       	breq	.+2      	; 0xd7c <disk_read+0xe>
     d7a:	53 c0       	rjmp	.+166    	; 0xe22 <disk_read+0xb4>
     d7c:	00 23       	and	r16, r16
     d7e:	09 f4       	brne	.+2      	; 0xd82 <disk_read+0x14>
     d80:	50 c0       	rjmp	.+160    	; 0xe22 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d82:	80 91 dc 33 	lds	r24, 0x33DC
     d86:	80 ff       	sbrs	r24, 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <disk_read+0x20>
     d8a:	03 e0       	ldi	r16, 0x03	; 3
     d8c:	4b c0       	rjmp	.+150    	; 0xe24 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d8e:	80 91 b1 34 	lds	r24, 0x34B1
     d92:	83 fd       	sbrc	r24, 3
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <disk_read+0x36>
     d96:	69 e0       	ldi	r22, 0x09	; 9
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	44 1f       	adc	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	6a 95       	dec	r22
     da2:	d1 f7       	brne	.-12     	; 0xd98 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     da4:	01 30       	cpi	r16, 0x01	; 1
     da6:	89 f4       	brne	.+34     	; 0xdca <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     da8:	81 e5       	ldi	r24, 0x51	; 81
     daa:	ba 01       	movw	r22, r20
     dac:	a9 01       	movw	r20, r18
     dae:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     db2:	88 23       	and	r24, r24
     db4:	21 f5       	brne	.+72     	; 0xdfe <disk_read+0x90>
     db6:	ce 01       	movw	r24, r28
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	72 e0       	ldi	r23, 0x02	; 2
     dbc:	0e 94 8d 04 	call	0x91a	; 0x91a <rcvr_datablock>
     dc0:	00 e0       	ldi	r16, 0x00	; 0
     dc2:	88 23       	and	r24, r24
     dc4:	e1 f4       	brne	.+56     	; 0xdfe <disk_read+0x90>
     dc6:	01 e0       	ldi	r16, 0x01	; 1
     dc8:	1a c0       	rjmp	.+52     	; 0xdfe <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     dca:	82 e5       	ldi	r24, 0x52	; 82
     dcc:	ba 01       	movw	r22, r20
     dce:	a9 01       	movw	r20, r18
     dd0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     dd4:	88 23       	and	r24, r24
     dd6:	99 f4       	brne	.+38     	; 0xdfe <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     dd8:	ce 01       	movw	r24, r28
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	72 e0       	ldi	r23, 0x02	; 2
     dde:	0e 94 8d 04 	call	0x91a	; 0x91a <rcvr_datablock>
     de2:	88 23       	and	r24, r24
     de4:	29 f0       	breq	.+10     	; 0xdf0 <disk_read+0x82>
				buff += 512;
			} while (--count);
     de6:	01 50       	subi	r16, 0x01	; 1
     de8:	19 f0       	breq	.+6      	; 0xdf0 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     dea:	c0 50       	subi	r28, 0x00	; 0
     dec:	de 4f       	sbci	r29, 0xFE	; 254
     dee:	f4 cf       	rjmp	.-24     	; 0xdd8 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     df0:	8c e4       	ldi	r24, 0x4C	; 76
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     dfe:	80 e1       	ldi	r24, 0x10	; 16
     e00:	e0 e6       	ldi	r30, 0x60	; 96
     e02:	f6 e0       	ldi	r31, 0x06	; 6
     e04:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	e0 ec       	ldi	r30, 0xC0	; 192
     e0a:	f9 e0       	ldi	r31, 0x09	; 9
     e0c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e0e:	80 91 c2 09 	lds	r24, 0x09C2
     e12:	87 ff       	sbrs	r24, 7
     e14:	fc cf       	rjmp	.-8      	; 0xe0e <disk_read+0xa0>
	return SD_SPI.DATA;
     e16:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     e1a:	00 23       	and	r16, r16
     e1c:	19 f0       	breq	.+6      	; 0xe24 <disk_read+0xb6>
     e1e:	01 e0       	ldi	r16, 0x01	; 1
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <disk_read+0xb6>
     e22:	04 e0       	ldi	r16, 0x04	; 4
}
     e24:	80 2f       	mov	r24, r16
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	eb 01       	movw	r28, r22
     e3e:	69 01       	movw	r12, r18
     e40:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     e42:	88 23       	and	r24, r24
     e44:	09 f0       	breq	.+2      	; 0xe48 <disk_write+0x1a>
     e46:	61 c0       	rjmp	.+194    	; 0xf0a <disk_write+0xdc>
     e48:	00 23       	and	r16, r16
     e4a:	09 f4       	brne	.+2      	; 0xe4e <disk_write+0x20>
     e4c:	5e c0       	rjmp	.+188    	; 0xf0a <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e4e:	80 91 dc 33 	lds	r24, 0x33DC
     e52:	80 ff       	sbrs	r24, 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <disk_write+0x2c>
     e56:	03 e0       	ldi	r16, 0x03	; 3
     e58:	59 c0       	rjmp	.+178    	; 0xf0c <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e5a:	80 91 dc 33 	lds	r24, 0x33DC
     e5e:	82 ff       	sbrs	r24, 2
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <disk_write+0x38>
     e62:	02 e0       	ldi	r16, 0x02	; 2
     e64:	53 c0       	rjmp	.+166    	; 0xf0c <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e66:	80 91 b1 34 	lds	r24, 0x34B1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	83 fd       	sbrc	r24, 3
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <disk_write+0x50>
     e70:	79 e0       	ldi	r23, 0x09	; 9
     e72:	cc 0c       	add	r12, r12
     e74:	dd 1c       	adc	r13, r13
     e76:	ee 1c       	adc	r14, r14
     e78:	ff 1c       	adc	r15, r15
     e7a:	7a 95       	dec	r23
     e7c:	d1 f7       	brne	.-12     	; 0xe72 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     e7e:	01 30       	cpi	r16, 0x01	; 1
     e80:	69 f4       	brne	.+26     	; 0xe9c <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     e82:	88 e5       	ldi	r24, 0x58	; 88
     e84:	b7 01       	movw	r22, r14
     e86:	a6 01       	movw	r20, r12
     e88:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     e8c:	88 23       	and	r24, r24
     e8e:	59 f5       	brne	.+86     	; 0xee6 <disk_write+0xb8>
     e90:	ce 01       	movw	r24, r28
     e92:	6e ef       	ldi	r22, 0xFE	; 254
     e94:	0e 94 ef 04 	call	0x9de	; 0x9de <xmit_datablock>
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	22 c0       	rjmp	.+68     	; 0xee0 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e9c:	86 70       	andi	r24, 0x06	; 6
     e9e:	90 70       	andi	r25, 0x00	; 0
     ea0:	89 2b       	or	r24, r25
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <disk_write+0x84>
     ea4:	40 2f       	mov	r20, r16
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	87 ed       	ldi	r24, 0xD7	; 215
     eae:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     eb2:	89 e5       	ldi	r24, 0x59	; 89
     eb4:	b7 01       	movw	r22, r14
     eb6:	a6 01       	movw	r20, r12
     eb8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     ebc:	88 23       	and	r24, r24
     ebe:	99 f4       	brne	.+38     	; 0xee6 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     ec0:	ce 01       	movw	r24, r28
     ec2:	6c ef       	ldi	r22, 0xFC	; 252
     ec4:	0e 94 ef 04 	call	0x9de	; 0x9de <xmit_datablock>
     ec8:	88 23       	and	r24, r24
     eca:	29 f0       	breq	.+10     	; 0xed6 <disk_write+0xa8>
				buff += 512;
			} while (--count);
     ecc:	01 50       	subi	r16, 0x01	; 1
     ece:	19 f0       	breq	.+6      	; 0xed6 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     ed0:	c0 50       	subi	r28, 0x00	; 0
     ed2:	de 4f       	sbci	r29, 0xFE	; 254
     ed4:	f5 cf       	rjmp	.-22     	; 0xec0 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	6d ef       	ldi	r22, 0xFD	; 253
     edc:	0e 94 ef 04 	call	0x9de	; 0x9de <xmit_datablock>
     ee0:	88 23       	and	r24, r24
     ee2:	09 f4       	brne	.+2      	; 0xee6 <disk_write+0xb8>
     ee4:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     ee6:	80 e1       	ldi	r24, 0x10	; 16
     ee8:	e0 e6       	ldi	r30, 0x60	; 96
     eea:	f6 e0       	ldi	r31, 0x06	; 6
     eec:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	e0 ec       	ldi	r30, 0xC0	; 192
     ef2:	f9 e0       	ldi	r31, 0x09	; 9
     ef4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ef6:	80 91 c2 09 	lds	r24, 0x09C2
     efa:	87 ff       	sbrs	r24, 7
     efc:	fc cf       	rjmp	.-8      	; 0xef6 <disk_write+0xc8>
	return SD_SPI.DATA;
     efe:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     f02:	00 23       	and	r16, r16
     f04:	19 f0       	breq	.+6      	; 0xf0c <disk_write+0xde>
     f06:	01 e0       	ldi	r16, 0x01	; 1
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <disk_write+0xde>
     f0a:	04 e0       	ldi	r16, 0x04	; 4
}
     f0c:	80 2f       	mov	r24, r16
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	08 95       	ret

00000f1e <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	60 97       	sbiw	r28, 0x10	; 16
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     f34:	88 23       	and	r24, r24
     f36:	09 f0       	breq	.+2      	; 0xf3a <disk_ioctl+0x1c>
     f38:	b8 c1       	rjmp	.+880    	; 0x12aa <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     f3a:	64 30       	cpi	r22, 0x04	; 4
     f3c:	01 f5       	brne	.+64     	; 0xf7e <disk_ioctl+0x60>
		switch (*ptr) {
     f3e:	fa 01       	movw	r30, r20
     f40:	80 81       	ld	r24, Z
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	39 f0       	breq	.+14     	; 0xf54 <disk_ioctl+0x36>
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	08 f4       	brcc	.+2      	; 0xf4c <disk_ioctl+0x2e>
     f4a:	b1 c1       	rjmp	.+866    	; 0x12ae <disk_ioctl+0x390>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	09 f0       	breq	.+2      	; 0xf52 <disk_ioctl+0x34>
     f50:	ac c1       	rjmp	.+856    	; 0x12aa <disk_ioctl+0x38c>
     f52:	11 c0       	rjmp	.+34     	; 0xf76 <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     f54:	e0 e6       	ldi	r30, 0x60	; 96
     f56:	f6 e0       	ldi	r31, 0x06	; 6
     f58:	80 eb       	ldi	r24, 0xB0	; 176
     f5a:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     f5c:	88 e3       	ldi	r24, 0x38	; 56
     f5e:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     f60:	14 82       	std	Z+4, r1	; 0x04
     f62:	8c e2       	ldi	r24, 0x2C	; 44
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	20 e7       	ldi	r18, 0x70	; 112
     f68:	31 e0       	ldi	r19, 0x01	; 1
     f6a:	f9 01       	movw	r30, r18
     f6c:	31 97       	sbiw	r30, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f72:	d9 f7       	brne	.-10     	; 0xf6a <disk_ioctl+0x4c>
     f74:	9c c1       	rjmp	.+824    	; 0x12ae <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	fa 01       	movw	r30, r20
     f7a:	81 83       	std	Z+1, r24	; 0x01
     f7c:	98 c1       	rjmp	.+816    	; 0x12ae <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     f7e:	80 91 dc 33 	lds	r24, 0x33DC
     f82:	80 ff       	sbrs	r24, 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <disk_ioctl+0x6c>
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	93 c1       	rjmp	.+806    	; 0x12b0 <disk_ioctl+0x392>

		switch (ctrl) {
     f8a:	6a 30       	cpi	r22, 0x0A	; 10
     f8c:	09 f4       	brne	.+2      	; 0xf90 <disk_ioctl+0x72>
     f8e:	2f c1       	rjmp	.+606    	; 0x11ee <disk_ioctl+0x2d0>
     f90:	6b 30       	cpi	r22, 0x0B	; 11
     f92:	50 f4       	brcc	.+20     	; 0xfa8 <disk_ioctl+0x8a>
     f94:	61 30       	cpi	r22, 0x01	; 1
     f96:	51 f1       	breq	.+84     	; 0xfec <disk_ioctl+0xce>
     f98:	61 30       	cpi	r22, 0x01	; 1
     f9a:	a0 f0       	brcs	.+40     	; 0xfc4 <disk_ioctl+0xa6>
     f9c:	62 30       	cpi	r22, 0x02	; 2
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <disk_ioctl+0x84>
     fa0:	86 c0       	rjmp	.+268    	; 0x10ae <disk_ioctl+0x190>
     fa2:	63 30       	cpi	r22, 0x03	; 3
     fa4:	69 f4       	brne	.+26     	; 0xfc0 <disk_ioctl+0xa2>
     fa6:	89 c0       	rjmp	.+274    	; 0x10ba <disk_ioctl+0x19c>
     fa8:	6c 30       	cpi	r22, 0x0C	; 12
     faa:	09 f4       	brne	.+2      	; 0xfae <disk_ioctl+0x90>
     fac:	27 c1       	rjmp	.+590    	; 0x11fc <disk_ioctl+0x2de>
     fae:	6c 30       	cpi	r22, 0x0C	; 12
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <disk_ioctl+0x96>
     fb2:	22 c1       	rjmp	.+580    	; 0x11f8 <disk_ioctl+0x2da>
     fb4:	6d 30       	cpi	r22, 0x0D	; 13
     fb6:	09 f4       	brne	.+2      	; 0xfba <disk_ioctl+0x9c>
     fb8:	2e c1       	rjmp	.+604    	; 0x1216 <disk_ioctl+0x2f8>
     fba:	6e 30       	cpi	r22, 0x0E	; 14
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <disk_ioctl+0xa2>
     fbe:	4a c1       	rjmp	.+660    	; 0x1254 <disk_ioctl+0x336>
     fc0:	94 e0       	ldi	r25, 0x04	; 4
     fc2:	64 c1       	rjmp	.+712    	; 0x128c <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     fc4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <select>
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <disk_ioctl+0xb0>
     fcc:	5e c1       	rjmp	.+700    	; 0x128a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     fce:	80 e1       	ldi	r24, 0x10	; 16
     fd0:	e0 e6       	ldi	r30, 0x60	; 96
     fd2:	f6 e0       	ldi	r31, 0x06	; 6
     fd4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	e0 ec       	ldi	r30, 0xC0	; 192
     fda:	f9 e0       	ldi	r31, 0x09	; 9
     fdc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fde:	80 91 c2 09 	lds	r24, 0x09C2
     fe2:	87 ff       	sbrs	r24, 7
     fe4:	fc cf       	rjmp	.-8      	; 0xfde <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     fe6:	80 91 c3 09 	lds	r24, 0x09C3
     fea:	ff c0       	rjmp	.+510    	; 0x11ea <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     fec:	89 e4       	ldi	r24, 0x49	; 73
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <disk_ioctl+0xe2>
     ffe:	45 c1       	rjmp	.+650    	; 0x128a <disk_ioctl+0x36c>
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	60 e1       	ldi	r22, 0x10	; 16
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 8d 04 	call	0x91a	; 0x91a <rcvr_datablock>
    100c:	88 23       	and	r24, r24
    100e:	09 f4       	brne	.+2      	; 0x1012 <disk_ioctl+0xf4>
    1010:	3c c1       	rjmp	.+632    	; 0x128a <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	82 95       	swap	r24
    1016:	86 95       	lsr	r24
    1018:	86 95       	lsr	r24
    101a:	83 70       	andi	r24, 0x03	; 3
    101c:	7a 85       	ldd	r23, Y+10	; 0x0a
    101e:	49 85       	ldd	r20, Y+9	; 0x09
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	89 f4       	brne	.+34     	; 0x1046 <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    1024:	87 2f       	mov	r24, r23
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	34 2f       	mov	r19, r20
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	82 0f       	add	r24, r18
    1030:	93 1f       	adc	r25, r19
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	2a e0       	ldi	r18, 0x0A	; 10
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	2a 95       	dec	r18
    1042:	d1 f7       	brne	.-12     	; 0x1038 <disk_ioctl+0x11a>
    1044:	cd c0       	rjmp	.+410    	; 0x11e0 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1046:	42 95       	swap	r20
    1048:	46 95       	lsr	r20
    104a:	46 95       	lsr	r20
    104c:	43 70       	andi	r20, 0x03	; 3
    104e:	28 85       	ldd	r18, Y+8	; 0x08
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	24 0f       	add	r18, r20
    105c:	31 1d       	adc	r19, r1
    105e:	2f 5f       	subi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	8f 81       	ldd	r24, Y+7	; 0x07
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	83 70       	andi	r24, 0x03	; 3
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	98 2f       	mov	r25, r24
    106c:	88 27       	eor	r24, r24
    106e:	99 0f       	add	r25, r25
    1070:	99 0f       	add	r25, r25
    1072:	28 0f       	add	r18, r24
    1074:	39 1f       	adc	r19, r25
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	8f 70       	andi	r24, 0x0F	; 15
    107e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1080:	66 1f       	adc	r22, r22
    1082:	66 27       	eor	r22, r22
    1084:	66 1f       	adc	r22, r22
    1086:	86 0f       	add	r24, r22
    1088:	8e 5f       	subi	r24, 0xFE	; 254
    108a:	73 70       	andi	r23, 0x03	; 3
    108c:	77 0f       	add	r23, r23
    108e:	87 0f       	add	r24, r23
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	09 97       	sbiw	r24, 0x09	; 9
    1094:	04 c0       	rjmp	.+8      	; 0x109e <disk_ioctl+0x180>
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	44 1f       	adc	r20, r20
    109c:	55 1f       	adc	r21, r21
    109e:	8a 95       	dec	r24
    10a0:	d2 f7       	brpl	.-12     	; 0x1096 <disk_ioctl+0x178>
    10a2:	f8 01       	movw	r30, r16
    10a4:	20 83       	st	Z, r18
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	42 83       	std	Z+2, r20	; 0x02
    10aa:	53 83       	std	Z+3, r21	; 0x03
    10ac:	9e c0       	rjmp	.+316    	; 0x11ea <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	fa 01       	movw	r30, r20
    10b4:	80 83       	st	Z, r24
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	98 c0       	rjmp	.+304    	; 0x11ea <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    10ba:	80 91 b1 34 	lds	r24, 0x34B1
    10be:	f8 2e       	mov	r15, r24
    10c0:	82 ff       	sbrs	r24, 2
    10c2:	39 c0       	rjmp	.+114    	; 0x1136 <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    10c4:	8d ec       	ldi	r24, 0xCD	; 205
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
    10d2:	88 23       	and	r24, r24
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <disk_ioctl+0x1ba>
    10d6:	d9 c0       	rjmp	.+434    	; 0x128a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	e0 ec       	ldi	r30, 0xC0	; 192
    10dc:	f9 e0       	ldi	r31, 0x09	; 9
    10de:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10e0:	80 91 c2 09 	lds	r24, 0x09C2
    10e4:	87 ff       	sbrs	r24, 7
    10e6:	fc cf       	rjmp	.-8      	; 0x10e0 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    10e8:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	60 e1       	ldi	r22, 0x10	; 16
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	0e 94 8d 04 	call	0x91a	; 0x91a <rcvr_datablock>
    10f8:	88 23       	and	r24, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <disk_ioctl+0x1e0>
    10fc:	c6 c0       	rjmp	.+396    	; 0x128a <disk_ioctl+0x36c>
    10fe:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1100:	e0 ec       	ldi	r30, 0xC0	; 192
    1102:	f9 e0       	ldi	r31, 0x09	; 9
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1108:	80 91 c2 09 	lds	r24, 0x09C2
    110c:	87 ff       	sbrs	r24, 7
    110e:	fc cf       	rjmp	.-8      	; 0x1108 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    1110:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	b9 f7       	brne	.-18     	; 0x1106 <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1118:	2b 85       	ldd	r18, Y+11	; 0x0b
    111a:	22 95       	swap	r18
    111c:	2f 70       	andi	r18, 0x0F	; 15
    111e:	80 e1       	ldi	r24, 0x10	; 16
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <disk_ioctl+0x212>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	aa 1f       	adc	r26, r26
    112e:	bb 1f       	adc	r27, r27
    1130:	2a 95       	dec	r18
    1132:	d2 f7       	brpl	.-12     	; 0x1128 <disk_ioctl+0x20a>
    1134:	55 c0       	rjmp	.+170    	; 0x11e0 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1136:	89 e4       	ldi	r24, 0x49	; 73
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
    1144:	88 23       	and	r24, r24
    1146:	09 f0       	breq	.+2      	; 0x114a <disk_ioctl+0x22c>
    1148:	a0 c0       	rjmp	.+320    	; 0x128a <disk_ioctl+0x36c>
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	60 e1       	ldi	r22, 0x10	; 16
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	0e 94 8d 04 	call	0x91a	; 0x91a <rcvr_datablock>
    1156:	88 23       	and	r24, r24
    1158:	09 f4       	brne	.+2      	; 0x115c <disk_ioctl+0x23e>
    115a:	97 c0       	rjmp	.+302    	; 0x128a <disk_ioctl+0x36c>
    115c:	4b 85       	ldd	r20, Y+11	; 0x0b
    115e:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    1160:	f1 fe       	sbrs	r15, 1
    1162:	1b c0       	rjmp	.+54     	; 0x119a <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1164:	88 1f       	adc	r24, r24
    1166:	88 27       	eor	r24, r24
    1168:	88 1f       	adc	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	24 2f       	mov	r18, r20
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	2f 73       	andi	r18, 0x3F	; 63
    1174:	30 70       	andi	r19, 0x00	; 0
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1180:	22 95       	swap	r18
    1182:	26 95       	lsr	r18
    1184:	26 95       	lsr	r18
    1186:	23 70       	andi	r18, 0x03	; 3
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	30 40       	sbci	r19, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <disk_ioctl+0x276>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	2a 95       	dec	r18
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <disk_ioctl+0x272>
    1198:	21 c0       	rjmp	.+66     	; 0x11dc <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	23 70       	andi	r18, 0x03	; 3
    11a0:	30 70       	andi	r19, 0x00	; 0
    11a2:	f3 e0       	ldi	r31, 0x03	; 3
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	fa 95       	dec	r31
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <disk_ioctl+0x286>
    11ac:	82 95       	swap	r24
    11ae:	86 95       	lsr	r24
    11b0:	87 70       	andi	r24, 0x07	; 7
    11b2:	28 0f       	add	r18, r24
    11b4:	31 1d       	adc	r19, r1
    11b6:	2f 5f       	subi	r18, 0xFF	; 255
    11b8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ba:	84 2f       	mov	r24, r20
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	8c 77       	andi	r24, 0x7C	; 124
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	95 95       	asr	r25
    11c4:	87 95       	ror	r24
    11c6:	95 95       	asr	r25
    11c8:	87 95       	ror	r24
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	ac 01       	movw	r20, r24
    11ce:	24 9f       	mul	r18, r20
    11d0:	c0 01       	movw	r24, r0
    11d2:	25 9f       	mul	r18, r21
    11d4:	90 0d       	add	r25, r0
    11d6:	34 9f       	mul	r19, r20
    11d8:	90 0d       	add	r25, r0
    11da:	11 24       	eor	r1, r1
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	f8 01       	movw	r30, r16
    11e2:	80 83       	st	Z, r24
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	a2 83       	std	Z+2, r26	; 0x02
    11e8:	b3 83       	std	Z+3, r27	; 0x03
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	4f c0       	rjmp	.+158    	; 0x128c <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    11ee:	80 91 b1 34 	lds	r24, 0x34B1
    11f2:	fa 01       	movw	r30, r20
    11f4:	80 83       	st	Z, r24
    11f6:	f9 cf       	rjmp	.-14     	; 0x11ea <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    11f8:	89 e4       	ldi	r24, 0x49	; 73
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    11fc:	8a e4       	ldi	r24, 0x4A	; 74
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
    120a:	88 23       	and	r24, r24
    120c:	f1 f5       	brne	.+124    	; 0x128a <disk_ioctl+0x36c>
    120e:	c8 01       	movw	r24, r16
    1210:	60 e1       	ldi	r22, 0x10	; 16
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	35 c0       	rjmp	.+106    	; 0x1280 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1216:	8a e7       	ldi	r24, 0x7A	; 122
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
    1224:	88 23       	and	r24, r24
    1226:	89 f5       	brne	.+98     	; 0x128a <disk_ioctl+0x36c>
    1228:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    122a:	a0 ec       	ldi	r26, 0xC0	; 192
    122c:	b9 e0       	ldi	r27, 0x09	; 9
    122e:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1230:	98 01       	movw	r18, r16
    1232:	2d 5f       	subi	r18, 0xFD	; 253
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1236:	13 96       	adiw	r26, 0x03	; 3
    1238:	9c 93       	st	X, r25
    123a:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    123c:	80 91 c2 09 	lds	r24, 0x09C2
    1240:	87 ff       	sbrs	r24, 7
    1242:	fc cf       	rjmp	.-8      	; 0x123c <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1244:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1248:	80 83       	st	Z, r24
    124a:	e2 17       	cp	r30, r18
    124c:	f3 07       	cpc	r31, r19
    124e:	69 f2       	breq	.-102    	; 0x11ea <disk_ioctl+0x2cc>
    1250:	31 96       	adiw	r30, 0x01	; 1
    1252:	f1 cf       	rjmp	.-30     	; 0x1236 <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1254:	8d ec       	ldi	r24, 0xCD	; 205
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <send_cmd>
    1262:	88 23       	and	r24, r24
    1264:	91 f4       	brne	.+36     	; 0x128a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	e0 ec       	ldi	r30, 0xC0	; 192
    126a:	f9 e0       	ldi	r31, 0x09	; 9
    126c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    126e:	80 91 c2 09 	lds	r24, 0x09C2
    1272:	87 ff       	sbrs	r24, 7
    1274:	fc cf       	rjmp	.-8      	; 0x126e <disk_ioctl+0x350>
	return SD_SPI.DATA;
    1276:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    127a:	c8 01       	movw	r24, r16
    127c:	60 e4       	ldi	r22, 0x40	; 64
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	0e 94 8d 04 	call	0x91a	; 0x91a <rcvr_datablock>
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <disk_ioctl+0x36e>
    128a:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    128c:	80 e1       	ldi	r24, 0x10	; 16
    128e:	e0 e6       	ldi	r30, 0x60	; 96
    1290:	f6 e0       	ldi	r31, 0x06	; 6
    1292:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	e0 ec       	ldi	r30, 0xC0	; 192
    1298:	f9 e0       	ldi	r31, 0x09	; 9
    129a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    129c:	80 91 c2 09 	lds	r24, 0x09C2
    12a0:	87 ff       	sbrs	r24, 7
    12a2:	fc cf       	rjmp	.-8      	; 0x129c <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    12a4:	80 91 c3 09 	lds	r24, 0x09C3
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <disk_ioctl+0x392>
    12aa:	94 e0       	ldi	r25, 0x04	; 4
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <disk_ioctl+0x392>
    12ae:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    12b0:	89 2f       	mov	r24, r25
    12b2:	60 96       	adiw	r28, 0x10	; 16
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	08 95       	ret

000012c4 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    12c4:	80 91 af 34 	lds	r24, 0x34AF
    if (n) Timer1 = --n;
    12c8:	88 23       	and	r24, r24
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <disk_timerproc+0xe>
    12cc:	81 50       	subi	r24, 0x01	; 1
    12ce:	80 93 af 34 	sts	0x34AF, r24
    n = Timer2;
    12d2:	80 91 b0 34 	lds	r24, 0x34B0
    if (n) Timer2 = --n;
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <disk_timerproc+0x1c>
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	80 93 b0 34 	sts	0x34B0, r24

	s = Stat;
    12e0:	80 91 dc 33 	lds	r24, 0x33DC

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    12e4:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    12e6:	80 93 dc 33 	sts	0x33DC, r24
}
    12ea:	08 95       	ret

000012ec <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	08 95       	ret

000012f6 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    12f6:	6f 92       	push	r6
    12f8:	7f 92       	push	r7
    12fa:	8f 92       	push	r8
    12fc:	9f 92       	push	r9
    12fe:	af 92       	push	r10
    1300:	bf 92       	push	r11
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
    1314:	4a 01       	movw	r8, r20
    1316:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    1318:	ca a4       	ldd	r12, Y+42	; 0x2a
    131a:	db a4       	ldd	r13, Y+43	; 0x2b
    131c:	ec a4       	ldd	r14, Y+44	; 0x2c
    131e:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1320:	c4 16       	cp	r12, r20
    1322:	d5 06       	cpc	r13, r21
    1324:	e6 06       	cpc	r14, r22
    1326:	f7 06       	cpc	r15, r23
    1328:	09 f4       	brne	.+2      	; 0x132c <move_window+0x36>
    132a:	4e c0       	rjmp	.+156    	; 0x13c8 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	88 23       	and	r24, r24
    1330:	a1 f1       	breq	.+104    	; 0x139a <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    1332:	3e e2       	ldi	r19, 0x2E	; 46
    1334:	63 2e       	mov	r6, r19
    1336:	71 2c       	mov	r7, r1
    1338:	6c 0e       	add	r6, r28
    133a:	7d 1e       	adc	r7, r29
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	b3 01       	movw	r22, r6
    1340:	a7 01       	movw	r20, r14
    1342:	96 01       	movw	r18, r12
    1344:	01 e0       	ldi	r16, 0x01	; 1
    1346:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    134a:	88 23       	and	r24, r24
    134c:	d9 f5       	brne	.+118    	; 0x13c4 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    134e:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    1350:	8e 89       	ldd	r24, Y+22	; 0x16
    1352:	9f 89       	ldd	r25, Y+23	; 0x17
    1354:	a8 8d       	ldd	r26, Y+24	; 0x18
    1356:	b9 8d       	ldd	r27, Y+25	; 0x19
    1358:	2e 8d       	ldd	r18, Y+30	; 0x1e
    135a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    135c:	48 a1       	ldd	r20, Y+32	; 0x20
    135e:	59 a1       	ldd	r21, Y+33	; 0x21
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	a4 1f       	adc	r26, r20
    1366:	b5 1f       	adc	r27, r21
    1368:	c8 16       	cp	r12, r24
    136a:	d9 06       	cpc	r13, r25
    136c:	ea 06       	cpc	r14, r26
    136e:	fb 06       	cpc	r15, r27
    1370:	a0 f4       	brcc	.+40     	; 0x139a <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1372:	1b 81       	ldd	r17, Y+3	; 0x03
    1374:	10 c0       	rjmp	.+32     	; 0x1396 <move_window+0xa0>
					wsect += fs->sects_fat;
    1376:	8e 89       	ldd	r24, Y+22	; 0x16
    1378:	9f 89       	ldd	r25, Y+23	; 0x17
    137a:	a8 8d       	ldd	r26, Y+24	; 0x18
    137c:	b9 8d       	ldd	r27, Y+25	; 0x19
    137e:	c8 0e       	add	r12, r24
    1380:	d9 1e       	adc	r13, r25
    1382:	ea 1e       	adc	r14, r26
    1384:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	b3 01       	movw	r22, r6
    138a:	a7 01       	movw	r20, r14
    138c:	96 01       	movw	r18, r12
    138e:	01 e0       	ldi	r16, 0x01	; 1
    1390:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1394:	11 50       	subi	r17, 0x01	; 1
    1396:	12 30       	cpi	r17, 0x02	; 2
    1398:	70 f7       	brcc	.-36     	; 0x1376 <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    139a:	81 14       	cp	r8, r1
    139c:	91 04       	cpc	r9, r1
    139e:	a1 04       	cpc	r10, r1
    13a0:	b1 04       	cpc	r11, r1
    13a2:	91 f0       	breq	.+36     	; 0x13c8 <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    13a4:	be 01       	movw	r22, r28
    13a6:	62 5d       	subi	r22, 0xD2	; 210
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	a5 01       	movw	r20, r10
    13ae:	94 01       	movw	r18, r8
    13b0:	01 e0       	ldi	r16, 0x01	; 1
    13b2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    13b6:	88 23       	and	r24, r24
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    13ba:	8a a6       	std	Y+42, r8	; 0x2a
    13bc:	9b a6       	std	Y+43, r9	; 0x2b
    13be:	ac a6       	std	Y+44, r10	; 0x2c
    13c0:	bd a6       	std	Y+45, r11	; 0x2d
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <move_window+0xd4>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <move_window+0xd4>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	9f 90       	pop	r9
    13e0:	8f 90       	pop	r8
    13e2:	7f 90       	pop	r7
    13e4:	6f 90       	pop	r6
    13e6:	08 95       	ret

000013e8 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    13e8:	0f 93       	push	r16
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
	if (res == FR_OK) {
    13fc:	88 23       	and	r24, r24
    13fe:	09 f0       	breq	.+2      	; 0x1402 <sync+0x1a>
    1400:	7e c0       	rjmp	.+252    	; 0x14fe <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1402:	88 81       	ld	r24, Y
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	09 f0       	breq	.+2      	; 0x140a <sync+0x22>
    1408:	72 c0       	rjmp	.+228    	; 0x14ee <sync+0x106>
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	88 23       	and	r24, r24
    140e:	09 f4       	brne	.+2      	; 0x1412 <sync+0x2a>
    1410:	6e c0       	rjmp	.+220    	; 0x14ee <sync+0x106>
			fs->winsect = 0;
    1412:	1a a6       	std	Y+42, r1	; 0x2a
    1414:	1b a6       	std	Y+43, r1	; 0x2b
    1416:	1c a6       	std	Y+44, r1	; 0x2c
    1418:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    141a:	be 01       	movw	r22, r28
    141c:	62 5d       	subi	r22, 0xD2	; 210
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	fb 01       	movw	r30, r22
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	01 c0       	rjmp	.+2      	; 0x142a <sync+0x42>
	while (cnt--) *d++ = (char)val;
    1428:	11 92       	st	Z+, r1
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	8f 3f       	cpi	r24, 0xFF	; 255
    1430:	92 07       	cpc	r25, r18
    1432:	d1 f7       	brne	.-12     	; 0x1428 <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1434:	c4 5d       	subi	r28, 0xD4	; 212
    1436:	dd 4f       	sbci	r29, 0xFD	; 253
    1438:	85 e5       	ldi	r24, 0x55	; 85
    143a:	89 93       	st	Y+, r24
    143c:	8a ea       	ldi	r24, 0xAA	; 170
    143e:	88 83       	st	Y, r24
    1440:	cd 52       	subi	r28, 0x2D	; 45
    1442:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1444:	82 e5       	ldi	r24, 0x52	; 82
    1446:	8e a7       	std	Y+46, r24	; 0x2e
    1448:	8f a7       	std	Y+47, r24	; 0x2f
    144a:	21 e6       	ldi	r18, 0x61	; 97
    144c:	28 ab       	std	Y+48, r18	; 0x30
    144e:	91 e4       	ldi	r25, 0x41	; 65
    1450:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1452:	ce 5e       	subi	r28, 0xEE	; 238
    1454:	dd 4f       	sbci	r29, 0xFD	; 253
    1456:	82 e7       	ldi	r24, 0x72	; 114
    1458:	89 93       	st	Y+, r24
    145a:	89 93       	st	Y+, r24
    145c:	99 93       	st	Y+, r25
    145e:	28 83       	st	Y, r18
    1460:	c5 51       	subi	r28, 0x15	; 21
    1462:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1464:	8e 85       	ldd	r24, Y+14	; 0x0e
    1466:	ca 5e       	subi	r28, 0xEA	; 234
    1468:	dd 4f       	sbci	r29, 0xFD	; 253
    146a:	88 83       	st	Y, r24
    146c:	c6 51       	subi	r28, 0x16	; 22
    146e:	d2 40       	sbci	r29, 0x02	; 2
    1470:	8f 85       	ldd	r24, Y+15	; 0x0f
    1472:	c9 5e       	subi	r28, 0xE9	; 233
    1474:	dd 4f       	sbci	r29, 0xFD	; 253
    1476:	88 83       	st	Y, r24
    1478:	c7 51       	subi	r28, 0x17	; 23
    147a:	d2 40       	sbci	r29, 0x02	; 2
    147c:	8e 85       	ldd	r24, Y+14	; 0x0e
    147e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1480:	a8 89       	ldd	r26, Y+16	; 0x10
    1482:	b9 89       	ldd	r27, Y+17	; 0x11
    1484:	9d 01       	movw	r18, r26
    1486:	44 27       	eor	r20, r20
    1488:	55 27       	eor	r21, r21
    148a:	c8 5e       	subi	r28, 0xE8	; 232
    148c:	dd 4f       	sbci	r29, 0xFD	; 253
    148e:	28 83       	st	Y, r18
    1490:	21 96       	adiw	r28, 0x01	; 1
    1492:	8b 2f       	mov	r24, r27
    1494:	99 27       	eor	r25, r25
    1496:	aa 27       	eor	r26, r26
    1498:	bb 27       	eor	r27, r27
    149a:	88 83       	st	Y, r24
    149c:	c9 51       	subi	r28, 0x19	; 25
    149e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    14a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a2:	c6 5e       	subi	r28, 0xE6	; 230
    14a4:	dd 4f       	sbci	r29, 0xFD	; 253
    14a6:	88 83       	st	Y, r24
    14a8:	ca 51       	subi	r28, 0x1A	; 26
    14aa:	d2 40       	sbci	r29, 0x02	; 2
    14ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ae:	c5 5e       	subi	r28, 0xE5	; 229
    14b0:	dd 4f       	sbci	r29, 0xFD	; 253
    14b2:	88 83       	st	Y, r24
    14b4:	cb 51       	subi	r28, 0x1B	; 27
    14b6:	d2 40       	sbci	r29, 0x02	; 2
    14b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    14bc:	ac 85       	ldd	r26, Y+12	; 0x0c
    14be:	bd 85       	ldd	r27, Y+13	; 0x0d
    14c0:	9d 01       	movw	r18, r26
    14c2:	44 27       	eor	r20, r20
    14c4:	55 27       	eor	r21, r21
    14c6:	c4 5e       	subi	r28, 0xE4	; 228
    14c8:	dd 4f       	sbci	r29, 0xFD	; 253
    14ca:	28 83       	st	Y, r18
    14cc:	21 96       	adiw	r28, 0x01	; 1
    14ce:	8b 2f       	mov	r24, r27
    14d0:	99 27       	eor	r25, r25
    14d2:	aa 27       	eor	r26, r26
    14d4:	bb 27       	eor	r27, r27
    14d6:	88 83       	st	Y, r24
    14d8:	cd 51       	subi	r28, 0x1D	; 29
    14da:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    14dc:	2a 89       	ldd	r18, Y+18	; 0x12
    14de:	3b 89       	ldd	r19, Y+19	; 0x13
    14e0:	4c 89       	ldd	r20, Y+20	; 0x14
    14e2:	5d 89       	ldd	r21, Y+21	; 0x15
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	01 e0       	ldi	r16, 0x01	; 1
    14e8:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
			fs->fsi_flag = 0;
    14ec:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disk_ioctl>
    14fa:	81 11       	cpse	r24, r1
    14fc:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	4c 01       	movw	r8, r24
    1522:	7a 01       	movw	r14, r20
    1524:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    1526:	42 30       	cpi	r20, 0x02	; 2
    1528:	51 05       	cpc	r21, r1
    152a:	61 05       	cpc	r22, r1
    152c:	71 05       	cpc	r23, r1
    152e:	08 f4       	brcc	.+2      	; 0x1532 <get_fat+0x2c>
    1530:	bb c0       	rjmp	.+374    	; 0x16a8 <get_fat+0x1a2>
    1532:	f4 01       	movw	r30, r8
    1534:	82 8d       	ldd	r24, Z+26	; 0x1a
    1536:	93 8d       	ldd	r25, Z+27	; 0x1b
    1538:	a4 8d       	ldd	r26, Z+28	; 0x1c
    153a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    153c:	48 17       	cp	r20, r24
    153e:	59 07       	cpc	r21, r25
    1540:	6a 07       	cpc	r22, r26
    1542:	7b 07       	cpc	r23, r27
    1544:	08 f0       	brcs	.+2      	; 0x1548 <get_fat+0x42>
    1546:	b0 c0       	rjmp	.+352    	; 0x16a8 <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    1548:	a6 8c       	ldd	r10, Z+30	; 0x1e
    154a:	b7 8c       	ldd	r11, Z+31	; 0x1f
    154c:	c0 a0       	ldd	r12, Z+32	; 0x20
    154e:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    1550:	80 81       	ld	r24, Z
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	09 f4       	brne	.+2      	; 0x1558 <get_fat+0x52>
    1556:	4d c0       	rjmp	.+154    	; 0x15f2 <get_fat+0xec>
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	09 f4       	brne	.+2      	; 0x155e <get_fat+0x58>
    155c:	68 c0       	rjmp	.+208    	; 0x162e <get_fat+0x128>
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	09 f0       	breq	.+2      	; 0x1564 <get_fat+0x5e>
    1562:	a7 c0       	rjmp	.+334    	; 0x16b2 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    1564:	ea 01       	movw	r28, r20
    1566:	d6 95       	lsr	r29
    1568:	c7 95       	ror	r28
    156a:	c4 0f       	add	r28, r20
    156c:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    156e:	ae 01       	movw	r20, r28
    1570:	45 2f       	mov	r20, r21
    1572:	55 27       	eor	r21, r21
    1574:	46 95       	lsr	r20
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	4a 0d       	add	r20, r10
    157c:	5b 1d       	adc	r21, r11
    157e:	6c 1d       	adc	r22, r12
    1580:	7d 1d       	adc	r23, r13
    1582:	c4 01       	movw	r24, r8
    1584:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    1588:	88 23       	and	r24, r24
    158a:	09 f0       	breq	.+2      	; 0x158e <get_fat+0x88>
    158c:	92 c0       	rjmp	.+292    	; 0x16b2 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    158e:	fe 01       	movw	r30, r28
    1590:	f1 70       	andi	r31, 0x01	; 1
    1592:	e8 0d       	add	r30, r8
    1594:	f9 1d       	adc	r31, r9
    1596:	76 a4       	ldd	r7, Z+46	; 0x2e
    1598:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    159a:	ae 01       	movw	r20, r28
    159c:	45 2f       	mov	r20, r21
    159e:	55 27       	eor	r21, r21
    15a0:	46 95       	lsr	r20
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	4a 0d       	add	r20, r10
    15a8:	5b 1d       	adc	r21, r11
    15aa:	6c 1d       	adc	r22, r12
    15ac:	7d 1d       	adc	r23, r13
    15ae:	c4 01       	movw	r24, r8
    15b0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    15b4:	88 23       	and	r24, r24
    15b6:	09 f0       	breq	.+2      	; 0x15ba <get_fat+0xb4>
    15b8:	7c c0       	rjmp	.+248    	; 0x16b2 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    15ba:	67 2d       	mov	r22, r7
    15bc:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    15be:	d1 70       	andi	r29, 0x01	; 1
    15c0:	c8 0d       	add	r28, r8
    15c2:	d9 1d       	adc	r29, r9
    15c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	68 2b       	or	r22, r24
    15ca:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    15cc:	c7 01       	movw	r24, r14
    15ce:	81 70       	andi	r24, 0x01	; 1
    15d0:	90 70       	andi	r25, 0x00	; 0
    15d2:	89 2b       	or	r24, r25
    15d4:	39 f0       	breq	.+14     	; 0x15e4 <get_fat+0xde>
    15d6:	44 e0       	ldi	r20, 0x04	; 4
    15d8:	76 95       	lsr	r23
    15da:	67 95       	ror	r22
    15dc:	4a 95       	dec	r20
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <get_fat+0xd2>
    15e0:	9b 01       	movw	r18, r22
    15e2:	22 c0       	rjmp	.+68     	; 0x1628 <get_fat+0x122>
    15e4:	9b 01       	movw	r18, r22
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	3f 70       	andi	r19, 0x0F	; 15
    15ec:	40 70       	andi	r20, 0x00	; 0
    15ee:	50 70       	andi	r21, 0x00	; 0
    15f0:	64 c0       	rjmp	.+200    	; 0x16ba <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    15f2:	45 2f       	mov	r20, r21
    15f4:	56 2f       	mov	r21, r22
    15f6:	67 2f       	mov	r22, r23
    15f8:	77 27       	eor	r23, r23
    15fa:	4a 0d       	add	r20, r10
    15fc:	5b 1d       	adc	r21, r11
    15fe:	6c 1d       	adc	r22, r12
    1600:	7d 1d       	adc	r23, r13
    1602:	c4 01       	movw	r24, r8
    1604:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    1608:	88 23       	and	r24, r24
    160a:	09 f0       	breq	.+2      	; 0x160e <get_fat+0x108>
    160c:	52 c0       	rjmp	.+164    	; 0x16b2 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    160e:	f7 01       	movw	r30, r14
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	f1 70       	andi	r31, 0x01	; 1
    1616:	e8 0d       	add	r30, r8
    1618:	f9 1d       	adc	r31, r9
    161a:	97 a5       	ldd	r25, Z+47	; 0x2f
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	82 2b       	or	r24, r18
    1624:	93 2b       	or	r25, r19
    1626:	9c 01       	movw	r18, r24
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	46 c0       	rjmp	.+140    	; 0x16ba <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    162e:	97 e0       	ldi	r25, 0x07	; 7
    1630:	76 95       	lsr	r23
    1632:	67 95       	ror	r22
    1634:	57 95       	ror	r21
    1636:	47 95       	ror	r20
    1638:	9a 95       	dec	r25
    163a:	d1 f7       	brne	.-12     	; 0x1630 <get_fat+0x12a>
    163c:	4a 0d       	add	r20, r10
    163e:	5b 1d       	adc	r21, r11
    1640:	6c 1d       	adc	r22, r12
    1642:	7d 1d       	adc	r23, r13
    1644:	c4 01       	movw	r24, r8
    1646:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    164a:	88 23       	and	r24, r24
    164c:	91 f5       	brne	.+100    	; 0x16b2 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    164e:	f7 01       	movw	r30, r14
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	f1 70       	andi	r31, 0x01	; 1
    165a:	e8 0d       	add	r30, r8
    165c:	f9 1d       	adc	r31, r9
    165e:	81 a9       	ldd	r24, Z+49	; 0x31
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	58 2f       	mov	r21, r24
    1668:	44 27       	eor	r20, r20
    166a:	33 27       	eor	r19, r19
    166c:	22 27       	eor	r18, r18
    166e:	80 a9       	ldd	r24, Z+48	; 0x30
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	dc 01       	movw	r26, r24
    1678:	99 27       	eor	r25, r25
    167a:	88 27       	eor	r24, r24
    167c:	28 2b       	or	r18, r24
    167e:	39 2b       	or	r19, r25
    1680:	4a 2b       	or	r20, r26
    1682:	5b 2b       	or	r21, r27
    1684:	86 a5       	ldd	r24, Z+46	; 0x2e
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e0       	ldi	r26, 0x00	; 0
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	28 2b       	or	r18, r24
    168e:	39 2b       	or	r19, r25
    1690:	4a 2b       	or	r20, r26
    1692:	5b 2b       	or	r21, r27
    1694:	97 a5       	ldd	r25, Z+47	; 0x2f
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	a0 e0       	ldi	r26, 0x00	; 0
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	28 2b       	or	r18, r24
    169e:	39 2b       	or	r19, r25
    16a0:	4a 2b       	or	r20, r26
    16a2:	5b 2b       	or	r21, r27
    16a4:	5f 70       	andi	r21, 0x0F	; 15
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <get_fat+0x1b4>
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <get_fat+0x1b4>
    16b2:	2f ef       	ldi	r18, 0xFF	; 255
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f ef       	ldi	r20, 0xFF	; 255
    16b8:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    16ba:	b9 01       	movw	r22, r18
    16bc:	ca 01       	movw	r24, r20
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	df 90       	pop	r13
    16cc:	cf 90       	pop	r12
    16ce:	bf 90       	pop	r11
    16d0:	af 90       	pop	r10
    16d2:	9f 90       	pop	r9
    16d4:	8f 90       	pop	r8
    16d6:	7f 90       	pop	r7
    16d8:	08 95       	ret

000016da <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    16da:	2f 92       	push	r2
    16dc:	3f 92       	push	r3
    16de:	4f 92       	push	r4
    16e0:	5f 92       	push	r5
    16e2:	6f 92       	push	r6
    16e4:	7f 92       	push	r7
    16e6:	8f 92       	push	r8
    16e8:	9f 92       	push	r9
    16ea:	af 92       	push	r10
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	3c 01       	movw	r6, r24
    1700:	6a 01       	movw	r12, r20
    1702:	7b 01       	movw	r14, r22
    1704:	48 01       	movw	r8, r16
    1706:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    1708:	42 30       	cpi	r20, 0x02	; 2
    170a:	51 05       	cpc	r21, r1
    170c:	61 05       	cpc	r22, r1
    170e:	71 05       	cpc	r23, r1
    1710:	08 f4       	brcc	.+2      	; 0x1714 <put_fat+0x3a>
    1712:	ba c0       	rjmp	.+372    	; 0x1888 <put_fat+0x1ae>
    1714:	f3 01       	movw	r30, r6
    1716:	82 8d       	ldd	r24, Z+26	; 0x1a
    1718:	93 8d       	ldd	r25, Z+27	; 0x1b
    171a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    171c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    171e:	48 17       	cp	r20, r24
    1720:	59 07       	cpc	r21, r25
    1722:	6a 07       	cpc	r22, r26
    1724:	7b 07       	cpc	r23, r27
    1726:	08 f0       	brcs	.+2      	; 0x172a <put_fat+0x50>
    1728:	af c0       	rjmp	.+350    	; 0x1888 <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    172a:	26 8c       	ldd	r2, Z+30	; 0x1e
    172c:	37 8c       	ldd	r3, Z+31	; 0x1f
    172e:	40 a0       	ldd	r4, Z+32	; 0x20
    1730:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    1732:	80 81       	ld	r24, Z
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	09 f4       	brne	.+2      	; 0x173a <put_fat+0x60>
    1738:	64 c0       	rjmp	.+200    	; 0x1802 <put_fat+0x128>
    173a:	83 30       	cpi	r24, 0x03	; 3
    173c:	09 f4       	brne	.+2      	; 0x1740 <put_fat+0x66>
    173e:	7a c0       	rjmp	.+244    	; 0x1834 <put_fat+0x15a>
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	11 f0       	breq	.+4      	; 0x1748 <put_fat+0x6e>
    1744:	22 e0       	ldi	r18, 0x02	; 2
    1746:	9c c0       	rjmp	.+312    	; 0x1880 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1748:	ea 01       	movw	r28, r20
    174a:	d6 95       	lsr	r29
    174c:	c7 95       	ror	r28
    174e:	c4 0f       	add	r28, r20
    1750:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    1752:	ae 01       	movw	r20, r28
    1754:	45 2f       	mov	r20, r21
    1756:	55 27       	eor	r21, r21
    1758:	46 95       	lsr	r20
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	42 0d       	add	r20, r2
    1760:	53 1d       	adc	r21, r3
    1762:	64 1d       	adc	r22, r4
    1764:	75 1d       	adc	r23, r5
    1766:	c3 01       	movw	r24, r6
    1768:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    176c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    176e:	88 23       	and	r24, r24
    1770:	09 f0       	breq	.+2      	; 0x1774 <put_fat+0x9a>
    1772:	86 c0       	rjmp	.+268    	; 0x1880 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1774:	de 01       	movw	r26, r28
    1776:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1778:	86 01       	movw	r16, r12
    177a:	01 70       	andi	r16, 0x01	; 1
    177c:	10 70       	andi	r17, 0x00	; 0
    177e:	01 15       	cp	r16, r1
    1780:	11 05       	cpc	r17, r1
    1782:	51 f0       	breq	.+20     	; 0x1798 <put_fat+0xbe>
    1784:	f3 01       	movw	r30, r6
    1786:	ea 0f       	add	r30, r26
    1788:	fb 1f       	adc	r31, r27
    178a:	86 a5       	ldd	r24, Z+46	; 0x2e
    178c:	8f 70       	andi	r24, 0x0F	; 15
    178e:	98 2d       	mov	r25, r8
    1790:	92 95       	swap	r25
    1792:	90 7f       	andi	r25, 0xF0	; 240
    1794:	98 2b       	or	r25, r24
    1796:	01 c0       	rjmp	.+2      	; 0x179a <put_fat+0xc0>
    1798:	98 2d       	mov	r25, r8
    179a:	a6 0d       	add	r26, r6
    179c:	b7 1d       	adc	r27, r7
    179e:	9e 96       	adiw	r26, 0x2e	; 46
    17a0:	9c 93       	st	X, r25
			bc++;
    17a2:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	f3 01       	movw	r30, r6
    17a8:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    17aa:	ae 01       	movw	r20, r28
    17ac:	45 2f       	mov	r20, r21
    17ae:	55 27       	eor	r21, r21
    17b0:	46 95       	lsr	r20
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	42 0d       	add	r20, r2
    17b8:	53 1d       	adc	r21, r3
    17ba:	64 1d       	adc	r22, r4
    17bc:	75 1d       	adc	r23, r5
    17be:	c3 01       	movw	r24, r6
    17c0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    17c4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17c6:	88 23       	and	r24, r24
    17c8:	09 f0       	breq	.+2      	; 0x17cc <put_fat+0xf2>
    17ca:	5a c0       	rjmp	.+180    	; 0x1880 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    17cc:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    17ce:	01 2b       	or	r16, r17
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <put_fat+0x10a>
    17d2:	64 e0       	ldi	r22, 0x04	; 4
    17d4:	b6 94       	lsr	r11
    17d6:	a7 94       	ror	r10
    17d8:	97 94       	ror	r9
    17da:	87 94       	ror	r8
    17dc:	6a 95       	dec	r22
    17de:	d1 f7       	brne	.-12     	; 0x17d4 <put_fat+0xfa>
    17e0:	48 2d       	mov	r20, r8
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <put_fat+0x120>
    17e4:	f3 01       	movw	r30, r6
    17e6:	ec 0f       	add	r30, r28
    17e8:	fd 1f       	adc	r31, r29
    17ea:	46 a5       	ldd	r20, Z+46	; 0x2e
    17ec:	40 7f       	andi	r20, 0xF0	; 240
    17ee:	bb 27       	eor	r27, r27
    17f0:	ab 2d       	mov	r26, r11
    17f2:	9a 2d       	mov	r25, r10
    17f4:	89 2d       	mov	r24, r9
    17f6:	8f 70       	andi	r24, 0x0F	; 15
    17f8:	48 2b       	or	r20, r24
    17fa:	c6 0d       	add	r28, r6
    17fc:	d7 1d       	adc	r29, r7
    17fe:	4e a7       	std	Y+46, r20	; 0x2e
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    1802:	77 27       	eor	r23, r23
    1804:	6f 2d       	mov	r22, r15
    1806:	5e 2d       	mov	r21, r14
    1808:	4d 2d       	mov	r20, r13
    180a:	42 0d       	add	r20, r2
    180c:	53 1d       	adc	r21, r3
    180e:	64 1d       	adc	r22, r4
    1810:	75 1d       	adc	r23, r5
    1812:	c3 01       	movw	r24, r6
    1814:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    1818:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    181a:	88 23       	and	r24, r24
    181c:	89 f5       	brne	.+98     	; 0x1880 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    181e:	f6 01       	movw	r30, r12
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	f1 70       	andi	r31, 0x01	; 1
    1826:	e6 0d       	add	r30, r6
    1828:	f7 1d       	adc	r31, r7
    182a:	86 a6       	std	Z+46, r8	; 0x2e
    182c:	89 2d       	mov	r24, r9
    182e:	99 27       	eor	r25, r25
    1830:	87 a7       	std	Z+47, r24	; 0x2f
    1832:	26 c0       	rjmp	.+76     	; 0x1880 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    1834:	87 e0       	ldi	r24, 0x07	; 7
    1836:	76 95       	lsr	r23
    1838:	67 95       	ror	r22
    183a:	57 95       	ror	r21
    183c:	47 95       	ror	r20
    183e:	8a 95       	dec	r24
    1840:	d1 f7       	brne	.-12     	; 0x1836 <put_fat+0x15c>
    1842:	42 0d       	add	r20, r2
    1844:	53 1d       	adc	r21, r3
    1846:	64 1d       	adc	r22, r4
    1848:	75 1d       	adc	r23, r5
    184a:	c3 01       	movw	r24, r6
    184c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    1850:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1852:	88 23       	and	r24, r24
    1854:	a9 f4       	brne	.+42     	; 0x1880 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    1856:	f6 01       	movw	r30, r12
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	f1 70       	andi	r31, 0x01	; 1
    1862:	e6 0d       	add	r30, r6
    1864:	f7 1d       	adc	r31, r7
    1866:	86 a6       	std	Z+46, r8	; 0x2e
    1868:	89 2d       	mov	r24, r9
    186a:	99 27       	eor	r25, r25
    186c:	87 a7       	std	Z+47, r24	; 0x2f
    186e:	c5 01       	movw	r24, r10
    1870:	aa 27       	eor	r26, r26
    1872:	bb 27       	eor	r27, r27
    1874:	80 ab       	std	Z+48, r24	; 0x30
    1876:	8b 2d       	mov	r24, r11
    1878:	99 27       	eor	r25, r25
    187a:	aa 27       	eor	r26, r26
    187c:	bb 27       	eor	r27, r27
    187e:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	f3 01       	movw	r30, r6
    1884:	84 83       	std	Z+4, r24	; 0x04
    1886:	01 c0       	rjmp	.+2      	; 0x188a <put_fat+0x1b0>
    1888:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    188a:	82 2f       	mov	r24, r18
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	9f 90       	pop	r9
    18a2:	8f 90       	pop	r8
    18a4:	7f 90       	pop	r7
    18a6:	6f 90       	pop	r6
    18a8:	5f 90       	pop	r5
    18aa:	4f 90       	pop	r4
    18ac:	3f 90       	pop	r3
    18ae:	2f 90       	pop	r2
    18b0:	08 95       	ret

000018b2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    18b2:	9f 92       	push	r9
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	ec 01       	movw	r28, r24
    18ca:	7a 01       	movw	r14, r20
    18cc:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    18ce:	42 30       	cpi	r20, 0x02	; 2
    18d0:	51 05       	cpc	r21, r1
    18d2:	61 05       	cpc	r22, r1
    18d4:	71 05       	cpc	r23, r1
    18d6:	08 f4       	brcc	.+2      	; 0x18da <remove_chain+0x28>
    18d8:	58 c0       	rjmp	.+176    	; 0x198a <remove_chain+0xd8>
    18da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18de:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18e0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18e2:	48 17       	cp	r20, r24
    18e4:	59 07       	cpc	r21, r25
    18e6:	6a 07       	cpc	r22, r26
    18e8:	7b 07       	cpc	r23, r27
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <remove_chain+0x3c>
    18ec:	41 c0       	rjmp	.+130    	; 0x1970 <remove_chain+0xbe>
    18ee:	4d c0       	rjmp	.+154    	; 0x198a <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    18f0:	ce 01       	movw	r24, r28
    18f2:	b8 01       	movw	r22, r16
    18f4:	a7 01       	movw	r20, r14
    18f6:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    18fa:	5b 01       	movw	r10, r22
    18fc:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    18fe:	61 15       	cp	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	81 05       	cpc	r24, r1
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <remove_chain+0x58>
    1908:	42 c0       	rjmp	.+132    	; 0x198e <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	a8 16       	cp	r10, r24
    190e:	b1 04       	cpc	r11, r1
    1910:	c1 04       	cpc	r12, r1
    1912:	d1 04       	cpc	r13, r1
    1914:	d1 f1       	breq	.+116    	; 0x198a <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1916:	2f ef       	ldi	r18, 0xFF	; 255
    1918:	a2 16       	cp	r10, r18
    191a:	2f ef       	ldi	r18, 0xFF	; 255
    191c:	b2 06       	cpc	r11, r18
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	c2 06       	cpc	r12, r18
    1922:	2f ef       	ldi	r18, 0xFF	; 255
    1924:	d2 06       	cpc	r13, r18
    1926:	11 f4       	brne	.+4      	; 0x192c <remove_chain+0x7a>
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	32 c0       	rjmp	.+100    	; 0x1990 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    192c:	ce 01       	movw	r24, r28
    192e:	b8 01       	movw	r22, r16
    1930:	a7 01       	movw	r20, r14
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	0e 94 6d 0b 	call	0x16da	; 0x16da <put_fat>
			if (res != FR_OK) break;
    193e:	88 23       	and	r24, r24
    1940:	39 f5       	brne	.+78     	; 0x1990 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1942:	8e 85       	ldd	r24, Y+14	; 0x0e
    1944:	9f 85       	ldd	r25, Y+15	; 0x0f
    1946:	a8 89       	ldd	r26, Y+16	; 0x10
    1948:	b9 89       	ldd	r27, Y+17	; 0x11
    194a:	8f 3f       	cpi	r24, 0xFF	; 255
    194c:	2f ef       	ldi	r18, 0xFF	; 255
    194e:	92 07       	cpc	r25, r18
    1950:	2f ef       	ldi	r18, 0xFF	; 255
    1952:	a2 07       	cpc	r26, r18
    1954:	2f ef       	ldi	r18, 0xFF	; 255
    1956:	b2 07       	cpc	r27, r18
    1958:	41 f0       	breq	.+16     	; 0x196a <remove_chain+0xb8>
				fs->free_clust++;
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	a1 1d       	adc	r26, r1
    195e:	b1 1d       	adc	r27, r1
    1960:	8e 87       	std	Y+14, r24	; 0x0e
    1962:	9f 87       	std	Y+15, r25	; 0x0f
    1964:	a8 8b       	std	Y+16, r26	; 0x10
    1966:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1968:	9d 82       	std	Y+5, r9	; 0x05
    196a:	86 01       	movw	r16, r12
    196c:	75 01       	movw	r14, r10
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <remove_chain+0xc2>
    1970:	99 24       	eor	r9, r9
    1972:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1974:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1976:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1978:	ac 8d       	ldd	r26, Y+28	; 0x1c
    197a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    197c:	e8 16       	cp	r14, r24
    197e:	f9 06       	cpc	r15, r25
    1980:	0a 07       	cpc	r16, r26
    1982:	1b 07       	cpc	r17, r27
    1984:	08 f4       	brcc	.+2      	; 0x1988 <remove_chain+0xd6>
    1986:	b4 cf       	rjmp	.-152    	; 0x18f0 <remove_chain+0x3e>
    1988:	02 c0       	rjmp	.+4      	; 0x198e <remove_chain+0xdc>
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <remove_chain+0xde>
    198e:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	9f 90       	pop	r9
    19a6:	08 95       	ret

000019a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    19a8:	2f 92       	push	r2
    19aa:	3f 92       	push	r3
    19ac:	4f 92       	push	r4
    19ae:	5f 92       	push	r5
    19b0:	6f 92       	push	r6
    19b2:	7f 92       	push	r7
    19b4:	8f 92       	push	r8
    19b6:	9f 92       	push	r9
    19b8:	af 92       	push	r10
    19ba:	bf 92       	push	r11
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <create_chain+0x26>
    19ce:	0f 92       	push	r0
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	1c 01       	movw	r2, r24
    19d6:	2a 01       	movw	r4, r20
    19d8:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    19da:	dc 01       	movw	r26, r24
    19dc:	5a 96       	adiw	r26, 0x1a	; 26
    19de:	8d 91       	ld	r24, X+
    19e0:	9d 91       	ld	r25, X+
    19e2:	0d 90       	ld	r0, X+
    19e4:	bc 91       	ld	r27, X
    19e6:	a0 2d       	mov	r26, r0
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	ab 83       	std	Y+3, r26	; 0x03
    19ee:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    19f0:	41 15       	cp	r20, r1
    19f2:	51 05       	cpc	r21, r1
    19f4:	61 05       	cpc	r22, r1
    19f6:	71 05       	cpc	r23, r1
    19f8:	81 f4       	brne	.+32     	; 0x1a1a <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    19fa:	f1 01       	movw	r30, r2
    19fc:	82 84       	ldd	r8, Z+10	; 0x0a
    19fe:	93 84       	ldd	r9, Z+11	; 0x0b
    1a00:	a4 84       	ldd	r10, Z+12	; 0x0c
    1a02:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1a04:	81 14       	cp	r8, r1
    1a06:	91 04       	cpc	r9, r1
    1a08:	a1 04       	cpc	r10, r1
    1a0a:	b1 04       	cpc	r11, r1
    1a0c:	11 f1       	breq	.+68     	; 0x1a52 <create_chain+0xaa>
    1a0e:	88 16       	cp	r8, r24
    1a10:	99 06       	cpc	r9, r25
    1a12:	aa 06       	cpc	r10, r26
    1a14:	bb 06       	cpc	r11, r27
    1a16:	e8 f4       	brcc	.+58     	; 0x1a52 <create_chain+0xaa>
    1a18:	21 c0       	rjmp	.+66     	; 0x1a5c <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1a1a:	c1 01       	movw	r24, r2
    1a1c:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    1a20:	9b 01       	movw	r18, r22
    1a22:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1a24:	62 30       	cpi	r22, 0x02	; 2
    1a26:	71 05       	cpc	r23, r1
    1a28:	81 05       	cpc	r24, r1
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	28 f4       	brcc	.+10     	; 0x1a38 <create_chain+0x90>
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	93 c0       	rjmp	.+294    	; 0x1b5e <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a40:	28 17       	cp	r18, r24
    1a42:	39 07       	cpc	r19, r25
    1a44:	4a 07       	cpc	r20, r26
    1a46:	5b 07       	cpc	r21, r27
    1a48:	08 f4       	brcc	.+2      	; 0x1a4c <create_chain+0xa4>
    1a4a:	89 c0       	rjmp	.+274    	; 0x1b5e <create_chain+0x1b6>
    1a4c:	53 01       	movw	r10, r6
    1a4e:	42 01       	movw	r8, r4
    1a50:	05 c0       	rjmp	.+10     	; 0x1a5c <create_chain+0xb4>
    1a52:	b1 e0       	ldi	r27, 0x01	; 1
    1a54:	8b 2e       	mov	r8, r27
    1a56:	91 2c       	mov	r9, r1
    1a58:	a1 2c       	mov	r10, r1
    1a5a:	b1 2c       	mov	r11, r1
    1a5c:	75 01       	movw	r14, r10
    1a5e:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1a60:	08 94       	sec
    1a62:	c1 1c       	adc	r12, r1
    1a64:	d1 1c       	adc	r13, r1
    1a66:	e1 1c       	adc	r14, r1
    1a68:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a70:	bc 81       	ldd	r27, Y+4	; 0x04
    1a72:	c8 16       	cp	r12, r24
    1a74:	d9 06       	cpc	r13, r25
    1a76:	ea 06       	cpc	r14, r26
    1a78:	fb 06       	cpc	r15, r27
    1a7a:	60 f0       	brcs	.+24     	; 0x1a94 <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	89 16       	cp	r8, r25
    1a80:	91 04       	cpc	r9, r1
    1a82:	a1 04       	cpc	r10, r1
    1a84:	b1 04       	cpc	r11, r1
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <create_chain+0xe2>
    1a88:	61 c0       	rjmp	.+194    	; 0x1b4c <create_chain+0x1a4>
    1a8a:	a2 e0       	ldi	r26, 0x02	; 2
    1a8c:	ca 2e       	mov	r12, r26
    1a8e:	d1 2c       	mov	r13, r1
    1a90:	e1 2c       	mov	r14, r1
    1a92:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a94:	c1 01       	movw	r24, r2
    1a96:	b7 01       	movw	r22, r14
    1a98:	a6 01       	movw	r20, r12
    1a9a:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1aa2:	61 15       	cp	r22, r1
    1aa4:	71 05       	cpc	r23, r1
    1aa6:	81 05       	cpc	r24, r1
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	a9 f0       	breq	.+42     	; 0x1ad6 <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1aac:	6f 3f       	cpi	r22, 0xFF	; 255
    1aae:	af ef       	ldi	r26, 0xFF	; 255
    1ab0:	7a 07       	cpc	r23, r26
    1ab2:	af ef       	ldi	r26, 0xFF	; 255
    1ab4:	8a 07       	cpc	r24, r26
    1ab6:	af ef       	ldi	r26, 0xFF	; 255
    1ab8:	9a 07       	cpc	r25, r26
    1aba:	09 f4       	brne	.+2      	; 0x1abe <create_chain+0x116>
    1abc:	50 c0       	rjmp	.+160    	; 0x1b5e <create_chain+0x1b6>
    1abe:	61 30       	cpi	r22, 0x01	; 1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	81 05       	cpc	r24, r1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <create_chain+0x122>
    1ac8:	4a c0       	rjmp	.+148    	; 0x1b5e <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1aca:	c8 14       	cp	r12, r8
    1acc:	d9 04       	cpc	r13, r9
    1ace:	ea 04       	cpc	r14, r10
    1ad0:	fb 04       	cpc	r15, r11
    1ad2:	31 f6       	brne	.-116    	; 0x1a60 <create_chain+0xb8>
    1ad4:	3b c0       	rjmp	.+118    	; 0x1b4c <create_chain+0x1a4>
    1ad6:	bc 2c       	mov	r11, r12
    1ad8:	ad 2c       	mov	r10, r13
    1ada:	9e 2c       	mov	r9, r14
    1adc:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1ade:	c1 01       	movw	r24, r2
    1ae0:	a6 01       	movw	r20, r12
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	0f ef       	ldi	r16, 0xFF	; 255
    1ae6:	1f ef       	ldi	r17, 0xFF	; 255
    1ae8:	2f ef       	ldi	r18, 0xFF	; 255
    1aea:	3f e0       	ldi	r19, 0x0F	; 15
    1aec:	0e 94 6d 0b 	call	0x16da	; 0x16da <put_fat>
    1af0:	88 23       	and	r24, r24
    1af2:	89 f5       	brne	.+98     	; 0x1b56 <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1af4:	41 14       	cp	r4, r1
    1af6:	51 04       	cpc	r5, r1
    1af8:	61 04       	cpc	r6, r1
    1afa:	71 04       	cpc	r7, r1
    1afc:	49 f0       	breq	.+18     	; 0x1b10 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1afe:	c1 01       	movw	r24, r2
    1b00:	b3 01       	movw	r22, r6
    1b02:	a2 01       	movw	r20, r4
    1b04:	86 01       	movw	r16, r12
    1b06:	97 01       	movw	r18, r14
    1b08:	0e 94 6d 0b 	call	0x16da	; 0x16da <put_fat>
    1b0c:	88 23       	and	r24, r24
    1b0e:	19 f5       	brne	.+70     	; 0x1b56 <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1b10:	f1 01       	movw	r30, r2
    1b12:	b2 86       	std	Z+10, r11	; 0x0a
    1b14:	a3 86       	std	Z+11, r10	; 0x0b
    1b16:	94 86       	std	Z+12, r9	; 0x0c
    1b18:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1b1a:	86 85       	ldd	r24, Z+14	; 0x0e
    1b1c:	97 85       	ldd	r25, Z+15	; 0x0f
    1b1e:	a0 89       	ldd	r26, Z+16	; 0x10
    1b20:	b1 89       	ldd	r27, Z+17	; 0x11
    1b22:	8f 3f       	cpi	r24, 0xFF	; 255
    1b24:	ff ef       	ldi	r31, 0xFF	; 255
    1b26:	9f 07       	cpc	r25, r31
    1b28:	ff ef       	ldi	r31, 0xFF	; 255
    1b2a:	af 07       	cpc	r26, r31
    1b2c:	ff ef       	ldi	r31, 0xFF	; 255
    1b2e:	bf 07       	cpc	r27, r31
    1b30:	51 f0       	breq	.+20     	; 0x1b46 <create_chain+0x19e>
		fs->free_clust--;
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	a1 09       	sbc	r26, r1
    1b36:	b1 09       	sbc	r27, r1
    1b38:	f1 01       	movw	r30, r2
    1b3a:	86 87       	std	Z+14, r24	; 0x0e
    1b3c:	97 87       	std	Z+15, r25	; 0x0f
    1b3e:	a0 8b       	std	Z+16, r26	; 0x10
    1b40:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	85 83       	std	Z+5, r24	; 0x05
    1b46:	a7 01       	movw	r20, r14
    1b48:	96 01       	movw	r18, r12
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <create_chain+0x1b6>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <create_chain+0x1b6>
    1b56:	2f ef       	ldi	r18, 0xFF	; 255
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f ef       	ldi	r20, 0xFF	; 255
    1b5c:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1b5e:	b9 01       	movw	r22, r18
    1b60:	ca 01       	movw	r24, r20
    1b62:	24 96       	adiw	r28, 0x04	; 4
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	9f 90       	pop	r9
    1b7e:	8f 90       	pop	r8
    1b80:	7f 90       	pop	r7
    1b82:	6f 90       	pop	r6
    1b84:	5f 90       	pop	r5
    1b86:	4f 90       	pop	r4
    1b88:	3f 90       	pop	r3
    1b8a:	2f 90       	pop	r2
    1b8c:	08 95       	ret

00001b8e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	ec 01       	movw	r28, r24
    1b9c:	7a 01       	movw	r14, r20
    1b9e:	8b 01       	movw	r16, r22
	clst -= 2;
    1ba0:	8e ef       	ldi	r24, 0xFE	; 254
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	af ef       	ldi	r26, 0xFF	; 255
    1ba6:	bf ef       	ldi	r27, 0xFF	; 255
    1ba8:	e8 0e       	add	r14, r24
    1baa:	f9 1e       	adc	r15, r25
    1bac:	0a 1f       	adc	r16, r26
    1bae:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1bb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bb2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bb4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1bb6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1bb8:	02 97       	sbiw	r24, 0x02	; 2
    1bba:	a1 09       	sbc	r26, r1
    1bbc:	b1 09       	sbc	r27, r1
    1bbe:	e8 16       	cp	r14, r24
    1bc0:	f9 06       	cpc	r15, r25
    1bc2:	0a 07       	cpc	r16, r26
    1bc4:	1b 07       	cpc	r17, r27
    1bc6:	28 f0       	brcs	.+10     	; 0x1bd2 <clust2sect+0x44>
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	12 c0       	rjmp	.+36     	; 0x1bf6 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1bd2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	c8 01       	movw	r24, r16
    1bdc:	b7 01       	movw	r22, r14
    1bde:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    1be2:	9b 01       	movw	r18, r22
    1be4:	ac 01       	movw	r20, r24
    1be6:	8e a1       	ldd	r24, Y+38	; 0x26
    1be8:	9f a1       	ldd	r25, Y+39	; 0x27
    1bea:	a8 a5       	ldd	r26, Y+40	; 0x28
    1bec:	b9 a5       	ldd	r27, Y+41	; 0x29
    1bee:	28 0f       	add	r18, r24
    1bf0:	39 1f       	adc	r19, r25
    1bf2:	4a 1f       	adc	r20, r26
    1bf4:	5b 1f       	adc	r21, r27
}
    1bf6:	b9 01       	movw	r22, r18
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	08 95       	ret

00001c08 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1c08:	af 92       	push	r10
    1c0a:	bf 92       	push	r11
    1c0c:	cf 92       	push	r12
    1c0e:	df 92       	push	r13
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	5c 01       	movw	r10, r24
    1c1e:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1c20:	dc 01       	movw	r26, r24
    1c22:	14 96       	adiw	r26, 0x04	; 4
    1c24:	6d 93       	st	X+, r22
    1c26:	7c 93       	st	X, r23
    1c28:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1c2a:	16 96       	adiw	r26, 0x06	; 6
    1c2c:	4d 91       	ld	r20, X+
    1c2e:	5d 91       	ld	r21, X+
    1c30:	6d 91       	ld	r22, X+
    1c32:	7c 91       	ld	r23, X
    1c34:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1c36:	41 30       	cpi	r20, 0x01	; 1
    1c38:	51 05       	cpc	r21, r1
    1c3a:	61 05       	cpc	r22, r1
    1c3c:	71 05       	cpc	r23, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <dir_seek+0x3a>
    1c40:	d3 c0       	rjmp	.+422    	; 0x1de8 <dir_seek+0x1e0>
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c48:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c4a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c4c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c4e:	48 17       	cp	r20, r24
    1c50:	59 07       	cpc	r21, r25
    1c52:	6a 07       	cpc	r22, r26
    1c54:	7b 07       	cpc	r23, r27
    1c56:	08 f0       	brcs	.+2      	; 0x1c5a <dir_seek+0x52>
    1c58:	c7 c0       	rjmp	.+398    	; 0x1de8 <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1c5a:	41 15       	cp	r20, r1
    1c5c:	51 05       	cpc	r21, r1
    1c5e:	61 05       	cpc	r22, r1
    1c60:	71 05       	cpc	r23, r1
    1c62:	81 f5       	brne	.+96     	; 0x1cc4 <dir_seek+0xbc>
    1c64:	80 81       	ld	r24, Z
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	49 f4       	brne	.+18     	; 0x1c7c <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1c6a:	42 a1       	ldd	r20, Z+34	; 0x22
    1c6c:	53 a1       	ldd	r21, Z+35	; 0x23
    1c6e:	64 a1       	ldd	r22, Z+36	; 0x24
    1c70:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1c72:	41 15       	cp	r20, r1
    1c74:	51 05       	cpc	r21, r1
    1c76:	61 05       	cpc	r22, r1
    1c78:	71 05       	cpc	r23, r1
    1c7a:	21 f5       	brne	.+72     	; 0x1cc4 <dir_seek+0xbc>
		dj->clust = clst;
    1c7c:	f5 01       	movw	r30, r10
    1c7e:	12 86       	std	Z+10, r1	; 0x0a
    1c80:	13 86       	std	Z+11, r1	; 0x0b
    1c82:	14 86       	std	Z+12, r1	; 0x0c
    1c84:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1c86:	01 90       	ld	r0, Z+
    1c88:	f0 81       	ld	r31, Z
    1c8a:	e0 2d       	mov	r30, r0
    1c8c:	80 85       	ldd	r24, Z+8	; 0x08
    1c8e:	91 85       	ldd	r25, Z+9	; 0x09
    1c90:	c8 16       	cp	r12, r24
    1c92:	d9 06       	cpc	r13, r25
    1c94:	08 f0       	brcs	.+2      	; 0x1c98 <dir_seek+0x90>
    1c96:	a8 c0       	rjmp	.+336    	; 0x1de8 <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1c98:	c6 01       	movw	r24, r12
    1c9a:	24 e0       	ldi	r18, 0x04	; 4
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	2a 95       	dec	r18
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <dir_seek+0x94>
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	22 a1       	ldd	r18, Z+34	; 0x22
    1caa:	33 a1       	ldd	r19, Z+35	; 0x23
    1cac:	44 a1       	ldd	r20, Z+36	; 0x24
    1cae:	55 a1       	ldd	r21, Z+37	; 0x25
    1cb0:	82 0f       	add	r24, r18
    1cb2:	93 1f       	adc	r25, r19
    1cb4:	a4 1f       	adc	r26, r20
    1cb6:	b5 1f       	adc	r27, r21
    1cb8:	f5 01       	movw	r30, r10
    1cba:	86 87       	std	Z+14, r24	; 0x0e
    1cbc:	97 87       	std	Z+15, r25	; 0x0f
    1cbe:	a0 8b       	std	Z+16, r26	; 0x10
    1cc0:	b1 8b       	std	Z+17, r27	; 0x11
    1cc2:	7a c0       	rjmp	.+244    	; 0x1db8 <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	08 2f       	mov	r16, r24
    1cc8:	10 e0       	ldi	r17, 0x00	; 0
    1cca:	94 e0       	ldi	r25, 0x04	; 4
    1ccc:	00 0f       	add	r16, r16
    1cce:	11 1f       	adc	r17, r17
    1cd0:	9a 95       	dec	r25
    1cd2:	e1 f7       	brne	.-8      	; 0x1ccc <dir_seek+0xc4>
    1cd4:	24 c0       	rjmp	.+72     	; 0x1d1e <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    1cdc:	ab 01       	movw	r20, r22
    1cde:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1ce0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ce2:	ff ef       	ldi	r31, 0xFF	; 255
    1ce4:	5f 07       	cpc	r21, r31
    1ce6:	ff ef       	ldi	r31, 0xFF	; 255
    1ce8:	6f 07       	cpc	r22, r31
    1cea:	ff ef       	ldi	r31, 0xFF	; 255
    1cec:	7f 07       	cpc	r23, r31
    1cee:	11 f4       	brne	.+4      	; 0x1cf4 <dir_seek+0xec>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	7b c0       	rjmp	.+246    	; 0x1dea <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1cf4:	42 30       	cpi	r20, 0x02	; 2
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	61 05       	cpc	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	08 f4       	brcc	.+2      	; 0x1d00 <dir_seek+0xf8>
    1cfe:	74 c0       	rjmp	.+232    	; 0x1de8 <dir_seek+0x1e0>
    1d00:	d5 01       	movw	r26, r10
    1d02:	ed 91       	ld	r30, X+
    1d04:	fc 91       	ld	r31, X
    1d06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d08:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d0a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d0c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d0e:	48 17       	cp	r20, r24
    1d10:	59 07       	cpc	r21, r25
    1d12:	6a 07       	cpc	r22, r26
    1d14:	7b 07       	cpc	r23, r27
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <dir_seek+0x112>
    1d18:	67 c0       	rjmp	.+206    	; 0x1de8 <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1d1a:	c0 1a       	sub	r12, r16
    1d1c:	d1 0a       	sbc	r13, r17
    1d1e:	f5 01       	movw	r30, r10
    1d20:	c0 81       	ld	r28, Z
    1d22:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1d24:	c0 16       	cp	r12, r16
    1d26:	d1 06       	cpc	r13, r17
    1d28:	b0 f6       	brcc	.-84     	; 0x1cd6 <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1d2a:	d5 01       	movw	r26, r10
    1d2c:	1a 96       	adiw	r26, 0x0a	; 10
    1d2e:	4d 93       	st	X+, r20
    1d30:	5d 93       	st	X+, r21
    1d32:	6d 93       	st	X+, r22
    1d34:	7c 93       	st	X, r23
    1d36:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d38:	8e ef       	ldi	r24, 0xFE	; 254
    1d3a:	e8 2e       	mov	r14, r24
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	f8 2e       	mov	r15, r24
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	08 2f       	mov	r16, r24
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	18 2f       	mov	r17, r24
    1d48:	e4 0e       	add	r14, r20
    1d4a:	f5 1e       	adc	r15, r21
    1d4c:	06 1f       	adc	r16, r22
    1d4e:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d54:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d56:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d58:	02 97       	sbiw	r24, 0x02	; 2
    1d5a:	a1 09       	sbc	r26, r1
    1d5c:	b1 09       	sbc	r27, r1
    1d5e:	e8 16       	cp	r14, r24
    1d60:	f9 06       	cpc	r15, r25
    1d62:	0a 07       	cpc	r16, r26
    1d64:	1b 07       	cpc	r17, r27
    1d66:	28 f0       	brcs	.+10     	; 0x1d72 <dir_seek+0x16a>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	12 c0       	rjmp	.+36     	; 0x1d96 <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1d72:	2a 81       	ldd	r18, Y+2	; 0x02
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	8e a1       	ldd	r24, Y+38	; 0x26
    1d88:	9f a1       	ldd	r25, Y+39	; 0x27
    1d8a:	a8 a5       	ldd	r26, Y+40	; 0x28
    1d8c:	b9 a5       	ldd	r27, Y+41	; 0x29
    1d8e:	28 0f       	add	r18, r24
    1d90:	39 1f       	adc	r19, r25
    1d92:	4a 1f       	adc	r20, r26
    1d94:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d96:	c6 01       	movw	r24, r12
    1d98:	04 e0       	ldi	r16, 0x04	; 4
    1d9a:	96 95       	lsr	r25
    1d9c:	87 95       	ror	r24
    1d9e:	0a 95       	dec	r16
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <dir_seek+0x192>
    1da2:	a0 e0       	ldi	r26, 0x00	; 0
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	28 0f       	add	r18, r24
    1da8:	39 1f       	adc	r19, r25
    1daa:	4a 1f       	adc	r20, r26
    1dac:	5b 1f       	adc	r21, r27
    1dae:	f5 01       	movw	r30, r10
    1db0:	26 87       	std	Z+14, r18	; 0x0e
    1db2:	37 87       	std	Z+15, r19	; 0x0f
    1db4:	40 8b       	std	Z+16, r20	; 0x10
    1db6:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1db8:	ff e0       	ldi	r31, 0x0F	; 15
    1dba:	cf 22       	and	r12, r31
    1dbc:	dd 24       	eor	r13, r13
    1dbe:	15 e0       	ldi	r17, 0x05	; 5
    1dc0:	cc 0c       	add	r12, r12
    1dc2:	dd 1c       	adc	r13, r13
    1dc4:	1a 95       	dec	r17
    1dc6:	e1 f7       	brne	.-8      	; 0x1dc0 <dir_seek+0x1b8>
    1dc8:	8e e2       	ldi	r24, 0x2E	; 46
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	c8 0e       	add	r12, r24
    1dce:	d9 1e       	adc	r13, r25
    1dd0:	d5 01       	movw	r26, r10
    1dd2:	8d 91       	ld	r24, X+
    1dd4:	9c 91       	ld	r25, X
    1dd6:	11 97       	sbiw	r26, 0x01	; 1
    1dd8:	8c 0d       	add	r24, r12
    1dda:	9d 1d       	adc	r25, r13
    1ddc:	52 96       	adiw	r26, 0x12	; 18
    1dde:	8d 93       	st	X+, r24
    1de0:	9c 93       	st	X, r25
    1de2:	53 97       	sbiw	r26, 0x13	; 19
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1de8:	82 e0       	ldi	r24, 0x02	; 2
}
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	08 95       	ret

00001e00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1e00:	4f 92       	push	r4
    1e02:	5f 92       	push	r5
    1e04:	6f 92       	push	r6
    1e06:	7f 92       	push	r7
    1e08:	8f 92       	push	r8
    1e0a:	9f 92       	push	r9
    1e0c:	af 92       	push	r10
    1e0e:	bf 92       	push	r11
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	ec 01       	movw	r28, r24
    1e22:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1e24:	6c 80       	ldd	r6, Y+4	; 0x04
    1e26:	7d 80       	ldd	r7, Y+5	; 0x05
    1e28:	08 94       	sec
    1e2a:	61 1c       	adc	r6, r1
    1e2c:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e2e:	61 14       	cp	r6, r1
    1e30:	71 04       	cpc	r7, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <dir_next+0x36>
    1e34:	4c c1       	rjmp	.+664    	; 0x20ce <dir_next+0x2ce>
    1e36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e38:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e3a:	a8 89       	ldd	r26, Y+16	; 0x10
    1e3c:	b9 89       	ldd	r27, Y+17	; 0x11
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	a1 05       	cpc	r26, r1
    1e42:	b1 05       	cpc	r27, r1
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <dir_next+0x48>
    1e46:	43 c1       	rjmp	.+646    	; 0x20ce <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1e48:	1f e0       	ldi	r17, 0x0F	; 15
    1e4a:	41 2e       	mov	r4, r17
    1e4c:	51 2c       	mov	r5, r1
    1e4e:	46 20       	and	r4, r6
    1e50:	57 20       	and	r5, r7
    1e52:	41 14       	cp	r4, r1
    1e54:	51 04       	cpc	r5, r1
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <dir_next+0x5a>
    1e58:	27 c1       	rjmp	.+590    	; 0x20a8 <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	a1 1d       	adc	r26, r1
    1e5e:	b1 1d       	adc	r27, r1
    1e60:	8e 87       	std	Y+14, r24	; 0x0e
    1e62:	9f 87       	std	Y+15, r25	; 0x0f
    1e64:	a8 8b       	std	Y+16, r26	; 0x10
    1e66:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1e68:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e6a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e70:	e8 81       	ld	r30, Y
    1e72:	f9 81       	ldd	r31, Y+1	; 0x01
    1e74:	41 15       	cp	r20, r1
    1e76:	51 05       	cpc	r21, r1
    1e78:	61 05       	cpc	r22, r1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	39 f4       	brne	.+14     	; 0x1e8c <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1e7e:	80 85       	ldd	r24, Z+8	; 0x08
    1e80:	91 85       	ldd	r25, Z+9	; 0x09
    1e82:	68 16       	cp	r6, r24
    1e84:	79 06       	cpc	r7, r25
    1e86:	08 f4       	brcc	.+2      	; 0x1e8a <dir_next+0x8a>
    1e88:	0f c1       	rjmp	.+542    	; 0x20a8 <dir_next+0x2a8>
    1e8a:	21 c1       	rjmp	.+578    	; 0x20ce <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	93 01       	movw	r18, r6
    1e94:	a4 e0       	ldi	r26, 0x04	; 4
    1e96:	36 95       	lsr	r19
    1e98:	27 95       	ror	r18
    1e9a:	aa 95       	dec	r26
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <dir_next+0x96>
    1e9e:	82 23       	and	r24, r18
    1ea0:	93 23       	and	r25, r19
    1ea2:	89 2b       	or	r24, r25
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <dir_next+0xa8>
    1ea6:	00 c1       	rjmp	.+512    	; 0x20a8 <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1ea8:	cf 01       	movw	r24, r30
    1eaa:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    1eae:	7b 01       	movw	r14, r22
    1eb0:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1eb2:	62 30       	cpi	r22, 0x02	; 2
    1eb4:	71 05       	cpc	r23, r1
    1eb6:	81 05       	cpc	r24, r1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	08 f4       	brcc	.+2      	; 0x1ebe <dir_next+0xbe>
    1ebc:	0a c1       	rjmp	.+532    	; 0x20d2 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	e8 16       	cp	r14, r24
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	f8 06       	cpc	r15, r24
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	08 07       	cpc	r16, r24
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	18 07       	cpc	r17, r24
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <dir_next+0xd2>
    1ed0:	02 c1       	rjmp	.+516    	; 0x20d6 <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1ed2:	e8 81       	ld	r30, Y
    1ed4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ed8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eda:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1edc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1ede:	e8 16       	cp	r14, r24
    1ee0:	f9 06       	cpc	r15, r25
    1ee2:	0a 07       	cpc	r16, r26
    1ee4:	1b 07       	cpc	r17, r27
    1ee6:	08 f4       	brcc	.+2      	; 0x1eea <dir_next+0xea>
    1ee8:	a6 c0       	rjmp	.+332    	; 0x2036 <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1eea:	dd 20       	and	r13, r13
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <dir_next+0xf0>
    1eee:	ef c0       	rjmp	.+478    	; 0x20ce <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1ef0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ef2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ef4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ef6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ef8:	cf 01       	movw	r24, r30
    1efa:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <create_chain>
    1efe:	7b 01       	movw	r14, r22
    1f00:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1f02:	61 15       	cp	r22, r1
    1f04:	71 05       	cpc	r23, r1
    1f06:	81 05       	cpc	r24, r1
    1f08:	91 05       	cpc	r25, r1
    1f0a:	11 f4       	brne	.+4      	; 0x1f10 <dir_next+0x110>
    1f0c:	87 e0       	ldi	r24, 0x07	; 7
    1f0e:	e4 c0       	rjmp	.+456    	; 0x20d8 <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	e9 16       	cp	r14, r25
    1f14:	f1 04       	cpc	r15, r1
    1f16:	01 05       	cpc	r16, r1
    1f18:	11 05       	cpc	r17, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <dir_next+0x11e>
    1f1c:	da c0       	rjmp	.+436    	; 0x20d2 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f1e:	af ef       	ldi	r26, 0xFF	; 255
    1f20:	ea 16       	cp	r14, r26
    1f22:	af ef       	ldi	r26, 0xFF	; 255
    1f24:	fa 06       	cpc	r15, r26
    1f26:	af ef       	ldi	r26, 0xFF	; 255
    1f28:	0a 07       	cpc	r16, r26
    1f2a:	af ef       	ldi	r26, 0xFF	; 255
    1f2c:	1a 07       	cpc	r17, r26
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <dir_next+0x132>
    1f30:	d2 c0       	rjmp	.+420    	; 0x20d6 <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1f32:	88 81       	ld	r24, Y
    1f34:	99 81       	ldd	r25, Y+1	; 0x01
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    1f42:	88 23       	and	r24, r24
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <dir_next+0x148>
    1f46:	c7 c0       	rjmp	.+398    	; 0x20d6 <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1f48:	e8 81       	ld	r30, Y
    1f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f4c:	be 96       	adiw	r30, 0x2e	; 46
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1f54:	11 92       	st	Z+, r1
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	bf ef       	ldi	r27, 0xFF	; 255
    1f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5c:	9b 07       	cpc	r25, r27
    1f5e:	d1 f7       	brne	.-12     	; 0x1f54 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1f60:	88 80       	ld	r8, Y
    1f62:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1f64:	4e ef       	ldi	r20, 0xFE	; 254
    1f66:	a4 2e       	mov	r10, r20
    1f68:	4f ef       	ldi	r20, 0xFF	; 255
    1f6a:	b4 2e       	mov	r11, r20
    1f6c:	4f ef       	ldi	r20, 0xFF	; 255
    1f6e:	c4 2e       	mov	r12, r20
    1f70:	4f ef       	ldi	r20, 0xFF	; 255
    1f72:	d4 2e       	mov	r13, r20
    1f74:	ae 0c       	add	r10, r14
    1f76:	bf 1c       	adc	r11, r15
    1f78:	c0 1e       	adc	r12, r16
    1f7a:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1f7c:	f4 01       	movw	r30, r8
    1f7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f80:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f82:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f84:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f86:	02 97       	sbiw	r24, 0x02	; 2
    1f88:	a1 09       	sbc	r26, r1
    1f8a:	b1 09       	sbc	r27, r1
    1f8c:	a8 16       	cp	r10, r24
    1f8e:	b9 06       	cpc	r11, r25
    1f90:	ca 06       	cpc	r12, r26
    1f92:	db 06       	cpc	r13, r27
    1f94:	28 f0       	brcs	.+10     	; 0x1fa0 <dir_next+0x1a0>
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	15 c0       	rjmp	.+42     	; 0x1fca <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1fa0:	d4 01       	movw	r26, r8
    1fa2:	12 96       	adiw	r26, 0x02	; 2
    1fa4:	2c 91       	ld	r18, X
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	c6 01       	movw	r24, r12
    1fae:	b5 01       	movw	r22, r10
    1fb0:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    1fb4:	9b 01       	movw	r18, r22
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	f4 01       	movw	r30, r8
    1fba:	86 a1       	ldd	r24, Z+38	; 0x26
    1fbc:	97 a1       	ldd	r25, Z+39	; 0x27
    1fbe:	a0 a5       	ldd	r26, Z+40	; 0x28
    1fc0:	b1 a5       	ldd	r27, Z+41	; 0x29
    1fc2:	28 0f       	add	r18, r24
    1fc4:	39 1f       	adc	r19, r25
    1fc6:	4a 1f       	adc	r20, r26
    1fc8:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fca:	d4 01       	movw	r26, r8
    1fcc:	9a 96       	adiw	r26, 0x2a	; 42
    1fce:	2d 93       	st	X+, r18
    1fd0:	3d 93       	st	X+, r19
    1fd2:	4d 93       	st	X+, r20
    1fd4:	5c 93       	st	X, r21
    1fd6:	9d 97       	sbiw	r26, 0x2d	; 45
    1fd8:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1fda:	cc 24       	eor	r12, r12
    1fdc:	c3 94       	inc	r12
    1fde:	1a c0       	rjmp	.+52     	; 0x2014 <dir_next+0x214>
    1fe0:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1fe2:	88 81       	ld	r24, Y
    1fe4:	99 81       	ldd	r25, Y+1	; 0x01
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    1ff2:	88 23       	and	r24, r24
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <dir_next+0x1f8>
    1ff6:	6f c0       	rjmp	.+222    	; 0x20d6 <dir_next+0x2d6>
						dj->fs->winsect++;
    1ff8:	e8 81       	ld	r30, Y
    1ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffc:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ffe:	93 a5       	ldd	r25, Z+43	; 0x2b
    2000:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2002:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	a1 1d       	adc	r26, r1
    2008:	b1 1d       	adc	r27, r1
    200a:	82 a7       	std	Z+42, r24	; 0x2a
    200c:	93 a7       	std	Z+43, r25	; 0x2b
    200e:	a4 a7       	std	Z+44, r26	; 0x2c
    2010:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2012:	d3 94       	inc	r13
    2014:	e8 81       	ld	r30, Y
    2016:	f9 81       	ldd	r31, Y+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	d8 16       	cp	r13, r24
    201c:	08 f3       	brcs	.-62     	; 0x1fe0 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    201e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2020:	93 a5       	ldd	r25, Z+43	; 0x2b
    2022:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2024:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2026:	8d 19       	sub	r24, r13
    2028:	91 09       	sbc	r25, r1
    202a:	a1 09       	sbc	r26, r1
    202c:	b1 09       	sbc	r27, r1
    202e:	82 a7       	std	Z+42, r24	; 0x2a
    2030:	93 a7       	std	Z+43, r25	; 0x2b
    2032:	a4 a7       	std	Z+44, r26	; 0x2c
    2034:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2036:	ea 86       	std	Y+10, r14	; 0x0a
    2038:	fb 86       	std	Y+11, r15	; 0x0b
    203a:	0c 87       	std	Y+12, r16	; 0x0c
    203c:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    203e:	c8 80       	ld	r12, Y
    2040:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2042:	8e ef       	ldi	r24, 0xFE	; 254
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	af ef       	ldi	r26, 0xFF	; 255
    2048:	bf ef       	ldi	r27, 0xFF	; 255
    204a:	e8 0e       	add	r14, r24
    204c:	f9 1e       	adc	r15, r25
    204e:	0a 1f       	adc	r16, r26
    2050:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2052:	f6 01       	movw	r30, r12
    2054:	82 8d       	ldd	r24, Z+26	; 0x1a
    2056:	93 8d       	ldd	r25, Z+27	; 0x1b
    2058:	a4 8d       	ldd	r26, Z+28	; 0x1c
    205a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    205c:	02 97       	sbiw	r24, 0x02	; 2
    205e:	a1 09       	sbc	r26, r1
    2060:	b1 09       	sbc	r27, r1
    2062:	e8 16       	cp	r14, r24
    2064:	f9 06       	cpc	r15, r25
    2066:	0a 07       	cpc	r16, r26
    2068:	1b 07       	cpc	r17, r27
    206a:	28 f0       	brcs	.+10     	; 0x2076 <dir_next+0x276>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	15 c0       	rjmp	.+42     	; 0x20a0 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    2076:	d6 01       	movw	r26, r12
    2078:	12 96       	adiw	r26, 0x02	; 2
    207a:	2c 91       	ld	r18, X
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	c8 01       	movw	r24, r16
    2084:	b7 01       	movw	r22, r14
    2086:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    208a:	9b 01       	movw	r18, r22
    208c:	ac 01       	movw	r20, r24
    208e:	f6 01       	movw	r30, r12
    2090:	86 a1       	ldd	r24, Z+38	; 0x26
    2092:	97 a1       	ldd	r25, Z+39	; 0x27
    2094:	a0 a5       	ldd	r26, Z+40	; 0x28
    2096:	b1 a5       	ldd	r27, Z+41	; 0x29
    2098:	28 0f       	add	r18, r24
    209a:	39 1f       	adc	r19, r25
    209c:	4a 1f       	adc	r20, r26
    209e:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    20a0:	2e 87       	std	Y+14, r18	; 0x0e
    20a2:	3f 87       	std	Y+15, r19	; 0x0f
    20a4:	48 8b       	std	Y+16, r20	; 0x10
    20a6:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    20a8:	6c 82       	std	Y+4, r6	; 0x04
    20aa:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    20ac:	35 e0       	ldi	r19, 0x05	; 5
    20ae:	44 0c       	add	r4, r4
    20b0:	55 1c       	adc	r5, r5
    20b2:	3a 95       	dec	r19
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <dir_next+0x2ae>
    20b6:	8e e2       	ldi	r24, 0x2E	; 46
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	48 0e       	add	r4, r24
    20bc:	59 1e       	adc	r5, r25
    20be:	88 81       	ld	r24, Y
    20c0:	99 81       	ldd	r25, Y+1	; 0x01
    20c2:	84 0d       	add	r24, r4
    20c4:	95 1d       	adc	r25, r5
    20c6:	8a 8b       	std	Y+18, r24	; 0x12
    20c8:	9b 8b       	std	Y+19, r25	; 0x13
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <dir_next+0x2d8>

	return FR_OK;
    20ce:	84 e0       	ldi	r24, 0x04	; 4
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <dir_next+0x2d8>
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <dir_next+0x2d8>
    20d6:	81 e0       	ldi	r24, 0x01	; 1
}
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	bf 90       	pop	r11
    20ea:	af 90       	pop	r10
    20ec:	9f 90       	pop	r9
    20ee:	8f 90       	pop	r8
    20f0:	7f 90       	pop	r7
    20f2:	6f 90       	pop	r6
    20f4:	5f 90       	pop	r5
    20f6:	4f 90       	pop	r4
    20f8:	08 95       	ret

000020fa <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	ec 01       	movw	r28, r24
    2100:	94 e0       	ldi	r25, 0x04	; 4
    2102:	1a c0       	rjmp	.+52     	; 0x2138 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    2104:	88 81       	ld	r24, Y
    2106:	99 81       	ldd	r25, Y+1	; 0x01
    2108:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    210c:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    210e:	88 23       	and	r24, r24
    2110:	f1 f4       	brne	.+60     	; 0x214e <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2112:	ea 89       	ldd	r30, Y+18	; 0x12
    2114:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    2116:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2118:	88 23       	and	r24, r24
    211a:	09 f1       	breq	.+66     	; 0x215e <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    211c:	85 3e       	cpi	r24, 0xE5	; 229
    211e:	29 f0       	breq	.+10     	; 0x212a <dir_read+0x30>
    2120:	8e 32       	cpi	r24, 0x2E	; 46
    2122:	19 f0       	breq	.+6      	; 0x212a <dir_read+0x30>
    2124:	83 85       	ldd	r24, Z+11	; 0x0b
    2126:	83 ff       	sbrs	r24, 3
    2128:	16 c0       	rjmp	.+44     	; 0x2156 <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    212a:	ce 01       	movw	r24, r28
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <dir_next>
    2132:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2134:	88 23       	and	r24, r24
    2136:	59 f4       	brne	.+22     	; 0x214e <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2138:	4e 85       	ldd	r20, Y+14	; 0x0e
    213a:	5f 85       	ldd	r21, Y+15	; 0x0f
    213c:	68 89       	ldd	r22, Y+16	; 0x10
    213e:	79 89       	ldd	r23, Y+17	; 0x11
    2140:	41 15       	cp	r20, r1
    2142:	51 05       	cpc	r21, r1
    2144:	61 05       	cpc	r22, r1
    2146:	71 05       	cpc	r23, r1
    2148:	e9 f6       	brne	.-70     	; 0x2104 <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    214a:	99 23       	and	r25, r25
    214c:	21 f0       	breq	.+8      	; 0x2156 <dir_read+0x5c>
    214e:	1e 86       	std	Y+14, r1	; 0x0e
    2150:	1f 86       	std	Y+15, r1	; 0x0f
    2152:	18 8a       	std	Y+16, r1	; 0x10
    2154:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    2156:	89 2f       	mov	r24, r25
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    215e:	94 e0       	ldi	r25, 0x04	; 4
    2160:	f6 cf       	rjmp	.-20     	; 0x214e <dir_read+0x54>

00002162 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
    2170:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    2172:	88 23       	and	r24, r24
    2174:	e9 f5       	brne	.+122    	; 0x21f0 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2176:	4e 85       	ldd	r20, Y+14	; 0x0e
    2178:	5f 85       	ldd	r21, Y+15	; 0x0f
    217a:	68 89       	ldd	r22, Y+16	; 0x10
    217c:	79 89       	ldd	r23, Y+17	; 0x11
    217e:	88 81       	ld	r24, Y
    2180:	99 81       	ldd	r25, Y+1	; 0x01
    2182:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    2186:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    2188:	88 23       	and	r24, r24
    218a:	91 f5       	brne	.+100    	; 0x21f0 <dir_register+0x8e>
			c = *dj->dir;
    218c:	ea 89       	ldd	r30, Y+18	; 0x12
    218e:	fb 89       	ldd	r31, Y+19	; 0x13
    2190:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2192:	e5 3e       	cpi	r30, 0xE5	; 229
    2194:	89 f1       	breq	.+98     	; 0x21f8 <dir_register+0x96>
    2196:	ee 23       	and	r30, r30
    2198:	79 f1       	breq	.+94     	; 0x21f8 <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    219a:	ce 01       	movw	r24, r28
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <dir_next>
    21a2:	e6 cf       	rjmp	.-52     	; 0x2170 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    21a4:	6a 89       	ldd	r22, Y+18	; 0x12
    21a6:	7b 89       	ldd	r23, Y+19	; 0x13
    21a8:	fb 01       	movw	r30, r22
    21aa:	80 e2       	ldi	r24, 0x20	; 32
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    21b0:	11 92       	st	Z+, r1
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	2f ef       	ldi	r18, 0xFF	; 255
    21b6:	8f 3f       	cpi	r24, 0xFF	; 255
    21b8:	92 07       	cpc	r25, r18
    21ba:	d1 f7       	brne	.-12     	; 0x21b0 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    21bc:	8c 89       	ldd	r24, Y+20	; 0x14
    21be:	9d 89       	ldd	r25, Y+21	; 0x15
    21c0:	9c 01       	movw	r18, r24
    21c2:	d9 01       	movw	r26, r18
    21c4:	fb 01       	movw	r30, r22
    21c6:	2b e0       	ldi	r18, 0x0B	; 11
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    21cc:	8d 91       	ld	r24, X+
    21ce:	81 93       	st	Z+, r24
    21d0:	21 50       	subi	r18, 0x01	; 1
    21d2:	30 40       	sbci	r19, 0x00	; 0
    21d4:	8f ef       	ldi	r24, 0xFF	; 255
    21d6:	2f 3f       	cpi	r18, 0xFF	; 255
    21d8:	38 07       	cpc	r19, r24
    21da:	c1 f7       	brne	.-16     	; 0x21cc <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    21dc:	ec 89       	ldd	r30, Y+20	; 0x14
    21de:	fd 89       	ldd	r31, Y+21	; 0x15
    21e0:	83 85       	ldd	r24, Z+11	; 0x0b
    21e2:	88 71       	andi	r24, 0x18	; 24
    21e4:	fb 01       	movw	r30, r22
    21e6:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    21e8:	e8 81       	ld	r30, Y
    21ea:	f9 81       	ldd	r31, Y+1	; 0x01
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    21f0:	84 2f       	mov	r24, r20
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    21f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    21fa:	5f 85       	ldd	r21, Y+15	; 0x0f
    21fc:	68 89       	ldd	r22, Y+16	; 0x10
    21fe:	79 89       	ldd	r23, Y+17	; 0x11
    2200:	88 81       	ld	r24, Y
    2202:	99 81       	ldd	r25, Y+1	; 0x01
    2204:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    2208:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    220a:	88 23       	and	r24, r24
    220c:	59 f2       	breq	.-106    	; 0x21a4 <dir_register+0x42>
    220e:	f0 cf       	rjmp	.-32     	; 0x21f0 <dir_register+0x8e>

00002210 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    2216:	6c 81       	ldd	r22, Y+4	; 0x04
    2218:	7d 81       	ldd	r23, Y+5	; 0x05
    221a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
    221e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2220:	88 23       	and	r24, r24
    2222:	99 f4       	brne	.+38     	; 0x224a <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    2224:	4e 85       	ldd	r20, Y+14	; 0x0e
    2226:	5f 85       	ldd	r21, Y+15	; 0x0f
    2228:	68 89       	ldd	r22, Y+16	; 0x10
    222a:	79 89       	ldd	r23, Y+17	; 0x11
    222c:	88 81       	ld	r24, Y
    222e:	99 81       	ldd	r25, Y+1	; 0x01
    2230:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    2234:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    2236:	88 23       	and	r24, r24
    2238:	41 f4       	brne	.+16     	; 0x224a <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    223a:	ea 89       	ldd	r30, Y+18	; 0x12
    223c:	fb 89       	ldd	r31, Y+19	; 0x13
    223e:	85 ee       	ldi	r24, 0xE5	; 229
    2240:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    2242:	e8 81       	ld	r30, Y
    2244:	f9 81       	ldd	r31, Y+1	; 0x01
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    224a:	89 2f       	mov	r24, r25
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	08 95       	ret

00002252 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	fc 01       	movw	r30, r24
    2260:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    2262:	eb 01       	movw	r28, r22
    2264:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    2266:	86 85       	ldd	r24, Z+14	; 0x0e
    2268:	97 85       	ldd	r25, Z+15	; 0x0f
    226a:	a0 89       	ldd	r26, Z+16	; 0x10
    226c:	b1 89       	ldd	r27, Z+17	; 0x11
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	a1 05       	cpc	r26, r1
    2272:	b1 05       	cpc	r27, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <get_fileinfo+0x26>
    2276:	71 c0       	rjmp	.+226    	; 0x235a <get_fileinfo+0x108>
		dir = dj->dir;
    2278:	62 89       	ldd	r22, Z+18	; 0x12
    227a:	73 89       	ldd	r23, Z+19	; 0x13
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2280:	fb 01       	movw	r30, r22
    2282:	e8 0f       	add	r30, r24
    2284:	f9 1f       	adc	r31, r25
    2286:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    2288:	e0 32       	cpi	r30, 0x20	; 32
    228a:	41 f0       	breq	.+16     	; 0x229c <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    228c:	e5 30       	cpi	r30, 0x05	; 5
    228e:	09 f4       	brne	.+2      	; 0x2292 <get_fileinfo+0x40>
    2290:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    2292:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	88 30       	cpi	r24, 0x08	; 8
    2298:	91 05       	cpc	r25, r1
    229a:	91 f7       	brne	.-28     	; 0x2280 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    229c:	db 01       	movw	r26, r22
    229e:	18 96       	adiw	r26, 0x08	; 8
    22a0:	8c 91       	ld	r24, X
    22a2:	80 32       	cpi	r24, 0x20	; 32
    22a4:	11 f4       	brne	.+4      	; 0x22aa <get_fileinfo+0x58>
    22a6:	8e 01       	movw	r16, r28
    22a8:	12 c0       	rjmp	.+36     	; 0x22ce <get_fileinfo+0x7c>
			*p++ = '.';
    22aa:	8e e2       	ldi	r24, 0x2E	; 46
    22ac:	fe 01       	movw	r30, r28
    22ae:	81 93       	st	Z+, r24
    22b0:	8f 01       	movw	r16, r30
    22b2:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    22b4:	9e 01       	movw	r18, r28
    22b6:	2c 5f       	subi	r18, 0xFC	; 252
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    22ba:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    22bc:	80 32       	cpi	r24, 0x20	; 32
    22be:	39 f0       	breq	.+14     	; 0x22ce <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    22c0:	d8 01       	movw	r26, r16
    22c2:	8d 93       	st	X+, r24
    22c4:	8d 01       	movw	r16, r26
    22c6:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    22c8:	a2 17       	cp	r26, r18
    22ca:	b3 07       	cpc	r27, r19
    22cc:	b1 f7       	brne	.-20     	; 0x22ba <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    22ce:	fb 01       	movw	r30, r22
    22d0:	83 85       	ldd	r24, Z+11	; 0x0b
    22d2:	d7 01       	movw	r26, r14
    22d4:	18 96       	adiw	r26, 0x08	; 8
    22d6:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    22d8:	27 8d       	ldd	r18, Z+31	; 0x1f
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	52 2f       	mov	r21, r18
    22e2:	44 27       	eor	r20, r20
    22e4:	33 27       	eor	r19, r19
    22e6:	22 27       	eor	r18, r18
    22e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a0 e0       	ldi	r26, 0x00	; 0
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	dc 01       	movw	r26, r24
    22f2:	99 27       	eor	r25, r25
    22f4:	88 27       	eor	r24, r24
    22f6:	28 2b       	or	r18, r24
    22f8:	39 2b       	or	r19, r25
    22fa:	4a 2b       	or	r20, r26
    22fc:	5b 2b       	or	r21, r27
    22fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e0       	ldi	r26, 0x00	; 0
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	28 2b       	or	r18, r24
    2308:	39 2b       	or	r19, r25
    230a:	4a 2b       	or	r20, r26
    230c:	5b 2b       	or	r21, r27
    230e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	a0 e0       	ldi	r26, 0x00	; 0
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	28 2b       	or	r18, r24
    2318:	39 2b       	or	r19, r25
    231a:	4a 2b       	or	r20, r26
    231c:	5b 2b       	or	r21, r27
    231e:	f7 01       	movw	r30, r14
    2320:	20 83       	st	Z, r18
    2322:	31 83       	std	Z+1, r19	; 0x01
    2324:	42 83       	std	Z+2, r20	; 0x02
    2326:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2328:	db 01       	movw	r26, r22
    232a:	59 96       	adiw	r26, 0x19	; 25
    232c:	9c 91       	ld	r25, X
    232e:	59 97       	sbiw	r26, 0x19	; 25
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	58 96       	adiw	r26, 0x18	; 24
    2334:	2c 91       	ld	r18, X
    2336:	58 97       	sbiw	r26, 0x18	; 24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	82 2b       	or	r24, r18
    233c:	93 2b       	or	r25, r19
    233e:	84 83       	std	Z+4, r24	; 0x04
    2340:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2342:	57 96       	adiw	r26, 0x17	; 23
    2344:	9c 91       	ld	r25, X
    2346:	57 97       	sbiw	r26, 0x17	; 23
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	56 96       	adiw	r26, 0x16	; 22
    234c:	2c 91       	ld	r18, X
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	82 2b       	or	r24, r18
    2352:	93 2b       	or	r25, r19
    2354:	86 83       	std	Z+6, r24	; 0x06
    2356:	97 83       	std	Z+7, r25	; 0x07
    2358:	e8 01       	movw	r28, r16
	}
	*p = 0;
    235a:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	ff 90       	pop	r15
    2366:	ef 90       	pop	r14
    2368:	08 95       	ret

0000236a <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    236a:	5f 92       	push	r5
    236c:	6f 92       	push	r6
    236e:	7f 92       	push	r7
    2370:	8f 92       	push	r8
    2372:	9f 92       	push	r9
    2374:	af 92       	push	r10
    2376:	bf 92       	push	r11
    2378:	cf 92       	push	r12
    237a:	df 92       	push	r13
    237c:	ef 92       	push	r14
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	ec 01       	movw	r28, r24
    238a:	7b 01       	movw	r14, r22
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    238e:	08 94       	sec
    2390:	e1 1c       	adc	r14, r1
    2392:	f1 1c       	adc	r15, r1
    2394:	f7 01       	movw	r30, r14
    2396:	80 81       	ld	r24, Z
    2398:	80 32       	cpi	r24, 0x20	; 32
    239a:	c9 f3       	breq	.-14     	; 0x238e <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    239c:	8f 32       	cpi	r24, 0x2F	; 47
    239e:	11 f0       	breq	.+4      	; 0x23a4 <follow_path+0x3a>
    23a0:	8c 35       	cpi	r24, 0x5C	; 92
    23a2:	19 f4       	brne	.+6      	; 0x23aa <follow_path+0x40>
		path++;
    23a4:	08 94       	sec
    23a6:	e1 1c       	adc	r14, r1
    23a8:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    23aa:	1e 82       	std	Y+6, r1	; 0x06
    23ac:	1f 82       	std	Y+7, r1	; 0x07
    23ae:	18 86       	std	Y+8, r1	; 0x08
    23b0:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    23b2:	f7 01       	movw	r30, r14
    23b4:	80 81       	ld	r24, Z
    23b6:	80 32       	cpi	r24, 0x20	; 32
    23b8:	40 f4       	brcc	.+16     	; 0x23ca <follow_path+0x60>
		res = dir_seek(dj, 0);
    23ba:	ce 01       	movw	r24, r28
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
		dj->dir = NULL;
    23c4:	1a 8a       	std	Y+18, r1	; 0x12
    23c6:	1b 8a       	std	Y+19, r1	; 0x13
    23c8:	13 c1       	rjmp	.+550    	; 0x25f0 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23ca:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    23cc:	45 e0       	ldi	r20, 0x05	; 5
    23ce:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    23d0:	ac 89       	ldd	r26, Y+20	; 0x14
    23d2:	bd 89       	ldd	r27, Y+21	; 0x15
    23d4:	fd 01       	movw	r30, r26
    23d6:	8b e0       	ldi	r24, 0x0B	; 11
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	01 c0       	rjmp	.+2      	; 0x23de <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23dc:	01 93       	st	Z+, r16
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	2f ef       	ldi	r18, 0xFF	; 255
    23e2:	8f 3f       	cpi	r24, 0xFF	; 255
    23e4:	92 07       	cpc	r25, r18
    23e6:	d1 f7       	brne	.-12     	; 0x23dc <follow_path+0x72>
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	cc 24       	eor	r12, r12
    23ee:	dd 24       	eor	r13, r13
    23f0:	38 e0       	ldi	r19, 0x08	; 8
    23f2:	a3 2e       	mov	r10, r19
    23f4:	b1 2c       	mov	r11, r1
    23f6:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    23f8:	f7 01       	movw	r30, r14
    23fa:	ec 0d       	add	r30, r12
    23fc:	fd 1d       	adc	r31, r13
    23fe:	20 81       	ld	r18, Z
    2400:	08 94       	sec
    2402:	c1 1c       	adc	r12, r1
    2404:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2406:	21 32       	cpi	r18, 0x21	; 33
    2408:	08 f4       	brcc	.+2      	; 0x240c <follow_path+0xa2>
    240a:	66 c0       	rjmp	.+204    	; 0x24d8 <follow_path+0x16e>
    240c:	2f 32       	cpi	r18, 0x2F	; 47
    240e:	09 f4       	brne	.+2      	; 0x2412 <follow_path+0xa8>
    2410:	ff c0       	rjmp	.+510    	; 0x2610 <follow_path+0x2a6>
    2412:	2c 35       	cpi	r18, 0x5C	; 92
    2414:	09 f4       	brne	.+2      	; 0x2418 <follow_path+0xae>
    2416:	fc c0       	rjmp	.+504    	; 0x2610 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    2418:	2e 32       	cpi	r18, 0x2E	; 46
    241a:	19 f0       	breq	.+6      	; 0x2422 <follow_path+0xb8>
    241c:	4a 15       	cp	r20, r10
    241e:	5b 05       	cpc	r21, r11
    2420:	84 f0       	brlt	.+32     	; 0x2442 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2422:	88 e0       	ldi	r24, 0x08	; 8
    2424:	a8 16       	cp	r10, r24
    2426:	b1 04       	cpc	r11, r1
    2428:	09 f0       	breq	.+2      	; 0x242c <follow_path+0xc2>
    242a:	dd c0       	rjmp	.+442    	; 0x25e6 <follow_path+0x27c>
    242c:	2e 32       	cpi	r18, 0x2E	; 46
    242e:	09 f0       	breq	.+2      	; 0x2432 <follow_path+0xc8>
    2430:	da c0       	rjmp	.+436    	; 0x25e6 <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    2432:	11 0f       	add	r17, r17
    2434:	11 0f       	add	r17, r17
    2436:	48 e0       	ldi	r20, 0x08	; 8
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	2b e0       	ldi	r18, 0x0B	; 11
    243c:	a2 2e       	mov	r10, r18
    243e:	b1 2c       	mov	r11, r1
    2440:	db cf       	rjmp	.-74     	; 0x23f8 <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    2442:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    2444:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    2446:	82 2f       	mov	r24, r18
    2448:	81 58       	subi	r24, 0x81	; 129
    244a:	8f 31       	cpi	r24, 0x1F	; 31
    244c:	18 f0       	brcs	.+6      	; 0x2454 <follow_path+0xea>
    244e:	8f 55       	subi	r24, 0x5F	; 95
    2450:	8d 31       	cpi	r24, 0x1D	; 29
    2452:	08 f5       	brcc	.+66     	; 0x2496 <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    2454:	f7 01       	movw	r30, r14
    2456:	ec 0d       	add	r30, r12
    2458:	fd 1d       	adc	r31, r13
    245a:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    245c:	83 2f       	mov	r24, r19
    245e:	80 54       	subi	r24, 0x40	; 64
    2460:	8f 33       	cpi	r24, 0x3F	; 63
    2462:	20 f0       	brcs	.+8      	; 0x246c <follow_path+0x102>
    2464:	80 54       	subi	r24, 0x40	; 64
    2466:	8d 37       	cpi	r24, 0x7D	; 125
    2468:	08 f0       	brcs	.+2      	; 0x246c <follow_path+0x102>
    246a:	bd c0       	rjmp	.+378    	; 0x25e6 <follow_path+0x27c>
    246c:	c5 01       	movw	r24, r10
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	48 17       	cp	r20, r24
    2472:	59 07       	cpc	r21, r25
    2474:	0c f0       	brlt	.+2      	; 0x2478 <follow_path+0x10e>
    2476:	b7 c0       	rjmp	.+366    	; 0x25e6 <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    2478:	08 94       	sec
    247a:	c1 1c       	adc	r12, r1
    247c:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    247e:	fd 01       	movw	r30, r26
    2480:	e4 0f       	add	r30, r20
    2482:	f5 1f       	adc	r31, r21
    2484:	20 83       	st	Z, r18
    2486:	ca 01       	movw	r24, r20
    2488:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    248a:	fd 01       	movw	r30, r26
    248c:	e8 0f       	add	r30, r24
    248e:	f9 1f       	adc	r31, r25
    2490:	30 83       	st	Z, r19
    2492:	ac 01       	movw	r20, r24
    2494:	1e c0       	rjmp	.+60     	; 0x24d2 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    2496:	62 2f       	mov	r22, r18
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	e0 e0       	ldi	r30, 0x00	; 0
    249c:	f0 e2       	ldi	r31, 0x20	; 32
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    24a0:	31 96       	adiw	r30, 0x01	; 1
    24a2:	80 81       	ld	r24, Z
    24a4:	88 23       	and	r24, r24
    24a6:	29 f0       	breq	.+10     	; 0x24b2 <follow_path+0x148>
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	86 17       	cp	r24, r22
    24ac:	97 07       	cpc	r25, r23
    24ae:	c1 f7       	brne	.-16     	; 0x24a0 <follow_path+0x136>
    24b0:	9a c0       	rjmp	.+308    	; 0x25e6 <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    24b2:	82 2f       	mov	r24, r18
    24b4:	81 54       	subi	r24, 0x41	; 65
    24b6:	8a 31       	cpi	r24, 0x1A	; 26
    24b8:	10 f4       	brcc	.+4      	; 0x24be <follow_path+0x154>
				b |= 2;
    24ba:	12 60       	ori	r17, 0x02	; 2
    24bc:	06 c0       	rjmp	.+12     	; 0x24ca <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    24be:	82 2f       	mov	r24, r18
    24c0:	81 56       	subi	r24, 0x61	; 97
    24c2:	8a 31       	cpi	r24, 0x1A	; 26
    24c4:	10 f4       	brcc	.+4      	; 0x24ca <follow_path+0x160>
					b |= 1; c -= 0x20;
    24c6:	11 60       	ori	r17, 0x01	; 1
    24c8:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    24ca:	fd 01       	movw	r30, r26
    24cc:	e4 0f       	add	r30, r20
    24ce:	f5 1f       	adc	r31, r21
    24d0:	20 83       	st	Z, r18
    24d2:	4f 5f       	subi	r20, 0xFF	; 255
    24d4:	5f 4f       	sbci	r21, 0xFF	; 255
    24d6:	90 cf       	rjmp	.-224    	; 0x23f8 <follow_path+0x8e>
    24d8:	91 2f       	mov	r25, r17
    24da:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    24dc:	45 2b       	or	r20, r21
    24de:	09 f4       	brne	.+2      	; 0x24e2 <follow_path+0x178>
    24e0:	82 c0       	rjmp	.+260    	; 0x25e6 <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    24e2:	8c 91       	ld	r24, X
    24e4:	85 3e       	cpi	r24, 0xE5	; 229
    24e6:	09 f4       	brne	.+2      	; 0x24ea <follow_path+0x180>
    24e8:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    24ea:	e8 e0       	ldi	r30, 0x08	; 8
    24ec:	ae 16       	cp	r10, r30
    24ee:	b1 04       	cpc	r11, r1
    24f0:	19 f4       	brne	.+6      	; 0x24f8 <follow_path+0x18e>
    24f2:	91 2f       	mov	r25, r17
    24f4:	99 0f       	add	r25, r25
    24f6:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    24f8:	29 2f       	mov	r18, r25
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	c9 01       	movw	r24, r18
    24fe:	83 70       	andi	r24, 0x03	; 3
    2500:	90 70       	andi	r25, 0x00	; 0
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	09 f4       	brne	.+2      	; 0x2508 <follow_path+0x19e>
    2506:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    2508:	2c 70       	andi	r18, 0x0C	; 12
    250a:	30 70       	andi	r19, 0x00	; 0
    250c:	24 30       	cpi	r18, 0x04	; 4
    250e:	31 05       	cpc	r19, r1
    2510:	09 f4       	brne	.+2      	; 0x2514 <follow_path+0x1aa>
    2512:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2514:	1b 96       	adiw	r26, 0x0b	; 11
    2516:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    2518:	ce 01       	movw	r24, r28
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
    2522:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2524:	88 23       	and	r24, r24
    2526:	71 f5       	brne	.+92     	; 0x2584 <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2528:	4e 85       	ldd	r20, Y+14	; 0x0e
    252a:	5f 85       	ldd	r21, Y+15	; 0x0f
    252c:	68 89       	ldd	r22, Y+16	; 0x10
    252e:	79 89       	ldd	r23, Y+17	; 0x11
    2530:	88 81       	ld	r24, Y
    2532:	99 81       	ldd	r25, Y+1	; 0x01
    2534:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    2538:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    253a:	88 23       	and	r24, r24
    253c:	19 f5       	brne	.+70     	; 0x2584 <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    253e:	ea 89       	ldd	r30, Y+18	; 0x12
    2540:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2542:	80 81       	ld	r24, Z
    2544:	88 23       	and	r24, r24
    2546:	11 f4       	brne	.+4      	; 0x254c <follow_path+0x1e2>
    2548:	44 e0       	ldi	r20, 0x04	; 4
    254a:	1c c0       	rjmp	.+56     	; 0x2584 <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    254c:	83 85       	ldd	r24, Z+11	; 0x0b
    254e:	83 fd       	sbrc	r24, 3
    2550:	14 c0       	rjmp	.+40     	; 0x257a <follow_path+0x210>
    2552:	df 01       	movw	r26, r30
    2554:	8c 89       	ldd	r24, Y+20	; 0x14
    2556:	9d 89       	ldd	r25, Y+21	; 0x15
    2558:	9c 01       	movw	r18, r24
    255a:	f9 01       	movw	r30, r18
    255c:	2b e0       	ldi	r18, 0x0B	; 11
    255e:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2560:	21 50       	subi	r18, 0x01	; 1
    2562:	30 40       	sbci	r19, 0x00	; 0
    2564:	8f ef       	ldi	r24, 0xFF	; 255
    2566:	2f 3f       	cpi	r18, 0xFF	; 255
    2568:	38 07       	cpc	r19, r24
    256a:	61 f0       	breq	.+24     	; 0x2584 <follow_path+0x21a>
    256c:	9c 91       	ld	r25, X
    256e:	80 81       	ld	r24, Z
    2570:	98 17       	cp	r25, r24
    2572:	19 f4       	brne	.+6      	; 0x257a <follow_path+0x210>
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	31 96       	adiw	r30, 0x01	; 1
    2578:	f3 cf       	rjmp	.-26     	; 0x2560 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    257a:	ce 01       	movw	r24, r28
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <dir_next>
    2582:	cf cf       	rjmp	.-98     	; 0x2522 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    2584:	ec 89       	ldd	r30, Y+20	; 0x14
    2586:	fd 89       	ldd	r31, Y+21	; 0x15
    2588:	93 85       	ldd	r25, Z+11	; 0x0b
    258a:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    258c:	44 23       	and	r20, r20
    258e:	31 f0       	breq	.+12     	; 0x259c <follow_path+0x232>
    2590:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    2592:	44 30       	cpi	r20, 0x04	; 4
    2594:	51 f5       	brne	.+84     	; 0x25ea <follow_path+0x280>
    2596:	99 23       	and	r25, r25
    2598:	51 f1       	breq	.+84     	; 0x25ee <follow_path+0x284>
    259a:	2a c0       	rjmp	.+84     	; 0x25f0 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    259c:	99 23       	and	r25, r25
    259e:	29 f5       	brne	.+74     	; 0x25ea <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    25a0:	ea 89       	ldd	r30, Y+18	; 0x12
    25a2:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    25a4:	83 85       	ldd	r24, Z+11	; 0x0b
    25a6:	84 ff       	sbrs	r24, 4
    25a8:	22 c0       	rjmp	.+68     	; 0x25ee <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    25aa:	ec 0c       	add	r14, r12
    25ac:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    25ae:	75 88       	ldd	r7, Z+21	; 0x15
    25b0:	66 24       	eor	r6, r6
    25b2:	24 89       	ldd	r18, Z+20	; 0x14
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	26 29       	or	r18, r6
    25b8:	37 29       	or	r19, r7
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	a9 01       	movw	r20, r18
    25c0:	33 27       	eor	r19, r19
    25c2:	22 27       	eor	r18, r18
    25c4:	93 8c       	ldd	r9, Z+27	; 0x1b
    25c6:	88 24       	eor	r8, r8
    25c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	88 29       	or	r24, r8
    25ce:	99 29       	or	r25, r9
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	28 2b       	or	r18, r24
    25d6:	39 2b       	or	r19, r25
    25d8:	4a 2b       	or	r20, r26
    25da:	5b 2b       	or	r21, r27
    25dc:	2e 83       	std	Y+6, r18	; 0x06
    25de:	3f 83       	std	Y+7, r19	; 0x07
    25e0:	48 87       	std	Y+8, r20	; 0x08
    25e2:	59 87       	std	Y+9, r21	; 0x09
    25e4:	f5 ce       	rjmp	.-534    	; 0x23d0 <follow_path+0x66>
		}
    25e6:	86 e0       	ldi	r24, 0x06	; 6
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <follow_path+0x286>
    25ea:	84 2f       	mov	r24, r20
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <follow_path+0x286>
    25ee:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	df 90       	pop	r13
    25fe:	cf 90       	pop	r12
    2600:	bf 90       	pop	r11
    2602:	af 90       	pop	r10
    2604:	9f 90       	pop	r9
    2606:	8f 90       	pop	r8
    2608:	7f 90       	pop	r7
    260a:	6f 90       	pop	r6
    260c:	5f 90       	pop	r5
    260e:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2610:	91 2f       	mov	r25, r17
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	63 cf       	rjmp	.-314    	; 0x24dc <follow_path+0x172>

00002616 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2616:	0f 93       	push	r16
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	ec 01       	movw	r28, r24
    261e:	9a 01       	movw	r18, r20
    2620:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2622:	bc 01       	movw	r22, r24
    2624:	62 5d       	subi	r22, 0xD2	; 210
    2626:	7f 4f       	sbci	r23, 0xFF	; 255
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	01 e0       	ldi	r16, 0x01	; 1
    262c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    2630:	88 23       	and	r24, r24
    2632:	11 f0       	breq	.+4      	; 0x2638 <check_fs+0x22>
    2634:	63 e0       	ldi	r22, 0x03	; 3
    2636:	6d c0       	rjmp	.+218    	; 0x2712 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2638:	c3 5d       	subi	r28, 0xD3	; 211
    263a:	dd 4f       	sbci	r29, 0xFD	; 253
    263c:	98 81       	ld	r25, Y
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	2a 91       	ld	r18, -Y
    2642:	cc 52       	subi	r28, 0x2C	; 44
    2644:	d2 40       	sbci	r29, 0x02	; 2
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	82 2b       	or	r24, r18
    264a:	93 2b       	or	r25, r19
    264c:	85 55       	subi	r24, 0x55	; 85
    264e:	9a 4a       	sbci	r25, 0xAA	; 170
    2650:	11 f0       	breq	.+4      	; 0x2656 <check_fs+0x40>
    2652:	62 e0       	ldi	r22, 0x02	; 2
    2654:	5e c0       	rjmp	.+188    	; 0x2712 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2656:	c9 59       	subi	r28, 0x99	; 153
    2658:	df 4f       	sbci	r29, 0xFF	; 255
    265a:	28 81       	ld	r18, Y
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	52 2f       	mov	r21, r18
    2664:	44 27       	eor	r20, r20
    2666:	33 27       	eor	r19, r19
    2668:	22 27       	eor	r18, r18
    266a:	8a 91       	ld	r24, -Y
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	dc 01       	movw	r26, r24
    2674:	99 27       	eor	r25, r25
    2676:	88 27       	eor	r24, r24
    2678:	28 2b       	or	r18, r24
    267a:	39 2b       	or	r19, r25
    267c:	4a 2b       	or	r20, r26
    267e:	5b 2b       	or	r21, r27
    2680:	22 97       	sbiw	r28, 0x02	; 2
    2682:	89 91       	ld	r24, Y+
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a0 e0       	ldi	r26, 0x00	; 0
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	28 2b       	or	r18, r24
    268c:	39 2b       	or	r19, r25
    268e:	4a 2b       	or	r20, r26
    2690:	5b 2b       	or	r21, r27
    2692:	98 81       	ld	r25, Y
    2694:	c5 56       	subi	r28, 0x65	; 101
    2696:	d0 40       	sbci	r29, 0x00	; 0
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	a0 e0       	ldi	r26, 0x00	; 0
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	28 2b       	or	r18, r24
    26a0:	39 2b       	or	r19, r25
    26a2:	4a 2b       	or	r20, r26
    26a4:	5b 2b       	or	r21, r27
    26a6:	50 70       	andi	r21, 0x00	; 0
    26a8:	26 54       	subi	r18, 0x46	; 70
    26aa:	31 44       	sbci	r19, 0x41	; 65
    26ac:	44 45       	sbci	r20, 0x54	; 84
    26ae:	50 40       	sbci	r21, 0x00	; 0
    26b0:	11 f4       	brne	.+4      	; 0x26b6 <check_fs+0xa0>
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	2e c0       	rjmp	.+92     	; 0x2712 <check_fs+0xfc>
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	cd 57       	subi	r28, 0x7D	; 125
    26ba:	df 4f       	sbci	r29, 0xFF	; 255
    26bc:	28 81       	ld	r18, Y
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	52 2f       	mov	r21, r18
    26c6:	44 27       	eor	r20, r20
    26c8:	33 27       	eor	r19, r19
    26ca:	22 27       	eor	r18, r18
    26cc:	8a 91       	ld	r24, -Y
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a0 e0       	ldi	r26, 0x00	; 0
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	dc 01       	movw	r26, r24
    26d6:	99 27       	eor	r25, r25
    26d8:	88 27       	eor	r24, r24
    26da:	28 2b       	or	r18, r24
    26dc:	39 2b       	or	r19, r25
    26de:	4a 2b       	or	r20, r26
    26e0:	5b 2b       	or	r21, r27
    26e2:	22 97       	sbiw	r28, 0x02	; 2
    26e4:	89 91       	ld	r24, Y+
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	28 2b       	or	r18, r24
    26ee:	39 2b       	or	r19, r25
    26f0:	4a 2b       	or	r20, r26
    26f2:	5b 2b       	or	r21, r27
    26f4:	98 81       	ld	r25, Y
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	28 2b       	or	r18, r24
    26fe:	39 2b       	or	r19, r25
    2700:	4a 2b       	or	r20, r26
    2702:	5b 2b       	or	r21, r27
    2704:	50 70       	andi	r21, 0x00	; 0
    2706:	26 54       	subi	r18, 0x46	; 70
    2708:	31 44       	sbci	r19, 0x41	; 65
    270a:	44 45       	sbci	r20, 0x54	; 84
    270c:	50 40       	sbci	r21, 0x00	; 0
    270e:	09 f0       	breq	.+2      	; 0x2712 <check_fs+0xfc>
    2710:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2712:	86 2f       	mov	r24, r22
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	0f 91       	pop	r16
    271a:	08 95       	ret

0000271c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    271c:	6f 92       	push	r6
    271e:	7f 92       	push	r7
    2720:	8f 92       	push	r8
    2722:	9f 92       	push	r9
    2724:	af 92       	push	r10
    2726:	bf 92       	push	r11
    2728:	cf 92       	push	r12
    272a:	df 92       	push	r13
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	fc 01       	movw	r30, r24
    273a:	9b 01       	movw	r18, r22
    273c:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    273e:	a0 81       	ld	r26, Z
    2740:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2742:	8c 91       	ld	r24, X
    2744:	08 2f       	mov	r16, r24
    2746:	10 e0       	ldi	r17, 0x00	; 0
    2748:	00 53       	subi	r16, 0x30	; 48
    274a:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    274c:	0a 30       	cpi	r16, 0x0A	; 10
    274e:	11 05       	cpc	r17, r1
    2750:	68 f4       	brcc	.+26     	; 0x276c <chk_mounted+0x50>
    2752:	11 96       	adiw	r26, 0x01	; 1
    2754:	8c 91       	ld	r24, X
    2756:	11 97       	sbiw	r26, 0x01	; 1
    2758:	8a 33       	cpi	r24, 0x3A	; 58
    275a:	41 f4       	brne	.+16     	; 0x276c <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    275c:	12 96       	adiw	r26, 0x02	; 2
    275e:	a0 83       	st	Z, r26
    2760:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2762:	02 30       	cpi	r16, 0x02	; 2
    2764:	11 05       	cpc	r17, r1
    2766:	20 f0       	brcs	.+8      	; 0x2770 <chk_mounted+0x54>
    2768:	8b e0       	ldi	r24, 0x0B	; 11
    276a:	91 c2       	rjmp	.+1314   	; 0x2c8e <chk_mounted+0x572>
    276c:	00 e0       	ldi	r16, 0x00	; 0
    276e:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2770:	f8 01       	movw	r30, r16
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	ee 54       	subi	r30, 0x4E	; 78
    2778:	fb 4c       	sbci	r31, 0xCB	; 203
    277a:	c0 81       	ld	r28, Z
    277c:	d1 81       	ldd	r29, Z+1	; 0x01
    277e:	f9 01       	movw	r30, r18
    2780:	c0 83       	st	Z, r28
    2782:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2784:	20 97       	sbiw	r28, 0x00	; 0
    2786:	11 f4       	brne	.+4      	; 0x278c <chk_mounted+0x70>
    2788:	8c e0       	ldi	r24, 0x0C	; 12
    278a:	81 c2       	rjmp	.+1282   	; 0x2c8e <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    278c:	88 81       	ld	r24, Y
    278e:	88 23       	and	r24, r24
    2790:	79 f0       	breq	.+30     	; 0x27b0 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	88 23       	and	r24, r24
    2796:	11 f0       	breq	.+4      	; 0x279c <chk_mounted+0x80>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <chk_mounted+0x84>
	return Stat;
    279c:	80 91 dc 33 	lds	r24, 0x33DC
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    27a0:	80 fd       	sbrc	r24, 0
    27a2:	06 c0       	rjmp	.+12     	; 0x27b0 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    27a4:	ff 20       	and	r15, r15
    27a6:	09 f4       	brne	.+2      	; 0x27aa <chk_mounted+0x8e>
    27a8:	6f c2       	rjmp	.+1246   	; 0x2c88 <chk_mounted+0x56c>
    27aa:	82 fd       	sbrc	r24, 2
    27ac:	6b c2       	rjmp	.+1238   	; 0x2c84 <chk_mounted+0x568>
    27ae:	6c c2       	rjmp	.+1240   	; 0x2c88 <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    27b0:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    27b2:	f8 01       	movw	r30, r16
    27b4:	ee 0f       	add	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	e5 5e       	subi	r30, 0xE5	; 229
    27ba:	f2 4d       	sbci	r31, 0xD2	; 210
    27bc:	80 81       	ld	r24, Z
    27be:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    27c0:	0e 94 ca 05 	call	0xb94	; 0xb94 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    27c4:	80 ff       	sbrs	r24, 0
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <chk_mounted+0xb0>
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	61 c2       	rjmp	.+1218   	; 0x2c8e <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    27cc:	ff 20       	and	r15, r15
    27ce:	11 f0       	breq	.+4      	; 0x27d4 <chk_mounted+0xb8>
    27d0:	82 fd       	sbrc	r24, 2
    27d2:	58 c2       	rjmp	.+1200   	; 0x2c84 <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    27d4:	ce 01       	movw	r24, r28
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	0e 94 0b 13 	call	0x2616	; 0x2616 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	21 f0       	breq	.+8      	; 0x27ee <chk_mounted+0xd2>
    27e6:	aa 24       	eor	r10, r10
    27e8:	bb 24       	eor	r11, r11
    27ea:	65 01       	movw	r12, r10
    27ec:	3d c0       	rjmp	.+122    	; 0x2868 <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    27ee:	00 0f       	add	r16, r16
    27f0:	11 1f       	adc	r17, r17
    27f2:	05 5e       	subi	r16, 0xE5	; 229
    27f4:	12 4d       	sbci	r17, 0xD2	; 210
    27f6:	f8 01       	movw	r30, r16
    27f8:	81 81       	ldd	r24, Z+1	; 0x01
    27fa:	e8 2f       	mov	r30, r24
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	a4 e0       	ldi	r26, 0x04	; 4
    2800:	ee 0f       	add	r30, r30
    2802:	ff 1f       	adc	r31, r31
    2804:	aa 95       	dec	r26
    2806:	e1 f7       	brne	.-8      	; 0x2800 <chk_mounted+0xe4>
    2808:	e4 51       	subi	r30, 0x14	; 20
    280a:	fe 4f       	sbci	r31, 0xFE	; 254
    280c:	ec 0f       	add	r30, r28
    280e:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2810:	84 81       	ldd	r24, Z+4	; 0x04
    2812:	88 23       	and	r24, r24
    2814:	09 f4       	brne	.+2      	; 0x2818 <chk_mounted+0xfc>
    2816:	3a c2       	rjmp	.+1140   	; 0x2c8c <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2818:	83 85       	ldd	r24, Z+11	; 0x0b
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	a0 e0       	ldi	r26, 0x00	; 0
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	d8 2e       	mov	r13, r24
    2822:	cc 24       	eor	r12, r12
    2824:	bb 24       	eor	r11, r11
    2826:	aa 24       	eor	r10, r10
    2828:	82 85       	ldd	r24, Z+10	; 0x0a
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e0       	ldi	r26, 0x00	; 0
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	dc 01       	movw	r26, r24
    2832:	99 27       	eor	r25, r25
    2834:	88 27       	eor	r24, r24
    2836:	a8 2a       	or	r10, r24
    2838:	b9 2a       	or	r11, r25
    283a:	ca 2a       	or	r12, r26
    283c:	db 2a       	or	r13, r27
    283e:	80 85       	ldd	r24, Z+8	; 0x08
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	a8 2a       	or	r10, r24
    2848:	b9 2a       	or	r11, r25
    284a:	ca 2a       	or	r12, r26
    284c:	db 2a       	or	r13, r27
    284e:	91 85       	ldd	r25, Z+9	; 0x09
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	a0 e0       	ldi	r26, 0x00	; 0
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	a8 2a       	or	r10, r24
    2858:	b9 2a       	or	r11, r25
    285a:	ca 2a       	or	r12, r26
    285c:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    285e:	ce 01       	movw	r24, r28
    2860:	b6 01       	movw	r22, r12
    2862:	a5 01       	movw	r20, r10
    2864:	0e 94 0b 13 	call	0x2616	; 0x2616 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	11 f4       	brne	.+4      	; 0x2870 <chk_mounted+0x154>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0f c2       	rjmp	.+1054   	; 0x2c8e <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2870:	88 23       	and	r24, r24
    2872:	09 f0       	breq	.+2      	; 0x2876 <chk_mounted+0x15a>
    2874:	0b c2       	rjmp	.+1046   	; 0x2c8c <chk_mounted+0x570>
    2876:	9a ad       	ldd	r25, Y+58	; 0x3a
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	29 ad       	ldd	r18, Y+57	; 0x39
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	82 2b       	or	r24, r18
    2880:	93 2b       	or	r25, r19
    2882:	80 50       	subi	r24, 0x00	; 0
    2884:	92 40       	sbci	r25, 0x02	; 2
    2886:	09 f0       	breq	.+2      	; 0x288a <chk_mounted+0x16e>
    2888:	01 c2       	rjmp	.+1026   	; 0x2c8c <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    288a:	cb 5b       	subi	r28, 0xBB	; 187
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	98 81       	ld	r25, Y
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	2a 91       	ld	r18, -Y
    2894:	c4 54       	subi	r28, 0x44	; 68
    2896:	d0 40       	sbci	r29, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	82 2b       	or	r24, r18
    289c:	93 2b       	or	r25, r19
    289e:	7c 01       	movw	r14, r24
    28a0:	00 e0       	ldi	r16, 0x00	; 0
    28a2:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    28a4:	e1 14       	cp	r14, r1
    28a6:	f1 04       	cpc	r15, r1
    28a8:	01 05       	cpc	r16, r1
    28aa:	11 05       	cpc	r17, r1
    28ac:	41 f5       	brne	.+80     	; 0x28fe <chk_mounted+0x1e2>
    28ae:	cb 5a       	subi	r28, 0xAB	; 171
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	88 81       	ld	r24, Y
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	18 2f       	mov	r17, r24
    28bc:	00 27       	eor	r16, r16
    28be:	ff 24       	eor	r15, r15
    28c0:	ee 24       	eor	r14, r14
    28c2:	8a 91       	ld	r24, -Y
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	a0 e0       	ldi	r26, 0x00	; 0
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	dc 01       	movw	r26, r24
    28cc:	99 27       	eor	r25, r25
    28ce:	88 27       	eor	r24, r24
    28d0:	e8 2a       	or	r14, r24
    28d2:	f9 2a       	or	r15, r25
    28d4:	0a 2b       	or	r16, r26
    28d6:	1b 2b       	or	r17, r27
    28d8:	22 97       	sbiw	r28, 0x02	; 2
    28da:	89 91       	ld	r24, Y+
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e8 2a       	or	r14, r24
    28e4:	f9 2a       	or	r15, r25
    28e6:	0a 2b       	or	r16, r26
    28e8:	1b 2b       	or	r17, r27
    28ea:	98 81       	ld	r25, Y
    28ec:	c3 55       	subi	r28, 0x53	; 83
    28ee:	d0 40       	sbci	r29, 0x00	; 0
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e8 2a       	or	r14, r24
    28f8:	f9 2a       	or	r15, r25
    28fa:	0a 2b       	or	r16, r26
    28fc:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    28fe:	ee 8a       	std	Y+22, r14	; 0x16
    2900:	ff 8a       	std	Y+23, r15	; 0x17
    2902:	08 8f       	std	Y+24, r16	; 0x18
    2904:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2906:	2e ad       	ldd	r18, Y+62	; 0x3e
    2908:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	c8 01       	movw	r24, r16
    2912:	b7 01       	movw	r22, r14
    2914:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    2918:	3b 01       	movw	r6, r22
    291a:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    291c:	9d ad       	ldd	r25, Y+61	; 0x3d
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	2c ad       	ldd	r18, Y+60	; 0x3c
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	82 2b       	or	r24, r18
    2926:	93 2b       	or	r25, r19
    2928:	a0 e0       	ldi	r26, 0x00	; 0
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	8a 0d       	add	r24, r10
    292e:	9b 1d       	adc	r25, r11
    2930:	ac 1d       	adc	r26, r12
    2932:	bd 1d       	adc	r27, r13
    2934:	8e 8f       	std	Y+30, r24	; 0x1e
    2936:	9f 8f       	std	Y+31, r25	; 0x1f
    2938:	a8 a3       	std	Y+32, r26	; 0x20
    293a:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    293c:	8b ad       	ldd	r24, Y+59	; 0x3b
    293e:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2940:	c0 5c       	subi	r28, 0xC0	; 192
    2942:	df 4f       	sbci	r29, 0xFF	; 255
    2944:	98 81       	ld	r25, Y
    2946:	c0 54       	subi	r28, 0x40	; 64
    2948:	d0 40       	sbci	r29, 0x00	; 0
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	2f ad       	ldd	r18, Y+63	; 0x3f
    294e:	42 2f       	mov	r20, r18
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	48 2b       	or	r20, r24
    2954:	59 2b       	or	r21, r25
    2956:	48 87       	std	Y+8, r20	; 0x08
    2958:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    295a:	ce 5b       	subi	r28, 0xBE	; 190
    295c:	df 4f       	sbci	r29, 0xFF	; 255
    295e:	98 81       	ld	r25, Y
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	2a 91       	ld	r18, -Y
    2964:	c1 54       	subi	r28, 0x41	; 65
    2966:	d0 40       	sbci	r29, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	82 2b       	or	r24, r18
    296c:	93 2b       	or	r25, r19
    296e:	7c 01       	movw	r14, r24
    2970:	00 e0       	ldi	r16, 0x00	; 0
    2972:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2974:	e1 14       	cp	r14, r1
    2976:	f1 04       	cpc	r15, r1
    2978:	01 05       	cpc	r16, r1
    297a:	11 05       	cpc	r17, r1
    297c:	41 f5       	brne	.+80     	; 0x29ce <chk_mounted+0x2b2>
    297e:	cf 5a       	subi	r28, 0xAF	; 175
    2980:	df 4f       	sbci	r29, 0xFF	; 255
    2982:	88 81       	ld	r24, Y
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	a0 e0       	ldi	r26, 0x00	; 0
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	18 2f       	mov	r17, r24
    298c:	00 27       	eor	r16, r16
    298e:	ff 24       	eor	r15, r15
    2990:	ee 24       	eor	r14, r14
    2992:	8a 91       	ld	r24, -Y
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a0 e0       	ldi	r26, 0x00	; 0
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	dc 01       	movw	r26, r24
    299c:	99 27       	eor	r25, r25
    299e:	88 27       	eor	r24, r24
    29a0:	e8 2a       	or	r14, r24
    29a2:	f9 2a       	or	r15, r25
    29a4:	0a 2b       	or	r16, r26
    29a6:	1b 2b       	or	r17, r27
    29a8:	22 97       	sbiw	r28, 0x02	; 2
    29aa:	89 91       	ld	r24, Y+
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e0       	ldi	r26, 0x00	; 0
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e8 2a       	or	r14, r24
    29b4:	f9 2a       	or	r15, r25
    29b6:	0a 2b       	or	r16, r26
    29b8:	1b 2b       	or	r17, r27
    29ba:	98 81       	ld	r25, Y
    29bc:	cf 54       	subi	r28, 0x4F	; 79
    29be:	d0 40       	sbci	r29, 0x00	; 0
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	a0 e0       	ldi	r26, 0x00	; 0
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e8 2a       	or	r14, r24
    29c8:	f9 2a       	or	r15, r25
    29ca:	0a 2b       	or	r16, r26
    29cc:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    29ce:	9d ad       	ldd	r25, Y+61	; 0x3d
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	82 2b       	or	r24, r18
    29d8:	93 2b       	or	r25, r19
    29da:	a0 e0       	ldi	r26, 0x00	; 0
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e8 1a       	sub	r14, r24
    29e0:	f9 0a       	sbc	r15, r25
    29e2:	0a 0b       	sbc	r16, r26
    29e4:	1b 0b       	sbc	r17, r27
    29e6:	e6 18       	sub	r14, r6
    29e8:	f7 08       	sbc	r15, r7
    29ea:	08 09       	sbc	r16, r8
    29ec:	19 09       	sbc	r17, r9
    29ee:	f4 e0       	ldi	r31, 0x04	; 4
    29f0:	56 95       	lsr	r21
    29f2:	47 95       	ror	r20
    29f4:	fa 95       	dec	r31
    29f6:	e1 f7       	brne	.-8      	; 0x29f0 <chk_mounted+0x2d4>
    29f8:	ca 01       	movw	r24, r20
    29fa:	a0 e0       	ldi	r26, 0x00	; 0
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e8 1a       	sub	r14, r24
    2a00:	f9 0a       	sbc	r15, r25
    2a02:	0a 0b       	sbc	r16, r26
    2a04:	1b 0b       	sbc	r17, r27
    2a06:	2a 81       	ldd	r18, Y+2	; 0x02
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	c8 01       	movw	r24, r16
    2a10:	b7 01       	movw	r22, r14
    2a12:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    2a16:	2e 5f       	subi	r18, 0xFE	; 254
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1e:	2a 8f       	std	Y+26, r18	; 0x1a
    2a20:	3b 8f       	std	Y+27, r19	; 0x1b
    2a22:	4c 8f       	std	Y+28, r20	; 0x1c
    2a24:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2a26:	27 3f       	cpi	r18, 0xF7	; 247
    2a28:	8f e0       	ldi	r24, 0x0F	; 15
    2a2a:	38 07       	cpc	r19, r24
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	48 07       	cpc	r20, r24
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	58 07       	cpc	r21, r24
    2a34:	10 f4       	brcc	.+4      	; 0x2a3a <chk_mounted+0x31e>
    2a36:	11 e0       	ldi	r17, 0x01	; 1
    2a38:	07 c0       	rjmp	.+14     	; 0x2a48 <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2a3a:	27 5f       	subi	r18, 0xF7	; 247
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	40 40       	sbci	r20, 0x00	; 0
    2a40:	50 40       	sbci	r21, 0x00	; 0
    2a42:	08 f0       	brcs	.+2      	; 0x2a46 <chk_mounted+0x32a>
    2a44:	33 c1       	rjmp	.+614    	; 0x2cac <chk_mounted+0x590>
    2a46:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2a48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a4c:	a8 a1       	ldd	r26, Y+32	; 0x20
    2a4e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2a50:	86 0d       	add	r24, r6
    2a52:	97 1d       	adc	r25, r7
    2a54:	a8 1d       	adc	r26, r8
    2a56:	b9 1d       	adc	r27, r9
    2a58:	8a a3       	std	Y+34, r24	; 0x22
    2a5a:	9b a3       	std	Y+35, r25	; 0x23
    2a5c:	ac a3       	std	Y+36, r26	; 0x24
    2a5e:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2a60:	88 85       	ldd	r24, Y+8	; 0x08
    2a62:	99 85       	ldd	r25, Y+9	; 0x09
    2a64:	e4 e0       	ldi	r30, 0x04	; 4
    2a66:	96 95       	lsr	r25
    2a68:	87 95       	ror	r24
    2a6a:	ea 95       	dec	r30
    2a6c:	e1 f7       	brne	.-8      	; 0x2a66 <chk_mounted+0x34a>
    2a6e:	a0 e0       	ldi	r26, 0x00	; 0
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2a74:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2a76:	48 a1       	ldd	r20, Y+32	; 0x20
    2a78:	59 a1       	ldd	r21, Y+33	; 0x21
    2a7a:	82 0f       	add	r24, r18
    2a7c:	93 1f       	adc	r25, r19
    2a7e:	a4 1f       	adc	r26, r20
    2a80:	b5 1f       	adc	r27, r21
    2a82:	86 0d       	add	r24, r6
    2a84:	97 1d       	adc	r25, r7
    2a86:	a8 1d       	adc	r26, r8
    2a88:	b9 1d       	adc	r27, r9
    2a8a:	8e a3       	std	Y+38, r24	; 0x26
    2a8c:	9f a3       	std	Y+39, r25	; 0x27
    2a8e:	a8 a7       	std	Y+40, r26	; 0x28
    2a90:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2a92:	8f ef       	ldi	r24, 0xFF	; 255
    2a94:	9f ef       	ldi	r25, 0xFF	; 255
    2a96:	af ef       	ldi	r26, 0xFF	; 255
    2a98:	bf ef       	ldi	r27, 0xFF	; 255
    2a9a:	8e 87       	std	Y+14, r24	; 0x0e
    2a9c:	9f 87       	std	Y+15, r25	; 0x0f
    2a9e:	a8 8b       	std	Y+16, r26	; 0x10
    2aa0:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2aa2:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2aa4:	13 30       	cpi	r17, 0x03	; 3
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <chk_mounted+0x38e>
    2aa8:	dc c0       	rjmp	.+440    	; 0x2c62 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2aaa:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2aac:	c1 5a       	subi	r28, 0xA1	; 161
    2aae:	df 4f       	sbci	r29, 0xFF	; 255
    2ab0:	38 81       	ld	r19, Y
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	8a 91       	ld	r24, -Y
    2ab6:	ce 55       	subi	r28, 0x5E	; 94
    2ab8:	d0 40       	sbci	r29, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	28 2b       	or	r18, r24
    2abe:	39 2b       	or	r19, r25
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	2a 0d       	add	r18, r10
    2ac6:	3b 1d       	adc	r19, r11
    2ac8:	4c 1d       	adc	r20, r12
    2aca:	5d 1d       	adc	r21, r13
    2acc:	2a 8b       	std	Y+18, r18	; 0x12
    2ace:	3b 8b       	std	Y+19, r19	; 0x13
    2ad0:	4c 8b       	std	Y+20, r20	; 0x14
    2ad2:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2ad4:	be 01       	movw	r22, r28
    2ad6:	62 5d       	subi	r22, 0xD2	; 210
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	01 e0       	ldi	r16, 0x01	; 1
    2ade:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    2ae2:	88 23       	and	r24, r24
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <chk_mounted+0x3cc>
    2ae6:	bd c0       	rjmp	.+378    	; 0x2c62 <chk_mounted+0x546>
    2ae8:	c3 5d       	subi	r28, 0xD3	; 211
    2aea:	dd 4f       	sbci	r29, 0xFD	; 253
    2aec:	98 81       	ld	r25, Y
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	2a 91       	ld	r18, -Y
    2af2:	cc 52       	subi	r28, 0x2C	; 44
    2af4:	d2 40       	sbci	r29, 0x02	; 2
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	82 2b       	or	r24, r18
    2afa:	93 2b       	or	r25, r19
    2afc:	85 55       	subi	r24, 0x55	; 85
    2afe:	9a 4a       	sbci	r25, 0xAA	; 170
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <chk_mounted+0x3e8>
    2b02:	af c0       	rjmp	.+350    	; 0x2c62 <chk_mounted+0x546>
    2b04:	29 a9       	ldd	r18, Y+49	; 0x31
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	52 2f       	mov	r21, r18
    2b0e:	44 27       	eor	r20, r20
    2b10:	33 27       	eor	r19, r19
    2b12:	22 27       	eor	r18, r18
    2b14:	88 a9       	ldd	r24, Y+48	; 0x30
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e0       	ldi	r26, 0x00	; 0
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	99 27       	eor	r25, r25
    2b20:	88 27       	eor	r24, r24
    2b22:	28 2b       	or	r18, r24
    2b24:	39 2b       	or	r19, r25
    2b26:	4a 2b       	or	r20, r26
    2b28:	5b 2b       	or	r21, r27
    2b2a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	28 2b       	or	r18, r24
    2b34:	39 2b       	or	r19, r25
    2b36:	4a 2b       	or	r20, r26
    2b38:	5b 2b       	or	r21, r27
    2b3a:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	28 2b       	or	r18, r24
    2b44:	39 2b       	or	r19, r25
    2b46:	4a 2b       	or	r20, r26
    2b48:	5b 2b       	or	r21, r27
    2b4a:	22 55       	subi	r18, 0x52	; 82
    2b4c:	32 45       	sbci	r19, 0x52	; 82
    2b4e:	41 46       	sbci	r20, 0x61	; 97
    2b50:	51 44       	sbci	r21, 0x41	; 65
    2b52:	09 f0       	breq	.+2      	; 0x2b56 <chk_mounted+0x43a>
    2b54:	86 c0       	rjmp	.+268    	; 0x2c62 <chk_mounted+0x546>
    2b56:	cb 5e       	subi	r28, 0xEB	; 235
    2b58:	dd 4f       	sbci	r29, 0xFD	; 253
    2b5a:	28 81       	ld	r18, Y
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	52 2f       	mov	r21, r18
    2b64:	44 27       	eor	r20, r20
    2b66:	33 27       	eor	r19, r19
    2b68:	22 27       	eor	r18, r18
    2b6a:	8a 91       	ld	r24, -Y
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	dc 01       	movw	r26, r24
    2b74:	99 27       	eor	r25, r25
    2b76:	88 27       	eor	r24, r24
    2b78:	28 2b       	or	r18, r24
    2b7a:	39 2b       	or	r19, r25
    2b7c:	4a 2b       	or	r20, r26
    2b7e:	5b 2b       	or	r21, r27
    2b80:	22 97       	sbiw	r28, 0x02	; 2
    2b82:	89 91       	ld	r24, Y+
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	28 2b       	or	r18, r24
    2b8c:	39 2b       	or	r19, r25
    2b8e:	4a 2b       	or	r20, r26
    2b90:	5b 2b       	or	r21, r27
    2b92:	98 81       	ld	r25, Y
    2b94:	c3 51       	subi	r28, 0x13	; 19
    2b96:	d2 40       	sbci	r29, 0x02	; 2
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	28 2b       	or	r18, r24
    2ba0:	39 2b       	or	r19, r25
    2ba2:	4a 2b       	or	r20, r26
    2ba4:	5b 2b       	or	r21, r27
    2ba6:	22 57       	subi	r18, 0x72	; 114
    2ba8:	32 47       	sbci	r19, 0x72	; 114
    2baa:	41 44       	sbci	r20, 0x41	; 65
    2bac:	51 46       	sbci	r21, 0x61	; 97
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <chk_mounted+0x496>
    2bb0:	58 c0       	rjmp	.+176    	; 0x2c62 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2bb2:	c3 5e       	subi	r28, 0xE3	; 227
    2bb4:	dd 4f       	sbci	r29, 0xFD	; 253
    2bb6:	28 81       	ld	r18, Y
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	52 2f       	mov	r21, r18
    2bc0:	44 27       	eor	r20, r20
    2bc2:	33 27       	eor	r19, r19
    2bc4:	22 27       	eor	r18, r18
    2bc6:	8a 91       	ld	r24, -Y
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e0       	ldi	r26, 0x00	; 0
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	dc 01       	movw	r26, r24
    2bd0:	99 27       	eor	r25, r25
    2bd2:	88 27       	eor	r24, r24
    2bd4:	28 2b       	or	r18, r24
    2bd6:	39 2b       	or	r19, r25
    2bd8:	4a 2b       	or	r20, r26
    2bda:	5b 2b       	or	r21, r27
    2bdc:	22 97       	sbiw	r28, 0x02	; 2
    2bde:	89 91       	ld	r24, Y+
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	28 2b       	or	r18, r24
    2be8:	39 2b       	or	r19, r25
    2bea:	4a 2b       	or	r20, r26
    2bec:	5b 2b       	or	r21, r27
    2bee:	98 81       	ld	r25, Y
    2bf0:	cb 51       	subi	r28, 0x1B	; 27
    2bf2:	d2 40       	sbci	r29, 0x02	; 2
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	a0 e0       	ldi	r26, 0x00	; 0
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	28 2b       	or	r18, r24
    2bfc:	39 2b       	or	r19, r25
    2bfe:	4a 2b       	or	r20, r26
    2c00:	5b 2b       	or	r21, r27
    2c02:	2a 87       	std	Y+10, r18	; 0x0a
    2c04:	3b 87       	std	Y+11, r19	; 0x0b
    2c06:	4c 87       	std	Y+12, r20	; 0x0c
    2c08:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2c0a:	c7 5e       	subi	r28, 0xE7	; 231
    2c0c:	dd 4f       	sbci	r29, 0xFD	; 253
    2c0e:	28 81       	ld	r18, Y
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	52 2f       	mov	r21, r18
    2c18:	44 27       	eor	r20, r20
    2c1a:	33 27       	eor	r19, r19
    2c1c:	22 27       	eor	r18, r18
    2c1e:	8a 91       	ld	r24, -Y
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e0       	ldi	r26, 0x00	; 0
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	dc 01       	movw	r26, r24
    2c28:	99 27       	eor	r25, r25
    2c2a:	88 27       	eor	r24, r24
    2c2c:	28 2b       	or	r18, r24
    2c2e:	39 2b       	or	r19, r25
    2c30:	4a 2b       	or	r20, r26
    2c32:	5b 2b       	or	r21, r27
    2c34:	22 97       	sbiw	r28, 0x02	; 2
    2c36:	89 91       	ld	r24, Y+
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	28 2b       	or	r18, r24
    2c40:	39 2b       	or	r19, r25
    2c42:	4a 2b       	or	r20, r26
    2c44:	5b 2b       	or	r21, r27
    2c46:	98 81       	ld	r25, Y
    2c48:	c7 51       	subi	r28, 0x17	; 23
    2c4a:	d2 40       	sbci	r29, 0x02	; 2
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	28 2b       	or	r18, r24
    2c54:	39 2b       	or	r19, r25
    2c56:	4a 2b       	or	r20, r26
    2c58:	5b 2b       	or	r21, r27
    2c5a:	2e 87       	std	Y+14, r18	; 0x0e
    2c5c:	3f 87       	std	Y+15, r19	; 0x0f
    2c5e:	48 8b       	std	Y+16, r20	; 0x10
    2c60:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2c62:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2c64:	1a a6       	std	Y+42, r1	; 0x2a
    2c66:	1b a6       	std	Y+43, r1	; 0x2b
    2c68:	1c a6       	std	Y+44, r1	; 0x2c
    2c6a:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2c6c:	80 91 b6 34 	lds	r24, 0x34B6
    2c70:	90 91 b7 34 	lds	r25, 0x34B7
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	80 93 b6 34 	sts	0x34B6, r24
    2c7a:	90 93 b7 34 	sts	0x34B7, r25
    2c7e:	8e 83       	std	Y+6, r24	; 0x06
    2c80:	9f 83       	std	Y+7, r25	; 0x07
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <chk_mounted+0x56c>

	return FR_OK;
    2c84:	8a e0       	ldi	r24, 0x0A	; 10
    2c86:	03 c0       	rjmp	.+6      	; 0x2c8e <chk_mounted+0x572>
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <chk_mounted+0x572>
    2c8c:	8d e0       	ldi	r24, 0x0D	; 13
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
    2ca2:	9f 90       	pop	r9
    2ca4:	8f 90       	pop	r8
    2ca6:	7f 90       	pop	r7
    2ca8:	6f 90       	pop	r6
    2caa:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2cac:	c3 5a       	subi	r28, 0xA3	; 163
    2cae:	df 4f       	sbci	r29, 0xFF	; 255
    2cb0:	28 81       	ld	r18, Y
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	52 2f       	mov	r21, r18
    2cba:	44 27       	eor	r20, r20
    2cbc:	33 27       	eor	r19, r19
    2cbe:	22 27       	eor	r18, r18
    2cc0:	8a 91       	ld	r24, -Y
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	dc 01       	movw	r26, r24
    2cca:	99 27       	eor	r25, r25
    2ccc:	88 27       	eor	r24, r24
    2cce:	28 2b       	or	r18, r24
    2cd0:	39 2b       	or	r19, r25
    2cd2:	4a 2b       	or	r20, r26
    2cd4:	5b 2b       	or	r21, r27
    2cd6:	22 97       	sbiw	r28, 0x02	; 2
    2cd8:	89 91       	ld	r24, Y+
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a0 e0       	ldi	r26, 0x00	; 0
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	28 2b       	or	r18, r24
    2ce2:	39 2b       	or	r19, r25
    2ce4:	4a 2b       	or	r20, r26
    2ce6:	5b 2b       	or	r21, r27
    2ce8:	98 81       	ld	r25, Y
    2cea:	cb 55       	subi	r28, 0x5B	; 91
    2cec:	d0 40       	sbci	r29, 0x00	; 0
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	a0 e0       	ldi	r26, 0x00	; 0
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	28 2b       	or	r18, r24
    2cf6:	39 2b       	or	r19, r25
    2cf8:	4a 2b       	or	r20, r26
    2cfa:	5b 2b       	or	r21, r27
    2cfc:	2a a3       	std	Y+34, r18	; 0x22
    2cfe:	3b a3       	std	Y+35, r19	; 0x23
    2d00:	4c a3       	std	Y+36, r20	; 0x24
    2d02:	5d a3       	std	Y+37, r21	; 0x25
    2d04:	13 e0       	ldi	r17, 0x03	; 3
    2d06:	ac ce       	rjmp	.-680    	; 0x2a60 <chk_mounted+0x344>

00002d08 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2d08:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	a9 f0       	breq	.+42     	; 0x2d38 <validate+0x30>
    2d0e:	80 81       	ld	r24, Z
    2d10:	88 23       	and	r24, r24
    2d12:	91 f0       	breq	.+36     	; 0x2d38 <validate+0x30>
    2d14:	86 81       	ldd	r24, Z+6	; 0x06
    2d16:	97 81       	ldd	r25, Z+7	; 0x07
    2d18:	86 17       	cp	r24, r22
    2d1a:	97 07       	cpc	r25, r23
    2d1c:	69 f4       	brne	.+26     	; 0x2d38 <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d1e:	81 81       	ldd	r24, Z+1	; 0x01
    2d20:	88 23       	and	r24, r24
    2d22:	11 f0       	breq	.+4      	; 0x2d28 <validate+0x20>
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <validate+0x24>
	return Stat;
    2d28:	80 91 dc 33 	lds	r24, 0x33DC
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2d2c:	80 fd       	sbrc	r24, 0
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <validate+0x2c>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	08 95       	ret
    2d34:	83 e0       	ldi	r24, 0x03	; 3
    2d36:	08 95       	ret
    2d38:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2d3a:	08 95       	ret

00002d3c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2d42:	82 30       	cpi	r24, 0x02	; 2
    2d44:	10 f0       	brcs	.+4      	; 0x2d4a <f_mount+0xe>
    2d46:	8b e0       	ldi	r24, 0x0B	; 11
    2d48:	17 c0       	rjmp	.+46     	; 0x2d78 <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2d4a:	a8 2f       	mov	r26, r24
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	fd 01       	movw	r30, r26
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	ee 54       	subi	r30, 0x4E	; 78
    2d56:	fb 4c       	sbci	r31, 0xCB	; 203
    2d58:	01 90       	ld	r0, Z+
    2d5a:	f0 81       	ld	r31, Z
    2d5c:	e0 2d       	mov	r30, r0

	if (rfs) {
    2d5e:	30 97       	sbiw	r30, 0x00	; 0
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2d62:	10 82       	st	Z, r1
	}

	if (fs) {
    2d64:	20 97       	sbiw	r28, 0x00	; 0
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2d68:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2d6a:	aa 0f       	add	r26, r26
    2d6c:	bb 1f       	adc	r27, r27
    2d6e:	ae 54       	subi	r26, 0x4E	; 78
    2d70:	bb 4c       	sbci	r27, 0xCB	; 203
    2d72:	cd 93       	st	X+, r28
    2d74:	dc 93       	st	X, r29
    2d76:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d7e:	5f 92       	push	r5
    2d80:	6f 92       	push	r6
    2d82:	7f 92       	push	r7
    2d84:	8f 92       	push	r8
    2d86:	9f 92       	push	r9
    2d88:	af 92       	push	r10
    2d8a:	bf 92       	push	r11
    2d8c:	cf 92       	push	r12
    2d8e:	df 92       	push	r13
    2d90:	ef 92       	push	r14
    2d92:	ff 92       	push	r15
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	a4 97       	sbiw	r28, 0x24	; 36
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	3c 01       	movw	r6, r24
    2da8:	6b a3       	std	Y+35, r22	; 0x23
    2daa:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2dac:	dc 01       	movw	r26, r24
    2dae:	1d 92       	st	X+, r1
    2db0:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2db2:	3f e1       	ldi	r19, 0x1F	; 31
    2db4:	53 2e       	mov	r5, r19
    2db6:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2db8:	8e 01       	movw	r16, r28
    2dba:	03 5f       	subi	r16, 0xF3	; 243
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	4e 71       	andi	r20, 0x1E	; 30
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	83 96       	adiw	r24, 0x23	; 35
    2dc4:	b8 01       	movw	r22, r16
    2dc6:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2dca:	88 23       	and	r24, r24
    2dcc:	11 f0       	breq	.+4      	; 0x2dd2 <f_open+0x54>
    2dce:	28 2f       	mov	r18, r24
    2dd0:	32 c1       	rjmp	.+612    	; 0x3036 <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	89 a3       	std	Y+33, r24	; 0x21
    2dd8:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2dda:	6b a1       	ldd	r22, Y+35	; 0x23
    2ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dde:	c8 01       	movw	r24, r16
    2de0:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
    2de4:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2de6:	45 2d       	mov	r20, r5
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	ca 01       	movw	r24, r20
    2dec:	8c 71       	andi	r24, 0x1C	; 28
    2dee:	90 70       	andi	r25, 0x00	; 0
    2df0:	89 2b       	or	r24, r25
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <f_open+0x78>
    2df4:	84 c0       	rjmp	.+264    	; 0x2efe <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2df6:	22 23       	and	r18, r18
    2df8:	79 f0       	breq	.+30     	; 0x2e18 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2dfa:	24 30       	cpi	r18, 0x04	; 4
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <f_open+0x82>
    2dfe:	1b c1       	rjmp	.+566    	; 0x3036 <f_open+0x2b8>
				res = dir_register(&dj);
    2e00:	c8 01       	movw	r24, r16
    2e02:	0e 94 b1 10 	call	0x2162	; 0x2162 <dir_register>
    2e06:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e08:	88 23       	and	r24, r24
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <f_open+0x90>
    2e0c:	14 c1       	rjmp	.+552    	; 0x3036 <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2e0e:	b8 e0       	ldi	r27, 0x08	; 8
    2e10:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2e12:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e14:	18 a1       	ldd	r17, Y+32	; 0x20
    2e16:	5b c0       	rjmp	.+182    	; 0x2ece <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2e18:	52 fe       	sbrs	r5, 2
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <f_open+0xa2>
    2e1c:	28 e0       	ldi	r18, 0x08	; 8
    2e1e:	0b c1       	rjmp	.+534    	; 0x3036 <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2e20:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e22:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2e24:	01 15       	cp	r16, r1
    2e26:	11 05       	cpc	r17, r1
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <f_open+0xae>
    2e2a:	02 c1       	rjmp	.+516    	; 0x3030 <f_open+0x2b2>
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	83 85       	ldd	r24, Z+11	; 0x0b
    2e30:	81 71       	andi	r24, 0x11	; 17
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <f_open+0xb8>
    2e34:	fd c0       	rjmp	.+506    	; 0x3030 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2e36:	53 fe       	sbrs	r5, 3
    2e38:	4a c0       	rjmp	.+148    	; 0x2ece <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2e3a:	95 89       	ldd	r25, Z+21	; 0x15
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	24 89       	ldd	r18, Z+20	; 0x14
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	82 2b       	or	r24, r18
    2e44:	93 2b       	or	r25, r19
    2e46:	a0 e0       	ldi	r26, 0x00	; 0
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	7c 01       	movw	r14, r24
    2e4c:	dd 24       	eor	r13, r13
    2e4e:	cc 24       	eor	r12, r12
    2e50:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	82 2b       	or	r24, r18
    2e5a:	93 2b       	or	r25, r19
    2e5c:	a0 e0       	ldi	r26, 0x00	; 0
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	c8 2a       	or	r12, r24
    2e62:	d9 2a       	or	r13, r25
    2e64:	ea 2a       	or	r14, r26
    2e66:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2e68:	14 8a       	std	Z+20, r1	; 0x14
    2e6a:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2e6c:	12 8e       	std	Z+26, r1	; 0x1a
    2e6e:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2e70:	14 8e       	std	Z+28, r1	; 0x1c
    2e72:	15 8e       	std	Z+29, r1	; 0x1d
    2e74:	16 8e       	std	Z+30, r1	; 0x1e
    2e76:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2e78:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e7a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2e80:	82 a4       	ldd	r8, Z+42	; 0x2a
    2e82:	93 a4       	ldd	r9, Z+43	; 0x2b
    2e84:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2e86:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2e88:	c1 14       	cp	r12, r1
    2e8a:	d1 04       	cpc	r13, r1
    2e8c:	e1 04       	cpc	r14, r1
    2e8e:	f1 04       	cpc	r15, r1
    2e90:	a1 f0       	breq	.+40     	; 0x2eba <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2e92:	cf 01       	movw	r24, r30
    2e94:	b7 01       	movw	r22, r14
    2e96:	a6 01       	movw	r20, r12
    2e98:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <remove_chain>
    2e9c:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2e9e:	88 23       	and	r24, r24
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <f_open+0x126>
    2ea2:	c9 c0       	rjmp	.+402    	; 0x3036 <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2ea4:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ea6:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ea8:	08 94       	sec
    2eaa:	c1 08       	sbc	r12, r1
    2eac:	d1 08       	sbc	r13, r1
    2eae:	e1 08       	sbc	r14, r1
    2eb0:	f1 08       	sbc	r15, r1
    2eb2:	c2 86       	std	Z+10, r12	; 0x0a
    2eb4:	d3 86       	std	Z+11, r13	; 0x0b
    2eb6:	e4 86       	std	Z+12, r14	; 0x0c
    2eb8:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebe:	b5 01       	movw	r22, r10
    2ec0:	a4 01       	movw	r20, r8
    2ec2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    2ec6:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f0       	breq	.+2      	; 0x2ece <f_open+0x150>
    2ecc:	b4 c0       	rjmp	.+360    	; 0x3036 <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2ece:	53 fe       	sbrs	r5, 3
    2ed0:	27 c0       	rjmp	.+78     	; 0x2f20 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2ed2:	d8 01       	movw	r26, r16
    2ed4:	1b 96       	adiw	r26, 0x0b	; 11
    2ed6:	1c 92       	st	X, r1
    2ed8:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2eda:	1e 96       	adiw	r26, 0x0e	; 14
    2edc:	1c 92       	st	X, r1
    2ede:	1e 97       	sbiw	r26, 0x0e	; 14
    2ee0:	1f 96       	adiw	r26, 0x0f	; 15
    2ee2:	1c 92       	st	X, r1
    2ee4:	1f 97       	sbiw	r26, 0x0f	; 15
    2ee6:	50 96       	adiw	r26, 0x10	; 16
    2ee8:	1c 92       	st	X, r1
    2eea:	50 97       	sbiw	r26, 0x10	; 16
    2eec:	51 96       	adiw	r26, 0x11	; 17
    2eee:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2ef0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ef2:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2ef8:	b0 e2       	ldi	r27, 0x20	; 32
    2efa:	5b 2a       	or	r5, r27
    2efc:	11 c0       	rjmp	.+34     	; 0x2f20 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2efe:	22 23       	and	r18, r18
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <f_open+0x186>
    2f02:	99 c0       	rjmp	.+306    	; 0x3036 <f_open+0x2b8>
		dir = dj.dir;
    2f04:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2f06:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2f08:	01 15       	cp	r16, r1
    2f0a:	11 05       	cpc	r17, r1
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <f_open+0x192>
    2f0e:	92 c0       	rjmp	.+292    	; 0x3034 <f_open+0x2b6>
    2f10:	f8 01       	movw	r30, r16
    2f12:	83 85       	ldd	r24, Z+11	; 0x0b
    2f14:	84 fd       	sbrc	r24, 4
    2f16:	8e c0       	rjmp	.+284    	; 0x3034 <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2f18:	51 fe       	sbrs	r5, 1
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <f_open+0x1a2>
    2f1c:	80 fd       	sbrc	r24, 0
    2f1e:	88 c0       	rjmp	.+272    	; 0x3030 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2f20:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f22:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f24:	22 a5       	ldd	r18, Z+42	; 0x2a
    2f26:	33 a5       	ldd	r19, Z+43	; 0x2b
    2f28:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f2a:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f2c:	d3 01       	movw	r26, r6
    2f2e:	5a 96       	adiw	r26, 0x1a	; 26
    2f30:	2d 93       	st	X+, r18
    2f32:	3d 93       	st	X+, r19
    2f34:	4d 93       	st	X+, r20
    2f36:	5c 93       	st	X, r21
    2f38:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2f3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f3c:	98 a1       	ldd	r25, Y+32	; 0x20
    2f3e:	5e 96       	adiw	r26, 0x1e	; 30
    2f40:	8d 93       	st	X+, r24
    2f42:	9c 93       	st	X, r25
    2f44:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2f46:	14 96       	adiw	r26, 0x04	; 4
    2f48:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2f4a:	d8 01       	movw	r26, r16
    2f4c:	55 96       	adiw	r26, 0x15	; 21
    2f4e:	3c 91       	ld	r19, X
    2f50:	55 97       	sbiw	r26, 0x15	; 21
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	54 96       	adiw	r26, 0x14	; 20
    2f56:	8c 91       	ld	r24, X
    2f58:	54 97       	sbiw	r26, 0x14	; 20
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	28 2b       	or	r18, r24
    2f5e:	39 2b       	or	r19, r25
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	a9 01       	movw	r20, r18
    2f66:	33 27       	eor	r19, r19
    2f68:	22 27       	eor	r18, r18
    2f6a:	5b 96       	adiw	r26, 0x1b	; 27
    2f6c:	9c 91       	ld	r25, X
    2f6e:	5b 97       	sbiw	r26, 0x1b	; 27
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	5a 96       	adiw	r26, 0x1a	; 26
    2f74:	6c 91       	ld	r22, X
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	86 2b       	or	r24, r22
    2f7a:	97 2b       	or	r25, r23
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	28 2b       	or	r18, r24
    2f82:	39 2b       	or	r19, r25
    2f84:	4a 2b       	or	r20, r26
    2f86:	5b 2b       	or	r21, r27
    2f88:	d3 01       	movw	r26, r6
    2f8a:	1e 96       	adiw	r26, 0x0e	; 14
    2f8c:	2d 93       	st	X+, r18
    2f8e:	3d 93       	st	X+, r19
    2f90:	4d 93       	st	X+, r20
    2f92:	5c 93       	st	X, r21
    2f94:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2f96:	d8 01       	movw	r26, r16
    2f98:	5f 96       	adiw	r26, 0x1f	; 31
    2f9a:	2c 91       	ld	r18, X
    2f9c:	5f 97       	sbiw	r26, 0x1f	; 31
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e0       	ldi	r20, 0x00	; 0
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	52 2f       	mov	r21, r18
    2fa6:	44 27       	eor	r20, r20
    2fa8:	33 27       	eor	r19, r19
    2faa:	22 27       	eor	r18, r18
    2fac:	5e 96       	adiw	r26, 0x1e	; 30
    2fae:	8c 91       	ld	r24, X
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	a0 e0       	ldi	r26, 0x00	; 0
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	99 27       	eor	r25, r25
    2fba:	88 27       	eor	r24, r24
    2fbc:	28 2b       	or	r18, r24
    2fbe:	39 2b       	or	r19, r25
    2fc0:	4a 2b       	or	r20, r26
    2fc2:	5b 2b       	or	r21, r27
    2fc4:	d8 01       	movw	r26, r16
    2fc6:	5c 96       	adiw	r26, 0x1c	; 28
    2fc8:	8c 91       	ld	r24, X
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	a0 e0       	ldi	r26, 0x00	; 0
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	28 2b       	or	r18, r24
    2fd2:	39 2b       	or	r19, r25
    2fd4:	4a 2b       	or	r20, r26
    2fd6:	5b 2b       	or	r21, r27
    2fd8:	d8 01       	movw	r26, r16
    2fda:	5d 96       	adiw	r26, 0x1d	; 29
    2fdc:	9c 91       	ld	r25, X
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	a0 e0       	ldi	r26, 0x00	; 0
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	28 2b       	or	r18, r24
    2fe6:	39 2b       	or	r19, r25
    2fe8:	4a 2b       	or	r20, r26
    2fea:	5b 2b       	or	r21, r27
    2fec:	d3 01       	movw	r26, r6
    2fee:	1a 96       	adiw	r26, 0x0a	; 10
    2ff0:	2d 93       	st	X+, r18
    2ff2:	3d 93       	st	X+, r19
    2ff4:	4d 93       	st	X+, r20
    2ff6:	5c 93       	st	X, r21
    2ff8:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2ffa:	16 96       	adiw	r26, 0x06	; 6
    2ffc:	1d 92       	st	X+, r1
    2ffe:	1d 92       	st	X+, r1
    3000:	1d 92       	st	X+, r1
    3002:	1c 92       	st	X, r1
    3004:	19 97       	sbiw	r26, 0x09	; 9
    3006:	8f ef       	ldi	r24, 0xFF	; 255
    3008:	15 96       	adiw	r26, 0x05	; 5
    300a:	8c 93       	st	X, r24
    300c:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    300e:	56 96       	adiw	r26, 0x16	; 22
    3010:	1d 92       	st	X+, r1
    3012:	1d 92       	st	X+, r1
    3014:	1d 92       	st	X+, r1
    3016:	1c 92       	st	X, r1
    3018:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    301a:	ed 93       	st	X+, r30
    301c:	fc 93       	st	X, r31
    301e:	11 97       	sbiw	r26, 0x01	; 1
    3020:	86 81       	ldd	r24, Z+6	; 0x06
    3022:	97 81       	ldd	r25, Z+7	; 0x07
    3024:	12 96       	adiw	r26, 0x02	; 2
    3026:	8d 93       	st	X+, r24
    3028:	9c 93       	st	X, r25
    302a:	13 97       	sbiw	r26, 0x03	; 3
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	03 c0       	rjmp	.+6      	; 0x3036 <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    3030:	27 e0       	ldi	r18, 0x07	; 7
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <f_open+0x2b8>
    3034:	24 e0       	ldi	r18, 0x04	; 4
}
    3036:	82 2f       	mov	r24, r18
    3038:	a4 96       	adiw	r28, 0x24	; 36
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	ff 90       	pop	r15
    3048:	ef 90       	pop	r14
    304a:	df 90       	pop	r13
    304c:	cf 90       	pop	r12
    304e:	bf 90       	pop	r11
    3050:	af 90       	pop	r10
    3052:	9f 90       	pop	r9
    3054:	8f 90       	pop	r8
    3056:	7f 90       	pop	r7
    3058:	6f 90       	pop	r6
    305a:	5f 90       	pop	r5
    305c:	08 95       	ret

0000305e <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    305e:	2f 92       	push	r2
    3060:	3f 92       	push	r3
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	00 d0       	rcall	.+0      	; 0x3084 <f_read+0x26>
    3084:	0f 92       	push	r0
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	8b 83       	std	Y+3, r24	; 0x03
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	16 2f       	mov	r17, r22
    3090:	07 2f       	mov	r16, r23
    3092:	4a 01       	movw	r8, r20
    3094:	29 83       	std	Y+1, r18	; 0x01
    3096:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    3098:	d9 01       	movw	r26, r18
    309a:	1d 92       	st	X+, r1
    309c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    309e:	fc 01       	movw	r30, r24
    30a0:	62 81       	ldd	r22, Z+2	; 0x02
    30a2:	73 81       	ldd	r23, Z+3	; 0x03
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <validate>
    30ac:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    30ae:	88 23       	and	r24, r24
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <f_read+0x56>
    30b2:	b4 c1       	rjmp	.+872    	; 0x341c <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    30b4:	ab 81       	ldd	r26, Y+3	; 0x03
    30b6:	bc 81       	ldd	r27, Y+4	; 0x04
    30b8:	14 96       	adiw	r26, 0x04	; 4
    30ba:	8c 91       	ld	r24, X
    30bc:	87 fd       	sbrc	r24, 7
    30be:	66 c0       	rjmp	.+204    	; 0x318c <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    30c0:	80 fd       	sbrc	r24, 0
    30c2:	03 c0       	rjmp	.+6      	; 0x30ca <f_read+0x6c>
    30c4:	a7 e0       	ldi	r26, 0x07	; 7
    30c6:	7a 2e       	mov	r7, r26
    30c8:	a9 c1       	rjmp	.+850    	; 0x341c <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    30ca:	eb 81       	ldd	r30, Y+3	; 0x03
    30cc:	fc 81       	ldd	r31, Y+4	; 0x04
    30ce:	22 85       	ldd	r18, Z+10	; 0x0a
    30d0:	33 85       	ldd	r19, Z+11	; 0x0b
    30d2:	44 85       	ldd	r20, Z+12	; 0x0c
    30d4:	55 85       	ldd	r21, Z+13	; 0x0d
    30d6:	86 81       	ldd	r24, Z+6	; 0x06
    30d8:	97 81       	ldd	r25, Z+7	; 0x07
    30da:	a0 85       	ldd	r26, Z+8	; 0x08
    30dc:	b1 85       	ldd	r27, Z+9	; 0x09
    30de:	28 1b       	sub	r18, r24
    30e0:	39 0b       	sbc	r19, r25
    30e2:	4a 0b       	sbc	r20, r26
    30e4:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    30e6:	c4 01       	movw	r24, r8
    30e8:	a0 e0       	ldi	r26, 0x00	; 0
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	28 17       	cp	r18, r24
    30ee:	39 07       	cpc	r19, r25
    30f0:	4a 07       	cpc	r20, r26
    30f2:	5b 07       	cpc	r21, r27
    30f4:	08 f4       	brcc	.+2      	; 0x30f8 <f_read+0x9a>
    30f6:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    30f8:	81 2f       	mov	r24, r17
    30fa:	90 2f       	mov	r25, r16
    30fc:	9c 01       	movw	r18, r24
    30fe:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3100:	f0 e2       	ldi	r31, 0x20	; 32
    3102:	2f 2e       	mov	r2, r31
    3104:	31 2c       	mov	r3, r1
    3106:	6b 81       	ldd	r22, Y+3	; 0x03
    3108:	7c 81       	ldd	r23, Y+4	; 0x04
    310a:	26 0e       	add	r2, r22
    310c:	37 1e       	adc	r3, r23
    310e:	82 c1       	rjmp	.+772    	; 0x3414 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3110:	ab 81       	ldd	r26, Y+3	; 0x03
    3112:	bc 81       	ldd	r27, Y+4	; 0x04
    3114:	16 96       	adiw	r26, 0x06	; 6
    3116:	2d 91       	ld	r18, X+
    3118:	3d 91       	ld	r19, X+
    311a:	4d 91       	ld	r20, X+
    311c:	5c 91       	ld	r21, X
    311e:	19 97       	sbiw	r26, 0x09	; 9
    3120:	da 01       	movw	r26, r20
    3122:	c9 01       	movw	r24, r18
    3124:	91 70       	andi	r25, 0x01	; 1
    3126:	a0 70       	andi	r26, 0x00	; 0
    3128:	b0 70       	andi	r27, 0x00	; 0
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	a1 05       	cpc	r26, r1
    312e:	b1 05       	cpc	r27, r1
    3130:	09 f0       	breq	.+2      	; 0x3134 <f_read+0xd6>
    3132:	2c c1       	rjmp	.+600    	; 0x338c <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3134:	ab 81       	ldd	r26, Y+3	; 0x03
    3136:	bc 81       	ldd	r27, Y+4	; 0x04
    3138:	ed 91       	ld	r30, X+
    313a:	fc 91       	ld	r31, X
    313c:	11 97       	sbiw	r26, 0x01	; 1
    313e:	15 96       	adiw	r26, 0x05	; 5
    3140:	9c 91       	ld	r25, X
    3142:	15 97       	sbiw	r26, 0x05	; 5
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	98 17       	cp	r25, r24
    3148:	a0 f1       	brcs	.+104    	; 0x31b2 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    314a:	21 15       	cp	r18, r1
    314c:	31 05       	cpc	r19, r1
    314e:	41 05       	cpc	r20, r1
    3150:	51 05       	cpc	r21, r1
    3152:	39 f4       	brne	.+14     	; 0x3162 <f_read+0x104>
    3154:	1e 96       	adiw	r26, 0x0e	; 14
    3156:	6d 91       	ld	r22, X+
    3158:	7d 91       	ld	r23, X+
    315a:	8d 91       	ld	r24, X+
    315c:	9c 91       	ld	r25, X
    315e:	51 97       	sbiw	r26, 0x11	; 17
    3160:	0b c0       	rjmp	.+22     	; 0x3178 <f_read+0x11a>
    3162:	ab 81       	ldd	r26, Y+3	; 0x03
    3164:	bc 81       	ldd	r27, Y+4	; 0x04
    3166:	52 96       	adiw	r26, 0x12	; 18
    3168:	4d 91       	ld	r20, X+
    316a:	5d 91       	ld	r21, X+
    316c:	6d 91       	ld	r22, X+
    316e:	7c 91       	ld	r23, X
    3170:	55 97       	sbiw	r26, 0x15	; 21
    3172:	cf 01       	movw	r24, r30
    3174:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3178:	62 30       	cpi	r22, 0x02	; 2
    317a:	71 05       	cpc	r23, r1
    317c:	81 05       	cpc	r24, r1
    317e:	91 05       	cpc	r25, r1
    3180:	40 f4       	brcc	.+16     	; 0x3192 <f_read+0x134>
    3182:	eb 81       	ldd	r30, Y+3	; 0x03
    3184:	fc 81       	ldd	r31, Y+4	; 0x04
    3186:	84 81       	ldd	r24, Z+4	; 0x04
    3188:	80 68       	ori	r24, 0x80	; 128
    318a:	84 83       	std	Z+4, r24	; 0x04
    318c:	e2 e0       	ldi	r30, 0x02	; 2
    318e:	7e 2e       	mov	r7, r30
    3190:	45 c1       	rjmp	.+650    	; 0x341c <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3192:	6f 3f       	cpi	r22, 0xFF	; 255
    3194:	ff ef       	ldi	r31, 0xFF	; 255
    3196:	7f 07       	cpc	r23, r31
    3198:	ff ef       	ldi	r31, 0xFF	; 255
    319a:	8f 07       	cpc	r24, r31
    319c:	ff ef       	ldi	r31, 0xFF	; 255
    319e:	9f 07       	cpc	r25, r31
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <f_read+0x146>
    31a2:	e0 c0       	rjmp	.+448    	; 0x3364 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    31a4:	eb 81       	ldd	r30, Y+3	; 0x03
    31a6:	fc 81       	ldd	r31, Y+4	; 0x04
    31a8:	62 8b       	std	Z+18, r22	; 0x12
    31aa:	73 8b       	std	Z+19, r23	; 0x13
    31ac:	84 8b       	std	Z+20, r24	; 0x14
    31ae:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    31b0:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    31b2:	ab 81       	ldd	r26, Y+3	; 0x03
    31b4:	bc 81       	ldd	r27, Y+4	; 0x04
    31b6:	0d 91       	ld	r16, X+
    31b8:	1c 91       	ld	r17, X
    31ba:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    31bc:	52 96       	adiw	r26, 0x12	; 18
    31be:	2d 91       	ld	r18, X+
    31c0:	3d 91       	ld	r19, X+
    31c2:	4d 91       	ld	r20, X+
    31c4:	5c 91       	ld	r21, X
    31c6:	55 97       	sbiw	r26, 0x15	; 21
    31c8:	22 50       	subi	r18, 0x02	; 2
    31ca:	30 40       	sbci	r19, 0x00	; 0
    31cc:	40 40       	sbci	r20, 0x00	; 0
    31ce:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    31d0:	f8 01       	movw	r30, r16
    31d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    31d4:	93 8d       	ldd	r25, Z+27	; 0x1b
    31d6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    31d8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    31da:	02 97       	sbiw	r24, 0x02	; 2
    31dc:	a1 09       	sbc	r26, r1
    31de:	b1 09       	sbc	r27, r1
    31e0:	28 17       	cp	r18, r24
    31e2:	39 07       	cpc	r19, r25
    31e4:	4a 07       	cpc	r20, r26
    31e6:	5b 07       	cpc	r21, r27
    31e8:	b8 f4       	brcc	.+46     	; 0x3218 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    31ea:	62 80       	ldd	r6, Z+2	; 0x02
    31ec:	66 2d       	mov	r22, r6
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    31f8:	9b 01       	movw	r18, r22
    31fa:	ac 01       	movw	r20, r24
    31fc:	f8 01       	movw	r30, r16
    31fe:	86 a1       	ldd	r24, Z+38	; 0x26
    3200:	97 a1       	ldd	r25, Z+39	; 0x27
    3202:	a0 a5       	ldd	r26, Z+40	; 0x28
    3204:	b1 a5       	ldd	r27, Z+41	; 0x29
    3206:	28 0f       	add	r18, r24
    3208:	39 1f       	adc	r19, r25
    320a:	4a 1f       	adc	r20, r26
    320c:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    320e:	21 15       	cp	r18, r1
    3210:	31 05       	cpc	r19, r1
    3212:	41 05       	cpc	r20, r1
    3214:	51 05       	cpc	r21, r1
    3216:	49 f4       	brne	.+18     	; 0x322a <f_read+0x1cc>
    3218:	ab 81       	ldd	r26, Y+3	; 0x03
    321a:	bc 81       	ldd	r27, Y+4	; 0x04
    321c:	14 96       	adiw	r26, 0x04	; 4
    321e:	8c 91       	ld	r24, X
    3220:	14 97       	sbiw	r26, 0x04	; 4
    3222:	80 68       	ori	r24, 0x80	; 128
    3224:	14 96       	adiw	r26, 0x04	; 4
    3226:	8c 93       	st	X, r24
    3228:	b1 cf       	rjmp	.-158    	; 0x318c <f_read+0x12e>
			sect += fp->csect;
    322a:	eb 81       	ldd	r30, Y+3	; 0x03
    322c:	fc 81       	ldd	r31, Y+4	; 0x04
    322e:	85 81       	ldd	r24, Z+5	; 0x05
    3230:	59 01       	movw	r10, r18
    3232:	6a 01       	movw	r12, r20
    3234:	a8 0e       	add	r10, r24
    3236:	b1 1c       	adc	r11, r1
    3238:	c1 1c       	adc	r12, r1
    323a:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    323c:	74 01       	movw	r14, r8
    323e:	ef 2c       	mov	r14, r15
    3240:	ff 24       	eor	r15, r15
    3242:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    3244:	e1 14       	cp	r14, r1
    3246:	f1 04       	cpc	r15, r1
    3248:	09 f4       	brne	.+2      	; 0x324c <f_read+0x1ee>
    324a:	53 c0       	rjmp	.+166    	; 0x32f2 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	c7 01       	movw	r24, r14
    3252:	82 0f       	add	r24, r18
    3254:	93 1f       	adc	r25, r19
    3256:	66 2d       	mov	r22, r6
    3258:	70 e0       	ldi	r23, 0x00	; 0
    325a:	68 17       	cp	r22, r24
    325c:	79 07       	cpc	r23, r25
    325e:	18 f4       	brcc	.+6      	; 0x3266 <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3260:	7b 01       	movw	r14, r22
    3262:	e2 1a       	sub	r14, r18
    3264:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    3266:	d8 01       	movw	r26, r16
    3268:	11 96       	adiw	r26, 0x01	; 1
    326a:	8c 91       	ld	r24, X
    326c:	b2 01       	movw	r22, r4
    326e:	a6 01       	movw	r20, r12
    3270:	95 01       	movw	r18, r10
    3272:	0e 2d       	mov	r16, r14
    3274:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    3278:	eb 81       	ldd	r30, Y+3	; 0x03
    327a:	fc 81       	ldd	r31, Y+4	; 0x04
    327c:	94 81       	ldd	r25, Z+4	; 0x04
    327e:	88 23       	and	r24, r24
    3280:	19 f0       	breq	.+6      	; 0x3288 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    3282:	90 68       	ori	r25, 0x80	; 128
    3284:	94 83       	std	Z+4, r25	; 0x04
    3286:	76 c0       	rjmp	.+236    	; 0x3374 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3288:	96 ff       	sbrs	r25, 6
    328a:	29 c0       	rjmp	.+82     	; 0x32de <f_read+0x280>
    328c:	ab 81       	ldd	r26, Y+3	; 0x03
    328e:	bc 81       	ldd	r27, Y+4	; 0x04
    3290:	56 96       	adiw	r26, 0x16	; 22
    3292:	2d 91       	ld	r18, X+
    3294:	3d 91       	ld	r19, X+
    3296:	4d 91       	ld	r20, X+
    3298:	5c 91       	ld	r21, X
    329a:	59 97       	sbiw	r26, 0x19	; 25
    329c:	2a 19       	sub	r18, r10
    329e:	3b 09       	sbc	r19, r11
    32a0:	4c 09       	sbc	r20, r12
    32a2:	5d 09       	sbc	r21, r13
    32a4:	c7 01       	movw	r24, r14
    32a6:	a0 e0       	ldi	r26, 0x00	; 0
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	28 17       	cp	r18, r24
    32ac:	39 07       	cpc	r19, r25
    32ae:	4a 07       	cpc	r20, r26
    32b0:	5b 07       	cpc	r21, r27
    32b2:	a8 f4       	brcc	.+42     	; 0x32de <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    32b4:	69 e0       	ldi	r22, 0x09	; 9
    32b6:	22 0f       	add	r18, r18
    32b8:	33 1f       	adc	r19, r19
    32ba:	44 1f       	adc	r20, r20
    32bc:	55 1f       	adc	r21, r21
    32be:	6a 95       	dec	r22
    32c0:	d1 f7       	brne	.-12     	; 0x32b6 <f_read+0x258>
    32c2:	c2 01       	movw	r24, r4
    32c4:	82 0f       	add	r24, r18
    32c6:	93 1f       	adc	r25, r19
    32c8:	d1 01       	movw	r26, r2
    32ca:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    32cc:	9c 01       	movw	r18, r24
    32ce:	20 50       	subi	r18, 0x00	; 0
    32d0:	3e 4f       	sbci	r19, 0xFE	; 254
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <f_read+0x27a>
    32d4:	8d 91       	ld	r24, X+
    32d6:	81 93       	st	Z+, r24
    32d8:	e2 17       	cp	r30, r18
    32da:	f3 07       	cpc	r31, r19
    32dc:	d9 f7       	brne	.-10     	; 0x32d4 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    32de:	eb 81       	ldd	r30, Y+3	; 0x03
    32e0:	fc 81       	ldd	r31, Y+4	; 0x04
    32e2:	85 81       	ldd	r24, Z+5	; 0x05
    32e4:	8e 0d       	add	r24, r14
    32e6:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    32e8:	b7 01       	movw	r22, r14
    32ea:	76 2f       	mov	r23, r22
    32ec:	66 27       	eor	r22, r22
    32ee:	77 0f       	add	r23, r23
    32f0:	74 c0       	rjmp	.+232    	; 0x33da <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    32f2:	ab 81       	ldd	r26, Y+3	; 0x03
    32f4:	bc 81       	ldd	r27, Y+4	; 0x04
    32f6:	14 96       	adiw	r26, 0x04	; 4
    32f8:	8c 91       	ld	r24, X
    32fa:	14 97       	sbiw	r26, 0x04	; 4
    32fc:	86 ff       	sbrs	r24, 6
    32fe:	1b c0       	rjmp	.+54     	; 0x3336 <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3300:	56 96       	adiw	r26, 0x16	; 22
    3302:	2d 91       	ld	r18, X+
    3304:	3d 91       	ld	r19, X+
    3306:	4d 91       	ld	r20, X+
    3308:	5c 91       	ld	r21, X
    330a:	59 97       	sbiw	r26, 0x19	; 25
    330c:	f8 01       	movw	r30, r16
    330e:	81 81       	ldd	r24, Z+1	; 0x01
    3310:	b1 01       	movw	r22, r2
    3312:	01 e0       	ldi	r16, 0x01	; 1
    3314:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    3318:	ab 81       	ldd	r26, Y+3	; 0x03
    331a:	bc 81       	ldd	r27, Y+4	; 0x04
    331c:	14 96       	adiw	r26, 0x04	; 4
    331e:	9c 91       	ld	r25, X
    3320:	14 97       	sbiw	r26, 0x04	; 4
    3322:	88 23       	and	r24, r24
    3324:	21 f0       	breq	.+8      	; 0x332e <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    3326:	90 68       	ori	r25, 0x80	; 128
    3328:	14 96       	adiw	r26, 0x04	; 4
    332a:	9c 93       	st	X, r25
    332c:	23 c0       	rjmp	.+70     	; 0x3374 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    332e:	9f 7b       	andi	r25, 0xBF	; 191
    3330:	eb 81       	ldd	r30, Y+3	; 0x03
    3332:	fc 81       	ldd	r31, Y+4	; 0x04
    3334:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    3336:	eb 81       	ldd	r30, Y+3	; 0x03
    3338:	fc 81       	ldd	r31, Y+4	; 0x04
    333a:	86 89       	ldd	r24, Z+22	; 0x16
    333c:	97 89       	ldd	r25, Z+23	; 0x17
    333e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3340:	b1 8d       	ldd	r27, Z+25	; 0x19
    3342:	8a 15       	cp	r24, r10
    3344:	9b 05       	cpc	r25, r11
    3346:	ac 05       	cpc	r26, r12
    3348:	bd 05       	cpc	r27, r13
    334a:	b9 f0       	breq	.+46     	; 0x337a <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    334c:	01 90       	ld	r0, Z+
    334e:	f0 81       	ld	r31, Z
    3350:	e0 2d       	mov	r30, r0
    3352:	81 81       	ldd	r24, Z+1	; 0x01
    3354:	b1 01       	movw	r22, r2
    3356:	a6 01       	movw	r20, r12
    3358:	95 01       	movw	r18, r10
    335a:	01 e0       	ldi	r16, 0x01	; 1
    335c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    3360:	88 23       	and	r24, r24
    3362:	59 f0       	breq	.+22     	; 0x337a <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    3364:	ab 81       	ldd	r26, Y+3	; 0x03
    3366:	bc 81       	ldd	r27, Y+4	; 0x04
    3368:	14 96       	adiw	r26, 0x04	; 4
    336a:	8c 91       	ld	r24, X
    336c:	14 97       	sbiw	r26, 0x04	; 4
    336e:	80 68       	ori	r24, 0x80	; 128
    3370:	14 96       	adiw	r26, 0x04	; 4
    3372:	8c 93       	st	X, r24
    3374:	77 24       	eor	r7, r7
    3376:	73 94       	inc	r7
    3378:	51 c0       	rjmp	.+162    	; 0x341c <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    337a:	eb 81       	ldd	r30, Y+3	; 0x03
    337c:	fc 81       	ldd	r31, Y+4	; 0x04
    337e:	a6 8a       	std	Z+22, r10	; 0x16
    3380:	b7 8a       	std	Z+23, r11	; 0x17
    3382:	c0 8e       	std	Z+24, r12	; 0x18
    3384:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    3386:	85 81       	ldd	r24, Z+5	; 0x05
    3388:	8f 5f       	subi	r24, 0xFF	; 255
    338a:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    338c:	ab 81       	ldd	r26, Y+3	; 0x03
    338e:	bc 81       	ldd	r27, Y+4	; 0x04
    3390:	16 96       	adiw	r26, 0x06	; 6
    3392:	2d 91       	ld	r18, X+
    3394:	3d 91       	ld	r19, X+
    3396:	4d 91       	ld	r20, X+
    3398:	5c 91       	ld	r21, X
    339a:	19 97       	sbiw	r26, 0x09	; 9
    339c:	c9 01       	movw	r24, r18
    339e:	91 70       	andi	r25, 0x01	; 1
    33a0:	e0 e0       	ldi	r30, 0x00	; 0
    33a2:	f2 e0       	ldi	r31, 0x02	; 2
    33a4:	e8 1b       	sub	r30, r24
    33a6:	f9 0b       	sbc	r31, r25
    33a8:	b4 01       	movw	r22, r8
    33aa:	e8 15       	cp	r30, r8
    33ac:	f9 05       	cpc	r31, r9
    33ae:	08 f4       	brcc	.+2      	; 0x33b2 <f_read+0x354>
    33b0:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    33b2:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    33b4:	f9 01       	movw	r30, r18
    33b6:	f1 70       	andi	r31, 0x01	; 1
    33b8:	b0 96       	adiw	r30, 0x20	; 32
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	9c 81       	ldd	r25, Y+4	; 0x04
    33be:	e8 0f       	add	r30, r24
    33c0:	f9 1f       	adc	r31, r25
    33c2:	92 01       	movw	r18, r4
    33c4:	04 c0       	rjmp	.+8      	; 0x33ce <f_read+0x370>
	while (cnt--) *d++ = *s++;
    33c6:	81 91       	ld	r24, Z+
    33c8:	d9 01       	movw	r26, r18
    33ca:	8d 93       	st	X+, r24
    33cc:	9d 01       	movw	r18, r26
    33ce:	01 50       	subi	r16, 0x01	; 1
    33d0:	10 40       	sbci	r17, 0x00	; 0
    33d2:	bf ef       	ldi	r27, 0xFF	; 255
    33d4:	0f 3f       	cpi	r16, 0xFF	; 255
    33d6:	1b 07       	cpc	r17, r27
    33d8:	b1 f7       	brne	.-20     	; 0x33c6 <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    33da:	46 0e       	add	r4, r22
    33dc:	57 1e       	adc	r5, r23
    33de:	cb 01       	movw	r24, r22
    33e0:	a0 e0       	ldi	r26, 0x00	; 0
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	eb 81       	ldd	r30, Y+3	; 0x03
    33e6:	fc 81       	ldd	r31, Y+4	; 0x04
    33e8:	26 81       	ldd	r18, Z+6	; 0x06
    33ea:	37 81       	ldd	r19, Z+7	; 0x07
    33ec:	40 85       	ldd	r20, Z+8	; 0x08
    33ee:	51 85       	ldd	r21, Z+9	; 0x09
    33f0:	28 0f       	add	r18, r24
    33f2:	39 1f       	adc	r19, r25
    33f4:	4a 1f       	adc	r20, r26
    33f6:	5b 1f       	adc	r21, r27
    33f8:	26 83       	std	Z+6, r18	; 0x06
    33fa:	37 83       	std	Z+7, r19	; 0x07
    33fc:	40 87       	std	Z+8, r20	; 0x08
    33fe:	51 87       	std	Z+9, r21	; 0x09
    3400:	e9 81       	ldd	r30, Y+1	; 0x01
    3402:	fa 81       	ldd	r31, Y+2	; 0x02
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	86 0f       	add	r24, r22
    340a:	97 1f       	adc	r25, r23
    340c:	80 83       	st	Z, r24
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	86 1a       	sub	r8, r22
    3412:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    3414:	81 14       	cp	r8, r1
    3416:	91 04       	cpc	r9, r1
    3418:	09 f0       	breq	.+2      	; 0x341c <f_read+0x3be>
    341a:	7a ce       	rjmp	.-780    	; 0x3110 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    341c:	87 2d       	mov	r24, r7
    341e:	24 96       	adiw	r28, 0x04	; 4
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	7f 90       	pop	r7
    343e:	6f 90       	pop	r6
    3440:	5f 90       	pop	r5
    3442:	4f 90       	pop	r4
    3444:	3f 90       	pop	r3
    3446:	2f 90       	pop	r2
    3448:	08 95       	ret

0000344a <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    344a:	2f 92       	push	r2
    344c:	3f 92       	push	r3
    344e:	4f 92       	push	r4
    3450:	5f 92       	push	r5
    3452:	6f 92       	push	r6
    3454:	7f 92       	push	r7
    3456:	8f 92       	push	r8
    3458:	9f 92       	push	r9
    345a:	af 92       	push	r10
    345c:	bf 92       	push	r11
    345e:	cf 92       	push	r12
    3460:	df 92       	push	r13
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	00 d0       	rcall	.+0      	; 0x3470 <f_write+0x26>
    3470:	0f 92       	push	r0
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	8b 83       	std	Y+3, r24	; 0x03
    3478:	9c 83       	std	Y+4, r25	; 0x04
    347a:	16 2f       	mov	r17, r22
    347c:	07 2f       	mov	r16, r23
    347e:	4a 01       	movw	r8, r20
    3480:	29 83       	std	Y+1, r18	; 0x01
    3482:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    3484:	d9 01       	movw	r26, r18
    3486:	1d 92       	st	X+, r1
    3488:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    348a:	fc 01       	movw	r30, r24
    348c:	62 81       	ldd	r22, Z+2	; 0x02
    348e:	73 81       	ldd	r23, Z+3	; 0x03
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	0e 94 84 16 	call	0x2d08	; 0x2d08 <validate>
    3498:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    349a:	88 23       	and	r24, r24
    349c:	09 f0       	breq	.+2      	; 0x34a0 <f_write+0x56>
    349e:	02 c2       	rjmp	.+1028   	; 0x38a4 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    34a0:	ab 81       	ldd	r26, Y+3	; 0x03
    34a2:	bc 81       	ldd	r27, Y+4	; 0x04
    34a4:	14 96       	adiw	r26, 0x04	; 4
    34a6:	8c 91       	ld	r24, X
    34a8:	87 fd       	sbrc	r24, 7
    34aa:	7c c0       	rjmp	.+248    	; 0x35a4 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    34ac:	81 fd       	sbrc	r24, 1
    34ae:	03 c0       	rjmp	.+6      	; 0x34b6 <f_write+0x6c>
    34b0:	47 e0       	ldi	r20, 0x07	; 7
    34b2:	64 2e       	mov	r6, r20
    34b4:	f7 c1       	rjmp	.+1006   	; 0x38a4 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    34b6:	eb 81       	ldd	r30, Y+3	; 0x03
    34b8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ba:	22 85       	ldd	r18, Z+10	; 0x0a
    34bc:	33 85       	ldd	r19, Z+11	; 0x0b
    34be:	44 85       	ldd	r20, Z+12	; 0x0c
    34c0:	55 85       	ldd	r21, Z+13	; 0x0d
    34c2:	c4 01       	movw	r24, r8
    34c4:	a0 e0       	ldi	r26, 0x00	; 0
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	82 0f       	add	r24, r18
    34ca:	93 1f       	adc	r25, r19
    34cc:	a4 1f       	adc	r26, r20
    34ce:	b5 1f       	adc	r27, r21
    34d0:	82 17       	cp	r24, r18
    34d2:	93 07       	cpc	r25, r19
    34d4:	a4 07       	cpc	r26, r20
    34d6:	b5 07       	cpc	r27, r21
    34d8:	10 f4       	brcc	.+4      	; 0x34de <f_write+0x94>
    34da:	88 24       	eor	r8, r8
    34dc:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    34de:	81 2f       	mov	r24, r17
    34e0:	90 2f       	mov	r25, r16
    34e2:	9c 01       	movw	r18, r24
    34e4:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    34e6:	30 e2       	ldi	r19, 0x20	; 32
    34e8:	23 2e       	mov	r2, r19
    34ea:	31 2c       	mov	r3, r1
    34ec:	6b 81       	ldd	r22, Y+3	; 0x03
    34ee:	7c 81       	ldd	r23, Y+4	; 0x04
    34f0:	26 0e       	add	r2, r22
    34f2:	37 1e       	adc	r3, r23
    34f4:	b2 c1       	rjmp	.+868    	; 0x385a <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    34f6:	ab 81       	ldd	r26, Y+3	; 0x03
    34f8:	bc 81       	ldd	r27, Y+4	; 0x04
    34fa:	16 96       	adiw	r26, 0x06	; 6
    34fc:	2d 91       	ld	r18, X+
    34fe:	3d 91       	ld	r19, X+
    3500:	4d 91       	ld	r20, X+
    3502:	5c 91       	ld	r21, X
    3504:	19 97       	sbiw	r26, 0x09	; 9
    3506:	da 01       	movw	r26, r20
    3508:	c9 01       	movw	r24, r18
    350a:	91 70       	andi	r25, 0x01	; 1
    350c:	a0 70       	andi	r26, 0x00	; 0
    350e:	b0 70       	andi	r27, 0x00	; 0
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	a1 05       	cpc	r26, r1
    3514:	b1 05       	cpc	r27, r1
    3516:	09 f0       	breq	.+2      	; 0x351a <f_write+0xd0>
    3518:	58 c1       	rjmp	.+688    	; 0x37ca <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    351a:	ab 81       	ldd	r26, Y+3	; 0x03
    351c:	bc 81       	ldd	r27, Y+4	; 0x04
    351e:	ed 91       	ld	r30, X+
    3520:	fc 91       	ld	r31, X
    3522:	11 97       	sbiw	r26, 0x01	; 1
    3524:	15 96       	adiw	r26, 0x05	; 5
    3526:	9c 91       	ld	r25, X
    3528:	15 97       	sbiw	r26, 0x05	; 5
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	98 17       	cp	r25, r24
    352e:	08 f4       	brcc	.+2      	; 0x3532 <f_write+0xe8>
    3530:	54 c0       	rjmp	.+168    	; 0x35da <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    3532:	21 15       	cp	r18, r1
    3534:	31 05       	cpc	r19, r1
    3536:	41 05       	cpc	r20, r1
    3538:	51 05       	cpc	r21, r1
    353a:	c9 f4       	brne	.+50     	; 0x356e <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    353c:	1e 96       	adiw	r26, 0x0e	; 14
    353e:	6d 91       	ld	r22, X+
    3540:	7d 91       	ld	r23, X+
    3542:	8d 91       	ld	r24, X+
    3544:	9c 91       	ld	r25, X
    3546:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    3548:	61 15       	cp	r22, r1
    354a:	71 05       	cpc	r23, r1
    354c:	81 05       	cpc	r24, r1
    354e:	91 05       	cpc	r25, r1
    3550:	f9 f4       	brne	.+62     	; 0x3590 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3552:	cf 01       	movw	r24, r30
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <create_chain>
    3560:	eb 81       	ldd	r30, Y+3	; 0x03
    3562:	fc 81       	ldd	r31, Y+4	; 0x04
    3564:	66 87       	std	Z+14, r22	; 0x0e
    3566:	77 87       	std	Z+15, r23	; 0x0f
    3568:	80 8b       	std	Z+16, r24	; 0x10
    356a:	91 8b       	std	Z+17, r25	; 0x11
    356c:	0b c0       	rjmp	.+22     	; 0x3584 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    356e:	ab 81       	ldd	r26, Y+3	; 0x03
    3570:	bc 81       	ldd	r27, Y+4	; 0x04
    3572:	52 96       	adiw	r26, 0x12	; 18
    3574:	4d 91       	ld	r20, X+
    3576:	5d 91       	ld	r21, X+
    3578:	6d 91       	ld	r22, X+
    357a:	7c 91       	ld	r23, X
    357c:	55 97       	sbiw	r26, 0x15	; 21
    357e:	cf 01       	movw	r24, r30
    3580:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    3584:	61 15       	cp	r22, r1
    3586:	71 05       	cpc	r23, r1
    3588:	81 05       	cpc	r24, r1
    358a:	91 05       	cpc	r25, r1
    358c:	09 f4       	brne	.+2      	; 0x3590 <f_write+0x146>
    358e:	69 c1       	rjmp	.+722    	; 0x3862 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3590:	61 30       	cpi	r22, 0x01	; 1
    3592:	71 05       	cpc	r23, r1
    3594:	81 05       	cpc	r24, r1
    3596:	91 05       	cpc	r25, r1
    3598:	41 f4       	brne	.+16     	; 0x35aa <f_write+0x160>
    359a:	eb 81       	ldd	r30, Y+3	; 0x03
    359c:	fc 81       	ldd	r31, Y+4	; 0x04
    359e:	84 81       	ldd	r24, Z+4	; 0x04
    35a0:	80 68       	ori	r24, 0x80	; 128
    35a2:	84 83       	std	Z+4, r24	; 0x04
    35a4:	22 e0       	ldi	r18, 0x02	; 2
    35a6:	62 2e       	mov	r6, r18
    35a8:	7d c1       	rjmp	.+762    	; 0x38a4 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    35aa:	6f 3f       	cpi	r22, 0xFF	; 255
    35ac:	ff ef       	ldi	r31, 0xFF	; 255
    35ae:	7f 07       	cpc	r23, r31
    35b0:	ff ef       	ldi	r31, 0xFF	; 255
    35b2:	8f 07       	cpc	r24, r31
    35b4:	ff ef       	ldi	r31, 0xFF	; 255
    35b6:	9f 07       	cpc	r25, r31
    35b8:	49 f4       	brne	.+18     	; 0x35cc <f_write+0x182>
    35ba:	ab 81       	ldd	r26, Y+3	; 0x03
    35bc:	bc 81       	ldd	r27, Y+4	; 0x04
    35be:	14 96       	adiw	r26, 0x04	; 4
    35c0:	8c 91       	ld	r24, X
    35c2:	14 97       	sbiw	r26, 0x04	; 4
    35c4:	80 68       	ori	r24, 0x80	; 128
    35c6:	14 96       	adiw	r26, 0x04	; 4
    35c8:	8c 93       	st	X, r24
    35ca:	ee c0       	rjmp	.+476    	; 0x37a8 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    35cc:	eb 81       	ldd	r30, Y+3	; 0x03
    35ce:	fc 81       	ldd	r31, Y+4	; 0x04
    35d0:	62 8b       	std	Z+18, r22	; 0x12
    35d2:	73 8b       	std	Z+19, r23	; 0x13
    35d4:	84 8b       	std	Z+20, r24	; 0x14
    35d6:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    35d8:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    35da:	ab 81       	ldd	r26, Y+3	; 0x03
    35dc:	bc 81       	ldd	r27, Y+4	; 0x04
    35de:	14 96       	adiw	r26, 0x04	; 4
    35e0:	8c 91       	ld	r24, X
    35e2:	14 97       	sbiw	r26, 0x04	; 4
    35e4:	86 ff       	sbrs	r24, 6
    35e6:	1b c0       	rjmp	.+54     	; 0x361e <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    35e8:	ed 91       	ld	r30, X+
    35ea:	fc 91       	ld	r31, X
    35ec:	11 97       	sbiw	r26, 0x01	; 1
    35ee:	56 96       	adiw	r26, 0x16	; 22
    35f0:	2d 91       	ld	r18, X+
    35f2:	3d 91       	ld	r19, X+
    35f4:	4d 91       	ld	r20, X+
    35f6:	5c 91       	ld	r21, X
    35f8:	59 97       	sbiw	r26, 0x19	; 25
    35fa:	81 81       	ldd	r24, Z+1	; 0x01
    35fc:	b1 01       	movw	r22, r2
    35fe:	01 e0       	ldi	r16, 0x01	; 1
    3600:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    3604:	eb 81       	ldd	r30, Y+3	; 0x03
    3606:	fc 81       	ldd	r31, Y+4	; 0x04
    3608:	94 81       	ldd	r25, Z+4	; 0x04
    360a:	88 23       	and	r24, r24
    360c:	19 f0       	breq	.+6      	; 0x3614 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    360e:	90 68       	ori	r25, 0x80	; 128
    3610:	94 83       	std	Z+4, r25	; 0x04
    3612:	ca c0       	rjmp	.+404    	; 0x37a8 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    3614:	9f 7b       	andi	r25, 0xBF	; 191
    3616:	ab 81       	ldd	r26, Y+3	; 0x03
    3618:	bc 81       	ldd	r27, Y+4	; 0x04
    361a:	14 96       	adiw	r26, 0x04	; 4
    361c:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    361e:	eb 81       	ldd	r30, Y+3	; 0x03
    3620:	fc 81       	ldd	r31, Y+4	; 0x04
    3622:	00 81       	ld	r16, Z
    3624:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3626:	22 89       	ldd	r18, Z+18	; 0x12
    3628:	33 89       	ldd	r19, Z+19	; 0x13
    362a:	44 89       	ldd	r20, Z+20	; 0x14
    362c:	55 89       	ldd	r21, Z+21	; 0x15
    362e:	22 50       	subi	r18, 0x02	; 2
    3630:	30 40       	sbci	r19, 0x00	; 0
    3632:	40 40       	sbci	r20, 0x00	; 0
    3634:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3636:	f8 01       	movw	r30, r16
    3638:	82 8d       	ldd	r24, Z+26	; 0x1a
    363a:	93 8d       	ldd	r25, Z+27	; 0x1b
    363c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    363e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3640:	02 97       	sbiw	r24, 0x02	; 2
    3642:	a1 09       	sbc	r26, r1
    3644:	b1 09       	sbc	r27, r1
    3646:	28 17       	cp	r18, r24
    3648:	39 07       	cpc	r19, r25
    364a:	4a 07       	cpc	r20, r26
    364c:	5b 07       	cpc	r21, r27
    364e:	b8 f4       	brcc	.+46     	; 0x367e <f_write+0x234>
	return clst * fs->csize + fs->database;
    3650:	72 80       	ldd	r7, Z+2	; 0x02
    3652:	67 2d       	mov	r22, r7
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    365e:	9b 01       	movw	r18, r22
    3660:	ac 01       	movw	r20, r24
    3662:	f8 01       	movw	r30, r16
    3664:	86 a1       	ldd	r24, Z+38	; 0x26
    3666:	97 a1       	ldd	r25, Z+39	; 0x27
    3668:	a0 a5       	ldd	r26, Z+40	; 0x28
    366a:	b1 a5       	ldd	r27, Z+41	; 0x29
    366c:	28 0f       	add	r18, r24
    366e:	39 1f       	adc	r19, r25
    3670:	4a 1f       	adc	r20, r26
    3672:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3674:	21 15       	cp	r18, r1
    3676:	31 05       	cpc	r19, r1
    3678:	41 05       	cpc	r20, r1
    367a:	51 05       	cpc	r21, r1
    367c:	49 f4       	brne	.+18     	; 0x3690 <f_write+0x246>
    367e:	ab 81       	ldd	r26, Y+3	; 0x03
    3680:	bc 81       	ldd	r27, Y+4	; 0x04
    3682:	14 96       	adiw	r26, 0x04	; 4
    3684:	8c 91       	ld	r24, X
    3686:	14 97       	sbiw	r26, 0x04	; 4
    3688:	80 68       	ori	r24, 0x80	; 128
    368a:	14 96       	adiw	r26, 0x04	; 4
    368c:	8c 93       	st	X, r24
    368e:	8a cf       	rjmp	.-236    	; 0x35a4 <f_write+0x15a>
			sect += fp->csect;
    3690:	eb 81       	ldd	r30, Y+3	; 0x03
    3692:	fc 81       	ldd	r31, Y+4	; 0x04
    3694:	85 81       	ldd	r24, Z+5	; 0x05
    3696:	69 01       	movw	r12, r18
    3698:	7a 01       	movw	r14, r20
    369a:	c8 0e       	add	r12, r24
    369c:	d1 1c       	adc	r13, r1
    369e:	e1 1c       	adc	r14, r1
    36a0:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    36a2:	54 01       	movw	r10, r8
    36a4:	ab 2c       	mov	r10, r11
    36a6:	bb 24       	eor	r11, r11
    36a8:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    36aa:	a1 14       	cp	r10, r1
    36ac:	b1 04       	cpc	r11, r1
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <f_write+0x268>
    36b0:	53 c0       	rjmp	.+166    	; 0x3758 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    36b2:	28 2f       	mov	r18, r24
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	c5 01       	movw	r24, r10
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	67 2d       	mov	r22, r7
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	68 17       	cp	r22, r24
    36c2:	79 07       	cpc	r23, r25
    36c4:	18 f4       	brcc	.+6      	; 0x36cc <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    36c6:	5b 01       	movw	r10, r22
    36c8:	a2 1a       	sub	r10, r18
    36ca:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    36cc:	d8 01       	movw	r26, r16
    36ce:	11 96       	adiw	r26, 0x01	; 1
    36d0:	8c 91       	ld	r24, X
    36d2:	b2 01       	movw	r22, r4
    36d4:	a7 01       	movw	r20, r14
    36d6:	96 01       	movw	r18, r12
    36d8:	0a 2d       	mov	r16, r10
    36da:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    36de:	88 23       	and	r24, r24
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <f_write+0x29a>
    36e2:	5d c0       	rjmp	.+186    	; 0x379e <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    36e4:	ab 81       	ldd	r26, Y+3	; 0x03
    36e6:	bc 81       	ldd	r27, Y+4	; 0x04
    36e8:	56 96       	adiw	r26, 0x16	; 22
    36ea:	2d 91       	ld	r18, X+
    36ec:	3d 91       	ld	r19, X+
    36ee:	4d 91       	ld	r20, X+
    36f0:	5c 91       	ld	r21, X
    36f2:	59 97       	sbiw	r26, 0x19	; 25
    36f4:	2c 19       	sub	r18, r12
    36f6:	3d 09       	sbc	r19, r13
    36f8:	4e 09       	sbc	r20, r14
    36fa:	5f 09       	sbc	r21, r15
    36fc:	c5 01       	movw	r24, r10
    36fe:	a0 e0       	ldi	r26, 0x00	; 0
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	28 17       	cp	r18, r24
    3704:	39 07       	cpc	r19, r25
    3706:	4a 07       	cpc	r20, r26
    3708:	5b 07       	cpc	r21, r27
    370a:	c8 f4       	brcc	.+50     	; 0x373e <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    370c:	19 e0       	ldi	r17, 0x09	; 9
    370e:	22 0f       	add	r18, r18
    3710:	33 1f       	adc	r19, r19
    3712:	44 1f       	adc	r20, r20
    3714:	55 1f       	adc	r21, r21
    3716:	1a 95       	dec	r17
    3718:	d1 f7       	brne	.-12     	; 0x370e <f_write+0x2c4>
    371a:	f2 01       	movw	r30, r4
    371c:	e2 0f       	add	r30, r18
    371e:	f3 1f       	adc	r31, r19
    3720:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    3722:	9f 01       	movw	r18, r30
    3724:	20 50       	subi	r18, 0x00	; 0
    3726:	3e 4f       	sbci	r19, 0xFE	; 254
    3728:	02 c0       	rjmp	.+4      	; 0x372e <f_write+0x2e4>
    372a:	81 91       	ld	r24, Z+
    372c:	8d 93       	st	X+, r24
    372e:	e2 17       	cp	r30, r18
    3730:	f3 07       	cpc	r31, r19
    3732:	d9 f7       	brne	.-10     	; 0x372a <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    3734:	eb 81       	ldd	r30, Y+3	; 0x03
    3736:	fc 81       	ldd	r31, Y+4	; 0x04
    3738:	84 81       	ldd	r24, Z+4	; 0x04
    373a:	8f 7b       	andi	r24, 0xBF	; 191
    373c:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    373e:	ab 81       	ldd	r26, Y+3	; 0x03
    3740:	bc 81       	ldd	r27, Y+4	; 0x04
    3742:	15 96       	adiw	r26, 0x05	; 5
    3744:	8c 91       	ld	r24, X
    3746:	15 97       	sbiw	r26, 0x05	; 5
    3748:	8a 0d       	add	r24, r10
    374a:	15 96       	adiw	r26, 0x05	; 5
    374c:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    374e:	b5 01       	movw	r22, r10
    3750:	76 2f       	mov	r23, r22
    3752:	66 27       	eor	r22, r22
    3754:	77 0f       	add	r23, r23
    3756:	64 c0       	rjmp	.+200    	; 0x3820 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3758:	eb 81       	ldd	r30, Y+3	; 0x03
    375a:	fc 81       	ldd	r31, Y+4	; 0x04
    375c:	86 89       	ldd	r24, Z+22	; 0x16
    375e:	97 89       	ldd	r25, Z+23	; 0x17
    3760:	a0 8d       	ldd	r26, Z+24	; 0x18
    3762:	b1 8d       	ldd	r27, Z+25	; 0x19
    3764:	8c 15       	cp	r24, r12
    3766:	9d 05       	cpc	r25, r13
    3768:	ae 05       	cpc	r26, r14
    376a:	bf 05       	cpc	r27, r15
    376c:	01 f1       	breq	.+64     	; 0x37ae <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    376e:	26 81       	ldd	r18, Z+6	; 0x06
    3770:	37 81       	ldd	r19, Z+7	; 0x07
    3772:	40 85       	ldd	r20, Z+8	; 0x08
    3774:	51 85       	ldd	r21, Z+9	; 0x09
    3776:	82 85       	ldd	r24, Z+10	; 0x0a
    3778:	93 85       	ldd	r25, Z+11	; 0x0b
    377a:	a4 85       	ldd	r26, Z+12	; 0x0c
    377c:	b5 85       	ldd	r27, Z+13	; 0x0d
    377e:	28 17       	cp	r18, r24
    3780:	39 07       	cpc	r19, r25
    3782:	4a 07       	cpc	r20, r26
    3784:	5b 07       	cpc	r21, r27
    3786:	98 f4       	brcc	.+38     	; 0x37ae <f_write+0x364>
    3788:	d8 01       	movw	r26, r16
    378a:	11 96       	adiw	r26, 0x01	; 1
    378c:	8c 91       	ld	r24, X
    378e:	b1 01       	movw	r22, r2
    3790:	a7 01       	movw	r20, r14
    3792:	96 01       	movw	r18, r12
    3794:	01 e0       	ldi	r16, 0x01	; 1
    3796:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    379a:	88 23       	and	r24, r24
    379c:	41 f0       	breq	.+16     	; 0x37ae <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    379e:	eb 81       	ldd	r30, Y+3	; 0x03
    37a0:	fc 81       	ldd	r31, Y+4	; 0x04
    37a2:	84 81       	ldd	r24, Z+4	; 0x04
    37a4:	80 68       	ori	r24, 0x80	; 128
    37a6:	84 83       	std	Z+4, r24	; 0x04
    37a8:	66 24       	eor	r6, r6
    37aa:	63 94       	inc	r6
    37ac:	7b c0       	rjmp	.+246    	; 0x38a4 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    37ae:	ab 81       	ldd	r26, Y+3	; 0x03
    37b0:	bc 81       	ldd	r27, Y+4	; 0x04
    37b2:	56 96       	adiw	r26, 0x16	; 22
    37b4:	cd 92       	st	X+, r12
    37b6:	dd 92       	st	X+, r13
    37b8:	ed 92       	st	X+, r14
    37ba:	fc 92       	st	X, r15
    37bc:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    37be:	15 96       	adiw	r26, 0x05	; 5
    37c0:	8c 91       	ld	r24, X
    37c2:	15 97       	sbiw	r26, 0x05	; 5
    37c4:	8f 5f       	subi	r24, 0xFF	; 255
    37c6:	15 96       	adiw	r26, 0x05	; 5
    37c8:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    37ca:	eb 81       	ldd	r30, Y+3	; 0x03
    37cc:	fc 81       	ldd	r31, Y+4	; 0x04
    37ce:	26 81       	ldd	r18, Z+6	; 0x06
    37d0:	37 81       	ldd	r19, Z+7	; 0x07
    37d2:	40 85       	ldd	r20, Z+8	; 0x08
    37d4:	51 85       	ldd	r21, Z+9	; 0x09
    37d6:	c9 01       	movw	r24, r18
    37d8:	91 70       	andi	r25, 0x01	; 1
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	72 e0       	ldi	r23, 0x02	; 2
    37de:	68 1b       	sub	r22, r24
    37e0:	79 0b       	sbc	r23, r25
    37e2:	cb 01       	movw	r24, r22
    37e4:	b4 01       	movw	r22, r8
    37e6:	88 15       	cp	r24, r8
    37e8:	99 05       	cpc	r25, r9
    37ea:	08 f4       	brcc	.+2      	; 0x37ee <f_write+0x3a4>
    37ec:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    37ee:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    37f0:	f9 01       	movw	r30, r18
    37f2:	f1 70       	andi	r31, 0x01	; 1
    37f4:	b0 96       	adiw	r30, 0x20	; 32
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	9c 81       	ldd	r25, Y+4	; 0x04
    37fa:	e8 0f       	add	r30, r24
    37fc:	f9 1f       	adc	r31, r25
    37fe:	92 01       	movw	r18, r4
    3800:	04 c0       	rjmp	.+8      	; 0x380a <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3802:	d9 01       	movw	r26, r18
    3804:	8d 91       	ld	r24, X+
    3806:	9d 01       	movw	r18, r26
    3808:	81 93       	st	Z+, r24
    380a:	01 50       	subi	r16, 0x01	; 1
    380c:	10 40       	sbci	r17, 0x00	; 0
    380e:	bf ef       	ldi	r27, 0xFF	; 255
    3810:	0f 3f       	cpi	r16, 0xFF	; 255
    3812:	1b 07       	cpc	r17, r27
    3814:	b1 f7       	brne	.-20     	; 0x3802 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    3816:	eb 81       	ldd	r30, Y+3	; 0x03
    3818:	fc 81       	ldd	r31, Y+4	; 0x04
    381a:	84 81       	ldd	r24, Z+4	; 0x04
    381c:	80 64       	ori	r24, 0x40	; 64
    381e:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3820:	46 0e       	add	r4, r22
    3822:	57 1e       	adc	r5, r23
    3824:	cb 01       	movw	r24, r22
    3826:	a0 e0       	ldi	r26, 0x00	; 0
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	eb 81       	ldd	r30, Y+3	; 0x03
    382c:	fc 81       	ldd	r31, Y+4	; 0x04
    382e:	26 81       	ldd	r18, Z+6	; 0x06
    3830:	37 81       	ldd	r19, Z+7	; 0x07
    3832:	40 85       	ldd	r20, Z+8	; 0x08
    3834:	51 85       	ldd	r21, Z+9	; 0x09
    3836:	28 0f       	add	r18, r24
    3838:	39 1f       	adc	r19, r25
    383a:	4a 1f       	adc	r20, r26
    383c:	5b 1f       	adc	r21, r27
    383e:	26 83       	std	Z+6, r18	; 0x06
    3840:	37 83       	std	Z+7, r19	; 0x07
    3842:	40 87       	std	Z+8, r20	; 0x08
    3844:	51 87       	std	Z+9, r21	; 0x09
    3846:	e9 81       	ldd	r30, Y+1	; 0x01
    3848:	fa 81       	ldd	r31, Y+2	; 0x02
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
    384e:	86 0f       	add	r24, r22
    3850:	97 1f       	adc	r25, r23
    3852:	80 83       	st	Z, r24
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	86 1a       	sub	r8, r22
    3858:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    385a:	81 14       	cp	r8, r1
    385c:	91 04       	cpc	r9, r1
    385e:	09 f0       	breq	.+2      	; 0x3862 <f_write+0x418>
    3860:	4a ce       	rjmp	.-876    	; 0x34f6 <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3862:	ab 81       	ldd	r26, Y+3	; 0x03
    3864:	bc 81       	ldd	r27, Y+4	; 0x04
    3866:	16 96       	adiw	r26, 0x06	; 6
    3868:	2d 91       	ld	r18, X+
    386a:	3d 91       	ld	r19, X+
    386c:	4d 91       	ld	r20, X+
    386e:	5c 91       	ld	r21, X
    3870:	19 97       	sbiw	r26, 0x09	; 9
    3872:	1a 96       	adiw	r26, 0x0a	; 10
    3874:	8d 91       	ld	r24, X+
    3876:	9d 91       	ld	r25, X+
    3878:	0d 90       	ld	r0, X+
    387a:	bc 91       	ld	r27, X
    387c:	a0 2d       	mov	r26, r0
    387e:	82 17       	cp	r24, r18
    3880:	93 07       	cpc	r25, r19
    3882:	a4 07       	cpc	r26, r20
    3884:	b5 07       	cpc	r27, r21
    3886:	30 f4       	brcc	.+12     	; 0x3894 <f_write+0x44a>
    3888:	eb 81       	ldd	r30, Y+3	; 0x03
    388a:	fc 81       	ldd	r31, Y+4	; 0x04
    388c:	22 87       	std	Z+10, r18	; 0x0a
    388e:	33 87       	std	Z+11, r19	; 0x0b
    3890:	44 87       	std	Z+12, r20	; 0x0c
    3892:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    3894:	ab 81       	ldd	r26, Y+3	; 0x03
    3896:	bc 81       	ldd	r27, Y+4	; 0x04
    3898:	14 96       	adiw	r26, 0x04	; 4
    389a:	8c 91       	ld	r24, X
    389c:	14 97       	sbiw	r26, 0x04	; 4
    389e:	80 62       	ori	r24, 0x20	; 32
    38a0:	14 96       	adiw	r26, 0x04	; 4
    38a2:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    38a4:	86 2d       	mov	r24, r6
    38a6:	24 96       	adiw	r28, 0x04	; 4
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	ff 90       	pop	r15
    38b6:	ef 90       	pop	r14
    38b8:	df 90       	pop	r13
    38ba:	cf 90       	pop	r12
    38bc:	bf 90       	pop	r11
    38be:	af 90       	pop	r10
    38c0:	9f 90       	pop	r9
    38c2:	8f 90       	pop	r8
    38c4:	7f 90       	pop	r7
    38c6:	6f 90       	pop	r6
    38c8:	5f 90       	pop	r5
    38ca:	4f 90       	pop	r4
    38cc:	3f 90       	pop	r3
    38ce:	2f 90       	pop	r2
    38d0:	08 95       	ret

000038d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    38d2:	0f 93       	push	r16
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    38da:	6a 81       	ldd	r22, Y+2	; 0x02
    38dc:	7b 81       	ldd	r23, Y+3	; 0x03
    38de:	88 81       	ld	r24, Y
    38e0:	99 81       	ldd	r25, Y+1	; 0x01
    38e2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <validate>
    38e6:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    38e8:	88 23       	and	r24, r24
    38ea:	09 f0       	breq	.+2      	; 0x38ee <f_sync+0x1c>
    38ec:	65 c0       	rjmp	.+202    	; 0x39b8 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    38ee:	8c 81       	ldd	r24, Y+4	; 0x04
    38f0:	85 ff       	sbrs	r24, 5
    38f2:	62 c0       	rjmp	.+196    	; 0x39b8 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    38f4:	86 ff       	sbrs	r24, 6
    38f6:	14 c0       	rjmp	.+40     	; 0x3920 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    38f8:	e8 81       	ld	r30, Y
    38fa:	f9 81       	ldd	r31, Y+1	; 0x01
    38fc:	be 01       	movw	r22, r28
    38fe:	60 5e       	subi	r22, 0xE0	; 224
    3900:	7f 4f       	sbci	r23, 0xFF	; 255
    3902:	2e 89       	ldd	r18, Y+22	; 0x16
    3904:	3f 89       	ldd	r19, Y+23	; 0x17
    3906:	48 8d       	ldd	r20, Y+24	; 0x18
    3908:	59 8d       	ldd	r21, Y+25	; 0x19
    390a:	81 81       	ldd	r24, Z+1	; 0x01
    390c:	01 e0       	ldi	r16, 0x01	; 1
    390e:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    3912:	88 23       	and	r24, r24
    3914:	11 f0       	breq	.+4      	; 0x391a <f_sync+0x48>
    3916:	91 e0       	ldi	r25, 0x01	; 1
    3918:	4f c0       	rjmp	.+158    	; 0x39b8 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    391a:	8c 81       	ldd	r24, Y+4	; 0x04
    391c:	8f 7b       	andi	r24, 0xBF	; 191
    391e:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3920:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3922:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3924:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3926:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3928:	88 81       	ld	r24, Y
    392a:	99 81       	ldd	r25, Y+1	; 0x01
    392c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    3930:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3932:	88 23       	and	r24, r24
    3934:	09 f0       	breq	.+2      	; 0x3938 <f_sync+0x66>
    3936:	40 c0       	rjmp	.+128    	; 0x39b8 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3938:	ee 8d       	ldd	r30, Y+30	; 0x1e
    393a:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    393c:	83 85       	ldd	r24, Z+11	; 0x0b
    393e:	80 62       	ori	r24, 0x20	; 32
    3940:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3942:	8a 85       	ldd	r24, Y+10	; 0x0a
    3944:	84 8f       	std	Z+28, r24	; 0x1c
    3946:	8b 85       	ldd	r24, Y+11	; 0x0b
    3948:	85 8f       	std	Z+29, r24	; 0x1d
    394a:	8a 85       	ldd	r24, Y+10	; 0x0a
    394c:	9b 85       	ldd	r25, Y+11	; 0x0b
    394e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3950:	bd 85       	ldd	r27, Y+13	; 0x0d
    3952:	cd 01       	movw	r24, r26
    3954:	aa 27       	eor	r26, r26
    3956:	bb 27       	eor	r27, r27
    3958:	86 8f       	std	Z+30, r24	; 0x1e
    395a:	8a 85       	ldd	r24, Y+10	; 0x0a
    395c:	9b 85       	ldd	r25, Y+11	; 0x0b
    395e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3960:	bd 85       	ldd	r27, Y+13	; 0x0d
    3962:	8b 2f       	mov	r24, r27
    3964:	99 27       	eor	r25, r25
    3966:	aa 27       	eor	r26, r26
    3968:	bb 27       	eor	r27, r27
    396a:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    396c:	8e 85       	ldd	r24, Y+14	; 0x0e
    396e:	82 8f       	std	Z+26, r24	; 0x1a
    3970:	8f 85       	ldd	r24, Y+15	; 0x0f
    3972:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    3974:	8e 85       	ldd	r24, Y+14	; 0x0e
    3976:	9f 85       	ldd	r25, Y+15	; 0x0f
    3978:	a8 89       	ldd	r26, Y+16	; 0x10
    397a:	b9 89       	ldd	r27, Y+17	; 0x11
    397c:	cd 01       	movw	r24, r26
    397e:	aa 27       	eor	r26, r26
    3980:	bb 27       	eor	r27, r27
    3982:	84 8b       	std	Z+20, r24	; 0x14
    3984:	8e 85       	ldd	r24, Y+14	; 0x0e
    3986:	9f 85       	ldd	r25, Y+15	; 0x0f
    3988:	a8 89       	ldd	r26, Y+16	; 0x10
    398a:	b9 89       	ldd	r27, Y+17	; 0x11
    398c:	cd 01       	movw	r24, r26
    398e:	aa 27       	eor	r26, r26
    3990:	bb 27       	eor	r27, r27
    3992:	89 2f       	mov	r24, r25
    3994:	99 27       	eor	r25, r25
    3996:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    3998:	16 8a       	std	Z+22, r1	; 0x16
    399a:	17 8a       	std	Z+23, r1	; 0x17
    399c:	10 8e       	std	Z+24, r1	; 0x18
    399e:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    39a0:	8c 81       	ldd	r24, Y+4	; 0x04
    39a2:	8f 7d       	andi	r24, 0xDF	; 223
    39a4:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    39a6:	e8 81       	ld	r30, Y
    39a8:	f9 81       	ldd	r31, Y+1	; 0x01
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    39ae:	88 81       	ld	r24, Y
    39b0:	99 81       	ldd	r25, Y+1	; 0x01
    39b2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <sync>
    39b6:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    39b8:	89 2f       	mov	r24, r25
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	0f 91       	pop	r16
    39c0:	08 95       	ret

000039c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    39c8:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    39cc:	88 23       	and	r24, r24
    39ce:	11 f4       	brne	.+4      	; 0x39d4 <f_close+0x12>
    39d0:	18 82       	st	Y, r1
    39d2:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	08 95       	ret

000039da <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    39da:	2f 92       	push	r2
    39dc:	3f 92       	push	r3
    39de:	4f 92       	push	r4
    39e0:	5f 92       	push	r5
    39e2:	6f 92       	push	r6
    39e4:	7f 92       	push	r7
    39e6:	8f 92       	push	r8
    39e8:	9f 92       	push	r9
    39ea:	af 92       	push	r10
    39ec:	bf 92       	push	r11
    39ee:	cf 92       	push	r12
    39f0:	df 92       	push	r13
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	28 97       	sbiw	r28, 0x08	; 8
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	8f 83       	std	Y+7, r24	; 0x07
    3a06:	98 87       	std	Y+8, r25	; 0x08
    3a08:	3a 01       	movw	r6, r20
    3a0a:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	12 96       	adiw	r26, 0x02	; 2
    3a10:	6d 91       	ld	r22, X+
    3a12:	7c 91       	ld	r23, X
    3a14:	13 97       	sbiw	r26, 0x03	; 3
    3a16:	8d 91       	ld	r24, X+
    3a18:	9c 91       	ld	r25, X
    3a1a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <validate>
    3a1e:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3a20:	88 23       	and	r24, r24
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <f_lseek+0x4c>
    3a24:	f3 c1       	rjmp	.+998    	; 0x3e0c <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3a26:	ef 81       	ldd	r30, Y+7	; 0x07
    3a28:	f8 85       	ldd	r31, Y+8	; 0x08
    3a2a:	84 81       	ldd	r24, Z+4	; 0x04
    3a2c:	87 fd       	sbrc	r24, 7
    3a2e:	98 c0       	rjmp	.+304    	; 0x3b60 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3a30:	af 81       	ldd	r26, Y+7	; 0x07
    3a32:	b8 85       	ldd	r27, Y+8	; 0x08
    3a34:	1a 96       	adiw	r26, 0x0a	; 10
    3a36:	ad 90       	ld	r10, X+
    3a38:	bd 90       	ld	r11, X+
    3a3a:	cd 90       	ld	r12, X+
    3a3c:	dc 90       	ld	r13, X
    3a3e:	1d 97       	sbiw	r26, 0x0d	; 13
    3a40:	a6 14       	cp	r10, r6
    3a42:	b7 04       	cpc	r11, r7
    3a44:	c8 04       	cpc	r12, r8
    3a46:	d9 04       	cpc	r13, r9
    3a48:	10 f4       	brcc	.+4      	; 0x3a4e <f_lseek+0x74>
    3a4a:	81 ff       	sbrs	r24, 1
    3a4c:	02 c0       	rjmp	.+4      	; 0x3a52 <f_lseek+0x78>
    3a4e:	64 01       	movw	r12, r8
    3a50:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3a52:	ef 81       	ldd	r30, Y+7	; 0x07
    3a54:	f8 85       	ldd	r31, Y+8	; 0x08
    3a56:	26 81       	ldd	r18, Z+6	; 0x06
    3a58:	37 81       	ldd	r19, Z+7	; 0x07
    3a5a:	40 85       	ldd	r20, Z+8	; 0x08
    3a5c:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3a5e:	16 82       	std	Z+6, r1	; 0x06
    3a60:	17 82       	std	Z+7, r1	; 0x07
    3a62:	10 86       	std	Z+8, r1	; 0x08
    3a64:	11 86       	std	Z+9, r1	; 0x09
    3a66:	8f ef       	ldi	r24, 0xFF	; 255
    3a68:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3a6a:	a1 14       	cp	r10, r1
    3a6c:	b1 04       	cpc	r11, r1
    3a6e:	c1 04       	cpc	r12, r1
    3a70:	d1 04       	cpc	r13, r1
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <f_lseek+0x9c>
    3a74:	5f c1       	rjmp	.+702    	; 0x3d34 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3a76:	01 90       	ld	r0, Z+
    3a78:	f0 81       	ld	r31, Z
    3a7a:	e0 2d       	mov	r30, r0
    3a7c:	e9 83       	std	Y+1, r30	; 0x01
    3a7e:	fa 83       	std	Y+2, r31	; 0x02
    3a80:	82 81       	ldd	r24, Z+2	; 0x02
    3a82:	68 2e       	mov	r6, r24
    3a84:	77 24       	eor	r7, r7
    3a86:	88 24       	eor	r8, r8
    3a88:	99 24       	eor	r9, r9
    3a8a:	89 e0       	ldi	r24, 0x09	; 9
    3a8c:	66 0c       	add	r6, r6
    3a8e:	77 1c       	adc	r7, r7
    3a90:	88 1c       	adc	r8, r8
    3a92:	99 1c       	adc	r9, r9
    3a94:	8a 95       	dec	r24
    3a96:	d1 f7       	brne	.-12     	; 0x3a8c <f_lseek+0xb2>
		if (ifptr > 0 &&
    3a98:	21 15       	cp	r18, r1
    3a9a:	31 05       	cpc	r19, r1
    3a9c:	41 05       	cpc	r20, r1
    3a9e:	51 05       	cpc	r21, r1
    3aa0:	f1 f1       	breq	.+124    	; 0x3b1e <f_lseek+0x144>
    3aa2:	19 01       	movw	r2, r18
    3aa4:	2a 01       	movw	r4, r20
    3aa6:	08 94       	sec
    3aa8:	21 08       	sbc	r2, r1
    3aaa:	31 08       	sbc	r3, r1
    3aac:	41 08       	sbc	r4, r1
    3aae:	51 08       	sbc	r5, r1
    3ab0:	c6 01       	movw	r24, r12
    3ab2:	b5 01       	movw	r22, r10
    3ab4:	61 50       	subi	r22, 0x01	; 1
    3ab6:	70 40       	sbci	r23, 0x00	; 0
    3ab8:	80 40       	sbci	r24, 0x00	; 0
    3aba:	90 40       	sbci	r25, 0x00	; 0
    3abc:	a4 01       	movw	r20, r8
    3abe:	93 01       	movw	r18, r6
    3ac0:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    3ac4:	2b 83       	std	Y+3, r18	; 0x03
    3ac6:	3c 83       	std	Y+4, r19	; 0x04
    3ac8:	4d 83       	std	Y+5, r20	; 0x05
    3aca:	5e 83       	std	Y+6, r21	; 0x06
    3acc:	c2 01       	movw	r24, r4
    3ace:	b1 01       	movw	r22, r2
    3ad0:	a4 01       	movw	r20, r8
    3ad2:	93 01       	movw	r18, r6
    3ad4:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    3ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ada:	9c 81       	ldd	r25, Y+4	; 0x04
    3adc:	ad 81       	ldd	r26, Y+5	; 0x05
    3ade:	be 81       	ldd	r27, Y+6	; 0x06
    3ae0:	82 17       	cp	r24, r18
    3ae2:	93 07       	cpc	r25, r19
    3ae4:	a4 07       	cpc	r26, r20
    3ae6:	b5 07       	cpc	r27, r21
    3ae8:	d0 f0       	brcs	.+52     	; 0x3b1e <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3aea:	88 27       	eor	r24, r24
    3aec:	99 27       	eor	r25, r25
    3aee:	dc 01       	movw	r26, r24
    3af0:	86 19       	sub	r24, r6
    3af2:	97 09       	sbc	r25, r7
    3af4:	a8 09       	sbc	r26, r8
    3af6:	b9 09       	sbc	r27, r9
    3af8:	82 21       	and	r24, r2
    3afa:	93 21       	and	r25, r3
    3afc:	a4 21       	and	r26, r4
    3afe:	b5 21       	and	r27, r5
    3b00:	ef 81       	ldd	r30, Y+7	; 0x07
    3b02:	f8 85       	ldd	r31, Y+8	; 0x08
    3b04:	86 83       	std	Z+6, r24	; 0x06
    3b06:	97 83       	std	Z+7, r25	; 0x07
    3b08:	a0 87       	std	Z+8, r26	; 0x08
    3b0a:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3b0c:	a8 1a       	sub	r10, r24
    3b0e:	b9 0a       	sbc	r11, r25
    3b10:	ca 0a       	sbc	r12, r26
    3b12:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3b14:	42 89       	ldd	r20, Z+18	; 0x12
    3b16:	53 89       	ldd	r21, Z+19	; 0x13
    3b18:	64 89       	ldd	r22, Z+20	; 0x14
    3b1a:	75 89       	ldd	r23, Z+21	; 0x15
    3b1c:	39 c0       	rjmp	.+114    	; 0x3b90 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3b1e:	af 81       	ldd	r26, Y+7	; 0x07
    3b20:	b8 85       	ldd	r27, Y+8	; 0x08
    3b22:	1e 96       	adiw	r26, 0x0e	; 14
    3b24:	4d 91       	ld	r20, X+
    3b26:	5d 91       	ld	r21, X+
    3b28:	6d 91       	ld	r22, X+
    3b2a:	7c 91       	ld	r23, X
    3b2c:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3b2e:	41 15       	cp	r20, r1
    3b30:	51 05       	cpc	r21, r1
    3b32:	61 05       	cpc	r22, r1
    3b34:	71 05       	cpc	r23, r1
    3b36:	21 f5       	brne	.+72     	; 0x3b80 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	50 e0       	ldi	r21, 0x00	; 0
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	70 e0       	ldi	r23, 0x00	; 0
    3b44:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <create_chain>
    3b48:	ab 01       	movw	r20, r22
    3b4a:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3b4c:	41 30       	cpi	r20, 0x01	; 1
    3b4e:	51 05       	cpc	r21, r1
    3b50:	61 05       	cpc	r22, r1
    3b52:	71 05       	cpc	r23, r1
    3b54:	39 f4       	brne	.+14     	; 0x3b64 <f_lseek+0x18a>
    3b56:	ef 81       	ldd	r30, Y+7	; 0x07
    3b58:	f8 85       	ldd	r31, Y+8	; 0x08
    3b5a:	84 81       	ldd	r24, Z+4	; 0x04
    3b5c:	80 68       	ori	r24, 0x80	; 128
    3b5e:	84 83       	std	Z+4, r24	; 0x04
    3b60:	12 e0       	ldi	r17, 0x02	; 2
    3b62:	54 c1       	rjmp	.+680    	; 0x3e0c <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b64:	4f 3f       	cpi	r20, 0xFF	; 255
    3b66:	ff ef       	ldi	r31, 0xFF	; 255
    3b68:	5f 07       	cpc	r21, r31
    3b6a:	ff ef       	ldi	r31, 0xFF	; 255
    3b6c:	6f 07       	cpc	r22, r31
    3b6e:	ff ef       	ldi	r31, 0xFF	; 255
    3b70:	7f 07       	cpc	r23, r31
    3b72:	b1 f1       	breq	.+108    	; 0x3be0 <f_lseek+0x206>
				fp->org_clust = clst;
    3b74:	ef 81       	ldd	r30, Y+7	; 0x07
    3b76:	f8 85       	ldd	r31, Y+8	; 0x08
    3b78:	46 87       	std	Z+14, r20	; 0x0e
    3b7a:	57 87       	std	Z+15, r21	; 0x0f
    3b7c:	60 8b       	std	Z+16, r22	; 0x10
    3b7e:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3b80:	af 81       	ldd	r26, Y+7	; 0x07
    3b82:	b8 85       	ldd	r27, Y+8	; 0x08
    3b84:	52 96       	adiw	r26, 0x12	; 18
    3b86:	4d 93       	st	X+, r20
    3b88:	5d 93       	st	X+, r21
    3b8a:	6d 93       	st	X+, r22
    3b8c:	7c 93       	st	X, r23
    3b8e:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3b90:	41 15       	cp	r20, r1
    3b92:	51 05       	cpc	r21, r1
    3b94:	61 05       	cpc	r22, r1
    3b96:	71 05       	cpc	r23, r1
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <f_lseek+0x1c2>
    3b9a:	58 c0       	rjmp	.+176    	; 0x3c4c <f_lseek+0x272>
    3b9c:	cb c0       	rjmp	.+406    	; 0x3d34 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3b9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3ba0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ba2:	84 81       	ldd	r24, Z+4	; 0x04
    3ba4:	20 81       	ld	r18, Z
    3ba6:	31 81       	ldd	r19, Z+1	; 0x01
    3ba8:	81 ff       	sbrs	r24, 1
    3baa:	0d c0       	rjmp	.+26     	; 0x3bc6 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3bac:	c9 01       	movw	r24, r18
    3bae:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <create_chain>
    3bb2:	ab 01       	movw	r20, r22
    3bb4:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3bb6:	41 15       	cp	r20, r1
    3bb8:	51 05       	cpc	r21, r1
    3bba:	61 05       	cpc	r22, r1
    3bbc:	71 05       	cpc	r23, r1
    3bbe:	41 f4       	brne	.+16     	; 0x3bd0 <f_lseek+0x1f6>
    3bc0:	64 01       	movw	r12, r8
    3bc2:	53 01       	movw	r10, r6
    3bc4:	49 c0       	rjmp	.+146    	; 0x3c58 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3bc6:	c9 01       	movw	r24, r18
    3bc8:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    3bcc:	ab 01       	movw	r20, r22
    3bce:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bd0:	4f 3f       	cpi	r20, 0xFF	; 255
    3bd2:	ff ef       	ldi	r31, 0xFF	; 255
    3bd4:	5f 07       	cpc	r21, r31
    3bd6:	ff ef       	ldi	r31, 0xFF	; 255
    3bd8:	6f 07       	cpc	r22, r31
    3bda:	ff ef       	ldi	r31, 0xFF	; 255
    3bdc:	7f 07       	cpc	r23, r31
    3bde:	49 f4       	brne	.+18     	; 0x3bf2 <f_lseek+0x218>
    3be0:	af 81       	ldd	r26, Y+7	; 0x07
    3be2:	b8 85       	ldd	r27, Y+8	; 0x08
    3be4:	14 96       	adiw	r26, 0x04	; 4
    3be6:	8c 91       	ld	r24, X
    3be8:	14 97       	sbiw	r26, 0x04	; 4
    3bea:	80 68       	ori	r24, 0x80	; 128
    3bec:	14 96       	adiw	r26, 0x04	; 4
    3bee:	8c 93       	st	X, r24
    3bf0:	ed c0       	rjmp	.+474    	; 0x3dcc <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3bf2:	42 30       	cpi	r20, 0x02	; 2
    3bf4:	51 05       	cpc	r21, r1
    3bf6:	61 05       	cpc	r22, r1
    3bf8:	71 05       	cpc	r23, r1
    3bfa:	08 f4       	brcc	.+2      	; 0x3bfe <f_lseek+0x224>
    3bfc:	ac cf       	rjmp	.-168    	; 0x3b56 <f_lseek+0x17c>
    3bfe:	af 81       	ldd	r26, Y+7	; 0x07
    3c00:	b8 85       	ldd	r27, Y+8	; 0x08
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c08:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c0a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c0c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c0e:	48 17       	cp	r20, r24
    3c10:	59 07       	cpc	r21, r25
    3c12:	6a 07       	cpc	r22, r26
    3c14:	7b 07       	cpc	r23, r27
    3c16:	08 f0       	brcs	.+2      	; 0x3c1a <f_lseek+0x240>
    3c18:	9e cf       	rjmp	.-196    	; 0x3b56 <f_lseek+0x17c>
				fp->curr_clust = clst;
    3c1a:	af 81       	ldd	r26, Y+7	; 0x07
    3c1c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c1e:	52 96       	adiw	r26, 0x12	; 18
    3c20:	4d 93       	st	X+, r20
    3c22:	5d 93       	st	X+, r21
    3c24:	6d 93       	st	X+, r22
    3c26:	7c 93       	st	X, r23
    3c28:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3c2a:	fd 01       	movw	r30, r26
    3c2c:	86 81       	ldd	r24, Z+6	; 0x06
    3c2e:	97 81       	ldd	r25, Z+7	; 0x07
    3c30:	a0 85       	ldd	r26, Z+8	; 0x08
    3c32:	b1 85       	ldd	r27, Z+9	; 0x09
    3c34:	86 0d       	add	r24, r6
    3c36:	97 1d       	adc	r25, r7
    3c38:	a8 1d       	adc	r26, r8
    3c3a:	b9 1d       	adc	r27, r9
    3c3c:	86 83       	std	Z+6, r24	; 0x06
    3c3e:	97 83       	std	Z+7, r25	; 0x07
    3c40:	a0 87       	std	Z+8, r26	; 0x08
    3c42:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3c44:	a6 18       	sub	r10, r6
    3c46:	b7 08       	sbc	r11, r7
    3c48:	c8 08       	sbc	r12, r8
    3c4a:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3c4c:	6a 14       	cp	r6, r10
    3c4e:	7b 04       	cpc	r7, r11
    3c50:	8c 04       	cpc	r8, r12
    3c52:	9d 04       	cpc	r9, r13
    3c54:	08 f4       	brcc	.+2      	; 0x3c58 <f_lseek+0x27e>
    3c56:	a3 cf       	rjmp	.-186    	; 0x3b9e <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3c58:	ef 81       	ldd	r30, Y+7	; 0x07
    3c5a:	f8 85       	ldd	r31, Y+8	; 0x08
    3c5c:	86 81       	ldd	r24, Z+6	; 0x06
    3c5e:	97 81       	ldd	r25, Z+7	; 0x07
    3c60:	a0 85       	ldd	r26, Z+8	; 0x08
    3c62:	b1 85       	ldd	r27, Z+9	; 0x09
    3c64:	8a 0d       	add	r24, r10
    3c66:	9b 1d       	adc	r25, r11
    3c68:	ac 1d       	adc	r26, r12
    3c6a:	bd 1d       	adc	r27, r13
    3c6c:	86 83       	std	Z+6, r24	; 0x06
    3c6e:	97 83       	std	Z+7, r25	; 0x07
    3c70:	a0 87       	std	Z+8, r26	; 0x08
    3c72:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3c74:	d6 01       	movw	r26, r12
    3c76:	c5 01       	movw	r24, r10
    3c78:	09 e0       	ldi	r16, 0x09	; 9
    3c7a:	b6 95       	lsr	r27
    3c7c:	a7 95       	ror	r26
    3c7e:	97 95       	ror	r25
    3c80:	87 95       	ror	r24
    3c82:	0a 95       	dec	r16
    3c84:	d1 f7       	brne	.-12     	; 0x3c7a <f_lseek+0x2a0>
    3c86:	08 2f       	mov	r16, r24
    3c88:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3c8a:	8f ef       	ldi	r24, 0xFF	; 255
    3c8c:	91 e0       	ldi	r25, 0x01	; 1
    3c8e:	a0 e0       	ldi	r26, 0x00	; 0
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	a8 22       	and	r10, r24
    3c94:	b9 22       	and	r11, r25
    3c96:	ca 22       	and	r12, r26
    3c98:	db 22       	and	r13, r27
    3c9a:	a1 14       	cp	r10, r1
    3c9c:	b1 04       	cpc	r11, r1
    3c9e:	c1 04       	cpc	r12, r1
    3ca0:	d1 04       	cpc	r13, r1
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <f_lseek+0x2cc>
    3ca4:	47 c0       	rjmp	.+142    	; 0x3d34 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3ca6:	80 80       	ld	r8, Z
    3ca8:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3caa:	3e ef       	ldi	r19, 0xFE	; 254
    3cac:	a3 2e       	mov	r10, r19
    3cae:	3f ef       	ldi	r19, 0xFF	; 255
    3cb0:	b3 2e       	mov	r11, r19
    3cb2:	3f ef       	ldi	r19, 0xFF	; 255
    3cb4:	c3 2e       	mov	r12, r19
    3cb6:	3f ef       	ldi	r19, 0xFF	; 255
    3cb8:	d3 2e       	mov	r13, r19
    3cba:	a4 0e       	add	r10, r20
    3cbc:	b5 1e       	adc	r11, r21
    3cbe:	c6 1e       	adc	r12, r22
    3cc0:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3cc2:	f4 01       	movw	r30, r8
    3cc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cc6:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cc8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3cca:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3ccc:	02 97       	sbiw	r24, 0x02	; 2
    3cce:	a1 09       	sbc	r26, r1
    3cd0:	b1 09       	sbc	r27, r1
    3cd2:	a8 16       	cp	r10, r24
    3cd4:	b9 06       	cpc	r11, r25
    3cd6:	ca 06       	cpc	r12, r26
    3cd8:	db 06       	cpc	r13, r27
    3cda:	c0 f4       	brcc	.+48     	; 0x3d0c <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3cdc:	22 81       	ldd	r18, Z+2	; 0x02
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e0       	ldi	r20, 0x00	; 0
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	c6 01       	movw	r24, r12
    3ce6:	b5 01       	movw	r22, r10
    3ce8:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    3cec:	9b 01       	movw	r18, r22
    3cee:	ac 01       	movw	r20, r24
    3cf0:	f4 01       	movw	r30, r8
    3cf2:	86 a1       	ldd	r24, Z+38	; 0x26
    3cf4:	97 a1       	ldd	r25, Z+39	; 0x27
    3cf6:	a0 a5       	ldd	r26, Z+40	; 0x28
    3cf8:	b1 a5       	ldd	r27, Z+41	; 0x29
    3cfa:	28 0f       	add	r18, r24
    3cfc:	39 1f       	adc	r19, r25
    3cfe:	4a 1f       	adc	r20, r26
    3d00:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3d02:	21 15       	cp	r18, r1
    3d04:	31 05       	cpc	r19, r1
    3d06:	41 05       	cpc	r20, r1
    3d08:	51 05       	cpc	r21, r1
    3d0a:	49 f4       	brne	.+18     	; 0x3d1e <f_lseek+0x344>
    3d0c:	af 81       	ldd	r26, Y+7	; 0x07
    3d0e:	b8 85       	ldd	r27, Y+8	; 0x08
    3d10:	14 96       	adiw	r26, 0x04	; 4
    3d12:	8c 91       	ld	r24, X
    3d14:	14 97       	sbiw	r26, 0x04	; 4
    3d16:	80 68       	ori	r24, 0x80	; 128
    3d18:	14 96       	adiw	r26, 0x04	; 4
    3d1a:	8c 93       	st	X, r24
    3d1c:	21 cf       	rjmp	.-446    	; 0x3b60 <f_lseek+0x186>
				nsect += fp->csect;
    3d1e:	59 01       	movw	r10, r18
    3d20:	6a 01       	movw	r12, r20
    3d22:	a0 0e       	add	r10, r16
    3d24:	b1 1c       	adc	r11, r1
    3d26:	c1 1c       	adc	r12, r1
    3d28:	d1 1c       	adc	r13, r1
				fp->csect++;
    3d2a:	0f 5f       	subi	r16, 0xFF	; 255
    3d2c:	ef 81       	ldd	r30, Y+7	; 0x07
    3d2e:	f8 85       	ldd	r31, Y+8	; 0x08
    3d30:	05 83       	std	Z+5, r16	; 0x05
    3d32:	03 c0       	rjmp	.+6      	; 0x3d3a <f_lseek+0x360>
    3d34:	aa 24       	eor	r10, r10
    3d36:	bb 24       	eor	r11, r11
    3d38:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3d3a:	ef 81       	ldd	r30, Y+7	; 0x07
    3d3c:	f8 85       	ldd	r31, Y+8	; 0x08
    3d3e:	86 81       	ldd	r24, Z+6	; 0x06
    3d40:	97 81       	ldd	r25, Z+7	; 0x07
    3d42:	a0 85       	ldd	r26, Z+8	; 0x08
    3d44:	b1 85       	ldd	r27, Z+9	; 0x09
    3d46:	91 70       	andi	r25, 0x01	; 1
    3d48:	a0 70       	andi	r26, 0x00	; 0
    3d4a:	b0 70       	andi	r27, 0x00	; 0
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	a1 05       	cpc	r26, r1
    3d50:	b1 05       	cpc	r27, r1
    3d52:	09 f4       	brne	.+2      	; 0x3d56 <f_lseek+0x37c>
    3d54:	45 c0       	rjmp	.+138    	; 0x3de0 <f_lseek+0x406>
    3d56:	26 89       	ldd	r18, Z+22	; 0x16
    3d58:	37 89       	ldd	r19, Z+23	; 0x17
    3d5a:	40 8d       	ldd	r20, Z+24	; 0x18
    3d5c:	51 8d       	ldd	r21, Z+25	; 0x19
    3d5e:	a2 16       	cp	r10, r18
    3d60:	b3 06       	cpc	r11, r19
    3d62:	c4 06       	cpc	r12, r20
    3d64:	d5 06       	cpc	r13, r21
    3d66:	e1 f1       	breq	.+120    	; 0x3de0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3d68:	84 81       	ldd	r24, Z+4	; 0x04
    3d6a:	86 ff       	sbrs	r24, 6
    3d6c:	1a c0       	rjmp	.+52     	; 0x3da2 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3d6e:	01 90       	ld	r0, Z+
    3d70:	f0 81       	ld	r31, Z
    3d72:	e0 2d       	mov	r30, r0
    3d74:	6f 81       	ldd	r22, Y+7	; 0x07
    3d76:	78 85       	ldd	r23, Y+8	; 0x08
    3d78:	60 5e       	subi	r22, 0xE0	; 224
    3d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7c:	81 81       	ldd	r24, Z+1	; 0x01
    3d7e:	01 e0       	ldi	r16, 0x01	; 1
    3d80:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    3d84:	af 81       	ldd	r26, Y+7	; 0x07
    3d86:	b8 85       	ldd	r27, Y+8	; 0x08
    3d88:	14 96       	adiw	r26, 0x04	; 4
    3d8a:	9c 91       	ld	r25, X
    3d8c:	14 97       	sbiw	r26, 0x04	; 4
    3d8e:	88 23       	and	r24, r24
    3d90:	21 f0       	breq	.+8      	; 0x3d9a <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3d92:	90 68       	ori	r25, 0x80	; 128
    3d94:	14 96       	adiw	r26, 0x04	; 4
    3d96:	9c 93       	st	X, r25
    3d98:	19 c0       	rjmp	.+50     	; 0x3dcc <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3d9a:	9f 7b       	andi	r25, 0xBF	; 191
    3d9c:	ef 81       	ldd	r30, Y+7	; 0x07
    3d9e:	f8 85       	ldd	r31, Y+8	; 0x08
    3da0:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3da2:	af 81       	ldd	r26, Y+7	; 0x07
    3da4:	b8 85       	ldd	r27, Y+8	; 0x08
    3da6:	ed 91       	ld	r30, X+
    3da8:	fc 91       	ld	r31, X
    3daa:	11 97       	sbiw	r26, 0x01	; 1
    3dac:	bd 01       	movw	r22, r26
    3dae:	60 5e       	subi	r22, 0xE0	; 224
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	81 81       	ldd	r24, Z+1	; 0x01
    3db4:	a6 01       	movw	r20, r12
    3db6:	95 01       	movw	r18, r10
    3db8:	01 e0       	ldi	r16, 0x01	; 1
    3dba:	0e 94 b7 06 	call	0xd6e	; 0xd6e <disk_read>
    3dbe:	88 23       	and	r24, r24
    3dc0:	39 f0       	breq	.+14     	; 0x3dd0 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3dc2:	ef 81       	ldd	r30, Y+7	; 0x07
    3dc4:	f8 85       	ldd	r31, Y+8	; 0x08
    3dc6:	84 81       	ldd	r24, Z+4	; 0x04
    3dc8:	80 68       	ori	r24, 0x80	; 128
    3dca:	84 83       	std	Z+4, r24	; 0x04
    3dcc:	11 e0       	ldi	r17, 0x01	; 1
    3dce:	1e c0       	rjmp	.+60     	; 0x3e0c <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3dd0:	af 81       	ldd	r26, Y+7	; 0x07
    3dd2:	b8 85       	ldd	r27, Y+8	; 0x08
    3dd4:	56 96       	adiw	r26, 0x16	; 22
    3dd6:	ad 92       	st	X+, r10
    3dd8:	bd 92       	st	X+, r11
    3dda:	cd 92       	st	X+, r12
    3ddc:	dc 92       	st	X, r13
    3dde:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3de0:	ef 81       	ldd	r30, Y+7	; 0x07
    3de2:	f8 85       	ldd	r31, Y+8	; 0x08
    3de4:	26 81       	ldd	r18, Z+6	; 0x06
    3de6:	37 81       	ldd	r19, Z+7	; 0x07
    3de8:	40 85       	ldd	r20, Z+8	; 0x08
    3dea:	51 85       	ldd	r21, Z+9	; 0x09
    3dec:	82 85       	ldd	r24, Z+10	; 0x0a
    3dee:	93 85       	ldd	r25, Z+11	; 0x0b
    3df0:	a4 85       	ldd	r26, Z+12	; 0x0c
    3df2:	b5 85       	ldd	r27, Z+13	; 0x0d
    3df4:	82 17       	cp	r24, r18
    3df6:	93 07       	cpc	r25, r19
    3df8:	a4 07       	cpc	r26, r20
    3dfa:	b5 07       	cpc	r27, r21
    3dfc:	38 f4       	brcc	.+14     	; 0x3e0c <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3dfe:	22 87       	std	Z+10, r18	; 0x0a
    3e00:	33 87       	std	Z+11, r19	; 0x0b
    3e02:	44 87       	std	Z+12, r20	; 0x0c
    3e04:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3e06:	84 81       	ldd	r24, Z+4	; 0x04
    3e08:	80 62       	ori	r24, 0x20	; 32
    3e0a:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3e0c:	81 2f       	mov	r24, r17
    3e0e:	28 96       	adiw	r28, 0x08	; 8
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	cf 91       	pop	r28
    3e16:	df 91       	pop	r29
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	bf 90       	pop	r11
    3e22:	af 90       	pop	r10
    3e24:	9f 90       	pop	r9
    3e26:	8f 90       	pop	r8
    3e28:	7f 90       	pop	r7
    3e2a:	6f 90       	pop	r6
    3e2c:	5f 90       	pop	r5
    3e2e:	4f 90       	pop	r4
    3e30:	3f 90       	pop	r3
    3e32:	2f 90       	pop	r2
    3e34:	08 95       	ret

00003e36 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	2e 97       	sbiw	r28, 0x0e	; 14
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	8c 01       	movw	r16, r24
    3e4a:	6d 87       	std	Y+13, r22	; 0x0d
    3e4c:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3e4e:	ce 01       	movw	r24, r28
    3e50:	0d 96       	adiw	r24, 0x0d	; 13
    3e52:	b8 01       	movw	r22, r16
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
	if (res == FR_OK) {
    3e5a:	88 23       	and	r24, r24
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <f_opendir+0x2a>
    3e5e:	46 c0       	rjmp	.+140    	; 0x3eec <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3e60:	ce 01       	movw	r24, r28
    3e62:	01 96       	adiw	r24, 0x01	; 1
    3e64:	d8 01       	movw	r26, r16
    3e66:	54 96       	adiw	r26, 0x14	; 20
    3e68:	8d 93       	st	X+, r24
    3e6a:	9c 93       	st	X, r25
    3e6c:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3e6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e70:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e72:	c8 01       	movw	r24, r16
    3e74:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3e78:	88 23       	and	r24, r24
    3e7a:	a9 f5       	brne	.+106    	; 0x3ee6 <f_opendir+0xb0>
			dir = dj->dir;
    3e7c:	d8 01       	movw	r26, r16
    3e7e:	52 96       	adiw	r26, 0x12	; 18
    3e80:	ed 91       	ld	r30, X+
    3e82:	fc 91       	ld	r31, X
    3e84:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3e86:	30 97       	sbiw	r30, 0x00	; 0
    3e88:	f9 f0       	breq	.+62     	; 0x3ec8 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3e8a:	83 85       	ldd	r24, Z+11	; 0x0b
    3e8c:	84 ff       	sbrs	r24, 4
    3e8e:	2d c0       	rjmp	.+90     	; 0x3eea <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3e90:	35 89       	ldd	r19, Z+21	; 0x15
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	84 89       	ldd	r24, Z+20	; 0x14
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	28 2b       	or	r18, r24
    3e9a:	39 2b       	or	r19, r25
    3e9c:	40 e0       	ldi	r20, 0x00	; 0
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	a9 01       	movw	r20, r18
    3ea2:	33 27       	eor	r19, r19
    3ea4:	22 27       	eor	r18, r18
    3ea6:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	62 8d       	ldd	r22, Z+26	; 0x1a
    3eac:	70 e0       	ldi	r23, 0x00	; 0
    3eae:	86 2b       	or	r24, r22
    3eb0:	97 2b       	or	r25, r23
    3eb2:	a0 e0       	ldi	r26, 0x00	; 0
    3eb4:	b0 e0       	ldi	r27, 0x00	; 0
    3eb6:	28 2b       	or	r18, r24
    3eb8:	39 2b       	or	r19, r25
    3eba:	4a 2b       	or	r20, r26
    3ebc:	5b 2b       	or	r21, r27
    3ebe:	f8 01       	movw	r30, r16
    3ec0:	26 83       	std	Z+6, r18	; 0x06
    3ec2:	37 83       	std	Z+7, r19	; 0x07
    3ec4:	40 87       	std	Z+8, r20	; 0x08
    3ec6:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3ec8:	d8 01       	movw	r26, r16
    3eca:	ed 91       	ld	r30, X+
    3ecc:	fc 91       	ld	r31, X
    3ece:	11 97       	sbiw	r26, 0x01	; 1
    3ed0:	86 81       	ldd	r24, Z+6	; 0x06
    3ed2:	97 81       	ldd	r25, Z+7	; 0x07
    3ed4:	12 96       	adiw	r26, 0x02	; 2
    3ed6:	8d 93       	st	X+, r24
    3ed8:	9c 93       	st	X, r25
    3eda:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3edc:	c8 01       	movw	r24, r16
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	70 e0       	ldi	r23, 0x00	; 0
    3ee2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3ee6:	84 30       	cpi	r24, 0x04	; 4
    3ee8:	09 f4       	brne	.+2      	; 0x3eec <f_opendir+0xb6>
    3eea:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3eec:	2e 96       	adiw	r28, 0x0e	; 14
    3eee:	cd bf       	out	0x3d, r28	; 61
    3ef0:	de bf       	out	0x3e, r29	; 62
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	1f 91       	pop	r17
    3ef8:	0f 91       	pop	r16
    3efa:	08 95       	ret

00003efc <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3efc:	ef 92       	push	r14
    3efe:	ff 92       	push	r15
    3f00:	0f 93       	push	r16
    3f02:	1f 93       	push	r17
    3f04:	df 93       	push	r29
    3f06:	cf 93       	push	r28
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	2c 97       	sbiw	r28, 0x0c	; 12
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	8c 01       	movw	r16, r24
    3f14:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3f16:	fc 01       	movw	r30, r24
    3f18:	62 81       	ldd	r22, Z+2	; 0x02
    3f1a:	73 81       	ldd	r23, Z+3	; 0x03
    3f1c:	80 81       	ld	r24, Z
    3f1e:	91 81       	ldd	r25, Z+1	; 0x01
    3f20:	0e 94 84 16 	call	0x2d08	; 0x2d08 <validate>
	if (res == FR_OK) {
    3f24:	88 23       	and	r24, r24
    3f26:	59 f5       	brne	.+86     	; 0x3f7e <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3f28:	ce 01       	movw	r24, r28
    3f2a:	01 96       	adiw	r24, 0x01	; 1
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	84 8b       	std	Z+20, r24	; 0x14
    3f30:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3f32:	e1 14       	cp	r14, r1
    3f34:	f1 04       	cpc	r15, r1
    3f36:	31 f4       	brne	.+12     	; 0x3f44 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3f38:	c8 01       	movw	r24, r16
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
    3f42:	1d c0       	rjmp	.+58     	; 0x3f7e <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3f44:	c8 01       	movw	r24, r16
    3f46:	0e 94 7d 10 	call	0x20fa	; 0x20fa <dir_read>
			if (res == FR_NO_FILE) {
    3f4a:	84 30       	cpi	r24, 0x04	; 4
    3f4c:	31 f4       	brne	.+12     	; 0x3f5a <f_readdir+0x5e>
				dj->sect = 0;
    3f4e:	f8 01       	movw	r30, r16
    3f50:	16 86       	std	Z+14, r1	; 0x0e
    3f52:	17 86       	std	Z+15, r1	; 0x0f
    3f54:	10 8a       	std	Z+16, r1	; 0x10
    3f56:	11 8a       	std	Z+17, r1	; 0x11
    3f58:	02 c0       	rjmp	.+4      	; 0x3f5e <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3f5a:	88 23       	and	r24, r24
    3f5c:	81 f4       	brne	.+32     	; 0x3f7e <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3f5e:	c8 01       	movw	r24, r16
    3f60:	b7 01       	movw	r22, r14
    3f62:	0e 94 29 11 	call	0x2252	; 0x2252 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3f66:	c8 01       	movw	r24, r16
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <dir_next>
				if (res == FR_NO_FILE) {
    3f6e:	84 30       	cpi	r24, 0x04	; 4
    3f70:	31 f4       	brne	.+12     	; 0x3f7e <f_readdir+0x82>
					dj->sect = 0;
    3f72:	f8 01       	movw	r30, r16
    3f74:	16 86       	std	Z+14, r1	; 0x0e
    3f76:	17 86       	std	Z+15, r1	; 0x0f
    3f78:	10 8a       	std	Z+16, r1	; 0x10
    3f7a:	11 8a       	std	Z+17, r1	; 0x11
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3f7e:	2c 96       	adiw	r28, 0x0c	; 12
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	1f 91       	pop	r17
    3f8a:	0f 91       	pop	r16
    3f8c:	ff 90       	pop	r15
    3f8e:	ef 90       	pop	r14
    3f90:	08 95       	ret

00003f92 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3f92:	cf 92       	push	r12
    3f94:	df 92       	push	r13
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	1f 93       	push	r17
    3f9c:	df 93       	push	r29
    3f9e:	cf 93       	push	r28
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
    3fa4:	a4 97       	sbiw	r28, 0x24	; 36
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	8b a3       	std	Y+35, r24	; 0x23
    3fac:	9c a3       	std	Y+36, r25	; 0x24
    3fae:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3fb0:	2d e0       	ldi	r18, 0x0D	; 13
    3fb2:	e2 2e       	mov	r14, r18
    3fb4:	f1 2c       	mov	r15, r1
    3fb6:	ec 0e       	add	r14, r28
    3fb8:	fd 1e       	adc	r15, r29
    3fba:	ce 01       	movw	r24, r28
    3fbc:	83 96       	adiw	r24, 0x23	; 35
    3fbe:	b7 01       	movw	r22, r14
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
    3fc6:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3fc8:	88 23       	and	r24, r24
    3fca:	b1 f4       	brne	.+44     	; 0x3ff8 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3fcc:	ce 01       	movw	r24, r28
    3fce:	01 96       	adiw	r24, 0x01	; 1
    3fd0:	89 a3       	std	Y+33, r24	; 0x21
    3fd2:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    3fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd8:	c7 01       	movw	r24, r14
    3fda:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
    3fde:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3fe0:	88 23       	and	r24, r24
    3fe2:	51 f4       	brne	.+20     	; 0x3ff8 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3fe4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fe6:	98 a1       	ldd	r25, Y+32	; 0x20
    3fe8:	89 2b       	or	r24, r25
    3fea:	11 f4       	brne	.+4      	; 0x3ff0 <f_stat+0x5e>
    3fec:	16 e0       	ldi	r17, 0x06	; 6
    3fee:	04 c0       	rjmp	.+8      	; 0x3ff8 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3ff0:	c7 01       	movw	r24, r14
    3ff2:	b6 01       	movw	r22, r12
    3ff4:	0e 94 29 11 	call	0x2252	; 0x2252 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3ff8:	81 2f       	mov	r24, r17
    3ffa:	a4 96       	adiw	r28, 0x24	; 36
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	cf 91       	pop	r28
    4002:	df 91       	pop	r29
    4004:	1f 91       	pop	r17
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	df 90       	pop	r13
    400c:	cf 90       	pop	r12
    400e:	08 95       	ret

00004010 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    4010:	2f 92       	push	r2
    4012:	3f 92       	push	r3
    4014:	4f 92       	push	r4
    4016:	5f 92       	push	r5
    4018:	6f 92       	push	r6
    401a:	7f 92       	push	r7
    401c:	8f 92       	push	r8
    401e:	9f 92       	push	r9
    4020:	af 92       	push	r10
    4022:	bf 92       	push	r11
    4024:	cf 92       	push	r12
    4026:	df 92       	push	r13
    4028:	ef 92       	push	r14
    402a:	ff 92       	push	r15
    402c:	0f 93       	push	r16
    402e:	1f 93       	push	r17
    4030:	df 93       	push	r29
    4032:	cf 93       	push	r28
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	29 97       	sbiw	r28, 0x09	; 9
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	6c 83       	std	Y+4, r22	; 0x04
    4044:	7d 83       	std	Y+5, r23	; 0x05
    4046:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4048:	ce 01       	movw	r24, r28
    404a:	01 96       	adiw	r24, 0x01	; 1
    404c:	ba 01       	movw	r22, r20
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    4054:	88 23       	and	r24, r24
    4056:	09 f0       	breq	.+2      	; 0x405a <f_getfree+0x4a>
    4058:	eb c0       	rjmp	.+470    	; 0x4230 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    405a:	d2 01       	movw	r26, r4
    405c:	ed 91       	ld	r30, X+
    405e:	fc 91       	ld	r31, X
    4060:	26 85       	ldd	r18, Z+14	; 0x0e
    4062:	37 85       	ldd	r19, Z+15	; 0x0f
    4064:	40 89       	ldd	r20, Z+16	; 0x10
    4066:	51 89       	ldd	r21, Z+17	; 0x11
    4068:	e2 8c       	ldd	r14, Z+26	; 0x1a
    406a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    406c:	04 8d       	ldd	r16, Z+28	; 0x1c
    406e:	15 8d       	ldd	r17, Z+29	; 0x1d
    4070:	d8 01       	movw	r26, r16
    4072:	c7 01       	movw	r24, r14
    4074:	02 97       	sbiw	r24, 0x02	; 2
    4076:	a1 09       	sbc	r26, r1
    4078:	b1 09       	sbc	r27, r1
    407a:	82 17       	cp	r24, r18
    407c:	93 07       	cpc	r25, r19
    407e:	a4 07       	cpc	r26, r20
    4080:	b5 07       	cpc	r27, r21
    4082:	38 f0       	brcs	.+14     	; 0x4092 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    4084:	ec 81       	ldd	r30, Y+4	; 0x04
    4086:	fd 81       	ldd	r31, Y+5	; 0x05
    4088:	20 83       	st	Z, r18
    408a:	31 83       	std	Z+1, r19	; 0x01
    408c:	42 83       	std	Z+2, r20	; 0x02
    408e:	53 83       	std	Z+3, r21	; 0x03
    4090:	ce c0       	rjmp	.+412    	; 0x422e <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    4092:	30 80       	ld	r3, Z
    4094:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    4096:	23 2d       	mov	r18, r3
    4098:	21 30       	cpi	r18, 0x01	; 1
    409a:	e1 f5       	brne	.+120    	; 0x4114 <f_getfree+0x104>
    409c:	aa 24       	eor	r10, r10
    409e:	bb 24       	eor	r11, r11
    40a0:	65 01       	movw	r12, r10
    40a2:	92 e0       	ldi	r25, 0x02	; 2
    40a4:	e9 2e       	mov	r14, r25
    40a6:	f1 2c       	mov	r15, r1
    40a8:	01 2d       	mov	r16, r1
    40aa:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    40ac:	d2 01       	movw	r26, r4
    40ae:	8d 91       	ld	r24, X+
    40b0:	9c 91       	ld	r25, X
    40b2:	b8 01       	movw	r22, r16
    40b4:	a7 01       	movw	r20, r14
    40b6:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    40ba:	6f 3f       	cpi	r22, 0xFF	; 255
    40bc:	bf ef       	ldi	r27, 0xFF	; 255
    40be:	7b 07       	cpc	r23, r27
    40c0:	bf ef       	ldi	r27, 0xFF	; 255
    40c2:	8b 07       	cpc	r24, r27
    40c4:	bf ef       	ldi	r27, 0xFF	; 255
    40c6:	9b 07       	cpc	r25, r27
    40c8:	11 f4       	brne	.+4      	; 0x40ce <f_getfree+0xbe>
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	b1 c0       	rjmp	.+354    	; 0x4230 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    40ce:	61 30       	cpi	r22, 0x01	; 1
    40d0:	71 05       	cpc	r23, r1
    40d2:	81 05       	cpc	r24, r1
    40d4:	91 05       	cpc	r25, r1
    40d6:	11 f4       	brne	.+4      	; 0x40dc <f_getfree+0xcc>
    40d8:	82 e0       	ldi	r24, 0x02	; 2
    40da:	aa c0       	rjmp	.+340    	; 0x4230 <f_getfree+0x220>
			if (stat == 0) n++;
    40dc:	61 15       	cp	r22, r1
    40de:	71 05       	cpc	r23, r1
    40e0:	81 05       	cpc	r24, r1
    40e2:	91 05       	cpc	r25, r1
    40e4:	29 f4       	brne	.+10     	; 0x40f0 <f_getfree+0xe0>
    40e6:	08 94       	sec
    40e8:	a1 1c       	adc	r10, r1
    40ea:	b1 1c       	adc	r11, r1
    40ec:	c1 1c       	adc	r12, r1
    40ee:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    40f0:	08 94       	sec
    40f2:	e1 1c       	adc	r14, r1
    40f4:	f1 1c       	adc	r15, r1
    40f6:	01 1d       	adc	r16, r1
    40f8:	11 1d       	adc	r17, r1
    40fa:	d2 01       	movw	r26, r4
    40fc:	ed 91       	ld	r30, X+
    40fe:	fc 91       	ld	r31, X
    4100:	82 8d       	ldd	r24, Z+26	; 0x1a
    4102:	93 8d       	ldd	r25, Z+27	; 0x1b
    4104:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4106:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4108:	e8 16       	cp	r14, r24
    410a:	f9 06       	cpc	r15, r25
    410c:	0a 07       	cpc	r16, r26
    410e:	1b 07       	cpc	r17, r27
    4110:	68 f2       	brcs	.-102    	; 0x40ac <f_getfree+0x9c>
    4112:	7b c0       	rjmp	.+246    	; 0x420a <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    4114:	66 8c       	ldd	r6, Z+30	; 0x1e
    4116:	77 8c       	ldd	r7, Z+31	; 0x1f
    4118:	80 a0       	ldd	r8, Z+32	; 0x20
    411a:	91 a0       	ldd	r9, Z+33	; 0x21
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	e0 e0       	ldi	r30, 0x00	; 0
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	aa 24       	eor	r10, r10
    4126:	bb 24       	eor	r11, r11
    4128:	65 01       	movw	r12, r10
		i = 0; p = 0;
		do {
			if (!i) {
    412a:	61 15       	cp	r22, r1
    412c:	71 05       	cpc	r23, r1
    412e:	a9 f4       	brne	.+42     	; 0x415a <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    4130:	f2 01       	movw	r30, r4
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	b4 01       	movw	r22, r8
    4138:	a3 01       	movw	r20, r6
    413a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
				if (res != FR_OK)
    413e:	88 23       	and	r24, r24
    4140:	09 f0       	breq	.+2      	; 0x4144 <f_getfree+0x134>
    4142:	76 c0       	rjmp	.+236    	; 0x4230 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    4144:	08 94       	sec
    4146:	61 1c       	adc	r6, r1
    4148:	71 1c       	adc	r7, r1
    414a:	81 1c       	adc	r8, r1
    414c:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    414e:	d2 01       	movw	r26, r4
    4150:	ed 91       	ld	r30, X+
    4152:	fc 91       	ld	r31, X
    4154:	be 96       	adiw	r30, 0x2e	; 46
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	72 e0       	ldi	r23, 0x02	; 2
    415a:	b1 81       	ldd	r27, Z+1	; 0x01
    415c:	b8 87       	std	Y+8, r27	; 0x08
    415e:	20 81       	ld	r18, Z
    4160:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    4162:	3b 81       	ldd	r19, Y+3	; 0x03
    4164:	32 30       	cpi	r19, 0x02	; 2
    4166:	99 f4       	brne	.+38     	; 0x418e <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    4168:	bf 83       	std	Y+7, r27	; 0x07
    416a:	1e 82       	std	Y+6, r1	; 0x06
    416c:	82 2f       	mov	r24, r18
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	ae 81       	ldd	r26, Y+6	; 0x06
    4172:	bf 81       	ldd	r27, Y+7	; 0x07
    4174:	8a 2b       	or	r24, r26
    4176:	9b 2b       	or	r25, r27
    4178:	89 2b       	or	r24, r25
    417a:	29 f4       	brne	.+10     	; 0x4186 <f_getfree+0x176>
    417c:	08 94       	sec
    417e:	a1 1c       	adc	r10, r1
    4180:	b1 1c       	adc	r11, r1
    4182:	c1 1c       	adc	r12, r1
    4184:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    4186:	32 96       	adiw	r30, 0x02	; 2
    4188:	62 50       	subi	r22, 0x02	; 2
    418a:	70 40       	sbci	r23, 0x00	; 0
    418c:	33 c0       	rjmp	.+102    	; 0x41f4 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    418e:	23 81       	ldd	r18, Z+3	; 0x03
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e0       	ldi	r20, 0x00	; 0
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	52 2f       	mov	r21, r18
    4198:	44 27       	eor	r20, r20
    419a:	33 27       	eor	r19, r19
    419c:	22 27       	eor	r18, r18
    419e:	82 81       	ldd	r24, Z+2	; 0x02
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	a0 e0       	ldi	r26, 0x00	; 0
    41a4:	b0 e0       	ldi	r27, 0x00	; 0
    41a6:	dc 01       	movw	r26, r24
    41a8:	99 27       	eor	r25, r25
    41aa:	88 27       	eor	r24, r24
    41ac:	28 2b       	or	r18, r24
    41ae:	39 2b       	or	r19, r25
    41b0:	4a 2b       	or	r20, r26
    41b2:	5b 2b       	or	r21, r27
    41b4:	39 84       	ldd	r3, Y+9	; 0x09
    41b6:	83 2d       	mov	r24, r3
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	a0 e0       	ldi	r26, 0x00	; 0
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	28 2b       	or	r18, r24
    41c0:	39 2b       	or	r19, r25
    41c2:	4a 2b       	or	r20, r26
    41c4:	5b 2b       	or	r21, r27
    41c6:	38 84       	ldd	r3, Y+8	; 0x08
    41c8:	22 24       	eor	r2, r2
    41ca:	c1 01       	movw	r24, r2
    41cc:	a0 e0       	ldi	r26, 0x00	; 0
    41ce:	b0 e0       	ldi	r27, 0x00	; 0
    41d0:	28 2b       	or	r18, r24
    41d2:	39 2b       	or	r19, r25
    41d4:	4a 2b       	or	r20, r26
    41d6:	5b 2b       	or	r21, r27
    41d8:	5f 70       	andi	r21, 0x0F	; 15
    41da:	21 15       	cp	r18, r1
    41dc:	31 05       	cpc	r19, r1
    41de:	41 05       	cpc	r20, r1
    41e0:	51 05       	cpc	r21, r1
    41e2:	29 f4       	brne	.+10     	; 0x41ee <f_getfree+0x1de>
    41e4:	08 94       	sec
    41e6:	a1 1c       	adc	r10, r1
    41e8:	b1 1c       	adc	r11, r1
    41ea:	c1 1c       	adc	r12, r1
    41ec:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    41ee:	34 96       	adiw	r30, 0x04	; 4
    41f0:	64 50       	subi	r22, 0x04	; 4
    41f2:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    41f4:	08 94       	sec
    41f6:	e1 08       	sbc	r14, r1
    41f8:	f1 08       	sbc	r15, r1
    41fa:	01 09       	sbc	r16, r1
    41fc:	11 09       	sbc	r17, r1
    41fe:	e1 14       	cp	r14, r1
    4200:	f1 04       	cpc	r15, r1
    4202:	01 05       	cpc	r16, r1
    4204:	11 05       	cpc	r17, r1
    4206:	09 f0       	breq	.+2      	; 0x420a <f_getfree+0x1fa>
    4208:	90 cf       	rjmp	.-224    	; 0x412a <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    420a:	d2 01       	movw	r26, r4
    420c:	ed 91       	ld	r30, X+
    420e:	fc 91       	ld	r31, X
    4210:	a6 86       	std	Z+14, r10	; 0x0e
    4212:	b7 86       	std	Z+15, r11	; 0x0f
    4214:	c0 8a       	std	Z+16, r12	; 0x10
    4216:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4218:	bb 81       	ldd	r27, Y+3	; 0x03
    421a:	b3 30       	cpi	r27, 0x03	; 3
    421c:	11 f4       	brne	.+4      	; 0x4222 <f_getfree+0x212>
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    4222:	ec 81       	ldd	r30, Y+4	; 0x04
    4224:	fd 81       	ldd	r31, Y+5	; 0x05
    4226:	a0 82       	st	Z, r10
    4228:	b1 82       	std	Z+1, r11	; 0x01
    422a:	c2 82       	std	Z+2, r12	; 0x02
    422c:	d3 82       	std	Z+3, r13	; 0x03
    422e:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4230:	29 96       	adiw	r28, 0x09	; 9
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	de bf       	out	0x3e, r29	; 62
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	1f 91       	pop	r17
    423c:	0f 91       	pop	r16
    423e:	ff 90       	pop	r15
    4240:	ef 90       	pop	r14
    4242:	df 90       	pop	r13
    4244:	cf 90       	pop	r12
    4246:	bf 90       	pop	r11
    4248:	af 90       	pop	r10
    424a:	9f 90       	pop	r9
    424c:	8f 90       	pop	r8
    424e:	7f 90       	pop	r7
    4250:	6f 90       	pop	r6
    4252:	5f 90       	pop	r5
    4254:	4f 90       	pop	r4
    4256:	3f 90       	pop	r3
    4258:	2f 90       	pop	r2
    425a:	08 95       	ret

0000425c <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    425c:	cf 92       	push	r12
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    426e:	6a 81       	ldd	r22, Y+2	; 0x02
    4270:	7b 81       	ldd	r23, Y+3	; 0x03
    4272:	88 81       	ld	r24, Y
    4274:	99 81       	ldd	r25, Y+1	; 0x01
    4276:	0e 94 84 16 	call	0x2d08	; 0x2d08 <validate>
    427a:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    427c:	88 23       	and	r24, r24
    427e:	09 f0       	breq	.+2      	; 0x4282 <f_truncate+0x26>
    4280:	6e c0       	rjmp	.+220    	; 0x435e <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    4282:	6c 81       	ldd	r22, Y+4	; 0x04
    4284:	67 ff       	sbrs	r22, 7
    4286:	02 c0       	rjmp	.+4      	; 0x428c <f_truncate+0x30>
    4288:	12 e0       	ldi	r17, 0x02	; 2
    428a:	69 c0       	rjmp	.+210    	; 0x435e <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    428c:	61 fd       	sbrc	r22, 1
    428e:	02 c0       	rjmp	.+4      	; 0x4294 <f_truncate+0x38>
    4290:	17 e0       	ldi	r17, 0x07	; 7
    4292:	65 c0       	rjmp	.+202    	; 0x435e <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    4294:	2e 81       	ldd	r18, Y+6	; 0x06
    4296:	3f 81       	ldd	r19, Y+7	; 0x07
    4298:	48 85       	ldd	r20, Y+8	; 0x08
    429a:	59 85       	ldd	r21, Y+9	; 0x09
    429c:	8a 85       	ldd	r24, Y+10	; 0x0a
    429e:	9b 85       	ldd	r25, Y+11	; 0x0b
    42a0:	ac 85       	ldd	r26, Y+12	; 0x0c
    42a2:	bd 85       	ldd	r27, Y+13	; 0x0d
    42a4:	28 17       	cp	r18, r24
    42a6:	39 07       	cpc	r19, r25
    42a8:	4a 07       	cpc	r20, r26
    42aa:	5b 07       	cpc	r21, r27
    42ac:	08 f0       	brcs	.+2      	; 0x42b0 <f_truncate+0x54>
    42ae:	57 c0       	rjmp	.+174    	; 0x435e <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    42b0:	2a 87       	std	Y+10, r18	; 0x0a
    42b2:	3b 87       	std	Y+11, r19	; 0x0b
    42b4:	4c 87       	std	Y+12, r20	; 0x0c
    42b6:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    42b8:	60 62       	ori	r22, 0x20	; 32
    42ba:	6c 83       	std	Y+4, r22	; 0x04
    42bc:	88 81       	ld	r24, Y
    42be:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    42c0:	21 15       	cp	r18, r1
    42c2:	31 05       	cpc	r19, r1
    42c4:	41 05       	cpc	r20, r1
    42c6:	51 05       	cpc	r21, r1
    42c8:	61 f4       	brne	.+24     	; 0x42e2 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    42ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    42cc:	5f 85       	ldd	r21, Y+15	; 0x0f
    42ce:	68 89       	ldd	r22, Y+16	; 0x10
    42d0:	79 89       	ldd	r23, Y+17	; 0x11
    42d2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <remove_chain>
    42d6:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    42d8:	1e 86       	std	Y+14, r1	; 0x0e
    42da:	1f 86       	std	Y+15, r1	; 0x0f
    42dc:	18 8a       	std	Y+16, r1	; 0x10
    42de:	19 8a       	std	Y+17, r1	; 0x11
    42e0:	39 c0       	rjmp	.+114    	; 0x4354 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    42e2:	4a 89       	ldd	r20, Y+18	; 0x12
    42e4:	5b 89       	ldd	r21, Y+19	; 0x13
    42e6:	6c 89       	ldd	r22, Y+20	; 0x14
    42e8:	7d 89       	ldd	r23, Y+21	; 0x15
    42ea:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fat>
    42ee:	6b 01       	movw	r12, r22
    42f0:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    42f2:	8f ef       	ldi	r24, 0xFF	; 255
    42f4:	c8 16       	cp	r12, r24
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	d8 06       	cpc	r13, r24
    42fa:	8f ef       	ldi	r24, 0xFF	; 255
    42fc:	e8 06       	cpc	r14, r24
    42fe:	8f ef       	ldi	r24, 0xFF	; 255
    4300:	f8 06       	cpc	r15, r24
    4302:	b9 f1       	breq	.+110    	; 0x4372 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	c8 16       	cp	r12, r24
    4308:	d1 04       	cpc	r13, r1
    430a:	e1 04       	cpc	r14, r1
    430c:	f1 04       	cpc	r15, r1
    430e:	11 f4       	brne	.+4      	; 0x4314 <f_truncate+0xb8>
    4310:	12 e0       	ldi	r17, 0x02	; 2
    4312:	22 c0       	rjmp	.+68     	; 0x4358 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    4314:	e8 81       	ld	r30, Y
    4316:	f9 81       	ldd	r31, Y+1	; 0x01
    4318:	82 8d       	ldd	r24, Z+26	; 0x1a
    431a:	93 8d       	ldd	r25, Z+27	; 0x1b
    431c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    431e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4320:	c8 16       	cp	r12, r24
    4322:	d9 06       	cpc	r13, r25
    4324:	ea 06       	cpc	r14, r26
    4326:	fb 06       	cpc	r15, r27
    4328:	d0 f4       	brcc	.+52     	; 0x435e <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    432a:	4a 89       	ldd	r20, Y+18	; 0x12
    432c:	5b 89       	ldd	r21, Y+19	; 0x13
    432e:	6c 89       	ldd	r22, Y+20	; 0x14
    4330:	7d 89       	ldd	r23, Y+21	; 0x15
    4332:	cf 01       	movw	r24, r30
    4334:	0f ef       	ldi	r16, 0xFF	; 255
    4336:	1f ef       	ldi	r17, 0xFF	; 255
    4338:	2f ef       	ldi	r18, 0xFF	; 255
    433a:	3f e0       	ldi	r19, 0x0F	; 15
    433c:	0e 94 6d 0b 	call	0x16da	; 0x16da <put_fat>
    4340:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4342:	88 23       	and	r24, r24
    4344:	49 f4       	brne	.+18     	; 0x4358 <f_truncate+0xfc>
    4346:	88 81       	ld	r24, Y
    4348:	99 81       	ldd	r25, Y+1	; 0x01
    434a:	b7 01       	movw	r22, r14
    434c:	a6 01       	movw	r20, r12
    434e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <remove_chain>
    4352:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4354:	11 23       	and	r17, r17
    4356:	19 f0       	breq	.+6      	; 0x435e <f_truncate+0x102>
    4358:	8c 81       	ldd	r24, Y+4	; 0x04
    435a:	80 68       	ori	r24, 0x80	; 128
    435c:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    435e:	81 2f       	mov	r24, r17
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	ff 90       	pop	r15
    436a:	ef 90       	pop	r14
    436c:	df 90       	pop	r13
    436e:	cf 90       	pop	r12
    4370:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4372:	11 e0       	ldi	r17, 0x01	; 1
    4374:	f1 cf       	rjmp	.-30     	; 0x4358 <f_truncate+0xfc>

00004376 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    4376:	cf 92       	push	r12
    4378:	df 92       	push	r13
    437a:	ef 92       	push	r14
    437c:	ff 92       	push	r15
    437e:	0f 93       	push	r16
    4380:	1f 93       	push	r17
    4382:	df 93       	push	r29
    4384:	cf 93       	push	r28
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62
    438a:	ea 97       	sbiw	r28, 0x3a	; 58
    438c:	cd bf       	out	0x3d, r28	; 61
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	89 af       	std	Y+57, r24	; 0x39
    4392:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    4394:	4d e0       	ldi	r20, 0x0D	; 13
    4396:	c4 2e       	mov	r12, r20
    4398:	d1 2c       	mov	r13, r1
    439a:	cc 0e       	add	r12, r28
    439c:	dd 1e       	adc	r13, r29
    439e:	ce 01       	movw	r24, r28
    43a0:	c9 96       	adiw	r24, 0x39	; 57
    43a2:	b6 01       	movw	r22, r12
    43a4:	41 e0       	ldi	r20, 0x01	; 1
    43a6:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    43aa:	88 23       	and	r24, r24
    43ac:	09 f0       	breq	.+2      	; 0x43b0 <f_unlink+0x3a>
    43ae:	71 c0       	rjmp	.+226    	; 0x4492 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    43b0:	ce 01       	movw	r24, r28
    43b2:	01 96       	adiw	r24, 0x01	; 1
    43b4:	89 a3       	std	Y+33, r24	; 0x21
    43b6:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    43b8:	69 ad       	ldd	r22, Y+57	; 0x39
    43ba:	7a ad       	ldd	r23, Y+58	; 0x3a
    43bc:	c6 01       	movw	r24, r12
    43be:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    43c2:	88 23       	and	r24, r24
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <f_unlink+0x52>
    43c6:	65 c0       	rjmp	.+202    	; 0x4492 <f_unlink+0x11c>

	dir = dj.dir;
    43c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    43ca:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    43cc:	30 97       	sbiw	r30, 0x00	; 0
    43ce:	11 f4       	brne	.+4      	; 0x43d4 <f_unlink+0x5e>
    43d0:	86 e0       	ldi	r24, 0x06	; 6
    43d2:	5f c0       	rjmp	.+190    	; 0x4492 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    43d4:	83 85       	ldd	r24, Z+11	; 0x0b
    43d6:	48 2f       	mov	r20, r24
    43d8:	80 fd       	sbrc	r24, 0
    43da:	5a c0       	rjmp	.+180    	; 0x4490 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    43dc:	95 89       	ldd	r25, Z+21	; 0x15
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	24 89       	ldd	r18, Z+20	; 0x14
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	82 2b       	or	r24, r18
    43e6:	93 2b       	or	r25, r19
    43e8:	a0 e0       	ldi	r26, 0x00	; 0
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	8c 01       	movw	r16, r24
    43ee:	ff 24       	eor	r15, r15
    43f0:	ee 24       	eor	r14, r14
    43f2:	93 8d       	ldd	r25, Z+27	; 0x1b
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	22 8d       	ldd	r18, Z+26	; 0x1a
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	82 2b       	or	r24, r18
    43fc:	93 2b       	or	r25, r19
    43fe:	a0 e0       	ldi	r26, 0x00	; 0
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	e8 2a       	or	r14, r24
    4404:	f9 2a       	or	r15, r25
    4406:	0a 2b       	or	r16, r26
    4408:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    440a:	44 ff       	sbrs	r20, 4
    440c:	29 c0       	rjmp	.+82     	; 0x4460 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    440e:	82 e0       	ldi	r24, 0x02	; 2
    4410:	e8 16       	cp	r14, r24
    4412:	f1 04       	cpc	r15, r1
    4414:	01 05       	cpc	r16, r1
    4416:	11 05       	cpc	r17, r1
    4418:	10 f4       	brcc	.+4      	; 0x441e <f_unlink+0xa8>
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	3a c0       	rjmp	.+116    	; 0x4492 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    441e:	de 01       	movw	r26, r28
    4420:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    4422:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    4424:	9d 01       	movw	r18, r26
    4426:	02 c0       	rjmp	.+4      	; 0x442c <f_unlink+0xb6>
    4428:	81 91       	ld	r24, Z+
    442a:	8d 93       	st	X+, r24
    442c:	e2 17       	cp	r30, r18
    442e:	f3 07       	cpc	r31, r19
    4430:	d9 f7       	brne	.-10     	; 0x4428 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    4432:	e9 a6       	std	Y+41, r14	; 0x29
    4434:	fa a6       	std	Y+42, r15	; 0x2a
    4436:	0b a7       	std	Y+43, r16	; 0x2b
    4438:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    443a:	23 e2       	ldi	r18, 0x23	; 35
    443c:	c2 2e       	mov	r12, r18
    443e:	d1 2c       	mov	r13, r1
    4440:	cc 0e       	add	r12, r28
    4442:	dd 1e       	adc	r13, r29
    4444:	c6 01       	movw	r24, r12
    4446:	62 e0       	ldi	r22, 0x02	; 2
    4448:	70 e0       	ldi	r23, 0x00	; 0
    444a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    444e:	88 23       	and	r24, r24
    4450:	01 f5       	brne	.+64     	; 0x4492 <f_unlink+0x11c>
		res = dir_read(&sdj);
    4452:	c6 01       	movw	r24, r12
    4454:	0e 94 7d 10 	call	0x20fa	; 0x20fa <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4458:	88 23       	and	r24, r24
    445a:	d1 f0       	breq	.+52     	; 0x4490 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    445c:	84 30       	cpi	r24, 0x04	; 4
    445e:	c9 f4       	brne	.+50     	; 0x4492 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    4460:	ce 01       	movw	r24, r28
    4462:	0d 96       	adiw	r24, 0x0d	; 13
    4464:	0e 94 08 11 	call	0x2210	; 0x2210 <dir_remove>
	if (res == FR_OK) {
    4468:	88 23       	and	r24, r24
    446a:	99 f4       	brne	.+38     	; 0x4492 <f_unlink+0x11c>
		if (dclst)
    446c:	e1 14       	cp	r14, r1
    446e:	f1 04       	cpc	r15, r1
    4470:	01 05       	cpc	r16, r1
    4472:	11 05       	cpc	r17, r1
    4474:	41 f0       	breq	.+16     	; 0x4486 <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    4476:	8d 85       	ldd	r24, Y+13	; 0x0d
    4478:	9e 85       	ldd	r25, Y+14	; 0x0e
    447a:	b8 01       	movw	r22, r16
    447c:	a7 01       	movw	r20, r14
    447e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    4482:	88 23       	and	r24, r24
    4484:	31 f4       	brne	.+12     	; 0x4492 <f_unlink+0x11c>
    4486:	8d 85       	ldd	r24, Y+13	; 0x0d
    4488:	9e 85       	ldd	r25, Y+14	; 0x0e
    448a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <sync>
    448e:	01 c0       	rjmp	.+2      	; 0x4492 <f_unlink+0x11c>
    4490:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    4492:	ea 96       	adiw	r28, 0x3a	; 58
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	cf 91       	pop	r28
    449a:	df 91       	pop	r29
    449c:	1f 91       	pop	r17
    449e:	0f 91       	pop	r16
    44a0:	ff 90       	pop	r15
    44a2:	ef 90       	pop	r14
    44a4:	df 90       	pop	r13
    44a6:	cf 90       	pop	r12
    44a8:	08 95       	ret

000044aa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    44aa:	2f 92       	push	r2
    44ac:	3f 92       	push	r3
    44ae:	4f 92       	push	r4
    44b0:	5f 92       	push	r5
    44b2:	6f 92       	push	r6
    44b4:	7f 92       	push	r7
    44b6:	8f 92       	push	r8
    44b8:	9f 92       	push	r9
    44ba:	af 92       	push	r10
    44bc:	bf 92       	push	r11
    44be:	cf 92       	push	r12
    44c0:	df 92       	push	r13
    44c2:	ef 92       	push	r14
    44c4:	ff 92       	push	r15
    44c6:	0f 93       	push	r16
    44c8:	1f 93       	push	r17
    44ca:	df 93       	push	r29
    44cc:	cf 93       	push	r28
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	a8 97       	sbiw	r28, 0x28	; 40
    44d4:	cd bf       	out	0x3d, r28	; 61
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	8b a3       	std	Y+35, r24	; 0x23
    44da:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    44dc:	3d e0       	ldi	r19, 0x0D	; 13
    44de:	e3 2e       	mov	r14, r19
    44e0:	f1 2c       	mov	r15, r1
    44e2:	ec 0e       	add	r14, r28
    44e4:	fd 1e       	adc	r15, r29
    44e6:	ce 01       	movw	r24, r28
    44e8:	83 96       	adiw	r24, 0x23	; 35
    44ea:	b7 01       	movw	r22, r14
    44ec:	41 e0       	ldi	r20, 0x01	; 1
    44ee:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
    44f2:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44f4:	88 23       	and	r24, r24
    44f6:	09 f0       	breq	.+2      	; 0x44fa <f_mkdir+0x50>
    44f8:	38 c1       	rjmp	.+624    	; 0x476a <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    44fa:	ce 01       	movw	r24, r28
    44fc:	01 96       	adiw	r24, 0x01	; 1
    44fe:	89 a3       	std	Y+33, r24	; 0x21
    4500:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4502:	6b a1       	ldd	r22, Y+35	; 0x23
    4504:	7c a1       	ldd	r23, Y+36	; 0x24
    4506:	c7 01       	movw	r24, r14
    4508:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
    450c:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    450e:	88 23       	and	r24, r24
    4510:	11 f4       	brne	.+4      	; 0x4516 <f_mkdir+0x6c>
    4512:	18 e0       	ldi	r17, 0x08	; 8
    4514:	2a c1       	rjmp	.+596    	; 0x476a <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    4516:	84 30       	cpi	r24, 0x04	; 4
    4518:	09 f0       	breq	.+2      	; 0x451c <f_mkdir+0x72>
    451a:	27 c1       	rjmp	.+590    	; 0x476a <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    451c:	8d 85       	ldd	r24, Y+13	; 0x0d
    451e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4520:	40 e0       	ldi	r20, 0x00	; 0
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	60 e0       	ldi	r22, 0x00	; 0
    4526:	70 e0       	ldi	r23, 0x00	; 0
    4528:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <create_chain>
    452c:	4b 01       	movw	r8, r22
    452e:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4530:	61 15       	cp	r22, r1
    4532:	71 05       	cpc	r23, r1
    4534:	81 05       	cpc	r24, r1
    4536:	91 05       	cpc	r25, r1
    4538:	11 f4       	brne	.+4      	; 0x453e <f_mkdir+0x94>
    453a:	17 e0       	ldi	r17, 0x07	; 7
    453c:	16 c1       	rjmp	.+556    	; 0x476a <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    453e:	61 30       	cpi	r22, 0x01	; 1
    4540:	71 05       	cpc	r23, r1
    4542:	81 05       	cpc	r24, r1
    4544:	91 05       	cpc	r25, r1
    4546:	11 f4       	brne	.+4      	; 0x454c <f_mkdir+0xa2>
    4548:	12 e0       	ldi	r17, 0x02	; 2
    454a:	0f c1       	rjmp	.+542    	; 0x476a <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    454c:	6f 3f       	cpi	r22, 0xFF	; 255
    454e:	3f ef       	ldi	r19, 0xFF	; 255
    4550:	73 07       	cpc	r23, r19
    4552:	3f ef       	ldi	r19, 0xFF	; 255
    4554:	83 07       	cpc	r24, r19
    4556:	3f ef       	ldi	r19, 0xFF	; 255
    4558:	93 07       	cpc	r25, r19
    455a:	09 f4       	brne	.+2      	; 0x455e <f_mkdir+0xb4>
    455c:	1d c1       	rjmp	.+570    	; 0x4798 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    455e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4560:	9e 85       	ldd	r25, Y+14	; 0x0e
    4562:	40 e0       	ldi	r20, 0x00	; 0
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	70 e0       	ldi	r23, 0x00	; 0
    456a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    456e:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4570:	88 23       	and	r24, r24
    4572:	09 f0       	breq	.+2      	; 0x4576 <f_mkdir+0xcc>
    4574:	fa c0       	rjmp	.+500    	; 0x476a <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    4576:	0d 85       	ldd	r16, Y+13	; 0x0d
    4578:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    457a:	2e ef       	ldi	r18, 0xFE	; 254
    457c:	c2 2e       	mov	r12, r18
    457e:	2f ef       	ldi	r18, 0xFF	; 255
    4580:	d2 2e       	mov	r13, r18
    4582:	2f ef       	ldi	r18, 0xFF	; 255
    4584:	e2 2e       	mov	r14, r18
    4586:	2f ef       	ldi	r18, 0xFF	; 255
    4588:	f2 2e       	mov	r15, r18
    458a:	c8 0c       	add	r12, r8
    458c:	d9 1c       	adc	r13, r9
    458e:	ea 1c       	adc	r14, r10
    4590:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4592:	f8 01       	movw	r30, r16
    4594:	82 8d       	ldd	r24, Z+26	; 0x1a
    4596:	93 8d       	ldd	r25, Z+27	; 0x1b
    4598:	a4 8d       	ldd	r26, Z+28	; 0x1c
    459a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    459c:	02 97       	sbiw	r24, 0x02	; 2
    459e:	a1 09       	sbc	r26, r1
    45a0:	b1 09       	sbc	r27, r1
    45a2:	c8 16       	cp	r12, r24
    45a4:	d9 06       	cpc	r13, r25
    45a6:	ea 06       	cpc	r14, r26
    45a8:	fb 06       	cpc	r15, r27
    45aa:	20 f0       	brcs	.+8      	; 0x45b4 <f_mkdir+0x10a>
    45ac:	44 24       	eor	r4, r4
    45ae:	55 24       	eor	r5, r5
    45b0:	32 01       	movw	r6, r4
    45b2:	14 c0       	rjmp	.+40     	; 0x45dc <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    45b4:	f8 01       	movw	r30, r16
    45b6:	22 81       	ldd	r18, Z+2	; 0x02
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e0       	ldi	r20, 0x00	; 0
    45bc:	50 e0       	ldi	r21, 0x00	; 0
    45be:	c7 01       	movw	r24, r14
    45c0:	b6 01       	movw	r22, r12
    45c2:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    45c6:	2b 01       	movw	r4, r22
    45c8:	3c 01       	movw	r6, r24
    45ca:	f8 01       	movw	r30, r16
    45cc:	86 a1       	ldd	r24, Z+38	; 0x26
    45ce:	97 a1       	ldd	r25, Z+39	; 0x27
    45d0:	a0 a5       	ldd	r26, Z+40	; 0x28
    45d2:	b1 a5       	ldd	r27, Z+41	; 0x29
    45d4:	48 0e       	add	r4, r24
    45d6:	59 1e       	adc	r5, r25
    45d8:	6a 1e       	adc	r6, r26
    45da:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    45dc:	9e e2       	ldi	r25, 0x2E	; 46
    45de:	29 2e       	mov	r2, r25
    45e0:	31 2c       	mov	r3, r1
    45e2:	20 0e       	add	r2, r16
    45e4:	31 1e       	adc	r3, r17
    45e6:	f1 01       	movw	r30, r2
    45e8:	80 e0       	ldi	r24, 0x00	; 0
    45ea:	92 e0       	ldi	r25, 0x02	; 2
    45ec:	01 c0       	rjmp	.+2      	; 0x45f0 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    45ee:	11 92       	st	Z+, r1
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	2f ef       	ldi	r18, 0xFF	; 255
    45f4:	8f 3f       	cpi	r24, 0xFF	; 255
    45f6:	92 07       	cpc	r25, r18
    45f8:	d1 f7       	brne	.-12     	; 0x45ee <f_mkdir+0x144>
    45fa:	f1 01       	movw	r30, r2
    45fc:	8b e0       	ldi	r24, 0x0B	; 11
    45fe:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    4600:	20 e2       	ldi	r18, 0x20	; 32
    4602:	01 c0       	rjmp	.+2      	; 0x4606 <f_mkdir+0x15c>
    4604:	21 93       	st	Z+, r18
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	3f ef       	ldi	r19, 0xFF	; 255
    460a:	8f 3f       	cpi	r24, 0xFF	; 255
    460c:	93 07       	cpc	r25, r19
    460e:	d1 f7       	brne	.-12     	; 0x4604 <f_mkdir+0x15a>
    4610:	8e e2       	ldi	r24, 0x2E	; 46
    4612:	f8 01       	movw	r30, r16
    4614:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    4616:	80 e1       	ldi	r24, 0x10	; 16
    4618:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    461a:	0c 5b       	subi	r16, 0xBC	; 188
    461c:	1f 4f       	sbci	r17, 0xFF	; 255
    461e:	f8 01       	movw	r30, r16
    4620:	11 92       	st	Z+, r1
    4622:	11 92       	st	Z+, r1
    4624:	11 92       	st	Z+, r1
    4626:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4628:	88 a6       	std	Y+40, r8	; 0x28
    462a:	81 92       	st	Z+, r8
    462c:	8f 01       	movw	r16, r30
    462e:	89 2d       	mov	r24, r9
    4630:	99 27       	eor	r25, r25
    4632:	8f a3       	std	Y+39, r24	; 0x27
    4634:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4636:	c5 01       	movw	r24, r10
    4638:	aa 27       	eor	r26, r26
    463a:	bb 27       	eor	r27, r27
    463c:	8e a3       	std	Y+38, r24	; 0x26
    463e:	07 50       	subi	r16, 0x07	; 7
    4640:	10 40       	sbci	r17, 0x00	; 0
    4642:	f8 01       	movw	r30, r16
    4644:	81 93       	st	Z+, r24
    4646:	8f 01       	movw	r16, r30
    4648:	89 2f       	mov	r24, r25
    464a:	99 27       	eor	r25, r25
    464c:	8d a3       	std	Y+37, r24	; 0x25
    464e:	80 83       	st	Z, r24
    4650:	03 54       	subi	r16, 0x43	; 67
    4652:	10 40       	sbci	r17, 0x00	; 0
    4654:	f1 01       	movw	r30, r2
    4656:	20 e2       	ldi	r18, 0x20	; 32
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	03 c0       	rjmp	.+6      	; 0x4662 <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    465c:	80 81       	ld	r24, Z
    465e:	80 a3       	std	Z+32, r24	; 0x20
    4660:	31 96       	adiw	r30, 0x01	; 1
    4662:	21 50       	subi	r18, 0x01	; 1
    4664:	30 40       	sbci	r19, 0x00	; 0
    4666:	8f ef       	ldi	r24, 0xFF	; 255
    4668:	2f 3f       	cpi	r18, 0xFF	; 255
    466a:	38 07       	cpc	r19, r24
    466c:	b9 f7       	brne	.-18     	; 0x465c <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    466e:	01 5b       	subi	r16, 0xB1	; 177
    4670:	1f 4f       	sbci	r17, 0xFF	; 255
    4672:	8e e2       	ldi	r24, 0x2E	; 46
    4674:	f8 01       	movw	r30, r16
    4676:	80 83       	st	Z, r24
    4678:	0f 54       	subi	r16, 0x4F	; 79
    467a:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    467c:	2b 89       	ldd	r18, Y+19	; 0x13
    467e:	3c 89       	ldd	r19, Y+20	; 0x14
    4680:	4d 89       	ldd	r20, Y+21	; 0x15
    4682:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    4684:	ed 85       	ldd	r30, Y+13	; 0x0d
    4686:	fe 85       	ldd	r31, Y+14	; 0x0e
    4688:	80 81       	ld	r24, Z
    468a:	83 30       	cpi	r24, 0x03	; 3
    468c:	69 f4       	brne	.+26     	; 0x46a8 <f_mkdir+0x1fe>
    468e:	82 a1       	ldd	r24, Z+34	; 0x22
    4690:	93 a1       	ldd	r25, Z+35	; 0x23
    4692:	a4 a1       	ldd	r26, Z+36	; 0x24
    4694:	b5 a1       	ldd	r27, Z+37	; 0x25
    4696:	28 17       	cp	r18, r24
    4698:	39 07       	cpc	r19, r25
    469a:	4a 07       	cpc	r20, r26
    469c:	5b 07       	cpc	r21, r27
    469e:	21 f4       	brne	.+8      	; 0x46a8 <f_mkdir+0x1fe>
    46a0:	20 e0       	ldi	r18, 0x00	; 0
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	40 e0       	ldi	r20, 0x00	; 0
    46a6:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    46a8:	08 59       	subi	r16, 0x98	; 152
    46aa:	1f 4f       	sbci	r17, 0xFF	; 255
    46ac:	f8 01       	movw	r30, r16
    46ae:	21 93       	st	Z+, r18
    46b0:	8f 01       	movw	r16, r30
    46b2:	83 2f       	mov	r24, r19
    46b4:	99 27       	eor	r25, r25
    46b6:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    46b8:	ca 01       	movw	r24, r20
    46ba:	aa 27       	eor	r26, r26
    46bc:	bb 27       	eor	r27, r27
    46be:	07 50       	subi	r16, 0x07	; 7
    46c0:	10 40       	sbci	r17, 0x00	; 0
    46c2:	f8 01       	movw	r30, r16
    46c4:	81 93       	st	Z+, r24
    46c6:	89 2f       	mov	r24, r25
    46c8:	99 27       	eor	r25, r25
    46ca:	80 83       	st	Z, r24
    46cc:	73 01       	movw	r14, r6
    46ce:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    46d0:	01 e0       	ldi	r16, 0x01	; 1
    46d2:	1e c0       	rjmp	.+60     	; 0x4710 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46d4:	c2 a6       	std	Z+42, r12	; 0x2a
    46d6:	d3 a6       	std	Z+43, r13	; 0x2b
    46d8:	e4 a6       	std	Z+44, r14	; 0x2c
    46da:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    46dc:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    46de:	cf 01       	movw	r24, r30
    46e0:	40 e0       	ldi	r20, 0x00	; 0
    46e2:	50 e0       	ldi	r21, 0x00	; 0
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
    46ec:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    46ee:	88 23       	and	r24, r24
    46f0:	e1 f5       	brne	.+120    	; 0x476a <f_mkdir+0x2c0>
    46f2:	f1 01       	movw	r30, r2
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	92 e0       	ldi	r25, 0x02	; 2
    46f8:	01 c0       	rjmp	.+2      	; 0x46fc <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    46fa:	11 92       	st	Z+, r1
    46fc:	01 97       	sbiw	r24, 0x01	; 1
    46fe:	2f ef       	ldi	r18, 0xFF	; 255
    4700:	8f 3f       	cpi	r24, 0xFF	; 255
    4702:	92 07       	cpc	r25, r18
    4704:	d1 f7       	brne	.-12     	; 0x46fa <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    4706:	08 94       	sec
    4708:	c1 1c       	adc	r12, r1
    470a:	d1 1c       	adc	r13, r1
    470c:	e1 1c       	adc	r14, r1
    470e:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4710:	ed 85       	ldd	r30, Y+13	; 0x0d
    4712:	fe 85       	ldd	r31, Y+14	; 0x0e
    4714:	9c 2d       	mov	r25, r12
    4716:	94 19       	sub	r25, r4
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	98 17       	cp	r25, r24
    471c:	d8 f2       	brcs	.-74     	; 0x46d4 <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    471e:	ce 01       	movw	r24, r28
    4720:	0d 96       	adiw	r24, 0x0d	; 13
    4722:	0e 94 b1 10 	call	0x2162	; 0x2162 <dir_register>
    4726:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4728:	88 23       	and	r24, r24
    472a:	39 f0       	breq	.+14     	; 0x473a <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    472c:	8d 85       	ldd	r24, Y+13	; 0x0d
    472e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4730:	b5 01       	movw	r22, r10
    4732:	a4 01       	movw	r20, r8
    4734:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <remove_chain>
    4738:	18 c0       	rjmp	.+48     	; 0x476a <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    473a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    473c:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    473e:	80 e1       	ldi	r24, 0x10	; 16
    4740:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    4742:	16 8a       	std	Z+22, r1	; 0x16
    4744:	17 8a       	std	Z+23, r1	; 0x17
    4746:	10 8e       	std	Z+24, r1	; 0x18
    4748:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    474a:	38 a5       	ldd	r19, Y+40	; 0x28
    474c:	32 8f       	std	Z+26, r19	; 0x1a
    474e:	8f a1       	ldd	r24, Y+39	; 0x27
    4750:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4752:	2e a1       	ldd	r18, Y+38	; 0x26
    4754:	24 8b       	std	Z+20, r18	; 0x14
    4756:	3d a1       	ldd	r19, Y+37	; 0x25
    4758:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    475a:	ed 85       	ldd	r30, Y+13	; 0x0d
    475c:	fe 85       	ldd	r31, Y+14	; 0x0e
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    4762:	cf 01       	movw	r24, r30
    4764:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <sync>
    4768:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    476a:	81 2f       	mov	r24, r17
    476c:	a8 96       	adiw	r28, 0x28	; 40
    476e:	cd bf       	out	0x3d, r28	; 61
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	1f 91       	pop	r17
    4778:	0f 91       	pop	r16
    477a:	ff 90       	pop	r15
    477c:	ef 90       	pop	r14
    477e:	df 90       	pop	r13
    4780:	cf 90       	pop	r12
    4782:	bf 90       	pop	r11
    4784:	af 90       	pop	r10
    4786:	9f 90       	pop	r9
    4788:	8f 90       	pop	r8
    478a:	7f 90       	pop	r7
    478c:	6f 90       	pop	r6
    478e:	5f 90       	pop	r5
    4790:	4f 90       	pop	r4
    4792:	3f 90       	pop	r3
    4794:	2f 90       	pop	r2
    4796:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    4798:	11 e0       	ldi	r17, 0x01	; 1
    479a:	e7 cf       	rjmp	.-50     	; 0x476a <f_mkdir+0x2c0>

0000479c <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    479c:	ef 92       	push	r14
    479e:	ff 92       	push	r15
    47a0:	0f 93       	push	r16
    47a2:	1f 93       	push	r17
    47a4:	df 93       	push	r29
    47a6:	cf 93       	push	r28
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    47ac:	a4 97       	sbiw	r28, 0x24	; 36
    47ae:	cd bf       	out	0x3d, r28	; 61
    47b0:	de bf       	out	0x3e, r29	; 62
    47b2:	8b a3       	std	Y+35, r24	; 0x23
    47b4:	9c a3       	std	Y+36, r25	; 0x24
    47b6:	e6 2e       	mov	r14, r22
    47b8:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    47ba:	8e 01       	movw	r16, r28
    47bc:	03 5f       	subi	r16, 0xF3	; 243
    47be:	1f 4f       	sbci	r17, 0xFF	; 255
    47c0:	ce 01       	movw	r24, r28
    47c2:	83 96       	adiw	r24, 0x23	; 35
    47c4:	b8 01       	movw	r22, r16
    47c6:	41 e0       	ldi	r20, 0x01	; 1
    47c8:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
	if (res == FR_OK) {
    47cc:	88 23       	and	r24, r24
    47ce:	09 f5       	brne	.+66     	; 0x4812 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    47d0:	ce 01       	movw	r24, r28
    47d2:	01 96       	adiw	r24, 0x01	; 1
    47d4:	89 a3       	std	Y+33, r24	; 0x21
    47d6:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    47d8:	6b a1       	ldd	r22, Y+35	; 0x23
    47da:	7c a1       	ldd	r23, Y+36	; 0x24
    47dc:	c8 01       	movw	r24, r16
    47de:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    47e2:	88 23       	and	r24, r24
    47e4:	b1 f4       	brne	.+44     	; 0x4812 <f_chmod+0x76>
			dir = dj.dir;
    47e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47e8:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    47ea:	30 97       	sbiw	r30, 0x00	; 0
    47ec:	11 f4       	brne	.+4      	; 0x47f2 <f_chmod+0x56>
    47ee:	86 e0       	ldi	r24, 0x06	; 6
    47f0:	10 c0       	rjmp	.+32     	; 0x4812 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    47f2:	9f 2d       	mov	r25, r15
    47f4:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    47f6:	89 2f       	mov	r24, r25
    47f8:	80 95       	com	r24
    47fa:	23 85       	ldd	r18, Z+11	; 0x0b
    47fc:	82 23       	and	r24, r18
    47fe:	9e 21       	and	r25, r14
    4800:	89 2b       	or	r24, r25
    4802:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    4804:	ed 85       	ldd	r30, Y+13	; 0x0d
    4806:	fe 85       	ldd	r31, Y+14	; 0x0e
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    480c:	cf 01       	movw	r24, r30
    480e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4812:	a4 96       	adiw	r28, 0x24	; 36
    4814:	cd bf       	out	0x3d, r28	; 61
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	cf 91       	pop	r28
    481a:	df 91       	pop	r29
    481c:	1f 91       	pop	r17
    481e:	0f 91       	pop	r16
    4820:	ff 90       	pop	r15
    4822:	ef 90       	pop	r14
    4824:	08 95       	ret

00004826 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	df 93       	push	r29
    4830:	cf 93       	push	r28
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
    4836:	a4 97       	sbiw	r28, 0x24	; 36
    4838:	cd bf       	out	0x3d, r28	; 61
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	8b a3       	std	Y+35, r24	; 0x23
    483e:	9c a3       	std	Y+36, r25	; 0x24
    4840:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4842:	4d e0       	ldi	r20, 0x0D	; 13
    4844:	e4 2e       	mov	r14, r20
    4846:	f1 2c       	mov	r15, r1
    4848:	ec 0e       	add	r14, r28
    484a:	fd 1e       	adc	r15, r29
    484c:	ce 01       	movw	r24, r28
    484e:	83 96       	adiw	r24, 0x23	; 35
    4850:	b7 01       	movw	r22, r14
    4852:	41 e0       	ldi	r20, 0x01	; 1
    4854:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
	if (res == FR_OK) {
    4858:	88 23       	and	r24, r24
    485a:	41 f5       	brne	.+80     	; 0x48ac <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    485c:	ce 01       	movw	r24, r28
    485e:	01 96       	adiw	r24, 0x01	; 1
    4860:	89 a3       	std	Y+33, r24	; 0x21
    4862:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    4864:	6b a1       	ldd	r22, Y+35	; 0x23
    4866:	7c a1       	ldd	r23, Y+36	; 0x24
    4868:	c7 01       	movw	r24, r14
    486a:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    486e:	88 23       	and	r24, r24
    4870:	e9 f4       	brne	.+58     	; 0x48ac <f_utime+0x86>
			dir = dj.dir;
    4872:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4874:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    4876:	30 97       	sbiw	r30, 0x00	; 0
    4878:	11 f4       	brne	.+4      	; 0x487e <f_utime+0x58>
    487a:	86 e0       	ldi	r24, 0x06	; 6
    487c:	17 c0       	rjmp	.+46     	; 0x48ac <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    487e:	d8 01       	movw	r26, r16
    4880:	16 96       	adiw	r26, 0x06	; 6
    4882:	8c 91       	ld	r24, X
    4884:	16 97       	sbiw	r26, 0x06	; 6
    4886:	86 8b       	std	Z+22, r24	; 0x16
    4888:	17 96       	adiw	r26, 0x07	; 7
    488a:	8c 91       	ld	r24, X
    488c:	17 97       	sbiw	r26, 0x07	; 7
    488e:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4890:	14 96       	adiw	r26, 0x04	; 4
    4892:	8c 91       	ld	r24, X
    4894:	14 97       	sbiw	r26, 0x04	; 4
    4896:	80 8f       	std	Z+24, r24	; 0x18
    4898:	15 96       	adiw	r26, 0x05	; 5
    489a:	8c 91       	ld	r24, X
    489c:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    489e:	ed 85       	ldd	r30, Y+13	; 0x0d
    48a0:	fe 85       	ldd	r31, Y+14	; 0x0e
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    48a6:	cf 01       	movw	r24, r30
    48a8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    48ac:	a4 96       	adiw	r28, 0x24	; 36
    48ae:	cd bf       	out	0x3d, r28	; 61
    48b0:	de bf       	out	0x3e, r29	; 62
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	1f 91       	pop	r17
    48b8:	0f 91       	pop	r16
    48ba:	ff 90       	pop	r15
    48bc:	ef 90       	pop	r14
    48be:	08 95       	ret

000048c0 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    48c0:	cf 92       	push	r12
    48c2:	df 92       	push	r13
    48c4:	ef 92       	push	r14
    48c6:	ff 92       	push	r15
    48c8:	0f 93       	push	r16
    48ca:	1f 93       	push	r17
    48cc:	df 93       	push	r29
    48ce:	cf 93       	push	r28
    48d0:	cd b7       	in	r28, 0x3d	; 61
    48d2:	de b7       	in	r29, 0x3e	; 62
    48d4:	cf 54       	subi	r28, 0x4F	; 79
    48d6:	d0 40       	sbci	r29, 0x00	; 0
    48d8:	cd bf       	out	0x3d, r28	; 61
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	8e 01       	movw	r16, r28
    48de:	02 5b       	subi	r16, 0xB2	; 178
    48e0:	1f 4f       	sbci	r17, 0xFF	; 255
    48e2:	d8 01       	movw	r26, r16
    48e4:	8d 93       	st	X+, r24
    48e6:	9c 93       	st	X, r25
    48e8:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    48ea:	ce 01       	movw	r24, r28
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	8e ab       	std	Y+54, r24	; 0x36
    48f0:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    48f2:	a2 e2       	ldi	r26, 0x22	; 34
    48f4:	ea 2e       	mov	r14, r26
    48f6:	f1 2c       	mov	r15, r1
    48f8:	ec 0e       	add	r14, r28
    48fa:	fd 1e       	adc	r15, r29
    48fc:	c8 01       	movw	r24, r16
    48fe:	b7 01       	movw	r22, r14
    4900:	41 e0       	ldi	r20, 0x01	; 1
    4902:	0e 94 8e 13 	call	0x271c	; 0x271c <chk_mounted>
	if (res == FR_OK) {
    4906:	88 23       	and	r24, r24
    4908:	09 f0       	breq	.+2      	; 0x490c <f_rename+0x4c>
    490a:	f4 c0       	rjmp	.+488    	; 0x4af4 <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    490c:	8a a1       	ldd	r24, Y+34	; 0x22
    490e:	9b a1       	ldd	r25, Y+35	; 0x23
    4910:	88 af       	std	Y+56, r24	; 0x38
    4912:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    4914:	f8 01       	movw	r30, r16
    4916:	60 81       	ld	r22, Z
    4918:	71 81       	ldd	r23, Z+1	; 0x01
    491a:	c7 01       	movw	r24, r14
    491c:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4920:	88 23       	and	r24, r24
    4922:	09 f0       	breq	.+2      	; 0x4926 <f_rename+0x66>
    4924:	e7 c0       	rjmp	.+462    	; 0x4af4 <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    4926:	8c a9       	ldd	r24, Y+52	; 0x34
    4928:	9d a9       	ldd	r25, Y+53	; 0x35
    492a:	00 97       	sbiw	r24, 0x00	; 0
    492c:	11 f4       	brne	.+4      	; 0x4932 <f_rename+0x72>
    492e:	84 e0       	ldi	r24, 0x04	; 4
    4930:	e1 c0       	rjmp	.+450    	; 0x4af4 <f_rename+0x234>
    4932:	dc 01       	movw	r26, r24
    4934:	fe 01       	movw	r30, r28
    4936:	3d 96       	adiw	r30, 0x0d	; 13
    4938:	04 c0       	rjmp	.+8      	; 0x4942 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    493a:	1a 96       	adiw	r26, 0x0a	; 10
    493c:	8c 91       	ld	r24, X
    493e:	1a 97       	sbiw	r26, 0x0a	; 10
    4940:	81 93       	st	Z+, r24
    4942:	11 96       	adiw	r26, 0x01	; 1
    4944:	ee 15       	cp	r30, r14
    4946:	ff 05       	cpc	r31, r15
    4948:	c1 f7       	brne	.-16     	; 0x493a <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    494a:	de 01       	movw	r26, r28
    494c:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    494e:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4950:	9d 01       	movw	r18, r26
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <f_rename+0x98>
    4954:	81 91       	ld	r24, Z+
    4956:	8d 93       	st	X+, r24
    4958:	e2 17       	cp	r30, r18
    495a:	f3 07       	cpc	r31, r19
    495c:	d9 f7       	brne	.-10     	; 0x4954 <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    495e:	8e 01       	movw	r16, r28
    4960:	08 5c       	subi	r16, 0xC8	; 200
    4962:	1f 4f       	sbci	r17, 0xFF	; 255
    4964:	c8 01       	movw	r24, r16
    4966:	b6 01       	movw	r22, r12
    4968:	0e 94 b5 11 	call	0x236a	; 0x236a <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    496c:	88 23       	and	r24, r24
    496e:	11 f4       	brne	.+4      	; 0x4974 <f_rename+0xb4>
    4970:	88 e0       	ldi	r24, 0x08	; 8
    4972:	c0 c0       	rjmp	.+384    	; 0x4af4 <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    4974:	84 30       	cpi	r24, 0x04	; 4
    4976:	09 f0       	breq	.+2      	; 0x497a <f_rename+0xba>
    4978:	bd c0       	rjmp	.+378    	; 0x4af4 <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    497a:	c8 01       	movw	r24, r16
    497c:	0e 94 b1 10 	call	0x2162	; 0x2162 <dir_register>
		if (res == FR_OK) {
    4980:	88 23       	and	r24, r24
    4982:	09 f0       	breq	.+2      	; 0x4986 <f_rename+0xc6>
    4984:	b7 c0       	rjmp	.+366    	; 0x4af4 <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    4986:	fe 01       	movw	r30, r28
    4988:	e6 5b       	subi	r30, 0xB6	; 182
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	40 81       	ld	r20, Z
    498e:	51 81       	ldd	r21, Z+1	; 0x01
    4990:	da 01       	movw	r26, r20
    4992:	fe 01       	movw	r30, r28
    4994:	3f 96       	adiw	r30, 0x0f	; 15
    4996:	04 c0       	rjmp	.+8      	; 0x49a0 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4998:	81 91       	ld	r24, Z+
    499a:	1c 96       	adiw	r26, 0x0c	; 12
    499c:	8c 93       	st	X, r24
    499e:	1c 97       	sbiw	r26, 0x0c	; 12
    49a0:	11 96       	adiw	r26, 0x01	; 1
    49a2:	ee 15       	cp	r30, r14
    49a4:	ff 05       	cpc	r31, r15
    49a6:	c1 f7       	brne	.-16     	; 0x4998 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    49a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49aa:	80 62       	ori	r24, 0x20	; 32
    49ac:	da 01       	movw	r26, r20
    49ae:	1b 96       	adiw	r26, 0x0b	; 11
    49b0:	8c 93       	st	X, r24
    49b2:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    49b4:	ea a1       	ldd	r30, Y+34	; 0x22
    49b6:	fb a1       	ldd	r31, Y+35	; 0x23
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    49bc:	1b 96       	adiw	r26, 0x0b	; 11
    49be:	8c 91       	ld	r24, X
    49c0:	1b 97       	sbiw	r26, 0x0b	; 11
    49c2:	84 ff       	sbrs	r24, 4
    49c4:	8b c0       	rjmp	.+278    	; 0x4adc <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    49c6:	c8 ac       	ldd	r12, Y+56	; 0x38
    49c8:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    49ca:	5a 96       	adiw	r26, 0x1a	; 26
    49cc:	2c 91       	ld	r18, X
    49ce:	5a 97       	sbiw	r26, 0x1a	; 26
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	54 96       	adiw	r26, 0x14	; 20
    49d4:	8c 91       	ld	r24, X
    49d6:	54 97       	sbiw	r26, 0x14	; 20
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	28 2b       	or	r18, r24
    49dc:	39 2b       	or	r19, r25
    49de:	55 96       	adiw	r26, 0x15	; 21
    49e0:	9c 91       	ld	r25, X
    49e2:	55 97       	sbiw	r26, 0x15	; 21
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	28 2b       	or	r18, r24
    49e8:	39 2b       	or	r19, r25
    49ea:	5b 96       	adiw	r26, 0x1b	; 27
    49ec:	9c 91       	ld	r25, X
    49ee:	80 e0       	ldi	r24, 0x00	; 0
    49f0:	28 2b       	or	r18, r24
    49f2:	39 2b       	or	r19, r25
    49f4:	79 01       	movw	r14, r18
    49f6:	00 e0       	ldi	r16, 0x00	; 0
    49f8:	10 e0       	ldi	r17, 0x00	; 0
    49fa:	8e ef       	ldi	r24, 0xFE	; 254
    49fc:	9f ef       	ldi	r25, 0xFF	; 255
    49fe:	af ef       	ldi	r26, 0xFF	; 255
    4a00:	bf ef       	ldi	r27, 0xFF	; 255
    4a02:	e8 0e       	add	r14, r24
    4a04:	f9 1e       	adc	r15, r25
    4a06:	0a 1f       	adc	r16, r26
    4a08:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4a0a:	f6 01       	movw	r30, r12
    4a0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a0e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4a10:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4a12:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4a14:	02 97       	sbiw	r24, 0x02	; 2
    4a16:	a1 09       	sbc	r26, r1
    4a18:	b1 09       	sbc	r27, r1
    4a1a:	e8 16       	cp	r14, r24
    4a1c:	f9 06       	cpc	r15, r25
    4a1e:	0a 07       	cpc	r16, r26
    4a20:	1b 07       	cpc	r17, r27
    4a22:	08 f0       	brcs	.+2      	; 0x4a26 <f_rename+0x166>
    4a24:	66 c0       	rjmp	.+204    	; 0x4af2 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4a26:	22 81       	ldd	r18, Z+2	; 0x02
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	50 e0       	ldi	r21, 0x00	; 0
    4a2e:	c8 01       	movw	r24, r16
    4a30:	b7 01       	movw	r22, r14
    4a32:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    4a36:	ab 01       	movw	r20, r22
    4a38:	bc 01       	movw	r22, r24
    4a3a:	f6 01       	movw	r30, r12
    4a3c:	86 a1       	ldd	r24, Z+38	; 0x26
    4a3e:	97 a1       	ldd	r25, Z+39	; 0x27
    4a40:	a0 a5       	ldd	r26, Z+40	; 0x28
    4a42:	b1 a5       	ldd	r27, Z+41	; 0x29
    4a44:	48 0f       	add	r20, r24
    4a46:	59 1f       	adc	r21, r25
    4a48:	6a 1f       	adc	r22, r26
    4a4a:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4a4c:	41 15       	cp	r20, r1
    4a4e:	51 05       	cpc	r21, r1
    4a50:	61 05       	cpc	r22, r1
    4a52:	71 05       	cpc	r23, r1
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <f_rename+0x198>
    4a56:	4d c0       	rjmp	.+154    	; 0x4af2 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4a58:	c6 01       	movw	r24, r12
    4a5a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_window>
					dir = dj_new.fs->win+32;
    4a5e:	a8 ad       	ldd	r26, Y+56	; 0x38
    4a60:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4a62:	88 23       	and	r24, r24
    4a64:	09 f0       	breq	.+2      	; 0x4a68 <f_rename+0x1a8>
    4a66:	46 c0       	rjmp	.+140    	; 0x4af4 <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4a68:	bd 01       	movw	r22, r26
    4a6a:	62 5b       	subi	r22, 0xB2	; 178
    4a6c:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4a6e:	fb 01       	movw	r30, r22
    4a70:	81 81       	ldd	r24, Z+1	; 0x01
    4a72:	8e 32       	cpi	r24, 0x2E	; 46
    4a74:	99 f5       	brne	.+102    	; 0x4adc <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4a76:	8c 91       	ld	r24, X
    4a78:	83 30       	cpi	r24, 0x03	; 3
    4a7a:	b1 f4       	brne	.+44     	; 0x4aa8 <f_rename+0x1e8>
    4a7c:	fe 01       	movw	r30, r28
    4a7e:	fe 96       	adiw	r30, 0x3e	; 62
    4a80:	20 81       	ld	r18, Z
    4a82:	31 81       	ldd	r19, Z+1	; 0x01
    4a84:	42 81       	ldd	r20, Z+2	; 0x02
    4a86:	53 81       	ldd	r21, Z+3	; 0x03
    4a88:	92 96       	adiw	r26, 0x22	; 34
    4a8a:	8d 91       	ld	r24, X+
    4a8c:	9d 91       	ld	r25, X+
    4a8e:	0d 90       	ld	r0, X+
    4a90:	bc 91       	ld	r27, X
    4a92:	a0 2d       	mov	r26, r0
    4a94:	28 17       	cp	r18, r24
    4a96:	39 07       	cpc	r19, r25
    4a98:	4a 07       	cpc	r20, r26
    4a9a:	5b 07       	cpc	r21, r27
    4a9c:	29 f4       	brne	.+10     	; 0x4aa8 <f_rename+0x1e8>
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e0       	ldi	r20, 0x00	; 0
    4aa4:	50 e0       	ldi	r21, 0x00	; 0
    4aa6:	06 c0       	rjmp	.+12     	; 0x4ab4 <f_rename+0x1f4>
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	fe 96       	adiw	r30, 0x3e	; 62
    4aac:	20 81       	ld	r18, Z
    4aae:	31 81       	ldd	r19, Z+1	; 0x01
    4ab0:	42 81       	ldd	r20, Z+2	; 0x02
    4ab2:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4ab4:	db 01       	movw	r26, r22
    4ab6:	5a 96       	adiw	r26, 0x1a	; 26
    4ab8:	2c 93       	st	X, r18
    4aba:	5a 97       	sbiw	r26, 0x1a	; 26
    4abc:	83 2f       	mov	r24, r19
    4abe:	99 27       	eor	r25, r25
    4ac0:	5b 96       	adiw	r26, 0x1b	; 27
    4ac2:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4ac4:	ca 01       	movw	r24, r20
    4ac6:	aa 27       	eor	r26, r26
    4ac8:	bb 27       	eor	r27, r27
    4aca:	fb 01       	movw	r30, r22
    4acc:	84 8b       	std	Z+20, r24	; 0x14
    4ace:	89 2f       	mov	r24, r25
    4ad0:	99 27       	eor	r25, r25
    4ad2:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4ad4:	e8 ad       	ldd	r30, Y+56	; 0x38
    4ad6:	f9 ad       	ldd	r31, Y+57	; 0x39
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4adc:	ce 01       	movw	r24, r28
    4ade:	82 96       	adiw	r24, 0x22	; 34
    4ae0:	0e 94 08 11 	call	0x2210	; 0x2210 <dir_remove>
				if (res == FR_OK)
    4ae4:	88 23       	and	r24, r24
    4ae6:	31 f4       	brne	.+12     	; 0x4af4 <f_rename+0x234>
					res = sync(dj_old.fs);
    4ae8:	8a a1       	ldd	r24, Y+34	; 0x22
    4aea:	9b a1       	ldd	r25, Y+35	; 0x23
    4aec:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <sync>
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <f_rename+0x234>
    4af2:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4af4:	c1 5b       	subi	r28, 0xB1	; 177
    4af6:	df 4f       	sbci	r29, 0xFF	; 255
    4af8:	cd bf       	out	0x3d, r28	; 61
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	cf 91       	pop	r28
    4afe:	df 91       	pop	r29
    4b00:	1f 91       	pop	r17
    4b02:	0f 91       	pop	r16
    4b04:	ff 90       	pop	r15
    4b06:	ef 90       	pop	r14
    4b08:	df 90       	pop	r13
    4b0a:	cf 90       	pop	r12
    4b0c:	08 95       	ret

00004b0e <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4b0e:	2f 92       	push	r2
    4b10:	3f 92       	push	r3
    4b12:	4f 92       	push	r4
    4b14:	5f 92       	push	r5
    4b16:	6f 92       	push	r6
    4b18:	7f 92       	push	r7
    4b1a:	8f 92       	push	r8
    4b1c:	9f 92       	push	r9
    4b1e:	af 92       	push	r10
    4b20:	bf 92       	push	r11
    4b22:	cf 92       	push	r12
    4b24:	df 92       	push	r13
    4b26:	ef 92       	push	r14
    4b28:	ff 92       	push	r15
    4b2a:	0f 93       	push	r16
    4b2c:	1f 93       	push	r17
    4b2e:	df 93       	push	r29
    4b30:	cf 93       	push	r28
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
    4b36:	a4 97       	sbiw	r28, 0x24	; 36
    4b38:	cd bf       	out	0x3d, r28	; 61
    4b3a:	de bf       	out	0x3e, r29	; 62
    4b3c:	68 a3       	std	Y+32, r22	; 0x20
    4b3e:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4b40:	82 30       	cpi	r24, 0x02	; 2
    4b42:	10 f0       	brcs	.+4      	; 0x4b48 <f_mkfs+0x3a>
    4b44:	8b e0       	ldi	r24, 0x0B	; 11
    4b46:	e2 c4       	rjmp	.+2500   	; 0x550c <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4b48:	28 a1       	ldd	r18, Y+32	; 0x20
    4b4a:	22 30       	cpi	r18, 0x02	; 2
    4b4c:	08 f0       	brcs	.+2      	; 0x4b50 <f_mkfs+0x42>
    4b4e:	db c4       	rjmp	.+2486   	; 0x5506 <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4b50:	a8 2f       	mov	r26, r24
    4b52:	b0 e0       	ldi	r27, 0x00	; 0
    4b54:	aa 0f       	add	r26, r26
    4b56:	bb 1f       	adc	r27, r27
    4b58:	fd 01       	movw	r30, r26
    4b5a:	ee 54       	subi	r30, 0x4E	; 78
    4b5c:	fb 4c       	sbci	r31, 0xCB	; 203
    4b5e:	c0 80       	ld	r12, Z
    4b60:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4b62:	c1 14       	cp	r12, r1
    4b64:	d1 04       	cpc	r13, r1
    4b66:	11 f4       	brne	.+4      	; 0x4b6c <f_mkfs+0x5e>
    4b68:	8c e0       	ldi	r24, 0x0C	; 12
    4b6a:	d0 c4       	rjmp	.+2464   	; 0x550c <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4b6c:	f6 01       	movw	r30, r12
    4b6e:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4b70:	a5 5e       	subi	r26, 0xE5	; 229
    4b72:	b2 4d       	sbci	r27, 0xD2	; 210
    4b74:	fc 91       	ld	r31, X
    4b76:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4b78:	8f 2f       	mov	r24, r31
    4b7a:	0e 94 ca 05 	call	0xb94	; 0xb94 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4b7e:	80 ff       	sbrs	r24, 0
    4b80:	02 c0       	rjmp	.+4      	; 0x4b86 <f_mkfs+0x78>
    4b82:	83 e0       	ldi	r24, 0x03	; 3
    4b84:	c3 c4       	rjmp	.+2438   	; 0x550c <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4b86:	82 ff       	sbrs	r24, 2
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <f_mkfs+0x80>
    4b8a:	8a e0       	ldi	r24, 0x0A	; 10
    4b8c:	bf c4       	rjmp	.+2430   	; 0x550c <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4b8e:	89 89       	ldd	r24, Y+17	; 0x11
    4b90:	61 e0       	ldi	r22, 0x01	; 1
    4b92:	ae 01       	movw	r20, r28
    4b94:	4f 5f       	subi	r20, 0xFF	; 255
    4b96:	5f 4f       	sbci	r21, 0xFF	; 255
    4b98:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disk_ioctl>
    4b9c:	88 23       	and	r24, r24
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <f_mkfs+0x94>
    4ba0:	b2 c4       	rjmp	.+2404   	; 0x5506 <f_mkfs+0x9f8>
    4ba2:	89 81       	ldd	r24, Y+1	; 0x01
    4ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba6:	ab 81       	ldd	r26, Y+3	; 0x03
    4ba8:	bc 81       	ldd	r27, Y+4	; 0x04
    4baa:	80 3d       	cpi	r24, 0xD0	; 208
    4bac:	27 e0       	ldi	r18, 0x07	; 7
    4bae:	92 07       	cpc	r25, r18
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	a2 07       	cpc	r26, r18
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	b2 07       	cpc	r27, r18
    4bb8:	08 f4       	brcc	.+2      	; 0x4bbc <f_mkfs+0xae>
    4bba:	a5 c4       	rjmp	.+2378   	; 0x5506 <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4bbc:	81 50       	subi	r24, 0x01	; 1
    4bbe:	90 40       	sbci	r25, 0x00	; 0
    4bc0:	a0 4d       	sbci	r26, 0xD0	; 208
    4bc2:	b7 40       	sbci	r27, 0x07	; 7
    4bc4:	40 f0       	brcs	.+16     	; 0x4bd6 <f_mkfs+0xc8>
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	a0 ed       	ldi	r26, 0xD0	; 208
    4bcc:	b7 e0       	ldi	r27, 0x07	; 7
    4bce:	89 83       	std	Y+1, r24	; 0x01
    4bd0:	9a 83       	std	Y+2, r25	; 0x02
    4bd2:	ab 83       	std	Y+3, r26	; 0x03
    4bd4:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4bd6:	48 a1       	ldd	r20, Y+32	; 0x20
    4bd8:	44 23       	and	r20, r20
    4bda:	29 f0       	breq	.+10     	; 0x4be6 <f_mkfs+0xd8>
    4bdc:	1a 8e       	std	Y+26, r1	; 0x1a
    4bde:	1b 8e       	std	Y+27, r1	; 0x1b
    4be0:	1c 8e       	std	Y+28, r1	; 0x1c
    4be2:	1d 8e       	std	Y+29, r1	; 0x1d
    4be4:	08 c0       	rjmp	.+16     	; 0x4bf6 <f_mkfs+0xe8>
    4be6:	8f e3       	ldi	r24, 0x3F	; 63
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	a0 e0       	ldi	r26, 0x00	; 0
    4bec:	b0 e0       	ldi	r27, 0x00	; 0
    4bee:	8a 8f       	std	Y+26, r24	; 0x1a
    4bf0:	9b 8f       	std	Y+27, r25	; 0x1b
    4bf2:	ac 8f       	std	Y+28, r26	; 0x1c
    4bf4:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4bf6:	89 80       	ldd	r8, Y+1	; 0x01
    4bf8:	9a 80       	ldd	r9, Y+2	; 0x02
    4bfa:	ab 80       	ldd	r10, Y+3	; 0x03
    4bfc:	bc 80       	ldd	r11, Y+4	; 0x04
    4bfe:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4c00:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4c02:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4c04:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4c06:	82 1a       	sub	r8, r18
    4c08:	93 0a       	sbc	r9, r19
    4c0a:	a4 0a       	sbc	r10, r20
    4c0c:	b5 0a       	sbc	r11, r21
    4c0e:	89 82       	std	Y+1, r8	; 0x01
    4c10:	9a 82       	std	Y+2, r9	; 0x02
    4c12:	ab 82       	std	Y+3, r10	; 0x03
    4c14:	bc 82       	std	Y+4, r11	; 0x04
    4c16:	80 e0       	ldi	r24, 0x00	; 0
    4c18:	92 e0       	ldi	r25, 0x02	; 2
    4c1a:	a0 e0       	ldi	r26, 0x00	; 0
    4c1c:	b0 e0       	ldi	r27, 0x00	; 0
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4c22:	73 01       	movw	r14, r6
    4c24:	00 e0       	ldi	r16, 0x00	; 0
    4c26:	10 e0       	ldi	r17, 0x00	; 0
    4c28:	09 c0       	rjmp	.+18     	; 0x4c3c <f_mkfs+0x12e>
    4c2a:	88 0f       	add	r24, r24
    4c2c:	99 1f       	adc	r25, r25
    4c2e:	aa 1f       	adc	r26, r26
    4c30:	bb 1f       	adc	r27, r27
    4c32:	2f 5f       	subi	r18, 0xFF	; 255
    4c34:	3f 4f       	sbci	r19, 0xFF	; 255
    4c36:	27 30       	cpi	r18, 0x07	; 7
    4c38:	31 05       	cpc	r19, r1
    4c3a:	31 f0       	breq	.+12     	; 0x4c48 <f_mkfs+0x13a>
    4c3c:	8e 15       	cp	r24, r14
    4c3e:	9f 05       	cpc	r25, r15
    4c40:	a0 07       	cpc	r26, r16
    4c42:	b1 07       	cpc	r27, r17
    4c44:	91 f7       	brne	.-28     	; 0x4c2a <f_mkfs+0x11c>
    4c46:	05 c0       	rjmp	.+10     	; 0x4c52 <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4c48:	8e 15       	cp	r24, r14
    4c4a:	9f 05       	cpc	r25, r15
    4c4c:	a0 07       	cpc	r26, r16
    4c4e:	b1 07       	cpc	r27, r17
    4c50:	19 f4       	brne	.+6      	; 0x4c58 <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4c52:	61 14       	cp	r6, r1
    4c54:	71 04       	cpc	r7, r1
    4c56:	11 f5       	brne	.+68     	; 0x4c9c <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4c58:	e0 eb       	ldi	r30, 0xB0	; 176
    4c5a:	f3 e3       	ldi	r31, 0x33	; 51
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	50 e0       	ldi	r21, 0x00	; 0
    4c64:	81 91       	ld	r24, Z+
    4c66:	91 91       	ld	r25, Z+
    4c68:	a1 91       	ld	r26, Z+
    4c6a:	b1 91       	ld	r27, Z+
    4c6c:	b9 01       	movw	r22, r18
    4c6e:	14 2f       	mov	r17, r20
    4c70:	05 2f       	mov	r16, r21
    4c72:	2f 5f       	subi	r18, 0xFF	; 255
    4c74:	3f 4f       	sbci	r19, 0xFF	; 255
    4c76:	4f 4f       	sbci	r20, 0xFF	; 255
    4c78:	5f 4f       	sbci	r21, 0xFF	; 255
    4c7a:	88 16       	cp	r8, r24
    4c7c:	99 06       	cpc	r9, r25
    4c7e:	aa 06       	cpc	r10, r26
    4c80:	bb 06       	cpc	r11, r27
    4c82:	80 f3       	brcs	.-32     	; 0x4c64 <f_mkfs+0x156>
    4c84:	cb 01       	movw	r24, r22
    4c86:	6d 83       	std	Y+5, r22	; 0x05
    4c88:	9e 83       	std	Y+6, r25	; 0x06
    4c8a:	1f 83       	std	Y+7, r17	; 0x07
    4c8c:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4c8e:	fb 01       	movw	r30, r22
    4c90:	ee 0f       	add	r30, r30
    4c92:	ff 1f       	adc	r31, r31
    4c94:	e6 56       	subi	r30, 0x66	; 102
    4c96:	fc 4c       	sbci	r31, 0xCC	; 204
    4c98:	60 80       	ld	r6, Z
    4c9a:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	63 16       	cp	r6, r19
    4ca0:	32 e0       	ldi	r19, 0x02	; 2
    4ca2:	73 06       	cpc	r7, r19
    4ca4:	18 f4       	brcc	.+6      	; 0x4cac <f_mkfs+0x19e>
    4ca6:	61 2c       	mov	r6, r1
    4ca8:	f2 e0       	ldi	r31, 0x02	; 2
    4caa:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4cac:	13 01       	movw	r2, r6
    4cae:	23 2c       	mov	r2, r3
    4cb0:	33 24       	eor	r3, r3
    4cb2:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4cb4:	c1 01       	movw	r24, r2
    4cb6:	a0 e0       	ldi	r26, 0x00	; 0
    4cb8:	b0 e0       	ldi	r27, 0x00	; 0
    4cba:	8d 87       	std	Y+13, r24	; 0x0d
    4cbc:	9e 87       	std	Y+14, r25	; 0x0e
    4cbe:	af 87       	std	Y+15, r26	; 0x0f
    4cc0:	b8 8b       	std	Y+16, r27	; 0x10
    4cc2:	c5 01       	movw	r24, r10
    4cc4:	b4 01       	movw	r22, r8
    4cc6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cc8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cca:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ccc:	58 89       	ldd	r21, Y+16	; 0x10
    4cce:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    4cd2:	c9 01       	movw	r24, r18
    4cd4:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4cd6:	85 3f       	cpi	r24, 0xF5	; 245
    4cd8:	ef e0       	ldi	r30, 0x0F	; 15
    4cda:	9e 07       	cpc	r25, r30
    4cdc:	e0 e0       	ldi	r30, 0x00	; 0
    4cde:	ae 07       	cpc	r26, r30
    4ce0:	e0 e0       	ldi	r30, 0x00	; 0
    4ce2:	be 07       	cpc	r27, r30
    4ce4:	08 f4       	brcc	.+2      	; 0x4ce8 <f_mkfs+0x1da>
    4ce6:	28 c4       	rjmp	.+2128   	; 0x5538 <f_mkfs+0xa2a>
    4ce8:	f8 a1       	ldd	r31, Y+32	; 0x20
    4cea:	2f 2f       	mov	r18, r31
    4cec:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4cee:	85 3f       	cpi	r24, 0xF5	; 245
    4cf0:	4f ef       	ldi	r20, 0xFF	; 255
    4cf2:	94 07       	cpc	r25, r20
    4cf4:	40 e0       	ldi	r20, 0x00	; 0
    4cf6:	a4 07       	cpc	r26, r20
    4cf8:	40 e0       	ldi	r20, 0x00	; 0
    4cfa:	b4 07       	cpc	r27, r20
    4cfc:	50 f5       	brcc	.+84     	; 0x4d52 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4cfe:	7c 01       	movw	r14, r24
    4d00:	8d 01       	movw	r16, r26
    4d02:	ee 0c       	add	r14, r14
    4d04:	ff 1c       	adc	r15, r15
    4d06:	00 1f       	adc	r16, r16
    4d08:	11 1f       	adc	r17, r17
    4d0a:	83 e0       	ldi	r24, 0x03	; 3
    4d0c:	92 e0       	ldi	r25, 0x02	; 2
    4d0e:	a0 e0       	ldi	r26, 0x00	; 0
    4d10:	b0 e0       	ldi	r27, 0x00	; 0
    4d12:	e8 0e       	add	r14, r24
    4d14:	f9 1e       	adc	r15, r25
    4d16:	0a 1f       	adc	r16, r26
    4d18:	1b 1f       	adc	r17, r27
    4d1a:	69 e0       	ldi	r22, 0x09	; 9
    4d1c:	16 95       	lsr	r17
    4d1e:	07 95       	ror	r16
    4d20:	f7 94       	ror	r15
    4d22:	e7 94       	ror	r14
    4d24:	6a 95       	dec	r22
    4d26:	d1 f7       	brne	.-12     	; 0x4d1c <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4d28:	2f 5f       	subi	r18, 0xFF	; 255
    4d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d2c:	c9 01       	movw	r24, r18
    4d2e:	aa 27       	eor	r26, r26
    4d30:	97 fd       	sbrc	r25, 7
    4d32:	a0 95       	com	r26
    4d34:	ba 2f       	mov	r27, r26
    4d36:	8e 8b       	std	Y+22, r24	; 0x16
    4d38:	9f 8b       	std	Y+23, r25	; 0x17
    4d3a:	a8 8f       	std	Y+24, r26	; 0x18
    4d3c:	b9 8f       	std	Y+25, r27	; 0x19
    4d3e:	20 e2       	ldi	r18, 0x20	; 32
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	40 e0       	ldi	r20, 0x00	; 0
    4d44:	50 e0       	ldi	r21, 0x00	; 0
    4d46:	2a 8b       	std	Y+18, r18	; 0x12
    4d48:	3b 8b       	std	Y+19, r19	; 0x13
    4d4a:	4c 8b       	std	Y+20, r20	; 0x14
    4d4c:	5d 8b       	std	Y+21, r21	; 0x15
    4d4e:	32 e0       	ldi	r19, 0x02	; 2
    4d50:	2a c0       	rjmp	.+84     	; 0x4da6 <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4d52:	7c 01       	movw	r14, r24
    4d54:	8d 01       	movw	r16, r26
    4d56:	52 e0       	ldi	r21, 0x02	; 2
    4d58:	ee 0c       	add	r14, r14
    4d5a:	ff 1c       	adc	r15, r15
    4d5c:	00 1f       	adc	r16, r16
    4d5e:	11 1f       	adc	r17, r17
    4d60:	5a 95       	dec	r21
    4d62:	d1 f7       	brne	.-12     	; 0x4d58 <f_mkfs+0x24a>
    4d64:	87 e0       	ldi	r24, 0x07	; 7
    4d66:	92 e0       	ldi	r25, 0x02	; 2
    4d68:	a0 e0       	ldi	r26, 0x00	; 0
    4d6a:	b0 e0       	ldi	r27, 0x00	; 0
    4d6c:	e8 0e       	add	r14, r24
    4d6e:	f9 1e       	adc	r15, r25
    4d70:	0a 1f       	adc	r16, r26
    4d72:	1b 1f       	adc	r17, r27
    4d74:	49 e0       	ldi	r20, 0x09	; 9
    4d76:	16 95       	lsr	r17
    4d78:	07 95       	ror	r16
    4d7a:	f7 94       	ror	r15
    4d7c:	e7 94       	ror	r14
    4d7e:	4a 95       	dec	r20
    4d80:	d1 f7       	brne	.-12     	; 0x4d76 <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4d82:	81 e2       	ldi	r24, 0x21	; 33
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	82 1b       	sub	r24, r18
    4d88:	93 0b       	sbc	r25, r19
    4d8a:	9c 01       	movw	r18, r24
    4d8c:	44 27       	eor	r20, r20
    4d8e:	37 fd       	sbrc	r19, 7
    4d90:	40 95       	com	r20
    4d92:	54 2f       	mov	r21, r20
    4d94:	2e 8b       	std	Y+22, r18	; 0x16
    4d96:	3f 8b       	std	Y+23, r19	; 0x17
    4d98:	48 8f       	std	Y+24, r20	; 0x18
    4d9a:	59 8f       	std	Y+25, r21	; 0x19
    4d9c:	1a 8a       	std	Y+18, r1	; 0x12
    4d9e:	1b 8a       	std	Y+19, r1	; 0x13
    4da0:	1c 8a       	std	Y+20, r1	; 0x14
    4da2:	1d 8a       	std	Y+21, r1	; 0x15
    4da4:	33 e0       	ldi	r19, 0x03	; 3
    4da6:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4da8:	89 89       	ldd	r24, Y+17	; 0x11
    4daa:	63 e0       	ldi	r22, 0x03	; 3
    4dac:	ae 01       	movw	r20, r28
    4dae:	4b 5f       	subi	r20, 0xFB	; 251
    4db0:	5f 4f       	sbci	r21, 0xFF	; 255
    4db2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disk_ioctl>
    4db6:	88 23       	and	r24, r24
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <f_mkfs+0x2ae>
    4dba:	a5 c3       	rjmp	.+1866   	; 0x5506 <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4dbc:	8e 89       	ldd	r24, Y+22	; 0x16
    4dbe:	9f 89       	ldd	r25, Y+23	; 0x17
    4dc0:	a8 8d       	ldd	r26, Y+24	; 0x18
    4dc2:	b9 8d       	ldd	r27, Y+25	; 0x19
    4dc4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4dc6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4dc8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4dca:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4dcc:	82 0f       	add	r24, r18
    4dce:	93 1f       	adc	r25, r19
    4dd0:	a4 1f       	adc	r26, r20
    4dd2:	b5 1f       	adc	r27, r21
    4dd4:	89 87       	std	Y+9, r24	; 0x09
    4dd6:	9a 87       	std	Y+10, r25	; 0x0a
    4dd8:	ab 87       	std	Y+11, r26	; 0x0b
    4dda:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4ddc:	2a 89       	ldd	r18, Y+18	; 0x12
    4dde:	3b 89       	ldd	r19, Y+19	; 0x13
    4de0:	4c 89       	ldd	r20, Y+20	; 0x14
    4de2:	5d 89       	ldd	r21, Y+21	; 0x15
    4de4:	2e 0d       	add	r18, r14
    4de6:	3f 1d       	adc	r19, r15
    4de8:	40 1f       	adc	r20, r16
    4dea:	51 1f       	adc	r21, r17
    4dec:	28 0f       	add	r18, r24
    4dee:	39 1f       	adc	r19, r25
    4df0:	4a 1f       	adc	r20, r26
    4df2:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4df4:	8d 81       	ldd	r24, Y+5	; 0x05
    4df6:	9e 81       	ldd	r25, Y+6	; 0x06
    4df8:	af 81       	ldd	r26, Y+7	; 0x07
    4dfa:	b8 85       	ldd	r27, Y+8	; 0x08
    4dfc:	4c 01       	movw	r8, r24
    4dfe:	5d 01       	movw	r10, r26
    4e00:	08 94       	sec
    4e02:	81 08       	sbc	r8, r1
    4e04:	91 08       	sbc	r9, r1
    4e06:	a1 08       	sbc	r10, r1
    4e08:	b1 08       	sbc	r11, r1
    4e0a:	82 0e       	add	r8, r18
    4e0c:	93 1e       	adc	r9, r19
    4e0e:	a4 1e       	adc	r10, r20
    4e10:	b5 1e       	adc	r11, r21
    4e12:	b0 95       	com	r27
    4e14:	a0 95       	com	r26
    4e16:	90 95       	com	r25
    4e18:	81 95       	neg	r24
    4e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e1c:	af 4f       	sbci	r26, 0xFF	; 255
    4e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e20:	88 22       	and	r8, r24
    4e22:	99 22       	and	r9, r25
    4e24:	aa 22       	and	r10, r26
    4e26:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4e28:	27 01       	movw	r4, r14
    4e2a:	38 01       	movw	r6, r16
    4e2c:	42 1a       	sub	r4, r18
    4e2e:	53 0a       	sbc	r5, r19
    4e30:	64 0a       	sbc	r6, r20
    4e32:	75 0a       	sbc	r7, r21
    4e34:	48 0c       	add	r4, r8
    4e36:	59 1c       	adc	r5, r9
    4e38:	6a 1c       	adc	r6, r10
    4e3a:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4e3c:	e9 80       	ldd	r14, Y+1	; 0x01
    4e3e:	fa 80       	ldd	r15, Y+2	; 0x02
    4e40:	0b 81       	ldd	r16, Y+3	; 0x03
    4e42:	1c 81       	ldd	r17, Y+4	; 0x04
    4e44:	c8 01       	movw	r24, r16
    4e46:	b7 01       	movw	r22, r14
    4e48:	2e 89       	ldd	r18, Y+22	; 0x16
    4e4a:	3f 89       	ldd	r19, Y+23	; 0x17
    4e4c:	48 8d       	ldd	r20, Y+24	; 0x18
    4e4e:	59 8d       	ldd	r21, Y+25	; 0x19
    4e50:	62 1b       	sub	r22, r18
    4e52:	73 0b       	sbc	r23, r19
    4e54:	84 0b       	sbc	r24, r20
    4e56:	95 0b       	sbc	r25, r21
    4e58:	64 19       	sub	r22, r4
    4e5a:	75 09       	sbc	r23, r5
    4e5c:	86 09       	sbc	r24, r6
    4e5e:	97 09       	sbc	r25, r7
    4e60:	2a 89       	ldd	r18, Y+18	; 0x12
    4e62:	3b 89       	ldd	r19, Y+19	; 0x13
    4e64:	4c 89       	ldd	r20, Y+20	; 0x14
    4e66:	5d 89       	ldd	r21, Y+21	; 0x15
    4e68:	62 1b       	sub	r22, r18
    4e6a:	73 0b       	sbc	r23, r19
    4e6c:	84 0b       	sbc	r24, r20
    4e6e:	95 0b       	sbc	r25, r21
    4e70:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e72:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e74:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e76:	58 89       	ldd	r21, Y+16	; 0x10
    4e78:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    4e7c:	29 a3       	std	Y+33, r18	; 0x21
    4e7e:	3a a3       	std	Y+34, r19	; 0x22
    4e80:	4b a3       	std	Y+35, r20	; 0x23
    4e82:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4e84:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4e86:	32 30       	cpi	r19, 0x02	; 2
    4e88:	51 f4       	brne	.+20     	; 0x4e9e <f_mkfs+0x390>
    4e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    4e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    4e8e:	ab a1       	ldd	r26, Y+35	; 0x23
    4e90:	bc a1       	ldd	r27, Y+36	; 0x24
    4e92:	85 5f       	subi	r24, 0xF5	; 245
    4e94:	9f 40       	sbci	r25, 0x0F	; 15
    4e96:	a0 40       	sbci	r26, 0x00	; 0
    4e98:	b0 40       	sbci	r27, 0x00	; 0
    4e9a:	70 f4       	brcc	.+28     	; 0x4eb8 <f_mkfs+0x3aa>
    4e9c:	34 c3       	rjmp	.+1640   	; 0x5506 <f_mkfs+0x9f8>
    4e9e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4ea0:	f3 30       	cpi	r31, 0x03	; 3
    4ea2:	51 f4       	brne	.+20     	; 0x4eb8 <f_mkfs+0x3aa>
    4ea4:	29 a1       	ldd	r18, Y+33	; 0x21
    4ea6:	3a a1       	ldd	r19, Y+34	; 0x22
    4ea8:	4b a1       	ldd	r20, Y+35	; 0x23
    4eaa:	5c a1       	ldd	r21, Y+36	; 0x24
    4eac:	25 5f       	subi	r18, 0xF5	; 245
    4eae:	3f 4f       	sbci	r19, 0xFF	; 255
    4eb0:	40 40       	sbci	r20, 0x00	; 0
    4eb2:	50 40       	sbci	r21, 0x00	; 0
    4eb4:	08 f4       	brcc	.+2      	; 0x4eb8 <f_mkfs+0x3aa>
    4eb6:	27 c3       	rjmp	.+1614   	; 0x5506 <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4eb8:	8d 82       	std	Y+5, r8	; 0x05
    4eba:	9e 82       	std	Y+6, r9	; 0x06
    4ebc:	af 82       	std	Y+7, r10	; 0x07
    4ebe:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4ec0:	98 a1       	ldd	r25, Y+32	; 0x20
    4ec2:	99 23       	and	r25, r25
    4ec4:	11 f0       	breq	.+4      	; 0x4eca <f_mkfs+0x3bc>
    4ec6:	10 ef       	ldi	r17, 0xF0	; 240
    4ec8:	9c c0       	rjmp	.+312    	; 0x5002 <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4eca:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ecc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4ece:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4ed0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4ed2:	4e 0d       	add	r20, r14
    4ed4:	5f 1d       	adc	r21, r15
    4ed6:	60 1f       	adc	r22, r16
    4ed8:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4eda:	3e e2       	ldi	r19, 0x2E	; 46
    4edc:	e3 2e       	mov	r14, r19
    4ede:	f1 2c       	mov	r15, r1
    4ee0:	ec 0c       	add	r14, r12
    4ee2:	fd 1c       	adc	r15, r13
    4ee4:	f7 01       	movw	r30, r14
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	32 e0       	ldi	r19, 0x02	; 2
    4eea:	01 c0       	rjmp	.+2      	; 0x4eee <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4eec:	11 92       	st	Z+, r1
    4eee:	21 50       	subi	r18, 0x01	; 1
    4ef0:	30 40       	sbci	r19, 0x00	; 0
    4ef2:	af ef       	ldi	r26, 0xFF	; 255
    4ef4:	2f 3f       	cpi	r18, 0xFF	; 255
    4ef6:	3a 07       	cpc	r19, r26
    4ef8:	c9 f7       	brne	.-14     	; 0x4eec <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4efa:	86 01       	movw	r16, r12
    4efc:	04 51       	subi	r16, 0x14	; 20
    4efe:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4f00:	80 e8       	ldi	r24, 0x80	; 128
    4f02:	f8 01       	movw	r30, r16
    4f04:	80 83       	st	Z, r24
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	81 83       	std	Z+1, r24	; 0x01
    4f0a:	82 83       	std	Z+2, r24	; 0x02
    4f0c:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4f0e:	40 30       	cpi	r20, 0x00	; 0
    4f10:	f4 e0       	ldi	r31, 0x04	; 4
    4f12:	5f 07       	cpc	r21, r31
    4f14:	fb ef       	ldi	r31, 0xFB	; 251
    4f16:	6f 07       	cpc	r22, r31
    4f18:	f0 e0       	ldi	r31, 0x00	; 0
    4f1a:	7f 07       	cpc	r23, r31
    4f1c:	b0 f4       	brcc	.+44     	; 0x4f4a <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4f1e:	cb 01       	movw	r24, r22
    4f20:	ba 01       	movw	r22, r20
    4f22:	21 ec       	ldi	r18, 0xC1	; 193
    4f24:	3e e3       	ldi	r19, 0x3E	; 62
    4f26:	40 e0       	ldi	r20, 0x00	; 0
    4f28:	50 e0       	ldi	r21, 0x00	; 0
    4f2a:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    4f2e:	c9 01       	movw	r24, r18
    4f30:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4f32:	f8 01       	movw	r30, r16
    4f34:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4f36:	22 e0       	ldi	r18, 0x02	; 2
    4f38:	b6 95       	lsr	r27
    4f3a:	a7 95       	ror	r26
    4f3c:	97 95       	ror	r25
    4f3e:	87 95       	ror	r24
    4f40:	2a 95       	dec	r18
    4f42:	d1 f7       	brne	.-12     	; 0x4f38 <f_mkfs+0x42a>
    4f44:	8f 63       	ori	r24, 0x3F	; 63
    4f46:	86 83       	std	Z+6, r24	; 0x06
    4f48:	07 c0       	rjmp	.+14     	; 0x4f58 <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4f4a:	8f ef       	ldi	r24, 0xFF	; 255
    4f4c:	d8 01       	movw	r26, r16
    4f4e:	16 96       	adiw	r26, 0x06	; 6
    4f50:	8c 93       	st	X, r24
    4f52:	16 97       	sbiw	r26, 0x06	; 6
    4f54:	17 96       	adiw	r26, 0x07	; 7
    4f56:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4f58:	8e ef       	ldi	r24, 0xFE	; 254
    4f5a:	f8 01       	movw	r30, r16
    4f5c:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4f5e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4f60:	f3 30       	cpi	r31, 0x03	; 3
    4f62:	81 f0       	breq	.+32     	; 0x4f84 <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4f64:	89 81       	ldd	r24, Y+1	; 0x01
    4f66:	9a 81       	ldd	r25, Y+2	; 0x02
    4f68:	ab 81       	ldd	r26, Y+3	; 0x03
    4f6a:	bc 81       	ldd	r27, Y+4	; 0x04
    4f6c:	80 50       	subi	r24, 0x00	; 0
    4f6e:	90 40       	sbci	r25, 0x00	; 0
    4f70:	a1 40       	sbci	r26, 0x01	; 1
    4f72:	b0 40       	sbci	r27, 0x00	; 0
    4f74:	10 f0       	brcs	.+4      	; 0x4f7a <f_mkfs+0x46c>
    4f76:	86 e0       	ldi	r24, 0x06	; 6
    4f78:	01 c0       	rjmp	.+2      	; 0x4f7c <f_mkfs+0x46e>
    4f7a:	84 e0       	ldi	r24, 0x04	; 4
    4f7c:	d8 01       	movw	r26, r16
    4f7e:	14 96       	adiw	r26, 0x04	; 4
    4f80:	8c 93       	st	X, r24
    4f82:	03 c0       	rjmp	.+6      	; 0x4f8a <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4f84:	8c e0       	ldi	r24, 0x0C	; 12
    4f86:	f8 01       	movw	r30, r16
    4f88:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4f8a:	8f e3       	ldi	r24, 0x3F	; 63
    4f8c:	d8 01       	movw	r26, r16
    4f8e:	18 96       	adiw	r26, 0x08	; 8
    4f90:	8c 93       	st	X, r24
    4f92:	18 97       	sbiw	r26, 0x08	; 8
    4f94:	19 96       	adiw	r26, 0x09	; 9
    4f96:	1c 92       	st	X, r1
    4f98:	19 97       	sbiw	r26, 0x09	; 9
    4f9a:	1a 96       	adiw	r26, 0x0a	; 10
    4f9c:	1c 92       	st	X, r1
    4f9e:	1a 97       	sbiw	r26, 0x0a	; 10
    4fa0:	1b 96       	adiw	r26, 0x0b	; 11
    4fa2:	1c 92       	st	X, r1
    4fa4:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4fa6:	89 81       	ldd	r24, Y+1	; 0x01
    4fa8:	1c 96       	adiw	r26, 0x0c	; 12
    4faa:	8c 93       	st	X, r24
    4fac:	1c 97       	sbiw	r26, 0x0c	; 12
    4fae:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb0:	1d 96       	adiw	r26, 0x0d	; 13
    4fb2:	8c 93       	st	X, r24
    4fb4:	89 81       	ldd	r24, Y+1	; 0x01
    4fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb8:	ab 81       	ldd	r26, Y+3	; 0x03
    4fba:	bc 81       	ldd	r27, Y+4	; 0x04
    4fbc:	cd 01       	movw	r24, r26
    4fbe:	aa 27       	eor	r26, r26
    4fc0:	bb 27       	eor	r27, r27
    4fc2:	f8 01       	movw	r30, r16
    4fc4:	86 87       	std	Z+14, r24	; 0x0e
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
    4fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fca:	ab 81       	ldd	r26, Y+3	; 0x03
    4fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    4fce:	8b 2f       	mov	r24, r27
    4fd0:	99 27       	eor	r25, r25
    4fd2:	aa 27       	eor	r26, r26
    4fd4:	bb 27       	eor	r27, r27
    4fd6:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4fd8:	00 5c       	subi	r16, 0xC0	; 192
    4fda:	1f 4f       	sbci	r17, 0xFF	; 255
    4fdc:	85 e5       	ldi	r24, 0x55	; 85
    4fde:	d8 01       	movw	r26, r16
    4fe0:	8d 93       	st	X+, r24
    4fe2:	fd 01       	movw	r30, r26
    4fe4:	8a ea       	ldi	r24, 0xAA	; 170
    4fe6:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4fe8:	89 89       	ldd	r24, Y+17	; 0x11
    4fea:	b7 01       	movw	r22, r14
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	40 e0       	ldi	r20, 0x00	; 0
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	01 e0       	ldi	r16, 0x01	; 1
    4ff6:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    4ffa:	88 23       	and	r24, r24
    4ffc:	09 f0       	breq	.+2      	; 0x5000 <f_mkfs+0x4f2>
    4ffe:	85 c2       	rjmp	.+1290   	; 0x550a <f_mkfs+0x9fc>
    5000:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    5002:	5e e2       	ldi	r21, 0x2E	; 46
    5004:	e5 2e       	mov	r14, r21
    5006:	f1 2c       	mov	r15, r1
    5008:	ec 0c       	add	r14, r12
    500a:	fd 1c       	adc	r15, r13
    500c:	f7 01       	movw	r30, r14
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	92 e0       	ldi	r25, 0x02	; 2
    5012:	01 c0       	rjmp	.+2      	; 0x5016 <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5014:	11 92       	st	Z+, r1
    5016:	01 97       	sbiw	r24, 0x01	; 1
    5018:	bf ef       	ldi	r27, 0xFF	; 255
    501a:	8f 3f       	cpi	r24, 0xFF	; 255
    501c:	9b 07       	cpc	r25, r27
    501e:	d1 f7       	brne	.-12     	; 0x5014 <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    5020:	8b ee       	ldi	r24, 0xEB	; 235
    5022:	f6 01       	movw	r30, r12
    5024:	86 a7       	std	Z+46, r24	; 0x2e
    5026:	8e ef       	ldi	r24, 0xFE	; 254
    5028:	87 a7       	std	Z+47, r24	; 0x2f
    502a:	80 e9       	ldi	r24, 0x90	; 144
    502c:	80 ab       	std	Z+48, r24	; 0x30
    502e:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    5030:	11 ae       	std	Z+57, r1	; 0x39
    5032:	82 e0       	ldi	r24, 0x02	; 2
    5034:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    5036:	2e 8e       	std	Y+30, r2	; 0x1e
    5038:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    503a:	2e 89       	ldd	r18, Y+22	; 0x16
    503c:	24 af       	std	Z+60, r18	; 0x3c
    503e:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    5044:	8a 89       	ldd	r24, Y+18	; 0x12
    5046:	9b 89       	ldd	r25, Y+19	; 0x13
    5048:	ac 89       	ldd	r26, Y+20	; 0x14
    504a:	bd 89       	ldd	r27, Y+21	; 0x15
    504c:	44 e0       	ldi	r20, 0x04	; 4
    504e:	88 0f       	add	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	aa 1f       	adc	r26, r26
    5054:	bb 1f       	adc	r27, r27
    5056:	4a 95       	dec	r20
    5058:	d1 f7       	brne	.-12     	; 0x504e <f_mkfs+0x540>
    505a:	87 af       	std	Z+63, r24	; 0x3f
    505c:	40 e4       	ldi	r20, 0x40	; 64
    505e:	50 e0       	ldi	r21, 0x00	; 0
    5060:	c4 0e       	add	r12, r20
    5062:	d5 1e       	adc	r13, r21
    5064:	89 2f       	mov	r24, r25
    5066:	99 27       	eor	r25, r25
    5068:	d6 01       	movw	r26, r12
    506a:	8c 93       	st	X, r24
    506c:	e0 ec       	ldi	r30, 0xC0	; 192
    506e:	ff ef       	ldi	r31, 0xFF	; 255
    5070:	ce 0e       	add	r12, r30
    5072:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	9a 81       	ldd	r25, Y+2	; 0x02
    5078:	ab 81       	ldd	r26, Y+3	; 0x03
    507a:	bc 81       	ldd	r27, Y+4	; 0x04
    507c:	80 30       	cpi	r24, 0x00	; 0
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	9f 07       	cpc	r25, r31
    5082:	f1 e0       	ldi	r31, 0x01	; 1
    5084:	af 07       	cpc	r26, r31
    5086:	f0 e0       	ldi	r31, 0x00	; 0
    5088:	bf 07       	cpc	r27, r31
    508a:	60 f4       	brcc	.+24     	; 0x50a4 <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    508c:	21 e4       	ldi	r18, 0x41	; 65
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	c2 0e       	add	r12, r18
    5092:	d3 1e       	adc	r13, r19
    5094:	f6 01       	movw	r30, r12
    5096:	81 93       	st	Z+, r24
    5098:	6f 01       	movw	r12, r30
    509a:	8a 81       	ldd	r24, Y+2	; 0x02
    509c:	80 83       	st	Z, r24
    509e:	2e eb       	ldi	r18, 0xBE	; 190
    50a0:	3f ef       	ldi	r19, 0xFF	; 255
    50a2:	1f c0       	rjmp	.+62     	; 0x50e2 <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    50a4:	4e e4       	ldi	r20, 0x4E	; 78
    50a6:	50 e0       	ldi	r21, 0x00	; 0
    50a8:	c4 0e       	add	r12, r20
    50aa:	d5 1e       	adc	r13, r21
    50ac:	f6 01       	movw	r30, r12
    50ae:	81 93       	st	Z+, r24
    50b0:	8a 81       	ldd	r24, Y+2	; 0x02
    50b2:	df 01       	movw	r26, r30
    50b4:	8d 93       	st	X+, r24
    50b6:	6d 01       	movw	r12, r26
    50b8:	89 81       	ldd	r24, Y+1	; 0x01
    50ba:	9a 81       	ldd	r25, Y+2	; 0x02
    50bc:	ab 81       	ldd	r26, Y+3	; 0x03
    50be:	bc 81       	ldd	r27, Y+4	; 0x04
    50c0:	cd 01       	movw	r24, r26
    50c2:	aa 27       	eor	r26, r26
    50c4:	bb 27       	eor	r27, r27
    50c6:	f6 01       	movw	r30, r12
    50c8:	81 93       	st	Z+, r24
    50ca:	6f 01       	movw	r12, r30
    50cc:	89 81       	ldd	r24, Y+1	; 0x01
    50ce:	9a 81       	ldd	r25, Y+2	; 0x02
    50d0:	ab 81       	ldd	r26, Y+3	; 0x03
    50d2:	bc 81       	ldd	r27, Y+4	; 0x04
    50d4:	8b 2f       	mov	r24, r27
    50d6:	99 27       	eor	r25, r25
    50d8:	aa 27       	eor	r26, r26
    50da:	bb 27       	eor	r27, r27
    50dc:	80 83       	st	Z, r24
    50de:	2f ea       	ldi	r18, 0xAF	; 175
    50e0:	3f ef       	ldi	r19, 0xFF	; 255
    50e2:	c2 0e       	add	r12, r18
    50e4:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    50e6:	43 e4       	ldi	r20, 0x43	; 67
    50e8:	50 e0       	ldi	r21, 0x00	; 0
    50ea:	c4 0e       	add	r12, r20
    50ec:	d5 1e       	adc	r13, r21
    50ee:	d6 01       	movw	r26, r12
    50f0:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    50f2:	e3 e0       	ldi	r30, 0x03	; 3
    50f4:	f0 e0       	ldi	r31, 0x00	; 0
    50f6:	ce 0e       	add	r12, r30
    50f8:	df 1e       	adc	r13, r31
    50fa:	8f e3       	ldi	r24, 0x3F	; 63
    50fc:	d6 01       	movw	r26, r12
    50fe:	8d 93       	st	X+, r24
    5100:	fd 01       	movw	r30, r26
    5102:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    5104:	8f ef       	ldi	r24, 0xFF	; 255
    5106:	df 01       	movw	r26, r30
    5108:	8d 93       	st	X+, r24
    510a:	fd 01       	movw	r30, r26
    510c:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    510e:	df 01       	movw	r26, r30
    5110:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5112:	ed 93       	st	X+, r30
    5114:	1d 92       	st	X+, r1
    5116:	fd 01       	movw	r30, r26
    5118:	11 92       	st	Z+, r1
    511a:	6f 01       	movw	r12, r30
    511c:	10 82       	st	Z, r1
    511e:	23 eb       	ldi	r18, 0xB3	; 179
    5120:	3f ef       	ldi	r19, 0xFF	; 255
    5122:	c2 0e       	add	r12, r18
    5124:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    5126:	1d 82       	std	Y+5, r1	; 0x05
    5128:	1e 82       	std	Y+6, r1	; 0x06
    512a:	1f 82       	std	Y+7, r1	; 0x07
    512c:	18 86       	std	Y+8, r1	; 0x08
    512e:	b6 01       	movw	r22, r12
    5130:	6b 5a       	subi	r22, 0xAB	; 171
    5132:	7f 4f       	sbci	r23, 0xFF	; 255
    5134:	85 2d       	mov	r24, r5
    5136:	99 27       	eor	r25, r25
    5138:	d6 01       	movw	r26, r12
    513a:	ae 5a       	subi	r26, 0xAE	; 174
    513c:	bf 4f       	sbci	r27, 0xFF	; 255
    513e:	96 01       	movw	r18, r12
    5140:	2c 5a       	subi	r18, 0xAC	; 172
    5142:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    5144:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5146:	43 30       	cpi	r20, 0x03	; 3
    5148:	41 f1       	breq	.+80     	; 0x519a <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    514a:	fb 01       	movw	r30, r22
    514c:	10 82       	st	Z, r1
    514e:	46 e5       	ldi	r20, 0x56	; 86
    5150:	50 e0       	ldi	r21, 0x00	; 0
    5152:	c4 0e       	add	r12, r20
    5154:	d5 1e       	adc	r13, r21
    5156:	f6 01       	movw	r30, r12
    5158:	11 92       	st	Z+, r1
    515a:	11 92       	st	Z+, r1
    515c:	6f 01       	movw	r12, r30
    515e:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    5160:	4c ee       	ldi	r20, 0xEC	; 236
    5162:	5f ef       	ldi	r21, 0xFF	; 255
    5164:	c4 0e       	add	r12, r20
    5166:	d5 1e       	adc	r13, r21
    5168:	f6 01       	movw	r30, r12
    516a:	41 92       	st	Z+, r4
    516c:	6f 01       	movw	r12, r30
    516e:	80 83       	st	Z, r24
    5170:	4b eb       	ldi	r20, 0xBB	; 187
    5172:	5f ef       	ldi	r21, 0xFF	; 255
    5174:	c4 0e       	add	r12, r20
    5176:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    5178:	80 e8       	ldi	r24, 0x80	; 128
    517a:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    517c:	89 e2       	ldi	r24, 0x29	; 41
    517e:	d9 01       	movw	r26, r18
    5180:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5182:	d7 01       	movw	r26, r14
    5184:	9b 96       	adiw	r26, 0x2b	; 43
    5186:	eb e0       	ldi	r30, 0x0B	; 11
    5188:	f0 e2       	ldi	r31, 0x20	; 32
    518a:	02 c0       	rjmp	.+4      	; 0x5190 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    518c:	81 91       	ld	r24, Z+
    518e:	8d 93       	st	X+, r24
    5190:	20 e2       	ldi	r18, 0x20	; 32
    5192:	ee 31       	cpi	r30, 0x1E	; 30
    5194:	f2 07       	cpc	r31, r18
    5196:	d1 f7       	brne	.-12     	; 0x518c <f_mkfs+0x67e>
    5198:	51 c0       	rjmp	.+162    	; 0x523c <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    519a:	41 e7       	ldi	r20, 0x71	; 113
    519c:	50 e0       	ldi	r21, 0x00	; 0
    519e:	c4 0e       	add	r12, r20
    51a0:	d5 1e       	adc	r13, r21
    51a2:	f6 01       	movw	r30, r12
    51a4:	11 92       	st	Z+, r1
    51a6:	11 92       	st	Z+, r1
    51a8:	11 92       	st	Z+, r1
    51aa:	6f 01       	movw	r12, r30
    51ac:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    51ae:	4c 92       	st	X, r4
    51b0:	4f ed       	ldi	r20, 0xDF	; 223
    51b2:	5f ef       	ldi	r21, 0xFF	; 255
    51b4:	c4 0e       	add	r12, r20
    51b6:	d5 1e       	adc	r13, r21
    51b8:	d6 01       	movw	r26, r12
    51ba:	8c 93       	st	X, r24
    51bc:	c3 01       	movw	r24, r6
    51be:	aa 27       	eor	r26, r26
    51c0:	bb 27       	eor	r27, r27
    51c2:	f9 01       	movw	r30, r18
    51c4:	80 83       	st	Z, r24
    51c6:	87 2d       	mov	r24, r7
    51c8:	99 27       	eor	r25, r25
    51ca:	aa 27       	eor	r26, r26
    51cc:	bb 27       	eor	r27, r27
    51ce:	fb 01       	movw	r30, r22
    51d0:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    51d2:	27 e0       	ldi	r18, 0x07	; 7
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	c2 0e       	add	r12, r18
    51d8:	d3 1e       	adc	r13, r19
    51da:	82 e0       	ldi	r24, 0x02	; 2
    51dc:	d6 01       	movw	r26, r12
    51de:	8d 93       	st	X+, r24
    51e0:	fd 01       	movw	r30, r26
    51e2:	11 92       	st	Z+, r1
    51e4:	df 01       	movw	r26, r30
    51e6:	1d 92       	st	X+, r1
    51e8:	fd 01       	movw	r30, r26
    51ea:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	df 01       	movw	r26, r30
    51f0:	8d 93       	st	X+, r24
    51f2:	fd 01       	movw	r30, r26
    51f4:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    51f6:	86 e0       	ldi	r24, 0x06	; 6
    51f8:	df 01       	movw	r26, r30
    51fa:	8d 93       	st	X+, r24
    51fc:	6d 01       	movw	r12, r26
    51fe:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    5200:	ed e0       	ldi	r30, 0x0D	; 13
    5202:	f0 e0       	ldi	r31, 0x00	; 0
    5204:	ce 0e       	add	r12, r30
    5206:	df 1e       	adc	r13, r31
    5208:	80 e8       	ldi	r24, 0x80	; 128
    520a:	d6 01       	movw	r26, r12
    520c:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    520e:	e2 e0       	ldi	r30, 0x02	; 2
    5210:	f0 e0       	ldi	r31, 0x00	; 0
    5212:	ce 0e       	add	r12, r30
    5214:	df 1e       	adc	r13, r31
    5216:	89 e2       	ldi	r24, 0x29	; 41
    5218:	d6 01       	movw	r26, r12
    521a:	8c 93       	st	X, r24
    521c:	e0 e9       	ldi	r30, 0x90	; 144
    521e:	ff ef       	ldi	r31, 0xFF	; 255
    5220:	ce 0e       	add	r12, r30
    5222:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5224:	d7 01       	movw	r26, r14
    5226:	a9 5b       	subi	r26, 0xB9	; 185
    5228:	bf 4f       	sbci	r27, 0xFF	; 255
    522a:	ef e1       	ldi	r30, 0x1F	; 31
    522c:	f0 e2       	ldi	r31, 0x20	; 32
    522e:	02 c0       	rjmp	.+4      	; 0x5234 <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5230:	81 91       	ld	r24, Z+
    5232:	8d 93       	st	X+, r24
    5234:	20 e2       	ldi	r18, 0x20	; 32
    5236:	e2 33       	cpi	r30, 0x32	; 50
    5238:	f2 07       	cpc	r31, r18
    523a:	d1 f7       	brne	.-12     	; 0x5230 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    523c:	4c e2       	ldi	r20, 0x2C	; 44
    523e:	52 e0       	ldi	r21, 0x02	; 2
    5240:	c4 0e       	add	r12, r20
    5242:	d5 1e       	adc	r13, r21
    5244:	85 e5       	ldi	r24, 0x55	; 85
    5246:	d6 01       	movw	r26, r12
    5248:	8d 93       	st	X+, r24
    524a:	6d 01       	movw	r12, r26
    524c:	8a ea       	ldi	r24, 0xAA	; 170
    524e:	8c 93       	st	X, r24
    5250:	e3 ed       	ldi	r30, 0xD3	; 211
    5252:	fd ef       	ldi	r31, 0xFD	; 253
    5254:	ce 0e       	add	r12, r30
    5256:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    5258:	89 89       	ldd	r24, Y+17	; 0x11
    525a:	b7 01       	movw	r22, r14
    525c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    525e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5260:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5262:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5264:	01 e0       	ldi	r16, 0x01	; 1
    5266:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    526a:	88 23       	and	r24, r24
    526c:	09 f0       	breq	.+2      	; 0x5270 <f_mkfs+0x762>
    526e:	4d c1       	rjmp	.+666    	; 0x550a <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    5270:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5272:	f3 30       	cpi	r31, 0x03	; 3
    5274:	61 f4       	brne	.+24     	; 0x528e <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    5276:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5278:	3b 8d       	ldd	r19, Y+27	; 0x1b
    527a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    527c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    527e:	2a 5f       	subi	r18, 0xFA	; 250
    5280:	3f 4f       	sbci	r19, 0xFF	; 255
    5282:	4f 4f       	sbci	r20, 0xFF	; 255
    5284:	5f 4f       	sbci	r21, 0xFF	; 255
    5286:	89 89       	ldd	r24, Y+17	; 0x11
    5288:	b7 01       	movw	r22, r14
    528a:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    528e:	f7 01       	movw	r30, r14
    5290:	80 e0       	ldi	r24, 0x00	; 0
    5292:	92 e0       	ldi	r25, 0x02	; 2
    5294:	01 c0       	rjmp	.+2      	; 0x5298 <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5296:	11 92       	st	Z+, r1
    5298:	01 97       	sbiw	r24, 0x01	; 1
    529a:	2f ef       	ldi	r18, 0xFF	; 255
    529c:	8f 3f       	cpi	r24, 0xFF	; 255
    529e:	92 07       	cpc	r25, r18
    52a0:	d1 f7       	brne	.-12     	; 0x5296 <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    52a2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    52a4:	33 30       	cpi	r19, 0x03	; 3
    52a6:	31 f1       	breq	.+76     	; 0x52f4 <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    52a8:	31 30       	cpi	r19, 0x01	; 1
    52aa:	29 f0       	breq	.+10     	; 0x52b6 <f_mkfs+0x7a8>
    52ac:	20 e0       	ldi	r18, 0x00	; 0
    52ae:	3f ef       	ldi	r19, 0xFF	; 255
    52b0:	4f ef       	ldi	r20, 0xFF	; 255
    52b2:	5f ef       	ldi	r21, 0xFF	; 255
    52b4:	04 c0       	rjmp	.+8      	; 0x52be <f_mkfs+0x7b0>
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	3f ef       	ldi	r19, 0xFF	; 255
    52ba:	4f ef       	ldi	r20, 0xFF	; 255
    52bc:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    52be:	81 2f       	mov	r24, r17
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	a0 e0       	ldi	r26, 0x00	; 0
    52c4:	b0 e0       	ldi	r27, 0x00	; 0
    52c6:	82 2b       	or	r24, r18
    52c8:	93 2b       	or	r25, r19
    52ca:	a4 2b       	or	r26, r20
    52cc:	b5 2b       	or	r27, r21
    52ce:	8d 83       	std	Y+5, r24	; 0x05
    52d0:	9e 83       	std	Y+6, r25	; 0x06
    52d2:	af 83       	std	Y+7, r26	; 0x07
    52d4:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    52d6:	f6 01       	movw	r30, r12
    52d8:	86 a7       	std	Z+46, r24	; 0x2e
    52da:	29 2f       	mov	r18, r25
    52dc:	33 27       	eor	r19, r19
    52de:	27 a7       	std	Z+47, r18	; 0x2f
    52e0:	9d 01       	movw	r18, r26
    52e2:	44 27       	eor	r20, r20
    52e4:	55 27       	eor	r21, r21
    52e6:	20 ab       	std	Z+48, r18	; 0x30
    52e8:	8b 2f       	mov	r24, r27
    52ea:	99 27       	eor	r25, r25
    52ec:	aa 27       	eor	r26, r26
    52ee:	bb 27       	eor	r27, r27
    52f0:	81 ab       	std	Z+49, r24	; 0x31
    52f2:	27 c0       	rjmp	.+78     	; 0x5342 <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    52f4:	88 ef       	ldi	r24, 0xF8	; 248
    52f6:	d6 01       	movw	r26, r12
    52f8:	9e 96       	adiw	r26, 0x2e	; 46
    52fa:	8c 93       	st	X, r24
    52fc:	9e 97       	sbiw	r26, 0x2e	; 46
    52fe:	8f ef       	ldi	r24, 0xFF	; 255
    5300:	9f 96       	adiw	r26, 0x2f	; 47
    5302:	8c 93       	st	X, r24
    5304:	9f 97       	sbiw	r26, 0x2f	; 47
    5306:	d0 96       	adiw	r26, 0x30	; 48
    5308:	8c 93       	st	X, r24
    530a:	d0 97       	sbiw	r26, 0x30	; 48
    530c:	d1 96       	adiw	r26, 0x31	; 49
    530e:	8c 93       	st	X, r24
    5310:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5312:	d2 96       	adiw	r26, 0x32	; 50
    5314:	8c 93       	st	X, r24
    5316:	d2 97       	sbiw	r26, 0x32	; 50
    5318:	d3 96       	adiw	r26, 0x33	; 51
    531a:	8c 93       	st	X, r24
    531c:	d3 97       	sbiw	r26, 0x33	; 51
    531e:	d4 96       	adiw	r26, 0x34	; 52
    5320:	8c 93       	st	X, r24
    5322:	d4 97       	sbiw	r26, 0x34	; 52
    5324:	d5 96       	adiw	r26, 0x35	; 53
    5326:	8c 93       	st	X, r24
    5328:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    532a:	d6 96       	adiw	r26, 0x36	; 54
    532c:	8c 93       	st	X, r24
    532e:	d6 97       	sbiw	r26, 0x36	; 54
    5330:	d7 96       	adiw	r26, 0x37	; 55
    5332:	8c 93       	st	X, r24
    5334:	d7 97       	sbiw	r26, 0x37	; 55
    5336:	d8 96       	adiw	r26, 0x38	; 56
    5338:	8c 93       	st	X, r24
    533a:	d8 97       	sbiw	r26, 0x38	; 56
    533c:	8f e0       	ldi	r24, 0x0F	; 15
    533e:	d9 96       	adiw	r26, 0x39	; 57
    5340:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5342:	89 89       	ldd	r24, Y+17	; 0x11
    5344:	b7 01       	movw	r22, r14
    5346:	29 85       	ldd	r18, Y+9	; 0x09
    5348:	3a 85       	ldd	r19, Y+10	; 0x0a
    534a:	4b 85       	ldd	r20, Y+11	; 0x0b
    534c:	5c 85       	ldd	r21, Y+12	; 0x0c
    534e:	01 e0       	ldi	r16, 0x01	; 1
    5350:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    5354:	88 23       	and	r24, r24
    5356:	09 f0       	breq	.+2      	; 0x535a <f_mkfs+0x84c>
    5358:	d8 c0       	rjmp	.+432    	; 0x550a <f_mkfs+0x9fc>
    535a:	f7 01       	movw	r30, r14
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	92 e0       	ldi	r25, 0x02	; 2
    5360:	01 c0       	rjmp	.+2      	; 0x5364 <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5362:	11 92       	st	Z+, r1
    5364:	01 97       	sbiw	r24, 0x01	; 1
    5366:	bf ef       	ldi	r27, 0xFF	; 255
    5368:	8f 3f       	cpi	r24, 0xFF	; 255
    536a:	9b 07       	cpc	r25, r27
    536c:	d1 f7       	brne	.-12     	; 0x5362 <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    536e:	89 84       	ldd	r8, Y+9	; 0x09
    5370:	9a 84       	ldd	r9, Y+10	; 0x0a
    5372:	ab 84       	ldd	r10, Y+11	; 0x0b
    5374:	bc 84       	ldd	r11, Y+12	; 0x0c
    5376:	08 94       	sec
    5378:	81 1c       	adc	r8, r1
    537a:	91 1c       	adc	r9, r1
    537c:	a1 1c       	adc	r10, r1
    537e:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	a0 e0       	ldi	r26, 0x00	; 0
    5386:	b0 e0       	ldi	r27, 0x00	; 0
    5388:	16 c0       	rjmp	.+44     	; 0x53b6 <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    538a:	89 89       	ldd	r24, Y+17	; 0x11
    538c:	b7 01       	movw	r22, r14
    538e:	a5 01       	movw	r20, r10
    5390:	94 01       	movw	r18, r8
    5392:	01 e0       	ldi	r16, 0x01	; 1
    5394:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    5398:	88 23       	and	r24, r24
    539a:	09 f0       	breq	.+2      	; 0x539e <f_mkfs+0x890>
    539c:	b6 c0       	rjmp	.+364    	; 0x550a <f_mkfs+0x9fc>
    539e:	08 94       	sec
    53a0:	81 1c       	adc	r8, r1
    53a2:	91 1c       	adc	r9, r1
    53a4:	a1 1c       	adc	r10, r1
    53a6:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    53a8:	8d 81       	ldd	r24, Y+5	; 0x05
    53aa:	9e 81       	ldd	r25, Y+6	; 0x06
    53ac:	af 81       	ldd	r26, Y+7	; 0x07
    53ae:	b8 85       	ldd	r27, Y+8	; 0x08
    53b0:	01 96       	adiw	r24, 0x01	; 1
    53b2:	a1 1d       	adc	r26, r1
    53b4:	b1 1d       	adc	r27, r1
    53b6:	8d 83       	std	Y+5, r24	; 0x05
    53b8:	9e 83       	std	Y+6, r25	; 0x06
    53ba:	af 83       	std	Y+7, r26	; 0x07
    53bc:	b8 87       	std	Y+8, r27	; 0x08
    53be:	8d 81       	ldd	r24, Y+5	; 0x05
    53c0:	9e 81       	ldd	r25, Y+6	; 0x06
    53c2:	af 81       	ldd	r26, Y+7	; 0x07
    53c4:	b8 85       	ldd	r27, Y+8	; 0x08
    53c6:	84 15       	cp	r24, r4
    53c8:	95 05       	cpc	r25, r5
    53ca:	a6 05       	cpc	r26, r6
    53cc:	b7 05       	cpc	r27, r7
    53ce:	e8 f2       	brcs	.-70     	; 0x538a <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    53d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    53d2:	e3 30       	cpi	r30, 0x03	; 3
    53d4:	11 f0       	breq	.+4      	; 0x53da <f_mkfs+0x8cc>
    53d6:	fa 89       	ldd	r31, Y+18	; 0x12
    53d8:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    53da:	24 01       	movw	r4, r8
    53dc:	35 01       	movw	r6, r10
    53de:	08 94       	sec
    53e0:	41 1c       	adc	r4, r1
    53e2:	51 1c       	adc	r5, r1
    53e4:	61 1c       	adc	r6, r1
    53e6:	71 1c       	adc	r7, r1
    53e8:	89 89       	ldd	r24, Y+17	; 0x11
    53ea:	b7 01       	movw	r22, r14
    53ec:	a5 01       	movw	r20, r10
    53ee:	94 01       	movw	r18, r8
    53f0:	01 e0       	ldi	r16, 0x01	; 1
    53f2:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
    53f6:	88 23       	and	r24, r24
    53f8:	09 f0       	breq	.+2      	; 0x53fc <f_mkfs+0x8ee>
    53fa:	87 c0       	rjmp	.+270    	; 0x550a <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    53fc:	2e 8d       	ldd	r18, Y+30	; 0x1e
    53fe:	21 50       	subi	r18, 0x01	; 1
    5400:	2e 8f       	std	Y+30, r18	; 0x1e
    5402:	22 23       	and	r18, r18
    5404:	19 f0       	breq	.+6      	; 0x540c <f_mkfs+0x8fe>
    5406:	53 01       	movw	r10, r6
    5408:	42 01       	movw	r8, r4
    540a:	e7 cf       	rjmp	.-50     	; 0x53da <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    540c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    540e:	33 30       	cpi	r19, 0x03	; 3
    5410:	09 f0       	breq	.+2      	; 0x5414 <f_mkfs+0x906>
    5412:	70 c0       	rjmp	.+224    	; 0x54f4 <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    5414:	4c e2       	ldi	r20, 0x2C	; 44
    5416:	52 e0       	ldi	r21, 0x02	; 2
    5418:	c4 0e       	add	r12, r20
    541a:	d5 1e       	adc	r13, r21
    541c:	85 e5       	ldi	r24, 0x55	; 85
    541e:	d6 01       	movw	r26, r12
    5420:	8d 93       	st	X+, r24
    5422:	6d 01       	movw	r12, r26
    5424:	8a ea       	ldi	r24, 0xAA	; 170
    5426:	8c 93       	st	X, r24
    5428:	e3 ed       	ldi	r30, 0xD3	; 211
    542a:	fd ef       	ldi	r31, 0xFD	; 253
    542c:	ce 0e       	add	r12, r30
    542e:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5430:	82 e5       	ldi	r24, 0x52	; 82
    5432:	d6 01       	movw	r26, r12
    5434:	9e 96       	adiw	r26, 0x2e	; 46
    5436:	8c 93       	st	X, r24
    5438:	9e 97       	sbiw	r26, 0x2e	; 46
    543a:	9f 96       	adiw	r26, 0x2f	; 47
    543c:	8c 93       	st	X, r24
    543e:	9f 97       	sbiw	r26, 0x2f	; 47
    5440:	21 e6       	ldi	r18, 0x61	; 97
    5442:	d0 96       	adiw	r26, 0x30	; 48
    5444:	2c 93       	st	X, r18
    5446:	d0 97       	sbiw	r26, 0x30	; 48
    5448:	91 e4       	ldi	r25, 0x41	; 65
    544a:	d1 96       	adiw	r26, 0x31	; 49
    544c:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    544e:	e2 e1       	ldi	r30, 0x12	; 18
    5450:	f2 e0       	ldi	r31, 0x02	; 2
    5452:	ce 0e       	add	r12, r30
    5454:	df 1e       	adc	r13, r31
    5456:	82 e7       	ldi	r24, 0x72	; 114
    5458:	d6 01       	movw	r26, r12
    545a:	8d 93       	st	X+, r24
    545c:	fd 01       	movw	r30, r26
    545e:	81 93       	st	Z+, r24
    5460:	df 01       	movw	r26, r30
    5462:	9d 93       	st	X+, r25
    5464:	fd 01       	movw	r30, r26
    5466:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    5468:	89 a1       	ldd	r24, Y+33	; 0x21
    546a:	81 50       	subi	r24, 0x01	; 1
    546c:	df 01       	movw	r26, r30
    546e:	8d 93       	st	X+, r24
    5470:	89 a1       	ldd	r24, Y+33	; 0x21
    5472:	9a a1       	ldd	r25, Y+34	; 0x22
    5474:	01 97       	sbiw	r24, 0x01	; 1
    5476:	fd 01       	movw	r30, r26
    5478:	91 93       	st	Z+, r25
    547a:	89 a1       	ldd	r24, Y+33	; 0x21
    547c:	9a a1       	ldd	r25, Y+34	; 0x22
    547e:	ab a1       	ldd	r26, Y+35	; 0x23
    5480:	bc a1       	ldd	r27, Y+36	; 0x24
    5482:	01 97       	sbiw	r24, 0x01	; 1
    5484:	a1 09       	sbc	r26, r1
    5486:	b1 09       	sbc	r27, r1
    5488:	9d 01       	movw	r18, r26
    548a:	44 27       	eor	r20, r20
    548c:	55 27       	eor	r21, r21
    548e:	21 93       	st	Z+, r18
    5490:	8b 2f       	mov	r24, r27
    5492:	99 27       	eor	r25, r25
    5494:	aa 27       	eor	r26, r26
    5496:	bb 27       	eor	r27, r27
    5498:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    549a:	8f ef       	ldi	r24, 0xFF	; 255
    549c:	df 01       	movw	r26, r30
    549e:	8d 93       	st	X+, r24
    54a0:	fd 01       	movw	r30, r26
    54a2:	81 93       	st	Z+, r24
    54a4:	df 01       	movw	r26, r30
    54a6:	8d 93       	st	X+, r24
    54a8:	fd 01       	movw	r30, r26
    54aa:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    54ac:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54ae:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54b0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54b2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54b4:	2f 5f       	subi	r18, 0xFF	; 255
    54b6:	3f 4f       	sbci	r19, 0xFF	; 255
    54b8:	4f 4f       	sbci	r20, 0xFF	; 255
    54ba:	5f 4f       	sbci	r21, 0xFF	; 255
    54bc:	2a 8f       	std	Y+26, r18	; 0x1a
    54be:	3b 8f       	std	Y+27, r19	; 0x1b
    54c0:	4c 8f       	std	Y+28, r20	; 0x1c
    54c2:	5d 8f       	std	Y+29, r21	; 0x1d
    54c4:	89 89       	ldd	r24, Y+17	; 0x11
    54c6:	b7 01       	movw	r22, r14
    54c8:	01 e0       	ldi	r16, 0x01	; 1
    54ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    54ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54d2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    54d4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    54d6:	06 96       	adiw	r24, 0x06	; 6
    54d8:	a1 1d       	adc	r26, r1
    54da:	b1 1d       	adc	r27, r1
    54dc:	8a 8f       	std	Y+26, r24	; 0x1a
    54de:	9b 8f       	std	Y+27, r25	; 0x1b
    54e0:	ac 8f       	std	Y+28, r26	; 0x1c
    54e2:	bd 8f       	std	Y+29, r27	; 0x1d
    54e4:	89 89       	ldd	r24, Y+17	; 0x11
    54e6:	b7 01       	movw	r22, r14
    54e8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54ea:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54ec:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54ee:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    54f4:	89 89       	ldd	r24, Y+17	; 0x11
    54f6:	60 e0       	ldi	r22, 0x00	; 0
    54f8:	40 e0       	ldi	r20, 0x00	; 0
    54fa:	50 e0       	ldi	r21, 0x00	; 0
    54fc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disk_ioctl>
    5500:	88 23       	and	r24, r24
    5502:	21 f0       	breq	.+8      	; 0x550c <f_mkfs+0x9fe>
    5504:	02 c0       	rjmp	.+4      	; 0x550a <f_mkfs+0x9fc>
    5506:	8e e0       	ldi	r24, 0x0E	; 14
    5508:	01 c0       	rjmp	.+2      	; 0x550c <f_mkfs+0x9fe>
    550a:	81 e0       	ldi	r24, 0x01	; 1
}
    550c:	a4 96       	adiw	r28, 0x24	; 36
    550e:	cd bf       	out	0x3d, r28	; 61
    5510:	de bf       	out	0x3e, r29	; 62
    5512:	cf 91       	pop	r28
    5514:	df 91       	pop	r29
    5516:	1f 91       	pop	r17
    5518:	0f 91       	pop	r16
    551a:	ff 90       	pop	r15
    551c:	ef 90       	pop	r14
    551e:	df 90       	pop	r13
    5520:	cf 90       	pop	r12
    5522:	bf 90       	pop	r11
    5524:	af 90       	pop	r10
    5526:	9f 90       	pop	r9
    5528:	8f 90       	pop	r8
    552a:	7f 90       	pop	r7
    552c:	6f 90       	pop	r6
    552e:	5f 90       	pop	r5
    5530:	4f 90       	pop	r4
    5532:	3f 90       	pop	r3
    5534:	2f 90       	pop	r2
    5536:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    5538:	7c 01       	movw	r14, r24
    553a:	8d 01       	movw	r16, r26
    553c:	ee 0c       	add	r14, r14
    553e:	ff 1c       	adc	r15, r15
    5540:	00 1f       	adc	r16, r16
    5542:	11 1f       	adc	r17, r17
    5544:	e8 0e       	add	r14, r24
    5546:	f9 1e       	adc	r15, r25
    5548:	0a 1f       	adc	r16, r26
    554a:	1b 1f       	adc	r17, r27
    554c:	08 94       	sec
    554e:	e1 1c       	adc	r14, r1
    5550:	f1 1c       	adc	r15, r1
    5552:	01 1d       	adc	r16, r1
    5554:	11 1d       	adc	r17, r1
    5556:	16 95       	lsr	r17
    5558:	07 95       	ror	r16
    555a:	f7 94       	ror	r15
    555c:	e7 94       	ror	r14
    555e:	22 e0       	ldi	r18, 0x02	; 2
    5560:	32 e0       	ldi	r19, 0x02	; 2
    5562:	40 e0       	ldi	r20, 0x00	; 0
    5564:	50 e0       	ldi	r21, 0x00	; 0
    5566:	e2 0e       	add	r14, r18
    5568:	f3 1e       	adc	r15, r19
    556a:	04 1f       	adc	r16, r20
    556c:	15 1f       	adc	r17, r21
    556e:	b9 e0       	ldi	r27, 0x09	; 9
    5570:	16 95       	lsr	r17
    5572:	07 95       	ror	r16
    5574:	f7 94       	ror	r15
    5576:	e7 94       	ror	r14
    5578:	ba 95       	dec	r27
    557a:	d1 f7       	brne	.-12     	; 0x5570 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    557c:	38 a1       	ldd	r19, Y+32	; 0x20
    557e:	83 2f       	mov	r24, r19
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	01 96       	adiw	r24, 0x01	; 1
    5584:	9c 01       	movw	r18, r24
    5586:	44 27       	eor	r20, r20
    5588:	37 fd       	sbrc	r19, 7
    558a:	40 95       	com	r20
    558c:	54 2f       	mov	r21, r20
    558e:	2e 8b       	std	Y+22, r18	; 0x16
    5590:	3f 8b       	std	Y+23, r19	; 0x17
    5592:	48 8f       	std	Y+24, r20	; 0x18
    5594:	59 8f       	std	Y+25, r21	; 0x19
    5596:	80 e2       	ldi	r24, 0x20	; 32
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	a0 e0       	ldi	r26, 0x00	; 0
    559c:	b0 e0       	ldi	r27, 0x00	; 0
    559e:	8a 8b       	std	Y+18, r24	; 0x12
    55a0:	9b 8b       	std	Y+19, r25	; 0x13
    55a2:	ac 8b       	std	Y+20, r26	; 0x14
    55a4:	bd 8b       	std	Y+21, r27	; 0x15
    55a6:	91 e0       	ldi	r25, 0x01	; 1
    55a8:	9f 8f       	std	Y+31, r25	; 0x1f
    55aa:	fe cb       	rjmp	.-2052   	; 0x4da8 <f_mkfs+0x29a>

000055ac <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    55ac:	6f 92       	push	r6
    55ae:	7f 92       	push	r7
    55b0:	8f 92       	push	r8
    55b2:	9f 92       	push	r9
    55b4:	af 92       	push	r10
    55b6:	bf 92       	push	r11
    55b8:	cf 92       	push	r12
    55ba:	df 92       	push	r13
    55bc:	ef 92       	push	r14
    55be:	ff 92       	push	r15
    55c0:	0f 93       	push	r16
    55c2:	1f 93       	push	r17
    55c4:	df 93       	push	r29
    55c6:	cf 93       	push	r28
    55c8:	0f 92       	push	r0
    55ca:	0f 92       	push	r0
    55cc:	cd b7       	in	r28, 0x3d	; 61
    55ce:	de b7       	in	r29, 0x3e	; 62
    55d0:	5c 01       	movw	r10, r24
    55d2:	6b 01       	movw	r12, r22
    55d4:	4a 01       	movw	r8, r20
    55d6:	8c 01       	movw	r16, r24
    55d8:	ee 24       	eor	r14, r14
    55da:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    55dc:	08 94       	sec
    55de:	c1 08       	sbc	r12, r1
    55e0:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    55e2:	3e 01       	movw	r6, r28
    55e4:	08 94       	sec
    55e6:	61 1c       	adc	r6, r1
    55e8:	71 1c       	adc	r7, r1
    55ea:	13 c0       	rjmp	.+38     	; 0x5612 <f_gets+0x66>
    55ec:	c4 01       	movw	r24, r8
    55ee:	b8 01       	movw	r22, r16
    55f0:	41 e0       	ldi	r20, 0x01	; 1
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	93 01       	movw	r18, r6
    55f6:	0e 94 2f 18 	call	0x305e	; 0x305e <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	9a 81       	ldd	r25, Y+2	; 0x02
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	59 f4       	brne	.+22     	; 0x5618 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    5602:	08 94       	sec
    5604:	e1 1c       	adc	r14, r1
    5606:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    5608:	f8 01       	movw	r30, r16
    560a:	81 91       	ld	r24, Z+
    560c:	8f 01       	movw	r16, r30
    560e:	8a 30       	cpi	r24, 0x0A	; 10
    5610:	19 f0       	breq	.+6      	; 0x5618 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5612:	ec 14       	cp	r14, r12
    5614:	fd 04       	cpc	r15, r13
    5616:	54 f3       	brlt	.-44     	; 0x55ec <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    5618:	f8 01       	movw	r30, r16
    561a:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    561c:	ef 28       	or	r14, r15
    561e:	11 f4       	brne	.+4      	; 0x5624 <f_gets+0x78>
    5620:	aa 24       	eor	r10, r10
    5622:	bb 24       	eor	r11, r11
}
    5624:	c5 01       	movw	r24, r10
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	cf 91       	pop	r28
    562c:	df 91       	pop	r29
    562e:	1f 91       	pop	r17
    5630:	0f 91       	pop	r16
    5632:	ff 90       	pop	r15
    5634:	ef 90       	pop	r14
    5636:	df 90       	pop	r13
    5638:	cf 90       	pop	r12
    563a:	bf 90       	pop	r11
    563c:	af 90       	pop	r10
    563e:	9f 90       	pop	r9
    5640:	8f 90       	pop	r8
    5642:	7f 90       	pop	r7
    5644:	6f 90       	pop	r6
    5646:	08 95       	ret

00005648 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    5648:	0f 93       	push	r16
    564a:	1f 93       	push	r17
    564c:	df 93       	push	r29
    564e:	cf 93       	push	r28
    5650:	00 d0       	rcall	.+0      	; 0x5652 <f_putc+0xa>
    5652:	cd b7       	in	r28, 0x3d	; 61
    5654:	de b7       	in	r29, 0x3e	; 62
    5656:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    5658:	61 15       	cp	r22, r1
    565a:	71 05       	cpc	r23, r1
    565c:	91 f0       	breq	.+36     	; 0x5682 <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    565e:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    5660:	cb 01       	movw	r24, r22
    5662:	be 01       	movw	r22, r28
    5664:	6f 5f       	subi	r22, 0xFF	; 255
    5666:	7f 4f       	sbci	r23, 0xFF	; 255
    5668:	41 e0       	ldi	r20, 0x01	; 1
    566a:	50 e0       	ldi	r21, 0x00	; 0
    566c:	9e 01       	movw	r18, r28
    566e:	2e 5f       	subi	r18, 0xFE	; 254
    5670:	3f 4f       	sbci	r19, 0xFF	; 255
    5672:	0e 94 25 1a 	call	0x344a	; 0x344a <f_write>
	return bw ? chr : EOF;		/* Return the result */
    5676:	8a 81       	ldd	r24, Y+2	; 0x02
    5678:	9b 81       	ldd	r25, Y+3	; 0x03
    567a:	89 2b       	or	r24, r25
    567c:	11 f4       	brne	.+4      	; 0x5682 <f_putc+0x3a>
    567e:	0f ef       	ldi	r16, 0xFF	; 255
    5680:	1f ef       	ldi	r17, 0xFF	; 255
}
    5682:	c8 01       	movw	r24, r16
    5684:	23 96       	adiw	r28, 0x03	; 3
    5686:	cd bf       	out	0x3d, r28	; 61
    5688:	de bf       	out	0x3e, r29	; 62
    568a:	cf 91       	pop	r28
    568c:	df 91       	pop	r29
    568e:	1f 91       	pop	r17
    5690:	0f 91       	pop	r16
    5692:	08 95       	ret

00005694 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5694:	ef 92       	push	r14
    5696:	ff 92       	push	r15
    5698:	0f 93       	push	r16
    569a:	1f 93       	push	r17
    569c:	cf 93       	push	r28
    569e:	df 93       	push	r29
    56a0:	8c 01       	movw	r16, r24
    56a2:	7b 01       	movw	r14, r22
    56a4:	c0 e0       	ldi	r28, 0x00	; 0
    56a6:	d0 e0       	ldi	r29, 0x00	; 0
    56a8:	0d c0       	rjmp	.+26     	; 0x56c4 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	b7 01       	movw	r22, r14
    56ae:	0e 94 24 2b 	call	0x5648	; 0x5648 <f_putc>
    56b2:	8f 5f       	subi	r24, 0xFF	; 255
    56b4:	9f 4f       	sbci	r25, 0xFF	; 255
    56b6:	19 f4       	brne	.+6      	; 0x56be <f_puts+0x2a>
    56b8:	cf ef       	ldi	r28, 0xFF	; 255
    56ba:	df ef       	ldi	r29, 0xFF	; 255
    56bc:	07 c0       	rjmp	.+14     	; 0x56cc <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    56be:	0f 5f       	subi	r16, 0xFF	; 255
    56c0:	1f 4f       	sbci	r17, 0xFF	; 255
    56c2:	21 96       	adiw	r28, 0x01	; 1
    56c4:	f8 01       	movw	r30, r16
    56c6:	80 81       	ld	r24, Z
    56c8:	88 23       	and	r24, r24
    56ca:	79 f7       	brne	.-34     	; 0x56aa <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    56cc:	ce 01       	movw	r24, r28
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	1f 91       	pop	r17
    56d4:	0f 91       	pop	r16
    56d6:	ff 90       	pop	r15
    56d8:	ef 90       	pop	r14
    56da:	08 95       	ret

000056dc <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    56dc:	80 e3       	ldi	r24, 0x30	; 48
    56de:	91 e5       	ldi	r25, 0x51	; 81
    56e0:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <f_close>
}
    56e4:	08 95       	ret

000056e6 <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    56e6:	80 91 a8 06 	lds	r24, 0x06A8
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	80 ff       	sbrs	r24, 0
    56ee:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    56f0:	89 2f       	mov	r24, r25
    56f2:	08 95       	ret

000056f4 <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    56f4:	e0 ea       	ldi	r30, 0xA0	; 160
    56f6:	f6 e0       	ldi	r31, 0x06	; 6
    56f8:	80 85       	ldd	r24, Z+8	; 0x08
    56fa:	86 95       	lsr	r24
    56fc:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    56fe:	81 70       	andi	r24, 0x01	; 1
    5700:	08 95       	ret

00005702 <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    5702:	af 92       	push	r10
    5704:	bf 92       	push	r11
    5706:	cf 92       	push	r12
    5708:	df 92       	push	r13
    570a:	ef 92       	push	r14
    570c:	ff 92       	push	r15
    570e:	0f 93       	push	r16
    5710:	1f 93       	push	r17
    5712:	df 93       	push	r29
    5714:	cf 93       	push	r28
    5716:	0f 92       	push	r0
    5718:	0f 92       	push	r0
    571a:	cd b7       	in	r28, 0x3d	; 61
    571c:	de b7       	in	r29, 0x3e	; 62
    571e:	5c 01       	movw	r10, r24
    5720:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    5722:	80 e3       	ldi	r24, 0x30	; 48
    5724:	91 e5       	ldi	r25, 0x51	; 81
    5726:	b5 01       	movw	r22, r10
    5728:	a6 01       	movw	r20, r12
    572a:	9e 01       	movw	r18, r28
    572c:	2f 5f       	subi	r18, 0xFF	; 255
    572e:	3f 4f       	sbci	r19, 0xFF	; 255
    5730:	0e 94 25 1a 	call	0x344a	; 0x344a <f_write>
    5734:	60 e0       	ldi	r22, 0x00	; 0
    5736:	70 e0       	ldi	r23, 0x00	; 0
    5738:	3b c0       	rjmp	.+118    	; 0x57b0 <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    573a:	e0 90 32 59 	lds	r14, 0x5932
    573e:	f0 90 33 59 	lds	r15, 0x5933
    5742:	00 91 34 59 	lds	r16, 0x5934
    5746:	10 91 35 59 	lds	r17, 0x5935
    574a:	20 91 32 59 	lds	r18, 0x5932
    574e:	30 91 33 59 	lds	r19, 0x5933
    5752:	40 91 34 59 	lds	r20, 0x5934
    5756:	50 91 35 59 	lds	r21, 0x5935
    575a:	30 70       	andi	r19, 0x00	; 0
    575c:	40 70       	andi	r20, 0x00	; 0
    575e:	50 70       	andi	r21, 0x00	; 0
    5760:	f5 01       	movw	r30, r10
    5762:	e6 0f       	add	r30, r22
    5764:	f7 1f       	adc	r31, r23
    5766:	80 81       	ld	r24, Z
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	a0 e0       	ldi	r26, 0x00	; 0
    576c:	b0 e0       	ldi	r27, 0x00	; 0
    576e:	28 27       	eor	r18, r24
    5770:	39 27       	eor	r19, r25
    5772:	4a 27       	eor	r20, r26
    5774:	5b 27       	eor	r21, r27
    5776:	22 0f       	add	r18, r18
    5778:	33 1f       	adc	r19, r19
    577a:	22 0f       	add	r18, r18
    577c:	33 1f       	adc	r19, r19
    577e:	21 5e       	subi	r18, 0xE1	; 225
    5780:	32 4d       	sbci	r19, 0xD2	; 210
    5782:	ef 2c       	mov	r14, r15
    5784:	f0 2e       	mov	r15, r16
    5786:	01 2f       	mov	r16, r17
    5788:	11 27       	eor	r17, r17
    578a:	f9 01       	movw	r30, r18
    578c:	80 81       	ld	r24, Z
    578e:	91 81       	ldd	r25, Z+1	; 0x01
    5790:	a2 81       	ldd	r26, Z+2	; 0x02
    5792:	b3 81       	ldd	r27, Z+3	; 0x03
    5794:	e8 26       	eor	r14, r24
    5796:	f9 26       	eor	r15, r25
    5798:	0a 27       	eor	r16, r26
    579a:	1b 27       	eor	r17, r27
    579c:	e0 92 32 59 	sts	0x5932, r14
    57a0:	f0 92 33 59 	sts	0x5933, r15
    57a4:	00 93 34 59 	sts	0x5934, r16
    57a8:	10 93 35 59 	sts	0x5935, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    57ac:	6f 5f       	subi	r22, 0xFF	; 255
    57ae:	7f 4f       	sbci	r23, 0xFF	; 255
    57b0:	6c 15       	cp	r22, r12
    57b2:	7d 05       	cpc	r23, r13
    57b4:	10 f2       	brcs	.-124    	; 0x573a <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    57b6:	0f 90       	pop	r0
    57b8:	0f 90       	pop	r0
    57ba:	cf 91       	pop	r28
    57bc:	df 91       	pop	r29
    57be:	1f 91       	pop	r17
    57c0:	0f 91       	pop	r16
    57c2:	ff 90       	pop	r15
    57c4:	ef 90       	pop	r14
    57c6:	df 90       	pop	r13
    57c8:	cf 90       	pop	r12
    57ca:	bf 90       	pop	r11
    57cc:	af 90       	pop	r10
    57ce:	08 95       	ret

000057d0 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    57d0:	60 93 47 46 	sts	0x4647, r22
	tmp32[1] = (uint8_t)(var >> 8);
    57d4:	27 2f       	mov	r18, r23
    57d6:	38 2f       	mov	r19, r24
    57d8:	49 2f       	mov	r20, r25
    57da:	55 27       	eor	r21, r21
    57dc:	20 93 48 46 	sts	0x4648, r18
	tmp32[2] = (uint8_t)(var >> 16);
    57e0:	9c 01       	movw	r18, r24
    57e2:	44 27       	eor	r20, r20
    57e4:	55 27       	eor	r21, r21
    57e6:	20 93 49 46 	sts	0x4649, r18
	tmp32[3] = (uint8_t)(var >> 24);
    57ea:	69 2f       	mov	r22, r25
    57ec:	77 27       	eor	r23, r23
    57ee:	88 27       	eor	r24, r24
    57f0:	99 27       	eor	r25, r25
    57f2:	60 93 4a 46 	sts	0x464A, r22
	SD_WriteBuffer(tmp32,4);
    57f6:	87 e4       	ldi	r24, 0x47	; 71
    57f8:	96 e4       	ldi	r25, 0x46	; 70
    57fa:	64 e0       	ldi	r22, 0x04	; 4
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	0e 94 81 2b 	call	0x5702	; 0x5702 <SD_WriteBuffer>
}
    5802:	08 95       	ret

00005804 <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    5804:	80 93 76 5e 	sts	0x5E76, r24
	tmp16[1] = (uint8_t)(var >> 8);
    5808:	90 93 77 5e 	sts	0x5E77, r25
	SD_WriteBuffer(tmp16,2);
    580c:	86 e7       	ldi	r24, 0x76	; 118
    580e:	9e e5       	ldi	r25, 0x5E	; 94
    5810:	62 e0       	ldi	r22, 0x02	; 2
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	0e 94 81 2b 	call	0x5702	; 0x5702 <SD_WriteBuffer>
}
    5818:	08 95       	ret

0000581a <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    581a:	80 93 b6 4c 	sts	0x4CB6, r24
	SD_WriteBuffer(tmp8,1);
    581e:	86 eb       	ldi	r24, 0xB6	; 182
    5820:	9c e4       	ldi	r25, 0x4C	; 76
    5822:	61 e0       	ldi	r22, 0x01	; 1
    5824:	70 e0       	ldi	r23, 0x00	; 0
    5826:	0e 94 81 2b 	call	0x5702	; 0x5702 <SD_WriteBuffer>
}
    582a:	08 95       	ret

0000582c <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    582c:	8f ef       	ldi	r24, 0xFF	; 255
    582e:	9f ef       	ldi	r25, 0xFF	; 255
    5830:	af ef       	ldi	r26, 0xFF	; 255
    5832:	bf ef       	ldi	r27, 0xFF	; 255
    5834:	80 93 32 59 	sts	0x5932, r24
    5838:	90 93 33 59 	sts	0x5933, r25
    583c:	a0 93 34 59 	sts	0x5934, r26
    5840:	b0 93 35 59 	sts	0x5935, r27
}
    5844:	08 95       	ret

00005846 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    5846:	60 91 32 59 	lds	r22, 0x5932
    584a:	70 91 33 59 	lds	r23, 0x5933
    584e:	80 91 34 59 	lds	r24, 0x5934
    5852:	90 91 35 59 	lds	r25, 0x5935
    5856:	60 95       	com	r22
    5858:	70 95       	com	r23
    585a:	80 95       	com	r24
    585c:	90 95       	com	r25
    585e:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
}
    5862:	08 95       	ret

00005864 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    5864:	e0 e0       	ldi	r30, 0x00	; 0
    5866:	fa e0       	ldi	r31, 0x0A	; 10
    5868:	80 e4       	ldi	r24, 0x40	; 64
    586a:	92 e0       	ldi	r25, 0x02	; 2
    586c:	86 a3       	std	Z+38, r24	; 0x26
    586e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    5870:	80 81       	ld	r24, Z
    5872:	80 7f       	andi	r24, 0xF0	; 240
    5874:	86 60       	ori	r24, 0x06	; 6
    5876:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5878:	86 81       	ldd	r24, Z+6	; 0x06
    587a:	8c 7f       	andi	r24, 0xFC	; 252
    587c:	82 60       	ori	r24, 0x02	; 2
    587e:	86 83       	std	Z+6, r24	; 0x06
	
}
    5880:	08 95       	ret

00005882 <SD_Init>:
};

//uint32_t crc_table[256];


uint8_t SD_Init(void){
    5882:	1f 93       	push	r17
	uint8_t tmp;


	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    5884:	e0 ea       	ldi	r30, 0xA0	; 160
    5886:	f6 e0       	ldi	r31, 0x06	; 6
    5888:	88 e1       	ldi	r24, 0x18	; 24
    588a:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    588c:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    588e:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Timer_Init>
	tmp = disk_initialize(0);
    5892:	80 e0       	ldi	r24, 0x00	; 0
    5894:	0e 94 ca 05 	call	0xb94	; 0xb94 <disk_initialize>
    5898:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	68 eb       	ldi	r22, 0xB8	; 184
    589e:	74 e3       	ldi	r23, 0x34	; 52
    58a0:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <f_mount>
	f_mount(1, &fso1);
    58a4:	81 e0       	ldi	r24, 0x01	; 1
    58a6:	66 ee       	ldi	r22, 0xE6	; 230
    58a8:	76 e3       	ldi	r23, 0x36	; 54
    58aa:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <f_mount>
	return tmp;
}
    58ae:	81 2f       	mov	r24, r17
    58b0:	1f 91       	pop	r17
    58b2:	08 95       	ret

000058b4 <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    58b4:	1f 92       	push	r1
    58b6:	0f 92       	push	r0
    58b8:	0f b6       	in	r0, 0x3f	; 63
    58ba:	0f 92       	push	r0
    58bc:	0b b6       	in	r0, 0x3b	; 59
    58be:	0f 92       	push	r0
    58c0:	11 24       	eor	r1, r1
    58c2:	2f 93       	push	r18
    58c4:	3f 93       	push	r19
    58c6:	4f 93       	push	r20
    58c8:	5f 93       	push	r21
    58ca:	6f 93       	push	r22
    58cc:	7f 93       	push	r23
    58ce:	8f 93       	push	r24
    58d0:	9f 93       	push	r25
    58d2:	af 93       	push	r26
    58d4:	bf 93       	push	r27
    58d6:	ef 93       	push	r30
    58d8:	ff 93       	push	r31
	disk_timerproc();
    58da:	0e 94 62 09 	call	0x12c4	; 0x12c4 <disk_timerproc>


	if(okToCharge){
    58de:	80 91 35 34 	lds	r24, 0x3435
    58e2:	88 23       	and	r24, r24
    58e4:	a9 f0       	breq	.+42     	; 0x5910 <__vector_47+0x5c>
		chargeCounter++;
    58e6:	80 91 32 34 	lds	r24, 0x3432
    58ea:	90 91 33 34 	lds	r25, 0x3433
    58ee:	01 96       	adiw	r24, 0x01	; 1
    58f0:	80 93 32 34 	sts	0x3432, r24
    58f4:	90 93 33 34 	sts	0x3433, r25
		if(chargeCounter >= 16200){
    58f8:	88 54       	subi	r24, 0x48	; 72
    58fa:	9f 43       	sbci	r25, 0x3F	; 63
    58fc:	48 f0       	brcs	.+18     	; 0x5910 <__vector_47+0x5c>
			chargeCounter=0;
    58fe:	10 92 32 34 	sts	0x3432, r1
    5902:	10 92 33 34 	sts	0x3433, r1
			chargePercent++;
    5906:	80 91 31 34 	lds	r24, 0x3431
    590a:	8f 5f       	subi	r24, 0xFF	; 255
    590c:	80 93 31 34 	sts	0x3431, r24
		}
	}
}
    5910:	ff 91       	pop	r31
    5912:	ef 91       	pop	r30
    5914:	bf 91       	pop	r27
    5916:	af 91       	pop	r26
    5918:	9f 91       	pop	r25
    591a:	8f 91       	pop	r24
    591c:	7f 91       	pop	r23
    591e:	6f 91       	pop	r22
    5920:	5f 91       	pop	r21
    5922:	4f 91       	pop	r20
    5924:	3f 91       	pop	r19
    5926:	2f 91       	pop	r18
    5928:	0f 90       	pop	r0
    592a:	0b be       	out	0x3b, r0	; 59
    592c:	0f 90       	pop	r0
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	0f 90       	pop	r0
    5932:	1f 90       	pop	r1
    5934:	18 95       	reti

00005936 <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    5936:	0f 93       	push	r16
    5938:	df 93       	push	r29
    593a:	cf 93       	push	r28
    593c:	0f 92       	push	r0
    593e:	cd b7       	in	r28, 0x3d	; 61
    5940:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    5942:	2f b7       	in	r18, 0x3f	; 63
    5944:	29 83       	std	Y+1, r18	; 0x01
    cli();
    5946:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    5948:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    594a:	fc 01       	movw	r30, r24
    594c:	08 ed       	ldi	r16, 0xD8	; 216
    594e:	04 bf       	out	0x34, r16	; 52
    5950:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    5952:	89 81       	ldd	r24, Y+1	; 0x01
    5954:	8f bf       	out	0x3f, r24	; 63
}
    5956:	0f 90       	pop	r0
    5958:	cf 91       	pop	r28
    595a:	df 91       	pop	r29
    595c:	0f 91       	pop	r16
    595e:	08 95       	ret

00005960 <display_sendCommand>:

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5960:	94 e0       	ldi	r25, 0x04	; 4
    5962:	e0 e2       	ldi	r30, 0x20	; 32
    5964:	f6 e0       	ldi	r31, 0x06	; 6
    5966:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5968:	e0 ec       	ldi	r30, 0xC0	; 192
    596a:	f8 e0       	ldi	r31, 0x08	; 8
    596c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    596e:	80 91 c2 08 	lds	r24, 0x08C2
    5972:	87 ff       	sbrs	r24, 7
    5974:	fc cf       	rjmp	.-8      	; 0x596e <display_sendCommand+0xe>
}
    5976:	08 95       	ret

00005978 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5978:	94 e0       	ldi	r25, 0x04	; 4
    597a:	e0 e2       	ldi	r30, 0x20	; 32
    597c:	f6 e0       	ldi	r31, 0x06	; 6
    597e:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    5980:	e0 ec       	ldi	r30, 0xC0	; 192
    5982:	f8 e0       	ldi	r31, 0x08	; 8
    5984:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5986:	80 91 c2 08 	lds	r24, 0x08C2
    598a:	87 ff       	sbrs	r24, 7
    598c:	fc cf       	rjmp	.-8      	; 0x5986 <display_sendData+0xe>
}
    598e:	08 95       	ret

00005990 <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    5990:	80 6b       	ori	r24, 0xB0	; 176

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5992:	94 e0       	ldi	r25, 0x04	; 4
    5994:	e0 e2       	ldi	r30, 0x20	; 32
    5996:	f6 e0       	ldi	r31, 0x06	; 6
    5998:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    599a:	e0 ec       	ldi	r30, 0xC0	; 192
    599c:	f8 e0       	ldi	r31, 0x08	; 8
    599e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59a0:	80 91 c2 08 	lds	r24, 0x08C2
    59a4:	87 ff       	sbrs	r24, 7
    59a6:	fc cf       	rjmp	.-8      	; 0x59a0 <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    59a8:	96 2f       	mov	r25, r22
    59aa:	9f 70       	andi	r25, 0x0F	; 15

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59ac:	84 e0       	ldi	r24, 0x04	; 4
    59ae:	e0 e2       	ldi	r30, 0x20	; 32
    59b0:	f6 e0       	ldi	r31, 0x06	; 6
    59b2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59b4:	e0 ec       	ldi	r30, 0xC0	; 192
    59b6:	f8 e0       	ldi	r31, 0x08	; 8
    59b8:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59ba:	80 91 c2 08 	lds	r24, 0x08C2
    59be:	87 ff       	sbrs	r24, 7
    59c0:	fc cf       	rjmp	.-8      	; 0x59ba <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    59c2:	62 95       	swap	r22
    59c4:	6f 70       	andi	r22, 0x0F	; 15
    59c6:	60 61       	ori	r22, 0x10	; 16

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59c8:	84 e0       	ldi	r24, 0x04	; 4
    59ca:	e0 e2       	ldi	r30, 0x20	; 32
    59cc:	f6 e0       	ldi	r31, 0x06	; 6
    59ce:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59d0:	e0 ec       	ldi	r30, 0xC0	; 192
    59d2:	f8 e0       	ldi	r31, 0x08	; 8
    59d4:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59d6:	80 91 c2 08 	lds	r24, 0x08C2
    59da:	87 ff       	sbrs	r24, 7
    59dc:	fc cf       	rjmp	.-8      	; 0x59d6 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    59de:	08 95       	ret

000059e0 <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    59e0:	bf 92       	push	r11
    59e2:	cf 92       	push	r12
    59e4:	df 92       	push	r13
    59e6:	ef 92       	push	r14
    59e8:	ff 92       	push	r15
    59ea:	0f 93       	push	r16
    59ec:	1f 93       	push	r17
    59ee:	cf 93       	push	r28
    59f0:	df 93       	push	r29
    59f2:	c0 e0       	ldi	r28, 0x00	; 0
    59f4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    59f6:	56 e6       	ldi	r21, 0x66	; 102
    59f8:	c5 2e       	mov	r12, r21
    59fa:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    59fc:	40 e2       	ldi	r20, 0x20	; 32
    59fe:	e4 2e       	mov	r14, r20
    5a00:	46 e0       	ldi	r20, 0x06	; 6
    5a02:	f4 2e       	mov	r15, r20
    5a04:	34 e0       	ldi	r19, 0x04	; 4
    5a06:	b3 2e       	mov	r11, r19
	Display_SPI.DATA = dataByte;
    5a08:	00 ec       	ldi	r16, 0xC0	; 192
    5a0a:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    5a0c:	8c 2f       	mov	r24, r28
    5a0e:	60 e0       	ldi	r22, 0x00	; 0
    5a10:	0e 94 c8 2c 	call	0x5990	; 0x5990 <display_setCursor>
    5a14:	20 e0       	ldi	r18, 0x00	; 0
    5a16:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    5a18:	cc 9d       	mul	r28, r12
    5a1a:	a0 01       	movw	r20, r0
    5a1c:	cd 9d       	mul	r28, r13
    5a1e:	50 0d       	add	r21, r0
    5a20:	dc 9d       	mul	r29, r12
    5a22:	50 0d       	add	r21, r0
    5a24:	11 24       	eor	r1, r1
    5a26:	fa 01       	movw	r30, r20
    5a28:	e2 0f       	add	r30, r18
    5a2a:	f3 1f       	adc	r31, r19
    5a2c:	ef 50       	subi	r30, 0x0F	; 15
    5a2e:	fa 4a       	sbci	r31, 0xAA	; 170
    5a30:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a32:	f7 01       	movw	r30, r14
    5a34:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    5a36:	f8 01       	movw	r30, r16
    5a38:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a3a:	80 91 c2 08 	lds	r24, 0x08C2
    5a3e:	87 ff       	sbrs	r24, 7
    5a40:	fc cf       	rjmp	.-8      	; 0x5a3a <display_writeBufferToScreen+0x5a>
    5a42:	2f 5f       	subi	r18, 0xFF	; 255
    5a44:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a46:	26 36       	cpi	r18, 0x66	; 102
    5a48:	31 05       	cpc	r19, r1
    5a4a:	69 f7       	brne	.-38     	; 0x5a26 <display_writeBufferToScreen+0x46>
    5a4c:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a4e:	c8 30       	cpi	r28, 0x08	; 8
    5a50:	d1 05       	cpc	r29, r1
    5a52:	e1 f6       	brne	.-72     	; 0x5a0c <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    5a54:	df 91       	pop	r29
    5a56:	cf 91       	pop	r28
    5a58:	1f 91       	pop	r17
    5a5a:	0f 91       	pop	r16
    5a5c:	ff 90       	pop	r15
    5a5e:	ef 90       	pop	r14
    5a60:	df 90       	pop	r13
    5a62:	cf 90       	pop	r12
    5a64:	bf 90       	pop	r11
    5a66:	08 95       	ret

00005a68 <display_clearPage>:


void display_clearPage(uint8_t page) {
    5a68:	40 e0       	ldi	r20, 0x00	; 0
    5a6a:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	26 e6       	ldi	r18, 0x66	; 102
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	82 9f       	mul	r24, r18
    5a74:	b0 01       	movw	r22, r0
    5a76:	83 9f       	mul	r24, r19
    5a78:	70 0d       	add	r23, r0
    5a7a:	92 9f       	mul	r25, r18
    5a7c:	70 0d       	add	r23, r0
    5a7e:	11 24       	eor	r1, r1
    5a80:	8a e0       	ldi	r24, 0x0A	; 10
    5a82:	fb 01       	movw	r30, r22
    5a84:	e4 0f       	add	r30, r20
    5a86:	f5 1f       	adc	r31, r21
    5a88:	ef 50       	subi	r30, 0x0F	; 15
    5a8a:	fa 4a       	sbci	r31, 0xAA	; 170
    5a8c:	80 83       	st	Z, r24
    5a8e:	4f 5f       	subi	r20, 0xFF	; 255
    5a90:	5f 4f       	sbci	r21, 0xFF	; 255
    5a92:	46 36       	cpi	r20, 0x66	; 102
    5a94:	51 05       	cpc	r21, r1
    5a96:	a9 f7       	brne	.-22     	; 0x5a82 <display_clearPage+0x1a>
}
    5a98:	08 95       	ret

00005a9a <display_clearBuffer>:


void display_clearBuffer() {
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5a9e:	66 e6       	ldi	r22, 0x66	; 102
    5aa0:	70 e0       	ldi	r23, 0x00	; 0
    5aa2:	0f c0       	rjmp	.+30     	; 0x5ac2 <display_clearBuffer+0x28>
    5aa4:	fa 01       	movw	r30, r20
    5aa6:	e8 0f       	add	r30, r24
    5aa8:	f9 1f       	adc	r31, r25
    5aaa:	ef 50       	subi	r30, 0x0F	; 15
    5aac:	fa 4a       	sbci	r31, 0xAA	; 170
    5aae:	10 82       	st	Z, r1
    5ab0:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5ab2:	86 36       	cpi	r24, 0x66	; 102
    5ab4:	91 05       	cpc	r25, r1
    5ab6:	b1 f7       	brne	.-20     	; 0x5aa4 <display_clearBuffer+0xa>
    5ab8:	2f 5f       	subi	r18, 0xFF	; 255
    5aba:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5abc:	28 30       	cpi	r18, 0x08	; 8
    5abe:	31 05       	cpc	r19, r1
    5ac0:	51 f0       	breq	.+20     	; 0x5ad6 <display_clearBuffer+0x3c>
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5ac6:	26 9f       	mul	r18, r22
    5ac8:	a0 01       	movw	r20, r0
    5aca:	27 9f       	mul	r18, r23
    5acc:	50 0d       	add	r21, r0
    5ace:	36 9f       	mul	r19, r22
    5ad0:	50 0d       	add	r21, r0
    5ad2:	11 24       	eor	r1, r1
    5ad4:	e7 cf       	rjmp	.-50     	; 0x5aa4 <display_clearBuffer+0xa>
    5ad6:	08 95       	ret

00005ad8 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    5ad8:	cf 93       	push	r28
    5ada:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5adc:	a0 e4       	ldi	r26, 0x40	; 64
    5ade:	b6 e0       	ldi	r27, 0x06	; 6
    5ae0:	88 e3       	ldi	r24, 0x38	; 56
    5ae2:	54 96       	adiw	r26, 0x14	; 20
    5ae4:	8c 93       	st	X, r24
    5ae6:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5ae8:	40 e2       	ldi	r20, 0x20	; 32
    5aea:	56 e0       	ldi	r21, 0x06	; 6
    5aec:	fa 01       	movw	r30, r20
    5aee:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    5af0:	30 e1       	ldi	r19, 0x10	; 16
    5af2:	15 96       	adiw	r26, 0x05	; 5
    5af4:	3c 93       	st	X, r19
    5af6:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5af8:	e0 e6       	ldi	r30, 0x60	; 96
    5afa:	f6 e0       	ldi	r31, 0x06	; 6
    5afc:	21 e0       	ldi	r18, 0x01	; 1
    5afe:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5b00:	25 83       	std	Z+5, r18	; 0x05
    5b02:	80 e0       	ldi	r24, 0x00	; 0
    5b04:	90 e9       	ldi	r25, 0x90	; 144
    5b06:	ec 01       	movw	r28, r24
    5b08:	21 97       	sbiw	r28, 0x01	; 1
    5b0a:	f1 f7       	brne	.-4      	; 0x5b08 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5b0c:	26 83       	std	Z+6, r18	; 0x06
    5b0e:	ec 01       	movw	r28, r24
    5b10:	21 97       	sbiw	r28, 0x01	; 1
    5b12:	f1 f7       	brne	.-4      	; 0x5b10 <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5b14:	25 83       	std	Z+5, r18	; 0x05
    5b16:	01 97       	sbiw	r24, 0x01	; 1
    5b18:	f1 f7       	brne	.-4      	; 0x5b16 <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5b1a:	8d ed       	ldi	r24, 0xDD	; 221
    5b1c:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5b20:	80 eb       	ldi	r24, 0xB0	; 176
    5b22:	11 96       	adiw	r26, 0x01	; 1
    5b24:	8c 93       	st	X, r24
    5b26:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5b28:	84 e0       	ldi	r24, 0x04	; 4
    5b2a:	fa 01       	movw	r30, r20
    5b2c:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5b2e:	16 96       	adiw	r26, 0x06	; 6
    5b30:	3c 93       	st	X, r19

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b32:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b34:	82 ee       	ldi	r24, 0xE2	; 226
    5b36:	e0 ec       	ldi	r30, 0xC0	; 192
    5b38:	f8 e0       	ldi	r31, 0x08	; 8
    5b3a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b3c:	80 91 c2 08 	lds	r24, 0x08C2
    5b40:	87 ff       	sbrs	r24, 7
    5b42:	fc cf       	rjmp	.-8      	; 0x5b3c <display_init+0x64>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b44:	84 e0       	ldi	r24, 0x04	; 4
    5b46:	e0 e2       	ldi	r30, 0x20	; 32
    5b48:	f6 e0       	ldi	r31, 0x06	; 6
    5b4a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b4c:	80 e4       	ldi	r24, 0x40	; 64
    5b4e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b50:	f8 e0       	ldi	r31, 0x08	; 8
    5b52:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b54:	80 91 c2 08 	lds	r24, 0x08C2
    5b58:	87 ff       	sbrs	r24, 7
    5b5a:	fc cf       	rjmp	.-8      	; 0x5b54 <display_init+0x7c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b5c:	84 e0       	ldi	r24, 0x04	; 4
    5b5e:	e0 e2       	ldi	r30, 0x20	; 32
    5b60:	f6 e0       	ldi	r31, 0x06	; 6
    5b62:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b64:	81 ea       	ldi	r24, 0xA1	; 161
    5b66:	e0 ec       	ldi	r30, 0xC0	; 192
    5b68:	f8 e0       	ldi	r31, 0x08	; 8
    5b6a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b6c:	80 91 c2 08 	lds	r24, 0x08C2
    5b70:	87 ff       	sbrs	r24, 7
    5b72:	fc cf       	rjmp	.-8      	; 0x5b6c <display_init+0x94>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b74:	84 e0       	ldi	r24, 0x04	; 4
    5b76:	e0 e2       	ldi	r30, 0x20	; 32
    5b78:	f6 e0       	ldi	r31, 0x06	; 6
    5b7a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b7c:	80 ec       	ldi	r24, 0xC0	; 192
    5b7e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b80:	f8 e0       	ldi	r31, 0x08	; 8
    5b82:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b84:	80 91 c2 08 	lds	r24, 0x08C2
    5b88:	87 ff       	sbrs	r24, 7
    5b8a:	fc cf       	rjmp	.-8      	; 0x5b84 <display_init+0xac>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b8c:	84 e0       	ldi	r24, 0x04	; 4
    5b8e:	e0 e2       	ldi	r30, 0x20	; 32
    5b90:	f6 e0       	ldi	r31, 0x06	; 6
    5b92:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b94:	84 ea       	ldi	r24, 0xA4	; 164
    5b96:	e0 ec       	ldi	r30, 0xC0	; 192
    5b98:	f8 e0       	ldi	r31, 0x08	; 8
    5b9a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b9c:	80 91 c2 08 	lds	r24, 0x08C2
    5ba0:	87 ff       	sbrs	r24, 7
    5ba2:	fc cf       	rjmp	.-8      	; 0x5b9c <display_init+0xc4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ba4:	84 e0       	ldi	r24, 0x04	; 4
    5ba6:	e0 e2       	ldi	r30, 0x20	; 32
    5ba8:	f6 e0       	ldi	r31, 0x06	; 6
    5baa:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bac:	86 ea       	ldi	r24, 0xA6	; 166
    5bae:	e0 ec       	ldi	r30, 0xC0	; 192
    5bb0:	f8 e0       	ldi	r31, 0x08	; 8
    5bb2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bb4:	80 91 c2 08 	lds	r24, 0x08C2
    5bb8:	87 ff       	sbrs	r24, 7
    5bba:	fc cf       	rjmp	.-8      	; 0x5bb4 <display_init+0xdc>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bbc:	84 e0       	ldi	r24, 0x04	; 4
    5bbe:	e0 e2       	ldi	r30, 0x20	; 32
    5bc0:	f6 e0       	ldi	r31, 0x06	; 6
    5bc2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bc4:	8f e2       	ldi	r24, 0x2F	; 47
    5bc6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bc8:	f8 e0       	ldi	r31, 0x08	; 8
    5bca:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bcc:	80 91 c2 08 	lds	r24, 0x08C2
    5bd0:	87 ff       	sbrs	r24, 7
    5bd2:	fc cf       	rjmp	.-8      	; 0x5bcc <display_init+0xf4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bd4:	84 e0       	ldi	r24, 0x04	; 4
    5bd6:	e0 e2       	ldi	r30, 0x20	; 32
    5bd8:	f6 e0       	ldi	r31, 0x06	; 6
    5bda:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bdc:	87 e2       	ldi	r24, 0x27	; 39
    5bde:	e0 ec       	ldi	r30, 0xC0	; 192
    5be0:	f8 e0       	ldi	r31, 0x08	; 8
    5be2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5be4:	80 91 c2 08 	lds	r24, 0x08C2
    5be8:	87 ff       	sbrs	r24, 7
    5bea:	fc cf       	rjmp	.-8      	; 0x5be4 <display_init+0x10c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bec:	84 e0       	ldi	r24, 0x04	; 4
    5bee:	e0 e2       	ldi	r30, 0x20	; 32
    5bf0:	f6 e0       	ldi	r31, 0x06	; 6
    5bf2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bf4:	8a ef       	ldi	r24, 0xFA	; 250
    5bf6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bf8:	f8 e0       	ldi	r31, 0x08	; 8
    5bfa:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bfc:	80 91 c2 08 	lds	r24, 0x08C2
    5c00:	87 ff       	sbrs	r24, 7
    5c02:	fc cf       	rjmp	.-8      	; 0x5bfc <display_init+0x124>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c04:	84 e0       	ldi	r24, 0x04	; 4
    5c06:	e0 e2       	ldi	r30, 0x20	; 32
    5c08:	f6 e0       	ldi	r31, 0x06	; 6
    5c0a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c0c:	80 e9       	ldi	r24, 0x90	; 144
    5c0e:	e0 ec       	ldi	r30, 0xC0	; 192
    5c10:	f8 e0       	ldi	r31, 0x08	; 8
    5c12:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c14:	80 91 c2 08 	lds	r24, 0x08C2
    5c18:	87 ff       	sbrs	r24, 7
    5c1a:	fc cf       	rjmp	.-8      	; 0x5c14 <display_init+0x13c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c1c:	84 e0       	ldi	r24, 0x04	; 4
    5c1e:	e0 e2       	ldi	r30, 0x20	; 32
    5c20:	f6 e0       	ldi	r31, 0x06	; 6
    5c22:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c24:	80 e4       	ldi	r24, 0x40	; 64
    5c26:	e0 ec       	ldi	r30, 0xC0	; 192
    5c28:	f8 e0       	ldi	r31, 0x08	; 8
    5c2a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c2c:	80 91 c2 08 	lds	r24, 0x08C2
    5c30:	87 ff       	sbrs	r24, 7
    5c32:	fc cf       	rjmp	.-8      	; 0x5c2c <display_init+0x154>
    5c34:	8c ed       	ldi	r24, 0xDC	; 220
    5c36:	95 e0       	ldi	r25, 0x05	; 5
    5c38:	20 e7       	ldi	r18, 0x70	; 112
    5c3a:	31 e0       	ldi	r19, 0x01	; 1
    5c3c:	f9 01       	movw	r30, r18
    5c3e:	31 97       	sbiw	r30, 0x01	; 1
    5c40:	f1 f7       	brne	.-4      	; 0x5c3e <display_init+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c44:	d9 f7       	brne	.-10     	; 0x5c3c <display_init+0x164>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c46:	84 e0       	ldi	r24, 0x04	; 4
    5c48:	e0 e2       	ldi	r30, 0x20	; 32
    5c4a:	f6 e0       	ldi	r31, 0x06	; 6
    5c4c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c4e:	82 ea       	ldi	r24, 0xA2	; 162
    5c50:	e0 ec       	ldi	r30, 0xC0	; 192
    5c52:	f8 e0       	ldi	r31, 0x08	; 8
    5c54:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c56:	80 91 c2 08 	lds	r24, 0x08C2
    5c5a:	87 ff       	sbrs	r24, 7
    5c5c:	fc cf       	rjmp	.-8      	; 0x5c56 <display_init+0x17e>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c5e:	84 e0       	ldi	r24, 0x04	; 4
    5c60:	e0 e2       	ldi	r30, 0x20	; 32
    5c62:	f6 e0       	ldi	r31, 0x06	; 6
    5c64:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c66:	81 e8       	ldi	r24, 0x81	; 129
    5c68:	e0 ec       	ldi	r30, 0xC0	; 192
    5c6a:	f8 e0       	ldi	r31, 0x08	; 8
    5c6c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c6e:	80 91 c2 08 	lds	r24, 0x08C2
    5c72:	87 ff       	sbrs	r24, 7
    5c74:	fc cf       	rjmp	.-8      	; 0x5c6e <display_init+0x196>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c76:	84 e0       	ldi	r24, 0x04	; 4
    5c78:	e0 e2       	ldi	r30, 0x20	; 32
    5c7a:	f6 e0       	ldi	r31, 0x06	; 6
    5c7c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c7e:	88 e0       	ldi	r24, 0x08	; 8
    5c80:	e0 ec       	ldi	r30, 0xC0	; 192
    5c82:	f8 e0       	ldi	r31, 0x08	; 8
    5c84:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c86:	80 91 c2 08 	lds	r24, 0x08C2
    5c8a:	87 ff       	sbrs	r24, 7
    5c8c:	fc cf       	rjmp	.-8      	; 0x5c86 <display_init+0x1ae>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c8e:	84 e0       	ldi	r24, 0x04	; 4
    5c90:	e0 e2       	ldi	r30, 0x20	; 32
    5c92:	f6 e0       	ldi	r31, 0x06	; 6
    5c94:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c96:	8f ea       	ldi	r24, 0xAF	; 175
    5c98:	e0 ec       	ldi	r30, 0xC0	; 192
    5c9a:	f8 e0       	ldi	r31, 0x08	; 8
    5c9c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c9e:	80 91 c2 08 	lds	r24, 0x08C2
    5ca2:	87 ff       	sbrs	r24, 7
    5ca4:	fc cf       	rjmp	.-8      	; 0x5c9e <display_init+0x1c6>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearBuffer();
    5ca6:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
	display_writeBufferToScreen();
    5caa:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

}
    5cae:	df 91       	pop	r29
    5cb0:	cf 91       	pop	r28
    5cb2:	08 95       	ret

00005cb4 <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5cb4:	2f 92       	push	r2
    5cb6:	3f 92       	push	r3
    5cb8:	4f 92       	push	r4
    5cba:	5f 92       	push	r5
    5cbc:	6f 92       	push	r6
    5cbe:	7f 92       	push	r7
    5cc0:	8f 92       	push	r8
    5cc2:	9f 92       	push	r9
    5cc4:	af 92       	push	r10
    5cc6:	bf 92       	push	r11
    5cc8:	cf 92       	push	r12
    5cca:	df 92       	push	r13
    5ccc:	ef 92       	push	r14
    5cce:	ff 92       	push	r15
    5cd0:	0f 93       	push	r16
    5cd2:	1f 93       	push	r17
    5cd4:	df 93       	push	r29
    5cd6:	cf 93       	push	r28
    5cd8:	cd b7       	in	r28, 0x3d	; 61
    5cda:	de b7       	in	r29, 0x3e	; 62
    5cdc:	28 97       	sbiw	r28, 0x08	; 8
    5cde:	cd bf       	out	0x3d, r28	; 61
    5ce0:	de bf       	out	0x3e, r29	; 62
    5ce2:	1c 01       	movw	r2, r24
    5ce4:	4c 83       	std	Y+4, r20	; 0x04
    5ce6:	2f 83       	std	Y+7, r18	; 0x07
    5ce8:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5cea:	d9 01       	movw	r26, r18
    5cec:	13 96       	adiw	r26, 0x03	; 3
    5cee:	bc 91       	ld	r27, X
    5cf0:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5cf2:	f9 01       	movw	r30, r18
    5cf4:	f4 81       	ldd	r31, Z+4	; 0x04
    5cf6:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5cf8:	d9 01       	movw	r26, r18
    5cfa:	15 96       	adiw	r26, 0x05	; 5
    5cfc:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5cfe:	bb 81       	ldd	r27, Y+3	; 0x03
    5d00:	0b 2f       	mov	r16, r27
    5d02:	10 e0       	ldi	r17, 0x00	; 0
    5d04:	c8 01       	movw	r24, r16
    5d06:	07 96       	adiw	r24, 0x07	; 7
    5d08:	e3 e0       	ldi	r30, 0x03	; 3
    5d0a:	95 95       	asr	r25
    5d0c:	87 95       	ror	r24
    5d0e:	ea 95       	dec	r30
    5d10:	e1 f7       	brne	.-8      	; 0x5d0a <display_putString+0x56>
    5d12:	89 83       	std	Y+1, r24	; 0x01
    5d14:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d16:	e2 2e       	mov	r14, r18
    5d18:	ff 24       	eor	r15, r15
    5d1a:	e6 e0       	ldi	r30, 0x06	; 6
    5d1c:	f0 e0       	ldi	r31, 0x00	; 0
    5d1e:	ee 0e       	add	r14, r30
    5d20:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    5d22:	46 2e       	mov	r4, r22
    5d24:	55 24       	eor	r5, r5
    5d26:	6f c0       	rjmp	.+222    	; 0x5e06 <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5d28:	7e 2f       	mov	r23, r30
    5d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    5d2c:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5d2e:	af 81       	ldd	r26, Y+7	; 0x07
    5d30:	b8 85       	ldd	r27, Y+8	; 0x08
    5d32:	8c 91       	ld	r24, X
    5d34:	88 23       	and	r24, r24
    5d36:	39 f4       	brne	.+14     	; 0x5d46 <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5d38:	12 96       	adiw	r26, 0x02	; 2
    5d3a:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5d3c:	74 9f       	mul	r23, r20
    5d3e:	f0 01       	movw	r30, r0
    5d40:	11 24       	eor	r1, r1
    5d42:	36 96       	adiw	r30, 0x06	; 6
    5d44:	2b c0       	rjmp	.+86     	; 0x5d9c <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5d46:	ef 81       	ldd	r30, Y+7	; 0x07
    5d48:	f8 85       	ldd	r31, Y+8	; 0x08
    5d4a:	e7 0f       	add	r30, r23
    5d4c:	f1 1d       	adc	r31, r1
    5d4e:	46 81       	ldd	r20, Z+6	; 0x06
    5d50:	ef 81       	ldd	r30, Y+7	; 0x07
    5d52:	f8 85       	ldd	r31, Y+8	; 0x08
    5d54:	ed 83       	std	Y+5, r30	; 0x05
    5d56:	fe 83       	std	Y+6, r31	; 0x06
    5d58:	50 e0       	ldi	r21, 0x00	; 0
    5d5a:	a0 e0       	ldi	r26, 0x00	; 0
    5d5c:	b0 e0       	ldi	r27, 0x00	; 0
    5d5e:	0a c0       	rjmp	.+20     	; 0x5d74 <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5d60:	ed 81       	ldd	r30, Y+5	; 0x05
    5d62:	fe 81       	ldd	r31, Y+6	; 0x06
    5d64:	85 81       	ldd	r24, Z+5	; 0x05
    5d66:	f9 81       	ldd	r31, Y+1	; 0x01
    5d68:	f8 9f       	mul	r31, r24
    5d6a:	c0 01       	movw	r24, r0
    5d6c:	11 24       	eor	r1, r1
    5d6e:	a8 0f       	add	r26, r24
    5d70:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5d72:	5f 5f       	subi	r21, 0xFF	; 255
    5d74:	8d 81       	ldd	r24, Y+5	; 0x05
    5d76:	9e 81       	ldd	r25, Y+6	; 0x06
    5d78:	01 96       	adiw	r24, 0x01	; 1
    5d7a:	8d 83       	std	Y+5, r24	; 0x05
    5d7c:	9e 83       	std	Y+6, r25	; 0x06
    5d7e:	57 17       	cp	r21, r23
    5d80:	78 f3       	brcs	.-34     	; 0x5d60 <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d82:	84 2f       	mov	r24, r20
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	82 9f       	mul	r24, r18
    5d88:	f0 01       	movw	r30, r0
    5d8a:	83 9f       	mul	r24, r19
    5d8c:	f0 0d       	add	r31, r0
    5d8e:	92 9f       	mul	r25, r18
    5d90:	f0 0d       	add	r31, r0
    5d92:	11 24       	eor	r1, r1
    5d94:	ee 0d       	add	r30, r14
    5d96:	ff 1d       	adc	r31, r15
    5d98:	ea 0f       	add	r30, r26
    5d9a:	fb 1f       	adc	r31, r27
    5d9c:	af 81       	ldd	r26, Y+7	; 0x07
    5d9e:	b8 85       	ldd	r27, Y+8	; 0x08
    5da0:	ae 0f       	add	r26, r30
    5da2:	bf 1f       	adc	r27, r31
    5da4:	50 e0       	ldi	r21, 0x00	; 0
    5da6:	16 c0       	rjmp	.+44     	; 0x5dd4 <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5da8:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5daa:	9b 81       	ldd	r25, Y+3	; 0x03
    5dac:	99 30       	cpi	r25, 0x09	; 9
    5dae:	50 f0       	brcs	.+20     	; 0x5dc4 <display_putString+0x110>
    5db0:	08 15       	cp	r16, r8
    5db2:	19 05       	cpc	r17, r9
    5db4:	3c f4       	brge	.+14     	; 0x5dc4 <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	06 2c       	mov	r0, r6
    5dba:	02 c0       	rjmp	.+4      	; 0x5dc0 <display_putString+0x10c>
    5dbc:	95 95       	asr	r25
    5dbe:	87 95       	ror	r24
    5dc0:	0a 94       	dec	r0
    5dc2:	e2 f7       	brpl	.-8      	; 0x5dbc <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5dc4:	f5 01       	movw	r30, r10
    5dc6:	e7 0f       	add	r30, r23
    5dc8:	f1 1d       	adc	r31, r1
    5dca:	ef 50       	subi	r30, 0x0F	; 15
    5dcc:	fa 4a       	sbci	r31, 0xAA	; 170
    5dce:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5dd0:	5f 5f       	subi	r21, 0xFF	; 255
    5dd2:	11 96       	adiw	r26, 0x01	; 1
    5dd4:	75 2f       	mov	r23, r21
    5dd6:	76 0f       	add	r23, r22
    5dd8:	54 17       	cp	r21, r20
    5dda:	30 f3       	brcs	.-52     	; 0x5da8 <display_putString+0xf4>
    5ddc:	84 2f       	mov	r24, r20
    5dde:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5de0:	85 36       	cpi	r24, 0x65	; 101
    5de2:	31 f0       	breq	.+12     	; 0x5df0 <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    5de4:	f5 01       	movw	r30, r10
    5de6:	e8 0f       	add	r30, r24
    5de8:	f1 1d       	adc	r31, r1
    5dea:	ee 50       	subi	r30, 0x0E	; 14
    5dec:	fa 4a       	sbci	r31, 0xAA	; 170
    5dee:	10 82       	st	Z, r1
 		}
		offset++;
    5df0:	68 2f       	mov	r22, r24
    5df2:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    5df4:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5df6:	f1 01       	movw	r30, r2
    5df8:	ed 0d       	add	r30, r13
    5dfa:	f1 1d       	adc	r31, r1
    5dfc:	e0 81       	ld	r30, Z
    5dfe:	ee 23       	and	r30, r30
    5e00:	09 f0       	breq	.+2      	; 0x5e04 <display_putString+0x150>
    5e02:	92 cf       	rjmp	.-220    	; 0x5d28 <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5e04:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5e06:	2c 2d       	mov	r18, r12
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	c9 01       	movw	r24, r18
    5e0c:	73 e0       	ldi	r23, 0x03	; 3
    5e0e:	88 0f       	add	r24, r24
    5e10:	99 1f       	adc	r25, r25
    5e12:	7a 95       	dec	r23
    5e14:	e1 f7       	brne	.-8      	; 0x5e0e <display_putString+0x15a>
    5e16:	80 17       	cp	r24, r16
    5e18:	91 07       	cpc	r25, r17
    5e1a:	e4 f4       	brge	.+56     	; 0x5e54 <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5e1c:	2f 5f       	subi	r18, 0xFF	; 255
    5e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e20:	49 01       	movw	r8, r18
    5e22:	63 e0       	ldi	r22, 0x03	; 3
    5e24:	88 0c       	add	r8, r8
    5e26:	99 1c       	adc	r9, r9
    5e28:	6a 95       	dec	r22
    5e2a:	e1 f7       	brne	.-8      	; 0x5e24 <display_putString+0x170>
    5e2c:	21 50       	subi	r18, 0x01	; 1
    5e2e:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5e30:	34 01       	movw	r6, r8
    5e32:	60 1a       	sub	r6, r16
    5e34:	71 0a       	sbc	r7, r17
    5e36:	6c 81       	ldd	r22, Y+4	; 0x04
    5e38:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5e3a:	c9 01       	movw	r24, r18
    5e3c:	84 0d       	add	r24, r4
    5e3e:	95 1d       	adc	r25, r5
    5e40:	a6 e6       	ldi	r26, 0x66	; 102
    5e42:	b0 e0       	ldi	r27, 0x00	; 0
    5e44:	8a 9f       	mul	r24, r26
    5e46:	50 01       	movw	r10, r0
    5e48:	8b 9f       	mul	r24, r27
    5e4a:	b0 0c       	add	r11, r0
    5e4c:	9a 9f       	mul	r25, r26
    5e4e:	b0 0c       	add	r11, r0
    5e50:	11 24       	eor	r1, r1
    5e52:	d1 cf       	rjmp	.-94     	; 0x5df6 <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    5e54:	28 96       	adiw	r28, 0x08	; 8
    5e56:	cd bf       	out	0x3d, r28	; 61
    5e58:	de bf       	out	0x3e, r29	; 62
    5e5a:	cf 91       	pop	r28
    5e5c:	df 91       	pop	r29
    5e5e:	1f 91       	pop	r17
    5e60:	0f 91       	pop	r16
    5e62:	ff 90       	pop	r15
    5e64:	ef 90       	pop	r14
    5e66:	df 90       	pop	r13
    5e68:	cf 90       	pop	r12
    5e6a:	bf 90       	pop	r11
    5e6c:	af 90       	pop	r10
    5e6e:	9f 90       	pop	r9
    5e70:	8f 90       	pop	r8
    5e72:	7f 90       	pop	r7
    5e74:	6f 90       	pop	r6
    5e76:	5f 90       	pop	r5
    5e78:	4f 90       	pop	r4
    5e7a:	3f 90       	pop	r3
    5e7c:	2f 90       	pop	r2
    5e7e:	08 95       	ret

00005e80 <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    5e80:	28 2f       	mov	r18, r24
    5e82:	26 95       	lsr	r18
    5e84:	26 95       	lsr	r18
    5e86:	26 95       	lsr	r18
    5e88:	70 e0       	ldi	r23, 0x00	; 0
    5e8a:	a8 2f       	mov	r26, r24
    5e8c:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    5e8e:	44 23       	and	r20, r20
    5e90:	d9 f0       	breq	.+54     	; 0x5ec8 <display_drawPixel+0x48>
    5e92:	30 e0       	ldi	r19, 0x00	; 0
    5e94:	86 e6       	ldi	r24, 0x66	; 102
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	28 9f       	mul	r18, r24
    5e9a:	f0 01       	movw	r30, r0
    5e9c:	29 9f       	mul	r18, r25
    5e9e:	f0 0d       	add	r31, r0
    5ea0:	38 9f       	mul	r19, r24
    5ea2:	f0 0d       	add	r31, r0
    5ea4:	11 24       	eor	r1, r1
    5ea6:	e6 0f       	add	r30, r22
    5ea8:	f7 1f       	adc	r31, r23
    5eaa:	ef 50       	subi	r30, 0x0F	; 15
    5eac:	fa 4a       	sbci	r31, 0xAA	; 170
    5eae:	20 81       	ld	r18, Z
    5eb0:	a7 70       	andi	r26, 0x07	; 7
    5eb2:	b0 70       	andi	r27, 0x00	; 0
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	02 c0       	rjmp	.+4      	; 0x5ebe <display_drawPixel+0x3e>
    5eba:	88 0f       	add	r24, r24
    5ebc:	99 1f       	adc	r25, r25
    5ebe:	aa 95       	dec	r26
    5ec0:	e2 f7       	brpl	.-8      	; 0x5eba <display_drawPixel+0x3a>
    5ec2:	28 2b       	or	r18, r24
    5ec4:	20 83       	st	Z, r18
    5ec6:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	86 e6       	ldi	r24, 0x66	; 102
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	28 9f       	mul	r18, r24
    5ed0:	f0 01       	movw	r30, r0
    5ed2:	29 9f       	mul	r18, r25
    5ed4:	f0 0d       	add	r31, r0
    5ed6:	38 9f       	mul	r19, r24
    5ed8:	f0 0d       	add	r31, r0
    5eda:	11 24       	eor	r1, r1
    5edc:	e6 0f       	add	r30, r22
    5ede:	f7 1f       	adc	r31, r23
    5ee0:	ef 50       	subi	r30, 0x0F	; 15
    5ee2:	fa 4a       	sbci	r31, 0xAA	; 170
    5ee4:	20 81       	ld	r18, Z
    5ee6:	a7 70       	andi	r26, 0x07	; 7
    5ee8:	b0 70       	andi	r27, 0x00	; 0
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	02 c0       	rjmp	.+4      	; 0x5ef4 <display_drawPixel+0x74>
    5ef0:	88 0f       	add	r24, r24
    5ef2:	99 1f       	adc	r25, r25
    5ef4:	aa 95       	dec	r26
    5ef6:	e2 f7       	brpl	.-8      	; 0x5ef0 <display_drawPixel+0x70>
    5ef8:	80 95       	com	r24
    5efa:	82 23       	and	r24, r18
    5efc:	80 83       	st	Z, r24
    5efe:	08 95       	ret

00005f00 <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5f00:	dc 01       	movw	r26, r24
    5f02:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    5f04:	90 81       	ld	r25, Z
	*val2 = *val1;
    5f06:	8c 91       	ld	r24, X
    5f08:	80 83       	st	Z, r24
	*val1 = tempVal;
    5f0a:	9c 93       	st	X, r25
}
    5f0c:	08 95       	ret

00005f0e <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5f0e:	df 92       	push	r13
    5f10:	ef 92       	push	r14
    5f12:	ff 92       	push	r15
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	f8 2e       	mov	r15, r24
    5f1e:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5f20:	84 17       	cp	r24, r20
    5f22:	d9 f4       	brne	.+54     	; 0x5f5a <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    5f24:	26 17       	cp	r18, r22
    5f26:	18 f4       	brcc	.+6      	; 0x5f2e <display_drawLine+0x20>
    5f28:	dd 24       	eor	r13, r13
    5f2a:	da 94       	dec	r13
    5f2c:	02 c0       	rjmp	.+4      	; 0x5f32 <display_drawLine+0x24>
    5f2e:	dd 24       	eor	r13, r13
    5f30:	d3 94       	inc	r13
		j = column1;
    5f32:	1e 2d       	mov	r17, r14
		while (j != column2) {
    5f34:	c2 2f       	mov	r28, r18
    5f36:	d0 e0       	ldi	r29, 0x00	; 0
    5f38:	06 c0       	rjmp	.+12     	; 0x5f46 <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5f3a:	8f 2d       	mov	r24, r15
    5f3c:	61 2f       	mov	r22, r17
    5f3e:	40 2f       	mov	r20, r16
    5f40:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
    5f44:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    5f46:	81 2f       	mov	r24, r17
    5f48:	99 27       	eor	r25, r25
    5f4a:	87 fd       	sbrc	r24, 7
    5f4c:	90 95       	com	r25
    5f4e:	8c 17       	cp	r24, r28
    5f50:	9d 07       	cpc	r25, r29
    5f52:	99 f7       	brne	.-26     	; 0x5f3a <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    5f54:	8f 2d       	mov	r24, r15
    5f56:	61 2f       	mov	r22, r17
    5f58:	1c c0       	rjmp	.+56     	; 0x5f92 <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    5f5a:	62 17       	cp	r22, r18
    5f5c:	e9 f4       	brne	.+58     	; 0x5f98 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    5f5e:	48 17       	cp	r20, r24
    5f60:	18 f4       	brcc	.+6      	; 0x5f68 <display_drawLine+0x5a>
    5f62:	dd 24       	eor	r13, r13
    5f64:	da 94       	dec	r13
    5f66:	02 c0       	rjmp	.+4      	; 0x5f6c <display_drawLine+0x5e>
    5f68:	dd 24       	eor	r13, r13
    5f6a:	d3 94       	inc	r13
		i = row1;
    5f6c:	1f 2d       	mov	r17, r15
		while(i != row2) {
    5f6e:	c4 2f       	mov	r28, r20
    5f70:	d0 e0       	ldi	r29, 0x00	; 0
    5f72:	06 c0       	rjmp	.+12     	; 0x5f80 <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    5f74:	81 2f       	mov	r24, r17
    5f76:	6e 2d       	mov	r22, r14
    5f78:	40 2f       	mov	r20, r16
    5f7a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
    5f7e:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    5f80:	81 2f       	mov	r24, r17
    5f82:	99 27       	eor	r25, r25
    5f84:	87 fd       	sbrc	r24, 7
    5f86:	90 95       	com	r25
    5f88:	8c 17       	cp	r24, r28
    5f8a:	9d 07       	cpc	r25, r29
    5f8c:	99 f7       	brne	.-26     	; 0x5f74 <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    5f8e:	81 2f       	mov	r24, r17
    5f90:	6e 2d       	mov	r22, r14
    5f92:	40 2f       	mov	r20, r16
    5f94:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
			
			
		}
		*/
	}
}
    5f98:	df 91       	pop	r29
    5f9a:	cf 91       	pop	r28
    5f9c:	1f 91       	pop	r17
    5f9e:	0f 91       	pop	r16
    5fa0:	ff 90       	pop	r15
    5fa2:	ef 90       	pop	r14
    5fa4:	df 90       	pop	r13
    5fa6:	08 95       	ret

00005fa8 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5fa8:	6f 92       	push	r6
    5faa:	7f 92       	push	r7
    5fac:	8f 92       	push	r8
    5fae:	9f 92       	push	r9
    5fb0:	bf 92       	push	r11
    5fb2:	cf 92       	push	r12
    5fb4:	df 92       	push	r13
    5fb6:	ef 92       	push	r14
    5fb8:	ff 92       	push	r15
    5fba:	0f 93       	push	r16
    5fbc:	1f 93       	push	r17
    5fbe:	cf 93       	push	r28
    5fc0:	df 93       	push	r29
    5fc2:	18 2f       	mov	r17, r24
    5fc4:	b6 2e       	mov	r11, r22
    5fc6:	d2 2e       	mov	r13, r18
    5fc8:	d6 0e       	add	r13, r22
    5fca:	f4 2e       	mov	r15, r20
    5fcc:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5fce:	00 23       	and	r16, r16
    5fd0:	c1 f4       	brne	.+48     	; 0x6002 <__stack+0x3>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    5fd2:	41 2f       	mov	r20, r17
    5fd4:	2d 2d       	mov	r18, r13
    5fd6:	0c 2d       	mov	r16, r12
    5fd8:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5fdc:	8f 2d       	mov	r24, r15
    5fde:	6b 2d       	mov	r22, r11
    5fe0:	4f 2d       	mov	r20, r15
    5fe2:	2d 2d       	mov	r18, r13
    5fe4:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5fe8:	81 2f       	mov	r24, r17
    5fea:	6b 2d       	mov	r22, r11
    5fec:	4f 2d       	mov	r20, r15
    5fee:	2b 2d       	mov	r18, r11
    5ff0:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    5ff4:	81 2f       	mov	r24, r17
    5ff6:	6d 2d       	mov	r22, r13
    5ff8:	4f 2d       	mov	r20, r15
    5ffa:	2d 2d       	mov	r18, r13
    5ffc:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
    6000:	63 c0       	rjmp	.+198    	; 0x60c8 <__stack+0xc9>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    6002:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    6004:	08 2f       	mov	r16, r24
    6006:	10 e0       	ldi	r17, 0x00	; 0
    6008:	04 0f       	add	r16, r20
    600a:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    600c:	cf 2d       	mov	r28, r15
    600e:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    6010:	a7 e0       	ldi	r26, 0x07	; 7
    6012:	b0 e0       	ldi	r27, 0x00	; 0
    6014:	ac 1b       	sub	r26, r28
    6016:	bd 0b       	sbc	r27, r29
    6018:	2f ef       	ldi	r18, 0xFF	; 255
    601a:	82 2e       	mov	r8, r18
    601c:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    601e:	96 e6       	ldi	r25, 0x66	; 102
    6020:	69 2e       	mov	r6, r25
    6022:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    6024:	88 e0       	ldi	r24, 0x08	; 8
    6026:	c8 2e       	mov	r12, r24
    6028:	49 c0       	rjmp	.+146    	; 0x60bc <__stack+0xbd>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    602a:	f7 e0       	ldi	r31, 0x07	; 7
    602c:	ff 2e       	mov	r15, r31
    602e:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    6030:	6f 2d       	mov	r22, r15
    6032:	70 e0       	ldi	r23, 0x00	; 0
    6034:	c9 01       	movw	r24, r18
    6036:	07 96       	adiw	r24, 0x07	; 7
    6038:	86 1b       	sub	r24, r22
    603a:	97 0b       	sbc	r25, r23
    603c:	c8 17       	cp	r28, r24
    603e:	d9 07       	cpc	r29, r25
    6040:	44 f0       	brlt	.+16     	; 0x6052 <__stack+0x53>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    6042:	c4 01       	movw	r24, r8
    6044:	0f 2c       	mov	r0, r15
    6046:	02 c0       	rjmp	.+4      	; 0x604c <__stack+0x4d>
    6048:	88 0f       	add	r24, r24
    604a:	99 1f       	adc	r25, r25
    604c:	0a 94       	dec	r0
    604e:	e2 f7       	brpl	.-8      	; 0x6048 <__stack+0x49>
    6050:	08 c0       	rjmp	.+16     	; 0x6062 <__stack+0x63>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    6052:	2a 0f       	add	r18, r26
    6054:	3b 1f       	adc	r19, r27
    6056:	c4 01       	movw	r24, r8
    6058:	02 c0       	rjmp	.+4      	; 0x605e <__stack+0x5f>
    605a:	95 95       	asr	r25
    605c:	87 95       	ror	r24
    605e:	2a 95       	dec	r18
    6060:	e2 f7       	brpl	.-8      	; 0x605a <__stack+0x5b>
    6062:	28 2f       	mov	r18, r24
			}
			page = i/8;
    6064:	85 2f       	mov	r24, r21
    6066:	86 95       	lsr	r24
    6068:	86 95       	lsr	r24
    606a:	86 95       	lsr	r24
    606c:	3b 2d       	mov	r19, r11
    606e:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    6070:	86 9d       	mul	r24, r6
    6072:	b0 01       	movw	r22, r0
    6074:	87 9d       	mul	r24, r7
    6076:	70 0d       	add	r23, r0
    6078:	96 9d       	mul	r25, r6
    607a:	70 0d       	add	r23, r0
    607c:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    607e:	42 2f       	mov	r20, r18
    6080:	40 95       	com	r20
    6082:	17 c0       	rjmp	.+46     	; 0x60b2 <__stack+0xb3>
    6084:	e3 2f       	mov	r30, r19
    6086:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    6088:	ee 20       	and	r14, r14
    608a:	69 f0       	breq	.+26     	; 0x60a6 <__stack+0xa7>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    608c:	e6 0f       	add	r30, r22
    608e:	f7 1f       	adc	r31, r23
    6090:	ef 50       	subi	r30, 0x0F	; 15
    6092:	fa 4a       	sbci	r31, 0xAA	; 170
    6094:	80 81       	ld	r24, Z
    6096:	90 81       	ld	r25, Z
    6098:	82 23       	and	r24, r18
    609a:	80 95       	com	r24
    609c:	82 23       	and	r24, r18
    609e:	94 23       	and	r25, r20
    60a0:	89 2b       	or	r24, r25
    60a2:	80 83       	st	Z, r24
    60a4:	05 c0       	rjmp	.+10     	; 0x60b0 <__stack+0xb1>
				} else {
					displayBuffer[page][j] = byteOut;	
    60a6:	e6 0f       	add	r30, r22
    60a8:	f7 1f       	adc	r31, r23
    60aa:	ef 50       	subi	r30, 0x0F	; 15
    60ac:	fa 4a       	sbci	r31, 0xAA	; 170
    60ae:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    60b0:	3f 5f       	subi	r19, 0xFF	; 255
    60b2:	d3 16       	cp	r13, r19
    60b4:	38 f7       	brcc	.-50     	; 0x6084 <__stack+0x85>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    60b6:	8c 2d       	mov	r24, r12
    60b8:	8f 19       	sub	r24, r15
    60ba:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    60bc:	25 2f       	mov	r18, r21
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	02 17       	cp	r16, r18
    60c2:	13 07       	cpc	r17, r19
    60c4:	0c f0       	brlt	.+2      	; 0x60c8 <__stack+0xc9>
    60c6:	b1 cf       	rjmp	.-158    	; 0x602a <__stack+0x2b>
			i += (8 - remainder);	
		}
	
	}
			
}
    60c8:	df 91       	pop	r29
    60ca:	cf 91       	pop	r28
    60cc:	1f 91       	pop	r17
    60ce:	0f 91       	pop	r16
    60d0:	ff 90       	pop	r15
    60d2:	ef 90       	pop	r14
    60d4:	df 90       	pop	r13
    60d6:	cf 90       	pop	r12
    60d8:	bf 90       	pop	r11
    60da:	9f 90       	pop	r9
    60dc:	8f 90       	pop	r8
    60de:	7f 90       	pop	r7
    60e0:	6f 90       	pop	r6
    60e2:	08 95       	ret

000060e4 <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    60e4:	88 e0       	ldi	r24, 0x08	; 8
    60e6:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    60ea:	80 ec       	ldi	r24, 0xC0	; 192
    60ec:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    60f0:	e0 e0       	ldi	r30, 0x00	; 0
    60f2:	f8 e0       	ldi	r31, 0x08	; 8
    60f4:	8f ef       	ldi	r24, 0xFF	; 255
    60f6:	9f ef       	ldi	r25, 0xFF	; 255
    60f8:	86 a3       	std	Z+38, r24	; 0x26
    60fa:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    60fc:	80 81       	ld	r24, Z
    60fe:	80 7f       	andi	r24, 0xF0	; 240
    6100:	84 60       	ori	r24, 0x04	; 4
    6102:	80 83       	st	Z, r24
  
	
	
}
    6104:	08 95       	ret

00006106 <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    6106:	f8 94       	cli
  UNIX_time = time;
    6108:	60 93 36 34 	sts	0x3436, r22
    610c:	70 93 37 34 	sts	0x3437, r23
    6110:	80 93 38 34 	sts	0x3438, r24
    6114:	90 93 39 34 	sts	0x3439, r25
  sei();
    6118:	78 94       	sei
}
    611a:	08 95       	ret

0000611c <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    611c:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    611e:	20 91 60 08 	lds	r18, 0x0860
    6122:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    6126:	60 91 20 08 	lds	r22, 0x0820
    612a:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    612e:	80 91 60 08 	lds	r24, 0x0860
    6132:	90 91 61 08 	lds	r25, 0x0861
    6136:	28 17       	cp	r18, r24
    6138:	39 07       	cpc	r19, r25
    613a:	41 f0       	breq	.+16     	; 0x614c <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    613c:	20 91 60 08 	lds	r18, 0x0860
    6140:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    6144:	60 91 20 08 	lds	r22, 0x0820
    6148:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    614c:	78 94       	sei
    614e:	40 e0       	ldi	r20, 0x00	; 0
    6150:	50 e0       	ldi	r21, 0x00	; 0
    6152:	a9 01       	movw	r20, r18
    6154:	33 27       	eor	r19, r19
    6156:	22 27       	eor	r18, r18
    6158:	cb 01       	movw	r24, r22
    615a:	a0 e0       	ldi	r26, 0x00	; 0
    615c:	b0 e0       	ldi	r27, 0x00	; 0
    615e:	28 0f       	add	r18, r24
    6160:	39 1f       	adc	r19, r25
    6162:	4a 1f       	adc	r20, r26
    6164:	5b 1f       	adc	r21, r27
  return result;
}
    6166:	b9 01       	movw	r22, r18
    6168:	ca 01       	movw	r24, r20
    616a:	08 95       	ret

0000616c <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    616c:	e0 e0       	ldi	r30, 0x00	; 0
    616e:	f2 e0       	ldi	r31, 0x02	; 2
    6170:	92 e0       	ldi	r25, 0x02	; 2
    6172:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    6174:	8a e2       	ldi	r24, 0x2A	; 42
    6176:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6178:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    617a:	83 e2       	ldi	r24, 0x23	; 35
    617c:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    617e:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    6180:	88 e3       	ldi	r24, 0x38	; 56
    6182:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6184:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    6186:	81 e3       	ldi	r24, 0x31	; 49
    6188:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    618a:	84 81       	ldd	r24, Z+4	; 0x04
    618c:	88 7f       	andi	r24, 0xF8	; 248
    618e:	84 60       	ori	r24, 0x04	; 4
    6190:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    6192:	80 e1       	ldi	r24, 0x10	; 16
    6194:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    6196:	83 81       	ldd	r24, Z+3	; 0x03
    6198:	80 6c       	ori	r24, 0xC0	; 192
    619a:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    619c:	81 81       	ldd	r24, Z+1	; 0x01
    619e:	88 61       	ori	r24, 0x18	; 24
    61a0:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    61a2:	80 a1       	ldd	r24, Z+32	; 0x20
    61a4:	80 68       	ori	r24, 0x80	; 128
    61a6:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    61a8:	80 a5       	ldd	r24, Z+40	; 0x28
    61aa:	80 68       	ori	r24, 0x80	; 128
    61ac:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    61ae:	80 ad       	ldd	r24, Z+56	; 0x38
    61b0:	80 68       	ori	r24, 0x80	; 128
    61b2:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    61b4:	80 a9       	ldd	r24, Z+48	; 0x30
    61b6:	80 68       	ori	r24, 0x80	; 128
    61b8:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    61ba:	81 e0       	ldi	r24, 0x01	; 1
    61bc:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    61be:	e0 e4       	ldi	r30, 0x40	; 64
    61c0:	f9 e0       	ldi	r31, 0x09	; 9
    61c2:	80 e4       	ldi	r24, 0x40	; 64
    61c4:	98 e3       	ldi	r25, 0x38	; 56
    61c6:	86 a3       	std	Z+38, r24	; 0x26
    61c8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    61ca:	80 81       	ld	r24, Z
    61cc:	80 7f       	andi	r24, 0xF0	; 240
    61ce:	87 60       	ori	r24, 0x07	; 7
    61d0:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61d2:	86 81       	ldd	r24, Z+6	; 0x06
    61d4:	83 60       	ori	r24, 0x03	; 3
    61d6:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    61d8:	e0 e0       	ldi	r30, 0x00	; 0
    61da:	fb e0       	ldi	r31, 0x0B	; 11
    61dc:	80 e0       	ldi	r24, 0x00	; 0
    61de:	91 e0       	ldi	r25, 0x01	; 1
    61e0:	86 a3       	std	Z+38, r24	; 0x26
    61e2:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    61e4:	80 81       	ld	r24, Z
    61e6:	80 7f       	andi	r24, 0xF0	; 240
    61e8:	84 60       	ori	r24, 0x04	; 4
    61ea:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61ec:	86 81       	ldd	r24, Z+6	; 0x06
    61ee:	83 60       	ori	r24, 0x03	; 3
    61f0:	86 83       	std	Z+6, r24	; 0x06

}
    61f2:	08 95       	ret

000061f4 <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    61f4:	e0 e0       	ldi	r30, 0x00	; 0
    61f6:	f2 e0       	ldi	r31, 0x02	; 2
    61f8:	60 89       	ldd	r22, Z+16	; 0x10
    61fa:	71 89       	ldd	r23, Z+17	; 0x11
    61fc:	80 e0       	ldi	r24, 0x00	; 0
    61fe:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    6200:	2a ea       	ldi	r18, 0xAA	; 170
    6202:	35 e2       	ldi	r19, 0x25	; 37
    6204:	43 e0       	ldi	r20, 0x03	; 3
    6206:	50 e0       	ldi	r21, 0x00	; 0
    6208:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    620c:	67 5f       	subi	r22, 0xF7	; 247
    620e:	7a 40       	sbci	r23, 0x0A	; 10
    6210:	88 4e       	sbci	r24, 0xE8	; 232
    6212:	91 40       	sbci	r25, 0x01	; 1
    6214:	21 e5       	ldi	r18, 0x51	; 81
    6216:	37 e7       	ldi	r19, 0x77	; 119
    6218:	45 e0       	ldi	r20, 0x05	; 5
    621a:	50 e0       	ldi	r21, 0x00	; 0
    621c:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6220:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    6222:	08 95       	ret

00006224 <Sensors_ReadHumidity>:

uint16_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    6224:	e0 e0       	ldi	r30, 0x00	; 0
    6226:	f2 e0       	ldi	r31, 0x02	; 2
    6228:	62 89       	ldd	r22, Z+18	; 0x12
    622a:	73 89       	ldd	r23, Z+19	; 0x13
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 76230;
    6230:	26 ec       	ldi	r18, 0xC6	; 198
    6232:	39 e2       	ldi	r19, 0x29	; 41
    6234:	41 e0       	ldi	r20, 0x01	; 1
    6236:	50 e0       	ldi	r21, 0x00	; 0
    6238:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    623c:	68 51       	subi	r22, 0x18	; 24
    623e:	7e 41       	sbci	r23, 0x1E	; 30
    6240:	8f 40       	sbci	r24, 0x0F	; 15
    6242:	91 40       	sbci	r25, 0x01	; 1
    6244:	28 ed       	ldi	r18, 0xD8	; 216
    6246:	3f e3       	ldi	r19, 0x3F	; 63
    6248:	41 e0       	ldi	r20, 0x01	; 1
    624a:	50 e0       	ldi	r21, 0x00	; 0
    624c:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6250:	c9 01       	movw	r24, r18
	tmp -= 17767960;
	tmp2 = tmp / 81880;

	return tmp2;
}
    6252:	08 95       	ret

00006254 <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    6254:	e0 e0       	ldi	r30, 0x00	; 0
    6256:	f2 e0       	ldi	r31, 0x02	; 2
    6258:	86 89       	ldd	r24, Z+22	; 0x16
    625a:	97 89       	ldd	r25, Z+23	; 0x17
    625c:	f4 e0       	ldi	r31, 0x04	; 4
    625e:	96 95       	lsr	r25
    6260:	87 95       	ror	r24
    6262:	fa 95       	dec	r31
    6264:	e1 f7       	brne	.-8      	; 0x625e <Sensors_ReadMicrophone+0xa>
}
    6266:	08 95       	ret

00006268 <Sensors_ReadPressure>:

uint16_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    6268:	e0 e0       	ldi	r30, 0x00	; 0
    626a:	f2 e0       	ldi	r31, 0x02	; 2
    626c:	64 89       	ldd	r22, Z+20	; 0x14
    626e:	75 89       	ldd	r23, Z+21	; 0x15
    6270:	80 e0       	ldi	r24, 0x00	; 0
    6272:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 412500;
    6274:	24 e5       	ldi	r18, 0x54	; 84
    6276:	3b e4       	ldi	r19, 0x4B	; 75
    6278:	46 e0       	ldi	r20, 0x06	; 6
    627a:	50 e0       	ldi	r21, 0x00	; 0
    627c:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    6280:	66 57       	subi	r22, 0x76	; 118
    6282:	7a 4c       	sbci	r23, 0xCA	; 202
    6284:	8c 42       	sbci	r24, 0x2C	; 44
    6286:	9c 4f       	sbci	r25, 0xFC	; 252
    6288:	27 ed       	ldi	r18, 0xD7	; 215
    628a:	36 e4       	ldi	r19, 0x46	; 70
    628c:	49 e0       	ldi	r20, 0x09	; 9
    628e:	50 e0       	ldi	r21, 0x00	; 0
    6290:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6294:	c9 01       	movw	r24, r18
	tmp += 64173450;
	tmp2 = tmp / 607959;

	return tmp2;
}
    6296:	08 95       	ret

00006298 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    6298:	10 92 3f 34 	sts	0x343F, r1
  	temperatureBufferToWriteTo = 1;
    629c:	81 e0       	ldi	r24, 0x01	; 1
    629e:	80 93 55 31 	sts	0x3155, r24
	okToSendTemperatureBuffer1 = false;
    62a2:	10 92 3d 34 	sts	0x343D, r1
	okToSendTemperatureBuffer2 = false;
    62a6:	10 92 3e 34 	sts	0x343E, r1
}
    62aa:	08 95       	ret

000062ac <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    62ac:	10 92 42 34 	sts	0x3442, r1
	pressureBufferToWriteTo = 1;
    62b0:	81 e0       	ldi	r24, 0x01	; 1
    62b2:	80 93 56 31 	sts	0x3156, r24
	okToSendPressureBuffer1 = false;
    62b6:	10 92 40 34 	sts	0x3440, r1
	okToSendPressureBuffer2 = false;
    62ba:	10 92 41 34 	sts	0x3441, r1
}
    62be:	08 95       	ret

000062c0 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    62c0:	10 92 45 34 	sts	0x3445, r1
	humidityBufferToWriteTo = 1;
    62c4:	81 e0       	ldi	r24, 0x01	; 1
    62c6:	80 93 57 31 	sts	0x3157, r24
	okToSendHumidityBuffer1 = false;
    62ca:	10 92 43 34 	sts	0x3443, r1
	okToSendHumidityBuffer2 = false;
    62ce:	10 92 44 34 	sts	0x3444, r1
}
    62d2:	08 95       	ret

000062d4 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    62d4:	10 92 48 34 	sts	0x3448, r1
    62d8:	10 92 49 34 	sts	0x3449, r1
	microphoneBufferToWriteTo = 1;
    62dc:	81 e0       	ldi	r24, 0x01	; 1
    62de:	80 93 58 31 	sts	0x3158, r24
	okToSendMicrophoneBuffer1 = false;
    62e2:	10 92 46 34 	sts	0x3446, r1
	okToSendMicrophoneBuffer2 = false;
    62e6:	10 92 47 34 	sts	0x3447, r1
}
    62ea:	08 95       	ret

000062ec <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    62ec:	10 92 4c 34 	sts	0x344C, r1
	lightBufferToWriteTo = 1;
    62f0:	81 e0       	ldi	r24, 0x01	; 1
    62f2:	80 93 59 31 	sts	0x3159, r24
	okToSendLightBuffer1 = false;
    62f6:	10 92 4a 34 	sts	0x344A, r1
	okToSendLightBuffer2 = false;
    62fa:	10 92 4b 34 	sts	0x344B, r1
}
    62fe:	08 95       	ret

00006300 <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    6300:	1f 92       	push	r1
    6302:	0f 92       	push	r0
    6304:	0f b6       	in	r0, 0x3f	; 63
    6306:	0f 92       	push	r0
    6308:	0b b6       	in	r0, 0x3b	; 59
    630a:	0f 92       	push	r0
    630c:	11 24       	eor	r1, r1
    630e:	0f 93       	push	r16
    6310:	1f 93       	push	r17
    6312:	2f 93       	push	r18
    6314:	3f 93       	push	r19
    6316:	4f 93       	push	r20
    6318:	5f 93       	push	r21
    631a:	6f 93       	push	r22
    631c:	7f 93       	push	r23
    631e:	8f 93       	push	r24
    6320:	9f 93       	push	r25
    6322:	af 93       	push	r26
    6324:	bf 93       	push	r27
    6326:	ef 93       	push	r30
    6328:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    632a:	80 91 3b 34 	lds	r24, 0x343B
    632e:	88 23       	and	r24, r24
    6330:	09 f4       	brne	.+2      	; 0x6334 <__vector_108+0x34>
    6332:	9b c0       	rjmp	.+310    	; 0x646a <__vector_108+0x16a>
    6334:	80 91 4f 34 	lds	r24, 0x344F
    6338:	88 23       	and	r24, r24
    633a:	09 f4       	brne	.+2      	; 0x633e <__vector_108+0x3e>
    633c:	96 c0       	rjmp	.+300    	; 0x646a <__vector_108+0x16a>
	  if((microphoneBufferToWriteTo == 1) && !okToSendMicrophoneBuffer1){
    633e:	80 91 58 31 	lds	r24, 0x3158
    6342:	81 30       	cpi	r24, 0x01	; 1
    6344:	09 f0       	breq	.+2      	; 0x6348 <__vector_108+0x48>
    6346:	48 c0       	rjmp	.+144    	; 0x63d8 <__vector_108+0xd8>
    6348:	80 91 46 34 	lds	r24, 0x3446
    634c:	88 23       	and	r24, r24
    634e:	09 f0       	breq	.+2      	; 0x6352 <__vector_108+0x52>
    6350:	94 c0       	rjmp	.+296    	; 0x647a <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    6352:	80 91 48 34 	lds	r24, 0x3448
    6356:	90 91 49 34 	lds	r25, 0x3449
    635a:	89 2b       	or	r24, r25
    635c:	51 f4       	brne	.+20     	; 0x6372 <__vector_108+0x72>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    635e:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    6362:	60 93 f6 33 	sts	0x33F6, r22
    6366:	70 93 f7 33 	sts	0x33F7, r23
    636a:	80 93 f8 33 	sts	0x33F8, r24
    636e:	90 93 f9 33 	sts	0x33F9, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6372:	00 91 48 34 	lds	r16, 0x3448
    6376:	10 91 49 34 	lds	r17, 0x3449
    637a:	0e 94 2a 31 	call	0x6254	; 0x6254 <Sensors_ReadMicrophone>
    637e:	03 5e       	subi	r16, 0xE3	; 227
    6380:	18 4b       	sbci	r17, 0xB8	; 184
    6382:	f8 01       	movw	r30, r16
    6384:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6386:	80 91 5e 34 	lds	r24, 0x345E
    638a:	88 23       	and	r24, r24
    638c:	49 f4       	brne	.+18     	; 0x63a0 <__vector_108+0xa0>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    638e:	e0 91 48 34 	lds	r30, 0x3448
    6392:	f0 91 49 34 	lds	r31, 0x3449
    6396:	e3 5e       	subi	r30, 0xE3	; 227
    6398:	f8 4b       	sbci	r31, 0xB8	; 184
    639a:	80 81       	ld	r24, Z
    639c:	80 93 55 34 	sts	0x3455, r24
	    }
	    microphoneBufferCounter++;
    63a0:	80 91 48 34 	lds	r24, 0x3448
    63a4:	90 91 49 34 	lds	r25, 0x3449
    63a8:	01 96       	adiw	r24, 0x01	; 1
    63aa:	80 93 48 34 	sts	0x3448, r24
    63ae:	90 93 49 34 	sts	0x3449, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    63b2:	88 5e       	subi	r24, 0xE8	; 232
    63b4:	93 40       	sbci	r25, 0x03	; 3
    63b6:	09 f0       	breq	.+2      	; 0x63ba <__vector_108+0xba>
    63b8:	60 c0       	rjmp	.+192    	; 0x647a <__vector_108+0x17a>
	    	quickMic = microphoneBuffer1[0];
    63ba:	80 91 1d 47 	lds	r24, 0x471D
    63be:	80 93 55 34 	sts	0x3455, r24
	    	microphoneBufferCounter=0;
    63c2:	10 92 48 34 	sts	0x3448, r1
    63c6:	10 92 49 34 	sts	0x3449, r1
	    	microphoneBufferToWriteTo = 2;
    63ca:	82 e0       	ldi	r24, 0x02	; 2
    63cc:	80 93 58 31 	sts	0x3158, r24
	    	okToSendMicrophoneBuffer1 = true;
    63d0:	81 e0       	ldi	r24, 0x01	; 1
    63d2:	80 93 46 34 	sts	0x3446, r24
    63d6:	51 c0       	rjmp	.+162    	; 0x647a <__vector_108+0x17a>
	    }
	  } else if ((microphoneBufferToWriteTo == 2)&& !okToSendMicrophoneBuffer2){
    63d8:	82 30       	cpi	r24, 0x02	; 2
    63da:	09 f0       	breq	.+2      	; 0x63de <__vector_108+0xde>
    63dc:	4e c0       	rjmp	.+156    	; 0x647a <__vector_108+0x17a>
    63de:	80 91 47 34 	lds	r24, 0x3447
    63e2:	88 23       	and	r24, r24
    63e4:	09 f0       	breq	.+2      	; 0x63e8 <__vector_108+0xe8>
    63e6:	49 c0       	rjmp	.+146    	; 0x647a <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    63e8:	80 91 48 34 	lds	r24, 0x3448
    63ec:	90 91 49 34 	lds	r25, 0x3449
    63f0:	89 2b       	or	r24, r25
    63f2:	51 f4       	brne	.+20     	; 0x6408 <__vector_108+0x108>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    63f4:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    63f8:	60 93 fa 33 	sts	0x33FA, r22
    63fc:	70 93 fb 33 	sts	0x33FB, r23
    6400:	80 93 fc 33 	sts	0x33FC, r24
    6404:	90 93 fd 33 	sts	0x33FD, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6408:	00 91 48 34 	lds	r16, 0x3448
    640c:	10 91 49 34 	lds	r17, 0x3449
    6410:	0e 94 2a 31 	call	0x6254	; 0x6254 <Sensors_ReadMicrophone>
    6414:	03 51       	subi	r16, 0x13	; 19
    6416:	1e 4b       	sbci	r17, 0xBE	; 190
    6418:	f8 01       	movw	r30, r16
    641a:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    641c:	80 91 5e 34 	lds	r24, 0x345E
    6420:	88 23       	and	r24, r24
    6422:	49 f4       	brne	.+18     	; 0x6436 <__vector_108+0x136>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    6424:	e0 91 48 34 	lds	r30, 0x3448
    6428:	f0 91 49 34 	lds	r31, 0x3449
    642c:	e3 51       	subi	r30, 0x13	; 19
    642e:	fe 4b       	sbci	r31, 0xBE	; 190
    6430:	80 81       	ld	r24, Z
    6432:	80 93 55 34 	sts	0x3455, r24
	    }

	    microphoneBufferCounter++;
    6436:	80 91 48 34 	lds	r24, 0x3448
    643a:	90 91 49 34 	lds	r25, 0x3449
    643e:	01 96       	adiw	r24, 0x01	; 1
    6440:	80 93 48 34 	sts	0x3448, r24
    6444:	90 93 49 34 	sts	0x3449, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6448:	88 5e       	subi	r24, 0xE8	; 232
    644a:	93 40       	sbci	r25, 0x03	; 3
    644c:	b1 f4       	brne	.+44     	; 0x647a <__vector_108+0x17a>
	    	quickMic = microphoneBuffer2[0];
    644e:	80 91 ed 41 	lds	r24, 0x41ED
    6452:	80 93 55 34 	sts	0x3455, r24
	    	microphoneBufferCounter=0;
    6456:	10 92 48 34 	sts	0x3448, r1
    645a:	10 92 49 34 	sts	0x3449, r1
	    	microphoneBufferToWriteTo = 1;
    645e:	81 e0       	ldi	r24, 0x01	; 1
    6460:	80 93 58 31 	sts	0x3158, r24
	    	okToSendMicrophoneBuffer2 = true;
    6464:	80 93 47 34 	sts	0x3447, r24
    6468:	08 c0       	rjmp	.+16     	; 0x647a <__vector_108+0x17a>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    646a:	80 91 5e 34 	lds	r24, 0x345E
    646e:	88 23       	and	r24, r24
    6470:	21 f4       	brne	.+8      	; 0x647a <__vector_108+0x17a>
			quickMic = Sensors_ReadMicrophone();
    6472:	0e 94 2a 31 	call	0x6254	; 0x6254 <Sensors_ReadMicrophone>
    6476:	80 93 55 34 	sts	0x3455, r24
		}
	}
	micSampleCounter++;
    647a:	80 91 5e 34 	lds	r24, 0x345E
    647e:	8f 5f       	subi	r24, 0xFF	; 255
    6480:	80 93 5e 34 	sts	0x345E, r24
}
    6484:	ff 91       	pop	r31
    6486:	ef 91       	pop	r30
    6488:	bf 91       	pop	r27
    648a:	af 91       	pop	r26
    648c:	9f 91       	pop	r25
    648e:	8f 91       	pop	r24
    6490:	7f 91       	pop	r23
    6492:	6f 91       	pop	r22
    6494:	5f 91       	pop	r21
    6496:	4f 91       	pop	r20
    6498:	3f 91       	pop	r19
    649a:	2f 91       	pop	r18
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	0f 90       	pop	r0
    64a2:	0b be       	out	0x3b, r0	; 59
    64a4:	0f 90       	pop	r0
    64a6:	0f be       	out	0x3f, r0	; 63
    64a8:	0f 90       	pop	r0
    64aa:	1f 90       	pop	r1
    64ac:	18 95       	reti

000064ae <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    64ae:	30 91 f5 4c 	lds	r19, 0x4CF5
    64b2:	93 2f       	mov	r25, r19
    64b4:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    64b6:	28 2f       	mov	r18, r24
    64b8:	20 68       	ori	r18, 0x80	; 128
    64ba:	20 93 f0 55 	sts	0x55F0, r18


	LightPort.MASTER.ADDR = writeAddress;
    64be:	e0 e8       	ldi	r30, 0x80	; 128
    64c0:	f4 e0       	ldi	r31, 0x04	; 4
    64c2:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64c4:	80 91 84 04 	lds	r24, 0x0484
    64c8:	86 ff       	sbrs	r24, 6
    64ca:	fc cf       	rjmp	.-8      	; 0x64c4 <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    64cc:	e0 e8       	ldi	r30, 0x80	; 128
    64ce:	f4 e0       	ldi	r31, 0x04	; 4
    64d0:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64d2:	80 91 84 04 	lds	r24, 0x0484
    64d6:	86 ff       	sbrs	r24, 6
    64d8:	fc cf       	rjmp	.-8      	; 0x64d2 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    64da:	83 2f       	mov	r24, r19
    64dc:	81 60       	ori	r24, 0x01	; 1
    64de:	80 93 17 4c 	sts	0x4C17, r24
	LightPort.MASTER.ADDR = writeAddress;
    64e2:	e0 e8       	ldi	r30, 0x80	; 128
    64e4:	f4 e0       	ldi	r31, 0x04	; 4
    64e6:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    64e8:	80 91 84 04 	lds	r24, 0x0484
    64ec:	87 ff       	sbrs	r24, 7
    64ee:	fc cf       	rjmp	.-8      	; 0x64e8 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    64f0:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    64f4:	97 e0       	ldi	r25, 0x07	; 7
    64f6:	e0 e8       	ldi	r30, 0x80	; 128
    64f8:	f4 e0       	ldi	r31, 0x04	; 4
    64fa:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    64fc:	08 95       	ret

000064fe <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    64fe:	80 e0       	ldi	r24, 0x00	; 0
    6500:	0e 94 57 32 	call	0x64ae	; 0x64ae <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    6504:	20 91 f5 4c 	lds	r18, 0x4CF5
    6508:	92 2f       	mov	r25, r18
    650a:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    650c:	80 e9       	ldi	r24, 0x90	; 144
    650e:	80 93 f0 55 	sts	0x55F0, r24

	LightPort.MASTER.ADDR = writeAddress;
    6512:	e0 e8       	ldi	r30, 0x80	; 128
    6514:	f4 e0       	ldi	r31, 0x04	; 4
    6516:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6518:	80 91 84 04 	lds	r24, 0x0484
    651c:	86 ff       	sbrs	r24, 6
    651e:	fc cf       	rjmp	.-8      	; 0x6518 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6520:	80 e9       	ldi	r24, 0x90	; 144
    6522:	e0 e8       	ldi	r30, 0x80	; 128
    6524:	f4 e0       	ldi	r31, 0x04	; 4
    6526:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6528:	80 91 84 04 	lds	r24, 0x0484
    652c:	86 ff       	sbrs	r24, 6
    652e:	fc cf       	rjmp	.-8      	; 0x6528 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    6530:	82 2f       	mov	r24, r18
    6532:	81 60       	ori	r24, 0x01	; 1
    6534:	80 93 17 4c 	sts	0x4C17, r24
	LightPort.MASTER.ADDR = writeAddress;
    6538:	e0 e8       	ldi	r30, 0x80	; 128
    653a:	f4 e0       	ldi	r31, 0x04	; 4
    653c:	86 83       	std	Z+6, r24	; 0x06
    653e:	e0 e9       	ldi	r30, 0x90	; 144
    6540:	fc e4       	ldi	r31, 0x4C	; 76
    6542:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6544:	a0 e8       	ldi	r26, 0x80	; 128
    6546:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6548:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    654a:	80 91 84 04 	lds	r24, 0x0484
    654e:	87 ff       	sbrs	r24, 7
    6550:	fc cf       	rjmp	.-8      	; 0x654a <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    6552:	80 91 87 04 	lds	r24, 0x0487
    6556:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    6558:	97 30       	cpi	r25, 0x07	; 7
    655a:	19 f0       	breq	.+6      	; 0x6562 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    655c:	13 96       	adiw	r26, 0x03	; 3
    655e:	2c 93       	st	X, r18
    6560:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    6562:	9f 5f       	subi	r25, 0xFF	; 255
    6564:	31 96       	adiw	r30, 0x01	; 1
    6566:	98 30       	cpi	r25, 0x08	; 8
    6568:	81 f7       	brne	.-32     	; 0x654a <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    656a:	87 e0       	ldi	r24, 0x07	; 7
    656c:	e0 e8       	ldi	r30, 0x80	; 128
    656e:	f4 e0       	ldi	r31, 0x04	; 4
    6570:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    6572:	90 91 91 4c 	lds	r25, 0x4C91
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	20 91 90 4c 	lds	r18, 0x4C90
    657c:	82 0f       	add	r24, r18
    657e:	91 1d       	adc	r25, r1
    6580:	80 93 30 3d 	sts	0x3D30, r24
    6584:	90 93 31 3d 	sts	0x3D31, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    6588:	90 91 93 4c 	lds	r25, 0x4C93
    658c:	80 e0       	ldi	r24, 0x00	; 0
    658e:	20 91 92 4c 	lds	r18, 0x4C92
    6592:	82 0f       	add	r24, r18
    6594:	91 1d       	adc	r25, r1
    6596:	80 93 32 3d 	sts	0x3D32, r24
    659a:	90 93 33 3d 	sts	0x3D33, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    659e:	90 91 95 4c 	lds	r25, 0x4C95
    65a2:	80 e0       	ldi	r24, 0x00	; 0
    65a4:	20 91 94 4c 	lds	r18, 0x4C94
    65a8:	82 0f       	add	r24, r18
    65aa:	91 1d       	adc	r25, r1
    65ac:	80 93 34 3d 	sts	0x3D34, r24
    65b0:	90 93 35 3d 	sts	0x3D35, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    65b4:	90 91 97 4c 	lds	r25, 0x4C97
    65b8:	80 e0       	ldi	r24, 0x00	; 0
    65ba:	20 91 96 4c 	lds	r18, 0x4C96
    65be:	82 0f       	add	r24, r18
    65c0:	91 1d       	adc	r25, r1
    65c2:	80 93 36 3d 	sts	0x3D36, r24
    65c6:	90 93 37 3d 	sts	0x3D37, r25
}
    65ca:	08 95       	ret

000065cc <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    65cc:	e8 2f       	mov	r30, r24
    65ce:	f0 e0       	ldi	r31, 0x00	; 0
    65d0:	ee 0f       	add	r30, r30
    65d2:	ff 1f       	adc	r31, r31
    65d4:	e0 5d       	subi	r30, 0xD0	; 208
    65d6:	f2 4c       	sbci	r31, 0xC2	; 194
	return colors[color];
}
    65d8:	80 81       	ld	r24, Z
    65da:	91 81       	ldd	r25, Z+1	; 0x01
    65dc:	08 95       	ret

000065de <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    65de:	90 91 f5 4c 	lds	r25, 0x4CF5
    65e2:	9e 7f       	andi	r25, 0xFE	; 254
    65e4:	90 93 17 4c 	sts	0x4C17, r25
	commandCode = 0b10000000 | location;
    65e8:	28 2f       	mov	r18, r24
    65ea:	20 68       	ori	r18, 0x80	; 128
    65ec:	20 93 f0 55 	sts	0x55F0, r18

	LightPort.MASTER.ADDR = writeAddress;
    65f0:	e0 e8       	ldi	r30, 0x80	; 128
    65f2:	f4 e0       	ldi	r31, 0x04	; 4
    65f4:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65f6:	80 91 84 04 	lds	r24, 0x0484
    65fa:	86 ff       	sbrs	r24, 6
    65fc:	fc cf       	rjmp	.-8      	; 0x65f6 <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    65fe:	e0 e8       	ldi	r30, 0x80	; 128
    6600:	f4 e0       	ldi	r31, 0x04	; 4
    6602:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6604:	80 91 84 04 	lds	r24, 0x0484
    6608:	86 ff       	sbrs	r24, 6
    660a:	fc cf       	rjmp	.-8      	; 0x6604 <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    660c:	e0 e8       	ldi	r30, 0x80	; 128
    660e:	f4 e0       	ldi	r31, 0x04	; 4
    6610:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6612:	80 91 84 04 	lds	r24, 0x0484
    6616:	86 ff       	sbrs	r24, 6
    6618:	fc cf       	rjmp	.-8      	; 0x6612 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    661a:	87 e0       	ldi	r24, 0x07	; 7
    661c:	e0 e8       	ldi	r30, 0x80	; 128
    661e:	f4 e0       	ldi	r31, 0x04	; 4
    6620:	83 83       	std	Z+3, r24	; 0x03

}
    6622:	08 95       	ret

00006624 <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    6624:	80 e0       	ldi	r24, 0x00	; 0
    6626:	61 e0       	ldi	r22, 0x01	; 1
    6628:	0e 94 ef 32 	call	0x65de	; 0x65de <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    662c:	80 91 3a 34 	lds	r24, 0x343A
    6630:	ef e1       	ldi	r30, 0x1F	; 31
    6632:	f1 e3       	ldi	r31, 0x31	; 49
    6634:	e8 0f       	add	r30, r24
    6636:	f1 1d       	adc	r31, r1
    6638:	81 e0       	ldi	r24, 0x01	; 1
    663a:	60 81       	ld	r22, Z
    663c:	0e 94 ef 32 	call	0x65de	; 0x65de <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    6640:	80 91 3a 34 	lds	r24, 0x343A
    6644:	e8 e2       	ldi	r30, 0x28	; 40
    6646:	f1 e3       	ldi	r31, 0x31	; 49
    6648:	e8 0f       	add	r30, r24
    664a:	f1 1d       	adc	r31, r1
    664c:	87 e0       	ldi	r24, 0x07	; 7
    664e:	60 81       	ld	r22, Z
    6650:	0e 94 ef 32 	call	0x65de	; 0x65de <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	63 e0       	ldi	r22, 0x03	; 3
    6658:	0e 94 ef 32 	call	0x65de	; 0x65de <Light_writeByte>
}
    665c:	08 95       	ret

0000665e <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    665e:	80 93 f5 4c 	sts	0x4CF5, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6662:	e0 e8       	ldi	r30, 0x80	; 128
    6664:	f4 e0       	ldi	r31, 0x04	; 4
    6666:	88 e0       	ldi	r24, 0x08	; 8
    6668:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    666a:	84 e0       	ldi	r24, 0x04	; 4
    666c:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    666e:	8d e0       	ldi	r24, 0x0D	; 13
    6670:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6672:	81 e0       	ldi	r24, 0x01	; 1
    6674:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    6676:	10 92 3a 34 	sts	0x343A, r1
	Light_setGain();
    667a:	0e 94 12 33 	call	0x6624	; 0x6624 <Light_setGain>
}
    667e:	08 95       	ret

00006680 <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    6680:	1f 92       	push	r1
    6682:	0f 92       	push	r0
    6684:	0f b6       	in	r0, 0x3f	; 63
    6686:	0f 92       	push	r0
    6688:	0b b6       	in	r0, 0x3b	; 59
    668a:	0f 92       	push	r0
    668c:	11 24       	eor	r1, r1
    668e:	6f 92       	push	r6
    6690:	7f 92       	push	r7
    6692:	8f 92       	push	r8
    6694:	9f 92       	push	r9
    6696:	af 92       	push	r10
    6698:	bf 92       	push	r11
    669a:	cf 92       	push	r12
    669c:	df 92       	push	r13
    669e:	ef 92       	push	r14
    66a0:	ff 92       	push	r15
    66a2:	0f 93       	push	r16
    66a4:	1f 93       	push	r17
    66a6:	2f 93       	push	r18
    66a8:	3f 93       	push	r19
    66aa:	4f 93       	push	r20
    66ac:	5f 93       	push	r21
    66ae:	6f 93       	push	r22
    66b0:	7f 93       	push	r23
    66b2:	8f 93       	push	r24
    66b4:	9f 93       	push	r25
    66b6:	af 93       	push	r26
    66b8:	bf 93       	push	r27
    66ba:	cf 93       	push	r28
    66bc:	df 93       	push	r29
    66be:	ef 93       	push	r30
    66c0:	ff 93       	push	r31
    UNIX_time++;
    66c2:	80 91 36 34 	lds	r24, 0x3436
    66c6:	90 91 37 34 	lds	r25, 0x3437
    66ca:	a0 91 38 34 	lds	r26, 0x3438
    66ce:	b0 91 39 34 	lds	r27, 0x3439
    66d2:	01 96       	adiw	r24, 0x01	; 1
    66d4:	a1 1d       	adc	r26, r1
    66d6:	b1 1d       	adc	r27, r1
    66d8:	80 93 36 34 	sts	0x3436, r24
    66dc:	90 93 37 34 	sts	0x3437, r25
    66e0:	a0 93 38 34 	sts	0x3438, r26
    66e4:	b0 93 39 34 	sts	0x3439, r27
	if(recording){
    66e8:	80 91 3b 34 	lds	r24, 0x343B
    66ec:	88 23       	and	r24, r24
    66ee:	09 f4       	brne	.+2      	; 0x66f2 <__vector_83+0x72>
    66f0:	ca c2       	rjmp	.+1428   	; 0x6c86 <__vector_83+0x606>
	  rtcBlockCounter++;
    66f2:	80 91 4e 34 	lds	r24, 0x344E
    66f6:	8f 5f       	subi	r24, 0xFF	; 255
    66f8:	80 93 4e 34 	sts	0x344E, r24
	  if(rtcBlockCounter == 0){
    66fc:	88 23       	and	r24, r24
    66fe:	19 f4       	brne	.+6      	; 0x6706 <__vector_83+0x86>
	    okToSendRTCBlock = true;
    6700:	81 e0       	ldi	r24, 0x01	; 1
    6702:	80 93 4d 34 	sts	0x344D, r24
	  }

	  if(wantToRecordTemperature){
    6706:	80 91 5a 31 	lds	r24, 0x315A
    670a:	88 23       	and	r24, r24
    670c:	09 f4       	brne	.+2      	; 0x6710 <__vector_83+0x90>
    670e:	75 c0       	rjmp	.+234    	; 0x67fa <__vector_83+0x17a>
		  if(temperatureBufferToWriteTo == 1){
    6710:	80 91 55 31 	lds	r24, 0x3155
    6714:	81 30       	cpi	r24, 0x01	; 1
    6716:	c9 f5       	brne	.+114    	; 0x678a <__vector_83+0x10a>
			  if(temperatureBufferCounter == 0){
    6718:	80 91 3f 34 	lds	r24, 0x343F
    671c:	88 23       	and	r24, r24
    671e:	51 f4       	brne	.+20     	; 0x6734 <__vector_83+0xb4>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    6720:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    6724:	60 93 de 33 	sts	0x33DE, r22
    6728:	70 93 df 33 	sts	0x33DF, r23
    672c:	80 93 e0 33 	sts	0x33E0, r24
    6730:	90 93 e1 33 	sts	0x33E1, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    6734:	80 91 3f 34 	lds	r24, 0x343F
    6738:	c8 2f       	mov	r28, r24
    673a:	d0 e0       	ldi	r29, 0x00	; 0
    673c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <Sensors_ReadTemperature>
    6740:	cc 0f       	add	r28, r28
    6742:	dd 1f       	adc	r29, r29
    6744:	cb 5f       	subi	r28, 0xFB	; 251
    6746:	d4 4b       	sbci	r29, 0xB4	; 180
    6748:	88 83       	st	Y, r24
    674a:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    674c:	20 91 3f 34 	lds	r18, 0x343F
    6750:	e2 2f       	mov	r30, r18
    6752:	f0 e0       	ldi	r31, 0x00	; 0
    6754:	ee 0f       	add	r30, r30
    6756:	ff 1f       	adc	r31, r31
    6758:	eb 5f       	subi	r30, 0xFB	; 251
    675a:	f4 4b       	sbci	r31, 0xB4	; 180
    675c:	80 81       	ld	r24, Z
    675e:	91 81       	ldd	r25, Z+1	; 0x01
    6760:	6a e0       	ldi	r22, 0x0A	; 10
    6762:	70 e0       	ldi	r23, 0x00	; 0
    6764:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    6768:	60 93 50 34 	sts	0x3450, r22
			  temperatureBufferCounter++;
    676c:	2f 5f       	subi	r18, 0xFF	; 255
    676e:	20 93 3f 34 	sts	0x343F, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    6772:	2a 30       	cpi	r18, 0x0A	; 10
    6774:	09 f0       	breq	.+2      	; 0x6778 <__vector_83+0xf8>
    6776:	41 c0       	rjmp	.+130    	; 0x67fa <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    6778:	10 92 3f 34 	sts	0x343F, r1
				  temperatureBufferToWriteTo = 2;
    677c:	82 e0       	ldi	r24, 0x02	; 2
    677e:	80 93 55 31 	sts	0x3155, r24
				  okToSendTemperatureBuffer1 = true;
    6782:	81 e0       	ldi	r24, 0x01	; 1
    6784:	80 93 3d 34 	sts	0x343D, r24
    6788:	38 c0       	rjmp	.+112    	; 0x67fa <__vector_83+0x17a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    678a:	82 30       	cpi	r24, 0x02	; 2
    678c:	b1 f5       	brne	.+108    	; 0x67fa <__vector_83+0x17a>
			  if(temperatureBufferCounter == 0){
    678e:	80 91 3f 34 	lds	r24, 0x343F
    6792:	88 23       	and	r24, r24
    6794:	51 f4       	brne	.+20     	; 0x67aa <__vector_83+0x12a>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    6796:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    679a:	60 93 e2 33 	sts	0x33E2, r22
    679e:	70 93 e3 33 	sts	0x33E3, r23
    67a2:	80 93 e4 33 	sts	0x33E4, r24
    67a6:	90 93 e5 33 	sts	0x33E5, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    67aa:	80 91 3f 34 	lds	r24, 0x343F
    67ae:	c8 2f       	mov	r28, r24
    67b0:	d0 e0       	ldi	r29, 0x00	; 0
    67b2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <Sensors_ReadTemperature>
    67b6:	cc 0f       	add	r28, r28
    67b8:	dd 1f       	adc	r29, r29
    67ba:	c4 5d       	subi	r28, 0xD4	; 212
    67bc:	d3 4b       	sbci	r29, 0xB3	; 179
    67be:	88 83       	st	Y, r24
    67c0:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    67c2:	20 91 3f 34 	lds	r18, 0x343F
    67c6:	e2 2f       	mov	r30, r18
    67c8:	f0 e0       	ldi	r31, 0x00	; 0
    67ca:	ee 0f       	add	r30, r30
    67cc:	ff 1f       	adc	r31, r31
    67ce:	e4 5d       	subi	r30, 0xD4	; 212
    67d0:	f3 4b       	sbci	r31, 0xB3	; 179
    67d2:	80 81       	ld	r24, Z
    67d4:	91 81       	ldd	r25, Z+1	; 0x01
    67d6:	6a e0       	ldi	r22, 0x0A	; 10
    67d8:	70 e0       	ldi	r23, 0x00	; 0
    67da:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    67de:	60 93 50 34 	sts	0x3450, r22
			  temperatureBufferCounter++;
    67e2:	2f 5f       	subi	r18, 0xFF	; 255
    67e4:	20 93 3f 34 	sts	0x343F, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    67e8:	2a 30       	cpi	r18, 0x0A	; 10
    67ea:	39 f4       	brne	.+14     	; 0x67fa <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    67ec:	10 92 3f 34 	sts	0x343F, r1
				  temperatureBufferToWriteTo = 1;
    67f0:	81 e0       	ldi	r24, 0x01	; 1
    67f2:	80 93 55 31 	sts	0x3155, r24
				  okToSendTemperatureBuffer2 = true;
    67f6:	80 93 3e 34 	sts	0x343E, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    67fa:	80 91 5c 31 	lds	r24, 0x315C
    67fe:	88 23       	and	r24, r24
    6800:	09 f4       	brne	.+2      	; 0x6804 <__vector_83+0x184>
    6802:	75 c0       	rjmp	.+234    	; 0x68ee <__vector_83+0x26e>
		  if(humidityBufferToWriteTo == 1){
    6804:	80 91 57 31 	lds	r24, 0x3157
    6808:	81 30       	cpi	r24, 0x01	; 1
    680a:	c9 f5       	brne	.+114    	; 0x687e <__vector_83+0x1fe>
			  if(humidityBufferCounter == 0){
    680c:	80 91 45 34 	lds	r24, 0x3445
    6810:	88 23       	and	r24, r24
    6812:	51 f4       	brne	.+20     	; 0x6828 <__vector_83+0x1a8>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    6814:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    6818:	60 93 e6 33 	sts	0x33E6, r22
    681c:	70 93 e7 33 	sts	0x33E7, r23
    6820:	80 93 e8 33 	sts	0x33E8, r24
    6824:	90 93 e9 33 	sts	0x33E9, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    6828:	80 91 45 34 	lds	r24, 0x3445
    682c:	c8 2f       	mov	r28, r24
    682e:	d0 e0       	ldi	r29, 0x00	; 0
    6830:	0e 94 12 31 	call	0x6224	; 0x6224 <Sensors_ReadHumidity>
    6834:	cc 0f       	add	r28, r28
    6836:	dd 1f       	adc	r29, r29
    6838:	ce 55       	subi	r28, 0x5E	; 94
    683a:	d3 4b       	sbci	r29, 0xB3	; 179
    683c:	88 83       	st	Y, r24
    683e:	99 83       	std	Y+1, r25	; 0x01
			  quickHumidity = humidityBuffer1[humidityBufferCounter]/10;
    6840:	20 91 45 34 	lds	r18, 0x3445
    6844:	e2 2f       	mov	r30, r18
    6846:	f0 e0       	ldi	r31, 0x00	; 0
    6848:	ee 0f       	add	r30, r30
    684a:	ff 1f       	adc	r31, r31
    684c:	ee 55       	subi	r30, 0x5E	; 94
    684e:	f3 4b       	sbci	r31, 0xB3	; 179
    6850:	80 81       	ld	r24, Z
    6852:	91 81       	ldd	r25, Z+1	; 0x01
    6854:	6a e0       	ldi	r22, 0x0A	; 10
    6856:	70 e0       	ldi	r23, 0x00	; 0
    6858:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    685c:	60 93 51 34 	sts	0x3451, r22
			  humidityBufferCounter++;
    6860:	2f 5f       	subi	r18, 0xFF	; 255
    6862:	20 93 45 34 	sts	0x3445, r18
			  if(humidityBufferCounter == humidityNumberOfSamples){
    6866:	2a 30       	cpi	r18, 0x0A	; 10
    6868:	09 f0       	breq	.+2      	; 0x686c <__vector_83+0x1ec>
    686a:	41 c0       	rjmp	.+130    	; 0x68ee <__vector_83+0x26e>
				  humidityBufferCounter=0;
    686c:	10 92 45 34 	sts	0x3445, r1
				  humidityBufferToWriteTo = 2;
    6870:	82 e0       	ldi	r24, 0x02	; 2
    6872:	80 93 57 31 	sts	0x3157, r24
				  okToSendHumidityBuffer1 = true;
    6876:	81 e0       	ldi	r24, 0x01	; 1
    6878:	80 93 43 34 	sts	0x3443, r24
    687c:	38 c0       	rjmp	.+112    	; 0x68ee <__vector_83+0x26e>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    687e:	82 30       	cpi	r24, 0x02	; 2
    6880:	b1 f5       	brne	.+108    	; 0x68ee <__vector_83+0x26e>
			  if(humidityBufferCounter == 0){
    6882:	80 91 45 34 	lds	r24, 0x3445
    6886:	88 23       	and	r24, r24
    6888:	51 f4       	brne	.+20     	; 0x689e <__vector_83+0x21e>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    688a:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    688e:	60 93 ea 33 	sts	0x33EA, r22
    6892:	70 93 eb 33 	sts	0x33EB, r23
    6896:	80 93 ec 33 	sts	0x33EC, r24
    689a:	90 93 ed 33 	sts	0x33ED, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    689e:	80 91 45 34 	lds	r24, 0x3445
    68a2:	c8 2f       	mov	r28, r24
    68a4:	d0 e0       	ldi	r29, 0x00	; 0
    68a6:	0e 94 12 31 	call	0x6224	; 0x6224 <Sensors_ReadHumidity>
    68aa:	cc 0f       	add	r28, r28
    68ac:	dd 1f       	adc	r29, r29
    68ae:	c8 53       	subi	r28, 0x38	; 56
    68b0:	da 4a       	sbci	r29, 0xAA	; 170
    68b2:	88 83       	st	Y, r24
    68b4:	99 83       	std	Y+1, r25	; 0x01
			  quickHumidity = humidityBuffer2[humidityBufferCounter]/10;
    68b6:	20 91 45 34 	lds	r18, 0x3445
    68ba:	e2 2f       	mov	r30, r18
    68bc:	f0 e0       	ldi	r31, 0x00	; 0
    68be:	ee 0f       	add	r30, r30
    68c0:	ff 1f       	adc	r31, r31
    68c2:	e8 53       	subi	r30, 0x38	; 56
    68c4:	fa 4a       	sbci	r31, 0xAA	; 170
    68c6:	80 81       	ld	r24, Z
    68c8:	91 81       	ldd	r25, Z+1	; 0x01
    68ca:	6a e0       	ldi	r22, 0x0A	; 10
    68cc:	70 e0       	ldi	r23, 0x00	; 0
    68ce:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    68d2:	60 93 51 34 	sts	0x3451, r22
			  humidityBufferCounter++;
    68d6:	2f 5f       	subi	r18, 0xFF	; 255
    68d8:	20 93 45 34 	sts	0x3445, r18
			  if(humidityBufferCounter == humidityNumberOfSamples){
    68dc:	2a 30       	cpi	r18, 0x0A	; 10
    68de:	39 f4       	brne	.+14     	; 0x68ee <__vector_83+0x26e>
				  humidityBufferCounter=0;
    68e0:	10 92 45 34 	sts	0x3445, r1
				  humidityBufferToWriteTo = 1;
    68e4:	81 e0       	ldi	r24, 0x01	; 1
    68e6:	80 93 57 31 	sts	0x3157, r24
				  okToSendHumidityBuffer2 = true;
    68ea:	80 93 44 34 	sts	0x3444, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    68ee:	80 91 5b 31 	lds	r24, 0x315B
    68f2:	88 23       	and	r24, r24
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <__vector_83+0x278>
    68f6:	75 c0       	rjmp	.+234    	; 0x69e2 <__vector_83+0x362>
		  if(pressureBufferToWriteTo == 1){
    68f8:	80 91 56 31 	lds	r24, 0x3156
    68fc:	81 30       	cpi	r24, 0x01	; 1
    68fe:	c9 f5       	brne	.+114    	; 0x6972 <__vector_83+0x2f2>
			  if(pressureBufferCounter == 0){
    6900:	80 91 42 34 	lds	r24, 0x3442
    6904:	88 23       	and	r24, r24
    6906:	51 f4       	brne	.+20     	; 0x691c <__vector_83+0x29c>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    6908:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    690c:	60 93 ee 33 	sts	0x33EE, r22
    6910:	70 93 ef 33 	sts	0x33EF, r23
    6914:	80 93 f0 33 	sts	0x33F0, r24
    6918:	90 93 f1 33 	sts	0x33F1, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    691c:	80 91 42 34 	lds	r24, 0x3442
    6920:	c8 2f       	mov	r28, r24
    6922:	d0 e0       	ldi	r29, 0x00	; 0
    6924:	0e 94 34 31 	call	0x6268	; 0x6268 <Sensors_ReadPressure>
    6928:	cc 0f       	add	r28, r28
    692a:	dd 1f       	adc	r29, r29
    692c:	c9 5b       	subi	r28, 0xB9	; 185
    692e:	d2 4c       	sbci	r29, 0xC2	; 194
    6930:	88 83       	st	Y, r24
    6932:	99 83       	std	Y+1, r25	; 0x01
			  quickPressure = pressureBuffer1[pressureBufferCounter]/10;
    6934:	20 91 42 34 	lds	r18, 0x3442
    6938:	e2 2f       	mov	r30, r18
    693a:	f0 e0       	ldi	r31, 0x00	; 0
    693c:	ee 0f       	add	r30, r30
    693e:	ff 1f       	adc	r31, r31
    6940:	e9 5b       	subi	r30, 0xB9	; 185
    6942:	f2 4c       	sbci	r31, 0xC2	; 194
    6944:	80 81       	ld	r24, Z
    6946:	91 81       	ldd	r25, Z+1	; 0x01
    6948:	6a e0       	ldi	r22, 0x0A	; 10
    694a:	70 e0       	ldi	r23, 0x00	; 0
    694c:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    6950:	60 93 52 34 	sts	0x3452, r22

			  pressureBufferCounter++;
    6954:	2f 5f       	subi	r18, 0xFF	; 255
    6956:	20 93 42 34 	sts	0x3442, r18
			  if(pressureBufferCounter == pressureNumberOfSamples){
    695a:	2a 30       	cpi	r18, 0x0A	; 10
    695c:	09 f0       	breq	.+2      	; 0x6960 <__vector_83+0x2e0>
    695e:	41 c0       	rjmp	.+130    	; 0x69e2 <__vector_83+0x362>
				  pressureBufferCounter=0;
    6960:	10 92 42 34 	sts	0x3442, r1
				  pressureBufferToWriteTo = 2;
    6964:	82 e0       	ldi	r24, 0x02	; 2
    6966:	80 93 56 31 	sts	0x3156, r24
				  okToSendPressureBuffer1 = true;
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	80 93 40 34 	sts	0x3440, r24
    6970:	38 c0       	rjmp	.+112    	; 0x69e2 <__vector_83+0x362>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    6972:	82 30       	cpi	r24, 0x02	; 2
    6974:	b1 f5       	brne	.+108    	; 0x69e2 <__vector_83+0x362>
			  if(pressureBufferCounter == 0){
    6976:	80 91 42 34 	lds	r24, 0x3442
    697a:	88 23       	and	r24, r24
    697c:	51 f4       	brne	.+20     	; 0x6992 <__vector_83+0x312>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    697e:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    6982:	60 93 f2 33 	sts	0x33F2, r22
    6986:	70 93 f3 33 	sts	0x33F3, r23
    698a:	80 93 f4 33 	sts	0x33F4, r24
    698e:	90 93 f5 33 	sts	0x33F5, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    6992:	80 91 42 34 	lds	r24, 0x3442
    6996:	c8 2f       	mov	r28, r24
    6998:	d0 e0       	ldi	r29, 0x00	; 0
    699a:	0e 94 34 31 	call	0x6268	; 0x6268 <Sensors_ReadPressure>
    699e:	cc 0f       	add	r28, r28
    69a0:	dd 1f       	adc	r29, r29
    69a2:	c5 5a       	subi	r28, 0xA5	; 165
    69a4:	d3 4b       	sbci	r29, 0xB3	; 179
    69a6:	88 83       	st	Y, r24
    69a8:	99 83       	std	Y+1, r25	; 0x01
			  quickPressure = pressureBuffer2[pressureBufferCounter]/10;
    69aa:	20 91 42 34 	lds	r18, 0x3442
    69ae:	e2 2f       	mov	r30, r18
    69b0:	f0 e0       	ldi	r31, 0x00	; 0
    69b2:	ee 0f       	add	r30, r30
    69b4:	ff 1f       	adc	r31, r31
    69b6:	e5 5a       	subi	r30, 0xA5	; 165
    69b8:	f3 4b       	sbci	r31, 0xB3	; 179
    69ba:	80 81       	ld	r24, Z
    69bc:	91 81       	ldd	r25, Z+1	; 0x01
    69be:	6a e0       	ldi	r22, 0x0A	; 10
    69c0:	70 e0       	ldi	r23, 0x00	; 0
    69c2:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    69c6:	60 93 52 34 	sts	0x3452, r22
			  pressureBufferCounter++;
    69ca:	2f 5f       	subi	r18, 0xFF	; 255
    69cc:	20 93 42 34 	sts	0x3442, r18
			if(pressureBufferCounter == pressureNumberOfSamples){
    69d0:	2a 30       	cpi	r18, 0x0A	; 10
    69d2:	39 f4       	brne	.+14     	; 0x69e2 <__vector_83+0x362>
				pressureBufferCounter=0;
    69d4:	10 92 42 34 	sts	0x3442, r1
				pressureBufferToWriteTo = 1;
    69d8:	81 e0       	ldi	r24, 0x01	; 1
    69da:	80 93 56 31 	sts	0x3156, r24
				okToSendPressureBuffer2 = true;
    69de:	80 93 41 34 	sts	0x3441, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    69e2:	80 91 5d 31 	lds	r24, 0x315D
    69e6:	88 23       	and	r24, r24
    69e8:	09 f4       	brne	.+2      	; 0x69ec <__vector_83+0x36c>
    69ea:	6f c1       	rjmp	.+734    	; 0x6cca <__vector_83+0x64a>

		  Light_readColors();
    69ec:	0e 94 7f 32 	call	0x64fe	; 0x64fe <Light_readColors>
		  Light_readColors();
    69f0:	0e 94 7f 32 	call	0x64fe	; 0x64fe <Light_readColors>
		  Light_readColors();
    69f4:	0e 94 7f 32 	call	0x64fe	; 0x64fe <Light_readColors>

		  quickLight = Light_returnColor(clear);
    69f8:	80 91 36 3d 	lds	r24, 0x3D36
    69fc:	90 91 37 3d 	lds	r25, 0x3D37
    6a00:	80 93 53 34 	sts	0x3453, r24
    6a04:	90 93 54 34 	sts	0x3454, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6a08:	e0 91 3a 34 	lds	r30, 0x343A
    6a0c:	f0 e0       	ldi	r31, 0x00	; 0
    6a0e:	ee 0f       	add	r30, r30
    6a10:	ff 1f       	adc	r31, r31
    6a12:	ee 0f       	add	r30, r30
    6a14:	ff 1f       	adc	r31, r31
    6a16:	ef 5c       	subi	r30, 0xCF	; 207
    6a18:	fe 4c       	sbci	r31, 0xCE	; 206
    6a1a:	a0 80       	ld	r10, Z
    6a1c:	b1 80       	ldd	r11, Z+1	; 0x01
    6a1e:	c2 80       	ldd	r12, Z+2	; 0x02
    6a20:	d3 80       	ldd	r13, Z+3	; 0x03
    6a22:	e8 eb       	ldi	r30, 0xB8	; 184
    6a24:	f5 e5       	ldi	r31, 0x55	; 85
    6a26:	c0 e3       	ldi	r28, 0x30	; 48
    6a28:	dd e3       	ldi	r29, 0x3D	; 61
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    6a2a:	10 82       	st	Z, r1
    6a2c:	11 82       	std	Z+1, r1	; 0x01
    6a2e:	12 82       	std	Z+2, r1	; 0x02
    6a30:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    6a32:	88 81       	ld	r24, Y
    6a34:	99 81       	ldd	r25, Y+1	; 0x01
    6a36:	3c 01       	movw	r6, r24
    6a38:	88 24       	eor	r8, r8
    6a3a:	99 24       	eor	r9, r9
    6a3c:	ee 24       	eor	r14, r14
    6a3e:	ff 24       	eor	r15, r15
    6a40:	87 01       	movw	r16, r14
    6a42:	a6 01       	movw	r20, r12
    6a44:	95 01       	movw	r18, r10
    6a46:	e6 0c       	add	r14, r6
    6a48:	f7 1c       	adc	r15, r7
    6a4a:	08 1d       	adc	r16, r8
    6a4c:	19 1d       	adc	r17, r9
    6a4e:	2a 0d       	add	r18, r10
    6a50:	3b 1d       	adc	r19, r11
    6a52:	4c 1d       	adc	r20, r12
    6a54:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6a56:	da 01       	movw	r26, r20
    6a58:	c9 01       	movw	r24, r18
    6a5a:	8a 19       	sub	r24, r10
    6a5c:	9b 09       	sbc	r25, r11
    6a5e:	ac 09       	sbc	r26, r12
    6a60:	bd 09       	sbc	r27, r13
    6a62:	80 50       	subi	r24, 0x00	; 0
    6a64:	9c 42       	sbci	r25, 0x2C	; 44
    6a66:	a1 40       	sbci	r26, 0x01	; 1
    6a68:	b0 40       	sbci	r27, 0x00	; 0
    6a6a:	68 f3       	brcs	.-38     	; 0x6a46 <__vector_83+0x3c6>
    6a6c:	e1 92       	st	Z+, r14
    6a6e:	f1 92       	st	Z+, r15
    6a70:	01 93       	st	Z+, r16
    6a72:	11 93       	st	Z+, r17
    6a74:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    6a76:	85 e5       	ldi	r24, 0x55	; 85
    6a78:	e8 3c       	cpi	r30, 0xC8	; 200
    6a7a:	f8 07       	cpc	r31, r24
    6a7c:	b1 f6       	brne	.-84     	; 0x6a2a <__vector_83+0x3aa>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    6a7e:	80 91 59 31 	lds	r24, 0x3159
    6a82:	81 30       	cpi	r24, 0x01	; 1
    6a84:	09 f0       	breq	.+2      	; 0x6a88 <__vector_83+0x408>
    6a86:	72 c0       	rjmp	.+228    	; 0x6b6c <__vector_83+0x4ec>
			  if(lightBufferCounter == 0){
    6a88:	80 91 4c 34 	lds	r24, 0x344C
    6a8c:	88 23       	and	r24, r24
    6a8e:	51 f4       	brne	.+20     	; 0x6aa4 <__vector_83+0x424>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    6a90:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    6a94:	60 93 fe 33 	sts	0x33FE, r22
    6a98:	70 93 ff 33 	sts	0x33FF, r23
    6a9c:	80 93 00 34 	sts	0x3400, r24
    6aa0:	90 93 01 34 	sts	0x3401, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    6aa4:	20 91 4c 34 	lds	r18, 0x344C
    6aa8:	e2 2f       	mov	r30, r18
    6aaa:	f0 e0       	ldi	r31, 0x00	; 0
    6aac:	ee 0f       	add	r30, r30
    6aae:	ff 1f       	adc	r31, r31
    6ab0:	ee 0f       	add	r30, r30
    6ab2:	ff 1f       	adc	r31, r31
    6ab4:	ea 5c       	subi	r30, 0xCA	; 202
    6ab6:	f2 4a       	sbci	r31, 0xA2	; 162
    6ab8:	80 91 b8 55 	lds	r24, 0x55B8
    6abc:	90 91 b9 55 	lds	r25, 0x55B9
    6ac0:	a0 91 ba 55 	lds	r26, 0x55BA
    6ac4:	b0 91 bb 55 	lds	r27, 0x55BB
    6ac8:	80 83       	st	Z, r24
    6aca:	91 83       	std	Z+1, r25	; 0x01
    6acc:	a2 83       	std	Z+2, r26	; 0x02
    6ace:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6ad0:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    6ad2:	e2 2f       	mov	r30, r18
    6ad4:	f0 e0       	ldi	r31, 0x00	; 0
    6ad6:	ee 0f       	add	r30, r30
    6ad8:	ff 1f       	adc	r31, r31
    6ada:	ee 0f       	add	r30, r30
    6adc:	ff 1f       	adc	r31, r31
    6ade:	ea 5c       	subi	r30, 0xCA	; 202
    6ae0:	f2 4a       	sbci	r31, 0xA2	; 162
    6ae2:	80 91 bc 55 	lds	r24, 0x55BC
    6ae6:	90 91 bd 55 	lds	r25, 0x55BD
    6aea:	a0 91 be 55 	lds	r26, 0x55BE
    6aee:	b0 91 bf 55 	lds	r27, 0x55BF
    6af2:	80 83       	st	Z, r24
    6af4:	91 83       	std	Z+1, r25	; 0x01
    6af6:	a2 83       	std	Z+2, r26	; 0x02
    6af8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6afa:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    6afc:	e2 2f       	mov	r30, r18
    6afe:	f0 e0       	ldi	r31, 0x00	; 0
    6b00:	ee 0f       	add	r30, r30
    6b02:	ff 1f       	adc	r31, r31
    6b04:	ee 0f       	add	r30, r30
    6b06:	ff 1f       	adc	r31, r31
    6b08:	ea 5c       	subi	r30, 0xCA	; 202
    6b0a:	f2 4a       	sbci	r31, 0xA2	; 162
    6b0c:	80 91 c0 55 	lds	r24, 0x55C0
    6b10:	90 91 c1 55 	lds	r25, 0x55C1
    6b14:	a0 91 c2 55 	lds	r26, 0x55C2
    6b18:	b0 91 c3 55 	lds	r27, 0x55C3
    6b1c:	80 83       	st	Z, r24
    6b1e:	91 83       	std	Z+1, r25	; 0x01
    6b20:	a2 83       	std	Z+2, r26	; 0x02
    6b22:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b24:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    6b26:	e2 2f       	mov	r30, r18
    6b28:	f0 e0       	ldi	r31, 0x00	; 0
    6b2a:	ee 0f       	add	r30, r30
    6b2c:	ff 1f       	adc	r31, r31
    6b2e:	ee 0f       	add	r30, r30
    6b30:	ff 1f       	adc	r31, r31
    6b32:	ea 5c       	subi	r30, 0xCA	; 202
    6b34:	f2 4a       	sbci	r31, 0xA2	; 162
    6b36:	80 91 c4 55 	lds	r24, 0x55C4
    6b3a:	90 91 c5 55 	lds	r25, 0x55C5
    6b3e:	a0 91 c6 55 	lds	r26, 0x55C6
    6b42:	b0 91 c7 55 	lds	r27, 0x55C7
    6b46:	80 83       	st	Z, r24
    6b48:	91 83       	std	Z+1, r25	; 0x01
    6b4a:	a2 83       	std	Z+2, r26	; 0x02
    6b4c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b4e:	2f 5f       	subi	r18, 0xFF	; 255
    6b50:	20 93 4c 34 	sts	0x344C, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6b54:	28 32       	cpi	r18, 0x28	; 40
    6b56:	09 f0       	breq	.+2      	; 0x6b5a <__vector_83+0x4da>
    6b58:	7b c0       	rjmp	.+246    	; 0x6c50 <__vector_83+0x5d0>
				  lightBufferCounter=0;
    6b5a:	10 92 4c 34 	sts	0x344C, r1
				  lightBufferToWriteTo = 2;
    6b5e:	82 e0       	ldi	r24, 0x02	; 2
    6b60:	80 93 59 31 	sts	0x3159, r24
				  okToSendLightBuffer1 = true;
    6b64:	81 e0       	ldi	r24, 0x01	; 1
    6b66:	80 93 4a 34 	sts	0x344A, r24
    6b6a:	72 c0       	rjmp	.+228    	; 0x6c50 <__vector_83+0x5d0>
			  }
		  } else if (lightBufferToWriteTo == 2){
    6b6c:	82 30       	cpi	r24, 0x02	; 2
    6b6e:	09 f0       	breq	.+2      	; 0x6b72 <__vector_83+0x4f2>
    6b70:	6f c0       	rjmp	.+222    	; 0x6c50 <__vector_83+0x5d0>
			  if(lightBufferCounter == 0){
    6b72:	80 91 4c 34 	lds	r24, 0x344C
    6b76:	88 23       	and	r24, r24
    6b78:	51 f4       	brne	.+20     	; 0x6b8e <__vector_83+0x50e>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    6b7a:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    6b7e:	60 93 02 34 	sts	0x3402, r22
    6b82:	70 93 03 34 	sts	0x3403, r23
    6b86:	80 93 04 34 	sts	0x3404, r24
    6b8a:	90 93 05 34 	sts	0x3405, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    6b8e:	20 91 4c 34 	lds	r18, 0x344C
    6b92:	e2 2f       	mov	r30, r18
    6b94:	f0 e0       	ldi	r31, 0x00	; 0
    6b96:	ee 0f       	add	r30, r30
    6b98:	ff 1f       	adc	r31, r31
    6b9a:	ee 0f       	add	r30, r30
    6b9c:	ff 1f       	adc	r31, r31
    6b9e:	e5 5b       	subi	r30, 0xB5	; 181
    6ba0:	f9 4b       	sbci	r31, 0xB9	; 185
    6ba2:	80 91 b8 55 	lds	r24, 0x55B8
    6ba6:	90 91 b9 55 	lds	r25, 0x55B9
    6baa:	a0 91 ba 55 	lds	r26, 0x55BA
    6bae:	b0 91 bb 55 	lds	r27, 0x55BB
    6bb2:	80 83       	st	Z, r24
    6bb4:	91 83       	std	Z+1, r25	; 0x01
    6bb6:	a2 83       	std	Z+2, r26	; 0x02
    6bb8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6bba:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    6bbc:	e2 2f       	mov	r30, r18
    6bbe:	f0 e0       	ldi	r31, 0x00	; 0
    6bc0:	ee 0f       	add	r30, r30
    6bc2:	ff 1f       	adc	r31, r31
    6bc4:	ee 0f       	add	r30, r30
    6bc6:	ff 1f       	adc	r31, r31
    6bc8:	e5 5b       	subi	r30, 0xB5	; 181
    6bca:	f9 4b       	sbci	r31, 0xB9	; 185
    6bcc:	80 91 bc 55 	lds	r24, 0x55BC
    6bd0:	90 91 bd 55 	lds	r25, 0x55BD
    6bd4:	a0 91 be 55 	lds	r26, 0x55BE
    6bd8:	b0 91 bf 55 	lds	r27, 0x55BF
    6bdc:	80 83       	st	Z, r24
    6bde:	91 83       	std	Z+1, r25	; 0x01
    6be0:	a2 83       	std	Z+2, r26	; 0x02
    6be2:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6be4:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    6be6:	e2 2f       	mov	r30, r18
    6be8:	f0 e0       	ldi	r31, 0x00	; 0
    6bea:	ee 0f       	add	r30, r30
    6bec:	ff 1f       	adc	r31, r31
    6bee:	ee 0f       	add	r30, r30
    6bf0:	ff 1f       	adc	r31, r31
    6bf2:	e5 5b       	subi	r30, 0xB5	; 181
    6bf4:	f9 4b       	sbci	r31, 0xB9	; 185
    6bf6:	80 91 c0 55 	lds	r24, 0x55C0
    6bfa:	90 91 c1 55 	lds	r25, 0x55C1
    6bfe:	a0 91 c2 55 	lds	r26, 0x55C2
    6c02:	b0 91 c3 55 	lds	r27, 0x55C3
    6c06:	80 83       	st	Z, r24
    6c08:	91 83       	std	Z+1, r25	; 0x01
    6c0a:	a2 83       	std	Z+2, r26	; 0x02
    6c0c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6c0e:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    6c10:	e2 2f       	mov	r30, r18
    6c12:	f0 e0       	ldi	r31, 0x00	; 0
    6c14:	ee 0f       	add	r30, r30
    6c16:	ff 1f       	adc	r31, r31
    6c18:	ee 0f       	add	r30, r30
    6c1a:	ff 1f       	adc	r31, r31
    6c1c:	e5 5b       	subi	r30, 0xB5	; 181
    6c1e:	f9 4b       	sbci	r31, 0xB9	; 185
    6c20:	80 91 c4 55 	lds	r24, 0x55C4
    6c24:	90 91 c5 55 	lds	r25, 0x55C5
    6c28:	a0 91 c6 55 	lds	r26, 0x55C6
    6c2c:	b0 91 c7 55 	lds	r27, 0x55C7
    6c30:	80 83       	st	Z, r24
    6c32:	91 83       	std	Z+1, r25	; 0x01
    6c34:	a2 83       	std	Z+2, r26	; 0x02
    6c36:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6c38:	2f 5f       	subi	r18, 0xFF	; 255
    6c3a:	20 93 4c 34 	sts	0x344C, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6c3e:	28 32       	cpi	r18, 0x28	; 40
    6c40:	39 f4       	brne	.+14     	; 0x6c50 <__vector_83+0x5d0>
				  lightBufferCounter=0;
    6c42:	10 92 4c 34 	sts	0x344C, r1
				  lightBufferToWriteTo = 1;
    6c46:	81 e0       	ldi	r24, 0x01	; 1
    6c48:	80 93 59 31 	sts	0x3159, r24
				  okToSendLightBuffer2 = true;
    6c4c:	80 93 4b 34 	sts	0x344B, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6c50:	20 91 36 3d 	lds	r18, 0x3D36
    6c54:	30 91 37 3d 	lds	r19, 0x3D37
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6c58:	6f eb       	ldi	r22, 0xBF	; 191
    6c5a:	29 36       	cpi	r18, 0x69	; 105
    6c5c:	36 07       	cpc	r19, r22
    6c5e:	30 f0       	brcs	.+12     	; 0x6c6c <__vector_83+0x5ec>
    6c60:	80 91 3a 34 	lds	r24, 0x343A
    6c64:	88 23       	and	r24, r24
    6c66:	11 f0       	breq	.+4      	; 0x6c6c <__vector_83+0x5ec>
			  gainSelector--;
    6c68:	81 50       	subi	r24, 0x01	; 1
    6c6a:	08 c0       	rjmp	.+16     	; 0x6c7c <__vector_83+0x5fc>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6c6c:	20 58       	subi	r18, 0x80	; 128
    6c6e:	3e 43       	sbci	r19, 0x3E	; 62
    6c70:	60 f5       	brcc	.+88     	; 0x6cca <__vector_83+0x64a>
    6c72:	80 91 3a 34 	lds	r24, 0x343A
    6c76:	88 30       	cpi	r24, 0x08	; 8
    6c78:	41 f1       	breq	.+80     	; 0x6cca <__vector_83+0x64a>
			  gainSelector++;
    6c7a:	8f 5f       	subi	r24, 0xFF	; 255
    6c7c:	80 93 3a 34 	sts	0x343A, r24
			  Light_setGain();
    6c80:	0e 94 12 33 	call	0x6624	; 0x6624 <Light_setGain>
    6c84:	22 c0       	rjmp	.+68     	; 0x6cca <__vector_83+0x64a>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6c86:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <Sensors_ReadTemperature>
    6c8a:	6a e0       	ldi	r22, 0x0A	; 10
    6c8c:	70 e0       	ldi	r23, 0x00	; 0
    6c8e:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    6c92:	60 93 50 34 	sts	0x3450, r22
		quickHumidity = Sensors_ReadHumidity()/10;
    6c96:	0e 94 12 31 	call	0x6224	; 0x6224 <Sensors_ReadHumidity>
    6c9a:	6a e0       	ldi	r22, 0x0A	; 10
    6c9c:	70 e0       	ldi	r23, 0x00	; 0
    6c9e:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    6ca2:	60 93 51 34 	sts	0x3451, r22
		quickPressure = Sensors_ReadPressure()/10;
    6ca6:	0e 94 34 31 	call	0x6268	; 0x6268 <Sensors_ReadPressure>
    6caa:	6a e0       	ldi	r22, 0x0A	; 10
    6cac:	70 e0       	ldi	r23, 0x00	; 0
    6cae:	0e 94 34 62 	call	0xc468	; 0xc468 <__udivmodhi4>
    6cb2:	60 93 52 34 	sts	0x3452, r22
		Light_readColors();
    6cb6:	0e 94 7f 32 	call	0x64fe	; 0x64fe <Light_readColors>
		quickLight = Light_returnColor(clear);
    6cba:	80 91 36 3d 	lds	r24, 0x3D36
    6cbe:	90 91 37 3d 	lds	r25, 0x3D37
    6cc2:	80 93 53 34 	sts	0x3453, r24
    6cc6:	90 93 54 34 	sts	0x3454, r25
	}




}
    6cca:	ff 91       	pop	r31
    6ccc:	ef 91       	pop	r30
    6cce:	df 91       	pop	r29
    6cd0:	cf 91       	pop	r28
    6cd2:	bf 91       	pop	r27
    6cd4:	af 91       	pop	r26
    6cd6:	9f 91       	pop	r25
    6cd8:	8f 91       	pop	r24
    6cda:	7f 91       	pop	r23
    6cdc:	6f 91       	pop	r22
    6cde:	5f 91       	pop	r21
    6ce0:	4f 91       	pop	r20
    6ce2:	3f 91       	pop	r19
    6ce4:	2f 91       	pop	r18
    6ce6:	1f 91       	pop	r17
    6ce8:	0f 91       	pop	r16
    6cea:	ff 90       	pop	r15
    6cec:	ef 90       	pop	r14
    6cee:	df 90       	pop	r13
    6cf0:	cf 90       	pop	r12
    6cf2:	bf 90       	pop	r11
    6cf4:	af 90       	pop	r10
    6cf6:	9f 90       	pop	r9
    6cf8:	8f 90       	pop	r8
    6cfa:	7f 90       	pop	r7
    6cfc:	6f 90       	pop	r6
    6cfe:	0f 90       	pop	r0
    6d00:	0b be       	out	0x3b, r0	; 59
    6d02:	0f 90       	pop	r0
    6d04:	0f be       	out	0x3f, r0	; 63
    6d06:	0f 90       	pop	r0
    6d08:	1f 90       	pop	r1
    6d0a:	18 95       	reti

00006d0c <RTC_init>:
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6d0c:	e0 ea       	ldi	r30, 0xA0	; 160
    6d0e:	f4 e0       	ldi	r31, 0x04	; 4
    6d10:	88 e0       	ldi	r24, 0x08	; 8
    6d12:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6d14:	84 e0       	ldi	r24, 0x04	; 4
    6d16:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6d18:	8f e0       	ldi	r24, 0x0F	; 15
    6d1a:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6d1c:	81 e0       	ldi	r24, 0x01	; 1
    6d1e:	84 83       	std	Z+4, r24	; 0x04


}
    6d20:	08 95       	ret

00006d22 <RTC_UTCSecsToTime>:

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    6d22:	8f 92       	push	r8
    6d24:	9f 92       	push	r9
    6d26:	af 92       	push	r10
    6d28:	bf 92       	push	r11
    6d2a:	cf 92       	push	r12
    6d2c:	df 92       	push	r13
    6d2e:	ef 92       	push	r14
    6d30:	ff 92       	push	r15
    6d32:	0f 93       	push	r16
    6d34:	1f 93       	push	r17
    6d36:	cf 93       	push	r28
    6d38:	df 93       	push	r29
    6d3a:	7b 01       	movw	r14, r22
    6d3c:	8c 01       	movw	r16, r24
    6d3e:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    6d40:	2c e3       	ldi	r18, 0x3C	; 60
    6d42:	30 e0       	ldi	r19, 0x00	; 0
    6d44:	40 e0       	ldi	r20, 0x00	; 0
    6d46:	50 e0       	ldi	r21, 0x00	; 0
    6d48:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6d4c:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6d4e:	c8 01       	movw	r24, r16
    6d50:	b7 01       	movw	r22, r14
    6d52:	2c e3       	ldi	r18, 0x3C	; 60
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	40 e0       	ldi	r20, 0x00	; 0
    6d58:	50 e0       	ldi	r21, 0x00	; 0
    6d5a:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6d5e:	12 2f       	mov	r17, r18
    6d60:	03 2f       	mov	r16, r19
    6d62:	f4 2e       	mov	r15, r20
    6d64:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6d66:	62 2f       	mov	r22, r18
    6d68:	73 2f       	mov	r23, r19
    6d6a:	84 2f       	mov	r24, r20
    6d6c:	95 2f       	mov	r25, r21
    6d6e:	2c e3       	ldi	r18, 0x3C	; 60
    6d70:	30 e0       	ldi	r19, 0x00	; 0
    6d72:	40 e0       	ldi	r20, 0x00	; 0
    6d74:	50 e0       	ldi	r21, 0x00	; 0
    6d76:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6d7a:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6d7c:	61 2f       	mov	r22, r17
    6d7e:	70 2f       	mov	r23, r16
    6d80:	8f 2d       	mov	r24, r15
    6d82:	9e 2d       	mov	r25, r14
    6d84:	2c e3       	ldi	r18, 0x3C	; 60
    6d86:	30 e0       	ldi	r19, 0x00	; 0
    6d88:	40 e0       	ldi	r20, 0x00	; 0
    6d8a:	50 e0       	ldi	r21, 0x00	; 0
    6d8c:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6d90:	12 2f       	mov	r17, r18
    6d92:	03 2f       	mov	r16, r19
    6d94:	f4 2e       	mov	r15, r20
    6d96:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    6d98:	62 2f       	mov	r22, r18
    6d9a:	73 2f       	mov	r23, r19
    6d9c:	84 2f       	mov	r24, r20
    6d9e:	95 2f       	mov	r25, r21
    6da0:	28 e1       	ldi	r18, 0x18	; 24
    6da2:	30 e0       	ldi	r19, 0x00	; 0
    6da4:	40 e0       	ldi	r20, 0x00	; 0
    6da6:	50 e0       	ldi	r21, 0x00	; 0
    6da8:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6dac:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    6dae:	61 2f       	mov	r22, r17
    6db0:	70 2f       	mov	r23, r16
    6db2:	8f 2d       	mov	r24, r15
    6db4:	9e 2d       	mov	r25, r14
    6db6:	28 e1       	ldi	r18, 0x18	; 24
    6db8:	30 e0       	ldi	r19, 0x00	; 0
    6dba:	40 e0       	ldi	r20, 0x00	; 0
    6dbc:	50 e0       	ldi	r21, 0x00	; 0
    6dbe:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6dc2:	79 01       	movw	r14, r18
    6dc4:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    6dc6:	c8 01       	movw	r24, r16
    6dc8:	b7 01       	movw	r22, r14
    6dca:	6c 5f       	subi	r22, 0xFC	; 252
    6dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    6dce:	8f 4f       	sbci	r24, 0xFF	; 255
    6dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    6dd2:	27 e0       	ldi	r18, 0x07	; 7
    6dd4:	30 e0       	ldi	r19, 0x00	; 0
    6dd6:	40 e0       	ldi	r20, 0x00	; 0
    6dd8:	50 e0       	ldi	r21, 0x00	; 0
    6dda:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    6dde:	6f 5f       	subi	r22, 0xFF	; 255
    6de0:	6c 83       	std	Y+4, r22	; 0x04
    6de2:	20 e0       	ldi	r18, 0x00	; 0
    6de4:	aa 24       	eor	r10, r10
    6de6:	bb 24       	eor	r11, r11
    6de8:	65 01       	movw	r12, r10
    6dea:	01 c0       	rjmp	.+2      	; 0x6dee <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    6dec:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    6dee:	82 2e       	mov	r8, r18
    6df0:	99 24       	eor	r9, r9
    6df2:	f4 01       	movw	r30, r8
    6df4:	ee 54       	subi	r30, 0x4E	; 78
    6df6:	f8 4f       	sbci	r31, 0xF8	; 248
    6df8:	cf 01       	movw	r24, r30
    6dfa:	83 70       	andi	r24, 0x03	; 3
    6dfc:	90 70       	andi	r25, 0x00	; 0
    6dfe:	89 2b       	or	r24, r25
    6e00:	99 f4       	brne	.+38     	; 0x6e28 <RTC_UTCSecsToTime+0x106>
    6e02:	cf 01       	movw	r24, r30
    6e04:	64 e6       	ldi	r22, 0x64	; 100
    6e06:	70 e0       	ldi	r23, 0x00	; 0
    6e08:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6e0c:	89 2b       	or	r24, r25
    6e0e:	39 f4       	brne	.+14     	; 0x6e1e <RTC_UTCSecsToTime+0xfc>
    6e10:	cf 01       	movw	r24, r30
    6e12:	60 e9       	ldi	r22, 0x90	; 144
    6e14:	71 e0       	ldi	r23, 0x01	; 1
    6e16:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6e1a:	89 2b       	or	r24, r25
    6e1c:	29 f4       	brne	.+10     	; 0x6e28 <RTC_UTCSecsToTime+0x106>
    6e1e:	8e e6       	ldi	r24, 0x6E	; 110
    6e20:	91 e0       	ldi	r25, 0x01	; 1
    6e22:	a0 e0       	ldi	r26, 0x00	; 0
    6e24:	b0 e0       	ldi	r27, 0x00	; 0
    6e26:	04 c0       	rjmp	.+8      	; 0x6e30 <RTC_UTCSecsToTime+0x10e>
    6e28:	8d e6       	ldi	r24, 0x6D	; 109
    6e2a:	91 e0       	ldi	r25, 0x01	; 1
    6e2c:	a0 e0       	ldi	r26, 0x00	; 0
    6e2e:	b0 e0       	ldi	r27, 0x00	; 0
    6e30:	a8 0e       	add	r10, r24
    6e32:	b9 1e       	adc	r11, r25
    6e34:	ca 1e       	adc	r12, r26
    6e36:	db 1e       	adc	r13, r27
    6e38:	c5 01       	movw	r24, r10
    6e3a:	a0 e0       	ldi	r26, 0x00	; 0
    6e3c:	b0 e0       	ldi	r27, 0x00	; 0
    6e3e:	e8 16       	cp	r14, r24
    6e40:	f9 06       	cpc	r15, r25
    6e42:	0a 07       	cpc	r16, r26
    6e44:	1b 07       	cpc	r17, r27
    6e46:	90 f6       	brcc	.-92     	; 0x6dec <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6e48:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6e4a:	f4 01       	movw	r30, r8
    6e4c:	ee 54       	subi	r30, 0x4E	; 78
    6e4e:	f8 4f       	sbci	r31, 0xF8	; 248
    6e50:	73 e0       	ldi	r23, 0x03	; 3
    6e52:	87 2e       	mov	r8, r23
    6e54:	91 2c       	mov	r9, r1
    6e56:	8e 22       	and	r8, r30
    6e58:	9f 22       	and	r9, r31
    6e5a:	81 14       	cp	r8, r1
    6e5c:	91 04       	cpc	r9, r1
    6e5e:	99 f4       	brne	.+38     	; 0x6e86 <RTC_UTCSecsToTime+0x164>
    6e60:	cf 01       	movw	r24, r30
    6e62:	64 e6       	ldi	r22, 0x64	; 100
    6e64:	70 e0       	ldi	r23, 0x00	; 0
    6e66:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6e6a:	89 2b       	or	r24, r25
    6e6c:	39 f4       	brne	.+14     	; 0x6e7c <RTC_UTCSecsToTime+0x15a>
    6e6e:	cf 01       	movw	r24, r30
    6e70:	60 e9       	ldi	r22, 0x90	; 144
    6e72:	71 e0       	ldi	r23, 0x01	; 1
    6e74:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6e78:	89 2b       	or	r24, r25
    6e7a:	29 f4       	brne	.+10     	; 0x6e86 <RTC_UTCSecsToTime+0x164>
    6e7c:	8e e6       	ldi	r24, 0x6E	; 110
    6e7e:	91 e0       	ldi	r25, 0x01	; 1
    6e80:	a0 e0       	ldi	r26, 0x00	; 0
    6e82:	b0 e0       	ldi	r27, 0x00	; 0
    6e84:	04 c0       	rjmp	.+8      	; 0x6e8e <RTC_UTCSecsToTime+0x16c>
    6e86:	8d e6       	ldi	r24, 0x6D	; 109
    6e88:	91 e0       	ldi	r25, 0x01	; 1
    6e8a:	a0 e0       	ldi	r26, 0x00	; 0
    6e8c:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6e8e:	a8 1a       	sub	r10, r24
    6e90:	b9 0a       	sbc	r11, r25
    6e92:	ca 0a       	sbc	r12, r26
    6e94:	db 0a       	sbc	r13, r27
    6e96:	98 01       	movw	r18, r16
    6e98:	87 01       	movw	r16, r14
    6e9a:	0a 19       	sub	r16, r10
    6e9c:	1b 09       	sbc	r17, r11
    6e9e:	2c 09       	sbc	r18, r12
    6ea0:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    6ea2:	cf 01       	movw	r24, r30
    6ea4:	64 e6       	ldi	r22, 0x64	; 100
    6ea6:	70 e0       	ldi	r23, 0x00	; 0
    6ea8:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6eac:	7c 01       	movw	r14, r24
    6eae:	cf 01       	movw	r24, r30
    6eb0:	60 e9       	ldi	r22, 0x90	; 144
    6eb2:	71 e0       	ldi	r23, 0x01	; 1
    6eb4:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6eb8:	ac 01       	movw	r20, r24
    6eba:	ee e8       	ldi	r30, 0x8E	; 142
    6ebc:	f3 e3       	ldi	r31, 0x33	; 51
    6ebe:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    6ec0:	61 30       	cpi	r22, 0x01	; 1
    6ec2:	51 f4       	brne	.+20     	; 0x6ed8 <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    6ec4:	81 14       	cp	r8, r1
    6ec6:	91 04       	cpc	r9, r1
    6ec8:	49 f4       	brne	.+18     	; 0x6edc <RTC_UTCSecsToTime+0x1ba>
    6eca:	e1 14       	cp	r14, r1
    6ecc:	f1 04       	cpc	r15, r1
    6ece:	41 f4       	brne	.+16     	; 0x6ee0 <RTC_UTCSecsToTime+0x1be>
    6ed0:	41 15       	cp	r20, r1
    6ed2:	51 05       	cpc	r21, r1
    6ed4:	29 f0       	breq	.+10     	; 0x6ee0 <RTC_UTCSecsToTime+0x1be>
    6ed6:	02 c0       	rjmp	.+4      	; 0x6edc <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    6ed8:	80 81       	ld	r24, Z
    6eda:	03 c0       	rjmp	.+6      	; 0x6ee2 <RTC_UTCSecsToTime+0x1c0>
    6edc:	8c e1       	ldi	r24, 0x1C	; 28
    6ede:	01 c0       	rjmp	.+2      	; 0x6ee2 <RTC_UTCSecsToTime+0x1c0>
    6ee0:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	a0 e0       	ldi	r26, 0x00	; 0
    6ee6:	b0 e0       	ldi	r27, 0x00	; 0
    6ee8:	08 17       	cp	r16, r24
    6eea:	19 07       	cpc	r17, r25
    6eec:	2a 07       	cpc	r18, r26
    6eee:	3b 07       	cpc	r19, r27
    6ef0:	40 f0       	brcs	.+16     	; 0x6f02 <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    6ef2:	08 1b       	sub	r16, r24
    6ef4:	19 0b       	sbc	r17, r25
    6ef6:	2a 0b       	sbc	r18, r26
    6ef8:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6efa:	6f 5f       	subi	r22, 0xFF	; 255
    6efc:	31 96       	adiw	r30, 0x01	; 1
    6efe:	6c 30       	cpi	r22, 0x0C	; 12
    6f00:	f9 f6       	brne	.-66     	; 0x6ec0 <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    6f02:	6f 5f       	subi	r22, 0xFF	; 255
    6f04:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6f06:	80 2f       	mov	r24, r16
    6f08:	8f 5f       	subi	r24, 0xFF	; 255
    6f0a:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6f0c:	ce 01       	movw	r24, r28
    6f0e:	df 91       	pop	r29
    6f10:	cf 91       	pop	r28
    6f12:	1f 91       	pop	r17
    6f14:	0f 91       	pop	r16
    6f16:	ff 90       	pop	r15
    6f18:	ef 90       	pop	r14
    6f1a:	df 90       	pop	r13
    6f1c:	cf 90       	pop	r12
    6f1e:	bf 90       	pop	r11
    6f20:	af 90       	pop	r10
    6f22:	9f 90       	pop	r9
    6f24:	8f 90       	pop	r8
    6f26:	08 95       	ret

00006f28 <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6f28:	4f 92       	push	r4
    6f2a:	5f 92       	push	r5
    6f2c:	6f 92       	push	r6
    6f2e:	7f 92       	push	r7
    6f30:	8f 92       	push	r8
    6f32:	9f 92       	push	r9
    6f34:	af 92       	push	r10
    6f36:	bf 92       	push	r11
    6f38:	cf 92       	push	r12
    6f3a:	df 92       	push	r13
    6f3c:	ef 92       	push	r14
    6f3e:	ff 92       	push	r15
    6f40:	0f 93       	push	r16
    6f42:	1f 93       	push	r17
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
    6f48:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6f4a:	dc 01       	movw	r26, r24
    6f4c:	17 96       	adiw	r26, 0x07	; 7
    6f4e:	1c 91       	ld	r17, X
    6f50:	61 2f       	mov	r22, r17
    6f52:	70 e0       	ldi	r23, 0x00	; 0
    6f54:	80 e0       	ldi	r24, 0x00	; 0
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	20 e8       	ldi	r18, 0x80	; 128
    6f5a:	33 e3       	ldi	r19, 0x33	; 51
    6f5c:	41 ee       	ldi	r20, 0xE1	; 225
    6f5e:	51 e0       	ldi	r21, 0x01	; 1
    6f60:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    6f64:	5b 01       	movw	r10, r22
    6f66:	6c 01       	movw	r12, r24
    6f68:	22 eb       	ldi	r18, 0xB2	; 178
    6f6a:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6f6c:	e1 2f       	mov	r30, r17
    6f6e:	f0 e0       	ldi	r31, 0x00	; 0
    6f70:	ee 54       	subi	r30, 0x4E	; 78
    6f72:	f8 4f       	sbci	r31, 0xF8	; 248
    6f74:	1d c0       	rjmp	.+58     	; 0x6fb0 <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6f76:	c9 01       	movw	r24, r18
    6f78:	83 70       	andi	r24, 0x03	; 3
    6f7a:	90 70       	andi	r25, 0x00	; 0
    6f7c:	89 2b       	or	r24, r25
    6f7e:	b1 f4       	brne	.+44     	; 0x6fac <RTC_TimeToUTCSecs+0x84>
    6f80:	c9 01       	movw	r24, r18
    6f82:	64 e6       	ldi	r22, 0x64	; 100
    6f84:	70 e0       	ldi	r23, 0x00	; 0
    6f86:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6f8a:	89 2b       	or	r24, r25
    6f8c:	39 f4       	brne	.+14     	; 0x6f9c <RTC_TimeToUTCSecs+0x74>
    6f8e:	c9 01       	movw	r24, r18
    6f90:	60 e9       	ldi	r22, 0x90	; 144
    6f92:	71 e0       	ldi	r23, 0x01	; 1
    6f94:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6f98:	89 2b       	or	r24, r25
    6f9a:	41 f4       	brne	.+16     	; 0x6fac <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6f9c:	80 e8       	ldi	r24, 0x80	; 128
    6f9e:	91 e5       	ldi	r25, 0x51	; 81
    6fa0:	a1 e0       	ldi	r26, 0x01	; 1
    6fa2:	b0 e0       	ldi	r27, 0x00	; 0
    6fa4:	a8 0e       	add	r10, r24
    6fa6:	b9 1e       	adc	r11, r25
    6fa8:	ca 1e       	adc	r12, r26
    6faa:	db 1e       	adc	r13, r27
    6fac:	2f 5f       	subi	r18, 0xFF	; 255
    6fae:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    6fb0:	2e 17       	cp	r18, r30
    6fb2:	3f 07       	cpc	r19, r31
    6fb4:	01 f7       	brne	.-64     	; 0x6f76 <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6fb6:	d4 01       	movw	r26, r8
    6fb8:	16 96       	adiw	r26, 0x06	; 6
    6fba:	8c 91       	ld	r24, X
    6fbc:	48 2e       	mov	r4, r24
    6fbe:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    6fc0:	c9 01       	movw	r24, r18
    6fc2:	64 e6       	ldi	r22, 0x64	; 100
    6fc4:	70 e0       	ldi	r23, 0x00	; 0
    6fc6:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6fca:	7c 01       	movw	r14, r24
    6fcc:	c9 01       	movw	r24, r18
    6fce:	60 e9       	ldi	r22, 0x90	; 144
    6fd0:	71 e0       	ldi	r23, 0x01	; 1
    6fd2:	0e 94 48 62 	call	0xc490	; 0xc490 <__divmodhi4>
    6fd6:	8c 01       	movw	r16, r24
    6fd8:	c1 e0       	ldi	r28, 0x01	; 1
    6fda:	d0 e0       	ldi	r29, 0x00	; 0
    6fdc:	e3 e0       	ldi	r30, 0x03	; 3
    6fde:	6e 2e       	mov	r6, r30
    6fe0:	71 2c       	mov	r7, r1
    6fe2:	62 22       	and	r6, r18
    6fe4:	73 22       	and	r7, r19
    6fe6:	27 c0       	rjmp	.+78     	; 0x7036 <RTC_TimeToUTCSecs+0x10e>
    6fe8:	c2 30       	cpi	r28, 0x02	; 2
    6fea:	d1 05       	cpc	r29, r1
    6fec:	91 f4       	brne	.+36     	; 0x7012 <RTC_TimeToUTCSecs+0xea>
    6fee:	61 14       	cp	r6, r1
    6ff0:	71 04       	cpc	r7, r1
    6ff2:	79 f4       	brne	.+30     	; 0x7012 <RTC_TimeToUTCSecs+0xea>
    6ff4:	e1 14       	cp	r14, r1
    6ff6:	f1 04       	cpc	r15, r1
    6ff8:	19 f4       	brne	.+6      	; 0x7000 <RTC_TimeToUTCSecs+0xd8>
    6ffa:	01 15       	cp	r16, r1
    6ffc:	11 05       	cpc	r17, r1
    6ffe:	49 f4       	brne	.+18     	; 0x7012 <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    7000:	80 e8       	ldi	r24, 0x80	; 128
    7002:	9b e3       	ldi	r25, 0x3B	; 59
    7004:	a6 e2       	ldi	r26, 0x26	; 38
    7006:	b0 e0       	ldi	r27, 0x00	; 0
    7008:	a8 0e       	add	r10, r24
    700a:	b9 1e       	adc	r11, r25
    700c:	ca 1e       	adc	r12, r26
    700e:	db 1e       	adc	r13, r27
    7010:	11 c0       	rjmp	.+34     	; 0x7034 <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    7012:	fe 01       	movw	r30, r28
    7014:	e3 57       	subi	r30, 0x73	; 115
    7016:	fc 4c       	sbci	r31, 0xCC	; 204
    7018:	60 81       	ld	r22, Z
    701a:	70 e0       	ldi	r23, 0x00	; 0
    701c:	80 e0       	ldi	r24, 0x00	; 0
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	20 e8       	ldi	r18, 0x80	; 128
    7022:	31 e5       	ldi	r19, 0x51	; 81
    7024:	41 e0       	ldi	r20, 0x01	; 1
    7026:	50 e0       	ldi	r21, 0x00	; 0
    7028:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    702c:	a6 0e       	add	r10, r22
    702e:	b7 1e       	adc	r11, r23
    7030:	c8 1e       	adc	r12, r24
    7032:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    7034:	21 96       	adiw	r28, 0x01	; 1
    7036:	c4 15       	cp	r28, r4
    7038:	d5 05       	cpc	r29, r5
    703a:	b4 f2       	brlt	.-84     	; 0x6fe8 <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    703c:	d4 01       	movw	r26, r8
    703e:	13 96       	adiw	r26, 0x03	; 3
    7040:	6c 91       	ld	r22, X
    7042:	70 e0       	ldi	r23, 0x00	; 0
    7044:	80 e0       	ldi	r24, 0x00	; 0
    7046:	90 e0       	ldi	r25, 0x00	; 0
    7048:	20 e1       	ldi	r18, 0x10	; 16
    704a:	3e e0       	ldi	r19, 0x0E	; 14
    704c:	40 e0       	ldi	r20, 0x00	; 0
    704e:	50 e0       	ldi	r21, 0x00	; 0
    7050:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    7054:	7b 01       	movw	r14, r22
    7056:	8c 01       	movw	r16, r24
    7058:	f4 01       	movw	r30, r8
    705a:	62 81       	ldd	r22, Z+2	; 0x02
    705c:	70 e0       	ldi	r23, 0x00	; 0
    705e:	80 e0       	ldi	r24, 0x00	; 0
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	2c e3       	ldi	r18, 0x3C	; 60
    7064:	30 e0       	ldi	r19, 0x00	; 0
    7066:	40 e0       	ldi	r20, 0x00	; 0
    7068:	50 e0       	ldi	r21, 0x00	; 0
    706a:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    706e:	e6 0e       	add	r14, r22
    7070:	f7 1e       	adc	r15, r23
    7072:	08 1f       	adc	r16, r24
    7074:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    7076:	d4 01       	movw	r26, r8
    7078:	11 96       	adiw	r26, 0x01	; 1
    707a:	8c 91       	ld	r24, X
    707c:	11 97       	sbiw	r26, 0x01	; 1
    707e:	e8 0e       	add	r14, r24
    7080:	f1 1c       	adc	r15, r1
    7082:	01 1d       	adc	r16, r1
    7084:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    7086:	15 96       	adiw	r26, 0x05	; 5
    7088:	6c 91       	ld	r22, X
    708a:	70 e0       	ldi	r23, 0x00	; 0
    708c:	61 50       	subi	r22, 0x01	; 1
    708e:	70 40       	sbci	r23, 0x00	; 0
    7090:	88 27       	eor	r24, r24
    7092:	77 fd       	sbrc	r23, 7
    7094:	80 95       	com	r24
    7096:	98 2f       	mov	r25, r24
    7098:	20 e8       	ldi	r18, 0x80	; 128
    709a:	31 e5       	ldi	r19, 0x51	; 81
    709c:	41 e0       	ldi	r20, 0x01	; 1
    709e:	50 e0       	ldi	r21, 0x00	; 0
    70a0:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    70a4:	e6 0e       	add	r14, r22
    70a6:	f7 1e       	adc	r15, r23
    70a8:	08 1f       	adc	r16, r24
    70aa:	19 1f       	adc	r17, r25
    70ac:	ea 0c       	add	r14, r10
    70ae:	fb 1c       	adc	r15, r11
    70b0:	0c 1d       	adc	r16, r12
    70b2:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    70b4:	b7 01       	movw	r22, r14
    70b6:	c8 01       	movw	r24, r16
    70b8:	df 91       	pop	r29
    70ba:	cf 91       	pop	r28
    70bc:	1f 91       	pop	r17
    70be:	0f 91       	pop	r16
    70c0:	ff 90       	pop	r15
    70c2:	ef 90       	pop	r14
    70c4:	df 90       	pop	r13
    70c6:	cf 90       	pop	r12
    70c8:	bf 90       	pop	r11
    70ca:	af 90       	pop	r10
    70cc:	9f 90       	pop	r9
    70ce:	8f 90       	pop	r8
    70d0:	7f 90       	pop	r7
    70d2:	6f 90       	pop	r6
    70d4:	5f 90       	pop	r5
    70d6:	4f 90       	pop	r4
    70d8:	08 95       	ret

000070da <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    70da:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    70dc:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    70de:	e0 ea       	ldi	r30, 0xA0	; 160
    70e0:	f4 e0       	ldi	r31, 0x04	; 4
    70e2:	46 83       	std	Z+6, r20	; 0x06
    70e4:	fb 01       	movw	r30, r22
    70e6:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    70e8:	a0 ea       	ldi	r26, 0xA0	; 160
    70ea:	b4 e0       	ldi	r27, 0x04	; 4
    70ec:	0d c0       	rjmp	.+26     	; 0x7108 <RTC_sendBytes+0x2e>
    70ee:	80 91 a4 04 	lds	r24, 0x04A4
    70f2:	86 ff       	sbrs	r24, 6
    70f4:	fc cf       	rjmp	.-8      	; 0x70ee <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    70f6:	80 91 a4 04 	lds	r24, 0x04A4
    70fa:	84 fd       	sbrc	r24, 4
    70fc:	07 c0       	rjmp	.+14     	; 0x710c <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    70fe:	81 91       	ld	r24, Z+
    7100:	17 96       	adiw	r26, 0x07	; 7
    7102:	8c 93       	st	X, r24
    7104:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    7106:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    7108:	95 17       	cp	r25, r21
    710a:	88 f3       	brcs	.-30     	; 0x70ee <RTC_sendBytes+0x14>
    710c:	08 95       	ret

0000710e <RTC_setTime>:



} 

void RTC_setTime(void) {
    710e:	df 93       	push	r29
    7110:	cf 93       	push	r28
    7112:	cd b7       	in	r28, 0x3d	; 61
    7114:	de b7       	in	r29, 0x3e	; 62
    7116:	29 97       	sbiw	r28, 0x09	; 9
    7118:	cd bf       	out	0x3d, r28	; 61
    711a:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    711c:	50 91 fd 50 	lds	r21, 0x50FD
    7120:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    7122:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    7124:	40 91 f6 50 	lds	r20, 0x50F6
    7128:	84 2f       	mov	r24, r20
    712a:	6a e0       	ldi	r22, 0x0A	; 10
    712c:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7130:	28 2f       	mov	r18, r24
    7132:	30 e0       	ldi	r19, 0x00	; 0
    7134:	74 e0       	ldi	r23, 0x04	; 4
    7136:	22 0f       	add	r18, r18
    7138:	33 1f       	adc	r19, r19
    713a:	7a 95       	dec	r23
    713c:	e1 f7       	brne	.-8      	; 0x7136 <RTC_setTime+0x28>
    713e:	84 2f       	mov	r24, r20
    7140:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7144:	92 2b       	or	r25, r18
    7146:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    7148:	40 91 f7 50 	lds	r20, 0x50F7
    714c:	84 2f       	mov	r24, r20
    714e:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7152:	28 2f       	mov	r18, r24
    7154:	30 e0       	ldi	r19, 0x00	; 0
    7156:	94 e0       	ldi	r25, 0x04	; 4
    7158:	22 0f       	add	r18, r18
    715a:	33 1f       	adc	r19, r19
    715c:	9a 95       	dec	r25
    715e:	e1 f7       	brne	.-8      	; 0x7158 <RTC_setTime+0x4a>
    7160:	84 2f       	mov	r24, r20
    7162:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7166:	92 2b       	or	r25, r18
    7168:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    716a:	40 91 f8 50 	lds	r20, 0x50F8
    716e:	84 2f       	mov	r24, r20
    7170:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7174:	28 2f       	mov	r18, r24
    7176:	30 e0       	ldi	r19, 0x00	; 0
    7178:	84 e0       	ldi	r24, 0x04	; 4
    717a:	22 0f       	add	r18, r18
    717c:	33 1f       	adc	r19, r19
    717e:	8a 95       	dec	r24
    7180:	e1 f7       	brne	.-8      	; 0x717a <RTC_setTime+0x6c>
    7182:	84 2f       	mov	r24, r20
    7184:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7188:	92 2b       	or	r25, r18
    718a:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    718c:	30 91 f9 50 	lds	r19, 0x50F9
    7190:	83 2f       	mov	r24, r19
    7192:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7196:	29 2f       	mov	r18, r25
    7198:	20 68       	ori	r18, 0x80	; 128
    719a:	83 2f       	mov	r24, r19
    719c:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    71a0:	82 95       	swap	r24
    71a2:	80 7f       	andi	r24, 0xF0	; 240
    71a4:	28 2b       	or	r18, r24
    71a6:	85 2f       	mov	r24, r21
    71a8:	64 e6       	ldi	r22, 0x64	; 100
    71aa:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    71ae:	82 95       	swap	r24
    71b0:	88 0f       	add	r24, r24
    71b2:	88 0f       	add	r24, r24
    71b4:	80 7c       	andi	r24, 0xC0	; 192
    71b6:	28 2b       	or	r18, r24
    71b8:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    71ba:	80 91 fa 50 	lds	r24, 0x50FA
    71be:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    71c0:	40 91 fb 50 	lds	r20, 0x50FB
    71c4:	84 2f       	mov	r24, r20
    71c6:	6a e0       	ldi	r22, 0x0A	; 10
    71c8:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    71cc:	28 2f       	mov	r18, r24
    71ce:	30 e0       	ldi	r19, 0x00	; 0
    71d0:	b4 e0       	ldi	r27, 0x04	; 4
    71d2:	22 0f       	add	r18, r18
    71d4:	33 1f       	adc	r19, r19
    71d6:	ba 95       	dec	r27
    71d8:	e1 f7       	brne	.-8      	; 0x71d2 <RTC_setTime+0xc4>
    71da:	84 2f       	mov	r24, r20
    71dc:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    71e0:	92 2b       	or	r25, r18
    71e2:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    71e4:	40 91 fc 50 	lds	r20, 0x50FC
    71e8:	84 2f       	mov	r24, r20
    71ea:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    71ee:	28 2f       	mov	r18, r24
    71f0:	30 e0       	ldi	r19, 0x00	; 0
    71f2:	a4 e0       	ldi	r26, 0x04	; 4
    71f4:	22 0f       	add	r18, r18
    71f6:	33 1f       	adc	r19, r19
    71f8:	aa 95       	dec	r26
    71fa:	e1 f7       	brne	.-8      	; 0x71f4 <RTC_setTime+0xe6>
    71fc:	84 2f       	mov	r24, r20
    71fe:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7202:	92 2b       	or	r25, r18
    7204:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    7206:	85 2f       	mov	r24, r21
    7208:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    720c:	28 2f       	mov	r18, r24
    720e:	30 e0       	ldi	r19, 0x00	; 0
    7210:	f4 e0       	ldi	r31, 0x04	; 4
    7212:	22 0f       	add	r18, r18
    7214:	33 1f       	adc	r19, r19
    7216:	fa 95       	dec	r31
    7218:	e1 f7       	brne	.-8      	; 0x7212 <RTC_setTime+0x104>
    721a:	85 2f       	mov	r24, r21
    721c:	0e 94 28 62 	call	0xc450	; 0xc450 <__udivmodqi4>
    7220:	92 2b       	or	r25, r18
    7222:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    7224:	89 e0       	ldi	r24, 0x09	; 9
    7226:	be 01       	movw	r22, r28
    7228:	6f 5f       	subi	r22, 0xFF	; 255
    722a:	7f 4f       	sbci	r23, 0xFF	; 255
    722c:	40 ed       	ldi	r20, 0xD0	; 208
    722e:	0e 94 6d 38 	call	0x70da	; 0x70da <RTC_sendBytes>
}
    7232:	29 96       	adiw	r28, 0x09	; 9
    7234:	cd bf       	out	0x3d, r28	; 61
    7236:	de bf       	out	0x3e, r29	; 62
    7238:	cf 91       	pop	r28
    723a:	df 91       	pop	r29
    723c:	08 95       	ret

0000723e <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    723e:	46 ef       	ldi	r20, 0xF6	; 246
    7240:	50 e5       	ldi	r21, 0x50	; 80
    7242:	0e 94 91 36 	call	0x6d22	; 0x6d22 <RTC_UTCSecsToTime>
	RTC_setTime();
    7246:	0e 94 87 38 	call	0x710e	; 0x710e <RTC_setTime>
}
    724a:	08 95       	ret

0000724c <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    724c:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    724e:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    7250:	e0 ea       	ldi	r30, 0xA0	; 160
    7252:	f4 e0       	ldi	r31, 0x04	; 4
    7254:	46 83       	std	Z+6, r20	; 0x06
    7256:	fb 01       	movw	r30, r22
    7258:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    725a:	a0 ea       	ldi	r26, 0xA0	; 160
    725c:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    725e:	22 e0       	ldi	r18, 0x02	; 2
    7260:	0b c0       	rjmp	.+22     	; 0x7278 <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    7262:	80 91 a4 04 	lds	r24, 0x04A4
    7266:	87 ff       	sbrs	r24, 7
    7268:	fc cf       	rjmp	.-8      	; 0x7262 <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    726a:	80 91 a7 04 	lds	r24, 0x04A7
    726e:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    7270:	13 96       	adiw	r26, 0x03	; 3
    7272:	2c 93       	st	X, r18
    7274:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    7276:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    7278:	95 17       	cp	r25, r21
    727a:	98 f3       	brcs	.-26     	; 0x7262 <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    727c:	87 e0       	ldi	r24, 0x07	; 7
    727e:	e0 ea       	ldi	r30, 0xA0	; 160
    7280:	f4 e0       	ldi	r31, 0x04	; 4
    7282:	83 83       	std	Z+3, r24	; 0x03

}
    7284:	08 95       	ret

00007286 <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    7286:	0f 93       	push	r16
    7288:	1f 93       	push	r17
    728a:	df 93       	push	r29
    728c:	cf 93       	push	r28
    728e:	cd b7       	in	r28, 0x3d	; 61
    7290:	de b7       	in	r29, 0x3e	; 62
    7292:	28 97       	sbiw	r28, 0x08	; 8
    7294:	cd bf       	out	0x3d, r28	; 61
    7296:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    7298:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    729a:	81 e0       	ldi	r24, 0x01	; 1
    729c:	8e 01       	movw	r16, r28
    729e:	0f 5f       	subi	r16, 0xFF	; 255
    72a0:	1f 4f       	sbci	r17, 0xFF	; 255
    72a2:	b8 01       	movw	r22, r16
    72a4:	40 ed       	ldi	r20, 0xD0	; 208
    72a6:	0e 94 6d 38 	call	0x70da	; 0x70da <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    72aa:	88 e0       	ldi	r24, 0x08	; 8
    72ac:	b8 01       	movw	r22, r16
    72ae:	40 ed       	ldi	r20, 0xD0	; 208
    72b0:	0e 94 26 39 	call	0x724c	; 0x724c <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    72b4:	49 81       	ldd	r20, Y+1	; 0x01
    72b6:	84 2f       	mov	r24, r20
    72b8:	82 95       	swap	r24
    72ba:	8f 70       	andi	r24, 0x0F	; 15
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	9c 01       	movw	r18, r24
    72c0:	b3 e0       	ldi	r27, 0x03	; 3
    72c2:	22 0f       	add	r18, r18
    72c4:	33 1f       	adc	r19, r19
    72c6:	ba 95       	dec	r27
    72c8:	e1 f7       	brne	.-8      	; 0x72c2 <RTC_getTime+0x3c>
    72ca:	88 0f       	add	r24, r24
    72cc:	99 1f       	adc	r25, r25
    72ce:	28 0f       	add	r18, r24
    72d0:	39 1f       	adc	r19, r25
    72d2:	4f 70       	andi	r20, 0x0F	; 15
    72d4:	42 0f       	add	r20, r18
    72d6:	40 93 f6 50 	sts	0x50F6, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    72da:	4a 81       	ldd	r20, Y+2	; 0x02
    72dc:	84 2f       	mov	r24, r20
    72de:	90 e0       	ldi	r25, 0x00	; 0
    72e0:	80 77       	andi	r24, 0x70	; 112
    72e2:	90 70       	andi	r25, 0x00	; 0
    72e4:	f4 e0       	ldi	r31, 0x04	; 4
    72e6:	95 95       	asr	r25
    72e8:	87 95       	ror	r24
    72ea:	fa 95       	dec	r31
    72ec:	e1 f7       	brne	.-8      	; 0x72e6 <RTC_getTime+0x60>
    72ee:	9c 01       	movw	r18, r24
    72f0:	e3 e0       	ldi	r30, 0x03	; 3
    72f2:	22 0f       	add	r18, r18
    72f4:	33 1f       	adc	r19, r19
    72f6:	ea 95       	dec	r30
    72f8:	e1 f7       	brne	.-8      	; 0x72f2 <RTC_getTime+0x6c>
    72fa:	88 0f       	add	r24, r24
    72fc:	99 1f       	adc	r25, r25
    72fe:	28 0f       	add	r18, r24
    7300:	39 1f       	adc	r19, r25
    7302:	4f 70       	andi	r20, 0x0F	; 15
    7304:	42 0f       	add	r20, r18
    7306:	40 93 f7 50 	sts	0x50F7, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    730a:	4b 81       	ldd	r20, Y+3	; 0x03
    730c:	84 2f       	mov	r24, r20
    730e:	90 e0       	ldi	r25, 0x00	; 0
    7310:	80 77       	andi	r24, 0x70	; 112
    7312:	90 70       	andi	r25, 0x00	; 0
    7314:	64 e0       	ldi	r22, 0x04	; 4
    7316:	95 95       	asr	r25
    7318:	87 95       	ror	r24
    731a:	6a 95       	dec	r22
    731c:	e1 f7       	brne	.-8      	; 0x7316 <RTC_getTime+0x90>
    731e:	9c 01       	movw	r18, r24
    7320:	53 e0       	ldi	r21, 0x03	; 3
    7322:	22 0f       	add	r18, r18
    7324:	33 1f       	adc	r19, r19
    7326:	5a 95       	dec	r21
    7328:	e1 f7       	brne	.-8      	; 0x7322 <RTC_getTime+0x9c>
    732a:	88 0f       	add	r24, r24
    732c:	99 1f       	adc	r25, r25
    732e:	28 0f       	add	r18, r24
    7330:	39 1f       	adc	r19, r25
    7332:	4f 70       	andi	r20, 0x0F	; 15
    7334:	42 0f       	add	r20, r18
    7336:	40 93 f8 50 	sts	0x50F8, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    733a:	4c 81       	ldd	r20, Y+4	; 0x04
    733c:	64 2f       	mov	r22, r20
    733e:	70 e0       	ldi	r23, 0x00	; 0
    7340:	cb 01       	movw	r24, r22
    7342:	80 73       	andi	r24, 0x30	; 48
    7344:	90 70       	andi	r25, 0x00	; 0
    7346:	14 e0       	ldi	r17, 0x04	; 4
    7348:	95 95       	asr	r25
    734a:	87 95       	ror	r24
    734c:	1a 95       	dec	r17
    734e:	e1 f7       	brne	.-8      	; 0x7348 <RTC_getTime+0xc2>
    7350:	9c 01       	movw	r18, r24
    7352:	b3 e0       	ldi	r27, 0x03	; 3
    7354:	22 0f       	add	r18, r18
    7356:	33 1f       	adc	r19, r19
    7358:	ba 95       	dec	r27
    735a:	e1 f7       	brne	.-8      	; 0x7354 <RTC_getTime+0xce>
    735c:	88 0f       	add	r24, r24
    735e:	99 1f       	adc	r25, r25
    7360:	28 0f       	add	r18, r24
    7362:	39 1f       	adc	r19, r25
    7364:	4f 70       	andi	r20, 0x0F	; 15
    7366:	42 0f       	add	r20, r18
    7368:	40 93 f9 50 	sts	0x50F9, r20
	time.Wday = timeData[4];
    736c:	8d 81       	ldd	r24, Y+5	; 0x05
    736e:	80 93 fa 50 	sts	0x50FA, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    7372:	4e 81       	ldd	r20, Y+6	; 0x06
    7374:	84 2f       	mov	r24, r20
    7376:	90 e0       	ldi	r25, 0x00	; 0
    7378:	80 73       	andi	r24, 0x30	; 48
    737a:	90 70       	andi	r25, 0x00	; 0
    737c:	f4 e0       	ldi	r31, 0x04	; 4
    737e:	95 95       	asr	r25
    7380:	87 95       	ror	r24
    7382:	fa 95       	dec	r31
    7384:	e1 f7       	brne	.-8      	; 0x737e <RTC_getTime+0xf8>
    7386:	9c 01       	movw	r18, r24
    7388:	e3 e0       	ldi	r30, 0x03	; 3
    738a:	22 0f       	add	r18, r18
    738c:	33 1f       	adc	r19, r19
    738e:	ea 95       	dec	r30
    7390:	e1 f7       	brne	.-8      	; 0x738a <RTC_getTime+0x104>
    7392:	88 0f       	add	r24, r24
    7394:	99 1f       	adc	r25, r25
    7396:	28 0f       	add	r18, r24
    7398:	39 1f       	adc	r19, r25
    739a:	4f 70       	andi	r20, 0x0F	; 15
    739c:	42 0f       	add	r20, r18
    739e:	40 93 fb 50 	sts	0x50FB, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    73a2:	4f 81       	ldd	r20, Y+7	; 0x07
    73a4:	84 2f       	mov	r24, r20
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	80 71       	andi	r24, 0x10	; 16
    73aa:	90 70       	andi	r25, 0x00	; 0
    73ac:	04 e0       	ldi	r16, 0x04	; 4
    73ae:	95 95       	asr	r25
    73b0:	87 95       	ror	r24
    73b2:	0a 95       	dec	r16
    73b4:	e1 f7       	brne	.-8      	; 0x73ae <RTC_getTime+0x128>
    73b6:	9c 01       	movw	r18, r24
    73b8:	13 e0       	ldi	r17, 0x03	; 3
    73ba:	22 0f       	add	r18, r18
    73bc:	33 1f       	adc	r19, r19
    73be:	1a 95       	dec	r17
    73c0:	e1 f7       	brne	.-8      	; 0x73ba <RTC_getTime+0x134>
    73c2:	88 0f       	add	r24, r24
    73c4:	99 1f       	adc	r25, r25
    73c6:	28 0f       	add	r18, r24
    73c8:	39 1f       	adc	r19, r25
    73ca:	4f 70       	andi	r20, 0x0F	; 15
    73cc:	42 0f       	add	r20, r18
    73ce:	40 93 fc 50 	sts	0x50FC, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    73d2:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    73d4:	42 2f       	mov	r20, r18
    73d6:	4f 70       	andi	r20, 0x0F	; 15
    73d8:	42 5e       	subi	r20, 0xE2	; 226
    73da:	60 75       	andi	r22, 0x50	; 80
    73dc:	70 70       	andi	r23, 0x00	; 0
    73de:	a6 e0       	ldi	r26, 0x06	; 6
    73e0:	75 95       	asr	r23
    73e2:	67 95       	ror	r22
    73e4:	aa 95       	dec	r26
    73e6:	e1 f7       	brne	.-8      	; 0x73e0 <RTC_getTime+0x15a>
    73e8:	84 e6       	ldi	r24, 0x64	; 100
    73ea:	90 e0       	ldi	r25, 0x00	; 0
    73ec:	fc 01       	movw	r30, r24
    73ee:	6e 9f       	mul	r22, r30
    73f0:	c0 01       	movw	r24, r0
    73f2:	6f 9f       	mul	r22, r31
    73f4:	90 0d       	add	r25, r0
    73f6:	7e 9f       	mul	r23, r30
    73f8:	90 0d       	add	r25, r0
    73fa:	11 24       	eor	r1, r1
    73fc:	48 0f       	add	r20, r24
    73fe:	22 95       	swap	r18
    7400:	2f 70       	andi	r18, 0x0F	; 15
    7402:	30 e0       	ldi	r19, 0x00	; 0
    7404:	c9 01       	movw	r24, r18
    7406:	f3 e0       	ldi	r31, 0x03	; 3
    7408:	88 0f       	add	r24, r24
    740a:	99 1f       	adc	r25, r25
    740c:	fa 95       	dec	r31
    740e:	e1 f7       	brne	.-8      	; 0x7408 <RTC_getTime+0x182>
    7410:	22 0f       	add	r18, r18
    7412:	33 1f       	adc	r19, r19
    7414:	82 0f       	add	r24, r18
    7416:	93 1f       	adc	r25, r19
    7418:	48 0f       	add	r20, r24
    741a:	40 93 fd 50 	sts	0x50FD, r20




} 
    741e:	28 96       	adiw	r28, 0x08	; 8
    7420:	cd bf       	out	0x3d, r28	; 61
    7422:	de bf       	out	0x3e, r29	; 62
    7424:	cf 91       	pop	r28
    7426:	df 91       	pop	r29
    7428:	1f 91       	pop	r17
    742a:	0f 91       	pop	r16
    742c:	08 95       	ret

0000742e <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    742e:	0e 94 43 39 	call	0x7286	; 0x7286 <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    7432:	86 ef       	ldi	r24, 0xF6	; 246
    7434:	90 e5       	ldi	r25, 0x50	; 80
    7436:	0e 94 94 37 	call	0x6f28	; 0x6f28 <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    743a:	08 95       	ret

0000743c <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    743c:	0f 93       	push	r16
    743e:	df 93       	push	r29
    7440:	cf 93       	push	r28
    7442:	0f 92       	push	r0
    7444:	cd b7       	in	r28, 0x3d	; 61
    7446:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    7448:	80 ec       	ldi	r24, 0xC0	; 192
    744a:	e0 e5       	ldi	r30, 0x50	; 80
    744c:	f0 e0       	ldi	r31, 0x00	; 0
    744e:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    7450:	80 91 50 00 	lds	r24, 0x0050
    7454:	88 60       	ori	r24, 0x08	; 8
    7456:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    745a:	80 91 51 00 	lds	r24, 0x0051
    745e:	83 ff       	sbrs	r24, 3
    7460:	fc cf       	rjmp	.-8      	; 0x745a <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    7462:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    7466:	8f b7       	in	r24, 0x3f	; 63
    7468:	89 83       	std	Y+1, r24	; 0x01
    cli();
    746a:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    746c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    746e:	28 7f       	andi	r18, 0xF8	; 248
    7470:	23 60       	ori	r18, 0x03	; 3
    7472:	80 e4       	ldi	r24, 0x40	; 64
    7474:	90 e0       	ldi	r25, 0x00	; 0
    7476:	fc 01       	movw	r30, r24
    7478:	08 ed       	ldi	r16, 0xD8	; 216
    747a:	04 bf       	out	0x34, r16	; 52
    747c:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    747e:	89 81       	ldd	r24, Y+1	; 0x01
    7480:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    7482:	80 91 50 00 	lds	r24, 0x0050
    7486:	8e 7f       	andi	r24, 0xFE	; 254
    7488:	80 93 50 00 	sts	0x0050, r24
}
    748c:	0f 90       	pop	r0
    748e:	cf 91       	pop	r28
    7490:	df 91       	pop	r29
    7492:	0f 91       	pop	r16
    7494:	08 95       	ret

00007496 <Disable_JTAG>:

void Disable_JTAG(void){
    7496:	0f 93       	push	r16
    7498:	df 93       	push	r29
    749a:	cf 93       	push	r28
    749c:	0f 92       	push	r0
    749e:	cd b7       	in	r28, 0x3d	; 61
    74a0:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    74a2:	8f b7       	in	r24, 0x3f	; 63
    74a4:	89 83       	std	Y+1, r24	; 0x01
    cli();
    74a6:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    74a8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    74aa:	21 e0       	ldi	r18, 0x01	; 1
    74ac:	86 e9       	ldi	r24, 0x96	; 150
    74ae:	90 e0       	ldi	r25, 0x00	; 0
    74b0:	fc 01       	movw	r30, r24
    74b2:	08 ed       	ldi	r16, 0xD8	; 216
    74b4:	04 bf       	out	0x34, r16	; 52
    74b6:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    74b8:	89 81       	ldd	r24, Y+1	; 0x01
    74ba:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    74bc:	0f 90       	pop	r0
    74be:	cf 91       	pop	r28
    74c0:	df 91       	pop	r29
    74c2:	0f 91       	pop	r16
    74c4:	08 95       	ret

000074c6 <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    74c6:	e0 e0       	ldi	r30, 0x00	; 0
    74c8:	f1 e0       	ldi	r31, 0x01	; 1
    74ca:	80 81       	ld	r24, Z
    74cc:	80 68       	ori	r24, 0x80	; 128
    74ce:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
    74d0:	82 89       	ldd	r24, Z+18	; 0x12
    74d2:	85 60       	ori	r24, 0x05	; 5
    74d4:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    74d6:	8b e8       	ldi	r24, 0x8B	; 139
    74d8:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    74da:	20 e0       	ldi	r18, 0x00	; 0
    74dc:	34 e0       	ldi	r19, 0x04	; 4
    74de:	24 8b       	std	Z+20, r18	; 0x14
    74e0:	35 8b       	std	Z+21, r19	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    74e2:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    74e4:	40 ea       	ldi	r20, 0xA0	; 160
    74e6:	40 8f       	std	Z+24, r20	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    74e8:	8a e0       	ldi	r24, 0x0A	; 10
    74ea:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    74ec:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    74ee:	8d ee       	ldi	r24, 0xED	; 237
    74f0:	9d e3       	ldi	r25, 0x3D	; 61
    74f2:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    74f4:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    74f6:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    74f8:	80 89       	ldd	r24, Z+16	; 0x10
    74fa:	84 6a       	ori	r24, 0xA4	; 164
    74fc:	80 8b       	std	Z+16, r24	; 0x10

	// Debug
	DMA.CH1.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
    74fe:	82 a1       	ldd	r24, Z+34	; 0x22
    7500:	85 60       	ori	r24, 0x05	; 5
    7502:	82 a3       	std	Z+34, r24	; 0x22
    DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
    7504:	8b e4       	ldi	r24, 0x4B	; 75
    7506:	83 a3       	std	Z+35, r24	; 0x23
    DMA.CH1.TRFCNT = Debug_BufferSize;	// 1024 bytes in block
    7508:	24 a3       	std	Z+36, r18	; 0x24
    750a:	35 a3       	std	Z+37, r19	; 0x25
    DMA.CH1.REPCNT  = 0;		// repeat forever
    750c:	16 a2       	std	Z+38, r1	; 0x26

    DMA.CH1.SRCADDR0 = (((uint16_t)(&Debug_Usart.DATA) >> 0) & 0xFF);
    750e:	40 a7       	std	Z+40, r20	; 0x28
    DMA.CH1.SRCADDR1 = (((uint16_t)(&Debug_Usart.DATA) >> 8) & 0xFF);
    7510:	88 e0       	ldi	r24, 0x08	; 8
    7512:	81 a7       	std	Z+41, r24	; 0x29
    DMA.CH1.SRCADDR2 = 0x00;
    7514:	12 a6       	std	Z+42, r1	; 0x2a

    DMA.CH1.DESTADDR0 = (((uint16_t)(&DebugBuffer[0]) >> 0) & 0xFF);
    7516:	86 ef       	ldi	r24, 0xF6	; 246
    7518:	9c e4       	ldi	r25, 0x4C	; 76
    751a:	84 a7       	std	Z+44, r24	; 0x2c
    DMA.CH1.DESTADDR1 = (((uint16_t)(&DebugBuffer[0]) >> 8) & 0xFF);
    751c:	95 a7       	std	Z+45, r25	; 0x2d
    DMA.CH1.DESTADDR2 = 0x00;
    751e:	16 a6       	std	Z+46, r1	; 0x2e

    DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;
    7520:	80 a1       	ldd	r24, Z+32	; 0x20
    7522:	84 6a       	ori	r24, 0xA4	; 164
    7524:	80 a3       	std	Z+32, r24	; 0x20

}
    7526:	08 95       	ret

00007528 <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    7528:	e0 ea       	ldi	r30, 0xA0	; 160
    752a:	f0 e0       	ldi	r31, 0x00	; 0
    752c:	82 81       	ldd	r24, Z+2	; 0x02
    752e:	87 60       	ori	r24, 0x07	; 7
    7530:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    7532:	78 94       	sei
}
    7534:	08 95       	ret

00007536 <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 1440
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	TCD0.PER = 1440;
    7536:	e0 e0       	ldi	r30, 0x00	; 0
    7538:	f9 e0       	ldi	r31, 0x09	; 9
    753a:	80 ea       	ldi	r24, 0xA0	; 160
    753c:	95 e0       	ldi	r25, 0x05	; 5
    753e:	86 a3       	std	Z+38, r24	; 0x26
    7540:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    7542:	80 81       	ld	r24, Z
    7544:	80 7f       	andi	r24, 0xF0	; 240
    7546:	87 60       	ori	r24, 0x07	; 7
    7548:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    754a:	86 81       	ldd	r24, Z+6	; 0x06
    754c:	8c 7f       	andi	r24, 0xFC	; 252
    754e:	81 60       	ori	r24, 0x01	; 1
    7550:	86 83       	std	Z+6, r24	; 0x06
}
    7552:	08 95       	ret

00007554 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    7554:	e0 e4       	ldi	r30, 0x40	; 64
    7556:	fa e0       	ldi	r31, 0x0A	; 10
    7558:	80 e0       	ldi	r24, 0x00	; 0
    755a:	99 e0       	ldi	r25, 0x09	; 9
    755c:	86 a3       	std	Z+38, r24	; 0x26
    755e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    7560:	80 81       	ld	r24, Z
    7562:	80 7f       	andi	r24, 0xF0	; 240
    7564:	85 60       	ori	r24, 0x05	; 5
    7566:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    7568:	86 81       	ldd	r24, Z+6	; 0x06
    756a:	8c 7f       	andi	r24, 0xFC	; 252
    756c:	82 60       	ori	r24, 0x02	; 2
    756e:	86 83       	std	Z+6, r24	; 0x06

}
    7570:	08 95       	ret

00007572 <SD_WriteRTCBlock>:
	    goto sdInterrupt;
	}
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    7572:	af 92       	push	r10
    7574:	bf 92       	push	r11
    7576:	cf 92       	push	r12
    7578:	df 92       	push	r13
    757a:	ef 92       	push	r14
    757c:	ff 92       	push	r15
    757e:	0f 93       	push	r16
    7580:	1f 93       	push	r17
    7582:	7b 01       	movw	r14, r22
    7584:	8c 01       	movw	r16, r24
    7586:	59 01       	movw	r10, r18
    7588:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    758a:	8f ef       	ldi	r24, 0xFF	; 255
    758c:	9f ef       	ldi	r25, 0xFF	; 255
    758e:	af ef       	ldi	r26, 0xFF	; 255
    7590:	bf ef       	ldi	r27, 0xFF	; 255
    7592:	80 93 32 59 	sts	0x5932, r24
    7596:	90 93 33 59 	sts	0x5933, r25
    759a:	a0 93 34 59 	sts	0x5934, r26
    759e:	b0 93 35 59 	sts	0x5935, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    75a2:	6c e4       	ldi	r22, 0x4C	; 76
    75a4:	74 e7       	ldi	r23, 0x74	; 116
    75a6:	8e ed       	ldi	r24, 0xDE	; 222
    75a8:	90 eb       	ldi	r25, 0xB0	; 176
    75aa:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(27);				// record size  
    75ae:	6b e1       	ldi	r22, 0x1B	; 27
    75b0:	70 e0       	ldi	r23, 0x00	; 0
    75b2:	80 e0       	ldi	r24, 0x00	; 0
    75b4:	90 e0       	ldi	r25, 0x00	; 0
    75b6:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(2); 		// record type  
    75ba:	82 e0       	ldi	r24, 0x02	; 2
    75bc:	90 e0       	ldi	r25, 0x00	; 0
    75be:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    75c2:	c8 01       	movw	r24, r16
    75c4:	b7 01       	movw	r22, r14
    75c6:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    75ca:	c6 01       	movw	r24, r12
    75cc:	b5 01       	movw	r22, r10
    75ce:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write8(0);
    75d2:	80 e0       	ldi	r24, 0x00	; 0
    75d4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    75d8:	60 e0       	ldi	r22, 0x00	; 0
    75da:	70 e0       	ldi	r23, 0x00	; 0
    75dc:	80 e0       	ldi	r24, 0x00	; 0
    75de:	90 e0       	ldi	r25, 0x00	; 0
    75e0:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_WriteCRC();			      // CRC			
    75e4:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>
		
	f_sync(&Log_File);
    75e8:	80 e3       	ldi	r24, 0x30	; 48
    75ea:	91 e5       	ldi	r25, 0x51	; 81
    75ec:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    75f0:	1f 91       	pop	r17
    75f2:	0f 91       	pop	r16
    75f4:	ff 90       	pop	r15
    75f6:	ef 90       	pop	r14
    75f8:	df 90       	pop	r13
    75fa:	cf 90       	pop	r12
    75fc:	bf 90       	pop	r11
    75fe:	af 90       	pop	r10
    7600:	08 95       	ret

00007602 <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    7602:	20 91 2d 34 	lds	r18, 0x342D
    7606:	30 91 2e 34 	lds	r19, 0x342E
    760a:	80 91 2b 34 	lds	r24, 0x342B
    760e:	90 91 2c 34 	lds	r25, 0x342C
    7612:	28 17       	cp	r18, r24
    7614:	39 07       	cpc	r19, r25
    7616:	51 f4       	brne	.+20     	; 0x762c <Rs232_To_Debug+0x2a>
    7618:	f4 cf       	rjmp	.-24     	; 0x7602 <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    761a:	80 91 a1 08 	lds	r24, 0x08A1
    761e:	85 ff       	sbrs	r24, 5
    7620:	fc cf       	rjmp	.-8      	; 0x761a <Rs232_To_Debug+0x18>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7622:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7626:	90 93 a0 08 	sts	0x08A0, r25
    762a:	eb cf       	rjmp	.-42     	; 0x7602 <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    762c:	81 e0       	ldi	r24, 0x01	; 1
    762e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Rs232_GetByte>
    7632:	98 2f       	mov	r25, r24
    7634:	f2 cf       	rjmp	.-28     	; 0x761a <Rs232_To_Debug+0x18>

00007636 <getDeviceID>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7636:	82 e0       	ldi	r24, 0x02	; 2
    7638:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    763c:	e8 e0       	ldi	r30, 0x08	; 8
    763e:	f0 e0       	ldi	r31, 0x00	; 0
    7640:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7642:	10 92 ca 01 	sts	0x01CA, r1
	
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    7646:	e0 93 18 4c 	sts	0x4C18, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    764a:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    764e:	e9 e0       	ldi	r30, 0x09	; 9
    7650:	f0 e0       	ldi	r31, 0x00	; 0
    7652:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7654:	10 92 ca 01 	sts	0x01CA, r1
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
    7658:	e0 93 19 4c 	sts	0x4C19, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    765c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7660:	ea e0       	ldi	r30, 0x0A	; 10
    7662:	f0 e0       	ldi	r31, 0x00	; 0
    7664:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7666:	10 92 ca 01 	sts	0x01CA, r1
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
    766a:	e0 93 1a 4c 	sts	0x4C1A, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    766e:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7672:	eb e0       	ldi	r30, 0x0B	; 11
    7674:	f0 e0       	ldi	r31, 0x00	; 0
    7676:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7678:	10 92 ca 01 	sts	0x01CA, r1

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
    767c:	e0 93 1b 4c 	sts	0x4C1B, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7680:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7684:	ec e0       	ldi	r30, 0x0C	; 12
    7686:	f0 e0       	ldi	r31, 0x00	; 0
    7688:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    768a:	10 92 ca 01 	sts	0x01CA, r1
void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
    768e:	e0 93 1c 4c 	sts	0x4C1C, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7692:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7696:	ed e0       	ldi	r30, 0x0D	; 13
    7698:	f0 e0       	ldi	r31, 0x00	; 0
    769a:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    769c:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
    76a0:	e0 93 1d 4c 	sts	0x4C1D, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    76a4:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    76a8:	e0 e1       	ldi	r30, 0x10	; 16
    76aa:	f0 e0       	ldi	r31, 0x00	; 0
    76ac:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    76ae:	10 92 ca 01 	sts	0x01CA, r1
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
    76b2:	e0 93 1e 4c 	sts	0x4C1E, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    76b6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    76ba:	e2 e1       	ldi	r30, 0x12	; 18
    76bc:	f0 e0       	ldi	r31, 0x00	; 0
    76be:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    76c0:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
    76c4:	e0 93 1f 4c 	sts	0x4C1F, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    76c8:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    76cc:	e3 e1       	ldi	r30, 0x13	; 19
    76ce:	f0 e0       	ldi	r31, 0x00	; 0
    76d0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    76d2:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
    76d6:	e0 93 20 4c 	sts	0x4C20, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    76da:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    76de:	e4 e1       	ldi	r30, 0x14	; 20
    76e0:	f0 e0       	ldi	r31, 0x00	; 0
    76e2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    76e4:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
    76e8:	e0 93 21 4c 	sts	0x4C21, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    76ec:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    76f0:	e5 e1       	ldi	r30, 0x15	; 21
    76f2:	f0 e0       	ldi	r31, 0x00	; 0
    76f4:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    76f6:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
    76fa:	e0 93 22 4c 	sts	0x4C22, r30
	deviceID[11] = '\0';
    76fe:	10 92 23 4c 	sts	0x4C23, r1
    7702:	e8 e1       	ldi	r30, 0x18	; 24
    7704:	fc e4       	ldi	r31, 0x4C	; 76
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
    7706:	91 e0       	ldi	r25, 0x01	; 1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
    7708:	80 81       	ld	r24, Z
    770a:	88 23       	and	r24, r24
    770c:	09 f4       	brne	.+2      	; 0x7710 <getDeviceID+0xda>
	       deviceID[i] += 1;
    770e:	90 83       	st	Z, r25
    7710:	31 96       	adiw	r30, 0x01	; 1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
    7712:	8c e4       	ldi	r24, 0x4C	; 76
    7714:	e3 32       	cpi	r30, 0x23	; 35
    7716:	f8 07       	cpc	r31, r24
    7718:	b9 f7       	brne	.-18     	; 0x7708 <getDeviceID+0xd2>
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
	    }
	}
}
    771a:	08 95       	ret

0000771c <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    771c:	aa ec       	ldi	r26, 0xCA	; 202
    771e:	b1 e0       	ldi	r27, 0x01	; 1
    7720:	92 e0       	ldi	r25, 0x02	; 2
    7722:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    7724:	e8 2f       	mov	r30, r24
    7726:	f0 e0       	ldi	r31, 0x00	; 0
    7728:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    772a:	1c 92       	st	X, r1

	return result;
}
    772c:	8e 2f       	mov	r24, r30
    772e:	08 95       	ret

00007730 <getTime>:
			singCounter--;
		}
	}
}

bool getTime(void){
    7730:	ef 92       	push	r14
    7732:	ff 92       	push	r15
    7734:	0f 93       	push	r16
    7736:	1f 93       	push	r17
    7738:	cf 93       	push	r28
    773a:	df 93       	push	r29
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    773c:	80 91 a1 08 	lds	r24, 0x08A1
    7740:	85 ff       	sbrs	r24, 5
    7742:	fc cf       	rjmp	.-8      	; 0x773c <getTime+0xc>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7744:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7748:	84 e5       	ldi	r24, 0x54	; 84
    774a:	80 93 a0 08 	sts	0x08A0, r24
    774e:	ee 24       	eor	r14, r14
    7750:	ff 24       	eor	r15, r15
    7752:	c6 e6       	ldi	r28, 0x66	; 102
    7754:	de e0       	ldi	r29, 0x0E	; 14
    uint32_t tempTime = 0;
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    Debug_SendByte('T');
    while(true){
        if(Debug_CharReadyToRead()){
    7756:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    775a:	88 23       	and	r24, r24
    775c:	09 f4       	brne	.+2      	; 0x7760 <getTime+0x30>
    775e:	47 c0       	rjmp	.+142    	; 0x77ee <getTime+0xbe>
            command[commandCounter+1] = Debug_GetByte(false);
    7760:	0f 2d       	mov	r16, r15
    7762:	10 e0       	ldi	r17, 0x00	; 0
    7764:	0f 5f       	subi	r16, 0xFF	; 255
    7766:	1f 4f       	sbci	r17, 0xFF	; 255
    7768:	80 e0       	ldi	r24, 0x00	; 0
    776a:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    776e:	05 51       	subi	r16, 0x15	; 21
    7770:	19 4b       	sbci	r17, 0xB9	; 185
    7772:	f8 01       	movw	r30, r16
    7774:	80 83       	st	Z, r24
            Debug_SendByte(command[commandCounter+1]);
    7776:	00 81       	ld	r16, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7778:	80 91 a1 08 	lds	r24, 0x08A1
    777c:	85 ff       	sbrs	r24, 5
    777e:	fc cf       	rjmp	.-8      	; 0x7778 <getTime+0x48>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7780:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7784:	00 93 a0 08 	sts	0x08A0, r16
            commandCounter++;
    7788:	f3 94       	inc	r15
            if(commandCounter == 4){
    778a:	f4 e0       	ldi	r31, 0x04	; 4
    778c:	ff 16       	cp	r15, r31
    778e:	79 f5       	brne	.+94     	; 0x77ee <getTime+0xbe>
                tempTime = command[1];
    7790:	80 91 ec 46 	lds	r24, 0x46EC
    7794:	90 e0       	ldi	r25, 0x00	; 0
    7796:	a0 e0       	ldi	r26, 0x00	; 0
    7798:	b0 e0       	ldi	r27, 0x00	; 0
                tempTime <<= 8;
    779a:	ba 2f       	mov	r27, r26
    779c:	a9 2f       	mov	r26, r25
    779e:	98 2f       	mov	r25, r24
    77a0:	88 27       	eor	r24, r24
                tempTime += command[2];
    77a2:	20 91 ed 46 	lds	r18, 0x46ED
    77a6:	82 0f       	add	r24, r18
    77a8:	91 1d       	adc	r25, r1
    77aa:	a1 1d       	adc	r26, r1
    77ac:	b1 1d       	adc	r27, r1
                tempTime <<= 8;
    77ae:	ba 2f       	mov	r27, r26
    77b0:	a9 2f       	mov	r26, r25
    77b2:	98 2f       	mov	r25, r24
    77b4:	88 27       	eor	r24, r24
                tempTime += command[3];
    77b6:	20 91 ee 46 	lds	r18, 0x46EE
    77ba:	82 0f       	add	r24, r18
    77bc:	91 1d       	adc	r25, r1
    77be:	a1 1d       	adc	r26, r1
    77c0:	b1 1d       	adc	r27, r1
                tempTime <<= 8;
    77c2:	ba 2f       	mov	r27, r26
    77c4:	a9 2f       	mov	r26, r25
    77c6:	98 2f       	mov	r25, r24
    77c8:	88 27       	eor	r24, r24
                tempTime += command[4];
    77ca:	20 91 ef 46 	lds	r18, 0x46EF
    77ce:	82 0f       	add	r24, r18
    77d0:	91 1d       	adc	r25, r1
    77d2:	a1 1d       	adc	r26, r1
    77d4:	b1 1d       	adc	r27, r1
	
	
}

void Time_Set(uint32_t time){
  cli();
    77d6:	f8 94       	cli
  UNIX_time = time;
    77d8:	80 93 36 34 	sts	0x3436, r24
    77dc:	90 93 37 34 	sts	0x3437, r25
    77e0:	a0 93 38 34 	sts	0x3438, r26
    77e4:	b0 93 39 34 	sts	0x3439, r27
  sei();
    77e8:	78 94       	sei
    77ea:	81 e0       	ldi	r24, 0x01	; 1
    77ec:	09 c0       	rjmp	.+18     	; 0x7800 <getTime+0xd0>
    77ee:	ce 01       	movw	r24, r28
    77f0:	01 97       	sbiw	r24, 0x01	; 1
    77f2:	f1 f7       	brne	.-4      	; 0x77f0 <getTime+0xc0>
                Time_Set(tempTime);
                return true;
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    77f4:	e3 94       	inc	r14
        if(timeOutCounter > 100){
    77f6:	85 e6       	ldi	r24, 0x65	; 101
    77f8:	e8 16       	cp	r14, r24
    77fa:	09 f0       	breq	.+2      	; 0x77fe <getTime+0xce>
    77fc:	ac cf       	rjmp	.-168    	; 0x7756 <getTime+0x26>
    77fe:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    7800:	df 91       	pop	r29
    7802:	cf 91       	pop	r28
    7804:	1f 91       	pop	r17
    7806:	0f 91       	pop	r16
    7808:	ff 90       	pop	r15
    780a:	ef 90       	pop	r14
    780c:	08 95       	ret

0000780e <uploadFile>:
    Debug_SendByte('F');
	Debug_SendByte(strlen(fileToUpload)+2);
	Debug_SendString(fileToUpload,true);
}

bool uploadFile(void){
    780e:	9f 92       	push	r9
    7810:	af 92       	push	r10
    7812:	bf 92       	push	r11
    7814:	cf 92       	push	r12
    7816:	df 92       	push	r13
    7818:	ef 92       	push	r14
    781a:	ff 92       	push	r15
    781c:	0f 93       	push	r16
    781e:	1f 93       	push	r17
    7820:	cf 93       	push	r28
    7822:	df 93       	push	r29
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    bool gotFileName = false;

    uploading = true;
    7824:	81 e0       	ldi	r24, 0x01	; 1
    7826:	80 93 7b 34 	sts	0x347B, r24
    782a:	88 ee       	ldi	r24, 0xE8	; 232
    782c:	93 e0       	ldi	r25, 0x03	; 3
    782e:	20 e7       	ldi	r18, 0x70	; 112
    7830:	31 e0       	ldi	r19, 0x01	; 1
    7832:	f9 01       	movw	r30, r18
    7834:	31 97       	sbiw	r30, 0x01	; 1
    7836:	f1 f7       	brne	.-4      	; 0x7834 <uploadFile+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7838:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    783a:	d9 f7       	brne	.-10     	; 0x7832 <uploadFile+0x24>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    783c:	80 91 a1 08 	lds	r24, 0x08A1
    7840:	85 ff       	sbrs	r24, 5
    7842:	fc cf       	rjmp	.-8      	; 0x783c <uploadFile+0x2e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7844:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7848:	84 e4       	ldi	r24, 0x44	; 68
    784a:	80 93 a0 08 	sts	0x08A0, r24
    784e:	ff 24       	eor	r15, r15
    7850:	10 e0       	ldi	r17, 0x00	; 0
    7852:	00 e0       	ldi	r16, 0x00	; 0
    7854:	c6 e6       	ldi	r28, 0x66	; 102
    7856:	de e0       	ldi	r29, 0x0E	; 14
    _delay_ms(100);

    Debug_SendByte('D');

    while(!gotFileName){
        if(Debug_CharReadyToRead()){
    7858:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    785c:	88 23       	and	r24, r24
    785e:	79 f1       	breq	.+94     	; 0x78be <uploadFile+0xb0>
            if(commandCounter == 0){
    7860:	11 23       	and	r17, r17
    7862:	71 f4       	brne	.+28     	; 0x7880 <uploadFile+0x72>
                numBytesToRead = Debug_GetByte(false);
    7864:	80 e0       	ldi	r24, 0x00	; 0
    7866:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    786a:	08 2f       	mov	r16, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    786c:	80 91 a1 08 	lds	r24, 0x08A1
    7870:	85 ff       	sbrs	r24, 5
    7872:	fc cf       	rjmp	.-8      	; 0x786c <uploadFile+0x5e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7874:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7878:	00 93 a0 08 	sts	0x08A0, r16
    787c:	11 e0       	ldi	r17, 0x01	; 1
    787e:	1f c0       	rjmp	.+62     	; 0x78be <uploadFile+0xb0>
                Debug_SendByte(numBytesToRead);
                commandCounter++;
            } else {
                fileToUpload[commandCounter-1] = Debug_GetByte(false);
    7880:	80 e0       	ldi	r24, 0x00	; 0
    7882:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    7886:	98 2f       	mov	r25, r24
    7888:	e1 2f       	mov	r30, r17
    788a:	f0 e0       	ldi	r31, 0x00	; 0
    788c:	e9 5c       	subi	r30, 0xC9	; 201
    788e:	f2 4c       	sbci	r31, 0xC2	; 194
    7890:	80 83       	st	Z, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7892:	80 91 a1 08 	lds	r24, 0x08A1
    7896:	85 ff       	sbrs	r24, 5
    7898:	fc cf       	rjmp	.-8      	; 0x7892 <uploadFile+0x84>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    789a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    789e:	90 93 a0 08 	sts	0x08A0, r25
                Debug_SendByte(fileToUpload[commandCounter-1]);
                commandCounter++;
    78a2:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    78a4:	e1 2f       	mov	r30, r17
    78a6:	f0 e0       	ldi	r31, 0x00	; 0
    78a8:	80 2f       	mov	r24, r16
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	01 96       	adiw	r24, 0x01	; 1
    78ae:	e8 17       	cp	r30, r24
    78b0:	f9 07       	cpc	r31, r25
    78b2:	29 f4       	brne	.+10     	; 0x78be <uploadFile+0xb0>
                    fileToUpload[numBytesToRead+1] = 0;
    78b4:	e8 5c       	subi	r30, 0xC8	; 200
    78b6:	f2 4c       	sbci	r31, 0xC2	; 194
    78b8:	10 82       	st	Z, r1
    78ba:	21 e0       	ldi	r18, 0x01	; 1
    78bc:	01 c0       	rjmp	.+2      	; 0x78c0 <uploadFile+0xb2>
    78be:	20 e0       	ldi	r18, 0x00	; 0
    78c0:	ce 01       	movw	r24, r28
    78c2:	01 97       	sbiw	r24, 0x01	; 1
    78c4:	f1 f7       	brne	.-4      	; 0x78c2 <uploadFile+0xb4>
                    gotFileName = true;
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    78c6:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    78c8:	85 e6       	ldi	r24, 0x65	; 101
    78ca:	f8 16       	cp	r15, r24
    78cc:	11 f4       	brne	.+4      	; 0x78d2 <uploadFile+0xc4>
    78ce:	80 e0       	ldi	r24, 0x00	; 0
    78d0:	42 c1       	rjmp	.+644    	; 0x7b56 <uploadFile+0x348>
    uploading = true;
    _delay_ms(100);

    Debug_SendByte('D');

    while(!gotFileName){
    78d2:	22 23       	and	r18, r18
    78d4:	09 f4       	brne	.+2      	; 0x78d8 <uploadFile+0xca>
    78d6:	c0 cf       	rjmp	.-128    	; 0x7858 <uploadFile+0x4a>
        if(timeOutCounter > 100){
            return false;
        }
    }

    okToOpenFileToUpload = true;
    78d8:	81 e0       	ldi	r24, 0x01	; 1
    78da:	80 93 7d 34 	sts	0x347D, r24
    while(!uploadFileOpened);
    78de:	80 91 a5 31 	lds	r24, 0x31A5
    78e2:	88 23       	and	r24, r24
    78e4:	e1 f3       	breq	.-8      	; 0x78de <uploadFile+0xd0>
    78e6:	80 e1       	ldi	r24, 0x10	; 16
    78e8:	97 e2       	ldi	r25, 0x27	; 39
    78ea:	20 e7       	ldi	r18, 0x70	; 112
    78ec:	31 e0       	ldi	r19, 0x01	; 1
    78ee:	f9 01       	movw	r30, r18
    78f0:	31 97       	sbiw	r30, 0x01	; 1
    78f2:	f1 f7       	brne	.-4      	; 0x78f0 <uploadFile+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78f6:	d9 f7       	brne	.-10     	; 0x78ee <uploadFile+0xe0>
	_delay_ms(1000);

	if(!fileExists){
    78f8:	80 91 ae 34 	lds	r24, 0x34AE
    78fc:	88 23       	and	r24, r24
    78fe:	61 f5       	brne	.+88     	; 0x7958 <uploadFile+0x14a>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7900:	80 91 a1 08 	lds	r24, 0x08A1
    7904:	85 ff       	sbrs	r24, 5
    7906:	fc cf       	rjmp	.-8      	; 0x7900 <uploadFile+0xf2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7908:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    790c:	10 92 a0 08 	sts	0x08A0, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7910:	80 91 a1 08 	lds	r24, 0x08A1
    7914:	85 ff       	sbrs	r24, 5
    7916:	fc cf       	rjmp	.-8      	; 0x7910 <uploadFile+0x102>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7918:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    791c:	10 92 a0 08 	sts	0x08A0, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7920:	80 91 a1 08 	lds	r24, 0x08A1
    7924:	85 ff       	sbrs	r24, 5
    7926:	fc cf       	rjmp	.-8      	; 0x7920 <uploadFile+0x112>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7928:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    792c:	10 92 a0 08 	sts	0x08A0, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7930:	80 91 a1 08 	lds	r24, 0x08A1
    7934:	85 ff       	sbrs	r24, 5
    7936:	fc cf       	rjmp	.-8      	; 0x7930 <uploadFile+0x122>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7938:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    793c:	10 92 a0 08 	sts	0x08A0, r1
        Debug_SendByte(0);
        Debug_SendByte(0);
        Debug_SendByte(0);
        Debug_SendByte(0);
        okToCloseUploadFile = true;
    7940:	81 e0       	ldi	r24, 0x01	; 1
    7942:	80 93 77 34 	sts	0x3477, r24
        while(okToCloseUploadFile);
    7946:	80 91 77 34 	lds	r24, 0x3477
    794a:	88 23       	and	r24, r24
    794c:	e1 f7       	brne	.-8      	; 0x7946 <uploadFile+0x138>
        uploading = false;
    794e:	10 92 7b 34 	sts	0x347B, r1
        okToUpload = false;
    7952:	10 92 7a 34 	sts	0x347A, r1
    7956:	fe c0       	rjmp	.+508    	; 0x7b54 <uploadFile+0x346>
        return true;
    }

    Debug_SendByte((uploadFileSize >> 24) & 0xFF);
    7958:	20 91 84 34 	lds	r18, 0x3484
    795c:	30 91 85 34 	lds	r19, 0x3485
    7960:	40 91 86 34 	lds	r20, 0x3486
    7964:	50 91 87 34 	lds	r21, 0x3487
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7968:	80 91 a1 08 	lds	r24, 0x08A1
    796c:	85 ff       	sbrs	r24, 5
    796e:	fc cf       	rjmp	.-8      	; 0x7968 <uploadFile+0x15a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7970:	80 91 68 06 	lds	r24, 0x0668
    7974:	85 2f       	mov	r24, r21
    7976:	99 27       	eor	r25, r25
    7978:	aa 27       	eor	r26, r26
    797a:	bb 27       	eor	r27, r27
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    797c:	80 93 a0 08 	sts	0x08A0, r24
    Debug_SendByte((uploadFileSize >> 16) & 0xFF);
    7980:	20 91 84 34 	lds	r18, 0x3484
    7984:	30 91 85 34 	lds	r19, 0x3485
    7988:	40 91 86 34 	lds	r20, 0x3486
    798c:	50 91 87 34 	lds	r21, 0x3487
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7990:	80 91 a1 08 	lds	r24, 0x08A1
    7994:	85 ff       	sbrs	r24, 5
    7996:	fc cf       	rjmp	.-8      	; 0x7990 <uploadFile+0x182>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7998:	80 91 68 06 	lds	r24, 0x0668
    799c:	ca 01       	movw	r24, r20
    799e:	aa 27       	eor	r26, r26
    79a0:	bb 27       	eor	r27, r27
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    79a2:	80 93 a0 08 	sts	0x08A0, r24
    Debug_SendByte((uploadFileSize >>  8) & 0xFF);
    79a6:	20 91 84 34 	lds	r18, 0x3484
    79aa:	30 91 85 34 	lds	r19, 0x3485
    79ae:	40 91 86 34 	lds	r20, 0x3486
    79b2:	50 91 87 34 	lds	r21, 0x3487
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    79b6:	80 91 a1 08 	lds	r24, 0x08A1
    79ba:	85 ff       	sbrs	r24, 5
    79bc:	fc cf       	rjmp	.-8      	; 0x79b6 <uploadFile+0x1a8>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    79be:	80 91 68 06 	lds	r24, 0x0668
    79c2:	bb 27       	eor	r27, r27
    79c4:	a5 2f       	mov	r26, r21
    79c6:	94 2f       	mov	r25, r20
    79c8:	83 2f       	mov	r24, r19
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    79ca:	80 93 a0 08 	sts	0x08A0, r24
    Debug_SendByte((uploadFileSize >>  0) & 0xFF);
    79ce:	20 91 84 34 	lds	r18, 0x3484
    79d2:	30 91 85 34 	lds	r19, 0x3485
    79d6:	40 91 86 34 	lds	r20, 0x3486
    79da:	50 91 87 34 	lds	r21, 0x3487
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    79de:	80 91 a1 08 	lds	r24, 0x08A1
    79e2:	85 ff       	sbrs	r24, 5
    79e4:	fc cf       	rjmp	.-8      	; 0x79de <uploadFile+0x1d0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    79e6:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    79ea:	20 93 a0 08 	sts	0x08A0, r18

    numberOfPacketsToUpload = uploadFileSize /  1000;
    79ee:	60 91 84 34 	lds	r22, 0x3484
    79f2:	70 91 85 34 	lds	r23, 0x3485
    79f6:	80 91 86 34 	lds	r24, 0x3486
    79fa:	90 91 87 34 	lds	r25, 0x3487
    79fe:	28 ee       	ldi	r18, 0xE8	; 232
    7a00:	33 e0       	ldi	r19, 0x03	; 3
    7a02:	40 e0       	ldi	r20, 0x00	; 0
    7a04:	50 e0       	ldi	r21, 0x00	; 0
    7a06:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    7a0a:	c9 01       	movw	r24, r18
    7a0c:	da 01       	movw	r26, r20
    7a0e:	80 93 8c 34 	sts	0x348C, r24
    7a12:	90 93 8d 34 	sts	0x348D, r25
    7a16:	a0 93 8e 34 	sts	0x348E, r26
    7a1a:	b0 93 8f 34 	sts	0x348F, r27
    leftOverBytesToUpload   = uploadFileSize %  1000;
    7a1e:	60 91 84 34 	lds	r22, 0x3484
    7a22:	70 91 85 34 	lds	r23, 0x3485
    7a26:	80 91 86 34 	lds	r24, 0x3486
    7a2a:	90 91 87 34 	lds	r25, 0x3487
    7a2e:	28 ee       	ldi	r18, 0xE8	; 232
    7a30:	33 e0       	ldi	r19, 0x03	; 3
    7a32:	40 e0       	ldi	r20, 0x00	; 0
    7a34:	50 e0       	ldi	r21, 0x00	; 0
    7a36:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    7a3a:	9b 01       	movw	r18, r22
    7a3c:	ac 01       	movw	r20, r24
    7a3e:	20 93 90 34 	sts	0x3490, r18
    7a42:	30 93 91 34 	sts	0x3491, r19
    7a46:	40 93 92 34 	sts	0x3492, r20
    7a4a:	50 93 93 34 	sts	0x3493, r21
    7a4e:	aa 24       	eor	r10, r10
    7a50:	bb 24       	eor	r11, r11
    7a52:	65 01       	movw	r12, r10
    7a54:	ee 24       	eor	r14, r14
    7a56:	ff 24       	eor	r15, r15
    7a58:	87 01       	movw	r16, r14

    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
    7a5a:	99 24       	eor	r9, r9
    7a5c:	93 94       	inc	r9
    7a5e:	33 c0       	rjmp	.+102    	; 0x7ac6 <uploadFile+0x2b8>

    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;

    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
    7a60:	10 92 7f 34 	sts	0x347F, r1
        okToFillUploadFileBuffer = true;
    7a64:	90 92 7e 34 	sts	0x347E, r9

        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    7a68:	20 91 8c 34 	lds	r18, 0x348C
    7a6c:	30 91 8d 34 	lds	r19, 0x348D
    7a70:	40 91 8e 34 	lds	r20, 0x348E
    7a74:	50 91 8f 34 	lds	r21, 0x348F
    7a78:	c8 01       	movw	r24, r16
    7a7a:	b7 01       	movw	r22, r14
    7a7c:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    7a80:	20 93 6c 34 	sts	0x346C, r18
        while(!uploadFileBufferFull);
    7a84:	80 91 7f 34 	lds	r24, 0x347F
    7a88:	88 23       	and	r24, r24
    7a8a:	e1 f3       	breq	.-8      	; 0x7a84 <uploadFile+0x276>
    7a8c:	e8 e4       	ldi	r30, 0x48	; 72
    7a8e:	f9 e3       	ldi	r31, 0x39	; 57
            for(uint16_t j = 0; j <  uploadChunkSize; j++){
                Debug_SendByte(uploadFileBuffer[j]);
    7a90:	90 81       	ld	r25, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7a92:	80 91 a1 08 	lds	r24, 0x08A1
    7a96:	85 ff       	sbrs	r24, 5
    7a98:	fc cf       	rjmp	.-8      	; 0x7a92 <uploadFile+0x284>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7a9a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7a9e:	90 93 a0 08 	sts	0x08A0, r25
    7aa2:	31 96       	adiw	r30, 0x01	; 1
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;

        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
        while(!uploadFileBufferFull);
            for(uint16_t j = 0; j <  uploadChunkSize; j++){
    7aa4:	9d e3       	ldi	r25, 0x3D	; 61
    7aa6:	e0 33       	cpi	r30, 0x30	; 48
    7aa8:	f9 07       	cpc	r31, r25
    7aaa:	91 f7       	brne	.-28     	; 0x7a90 <uploadFile+0x282>
    Debug_SendByte((uploadFileSize >>  0) & 0xFF);

    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;

    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    7aac:	08 94       	sec
    7aae:	a1 1c       	adc	r10, r1
    7ab0:	b1 1c       	adc	r11, r1
    7ab2:	c1 1c       	adc	r12, r1
    7ab4:	d1 1c       	adc	r13, r1
    7ab6:	84 e6       	ldi	r24, 0x64	; 100
    7ab8:	90 e0       	ldi	r25, 0x00	; 0
    7aba:	a0 e0       	ldi	r26, 0x00	; 0
    7abc:	b0 e0       	ldi	r27, 0x00	; 0
    7abe:	e8 0e       	add	r14, r24
    7ac0:	f9 1e       	adc	r15, r25
    7ac2:	0a 1f       	adc	r16, r26
    7ac4:	1b 1f       	adc	r17, r27
    7ac6:	80 91 8c 34 	lds	r24, 0x348C
    7aca:	90 91 8d 34 	lds	r25, 0x348D
    7ace:	a0 91 8e 34 	lds	r26, 0x348E
    7ad2:	b0 91 8f 34 	lds	r27, 0x348F
    7ad6:	a8 16       	cp	r10, r24
    7ad8:	b9 06       	cpc	r11, r25
    7ada:	ca 06       	cpc	r12, r26
    7adc:	db 06       	cpc	r13, r27
    7ade:	08 f4       	brcc	.+2      	; 0x7ae2 <uploadFile+0x2d4>
    7ae0:	bf cf       	rjmp	.-130    	; 0x7a60 <uploadFile+0x252>
        while(!uploadFileBufferFull);
            for(uint16_t j = 0; j <  uploadChunkSize; j++){
                Debug_SendByte(uploadFileBuffer[j]);
            }
    }
    uploadFileBufferFull = false;
    7ae2:	10 92 7f 34 	sts	0x347F, r1
    okToFillUploadFileBuffer = true;
    7ae6:	81 e0       	ldi	r24, 0x01	; 1
    7ae8:	80 93 7e 34 	sts	0x347E, r24
    while(!uploadFileBufferFull);
    7aec:	80 91 7f 34 	lds	r24, 0x347F
    7af0:	88 23       	and	r24, r24
    7af2:	e1 f3       	breq	.-8      	; 0x7aec <uploadFile+0x2de>
    7af4:	e8 e4       	ldi	r30, 0x48	; 72
    7af6:	f9 e3       	ldi	r31, 0x39	; 57
    7af8:	20 e0       	ldi	r18, 0x00	; 0
    7afa:	30 e0       	ldi	r19, 0x00	; 0
    7afc:	40 e0       	ldi	r20, 0x00	; 0
    7afe:	50 e0       	ldi	r21, 0x00	; 0
    7b00:	0e c0       	rjmp	.+28     	; 0x7b1e <uploadFile+0x310>
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
        Debug_SendByte(uploadFileBuffer[j]);
    7b02:	90 81       	ld	r25, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7b04:	80 91 a1 08 	lds	r24, 0x08A1
    7b08:	85 ff       	sbrs	r24, 5
    7b0a:	fc cf       	rjmp	.-8      	; 0x7b04 <uploadFile+0x2f6>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7b0c:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7b10:	90 93 a0 08 	sts	0x08A0, r25
    7b14:	2f 5f       	subi	r18, 0xFF	; 255
    7b16:	3f 4f       	sbci	r19, 0xFF	; 255
    7b18:	4f 4f       	sbci	r20, 0xFF	; 255
    7b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b1c:	31 96       	adiw	r30, 0x01	; 1
            }
    }
    uploadFileBufferFull = false;
    okToFillUploadFileBuffer = true;
    while(!uploadFileBufferFull);
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    7b1e:	80 91 90 34 	lds	r24, 0x3490
    7b22:	90 91 91 34 	lds	r25, 0x3491
    7b26:	a0 91 92 34 	lds	r26, 0x3492
    7b2a:	b0 91 93 34 	lds	r27, 0x3493
    7b2e:	28 17       	cp	r18, r24
    7b30:	39 07       	cpc	r19, r25
    7b32:	4a 07       	cpc	r20, r26
    7b34:	5b 07       	cpc	r21, r27
    7b36:	28 f3       	brcs	.-54     	; 0x7b02 <uploadFile+0x2f4>
        Debug_SendByte(uploadFileBuffer[j]);
    }

    okToCloseUploadFile = true;
    7b38:	81 e0       	ldi	r24, 0x01	; 1
    7b3a:	80 93 77 34 	sts	0x3477, r24
    while(okToCloseUploadFile);
    7b3e:	80 91 77 34 	lds	r24, 0x3477
    7b42:	88 23       	and	r24, r24
    7b44:	e1 f7       	brne	.-8      	; 0x7b3e <uploadFile+0x330>
    uploading = false;
    7b46:	10 92 7b 34 	sts	0x347B, r1
    okToUpload = false;
    7b4a:	10 92 7a 34 	sts	0x347A, r1
    uploadPercentBS = 100;
    7b4e:	84 e6       	ldi	r24, 0x64	; 100
    7b50:	80 93 6c 34 	sts	0x346C, r24
    7b54:	81 e0       	ldi	r24, 0x01	; 1
    return true;
}
    7b56:	df 91       	pop	r29
    7b58:	cf 91       	pop	r28
    7b5a:	1f 91       	pop	r17
    7b5c:	0f 91       	pop	r16
    7b5e:	ff 90       	pop	r15
    7b60:	ef 90       	pop	r14
    7b62:	df 90       	pop	r13
    7b64:	cf 90       	pop	r12
    7b66:	bf 90       	pop	r11
    7b68:	af 90       	pop	r10
    7b6a:	9f 90       	pop	r9
    7b6c:	08 95       	ret

00007b6e <eraseFile>:

bool eraseFile(void){
    7b6e:	ff 92       	push	r15
    7b70:	0f 93       	push	r16
    7b72:	1f 93       	push	r17
    7b74:	cf 93       	push	r28
    7b76:	df 93       	push	r29
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7b78:	80 91 a1 08 	lds	r24, 0x08A1
    7b7c:	85 ff       	sbrs	r24, 5
    7b7e:	fc cf       	rjmp	.-8      	; 0x7b78 <eraseFile+0xa>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7b80:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7b84:	85 e4       	ldi	r24, 0x45	; 69
    7b86:	80 93 a0 08 	sts	0x08A0, r24
    7b8a:	ff 24       	eor	r15, r15
    7b8c:	10 e0       	ldi	r17, 0x00	; 0
    7b8e:	00 e0       	ldi	r16, 0x00	; 0
    7b90:	c6 e6       	ldi	r28, 0x66	; 102
    7b92:	de e0       	ldi	r29, 0x0E	; 14
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    Debug_SendByte('E');
    while(true){
        if(Debug_CharReadyToRead()){
    7b94:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    7b98:	88 23       	and	r24, r24
    7b9a:	09 f4       	brne	.+2      	; 0x7b9e <eraseFile+0x30>
    7b9c:	4b c0       	rjmp	.+150    	; 0x7c34 <eraseFile+0xc6>
            if(commandCounter == 0){
    7b9e:	11 23       	and	r17, r17
    7ba0:	71 f4       	brne	.+28     	; 0x7bbe <eraseFile+0x50>
                numBytesToRead = Debug_GetByte(false);
    7ba2:	80 e0       	ldi	r24, 0x00	; 0
    7ba4:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    7ba8:	08 2f       	mov	r16, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7baa:	80 91 a1 08 	lds	r24, 0x08A1
    7bae:	85 ff       	sbrs	r24, 5
    7bb0:	fc cf       	rjmp	.-8      	; 0x7baa <eraseFile+0x3c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7bb2:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7bb6:	00 93 a0 08 	sts	0x08A0, r16
    7bba:	11 e0       	ldi	r17, 0x01	; 1
    7bbc:	3b c0       	rjmp	.+118    	; 0x7c34 <eraseFile+0xc6>
                Debug_SendByte(numBytesToRead);
                commandCounter++;
            } else {
                fileToErase[commandCounter-1] = Debug_GetByte(false);
    7bbe:	80 e0       	ldi	r24, 0x00	; 0
    7bc0:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    7bc4:	98 2f       	mov	r25, r24
    7bc6:	e1 2f       	mov	r30, r17
    7bc8:	f0 e0       	ldi	r31, 0x00	; 0
    7bca:	ed 55       	subi	r30, 0x5D	; 93
    7bcc:	fa 4a       	sbci	r31, 0xAA	; 170
    7bce:	80 83       	st	Z, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7bd0:	80 91 a1 08 	lds	r24, 0x08A1
    7bd4:	85 ff       	sbrs	r24, 5
    7bd6:	fc cf       	rjmp	.-8      	; 0x7bd0 <eraseFile+0x62>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7bd8:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7bdc:	90 93 a0 08 	sts	0x08A0, r25
                Debug_SendByte(fileToErase[commandCounter-1]);
                commandCounter++;
    7be0:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    7be2:	80 2f       	mov	r24, r16
    7be4:	90 e0       	ldi	r25, 0x00	; 0
    7be6:	01 96       	adiw	r24, 0x01	; 1
    7be8:	e1 2f       	mov	r30, r17
    7bea:	f0 e0       	ldi	r31, 0x00	; 0
    7bec:	e8 17       	cp	r30, r24
    7bee:	f9 07       	cpc	r31, r25
    7bf0:	09 f5       	brne	.+66     	; 0x7c34 <eraseFile+0xc6>
                    fileToErase[numBytesToRead+1] = 0;
    7bf2:	ec 55       	subi	r30, 0x5C	; 92
    7bf4:	fa 4a       	sbci	r31, 0xAA	; 170
    7bf6:	10 82       	st	Z, r1
                    okToEraseFile = true;
    7bf8:	81 e0       	ldi	r24, 0x01	; 1
    7bfa:	80 93 79 34 	sts	0x3479, r24
                    while(okToEraseFile);
    7bfe:	80 91 79 34 	lds	r24, 0x3479
    7c02:	88 23       	and	r24, r24
    7c04:	e1 f7       	brne	.-8      	; 0x7bfe <eraseFile+0x90>
                    if(eraseFileReturn == FR_OK){
    7c06:	80 91 c2 4c 	lds	r24, 0x4CC2
    7c0a:	88 23       	and	r24, r24
    7c0c:	41 f4       	brne	.+16     	; 0x7c1e <eraseFile+0xb0>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7c0e:	80 91 a1 08 	lds	r24, 0x08A1
    7c12:	85 ff       	sbrs	r24, 5
    7c14:	fc cf       	rjmp	.-8      	; 0x7c0e <eraseFile+0xa0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7c16:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7c1a:	84 e5       	ldi	r24, 0x54	; 84
    7c1c:	07 c0       	rjmp	.+14     	; 0x7c2c <eraseFile+0xbe>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7c1e:	80 91 a1 08 	lds	r24, 0x08A1
    7c22:	85 ff       	sbrs	r24, 5
    7c24:	fc cf       	rjmp	.-8      	; 0x7c1e <eraseFile+0xb0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7c26:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7c2a:	86 e4       	ldi	r24, 0x46	; 70
    7c2c:	80 93 a0 08 	sts	0x08A0, r24
    7c30:	81 e0       	ldi	r24, 0x01	; 1
    7c32:	09 c0       	rjmp	.+18     	; 0x7c46 <eraseFile+0xd8>
    7c34:	ce 01       	movw	r24, r28
    7c36:	01 97       	sbiw	r24, 0x01	; 1
    7c38:	f1 f7       	brne	.-4      	; 0x7c36 <eraseFile+0xc8>
                    }
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    7c3a:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    7c3c:	85 e6       	ldi	r24, 0x65	; 101
    7c3e:	f8 16       	cp	r15, r24
    7c40:	09 f0       	breq	.+2      	; 0x7c44 <eraseFile+0xd6>
    7c42:	a8 cf       	rjmp	.-176    	; 0x7b94 <eraseFile+0x26>
    7c44:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    7c46:	df 91       	pop	r29
    7c48:	cf 91       	pop	r28
    7c4a:	1f 91       	pop	r17
    7c4c:	0f 91       	pop	r16
    7c4e:	ff 90       	pop	r15
    7c50:	08 95       	ret

00007c52 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    7c52:	ef 92       	push	r14
    7c54:	ff 92       	push	r15
    7c56:	0f 93       	push	r16
    7c58:	1f 93       	push	r17
    7c5a:	cf 93       	push	r28
    7c5c:	df 93       	push	r29
    7c5e:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    7c60:	60 e3       	ldi	r22, 0x30	; 48
    7c62:	71 e5       	ldi	r23, 0x51	; 81
    7c64:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
    7c68:	60 e0       	ldi	r22, 0x00	; 0
    7c6a:	70 e0       	ldi	r23, 0x00	; 0
    7c6c:	3b c0       	rjmp	.+118    	; 0x7ce4 <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7c6e:	e0 90 32 59 	lds	r14, 0x5932
    7c72:	f0 90 33 59 	lds	r15, 0x5933
    7c76:	00 91 34 59 	lds	r16, 0x5934
    7c7a:	10 91 35 59 	lds	r17, 0x5935
    7c7e:	20 91 32 59 	lds	r18, 0x5932
    7c82:	30 91 33 59 	lds	r19, 0x5933
    7c86:	40 91 34 59 	lds	r20, 0x5934
    7c8a:	50 91 35 59 	lds	r21, 0x5935
    7c8e:	30 70       	andi	r19, 0x00	; 0
    7c90:	40 70       	andi	r20, 0x00	; 0
    7c92:	50 70       	andi	r21, 0x00	; 0
    7c94:	fe 01       	movw	r30, r28
    7c96:	e6 0f       	add	r30, r22
    7c98:	f7 1f       	adc	r31, r23
    7c9a:	80 81       	ld	r24, Z
    7c9c:	90 e0       	ldi	r25, 0x00	; 0
    7c9e:	a0 e0       	ldi	r26, 0x00	; 0
    7ca0:	b0 e0       	ldi	r27, 0x00	; 0
    7ca2:	28 27       	eor	r18, r24
    7ca4:	39 27       	eor	r19, r25
    7ca6:	4a 27       	eor	r20, r26
    7ca8:	5b 27       	eor	r21, r27
    7caa:	22 0f       	add	r18, r18
    7cac:	33 1f       	adc	r19, r19
    7cae:	22 0f       	add	r18, r18
    7cb0:	33 1f       	adc	r19, r19
    7cb2:	21 5e       	subi	r18, 0xE1	; 225
    7cb4:	32 4d       	sbci	r19, 0xD2	; 210
    7cb6:	ef 2c       	mov	r14, r15
    7cb8:	f0 2e       	mov	r15, r16
    7cba:	01 2f       	mov	r16, r17
    7cbc:	11 27       	eor	r17, r17
    7cbe:	f9 01       	movw	r30, r18
    7cc0:	80 81       	ld	r24, Z
    7cc2:	91 81       	ldd	r25, Z+1	; 0x01
    7cc4:	a2 81       	ldd	r26, Z+2	; 0x02
    7cc6:	b3 81       	ldd	r27, Z+3	; 0x03
    7cc8:	e8 26       	eor	r14, r24
    7cca:	f9 26       	eor	r15, r25
    7ccc:	0a 27       	eor	r16, r26
    7cce:	1b 27       	eor	r17, r27
    7cd0:	e0 92 32 59 	sts	0x5932, r14
    7cd4:	f0 92 33 59 	sts	0x5933, r15
    7cd8:	00 93 34 59 	sts	0x5934, r16
    7cdc:	10 93 35 59 	sts	0x5935, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    7ce0:	6f 5f       	subi	r22, 0xFF	; 255
    7ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ce4:	fe 01       	movw	r30, r28
    7ce6:	01 90       	ld	r0, Z+
    7ce8:	00 20       	and	r0, r0
    7cea:	e9 f7       	brne	.-6      	; 0x7ce6 <SD_WriteString+0x94>
    7cec:	31 97       	sbiw	r30, 0x01	; 1
    7cee:	ec 1b       	sub	r30, r28
    7cf0:	fd 0b       	sbc	r31, r29
    7cf2:	6e 17       	cp	r22, r30
    7cf4:	7f 07       	cpc	r23, r31
    7cf6:	08 f4       	brcc	.+2      	; 0x7cfa <SD_WriteString+0xa8>
    7cf8:	ba cf       	rjmp	.-140    	; 0x7c6e <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    7cfa:	df 91       	pop	r29
    7cfc:	cf 91       	pop	r28
    7cfe:	1f 91       	pop	r17
    7d00:	0f 91       	pop	r16
    7d02:	ff 90       	pop	r15
    7d04:	ef 90       	pop	r14
    7d06:	08 95       	ret

00007d08 <SD_WriteAirSampleMinute>:

	f_sync(&Log_File);

}

void SD_WriteAirSampleMinute(void){
    7d08:	0f 93       	push	r16
    7d0a:	1f 93       	push	r17
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7d0c:	8f ef       	ldi	r24, 0xFF	; 255
    7d0e:	9f ef       	ldi	r25, 0xFF	; 255
    7d10:	af ef       	ldi	r26, 0xFF	; 255
    7d12:	bf ef       	ldi	r27, 0xFF	; 255
    7d14:	80 93 32 59 	sts	0x5932, r24
    7d18:	90 93 33 59 	sts	0x5933, r25
    7d1c:	a0 93 34 59 	sts	0x5934, r26
    7d20:	b0 93 35 59 	sts	0x5935, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7d24:	6c e4       	ldi	r22, 0x4C	; 76
    7d26:	74 e7       	ldi	r23, 0x74	; 116
    7d28:	8e ed       	ldi	r24, 0xDE	; 222
    7d2a:	90 eb       	ldi	r25, 0xB0	; 176
    7d2c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(61);				// record size
    7d30:	6d e3       	ldi	r22, 0x3D	; 61
    7d32:	70 e0       	ldi	r23, 0x00	; 0
    7d34:	80 e0       	ldi	r24, 0x00	; 0
    7d36:	90 e0       	ldi	r25, 0x00	; 0
    7d38:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 		// record type
    7d3c:	83 e0       	ldi	r24, 0x03	; 3
    7d3e:	90 e0       	ldi	r25, 0x00	; 0
    7d40:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    7d44:	60 91 06 34 	lds	r22, 0x3406
    7d48:	70 91 07 34 	lds	r23, 0x3407
    7d4c:	80 91 08 34 	lds	r24, 0x3408
    7d50:	90 91 09 34 	lds	r25, 0x3409
    7d54:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    7d58:	60 e0       	ldi	r22, 0x00	; 0
    7d5a:	70 e8       	ldi	r23, 0x80	; 128
    7d5c:	87 e9       	ldi	r24, 0x97	; 151
    7d5e:	96 e0       	ldi	r25, 0x06	; 6
    7d60:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(1);												// number of samples
    7d64:	61 e0       	ldi	r22, 0x01	; 1
    7d66:	70 e0       	ldi	r23, 0x00	; 0
    7d68:	80 e0       	ldi	r24, 0x00	; 0
    7d6a:	90 e0       	ldi	r25, 0x00	; 0
    7d6c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteString("Air_Small");
    7d70:	83 e3       	ldi	r24, 0x33	; 51
    7d72:	90 e2       	ldi	r25, 0x20	; 32
    7d74:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7d78:	89 e0       	ldi	r24, 0x09	; 9
    7d7a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7d7e:	0d e3       	ldi	r16, 0x3D	; 61
    7d80:	10 e2       	ldi	r17, 0x20	; 32
    7d82:	c8 01       	movw	r24, r16
    7d84:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7d88:	8a e0       	ldi	r24, 0x0A	; 10
    7d8a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Air_Large");
    7d8e:	80 e4       	ldi	r24, 0x40	; 64
    7d90:	90 e2       	ldi	r25, 0x20	; 32
    7d92:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7d96:	89 e0       	ldi	r24, 0x09	; 9
    7d98:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7d9c:	c8 01       	movw	r24, r16
    7d9e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7da2:	8a e0       	ldi	r24, 0x0A	; 10
    7da4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_Write8(0x00);
    7da8:	80 e0       	ldi	r24, 0x00	; 0
    7daa:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_Write32(airCount[0]);
    7dae:	60 91 af 4b 	lds	r22, 0x4BAF
    7db2:	70 91 b0 4b 	lds	r23, 0x4BB0
    7db6:	80 91 b1 4b 	lds	r24, 0x4BB1
    7dba:	90 91 b2 4b 	lds	r25, 0x4BB2
    7dbe:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(airCount[1]);
    7dc2:	60 91 b3 4b 	lds	r22, 0x4BB3
    7dc6:	70 91 b4 4b 	lds	r23, 0x4BB4
    7dca:	80 91 b5 4b 	lds	r24, 0x4BB5
    7dce:	90 91 b6 4b 	lds	r25, 0x4BB6
    7dd2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteCRC();			// CRC
    7dd6:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>

	f_sync(&Log_File);
    7dda:	80 e3       	ldi	r24, 0x30	; 48
    7ddc:	91 e5       	ldi	r25, 0x51	; 81
    7dde:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    7de2:	1f 91       	pop	r17
    7de4:	0f 91       	pop	r16
    7de6:	08 95       	ret

00007de8 <SD_WriteAirSampleSecond>:

	f_sync(&Log_File);

}

void SD_WriteAirSampleSecond(void){
    7de8:	0f 93       	push	r16
    7dea:	1f 93       	push	r17
    7dec:	8f ef       	ldi	r24, 0xFF	; 255
    7dee:	9f ef       	ldi	r25, 0xFF	; 255
    7df0:	af ef       	ldi	r26, 0xFF	; 255
    7df2:	bf ef       	ldi	r27, 0xFF	; 255
    7df4:	80 93 32 59 	sts	0x5932, r24
    7df8:	90 93 33 59 	sts	0x5933, r25
    7dfc:	a0 93 34 59 	sts	0x5934, r26
    7e00:	b0 93 35 59 	sts	0x5935, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7e04:	6c e4       	ldi	r22, 0x4C	; 76
    7e06:	74 e7       	ldi	r23, 0x74	; 116
    7e08:	8e ed       	ldi	r24, 0xDE	; 222
    7e0a:	90 eb       	ldi	r25, 0xB0	; 176
    7e0c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(105);				// record size
    7e10:	69 e6       	ldi	r22, 0x69	; 105
    7e12:	70 e0       	ldi	r23, 0x00	; 0
    7e14:	80 e0       	ldi	r24, 0x00	; 0
    7e16:	90 e0       	ldi	r25, 0x00	; 0
    7e18:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 		// record type
    7e1c:	83 e0       	ldi	r24, 0x03	; 3
    7e1e:	90 e0       	ldi	r25, 0x00	; 0
    7e20:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    7e24:	60 91 06 34 	lds	r22, 0x3406
    7e28:	70 91 07 34 	lds	r23, 0x3407
    7e2c:	80 91 08 34 	lds	r24, 0x3408
    7e30:	90 91 09 34 	lds	r25, 0x3409
    7e34:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_Write32(1843200);										// sample period (0.01667hz)
    7e38:	60 e0       	ldi	r22, 0x00	; 0
    7e3a:	70 e2       	ldi	r23, 0x20	; 32
    7e3c:	8c e1       	ldi	r24, 0x1C	; 28
    7e3e:	90 e0       	ldi	r25, 0x00	; 0
    7e40:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(1);												// number of samples
    7e44:	61 e0       	ldi	r22, 0x01	; 1
    7e46:	70 e0       	ldi	r23, 0x00	; 0
    7e48:	80 e0       	ldi	r24, 0x00	; 0
    7e4a:	90 e0       	ldi	r25, 0x00	; 0
    7e4c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteString("Air_1");
    7e50:	8a e4       	ldi	r24, 0x4A	; 74
    7e52:	90 e2       	ldi	r25, 0x20	; 32
    7e54:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7e58:	89 e0       	ldi	r24, 0x09	; 9
    7e5a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7e5e:	0d e3       	ldi	r16, 0x3D	; 61
    7e60:	10 e2       	ldi	r17, 0x20	; 32
    7e62:	c8 01       	movw	r24, r16
    7e64:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7e68:	8a e0       	ldi	r24, 0x0A	; 10
    7e6a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Air_2");
    7e6e:	80 e5       	ldi	r24, 0x50	; 80
    7e70:	90 e2       	ldi	r25, 0x20	; 32
    7e72:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7e76:	89 e0       	ldi	r24, 0x09	; 9
    7e78:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7e7c:	c8 01       	movw	r24, r16
    7e7e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7e82:	8a e0       	ldi	r24, 0x0A	; 10
    7e84:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Air_3");
    7e88:	86 e5       	ldi	r24, 0x56	; 86
    7e8a:	90 e2       	ldi	r25, 0x20	; 32
    7e8c:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7e90:	89 e0       	ldi	r24, 0x09	; 9
    7e92:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7e96:	c8 01       	movw	r24, r16
    7e98:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7e9c:	8a e0       	ldi	r24, 0x0A	; 10
    7e9e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Air_4");
    7ea2:	8c e5       	ldi	r24, 0x5C	; 92
    7ea4:	90 e2       	ldi	r25, 0x20	; 32
    7ea6:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7eaa:	89 e0       	ldi	r24, 0x09	; 9
    7eac:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7eb0:	c8 01       	movw	r24, r16
    7eb2:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7eb6:	8a e0       	ldi	r24, 0x0A	; 10
    7eb8:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Air_5");
    7ebc:	82 e6       	ldi	r24, 0x62	; 98
    7ebe:	90 e2       	ldi	r25, 0x20	; 32
    7ec0:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7ec4:	89 e0       	ldi	r24, 0x09	; 9
    7ec6:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7eca:	c8 01       	movw	r24, r16
    7ecc:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7ed0:	8a e0       	ldi	r24, 0x0A	; 10
    7ed2:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Air_6");
    7ed6:	88 e6       	ldi	r24, 0x68	; 104
    7ed8:	90 e2       	ldi	r25, 0x20	; 32
    7eda:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    7ede:	89 e0       	ldi	r24, 0x09	; 9
    7ee0:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    7ee4:	c8 01       	movw	r24, r16
    7ee6:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    7eea:	8a e0       	ldi	r24, 0x0A	; 10
    7eec:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_Write8(0x00);
    7ef0:	80 e0       	ldi	r24, 0x00	; 0
    7ef2:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_Write32(airCount[0]);
    7ef6:	60 91 af 4b 	lds	r22, 0x4BAF
    7efa:	70 91 b0 4b 	lds	r23, 0x4BB0
    7efe:	80 91 b1 4b 	lds	r24, 0x4BB1
    7f02:	90 91 b2 4b 	lds	r25, 0x4BB2
    7f06:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(airCount[1]);
    7f0a:	60 91 b3 4b 	lds	r22, 0x4BB3
    7f0e:	70 91 b4 4b 	lds	r23, 0x4BB4
    7f12:	80 91 b5 4b 	lds	r24, 0x4BB5
    7f16:	90 91 b6 4b 	lds	r25, 0x4BB6
    7f1a:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(airCount[2]);
    7f1e:	60 91 b7 4b 	lds	r22, 0x4BB7
    7f22:	70 91 b8 4b 	lds	r23, 0x4BB8
    7f26:	80 91 b9 4b 	lds	r24, 0x4BB9
    7f2a:	90 91 ba 4b 	lds	r25, 0x4BBA
    7f2e:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(airCount[3]);
    7f32:	60 91 bb 4b 	lds	r22, 0x4BBB
    7f36:	70 91 bc 4b 	lds	r23, 0x4BBC
    7f3a:	80 91 bd 4b 	lds	r24, 0x4BBD
    7f3e:	90 91 be 4b 	lds	r25, 0x4BBE
    7f42:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(airCount[4]);
    7f46:	60 91 bf 4b 	lds	r22, 0x4BBF
    7f4a:	70 91 c0 4b 	lds	r23, 0x4BC0
    7f4e:	80 91 c1 4b 	lds	r24, 0x4BC1
    7f52:	90 91 c2 4b 	lds	r25, 0x4BC2
    7f56:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(airCount[5]);
    7f5a:	60 91 c3 4b 	lds	r22, 0x4BC3
    7f5e:	70 91 c4 4b 	lds	r23, 0x4BC4
    7f62:	80 91 c5 4b 	lds	r24, 0x4BC5
    7f66:	90 91 c6 4b 	lds	r25, 0x4BC6
    7f6a:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteCRC();			// CRC
    7f6e:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>

	f_sync(&Log_File);
    7f72:	80 e3       	ldi	r24, 0x30	; 48
    7f74:	91 e5       	ldi	r25, 0x51	; 81
    7f76:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    7f7a:	1f 91       	pop	r17
    7f7c:	0f 91       	pop	r16
    7f7e:	08 95       	ret

00007f80 <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    7f80:	1f 93       	push	r17
    7f82:	cf 93       	push	r28
    7f84:	df 93       	push	r29
    7f86:	18 2f       	mov	r17, r24
    7f88:	8f ef       	ldi	r24, 0xFF	; 255
    7f8a:	9f ef       	ldi	r25, 0xFF	; 255
    7f8c:	af ef       	ldi	r26, 0xFF	; 255
    7f8e:	bf ef       	ldi	r27, 0xFF	; 255
    7f90:	80 93 32 59 	sts	0x5932, r24
    7f94:	90 93 33 59 	sts	0x5933, r25
    7f98:	a0 93 34 59 	sts	0x5934, r26
    7f9c:	b0 93 35 59 	sts	0x5935, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7fa0:	6c e4       	ldi	r22, 0x4C	; 76
    7fa2:	74 e7       	ldi	r23, 0x74	; 116
    7fa4:	8e ed       	ldi	r24, 0xDE	; 222
    7fa6:	90 eb       	ldi	r25, 0xB0	; 176
    7fa8:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(244);				// record size
    7fac:	64 ef       	ldi	r22, 0xF4	; 244
    7fae:	70 e0       	ldi	r23, 0x00	; 0
    7fb0:	80 e0       	ldi	r24, 0x00	; 0
    7fb2:	90 e0       	ldi	r25, 0x00	; 0
    7fb4:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 		// record type
    7fb8:	83 e0       	ldi	r24, 0x03	; 3
    7fba:	90 e0       	ldi	r25, 0x00	; 0
    7fbc:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7fc0:	11 30       	cpi	r17, 0x01	; 1
    7fc2:	49 f4       	brne	.+18     	; 0x7fd6 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    7fc4:	60 91 fe 33 	lds	r22, 0x33FE
    7fc8:	70 91 ff 33 	lds	r23, 0x33FF
    7fcc:	80 91 00 34 	lds	r24, 0x3400
    7fd0:	90 91 01 34 	lds	r25, 0x3401
    7fd4:	08 c0       	rjmp	.+16     	; 0x7fe6 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    7fd6:	60 91 02 34 	lds	r22, 0x3402
    7fda:	70 91 03 34 	lds	r23, 0x3403
    7fde:	80 91 04 34 	lds	r24, 0x3404
    7fe2:	90 91 05 34 	lds	r25, 0x3405
    7fe6:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7fea:	60 e0       	ldi	r22, 0x00	; 0
    7fec:	70 e2       	ldi	r23, 0x20	; 32
    7fee:	8c e1       	ldi	r24, 0x1C	; 28
    7ff0:	90 e0       	ldi	r25, 0x00	; 0
    7ff2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(10);												// number of samples
    7ff6:	6a e0       	ldi	r22, 0x0A	; 10
    7ff8:	70 e0       	ldi	r23, 0x00	; 0
    7ffa:	80 e0       	ldi	r24, 0x00	; 0
    7ffc:	90 e0       	ldi	r25, 0x00	; 0
    7ffe:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteString("Light_Green");
    8002:	8e e6       	ldi	r24, 0x6E	; 110
    8004:	90 e2       	ldi	r25, 0x20	; 32
    8006:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    800a:	89 e0       	ldi	r24, 0x09	; 9
    800c:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    8010:	8d e3       	ldi	r24, 0x3D	; 61
    8012:	90 e2       	ldi	r25, 0x20	; 32
    8014:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    8018:	8a e0       	ldi	r24, 0x0A	; 10
    801a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Light_Red");
    801e:	8a e7       	ldi	r24, 0x7A	; 122
    8020:	90 e2       	ldi	r25, 0x20	; 32
    8022:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    8026:	89 e0       	ldi	r24, 0x09	; 9
    8028:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    802c:	8d e3       	ldi	r24, 0x3D	; 61
    802e:	90 e2       	ldi	r25, 0x20	; 32
    8030:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    8034:	8a e0       	ldi	r24, 0x0A	; 10
    8036:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Light_Blue");
    803a:	84 e8       	ldi	r24, 0x84	; 132
    803c:	90 e2       	ldi	r25, 0x20	; 32
    803e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    8042:	89 e0       	ldi	r24, 0x09	; 9
    8044:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    8048:	8d e3       	ldi	r24, 0x3D	; 61
    804a:	90 e2       	ldi	r25, 0x20	; 32
    804c:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    8050:	8a e0       	ldi	r24, 0x0A	; 10
    8052:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("Light_Clear");
    8056:	8f e8       	ldi	r24, 0x8F	; 143
    8058:	90 e2       	ldi	r25, 0x20	; 32
    805a:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    805e:	89 e0       	ldi	r24, 0x09	; 9
    8060:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("32");
    8064:	8d e3       	ldi	r24, 0x3D	; 61
    8066:	90 e2       	ldi	r25, 0x20	; 32
    8068:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    806c:	8a e0       	ldi	r24, 0x0A	; 10
    806e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_Write8(0x00);
    8072:	80 e0       	ldi	r24, 0x00	; 0
    8074:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	if(bufferNumber == 1){
    8078:	11 30       	cpi	r17, 0x01	; 1
    807a:	69 f4       	brne	.+26     	; 0x8096 <SD_WriteLightBuffer+0x116>
    807c:	c6 e3       	ldi	r28, 0x36	; 54
    807e:	dd e5       	ldi	r29, 0x5D	; 93
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    8080:	69 91       	ld	r22, Y+
    8082:	79 91       	ld	r23, Y+
    8084:	89 91       	ld	r24, Y+
    8086:	99 91       	ld	r25, Y+
    8088:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    808c:	8d e5       	ldi	r24, 0x5D	; 93
    808e:	c6 3d       	cpi	r28, 0xD6	; 214
    8090:	d8 07       	cpc	r29, r24
    8092:	b1 f7       	brne	.-20     	; 0x8080 <SD_WriteLightBuffer+0x100>
    8094:	0c c0       	rjmp	.+24     	; 0x80ae <SD_WriteLightBuffer+0x12e>
    8096:	cb e4       	ldi	r28, 0x4B	; 75
    8098:	d6 e4       	ldi	r29, 0x46	; 70
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    809a:	69 91       	ld	r22, Y+
    809c:	79 91       	ld	r23, Y+
    809e:	89 91       	ld	r24, Y+
    80a0:	99 91       	ld	r25, Y+
    80a2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    80a6:	86 e4       	ldi	r24, 0x46	; 70
    80a8:	cb 3e       	cpi	r28, 0xEB	; 235
    80aa:	d8 07       	cpc	r29, r24
    80ac:	b1 f7       	brne	.-20     	; 0x809a <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    80ae:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>

	f_sync(&Log_File);
    80b2:	80 e3       	ldi	r24, 0x30	; 48
    80b4:	91 e5       	ldi	r25, 0x51	; 81
    80b6:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    80ba:	df 91       	pop	r29
    80bc:	cf 91       	pop	r28
    80be:	1f 91       	pop	r17
    80c0:	08 95       	ret

000080c2 <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    80c2:	1f 93       	push	r17
    80c4:	18 2f       	mov	r17, r24
    80c6:	8f ef       	ldi	r24, 0xFF	; 255
    80c8:	9f ef       	ldi	r25, 0xFF	; 255
    80ca:	af ef       	ldi	r26, 0xFF	; 255
    80cc:	bf ef       	ldi	r27, 0xFF	; 255
    80ce:	80 93 32 59 	sts	0x5932, r24
    80d2:	90 93 33 59 	sts	0x5933, r25
    80d6:	a0 93 34 59 	sts	0x5934, r26
    80da:	b0 93 35 59 	sts	0x5935, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    80de:	6c e4       	ldi	r22, 0x4C	; 76
    80e0:	74 e7       	ldi	r23, 0x74	; 116
    80e2:	8e ed       	ldi	r24, 0xDE	; 222
    80e4:	90 eb       	ldi	r25, 0xB0	; 176
    80e6:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    80ea:	60 e1       	ldi	r22, 0x10	; 16
    80ec:	74 e0       	ldi	r23, 0x04	; 4
    80ee:	80 e0       	ldi	r24, 0x00	; 0
    80f0:	90 e0       	ldi	r25, 0x00	; 0
    80f2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 									// record type
    80f6:	83 e0       	ldi	r24, 0x03	; 3
    80f8:	90 e0       	ldi	r25, 0x00	; 0
    80fa:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    80fe:	11 30       	cpi	r17, 0x01	; 1
    8100:	49 f4       	brne	.+18     	; 0x8114 <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    8102:	60 91 f6 33 	lds	r22, 0x33F6
    8106:	70 91 f7 33 	lds	r23, 0x33F7
    810a:	80 91 f8 33 	lds	r24, 0x33F8
    810e:	90 91 f9 33 	lds	r25, 0x33F9
    8112:	08 c0       	rjmp	.+16     	; 0x8124 <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    8114:	60 91 fa 33 	lds	r22, 0x33FA
    8118:	70 91 fb 33 	lds	r23, 0x33FB
    811c:	80 91 fc 33 	lds	r24, 0x33FC
    8120:	90 91 fd 33 	lds	r25, 0x33FD
    8124:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    8128:	60 e0       	ldi	r22, 0x00	; 0
    812a:	71 e0       	ldi	r23, 0x01	; 1
    812c:	80 e0       	ldi	r24, 0x00	; 0
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    8134:	68 ee       	ldi	r22, 0xE8	; 232
    8136:	73 e0       	ldi	r23, 0x03	; 3
    8138:	80 e0       	ldi	r24, 0x00	; 0
    813a:	90 e0       	ldi	r25, 0x00	; 0
    813c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteString("Microphone");
    8140:	8b e9       	ldi	r24, 0x9B	; 155
    8142:	90 e2       	ldi	r25, 0x20	; 32
    8144:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    8148:	89 e0       	ldi	r24, 0x09	; 9
    814a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("8");
    814e:	86 ea       	ldi	r24, 0xA6	; 166
    8150:	90 e2       	ldi	r25, 0x20	; 32
    8152:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    8156:	8a e0       	ldi	r24, 0x0A	; 10
    8158:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_Write8(0x00);
    815c:	80 e0       	ldi	r24, 0x00	; 0
    815e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	if(bufferNumber == 1){
    8162:	11 30       	cpi	r17, 0x01	; 1
    8164:	19 f4       	brne	.+6      	; 0x816c <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    8166:	8d e1       	ldi	r24, 0x1D	; 29
    8168:	97 e4       	ldi	r25, 0x47	; 71
    816a:	02 c0       	rjmp	.+4      	; 0x8170 <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    816c:	8d ee       	ldi	r24, 0xED	; 237
    816e:	91 e4       	ldi	r25, 0x41	; 65
    8170:	68 ee       	ldi	r22, 0xE8	; 232
    8172:	73 e0       	ldi	r23, 0x03	; 3
    8174:	0e 94 81 2b 	call	0x5702	; 0x5702 <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    8178:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>

	f_sync(&Log_File);
    817c:	80 e3       	ldi	r24, 0x30	; 48
    817e:	91 e5       	ldi	r25, 0x51	; 81
    8180:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    8184:	1f 91       	pop	r17
    8186:	08 95       	ret

00008188 <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    8188:	1f 93       	push	r17
    818a:	cf 93       	push	r28
    818c:	df 93       	push	r29
    818e:	18 2f       	mov	r17, r24
    8190:	8f ef       	ldi	r24, 0xFF	; 255
    8192:	9f ef       	ldi	r25, 0xFF	; 255
    8194:	af ef       	ldi	r26, 0xFF	; 255
    8196:	bf ef       	ldi	r27, 0xFF	; 255
    8198:	80 93 32 59 	sts	0x5932, r24
    819c:	90 93 33 59 	sts	0x5933, r25
    81a0:	a0 93 34 59 	sts	0x5934, r26
    81a4:	b0 93 35 59 	sts	0x5935, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    81a8:	6c e4       	ldi	r22, 0x4C	; 76
    81aa:	74 e7       	ldi	r23, 0x74	; 116
    81ac:	8e ed       	ldi	r24, 0xDE	; 222
    81ae:	90 eb       	ldi	r25, 0xB0	; 176
    81b0:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(59);				// record size
    81b4:	6b e3       	ldi	r22, 0x3B	; 59
    81b6:	70 e0       	ldi	r23, 0x00	; 0
    81b8:	80 e0       	ldi	r24, 0x00	; 0
    81ba:	90 e0       	ldi	r25, 0x00	; 0
    81bc:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 		// record type
    81c0:	83 e0       	ldi	r24, 0x03	; 3
    81c2:	90 e0       	ldi	r25, 0x00	; 0
    81c4:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    81c8:	11 30       	cpi	r17, 0x01	; 1
    81ca:	49 f4       	brne	.+18     	; 0x81de <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    81cc:	60 91 ee 33 	lds	r22, 0x33EE
    81d0:	70 91 ef 33 	lds	r23, 0x33EF
    81d4:	80 91 f0 33 	lds	r24, 0x33F0
    81d8:	90 91 f1 33 	lds	r25, 0x33F1
    81dc:	08 c0       	rjmp	.+16     	; 0x81ee <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    81de:	60 91 f2 33 	lds	r22, 0x33F2
    81e2:	70 91 f3 33 	lds	r23, 0x33F3
    81e6:	80 91 f4 33 	lds	r24, 0x33F4
    81ea:	90 91 f5 33 	lds	r25, 0x33F5
    81ee:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    81f2:	60 e0       	ldi	r22, 0x00	; 0
    81f4:	70 e2       	ldi	r23, 0x20	; 32
    81f6:	8c e1       	ldi	r24, 0x1C	; 28
    81f8:	90 e0       	ldi	r25, 0x00	; 0
    81fa:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(10);												// number of samples
    81fe:	6a e0       	ldi	r22, 0x0A	; 10
    8200:	70 e0       	ldi	r23, 0x00	; 0
    8202:	80 e0       	ldi	r24, 0x00	; 0
    8204:	90 e0       	ldi	r25, 0x00	; 0
    8206:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteString("Pressure");
    820a:	88 ea       	ldi	r24, 0xA8	; 168
    820c:	90 e2       	ldi	r25, 0x20	; 32
    820e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    8212:	89 e0       	ldi	r24, 0x09	; 9
    8214:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("16");
    8218:	81 eb       	ldi	r24, 0xB1	; 177
    821a:	90 e2       	ldi	r25, 0x20	; 32
    821c:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    8220:	8a e0       	ldi	r24, 0x0A	; 10
    8222:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_Write8(0x00);
    8226:	80 e0       	ldi	r24, 0x00	; 0
    8228:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	if(bufferNumber == 1){
    822c:	11 30       	cpi	r17, 0x01	; 1
    822e:	59 f4       	brne	.+22     	; 0x8246 <SD_WritePressureBuffer+0xbe>
    8230:	c7 e4       	ldi	r28, 0x47	; 71
    8232:	dd e3       	ldi	r29, 0x3D	; 61
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(pressureBuffer1[i]);
    8234:	89 91       	ld	r24, Y+
    8236:	99 91       	ld	r25, Y+
    8238:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    823c:	8d e3       	ldi	r24, 0x3D	; 61
    823e:	cb 35       	cpi	r28, 0x5B	; 91
    8240:	d8 07       	cpc	r29, r24
    8242:	c1 f7       	brne	.-16     	; 0x8234 <SD_WritePressureBuffer+0xac>
    8244:	0a c0       	rjmp	.+20     	; 0x825a <SD_WritePressureBuffer+0xd2>
    8246:	cb e5       	ldi	r28, 0x5B	; 91
    8248:	dc e4       	ldi	r29, 0x4C	; 76
			SD_Write16(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(pressureBuffer2[i]);
    824a:	89 91       	ld	r24, Y+
    824c:	99 91       	ld	r25, Y+
    824e:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    8252:	8c e4       	ldi	r24, 0x4C	; 76
    8254:	cf 36       	cpi	r28, 0x6F	; 111
    8256:	d8 07       	cpc	r29, r24
    8258:	c1 f7       	brne	.-16     	; 0x824a <SD_WritePressureBuffer+0xc2>
			SD_Write16(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    825a:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>

	f_sync(&Log_File);
    825e:	80 e3       	ldi	r24, 0x30	; 48
    8260:	91 e5       	ldi	r25, 0x51	; 81
    8262:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    8266:	df 91       	pop	r29
    8268:	cf 91       	pop	r28
    826a:	1f 91       	pop	r17
    826c:	08 95       	ret

0000826e <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    826e:	1f 93       	push	r17
    8270:	cf 93       	push	r28
    8272:	df 93       	push	r29
    8274:	18 2f       	mov	r17, r24
    8276:	8f ef       	ldi	r24, 0xFF	; 255
    8278:	9f ef       	ldi	r25, 0xFF	; 255
    827a:	af ef       	ldi	r26, 0xFF	; 255
    827c:	bf ef       	ldi	r27, 0xFF	; 255
    827e:	80 93 32 59 	sts	0x5932, r24
    8282:	90 93 33 59 	sts	0x5933, r25
    8286:	a0 93 34 59 	sts	0x5934, r26
    828a:	b0 93 35 59 	sts	0x5935, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    828e:	6c e4       	ldi	r22, 0x4C	; 76
    8290:	74 e7       	ldi	r23, 0x74	; 116
    8292:	8e ed       	ldi	r24, 0xDE	; 222
    8294:	90 eb       	ldi	r25, 0xB0	; 176
    8296:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(59);				// record size
    829a:	6b e3       	ldi	r22, 0x3B	; 59
    829c:	70 e0       	ldi	r23, 0x00	; 0
    829e:	80 e0       	ldi	r24, 0x00	; 0
    82a0:	90 e0       	ldi	r25, 0x00	; 0
    82a2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 		// record type
    82a6:	83 e0       	ldi	r24, 0x03	; 3
    82a8:	90 e0       	ldi	r25, 0x00	; 0
    82aa:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    82ae:	11 30       	cpi	r17, 0x01	; 1
    82b0:	49 f4       	brne	.+18     	; 0x82c4 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    82b2:	60 91 e6 33 	lds	r22, 0x33E6
    82b6:	70 91 e7 33 	lds	r23, 0x33E7
    82ba:	80 91 e8 33 	lds	r24, 0x33E8
    82be:	90 91 e9 33 	lds	r25, 0x33E9
    82c2:	08 c0       	rjmp	.+16     	; 0x82d4 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    82c4:	60 91 ea 33 	lds	r22, 0x33EA
    82c8:	70 91 eb 33 	lds	r23, 0x33EB
    82cc:	80 91 ec 33 	lds	r24, 0x33EC
    82d0:	90 91 ed 33 	lds	r25, 0x33ED
    82d4:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    82d8:	60 e0       	ldi	r22, 0x00	; 0
    82da:	70 e2       	ldi	r23, 0x20	; 32
    82dc:	8c e1       	ldi	r24, 0x1C	; 28
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(10);												// number of samples
    82e4:	6a e0       	ldi	r22, 0x0A	; 10
    82e6:	70 e0       	ldi	r23, 0x00	; 0
    82e8:	80 e0       	ldi	r24, 0x00	; 0
    82ea:	90 e0       	ldi	r25, 0x00	; 0
    82ec:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>

	SD_WriteString("Humidity");
    82f0:	84 eb       	ldi	r24, 0xB4	; 180
    82f2:	90 e2       	ldi	r25, 0x20	; 32
    82f4:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    82f8:	89 e0       	ldi	r24, 0x09	; 9
    82fa:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("16");
    82fe:	81 eb       	ldi	r24, 0xB1	; 177
    8300:	90 e2       	ldi	r25, 0x20	; 32
    8302:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    8306:	8a e0       	ldi	r24, 0x0A	; 10
    8308:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_Write8(0x00);
    830c:	80 e0       	ldi	r24, 0x00	; 0
    830e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	if(bufferNumber == 1){
    8312:	11 30       	cpi	r17, 0x01	; 1
    8314:	59 f4       	brne	.+22     	; 0x832c <SD_WriteHumidityBuffer+0xbe>
    8316:	c2 ea       	ldi	r28, 0xA2	; 162
    8318:	dc e4       	ldi	r29, 0x4C	; 76
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer1[i]);
    831a:	89 91       	ld	r24, Y+
    831c:	99 91       	ld	r25, Y+
    831e:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    8322:	8c e4       	ldi	r24, 0x4C	; 76
    8324:	c6 3b       	cpi	r28, 0xB6	; 182
    8326:	d8 07       	cpc	r29, r24
    8328:	c1 f7       	brne	.-16     	; 0x831a <SD_WriteHumidityBuffer+0xac>
    832a:	0a c0       	rjmp	.+20     	; 0x8340 <SD_WriteHumidityBuffer+0xd2>
    832c:	c8 ec       	ldi	r28, 0xC8	; 200
    832e:	d5 e5       	ldi	r29, 0x55	; 85
			SD_Write16(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer2[i]);
    8330:	89 91       	ld	r24, Y+
    8332:	99 91       	ld	r25, Y+
    8334:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    8338:	85 e5       	ldi	r24, 0x55	; 85
    833a:	cc 3d       	cpi	r28, 0xDC	; 220
    833c:	d8 07       	cpc	r29, r24
    833e:	c1 f7       	brne	.-16     	; 0x8330 <SD_WriteHumidityBuffer+0xc2>
			SD_Write16(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    8340:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>

	f_sync(&Log_File);
    8344:	80 e3       	ldi	r24, 0x30	; 48
    8346:	91 e5       	ldi	r25, 0x51	; 81
    8348:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    834c:	df 91       	pop	r29
    834e:	cf 91       	pop	r28
    8350:	1f 91       	pop	r17
    8352:	08 95       	ret

00008354 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    8354:	1f 93       	push	r17
    8356:	cf 93       	push	r28
    8358:	df 93       	push	r29
    835a:	18 2f       	mov	r17, r24
    835c:	8f ef       	ldi	r24, 0xFF	; 255
    835e:	9f ef       	ldi	r25, 0xFF	; 255
    8360:	af ef       	ldi	r26, 0xFF	; 255
    8362:	bf ef       	ldi	r27, 0xFF	; 255
    8364:	80 93 32 59 	sts	0x5932, r24
    8368:	90 93 33 59 	sts	0x5933, r25
    836c:	a0 93 34 59 	sts	0x5934, r26
    8370:	b0 93 35 59 	sts	0x5935, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    8374:	6c e4       	ldi	r22, 0x4C	; 76
    8376:	74 e7       	ldi	r23, 0x74	; 116
    8378:	8e ed       	ldi	r24, 0xDE	; 222
    837a:	90 eb       	ldi	r25, 0xB0	; 176
    837c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(62);				// record size  
    8380:	6e e3       	ldi	r22, 0x3E	; 62
    8382:	70 e0       	ldi	r23, 0x00	; 0
    8384:	80 e0       	ldi	r24, 0x00	; 0
    8386:	90 e0       	ldi	r25, 0x00	; 0
    8388:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(3); 		// record type  
    838c:	83 e0       	ldi	r24, 0x03	; 3
    838e:	90 e0       	ldi	r25, 0x00	; 0
    8390:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    8394:	11 30       	cpi	r17, 0x01	; 1
    8396:	49 f4       	brne	.+18     	; 0x83aa <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    8398:	60 91 de 33 	lds	r22, 0x33DE
    839c:	70 91 df 33 	lds	r23, 0x33DF
    83a0:	80 91 e0 33 	lds	r24, 0x33E0
    83a4:	90 91 e1 33 	lds	r25, 0x33E1
    83a8:	08 c0       	rjmp	.+16     	; 0x83ba <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    83aa:	60 91 e2 33 	lds	r22, 0x33E2
    83ae:	70 91 e3 33 	lds	r23, 0x33E3
    83b2:	80 91 e4 33 	lds	r24, 0x33E4
    83b6:	90 91 e5 33 	lds	r25, 0x33E5
    83ba:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    83be:	60 e0       	ldi	r22, 0x00	; 0
    83c0:	70 e2       	ldi	r23, 0x20	; 32
    83c2:	8c e1       	ldi	r24, 0x1C	; 28
    83c4:	90 e0       	ldi	r25, 0x00	; 0
    83c6:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(10);												// number of samples
    83ca:	6a e0       	ldi	r22, 0x0A	; 10
    83cc:	70 e0       	ldi	r23, 0x00	; 0
    83ce:	80 e0       	ldi	r24, 0x00	; 0
    83d0:	90 e0       	ldi	r25, 0x00	; 0
    83d2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
		
	SD_WriteString("Temperature");
    83d6:	8d eb       	ldi	r24, 0xBD	; 189
    83d8:	90 e2       	ldi	r25, 0x20	; 32
    83da:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    83de:	89 e0       	ldi	r24, 0x09	; 9
    83e0:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("16");
    83e4:	81 eb       	ldi	r24, 0xB1	; 177
    83e6:	90 e2       	ldi	r25, 0x20	; 32
    83e8:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    83ec:	8a e0       	ldi	r24, 0x0A	; 10
    83ee:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_Write8(0x00);
    83f2:	80 e0       	ldi	r24, 0x00	; 0
    83f4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	
	if(bufferNumber == 1){
    83f8:	11 30       	cpi	r17, 0x01	; 1
    83fa:	59 f4       	brne	.+22     	; 0x8412 <SD_WriteTemperatureBuffer+0xbe>
    83fc:	c5 e0       	ldi	r28, 0x05	; 5
    83fe:	db e4       	ldi	r29, 0x4B	; 75
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    8400:	89 91       	ld	r24, Y+
    8402:	99 91       	ld	r25, Y+
    8404:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    8408:	8b e4       	ldi	r24, 0x4B	; 75
    840a:	c9 31       	cpi	r28, 0x19	; 25
    840c:	d8 07       	cpc	r29, r24
    840e:	c1 f7       	brne	.-16     	; 0x8400 <SD_WriteTemperatureBuffer+0xac>
    8410:	0a c0       	rjmp	.+20     	; 0x8426 <SD_WriteTemperatureBuffer+0xd2>
    8412:	cc e2       	ldi	r28, 0x2C	; 44
    8414:	dc e4       	ldi	r29, 0x4C	; 76
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    8416:	89 91       	ld	r24, Y+
    8418:	99 91       	ld	r25, Y+
    841a:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    841e:	8c e4       	ldi	r24, 0x4C	; 76
    8420:	c0 34       	cpi	r28, 0x40	; 64
    8422:	d8 07       	cpc	r29, r24
    8424:	c1 f7       	brne	.-16     	; 0x8416 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    8426:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>
		
	f_sync(&Log_File);
    842a:	80 e3       	ldi	r24, 0x30	; 48
    842c:	91 e5       	ldi	r25, 0x51	; 81
    842e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

}
    8432:	df 91       	pop	r29
    8434:	cf 91       	pop	r28
    8436:	1f 91       	pop	r17
    8438:	08 95       	ret

0000843a <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    843a:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    843c:	dc 01       	movw	r26, r24
    843e:	0d 90       	ld	r0, X+
    8440:	00 20       	and	r0, r0
    8442:	e9 f7       	brne	.-6      	; 0x843e <Rs232_SendString+0x4>
    8444:	11 97       	sbiw	r26, 0x01	; 1
    8446:	a8 1b       	sub	r26, r24
    8448:	b9 0b       	sbc	r27, r25
    844a:	90 e0       	ldi	r25, 0x00	; 0
    844c:	0a c0       	rjmp	.+20     	; 0x8462 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    844e:	e2 0f       	add	r30, r18
    8450:	f3 1f       	adc	r31, r19
    8452:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    8454:	80 91 a1 09 	lds	r24, 0x09A1
    8458:	85 ff       	sbrs	r24, 5
    845a:	fc cf       	rjmp	.-8      	; 0x8454 <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    845c:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    8460:	9f 5f       	subi	r25, 0xFF	; 255
    8462:	e9 2f       	mov	r30, r25
    8464:	f0 e0       	ldi	r31, 0x00	; 0
    8466:	ea 17       	cp	r30, r26
    8468:	fb 07       	cpc	r31, r27
    846a:	88 f3       	brcs	.-30     	; 0x844e <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    846c:	66 23       	and	r22, r22
    846e:	71 f0       	breq	.+28     	; 0x848c <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    8470:	80 91 a1 09 	lds	r24, 0x09A1
    8474:	85 ff       	sbrs	r24, 5
    8476:	fc cf       	rjmp	.-8      	; 0x8470 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    8478:	8d e0       	ldi	r24, 0x0D	; 13
    847a:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    847e:	80 91 a1 09 	lds	r24, 0x09A1
    8482:	85 ff       	sbrs	r24, 5
    8484:	fc cf       	rjmp	.-8      	; 0x847e <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    8486:	8a e0       	ldi	r24, 0x0A	; 10
    8488:	80 93 a0 09 	sts	0x09A0, r24
    848c:	08 95       	ret

0000848e <Debug_SendString>:
}

void Debug_SendString(char string [],bool CR){
    848e:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    8490:	dc 01       	movw	r26, r24
    8492:	0d 90       	ld	r0, X+
    8494:	00 20       	and	r0, r0
    8496:	e9 f7       	brne	.-6      	; 0x8492 <Debug_SendString+0x4>
    8498:	11 97       	sbiw	r26, 0x01	; 1
    849a:	a8 1b       	sub	r26, r24
    849c:	b9 0b       	sbc	r27, r25
    849e:	90 e0       	ldi	r25, 0x00	; 0
    84a0:	0c c0       	rjmp	.+24     	; 0x84ba <Debug_SendString+0x2c>
		Debug_SendByte(string[i]);
    84a2:	e2 0f       	add	r30, r18
    84a4:	f3 1f       	adc	r31, r19
    84a6:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    84a8:	80 91 a1 08 	lds	r24, 0x08A1
    84ac:	85 ff       	sbrs	r24, 5
    84ae:	fc cf       	rjmp	.-8      	; 0x84a8 <Debug_SendString+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    84b0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    84b4:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    84b8:	9f 5f       	subi	r25, 0xFF	; 255
    84ba:	e9 2f       	mov	r30, r25
    84bc:	f0 e0       	ldi	r31, 0x00	; 0
    84be:	ea 17       	cp	r30, r26
    84c0:	fb 07       	cpc	r31, r27
    84c2:	78 f3       	brcs	.-34     	; 0x84a2 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    84c4:	66 23       	and	r22, r22
    84c6:	91 f0       	breq	.+36     	; 0x84ec <Debug_SendString+0x5e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    84c8:	80 91 a1 08 	lds	r24, 0x08A1
    84cc:	85 ff       	sbrs	r24, 5
    84ce:	fc cf       	rjmp	.-8      	; 0x84c8 <Debug_SendString+0x3a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    84d0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    84d4:	8d e0       	ldi	r24, 0x0D	; 13
    84d6:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    84da:	80 91 a1 08 	lds	r24, 0x08A1
    84de:	85 ff       	sbrs	r24, 5
    84e0:	fc cf       	rjmp	.-8      	; 0x84da <Debug_SendString+0x4c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    84e2:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    84e6:	8a e0       	ldi	r24, 0x0A	; 10
    84e8:	80 93 a0 08 	sts	0x08A0, r24
    84ec:	08 95       	ret

000084ee <connectToComputer>:
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return result;
}

void connectToComputer(void){
    84ee:	af 92       	push	r10
    84f0:	bf 92       	push	r11
    84f2:	cf 92       	push	r12
    84f4:	df 92       	push	r13
    84f6:	ef 92       	push	r14
    84f8:	ff 92       	push	r15
    84fa:	0f 93       	push	r16
    84fc:	1f 93       	push	r17
    84fe:	cf 93       	push	r28
    8500:	df 93       	push	r29
	uint16_t singCounter;
	uint8_t  char1;
	uint8_t  char2;

	connected = false;
    8502:	10 92 24 34 	sts	0x3424, r1
	Debug_ClearBuffer();
    8506:	0e 94 8f 01 	call	0x31e	; 0x31e <Debug_ClearBuffer>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    850a:	00 e2       	ldi	r16, 0x20	; 32
    850c:	c0 2e       	mov	r12, r16
    850e:	06 e0       	ldi	r16, 0x06	; 6
    8510:	d0 2e       	mov	r13, r16
    8512:	10 e8       	ldi	r17, 0x80	; 128
    8514:	a1 2e       	mov	r10, r17
    8516:	e1 2c       	mov	r14, r1
    8518:	b8 e4       	ldi	r27, 0x48	; 72
    851a:	fb 2e       	mov	r15, r27
				char1 = Debug_GetByte(false);
				if(char1 == 'B'){
					_delay_ms(5);
					char2 = Debug_GetByte(false);
					if(char2 == 'T'){
						connected = true;
    851c:	06 e6       	ldi	r16, 0x66	; 102
    851e:	1e e0       	ldi	r17, 0x0E	; 14
    8520:	bb 24       	eor	r11, r11
    8522:	b3 94       	inc	r11
    8524:	31 c0       	rjmp	.+98     	; 0x8588 <connectToComputer+0x9a>
	uint8_t  char2;

	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		Debug_SendString("BS",false);
    8526:	89 ec       	ldi	r24, 0xC9	; 201
    8528:	90 e2       	ldi	r25, 0x20	; 32
    852a:	60 e0       	ldi	r22, 0x00	; 0
    852c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
		if(!recording){
    8530:	80 91 3b 34 	lds	r24, 0x343B
    8534:	88 23       	and	r24, r24
    8536:	11 f4       	brne	.+4      	; 0x853c <connectToComputer+0x4e>
    8538:	f6 01       	movw	r30, r12
    853a:	a5 82       	std	Z+5, r10	; 0x05
    853c:	ce ee       	ldi	r28, 0xEE	; 238
    853e:	d2 e0       	ldi	r29, 0x02	; 2
		    Leds_Set(wifi_Red);
		}
		singCounter = 750;
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
    8540:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    8544:	88 23       	and	r24, r24
    8546:	d9 f0       	breq	.+54     	; 0x857e <connectToComputer+0x90>
				char1 = Debug_GetByte(false);
    8548:	80 e0       	ldi	r24, 0x00	; 0
    854a:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
				if(char1 == 'B'){
    854e:	82 34       	cpi	r24, 0x42	; 66
    8550:	b1 f4       	brne	.+44     	; 0x857e <connectToComputer+0x90>
    8552:	c7 01       	movw	r24, r14
    8554:	01 97       	sbiw	r24, 0x01	; 1
    8556:	f1 f7       	brne	.-4      	; 0x8554 <connectToComputer+0x66>
					_delay_ms(5);
					char2 = Debug_GetByte(false);
    8558:	80 e0       	ldi	r24, 0x00	; 0
    855a:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
					if(char2 == 'T'){
    855e:	84 35       	cpi	r24, 0x54	; 84
    8560:	71 f4       	brne	.+28     	; 0x857e <connectToComputer+0x90>
						connected = true;
    8562:	b0 92 24 34 	sts	0x3424, r11
						Debug_SendString("BT",false);
    8566:	8c ec       	ldi	r24, 0xCC	; 204
    8568:	90 e2       	ldi	r25, 0x20	; 32
    856a:	60 e0       	ldi	r22, 0x00	; 0
    856c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
						timeOutCounter = 0;
    8570:	10 92 28 34 	sts	0x3428, r1
    8574:	10 92 29 34 	sts	0x3429, r1
						Debug_ClearBuffer();
    8578:	0e 94 8f 01 	call	0x31e	; 0x31e <Debug_ClearBuffer>
    857c:	05 c0       	rjmp	.+10     	; 0x8588 <connectToComputer+0x9a>
    857e:	c8 01       	movw	r24, r16
    8580:	01 97       	sbiw	r24, 0x01	; 1
    8582:	f1 f7       	brne	.-4      	; 0x8580 <connectToComputer+0x92>
						break;
					}
				}
			}
			_delay_ms(1);
			singCounter--;
    8584:	21 97       	sbiw	r28, 0x01	; 1
		Debug_SendString("BS",false);
		if(!recording){
		    Leds_Set(wifi_Red);
		}
		singCounter = 750;
		while(singCounter > 0){
    8586:	e1 f6       	brne	.-72     	; 0x8540 <connectToComputer+0x52>
	uint8_t  char1;
	uint8_t  char2;

	connected = false;
	Debug_ClearBuffer();
	while(!connected){
    8588:	80 91 24 34 	lds	r24, 0x3424
    858c:	88 23       	and	r24, r24
    858e:	59 f2       	breq	.-106    	; 0x8526 <connectToComputer+0x38>
			}
			_delay_ms(1);
			singCounter--;
		}
	}
}
    8590:	df 91       	pop	r29
    8592:	cf 91       	pop	r28
    8594:	1f 91       	pop	r17
    8596:	0f 91       	pop	r16
    8598:	ff 90       	pop	r15
    859a:	ef 90       	pop	r14
    859c:	df 90       	pop	r13
    859e:	cf 90       	pop	r12
    85a0:	bf 90       	pop	r11
    85a2:	af 90       	pop	r10
    85a4:	08 95       	ret

000085a6 <Debug_To_Wifi>:
	}
}


void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
    85a6:	8f ec       	ldi	r24, 0xCF	; 207
    85a8:	90 e2       	ldi	r25, 0x20	; 32
    85aa:	61 e0       	ldi	r22, 0x01	; 1
    85ac:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
	while(1){
		if(Debug_CharReadyToRead()){
    85b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    85b4:	88 23       	and	r24, r24
    85b6:	49 f0       	breq	.+18     	; 0x85ca <Debug_To_Wifi+0x24>
		    while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    85b8:	80 91 a1 0a 	lds	r24, 0x0AA1
    85bc:	85 ff       	sbrs	r24, 5
    85be:	fc cf       	rjmp	.-8      	; 0x85b8 <Debug_To_Wifi+0x12>
            Wifi_Usart.DATA = Debug_GetByte(true);
    85c0:	81 e0       	ldi	r24, 0x01	; 1
    85c2:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    85c6:	80 93 a0 0a 	sts	0x0AA0, r24
		}
		if(Wifi_CharReadyToRead()){
    85ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    85ce:	88 23       	and	r24, r24
    85d0:	79 f3       	breq	.-34     	; 0x85b0 <Debug_To_Wifi+0xa>
			Debug_SendByte(Wifi_GetByte(true));
    85d2:	81 e0       	ldi	r24, 0x01	; 1
    85d4:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    85d8:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    85da:	80 91 a1 08 	lds	r24, 0x08A1
    85de:	85 ff       	sbrs	r24, 5
    85e0:	fc cf       	rjmp	.-8      	; 0x85da <Debug_To_Wifi+0x34>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    85e2:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    85e6:	90 93 a0 08 	sts	0x08A0, r25
    85ea:	e2 cf       	rjmp	.-60     	; 0x85b0 <Debug_To_Wifi+0xa>

000085ec <Wifi_SendByte>:
	}
	return tmp;
}


uint16_t Wifi_SendByte(uint8_t data){
    85ec:	48 2f       	mov	r20, r24
    timeOutCounter = 0;
    85ee:	10 92 28 34 	sts	0x3428, r1
    85f2:	10 92 29 34 	sts	0x3429, r1
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    85f6:	80 91 a1 0a 	lds	r24, 0x0AA1
    85fa:	85 ff       	sbrs	r24, 5
    85fc:	fc cf       	rjmp	.-8      	; 0x85f6 <Wifi_SendByte+0xa>
    85fe:	1f c0       	rjmp	.+62     	; 0x863e <Wifi_SendByte+0x52>
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
        timeOutCounter++;
    8600:	80 91 28 34 	lds	r24, 0x3428
    8604:	90 91 29 34 	lds	r25, 0x3429
    8608:	01 96       	adiw	r24, 0x01	; 1
    860a:	80 93 28 34 	sts	0x3428, r24
    860e:	90 93 29 34 	sts	0x3429, r25
    8612:	c9 01       	movw	r24, r18
    8614:	01 97       	sbiw	r24, 0x01	; 1
    8616:	f1 f7       	brne	.-4      	; 0x8614 <Wifi_SendByte+0x28>
        _delay_ms(1);
        if(timeOutCounter > 60000){
    8618:	80 91 28 34 	lds	r24, 0x3428
    861c:	90 91 29 34 	lds	r25, 0x3429
    8620:	81 56       	subi	r24, 0x61	; 97
    8622:	9a 4e       	sbci	r25, 0xEA	; 234
    8624:	70 f0       	brcs	.+28     	; 0x8642 <Wifi_SendByte+0x56>
           Wifi_Usart.DATA = data;
    8626:	40 93 a0 0a 	sts	0x0AA0, r20
           Debug_SendString("Hanging",true);
    862a:	8d ed       	ldi	r24, 0xDD	; 221
    862c:	90 e2       	ldi	r25, 0x20	; 32
    862e:	61 e0       	ldi	r22, 0x01	; 1
    8630:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
           return timeOutCounter;
    8634:	20 91 28 34 	lds	r18, 0x3428
    8638:	30 91 29 34 	lds	r19, 0x3429
    863c:	0d c0       	rjmp	.+26     	; 0x8658 <Wifi_SendByte+0x6c>
    863e:	26 e6       	ldi	r18, 0x66	; 102
    8640:	3e e0       	ldi	r19, 0x0E	; 14


uint16_t Wifi_SendByte(uint8_t data){
    timeOutCounter = 0;
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
    8642:	80 91 68 06 	lds	r24, 0x0668
    8646:	81 fd       	sbrc	r24, 1
    8648:	db cf       	rjmp	.-74     	; 0x8600 <Wifi_SendByte+0x14>
           Debug_SendString("Hanging",true);
           return timeOutCounter;
        }
    }                              // Wait for RTS to be low

    Wifi_Usart.DATA = data;
    864a:	40 93 a0 0a 	sts	0x0AA0, r20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    864e:	8a e7       	ldi	r24, 0x7A	; 122
    8650:	8a 95       	dec	r24
    8652:	f1 f7       	brne	.-4      	; 0x8650 <Wifi_SendByte+0x64>
    8654:	20 e0       	ldi	r18, 0x00	; 0
    8656:	30 e0       	ldi	r19, 0x00	; 0
    _delay_us(25);
    return 0;
}
    8658:	c9 01       	movw	r24, r18
    865a:	08 95       	ret

0000865c <sendPort>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    865c:	80 91 a1 08 	lds	r24, 0x08A1
    8660:	85 ff       	sbrs	r24, 5
    8662:	fc cf       	rjmp	.-8      	; 0x865c <sendPort>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8664:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8668:	8f e4       	ldi	r24, 0x4F	; 79
    866a:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(server,true);
}

void sendPort(void){
	Debug_SendByte('O');
	if(port[strlen(port)-1] < 32){
    866e:	e8 e0       	ldi	r30, 0x08	; 8
    8670:	fe e5       	ldi	r31, 0x5E	; 94
    8672:	01 90       	ld	r0, Z+
    8674:	00 20       	and	r0, r0
    8676:	e9 f7       	brne	.-6      	; 0x8672 <sendPort+0x16>
    8678:	32 97       	sbiw	r30, 0x02	; 2
    867a:	80 81       	ld	r24, Z
    867c:	80 32       	cpi	r24, 0x20	; 32
    867e:	08 f4       	brcc	.+2      	; 0x8682 <sendPort+0x26>
        port[strlen(port)-1] = 0;
    8680:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(port)+2);
    8682:	e8 e0       	ldi	r30, 0x08	; 8
    8684:	fe e5       	ldi	r31, 0x5E	; 94
    8686:	01 90       	ld	r0, Z+
    8688:	00 20       	and	r0, r0
    868a:	e9 f7       	brne	.-6      	; 0x8686 <sendPort+0x2a>
    868c:	31 97       	sbiw	r30, 0x01	; 1
    868e:	e8 50       	subi	r30, 0x08	; 8
    8690:	fe 45       	sbci	r31, 0x5E	; 94
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8692:	80 91 a1 08 	lds	r24, 0x08A1
    8696:	85 ff       	sbrs	r24, 5
    8698:	fc cf       	rjmp	.-8      	; 0x8692 <sendPort+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    869a:	80 91 68 06 	lds	r24, 0x0668
    869e:	8e 2f       	mov	r24, r30
    86a0:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    86a2:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(port,true);
    86a6:	88 e0       	ldi	r24, 0x08	; 8
    86a8:	9e e5       	ldi	r25, 0x5E	; 94
    86aa:	61 e0       	ldi	r22, 0x01	; 1
    86ac:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
}
    86b0:	08 95       	ret

000086b2 <sendServer>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    86b2:	80 91 a1 08 	lds	r24, 0x08A1
    86b6:	85 ff       	sbrs	r24, 5
    86b8:	fc cf       	rjmp	.-8      	; 0x86b2 <sendServer>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    86ba:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    86be:	86 e5       	ldi	r24, 0x56	; 86
    86c0:	80 93 a0 08 	sts	0x08A0, r24
    }
}

void sendServer(void){
	Debug_SendByte('V');
	if(server[strlen(server)-1] < 32){
    86c4:	e5 ee       	ldi	r30, 0xE5	; 229
    86c6:	fb e4       	ldi	r31, 0x4B	; 75
    86c8:	01 90       	ld	r0, Z+
    86ca:	00 20       	and	r0, r0
    86cc:	e9 f7       	brne	.-6      	; 0x86c8 <sendServer+0x16>
    86ce:	32 97       	sbiw	r30, 0x02	; 2
    86d0:	80 81       	ld	r24, Z
    86d2:	80 32       	cpi	r24, 0x20	; 32
    86d4:	08 f4       	brcc	.+2      	; 0x86d8 <sendServer+0x26>
        server[strlen(server)-1] = 0;
    86d6:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(server)+2);
    86d8:	e5 ee       	ldi	r30, 0xE5	; 229
    86da:	fb e4       	ldi	r31, 0x4B	; 75
    86dc:	01 90       	ld	r0, Z+
    86de:	00 20       	and	r0, r0
    86e0:	e9 f7       	brne	.-6      	; 0x86dc <sendServer+0x2a>
    86e2:	31 97       	sbiw	r30, 0x01	; 1
    86e4:	e5 5e       	subi	r30, 0xE5	; 229
    86e6:	fb 44       	sbci	r31, 0x4B	; 75
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    86e8:	80 91 a1 08 	lds	r24, 0x08A1
    86ec:	85 ff       	sbrs	r24, 5
    86ee:	fc cf       	rjmp	.-8      	; 0x86e8 <sendServer+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    86f0:	80 91 68 06 	lds	r24, 0x0668
    86f4:	8e 2f       	mov	r24, r30
    86f6:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    86f8:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(server,true);
    86fc:	85 ee       	ldi	r24, 0xE5	; 229
    86fe:	9b e4       	ldi	r25, 0x4B	; 75
    8700:	61 e0       	ldi	r22, 0x01	; 1
    8702:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
}
    8706:	08 95       	ret

00008708 <sendFilename>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8708:	80 91 a1 08 	lds	r24, 0x08A1
    870c:	85 ff       	sbrs	r24, 5
    870e:	fc cf       	rjmp	.-8      	; 0x8708 <sendFilename>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8710:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8714:	86 e4       	ldi	r24, 0x46	; 70
    8716:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(nickname,true);
}

void sendFilename(void){
    Debug_SendByte('F');
	Debug_SendByte(strlen(fileToUpload)+2);
    871a:	e8 e3       	ldi	r30, 0x38	; 56
    871c:	fd e3       	ldi	r31, 0x3D	; 61
    871e:	01 90       	ld	r0, Z+
    8720:	00 20       	and	r0, r0
    8722:	e9 f7       	brne	.-6      	; 0x871e <sendFilename+0x16>
    8724:	31 97       	sbiw	r30, 0x01	; 1
    8726:	e8 53       	subi	r30, 0x38	; 56
    8728:	fd 43       	sbci	r31, 0x3D	; 61
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    872a:	80 91 a1 08 	lds	r24, 0x08A1
    872e:	85 ff       	sbrs	r24, 5
    8730:	fc cf       	rjmp	.-8      	; 0x872a <sendFilename+0x22>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8732:	80 91 68 06 	lds	r24, 0x0668
    8736:	8e 2f       	mov	r24, r30
    8738:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    873a:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(fileToUpload,true);
    873e:	88 e3       	ldi	r24, 0x38	; 56
    8740:	9d e3       	ldi	r25, 0x3D	; 61
    8742:	61 e0       	ldi	r22, 0x01	; 1
    8744:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
}
    8748:	08 95       	ret

0000874a <sendNickname>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    874a:	80 91 a1 08 	lds	r24, 0x08A1
    874e:	85 ff       	sbrs	r24, 5
    8750:	fc cf       	rjmp	.-8      	; 0x874a <sendNickname>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8752:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8756:	8e e4       	ldi	r24, 0x4E	; 78
    8758:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(user,true);
}

void sendNickname(void){
	Debug_SendByte('N');
	if(nickname[strlen(nickname)-1] < 32){
    875c:	ea e3       	ldi	r30, 0x3A	; 58
    875e:	fe e5       	ldi	r31, 0x5E	; 94
    8760:	01 90       	ld	r0, Z+
    8762:	00 20       	and	r0, r0
    8764:	e9 f7       	brne	.-6      	; 0x8760 <sendNickname+0x16>
    8766:	32 97       	sbiw	r30, 0x02	; 2
    8768:	80 81       	ld	r24, Z
    876a:	80 32       	cpi	r24, 0x20	; 32
    876c:	08 f4       	brcc	.+2      	; 0x8770 <sendNickname+0x26>
       nickname[strlen(nickname)-1] = 0;
    876e:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(nickname)+2);
    8770:	ea e3       	ldi	r30, 0x3A	; 58
    8772:	fe e5       	ldi	r31, 0x5E	; 94
    8774:	01 90       	ld	r0, Z+
    8776:	00 20       	and	r0, r0
    8778:	e9 f7       	brne	.-6      	; 0x8774 <sendNickname+0x2a>
    877a:	31 97       	sbiw	r30, 0x01	; 1
    877c:	ea 53       	subi	r30, 0x3A	; 58
    877e:	fe 45       	sbci	r31, 0x5E	; 94
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8780:	80 91 a1 08 	lds	r24, 0x08A1
    8784:	85 ff       	sbrs	r24, 5
    8786:	fc cf       	rjmp	.-8      	; 0x8780 <sendNickname+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8788:	80 91 68 06 	lds	r24, 0x0668
    878c:	8e 2f       	mov	r24, r30
    878e:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8790:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(nickname,true);
    8794:	8a e3       	ldi	r24, 0x3A	; 58
    8796:	9e e5       	ldi	r25, 0x5E	; 94
    8798:	61 e0       	ldi	r22, 0x01	; 1
    879a:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
}
    879e:	08 95       	ret

000087a0 <sendUser>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    87a0:	80 91 a1 08 	lds	r24, 0x08A1
    87a4:	85 ff       	sbrs	r24, 5
    87a6:	fc cf       	rjmp	.-8      	; 0x87a0 <sendUser>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    87a8:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    87ac:	85 e5       	ldi	r24, 0x55	; 85
    87ae:	80 93 a0 08 	sts	0x08A0, r24
   }
}

void sendUser(void){
	Debug_SendByte('U');
	if(user[strlen(user)-1] < 32){
    87b2:	e1 ed       	ldi	r30, 0xD1	; 209
    87b4:	fb e4       	ldi	r31, 0x4B	; 75
    87b6:	01 90       	ld	r0, Z+
    87b8:	00 20       	and	r0, r0
    87ba:	e9 f7       	brne	.-6      	; 0x87b6 <sendUser+0x16>
    87bc:	32 97       	sbiw	r30, 0x02	; 2
    87be:	80 81       	ld	r24, Z
    87c0:	80 32       	cpi	r24, 0x20	; 32
    87c2:	08 f4       	brcc	.+2      	; 0x87c6 <sendUser+0x26>
        user[strlen(user)-1] = 0;
    87c4:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(user)+2);
    87c6:	e1 ed       	ldi	r30, 0xD1	; 209
    87c8:	fb e4       	ldi	r31, 0x4B	; 75
    87ca:	01 90       	ld	r0, Z+
    87cc:	00 20       	and	r0, r0
    87ce:	e9 f7       	brne	.-6      	; 0x87ca <sendUser+0x2a>
    87d0:	31 97       	sbiw	r30, 0x01	; 1
    87d2:	e1 5d       	subi	r30, 0xD1	; 209
    87d4:	fb 44       	sbci	r31, 0x4B	; 75
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    87d6:	80 91 a1 08 	lds	r24, 0x08A1
    87da:	85 ff       	sbrs	r24, 5
    87dc:	fc cf       	rjmp	.-8      	; 0x87d6 <sendUser+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    87de:	80 91 68 06 	lds	r24, 0x0668
    87e2:	8e 2f       	mov	r24, r30
    87e4:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    87e6:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(user,true);
    87ea:	81 ed       	ldi	r24, 0xD1	; 209
    87ec:	9b e4       	ldi	r25, 0x4B	; 75
    87ee:	61 e0       	ldi	r22, 0x01	; 1
    87f0:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
}
    87f4:	08 95       	ret

000087f6 <sendKey>:
       Debug_SendString("",true);
   }
}

void sendKey(void){
   if(phraseRead){
    87f6:	80 91 62 34 	lds	r24, 0x3462
    87fa:	88 23       	and	r24, r24
    87fc:	41 f1       	breq	.+80     	; 0x884e <sendKey+0x58>
       if(phrase[strlen(phrase)-1] < 32){
    87fe:	e3 ec       	ldi	r30, 0xC3	; 195
    8800:	fc e4       	ldi	r31, 0x4C	; 76
    8802:	01 90       	ld	r0, Z+
    8804:	00 20       	and	r0, r0
    8806:	e9 f7       	brne	.-6      	; 0x8802 <sendKey+0xc>
    8808:	32 97       	sbiw	r30, 0x02	; 2
    880a:	80 81       	ld	r24, Z
    880c:	80 32       	cpi	r24, 0x20	; 32
    880e:	08 f4       	brcc	.+2      	; 0x8812 <sendKey+0x1c>
         phrase[strlen(phrase)-1] = 0;
    8810:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8812:	80 91 a1 08 	lds	r24, 0x08A1
    8816:	85 ff       	sbrs	r24, 5
    8818:	fc cf       	rjmp	.-8      	; 0x8812 <sendKey+0x1c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    881a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    881e:	8b e4       	ldi	r24, 0x4B	; 75
    8820:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('K');
       Debug_SendByte(strlen(phrase)+2);
    8824:	e3 ec       	ldi	r30, 0xC3	; 195
    8826:	fc e4       	ldi	r31, 0x4C	; 76
    8828:	01 90       	ld	r0, Z+
    882a:	00 20       	and	r0, r0
    882c:	e9 f7       	brne	.-6      	; 0x8828 <sendKey+0x32>
    882e:	31 97       	sbiw	r30, 0x01	; 1
    8830:	e3 5c       	subi	r30, 0xC3	; 195
    8832:	fc 44       	sbci	r31, 0x4C	; 76
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8834:	80 91 a1 08 	lds	r24, 0x08A1
    8838:	85 ff       	sbrs	r24, 5
    883a:	fc cf       	rjmp	.-8      	; 0x8834 <sendKey+0x3e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    883c:	80 91 68 06 	lds	r24, 0x0668
    8840:	8e 2f       	mov	r24, r30
    8842:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8844:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(phrase,true);
    8848:	83 ec       	ldi	r24, 0xC3	; 195
    884a:	9c e4       	ldi	r25, 0x4C	; 76
    884c:	3f c0       	rjmp	.+126    	; 0x88cc <sendKey+0xd6>
   } else if(keyRead){
    884e:	80 91 63 34 	lds	r24, 0x3463
    8852:	88 23       	and	r24, r24
    8854:	41 f1       	breq	.+80     	; 0x88a6 <sendKey+0xb0>
       if(key[strlen(key)-1] < 32){
    8856:	ee ef       	ldi	r30, 0xFE	; 254
    8858:	f0 e5       	ldi	r31, 0x50	; 80
    885a:	01 90       	ld	r0, Z+
    885c:	00 20       	and	r0, r0
    885e:	e9 f7       	brne	.-6      	; 0x885a <sendKey+0x64>
    8860:	32 97       	sbiw	r30, 0x02	; 2
    8862:	80 81       	ld	r24, Z
    8864:	80 32       	cpi	r24, 0x20	; 32
    8866:	08 f4       	brcc	.+2      	; 0x886a <sendKey+0x74>
         key[strlen(key)-1] = 0;
    8868:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    886a:	80 91 a1 08 	lds	r24, 0x08A1
    886e:	85 ff       	sbrs	r24, 5
    8870:	fc cf       	rjmp	.-8      	; 0x886a <sendKey+0x74>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8872:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8876:	8b e4       	ldi	r24, 0x4B	; 75
    8878:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('K');
       Debug_SendByte(strlen(key)+2);
    887c:	ee ef       	ldi	r30, 0xFE	; 254
    887e:	f0 e5       	ldi	r31, 0x50	; 80
    8880:	01 90       	ld	r0, Z+
    8882:	00 20       	and	r0, r0
    8884:	e9 f7       	brne	.-6      	; 0x8880 <sendKey+0x8a>
    8886:	31 97       	sbiw	r30, 0x01	; 1
    8888:	ee 5f       	subi	r30, 0xFE	; 254
    888a:	f0 45       	sbci	r31, 0x50	; 80
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    888c:	80 91 a1 08 	lds	r24, 0x08A1
    8890:	85 ff       	sbrs	r24, 5
    8892:	fc cf       	rjmp	.-8      	; 0x888c <sendKey+0x96>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8894:	80 91 68 06 	lds	r24, 0x0668
    8898:	8e 2f       	mov	r24, r30
    889a:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    889c:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(key,true);
    88a0:	8e ef       	ldi	r24, 0xFE	; 254
    88a2:	90 e5       	ldi	r25, 0x50	; 80
    88a4:	13 c0       	rjmp	.+38     	; 0x88cc <sendKey+0xd6>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    88a6:	80 91 a1 08 	lds	r24, 0x08A1
    88aa:	85 ff       	sbrs	r24, 5
    88ac:	fc cf       	rjmp	.-8      	; 0x88a6 <sendKey+0xb0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    88ae:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    88b2:	8b e4       	ldi	r24, 0x4B	; 75
    88b4:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    88b8:	80 91 a1 08 	lds	r24, 0x08A1
    88bc:	85 ff       	sbrs	r24, 5
    88be:	fc cf       	rjmp	.-8      	; 0x88b8 <sendKey+0xc2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    88c0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    88c4:	10 92 a0 08 	sts	0x08A0, r1
   } else {
       Debug_SendByte('K');
       Debug_SendByte(0);
       Debug_SendString("",true);
    88c8:	85 ee       	ldi	r24, 0xE5	; 229
    88ca:	90 e2       	ldi	r25, 0x20	; 32
    88cc:	61 e0       	ldi	r22, 0x01	; 1
    88ce:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    88d2:	08 95       	ret

000088d4 <sendAuthType>:
       Debug_SendString("",true);
   }
}

void sendAuthType(void){
   if(authRead){
    88d4:	80 91 61 34 	lds	r24, 0x3461
    88d8:	88 23       	and	r24, r24
    88da:	41 f1       	breq	.+80     	; 0x892c <sendAuthType+0x58>
       if(auth[strlen(auth)-1] < 32){
    88dc:	e1 e0       	ldi	r30, 0x01	; 1
    88de:	f6 e4       	ldi	r31, 0x46	; 70
    88e0:	01 90       	ld	r0, Z+
    88e2:	00 20       	and	r0, r0
    88e4:	e9 f7       	brne	.-6      	; 0x88e0 <sendAuthType+0xc>
    88e6:	32 97       	sbiw	r30, 0x02	; 2
    88e8:	80 81       	ld	r24, Z
    88ea:	80 32       	cpi	r24, 0x20	; 32
    88ec:	08 f4       	brcc	.+2      	; 0x88f0 <sendAuthType+0x1c>
         auth[strlen(auth)-1] = 0;
    88ee:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    88f0:	80 91 a1 08 	lds	r24, 0x08A1
    88f4:	85 ff       	sbrs	r24, 5
    88f6:	fc cf       	rjmp	.-8      	; 0x88f0 <sendAuthType+0x1c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    88f8:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    88fc:	81 e4       	ldi	r24, 0x41	; 65
    88fe:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('A');
       Debug_SendByte(strlen(auth)+2);
    8902:	e1 e0       	ldi	r30, 0x01	; 1
    8904:	f6 e4       	ldi	r31, 0x46	; 70
    8906:	01 90       	ld	r0, Z+
    8908:	00 20       	and	r0, r0
    890a:	e9 f7       	brne	.-6      	; 0x8906 <sendAuthType+0x32>
    890c:	31 97       	sbiw	r30, 0x01	; 1
    890e:	e1 50       	subi	r30, 0x01	; 1
    8910:	f6 44       	sbci	r31, 0x46	; 70
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8912:	80 91 a1 08 	lds	r24, 0x08A1
    8916:	85 ff       	sbrs	r24, 5
    8918:	fc cf       	rjmp	.-8      	; 0x8912 <sendAuthType+0x3e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    891a:	80 91 68 06 	lds	r24, 0x0668
    891e:	8e 2f       	mov	r24, r30
    8920:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8922:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(auth,true);
    8926:	81 e0       	ldi	r24, 0x01	; 1
    8928:	96 e4       	ldi	r25, 0x46	; 70
    892a:	13 c0       	rjmp	.+38     	; 0x8952 <sendAuthType+0x7e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    892c:	80 91 a1 08 	lds	r24, 0x08A1
    8930:	85 ff       	sbrs	r24, 5
    8932:	fc cf       	rjmp	.-8      	; 0x892c <sendAuthType+0x58>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8934:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8938:	81 e4       	ldi	r24, 0x41	; 65
    893a:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    893e:	80 91 a1 08 	lds	r24, 0x08A1
    8942:	85 ff       	sbrs	r24, 5
    8944:	fc cf       	rjmp	.-8      	; 0x893e <sendAuthType+0x6a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8946:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    894a:	10 92 a0 08 	sts	0x08A0, r1
   } else {
       Debug_SendByte('A');
       Debug_SendByte(0);
       Debug_SendString("",true);
    894e:	85 ee       	ldi	r24, 0xE5	; 229
    8950:	90 e2       	ldi	r25, 0x20	; 32
    8952:	61 e0       	ldi	r22, 0x01	; 1
    8954:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    8958:	08 95       	ret

0000895a <sendSSID>:
    }
}


void sendSSID(void){
   if(ssidRead){
    895a:	80 91 64 34 	lds	r24, 0x3464
    895e:	88 23       	and	r24, r24
    8960:	41 f1       	breq	.+80     	; 0x89b2 <sendSSID+0x58>
       if(ssid[strlen(ssid)-1] < 32){
    8962:	e6 e1       	ldi	r30, 0x16	; 22
    8964:	f9 e3       	ldi	r31, 0x39	; 57
    8966:	01 90       	ld	r0, Z+
    8968:	00 20       	and	r0, r0
    896a:	e9 f7       	brne	.-6      	; 0x8966 <sendSSID+0xc>
    896c:	32 97       	sbiw	r30, 0x02	; 2
    896e:	80 81       	ld	r24, Z
    8970:	80 32       	cpi	r24, 0x20	; 32
    8972:	08 f4       	brcc	.+2      	; 0x8976 <sendSSID+0x1c>
         ssid[strlen(ssid)-1] = 0;
    8974:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8976:	80 91 a1 08 	lds	r24, 0x08A1
    897a:	85 ff       	sbrs	r24, 5
    897c:	fc cf       	rjmp	.-8      	; 0x8976 <sendSSID+0x1c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    897e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8982:	83 e5       	ldi	r24, 0x53	; 83
    8984:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('S');
       Debug_SendByte(strlen(ssid)+2);
    8988:	e6 e1       	ldi	r30, 0x16	; 22
    898a:	f9 e3       	ldi	r31, 0x39	; 57
    898c:	01 90       	ld	r0, Z+
    898e:	00 20       	and	r0, r0
    8990:	e9 f7       	brne	.-6      	; 0x898c <sendSSID+0x32>
    8992:	31 97       	sbiw	r30, 0x01	; 1
    8994:	e6 51       	subi	r30, 0x16	; 22
    8996:	f9 43       	sbci	r31, 0x39	; 57
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8998:	80 91 a1 08 	lds	r24, 0x08A1
    899c:	85 ff       	sbrs	r24, 5
    899e:	fc cf       	rjmp	.-8      	; 0x8998 <sendSSID+0x3e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    89a0:	80 91 68 06 	lds	r24, 0x0668
    89a4:	8e 2f       	mov	r24, r30
    89a6:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    89a8:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(ssid,true);
    89ac:	86 e1       	ldi	r24, 0x16	; 22
    89ae:	99 e3       	ldi	r25, 0x39	; 57
    89b0:	13 c0       	rjmp	.+38     	; 0x89d8 <sendSSID+0x7e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    89b2:	80 91 a1 08 	lds	r24, 0x08A1
    89b6:	85 ff       	sbrs	r24, 5
    89b8:	fc cf       	rjmp	.-8      	; 0x89b2 <sendSSID+0x58>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    89ba:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    89be:	83 e5       	ldi	r24, 0x53	; 83
    89c0:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    89c4:	80 91 a1 08 	lds	r24, 0x08A1
    89c8:	85 ff       	sbrs	r24, 5
    89ca:	fc cf       	rjmp	.-8      	; 0x89c4 <sendSSID+0x6a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    89cc:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    89d0:	10 92 a0 08 	sts	0x08A0, r1
   } else {
       Debug_SendByte('S');
       Debug_SendByte(0);
       Debug_SendString("",true);
    89d4:	85 ee       	ldi	r24, 0xE5	; 229
    89d6:	90 e2       	ldi	r25, 0x20	; 32
    89d8:	61 e0       	ldi	r22, 0x01	; 1
    89da:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    89de:	08 95       	ret

000089e0 <Wifi_SendString>:

void Wifi_SendString(char string [],bool CR){
    89e0:	ef 92       	push	r14
    89e2:	ff 92       	push	r15
    89e4:	0f 93       	push	r16
    89e6:	1f 93       	push	r17
    89e8:	cf 93       	push	r28
    89ea:	df 93       	push	r29
    89ec:	8c 01       	movw	r16, r24
    89ee:	e6 2e       	mov	r14, r22
    89f0:	ff 24       	eor	r15, r15
    89f2:	06 c0       	rjmp	.+12     	; 0x8a00 <Wifi_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Wifi_SendByte(string[i]);
    89f4:	c0 0f       	add	r28, r16
    89f6:	d1 1f       	adc	r29, r17
    89f8:	88 81       	ld	r24, Y
    89fa:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
    _delay_us(25);
    return 0;
}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    89fe:	f3 94       	inc	r15
    8a00:	cf 2d       	mov	r28, r15
    8a02:	d0 e0       	ldi	r29, 0x00	; 0
    8a04:	f8 01       	movw	r30, r16
    8a06:	01 90       	ld	r0, Z+
    8a08:	00 20       	and	r0, r0
    8a0a:	e9 f7       	brne	.-6      	; 0x8a06 <Wifi_SendString+0x26>
    8a0c:	31 97       	sbiw	r30, 0x01	; 1
    8a0e:	e0 1b       	sub	r30, r16
    8a10:	f1 0b       	sbc	r31, r17
    8a12:	ce 17       	cp	r28, r30
    8a14:	df 07       	cpc	r29, r31
    8a16:	70 f3       	brcs	.-36     	; 0x89f4 <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

    if(CR){
    8a18:	ee 20       	and	r14, r14
    8a1a:	31 f0       	breq	.+12     	; 0x8a28 <Wifi_SendString+0x48>
		Wifi_SendByte(13);
    8a1c:	8d e0       	ldi	r24, 0x0D	; 13
    8a1e:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
		Wifi_SendByte(10);
    8a22:	8a e0       	ldi	r24, 0x0A	; 10
    8a24:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
	}
}
    8a28:	df 91       	pop	r29
    8a2a:	cf 91       	pop	r28
    8a2c:	1f 91       	pop	r17
    8a2e:	0f 91       	pop	r16
    8a30:	ff 90       	pop	r15
    8a32:	ef 90       	pop	r14
    8a34:	08 95       	ret

00008a36 <Wifi_EnterCMDMode>:

bool Wifi_EnterCMDMode(uint16_t timeOut){
    8a36:	8f 92       	push	r8
    8a38:	9f 92       	push	r9
    8a3a:	af 92       	push	r10
    8a3c:	bf 92       	push	r11
    8a3e:	cf 92       	push	r12
    8a40:	df 92       	push	r13
    8a42:	ff 92       	push	r15
    8a44:	0f 93       	push	r16
    8a46:	1f 93       	push	r17
    8a48:	df 93       	push	r29
    8a4a:	cf 93       	push	r28
    8a4c:	00 d0       	rcall	.+0      	; 0x8a4e <Wifi_EnterCMDMode+0x18>
    8a4e:	00 d0       	rcall	.+0      	; 0x8a50 <Wifi_EnterCMDMode+0x1a>
    8a50:	cd b7       	in	r28, 0x3d	; 61
    8a52:	de b7       	in	r29, 0x3e	; 62
    8a54:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    8a56:	de 01       	movw	r26, r28
    8a58:	14 96       	adiw	r26, 0x04	; 4
    8a5a:	ea ee       	ldi	r30, 0xEA	; 234
    8a5c:	f0 e2       	ldi	r31, 0x20	; 32
    8a5e:	83 e0       	ldi	r24, 0x03	; 3
    8a60:	01 90       	ld	r0, Z+
    8a62:	0d 92       	st	X+, r0
    8a64:	81 50       	subi	r24, 0x01	; 1
    8a66:	e1 f7       	brne	.-8      	; 0x8a60 <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    8a68:	0e 94 93 02 	call	0x526	; 0x526 <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    8a6c:	86 ee       	ldi	r24, 0xE6	; 230
    8a6e:	90 e2       	ldi	r25, 0x20	; 32
    8a70:	60 e0       	ldi	r22, 0x00	; 0
    8a72:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
    8a76:	ff 24       	eor	r15, r15
    8a78:	00 e0       	ldi	r16, 0x00	; 0
    8a7a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    8a7c:	4e 01       	movw	r8, r28
    8a7e:	08 94       	sec
    8a80:	81 1c       	adc	r8, r1
    8a82:	91 1c       	adc	r9, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    8a84:	86 e6       	ldi	r24, 0x66	; 102
    8a86:	a8 2e       	mov	r10, r24
    8a88:	8e e0       	ldi	r24, 0x0E	; 14
    8a8a:	b8 2e       	mov	r11, r24
    8a8c:	23 c0       	rjmp	.+70     	; 0x8ad4 <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    8a8e:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    8a92:	88 23       	and	r24, r24
    8a94:	d1 f0       	breq	.+52     	; 0x8aca <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    8a96:	80 e0       	ldi	r24, 0x00	; 0
    8a98:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    8a9c:	f4 01       	movw	r30, r8
    8a9e:	ef 0d       	add	r30, r15
    8aa0:	f1 1d       	adc	r31, r1
    8aa2:	80 83       	st	Z, r24
			j++;
    8aa4:	f3 94       	inc	r15
			if(j > 2){
    8aa6:	82 e0       	ldi	r24, 0x02	; 2
    8aa8:	8f 15       	cp	r24, r15
    8aaa:	78 f4       	brcc	.+30     	; 0x8aca <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    8aac:	99 81       	ldd	r25, Y+1	; 0x01
    8aae:	8c 81       	ldd	r24, Y+4	; 0x04
    8ab0:	98 17       	cp	r25, r24
    8ab2:	99 f4       	brne	.+38     	; 0x8ada <Wifi_EnterCMDMode+0xa4>
    8ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    8ab8:	98 17       	cp	r25, r24
    8aba:	79 f4       	brne	.+30     	; 0x8ada <Wifi_EnterCMDMode+0xa4>
    8abc:	20 e0       	ldi	r18, 0x00	; 0
    8abe:	9b 81       	ldd	r25, Y+3	; 0x03
    8ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    8ac2:	98 17       	cp	r25, r24
    8ac4:	59 f4       	brne	.+22     	; 0x8adc <Wifi_EnterCMDMode+0xa6>
    8ac6:	21 e0       	ldi	r18, 0x01	; 1
    8ac8:	09 c0       	rjmp	.+18     	; 0x8adc <Wifi_EnterCMDMode+0xa6>
    8aca:	c5 01       	movw	r24, r10
    8acc:	01 97       	sbiw	r24, 0x01	; 1
    8ace:	f1 f7       	brne	.-4      	; 0x8acc <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    8ad0:	0f 5f       	subi	r16, 0xFF	; 255
    8ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ad4:	0c 15       	cp	r16, r12
    8ad6:	1d 05       	cpc	r17, r13
    8ad8:	d0 f2       	brcs	.-76     	; 0x8a8e <Wifi_EnterCMDMode+0x58>
    8ada:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8adc:	82 2f       	mov	r24, r18
    8ade:	26 96       	adiw	r28, 0x06	; 6
    8ae0:	cd bf       	out	0x3d, r28	; 61
    8ae2:	de bf       	out	0x3e, r29	; 62
    8ae4:	cf 91       	pop	r28
    8ae6:	df 91       	pop	r29
    8ae8:	1f 91       	pop	r17
    8aea:	0f 91       	pop	r16
    8aec:	ff 90       	pop	r15
    8aee:	df 90       	pop	r13
    8af0:	cf 90       	pop	r12
    8af2:	bf 90       	pop	r11
    8af4:	af 90       	pop	r10
    8af6:	9f 90       	pop	r9
    8af8:	8f 90       	pop	r8
    8afa:	08 95       	ret

00008afc <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    8afc:	2f 92       	push	r2
    8afe:	3f 92       	push	r3
    8b00:	5f 92       	push	r5
    8b02:	6f 92       	push	r6
    8b04:	7f 92       	push	r7
    8b06:	8f 92       	push	r8
    8b08:	9f 92       	push	r9
    8b0a:	af 92       	push	r10
    8b0c:	bf 92       	push	r11
    8b0e:	cf 92       	push	r12
    8b10:	df 92       	push	r13
    8b12:	ef 92       	push	r14
    8b14:	ff 92       	push	r15
    8b16:	0f 93       	push	r16
    8b18:	1f 93       	push	r17
    8b1a:	df 93       	push	r29
    8b1c:	cf 93       	push	r28
    8b1e:	cd b7       	in	r28, 0x3d	; 61
    8b20:	de b7       	in	r29, 0x3e	; 62
    8b22:	e2 97       	sbiw	r28, 0x32	; 50
    8b24:	cd bf       	out	0x3d, r28	; 61
    8b26:	de bf       	out	0x3e, r29	; 62
    8b28:	08 2f       	mov	r16, r24
    8b2a:	d9 2e       	mov	r13, r25
    8b2c:	c6 2e       	mov	r12, r22
    8b2e:	77 2e       	mov	r7, r23
    8b30:	64 2e       	mov	r6, r20
    8b32:	55 2e       	mov	r5, r21
    8b34:	19 01       	movw	r2, r18
    char response [50];

	respLen = 0;
    8b36:	10 92 18 34 	sts	0x3418, r1
	toSendLen = strlen(toSend);
    8b3a:	a8 2f       	mov	r26, r24
    8b3c:	b9 2f       	mov	r27, r25
    8b3e:	fd 01       	movw	r30, r26
    8b40:	01 90       	ld	r0, Z+
    8b42:	00 20       	and	r0, r0
    8b44:	e9 f7       	brne	.-6      	; 0x8b40 <Wifi_SendCommand+0x44>
    8b46:	31 97       	sbiw	r30, 0x01	; 1
    8b48:	ea 1b       	sub	r30, r26
    8b4a:	fb 0b       	sbc	r31, r27
    8b4c:	e0 93 19 34 	sts	0x3419, r30
	if(strlen(ok) > strlen(ok2)){
    8b50:	e6 2f       	mov	r30, r22
    8b52:	f7 2f       	mov	r31, r23
    8b54:	df 01       	movw	r26, r30
    8b56:	0d 90       	ld	r0, X+
    8b58:	00 20       	and	r0, r0
    8b5a:	e9 f7       	brne	.-6      	; 0x8b56 <Wifi_SendCommand+0x5a>
    8b5c:	cd 01       	movw	r24, r26
    8b5e:	01 97       	sbiw	r24, 0x01	; 1
    8b60:	8e 1b       	sub	r24, r30
    8b62:	9f 0b       	sbc	r25, r31
    8b64:	e4 2f       	mov	r30, r20
    8b66:	f5 2f       	mov	r31, r21
    8b68:	df 01       	movw	r26, r30
    8b6a:	0d 90       	ld	r0, X+
    8b6c:	00 20       	and	r0, r0
    8b6e:	e9 f7       	brne	.-6      	; 0x8b6a <Wifi_SendCommand+0x6e>
    8b70:	11 97       	sbiw	r26, 0x01	; 1
    8b72:	ae 1b       	sub	r26, r30
    8b74:	bf 0b       	sbc	r27, r31
    8b76:	a8 17       	cp	r26, r24
    8b78:	b9 07       	cpc	r27, r25
    8b7a:	18 f4       	brcc	.+6      	; 0x8b82 <Wifi_SendCommand+0x86>
		okLen = strlen(ok2);
    8b7c:	a0 93 1a 34 	sts	0x341A, r26
    8b80:	02 c0       	rjmp	.+4      	; 0x8b86 <Wifi_SendCommand+0x8a>
	} else {
		okLen = strlen(ok);
    8b82:	80 93 1a 34 	sts	0x341A, r24
	}
    Wifi_SendString("",true);
    8b86:	85 ee       	ldi	r24, 0xE5	; 229
    8b88:	90 e2       	ldi	r25, 0x20	; 32
    8b8a:	61 e0       	ldi	r22, 0x01	; 1
    8b8c:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
	Debug_SendString("-----------------",true);
    8b90:	8e ee       	ldi	r24, 0xEE	; 238
    8b92:	90 e2       	ldi	r25, 0x20	; 32
    8b94:	61 e0       	ldi	r22, 0x01	; 1
    8b96:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
	Debug_SendString("Command: ",false);
    8b9a:	80 e0       	ldi	r24, 0x00	; 0
    8b9c:	91 e2       	ldi	r25, 0x21	; 33
    8b9e:	60 e0       	ldi	r22, 0x00	; 0
    8ba0:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
	Debug_SendString(toSend,true);
    8ba4:	80 2f       	mov	r24, r16
    8ba6:	9d 2d       	mov	r25, r13
    8ba8:	61 e0       	ldi	r22, 0x01	; 1
    8baa:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
	Wifi_ClearBuffer();
    8bae:	0e 94 93 02 	call	0x526	; 0x526 <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    8bb2:	80 2f       	mov	r24, r16
    8bb4:	9d 2d       	mov	r25, r13
    8bb6:	61 e0       	ldi	r22, 0x01	; 1
    8bb8:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
    8bbc:	ee 24       	eor	r14, r14
    8bbe:	ff 24       	eor	r15, r15
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
			response[respLen] = Wifi_GetByte(false);
    8bc0:	4e 01       	movw	r8, r28
    8bc2:	08 94       	sec
    8bc4:	81 1c       	adc	r8, r1
    8bc6:	91 1c       	adc	r9, r1
    8bc8:	96 e6       	ldi	r25, 0x66	; 102
    8bca:	a9 2e       	mov	r10, r25
    8bcc:	9e e0       	ldi	r25, 0x0E	; 14
    8bce:	b9 2e       	mov	r11, r25
    8bd0:	88 c0       	rjmp	.+272    	; 0x8ce2 <Wifi_SendCommand+0x1e6>
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    8bd2:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    8bd6:	88 23       	and	r24, r24
    8bd8:	09 f4       	brne	.+2      	; 0x8bdc <Wifi_SendCommand+0xe0>
    8bda:	7d c0       	rjmp	.+250    	; 0x8cd6 <Wifi_SendCommand+0x1da>
			response[respLen] = Wifi_GetByte(false);
    8bdc:	10 91 18 34 	lds	r17, 0x3418
    8be0:	80 e0       	ldi	r24, 0x00	; 0
    8be2:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    8be6:	f4 01       	movw	r30, r8
    8be8:	e1 0f       	add	r30, r17
    8bea:	f1 1d       	adc	r31, r1
    8bec:	80 83       	st	Z, r24
			respLen++;
    8bee:	80 91 18 34 	lds	r24, 0x3418
    8bf2:	8f 5f       	subi	r24, 0xFF	; 255
    8bf4:	80 93 18 34 	sts	0x3418, r24
			if(respLen == okLen + toSendLen + 3){		
    8bf8:	20 91 18 34 	lds	r18, 0x3418
    8bfc:	40 91 1a 34 	lds	r20, 0x341A
    8c00:	80 91 19 34 	lds	r24, 0x3419
    8c04:	30 e0       	ldi	r19, 0x00	; 0
    8c06:	90 e0       	ldi	r25, 0x00	; 0
    8c08:	84 0f       	add	r24, r20
    8c0a:	91 1d       	adc	r25, r1
    8c0c:	03 96       	adiw	r24, 0x03	; 3
    8c0e:	28 17       	cp	r18, r24
    8c10:	39 07       	cpc	r19, r25
    8c12:	09 f0       	breq	.+2      	; 0x8c16 <Wifi_SendCommand+0x11a>
    8c14:	60 c0       	rjmp	.+192    	; 0x8cd6 <Wifi_SendCommand+0x1da>
				
				Debug_SendString("Response: ",false);
    8c16:	8a e0       	ldi	r24, 0x0A	; 10
    8c18:	91 e2       	ldi	r25, 0x21	; 33
    8c1a:	60 e0       	ldi	r22, 0x00	; 0
    8c1c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    8c20:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(response[j]);
    8c22:	9e 01       	movw	r18, r28
    8c24:	2f 5f       	subi	r18, 0xFF	; 255
    8c26:	3f 4f       	sbci	r19, 0xFF	; 255
    8c28:	0d c0       	rjmp	.+26     	; 0x8c44 <Wifi_SendCommand+0x148>
    8c2a:	f9 01       	movw	r30, r18
    8c2c:	e9 0f       	add	r30, r25
    8c2e:	f1 1d       	adc	r31, r1
    8c30:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8c32:	80 91 a1 08 	lds	r24, 0x08A1
    8c36:	85 ff       	sbrs	r24, 5
    8c38:	fc cf       	rjmp	.-8      	; 0x8c32 <Wifi_SendCommand+0x136>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8c3a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8c3e:	e0 93 a0 08 	sts	0x08A0, r30
			response[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Response: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    8c42:	9f 5f       	subi	r25, 0xFF	; 255
    8c44:	80 91 18 34 	lds	r24, 0x3418
    8c48:	98 17       	cp	r25, r24
    8c4a:	78 f3       	brcs	.-34     	; 0x8c2a <Wifi_SendCommand+0x12e>
					Debug_SendByte(response[j]);
				}
				Debug_SendString(", want: \"",false);
    8c4c:	85 e1       	ldi	r24, 0x15	; 21
    8c4e:	91 e2       	ldi	r25, 0x21	; 33
    8c50:	60 e0       	ldi	r22, 0x00	; 0
    8c52:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
				Debug_SendString(ok,false);
    8c56:	8c 2d       	mov	r24, r12
    8c58:	97 2d       	mov	r25, r7
    8c5a:	60 e0       	ldi	r22, 0x00	; 0
    8c5c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8c60:	80 91 a1 08 	lds	r24, 0x08A1
    8c64:	85 ff       	sbrs	r24, 5
    8c66:	fc cf       	rjmp	.-8      	; 0x8c60 <Wifi_SendCommand+0x164>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8c68:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8c6c:	82 e2       	ldi	r24, 0x22	; 34
    8c6e:	80 93 a0 08 	sts	0x08A0, r24
				Debug_SendByte('"');
				Debug_SendString(", or: \"",false);
    8c72:	8f e1       	ldi	r24, 0x1F	; 31
    8c74:	91 e2       	ldi	r25, 0x21	; 33
    8c76:	60 e0       	ldi	r22, 0x00	; 0
    8c78:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
				Debug_SendString(ok2,false);
    8c7c:	86 2d       	mov	r24, r6
    8c7e:	95 2d       	mov	r25, r5
    8c80:	60 e0       	ldi	r22, 0x00	; 0
    8c82:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
				Debug_SendString("\"",true);
    8c86:	87 e2       	ldi	r24, 0x27	; 39
    8c88:	91 e2       	ldi	r25, 0x21	; 33
    8c8a:	61 e0       	ldi	r22, 0x01	; 1
    8c8c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
				
				if(strstr(response,toSend) == 0){     // make sure the command is present in the response
    8c90:	7e 01       	movw	r14, r28
    8c92:	08 94       	sec
    8c94:	e1 1c       	adc	r14, r1
    8c96:	f1 1c       	adc	r15, r1
    8c98:	c7 01       	movw	r24, r14
    8c9a:	60 2f       	mov	r22, r16
    8c9c:	7d 2d       	mov	r23, r13
    8c9e:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    8ca2:	00 97       	sbiw	r24, 0x00	; 0
    8ca4:	19 f4       	brne	.+6      	; 0x8cac <Wifi_SendCommand+0x1b0>
				   Debug_SendString("Command NOT found in response",true);
    8ca6:	89 e2       	ldi	r24, 0x29	; 41
    8ca8:	91 e2       	ldi	r25, 0x21	; 33
    8caa:	10 c0       	rjmp	.+32     	; 0x8ccc <Wifi_SendCommand+0x1d0>
				   return false;
				}   else {
				   //Debug_SendString("Command found in response",true);
				}

				if(strstr(response,ok) != 0){                   // check for ok response 1
    8cac:	c7 01       	movw	r24, r14
    8cae:	6c 2d       	mov	r22, r12
    8cb0:	77 2d       	mov	r23, r7
    8cb2:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    8cb6:	00 97       	sbiw	r24, 0x00	; 0
    8cb8:	c9 f4       	brne	.+50     	; 0x8cec <Wifi_SendCommand+0x1f0>
				    //Debug_SendString("ok response 1 found",true);
				    return true;
				} else {
				    if(strstr(response,ok2) != 0){              // check for ok response 1
    8cba:	c7 01       	movw	r24, r14
    8cbc:	66 2d       	mov	r22, r6
    8cbe:	75 2d       	mov	r23, r5
    8cc0:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    8cc4:	00 97       	sbiw	r24, 0x00	; 0
    8cc6:	91 f4       	brne	.+36     	; 0x8cec <Wifi_SendCommand+0x1f0>
				        //Debug_SendString("ok response 2 found",true);
				        return true;
				    } else {
				        Debug_SendString("NO ok resonses found",true);
    8cc8:	87 e4       	ldi	r24, 0x47	; 71
    8cca:	91 e2       	ldi	r25, 0x21	; 33
    8ccc:	61 e0       	ldi	r22, 0x01	; 1
    8cce:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    8cd2:	80 e0       	ldi	r24, 0x00	; 0
    8cd4:	0c c0       	rjmp	.+24     	; 0x8cee <Wifi_SendCommand+0x1f2>
    8cd6:	c5 01       	movw	r24, r10
    8cd8:	01 97       	sbiw	r24, 0x01	; 1
    8cda:	f1 f7       	brne	.-4      	; 0x8cd8 <Wifi_SendCommand+0x1dc>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    8cdc:	08 94       	sec
    8cde:	e1 1c       	adc	r14, r1
    8ce0:	f1 1c       	adc	r15, r1
    8ce2:	e2 14       	cp	r14, r2
    8ce4:	f3 04       	cpc	r15, r3
    8ce6:	08 f4       	brcc	.+2      	; 0x8cea <Wifi_SendCommand+0x1ee>
    8ce8:	74 cf       	rjmp	.-280    	; 0x8bd2 <Wifi_SendCommand+0xd6>
    8cea:	f3 cf       	rjmp	.-26     	; 0x8cd2 <Wifi_SendCommand+0x1d6>
    8cec:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8cee:	e2 96       	adiw	r28, 0x32	; 50
    8cf0:	cd bf       	out	0x3d, r28	; 61
    8cf2:	de bf       	out	0x3e, r29	; 62
    8cf4:	cf 91       	pop	r28
    8cf6:	df 91       	pop	r29
    8cf8:	1f 91       	pop	r17
    8cfa:	0f 91       	pop	r16
    8cfc:	ff 90       	pop	r15
    8cfe:	ef 90       	pop	r14
    8d00:	df 90       	pop	r13
    8d02:	cf 90       	pop	r12
    8d04:	bf 90       	pop	r11
    8d06:	af 90       	pop	r10
    8d08:	9f 90       	pop	r9
    8d0a:	8f 90       	pop	r8
    8d0c:	7f 90       	pop	r7
    8d0e:	6f 90       	pop	r6
    8d10:	5f 90       	pop	r5
    8d12:	3f 90       	pop	r3
    8d14:	2f 90       	pop	r2
    8d16:	08 95       	ret

00008d18 <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
    8d18:	cf 92       	push	r12
    8d1a:	df 92       	push	r13
    8d1c:	ef 92       	push	r14
    8d1e:	ff 92       	push	r15
    8d20:	1f 93       	push	r17
    8d22:	cf 93       	push	r28
    8d24:	df 93       	push	r29
    8d26:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    8d28:	0e 94 93 02 	call	0x526	; 0x526 <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    8d2c:	8c e5       	ldi	r24, 0x5C	; 92
    8d2e:	91 e2       	ldi	r25, 0x21	; 33
    8d30:	64 e6       	ldi	r22, 0x64	; 100
    8d32:	71 e2       	ldi	r23, 0x21	; 33
    8d34:	ab 01       	movw	r20, r22
    8d36:	97 01       	movw	r18, r14
    8d38:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    8d3c:	10 e0       	ldi	r17, 0x00	; 0
    8d3e:	c0 e0       	ldi	r28, 0x00	; 0
    8d40:	d0 e0       	ldi	r29, 0x00	; 0
    8d42:	26 e6       	ldi	r18, 0x66	; 102
    8d44:	c2 2e       	mov	r12, r18
    8d46:	2e e0       	ldi	r18, 0x0E	; 14
    8d48:	d2 2e       	mov	r13, r18
    8d4a:	1f c0       	rjmp	.+62     	; 0x8d8a <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    8d4c:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    8d50:	88 23       	and	r24, r24
    8d52:	b9 f0       	breq	.+46     	; 0x8d82 <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    8d54:	80 e0       	ldi	r24, 0x00	; 0
    8d56:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    8d5a:	e1 2f       	mov	r30, r17
    8d5c:	f0 e0       	ldi	r31, 0x00	; 0
    8d5e:	ed 5c       	subi	r30, 0xCD	; 205
    8d60:	f9 4b       	sbci	r31, 0xB9	; 185
    8d62:	80 83       	st	Z, r24
			tmp++;
    8d64:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    8d66:	11 31       	cpi	r17, 0x11	; 17
    8d68:	61 f4       	brne	.+24     	; 0x8d82 <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    8d6a:	8e e6       	ldi	r24, 0x6E	; 110
    8d6c:	91 e2       	ldi	r25, 0x21	; 33
    8d6e:	60 e0       	ldi	r22, 0x00	; 0
    8d70:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
				Debug_SendString(macAddr,true);
    8d74:	83 e3       	ldi	r24, 0x33	; 51
    8d76:	96 e4       	ldi	r25, 0x46	; 70
    8d78:	61 e0       	ldi	r22, 0x01	; 1
    8d7a:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    8d7e:	81 e0       	ldi	r24, 0x01	; 1
    8d80:	08 c0       	rjmp	.+16     	; 0x8d92 <Wifi_GetMac+0x7a>
    8d82:	c6 01       	movw	r24, r12
    8d84:	01 97       	sbiw	r24, 0x01	; 1
    8d86:	f1 f7       	brne	.-4      	; 0x8d84 <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    8d88:	21 96       	adiw	r28, 0x01	; 1
    8d8a:	ce 15       	cp	r28, r14
    8d8c:	df 05       	cpc	r29, r15
    8d8e:	f0 f2       	brcs	.-68     	; 0x8d4c <Wifi_GetMac+0x34>
    8d90:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8d92:	df 91       	pop	r29
    8d94:	cf 91       	pop	r28
    8d96:	1f 91       	pop	r17
    8d98:	ff 90       	pop	r15
    8d9a:	ef 90       	pop	r14
    8d9c:	df 90       	pop	r13
    8d9e:	cf 90       	pop	r12
    8da0:	08 95       	ret

00008da2 <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    8da2:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    8da4:	4c e7       	ldi	r20, 0x7C	; 124
    8da6:	51 e2       	ldi	r21, 0x21	; 33
    8da8:	87 e7       	ldi	r24, 0x77	; 119
    8daa:	91 e2       	ldi	r25, 0x21	; 33
    8dac:	ba 01       	movw	r22, r20
    8dae:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    8db2:	08 95       	ret

00008db4 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    8db4:	0f 93       	push	r16
    8db6:	1f 93       	push	r17
	fileName[0] = '/';
    8db8:	0d ee       	ldi	r16, 0xED	; 237
    8dba:	15 e4       	ldi	r17, 0x45	; 69
    8dbc:	2f e2       	ldi	r18, 0x2F	; 47
    8dbe:	20 93 ed 45 	sts	0x45ED, r18
	ltoa(var, fileName+1, 16);
    8dc2:	a8 01       	movw	r20, r16
    8dc4:	4f 5f       	subi	r20, 0xFF	; 255
    8dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    8dc8:	20 e1       	ldi	r18, 0x10	; 16
    8dca:	30 e0       	ldi	r19, 0x00	; 0
    8dcc:	0e 94 77 63 	call	0xc6ee	; 0xc6ee <ltoa>
	strcat(fileName, ".bt");
    8dd0:	c8 01       	movw	r24, r16
    8dd2:	61 e8       	ldi	r22, 0x81	; 129
    8dd4:	71 e2       	ldi	r23, 0x21	; 33
    8dd6:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
}
    8dda:	1f 91       	pop	r17
    8ddc:	0f 91       	pop	r16
    8dde:	08 95       	ret

00008de0 <__vector_77>:

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(TCD0_OVF_vect){
    8de0:	1f 92       	push	r1
    8de2:	0f 92       	push	r0
    8de4:	0f b6       	in	r0, 0x3f	; 63
    8de6:	0f 92       	push	r0
    8de8:	0b b6       	in	r0, 0x3b	; 59
    8dea:	0f 92       	push	r0
    8dec:	11 24       	eor	r1, r1
    8dee:	af 92       	push	r10
    8df0:	bf 92       	push	r11
    8df2:	cf 92       	push	r12
    8df4:	df 92       	push	r13
    8df6:	ef 92       	push	r14
    8df8:	ff 92       	push	r15
    8dfa:	0f 93       	push	r16
    8dfc:	1f 93       	push	r17
    8dfe:	2f 93       	push	r18
    8e00:	3f 93       	push	r19
    8e02:	4f 93       	push	r20
    8e04:	5f 93       	push	r21
    8e06:	6f 93       	push	r22
    8e08:	7f 93       	push	r23
    8e0a:	8f 93       	push	r24
    8e0c:	9f 93       	push	r25
    8e0e:	af 93       	push	r26
    8e10:	bf 93       	push	r27
    8e12:	ef 93       	push	r30
    8e14:	ff 93       	push	r31

    if(okToDisplayGUI){
    8e16:	80 91 72 34 	lds	r24, 0x3472
    8e1a:	88 23       	and	r24, r24
    8e1c:	09 f4       	brne	.+2      	; 0x8e20 <__vector_77+0x40>
    8e1e:	bf c5       	rjmp	.+2942   	; 0x999e <__vector_77+0xbbe>
        ssRefreshCounter++;
    8e20:	80 91 69 34 	lds	r24, 0x3469
    8e24:	90 91 6a 34 	lds	r25, 0x346A
    8e28:	01 96       	adiw	r24, 0x01	; 1
    8e2a:	80 93 69 34 	sts	0x3469, r24
    8e2e:	90 93 6a 34 	sts	0x346A, r25

        if(recording){
    8e32:	80 91 3b 34 	lds	r24, 0x343B
    8e36:	88 23       	and	r24, r24
    8e38:	09 f4       	brne	.+2      	; 0x8e3c <__vector_77+0x5c>
    8e3a:	43 c0       	rjmp	.+134    	; 0x8ec2 <__vector_77+0xe2>
            if(recordFileRestartCounter == 0){
    8e3c:	80 91 94 34 	lds	r24, 0x3494
    8e40:	88 23       	and	r24, r24
    8e42:	d1 f5       	brne	.+116    	; 0x8eb8 <__vector_77+0xd8>
                if(UNIX_time > timeToStopRecording){
    8e44:	20 91 36 34 	lds	r18, 0x3436
    8e48:	30 91 37 34 	lds	r19, 0x3437
    8e4c:	40 91 38 34 	lds	r20, 0x3438
    8e50:	50 91 39 34 	lds	r21, 0x3439
    8e54:	80 91 95 34 	lds	r24, 0x3495
    8e58:	90 91 96 34 	lds	r25, 0x3496
    8e5c:	a0 91 97 34 	lds	r26, 0x3497
    8e60:	b0 91 98 34 	lds	r27, 0x3498
    8e64:	82 17       	cp	r24, r18
    8e66:	93 07       	cpc	r25, r19
    8e68:	a4 07       	cpc	r26, r20
    8e6a:	b5 07       	cpc	r27, r21
    8e6c:	28 f5       	brcc	.+74     	; 0x8eb8 <__vector_77+0xd8>
	                restartingFile = true;
    8e6e:	81 e0       	ldi	r24, 0x01	; 1
    8e70:	80 93 80 34 	sts	0x3480, r24
	                recordFileRestartCounter = 0;
    8e74:	10 92 94 34 	sts	0x3494, r1
		            rs232Recording = false;
    8e78:	10 92 30 34 	sts	0x3430, r1
                    recording = false;
    8e7c:	10 92 3b 34 	sts	0x343B, r1
	                okToCloseLogFile = true;
    8e80:	80 93 71 34 	sts	0x3471, r24
	                while(okToCloseLogFile);
    8e84:	80 91 71 34 	lds	r24, 0x3471
    8e88:	88 23       	and	r24, r24
    8e8a:	e1 f7       	brne	.-8      	; 0x8e84 <__vector_77+0xa4>
	                if(percentDiskUsed < 950){
    8e8c:	80 91 a9 34 	lds	r24, 0x34A9
    8e90:	90 91 aa 34 	lds	r25, 0x34AA
    8e94:	a0 91 ab 34 	lds	r26, 0x34AB
    8e98:	b0 91 ac 34 	lds	r27, 0x34AC
    8e9c:	86 5b       	subi	r24, 0xB6	; 182
    8e9e:	93 40       	sbci	r25, 0x03	; 3
    8ea0:	a0 40       	sbci	r26, 0x00	; 0
    8ea2:	b0 40       	sbci	r27, 0x00	; 0
    8ea4:	38 f4       	brcc	.+14     	; 0x8eb4 <__vector_77+0xd4>
                        okToOpenLogFile = true;
    8ea6:	81 e0       	ldi	r24, 0x01	; 1
    8ea8:	80 93 6f 34 	sts	0x346F, r24
	                    while(!recording);
    8eac:	80 91 3b 34 	lds	r24, 0x343B
    8eb0:	88 23       	and	r24, r24
    8eb2:	e1 f3       	breq	.-8      	; 0x8eac <__vector_77+0xcc>
	                }
	                restartingFile = false;
    8eb4:	10 92 80 34 	sts	0x3480, r1
	            }
	        }
	        recordFileRestartCounter++;
    8eb8:	80 91 94 34 	lds	r24, 0x3494
    8ebc:	8f 5f       	subi	r24, 0xFF	; 255
    8ebe:	80 93 94 34 	sts	0x3494, r24


	// controls


        if(currentMode == recordMode && Dpad_CheckButton(Down)){
    8ec2:	80 91 68 34 	lds	r24, 0x3468
    8ec6:	88 23       	and	r24, r24
    8ec8:	29 f4       	brne	.+10     	; 0x8ed4 <__vector_77+0xf4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8eca:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8ece:	8c 77       	andi	r24, 0x7C	; 124
    8ed0:	83 ff       	sbrs	r24, 3
    8ed2:	1a c5       	rjmp	.+2612   	; 0x9908 <__vector_77+0xb28>
		    currentMode = sensorMode;
		    display_clearBuffer();
		    display_writeBufferToScreen();
	    } else if(currentMode == sensorMode && Dpad_CheckButton(Up)){
    8ed4:	80 91 68 34 	lds	r24, 0x3468
    8ed8:	81 30       	cpi	r24, 0x01	; 1
    8eda:	69 f4       	brne	.+26     	; 0x8ef6 <__vector_77+0x116>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8edc:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8ee0:	8c 77       	andi	r24, 0x7C	; 124
    8ee2:	82 fd       	sbrc	r24, 2
    8ee4:	08 c0       	rjmp	.+16     	; 0x8ef6 <__vector_77+0x116>
    8ee6:	18 c5       	rjmp	.+2608   	; 0x9918 <__vector_77+0xb38>
    8ee8:	ca 01       	movw	r24, r20
    8eea:	01 97       	sbiw	r24, 0x01	; 1
    8eec:	f1 f7       	brne	.-4      	; 0x8eea <__vector_77+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8eee:	21 50       	subi	r18, 0x01	; 1
    8ef0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8ef2:	d1 f7       	brne	.-12     	; 0x8ee8 <__vector_77+0x108>
    8ef4:	29 c1       	rjmp	.+594    	; 0x9148 <__vector_77+0x368>
		    currentMode = recordMode;
		    display_clearBuffer();
		    display_writeBufferToScreen();
		    _delay_ms(400);
	    } else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up) && !restartingFile){					// waiting to start recording
    8ef6:	80 91 68 34 	lds	r24, 0x3468
    8efa:	88 23       	and	r24, r24
    8efc:	f9 f4       	brne	.+62     	; 0x8f3c <__vector_77+0x15c>
    8efe:	80 91 3b 34 	lds	r24, 0x343B
    8f02:	88 23       	and	r24, r24
    8f04:	d9 f4       	brne	.+54     	; 0x8f3c <__vector_77+0x15c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8f06:	80 91 a8 06 	lds	r24, 0x06A8
    8f0a:	80 fd       	sbrc	r24, 0
    8f0c:	17 c0       	rjmp	.+46     	; 0x8f3c <__vector_77+0x15c>
    8f0e:	0f c5       	rjmp	.+2590   	; 0x992e <__vector_77+0xb4e>
    8f10:	80 91 80 34 	lds	r24, 0x3480
    8f14:	88 23       	and	r24, r24
    8f16:	91 f4       	brne	.+36     	; 0x8f3c <__vector_77+0x15c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8f18:	e0 e2       	ldi	r30, 0x20	; 32
    8f1a:	f6 e0       	ldi	r31, 0x06	; 6
    8f1c:	82 e0       	ldi	r24, 0x02	; 2
    8f1e:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8f20:	81 e0       	ldi	r24, 0x01	; 1
    8f22:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Clear(sd_Red);
		    Leds_Set(sd_Green);
		    if(connected){
    8f24:	80 91 24 34 	lds	r24, 0x3424
    8f28:	88 23       	and	r24, r24
    8f2a:	21 f0       	breq	.+8      	; 0x8f34 <__vector_77+0x154>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8f2c:	80 e8       	ldi	r24, 0x80	; 128
    8f2e:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8f30:	80 e4       	ldi	r24, 0x40	; 64
    8f32:	7b c0       	rjmp	.+246    	; 0x902a <__vector_77+0x24a>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8f34:	80 e4       	ldi	r24, 0x40	; 64
    8f36:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8f38:	80 e8       	ldi	r24, 0x80	; 128
    8f3a:	77 c0       	rjmp	.+238    	; 0x902a <__vector_77+0x24a>
                Leds_Set(wifi_Green);
		    } else {
		        Leds_Clear(wifi_Green);
                Leds_Set(wifi_Red);
		    }
	    } else if(currentMode == recordMode && !recording && !SD_Inserted()){
    8f3c:	80 91 68 34 	lds	r24, 0x3468
    8f40:	88 23       	and	r24, r24
    8f42:	79 f4       	brne	.+30     	; 0x8f62 <__vector_77+0x182>
    8f44:	80 91 3b 34 	lds	r24, 0x343B
    8f48:	88 23       	and	r24, r24
    8f4a:	59 f4       	brne	.+22     	; 0x8f62 <__vector_77+0x182>
    8f4c:	80 91 a8 06 	lds	r24, 0x06A8
    8f50:	80 ff       	sbrs	r24, 0
    8f52:	07 c0       	rjmp	.+14     	; 0x8f62 <__vector_77+0x182>
    8f54:	e0 e2       	ldi	r30, 0x20	; 32
    8f56:	f6 e0       	ldi	r31, 0x06	; 6
    8f58:	82 e0       	ldi	r24, 0x02	; 2
    8f5a:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8f5c:	81 e0       	ldi	r24, 0x01	; 1
    8f5e:	86 83       	std	Z+6, r24	; 0x06
    8f60:	f3 c0       	rjmp	.+486    	; 0x9148 <__vector_77+0x368>
		    Leds_Set(sd_Red);
		    Leds_Clear(sd_Green);
	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){
    8f62:	80 91 68 34 	lds	r24, 0x3468
    8f66:	88 23       	and	r24, r24
    8f68:	09 f0       	breq	.+2      	; 0x8f6c <__vector_77+0x18c>
    8f6a:	61 c0       	rjmp	.+194    	; 0x902e <__vector_77+0x24e>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8f6c:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8f70:	8c 77       	andi	r24, 0x7C	; 124
    8f72:	82 fd       	sbrc	r24, 2
    8f74:	5c c0       	rjmp	.+184    	; 0x902e <__vector_77+0x24e>
    8f76:	e1 c4       	rjmp	.+2498   	; 0x993a <__vector_77+0xb5a>
            if(percentDiskUsed < 950){
    8f78:	80 91 a9 34 	lds	r24, 0x34A9
    8f7c:	90 91 aa 34 	lds	r25, 0x34AA
    8f80:	a0 91 ab 34 	lds	r26, 0x34AB
    8f84:	b0 91 ac 34 	lds	r27, 0x34AC
    8f88:	86 5b       	subi	r24, 0xB6	; 182
    8f8a:	93 40       	sbci	r25, 0x03	; 3
    8f8c:	a0 40       	sbci	r26, 0x00	; 0
    8f8e:	b0 40       	sbci	r27, 0x00	; 0
    8f90:	08 f0       	brcs	.+2      	; 0x8f94 <__vector_77+0x1b4>
    8f92:	46 c0       	rjmp	.+140    	; 0x9020 <__vector_77+0x240>
                display_putString("Recording      0m",0,0,System5x7);
    8f94:	85 e8       	ldi	r24, 0x85	; 133
    8f96:	91 e2       	ldi	r25, 0x21	; 33
    8f98:	60 e0       	ldi	r22, 0x00	; 0
    8f9a:	40 e0       	ldi	r20, 0x00	; 0
    8f9c:	28 ea       	ldi	r18, 0xA8	; 168
    8f9e:	31 e3       	ldi	r19, 0x31	; 49
    8fa0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
                display_drawLine(1,60,7,60,true);		// up arrow
    8fa4:	81 e0       	ldi	r24, 0x01	; 1
    8fa6:	6c e3       	ldi	r22, 0x3C	; 60
    8fa8:	47 e0       	ldi	r20, 0x07	; 7
    8faa:	2c e3       	ldi	r18, 0x3C	; 60
    8fac:	01 e0       	ldi	r16, 0x01	; 1
    8fae:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		        display_drawPixel(2,59,true);
    8fb2:	82 e0       	ldi	r24, 0x02	; 2
    8fb4:	6b e3       	ldi	r22, 0x3B	; 59
    8fb6:	41 e0       	ldi	r20, 0x01	; 1
    8fb8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		        display_drawPixel(3,58,true);
    8fbc:	83 e0       	ldi	r24, 0x03	; 3
    8fbe:	6a e3       	ldi	r22, 0x3A	; 58
    8fc0:	41 e0       	ldi	r20, 0x01	; 1
    8fc2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
                display_drawPixel(2,61,true);
    8fc6:	82 e0       	ldi	r24, 0x02	; 2
    8fc8:	6d e3       	ldi	r22, 0x3D	; 61
    8fca:	41 e0       	ldi	r20, 0x01	; 1
    8fcc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
                display_drawPixel(3,62,true);
    8fd0:	83 e0       	ldi	r24, 0x03	; 3
    8fd2:	6e e3       	ldi	r22, 0x3E	; 62
    8fd4:	41 e0       	ldi	r20, 0x01	; 1
    8fd6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		        display_writeBufferToScreen();
    8fda:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

                okToGetRemainingSpace = true;
    8fde:	81 e0       	ldi	r24, 0x01	; 1
    8fe0:	80 93 b7 4c 	sts	0x4CB7, r24
                while(!okToGetRemainingSpace);
    8fe4:	80 91 b7 4c 	lds	r24, 0x4CB7
    8fe8:	88 23       	and	r24, r24
    8fea:	e1 f3       	breq	.-8      	; 0x8fe4 <__vector_77+0x204>
    8fec:	e0 e2       	ldi	r30, 0x20	; 32
    8fee:	f6 e0       	ldi	r31, 0x06	; 6
    8ff0:	91 e0       	ldi	r25, 0x01	; 1
    8ff2:	96 83       	std	Z+6, r25	; 0x06
		        Leds_Clear(wifi_Green);
		        Leds_Clear(wifi_Red);
		        Leds_Clear(ext_Green);
		        Leds_Clear(ext_Red);

                okToOpenLogFile = true;
    8ff4:	82 e0       	ldi	r24, 0x02	; 2
    8ff6:	86 83       	std	Z+6, r24	; 0x06
    8ff8:	80 e4       	ldi	r24, 0x40	; 64
    8ffa:	86 83       	std	Z+6, r24	; 0x06
    8ffc:	80 e8       	ldi	r24, 0x80	; 128
    8ffe:	86 83       	std	Z+6, r24	; 0x06
    9000:	80 e1       	ldi	r24, 0x10	; 16
    9002:	86 83       	std	Z+6, r24	; 0x06
    9004:	80 e2       	ldi	r24, 0x20	; 32
    9006:	86 83       	std	Z+6, r24	; 0x06
    9008:	90 93 6f 34 	sts	0x346F, r25
    900c:	84 ef       	ldi	r24, 0xF4	; 244
    900e:	91 e0       	ldi	r25, 0x01	; 1
    9010:	20 e7       	ldi	r18, 0x70	; 112
    9012:	31 e0       	ldi	r19, 0x01	; 1
    9014:	f9 01       	movw	r30, r18
    9016:	31 97       	sbiw	r30, 0x01	; 1
    9018:	f1 f7       	brne	.-4      	; 0x9016 <__vector_77+0x236>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    901a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    901c:	d9 f7       	brne	.-10     	; 0x9014 <__vector_77+0x234>
    901e:	94 c0       	rjmp	.+296    	; 0x9148 <__vector_77+0x368>
    9020:	e0 e2       	ldi	r30, 0x20	; 32
    9022:	f6 e0       	ldi	r31, 0x06	; 6
    9024:	81 e0       	ldi	r24, 0x01	; 1
    9026:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9028:	82 e0       	ldi	r24, 0x02	; 2
    902a:	85 83       	std	Z+5, r24	; 0x05
    902c:	8d c0       	rjmp	.+282    	; 0x9148 <__vector_77+0x368>
		        Leds_Set(sd_Red);

            }


	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){
    902e:	80 91 68 34 	lds	r24, 0x3468
    9032:	88 23       	and	r24, r24
    9034:	09 f0       	breq	.+2      	; 0x9038 <__vector_77+0x258>
    9036:	88 c0       	rjmp	.+272    	; 0x9148 <__vector_77+0x368>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    9038:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    903c:	8c 77       	andi	r24, 0x7C	; 124
    903e:	82 fd       	sbrc	r24, 2
    9040:	83 c0       	rjmp	.+262    	; 0x9148 <__vector_77+0x368>
    9042:	81 c4       	rjmp	.+2306   	; 0x9946 <__vector_77+0xb66>
		    rs232Recording = false;
    9044:	10 92 30 34 	sts	0x3430, r1
		    recording = false;
    9048:	10 92 3b 34 	sts	0x343B, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    904c:	10 92 3f 34 	sts	0x343F, r1
  	temperatureBufferToWriteTo = 1;
    9050:	81 e0       	ldi	r24, 0x01	; 1
    9052:	80 93 55 31 	sts	0x3155, r24
	okToSendTemperatureBuffer1 = false;
    9056:	10 92 3d 34 	sts	0x343D, r1
	okToSendTemperatureBuffer2 = false;
    905a:	10 92 3e 34 	sts	0x343E, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    905e:	10 92 45 34 	sts	0x3445, r1
	humidityBufferToWriteTo = 1;
    9062:	80 93 57 31 	sts	0x3157, r24
	okToSendHumidityBuffer1 = false;
    9066:	10 92 43 34 	sts	0x3443, r1
	okToSendHumidityBuffer2 = false;
    906a:	10 92 44 34 	sts	0x3444, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    906e:	10 92 42 34 	sts	0x3442, r1
	pressureBufferToWriteTo = 1;
    9072:	80 93 56 31 	sts	0x3156, r24
	okToSendPressureBuffer1 = false;
    9076:	10 92 40 34 	sts	0x3440, r1
	okToSendPressureBuffer2 = false;
    907a:	10 92 41 34 	sts	0x3441, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    907e:	10 92 48 34 	sts	0x3448, r1
    9082:	10 92 49 34 	sts	0x3449, r1
	microphoneBufferToWriteTo = 1;
    9086:	80 93 58 31 	sts	0x3158, r24
	okToSendMicrophoneBuffer1 = false;
    908a:	10 92 46 34 	sts	0x3446, r1
	okToSendMicrophoneBuffer2 = false;
    908e:	10 92 47 34 	sts	0x3447, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    9092:	10 92 4c 34 	sts	0x344C, r1
	lightBufferToWriteTo = 1;
    9096:	80 93 59 31 	sts	0x3159, r24
	okToSendLightBuffer1 = false;
    909a:	10 92 4a 34 	sts	0x344A, r1
	okToSendLightBuffer2 = false;
    909e:	10 92 4b 34 	sts	0x344B, r1
		    Sensors_ResetTemperatureBuffers();
		    Sensors_ResetHumidityBuffers();
		    Sensors_ResetPressureBuffers();
		    Sensors_ResetMicrophoneBuffers();
		    Sensors_ResetLightBuffers();
		    okToCloseLogFile = true;
    90a2:	80 93 71 34 	sts	0x3471, r24


		    display_putString("Paused           ",0,0,System5x7);
    90a6:	87 e9       	ldi	r24, 0x97	; 151
    90a8:	91 e2       	ldi	r25, 0x21	; 33
    90aa:	60 e0       	ldi	r22, 0x00	; 0
    90ac:	40 e0       	ldi	r20, 0x00	; 0
    90ae:	28 ea       	ldi	r18, 0xA8	; 168
    90b0:	31 e3       	ldi	r19, 0x31	; 49
    90b2:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		    display_drawLine(1,60,7,60,true);		// up arrow
    90b6:	81 e0       	ldi	r24, 0x01	; 1
    90b8:	6c e3       	ldi	r22, 0x3C	; 60
    90ba:	47 e0       	ldi	r20, 0x07	; 7
    90bc:	2c e3       	ldi	r18, 0x3C	; 60
    90be:	01 e0       	ldi	r16, 0x01	; 1
    90c0:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		    display_drawPixel(2,59,true);
    90c4:	82 e0       	ldi	r24, 0x02	; 2
    90c6:	6b e3       	ldi	r22, 0x3B	; 59
    90c8:	41 e0       	ldi	r20, 0x01	; 1
    90ca:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(3,58,true);
    90ce:	83 e0       	ldi	r24, 0x03	; 3
    90d0:	6a e3       	ldi	r22, 0x3A	; 58
    90d2:	41 e0       	ldi	r20, 0x01	; 1
    90d4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(2,61,true);
    90d8:	82 e0       	ldi	r24, 0x02	; 2
    90da:	6d e3       	ldi	r22, 0x3D	; 61
    90dc:	41 e0       	ldi	r20, 0x01	; 1
    90de:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(3,62,true);
    90e2:	83 e0       	ldi	r24, 0x03	; 3
    90e4:	6e e3       	ldi	r22, 0x3E	; 62
    90e6:	41 e0       	ldi	r20, 0x01	; 1
    90e8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_writeBufferToScreen();
    90ec:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

            if(timeIsValid || demoMode){
    90f0:	80 91 81 34 	lds	r24, 0x3481
    90f4:	88 23       	and	r24, r24
    90f6:	21 f4       	brne	.+8      	; 0x9100 <__vector_77+0x320>
    90f8:	80 91 0e 34 	lds	r24, 0x340E
    90fc:	88 23       	and	r24, r24
    90fe:	11 f0       	breq	.+4      	; 0x9104 <__vector_77+0x324>
    9100:	80 e4       	ldi	r24, 0x40	; 64
    9102:	01 c0       	rjmp	.+2      	; 0x9106 <__vector_77+0x326>
    9104:	80 e8       	ldi	r24, 0x80	; 128
    9106:	e0 e2       	ldi	r30, 0x20	; 32
    9108:	f6 e0       	ldi	r31, 0x06	; 6
    910a:	85 83       	std	Z+5, r24	; 0x05
    910c:	80 91 a8 06 	lds	r24, 0x06A8
    9110:	80 ff       	sbrs	r24, 0
    9112:	1f c4       	rjmp	.+2110   	; 0x9952 <__vector_77+0xb72>
    9114:	82 e0       	ldi	r24, 0x02	; 2
    9116:	e0 e2       	ldi	r30, 0x20	; 32
    9118:	f6 e0       	ldi	r31, 0x06	; 6
    911a:	85 83       	std	Z+5, r24	; 0x05
		    if(SD_Inserted()){
			    Leds_Set(sd_Green);
		    } else {
			    Leds_Set(sd_Red);
		    }
		    if(!chargeComplete && SD2_Inserted()){
    911c:	80 91 34 34 	lds	r24, 0x3434
    9120:	88 23       	and	r24, r24
    9122:	29 f4       	brne	.+10     	; 0x912e <__vector_77+0x34e>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    9124:	80 91 a8 06 	lds	r24, 0x06A8
    9128:	81 fd       	sbrc	r24, 1
    912a:	05 c0       	rjmp	.+10     	; 0x9136 <__vector_77+0x356>
    912c:	14 c4       	rjmp	.+2088   	; 0x9956 <__vector_77+0xb76>
    912e:	80 91 a8 06 	lds	r24, 0x06A8
    9132:	81 ff       	sbrs	r24, 1
    9134:	15 c4       	rjmp	.+2090   	; 0x9960 <__vector_77+0xb80>
    9136:	88 e8       	ldi	r24, 0x88	; 136
    9138:	93 e1       	ldi	r25, 0x13	; 19
    913a:	20 e7       	ldi	r18, 0x70	; 112
    913c:	31 e0       	ldi	r19, 0x01	; 1
    913e:	f9 01       	movw	r30, r18
    9140:	31 97       	sbiw	r30, 0x01	; 1
    9142:	f1 f7       	brne	.-4      	; 0x9140 <__vector_77+0x360>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9146:	d9 f7       	brne	.-10     	; 0x913e <__vector_77+0x35e>
		    _delay_ms(500);
	    }

	// load displays

	    if(currentMode == recordMode){
    9148:	80 91 68 34 	lds	r24, 0x3468
    914c:	88 23       	and	r24, r24
    914e:	09 f0       	breq	.+2      	; 0x9152 <__vector_77+0x372>
    9150:	6f c2       	rjmp	.+1246   	; 0x9630 <__vector_77+0x850>
		    if(recording){
    9152:	80 91 3b 34 	lds	r24, 0x343B
    9156:	88 23       	and	r24, r24
    9158:	09 f4       	brne	.+2      	; 0x915c <__vector_77+0x37c>
    915a:	40 c0       	rjmp	.+128    	; 0x91dc <__vector_77+0x3fc>
			    sprintf(temp2, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    915c:	60 91 36 34 	lds	r22, 0x3436
    9160:	70 91 37 34 	lds	r23, 0x3437
    9164:	80 91 38 34 	lds	r24, 0x3438
    9168:	90 91 39 34 	lds	r25, 0x3439
    916c:	ad b7       	in	r26, 0x3d	; 61
    916e:	be b7       	in	r27, 0x3e	; 62
    9170:	18 97       	sbiw	r26, 0x08	; 8
    9172:	ad bf       	out	0x3d, r26	; 61
    9174:	be bf       	out	0x3e, r27	; 62
    9176:	0d b7       	in	r16, 0x3d	; 61
    9178:	1e b7       	in	r17, 0x3e	; 62
    917a:	0f 5f       	subi	r16, 0xFF	; 255
    917c:	1f 4f       	sbci	r17, 0xFF	; 255
    917e:	4b eb       	ldi	r20, 0xBB	; 187
    9180:	e4 2e       	mov	r14, r20
    9182:	4d e3       	ldi	r20, 0x3D	; 61
    9184:	f4 2e       	mov	r15, r20
    9186:	11 96       	adiw	r26, 0x01	; 1
    9188:	ed 92       	st	X+, r14
    918a:	fc 92       	st	X, r15
    918c:	12 97       	sbiw	r26, 0x02	; 2
    918e:	29 ea       	ldi	r18, 0xA9	; 169
    9190:	31 e2       	ldi	r19, 0x21	; 33
    9192:	f8 01       	movw	r30, r16
    9194:	22 83       	std	Z+2, r18	; 0x02
    9196:	33 83       	std	Z+3, r19	; 0x03
    9198:	20 91 0a 34 	lds	r18, 0x340A
    919c:	30 91 0b 34 	lds	r19, 0x340B
    91a0:	40 91 0c 34 	lds	r20, 0x340C
    91a4:	50 91 0d 34 	lds	r21, 0x340D
    91a8:	62 1b       	sub	r22, r18
    91aa:	73 0b       	sbc	r23, r19
    91ac:	84 0b       	sbc	r24, r20
    91ae:	95 0b       	sbc	r25, r21
    91b0:	2c e3       	ldi	r18, 0x3C	; 60
    91b2:	30 e0       	ldi	r19, 0x00	; 0
    91b4:	40 e0       	ldi	r20, 0x00	; 0
    91b6:	50 e0       	ldi	r21, 0x00	; 0
    91b8:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    91bc:	d8 01       	movw	r26, r16
    91be:	14 96       	adiw	r26, 0x04	; 4
    91c0:	2d 93       	st	X+, r18
    91c2:	3d 93       	st	X+, r19
    91c4:	4d 93       	st	X+, r20
    91c6:	5c 93       	st	X, r21
    91c8:	17 97       	sbiw	r26, 0x07	; 7
    91ca:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
			    display_putString(temp2,0,0,System5x7);
    91ce:	ed b7       	in	r30, 0x3d	; 61
    91d0:	fe b7       	in	r31, 0x3e	; 62
    91d2:	38 96       	adiw	r30, 0x08	; 8
    91d4:	ed bf       	out	0x3d, r30	; 61
    91d6:	fe bf       	out	0x3e, r31	; 62
    91d8:	c7 01       	movw	r24, r14
    91da:	02 c0       	rjmp	.+4      	; 0x91e0 <__vector_77+0x400>
		    } else {
			    display_putString("Paused           ",0,0,System5x7);
    91dc:	87 e9       	ldi	r24, 0x97	; 151
    91de:	91 e2       	ldi	r25, 0x21	; 33
    91e0:	60 e0       	ldi	r22, 0x00	; 0
    91e2:	40 e0       	ldi	r20, 0x00	; 0
    91e4:	28 ea       	ldi	r18, 0xA8	; 168
    91e6:	31 e3       	ldi	r19, 0x31	; 49
    91e8:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		    }

		    display_drawLine(1,60,7,60,true);		// up arrow
    91ec:	81 e0       	ldi	r24, 0x01	; 1
    91ee:	6c e3       	ldi	r22, 0x3C	; 60
    91f0:	47 e0       	ldi	r20, 0x07	; 7
    91f2:	2c e3       	ldi	r18, 0x3C	; 60
    91f4:	01 e0       	ldi	r16, 0x01	; 1
    91f6:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		    display_drawPixel(2,59,true);
    91fa:	82 e0       	ldi	r24, 0x02	; 2
    91fc:	6b e3       	ldi	r22, 0x3B	; 59
    91fe:	41 e0       	ldi	r20, 0x01	; 1
    9200:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(3,58,true);
    9204:	83 e0       	ldi	r24, 0x03	; 3
    9206:	6a e3       	ldi	r22, 0x3A	; 58
    9208:	41 e0       	ldi	r20, 0x01	; 1
    920a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(2,61,true);
    920e:	82 e0       	ldi	r24, 0x02	; 2
    9210:	6d e3       	ldi	r22, 0x3D	; 61
    9212:	41 e0       	ldi	r20, 0x01	; 1
    9214:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(3,62,true);
    9218:	83 e0       	ldi	r24, 0x03	; 3
    921a:	6e e3       	ldi	r22, 0x3E	; 62
    921c:	41 e0       	ldi	r20, 0x01	; 1
    921e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>

		    sprintf(temp2, "Uploading    %3u", uploadPercentBS);
    9222:	20 91 6c 34 	lds	r18, 0x346C
    9226:	00 d0       	rcall	.+0      	; 0x9228 <__vector_77+0x448>
    9228:	00 d0       	rcall	.+0      	; 0x922a <__vector_77+0x44a>
    922a:	ed b7       	in	r30, 0x3d	; 61
    922c:	fe b7       	in	r31, 0x3e	; 62
    922e:	31 96       	adiw	r30, 0x01	; 1
    9230:	3b eb       	ldi	r19, 0xBB	; 187
    9232:	a3 2e       	mov	r10, r19
    9234:	3d e3       	ldi	r19, 0x3D	; 61
    9236:	b3 2e       	mov	r11, r19
    9238:	ad b7       	in	r26, 0x3d	; 61
    923a:	be b7       	in	r27, 0x3e	; 62
    923c:	11 96       	adiw	r26, 0x01	; 1
    923e:	ad 92       	st	X+, r10
    9240:	bc 92       	st	X, r11
    9242:	12 97       	sbiw	r26, 0x02	; 2
    9244:	8b eb       	ldi	r24, 0xBB	; 187
    9246:	91 e2       	ldi	r25, 0x21	; 33
    9248:	82 83       	std	Z+2, r24	; 0x02
    924a:	93 83       	std	Z+3, r25	; 0x03
    924c:	24 83       	std	Z+4, r18	; 0x04
    924e:	15 82       	std	Z+5, r1	; 0x05
    9250:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    strcat(temp2,"%");
    9254:	ed b7       	in	r30, 0x3d	; 61
    9256:	fe b7       	in	r31, 0x3e	; 62
    9258:	36 96       	adiw	r30, 0x06	; 6
    925a:	ed bf       	out	0x3d, r30	; 61
    925c:	fe bf       	out	0x3e, r31	; 62
    925e:	c5 01       	movw	r24, r10
    9260:	6c ec       	ldi	r22, 0xCC	; 204
    9262:	71 e2       	ldi	r23, 0x21	; 33
    9264:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
		    display_putString(temp2,1,0,System5x7);
    9268:	c5 01       	movw	r24, r10
    926a:	61 e0       	ldi	r22, 0x01	; 1
    926c:	40 e0       	ldi	r20, 0x00	; 0
    926e:	28 ea       	ldi	r18, 0xA8	; 168
    9270:	31 e3       	ldi	r19, 0x31	; 49
    9272:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
            sprintf(temp2,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
    9276:	c0 90 a9 34 	lds	r12, 0x34A9
    927a:	d0 90 aa 34 	lds	r13, 0x34AA
    927e:	e0 90 ab 34 	lds	r14, 0x34AB
    9282:	f0 90 ac 34 	lds	r15, 0x34AC
    9286:	2d b7       	in	r18, 0x3d	; 61
    9288:	3e b7       	in	r19, 0x3e	; 62
    928a:	2c 50       	subi	r18, 0x0C	; 12
    928c:	30 40       	sbci	r19, 0x00	; 0
    928e:	2d bf       	out	0x3d, r18	; 61
    9290:	3e bf       	out	0x3e, r19	; 62
    9292:	0d b7       	in	r16, 0x3d	; 61
    9294:	1e b7       	in	r17, 0x3e	; 62
    9296:	0f 5f       	subi	r16, 0xFF	; 255
    9298:	1f 4f       	sbci	r17, 0xFF	; 255
    929a:	ad b7       	in	r26, 0x3d	; 61
    929c:	be b7       	in	r27, 0x3e	; 62
    929e:	11 96       	adiw	r26, 0x01	; 1
    92a0:	ad 92       	st	X+, r10
    92a2:	bc 92       	st	X, r11
    92a4:	12 97       	sbiw	r26, 0x02	; 2
    92a6:	8e ec       	ldi	r24, 0xCE	; 206
    92a8:	91 e2       	ldi	r25, 0x21	; 33
    92aa:	f8 01       	movw	r30, r16
    92ac:	82 83       	std	Z+2, r24	; 0x02
    92ae:	93 83       	std	Z+3, r25	; 0x03
    92b0:	c7 01       	movw	r24, r14
    92b2:	b6 01       	movw	r22, r12
    92b4:	2a e0       	ldi	r18, 0x0A	; 10
    92b6:	30 e0       	ldi	r19, 0x00	; 0
    92b8:	40 e0       	ldi	r20, 0x00	; 0
    92ba:	50 e0       	ldi	r21, 0x00	; 0
    92bc:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    92c0:	d8 01       	movw	r26, r16
    92c2:	14 96       	adiw	r26, 0x04	; 4
    92c4:	2d 93       	st	X+, r18
    92c6:	3d 93       	st	X+, r19
    92c8:	4d 93       	st	X+, r20
    92ca:	5c 93       	st	X, r21
    92cc:	17 97       	sbiw	r26, 0x07	; 7
    92ce:	c7 01       	movw	r24, r14
    92d0:	b6 01       	movw	r22, r12
    92d2:	2a e0       	ldi	r18, 0x0A	; 10
    92d4:	30 e0       	ldi	r19, 0x00	; 0
    92d6:	40 e0       	ldi	r20, 0x00	; 0
    92d8:	50 e0       	ldi	r21, 0x00	; 0
    92da:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    92de:	f8 01       	movw	r30, r16
    92e0:	60 87       	std	Z+8, r22	; 0x08
    92e2:	71 87       	std	Z+9, r23	; 0x09
    92e4:	82 87       	std	Z+10, r24	; 0x0a
    92e6:	93 87       	std	Z+11, r25	; 0x0b
    92e8:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    strcat(temp2,"%");
    92ec:	2d b7       	in	r18, 0x3d	; 61
    92ee:	3e b7       	in	r19, 0x3e	; 62
    92f0:	24 5f       	subi	r18, 0xF4	; 244
    92f2:	3f 4f       	sbci	r19, 0xFF	; 255
    92f4:	2d bf       	out	0x3d, r18	; 61
    92f6:	3e bf       	out	0x3e, r19	; 62
    92f8:	c5 01       	movw	r24, r10
    92fa:	6c ec       	ldi	r22, 0xCC	; 204
    92fc:	71 e2       	ldi	r23, 0x21	; 33
    92fe:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
		    display_putString(temp2,2,0,System5x7);
    9302:	c5 01       	movw	r24, r10
    9304:	62 e0       	ldi	r22, 0x02	; 2
    9306:	40 e0       	ldi	r20, 0x00	; 0
    9308:	28 ea       	ldi	r18, 0xA8	; 168
    930a:	31 e3       	ldi	r19, 0x31	; 49
    930c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>




		    if(chargePercent == 100){
    9310:	80 91 31 34 	lds	r24, 0x3431
    9314:	84 36       	cpi	r24, 0x64	; 100
    9316:	29 f4       	brne	.+10     	; 0x9322 <__vector_77+0x542>
			    chargeComplete = true;
    9318:	81 e0       	ldi	r24, 0x01	; 1
    931a:	80 93 34 34 	sts	0x3434, r24
			    okToCharge  = false;
    931e:	10 92 35 34 	sts	0x3435, r1
    9322:	80 91 a8 06 	lds	r24, 0x06A8
    9326:	81 fd       	sbrc	r24, 1
    9328:	13 c0       	rjmp	.+38     	; 0x9350 <__vector_77+0x570>
    932a:	21 c3       	rjmp	.+1602   	; 0x996e <__vector_77+0xb8e>
		    }


		    if(SD2_Inserted() && chargeComplete){
			    display_putString("Ext Charged      ",3,0,System5x7);
    932c:	82 ee       	ldi	r24, 0xE2	; 226
    932e:	91 e2       	ldi	r25, 0x21	; 33
    9330:	63 e0       	ldi	r22, 0x03	; 3
    9332:	40 e0       	ldi	r20, 0x00	; 0
    9334:	28 ea       	ldi	r18, 0xA8	; 168
    9336:	31 e3       	ldi	r19, 0x31	; 49
    9338:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
			    if(!recording){
    933c:	80 91 3b 34 	lds	r24, 0x343B
    9340:	88 23       	and	r24, r24
    9342:	09 f0       	breq	.+2      	; 0x9346 <__vector_77+0x566>
    9344:	89 c0       	rjmp	.+274    	; 0x9458 <__vector_77+0x678>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9346:	e0 e2       	ldi	r30, 0x20	; 32
    9348:	f6 e0       	ldi	r31, 0x06	; 6
    934a:	80 e2       	ldi	r24, 0x20	; 32
    934c:	86 83       	std	Z+6, r24	; 0x06
    934e:	6d c0       	rjmp	.+218    	; 0x942a <__vector_77+0x64a>
    9350:	80 91 a8 06 	lds	r24, 0x06A8
    9354:	81 fd       	sbrc	r24, 1
    9356:	6c c0       	rjmp	.+216    	; 0x9430 <__vector_77+0x650>
    9358:	10 c3       	rjmp	.+1568   	; 0x997a <__vector_77+0xb9a>
				    Leds_Clear(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    } else if(SD2_Inserted() && !chargeComplete){
			    sprintf(temp2, "Ext Charging  %2u",chargePercent);
    935a:	00 d0       	rcall	.+0      	; 0x935c <__vector_77+0x57c>
    935c:	00 d0       	rcall	.+0      	; 0x935e <__vector_77+0x57e>
    935e:	ed b7       	in	r30, 0x3d	; 61
    9360:	fe b7       	in	r31, 0x3e	; 62
    9362:	31 96       	adiw	r30, 0x01	; 1
    9364:	0b eb       	ldi	r16, 0xBB	; 187
    9366:	1d e3       	ldi	r17, 0x3D	; 61
    9368:	ad b7       	in	r26, 0x3d	; 61
    936a:	be b7       	in	r27, 0x3e	; 62
    936c:	11 96       	adiw	r26, 0x01	; 1
    936e:	0d 93       	st	X+, r16
    9370:	1c 93       	st	X, r17
    9372:	12 97       	sbiw	r26, 0x02	; 2
    9374:	84 ef       	ldi	r24, 0xF4	; 244
    9376:	91 e2       	ldi	r25, 0x21	; 33
    9378:	82 83       	std	Z+2, r24	; 0x02
    937a:	93 83       	std	Z+3, r25	; 0x03
    937c:	80 91 31 34 	lds	r24, 0x3431
    9380:	84 83       	std	Z+4, r24	; 0x04
    9382:	15 82       	std	Z+5, r1	; 0x05
    9384:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
			    strcat(temp2,"%");
    9388:	ed b7       	in	r30, 0x3d	; 61
    938a:	fe b7       	in	r31, 0x3e	; 62
    938c:	36 96       	adiw	r30, 0x06	; 6
    938e:	ed bf       	out	0x3d, r30	; 61
    9390:	fe bf       	out	0x3e, r31	; 62
    9392:	c8 01       	movw	r24, r16
    9394:	6c ec       	ldi	r22, 0xCC	; 204
    9396:	71 e2       	ldi	r23, 0x21	; 33
    9398:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
			    display_putString(temp2,3,0,System5x7);
    939c:	c8 01       	movw	r24, r16
    939e:	63 e0       	ldi	r22, 0x03	; 3
    93a0:	40 e0       	ldi	r20, 0x00	; 0
    93a2:	28 ea       	ldi	r18, 0xA8	; 168
    93a4:	31 e3       	ldi	r19, 0x31	; 49
    93a6:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
			    okToCharge = true;
    93aa:	81 e0       	ldi	r24, 0x01	; 1
    93ac:	80 93 35 34 	sts	0x3435, r24
			    if(!rtcSynced){
    93b0:	80 91 6e 34 	lds	r24, 0x346E
    93b4:	88 23       	and	r24, r24
    93b6:	89 f5       	brne	.+98     	; 0x941a <__vector_77+0x63a>
    93b8:	88 e8       	ldi	r24, 0x88	; 136
    93ba:	93 e1       	ldi	r25, 0x13	; 19
    93bc:	20 e7       	ldi	r18, 0x70	; 112
    93be:	31 e0       	ldi	r19, 0x01	; 1
    93c0:	f9 01       	movw	r30, r18
    93c2:	31 97       	sbiw	r30, 0x01	; 1
    93c4:	f1 f7       	brne	.-4      	; 0x93c2 <__vector_77+0x5e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    93c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    93c8:	d9 f7       	brne	.-10     	; 0x93c0 <__vector_77+0x5e0>
			        _delay_ms(500);
			        if(useWifiForUploading){
    93ca:	80 91 0f 34 	lds	r24, 0x340F
    93ce:	88 23       	and	r24, r24
    93d0:	29 f0       	breq	.+10     	; 0x93dc <__vector_77+0x5fc>
			            Debug_SendString("Syncing RTC", true);
    93d2:	86 e0       	ldi	r24, 0x06	; 6
    93d4:	92 e2       	ldi	r25, 0x22	; 34
    93d6:	61 e0       	ldi	r22, 0x01	; 1
    93d8:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    93dc:	e0 ea       	ldi	r30, 0xA0	; 160
    93de:	f4 e0       	ldi	r31, 0x04	; 4
    93e0:	88 e0       	ldi	r24, 0x08	; 8
    93e2:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    93e4:	84 e0       	ldi	r24, 0x04	; 4
    93e6:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    93e8:	8f e0       	ldi	r24, 0x0F	; 15
    93ea:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    93ec:	11 e0       	ldi	r17, 0x01	; 1
    93ee:	14 83       	std	Z+4, r17	; 0x04
			        }
				    RTC_init();
				    RTC_setUTCSecs(UNIX_time);
    93f0:	60 91 36 34 	lds	r22, 0x3436
    93f4:	70 91 37 34 	lds	r23, 0x3437
    93f8:	80 91 38 34 	lds	r24, 0x3438
    93fc:	90 91 39 34 	lds	r25, 0x3439
    9400:	0e 94 1f 39 	call	0x723e	; 0x723e <RTC_setUTCSecs>
				    rtcSynced = true;
    9404:	10 93 6e 34 	sts	0x346E, r17
				    if(useWifiForUploading){
    9408:	80 91 0f 34 	lds	r24, 0x340F
    940c:	88 23       	and	r24, r24
    940e:	29 f0       	breq	.+10     	; 0x941a <__vector_77+0x63a>
				        Debug_SendString("RTC synced", true);
    9410:	82 e1       	ldi	r24, 0x12	; 18
    9412:	92 e2       	ldi	r25, 0x22	; 34
    9414:	61 e0       	ldi	r22, 0x01	; 1
    9416:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
				    }
			    }
			    if(!recording){
    941a:	80 91 3b 34 	lds	r24, 0x343B
    941e:	88 23       	and	r24, r24
    9420:	d9 f4       	brne	.+54     	; 0x9458 <__vector_77+0x678>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9422:	e0 e2       	ldi	r30, 0x20	; 32
    9424:	f6 e0       	ldi	r31, 0x06	; 6
    9426:	80 e2       	ldi	r24, 0x20	; 32
    9428:	85 83       	std	Z+5, r24	; 0x05
				    Leds_Set(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    }else{
			    display_putString("Ext Removed      ",3,0,System5x7);
    942a:	80 e1       	ldi	r24, 0x10	; 16
    942c:	85 83       	std	Z+5, r24	; 0x05
    942e:	14 c0       	rjmp	.+40     	; 0x9458 <__vector_77+0x678>
    9430:	8d e1       	ldi	r24, 0x1D	; 29
    9432:	92 e2       	ldi	r25, 0x22	; 34
    9434:	63 e0       	ldi	r22, 0x03	; 3
    9436:	40 e0       	ldi	r20, 0x00	; 0
    9438:	28 ea       	ldi	r18, 0xA8	; 168
    943a:	31 e3       	ldi	r19, 0x31	; 49
    943c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
			    chargePercent = 0;
    9440:	10 92 31 34 	sts	0x3431, r1
			    chargeComplete = false;
    9444:	10 92 34 34 	sts	0x3434, r1
			    rtcSynced = false;
    9448:	10 92 6e 34 	sts	0x346E, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    944c:	e0 e2       	ldi	r30, 0x20	; 32
    944e:	f6 e0       	ldi	r31, 0x06	; 6
    9450:	80 e2       	ldi	r24, 0x20	; 32
    9452:	86 83       	std	Z+6, r24	; 0x06
			    Leds_Clear(ext_Red);
			    Leds_Clear(ext_Green);
		    }


		    sprintf(temp2, "Uploading    %3u", uploadPercentEXT);
    9454:	80 e1       	ldi	r24, 0x10	; 16
    9456:	86 83       	std	Z+6, r24	; 0x06
    9458:	00 d0       	rcall	.+0      	; 0x945a <__vector_77+0x67a>
    945a:	00 d0       	rcall	.+0      	; 0x945c <__vector_77+0x67c>
    945c:	ed b7       	in	r30, 0x3d	; 61
    945e:	fe b7       	in	r31, 0x3e	; 62
    9460:	31 96       	adiw	r30, 0x01	; 1
    9462:	0b eb       	ldi	r16, 0xBB	; 187
    9464:	1d e3       	ldi	r17, 0x3D	; 61
    9466:	ad b7       	in	r26, 0x3d	; 61
    9468:	be b7       	in	r27, 0x3e	; 62
    946a:	11 96       	adiw	r26, 0x01	; 1
    946c:	0d 93       	st	X+, r16
    946e:	1c 93       	st	X, r17
    9470:	12 97       	sbiw	r26, 0x02	; 2
    9472:	8b eb       	ldi	r24, 0xBB	; 187
    9474:	91 e2       	ldi	r25, 0x21	; 33
    9476:	82 83       	std	Z+2, r24	; 0x02
    9478:	93 83       	std	Z+3, r25	; 0x03
    947a:	80 91 6d 34 	lds	r24, 0x346D
    947e:	84 83       	std	Z+4, r24	; 0x04
    9480:	15 82       	std	Z+5, r1	; 0x05
    9482:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    strcat(temp2,"%");
    9486:	ed b7       	in	r30, 0x3d	; 61
    9488:	fe b7       	in	r31, 0x3e	; 62
    948a:	36 96       	adiw	r30, 0x06	; 6
    948c:	ed bf       	out	0x3d, r30	; 61
    948e:	fe bf       	out	0x3e, r31	; 62
    9490:	c8 01       	movw	r24, r16
    9492:	6c ec       	ldi	r22, 0xCC	; 204
    9494:	71 e2       	ldi	r23, 0x21	; 33
    9496:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
		    display_putString(temp2,4,0,System5x7);
    949a:	c8 01       	movw	r24, r16
    949c:	64 e0       	ldi	r22, 0x04	; 4
    949e:	40 e0       	ldi	r20, 0x00	; 0
    94a0:	28 ea       	ldi	r18, 0xA8	; 168
    94a2:	31 e3       	ldi	r19, 0x31	; 49
    94a4:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>


		    RTC_UTCSecsToTime(UNIX_time,&time);
    94a8:	60 91 36 34 	lds	r22, 0x3436
    94ac:	70 91 37 34 	lds	r23, 0x3437
    94b0:	80 91 38 34 	lds	r24, 0x3438
    94b4:	90 91 39 34 	lds	r25, 0x3439
    94b8:	46 ef       	ldi	r20, 0xF6	; 246
    94ba:	50 e5       	ldi	r21, 0x50	; 80
    94bc:	0e 94 91 36 	call	0x6d22	; 0x6d22 <RTC_UTCSecsToTime>
		    clockHour = time.Hour + 24;
		    clockHour -= timeZoneShift;
    94c0:	90 91 f9 50 	lds	r25, 0x50F9
    94c4:	98 5e       	subi	r25, 0xE8	; 232
    94c6:	80 91 66 34 	lds	r24, 0x3466
    94ca:	98 1b       	sub	r25, r24
    94cc:	90 93 67 34 	sts	0x3467, r25
		    if(clockHour > 24){
    94d0:	99 31       	cpi	r25, 0x19	; 25
    94d2:	18 f0       	brcs	.+6      	; 0x94da <__vector_77+0x6fa>
			    clockHour -= 24;
    94d4:	98 51       	subi	r25, 0x18	; 24
    94d6:	90 93 67 34 	sts	0x3467, r25
		    }

            if(clockHour == 0){
    94da:	90 91 67 34 	lds	r25, 0x3467
    94de:	99 23       	and	r25, r25
    94e0:	49 f4       	brne	.+18     	; 0x94f4 <__vector_77+0x714>
                displayAM = true;
    94e2:	81 e0       	ldi	r24, 0x01	; 1
    94e4:	80 93 82 34 	sts	0x3482, r24
                displayPM = false;
    94e8:	10 92 83 34 	sts	0x3483, r1
                clockHour += 12;
    94ec:	8c e0       	ldi	r24, 0x0C	; 12
    94ee:	80 93 67 34 	sts	0x3467, r24
    94f2:	18 c0       	rjmp	.+48     	; 0x9524 <__vector_77+0x744>
            } else if(clockHour == 12){
    94f4:	9c 30       	cpi	r25, 0x0C	; 12
    94f6:	31 f4       	brne	.+12     	; 0x9504 <__vector_77+0x724>
                displayAM = false;
    94f8:	10 92 82 34 	sts	0x3482, r1
                displayPM = true;
    94fc:	81 e0       	ldi	r24, 0x01	; 1
    94fe:	80 93 83 34 	sts	0x3483, r24
    9502:	10 c0       	rjmp	.+32     	; 0x9524 <__vector_77+0x744>
            } else if(clockHour > 12){
    9504:	9d 30       	cpi	r25, 0x0D	; 13
    9506:	48 f0       	brcs	.+18     	; 0x951a <__vector_77+0x73a>
                displayAM = false;
    9508:	10 92 82 34 	sts	0x3482, r1
                displayPM = true;
    950c:	81 e0       	ldi	r24, 0x01	; 1
    950e:	80 93 83 34 	sts	0x3483, r24
                clockHour -= 12;
    9512:	9c 50       	subi	r25, 0x0C	; 12
    9514:	90 93 67 34 	sts	0x3467, r25
    9518:	05 c0       	rjmp	.+10     	; 0x9524 <__vector_77+0x744>
            }  else {
                displayAM = true;
    951a:	81 e0       	ldi	r24, 0x01	; 1
    951c:	80 93 82 34 	sts	0x3482, r24
                displayPM = false;
    9520:	10 92 83 34 	sts	0x3483, r1
            }

            sprintf(temp2,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    9524:	2d b7       	in	r18, 0x3d	; 61
    9526:	3e b7       	in	r19, 0x3e	; 62
    9528:	2a 50       	subi	r18, 0x0A	; 10
    952a:	30 40       	sbci	r19, 0x00	; 0
    952c:	2d bf       	out	0x3d, r18	; 61
    952e:	3e bf       	out	0x3e, r19	; 62
    9530:	ed b7       	in	r30, 0x3d	; 61
    9532:	fe b7       	in	r31, 0x3e	; 62
    9534:	31 96       	adiw	r30, 0x01	; 1
    9536:	0b eb       	ldi	r16, 0xBB	; 187
    9538:	1d e3       	ldi	r17, 0x3D	; 61
    953a:	ad b7       	in	r26, 0x3d	; 61
    953c:	be b7       	in	r27, 0x3e	; 62
    953e:	11 96       	adiw	r26, 0x01	; 1
    9540:	0d 93       	st	X+, r16
    9542:	1c 93       	st	X, r17
    9544:	12 97       	sbiw	r26, 0x02	; 2
    9546:	8f e2       	ldi	r24, 0x2F	; 47
    9548:	92 e2       	ldi	r25, 0x22	; 34
    954a:	82 83       	std	Z+2, r24	; 0x02
    954c:	93 83       	std	Z+3, r25	; 0x03
    954e:	80 91 67 34 	lds	r24, 0x3467
    9552:	84 83       	std	Z+4, r24	; 0x04
    9554:	15 82       	std	Z+5, r1	; 0x05
    9556:	80 91 f8 50 	lds	r24, 0x50F8
    955a:	86 83       	std	Z+6, r24	; 0x06
    955c:	17 82       	std	Z+7, r1	; 0x07
    955e:	80 91 f7 50 	lds	r24, 0x50F7
    9562:	80 87       	std	Z+8, r24	; 0x08
    9564:	11 86       	std	Z+9, r1	; 0x09
    9566:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
            if(displayAM){
    956a:	80 91 82 34 	lds	r24, 0x3482
    956e:	ed b7       	in	r30, 0x3d	; 61
    9570:	fe b7       	in	r31, 0x3e	; 62
    9572:	3a 96       	adiw	r30, 0x0a	; 10
    9574:	ed bf       	out	0x3d, r30	; 61
    9576:	fe bf       	out	0x3e, r31	; 62
    9578:	88 23       	and	r24, r24
    957a:	21 f0       	breq	.+8      	; 0x9584 <__vector_77+0x7a4>
                strcat(temp2,am);
    957c:	c8 01       	movw	r24, r16
    957e:	6b e9       	ldi	r22, 0x9B	; 155
    9580:	71 e3       	ldi	r23, 0x31	; 49
    9582:	07 c0       	rjmp	.+14     	; 0x9592 <__vector_77+0x7b2>
            } else if(displayPM){
    9584:	80 91 83 34 	lds	r24, 0x3483
    9588:	88 23       	and	r24, r24
    958a:	29 f0       	breq	.+10     	; 0x9596 <__vector_77+0x7b6>
                strcat(temp2,pm);
    958c:	c8 01       	movw	r24, r16
    958e:	60 ea       	ldi	r22, 0xA0	; 160
    9590:	71 e3       	ldi	r23, 0x31	; 49
    9592:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
            }
		    display_putString(temp2,6,0,System5x7);
    9596:	0b eb       	ldi	r16, 0xBB	; 187
    9598:	1d e3       	ldi	r17, 0x3D	; 61
    959a:	c8 01       	movw	r24, r16
    959c:	66 e0       	ldi	r22, 0x06	; 6
    959e:	40 e0       	ldi	r20, 0x00	; 0
    95a0:	28 ea       	ldi	r18, 0xA8	; 168
    95a2:	31 e3       	ldi	r19, 0x31	; 49
    95a4:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>

		    sprintf(temp2, "Wifi %3u",signalStrength);
    95a8:	00 d0       	rcall	.+0      	; 0x95aa <__vector_77+0x7ca>
    95aa:	00 d0       	rcall	.+0      	; 0x95ac <__vector_77+0x7cc>
    95ac:	ed b7       	in	r30, 0x3d	; 61
    95ae:	fe b7       	in	r31, 0x3e	; 62
    95b0:	31 96       	adiw	r30, 0x01	; 1
    95b2:	ad b7       	in	r26, 0x3d	; 61
    95b4:	be b7       	in	r27, 0x3e	; 62
    95b6:	11 96       	adiw	r26, 0x01	; 1
    95b8:	0d 93       	st	X+, r16
    95ba:	1c 93       	st	X, r17
    95bc:	12 97       	sbiw	r26, 0x02	; 2
    95be:	83 e4       	ldi	r24, 0x43	; 67
    95c0:	92 e2       	ldi	r25, 0x22	; 34
    95c2:	82 83       	std	Z+2, r24	; 0x02
    95c4:	93 83       	std	Z+3, r25	; 0x03
    95c6:	80 91 6b 34 	lds	r24, 0x346B
    95ca:	84 83       	std	Z+4, r24	; 0x04
    95cc:	15 82       	std	Z+5, r1	; 0x05
    95ce:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    strcat(temp2,"%   more");
    95d2:	ed b7       	in	r30, 0x3d	; 61
    95d4:	fe b7       	in	r31, 0x3e	; 62
    95d6:	36 96       	adiw	r30, 0x06	; 6
    95d8:	ed bf       	out	0x3d, r30	; 61
    95da:	fe bf       	out	0x3e, r31	; 62
    95dc:	c8 01       	movw	r24, r16
    95de:	6c e4       	ldi	r22, 0x4C	; 76
    95e0:	72 e2       	ldi	r23, 0x22	; 34
    95e2:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
		    display_putString(temp2,7,0,System5x7);
    95e6:	c8 01       	movw	r24, r16
    95e8:	67 e0       	ldi	r22, 0x07	; 7
    95ea:	40 e0       	ldi	r20, 0x00	; 0
    95ec:	28 ea       	ldi	r18, 0xA8	; 168
    95ee:	31 e3       	ldi	r19, 0x31	; 49
    95f0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>


		    display_drawLine(56,98,63,98,true);		// down arrow
    95f4:	88 e3       	ldi	r24, 0x38	; 56
    95f6:	62 e6       	ldi	r22, 0x62	; 98
    95f8:	4f e3       	ldi	r20, 0x3F	; 63
    95fa:	22 e6       	ldi	r18, 0x62	; 98
    95fc:	01 e0       	ldi	r16, 0x01	; 1
    95fe:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		    display_drawPixel(62,97,true);
    9602:	8e e3       	ldi	r24, 0x3E	; 62
    9604:	61 e6       	ldi	r22, 0x61	; 97
    9606:	41 e0       	ldi	r20, 0x01	; 1
    9608:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(61,96,true);
    960c:	8d e3       	ldi	r24, 0x3D	; 61
    960e:	60 e6       	ldi	r22, 0x60	; 96
    9610:	41 e0       	ldi	r20, 0x01	; 1
    9612:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(62,99,true);
    9616:	8e e3       	ldi	r24, 0x3E	; 62
    9618:	63 e6       	ldi	r22, 0x63	; 99
    961a:	41 e0       	ldi	r20, 0x01	; 1
    961c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(61,100,true);
    9620:	8d e3       	ldi	r24, 0x3D	; 61
    9622:	64 e6       	ldi	r22, 0x64	; 100
    9624:	41 e0       	ldi	r20, 0x01	; 1
    9626:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>

		    display_writeBufferToScreen();
    962a:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    962e:	b7 c1       	rjmp	.+878    	; 0x999e <__vector_77+0xbbe>



	    } else if(currentMode == sensorMode){
    9630:	a0 90 68 34 	lds	r10, 0x3468
    9634:	f1 e0       	ldi	r31, 0x01	; 1
    9636:	af 16       	cp	r10, r31
    9638:	09 f0       	breq	.+2      	; 0x963c <__vector_77+0x85c>
    963a:	b1 c1       	rjmp	.+866    	; 0x999e <__vector_77+0xbbe>
		    display_clearBuffer();
    963c:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
		    display_putString("   Sensors  back",0,0,System5x7);
    9640:	85 e5       	ldi	r24, 0x55	; 85
    9642:	92 e2       	ldi	r25, 0x22	; 34
    9644:	60 e0       	ldi	r22, 0x00	; 0
    9646:	40 e0       	ldi	r20, 0x00	; 0
    9648:	28 ea       	ldi	r18, 0xA8	; 168
    964a:	31 e3       	ldi	r19, 0x31	; 49
    964c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		    display_drawLine(8, 15, 8,61,true);
    9650:	88 e0       	ldi	r24, 0x08	; 8
    9652:	6f e0       	ldi	r22, 0x0F	; 15
    9654:	48 e0       	ldi	r20, 0x08	; 8
    9656:	2d e3       	ldi	r18, 0x3D	; 61
    9658:	01 e0       	ldi	r16, 0x01	; 1
    965a:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>

		    display_drawLine(1,99,7,99,true);		// up arrow
    965e:	81 e0       	ldi	r24, 0x01	; 1
    9660:	63 e6       	ldi	r22, 0x63	; 99
    9662:	47 e0       	ldi	r20, 0x07	; 7
    9664:	23 e6       	ldi	r18, 0x63	; 99
    9666:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <display_drawLine>
		    display_drawPixel(2,98,true);
    966a:	82 e0       	ldi	r24, 0x02	; 2
    966c:	62 e6       	ldi	r22, 0x62	; 98
    966e:	41 e0       	ldi	r20, 0x01	; 1
    9670:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(3,97,true);
    9674:	83 e0       	ldi	r24, 0x03	; 3
    9676:	61 e6       	ldi	r22, 0x61	; 97
    9678:	41 e0       	ldi	r20, 0x01	; 1
    967a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(2,100,true);
    967e:	82 e0       	ldi	r24, 0x02	; 2
    9680:	64 e6       	ldi	r22, 0x64	; 100
    9682:	41 e0       	ldi	r20, 0x01	; 1
    9684:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>
		    display_drawPixel(3,101,true);
    9688:	83 e0       	ldi	r24, 0x03	; 3
    968a:	65 e6       	ldi	r22, 0x65	; 101
    968c:	41 e0       	ldi	r20, 0x01	; 1
    968e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <display_drawPixel>

            sprintf(temp2,"Temperature: %3uC", quickTemperature);
    9692:	00 d0       	rcall	.+0      	; 0x9694 <__vector_77+0x8b4>
    9694:	00 d0       	rcall	.+0      	; 0x9696 <__vector_77+0x8b6>
    9696:	ed b7       	in	r30, 0x3d	; 61
    9698:	fe b7       	in	r31, 0x3e	; 62
    969a:	31 96       	adiw	r30, 0x01	; 1
    969c:	0b eb       	ldi	r16, 0xBB	; 187
    969e:	1d e3       	ldi	r17, 0x3D	; 61
    96a0:	ad b7       	in	r26, 0x3d	; 61
    96a2:	be b7       	in	r27, 0x3e	; 62
    96a4:	11 96       	adiw	r26, 0x01	; 1
    96a6:	0d 93       	st	X+, r16
    96a8:	1c 93       	st	X, r17
    96aa:	12 97       	sbiw	r26, 0x02	; 2
    96ac:	86 e6       	ldi	r24, 0x66	; 102
    96ae:	92 e2       	ldi	r25, 0x22	; 34
    96b0:	82 83       	std	Z+2, r24	; 0x02
    96b2:	93 83       	std	Z+3, r25	; 0x03
    96b4:	80 91 50 34 	lds	r24, 0x3450
    96b8:	84 83       	std	Z+4, r24	; 0x04
    96ba:	15 82       	std	Z+5, r1	; 0x05
    96bc:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    display_putString(temp2,2,0,System5x7);
    96c0:	ed b7       	in	r30, 0x3d	; 61
    96c2:	fe b7       	in	r31, 0x3e	; 62
    96c4:	36 96       	adiw	r30, 0x06	; 6
    96c6:	ed bf       	out	0x3d, r30	; 61
    96c8:	fe bf       	out	0x3e, r31	; 62
    96ca:	c8 01       	movw	r24, r16
    96cc:	62 e0       	ldi	r22, 0x02	; 2
    96ce:	40 e0       	ldi	r20, 0x00	; 0
    96d0:	28 ea       	ldi	r18, 0xA8	; 168
    96d2:	31 e3       	ldi	r19, 0x31	; 49
    96d4:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
            sprintf(temp2,"Humidity:  %3u", quickHumidity);
    96d8:	00 d0       	rcall	.+0      	; 0x96da <__vector_77+0x8fa>
    96da:	00 d0       	rcall	.+0      	; 0x96dc <__vector_77+0x8fc>
    96dc:	ed b7       	in	r30, 0x3d	; 61
    96de:	fe b7       	in	r31, 0x3e	; 62
    96e0:	31 96       	adiw	r30, 0x01	; 1
    96e2:	ad b7       	in	r26, 0x3d	; 61
    96e4:	be b7       	in	r27, 0x3e	; 62
    96e6:	11 96       	adiw	r26, 0x01	; 1
    96e8:	0d 93       	st	X+, r16
    96ea:	1c 93       	st	X, r17
    96ec:	12 97       	sbiw	r26, 0x02	; 2
    96ee:	88 e7       	ldi	r24, 0x78	; 120
    96f0:	92 e2       	ldi	r25, 0x22	; 34
    96f2:	82 83       	std	Z+2, r24	; 0x02
    96f4:	93 83       	std	Z+3, r25	; 0x03
    96f6:	80 91 51 34 	lds	r24, 0x3451
    96fa:	84 83       	std	Z+4, r24	; 0x04
    96fc:	15 82       	std	Z+5, r1	; 0x05
    96fe:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    strcat(temp2, "%RH");
    9702:	ed b7       	in	r30, 0x3d	; 61
    9704:	fe b7       	in	r31, 0x3e	; 62
    9706:	36 96       	adiw	r30, 0x06	; 6
    9708:	ed bf       	out	0x3d, r30	; 61
    970a:	fe bf       	out	0x3e, r31	; 62
    970c:	c8 01       	movw	r24, r16
    970e:	67 e8       	ldi	r22, 0x87	; 135
    9710:	72 e2       	ldi	r23, 0x22	; 34
    9712:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
		    display_putString(temp2,3,0,System5x7);
    9716:	c8 01       	movw	r24, r16
    9718:	63 e0       	ldi	r22, 0x03	; 3
    971a:	40 e0       	ldi	r20, 0x00	; 0
    971c:	28 ea       	ldi	r18, 0xA8	; 168
    971e:	31 e3       	ldi	r19, 0x31	; 49
    9720:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		    sprintf(temp2,"Pressure:  %3ukPa", quickPressure);
    9724:	00 d0       	rcall	.+0      	; 0x9726 <__vector_77+0x946>
    9726:	00 d0       	rcall	.+0      	; 0x9728 <__vector_77+0x948>
    9728:	ed b7       	in	r30, 0x3d	; 61
    972a:	fe b7       	in	r31, 0x3e	; 62
    972c:	31 96       	adiw	r30, 0x01	; 1
    972e:	ad b7       	in	r26, 0x3d	; 61
    9730:	be b7       	in	r27, 0x3e	; 62
    9732:	11 96       	adiw	r26, 0x01	; 1
    9734:	0d 93       	st	X+, r16
    9736:	1c 93       	st	X, r17
    9738:	12 97       	sbiw	r26, 0x02	; 2
    973a:	8b e8       	ldi	r24, 0x8B	; 139
    973c:	92 e2       	ldi	r25, 0x22	; 34
    973e:	82 83       	std	Z+2, r24	; 0x02
    9740:	93 83       	std	Z+3, r25	; 0x03
    9742:	80 91 52 34 	lds	r24, 0x3452
    9746:	84 83       	std	Z+4, r24	; 0x04
    9748:	15 82       	std	Z+5, r1	; 0x05
    974a:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    display_putString(temp2,4,0,System5x7);
    974e:	ed b7       	in	r30, 0x3d	; 61
    9750:	fe b7       	in	r31, 0x3e	; 62
    9752:	36 96       	adiw	r30, 0x06	; 6
    9754:	ed bf       	out	0x3d, r30	; 61
    9756:	fe bf       	out	0x3e, r31	; 62
    9758:	c8 01       	movw	r24, r16
    975a:	64 e0       	ldi	r22, 0x04	; 4
    975c:	40 e0       	ldi	r20, 0x00	; 0
    975e:	28 ea       	ldi	r18, 0xA8	; 168
    9760:	31 e3       	ldi	r19, 0x31	; 49
    9762:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
            sprintf(temp2,"Light:      %5u", quickLight);
    9766:	00 d0       	rcall	.+0      	; 0x9768 <__vector_77+0x988>
    9768:	00 d0       	rcall	.+0      	; 0x976a <__vector_77+0x98a>
    976a:	ed b7       	in	r30, 0x3d	; 61
    976c:	fe b7       	in	r31, 0x3e	; 62
    976e:	31 96       	adiw	r30, 0x01	; 1
    9770:	ad b7       	in	r26, 0x3d	; 61
    9772:	be b7       	in	r27, 0x3e	; 62
    9774:	11 96       	adiw	r26, 0x01	; 1
    9776:	0d 93       	st	X+, r16
    9778:	1c 93       	st	X, r17
    977a:	12 97       	sbiw	r26, 0x02	; 2
    977c:	8d e9       	ldi	r24, 0x9D	; 157
    977e:	92 e2       	ldi	r25, 0x22	; 34
    9780:	82 83       	std	Z+2, r24	; 0x02
    9782:	93 83       	std	Z+3, r25	; 0x03
    9784:	80 91 53 34 	lds	r24, 0x3453
    9788:	90 91 54 34 	lds	r25, 0x3454
    978c:	84 83       	std	Z+4, r24	; 0x04
    978e:	95 83       	std	Z+5, r25	; 0x05
    9790:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    display_putString(temp2,5,0,System5x7);
    9794:	ed b7       	in	r30, 0x3d	; 61
    9796:	fe b7       	in	r31, 0x3e	; 62
    9798:	36 96       	adiw	r30, 0x06	; 6
    979a:	ed bf       	out	0x3d, r30	; 61
    979c:	fe bf       	out	0x3e, r31	; 62
    979e:	c8 01       	movw	r24, r16
    97a0:	65 e0       	ldi	r22, 0x05	; 5
    97a2:	40 e0       	ldi	r20, 0x00	; 0
    97a4:	28 ea       	ldi	r18, 0xA8	; 168
    97a6:	31 e3       	ldi	r19, 0x31	; 49
    97a8:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>

            sprintf(temp2,"Air: %5lu, %5lu", quickSmall, quickLarge);
    97ac:	2d b7       	in	r18, 0x3d	; 61
    97ae:	3e b7       	in	r19, 0x3e	; 62
    97b0:	2c 50       	subi	r18, 0x0C	; 12
    97b2:	30 40       	sbci	r19, 0x00	; 0
    97b4:	2d bf       	out	0x3d, r18	; 61
    97b6:	3e bf       	out	0x3e, r19	; 62
    97b8:	ed b7       	in	r30, 0x3d	; 61
    97ba:	fe b7       	in	r31, 0x3e	; 62
    97bc:	31 96       	adiw	r30, 0x01	; 1
    97be:	ad b7       	in	r26, 0x3d	; 61
    97c0:	be b7       	in	r27, 0x3e	; 62
    97c2:	11 96       	adiw	r26, 0x01	; 1
    97c4:	0d 93       	st	X+, r16
    97c6:	1c 93       	st	X, r17
    97c8:	12 97       	sbiw	r26, 0x02	; 2
    97ca:	8d ea       	ldi	r24, 0xAD	; 173
    97cc:	92 e2       	ldi	r25, 0x22	; 34
    97ce:	82 83       	std	Z+2, r24	; 0x02
    97d0:	93 83       	std	Z+3, r25	; 0x03
    97d2:	80 91 5a 34 	lds	r24, 0x345A
    97d6:	90 91 5b 34 	lds	r25, 0x345B
    97da:	a0 91 5c 34 	lds	r26, 0x345C
    97de:	b0 91 5d 34 	lds	r27, 0x345D
    97e2:	84 83       	std	Z+4, r24	; 0x04
    97e4:	95 83       	std	Z+5, r25	; 0x05
    97e6:	a6 83       	std	Z+6, r26	; 0x06
    97e8:	b7 83       	std	Z+7, r27	; 0x07
    97ea:	80 91 56 34 	lds	r24, 0x3456
    97ee:	90 91 57 34 	lds	r25, 0x3457
    97f2:	a0 91 58 34 	lds	r26, 0x3458
    97f6:	b0 91 59 34 	lds	r27, 0x3459
    97fa:	80 87       	std	Z+8, r24	; 0x08
    97fc:	91 87       	std	Z+9, r25	; 0x09
    97fe:	a2 87       	std	Z+10, r26	; 0x0a
    9800:	b3 87       	std	Z+11, r27	; 0x0b
    9802:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
		    display_putString(temp2,6,0,System5x7);
    9806:	ed b7       	in	r30, 0x3d	; 61
    9808:	fe b7       	in	r31, 0x3e	; 62
    980a:	3c 96       	adiw	r30, 0x0c	; 12
    980c:	ed bf       	out	0x3d, r30	; 61
    980e:	fe bf       	out	0x3e, r31	; 62
    9810:	c8 01       	movw	r24, r16
    9812:	66 e0       	ldi	r22, 0x06	; 6
    9814:	40 e0       	ldi	r20, 0x00	; 0
    9816:	28 ea       	ldi	r18, 0xA8	; 168
    9818:	31 e3       	ldi	r19, 0x31	; 49
    981a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		    display_putString("Sound:           ",7,0,System5x7);
    981e:	8d eb       	ldi	r24, 0xBD	; 189
    9820:	92 e2       	ldi	r25, 0x22	; 34
    9822:	67 e0       	ldi	r22, 0x07	; 7
    9824:	40 e0       	ldi	r20, 0x00	; 0
    9826:	28 ea       	ldi	r18, 0xA8	; 168
    9828:	31 e3       	ldi	r19, 0x31	; 49
    982a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		    display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    982e:	20 91 55 34 	lds	r18, 0x3455
    9832:	26 95       	lsr	r18
    9834:	89 e3       	ldi	r24, 0x39	; 57
    9836:	62 e3       	ldi	r22, 0x32	; 50
    9838:	47 e0       	ldi	r20, 0x07	; 7
    983a:	01 e0       	ldi	r16, 0x01	; 1
    983c:	ee 24       	eor	r14, r14
    983e:	cc 24       	eor	r12, r12
    9840:	c3 94       	inc	r12
    9842:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <display_drawRectangle>
		    display_writeBufferToScreen();
    9846:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

		    if(chargePercent == 100){
    984a:	80 91 31 34 	lds	r24, 0x3431
    984e:	84 36       	cpi	r24, 0x64	; 100
    9850:	21 f4       	brne	.+8      	; 0x985a <__vector_77+0xa7a>
                chargeComplete = true;
    9852:	a0 92 34 34 	sts	0x3434, r10
			    okToCharge  = false;
    9856:	10 92 35 34 	sts	0x3435, r1
    985a:	80 91 a8 06 	lds	r24, 0x06A8
    985e:	81 fd       	sbrc	r24, 1
    9860:	0a c0       	rjmp	.+20     	; 0x9876 <__vector_77+0xa96>
    9862:	91 c0       	rjmp	.+290    	; 0x9986 <__vector_77+0xba6>
		    }

    		if(SD2_Inserted() && chargeComplete && !recording){
    9864:	80 91 3b 34 	lds	r24, 0x343B
    9868:	88 23       	and	r24, r24
    986a:	29 f4       	brne	.+10     	; 0x9876 <__vector_77+0xa96>
    986c:	e0 e2       	ldi	r30, 0x20	; 32
    986e:	f6 e0       	ldi	r31, 0x06	; 6
    9870:	80 e2       	ldi	r24, 0x20	; 32
    9872:	86 83       	std	Z+6, r24	; 0x06
    9874:	39 c0       	rjmp	.+114    	; 0x98e8 <__vector_77+0xb08>
    9876:	80 91 a8 06 	lds	r24, 0x06A8
    987a:	81 fd       	sbrc	r24, 1
    987c:	38 c0       	rjmp	.+112    	; 0x98ee <__vector_77+0xb0e>
    987e:	89 c0       	rjmp	.+274    	; 0x9992 <__vector_77+0xbb2>
    			Leds_Clear(ext_Red);
    			Leds_Set(ext_Green);
    		} else if(SD2_Inserted() && !chargeComplete){
    			okToCharge = true;
    9880:	81 e0       	ldi	r24, 0x01	; 1
    9882:	80 93 35 34 	sts	0x3435, r24
    			if(!rtcSynced){
    9886:	80 91 6e 34 	lds	r24, 0x346E
    988a:	88 23       	and	r24, r24
    988c:	21 f5       	brne	.+72     	; 0x98d6 <__vector_77+0xaf6>
    				if(useWifiForUploading){
    988e:	80 91 0f 34 	lds	r24, 0x340F
    9892:	88 23       	and	r24, r24
    9894:	29 f0       	breq	.+10     	; 0x98a0 <__vector_77+0xac0>
	    			    Debug_SendString("Syncing RTC", true);
    9896:	86 e0       	ldi	r24, 0x06	; 6
    9898:	92 e2       	ldi	r25, 0x22	; 34
    989a:	61 e0       	ldi	r22, 0x01	; 1
    989c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
		    		}
			    	if(!demoMode){
    98a0:	80 91 0e 34 	lds	r24, 0x340E
    98a4:	88 23       	and	r24, r24
    98a6:	a1 f4       	brne	.+40     	; 0x98d0 <__vector_77+0xaf0>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    98a8:	e0 ea       	ldi	r30, 0xA0	; 160
    98aa:	f4 e0       	ldi	r31, 0x04	; 4
    98ac:	88 e0       	ldi	r24, 0x08	; 8
    98ae:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    98b0:	84 e0       	ldi	r24, 0x04	; 4
    98b2:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    98b4:	8f e0       	ldi	r24, 0x0F	; 15
    98b6:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    98b8:	81 e0       	ldi	r24, 0x01	; 1
    98ba:	84 83       	std	Z+4, r24	; 0x04
				    	RTC_init();
					    RTC_setUTCSecs(UNIX_time);
    98bc:	60 91 36 34 	lds	r22, 0x3436
    98c0:	70 91 37 34 	lds	r23, 0x3437
    98c4:	80 91 38 34 	lds	r24, 0x3438
    98c8:	90 91 39 34 	lds	r25, 0x3439
    98cc:	0e 94 1f 39 	call	0x723e	; 0x723e <RTC_setUTCSecs>
    				}
	    			rtcSynced = true;
    98d0:	81 e0       	ldi	r24, 0x01	; 1
    98d2:	80 93 6e 34 	sts	0x346E, r24
		    	}
			    if(!recording){
    98d6:	80 91 3b 34 	lds	r24, 0x343B
    98da:	88 23       	and	r24, r24
    98dc:	09 f0       	breq	.+2      	; 0x98e0 <__vector_77+0xb00>
    98de:	5f c0       	rjmp	.+190    	; 0x999e <__vector_77+0xbbe>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    98e0:	e0 e2       	ldi	r30, 0x20	; 32
    98e2:	f6 e0       	ldi	r31, 0x06	; 6
    98e4:	80 e2       	ldi	r24, 0x20	; 32
    98e6:	85 83       	std	Z+5, r24	; 0x05
				    Leds_Set(ext_Red);
    				Leds_Set(ext_Green);
	    		}

		    }else{
			    chargePercent = 0;
    98e8:	80 e1       	ldi	r24, 0x10	; 16
    98ea:	85 83       	std	Z+5, r24	; 0x05
    98ec:	58 c0       	rjmp	.+176    	; 0x999e <__vector_77+0xbbe>
    98ee:	10 92 31 34 	sts	0x3431, r1
    			chargeComplete = false;
    98f2:	10 92 34 34 	sts	0x3434, r1
	    		rtcSynced = false;
    98f6:	10 92 6e 34 	sts	0x346E, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    98fa:	e0 e2       	ldi	r30, 0x20	; 32
    98fc:	f6 e0       	ldi	r31, 0x06	; 6
    98fe:	80 e2       	ldi	r24, 0x20	; 32
    9900:	86 83       	std	Z+6, r24	; 0x06

	// controls


        if(currentMode == recordMode && Dpad_CheckButton(Down)){
		    currentMode = sensorMode;
    9902:	80 e1       	ldi	r24, 0x10	; 16
    9904:	86 83       	std	Z+6, r24	; 0x06
    9906:	4b c0       	rjmp	.+150    	; 0x999e <__vector_77+0xbbe>
    9908:	81 e0       	ldi	r24, 0x01	; 1
    990a:	80 93 68 34 	sts	0x3468, r24
		    display_clearBuffer();
    990e:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
		    display_writeBufferToScreen();
    9912:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    9916:	18 cc       	rjmp	.-2000   	; 0x9148 <__vector_77+0x368>
	    } else if(currentMode == sensorMode && Dpad_CheckButton(Up)){
		    currentMode = recordMode;
    9918:	10 92 68 34 	sts	0x3468, r1
		    display_clearBuffer();
    991c:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
		    display_writeBufferToScreen();
    9920:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    9924:	20 ea       	ldi	r18, 0xA0	; 160
    9926:	3f e0       	ldi	r19, 0x0F	; 15
    9928:	40 e7       	ldi	r20, 0x70	; 112
    992a:	51 e0       	ldi	r21, 0x01	; 1
    992c:	dd ca       	rjmp	.-2630   	; 0x8ee8 <__vector_77+0x108>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    992e:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    9932:	8c 77       	andi	r24, 0x7C	; 124
    9934:	82 fd       	sbrc	r24, 2
    9936:	ec ca       	rjmp	.-2600   	; 0x8f10 <__vector_77+0x130>
    9938:	01 cb       	rjmp	.-2558   	; 0x8f3c <__vector_77+0x15c>
                Leds_Set(wifi_Red);
		    }
	    } else if(currentMode == recordMode && !recording && !SD_Inserted()){
		    Leds_Set(sd_Red);
		    Leds_Clear(sd_Green);
	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){
    993a:	80 91 3b 34 	lds	r24, 0x343B
    993e:	88 23       	and	r24, r24
    9940:	09 f0       	breq	.+2      	; 0x9944 <__vector_77+0xb64>
    9942:	75 cb       	rjmp	.-2326   	; 0x902e <__vector_77+0x24e>
    9944:	19 cb       	rjmp	.-2510   	; 0x8f78 <__vector_77+0x198>
		        Leds_Set(sd_Red);

            }


	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){
    9946:	80 91 3b 34 	lds	r24, 0x343B
    994a:	88 23       	and	r24, r24
    994c:	09 f4       	brne	.+2      	; 0x9950 <__vector_77+0xb70>
    994e:	fc cb       	rjmp	.-2056   	; 0x9148 <__vector_77+0x368>
    9950:	79 cb       	rjmp	.-2318   	; 0x9044 <__vector_77+0x264>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9952:	81 e0       	ldi	r24, 0x01	; 1
    9954:	e0 cb       	rjmp	.-2112   	; 0x9116 <__vector_77+0x336>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9956:	e0 e2       	ldi	r30, 0x20	; 32
    9958:	f6 e0       	ldi	r31, 0x06	; 6
    995a:	80 e2       	ldi	r24, 0x20	; 32
    995c:	85 83       	std	Z+5, r24	; 0x05
    995e:	04 c0       	rjmp	.+8      	; 0x9968 <__vector_77+0xb88>
    9960:	e0 e2       	ldi	r30, 0x20	; 32
    9962:	f6 e0       	ldi	r31, 0x06	; 6
    9964:	80 e2       	ldi	r24, 0x20	; 32
    9966:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9968:	80 e1       	ldi	r24, 0x10	; 16
    996a:	85 83       	std	Z+5, r24	; 0x05
    996c:	e4 cb       	rjmp	.-2104   	; 0x9136 <__vector_77+0x356>
			    chargeComplete = true;
			    okToCharge  = false;
		    }


		    if(SD2_Inserted() && chargeComplete){
    996e:	80 91 34 34 	lds	r24, 0x3434
    9972:	88 23       	and	r24, r24
    9974:	09 f4       	brne	.+2      	; 0x9978 <__vector_77+0xb98>
    9976:	ec cc       	rjmp	.-1576   	; 0x9350 <__vector_77+0x570>
    9978:	d9 cc       	rjmp	.-1614   	; 0x932c <__vector_77+0x54c>
			    display_putString("Ext Charged      ",3,0,System5x7);
			    if(!recording){
				    Leds_Clear(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    } else if(SD2_Inserted() && !chargeComplete){
    997a:	80 91 34 34 	lds	r24, 0x3434
    997e:	88 23       	and	r24, r24
    9980:	09 f0       	breq	.+2      	; 0x9984 <__vector_77+0xba4>
    9982:	56 cd       	rjmp	.-1364   	; 0x9430 <__vector_77+0x650>
    9984:	ea cc       	rjmp	.-1580   	; 0x935a <__vector_77+0x57a>
		    if(chargePercent == 100){
                chargeComplete = true;
			    okToCharge  = false;
		    }

    		if(SD2_Inserted() && chargeComplete && !recording){
    9986:	80 91 34 34 	lds	r24, 0x3434
    998a:	88 23       	and	r24, r24
    998c:	09 f4       	brne	.+2      	; 0x9990 <__vector_77+0xbb0>
    998e:	73 cf       	rjmp	.-282    	; 0x9876 <__vector_77+0xa96>
    9990:	69 cf       	rjmp	.-302    	; 0x9864 <__vector_77+0xa84>
    			Leds_Clear(ext_Red);
    			Leds_Set(ext_Green);
    		} else if(SD2_Inserted() && !chargeComplete){
    9992:	80 91 34 34 	lds	r24, 0x3434
    9996:	88 23       	and	r24, r24
    9998:	09 f0       	breq	.+2      	; 0x999c <__vector_77+0xbbc>
    999a:	a9 cf       	rjmp	.-174    	; 0x98ee <__vector_77+0xb0e>
    999c:	71 cf       	rjmp	.-286    	; 0x9880 <__vector_77+0xaa0>
		    	Leds_Clear(ext_Red);
			    Leds_Clear(ext_Green);
	    	}
	    }
    }
}
    999e:	ff 91       	pop	r31
    99a0:	ef 91       	pop	r30
    99a2:	bf 91       	pop	r27
    99a4:	af 91       	pop	r26
    99a6:	9f 91       	pop	r25
    99a8:	8f 91       	pop	r24
    99aa:	7f 91       	pop	r23
    99ac:	6f 91       	pop	r22
    99ae:	5f 91       	pop	r21
    99b0:	4f 91       	pop	r20
    99b2:	3f 91       	pop	r19
    99b4:	2f 91       	pop	r18
    99b6:	1f 91       	pop	r17
    99b8:	0f 91       	pop	r16
    99ba:	ff 90       	pop	r15
    99bc:	ef 90       	pop	r14
    99be:	df 90       	pop	r13
    99c0:	cf 90       	pop	r12
    99c2:	bf 90       	pop	r11
    99c4:	af 90       	pop	r10
    99c6:	0f 90       	pop	r0
    99c8:	0b be       	out	0x3b, r0	; 59
    99ca:	0f 90       	pop	r0
    99cc:	0f be       	out	0x3f, r0	; 63
    99ce:	0f 90       	pop	r0
    99d0:	1f 90       	pop	r1
    99d2:	18 95       	reti

000099d4 <Debug_TriggerUpload>:
      to--;
    }
    return false;
}

bool Debug_TriggerUpload(uint32_t size, uint16_t timeOut){
    99d4:	af 92       	push	r10
    99d6:	bf 92       	push	r11
    99d8:	cf 92       	push	r12
    99da:	df 92       	push	r13
    99dc:	ef 92       	push	r14
    99de:	ff 92       	push	r15
    99e0:	0f 93       	push	r16
    99e2:	1f 93       	push	r17
    99e4:	df 93       	push	r29
    99e6:	cf 93       	push	r28
    99e8:	cd b7       	in	r28, 0x3d	; 61
    99ea:	de b7       	in	r29, 0x3e	; 62
    99ec:	64 97       	sbiw	r28, 0x14	; 20
    99ee:	cd bf       	out	0x3d, r28	; 61
    99f0:	de bf       	out	0x3e, r29	; 62
    99f2:	6b 01       	movw	r12, r22
    99f4:	7c 01       	movw	r14, r24
    99f6:	b4 2e       	mov	r11, r20
    99f8:	a5 2e       	mov	r10, r21
   uint16_t to = timeOut;
   char fileSize [20];

   Debug_ClearBuffer();
    99fa:	0e 94 8f 01 	call	0x31e	; 0x31e <Debug_ClearBuffer>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    99fe:	80 91 a1 08 	lds	r24, 0x08A1
    9a02:	85 ff       	sbrs	r24, 5
    9a04:	fc cf       	rjmp	.-8      	; 0x99fe <Debug_TriggerUpload+0x2a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    9a06:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    9a0a:	85 e5       	ldi	r24, 0x55	; 85
    9a0c:	80 93 a0 08 	sts	0x08A0, r24
   char fileSize [20];

   Debug_ClearBuffer();
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
    9a10:	8d b7       	in	r24, 0x3d	; 61
    9a12:	9e b7       	in	r25, 0x3e	; 62
    9a14:	08 97       	sbiw	r24, 0x08	; 8
    9a16:	8d bf       	out	0x3d, r24	; 61
    9a18:	9e bf       	out	0x3e, r25	; 62
    9a1a:	ed b7       	in	r30, 0x3d	; 61
    9a1c:	fe b7       	in	r31, 0x3e	; 62
    9a1e:	31 96       	adiw	r30, 0x01	; 1
    9a20:	8e 01       	movw	r16, r28
    9a22:	0f 5f       	subi	r16, 0xFF	; 255
    9a24:	1f 4f       	sbci	r17, 0xFF	; 255
    9a26:	ad b7       	in	r26, 0x3d	; 61
    9a28:	be b7       	in	r27, 0x3e	; 62
    9a2a:	11 96       	adiw	r26, 0x01	; 1
    9a2c:	0d 93       	st	X+, r16
    9a2e:	1c 93       	st	X, r17
    9a30:	12 97       	sbiw	r26, 0x02	; 2
    9a32:	8f ec       	ldi	r24, 0xCF	; 207
    9a34:	92 e2       	ldi	r25, 0x22	; 34
    9a36:	82 83       	std	Z+2, r24	; 0x02
    9a38:	93 83       	std	Z+3, r25	; 0x03
    9a3a:	c4 82       	std	Z+4, r12	; 0x04
    9a3c:	d5 82       	std	Z+5, r13	; 0x05
    9a3e:	e6 82       	std	Z+6, r14	; 0x06
    9a40:	f7 82       	std	Z+7, r15	; 0x07
    9a42:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
   Debug_SendString(fileSize,true);
    9a46:	8d b7       	in	r24, 0x3d	; 61
    9a48:	9e b7       	in	r25, 0x3e	; 62
    9a4a:	08 96       	adiw	r24, 0x08	; 8
    9a4c:	8d bf       	out	0x3d, r24	; 61
    9a4e:	9e bf       	out	0x3e, r25	; 62
    9a50:	c8 01       	movw	r24, r16
    9a52:	61 e0       	ldi	r22, 0x01	; 1
    9a54:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    9a58:	2b 2d       	mov	r18, r11
    9a5a:	3a 2d       	mov	r19, r10
    9a5c:	c9 01       	movw	r24, r18
    9a5e:	8c 01       	movw	r16, r24
    9a60:	56 e6       	ldi	r21, 0x66	; 102
    9a62:	e5 2e       	mov	r14, r21
    9a64:	5e e0       	ldi	r21, 0x0E	; 14
    9a66:	f5 2e       	mov	r15, r21
    9a68:	11 c0       	rjmp	.+34     	; 0x9a8c <Debug_TriggerUpload+0xb8>

    while(to > 0){
      if(Debug_CharReadyToRead()){
    9a6a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    9a6e:	88 23       	and	r24, r24
    9a70:	41 f0       	breq	.+16     	; 0x9a82 <Debug_TriggerUpload+0xae>
         if(Debug_GetByte(true) == 'Y'){
    9a72:	81 e0       	ldi	r24, 0x01	; 1
    9a74:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	89 35       	cpi	r24, 0x59	; 89
    9a7c:	59 f4       	brne	.+22     	; 0x9a94 <Debug_TriggerUpload+0xc0>
    9a7e:	91 e0       	ldi	r25, 0x01	; 1
    9a80:	09 c0       	rjmp	.+18     	; 0x9a94 <Debug_TriggerUpload+0xc0>
    9a82:	c7 01       	movw	r24, r14
    9a84:	01 97       	sbiw	r24, 0x01	; 1
    9a86:	f1 f7       	brne	.-4      	; 0x9a84 <Debug_TriggerUpload+0xb0>
         } else {
           return false;
         }
      }
      _delay_ms(1);
      to--;
    9a88:	01 50       	subi	r16, 0x01	; 1
    9a8a:	10 40       	sbci	r17, 0x00	; 0
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
    9a8c:	01 15       	cp	r16, r1
    9a8e:	11 05       	cpc	r17, r1
    9a90:	61 f7       	brne	.-40     	; 0x9a6a <Debug_TriggerUpload+0x96>
    9a92:	90 e0       	ldi	r25, 0x00	; 0
      _delay_ms(1);
      to--;
    }
    return false;

}
    9a94:	89 2f       	mov	r24, r25
    9a96:	64 96       	adiw	r28, 0x14	; 20
    9a98:	cd bf       	out	0x3d, r28	; 61
    9a9a:	de bf       	out	0x3e, r29	; 62
    9a9c:	cf 91       	pop	r28
    9a9e:	df 91       	pop	r29
    9aa0:	1f 91       	pop	r17
    9aa2:	0f 91       	pop	r16
    9aa4:	ff 90       	pop	r15
    9aa6:	ef 90       	pop	r14
    9aa8:	df 90       	pop	r13
    9aaa:	cf 90       	pop	r12
    9aac:	bf 90       	pop	r11
    9aae:	af 90       	pop	r10
    9ab0:	08 95       	ret

00009ab2 <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    9ab2:	af 92       	push	r10
    9ab4:	bf 92       	push	r11
    9ab6:	cf 92       	push	r12
    9ab8:	df 92       	push	r13
    9aba:	ff 92       	push	r15
    9abc:	0f 93       	push	r16
    9abe:	1f 93       	push	r17
    9ac0:	df 93       	push	r29
    9ac2:	cf 93       	push	r28
    9ac4:	cd b7       	in	r28, 0x3d	; 61
    9ac6:	de b7       	in	r29, 0x3e	; 62
    9ac8:	c5 55       	subi	r28, 0x55	; 85
    9aca:	d0 40       	sbci	r29, 0x00	; 0
    9acc:	cd bf       	out	0x3d, r28	; 61
    9ace:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp=0;
	char string [70];
    char timeString[15];

	Wifi_ClearBuffer();
    9ad0:	0e 94 93 02 	call	0x526	; 0x526 <Wifi_ClearBuffer>
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
    9ad4:	85 ed       	ldi	r24, 0xD5	; 213
    9ad6:	92 e2       	ldi	r25, 0x22	; 34
    9ad8:	6e ed       	ldi	r22, 0xDE	; 222
    9ada:	72 e2       	ldi	r23, 0x22	; 34
    9adc:	ab 01       	movw	r20, r22
    9ade:	24 ef       	ldi	r18, 0xF4	; 244
    9ae0:	31 e0       	ldi	r19, 0x01	; 1
    9ae2:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    9ae6:	88 23       	and	r24, r24
    9ae8:	09 f4       	brne	.+2      	; 0x9aec <Wifi_GetTime+0x3a>
    9aea:	56 c0       	rjmp	.+172    	; 0x9b98 <Wifi_GetTime+0xe6>
    9aec:	84 ef       	ldi	r24, 0xF4	; 244
    9aee:	91 e0       	ldi	r25, 0x01	; 1
    9af0:	20 e7       	ldi	r18, 0x70	; 112
    9af2:	31 e0       	ldi	r19, 0x01	; 1
    9af4:	f9 01       	movw	r30, r18
    9af6:	31 97       	sbiw	r30, 0x01	; 1
    9af8:	f1 f7       	brne	.-4      	; 0x9af6 <Wifi_GetTime+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9afa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9afc:	d9 f7       	brne	.-10     	; 0x9af4 <Wifi_GetTime+0x42>
    9afe:	70 e1       	ldi	r23, 0x10	; 16
    9b00:	c7 2e       	mov	r12, r23
    9b02:	d1 2c       	mov	r13, r1
    9b04:	cc 0e       	add	r12, r28
    9b06:	dd 1e       	adc	r13, r29
    9b08:	86 01       	movw	r16, r12


	_delay_ms(50);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 70){
    9b0a:	66 e5       	ldi	r22, 0x56	; 86
    9b0c:	a6 2e       	mov	r10, r22
    9b0e:	b1 2c       	mov	r11, r1
    9b10:	ac 0e       	add	r10, r28
    9b12:	bd 1e       	adc	r11, r29
    9b14:	09 c0       	rjmp	.+18     	; 0x9b28 <Wifi_GetTime+0x76>
    9b16:	0a 15       	cp	r16, r10
    9b18:	1b 05       	cpc	r17, r11
    9b1a:	79 f0       	breq	.+30     	; 0x9b3a <Wifi_GetTime+0x88>
			string[tmp] = Wifi_GetByte(false);
    9b1c:	80 e0       	ldi	r24, 0x00	; 0
    9b1e:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    9b22:	f8 01       	movw	r30, r16
    9b24:	81 93       	st	Z+, r24
    9b26:	8f 01       	movw	r16, r30
    9b28:	f0 2e       	mov	r15, r16
    9b2a:	fc 18       	sub	r15, r12
	}


	_delay_ms(50);
	
	while(Wifi_CharReadyToRead()){
    9b2c:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    9b30:	88 23       	and	r24, r24
    9b32:	89 f7       	brne	.-30     	; 0x9b16 <Wifi_GetTime+0x64>
			break;
		}
	}

	
	if(tmp < 4){
    9b34:	f3 e0       	ldi	r31, 0x03	; 3
    9b36:	ff 15       	cp	r31, r15
    9b38:	78 f5       	brcc	.+94     	; 0x9b98 <Wifi_GetTime+0xe6>
		return false;
	}
	
	if(strstr(string,"NOT SET") != 0){
    9b3a:	8e 01       	movw	r16, r28
    9b3c:	00 5f       	subi	r16, 0xF0	; 240
    9b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    9b40:	c8 01       	movw	r24, r16
    9b42:	64 ee       	ldi	r22, 0xE4	; 228
    9b44:	72 e2       	ldi	r23, 0x22	; 34
    9b46:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9b4a:	00 97       	sbiw	r24, 0x00	; 0
    9b4c:	31 f0       	breq	.+12     	; 0x9b5a <Wifi_GetTime+0xa8>
	    Debug_SendString("Time is not set",true);
    9b4e:	8c ee       	ldi	r24, 0xEC	; 236
    9b50:	92 e2       	ldi	r25, 0x22	; 34
    9b52:	61 e0       	ldi	r22, 0x01	; 1
    9b54:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    9b58:	1f c0       	rjmp	.+62     	; 0x9b98 <Wifi_GetTime+0xe6>
		return false;
	}

    memcpy(timeString,(strstr(string,"RTC=")+4),10);
    9b5a:	c8 01       	movw	r24, r16
    9b5c:	6c ef       	ldi	r22, 0xFC	; 252
    9b5e:	72 e2       	ldi	r23, 0x22	; 34
    9b60:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9b64:	de 01       	movw	r26, r28
    9b66:	11 96       	adiw	r26, 0x01	; 1
    9b68:	fc 01       	movw	r30, r24
    9b6a:	34 96       	adiw	r30, 0x04	; 4
    9b6c:	8a e0       	ldi	r24, 0x0A	; 10
    9b6e:	01 90       	ld	r0, Z+
    9b70:	0d 92       	st	X+, r0
    9b72:	81 50       	subi	r24, 0x01	; 1
    9b74:	e1 f7       	brne	.-8      	; 0x9b6e <Wifi_GetTime+0xbc>
    timeString[10] = 0;
    9b76:	1b 86       	std	Y+11, r1	; 0x0b
    time_secs = atol(timeString);
    9b78:	ce 01       	movw	r24, r28
    9b7a:	01 96       	adiw	r24, 0x01	; 1
    9b7c:	0e 94 9b 62 	call	0xc536	; 0xc536 <atol>
    9b80:	9b 01       	movw	r18, r22
    9b82:	ac 01       	movw	r20, r24
    9b84:	20 93 1c 34 	sts	0x341C, r18
    9b88:	30 93 1d 34 	sts	0x341D, r19
    9b8c:	40 93 1e 34 	sts	0x341E, r20
    9b90:	50 93 1f 34 	sts	0x341F, r21
    9b94:	81 e0       	ldi	r24, 0x01	; 1
    9b96:	01 c0       	rjmp	.+2      	; 0x9b9a <Wifi_GetTime+0xe8>
    return true;
    9b98:	80 e0       	ldi	r24, 0x00	; 0
}
    9b9a:	cb 5a       	subi	r28, 0xAB	; 171
    9b9c:	df 4f       	sbci	r29, 0xFF	; 255
    9b9e:	cd bf       	out	0x3d, r28	; 61
    9ba0:	de bf       	out	0x3e, r29	; 62
    9ba2:	cf 91       	pop	r28
    9ba4:	df 91       	pop	r29
    9ba6:	1f 91       	pop	r17
    9ba8:	0f 91       	pop	r16
    9baa:	ff 90       	pop	r15
    9bac:	df 90       	pop	r13
    9bae:	cf 90       	pop	r12
    9bb0:	bf 90       	pop	r11
    9bb2:	af 90       	pop	r10
    9bb4:	08 95       	ret

00009bb6 <SD_Open>:
	f_mount(1, &fso1);
	return tmp;
}


uint8_t SD_Open(char string []){
    9bb6:	cf 93       	push	r28
    9bb8:	df 93       	push	r29
    9bba:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    9bbc:	85 ea       	ldi	r24, 0xA5	; 165
    9bbe:	9d e3       	ldi	r25, 0x3D	; 61
    9bc0:	be 01       	movw	r22, r28
    9bc2:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
	strupr(currentLogFile);
    9bc6:	85 ea       	ldi	r24, 0xA5	; 165
    9bc8:	9d e3       	ldi	r25, 0x3D	; 61
    9bca:	0e 94 6d 63 	call	0xc6da	; 0xc6da <strupr>
    9bce:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    9bd0:	a5 ea       	ldi	r26, 0xA5	; 165
    9bd2:	bd e3       	ldi	r27, 0x3D	; 61
    9bd4:	07 c0       	rjmp	.+14     	; 0x9be4 <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    9bd6:	fc 01       	movw	r30, r24
    9bd8:	eb 55       	subi	r30, 0x5B	; 91
    9bda:	f2 4c       	sbci	r31, 0xC2	; 194
    9bdc:	80 81       	ld	r24, Z
    9bde:	31 97       	sbiw	r30, 0x01	; 1
    9be0:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    9be2:	2f 5f       	subi	r18, 0xFF	; 255
    9be4:	fd 01       	movw	r30, r26
    9be6:	01 90       	ld	r0, Z+
    9be8:	00 20       	and	r0, r0
    9bea:	e9 f7       	brne	.-6      	; 0x9be6 <SD_Open+0x30>
    9bec:	31 97       	sbiw	r30, 0x01	; 1
    9bee:	e5 5a       	subi	r30, 0xA5	; 165
    9bf0:	fd 43       	sbci	r31, 0x3D	; 61
    9bf2:	82 2f       	mov	r24, r18
    9bf4:	90 e0       	ldi	r25, 0x00	; 0
    9bf6:	8e 17       	cp	r24, r30
    9bf8:	9f 07       	cpc	r25, r31
    9bfa:	68 f3       	brcs	.-38     	; 0x9bd6 <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    9bfc:	ec 55       	subi	r30, 0x5C	; 92
    9bfe:	f2 4c       	sbci	r31, 0xC2	; 194
    9c00:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9c02:	80 e3       	ldi	r24, 0x30	; 48
    9c04:	91 e5       	ldi	r25, 0x51	; 81
    9c06:	be 01       	movw	r22, r28
    9c08:	43 e1       	ldi	r20, 0x13	; 19
    9c0a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <f_open>
}
    9c0e:	df 91       	pop	r29
    9c10:	cf 91       	pop	r28
    9c12:	08 95       	ret

00009c14 <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    9c14:	0f 93       	push	r16
    9c16:	1f 93       	push	r17
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29

	SD_Open("/config.txt");
    9c1c:	81 e0       	ldi	r24, 0x01	; 1
    9c1e:	93 e2       	ldi	r25, 0x23	; 35
    9c20:	0e 94 db 4d 	call	0x9bb6	; 0x9bb6 <SD_Open>
    f_lseek(&Log_File, 0);
    9c24:	80 e3       	ldi	r24, 0x30	; 48
    9c26:	91 e5       	ldi	r25, 0x51	; 81
    9c28:	40 e0       	ldi	r20, 0x00	; 0
    9c2a:	50 e0       	ldi	r21, 0x00	; 0
    9c2c:	60 e0       	ldi	r22, 0x00	; 0
    9c2e:	70 e0       	ldi	r23, 0x00	; 0
    9c30:	0e 94 ed 1c 	call	0x39da	; 0x39da <f_lseek>
               break;
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
    9c34:	ca e3       	ldi	r28, 0x3A	; 58
    9c36:	de e5       	ldi	r29, 0x5E	; 94
	      strtok(temp,"=");
	      strcpy(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
    9c38:	01 ed       	ldi	r16, 0xD1	; 209
    9c3a:	1b e4       	ldi	r17, 0x4B	; 75

	SD_Open("/config.txt");
    f_lseek(&Log_File, 0);

	while(true){
	  f_gets(temp,50,&Log_File);
    9c3c:	89 e1       	ldi	r24, 0x19	; 25
    9c3e:	9b e4       	ldi	r25, 0x4B	; 75
    9c40:	62 e3       	ldi	r22, 0x32	; 50
    9c42:	70 e0       	ldi	r23, 0x00	; 0
    9c44:	40 e3       	ldi	r20, 0x30	; 48
    9c46:	51 e5       	ldi	r21, 0x51	; 81
    9c48:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <f_gets>
	  if(temp[0] != 0){
    9c4c:	80 91 19 4b 	lds	r24, 0x4B19
    9c50:	88 23       	and	r24, r24
    9c52:	09 f4       	brne	.+2      	; 0x9c56 <Read_config_file+0x42>
    9c54:	b0 c1       	rjmp	.+864    	; 0x9fb6 <Read_config_file+0x3a2>
	    if(strstr(temp,"ssid") != 0){
    9c56:	89 e1       	ldi	r24, 0x19	; 25
    9c58:	9b e4       	ldi	r25, 0x4B	; 75
    9c5a:	6d e0       	ldi	r22, 0x0D	; 13
    9c5c:	73 e2       	ldi	r23, 0x23	; 35
    9c5e:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9c62:	00 97       	sbiw	r24, 0x00	; 0
    9c64:	a9 f0       	breq	.+42     	; 0x9c90 <Read_config_file+0x7c>
	      strtok(temp,"=");
    9c66:	89 e1       	ldi	r24, 0x19	; 25
    9c68:	9b e4       	ldi	r25, 0x4B	; 75
    9c6a:	62 e1       	ldi	r22, 0x12	; 18
    9c6c:	73 e2       	ldi	r23, 0x23	; 35
    9c6e:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(ssid,strtok(NULL,"="));
    9c72:	80 e0       	ldi	r24, 0x00	; 0
    9c74:	90 e0       	ldi	r25, 0x00	; 0
    9c76:	62 e1       	ldi	r22, 0x12	; 18
    9c78:	73 e2       	ldi	r23, 0x23	; 35
    9c7a:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9c7e:	bc 01       	movw	r22, r24
    9c80:	86 e1       	ldi	r24, 0x16	; 22
    9c82:	99 e3       	ldi	r25, 0x39	; 57
    9c84:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
	      ssidRead = true;
    9c88:	81 e0       	ldi	r24, 0x01	; 1
    9c8a:	80 93 64 34 	sts	0x3464, r24
    9c8e:	d6 cf       	rjmp	.-84     	; 0x9c3c <Read_config_file+0x28>
	    } else if(strstr(temp,"phrase") != 0){
    9c90:	89 e1       	ldi	r24, 0x19	; 25
    9c92:	9b e4       	ldi	r25, 0x4B	; 75
    9c94:	64 e1       	ldi	r22, 0x14	; 20
    9c96:	73 e2       	ldi	r23, 0x23	; 35
    9c98:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9c9c:	00 97       	sbiw	r24, 0x00	; 0
    9c9e:	a9 f0       	breq	.+42     	; 0x9cca <Read_config_file+0xb6>
	      strtok(temp,"=");
    9ca0:	89 e1       	ldi	r24, 0x19	; 25
    9ca2:	9b e4       	ldi	r25, 0x4B	; 75
    9ca4:	62 e1       	ldi	r22, 0x12	; 18
    9ca6:	73 e2       	ldi	r23, 0x23	; 35
    9ca8:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(phrase,strtok(NULL,"="));
    9cac:	80 e0       	ldi	r24, 0x00	; 0
    9cae:	90 e0       	ldi	r25, 0x00	; 0
    9cb0:	62 e1       	ldi	r22, 0x12	; 18
    9cb2:	73 e2       	ldi	r23, 0x23	; 35
    9cb4:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9cb8:	bc 01       	movw	r22, r24
    9cba:	83 ec       	ldi	r24, 0xC3	; 195
    9cbc:	9c e4       	ldi	r25, 0x4C	; 76
    9cbe:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
	      phraseRead = true;
    9cc2:	81 e0       	ldi	r24, 0x01	; 1
    9cc4:	80 93 62 34 	sts	0x3462, r24
    9cc8:	b9 cf       	rjmp	.-142    	; 0x9c3c <Read_config_file+0x28>
	    } else if(strstr(temp,"key") != 0){
    9cca:	89 e1       	ldi	r24, 0x19	; 25
    9ccc:	9b e4       	ldi	r25, 0x4B	; 75
    9cce:	6b e1       	ldi	r22, 0x1B	; 27
    9cd0:	73 e2       	ldi	r23, 0x23	; 35
    9cd2:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9cd6:	00 97       	sbiw	r24, 0x00	; 0
    9cd8:	a9 f0       	breq	.+42     	; 0x9d04 <Read_config_file+0xf0>
	      strtok(temp,"=");
    9cda:	89 e1       	ldi	r24, 0x19	; 25
    9cdc:	9b e4       	ldi	r25, 0x4B	; 75
    9cde:	62 e1       	ldi	r22, 0x12	; 18
    9ce0:	73 e2       	ldi	r23, 0x23	; 35
    9ce2:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(key,strtok(NULL,"="));
    9ce6:	80 e0       	ldi	r24, 0x00	; 0
    9ce8:	90 e0       	ldi	r25, 0x00	; 0
    9cea:	62 e1       	ldi	r22, 0x12	; 18
    9cec:	73 e2       	ldi	r23, 0x23	; 35
    9cee:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9cf2:	bc 01       	movw	r22, r24
    9cf4:	8e ef       	ldi	r24, 0xFE	; 254
    9cf6:	90 e5       	ldi	r25, 0x50	; 80
    9cf8:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
	      keyRead = true;
    9cfc:	81 e0       	ldi	r24, 0x01	; 1
    9cfe:	80 93 63 34 	sts	0x3463, r24
    9d02:	9c cf       	rjmp	.-200    	; 0x9c3c <Read_config_file+0x28>
	    } else if(strstr(temp,"port") != 0){
    9d04:	89 e1       	ldi	r24, 0x19	; 25
    9d06:	9b e4       	ldi	r25, 0x4B	; 75
    9d08:	6f e1       	ldi	r22, 0x1F	; 31
    9d0a:	73 e2       	ldi	r23, 0x23	; 35
    9d0c:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9d10:	00 97       	sbiw	r24, 0x00	; 0
    9d12:	81 f0       	breq	.+32     	; 0x9d34 <Read_config_file+0x120>
	      strtok(temp,"=");
    9d14:	89 e1       	ldi	r24, 0x19	; 25
    9d16:	9b e4       	ldi	r25, 0x4B	; 75
    9d18:	62 e1       	ldi	r22, 0x12	; 18
    9d1a:	73 e2       	ldi	r23, 0x23	; 35
    9d1c:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(port,strtok(NULL,"="));
    9d20:	80 e0       	ldi	r24, 0x00	; 0
    9d22:	90 e0       	ldi	r25, 0x00	; 0
    9d24:	62 e1       	ldi	r22, 0x12	; 18
    9d26:	73 e2       	ldi	r23, 0x23	; 35
    9d28:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9d2c:	bc 01       	movw	r22, r24
    9d2e:	88 e0       	ldi	r24, 0x08	; 8
    9d30:	9e e5       	ldi	r25, 0x5E	; 94
    9d32:	94 c0       	rjmp	.+296    	; 0x9e5c <Read_config_file+0x248>
	    } else if(strstr(temp,"auth") != 0){
    9d34:	89 e1       	ldi	r24, 0x19	; 25
    9d36:	9b e4       	ldi	r25, 0x4B	; 75
    9d38:	64 e2       	ldi	r22, 0x24	; 36
    9d3a:	73 e2       	ldi	r23, 0x23	; 35
    9d3c:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9d40:	00 97       	sbiw	r24, 0x00	; 0
    9d42:	a9 f0       	breq	.+42     	; 0x9d6e <Read_config_file+0x15a>
	      strtok(temp,"=");
    9d44:	89 e1       	ldi	r24, 0x19	; 25
    9d46:	9b e4       	ldi	r25, 0x4B	; 75
    9d48:	62 e1       	ldi	r22, 0x12	; 18
    9d4a:	73 e2       	ldi	r23, 0x23	; 35
    9d4c:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(auth,strtok(NULL,"="));
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	90 e0       	ldi	r25, 0x00	; 0
    9d54:	62 e1       	ldi	r22, 0x12	; 18
    9d56:	73 e2       	ldi	r23, 0x23	; 35
    9d58:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9d5c:	bc 01       	movw	r22, r24
    9d5e:	81 e0       	ldi	r24, 0x01	; 1
    9d60:	96 e4       	ldi	r25, 0x46	; 70
    9d62:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
	      authRead = true;
    9d66:	81 e0       	ldi	r24, 0x01	; 1
    9d68:	80 93 61 34 	sts	0x3461, r24
    9d6c:	67 cf       	rjmp	.-306    	; 0x9c3c <Read_config_file+0x28>
	     }else if(strstr(temp,"user") != 0){
    9d6e:	89 e1       	ldi	r24, 0x19	; 25
    9d70:	9b e4       	ldi	r25, 0x4B	; 75
    9d72:	69 e2       	ldi	r22, 0x29	; 41
    9d74:	73 e2       	ldi	r23, 0x23	; 35
    9d76:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9d7a:	00 97       	sbiw	r24, 0x00	; 0
    9d7c:	39 f1       	breq	.+78     	; 0x9dcc <Read_config_file+0x1b8>
	      strtok(temp,"=");
    9d7e:	89 e1       	ldi	r24, 0x19	; 25
    9d80:	9b e4       	ldi	r25, 0x4B	; 75
    9d82:	62 e1       	ldi	r22, 0x12	; 18
    9d84:	73 e2       	ldi	r23, 0x23	; 35
    9d86:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(user,strtok(NULL,"="));
    9d8a:	80 e0       	ldi	r24, 0x00	; 0
    9d8c:	90 e0       	ldi	r25, 0x00	; 0
    9d8e:	62 e1       	ldi	r22, 0x12	; 18
    9d90:	73 e2       	ldi	r23, 0x23	; 35
    9d92:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9d96:	bc 01       	movw	r22, r24
    9d98:	81 ed       	ldi	r24, 0xD1	; 209
    9d9a:	9b e4       	ldi	r25, 0x4B	; 75
    9d9c:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
	      for(uint8_t i = 0; i < strlen(user); i++){
    9da0:	f8 01       	movw	r30, r16
    9da2:	01 90       	ld	r0, Z+
    9da4:	00 20       	and	r0, r0
    9da6:	e9 f7       	brne	.-6      	; 0x9da2 <Read_config_file+0x18e>
    9da8:	31 97       	sbiw	r30, 0x01	; 1
    9daa:	e1 5d       	subi	r30, 0xD1	; 209
    9dac:	fb 44       	sbci	r31, 0x4B	; 75
    9dae:	20 e0       	ldi	r18, 0x00	; 0
    9db0:	07 c0       	rjmp	.+14     	; 0x9dc0 <Read_config_file+0x1ac>
            if(user[i] < ' '){
    9db2:	dc 01       	movw	r26, r24
    9db4:	af 52       	subi	r26, 0x2F	; 47
    9db6:	b4 4b       	sbci	r27, 0xB4	; 180
    9db8:	8c 91       	ld	r24, X
    9dba:	80 32       	cpi	r24, 0x20	; 32
    9dbc:	78 f1       	brcs	.+94     	; 0x9e1c <Read_config_file+0x208>
	      strcpy(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
	      for(uint8_t i = 0; i < strlen(user); i++){
    9dbe:	2f 5f       	subi	r18, 0xFF	; 255
    9dc0:	82 2f       	mov	r24, r18
    9dc2:	90 e0       	ldi	r25, 0x00	; 0
    9dc4:	8e 17       	cp	r24, r30
    9dc6:	9f 07       	cpc	r25, r31
    9dc8:	a0 f3       	brcs	.-24     	; 0x9db2 <Read_config_file+0x19e>
    9dca:	38 cf       	rjmp	.-400    	; 0x9c3c <Read_config_file+0x28>
            if(user[i] < ' '){
               user[i] = 0;
               break;
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
    9dcc:	89 e1       	ldi	r24, 0x19	; 25
    9dce:	9b e4       	ldi	r25, 0x4B	; 75
    9dd0:	6e e2       	ldi	r22, 0x2E	; 46
    9dd2:	73 e2       	ldi	r23, 0x23	; 35
    9dd4:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9dd8:	00 97       	sbiw	r24, 0x00	; 0
    9dda:	49 f1       	breq	.+82     	; 0x9e2e <Read_config_file+0x21a>
	      strtok(temp,"=");
    9ddc:	89 e1       	ldi	r24, 0x19	; 25
    9dde:	9b e4       	ldi	r25, 0x4B	; 75
    9de0:	62 e1       	ldi	r22, 0x12	; 18
    9de2:	73 e2       	ldi	r23, 0x23	; 35
    9de4:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(nickname,strtok(NULL,"="));
    9de8:	80 e0       	ldi	r24, 0x00	; 0
    9dea:	90 e0       	ldi	r25, 0x00	; 0
    9dec:	62 e1       	ldi	r22, 0x12	; 18
    9dee:	73 e2       	ldi	r23, 0x23	; 35
    9df0:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9df4:	bc 01       	movw	r22, r24
    9df6:	8a e3       	ldi	r24, 0x3A	; 58
    9df8:	9e e5       	ldi	r25, 0x5E	; 94
    9dfa:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
          for(uint8_t i = 0; i < strlen(nickname); i++){
    9dfe:	fe 01       	movw	r30, r28
    9e00:	01 90       	ld	r0, Z+
    9e02:	00 20       	and	r0, r0
    9e04:	e9 f7       	brne	.-6      	; 0x9e00 <Read_config_file+0x1ec>
    9e06:	31 97       	sbiw	r30, 0x01	; 1
    9e08:	ea 53       	subi	r30, 0x3A	; 58
    9e0a:	fe 45       	sbci	r31, 0x5E	; 94
    9e0c:	20 e0       	ldi	r18, 0x00	; 0
    9e0e:	09 c0       	rjmp	.+18     	; 0x9e22 <Read_config_file+0x20e>
            if(nickname[i] < ' '){
    9e10:	dc 01       	movw	r26, r24
    9e12:	a6 5c       	subi	r26, 0xC6	; 198
    9e14:	b1 4a       	sbci	r27, 0xA1	; 161
    9e16:	8c 91       	ld	r24, X
    9e18:	80 32       	cpi	r24, 0x20	; 32
    9e1a:	10 f4       	brcc	.+4      	; 0x9e20 <Read_config_file+0x20c>
               nickname[i] = 0;
    9e1c:	1c 92       	st	X, r1
    9e1e:	0e cf       	rjmp	.-484    	; 0x9c3c <Read_config_file+0x28>
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
          for(uint8_t i = 0; i < strlen(nickname); i++){
    9e20:	2f 5f       	subi	r18, 0xFF	; 255
    9e22:	82 2f       	mov	r24, r18
    9e24:	90 e0       	ldi	r25, 0x00	; 0
    9e26:	8e 17       	cp	r24, r30
    9e28:	9f 07       	cpc	r25, r31
    9e2a:	90 f3       	brcs	.-28     	; 0x9e10 <Read_config_file+0x1fc>
    9e2c:	07 cf       	rjmp	.-498    	; 0x9c3c <Read_config_file+0x28>
               nickname[i] = 0;
               break;
            }
          }

	    } else if(strstr(temp,"server") != 0){
    9e2e:	89 e1       	ldi	r24, 0x19	; 25
    9e30:	9b e4       	ldi	r25, 0x4B	; 75
    9e32:	67 e3       	ldi	r22, 0x37	; 55
    9e34:	73 e2       	ldi	r23, 0x23	; 35
    9e36:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9e3a:	00 97       	sbiw	r24, 0x00	; 0
    9e3c:	91 f0       	breq	.+36     	; 0x9e62 <Read_config_file+0x24e>
	      strtok(temp,"=");
    9e3e:	89 e1       	ldi	r24, 0x19	; 25
    9e40:	9b e4       	ldi	r25, 0x4B	; 75
    9e42:	62 e1       	ldi	r22, 0x12	; 18
    9e44:	73 e2       	ldi	r23, 0x23	; 35
    9e46:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(server,strtok(NULL,"="));
    9e4a:	80 e0       	ldi	r24, 0x00	; 0
    9e4c:	90 e0       	ldi	r25, 0x00	; 0
    9e4e:	62 e1       	ldi	r22, 0x12	; 18
    9e50:	73 e2       	ldi	r23, 0x23	; 35
    9e52:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9e56:	bc 01       	movw	r22, r24
    9e58:	85 ee       	ldi	r24, 0xE5	; 229
    9e5a:	9b e4       	ldi	r25, 0x4B	; 75
    9e5c:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
    9e60:	ed ce       	rjmp	.-550    	; 0x9c3c <Read_config_file+0x28>
	    } else if(strstr(temp,"daylightTime") != 0){
    9e62:	89 e1       	ldi	r24, 0x19	; 25
    9e64:	9b e4       	ldi	r25, 0x4B	; 75
    9e66:	6e e3       	ldi	r22, 0x3E	; 62
    9e68:	73 e2       	ldi	r23, 0x23	; 35
    9e6a:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9e6e:	00 97       	sbiw	r24, 0x00	; 0
    9e70:	81 f0       	breq	.+32     	; 0x9e92 <Read_config_file+0x27e>
	      strtok(temp,"=");
    9e72:	89 e1       	ldi	r24, 0x19	; 25
    9e74:	9b e4       	ldi	r25, 0x4B	; 75
    9e76:	62 e1       	ldi	r22, 0x12	; 18
    9e78:	73 e2       	ldi	r23, 0x23	; 35
    9e7a:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
	      strcpy(daylightTime,strtok(NULL,"="));
    9e7e:	80 e0       	ldi	r24, 0x00	; 0
    9e80:	90 e0       	ldi	r25, 0x00	; 0
    9e82:	62 e1       	ldi	r22, 0x12	; 18
    9e84:	73 e2       	ldi	r23, 0x23	; 35
    9e86:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9e8a:	bc 01       	movw	r22, r24
    9e8c:	86 e8       	ldi	r24, 0x86	; 134
    9e8e:	9c e4       	ldi	r25, 0x4C	; 76
    9e90:	e5 cf       	rjmp	.-54     	; 0x9e5c <Read_config_file+0x248>
        } else if(strstr(temp,"useWifi") != 0){
    9e92:	89 e1       	ldi	r24, 0x19	; 25
    9e94:	9b e4       	ldi	r25, 0x4B	; 75
    9e96:	6b e4       	ldi	r22, 0x4B	; 75
    9e98:	73 e2       	ldi	r23, 0x23	; 35
    9e9a:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9e9e:	00 97       	sbiw	r24, 0x00	; 0
    9ea0:	81 f0       	breq	.+32     	; 0x9ec2 <Read_config_file+0x2ae>
            strtok(temp,"=");
    9ea2:	89 e1       	ldi	r24, 0x19	; 25
    9ea4:	9b e4       	ldi	r25, 0x4B	; 75
    9ea6:	62 e1       	ldi	r22, 0x12	; 18
    9ea8:	73 e2       	ldi	r23, 0x23	; 35
    9eaa:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
            strcpy(uploaderToUse,strtok(NULL,"="));
    9eae:	80 e0       	ldi	r24, 0x00	; 0
    9eb0:	90 e0       	ldi	r25, 0x00	; 0
    9eb2:	62 e1       	ldi	r22, 0x12	; 18
    9eb4:	73 e2       	ldi	r23, 0x23	; 35
    9eb6:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9eba:	bc 01       	movw	r22, r24
    9ebc:	87 ec       	ldi	r24, 0xC7	; 199
    9ebe:	9b e4       	ldi	r25, 0x4B	; 75
    9ec0:	cd cf       	rjmp	.-102    	; 0x9e5c <Read_config_file+0x248>
        } else if(strstr(temp,"demoMode") != 0){
    9ec2:	89 e1       	ldi	r24, 0x19	; 25
    9ec4:	9b e4       	ldi	r25, 0x4B	; 75
    9ec6:	63 e5       	ldi	r22, 0x53	; 83
    9ec8:	73 e2       	ldi	r23, 0x23	; 35
    9eca:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9ece:	00 97       	sbiw	r24, 0x00	; 0
    9ed0:	81 f0       	breq	.+32     	; 0x9ef2 <Read_config_file+0x2de>
            strtok(temp,"=");
    9ed2:	89 e1       	ldi	r24, 0x19	; 25
    9ed4:	9b e4       	ldi	r25, 0x4B	; 75
    9ed6:	62 e1       	ldi	r22, 0x12	; 18
    9ed8:	73 e2       	ldi	r23, 0x23	; 35
    9eda:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
            strcpy(demoModeString,strtok(NULL,"="));
    9ede:	80 e0       	ldi	r24, 0x00	; 0
    9ee0:	90 e0       	ldi	r25, 0x00	; 0
    9ee2:	62 e1       	ldi	r22, 0x12	; 18
    9ee4:	73 e2       	ldi	r23, 0x23	; 35
    9ee6:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9eea:	bc 01       	movw	r22, r24
    9eec:	8b ed       	ldi	r24, 0xDB	; 219
    9eee:	9b e4       	ldi	r25, 0x4B	; 75
    9ef0:	b5 cf       	rjmp	.-150    	; 0x9e5c <Read_config_file+0x248>
        } else if(strstr(temp,"recordAudio") != 0){
    9ef2:	89 e1       	ldi	r24, 0x19	; 25
    9ef4:	9b e4       	ldi	r25, 0x4B	; 75
    9ef6:	6c e5       	ldi	r22, 0x5C	; 92
    9ef8:	73 e2       	ldi	r23, 0x23	; 35
    9efa:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9efe:	00 97       	sbiw	r24, 0x00	; 0
    9f00:	81 f0       	breq	.+32     	; 0x9f22 <Read_config_file+0x30e>
            strtok(temp,"=");
    9f02:	89 e1       	ldi	r24, 0x19	; 25
    9f04:	9b e4       	ldi	r25, 0x4B	; 75
    9f06:	62 e1       	ldi	r22, 0x12	; 18
    9f08:	73 e2       	ldi	r23, 0x23	; 35
    9f0a:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
            strcpy(microphoneString,strtok(NULL,"="));
    9f0e:	80 e0       	ldi	r24, 0x00	; 0
    9f10:	90 e0       	ldi	r25, 0x00	; 0
    9f12:	62 e1       	ldi	r22, 0x12	; 18
    9f14:	73 e2       	ldi	r23, 0x23	; 35
    9f16:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9f1a:	bc 01       	movw	r22, r24
    9f1c:	80 e5       	ldi	r24, 0x50	; 80
    9f1e:	93 e5       	ldi	r25, 0x53	; 83
    9f20:	9d cf       	rjmp	.-198    	; 0x9e5c <Read_config_file+0x248>
	    } else if(strstr(temp,"zone") != 0){
    9f22:	89 e1       	ldi	r24, 0x19	; 25
    9f24:	9b e4       	ldi	r25, 0x4B	; 75
    9f26:	68 e6       	ldi	r22, 0x68	; 104
    9f28:	73 e2       	ldi	r23, 0x23	; 35
    9f2a:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9f2e:	00 97       	sbiw	r24, 0x00	; 0
    9f30:	09 f4       	brne	.+2      	; 0x9f34 <Read_config_file+0x320>
    9f32:	84 ce       	rjmp	.-760    	; 0x9c3c <Read_config_file+0x28>
	      strtok(temp,"=");
    9f34:	89 e1       	ldi	r24, 0x19	; 25
    9f36:	9b e4       	ldi	r25, 0x4B	; 75
    9f38:	62 e1       	ldi	r22, 0x12	; 18
    9f3a:	73 e2       	ldi	r23, 0x23	; 35
    9f3c:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
          memmove(zone,strtok(NULL,"="),3);
    9f40:	80 e0       	ldi	r24, 0x00	; 0
    9f42:	90 e0       	ldi	r25, 0x00	; 0
    9f44:	62 e1       	ldi	r22, 0x12	; 18
    9f46:	73 e2       	ldi	r23, 0x23	; 35
    9f48:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    9f4c:	bc 01       	movw	r22, r24
    9f4e:	81 e9       	ldi	r24, 0x91	; 145
    9f50:	91 e3       	ldi	r25, 0x31	; 49
    9f52:	43 e0       	ldi	r20, 0x03	; 3
    9f54:	50 e0       	ldi	r21, 0x00	; 0
    9f56:	0e 94 c7 62 	call	0xc58e	; 0xc58e <memmove>
	      if(strcmp(zone,"EST") == 0){
    9f5a:	81 e9       	ldi	r24, 0x91	; 145
    9f5c:	91 e3       	ldi	r25, 0x31	; 49
    9f5e:	6d e6       	ldi	r22, 0x6D	; 109
    9f60:	73 e2       	ldi	r23, 0x23	; 35
    9f62:	0e 94 1c 63 	call	0xc638	; 0xc638 <strcmp>
    9f66:	00 97       	sbiw	r24, 0x00	; 0
    9f68:	11 f4       	brne	.+4      	; 0x9f6e <Read_config_file+0x35a>
	    	  timeZoneShift = 5;
    9f6a:	85 e0       	ldi	r24, 0x05	; 5
    9f6c:	1e c0       	rjmp	.+60     	; 0x9faa <Read_config_file+0x396>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"CST") == 0){
    9f6e:	81 e9       	ldi	r24, 0x91	; 145
    9f70:	91 e3       	ldi	r25, 0x31	; 49
    9f72:	61 e7       	ldi	r22, 0x71	; 113
    9f74:	73 e2       	ldi	r23, 0x23	; 35
    9f76:	0e 94 1c 63 	call	0xc638	; 0xc638 <strcmp>
    9f7a:	00 97       	sbiw	r24, 0x00	; 0
    9f7c:	11 f4       	brne	.+4      	; 0x9f82 <Read_config_file+0x36e>
	    	  timeZoneShift = 6;
    9f7e:	86 e0       	ldi	r24, 0x06	; 6
    9f80:	14 c0       	rjmp	.+40     	; 0x9faa <Read_config_file+0x396>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"MST") == 0){
    9f82:	81 e9       	ldi	r24, 0x91	; 145
    9f84:	91 e3       	ldi	r25, 0x31	; 49
    9f86:	65 e7       	ldi	r22, 0x75	; 117
    9f88:	73 e2       	ldi	r23, 0x23	; 35
    9f8a:	0e 94 1c 63 	call	0xc638	; 0xc638 <strcmp>
    9f8e:	00 97       	sbiw	r24, 0x00	; 0
    9f90:	11 f4       	brne	.+4      	; 0x9f96 <Read_config_file+0x382>
	    	  timeZoneShift = 7;
    9f92:	87 e0       	ldi	r24, 0x07	; 7
    9f94:	0a c0       	rjmp	.+20     	; 0x9faa <Read_config_file+0x396>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"PST") == 0){
    9f96:	81 e9       	ldi	r24, 0x91	; 145
    9f98:	91 e3       	ldi	r25, 0x31	; 49
    9f9a:	69 e7       	ldi	r22, 0x79	; 121
    9f9c:	73 e2       	ldi	r23, 0x23	; 35
    9f9e:	0e 94 1c 63 	call	0xc638	; 0xc638 <strcmp>
    9fa2:	00 97       	sbiw	r24, 0x00	; 0
    9fa4:	09 f0       	breq	.+2      	; 0x9fa8 <Read_config_file+0x394>
    9fa6:	4a ce       	rjmp	.-876    	; 0x9c3c <Read_config_file+0x28>
	    	  timeZoneShift = 8;
    9fa8:	88 e0       	ldi	r24, 0x08	; 8
    9faa:	80 93 66 34 	sts	0x3466, r24
	    	  zoneChanged = true;
    9fae:	81 e0       	ldi	r24, 0x01	; 1
    9fb0:	80 93 65 34 	sts	0x3465, r24
    9fb4:	43 ce       	rjmp	.-890    	; 0x9c3c <Read_config_file+0x28>

	  } else {
	    break;
	  }
	}
    if(server[strlen(server)-1] < 32){
    9fb6:	e5 ee       	ldi	r30, 0xE5	; 229
    9fb8:	fb e4       	ldi	r31, 0x4B	; 75
    9fba:	01 90       	ld	r0, Z+
    9fbc:	00 20       	and	r0, r0
    9fbe:	e9 f7       	brne	.-6      	; 0x9fba <Read_config_file+0x3a6>
    9fc0:	32 97       	sbiw	r30, 0x02	; 2
    9fc2:	80 81       	ld	r24, Z
    9fc4:	80 32       	cpi	r24, 0x20	; 32
    9fc6:	08 f4       	brcc	.+2      	; 0x9fca <Read_config_file+0x3b6>
        server[strlen(server)-1] = 0;
    9fc8:	10 82       	st	Z, r1
    }
	strcat(serverOpenCommand,server);
    9fca:	8f e5       	ldi	r24, 0x5F	; 95
    9fcc:	91 e3       	ldi	r25, 0x31	; 49
    9fce:	65 ee       	ldi	r22, 0xE5	; 229
    9fd0:	7b e4       	ldi	r23, 0x4B	; 75
    9fd2:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	strcat(serverOpenCommand," ");
    9fd6:	8f e5       	ldi	r24, 0x5F	; 95
    9fd8:	91 e3       	ldi	r25, 0x31	; 49
    9fda:	6d e7       	ldi	r22, 0x7D	; 125
    9fdc:	73 e2       	ldi	r23, 0x23	; 35
    9fde:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	strcat(serverOpenCommand,port);
    9fe2:	8f e5       	ldi	r24, 0x5F	; 95
    9fe4:	91 e3       	ldi	r25, 0x31	; 49
    9fe6:	68 e0       	ldi	r22, 0x08	; 8
    9fe8:	7e e5       	ldi	r23, 0x5E	; 94
    9fea:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>

    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    9fee:	86 e8       	ldi	r24, 0x86	; 134
    9ff0:	9c e4       	ldi	r25, 0x4C	; 76
    9ff2:	6f e7       	ldi	r22, 0x7F	; 127
    9ff4:	73 e2       	ldi	r23, 0x23	; 35
    9ff6:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    9ffa:	00 97       	sbiw	r24, 0x00	; 0
    9ffc:	49 f0       	breq	.+18     	; 0xa010 <Read_config_file+0x3fc>
    9ffe:	80 91 65 34 	lds	r24, 0x3465
    a002:	88 23       	and	r24, r24
    a004:	29 f0       	breq	.+10     	; 0xa010 <Read_config_file+0x3fc>
       timeZoneShift--;
    a006:	80 91 66 34 	lds	r24, 0x3466
    a00a:	81 50       	subi	r24, 0x01	; 1
    a00c:	80 93 66 34 	sts	0x3466, r24
    }
    if((strstr(uploaderToUse,"true") != 0)){
    a010:	87 ec       	ldi	r24, 0xC7	; 199
    a012:	9b e4       	ldi	r25, 0x4B	; 75
    a014:	6f e7       	ldi	r22, 0x7F	; 127
    a016:	73 e2       	ldi	r23, 0x23	; 35
    a018:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    a01c:	00 97       	sbiw	r24, 0x00	; 0
    a01e:	19 f0       	breq	.+6      	; 0xa026 <Read_config_file+0x412>
       useWifiForUploading = true;
    a020:	81 e0       	ldi	r24, 0x01	; 1
    a022:	80 93 0f 34 	sts	0x340F, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    a026:	8b ed       	ldi	r24, 0xDB	; 219
    a028:	9b e4       	ldi	r25, 0x4B	; 75
    a02a:	6f e7       	ldi	r22, 0x7F	; 127
    a02c:	73 e2       	ldi	r23, 0x23	; 35
    a02e:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    a032:	00 97       	sbiw	r24, 0x00	; 0
    a034:	19 f0       	breq	.+6      	; 0xa03c <Read_config_file+0x428>
       demoMode = true;
    a036:	81 e0       	ldi	r24, 0x01	; 1
    a038:	80 93 0e 34 	sts	0x340E, r24
    }
    if((strstr(microphoneString,"true") != 0)){
    a03c:	80 e5       	ldi	r24, 0x50	; 80
    a03e:	93 e5       	ldi	r25, 0x53	; 83
    a040:	6f e7       	ldi	r22, 0x7F	; 127
    a042:	73 e2       	ldi	r23, 0x23	; 35
    a044:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    a048:	00 97       	sbiw	r24, 0x00	; 0
    a04a:	19 f0       	breq	.+6      	; 0xa052 <Read_config_file+0x43e>
       wantToRecordMicrophone = true;
    a04c:	81 e0       	ldi	r24, 0x01	; 1
    a04e:	80 93 4f 34 	sts	0x344F, r24
    }
}
    a052:	df 91       	pop	r29
    a054:	cf 91       	pop	r28
    a056:	1f 91       	pop	r17
    a058:	0f 91       	pop	r16
    a05a:	08 95       	ret

0000a05c <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    a05c:	1f 93       	push	r17
	uint8_t resp;

	SD_MakeFileName(time);
    a05e:	0e 94 da 46 	call	0x8db4	; 0x8db4 <SD_MakeFileName>
	resp = SD_Open(fileName);
    a062:	8d ee       	ldi	r24, 0xED	; 237
    a064:	95 e4       	ldi	r25, 0x45	; 69
    a066:	0e 94 db 4d 	call	0x9bb6	; 0x9bb6 <SD_Open>
    a06a:	18 2f       	mov	r17, r24
	if(resp != FR_OK){
    a06c:	88 23       	and	r24, r24
    a06e:	09 f0       	breq	.+2      	; 0xa072 <SD_StartLogFile+0x16>
    a070:	bc c0       	rjmp	.+376    	; 0xa1ea <SD_StartLogFile+0x18e>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    a072:	8f ef       	ldi	r24, 0xFF	; 255
    a074:	9f ef       	ldi	r25, 0xFF	; 255
    a076:	af ef       	ldi	r26, 0xFF	; 255
    a078:	bf ef       	ldi	r27, 0xFF	; 255
    a07a:	80 93 32 59 	sts	0x5932, r24
    a07e:	90 93 33 59 	sts	0x5933, r25
    a082:	a0 93 34 59 	sts	0x5934, r26
    a086:	b0 93 35 59 	sts	0x5935, r27
	resp = SD_Open(fileName);
	if(resp != FR_OK){
	    return resp;
	}
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    a08a:	6c e4       	ldi	r22, 0x4C	; 76
    a08c:	74 e7       	ldi	r23, 0x74	; 116
    a08e:	8e ed       	ldi	r24, 0xDE	; 222
    a090:	90 eb       	ldi	r25, 0xB0	; 176
    a092:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    a096:	67 e4       	ldi	r22, 0x47	; 71
    a098:	73 e0       	ldi	r23, 0x03	; 3
    a09a:	80 e0       	ldi	r24, 0x00	; 0
    a09c:	90 e0       	ldi	r25, 0x00	; 0
    a09e:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    a0a2:	81 e0       	ldi	r24, 0x01	; 1
    a0a4:	90 e0       	ldi	r25, 0x00	; 0
    a0a6:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

														// payload
	SD_Write16(0x0100);				// protocol version
    a0aa:	80 e0       	ldi	r24, 0x00	; 0
    a0ac:	91 e0       	ldi	r25, 0x01	; 1
    a0ae:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>
	SD_Write8(0x02);					// time protocol
    a0b2:	82 e0       	ldi	r24, 0x02	; 2
    a0b4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    a0b8:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    a0bc:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    a0c0:	67 e4       	ldi	r22, 0x47	; 71
    a0c2:	77 e4       	ldi	r23, 0x47	; 71
    a0c4:	88 e0       	ldi	r24, 0x08	; 8
    a0c6:	90 e0       	ldi	r25, 0x00	; 0
    a0c8:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SD_Write32>
	SD_Write16(0);
    a0cc:	80 e0       	ldi	r24, 0x00	; 0
    a0ce:	90 e0       	ldi	r25, 0x00	; 0
    a0d0:	0e 94 02 2c 	call	0x5804	; 0x5804 <SD_Write16>

	SD_WriteString("device_class");
    a0d4:	84 e8       	ldi	r24, 0x84	; 132
    a0d6:	93 e2       	ldi	r25, 0x23	; 35
    a0d8:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    a0dc:	89 e0       	ldi	r24, 0x09	; 9
    a0de:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString(DeviceClass);
    a0e2:	81 e9       	ldi	r24, 0x91	; 145
    a0e4:	93 e2       	ldi	r25, 0x23	; 35
    a0e6:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    a0ea:	8a e0       	ldi	r24, 0x0A	; 10
    a0ec:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
		
	SD_WriteString("device_id");
    a0f0:	8d e9       	ldi	r24, 0x9D	; 157
    a0f2:	93 e2       	ldi	r25, 0x23	; 35
    a0f4:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    a0f8:	89 e0       	ldi	r24, 0x09	; 9
    a0fa:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString(deviceID);
    a0fe:	88 e1       	ldi	r24, 0x18	; 24
    a100:	9c e4       	ldi	r25, 0x4C	; 76
    a102:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    a106:	8a e0       	ldi	r24, 0x0A	; 10
    a108:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
		
	SD_WriteString("firmware_version");
    a10c:	87 ea       	ldi	r24, 0xA7	; 167
    a10e:	93 e2       	ldi	r25, 0x23	; 35
    a110:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    a114:	89 e0       	ldi	r24, 0x09	; 9
    a116:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString(FirmwareVersion);
    a11a:	88 eb       	ldi	r24, 0xB8	; 184
    a11c:	93 e2       	ldi	r25, 0x23	; 35
    a11e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    a122:	8a e0       	ldi	r24, 0x0A	; 10
    a124:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
		
	SD_WriteString("hardware_version");
    a128:	8d eb       	ldi	r24, 0xBD	; 189
    a12a:	93 e2       	ldi	r25, 0x23	; 35
    a12c:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    a130:	89 e0       	ldi	r24, 0x09	; 9
    a132:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString(HardwareVersion);
    a136:	8e ec       	ldi	r24, 0xCE	; 206
    a138:	93 e2       	ldi	r25, 0x23	; 35
    a13a:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    a13e:	8a e0       	ldi	r24, 0x0A	; 10
    a140:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_WriteString("channel_specs");
    a144:	80 ed       	ldi	r24, 0xD0	; 208
    a146:	93 e2       	ldi	r25, 0x23	; 35
    a148:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x09);
    a14c:	89 e0       	ldi	r24, 0x09	; 9
    a14e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    a152:	8e ed       	ldi	r24, 0xDE	; 222
    a154:	93 e2       	ldi	r25, 0x23	; 35
    a156:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 0.1},");
    a15a:	8f e0       	ldi	r24, 0x0F	; 15
    a15c:	94 e2       	ldi	r25, 0x24	; 36
    a15e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 0.1},");
    a162:	8a e3       	ldi	r24, 0x3A	; 58
    a164:	94 e2       	ldi	r25, 0x24	; 36
    a166:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    a16a:	85 e6       	ldi	r24, 0x65	; 101
    a16c:	94 e2       	ldi	r25, 0x24	; 36
    a16e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    a172:	82 e9       	ldi	r24, 0x92	; 146
    a174:	94 e2       	ldi	r25, 0x24	; 36
    a176:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    a17a:	8d eb       	ldi	r24, 0xBD	; 189
    a17c:	94 e2       	ldi	r25, 0x24	; 36
    a17e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    a182:	89 ee       	ldi	r24, 0xE9	; 233
    a184:	94 e2       	ldi	r25, 0x24	; 36
    a186:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_1\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    a18a:	86 e1       	ldi	r24, 0x16	; 22
    a18c:	95 e2       	ldi	r25, 0x25	; 37
    a18e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_2\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    a192:	83 e4       	ldi	r24, 0x43	; 67
    a194:	95 e2       	ldi	r25, 0x25	; 37
    a196:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_3\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    a19a:	80 e7       	ldi	r24, 0x70	; 112
    a19c:	95 e2       	ldi	r25, 0x25	; 37
    a19e:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_4\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    a1a2:	8d e9       	ldi	r24, 0x9D	; 157
    a1a4:	95 e2       	ldi	r25, 0x25	; 37
    a1a6:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_5\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    a1aa:	8a ec       	ldi	r24, 0xCA	; 202
    a1ac:	95 e2       	ldi	r25, 0x25	; 37
    a1ae:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_6\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    a1b2:	87 ef       	ldi	r24, 0xF7	; 247
    a1b4:	95 e2       	ldi	r25, 0x25	; 37
    a1b6:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    a1ba:	84 e2       	ldi	r24, 0x24	; 36
    a1bc:	96 e2       	ldi	r25, 0x26	; 38
    a1be:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    a1c2:	85 e5       	ldi	r24, 0x55	; 85
    a1c4:	96 e2       	ldi	r25, 0x26	; 38
    a1c6:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    a1ca:	86 e8       	ldi	r24, 0x86	; 134
    a1cc:	96 e2       	ldi	r25, 0x26	; 38
    a1ce:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <SD_WriteString>
	SD_Write8(0x0A);
    a1d2:	8a e0       	ldi	r24, 0x0A	; 10
    a1d4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>
	
	SD_Write8(0x00);
    a1d8:	80 e0       	ldi	r24, 0x00	; 0
    a1da:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write8>

	SD_WriteCRC();			// CRC			
    a1de:	0e 94 23 2c 	call	0x5846	; 0x5846 <SD_WriteCRC>


	f_sync(&Log_File);
    a1e2:	80 e3       	ldi	r24, 0x30	; 48
    a1e4:	91 e5       	ldi	r25, 0x51	; 81
    a1e6:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>

	return resp;
}
    a1ea:	81 2f       	mov	r24, r17
    a1ec:	1f 91       	pop	r17
    a1ee:	08 95       	ret

0000a1f0 <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(TCE1_OVF_vect)
{
    a1f0:	1f 92       	push	r1
    a1f2:	0f 92       	push	r0
    a1f4:	0f b6       	in	r0, 0x3f	; 63
    a1f6:	0f 92       	push	r0
    a1f8:	0b b6       	in	r0, 0x3b	; 59
    a1fa:	0f 92       	push	r0
    a1fc:	11 24       	eor	r1, r1
    a1fe:	df 92       	push	r13
    a200:	ef 92       	push	r14
    a202:	ff 92       	push	r15
    a204:	0f 93       	push	r16
    a206:	1f 93       	push	r17
    a208:	2f 93       	push	r18
    a20a:	3f 93       	push	r19
    a20c:	4f 93       	push	r20
    a20e:	5f 93       	push	r21
    a210:	6f 93       	push	r22
    a212:	7f 93       	push	r23
    a214:	8f 93       	push	r24
    a216:	9f 93       	push	r25
    a218:	af 93       	push	r26
    a21a:	bf 93       	push	r27
    a21c:	ef 93       	push	r30
    a21e:	ff 93       	push	r31
    a220:	df 93       	push	r29
    a222:	cf 93       	push	r28
    a224:	0f 92       	push	r0
    a226:	0f 92       	push	r0
    a228:	cd b7       	in	r28, 0x3d	; 61
    a22a:	de b7       	in	r29, 0x3e	; 62
    sdInterrupt:

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    a22c:	80 91 46 34 	lds	r24, 0x3446
    a230:	88 23       	and	r24, r24
    a232:	71 f0       	breq	.+28     	; 0xa250 <__vector_53+0x60>
    a234:	80 91 3b 34 	lds	r24, 0x343B
    a238:	88 23       	and	r24, r24
    a23a:	51 f0       	breq	.+20     	; 0xa250 <__vector_53+0x60>
    a23c:	80 91 80 34 	lds	r24, 0x3480
    a240:	88 23       	and	r24, r24
    a242:	31 f4       	brne	.+12     	; 0xa250 <__vector_53+0x60>
		SD_WriteMicrophoneBuffer(1);
    a244:	81 e0       	ldi	r24, 0x01	; 1
    a246:	0e 94 61 40 	call	0x80c2	; 0x80c2 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    a24a:	10 92 46 34 	sts	0x3446, r1
    a24e:	ee cf       	rjmp	.-36     	; 0xa22c <__vector_53+0x3c>
        goto sdInterrupt;
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    a250:	80 91 47 34 	lds	r24, 0x3447
    a254:	88 23       	and	r24, r24
    a256:	71 f0       	breq	.+28     	; 0xa274 <__vector_53+0x84>
    a258:	80 91 3b 34 	lds	r24, 0x343B
    a25c:	88 23       	and	r24, r24
    a25e:	51 f0       	breq	.+20     	; 0xa274 <__vector_53+0x84>
    a260:	80 91 80 34 	lds	r24, 0x3480
    a264:	88 23       	and	r24, r24
    a266:	31 f4       	brne	.+12     	; 0xa274 <__vector_53+0x84>
		SD_WriteMicrophoneBuffer(2);
    a268:	82 e0       	ldi	r24, 0x02	; 2
    a26a:	0e 94 61 40 	call	0x80c2	; 0x80c2 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    a26e:	10 92 47 34 	sts	0x3447, r1
    a272:	dc cf       	rjmp	.-72     	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}

    if(okToSendAirQuality && rs232Recording && !restartingFile){
    a274:	80 91 2f 34 	lds	r24, 0x342F
    a278:	88 23       	and	r24, r24
    a27a:	09 f4       	brne	.+2      	; 0xa27e <__vector_53+0x8e>
    a27c:	d0 c0       	rjmp	.+416    	; 0xa41e <__vector_53+0x22e>
    a27e:	80 91 30 34 	lds	r24, 0x3430
    a282:	88 23       	and	r24, r24
    a284:	09 f4       	brne	.+2      	; 0xa288 <__vector_53+0x98>
    a286:	cb c0       	rjmp	.+406    	; 0xa41e <__vector_53+0x22e>
    a288:	80 91 80 34 	lds	r24, 0x3480
    a28c:	88 23       	and	r24, r24
    a28e:	09 f0       	breq	.+2      	; 0xa292 <__vector_53+0xa2>
    a290:	c6 c0       	rjmp	.+396    	; 0xa41e <__vector_53+0x22e>
    a292:	10 e0       	ldi	r17, 0x00	; 0
    a294:	dd 24       	eor	r13, r13
    a296:	d3 94       	inc	r13
    a298:	02 c0       	rjmp	.+4      	; 0xa29e <__vector_53+0xae>
        uint8_t numberOfBins = 1;
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
			if(airQualityString[counter] == ','){
			    numberOfBins++;
    a29a:	d3 94       	inc	r13
			}
			counter++;
    a29c:	1f 5f       	subi	r17, 0xFF	; 255
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    a29e:	20 91 2d 34 	lds	r18, 0x342D
    a2a2:	30 91 2e 34 	lds	r19, 0x342E
    a2a6:	80 91 2b 34 	lds	r24, 0x342B
    a2aa:	90 91 2c 34 	lds	r25, 0x342C
    a2ae:	28 17       	cp	r18, r24
    a2b0:	39 07       	cpc	r19, r25
    a2b2:	09 f0       	breq	.+2      	; 0xa2b6 <__vector_53+0xc6>
    a2b4:	6f c4       	rjmp	.+2270   	; 0xab94 <__vector_53+0x9a4>
		}
		if(strstr(airQualityString,"Dylos") == NULL){
    a2b6:	8b e4       	ldi	r24, 0x4B	; 75
    a2b8:	9b e4       	ldi	r25, 0x4B	; 75
    a2ba:	62 eb       	ldi	r22, 0xB2	; 178
    a2bc:	76 e2       	ldi	r23, 0x26	; 38
    a2be:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    a2c2:	00 97       	sbiw	r24, 0x00	; 0
    a2c4:	09 f0       	breq	.+2      	; 0xa2c8 <__vector_53+0xd8>
    a2c6:	b2 cf       	rjmp	.-156    	; 0xa22c <__vector_53+0x3c>
			airSampleTime = Time_Get32BitTimer();
    a2c8:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    a2cc:	60 93 06 34 	sts	0x3406, r22
    a2d0:	70 93 07 34 	sts	0x3407, r23
    a2d4:	80 93 08 34 	sts	0x3408, r24
    a2d8:	90 93 09 34 	sts	0x3409, r25
			airCount[0] = atol(strtok(airQualityString,","));
    a2dc:	8b e4       	ldi	r24, 0x4B	; 75
    a2de:	9b e4       	ldi	r25, 0x4B	; 75
    a2e0:	68 eb       	ldi	r22, 0xB8	; 184
    a2e2:	76 e2       	ldi	r23, 0x26	; 38
    a2e4:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    a2e8:	0e 94 9b 62 	call	0xc536	; 0xc536 <atol>
    a2ec:	60 93 af 4b 	sts	0x4BAF, r22
    a2f0:	70 93 b0 4b 	sts	0x4BB0, r23
    a2f4:	80 93 b1 4b 	sts	0x4BB1, r24
    a2f8:	90 93 b2 4b 	sts	0x4BB2, r25
    a2fc:	a3 eb       	ldi	r26, 0xB3	; 179
    a2fe:	ea 2e       	mov	r14, r26
    a300:	ab e4       	ldi	r26, 0x4B	; 75
    a302:	fa 2e       	mov	r15, r26
			for(uint8_t i = 0; i < numberOfBins; i++){
    a304:	0d 2d       	mov	r16, r13
    a306:	10 e0       	ldi	r17, 0x00	; 0
    a308:	00 0f       	add	r16, r16
    a30a:	11 1f       	adc	r17, r17
    a30c:	00 0f       	add	r16, r16
    a30e:	11 1f       	adc	r17, r17
    a310:	0e 0d       	add	r16, r14
    a312:	1f 1d       	adc	r17, r15
    a314:	0e c0       	rjmp	.+28     	; 0xa332 <__vector_53+0x142>
			    airCount[i+1] = atol(strtok(NULL,","));
    a316:	80 e0       	ldi	r24, 0x00	; 0
    a318:	90 e0       	ldi	r25, 0x00	; 0
    a31a:	68 eb       	ldi	r22, 0xB8	; 184
    a31c:	76 e2       	ldi	r23, 0x26	; 38
    a31e:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    a322:	0e 94 9b 62 	call	0xc536	; 0xc536 <atol>
    a326:	f7 01       	movw	r30, r14
    a328:	61 93       	st	Z+, r22
    a32a:	71 93       	st	Z+, r23
    a32c:	81 93       	st	Z+, r24
    a32e:	91 93       	st	Z+, r25
    a330:	7f 01       	movw	r14, r30
			counter++;
		}
		if(strstr(airQualityString,"Dylos") == NULL){
			airSampleTime = Time_Get32BitTimer();
			airCount[0] = atol(strtok(airQualityString,","));
			for(uint8_t i = 0; i < numberOfBins; i++){
    a332:	e0 16       	cp	r14, r16
    a334:	f1 06       	cpc	r15, r17
    a336:	79 f7       	brne	.-34     	; 0xa316 <__vector_53+0x126>
    a338:	20 91 af 4b 	lds	r18, 0x4BAF
    a33c:	30 91 b0 4b 	lds	r19, 0x4BB0
    a340:	40 91 b1 4b 	lds	r20, 0x4BB1
    a344:	50 91 b2 4b 	lds	r21, 0x4BB2
			    airCount[i+1] = atol(strtok(NULL,","));
			}
			if(numberOfBins == 2){
    a348:	f2 e0       	ldi	r31, 0x02	; 2
    a34a:	df 16       	cp	r13, r31
    a34c:	d9 f4       	brne	.+54     	; 0xa384 <__vector_53+0x194>

			    quickSmall = airCount[0];
    a34e:	20 93 5a 34 	sts	0x345A, r18
    a352:	30 93 5b 34 	sts	0x345B, r19
    a356:	40 93 5c 34 	sts	0x345C, r20
    a35a:	50 93 5d 34 	sts	0x345D, r21
			    quickLarge = airCount[1];
    a35e:	80 91 b3 4b 	lds	r24, 0x4BB3
    a362:	90 91 b4 4b 	lds	r25, 0x4BB4
    a366:	a0 91 b5 4b 	lds	r26, 0x4BB5
    a36a:	b0 91 b6 4b 	lds	r27, 0x4BB6
    a36e:	80 93 56 34 	sts	0x3456, r24
    a372:	90 93 57 34 	sts	0x3457, r25
    a376:	a0 93 58 34 	sts	0x3458, r26
    a37a:	b0 93 59 34 	sts	0x3459, r27
			    SD_WriteAirSampleMinute();
    a37e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <SD_WriteAirSampleMinute>
    a382:	4a c0       	rjmp	.+148    	; 0xa418 <__vector_53+0x228>
		        okToSendAirQuality = false;
			} else {
			    quickSmall = airCount[0] + airCount[1];
    a384:	80 91 b3 4b 	lds	r24, 0x4BB3
    a388:	90 91 b4 4b 	lds	r25, 0x4BB4
    a38c:	a0 91 b5 4b 	lds	r26, 0x4BB5
    a390:	b0 91 b6 4b 	lds	r27, 0x4BB6
    a394:	82 0f       	add	r24, r18
    a396:	93 1f       	adc	r25, r19
    a398:	a4 1f       	adc	r26, r20
    a39a:	b5 1f       	adc	r27, r21
    a39c:	80 93 5a 34 	sts	0x345A, r24
    a3a0:	90 93 5b 34 	sts	0x345B, r25
    a3a4:	a0 93 5c 34 	sts	0x345C, r26
    a3a8:	b0 93 5d 34 	sts	0x345D, r27
			    quickLarge = airCount[2] + airCount[3] + airCount[4] + airCount[5];
    a3ac:	80 91 bb 4b 	lds	r24, 0x4BBB
    a3b0:	90 91 bc 4b 	lds	r25, 0x4BBC
    a3b4:	a0 91 bd 4b 	lds	r26, 0x4BBD
    a3b8:	b0 91 be 4b 	lds	r27, 0x4BBE
    a3bc:	20 91 b7 4b 	lds	r18, 0x4BB7
    a3c0:	30 91 b8 4b 	lds	r19, 0x4BB8
    a3c4:	40 91 b9 4b 	lds	r20, 0x4BB9
    a3c8:	50 91 ba 4b 	lds	r21, 0x4BBA
    a3cc:	82 0f       	add	r24, r18
    a3ce:	93 1f       	adc	r25, r19
    a3d0:	a4 1f       	adc	r26, r20
    a3d2:	b5 1f       	adc	r27, r21
    a3d4:	20 91 bf 4b 	lds	r18, 0x4BBF
    a3d8:	30 91 c0 4b 	lds	r19, 0x4BC0
    a3dc:	40 91 c1 4b 	lds	r20, 0x4BC1
    a3e0:	50 91 c2 4b 	lds	r21, 0x4BC2
    a3e4:	82 0f       	add	r24, r18
    a3e6:	93 1f       	adc	r25, r19
    a3e8:	a4 1f       	adc	r26, r20
    a3ea:	b5 1f       	adc	r27, r21
    a3ec:	20 91 c3 4b 	lds	r18, 0x4BC3
    a3f0:	30 91 c4 4b 	lds	r19, 0x4BC4
    a3f4:	40 91 c5 4b 	lds	r20, 0x4BC5
    a3f8:	50 91 c6 4b 	lds	r21, 0x4BC6
    a3fc:	82 0f       	add	r24, r18
    a3fe:	93 1f       	adc	r25, r19
    a400:	a4 1f       	adc	r26, r20
    a402:	b5 1f       	adc	r27, r21
    a404:	80 93 56 34 	sts	0x3456, r24
    a408:	90 93 57 34 	sts	0x3457, r25
    a40c:	a0 93 58 34 	sts	0x3458, r26
    a410:	b0 93 59 34 	sts	0x3459, r27
			    SD_WriteAirSampleSecond();
    a414:	0e 94 f4 3e 	call	0x7de8	; 0x7de8 <SD_WriteAirSampleSecond>
		        okToSendAirQuality = false;
    a418:	10 92 2f 34 	sts	0x342F, r1
    a41c:	07 cf       	rjmp	.-498    	; 0xa22c <__vector_53+0x3c>
			}
        }
        goto sdInterrupt;
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    a41e:	80 91 3d 34 	lds	r24, 0x343D
    a422:	88 23       	and	r24, r24
    a424:	71 f0       	breq	.+28     	; 0xa442 <__vector_53+0x252>
    a426:	80 91 3b 34 	lds	r24, 0x343B
    a42a:	88 23       	and	r24, r24
    a42c:	51 f0       	breq	.+20     	; 0xa442 <__vector_53+0x252>
    a42e:	80 91 80 34 	lds	r24, 0x3480
    a432:	88 23       	and	r24, r24
    a434:	31 f4       	brne	.+12     	; 0xa442 <__vector_53+0x252>
		SD_WriteTemperatureBuffer(1);
    a436:	81 e0       	ldi	r24, 0x01	; 1
    a438:	0e 94 aa 41 	call	0x8354	; 0x8354 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    a43c:	10 92 3d 34 	sts	0x343D, r1
    a440:	f5 ce       	rjmp	.-534    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    a442:	80 91 3e 34 	lds	r24, 0x343E
    a446:	88 23       	and	r24, r24
    a448:	71 f0       	breq	.+28     	; 0xa466 <__vector_53+0x276>
    a44a:	80 91 3b 34 	lds	r24, 0x343B
    a44e:	88 23       	and	r24, r24
    a450:	51 f0       	breq	.+20     	; 0xa466 <__vector_53+0x276>
    a452:	80 91 80 34 	lds	r24, 0x3480
    a456:	88 23       	and	r24, r24
    a458:	31 f4       	brne	.+12     	; 0xa466 <__vector_53+0x276>
		SD_WriteTemperatureBuffer(2);
    a45a:	82 e0       	ldi	r24, 0x02	; 2
    a45c:	0e 94 aa 41 	call	0x8354	; 0x8354 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    a460:	10 92 3e 34 	sts	0x343E, r1
    a464:	e3 ce       	rjmp	.-570    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    a466:	80 91 43 34 	lds	r24, 0x3443
    a46a:	88 23       	and	r24, r24
    a46c:	71 f0       	breq	.+28     	; 0xa48a <__vector_53+0x29a>
    a46e:	80 91 3b 34 	lds	r24, 0x343B
    a472:	88 23       	and	r24, r24
    a474:	51 f0       	breq	.+20     	; 0xa48a <__vector_53+0x29a>
    a476:	80 91 80 34 	lds	r24, 0x3480
    a47a:	88 23       	and	r24, r24
    a47c:	31 f4       	brne	.+12     	; 0xa48a <__vector_53+0x29a>
		SD_WriteHumidityBuffer(1);
    a47e:	81 e0       	ldi	r24, 0x01	; 1
    a480:	0e 94 37 41 	call	0x826e	; 0x826e <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    a484:	10 92 43 34 	sts	0x3443, r1
    a488:	d1 ce       	rjmp	.-606    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    a48a:	80 91 44 34 	lds	r24, 0x3444
    a48e:	88 23       	and	r24, r24
    a490:	71 f0       	breq	.+28     	; 0xa4ae <__vector_53+0x2be>
    a492:	80 91 3b 34 	lds	r24, 0x343B
    a496:	88 23       	and	r24, r24
    a498:	51 f0       	breq	.+20     	; 0xa4ae <__vector_53+0x2be>
    a49a:	80 91 80 34 	lds	r24, 0x3480
    a49e:	88 23       	and	r24, r24
    a4a0:	31 f4       	brne	.+12     	; 0xa4ae <__vector_53+0x2be>
		SD_WriteHumidityBuffer(2);
    a4a2:	82 e0       	ldi	r24, 0x02	; 2
    a4a4:	0e 94 37 41 	call	0x826e	; 0x826e <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    a4a8:	10 92 44 34 	sts	0x3444, r1
    a4ac:	bf ce       	rjmp	.-642    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    a4ae:	80 91 40 34 	lds	r24, 0x3440
    a4b2:	88 23       	and	r24, r24
    a4b4:	71 f0       	breq	.+28     	; 0xa4d2 <__vector_53+0x2e2>
    a4b6:	80 91 3b 34 	lds	r24, 0x343B
    a4ba:	88 23       	and	r24, r24
    a4bc:	51 f0       	breq	.+20     	; 0xa4d2 <__vector_53+0x2e2>
    a4be:	80 91 80 34 	lds	r24, 0x3480
    a4c2:	88 23       	and	r24, r24
    a4c4:	31 f4       	brne	.+12     	; 0xa4d2 <__vector_53+0x2e2>
		SD_WritePressureBuffer(1);
    a4c6:	81 e0       	ldi	r24, 0x01	; 1
    a4c8:	0e 94 c4 40 	call	0x8188	; 0x8188 <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    a4cc:	10 92 40 34 	sts	0x3440, r1
    a4d0:	ad ce       	rjmp	.-678    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    a4d2:	80 91 41 34 	lds	r24, 0x3441
    a4d6:	88 23       	and	r24, r24
    a4d8:	71 f0       	breq	.+28     	; 0xa4f6 <__vector_53+0x306>
    a4da:	80 91 3b 34 	lds	r24, 0x343B
    a4de:	88 23       	and	r24, r24
    a4e0:	51 f0       	breq	.+20     	; 0xa4f6 <__vector_53+0x306>
    a4e2:	80 91 80 34 	lds	r24, 0x3480
    a4e6:	88 23       	and	r24, r24
    a4e8:	31 f4       	brne	.+12     	; 0xa4f6 <__vector_53+0x306>
		SD_WritePressureBuffer(2);
    a4ea:	82 e0       	ldi	r24, 0x02	; 2
    a4ec:	0e 94 c4 40 	call	0x8188	; 0x8188 <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    a4f0:	10 92 41 34 	sts	0x3441, r1
    a4f4:	9b ce       	rjmp	.-714    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    a4f6:	80 91 4a 34 	lds	r24, 0x344A
    a4fa:	88 23       	and	r24, r24
    a4fc:	71 f0       	breq	.+28     	; 0xa51a <__vector_53+0x32a>
    a4fe:	80 91 3b 34 	lds	r24, 0x343B
    a502:	88 23       	and	r24, r24
    a504:	51 f0       	breq	.+20     	; 0xa51a <__vector_53+0x32a>
    a506:	80 91 80 34 	lds	r24, 0x3480
    a50a:	88 23       	and	r24, r24
    a50c:	31 f4       	brne	.+12     	; 0xa51a <__vector_53+0x32a>
		SD_WriteLightBuffer(1);
    a50e:	81 e0       	ldi	r24, 0x01	; 1
    a510:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    a514:	10 92 4a 34 	sts	0x344A, r1
    a518:	89 ce       	rjmp	.-750    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    a51a:	80 91 4b 34 	lds	r24, 0x344B
    a51e:	88 23       	and	r24, r24
    a520:	71 f0       	breq	.+28     	; 0xa53e <__vector_53+0x34e>
    a522:	80 91 3b 34 	lds	r24, 0x343B
    a526:	88 23       	and	r24, r24
    a528:	51 f0       	breq	.+20     	; 0xa53e <__vector_53+0x34e>
    a52a:	80 91 80 34 	lds	r24, 0x3480
    a52e:	88 23       	and	r24, r24
    a530:	31 f4       	brne	.+12     	; 0xa53e <__vector_53+0x34e>
		SD_WriteLightBuffer(2);
    a532:	82 e0       	ldi	r24, 0x02	; 2
    a534:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    a538:	10 92 4b 34 	sts	0x344B, r1
    a53c:	77 ce       	rjmp	.-786    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}


	if(okToSendRTCBlock && recording){
    a53e:	80 91 4d 34 	lds	r24, 0x344D
    a542:	88 23       	and	r24, r24
    a544:	99 f0       	breq	.+38     	; 0xa56c <__vector_53+0x37c>
    a546:	80 91 3b 34 	lds	r24, 0x343B
    a54a:	88 23       	and	r24, r24
    a54c:	79 f0       	breq	.+30     	; 0xa56c <__vector_53+0x37c>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    a54e:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    a552:	20 91 36 34 	lds	r18, 0x3436
    a556:	30 91 37 34 	lds	r19, 0x3437
    a55a:	40 91 38 34 	lds	r20, 0x3438
    a55e:	50 91 39 34 	lds	r21, 0x3439
    a562:	0e 94 b9 3a 	call	0x7572	; 0x7572 <SD_WriteRTCBlock>
		okToSendRTCBlock = false;
    a566:	10 92 4d 34 	sts	0x344D, r1
    a56a:	60 ce       	rjmp	.-832    	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    a56c:	80 91 6f 34 	lds	r24, 0x346F
    a570:	88 23       	and	r24, r24
    a572:	09 f4       	brne	.+2      	; 0xa576 <__vector_53+0x386>
    a574:	6f c0       	rjmp	.+222    	; 0xa654 <__vector_53+0x464>
    a576:	80 91 a9 34 	lds	r24, 0x34A9
    a57a:	90 91 aa 34 	lds	r25, 0x34AA
    a57e:	a0 91 ab 34 	lds	r26, 0x34AB
    a582:	b0 91 ac 34 	lds	r27, 0x34AC
    a586:	86 5b       	subi	r24, 0xB6	; 182
    a588:	93 40       	sbci	r25, 0x03	; 3
    a58a:	a0 40       	sbci	r26, 0x00	; 0
    a58c:	b0 40       	sbci	r27, 0x00	; 0
    a58e:	08 f0       	brcs	.+2      	; 0xa592 <__vector_53+0x3a2>
    a590:	61 c0       	rjmp	.+194    	; 0xa654 <__vector_53+0x464>
		if(SD_StartLogFile(UNIX_time) == FR_OK){  // open file
    a592:	60 91 36 34 	lds	r22, 0x3436
    a596:	70 91 37 34 	lds	r23, 0x3437
    a59a:	80 91 38 34 	lds	r24, 0x3438
    a59e:	90 91 39 34 	lds	r25, 0x3439
    a5a2:	0e 94 2e 50 	call	0xa05c	; 0xa05c <SD_StartLogFile>
    a5a6:	88 23       	and	r24, r24
    a5a8:	09 f0       	breq	.+2      	; 0xa5ac <__vector_53+0x3bc>
    a5aa:	52 c0       	rjmp	.+164    	; 0xa650 <__vector_53+0x460>
    a5ac:	88 ee       	ldi	r24, 0xE8	; 232
    a5ae:	93 e0       	ldi	r25, 0x03	; 3
    a5b0:	20 e7       	ldi	r18, 0x70	; 112
    a5b2:	31 e0       	ldi	r19, 0x01	; 1
    a5b4:	f9 01       	movw	r30, r18
    a5b6:	31 97       	sbiw	r30, 0x01	; 1
    a5b8:	f1 f7       	brne	.-4      	; 0xa5b6 <__vector_53+0x3c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5bc:	d9 f7       	brne	.-10     	; 0xa5b4 <__vector_53+0x3c4>
		    _delay_ms(100);

            timeToStopRecording = UNIX_time + 900;
    a5be:	80 91 36 34 	lds	r24, 0x3436
    a5c2:	90 91 37 34 	lds	r25, 0x3437
    a5c6:	a0 91 38 34 	lds	r26, 0x3438
    a5ca:	b0 91 39 34 	lds	r27, 0x3439
    a5ce:	8c 57       	subi	r24, 0x7C	; 124
    a5d0:	9c 4f       	sbci	r25, 0xFC	; 252
    a5d2:	af 4f       	sbci	r26, 0xFF	; 255
    a5d4:	bf 4f       	sbci	r27, 0xFF	; 255
    a5d6:	80 93 95 34 	sts	0x3495, r24
    a5da:	90 93 96 34 	sts	0x3496, r25
    a5de:	a0 93 97 34 	sts	0x3497, r26
    a5e2:	b0 93 98 34 	sts	0x3498, r27
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a5e6:	e0 e2       	ldi	r30, 0x20	; 32
    a5e8:	f6 e0       	ldi	r31, 0x06	; 6
    a5ea:	11 e0       	ldi	r17, 0x01	; 1
    a5ec:	16 83       	std	Z+6, r17	; 0x06

		    Leds_Clear(sd_Green);
		    Leds_Clear(wifi_Green);
		    timeRecordingStarted = UNIX_time;
    a5ee:	80 e4       	ldi	r24, 0x40	; 64
    a5f0:	86 83       	std	Z+6, r24	; 0x06
    a5f2:	80 91 36 34 	lds	r24, 0x3436
    a5f6:	90 91 37 34 	lds	r25, 0x3437
    a5fa:	a0 91 38 34 	lds	r26, 0x3438
    a5fe:	b0 91 39 34 	lds	r27, 0x3439
    a602:	80 93 0a 34 	sts	0x340A, r24
    a606:	90 93 0b 34 	sts	0x340B, r25
    a60a:	a0 93 0c 34 	sts	0x340C, r26
    a60e:	b0 93 0d 34 	sts	0x340D, r27
		    SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    a612:	0e 94 8e 30 	call	0x611c	; 0x611c <Time_Get32BitTimer>
    a616:	20 91 36 34 	lds	r18, 0x3436
    a61a:	30 91 37 34 	lds	r19, 0x3437
    a61e:	40 91 38 34 	lds	r20, 0x3438
    a622:	50 91 39 34 	lds	r21, 0x3439
    a626:	0e 94 b9 3a 	call	0x7572	; 0x7572 <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    a62a:	80 91 2d 34 	lds	r24, 0x342D
    a62e:	90 91 2e 34 	lds	r25, 0x342E
    a632:	80 93 2b 34 	sts	0x342B, r24
    a636:	90 93 2c 34 	sts	0x342C, r25

		    Rs232_ClearBuffer();
		    rs232Recording = true;
    a63a:	10 93 30 34 	sts	0x3430, r17
		    recording = true;
    a63e:	10 93 3b 34 	sts	0x343B, r17
		    okToOpenLogFile = false;
    a642:	10 92 6f 34 	sts	0x346F, r1
		    directoryOpened = false;
    a646:	10 92 75 34 	sts	0x3475, r1
		    okToReopenDirectory = true;
    a64a:	10 93 74 34 	sts	0x3474, r17
    a64e:	02 c0       	rjmp	.+4      	; 0xa654 <__vector_53+0x464>
		} else {
		    SD_Init();
    a650:	0e 94 41 2c 	call	0x5882	; 0x5882 <SD_Init>
		}
	}

	if(okToCloseLogFile){
    a654:	80 91 71 34 	lds	r24, 0x3471
    a658:	88 23       	and	r24, r24
    a65a:	51 f0       	breq	.+20     	; 0xa670 <__vector_53+0x480>
		SD_Close();
    a65c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <SD_Close>
		okToCloseLogFile = false;
    a660:	10 92 71 34 	sts	0x3471, r1
		directoryOpened = false;
    a664:	10 92 75 34 	sts	0x3475, r1
		okToReopenDirectory = true;
    a668:	81 e0       	ldi	r24, 0x01	; 1
    a66a:	80 93 74 34 	sts	0x3474, r24
    a66e:	de cd       	rjmp	.-1092   	; 0xa22c <__vector_53+0x3c>
	}




	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    a670:	80 91 73 34 	lds	r24, 0x3473
    a674:	88 23       	and	r24, r24
    a676:	09 f4       	brne	.+2      	; 0xa67a <__vector_53+0x48a>
    a678:	63 c0       	rjmp	.+198    	; 0xa740 <__vector_53+0x550>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    a67a:	80 91 a8 06 	lds	r24, 0x06A8
    a67e:	80 fd       	sbrc	r24, 0
    a680:	5f c0       	rjmp	.+190    	; 0xa740 <__vector_53+0x550>
    a682:	94 c2       	rjmp	.+1320   	; 0xabac <__vector_53+0x9bc>
		if(okToReopenDirectory){
    a684:	80 91 74 34 	lds	r24, 0x3474
    a688:	88 23       	and	r24, r24
    a68a:	69 f0       	breq	.+26     	; 0xa6a6 <__vector_53+0x4b6>
			if(f_opendir(&dir, "/") == FR_OK){
    a68c:	8e e6       	ldi	r24, 0x6E	; 110
    a68e:	93 e5       	ldi	r25, 0x53	; 83
    a690:	6a eb       	ldi	r22, 0xBA	; 186
    a692:	76 e2       	ldi	r23, 0x26	; 38
    a694:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <f_opendir>
    a698:	88 23       	and	r24, r24
    a69a:	29 f4       	brne	.+10     	; 0xa6a6 <__vector_53+0x4b6>
				directoryOpened = true;
    a69c:	81 e0       	ldi	r24, 0x01	; 1
    a69e:	80 93 75 34 	sts	0x3475, r24
				okToReopenDirectory = false;
    a6a2:	10 92 74 34 	sts	0x3474, r1
			}
		}

		if(directoryOpened){
    a6a6:	80 91 75 34 	lds	r24, 0x3475
    a6aa:	88 23       	and	r24, r24
    a6ac:	09 f4       	brne	.+2      	; 0xa6b0 <__vector_53+0x4c0>
    a6ae:	48 c0       	rjmp	.+144    	; 0xa740 <__vector_53+0x550>
			if((f_readdir(&dir, &fno) == FR_OK)){
    a6b0:	8e e6       	ldi	r24, 0x6E	; 110
    a6b2:	93 e5       	ldi	r25, 0x53	; 83
    a6b4:	65 ed       	ldi	r22, 0xD5	; 213
    a6b6:	75 e4       	ldi	r23, 0x45	; 69
    a6b8:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <f_readdir>
    a6bc:	88 23       	and	r24, r24
    a6be:	09 f0       	breq	.+2      	; 0xa6c2 <__vector_53+0x4d2>
    a6c0:	3f c0       	rjmp	.+126    	; 0xa740 <__vector_53+0x550>
				if(fno.fname[0] == 0){
    a6c2:	80 91 de 45 	lds	r24, 0x45DE
    a6c6:	88 23       	and	r24, r24
    a6c8:	31 f4       	brne	.+12     	; 0xa6d6 <__vector_53+0x4e6>
					directoryOpened = false;
    a6ca:	10 92 75 34 	sts	0x3475, r1
					okToReopenDirectory = true;
    a6ce:	81 e0       	ldi	r24, 0x01	; 1
    a6d0:	80 93 74 34 	sts	0x3474, r24
    a6d4:	35 c0       	rjmp	.+106    	; 0xa740 <__vector_53+0x550>
				} else {
					if(recording){
    a6d6:	80 91 3b 34 	lds	r24, 0x343B
    a6da:	88 23       	and	r24, r24
    a6dc:	c1 f0       	breq	.+48     	; 0xa70e <__vector_53+0x51e>
						if((strcasecmp(currentLogFile,fno.fname)) > 0){		// file is NOT the current file
    a6de:	85 ea       	ldi	r24, 0xA5	; 165
    a6e0:	9d e3       	ldi	r25, 0x3D	; 61
    a6e2:	6e ed       	ldi	r22, 0xDE	; 222
    a6e4:	75 e4       	ldi	r23, 0x45	; 69
    a6e6:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <strcasecmp>
    a6ea:	18 16       	cp	r1, r24
    a6ec:	19 06       	cpc	r1, r25
    a6ee:	44 f5       	brge	.+80     	; 0xa740 <__vector_53+0x550>
							if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    a6f0:	8e ed       	ldi	r24, 0xDE	; 222
    a6f2:	95 e4       	ldi	r25, 0x45	; 69
    a6f4:	6c eb       	ldi	r22, 0xBC	; 188
    a6f6:	76 e2       	ldi	r23, 0x26	; 38
    a6f8:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <strcasestr>
    a6fc:	89 2b       	or	r24, r25
    a6fe:	01 f1       	breq	.+64     	; 0xa740 <__vector_53+0x550>
								if(strcasestr(fno.fname,".BTU") == NULL){
    a700:	8e ed       	ldi	r24, 0xDE	; 222
    a702:	95 e4       	ldi	r25, 0x45	; 69
    a704:	60 ec       	ldi	r22, 0xC0	; 192
    a706:	76 e2       	ldi	r23, 0x26	; 38
    a708:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <strcasestr>
    a70c:	0e c0       	rjmp	.+28     	; 0xa72a <__vector_53+0x53a>
									okToUpload= true;
								}
							}
						}
					} else {
						if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    a70e:	8e ed       	ldi	r24, 0xDE	; 222
    a710:	95 e4       	ldi	r25, 0x45	; 69
    a712:	6c eb       	ldi	r22, 0xBC	; 188
    a714:	76 e2       	ldi	r23, 0x26	; 38
    a716:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <strcasestr>
    a71a:	89 2b       	or	r24, r25
    a71c:	89 f0       	breq	.+34     	; 0xa740 <__vector_53+0x550>
							if(strcasestr(fno.fname,".BTU") == NULL){
    a71e:	8e ed       	ldi	r24, 0xDE	; 222
    a720:	95 e4       	ldi	r25, 0x45	; 69
    a722:	60 ec       	ldi	r22, 0xC0	; 192
    a724:	76 e2       	ldi	r23, 0x26	; 38
    a726:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <strcasestr>
    a72a:	89 2b       	or	r24, r25
    a72c:	49 f4       	brne	.+18     	; 0xa740 <__vector_53+0x550>
								strcpy(fileToUpload,fno.fname);
    a72e:	88 e3       	ldi	r24, 0x38	; 56
    a730:	9d e3       	ldi	r25, 0x3D	; 61
    a732:	6e ed       	ldi	r22, 0xDE	; 222
    a734:	75 e4       	ldi	r23, 0x45	; 69
    a736:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
								okToUpload = true;
    a73a:	81 e0       	ldi	r24, 0x01	; 1
    a73c:	80 93 7a 34 	sts	0x347A, r24
				}
			}
		}
	}

	if(okToOpenFileToUpload){
    a740:	80 91 7d 34 	lds	r24, 0x347D
    a744:	88 23       	and	r24, r24
    a746:	99 f1       	breq	.+102    	; 0xa7ae <__vector_53+0x5be>
	   f_stat(fileToUpload,&fno);
    a748:	88 e3       	ldi	r24, 0x38	; 56
    a74a:	9d e3       	ldi	r25, 0x3D	; 61
    a74c:	65 ed       	ldi	r22, 0xD5	; 213
    a74e:	75 e4       	ldi	r23, 0x45	; 69
    a750:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <f_stat>
	   uploadFileSize = fno.fsize;
    a754:	80 91 d5 45 	lds	r24, 0x45D5
    a758:	90 91 d6 45 	lds	r25, 0x45D6
    a75c:	a0 91 d7 45 	lds	r26, 0x45D7
    a760:	b0 91 d8 45 	lds	r27, 0x45D8
    a764:	80 93 84 34 	sts	0x3484, r24
    a768:	90 93 85 34 	sts	0x3485, r25
    a76c:	a0 93 86 34 	sts	0x3486, r26
    a770:	b0 93 87 34 	sts	0x3487, r27

	   if(f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_EXISTING) == FR_OK){
    a774:	84 e8       	ldi	r24, 0x84	; 132
    a776:	93 e5       	ldi	r25, 0x53	; 83
    a778:	68 e3       	ldi	r22, 0x38	; 56
    a77a:	7d e3       	ldi	r23, 0x3D	; 61
    a77c:	43 e0       	ldi	r20, 0x03	; 3
    a77e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <f_open>
    a782:	88 23       	and	r24, r24
    a784:	21 f4       	brne	.+8      	; 0xa78e <__vector_53+0x59e>
	      fileExists = true;
    a786:	81 e0       	ldi	r24, 0x01	; 1
    a788:	80 93 ae 34 	sts	0x34AE, r24
    a78c:	02 c0       	rjmp	.+4      	; 0xa792 <__vector_53+0x5a2>
	   } else {
	      fileExists = false;
    a78e:	10 92 ae 34 	sts	0x34AE, r1
	   }
	   f_lseek(&Upload_File, 0);
    a792:	84 e8       	ldi	r24, 0x84	; 132
    a794:	93 e5       	ldi	r25, 0x53	; 83
    a796:	40 e0       	ldi	r20, 0x00	; 0
    a798:	50 e0       	ldi	r21, 0x00	; 0
    a79a:	60 e0       	ldi	r22, 0x00	; 0
    a79c:	70 e0       	ldi	r23, 0x00	; 0
    a79e:	0e 94 ed 1c 	call	0x39da	; 0x39da <f_lseek>
	   uploadFileOpened = true;
    a7a2:	81 e0       	ldi	r24, 0x01	; 1
    a7a4:	80 93 a5 31 	sts	0x31A5, r24
	   okToOpenFileToUpload = false;
    a7a8:	10 92 7d 34 	sts	0x347D, r1
    a7ac:	3f cd       	rjmp	.-1410   	; 0xa22c <__vector_53+0x3c>
	   goto sdInterrupt;
	}

    if(okToFillUploadFileBuffer){
    a7ae:	80 91 7e 34 	lds	r24, 0x347E
    a7b2:	88 23       	and	r24, r24
    a7b4:	89 f0       	breq	.+34     	; 0xa7d8 <__vector_53+0x5e8>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    a7b6:	84 e8       	ldi	r24, 0x84	; 132
    a7b8:	93 e5       	ldi	r25, 0x53	; 83
    a7ba:	68 e4       	ldi	r22, 0x48	; 72
    a7bc:	79 e3       	ldi	r23, 0x39	; 57
    a7be:	48 ee       	ldi	r20, 0xE8	; 232
    a7c0:	53 e0       	ldi	r21, 0x03	; 3
    a7c2:	9e 01       	movw	r18, r28
    a7c4:	2f 5f       	subi	r18, 0xFF	; 255
    a7c6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7c8:	0e 94 2f 18 	call	0x305e	; 0x305e <f_read>
        okToFillUploadFileBuffer = false;
    a7cc:	10 92 7e 34 	sts	0x347E, r1
        uploadFileBufferFull = true;
    a7d0:	81 e0       	ldi	r24, 0x01	; 1
    a7d2:	80 93 7f 34 	sts	0x347F, r24
    a7d6:	2a cd       	rjmp	.-1452   	; 0xa22c <__vector_53+0x3c>
        goto sdInterrupt;
    }


	if(okToCloseUploadFile){
    a7d8:	80 91 77 34 	lds	r24, 0x3477
    a7dc:	88 23       	and	r24, r24
    a7de:	89 f0       	breq	.+34     	; 0xa802 <__vector_53+0x612>
	    f_sync(&Upload_File);
    a7e0:	84 e8       	ldi	r24, 0x84	; 132
    a7e2:	93 e5       	ldi	r25, 0x53	; 83
    a7e4:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>
	    f_close(&Upload_File);
    a7e8:	84 e8       	ldi	r24, 0x84	; 132
    a7ea:	93 e5       	ldi	r25, 0x53	; 83
    a7ec:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <f_close>
	    strcpy(fileToUpload,"");
    a7f0:	88 e3       	ldi	r24, 0x38	; 56
    a7f2:	9d e3       	ldi	r25, 0x3D	; 61
    a7f4:	65 ee       	ldi	r22, 0xE5	; 229
    a7f6:	70 e2       	ldi	r23, 0x20	; 32
    a7f8:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
		okToCloseUploadFile = false;
    a7fc:	10 92 77 34 	sts	0x3477, r1
    a800:	15 cd       	rjmp	.-1494   	; 0xa22c <__vector_53+0x3c>
		goto sdInterrupt;
	}

	if(okToRenameUploadFile){
    a802:	80 91 78 34 	lds	r24, 0x3478
    a806:	88 23       	and	r24, r24
    a808:	c9 f0       	breq	.+50     	; 0xa83c <__vector_53+0x64c>
	    strcpy(newFileName, fileToUpload);
    a80a:	81 e2       	ldi	r24, 0x21	; 33
    a80c:	99 e5       	ldi	r25, 0x59	; 89
    a80e:	68 e3       	ldi	r22, 0x38	; 56
    a810:	7d e3       	ldi	r23, 0x3D	; 61
    a812:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
        strcat(newFileName, "U");
    a816:	81 e2       	ldi	r24, 0x21	; 33
    a818:	99 e5       	ldi	r25, 0x59	; 89
    a81a:	65 ec       	ldi	r22, 0xC5	; 197
    a81c:	76 e2       	ldi	r23, 0x26	; 38
    a81e:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	    f_rename(fileToUpload,newFileName);
    a822:	88 e3       	ldi	r24, 0x38	; 56
    a824:	9d e3       	ldi	r25, 0x3D	; 61
    a826:	61 e2       	ldi	r22, 0x21	; 33
    a828:	79 e5       	ldi	r23, 0x59	; 89
    a82a:	0e 94 60 24 	call	0x48c0	; 0x48c0 <f_rename>
	    okToRenameUploadFile = false;
    a82e:	10 92 78 34 	sts	0x3478, r1
	    f_sync(&Upload_File);
    a832:	84 e8       	ldi	r24, 0x84	; 132
    a834:	93 e5       	ldi	r25, 0x53	; 83
    a836:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>
    a83a:	f8 cc       	rjmp	.-1552   	; 0xa22c <__vector_53+0x3c>
	}




	if(okToWriteUploaderLogFile){
    a83c:	80 91 a0 34 	lds	r24, 0x34A0
    a840:	88 23       	and	r24, r24
    a842:	09 f4       	brne	.+2      	; 0xa846 <__vector_53+0x656>
    a844:	e1 c0       	rjmp	.+450    	; 0xaa08 <__vector_53+0x818>

        if(useWifiForUploading){
    a846:	80 91 0f 34 	lds	r24, 0x340F
    a84a:	88 23       	and	r24, r24
    a84c:	29 f0       	breq	.+10     	; 0xa858 <__vector_53+0x668>
            Debug_SendString("Updating uploadLg File",true);
    a84e:	87 ec       	ldi	r24, 0xC7	; 199
    a850:	96 e2       	ldi	r25, 0x26	; 38
    a852:	61 e0       	ldi	r22, 0x01	; 1
    a854:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    a858:	8e ed       	ldi	r24, 0xDE	; 222
    a85a:	96 e2       	ldi	r25, 0x26	; 38
    a85c:	6f e6       	ldi	r22, 0x6F	; 111
    a85e:	7c e4       	ldi	r23, 0x4C	; 76
    a860:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a864:	84 e8       	ldi	r24, 0x84	; 132
    a866:	93 e5       	ldi	r25, 0x53	; 83
    a868:	6e ed       	ldi	r22, 0xDE	; 222
    a86a:	76 e2       	ldi	r23, 0x26	; 38
    a86c:	43 e1       	ldi	r20, 0x13	; 19
    a86e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <f_open>

        if(fno2.fsize > 0){
    a872:	40 91 6f 4c 	lds	r20, 0x4C6F
    a876:	50 91 70 4c 	lds	r21, 0x4C70
    a87a:	60 91 71 4c 	lds	r22, 0x4C71
    a87e:	70 91 72 4c 	lds	r23, 0x4C72
    a882:	41 15       	cp	r20, r1
    a884:	51 05       	cpc	r21, r1
    a886:	61 05       	cpc	r22, r1
    a888:	71 05       	cpc	r23, r1
    a88a:	21 f0       	breq	.+8      	; 0xa894 <__vector_53+0x6a4>
           f_lseek(&Upload_File, fno2.fsize);
    a88c:	84 e8       	ldi	r24, 0x84	; 132
    a88e:	93 e5       	ldi	r25, 0x53	; 83
    a890:	0e 94 ed 1c 	call	0x39da	; 0x39da <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    a894:	8c ee       	ldi	r24, 0xEC	; 236
    a896:	96 e2       	ldi	r25, 0x26	; 38
    a898:	64 e8       	ldi	r22, 0x84	; 132
    a89a:	73 e5       	ldi	r23, 0x53	; 83
    a89c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    a8a0:	88 e3       	ldi	r24, 0x38	; 56
    a8a2:	9d e3       	ldi	r25, 0x3D	; 61
    a8a4:	64 e8       	ldi	r22, 0x84	; 132
    a8a6:	73 e5       	ldi	r23, 0x53	; 83
    a8a8:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(", Size: ",&Upload_File);
    a8ac:	88 ef       	ldi	r24, 0xF8	; 248
    a8ae:	96 e2       	ldi	r25, 0x26	; 38
    a8b0:	64 e8       	ldi	r22, 0x84	; 132
    a8b2:	73 e5       	ldi	r23, 0x53	; 83
    a8b4:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    a8b8:	60 91 84 34 	lds	r22, 0x3484
    a8bc:	70 91 85 34 	lds	r23, 0x3485
    a8c0:	80 91 86 34 	lds	r24, 0x3486
    a8c4:	90 91 87 34 	lds	r25, 0x3487
    a8c8:	46 ed       	ldi	r20, 0xD6	; 214
    a8ca:	5d e5       	ldi	r21, 0x5D	; 93
    a8cc:	2a e0       	ldi	r18, 0x0A	; 10
    a8ce:	30 e0       	ldi	r19, 0x00	; 0
    a8d0:	0e 94 77 63 	call	0xc6ee	; 0xc6ee <ltoa>
    a8d4:	64 e8       	ldi	r22, 0x84	; 132
    a8d6:	73 e5       	ldi	r23, 0x53	; 83
    a8d8:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(" bytes, Response: ",&Upload_File);
    a8dc:	81 e0       	ldi	r24, 0x01	; 1
    a8de:	97 e2       	ldi	r25, 0x27	; 39
    a8e0:	64 e8       	ldi	r22, 0x84	; 132
    a8e2:	73 e5       	ldi	r23, 0x53	; 83
    a8e4:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(httpResponse,&Upload_File);
    a8e8:	86 ee       	ldi	r24, 0xE6	; 230
    a8ea:	95 e5       	ldi	r25, 0x55	; 85
    a8ec:	64 e8       	ldi	r22, 0x84	; 132
    a8ee:	73 e5       	ldi	r23, 0x53	; 83
    a8f0:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(", Successful Records: ",&Upload_File);
    a8f4:	84 e1       	ldi	r24, 0x14	; 20
    a8f6:	97 e2       	ldi	r25, 0x27	; 39
    a8f8:	64 e8       	ldi	r22, 0x84	; 132
    a8fa:	73 e5       	ldi	r23, 0x53	; 83
    a8fc:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(successfulBinaryRecordsString,&Upload_File);
    a900:	88 eb       	ldi	r24, 0xB8	; 184
    a902:	9c e4       	ldi	r25, 0x4C	; 76
    a904:	64 e8       	ldi	r22, 0x84	; 132
    a906:	73 e5       	ldi	r23, 0x53	; 83
    a908:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(", Failed Records: ",&Upload_File);
    a90c:	8b e2       	ldi	r24, 0x2B	; 43
    a90e:	97 e2       	ldi	r25, 0x27	; 39
    a910:	64 e8       	ldi	r22, 0x84	; 132
    a912:	73 e5       	ldi	r23, 0x53	; 83
    a914:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(failedBinaryRecordsString,&Upload_File);
    a918:	8c e6       	ldi	r24, 0x6C	; 108
    a91a:	9e e5       	ldi	r25, 0x5E	; 94
    a91c:	64 e8       	ldi	r22, 0x84	; 132
    a91e:	73 e5       	ldi	r23, 0x53	; 83
    a920:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(", Time to upload: ",&Upload_File);
    a924:	8e e3       	ldi	r24, 0x3E	; 62
    a926:	97 e2       	ldi	r25, 0x27	; 39
    a928:	64 e8       	ldi	r22, 0x84	; 132
    a92a:	73 e5       	ldi	r23, 0x53	; 83
    a92c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(ltoa(uploadTimeStop - uploadTimeStart,temp3,10),&Upload_File);
    a930:	60 91 b7 3d 	lds	r22, 0x3DB7
    a934:	70 91 b8 3d 	lds	r23, 0x3DB8
    a938:	80 91 b9 3d 	lds	r24, 0x3DB9
    a93c:	90 91 ba 3d 	lds	r25, 0x3DBA
    a940:	20 91 5b 3d 	lds	r18, 0x3D5B
    a944:	30 91 5c 3d 	lds	r19, 0x3D5C
    a948:	40 91 5d 3d 	lds	r20, 0x3D5D
    a94c:	50 91 5e 3d 	lds	r21, 0x3D5E
    a950:	62 1b       	sub	r22, r18
    a952:	73 0b       	sbc	r23, r19
    a954:	84 0b       	sbc	r24, r20
    a956:	95 0b       	sbc	r25, r21
    a958:	46 ed       	ldi	r20, 0xD6	; 214
    a95a:	5d e5       	ldi	r21, 0x5D	; 93
    a95c:	2a e0       	ldi	r18, 0x0A	; 10
    a95e:	30 e0       	ldi	r19, 0x00	; 0
    a960:	0e 94 77 63 	call	0xc6ee	; 0xc6ee <ltoa>
    a964:	64 e8       	ldi	r22, 0x84	; 132
    a966:	73 e5       	ldi	r23, 0x53	; 83
    a968:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(" secs, Speed of upload: ",&Upload_File);
    a96c:	81 e5       	ldi	r24, 0x51	; 81
    a96e:	97 e2       	ldi	r25, 0x27	; 39
    a970:	64 e8       	ldi	r22, 0x84	; 132
    a972:	73 e5       	ldi	r23, 0x53	; 83
    a974:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(ltoa(uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)),temp3,10),&Upload_File);
    a978:	60 91 84 34 	lds	r22, 0x3484
    a97c:	70 91 85 34 	lds	r23, 0x3485
    a980:	80 91 86 34 	lds	r24, 0x3486
    a984:	90 91 87 34 	lds	r25, 0x3487
    a988:	20 91 b7 3d 	lds	r18, 0x3DB7
    a98c:	30 91 b8 3d 	lds	r19, 0x3DB8
    a990:	40 91 b9 3d 	lds	r20, 0x3DB9
    a994:	50 91 ba 3d 	lds	r21, 0x3DBA
    a998:	e0 90 5b 3d 	lds	r14, 0x3D5B
    a99c:	f0 90 5c 3d 	lds	r15, 0x3D5C
    a9a0:	00 91 5d 3d 	lds	r16, 0x3D5D
    a9a4:	10 91 5e 3d 	lds	r17, 0x3D5E
    a9a8:	2e 19       	sub	r18, r14
    a9aa:	3f 09       	sbc	r19, r15
    a9ac:	40 0b       	sbc	r20, r16
    a9ae:	51 0b       	sbc	r21, r17
    a9b0:	e7 e0       	ldi	r30, 0x07	; 7
    a9b2:	22 0f       	add	r18, r18
    a9b4:	33 1f       	adc	r19, r19
    a9b6:	44 1f       	adc	r20, r20
    a9b8:	55 1f       	adc	r21, r21
    a9ba:	ea 95       	dec	r30
    a9bc:	d1 f7       	brne	.-12     	; 0xa9b2 <__vector_53+0x7c2>
    a9be:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    a9c2:	ca 01       	movw	r24, r20
    a9c4:	b9 01       	movw	r22, r18
    a9c6:	46 ed       	ldi	r20, 0xD6	; 214
    a9c8:	5d e5       	ldi	r21, 0x5D	; 93
    a9ca:	2a e0       	ldi	r18, 0x0A	; 10
    a9cc:	30 e0       	ldi	r19, 0x00	; 0
    a9ce:	0e 94 77 63 	call	0xc6ee	; 0xc6ee <ltoa>
    a9d2:	64 e8       	ldi	r22, 0x84	; 132
    a9d4:	73 e5       	ldi	r23, 0x53	; 83
    a9d6:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>

        f_puts(" kbps",&Upload_File);
    a9da:	8a e6       	ldi	r24, 0x6A	; 106
    a9dc:	97 e2       	ldi	r25, 0x27	; 39
    a9de:	64 e8       	ldi	r22, 0x84	; 132
    a9e0:	73 e5       	ldi	r23, 0x53	; 83
    a9e2:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_putc(13,&Upload_File);
    a9e6:	8d e0       	ldi	r24, 0x0D	; 13
    a9e8:	90 e0       	ldi	r25, 0x00	; 0
    a9ea:	64 e8       	ldi	r22, 0x84	; 132
    a9ec:	73 e5       	ldi	r23, 0x53	; 83
    a9ee:	0e 94 24 2b 	call	0x5648	; 0x5648 <f_putc>
        f_sync(&Upload_File);
    a9f2:	84 e8       	ldi	r24, 0x84	; 132
    a9f4:	93 e5       	ldi	r25, 0x53	; 83
    a9f6:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>
	    f_close(&Upload_File);
    a9fa:	84 e8       	ldi	r24, 0x84	; 132
    a9fc:	93 e5       	ldi	r25, 0x53	; 83
    a9fe:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <f_close>
	    okToWriteUploaderLogFile = false;
    aa02:	10 92 a0 34 	sts	0x34A0, r1
    aa06:	12 cc       	rjmp	.-2012   	; 0xa22c <__vector_53+0x3c>
	    goto sdInterrupt;
	}

	if(uploadFailed){
    aa08:	80 91 76 34 	lds	r24, 0x3476
    aa0c:	88 23       	and	r24, r24
    aa0e:	09 f4       	brne	.+2      	; 0xaa12 <__vector_53+0x822>
    aa10:	62 c0       	rjmp	.+196    	; 0xaad6 <__vector_53+0x8e6>

        if(useWifiForUploading){
    aa12:	80 91 0f 34 	lds	r24, 0x340F
    aa16:	88 23       	and	r24, r24
    aa18:	29 f0       	breq	.+10     	; 0xaa24 <__vector_53+0x834>
            Debug_SendString("Updating uploadLg File",true);
    aa1a:	87 ec       	ldi	r24, 0xC7	; 199
    aa1c:	96 e2       	ldi	r25, 0x26	; 38
    aa1e:	61 e0       	ldi	r22, 0x01	; 1
    aa20:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    aa24:	8e ed       	ldi	r24, 0xDE	; 222
    aa26:	96 e2       	ldi	r25, 0x26	; 38
    aa28:	6f e6       	ldi	r22, 0x6F	; 111
    aa2a:	7c e4       	ldi	r23, 0x4C	; 76
    aa2c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    aa30:	84 e8       	ldi	r24, 0x84	; 132
    aa32:	93 e5       	ldi	r25, 0x53	; 83
    aa34:	6e ed       	ldi	r22, 0xDE	; 222
    aa36:	76 e2       	ldi	r23, 0x26	; 38
    aa38:	43 e1       	ldi	r20, 0x13	; 19
    aa3a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <f_open>
        if(fno2.fsize > 0){
    aa3e:	40 91 6f 4c 	lds	r20, 0x4C6F
    aa42:	50 91 70 4c 	lds	r21, 0x4C70
    aa46:	60 91 71 4c 	lds	r22, 0x4C71
    aa4a:	70 91 72 4c 	lds	r23, 0x4C72
    aa4e:	41 15       	cp	r20, r1
    aa50:	51 05       	cpc	r21, r1
    aa52:	61 05       	cpc	r22, r1
    aa54:	71 05       	cpc	r23, r1
    aa56:	21 f0       	breq	.+8      	; 0xaa60 <__vector_53+0x870>
           f_lseek(&Upload_File, fno2.fsize);
    aa58:	84 e8       	ldi	r24, 0x84	; 132
    aa5a:	93 e5       	ldi	r25, 0x53	; 83
    aa5c:	0e 94 ed 1c 	call	0x39da	; 0x39da <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    aa60:	8c ee       	ldi	r24, 0xEC	; 236
    aa62:	96 e2       	ldi	r25, 0x26	; 38
    aa64:	64 e8       	ldi	r22, 0x84	; 132
    aa66:	73 e5       	ldi	r23, 0x53	; 83
    aa68:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    aa6c:	88 e3       	ldi	r24, 0x38	; 56
    aa6e:	9d e3       	ldi	r25, 0x3D	; 61
    aa70:	64 e8       	ldi	r22, 0x84	; 132
    aa72:	73 e5       	ldi	r23, 0x53	; 83
    aa74:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(", Size: ",&Upload_File);
    aa78:	88 ef       	ldi	r24, 0xF8	; 248
    aa7a:	96 e2       	ldi	r25, 0x26	; 38
    aa7c:	64 e8       	ldi	r22, 0x84	; 132
    aa7e:	73 e5       	ldi	r23, 0x53	; 83
    aa80:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    aa84:	60 91 84 34 	lds	r22, 0x3484
    aa88:	70 91 85 34 	lds	r23, 0x3485
    aa8c:	80 91 86 34 	lds	r24, 0x3486
    aa90:	90 91 87 34 	lds	r25, 0x3487
    aa94:	46 ed       	ldi	r20, 0xD6	; 214
    aa96:	5d e5       	ldi	r21, 0x5D	; 93
    aa98:	2a e0       	ldi	r18, 0x0A	; 10
    aa9a:	30 e0       	ldi	r19, 0x00	; 0
    aa9c:	0e 94 77 63 	call	0xc6ee	; 0xc6ee <ltoa>
    aaa0:	64 e8       	ldi	r22, 0x84	; 132
    aaa2:	73 e5       	ldi	r23, 0x53	; 83
    aaa4:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
        f_puts(" bytes, uploadFailed failed...",&Upload_File);
    aaa8:	80 e7       	ldi	r24, 0x70	; 112
    aaaa:	97 e2       	ldi	r25, 0x27	; 39
    aaac:	64 e8       	ldi	r22, 0x84	; 132
    aaae:	73 e5       	ldi	r23, 0x53	; 83
    aab0:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>

        f_putc(13,&Upload_File);
    aab4:	8d e0       	ldi	r24, 0x0D	; 13
    aab6:	90 e0       	ldi	r25, 0x00	; 0
    aab8:	64 e8       	ldi	r22, 0x84	; 132
    aaba:	73 e5       	ldi	r23, 0x53	; 83
    aabc:	0e 94 24 2b 	call	0x5648	; 0x5648 <f_putc>
        f_sync(&Upload_File);
    aac0:	84 e8       	ldi	r24, 0x84	; 132
    aac2:	93 e5       	ldi	r25, 0x53	; 83
    aac4:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <f_sync>
	    f_close(&Upload_File);
    aac8:	84 e8       	ldi	r24, 0x84	; 132
    aaca:	93 e5       	ldi	r25, 0x53	; 83
    aacc:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <f_close>
	    uploadFailed = false;
    aad0:	10 92 76 34 	sts	0x3476, r1
    aad4:	ab cb       	rjmp	.-2218   	; 0xa22c <__vector_53+0x3c>
	    goto sdInterrupt;
	}

	if(okToGetRemainingSpace){
    aad6:	80 91 b7 4c 	lds	r24, 0x4CB7
    aada:	88 23       	and	r24, r24
    aadc:	09 f4       	brne	.+2      	; 0xaae0 <__vector_53+0x8f0>
    aade:	47 c0       	rjmp	.+142    	; 0xab6e <__vector_53+0x97e>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    aae0:	8f e8       	ldi	r24, 0x8F	; 143
    aae2:	97 e2       	ldi	r25, 0x27	; 39
    aae4:	61 ea       	ldi	r22, 0xA1	; 161
    aae6:	74 e3       	ldi	r23, 0x34	; 52
    aae8:	4b ee       	ldi	r20, 0xEB	; 235
    aaea:	55 e4       	ldi	r21, 0x45	; 69
    aaec:	0e 94 08 20 	call	0x4010	; 0x4010 <f_getfree>
    aaf0:	88 23       	and	r24, r24
    aaf2:	41 f0       	breq	.+16     	; 0xab04 <__vector_53+0x914>
           spaceRemainingOnDisk = 0;
    aaf4:	10 92 a1 34 	sts	0x34A1, r1
    aaf8:	10 92 a2 34 	sts	0x34A2, r1
    aafc:	10 92 a3 34 	sts	0x34A3, r1
    ab00:	10 92 a4 34 	sts	0x34A4, r1
	    }
	    totalDiskSpace = fs->max_clust;
    ab04:	e0 91 eb 45 	lds	r30, 0x45EB
    ab08:	f0 91 ec 45 	lds	r31, 0x45EC
    ab0c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ab0e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ab10:	04 8d       	ldd	r16, Z+28	; 0x1c
    ab12:	15 8d       	ldd	r17, Z+29	; 0x1d
    ab14:	e0 92 a5 34 	sts	0x34A5, r14
    ab18:	f0 92 a6 34 	sts	0x34A6, r15
    ab1c:	00 93 a7 34 	sts	0x34A7, r16
    ab20:	10 93 a8 34 	sts	0x34A8, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
    ab24:	80 91 a1 34 	lds	r24, 0x34A1
    ab28:	90 91 a2 34 	lds	r25, 0x34A2
    ab2c:	a0 91 a3 34 	lds	r26, 0x34A3
    ab30:	b0 91 a4 34 	lds	r27, 0x34A4
    ab34:	a8 01       	movw	r20, r16
    ab36:	97 01       	movw	r18, r14
    ab38:	28 1b       	sub	r18, r24
    ab3a:	39 0b       	sbc	r19, r25
    ab3c:	4a 0b       	sbc	r20, r26
    ab3e:	5b 0b       	sbc	r21, r27
    ab40:	ca 01       	movw	r24, r20
    ab42:	b9 01       	movw	r22, r18
    ab44:	28 ee       	ldi	r18, 0xE8	; 232
    ab46:	33 e0       	ldi	r19, 0x03	; 3
    ab48:	40 e0       	ldi	r20, 0x00	; 0
    ab4a:	50 e0       	ldi	r21, 0x00	; 0
    ab4c:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
	    percentDiskUsed /= totalDiskSpace;
    ab50:	a8 01       	movw	r20, r16
    ab52:	97 01       	movw	r18, r14
    ab54:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    ab58:	20 93 a9 34 	sts	0x34A9, r18
    ab5c:	30 93 aa 34 	sts	0x34AA, r19
    ab60:	40 93 ab 34 	sts	0x34AB, r20
    ab64:	50 93 ac 34 	sts	0x34AC, r21

	    okToGetRemainingSpace = false;
    ab68:	10 92 b7 4c 	sts	0x4CB7, r1
    ab6c:	5f cb       	rjmp	.-2370   	; 0xa22c <__vector_53+0x3c>
	    goto sdInterrupt;
	}

	if(okToEraseFile){
    ab6e:	80 91 79 34 	lds	r24, 0x3479
    ab72:	88 23       	and	r24, r24
    ab74:	09 f1       	breq	.+66     	; 0xabb8 <__vector_53+0x9c8>
        eraseFileReturn = f_unlink(fileToErase);
    ab76:	84 ea       	ldi	r24, 0xA4	; 164
    ab78:	95 e5       	ldi	r25, 0x55	; 85
    ab7a:	0e 94 bb 21 	call	0x4376	; 0x4376 <f_unlink>
    ab7e:	80 93 c2 4c 	sts	0x4CC2, r24
        strcpy(fileToUpload,"");
    ab82:	88 e3       	ldi	r24, 0x38	; 56
    ab84:	9d e3       	ldi	r25, 0x3D	; 61
    ab86:	65 ee       	ldi	r22, 0xE5	; 229
    ab88:	70 e2       	ldi	r23, 0x20	; 32
    ab8a:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
        okToEraseFile = false;
    ab8e:	10 92 79 34 	sts	0x3479, r1
    ab92:	4c cb       	rjmp	.-2408   	; 0xa22c <__vector_53+0x3c>

    if(okToSendAirQuality && rs232Recording && !restartingFile){
        uint8_t numberOfBins = 1;
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
    ab94:	80 e0       	ldi	r24, 0x00	; 0
    ab96:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Rs232_GetByte>
    ab9a:	e1 2f       	mov	r30, r17
    ab9c:	f0 e0       	ldi	r31, 0x00	; 0
    ab9e:	e5 5b       	subi	r30, 0xB5	; 181
    aba0:	f4 4b       	sbci	r31, 0xB4	; 180
    aba2:	80 83       	st	Z, r24
			if(airQualityString[counter] == ','){
    aba4:	8c 32       	cpi	r24, 0x2C	; 44
    aba6:	09 f0       	breq	.+2      	; 0xabaa <__vector_53+0x9ba>
    aba8:	79 cb       	rjmp	.-2318   	; 0xa29c <__vector_53+0xac>
    abaa:	77 cb       	rjmp	.-2322   	; 0xa29a <__vector_53+0xaa>
	}




	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    abac:	80 91 7b 34 	lds	r24, 0x347B
    abb0:	88 23       	and	r24, r24
    abb2:	09 f4       	brne	.+2      	; 0xabb6 <__vector_53+0x9c6>
    abb4:	67 cd       	rjmp	.-1330   	; 0xa684 <__vector_53+0x494>
    abb6:	c4 cd       	rjmp	.-1144   	; 0xa740 <__vector_53+0x550>
        eraseFileReturn = f_unlink(fileToErase);
        strcpy(fileToUpload,"");
        okToEraseFile = false;
	    goto sdInterrupt;
	}
}
    abb8:	0f 90       	pop	r0
    abba:	0f 90       	pop	r0
    abbc:	cf 91       	pop	r28
    abbe:	df 91       	pop	r29
    abc0:	ff 91       	pop	r31
    abc2:	ef 91       	pop	r30
    abc4:	bf 91       	pop	r27
    abc6:	af 91       	pop	r26
    abc8:	9f 91       	pop	r25
    abca:	8f 91       	pop	r24
    abcc:	7f 91       	pop	r23
    abce:	6f 91       	pop	r22
    abd0:	5f 91       	pop	r21
    abd2:	4f 91       	pop	r20
    abd4:	3f 91       	pop	r19
    abd6:	2f 91       	pop	r18
    abd8:	1f 91       	pop	r17
    abda:	0f 91       	pop	r16
    abdc:	ff 90       	pop	r15
    abde:	ef 90       	pop	r14
    abe0:	df 90       	pop	r13
    abe2:	0f 90       	pop	r0
    abe4:	0b be       	out	0x3b, r0	; 59
    abe6:	0f 90       	pop	r0
    abe8:	0f be       	out	0x3f, r0	; 63
    abea:	0f 90       	pop	r0
    abec:	1f 90       	pop	r1
    abee:	18 95       	reti

0000abf0 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    abf0:	2f 92       	push	r2
    abf2:	3f 92       	push	r3
    abf4:	4f 92       	push	r4
    abf6:	5f 92       	push	r5
    abf8:	6f 92       	push	r6
    abfa:	7f 92       	push	r7
    abfc:	8f 92       	push	r8
    abfe:	9f 92       	push	r9
    ac00:	af 92       	push	r10
    ac02:	bf 92       	push	r11
    ac04:	cf 92       	push	r12
    ac06:	df 92       	push	r13
    ac08:	ef 92       	push	r14
    ac0a:	ff 92       	push	r15
    ac0c:	0f 93       	push	r16
    ac0e:	1f 93       	push	r17
    ac10:	df 93       	push	r29
    ac12:	cf 93       	push	r28
    ac14:	cd b7       	in	r28, 0x3d	; 61
    ac16:	de b7       	in	r29, 0x3e	; 62
    ac18:	63 97       	sbiw	r28, 0x13	; 19
    ac1a:	cd bf       	out	0x3d, r28	; 61
    ac1c:	de bf       	out	0x3e, r29	; 62
    ac1e:	6b a4       	ldd	r6, Y+43	; 0x2b
    ac20:	7c a4       	ldd	r7, Y+44	; 0x2c
    ac22:	8e 01       	movw	r16, r28
    ac24:	03 5d       	subi	r16, 0xD3	; 211
    ac26:	1f 4f       	sbci	r17, 0xFF	; 255
    ac28:	19 8a       	std	Y+17, r1	; 0x11
    ac2a:	1a 8a       	std	Y+18, r1	; 0x12
    ac2c:	20 e0       	ldi	r18, 0x00	; 0
    ac2e:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    ac30:	d3 01       	movw	r26, r6
    ac32:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    ac34:	88 23       	and	r24, r24
    ac36:	09 f4       	brne	.+2      	; 0xac3a <f_printf+0x4a>
    ac38:	17 c1       	rjmp	.+558    	; 0xae68 <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    ac3a:	08 94       	sec
    ac3c:	61 1c       	adc	r6, r1
    ac3e:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    ac40:	85 32       	cpi	r24, 0x25	; 37
    ac42:	71 f0       	breq	.+28     	; 0xac60 <f_printf+0x70>
			cc = f_putc(c, fil);
    ac44:	90 e0       	ldi	r25, 0x00	; 0
    ac46:	69 a5       	ldd	r22, Y+41	; 0x29
    ac48:	7a a5       	ldd	r23, Y+42	; 0x2a
    ac4a:	0e 94 24 2b 	call	0x5648	; 0x5648 <f_putc>
    ac4e:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    ac50:	bf ef       	ldi	r27, 0xFF	; 255
    ac52:	8f 3f       	cpi	r24, 0xFF	; 255
    ac54:	9b 07       	cpc	r25, r27
    ac56:	11 f4       	brne	.+4      	; 0xac5c <f_printf+0x6c>
    ac58:	48 01       	movw	r8, r16
    ac5a:	fa c0       	rjmp	.+500    	; 0xae50 <f_printf+0x260>
    ac5c:	48 01       	movw	r8, r16
    ac5e:	4c c0       	rjmp	.+152    	; 0xacf8 <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    ac60:	d3 01       	movw	r26, r6
    ac62:	ed 91       	ld	r30, X+
    ac64:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    ac66:	e0 33       	cpi	r30, 0x30	; 48
    ac68:	11 f0       	breq	.+4      	; 0xac6e <f_printf+0x7e>
    ac6a:	1b 8a       	std	Y+19, r1	; 0x13
    ac6c:	04 c0       	rjmp	.+8      	; 0xac76 <f_printf+0x86>
			f = 1; c = *str++;
    ac6e:	ed 91       	ld	r30, X+
    ac70:	3d 01       	movw	r6, r26
    ac72:	b1 e0       	ldi	r27, 0x01	; 1
    ac74:	bb 8b       	std	Y+19, r27	; 0x13
    ac76:	aa 24       	eor	r10, r10
    ac78:	bb 24       	eor	r11, r11
    ac7a:	13 c0       	rjmp	.+38     	; 0xaca2 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    ac7c:	c5 01       	movw	r24, r10
    ac7e:	53 e0       	ldi	r21, 0x03	; 3
    ac80:	88 0f       	add	r24, r24
    ac82:	99 1f       	adc	r25, r25
    ac84:	5a 95       	dec	r21
    ac86:	e1 f7       	brne	.-8      	; 0xac80 <f_printf+0x90>
    ac88:	aa 0c       	add	r10, r10
    ac8a:	bb 1c       	adc	r11, r11
    ac8c:	a8 0e       	add	r10, r24
    ac8e:	b9 1e       	adc	r11, r25
    ac90:	ae 0e       	add	r10, r30
    ac92:	b1 1c       	adc	r11, r1
    ac94:	e0 ed       	ldi	r30, 0xD0	; 208
    ac96:	ff ef       	ldi	r31, 0xFF	; 255
    ac98:	ae 0e       	add	r10, r30
    ac9a:	bf 1e       	adc	r11, r31
			c = *str++;
    ac9c:	d3 01       	movw	r26, r6
    ac9e:	ed 91       	ld	r30, X+
    aca0:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    aca2:	8e 2f       	mov	r24, r30
    aca4:	80 53       	subi	r24, 0x30	; 48
    aca6:	8a 30       	cpi	r24, 0x0A	; 10
    aca8:	48 f3       	brcs	.-46     	; 0xac7c <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    acaa:	ec 36       	cpi	r30, 0x6C	; 108
    acac:	31 f4       	brne	.+12     	; 0xacba <f_printf+0xca>
			f |= 2; c = *str++;
    acae:	bb 89       	ldd	r27, Y+19	; 0x13
    acb0:	b2 60       	ori	r27, 0x02	; 2
    acb2:	bb 8b       	std	Y+19, r27	; 0x13
    acb4:	d3 01       	movw	r26, r6
    acb6:	ed 91       	ld	r30, X+
    acb8:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    acba:	e3 37       	cpi	r30, 0x73	; 115
    acbc:	49 f4       	brne	.+18     	; 0xacd0 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    acbe:	22 e0       	ldi	r18, 0x02	; 2
    acc0:	82 2e       	mov	r8, r18
    acc2:	91 2c       	mov	r9, r1
    acc4:	80 0e       	add	r8, r16
    acc6:	91 1e       	adc	r9, r17
    acc8:	f8 01       	movw	r30, r16
    acca:	80 81       	ld	r24, Z
    accc:	91 81       	ldd	r25, Z+1	; 0x01
    acce:	bb c0       	rjmp	.+374    	; 0xae46 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    acd0:	e3 36       	cpi	r30, 0x63	; 99
    acd2:	a9 f4       	brne	.+42     	; 0xacfe <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    acd4:	92 e0       	ldi	r25, 0x02	; 2
    acd6:	89 2e       	mov	r8, r25
    acd8:	91 2c       	mov	r9, r1
    acda:	80 0e       	add	r8, r16
    acdc:	91 1e       	adc	r9, r17
    acde:	d8 01       	movw	r26, r16
    ace0:	8d 91       	ld	r24, X+
    ace2:	9c 91       	ld	r25, X
    ace4:	69 a5       	ldd	r22, Y+41	; 0x29
    ace6:	7a a5       	ldd	r23, Y+42	; 0x2a
    ace8:	0e 94 24 2b 	call	0x5648	; 0x5648 <f_putc>
    acec:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    acee:	bf ef       	ldi	r27, 0xFF	; 255
    acf0:	8f 3f       	cpi	r24, 0xFF	; 255
    acf2:	9b 07       	cpc	r25, r27
    acf4:	09 f4       	brne	.+2      	; 0xacf8 <f_printf+0x108>
    acf6:	ac c0       	rjmp	.+344    	; 0xae50 <f_printf+0x260>
    acf8:	21 e0       	ldi	r18, 0x01	; 1
    acfa:	30 e0       	ldi	r19, 0x00	; 0
    acfc:	a9 c0       	rjmp	.+338    	; 0xae50 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    acfe:	e4 36       	cpi	r30, 0x64	; 100
    ad00:	39 f0       	breq	.+14     	; 0xad10 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    ad02:	e5 37       	cpi	r30, 0x75	; 117
    ad04:	29 f0       	breq	.+10     	; 0xad10 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    ad06:	e8 35       	cpi	r30, 0x58	; 88
    ad08:	09 f0       	breq	.+2      	; 0xad0c <f_printf+0x11c>
    ad0a:	ae c0       	rjmp	.+348    	; 0xae68 <f_printf+0x278>
    ad0c:	20 e1       	ldi	r18, 0x10	; 16
    ad0e:	01 c0       	rjmp	.+2      	; 0xad12 <f_printf+0x122>
    ad10:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    ad12:	fb 89       	ldd	r31, Y+19	; 0x13
    ad14:	f1 ff       	sbrs	r31, 1
    ad16:	0d c0       	rjmp	.+26     	; 0xad32 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    ad18:	84 e0       	ldi	r24, 0x04	; 4
    ad1a:	88 2e       	mov	r8, r24
    ad1c:	91 2c       	mov	r9, r1
    ad1e:	80 0e       	add	r8, r16
    ad20:	91 1e       	adc	r9, r17
    ad22:	d8 01       	movw	r26, r16
    ad24:	ed 90       	ld	r14, X+
    ad26:	fd 90       	ld	r15, X+
    ad28:	0d 91       	ld	r16, X+
    ad2a:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    ad2c:	e4 36       	cpi	r30, 0x64	; 100
    ad2e:	09 f5       	brne	.+66     	; 0xad72 <f_printf+0x182>
    ad30:	13 c0       	rjmp	.+38     	; 0xad58 <f_printf+0x168>
    ad32:	c8 01       	movw	r24, r16
    ad34:	02 96       	adiw	r24, 0x02	; 2
    ad36:	d8 01       	movw	r26, r16
    ad38:	6d 91       	ld	r22, X+
    ad3a:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    ad3c:	e4 36       	cpi	r30, 0x64	; 100
    ad3e:	39 f4       	brne	.+14     	; 0xad4e <f_printf+0x15e>
    ad40:	4c 01       	movw	r8, r24
    ad42:	7b 01       	movw	r14, r22
    ad44:	00 27       	eor	r16, r16
    ad46:	f7 fc       	sbrc	r15, 7
    ad48:	00 95       	com	r16
    ad4a:	10 2f       	mov	r17, r16
    ad4c:	05 c0       	rjmp	.+10     	; 0xad58 <f_printf+0x168>
    ad4e:	4c 01       	movw	r8, r24
    ad50:	7b 01       	movw	r14, r22
    ad52:	00 e0       	ldi	r16, 0x00	; 0
    ad54:	10 e0       	ldi	r17, 0x00	; 0
    ad56:	0d c0       	rjmp	.+26     	; 0xad72 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    ad58:	17 ff       	sbrs	r17, 7
    ad5a:	0b c0       	rjmp	.+22     	; 0xad72 <f_printf+0x182>
				val = 0 - val;
    ad5c:	10 95       	com	r17
    ad5e:	00 95       	com	r16
    ad60:	f0 94       	com	r15
    ad62:	e0 94       	com	r14
    ad64:	e1 1c       	adc	r14, r1
    ad66:	f1 1c       	adc	r15, r1
    ad68:	01 1d       	adc	r16, r1
    ad6a:	11 1d       	adc	r17, r1
				f |= 4;
    ad6c:	bb 89       	ldd	r27, Y+19	; 0x13
    ad6e:	b4 60       	ori	r27, 0x04	; 4
    ad70:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    ad72:	18 8a       	std	Y+16, r1	; 0x10
    ad74:	bf e0       	ldi	r27, 0x0F	; 15
    ad76:	cb 2e       	mov	r12, r27
    ad78:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    ad7a:	22 2e       	mov	r2, r18
    ad7c:	33 24       	eor	r3, r3
    ad7e:	44 24       	eor	r4, r4
    ad80:	55 24       	eor	r5, r5
    ad82:	c8 01       	movw	r24, r16
    ad84:	b7 01       	movw	r22, r14
    ad86:	a2 01       	movw	r20, r4
    ad88:	91 01       	movw	r18, r2
    ad8a:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    ad8e:	86 2f       	mov	r24, r22
    ad90:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    ad92:	8a 33       	cpi	r24, 0x3A	; 58
    ad94:	08 f0       	brcs	.+2      	; 0xad98 <f_printf+0x1a8>
    ad96:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    ad98:	08 94       	sec
    ad9a:	c1 08       	sbc	r12, r1
    ad9c:	d1 08       	sbc	r13, r1
    ad9e:	e1 e0       	ldi	r30, 0x01	; 1
    ada0:	f0 e0       	ldi	r31, 0x00	; 0
    ada2:	ec 0f       	add	r30, r28
    ada4:	fd 1f       	adc	r31, r29
    ada6:	ec 0d       	add	r30, r12
    ada8:	fd 1d       	adc	r31, r13
    adaa:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    adac:	c1 14       	cp	r12, r1
    adae:	d1 04       	cpc	r13, r1
    adb0:	e9 f0       	breq	.+58     	; 0xadec <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    adb2:	c8 01       	movw	r24, r16
    adb4:	b7 01       	movw	r22, r14
    adb6:	a2 01       	movw	r20, r4
    adb8:	91 01       	movw	r18, r2
    adba:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    adbe:	c9 01       	movw	r24, r18
    adc0:	da 01       	movw	r26, r20
    adc2:	7c 01       	movw	r14, r24
    adc4:	8d 01       	movw	r16, r26
		} while (i && val);
    adc6:	e1 14       	cp	r14, r1
    adc8:	f1 04       	cpc	r15, r1
    adca:	01 05       	cpc	r16, r1
    adcc:	11 05       	cpc	r17, r1
    adce:	c9 f6       	brne	.-78     	; 0xad82 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    add0:	eb 89       	ldd	r30, Y+19	; 0x13
    add2:	e2 ff       	sbrs	r30, 2
    add4:	0b c0       	rjmp	.+22     	; 0xadec <f_printf+0x1fc>
    add6:	08 94       	sec
    add8:	c1 08       	sbc	r12, r1
    adda:	d1 08       	sbc	r13, r1
    addc:	e1 e0       	ldi	r30, 0x01	; 1
    adde:	f0 e0       	ldi	r31, 0x00	; 0
    ade0:	ec 0f       	add	r30, r28
    ade2:	fd 1f       	adc	r31, r29
    ade4:	ec 0d       	add	r30, r12
    ade6:	fd 1d       	adc	r31, r13
    ade8:	4d e2       	ldi	r20, 0x2D	; 45
    adea:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    adec:	8f e0       	ldi	r24, 0x0F	; 15
    adee:	90 e0       	ldi	r25, 0x00	; 0
    adf0:	8a 19       	sub	r24, r10
    adf2:	9b 09       	sbc	r25, r11
    adf4:	08 94       	sec
    adf6:	c1 08       	sbc	r12, r1
    adf8:	d1 08       	sbc	r13, r1
    adfa:	e1 e0       	ldi	r30, 0x01	; 1
    adfc:	f0 e0       	ldi	r31, 0x00	; 0
    adfe:	ec 0f       	add	r30, r28
    ae00:	fd 1f       	adc	r31, r29
    ae02:	ec 0d       	add	r30, r12
    ae04:	fd 1d       	adc	r31, r13
    ae06:	08 94       	sec
    ae08:	c1 1c       	adc	r12, r1
    ae0a:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    ae0c:	ab 89       	ldd	r26, Y+19	; 0x13
    ae0e:	2a 2f       	mov	r18, r26
    ae10:	30 e0       	ldi	r19, 0x00	; 0
    ae12:	21 70       	andi	r18, 0x01	; 1
    ae14:	30 70       	andi	r19, 0x00	; 0
    ae16:	0b c0       	rjmp	.+22     	; 0xae2e <f_printf+0x23e>
    ae18:	08 94       	sec
    ae1a:	c1 08       	sbc	r12, r1
    ae1c:	d1 08       	sbc	r13, r1
    ae1e:	21 15       	cp	r18, r1
    ae20:	31 05       	cpc	r19, r1
    ae22:	11 f4       	brne	.+4      	; 0xae28 <f_printf+0x238>
    ae24:	40 e2       	ldi	r20, 0x20	; 32
    ae26:	01 c0       	rjmp	.+2      	; 0xae2a <f_printf+0x23a>
    ae28:	40 e3       	ldi	r20, 0x30	; 48
    ae2a:	40 83       	st	Z, r20
    ae2c:	31 97       	sbiw	r30, 0x01	; 1
    ae2e:	c1 14       	cp	r12, r1
    ae30:	d1 04       	cpc	r13, r1
    ae32:	19 f0       	breq	.+6      	; 0xae3a <f_printf+0x24a>
    ae34:	8c 15       	cp	r24, r12
    ae36:	9d 05       	cpc	r25, r13
    ae38:	7c f3       	brlt	.-34     	; 0xae18 <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    ae3a:	81 e0       	ldi	r24, 0x01	; 1
    ae3c:	90 e0       	ldi	r25, 0x00	; 0
    ae3e:	8c 0f       	add	r24, r28
    ae40:	9d 1f       	adc	r25, r29
    ae42:	8c 0d       	add	r24, r12
    ae44:	9d 1d       	adc	r25, r13
    ae46:	69 a5       	ldd	r22, Y+41	; 0x29
    ae48:	7a a5       	ldd	r23, Y+42	; 0x2a
    ae4a:	0e 94 4a 2b 	call	0x5694	; 0x5694 <f_puts>
    ae4e:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    ae50:	e9 89       	ldd	r30, Y+17	; 0x11
    ae52:	fa 89       	ldd	r31, Y+18	; 0x12
    ae54:	e2 0f       	add	r30, r18
    ae56:	f3 1f       	adc	r31, r19
    ae58:	e9 8b       	std	Y+17, r30	; 0x11
    ae5a:	fa 8b       	std	Y+18, r31	; 0x12
    ae5c:	ff ef       	ldi	r31, 0xFF	; 255
    ae5e:	2f 3f       	cpi	r18, 0xFF	; 255
    ae60:	3f 07       	cpc	r19, r31
    ae62:	41 f0       	breq	.+16     	; 0xae74 <f_printf+0x284>
    ae64:	84 01       	movw	r16, r8
    ae66:	e4 ce       	rjmp	.-568    	; 0xac30 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    ae68:	4f ef       	ldi	r20, 0xFF	; 255
    ae6a:	2f 3f       	cpi	r18, 0xFF	; 255
    ae6c:	34 07       	cpc	r19, r20
    ae6e:	11 f0       	breq	.+4      	; 0xae74 <f_printf+0x284>
    ae70:	29 89       	ldd	r18, Y+17	; 0x11
    ae72:	3a 89       	ldd	r19, Y+18	; 0x12
}
    ae74:	c9 01       	movw	r24, r18
    ae76:	63 96       	adiw	r28, 0x13	; 19
    ae78:	cd bf       	out	0x3d, r28	; 61
    ae7a:	de bf       	out	0x3e, r29	; 62
    ae7c:	cf 91       	pop	r28
    ae7e:	df 91       	pop	r29
    ae80:	1f 91       	pop	r17
    ae82:	0f 91       	pop	r16
    ae84:	ff 90       	pop	r15
    ae86:	ef 90       	pop	r14
    ae88:	df 90       	pop	r13
    ae8a:	cf 90       	pop	r12
    ae8c:	bf 90       	pop	r11
    ae8e:	af 90       	pop	r10
    ae90:	9f 90       	pop	r9
    ae92:	8f 90       	pop	r8
    ae94:	7f 90       	pop	r7
    ae96:	6f 90       	pop	r6
    ae98:	5f 90       	pop	r5
    ae9a:	4f 90       	pop	r4
    ae9c:	3f 90       	pop	r3
    ae9e:	2f 90       	pop	r2
    aea0:	08 95       	ret

0000aea2 <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    aea2:	af 92       	push	r10
    aea4:	bf 92       	push	r11
    aea6:	cf 92       	push	r12
    aea8:	df 92       	push	r13
    aeaa:	ff 92       	push	r15
    aeac:	0f 93       	push	r16
    aeae:	1f 93       	push	r17
    aeb0:	cf 93       	push	r28
    aeb2:	df 93       	push	r29
    aeb4:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    aeb6:	82 e9       	ldi	r24, 0x92	; 146
    aeb8:	97 e2       	ldi	r25, 0x27	; 39
    aeba:	6c e9       	ldi	r22, 0x9C	; 156
    aebc:	77 e2       	ldi	r23, 0x27	; 39
    aebe:	ab 01       	movw	r20, r22
    aec0:	96 01       	movw	r18, r12
    aec2:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    aec6:	ff 24       	eor	r15, r15
    aec8:	c0 e0       	ldi	r28, 0x00	; 0
    aeca:	d0 e0       	ldi	r29, 0x00	; 0
    aecc:	66 e6       	ldi	r22, 0x66	; 102
    aece:	a6 2e       	mov	r10, r22
    aed0:	6e e0       	ldi	r22, 0x0E	; 14
    aed2:	b6 2e       	mov	r11, r22
    aed4:	39 c0       	rjmp	.+114    	; 0xaf48 <Wifi_GetSignalStrength+0xa6>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    aed6:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    aeda:	88 23       	and	r24, r24
    aedc:	89 f1       	breq	.+98     	; 0xaf40 <Wifi_GetSignalStrength+0x9e>
			rssi[tmp] = Wifi_GetByte(false);
    aede:	0f 2d       	mov	r16, r15
    aee0:	10 e0       	ldi	r17, 0x00	; 0
    aee2:	80 e0       	ldi	r24, 0x00	; 0
    aee4:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    aee8:	f8 01       	movw	r30, r16
    aeea:	e4 52       	subi	r30, 0x24	; 36
    aeec:	fa 4a       	sbci	r31, 0xAA	; 170
    aeee:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    aef0:	89 32       	cpi	r24, 0x29	; 41
    aef2:	29 f5       	brne	.+74     	; 0xaf3e <Wifi_GetSignalStrength+0x9c>
				rssi[tmp] = 0;
    aef4:	10 82       	st	Z, r1
				worker = atoi(rssi);
    aef6:	8c ed       	ldi	r24, 0xDC	; 220
    aef8:	95 e5       	ldi	r25, 0x55	; 85
    aefa:	0e 94 7d 62 	call	0xc4fa	; 0xc4fa <atoi>
    aefe:	aa 27       	eor	r26, r26
    af00:	97 fd       	sbrc	r25, 7
    af02:	a0 95       	com	r26
    af04:	ba 2f       	mov	r27, r26
				worker*=9208;
    af06:	bc 01       	movw	r22, r24
    af08:	cd 01       	movw	r24, r26
    af0a:	28 ef       	ldi	r18, 0xF8	; 248
    af0c:	33 e2       	ldi	r19, 0x23	; 35
    af0e:	40 e0       	ldi	r20, 0x00	; 0
    af10:	50 e0       	ldi	r21, 0x00	; 0
    af12:	0e 94 09 62 	call	0xc412	; 0xc412 <__mulsi3>
    af16:	9b 01       	movw	r18, r22
    af18:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    af1a:	6c e6       	ldi	r22, 0x6C	; 108
    af1c:	72 ef       	ldi	r23, 0xF2	; 242
    af1e:	8f e0       	ldi	r24, 0x0F	; 15
    af20:	90 e0       	ldi	r25, 0x00	; 0
    af22:	62 1b       	sub	r22, r18
    af24:	73 0b       	sbc	r23, r19
    af26:	84 0b       	sbc	r24, r20
    af28:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    af2a:	20 e1       	ldi	r18, 0x10	; 16
    af2c:	37 e2       	ldi	r19, 0x27	; 39
    af2e:	40 e0       	ldi	r20, 0x00	; 0
    af30:	50 e0       	ldi	r21, 0x00	; 0
    af32:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    af36:	25 36       	cpi	r18, 0x65	; 101
    af38:	58 f0       	brcs	.+22     	; 0xaf50 <Wifi_GetSignalStrength+0xae>
    af3a:	24 e6       	ldi	r18, 0x64	; 100
    af3c:	09 c0       	rjmp	.+18     	; 0xaf50 <Wifi_GetSignalStrength+0xae>
                if(ss > 100){
                    ss = 100;
                }
				return ss;
			}
			tmp++;
    af3e:	f3 94       	inc	r15
    af40:	c5 01       	movw	r24, r10
    af42:	01 97       	sbiw	r24, 0x01	; 1
    af44:	f1 f7       	brne	.-4      	; 0xaf42 <Wifi_GetSignalStrength+0xa0>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    af46:	21 96       	adiw	r28, 0x01	; 1
    af48:	cc 15       	cp	r28, r12
    af4a:	dd 05       	cpc	r29, r13
    af4c:	20 f2       	brcs	.-120    	; 0xaed6 <Wifi_GetSignalStrength+0x34>
    af4e:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    af50:	82 2f       	mov	r24, r18
    af52:	df 91       	pop	r29
    af54:	cf 91       	pop	r28
    af56:	1f 91       	pop	r17
    af58:	0f 91       	pop	r16
    af5a:	ff 90       	pop	r15
    af5c:	df 90       	pop	r13
    af5e:	cf 90       	pop	r12
    af60:	bf 90       	pop	r11
    af62:	af 90       	pop	r10
    af64:	08 95       	ret

0000af66 <Config_Wifi>:
    }
}



void Config_Wifi(void){
    af66:	0f 93       	push	r16
    af68:	1f 93       	push	r17
    af6a:	80 e2       	ldi	r24, 0x20	; 32
    af6c:	9e e4       	ldi	r25, 0x4E	; 78
    af6e:	20 e7       	ldi	r18, 0x70	; 112
    af70:	31 e0       	ldi	r19, 0x01	; 1
    af72:	f9 01       	movw	r30, r18
    af74:	31 97       	sbiw	r30, 0x01	; 1
    af76:	f1 f7       	brne	.-4      	; 0xaf74 <Config_Wifi+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af7a:	d9 f7       	brne	.-10     	; 0xaf72 <Config_Wifi+0xc>
	uint8_t col = 0;

    _delay_ms(2000);

	display_clearBuffer();
    af7c:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
	display_writeBufferToScreen();
    af80:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

    display_putString("detecting wifi...",col,0,System5x7);
    af84:	84 ea       	ldi	r24, 0xA4	; 164
    af86:	97 e2       	ldi	r25, 0x27	; 39
    af88:	60 e0       	ldi	r22, 0x00	; 0
    af8a:	40 e0       	ldi	r20, 0x00	; 0
    af8c:	28 ea       	ldi	r18, 0xA8	; 168
    af8e:	31 e3       	ldi	r19, 0x31	; 49
    af90:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	display_writeBufferToScreen();
    af94:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
	col++;


    if(!Wifi_EnterCMDMode(1000)){
    af98:	88 ee       	ldi	r24, 0xE8	; 232
    af9a:	93 e0       	ldi	r25, 0x03	; 3
    af9c:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <Wifi_EnterCMDMode>
    afa0:	88 23       	and	r24, r24
    afa2:	f1 f4       	brne	.+60     	; 0xafe0 <Config_Wifi+0x7a>
        Debug_SendString("Changing baud to 460800",true);
    afa4:	86 eb       	ldi	r24, 0xB6	; 182
    afa6:	97 e2       	ldi	r25, 0x27	; 39
    afa8:	61 e0       	ldi	r22, 0x01	; 1
    afaa:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
        Wifi_Init(460800);
    afae:	60 e0       	ldi	r22, 0x00	; 0
    afb0:	78 e0       	ldi	r23, 0x08	; 8
    afb2:	87 e0       	ldi	r24, 0x07	; 7
    afb4:	90 e0       	ldi	r25, 0x00	; 0
    afb6:	0e 94 be 02 	call	0x57c	; 0x57c <Wifi_Init>
    afba:	80 e3       	ldi	r24, 0x30	; 48
    afbc:	95 e7       	ldi	r25, 0x75	; 117
    afbe:	20 e7       	ldi	r18, 0x70	; 112
    afc0:	31 e0       	ldi	r19, 0x01	; 1
    afc2:	f9 01       	movw	r30, r18
    afc4:	31 97       	sbiw	r30, 0x01	; 1
    afc6:	f1 f7       	brne	.-4      	; 0xafc4 <Config_Wifi+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    afc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    afca:	d9 f7       	brne	.-10     	; 0xafc2 <Config_Wifi+0x5c>
        _delay_ms(3000);
        if(Wifi_Connected(1000)){
    afcc:	88 ee       	ldi	r24, 0xE8	; 232
    afce:	93 e0       	ldi	r25, 0x03	; 3
    afd0:	0e 94 45 03 	call	0x68a	; 0x68a <Wifi_Connected>
    afd4:	88 23       	and	r24, r24
    afd6:	11 f0       	breq	.+4      	; 0xafdc <Config_Wifi+0x76>
            goto Wifi_is_Connected;
        } else {
            goto Configure_Wifi;
    afd8:	01 e0       	ldi	r16, 0x01	; 1
    afda:	39 c2       	rjmp	.+1138   	; 0xb44e <Config_Wifi+0x4e8>
    afdc:	11 e0       	ldi	r17, 0x01	; 1
    afde:	f3 c0       	rjmp	.+486    	; 0xb1c6 <Config_Wifi+0x260>
        }


    }  else {

        Debug_SendString("baud is 9600",true);
    afe0:	8e ec       	ldi	r24, 0xCE	; 206
    afe2:	97 e2       	ldi	r25, 0x27	; 39
    afe4:	61 e0       	ldi	r22, 0x01	; 1
    afe6:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
        if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    afea:	8b ed       	ldi	r24, 0xDB	; 219
    afec:	97 e2       	ldi	r25, 0x27	; 39
    afee:	69 ee       	ldi	r22, 0xE9	; 233
    aff0:	77 e2       	ldi	r23, 0x27	; 39
    aff2:	ab 01       	movw	r20, r22
    aff4:	24 ef       	ldi	r18, 0xF4	; 244
    aff6:	31 e0       	ldi	r19, 0x01	; 1
    aff8:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    affc:	88 23       	and	r24, r24
    affe:	19 f0       	breq	.+6      	; 0xb006 <Config_Wifi+0xa0>
		    display_putString("reset..........OK",col,0,System5x7);
    b000:	8e ef       	ldi	r24, 0xFE	; 254
    b002:	97 e2       	ldi	r25, 0x27	; 39
    b004:	02 c0       	rjmp	.+4      	; 0xb00a <Config_Wifi+0xa4>
    	} else {
		    display_putString("reset........FAIL",col,0,System5x7);
    b006:	80 e1       	ldi	r24, 0x10	; 16
    b008:	98 e2       	ldi	r25, 0x28	; 40
    b00a:	61 e0       	ldi	r22, 0x01	; 1
    b00c:	40 e0       	ldi	r20, 0x00	; 0
    b00e:	28 ea       	ldi	r18, 0xA8	; 168
    b010:	31 e3       	ldi	r19, 0x31	; 49
    b012:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	    }
	    display_writeBufferToScreen();
    b016:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b01a:	80 e1       	ldi	r24, 0x10	; 16
    b01c:	97 e2       	ldi	r25, 0x27	; 39
    b01e:	20 e7       	ldi	r18, 0x70	; 112
    b020:	31 e0       	ldi	r19, 0x01	; 1
    b022:	f9 01       	movw	r30, r18
    b024:	31 97       	sbiw	r30, 0x01	; 1
    b026:	f1 f7       	brne	.-4      	; 0xb024 <Config_Wifi+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b028:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b02a:	d9 f7       	brne	.-10     	; 0xb022 <Config_Wifi+0xbc>
	    col++;


        _delay_ms(1000);

        Wifi_SendCommand("set sys iofunc 0x50","AOK","AOK",500);    // 0x10
    b02c:	82 e2       	ldi	r24, 0x22	; 34
    b02e:	98 e2       	ldi	r25, 0x28	; 40
    b030:	66 e3       	ldi	r22, 0x36	; 54
    b032:	78 e2       	ldi	r23, 0x28	; 40
    b034:	ab 01       	movw	r20, r22
    b036:	24 ef       	ldi	r18, 0xF4	; 244
    b038:	31 e0       	ldi	r19, 0x01	; 1
    b03a:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b03e:	80 e1       	ldi	r24, 0x10	; 16
    b040:	97 e2       	ldi	r25, 0x27	; 39
    b042:	20 e7       	ldi	r18, 0x70	; 112
    b044:	31 e0       	ldi	r19, 0x01	; 1
    b046:	f9 01       	movw	r30, r18
    b048:	31 97       	sbiw	r30, 0x01	; 1
    b04a:	f1 f7       	brne	.-4      	; 0xb048 <Config_Wifi+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b04c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b04e:	d9 f7       	brne	.-10     	; 0xb046 <Config_Wifi+0xe0>
        _delay_ms(1000);


        Wifi_SendCommand("set wlan join 0","AOK","AOK",500);
    b050:	8a e3       	ldi	r24, 0x3A	; 58
    b052:	98 e2       	ldi	r25, 0x28	; 40
    b054:	66 e3       	ldi	r22, 0x36	; 54
    b056:	78 e2       	ldi	r23, 0x28	; 40
    b058:	ab 01       	movw	r20, r22
    b05a:	24 ef       	ldi	r18, 0xF4	; 244
    b05c:	31 e0       	ldi	r19, 0x01	; 1
    b05e:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b062:	80 e1       	ldi	r24, 0x10	; 16
    b064:	97 e2       	ldi	r25, 0x27	; 39
    b066:	20 e7       	ldi	r18, 0x70	; 112
    b068:	31 e0       	ldi	r19, 0x01	; 1
    b06a:	f9 01       	movw	r30, r18
    b06c:	31 97       	sbiw	r30, 0x01	; 1
    b06e:	f1 f7       	brne	.-4      	; 0xb06c <Config_Wifi+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b070:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b072:	d9 f7       	brne	.-10     	; 0xb06a <Config_Wifi+0x104>
        _delay_ms(1000);

        Wifi_SendCommand("set uart flow 1","AOK","AOK",500);
    b074:	8a e4       	ldi	r24, 0x4A	; 74
    b076:	98 e2       	ldi	r25, 0x28	; 40
    b078:	66 e3       	ldi	r22, 0x36	; 54
    b07a:	78 e2       	ldi	r23, 0x28	; 40
    b07c:	ab 01       	movw	r20, r22
    b07e:	24 ef       	ldi	r18, 0xF4	; 244
    b080:	31 e0       	ldi	r19, 0x01	; 1
    b082:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b086:	88 e8       	ldi	r24, 0x88	; 136
    b088:	93 e1       	ldi	r25, 0x13	; 19
    b08a:	20 e7       	ldi	r18, 0x70	; 112
    b08c:	31 e0       	ldi	r19, 0x01	; 1
    b08e:	f9 01       	movw	r30, r18
    b090:	31 97       	sbiw	r30, 0x01	; 1
    b092:	f1 f7       	brne	.-4      	; 0xb090 <Config_Wifi+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b094:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b096:	d9 f7       	brne	.-10     	; 0xb08e <Config_Wifi+0x128>
        _delay_ms(500);

        Wifi_SendCommand("set comm size 1420","AOK","AOK",500);
    b098:	8a e5       	ldi	r24, 0x5A	; 90
    b09a:	98 e2       	ldi	r25, 0x28	; 40
    b09c:	66 e3       	ldi	r22, 0x36	; 54
    b09e:	78 e2       	ldi	r23, 0x28	; 40
    b0a0:	ab 01       	movw	r20, r22
    b0a2:	24 ef       	ldi	r18, 0xF4	; 244
    b0a4:	31 e0       	ldi	r19, 0x01	; 1
    b0a6:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b0aa:	88 e8       	ldi	r24, 0x88	; 136
    b0ac:	93 e1       	ldi	r25, 0x13	; 19
    b0ae:	20 e7       	ldi	r18, 0x70	; 112
    b0b0:	31 e0       	ldi	r19, 0x01	; 1
    b0b2:	f9 01       	movw	r30, r18
    b0b4:	31 97       	sbiw	r30, 0x01	; 1
    b0b6:	f1 f7       	brne	.-4      	; 0xb0b4 <Config_Wifi+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b0b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b0ba:	d9 f7       	brne	.-10     	; 0xb0b2 <Config_Wifi+0x14c>
        _delay_ms(500);

        Wifi_SendCommand("set comm time 10","AOK","AOK",500);
    b0bc:	8d e6       	ldi	r24, 0x6D	; 109
    b0be:	98 e2       	ldi	r25, 0x28	; 40
    b0c0:	66 e3       	ldi	r22, 0x36	; 54
    b0c2:	78 e2       	ldi	r23, 0x28	; 40
    b0c4:	ab 01       	movw	r20, r22
    b0c6:	24 ef       	ldi	r18, 0xF4	; 244
    b0c8:	31 e0       	ldi	r19, 0x01	; 1
    b0ca:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b0ce:	88 e8       	ldi	r24, 0x88	; 136
    b0d0:	93 e1       	ldi	r25, 0x13	; 19
    b0d2:	20 e7       	ldi	r18, 0x70	; 112
    b0d4:	31 e0       	ldi	r19, 0x01	; 1
    b0d6:	f9 01       	movw	r30, r18
    b0d8:	31 97       	sbiw	r30, 0x01	; 1
    b0da:	f1 f7       	brne	.-4      	; 0xb0d8 <Config_Wifi+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b0dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b0de:	d9 f7       	brne	.-10     	; 0xb0d6 <Config_Wifi+0x170>
        _delay_ms(500);

        if(timeServerAttempts > 5){
    b0e0:	80 91 ad 34 	lds	r24, 0x34AD
    b0e4:	86 30       	cpi	r24, 0x06	; 6
    b0e6:	90 f0       	brcs	.+36     	; 0xb10c <Config_Wifi+0x1a6>
            Wifi_SendCommand("set time address 195.43.74.3","AOK","AOK",500);
    b0e8:	8e e7       	ldi	r24, 0x7E	; 126
    b0ea:	98 e2       	ldi	r25, 0x28	; 40
    b0ec:	66 e3       	ldi	r22, 0x36	; 54
    b0ee:	78 e2       	ldi	r23, 0x28	; 40
    b0f0:	ab 01       	movw	r20, r22
    b0f2:	24 ef       	ldi	r18, 0xF4	; 244
    b0f4:	31 e0       	ldi	r19, 0x01	; 1
    b0f6:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b0fa:	88 e8       	ldi	r24, 0x88	; 136
    b0fc:	93 e1       	ldi	r25, 0x13	; 19
    b0fe:	20 e7       	ldi	r18, 0x70	; 112
    b100:	31 e0       	ldi	r19, 0x01	; 1
    b102:	f9 01       	movw	r30, r18
    b104:	31 97       	sbiw	r30, 0x01	; 1
    b106:	f1 f7       	brne	.-4      	; 0xb104 <Config_Wifi+0x19e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b10a:	d9 f7       	brne	.-10     	; 0xb102 <Config_Wifi+0x19c>
            _delay_ms(500);
        } else if(timeServerAttempts > 25){
            Wifi_SendCommand("set time address 131.130.251.107","AOK","AOK",500);
            _delay_ms(500);
        }
        timeServerAttempts++;
    b10c:	80 91 ad 34 	lds	r24, 0x34AD
    b110:	8f 5f       	subi	r24, 0xFF	; 255
    b112:	80 93 ad 34 	sts	0x34AD, r24

	    Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    b116:	8b e9       	ldi	r24, 0x9B	; 155
    b118:	98 e2       	ldi	r25, 0x28	; 40
    b11a:	66 e3       	ldi	r22, 0x36	; 54
    b11c:	78 e2       	ldi	r23, 0x28	; 40
    b11e:	ab 01       	movw	r20, r22
    b120:	24 ef       	ldi	r18, 0xF4	; 244
    b122:	31 e0       	ldi	r19, 0x01	; 1
    b124:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b128:	88 e8       	ldi	r24, 0x88	; 136
    b12a:	93 e1       	ldi	r25, 0x13	; 19
    b12c:	20 e7       	ldi	r18, 0x70	; 112
    b12e:	31 e0       	ldi	r19, 0x01	; 1
    b130:	f9 01       	movw	r30, r18
    b132:	31 97       	sbiw	r30, 0x01	; 1
    b134:	f1 f7       	brne	.-4      	; 0xb132 <Config_Wifi+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b136:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b138:	d9 f7       	brne	.-10     	; 0xb130 <Config_Wifi+0x1ca>
	    _delay_ms(500);

        Wifi_SendCommand("set uart baud 460800","AOK","AOK",5);
    b13a:	8d ea       	ldi	r24, 0xAD	; 173
    b13c:	98 e2       	ldi	r25, 0x28	; 40
    b13e:	66 e3       	ldi	r22, 0x36	; 54
    b140:	78 e2       	ldi	r23, 0x28	; 40
    b142:	ab 01       	movw	r20, r22
    b144:	25 e0       	ldi	r18, 0x05	; 5
    b146:	30 e0       	ldi	r19, 0x00	; 0
    b148:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b14c:	80 e1       	ldi	r24, 0x10	; 16
    b14e:	97 e2       	ldi	r25, 0x27	; 39
    b150:	20 e7       	ldi	r18, 0x70	; 112
    b152:	31 e0       	ldi	r19, 0x01	; 1
    b154:	f9 01       	movw	r30, r18
    b156:	31 97       	sbiw	r30, 0x01	; 1
    b158:	f1 f7       	brne	.-4      	; 0xb156 <Config_Wifi+0x1f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b15c:	d9 f7       	brne	.-10     	; 0xb154 <Config_Wifi+0x1ee>
        _delay_ms(1000);

        Wifi_SendCommand("save","Storing in config","Storing in config",500);
    b15e:	82 ec       	ldi	r24, 0xC2	; 194
    b160:	98 e2       	ldi	r25, 0x28	; 40
    b162:	67 ec       	ldi	r22, 0xC7	; 199
    b164:	78 e2       	ldi	r23, 0x28	; 40
    b166:	ab 01       	movw	r20, r22
    b168:	24 ef       	ldi	r18, 0xF4	; 244
    b16a:	31 e0       	ldi	r19, 0x01	; 1
    b16c:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b170:	80 e1       	ldi	r24, 0x10	; 16
    b172:	97 e2       	ldi	r25, 0x27	; 39
    b174:	20 e7       	ldi	r18, 0x70	; 112
    b176:	31 e0       	ldi	r19, 0x01	; 1
    b178:	f9 01       	movw	r30, r18
    b17a:	31 97       	sbiw	r30, 0x01	; 1
    b17c:	f1 f7       	brne	.-4      	; 0xb17a <Config_Wifi+0x214>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b180:	d9 f7       	brne	.-10     	; 0xb178 <Config_Wifi+0x212>
        _delay_ms(1000);

        Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    b182:	89 ed       	ldi	r24, 0xD9	; 217
    b184:	98 e2       	ldi	r25, 0x28	; 40
    b186:	60 ee       	ldi	r22, 0xE0	; 224
    b188:	78 e2       	ldi	r23, 0x28	; 40
    b18a:	ab 01       	movw	r20, r22
    b18c:	24 ef       	ldi	r18, 0xF4	; 244
    b18e:	31 e0       	ldi	r19, 0x01	; 1
    b190:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b194:	80 e4       	ldi	r24, 0x40	; 64
    b196:	9c e9       	ldi	r25, 0x9C	; 156
    b198:	20 e7       	ldi	r18, 0x70	; 112
    b19a:	31 e0       	ldi	r19, 0x01	; 1
    b19c:	f9 01       	movw	r30, r18
    b19e:	31 97       	sbiw	r30, 0x01	; 1
    b1a0:	f1 f7       	brne	.-4      	; 0xb19e <Config_Wifi+0x238>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b1a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1a4:	d9 f7       	brne	.-10     	; 0xb19c <Config_Wifi+0x236>
        _delay_ms(4000);

        Wifi_Init(460800);
    b1a6:	60 e0       	ldi	r22, 0x00	; 0
    b1a8:	78 e0       	ldi	r23, 0x08	; 8
    b1aa:	87 e0       	ldi	r24, 0x07	; 7
    b1ac:	90 e0       	ldi	r25, 0x00	; 0
    b1ae:	0e 94 be 02 	call	0x57c	; 0x57c <Wifi_Init>
    b1b2:	80 e1       	ldi	r24, 0x10	; 16
    b1b4:	97 e2       	ldi	r25, 0x27	; 39
    b1b6:	20 e7       	ldi	r18, 0x70	; 112
    b1b8:	31 e0       	ldi	r19, 0x01	; 1
    b1ba:	f9 01       	movw	r30, r18
    b1bc:	31 97       	sbiw	r30, 0x01	; 1
    b1be:	f1 f7       	brne	.-4      	; 0xb1bc <Config_Wifi+0x256>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1c2:	d9 f7       	brne	.-10     	; 0xb1ba <Config_Wifi+0x254>
    b1c4:	12 e0       	ldi	r17, 0x02	; 2
    }


   Configure_Wifi:

    Wifi_EnterCMDMode(1000);
    b1c6:	88 ee       	ldi	r24, 0xE8	; 232
    b1c8:	93 e0       	ldi	r25, 0x03	; 3
    b1ca:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <Wifi_EnterCMDMode>
    b1ce:	80 e1       	ldi	r24, 0x10	; 16
    b1d0:	97 e2       	ldi	r25, 0x27	; 39
    b1d2:	20 e7       	ldi	r18, 0x70	; 112
    b1d4:	31 e0       	ldi	r19, 0x01	; 1
    b1d6:	f9 01       	movw	r30, r18
    b1d8:	31 97       	sbiw	r30, 0x01	; 1
    b1da:	f1 f7       	brne	.-4      	; 0xb1d8 <Config_Wifi+0x272>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b1dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1de:	d9 f7       	brne	.-10     	; 0xb1d6 <Config_Wifi+0x270>
    _delay_ms(1000);




	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    b1e0:	89 ee       	ldi	r24, 0xE9	; 233
    b1e2:	98 e2       	ldi	r25, 0x28	; 40
    b1e4:	66 e3       	ldi	r22, 0x36	; 54
    b1e6:	78 e2       	ldi	r23, 0x28	; 40
    b1e8:	ab 01       	movw	r20, r22
    b1ea:	24 ef       	ldi	r18, 0xF4	; 244
    b1ec:	31 e0       	ldi	r19, 0x01	; 1
    b1ee:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b1f2:	88 23       	and	r24, r24
    b1f4:	19 f0       	breq	.+6      	; 0xb1fc <Config_Wifi+0x296>
		display_putString("enable time....OK",col,0,System5x7);
    b1f6:	8b ef       	ldi	r24, 0xFB	; 251
    b1f8:	98 e2       	ldi	r25, 0x28	; 40
    b1fa:	02 c0       	rjmp	.+4      	; 0xb200 <Config_Wifi+0x29a>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    b1fc:	8d e0       	ldi	r24, 0x0D	; 13
    b1fe:	99 e2       	ldi	r25, 0x29	; 41
    b200:	61 2f       	mov	r22, r17
    b202:	40 e0       	ldi	r20, 0x00	; 0
    b204:	28 ea       	ldi	r18, 0xA8	; 168
    b206:	31 e3       	ldi	r19, 0x31	; 49
    b208:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	}
	display_writeBufferToScreen();
    b20c:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b210:	88 e8       	ldi	r24, 0x88	; 136
    b212:	93 e1       	ldi	r25, 0x13	; 19
    b214:	20 e7       	ldi	r18, 0x70	; 112
    b216:	31 e0       	ldi	r19, 0x01	; 1
    b218:	f9 01       	movw	r30, r18
    b21a:	31 97       	sbiw	r30, 0x01	; 1
    b21c:	f1 f7       	brne	.-4      	; 0xb21a <Config_Wifi+0x2b4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b220:	d9 f7       	brne	.-10     	; 0xb218 <Config_Wifi+0x2b2>
	_delay_ms(500);
	col++;
    b222:	1f 5f       	subi	r17, 0xFF	; 255
    if(authRead){
    b224:	80 91 61 34 	lds	r24, 0x3461
    b228:	88 23       	and	r24, r24
    b22a:	71 f1       	breq	.+92     	; 0xb288 <Config_Wifi+0x322>
        strcpy(temp,"set wlan auth ");
    b22c:	89 e1       	ldi	r24, 0x19	; 25
    b22e:	9b e4       	ldi	r25, 0x4B	; 75
    b230:	6f e1       	ldi	r22, 0x1F	; 31
    b232:	79 e2       	ldi	r23, 0x29	; 41
    b234:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
        strcat(temp,auth);
    b238:	89 e1       	ldi	r24, 0x19	; 25
    b23a:	9b e4       	ldi	r25, 0x4B	; 75
    b23c:	61 e0       	ldi	r22, 0x01	; 1
    b23e:	76 e4       	ldi	r23, 0x46	; 70
    b240:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
    	if(Wifi_SendCommand(temp,"AOK","AOK",500)){
    b244:	89 e1       	ldi	r24, 0x19	; 25
    b246:	9b e4       	ldi	r25, 0x4B	; 75
    b248:	66 e3       	ldi	r22, 0x36	; 54
    b24a:	78 e2       	ldi	r23, 0x28	; 40
    b24c:	ab 01       	movw	r20, r22
    b24e:	24 ef       	ldi	r18, 0xF4	; 244
    b250:	31 e0       	ldi	r19, 0x01	; 1
    b252:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b256:	88 23       	and	r24, r24
    b258:	19 f0       	breq	.+6      	; 0xb260 <Config_Wifi+0x2fa>
    		display_putString("encryption.....OK",col,0,System5x7);
    b25a:	8e e2       	ldi	r24, 0x2E	; 46
    b25c:	99 e2       	ldi	r25, 0x29	; 41
    b25e:	02 c0       	rjmp	.+4      	; 0xb264 <Config_Wifi+0x2fe>
    	} else {
    		display_putString("encryption...FAIL",col,0,System5x7);
    b260:	80 e4       	ldi	r24, 0x40	; 64
    b262:	99 e2       	ldi	r25, 0x29	; 41
    b264:	61 2f       	mov	r22, r17
    b266:	40 e0       	ldi	r20, 0x00	; 0
    b268:	28 ea       	ldi	r18, 0xA8	; 168
    b26a:	31 e3       	ldi	r19, 0x31	; 49
    b26c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
    	}
    	display_writeBufferToScreen();
    b270:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b274:	88 e8       	ldi	r24, 0x88	; 136
    b276:	93 e1       	ldi	r25, 0x13	; 19
    b278:	20 e7       	ldi	r18, 0x70	; 112
    b27a:	31 e0       	ldi	r19, 0x01	; 1
    b27c:	f9 01       	movw	r30, r18
    b27e:	31 97       	sbiw	r30, 0x01	; 1
    b280:	f1 f7       	brne	.-4      	; 0xb27e <Config_Wifi+0x318>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b284:	d9 f7       	brne	.-10     	; 0xb27c <Config_Wifi+0x316>
    	_delay_ms(500);
    	col++;
    b286:	1f 5f       	subi	r17, 0xFF	; 255
    }

    if(phraseRead){
    b288:	80 91 62 34 	lds	r24, 0x3462
    b28c:	88 23       	and	r24, r24
    b28e:	71 f1       	breq	.+92     	; 0xb2ec <Config_Wifi+0x386>
  	    strcpy(temp,"set wlan phrase ");
    b290:	89 e1       	ldi	r24, 0x19	; 25
    b292:	9b e4       	ldi	r25, 0x4B	; 75
    b294:	62 e5       	ldi	r22, 0x52	; 82
    b296:	79 e2       	ldi	r23, 0x29	; 41
    b298:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
     	strcat(temp,phrase);
    b29c:	89 e1       	ldi	r24, 0x19	; 25
    b29e:	9b e4       	ldi	r25, 0x4B	; 75
    b2a0:	63 ec       	ldi	r22, 0xC3	; 195
    b2a2:	7c e4       	ldi	r23, 0x4C	; 76
    b2a4:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
        if(Wifi_SendCommand(temp,"AOK","AOK",500)){
    b2a8:	89 e1       	ldi	r24, 0x19	; 25
    b2aa:	9b e4       	ldi	r25, 0x4B	; 75
    b2ac:	66 e3       	ldi	r22, 0x36	; 54
    b2ae:	78 e2       	ldi	r23, 0x28	; 40
    b2b0:	ab 01       	movw	r20, r22
    b2b2:	24 ef       	ldi	r18, 0xF4	; 244
    b2b4:	31 e0       	ldi	r19, 0x01	; 1
    b2b6:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b2ba:	88 23       	and	r24, r24
    b2bc:	19 f0       	breq	.+6      	; 0xb2c4 <Config_Wifi+0x35e>
     		display_putString("phrase.........OK",col,0,System5x7);
    b2be:	83 e6       	ldi	r24, 0x63	; 99
    b2c0:	99 e2       	ldi	r25, 0x29	; 41
    b2c2:	02 c0       	rjmp	.+4      	; 0xb2c8 <Config_Wifi+0x362>
     	} else {
     		display_putString("phrase.......FAIL",col,0,System5x7);
    b2c4:	85 e7       	ldi	r24, 0x75	; 117
    b2c6:	99 e2       	ldi	r25, 0x29	; 41
    b2c8:	61 2f       	mov	r22, r17
    b2ca:	40 e0       	ldi	r20, 0x00	; 0
    b2cc:	28 ea       	ldi	r18, 0xA8	; 168
    b2ce:	31 e3       	ldi	r19, 0x31	; 49
    b2d0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
     	}
     	display_writeBufferToScreen();
    b2d4:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b2d8:	88 e8       	ldi	r24, 0x88	; 136
    b2da:	93 e1       	ldi	r25, 0x13	; 19
    b2dc:	20 e7       	ldi	r18, 0x70	; 112
    b2de:	31 e0       	ldi	r19, 0x01	; 1
    b2e0:	f9 01       	movw	r30, r18
    b2e2:	31 97       	sbiw	r30, 0x01	; 1
    b2e4:	f1 f7       	brne	.-4      	; 0xb2e2 <Config_Wifi+0x37c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b2e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b2e8:	d9 f7       	brne	.-10     	; 0xb2e0 <Config_Wifi+0x37a>
    b2ea:	31 c0       	rjmp	.+98     	; 0xb34e <Config_Wifi+0x3e8>
     	_delay_ms(500);
     	col++;
    } else if(keyRead){
    b2ec:	80 91 63 34 	lds	r24, 0x3463
    b2f0:	88 23       	and	r24, r24
    b2f2:	71 f1       	breq	.+92     	; 0xb350 <Config_Wifi+0x3ea>
     	strcpy(temp,"set wlan key ");
    b2f4:	89 e1       	ldi	r24, 0x19	; 25
    b2f6:	9b e4       	ldi	r25, 0x4B	; 75
    b2f8:	67 e8       	ldi	r22, 0x87	; 135
    b2fa:	79 e2       	ldi	r23, 0x29	; 41
    b2fc:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
     	strcat(temp,key);
    b300:	89 e1       	ldi	r24, 0x19	; 25
    b302:	9b e4       	ldi	r25, 0x4B	; 75
    b304:	6e ef       	ldi	r22, 0xFE	; 254
    b306:	70 e5       	ldi	r23, 0x50	; 80
    b308:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
     	if(Wifi_SendCommand(temp,"AOK","AOK",500)){
    b30c:	89 e1       	ldi	r24, 0x19	; 25
    b30e:	9b e4       	ldi	r25, 0x4B	; 75
    b310:	66 e3       	ldi	r22, 0x36	; 54
    b312:	78 e2       	ldi	r23, 0x28	; 40
    b314:	ab 01       	movw	r20, r22
    b316:	24 ef       	ldi	r18, 0xF4	; 244
    b318:	31 e0       	ldi	r19, 0x01	; 1
    b31a:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b31e:	88 23       	and	r24, r24
    b320:	19 f0       	breq	.+6      	; 0xb328 <Config_Wifi+0x3c2>
     		display_putString("key............OK",col,0,System5x7);
    b322:	85 e9       	ldi	r24, 0x95	; 149
    b324:	99 e2       	ldi	r25, 0x29	; 41
    b326:	02 c0       	rjmp	.+4      	; 0xb32c <Config_Wifi+0x3c6>
     	} else {
     		display_putString("key..........FAIL",col,0,System5x7);
    b328:	87 ea       	ldi	r24, 0xA7	; 167
    b32a:	99 e2       	ldi	r25, 0x29	; 41
    b32c:	61 2f       	mov	r22, r17
    b32e:	40 e0       	ldi	r20, 0x00	; 0
    b330:	28 ea       	ldi	r18, 0xA8	; 168
    b332:	31 e3       	ldi	r19, 0x31	; 49
    b334:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
     	}
     	display_writeBufferToScreen();
    b338:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b33c:	88 e8       	ldi	r24, 0x88	; 136
    b33e:	93 e1       	ldi	r25, 0x13	; 19
    b340:	20 e7       	ldi	r18, 0x70	; 112
    b342:	31 e0       	ldi	r19, 0x01	; 1
    b344:	f9 01       	movw	r30, r18
    b346:	31 97       	sbiw	r30, 0x01	; 1
    b348:	f1 f7       	brne	.-4      	; 0xb346 <Config_Wifi+0x3e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b34a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b34c:	d9 f7       	brne	.-10     	; 0xb344 <Config_Wifi+0x3de>
     	_delay_ms(500);
     	col++;
    b34e:	1f 5f       	subi	r17, 0xFF	; 255
    }

    if(ssidRead){
    b350:	80 91 64 34 	lds	r24, 0x3464
    b354:	88 23       	and	r24, r24
    b356:	79 f1       	breq	.+94     	; 0xb3b6 <Config_Wifi+0x450>
     	strcpy(temp,"join ");
    b358:	89 e1       	ldi	r24, 0x19	; 25
    b35a:	9b e4       	ldi	r25, 0x4B	; 75
    b35c:	69 eb       	ldi	r22, 0xB9	; 185
    b35e:	79 e2       	ldi	r23, 0x29	; 41
    b360:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
     	strcat(temp,ssid);
    b364:	89 e1       	ldi	r24, 0x19	; 25
    b366:	9b e4       	ldi	r25, 0x4B	; 75
    b368:	66 e1       	ldi	r22, 0x16	; 22
    b36a:	79 e3       	ldi	r23, 0x39	; 57
    b36c:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
     	if(Wifi_SendCommand(temp,"DeAut","Auto-",2000)){
    b370:	89 e1       	ldi	r24, 0x19	; 25
    b372:	9b e4       	ldi	r25, 0x4B	; 75
    b374:	6f eb       	ldi	r22, 0xBF	; 191
    b376:	79 e2       	ldi	r23, 0x29	; 41
    b378:	45 ec       	ldi	r20, 0xC5	; 197
    b37a:	59 e2       	ldi	r21, 0x29	; 41
    b37c:	20 ed       	ldi	r18, 0xD0	; 208
    b37e:	37 e0       	ldi	r19, 0x07	; 7
    b380:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b384:	88 23       	and	r24, r24
    b386:	19 f0       	breq	.+6      	; 0xb38e <Config_Wifi+0x428>
     		display_putString("ssid...........OK",col,0,System5x7);
    b388:	8b ec       	ldi	r24, 0xCB	; 203
    b38a:	99 e2       	ldi	r25, 0x29	; 41
    b38c:	02 c0       	rjmp	.+4      	; 0xb392 <Config_Wifi+0x42c>
     	} else {
     		display_putString("ssid.........FAIL",col,0,System5x7);
    b38e:	8d ed       	ldi	r24, 0xDD	; 221
    b390:	99 e2       	ldi	r25, 0x29	; 41
    b392:	61 2f       	mov	r22, r17
    b394:	40 e0       	ldi	r20, 0x00	; 0
    b396:	28 ea       	ldi	r18, 0xA8	; 168
    b398:	31 e3       	ldi	r19, 0x31	; 49
    b39a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
     	}
     	display_writeBufferToScreen();
    b39e:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b3a2:	88 e9       	ldi	r24, 0x98	; 152
    b3a4:	9a e3       	ldi	r25, 0x3A	; 58
    b3a6:	20 e7       	ldi	r18, 0x70	; 112
    b3a8:	31 e0       	ldi	r19, 0x01	; 1
    b3aa:	f9 01       	movw	r30, r18
    b3ac:	31 97       	sbiw	r30, 0x01	; 1
    b3ae:	f1 f7       	brne	.-4      	; 0xb3ac <Config_Wifi+0x446>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3b2:	d9 f7       	brne	.-10     	; 0xb3aa <Config_Wifi+0x444>
     	_delay_ms(1500);
     	col++;
    b3b4:	1f 5f       	subi	r17, 0xFF	; 255
    }



	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    b3b6:	8f ee       	ldi	r24, 0xEF	; 239
    b3b8:	99 e2       	ldi	r25, 0x29	; 41
    b3ba:	68 ef       	ldi	r22, 0xF8	; 248
    b3bc:	79 e2       	ldi	r23, 0x29	; 41
    b3be:	ab 01       	movw	r20, r22
    b3c0:	24 ef       	ldi	r18, 0xF4	; 244
    b3c2:	31 e0       	ldi	r19, 0x01	; 1
    b3c4:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    b3c8:	88 e8       	ldi	r24, 0x88	; 136
    b3ca:	93 e1       	ldi	r25, 0x13	; 19
    b3cc:	20 e7       	ldi	r18, 0x70	; 112
    b3ce:	31 e0       	ldi	r19, 0x01	; 1
    b3d0:	f9 01       	movw	r30, r18
    b3d2:	31 97       	sbiw	r30, 0x01	; 1
    b3d4:	f1 f7       	brne	.-4      	; 0xb3d2 <Config_Wifi+0x46c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3d8:	d9 f7       	brne	.-10     	; 0xb3d0 <Config_Wifi+0x46a>
	_delay_ms(500);

	Wifi_GetMac(1000);
    b3da:	88 ee       	ldi	r24, 0xE8	; 232
    b3dc:	93 e0       	ldi	r25, 0x03	; 3
    b3de:	0e 94 8c 46 	call	0x8d18	; 0x8d18 <Wifi_GetMac>
    b3e2:	88 e8       	ldi	r24, 0x88	; 136
    b3e4:	93 e1       	ldi	r25, 0x13	; 19
    b3e6:	20 e7       	ldi	r18, 0x70	; 112
    b3e8:	31 e0       	ldi	r19, 0x01	; 1
    b3ea:	f9 01       	movw	r30, r18
    b3ec:	31 97       	sbiw	r30, 0x01	; 1
    b3ee:	f1 f7       	brne	.-4      	; 0xb3ec <Config_Wifi+0x486>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3f2:	d9 f7       	brne	.-10     	; 0xb3ea <Config_Wifi+0x484>
	_delay_ms(500);
	Wifi_ExitCMDMode(500);
    b3f4:	84 ef       	ldi	r24, 0xF4	; 244
    b3f6:	91 e0       	ldi	r25, 0x01	; 1
    b3f8:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>
    b3fc:	80 e1       	ldi	r24, 0x10	; 16
    b3fe:	97 e2       	ldi	r25, 0x27	; 39
    b400:	20 e7       	ldi	r18, 0x70	; 112
    b402:	31 e0       	ldi	r19, 0x01	; 1
    b404:	f9 01       	movw	r30, r18
    b406:	31 97       	sbiw	r30, 0x01	; 1
    b408:	f1 f7       	brne	.-4      	; 0xb406 <Config_Wifi+0x4a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b40a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b40c:	d9 f7       	brne	.-10     	; 0xb404 <Config_Wifi+0x49e>

	_delay_ms(1000);

	if(Wifi_Connected(1000)){
    b40e:	88 ee       	ldi	r24, 0xE8	; 232
    b410:	93 e0       	ldi	r25, 0x03	; 3
    b412:	0e 94 45 03 	call	0x68a	; 0x68a <Wifi_Connected>
    b416:	88 23       	and	r24, r24
    b418:	61 f0       	breq	.+24     	; 0xb432 <Config_Wifi+0x4cc>
		display_putString("network........OK",col,0,System5x7);
    b41a:	82 e0       	ldi	r24, 0x02	; 2
    b41c:	9a e2       	ldi	r25, 0x2A	; 42
    b41e:	61 2f       	mov	r22, r17
    b420:	40 e0       	ldi	r20, 0x00	; 0
    b422:	28 ea       	ldi	r18, 0xA8	; 168
    b424:	31 e3       	ldi	r19, 0x31	; 49
    b426:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		connected = true;
    b42a:	81 e0       	ldi	r24, 0x01	; 1
    b42c:	80 93 24 34 	sts	0x3424, r24
    b430:	0a c0       	rjmp	.+20     	; 0xb446 <Config_Wifi+0x4e0>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    b432:	84 e1       	ldi	r24, 0x14	; 20
    b434:	9a e2       	ldi	r25, 0x2A	; 42
    b436:	61 2f       	mov	r22, r17
    b438:	40 e0       	ldi	r20, 0x00	; 0
    b43a:	28 ea       	ldi	r18, 0xA8	; 168
    b43c:	31 e3       	ldi	r19, 0x31	; 49
    b43e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		connected = false;
    b442:	10 92 24 34 	sts	0x3424, r1
	}
	display_writeBufferToScreen();
    b446:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
	col++;
    b44a:	01 2f       	mov	r16, r17
    b44c:	0f 5f       	subi	r16, 0xFF	; 255

    Wifi_is_Connected:

	if(connected){
    b44e:	80 91 24 34 	lds	r24, 0x3424
    b452:	88 23       	and	r24, r24
    b454:	09 f4       	brne	.+2      	; 0xb458 <Config_Wifi+0x4f2>
    b456:	78 c0       	rjmp	.+240    	; 0xb548 <Config_Wifi+0x5e2>

	    Wifi_ExitCMDMode(500);
    b458:	84 ef       	ldi	r24, 0xF4	; 244
    b45a:	91 e0       	ldi	r25, 0x01	; 1
    b45c:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>
    b460:	80 e2       	ldi	r24, 0x20	; 32
    b462:	9e e4       	ldi	r25, 0x4E	; 78
    b464:	20 e7       	ldi	r18, 0x70	; 112
    b466:	31 e0       	ldi	r19, 0x01	; 1
    b468:	f9 01       	movw	r30, r18
    b46a:	31 97       	sbiw	r30, 0x01	; 1
    b46c:	f1 f7       	brne	.-4      	; 0xb46a <Config_Wifi+0x504>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b46e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b470:	d9 f7       	brne	.-10     	; 0xb468 <Config_Wifi+0x502>
		_delay_ms(2000);
		Wifi_EnterCMDMode(500);
    b472:	84 ef       	ldi	r24, 0xF4	; 244
    b474:	91 e0       	ldi	r25, 0x01	; 1
    b476:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    b47a:	88 ee       	ldi	r24, 0xE8	; 232
    b47c:	93 e0       	ldi	r25, 0x03	; 3
    b47e:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <Wifi_GetTime>
    b482:	88 23       	and	r24, r24
    b484:	09 f4       	brne	.+2      	; 0xb488 <Config_Wifi+0x522>
    b486:	42 c0       	rjmp	.+132    	; 0xb50c <Config_Wifi+0x5a6>
			Time_Set(time_secs);
    b488:	80 91 1c 34 	lds	r24, 0x341C
    b48c:	90 91 1d 34 	lds	r25, 0x341D
    b490:	a0 91 1e 34 	lds	r26, 0x341E
    b494:	b0 91 1f 34 	lds	r27, 0x341F
	
	
}

void Time_Set(uint32_t time){
  cli();
    b498:	f8 94       	cli
  UNIX_time = time;
    b49a:	80 93 36 34 	sts	0x3436, r24
    b49e:	90 93 37 34 	sts	0x3437, r25
    b4a2:	a0 93 38 34 	sts	0x3438, r26
    b4a6:	b0 93 39 34 	sts	0x3439, r27
  sei();
    b4aa:	78 94       	sei
		    timeIsValid = true;
    b4ac:	11 e0       	ldi	r17, 0x01	; 1
    b4ae:	10 93 81 34 	sts	0x3481, r17
			display_putString("internet.......OK",col,0,System5x7);
    b4b2:	86 e2       	ldi	r24, 0x26	; 38
    b4b4:	9a e2       	ldi	r25, 0x2A	; 42
    b4b6:	60 2f       	mov	r22, r16
    b4b8:	40 e0       	ldi	r20, 0x00	; 0
    b4ba:	28 ea       	ldi	r18, 0xA8	; 168
    b4bc:	31 e3       	ldi	r19, 0x31	; 49
    b4be:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
			signalStrength = Wifi_GetSignalStrength(1000);
    b4c2:	88 ee       	ldi	r24, 0xE8	; 232
    b4c4:	93 e0       	ldi	r25, 0x03	; 3
    b4c6:	0e 94 51 57 	call	0xaea2	; 0xaea2 <Wifi_GetSignalStrength>
    b4ca:	80 93 6b 34 	sts	0x346B, r24

	        Debug_SendString("Getting space remaining",true);
    b4ce:	88 e3       	ldi	r24, 0x38	; 56
    b4d0:	9a e2       	ldi	r25, 0x2A	; 42
    b4d2:	61 e0       	ldi	r22, 0x01	; 1
    b4d4:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
	        okToGetRemainingSpace = true;
    b4d8:	10 93 b7 4c 	sts	0x4CB7, r17
	        while(!okToGetRemainingSpace);
    b4dc:	80 91 b7 4c 	lds	r24, 0x4CB7
    b4e0:	88 23       	and	r24, r24
    b4e2:	e1 f3       	breq	.-8      	; 0xb4dc <Config_Wifi+0x576>
            if(!recording){
    b4e4:	80 91 3b 34 	lds	r24, 0x343B
    b4e8:	88 23       	and	r24, r24
    b4ea:	31 f4       	brne	.+12     	; 0xb4f8 <Config_Wifi+0x592>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b4ec:	e0 e2       	ldi	r30, 0x20	; 32
    b4ee:	f6 e0       	ldi	r31, 0x06	; 6
    b4f0:	80 e4       	ldi	r24, 0x40	; 64
    b4f2:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b4f4:	80 e8       	ldi	r24, 0x80	; 128
    b4f6:	86 83       	std	Z+6, r24	; 0x06
    b4f8:	80 e1       	ldi	r24, 0x10	; 16
    b4fa:	97 e2       	ldi	r25, 0x27	; 39
    b4fc:	20 e7       	ldi	r18, 0x70	; 112
    b4fe:	31 e0       	ldi	r19, 0x01	; 1
    b500:	f9 01       	movw	r30, r18
    b502:	31 97       	sbiw	r30, 0x01	; 1
    b504:	f1 f7       	brne	.-4      	; 0xb502 <Config_Wifi+0x59c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b506:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b508:	d9 f7       	brne	.-10     	; 0xb500 <Config_Wifi+0x59a>
    b50a:	30 c0       	rjmp	.+96     	; 0xb56c <Config_Wifi+0x606>




		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    b50c:	80 e5       	ldi	r24, 0x50	; 80
    b50e:	9a e2       	ldi	r25, 0x2A	; 42
    b510:	60 2f       	mov	r22, r16
    b512:	40 e0       	ldi	r20, 0x00	; 0
    b514:	28 ea       	ldi	r18, 0xA8	; 168
    b516:	31 e3       	ldi	r19, 0x31	; 49
    b518:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
            if(!recording){
    b51c:	80 91 3b 34 	lds	r24, 0x343B
    b520:	88 23       	and	r24, r24
    b522:	31 f4       	brne	.+12     	; 0xb530 <Config_Wifi+0x5ca>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b524:	e0 e2       	ldi	r30, 0x20	; 32
    b526:	f6 e0       	ldi	r31, 0x06	; 6
    b528:	80 e8       	ldi	r24, 0x80	; 128
    b52a:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b52c:	80 e4       	ldi	r24, 0x40	; 64
    b52e:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
            }
			connected = false;
    b530:	10 92 24 34 	sts	0x3424, r1
    b534:	88 e8       	ldi	r24, 0x88	; 136
    b536:	93 e1       	ldi	r25, 0x13	; 19
    b538:	20 e7       	ldi	r18, 0x70	; 112
    b53a:	31 e0       	ldi	r19, 0x01	; 1
    b53c:	f9 01       	movw	r30, r18
    b53e:	31 97       	sbiw	r30, 0x01	; 1
    b540:	f1 f7       	brne	.-4      	; 0xb53e <Config_Wifi+0x5d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b542:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b544:	d9 f7       	brne	.-10     	; 0xb53c <Config_Wifi+0x5d6>
    b546:	12 c0       	rjmp	.+36     	; 0xb56c <Config_Wifi+0x606>
		}



	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    b548:	80 e5       	ldi	r24, 0x50	; 80
    b54a:	9a e2       	ldi	r25, 0x2A	; 42
    b54c:	60 2f       	mov	r22, r16
    b54e:	40 e0       	ldi	r20, 0x00	; 0
    b550:	28 ea       	ldi	r18, 0xA8	; 168
    b552:	31 e3       	ldi	r19, 0x31	; 49
    b554:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
		display_writeBufferToScreen();
    b558:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
        if(!recording){
    b55c:	80 91 3b 34 	lds	r24, 0x343B
    b560:	88 23       	and	r24, r24
    b562:	21 f4       	brne	.+8      	; 0xb56c <Config_Wifi+0x606>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b564:	80 e8       	ldi	r24, 0x80	; 128
    b566:	e0 e2       	ldi	r30, 0x20	; 32
    b568:	f6 e0       	ldi	r31, 0x06	; 6
    b56a:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Set(wifi_Red);
        }
	}


}
    b56c:	1f 91       	pop	r17
    b56e:	0f 91       	pop	r16
    b570:	08 95       	ret

0000b572 <main>:


// ********************************** Main Program *********************************


int main(void){
    b572:	3f 92       	push	r3
    b574:	4f 92       	push	r4
    b576:	5f 92       	push	r5
    b578:	6f 92       	push	r6
    b57a:	7f 92       	push	r7
    b57c:	8f 92       	push	r8
    b57e:	9f 92       	push	r9
    b580:	af 92       	push	r10
    b582:	bf 92       	push	r11
    b584:	cf 92       	push	r12
    b586:	df 92       	push	r13
    b588:	ef 92       	push	r14
    b58a:	ff 92       	push	r15
    b58c:	0f 93       	push	r16
    b58e:	1f 93       	push	r17
    b590:	df 93       	push	r29
    b592:	cf 93       	push	r28
    b594:	0f 92       	push	r0
    b596:	cd b7       	in	r28, 0x3d	; 61
    b598:	de b7       	in	r29, 0x3e	; 62
    b59a:	80 e0       	ldi	r24, 0x00	; 0
    b59c:	98 e4       	ldi	r25, 0x48	; 72
    b59e:	01 97       	sbiw	r24, 0x01	; 1
    b5a0:	f1 f7       	brne	.-4      	; 0xb59e <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    b5a2:	0e 94 1e 3a 	call	0x743c	; 0x743c <Clock_Init>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    b5a6:	8f b7       	in	r24, 0x3f	; 63
    b5a8:	89 83       	std	Y+1, r24	; 0x01
    cli();
    b5aa:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    b5ac:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    b5ae:	21 e0       	ldi	r18, 0x01	; 1
    b5b0:	86 e9       	ldi	r24, 0x96	; 150
    b5b2:	90 e0       	ldi	r25, 0x00	; 0
    b5b4:	fc 01       	movw	r30, r24
    b5b6:	08 ed       	ldi	r16, 0xD8	; 216
    b5b8:	04 bf       	out	0x34, r16	; 52
    b5ba:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    b5bc:	89 81       	ldd	r24, Y+1	; 0x01
    b5be:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();
	getDeviceID();
    b5c0:	0e 94 1b 3b 	call	0x7636	; 0x7636 <getDeviceID>
	display_init();
    b5c4:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <display_init>

	Time_Init();
    b5c8:	0e 94 72 30 	call	0x60e4	; 0x60e4 <Time_Init>
	Sensors_Init();
    b5cc:	0e 94 b6 30 	call	0x616c	; 0x616c <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    b5d0:	80 91 21 06 	lds	r24, 0x0621
    b5d4:	83 6f       	ori	r24, 0xF3	; 243
    b5d6:	e0 e2       	ldi	r30, 0x20	; 32
    b5d8:	f6 e0       	ldi	r31, 0x06	; 6
    b5da:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    b5dc:	0e 94 5f 03 	call	0x6be	; 0x6be <Dpad_Init>


	Rs232_Init();
    b5e0:	0e 94 ab 03 	call	0x756	; 0x756 <Rs232_Init>

	Light_Init(LightAddress);
    b5e4:	82 e7       	ldi	r24, 0x72	; 114
    b5e6:	0e 94 2f 33 	call	0x665e	; 0x665e <Light_Init>


	Display_BackgroundWriter_Init();
    b5ea:	0e 94 9b 3a 	call	0x7536	; 0x7536 <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    b5ee:	0e 94 aa 3a 	call	0x7554	; 0x7554 <SD_BackroundWriter_Init>
	DMA_Init();
    b5f2:	0e 94 63 3a 	call	0x74c6	; 0x74c6 <DMA_Init>


	display_putString("   BaseStation   ",1,0,System5x7);
    b5f6:	82 e6       	ldi	r24, 0x62	; 98
    b5f8:	9a e2       	ldi	r25, 0x2A	; 42
    b5fa:	61 e0       	ldi	r22, 0x01	; 1
    b5fc:	40 e0       	ldi	r20, 0x00	; 0
    b5fe:	28 ea       	ldi	r18, 0xA8	; 168
    b600:	31 e3       	ldi	r19, 0x31	; 49
    b602:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	strcat(temp,"  Hardware: v");
    b606:	89 e1       	ldi	r24, 0x19	; 25
    b608:	9b e4       	ldi	r25, 0x4B	; 75
    b60a:	64 e7       	ldi	r22, 0x74	; 116
    b60c:	7a e2       	ldi	r23, 0x2A	; 42
    b60e:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	strcat(temp,HardwareVersion);
    b612:	89 e1       	ldi	r24, 0x19	; 25
    b614:	9b e4       	ldi	r25, 0x4B	; 75
    b616:	6e ec       	ldi	r22, 0xCE	; 206
    b618:	73 e2       	ldi	r23, 0x23	; 35
    b61a:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	display_putString(temp,3,0,System5x7);
    b61e:	89 e1       	ldi	r24, 0x19	; 25
    b620:	9b e4       	ldi	r25, 0x4B	; 75
    b622:	63 e0       	ldi	r22, 0x03	; 3
    b624:	40 e0       	ldi	r20, 0x00	; 0
    b626:	28 ea       	ldi	r18, 0xA8	; 168
    b628:	31 e3       	ldi	r19, 0x31	; 49
    b62a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	temp[0] = 0;
    b62e:	10 92 19 4b 	sts	0x4B19, r1
	strcat(temp," Firmware: v");
    b632:	89 e1       	ldi	r24, 0x19	; 25
    b634:	9b e4       	ldi	r25, 0x4B	; 75
    b636:	62 e8       	ldi	r22, 0x82	; 130
    b638:	7a e2       	ldi	r23, 0x2A	; 42
    b63a:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	strcat(temp,FirmwareVersion);
    b63e:	89 e1       	ldi	r24, 0x19	; 25
    b640:	9b e4       	ldi	r25, 0x4B	; 75
    b642:	68 eb       	ldi	r22, 0xB8	; 184
    b644:	73 e2       	ldi	r23, 0x23	; 35
    b646:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
	display_putString(temp,5,0,System5x7);
    b64a:	89 e1       	ldi	r24, 0x19	; 25
    b64c:	9b e4       	ldi	r25, 0x4B	; 75
    b64e:	65 e0       	ldi	r22, 0x05	; 5
    b650:	40 e0       	ldi	r20, 0x00	; 0
    b652:	28 ea       	ldi	r18, 0xA8	; 168
    b654:	31 e3       	ldi	r19, 0x31	; 49
    b656:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	display_writeBufferToScreen();
    b65a:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
    b65e:	80 e1       	ldi	r24, 0x10	; 16
    b660:	97 e2       	ldi	r25, 0x27	; 39
    b662:	20 e7       	ldi	r18, 0x70	; 112
    b664:	31 e0       	ldi	r19, 0x01	; 1
    b666:	f9 01       	movw	r30, r18
    b668:	31 97       	sbiw	r30, 0x01	; 1
    b66a:	f1 f7       	brne	.-4      	; 0xb668 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b66c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b66e:	d9 f7       	brne	.-10     	; 0xb666 <main+0xf4>
	_delay_ms(1000);


    SD_Init();
    b670:	0e 94 41 2c 	call	0x5882	; 0x5882 <SD_Init>

}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    b674:	80 91 a2 00 	lds	r24, 0x00A2
    b678:	87 60       	ori	r24, 0x07	; 7
    b67a:	e0 ea       	ldi	r30, 0xA0	; 160
    b67c:	f0 e0       	ldi	r31, 0x00	; 0
    b67e:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    b680:	78 94       	sei
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    b682:	a0 e2       	ldi	r26, 0x20	; 32
    b684:	b6 e0       	ldi	r27, 0x06	; 6
    b686:	42 e0       	ldi	r20, 0x02	; 2
    b688:	20 e7       	ldi	r18, 0x70	; 112
    b68a:	31 e0       	ldi	r19, 0x01	; 1
    b68c:	05 c0       	rjmp	.+10     	; 0xb698 <main+0x126>
    b68e:	f9 01       	movw	r30, r18
    b690:	31 97       	sbiw	r30, 0x01	; 1
    b692:	f1 f7       	brne	.-4      	; 0xb690 <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b694:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b696:	d9 f7       	brne	.-10     	; 0xb68e <main+0x11c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    b698:	80 91 a8 06 	lds	r24, 0x06A8
    b69c:	80 ff       	sbrs	r24, 0
    b69e:	ae c6       	rjmp	.+3420   	; 0xc3fc <main+0xe8a>
    b6a0:	17 96       	adiw	r26, 0x07	; 7
    b6a2:	4c 93       	st	X, r20
    b6a4:	17 97       	sbiw	r26, 0x07	; 7
    b6a6:	88 e8       	ldi	r24, 0x88	; 136
    b6a8:	93 e1       	ldi	r25, 0x13	; 19
    b6aa:	f1 cf       	rjmp	.-30     	; 0xb68e <main+0x11c>
    b6ac:	ca 01       	movw	r24, r20
    b6ae:	01 97       	sbiw	r24, 0x01	; 1
    b6b0:	f1 f7       	brne	.-4      	; 0xb6ae <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b6b2:	21 50       	subi	r18, 0x01	; 1
    b6b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b6b6:	d1 f7       	brne	.-12     	; 0xb6ac <main+0x13a>
	}
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);

	Read_config_file();
    b6b8:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <Read_config_file>

    if(demoMode){
    b6bc:	80 91 0e 34 	lds	r24, 0x340E
    b6c0:	88 23       	and	r24, r24
    b6c2:	19 f0       	breq	.+6      	; 0xb6ca <main+0x158>
		display_putString("    Demo Mode    ",7,0,System5x7);
    b6c4:	8f e8       	ldi	r24, 0x8F	; 143
    b6c6:	9a e2       	ldi	r25, 0x2A	; 42
    b6c8:	09 c0       	rjmp	.+18     	; 0xb6dc <main+0x16a>
	} else if(useWifiForUploading) {
    b6ca:	80 91 0f 34 	lds	r24, 0x340F
    b6ce:	88 23       	and	r24, r24
    b6d0:	19 f0       	breq	.+6      	; 0xb6d8 <main+0x166>
	    display_putString("  Uploader: Wifi ",7,0,System5x7);
    b6d2:	81 ea       	ldi	r24, 0xA1	; 161
    b6d4:	9a e2       	ldi	r25, 0x2A	; 42
    b6d6:	02 c0       	rjmp	.+4      	; 0xb6dc <main+0x16a>
	} else {
	    display_putString("  Uploader: USB  ",7,0,System5x7);
    b6d8:	83 eb       	ldi	r24, 0xB3	; 179
    b6da:	9a e2       	ldi	r25, 0x2A	; 42
    b6dc:	67 e0       	ldi	r22, 0x07	; 7
    b6de:	40 e0       	ldi	r20, 0x00	; 0
    b6e0:	28 ea       	ldi	r18, 0xA8	; 168
    b6e2:	31 e3       	ldi	r19, 0x31	; 49
    b6e4:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <display_putString>
	}
    display_writeBufferToScreen();
    b6e8:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

    if(useWifiForUploading){
    b6ec:	80 91 0f 34 	lds	r24, 0x340F
    b6f0:	88 23       	and	r24, r24
    b6f2:	29 f0       	breq	.+10     	; 0xb6fe <main+0x18c>
	   Debug_Init(9600);
    b6f4:	60 e8       	ldi	r22, 0x80	; 128
    b6f6:	75 e2       	ldi	r23, 0x25	; 37
    b6f8:	80 e0       	ldi	r24, 0x00	; 0
    b6fa:	90 e0       	ldi	r25, 0x00	; 0
    b6fc:	04 c0       	rjmp	.+8      	; 0xb706 <main+0x194>
	} else {
	   Debug_Init(460800);
    b6fe:	60 e0       	ldi	r22, 0x00	; 0
    b700:	78 e0       	ldi	r23, 0x08	; 8
    b702:	87 e0       	ldi	r24, 0x07	; 7
    b704:	90 e0       	ldi	r25, 0x00	; 0
    b706:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	}


    if(demoMode){                                   // go into demo mode
    b70a:	80 91 0e 34 	lds	r24, 0x340E
    b70e:	88 23       	and	r24, r24
    b710:	91 f0       	breq	.+36     	; 0xb736 <main+0x1c4>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b712:	80 e4       	ldi	r24, 0x40	; 64
    b714:	e0 e2       	ldi	r30, 0x20	; 32
    b716:	f6 e0       	ldi	r31, 0x06	; 6
    b718:	85 83       	std	Z+5, r24	; 0x05
		Leds_Set(wifi_Green);
        display_clearBuffer();
    b71a:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
	    display_writeBufferToScreen();
    b71e:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>
	    okToDisplayGUI = true;
    b722:	81 e0       	ldi	r24, 0x01	; 1
    b724:	80 93 72 34 	sts	0x3472, r24
        okToOpenLogFile = true;
    b728:	80 93 6f 34 	sts	0x346F, r24
	    while(!recording);
    b72c:	80 91 3b 34 	lds	r24, 0x343B
    b730:	88 23       	and	r24, r24
    b732:	e1 f3       	breq	.-8      	; 0xb72c <main+0x1ba>
    b734:	ff cf       	rjmp	.-2      	; 0xb734 <main+0x1c2>
    b736:	80 e8       	ldi	r24, 0x80	; 128
    b738:	e0 e2       	ldi	r30, 0x20	; 32
    b73a:	f6 e0       	ldi	r31, 0x06	; 6
    b73c:	85 83       	std	Z+5, r24	; 0x05
    b73e:	90 e7       	ldi	r25, 0x70	; 112
    b740:	69 2e       	mov	r6, r25
    b742:	91 e0       	ldi	r25, 0x01	; 1
    b744:	79 2e       	mov	r7, r25
                numberOfPacketsToUpload = uploadFileSize /  1000;
                leftOverBytesToUpload   = uploadFileSize %  1000;


                Debug_SendString("File Opened!", true);
                sprintf(temp,"File Size: %lu",uploadFileSize);
    b746:	89 e1       	ldi	r24, 0x19	; 25
    b748:	48 2e       	mov	r4, r24
    b74a:	8b e4       	ldi	r24, 0x4B	; 75
    b74c:	58 2e       	mov	r5, r24
	} else {
	    Leds_Set(wifi_Red);
	}

    Reset:
    okToFindFileToUpload = false;
    b74e:	10 92 73 34 	sts	0x3473, r1
    connected = false;
    b752:	10 92 24 34 	sts	0x3424, r1
    if(useWifiForUploading){                // connect to uploader  (wifi)
    b756:	80 91 0f 34 	lds	r24, 0x340F
    b75a:	88 23       	and	r24, r24
    b75c:	d9 f0       	breq	.+54     	; 0xb794 <main+0x222>
        okToDisplayGUI = false;
    b75e:	10 92 72 34 	sts	0x3472, r1
        Wifi_Init(9600);
    b762:	60 e8       	ldi	r22, 0x80	; 128
    b764:	75 e2       	ldi	r23, 0x25	; 37
    b766:	80 e0       	ldi	r24, 0x00	; 0
    b768:	90 e0       	ldi	r25, 0x00	; 0
    b76a:	0e 94 be 02 	call	0x57c	; 0x57c <Wifi_Init>
    b76e:	09 c0       	rjmp	.+18     	; 0xb782 <main+0x210>
        while(!connected && !demoMode){
            Config_Wifi();
    b770:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <Config_Wifi>
    b774:	88 e8       	ldi	r24, 0x88	; 136
    b776:	93 e1       	ldi	r25, 0x13	; 19
    b778:	f3 01       	movw	r30, r6
    b77a:	31 97       	sbiw	r30, 0x01	; 1
    b77c:	f1 f7       	brne	.-4      	; 0xb77a <main+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b77e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b780:	d9 f7       	brne	.-10     	; 0xb778 <main+0x206>
    okToFindFileToUpload = false;
    connected = false;
    if(useWifiForUploading){                // connect to uploader  (wifi)
        okToDisplayGUI = false;
        Wifi_Init(9600);
        while(!connected && !demoMode){
    b782:	80 91 24 34 	lds	r24, 0x3424
    b786:	88 23       	and	r24, r24
    b788:	a1 f4       	brne	.+40     	; 0xb7b2 <main+0x240>
    b78a:	80 91 0e 34 	lds	r24, 0x340E
    b78e:	88 23       	and	r24, r24
    b790:	79 f3       	breq	.-34     	; 0xb770 <main+0x1fe>
    b792:	0f c0       	rjmp	.+30     	; 0xb7b2 <main+0x240>
            Config_Wifi();
       	    _delay_ms(500);
        }
    } else {                                // usb uploader
        connectToComputer();
    b794:	0e 94 77 42 	call	0x84ee	; 0x84ee <connectToComputer>
    b798:	88 e8       	ldi	r24, 0x88	; 136
    b79a:	93 e1       	ldi	r25, 0x13	; 19
    b79c:	f3 01       	movw	r30, r6
    b79e:	31 97       	sbiw	r30, 0x01	; 1
    b7a0:	f1 f7       	brne	.-4      	; 0xb79e <main+0x22c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b7a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b7a4:	d9 f7       	brne	.-10     	; 0xb79c <main+0x22a>
       	_delay_ms(500);
       	connected = true;
    b7a6:	81 e0       	ldi	r24, 0x01	; 1
    b7a8:	80 93 24 34 	sts	0x3424, r24
        signalStrength = 100;
    b7ac:	84 e6       	ldi	r24, 0x64	; 100
    b7ae:	80 93 6b 34 	sts	0x346B, r24
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b7b2:	e0 e2       	ldi	r30, 0x20	; 32
    b7b4:	f6 e0       	ldi	r31, 0x06	; 6
    b7b6:	80 e8       	ldi	r24, 0x80	; 128
    b7b8:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b7ba:	80 e4       	ldi	r24, 0x40	; 64
    b7bc:	85 83       	std	Z+5, r24	; 0x05
    //Debug_To_Wifi();

  	Leds_Clear(wifi_Red);
	Leds_Set(wifi_Green);

	display_clearBuffer();
    b7be:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <display_clearBuffer>
	display_writeBufferToScreen();
    b7c2:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <display_writeBufferToScreen>

    okToDisplayGUI = true;
    b7c6:	91 e0       	ldi	r25, 0x01	; 1
    b7c8:	90 93 72 34 	sts	0x3472, r25

    if((!recording) && (!uploadTimedOut) && useWifiForUploading){
    b7cc:	80 91 3b 34 	lds	r24, 0x343B
    b7d0:	88 23       	and	r24, r24
    b7d2:	79 f4       	brne	.+30     	; 0xb7f2 <main+0x280>
    b7d4:	80 91 2a 34 	lds	r24, 0x342A
    b7d8:	88 23       	and	r24, r24
    b7da:	59 f4       	brne	.+22     	; 0xb7f2 <main+0x280>
    b7dc:	80 91 0f 34 	lds	r24, 0x340F
    b7e0:	88 23       	and	r24, r24
    b7e2:	39 f0       	breq	.+14     	; 0xb7f2 <main+0x280>
	    okToOpenLogFile = true;
    b7e4:	90 93 6f 34 	sts	0x346F, r25
	    while(!recording);
    b7e8:	80 91 3b 34 	lds	r24, 0x343B
    b7ec:	88 23       	and	r24, r24
    b7ee:	e1 f3       	breq	.-8      	; 0xb7e8 <main+0x276>
    b7f0:	06 c0       	rjmp	.+12     	; 0xb7fe <main+0x28c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b7f2:	e0 e2       	ldi	r30, 0x20	; 32
    b7f4:	f6 e0       	ldi	r31, 0x06	; 6
    b7f6:	80 e4       	ldi	r24, 0x40	; 64
    b7f8:	86 83       	std	Z+6, r24	; 0x06
    b7fa:	80 e8       	ldi	r24, 0x80	; 128
    b7fc:	86 83       	std	Z+6, r24	; 0x06
    b7fe:	88 ee       	ldi	r24, 0xE8	; 232
    b800:	93 e0       	ldi	r25, 0x03	; 3
    b802:	f3 01       	movw	r30, r6
    b804:	31 97       	sbiw	r30, 0x01	; 1
    b806:	f1 f7       	brne	.-4      	; 0xb804 <main+0x292>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b808:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b80a:	d9 f7       	brne	.-10     	; 0xb802 <main+0x290>
	    Leds_Clear(wifi_Red);
	}

	_delay_ms(100);

	okToReopenDirectory = true;
    b80c:	81 e0       	ldi	r24, 0x01	; 1
    b80e:	80 93 74 34 	sts	0x3474, r24
	okToFindFileToUpload = true;
    b812:	80 93 73 34 	sts	0x3473, r24

    Main:

    while(true){
        if(!useWifiForUploading){
    b816:	80 91 0f 34 	lds	r24, 0x340F
    b81a:	88 23       	and	r24, r24
    b81c:	09 f0       	breq	.+2      	; 0xb820 <main+0x2ae>
    b81e:	9e c0       	rjmp	.+316    	; 0xb95c <main+0x3ea>
            if(Debug_CharReadyToRead()){
    b820:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_CharReadyToRead>
    b824:	88 23       	and	r24, r24
    b826:	09 f4       	brne	.+2      	; 0xb82a <main+0x2b8>
    b828:	83 c0       	rjmp	.+262    	; 0xb930 <main+0x3be>

			    timeOutCounter = 0;
    b82a:	10 92 28 34 	sts	0x3428, r1
    b82e:	10 92 29 34 	sts	0x3429, r1
			    command[0] = Debug_GetByte(false);
    b832:	80 e0       	ldi	r24, 0x00	; 0
    b834:	0e 94 ba 01 	call	0x374	; 0x374 <Debug_GetByte>
    b838:	80 93 eb 46 	sts	0x46EB, r24

                if(command[0] == 'T'){                          // supply the time
    b83c:	80 91 eb 46 	lds	r24, 0x46EB
    b840:	84 35       	cpi	r24, 0x54	; 84
    b842:	c1 f4       	brne	.+48     	; 0xb874 <main+0x302>
            	    if(getTime()){
    b844:	0e 94 98 3b 	call	0x7730	; 0x7730 <getTime>
    b848:	88 23       	and	r24, r24
    b84a:	89 f0       	breq	.+34     	; 0xb86e <main+0x2fc>
            	        timeIsValid = true;
    b84c:	91 e0       	ldi	r25, 0x01	; 1
    b84e:	90 93 81 34 	sts	0x3481, r25
                        okToDisplayGUI = true;
    b852:	90 93 72 34 	sts	0x3472, r25
            		    if(!recording){
    b856:	80 91 3b 34 	lds	r24, 0x343B
    b85a:	88 23       	and	r24, r24
    b85c:	09 f0       	breq	.+2      	; 0xb860 <main+0x2ee>
    b85e:	68 c0       	rjmp	.+208    	; 0xb930 <main+0x3be>
            		        okToOpenLogFile = true;
    b860:	90 93 6f 34 	sts	0x346F, r25
            	            while(!recording);
    b864:	80 91 3b 34 	lds	r24, 0x343B
    b868:	88 23       	and	r24, r24
    b86a:	e1 f3       	breq	.-8      	; 0xb864 <main+0x2f2>
    b86c:	61 c0       	rjmp	.+194    	; 0xb930 <main+0x3be>
                        }
            	    } else {
                        timeIsValid = false;
    b86e:	10 92 81 34 	sts	0x3481, r1
    b872:	6d cf       	rjmp	.-294    	; 0xb74e <main+0x1dc>
                        goto Reset;
			        }
    			} else if(command[0] == 'S'){                          // request SSID
    b874:	80 91 eb 46 	lds	r24, 0x46EB
    b878:	83 35       	cpi	r24, 0x53	; 83
    b87a:	19 f4       	brne	.+6      	; 0xb882 <main+0x310>
                    sendSSID();
    b87c:	0e 94 ad 44 	call	0x895a	; 0x895a <sendSSID>
    b880:	57 c0       	rjmp	.+174    	; 0xb930 <main+0x3be>
		        } else if(command[0] == 'A'){                          // request authorization type
    b882:	80 91 eb 46 	lds	r24, 0x46EB
    b886:	81 34       	cpi	r24, 0x41	; 65
    b888:	19 f4       	brne	.+6      	; 0xb890 <main+0x31e>
                    sendAuthType();
    b88a:	0e 94 6a 44 	call	0x88d4	; 0x88d4 <sendAuthType>
    b88e:	50 c0       	rjmp	.+160    	; 0xb930 <main+0x3be>
    			} else if(command[0] == 'K'){                          // request authorisation key
    b890:	80 91 eb 46 	lds	r24, 0x46EB
    b894:	8b 34       	cpi	r24, 0x4B	; 75
    b896:	19 f4       	brne	.+6      	; 0xb89e <main+0x32c>
                    sendKey();
    b898:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <sendKey>
    b89c:	49 c0       	rjmp	.+146    	; 0xb930 <main+0x3be>
                } else if(command[0] == 'U'){                          // request user
    b89e:	80 91 eb 46 	lds	r24, 0x46EB
    b8a2:	85 35       	cpi	r24, 0x55	; 85
    b8a4:	19 f4       	brne	.+6      	; 0xb8ac <main+0x33a>
			        sendUser();
    b8a6:	0e 94 d0 43 	call	0x87a0	; 0x87a0 <sendUser>
    b8aa:	42 c0       	rjmp	.+132    	; 0xb930 <main+0x3be>
    			} else if(command[0] == 'N'){                           // request nickname
    b8ac:	80 91 eb 46 	lds	r24, 0x46EB
    b8b0:	8e 34       	cpi	r24, 0x4E	; 78
    b8b2:	19 f4       	brne	.+6      	; 0xb8ba <main+0x348>
	    		    sendNickname();
    b8b4:	0e 94 a5 43 	call	0x874a	; 0x874a <sendNickname>
    b8b8:	3b c0       	rjmp	.+118    	; 0xb930 <main+0x3be>
	    		} else if(command[0] == 'F'){                           // request filename
    b8ba:	80 91 eb 46 	lds	r24, 0x46EB
    b8be:	86 34       	cpi	r24, 0x46	; 70
    b8c0:	19 f4       	brne	.+6      	; 0xb8c8 <main+0x356>
	    		    sendFilename();
    b8c2:	0e 94 84 43 	call	0x8708	; 0x8708 <sendFilename>
    b8c6:	34 c0       	rjmp	.+104    	; 0xb930 <main+0x3be>
    			} else if(command[0] == 'D'){                           // request data from file
    b8c8:	80 91 eb 46 	lds	r24, 0x46EB
    b8cc:	84 34       	cpi	r24, 0x44	; 68
    b8ce:	19 f4       	brne	.+6      	; 0xb8d6 <main+0x364>
    			    if(!uploadFile()){
    b8d0:	0e 94 07 3c 	call	0x780e	; 0x780e <uploadFile>
    b8d4:	06 c0       	rjmp	.+12     	; 0xb8e2 <main+0x370>
    			        goto Reset;
    			    }
                } else if(command[0] == 'E'){                   // erase file
    b8d6:	80 91 eb 46 	lds	r24, 0x46EB
    b8da:	85 34       	cpi	r24, 0x45	; 69
    b8dc:	29 f4       	brne	.+10     	; 0xb8e8 <main+0x376>
                    if(!eraseFile()){
    b8de:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <eraseFile>
    b8e2:	88 23       	and	r24, r24
    b8e4:	29 f5       	brne	.+74     	; 0xb930 <main+0x3be>
    b8e6:	33 cf       	rjmp	.-410    	; 0xb74e <main+0x1dc>
                       goto Reset;
                    }
                } else if(command[0] == 'V'){                   // request server for post
    b8e8:	80 91 eb 46 	lds	r24, 0x46EB
    b8ec:	86 35       	cpi	r24, 0x56	; 86
    b8ee:	19 f4       	brne	.+6      	; 0xb8f6 <main+0x384>
                    sendServer();
    b8f0:	0e 94 59 43 	call	0x86b2	; 0x86b2 <sendServer>
    b8f4:	1d c0       	rjmp	.+58     	; 0xb930 <main+0x3be>
                } else if(command[0] == 'O'){                   // request port for post
    b8f6:	80 91 eb 46 	lds	r24, 0x46EB
    b8fa:	8f 34       	cpi	r24, 0x4F	; 79
    b8fc:	19 f4       	brne	.+6      	; 0xb904 <main+0x392>
                    sendPort();
    b8fe:	0e 94 2e 43 	call	0x865c	; 0x865c <sendPort>
    b902:	16 c0       	rjmp	.+44     	; 0xb930 <main+0x3be>
    			}  else if(command[0] == 'R'){                   // reset
    b904:	80 91 eb 46 	lds	r24, 0x46EB
    b908:	82 35       	cpi	r24, 0x52	; 82
    b90a:	91 f4       	brne	.+36     	; 0xb930 <main+0x3be>
    b90c:	80 e0       	ldi	r24, 0x00	; 0
    b90e:	98 e4       	ldi	r25, 0x48	; 72
    b910:	01 97       	sbiw	r24, 0x01	; 1
    b912:	f1 f7       	brne	.-4      	; 0xb910 <main+0x39e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    b914:	80 91 a1 08 	lds	r24, 0x08A1
    b918:	85 ff       	sbrs	r24, 5
    b91a:	fc cf       	rjmp	.-8      	; 0xb914 <main+0x3a2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    b91c:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    b920:	82 e5       	ldi	r24, 0x52	; 82
    b922:	80 93 a0 08 	sts	0x08A0, r24
    b926:	80 e4       	ldi	r24, 0x40	; 64
    b928:	e0 e2       	ldi	r30, 0x20	; 32
    b92a:	f6 e0       	ldi	r31, 0x06	; 6
    b92c:	86 83       	std	Z+6, r24	; 0x06
    b92e:	0f cf       	rjmp	.-482    	; 0xb74e <main+0x1dc>
    b930:	86 e6       	ldi	r24, 0x66	; 102
    b932:	9e e0       	ldi	r25, 0x0E	; 14
    b934:	01 97       	sbiw	r24, 0x01	; 1
    b936:	f1 f7       	brne	.-4      	; 0xb934 <main+0x3c2>
		    		Leds_Clear(wifi_Green);
			    	goto Reset;
			    }
		    }
		    _delay_ms(1);
		    timeOutCounter++;
    b938:	80 91 28 34 	lds	r24, 0x3428
    b93c:	90 91 29 34 	lds	r25, 0x3429
    b940:	01 96       	adiw	r24, 0x01	; 1
    b942:	80 93 28 34 	sts	0x3428, r24
    b946:	90 93 29 34 	sts	0x3429, r25
		    if(timeOutCounter > 30000){
    b94a:	80 91 28 34 	lds	r24, 0x3428
    b94e:	90 91 29 34 	lds	r25, 0x3429
    b952:	81 53       	subi	r24, 0x31	; 49
    b954:	95 47       	sbci	r25, 0x75	; 117
    b956:	08 f4       	brcc	.+2      	; 0xb95a <main+0x3e8>
    b958:	5e cf       	rjmp	.-324    	; 0xb816 <main+0x2a4>
    b95a:	f9 ce       	rjmp	.-526    	; 0xb74e <main+0x1dc>
			    goto Reset;
		    }
        } else {
    	    if(ssRefreshCounter > 9000){
    b95c:	80 91 69 34 	lds	r24, 0x3469
    b960:	90 91 6a 34 	lds	r25, 0x346A
    b964:	89 52       	subi	r24, 0x29	; 41
    b966:	93 42       	sbci	r25, 0x23	; 35
    b968:	08 f4       	brcc	.+2      	; 0xb96c <main+0x3fa>
    b96a:	45 c0       	rjmp	.+138    	; 0xb9f6 <main+0x484>
	            okToGetRemainingSpace = true;
    b96c:	81 e0       	ldi	r24, 0x01	; 1
    b96e:	80 93 b7 4c 	sts	0x4CB7, r24
	            while(!okToGetRemainingSpace);
    b972:	80 91 b7 4c 	lds	r24, 0x4CB7
    b976:	88 23       	and	r24, r24
    b978:	e1 f3       	breq	.-8      	; 0xb972 <main+0x400>

                Wifi_EnterCMDMode(1000);
    b97a:	88 ee       	ldi	r24, 0xE8	; 232
    b97c:	93 e0       	ldi	r25, 0x03	; 3
    b97e:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <Wifi_EnterCMDMode>
                signalStrength = Wifi_GetSignalStrength(1000);
    b982:	88 ee       	ldi	r24, 0xE8	; 232
    b984:	93 e0       	ldi	r25, 0x03	; 3
    b986:	0e 94 51 57 	call	0xaea2	; 0xaea2 <Wifi_GetSignalStrength>
    b98a:	80 93 6b 34 	sts	0x346B, r24
                if(Wifi_Connected(500)){
    b98e:	84 ef       	ldi	r24, 0xF4	; 244
    b990:	91 e0       	ldi	r25, 0x01	; 1
    b992:	0e 94 45 03 	call	0x68a	; 0x68a <Wifi_Connected>
    b996:	88 23       	and	r24, r24
    b998:	31 f1       	breq	.+76     	; 0xb9e6 <main+0x474>
    b99a:	88 e8       	ldi	r24, 0x88	; 136
    b99c:	93 e1       	ldi	r25, 0x13	; 19
    b99e:	f3 01       	movw	r30, r6
    b9a0:	31 97       	sbiw	r30, 0x01	; 1
    b9a2:	f1 f7       	brne	.-4      	; 0xb9a0 <main+0x42e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b9a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b9a6:	d9 f7       	brne	.-10     	; 0xb99e <main+0x42c>
                    _delay_ms(500);
                    if(Wifi_GetTime(500)){
    b9a8:	84 ef       	ldi	r24, 0xF4	; 244
    b9aa:	91 e0       	ldi	r25, 0x01	; 1
    b9ac:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <Wifi_GetTime>
    b9b0:	88 23       	and	r24, r24
    b9b2:	91 f0       	breq	.+36     	; 0xb9d8 <main+0x466>
                        Time_Set(time_secs);
    b9b4:	80 91 1c 34 	lds	r24, 0x341C
    b9b8:	90 91 1d 34 	lds	r25, 0x341D
    b9bc:	a0 91 1e 34 	lds	r26, 0x341E
    b9c0:	b0 91 1f 34 	lds	r27, 0x341F
	
	
}

void Time_Set(uint32_t time){
  cli();
    b9c4:	f8 94       	cli
  UNIX_time = time;
    b9c6:	80 93 36 34 	sts	0x3436, r24
    b9ca:	90 93 37 34 	sts	0x3437, r25
    b9ce:	a0 93 38 34 	sts	0x3438, r26
    b9d2:	b0 93 39 34 	sts	0x3439, r27
  sei();
    b9d6:	78 94       	sei
    b9d8:	88 e8       	ldi	r24, 0x88	; 136
    b9da:	93 e1       	ldi	r25, 0x13	; 19
    b9dc:	f3 01       	movw	r30, r6
    b9de:	31 97       	sbiw	r30, 0x01	; 1
    b9e0:	f1 f7       	brne	.-4      	; 0xb9de <main+0x46c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b9e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b9e4:	d9 f7       	brne	.-10     	; 0xb9dc <main+0x46a>
                    }
                    _delay_ms(500);
                }
                Wifi_ExitCMDMode(500);
    b9e6:	84 ef       	ldi	r24, 0xF4	; 244
    b9e8:	91 e0       	ldi	r25, 0x01	; 1
    b9ea:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>

		        ssRefreshCounter = 0;
    b9ee:	10 92 69 34 	sts	0x3469, r1
    b9f2:	10 92 6a 34 	sts	0x346A, r1
	        }

            if(okToUpload && Wifi_Connected(500)){
    b9f6:	80 91 7a 34 	lds	r24, 0x347A
    b9fa:	88 23       	and	r24, r24
    b9fc:	09 f4       	brne	.+2      	; 0xba00 <main+0x48e>
    b9fe:	0b cf       	rjmp	.-490    	; 0xb816 <main+0x2a4>
    ba00:	84 ef       	ldi	r24, 0xF4	; 244
    ba02:	91 e0       	ldi	r25, 0x01	; 1
    ba04:	0e 94 45 03 	call	0x68a	; 0x68a <Wifi_Connected>
    ba08:	88 23       	and	r24, r24
    ba0a:	09 f4       	brne	.+2      	; 0xba0e <main+0x49c>
    ba0c:	04 cf       	rjmp	.-504    	; 0xb816 <main+0x2a4>
                uploading = true;
    ba0e:	81 e0       	ldi	r24, 0x01	; 1
    ba10:	80 93 7b 34 	sts	0x347B, r24
                if(fileToUpload[0] != '/'){
    ba14:	80 91 38 3d 	lds	r24, 0x3D38
    ba18:	8f 32       	cpi	r24, 0x2F	; 47
    ba1a:	91 f0       	breq	.+36     	; 0xba40 <main+0x4ce>
			        strcpy(newFileName, "/");
    ba1c:	81 e2       	ldi	r24, 0x21	; 33
    ba1e:	99 e5       	ldi	r25, 0x59	; 89
    ba20:	6a eb       	ldi	r22, 0xBA	; 186
    ba22:	76 e2       	ldi	r23, 0x26	; 38
    ba24:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
			        strcat(newFileName, fileToUpload);
    ba28:	81 e2       	ldi	r24, 0x21	; 33
    ba2a:	99 e5       	ldi	r25, 0x59	; 89
    ba2c:	68 e3       	ldi	r22, 0x38	; 56
    ba2e:	7d e3       	ldi	r23, 0x3D	; 61
    ba30:	0e 94 11 63 	call	0xc622	; 0xc622 <strcat>
			        strcpy(fileToUpload, newFileName);
    ba34:	88 e3       	ldi	r24, 0x38	; 56
    ba36:	9d e3       	ldi	r25, 0x3D	; 61
    ba38:	61 e2       	ldi	r22, 0x21	; 33
    ba3a:	79 e5       	ldi	r23, 0x59	; 89
    ba3c:	0e 94 25 63 	call	0xc64a	; 0xc64a <strcpy>
			    }
                Debug_SendString("",true);
    ba40:	85 ee       	ldi	r24, 0xE5	; 229
    ba42:	90 e2       	ldi	r25, 0x20	; 32
    ba44:	61 e0       	ldi	r22, 0x01	; 1
    ba46:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                Debug_SendString("_____________________________________________", true);
    ba4a:	85 ec       	ldi	r24, 0xC5	; 197
    ba4c:	9a e2       	ldi	r25, 0x2A	; 42
    ba4e:	61 e0       	ldi	r22, 0x01	; 1
    ba50:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
			    Debug_SendString("Uploading File: ", false);
    ba54:	83 ef       	ldi	r24, 0xF3	; 243
    ba56:	9a e2       	ldi	r25, 0x2A	; 42
    ba58:	60 e0       	ldi	r22, 0x00	; 0
    ba5a:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
			    Debug_SendString(fileToUpload, true);
    ba5e:	88 e3       	ldi	r24, 0x38	; 56
    ba60:	9d e3       	ldi	r25, 0x3D	; 61
    ba62:	61 e0       	ldi	r22, 0x01	; 1
    ba64:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>

                okToOpenFileToUpload = true;
    ba68:	81 e0       	ldi	r24, 0x01	; 1
    ba6a:	80 93 7d 34 	sts	0x347D, r24
                while(!uploadFileOpened);
    ba6e:	80 91 a5 31 	lds	r24, 0x31A5
    ba72:	88 23       	and	r24, r24
    ba74:	e1 f3       	breq	.-8      	; 0xba6e <main+0x4fc>
    ba76:	80 e2       	ldi	r24, 0x20	; 32
    ba78:	9e e4       	ldi	r25, 0x4E	; 78
    ba7a:	f3 01       	movw	r30, r6
    ba7c:	31 97       	sbiw	r30, 0x01	; 1
    ba7e:	f1 f7       	brne	.-4      	; 0xba7c <main+0x50a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ba80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ba82:	d9 f7       	brne	.-10     	; 0xba7a <main+0x508>
                _delay_ms(2000);


                numberOfPacketsToUpload = uploadFileSize /  1000;
    ba84:	60 91 84 34 	lds	r22, 0x3484
    ba88:	70 91 85 34 	lds	r23, 0x3485
    ba8c:	80 91 86 34 	lds	r24, 0x3486
    ba90:	90 91 87 34 	lds	r25, 0x3487
    ba94:	28 ee       	ldi	r18, 0xE8	; 232
    ba96:	33 e0       	ldi	r19, 0x03	; 3
    ba98:	40 e0       	ldi	r20, 0x00	; 0
    ba9a:	50 e0       	ldi	r21, 0x00	; 0
    ba9c:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    baa0:	c9 01       	movw	r24, r18
    baa2:	da 01       	movw	r26, r20
    baa4:	80 93 8c 34 	sts	0x348C, r24
    baa8:	90 93 8d 34 	sts	0x348D, r25
    baac:	a0 93 8e 34 	sts	0x348E, r26
    bab0:	b0 93 8f 34 	sts	0x348F, r27
                leftOverBytesToUpload   = uploadFileSize %  1000;
    bab4:	60 91 84 34 	lds	r22, 0x3484
    bab8:	70 91 85 34 	lds	r23, 0x3485
    babc:	80 91 86 34 	lds	r24, 0x3486
    bac0:	90 91 87 34 	lds	r25, 0x3487
    bac4:	28 ee       	ldi	r18, 0xE8	; 232
    bac6:	33 e0       	ldi	r19, 0x03	; 3
    bac8:	40 e0       	ldi	r20, 0x00	; 0
    baca:	50 e0       	ldi	r21, 0x00	; 0
    bacc:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    bad0:	9b 01       	movw	r18, r22
    bad2:	ac 01       	movw	r20, r24
    bad4:	20 93 90 34 	sts	0x3490, r18
    bad8:	30 93 91 34 	sts	0x3491, r19
    badc:	40 93 92 34 	sts	0x3492, r20
    bae0:	50 93 93 34 	sts	0x3493, r21


                Debug_SendString("File Opened!", true);
    bae4:	84 e0       	ldi	r24, 0x04	; 4
    bae6:	9b e2       	ldi	r25, 0x2B	; 43
    bae8:	61 e0       	ldi	r22, 0x01	; 1
    baea:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                sprintf(temp,"File Size: %lu",uploadFileSize);
    baee:	40 91 84 34 	lds	r20, 0x3484
    baf2:	50 91 85 34 	lds	r21, 0x3485
    baf6:	60 91 86 34 	lds	r22, 0x3486
    bafa:	70 91 87 34 	lds	r23, 0x3487
    bafe:	8d b7       	in	r24, 0x3d	; 61
    bb00:	9e b7       	in	r25, 0x3e	; 62
    bb02:	08 97       	sbiw	r24, 0x08	; 8
    bb04:	8d bf       	out	0x3d, r24	; 61
    bb06:	9e bf       	out	0x3e, r25	; 62
    bb08:	ed b7       	in	r30, 0x3d	; 61
    bb0a:	fe b7       	in	r31, 0x3e	; 62
    bb0c:	31 96       	adiw	r30, 0x01	; 1
    bb0e:	ad b7       	in	r26, 0x3d	; 61
    bb10:	be b7       	in	r27, 0x3e	; 62
    bb12:	11 96       	adiw	r26, 0x01	; 1
    bb14:	4d 92       	st	X+, r4
    bb16:	5c 92       	st	X, r5
    bb18:	12 97       	sbiw	r26, 0x02	; 2
    bb1a:	21 e1       	ldi	r18, 0x11	; 17
    bb1c:	3b e2       	ldi	r19, 0x2B	; 43
    bb1e:	22 83       	std	Z+2, r18	; 0x02
    bb20:	33 83       	std	Z+3, r19	; 0x03
    bb22:	44 83       	std	Z+4, r20	; 0x04
    bb24:	55 83       	std	Z+5, r21	; 0x05
    bb26:	66 83       	std	Z+6, r22	; 0x06
    bb28:	77 83       	std	Z+7, r23	; 0x07
    bb2a:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
                Debug_SendString(temp, true);
    bb2e:	6d b7       	in	r22, 0x3d	; 61
    bb30:	7e b7       	in	r23, 0x3e	; 62
    bb32:	68 5f       	subi	r22, 0xF8	; 248
    bb34:	7f 4f       	sbci	r23, 0xFF	; 255
    bb36:	6d bf       	out	0x3d, r22	; 61
    bb38:	7e bf       	out	0x3e, r23	; 62
    bb3a:	c2 01       	movw	r24, r4
    bb3c:	61 e0       	ldi	r22, 0x01	; 1
    bb3e:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Wifi_ExitCMDMode(500);
                    _delay_ms(10000);
                    goto Open_Connection;
                }

                timeOutTimer = 5000;
    bb42:	08 e8       	ldi	r16, 0x88	; 136
    bb44:	c0 2e       	mov	r12, r16
    bb46:	03 e1       	ldi	r16, 0x13	; 19
    bb48:	d0 2e       	mov	r13, r16
    bb4a:	16 e6       	ldi	r17, 0x66	; 102
    bb4c:	e1 2e       	mov	r14, r17
    bb4e:	1e e0       	ldi	r17, 0x0E	; 14
    bb50:	f1 2e       	mov	r15, r17
                Debug_SendString("File Opened!", true);
                sprintf(temp,"File Size: %lu",uploadFileSize);
                Debug_SendString(temp, true);

                Open_Connection:
                Wifi_EnterCMDMode(500);
    bb52:	84 ef       	ldi	r24, 0xF4	; 244
    bb54:	91 e0       	ldi	r25, 0x01	; 1
    bb56:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <Wifi_EnterCMDMode>
    bb5a:	80 e1       	ldi	r24, 0x10	; 16
    bb5c:	97 e2       	ldi	r25, 0x27	; 39
    bb5e:	f3 01       	movw	r30, r6
    bb60:	31 97       	sbiw	r30, 0x01	; 1
    bb62:	f1 f7       	brne	.-4      	; 0xbb60 <main+0x5ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bb64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bb66:	d9 f7       	brne	.-10     	; 0xbb5e <main+0x5ec>
                _delay_ms(1000);

                if(!Wifi_SendCommand(serverOpenCommand,"Connect to","Connect to",500)){
    bb68:	8f e5       	ldi	r24, 0x5F	; 95
    bb6a:	91 e3       	ldi	r25, 0x31	; 49
    bb6c:	60 e2       	ldi	r22, 0x20	; 32
    bb6e:	7b e2       	ldi	r23, 0x2B	; 43
    bb70:	ab 01       	movw	r20, r22
    bb72:	24 ef       	ldi	r18, 0xF4	; 244
    bb74:	31 e0       	ldi	r19, 0x01	; 1
    bb76:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    bb7a:	88 23       	and	r24, r24
    bb7c:	99 f4       	brne	.+38     	; 0xbba4 <main+0x632>
    bb7e:	80 e1       	ldi	r24, 0x10	; 16
    bb80:	97 e2       	ldi	r25, 0x27	; 39
    bb82:	f3 01       	movw	r30, r6
    bb84:	31 97       	sbiw	r30, 0x01	; 1
    bb86:	f1 f7       	brne	.-4      	; 0xbb84 <main+0x612>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bb88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bb8a:	d9 f7       	brne	.-10     	; 0xbb82 <main+0x610>

                    _delay_ms(1000);
                    Wifi_ExitCMDMode(500);
    bb8c:	84 ef       	ldi	r24, 0xF4	; 244
    bb8e:	91 e0       	ldi	r25, 0x01	; 1
    bb90:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>
    bb94:	8f ef       	ldi	r24, 0xFF	; 255
    bb96:	9f ef       	ldi	r25, 0xFF	; 255
    bb98:	f3 01       	movw	r30, r6
    bb9a:	31 97       	sbiw	r30, 0x01	; 1
    bb9c:	f1 f7       	brne	.-4      	; 0xbb9a <main+0x628>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bb9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bba0:	d9 f7       	brne	.-10     	; 0xbb98 <main+0x626>
    bba2:	d7 cf       	rjmp	.-82     	; 0xbb52 <main+0x5e0>
                    _delay_ms(10000);
                    goto Open_Connection;
                }

                timeOutTimer = 5000;
    bba4:	c0 92 30 59 	sts	0x5930, r12
    bba8:	d0 92 31 59 	sts	0x5931, r13
                tempStringFiller = 0;
    bbac:	10 92 60 34 	sts	0x3460, r1
    bbb0:	2f c0       	rjmp	.+94     	; 0xbc10 <main+0x69e>
                while(timeOutTimer > 0){
                    if(Wifi_CharReadyToRead()){
    bbb2:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    bbb6:	88 23       	and	r24, r24
    bbb8:	f9 f0       	breq	.+62     	; 0xbbf8 <main+0x686>
                        temp[tempStringFiller] = Wifi_GetByte(false);
    bbba:	80 91 60 34 	lds	r24, 0x3460
    bbbe:	08 2f       	mov	r16, r24
    bbc0:	10 e0       	ldi	r17, 0x00	; 0
    bbc2:	80 e0       	ldi	r24, 0x00	; 0
    bbc4:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    bbc8:	07 5e       	subi	r16, 0xE7	; 231
    bbca:	14 4b       	sbci	r17, 0xB4	; 180
    bbcc:	d8 01       	movw	r26, r16
    bbce:	8c 93       	st	X, r24
                        tempStringFiller++;
    bbd0:	10 91 60 34 	lds	r17, 0x3460
    bbd4:	1f 5f       	subi	r17, 0xFF	; 255
    bbd6:	10 93 60 34 	sts	0x3460, r17
                        temp[tempStringFiller] = 0;
    bbda:	e1 2f       	mov	r30, r17
    bbdc:	f0 e0       	ldi	r31, 0x00	; 0
    bbde:	e7 5e       	subi	r30, 0xE7	; 231
    bbe0:	f4 4b       	sbci	r31, 0xB4	; 180
    bbe2:	10 82       	st	Z, r1
                        if(strstr(temp,"*OPEN*") != 0){
    bbe4:	89 e1       	ldi	r24, 0x19	; 25
    bbe6:	9b e4       	ldi	r25, 0x4B	; 75
    bbe8:	6b e2       	ldi	r22, 0x2B	; 43
    bbea:	7b e2       	ldi	r23, 0x2B	; 43
    bbec:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    bbf0:	00 97       	sbiw	r24, 0x00	; 0
    bbf2:	a1 f4       	brne	.+40     	; 0xbc1c <main+0x6aa>
                            break;
                        }
                        if(tempStringFiller == 49){
    bbf4:	11 33       	cpi	r17, 0x31	; 49
    bbf6:	91 f0       	breq	.+36     	; 0xbc1c <main+0x6aa>
    bbf8:	c7 01       	movw	r24, r14
    bbfa:	01 97       	sbiw	r24, 0x01	; 1
    bbfc:	f1 f7       	brne	.-4      	; 0xbbfa <main+0x688>
                            break;
                        }
                    }
                    _delay_ms(1);
                    timeOutTimer--;
    bbfe:	80 91 30 59 	lds	r24, 0x5930
    bc02:	90 91 31 59 	lds	r25, 0x5931
    bc06:	01 97       	sbiw	r24, 0x01	; 1
    bc08:	80 93 30 59 	sts	0x5930, r24
    bc0c:	90 93 31 59 	sts	0x5931, r25
                    goto Open_Connection;
                }

                timeOutTimer = 5000;
                tempStringFiller = 0;
                while(timeOutTimer > 0){
    bc10:	80 91 30 59 	lds	r24, 0x5930
    bc14:	90 91 31 59 	lds	r25, 0x5931
    bc18:	89 2b       	or	r24, r25
    bc1a:	59 f6       	brne	.-106    	; 0xbbb2 <main+0x640>
                    _delay_ms(1);
                    timeOutTimer--;
                }


                if(strstr(temp,"*OPEN*") != 0){                            // success
    bc1c:	89 e1       	ldi	r24, 0x19	; 25
    bc1e:	9b e4       	ldi	r25, 0x4B	; 75
    bc20:	6b e2       	ldi	r22, 0x2B	; 43
    bc22:	7b e2       	ldi	r23, 0x2B	; 43
    bc24:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    bc28:	00 97       	sbiw	r24, 0x00	; 0
    bc2a:	09 f4       	brne	.+2      	; 0xbc2e <main+0x6bc>
    bc2c:	53 c1       	rjmp	.+678    	; 0xbed4 <main+0x962>
                    Debug_SendString("Connection Open!",true);
    bc2e:	82 e3       	ldi	r24, 0x32	; 50
    bc30:	9b e2       	ldi	r25, 0x2B	; 43
    bc32:	61 e0       	ldi	r22, 0x01	; 1
    bc34:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    bc38:	80 e1       	ldi	r24, 0x10	; 16
    bc3a:	97 e2       	ldi	r25, 0x27	; 39
    bc3c:	f3 01       	movw	r30, r6
    bc3e:	31 97       	sbiw	r30, 0x01	; 1
    bc40:	f1 f7       	brne	.-4      	; 0xbc3e <main+0x6cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bc42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bc44:	d9 f7       	brne	.-10     	; 0xbc3c <main+0x6ca>
                        _delay_ms(10000);
                        goto Open_Connection;
                    }
                }

                Debug_SendString("Sending...", true);
    bc46:	83 e4       	ldi	r24, 0x43	; 67
    bc48:	9b e2       	ldi	r25, 0x2B	; 43
    bc4a:	61 e0       	ldi	r22, 0x01	; 1
    bc4c:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>

                uploadTimeStart = UNIX_time;
    bc50:	80 91 36 34 	lds	r24, 0x3436
    bc54:	90 91 37 34 	lds	r25, 0x3437
    bc58:	a0 91 38 34 	lds	r26, 0x3438
    bc5c:	b0 91 39 34 	lds	r27, 0x3439
    bc60:	80 93 5b 3d 	sts	0x3D5B, r24
    bc64:	90 93 5c 3d 	sts	0x3D5C, r25
    bc68:	a0 93 5d 3d 	sts	0x3D5D, r26
    bc6c:	b0 93 5e 3d 	sts	0x3D5E, r27
                uploadTimedOut = false;
    bc70:	10 92 2a 34 	sts	0x342A, r1


                memmove(temp,strtok(fileToUpload,"/"),12);
    bc74:	b8 e3       	ldi	r27, 0x38	; 56
    bc76:	cb 2e       	mov	r12, r27
    bc78:	bd e3       	ldi	r27, 0x3D	; 61
    bc7a:	db 2e       	mov	r13, r27
    bc7c:	c6 01       	movw	r24, r12
    bc7e:	6a eb       	ldi	r22, 0xBA	; 186
    bc80:	76 e2       	ldi	r23, 0x26	; 38
    bc82:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    bc86:	bc 01       	movw	r22, r24
    bc88:	89 e1       	ldi	r24, 0x19	; 25
    bc8a:	9b e4       	ldi	r25, 0x4B	; 75
    bc8c:	4c e0       	ldi	r20, 0x0C	; 12
    bc8e:	50 e0       	ldi	r21, 0x00	; 0
    bc90:	0e 94 c7 62 	call	0xc58e	; 0xc58e <memmove>
                memmove(fileToUpload,temp,12);
    bc94:	c6 01       	movw	r24, r12
    bc96:	69 e1       	ldi	r22, 0x19	; 25
    bc98:	7b e4       	ldi	r23, 0x4B	; 75
    bc9a:	4c e0       	ldi	r20, 0x0C	; 12
    bc9c:	50 e0       	ldi	r21, 0x00	; 0
    bc9e:	0e 94 c7 62 	call	0xc58e	; 0xc58e <memmove>

                uploadHeaderSize = 177;
    bca2:	81 eb       	ldi	r24, 0xB1	; 177
    bca4:	90 e0       	ldi	r25, 0x00	; 0
    bca6:	a0 e0       	ldi	r26, 0x00	; 0
    bca8:	b0 e0       	ldi	r27, 0x00	; 0
    bcaa:	80 93 88 34 	sts	0x3488, r24
    bcae:	90 93 89 34 	sts	0x3489, r25
    bcb2:	a0 93 8a 34 	sts	0x348A, r26
    bcb6:	b0 93 8b 34 	sts	0x348B, r27
                uploadHeaderSize += strlen(user);
    bcba:	20 91 88 34 	lds	r18, 0x3488
    bcbe:	30 91 89 34 	lds	r19, 0x3489
    bcc2:	40 91 8a 34 	lds	r20, 0x348A
    bcc6:	50 91 8b 34 	lds	r21, 0x348B
    bcca:	e1 ed       	ldi	r30, 0xD1	; 209
    bccc:	fb e4       	ldi	r31, 0x4B	; 75
    bcce:	01 90       	ld	r0, Z+
    bcd0:	00 20       	and	r0, r0
    bcd2:	e9 f7       	brne	.-6      	; 0xbcce <main+0x75c>
    bcd4:	cf 01       	movw	r24, r30
    bcd6:	01 97       	sbiw	r24, 0x01	; 1
    bcd8:	81 5d       	subi	r24, 0xD1	; 209
    bcda:	9b 44       	sbci	r25, 0x4B	; 75
    bcdc:	a0 e0       	ldi	r26, 0x00	; 0
    bcde:	b0 e0       	ldi	r27, 0x00	; 0
    bce0:	82 0f       	add	r24, r18
    bce2:	93 1f       	adc	r25, r19
    bce4:	a4 1f       	adc	r26, r20
    bce6:	b5 1f       	adc	r27, r21
    bce8:	80 93 88 34 	sts	0x3488, r24
    bcec:	90 93 89 34 	sts	0x3489, r25
    bcf0:	a0 93 8a 34 	sts	0x348A, r26
    bcf4:	b0 93 8b 34 	sts	0x348B, r27
                uploadHeaderSize += strlen(fileToUpload);
    bcf8:	20 91 88 34 	lds	r18, 0x3488
    bcfc:	30 91 89 34 	lds	r19, 0x3489
    bd00:	40 91 8a 34 	lds	r20, 0x348A
    bd04:	50 91 8b 34 	lds	r21, 0x348B
    bd08:	d6 01       	movw	r26, r12
    bd0a:	0d 90       	ld	r0, X+
    bd0c:	00 20       	and	r0, r0
    bd0e:	e9 f7       	brne	.-6      	; 0xbd0a <main+0x798>
    bd10:	cd 01       	movw	r24, r26
    bd12:	01 97       	sbiw	r24, 0x01	; 1
    bd14:	8c 19       	sub	r24, r12
    bd16:	9d 09       	sbc	r25, r13
    bd18:	a0 e0       	ldi	r26, 0x00	; 0
    bd1a:	b0 e0       	ldi	r27, 0x00	; 0
    bd1c:	82 0f       	add	r24, r18
    bd1e:	93 1f       	adc	r25, r19
    bd20:	a4 1f       	adc	r26, r20
    bd22:	b5 1f       	adc	r27, r21
    bd24:	80 93 88 34 	sts	0x3488, r24
    bd28:	90 93 89 34 	sts	0x3489, r25
    bd2c:	a0 93 8a 34 	sts	0x348A, r26
    bd30:	b0 93 8b 34 	sts	0x348B, r27
                uploadHeaderSize += strlen(nickname);
    bd34:	20 91 88 34 	lds	r18, 0x3488
    bd38:	30 91 89 34 	lds	r19, 0x3489
    bd3c:	40 91 8a 34 	lds	r20, 0x348A
    bd40:	50 91 8b 34 	lds	r21, 0x348B
    bd44:	ea e3       	ldi	r30, 0x3A	; 58
    bd46:	fe e5       	ldi	r31, 0x5E	; 94
    bd48:	01 90       	ld	r0, Z+
    bd4a:	00 20       	and	r0, r0
    bd4c:	e9 f7       	brne	.-6      	; 0xbd48 <main+0x7d6>
    bd4e:	cf 01       	movw	r24, r30
    bd50:	01 97       	sbiw	r24, 0x01	; 1
    bd52:	8a 53       	subi	r24, 0x3A	; 58
    bd54:	9e 45       	sbci	r25, 0x5E	; 94
    bd56:	a0 e0       	ldi	r26, 0x00	; 0
    bd58:	b0 e0       	ldi	r27, 0x00	; 0
    bd5a:	82 0f       	add	r24, r18
    bd5c:	93 1f       	adc	r25, r19
    bd5e:	a4 1f       	adc	r26, r20
    bd60:	b5 1f       	adc	r27, r21
    bd62:	80 93 88 34 	sts	0x3488, r24
    bd66:	90 93 89 34 	sts	0x3489, r25
    bd6a:	a0 93 8a 34 	sts	0x348A, r26
    bd6e:	b0 93 8b 34 	sts	0x348B, r27
                uploadHeaderSize += strlen(ltoa(uploadFileSize,temp,10));
    bd72:	e0 90 88 34 	lds	r14, 0x3488
    bd76:	f0 90 89 34 	lds	r15, 0x3489
    bd7a:	00 91 8a 34 	lds	r16, 0x348A
    bd7e:	10 91 8b 34 	lds	r17, 0x348B
    bd82:	60 91 84 34 	lds	r22, 0x3484
    bd86:	70 91 85 34 	lds	r23, 0x3485
    bd8a:	80 91 86 34 	lds	r24, 0x3486
    bd8e:	90 91 87 34 	lds	r25, 0x3487
    bd92:	49 e1       	ldi	r20, 0x19	; 25
    bd94:	5b e4       	ldi	r21, 0x4B	; 75
    bd96:	2a e0       	ldi	r18, 0x0A	; 10
    bd98:	30 e0       	ldi	r19, 0x00	; 0
    bd9a:	0e 94 77 63 	call	0xc6ee	; 0xc6ee <ltoa>
    bd9e:	fc 01       	movw	r30, r24
    bda0:	dc 01       	movw	r26, r24
    bda2:	0d 90       	ld	r0, X+
    bda4:	00 20       	and	r0, r0
    bda6:	e9 f7       	brne	.-6      	; 0xbda2 <main+0x830>
    bda8:	cd 01       	movw	r24, r26
    bdaa:	01 97       	sbiw	r24, 0x01	; 1
    bdac:	8e 1b       	sub	r24, r30
    bdae:	9f 0b       	sbc	r25, r31
    bdb0:	a0 e0       	ldi	r26, 0x00	; 0
    bdb2:	b0 e0       	ldi	r27, 0x00	; 0
    bdb4:	8e 0d       	add	r24, r14
    bdb6:	9f 1d       	adc	r25, r15
    bdb8:	a0 1f       	adc	r26, r16
    bdba:	b1 1f       	adc	r27, r17
    bdbc:	80 93 88 34 	sts	0x3488, r24
    bdc0:	90 93 89 34 	sts	0x3489, r25
    bdc4:	a0 93 8a 34 	sts	0x348A, r26
    bdc8:	b0 93 8b 34 	sts	0x348B, r27
                uploadHeaderSize += uploadFileSize;
    bdcc:	20 91 88 34 	lds	r18, 0x3488
    bdd0:	30 91 89 34 	lds	r19, 0x3489
    bdd4:	40 91 8a 34 	lds	r20, 0x348A
    bdd8:	50 91 8b 34 	lds	r21, 0x348B
    bddc:	80 91 84 34 	lds	r24, 0x3484
    bde0:	90 91 85 34 	lds	r25, 0x3485
    bde4:	a0 91 86 34 	lds	r26, 0x3486
    bde8:	b0 91 87 34 	lds	r27, 0x3487
    bdec:	82 0f       	add	r24, r18
    bdee:	93 1f       	adc	r25, r19
    bdf0:	a4 1f       	adc	r26, r20
    bdf2:	b5 1f       	adc	r27, r21
    bdf4:	80 93 88 34 	sts	0x3488, r24
    bdf8:	90 93 89 34 	sts	0x3489, r25
    bdfc:	a0 93 8a 34 	sts	0x348A, r26
    be00:	b0 93 8b 34 	sts	0x348B, r27


                Wifi_SendString("POST /users/",false);                              // 12
    be04:	8e e4       	ldi	r24, 0x4E	; 78
    be06:	9b e2       	ldi	r25, 0x2B	; 43
    be08:	60 e0       	ldi	r22, 0x00	; 0
    be0a:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString(user,false);
    be0e:	81 ed       	ldi	r24, 0xD1	; 209
    be10:	9b e4       	ldi	r25, 0x4B	; 75
    be12:	60 e0       	ldi	r22, 0x00	; 0
    be14:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString("/binupload?dev_nickname=",false);                  // 24
    be18:	8b e5       	ldi	r24, 0x5B	; 91
    be1a:	9b e2       	ldi	r25, 0x2B	; 43
    be1c:	60 e0       	ldi	r22, 0x00	; 0
    be1e:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString(nickname,false);
    be22:	8a e3       	ldi	r24, 0x3A	; 58
    be24:	9e e5       	ldi	r25, 0x5E	; 94
    be26:	60 e0       	ldi	r22, 0x00	; 0
    be28:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString("&filename=",false);                                // 10
    be2c:	84 e7       	ldi	r24, 0x74	; 116
    be2e:	9b e2       	ldi	r25, 0x2B	; 43
    be30:	60 e0       	ldi	r22, 0x00	; 0
    be32:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString(fileToUpload, false);
    be36:	c6 01       	movw	r24, r12
    be38:	60 e0       	ldi	r22, 0x00	; 0
    be3a:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString(" HTTP/1.1",true);                                  // 11
    be3e:	8f e7       	ldi	r24, 0x7F	; 127
    be40:	9b e2       	ldi	r25, 0x2B	; 43
    be42:	61 e0       	ldi	r22, 0x01	; 1
    be44:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>

                Wifi_SendString("Host: bodytrack.org",true);                        // 21
    be48:	89 e8       	ldi	r24, 0x89	; 137
    be4a:	9b e2       	ldi	r25, 0x2B	; 43
    be4c:	61 e0       	ldi	r22, 0x01	; 1
    be4e:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString("Content-Type: application/octet-stream",true);     // 40
    be52:	8d e9       	ldi	r24, 0x9D	; 157
    be54:	9b e2       	ldi	r25, 0x2B	; 43
    be56:	61 e0       	ldi	r22, 0x01	; 1
    be58:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendString("Content-Transfer-Encoding: binary",true);          // 35
    be5c:	84 ec       	ldi	r24, 0xC4	; 196
    be5e:	9b e2       	ldi	r25, 0x2B	; 43
    be60:	61 e0       	ldi	r22, 0x01	; 1
    be62:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
    be66:	40 91 84 34 	lds	r20, 0x3484
    be6a:	50 91 85 34 	lds	r21, 0x3485
    be6e:	60 91 86 34 	lds	r22, 0x3486
    be72:	70 91 87 34 	lds	r23, 0x3487
    be76:	ed b7       	in	r30, 0x3d	; 61
    be78:	fe b7       	in	r31, 0x3e	; 62
    be7a:	38 97       	sbiw	r30, 0x08	; 8
    be7c:	ed bf       	out	0x3d, r30	; 61
    be7e:	fe bf       	out	0x3e, r31	; 62
    be80:	31 96       	adiw	r30, 0x01	; 1
    be82:	ad b7       	in	r26, 0x3d	; 61
    be84:	be b7       	in	r27, 0x3e	; 62
    be86:	11 96       	adiw	r26, 0x01	; 1
    be88:	4d 92       	st	X+, r4
    be8a:	5c 92       	st	X, r5
    be8c:	12 97       	sbiw	r26, 0x02	; 2
    be8e:	26 ee       	ldi	r18, 0xE6	; 230
    be90:	3b e2       	ldi	r19, 0x2B	; 43
    be92:	22 83       	std	Z+2, r18	; 0x02
    be94:	33 83       	std	Z+3, r19	; 0x03
    be96:	44 83       	std	Z+4, r20	; 0x04
    be98:	55 83       	std	Z+5, r21	; 0x05
    be9a:	66 83       	std	Z+6, r22	; 0x06
    be9c:	77 83       	std	Z+7, r23	; 0x07
    be9e:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
                Wifi_SendString(temp,true);
    bea2:	6d b7       	in	r22, 0x3d	; 61
    bea4:	7e b7       	in	r23, 0x3e	; 62
    bea6:	68 5f       	subi	r22, 0xF8	; 248
    bea8:	7f 4f       	sbci	r23, 0xFF	; 255
    beaa:	6d bf       	out	0x3d, r22	; 61
    beac:	7e bf       	out	0x3e, r23	; 62
    beae:	c2 01       	movw	r24, r4
    beb0:	61 e0       	ldi	r22, 0x01	; 1
    beb2:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <Wifi_SendString>
                Wifi_SendByte(0x0D);                                                // 1
    beb6:	8d e0       	ldi	r24, 0x0D	; 13
    beb8:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
                Wifi_SendByte(0x0A);                                                // 1
    bebc:	8a e0       	ldi	r24, 0x0A	; 10
    bebe:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
    bec2:	88 24       	eor	r8, r8
    bec4:	99 24       	eor	r9, r9
    bec6:	54 01       	movw	r10, r8
    bec8:	cc 24       	eor	r12, r12
    beca:	dd 24       	eor	r13, r13
    becc:	76 01       	movw	r14, r12

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;
    bece:	33 24       	eor	r3, r3
    bed0:	33 94       	inc	r3
    bed2:	8a c0       	rjmp	.+276    	; 0xbfe8 <main+0xa76>


                if(strstr(temp,"*OPEN*") != 0){                            // success
                    Debug_SendString("Connection Open!",true);
                    _delay_ms(1000);
                } else if (strstr(temp,"ERR:Connected!")!=0){
    bed4:	89 e1       	ldi	r24, 0x19	; 25
    bed6:	9b e4       	ldi	r25, 0x4B	; 75
    bed8:	6a ef       	ldi	r22, 0xFA	; 250
    beda:	7b e2       	ldi	r23, 0x2B	; 43
    bedc:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    bee0:	00 97       	sbiw	r24, 0x00	; 0
    bee2:	01 f1       	breq	.+64     	; 0xbf24 <main+0x9b2>

                    if(!Wifi_Connected(500)){
    bee4:	84 ef       	ldi	r24, 0xF4	; 244
    bee6:	91 e0       	ldi	r25, 0x01	; 1
    bee8:	0e 94 45 03 	call	0x68a	; 0x68a <Wifi_Connected>
    beec:	88 23       	and	r24, r24
    beee:	01 f1       	breq	.+64     	; 0xbf30 <main+0x9be>
                        Wifi_ExitCMDMode(500);
                        goto Main;
                    } else{
                        Debug_SendString("Let't retry connecting...",true);
    bef0:	89 e0       	ldi	r24, 0x09	; 9
    bef2:	9c e2       	ldi	r25, 0x2C	; 44
    bef4:	61 e0       	ldi	r22, 0x01	; 1
    bef6:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                        Wifi_SendCommand("close","*CLOS*","*CLOS*",500);
    befa:	83 e2       	ldi	r24, 0x23	; 35
    befc:	9c e2       	ldi	r25, 0x2C	; 44
    befe:	69 e2       	ldi	r22, 0x29	; 41
    bf00:	7c e2       	ldi	r23, 0x2C	; 44
    bf02:	ab 01       	movw	r20, r22
    bf04:	24 ef       	ldi	r18, 0xF4	; 244
    bf06:	31 e0       	ldi	r19, 0x01	; 1
    bf08:	0e 94 7e 45 	call	0x8afc	; 0x8afc <Wifi_SendCommand>
    bf0c:	80 e1       	ldi	r24, 0x10	; 16
    bf0e:	97 e2       	ldi	r25, 0x27	; 39
    bf10:	f3 01       	movw	r30, r6
    bf12:	31 97       	sbiw	r30, 0x01	; 1
    bf14:	f1 f7       	brne	.-4      	; 0xbf12 <main+0x9a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bf16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bf18:	d9 f7       	brne	.-10     	; 0xbf10 <main+0x99e>
                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    bf1a:	84 ef       	ldi	r24, 0xF4	; 244
    bf1c:	91 e0       	ldi	r25, 0x01	; 1
    bf1e:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>
    bf22:	17 ce       	rjmp	.-978    	; 0xbb52 <main+0x5e0>
                        goto Open_Connection;
                    }
                } else{
                    if(!Wifi_Connected(500)){
    bf24:	84 ef       	ldi	r24, 0xF4	; 244
    bf26:	91 e0       	ldi	r25, 0x01	; 1
    bf28:	0e 94 45 03 	call	0x68a	; 0x68a <Wifi_Connected>
    bf2c:	88 23       	and	r24, r24
    bf2e:	29 f4       	brne	.+10     	; 0xbf3a <main+0x9c8>
                        Wifi_ExitCMDMode(500);
    bf30:	84 ef       	ldi	r24, 0xF4	; 244
    bf32:	91 e0       	ldi	r25, 0x01	; 1
    bf34:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>
    bf38:	6e cc       	rjmp	.-1828   	; 0xb816 <main+0x2a4>
                        goto Main;
                    } else{
                        Debug_SendString("Other issues: ", true);
    bf3a:	80 e3       	ldi	r24, 0x30	; 48
    bf3c:	9c e2       	ldi	r25, 0x2C	; 44
    bf3e:	61 e0       	ldi	r22, 0x01	; 1
    bf40:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
    bf44:	80 e1       	ldi	r24, 0x10	; 16
    bf46:	97 e2       	ldi	r25, 0x27	; 39
    bf48:	f3 01       	movw	r30, r6
    bf4a:	31 97       	sbiw	r30, 0x01	; 1
    bf4c:	f1 f7       	brne	.-4      	; 0xbf4a <main+0x9d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bf4e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bf50:	d9 f7       	brne	.-10     	; 0xbf48 <main+0x9d6>
                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    bf52:	84 ef       	ldi	r24, 0xF4	; 244
    bf54:	91 e0       	ldi	r25, 0x01	; 1
    bf56:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Wifi_ExitCMDMode>
    bf5a:	8f ef       	ldi	r24, 0xFF	; 255
    bf5c:	9f ef       	ldi	r25, 0xFF	; 255
    bf5e:	f3 01       	movw	r30, r6
    bf60:	31 97       	sbiw	r30, 0x01	; 1
    bf62:	f1 f7       	brne	.-4      	; 0xbf60 <main+0x9ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bf64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bf66:	d9 f7       	brne	.-10     	; 0xbf5e <main+0x9ec>
    bf68:	f4 cd       	rjmp	.-1048   	; 0xbb52 <main+0x5e0>
                Wifi_SendString(temp,true);
                Wifi_SendByte(0x0D);                                                // 1
                Wifi_SendByte(0x0A);                                                // 1

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                    uploadFileBufferFull = false;
    bf6a:	10 92 7f 34 	sts	0x347F, r1
                    okToFillUploadFileBuffer = true;
    bf6e:	30 92 7e 34 	sts	0x347E, r3

                    uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    bf72:	20 91 8c 34 	lds	r18, 0x348C
    bf76:	30 91 8d 34 	lds	r19, 0x348D
    bf7a:	40 91 8e 34 	lds	r20, 0x348E
    bf7e:	50 91 8f 34 	lds	r21, 0x348F
    bf82:	c7 01       	movw	r24, r14
    bf84:	b6 01       	movw	r22, r12
    bf86:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    bf8a:	20 93 6c 34 	sts	0x346C, r18
                    while(!uploadFileBufferFull);
    bf8e:	80 91 7f 34 	lds	r24, 0x347F
    bf92:	88 23       	and	r24, r24
    bf94:	e1 f3       	breq	.-8      	; 0xbf8e <main+0xa1c>
    bf96:	08 e4       	ldi	r16, 0x48	; 72
    bf98:	19 e3       	ldi	r17, 0x39	; 57
                    for(uint16_t j = 0; j <  uploadChunkSize; j++){
                        Wifi_SendByte(uploadFileBuffer[j]);
    bf9a:	d8 01       	movw	r26, r16
    bf9c:	8c 91       	ld	r24, X
    bf9e:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>

                        if(Wifi_CharReadyToRead()){
    bfa2:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    bfa6:	88 23       	and	r24, r24
    bfa8:	61 f0       	breq	.+24     	; 0xbfc2 <main+0xa50>
                           Debug_SendByte(Wifi_GetByte(false));
    bfaa:	80 e0       	ldi	r24, 0x00	; 0
    bfac:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    bfb0:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    bfb2:	80 91 a1 08 	lds	r24, 0x08A1
    bfb6:	85 ff       	sbrs	r24, 5
    bfb8:	fc cf       	rjmp	.-8      	; 0xbfb2 <main+0xa40>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    bfba:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    bfbe:	90 93 a0 08 	sts	0x08A0, r25
    bfc2:	0f 5f       	subi	r16, 0xFF	; 255
    bfc4:	1f 4f       	sbci	r17, 0xFF	; 255
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;

                    uploadPercentBS = (z*100)/numberOfPacketsToUpload;
                    while(!uploadFileBufferFull);
                    for(uint16_t j = 0; j <  uploadChunkSize; j++){
    bfc6:	bd e3       	ldi	r27, 0x3D	; 61
    bfc8:	00 33       	cpi	r16, 0x30	; 48
    bfca:	1b 07       	cpc	r17, r27
    bfcc:	31 f7       	brne	.-52     	; 0xbf9a <main+0xa28>
                sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
                Wifi_SendString(temp,true);
                Wifi_SendByte(0x0D);                                                // 1
                Wifi_SendByte(0x0A);                                                // 1

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    bfce:	08 94       	sec
    bfd0:	81 1c       	adc	r8, r1
    bfd2:	91 1c       	adc	r9, r1
    bfd4:	a1 1c       	adc	r10, r1
    bfd6:	b1 1c       	adc	r11, r1
    bfd8:	64 e6       	ldi	r22, 0x64	; 100
    bfda:	70 e0       	ldi	r23, 0x00	; 0
    bfdc:	80 e0       	ldi	r24, 0x00	; 0
    bfde:	90 e0       	ldi	r25, 0x00	; 0
    bfe0:	c6 0e       	add	r12, r22
    bfe2:	d7 1e       	adc	r13, r23
    bfe4:	e8 1e       	adc	r14, r24
    bfe6:	f9 1e       	adc	r15, r25
    bfe8:	80 91 8c 34 	lds	r24, 0x348C
    bfec:	90 91 8d 34 	lds	r25, 0x348D
    bff0:	a0 91 8e 34 	lds	r26, 0x348E
    bff4:	b0 91 8f 34 	lds	r27, 0x348F
    bff8:	88 16       	cp	r8, r24
    bffa:	99 06       	cpc	r9, r25
    bffc:	aa 06       	cpc	r10, r26
    bffe:	bb 06       	cpc	r11, r27
    c000:	08 f4       	brcc	.+2      	; 0xc004 <main+0xa92>
    c002:	b3 cf       	rjmp	.-154    	; 0xbf6a <main+0x9f8>
                        if(Wifi_CharReadyToRead()){
                           Debug_SendByte(Wifi_GetByte(false));
                        }
                    }
                }
                uploadFileBufferFull = false;
    c004:	10 92 7f 34 	sts	0x347F, r1
                okToFillUploadFileBuffer = true;
    c008:	81 e0       	ldi	r24, 0x01	; 1
    c00a:	80 93 7e 34 	sts	0x347E, r24
                while(!uploadFileBufferFull);
    c00e:	80 91 7f 34 	lds	r24, 0x347F
    c012:	88 23       	and	r24, r24
    c014:	e1 f3       	breq	.-8      	; 0xc00e <main+0xa9c>
    c016:	a8 e4       	ldi	r26, 0x48	; 72
    c018:	ca 2e       	mov	r12, r26
    c01a:	a9 e3       	ldi	r26, 0x39	; 57
    c01c:	da 2e       	mov	r13, r26
    c01e:	20 e0       	ldi	r18, 0x00	; 0
    c020:	30 e0       	ldi	r19, 0x00	; 0
    c022:	40 e0       	ldi	r20, 0x00	; 0
    c024:	50 e0       	ldi	r21, 0x00	; 0
    c026:	07 c0       	rjmp	.+14     	; 0xc036 <main+0xac4>
                for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
                    Wifi_SendByte(uploadFileBuffer[j]);
    c028:	d6 01       	movw	r26, r12
    c02a:	8d 91       	ld	r24, X+
    c02c:	6d 01       	movw	r12, r26
    c02e:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
    c032:	a8 01       	movw	r20, r16
    c034:	97 01       	movw	r18, r14
                    }
                }
                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;
                while(!uploadFileBufferFull);
                for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    c036:	80 91 90 34 	lds	r24, 0x3490
    c03a:	90 91 91 34 	lds	r25, 0x3491
    c03e:	a0 91 92 34 	lds	r26, 0x3492
    c042:	b0 91 93 34 	lds	r27, 0x3493
    c046:	79 01       	movw	r14, r18
    c048:	8a 01       	movw	r16, r20
    c04a:	08 94       	sec
    c04c:	e1 1c       	adc	r14, r1
    c04e:	f1 1c       	adc	r15, r1
    c050:	01 1d       	adc	r16, r1
    c052:	11 1d       	adc	r17, r1
    c054:	28 17       	cp	r18, r24
    c056:	39 07       	cpc	r19, r25
    c058:	4a 07       	cpc	r20, r26
    c05a:	5b 07       	cpc	r21, r27
    c05c:	28 f3       	brcs	.-54     	; 0xc028 <main+0xab6>
                    Wifi_SendByte(uploadFileBuffer[j]);
                }
                Wifi_SendByte(0x0D);                                                // 4
    c05e:	8d e0       	ldi	r24, 0x0D	; 13
    c060:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
                Wifi_SendByte(0x0A);
    c064:	8a e0       	ldi	r24, 0x0A	; 10
    c066:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
                Wifi_SendByte(0x0D);
    c06a:	8d e0       	ldi	r24, 0x0D	; 13
    c06c:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>
                Wifi_SendByte(0x0A);
    c070:	8a e0       	ldi	r24, 0x0A	; 10
    c072:	0e 94 f6 42 	call	0x85ec	; 0x85ec <Wifi_SendByte>

                uploadPercentBS = 100;
    c076:	84 e6       	ldi	r24, 0x64	; 100
    c078:	80 93 6c 34 	sts	0x346C, r24

              //Wait_For_Close:
                connectionClosed = false;
    c07c:	10 92 9b 34 	sts	0x349B, r1

                Debug_SendString("Wait for connection to close",true);
    c080:	8f e3       	ldi	r24, 0x3F	; 63
    c082:	9c e2       	ldi	r25, 0x2C	; 44
    c084:	61 e0       	ldi	r22, 0x01	; 1
    c086:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>

                httpResponse[0] = 0;
    c08a:	10 92 e6 55 	sts	0x55E6, r1
                connectionTimeoutTimer = 0;
                lengthOfHttpResponse = 0;
    c08e:	10 92 99 34 	sts	0x3499, r1
    c092:	10 92 9a 34 	sts	0x349A, r1

                connectionTimeoutTimer=120000;
    c096:	80 ec       	ldi	r24, 0xC0	; 192
    c098:	94 ed       	ldi	r25, 0xD4	; 212
    c09a:	a1 e0       	ldi	r26, 0x01	; 1
    c09c:	b0 e0       	ldi	r27, 0x00	; 0
    c09e:	80 93 9c 34 	sts	0x349C, r24
    c0a2:	90 93 9d 34 	sts	0x349D, r25
    c0a6:	a0 93 9e 34 	sts	0x349E, r26
    c0aa:	b0 93 9f 34 	sts	0x349F, r27
    c0ae:	f6 e6       	ldi	r31, 0x66	; 102
    c0b0:	ef 2e       	mov	r14, r31
    c0b2:	fe e0       	ldi	r31, 0x0E	; 14
    c0b4:	ff 2e       	mov	r15, r31
    c0b6:	42 c0       	rjmp	.+132    	; 0xc13c <main+0xbca>
                while(connectionTimeoutTimer > 0){
                    if(Wifi_CharReadyToRead()){
    c0b8:	0e 94 66 02 	call	0x4cc	; 0x4cc <Wifi_CharReadyToRead>
    c0bc:	88 23       	and	r24, r24
    c0be:	41 f1       	breq	.+80     	; 0xc110 <main+0xb9e>
                        uploadFileBuffer[lengthOfHttpResponse] = Wifi_GetByte(false);
    c0c0:	00 91 99 34 	lds	r16, 0x3499
    c0c4:	10 91 9a 34 	lds	r17, 0x349A
    c0c8:	80 e0       	ldi	r24, 0x00	; 0
    c0ca:	0e 94 22 03 	call	0x644	; 0x644 <Wifi_GetByte>
    c0ce:	08 5b       	subi	r16, 0xB8	; 184
    c0d0:	16 4c       	sbci	r17, 0xC6	; 198
    c0d2:	f8 01       	movw	r30, r16
    c0d4:	80 83       	st	Z, r24
                        lengthOfHttpResponse++;
    c0d6:	00 91 99 34 	lds	r16, 0x3499
    c0da:	10 91 9a 34 	lds	r17, 0x349A
    c0de:	0f 5f       	subi	r16, 0xFF	; 255
    c0e0:	1f 4f       	sbci	r17, 0xFF	; 255
    c0e2:	00 93 99 34 	sts	0x3499, r16
    c0e6:	10 93 9a 34 	sts	0x349A, r17
                        uploadFileBuffer[lengthOfHttpResponse] = 0;
    c0ea:	f8 01       	movw	r30, r16
    c0ec:	e8 5b       	subi	r30, 0xB8	; 184
    c0ee:	f6 4c       	sbci	r31, 0xC6	; 198
    c0f0:	10 82       	st	Z, r1

                        if(strstr(uploadFileBuffer,"*CLOS*") != 0){
    c0f2:	88 e4       	ldi	r24, 0x48	; 72
    c0f4:	99 e3       	ldi	r25, 0x39	; 57
    c0f6:	69 e2       	ldi	r22, 0x29	; 41
    c0f8:	7c e2       	ldi	r23, 0x2C	; 44
    c0fa:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    c0fe:	00 97       	sbiw	r24, 0x00	; 0
    c100:	21 f0       	breq	.+8      	; 0xc10a <main+0xb98>
                            connectionClosed = true;
    c102:	81 e0       	ldi	r24, 0x01	; 1
    c104:	80 93 9b 34 	sts	0x349B, r24
    c108:	26 c0       	rjmp	.+76     	; 0xc156 <main+0xbe4>
                            break;
                        }
                        if(lengthOfHttpResponse == 999){
    c10a:	07 5e       	subi	r16, 0xE7	; 231
    c10c:	13 40       	sbci	r17, 0x03	; 3
    c10e:	19 f1       	breq	.+70     	; 0xc156 <main+0xbe4>
    c110:	c7 01       	movw	r24, r14
    c112:	01 97       	sbiw	r24, 0x01	; 1
    c114:	f1 f7       	brne	.-4      	; 0xc112 <main+0xba0>
                            break;
                        }
                    }
                    _delay_ms(1);
                    connectionTimeoutTimer--;
    c116:	80 91 9c 34 	lds	r24, 0x349C
    c11a:	90 91 9d 34 	lds	r25, 0x349D
    c11e:	a0 91 9e 34 	lds	r26, 0x349E
    c122:	b0 91 9f 34 	lds	r27, 0x349F
    c126:	01 97       	sbiw	r24, 0x01	; 1
    c128:	a1 09       	sbc	r26, r1
    c12a:	b1 09       	sbc	r27, r1
    c12c:	80 93 9c 34 	sts	0x349C, r24
    c130:	90 93 9d 34 	sts	0x349D, r25
    c134:	a0 93 9e 34 	sts	0x349E, r26
    c138:	b0 93 9f 34 	sts	0x349F, r27
                httpResponse[0] = 0;
                connectionTimeoutTimer = 0;
                lengthOfHttpResponse = 0;

                connectionTimeoutTimer=120000;
                while(connectionTimeoutTimer > 0){
    c13c:	80 91 9c 34 	lds	r24, 0x349C
    c140:	90 91 9d 34 	lds	r25, 0x349D
    c144:	a0 91 9e 34 	lds	r26, 0x349E
    c148:	b0 91 9f 34 	lds	r27, 0x349F
    c14c:	00 97       	sbiw	r24, 0x00	; 0
    c14e:	a1 05       	cpc	r26, r1
    c150:	b1 05       	cpc	r27, r1
    c152:	09 f0       	breq	.+2      	; 0xc156 <main+0xbe4>
    c154:	b1 cf       	rjmp	.-158    	; 0xc0b8 <main+0xb46>
                    }
                    _delay_ms(1);
                    connectionTimeoutTimer--;
                }

                memcpy(successfulBinaryRecordsString,strtok((strstr(uploadFileBuffer,"\"successful_binrecs\":") + 21),","),5);
    c156:	88 e4       	ldi	r24, 0x48	; 72
    c158:	99 e3       	ldi	r25, 0x39	; 57
    c15a:	6c e5       	ldi	r22, 0x5C	; 92
    c15c:	7c e2       	ldi	r23, 0x2C	; 44
    c15e:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    c162:	45 96       	adiw	r24, 0x15	; 21
    c164:	68 eb       	ldi	r22, 0xB8	; 184
    c166:	76 e2       	ldi	r23, 0x26	; 38
    c168:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    c16c:	a8 eb       	ldi	r26, 0xB8	; 184
    c16e:	bc e4       	ldi	r27, 0x4C	; 76
    c170:	fc 01       	movw	r30, r24
    c172:	85 e0       	ldi	r24, 0x05	; 5
    c174:	01 90       	ld	r0, Z+
    c176:	0d 92       	st	X+, r0
    c178:	81 50       	subi	r24, 0x01	; 1
    c17a:	e1 f7       	brne	.-8      	; 0xc174 <main+0xc02>
                memcpy(failedBinaryRecordsString    ,strtok((strstr(uploadFileBuffer,"\"failed_binrecs\":") + 17),","),5);
    c17c:	88 e4       	ldi	r24, 0x48	; 72
    c17e:	99 e3       	ldi	r25, 0x39	; 57
    c180:	62 e7       	ldi	r22, 0x72	; 114
    c182:	7c e2       	ldi	r23, 0x2C	; 44
    c184:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    c188:	41 96       	adiw	r24, 0x11	; 17
    c18a:	68 eb       	ldi	r22, 0xB8	; 184
    c18c:	76 e2       	ldi	r23, 0x26	; 38
    c18e:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    c192:	ac e6       	ldi	r26, 0x6C	; 108
    c194:	be e5       	ldi	r27, 0x5E	; 94
    c196:	fc 01       	movw	r30, r24
    c198:	85 e0       	ldi	r24, 0x05	; 5
    c19a:	01 90       	ld	r0, Z+
    c19c:	0d 92       	st	X+, r0
    c19e:	81 50       	subi	r24, 0x01	; 1
    c1a0:	e1 f7       	brne	.-8      	; 0xc19a <main+0xc28>
                memcpy(httpResponse                 ,strtok((strstr(uploadFileBuffer,"HTTP/1.1 ") + 9)," "),5);
    c1a2:	88 e4       	ldi	r24, 0x48	; 72
    c1a4:	99 e3       	ldi	r25, 0x39	; 57
    c1a6:	64 e8       	ldi	r22, 0x84	; 132
    c1a8:	7c e2       	ldi	r23, 0x2C	; 44
    c1aa:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    c1ae:	09 96       	adiw	r24, 0x09	; 9
    c1b0:	6d e7       	ldi	r22, 0x7D	; 125
    c1b2:	73 e2       	ldi	r23, 0x23	; 35
    c1b4:	0e 94 c2 62 	call	0xc584	; 0xc584 <strtok>
    c1b8:	a6 ee       	ldi	r26, 0xE6	; 230
    c1ba:	b5 e5       	ldi	r27, 0x55	; 85
    c1bc:	fc 01       	movw	r30, r24
    c1be:	85 e0       	ldi	r24, 0x05	; 5
    c1c0:	01 90       	ld	r0, Z+
    c1c2:	0d 92       	st	X+, r0
    c1c4:	81 50       	subi	r24, 0x01	; 1
    c1c6:	e1 f7       	brne	.-8      	; 0xc1c0 <main+0xc4e>

                Debug_SendString("Connection Closed",true);
    c1c8:	8e e8       	ldi	r24, 0x8E	; 142
    c1ca:	9c e2       	ldi	r25, 0x2C	; 44
    c1cc:	61 e0       	ldi	r22, 0x01	; 1
    c1ce:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                uploadTimeStop = UNIX_time;
    c1d2:	80 91 36 34 	lds	r24, 0x3436
    c1d6:	90 91 37 34 	lds	r25, 0x3437
    c1da:	a0 91 38 34 	lds	r26, 0x3438
    c1de:	b0 91 39 34 	lds	r27, 0x3439
    c1e2:	80 93 b7 3d 	sts	0x3DB7, r24
    c1e6:	90 93 b8 3d 	sts	0x3DB8, r25
    c1ea:	a0 93 b9 3d 	sts	0x3DB9, r26
    c1ee:	b0 93 ba 3d 	sts	0x3DBA, r27

                if((strstr(httpResponse,"200") != 0)){
    c1f2:	86 ee       	ldi	r24, 0xE6	; 230
    c1f4:	95 e5       	ldi	r25, 0x55	; 85
    c1f6:	60 ea       	ldi	r22, 0xA0	; 160
    c1f8:	7c e2       	ldi	r23, 0x2C	; 44
    c1fa:	0e 94 2c 63 	call	0xc658	; 0xc658 <strstr>
    c1fe:	00 97       	sbiw	r24, 0x00	; 0
    c200:	09 f4       	brne	.+2      	; 0xc204 <main+0xc92>
    c202:	bd c0       	rjmp	.+378    	; 0xc37e <main+0xe0c>


                    Debug_SendString("Got a 200 back",true);
    c204:	84 ea       	ldi	r24, 0xA4	; 164
    c206:	9c e2       	ldi	r25, 0x2C	; 44
    c208:	61 e0       	ldi	r22, 0x01	; 1
    c20a:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString("Successful: ",false);
    c20e:	83 eb       	ldi	r24, 0xB3	; 179
    c210:	9c e2       	ldi	r25, 0x2C	; 44
    c212:	60 e0       	ldi	r22, 0x00	; 0
    c214:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString(successfulBinaryRecordsString,true);
    c218:	88 eb       	ldi	r24, 0xB8	; 184
    c21a:	9c e4       	ldi	r25, 0x4C	; 76
    c21c:	61 e0       	ldi	r22, 0x01	; 1
    c21e:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString("Failed: ",false);
    c222:	80 ec       	ldi	r24, 0xC0	; 192
    c224:	9c e2       	ldi	r25, 0x2C	; 44
    c226:	60 e0       	ldi	r22, 0x00	; 0
    c228:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString(failedBinaryRecordsString,true);
    c22c:	8c e6       	ldi	r24, 0x6C	; 108
    c22e:	9e e5       	ldi	r25, 0x5E	; 94
    c230:	61 e0       	ldi	r22, 0x01	; 1
    c232:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    sprintf(temp,"File TX took: %lu secs",uploadTimeStop - uploadTimeStart);
    c236:	80 91 b7 3d 	lds	r24, 0x3DB7
    c23a:	90 91 b8 3d 	lds	r25, 0x3DB8
    c23e:	a0 91 b9 3d 	lds	r26, 0x3DB9
    c242:	b0 91 ba 3d 	lds	r27, 0x3DBA
    c246:	20 91 5b 3d 	lds	r18, 0x3D5B
    c24a:	30 91 5c 3d 	lds	r19, 0x3D5C
    c24e:	40 91 5d 3d 	lds	r20, 0x3D5D
    c252:	50 91 5e 3d 	lds	r21, 0x3D5E
    c256:	6d b7       	in	r22, 0x3d	; 61
    c258:	7e b7       	in	r23, 0x3e	; 62
    c25a:	68 50       	subi	r22, 0x08	; 8
    c25c:	70 40       	sbci	r23, 0x00	; 0
    c25e:	6d bf       	out	0x3d, r22	; 61
    c260:	7e bf       	out	0x3e, r23	; 62
    c262:	0d b7       	in	r16, 0x3d	; 61
    c264:	1e b7       	in	r17, 0x3e	; 62
    c266:	0f 5f       	subi	r16, 0xFF	; 255
    c268:	1f 4f       	sbci	r17, 0xFF	; 255
    c26a:	ed b7       	in	r30, 0x3d	; 61
    c26c:	fe b7       	in	r31, 0x3e	; 62
    c26e:	41 82       	std	Z+1, r4	; 0x01
    c270:	52 82       	std	Z+2, r5	; 0x02
    c272:	69 ec       	ldi	r22, 0xC9	; 201
    c274:	7c e2       	ldi	r23, 0x2C	; 44
    c276:	f8 01       	movw	r30, r16
    c278:	62 83       	std	Z+2, r22	; 0x02
    c27a:	73 83       	std	Z+3, r23	; 0x03
    c27c:	82 1b       	sub	r24, r18
    c27e:	93 0b       	sbc	r25, r19
    c280:	a4 0b       	sbc	r26, r20
    c282:	b5 0b       	sbc	r27, r21
    c284:	84 83       	std	Z+4, r24	; 0x04
    c286:	95 83       	std	Z+5, r25	; 0x05
    c288:	a6 83       	std	Z+6, r26	; 0x06
    c28a:	b7 83       	std	Z+7, r27	; 0x07
    c28c:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
                    Debug_SendString(temp,true);
    c290:	2d b7       	in	r18, 0x3d	; 61
    c292:	3e b7       	in	r19, 0x3e	; 62
    c294:	28 5f       	subi	r18, 0xF8	; 248
    c296:	3f 4f       	sbci	r19, 0xFF	; 255
    c298:	2d bf       	out	0x3d, r18	; 61
    c29a:	3e bf       	out	0x3e, r19	; 62
    c29c:	c2 01       	movw	r24, r4
    c29e:	61 e0       	ldi	r22, 0x01	; 1
    c2a0:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    sprintf(temp,"TX speed: %lu kbps", uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)));
    c2a4:	60 91 84 34 	lds	r22, 0x3484
    c2a8:	70 91 85 34 	lds	r23, 0x3485
    c2ac:	80 91 86 34 	lds	r24, 0x3486
    c2b0:	90 91 87 34 	lds	r25, 0x3487
    c2b4:	20 91 b7 3d 	lds	r18, 0x3DB7
    c2b8:	30 91 b8 3d 	lds	r19, 0x3DB8
    c2bc:	40 91 b9 3d 	lds	r20, 0x3DB9
    c2c0:	50 91 ba 3d 	lds	r21, 0x3DBA
    c2c4:	e0 90 5b 3d 	lds	r14, 0x3D5B
    c2c8:	f0 90 5c 3d 	lds	r15, 0x3D5C
    c2cc:	00 91 5d 3d 	lds	r16, 0x3D5D
    c2d0:	10 91 5e 3d 	lds	r17, 0x3D5E
    c2d4:	ad b7       	in	r26, 0x3d	; 61
    c2d6:	be b7       	in	r27, 0x3e	; 62
    c2d8:	18 97       	sbiw	r26, 0x08	; 8
    c2da:	ad bf       	out	0x3d, r26	; 61
    c2dc:	be bf       	out	0x3e, r27	; 62
    c2de:	cd b6       	in	r12, 0x3d	; 61
    c2e0:	de b6       	in	r13, 0x3e	; 62
    c2e2:	08 94       	sec
    c2e4:	c1 1c       	adc	r12, r1
    c2e6:	d1 1c       	adc	r13, r1
    c2e8:	11 96       	adiw	r26, 0x01	; 1
    c2ea:	4d 92       	st	X+, r4
    c2ec:	5c 92       	st	X, r5
    c2ee:	12 97       	sbiw	r26, 0x02	; 2
    c2f0:	a0 ee       	ldi	r26, 0xE0	; 224
    c2f2:	bc e2       	ldi	r27, 0x2C	; 44
    c2f4:	f6 01       	movw	r30, r12
    c2f6:	a2 83       	std	Z+2, r26	; 0x02
    c2f8:	b3 83       	std	Z+3, r27	; 0x03
    c2fa:	2e 19       	sub	r18, r14
    c2fc:	3f 09       	sbc	r19, r15
    c2fe:	40 0b       	sbc	r20, r16
    c300:	51 0b       	sbc	r21, r17
    c302:	e7 e0       	ldi	r30, 0x07	; 7
    c304:	22 0f       	add	r18, r18
    c306:	33 1f       	adc	r19, r19
    c308:	44 1f       	adc	r20, r20
    c30a:	55 1f       	adc	r21, r21
    c30c:	ea 95       	dec	r30
    c30e:	d1 f7       	brne	.-12     	; 0xc304 <main+0xd92>
    c310:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    c314:	f6 01       	movw	r30, r12
    c316:	24 83       	std	Z+4, r18	; 0x04
    c318:	35 83       	std	Z+5, r19	; 0x05
    c31a:	46 83       	std	Z+6, r20	; 0x06
    c31c:	57 83       	std	Z+7, r21	; 0x07
    c31e:	0e 94 c8 63 	call	0xc790	; 0xc790 <sprintf>
                    Debug_SendString(temp,true);
    c322:	2d b7       	in	r18, 0x3d	; 61
    c324:	3e b7       	in	r19, 0x3e	; 62
    c326:	28 5f       	subi	r18, 0xF8	; 248
    c328:	3f 4f       	sbci	r19, 0xFF	; 255
    c32a:	2d bf       	out	0x3d, r18	; 61
    c32c:	3e bf       	out	0x3e, r19	; 62
    c32e:	c2 01       	movw	r24, r4
    c330:	61 e0       	ldi	r22, 0x01	; 1
    c332:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>

                    okToCloseUploadFile = true;                   // flags it close file and to be to be renamed
    c336:	81 e0       	ldi	r24, 0x01	; 1
    c338:	80 93 77 34 	sts	0x3477, r24
    c33c:	80 e1       	ldi	r24, 0x10	; 16
    c33e:	97 e2       	ldi	r25, 0x27	; 39
    c340:	f3 01       	movw	r30, r6
    c342:	31 97       	sbiw	r30, 0x01	; 1
    c344:	f1 f7       	brne	.-4      	; 0xc342 <main+0xdd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c346:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c348:	d9 f7       	brne	.-10     	; 0xc340 <main+0xdce>
                    _delay_ms(1000);
                    while(okToCloseUploadFile);
    c34a:	80 91 77 34 	lds	r24, 0x3477
    c34e:	88 23       	and	r24, r24
    c350:	e1 f7       	brne	.-8      	; 0xc34a <main+0xdd8>
                    okToRenameUploadFile = true;
    c352:	81 e0       	ldi	r24, 0x01	; 1
    c354:	80 93 78 34 	sts	0x3478, r24
                    while(okToRenameUploadFile);
    c358:	80 91 78 34 	lds	r24, 0x3478
    c35c:	88 23       	and	r24, r24
    c35e:	e1 f7       	brne	.-8      	; 0xc358 <main+0xde6>
    c360:	80 e1       	ldi	r24, 0x10	; 16
    c362:	97 e2       	ldi	r25, 0x27	; 39
    c364:	f3 01       	movw	r30, r6
    c366:	31 97       	sbiw	r30, 0x01	; 1
    c368:	f1 f7       	brne	.-4      	; 0xc366 <main+0xdf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c36c:	d9 f7       	brne	.-10     	; 0xc364 <main+0xdf2>
                    _delay_ms(1000);
                    okToWriteUploaderLogFile = true;               // adds entry to log file
    c36e:	81 e0       	ldi	r24, 0x01	; 1
    c370:	80 93 a0 34 	sts	0x34A0, r24
                    while(okToWriteUploaderLogFile);
    c374:	80 91 a0 34 	lds	r24, 0x34A0
    c378:	88 23       	and	r24, r24
    c37a:	e1 f7       	brne	.-8      	; 0xc374 <main+0xe02>
    c37c:	30 c0       	rjmp	.+96     	; 0xc3de <main+0xe6c>

                } else {
                    Debug_SendString("File did not upload",true);
    c37e:	83 ef       	ldi	r24, 0xF3	; 243
    c380:	9c e2       	ldi	r25, 0x2C	; 44
    c382:	61 e0       	ldi	r22, 0x01	; 1
    c384:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString("got: *",false);
    c388:	87 e0       	ldi	r24, 0x07	; 7
    c38a:	9d e2       	ldi	r25, 0x2D	; 45
    c38c:	60 e0       	ldi	r22, 0x00	; 0
    c38e:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString(httpResponse,false);
    c392:	86 ee       	ldi	r24, 0xE6	; 230
    c394:	95 e5       	ldi	r25, 0x55	; 85
    c396:	60 e0       	ldi	r22, 0x00	; 0
    c398:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                    Debug_SendString("* back",true);
    c39c:	8e e0       	ldi	r24, 0x0E	; 14
    c39e:	9d e2       	ldi	r25, 0x2D	; 45
    c3a0:	61 e0       	ldi	r22, 0x01	; 1
    c3a2:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>


    			    okToCloseUploadFile = true;                    // flags it close file
    c3a6:	81 e0       	ldi	r24, 0x01	; 1
    c3a8:	80 93 77 34 	sts	0x3477, r24
    c3ac:	80 e1       	ldi	r24, 0x10	; 16
    c3ae:	97 e2       	ldi	r25, 0x27	; 39
    c3b0:	f3 01       	movw	r30, r6
    c3b2:	31 97       	sbiw	r30, 0x01	; 1
    c3b4:	f1 f7       	brne	.-4      	; 0xc3b2 <main+0xe40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c3b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c3b8:	d9 f7       	brne	.-10     	; 0xc3b0 <main+0xe3e>
                    _delay_ms(1000);
                    while(okToCloseUploadFile);
    c3ba:	80 91 77 34 	lds	r24, 0x3477
    c3be:	88 23       	and	r24, r24
    c3c0:	e1 f7       	brne	.-8      	; 0xc3ba <main+0xe48>
    c3c2:	80 e1       	ldi	r24, 0x10	; 16
    c3c4:	97 e2       	ldi	r25, 0x27	; 39
    c3c6:	f3 01       	movw	r30, r6
    c3c8:	31 97       	sbiw	r30, 0x01	; 1
    c3ca:	f1 f7       	brne	.-4      	; 0xc3c8 <main+0xe56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c3cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c3ce:	d9 f7       	brne	.-10     	; 0xc3c6 <main+0xe54>
                    _delay_ms(1000);

			        uploadFailed = true;                             // adds error entry to log file
    c3d0:	81 e0       	ldi	r24, 0x01	; 1
    c3d2:	80 93 76 34 	sts	0x3476, r24
                    while(uploadFailed);
    c3d6:	80 91 76 34 	lds	r24, 0x3476
    c3da:	88 23       	and	r24, r24
    c3dc:	e1 f7       	brne	.-8      	; 0xc3d6 <main+0xe64>
                }


                Debug_SendString("Done!", true);
    c3de:	85 e1       	ldi	r24, 0x15	; 21
    c3e0:	9d e2       	ldi	r25, 0x2D	; 45
    c3e2:	61 e0       	ldi	r22, 0x01	; 1
    c3e4:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>
                Debug_SendString("_____________________________________________", true);
    c3e8:	85 ec       	ldi	r24, 0xC5	; 197
    c3ea:	9a e2       	ldi	r25, 0x2A	; 42
    c3ec:	61 e0       	ldi	r22, 0x01	; 1
    c3ee:	0e 94 47 42 	call	0x848e	; 0x848e <Debug_SendString>


		        uploading = false;
    c3f2:	10 92 7b 34 	sts	0x347B, r1
			    okToUpload = false;
    c3f6:	10 92 7a 34 	sts	0x347A, r1
    c3fa:	0d ca       	rjmp	.-3046   	; 0xb816 <main+0x2a4>
    c3fc:	e0 e2       	ldi	r30, 0x20	; 32
    c3fe:	f6 e0       	ldi	r31, 0x06	; 6
    c400:	82 e0       	ldi	r24, 0x02	; 2
    c402:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    c404:	81 e0       	ldi	r24, 0x01	; 1
    c406:	85 83       	std	Z+5, r24	; 0x05
    c408:	20 e1       	ldi	r18, 0x10	; 16
    c40a:	37 e2       	ldi	r19, 0x27	; 39
    c40c:	40 e7       	ldi	r20, 0x70	; 112
    c40e:	51 e0       	ldi	r21, 0x01	; 1
    c410:	4d c9       	rjmp	.-3430   	; 0xb6ac <main+0x13a>

0000c412 <__mulsi3>:
    c412:	62 9f       	mul	r22, r18
    c414:	d0 01       	movw	r26, r0
    c416:	73 9f       	mul	r23, r19
    c418:	f0 01       	movw	r30, r0
    c41a:	82 9f       	mul	r24, r18
    c41c:	e0 0d       	add	r30, r0
    c41e:	f1 1d       	adc	r31, r1
    c420:	64 9f       	mul	r22, r20
    c422:	e0 0d       	add	r30, r0
    c424:	f1 1d       	adc	r31, r1
    c426:	92 9f       	mul	r25, r18
    c428:	f0 0d       	add	r31, r0
    c42a:	83 9f       	mul	r24, r19
    c42c:	f0 0d       	add	r31, r0
    c42e:	74 9f       	mul	r23, r20
    c430:	f0 0d       	add	r31, r0
    c432:	65 9f       	mul	r22, r21
    c434:	f0 0d       	add	r31, r0
    c436:	99 27       	eor	r25, r25
    c438:	72 9f       	mul	r23, r18
    c43a:	b0 0d       	add	r27, r0
    c43c:	e1 1d       	adc	r30, r1
    c43e:	f9 1f       	adc	r31, r25
    c440:	63 9f       	mul	r22, r19
    c442:	b0 0d       	add	r27, r0
    c444:	e1 1d       	adc	r30, r1
    c446:	f9 1f       	adc	r31, r25
    c448:	bd 01       	movw	r22, r26
    c44a:	cf 01       	movw	r24, r30
    c44c:	11 24       	eor	r1, r1
    c44e:	08 95       	ret

0000c450 <__udivmodqi4>:
    c450:	99 1b       	sub	r25, r25
    c452:	79 e0       	ldi	r23, 0x09	; 9
    c454:	04 c0       	rjmp	.+8      	; 0xc45e <__udivmodqi4_ep>

0000c456 <__udivmodqi4_loop>:
    c456:	99 1f       	adc	r25, r25
    c458:	96 17       	cp	r25, r22
    c45a:	08 f0       	brcs	.+2      	; 0xc45e <__udivmodqi4_ep>
    c45c:	96 1b       	sub	r25, r22

0000c45e <__udivmodqi4_ep>:
    c45e:	88 1f       	adc	r24, r24
    c460:	7a 95       	dec	r23
    c462:	c9 f7       	brne	.-14     	; 0xc456 <__udivmodqi4_loop>
    c464:	80 95       	com	r24
    c466:	08 95       	ret

0000c468 <__udivmodhi4>:
    c468:	aa 1b       	sub	r26, r26
    c46a:	bb 1b       	sub	r27, r27
    c46c:	51 e1       	ldi	r21, 0x11	; 17
    c46e:	07 c0       	rjmp	.+14     	; 0xc47e <__udivmodhi4_ep>

0000c470 <__udivmodhi4_loop>:
    c470:	aa 1f       	adc	r26, r26
    c472:	bb 1f       	adc	r27, r27
    c474:	a6 17       	cp	r26, r22
    c476:	b7 07       	cpc	r27, r23
    c478:	10 f0       	brcs	.+4      	; 0xc47e <__udivmodhi4_ep>
    c47a:	a6 1b       	sub	r26, r22
    c47c:	b7 0b       	sbc	r27, r23

0000c47e <__udivmodhi4_ep>:
    c47e:	88 1f       	adc	r24, r24
    c480:	99 1f       	adc	r25, r25
    c482:	5a 95       	dec	r21
    c484:	a9 f7       	brne	.-22     	; 0xc470 <__udivmodhi4_loop>
    c486:	80 95       	com	r24
    c488:	90 95       	com	r25
    c48a:	bc 01       	movw	r22, r24
    c48c:	cd 01       	movw	r24, r26
    c48e:	08 95       	ret

0000c490 <__divmodhi4>:
    c490:	97 fb       	bst	r25, 7
    c492:	09 2e       	mov	r0, r25
    c494:	07 26       	eor	r0, r23
    c496:	0a d0       	rcall	.+20     	; 0xc4ac <__divmodhi4_neg1>
    c498:	77 fd       	sbrc	r23, 7
    c49a:	04 d0       	rcall	.+8      	; 0xc4a4 <__divmodhi4_neg2>
    c49c:	e5 df       	rcall	.-54     	; 0xc468 <__udivmodhi4>
    c49e:	06 d0       	rcall	.+12     	; 0xc4ac <__divmodhi4_neg1>
    c4a0:	00 20       	and	r0, r0
    c4a2:	1a f4       	brpl	.+6      	; 0xc4aa <__divmodhi4_exit>

0000c4a4 <__divmodhi4_neg2>:
    c4a4:	70 95       	com	r23
    c4a6:	61 95       	neg	r22
    c4a8:	7f 4f       	sbci	r23, 0xFF	; 255

0000c4aa <__divmodhi4_exit>:
    c4aa:	08 95       	ret

0000c4ac <__divmodhi4_neg1>:
    c4ac:	f6 f7       	brtc	.-4      	; 0xc4aa <__divmodhi4_exit>
    c4ae:	90 95       	com	r25
    c4b0:	81 95       	neg	r24
    c4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    c4b4:	08 95       	ret

0000c4b6 <__udivmodsi4>:
    c4b6:	a1 e2       	ldi	r26, 0x21	; 33
    c4b8:	1a 2e       	mov	r1, r26
    c4ba:	aa 1b       	sub	r26, r26
    c4bc:	bb 1b       	sub	r27, r27
    c4be:	fd 01       	movw	r30, r26
    c4c0:	0d c0       	rjmp	.+26     	; 0xc4dc <__udivmodsi4_ep>

0000c4c2 <__udivmodsi4_loop>:
    c4c2:	aa 1f       	adc	r26, r26
    c4c4:	bb 1f       	adc	r27, r27
    c4c6:	ee 1f       	adc	r30, r30
    c4c8:	ff 1f       	adc	r31, r31
    c4ca:	a2 17       	cp	r26, r18
    c4cc:	b3 07       	cpc	r27, r19
    c4ce:	e4 07       	cpc	r30, r20
    c4d0:	f5 07       	cpc	r31, r21
    c4d2:	20 f0       	brcs	.+8      	; 0xc4dc <__udivmodsi4_ep>
    c4d4:	a2 1b       	sub	r26, r18
    c4d6:	b3 0b       	sbc	r27, r19
    c4d8:	e4 0b       	sbc	r30, r20
    c4da:	f5 0b       	sbc	r31, r21

0000c4dc <__udivmodsi4_ep>:
    c4dc:	66 1f       	adc	r22, r22
    c4de:	77 1f       	adc	r23, r23
    c4e0:	88 1f       	adc	r24, r24
    c4e2:	99 1f       	adc	r25, r25
    c4e4:	1a 94       	dec	r1
    c4e6:	69 f7       	brne	.-38     	; 0xc4c2 <__udivmodsi4_loop>
    c4e8:	60 95       	com	r22
    c4ea:	70 95       	com	r23
    c4ec:	80 95       	com	r24
    c4ee:	90 95       	com	r25
    c4f0:	9b 01       	movw	r18, r22
    c4f2:	ac 01       	movw	r20, r24
    c4f4:	bd 01       	movw	r22, r26
    c4f6:	cf 01       	movw	r24, r30
    c4f8:	08 95       	ret

0000c4fa <atoi>:
    c4fa:	fc 01       	movw	r30, r24
    c4fc:	88 27       	eor	r24, r24
    c4fe:	99 27       	eor	r25, r25
    c500:	e8 94       	clt
    c502:	21 91       	ld	r18, Z+
    c504:	20 32       	cpi	r18, 0x20	; 32
    c506:	e9 f3       	breq	.-6      	; 0xc502 <atoi+0x8>
    c508:	29 30       	cpi	r18, 0x09	; 9
    c50a:	10 f0       	brcs	.+4      	; 0xc510 <atoi+0x16>
    c50c:	2e 30       	cpi	r18, 0x0E	; 14
    c50e:	c8 f3       	brcs	.-14     	; 0xc502 <atoi+0x8>
    c510:	2b 32       	cpi	r18, 0x2B	; 43
    c512:	41 f0       	breq	.+16     	; 0xc524 <atoi+0x2a>
    c514:	2d 32       	cpi	r18, 0x2D	; 45
    c516:	39 f4       	brne	.+14     	; 0xc526 <atoi+0x2c>
    c518:	68 94       	set
    c51a:	04 c0       	rjmp	.+8      	; 0xc524 <atoi+0x2a>
    c51c:	0e 94 c0 63 	call	0xc780	; 0xc780 <__mulhi_const_10>
    c520:	82 0f       	add	r24, r18
    c522:	91 1d       	adc	r25, r1
    c524:	21 91       	ld	r18, Z+
    c526:	20 53       	subi	r18, 0x30	; 48
    c528:	2a 30       	cpi	r18, 0x0A	; 10
    c52a:	c0 f3       	brcs	.-16     	; 0xc51c <atoi+0x22>
    c52c:	1e f4       	brtc	.+6      	; 0xc534 <atoi+0x3a>
    c52e:	90 95       	com	r25
    c530:	81 95       	neg	r24
    c532:	9f 4f       	sbci	r25, 0xFF	; 255
    c534:	08 95       	ret

0000c536 <atol>:
    c536:	1f 93       	push	r17
    c538:	fc 01       	movw	r30, r24
    c53a:	99 27       	eor	r25, r25
    c53c:	88 27       	eor	r24, r24
    c53e:	bc 01       	movw	r22, r24
    c540:	e8 94       	clt
    c542:	11 91       	ld	r17, Z+
    c544:	10 32       	cpi	r17, 0x20	; 32
    c546:	e9 f3       	breq	.-6      	; 0xc542 <atol+0xc>
    c548:	19 30       	cpi	r17, 0x09	; 9
    c54a:	10 f0       	brcs	.+4      	; 0xc550 <atol+0x1a>
    c54c:	1e 30       	cpi	r17, 0x0E	; 14
    c54e:	c8 f3       	brcs	.-14     	; 0xc542 <atol+0xc>
    c550:	1b 32       	cpi	r17, 0x2B	; 43
    c552:	51 f0       	breq	.+20     	; 0xc568 <atol+0x32>
    c554:	1d 32       	cpi	r17, 0x2D	; 45
    c556:	49 f4       	brne	.+18     	; 0xc56a <atol+0x34>
    c558:	68 94       	set
    c55a:	06 c0       	rjmp	.+12     	; 0xc568 <atol+0x32>
    c55c:	0e 94 ab 63 	call	0xc756	; 0xc756 <__mulsi_const_10>
    c560:	61 0f       	add	r22, r17
    c562:	71 1d       	adc	r23, r1
    c564:	81 1d       	adc	r24, r1
    c566:	91 1d       	adc	r25, r1
    c568:	11 91       	ld	r17, Z+
    c56a:	10 53       	subi	r17, 0x30	; 48
    c56c:	1a 30       	cpi	r17, 0x0A	; 10
    c56e:	b0 f3       	brcs	.-20     	; 0xc55c <atol+0x26>
    c570:	3e f4       	brtc	.+14     	; 0xc580 <atol+0x4a>
    c572:	90 95       	com	r25
    c574:	80 95       	com	r24
    c576:	70 95       	com	r23
    c578:	61 95       	neg	r22
    c57a:	7f 4f       	sbci	r23, 0xFF	; 255
    c57c:	8f 4f       	sbci	r24, 0xFF	; 255
    c57e:	9f 4f       	sbci	r25, 0xFF	; 255
    c580:	1f 91       	pop	r17
    c582:	08 95       	ret

0000c584 <strtok>:
    c584:	44 e1       	ldi	r20, 0x14	; 20
    c586:	59 e3       	ldi	r21, 0x39	; 57
    c588:	0e 94 46 63 	call	0xc68c	; 0xc68c <strtok_r>
    c58c:	08 95       	ret

0000c58e <memmove>:
    c58e:	68 17       	cp	r22, r24
    c590:	79 07       	cpc	r23, r25
    c592:	68 f4       	brcc	.+26     	; 0xc5ae <memmove+0x20>
    c594:	fb 01       	movw	r30, r22
    c596:	dc 01       	movw	r26, r24
    c598:	e4 0f       	add	r30, r20
    c59a:	f5 1f       	adc	r31, r21
    c59c:	a4 0f       	add	r26, r20
    c59e:	b5 1f       	adc	r27, r21
    c5a0:	02 c0       	rjmp	.+4      	; 0xc5a6 <memmove+0x18>
    c5a2:	02 90       	ld	r0, -Z
    c5a4:	0e 92       	st	-X, r0
    c5a6:	41 50       	subi	r20, 0x01	; 1
    c5a8:	50 40       	sbci	r21, 0x00	; 0
    c5aa:	d8 f7       	brcc	.-10     	; 0xc5a2 <memmove+0x14>
    c5ac:	08 95       	ret
    c5ae:	0c 94 fe 65 	jmp	0xcbfc	; 0xcbfc <memcpy>

0000c5b2 <strcasecmp>:
    c5b2:	fb 01       	movw	r30, r22
    c5b4:	dc 01       	movw	r26, r24
    c5b6:	8d 91       	ld	r24, X+
    c5b8:	81 34       	cpi	r24, 0x41	; 65
    c5ba:	1c f0       	brlt	.+6      	; 0xc5c2 <strcasecmp+0x10>
    c5bc:	8b 35       	cpi	r24, 0x5B	; 91
    c5be:	0c f4       	brge	.+2      	; 0xc5c2 <strcasecmp+0x10>
    c5c0:	80 5e       	subi	r24, 0xE0	; 224
    c5c2:	61 91       	ld	r22, Z+
    c5c4:	61 34       	cpi	r22, 0x41	; 65
    c5c6:	1c f0       	brlt	.+6      	; 0xc5ce <strcasecmp+0x1c>
    c5c8:	6b 35       	cpi	r22, 0x5B	; 91
    c5ca:	0c f4       	brge	.+2      	; 0xc5ce <strcasecmp+0x1c>
    c5cc:	60 5e       	subi	r22, 0xE0	; 224
    c5ce:	86 1b       	sub	r24, r22
    c5d0:	61 11       	cpse	r22, r1
    c5d2:	89 f3       	breq	.-30     	; 0xc5b6 <strcasecmp+0x4>
    c5d4:	99 0b       	sbc	r25, r25
    c5d6:	08 95       	ret

0000c5d8 <strcasestr>:
    c5d8:	fb 01       	movw	r30, r22
    c5da:	51 91       	ld	r21, Z+
    c5dc:	55 23       	and	r21, r21
    c5de:	b1 f0       	breq	.+44     	; 0xc60c <strcasestr+0x34>
    c5e0:	bf 01       	movw	r22, r30
    c5e2:	dc 01       	movw	r26, r24
    c5e4:	05 2e       	mov	r0, r21
    c5e6:	4d 91       	ld	r20, X+
    c5e8:	44 23       	and	r20, r20
    c5ea:	69 f0       	breq	.+26     	; 0xc606 <strcasestr+0x2e>
    c5ec:	10 d0       	rcall	.+32     	; 0xc60e <strcasestr+0x36>
    c5ee:	d9 f7       	brne	.-10     	; 0xc5e6 <strcasestr+0xe>
    c5f0:	cd 01       	movw	r24, r26
    c5f2:	01 90       	ld	r0, Z+
    c5f4:	00 20       	and	r0, r0
    c5f6:	49 f0       	breq	.+18     	; 0xc60a <strcasestr+0x32>
    c5f8:	4d 91       	ld	r20, X+
    c5fa:	41 11       	cpse	r20, r1
    c5fc:	08 d0       	rcall	.+16     	; 0xc60e <strcasestr+0x36>
    c5fe:	c9 f3       	breq	.-14     	; 0xc5f2 <strcasestr+0x1a>
    c600:	fb 01       	movw	r30, r22
    c602:	41 11       	cpse	r20, r1
    c604:	ee cf       	rjmp	.-36     	; 0xc5e2 <strcasestr+0xa>
    c606:	81 e0       	ldi	r24, 0x01	; 1
    c608:	90 e0       	ldi	r25, 0x00	; 0
    c60a:	01 97       	sbiw	r24, 0x01	; 1
    c60c:	08 95       	ret
    c60e:	40 25       	eor	r20, r0
    c610:	39 f0       	breq	.+14     	; 0xc620 <strcasestr+0x48>
    c612:	40 32       	cpi	r20, 0x20	; 32
    c614:	29 f4       	brne	.+10     	; 0xc620 <strcasestr+0x48>
    c616:	40 29       	or	r20, r0
    c618:	4b 57       	subi	r20, 0x7B	; 123
    c61a:	46 5e       	subi	r20, 0xE6	; 230
    c61c:	08 f0       	brcs	.+2      	; 0xc620 <strcasestr+0x48>
    c61e:	18 94       	sez
    c620:	08 95       	ret

0000c622 <strcat>:
    c622:	fb 01       	movw	r30, r22
    c624:	dc 01       	movw	r26, r24
    c626:	0d 90       	ld	r0, X+
    c628:	00 20       	and	r0, r0
    c62a:	e9 f7       	brne	.-6      	; 0xc626 <strcat+0x4>
    c62c:	11 97       	sbiw	r26, 0x01	; 1
    c62e:	01 90       	ld	r0, Z+
    c630:	0d 92       	st	X+, r0
    c632:	00 20       	and	r0, r0
    c634:	e1 f7       	brne	.-8      	; 0xc62e <strcat+0xc>
    c636:	08 95       	ret

0000c638 <strcmp>:
    c638:	fb 01       	movw	r30, r22
    c63a:	dc 01       	movw	r26, r24
    c63c:	8d 91       	ld	r24, X+
    c63e:	01 90       	ld	r0, Z+
    c640:	80 19       	sub	r24, r0
    c642:	01 10       	cpse	r0, r1
    c644:	d9 f3       	breq	.-10     	; 0xc63c <strcmp+0x4>
    c646:	99 0b       	sbc	r25, r25
    c648:	08 95       	ret

0000c64a <strcpy>:
    c64a:	fb 01       	movw	r30, r22
    c64c:	dc 01       	movw	r26, r24
    c64e:	01 90       	ld	r0, Z+
    c650:	0d 92       	st	X+, r0
    c652:	00 20       	and	r0, r0
    c654:	e1 f7       	brne	.-8      	; 0xc64e <strcpy+0x4>
    c656:	08 95       	ret

0000c658 <strstr>:
    c658:	fb 01       	movw	r30, r22
    c65a:	51 91       	ld	r21, Z+
    c65c:	55 23       	and	r21, r21
    c65e:	a9 f0       	breq	.+42     	; 0xc68a <strstr+0x32>
    c660:	bf 01       	movw	r22, r30
    c662:	dc 01       	movw	r26, r24
    c664:	4d 91       	ld	r20, X+
    c666:	45 17       	cp	r20, r21
    c668:	41 11       	cpse	r20, r1
    c66a:	e1 f7       	brne	.-8      	; 0xc664 <strstr+0xc>
    c66c:	59 f4       	brne	.+22     	; 0xc684 <strstr+0x2c>
    c66e:	cd 01       	movw	r24, r26
    c670:	01 90       	ld	r0, Z+
    c672:	00 20       	and	r0, r0
    c674:	49 f0       	breq	.+18     	; 0xc688 <strstr+0x30>
    c676:	4d 91       	ld	r20, X+
    c678:	40 15       	cp	r20, r0
    c67a:	41 11       	cpse	r20, r1
    c67c:	c9 f3       	breq	.-14     	; 0xc670 <strstr+0x18>
    c67e:	fb 01       	movw	r30, r22
    c680:	41 11       	cpse	r20, r1
    c682:	ef cf       	rjmp	.-34     	; 0xc662 <strstr+0xa>
    c684:	81 e0       	ldi	r24, 0x01	; 1
    c686:	90 e0       	ldi	r25, 0x00	; 0
    c688:	01 97       	sbiw	r24, 0x01	; 1
    c68a:	08 95       	ret

0000c68c <strtok_r>:
    c68c:	fa 01       	movw	r30, r20
    c68e:	a1 91       	ld	r26, Z+
    c690:	b0 81       	ld	r27, Z
    c692:	00 97       	sbiw	r24, 0x00	; 0
    c694:	19 f4       	brne	.+6      	; 0xc69c <strtok_r+0x10>
    c696:	10 97       	sbiw	r26, 0x00	; 0
    c698:	e1 f0       	breq	.+56     	; 0xc6d2 <strtok_r+0x46>
    c69a:	cd 01       	movw	r24, r26
    c69c:	dc 01       	movw	r26, r24
    c69e:	cd 01       	movw	r24, r26
    c6a0:	0d 90       	ld	r0, X+
    c6a2:	00 20       	and	r0, r0
    c6a4:	11 f4       	brne	.+4      	; 0xc6aa <strtok_r+0x1e>
    c6a6:	c0 01       	movw	r24, r0
    c6a8:	13 c0       	rjmp	.+38     	; 0xc6d0 <strtok_r+0x44>
    c6aa:	fb 01       	movw	r30, r22
    c6ac:	21 91       	ld	r18, Z+
    c6ae:	22 23       	and	r18, r18
    c6b0:	19 f0       	breq	.+6      	; 0xc6b8 <strtok_r+0x2c>
    c6b2:	20 15       	cp	r18, r0
    c6b4:	d9 f7       	brne	.-10     	; 0xc6ac <strtok_r+0x20>
    c6b6:	f3 cf       	rjmp	.-26     	; 0xc69e <strtok_r+0x12>
    c6b8:	fb 01       	movw	r30, r22
    c6ba:	21 91       	ld	r18, Z+
    c6bc:	20 15       	cp	r18, r0
    c6be:	19 f4       	brne	.+6      	; 0xc6c6 <strtok_r+0x3a>
    c6c0:	1e 92       	st	-X, r1
    c6c2:	11 96       	adiw	r26, 0x01	; 1
    c6c4:	06 c0       	rjmp	.+12     	; 0xc6d2 <strtok_r+0x46>
    c6c6:	22 23       	and	r18, r18
    c6c8:	c1 f7       	brne	.-16     	; 0xc6ba <strtok_r+0x2e>
    c6ca:	0d 90       	ld	r0, X+
    c6cc:	00 20       	and	r0, r0
    c6ce:	a1 f7       	brne	.-24     	; 0xc6b8 <strtok_r+0x2c>
    c6d0:	d0 01       	movw	r26, r0
    c6d2:	fa 01       	movw	r30, r20
    c6d4:	a1 93       	st	Z+, r26
    c6d6:	b0 83       	st	Z, r27
    c6d8:	08 95       	ret

0000c6da <strupr>:
    c6da:	dc 01       	movw	r26, r24
    c6dc:	6c 91       	ld	r22, X
    c6de:	61 56       	subi	r22, 0x61	; 97
    c6e0:	6a 31       	cpi	r22, 0x1A	; 26
    c6e2:	08 f0       	brcs	.+2      	; 0xc6e6 <strupr+0xc>
    c6e4:	60 5e       	subi	r22, 0xE0	; 224
    c6e6:	6f 5b       	subi	r22, 0xBF	; 191
    c6e8:	6d 93       	st	X+, r22
    c6ea:	c1 f7       	brne	.-16     	; 0xc6dc <strupr+0x2>
    c6ec:	08 95       	ret

0000c6ee <ltoa>:
    c6ee:	fa 01       	movw	r30, r20
    c6f0:	cf 93       	push	r28
    c6f2:	ff 93       	push	r31
    c6f4:	ef 93       	push	r30
    c6f6:	22 30       	cpi	r18, 0x02	; 2
    c6f8:	44 f1       	brlt	.+80     	; 0xc74a <ltoa+0x5c>
    c6fa:	25 32       	cpi	r18, 0x25	; 37
    c6fc:	34 f5       	brge	.+76     	; 0xc74a <ltoa+0x5c>
    c6fe:	c2 2f       	mov	r28, r18
    c700:	e8 94       	clt
    c702:	ca 30       	cpi	r28, 0x0A	; 10
    c704:	49 f4       	brne	.+18     	; 0xc718 <ltoa+0x2a>
    c706:	97 fb       	bst	r25, 7
    c708:	3e f4       	brtc	.+14     	; 0xc718 <ltoa+0x2a>
    c70a:	90 95       	com	r25
    c70c:	80 95       	com	r24
    c70e:	70 95       	com	r23
    c710:	61 95       	neg	r22
    c712:	7f 4f       	sbci	r23, 0xFF	; 255
    c714:	8f 4f       	sbci	r24, 0xFF	; 255
    c716:	9f 4f       	sbci	r25, 0xFF	; 255
    c718:	2c 2f       	mov	r18, r28
    c71a:	33 27       	eor	r19, r19
    c71c:	44 27       	eor	r20, r20
    c71e:	55 27       	eor	r21, r21
    c720:	ff 93       	push	r31
    c722:	ef 93       	push	r30
    c724:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <__udivmodsi4>
    c728:	ef 91       	pop	r30
    c72a:	ff 91       	pop	r31
    c72c:	60 5d       	subi	r22, 0xD0	; 208
    c72e:	6a 33       	cpi	r22, 0x3A	; 58
    c730:	0c f0       	brlt	.+2      	; 0xc734 <ltoa+0x46>
    c732:	69 5d       	subi	r22, 0xD9	; 217
    c734:	61 93       	st	Z+, r22
    c736:	b9 01       	movw	r22, r18
    c738:	ca 01       	movw	r24, r20
    c73a:	60 50       	subi	r22, 0x00	; 0
    c73c:	70 40       	sbci	r23, 0x00	; 0
    c73e:	80 40       	sbci	r24, 0x00	; 0
    c740:	90 40       	sbci	r25, 0x00	; 0
    c742:	51 f7       	brne	.-44     	; 0xc718 <ltoa+0x2a>
    c744:	16 f4       	brtc	.+4      	; 0xc74a <ltoa+0x5c>
    c746:	cd e2       	ldi	r28, 0x2D	; 45
    c748:	c1 93       	st	Z+, r28
    c74a:	10 82       	st	Z, r1
    c74c:	8f 91       	pop	r24
    c74e:	9f 91       	pop	r25
    c750:	cf 91       	pop	r28
    c752:	0c 94 12 66 	jmp	0xcc24	; 0xcc24 <strrev>

0000c756 <__mulsi_const_10>:
    c756:	59 2f       	mov	r21, r25
    c758:	48 2f       	mov	r20, r24
    c75a:	37 2f       	mov	r19, r23
    c75c:	26 2f       	mov	r18, r22
    c75e:	66 0f       	add	r22, r22
    c760:	77 1f       	adc	r23, r23
    c762:	88 1f       	adc	r24, r24
    c764:	99 1f       	adc	r25, r25
    c766:	66 0f       	add	r22, r22
    c768:	77 1f       	adc	r23, r23
    c76a:	88 1f       	adc	r24, r24
    c76c:	99 1f       	adc	r25, r25
    c76e:	62 0f       	add	r22, r18
    c770:	73 1f       	adc	r23, r19
    c772:	84 1f       	adc	r24, r20
    c774:	95 1f       	adc	r25, r21
    c776:	66 0f       	add	r22, r22
    c778:	77 1f       	adc	r23, r23
    c77a:	88 1f       	adc	r24, r24
    c77c:	99 1f       	adc	r25, r25
    c77e:	08 95       	ret

0000c780 <__mulhi_const_10>:
    c780:	7a e0       	ldi	r23, 0x0A	; 10
    c782:	97 9f       	mul	r25, r23
    c784:	90 2d       	mov	r25, r0
    c786:	87 9f       	mul	r24, r23
    c788:	80 2d       	mov	r24, r0
    c78a:	91 0d       	add	r25, r1
    c78c:	11 24       	eor	r1, r1
    c78e:	08 95       	ret

0000c790 <sprintf>:
    c790:	0f 93       	push	r16
    c792:	1f 93       	push	r17
    c794:	df 93       	push	r29
    c796:	cf 93       	push	r28
    c798:	cd b7       	in	r28, 0x3d	; 61
    c79a:	de b7       	in	r29, 0x3e	; 62
    c79c:	2e 97       	sbiw	r28, 0x0e	; 14
    c79e:	cd bf       	out	0x3d, r28	; 61
    c7a0:	de bf       	out	0x3e, r29	; 62
    c7a2:	0e 89       	ldd	r16, Y+22	; 0x16
    c7a4:	1f 89       	ldd	r17, Y+23	; 0x17
    c7a6:	86 e0       	ldi	r24, 0x06	; 6
    c7a8:	8c 83       	std	Y+4, r24	; 0x04
    c7aa:	09 83       	std	Y+1, r16	; 0x01
    c7ac:	1a 83       	std	Y+2, r17	; 0x02
    c7ae:	8f ef       	ldi	r24, 0xFF	; 255
    c7b0:	9f e7       	ldi	r25, 0x7F	; 127
    c7b2:	8d 83       	std	Y+5, r24	; 0x05
    c7b4:	9e 83       	std	Y+6, r25	; 0x06
    c7b6:	9e 01       	movw	r18, r28
    c7b8:	26 5e       	subi	r18, 0xE6	; 230
    c7ba:	3f 4f       	sbci	r19, 0xFF	; 255
    c7bc:	ce 01       	movw	r24, r28
    c7be:	01 96       	adiw	r24, 0x01	; 1
    c7c0:	68 8d       	ldd	r22, Y+24	; 0x18
    c7c2:	79 8d       	ldd	r23, Y+25	; 0x19
    c7c4:	a9 01       	movw	r20, r18
    c7c6:	0e 94 f3 63 	call	0xc7e6	; 0xc7e6 <vfprintf>
    c7ca:	2f 81       	ldd	r18, Y+7	; 0x07
    c7cc:	38 85       	ldd	r19, Y+8	; 0x08
    c7ce:	02 0f       	add	r16, r18
    c7d0:	13 1f       	adc	r17, r19
    c7d2:	f8 01       	movw	r30, r16
    c7d4:	10 82       	st	Z, r1
    c7d6:	2e 96       	adiw	r28, 0x0e	; 14
    c7d8:	cd bf       	out	0x3d, r28	; 61
    c7da:	de bf       	out	0x3e, r29	; 62
    c7dc:	cf 91       	pop	r28
    c7de:	df 91       	pop	r29
    c7e0:	1f 91       	pop	r17
    c7e2:	0f 91       	pop	r16
    c7e4:	08 95       	ret

0000c7e6 <vfprintf>:
    c7e6:	2f 92       	push	r2
    c7e8:	3f 92       	push	r3
    c7ea:	4f 92       	push	r4
    c7ec:	5f 92       	push	r5
    c7ee:	6f 92       	push	r6
    c7f0:	7f 92       	push	r7
    c7f2:	8f 92       	push	r8
    c7f4:	9f 92       	push	r9
    c7f6:	af 92       	push	r10
    c7f8:	bf 92       	push	r11
    c7fa:	cf 92       	push	r12
    c7fc:	df 92       	push	r13
    c7fe:	ef 92       	push	r14
    c800:	ff 92       	push	r15
    c802:	0f 93       	push	r16
    c804:	1f 93       	push	r17
    c806:	df 93       	push	r29
    c808:	cf 93       	push	r28
    c80a:	cd b7       	in	r28, 0x3d	; 61
    c80c:	de b7       	in	r29, 0x3e	; 62
    c80e:	2b 97       	sbiw	r28, 0x0b	; 11
    c810:	cd bf       	out	0x3d, r28	; 61
    c812:	de bf       	out	0x3e, r29	; 62
    c814:	3c 01       	movw	r6, r24
    c816:	2b 01       	movw	r4, r22
    c818:	5a 01       	movw	r10, r20
    c81a:	fc 01       	movw	r30, r24
    c81c:	16 82       	std	Z+6, r1	; 0x06
    c81e:	17 82       	std	Z+7, r1	; 0x07
    c820:	83 81       	ldd	r24, Z+3	; 0x03
    c822:	81 fd       	sbrc	r24, 1
    c824:	03 c0       	rjmp	.+6      	; 0xc82c <vfprintf+0x46>
    c826:	6f ef       	ldi	r22, 0xFF	; 255
    c828:	7f ef       	ldi	r23, 0xFF	; 255
    c82a:	c6 c1       	rjmp	.+908    	; 0xcbb8 <vfprintf+0x3d2>
    c82c:	9a e0       	ldi	r25, 0x0A	; 10
    c82e:	89 2e       	mov	r8, r25
    c830:	1e 01       	movw	r2, r28
    c832:	08 94       	sec
    c834:	21 1c       	adc	r2, r1
    c836:	31 1c       	adc	r3, r1
    c838:	f3 01       	movw	r30, r6
    c83a:	23 81       	ldd	r18, Z+3	; 0x03
    c83c:	f2 01       	movw	r30, r4
    c83e:	23 fd       	sbrc	r18, 3
    c840:	85 91       	lpm	r24, Z+
    c842:	23 ff       	sbrs	r18, 3
    c844:	81 91       	ld	r24, Z+
    c846:	2f 01       	movw	r4, r30
    c848:	88 23       	and	r24, r24
    c84a:	09 f4       	brne	.+2      	; 0xc84e <vfprintf+0x68>
    c84c:	b2 c1       	rjmp	.+868    	; 0xcbb2 <vfprintf+0x3cc>
    c84e:	85 32       	cpi	r24, 0x25	; 37
    c850:	39 f4       	brne	.+14     	; 0xc860 <vfprintf+0x7a>
    c852:	23 fd       	sbrc	r18, 3
    c854:	85 91       	lpm	r24, Z+
    c856:	23 ff       	sbrs	r18, 3
    c858:	81 91       	ld	r24, Z+
    c85a:	2f 01       	movw	r4, r30
    c85c:	85 32       	cpi	r24, 0x25	; 37
    c85e:	29 f4       	brne	.+10     	; 0xc86a <vfprintf+0x84>
    c860:	90 e0       	ldi	r25, 0x00	; 0
    c862:	b3 01       	movw	r22, r6
    c864:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    c868:	e7 cf       	rjmp	.-50     	; 0xc838 <vfprintf+0x52>
    c86a:	98 2f       	mov	r25, r24
    c86c:	ff 24       	eor	r15, r15
    c86e:	ee 24       	eor	r14, r14
    c870:	99 24       	eor	r9, r9
    c872:	ff e1       	ldi	r31, 0x1F	; 31
    c874:	ff 15       	cp	r31, r15
    c876:	d0 f0       	brcs	.+52     	; 0xc8ac <vfprintf+0xc6>
    c878:	9b 32       	cpi	r25, 0x2B	; 43
    c87a:	69 f0       	breq	.+26     	; 0xc896 <vfprintf+0xb0>
    c87c:	9c 32       	cpi	r25, 0x2C	; 44
    c87e:	28 f4       	brcc	.+10     	; 0xc88a <vfprintf+0xa4>
    c880:	90 32       	cpi	r25, 0x20	; 32
    c882:	59 f0       	breq	.+22     	; 0xc89a <vfprintf+0xb4>
    c884:	93 32       	cpi	r25, 0x23	; 35
    c886:	91 f4       	brne	.+36     	; 0xc8ac <vfprintf+0xc6>
    c888:	0e c0       	rjmp	.+28     	; 0xc8a6 <vfprintf+0xc0>
    c88a:	9d 32       	cpi	r25, 0x2D	; 45
    c88c:	49 f0       	breq	.+18     	; 0xc8a0 <vfprintf+0xba>
    c88e:	90 33       	cpi	r25, 0x30	; 48
    c890:	69 f4       	brne	.+26     	; 0xc8ac <vfprintf+0xc6>
    c892:	41 e0       	ldi	r20, 0x01	; 1
    c894:	24 c0       	rjmp	.+72     	; 0xc8de <vfprintf+0xf8>
    c896:	52 e0       	ldi	r21, 0x02	; 2
    c898:	f5 2a       	or	r15, r21
    c89a:	84 e0       	ldi	r24, 0x04	; 4
    c89c:	f8 2a       	or	r15, r24
    c89e:	28 c0       	rjmp	.+80     	; 0xc8f0 <vfprintf+0x10a>
    c8a0:	98 e0       	ldi	r25, 0x08	; 8
    c8a2:	f9 2a       	or	r15, r25
    c8a4:	25 c0       	rjmp	.+74     	; 0xc8f0 <vfprintf+0x10a>
    c8a6:	e0 e1       	ldi	r30, 0x10	; 16
    c8a8:	fe 2a       	or	r15, r30
    c8aa:	22 c0       	rjmp	.+68     	; 0xc8f0 <vfprintf+0x10a>
    c8ac:	f7 fc       	sbrc	r15, 7
    c8ae:	29 c0       	rjmp	.+82     	; 0xc902 <vfprintf+0x11c>
    c8b0:	89 2f       	mov	r24, r25
    c8b2:	80 53       	subi	r24, 0x30	; 48
    c8b4:	8a 30       	cpi	r24, 0x0A	; 10
    c8b6:	70 f4       	brcc	.+28     	; 0xc8d4 <vfprintf+0xee>
    c8b8:	f6 fe       	sbrs	r15, 6
    c8ba:	05 c0       	rjmp	.+10     	; 0xc8c6 <vfprintf+0xe0>
    c8bc:	98 9c       	mul	r9, r8
    c8be:	90 2c       	mov	r9, r0
    c8c0:	11 24       	eor	r1, r1
    c8c2:	98 0e       	add	r9, r24
    c8c4:	15 c0       	rjmp	.+42     	; 0xc8f0 <vfprintf+0x10a>
    c8c6:	e8 9c       	mul	r14, r8
    c8c8:	e0 2c       	mov	r14, r0
    c8ca:	11 24       	eor	r1, r1
    c8cc:	e8 0e       	add	r14, r24
    c8ce:	f0 e2       	ldi	r31, 0x20	; 32
    c8d0:	ff 2a       	or	r15, r31
    c8d2:	0e c0       	rjmp	.+28     	; 0xc8f0 <vfprintf+0x10a>
    c8d4:	9e 32       	cpi	r25, 0x2E	; 46
    c8d6:	29 f4       	brne	.+10     	; 0xc8e2 <vfprintf+0xfc>
    c8d8:	f6 fc       	sbrc	r15, 6
    c8da:	6b c1       	rjmp	.+726    	; 0xcbb2 <vfprintf+0x3cc>
    c8dc:	40 e4       	ldi	r20, 0x40	; 64
    c8de:	f4 2a       	or	r15, r20
    c8e0:	07 c0       	rjmp	.+14     	; 0xc8f0 <vfprintf+0x10a>
    c8e2:	9c 36       	cpi	r25, 0x6C	; 108
    c8e4:	19 f4       	brne	.+6      	; 0xc8ec <vfprintf+0x106>
    c8e6:	50 e8       	ldi	r21, 0x80	; 128
    c8e8:	f5 2a       	or	r15, r21
    c8ea:	02 c0       	rjmp	.+4      	; 0xc8f0 <vfprintf+0x10a>
    c8ec:	98 36       	cpi	r25, 0x68	; 104
    c8ee:	49 f4       	brne	.+18     	; 0xc902 <vfprintf+0x11c>
    c8f0:	f2 01       	movw	r30, r4
    c8f2:	23 fd       	sbrc	r18, 3
    c8f4:	95 91       	lpm	r25, Z+
    c8f6:	23 ff       	sbrs	r18, 3
    c8f8:	91 91       	ld	r25, Z+
    c8fa:	2f 01       	movw	r4, r30
    c8fc:	99 23       	and	r25, r25
    c8fe:	09 f0       	breq	.+2      	; 0xc902 <vfprintf+0x11c>
    c900:	b8 cf       	rjmp	.-144    	; 0xc872 <vfprintf+0x8c>
    c902:	89 2f       	mov	r24, r25
    c904:	85 54       	subi	r24, 0x45	; 69
    c906:	83 30       	cpi	r24, 0x03	; 3
    c908:	18 f0       	brcs	.+6      	; 0xc910 <vfprintf+0x12a>
    c90a:	80 52       	subi	r24, 0x20	; 32
    c90c:	83 30       	cpi	r24, 0x03	; 3
    c90e:	38 f4       	brcc	.+14     	; 0xc91e <vfprintf+0x138>
    c910:	44 e0       	ldi	r20, 0x04	; 4
    c912:	50 e0       	ldi	r21, 0x00	; 0
    c914:	a4 0e       	add	r10, r20
    c916:	b5 1e       	adc	r11, r21
    c918:	5f e3       	ldi	r21, 0x3F	; 63
    c91a:	59 83       	std	Y+1, r21	; 0x01
    c91c:	0f c0       	rjmp	.+30     	; 0xc93c <vfprintf+0x156>
    c91e:	93 36       	cpi	r25, 0x63	; 99
    c920:	31 f0       	breq	.+12     	; 0xc92e <vfprintf+0x148>
    c922:	93 37       	cpi	r25, 0x73	; 115
    c924:	79 f0       	breq	.+30     	; 0xc944 <vfprintf+0x15e>
    c926:	93 35       	cpi	r25, 0x53	; 83
    c928:	09 f0       	breq	.+2      	; 0xc92c <vfprintf+0x146>
    c92a:	56 c0       	rjmp	.+172    	; 0xc9d8 <vfprintf+0x1f2>
    c92c:	20 c0       	rjmp	.+64     	; 0xc96e <vfprintf+0x188>
    c92e:	f5 01       	movw	r30, r10
    c930:	80 81       	ld	r24, Z
    c932:	89 83       	std	Y+1, r24	; 0x01
    c934:	42 e0       	ldi	r20, 0x02	; 2
    c936:	50 e0       	ldi	r21, 0x00	; 0
    c938:	a4 0e       	add	r10, r20
    c93a:	b5 1e       	adc	r11, r21
    c93c:	61 01       	movw	r12, r2
    c93e:	01 e0       	ldi	r16, 0x01	; 1
    c940:	10 e0       	ldi	r17, 0x00	; 0
    c942:	12 c0       	rjmp	.+36     	; 0xc968 <vfprintf+0x182>
    c944:	f5 01       	movw	r30, r10
    c946:	c0 80       	ld	r12, Z
    c948:	d1 80       	ldd	r13, Z+1	; 0x01
    c94a:	f6 fc       	sbrc	r15, 6
    c94c:	03 c0       	rjmp	.+6      	; 0xc954 <vfprintf+0x16e>
    c94e:	6f ef       	ldi	r22, 0xFF	; 255
    c950:	7f ef       	ldi	r23, 0xFF	; 255
    c952:	02 c0       	rjmp	.+4      	; 0xc958 <vfprintf+0x172>
    c954:	69 2d       	mov	r22, r9
    c956:	70 e0       	ldi	r23, 0x00	; 0
    c958:	42 e0       	ldi	r20, 0x02	; 2
    c95a:	50 e0       	ldi	r21, 0x00	; 0
    c95c:	a4 0e       	add	r10, r20
    c95e:	b5 1e       	adc	r11, r21
    c960:	c6 01       	movw	r24, r12
    c962:	0e 94 07 66 	call	0xcc0e	; 0xcc0e <strnlen>
    c966:	8c 01       	movw	r16, r24
    c968:	5f e7       	ldi	r21, 0x7F	; 127
    c96a:	f5 22       	and	r15, r21
    c96c:	14 c0       	rjmp	.+40     	; 0xc996 <vfprintf+0x1b0>
    c96e:	f5 01       	movw	r30, r10
    c970:	c0 80       	ld	r12, Z
    c972:	d1 80       	ldd	r13, Z+1	; 0x01
    c974:	f6 fc       	sbrc	r15, 6
    c976:	03 c0       	rjmp	.+6      	; 0xc97e <vfprintf+0x198>
    c978:	6f ef       	ldi	r22, 0xFF	; 255
    c97a:	7f ef       	ldi	r23, 0xFF	; 255
    c97c:	02 c0       	rjmp	.+4      	; 0xc982 <vfprintf+0x19c>
    c97e:	69 2d       	mov	r22, r9
    c980:	70 e0       	ldi	r23, 0x00	; 0
    c982:	42 e0       	ldi	r20, 0x02	; 2
    c984:	50 e0       	ldi	r21, 0x00	; 0
    c986:	a4 0e       	add	r10, r20
    c988:	b5 1e       	adc	r11, r21
    c98a:	c6 01       	movw	r24, r12
    c98c:	0e 94 f3 65 	call	0xcbe6	; 0xcbe6 <strnlen_P>
    c990:	8c 01       	movw	r16, r24
    c992:	50 e8       	ldi	r21, 0x80	; 128
    c994:	f5 2a       	or	r15, r21
    c996:	f3 fe       	sbrs	r15, 3
    c998:	07 c0       	rjmp	.+14     	; 0xc9a8 <vfprintf+0x1c2>
    c99a:	1a c0       	rjmp	.+52     	; 0xc9d0 <vfprintf+0x1ea>
    c99c:	80 e2       	ldi	r24, 0x20	; 32
    c99e:	90 e0       	ldi	r25, 0x00	; 0
    c9a0:	b3 01       	movw	r22, r6
    c9a2:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    c9a6:	ea 94       	dec	r14
    c9a8:	8e 2d       	mov	r24, r14
    c9aa:	90 e0       	ldi	r25, 0x00	; 0
    c9ac:	08 17       	cp	r16, r24
    c9ae:	19 07       	cpc	r17, r25
    c9b0:	a8 f3       	brcs	.-22     	; 0xc99c <vfprintf+0x1b6>
    c9b2:	0e c0       	rjmp	.+28     	; 0xc9d0 <vfprintf+0x1ea>
    c9b4:	f6 01       	movw	r30, r12
    c9b6:	f7 fc       	sbrc	r15, 7
    c9b8:	85 91       	lpm	r24, Z+
    c9ba:	f7 fe       	sbrs	r15, 7
    c9bc:	81 91       	ld	r24, Z+
    c9be:	6f 01       	movw	r12, r30
    c9c0:	90 e0       	ldi	r25, 0x00	; 0
    c9c2:	b3 01       	movw	r22, r6
    c9c4:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    c9c8:	e1 10       	cpse	r14, r1
    c9ca:	ea 94       	dec	r14
    c9cc:	01 50       	subi	r16, 0x01	; 1
    c9ce:	10 40       	sbci	r17, 0x00	; 0
    c9d0:	01 15       	cp	r16, r1
    c9d2:	11 05       	cpc	r17, r1
    c9d4:	79 f7       	brne	.-34     	; 0xc9b4 <vfprintf+0x1ce>
    c9d6:	ea c0       	rjmp	.+468    	; 0xcbac <vfprintf+0x3c6>
    c9d8:	94 36       	cpi	r25, 0x64	; 100
    c9da:	11 f0       	breq	.+4      	; 0xc9e0 <vfprintf+0x1fa>
    c9dc:	99 36       	cpi	r25, 0x69	; 105
    c9de:	69 f5       	brne	.+90     	; 0xca3a <vfprintf+0x254>
    c9e0:	f7 fe       	sbrs	r15, 7
    c9e2:	08 c0       	rjmp	.+16     	; 0xc9f4 <vfprintf+0x20e>
    c9e4:	f5 01       	movw	r30, r10
    c9e6:	20 81       	ld	r18, Z
    c9e8:	31 81       	ldd	r19, Z+1	; 0x01
    c9ea:	42 81       	ldd	r20, Z+2	; 0x02
    c9ec:	53 81       	ldd	r21, Z+3	; 0x03
    c9ee:	84 e0       	ldi	r24, 0x04	; 4
    c9f0:	90 e0       	ldi	r25, 0x00	; 0
    c9f2:	0a c0       	rjmp	.+20     	; 0xca08 <vfprintf+0x222>
    c9f4:	f5 01       	movw	r30, r10
    c9f6:	80 81       	ld	r24, Z
    c9f8:	91 81       	ldd	r25, Z+1	; 0x01
    c9fa:	9c 01       	movw	r18, r24
    c9fc:	44 27       	eor	r20, r20
    c9fe:	37 fd       	sbrc	r19, 7
    ca00:	40 95       	com	r20
    ca02:	54 2f       	mov	r21, r20
    ca04:	82 e0       	ldi	r24, 0x02	; 2
    ca06:	90 e0       	ldi	r25, 0x00	; 0
    ca08:	a8 0e       	add	r10, r24
    ca0a:	b9 1e       	adc	r11, r25
    ca0c:	9f e6       	ldi	r25, 0x6F	; 111
    ca0e:	f9 22       	and	r15, r25
    ca10:	57 ff       	sbrs	r21, 7
    ca12:	09 c0       	rjmp	.+18     	; 0xca26 <vfprintf+0x240>
    ca14:	50 95       	com	r21
    ca16:	40 95       	com	r20
    ca18:	30 95       	com	r19
    ca1a:	21 95       	neg	r18
    ca1c:	3f 4f       	sbci	r19, 0xFF	; 255
    ca1e:	4f 4f       	sbci	r20, 0xFF	; 255
    ca20:	5f 4f       	sbci	r21, 0xFF	; 255
    ca22:	e0 e8       	ldi	r30, 0x80	; 128
    ca24:	fe 2a       	or	r15, r30
    ca26:	ca 01       	movw	r24, r20
    ca28:	b9 01       	movw	r22, r18
    ca2a:	a1 01       	movw	r20, r2
    ca2c:	2a e0       	ldi	r18, 0x0A	; 10
    ca2e:	30 e0       	ldi	r19, 0x00	; 0
    ca30:	0e 94 4e 66 	call	0xcc9c	; 0xcc9c <__ultoa_invert>
    ca34:	d8 2e       	mov	r13, r24
    ca36:	d2 18       	sub	r13, r2
    ca38:	40 c0       	rjmp	.+128    	; 0xcaba <vfprintf+0x2d4>
    ca3a:	95 37       	cpi	r25, 0x75	; 117
    ca3c:	29 f4       	brne	.+10     	; 0xca48 <vfprintf+0x262>
    ca3e:	1f 2d       	mov	r17, r15
    ca40:	1f 7e       	andi	r17, 0xEF	; 239
    ca42:	2a e0       	ldi	r18, 0x0A	; 10
    ca44:	30 e0       	ldi	r19, 0x00	; 0
    ca46:	1d c0       	rjmp	.+58     	; 0xca82 <vfprintf+0x29c>
    ca48:	1f 2d       	mov	r17, r15
    ca4a:	19 7f       	andi	r17, 0xF9	; 249
    ca4c:	9f 36       	cpi	r25, 0x6F	; 111
    ca4e:	61 f0       	breq	.+24     	; 0xca68 <vfprintf+0x282>
    ca50:	90 37       	cpi	r25, 0x70	; 112
    ca52:	20 f4       	brcc	.+8      	; 0xca5c <vfprintf+0x276>
    ca54:	98 35       	cpi	r25, 0x58	; 88
    ca56:	09 f0       	breq	.+2      	; 0xca5a <vfprintf+0x274>
    ca58:	ac c0       	rjmp	.+344    	; 0xcbb2 <vfprintf+0x3cc>
    ca5a:	0f c0       	rjmp	.+30     	; 0xca7a <vfprintf+0x294>
    ca5c:	90 37       	cpi	r25, 0x70	; 112
    ca5e:	39 f0       	breq	.+14     	; 0xca6e <vfprintf+0x288>
    ca60:	98 37       	cpi	r25, 0x78	; 120
    ca62:	09 f0       	breq	.+2      	; 0xca66 <vfprintf+0x280>
    ca64:	a6 c0       	rjmp	.+332    	; 0xcbb2 <vfprintf+0x3cc>
    ca66:	04 c0       	rjmp	.+8      	; 0xca70 <vfprintf+0x28a>
    ca68:	28 e0       	ldi	r18, 0x08	; 8
    ca6a:	30 e0       	ldi	r19, 0x00	; 0
    ca6c:	0a c0       	rjmp	.+20     	; 0xca82 <vfprintf+0x29c>
    ca6e:	10 61       	ori	r17, 0x10	; 16
    ca70:	14 fd       	sbrc	r17, 4
    ca72:	14 60       	ori	r17, 0x04	; 4
    ca74:	20 e1       	ldi	r18, 0x10	; 16
    ca76:	30 e0       	ldi	r19, 0x00	; 0
    ca78:	04 c0       	rjmp	.+8      	; 0xca82 <vfprintf+0x29c>
    ca7a:	14 fd       	sbrc	r17, 4
    ca7c:	16 60       	ori	r17, 0x06	; 6
    ca7e:	20 e1       	ldi	r18, 0x10	; 16
    ca80:	32 e0       	ldi	r19, 0x02	; 2
    ca82:	17 ff       	sbrs	r17, 7
    ca84:	08 c0       	rjmp	.+16     	; 0xca96 <vfprintf+0x2b0>
    ca86:	f5 01       	movw	r30, r10
    ca88:	60 81       	ld	r22, Z
    ca8a:	71 81       	ldd	r23, Z+1	; 0x01
    ca8c:	82 81       	ldd	r24, Z+2	; 0x02
    ca8e:	93 81       	ldd	r25, Z+3	; 0x03
    ca90:	44 e0       	ldi	r20, 0x04	; 4
    ca92:	50 e0       	ldi	r21, 0x00	; 0
    ca94:	08 c0       	rjmp	.+16     	; 0xcaa6 <vfprintf+0x2c0>
    ca96:	f5 01       	movw	r30, r10
    ca98:	80 81       	ld	r24, Z
    ca9a:	91 81       	ldd	r25, Z+1	; 0x01
    ca9c:	bc 01       	movw	r22, r24
    ca9e:	80 e0       	ldi	r24, 0x00	; 0
    caa0:	90 e0       	ldi	r25, 0x00	; 0
    caa2:	42 e0       	ldi	r20, 0x02	; 2
    caa4:	50 e0       	ldi	r21, 0x00	; 0
    caa6:	a4 0e       	add	r10, r20
    caa8:	b5 1e       	adc	r11, r21
    caaa:	a1 01       	movw	r20, r2
    caac:	0e 94 4e 66 	call	0xcc9c	; 0xcc9c <__ultoa_invert>
    cab0:	d8 2e       	mov	r13, r24
    cab2:	d2 18       	sub	r13, r2
    cab4:	8f e7       	ldi	r24, 0x7F	; 127
    cab6:	f8 2e       	mov	r15, r24
    cab8:	f1 22       	and	r15, r17
    caba:	f6 fe       	sbrs	r15, 6
    cabc:	0b c0       	rjmp	.+22     	; 0xcad4 <vfprintf+0x2ee>
    cabe:	5e ef       	ldi	r21, 0xFE	; 254
    cac0:	f5 22       	and	r15, r21
    cac2:	d9 14       	cp	r13, r9
    cac4:	38 f4       	brcc	.+14     	; 0xcad4 <vfprintf+0x2ee>
    cac6:	f4 fe       	sbrs	r15, 4
    cac8:	07 c0       	rjmp	.+14     	; 0xcad8 <vfprintf+0x2f2>
    caca:	f2 fc       	sbrc	r15, 2
    cacc:	05 c0       	rjmp	.+10     	; 0xcad8 <vfprintf+0x2f2>
    cace:	8f ee       	ldi	r24, 0xEF	; 239
    cad0:	f8 22       	and	r15, r24
    cad2:	02 c0       	rjmp	.+4      	; 0xcad8 <vfprintf+0x2f2>
    cad4:	1d 2d       	mov	r17, r13
    cad6:	01 c0       	rjmp	.+2      	; 0xcada <vfprintf+0x2f4>
    cad8:	19 2d       	mov	r17, r9
    cada:	f4 fe       	sbrs	r15, 4
    cadc:	0d c0       	rjmp	.+26     	; 0xcaf8 <vfprintf+0x312>
    cade:	fe 01       	movw	r30, r28
    cae0:	ed 0d       	add	r30, r13
    cae2:	f1 1d       	adc	r31, r1
    cae4:	80 81       	ld	r24, Z
    cae6:	80 33       	cpi	r24, 0x30	; 48
    cae8:	19 f4       	brne	.+6      	; 0xcaf0 <vfprintf+0x30a>
    caea:	99 ee       	ldi	r25, 0xE9	; 233
    caec:	f9 22       	and	r15, r25
    caee:	08 c0       	rjmp	.+16     	; 0xcb00 <vfprintf+0x31a>
    caf0:	1f 5f       	subi	r17, 0xFF	; 255
    caf2:	f2 fe       	sbrs	r15, 2
    caf4:	05 c0       	rjmp	.+10     	; 0xcb00 <vfprintf+0x31a>
    caf6:	03 c0       	rjmp	.+6      	; 0xcafe <vfprintf+0x318>
    caf8:	8f 2d       	mov	r24, r15
    cafa:	86 78       	andi	r24, 0x86	; 134
    cafc:	09 f0       	breq	.+2      	; 0xcb00 <vfprintf+0x31a>
    cafe:	1f 5f       	subi	r17, 0xFF	; 255
    cb00:	0f 2d       	mov	r16, r15
    cb02:	f3 fc       	sbrc	r15, 3
    cb04:	14 c0       	rjmp	.+40     	; 0xcb2e <vfprintf+0x348>
    cb06:	f0 fe       	sbrs	r15, 0
    cb08:	0f c0       	rjmp	.+30     	; 0xcb28 <vfprintf+0x342>
    cb0a:	1e 15       	cp	r17, r14
    cb0c:	10 f0       	brcs	.+4      	; 0xcb12 <vfprintf+0x32c>
    cb0e:	9d 2c       	mov	r9, r13
    cb10:	0b c0       	rjmp	.+22     	; 0xcb28 <vfprintf+0x342>
    cb12:	9d 2c       	mov	r9, r13
    cb14:	9e 0c       	add	r9, r14
    cb16:	91 1a       	sub	r9, r17
    cb18:	1e 2d       	mov	r17, r14
    cb1a:	06 c0       	rjmp	.+12     	; 0xcb28 <vfprintf+0x342>
    cb1c:	80 e2       	ldi	r24, 0x20	; 32
    cb1e:	90 e0       	ldi	r25, 0x00	; 0
    cb20:	b3 01       	movw	r22, r6
    cb22:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    cb26:	1f 5f       	subi	r17, 0xFF	; 255
    cb28:	1e 15       	cp	r17, r14
    cb2a:	c0 f3       	brcs	.-16     	; 0xcb1c <vfprintf+0x336>
    cb2c:	04 c0       	rjmp	.+8      	; 0xcb36 <vfprintf+0x350>
    cb2e:	1e 15       	cp	r17, r14
    cb30:	10 f4       	brcc	.+4      	; 0xcb36 <vfprintf+0x350>
    cb32:	e1 1a       	sub	r14, r17
    cb34:	01 c0       	rjmp	.+2      	; 0xcb38 <vfprintf+0x352>
    cb36:	ee 24       	eor	r14, r14
    cb38:	04 ff       	sbrs	r16, 4
    cb3a:	0f c0       	rjmp	.+30     	; 0xcb5a <vfprintf+0x374>
    cb3c:	80 e3       	ldi	r24, 0x30	; 48
    cb3e:	90 e0       	ldi	r25, 0x00	; 0
    cb40:	b3 01       	movw	r22, r6
    cb42:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    cb46:	02 ff       	sbrs	r16, 2
    cb48:	1d c0       	rjmp	.+58     	; 0xcb84 <vfprintf+0x39e>
    cb4a:	01 fd       	sbrc	r16, 1
    cb4c:	03 c0       	rjmp	.+6      	; 0xcb54 <vfprintf+0x36e>
    cb4e:	88 e7       	ldi	r24, 0x78	; 120
    cb50:	90 e0       	ldi	r25, 0x00	; 0
    cb52:	0e c0       	rjmp	.+28     	; 0xcb70 <vfprintf+0x38a>
    cb54:	88 e5       	ldi	r24, 0x58	; 88
    cb56:	90 e0       	ldi	r25, 0x00	; 0
    cb58:	0b c0       	rjmp	.+22     	; 0xcb70 <vfprintf+0x38a>
    cb5a:	80 2f       	mov	r24, r16
    cb5c:	86 78       	andi	r24, 0x86	; 134
    cb5e:	91 f0       	breq	.+36     	; 0xcb84 <vfprintf+0x39e>
    cb60:	01 ff       	sbrs	r16, 1
    cb62:	02 c0       	rjmp	.+4      	; 0xcb68 <vfprintf+0x382>
    cb64:	8b e2       	ldi	r24, 0x2B	; 43
    cb66:	01 c0       	rjmp	.+2      	; 0xcb6a <vfprintf+0x384>
    cb68:	80 e2       	ldi	r24, 0x20	; 32
    cb6a:	f7 fc       	sbrc	r15, 7
    cb6c:	8d e2       	ldi	r24, 0x2D	; 45
    cb6e:	90 e0       	ldi	r25, 0x00	; 0
    cb70:	b3 01       	movw	r22, r6
    cb72:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    cb76:	06 c0       	rjmp	.+12     	; 0xcb84 <vfprintf+0x39e>
    cb78:	80 e3       	ldi	r24, 0x30	; 48
    cb7a:	90 e0       	ldi	r25, 0x00	; 0
    cb7c:	b3 01       	movw	r22, r6
    cb7e:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    cb82:	9a 94       	dec	r9
    cb84:	d9 14       	cp	r13, r9
    cb86:	c0 f3       	brcs	.-16     	; 0xcb78 <vfprintf+0x392>
    cb88:	da 94       	dec	r13
    cb8a:	f1 01       	movw	r30, r2
    cb8c:	ed 0d       	add	r30, r13
    cb8e:	f1 1d       	adc	r31, r1
    cb90:	80 81       	ld	r24, Z
    cb92:	90 e0       	ldi	r25, 0x00	; 0
    cb94:	b3 01       	movw	r22, r6
    cb96:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    cb9a:	dd 20       	and	r13, r13
    cb9c:	a9 f7       	brne	.-22     	; 0xcb88 <vfprintf+0x3a2>
    cb9e:	06 c0       	rjmp	.+12     	; 0xcbac <vfprintf+0x3c6>
    cba0:	80 e2       	ldi	r24, 0x20	; 32
    cba2:	90 e0       	ldi	r25, 0x00	; 0
    cba4:	b3 01       	movw	r22, r6
    cba6:	0e 94 22 66 	call	0xcc44	; 0xcc44 <fputc>
    cbaa:	ea 94       	dec	r14
    cbac:	ee 20       	and	r14, r14
    cbae:	c1 f7       	brne	.-16     	; 0xcba0 <vfprintf+0x3ba>
    cbb0:	43 ce       	rjmp	.-890    	; 0xc838 <vfprintf+0x52>
    cbb2:	f3 01       	movw	r30, r6
    cbb4:	66 81       	ldd	r22, Z+6	; 0x06
    cbb6:	77 81       	ldd	r23, Z+7	; 0x07
    cbb8:	cb 01       	movw	r24, r22
    cbba:	2b 96       	adiw	r28, 0x0b	; 11
    cbbc:	cd bf       	out	0x3d, r28	; 61
    cbbe:	de bf       	out	0x3e, r29	; 62
    cbc0:	cf 91       	pop	r28
    cbc2:	df 91       	pop	r29
    cbc4:	1f 91       	pop	r17
    cbc6:	0f 91       	pop	r16
    cbc8:	ff 90       	pop	r15
    cbca:	ef 90       	pop	r14
    cbcc:	df 90       	pop	r13
    cbce:	cf 90       	pop	r12
    cbd0:	bf 90       	pop	r11
    cbd2:	af 90       	pop	r10
    cbd4:	9f 90       	pop	r9
    cbd6:	8f 90       	pop	r8
    cbd8:	7f 90       	pop	r7
    cbda:	6f 90       	pop	r6
    cbdc:	5f 90       	pop	r5
    cbde:	4f 90       	pop	r4
    cbe0:	3f 90       	pop	r3
    cbe2:	2f 90       	pop	r2
    cbe4:	08 95       	ret

0000cbe6 <strnlen_P>:
    cbe6:	fc 01       	movw	r30, r24
    cbe8:	05 90       	lpm	r0, Z+
    cbea:	61 50       	subi	r22, 0x01	; 1
    cbec:	70 40       	sbci	r23, 0x00	; 0
    cbee:	01 10       	cpse	r0, r1
    cbf0:	d8 f7       	brcc	.-10     	; 0xcbe8 <strnlen_P+0x2>
    cbf2:	80 95       	com	r24
    cbf4:	90 95       	com	r25
    cbf6:	8e 0f       	add	r24, r30
    cbf8:	9f 1f       	adc	r25, r31
    cbfa:	08 95       	ret

0000cbfc <memcpy>:
    cbfc:	fb 01       	movw	r30, r22
    cbfe:	dc 01       	movw	r26, r24
    cc00:	02 c0       	rjmp	.+4      	; 0xcc06 <memcpy+0xa>
    cc02:	01 90       	ld	r0, Z+
    cc04:	0d 92       	st	X+, r0
    cc06:	41 50       	subi	r20, 0x01	; 1
    cc08:	50 40       	sbci	r21, 0x00	; 0
    cc0a:	d8 f7       	brcc	.-10     	; 0xcc02 <memcpy+0x6>
    cc0c:	08 95       	ret

0000cc0e <strnlen>:
    cc0e:	fc 01       	movw	r30, r24
    cc10:	61 50       	subi	r22, 0x01	; 1
    cc12:	70 40       	sbci	r23, 0x00	; 0
    cc14:	01 90       	ld	r0, Z+
    cc16:	01 10       	cpse	r0, r1
    cc18:	d8 f7       	brcc	.-10     	; 0xcc10 <strnlen+0x2>
    cc1a:	80 95       	com	r24
    cc1c:	90 95       	com	r25
    cc1e:	8e 0f       	add	r24, r30
    cc20:	9f 1f       	adc	r25, r31
    cc22:	08 95       	ret

0000cc24 <strrev>:
    cc24:	dc 01       	movw	r26, r24
    cc26:	fc 01       	movw	r30, r24
    cc28:	67 2f       	mov	r22, r23
    cc2a:	71 91       	ld	r23, Z+
    cc2c:	77 23       	and	r23, r23
    cc2e:	e1 f7       	brne	.-8      	; 0xcc28 <strrev+0x4>
    cc30:	32 97       	sbiw	r30, 0x02	; 2
    cc32:	04 c0       	rjmp	.+8      	; 0xcc3c <strrev+0x18>
    cc34:	7c 91       	ld	r23, X
    cc36:	6d 93       	st	X+, r22
    cc38:	70 83       	st	Z, r23
    cc3a:	62 91       	ld	r22, -Z
    cc3c:	ae 17       	cp	r26, r30
    cc3e:	bf 07       	cpc	r27, r31
    cc40:	c8 f3       	brcs	.-14     	; 0xcc34 <strrev+0x10>
    cc42:	08 95       	ret

0000cc44 <fputc>:
    cc44:	0f 93       	push	r16
    cc46:	1f 93       	push	r17
    cc48:	cf 93       	push	r28
    cc4a:	df 93       	push	r29
    cc4c:	8c 01       	movw	r16, r24
    cc4e:	eb 01       	movw	r28, r22
    cc50:	8b 81       	ldd	r24, Y+3	; 0x03
    cc52:	81 ff       	sbrs	r24, 1
    cc54:	1b c0       	rjmp	.+54     	; 0xcc8c <fputc+0x48>
    cc56:	82 ff       	sbrs	r24, 2
    cc58:	0d c0       	rjmp	.+26     	; 0xcc74 <fputc+0x30>
    cc5a:	2e 81       	ldd	r18, Y+6	; 0x06
    cc5c:	3f 81       	ldd	r19, Y+7	; 0x07
    cc5e:	8c 81       	ldd	r24, Y+4	; 0x04
    cc60:	9d 81       	ldd	r25, Y+5	; 0x05
    cc62:	28 17       	cp	r18, r24
    cc64:	39 07       	cpc	r19, r25
    cc66:	64 f4       	brge	.+24     	; 0xcc80 <fputc+0x3c>
    cc68:	e8 81       	ld	r30, Y
    cc6a:	f9 81       	ldd	r31, Y+1	; 0x01
    cc6c:	01 93       	st	Z+, r16
    cc6e:	e8 83       	st	Y, r30
    cc70:	f9 83       	std	Y+1, r31	; 0x01
    cc72:	06 c0       	rjmp	.+12     	; 0xcc80 <fputc+0x3c>
    cc74:	e8 85       	ldd	r30, Y+8	; 0x08
    cc76:	f9 85       	ldd	r31, Y+9	; 0x09
    cc78:	80 2f       	mov	r24, r16
    cc7a:	19 95       	eicall
    cc7c:	89 2b       	or	r24, r25
    cc7e:	31 f4       	brne	.+12     	; 0xcc8c <fputc+0x48>
    cc80:	8e 81       	ldd	r24, Y+6	; 0x06
    cc82:	9f 81       	ldd	r25, Y+7	; 0x07
    cc84:	01 96       	adiw	r24, 0x01	; 1
    cc86:	8e 83       	std	Y+6, r24	; 0x06
    cc88:	9f 83       	std	Y+7, r25	; 0x07
    cc8a:	02 c0       	rjmp	.+4      	; 0xcc90 <fputc+0x4c>
    cc8c:	0f ef       	ldi	r16, 0xFF	; 255
    cc8e:	1f ef       	ldi	r17, 0xFF	; 255
    cc90:	c8 01       	movw	r24, r16
    cc92:	df 91       	pop	r29
    cc94:	cf 91       	pop	r28
    cc96:	1f 91       	pop	r17
    cc98:	0f 91       	pop	r16
    cc9a:	08 95       	ret

0000cc9c <__ultoa_invert>:
    cc9c:	fa 01       	movw	r30, r20
    cc9e:	aa 27       	eor	r26, r26
    cca0:	28 30       	cpi	r18, 0x08	; 8
    cca2:	51 f1       	breq	.+84     	; 0xccf8 <__ultoa_invert+0x5c>
    cca4:	20 31       	cpi	r18, 0x10	; 16
    cca6:	81 f1       	breq	.+96     	; 0xcd08 <__ultoa_invert+0x6c>
    cca8:	e8 94       	clt
    ccaa:	6f 93       	push	r22
    ccac:	6e 7f       	andi	r22, 0xFE	; 254
    ccae:	6e 5f       	subi	r22, 0xFE	; 254
    ccb0:	7f 4f       	sbci	r23, 0xFF	; 255
    ccb2:	8f 4f       	sbci	r24, 0xFF	; 255
    ccb4:	9f 4f       	sbci	r25, 0xFF	; 255
    ccb6:	af 4f       	sbci	r26, 0xFF	; 255
    ccb8:	b1 e0       	ldi	r27, 0x01	; 1
    ccba:	3e d0       	rcall	.+124    	; 0xcd38 <__ultoa_invert+0x9c>
    ccbc:	b4 e0       	ldi	r27, 0x04	; 4
    ccbe:	3c d0       	rcall	.+120    	; 0xcd38 <__ultoa_invert+0x9c>
    ccc0:	67 0f       	add	r22, r23
    ccc2:	78 1f       	adc	r23, r24
    ccc4:	89 1f       	adc	r24, r25
    ccc6:	9a 1f       	adc	r25, r26
    ccc8:	a1 1d       	adc	r26, r1
    ccca:	68 0f       	add	r22, r24
    cccc:	79 1f       	adc	r23, r25
    ccce:	8a 1f       	adc	r24, r26
    ccd0:	91 1d       	adc	r25, r1
    ccd2:	a1 1d       	adc	r26, r1
    ccd4:	6a 0f       	add	r22, r26
    ccd6:	71 1d       	adc	r23, r1
    ccd8:	81 1d       	adc	r24, r1
    ccda:	91 1d       	adc	r25, r1
    ccdc:	a1 1d       	adc	r26, r1
    ccde:	20 d0       	rcall	.+64     	; 0xcd20 <__ultoa_invert+0x84>
    cce0:	09 f4       	brne	.+2      	; 0xcce4 <__ultoa_invert+0x48>
    cce2:	68 94       	set
    cce4:	3f 91       	pop	r19
    cce6:	2a e0       	ldi	r18, 0x0A	; 10
    cce8:	26 9f       	mul	r18, r22
    ccea:	11 24       	eor	r1, r1
    ccec:	30 19       	sub	r19, r0
    ccee:	30 5d       	subi	r19, 0xD0	; 208
    ccf0:	31 93       	st	Z+, r19
    ccf2:	de f6       	brtc	.-74     	; 0xccaa <__ultoa_invert+0xe>
    ccf4:	cf 01       	movw	r24, r30
    ccf6:	08 95       	ret
    ccf8:	46 2f       	mov	r20, r22
    ccfa:	47 70       	andi	r20, 0x07	; 7
    ccfc:	40 5d       	subi	r20, 0xD0	; 208
    ccfe:	41 93       	st	Z+, r20
    cd00:	b3 e0       	ldi	r27, 0x03	; 3
    cd02:	0f d0       	rcall	.+30     	; 0xcd22 <__ultoa_invert+0x86>
    cd04:	c9 f7       	brne	.-14     	; 0xccf8 <__ultoa_invert+0x5c>
    cd06:	f6 cf       	rjmp	.-20     	; 0xccf4 <__ultoa_invert+0x58>
    cd08:	46 2f       	mov	r20, r22
    cd0a:	4f 70       	andi	r20, 0x0F	; 15
    cd0c:	40 5d       	subi	r20, 0xD0	; 208
    cd0e:	4a 33       	cpi	r20, 0x3A	; 58
    cd10:	18 f0       	brcs	.+6      	; 0xcd18 <__ultoa_invert+0x7c>
    cd12:	49 5d       	subi	r20, 0xD9	; 217
    cd14:	31 fd       	sbrc	r19, 1
    cd16:	40 52       	subi	r20, 0x20	; 32
    cd18:	41 93       	st	Z+, r20
    cd1a:	02 d0       	rcall	.+4      	; 0xcd20 <__ultoa_invert+0x84>
    cd1c:	a9 f7       	brne	.-22     	; 0xcd08 <__ultoa_invert+0x6c>
    cd1e:	ea cf       	rjmp	.-44     	; 0xccf4 <__ultoa_invert+0x58>
    cd20:	b4 e0       	ldi	r27, 0x04	; 4
    cd22:	a6 95       	lsr	r26
    cd24:	97 95       	ror	r25
    cd26:	87 95       	ror	r24
    cd28:	77 95       	ror	r23
    cd2a:	67 95       	ror	r22
    cd2c:	ba 95       	dec	r27
    cd2e:	c9 f7       	brne	.-14     	; 0xcd22 <__ultoa_invert+0x86>
    cd30:	00 97       	sbiw	r24, 0x00	; 0
    cd32:	61 05       	cpc	r22, r1
    cd34:	71 05       	cpc	r23, r1
    cd36:	08 95       	ret
    cd38:	9b 01       	movw	r18, r22
    cd3a:	ac 01       	movw	r20, r24
    cd3c:	0a 2e       	mov	r0, r26
    cd3e:	06 94       	lsr	r0
    cd40:	57 95       	ror	r21
    cd42:	47 95       	ror	r20
    cd44:	37 95       	ror	r19
    cd46:	27 95       	ror	r18
    cd48:	ba 95       	dec	r27
    cd4a:	c9 f7       	brne	.-14     	; 0xcd3e <__ultoa_invert+0xa2>
    cd4c:	62 0f       	add	r22, r18
    cd4e:	73 1f       	adc	r23, r19
    cd50:	84 1f       	adc	r24, r20
    cd52:	95 1f       	adc	r25, r21
    cd54:	a0 1d       	adc	r26, r0
    cd56:	08 95       	ret

0000cd58 <_exit>:
    cd58:	f8 94       	cli

0000cd5a <__stop_program>:
    cd5a:	ff cf       	rjmp	.-2      	; 0xcd5a <__stop_program>
