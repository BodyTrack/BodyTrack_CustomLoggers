
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001308  00802000  0000c156  0000c1ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028e1  00803308  00803308  0000d4f2  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  0000d4f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000f420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000fb88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001b98  00000000  00000000  0000fc28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a2ef  00000000  00000000  000117c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a05  00000000  00000000  0001baaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008433  00000000  00000000  0001c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b80  00000000  00000000  000248e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000049fa  00000000  00000000  00025468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000076d4  00000000  00000000  00029e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000618  00000000  00000000  00031536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 52 2c 	jmp	0x58a4	; 0x58a4 <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 71 4b 	jmp	0x96e2	; 0x96e2 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 ad 41 	jmp	0x835a	; 0x835a <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 78 31 	jmp	0x62f0	; 0x62f0 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e3       	ldi	r17, 0x33	; 51
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e6 e5       	ldi	r30, 0x56	; 86
     200:	f1 ec       	ldi	r31, 0xC1	; 193
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a8 30       	cpi	r26, 0x08	; 8
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1b e5       	ldi	r17, 0x5B	; 91
     214:	a8 e0       	ldi	r26, 0x08	; 8
     216:	b3 e3       	ldi	r27, 0x33	; 51
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a9 3e       	cpi	r26, 0xE9	; 233
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 3e 54 	call	0xa87c	; 0xa87c <main>
     226:	0c 94 a9 60 	jmp	0xc152	; 0xc152 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;



void Debug_Init(uint32_t baud){
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     232:	e0 e4       	ldi	r30, 0x40	; 64
     234:	f6 e0       	ldi	r31, 0x06	; 6
     236:	88 e0       	ldi	r24, 0x08	; 8
     238:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     23e:	e0 e6       	ldi	r30, 0x60	; 96
     240:	f6 e0       	ldi	r31, 0x06	; 6
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.Debug_RTS_CNTL = PORT_OPC_PULLUP_gc;
     246:	88 e1       	ldi	r24, 0x18	; 24
     248:	80 8b       	std	Z+16, r24	; 0x10


	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     24a:	e0 ea       	ldi	r30, 0xA0	; 160
     24c:	f8 e0       	ldi	r31, 0x08	; 8
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     252:	20 38       	cpi	r18, 0x80	; 128
     254:	85 e2       	ldi	r24, 0x25	; 37
     256:	38 07       	cpc	r19, r24
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	48 07       	cpc	r20, r24
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	19 f4       	brne	.+6      	; 0x268 <Debug_Init+0x3a>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     262:	8f e5       	ldi	r24, 0x5F	; 95
     264:	86 83       	std	Z+6, r24	; 0x06
     266:	06 c0       	rjmp	.+12     	; 0x274 <Debug_Init+0x46>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 460800){
     268:	20 50       	subi	r18, 0x00	; 0
     26a:	38 40       	sbci	r19, 0x08	; 8
     26c:	47 40       	sbci	r20, 0x07	; 7
     26e:	50 40       	sbci	r21, 0x00	; 0
     270:	11 f4       	brne	.+4      	; 0x276 <Debug_Init+0x48>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     272:	96 83       	std	Z+6, r25	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
     274:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     276:	e0 ea       	ldi	r30, 0xA0	; 160
     278:	f8 e0       	ldi	r31, 0x08	; 8
     27a:	80 91 a4 08 	lds	r24, 0x08A4
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     282:	80 91 a4 08 	lds	r24, 0x08A4
     286:	88 60       	ori	r24, 0x08	; 8
     288:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     28a:	80 91 a3 08 	lds	r24, 0x08A3
     28e:	80 62       	ori	r24, 0x20	; 32
     290:	83 83       	std	Z+3, r24	; 0x03
}
     292:	08 95       	ret

00000294 <Debug_ClearBuffer>:
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     294:	80 91 3a 33 	lds	r24, 0x333A
     298:	90 91 3b 33 	lds	r25, 0x333B
     29c:	80 93 3c 33 	sts	0x333C, r24
     2a0:	90 93 3d 33 	sts	0x333D, r25
}
     2a4:	08 95       	ret

000002a6 <Debug_CharReadyToRead>:


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     2a6:	20 91 3c 33 	lds	r18, 0x333C
     2aa:	30 91 3d 33 	lds	r19, 0x333D
     2ae:	80 91 3a 33 	lds	r24, 0x333A
     2b2:	90 91 3b 33 	lds	r25, 0x333B
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <Debug_CharReadyToRead+0x1a>
     2be:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     2c0:	84 2f       	mov	r24, r20
     2c2:	08 95       	ret

000002c4 <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     2c4:	88 23       	and	r24, r24
     2c6:	59 f0       	breq	.+22     	; 0x2de <Debug_GetByte+0x1a>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     2c8:	20 91 3c 33 	lds	r18, 0x333C
     2cc:	30 91 3d 33 	lds	r19, 0x333D
     2d0:	80 91 3a 33 	lds	r24, 0x333A
     2d4:	90 91 3b 33 	lds	r25, 0x333B
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	a9 f3       	breq	.-22     	; 0x2c8 <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     2de:	e0 91 3a 33 	lds	r30, 0x333A
     2e2:	f0 91 3b 33 	lds	r31, 0x333B
     2e6:	e1 54       	subi	r30, 0x41	; 65
     2e8:	f5 4b       	sbci	r31, 0xB5	; 181
     2ea:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     2ec:	80 91 3a 33 	lds	r24, 0x333A
     2f0:	90 91 3b 33 	lds	r25, 0x333B
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	80 93 3a 33 	sts	0x333A, r24
     2fa:	90 93 3b 33 	sts	0x333B, r25
	if(Debug_readLocation >= Debug_BufferSize){
     2fe:	80 91 3a 33 	lds	r24, 0x333A
     302:	90 91 3b 33 	lds	r25, 0x333B
     306:	80 50       	subi	r24, 0x00	; 0
     308:	94 40       	sbci	r25, 0x04	; 4
     30a:	20 f0       	brcs	.+8      	; 0x314 <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     30c:	10 92 3a 33 	sts	0x333A, r1
     310:	10 92 3b 33 	sts	0x333B, r1
	}
	return tmp;
}
     314:	8e 2f       	mov	r24, r30
     316:	08 95       	ret

00000318 <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     318:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     31a:	80 91 a1 08 	lds	r24, 0x08A1
     31e:	85 ff       	sbrs	r24, 5
     320:	fc cf       	rjmp	.-8      	; 0x31a <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     322:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     326:	90 93 a0 08 	sts	0x08A0, r25
}
     32a:	08 95       	ret

0000032c <__vector_25>:
		Debug_SendByte(13);
		Debug_SendByte(10);
	}
}

ISR(USARTC0_RXC_vect){
     32c:	1f 92       	push	r1
     32e:	0f 92       	push	r0
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	0f 92       	push	r0
     334:	0b b6       	in	r0, 0x3b	; 59
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	2f 93       	push	r18
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     344:	e0 91 3c 33 	lds	r30, 0x333C
     348:	f0 91 3d 33 	lds	r31, 0x333D
     34c:	80 91 a0 08 	lds	r24, 0x08A0
     350:	e1 54       	subi	r30, 0x41	; 65
     352:	f5 4b       	sbci	r31, 0xB5	; 181
     354:	80 83       	st	Z, r24
	Debug_writeLocation++;
     356:	80 91 3c 33 	lds	r24, 0x333C
     35a:	90 91 3d 33 	lds	r25, 0x333D
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	80 93 3c 33 	sts	0x333C, r24
     364:	90 93 3d 33 	sts	0x333D, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     368:	80 91 3c 33 	lds	r24, 0x333C
     36c:	90 91 3d 33 	lds	r25, 0x333D
     370:	80 50       	subi	r24, 0x00	; 0
     372:	94 40       	sbci	r25, 0x04	; 4
     374:	20 f0       	brcs	.+8      	; 0x37e <__vector_25+0x52>
		Debug_writeLocation = 0;
     376:	10 92 3c 33 	sts	0x333C, r1
     37a:	10 92 3d 33 	sts	0x333D, r1
	}
}
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	0b be       	out	0x3b, r0	; 59
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <Debug_GetTime>:

uint32_t Debug_GetTime(uint16_t timeOut){
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ac 01       	movw	r20, r24
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     3aa:	80 91 3a 33 	lds	r24, 0x333A
     3ae:	90 91 3b 33 	lds	r25, 0x333B
     3b2:	80 93 3c 33 	sts	0x333C, r24
     3b6:	90 93 3d 33 	sts	0x333D, r25
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     3ba:	80 91 a1 08 	lds	r24, 0x08A1
     3be:	85 ff       	sbrs	r24, 5
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <Debug_GetTime+0x24>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     3c2:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     3c6:	84 e5       	ldi	r24, 0x54	; 84
     3c8:	80 93 a0 08 	sts	0x08A0, r24
     3cc:	ea 01       	movw	r28, r20
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	dd 24       	eor	r13, r13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d6:	96 e6       	ldi	r25, 0x66	; 102
     3d8:	a9 2e       	mov	r10, r25
     3da:	9e e0       	ldi	r25, 0x0E	; 14
     3dc:	b9 2e       	mov	r11, r25
     3de:	14 c0       	rjmp	.+40     	; 0x408 <Debug_GetTime+0x72>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     3e0:	20 91 3c 33 	lds	r18, 0x333C
     3e4:	30 91 3d 33 	lds	r19, 0x333D
     3e8:	80 91 3a 33 	lds	r24, 0x333A
     3ec:	90 91 3b 33 	lds	r25, 0x333B
     3f0:	28 17       	cp	r18, r24
     3f2:	39 07       	cpc	r19, r25
     3f4:	d9 f4       	brne	.+54     	; 0x42c <Debug_GetTime+0x96>
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <Debug_GetTime+0x6a>
         tempTime  |= Debug_GetByte(true) & 0xFF;
         byteCounter++;
         if(byteCounter == 4){
            return tempTime;
         } else {
             tempTime <<= 8;
     3f8:	ee 24       	eor	r14, r14
     3fa:	f2 2e       	mov	r15, r18
     3fc:	03 2f       	mov	r16, r19
     3fe:	14 2f       	mov	r17, r20
     400:	c5 01       	movw	r24, r10
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <Debug_GetTime+0x6c>
         }
      }
      _delay_ms(1);
      to--;
     406:	21 97       	sbiw	r28, 0x01	; 1
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
     408:	20 97       	sbiw	r28, 0x00	; 0
     40a:	51 f7       	brne	.-44     	; 0x3e0 <Debug_GetTime+0x4a>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	50 e0       	ldi	r21, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return 0;
}
     414:	b9 01       	movw	r22, r18
     416:	ca 01       	movw	r24, r20
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	bf 90       	pop	r11
     428:	af 90       	pop	r10
     42a:	08 95       	ret
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
      if(Debug_CharReadyToRead()){
         tempTime  |= Debug_GetByte(true) & 0xFF;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
     432:	28 2f       	mov	r18, r24
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	2e 29       	or	r18, r14
     43c:	3f 29       	or	r19, r15
     43e:	40 2b       	or	r20, r16
     440:	51 2b       	or	r21, r17
         byteCounter++;
     442:	d3 94       	inc	r13
         if(byteCounter == 4){
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	d8 16       	cp	r13, r24
     448:	b9 f6       	brne	.-82     	; 0x3f8 <Debug_GetTime+0x62>
     44a:	e4 cf       	rjmp	.-56     	; 0x414 <Debug_GetTime+0x7e>

0000044c <Debug_Connected>:
      to--;
    }
    return 0;
}

bool Debug_Connected(uint16_t timeOut){
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ac 01       	movw	r20, r24
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     456:	80 91 3a 33 	lds	r24, 0x333A
     45a:	90 91 3b 33 	lds	r25, 0x333B
     45e:	80 93 3c 33 	sts	0x333C, r24
     462:	90 93 3d 33 	sts	0x333D, r25
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     466:	80 91 a1 08 	lds	r24, 0x08A1
     46a:	85 ff       	sbrs	r24, 5
     46c:	fc cf       	rjmp	.-8      	; 0x466 <Debug_Connected+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     46e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     472:	80 e5       	ldi	r24, 0x50	; 80
     474:	80 93 a0 08 	sts	0x08A0, r24
     478:	ea 01       	movw	r28, r20
     47a:	06 e6       	ldi	r16, 0x66	; 102
     47c:	1e e0       	ldi	r17, 0x0E	; 14
     47e:	0f c0       	rjmp	.+30     	; 0x49e <Debug_Connected+0x52>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     480:	20 91 3c 33 	lds	r18, 0x333C
     484:	30 91 3d 33 	lds	r19, 0x333D
     488:	80 91 3a 33 	lds	r24, 0x333A
     48c:	90 91 3b 33 	lds	r25, 0x333B
     490:	28 17       	cp	r18, r24
     492:	39 07       	cpc	r19, r25
     494:	61 f4       	brne	.+24     	; 0x4ae <Debug_Connected+0x62>
     496:	c8 01       	movw	r24, r16
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <Debug_Connected+0x4c>
         if(Debug_GetByte(true) == 'P'){
           return true;
         }
      }
      _delay_ms(1);
      to--;
     49c:	21 97       	sbiw	r28, 0x01	; 1

bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
     49e:	20 97       	sbiw	r28, 0x00	; 0
     4a0:	79 f7       	brne	.-34     	; 0x480 <Debug_Connected+0x34>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return false;
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
      if(Debug_CharReadyToRead()){
         if(Debug_GetByte(true) == 'P'){
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
     4b4:	80 35       	cpi	r24, 0x50	; 80
     4b6:	79 f7       	brne	.-34     	; 0x496 <Debug_Connected+0x4a>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	f4 cf       	rjmp	.-24     	; 0x4a4 <Debug_Connected+0x58>

000004bc <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     4bc:	20 91 1d 01 	lds	r18, 0x011D
     4c0:	92 2f       	mov	r25, r18
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	80 93 40 33 	sts	0x3340, r24
     4c8:	90 93 41 33 	sts	0x3341, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     4cc:	80 91 40 33 	lds	r24, 0x3340
     4d0:	90 91 41 33 	lds	r25, 0x3341
     4d4:	20 91 1c 01 	lds	r18, 0x011C
     4d8:	82 0f       	add	r24, r18
     4da:	91 1d       	adc	r25, r1
     4dc:	80 93 40 33 	sts	0x3340, r24
     4e0:	90 93 41 33 	sts	0x3341, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     4e4:	80 91 40 33 	lds	r24, 0x3340
     4e8:	90 91 41 33 	lds	r25, 0x3341
     4ec:	8d 5d       	subi	r24, 0xDD	; 221
     4ee:	9c 43       	sbci	r25, 0x3C	; 60
     4f0:	80 93 40 33 	sts	0x3340, r24
     4f4:	90 93 41 33 	sts	0x3341, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     4f8:	20 91 40 33 	lds	r18, 0x3340
     4fc:	30 91 41 33 	lds	r19, 0x3341
     500:	80 91 3e 33 	lds	r24, 0x333E
     504:	90 91 3f 33 	lds	r25, 0x333F
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	28 17       	cp	r18, r24
     50c:	39 07       	cpc	r19, r25
     50e:	09 f0       	breq	.+2      	; 0x512 <Wifi_CharReadyToRead+0x56>
     510:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     512:	84 2f       	mov	r24, r20
     514:	08 95       	ret

00000516 <Wifi_ClearBuffer>:

	Wifi_ClearBuffer();
}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     516:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
     51a:	88 23       	and	r24, r24
     51c:	31 f1       	breq	.+76     	; 0x56a <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     51e:	20 91 1d 01 	lds	r18, 0x011D
     522:	92 2f       	mov	r25, r18
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	80 93 40 33 	sts	0x3340, r24
     52a:	90 93 41 33 	sts	0x3341, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     52e:	80 91 40 33 	lds	r24, 0x3340
     532:	90 91 41 33 	lds	r25, 0x3341
     536:	20 91 1c 01 	lds	r18, 0x011C
     53a:	82 0f       	add	r24, r18
     53c:	91 1d       	adc	r25, r1
     53e:	80 93 40 33 	sts	0x3340, r24
     542:	90 93 41 33 	sts	0x3341, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     546:	80 91 40 33 	lds	r24, 0x3340
     54a:	90 91 41 33 	lds	r25, 0x3341
     54e:	8d 5d       	subi	r24, 0xDD	; 221
     550:	9c 43       	sbci	r25, 0x3C	; 60
     552:	80 93 40 33 	sts	0x3340, r24
     556:	90 93 41 33 	sts	0x3341, r25
		Wifi_readLocation = Wifi_writeLocation;
     55a:	80 91 40 33 	lds	r24, 0x3340
     55e:	90 91 41 33 	lds	r25, 0x3341
     562:	80 93 3e 33 	sts	0x333E, r24
     566:	90 93 3f 33 	sts	0x333F, r25
     56a:	08 95       	ret

0000056c <Wifi_Init>:

volatile uint16_t timeOutCounter = 0;
bool uploadTimedOut = false;


void Wifi_Init(uint32_t baud){
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24


	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     570:	80 e8       	ldi	r24, 0x80	; 128
     572:	e0 ea       	ldi	r30, 0xA0	; 160
     574:	f6 e0       	ldi	r31, 0x06	; 6
     576:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.DIRCLR = (1<<Wifi_RTS_pin);
     578:	e0 e6       	ldi	r30, 0x60	; 96
     57a:	f6 e0       	ldi	r31, 0x06	; 6
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.Wifi_RTS_CNTL = PORT_OPC_PULLUP_gc;
     580:	88 e1       	ldi	r24, 0x18	; 24
     582:	81 8b       	std	Z+17, r24	; 0x11
    //Wifi_Flow_Port.DIRSET = (1<<Wifi_CTS_pin);
    //Wifi_Flow_Port.OUTCLR = (1<<Wifi_CTS_pin);


	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     584:	a0 ea       	ldi	r26, 0xA0	; 160
     586:	ba e0       	ldi	r27, 0x0A	; 10
     588:	80 91 a4 0a 	lds	r24, 0x0AA4
     58c:	8f 7e       	andi	r24, 0xEF	; 239
     58e:	14 96       	adiw	r26, 0x04	; 4
     590:	8c 93       	st	X, r24
     592:	14 97       	sbiw	r26, 0x04	; 4
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     594:	80 91 a4 0a 	lds	r24, 0x0AA4
     598:	87 7f       	andi	r24, 0xF7	; 247
     59a:	14 96       	adiw	r26, 0x04	; 4
     59c:	8c 93       	st	X, r24
     59e:	14 97       	sbiw	r26, 0x04	; 4
	//_delay_ms(1000);


	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     5a0:	e0 e8       	ldi	r30, 0x80	; 128
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
     5a4:	88 e0       	ldi	r24, 0x08	; 8
     5a6:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	15 96       	adiw	r26, 0x05	; 5
     5b0:	8c 93       	st	X, r24
     5b2:	15 97       	sbiw	r26, 0x05	; 5
	 	    	
	if(baud == 9600){
     5b4:	20 38       	cpi	r18, 0x80	; 128
     5b6:	95 e2       	ldi	r25, 0x25	; 37
     5b8:	39 07       	cpc	r19, r25
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	49 07       	cpc	r20, r25
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	59 07       	cpc	r21, r25
     5c2:	11 f4       	brne	.+4      	; 0x5c8 <Wifi_Init+0x5c>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     5c4:	8f e5       	ldi	r24, 0x5F	; 95
     5c6:	1b c0       	rjmp	.+54     	; 0x5fe <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     5c8:	20 30       	cpi	r18, 0x00	; 0
     5ca:	92 ec       	ldi	r25, 0xC2	; 194
     5cc:	39 07       	cpc	r19, r25
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	49 07       	cpc	r20, r25
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	59 07       	cpc	r21, r25
     5d6:	11 f4       	brne	.+4      	; 0x5dc <Wifi_Init+0x70>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     5d8:	87 e0       	ldi	r24, 0x07	; 7
     5da:	11 c0       	rjmp	.+34     	; 0x5fe <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     5dc:	20 30       	cpi	r18, 0x00	; 0
     5de:	94 e8       	ldi	r25, 0x84	; 132
     5e0:	39 07       	cpc	r19, r25
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	49 07       	cpc	r20, r25
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	59 07       	cpc	r21, r25
     5ea:	49 f0       	breq	.+18     	; 0x5fe <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     5ec:	20 30       	cpi	r18, 0x00	; 0
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	38 07       	cpc	r19, r24
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	48 07       	cpc	r20, r24
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	58 07       	cpc	r21, r24
     5fa:	29 f4       	brne	.+10     	; 0x606 <Wifi_Init+0x9a>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	16 96       	adiw	r26, 0x06	; 6
     600:	8c 93       	st	X, r24
     602:	16 97       	sbiw	r26, 0x06	; 6
     604:	08 c0       	rjmp	.+16     	; 0x616 <Wifi_Init+0xaa>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     606:	20 50       	subi	r18, 0x00	; 0
     608:	30 41       	sbci	r19, 0x10	; 16
     60a:	4e 40       	sbci	r20, 0x0E	; 14
     60c:	50 40       	sbci	r21, 0x00	; 0
     60e:	29 f4       	brne	.+10     	; 0x61a <Wifi_Init+0xae>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     610:	16 96       	adiw	r26, 0x06	; 6
     612:	1c 92       	st	X, r1
     614:	16 97       	sbiw	r26, 0x06	; 6
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     616:	17 96       	adiw	r26, 0x07	; 7
     618:	1c 92       	st	X, r1
		//Wifi_Usart.CTRLB |= USART_CLK2X_bm;
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     61a:	e0 ea       	ldi	r30, 0xA0	; 160
     61c:	fa e0       	ldi	r31, 0x0A	; 10
     61e:	80 91 a4 0a 	lds	r24, 0x0AA4
     622:	80 61       	ori	r24, 0x10	; 16
     624:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     626:	80 91 a4 0a 	lds	r24, 0x0AA4
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	84 83       	std	Z+4, r24	; 0x04

	Wifi_ClearBuffer();
     62e:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
}
     632:	08 95       	ret

00000634 <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     634:	88 23       	and	r24, r24
     636:	21 f0       	breq	.+8      	; 0x640 <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     638:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
     63c:	88 23       	and	r24, r24
     63e:	e1 f3       	breq	.-8      	; 0x638 <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     640:	e0 91 3e 33 	lds	r30, 0x333E
     644:	f0 91 3f 33 	lds	r31, 0x333F
     648:	e3 52       	subi	r30, 0x23	; 35
     64a:	f3 4c       	sbci	r31, 0xC3	; 195
     64c:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     64e:	80 91 3e 33 	lds	r24, 0x333E
     652:	90 91 3f 33 	lds	r25, 0x333F
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	80 93 3e 33 	sts	0x333E, r24
     65c:	90 93 3f 33 	sts	0x333F, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     660:	80 91 3e 33 	lds	r24, 0x333E
     664:	90 91 3f 33 	lds	r25, 0x333F
     668:	80 50       	subi	r24, 0x00	; 0
     66a:	94 40       	sbci	r25, 0x04	; 4
     66c:	20 f0       	brcs	.+8      	; 0x676 <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     66e:	10 92 3e 33 	sts	0x333E, r1
     672:	10 92 3f 33 	sts	0x333F, r1
	}
	return tmp;
}
     676:	8e 2f       	mov	r24, r30
     678:	08 95       	ret

0000067a <Wifi_Connected>:
    timeString[10] = 0;
    time_secs = atol(timeString);
    return true;
}

bool Wifi_Connected(uint16_t timeOut){
     67a:	ac 01       	movw	r20, r24
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	66 e6       	ldi	r22, 0x66	; 102
     682:	7e e0       	ldi	r23, 0x0E	; 14
     684:	0d c0       	rjmp	.+26     	; 0x6a0 <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     686:	80 91 a8 06 	lds	r24, 0x06A8
     68a:	87 ff       	sbrs	r24, 7
     68c:	04 c0       	rjmp	.+8      	; 0x696 <Wifi_Connected+0x1c>
			connected = true;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 4e 33 	sts	0x334E, r24
     694:	08 95       	ret
     696:	fb 01       	movw	r30, r22
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <Wifi_Connected+0x1e>
    time_secs = atol(timeString);
    return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     69c:	2f 5f       	subi	r18, 0xFF	; 255
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
     6a0:	24 17       	cp	r18, r20
     6a2:	35 07       	cpc	r19, r21
     6a4:	80 f3       	brcs	.-32     	; 0x686 <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     6a6:	10 92 4e 33 	sts	0x334E, r1
     6aa:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     6ac:	08 95       	ret

000006ae <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f6 e0       	ldi	r31, 0x06	; 6
     6b2:	88 e1       	ldi	r24, 0x18	; 24
     6b4:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     6b6:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     6b8:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     6ba:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     6bc:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	8c 67       	ori	r24, 0x7C	; 124
     6c2:	82 83       	std	Z+2, r24	; 0x02
}
     6c4:	08 95       	ret

000006c6 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6c6:	e0 ea       	ldi	r30, 0xA0	; 160
     6c8:	f6 e0       	ldi	r31, 0x06	; 6
     6ca:	80 85       	ldd	r24, Z+8	; 0x08
}
     6cc:	8c 77       	andi	r24, 0x7C	; 124
     6ce:	08 95       	ret

000006d0 <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6d0:	40 91 a8 06 	lds	r20, 0x06A8
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Dpad_CheckButton+0x10>
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	8a 95       	dec	r24
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <Dpad_CheckButton+0xc>
     6e4:	4c 77       	andi	r20, 0x7C	; 124
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	24 23       	and	r18, r20
     6ea:	35 23       	and	r19, r21
     6ec:	12 16       	cp	r1, r18
     6ee:	13 06       	cpc	r1, r19
     6f0:	0c f0       	brlt	.+2      	; 0x6f4 <Dpad_CheckButton+0x24>
     6f2:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     6f4:	89 2f       	mov	r24, r25
     6f6:	08 95       	ret

000006f8 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     6f8:	e0 e2       	ldi	r30, 0x20	; 32
     6fa:	f6 e0       	ldi	r31, 0x06	; 6
     6fc:	81 81       	ldd	r24, Z+1	; 0x01
     6fe:	83 6f       	ori	r24, 0xF3	; 243
     700:	81 83       	std	Z+1, r24	; 0x01
}
     702:	08 95       	ret

00000704 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	02 c0       	rjmp	.+4      	; 0x70e <Leds_Set+0xa>
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	8a 95       	dec	r24
     710:	e2 f7       	brpl	.-8      	; 0x70a <Leds_Set+0x6>
     712:	e0 e2       	ldi	r30, 0x20	; 32
     714:	f6 e0       	ldi	r31, 0x06	; 6
     716:	25 83       	std	Z+5, r18	; 0x05
}
     718:	08 95       	ret

0000071a <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	02 c0       	rjmp	.+4      	; 0x724 <Leds_Clear+0xa>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	8a 95       	dec	r24
     726:	e2 f7       	brpl	.-8      	; 0x720 <Leds_Clear+0x6>
     728:	e0 e2       	ldi	r30, 0x20	; 32
     72a:	f6 e0       	ldi	r31, 0x06	; 6
     72c:	26 83       	std	Z+6, r18	; 0x06
}
     72e:	08 95       	ret

00000730 <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <Leds_Toggle+0xa>
     736:	22 0f       	add	r18, r18
     738:	33 1f       	adc	r19, r19
     73a:	8a 95       	dec	r24
     73c:	e2 f7       	brpl	.-8      	; 0x736 <Leds_Toggle+0x6>
     73e:	e0 e2       	ldi	r30, 0x20	; 32
     740:	f6 e0       	ldi	r31, 0x06	; 6
     742:	27 83       	std	Z+7, r18	; 0x07
}
     744:	08 95       	ret

00000746 <Rs232_Init>:
uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     746:	e0 e6       	ldi	r30, 0x60	; 96
     748:	f6 e0       	ldi	r31, 0x06	; 6
     74a:	88 e0       	ldi	r24, 0x08	; 8
     74c:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     752:	e0 ea       	ldi	r30, 0xA0	; 160
     754:	f9 e0       	ldi	r31, 0x09	; 9
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     75a:	8f e5       	ldi	r24, 0x5F	; 95
     75c:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     75e:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     760:	84 81       	ldd	r24, Z+4	; 0x04
     762:	80 61       	ori	r24, 0x10	; 16
     764:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     766:	84 81       	ldd	r24, Z+4	; 0x04
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_HI_gc;
     76c:	83 81       	ldd	r24, Z+3	; 0x03
     76e:	80 63       	ori	r24, 0x30	; 48
     770:	83 83       	std	Z+3, r24	; 0x03
}
     772:	08 95       	ret

00000774 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     774:	20 91 57 33 	lds	r18, 0x3357
     778:	30 91 58 33 	lds	r19, 0x3358
     77c:	80 91 55 33 	lds	r24, 0x3355
     780:	90 91 56 33 	lds	r25, 0x3356
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	28 17       	cp	r18, r24
     788:	39 07       	cpc	r19, r25
     78a:	09 f0       	breq	.+2      	; 0x78e <Rs232_CharReadyToRead+0x1a>
     78c:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     78e:	84 2f       	mov	r24, r20
     790:	08 95       	ret

00000792 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     792:	88 23       	and	r24, r24
     794:	59 f0       	breq	.+22     	; 0x7ac <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     796:	20 91 57 33 	lds	r18, 0x3357
     79a:	30 91 58 33 	lds	r19, 0x3358
     79e:	80 91 55 33 	lds	r24, 0x3355
     7a2:	90 91 56 33 	lds	r25, 0x3356
     7a6:	28 17       	cp	r18, r24
     7a8:	39 07       	cpc	r19, r25
     7aa:	a9 f3       	breq	.-22     	; 0x796 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     7ac:	e0 91 55 33 	lds	r30, 0x3355
     7b0:	f0 91 56 33 	lds	r31, 0x3356
     7b4:	ed 55       	subi	r30, 0x5D	; 93
     7b6:	f9 4a       	sbci	r31, 0xA9	; 169
     7b8:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     7ba:	80 91 55 33 	lds	r24, 0x3355
     7be:	90 91 56 33 	lds	r25, 0x3356
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	80 93 55 33 	sts	0x3355, r24
     7c8:	90 93 56 33 	sts	0x3356, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     7cc:	80 91 55 33 	lds	r24, 0x3355
     7d0:	90 91 56 33 	lds	r25, 0x3356
     7d4:	80 50       	subi	r24, 0x00	; 0
     7d6:	94 40       	sbci	r25, 0x04	; 4
     7d8:	20 f0       	brcs	.+8      	; 0x7e2 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     7da:	10 92 55 33 	sts	0x3355, r1
     7de:	10 92 56 33 	sts	0x3356, r1
	}
	return tmp;
}
     7e2:	8e 2f       	mov	r24, r30
     7e4:	08 95       	ret

000007e6 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     7e6:	80 91 57 33 	lds	r24, 0x3357
     7ea:	90 91 58 33 	lds	r25, 0x3358
     7ee:	80 93 55 33 	sts	0x3355, r24
     7f2:	90 93 56 33 	sts	0x3356, r25
}
     7f6:	08 95       	ret

000007f8 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     7f8:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     7fa:	80 91 a1 09 	lds	r24, 0x09A1
     7fe:	85 ff       	sbrs	r24, 5
     800:	fc cf       	rjmp	.-8      	; 0x7fa <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     802:	90 93 a0 09 	sts	0x09A0, r25
}
     806:	08 95       	ret

00000808 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	0b b6       	in	r0, 0x3b	; 59
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	2f 93       	push	r18
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
     820:	e0 91 57 33 	lds	r30, 0x3357
     824:	f0 91 58 33 	lds	r31, 0x3358
     828:	80 91 a0 09 	lds	r24, 0x09A0
     82c:	ed 55       	subi	r30, 0x5D	; 93
     82e:	f9 4a       	sbci	r31, 0xA9	; 169
     830:	80 83       	st	Z, r24

	if(rs232Recording){
     832:	80 91 62 33 	lds	r24, 0x3362
     836:	88 23       	and	r24, r24
     838:	61 f0       	breq	.+24     	; 0x852 <__vector_88+0x4a>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
     83a:	e0 91 57 33 	lds	r30, 0x3357
     83e:	f0 91 58 33 	lds	r31, 0x3358
     842:	ed 55       	subi	r30, 0x5D	; 93
     844:	f9 4a       	sbci	r31, 0xA9	; 169
     846:	80 81       	ld	r24, Z
     848:	8a 30       	cpi	r24, 0x0A	; 10
     84a:	19 f4       	brne	.+6      	; 0x852 <__vector_88+0x4a>
            okToSendAirQuality = true;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 59 33 	sts	0x3359, r24
		}
	}
	Rs232_writeLocation++;
     852:	80 91 57 33 	lds	r24, 0x3357
     856:	90 91 58 33 	lds	r25, 0x3358
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	80 93 57 33 	sts	0x3357, r24
     860:	90 93 58 33 	sts	0x3358, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
     864:	80 91 57 33 	lds	r24, 0x3357
     868:	90 91 58 33 	lds	r25, 0x3358
     86c:	80 50       	subi	r24, 0x00	; 0
     86e:	94 40       	sbci	r25, 0x04	; 4
     870:	20 f0       	brcs	.+8      	; 0x87a <__vector_88+0x72>
		Rs232_writeLocation = 0;
     872:	10 92 57 33 	sts	0x3357, r1
     876:	10 92 58 33 	sts	0x3358, r1
	}
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     892:	82 e3       	ldi	r24, 0x32	; 50
     894:	80 93 d8 33 	sts	0x33D8, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	e0 ec       	ldi	r30, 0xC0	; 192
     89c:	f9 e0       	ldi	r31, 0x09	; 9
     89e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8a0:	80 91 c2 09 	lds	r24, 0x09C2
     8a4:	87 ff       	sbrs	r24, 7
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <wait_ready+0xe>
	return SD_SPI.DATA;
     8a8:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8ac:	e0 ec       	ldi	r30, 0xC0	; 192
     8ae:	f9 e0       	ldi	r31, 0x09	; 9
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8b4:	80 91 c2 09 	lds	r24, 0x09C2
     8b8:	87 ff       	sbrs	r24, 7
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <wait_ready+0x22>
	return SD_SPI.DATA;
     8bc:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     8c0:	9f 3f       	cpi	r25, 0xFF	; 255
     8c2:	21 f0       	breq	.+8      	; 0x8cc <wait_ready+0x3a>
     8c4:	80 91 d8 33 	lds	r24, 0x33D8
     8c8:	88 23       	and	r24, r24
     8ca:	99 f7       	brne	.-26     	; 0x8b2 <wait_ready+0x20>

	return res;
}
     8cc:	89 2f       	mov	r24, r25
     8ce:	08 95       	ret

000008d0 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
	CS_LOW();
     8d6:	c0 e6       	ldi	r28, 0x60	; 96
     8d8:	d6 e0       	ldi	r29, 0x06	; 6
     8da:	10 e1       	ldi	r17, 0x10	; 16
     8dc:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     8de:	0e 94 49 04 	call	0x892	; 0x892 <wait_ready>
     8e2:	8f 3f       	cpi	r24, 0xFF	; 255
     8e4:	11 f4       	brne	.+4      	; 0x8ea <select+0x1a>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     8ea:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	e0 ec       	ldi	r30, 0xC0	; 192
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8f4:	80 91 c2 09 	lds	r24, 0x09C2
     8f8:	87 ff       	sbrs	r24, 7
     8fa:	fc cf       	rjmp	.-8      	; 0x8f4 <select+0x24>
	return SD_SPI.DATA;
     8fc:	80 91 c3 09 	lds	r24, 0x09C3
     900:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	08 95       	ret

0000090a <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     90a:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     90c:	84 e1       	ldi	r24, 0x14	; 20
     90e:	80 93 d7 33 	sts	0x33D7, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     912:	a0 ec       	ldi	r26, 0xC0	; 192
     914:	b9 e0       	ldi	r27, 0x09	; 9
     916:	9f ef       	ldi	r25, 0xFF	; 255
     918:	13 96       	adiw	r26, 0x03	; 3
     91a:	9c 93       	st	X, r25
     91c:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     91e:	80 91 c2 09 	lds	r24, 0x09C2
     922:	87 ff       	sbrs	r24, 7
     924:	fc cf       	rjmp	.-8      	; 0x91e <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     926:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     92a:	8f 3f       	cpi	r24, 0xFF	; 255
     92c:	29 f4       	brne	.+10     	; 0x938 <rcvr_datablock+0x2e>
     92e:	80 91 d7 33 	lds	r24, 0x33D7
     932:	88 23       	and	r24, r24
     934:	89 f7       	brne	.-30     	; 0x918 <rcvr_datablock+0xe>
     936:	49 c0       	rjmp	.+146    	; 0x9ca <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     938:	8e 3f       	cpi	r24, 0xFE	; 254
     93a:	09 f0       	breq	.+2      	; 0x93e <rcvr_datablock+0x34>
     93c:	46 c0       	rjmp	.+140    	; 0x9ca <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     93e:	a0 ec       	ldi	r26, 0xC0	; 192
     940:	b9 e0       	ldi	r27, 0x09	; 9
     942:	9f ef       	ldi	r25, 0xFF	; 255
     944:	13 96       	adiw	r26, 0x03	; 3
     946:	9c 93       	st	X, r25
     948:	13 97       	sbiw	r26, 0x03	; 3
     94a:	80 91 c2 09 	lds	r24, 0x09C2
     94e:	87 ff       	sbrs	r24, 7
     950:	fc cf       	rjmp	.-8      	; 0x94a <rcvr_datablock+0x40>
     952:	80 91 c3 09 	lds	r24, 0x09C3
     956:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     958:	13 96       	adiw	r26, 0x03	; 3
     95a:	9c 93       	st	X, r25
     95c:	13 97       	sbiw	r26, 0x03	; 3
     95e:	80 91 c2 09 	lds	r24, 0x09C2
     962:	87 ff       	sbrs	r24, 7
     964:	fc cf       	rjmp	.-8      	; 0x95e <rcvr_datablock+0x54>
     966:	80 91 c3 09 	lds	r24, 0x09C3
     96a:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     96c:	13 96       	adiw	r26, 0x03	; 3
     96e:	9c 93       	st	X, r25
     970:	13 97       	sbiw	r26, 0x03	; 3
     972:	80 91 c2 09 	lds	r24, 0x09C2
     976:	87 ff       	sbrs	r24, 7
     978:	fc cf       	rjmp	.-8      	; 0x972 <rcvr_datablock+0x68>
     97a:	80 91 c3 09 	lds	r24, 0x09C3
     97e:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     980:	13 96       	adiw	r26, 0x03	; 3
     982:	9c 93       	st	X, r25
     984:	13 97       	sbiw	r26, 0x03	; 3
     986:	80 91 c2 09 	lds	r24, 0x09C2
     98a:	87 ff       	sbrs	r24, 7
     98c:	fc cf       	rjmp	.-8      	; 0x986 <rcvr_datablock+0x7c>
     98e:	80 91 c3 09 	lds	r24, 0x09C3
     992:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     994:	64 50       	subi	r22, 0x04	; 4
     996:	70 40       	sbci	r23, 0x00	; 0
     998:	11 f0       	breq	.+4      	; 0x99e <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     99a:	34 96       	adiw	r30, 0x04	; 4
     99c:	d3 cf       	rjmp	.-90     	; 0x944 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	e0 ec       	ldi	r30, 0xC0	; 192
     9a2:	f9 e0       	ldi	r31, 0x09	; 9
     9a4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9a6:	80 91 c2 09 	lds	r24, 0x09C2
     9aa:	87 ff       	sbrs	r24, 7
     9ac:	fc cf       	rjmp	.-8      	; 0x9a6 <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     9ae:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	e0 ec       	ldi	r30, 0xC0	; 192
     9b6:	f9 e0       	ldi	r31, 0x09	; 9
     9b8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9ba:	80 91 c2 09 	lds	r24, 0x09C2
     9be:	87 ff       	sbrs	r24, 7
     9c0:	fc cf       	rjmp	.-8      	; 0x9ba <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     9c2:	80 91 c3 09 	lds	r24, 0x09C3
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     9ca:	80 e0       	ldi	r24, 0x00	; 0
}
     9cc:	08 95       	ret

000009ce <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
     9d6:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     9d8:	0e 94 49 04 	call	0x892	; 0x892 <wait_ready>
     9dc:	8f 3f       	cpi	r24, 0xFF	; 255
     9de:	11 f0       	breq	.+4      	; 0x9e4 <xmit_datablock+0x16>
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	3f c0       	rjmp	.+126    	; 0xa62 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     9e4:	e0 ec       	ldi	r30, 0xC0	; 192
     9e6:	f9 e0       	ldi	r31, 0x09	; 9
     9e8:	13 83       	std	Z+3, r17	; 0x03
     9ea:	80 91 c2 09 	lds	r24, 0x09C2
     9ee:	87 ff       	sbrs	r24, 7
     9f0:	fc cf       	rjmp	.-8      	; 0x9ea <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     9f2:	1d 3f       	cpi	r17, 0xFD	; 253
     9f4:	11 f4       	brne	.+4      	; 0x9fa <xmit_datablock+0x2c>
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	34 c0       	rjmp	.+104    	; 0xa62 <xmit_datablock+0x94>
     9fa:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     9fc:	e0 ec       	ldi	r30, 0xC0	; 192
     9fe:	f9 e0       	ldi	r31, 0x09	; 9
     a00:	88 81       	ld	r24, Y
     a02:	83 83       	std	Z+3, r24	; 0x03
     a04:	80 91 c2 09 	lds	r24, 0x09C2
     a08:	87 ff       	sbrs	r24, 7
     a0a:	fc cf       	rjmp	.-8      	; 0xa04 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	83 83       	std	Z+3, r24	; 0x03
     a10:	80 91 c2 09 	lds	r24, 0x09C2
     a14:	87 ff       	sbrs	r24, 7
     a16:	fc cf       	rjmp	.-8      	; 0xa10 <xmit_datablock+0x42>
		} while (--wc);
     a18:	91 50       	subi	r25, 0x01	; 1
     a1a:	11 f0       	breq	.+4      	; 0xa20 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a1c:	22 96       	adiw	r28, 0x02	; 2
     a1e:	f0 cf       	rjmp	.-32     	; 0xa00 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	e0 ec       	ldi	r30, 0xC0	; 192
     a24:	f9 e0       	ldi	r31, 0x09	; 9
     a26:	83 83       	std	Z+3, r24	; 0x03
     a28:	80 91 c2 09 	lds	r24, 0x09C2
     a2c:	87 ff       	sbrs	r24, 7
     a2e:	fc cf       	rjmp	.-8      	; 0xa28 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	e0 ec       	ldi	r30, 0xC0	; 192
     a34:	f9 e0       	ldi	r31, 0x09	; 9
     a36:	83 83       	std	Z+3, r24	; 0x03
     a38:	80 91 c2 09 	lds	r24, 0x09C2
     a3c:	87 ff       	sbrs	r24, 7
     a3e:	fc cf       	rjmp	.-8      	; 0xa38 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	e0 ec       	ldi	r30, 0xC0	; 192
     a44:	f9 e0       	ldi	r31, 0x09	; 9
     a46:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a48:	80 91 c2 09 	lds	r24, 0x09C2
     a4c:	87 ff       	sbrs	r24, 7
     a4e:	fc cf       	rjmp	.-8      	; 0xa48 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     a50:	80 91 c3 09 	lds	r24, 0x09C3
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	8f 71       	andi	r24, 0x1F	; 31
     a58:	85 30       	cpi	r24, 0x05	; 5
     a5a:	09 f0       	breq	.+2      	; 0xa5e <xmit_datablock+0x90>
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     a62:	89 2f       	mov	r24, r25
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	08 95       	ret

00000a6c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	d8 2e       	mov	r13, r24
     a78:	7a 01       	movw	r14, r20
     a7a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     a7c:	87 ff       	sbrs	r24, 7
     a7e:	0c c0       	rjmp	.+24     	; 0xa98 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     a80:	87 e7       	ldi	r24, 0x77	; 119
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
		if (res > 1) return res;
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	08 f0       	brcs	.+2      	; 0xa94 <send_cmd+0x28>
     a92:	72 c0       	rjmp	.+228    	; 0xb78 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     a94:	8f e7       	ldi	r24, 0x7F	; 127
     a96:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     a98:	80 e1       	ldi	r24, 0x10	; 16
     a9a:	e0 e6       	ldi	r30, 0x60	; 96
     a9c:	f6 e0       	ldi	r31, 0x06	; 6
     a9e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     aa0:	8f ef       	ldi	r24, 0xFF	; 255
     aa2:	e0 ec       	ldi	r30, 0xC0	; 192
     aa4:	f9 e0       	ldi	r31, 0x09	; 9
     aa6:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     aa8:	80 91 c2 09 	lds	r24, 0x09C2
     aac:	87 ff       	sbrs	r24, 7
     aae:	fc cf       	rjmp	.-8      	; 0xaa8 <send_cmd+0x3c>
	return SD_SPI.DATA;
     ab0:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     ab4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <select>
     ab8:	88 23       	and	r24, r24
     aba:	11 f4       	brne	.+4      	; 0xac0 <send_cmd+0x54>
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	5c c0       	rjmp	.+184    	; 0xb78 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     ac0:	e0 ec       	ldi	r30, 0xC0	; 192
     ac2:	f9 e0       	ldi	r31, 0x09	; 9
     ac4:	d3 82       	std	Z+3, r13	; 0x03
     ac6:	80 91 c2 09 	lds	r24, 0x09C2
     aca:	87 ff       	sbrs	r24, 7
     acc:	fc cf       	rjmp	.-8      	; 0xac6 <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     ace:	81 2f       	mov	r24, r17
     ad0:	99 27       	eor	r25, r25
     ad2:	aa 27       	eor	r26, r26
     ad4:	bb 27       	eor	r27, r27
     ad6:	e0 ec       	ldi	r30, 0xC0	; 192
     ad8:	f9 e0       	ldi	r31, 0x09	; 9
     ada:	83 83       	std	Z+3, r24	; 0x03
     adc:	80 91 c2 09 	lds	r24, 0x09C2
     ae0:	87 ff       	sbrs	r24, 7
     ae2:	fc cf       	rjmp	.-8      	; 0xadc <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     ae4:	c8 01       	movw	r24, r16
     ae6:	aa 27       	eor	r26, r26
     ae8:	bb 27       	eor	r27, r27
     aea:	e0 ec       	ldi	r30, 0xC0	; 192
     aec:	f9 e0       	ldi	r31, 0x09	; 9
     aee:	83 83       	std	Z+3, r24	; 0x03
     af0:	80 91 c2 09 	lds	r24, 0x09C2
     af4:	87 ff       	sbrs	r24, 7
     af6:	fc cf       	rjmp	.-8      	; 0xaf0 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     af8:	bb 27       	eor	r27, r27
     afa:	a1 2f       	mov	r26, r17
     afc:	90 2f       	mov	r25, r16
     afe:	8f 2d       	mov	r24, r15
     b00:	e0 ec       	ldi	r30, 0xC0	; 192
     b02:	f9 e0       	ldi	r31, 0x09	; 9
     b04:	83 83       	std	Z+3, r24	; 0x03
     b06:	80 91 c2 09 	lds	r24, 0x09C2
     b0a:	87 ff       	sbrs	r24, 7
     b0c:	fc cf       	rjmp	.-8      	; 0xb06 <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     b0e:	e0 ec       	ldi	r30, 0xC0	; 192
     b10:	f9 e0       	ldi	r31, 0x09	; 9
     b12:	e3 82       	std	Z+3, r14	; 0x03
     b14:	80 91 c2 09 	lds	r24, 0x09C2
     b18:	87 ff       	sbrs	r24, 7
     b1a:	fc cf       	rjmp	.-8      	; 0xb14 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b1c:	80 e4       	ldi	r24, 0x40	; 64
     b1e:	d8 16       	cp	r13, r24
     b20:	11 f4       	brne	.+4      	; 0xb26 <send_cmd+0xba>
     b22:	85 e9       	ldi	r24, 0x95	; 149
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b26:	88 e4       	ldi	r24, 0x48	; 72
     b28:	d8 16       	cp	r13, r24
     b2a:	11 f4       	brne	.+4      	; 0xb30 <send_cmd+0xc4>
     b2c:	87 e8       	ldi	r24, 0x87	; 135
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <send_cmd+0xc6>
     b30:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b32:	e0 ec       	ldi	r30, 0xC0	; 192
     b34:	f9 e0       	ldi	r31, 0x09	; 9
     b36:	83 83       	std	Z+3, r24	; 0x03
     b38:	80 91 c2 09 	lds	r24, 0x09C2
     b3c:	87 ff       	sbrs	r24, 7
     b3e:	fc cf       	rjmp	.-8      	; 0xb38 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     b40:	8c e4       	ldi	r24, 0x4C	; 76
     b42:	d8 16       	cp	r13, r24
     b44:	51 f4       	brne	.+20     	; 0xb5a <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	e0 ec       	ldi	r30, 0xC0	; 192
     b4a:	f9 e0       	ldi	r31, 0x09	; 9
     b4c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b4e:	80 91 c2 09 	lds	r24, 0x09C2
     b52:	87 ff       	sbrs	r24, 7
     b54:	fc cf       	rjmp	.-8      	; 0xb4e <send_cmd+0xe2>
	return SD_SPI.DATA;
     b56:	80 91 c3 09 	lds	r24, 0x09C3
     b5a:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b5c:	e0 ec       	ldi	r30, 0xC0	; 192
     b5e:	f9 e0       	ldi	r31, 0x09	; 9
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b64:	80 91 c2 09 	lds	r24, 0x09C2
     b68:	87 ff       	sbrs	r24, 7
     b6a:	fc cf       	rjmp	.-8      	; 0xb64 <send_cmd+0xf8>
	return SD_SPI.DATA;
     b6c:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     b70:	87 ff       	sbrs	r24, 7
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <send_cmd+0x10c>
     b74:	91 50       	subi	r25, 0x01	; 1
     b76:	a9 f7       	brne	.-22     	; 0xb62 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	08 95       	ret

00000b84 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <disk_initialize+0xe>
     b92:	0f 92       	push	r0
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     b98:	80 91 07 33 	lds	r24, 0x3307
     b9c:	81 fd       	sbrc	r24, 1
     b9e:	cc c0       	rjmp	.+408    	; 0xd38 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     ba0:	e0 e6       	ldi	r30, 0x60	; 96
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	80 eb       	ldi	r24, 0xB0	; 176
     ba6:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     ba8:	88 e3       	ldi	r24, 0x38	; 56
     baa:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     bac:	14 82       	std	Z+4, r1	; 0x04
     bae:	8c e2       	ldi	r24, 0x2C	; 44
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	20 e7       	ldi	r18, 0x70	; 112
     bb4:	31 e0       	ldi	r19, 0x01	; 1
     bb6:	f9 01       	movw	r30, r18
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bbc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bbe:	d9 f7       	brne	.-10     	; 0xbb6 <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     bc0:	83 e5       	ldi	r24, 0x53	; 83
     bc2:	80 93 c0 09 	sts	0x09C0, r24
     bc6:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bc8:	e0 ec       	ldi	r30, 0xC0	; 192
     bca:	f9 e0       	ldi	r31, 0x09	; 9
     bcc:	2f ef       	ldi	r18, 0xFF	; 255
     bce:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bd0:	80 91 c2 09 	lds	r24, 0x09C2
     bd4:	87 ff       	sbrs	r24, 7
     bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     bd8:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     bdc:	91 50       	subi	r25, 0x01	; 1
     bde:	b9 f7       	brne	.-18     	; 0xbce <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <disk_initialize+0x70>
     bf2:	87 c0       	rjmp	.+270    	; 0xd02 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     bf4:	84 e6       	ldi	r24, 0x64	; 100
     bf6:	80 93 d7 33 	sts	0x33D7, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     bfa:	88 e4       	ldi	r24, 0x48	; 72
     bfc:	4a ea       	ldi	r20, 0xAA	; 170
     bfe:	51 e0       	ldi	r21, 0x01	; 1
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <disk_initialize+0x8a>
     c0c:	53 c0       	rjmp	.+166    	; 0xcb4 <disk_initialize+0x130>
     c0e:	7e 01       	movw	r14, r28
     c10:	08 94       	sec
     c12:	e1 1c       	adc	r14, r1
     c14:	f1 1c       	adc	r15, r1
     c16:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c18:	e0 ec       	ldi	r30, 0xC0	; 192
     c1a:	f9 e0       	ldi	r31, 0x09	; 9
     c1c:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c1e:	9e 01       	movw	r18, r28
     c20:	2b 5f       	subi	r18, 0xFB	; 251
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c24:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c26:	80 91 c2 09 	lds	r24, 0x09C2
     c2a:	87 ff       	sbrs	r24, 7
     c2c:	fc cf       	rjmp	.-8      	; 0xc26 <disk_initialize+0xa2>
	return SD_SPI.DATA;
     c2e:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c32:	d8 01       	movw	r26, r16
     c34:	8d 93       	st	X+, r24
     c36:	8d 01       	movw	r16, r26
     c38:	a2 17       	cp	r26, r18
     c3a:	b3 07       	cpc	r27, r19
     c3c:	99 f7       	brne	.-26     	; 0xc24 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	09 f0       	breq	.+2      	; 0xc46 <disk_initialize+0xc2>
     c44:	5e c0       	rjmp	.+188    	; 0xd02 <disk_initialize+0x17e>
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	8a 3a       	cpi	r24, 0xAA	; 170
     c4a:	09 f0       	breq	.+2      	; 0xc4e <disk_initialize+0xca>
     c4c:	5a c0       	rjmp	.+180    	; 0xd02 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     c4e:	80 91 d7 33 	lds	r24, 0x33D7
     c52:	88 23       	and	r24, r24
     c54:	49 f0       	breq	.+18     	; 0xc68 <disk_initialize+0xe4>
     c56:	89 ee       	ldi	r24, 0xE9	; 233
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e4       	ldi	r23, 0x40	; 64
     c60:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     c64:	88 23       	and	r24, r24
     c66:	99 f7       	brne	.-26     	; 0xc4e <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     c68:	80 91 d7 33 	lds	r24, 0x33D7
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <disk_initialize+0xee>
     c70:	48 c0       	rjmp	.+144    	; 0xd02 <disk_initialize+0x17e>
     c72:	8a e7       	ldi	r24, 0x7A	; 122
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     c80:	88 23       	and	r24, r24
     c82:	09 f0       	breq	.+2      	; 0xc86 <disk_initialize+0x102>
     c84:	3e c0       	rjmp	.+124    	; 0xd02 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c86:	e0 ec       	ldi	r30, 0xC0	; 192
     c88:	f9 e0       	ldi	r31, 0x09	; 9
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c8e:	80 91 c2 09 	lds	r24, 0x09C2
     c92:	87 ff       	sbrs	r24, 7
     c94:	fc cf       	rjmp	.-8      	; 0xc8e <disk_initialize+0x10a>
	return SD_SPI.DATA;
     c96:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     c9a:	d7 01       	movw	r26, r14
     c9c:	8d 93       	st	X+, r24
     c9e:	7d 01       	movw	r14, r26
     ca0:	a0 17       	cp	r26, r16
     ca2:	b1 07       	cpc	r27, r17
     ca4:	99 f7       	brne	.-26     	; 0xc8c <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	86 fd       	sbrc	r24, 6
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <disk_initialize+0x12c>
     cac:	14 e0       	ldi	r17, 0x04	; 4
     cae:	2a c0       	rjmp	.+84     	; 0xd04 <disk_initialize+0x180>
     cb0:	1c e0       	ldi	r17, 0x0C	; 12
     cb2:	28 c0       	rjmp	.+80     	; 0xd04 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     cb4:	89 ee       	ldi	r24, 0xE9	; 233
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	18 f0       	brcs	.+6      	; 0xccc <disk_initialize+0x148>
     cc6:	01 e4       	ldi	r16, 0x41	; 65
     cc8:	11 e0       	ldi	r17, 0x01	; 1
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <disk_initialize+0x14c>
     ccc:	09 ee       	ldi	r16, 0xE9	; 233
     cce:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     cd0:	80 91 d7 33 	lds	r24, 0x33D7
     cd4:	88 23       	and	r24, r24
     cd6:	49 f0       	breq	.+18     	; 0xcea <disk_initialize+0x166>
     cd8:	80 2f       	mov	r24, r16
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     ce6:	88 23       	and	r24, r24
     ce8:	99 f7       	brne	.-26     	; 0xcd0 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     cea:	80 91 d7 33 	lds	r24, 0x33D7
     cee:	88 23       	and	r24, r24
     cf0:	41 f0       	breq	.+16     	; 0xd02 <disk_initialize+0x17e>
     cf2:	80 e5       	ldi	r24, 0x50	; 80
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	52 e0       	ldi	r21, 0x02	; 2
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     d00:	81 11       	cpse	r24, r1
     d02:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     d04:	10 93 d9 33 	sts	0x33D9, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d08:	80 e1       	ldi	r24, 0x10	; 16
     d0a:	e0 e6       	ldi	r30, 0x60	; 96
     d0c:	f6 e0       	ldi	r31, 0x06	; 6
     d0e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	e0 ec       	ldi	r30, 0xC0	; 192
     d14:	f9 e0       	ldi	r31, 0x09	; 9
     d16:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d18:	80 91 c2 09 	lds	r24, 0x09C2
     d1c:	87 ff       	sbrs	r24, 7
     d1e:	fc cf       	rjmp	.-8      	; 0xd18 <disk_initialize+0x194>
	return SD_SPI.DATA;
     d20:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     d24:	11 23       	and	r17, r17
     d26:	41 f0       	breq	.+16     	; 0xd38 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     d28:	80 91 07 33 	lds	r24, 0x3307
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	80 93 07 33 	sts	0x3307, r24
		FCLK_FAST();
     d32:	80 ed       	ldi	r24, 0xD0	; 208
     d34:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     d38:	80 91 07 33 	lds	r24, 0x3307
}
     d3c:	24 96       	adiw	r28, 0x04	; 4
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	08 95       	ret

00000d50 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     d50:	88 23       	and	r24, r24
     d52:	11 f0       	breq	.+4      	; 0xd58 <disk_status+0x8>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	08 95       	ret
	return Stat;
     d58:	80 91 07 33 	lds	r24, 0x3307
}
     d5c:	08 95       	ret

00000d5e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d5e:	0f 93       	push	r16
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     d66:	88 23       	and	r24, r24
     d68:	09 f0       	breq	.+2      	; 0xd6c <disk_read+0xe>
     d6a:	53 c0       	rjmp	.+166    	; 0xe12 <disk_read+0xb4>
     d6c:	00 23       	and	r16, r16
     d6e:	09 f4       	brne	.+2      	; 0xd72 <disk_read+0x14>
     d70:	50 c0       	rjmp	.+160    	; 0xe12 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d72:	80 91 07 33 	lds	r24, 0x3307
     d76:	80 ff       	sbrs	r24, 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <disk_read+0x20>
     d7a:	03 e0       	ldi	r16, 0x03	; 3
     d7c:	4b c0       	rjmp	.+150    	; 0xe14 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d7e:	80 91 d9 33 	lds	r24, 0x33D9
     d82:	83 fd       	sbrc	r24, 3
     d84:	07 c0       	rjmp	.+14     	; 0xd94 <disk_read+0x36>
     d86:	69 e0       	ldi	r22, 0x09	; 9
     d88:	22 0f       	add	r18, r18
     d8a:	33 1f       	adc	r19, r19
     d8c:	44 1f       	adc	r20, r20
     d8e:	55 1f       	adc	r21, r21
     d90:	6a 95       	dec	r22
     d92:	d1 f7       	brne	.-12     	; 0xd88 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     d94:	01 30       	cpi	r16, 0x01	; 1
     d96:	89 f4       	brne	.+34     	; 0xdba <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     d98:	81 e5       	ldi	r24, 0x51	; 81
     d9a:	ba 01       	movw	r22, r20
     d9c:	a9 01       	movw	r20, r18
     d9e:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     da2:	88 23       	and	r24, r24
     da4:	21 f5       	brne	.+72     	; 0xdee <disk_read+0x90>
     da6:	ce 01       	movw	r24, r28
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	72 e0       	ldi	r23, 0x02	; 2
     dac:	0e 94 85 04 	call	0x90a	; 0x90a <rcvr_datablock>
     db0:	00 e0       	ldi	r16, 0x00	; 0
     db2:	88 23       	and	r24, r24
     db4:	e1 f4       	brne	.+56     	; 0xdee <disk_read+0x90>
     db6:	01 e0       	ldi	r16, 0x01	; 1
     db8:	1a c0       	rjmp	.+52     	; 0xdee <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     dba:	82 e5       	ldi	r24, 0x52	; 82
     dbc:	ba 01       	movw	r22, r20
     dbe:	a9 01       	movw	r20, r18
     dc0:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     dc4:	88 23       	and	r24, r24
     dc6:	99 f4       	brne	.+38     	; 0xdee <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     dc8:	ce 01       	movw	r24, r28
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	72 e0       	ldi	r23, 0x02	; 2
     dce:	0e 94 85 04 	call	0x90a	; 0x90a <rcvr_datablock>
     dd2:	88 23       	and	r24, r24
     dd4:	29 f0       	breq	.+10     	; 0xde0 <disk_read+0x82>
				buff += 512;
			} while (--count);
     dd6:	01 50       	subi	r16, 0x01	; 1
     dd8:	19 f0       	breq	.+6      	; 0xde0 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     dda:	c0 50       	subi	r28, 0x00	; 0
     ddc:	de 4f       	sbci	r29, 0xFE	; 254
     dde:	f4 cf       	rjmp	.-24     	; 0xdc8 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     de0:	8c e4       	ldi	r24, 0x4C	; 76
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     dee:	80 e1       	ldi	r24, 0x10	; 16
     df0:	e0 e6       	ldi	r30, 0x60	; 96
     df2:	f6 e0       	ldi	r31, 0x06	; 6
     df4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	e0 ec       	ldi	r30, 0xC0	; 192
     dfa:	f9 e0       	ldi	r31, 0x09	; 9
     dfc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     dfe:	80 91 c2 09 	lds	r24, 0x09C2
     e02:	87 ff       	sbrs	r24, 7
     e04:	fc cf       	rjmp	.-8      	; 0xdfe <disk_read+0xa0>
	return SD_SPI.DATA;
     e06:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     e0a:	00 23       	and	r16, r16
     e0c:	19 f0       	breq	.+6      	; 0xe14 <disk_read+0xb6>
     e0e:	01 e0       	ldi	r16, 0x01	; 1
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <disk_read+0xb6>
     e12:	04 e0       	ldi	r16, 0x04	; 4
}
     e14:	80 2f       	mov	r24, r16
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	eb 01       	movw	r28, r22
     e2e:	69 01       	movw	r12, r18
     e30:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     e32:	88 23       	and	r24, r24
     e34:	09 f0       	breq	.+2      	; 0xe38 <disk_write+0x1a>
     e36:	61 c0       	rjmp	.+194    	; 0xefa <disk_write+0xdc>
     e38:	00 23       	and	r16, r16
     e3a:	09 f4       	brne	.+2      	; 0xe3e <disk_write+0x20>
     e3c:	5e c0       	rjmp	.+188    	; 0xefa <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e3e:	80 91 07 33 	lds	r24, 0x3307
     e42:	80 ff       	sbrs	r24, 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <disk_write+0x2c>
     e46:	03 e0       	ldi	r16, 0x03	; 3
     e48:	59 c0       	rjmp	.+178    	; 0xefc <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e4a:	80 91 07 33 	lds	r24, 0x3307
     e4e:	82 ff       	sbrs	r24, 2
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <disk_write+0x38>
     e52:	02 e0       	ldi	r16, 0x02	; 2
     e54:	53 c0       	rjmp	.+166    	; 0xefc <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e56:	80 91 d9 33 	lds	r24, 0x33D9
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	83 fd       	sbrc	r24, 3
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <disk_write+0x50>
     e60:	79 e0       	ldi	r23, 0x09	; 9
     e62:	cc 0c       	add	r12, r12
     e64:	dd 1c       	adc	r13, r13
     e66:	ee 1c       	adc	r14, r14
     e68:	ff 1c       	adc	r15, r15
     e6a:	7a 95       	dec	r23
     e6c:	d1 f7       	brne	.-12     	; 0xe62 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     e6e:	01 30       	cpi	r16, 0x01	; 1
     e70:	69 f4       	brne	.+26     	; 0xe8c <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     e72:	88 e5       	ldi	r24, 0x58	; 88
     e74:	b7 01       	movw	r22, r14
     e76:	a6 01       	movw	r20, r12
     e78:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     e7c:	88 23       	and	r24, r24
     e7e:	59 f5       	brne	.+86     	; 0xed6 <disk_write+0xb8>
     e80:	ce 01       	movw	r24, r28
     e82:	6e ef       	ldi	r22, 0xFE	; 254
     e84:	0e 94 e7 04 	call	0x9ce	; 0x9ce <xmit_datablock>
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	22 c0       	rjmp	.+68     	; 0xed0 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e8c:	86 70       	andi	r24, 0x06	; 6
     e8e:	90 70       	andi	r25, 0x00	; 0
     e90:	89 2b       	or	r24, r25
     e92:	39 f0       	breq	.+14     	; 0xea2 <disk_write+0x84>
     e94:	40 2f       	mov	r20, r16
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	87 ed       	ldi	r24, 0xD7	; 215
     e9e:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     ea2:	89 e5       	ldi	r24, 0x59	; 89
     ea4:	b7 01       	movw	r22, r14
     ea6:	a6 01       	movw	r20, r12
     ea8:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     eac:	88 23       	and	r24, r24
     eae:	99 f4       	brne	.+38     	; 0xed6 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     eb0:	ce 01       	movw	r24, r28
     eb2:	6c ef       	ldi	r22, 0xFC	; 252
     eb4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <xmit_datablock>
     eb8:	88 23       	and	r24, r24
     eba:	29 f0       	breq	.+10     	; 0xec6 <disk_write+0xa8>
				buff += 512;
			} while (--count);
     ebc:	01 50       	subi	r16, 0x01	; 1
     ebe:	19 f0       	breq	.+6      	; 0xec6 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     ec0:	c0 50       	subi	r28, 0x00	; 0
     ec2:	de 4f       	sbci	r29, 0xFE	; 254
     ec4:	f5 cf       	rjmp	.-22     	; 0xeb0 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	6d ef       	ldi	r22, 0xFD	; 253
     ecc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <xmit_datablock>
     ed0:	88 23       	and	r24, r24
     ed2:	09 f4       	brne	.+2      	; 0xed6 <disk_write+0xb8>
     ed4:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     ed6:	80 e1       	ldi	r24, 0x10	; 16
     ed8:	e0 e6       	ldi	r30, 0x60	; 96
     eda:	f6 e0       	ldi	r31, 0x06	; 6
     edc:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	e0 ec       	ldi	r30, 0xC0	; 192
     ee2:	f9 e0       	ldi	r31, 0x09	; 9
     ee4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ee6:	80 91 c2 09 	lds	r24, 0x09C2
     eea:	87 ff       	sbrs	r24, 7
     eec:	fc cf       	rjmp	.-8      	; 0xee6 <disk_write+0xc8>
	return SD_SPI.DATA;
     eee:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     ef2:	00 23       	and	r16, r16
     ef4:	19 f0       	breq	.+6      	; 0xefc <disk_write+0xde>
     ef6:	01 e0       	ldi	r16, 0x01	; 1
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <disk_write+0xde>
     efa:	04 e0       	ldi	r16, 0x04	; 4
}
     efc:	80 2f       	mov	r24, r16
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	08 95       	ret

00000f0e <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	60 97       	sbiw	r28, 0x10	; 16
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <disk_ioctl+0x1c>
     f28:	b8 c1       	rjmp	.+880    	; 0x129a <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     f2a:	64 30       	cpi	r22, 0x04	; 4
     f2c:	01 f5       	brne	.+64     	; 0xf6e <disk_ioctl+0x60>
		switch (*ptr) {
     f2e:	fa 01       	movw	r30, r20
     f30:	80 81       	ld	r24, Z
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	39 f0       	breq	.+14     	; 0xf44 <disk_ioctl+0x36>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	08 f4       	brcc	.+2      	; 0xf3c <disk_ioctl+0x2e>
     f3a:	b1 c1       	rjmp	.+866    	; 0x129e <disk_ioctl+0x390>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	09 f0       	breq	.+2      	; 0xf42 <disk_ioctl+0x34>
     f40:	ac c1       	rjmp	.+856    	; 0x129a <disk_ioctl+0x38c>
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     f44:	e0 e6       	ldi	r30, 0x60	; 96
     f46:	f6 e0       	ldi	r31, 0x06	; 6
     f48:	80 eb       	ldi	r24, 0xB0	; 176
     f4a:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     f4c:	88 e3       	ldi	r24, 0x38	; 56
     f4e:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     f50:	14 82       	std	Z+4, r1	; 0x04
     f52:	8c e2       	ldi	r24, 0x2C	; 44
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	20 e7       	ldi	r18, 0x70	; 112
     f58:	31 e0       	ldi	r19, 0x01	; 1
     f5a:	f9 01       	movw	r30, r18
     f5c:	31 97       	sbiw	r30, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	d9 f7       	brne	.-10     	; 0xf5a <disk_ioctl+0x4c>
     f64:	9c c1       	rjmp	.+824    	; 0x129e <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	fa 01       	movw	r30, r20
     f6a:	81 83       	std	Z+1, r24	; 0x01
     f6c:	98 c1       	rjmp	.+816    	; 0x129e <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     f6e:	80 91 07 33 	lds	r24, 0x3307
     f72:	80 ff       	sbrs	r24, 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <disk_ioctl+0x6c>
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	93 c1       	rjmp	.+806    	; 0x12a0 <disk_ioctl+0x392>

		switch (ctrl) {
     f7a:	6a 30       	cpi	r22, 0x0A	; 10
     f7c:	09 f4       	brne	.+2      	; 0xf80 <disk_ioctl+0x72>
     f7e:	2f c1       	rjmp	.+606    	; 0x11de <disk_ioctl+0x2d0>
     f80:	6b 30       	cpi	r22, 0x0B	; 11
     f82:	50 f4       	brcc	.+20     	; 0xf98 <disk_ioctl+0x8a>
     f84:	61 30       	cpi	r22, 0x01	; 1
     f86:	51 f1       	breq	.+84     	; 0xfdc <disk_ioctl+0xce>
     f88:	61 30       	cpi	r22, 0x01	; 1
     f8a:	a0 f0       	brcs	.+40     	; 0xfb4 <disk_ioctl+0xa6>
     f8c:	62 30       	cpi	r22, 0x02	; 2
     f8e:	09 f4       	brne	.+2      	; 0xf92 <disk_ioctl+0x84>
     f90:	86 c0       	rjmp	.+268    	; 0x109e <disk_ioctl+0x190>
     f92:	63 30       	cpi	r22, 0x03	; 3
     f94:	69 f4       	brne	.+26     	; 0xfb0 <disk_ioctl+0xa2>
     f96:	89 c0       	rjmp	.+274    	; 0x10aa <disk_ioctl+0x19c>
     f98:	6c 30       	cpi	r22, 0x0C	; 12
     f9a:	09 f4       	brne	.+2      	; 0xf9e <disk_ioctl+0x90>
     f9c:	27 c1       	rjmp	.+590    	; 0x11ec <disk_ioctl+0x2de>
     f9e:	6c 30       	cpi	r22, 0x0C	; 12
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <disk_ioctl+0x96>
     fa2:	22 c1       	rjmp	.+580    	; 0x11e8 <disk_ioctl+0x2da>
     fa4:	6d 30       	cpi	r22, 0x0D	; 13
     fa6:	09 f4       	brne	.+2      	; 0xfaa <disk_ioctl+0x9c>
     fa8:	2e c1       	rjmp	.+604    	; 0x1206 <disk_ioctl+0x2f8>
     faa:	6e 30       	cpi	r22, 0x0E	; 14
     fac:	09 f4       	brne	.+2      	; 0xfb0 <disk_ioctl+0xa2>
     fae:	4a c1       	rjmp	.+660    	; 0x1244 <disk_ioctl+0x336>
     fb0:	94 e0       	ldi	r25, 0x04	; 4
     fb2:	64 c1       	rjmp	.+712    	; 0x127c <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     fb4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <select>
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <disk_ioctl+0xb0>
     fbc:	5e c1       	rjmp	.+700    	; 0x127a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     fbe:	80 e1       	ldi	r24, 0x10	; 16
     fc0:	e0 e6       	ldi	r30, 0x60	; 96
     fc2:	f6 e0       	ldi	r31, 0x06	; 6
     fc4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	e0 ec       	ldi	r30, 0xC0	; 192
     fca:	f9 e0       	ldi	r31, 0x09	; 9
     fcc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fce:	80 91 c2 09 	lds	r24, 0x09C2
     fd2:	87 ff       	sbrs	r24, 7
     fd4:	fc cf       	rjmp	.-8      	; 0xfce <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     fd6:	80 91 c3 09 	lds	r24, 0x09C3
     fda:	ff c0       	rjmp	.+510    	; 0x11da <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     fdc:	89 e4       	ldi	r24, 0x49	; 73
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
     fea:	88 23       	and	r24, r24
     fec:	09 f0       	breq	.+2      	; 0xff0 <disk_ioctl+0xe2>
     fee:	45 c1       	rjmp	.+650    	; 0x127a <disk_ioctl+0x36c>
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	60 e1       	ldi	r22, 0x10	; 16
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0e 94 85 04 	call	0x90a	; 0x90a <rcvr_datablock>
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <disk_ioctl+0xf4>
    1000:	3c c1       	rjmp	.+632    	; 0x127a <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	82 95       	swap	r24
    1006:	86 95       	lsr	r24
    1008:	86 95       	lsr	r24
    100a:	83 70       	andi	r24, 0x03	; 3
    100c:	7a 85       	ldd	r23, Y+10	; 0x0a
    100e:	49 85       	ldd	r20, Y+9	; 0x09
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	89 f4       	brne	.+34     	; 0x1036 <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    1014:	87 2f       	mov	r24, r23
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	34 2f       	mov	r19, r20
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	a0 e0       	ldi	r26, 0x00	; 0
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	2a e0       	ldi	r18, 0x0A	; 10
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	aa 1f       	adc	r26, r26
    102e:	bb 1f       	adc	r27, r27
    1030:	2a 95       	dec	r18
    1032:	d1 f7       	brne	.-12     	; 0x1028 <disk_ioctl+0x11a>
    1034:	cd c0       	rjmp	.+410    	; 0x11d0 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1036:	42 95       	swap	r20
    1038:	46 95       	lsr	r20
    103a:	46 95       	lsr	r20
    103c:	43 70       	andi	r20, 0x03	; 3
    103e:	28 85       	ldd	r18, Y+8	; 0x08
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	22 0f       	add	r18, r18
    1044:	33 1f       	adc	r19, r19
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	24 0f       	add	r18, r20
    104c:	31 1d       	adc	r19, r1
    104e:	2f 5f       	subi	r18, 0xFF	; 255
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
    1052:	8f 81       	ldd	r24, Y+7	; 0x07
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	83 70       	andi	r24, 0x03	; 3
    1058:	90 70       	andi	r25, 0x00	; 0
    105a:	98 2f       	mov	r25, r24
    105c:	88 27       	eor	r24, r24
    105e:	99 0f       	add	r25, r25
    1060:	99 0f       	add	r25, r25
    1062:	28 0f       	add	r18, r24
    1064:	39 1f       	adc	r19, r25
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	8f 70       	andi	r24, 0x0F	; 15
    106e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1070:	66 1f       	adc	r22, r22
    1072:	66 27       	eor	r22, r22
    1074:	66 1f       	adc	r22, r22
    1076:	86 0f       	add	r24, r22
    1078:	8e 5f       	subi	r24, 0xFE	; 254
    107a:	73 70       	andi	r23, 0x03	; 3
    107c:	77 0f       	add	r23, r23
    107e:	87 0f       	add	r24, r23
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	09 97       	sbiw	r24, 0x09	; 9
    1084:	04 c0       	rjmp	.+8      	; 0x108e <disk_ioctl+0x180>
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	44 1f       	adc	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	8a 95       	dec	r24
    1090:	d2 f7       	brpl	.-12     	; 0x1086 <disk_ioctl+0x178>
    1092:	f8 01       	movw	r30, r16
    1094:	20 83       	st	Z, r18
    1096:	31 83       	std	Z+1, r19	; 0x01
    1098:	42 83       	std	Z+2, r20	; 0x02
    109a:	53 83       	std	Z+3, r21	; 0x03
    109c:	9e c0       	rjmp	.+316    	; 0x11da <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	fa 01       	movw	r30, r20
    10a4:	80 83       	st	Z, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	98 c0       	rjmp	.+304    	; 0x11da <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    10aa:	80 91 d9 33 	lds	r24, 0x33D9
    10ae:	f8 2e       	mov	r15, r24
    10b0:	82 ff       	sbrs	r24, 2
    10b2:	39 c0       	rjmp	.+114    	; 0x1126 <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    10b4:	8d ec       	ldi	r24, 0xCD	; 205
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
    10c2:	88 23       	and	r24, r24
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <disk_ioctl+0x1ba>
    10c6:	d9 c0       	rjmp	.+434    	; 0x127a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	e0 ec       	ldi	r30, 0xC0	; 192
    10cc:	f9 e0       	ldi	r31, 0x09	; 9
    10ce:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10d0:	80 91 c2 09 	lds	r24, 0x09C2
    10d4:	87 ff       	sbrs	r24, 7
    10d6:	fc cf       	rjmp	.-8      	; 0x10d0 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    10d8:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    10dc:	ce 01       	movw	r24, r28
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	60 e1       	ldi	r22, 0x10	; 16
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	0e 94 85 04 	call	0x90a	; 0x90a <rcvr_datablock>
    10e8:	88 23       	and	r24, r24
    10ea:	09 f4       	brne	.+2      	; 0x10ee <disk_ioctl+0x1e0>
    10ec:	c6 c0       	rjmp	.+396    	; 0x127a <disk_ioctl+0x36c>
    10ee:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10f0:	e0 ec       	ldi	r30, 0xC0	; 192
    10f2:	f9 e0       	ldi	r31, 0x09	; 9
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10f8:	80 91 c2 09 	lds	r24, 0x09C2
    10fc:	87 ff       	sbrs	r24, 7
    10fe:	fc cf       	rjmp	.-8      	; 0x10f8 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    1100:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    1104:	91 50       	subi	r25, 0x01	; 1
    1106:	b9 f7       	brne	.-18     	; 0x10f6 <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1108:	2b 85       	ldd	r18, Y+11	; 0x0b
    110a:	22 95       	swap	r18
    110c:	2f 70       	andi	r18, 0x0F	; 15
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <disk_ioctl+0x212>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	aa 1f       	adc	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	2a 95       	dec	r18
    1122:	d2 f7       	brpl	.-12     	; 0x1118 <disk_ioctl+0x20a>
    1124:	55 c0       	rjmp	.+170    	; 0x11d0 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1126:	89 e4       	ldi	r24, 0x49	; 73
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
    1134:	88 23       	and	r24, r24
    1136:	09 f0       	breq	.+2      	; 0x113a <disk_ioctl+0x22c>
    1138:	a0 c0       	rjmp	.+320    	; 0x127a <disk_ioctl+0x36c>
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	60 e1       	ldi	r22, 0x10	; 16
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	0e 94 85 04 	call	0x90a	; 0x90a <rcvr_datablock>
    1146:	88 23       	and	r24, r24
    1148:	09 f4       	brne	.+2      	; 0x114c <disk_ioctl+0x23e>
    114a:	97 c0       	rjmp	.+302    	; 0x127a <disk_ioctl+0x36c>
    114c:	4b 85       	ldd	r20, Y+11	; 0x0b
    114e:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    1150:	f1 fe       	sbrs	r15, 1
    1152:	1b c0       	rjmp	.+54     	; 0x118a <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1154:	88 1f       	adc	r24, r24
    1156:	88 27       	eor	r24, r24
    1158:	88 1f       	adc	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	24 2f       	mov	r18, r20
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	2f 73       	andi	r18, 0x3F	; 63
    1164:	30 70       	andi	r19, 0x00	; 0
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	82 0f       	add	r24, r18
    116c:	93 1f       	adc	r25, r19
    116e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1170:	22 95       	swap	r18
    1172:	26 95       	lsr	r18
    1174:	26 95       	lsr	r18
    1176:	23 70       	andi	r18, 0x03	; 3
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	21 50       	subi	r18, 0x01	; 1
    117c:	30 40       	sbci	r19, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <disk_ioctl+0x276>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	2a 95       	dec	r18
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <disk_ioctl+0x272>
    1188:	21 c0       	rjmp	.+66     	; 0x11cc <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	23 70       	andi	r18, 0x03	; 3
    1190:	30 70       	andi	r19, 0x00	; 0
    1192:	f3 e0       	ldi	r31, 0x03	; 3
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	fa 95       	dec	r31
    119a:	e1 f7       	brne	.-8      	; 0x1194 <disk_ioctl+0x286>
    119c:	82 95       	swap	r24
    119e:	86 95       	lsr	r24
    11a0:	87 70       	andi	r24, 0x07	; 7
    11a2:	28 0f       	add	r18, r24
    11a4:	31 1d       	adc	r19, r1
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	84 2f       	mov	r24, r20
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	8c 77       	andi	r24, 0x7C	; 124
    11b0:	90 70       	andi	r25, 0x00	; 0
    11b2:	95 95       	asr	r25
    11b4:	87 95       	ror	r24
    11b6:	95 95       	asr	r25
    11b8:	87 95       	ror	r24
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	ac 01       	movw	r20, r24
    11be:	24 9f       	mul	r18, r20
    11c0:	c0 01       	movw	r24, r0
    11c2:	25 9f       	mul	r18, r21
    11c4:	90 0d       	add	r25, r0
    11c6:	34 9f       	mul	r19, r20
    11c8:	90 0d       	add	r25, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	f8 01       	movw	r30, r16
    11d2:	80 83       	st	Z, r24
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	a2 83       	std	Z+2, r26	; 0x02
    11d8:	b3 83       	std	Z+3, r27	; 0x03
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	4f c0       	rjmp	.+158    	; 0x127c <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    11de:	80 91 d9 33 	lds	r24, 0x33D9
    11e2:	fa 01       	movw	r30, r20
    11e4:	80 83       	st	Z, r24
    11e6:	f9 cf       	rjmp	.-14     	; 0x11da <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    11e8:	89 e4       	ldi	r24, 0x49	; 73
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    11ec:	8a e4       	ldi	r24, 0x4A	; 74
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
    11fa:	88 23       	and	r24, r24
    11fc:	f1 f5       	brne	.+124    	; 0x127a <disk_ioctl+0x36c>
    11fe:	c8 01       	movw	r24, r16
    1200:	60 e1       	ldi	r22, 0x10	; 16
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	35 c0       	rjmp	.+106    	; 0x1270 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1206:	8a e7       	ldi	r24, 0x7A	; 122
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
    1214:	88 23       	and	r24, r24
    1216:	89 f5       	brne	.+98     	; 0x127a <disk_ioctl+0x36c>
    1218:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    121a:	a0 ec       	ldi	r26, 0xC0	; 192
    121c:	b9 e0       	ldi	r27, 0x09	; 9
    121e:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1220:	98 01       	movw	r18, r16
    1222:	2d 5f       	subi	r18, 0xFD	; 253
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1226:	13 96       	adiw	r26, 0x03	; 3
    1228:	9c 93       	st	X, r25
    122a:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    122c:	80 91 c2 09 	lds	r24, 0x09C2
    1230:	87 ff       	sbrs	r24, 7
    1232:	fc cf       	rjmp	.-8      	; 0x122c <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1234:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1238:	80 83       	st	Z, r24
    123a:	e2 17       	cp	r30, r18
    123c:	f3 07       	cpc	r31, r19
    123e:	69 f2       	breq	.-102    	; 0x11da <disk_ioctl+0x2cc>
    1240:	31 96       	adiw	r30, 0x01	; 1
    1242:	f1 cf       	rjmp	.-30     	; 0x1226 <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1244:	8d ec       	ldi	r24, 0xCD	; 205
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	0e 94 36 05 	call	0xa6c	; 0xa6c <send_cmd>
    1252:	88 23       	and	r24, r24
    1254:	91 f4       	brne	.+36     	; 0x127a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	e0 ec       	ldi	r30, 0xC0	; 192
    125a:	f9 e0       	ldi	r31, 0x09	; 9
    125c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    125e:	80 91 c2 09 	lds	r24, 0x09C2
    1262:	87 ff       	sbrs	r24, 7
    1264:	fc cf       	rjmp	.-8      	; 0x125e <disk_ioctl+0x350>
	return SD_SPI.DATA;
    1266:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    126a:	c8 01       	movw	r24, r16
    126c:	60 e4       	ldi	r22, 0x40	; 64
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	0e 94 85 04 	call	0x90a	; 0x90a <rcvr_datablock>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 23       	and	r24, r24
    1278:	09 f4       	brne	.+2      	; 0x127c <disk_ioctl+0x36e>
    127a:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    127c:	80 e1       	ldi	r24, 0x10	; 16
    127e:	e0 e6       	ldi	r30, 0x60	; 96
    1280:	f6 e0       	ldi	r31, 0x06	; 6
    1282:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	e0 ec       	ldi	r30, 0xC0	; 192
    1288:	f9 e0       	ldi	r31, 0x09	; 9
    128a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    128c:	80 91 c2 09 	lds	r24, 0x09C2
    1290:	87 ff       	sbrs	r24, 7
    1292:	fc cf       	rjmp	.-8      	; 0x128c <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    1294:	80 91 c3 09 	lds	r24, 0x09C3
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <disk_ioctl+0x392>
    129a:	94 e0       	ldi	r25, 0x04	; 4
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <disk_ioctl+0x392>
    129e:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    12a0:	89 2f       	mov	r24, r25
    12a2:	60 96       	adiw	r28, 0x10	; 16
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	08 95       	ret

000012b4 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    12b4:	80 91 d7 33 	lds	r24, 0x33D7
    if (n) Timer1 = --n;
    12b8:	88 23       	and	r24, r24
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <disk_timerproc+0xe>
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	80 93 d7 33 	sts	0x33D7, r24
    n = Timer2;
    12c2:	80 91 d8 33 	lds	r24, 0x33D8
    if (n) Timer2 = --n;
    12c6:	88 23       	and	r24, r24
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <disk_timerproc+0x1c>
    12ca:	81 50       	subi	r24, 0x01	; 1
    12cc:	80 93 d8 33 	sts	0x33D8, r24

	s = Stat;
    12d0:	80 91 07 33 	lds	r24, 0x3307

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    12d4:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    12d6:	80 93 07 33 	sts	0x3307, r24
}
    12da:	08 95       	ret

000012dc <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	08 95       	ret

000012e6 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	8f 92       	push	r8
    12ec:	9f 92       	push	r9
    12ee:	af 92       	push	r10
    12f0:	bf 92       	push	r11
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
    1304:	4a 01       	movw	r8, r20
    1306:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    1308:	ca a4       	ldd	r12, Y+42	; 0x2a
    130a:	db a4       	ldd	r13, Y+43	; 0x2b
    130c:	ec a4       	ldd	r14, Y+44	; 0x2c
    130e:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1310:	c4 16       	cp	r12, r20
    1312:	d5 06       	cpc	r13, r21
    1314:	e6 06       	cpc	r14, r22
    1316:	f7 06       	cpc	r15, r23
    1318:	09 f4       	brne	.+2      	; 0x131c <move_window+0x36>
    131a:	4e c0       	rjmp	.+156    	; 0x13b8 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	88 23       	and	r24, r24
    1320:	a1 f1       	breq	.+104    	; 0x138a <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    1322:	3e e2       	ldi	r19, 0x2E	; 46
    1324:	63 2e       	mov	r6, r19
    1326:	71 2c       	mov	r7, r1
    1328:	6c 0e       	add	r6, r28
    132a:	7d 1e       	adc	r7, r29
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	b3 01       	movw	r22, r6
    1330:	a7 01       	movw	r20, r14
    1332:	96 01       	movw	r18, r12
    1334:	01 e0       	ldi	r16, 0x01	; 1
    1336:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    133a:	88 23       	and	r24, r24
    133c:	d9 f5       	brne	.+118    	; 0x13b4 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    133e:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    1340:	8e 89       	ldd	r24, Y+22	; 0x16
    1342:	9f 89       	ldd	r25, Y+23	; 0x17
    1344:	a8 8d       	ldd	r26, Y+24	; 0x18
    1346:	b9 8d       	ldd	r27, Y+25	; 0x19
    1348:	2e 8d       	ldd	r18, Y+30	; 0x1e
    134a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    134c:	48 a1       	ldd	r20, Y+32	; 0x20
    134e:	59 a1       	ldd	r21, Y+33	; 0x21
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	a4 1f       	adc	r26, r20
    1356:	b5 1f       	adc	r27, r21
    1358:	c8 16       	cp	r12, r24
    135a:	d9 06       	cpc	r13, r25
    135c:	ea 06       	cpc	r14, r26
    135e:	fb 06       	cpc	r15, r27
    1360:	a0 f4       	brcc	.+40     	; 0x138a <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1362:	1b 81       	ldd	r17, Y+3	; 0x03
    1364:	10 c0       	rjmp	.+32     	; 0x1386 <move_window+0xa0>
					wsect += fs->sects_fat;
    1366:	8e 89       	ldd	r24, Y+22	; 0x16
    1368:	9f 89       	ldd	r25, Y+23	; 0x17
    136a:	a8 8d       	ldd	r26, Y+24	; 0x18
    136c:	b9 8d       	ldd	r27, Y+25	; 0x19
    136e:	c8 0e       	add	r12, r24
    1370:	d9 1e       	adc	r13, r25
    1372:	ea 1e       	adc	r14, r26
    1374:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	b3 01       	movw	r22, r6
    137a:	a7 01       	movw	r20, r14
    137c:	96 01       	movw	r18, r12
    137e:	01 e0       	ldi	r16, 0x01	; 1
    1380:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1384:	11 50       	subi	r17, 0x01	; 1
    1386:	12 30       	cpi	r17, 0x02	; 2
    1388:	70 f7       	brcc	.-36     	; 0x1366 <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    138a:	81 14       	cp	r8, r1
    138c:	91 04       	cpc	r9, r1
    138e:	a1 04       	cpc	r10, r1
    1390:	b1 04       	cpc	r11, r1
    1392:	91 f0       	breq	.+36     	; 0x13b8 <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    1394:	be 01       	movw	r22, r28
    1396:	62 5d       	subi	r22, 0xD2	; 210
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	a5 01       	movw	r20, r10
    139e:	94 01       	movw	r18, r8
    13a0:	01 e0       	ldi	r16, 0x01	; 1
    13a2:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    13a6:	88 23       	and	r24, r24
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    13aa:	8a a6       	std	Y+42, r8	; 0x2a
    13ac:	9b a6       	std	Y+43, r9	; 0x2b
    13ae:	ac a6       	std	Y+44, r10	; 0x2c
    13b0:	bd a6       	std	Y+45, r11	; 0x2d
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <move_window+0xd4>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <move_window+0xd4>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	08 95       	ret

000013d8 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    13d8:	0f 93       	push	r16
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
	if (res == FR_OK) {
    13ec:	88 23       	and	r24, r24
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <sync+0x1a>
    13f0:	7e c0       	rjmp	.+252    	; 0x14ee <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    13f2:	88 81       	ld	r24, Y
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	09 f0       	breq	.+2      	; 0x13fa <sync+0x22>
    13f8:	72 c0       	rjmp	.+228    	; 0x14de <sync+0x106>
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	88 23       	and	r24, r24
    13fe:	09 f4       	brne	.+2      	; 0x1402 <sync+0x2a>
    1400:	6e c0       	rjmp	.+220    	; 0x14de <sync+0x106>
			fs->winsect = 0;
    1402:	1a a6       	std	Y+42, r1	; 0x2a
    1404:	1b a6       	std	Y+43, r1	; 0x2b
    1406:	1c a6       	std	Y+44, r1	; 0x2c
    1408:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    140a:	be 01       	movw	r22, r28
    140c:	62 5d       	subi	r22, 0xD2	; 210
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	fb 01       	movw	r30, r22
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	01 c0       	rjmp	.+2      	; 0x141a <sync+0x42>
	while (cnt--) *d++ = (char)val;
    1418:	11 92       	st	Z+, r1
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	2f ef       	ldi	r18, 0xFF	; 255
    141e:	8f 3f       	cpi	r24, 0xFF	; 255
    1420:	92 07       	cpc	r25, r18
    1422:	d1 f7       	brne	.-12     	; 0x1418 <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1424:	c4 5d       	subi	r28, 0xD4	; 212
    1426:	dd 4f       	sbci	r29, 0xFD	; 253
    1428:	85 e5       	ldi	r24, 0x55	; 85
    142a:	89 93       	st	Y+, r24
    142c:	8a ea       	ldi	r24, 0xAA	; 170
    142e:	88 83       	st	Y, r24
    1430:	cd 52       	subi	r28, 0x2D	; 45
    1432:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1434:	82 e5       	ldi	r24, 0x52	; 82
    1436:	8e a7       	std	Y+46, r24	; 0x2e
    1438:	8f a7       	std	Y+47, r24	; 0x2f
    143a:	21 e6       	ldi	r18, 0x61	; 97
    143c:	28 ab       	std	Y+48, r18	; 0x30
    143e:	91 e4       	ldi	r25, 0x41	; 65
    1440:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1442:	ce 5e       	subi	r28, 0xEE	; 238
    1444:	dd 4f       	sbci	r29, 0xFD	; 253
    1446:	82 e7       	ldi	r24, 0x72	; 114
    1448:	89 93       	st	Y+, r24
    144a:	89 93       	st	Y+, r24
    144c:	99 93       	st	Y+, r25
    144e:	28 83       	st	Y, r18
    1450:	c5 51       	subi	r28, 0x15	; 21
    1452:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1454:	8e 85       	ldd	r24, Y+14	; 0x0e
    1456:	ca 5e       	subi	r28, 0xEA	; 234
    1458:	dd 4f       	sbci	r29, 0xFD	; 253
    145a:	88 83       	st	Y, r24
    145c:	c6 51       	subi	r28, 0x16	; 22
    145e:	d2 40       	sbci	r29, 0x02	; 2
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	c9 5e       	subi	r28, 0xE9	; 233
    1464:	dd 4f       	sbci	r29, 0xFD	; 253
    1466:	88 83       	st	Y, r24
    1468:	c7 51       	subi	r28, 0x17	; 23
    146a:	d2 40       	sbci	r29, 0x02	; 2
    146c:	8e 85       	ldd	r24, Y+14	; 0x0e
    146e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1470:	a8 89       	ldd	r26, Y+16	; 0x10
    1472:	b9 89       	ldd	r27, Y+17	; 0x11
    1474:	9d 01       	movw	r18, r26
    1476:	44 27       	eor	r20, r20
    1478:	55 27       	eor	r21, r21
    147a:	c8 5e       	subi	r28, 0xE8	; 232
    147c:	dd 4f       	sbci	r29, 0xFD	; 253
    147e:	28 83       	st	Y, r18
    1480:	21 96       	adiw	r28, 0x01	; 1
    1482:	8b 2f       	mov	r24, r27
    1484:	99 27       	eor	r25, r25
    1486:	aa 27       	eor	r26, r26
    1488:	bb 27       	eor	r27, r27
    148a:	88 83       	st	Y, r24
    148c:	c9 51       	subi	r28, 0x19	; 25
    148e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1490:	8a 85       	ldd	r24, Y+10	; 0x0a
    1492:	c6 5e       	subi	r28, 0xE6	; 230
    1494:	dd 4f       	sbci	r29, 0xFD	; 253
    1496:	88 83       	st	Y, r24
    1498:	ca 51       	subi	r28, 0x1A	; 26
    149a:	d2 40       	sbci	r29, 0x02	; 2
    149c:	8b 85       	ldd	r24, Y+11	; 0x0b
    149e:	c5 5e       	subi	r28, 0xE5	; 229
    14a0:	dd 4f       	sbci	r29, 0xFD	; 253
    14a2:	88 83       	st	Y, r24
    14a4:	cb 51       	subi	r28, 0x1B	; 27
    14a6:	d2 40       	sbci	r29, 0x02	; 2
    14a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ac:	ac 85       	ldd	r26, Y+12	; 0x0c
    14ae:	bd 85       	ldd	r27, Y+13	; 0x0d
    14b0:	9d 01       	movw	r18, r26
    14b2:	44 27       	eor	r20, r20
    14b4:	55 27       	eor	r21, r21
    14b6:	c4 5e       	subi	r28, 0xE4	; 228
    14b8:	dd 4f       	sbci	r29, 0xFD	; 253
    14ba:	28 83       	st	Y, r18
    14bc:	21 96       	adiw	r28, 0x01	; 1
    14be:	8b 2f       	mov	r24, r27
    14c0:	99 27       	eor	r25, r25
    14c2:	aa 27       	eor	r26, r26
    14c4:	bb 27       	eor	r27, r27
    14c6:	88 83       	st	Y, r24
    14c8:	cd 51       	subi	r28, 0x1D	; 29
    14ca:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    14cc:	2a 89       	ldd	r18, Y+18	; 0x12
    14ce:	3b 89       	ldd	r19, Y+19	; 0x13
    14d0:	4c 89       	ldd	r20, Y+20	; 0x14
    14d2:	5d 89       	ldd	r21, Y+21	; 0x15
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	01 e0       	ldi	r16, 0x01	; 1
    14d8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
			fs->fsi_flag = 0;
    14dc:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	0e 94 87 07 	call	0xf0e	; 0xf0e <disk_ioctl>
    14ea:	81 11       	cpse	r24, r1
    14ec:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    14f6:	7f 92       	push	r7
    14f8:	8f 92       	push	r8
    14fa:	9f 92       	push	r9
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	4c 01       	movw	r8, r24
    1512:	7a 01       	movw	r14, r20
    1514:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    1516:	42 30       	cpi	r20, 0x02	; 2
    1518:	51 05       	cpc	r21, r1
    151a:	61 05       	cpc	r22, r1
    151c:	71 05       	cpc	r23, r1
    151e:	08 f4       	brcc	.+2      	; 0x1522 <get_fat+0x2c>
    1520:	bb c0       	rjmp	.+374    	; 0x1698 <get_fat+0x1a2>
    1522:	f4 01       	movw	r30, r8
    1524:	82 8d       	ldd	r24, Z+26	; 0x1a
    1526:	93 8d       	ldd	r25, Z+27	; 0x1b
    1528:	a4 8d       	ldd	r26, Z+28	; 0x1c
    152a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    152c:	48 17       	cp	r20, r24
    152e:	59 07       	cpc	r21, r25
    1530:	6a 07       	cpc	r22, r26
    1532:	7b 07       	cpc	r23, r27
    1534:	08 f0       	brcs	.+2      	; 0x1538 <get_fat+0x42>
    1536:	b0 c0       	rjmp	.+352    	; 0x1698 <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    1538:	a6 8c       	ldd	r10, Z+30	; 0x1e
    153a:	b7 8c       	ldd	r11, Z+31	; 0x1f
    153c:	c0 a0       	ldd	r12, Z+32	; 0x20
    153e:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    1540:	80 81       	ld	r24, Z
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	09 f4       	brne	.+2      	; 0x1548 <get_fat+0x52>
    1546:	4d c0       	rjmp	.+154    	; 0x15e2 <get_fat+0xec>
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	09 f4       	brne	.+2      	; 0x154e <get_fat+0x58>
    154c:	68 c0       	rjmp	.+208    	; 0x161e <get_fat+0x128>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <get_fat+0x5e>
    1552:	a7 c0       	rjmp	.+334    	; 0x16a2 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    1554:	ea 01       	movw	r28, r20
    1556:	d6 95       	lsr	r29
    1558:	c7 95       	ror	r28
    155a:	c4 0f       	add	r28, r20
    155c:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    155e:	ae 01       	movw	r20, r28
    1560:	45 2f       	mov	r20, r21
    1562:	55 27       	eor	r21, r21
    1564:	46 95       	lsr	r20
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	4a 0d       	add	r20, r10
    156c:	5b 1d       	adc	r21, r11
    156e:	6c 1d       	adc	r22, r12
    1570:	7d 1d       	adc	r23, r13
    1572:	c4 01       	movw	r24, r8
    1574:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    1578:	88 23       	and	r24, r24
    157a:	09 f0       	breq	.+2      	; 0x157e <get_fat+0x88>
    157c:	92 c0       	rjmp	.+292    	; 0x16a2 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    157e:	fe 01       	movw	r30, r28
    1580:	f1 70       	andi	r31, 0x01	; 1
    1582:	e8 0d       	add	r30, r8
    1584:	f9 1d       	adc	r31, r9
    1586:	76 a4       	ldd	r7, Z+46	; 0x2e
    1588:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    158a:	ae 01       	movw	r20, r28
    158c:	45 2f       	mov	r20, r21
    158e:	55 27       	eor	r21, r21
    1590:	46 95       	lsr	r20
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	4a 0d       	add	r20, r10
    1598:	5b 1d       	adc	r21, r11
    159a:	6c 1d       	adc	r22, r12
    159c:	7d 1d       	adc	r23, r13
    159e:	c4 01       	movw	r24, r8
    15a0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    15a4:	88 23       	and	r24, r24
    15a6:	09 f0       	breq	.+2      	; 0x15aa <get_fat+0xb4>
    15a8:	7c c0       	rjmp	.+248    	; 0x16a2 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    15aa:	67 2d       	mov	r22, r7
    15ac:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    15ae:	d1 70       	andi	r29, 0x01	; 1
    15b0:	c8 0d       	add	r28, r8
    15b2:	d9 1d       	adc	r29, r9
    15b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	68 2b       	or	r22, r24
    15ba:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    15bc:	c7 01       	movw	r24, r14
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	89 2b       	or	r24, r25
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <get_fat+0xde>
    15c6:	44 e0       	ldi	r20, 0x04	; 4
    15c8:	76 95       	lsr	r23
    15ca:	67 95       	ror	r22
    15cc:	4a 95       	dec	r20
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <get_fat+0xd2>
    15d0:	9b 01       	movw	r18, r22
    15d2:	22 c0       	rjmp	.+68     	; 0x1618 <get_fat+0x122>
    15d4:	9b 01       	movw	r18, r22
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	3f 70       	andi	r19, 0x0F	; 15
    15dc:	40 70       	andi	r20, 0x00	; 0
    15de:	50 70       	andi	r21, 0x00	; 0
    15e0:	64 c0       	rjmp	.+200    	; 0x16aa <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    15e2:	45 2f       	mov	r20, r21
    15e4:	56 2f       	mov	r21, r22
    15e6:	67 2f       	mov	r22, r23
    15e8:	77 27       	eor	r23, r23
    15ea:	4a 0d       	add	r20, r10
    15ec:	5b 1d       	adc	r21, r11
    15ee:	6c 1d       	adc	r22, r12
    15f0:	7d 1d       	adc	r23, r13
    15f2:	c4 01       	movw	r24, r8
    15f4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    15f8:	88 23       	and	r24, r24
    15fa:	09 f0       	breq	.+2      	; 0x15fe <get_fat+0x108>
    15fc:	52 c0       	rjmp	.+164    	; 0x16a2 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    15fe:	f7 01       	movw	r30, r14
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	f1 70       	andi	r31, 0x01	; 1
    1606:	e8 0d       	add	r30, r8
    1608:	f9 1d       	adc	r31, r9
    160a:	97 a5       	ldd	r25, Z+47	; 0x2f
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	82 2b       	or	r24, r18
    1614:	93 2b       	or	r25, r19
    1616:	9c 01       	movw	r18, r24
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	46 c0       	rjmp	.+140    	; 0x16aa <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    161e:	97 e0       	ldi	r25, 0x07	; 7
    1620:	76 95       	lsr	r23
    1622:	67 95       	ror	r22
    1624:	57 95       	ror	r21
    1626:	47 95       	ror	r20
    1628:	9a 95       	dec	r25
    162a:	d1 f7       	brne	.-12     	; 0x1620 <get_fat+0x12a>
    162c:	4a 0d       	add	r20, r10
    162e:	5b 1d       	adc	r21, r11
    1630:	6c 1d       	adc	r22, r12
    1632:	7d 1d       	adc	r23, r13
    1634:	c4 01       	movw	r24, r8
    1636:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    163a:	88 23       	and	r24, r24
    163c:	91 f5       	brne	.+100    	; 0x16a2 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    163e:	f7 01       	movw	r30, r14
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	f1 70       	andi	r31, 0x01	; 1
    164a:	e8 0d       	add	r30, r8
    164c:	f9 1d       	adc	r31, r9
    164e:	81 a9       	ldd	r24, Z+49	; 0x31
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	58 2f       	mov	r21, r24
    1658:	44 27       	eor	r20, r20
    165a:	33 27       	eor	r19, r19
    165c:	22 27       	eor	r18, r18
    165e:	80 a9       	ldd	r24, Z+48	; 0x30
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	dc 01       	movw	r26, r24
    1668:	99 27       	eor	r25, r25
    166a:	88 27       	eor	r24, r24
    166c:	28 2b       	or	r18, r24
    166e:	39 2b       	or	r19, r25
    1670:	4a 2b       	or	r20, r26
    1672:	5b 2b       	or	r21, r27
    1674:	86 a5       	ldd	r24, Z+46	; 0x2e
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	28 2b       	or	r18, r24
    167e:	39 2b       	or	r19, r25
    1680:	4a 2b       	or	r20, r26
    1682:	5b 2b       	or	r21, r27
    1684:	97 a5       	ldd	r25, Z+47	; 0x2f
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	a0 e0       	ldi	r26, 0x00	; 0
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	28 2b       	or	r18, r24
    168e:	39 2b       	or	r19, r25
    1690:	4a 2b       	or	r20, r26
    1692:	5b 2b       	or	r21, r27
    1694:	5f 70       	andi	r21, 0x0F	; 15
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <get_fat+0x1b4>
    1698:	21 e0       	ldi	r18, 0x01	; 1
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <get_fat+0x1b4>
    16a2:	2f ef       	ldi	r18, 0xFF	; 255
    16a4:	3f ef       	ldi	r19, 0xFF	; 255
    16a6:	4f ef       	ldi	r20, 0xFF	; 255
    16a8:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    16aa:	b9 01       	movw	r22, r18
    16ac:	ca 01       	movw	r24, r20
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	cf 90       	pop	r12
    16be:	bf 90       	pop	r11
    16c0:	af 90       	pop	r10
    16c2:	9f 90       	pop	r9
    16c4:	8f 90       	pop	r8
    16c6:	7f 90       	pop	r7
    16c8:	08 95       	ret

000016ca <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    16ca:	2f 92       	push	r2
    16cc:	3f 92       	push	r3
    16ce:	4f 92       	push	r4
    16d0:	5f 92       	push	r5
    16d2:	6f 92       	push	r6
    16d4:	7f 92       	push	r7
    16d6:	8f 92       	push	r8
    16d8:	9f 92       	push	r9
    16da:	af 92       	push	r10
    16dc:	bf 92       	push	r11
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	3c 01       	movw	r6, r24
    16f0:	6a 01       	movw	r12, r20
    16f2:	7b 01       	movw	r14, r22
    16f4:	48 01       	movw	r8, r16
    16f6:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    16f8:	42 30       	cpi	r20, 0x02	; 2
    16fa:	51 05       	cpc	r21, r1
    16fc:	61 05       	cpc	r22, r1
    16fe:	71 05       	cpc	r23, r1
    1700:	08 f4       	brcc	.+2      	; 0x1704 <put_fat+0x3a>
    1702:	ba c0       	rjmp	.+372    	; 0x1878 <put_fat+0x1ae>
    1704:	f3 01       	movw	r30, r6
    1706:	82 8d       	ldd	r24, Z+26	; 0x1a
    1708:	93 8d       	ldd	r25, Z+27	; 0x1b
    170a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    170c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    170e:	48 17       	cp	r20, r24
    1710:	59 07       	cpc	r21, r25
    1712:	6a 07       	cpc	r22, r26
    1714:	7b 07       	cpc	r23, r27
    1716:	08 f0       	brcs	.+2      	; 0x171a <put_fat+0x50>
    1718:	af c0       	rjmp	.+350    	; 0x1878 <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    171a:	26 8c       	ldd	r2, Z+30	; 0x1e
    171c:	37 8c       	ldd	r3, Z+31	; 0x1f
    171e:	40 a0       	ldd	r4, Z+32	; 0x20
    1720:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    1722:	80 81       	ld	r24, Z
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	09 f4       	brne	.+2      	; 0x172a <put_fat+0x60>
    1728:	64 c0       	rjmp	.+200    	; 0x17f2 <put_fat+0x128>
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	09 f4       	brne	.+2      	; 0x1730 <put_fat+0x66>
    172e:	7a c0       	rjmp	.+244    	; 0x1824 <put_fat+0x15a>
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	11 f0       	breq	.+4      	; 0x1738 <put_fat+0x6e>
    1734:	22 e0       	ldi	r18, 0x02	; 2
    1736:	9c c0       	rjmp	.+312    	; 0x1870 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1738:	ea 01       	movw	r28, r20
    173a:	d6 95       	lsr	r29
    173c:	c7 95       	ror	r28
    173e:	c4 0f       	add	r28, r20
    1740:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    1742:	ae 01       	movw	r20, r28
    1744:	45 2f       	mov	r20, r21
    1746:	55 27       	eor	r21, r21
    1748:	46 95       	lsr	r20
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	42 0d       	add	r20, r2
    1750:	53 1d       	adc	r21, r3
    1752:	64 1d       	adc	r22, r4
    1754:	75 1d       	adc	r23, r5
    1756:	c3 01       	movw	r24, r6
    1758:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    175c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    175e:	88 23       	and	r24, r24
    1760:	09 f0       	breq	.+2      	; 0x1764 <put_fat+0x9a>
    1762:	86 c0       	rjmp	.+268    	; 0x1870 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1764:	de 01       	movw	r26, r28
    1766:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1768:	86 01       	movw	r16, r12
    176a:	01 70       	andi	r16, 0x01	; 1
    176c:	10 70       	andi	r17, 0x00	; 0
    176e:	01 15       	cp	r16, r1
    1770:	11 05       	cpc	r17, r1
    1772:	51 f0       	breq	.+20     	; 0x1788 <put_fat+0xbe>
    1774:	f3 01       	movw	r30, r6
    1776:	ea 0f       	add	r30, r26
    1778:	fb 1f       	adc	r31, r27
    177a:	86 a5       	ldd	r24, Z+46	; 0x2e
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	98 2d       	mov	r25, r8
    1780:	92 95       	swap	r25
    1782:	90 7f       	andi	r25, 0xF0	; 240
    1784:	98 2b       	or	r25, r24
    1786:	01 c0       	rjmp	.+2      	; 0x178a <put_fat+0xc0>
    1788:	98 2d       	mov	r25, r8
    178a:	a6 0d       	add	r26, r6
    178c:	b7 1d       	adc	r27, r7
    178e:	9e 96       	adiw	r26, 0x2e	; 46
    1790:	9c 93       	st	X, r25
			bc++;
    1792:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	f3 01       	movw	r30, r6
    1798:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    179a:	ae 01       	movw	r20, r28
    179c:	45 2f       	mov	r20, r21
    179e:	55 27       	eor	r21, r21
    17a0:	46 95       	lsr	r20
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	42 0d       	add	r20, r2
    17a8:	53 1d       	adc	r21, r3
    17aa:	64 1d       	adc	r22, r4
    17ac:	75 1d       	adc	r23, r5
    17ae:	c3 01       	movw	r24, r6
    17b0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    17b4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17b6:	88 23       	and	r24, r24
    17b8:	09 f0       	breq	.+2      	; 0x17bc <put_fat+0xf2>
    17ba:	5a c0       	rjmp	.+180    	; 0x1870 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    17bc:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    17be:	01 2b       	or	r16, r17
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <put_fat+0x10a>
    17c2:	64 e0       	ldi	r22, 0x04	; 4
    17c4:	b6 94       	lsr	r11
    17c6:	a7 94       	ror	r10
    17c8:	97 94       	ror	r9
    17ca:	87 94       	ror	r8
    17cc:	6a 95       	dec	r22
    17ce:	d1 f7       	brne	.-12     	; 0x17c4 <put_fat+0xfa>
    17d0:	48 2d       	mov	r20, r8
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <put_fat+0x120>
    17d4:	f3 01       	movw	r30, r6
    17d6:	ec 0f       	add	r30, r28
    17d8:	fd 1f       	adc	r31, r29
    17da:	46 a5       	ldd	r20, Z+46	; 0x2e
    17dc:	40 7f       	andi	r20, 0xF0	; 240
    17de:	bb 27       	eor	r27, r27
    17e0:	ab 2d       	mov	r26, r11
    17e2:	9a 2d       	mov	r25, r10
    17e4:	89 2d       	mov	r24, r9
    17e6:	8f 70       	andi	r24, 0x0F	; 15
    17e8:	48 2b       	or	r20, r24
    17ea:	c6 0d       	add	r28, r6
    17ec:	d7 1d       	adc	r29, r7
    17ee:	4e a7       	std	Y+46, r20	; 0x2e
    17f0:	3f c0       	rjmp	.+126    	; 0x1870 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    17f2:	77 27       	eor	r23, r23
    17f4:	6f 2d       	mov	r22, r15
    17f6:	5e 2d       	mov	r21, r14
    17f8:	4d 2d       	mov	r20, r13
    17fa:	42 0d       	add	r20, r2
    17fc:	53 1d       	adc	r21, r3
    17fe:	64 1d       	adc	r22, r4
    1800:	75 1d       	adc	r23, r5
    1802:	c3 01       	movw	r24, r6
    1804:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    1808:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    180a:	88 23       	and	r24, r24
    180c:	89 f5       	brne	.+98     	; 0x1870 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    180e:	f6 01       	movw	r30, r12
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	f1 70       	andi	r31, 0x01	; 1
    1816:	e6 0d       	add	r30, r6
    1818:	f7 1d       	adc	r31, r7
    181a:	86 a6       	std	Z+46, r8	; 0x2e
    181c:	89 2d       	mov	r24, r9
    181e:	99 27       	eor	r25, r25
    1820:	87 a7       	std	Z+47, r24	; 0x2f
    1822:	26 c0       	rjmp	.+76     	; 0x1870 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    1824:	87 e0       	ldi	r24, 0x07	; 7
    1826:	76 95       	lsr	r23
    1828:	67 95       	ror	r22
    182a:	57 95       	ror	r21
    182c:	47 95       	ror	r20
    182e:	8a 95       	dec	r24
    1830:	d1 f7       	brne	.-12     	; 0x1826 <put_fat+0x15c>
    1832:	42 0d       	add	r20, r2
    1834:	53 1d       	adc	r21, r3
    1836:	64 1d       	adc	r22, r4
    1838:	75 1d       	adc	r23, r5
    183a:	c3 01       	movw	r24, r6
    183c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    1840:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1842:	88 23       	and	r24, r24
    1844:	a9 f4       	brne	.+42     	; 0x1870 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    1846:	f6 01       	movw	r30, r12
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	f1 70       	andi	r31, 0x01	; 1
    1852:	e6 0d       	add	r30, r6
    1854:	f7 1d       	adc	r31, r7
    1856:	86 a6       	std	Z+46, r8	; 0x2e
    1858:	89 2d       	mov	r24, r9
    185a:	99 27       	eor	r25, r25
    185c:	87 a7       	std	Z+47, r24	; 0x2f
    185e:	c5 01       	movw	r24, r10
    1860:	aa 27       	eor	r26, r26
    1862:	bb 27       	eor	r27, r27
    1864:	80 ab       	std	Z+48, r24	; 0x30
    1866:	8b 2d       	mov	r24, r11
    1868:	99 27       	eor	r25, r25
    186a:	aa 27       	eor	r26, r26
    186c:	bb 27       	eor	r27, r27
    186e:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	f3 01       	movw	r30, r6
    1874:	84 83       	std	Z+4, r24	; 0x04
    1876:	01 c0       	rjmp	.+2      	; 0x187a <put_fat+0x1b0>
    1878:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    187a:	82 2f       	mov	r24, r18
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	bf 90       	pop	r11
    188e:	af 90       	pop	r10
    1890:	9f 90       	pop	r9
    1892:	8f 90       	pop	r8
    1894:	7f 90       	pop	r7
    1896:	6f 90       	pop	r6
    1898:	5f 90       	pop	r5
    189a:	4f 90       	pop	r4
    189c:	3f 90       	pop	r3
    189e:	2f 90       	pop	r2
    18a0:	08 95       	ret

000018a2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    18a2:	9f 92       	push	r9
    18a4:	af 92       	push	r10
    18a6:	bf 92       	push	r11
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ec 01       	movw	r28, r24
    18ba:	7a 01       	movw	r14, r20
    18bc:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    18be:	42 30       	cpi	r20, 0x02	; 2
    18c0:	51 05       	cpc	r21, r1
    18c2:	61 05       	cpc	r22, r1
    18c4:	71 05       	cpc	r23, r1
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <remove_chain+0x28>
    18c8:	58 c0       	rjmp	.+176    	; 0x197a <remove_chain+0xd8>
    18ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ce:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18d0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18d2:	48 17       	cp	r20, r24
    18d4:	59 07       	cpc	r21, r25
    18d6:	6a 07       	cpc	r22, r26
    18d8:	7b 07       	cpc	r23, r27
    18da:	08 f4       	brcc	.+2      	; 0x18de <remove_chain+0x3c>
    18dc:	41 c0       	rjmp	.+130    	; 0x1960 <remove_chain+0xbe>
    18de:	4d c0       	rjmp	.+154    	; 0x197a <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    18e0:	ce 01       	movw	r24, r28
    18e2:	b8 01       	movw	r22, r16
    18e4:	a7 01       	movw	r20, r14
    18e6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    18ea:	5b 01       	movw	r10, r22
    18ec:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	81 05       	cpc	r24, r1
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <remove_chain+0x58>
    18f8:	42 c0       	rjmp	.+132    	; 0x197e <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	a8 16       	cp	r10, r24
    18fe:	b1 04       	cpc	r11, r1
    1900:	c1 04       	cpc	r12, r1
    1902:	d1 04       	cpc	r13, r1
    1904:	d1 f1       	breq	.+116    	; 0x197a <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1906:	2f ef       	ldi	r18, 0xFF	; 255
    1908:	a2 16       	cp	r10, r18
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	b2 06       	cpc	r11, r18
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	c2 06       	cpc	r12, r18
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	d2 06       	cpc	r13, r18
    1916:	11 f4       	brne	.+4      	; 0x191c <remove_chain+0x7a>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	32 c0       	rjmp	.+100    	; 0x1980 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    191c:	ce 01       	movw	r24, r28
    191e:	b8 01       	movw	r22, r16
    1920:	a7 01       	movw	r20, r14
    1922:	00 e0       	ldi	r16, 0x00	; 0
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <put_fat>
			if (res != FR_OK) break;
    192e:	88 23       	and	r24, r24
    1930:	39 f5       	brne	.+78     	; 0x1980 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1932:	8e 85       	ldd	r24, Y+14	; 0x0e
    1934:	9f 85       	ldd	r25, Y+15	; 0x0f
    1936:	a8 89       	ldd	r26, Y+16	; 0x10
    1938:	b9 89       	ldd	r27, Y+17	; 0x11
    193a:	8f 3f       	cpi	r24, 0xFF	; 255
    193c:	2f ef       	ldi	r18, 0xFF	; 255
    193e:	92 07       	cpc	r25, r18
    1940:	2f ef       	ldi	r18, 0xFF	; 255
    1942:	a2 07       	cpc	r26, r18
    1944:	2f ef       	ldi	r18, 0xFF	; 255
    1946:	b2 07       	cpc	r27, r18
    1948:	41 f0       	breq	.+16     	; 0x195a <remove_chain+0xb8>
				fs->free_clust++;
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	a1 1d       	adc	r26, r1
    194e:	b1 1d       	adc	r27, r1
    1950:	8e 87       	std	Y+14, r24	; 0x0e
    1952:	9f 87       	std	Y+15, r25	; 0x0f
    1954:	a8 8b       	std	Y+16, r26	; 0x10
    1956:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1958:	9d 82       	std	Y+5, r9	; 0x05
    195a:	86 01       	movw	r16, r12
    195c:	75 01       	movw	r14, r10
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <remove_chain+0xc2>
    1960:	99 24       	eor	r9, r9
    1962:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1964:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1966:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1968:	ac 8d       	ldd	r26, Y+28	; 0x1c
    196a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    196c:	e8 16       	cp	r14, r24
    196e:	f9 06       	cpc	r15, r25
    1970:	0a 07       	cpc	r16, r26
    1972:	1b 07       	cpc	r17, r27
    1974:	08 f4       	brcc	.+2      	; 0x1978 <remove_chain+0xd6>
    1976:	b4 cf       	rjmp	.-152    	; 0x18e0 <remove_chain+0x3e>
    1978:	02 c0       	rjmp	.+4      	; 0x197e <remove_chain+0xdc>
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <remove_chain+0xde>
    197e:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	bf 90       	pop	r11
    1992:	af 90       	pop	r10
    1994:	9f 90       	pop	r9
    1996:	08 95       	ret

00001998 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1998:	2f 92       	push	r2
    199a:	3f 92       	push	r3
    199c:	4f 92       	push	r4
    199e:	5f 92       	push	r5
    19a0:	6f 92       	push	r6
    19a2:	7f 92       	push	r7
    19a4:	8f 92       	push	r8
    19a6:	9f 92       	push	r9
    19a8:	af 92       	push	r10
    19aa:	bf 92       	push	r11
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <create_chain+0x26>
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	1c 01       	movw	r2, r24
    19c6:	2a 01       	movw	r4, r20
    19c8:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    19ca:	dc 01       	movw	r26, r24
    19cc:	5a 96       	adiw	r26, 0x1a	; 26
    19ce:	8d 91       	ld	r24, X+
    19d0:	9d 91       	ld	r25, X+
    19d2:	0d 90       	ld	r0, X+
    19d4:	bc 91       	ld	r27, X
    19d6:	a0 2d       	mov	r26, r0
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	ab 83       	std	Y+3, r26	; 0x03
    19de:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    19e0:	41 15       	cp	r20, r1
    19e2:	51 05       	cpc	r21, r1
    19e4:	61 05       	cpc	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	81 f4       	brne	.+32     	; 0x1a0a <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    19ea:	f1 01       	movw	r30, r2
    19ec:	82 84       	ldd	r8, Z+10	; 0x0a
    19ee:	93 84       	ldd	r9, Z+11	; 0x0b
    19f0:	a4 84       	ldd	r10, Z+12	; 0x0c
    19f2:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    19f4:	81 14       	cp	r8, r1
    19f6:	91 04       	cpc	r9, r1
    19f8:	a1 04       	cpc	r10, r1
    19fa:	b1 04       	cpc	r11, r1
    19fc:	11 f1       	breq	.+68     	; 0x1a42 <create_chain+0xaa>
    19fe:	88 16       	cp	r8, r24
    1a00:	99 06       	cpc	r9, r25
    1a02:	aa 06       	cpc	r10, r26
    1a04:	bb 06       	cpc	r11, r27
    1a06:	e8 f4       	brcc	.+58     	; 0x1a42 <create_chain+0xaa>
    1a08:	21 c0       	rjmp	.+66     	; 0x1a4c <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1a0a:	c1 01       	movw	r24, r2
    1a0c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1a14:	62 30       	cpi	r22, 0x02	; 2
    1a16:	71 05       	cpc	r23, r1
    1a18:	81 05       	cpc	r24, r1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	28 f4       	brcc	.+10     	; 0x1a28 <create_chain+0x90>
    1a1e:	21 e0       	ldi	r18, 0x01	; 1
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	93 c0       	rjmp	.+294    	; 0x1b4e <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a30:	28 17       	cp	r18, r24
    1a32:	39 07       	cpc	r19, r25
    1a34:	4a 07       	cpc	r20, r26
    1a36:	5b 07       	cpc	r21, r27
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <create_chain+0xa4>
    1a3a:	89 c0       	rjmp	.+274    	; 0x1b4e <create_chain+0x1b6>
    1a3c:	53 01       	movw	r10, r6
    1a3e:	42 01       	movw	r8, r4
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <create_chain+0xb4>
    1a42:	b1 e0       	ldi	r27, 0x01	; 1
    1a44:	8b 2e       	mov	r8, r27
    1a46:	91 2c       	mov	r9, r1
    1a48:	a1 2c       	mov	r10, r1
    1a4a:	b1 2c       	mov	r11, r1
    1a4c:	75 01       	movw	r14, r10
    1a4e:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1a50:	08 94       	sec
    1a52:	c1 1c       	adc	r12, r1
    1a54:	d1 1c       	adc	r13, r1
    1a56:	e1 1c       	adc	r14, r1
    1a58:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a60:	bc 81       	ldd	r27, Y+4	; 0x04
    1a62:	c8 16       	cp	r12, r24
    1a64:	d9 06       	cpc	r13, r25
    1a66:	ea 06       	cpc	r14, r26
    1a68:	fb 06       	cpc	r15, r27
    1a6a:	60 f0       	brcs	.+24     	; 0x1a84 <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1a6c:	92 e0       	ldi	r25, 0x02	; 2
    1a6e:	89 16       	cp	r8, r25
    1a70:	91 04       	cpc	r9, r1
    1a72:	a1 04       	cpc	r10, r1
    1a74:	b1 04       	cpc	r11, r1
    1a76:	08 f4       	brcc	.+2      	; 0x1a7a <create_chain+0xe2>
    1a78:	61 c0       	rjmp	.+194    	; 0x1b3c <create_chain+0x1a4>
    1a7a:	a2 e0       	ldi	r26, 0x02	; 2
    1a7c:	ca 2e       	mov	r12, r26
    1a7e:	d1 2c       	mov	r13, r1
    1a80:	e1 2c       	mov	r14, r1
    1a82:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a84:	c1 01       	movw	r24, r2
    1a86:	b7 01       	movw	r22, r14
    1a88:	a6 01       	movw	r20, r12
    1a8a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1a92:	61 15       	cp	r22, r1
    1a94:	71 05       	cpc	r23, r1
    1a96:	81 05       	cpc	r24, r1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	a9 f0       	breq	.+42     	; 0x1ac6 <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1a9c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a9e:	af ef       	ldi	r26, 0xFF	; 255
    1aa0:	7a 07       	cpc	r23, r26
    1aa2:	af ef       	ldi	r26, 0xFF	; 255
    1aa4:	8a 07       	cpc	r24, r26
    1aa6:	af ef       	ldi	r26, 0xFF	; 255
    1aa8:	9a 07       	cpc	r25, r26
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <create_chain+0x116>
    1aac:	50 c0       	rjmp	.+160    	; 0x1b4e <create_chain+0x1b6>
    1aae:	61 30       	cpi	r22, 0x01	; 1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	81 05       	cpc	r24, r1
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <create_chain+0x122>
    1ab8:	4a c0       	rjmp	.+148    	; 0x1b4e <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1aba:	c8 14       	cp	r12, r8
    1abc:	d9 04       	cpc	r13, r9
    1abe:	ea 04       	cpc	r14, r10
    1ac0:	fb 04       	cpc	r15, r11
    1ac2:	31 f6       	brne	.-116    	; 0x1a50 <create_chain+0xb8>
    1ac4:	3b c0       	rjmp	.+118    	; 0x1b3c <create_chain+0x1a4>
    1ac6:	bc 2c       	mov	r11, r12
    1ac8:	ad 2c       	mov	r10, r13
    1aca:	9e 2c       	mov	r9, r14
    1acc:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1ace:	c1 01       	movw	r24, r2
    1ad0:	a6 01       	movw	r20, r12
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	0f ef       	ldi	r16, 0xFF	; 255
    1ad6:	1f ef       	ldi	r17, 0xFF	; 255
    1ad8:	2f ef       	ldi	r18, 0xFF	; 255
    1ada:	3f e0       	ldi	r19, 0x0F	; 15
    1adc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <put_fat>
    1ae0:	88 23       	and	r24, r24
    1ae2:	89 f5       	brne	.+98     	; 0x1b46 <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1ae4:	41 14       	cp	r4, r1
    1ae6:	51 04       	cpc	r5, r1
    1ae8:	61 04       	cpc	r6, r1
    1aea:	71 04       	cpc	r7, r1
    1aec:	49 f0       	breq	.+18     	; 0x1b00 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1aee:	c1 01       	movw	r24, r2
    1af0:	b3 01       	movw	r22, r6
    1af2:	a2 01       	movw	r20, r4
    1af4:	86 01       	movw	r16, r12
    1af6:	97 01       	movw	r18, r14
    1af8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <put_fat>
    1afc:	88 23       	and	r24, r24
    1afe:	19 f5       	brne	.+70     	; 0x1b46 <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1b00:	f1 01       	movw	r30, r2
    1b02:	b2 86       	std	Z+10, r11	; 0x0a
    1b04:	a3 86       	std	Z+11, r10	; 0x0b
    1b06:	94 86       	std	Z+12, r9	; 0x0c
    1b08:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1b0a:	86 85       	ldd	r24, Z+14	; 0x0e
    1b0c:	97 85       	ldd	r25, Z+15	; 0x0f
    1b0e:	a0 89       	ldd	r26, Z+16	; 0x10
    1b10:	b1 89       	ldd	r27, Z+17	; 0x11
    1b12:	8f 3f       	cpi	r24, 0xFF	; 255
    1b14:	ff ef       	ldi	r31, 0xFF	; 255
    1b16:	9f 07       	cpc	r25, r31
    1b18:	ff ef       	ldi	r31, 0xFF	; 255
    1b1a:	af 07       	cpc	r26, r31
    1b1c:	ff ef       	ldi	r31, 0xFF	; 255
    1b1e:	bf 07       	cpc	r27, r31
    1b20:	51 f0       	breq	.+20     	; 0x1b36 <create_chain+0x19e>
		fs->free_clust--;
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	a1 09       	sbc	r26, r1
    1b26:	b1 09       	sbc	r27, r1
    1b28:	f1 01       	movw	r30, r2
    1b2a:	86 87       	std	Z+14, r24	; 0x0e
    1b2c:	97 87       	std	Z+15, r25	; 0x0f
    1b2e:	a0 8b       	std	Z+16, r26	; 0x10
    1b30:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	85 83       	std	Z+5, r24	; 0x05
    1b36:	a7 01       	movw	r20, r14
    1b38:	96 01       	movw	r18, r12
    1b3a:	09 c0       	rjmp	.+18     	; 0x1b4e <create_chain+0x1b6>
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <create_chain+0x1b6>
    1b46:	2f ef       	ldi	r18, 0xFF	; 255
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f ef       	ldi	r20, 0xFF	; 255
    1b4c:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1b4e:	b9 01       	movw	r22, r18
    1b50:	ca 01       	movw	r24, r20
    1b52:	24 96       	adiw	r28, 0x04	; 4
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	bf 90       	pop	r11
    1b6a:	af 90       	pop	r10
    1b6c:	9f 90       	pop	r9
    1b6e:	8f 90       	pop	r8
    1b70:	7f 90       	pop	r7
    1b72:	6f 90       	pop	r6
    1b74:	5f 90       	pop	r5
    1b76:	4f 90       	pop	r4
    1b78:	3f 90       	pop	r3
    1b7a:	2f 90       	pop	r2
    1b7c:	08 95       	ret

00001b7e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	ec 01       	movw	r28, r24
    1b8c:	7a 01       	movw	r14, r20
    1b8e:	8b 01       	movw	r16, r22
	clst -= 2;
    1b90:	8e ef       	ldi	r24, 0xFE	; 254
    1b92:	9f ef       	ldi	r25, 0xFF	; 255
    1b94:	af ef       	ldi	r26, 0xFF	; 255
    1b96:	bf ef       	ldi	r27, 0xFF	; 255
    1b98:	e8 0e       	add	r14, r24
    1b9a:	f9 1e       	adc	r15, r25
    1b9c:	0a 1f       	adc	r16, r26
    1b9e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1ba0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ba2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ba4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1ba6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1ba8:	02 97       	sbiw	r24, 0x02	; 2
    1baa:	a1 09       	sbc	r26, r1
    1bac:	b1 09       	sbc	r27, r1
    1bae:	e8 16       	cp	r14, r24
    1bb0:	f9 06       	cpc	r15, r25
    1bb2:	0a 07       	cpc	r16, r26
    1bb4:	1b 07       	cpc	r17, r27
    1bb6:	28 f0       	brcs	.+10     	; 0x1bc2 <clust2sect+0x44>
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	12 c0       	rjmp	.+36     	; 0x1be6 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1bc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	c8 01       	movw	r24, r16
    1bcc:	b7 01       	movw	r22, r14
    1bce:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	8e a1       	ldd	r24, Y+38	; 0x26
    1bd8:	9f a1       	ldd	r25, Y+39	; 0x27
    1bda:	a8 a5       	ldd	r26, Y+40	; 0x28
    1bdc:	b9 a5       	ldd	r27, Y+41	; 0x29
    1bde:	28 0f       	add	r18, r24
    1be0:	39 1f       	adc	r19, r25
    1be2:	4a 1f       	adc	r20, r26
    1be4:	5b 1f       	adc	r21, r27
}
    1be6:	b9 01       	movw	r22, r18
    1be8:	ca 01       	movw	r24, r20
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	08 95       	ret

00001bf8 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1bf8:	af 92       	push	r10
    1bfa:	bf 92       	push	r11
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	5c 01       	movw	r10, r24
    1c0e:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1c10:	dc 01       	movw	r26, r24
    1c12:	14 96       	adiw	r26, 0x04	; 4
    1c14:	6d 93       	st	X+, r22
    1c16:	7c 93       	st	X, r23
    1c18:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1c1a:	16 96       	adiw	r26, 0x06	; 6
    1c1c:	4d 91       	ld	r20, X+
    1c1e:	5d 91       	ld	r21, X+
    1c20:	6d 91       	ld	r22, X+
    1c22:	7c 91       	ld	r23, X
    1c24:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1c26:	41 30       	cpi	r20, 0x01	; 1
    1c28:	51 05       	cpc	r21, r1
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	71 05       	cpc	r23, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <dir_seek+0x3a>
    1c30:	d3 c0       	rjmp	.+422    	; 0x1dd8 <dir_seek+0x1e0>
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c38:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c3a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c3c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c3e:	48 17       	cp	r20, r24
    1c40:	59 07       	cpc	r21, r25
    1c42:	6a 07       	cpc	r22, r26
    1c44:	7b 07       	cpc	r23, r27
    1c46:	08 f0       	brcs	.+2      	; 0x1c4a <dir_seek+0x52>
    1c48:	c7 c0       	rjmp	.+398    	; 0x1dd8 <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1c4a:	41 15       	cp	r20, r1
    1c4c:	51 05       	cpc	r21, r1
    1c4e:	61 05       	cpc	r22, r1
    1c50:	71 05       	cpc	r23, r1
    1c52:	81 f5       	brne	.+96     	; 0x1cb4 <dir_seek+0xbc>
    1c54:	80 81       	ld	r24, Z
    1c56:	83 30       	cpi	r24, 0x03	; 3
    1c58:	49 f4       	brne	.+18     	; 0x1c6c <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1c5a:	42 a1       	ldd	r20, Z+34	; 0x22
    1c5c:	53 a1       	ldd	r21, Z+35	; 0x23
    1c5e:	64 a1       	ldd	r22, Z+36	; 0x24
    1c60:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1c62:	41 15       	cp	r20, r1
    1c64:	51 05       	cpc	r21, r1
    1c66:	61 05       	cpc	r22, r1
    1c68:	71 05       	cpc	r23, r1
    1c6a:	21 f5       	brne	.+72     	; 0x1cb4 <dir_seek+0xbc>
		dj->clust = clst;
    1c6c:	f5 01       	movw	r30, r10
    1c6e:	12 86       	std	Z+10, r1	; 0x0a
    1c70:	13 86       	std	Z+11, r1	; 0x0b
    1c72:	14 86       	std	Z+12, r1	; 0x0c
    1c74:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1c76:	01 90       	ld	r0, Z+
    1c78:	f0 81       	ld	r31, Z
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	80 85       	ldd	r24, Z+8	; 0x08
    1c7e:	91 85       	ldd	r25, Z+9	; 0x09
    1c80:	c8 16       	cp	r12, r24
    1c82:	d9 06       	cpc	r13, r25
    1c84:	08 f0       	brcs	.+2      	; 0x1c88 <dir_seek+0x90>
    1c86:	a8 c0       	rjmp	.+336    	; 0x1dd8 <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1c88:	c6 01       	movw	r24, r12
    1c8a:	24 e0       	ldi	r18, 0x04	; 4
    1c8c:	96 95       	lsr	r25
    1c8e:	87 95       	ror	r24
    1c90:	2a 95       	dec	r18
    1c92:	e1 f7       	brne	.-8      	; 0x1c8c <dir_seek+0x94>
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	22 a1       	ldd	r18, Z+34	; 0x22
    1c9a:	33 a1       	ldd	r19, Z+35	; 0x23
    1c9c:	44 a1       	ldd	r20, Z+36	; 0x24
    1c9e:	55 a1       	ldd	r21, Z+37	; 0x25
    1ca0:	82 0f       	add	r24, r18
    1ca2:	93 1f       	adc	r25, r19
    1ca4:	a4 1f       	adc	r26, r20
    1ca6:	b5 1f       	adc	r27, r21
    1ca8:	f5 01       	movw	r30, r10
    1caa:	86 87       	std	Z+14, r24	; 0x0e
    1cac:	97 87       	std	Z+15, r25	; 0x0f
    1cae:	a0 8b       	std	Z+16, r26	; 0x10
    1cb0:	b1 8b       	std	Z+17, r27	; 0x11
    1cb2:	7a c0       	rjmp	.+244    	; 0x1da8 <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	08 2f       	mov	r16, r24
    1cb8:	10 e0       	ldi	r17, 0x00	; 0
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	00 0f       	add	r16, r16
    1cbe:	11 1f       	adc	r17, r17
    1cc0:	9a 95       	dec	r25
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <dir_seek+0xc4>
    1cc4:	24 c0       	rjmp	.+72     	; 0x1d0e <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    1ccc:	ab 01       	movw	r20, r22
    1cce:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1cd0:	4f 3f       	cpi	r20, 0xFF	; 255
    1cd2:	ff ef       	ldi	r31, 0xFF	; 255
    1cd4:	5f 07       	cpc	r21, r31
    1cd6:	ff ef       	ldi	r31, 0xFF	; 255
    1cd8:	6f 07       	cpc	r22, r31
    1cda:	ff ef       	ldi	r31, 0xFF	; 255
    1cdc:	7f 07       	cpc	r23, r31
    1cde:	11 f4       	brne	.+4      	; 0x1ce4 <dir_seek+0xec>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	7b c0       	rjmp	.+246    	; 0x1dda <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1ce4:	42 30       	cpi	r20, 0x02	; 2
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	61 05       	cpc	r22, r1
    1cea:	71 05       	cpc	r23, r1
    1cec:	08 f4       	brcc	.+2      	; 0x1cf0 <dir_seek+0xf8>
    1cee:	74 c0       	rjmp	.+232    	; 0x1dd8 <dir_seek+0x1e0>
    1cf0:	d5 01       	movw	r26, r10
    1cf2:	ed 91       	ld	r30, X+
    1cf4:	fc 91       	ld	r31, X
    1cf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cf8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cfa:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cfc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1cfe:	48 17       	cp	r20, r24
    1d00:	59 07       	cpc	r21, r25
    1d02:	6a 07       	cpc	r22, r26
    1d04:	7b 07       	cpc	r23, r27
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <dir_seek+0x112>
    1d08:	67 c0       	rjmp	.+206    	; 0x1dd8 <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1d0a:	c0 1a       	sub	r12, r16
    1d0c:	d1 0a       	sbc	r13, r17
    1d0e:	f5 01       	movw	r30, r10
    1d10:	c0 81       	ld	r28, Z
    1d12:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1d14:	c0 16       	cp	r12, r16
    1d16:	d1 06       	cpc	r13, r17
    1d18:	b0 f6       	brcc	.-84     	; 0x1cc6 <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1d1a:	d5 01       	movw	r26, r10
    1d1c:	1a 96       	adiw	r26, 0x0a	; 10
    1d1e:	4d 93       	st	X+, r20
    1d20:	5d 93       	st	X+, r21
    1d22:	6d 93       	st	X+, r22
    1d24:	7c 93       	st	X, r23
    1d26:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d28:	8e ef       	ldi	r24, 0xFE	; 254
    1d2a:	e8 2e       	mov	r14, r24
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	f8 2e       	mov	r15, r24
    1d30:	8f ef       	ldi	r24, 0xFF	; 255
    1d32:	08 2f       	mov	r16, r24
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	18 2f       	mov	r17, r24
    1d38:	e4 0e       	add	r14, r20
    1d3a:	f5 1e       	adc	r15, r21
    1d3c:	06 1f       	adc	r16, r22
    1d3e:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d42:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d44:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d46:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d48:	02 97       	sbiw	r24, 0x02	; 2
    1d4a:	a1 09       	sbc	r26, r1
    1d4c:	b1 09       	sbc	r27, r1
    1d4e:	e8 16       	cp	r14, r24
    1d50:	f9 06       	cpc	r15, r25
    1d52:	0a 07       	cpc	r16, r26
    1d54:	1b 07       	cpc	r17, r27
    1d56:	28 f0       	brcs	.+10     	; 0x1d62 <dir_seek+0x16a>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	12 c0       	rjmp	.+36     	; 0x1d86 <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1d62:	2a 81       	ldd	r18, Y+2	; 0x02
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	8e a1       	ldd	r24, Y+38	; 0x26
    1d78:	9f a1       	ldd	r25, Y+39	; 0x27
    1d7a:	a8 a5       	ldd	r26, Y+40	; 0x28
    1d7c:	b9 a5       	ldd	r27, Y+41	; 0x29
    1d7e:	28 0f       	add	r18, r24
    1d80:	39 1f       	adc	r19, r25
    1d82:	4a 1f       	adc	r20, r26
    1d84:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d86:	c6 01       	movw	r24, r12
    1d88:	04 e0       	ldi	r16, 0x04	; 4
    1d8a:	96 95       	lsr	r25
    1d8c:	87 95       	ror	r24
    1d8e:	0a 95       	dec	r16
    1d90:	e1 f7       	brne	.-8      	; 0x1d8a <dir_seek+0x192>
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	28 0f       	add	r18, r24
    1d98:	39 1f       	adc	r19, r25
    1d9a:	4a 1f       	adc	r20, r26
    1d9c:	5b 1f       	adc	r21, r27
    1d9e:	f5 01       	movw	r30, r10
    1da0:	26 87       	std	Z+14, r18	; 0x0e
    1da2:	37 87       	std	Z+15, r19	; 0x0f
    1da4:	40 8b       	std	Z+16, r20	; 0x10
    1da6:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1da8:	ff e0       	ldi	r31, 0x0F	; 15
    1daa:	cf 22       	and	r12, r31
    1dac:	dd 24       	eor	r13, r13
    1dae:	15 e0       	ldi	r17, 0x05	; 5
    1db0:	cc 0c       	add	r12, r12
    1db2:	dd 1c       	adc	r13, r13
    1db4:	1a 95       	dec	r17
    1db6:	e1 f7       	brne	.-8      	; 0x1db0 <dir_seek+0x1b8>
    1db8:	8e e2       	ldi	r24, 0x2E	; 46
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	c8 0e       	add	r12, r24
    1dbe:	d9 1e       	adc	r13, r25
    1dc0:	d5 01       	movw	r26, r10
    1dc2:	8d 91       	ld	r24, X+
    1dc4:	9c 91       	ld	r25, X
    1dc6:	11 97       	sbiw	r26, 0x01	; 1
    1dc8:	8c 0d       	add	r24, r12
    1dca:	9d 1d       	adc	r25, r13
    1dcc:	52 96       	adiw	r26, 0x12	; 18
    1dce:	8d 93       	st	X+, r24
    1dd0:	9c 93       	st	X, r25
    1dd2:	53 97       	sbiw	r26, 0x13	; 19
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	01 c0       	rjmp	.+2      	; 0x1dda <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
}
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	08 95       	ret

00001df0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1df0:	4f 92       	push	r4
    1df2:	5f 92       	push	r5
    1df4:	6f 92       	push	r6
    1df6:	7f 92       	push	r7
    1df8:	8f 92       	push	r8
    1dfa:	9f 92       	push	r9
    1dfc:	af 92       	push	r10
    1dfe:	bf 92       	push	r11
    1e00:	cf 92       	push	r12
    1e02:	df 92       	push	r13
    1e04:	ef 92       	push	r14
    1e06:	ff 92       	push	r15
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	ec 01       	movw	r28, r24
    1e12:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1e14:	6c 80       	ldd	r6, Y+4	; 0x04
    1e16:	7d 80       	ldd	r7, Y+5	; 0x05
    1e18:	08 94       	sec
    1e1a:	61 1c       	adc	r6, r1
    1e1c:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e1e:	61 14       	cp	r6, r1
    1e20:	71 04       	cpc	r7, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <dir_next+0x36>
    1e24:	4c c1       	rjmp	.+664    	; 0x20be <dir_next+0x2ce>
    1e26:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e28:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e2a:	a8 89       	ldd	r26, Y+16	; 0x10
    1e2c:	b9 89       	ldd	r27, Y+17	; 0x11
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	a1 05       	cpc	r26, r1
    1e32:	b1 05       	cpc	r27, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <dir_next+0x48>
    1e36:	43 c1       	rjmp	.+646    	; 0x20be <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1e38:	1f e0       	ldi	r17, 0x0F	; 15
    1e3a:	41 2e       	mov	r4, r17
    1e3c:	51 2c       	mov	r5, r1
    1e3e:	46 20       	and	r4, r6
    1e40:	57 20       	and	r5, r7
    1e42:	41 14       	cp	r4, r1
    1e44:	51 04       	cpc	r5, r1
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <dir_next+0x5a>
    1e48:	27 c1       	rjmp	.+590    	; 0x2098 <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	b1 1d       	adc	r27, r1
    1e50:	8e 87       	std	Y+14, r24	; 0x0e
    1e52:	9f 87       	std	Y+15, r25	; 0x0f
    1e54:	a8 8b       	std	Y+16, r26	; 0x10
    1e56:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1e58:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e5a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e60:	e8 81       	ld	r30, Y
    1e62:	f9 81       	ldd	r31, Y+1	; 0x01
    1e64:	41 15       	cp	r20, r1
    1e66:	51 05       	cpc	r21, r1
    1e68:	61 05       	cpc	r22, r1
    1e6a:	71 05       	cpc	r23, r1
    1e6c:	39 f4       	brne	.+14     	; 0x1e7c <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1e6e:	80 85       	ldd	r24, Z+8	; 0x08
    1e70:	91 85       	ldd	r25, Z+9	; 0x09
    1e72:	68 16       	cp	r6, r24
    1e74:	79 06       	cpc	r7, r25
    1e76:	08 f4       	brcc	.+2      	; 0x1e7a <dir_next+0x8a>
    1e78:	0f c1       	rjmp	.+542    	; 0x2098 <dir_next+0x2a8>
    1e7a:	21 c1       	rjmp	.+578    	; 0x20be <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	93 01       	movw	r18, r6
    1e84:	a4 e0       	ldi	r26, 0x04	; 4
    1e86:	36 95       	lsr	r19
    1e88:	27 95       	ror	r18
    1e8a:	aa 95       	dec	r26
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <dir_next+0x96>
    1e8e:	82 23       	and	r24, r18
    1e90:	93 23       	and	r25, r19
    1e92:	89 2b       	or	r24, r25
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <dir_next+0xa8>
    1e96:	00 c1       	rjmp	.+512    	; 0x2098 <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1e98:	cf 01       	movw	r24, r30
    1e9a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    1e9e:	7b 01       	movw	r14, r22
    1ea0:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1ea2:	62 30       	cpi	r22, 0x02	; 2
    1ea4:	71 05       	cpc	r23, r1
    1ea6:	81 05       	cpc	r24, r1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	08 f4       	brcc	.+2      	; 0x1eae <dir_next+0xbe>
    1eac:	0a c1       	rjmp	.+532    	; 0x20c2 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	e8 16       	cp	r14, r24
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	f8 06       	cpc	r15, r24
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	08 07       	cpc	r16, r24
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
    1ebc:	18 07       	cpc	r17, r24
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <dir_next+0xd2>
    1ec0:	02 c1       	rjmp	.+516    	; 0x20c6 <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1ec2:	e8 81       	ld	r30, Y
    1ec4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ec6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ec8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eca:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ecc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1ece:	e8 16       	cp	r14, r24
    1ed0:	f9 06       	cpc	r15, r25
    1ed2:	0a 07       	cpc	r16, r26
    1ed4:	1b 07       	cpc	r17, r27
    1ed6:	08 f4       	brcc	.+2      	; 0x1eda <dir_next+0xea>
    1ed8:	a6 c0       	rjmp	.+332    	; 0x2026 <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1eda:	dd 20       	and	r13, r13
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <dir_next+0xf0>
    1ede:	ef c0       	rjmp	.+478    	; 0x20be <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1ee0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ee2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ee4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ee6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ee8:	cf 01       	movw	r24, r30
    1eea:	0e 94 cc 0c 	call	0x1998	; 0x1998 <create_chain>
    1eee:	7b 01       	movw	r14, r22
    1ef0:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1ef2:	61 15       	cp	r22, r1
    1ef4:	71 05       	cpc	r23, r1
    1ef6:	81 05       	cpc	r24, r1
    1ef8:	91 05       	cpc	r25, r1
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <dir_next+0x110>
    1efc:	87 e0       	ldi	r24, 0x07	; 7
    1efe:	e4 c0       	rjmp	.+456    	; 0x20c8 <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	e9 16       	cp	r14, r25
    1f04:	f1 04       	cpc	r15, r1
    1f06:	01 05       	cpc	r16, r1
    1f08:	11 05       	cpc	r17, r1
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <dir_next+0x11e>
    1f0c:	da c0       	rjmp	.+436    	; 0x20c2 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f0e:	af ef       	ldi	r26, 0xFF	; 255
    1f10:	ea 16       	cp	r14, r26
    1f12:	af ef       	ldi	r26, 0xFF	; 255
    1f14:	fa 06       	cpc	r15, r26
    1f16:	af ef       	ldi	r26, 0xFF	; 255
    1f18:	0a 07       	cpc	r16, r26
    1f1a:	af ef       	ldi	r26, 0xFF	; 255
    1f1c:	1a 07       	cpc	r17, r26
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <dir_next+0x132>
    1f20:	d2 c0       	rjmp	.+420    	; 0x20c6 <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1f22:	88 81       	ld	r24, Y
    1f24:	99 81       	ldd	r25, Y+1	; 0x01
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    1f32:	88 23       	and	r24, r24
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <dir_next+0x148>
    1f36:	c7 c0       	rjmp	.+398    	; 0x20c6 <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1f38:	e8 81       	ld	r30, Y
    1f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f3c:	be 96       	adiw	r30, 0x2e	; 46
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	92 e0       	ldi	r25, 0x02	; 2
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1f44:	11 92       	st	Z+, r1
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	bf ef       	ldi	r27, 0xFF	; 255
    1f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4c:	9b 07       	cpc	r25, r27
    1f4e:	d1 f7       	brne	.-12     	; 0x1f44 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1f50:	88 80       	ld	r8, Y
    1f52:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1f54:	4e ef       	ldi	r20, 0xFE	; 254
    1f56:	a4 2e       	mov	r10, r20
    1f58:	4f ef       	ldi	r20, 0xFF	; 255
    1f5a:	b4 2e       	mov	r11, r20
    1f5c:	4f ef       	ldi	r20, 0xFF	; 255
    1f5e:	c4 2e       	mov	r12, r20
    1f60:	4f ef       	ldi	r20, 0xFF	; 255
    1f62:	d4 2e       	mov	r13, r20
    1f64:	ae 0c       	add	r10, r14
    1f66:	bf 1c       	adc	r11, r15
    1f68:	c0 1e       	adc	r12, r16
    1f6a:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1f6c:	f4 01       	movw	r30, r8
    1f6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f70:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f72:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f74:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f76:	02 97       	sbiw	r24, 0x02	; 2
    1f78:	a1 09       	sbc	r26, r1
    1f7a:	b1 09       	sbc	r27, r1
    1f7c:	a8 16       	cp	r10, r24
    1f7e:	b9 06       	cpc	r11, r25
    1f80:	ca 06       	cpc	r12, r26
    1f82:	db 06       	cpc	r13, r27
    1f84:	28 f0       	brcs	.+10     	; 0x1f90 <dir_next+0x1a0>
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	15 c0       	rjmp	.+42     	; 0x1fba <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1f90:	d4 01       	movw	r26, r8
    1f92:	12 96       	adiw	r26, 0x02	; 2
    1f94:	2c 91       	ld	r18, X
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	c6 01       	movw	r24, r12
    1f9e:	b5 01       	movw	r22, r10
    1fa0:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	f4 01       	movw	r30, r8
    1faa:	86 a1       	ldd	r24, Z+38	; 0x26
    1fac:	97 a1       	ldd	r25, Z+39	; 0x27
    1fae:	a0 a5       	ldd	r26, Z+40	; 0x28
    1fb0:	b1 a5       	ldd	r27, Z+41	; 0x29
    1fb2:	28 0f       	add	r18, r24
    1fb4:	39 1f       	adc	r19, r25
    1fb6:	4a 1f       	adc	r20, r26
    1fb8:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fba:	d4 01       	movw	r26, r8
    1fbc:	9a 96       	adiw	r26, 0x2a	; 42
    1fbe:	2d 93       	st	X+, r18
    1fc0:	3d 93       	st	X+, r19
    1fc2:	4d 93       	st	X+, r20
    1fc4:	5c 93       	st	X, r21
    1fc6:	9d 97       	sbiw	r26, 0x2d	; 45
    1fc8:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1fca:	cc 24       	eor	r12, r12
    1fcc:	c3 94       	inc	r12
    1fce:	1a c0       	rjmp	.+52     	; 0x2004 <dir_next+0x214>
    1fd0:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1fd2:	88 81       	ld	r24, Y
    1fd4:	99 81       	ldd	r25, Y+1	; 0x01
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <dir_next+0x1f8>
    1fe6:	6f c0       	rjmp	.+222    	; 0x20c6 <dir_next+0x2d6>
						dj->fs->winsect++;
    1fe8:	e8 81       	ld	r30, Y
    1fea:	f9 81       	ldd	r31, Y+1	; 0x01
    1fec:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fee:	93 a5       	ldd	r25, Z+43	; 0x2b
    1ff0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1ff2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	82 a7       	std	Z+42, r24	; 0x2a
    1ffc:	93 a7       	std	Z+43, r25	; 0x2b
    1ffe:	a4 a7       	std	Z+44, r26	; 0x2c
    2000:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2002:	d3 94       	inc	r13
    2004:	e8 81       	ld	r30, Y
    2006:	f9 81       	ldd	r31, Y+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	d8 16       	cp	r13, r24
    200c:	08 f3       	brcs	.-62     	; 0x1fd0 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    200e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2010:	93 a5       	ldd	r25, Z+43	; 0x2b
    2012:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2014:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2016:	8d 19       	sub	r24, r13
    2018:	91 09       	sbc	r25, r1
    201a:	a1 09       	sbc	r26, r1
    201c:	b1 09       	sbc	r27, r1
    201e:	82 a7       	std	Z+42, r24	; 0x2a
    2020:	93 a7       	std	Z+43, r25	; 0x2b
    2022:	a4 a7       	std	Z+44, r26	; 0x2c
    2024:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2026:	ea 86       	std	Y+10, r14	; 0x0a
    2028:	fb 86       	std	Y+11, r15	; 0x0b
    202a:	0c 87       	std	Y+12, r16	; 0x0c
    202c:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    202e:	c8 80       	ld	r12, Y
    2030:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2032:	8e ef       	ldi	r24, 0xFE	; 254
    2034:	9f ef       	ldi	r25, 0xFF	; 255
    2036:	af ef       	ldi	r26, 0xFF	; 255
    2038:	bf ef       	ldi	r27, 0xFF	; 255
    203a:	e8 0e       	add	r14, r24
    203c:	f9 1e       	adc	r15, r25
    203e:	0a 1f       	adc	r16, r26
    2040:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2042:	f6 01       	movw	r30, r12
    2044:	82 8d       	ldd	r24, Z+26	; 0x1a
    2046:	93 8d       	ldd	r25, Z+27	; 0x1b
    2048:	a4 8d       	ldd	r26, Z+28	; 0x1c
    204a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    204c:	02 97       	sbiw	r24, 0x02	; 2
    204e:	a1 09       	sbc	r26, r1
    2050:	b1 09       	sbc	r27, r1
    2052:	e8 16       	cp	r14, r24
    2054:	f9 06       	cpc	r15, r25
    2056:	0a 07       	cpc	r16, r26
    2058:	1b 07       	cpc	r17, r27
    205a:	28 f0       	brcs	.+10     	; 0x2066 <dir_next+0x276>
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	15 c0       	rjmp	.+42     	; 0x2090 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    2066:	d6 01       	movw	r26, r12
    2068:	12 96       	adiw	r26, 0x02	; 2
    206a:	2c 91       	ld	r18, X
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	c8 01       	movw	r24, r16
    2074:	b7 01       	movw	r22, r14
    2076:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	f6 01       	movw	r30, r12
    2080:	86 a1       	ldd	r24, Z+38	; 0x26
    2082:	97 a1       	ldd	r25, Z+39	; 0x27
    2084:	a0 a5       	ldd	r26, Z+40	; 0x28
    2086:	b1 a5       	ldd	r27, Z+41	; 0x29
    2088:	28 0f       	add	r18, r24
    208a:	39 1f       	adc	r19, r25
    208c:	4a 1f       	adc	r20, r26
    208e:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2090:	2e 87       	std	Y+14, r18	; 0x0e
    2092:	3f 87       	std	Y+15, r19	; 0x0f
    2094:	48 8b       	std	Y+16, r20	; 0x10
    2096:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    2098:	6c 82       	std	Y+4, r6	; 0x04
    209a:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    209c:	35 e0       	ldi	r19, 0x05	; 5
    209e:	44 0c       	add	r4, r4
    20a0:	55 1c       	adc	r5, r5
    20a2:	3a 95       	dec	r19
    20a4:	e1 f7       	brne	.-8      	; 0x209e <dir_next+0x2ae>
    20a6:	8e e2       	ldi	r24, 0x2E	; 46
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	48 0e       	add	r4, r24
    20ac:	59 1e       	adc	r5, r25
    20ae:	88 81       	ld	r24, Y
    20b0:	99 81       	ldd	r25, Y+1	; 0x01
    20b2:	84 0d       	add	r24, r4
    20b4:	95 1d       	adc	r25, r5
    20b6:	8a 8b       	std	Y+18, r24	; 0x12
    20b8:	9b 8b       	std	Y+19, r25	; 0x13
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	05 c0       	rjmp	.+10     	; 0x20c8 <dir_next+0x2d8>

	return FR_OK;
    20be:	84 e0       	ldi	r24, 0x04	; 4
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <dir_next+0x2d8>
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	01 c0       	rjmp	.+2      	; 0x20c8 <dir_next+0x2d8>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
}
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	df 90       	pop	r13
    20d6:	cf 90       	pop	r12
    20d8:	bf 90       	pop	r11
    20da:	af 90       	pop	r10
    20dc:	9f 90       	pop	r9
    20de:	8f 90       	pop	r8
    20e0:	7f 90       	pop	r7
    20e2:	6f 90       	pop	r6
    20e4:	5f 90       	pop	r5
    20e6:	4f 90       	pop	r4
    20e8:	08 95       	ret

000020ea <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	ec 01       	movw	r28, r24
    20f0:	94 e0       	ldi	r25, 0x04	; 4
    20f2:	1a c0       	rjmp	.+52     	; 0x2128 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    20f4:	88 81       	ld	r24, Y
    20f6:	99 81       	ldd	r25, Y+1	; 0x01
    20f8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    20fc:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    20fe:	88 23       	and	r24, r24
    2100:	f1 f4       	brne	.+60     	; 0x213e <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2102:	ea 89       	ldd	r30, Y+18	; 0x12
    2104:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    2106:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2108:	88 23       	and	r24, r24
    210a:	09 f1       	breq	.+66     	; 0x214e <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    210c:	85 3e       	cpi	r24, 0xE5	; 229
    210e:	29 f0       	breq	.+10     	; 0x211a <dir_read+0x30>
    2110:	8e 32       	cpi	r24, 0x2E	; 46
    2112:	19 f0       	breq	.+6      	; 0x211a <dir_read+0x30>
    2114:	83 85       	ldd	r24, Z+11	; 0x0b
    2116:	83 ff       	sbrs	r24, 3
    2118:	16 c0       	rjmp	.+44     	; 0x2146 <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    211a:	ce 01       	movw	r24, r28
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <dir_next>
    2122:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2124:	88 23       	and	r24, r24
    2126:	59 f4       	brne	.+22     	; 0x213e <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2128:	4e 85       	ldd	r20, Y+14	; 0x0e
    212a:	5f 85       	ldd	r21, Y+15	; 0x0f
    212c:	68 89       	ldd	r22, Y+16	; 0x10
    212e:	79 89       	ldd	r23, Y+17	; 0x11
    2130:	41 15       	cp	r20, r1
    2132:	51 05       	cpc	r21, r1
    2134:	61 05       	cpc	r22, r1
    2136:	71 05       	cpc	r23, r1
    2138:	e9 f6       	brne	.-70     	; 0x20f4 <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    213a:	99 23       	and	r25, r25
    213c:	21 f0       	breq	.+8      	; 0x2146 <dir_read+0x5c>
    213e:	1e 86       	std	Y+14, r1	; 0x0e
    2140:	1f 86       	std	Y+15, r1	; 0x0f
    2142:	18 8a       	std	Y+16, r1	; 0x10
    2144:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    2146:	89 2f       	mov	r24, r25
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    214e:	94 e0       	ldi	r25, 0x04	; 4
    2150:	f6 cf       	rjmp	.-20     	; 0x213e <dir_read+0x54>

00002152 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
    2160:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    2162:	88 23       	and	r24, r24
    2164:	e9 f5       	brne	.+122    	; 0x21e0 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2166:	4e 85       	ldd	r20, Y+14	; 0x0e
    2168:	5f 85       	ldd	r21, Y+15	; 0x0f
    216a:	68 89       	ldd	r22, Y+16	; 0x10
    216c:	79 89       	ldd	r23, Y+17	; 0x11
    216e:	88 81       	ld	r24, Y
    2170:	99 81       	ldd	r25, Y+1	; 0x01
    2172:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    2176:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    2178:	88 23       	and	r24, r24
    217a:	91 f5       	brne	.+100    	; 0x21e0 <dir_register+0x8e>
			c = *dj->dir;
    217c:	ea 89       	ldd	r30, Y+18	; 0x12
    217e:	fb 89       	ldd	r31, Y+19	; 0x13
    2180:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2182:	e5 3e       	cpi	r30, 0xE5	; 229
    2184:	89 f1       	breq	.+98     	; 0x21e8 <dir_register+0x96>
    2186:	ee 23       	and	r30, r30
    2188:	79 f1       	breq	.+94     	; 0x21e8 <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    218a:	ce 01       	movw	r24, r28
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <dir_next>
    2192:	e6 cf       	rjmp	.-52     	; 0x2160 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2194:	6a 89       	ldd	r22, Y+18	; 0x12
    2196:	7b 89       	ldd	r23, Y+19	; 0x13
    2198:	fb 01       	movw	r30, r22
    219a:	80 e2       	ldi	r24, 0x20	; 32
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    21a0:	11 92       	st	Z+, r1
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	2f ef       	ldi	r18, 0xFF	; 255
    21a6:	8f 3f       	cpi	r24, 0xFF	; 255
    21a8:	92 07       	cpc	r25, r18
    21aa:	d1 f7       	brne	.-12     	; 0x21a0 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    21ac:	8c 89       	ldd	r24, Y+20	; 0x14
    21ae:	9d 89       	ldd	r25, Y+21	; 0x15
    21b0:	9c 01       	movw	r18, r24
    21b2:	d9 01       	movw	r26, r18
    21b4:	fb 01       	movw	r30, r22
    21b6:	2b e0       	ldi	r18, 0x0B	; 11
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    21bc:	8d 91       	ld	r24, X+
    21be:	81 93       	st	Z+, r24
    21c0:	21 50       	subi	r18, 0x01	; 1
    21c2:	30 40       	sbci	r19, 0x00	; 0
    21c4:	8f ef       	ldi	r24, 0xFF	; 255
    21c6:	2f 3f       	cpi	r18, 0xFF	; 255
    21c8:	38 07       	cpc	r19, r24
    21ca:	c1 f7       	brne	.-16     	; 0x21bc <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    21cc:	ec 89       	ldd	r30, Y+20	; 0x14
    21ce:	fd 89       	ldd	r31, Y+21	; 0x15
    21d0:	83 85       	ldd	r24, Z+11	; 0x0b
    21d2:	88 71       	andi	r24, 0x18	; 24
    21d4:	fb 01       	movw	r30, r22
    21d6:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    21d8:	e8 81       	ld	r30, Y
    21da:	f9 81       	ldd	r31, Y+1	; 0x01
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    21e0:	84 2f       	mov	r24, r20
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    21e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    21ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    21ec:	68 89       	ldd	r22, Y+16	; 0x10
    21ee:	79 89       	ldd	r23, Y+17	; 0x11
    21f0:	88 81       	ld	r24, Y
    21f2:	99 81       	ldd	r25, Y+1	; 0x01
    21f4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    21f8:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    21fa:	88 23       	and	r24, r24
    21fc:	59 f2       	breq	.-106    	; 0x2194 <dir_register+0x42>
    21fe:	f0 cf       	rjmp	.-32     	; 0x21e0 <dir_register+0x8e>

00002200 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    2206:	6c 81       	ldd	r22, Y+4	; 0x04
    2208:	7d 81       	ldd	r23, Y+5	; 0x05
    220a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
    220e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2210:	88 23       	and	r24, r24
    2212:	99 f4       	brne	.+38     	; 0x223a <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    2214:	4e 85       	ldd	r20, Y+14	; 0x0e
    2216:	5f 85       	ldd	r21, Y+15	; 0x0f
    2218:	68 89       	ldd	r22, Y+16	; 0x10
    221a:	79 89       	ldd	r23, Y+17	; 0x11
    221c:	88 81       	ld	r24, Y
    221e:	99 81       	ldd	r25, Y+1	; 0x01
    2220:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    2224:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    2226:	88 23       	and	r24, r24
    2228:	41 f4       	brne	.+16     	; 0x223a <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    222a:	ea 89       	ldd	r30, Y+18	; 0x12
    222c:	fb 89       	ldd	r31, Y+19	; 0x13
    222e:	85 ee       	ldi	r24, 0xE5	; 229
    2230:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    2232:	e8 81       	ld	r30, Y
    2234:	f9 81       	ldd	r31, Y+1	; 0x01
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    223a:	89 2f       	mov	r24, r25
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	fc 01       	movw	r30, r24
    2250:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    2252:	eb 01       	movw	r28, r22
    2254:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    2256:	86 85       	ldd	r24, Z+14	; 0x0e
    2258:	97 85       	ldd	r25, Z+15	; 0x0f
    225a:	a0 89       	ldd	r26, Z+16	; 0x10
    225c:	b1 89       	ldd	r27, Z+17	; 0x11
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	a1 05       	cpc	r26, r1
    2262:	b1 05       	cpc	r27, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <get_fileinfo+0x26>
    2266:	71 c0       	rjmp	.+226    	; 0x234a <get_fileinfo+0x108>
		dir = dj->dir;
    2268:	62 89       	ldd	r22, Z+18	; 0x12
    226a:	73 89       	ldd	r23, Z+19	; 0x13
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2270:	fb 01       	movw	r30, r22
    2272:	e8 0f       	add	r30, r24
    2274:	f9 1f       	adc	r31, r25
    2276:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    2278:	e0 32       	cpi	r30, 0x20	; 32
    227a:	41 f0       	breq	.+16     	; 0x228c <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    227c:	e5 30       	cpi	r30, 0x05	; 5
    227e:	09 f4       	brne	.+2      	; 0x2282 <get_fileinfo+0x40>
    2280:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    2282:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	88 30       	cpi	r24, 0x08	; 8
    2288:	91 05       	cpc	r25, r1
    228a:	91 f7       	brne	.-28     	; 0x2270 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    228c:	db 01       	movw	r26, r22
    228e:	18 96       	adiw	r26, 0x08	; 8
    2290:	8c 91       	ld	r24, X
    2292:	80 32       	cpi	r24, 0x20	; 32
    2294:	11 f4       	brne	.+4      	; 0x229a <get_fileinfo+0x58>
    2296:	8e 01       	movw	r16, r28
    2298:	12 c0       	rjmp	.+36     	; 0x22be <get_fileinfo+0x7c>
			*p++ = '.';
    229a:	8e e2       	ldi	r24, 0x2E	; 46
    229c:	fe 01       	movw	r30, r28
    229e:	81 93       	st	Z+, r24
    22a0:	8f 01       	movw	r16, r30
    22a2:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    22a4:	9e 01       	movw	r18, r28
    22a6:	2c 5f       	subi	r18, 0xFC	; 252
    22a8:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    22aa:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    22ac:	80 32       	cpi	r24, 0x20	; 32
    22ae:	39 f0       	breq	.+14     	; 0x22be <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    22b0:	d8 01       	movw	r26, r16
    22b2:	8d 93       	st	X+, r24
    22b4:	8d 01       	movw	r16, r26
    22b6:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    22b8:	a2 17       	cp	r26, r18
    22ba:	b3 07       	cpc	r27, r19
    22bc:	b1 f7       	brne	.-20     	; 0x22aa <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    22be:	fb 01       	movw	r30, r22
    22c0:	83 85       	ldd	r24, Z+11	; 0x0b
    22c2:	d7 01       	movw	r26, r14
    22c4:	18 96       	adiw	r26, 0x08	; 8
    22c6:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    22c8:	27 8d       	ldd	r18, Z+31	; 0x1f
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	52 2f       	mov	r21, r18
    22d2:	44 27       	eor	r20, r20
    22d4:	33 27       	eor	r19, r19
    22d6:	22 27       	eor	r18, r18
    22d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	dc 01       	movw	r26, r24
    22e2:	99 27       	eor	r25, r25
    22e4:	88 27       	eor	r24, r24
    22e6:	28 2b       	or	r18, r24
    22e8:	39 2b       	or	r19, r25
    22ea:	4a 2b       	or	r20, r26
    22ec:	5b 2b       	or	r21, r27
    22ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e0       	ldi	r26, 0x00	; 0
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	28 2b       	or	r18, r24
    22f8:	39 2b       	or	r19, r25
    22fa:	4a 2b       	or	r20, r26
    22fc:	5b 2b       	or	r21, r27
    22fe:	95 8d       	ldd	r25, Z+29	; 0x1d
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	a0 e0       	ldi	r26, 0x00	; 0
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	28 2b       	or	r18, r24
    2308:	39 2b       	or	r19, r25
    230a:	4a 2b       	or	r20, r26
    230c:	5b 2b       	or	r21, r27
    230e:	f7 01       	movw	r30, r14
    2310:	20 83       	st	Z, r18
    2312:	31 83       	std	Z+1, r19	; 0x01
    2314:	42 83       	std	Z+2, r20	; 0x02
    2316:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2318:	db 01       	movw	r26, r22
    231a:	59 96       	adiw	r26, 0x19	; 25
    231c:	9c 91       	ld	r25, X
    231e:	59 97       	sbiw	r26, 0x19	; 25
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	58 96       	adiw	r26, 0x18	; 24
    2324:	2c 91       	ld	r18, X
    2326:	58 97       	sbiw	r26, 0x18	; 24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	82 2b       	or	r24, r18
    232c:	93 2b       	or	r25, r19
    232e:	84 83       	std	Z+4, r24	; 0x04
    2330:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2332:	57 96       	adiw	r26, 0x17	; 23
    2334:	9c 91       	ld	r25, X
    2336:	57 97       	sbiw	r26, 0x17	; 23
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	56 96       	adiw	r26, 0x16	; 22
    233c:	2c 91       	ld	r18, X
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	82 2b       	or	r24, r18
    2342:	93 2b       	or	r25, r19
    2344:	86 83       	std	Z+6, r24	; 0x06
    2346:	97 83       	std	Z+7, r25	; 0x07
    2348:	e8 01       	movw	r28, r16
	}
	*p = 0;
    234a:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	1f 91       	pop	r17
    2352:	0f 91       	pop	r16
    2354:	ff 90       	pop	r15
    2356:	ef 90       	pop	r14
    2358:	08 95       	ret

0000235a <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    235a:	5f 92       	push	r5
    235c:	6f 92       	push	r6
    235e:	7f 92       	push	r7
    2360:	8f 92       	push	r8
    2362:	9f 92       	push	r9
    2364:	af 92       	push	r10
    2366:	bf 92       	push	r11
    2368:	cf 92       	push	r12
    236a:	df 92       	push	r13
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	ec 01       	movw	r28, r24
    237a:	7b 01       	movw	r14, r22
    237c:	03 c0       	rjmp	.+6      	; 0x2384 <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    237e:	08 94       	sec
    2380:	e1 1c       	adc	r14, r1
    2382:	f1 1c       	adc	r15, r1
    2384:	f7 01       	movw	r30, r14
    2386:	80 81       	ld	r24, Z
    2388:	80 32       	cpi	r24, 0x20	; 32
    238a:	c9 f3       	breq	.-14     	; 0x237e <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    238c:	8f 32       	cpi	r24, 0x2F	; 47
    238e:	11 f0       	breq	.+4      	; 0x2394 <follow_path+0x3a>
    2390:	8c 35       	cpi	r24, 0x5C	; 92
    2392:	19 f4       	brne	.+6      	; 0x239a <follow_path+0x40>
		path++;
    2394:	08 94       	sec
    2396:	e1 1c       	adc	r14, r1
    2398:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    239a:	1e 82       	std	Y+6, r1	; 0x06
    239c:	1f 82       	std	Y+7, r1	; 0x07
    239e:	18 86       	std	Y+8, r1	; 0x08
    23a0:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    23a2:	f7 01       	movw	r30, r14
    23a4:	80 81       	ld	r24, Z
    23a6:	80 32       	cpi	r24, 0x20	; 32
    23a8:	40 f4       	brcc	.+16     	; 0x23ba <follow_path+0x60>
		res = dir_seek(dj, 0);
    23aa:	ce 01       	movw	r24, r28
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
		dj->dir = NULL;
    23b4:	1a 8a       	std	Y+18, r1	; 0x12
    23b6:	1b 8a       	std	Y+19, r1	; 0x13
    23b8:	13 c1       	rjmp	.+550    	; 0x25e0 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23ba:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    23bc:	45 e0       	ldi	r20, 0x05	; 5
    23be:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    23c0:	ac 89       	ldd	r26, Y+20	; 0x14
    23c2:	bd 89       	ldd	r27, Y+21	; 0x15
    23c4:	fd 01       	movw	r30, r26
    23c6:	8b e0       	ldi	r24, 0x0B	; 11
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23cc:	01 93       	st	Z+, r16
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	2f ef       	ldi	r18, 0xFF	; 255
    23d2:	8f 3f       	cpi	r24, 0xFF	; 255
    23d4:	92 07       	cpc	r25, r18
    23d6:	d1 f7       	brne	.-12     	; 0x23cc <follow_path+0x72>
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	cc 24       	eor	r12, r12
    23de:	dd 24       	eor	r13, r13
    23e0:	38 e0       	ldi	r19, 0x08	; 8
    23e2:	a3 2e       	mov	r10, r19
    23e4:	b1 2c       	mov	r11, r1
    23e6:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    23e8:	f7 01       	movw	r30, r14
    23ea:	ec 0d       	add	r30, r12
    23ec:	fd 1d       	adc	r31, r13
    23ee:	20 81       	ld	r18, Z
    23f0:	08 94       	sec
    23f2:	c1 1c       	adc	r12, r1
    23f4:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    23f6:	21 32       	cpi	r18, 0x21	; 33
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <follow_path+0xa2>
    23fa:	66 c0       	rjmp	.+204    	; 0x24c8 <follow_path+0x16e>
    23fc:	2f 32       	cpi	r18, 0x2F	; 47
    23fe:	09 f4       	brne	.+2      	; 0x2402 <follow_path+0xa8>
    2400:	ff c0       	rjmp	.+510    	; 0x2600 <follow_path+0x2a6>
    2402:	2c 35       	cpi	r18, 0x5C	; 92
    2404:	09 f4       	brne	.+2      	; 0x2408 <follow_path+0xae>
    2406:	fc c0       	rjmp	.+504    	; 0x2600 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    2408:	2e 32       	cpi	r18, 0x2E	; 46
    240a:	19 f0       	breq	.+6      	; 0x2412 <follow_path+0xb8>
    240c:	4a 15       	cp	r20, r10
    240e:	5b 05       	cpc	r21, r11
    2410:	84 f0       	brlt	.+32     	; 0x2432 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2412:	88 e0       	ldi	r24, 0x08	; 8
    2414:	a8 16       	cp	r10, r24
    2416:	b1 04       	cpc	r11, r1
    2418:	09 f0       	breq	.+2      	; 0x241c <follow_path+0xc2>
    241a:	dd c0       	rjmp	.+442    	; 0x25d6 <follow_path+0x27c>
    241c:	2e 32       	cpi	r18, 0x2E	; 46
    241e:	09 f0       	breq	.+2      	; 0x2422 <follow_path+0xc8>
    2420:	da c0       	rjmp	.+436    	; 0x25d6 <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    2422:	11 0f       	add	r17, r17
    2424:	11 0f       	add	r17, r17
    2426:	48 e0       	ldi	r20, 0x08	; 8
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	2b e0       	ldi	r18, 0x0B	; 11
    242c:	a2 2e       	mov	r10, r18
    242e:	b1 2c       	mov	r11, r1
    2430:	db cf       	rjmp	.-74     	; 0x23e8 <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    2432:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    2434:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    2436:	82 2f       	mov	r24, r18
    2438:	81 58       	subi	r24, 0x81	; 129
    243a:	8f 31       	cpi	r24, 0x1F	; 31
    243c:	18 f0       	brcs	.+6      	; 0x2444 <follow_path+0xea>
    243e:	8f 55       	subi	r24, 0x5F	; 95
    2440:	8d 31       	cpi	r24, 0x1D	; 29
    2442:	08 f5       	brcc	.+66     	; 0x2486 <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    2444:	f7 01       	movw	r30, r14
    2446:	ec 0d       	add	r30, r12
    2448:	fd 1d       	adc	r31, r13
    244a:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    244c:	83 2f       	mov	r24, r19
    244e:	80 54       	subi	r24, 0x40	; 64
    2450:	8f 33       	cpi	r24, 0x3F	; 63
    2452:	20 f0       	brcs	.+8      	; 0x245c <follow_path+0x102>
    2454:	80 54       	subi	r24, 0x40	; 64
    2456:	8d 37       	cpi	r24, 0x7D	; 125
    2458:	08 f0       	brcs	.+2      	; 0x245c <follow_path+0x102>
    245a:	bd c0       	rjmp	.+378    	; 0x25d6 <follow_path+0x27c>
    245c:	c5 01       	movw	r24, r10
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	48 17       	cp	r20, r24
    2462:	59 07       	cpc	r21, r25
    2464:	0c f0       	brlt	.+2      	; 0x2468 <follow_path+0x10e>
    2466:	b7 c0       	rjmp	.+366    	; 0x25d6 <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    2468:	08 94       	sec
    246a:	c1 1c       	adc	r12, r1
    246c:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    246e:	fd 01       	movw	r30, r26
    2470:	e4 0f       	add	r30, r20
    2472:	f5 1f       	adc	r31, r21
    2474:	20 83       	st	Z, r18
    2476:	ca 01       	movw	r24, r20
    2478:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    247a:	fd 01       	movw	r30, r26
    247c:	e8 0f       	add	r30, r24
    247e:	f9 1f       	adc	r31, r25
    2480:	30 83       	st	Z, r19
    2482:	ac 01       	movw	r20, r24
    2484:	1e c0       	rjmp	.+60     	; 0x24c2 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    2486:	62 2f       	mov	r22, r18
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	e0 e0       	ldi	r30, 0x00	; 0
    248c:	f0 e2       	ldi	r31, 0x20	; 32
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2490:	31 96       	adiw	r30, 0x01	; 1
    2492:	80 81       	ld	r24, Z
    2494:	88 23       	and	r24, r24
    2496:	29 f0       	breq	.+10     	; 0x24a2 <follow_path+0x148>
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	86 17       	cp	r24, r22
    249c:	97 07       	cpc	r25, r23
    249e:	c1 f7       	brne	.-16     	; 0x2490 <follow_path+0x136>
    24a0:	9a c0       	rjmp	.+308    	; 0x25d6 <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    24a2:	82 2f       	mov	r24, r18
    24a4:	81 54       	subi	r24, 0x41	; 65
    24a6:	8a 31       	cpi	r24, 0x1A	; 26
    24a8:	10 f4       	brcc	.+4      	; 0x24ae <follow_path+0x154>
				b |= 2;
    24aa:	12 60       	ori	r17, 0x02	; 2
    24ac:	06 c0       	rjmp	.+12     	; 0x24ba <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    24ae:	82 2f       	mov	r24, r18
    24b0:	81 56       	subi	r24, 0x61	; 97
    24b2:	8a 31       	cpi	r24, 0x1A	; 26
    24b4:	10 f4       	brcc	.+4      	; 0x24ba <follow_path+0x160>
					b |= 1; c -= 0x20;
    24b6:	11 60       	ori	r17, 0x01	; 1
    24b8:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    24ba:	fd 01       	movw	r30, r26
    24bc:	e4 0f       	add	r30, r20
    24be:	f5 1f       	adc	r31, r21
    24c0:	20 83       	st	Z, r18
    24c2:	4f 5f       	subi	r20, 0xFF	; 255
    24c4:	5f 4f       	sbci	r21, 0xFF	; 255
    24c6:	90 cf       	rjmp	.-224    	; 0x23e8 <follow_path+0x8e>
    24c8:	91 2f       	mov	r25, r17
    24ca:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    24cc:	45 2b       	or	r20, r21
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <follow_path+0x178>
    24d0:	82 c0       	rjmp	.+260    	; 0x25d6 <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    24d2:	8c 91       	ld	r24, X
    24d4:	85 3e       	cpi	r24, 0xE5	; 229
    24d6:	09 f4       	brne	.+2      	; 0x24da <follow_path+0x180>
    24d8:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    24da:	e8 e0       	ldi	r30, 0x08	; 8
    24dc:	ae 16       	cp	r10, r30
    24de:	b1 04       	cpc	r11, r1
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <follow_path+0x18e>
    24e2:	91 2f       	mov	r25, r17
    24e4:	99 0f       	add	r25, r25
    24e6:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    24e8:	29 2f       	mov	r18, r25
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	c9 01       	movw	r24, r18
    24ee:	83 70       	andi	r24, 0x03	; 3
    24f0:	90 70       	andi	r25, 0x00	; 0
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <follow_path+0x19e>
    24f6:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    24f8:	2c 70       	andi	r18, 0x0C	; 12
    24fa:	30 70       	andi	r19, 0x00	; 0
    24fc:	24 30       	cpi	r18, 0x04	; 4
    24fe:	31 05       	cpc	r19, r1
    2500:	09 f4       	brne	.+2      	; 0x2504 <follow_path+0x1aa>
    2502:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2504:	1b 96       	adiw	r26, 0x0b	; 11
    2506:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    2508:	ce 01       	movw	r24, r28
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
    2512:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2514:	88 23       	and	r24, r24
    2516:	71 f5       	brne	.+92     	; 0x2574 <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2518:	4e 85       	ldd	r20, Y+14	; 0x0e
    251a:	5f 85       	ldd	r21, Y+15	; 0x0f
    251c:	68 89       	ldd	r22, Y+16	; 0x10
    251e:	79 89       	ldd	r23, Y+17	; 0x11
    2520:	88 81       	ld	r24, Y
    2522:	99 81       	ldd	r25, Y+1	; 0x01
    2524:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    2528:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    252a:	88 23       	and	r24, r24
    252c:	19 f5       	brne	.+70     	; 0x2574 <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    252e:	ea 89       	ldd	r30, Y+18	; 0x12
    2530:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	11 f4       	brne	.+4      	; 0x253c <follow_path+0x1e2>
    2538:	44 e0       	ldi	r20, 0x04	; 4
    253a:	1c c0       	rjmp	.+56     	; 0x2574 <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    253c:	83 85       	ldd	r24, Z+11	; 0x0b
    253e:	83 fd       	sbrc	r24, 3
    2540:	14 c0       	rjmp	.+40     	; 0x256a <follow_path+0x210>
    2542:	df 01       	movw	r26, r30
    2544:	8c 89       	ldd	r24, Y+20	; 0x14
    2546:	9d 89       	ldd	r25, Y+21	; 0x15
    2548:	9c 01       	movw	r18, r24
    254a:	f9 01       	movw	r30, r18
    254c:	2b e0       	ldi	r18, 0x0B	; 11
    254e:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2550:	21 50       	subi	r18, 0x01	; 1
    2552:	30 40       	sbci	r19, 0x00	; 0
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	2f 3f       	cpi	r18, 0xFF	; 255
    2558:	38 07       	cpc	r19, r24
    255a:	61 f0       	breq	.+24     	; 0x2574 <follow_path+0x21a>
    255c:	9c 91       	ld	r25, X
    255e:	80 81       	ld	r24, Z
    2560:	98 17       	cp	r25, r24
    2562:	19 f4       	brne	.+6      	; 0x256a <follow_path+0x210>
    2564:	11 96       	adiw	r26, 0x01	; 1
    2566:	31 96       	adiw	r30, 0x01	; 1
    2568:	f3 cf       	rjmp	.-26     	; 0x2550 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    256a:	ce 01       	movw	r24, r28
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <dir_next>
    2572:	cf cf       	rjmp	.-98     	; 0x2512 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    2574:	ec 89       	ldd	r30, Y+20	; 0x14
    2576:	fd 89       	ldd	r31, Y+21	; 0x15
    2578:	93 85       	ldd	r25, Z+11	; 0x0b
    257a:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    257c:	44 23       	and	r20, r20
    257e:	31 f0       	breq	.+12     	; 0x258c <follow_path+0x232>
    2580:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    2582:	44 30       	cpi	r20, 0x04	; 4
    2584:	51 f5       	brne	.+84     	; 0x25da <follow_path+0x280>
    2586:	99 23       	and	r25, r25
    2588:	51 f1       	breq	.+84     	; 0x25de <follow_path+0x284>
    258a:	2a c0       	rjmp	.+84     	; 0x25e0 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    258c:	99 23       	and	r25, r25
    258e:	29 f5       	brne	.+74     	; 0x25da <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    2590:	ea 89       	ldd	r30, Y+18	; 0x12
    2592:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    2594:	83 85       	ldd	r24, Z+11	; 0x0b
    2596:	84 ff       	sbrs	r24, 4
    2598:	22 c0       	rjmp	.+68     	; 0x25de <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    259a:	ec 0c       	add	r14, r12
    259c:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    259e:	75 88       	ldd	r7, Z+21	; 0x15
    25a0:	66 24       	eor	r6, r6
    25a2:	24 89       	ldd	r18, Z+20	; 0x14
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	26 29       	or	r18, r6
    25a8:	37 29       	or	r19, r7
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	a9 01       	movw	r20, r18
    25b0:	33 27       	eor	r19, r19
    25b2:	22 27       	eor	r18, r18
    25b4:	93 8c       	ldd	r9, Z+27	; 0x1b
    25b6:	88 24       	eor	r8, r8
    25b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	88 29       	or	r24, r8
    25be:	99 29       	or	r25, r9
    25c0:	a0 e0       	ldi	r26, 0x00	; 0
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	28 2b       	or	r18, r24
    25c6:	39 2b       	or	r19, r25
    25c8:	4a 2b       	or	r20, r26
    25ca:	5b 2b       	or	r21, r27
    25cc:	2e 83       	std	Y+6, r18	; 0x06
    25ce:	3f 83       	std	Y+7, r19	; 0x07
    25d0:	48 87       	std	Y+8, r20	; 0x08
    25d2:	59 87       	std	Y+9, r21	; 0x09
    25d4:	f5 ce       	rjmp	.-534    	; 0x23c0 <follow_path+0x66>
		}
    25d6:	86 e0       	ldi	r24, 0x06	; 6
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <follow_path+0x286>
    25da:	84 2f       	mov	r24, r20
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <follow_path+0x286>
    25de:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	bf 90       	pop	r11
    25f2:	af 90       	pop	r10
    25f4:	9f 90       	pop	r9
    25f6:	8f 90       	pop	r8
    25f8:	7f 90       	pop	r7
    25fa:	6f 90       	pop	r6
    25fc:	5f 90       	pop	r5
    25fe:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2600:	91 2f       	mov	r25, r17
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	63 cf       	rjmp	.-314    	; 0x24cc <follow_path+0x172>

00002606 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2606:	0f 93       	push	r16
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	ec 01       	movw	r28, r24
    260e:	9a 01       	movw	r18, r20
    2610:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2612:	bc 01       	movw	r22, r24
    2614:	62 5d       	subi	r22, 0xD2	; 210
    2616:	7f 4f       	sbci	r23, 0xFF	; 255
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	01 e0       	ldi	r16, 0x01	; 1
    261c:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    2620:	88 23       	and	r24, r24
    2622:	11 f0       	breq	.+4      	; 0x2628 <check_fs+0x22>
    2624:	63 e0       	ldi	r22, 0x03	; 3
    2626:	6d c0       	rjmp	.+218    	; 0x2702 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2628:	c3 5d       	subi	r28, 0xD3	; 211
    262a:	dd 4f       	sbci	r29, 0xFD	; 253
    262c:	98 81       	ld	r25, Y
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	2a 91       	ld	r18, -Y
    2632:	cc 52       	subi	r28, 0x2C	; 44
    2634:	d2 40       	sbci	r29, 0x02	; 2
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	82 2b       	or	r24, r18
    263a:	93 2b       	or	r25, r19
    263c:	85 55       	subi	r24, 0x55	; 85
    263e:	9a 4a       	sbci	r25, 0xAA	; 170
    2640:	11 f0       	breq	.+4      	; 0x2646 <check_fs+0x40>
    2642:	62 e0       	ldi	r22, 0x02	; 2
    2644:	5e c0       	rjmp	.+188    	; 0x2702 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2646:	c9 59       	subi	r28, 0x99	; 153
    2648:	df 4f       	sbci	r29, 0xFF	; 255
    264a:	28 81       	ld	r18, Y
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	52 2f       	mov	r21, r18
    2654:	44 27       	eor	r20, r20
    2656:	33 27       	eor	r19, r19
    2658:	22 27       	eor	r18, r18
    265a:	8a 91       	ld	r24, -Y
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	dc 01       	movw	r26, r24
    2664:	99 27       	eor	r25, r25
    2666:	88 27       	eor	r24, r24
    2668:	28 2b       	or	r18, r24
    266a:	39 2b       	or	r19, r25
    266c:	4a 2b       	or	r20, r26
    266e:	5b 2b       	or	r21, r27
    2670:	22 97       	sbiw	r28, 0x02	; 2
    2672:	89 91       	ld	r24, Y+
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e0       	ldi	r26, 0x00	; 0
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	28 2b       	or	r18, r24
    267c:	39 2b       	or	r19, r25
    267e:	4a 2b       	or	r20, r26
    2680:	5b 2b       	or	r21, r27
    2682:	98 81       	ld	r25, Y
    2684:	c5 56       	subi	r28, 0x65	; 101
    2686:	d0 40       	sbci	r29, 0x00	; 0
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	a0 e0       	ldi	r26, 0x00	; 0
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	28 2b       	or	r18, r24
    2690:	39 2b       	or	r19, r25
    2692:	4a 2b       	or	r20, r26
    2694:	5b 2b       	or	r21, r27
    2696:	50 70       	andi	r21, 0x00	; 0
    2698:	26 54       	subi	r18, 0x46	; 70
    269a:	31 44       	sbci	r19, 0x41	; 65
    269c:	44 45       	sbci	r20, 0x54	; 84
    269e:	50 40       	sbci	r21, 0x00	; 0
    26a0:	11 f4       	brne	.+4      	; 0x26a6 <check_fs+0xa0>
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	2e c0       	rjmp	.+92     	; 0x2702 <check_fs+0xfc>
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	cd 57       	subi	r28, 0x7D	; 125
    26aa:	df 4f       	sbci	r29, 0xFF	; 255
    26ac:	28 81       	ld	r18, Y
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	52 2f       	mov	r21, r18
    26b6:	44 27       	eor	r20, r20
    26b8:	33 27       	eor	r19, r19
    26ba:	22 27       	eor	r18, r18
    26bc:	8a 91       	ld	r24, -Y
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a0 e0       	ldi	r26, 0x00	; 0
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	dc 01       	movw	r26, r24
    26c6:	99 27       	eor	r25, r25
    26c8:	88 27       	eor	r24, r24
    26ca:	28 2b       	or	r18, r24
    26cc:	39 2b       	or	r19, r25
    26ce:	4a 2b       	or	r20, r26
    26d0:	5b 2b       	or	r21, r27
    26d2:	22 97       	sbiw	r28, 0x02	; 2
    26d4:	89 91       	ld	r24, Y+
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e0       	ldi	r26, 0x00	; 0
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	28 2b       	or	r18, r24
    26de:	39 2b       	or	r19, r25
    26e0:	4a 2b       	or	r20, r26
    26e2:	5b 2b       	or	r21, r27
    26e4:	98 81       	ld	r25, Y
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	28 2b       	or	r18, r24
    26ee:	39 2b       	or	r19, r25
    26f0:	4a 2b       	or	r20, r26
    26f2:	5b 2b       	or	r21, r27
    26f4:	50 70       	andi	r21, 0x00	; 0
    26f6:	26 54       	subi	r18, 0x46	; 70
    26f8:	31 44       	sbci	r19, 0x41	; 65
    26fa:	44 45       	sbci	r20, 0x54	; 84
    26fc:	50 40       	sbci	r21, 0x00	; 0
    26fe:	09 f0       	breq	.+2      	; 0x2702 <check_fs+0xfc>
    2700:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2702:	86 2f       	mov	r24, r22
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	0f 91       	pop	r16
    270a:	08 95       	ret

0000270c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    270c:	6f 92       	push	r6
    270e:	7f 92       	push	r7
    2710:	8f 92       	push	r8
    2712:	9f 92       	push	r9
    2714:	af 92       	push	r10
    2716:	bf 92       	push	r11
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	fc 01       	movw	r30, r24
    272a:	9b 01       	movw	r18, r22
    272c:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    272e:	a0 81       	ld	r26, Z
    2730:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2732:	8c 91       	ld	r24, X
    2734:	08 2f       	mov	r16, r24
    2736:	10 e0       	ldi	r17, 0x00	; 0
    2738:	00 53       	subi	r16, 0x30	; 48
    273a:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    273c:	0a 30       	cpi	r16, 0x0A	; 10
    273e:	11 05       	cpc	r17, r1
    2740:	68 f4       	brcc	.+26     	; 0x275c <chk_mounted+0x50>
    2742:	11 96       	adiw	r26, 0x01	; 1
    2744:	8c 91       	ld	r24, X
    2746:	11 97       	sbiw	r26, 0x01	; 1
    2748:	8a 33       	cpi	r24, 0x3A	; 58
    274a:	41 f4       	brne	.+16     	; 0x275c <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    274c:	12 96       	adiw	r26, 0x02	; 2
    274e:	a0 83       	st	Z, r26
    2750:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2752:	02 30       	cpi	r16, 0x02	; 2
    2754:	11 05       	cpc	r17, r1
    2756:	20 f0       	brcs	.+8      	; 0x2760 <chk_mounted+0x54>
    2758:	8b e0       	ldi	r24, 0x0B	; 11
    275a:	91 c2       	rjmp	.+1314   	; 0x2c7e <chk_mounted+0x572>
    275c:	00 e0       	ldi	r16, 0x00	; 0
    275e:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2760:	f8 01       	movw	r30, r16
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	e6 52       	subi	r30, 0x26	; 38
    2768:	fc 4c       	sbci	r31, 0xCC	; 204
    276a:	c0 81       	ld	r28, Z
    276c:	d1 81       	ldd	r29, Z+1	; 0x01
    276e:	f9 01       	movw	r30, r18
    2770:	c0 83       	st	Z, r28
    2772:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2774:	20 97       	sbiw	r28, 0x00	; 0
    2776:	11 f4       	brne	.+4      	; 0x277c <chk_mounted+0x70>
    2778:	8c e0       	ldi	r24, 0x0C	; 12
    277a:	81 c2       	rjmp	.+1282   	; 0x2c7e <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    277c:	88 81       	ld	r24, Y
    277e:	88 23       	and	r24, r24
    2780:	79 f0       	breq	.+30     	; 0x27a0 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 23       	and	r24, r24
    2786:	11 f0       	breq	.+4      	; 0x278c <chk_mounted+0x80>
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <chk_mounted+0x84>
	return Stat;
    278c:	80 91 07 33 	lds	r24, 0x3307
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2790:	80 fd       	sbrc	r24, 0
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2794:	ff 20       	and	r15, r15
    2796:	09 f4       	brne	.+2      	; 0x279a <chk_mounted+0x8e>
    2798:	6f c2       	rjmp	.+1246   	; 0x2c78 <chk_mounted+0x56c>
    279a:	82 fd       	sbrc	r24, 2
    279c:	6b c2       	rjmp	.+1238   	; 0x2c74 <chk_mounted+0x568>
    279e:	6c c2       	rjmp	.+1240   	; 0x2c78 <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    27a0:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    27a2:	f8 01       	movw	r30, r16
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	e2 58       	subi	r30, 0x82	; 130
    27aa:	f4 4d       	sbci	r31, 0xD4	; 212
    27ac:	80 81       	ld	r24, Z
    27ae:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    27b0:	0e 94 c2 05 	call	0xb84	; 0xb84 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    27b4:	80 ff       	sbrs	r24, 0
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <chk_mounted+0xb0>
    27b8:	83 e0       	ldi	r24, 0x03	; 3
    27ba:	61 c2       	rjmp	.+1218   	; 0x2c7e <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    27bc:	ff 20       	and	r15, r15
    27be:	11 f0       	breq	.+4      	; 0x27c4 <chk_mounted+0xb8>
    27c0:	82 fd       	sbrc	r24, 2
    27c2:	58 c2       	rjmp	.+1200   	; 0x2c74 <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    27c4:	ce 01       	movw	r24, r28
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	0e 94 03 13 	call	0x2606	; 0x2606 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	21 f0       	breq	.+8      	; 0x27de <chk_mounted+0xd2>
    27d6:	aa 24       	eor	r10, r10
    27d8:	bb 24       	eor	r11, r11
    27da:	65 01       	movw	r12, r10
    27dc:	3d c0       	rjmp	.+122    	; 0x2858 <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    27de:	00 0f       	add	r16, r16
    27e0:	11 1f       	adc	r17, r17
    27e2:	02 58       	subi	r16, 0x82	; 130
    27e4:	14 4d       	sbci	r17, 0xD4	; 212
    27e6:	f8 01       	movw	r30, r16
    27e8:	81 81       	ldd	r24, Z+1	; 0x01
    27ea:	e8 2f       	mov	r30, r24
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	a4 e0       	ldi	r26, 0x04	; 4
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	aa 95       	dec	r26
    27f6:	e1 f7       	brne	.-8      	; 0x27f0 <chk_mounted+0xe4>
    27f8:	e4 51       	subi	r30, 0x14	; 20
    27fa:	fe 4f       	sbci	r31, 0xFE	; 254
    27fc:	ec 0f       	add	r30, r28
    27fe:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2800:	84 81       	ldd	r24, Z+4	; 0x04
    2802:	88 23       	and	r24, r24
    2804:	09 f4       	brne	.+2      	; 0x2808 <chk_mounted+0xfc>
    2806:	3a c2       	rjmp	.+1140   	; 0x2c7c <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2808:	83 85       	ldd	r24, Z+11	; 0x0b
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e0       	ldi	r26, 0x00	; 0
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	d8 2e       	mov	r13, r24
    2812:	cc 24       	eor	r12, r12
    2814:	bb 24       	eor	r11, r11
    2816:	aa 24       	eor	r10, r10
    2818:	82 85       	ldd	r24, Z+10	; 0x0a
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	a0 e0       	ldi	r26, 0x00	; 0
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	dc 01       	movw	r26, r24
    2822:	99 27       	eor	r25, r25
    2824:	88 27       	eor	r24, r24
    2826:	a8 2a       	or	r10, r24
    2828:	b9 2a       	or	r11, r25
    282a:	ca 2a       	or	r12, r26
    282c:	db 2a       	or	r13, r27
    282e:	80 85       	ldd	r24, Z+8	; 0x08
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	a0 e0       	ldi	r26, 0x00	; 0
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	a8 2a       	or	r10, r24
    2838:	b9 2a       	or	r11, r25
    283a:	ca 2a       	or	r12, r26
    283c:	db 2a       	or	r13, r27
    283e:	91 85       	ldd	r25, Z+9	; 0x09
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	a8 2a       	or	r10, r24
    2848:	b9 2a       	or	r11, r25
    284a:	ca 2a       	or	r12, r26
    284c:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    284e:	ce 01       	movw	r24, r28
    2850:	b6 01       	movw	r22, r12
    2852:	a5 01       	movw	r20, r10
    2854:	0e 94 03 13 	call	0x2606	; 0x2606 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2858:	83 30       	cpi	r24, 0x03	; 3
    285a:	11 f4       	brne	.+4      	; 0x2860 <chk_mounted+0x154>
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0f c2       	rjmp	.+1054   	; 0x2c7e <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2860:	88 23       	and	r24, r24
    2862:	09 f0       	breq	.+2      	; 0x2866 <chk_mounted+0x15a>
    2864:	0b c2       	rjmp	.+1046   	; 0x2c7c <chk_mounted+0x570>
    2866:	9a ad       	ldd	r25, Y+58	; 0x3a
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	29 ad       	ldd	r18, Y+57	; 0x39
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	82 2b       	or	r24, r18
    2870:	93 2b       	or	r25, r19
    2872:	80 50       	subi	r24, 0x00	; 0
    2874:	92 40       	sbci	r25, 0x02	; 2
    2876:	09 f0       	breq	.+2      	; 0x287a <chk_mounted+0x16e>
    2878:	01 c2       	rjmp	.+1026   	; 0x2c7c <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    287a:	cb 5b       	subi	r28, 0xBB	; 187
    287c:	df 4f       	sbci	r29, 0xFF	; 255
    287e:	98 81       	ld	r25, Y
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	2a 91       	ld	r18, -Y
    2884:	c4 54       	subi	r28, 0x44	; 68
    2886:	d0 40       	sbci	r29, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	82 2b       	or	r24, r18
    288c:	93 2b       	or	r25, r19
    288e:	7c 01       	movw	r14, r24
    2890:	00 e0       	ldi	r16, 0x00	; 0
    2892:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    2894:	e1 14       	cp	r14, r1
    2896:	f1 04       	cpc	r15, r1
    2898:	01 05       	cpc	r16, r1
    289a:	11 05       	cpc	r17, r1
    289c:	41 f5       	brne	.+80     	; 0x28ee <chk_mounted+0x1e2>
    289e:	cb 5a       	subi	r28, 0xAB	; 171
    28a0:	df 4f       	sbci	r29, 0xFF	; 255
    28a2:	88 81       	ld	r24, Y
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	18 2f       	mov	r17, r24
    28ac:	00 27       	eor	r16, r16
    28ae:	ff 24       	eor	r15, r15
    28b0:	ee 24       	eor	r14, r14
    28b2:	8a 91       	ld	r24, -Y
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	dc 01       	movw	r26, r24
    28bc:	99 27       	eor	r25, r25
    28be:	88 27       	eor	r24, r24
    28c0:	e8 2a       	or	r14, r24
    28c2:	f9 2a       	or	r15, r25
    28c4:	0a 2b       	or	r16, r26
    28c6:	1b 2b       	or	r17, r27
    28c8:	22 97       	sbiw	r28, 0x02	; 2
    28ca:	89 91       	ld	r24, Y+
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e8 2a       	or	r14, r24
    28d4:	f9 2a       	or	r15, r25
    28d6:	0a 2b       	or	r16, r26
    28d8:	1b 2b       	or	r17, r27
    28da:	98 81       	ld	r25, Y
    28dc:	c3 55       	subi	r28, 0x53	; 83
    28de:	d0 40       	sbci	r29, 0x00	; 0
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e8 2a       	or	r14, r24
    28e8:	f9 2a       	or	r15, r25
    28ea:	0a 2b       	or	r16, r26
    28ec:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    28ee:	ee 8a       	std	Y+22, r14	; 0x16
    28f0:	ff 8a       	std	Y+23, r15	; 0x17
    28f2:	08 8f       	std	Y+24, r16	; 0x18
    28f4:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    28f6:	2e ad       	ldd	r18, Y+62	; 0x3e
    28f8:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	c8 01       	movw	r24, r16
    2902:	b7 01       	movw	r22, r14
    2904:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    2908:	3b 01       	movw	r6, r22
    290a:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    290c:	9d ad       	ldd	r25, Y+61	; 0x3d
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	2c ad       	ldd	r18, Y+60	; 0x3c
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	82 2b       	or	r24, r18
    2916:	93 2b       	or	r25, r19
    2918:	a0 e0       	ldi	r26, 0x00	; 0
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	8a 0d       	add	r24, r10
    291e:	9b 1d       	adc	r25, r11
    2920:	ac 1d       	adc	r26, r12
    2922:	bd 1d       	adc	r27, r13
    2924:	8e 8f       	std	Y+30, r24	; 0x1e
    2926:	9f 8f       	std	Y+31, r25	; 0x1f
    2928:	a8 a3       	std	Y+32, r26	; 0x20
    292a:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    292c:	8b ad       	ldd	r24, Y+59	; 0x3b
    292e:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2930:	c0 5c       	subi	r28, 0xC0	; 192
    2932:	df 4f       	sbci	r29, 0xFF	; 255
    2934:	98 81       	ld	r25, Y
    2936:	c0 54       	subi	r28, 0x40	; 64
    2938:	d0 40       	sbci	r29, 0x00	; 0
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	2f ad       	ldd	r18, Y+63	; 0x3f
    293e:	42 2f       	mov	r20, r18
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	48 2b       	or	r20, r24
    2944:	59 2b       	or	r21, r25
    2946:	48 87       	std	Y+8, r20	; 0x08
    2948:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    294a:	ce 5b       	subi	r28, 0xBE	; 190
    294c:	df 4f       	sbci	r29, 0xFF	; 255
    294e:	98 81       	ld	r25, Y
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	2a 91       	ld	r18, -Y
    2954:	c1 54       	subi	r28, 0x41	; 65
    2956:	d0 40       	sbci	r29, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	82 2b       	or	r24, r18
    295c:	93 2b       	or	r25, r19
    295e:	7c 01       	movw	r14, r24
    2960:	00 e0       	ldi	r16, 0x00	; 0
    2962:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2964:	e1 14       	cp	r14, r1
    2966:	f1 04       	cpc	r15, r1
    2968:	01 05       	cpc	r16, r1
    296a:	11 05       	cpc	r17, r1
    296c:	41 f5       	brne	.+80     	; 0x29be <chk_mounted+0x2b2>
    296e:	cf 5a       	subi	r28, 0xAF	; 175
    2970:	df 4f       	sbci	r29, 0xFF	; 255
    2972:	88 81       	ld	r24, Y
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	a0 e0       	ldi	r26, 0x00	; 0
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	18 2f       	mov	r17, r24
    297c:	00 27       	eor	r16, r16
    297e:	ff 24       	eor	r15, r15
    2980:	ee 24       	eor	r14, r14
    2982:	8a 91       	ld	r24, -Y
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	a0 e0       	ldi	r26, 0x00	; 0
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	dc 01       	movw	r26, r24
    298c:	99 27       	eor	r25, r25
    298e:	88 27       	eor	r24, r24
    2990:	e8 2a       	or	r14, r24
    2992:	f9 2a       	or	r15, r25
    2994:	0a 2b       	or	r16, r26
    2996:	1b 2b       	or	r17, r27
    2998:	22 97       	sbiw	r28, 0x02	; 2
    299a:	89 91       	ld	r24, Y+
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e8 2a       	or	r14, r24
    29a4:	f9 2a       	or	r15, r25
    29a6:	0a 2b       	or	r16, r26
    29a8:	1b 2b       	or	r17, r27
    29aa:	98 81       	ld	r25, Y
    29ac:	cf 54       	subi	r28, 0x4F	; 79
    29ae:	d0 40       	sbci	r29, 0x00	; 0
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	a0 e0       	ldi	r26, 0x00	; 0
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e8 2a       	or	r14, r24
    29b8:	f9 2a       	or	r15, r25
    29ba:	0a 2b       	or	r16, r26
    29bc:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    29be:	9d ad       	ldd	r25, Y+61	; 0x3d
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	82 2b       	or	r24, r18
    29c8:	93 2b       	or	r25, r19
    29ca:	a0 e0       	ldi	r26, 0x00	; 0
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e8 1a       	sub	r14, r24
    29d0:	f9 0a       	sbc	r15, r25
    29d2:	0a 0b       	sbc	r16, r26
    29d4:	1b 0b       	sbc	r17, r27
    29d6:	e6 18       	sub	r14, r6
    29d8:	f7 08       	sbc	r15, r7
    29da:	08 09       	sbc	r16, r8
    29dc:	19 09       	sbc	r17, r9
    29de:	f4 e0       	ldi	r31, 0x04	; 4
    29e0:	56 95       	lsr	r21
    29e2:	47 95       	ror	r20
    29e4:	fa 95       	dec	r31
    29e6:	e1 f7       	brne	.-8      	; 0x29e0 <chk_mounted+0x2d4>
    29e8:	ca 01       	movw	r24, r20
    29ea:	a0 e0       	ldi	r26, 0x00	; 0
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e8 1a       	sub	r14, r24
    29f0:	f9 0a       	sbc	r15, r25
    29f2:	0a 0b       	sbc	r16, r26
    29f4:	1b 0b       	sbc	r17, r27
    29f6:	2a 81       	ldd	r18, Y+2	; 0x02
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	c8 01       	movw	r24, r16
    2a00:	b7 01       	movw	r22, r14
    2a02:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    2a06:	2e 5f       	subi	r18, 0xFE	; 254
    2a08:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0e:	2a 8f       	std	Y+26, r18	; 0x1a
    2a10:	3b 8f       	std	Y+27, r19	; 0x1b
    2a12:	4c 8f       	std	Y+28, r20	; 0x1c
    2a14:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2a16:	27 3f       	cpi	r18, 0xF7	; 247
    2a18:	8f e0       	ldi	r24, 0x0F	; 15
    2a1a:	38 07       	cpc	r19, r24
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	48 07       	cpc	r20, r24
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	58 07       	cpc	r21, r24
    2a24:	10 f4       	brcc	.+4      	; 0x2a2a <chk_mounted+0x31e>
    2a26:	11 e0       	ldi	r17, 0x01	; 1
    2a28:	07 c0       	rjmp	.+14     	; 0x2a38 <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2a2a:	27 5f       	subi	r18, 0xF7	; 247
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	40 40       	sbci	r20, 0x00	; 0
    2a30:	50 40       	sbci	r21, 0x00	; 0
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <chk_mounted+0x32a>
    2a34:	33 c1       	rjmp	.+614    	; 0x2c9c <chk_mounted+0x590>
    2a36:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2a38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a3c:	a8 a1       	ldd	r26, Y+32	; 0x20
    2a3e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2a40:	86 0d       	add	r24, r6
    2a42:	97 1d       	adc	r25, r7
    2a44:	a8 1d       	adc	r26, r8
    2a46:	b9 1d       	adc	r27, r9
    2a48:	8a a3       	std	Y+34, r24	; 0x22
    2a4a:	9b a3       	std	Y+35, r25	; 0x23
    2a4c:	ac a3       	std	Y+36, r26	; 0x24
    2a4e:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2a50:	88 85       	ldd	r24, Y+8	; 0x08
    2a52:	99 85       	ldd	r25, Y+9	; 0x09
    2a54:	e4 e0       	ldi	r30, 0x04	; 4
    2a56:	96 95       	lsr	r25
    2a58:	87 95       	ror	r24
    2a5a:	ea 95       	dec	r30
    2a5c:	e1 f7       	brne	.-8      	; 0x2a56 <chk_mounted+0x34a>
    2a5e:	a0 e0       	ldi	r26, 0x00	; 0
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2a64:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2a66:	48 a1       	ldd	r20, Y+32	; 0x20
    2a68:	59 a1       	ldd	r21, Y+33	; 0x21
    2a6a:	82 0f       	add	r24, r18
    2a6c:	93 1f       	adc	r25, r19
    2a6e:	a4 1f       	adc	r26, r20
    2a70:	b5 1f       	adc	r27, r21
    2a72:	86 0d       	add	r24, r6
    2a74:	97 1d       	adc	r25, r7
    2a76:	a8 1d       	adc	r26, r8
    2a78:	b9 1d       	adc	r27, r9
    2a7a:	8e a3       	std	Y+38, r24	; 0x26
    2a7c:	9f a3       	std	Y+39, r25	; 0x27
    2a7e:	a8 a7       	std	Y+40, r26	; 0x28
    2a80:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	9f ef       	ldi	r25, 0xFF	; 255
    2a86:	af ef       	ldi	r26, 0xFF	; 255
    2a88:	bf ef       	ldi	r27, 0xFF	; 255
    2a8a:	8e 87       	std	Y+14, r24	; 0x0e
    2a8c:	9f 87       	std	Y+15, r25	; 0x0f
    2a8e:	a8 8b       	std	Y+16, r26	; 0x10
    2a90:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2a92:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2a94:	13 30       	cpi	r17, 0x03	; 3
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <chk_mounted+0x38e>
    2a98:	dc c0       	rjmp	.+440    	; 0x2c52 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2a9a:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2a9c:	c1 5a       	subi	r28, 0xA1	; 161
    2a9e:	df 4f       	sbci	r29, 0xFF	; 255
    2aa0:	38 81       	ld	r19, Y
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	8a 91       	ld	r24, -Y
    2aa6:	ce 55       	subi	r28, 0x5E	; 94
    2aa8:	d0 40       	sbci	r29, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	28 2b       	or	r18, r24
    2aae:	39 2b       	or	r19, r25
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	2a 0d       	add	r18, r10
    2ab6:	3b 1d       	adc	r19, r11
    2ab8:	4c 1d       	adc	r20, r12
    2aba:	5d 1d       	adc	r21, r13
    2abc:	2a 8b       	std	Y+18, r18	; 0x12
    2abe:	3b 8b       	std	Y+19, r19	; 0x13
    2ac0:	4c 8b       	std	Y+20, r20	; 0x14
    2ac2:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2ac4:	be 01       	movw	r22, r28
    2ac6:	62 5d       	subi	r22, 0xD2	; 210
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	01 e0       	ldi	r16, 0x01	; 1
    2ace:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    2ad2:	88 23       	and	r24, r24
    2ad4:	09 f0       	breq	.+2      	; 0x2ad8 <chk_mounted+0x3cc>
    2ad6:	bd c0       	rjmp	.+378    	; 0x2c52 <chk_mounted+0x546>
    2ad8:	c3 5d       	subi	r28, 0xD3	; 211
    2ada:	dd 4f       	sbci	r29, 0xFD	; 253
    2adc:	98 81       	ld	r25, Y
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	2a 91       	ld	r18, -Y
    2ae2:	cc 52       	subi	r28, 0x2C	; 44
    2ae4:	d2 40       	sbci	r29, 0x02	; 2
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	82 2b       	or	r24, r18
    2aea:	93 2b       	or	r25, r19
    2aec:	85 55       	subi	r24, 0x55	; 85
    2aee:	9a 4a       	sbci	r25, 0xAA	; 170
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <chk_mounted+0x3e8>
    2af2:	af c0       	rjmp	.+350    	; 0x2c52 <chk_mounted+0x546>
    2af4:	29 a9       	ldd	r18, Y+49	; 0x31
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	52 2f       	mov	r21, r18
    2afe:	44 27       	eor	r20, r20
    2b00:	33 27       	eor	r19, r19
    2b02:	22 27       	eor	r18, r18
    2b04:	88 a9       	ldd	r24, Y+48	; 0x30
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a0 e0       	ldi	r26, 0x00	; 0
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	99 27       	eor	r25, r25
    2b10:	88 27       	eor	r24, r24
    2b12:	28 2b       	or	r18, r24
    2b14:	39 2b       	or	r19, r25
    2b16:	4a 2b       	or	r20, r26
    2b18:	5b 2b       	or	r21, r27
    2b1a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a0 e0       	ldi	r26, 0x00	; 0
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	28 2b       	or	r18, r24
    2b24:	39 2b       	or	r19, r25
    2b26:	4a 2b       	or	r20, r26
    2b28:	5b 2b       	or	r21, r27
    2b2a:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	28 2b       	or	r18, r24
    2b34:	39 2b       	or	r19, r25
    2b36:	4a 2b       	or	r20, r26
    2b38:	5b 2b       	or	r21, r27
    2b3a:	22 55       	subi	r18, 0x52	; 82
    2b3c:	32 45       	sbci	r19, 0x52	; 82
    2b3e:	41 46       	sbci	r20, 0x61	; 97
    2b40:	51 44       	sbci	r21, 0x41	; 65
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <chk_mounted+0x43a>
    2b44:	86 c0       	rjmp	.+268    	; 0x2c52 <chk_mounted+0x546>
    2b46:	cb 5e       	subi	r28, 0xEB	; 235
    2b48:	dd 4f       	sbci	r29, 0xFD	; 253
    2b4a:	28 81       	ld	r18, Y
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	52 2f       	mov	r21, r18
    2b54:	44 27       	eor	r20, r20
    2b56:	33 27       	eor	r19, r19
    2b58:	22 27       	eor	r18, r18
    2b5a:	8a 91       	ld	r24, -Y
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a0 e0       	ldi	r26, 0x00	; 0
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	dc 01       	movw	r26, r24
    2b64:	99 27       	eor	r25, r25
    2b66:	88 27       	eor	r24, r24
    2b68:	28 2b       	or	r18, r24
    2b6a:	39 2b       	or	r19, r25
    2b6c:	4a 2b       	or	r20, r26
    2b6e:	5b 2b       	or	r21, r27
    2b70:	22 97       	sbiw	r28, 0x02	; 2
    2b72:	89 91       	ld	r24, Y+
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	28 2b       	or	r18, r24
    2b7c:	39 2b       	or	r19, r25
    2b7e:	4a 2b       	or	r20, r26
    2b80:	5b 2b       	or	r21, r27
    2b82:	98 81       	ld	r25, Y
    2b84:	c3 51       	subi	r28, 0x13	; 19
    2b86:	d2 40       	sbci	r29, 0x02	; 2
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	28 2b       	or	r18, r24
    2b90:	39 2b       	or	r19, r25
    2b92:	4a 2b       	or	r20, r26
    2b94:	5b 2b       	or	r21, r27
    2b96:	22 57       	subi	r18, 0x72	; 114
    2b98:	32 47       	sbci	r19, 0x72	; 114
    2b9a:	41 44       	sbci	r20, 0x41	; 65
    2b9c:	51 46       	sbci	r21, 0x61	; 97
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <chk_mounted+0x496>
    2ba0:	58 c0       	rjmp	.+176    	; 0x2c52 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2ba2:	c3 5e       	subi	r28, 0xE3	; 227
    2ba4:	dd 4f       	sbci	r29, 0xFD	; 253
    2ba6:	28 81       	ld	r18, Y
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	52 2f       	mov	r21, r18
    2bb0:	44 27       	eor	r20, r20
    2bb2:	33 27       	eor	r19, r19
    2bb4:	22 27       	eor	r18, r18
    2bb6:	8a 91       	ld	r24, -Y
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e0       	ldi	r26, 0x00	; 0
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	99 27       	eor	r25, r25
    2bc2:	88 27       	eor	r24, r24
    2bc4:	28 2b       	or	r18, r24
    2bc6:	39 2b       	or	r19, r25
    2bc8:	4a 2b       	or	r20, r26
    2bca:	5b 2b       	or	r21, r27
    2bcc:	22 97       	sbiw	r28, 0x02	; 2
    2bce:	89 91       	ld	r24, Y+
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	28 2b       	or	r18, r24
    2bd8:	39 2b       	or	r19, r25
    2bda:	4a 2b       	or	r20, r26
    2bdc:	5b 2b       	or	r21, r27
    2bde:	98 81       	ld	r25, Y
    2be0:	cb 51       	subi	r28, 0x1B	; 27
    2be2:	d2 40       	sbci	r29, 0x02	; 2
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	a0 e0       	ldi	r26, 0x00	; 0
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	28 2b       	or	r18, r24
    2bec:	39 2b       	or	r19, r25
    2bee:	4a 2b       	or	r20, r26
    2bf0:	5b 2b       	or	r21, r27
    2bf2:	2a 87       	std	Y+10, r18	; 0x0a
    2bf4:	3b 87       	std	Y+11, r19	; 0x0b
    2bf6:	4c 87       	std	Y+12, r20	; 0x0c
    2bf8:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2bfa:	c7 5e       	subi	r28, 0xE7	; 231
    2bfc:	dd 4f       	sbci	r29, 0xFD	; 253
    2bfe:	28 81       	ld	r18, Y
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	52 2f       	mov	r21, r18
    2c08:	44 27       	eor	r20, r20
    2c0a:	33 27       	eor	r19, r19
    2c0c:	22 27       	eor	r18, r18
    2c0e:	8a 91       	ld	r24, -Y
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 e0       	ldi	r26, 0x00	; 0
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	dc 01       	movw	r26, r24
    2c18:	99 27       	eor	r25, r25
    2c1a:	88 27       	eor	r24, r24
    2c1c:	28 2b       	or	r18, r24
    2c1e:	39 2b       	or	r19, r25
    2c20:	4a 2b       	or	r20, r26
    2c22:	5b 2b       	or	r21, r27
    2c24:	22 97       	sbiw	r28, 0x02	; 2
    2c26:	89 91       	ld	r24, Y+
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e0       	ldi	r26, 0x00	; 0
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	28 2b       	or	r18, r24
    2c30:	39 2b       	or	r19, r25
    2c32:	4a 2b       	or	r20, r26
    2c34:	5b 2b       	or	r21, r27
    2c36:	98 81       	ld	r25, Y
    2c38:	c7 51       	subi	r28, 0x17	; 23
    2c3a:	d2 40       	sbci	r29, 0x02	; 2
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	28 2b       	or	r18, r24
    2c44:	39 2b       	or	r19, r25
    2c46:	4a 2b       	or	r20, r26
    2c48:	5b 2b       	or	r21, r27
    2c4a:	2e 87       	std	Y+14, r18	; 0x0e
    2c4c:	3f 87       	std	Y+15, r19	; 0x0f
    2c4e:	48 8b       	std	Y+16, r20	; 0x10
    2c50:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2c52:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2c54:	1a a6       	std	Y+42, r1	; 0x2a
    2c56:	1b a6       	std	Y+43, r1	; 0x2b
    2c58:	1c a6       	std	Y+44, r1	; 0x2c
    2c5a:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2c5c:	80 91 de 33 	lds	r24, 0x33DE
    2c60:	90 91 df 33 	lds	r25, 0x33DF
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	80 93 de 33 	sts	0x33DE, r24
    2c6a:	90 93 df 33 	sts	0x33DF, r25
    2c6e:	8e 83       	std	Y+6, r24	; 0x06
    2c70:	9f 83       	std	Y+7, r25	; 0x07
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <chk_mounted+0x56c>

	return FR_OK;
    2c74:	8a e0       	ldi	r24, 0x0A	; 10
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <chk_mounted+0x572>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	01 c0       	rjmp	.+2      	; 0x2c7e <chk_mounted+0x572>
    2c7c:	8d e0       	ldi	r24, 0x0D	; 13
}
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	bf 90       	pop	r11
    2c90:	af 90       	pop	r10
    2c92:	9f 90       	pop	r9
    2c94:	8f 90       	pop	r8
    2c96:	7f 90       	pop	r7
    2c98:	6f 90       	pop	r6
    2c9a:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2c9c:	c3 5a       	subi	r28, 0xA3	; 163
    2c9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ca0:	28 81       	ld	r18, Y
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	52 2f       	mov	r21, r18
    2caa:	44 27       	eor	r20, r20
    2cac:	33 27       	eor	r19, r19
    2cae:	22 27       	eor	r18, r18
    2cb0:	8a 91       	ld	r24, -Y
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	a0 e0       	ldi	r26, 0x00	; 0
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	dc 01       	movw	r26, r24
    2cba:	99 27       	eor	r25, r25
    2cbc:	88 27       	eor	r24, r24
    2cbe:	28 2b       	or	r18, r24
    2cc0:	39 2b       	or	r19, r25
    2cc2:	4a 2b       	or	r20, r26
    2cc4:	5b 2b       	or	r21, r27
    2cc6:	22 97       	sbiw	r28, 0x02	; 2
    2cc8:	89 91       	ld	r24, Y+
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	28 2b       	or	r18, r24
    2cd2:	39 2b       	or	r19, r25
    2cd4:	4a 2b       	or	r20, r26
    2cd6:	5b 2b       	or	r21, r27
    2cd8:	98 81       	ld	r25, Y
    2cda:	cb 55       	subi	r28, 0x5B	; 91
    2cdc:	d0 40       	sbci	r29, 0x00	; 0
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	a0 e0       	ldi	r26, 0x00	; 0
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	28 2b       	or	r18, r24
    2ce6:	39 2b       	or	r19, r25
    2ce8:	4a 2b       	or	r20, r26
    2cea:	5b 2b       	or	r21, r27
    2cec:	2a a3       	std	Y+34, r18	; 0x22
    2cee:	3b a3       	std	Y+35, r19	; 0x23
    2cf0:	4c a3       	std	Y+36, r20	; 0x24
    2cf2:	5d a3       	std	Y+37, r21	; 0x25
    2cf4:	13 e0       	ldi	r17, 0x03	; 3
    2cf6:	ac ce       	rjmp	.-680    	; 0x2a50 <chk_mounted+0x344>

00002cf8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2cf8:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	a9 f0       	breq	.+42     	; 0x2d28 <validate+0x30>
    2cfe:	80 81       	ld	r24, Z
    2d00:	88 23       	and	r24, r24
    2d02:	91 f0       	breq	.+36     	; 0x2d28 <validate+0x30>
    2d04:	86 81       	ldd	r24, Z+6	; 0x06
    2d06:	97 81       	ldd	r25, Z+7	; 0x07
    2d08:	86 17       	cp	r24, r22
    2d0a:	97 07       	cpc	r25, r23
    2d0c:	69 f4       	brne	.+26     	; 0x2d28 <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d0e:	81 81       	ldd	r24, Z+1	; 0x01
    2d10:	88 23       	and	r24, r24
    2d12:	11 f0       	breq	.+4      	; 0x2d18 <validate+0x20>
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <validate+0x24>
	return Stat;
    2d18:	80 91 07 33 	lds	r24, 0x3307
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2d1c:	80 fd       	sbrc	r24, 0
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <validate+0x2c>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	08 95       	ret
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	08 95       	ret
    2d28:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2d2a:	08 95       	ret

00002d2c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	10 f0       	brcs	.+4      	; 0x2d3a <f_mount+0xe>
    2d36:	8b e0       	ldi	r24, 0x0B	; 11
    2d38:	17 c0       	rjmp	.+46     	; 0x2d68 <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2d3a:	a8 2f       	mov	r26, r24
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	fd 01       	movw	r30, r26
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	e6 52       	subi	r30, 0x26	; 38
    2d46:	fc 4c       	sbci	r31, 0xCC	; 204
    2d48:	01 90       	ld	r0, Z+
    2d4a:	f0 81       	ld	r31, Z
    2d4c:	e0 2d       	mov	r30, r0

	if (rfs) {
    2d4e:	30 97       	sbiw	r30, 0x00	; 0
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2d52:	10 82       	st	Z, r1
	}

	if (fs) {
    2d54:	20 97       	sbiw	r28, 0x00	; 0
    2d56:	09 f0       	breq	.+2      	; 0x2d5a <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2d58:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2d5a:	aa 0f       	add	r26, r26
    2d5c:	bb 1f       	adc	r27, r27
    2d5e:	a6 52       	subi	r26, 0x26	; 38
    2d60:	bc 4c       	sbci	r27, 0xCC	; 204
    2d62:	cd 93       	st	X+, r28
    2d64:	dc 93       	st	X, r29
    2d66:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	08 95       	ret

00002d6e <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d6e:	5f 92       	push	r5
    2d70:	6f 92       	push	r6
    2d72:	7f 92       	push	r7
    2d74:	8f 92       	push	r8
    2d76:	9f 92       	push	r9
    2d78:	af 92       	push	r10
    2d7a:	bf 92       	push	r11
    2d7c:	cf 92       	push	r12
    2d7e:	df 92       	push	r13
    2d80:	ef 92       	push	r14
    2d82:	ff 92       	push	r15
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	a4 97       	sbiw	r28, 0x24	; 36
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	3c 01       	movw	r6, r24
    2d98:	6b a3       	std	Y+35, r22	; 0x23
    2d9a:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	1d 92       	st	X+, r1
    2da0:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2da2:	3f e1       	ldi	r19, 0x1F	; 31
    2da4:	53 2e       	mov	r5, r19
    2da6:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2da8:	8e 01       	movw	r16, r28
    2daa:	03 5f       	subi	r16, 0xF3	; 243
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	4e 71       	andi	r20, 0x1E	; 30
    2db0:	ce 01       	movw	r24, r28
    2db2:	83 96       	adiw	r24, 0x23	; 35
    2db4:	b8 01       	movw	r22, r16
    2db6:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2dba:	88 23       	and	r24, r24
    2dbc:	11 f0       	breq	.+4      	; 0x2dc2 <f_open+0x54>
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	32 c1       	rjmp	.+612    	; 0x3026 <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	89 a3       	std	Y+33, r24	; 0x21
    2dc8:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2dca:	6b a1       	ldd	r22, Y+35	; 0x23
    2dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
    2dd4:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2dd6:	45 2d       	mov	r20, r5
    2dd8:	50 e0       	ldi	r21, 0x00	; 0
    2dda:	ca 01       	movw	r24, r20
    2ddc:	8c 71       	andi	r24, 0x1C	; 28
    2dde:	90 70       	andi	r25, 0x00	; 0
    2de0:	89 2b       	or	r24, r25
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <f_open+0x78>
    2de4:	84 c0       	rjmp	.+264    	; 0x2eee <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2de6:	22 23       	and	r18, r18
    2de8:	79 f0       	breq	.+30     	; 0x2e08 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2dea:	24 30       	cpi	r18, 0x04	; 4
    2dec:	09 f0       	breq	.+2      	; 0x2df0 <f_open+0x82>
    2dee:	1b c1       	rjmp	.+566    	; 0x3026 <f_open+0x2b8>
				res = dir_register(&dj);
    2df0:	c8 01       	movw	r24, r16
    2df2:	0e 94 a9 10 	call	0x2152	; 0x2152 <dir_register>
    2df6:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <f_open+0x90>
    2dfc:	14 c1       	rjmp	.+552    	; 0x3026 <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2dfe:	b8 e0       	ldi	r27, 0x08	; 8
    2e00:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2e02:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e04:	18 a1       	ldd	r17, Y+32	; 0x20
    2e06:	5b c0       	rjmp	.+182    	; 0x2ebe <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2e08:	52 fe       	sbrs	r5, 2
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <f_open+0xa2>
    2e0c:	28 e0       	ldi	r18, 0x08	; 8
    2e0e:	0b c1       	rjmp	.+534    	; 0x3026 <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2e10:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e12:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2e14:	01 15       	cp	r16, r1
    2e16:	11 05       	cpc	r17, r1
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <f_open+0xae>
    2e1a:	02 c1       	rjmp	.+516    	; 0x3020 <f_open+0x2b2>
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	83 85       	ldd	r24, Z+11	; 0x0b
    2e20:	81 71       	andi	r24, 0x11	; 17
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <f_open+0xb8>
    2e24:	fd c0       	rjmp	.+506    	; 0x3020 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2e26:	53 fe       	sbrs	r5, 3
    2e28:	4a c0       	rjmp	.+148    	; 0x2ebe <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2e2a:	95 89       	ldd	r25, Z+21	; 0x15
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	24 89       	ldd	r18, Z+20	; 0x14
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	82 2b       	or	r24, r18
    2e34:	93 2b       	or	r25, r19
    2e36:	a0 e0       	ldi	r26, 0x00	; 0
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	7c 01       	movw	r14, r24
    2e3c:	dd 24       	eor	r13, r13
    2e3e:	cc 24       	eor	r12, r12
    2e40:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	82 2b       	or	r24, r18
    2e4a:	93 2b       	or	r25, r19
    2e4c:	a0 e0       	ldi	r26, 0x00	; 0
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	c8 2a       	or	r12, r24
    2e52:	d9 2a       	or	r13, r25
    2e54:	ea 2a       	or	r14, r26
    2e56:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2e58:	14 8a       	std	Z+20, r1	; 0x14
    2e5a:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2e5c:	12 8e       	std	Z+26, r1	; 0x1a
    2e5e:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2e60:	14 8e       	std	Z+28, r1	; 0x1c
    2e62:	15 8e       	std	Z+29, r1	; 0x1d
    2e64:	16 8e       	std	Z+30, r1	; 0x1e
    2e66:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2e68:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e6a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2e70:	82 a4       	ldd	r8, Z+42	; 0x2a
    2e72:	93 a4       	ldd	r9, Z+43	; 0x2b
    2e74:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2e76:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2e78:	c1 14       	cp	r12, r1
    2e7a:	d1 04       	cpc	r13, r1
    2e7c:	e1 04       	cpc	r14, r1
    2e7e:	f1 04       	cpc	r15, r1
    2e80:	a1 f0       	breq	.+40     	; 0x2eaa <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2e82:	cf 01       	movw	r24, r30
    2e84:	b7 01       	movw	r22, r14
    2e86:	a6 01       	movw	r20, r12
    2e88:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <remove_chain>
    2e8c:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2e8e:	88 23       	and	r24, r24
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <f_open+0x126>
    2e92:	c9 c0       	rjmp	.+402    	; 0x3026 <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2e94:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e96:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e98:	08 94       	sec
    2e9a:	c1 08       	sbc	r12, r1
    2e9c:	d1 08       	sbc	r13, r1
    2e9e:	e1 08       	sbc	r14, r1
    2ea0:	f1 08       	sbc	r15, r1
    2ea2:	c2 86       	std	Z+10, r12	; 0x0a
    2ea4:	d3 86       	std	Z+11, r13	; 0x0b
    2ea6:	e4 86       	std	Z+12, r14	; 0x0c
    2ea8:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eae:	b5 01       	movw	r22, r10
    2eb0:	a4 01       	movw	r20, r8
    2eb2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    2eb6:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <f_open+0x150>
    2ebc:	b4 c0       	rjmp	.+360    	; 0x3026 <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2ebe:	53 fe       	sbrs	r5, 3
    2ec0:	27 c0       	rjmp	.+78     	; 0x2f10 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2ec2:	d8 01       	movw	r26, r16
    2ec4:	1b 96       	adiw	r26, 0x0b	; 11
    2ec6:	1c 92       	st	X, r1
    2ec8:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2eca:	1e 96       	adiw	r26, 0x0e	; 14
    2ecc:	1c 92       	st	X, r1
    2ece:	1e 97       	sbiw	r26, 0x0e	; 14
    2ed0:	1f 96       	adiw	r26, 0x0f	; 15
    2ed2:	1c 92       	st	X, r1
    2ed4:	1f 97       	sbiw	r26, 0x0f	; 15
    2ed6:	50 96       	adiw	r26, 0x10	; 16
    2ed8:	1c 92       	st	X, r1
    2eda:	50 97       	sbiw	r26, 0x10	; 16
    2edc:	51 96       	adiw	r26, 0x11	; 17
    2ede:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2ee0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ee2:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2ee8:	b0 e2       	ldi	r27, 0x20	; 32
    2eea:	5b 2a       	or	r5, r27
    2eec:	11 c0       	rjmp	.+34     	; 0x2f10 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2eee:	22 23       	and	r18, r18
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <f_open+0x186>
    2ef2:	99 c0       	rjmp	.+306    	; 0x3026 <f_open+0x2b8>
		dir = dj.dir;
    2ef4:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2ef6:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2ef8:	01 15       	cp	r16, r1
    2efa:	11 05       	cpc	r17, r1
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <f_open+0x192>
    2efe:	92 c0       	rjmp	.+292    	; 0x3024 <f_open+0x2b6>
    2f00:	f8 01       	movw	r30, r16
    2f02:	83 85       	ldd	r24, Z+11	; 0x0b
    2f04:	84 fd       	sbrc	r24, 4
    2f06:	8e c0       	rjmp	.+284    	; 0x3024 <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2f08:	51 fe       	sbrs	r5, 1
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <f_open+0x1a2>
    2f0c:	80 fd       	sbrc	r24, 0
    2f0e:	88 c0       	rjmp	.+272    	; 0x3020 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2f10:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f12:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f14:	22 a5       	ldd	r18, Z+42	; 0x2a
    2f16:	33 a5       	ldd	r19, Z+43	; 0x2b
    2f18:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f1a:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f1c:	d3 01       	movw	r26, r6
    2f1e:	5a 96       	adiw	r26, 0x1a	; 26
    2f20:	2d 93       	st	X+, r18
    2f22:	3d 93       	st	X+, r19
    2f24:	4d 93       	st	X+, r20
    2f26:	5c 93       	st	X, r21
    2f28:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2f2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f2c:	98 a1       	ldd	r25, Y+32	; 0x20
    2f2e:	5e 96       	adiw	r26, 0x1e	; 30
    2f30:	8d 93       	st	X+, r24
    2f32:	9c 93       	st	X, r25
    2f34:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2f36:	14 96       	adiw	r26, 0x04	; 4
    2f38:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2f3a:	d8 01       	movw	r26, r16
    2f3c:	55 96       	adiw	r26, 0x15	; 21
    2f3e:	3c 91       	ld	r19, X
    2f40:	55 97       	sbiw	r26, 0x15	; 21
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	54 96       	adiw	r26, 0x14	; 20
    2f46:	8c 91       	ld	r24, X
    2f48:	54 97       	sbiw	r26, 0x14	; 20
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	28 2b       	or	r18, r24
    2f4e:	39 2b       	or	r19, r25
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	a9 01       	movw	r20, r18
    2f56:	33 27       	eor	r19, r19
    2f58:	22 27       	eor	r18, r18
    2f5a:	5b 96       	adiw	r26, 0x1b	; 27
    2f5c:	9c 91       	ld	r25, X
    2f5e:	5b 97       	sbiw	r26, 0x1b	; 27
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	5a 96       	adiw	r26, 0x1a	; 26
    2f64:	6c 91       	ld	r22, X
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	86 2b       	or	r24, r22
    2f6a:	97 2b       	or	r25, r23
    2f6c:	a0 e0       	ldi	r26, 0x00	; 0
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	28 2b       	or	r18, r24
    2f72:	39 2b       	or	r19, r25
    2f74:	4a 2b       	or	r20, r26
    2f76:	5b 2b       	or	r21, r27
    2f78:	d3 01       	movw	r26, r6
    2f7a:	1e 96       	adiw	r26, 0x0e	; 14
    2f7c:	2d 93       	st	X+, r18
    2f7e:	3d 93       	st	X+, r19
    2f80:	4d 93       	st	X+, r20
    2f82:	5c 93       	st	X, r21
    2f84:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2f86:	d8 01       	movw	r26, r16
    2f88:	5f 96       	adiw	r26, 0x1f	; 31
    2f8a:	2c 91       	ld	r18, X
    2f8c:	5f 97       	sbiw	r26, 0x1f	; 31
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	52 2f       	mov	r21, r18
    2f96:	44 27       	eor	r20, r20
    2f98:	33 27       	eor	r19, r19
    2f9a:	22 27       	eor	r18, r18
    2f9c:	5e 96       	adiw	r26, 0x1e	; 30
    2f9e:	8c 91       	ld	r24, X
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a0 e0       	ldi	r26, 0x00	; 0
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	99 27       	eor	r25, r25
    2faa:	88 27       	eor	r24, r24
    2fac:	28 2b       	or	r18, r24
    2fae:	39 2b       	or	r19, r25
    2fb0:	4a 2b       	or	r20, r26
    2fb2:	5b 2b       	or	r21, r27
    2fb4:	d8 01       	movw	r26, r16
    2fb6:	5c 96       	adiw	r26, 0x1c	; 28
    2fb8:	8c 91       	ld	r24, X
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	28 2b       	or	r18, r24
    2fc2:	39 2b       	or	r19, r25
    2fc4:	4a 2b       	or	r20, r26
    2fc6:	5b 2b       	or	r21, r27
    2fc8:	d8 01       	movw	r26, r16
    2fca:	5d 96       	adiw	r26, 0x1d	; 29
    2fcc:	9c 91       	ld	r25, X
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	a0 e0       	ldi	r26, 0x00	; 0
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	28 2b       	or	r18, r24
    2fd6:	39 2b       	or	r19, r25
    2fd8:	4a 2b       	or	r20, r26
    2fda:	5b 2b       	or	r21, r27
    2fdc:	d3 01       	movw	r26, r6
    2fde:	1a 96       	adiw	r26, 0x0a	; 10
    2fe0:	2d 93       	st	X+, r18
    2fe2:	3d 93       	st	X+, r19
    2fe4:	4d 93       	st	X+, r20
    2fe6:	5c 93       	st	X, r21
    2fe8:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2fea:	16 96       	adiw	r26, 0x06	; 6
    2fec:	1d 92       	st	X+, r1
    2fee:	1d 92       	st	X+, r1
    2ff0:	1d 92       	st	X+, r1
    2ff2:	1c 92       	st	X, r1
    2ff4:	19 97       	sbiw	r26, 0x09	; 9
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	15 96       	adiw	r26, 0x05	; 5
    2ffa:	8c 93       	st	X, r24
    2ffc:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2ffe:	56 96       	adiw	r26, 0x16	; 22
    3000:	1d 92       	st	X+, r1
    3002:	1d 92       	st	X+, r1
    3004:	1d 92       	st	X+, r1
    3006:	1c 92       	st	X, r1
    3008:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    300a:	ed 93       	st	X+, r30
    300c:	fc 93       	st	X, r31
    300e:	11 97       	sbiw	r26, 0x01	; 1
    3010:	86 81       	ldd	r24, Z+6	; 0x06
    3012:	97 81       	ldd	r25, Z+7	; 0x07
    3014:	12 96       	adiw	r26, 0x02	; 2
    3016:	8d 93       	st	X+, r24
    3018:	9c 93       	st	X, r25
    301a:	13 97       	sbiw	r26, 0x03	; 3
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	03 c0       	rjmp	.+6      	; 0x3026 <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    3020:	27 e0       	ldi	r18, 0x07	; 7
    3022:	01 c0       	rjmp	.+2      	; 0x3026 <f_open+0x2b8>
    3024:	24 e0       	ldi	r18, 0x04	; 4
}
    3026:	82 2f       	mov	r24, r18
    3028:	a4 96       	adiw	r28, 0x24	; 36
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	df 90       	pop	r13
    303c:	cf 90       	pop	r12
    303e:	bf 90       	pop	r11
    3040:	af 90       	pop	r10
    3042:	9f 90       	pop	r9
    3044:	8f 90       	pop	r8
    3046:	7f 90       	pop	r7
    3048:	6f 90       	pop	r6
    304a:	5f 90       	pop	r5
    304c:	08 95       	ret

0000304e <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    304e:	2f 92       	push	r2
    3050:	3f 92       	push	r3
    3052:	4f 92       	push	r4
    3054:	5f 92       	push	r5
    3056:	6f 92       	push	r6
    3058:	7f 92       	push	r7
    305a:	8f 92       	push	r8
    305c:	9f 92       	push	r9
    305e:	af 92       	push	r10
    3060:	bf 92       	push	r11
    3062:	cf 92       	push	r12
    3064:	df 92       	push	r13
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	00 d0       	rcall	.+0      	; 0x3074 <f_read+0x26>
    3074:	0f 92       	push	r0
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	8b 83       	std	Y+3, r24	; 0x03
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	16 2f       	mov	r17, r22
    3080:	07 2f       	mov	r16, r23
    3082:	4a 01       	movw	r8, r20
    3084:	29 83       	std	Y+1, r18	; 0x01
    3086:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    3088:	d9 01       	movw	r26, r18
    308a:	1d 92       	st	X+, r1
    308c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    308e:	fc 01       	movw	r30, r24
    3090:	62 81       	ldd	r22, Z+2	; 0x02
    3092:	73 81       	ldd	r23, Z+3	; 0x03
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <validate>
    309c:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    309e:	88 23       	and	r24, r24
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <f_read+0x56>
    30a2:	b4 c1       	rjmp	.+872    	; 0x340c <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    30a4:	ab 81       	ldd	r26, Y+3	; 0x03
    30a6:	bc 81       	ldd	r27, Y+4	; 0x04
    30a8:	14 96       	adiw	r26, 0x04	; 4
    30aa:	8c 91       	ld	r24, X
    30ac:	87 fd       	sbrc	r24, 7
    30ae:	66 c0       	rjmp	.+204    	; 0x317c <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    30b0:	80 fd       	sbrc	r24, 0
    30b2:	03 c0       	rjmp	.+6      	; 0x30ba <f_read+0x6c>
    30b4:	a7 e0       	ldi	r26, 0x07	; 7
    30b6:	7a 2e       	mov	r7, r26
    30b8:	a9 c1       	rjmp	.+850    	; 0x340c <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    30ba:	eb 81       	ldd	r30, Y+3	; 0x03
    30bc:	fc 81       	ldd	r31, Y+4	; 0x04
    30be:	22 85       	ldd	r18, Z+10	; 0x0a
    30c0:	33 85       	ldd	r19, Z+11	; 0x0b
    30c2:	44 85       	ldd	r20, Z+12	; 0x0c
    30c4:	55 85       	ldd	r21, Z+13	; 0x0d
    30c6:	86 81       	ldd	r24, Z+6	; 0x06
    30c8:	97 81       	ldd	r25, Z+7	; 0x07
    30ca:	a0 85       	ldd	r26, Z+8	; 0x08
    30cc:	b1 85       	ldd	r27, Z+9	; 0x09
    30ce:	28 1b       	sub	r18, r24
    30d0:	39 0b       	sbc	r19, r25
    30d2:	4a 0b       	sbc	r20, r26
    30d4:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    30d6:	c4 01       	movw	r24, r8
    30d8:	a0 e0       	ldi	r26, 0x00	; 0
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	28 17       	cp	r18, r24
    30de:	39 07       	cpc	r19, r25
    30e0:	4a 07       	cpc	r20, r26
    30e2:	5b 07       	cpc	r21, r27
    30e4:	08 f4       	brcc	.+2      	; 0x30e8 <f_read+0x9a>
    30e6:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    30e8:	81 2f       	mov	r24, r17
    30ea:	90 2f       	mov	r25, r16
    30ec:	9c 01       	movw	r18, r24
    30ee:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    30f0:	f0 e2       	ldi	r31, 0x20	; 32
    30f2:	2f 2e       	mov	r2, r31
    30f4:	31 2c       	mov	r3, r1
    30f6:	6b 81       	ldd	r22, Y+3	; 0x03
    30f8:	7c 81       	ldd	r23, Y+4	; 0x04
    30fa:	26 0e       	add	r2, r22
    30fc:	37 1e       	adc	r3, r23
    30fe:	82 c1       	rjmp	.+772    	; 0x3404 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3100:	ab 81       	ldd	r26, Y+3	; 0x03
    3102:	bc 81       	ldd	r27, Y+4	; 0x04
    3104:	16 96       	adiw	r26, 0x06	; 6
    3106:	2d 91       	ld	r18, X+
    3108:	3d 91       	ld	r19, X+
    310a:	4d 91       	ld	r20, X+
    310c:	5c 91       	ld	r21, X
    310e:	19 97       	sbiw	r26, 0x09	; 9
    3110:	da 01       	movw	r26, r20
    3112:	c9 01       	movw	r24, r18
    3114:	91 70       	andi	r25, 0x01	; 1
    3116:	a0 70       	andi	r26, 0x00	; 0
    3118:	b0 70       	andi	r27, 0x00	; 0
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	a1 05       	cpc	r26, r1
    311e:	b1 05       	cpc	r27, r1
    3120:	09 f0       	breq	.+2      	; 0x3124 <f_read+0xd6>
    3122:	2c c1       	rjmp	.+600    	; 0x337c <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3124:	ab 81       	ldd	r26, Y+3	; 0x03
    3126:	bc 81       	ldd	r27, Y+4	; 0x04
    3128:	ed 91       	ld	r30, X+
    312a:	fc 91       	ld	r31, X
    312c:	11 97       	sbiw	r26, 0x01	; 1
    312e:	15 96       	adiw	r26, 0x05	; 5
    3130:	9c 91       	ld	r25, X
    3132:	15 97       	sbiw	r26, 0x05	; 5
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	98 17       	cp	r25, r24
    3138:	a0 f1       	brcs	.+104    	; 0x31a2 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    313a:	21 15       	cp	r18, r1
    313c:	31 05       	cpc	r19, r1
    313e:	41 05       	cpc	r20, r1
    3140:	51 05       	cpc	r21, r1
    3142:	39 f4       	brne	.+14     	; 0x3152 <f_read+0x104>
    3144:	1e 96       	adiw	r26, 0x0e	; 14
    3146:	6d 91       	ld	r22, X+
    3148:	7d 91       	ld	r23, X+
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	51 97       	sbiw	r26, 0x11	; 17
    3150:	0b c0       	rjmp	.+22     	; 0x3168 <f_read+0x11a>
    3152:	ab 81       	ldd	r26, Y+3	; 0x03
    3154:	bc 81       	ldd	r27, Y+4	; 0x04
    3156:	52 96       	adiw	r26, 0x12	; 18
    3158:	4d 91       	ld	r20, X+
    315a:	5d 91       	ld	r21, X+
    315c:	6d 91       	ld	r22, X+
    315e:	7c 91       	ld	r23, X
    3160:	55 97       	sbiw	r26, 0x15	; 21
    3162:	cf 01       	movw	r24, r30
    3164:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3168:	62 30       	cpi	r22, 0x02	; 2
    316a:	71 05       	cpc	r23, r1
    316c:	81 05       	cpc	r24, r1
    316e:	91 05       	cpc	r25, r1
    3170:	40 f4       	brcc	.+16     	; 0x3182 <f_read+0x134>
    3172:	eb 81       	ldd	r30, Y+3	; 0x03
    3174:	fc 81       	ldd	r31, Y+4	; 0x04
    3176:	84 81       	ldd	r24, Z+4	; 0x04
    3178:	80 68       	ori	r24, 0x80	; 128
    317a:	84 83       	std	Z+4, r24	; 0x04
    317c:	e2 e0       	ldi	r30, 0x02	; 2
    317e:	7e 2e       	mov	r7, r30
    3180:	45 c1       	rjmp	.+650    	; 0x340c <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3182:	6f 3f       	cpi	r22, 0xFF	; 255
    3184:	ff ef       	ldi	r31, 0xFF	; 255
    3186:	7f 07       	cpc	r23, r31
    3188:	ff ef       	ldi	r31, 0xFF	; 255
    318a:	8f 07       	cpc	r24, r31
    318c:	ff ef       	ldi	r31, 0xFF	; 255
    318e:	9f 07       	cpc	r25, r31
    3190:	09 f4       	brne	.+2      	; 0x3194 <f_read+0x146>
    3192:	e0 c0       	rjmp	.+448    	; 0x3354 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    3194:	eb 81       	ldd	r30, Y+3	; 0x03
    3196:	fc 81       	ldd	r31, Y+4	; 0x04
    3198:	62 8b       	std	Z+18, r22	; 0x12
    319a:	73 8b       	std	Z+19, r23	; 0x13
    319c:	84 8b       	std	Z+20, r24	; 0x14
    319e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    31a0:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    31a2:	ab 81       	ldd	r26, Y+3	; 0x03
    31a4:	bc 81       	ldd	r27, Y+4	; 0x04
    31a6:	0d 91       	ld	r16, X+
    31a8:	1c 91       	ld	r17, X
    31aa:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    31ac:	52 96       	adiw	r26, 0x12	; 18
    31ae:	2d 91       	ld	r18, X+
    31b0:	3d 91       	ld	r19, X+
    31b2:	4d 91       	ld	r20, X+
    31b4:	5c 91       	ld	r21, X
    31b6:	55 97       	sbiw	r26, 0x15	; 21
    31b8:	22 50       	subi	r18, 0x02	; 2
    31ba:	30 40       	sbci	r19, 0x00	; 0
    31bc:	40 40       	sbci	r20, 0x00	; 0
    31be:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    31c0:	f8 01       	movw	r30, r16
    31c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    31c4:	93 8d       	ldd	r25, Z+27	; 0x1b
    31c6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    31c8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    31ca:	02 97       	sbiw	r24, 0x02	; 2
    31cc:	a1 09       	sbc	r26, r1
    31ce:	b1 09       	sbc	r27, r1
    31d0:	28 17       	cp	r18, r24
    31d2:	39 07       	cpc	r19, r25
    31d4:	4a 07       	cpc	r20, r26
    31d6:	5b 07       	cpc	r21, r27
    31d8:	b8 f4       	brcc	.+46     	; 0x3208 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    31da:	62 80       	ldd	r6, Z+2	; 0x02
    31dc:	66 2d       	mov	r22, r6
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    31e8:	9b 01       	movw	r18, r22
    31ea:	ac 01       	movw	r20, r24
    31ec:	f8 01       	movw	r30, r16
    31ee:	86 a1       	ldd	r24, Z+38	; 0x26
    31f0:	97 a1       	ldd	r25, Z+39	; 0x27
    31f2:	a0 a5       	ldd	r26, Z+40	; 0x28
    31f4:	b1 a5       	ldd	r27, Z+41	; 0x29
    31f6:	28 0f       	add	r18, r24
    31f8:	39 1f       	adc	r19, r25
    31fa:	4a 1f       	adc	r20, r26
    31fc:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    31fe:	21 15       	cp	r18, r1
    3200:	31 05       	cpc	r19, r1
    3202:	41 05       	cpc	r20, r1
    3204:	51 05       	cpc	r21, r1
    3206:	49 f4       	brne	.+18     	; 0x321a <f_read+0x1cc>
    3208:	ab 81       	ldd	r26, Y+3	; 0x03
    320a:	bc 81       	ldd	r27, Y+4	; 0x04
    320c:	14 96       	adiw	r26, 0x04	; 4
    320e:	8c 91       	ld	r24, X
    3210:	14 97       	sbiw	r26, 0x04	; 4
    3212:	80 68       	ori	r24, 0x80	; 128
    3214:	14 96       	adiw	r26, 0x04	; 4
    3216:	8c 93       	st	X, r24
    3218:	b1 cf       	rjmp	.-158    	; 0x317c <f_read+0x12e>
			sect += fp->csect;
    321a:	eb 81       	ldd	r30, Y+3	; 0x03
    321c:	fc 81       	ldd	r31, Y+4	; 0x04
    321e:	85 81       	ldd	r24, Z+5	; 0x05
    3220:	59 01       	movw	r10, r18
    3222:	6a 01       	movw	r12, r20
    3224:	a8 0e       	add	r10, r24
    3226:	b1 1c       	adc	r11, r1
    3228:	c1 1c       	adc	r12, r1
    322a:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    322c:	74 01       	movw	r14, r8
    322e:	ef 2c       	mov	r14, r15
    3230:	ff 24       	eor	r15, r15
    3232:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    3234:	e1 14       	cp	r14, r1
    3236:	f1 04       	cpc	r15, r1
    3238:	09 f4       	brne	.+2      	; 0x323c <f_read+0x1ee>
    323a:	53 c0       	rjmp	.+166    	; 0x32e2 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	c7 01       	movw	r24, r14
    3242:	82 0f       	add	r24, r18
    3244:	93 1f       	adc	r25, r19
    3246:	66 2d       	mov	r22, r6
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	68 17       	cp	r22, r24
    324c:	79 07       	cpc	r23, r25
    324e:	18 f4       	brcc	.+6      	; 0x3256 <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3250:	7b 01       	movw	r14, r22
    3252:	e2 1a       	sub	r14, r18
    3254:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    3256:	d8 01       	movw	r26, r16
    3258:	11 96       	adiw	r26, 0x01	; 1
    325a:	8c 91       	ld	r24, X
    325c:	b2 01       	movw	r22, r4
    325e:	a6 01       	movw	r20, r12
    3260:	95 01       	movw	r18, r10
    3262:	0e 2d       	mov	r16, r14
    3264:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    3268:	eb 81       	ldd	r30, Y+3	; 0x03
    326a:	fc 81       	ldd	r31, Y+4	; 0x04
    326c:	94 81       	ldd	r25, Z+4	; 0x04
    326e:	88 23       	and	r24, r24
    3270:	19 f0       	breq	.+6      	; 0x3278 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    3272:	90 68       	ori	r25, 0x80	; 128
    3274:	94 83       	std	Z+4, r25	; 0x04
    3276:	76 c0       	rjmp	.+236    	; 0x3364 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3278:	96 ff       	sbrs	r25, 6
    327a:	29 c0       	rjmp	.+82     	; 0x32ce <f_read+0x280>
    327c:	ab 81       	ldd	r26, Y+3	; 0x03
    327e:	bc 81       	ldd	r27, Y+4	; 0x04
    3280:	56 96       	adiw	r26, 0x16	; 22
    3282:	2d 91       	ld	r18, X+
    3284:	3d 91       	ld	r19, X+
    3286:	4d 91       	ld	r20, X+
    3288:	5c 91       	ld	r21, X
    328a:	59 97       	sbiw	r26, 0x19	; 25
    328c:	2a 19       	sub	r18, r10
    328e:	3b 09       	sbc	r19, r11
    3290:	4c 09       	sbc	r20, r12
    3292:	5d 09       	sbc	r21, r13
    3294:	c7 01       	movw	r24, r14
    3296:	a0 e0       	ldi	r26, 0x00	; 0
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	28 17       	cp	r18, r24
    329c:	39 07       	cpc	r19, r25
    329e:	4a 07       	cpc	r20, r26
    32a0:	5b 07       	cpc	r21, r27
    32a2:	a8 f4       	brcc	.+42     	; 0x32ce <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    32a4:	69 e0       	ldi	r22, 0x09	; 9
    32a6:	22 0f       	add	r18, r18
    32a8:	33 1f       	adc	r19, r19
    32aa:	44 1f       	adc	r20, r20
    32ac:	55 1f       	adc	r21, r21
    32ae:	6a 95       	dec	r22
    32b0:	d1 f7       	brne	.-12     	; 0x32a6 <f_read+0x258>
    32b2:	c2 01       	movw	r24, r4
    32b4:	82 0f       	add	r24, r18
    32b6:	93 1f       	adc	r25, r19
    32b8:	d1 01       	movw	r26, r2
    32ba:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    32bc:	9c 01       	movw	r18, r24
    32be:	20 50       	subi	r18, 0x00	; 0
    32c0:	3e 4f       	sbci	r19, 0xFE	; 254
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <f_read+0x27a>
    32c4:	8d 91       	ld	r24, X+
    32c6:	81 93       	st	Z+, r24
    32c8:	e2 17       	cp	r30, r18
    32ca:	f3 07       	cpc	r31, r19
    32cc:	d9 f7       	brne	.-10     	; 0x32c4 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    32ce:	eb 81       	ldd	r30, Y+3	; 0x03
    32d0:	fc 81       	ldd	r31, Y+4	; 0x04
    32d2:	85 81       	ldd	r24, Z+5	; 0x05
    32d4:	8e 0d       	add	r24, r14
    32d6:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    32d8:	b7 01       	movw	r22, r14
    32da:	76 2f       	mov	r23, r22
    32dc:	66 27       	eor	r22, r22
    32de:	77 0f       	add	r23, r23
    32e0:	74 c0       	rjmp	.+232    	; 0x33ca <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    32e2:	ab 81       	ldd	r26, Y+3	; 0x03
    32e4:	bc 81       	ldd	r27, Y+4	; 0x04
    32e6:	14 96       	adiw	r26, 0x04	; 4
    32e8:	8c 91       	ld	r24, X
    32ea:	14 97       	sbiw	r26, 0x04	; 4
    32ec:	86 ff       	sbrs	r24, 6
    32ee:	1b c0       	rjmp	.+54     	; 0x3326 <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    32f0:	56 96       	adiw	r26, 0x16	; 22
    32f2:	2d 91       	ld	r18, X+
    32f4:	3d 91       	ld	r19, X+
    32f6:	4d 91       	ld	r20, X+
    32f8:	5c 91       	ld	r21, X
    32fa:	59 97       	sbiw	r26, 0x19	; 25
    32fc:	f8 01       	movw	r30, r16
    32fe:	81 81       	ldd	r24, Z+1	; 0x01
    3300:	b1 01       	movw	r22, r2
    3302:	01 e0       	ldi	r16, 0x01	; 1
    3304:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    3308:	ab 81       	ldd	r26, Y+3	; 0x03
    330a:	bc 81       	ldd	r27, Y+4	; 0x04
    330c:	14 96       	adiw	r26, 0x04	; 4
    330e:	9c 91       	ld	r25, X
    3310:	14 97       	sbiw	r26, 0x04	; 4
    3312:	88 23       	and	r24, r24
    3314:	21 f0       	breq	.+8      	; 0x331e <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    3316:	90 68       	ori	r25, 0x80	; 128
    3318:	14 96       	adiw	r26, 0x04	; 4
    331a:	9c 93       	st	X, r25
    331c:	23 c0       	rjmp	.+70     	; 0x3364 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    331e:	9f 7b       	andi	r25, 0xBF	; 191
    3320:	eb 81       	ldd	r30, Y+3	; 0x03
    3322:	fc 81       	ldd	r31, Y+4	; 0x04
    3324:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    3326:	eb 81       	ldd	r30, Y+3	; 0x03
    3328:	fc 81       	ldd	r31, Y+4	; 0x04
    332a:	86 89       	ldd	r24, Z+22	; 0x16
    332c:	97 89       	ldd	r25, Z+23	; 0x17
    332e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3330:	b1 8d       	ldd	r27, Z+25	; 0x19
    3332:	8a 15       	cp	r24, r10
    3334:	9b 05       	cpc	r25, r11
    3336:	ac 05       	cpc	r26, r12
    3338:	bd 05       	cpc	r27, r13
    333a:	b9 f0       	breq	.+46     	; 0x336a <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    333c:	01 90       	ld	r0, Z+
    333e:	f0 81       	ld	r31, Z
    3340:	e0 2d       	mov	r30, r0
    3342:	81 81       	ldd	r24, Z+1	; 0x01
    3344:	b1 01       	movw	r22, r2
    3346:	a6 01       	movw	r20, r12
    3348:	95 01       	movw	r18, r10
    334a:	01 e0       	ldi	r16, 0x01	; 1
    334c:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    3350:	88 23       	and	r24, r24
    3352:	59 f0       	breq	.+22     	; 0x336a <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    3354:	ab 81       	ldd	r26, Y+3	; 0x03
    3356:	bc 81       	ldd	r27, Y+4	; 0x04
    3358:	14 96       	adiw	r26, 0x04	; 4
    335a:	8c 91       	ld	r24, X
    335c:	14 97       	sbiw	r26, 0x04	; 4
    335e:	80 68       	ori	r24, 0x80	; 128
    3360:	14 96       	adiw	r26, 0x04	; 4
    3362:	8c 93       	st	X, r24
    3364:	77 24       	eor	r7, r7
    3366:	73 94       	inc	r7
    3368:	51 c0       	rjmp	.+162    	; 0x340c <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    336a:	eb 81       	ldd	r30, Y+3	; 0x03
    336c:	fc 81       	ldd	r31, Y+4	; 0x04
    336e:	a6 8a       	std	Z+22, r10	; 0x16
    3370:	b7 8a       	std	Z+23, r11	; 0x17
    3372:	c0 8e       	std	Z+24, r12	; 0x18
    3374:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    3376:	85 81       	ldd	r24, Z+5	; 0x05
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    337c:	ab 81       	ldd	r26, Y+3	; 0x03
    337e:	bc 81       	ldd	r27, Y+4	; 0x04
    3380:	16 96       	adiw	r26, 0x06	; 6
    3382:	2d 91       	ld	r18, X+
    3384:	3d 91       	ld	r19, X+
    3386:	4d 91       	ld	r20, X+
    3388:	5c 91       	ld	r21, X
    338a:	19 97       	sbiw	r26, 0x09	; 9
    338c:	c9 01       	movw	r24, r18
    338e:	91 70       	andi	r25, 0x01	; 1
    3390:	e0 e0       	ldi	r30, 0x00	; 0
    3392:	f2 e0       	ldi	r31, 0x02	; 2
    3394:	e8 1b       	sub	r30, r24
    3396:	f9 0b       	sbc	r31, r25
    3398:	b4 01       	movw	r22, r8
    339a:	e8 15       	cp	r30, r8
    339c:	f9 05       	cpc	r31, r9
    339e:	08 f4       	brcc	.+2      	; 0x33a2 <f_read+0x354>
    33a0:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    33a2:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    33a4:	f9 01       	movw	r30, r18
    33a6:	f1 70       	andi	r31, 0x01	; 1
    33a8:	b0 96       	adiw	r30, 0x20	; 32
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	e8 0f       	add	r30, r24
    33b0:	f9 1f       	adc	r31, r25
    33b2:	92 01       	movw	r18, r4
    33b4:	04 c0       	rjmp	.+8      	; 0x33be <f_read+0x370>
	while (cnt--) *d++ = *s++;
    33b6:	81 91       	ld	r24, Z+
    33b8:	d9 01       	movw	r26, r18
    33ba:	8d 93       	st	X+, r24
    33bc:	9d 01       	movw	r18, r26
    33be:	01 50       	subi	r16, 0x01	; 1
    33c0:	10 40       	sbci	r17, 0x00	; 0
    33c2:	bf ef       	ldi	r27, 0xFF	; 255
    33c4:	0f 3f       	cpi	r16, 0xFF	; 255
    33c6:	1b 07       	cpc	r17, r27
    33c8:	b1 f7       	brne	.-20     	; 0x33b6 <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    33ca:	46 0e       	add	r4, r22
    33cc:	57 1e       	adc	r5, r23
    33ce:	cb 01       	movw	r24, r22
    33d0:	a0 e0       	ldi	r26, 0x00	; 0
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	eb 81       	ldd	r30, Y+3	; 0x03
    33d6:	fc 81       	ldd	r31, Y+4	; 0x04
    33d8:	26 81       	ldd	r18, Z+6	; 0x06
    33da:	37 81       	ldd	r19, Z+7	; 0x07
    33dc:	40 85       	ldd	r20, Z+8	; 0x08
    33de:	51 85       	ldd	r21, Z+9	; 0x09
    33e0:	28 0f       	add	r18, r24
    33e2:	39 1f       	adc	r19, r25
    33e4:	4a 1f       	adc	r20, r26
    33e6:	5b 1f       	adc	r21, r27
    33e8:	26 83       	std	Z+6, r18	; 0x06
    33ea:	37 83       	std	Z+7, r19	; 0x07
    33ec:	40 87       	std	Z+8, r20	; 0x08
    33ee:	51 87       	std	Z+9, r21	; 0x09
    33f0:	e9 81       	ldd	r30, Y+1	; 0x01
    33f2:	fa 81       	ldd	r31, Y+2	; 0x02
    33f4:	80 81       	ld	r24, Z
    33f6:	91 81       	ldd	r25, Z+1	; 0x01
    33f8:	86 0f       	add	r24, r22
    33fa:	97 1f       	adc	r25, r23
    33fc:	80 83       	st	Z, r24
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	86 1a       	sub	r8, r22
    3402:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    3404:	81 14       	cp	r8, r1
    3406:	91 04       	cpc	r9, r1
    3408:	09 f0       	breq	.+2      	; 0x340c <f_read+0x3be>
    340a:	7a ce       	rjmp	.-780    	; 0x3100 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    340c:	87 2d       	mov	r24, r7
    340e:	24 96       	adiw	r28, 0x04	; 4
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	df 90       	pop	r13
    3422:	cf 90       	pop	r12
    3424:	bf 90       	pop	r11
    3426:	af 90       	pop	r10
    3428:	9f 90       	pop	r9
    342a:	8f 90       	pop	r8
    342c:	7f 90       	pop	r7
    342e:	6f 90       	pop	r6
    3430:	5f 90       	pop	r5
    3432:	4f 90       	pop	r4
    3434:	3f 90       	pop	r3
    3436:	2f 90       	pop	r2
    3438:	08 95       	ret

0000343a <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    343a:	2f 92       	push	r2
    343c:	3f 92       	push	r3
    343e:	4f 92       	push	r4
    3440:	5f 92       	push	r5
    3442:	6f 92       	push	r6
    3444:	7f 92       	push	r7
    3446:	8f 92       	push	r8
    3448:	9f 92       	push	r9
    344a:	af 92       	push	r10
    344c:	bf 92       	push	r11
    344e:	cf 92       	push	r12
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <f_write+0x26>
    3460:	0f 92       	push	r0
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	8b 83       	std	Y+3, r24	; 0x03
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	16 2f       	mov	r17, r22
    346c:	07 2f       	mov	r16, r23
    346e:	4a 01       	movw	r8, r20
    3470:	29 83       	std	Y+1, r18	; 0x01
    3472:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    3474:	d9 01       	movw	r26, r18
    3476:	1d 92       	st	X+, r1
    3478:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    347a:	fc 01       	movw	r30, r24
    347c:	62 81       	ldd	r22, Z+2	; 0x02
    347e:	73 81       	ldd	r23, Z+3	; 0x03
    3480:	80 81       	ld	r24, Z
    3482:	91 81       	ldd	r25, Z+1	; 0x01
    3484:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <validate>
    3488:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    348a:	88 23       	and	r24, r24
    348c:	09 f0       	breq	.+2      	; 0x3490 <f_write+0x56>
    348e:	02 c2       	rjmp	.+1028   	; 0x3894 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3490:	ab 81       	ldd	r26, Y+3	; 0x03
    3492:	bc 81       	ldd	r27, Y+4	; 0x04
    3494:	14 96       	adiw	r26, 0x04	; 4
    3496:	8c 91       	ld	r24, X
    3498:	87 fd       	sbrc	r24, 7
    349a:	7c c0       	rjmp	.+248    	; 0x3594 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    349c:	81 fd       	sbrc	r24, 1
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <f_write+0x6c>
    34a0:	47 e0       	ldi	r20, 0x07	; 7
    34a2:	64 2e       	mov	r6, r20
    34a4:	f7 c1       	rjmp	.+1006   	; 0x3894 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    34a6:	eb 81       	ldd	r30, Y+3	; 0x03
    34a8:	fc 81       	ldd	r31, Y+4	; 0x04
    34aa:	22 85       	ldd	r18, Z+10	; 0x0a
    34ac:	33 85       	ldd	r19, Z+11	; 0x0b
    34ae:	44 85       	ldd	r20, Z+12	; 0x0c
    34b0:	55 85       	ldd	r21, Z+13	; 0x0d
    34b2:	c4 01       	movw	r24, r8
    34b4:	a0 e0       	ldi	r26, 0x00	; 0
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	82 0f       	add	r24, r18
    34ba:	93 1f       	adc	r25, r19
    34bc:	a4 1f       	adc	r26, r20
    34be:	b5 1f       	adc	r27, r21
    34c0:	82 17       	cp	r24, r18
    34c2:	93 07       	cpc	r25, r19
    34c4:	a4 07       	cpc	r26, r20
    34c6:	b5 07       	cpc	r27, r21
    34c8:	10 f4       	brcc	.+4      	; 0x34ce <f_write+0x94>
    34ca:	88 24       	eor	r8, r8
    34cc:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    34ce:	81 2f       	mov	r24, r17
    34d0:	90 2f       	mov	r25, r16
    34d2:	9c 01       	movw	r18, r24
    34d4:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    34d6:	30 e2       	ldi	r19, 0x20	; 32
    34d8:	23 2e       	mov	r2, r19
    34da:	31 2c       	mov	r3, r1
    34dc:	6b 81       	ldd	r22, Y+3	; 0x03
    34de:	7c 81       	ldd	r23, Y+4	; 0x04
    34e0:	26 0e       	add	r2, r22
    34e2:	37 1e       	adc	r3, r23
    34e4:	b2 c1       	rjmp	.+868    	; 0x384a <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    34e6:	ab 81       	ldd	r26, Y+3	; 0x03
    34e8:	bc 81       	ldd	r27, Y+4	; 0x04
    34ea:	16 96       	adiw	r26, 0x06	; 6
    34ec:	2d 91       	ld	r18, X+
    34ee:	3d 91       	ld	r19, X+
    34f0:	4d 91       	ld	r20, X+
    34f2:	5c 91       	ld	r21, X
    34f4:	19 97       	sbiw	r26, 0x09	; 9
    34f6:	da 01       	movw	r26, r20
    34f8:	c9 01       	movw	r24, r18
    34fa:	91 70       	andi	r25, 0x01	; 1
    34fc:	a0 70       	andi	r26, 0x00	; 0
    34fe:	b0 70       	andi	r27, 0x00	; 0
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	a1 05       	cpc	r26, r1
    3504:	b1 05       	cpc	r27, r1
    3506:	09 f0       	breq	.+2      	; 0x350a <f_write+0xd0>
    3508:	58 c1       	rjmp	.+688    	; 0x37ba <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    350a:	ab 81       	ldd	r26, Y+3	; 0x03
    350c:	bc 81       	ldd	r27, Y+4	; 0x04
    350e:	ed 91       	ld	r30, X+
    3510:	fc 91       	ld	r31, X
    3512:	11 97       	sbiw	r26, 0x01	; 1
    3514:	15 96       	adiw	r26, 0x05	; 5
    3516:	9c 91       	ld	r25, X
    3518:	15 97       	sbiw	r26, 0x05	; 5
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	98 17       	cp	r25, r24
    351e:	08 f4       	brcc	.+2      	; 0x3522 <f_write+0xe8>
    3520:	54 c0       	rjmp	.+168    	; 0x35ca <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    3522:	21 15       	cp	r18, r1
    3524:	31 05       	cpc	r19, r1
    3526:	41 05       	cpc	r20, r1
    3528:	51 05       	cpc	r21, r1
    352a:	c9 f4       	brne	.+50     	; 0x355e <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    352c:	1e 96       	adiw	r26, 0x0e	; 14
    352e:	6d 91       	ld	r22, X+
    3530:	7d 91       	ld	r23, X+
    3532:	8d 91       	ld	r24, X+
    3534:	9c 91       	ld	r25, X
    3536:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    3538:	61 15       	cp	r22, r1
    353a:	71 05       	cpc	r23, r1
    353c:	81 05       	cpc	r24, r1
    353e:	91 05       	cpc	r25, r1
    3540:	f9 f4       	brne	.+62     	; 0x3580 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3542:	cf 01       	movw	r24, r30
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	70 e0       	ldi	r23, 0x00	; 0
    354c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <create_chain>
    3550:	eb 81       	ldd	r30, Y+3	; 0x03
    3552:	fc 81       	ldd	r31, Y+4	; 0x04
    3554:	66 87       	std	Z+14, r22	; 0x0e
    3556:	77 87       	std	Z+15, r23	; 0x0f
    3558:	80 8b       	std	Z+16, r24	; 0x10
    355a:	91 8b       	std	Z+17, r25	; 0x11
    355c:	0b c0       	rjmp	.+22     	; 0x3574 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    355e:	ab 81       	ldd	r26, Y+3	; 0x03
    3560:	bc 81       	ldd	r27, Y+4	; 0x04
    3562:	52 96       	adiw	r26, 0x12	; 18
    3564:	4d 91       	ld	r20, X+
    3566:	5d 91       	ld	r21, X+
    3568:	6d 91       	ld	r22, X+
    356a:	7c 91       	ld	r23, X
    356c:	55 97       	sbiw	r26, 0x15	; 21
    356e:	cf 01       	movw	r24, r30
    3570:	0e 94 cc 0c 	call	0x1998	; 0x1998 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    3574:	61 15       	cp	r22, r1
    3576:	71 05       	cpc	r23, r1
    3578:	81 05       	cpc	r24, r1
    357a:	91 05       	cpc	r25, r1
    357c:	09 f4       	brne	.+2      	; 0x3580 <f_write+0x146>
    357e:	69 c1       	rjmp	.+722    	; 0x3852 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3580:	61 30       	cpi	r22, 0x01	; 1
    3582:	71 05       	cpc	r23, r1
    3584:	81 05       	cpc	r24, r1
    3586:	91 05       	cpc	r25, r1
    3588:	41 f4       	brne	.+16     	; 0x359a <f_write+0x160>
    358a:	eb 81       	ldd	r30, Y+3	; 0x03
    358c:	fc 81       	ldd	r31, Y+4	; 0x04
    358e:	84 81       	ldd	r24, Z+4	; 0x04
    3590:	80 68       	ori	r24, 0x80	; 128
    3592:	84 83       	std	Z+4, r24	; 0x04
    3594:	22 e0       	ldi	r18, 0x02	; 2
    3596:	62 2e       	mov	r6, r18
    3598:	7d c1       	rjmp	.+762    	; 0x3894 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    359a:	6f 3f       	cpi	r22, 0xFF	; 255
    359c:	ff ef       	ldi	r31, 0xFF	; 255
    359e:	7f 07       	cpc	r23, r31
    35a0:	ff ef       	ldi	r31, 0xFF	; 255
    35a2:	8f 07       	cpc	r24, r31
    35a4:	ff ef       	ldi	r31, 0xFF	; 255
    35a6:	9f 07       	cpc	r25, r31
    35a8:	49 f4       	brne	.+18     	; 0x35bc <f_write+0x182>
    35aa:	ab 81       	ldd	r26, Y+3	; 0x03
    35ac:	bc 81       	ldd	r27, Y+4	; 0x04
    35ae:	14 96       	adiw	r26, 0x04	; 4
    35b0:	8c 91       	ld	r24, X
    35b2:	14 97       	sbiw	r26, 0x04	; 4
    35b4:	80 68       	ori	r24, 0x80	; 128
    35b6:	14 96       	adiw	r26, 0x04	; 4
    35b8:	8c 93       	st	X, r24
    35ba:	ee c0       	rjmp	.+476    	; 0x3798 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    35bc:	eb 81       	ldd	r30, Y+3	; 0x03
    35be:	fc 81       	ldd	r31, Y+4	; 0x04
    35c0:	62 8b       	std	Z+18, r22	; 0x12
    35c2:	73 8b       	std	Z+19, r23	; 0x13
    35c4:	84 8b       	std	Z+20, r24	; 0x14
    35c6:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    35c8:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    35ca:	ab 81       	ldd	r26, Y+3	; 0x03
    35cc:	bc 81       	ldd	r27, Y+4	; 0x04
    35ce:	14 96       	adiw	r26, 0x04	; 4
    35d0:	8c 91       	ld	r24, X
    35d2:	14 97       	sbiw	r26, 0x04	; 4
    35d4:	86 ff       	sbrs	r24, 6
    35d6:	1b c0       	rjmp	.+54     	; 0x360e <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    35d8:	ed 91       	ld	r30, X+
    35da:	fc 91       	ld	r31, X
    35dc:	11 97       	sbiw	r26, 0x01	; 1
    35de:	56 96       	adiw	r26, 0x16	; 22
    35e0:	2d 91       	ld	r18, X+
    35e2:	3d 91       	ld	r19, X+
    35e4:	4d 91       	ld	r20, X+
    35e6:	5c 91       	ld	r21, X
    35e8:	59 97       	sbiw	r26, 0x19	; 25
    35ea:	81 81       	ldd	r24, Z+1	; 0x01
    35ec:	b1 01       	movw	r22, r2
    35ee:	01 e0       	ldi	r16, 0x01	; 1
    35f0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    35f4:	eb 81       	ldd	r30, Y+3	; 0x03
    35f6:	fc 81       	ldd	r31, Y+4	; 0x04
    35f8:	94 81       	ldd	r25, Z+4	; 0x04
    35fa:	88 23       	and	r24, r24
    35fc:	19 f0       	breq	.+6      	; 0x3604 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    35fe:	90 68       	ori	r25, 0x80	; 128
    3600:	94 83       	std	Z+4, r25	; 0x04
    3602:	ca c0       	rjmp	.+404    	; 0x3798 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    3604:	9f 7b       	andi	r25, 0xBF	; 191
    3606:	ab 81       	ldd	r26, Y+3	; 0x03
    3608:	bc 81       	ldd	r27, Y+4	; 0x04
    360a:	14 96       	adiw	r26, 0x04	; 4
    360c:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    360e:	eb 81       	ldd	r30, Y+3	; 0x03
    3610:	fc 81       	ldd	r31, Y+4	; 0x04
    3612:	00 81       	ld	r16, Z
    3614:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3616:	22 89       	ldd	r18, Z+18	; 0x12
    3618:	33 89       	ldd	r19, Z+19	; 0x13
    361a:	44 89       	ldd	r20, Z+20	; 0x14
    361c:	55 89       	ldd	r21, Z+21	; 0x15
    361e:	22 50       	subi	r18, 0x02	; 2
    3620:	30 40       	sbci	r19, 0x00	; 0
    3622:	40 40       	sbci	r20, 0x00	; 0
    3624:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3626:	f8 01       	movw	r30, r16
    3628:	82 8d       	ldd	r24, Z+26	; 0x1a
    362a:	93 8d       	ldd	r25, Z+27	; 0x1b
    362c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    362e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3630:	02 97       	sbiw	r24, 0x02	; 2
    3632:	a1 09       	sbc	r26, r1
    3634:	b1 09       	sbc	r27, r1
    3636:	28 17       	cp	r18, r24
    3638:	39 07       	cpc	r19, r25
    363a:	4a 07       	cpc	r20, r26
    363c:	5b 07       	cpc	r21, r27
    363e:	b8 f4       	brcc	.+46     	; 0x366e <f_write+0x234>
	return clst * fs->csize + fs->database;
    3640:	72 80       	ldd	r7, Z+2	; 0x02
    3642:	67 2d       	mov	r22, r7
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    364e:	9b 01       	movw	r18, r22
    3650:	ac 01       	movw	r20, r24
    3652:	f8 01       	movw	r30, r16
    3654:	86 a1       	ldd	r24, Z+38	; 0x26
    3656:	97 a1       	ldd	r25, Z+39	; 0x27
    3658:	a0 a5       	ldd	r26, Z+40	; 0x28
    365a:	b1 a5       	ldd	r27, Z+41	; 0x29
    365c:	28 0f       	add	r18, r24
    365e:	39 1f       	adc	r19, r25
    3660:	4a 1f       	adc	r20, r26
    3662:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3664:	21 15       	cp	r18, r1
    3666:	31 05       	cpc	r19, r1
    3668:	41 05       	cpc	r20, r1
    366a:	51 05       	cpc	r21, r1
    366c:	49 f4       	brne	.+18     	; 0x3680 <f_write+0x246>
    366e:	ab 81       	ldd	r26, Y+3	; 0x03
    3670:	bc 81       	ldd	r27, Y+4	; 0x04
    3672:	14 96       	adiw	r26, 0x04	; 4
    3674:	8c 91       	ld	r24, X
    3676:	14 97       	sbiw	r26, 0x04	; 4
    3678:	80 68       	ori	r24, 0x80	; 128
    367a:	14 96       	adiw	r26, 0x04	; 4
    367c:	8c 93       	st	X, r24
    367e:	8a cf       	rjmp	.-236    	; 0x3594 <f_write+0x15a>
			sect += fp->csect;
    3680:	eb 81       	ldd	r30, Y+3	; 0x03
    3682:	fc 81       	ldd	r31, Y+4	; 0x04
    3684:	85 81       	ldd	r24, Z+5	; 0x05
    3686:	69 01       	movw	r12, r18
    3688:	7a 01       	movw	r14, r20
    368a:	c8 0e       	add	r12, r24
    368c:	d1 1c       	adc	r13, r1
    368e:	e1 1c       	adc	r14, r1
    3690:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3692:	54 01       	movw	r10, r8
    3694:	ab 2c       	mov	r10, r11
    3696:	bb 24       	eor	r11, r11
    3698:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    369a:	a1 14       	cp	r10, r1
    369c:	b1 04       	cpc	r11, r1
    369e:	09 f4       	brne	.+2      	; 0x36a2 <f_write+0x268>
    36a0:	53 c0       	rjmp	.+166    	; 0x3748 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    36a2:	28 2f       	mov	r18, r24
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	c5 01       	movw	r24, r10
    36a8:	82 0f       	add	r24, r18
    36aa:	93 1f       	adc	r25, r19
    36ac:	67 2d       	mov	r22, r7
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	68 17       	cp	r22, r24
    36b2:	79 07       	cpc	r23, r25
    36b4:	18 f4       	brcc	.+6      	; 0x36bc <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    36b6:	5b 01       	movw	r10, r22
    36b8:	a2 1a       	sub	r10, r18
    36ba:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    36bc:	d8 01       	movw	r26, r16
    36be:	11 96       	adiw	r26, 0x01	; 1
    36c0:	8c 91       	ld	r24, X
    36c2:	b2 01       	movw	r22, r4
    36c4:	a7 01       	movw	r20, r14
    36c6:	96 01       	movw	r18, r12
    36c8:	0a 2d       	mov	r16, r10
    36ca:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    36ce:	88 23       	and	r24, r24
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <f_write+0x29a>
    36d2:	5d c0       	rjmp	.+186    	; 0x378e <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    36d4:	ab 81       	ldd	r26, Y+3	; 0x03
    36d6:	bc 81       	ldd	r27, Y+4	; 0x04
    36d8:	56 96       	adiw	r26, 0x16	; 22
    36da:	2d 91       	ld	r18, X+
    36dc:	3d 91       	ld	r19, X+
    36de:	4d 91       	ld	r20, X+
    36e0:	5c 91       	ld	r21, X
    36e2:	59 97       	sbiw	r26, 0x19	; 25
    36e4:	2c 19       	sub	r18, r12
    36e6:	3d 09       	sbc	r19, r13
    36e8:	4e 09       	sbc	r20, r14
    36ea:	5f 09       	sbc	r21, r15
    36ec:	c5 01       	movw	r24, r10
    36ee:	a0 e0       	ldi	r26, 0x00	; 0
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	28 17       	cp	r18, r24
    36f4:	39 07       	cpc	r19, r25
    36f6:	4a 07       	cpc	r20, r26
    36f8:	5b 07       	cpc	r21, r27
    36fa:	c8 f4       	brcc	.+50     	; 0x372e <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    36fc:	19 e0       	ldi	r17, 0x09	; 9
    36fe:	22 0f       	add	r18, r18
    3700:	33 1f       	adc	r19, r19
    3702:	44 1f       	adc	r20, r20
    3704:	55 1f       	adc	r21, r21
    3706:	1a 95       	dec	r17
    3708:	d1 f7       	brne	.-12     	; 0x36fe <f_write+0x2c4>
    370a:	f2 01       	movw	r30, r4
    370c:	e2 0f       	add	r30, r18
    370e:	f3 1f       	adc	r31, r19
    3710:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    3712:	9f 01       	movw	r18, r30
    3714:	20 50       	subi	r18, 0x00	; 0
    3716:	3e 4f       	sbci	r19, 0xFE	; 254
    3718:	02 c0       	rjmp	.+4      	; 0x371e <f_write+0x2e4>
    371a:	81 91       	ld	r24, Z+
    371c:	8d 93       	st	X+, r24
    371e:	e2 17       	cp	r30, r18
    3720:	f3 07       	cpc	r31, r19
    3722:	d9 f7       	brne	.-10     	; 0x371a <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    3724:	eb 81       	ldd	r30, Y+3	; 0x03
    3726:	fc 81       	ldd	r31, Y+4	; 0x04
    3728:	84 81       	ldd	r24, Z+4	; 0x04
    372a:	8f 7b       	andi	r24, 0xBF	; 191
    372c:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    372e:	ab 81       	ldd	r26, Y+3	; 0x03
    3730:	bc 81       	ldd	r27, Y+4	; 0x04
    3732:	15 96       	adiw	r26, 0x05	; 5
    3734:	8c 91       	ld	r24, X
    3736:	15 97       	sbiw	r26, 0x05	; 5
    3738:	8a 0d       	add	r24, r10
    373a:	15 96       	adiw	r26, 0x05	; 5
    373c:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    373e:	b5 01       	movw	r22, r10
    3740:	76 2f       	mov	r23, r22
    3742:	66 27       	eor	r22, r22
    3744:	77 0f       	add	r23, r23
    3746:	64 c0       	rjmp	.+200    	; 0x3810 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3748:	eb 81       	ldd	r30, Y+3	; 0x03
    374a:	fc 81       	ldd	r31, Y+4	; 0x04
    374c:	86 89       	ldd	r24, Z+22	; 0x16
    374e:	97 89       	ldd	r25, Z+23	; 0x17
    3750:	a0 8d       	ldd	r26, Z+24	; 0x18
    3752:	b1 8d       	ldd	r27, Z+25	; 0x19
    3754:	8c 15       	cp	r24, r12
    3756:	9d 05       	cpc	r25, r13
    3758:	ae 05       	cpc	r26, r14
    375a:	bf 05       	cpc	r27, r15
    375c:	01 f1       	breq	.+64     	; 0x379e <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    375e:	26 81       	ldd	r18, Z+6	; 0x06
    3760:	37 81       	ldd	r19, Z+7	; 0x07
    3762:	40 85       	ldd	r20, Z+8	; 0x08
    3764:	51 85       	ldd	r21, Z+9	; 0x09
    3766:	82 85       	ldd	r24, Z+10	; 0x0a
    3768:	93 85       	ldd	r25, Z+11	; 0x0b
    376a:	a4 85       	ldd	r26, Z+12	; 0x0c
    376c:	b5 85       	ldd	r27, Z+13	; 0x0d
    376e:	28 17       	cp	r18, r24
    3770:	39 07       	cpc	r19, r25
    3772:	4a 07       	cpc	r20, r26
    3774:	5b 07       	cpc	r21, r27
    3776:	98 f4       	brcc	.+38     	; 0x379e <f_write+0x364>
    3778:	d8 01       	movw	r26, r16
    377a:	11 96       	adiw	r26, 0x01	; 1
    377c:	8c 91       	ld	r24, X
    377e:	b1 01       	movw	r22, r2
    3780:	a7 01       	movw	r20, r14
    3782:	96 01       	movw	r18, r12
    3784:	01 e0       	ldi	r16, 0x01	; 1
    3786:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    378a:	88 23       	and	r24, r24
    378c:	41 f0       	breq	.+16     	; 0x379e <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    378e:	eb 81       	ldd	r30, Y+3	; 0x03
    3790:	fc 81       	ldd	r31, Y+4	; 0x04
    3792:	84 81       	ldd	r24, Z+4	; 0x04
    3794:	80 68       	ori	r24, 0x80	; 128
    3796:	84 83       	std	Z+4, r24	; 0x04
    3798:	66 24       	eor	r6, r6
    379a:	63 94       	inc	r6
    379c:	7b c0       	rjmp	.+246    	; 0x3894 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    379e:	ab 81       	ldd	r26, Y+3	; 0x03
    37a0:	bc 81       	ldd	r27, Y+4	; 0x04
    37a2:	56 96       	adiw	r26, 0x16	; 22
    37a4:	cd 92       	st	X+, r12
    37a6:	dd 92       	st	X+, r13
    37a8:	ed 92       	st	X+, r14
    37aa:	fc 92       	st	X, r15
    37ac:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    37ae:	15 96       	adiw	r26, 0x05	; 5
    37b0:	8c 91       	ld	r24, X
    37b2:	15 97       	sbiw	r26, 0x05	; 5
    37b4:	8f 5f       	subi	r24, 0xFF	; 255
    37b6:	15 96       	adiw	r26, 0x05	; 5
    37b8:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    37ba:	eb 81       	ldd	r30, Y+3	; 0x03
    37bc:	fc 81       	ldd	r31, Y+4	; 0x04
    37be:	26 81       	ldd	r18, Z+6	; 0x06
    37c0:	37 81       	ldd	r19, Z+7	; 0x07
    37c2:	40 85       	ldd	r20, Z+8	; 0x08
    37c4:	51 85       	ldd	r21, Z+9	; 0x09
    37c6:	c9 01       	movw	r24, r18
    37c8:	91 70       	andi	r25, 0x01	; 1
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	72 e0       	ldi	r23, 0x02	; 2
    37ce:	68 1b       	sub	r22, r24
    37d0:	79 0b       	sbc	r23, r25
    37d2:	cb 01       	movw	r24, r22
    37d4:	b4 01       	movw	r22, r8
    37d6:	88 15       	cp	r24, r8
    37d8:	99 05       	cpc	r25, r9
    37da:	08 f4       	brcc	.+2      	; 0x37de <f_write+0x3a4>
    37dc:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    37de:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    37e0:	f9 01       	movw	r30, r18
    37e2:	f1 70       	andi	r31, 0x01	; 1
    37e4:	b0 96       	adiw	r30, 0x20	; 32
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	e8 0f       	add	r30, r24
    37ec:	f9 1f       	adc	r31, r25
    37ee:	92 01       	movw	r18, r4
    37f0:	04 c0       	rjmp	.+8      	; 0x37fa <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    37f2:	d9 01       	movw	r26, r18
    37f4:	8d 91       	ld	r24, X+
    37f6:	9d 01       	movw	r18, r26
    37f8:	81 93       	st	Z+, r24
    37fa:	01 50       	subi	r16, 0x01	; 1
    37fc:	10 40       	sbci	r17, 0x00	; 0
    37fe:	bf ef       	ldi	r27, 0xFF	; 255
    3800:	0f 3f       	cpi	r16, 0xFF	; 255
    3802:	1b 07       	cpc	r17, r27
    3804:	b1 f7       	brne	.-20     	; 0x37f2 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    3806:	eb 81       	ldd	r30, Y+3	; 0x03
    3808:	fc 81       	ldd	r31, Y+4	; 0x04
    380a:	84 81       	ldd	r24, Z+4	; 0x04
    380c:	80 64       	ori	r24, 0x40	; 64
    380e:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3810:	46 0e       	add	r4, r22
    3812:	57 1e       	adc	r5, r23
    3814:	cb 01       	movw	r24, r22
    3816:	a0 e0       	ldi	r26, 0x00	; 0
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	eb 81       	ldd	r30, Y+3	; 0x03
    381c:	fc 81       	ldd	r31, Y+4	; 0x04
    381e:	26 81       	ldd	r18, Z+6	; 0x06
    3820:	37 81       	ldd	r19, Z+7	; 0x07
    3822:	40 85       	ldd	r20, Z+8	; 0x08
    3824:	51 85       	ldd	r21, Z+9	; 0x09
    3826:	28 0f       	add	r18, r24
    3828:	39 1f       	adc	r19, r25
    382a:	4a 1f       	adc	r20, r26
    382c:	5b 1f       	adc	r21, r27
    382e:	26 83       	std	Z+6, r18	; 0x06
    3830:	37 83       	std	Z+7, r19	; 0x07
    3832:	40 87       	std	Z+8, r20	; 0x08
    3834:	51 87       	std	Z+9, r21	; 0x09
    3836:	e9 81       	ldd	r30, Y+1	; 0x01
    3838:	fa 81       	ldd	r31, Y+2	; 0x02
    383a:	80 81       	ld	r24, Z
    383c:	91 81       	ldd	r25, Z+1	; 0x01
    383e:	86 0f       	add	r24, r22
    3840:	97 1f       	adc	r25, r23
    3842:	80 83       	st	Z, r24
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	86 1a       	sub	r8, r22
    3848:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    384a:	81 14       	cp	r8, r1
    384c:	91 04       	cpc	r9, r1
    384e:	09 f0       	breq	.+2      	; 0x3852 <f_write+0x418>
    3850:	4a ce       	rjmp	.-876    	; 0x34e6 <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3852:	ab 81       	ldd	r26, Y+3	; 0x03
    3854:	bc 81       	ldd	r27, Y+4	; 0x04
    3856:	16 96       	adiw	r26, 0x06	; 6
    3858:	2d 91       	ld	r18, X+
    385a:	3d 91       	ld	r19, X+
    385c:	4d 91       	ld	r20, X+
    385e:	5c 91       	ld	r21, X
    3860:	19 97       	sbiw	r26, 0x09	; 9
    3862:	1a 96       	adiw	r26, 0x0a	; 10
    3864:	8d 91       	ld	r24, X+
    3866:	9d 91       	ld	r25, X+
    3868:	0d 90       	ld	r0, X+
    386a:	bc 91       	ld	r27, X
    386c:	a0 2d       	mov	r26, r0
    386e:	82 17       	cp	r24, r18
    3870:	93 07       	cpc	r25, r19
    3872:	a4 07       	cpc	r26, r20
    3874:	b5 07       	cpc	r27, r21
    3876:	30 f4       	brcc	.+12     	; 0x3884 <f_write+0x44a>
    3878:	eb 81       	ldd	r30, Y+3	; 0x03
    387a:	fc 81       	ldd	r31, Y+4	; 0x04
    387c:	22 87       	std	Z+10, r18	; 0x0a
    387e:	33 87       	std	Z+11, r19	; 0x0b
    3880:	44 87       	std	Z+12, r20	; 0x0c
    3882:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    3884:	ab 81       	ldd	r26, Y+3	; 0x03
    3886:	bc 81       	ldd	r27, Y+4	; 0x04
    3888:	14 96       	adiw	r26, 0x04	; 4
    388a:	8c 91       	ld	r24, X
    388c:	14 97       	sbiw	r26, 0x04	; 4
    388e:	80 62       	ori	r24, 0x20	; 32
    3890:	14 96       	adiw	r26, 0x04	; 4
    3892:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    3894:	86 2d       	mov	r24, r6
    3896:	24 96       	adiw	r28, 0x04	; 4
    3898:	cd bf       	out	0x3d, r28	; 61
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	bf 90       	pop	r11
    38ae:	af 90       	pop	r10
    38b0:	9f 90       	pop	r9
    38b2:	8f 90       	pop	r8
    38b4:	7f 90       	pop	r7
    38b6:	6f 90       	pop	r6
    38b8:	5f 90       	pop	r5
    38ba:	4f 90       	pop	r4
    38bc:	3f 90       	pop	r3
    38be:	2f 90       	pop	r2
    38c0:	08 95       	ret

000038c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    38c2:	0f 93       	push	r16
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    38ca:	6a 81       	ldd	r22, Y+2	; 0x02
    38cc:	7b 81       	ldd	r23, Y+3	; 0x03
    38ce:	88 81       	ld	r24, Y
    38d0:	99 81       	ldd	r25, Y+1	; 0x01
    38d2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <validate>
    38d6:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    38d8:	88 23       	and	r24, r24
    38da:	09 f0       	breq	.+2      	; 0x38de <f_sync+0x1c>
    38dc:	65 c0       	rjmp	.+202    	; 0x39a8 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    38de:	8c 81       	ldd	r24, Y+4	; 0x04
    38e0:	85 ff       	sbrs	r24, 5
    38e2:	62 c0       	rjmp	.+196    	; 0x39a8 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    38e4:	86 ff       	sbrs	r24, 6
    38e6:	14 c0       	rjmp	.+40     	; 0x3910 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    38e8:	e8 81       	ld	r30, Y
    38ea:	f9 81       	ldd	r31, Y+1	; 0x01
    38ec:	be 01       	movw	r22, r28
    38ee:	60 5e       	subi	r22, 0xE0	; 224
    38f0:	7f 4f       	sbci	r23, 0xFF	; 255
    38f2:	2e 89       	ldd	r18, Y+22	; 0x16
    38f4:	3f 89       	ldd	r19, Y+23	; 0x17
    38f6:	48 8d       	ldd	r20, Y+24	; 0x18
    38f8:	59 8d       	ldd	r21, Y+25	; 0x19
    38fa:	81 81       	ldd	r24, Z+1	; 0x01
    38fc:	01 e0       	ldi	r16, 0x01	; 1
    38fe:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    3902:	88 23       	and	r24, r24
    3904:	11 f0       	breq	.+4      	; 0x390a <f_sync+0x48>
    3906:	91 e0       	ldi	r25, 0x01	; 1
    3908:	4f c0       	rjmp	.+158    	; 0x39a8 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    390a:	8c 81       	ldd	r24, Y+4	; 0x04
    390c:	8f 7b       	andi	r24, 0xBF	; 191
    390e:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3910:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3912:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3914:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3916:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3918:	88 81       	ld	r24, Y
    391a:	99 81       	ldd	r25, Y+1	; 0x01
    391c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    3920:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3922:	88 23       	and	r24, r24
    3924:	09 f0       	breq	.+2      	; 0x3928 <f_sync+0x66>
    3926:	40 c0       	rjmp	.+128    	; 0x39a8 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3928:	ee 8d       	ldd	r30, Y+30	; 0x1e
    392a:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    392c:	83 85       	ldd	r24, Z+11	; 0x0b
    392e:	80 62       	ori	r24, 0x20	; 32
    3930:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3932:	8a 85       	ldd	r24, Y+10	; 0x0a
    3934:	84 8f       	std	Z+28, r24	; 0x1c
    3936:	8b 85       	ldd	r24, Y+11	; 0x0b
    3938:	85 8f       	std	Z+29, r24	; 0x1d
    393a:	8a 85       	ldd	r24, Y+10	; 0x0a
    393c:	9b 85       	ldd	r25, Y+11	; 0x0b
    393e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3940:	bd 85       	ldd	r27, Y+13	; 0x0d
    3942:	cd 01       	movw	r24, r26
    3944:	aa 27       	eor	r26, r26
    3946:	bb 27       	eor	r27, r27
    3948:	86 8f       	std	Z+30, r24	; 0x1e
    394a:	8a 85       	ldd	r24, Y+10	; 0x0a
    394c:	9b 85       	ldd	r25, Y+11	; 0x0b
    394e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3950:	bd 85       	ldd	r27, Y+13	; 0x0d
    3952:	8b 2f       	mov	r24, r27
    3954:	99 27       	eor	r25, r25
    3956:	aa 27       	eor	r26, r26
    3958:	bb 27       	eor	r27, r27
    395a:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    395c:	8e 85       	ldd	r24, Y+14	; 0x0e
    395e:	82 8f       	std	Z+26, r24	; 0x1a
    3960:	8f 85       	ldd	r24, Y+15	; 0x0f
    3962:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    3964:	8e 85       	ldd	r24, Y+14	; 0x0e
    3966:	9f 85       	ldd	r25, Y+15	; 0x0f
    3968:	a8 89       	ldd	r26, Y+16	; 0x10
    396a:	b9 89       	ldd	r27, Y+17	; 0x11
    396c:	cd 01       	movw	r24, r26
    396e:	aa 27       	eor	r26, r26
    3970:	bb 27       	eor	r27, r27
    3972:	84 8b       	std	Z+20, r24	; 0x14
    3974:	8e 85       	ldd	r24, Y+14	; 0x0e
    3976:	9f 85       	ldd	r25, Y+15	; 0x0f
    3978:	a8 89       	ldd	r26, Y+16	; 0x10
    397a:	b9 89       	ldd	r27, Y+17	; 0x11
    397c:	cd 01       	movw	r24, r26
    397e:	aa 27       	eor	r26, r26
    3980:	bb 27       	eor	r27, r27
    3982:	89 2f       	mov	r24, r25
    3984:	99 27       	eor	r25, r25
    3986:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    3988:	16 8a       	std	Z+22, r1	; 0x16
    398a:	17 8a       	std	Z+23, r1	; 0x17
    398c:	10 8e       	std	Z+24, r1	; 0x18
    398e:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    3990:	8c 81       	ldd	r24, Y+4	; 0x04
    3992:	8f 7d       	andi	r24, 0xDF	; 223
    3994:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3996:	e8 81       	ld	r30, Y
    3998:	f9 81       	ldd	r31, Y+1	; 0x01
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    399e:	88 81       	ld	r24, Y
    39a0:	99 81       	ldd	r25, Y+1	; 0x01
    39a2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sync>
    39a6:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    39a8:	89 2f       	mov	r24, r25
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	0f 91       	pop	r16
    39b0:	08 95       	ret

000039b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    39b8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    39bc:	88 23       	and	r24, r24
    39be:	11 f4       	brne	.+4      	; 0x39c4 <f_close+0x12>
    39c0:	18 82       	st	Y, r1
    39c2:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	08 95       	ret

000039ca <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    39ca:	2f 92       	push	r2
    39cc:	3f 92       	push	r3
    39ce:	4f 92       	push	r4
    39d0:	5f 92       	push	r5
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	28 97       	sbiw	r28, 0x08	; 8
    39f0:	cd bf       	out	0x3d, r28	; 61
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	8f 83       	std	Y+7, r24	; 0x07
    39f6:	98 87       	std	Y+8, r25	; 0x08
    39f8:	3a 01       	movw	r6, r20
    39fa:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    39fc:	dc 01       	movw	r26, r24
    39fe:	12 96       	adiw	r26, 0x02	; 2
    3a00:	6d 91       	ld	r22, X+
    3a02:	7c 91       	ld	r23, X
    3a04:	13 97       	sbiw	r26, 0x03	; 3
    3a06:	8d 91       	ld	r24, X+
    3a08:	9c 91       	ld	r25, X
    3a0a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <validate>
    3a0e:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3a10:	88 23       	and	r24, r24
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <f_lseek+0x4c>
    3a14:	f3 c1       	rjmp	.+998    	; 0x3dfc <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3a16:	ef 81       	ldd	r30, Y+7	; 0x07
    3a18:	f8 85       	ldd	r31, Y+8	; 0x08
    3a1a:	84 81       	ldd	r24, Z+4	; 0x04
    3a1c:	87 fd       	sbrc	r24, 7
    3a1e:	98 c0       	rjmp	.+304    	; 0x3b50 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3a20:	af 81       	ldd	r26, Y+7	; 0x07
    3a22:	b8 85       	ldd	r27, Y+8	; 0x08
    3a24:	1a 96       	adiw	r26, 0x0a	; 10
    3a26:	ad 90       	ld	r10, X+
    3a28:	bd 90       	ld	r11, X+
    3a2a:	cd 90       	ld	r12, X+
    3a2c:	dc 90       	ld	r13, X
    3a2e:	1d 97       	sbiw	r26, 0x0d	; 13
    3a30:	a6 14       	cp	r10, r6
    3a32:	b7 04       	cpc	r11, r7
    3a34:	c8 04       	cpc	r12, r8
    3a36:	d9 04       	cpc	r13, r9
    3a38:	10 f4       	brcc	.+4      	; 0x3a3e <f_lseek+0x74>
    3a3a:	81 ff       	sbrs	r24, 1
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <f_lseek+0x78>
    3a3e:	64 01       	movw	r12, r8
    3a40:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3a42:	ef 81       	ldd	r30, Y+7	; 0x07
    3a44:	f8 85       	ldd	r31, Y+8	; 0x08
    3a46:	26 81       	ldd	r18, Z+6	; 0x06
    3a48:	37 81       	ldd	r19, Z+7	; 0x07
    3a4a:	40 85       	ldd	r20, Z+8	; 0x08
    3a4c:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3a4e:	16 82       	std	Z+6, r1	; 0x06
    3a50:	17 82       	std	Z+7, r1	; 0x07
    3a52:	10 86       	std	Z+8, r1	; 0x08
    3a54:	11 86       	std	Z+9, r1	; 0x09
    3a56:	8f ef       	ldi	r24, 0xFF	; 255
    3a58:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3a5a:	a1 14       	cp	r10, r1
    3a5c:	b1 04       	cpc	r11, r1
    3a5e:	c1 04       	cpc	r12, r1
    3a60:	d1 04       	cpc	r13, r1
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <f_lseek+0x9c>
    3a64:	5f c1       	rjmp	.+702    	; 0x3d24 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3a66:	01 90       	ld	r0, Z+
    3a68:	f0 81       	ld	r31, Z
    3a6a:	e0 2d       	mov	r30, r0
    3a6c:	e9 83       	std	Y+1, r30	; 0x01
    3a6e:	fa 83       	std	Y+2, r31	; 0x02
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	68 2e       	mov	r6, r24
    3a74:	77 24       	eor	r7, r7
    3a76:	88 24       	eor	r8, r8
    3a78:	99 24       	eor	r9, r9
    3a7a:	89 e0       	ldi	r24, 0x09	; 9
    3a7c:	66 0c       	add	r6, r6
    3a7e:	77 1c       	adc	r7, r7
    3a80:	88 1c       	adc	r8, r8
    3a82:	99 1c       	adc	r9, r9
    3a84:	8a 95       	dec	r24
    3a86:	d1 f7       	brne	.-12     	; 0x3a7c <f_lseek+0xb2>
		if (ifptr > 0 &&
    3a88:	21 15       	cp	r18, r1
    3a8a:	31 05       	cpc	r19, r1
    3a8c:	41 05       	cpc	r20, r1
    3a8e:	51 05       	cpc	r21, r1
    3a90:	f1 f1       	breq	.+124    	; 0x3b0e <f_lseek+0x144>
    3a92:	19 01       	movw	r2, r18
    3a94:	2a 01       	movw	r4, r20
    3a96:	08 94       	sec
    3a98:	21 08       	sbc	r2, r1
    3a9a:	31 08       	sbc	r3, r1
    3a9c:	41 08       	sbc	r4, r1
    3a9e:	51 08       	sbc	r5, r1
    3aa0:	c6 01       	movw	r24, r12
    3aa2:	b5 01       	movw	r22, r10
    3aa4:	61 50       	subi	r22, 0x01	; 1
    3aa6:	70 40       	sbci	r23, 0x00	; 0
    3aa8:	80 40       	sbci	r24, 0x00	; 0
    3aaa:	90 40       	sbci	r25, 0x00	; 0
    3aac:	a4 01       	movw	r20, r8
    3aae:	93 01       	movw	r18, r6
    3ab0:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    3ab4:	2b 83       	std	Y+3, r18	; 0x03
    3ab6:	3c 83       	std	Y+4, r19	; 0x04
    3ab8:	4d 83       	std	Y+5, r20	; 0x05
    3aba:	5e 83       	std	Y+6, r21	; 0x06
    3abc:	c2 01       	movw	r24, r4
    3abe:	b1 01       	movw	r22, r2
    3ac0:	a4 01       	movw	r20, r8
    3ac2:	93 01       	movw	r18, r6
    3ac4:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aca:	9c 81       	ldd	r25, Y+4	; 0x04
    3acc:	ad 81       	ldd	r26, Y+5	; 0x05
    3ace:	be 81       	ldd	r27, Y+6	; 0x06
    3ad0:	82 17       	cp	r24, r18
    3ad2:	93 07       	cpc	r25, r19
    3ad4:	a4 07       	cpc	r26, r20
    3ad6:	b5 07       	cpc	r27, r21
    3ad8:	d0 f0       	brcs	.+52     	; 0x3b0e <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3ada:	88 27       	eor	r24, r24
    3adc:	99 27       	eor	r25, r25
    3ade:	dc 01       	movw	r26, r24
    3ae0:	86 19       	sub	r24, r6
    3ae2:	97 09       	sbc	r25, r7
    3ae4:	a8 09       	sbc	r26, r8
    3ae6:	b9 09       	sbc	r27, r9
    3ae8:	82 21       	and	r24, r2
    3aea:	93 21       	and	r25, r3
    3aec:	a4 21       	and	r26, r4
    3aee:	b5 21       	and	r27, r5
    3af0:	ef 81       	ldd	r30, Y+7	; 0x07
    3af2:	f8 85       	ldd	r31, Y+8	; 0x08
    3af4:	86 83       	std	Z+6, r24	; 0x06
    3af6:	97 83       	std	Z+7, r25	; 0x07
    3af8:	a0 87       	std	Z+8, r26	; 0x08
    3afa:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3afc:	a8 1a       	sub	r10, r24
    3afe:	b9 0a       	sbc	r11, r25
    3b00:	ca 0a       	sbc	r12, r26
    3b02:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3b04:	42 89       	ldd	r20, Z+18	; 0x12
    3b06:	53 89       	ldd	r21, Z+19	; 0x13
    3b08:	64 89       	ldd	r22, Z+20	; 0x14
    3b0a:	75 89       	ldd	r23, Z+21	; 0x15
    3b0c:	39 c0       	rjmp	.+114    	; 0x3b80 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3b0e:	af 81       	ldd	r26, Y+7	; 0x07
    3b10:	b8 85       	ldd	r27, Y+8	; 0x08
    3b12:	1e 96       	adiw	r26, 0x0e	; 14
    3b14:	4d 91       	ld	r20, X+
    3b16:	5d 91       	ld	r21, X+
    3b18:	6d 91       	ld	r22, X+
    3b1a:	7c 91       	ld	r23, X
    3b1c:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3b1e:	41 15       	cp	r20, r1
    3b20:	51 05       	cpc	r21, r1
    3b22:	61 05       	cpc	r22, r1
    3b24:	71 05       	cpc	r23, r1
    3b26:	21 f5       	brne	.+72     	; 0x3b70 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	60 e0       	ldi	r22, 0x00	; 0
    3b32:	70 e0       	ldi	r23, 0x00	; 0
    3b34:	0e 94 cc 0c 	call	0x1998	; 0x1998 <create_chain>
    3b38:	ab 01       	movw	r20, r22
    3b3a:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3b3c:	41 30       	cpi	r20, 0x01	; 1
    3b3e:	51 05       	cpc	r21, r1
    3b40:	61 05       	cpc	r22, r1
    3b42:	71 05       	cpc	r23, r1
    3b44:	39 f4       	brne	.+14     	; 0x3b54 <f_lseek+0x18a>
    3b46:	ef 81       	ldd	r30, Y+7	; 0x07
    3b48:	f8 85       	ldd	r31, Y+8	; 0x08
    3b4a:	84 81       	ldd	r24, Z+4	; 0x04
    3b4c:	80 68       	ori	r24, 0x80	; 128
    3b4e:	84 83       	std	Z+4, r24	; 0x04
    3b50:	12 e0       	ldi	r17, 0x02	; 2
    3b52:	54 c1       	rjmp	.+680    	; 0x3dfc <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b54:	4f 3f       	cpi	r20, 0xFF	; 255
    3b56:	ff ef       	ldi	r31, 0xFF	; 255
    3b58:	5f 07       	cpc	r21, r31
    3b5a:	ff ef       	ldi	r31, 0xFF	; 255
    3b5c:	6f 07       	cpc	r22, r31
    3b5e:	ff ef       	ldi	r31, 0xFF	; 255
    3b60:	7f 07       	cpc	r23, r31
    3b62:	b1 f1       	breq	.+108    	; 0x3bd0 <f_lseek+0x206>
				fp->org_clust = clst;
    3b64:	ef 81       	ldd	r30, Y+7	; 0x07
    3b66:	f8 85       	ldd	r31, Y+8	; 0x08
    3b68:	46 87       	std	Z+14, r20	; 0x0e
    3b6a:	57 87       	std	Z+15, r21	; 0x0f
    3b6c:	60 8b       	std	Z+16, r22	; 0x10
    3b6e:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3b70:	af 81       	ldd	r26, Y+7	; 0x07
    3b72:	b8 85       	ldd	r27, Y+8	; 0x08
    3b74:	52 96       	adiw	r26, 0x12	; 18
    3b76:	4d 93       	st	X+, r20
    3b78:	5d 93       	st	X+, r21
    3b7a:	6d 93       	st	X+, r22
    3b7c:	7c 93       	st	X, r23
    3b7e:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3b80:	41 15       	cp	r20, r1
    3b82:	51 05       	cpc	r21, r1
    3b84:	61 05       	cpc	r22, r1
    3b86:	71 05       	cpc	r23, r1
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <f_lseek+0x1c2>
    3b8a:	58 c0       	rjmp	.+176    	; 0x3c3c <f_lseek+0x272>
    3b8c:	cb c0       	rjmp	.+406    	; 0x3d24 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3b8e:	ef 81       	ldd	r30, Y+7	; 0x07
    3b90:	f8 85       	ldd	r31, Y+8	; 0x08
    3b92:	84 81       	ldd	r24, Z+4	; 0x04
    3b94:	20 81       	ld	r18, Z
    3b96:	31 81       	ldd	r19, Z+1	; 0x01
    3b98:	81 ff       	sbrs	r24, 1
    3b9a:	0d c0       	rjmp	.+26     	; 0x3bb6 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3b9c:	c9 01       	movw	r24, r18
    3b9e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <create_chain>
    3ba2:	ab 01       	movw	r20, r22
    3ba4:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3ba6:	41 15       	cp	r20, r1
    3ba8:	51 05       	cpc	r21, r1
    3baa:	61 05       	cpc	r22, r1
    3bac:	71 05       	cpc	r23, r1
    3bae:	41 f4       	brne	.+16     	; 0x3bc0 <f_lseek+0x1f6>
    3bb0:	64 01       	movw	r12, r8
    3bb2:	53 01       	movw	r10, r6
    3bb4:	49 c0       	rjmp	.+146    	; 0x3c48 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3bb6:	c9 01       	movw	r24, r18
    3bb8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    3bbc:	ab 01       	movw	r20, r22
    3bbe:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bc0:	4f 3f       	cpi	r20, 0xFF	; 255
    3bc2:	ff ef       	ldi	r31, 0xFF	; 255
    3bc4:	5f 07       	cpc	r21, r31
    3bc6:	ff ef       	ldi	r31, 0xFF	; 255
    3bc8:	6f 07       	cpc	r22, r31
    3bca:	ff ef       	ldi	r31, 0xFF	; 255
    3bcc:	7f 07       	cpc	r23, r31
    3bce:	49 f4       	brne	.+18     	; 0x3be2 <f_lseek+0x218>
    3bd0:	af 81       	ldd	r26, Y+7	; 0x07
    3bd2:	b8 85       	ldd	r27, Y+8	; 0x08
    3bd4:	14 96       	adiw	r26, 0x04	; 4
    3bd6:	8c 91       	ld	r24, X
    3bd8:	14 97       	sbiw	r26, 0x04	; 4
    3bda:	80 68       	ori	r24, 0x80	; 128
    3bdc:	14 96       	adiw	r26, 0x04	; 4
    3bde:	8c 93       	st	X, r24
    3be0:	ed c0       	rjmp	.+474    	; 0x3dbc <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3be2:	42 30       	cpi	r20, 0x02	; 2
    3be4:	51 05       	cpc	r21, r1
    3be6:	61 05       	cpc	r22, r1
    3be8:	71 05       	cpc	r23, r1
    3bea:	08 f4       	brcc	.+2      	; 0x3bee <f_lseek+0x224>
    3bec:	ac cf       	rjmp	.-168    	; 0x3b46 <f_lseek+0x17c>
    3bee:	af 81       	ldd	r26, Y+7	; 0x07
    3bf0:	b8 85       	ldd	r27, Y+8	; 0x08
    3bf2:	ed 91       	ld	r30, X+
    3bf4:	fc 91       	ld	r31, X
    3bf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bf8:	93 8d       	ldd	r25, Z+27	; 0x1b
    3bfa:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3bfc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3bfe:	48 17       	cp	r20, r24
    3c00:	59 07       	cpc	r21, r25
    3c02:	6a 07       	cpc	r22, r26
    3c04:	7b 07       	cpc	r23, r27
    3c06:	08 f0       	brcs	.+2      	; 0x3c0a <f_lseek+0x240>
    3c08:	9e cf       	rjmp	.-196    	; 0x3b46 <f_lseek+0x17c>
				fp->curr_clust = clst;
    3c0a:	af 81       	ldd	r26, Y+7	; 0x07
    3c0c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c0e:	52 96       	adiw	r26, 0x12	; 18
    3c10:	4d 93       	st	X+, r20
    3c12:	5d 93       	st	X+, r21
    3c14:	6d 93       	st	X+, r22
    3c16:	7c 93       	st	X, r23
    3c18:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3c1a:	fd 01       	movw	r30, r26
    3c1c:	86 81       	ldd	r24, Z+6	; 0x06
    3c1e:	97 81       	ldd	r25, Z+7	; 0x07
    3c20:	a0 85       	ldd	r26, Z+8	; 0x08
    3c22:	b1 85       	ldd	r27, Z+9	; 0x09
    3c24:	86 0d       	add	r24, r6
    3c26:	97 1d       	adc	r25, r7
    3c28:	a8 1d       	adc	r26, r8
    3c2a:	b9 1d       	adc	r27, r9
    3c2c:	86 83       	std	Z+6, r24	; 0x06
    3c2e:	97 83       	std	Z+7, r25	; 0x07
    3c30:	a0 87       	std	Z+8, r26	; 0x08
    3c32:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3c34:	a6 18       	sub	r10, r6
    3c36:	b7 08       	sbc	r11, r7
    3c38:	c8 08       	sbc	r12, r8
    3c3a:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3c3c:	6a 14       	cp	r6, r10
    3c3e:	7b 04       	cpc	r7, r11
    3c40:	8c 04       	cpc	r8, r12
    3c42:	9d 04       	cpc	r9, r13
    3c44:	08 f4       	brcc	.+2      	; 0x3c48 <f_lseek+0x27e>
    3c46:	a3 cf       	rjmp	.-186    	; 0x3b8e <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3c48:	ef 81       	ldd	r30, Y+7	; 0x07
    3c4a:	f8 85       	ldd	r31, Y+8	; 0x08
    3c4c:	86 81       	ldd	r24, Z+6	; 0x06
    3c4e:	97 81       	ldd	r25, Z+7	; 0x07
    3c50:	a0 85       	ldd	r26, Z+8	; 0x08
    3c52:	b1 85       	ldd	r27, Z+9	; 0x09
    3c54:	8a 0d       	add	r24, r10
    3c56:	9b 1d       	adc	r25, r11
    3c58:	ac 1d       	adc	r26, r12
    3c5a:	bd 1d       	adc	r27, r13
    3c5c:	86 83       	std	Z+6, r24	; 0x06
    3c5e:	97 83       	std	Z+7, r25	; 0x07
    3c60:	a0 87       	std	Z+8, r26	; 0x08
    3c62:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3c64:	d6 01       	movw	r26, r12
    3c66:	c5 01       	movw	r24, r10
    3c68:	09 e0       	ldi	r16, 0x09	; 9
    3c6a:	b6 95       	lsr	r27
    3c6c:	a7 95       	ror	r26
    3c6e:	97 95       	ror	r25
    3c70:	87 95       	ror	r24
    3c72:	0a 95       	dec	r16
    3c74:	d1 f7       	brne	.-12     	; 0x3c6a <f_lseek+0x2a0>
    3c76:	08 2f       	mov	r16, r24
    3c78:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3c7a:	8f ef       	ldi	r24, 0xFF	; 255
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	a8 22       	and	r10, r24
    3c84:	b9 22       	and	r11, r25
    3c86:	ca 22       	and	r12, r26
    3c88:	db 22       	and	r13, r27
    3c8a:	a1 14       	cp	r10, r1
    3c8c:	b1 04       	cpc	r11, r1
    3c8e:	c1 04       	cpc	r12, r1
    3c90:	d1 04       	cpc	r13, r1
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <f_lseek+0x2cc>
    3c94:	47 c0       	rjmp	.+142    	; 0x3d24 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3c96:	80 80       	ld	r8, Z
    3c98:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3c9a:	3e ef       	ldi	r19, 0xFE	; 254
    3c9c:	a3 2e       	mov	r10, r19
    3c9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ca0:	b3 2e       	mov	r11, r19
    3ca2:	3f ef       	ldi	r19, 0xFF	; 255
    3ca4:	c3 2e       	mov	r12, r19
    3ca6:	3f ef       	ldi	r19, 0xFF	; 255
    3ca8:	d3 2e       	mov	r13, r19
    3caa:	a4 0e       	add	r10, r20
    3cac:	b5 1e       	adc	r11, r21
    3cae:	c6 1e       	adc	r12, r22
    3cb0:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3cb2:	f4 01       	movw	r30, r8
    3cb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cb8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3cba:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3cbc:	02 97       	sbiw	r24, 0x02	; 2
    3cbe:	a1 09       	sbc	r26, r1
    3cc0:	b1 09       	sbc	r27, r1
    3cc2:	a8 16       	cp	r10, r24
    3cc4:	b9 06       	cpc	r11, r25
    3cc6:	ca 06       	cpc	r12, r26
    3cc8:	db 06       	cpc	r13, r27
    3cca:	c0 f4       	brcc	.+48     	; 0x3cfc <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3ccc:	22 81       	ldd	r18, Z+2	; 0x02
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	c6 01       	movw	r24, r12
    3cd6:	b5 01       	movw	r22, r10
    3cd8:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    3cdc:	9b 01       	movw	r18, r22
    3cde:	ac 01       	movw	r20, r24
    3ce0:	f4 01       	movw	r30, r8
    3ce2:	86 a1       	ldd	r24, Z+38	; 0x26
    3ce4:	97 a1       	ldd	r25, Z+39	; 0x27
    3ce6:	a0 a5       	ldd	r26, Z+40	; 0x28
    3ce8:	b1 a5       	ldd	r27, Z+41	; 0x29
    3cea:	28 0f       	add	r18, r24
    3cec:	39 1f       	adc	r19, r25
    3cee:	4a 1f       	adc	r20, r26
    3cf0:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3cf2:	21 15       	cp	r18, r1
    3cf4:	31 05       	cpc	r19, r1
    3cf6:	41 05       	cpc	r20, r1
    3cf8:	51 05       	cpc	r21, r1
    3cfa:	49 f4       	brne	.+18     	; 0x3d0e <f_lseek+0x344>
    3cfc:	af 81       	ldd	r26, Y+7	; 0x07
    3cfe:	b8 85       	ldd	r27, Y+8	; 0x08
    3d00:	14 96       	adiw	r26, 0x04	; 4
    3d02:	8c 91       	ld	r24, X
    3d04:	14 97       	sbiw	r26, 0x04	; 4
    3d06:	80 68       	ori	r24, 0x80	; 128
    3d08:	14 96       	adiw	r26, 0x04	; 4
    3d0a:	8c 93       	st	X, r24
    3d0c:	21 cf       	rjmp	.-446    	; 0x3b50 <f_lseek+0x186>
				nsect += fp->csect;
    3d0e:	59 01       	movw	r10, r18
    3d10:	6a 01       	movw	r12, r20
    3d12:	a0 0e       	add	r10, r16
    3d14:	b1 1c       	adc	r11, r1
    3d16:	c1 1c       	adc	r12, r1
    3d18:	d1 1c       	adc	r13, r1
				fp->csect++;
    3d1a:	0f 5f       	subi	r16, 0xFF	; 255
    3d1c:	ef 81       	ldd	r30, Y+7	; 0x07
    3d1e:	f8 85       	ldd	r31, Y+8	; 0x08
    3d20:	05 83       	std	Z+5, r16	; 0x05
    3d22:	03 c0       	rjmp	.+6      	; 0x3d2a <f_lseek+0x360>
    3d24:	aa 24       	eor	r10, r10
    3d26:	bb 24       	eor	r11, r11
    3d28:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3d2a:	ef 81       	ldd	r30, Y+7	; 0x07
    3d2c:	f8 85       	ldd	r31, Y+8	; 0x08
    3d2e:	86 81       	ldd	r24, Z+6	; 0x06
    3d30:	97 81       	ldd	r25, Z+7	; 0x07
    3d32:	a0 85       	ldd	r26, Z+8	; 0x08
    3d34:	b1 85       	ldd	r27, Z+9	; 0x09
    3d36:	91 70       	andi	r25, 0x01	; 1
    3d38:	a0 70       	andi	r26, 0x00	; 0
    3d3a:	b0 70       	andi	r27, 0x00	; 0
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	a1 05       	cpc	r26, r1
    3d40:	b1 05       	cpc	r27, r1
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <f_lseek+0x37c>
    3d44:	45 c0       	rjmp	.+138    	; 0x3dd0 <f_lseek+0x406>
    3d46:	26 89       	ldd	r18, Z+22	; 0x16
    3d48:	37 89       	ldd	r19, Z+23	; 0x17
    3d4a:	40 8d       	ldd	r20, Z+24	; 0x18
    3d4c:	51 8d       	ldd	r21, Z+25	; 0x19
    3d4e:	a2 16       	cp	r10, r18
    3d50:	b3 06       	cpc	r11, r19
    3d52:	c4 06       	cpc	r12, r20
    3d54:	d5 06       	cpc	r13, r21
    3d56:	e1 f1       	breq	.+120    	; 0x3dd0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3d58:	84 81       	ldd	r24, Z+4	; 0x04
    3d5a:	86 ff       	sbrs	r24, 6
    3d5c:	1a c0       	rjmp	.+52     	; 0x3d92 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3d5e:	01 90       	ld	r0, Z+
    3d60:	f0 81       	ld	r31, Z
    3d62:	e0 2d       	mov	r30, r0
    3d64:	6f 81       	ldd	r22, Y+7	; 0x07
    3d66:	78 85       	ldd	r23, Y+8	; 0x08
    3d68:	60 5e       	subi	r22, 0xE0	; 224
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	81 81       	ldd	r24, Z+1	; 0x01
    3d6e:	01 e0       	ldi	r16, 0x01	; 1
    3d70:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    3d74:	af 81       	ldd	r26, Y+7	; 0x07
    3d76:	b8 85       	ldd	r27, Y+8	; 0x08
    3d78:	14 96       	adiw	r26, 0x04	; 4
    3d7a:	9c 91       	ld	r25, X
    3d7c:	14 97       	sbiw	r26, 0x04	; 4
    3d7e:	88 23       	and	r24, r24
    3d80:	21 f0       	breq	.+8      	; 0x3d8a <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3d82:	90 68       	ori	r25, 0x80	; 128
    3d84:	14 96       	adiw	r26, 0x04	; 4
    3d86:	9c 93       	st	X, r25
    3d88:	19 c0       	rjmp	.+50     	; 0x3dbc <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3d8a:	9f 7b       	andi	r25, 0xBF	; 191
    3d8c:	ef 81       	ldd	r30, Y+7	; 0x07
    3d8e:	f8 85       	ldd	r31, Y+8	; 0x08
    3d90:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3d92:	af 81       	ldd	r26, Y+7	; 0x07
    3d94:	b8 85       	ldd	r27, Y+8	; 0x08
    3d96:	ed 91       	ld	r30, X+
    3d98:	fc 91       	ld	r31, X
    3d9a:	11 97       	sbiw	r26, 0x01	; 1
    3d9c:	bd 01       	movw	r22, r26
    3d9e:	60 5e       	subi	r22, 0xE0	; 224
    3da0:	7f 4f       	sbci	r23, 0xFF	; 255
    3da2:	81 81       	ldd	r24, Z+1	; 0x01
    3da4:	a6 01       	movw	r20, r12
    3da6:	95 01       	movw	r18, r10
    3da8:	01 e0       	ldi	r16, 0x01	; 1
    3daa:	0e 94 af 06 	call	0xd5e	; 0xd5e <disk_read>
    3dae:	88 23       	and	r24, r24
    3db0:	39 f0       	breq	.+14     	; 0x3dc0 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3db2:	ef 81       	ldd	r30, Y+7	; 0x07
    3db4:	f8 85       	ldd	r31, Y+8	; 0x08
    3db6:	84 81       	ldd	r24, Z+4	; 0x04
    3db8:	80 68       	ori	r24, 0x80	; 128
    3dba:	84 83       	std	Z+4, r24	; 0x04
    3dbc:	11 e0       	ldi	r17, 0x01	; 1
    3dbe:	1e c0       	rjmp	.+60     	; 0x3dfc <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3dc0:	af 81       	ldd	r26, Y+7	; 0x07
    3dc2:	b8 85       	ldd	r27, Y+8	; 0x08
    3dc4:	56 96       	adiw	r26, 0x16	; 22
    3dc6:	ad 92       	st	X+, r10
    3dc8:	bd 92       	st	X+, r11
    3dca:	cd 92       	st	X+, r12
    3dcc:	dc 92       	st	X, r13
    3dce:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3dd0:	ef 81       	ldd	r30, Y+7	; 0x07
    3dd2:	f8 85       	ldd	r31, Y+8	; 0x08
    3dd4:	26 81       	ldd	r18, Z+6	; 0x06
    3dd6:	37 81       	ldd	r19, Z+7	; 0x07
    3dd8:	40 85       	ldd	r20, Z+8	; 0x08
    3dda:	51 85       	ldd	r21, Z+9	; 0x09
    3ddc:	82 85       	ldd	r24, Z+10	; 0x0a
    3dde:	93 85       	ldd	r25, Z+11	; 0x0b
    3de0:	a4 85       	ldd	r26, Z+12	; 0x0c
    3de2:	b5 85       	ldd	r27, Z+13	; 0x0d
    3de4:	82 17       	cp	r24, r18
    3de6:	93 07       	cpc	r25, r19
    3de8:	a4 07       	cpc	r26, r20
    3dea:	b5 07       	cpc	r27, r21
    3dec:	38 f4       	brcc	.+14     	; 0x3dfc <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3dee:	22 87       	std	Z+10, r18	; 0x0a
    3df0:	33 87       	std	Z+11, r19	; 0x0b
    3df2:	44 87       	std	Z+12, r20	; 0x0c
    3df4:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3df6:	84 81       	ldd	r24, Z+4	; 0x04
    3df8:	80 62       	ori	r24, 0x20	; 32
    3dfa:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3dfc:	81 2f       	mov	r24, r17
    3dfe:	28 96       	adiw	r28, 0x08	; 8
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	cf 91       	pop	r28
    3e06:	df 91       	pop	r29
    3e08:	1f 91       	pop	r17
    3e0a:	0f 91       	pop	r16
    3e0c:	df 90       	pop	r13
    3e0e:	cf 90       	pop	r12
    3e10:	bf 90       	pop	r11
    3e12:	af 90       	pop	r10
    3e14:	9f 90       	pop	r9
    3e16:	8f 90       	pop	r8
    3e18:	7f 90       	pop	r7
    3e1a:	6f 90       	pop	r6
    3e1c:	5f 90       	pop	r5
    3e1e:	4f 90       	pop	r4
    3e20:	3f 90       	pop	r3
    3e22:	2f 90       	pop	r2
    3e24:	08 95       	ret

00003e26 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3e26:	0f 93       	push	r16
    3e28:	1f 93       	push	r17
    3e2a:	df 93       	push	r29
    3e2c:	cf 93       	push	r28
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	2e 97       	sbiw	r28, 0x0e	; 14
    3e34:	cd bf       	out	0x3d, r28	; 61
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	8c 01       	movw	r16, r24
    3e3a:	6d 87       	std	Y+13, r22	; 0x0d
    3e3c:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3e3e:	ce 01       	movw	r24, r28
    3e40:	0d 96       	adiw	r24, 0x0d	; 13
    3e42:	b8 01       	movw	r22, r16
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
	if (res == FR_OK) {
    3e4a:	88 23       	and	r24, r24
    3e4c:	09 f0       	breq	.+2      	; 0x3e50 <f_opendir+0x2a>
    3e4e:	46 c0       	rjmp	.+140    	; 0x3edc <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3e50:	ce 01       	movw	r24, r28
    3e52:	01 96       	adiw	r24, 0x01	; 1
    3e54:	d8 01       	movw	r26, r16
    3e56:	54 96       	adiw	r26, 0x14	; 20
    3e58:	8d 93       	st	X+, r24
    3e5a:	9c 93       	st	X, r25
    3e5c:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3e5e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e60:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e62:	c8 01       	movw	r24, r16
    3e64:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3e68:	88 23       	and	r24, r24
    3e6a:	a9 f5       	brne	.+106    	; 0x3ed6 <f_opendir+0xb0>
			dir = dj->dir;
    3e6c:	d8 01       	movw	r26, r16
    3e6e:	52 96       	adiw	r26, 0x12	; 18
    3e70:	ed 91       	ld	r30, X+
    3e72:	fc 91       	ld	r31, X
    3e74:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3e76:	30 97       	sbiw	r30, 0x00	; 0
    3e78:	f9 f0       	breq	.+62     	; 0x3eb8 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3e7a:	83 85       	ldd	r24, Z+11	; 0x0b
    3e7c:	84 ff       	sbrs	r24, 4
    3e7e:	2d c0       	rjmp	.+90     	; 0x3eda <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3e80:	35 89       	ldd	r19, Z+21	; 0x15
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	84 89       	ldd	r24, Z+20	; 0x14
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	28 2b       	or	r18, r24
    3e8a:	39 2b       	or	r19, r25
    3e8c:	40 e0       	ldi	r20, 0x00	; 0
    3e8e:	50 e0       	ldi	r21, 0x00	; 0
    3e90:	a9 01       	movw	r20, r18
    3e92:	33 27       	eor	r19, r19
    3e94:	22 27       	eor	r18, r18
    3e96:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	62 8d       	ldd	r22, Z+26	; 0x1a
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	86 2b       	or	r24, r22
    3ea0:	97 2b       	or	r25, r23
    3ea2:	a0 e0       	ldi	r26, 0x00	; 0
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	28 2b       	or	r18, r24
    3ea8:	39 2b       	or	r19, r25
    3eaa:	4a 2b       	or	r20, r26
    3eac:	5b 2b       	or	r21, r27
    3eae:	f8 01       	movw	r30, r16
    3eb0:	26 83       	std	Z+6, r18	; 0x06
    3eb2:	37 83       	std	Z+7, r19	; 0x07
    3eb4:	40 87       	std	Z+8, r20	; 0x08
    3eb6:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3eb8:	d8 01       	movw	r26, r16
    3eba:	ed 91       	ld	r30, X+
    3ebc:	fc 91       	ld	r31, X
    3ebe:	11 97       	sbiw	r26, 0x01	; 1
    3ec0:	86 81       	ldd	r24, Z+6	; 0x06
    3ec2:	97 81       	ldd	r25, Z+7	; 0x07
    3ec4:	12 96       	adiw	r26, 0x02	; 2
    3ec6:	8d 93       	st	X+, r24
    3ec8:	9c 93       	st	X, r25
    3eca:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3ecc:	c8 01       	movw	r24, r16
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3ed6:	84 30       	cpi	r24, 0x04	; 4
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <f_opendir+0xb6>
    3eda:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3edc:	2e 96       	adiw	r28, 0x0e	; 14
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	1f 91       	pop	r17
    3ee8:	0f 91       	pop	r16
    3eea:	08 95       	ret

00003eec <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	2c 97       	sbiw	r28, 0x0c	; 12
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	8c 01       	movw	r16, r24
    3f04:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3f06:	fc 01       	movw	r30, r24
    3f08:	62 81       	ldd	r22, Z+2	; 0x02
    3f0a:	73 81       	ldd	r23, Z+3	; 0x03
    3f0c:	80 81       	ld	r24, Z
    3f0e:	91 81       	ldd	r25, Z+1	; 0x01
    3f10:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <validate>
	if (res == FR_OK) {
    3f14:	88 23       	and	r24, r24
    3f16:	59 f5       	brne	.+86     	; 0x3f6e <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3f18:	ce 01       	movw	r24, r28
    3f1a:	01 96       	adiw	r24, 0x01	; 1
    3f1c:	f8 01       	movw	r30, r16
    3f1e:	84 8b       	std	Z+20, r24	; 0x14
    3f20:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3f22:	e1 14       	cp	r14, r1
    3f24:	f1 04       	cpc	r15, r1
    3f26:	31 f4       	brne	.+12     	; 0x3f34 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3f28:	c8 01       	movw	r24, r16
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	70 e0       	ldi	r23, 0x00	; 0
    3f2e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
    3f32:	1d c0       	rjmp	.+58     	; 0x3f6e <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3f34:	c8 01       	movw	r24, r16
    3f36:	0e 94 75 10 	call	0x20ea	; 0x20ea <dir_read>
			if (res == FR_NO_FILE) {
    3f3a:	84 30       	cpi	r24, 0x04	; 4
    3f3c:	31 f4       	brne	.+12     	; 0x3f4a <f_readdir+0x5e>
				dj->sect = 0;
    3f3e:	f8 01       	movw	r30, r16
    3f40:	16 86       	std	Z+14, r1	; 0x0e
    3f42:	17 86       	std	Z+15, r1	; 0x0f
    3f44:	10 8a       	std	Z+16, r1	; 0x10
    3f46:	11 8a       	std	Z+17, r1	; 0x11
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3f4a:	88 23       	and	r24, r24
    3f4c:	81 f4       	brne	.+32     	; 0x3f6e <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3f4e:	c8 01       	movw	r24, r16
    3f50:	b7 01       	movw	r22, r14
    3f52:	0e 94 21 11 	call	0x2242	; 0x2242 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3f56:	c8 01       	movw	r24, r16
    3f58:	60 e0       	ldi	r22, 0x00	; 0
    3f5a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <dir_next>
				if (res == FR_NO_FILE) {
    3f5e:	84 30       	cpi	r24, 0x04	; 4
    3f60:	31 f4       	brne	.+12     	; 0x3f6e <f_readdir+0x82>
					dj->sect = 0;
    3f62:	f8 01       	movw	r30, r16
    3f64:	16 86       	std	Z+14, r1	; 0x0e
    3f66:	17 86       	std	Z+15, r1	; 0x0f
    3f68:	10 8a       	std	Z+16, r1	; 0x10
    3f6a:	11 8a       	std	Z+17, r1	; 0x11
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3f6e:	2c 96       	adiw	r28, 0x0c	; 12
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	cf 91       	pop	r28
    3f76:	df 91       	pop	r29
    3f78:	1f 91       	pop	r17
    3f7a:	0f 91       	pop	r16
    3f7c:	ff 90       	pop	r15
    3f7e:	ef 90       	pop	r14
    3f80:	08 95       	ret

00003f82 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3f82:	cf 92       	push	r12
    3f84:	df 92       	push	r13
    3f86:	ef 92       	push	r14
    3f88:	ff 92       	push	r15
    3f8a:	1f 93       	push	r17
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	a4 97       	sbiw	r28, 0x24	; 36
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	8b a3       	std	Y+35, r24	; 0x23
    3f9c:	9c a3       	std	Y+36, r25	; 0x24
    3f9e:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3fa0:	2d e0       	ldi	r18, 0x0D	; 13
    3fa2:	e2 2e       	mov	r14, r18
    3fa4:	f1 2c       	mov	r15, r1
    3fa6:	ec 0e       	add	r14, r28
    3fa8:	fd 1e       	adc	r15, r29
    3faa:	ce 01       	movw	r24, r28
    3fac:	83 96       	adiw	r24, 0x23	; 35
    3fae:	b7 01       	movw	r22, r14
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
    3fb6:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3fb8:	88 23       	and	r24, r24
    3fba:	b1 f4       	brne	.+44     	; 0x3fe8 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	01 96       	adiw	r24, 0x01	; 1
    3fc0:	89 a3       	std	Y+33, r24	; 0x21
    3fc2:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3fc8:	c7 01       	movw	r24, r14
    3fca:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
    3fce:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3fd0:	88 23       	and	r24, r24
    3fd2:	51 f4       	brne	.+20     	; 0x3fe8 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3fd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fd6:	98 a1       	ldd	r25, Y+32	; 0x20
    3fd8:	89 2b       	or	r24, r25
    3fda:	11 f4       	brne	.+4      	; 0x3fe0 <f_stat+0x5e>
    3fdc:	16 e0       	ldi	r17, 0x06	; 6
    3fde:	04 c0       	rjmp	.+8      	; 0x3fe8 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3fe0:	c7 01       	movw	r24, r14
    3fe2:	b6 01       	movw	r22, r12
    3fe4:	0e 94 21 11 	call	0x2242	; 0x2242 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3fe8:	81 2f       	mov	r24, r17
    3fea:	a4 96       	adiw	r28, 0x24	; 36
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	1f 91       	pop	r17
    3ff6:	ff 90       	pop	r15
    3ff8:	ef 90       	pop	r14
    3ffa:	df 90       	pop	r13
    3ffc:	cf 90       	pop	r12
    3ffe:	08 95       	ret

00004000 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    4000:	2f 92       	push	r2
    4002:	3f 92       	push	r3
    4004:	4f 92       	push	r4
    4006:	5f 92       	push	r5
    4008:	6f 92       	push	r6
    400a:	7f 92       	push	r7
    400c:	8f 92       	push	r8
    400e:	9f 92       	push	r9
    4010:	af 92       	push	r10
    4012:	bf 92       	push	r11
    4014:	cf 92       	push	r12
    4016:	df 92       	push	r13
    4018:	ef 92       	push	r14
    401a:	ff 92       	push	r15
    401c:	0f 93       	push	r16
    401e:	1f 93       	push	r17
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	29 97       	sbiw	r28, 0x09	; 9
    402a:	cd bf       	out	0x3d, r28	; 61
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	89 83       	std	Y+1, r24	; 0x01
    4030:	9a 83       	std	Y+2, r25	; 0x02
    4032:	6c 83       	std	Y+4, r22	; 0x04
    4034:	7d 83       	std	Y+5, r23	; 0x05
    4036:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4038:	ce 01       	movw	r24, r28
    403a:	01 96       	adiw	r24, 0x01	; 1
    403c:	ba 01       	movw	r22, r20
    403e:	40 e0       	ldi	r20, 0x00	; 0
    4040:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    4044:	88 23       	and	r24, r24
    4046:	09 f0       	breq	.+2      	; 0x404a <f_getfree+0x4a>
    4048:	eb c0       	rjmp	.+470    	; 0x4220 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    404a:	d2 01       	movw	r26, r4
    404c:	ed 91       	ld	r30, X+
    404e:	fc 91       	ld	r31, X
    4050:	26 85       	ldd	r18, Z+14	; 0x0e
    4052:	37 85       	ldd	r19, Z+15	; 0x0f
    4054:	40 89       	ldd	r20, Z+16	; 0x10
    4056:	51 89       	ldd	r21, Z+17	; 0x11
    4058:	e2 8c       	ldd	r14, Z+26	; 0x1a
    405a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    405c:	04 8d       	ldd	r16, Z+28	; 0x1c
    405e:	15 8d       	ldd	r17, Z+29	; 0x1d
    4060:	d8 01       	movw	r26, r16
    4062:	c7 01       	movw	r24, r14
    4064:	02 97       	sbiw	r24, 0x02	; 2
    4066:	a1 09       	sbc	r26, r1
    4068:	b1 09       	sbc	r27, r1
    406a:	82 17       	cp	r24, r18
    406c:	93 07       	cpc	r25, r19
    406e:	a4 07       	cpc	r26, r20
    4070:	b5 07       	cpc	r27, r21
    4072:	38 f0       	brcs	.+14     	; 0x4082 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    4074:	ec 81       	ldd	r30, Y+4	; 0x04
    4076:	fd 81       	ldd	r31, Y+5	; 0x05
    4078:	20 83       	st	Z, r18
    407a:	31 83       	std	Z+1, r19	; 0x01
    407c:	42 83       	std	Z+2, r20	; 0x02
    407e:	53 83       	std	Z+3, r21	; 0x03
    4080:	ce c0       	rjmp	.+412    	; 0x421e <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    4082:	30 80       	ld	r3, Z
    4084:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    4086:	23 2d       	mov	r18, r3
    4088:	21 30       	cpi	r18, 0x01	; 1
    408a:	e1 f5       	brne	.+120    	; 0x4104 <f_getfree+0x104>
    408c:	aa 24       	eor	r10, r10
    408e:	bb 24       	eor	r11, r11
    4090:	65 01       	movw	r12, r10
    4092:	92 e0       	ldi	r25, 0x02	; 2
    4094:	e9 2e       	mov	r14, r25
    4096:	f1 2c       	mov	r15, r1
    4098:	01 2d       	mov	r16, r1
    409a:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    409c:	d2 01       	movw	r26, r4
    409e:	8d 91       	ld	r24, X+
    40a0:	9c 91       	ld	r25, X
    40a2:	b8 01       	movw	r22, r16
    40a4:	a7 01       	movw	r20, r14
    40a6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    40aa:	6f 3f       	cpi	r22, 0xFF	; 255
    40ac:	bf ef       	ldi	r27, 0xFF	; 255
    40ae:	7b 07       	cpc	r23, r27
    40b0:	bf ef       	ldi	r27, 0xFF	; 255
    40b2:	8b 07       	cpc	r24, r27
    40b4:	bf ef       	ldi	r27, 0xFF	; 255
    40b6:	9b 07       	cpc	r25, r27
    40b8:	11 f4       	brne	.+4      	; 0x40be <f_getfree+0xbe>
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	b1 c0       	rjmp	.+354    	; 0x4220 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    40be:	61 30       	cpi	r22, 0x01	; 1
    40c0:	71 05       	cpc	r23, r1
    40c2:	81 05       	cpc	r24, r1
    40c4:	91 05       	cpc	r25, r1
    40c6:	11 f4       	brne	.+4      	; 0x40cc <f_getfree+0xcc>
    40c8:	82 e0       	ldi	r24, 0x02	; 2
    40ca:	aa c0       	rjmp	.+340    	; 0x4220 <f_getfree+0x220>
			if (stat == 0) n++;
    40cc:	61 15       	cp	r22, r1
    40ce:	71 05       	cpc	r23, r1
    40d0:	81 05       	cpc	r24, r1
    40d2:	91 05       	cpc	r25, r1
    40d4:	29 f4       	brne	.+10     	; 0x40e0 <f_getfree+0xe0>
    40d6:	08 94       	sec
    40d8:	a1 1c       	adc	r10, r1
    40da:	b1 1c       	adc	r11, r1
    40dc:	c1 1c       	adc	r12, r1
    40de:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    40e0:	08 94       	sec
    40e2:	e1 1c       	adc	r14, r1
    40e4:	f1 1c       	adc	r15, r1
    40e6:	01 1d       	adc	r16, r1
    40e8:	11 1d       	adc	r17, r1
    40ea:	d2 01       	movw	r26, r4
    40ec:	ed 91       	ld	r30, X+
    40ee:	fc 91       	ld	r31, X
    40f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    40f2:	93 8d       	ldd	r25, Z+27	; 0x1b
    40f4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    40f6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    40f8:	e8 16       	cp	r14, r24
    40fa:	f9 06       	cpc	r15, r25
    40fc:	0a 07       	cpc	r16, r26
    40fe:	1b 07       	cpc	r17, r27
    4100:	68 f2       	brcs	.-102    	; 0x409c <f_getfree+0x9c>
    4102:	7b c0       	rjmp	.+246    	; 0x41fa <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    4104:	66 8c       	ldd	r6, Z+30	; 0x1e
    4106:	77 8c       	ldd	r7, Z+31	; 0x1f
    4108:	80 a0       	ldd	r8, Z+32	; 0x20
    410a:	91 a0       	ldd	r9, Z+33	; 0x21
    410c:	aa 24       	eor	r10, r10
    410e:	bb 24       	eor	r11, r11
    4110:	65 01       	movw	r12, r10
    4112:	60 e0       	ldi	r22, 0x00	; 0
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	e0 e0       	ldi	r30, 0x00	; 0
    4118:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    411a:	61 15       	cp	r22, r1
    411c:	71 05       	cpc	r23, r1
    411e:	a9 f4       	brne	.+42     	; 0x414a <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    4120:	f2 01       	movw	r30, r4
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	b4 01       	movw	r22, r8
    4128:	a3 01       	movw	r20, r6
    412a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
				if (res != FR_OK)
    412e:	88 23       	and	r24, r24
    4130:	09 f0       	breq	.+2      	; 0x4134 <f_getfree+0x134>
    4132:	76 c0       	rjmp	.+236    	; 0x4220 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    4134:	08 94       	sec
    4136:	61 1c       	adc	r6, r1
    4138:	71 1c       	adc	r7, r1
    413a:	81 1c       	adc	r8, r1
    413c:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    413e:	d2 01       	movw	r26, r4
    4140:	ed 91       	ld	r30, X+
    4142:	fc 91       	ld	r31, X
    4144:	be 96       	adiw	r30, 0x2e	; 46
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	72 e0       	ldi	r23, 0x02	; 2
    414a:	b1 81       	ldd	r27, Z+1	; 0x01
    414c:	b8 87       	std	Y+8, r27	; 0x08
    414e:	20 81       	ld	r18, Z
    4150:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    4152:	3b 81       	ldd	r19, Y+3	; 0x03
    4154:	32 30       	cpi	r19, 0x02	; 2
    4156:	99 f4       	brne	.+38     	; 0x417e <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    4158:	bf 83       	std	Y+7, r27	; 0x07
    415a:	1e 82       	std	Y+6, r1	; 0x06
    415c:	82 2f       	mov	r24, r18
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	ae 81       	ldd	r26, Y+6	; 0x06
    4162:	bf 81       	ldd	r27, Y+7	; 0x07
    4164:	8a 2b       	or	r24, r26
    4166:	9b 2b       	or	r25, r27
    4168:	89 2b       	or	r24, r25
    416a:	29 f4       	brne	.+10     	; 0x4176 <f_getfree+0x176>
    416c:	08 94       	sec
    416e:	a1 1c       	adc	r10, r1
    4170:	b1 1c       	adc	r11, r1
    4172:	c1 1c       	adc	r12, r1
    4174:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    4176:	32 96       	adiw	r30, 0x02	; 2
    4178:	62 50       	subi	r22, 0x02	; 2
    417a:	70 40       	sbci	r23, 0x00	; 0
    417c:	33 c0       	rjmp	.+102    	; 0x41e4 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    417e:	23 81       	ldd	r18, Z+3	; 0x03
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	52 2f       	mov	r21, r18
    4188:	44 27       	eor	r20, r20
    418a:	33 27       	eor	r19, r19
    418c:	22 27       	eor	r18, r18
    418e:	82 81       	ldd	r24, Z+2	; 0x02
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	a0 e0       	ldi	r26, 0x00	; 0
    4194:	b0 e0       	ldi	r27, 0x00	; 0
    4196:	dc 01       	movw	r26, r24
    4198:	99 27       	eor	r25, r25
    419a:	88 27       	eor	r24, r24
    419c:	28 2b       	or	r18, r24
    419e:	39 2b       	or	r19, r25
    41a0:	4a 2b       	or	r20, r26
    41a2:	5b 2b       	or	r21, r27
    41a4:	39 84       	ldd	r3, Y+9	; 0x09
    41a6:	83 2d       	mov	r24, r3
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	a0 e0       	ldi	r26, 0x00	; 0
    41ac:	b0 e0       	ldi	r27, 0x00	; 0
    41ae:	28 2b       	or	r18, r24
    41b0:	39 2b       	or	r19, r25
    41b2:	4a 2b       	or	r20, r26
    41b4:	5b 2b       	or	r21, r27
    41b6:	38 84       	ldd	r3, Y+8	; 0x08
    41b8:	22 24       	eor	r2, r2
    41ba:	c1 01       	movw	r24, r2
    41bc:	a0 e0       	ldi	r26, 0x00	; 0
    41be:	b0 e0       	ldi	r27, 0x00	; 0
    41c0:	28 2b       	or	r18, r24
    41c2:	39 2b       	or	r19, r25
    41c4:	4a 2b       	or	r20, r26
    41c6:	5b 2b       	or	r21, r27
    41c8:	5f 70       	andi	r21, 0x0F	; 15
    41ca:	21 15       	cp	r18, r1
    41cc:	31 05       	cpc	r19, r1
    41ce:	41 05       	cpc	r20, r1
    41d0:	51 05       	cpc	r21, r1
    41d2:	29 f4       	brne	.+10     	; 0x41de <f_getfree+0x1de>
    41d4:	08 94       	sec
    41d6:	a1 1c       	adc	r10, r1
    41d8:	b1 1c       	adc	r11, r1
    41da:	c1 1c       	adc	r12, r1
    41dc:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    41de:	34 96       	adiw	r30, 0x04	; 4
    41e0:	64 50       	subi	r22, 0x04	; 4
    41e2:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    41e4:	08 94       	sec
    41e6:	e1 08       	sbc	r14, r1
    41e8:	f1 08       	sbc	r15, r1
    41ea:	01 09       	sbc	r16, r1
    41ec:	11 09       	sbc	r17, r1
    41ee:	e1 14       	cp	r14, r1
    41f0:	f1 04       	cpc	r15, r1
    41f2:	01 05       	cpc	r16, r1
    41f4:	11 05       	cpc	r17, r1
    41f6:	09 f0       	breq	.+2      	; 0x41fa <f_getfree+0x1fa>
    41f8:	90 cf       	rjmp	.-224    	; 0x411a <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    41fa:	d2 01       	movw	r26, r4
    41fc:	ed 91       	ld	r30, X+
    41fe:	fc 91       	ld	r31, X
    4200:	a6 86       	std	Z+14, r10	; 0x0e
    4202:	b7 86       	std	Z+15, r11	; 0x0f
    4204:	c0 8a       	std	Z+16, r12	; 0x10
    4206:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4208:	bb 81       	ldd	r27, Y+3	; 0x03
    420a:	b3 30       	cpi	r27, 0x03	; 3
    420c:	11 f4       	brne	.+4      	; 0x4212 <f_getfree+0x212>
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    4212:	ec 81       	ldd	r30, Y+4	; 0x04
    4214:	fd 81       	ldd	r31, Y+5	; 0x05
    4216:	a0 82       	st	Z, r10
    4218:	b1 82       	std	Z+1, r11	; 0x01
    421a:	c2 82       	std	Z+2, r12	; 0x02
    421c:	d3 82       	std	Z+3, r13	; 0x03
    421e:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4220:	29 96       	adiw	r28, 0x09	; 9
    4222:	cd bf       	out	0x3d, r28	; 61
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	df 90       	pop	r13
    4234:	cf 90       	pop	r12
    4236:	bf 90       	pop	r11
    4238:	af 90       	pop	r10
    423a:	9f 90       	pop	r9
    423c:	8f 90       	pop	r8
    423e:	7f 90       	pop	r7
    4240:	6f 90       	pop	r6
    4242:	5f 90       	pop	r5
    4244:	4f 90       	pop	r4
    4246:	3f 90       	pop	r3
    4248:	2f 90       	pop	r2
    424a:	08 95       	ret

0000424c <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    424c:	cf 92       	push	r12
    424e:	df 92       	push	r13
    4250:	ef 92       	push	r14
    4252:	ff 92       	push	r15
    4254:	0f 93       	push	r16
    4256:	1f 93       	push	r17
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    425e:	6a 81       	ldd	r22, Y+2	; 0x02
    4260:	7b 81       	ldd	r23, Y+3	; 0x03
    4262:	88 81       	ld	r24, Y
    4264:	99 81       	ldd	r25, Y+1	; 0x01
    4266:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <validate>
    426a:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    426c:	88 23       	and	r24, r24
    426e:	09 f0       	breq	.+2      	; 0x4272 <f_truncate+0x26>
    4270:	6e c0       	rjmp	.+220    	; 0x434e <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    4272:	6c 81       	ldd	r22, Y+4	; 0x04
    4274:	67 ff       	sbrs	r22, 7
    4276:	02 c0       	rjmp	.+4      	; 0x427c <f_truncate+0x30>
    4278:	12 e0       	ldi	r17, 0x02	; 2
    427a:	69 c0       	rjmp	.+210    	; 0x434e <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    427c:	61 fd       	sbrc	r22, 1
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <f_truncate+0x38>
    4280:	17 e0       	ldi	r17, 0x07	; 7
    4282:	65 c0       	rjmp	.+202    	; 0x434e <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    4284:	2e 81       	ldd	r18, Y+6	; 0x06
    4286:	3f 81       	ldd	r19, Y+7	; 0x07
    4288:	48 85       	ldd	r20, Y+8	; 0x08
    428a:	59 85       	ldd	r21, Y+9	; 0x09
    428c:	8a 85       	ldd	r24, Y+10	; 0x0a
    428e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4290:	ac 85       	ldd	r26, Y+12	; 0x0c
    4292:	bd 85       	ldd	r27, Y+13	; 0x0d
    4294:	28 17       	cp	r18, r24
    4296:	39 07       	cpc	r19, r25
    4298:	4a 07       	cpc	r20, r26
    429a:	5b 07       	cpc	r21, r27
    429c:	08 f0       	brcs	.+2      	; 0x42a0 <f_truncate+0x54>
    429e:	57 c0       	rjmp	.+174    	; 0x434e <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    42a0:	2a 87       	std	Y+10, r18	; 0x0a
    42a2:	3b 87       	std	Y+11, r19	; 0x0b
    42a4:	4c 87       	std	Y+12, r20	; 0x0c
    42a6:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    42a8:	60 62       	ori	r22, 0x20	; 32
    42aa:	6c 83       	std	Y+4, r22	; 0x04
    42ac:	88 81       	ld	r24, Y
    42ae:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    42b0:	21 15       	cp	r18, r1
    42b2:	31 05       	cpc	r19, r1
    42b4:	41 05       	cpc	r20, r1
    42b6:	51 05       	cpc	r21, r1
    42b8:	61 f4       	brne	.+24     	; 0x42d2 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    42ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    42bc:	5f 85       	ldd	r21, Y+15	; 0x0f
    42be:	68 89       	ldd	r22, Y+16	; 0x10
    42c0:	79 89       	ldd	r23, Y+17	; 0x11
    42c2:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <remove_chain>
    42c6:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    42c8:	1e 86       	std	Y+14, r1	; 0x0e
    42ca:	1f 86       	std	Y+15, r1	; 0x0f
    42cc:	18 8a       	std	Y+16, r1	; 0x10
    42ce:	19 8a       	std	Y+17, r1	; 0x11
    42d0:	39 c0       	rjmp	.+114    	; 0x4344 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    42d2:	4a 89       	ldd	r20, Y+18	; 0x12
    42d4:	5b 89       	ldd	r21, Y+19	; 0x13
    42d6:	6c 89       	ldd	r22, Y+20	; 0x14
    42d8:	7d 89       	ldd	r23, Y+21	; 0x15
    42da:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_fat>
    42de:	6b 01       	movw	r12, r22
    42e0:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    42e2:	8f ef       	ldi	r24, 0xFF	; 255
    42e4:	c8 16       	cp	r12, r24
    42e6:	8f ef       	ldi	r24, 0xFF	; 255
    42e8:	d8 06       	cpc	r13, r24
    42ea:	8f ef       	ldi	r24, 0xFF	; 255
    42ec:	e8 06       	cpc	r14, r24
    42ee:	8f ef       	ldi	r24, 0xFF	; 255
    42f0:	f8 06       	cpc	r15, r24
    42f2:	b9 f1       	breq	.+110    	; 0x4362 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	c8 16       	cp	r12, r24
    42f8:	d1 04       	cpc	r13, r1
    42fa:	e1 04       	cpc	r14, r1
    42fc:	f1 04       	cpc	r15, r1
    42fe:	11 f4       	brne	.+4      	; 0x4304 <f_truncate+0xb8>
    4300:	12 e0       	ldi	r17, 0x02	; 2
    4302:	22 c0       	rjmp	.+68     	; 0x4348 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    4304:	e8 81       	ld	r30, Y
    4306:	f9 81       	ldd	r31, Y+1	; 0x01
    4308:	82 8d       	ldd	r24, Z+26	; 0x1a
    430a:	93 8d       	ldd	r25, Z+27	; 0x1b
    430c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    430e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4310:	c8 16       	cp	r12, r24
    4312:	d9 06       	cpc	r13, r25
    4314:	ea 06       	cpc	r14, r26
    4316:	fb 06       	cpc	r15, r27
    4318:	d0 f4       	brcc	.+52     	; 0x434e <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    431a:	4a 89       	ldd	r20, Y+18	; 0x12
    431c:	5b 89       	ldd	r21, Y+19	; 0x13
    431e:	6c 89       	ldd	r22, Y+20	; 0x14
    4320:	7d 89       	ldd	r23, Y+21	; 0x15
    4322:	cf 01       	movw	r24, r30
    4324:	0f ef       	ldi	r16, 0xFF	; 255
    4326:	1f ef       	ldi	r17, 0xFF	; 255
    4328:	2f ef       	ldi	r18, 0xFF	; 255
    432a:	3f e0       	ldi	r19, 0x0F	; 15
    432c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <put_fat>
    4330:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4332:	88 23       	and	r24, r24
    4334:	49 f4       	brne	.+18     	; 0x4348 <f_truncate+0xfc>
    4336:	88 81       	ld	r24, Y
    4338:	99 81       	ldd	r25, Y+1	; 0x01
    433a:	b7 01       	movw	r22, r14
    433c:	a6 01       	movw	r20, r12
    433e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <remove_chain>
    4342:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4344:	11 23       	and	r17, r17
    4346:	19 f0       	breq	.+6      	; 0x434e <f_truncate+0x102>
    4348:	8c 81       	ldd	r24, Y+4	; 0x04
    434a:	80 68       	ori	r24, 0x80	; 128
    434c:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    434e:	81 2f       	mov	r24, r17
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	ff 90       	pop	r15
    435a:	ef 90       	pop	r14
    435c:	df 90       	pop	r13
    435e:	cf 90       	pop	r12
    4360:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4362:	11 e0       	ldi	r17, 0x01	; 1
    4364:	f1 cf       	rjmp	.-30     	; 0x4348 <f_truncate+0xfc>

00004366 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    4366:	cf 92       	push	r12
    4368:	df 92       	push	r13
    436a:	ef 92       	push	r14
    436c:	ff 92       	push	r15
    436e:	0f 93       	push	r16
    4370:	1f 93       	push	r17
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	ea 97       	sbiw	r28, 0x3a	; 58
    437c:	cd bf       	out	0x3d, r28	; 61
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	89 af       	std	Y+57, r24	; 0x39
    4382:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    4384:	4d e0       	ldi	r20, 0x0D	; 13
    4386:	c4 2e       	mov	r12, r20
    4388:	d1 2c       	mov	r13, r1
    438a:	cc 0e       	add	r12, r28
    438c:	dd 1e       	adc	r13, r29
    438e:	ce 01       	movw	r24, r28
    4390:	c9 96       	adiw	r24, 0x39	; 57
    4392:	b6 01       	movw	r22, r12
    4394:	41 e0       	ldi	r20, 0x01	; 1
    4396:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    439a:	88 23       	and	r24, r24
    439c:	09 f0       	breq	.+2      	; 0x43a0 <f_unlink+0x3a>
    439e:	71 c0       	rjmp	.+226    	; 0x4482 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    43a0:	ce 01       	movw	r24, r28
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	89 a3       	std	Y+33, r24	; 0x21
    43a6:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    43a8:	69 ad       	ldd	r22, Y+57	; 0x39
    43aa:	7a ad       	ldd	r23, Y+58	; 0x3a
    43ac:	c6 01       	movw	r24, r12
    43ae:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    43b2:	88 23       	and	r24, r24
    43b4:	09 f0       	breq	.+2      	; 0x43b8 <f_unlink+0x52>
    43b6:	65 c0       	rjmp	.+202    	; 0x4482 <f_unlink+0x11c>

	dir = dj.dir;
    43b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    43ba:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    43bc:	30 97       	sbiw	r30, 0x00	; 0
    43be:	11 f4       	brne	.+4      	; 0x43c4 <f_unlink+0x5e>
    43c0:	86 e0       	ldi	r24, 0x06	; 6
    43c2:	5f c0       	rjmp	.+190    	; 0x4482 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    43c4:	83 85       	ldd	r24, Z+11	; 0x0b
    43c6:	48 2f       	mov	r20, r24
    43c8:	80 fd       	sbrc	r24, 0
    43ca:	5a c0       	rjmp	.+180    	; 0x4480 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    43cc:	95 89       	ldd	r25, Z+21	; 0x15
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	24 89       	ldd	r18, Z+20	; 0x14
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	82 2b       	or	r24, r18
    43d6:	93 2b       	or	r25, r19
    43d8:	a0 e0       	ldi	r26, 0x00	; 0
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	8c 01       	movw	r16, r24
    43de:	ff 24       	eor	r15, r15
    43e0:	ee 24       	eor	r14, r14
    43e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	82 2b       	or	r24, r18
    43ec:	93 2b       	or	r25, r19
    43ee:	a0 e0       	ldi	r26, 0x00	; 0
    43f0:	b0 e0       	ldi	r27, 0x00	; 0
    43f2:	e8 2a       	or	r14, r24
    43f4:	f9 2a       	or	r15, r25
    43f6:	0a 2b       	or	r16, r26
    43f8:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    43fa:	44 ff       	sbrs	r20, 4
    43fc:	29 c0       	rjmp	.+82     	; 0x4450 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    43fe:	82 e0       	ldi	r24, 0x02	; 2
    4400:	e8 16       	cp	r14, r24
    4402:	f1 04       	cpc	r15, r1
    4404:	01 05       	cpc	r16, r1
    4406:	11 05       	cpc	r17, r1
    4408:	10 f4       	brcc	.+4      	; 0x440e <f_unlink+0xa8>
    440a:	82 e0       	ldi	r24, 0x02	; 2
    440c:	3a c0       	rjmp	.+116    	; 0x4482 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    440e:	de 01       	movw	r26, r28
    4410:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    4412:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    4414:	9d 01       	movw	r18, r26
    4416:	02 c0       	rjmp	.+4      	; 0x441c <f_unlink+0xb6>
    4418:	81 91       	ld	r24, Z+
    441a:	8d 93       	st	X+, r24
    441c:	e2 17       	cp	r30, r18
    441e:	f3 07       	cpc	r31, r19
    4420:	d9 f7       	brne	.-10     	; 0x4418 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    4422:	e9 a6       	std	Y+41, r14	; 0x29
    4424:	fa a6       	std	Y+42, r15	; 0x2a
    4426:	0b a7       	std	Y+43, r16	; 0x2b
    4428:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    442a:	23 e2       	ldi	r18, 0x23	; 35
    442c:	c2 2e       	mov	r12, r18
    442e:	d1 2c       	mov	r13, r1
    4430:	cc 0e       	add	r12, r28
    4432:	dd 1e       	adc	r13, r29
    4434:	c6 01       	movw	r24, r12
    4436:	62 e0       	ldi	r22, 0x02	; 2
    4438:	70 e0       	ldi	r23, 0x00	; 0
    443a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    443e:	88 23       	and	r24, r24
    4440:	01 f5       	brne	.+64     	; 0x4482 <f_unlink+0x11c>
		res = dir_read(&sdj);
    4442:	c6 01       	movw	r24, r12
    4444:	0e 94 75 10 	call	0x20ea	; 0x20ea <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4448:	88 23       	and	r24, r24
    444a:	d1 f0       	breq	.+52     	; 0x4480 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    444c:	84 30       	cpi	r24, 0x04	; 4
    444e:	c9 f4       	brne	.+50     	; 0x4482 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    4450:	ce 01       	movw	r24, r28
    4452:	0d 96       	adiw	r24, 0x0d	; 13
    4454:	0e 94 00 11 	call	0x2200	; 0x2200 <dir_remove>
	if (res == FR_OK) {
    4458:	88 23       	and	r24, r24
    445a:	99 f4       	brne	.+38     	; 0x4482 <f_unlink+0x11c>
		if (dclst)
    445c:	e1 14       	cp	r14, r1
    445e:	f1 04       	cpc	r15, r1
    4460:	01 05       	cpc	r16, r1
    4462:	11 05       	cpc	r17, r1
    4464:	41 f0       	breq	.+16     	; 0x4476 <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    4466:	8d 85       	ldd	r24, Y+13	; 0x0d
    4468:	9e 85       	ldd	r25, Y+14	; 0x0e
    446a:	b8 01       	movw	r22, r16
    446c:	a7 01       	movw	r20, r14
    446e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    4472:	88 23       	and	r24, r24
    4474:	31 f4       	brne	.+12     	; 0x4482 <f_unlink+0x11c>
    4476:	8d 85       	ldd	r24, Y+13	; 0x0d
    4478:	9e 85       	ldd	r25, Y+14	; 0x0e
    447a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sync>
    447e:	01 c0       	rjmp	.+2      	; 0x4482 <f_unlink+0x11c>
    4480:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    4482:	ea 96       	adiw	r28, 0x3a	; 58
    4484:	cd bf       	out	0x3d, r28	; 61
    4486:	de bf       	out	0x3e, r29	; 62
    4488:	cf 91       	pop	r28
    448a:	df 91       	pop	r29
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	ff 90       	pop	r15
    4492:	ef 90       	pop	r14
    4494:	df 90       	pop	r13
    4496:	cf 90       	pop	r12
    4498:	08 95       	ret

0000449a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    449a:	2f 92       	push	r2
    449c:	3f 92       	push	r3
    449e:	4f 92       	push	r4
    44a0:	5f 92       	push	r5
    44a2:	6f 92       	push	r6
    44a4:	7f 92       	push	r7
    44a6:	8f 92       	push	r8
    44a8:	9f 92       	push	r9
    44aa:	af 92       	push	r10
    44ac:	bf 92       	push	r11
    44ae:	cf 92       	push	r12
    44b0:	df 92       	push	r13
    44b2:	ef 92       	push	r14
    44b4:	ff 92       	push	r15
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	df 93       	push	r29
    44bc:	cf 93       	push	r28
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	a8 97       	sbiw	r28, 0x28	; 40
    44c4:	cd bf       	out	0x3d, r28	; 61
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	8b a3       	std	Y+35, r24	; 0x23
    44ca:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    44cc:	3d e0       	ldi	r19, 0x0D	; 13
    44ce:	e3 2e       	mov	r14, r19
    44d0:	f1 2c       	mov	r15, r1
    44d2:	ec 0e       	add	r14, r28
    44d4:	fd 1e       	adc	r15, r29
    44d6:	ce 01       	movw	r24, r28
    44d8:	83 96       	adiw	r24, 0x23	; 35
    44da:	b7 01       	movw	r22, r14
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
    44e2:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44e4:	88 23       	and	r24, r24
    44e6:	09 f0       	breq	.+2      	; 0x44ea <f_mkdir+0x50>
    44e8:	38 c1       	rjmp	.+624    	; 0x475a <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    44ea:	ce 01       	movw	r24, r28
    44ec:	01 96       	adiw	r24, 0x01	; 1
    44ee:	89 a3       	std	Y+33, r24	; 0x21
    44f0:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    44f2:	6b a1       	ldd	r22, Y+35	; 0x23
    44f4:	7c a1       	ldd	r23, Y+36	; 0x24
    44f6:	c7 01       	movw	r24, r14
    44f8:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
    44fc:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    44fe:	88 23       	and	r24, r24
    4500:	11 f4       	brne	.+4      	; 0x4506 <f_mkdir+0x6c>
    4502:	18 e0       	ldi	r17, 0x08	; 8
    4504:	2a c1       	rjmp	.+596    	; 0x475a <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    4506:	84 30       	cpi	r24, 0x04	; 4
    4508:	09 f0       	breq	.+2      	; 0x450c <f_mkdir+0x72>
    450a:	27 c1       	rjmp	.+590    	; 0x475a <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    450c:	8d 85       	ldd	r24, Y+13	; 0x0d
    450e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4510:	40 e0       	ldi	r20, 0x00	; 0
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	60 e0       	ldi	r22, 0x00	; 0
    4516:	70 e0       	ldi	r23, 0x00	; 0
    4518:	0e 94 cc 0c 	call	0x1998	; 0x1998 <create_chain>
    451c:	4b 01       	movw	r8, r22
    451e:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4520:	61 15       	cp	r22, r1
    4522:	71 05       	cpc	r23, r1
    4524:	81 05       	cpc	r24, r1
    4526:	91 05       	cpc	r25, r1
    4528:	11 f4       	brne	.+4      	; 0x452e <f_mkdir+0x94>
    452a:	17 e0       	ldi	r17, 0x07	; 7
    452c:	16 c1       	rjmp	.+556    	; 0x475a <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    452e:	61 30       	cpi	r22, 0x01	; 1
    4530:	71 05       	cpc	r23, r1
    4532:	81 05       	cpc	r24, r1
    4534:	91 05       	cpc	r25, r1
    4536:	11 f4       	brne	.+4      	; 0x453c <f_mkdir+0xa2>
    4538:	12 e0       	ldi	r17, 0x02	; 2
    453a:	0f c1       	rjmp	.+542    	; 0x475a <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    453c:	6f 3f       	cpi	r22, 0xFF	; 255
    453e:	3f ef       	ldi	r19, 0xFF	; 255
    4540:	73 07       	cpc	r23, r19
    4542:	3f ef       	ldi	r19, 0xFF	; 255
    4544:	83 07       	cpc	r24, r19
    4546:	3f ef       	ldi	r19, 0xFF	; 255
    4548:	93 07       	cpc	r25, r19
    454a:	09 f4       	brne	.+2      	; 0x454e <f_mkdir+0xb4>
    454c:	1d c1       	rjmp	.+570    	; 0x4788 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    454e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4550:	9e 85       	ldd	r25, Y+14	; 0x0e
    4552:	40 e0       	ldi	r20, 0x00	; 0
    4554:	50 e0       	ldi	r21, 0x00	; 0
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    455e:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4560:	88 23       	and	r24, r24
    4562:	09 f0       	breq	.+2      	; 0x4566 <f_mkdir+0xcc>
    4564:	fa c0       	rjmp	.+500    	; 0x475a <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    4566:	0d 85       	ldd	r16, Y+13	; 0x0d
    4568:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    456a:	2e ef       	ldi	r18, 0xFE	; 254
    456c:	c2 2e       	mov	r12, r18
    456e:	2f ef       	ldi	r18, 0xFF	; 255
    4570:	d2 2e       	mov	r13, r18
    4572:	2f ef       	ldi	r18, 0xFF	; 255
    4574:	e2 2e       	mov	r14, r18
    4576:	2f ef       	ldi	r18, 0xFF	; 255
    4578:	f2 2e       	mov	r15, r18
    457a:	c8 0c       	add	r12, r8
    457c:	d9 1c       	adc	r13, r9
    457e:	ea 1c       	adc	r14, r10
    4580:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4582:	f8 01       	movw	r30, r16
    4584:	82 8d       	ldd	r24, Z+26	; 0x1a
    4586:	93 8d       	ldd	r25, Z+27	; 0x1b
    4588:	a4 8d       	ldd	r26, Z+28	; 0x1c
    458a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    458c:	02 97       	sbiw	r24, 0x02	; 2
    458e:	a1 09       	sbc	r26, r1
    4590:	b1 09       	sbc	r27, r1
    4592:	c8 16       	cp	r12, r24
    4594:	d9 06       	cpc	r13, r25
    4596:	ea 06       	cpc	r14, r26
    4598:	fb 06       	cpc	r15, r27
    459a:	20 f0       	brcs	.+8      	; 0x45a4 <f_mkdir+0x10a>
    459c:	44 24       	eor	r4, r4
    459e:	55 24       	eor	r5, r5
    45a0:	32 01       	movw	r6, r4
    45a2:	14 c0       	rjmp	.+40     	; 0x45cc <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    45a4:	f8 01       	movw	r30, r16
    45a6:	22 81       	ldd	r18, Z+2	; 0x02
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	40 e0       	ldi	r20, 0x00	; 0
    45ac:	50 e0       	ldi	r21, 0x00	; 0
    45ae:	c7 01       	movw	r24, r14
    45b0:	b6 01       	movw	r22, r12
    45b2:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    45b6:	2b 01       	movw	r4, r22
    45b8:	3c 01       	movw	r6, r24
    45ba:	f8 01       	movw	r30, r16
    45bc:	86 a1       	ldd	r24, Z+38	; 0x26
    45be:	97 a1       	ldd	r25, Z+39	; 0x27
    45c0:	a0 a5       	ldd	r26, Z+40	; 0x28
    45c2:	b1 a5       	ldd	r27, Z+41	; 0x29
    45c4:	48 0e       	add	r4, r24
    45c6:	59 1e       	adc	r5, r25
    45c8:	6a 1e       	adc	r6, r26
    45ca:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    45cc:	9e e2       	ldi	r25, 0x2E	; 46
    45ce:	29 2e       	mov	r2, r25
    45d0:	31 2c       	mov	r3, r1
    45d2:	20 0e       	add	r2, r16
    45d4:	31 1e       	adc	r3, r17
    45d6:	f1 01       	movw	r30, r2
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	92 e0       	ldi	r25, 0x02	; 2
    45dc:	01 c0       	rjmp	.+2      	; 0x45e0 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    45de:	11 92       	st	Z+, r1
    45e0:	01 97       	sbiw	r24, 0x01	; 1
    45e2:	2f ef       	ldi	r18, 0xFF	; 255
    45e4:	8f 3f       	cpi	r24, 0xFF	; 255
    45e6:	92 07       	cpc	r25, r18
    45e8:	d1 f7       	brne	.-12     	; 0x45de <f_mkdir+0x144>
    45ea:	f1 01       	movw	r30, r2
    45ec:	8b e0       	ldi	r24, 0x0B	; 11
    45ee:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    45f0:	20 e2       	ldi	r18, 0x20	; 32
    45f2:	01 c0       	rjmp	.+2      	; 0x45f6 <f_mkdir+0x15c>
    45f4:	21 93       	st	Z+, r18
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	3f ef       	ldi	r19, 0xFF	; 255
    45fa:	8f 3f       	cpi	r24, 0xFF	; 255
    45fc:	93 07       	cpc	r25, r19
    45fe:	d1 f7       	brne	.-12     	; 0x45f4 <f_mkdir+0x15a>
    4600:	8e e2       	ldi	r24, 0x2E	; 46
    4602:	f8 01       	movw	r30, r16
    4604:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    4606:	80 e1       	ldi	r24, 0x10	; 16
    4608:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    460a:	0c 5b       	subi	r16, 0xBC	; 188
    460c:	1f 4f       	sbci	r17, 0xFF	; 255
    460e:	f8 01       	movw	r30, r16
    4610:	11 92       	st	Z+, r1
    4612:	11 92       	st	Z+, r1
    4614:	11 92       	st	Z+, r1
    4616:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4618:	88 a6       	std	Y+40, r8	; 0x28
    461a:	81 92       	st	Z+, r8
    461c:	8f 01       	movw	r16, r30
    461e:	89 2d       	mov	r24, r9
    4620:	99 27       	eor	r25, r25
    4622:	8f a3       	std	Y+39, r24	; 0x27
    4624:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4626:	c5 01       	movw	r24, r10
    4628:	aa 27       	eor	r26, r26
    462a:	bb 27       	eor	r27, r27
    462c:	8e a3       	std	Y+38, r24	; 0x26
    462e:	07 50       	subi	r16, 0x07	; 7
    4630:	10 40       	sbci	r17, 0x00	; 0
    4632:	f8 01       	movw	r30, r16
    4634:	81 93       	st	Z+, r24
    4636:	8f 01       	movw	r16, r30
    4638:	89 2f       	mov	r24, r25
    463a:	99 27       	eor	r25, r25
    463c:	8d a3       	std	Y+37, r24	; 0x25
    463e:	80 83       	st	Z, r24
    4640:	03 54       	subi	r16, 0x43	; 67
    4642:	10 40       	sbci	r17, 0x00	; 0
    4644:	f1 01       	movw	r30, r2
    4646:	20 e2       	ldi	r18, 0x20	; 32
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	03 c0       	rjmp	.+6      	; 0x4652 <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    464c:	80 81       	ld	r24, Z
    464e:	80 a3       	std	Z+32, r24	; 0x20
    4650:	31 96       	adiw	r30, 0x01	; 1
    4652:	21 50       	subi	r18, 0x01	; 1
    4654:	30 40       	sbci	r19, 0x00	; 0
    4656:	8f ef       	ldi	r24, 0xFF	; 255
    4658:	2f 3f       	cpi	r18, 0xFF	; 255
    465a:	38 07       	cpc	r19, r24
    465c:	b9 f7       	brne	.-18     	; 0x464c <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    465e:	01 5b       	subi	r16, 0xB1	; 177
    4660:	1f 4f       	sbci	r17, 0xFF	; 255
    4662:	8e e2       	ldi	r24, 0x2E	; 46
    4664:	f8 01       	movw	r30, r16
    4666:	80 83       	st	Z, r24
    4668:	0f 54       	subi	r16, 0x4F	; 79
    466a:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    466c:	2b 89       	ldd	r18, Y+19	; 0x13
    466e:	3c 89       	ldd	r19, Y+20	; 0x14
    4670:	4d 89       	ldd	r20, Y+21	; 0x15
    4672:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    4674:	ed 85       	ldd	r30, Y+13	; 0x0d
    4676:	fe 85       	ldd	r31, Y+14	; 0x0e
    4678:	80 81       	ld	r24, Z
    467a:	83 30       	cpi	r24, 0x03	; 3
    467c:	69 f4       	brne	.+26     	; 0x4698 <f_mkdir+0x1fe>
    467e:	82 a1       	ldd	r24, Z+34	; 0x22
    4680:	93 a1       	ldd	r25, Z+35	; 0x23
    4682:	a4 a1       	ldd	r26, Z+36	; 0x24
    4684:	b5 a1       	ldd	r27, Z+37	; 0x25
    4686:	28 17       	cp	r18, r24
    4688:	39 07       	cpc	r19, r25
    468a:	4a 07       	cpc	r20, r26
    468c:	5b 07       	cpc	r21, r27
    468e:	21 f4       	brne	.+8      	; 0x4698 <f_mkdir+0x1fe>
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e0       	ldi	r20, 0x00	; 0
    4696:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    4698:	08 59       	subi	r16, 0x98	; 152
    469a:	1f 4f       	sbci	r17, 0xFF	; 255
    469c:	f8 01       	movw	r30, r16
    469e:	21 93       	st	Z+, r18
    46a0:	8f 01       	movw	r16, r30
    46a2:	83 2f       	mov	r24, r19
    46a4:	99 27       	eor	r25, r25
    46a6:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    46a8:	ca 01       	movw	r24, r20
    46aa:	aa 27       	eor	r26, r26
    46ac:	bb 27       	eor	r27, r27
    46ae:	07 50       	subi	r16, 0x07	; 7
    46b0:	10 40       	sbci	r17, 0x00	; 0
    46b2:	f8 01       	movw	r30, r16
    46b4:	81 93       	st	Z+, r24
    46b6:	89 2f       	mov	r24, r25
    46b8:	99 27       	eor	r25, r25
    46ba:	80 83       	st	Z, r24
    46bc:	73 01       	movw	r14, r6
    46be:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    46c0:	01 e0       	ldi	r16, 0x01	; 1
    46c2:	1e c0       	rjmp	.+60     	; 0x4700 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46c4:	c2 a6       	std	Z+42, r12	; 0x2a
    46c6:	d3 a6       	std	Z+43, r13	; 0x2b
    46c8:	e4 a6       	std	Z+44, r14	; 0x2c
    46ca:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    46cc:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    46ce:	cf 01       	movw	r24, r30
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
    46dc:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    46de:	88 23       	and	r24, r24
    46e0:	e1 f5       	brne	.+120    	; 0x475a <f_mkdir+0x2c0>
    46e2:	f1 01       	movw	r30, r2
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	92 e0       	ldi	r25, 0x02	; 2
    46e8:	01 c0       	rjmp	.+2      	; 0x46ec <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    46ea:	11 92       	st	Z+, r1
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	2f ef       	ldi	r18, 0xFF	; 255
    46f0:	8f 3f       	cpi	r24, 0xFF	; 255
    46f2:	92 07       	cpc	r25, r18
    46f4:	d1 f7       	brne	.-12     	; 0x46ea <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46f6:	08 94       	sec
    46f8:	c1 1c       	adc	r12, r1
    46fa:	d1 1c       	adc	r13, r1
    46fc:	e1 1c       	adc	r14, r1
    46fe:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4700:	ed 85       	ldd	r30, Y+13	; 0x0d
    4702:	fe 85       	ldd	r31, Y+14	; 0x0e
    4704:	9c 2d       	mov	r25, r12
    4706:	94 19       	sub	r25, r4
    4708:	82 81       	ldd	r24, Z+2	; 0x02
    470a:	98 17       	cp	r25, r24
    470c:	d8 f2       	brcs	.-74     	; 0x46c4 <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    470e:	ce 01       	movw	r24, r28
    4710:	0d 96       	adiw	r24, 0x0d	; 13
    4712:	0e 94 a9 10 	call	0x2152	; 0x2152 <dir_register>
    4716:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4718:	88 23       	and	r24, r24
    471a:	39 f0       	breq	.+14     	; 0x472a <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    471c:	8d 85       	ldd	r24, Y+13	; 0x0d
    471e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4720:	b5 01       	movw	r22, r10
    4722:	a4 01       	movw	r20, r8
    4724:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <remove_chain>
    4728:	18 c0       	rjmp	.+48     	; 0x475a <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    472a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    472c:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    472e:	80 e1       	ldi	r24, 0x10	; 16
    4730:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    4732:	16 8a       	std	Z+22, r1	; 0x16
    4734:	17 8a       	std	Z+23, r1	; 0x17
    4736:	10 8e       	std	Z+24, r1	; 0x18
    4738:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    473a:	38 a5       	ldd	r19, Y+40	; 0x28
    473c:	32 8f       	std	Z+26, r19	; 0x1a
    473e:	8f a1       	ldd	r24, Y+39	; 0x27
    4740:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4742:	2e a1       	ldd	r18, Y+38	; 0x26
    4744:	24 8b       	std	Z+20, r18	; 0x14
    4746:	3d a1       	ldd	r19, Y+37	; 0x25
    4748:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    474a:	ed 85       	ldd	r30, Y+13	; 0x0d
    474c:	fe 85       	ldd	r31, Y+14	; 0x0e
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    4752:	cf 01       	movw	r24, r30
    4754:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sync>
    4758:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    475a:	81 2f       	mov	r24, r17
    475c:	a8 96       	adiw	r28, 0x28	; 40
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	df 90       	pop	r13
    4770:	cf 90       	pop	r12
    4772:	bf 90       	pop	r11
    4774:	af 90       	pop	r10
    4776:	9f 90       	pop	r9
    4778:	8f 90       	pop	r8
    477a:	7f 90       	pop	r7
    477c:	6f 90       	pop	r6
    477e:	5f 90       	pop	r5
    4780:	4f 90       	pop	r4
    4782:	3f 90       	pop	r3
    4784:	2f 90       	pop	r2
    4786:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    4788:	11 e0       	ldi	r17, 0x01	; 1
    478a:	e7 cf       	rjmp	.-50     	; 0x475a <f_mkdir+0x2c0>

0000478c <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    478c:	ef 92       	push	r14
    478e:	ff 92       	push	r15
    4790:	0f 93       	push	r16
    4792:	1f 93       	push	r17
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	a4 97       	sbiw	r28, 0x24	; 36
    479e:	cd bf       	out	0x3d, r28	; 61
    47a0:	de bf       	out	0x3e, r29	; 62
    47a2:	8b a3       	std	Y+35, r24	; 0x23
    47a4:	9c a3       	std	Y+36, r25	; 0x24
    47a6:	e6 2e       	mov	r14, r22
    47a8:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    47aa:	8e 01       	movw	r16, r28
    47ac:	03 5f       	subi	r16, 0xF3	; 243
    47ae:	1f 4f       	sbci	r17, 0xFF	; 255
    47b0:	ce 01       	movw	r24, r28
    47b2:	83 96       	adiw	r24, 0x23	; 35
    47b4:	b8 01       	movw	r22, r16
    47b6:	41 e0       	ldi	r20, 0x01	; 1
    47b8:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
	if (res == FR_OK) {
    47bc:	88 23       	and	r24, r24
    47be:	09 f5       	brne	.+66     	; 0x4802 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    47c0:	ce 01       	movw	r24, r28
    47c2:	01 96       	adiw	r24, 0x01	; 1
    47c4:	89 a3       	std	Y+33, r24	; 0x21
    47c6:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    47c8:	6b a1       	ldd	r22, Y+35	; 0x23
    47ca:	7c a1       	ldd	r23, Y+36	; 0x24
    47cc:	c8 01       	movw	r24, r16
    47ce:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    47d2:	88 23       	and	r24, r24
    47d4:	b1 f4       	brne	.+44     	; 0x4802 <f_chmod+0x76>
			dir = dj.dir;
    47d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47d8:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    47da:	30 97       	sbiw	r30, 0x00	; 0
    47dc:	11 f4       	brne	.+4      	; 0x47e2 <f_chmod+0x56>
    47de:	86 e0       	ldi	r24, 0x06	; 6
    47e0:	10 c0       	rjmp	.+32     	; 0x4802 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    47e2:	9f 2d       	mov	r25, r15
    47e4:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    47e6:	89 2f       	mov	r24, r25
    47e8:	80 95       	com	r24
    47ea:	23 85       	ldd	r18, Z+11	; 0x0b
    47ec:	82 23       	and	r24, r18
    47ee:	9e 21       	and	r25, r14
    47f0:	89 2b       	or	r24, r25
    47f2:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    47f4:	ed 85       	ldd	r30, Y+13	; 0x0d
    47f6:	fe 85       	ldd	r31, Y+14	; 0x0e
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    47fc:	cf 01       	movw	r24, r30
    47fe:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4802:	a4 96       	adiw	r28, 0x24	; 36
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	cf 91       	pop	r28
    480a:	df 91       	pop	r29
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	ff 90       	pop	r15
    4812:	ef 90       	pop	r14
    4814:	08 95       	ret

00004816 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    4816:	ef 92       	push	r14
    4818:	ff 92       	push	r15
    481a:	0f 93       	push	r16
    481c:	1f 93       	push	r17
    481e:	df 93       	push	r29
    4820:	cf 93       	push	r28
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
    4826:	a4 97       	sbiw	r28, 0x24	; 36
    4828:	cd bf       	out	0x3d, r28	; 61
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	8b a3       	std	Y+35, r24	; 0x23
    482e:	9c a3       	std	Y+36, r25	; 0x24
    4830:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4832:	4d e0       	ldi	r20, 0x0D	; 13
    4834:	e4 2e       	mov	r14, r20
    4836:	f1 2c       	mov	r15, r1
    4838:	ec 0e       	add	r14, r28
    483a:	fd 1e       	adc	r15, r29
    483c:	ce 01       	movw	r24, r28
    483e:	83 96       	adiw	r24, 0x23	; 35
    4840:	b7 01       	movw	r22, r14
    4842:	41 e0       	ldi	r20, 0x01	; 1
    4844:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
	if (res == FR_OK) {
    4848:	88 23       	and	r24, r24
    484a:	41 f5       	brne	.+80     	; 0x489c <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    484c:	ce 01       	movw	r24, r28
    484e:	01 96       	adiw	r24, 0x01	; 1
    4850:	89 a3       	std	Y+33, r24	; 0x21
    4852:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    4854:	6b a1       	ldd	r22, Y+35	; 0x23
    4856:	7c a1       	ldd	r23, Y+36	; 0x24
    4858:	c7 01       	movw	r24, r14
    485a:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    485e:	88 23       	and	r24, r24
    4860:	e9 f4       	brne	.+58     	; 0x489c <f_utime+0x86>
			dir = dj.dir;
    4862:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4864:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    4866:	30 97       	sbiw	r30, 0x00	; 0
    4868:	11 f4       	brne	.+4      	; 0x486e <f_utime+0x58>
    486a:	86 e0       	ldi	r24, 0x06	; 6
    486c:	17 c0       	rjmp	.+46     	; 0x489c <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    486e:	d8 01       	movw	r26, r16
    4870:	16 96       	adiw	r26, 0x06	; 6
    4872:	8c 91       	ld	r24, X
    4874:	16 97       	sbiw	r26, 0x06	; 6
    4876:	86 8b       	std	Z+22, r24	; 0x16
    4878:	17 96       	adiw	r26, 0x07	; 7
    487a:	8c 91       	ld	r24, X
    487c:	17 97       	sbiw	r26, 0x07	; 7
    487e:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4880:	14 96       	adiw	r26, 0x04	; 4
    4882:	8c 91       	ld	r24, X
    4884:	14 97       	sbiw	r26, 0x04	; 4
    4886:	80 8f       	std	Z+24, r24	; 0x18
    4888:	15 96       	adiw	r26, 0x05	; 5
    488a:	8c 91       	ld	r24, X
    488c:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    488e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4890:	fe 85       	ldd	r31, Y+14	; 0x0e
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4896:	cf 01       	movw	r24, r30
    4898:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    489c:	a4 96       	adiw	r28, 0x24	; 36
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	1f 91       	pop	r17
    48a8:	0f 91       	pop	r16
    48aa:	ff 90       	pop	r15
    48ac:	ef 90       	pop	r14
    48ae:	08 95       	ret

000048b0 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    48b0:	cf 92       	push	r12
    48b2:	df 92       	push	r13
    48b4:	ef 92       	push	r14
    48b6:	ff 92       	push	r15
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	df 93       	push	r29
    48be:	cf 93       	push	r28
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	cf 54       	subi	r28, 0x4F	; 79
    48c6:	d0 40       	sbci	r29, 0x00	; 0
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	de bf       	out	0x3e, r29	; 62
    48cc:	8e 01       	movw	r16, r28
    48ce:	02 5b       	subi	r16, 0xB2	; 178
    48d0:	1f 4f       	sbci	r17, 0xFF	; 255
    48d2:	d8 01       	movw	r26, r16
    48d4:	8d 93       	st	X+, r24
    48d6:	9c 93       	st	X, r25
    48d8:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    48da:	ce 01       	movw	r24, r28
    48dc:	01 96       	adiw	r24, 0x01	; 1
    48de:	8e ab       	std	Y+54, r24	; 0x36
    48e0:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    48e2:	a2 e2       	ldi	r26, 0x22	; 34
    48e4:	ea 2e       	mov	r14, r26
    48e6:	f1 2c       	mov	r15, r1
    48e8:	ec 0e       	add	r14, r28
    48ea:	fd 1e       	adc	r15, r29
    48ec:	c8 01       	movw	r24, r16
    48ee:	b7 01       	movw	r22, r14
    48f0:	41 e0       	ldi	r20, 0x01	; 1
    48f2:	0e 94 86 13 	call	0x270c	; 0x270c <chk_mounted>
	if (res == FR_OK) {
    48f6:	88 23       	and	r24, r24
    48f8:	09 f0       	breq	.+2      	; 0x48fc <f_rename+0x4c>
    48fa:	f4 c0       	rjmp	.+488    	; 0x4ae4 <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    48fc:	8a a1       	ldd	r24, Y+34	; 0x22
    48fe:	9b a1       	ldd	r25, Y+35	; 0x23
    4900:	88 af       	std	Y+56, r24	; 0x38
    4902:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    4904:	f8 01       	movw	r30, r16
    4906:	60 81       	ld	r22, Z
    4908:	71 81       	ldd	r23, Z+1	; 0x01
    490a:	c7 01       	movw	r24, r14
    490c:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4910:	88 23       	and	r24, r24
    4912:	09 f0       	breq	.+2      	; 0x4916 <f_rename+0x66>
    4914:	e7 c0       	rjmp	.+462    	; 0x4ae4 <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    4916:	8c a9       	ldd	r24, Y+52	; 0x34
    4918:	9d a9       	ldd	r25, Y+53	; 0x35
    491a:	00 97       	sbiw	r24, 0x00	; 0
    491c:	11 f4       	brne	.+4      	; 0x4922 <f_rename+0x72>
    491e:	84 e0       	ldi	r24, 0x04	; 4
    4920:	e1 c0       	rjmp	.+450    	; 0x4ae4 <f_rename+0x234>
    4922:	dc 01       	movw	r26, r24
    4924:	fe 01       	movw	r30, r28
    4926:	3d 96       	adiw	r30, 0x0d	; 13
    4928:	04 c0       	rjmp	.+8      	; 0x4932 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    492a:	1a 96       	adiw	r26, 0x0a	; 10
    492c:	8c 91       	ld	r24, X
    492e:	1a 97       	sbiw	r26, 0x0a	; 10
    4930:	81 93       	st	Z+, r24
    4932:	11 96       	adiw	r26, 0x01	; 1
    4934:	ee 15       	cp	r30, r14
    4936:	ff 05       	cpc	r31, r15
    4938:	c1 f7       	brne	.-16     	; 0x492a <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    493a:	de 01       	movw	r26, r28
    493c:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    493e:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4940:	9d 01       	movw	r18, r26
    4942:	02 c0       	rjmp	.+4      	; 0x4948 <f_rename+0x98>
    4944:	81 91       	ld	r24, Z+
    4946:	8d 93       	st	X+, r24
    4948:	e2 17       	cp	r30, r18
    494a:	f3 07       	cpc	r31, r19
    494c:	d9 f7       	brne	.-10     	; 0x4944 <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    494e:	8e 01       	movw	r16, r28
    4950:	08 5c       	subi	r16, 0xC8	; 200
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	c8 01       	movw	r24, r16
    4956:	b6 01       	movw	r22, r12
    4958:	0e 94 ad 11 	call	0x235a	; 0x235a <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    495c:	88 23       	and	r24, r24
    495e:	11 f4       	brne	.+4      	; 0x4964 <f_rename+0xb4>
    4960:	88 e0       	ldi	r24, 0x08	; 8
    4962:	c0 c0       	rjmp	.+384    	; 0x4ae4 <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    4964:	84 30       	cpi	r24, 0x04	; 4
    4966:	09 f0       	breq	.+2      	; 0x496a <f_rename+0xba>
    4968:	bd c0       	rjmp	.+378    	; 0x4ae4 <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    496a:	c8 01       	movw	r24, r16
    496c:	0e 94 a9 10 	call	0x2152	; 0x2152 <dir_register>
		if (res == FR_OK) {
    4970:	88 23       	and	r24, r24
    4972:	09 f0       	breq	.+2      	; 0x4976 <f_rename+0xc6>
    4974:	b7 c0       	rjmp	.+366    	; 0x4ae4 <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    4976:	fe 01       	movw	r30, r28
    4978:	e6 5b       	subi	r30, 0xB6	; 182
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	40 81       	ld	r20, Z
    497e:	51 81       	ldd	r21, Z+1	; 0x01
    4980:	da 01       	movw	r26, r20
    4982:	fe 01       	movw	r30, r28
    4984:	3f 96       	adiw	r30, 0x0f	; 15
    4986:	04 c0       	rjmp	.+8      	; 0x4990 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4988:	81 91       	ld	r24, Z+
    498a:	1c 96       	adiw	r26, 0x0c	; 12
    498c:	8c 93       	st	X, r24
    498e:	1c 97       	sbiw	r26, 0x0c	; 12
    4990:	11 96       	adiw	r26, 0x01	; 1
    4992:	ee 15       	cp	r30, r14
    4994:	ff 05       	cpc	r31, r15
    4996:	c1 f7       	brne	.-16     	; 0x4988 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    4998:	8d 85       	ldd	r24, Y+13	; 0x0d
    499a:	80 62       	ori	r24, 0x20	; 32
    499c:	da 01       	movw	r26, r20
    499e:	1b 96       	adiw	r26, 0x0b	; 11
    49a0:	8c 93       	st	X, r24
    49a2:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    49a4:	ea a1       	ldd	r30, Y+34	; 0x22
    49a6:	fb a1       	ldd	r31, Y+35	; 0x23
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    49ac:	1b 96       	adiw	r26, 0x0b	; 11
    49ae:	8c 91       	ld	r24, X
    49b0:	1b 97       	sbiw	r26, 0x0b	; 11
    49b2:	84 ff       	sbrs	r24, 4
    49b4:	8b c0       	rjmp	.+278    	; 0x4acc <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    49b6:	c8 ac       	ldd	r12, Y+56	; 0x38
    49b8:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    49ba:	5a 96       	adiw	r26, 0x1a	; 26
    49bc:	2c 91       	ld	r18, X
    49be:	5a 97       	sbiw	r26, 0x1a	; 26
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	54 96       	adiw	r26, 0x14	; 20
    49c4:	8c 91       	ld	r24, X
    49c6:	54 97       	sbiw	r26, 0x14	; 20
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	28 2b       	or	r18, r24
    49cc:	39 2b       	or	r19, r25
    49ce:	55 96       	adiw	r26, 0x15	; 21
    49d0:	9c 91       	ld	r25, X
    49d2:	55 97       	sbiw	r26, 0x15	; 21
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	28 2b       	or	r18, r24
    49d8:	39 2b       	or	r19, r25
    49da:	5b 96       	adiw	r26, 0x1b	; 27
    49dc:	9c 91       	ld	r25, X
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	28 2b       	or	r18, r24
    49e2:	39 2b       	or	r19, r25
    49e4:	79 01       	movw	r14, r18
    49e6:	00 e0       	ldi	r16, 0x00	; 0
    49e8:	10 e0       	ldi	r17, 0x00	; 0
    49ea:	8e ef       	ldi	r24, 0xFE	; 254
    49ec:	9f ef       	ldi	r25, 0xFF	; 255
    49ee:	af ef       	ldi	r26, 0xFF	; 255
    49f0:	bf ef       	ldi	r27, 0xFF	; 255
    49f2:	e8 0e       	add	r14, r24
    49f4:	f9 1e       	adc	r15, r25
    49f6:	0a 1f       	adc	r16, r26
    49f8:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    49fa:	f6 01       	movw	r30, r12
    49fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    49fe:	93 8d       	ldd	r25, Z+27	; 0x1b
    4a00:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4a02:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4a04:	02 97       	sbiw	r24, 0x02	; 2
    4a06:	a1 09       	sbc	r26, r1
    4a08:	b1 09       	sbc	r27, r1
    4a0a:	e8 16       	cp	r14, r24
    4a0c:	f9 06       	cpc	r15, r25
    4a0e:	0a 07       	cpc	r16, r26
    4a10:	1b 07       	cpc	r17, r27
    4a12:	08 f0       	brcs	.+2      	; 0x4a16 <f_rename+0x166>
    4a14:	66 c0       	rjmp	.+204    	; 0x4ae2 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4a16:	22 81       	ldd	r18, Z+2	; 0x02
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	40 e0       	ldi	r20, 0x00	; 0
    4a1c:	50 e0       	ldi	r21, 0x00	; 0
    4a1e:	c8 01       	movw	r24, r16
    4a20:	b7 01       	movw	r22, r14
    4a22:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    4a26:	ab 01       	movw	r20, r22
    4a28:	bc 01       	movw	r22, r24
    4a2a:	f6 01       	movw	r30, r12
    4a2c:	86 a1       	ldd	r24, Z+38	; 0x26
    4a2e:	97 a1       	ldd	r25, Z+39	; 0x27
    4a30:	a0 a5       	ldd	r26, Z+40	; 0x28
    4a32:	b1 a5       	ldd	r27, Z+41	; 0x29
    4a34:	48 0f       	add	r20, r24
    4a36:	59 1f       	adc	r21, r25
    4a38:	6a 1f       	adc	r22, r26
    4a3a:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4a3c:	41 15       	cp	r20, r1
    4a3e:	51 05       	cpc	r21, r1
    4a40:	61 05       	cpc	r22, r1
    4a42:	71 05       	cpc	r23, r1
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <f_rename+0x198>
    4a46:	4d c0       	rjmp	.+154    	; 0x4ae2 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4a48:	c6 01       	movw	r24, r12
    4a4a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <move_window>
					dir = dj_new.fs->win+32;
    4a4e:	a8 ad       	ldd	r26, Y+56	; 0x38
    4a50:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4a52:	88 23       	and	r24, r24
    4a54:	09 f0       	breq	.+2      	; 0x4a58 <f_rename+0x1a8>
    4a56:	46 c0       	rjmp	.+140    	; 0x4ae4 <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4a58:	bd 01       	movw	r22, r26
    4a5a:	62 5b       	subi	r22, 0xB2	; 178
    4a5c:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4a5e:	fb 01       	movw	r30, r22
    4a60:	81 81       	ldd	r24, Z+1	; 0x01
    4a62:	8e 32       	cpi	r24, 0x2E	; 46
    4a64:	99 f5       	brne	.+102    	; 0x4acc <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4a66:	8c 91       	ld	r24, X
    4a68:	83 30       	cpi	r24, 0x03	; 3
    4a6a:	b1 f4       	brne	.+44     	; 0x4a98 <f_rename+0x1e8>
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	fe 96       	adiw	r30, 0x3e	; 62
    4a70:	20 81       	ld	r18, Z
    4a72:	31 81       	ldd	r19, Z+1	; 0x01
    4a74:	42 81       	ldd	r20, Z+2	; 0x02
    4a76:	53 81       	ldd	r21, Z+3	; 0x03
    4a78:	92 96       	adiw	r26, 0x22	; 34
    4a7a:	8d 91       	ld	r24, X+
    4a7c:	9d 91       	ld	r25, X+
    4a7e:	0d 90       	ld	r0, X+
    4a80:	bc 91       	ld	r27, X
    4a82:	a0 2d       	mov	r26, r0
    4a84:	28 17       	cp	r18, r24
    4a86:	39 07       	cpc	r19, r25
    4a88:	4a 07       	cpc	r20, r26
    4a8a:	5b 07       	cpc	r21, r27
    4a8c:	29 f4       	brne	.+10     	; 0x4a98 <f_rename+0x1e8>
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	40 e0       	ldi	r20, 0x00	; 0
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	06 c0       	rjmp	.+12     	; 0x4aa4 <f_rename+0x1f4>
    4a98:	fe 01       	movw	r30, r28
    4a9a:	fe 96       	adiw	r30, 0x3e	; 62
    4a9c:	20 81       	ld	r18, Z
    4a9e:	31 81       	ldd	r19, Z+1	; 0x01
    4aa0:	42 81       	ldd	r20, Z+2	; 0x02
    4aa2:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4aa4:	db 01       	movw	r26, r22
    4aa6:	5a 96       	adiw	r26, 0x1a	; 26
    4aa8:	2c 93       	st	X, r18
    4aaa:	5a 97       	sbiw	r26, 0x1a	; 26
    4aac:	83 2f       	mov	r24, r19
    4aae:	99 27       	eor	r25, r25
    4ab0:	5b 96       	adiw	r26, 0x1b	; 27
    4ab2:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4ab4:	ca 01       	movw	r24, r20
    4ab6:	aa 27       	eor	r26, r26
    4ab8:	bb 27       	eor	r27, r27
    4aba:	fb 01       	movw	r30, r22
    4abc:	84 8b       	std	Z+20, r24	; 0x14
    4abe:	89 2f       	mov	r24, r25
    4ac0:	99 27       	eor	r25, r25
    4ac2:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4ac4:	e8 ad       	ldd	r30, Y+56	; 0x38
    4ac6:	f9 ad       	ldd	r31, Y+57	; 0x39
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4acc:	ce 01       	movw	r24, r28
    4ace:	82 96       	adiw	r24, 0x22	; 34
    4ad0:	0e 94 00 11 	call	0x2200	; 0x2200 <dir_remove>
				if (res == FR_OK)
    4ad4:	88 23       	and	r24, r24
    4ad6:	31 f4       	brne	.+12     	; 0x4ae4 <f_rename+0x234>
					res = sync(dj_old.fs);
    4ad8:	8a a1       	ldd	r24, Y+34	; 0x22
    4ada:	9b a1       	ldd	r25, Y+35	; 0x23
    4adc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sync>
    4ae0:	01 c0       	rjmp	.+2      	; 0x4ae4 <f_rename+0x234>
    4ae2:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4ae4:	c1 5b       	subi	r28, 0xB1	; 177
    4ae6:	df 4f       	sbci	r29, 0xFF	; 255
    4ae8:	cd bf       	out	0x3d, r28	; 61
    4aea:	de bf       	out	0x3e, r29	; 62
    4aec:	cf 91       	pop	r28
    4aee:	df 91       	pop	r29
    4af0:	1f 91       	pop	r17
    4af2:	0f 91       	pop	r16
    4af4:	ff 90       	pop	r15
    4af6:	ef 90       	pop	r14
    4af8:	df 90       	pop	r13
    4afa:	cf 90       	pop	r12
    4afc:	08 95       	ret

00004afe <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4afe:	2f 92       	push	r2
    4b00:	3f 92       	push	r3
    4b02:	4f 92       	push	r4
    4b04:	5f 92       	push	r5
    4b06:	6f 92       	push	r6
    4b08:	7f 92       	push	r7
    4b0a:	8f 92       	push	r8
    4b0c:	9f 92       	push	r9
    4b0e:	af 92       	push	r10
    4b10:	bf 92       	push	r11
    4b12:	cf 92       	push	r12
    4b14:	df 92       	push	r13
    4b16:	ef 92       	push	r14
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	df 93       	push	r29
    4b20:	cf 93       	push	r28
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	a4 97       	sbiw	r28, 0x24	; 36
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	68 a3       	std	Y+32, r22	; 0x20
    4b2e:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4b30:	82 30       	cpi	r24, 0x02	; 2
    4b32:	10 f0       	brcs	.+4      	; 0x4b38 <f_mkfs+0x3a>
    4b34:	8b e0       	ldi	r24, 0x0B	; 11
    4b36:	e2 c4       	rjmp	.+2500   	; 0x54fc <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4b38:	28 a1       	ldd	r18, Y+32	; 0x20
    4b3a:	22 30       	cpi	r18, 0x02	; 2
    4b3c:	08 f0       	brcs	.+2      	; 0x4b40 <f_mkfs+0x42>
    4b3e:	db c4       	rjmp	.+2486   	; 0x54f6 <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4b40:	a8 2f       	mov	r26, r24
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	aa 0f       	add	r26, r26
    4b46:	bb 1f       	adc	r27, r27
    4b48:	fd 01       	movw	r30, r26
    4b4a:	e6 52       	subi	r30, 0x26	; 38
    4b4c:	fc 4c       	sbci	r31, 0xCC	; 204
    4b4e:	c0 80       	ld	r12, Z
    4b50:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4b52:	c1 14       	cp	r12, r1
    4b54:	d1 04       	cpc	r13, r1
    4b56:	11 f4       	brne	.+4      	; 0x4b5c <f_mkfs+0x5e>
    4b58:	8c e0       	ldi	r24, 0x0C	; 12
    4b5a:	d0 c4       	rjmp	.+2464   	; 0x54fc <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4b5c:	f6 01       	movw	r30, r12
    4b5e:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4b60:	a2 58       	subi	r26, 0x82	; 130
    4b62:	b4 4d       	sbci	r27, 0xD4	; 212
    4b64:	fc 91       	ld	r31, X
    4b66:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4b68:	8f 2f       	mov	r24, r31
    4b6a:	0e 94 c2 05 	call	0xb84	; 0xb84 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4b6e:	80 ff       	sbrs	r24, 0
    4b70:	02 c0       	rjmp	.+4      	; 0x4b76 <f_mkfs+0x78>
    4b72:	83 e0       	ldi	r24, 0x03	; 3
    4b74:	c3 c4       	rjmp	.+2438   	; 0x54fc <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4b76:	82 ff       	sbrs	r24, 2
    4b78:	02 c0       	rjmp	.+4      	; 0x4b7e <f_mkfs+0x80>
    4b7a:	8a e0       	ldi	r24, 0x0A	; 10
    4b7c:	bf c4       	rjmp	.+2430   	; 0x54fc <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4b7e:	89 89       	ldd	r24, Y+17	; 0x11
    4b80:	61 e0       	ldi	r22, 0x01	; 1
    4b82:	ae 01       	movw	r20, r28
    4b84:	4f 5f       	subi	r20, 0xFF	; 255
    4b86:	5f 4f       	sbci	r21, 0xFF	; 255
    4b88:	0e 94 87 07 	call	0xf0e	; 0xf0e <disk_ioctl>
    4b8c:	88 23       	and	r24, r24
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <f_mkfs+0x94>
    4b90:	b2 c4       	rjmp	.+2404   	; 0x54f6 <f_mkfs+0x9f8>
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	9a 81       	ldd	r25, Y+2	; 0x02
    4b96:	ab 81       	ldd	r26, Y+3	; 0x03
    4b98:	bc 81       	ldd	r27, Y+4	; 0x04
    4b9a:	80 3d       	cpi	r24, 0xD0	; 208
    4b9c:	27 e0       	ldi	r18, 0x07	; 7
    4b9e:	92 07       	cpc	r25, r18
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	a2 07       	cpc	r26, r18
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	b2 07       	cpc	r27, r18
    4ba8:	08 f4       	brcc	.+2      	; 0x4bac <f_mkfs+0xae>
    4baa:	a5 c4       	rjmp	.+2378   	; 0x54f6 <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4bac:	81 50       	subi	r24, 0x01	; 1
    4bae:	90 40       	sbci	r25, 0x00	; 0
    4bb0:	a0 4d       	sbci	r26, 0xD0	; 208
    4bb2:	b7 40       	sbci	r27, 0x07	; 7
    4bb4:	40 f0       	brcs	.+16     	; 0x4bc6 <f_mkfs+0xc8>
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	a0 ed       	ldi	r26, 0xD0	; 208
    4bbc:	b7 e0       	ldi	r27, 0x07	; 7
    4bbe:	89 83       	std	Y+1, r24	; 0x01
    4bc0:	9a 83       	std	Y+2, r25	; 0x02
    4bc2:	ab 83       	std	Y+3, r26	; 0x03
    4bc4:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4bc6:	48 a1       	ldd	r20, Y+32	; 0x20
    4bc8:	44 23       	and	r20, r20
    4bca:	29 f0       	breq	.+10     	; 0x4bd6 <f_mkfs+0xd8>
    4bcc:	1a 8e       	std	Y+26, r1	; 0x1a
    4bce:	1b 8e       	std	Y+27, r1	; 0x1b
    4bd0:	1c 8e       	std	Y+28, r1	; 0x1c
    4bd2:	1d 8e       	std	Y+29, r1	; 0x1d
    4bd4:	08 c0       	rjmp	.+16     	; 0x4be6 <f_mkfs+0xe8>
    4bd6:	8f e3       	ldi	r24, 0x3F	; 63
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	a0 e0       	ldi	r26, 0x00	; 0
    4bdc:	b0 e0       	ldi	r27, 0x00	; 0
    4bde:	8a 8f       	std	Y+26, r24	; 0x1a
    4be0:	9b 8f       	std	Y+27, r25	; 0x1b
    4be2:	ac 8f       	std	Y+28, r26	; 0x1c
    4be4:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4be6:	89 80       	ldd	r8, Y+1	; 0x01
    4be8:	9a 80       	ldd	r9, Y+2	; 0x02
    4bea:	ab 80       	ldd	r10, Y+3	; 0x03
    4bec:	bc 80       	ldd	r11, Y+4	; 0x04
    4bee:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4bf0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4bf2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4bf4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4bf6:	82 1a       	sub	r8, r18
    4bf8:	93 0a       	sbc	r9, r19
    4bfa:	a4 0a       	sbc	r10, r20
    4bfc:	b5 0a       	sbc	r11, r21
    4bfe:	89 82       	std	Y+1, r8	; 0x01
    4c00:	9a 82       	std	Y+2, r9	; 0x02
    4c02:	ab 82       	std	Y+3, r10	; 0x03
    4c04:	bc 82       	std	Y+4, r11	; 0x04
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	92 e0       	ldi	r25, 0x02	; 2
    4c0a:	a0 e0       	ldi	r26, 0x00	; 0
    4c0c:	b0 e0       	ldi	r27, 0x00	; 0
    4c0e:	20 e0       	ldi	r18, 0x00	; 0
    4c10:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4c12:	73 01       	movw	r14, r6
    4c14:	00 e0       	ldi	r16, 0x00	; 0
    4c16:	10 e0       	ldi	r17, 0x00	; 0
    4c18:	09 c0       	rjmp	.+18     	; 0x4c2c <f_mkfs+0x12e>
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	aa 1f       	adc	r26, r26
    4c20:	bb 1f       	adc	r27, r27
    4c22:	2f 5f       	subi	r18, 0xFF	; 255
    4c24:	3f 4f       	sbci	r19, 0xFF	; 255
    4c26:	27 30       	cpi	r18, 0x07	; 7
    4c28:	31 05       	cpc	r19, r1
    4c2a:	31 f0       	breq	.+12     	; 0x4c38 <f_mkfs+0x13a>
    4c2c:	8e 15       	cp	r24, r14
    4c2e:	9f 05       	cpc	r25, r15
    4c30:	a0 07       	cpc	r26, r16
    4c32:	b1 07       	cpc	r27, r17
    4c34:	91 f7       	brne	.-28     	; 0x4c1a <f_mkfs+0x11c>
    4c36:	05 c0       	rjmp	.+10     	; 0x4c42 <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4c38:	8e 15       	cp	r24, r14
    4c3a:	9f 05       	cpc	r25, r15
    4c3c:	a0 07       	cpc	r26, r16
    4c3e:	b1 07       	cpc	r27, r17
    4c40:	19 f4       	brne	.+6      	; 0x4c48 <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4c42:	61 14       	cp	r6, r1
    4c44:	71 04       	cpc	r7, r1
    4c46:	11 f5       	brne	.+68     	; 0x4c8c <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4c48:	eb ed       	ldi	r30, 0xDB	; 219
    4c4a:	f2 e3       	ldi	r31, 0x32	; 50
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e0       	ldi	r20, 0x00	; 0
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	81 91       	ld	r24, Z+
    4c56:	91 91       	ld	r25, Z+
    4c58:	a1 91       	ld	r26, Z+
    4c5a:	b1 91       	ld	r27, Z+
    4c5c:	b9 01       	movw	r22, r18
    4c5e:	14 2f       	mov	r17, r20
    4c60:	05 2f       	mov	r16, r21
    4c62:	2f 5f       	subi	r18, 0xFF	; 255
    4c64:	3f 4f       	sbci	r19, 0xFF	; 255
    4c66:	4f 4f       	sbci	r20, 0xFF	; 255
    4c68:	5f 4f       	sbci	r21, 0xFF	; 255
    4c6a:	88 16       	cp	r8, r24
    4c6c:	99 06       	cpc	r9, r25
    4c6e:	aa 06       	cpc	r10, r26
    4c70:	bb 06       	cpc	r11, r27
    4c72:	80 f3       	brcs	.-32     	; 0x4c54 <f_mkfs+0x156>
    4c74:	cb 01       	movw	r24, r22
    4c76:	6d 83       	std	Y+5, r22	; 0x05
    4c78:	9e 83       	std	Y+6, r25	; 0x06
    4c7a:	1f 83       	std	Y+7, r17	; 0x07
    4c7c:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4c7e:	fb 01       	movw	r30, r22
    4c80:	ee 0f       	add	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	eb 53       	subi	r30, 0x3B	; 59
    4c86:	fd 4c       	sbci	r31, 0xCD	; 205
    4c88:	60 80       	ld	r6, Z
    4c8a:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	63 16       	cp	r6, r19
    4c90:	32 e0       	ldi	r19, 0x02	; 2
    4c92:	73 06       	cpc	r7, r19
    4c94:	18 f4       	brcc	.+6      	; 0x4c9c <f_mkfs+0x19e>
    4c96:	61 2c       	mov	r6, r1
    4c98:	f2 e0       	ldi	r31, 0x02	; 2
    4c9a:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4c9c:	13 01       	movw	r2, r6
    4c9e:	23 2c       	mov	r2, r3
    4ca0:	33 24       	eor	r3, r3
    4ca2:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4ca4:	c1 01       	movw	r24, r2
    4ca6:	a0 e0       	ldi	r26, 0x00	; 0
    4ca8:	b0 e0       	ldi	r27, 0x00	; 0
    4caa:	8d 87       	std	Y+13, r24	; 0x0d
    4cac:	9e 87       	std	Y+14, r25	; 0x0e
    4cae:	af 87       	std	Y+15, r26	; 0x0f
    4cb0:	b8 8b       	std	Y+16, r27	; 0x10
    4cb2:	c5 01       	movw	r24, r10
    4cb4:	b4 01       	movw	r22, r8
    4cb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cba:	4f 85       	ldd	r20, Y+15	; 0x0f
    4cbc:	58 89       	ldd	r21, Y+16	; 0x10
    4cbe:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    4cc2:	c9 01       	movw	r24, r18
    4cc4:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4cc6:	85 3f       	cpi	r24, 0xF5	; 245
    4cc8:	ef e0       	ldi	r30, 0x0F	; 15
    4cca:	9e 07       	cpc	r25, r30
    4ccc:	e0 e0       	ldi	r30, 0x00	; 0
    4cce:	ae 07       	cpc	r26, r30
    4cd0:	e0 e0       	ldi	r30, 0x00	; 0
    4cd2:	be 07       	cpc	r27, r30
    4cd4:	08 f4       	brcc	.+2      	; 0x4cd8 <f_mkfs+0x1da>
    4cd6:	28 c4       	rjmp	.+2128   	; 0x5528 <f_mkfs+0xa2a>
    4cd8:	f8 a1       	ldd	r31, Y+32	; 0x20
    4cda:	2f 2f       	mov	r18, r31
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4cde:	85 3f       	cpi	r24, 0xF5	; 245
    4ce0:	4f ef       	ldi	r20, 0xFF	; 255
    4ce2:	94 07       	cpc	r25, r20
    4ce4:	40 e0       	ldi	r20, 0x00	; 0
    4ce6:	a4 07       	cpc	r26, r20
    4ce8:	40 e0       	ldi	r20, 0x00	; 0
    4cea:	b4 07       	cpc	r27, r20
    4cec:	50 f5       	brcc	.+84     	; 0x4d42 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4cee:	7c 01       	movw	r14, r24
    4cf0:	8d 01       	movw	r16, r26
    4cf2:	ee 0c       	add	r14, r14
    4cf4:	ff 1c       	adc	r15, r15
    4cf6:	00 1f       	adc	r16, r16
    4cf8:	11 1f       	adc	r17, r17
    4cfa:	83 e0       	ldi	r24, 0x03	; 3
    4cfc:	92 e0       	ldi	r25, 0x02	; 2
    4cfe:	a0 e0       	ldi	r26, 0x00	; 0
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	e8 0e       	add	r14, r24
    4d04:	f9 1e       	adc	r15, r25
    4d06:	0a 1f       	adc	r16, r26
    4d08:	1b 1f       	adc	r17, r27
    4d0a:	69 e0       	ldi	r22, 0x09	; 9
    4d0c:	16 95       	lsr	r17
    4d0e:	07 95       	ror	r16
    4d10:	f7 94       	ror	r15
    4d12:	e7 94       	ror	r14
    4d14:	6a 95       	dec	r22
    4d16:	d1 f7       	brne	.-12     	; 0x4d0c <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4d18:	2f 5f       	subi	r18, 0xFF	; 255
    4d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1c:	c9 01       	movw	r24, r18
    4d1e:	aa 27       	eor	r26, r26
    4d20:	97 fd       	sbrc	r25, 7
    4d22:	a0 95       	com	r26
    4d24:	ba 2f       	mov	r27, r26
    4d26:	8e 8b       	std	Y+22, r24	; 0x16
    4d28:	9f 8b       	std	Y+23, r25	; 0x17
    4d2a:	a8 8f       	std	Y+24, r26	; 0x18
    4d2c:	b9 8f       	std	Y+25, r27	; 0x19
    4d2e:	20 e2       	ldi	r18, 0x20	; 32
    4d30:	30 e0       	ldi	r19, 0x00	; 0
    4d32:	40 e0       	ldi	r20, 0x00	; 0
    4d34:	50 e0       	ldi	r21, 0x00	; 0
    4d36:	2a 8b       	std	Y+18, r18	; 0x12
    4d38:	3b 8b       	std	Y+19, r19	; 0x13
    4d3a:	4c 8b       	std	Y+20, r20	; 0x14
    4d3c:	5d 8b       	std	Y+21, r21	; 0x15
    4d3e:	32 e0       	ldi	r19, 0x02	; 2
    4d40:	2a c0       	rjmp	.+84     	; 0x4d96 <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4d42:	7c 01       	movw	r14, r24
    4d44:	8d 01       	movw	r16, r26
    4d46:	52 e0       	ldi	r21, 0x02	; 2
    4d48:	ee 0c       	add	r14, r14
    4d4a:	ff 1c       	adc	r15, r15
    4d4c:	00 1f       	adc	r16, r16
    4d4e:	11 1f       	adc	r17, r17
    4d50:	5a 95       	dec	r21
    4d52:	d1 f7       	brne	.-12     	; 0x4d48 <f_mkfs+0x24a>
    4d54:	87 e0       	ldi	r24, 0x07	; 7
    4d56:	92 e0       	ldi	r25, 0x02	; 2
    4d58:	a0 e0       	ldi	r26, 0x00	; 0
    4d5a:	b0 e0       	ldi	r27, 0x00	; 0
    4d5c:	e8 0e       	add	r14, r24
    4d5e:	f9 1e       	adc	r15, r25
    4d60:	0a 1f       	adc	r16, r26
    4d62:	1b 1f       	adc	r17, r27
    4d64:	49 e0       	ldi	r20, 0x09	; 9
    4d66:	16 95       	lsr	r17
    4d68:	07 95       	ror	r16
    4d6a:	f7 94       	ror	r15
    4d6c:	e7 94       	ror	r14
    4d6e:	4a 95       	dec	r20
    4d70:	d1 f7       	brne	.-12     	; 0x4d66 <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4d72:	81 e2       	ldi	r24, 0x21	; 33
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	82 1b       	sub	r24, r18
    4d78:	93 0b       	sbc	r25, r19
    4d7a:	9c 01       	movw	r18, r24
    4d7c:	44 27       	eor	r20, r20
    4d7e:	37 fd       	sbrc	r19, 7
    4d80:	40 95       	com	r20
    4d82:	54 2f       	mov	r21, r20
    4d84:	2e 8b       	std	Y+22, r18	; 0x16
    4d86:	3f 8b       	std	Y+23, r19	; 0x17
    4d88:	48 8f       	std	Y+24, r20	; 0x18
    4d8a:	59 8f       	std	Y+25, r21	; 0x19
    4d8c:	1a 8a       	std	Y+18, r1	; 0x12
    4d8e:	1b 8a       	std	Y+19, r1	; 0x13
    4d90:	1c 8a       	std	Y+20, r1	; 0x14
    4d92:	1d 8a       	std	Y+21, r1	; 0x15
    4d94:	33 e0       	ldi	r19, 0x03	; 3
    4d96:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4d98:	89 89       	ldd	r24, Y+17	; 0x11
    4d9a:	63 e0       	ldi	r22, 0x03	; 3
    4d9c:	ae 01       	movw	r20, r28
    4d9e:	4b 5f       	subi	r20, 0xFB	; 251
    4da0:	5f 4f       	sbci	r21, 0xFF	; 255
    4da2:	0e 94 87 07 	call	0xf0e	; 0xf0e <disk_ioctl>
    4da6:	88 23       	and	r24, r24
    4da8:	09 f0       	breq	.+2      	; 0x4dac <f_mkfs+0x2ae>
    4daa:	a5 c3       	rjmp	.+1866   	; 0x54f6 <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4dac:	8e 89       	ldd	r24, Y+22	; 0x16
    4dae:	9f 89       	ldd	r25, Y+23	; 0x17
    4db0:	a8 8d       	ldd	r26, Y+24	; 0x18
    4db2:	b9 8d       	ldd	r27, Y+25	; 0x19
    4db4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4db6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4db8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4dba:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4dbc:	82 0f       	add	r24, r18
    4dbe:	93 1f       	adc	r25, r19
    4dc0:	a4 1f       	adc	r26, r20
    4dc2:	b5 1f       	adc	r27, r21
    4dc4:	89 87       	std	Y+9, r24	; 0x09
    4dc6:	9a 87       	std	Y+10, r25	; 0x0a
    4dc8:	ab 87       	std	Y+11, r26	; 0x0b
    4dca:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4dcc:	2a 89       	ldd	r18, Y+18	; 0x12
    4dce:	3b 89       	ldd	r19, Y+19	; 0x13
    4dd0:	4c 89       	ldd	r20, Y+20	; 0x14
    4dd2:	5d 89       	ldd	r21, Y+21	; 0x15
    4dd4:	2e 0d       	add	r18, r14
    4dd6:	3f 1d       	adc	r19, r15
    4dd8:	40 1f       	adc	r20, r16
    4dda:	51 1f       	adc	r21, r17
    4ddc:	28 0f       	add	r18, r24
    4dde:	39 1f       	adc	r19, r25
    4de0:	4a 1f       	adc	r20, r26
    4de2:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4de4:	8d 81       	ldd	r24, Y+5	; 0x05
    4de6:	9e 81       	ldd	r25, Y+6	; 0x06
    4de8:	af 81       	ldd	r26, Y+7	; 0x07
    4dea:	b8 85       	ldd	r27, Y+8	; 0x08
    4dec:	4c 01       	movw	r8, r24
    4dee:	5d 01       	movw	r10, r26
    4df0:	08 94       	sec
    4df2:	81 08       	sbc	r8, r1
    4df4:	91 08       	sbc	r9, r1
    4df6:	a1 08       	sbc	r10, r1
    4df8:	b1 08       	sbc	r11, r1
    4dfa:	82 0e       	add	r8, r18
    4dfc:	93 1e       	adc	r9, r19
    4dfe:	a4 1e       	adc	r10, r20
    4e00:	b5 1e       	adc	r11, r21
    4e02:	b0 95       	com	r27
    4e04:	a0 95       	com	r26
    4e06:	90 95       	com	r25
    4e08:	81 95       	neg	r24
    4e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0c:	af 4f       	sbci	r26, 0xFF	; 255
    4e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e10:	88 22       	and	r8, r24
    4e12:	99 22       	and	r9, r25
    4e14:	aa 22       	and	r10, r26
    4e16:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4e18:	27 01       	movw	r4, r14
    4e1a:	38 01       	movw	r6, r16
    4e1c:	42 1a       	sub	r4, r18
    4e1e:	53 0a       	sbc	r5, r19
    4e20:	64 0a       	sbc	r6, r20
    4e22:	75 0a       	sbc	r7, r21
    4e24:	48 0c       	add	r4, r8
    4e26:	59 1c       	adc	r5, r9
    4e28:	6a 1c       	adc	r6, r10
    4e2a:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4e2c:	e9 80       	ldd	r14, Y+1	; 0x01
    4e2e:	fa 80       	ldd	r15, Y+2	; 0x02
    4e30:	0b 81       	ldd	r16, Y+3	; 0x03
    4e32:	1c 81       	ldd	r17, Y+4	; 0x04
    4e34:	c8 01       	movw	r24, r16
    4e36:	b7 01       	movw	r22, r14
    4e38:	2e 89       	ldd	r18, Y+22	; 0x16
    4e3a:	3f 89       	ldd	r19, Y+23	; 0x17
    4e3c:	48 8d       	ldd	r20, Y+24	; 0x18
    4e3e:	59 8d       	ldd	r21, Y+25	; 0x19
    4e40:	62 1b       	sub	r22, r18
    4e42:	73 0b       	sbc	r23, r19
    4e44:	84 0b       	sbc	r24, r20
    4e46:	95 0b       	sbc	r25, r21
    4e48:	64 19       	sub	r22, r4
    4e4a:	75 09       	sbc	r23, r5
    4e4c:	86 09       	sbc	r24, r6
    4e4e:	97 09       	sbc	r25, r7
    4e50:	2a 89       	ldd	r18, Y+18	; 0x12
    4e52:	3b 89       	ldd	r19, Y+19	; 0x13
    4e54:	4c 89       	ldd	r20, Y+20	; 0x14
    4e56:	5d 89       	ldd	r21, Y+21	; 0x15
    4e58:	62 1b       	sub	r22, r18
    4e5a:	73 0b       	sbc	r23, r19
    4e5c:	84 0b       	sbc	r24, r20
    4e5e:	95 0b       	sbc	r25, r21
    4e60:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e62:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e64:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e66:	58 89       	ldd	r21, Y+16	; 0x10
    4e68:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    4e6c:	29 a3       	std	Y+33, r18	; 0x21
    4e6e:	3a a3       	std	Y+34, r19	; 0x22
    4e70:	4b a3       	std	Y+35, r20	; 0x23
    4e72:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4e74:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4e76:	32 30       	cpi	r19, 0x02	; 2
    4e78:	51 f4       	brne	.+20     	; 0x4e8e <f_mkfs+0x390>
    4e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    4e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    4e7e:	ab a1       	ldd	r26, Y+35	; 0x23
    4e80:	bc a1       	ldd	r27, Y+36	; 0x24
    4e82:	85 5f       	subi	r24, 0xF5	; 245
    4e84:	9f 40       	sbci	r25, 0x0F	; 15
    4e86:	a0 40       	sbci	r26, 0x00	; 0
    4e88:	b0 40       	sbci	r27, 0x00	; 0
    4e8a:	70 f4       	brcc	.+28     	; 0x4ea8 <f_mkfs+0x3aa>
    4e8c:	34 c3       	rjmp	.+1640   	; 0x54f6 <f_mkfs+0x9f8>
    4e8e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4e90:	f3 30       	cpi	r31, 0x03	; 3
    4e92:	51 f4       	brne	.+20     	; 0x4ea8 <f_mkfs+0x3aa>
    4e94:	29 a1       	ldd	r18, Y+33	; 0x21
    4e96:	3a a1       	ldd	r19, Y+34	; 0x22
    4e98:	4b a1       	ldd	r20, Y+35	; 0x23
    4e9a:	5c a1       	ldd	r21, Y+36	; 0x24
    4e9c:	25 5f       	subi	r18, 0xF5	; 245
    4e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea0:	40 40       	sbci	r20, 0x00	; 0
    4ea2:	50 40       	sbci	r21, 0x00	; 0
    4ea4:	08 f4       	brcc	.+2      	; 0x4ea8 <f_mkfs+0x3aa>
    4ea6:	27 c3       	rjmp	.+1614   	; 0x54f6 <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4ea8:	8d 82       	std	Y+5, r8	; 0x05
    4eaa:	9e 82       	std	Y+6, r9	; 0x06
    4eac:	af 82       	std	Y+7, r10	; 0x07
    4eae:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4eb0:	98 a1       	ldd	r25, Y+32	; 0x20
    4eb2:	99 23       	and	r25, r25
    4eb4:	11 f0       	breq	.+4      	; 0x4eba <f_mkfs+0x3bc>
    4eb6:	10 ef       	ldi	r17, 0xF0	; 240
    4eb8:	9c c0       	rjmp	.+312    	; 0x4ff2 <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4eba:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ebc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4ebe:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4ec0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4ec2:	4e 0d       	add	r20, r14
    4ec4:	5f 1d       	adc	r21, r15
    4ec6:	60 1f       	adc	r22, r16
    4ec8:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4eca:	3e e2       	ldi	r19, 0x2E	; 46
    4ecc:	e3 2e       	mov	r14, r19
    4ece:	f1 2c       	mov	r15, r1
    4ed0:	ec 0c       	add	r14, r12
    4ed2:	fd 1c       	adc	r15, r13
    4ed4:	f7 01       	movw	r30, r14
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	32 e0       	ldi	r19, 0x02	; 2
    4eda:	01 c0       	rjmp	.+2      	; 0x4ede <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4edc:	11 92       	st	Z+, r1
    4ede:	21 50       	subi	r18, 0x01	; 1
    4ee0:	30 40       	sbci	r19, 0x00	; 0
    4ee2:	af ef       	ldi	r26, 0xFF	; 255
    4ee4:	2f 3f       	cpi	r18, 0xFF	; 255
    4ee6:	3a 07       	cpc	r19, r26
    4ee8:	c9 f7       	brne	.-14     	; 0x4edc <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4eea:	86 01       	movw	r16, r12
    4eec:	04 51       	subi	r16, 0x14	; 20
    4eee:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4ef0:	80 e8       	ldi	r24, 0x80	; 128
    4ef2:	f8 01       	movw	r30, r16
    4ef4:	80 83       	st	Z, r24
    4ef6:	81 e0       	ldi	r24, 0x01	; 1
    4ef8:	81 83       	std	Z+1, r24	; 0x01
    4efa:	82 83       	std	Z+2, r24	; 0x02
    4efc:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4efe:	40 30       	cpi	r20, 0x00	; 0
    4f00:	f4 e0       	ldi	r31, 0x04	; 4
    4f02:	5f 07       	cpc	r21, r31
    4f04:	fb ef       	ldi	r31, 0xFB	; 251
    4f06:	6f 07       	cpc	r22, r31
    4f08:	f0 e0       	ldi	r31, 0x00	; 0
    4f0a:	7f 07       	cpc	r23, r31
    4f0c:	b0 f4       	brcc	.+44     	; 0x4f3a <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4f0e:	cb 01       	movw	r24, r22
    4f10:	ba 01       	movw	r22, r20
    4f12:	21 ec       	ldi	r18, 0xC1	; 193
    4f14:	3e e3       	ldi	r19, 0x3E	; 62
    4f16:	40 e0       	ldi	r20, 0x00	; 0
    4f18:	50 e0       	ldi	r21, 0x00	; 0
    4f1a:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    4f1e:	c9 01       	movw	r24, r18
    4f20:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4f22:	f8 01       	movw	r30, r16
    4f24:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4f26:	22 e0       	ldi	r18, 0x02	; 2
    4f28:	b6 95       	lsr	r27
    4f2a:	a7 95       	ror	r26
    4f2c:	97 95       	ror	r25
    4f2e:	87 95       	ror	r24
    4f30:	2a 95       	dec	r18
    4f32:	d1 f7       	brne	.-12     	; 0x4f28 <f_mkfs+0x42a>
    4f34:	8f 63       	ori	r24, 0x3F	; 63
    4f36:	86 83       	std	Z+6, r24	; 0x06
    4f38:	07 c0       	rjmp	.+14     	; 0x4f48 <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	d8 01       	movw	r26, r16
    4f3e:	16 96       	adiw	r26, 0x06	; 6
    4f40:	8c 93       	st	X, r24
    4f42:	16 97       	sbiw	r26, 0x06	; 6
    4f44:	17 96       	adiw	r26, 0x07	; 7
    4f46:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4f48:	8e ef       	ldi	r24, 0xFE	; 254
    4f4a:	f8 01       	movw	r30, r16
    4f4c:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4f4e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4f50:	f3 30       	cpi	r31, 0x03	; 3
    4f52:	81 f0       	breq	.+32     	; 0x4f74 <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4f54:	89 81       	ldd	r24, Y+1	; 0x01
    4f56:	9a 81       	ldd	r25, Y+2	; 0x02
    4f58:	ab 81       	ldd	r26, Y+3	; 0x03
    4f5a:	bc 81       	ldd	r27, Y+4	; 0x04
    4f5c:	80 50       	subi	r24, 0x00	; 0
    4f5e:	90 40       	sbci	r25, 0x00	; 0
    4f60:	a1 40       	sbci	r26, 0x01	; 1
    4f62:	b0 40       	sbci	r27, 0x00	; 0
    4f64:	10 f0       	brcs	.+4      	; 0x4f6a <f_mkfs+0x46c>
    4f66:	86 e0       	ldi	r24, 0x06	; 6
    4f68:	01 c0       	rjmp	.+2      	; 0x4f6c <f_mkfs+0x46e>
    4f6a:	84 e0       	ldi	r24, 0x04	; 4
    4f6c:	d8 01       	movw	r26, r16
    4f6e:	14 96       	adiw	r26, 0x04	; 4
    4f70:	8c 93       	st	X, r24
    4f72:	03 c0       	rjmp	.+6      	; 0x4f7a <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4f74:	8c e0       	ldi	r24, 0x0C	; 12
    4f76:	f8 01       	movw	r30, r16
    4f78:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4f7a:	8f e3       	ldi	r24, 0x3F	; 63
    4f7c:	d8 01       	movw	r26, r16
    4f7e:	18 96       	adiw	r26, 0x08	; 8
    4f80:	8c 93       	st	X, r24
    4f82:	18 97       	sbiw	r26, 0x08	; 8
    4f84:	19 96       	adiw	r26, 0x09	; 9
    4f86:	1c 92       	st	X, r1
    4f88:	19 97       	sbiw	r26, 0x09	; 9
    4f8a:	1a 96       	adiw	r26, 0x0a	; 10
    4f8c:	1c 92       	st	X, r1
    4f8e:	1a 97       	sbiw	r26, 0x0a	; 10
    4f90:	1b 96       	adiw	r26, 0x0b	; 11
    4f92:	1c 92       	st	X, r1
    4f94:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	1c 96       	adiw	r26, 0x0c	; 12
    4f9a:	8c 93       	st	X, r24
    4f9c:	1c 97       	sbiw	r26, 0x0c	; 12
    4f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa0:	1d 96       	adiw	r26, 0x0d	; 13
    4fa2:	8c 93       	st	X, r24
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa8:	ab 81       	ldd	r26, Y+3	; 0x03
    4faa:	bc 81       	ldd	r27, Y+4	; 0x04
    4fac:	cd 01       	movw	r24, r26
    4fae:	aa 27       	eor	r26, r26
    4fb0:	bb 27       	eor	r27, r27
    4fb2:	f8 01       	movw	r30, r16
    4fb4:	86 87       	std	Z+14, r24	; 0x0e
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fba:	ab 81       	ldd	r26, Y+3	; 0x03
    4fbc:	bc 81       	ldd	r27, Y+4	; 0x04
    4fbe:	8b 2f       	mov	r24, r27
    4fc0:	99 27       	eor	r25, r25
    4fc2:	aa 27       	eor	r26, r26
    4fc4:	bb 27       	eor	r27, r27
    4fc6:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4fc8:	00 5c       	subi	r16, 0xC0	; 192
    4fca:	1f 4f       	sbci	r17, 0xFF	; 255
    4fcc:	85 e5       	ldi	r24, 0x55	; 85
    4fce:	d8 01       	movw	r26, r16
    4fd0:	8d 93       	st	X+, r24
    4fd2:	fd 01       	movw	r30, r26
    4fd4:	8a ea       	ldi	r24, 0xAA	; 170
    4fd6:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4fd8:	89 89       	ldd	r24, Y+17	; 0x11
    4fda:	b7 01       	movw	r22, r14
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	40 e0       	ldi	r20, 0x00	; 0
    4fe2:	50 e0       	ldi	r21, 0x00	; 0
    4fe4:	01 e0       	ldi	r16, 0x01	; 1
    4fe6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    4fea:	88 23       	and	r24, r24
    4fec:	09 f0       	breq	.+2      	; 0x4ff0 <f_mkfs+0x4f2>
    4fee:	85 c2       	rjmp	.+1290   	; 0x54fa <f_mkfs+0x9fc>
    4ff0:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    4ff2:	5e e2       	ldi	r21, 0x2E	; 46
    4ff4:	e5 2e       	mov	r14, r21
    4ff6:	f1 2c       	mov	r15, r1
    4ff8:	ec 0c       	add	r14, r12
    4ffa:	fd 1c       	adc	r15, r13
    4ffc:	f7 01       	movw	r30, r14
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	92 e0       	ldi	r25, 0x02	; 2
    5002:	01 c0       	rjmp	.+2      	; 0x5006 <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5004:	11 92       	st	Z+, r1
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	bf ef       	ldi	r27, 0xFF	; 255
    500a:	8f 3f       	cpi	r24, 0xFF	; 255
    500c:	9b 07       	cpc	r25, r27
    500e:	d1 f7       	brne	.-12     	; 0x5004 <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    5010:	8b ee       	ldi	r24, 0xEB	; 235
    5012:	f6 01       	movw	r30, r12
    5014:	86 a7       	std	Z+46, r24	; 0x2e
    5016:	8e ef       	ldi	r24, 0xFE	; 254
    5018:	87 a7       	std	Z+47, r24	; 0x2f
    501a:	80 e9       	ldi	r24, 0x90	; 144
    501c:	80 ab       	std	Z+48, r24	; 0x30
    501e:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    5020:	11 ae       	std	Z+57, r1	; 0x39
    5022:	82 e0       	ldi	r24, 0x02	; 2
    5024:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    5026:	2e 8e       	std	Y+30, r2	; 0x1e
    5028:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    502a:	2e 89       	ldd	r18, Y+22	; 0x16
    502c:	24 af       	std	Z+60, r18	; 0x3c
    502e:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    5034:	8a 89       	ldd	r24, Y+18	; 0x12
    5036:	9b 89       	ldd	r25, Y+19	; 0x13
    5038:	ac 89       	ldd	r26, Y+20	; 0x14
    503a:	bd 89       	ldd	r27, Y+21	; 0x15
    503c:	44 e0       	ldi	r20, 0x04	; 4
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	aa 1f       	adc	r26, r26
    5044:	bb 1f       	adc	r27, r27
    5046:	4a 95       	dec	r20
    5048:	d1 f7       	brne	.-12     	; 0x503e <f_mkfs+0x540>
    504a:	87 af       	std	Z+63, r24	; 0x3f
    504c:	40 e4       	ldi	r20, 0x40	; 64
    504e:	50 e0       	ldi	r21, 0x00	; 0
    5050:	c4 0e       	add	r12, r20
    5052:	d5 1e       	adc	r13, r21
    5054:	89 2f       	mov	r24, r25
    5056:	99 27       	eor	r25, r25
    5058:	d6 01       	movw	r26, r12
    505a:	8c 93       	st	X, r24
    505c:	e0 ec       	ldi	r30, 0xC0	; 192
    505e:	ff ef       	ldi	r31, 0xFF	; 255
    5060:	ce 0e       	add	r12, r30
    5062:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    5064:	89 81       	ldd	r24, Y+1	; 0x01
    5066:	9a 81       	ldd	r25, Y+2	; 0x02
    5068:	ab 81       	ldd	r26, Y+3	; 0x03
    506a:	bc 81       	ldd	r27, Y+4	; 0x04
    506c:	80 30       	cpi	r24, 0x00	; 0
    506e:	f0 e0       	ldi	r31, 0x00	; 0
    5070:	9f 07       	cpc	r25, r31
    5072:	f1 e0       	ldi	r31, 0x01	; 1
    5074:	af 07       	cpc	r26, r31
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	bf 07       	cpc	r27, r31
    507a:	60 f4       	brcc	.+24     	; 0x5094 <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    507c:	21 e4       	ldi	r18, 0x41	; 65
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	c2 0e       	add	r12, r18
    5082:	d3 1e       	adc	r13, r19
    5084:	f6 01       	movw	r30, r12
    5086:	81 93       	st	Z+, r24
    5088:	6f 01       	movw	r12, r30
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	80 83       	st	Z, r24
    508e:	2e eb       	ldi	r18, 0xBE	; 190
    5090:	3f ef       	ldi	r19, 0xFF	; 255
    5092:	1f c0       	rjmp	.+62     	; 0x50d2 <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    5094:	4e e4       	ldi	r20, 0x4E	; 78
    5096:	50 e0       	ldi	r21, 0x00	; 0
    5098:	c4 0e       	add	r12, r20
    509a:	d5 1e       	adc	r13, r21
    509c:	f6 01       	movw	r30, r12
    509e:	81 93       	st	Z+, r24
    50a0:	8a 81       	ldd	r24, Y+2	; 0x02
    50a2:	df 01       	movw	r26, r30
    50a4:	8d 93       	st	X+, r24
    50a6:	6d 01       	movw	r12, r26
    50a8:	89 81       	ldd	r24, Y+1	; 0x01
    50aa:	9a 81       	ldd	r25, Y+2	; 0x02
    50ac:	ab 81       	ldd	r26, Y+3	; 0x03
    50ae:	bc 81       	ldd	r27, Y+4	; 0x04
    50b0:	cd 01       	movw	r24, r26
    50b2:	aa 27       	eor	r26, r26
    50b4:	bb 27       	eor	r27, r27
    50b6:	f6 01       	movw	r30, r12
    50b8:	81 93       	st	Z+, r24
    50ba:	6f 01       	movw	r12, r30
    50bc:	89 81       	ldd	r24, Y+1	; 0x01
    50be:	9a 81       	ldd	r25, Y+2	; 0x02
    50c0:	ab 81       	ldd	r26, Y+3	; 0x03
    50c2:	bc 81       	ldd	r27, Y+4	; 0x04
    50c4:	8b 2f       	mov	r24, r27
    50c6:	99 27       	eor	r25, r25
    50c8:	aa 27       	eor	r26, r26
    50ca:	bb 27       	eor	r27, r27
    50cc:	80 83       	st	Z, r24
    50ce:	2f ea       	ldi	r18, 0xAF	; 175
    50d0:	3f ef       	ldi	r19, 0xFF	; 255
    50d2:	c2 0e       	add	r12, r18
    50d4:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    50d6:	43 e4       	ldi	r20, 0x43	; 67
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	c4 0e       	add	r12, r20
    50dc:	d5 1e       	adc	r13, r21
    50de:	d6 01       	movw	r26, r12
    50e0:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    50e2:	e3 e0       	ldi	r30, 0x03	; 3
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	ce 0e       	add	r12, r30
    50e8:	df 1e       	adc	r13, r31
    50ea:	8f e3       	ldi	r24, 0x3F	; 63
    50ec:	d6 01       	movw	r26, r12
    50ee:	8d 93       	st	X+, r24
    50f0:	fd 01       	movw	r30, r26
    50f2:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    50f4:	8f ef       	ldi	r24, 0xFF	; 255
    50f6:	df 01       	movw	r26, r30
    50f8:	8d 93       	st	X+, r24
    50fa:	fd 01       	movw	r30, r26
    50fc:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    50fe:	df 01       	movw	r26, r30
    5100:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5102:	ed 93       	st	X+, r30
    5104:	1d 92       	st	X+, r1
    5106:	fd 01       	movw	r30, r26
    5108:	11 92       	st	Z+, r1
    510a:	6f 01       	movw	r12, r30
    510c:	10 82       	st	Z, r1
    510e:	23 eb       	ldi	r18, 0xB3	; 179
    5110:	3f ef       	ldi	r19, 0xFF	; 255
    5112:	c2 0e       	add	r12, r18
    5114:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    5116:	1d 82       	std	Y+5, r1	; 0x05
    5118:	1e 82       	std	Y+6, r1	; 0x06
    511a:	1f 82       	std	Y+7, r1	; 0x07
    511c:	18 86       	std	Y+8, r1	; 0x08
    511e:	b6 01       	movw	r22, r12
    5120:	6b 5a       	subi	r22, 0xAB	; 171
    5122:	7f 4f       	sbci	r23, 0xFF	; 255
    5124:	85 2d       	mov	r24, r5
    5126:	99 27       	eor	r25, r25
    5128:	d6 01       	movw	r26, r12
    512a:	ae 5a       	subi	r26, 0xAE	; 174
    512c:	bf 4f       	sbci	r27, 0xFF	; 255
    512e:	96 01       	movw	r18, r12
    5130:	2c 5a       	subi	r18, 0xAC	; 172
    5132:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    5134:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5136:	43 30       	cpi	r20, 0x03	; 3
    5138:	41 f1       	breq	.+80     	; 0x518a <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    513a:	fb 01       	movw	r30, r22
    513c:	10 82       	st	Z, r1
    513e:	46 e5       	ldi	r20, 0x56	; 86
    5140:	50 e0       	ldi	r21, 0x00	; 0
    5142:	c4 0e       	add	r12, r20
    5144:	d5 1e       	adc	r13, r21
    5146:	f6 01       	movw	r30, r12
    5148:	11 92       	st	Z+, r1
    514a:	11 92       	st	Z+, r1
    514c:	6f 01       	movw	r12, r30
    514e:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    5150:	4c ee       	ldi	r20, 0xEC	; 236
    5152:	5f ef       	ldi	r21, 0xFF	; 255
    5154:	c4 0e       	add	r12, r20
    5156:	d5 1e       	adc	r13, r21
    5158:	f6 01       	movw	r30, r12
    515a:	41 92       	st	Z+, r4
    515c:	6f 01       	movw	r12, r30
    515e:	80 83       	st	Z, r24
    5160:	4b eb       	ldi	r20, 0xBB	; 187
    5162:	5f ef       	ldi	r21, 0xFF	; 255
    5164:	c4 0e       	add	r12, r20
    5166:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    5168:	80 e8       	ldi	r24, 0x80	; 128
    516a:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    516c:	89 e2       	ldi	r24, 0x29	; 41
    516e:	d9 01       	movw	r26, r18
    5170:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5172:	d7 01       	movw	r26, r14
    5174:	9b 96       	adiw	r26, 0x2b	; 43
    5176:	eb e0       	ldi	r30, 0x0B	; 11
    5178:	f0 e2       	ldi	r31, 0x20	; 32
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    517c:	81 91       	ld	r24, Z+
    517e:	8d 93       	st	X+, r24
    5180:	20 e2       	ldi	r18, 0x20	; 32
    5182:	ee 31       	cpi	r30, 0x1E	; 30
    5184:	f2 07       	cpc	r31, r18
    5186:	d1 f7       	brne	.-12     	; 0x517c <f_mkfs+0x67e>
    5188:	51 c0       	rjmp	.+162    	; 0x522c <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    518a:	41 e7       	ldi	r20, 0x71	; 113
    518c:	50 e0       	ldi	r21, 0x00	; 0
    518e:	c4 0e       	add	r12, r20
    5190:	d5 1e       	adc	r13, r21
    5192:	f6 01       	movw	r30, r12
    5194:	11 92       	st	Z+, r1
    5196:	11 92       	st	Z+, r1
    5198:	11 92       	st	Z+, r1
    519a:	6f 01       	movw	r12, r30
    519c:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    519e:	4c 92       	st	X, r4
    51a0:	4f ed       	ldi	r20, 0xDF	; 223
    51a2:	5f ef       	ldi	r21, 0xFF	; 255
    51a4:	c4 0e       	add	r12, r20
    51a6:	d5 1e       	adc	r13, r21
    51a8:	d6 01       	movw	r26, r12
    51aa:	8c 93       	st	X, r24
    51ac:	c3 01       	movw	r24, r6
    51ae:	aa 27       	eor	r26, r26
    51b0:	bb 27       	eor	r27, r27
    51b2:	f9 01       	movw	r30, r18
    51b4:	80 83       	st	Z, r24
    51b6:	87 2d       	mov	r24, r7
    51b8:	99 27       	eor	r25, r25
    51ba:	aa 27       	eor	r26, r26
    51bc:	bb 27       	eor	r27, r27
    51be:	fb 01       	movw	r30, r22
    51c0:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    51c2:	27 e0       	ldi	r18, 0x07	; 7
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	c2 0e       	add	r12, r18
    51c8:	d3 1e       	adc	r13, r19
    51ca:	82 e0       	ldi	r24, 0x02	; 2
    51cc:	d6 01       	movw	r26, r12
    51ce:	8d 93       	st	X+, r24
    51d0:	fd 01       	movw	r30, r26
    51d2:	11 92       	st	Z+, r1
    51d4:	df 01       	movw	r26, r30
    51d6:	1d 92       	st	X+, r1
    51d8:	fd 01       	movw	r30, r26
    51da:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	df 01       	movw	r26, r30
    51e0:	8d 93       	st	X+, r24
    51e2:	fd 01       	movw	r30, r26
    51e4:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    51e6:	86 e0       	ldi	r24, 0x06	; 6
    51e8:	df 01       	movw	r26, r30
    51ea:	8d 93       	st	X+, r24
    51ec:	6d 01       	movw	r12, r26
    51ee:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    51f0:	ed e0       	ldi	r30, 0x0D	; 13
    51f2:	f0 e0       	ldi	r31, 0x00	; 0
    51f4:	ce 0e       	add	r12, r30
    51f6:	df 1e       	adc	r13, r31
    51f8:	80 e8       	ldi	r24, 0x80	; 128
    51fa:	d6 01       	movw	r26, r12
    51fc:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    51fe:	e2 e0       	ldi	r30, 0x02	; 2
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	ce 0e       	add	r12, r30
    5204:	df 1e       	adc	r13, r31
    5206:	89 e2       	ldi	r24, 0x29	; 41
    5208:	d6 01       	movw	r26, r12
    520a:	8c 93       	st	X, r24
    520c:	e0 e9       	ldi	r30, 0x90	; 144
    520e:	ff ef       	ldi	r31, 0xFF	; 255
    5210:	ce 0e       	add	r12, r30
    5212:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5214:	d7 01       	movw	r26, r14
    5216:	a9 5b       	subi	r26, 0xB9	; 185
    5218:	bf 4f       	sbci	r27, 0xFF	; 255
    521a:	ef e1       	ldi	r30, 0x1F	; 31
    521c:	f0 e2       	ldi	r31, 0x20	; 32
    521e:	02 c0       	rjmp	.+4      	; 0x5224 <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5220:	81 91       	ld	r24, Z+
    5222:	8d 93       	st	X+, r24
    5224:	20 e2       	ldi	r18, 0x20	; 32
    5226:	e2 33       	cpi	r30, 0x32	; 50
    5228:	f2 07       	cpc	r31, r18
    522a:	d1 f7       	brne	.-12     	; 0x5220 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    522c:	4c e2       	ldi	r20, 0x2C	; 44
    522e:	52 e0       	ldi	r21, 0x02	; 2
    5230:	c4 0e       	add	r12, r20
    5232:	d5 1e       	adc	r13, r21
    5234:	85 e5       	ldi	r24, 0x55	; 85
    5236:	d6 01       	movw	r26, r12
    5238:	8d 93       	st	X+, r24
    523a:	6d 01       	movw	r12, r26
    523c:	8a ea       	ldi	r24, 0xAA	; 170
    523e:	8c 93       	st	X, r24
    5240:	e3 ed       	ldi	r30, 0xD3	; 211
    5242:	fd ef       	ldi	r31, 0xFD	; 253
    5244:	ce 0e       	add	r12, r30
    5246:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    5248:	89 89       	ldd	r24, Y+17	; 0x11
    524a:	b7 01       	movw	r22, r14
    524c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    524e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5250:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5252:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5254:	01 e0       	ldi	r16, 0x01	; 1
    5256:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    525a:	88 23       	and	r24, r24
    525c:	09 f0       	breq	.+2      	; 0x5260 <f_mkfs+0x762>
    525e:	4d c1       	rjmp	.+666    	; 0x54fa <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    5260:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5262:	f3 30       	cpi	r31, 0x03	; 3
    5264:	61 f4       	brne	.+24     	; 0x527e <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    5266:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5268:	3b 8d       	ldd	r19, Y+27	; 0x1b
    526a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    526c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    526e:	2a 5f       	subi	r18, 0xFA	; 250
    5270:	3f 4f       	sbci	r19, 0xFF	; 255
    5272:	4f 4f       	sbci	r20, 0xFF	; 255
    5274:	5f 4f       	sbci	r21, 0xFF	; 255
    5276:	89 89       	ldd	r24, Y+17	; 0x11
    5278:	b7 01       	movw	r22, r14
    527a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    527e:	f7 01       	movw	r30, r14
    5280:	80 e0       	ldi	r24, 0x00	; 0
    5282:	92 e0       	ldi	r25, 0x02	; 2
    5284:	01 c0       	rjmp	.+2      	; 0x5288 <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5286:	11 92       	st	Z+, r1
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	2f ef       	ldi	r18, 0xFF	; 255
    528c:	8f 3f       	cpi	r24, 0xFF	; 255
    528e:	92 07       	cpc	r25, r18
    5290:	d1 f7       	brne	.-12     	; 0x5286 <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    5292:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5294:	33 30       	cpi	r19, 0x03	; 3
    5296:	31 f1       	breq	.+76     	; 0x52e4 <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    5298:	31 30       	cpi	r19, 0x01	; 1
    529a:	29 f0       	breq	.+10     	; 0x52a6 <f_mkfs+0x7a8>
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	3f ef       	ldi	r19, 0xFF	; 255
    52a0:	4f ef       	ldi	r20, 0xFF	; 255
    52a2:	5f ef       	ldi	r21, 0xFF	; 255
    52a4:	04 c0       	rjmp	.+8      	; 0x52ae <f_mkfs+0x7b0>
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	3f ef       	ldi	r19, 0xFF	; 255
    52aa:	4f ef       	ldi	r20, 0xFF	; 255
    52ac:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    52ae:	81 2f       	mov	r24, r17
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	a0 e0       	ldi	r26, 0x00	; 0
    52b4:	b0 e0       	ldi	r27, 0x00	; 0
    52b6:	82 2b       	or	r24, r18
    52b8:	93 2b       	or	r25, r19
    52ba:	a4 2b       	or	r26, r20
    52bc:	b5 2b       	or	r27, r21
    52be:	8d 83       	std	Y+5, r24	; 0x05
    52c0:	9e 83       	std	Y+6, r25	; 0x06
    52c2:	af 83       	std	Y+7, r26	; 0x07
    52c4:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    52c6:	f6 01       	movw	r30, r12
    52c8:	86 a7       	std	Z+46, r24	; 0x2e
    52ca:	29 2f       	mov	r18, r25
    52cc:	33 27       	eor	r19, r19
    52ce:	27 a7       	std	Z+47, r18	; 0x2f
    52d0:	9d 01       	movw	r18, r26
    52d2:	44 27       	eor	r20, r20
    52d4:	55 27       	eor	r21, r21
    52d6:	20 ab       	std	Z+48, r18	; 0x30
    52d8:	8b 2f       	mov	r24, r27
    52da:	99 27       	eor	r25, r25
    52dc:	aa 27       	eor	r26, r26
    52de:	bb 27       	eor	r27, r27
    52e0:	81 ab       	std	Z+49, r24	; 0x31
    52e2:	27 c0       	rjmp	.+78     	; 0x5332 <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    52e4:	88 ef       	ldi	r24, 0xF8	; 248
    52e6:	d6 01       	movw	r26, r12
    52e8:	9e 96       	adiw	r26, 0x2e	; 46
    52ea:	8c 93       	st	X, r24
    52ec:	9e 97       	sbiw	r26, 0x2e	; 46
    52ee:	8f ef       	ldi	r24, 0xFF	; 255
    52f0:	9f 96       	adiw	r26, 0x2f	; 47
    52f2:	8c 93       	st	X, r24
    52f4:	9f 97       	sbiw	r26, 0x2f	; 47
    52f6:	d0 96       	adiw	r26, 0x30	; 48
    52f8:	8c 93       	st	X, r24
    52fa:	d0 97       	sbiw	r26, 0x30	; 48
    52fc:	d1 96       	adiw	r26, 0x31	; 49
    52fe:	8c 93       	st	X, r24
    5300:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5302:	d2 96       	adiw	r26, 0x32	; 50
    5304:	8c 93       	st	X, r24
    5306:	d2 97       	sbiw	r26, 0x32	; 50
    5308:	d3 96       	adiw	r26, 0x33	; 51
    530a:	8c 93       	st	X, r24
    530c:	d3 97       	sbiw	r26, 0x33	; 51
    530e:	d4 96       	adiw	r26, 0x34	; 52
    5310:	8c 93       	st	X, r24
    5312:	d4 97       	sbiw	r26, 0x34	; 52
    5314:	d5 96       	adiw	r26, 0x35	; 53
    5316:	8c 93       	st	X, r24
    5318:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    531a:	d6 96       	adiw	r26, 0x36	; 54
    531c:	8c 93       	st	X, r24
    531e:	d6 97       	sbiw	r26, 0x36	; 54
    5320:	d7 96       	adiw	r26, 0x37	; 55
    5322:	8c 93       	st	X, r24
    5324:	d7 97       	sbiw	r26, 0x37	; 55
    5326:	d8 96       	adiw	r26, 0x38	; 56
    5328:	8c 93       	st	X, r24
    532a:	d8 97       	sbiw	r26, 0x38	; 56
    532c:	8f e0       	ldi	r24, 0x0F	; 15
    532e:	d9 96       	adiw	r26, 0x39	; 57
    5330:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5332:	89 89       	ldd	r24, Y+17	; 0x11
    5334:	b7 01       	movw	r22, r14
    5336:	29 85       	ldd	r18, Y+9	; 0x09
    5338:	3a 85       	ldd	r19, Y+10	; 0x0a
    533a:	4b 85       	ldd	r20, Y+11	; 0x0b
    533c:	5c 85       	ldd	r21, Y+12	; 0x0c
    533e:	01 e0       	ldi	r16, 0x01	; 1
    5340:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    5344:	88 23       	and	r24, r24
    5346:	09 f0       	breq	.+2      	; 0x534a <f_mkfs+0x84c>
    5348:	d8 c0       	rjmp	.+432    	; 0x54fa <f_mkfs+0x9fc>
    534a:	f7 01       	movw	r30, r14
    534c:	80 e0       	ldi	r24, 0x00	; 0
    534e:	92 e0       	ldi	r25, 0x02	; 2
    5350:	01 c0       	rjmp	.+2      	; 0x5354 <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5352:	11 92       	st	Z+, r1
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	bf ef       	ldi	r27, 0xFF	; 255
    5358:	8f 3f       	cpi	r24, 0xFF	; 255
    535a:	9b 07       	cpc	r25, r27
    535c:	d1 f7       	brne	.-12     	; 0x5352 <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    535e:	89 84       	ldd	r8, Y+9	; 0x09
    5360:	9a 84       	ldd	r9, Y+10	; 0x0a
    5362:	ab 84       	ldd	r10, Y+11	; 0x0b
    5364:	bc 84       	ldd	r11, Y+12	; 0x0c
    5366:	08 94       	sec
    5368:	81 1c       	adc	r8, r1
    536a:	91 1c       	adc	r9, r1
    536c:	a1 1c       	adc	r10, r1
    536e:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5370:	81 e0       	ldi	r24, 0x01	; 1
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	a0 e0       	ldi	r26, 0x00	; 0
    5376:	b0 e0       	ldi	r27, 0x00	; 0
    5378:	16 c0       	rjmp	.+44     	; 0x53a6 <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    537a:	89 89       	ldd	r24, Y+17	; 0x11
    537c:	b7 01       	movw	r22, r14
    537e:	a5 01       	movw	r20, r10
    5380:	94 01       	movw	r18, r8
    5382:	01 e0       	ldi	r16, 0x01	; 1
    5384:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    5388:	88 23       	and	r24, r24
    538a:	09 f0       	breq	.+2      	; 0x538e <f_mkfs+0x890>
    538c:	b6 c0       	rjmp	.+364    	; 0x54fa <f_mkfs+0x9fc>
    538e:	08 94       	sec
    5390:	81 1c       	adc	r8, r1
    5392:	91 1c       	adc	r9, r1
    5394:	a1 1c       	adc	r10, r1
    5396:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5398:	8d 81       	ldd	r24, Y+5	; 0x05
    539a:	9e 81       	ldd	r25, Y+6	; 0x06
    539c:	af 81       	ldd	r26, Y+7	; 0x07
    539e:	b8 85       	ldd	r27, Y+8	; 0x08
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	a1 1d       	adc	r26, r1
    53a4:	b1 1d       	adc	r27, r1
    53a6:	8d 83       	std	Y+5, r24	; 0x05
    53a8:	9e 83       	std	Y+6, r25	; 0x06
    53aa:	af 83       	std	Y+7, r26	; 0x07
    53ac:	b8 87       	std	Y+8, r27	; 0x08
    53ae:	8d 81       	ldd	r24, Y+5	; 0x05
    53b0:	9e 81       	ldd	r25, Y+6	; 0x06
    53b2:	af 81       	ldd	r26, Y+7	; 0x07
    53b4:	b8 85       	ldd	r27, Y+8	; 0x08
    53b6:	84 15       	cp	r24, r4
    53b8:	95 05       	cpc	r25, r5
    53ba:	a6 05       	cpc	r26, r6
    53bc:	b7 05       	cpc	r27, r7
    53be:	e8 f2       	brcs	.-70     	; 0x537a <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    53c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    53c2:	e3 30       	cpi	r30, 0x03	; 3
    53c4:	11 f0       	breq	.+4      	; 0x53ca <f_mkfs+0x8cc>
    53c6:	fa 89       	ldd	r31, Y+18	; 0x12
    53c8:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    53ca:	24 01       	movw	r4, r8
    53cc:	35 01       	movw	r6, r10
    53ce:	08 94       	sec
    53d0:	41 1c       	adc	r4, r1
    53d2:	51 1c       	adc	r5, r1
    53d4:	61 1c       	adc	r6, r1
    53d6:	71 1c       	adc	r7, r1
    53d8:	89 89       	ldd	r24, Y+17	; 0x11
    53da:	b7 01       	movw	r22, r14
    53dc:	a5 01       	movw	r20, r10
    53de:	94 01       	movw	r18, r8
    53e0:	01 e0       	ldi	r16, 0x01	; 1
    53e2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
    53e6:	88 23       	and	r24, r24
    53e8:	09 f0       	breq	.+2      	; 0x53ec <f_mkfs+0x8ee>
    53ea:	87 c0       	rjmp	.+270    	; 0x54fa <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    53ec:	2e 8d       	ldd	r18, Y+30	; 0x1e
    53ee:	21 50       	subi	r18, 0x01	; 1
    53f0:	2e 8f       	std	Y+30, r18	; 0x1e
    53f2:	22 23       	and	r18, r18
    53f4:	19 f0       	breq	.+6      	; 0x53fc <f_mkfs+0x8fe>
    53f6:	53 01       	movw	r10, r6
    53f8:	42 01       	movw	r8, r4
    53fa:	e7 cf       	rjmp	.-50     	; 0x53ca <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    53fc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    53fe:	33 30       	cpi	r19, 0x03	; 3
    5400:	09 f0       	breq	.+2      	; 0x5404 <f_mkfs+0x906>
    5402:	70 c0       	rjmp	.+224    	; 0x54e4 <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    5404:	4c e2       	ldi	r20, 0x2C	; 44
    5406:	52 e0       	ldi	r21, 0x02	; 2
    5408:	c4 0e       	add	r12, r20
    540a:	d5 1e       	adc	r13, r21
    540c:	85 e5       	ldi	r24, 0x55	; 85
    540e:	d6 01       	movw	r26, r12
    5410:	8d 93       	st	X+, r24
    5412:	6d 01       	movw	r12, r26
    5414:	8a ea       	ldi	r24, 0xAA	; 170
    5416:	8c 93       	st	X, r24
    5418:	e3 ed       	ldi	r30, 0xD3	; 211
    541a:	fd ef       	ldi	r31, 0xFD	; 253
    541c:	ce 0e       	add	r12, r30
    541e:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5420:	82 e5       	ldi	r24, 0x52	; 82
    5422:	d6 01       	movw	r26, r12
    5424:	9e 96       	adiw	r26, 0x2e	; 46
    5426:	8c 93       	st	X, r24
    5428:	9e 97       	sbiw	r26, 0x2e	; 46
    542a:	9f 96       	adiw	r26, 0x2f	; 47
    542c:	8c 93       	st	X, r24
    542e:	9f 97       	sbiw	r26, 0x2f	; 47
    5430:	21 e6       	ldi	r18, 0x61	; 97
    5432:	d0 96       	adiw	r26, 0x30	; 48
    5434:	2c 93       	st	X, r18
    5436:	d0 97       	sbiw	r26, 0x30	; 48
    5438:	91 e4       	ldi	r25, 0x41	; 65
    543a:	d1 96       	adiw	r26, 0x31	; 49
    543c:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    543e:	e2 e1       	ldi	r30, 0x12	; 18
    5440:	f2 e0       	ldi	r31, 0x02	; 2
    5442:	ce 0e       	add	r12, r30
    5444:	df 1e       	adc	r13, r31
    5446:	82 e7       	ldi	r24, 0x72	; 114
    5448:	d6 01       	movw	r26, r12
    544a:	8d 93       	st	X+, r24
    544c:	fd 01       	movw	r30, r26
    544e:	81 93       	st	Z+, r24
    5450:	df 01       	movw	r26, r30
    5452:	9d 93       	st	X+, r25
    5454:	fd 01       	movw	r30, r26
    5456:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    5458:	89 a1       	ldd	r24, Y+33	; 0x21
    545a:	81 50       	subi	r24, 0x01	; 1
    545c:	df 01       	movw	r26, r30
    545e:	8d 93       	st	X+, r24
    5460:	89 a1       	ldd	r24, Y+33	; 0x21
    5462:	9a a1       	ldd	r25, Y+34	; 0x22
    5464:	01 97       	sbiw	r24, 0x01	; 1
    5466:	fd 01       	movw	r30, r26
    5468:	91 93       	st	Z+, r25
    546a:	89 a1       	ldd	r24, Y+33	; 0x21
    546c:	9a a1       	ldd	r25, Y+34	; 0x22
    546e:	ab a1       	ldd	r26, Y+35	; 0x23
    5470:	bc a1       	ldd	r27, Y+36	; 0x24
    5472:	01 97       	sbiw	r24, 0x01	; 1
    5474:	a1 09       	sbc	r26, r1
    5476:	b1 09       	sbc	r27, r1
    5478:	9d 01       	movw	r18, r26
    547a:	44 27       	eor	r20, r20
    547c:	55 27       	eor	r21, r21
    547e:	21 93       	st	Z+, r18
    5480:	8b 2f       	mov	r24, r27
    5482:	99 27       	eor	r25, r25
    5484:	aa 27       	eor	r26, r26
    5486:	bb 27       	eor	r27, r27
    5488:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    548a:	8f ef       	ldi	r24, 0xFF	; 255
    548c:	df 01       	movw	r26, r30
    548e:	8d 93       	st	X+, r24
    5490:	fd 01       	movw	r30, r26
    5492:	81 93       	st	Z+, r24
    5494:	df 01       	movw	r26, r30
    5496:	8d 93       	st	X+, r24
    5498:	fd 01       	movw	r30, r26
    549a:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    549c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    549e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54a0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54a2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54a4:	2f 5f       	subi	r18, 0xFF	; 255
    54a6:	3f 4f       	sbci	r19, 0xFF	; 255
    54a8:	4f 4f       	sbci	r20, 0xFF	; 255
    54aa:	5f 4f       	sbci	r21, 0xFF	; 255
    54ac:	2a 8f       	std	Y+26, r18	; 0x1a
    54ae:	3b 8f       	std	Y+27, r19	; 0x1b
    54b0:	4c 8f       	std	Y+28, r20	; 0x1c
    54b2:	5d 8f       	std	Y+29, r21	; 0x1d
    54b4:	89 89       	ldd	r24, Y+17	; 0x11
    54b6:	b7 01       	movw	r22, r14
    54b8:	01 e0       	ldi	r16, 0x01	; 1
    54ba:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    54be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54c2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    54c4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    54c6:	06 96       	adiw	r24, 0x06	; 6
    54c8:	a1 1d       	adc	r26, r1
    54ca:	b1 1d       	adc	r27, r1
    54cc:	8a 8f       	std	Y+26, r24	; 0x1a
    54ce:	9b 8f       	std	Y+27, r25	; 0x1b
    54d0:	ac 8f       	std	Y+28, r26	; 0x1c
    54d2:	bd 8f       	std	Y+29, r27	; 0x1d
    54d4:	89 89       	ldd	r24, Y+17	; 0x11
    54d6:	b7 01       	movw	r22, r14
    54d8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54da:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54dc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54de:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54e0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    54e4:	89 89       	ldd	r24, Y+17	; 0x11
    54e6:	60 e0       	ldi	r22, 0x00	; 0
    54e8:	40 e0       	ldi	r20, 0x00	; 0
    54ea:	50 e0       	ldi	r21, 0x00	; 0
    54ec:	0e 94 87 07 	call	0xf0e	; 0xf0e <disk_ioctl>
    54f0:	88 23       	and	r24, r24
    54f2:	21 f0       	breq	.+8      	; 0x54fc <f_mkfs+0x9fe>
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <f_mkfs+0x9fc>
    54f6:	8e e0       	ldi	r24, 0x0E	; 14
    54f8:	01 c0       	rjmp	.+2      	; 0x54fc <f_mkfs+0x9fe>
    54fa:	81 e0       	ldi	r24, 0x01	; 1
}
    54fc:	a4 96       	adiw	r28, 0x24	; 36
    54fe:	cd bf       	out	0x3d, r28	; 61
    5500:	de bf       	out	0x3e, r29	; 62
    5502:	cf 91       	pop	r28
    5504:	df 91       	pop	r29
    5506:	1f 91       	pop	r17
    5508:	0f 91       	pop	r16
    550a:	ff 90       	pop	r15
    550c:	ef 90       	pop	r14
    550e:	df 90       	pop	r13
    5510:	cf 90       	pop	r12
    5512:	bf 90       	pop	r11
    5514:	af 90       	pop	r10
    5516:	9f 90       	pop	r9
    5518:	8f 90       	pop	r8
    551a:	7f 90       	pop	r7
    551c:	6f 90       	pop	r6
    551e:	5f 90       	pop	r5
    5520:	4f 90       	pop	r4
    5522:	3f 90       	pop	r3
    5524:	2f 90       	pop	r2
    5526:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    5528:	7c 01       	movw	r14, r24
    552a:	8d 01       	movw	r16, r26
    552c:	ee 0c       	add	r14, r14
    552e:	ff 1c       	adc	r15, r15
    5530:	00 1f       	adc	r16, r16
    5532:	11 1f       	adc	r17, r17
    5534:	e8 0e       	add	r14, r24
    5536:	f9 1e       	adc	r15, r25
    5538:	0a 1f       	adc	r16, r26
    553a:	1b 1f       	adc	r17, r27
    553c:	08 94       	sec
    553e:	e1 1c       	adc	r14, r1
    5540:	f1 1c       	adc	r15, r1
    5542:	01 1d       	adc	r16, r1
    5544:	11 1d       	adc	r17, r1
    5546:	16 95       	lsr	r17
    5548:	07 95       	ror	r16
    554a:	f7 94       	ror	r15
    554c:	e7 94       	ror	r14
    554e:	22 e0       	ldi	r18, 0x02	; 2
    5550:	32 e0       	ldi	r19, 0x02	; 2
    5552:	40 e0       	ldi	r20, 0x00	; 0
    5554:	50 e0       	ldi	r21, 0x00	; 0
    5556:	e2 0e       	add	r14, r18
    5558:	f3 1e       	adc	r15, r19
    555a:	04 1f       	adc	r16, r20
    555c:	15 1f       	adc	r17, r21
    555e:	b9 e0       	ldi	r27, 0x09	; 9
    5560:	16 95       	lsr	r17
    5562:	07 95       	ror	r16
    5564:	f7 94       	ror	r15
    5566:	e7 94       	ror	r14
    5568:	ba 95       	dec	r27
    556a:	d1 f7       	brne	.-12     	; 0x5560 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    556c:	38 a1       	ldd	r19, Y+32	; 0x20
    556e:	83 2f       	mov	r24, r19
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	01 96       	adiw	r24, 0x01	; 1
    5574:	9c 01       	movw	r18, r24
    5576:	44 27       	eor	r20, r20
    5578:	37 fd       	sbrc	r19, 7
    557a:	40 95       	com	r20
    557c:	54 2f       	mov	r21, r20
    557e:	2e 8b       	std	Y+22, r18	; 0x16
    5580:	3f 8b       	std	Y+23, r19	; 0x17
    5582:	48 8f       	std	Y+24, r20	; 0x18
    5584:	59 8f       	std	Y+25, r21	; 0x19
    5586:	80 e2       	ldi	r24, 0x20	; 32
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	a0 e0       	ldi	r26, 0x00	; 0
    558c:	b0 e0       	ldi	r27, 0x00	; 0
    558e:	8a 8b       	std	Y+18, r24	; 0x12
    5590:	9b 8b       	std	Y+19, r25	; 0x13
    5592:	ac 8b       	std	Y+20, r26	; 0x14
    5594:	bd 8b       	std	Y+21, r27	; 0x15
    5596:	91 e0       	ldi	r25, 0x01	; 1
    5598:	9f 8f       	std	Y+31, r25	; 0x1f
    559a:	fe cb       	rjmp	.-2052   	; 0x4d98 <f_mkfs+0x29a>

0000559c <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    559c:	6f 92       	push	r6
    559e:	7f 92       	push	r7
    55a0:	8f 92       	push	r8
    55a2:	9f 92       	push	r9
    55a4:	af 92       	push	r10
    55a6:	bf 92       	push	r11
    55a8:	cf 92       	push	r12
    55aa:	df 92       	push	r13
    55ac:	ef 92       	push	r14
    55ae:	ff 92       	push	r15
    55b0:	0f 93       	push	r16
    55b2:	1f 93       	push	r17
    55b4:	df 93       	push	r29
    55b6:	cf 93       	push	r28
    55b8:	0f 92       	push	r0
    55ba:	0f 92       	push	r0
    55bc:	cd b7       	in	r28, 0x3d	; 61
    55be:	de b7       	in	r29, 0x3e	; 62
    55c0:	5c 01       	movw	r10, r24
    55c2:	6b 01       	movw	r12, r22
    55c4:	4a 01       	movw	r8, r20
    55c6:	8c 01       	movw	r16, r24
    55c8:	ee 24       	eor	r14, r14
    55ca:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    55cc:	08 94       	sec
    55ce:	c1 08       	sbc	r12, r1
    55d0:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    55d2:	3e 01       	movw	r6, r28
    55d4:	08 94       	sec
    55d6:	61 1c       	adc	r6, r1
    55d8:	71 1c       	adc	r7, r1
    55da:	13 c0       	rjmp	.+38     	; 0x5602 <f_gets+0x66>
    55dc:	c4 01       	movw	r24, r8
    55de:	b8 01       	movw	r22, r16
    55e0:	41 e0       	ldi	r20, 0x01	; 1
    55e2:	50 e0       	ldi	r21, 0x00	; 0
    55e4:	93 01       	movw	r18, r6
    55e6:	0e 94 27 18 	call	0x304e	; 0x304e <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    55ea:	89 81       	ldd	r24, Y+1	; 0x01
    55ec:	9a 81       	ldd	r25, Y+2	; 0x02
    55ee:	01 97       	sbiw	r24, 0x01	; 1
    55f0:	59 f4       	brne	.+22     	; 0x5608 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    55f2:	08 94       	sec
    55f4:	e1 1c       	adc	r14, r1
    55f6:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    55f8:	f8 01       	movw	r30, r16
    55fa:	81 91       	ld	r24, Z+
    55fc:	8f 01       	movw	r16, r30
    55fe:	8a 30       	cpi	r24, 0x0A	; 10
    5600:	19 f0       	breq	.+6      	; 0x5608 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5602:	ec 14       	cp	r14, r12
    5604:	fd 04       	cpc	r15, r13
    5606:	54 f3       	brlt	.-44     	; 0x55dc <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    5608:	f8 01       	movw	r30, r16
    560a:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    560c:	ef 28       	or	r14, r15
    560e:	11 f4       	brne	.+4      	; 0x5614 <f_gets+0x78>
    5610:	aa 24       	eor	r10, r10
    5612:	bb 24       	eor	r11, r11
}
    5614:	c5 01       	movw	r24, r10
    5616:	0f 90       	pop	r0
    5618:	0f 90       	pop	r0
    561a:	cf 91       	pop	r28
    561c:	df 91       	pop	r29
    561e:	1f 91       	pop	r17
    5620:	0f 91       	pop	r16
    5622:	ff 90       	pop	r15
    5624:	ef 90       	pop	r14
    5626:	df 90       	pop	r13
    5628:	cf 90       	pop	r12
    562a:	bf 90       	pop	r11
    562c:	af 90       	pop	r10
    562e:	9f 90       	pop	r9
    5630:	8f 90       	pop	r8
    5632:	7f 90       	pop	r7
    5634:	6f 90       	pop	r6
    5636:	08 95       	ret

00005638 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    5638:	0f 93       	push	r16
    563a:	1f 93       	push	r17
    563c:	df 93       	push	r29
    563e:	cf 93       	push	r28
    5640:	00 d0       	rcall	.+0      	; 0x5642 <f_putc+0xa>
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    5648:	61 15       	cp	r22, r1
    564a:	71 05       	cpc	r23, r1
    564c:	91 f0       	breq	.+36     	; 0x5672 <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    564e:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    5650:	cb 01       	movw	r24, r22
    5652:	be 01       	movw	r22, r28
    5654:	6f 5f       	subi	r22, 0xFF	; 255
    5656:	7f 4f       	sbci	r23, 0xFF	; 255
    5658:	41 e0       	ldi	r20, 0x01	; 1
    565a:	50 e0       	ldi	r21, 0x00	; 0
    565c:	9e 01       	movw	r18, r28
    565e:	2e 5f       	subi	r18, 0xFE	; 254
    5660:	3f 4f       	sbci	r19, 0xFF	; 255
    5662:	0e 94 1d 1a 	call	0x343a	; 0x343a <f_write>
	return bw ? chr : EOF;		/* Return the result */
    5666:	8a 81       	ldd	r24, Y+2	; 0x02
    5668:	9b 81       	ldd	r25, Y+3	; 0x03
    566a:	89 2b       	or	r24, r25
    566c:	11 f4       	brne	.+4      	; 0x5672 <f_putc+0x3a>
    566e:	0f ef       	ldi	r16, 0xFF	; 255
    5670:	1f ef       	ldi	r17, 0xFF	; 255
}
    5672:	c8 01       	movw	r24, r16
    5674:	23 96       	adiw	r28, 0x03	; 3
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	cf 91       	pop	r28
    567c:	df 91       	pop	r29
    567e:	1f 91       	pop	r17
    5680:	0f 91       	pop	r16
    5682:	08 95       	ret

00005684 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5684:	ef 92       	push	r14
    5686:	ff 92       	push	r15
    5688:	0f 93       	push	r16
    568a:	1f 93       	push	r17
    568c:	cf 93       	push	r28
    568e:	df 93       	push	r29
    5690:	8c 01       	movw	r16, r24
    5692:	7b 01       	movw	r14, r22
    5694:	c0 e0       	ldi	r28, 0x00	; 0
    5696:	d0 e0       	ldi	r29, 0x00	; 0
    5698:	0d c0       	rjmp	.+26     	; 0x56b4 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	b7 01       	movw	r22, r14
    569e:	0e 94 1c 2b 	call	0x5638	; 0x5638 <f_putc>
    56a2:	8f 5f       	subi	r24, 0xFF	; 255
    56a4:	9f 4f       	sbci	r25, 0xFF	; 255
    56a6:	19 f4       	brne	.+6      	; 0x56ae <f_puts+0x2a>
    56a8:	cf ef       	ldi	r28, 0xFF	; 255
    56aa:	df ef       	ldi	r29, 0xFF	; 255
    56ac:	07 c0       	rjmp	.+14     	; 0x56bc <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    56ae:	0f 5f       	subi	r16, 0xFF	; 255
    56b0:	1f 4f       	sbci	r17, 0xFF	; 255
    56b2:	21 96       	adiw	r28, 0x01	; 1
    56b4:	f8 01       	movw	r30, r16
    56b6:	80 81       	ld	r24, Z
    56b8:	88 23       	and	r24, r24
    56ba:	79 f7       	brne	.-34     	; 0x569a <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    56bc:	ce 01       	movw	r24, r28
    56be:	df 91       	pop	r29
    56c0:	cf 91       	pop	r28
    56c2:	1f 91       	pop	r17
    56c4:	0f 91       	pop	r16
    56c6:	ff 90       	pop	r15
    56c8:	ef 90       	pop	r14
    56ca:	08 95       	ret

000056cc <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    56cc:	87 ec       	ldi	r24, 0xC7	; 199
    56ce:	9e e4       	ldi	r25, 0x4E	; 78
    56d0:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <f_close>
}
    56d4:	08 95       	ret

000056d6 <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    56d6:	80 91 a8 06 	lds	r24, 0x06A8
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	80 ff       	sbrs	r24, 0
    56de:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    56e0:	89 2f       	mov	r24, r25
    56e2:	08 95       	ret

000056e4 <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    56e4:	e0 ea       	ldi	r30, 0xA0	; 160
    56e6:	f6 e0       	ldi	r31, 0x06	; 6
    56e8:	80 85       	ldd	r24, Z+8	; 0x08
    56ea:	86 95       	lsr	r24
    56ec:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    56ee:	81 70       	andi	r24, 0x01	; 1
    56f0:	08 95       	ret

000056f2 <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    56f2:	af 92       	push	r10
    56f4:	bf 92       	push	r11
    56f6:	cf 92       	push	r12
    56f8:	df 92       	push	r13
    56fa:	ef 92       	push	r14
    56fc:	ff 92       	push	r15
    56fe:	0f 93       	push	r16
    5700:	1f 93       	push	r17
    5702:	df 93       	push	r29
    5704:	cf 93       	push	r28
    5706:	0f 92       	push	r0
    5708:	0f 92       	push	r0
    570a:	cd b7       	in	r28, 0x3d	; 61
    570c:	de b7       	in	r29, 0x3e	; 62
    570e:	5c 01       	movw	r10, r24
    5710:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    5712:	87 ec       	ldi	r24, 0xC7	; 199
    5714:	9e e4       	ldi	r25, 0x4E	; 78
    5716:	b5 01       	movw	r22, r10
    5718:	a6 01       	movw	r20, r12
    571a:	9e 01       	movw	r18, r28
    571c:	2f 5f       	subi	r18, 0xFF	; 255
    571e:	3f 4f       	sbci	r19, 0xFF	; 255
    5720:	0e 94 1d 1a 	call	0x343a	; 0x343a <f_write>
    5724:	60 e0       	ldi	r22, 0x00	; 0
    5726:	70 e0       	ldi	r23, 0x00	; 0
    5728:	3b c0       	rjmp	.+118    	; 0x57a0 <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    572a:	e0 90 9f 56 	lds	r14, 0x569F
    572e:	f0 90 a0 56 	lds	r15, 0x56A0
    5732:	00 91 a1 56 	lds	r16, 0x56A1
    5736:	10 91 a2 56 	lds	r17, 0x56A2
    573a:	20 91 9f 56 	lds	r18, 0x569F
    573e:	30 91 a0 56 	lds	r19, 0x56A0
    5742:	40 91 a1 56 	lds	r20, 0x56A1
    5746:	50 91 a2 56 	lds	r21, 0x56A2
    574a:	30 70       	andi	r19, 0x00	; 0
    574c:	40 70       	andi	r20, 0x00	; 0
    574e:	50 70       	andi	r21, 0x00	; 0
    5750:	f5 01       	movw	r30, r10
    5752:	e6 0f       	add	r30, r22
    5754:	f7 1f       	adc	r31, r23
    5756:	80 81       	ld	r24, Z
    5758:	90 e0       	ldi	r25, 0x00	; 0
    575a:	a0 e0       	ldi	r26, 0x00	; 0
    575c:	b0 e0       	ldi	r27, 0x00	; 0
    575e:	28 27       	eor	r18, r24
    5760:	39 27       	eor	r19, r25
    5762:	4a 27       	eor	r20, r26
    5764:	5b 27       	eor	r21, r27
    5766:	22 0f       	add	r18, r18
    5768:	33 1f       	adc	r19, r19
    576a:	22 0f       	add	r18, r18
    576c:	33 1f       	adc	r19, r19
    576e:	2e 57       	subi	r18, 0x7E	; 126
    5770:	34 4d       	sbci	r19, 0xD4	; 212
    5772:	ef 2c       	mov	r14, r15
    5774:	f0 2e       	mov	r15, r16
    5776:	01 2f       	mov	r16, r17
    5778:	11 27       	eor	r17, r17
    577a:	f9 01       	movw	r30, r18
    577c:	80 81       	ld	r24, Z
    577e:	91 81       	ldd	r25, Z+1	; 0x01
    5780:	a2 81       	ldd	r26, Z+2	; 0x02
    5782:	b3 81       	ldd	r27, Z+3	; 0x03
    5784:	e8 26       	eor	r14, r24
    5786:	f9 26       	eor	r15, r25
    5788:	0a 27       	eor	r16, r26
    578a:	1b 27       	eor	r17, r27
    578c:	e0 92 9f 56 	sts	0x569F, r14
    5790:	f0 92 a0 56 	sts	0x56A0, r15
    5794:	00 93 a1 56 	sts	0x56A1, r16
    5798:	10 93 a2 56 	sts	0x56A2, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    579c:	6f 5f       	subi	r22, 0xFF	; 255
    579e:	7f 4f       	sbci	r23, 0xFF	; 255
    57a0:	6c 15       	cp	r22, r12
    57a2:	7d 05       	cpc	r23, r13
    57a4:	10 f2       	brcs	.-124    	; 0x572a <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    57a6:	0f 90       	pop	r0
    57a8:	0f 90       	pop	r0
    57aa:	cf 91       	pop	r28
    57ac:	df 91       	pop	r29
    57ae:	1f 91       	pop	r17
    57b0:	0f 91       	pop	r16
    57b2:	ff 90       	pop	r15
    57b4:	ef 90       	pop	r14
    57b6:	df 90       	pop	r13
    57b8:	cf 90       	pop	r12
    57ba:	bf 90       	pop	r11
    57bc:	af 90       	pop	r10
    57be:	08 95       	ret

000057c0 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    57c0:	60 93 05 45 	sts	0x4505, r22
	tmp32[1] = (uint8_t)(var >> 8);
    57c4:	27 2f       	mov	r18, r23
    57c6:	38 2f       	mov	r19, r24
    57c8:	49 2f       	mov	r20, r25
    57ca:	55 27       	eor	r21, r21
    57cc:	20 93 06 45 	sts	0x4506, r18
	tmp32[2] = (uint8_t)(var >> 16);
    57d0:	9c 01       	movw	r18, r24
    57d2:	44 27       	eor	r20, r20
    57d4:	55 27       	eor	r21, r21
    57d6:	20 93 07 45 	sts	0x4507, r18
	tmp32[3] = (uint8_t)(var >> 24);
    57da:	69 2f       	mov	r22, r25
    57dc:	77 27       	eor	r23, r23
    57de:	88 27       	eor	r24, r24
    57e0:	99 27       	eor	r25, r25
    57e2:	60 93 08 45 	sts	0x4508, r22
	SD_WriteBuffer(tmp32,4);
    57e6:	85 e0       	ldi	r24, 0x05	; 5
    57e8:	95 e4       	ldi	r25, 0x45	; 69
    57ea:	64 e0       	ldi	r22, 0x04	; 4
    57ec:	70 e0       	ldi	r23, 0x00	; 0
    57ee:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <SD_WriteBuffer>
}
    57f2:	08 95       	ret

000057f4 <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    57f4:	80 93 e7 5b 	sts	0x5BE7, r24
	tmp16[1] = (uint8_t)(var >> 8);
    57f8:	90 93 e8 5b 	sts	0x5BE8, r25
	SD_WriteBuffer(tmp16,2);
    57fc:	87 ee       	ldi	r24, 0xE7	; 231
    57fe:	9b e5       	ldi	r25, 0x5B	; 91
    5800:	62 e0       	ldi	r22, 0x02	; 2
    5802:	70 e0       	ldi	r23, 0x00	; 0
    5804:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <SD_WriteBuffer>
}
    5808:	08 95       	ret

0000580a <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    580a:	80 93 b2 4a 	sts	0x4AB2, r24
	SD_WriteBuffer(tmp8,1);
    580e:	82 eb       	ldi	r24, 0xB2	; 178
    5810:	9a e4       	ldi	r25, 0x4A	; 74
    5812:	61 e0       	ldi	r22, 0x01	; 1
    5814:	70 e0       	ldi	r23, 0x00	; 0
    5816:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <SD_WriteBuffer>
}
    581a:	08 95       	ret

0000581c <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    581c:	8f ef       	ldi	r24, 0xFF	; 255
    581e:	9f ef       	ldi	r25, 0xFF	; 255
    5820:	af ef       	ldi	r26, 0xFF	; 255
    5822:	bf ef       	ldi	r27, 0xFF	; 255
    5824:	80 93 9f 56 	sts	0x569F, r24
    5828:	90 93 a0 56 	sts	0x56A0, r25
    582c:	a0 93 a1 56 	sts	0x56A1, r26
    5830:	b0 93 a2 56 	sts	0x56A2, r27
}
    5834:	08 95       	ret

00005836 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    5836:	60 91 9f 56 	lds	r22, 0x569F
    583a:	70 91 a0 56 	lds	r23, 0x56A0
    583e:	80 91 a1 56 	lds	r24, 0x56A1
    5842:	90 91 a2 56 	lds	r25, 0x56A2
    5846:	60 95       	com	r22
    5848:	70 95       	com	r23
    584a:	80 95       	com	r24
    584c:	90 95       	com	r25
    584e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
}
    5852:	08 95       	ret

00005854 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    5854:	e0 e0       	ldi	r30, 0x00	; 0
    5856:	fa e0       	ldi	r31, 0x0A	; 10
    5858:	80 e4       	ldi	r24, 0x40	; 64
    585a:	92 e0       	ldi	r25, 0x02	; 2
    585c:	86 a3       	std	Z+38, r24	; 0x26
    585e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    5860:	80 81       	ld	r24, Z
    5862:	80 7f       	andi	r24, 0xF0	; 240
    5864:	86 60       	ori	r24, 0x06	; 6
    5866:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5868:	86 81       	ldd	r24, Z+6	; 0x06
    586a:	8c 7f       	andi	r24, 0xFC	; 252
    586c:	82 60       	ori	r24, 0x02	; 2
    586e:	86 83       	std	Z+6, r24	; 0x06
	
}
    5870:	08 95       	ret

00005872 <SD_Init>:
};

//uint32_t crc_table[256];


uint8_t SD_Init(void){
    5872:	1f 93       	push	r17
	uint8_t tmp;


	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    5874:	e0 ea       	ldi	r30, 0xA0	; 160
    5876:	f6 e0       	ldi	r31, 0x06	; 6
    5878:	88 e1       	ldi	r24, 0x18	; 24
    587a:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    587c:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    587e:	0e 94 2a 2c 	call	0x5854	; 0x5854 <SD_Timer_Init>
	tmp = disk_initialize(0);
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	0e 94 c2 05 	call	0xb84	; 0xb84 <disk_initialize>
    5888:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    588a:	80 e0       	ldi	r24, 0x00	; 0
    588c:	60 ee       	ldi	r22, 0xE0	; 224
    588e:	73 e3       	ldi	r23, 0x33	; 51
    5890:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <f_mount>
	f_mount(1, &fso1);
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	6e e0       	ldi	r22, 0x0E	; 14
    5898:	76 e3       	ldi	r23, 0x36	; 54
    589a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <f_mount>
    //f_mount(2, &fso2);
	return tmp;
}
    589e:	81 2f       	mov	r24, r17
    58a0:	1f 91       	pop	r17
    58a2:	08 95       	ret

000058a4 <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    58a4:	1f 92       	push	r1
    58a6:	0f 92       	push	r0
    58a8:	0f b6       	in	r0, 0x3f	; 63
    58aa:	0f 92       	push	r0
    58ac:	0b b6       	in	r0, 0x3b	; 59
    58ae:	0f 92       	push	r0
    58b0:	11 24       	eor	r1, r1
    58b2:	2f 93       	push	r18
    58b4:	3f 93       	push	r19
    58b6:	4f 93       	push	r20
    58b8:	5f 93       	push	r21
    58ba:	6f 93       	push	r22
    58bc:	7f 93       	push	r23
    58be:	8f 93       	push	r24
    58c0:	9f 93       	push	r25
    58c2:	af 93       	push	r26
    58c4:	bf 93       	push	r27
    58c6:	ef 93       	push	r30
    58c8:	ff 93       	push	r31
	disk_timerproc();
    58ca:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <disk_timerproc>


	if(okToCharge){
    58ce:	80 91 67 33 	lds	r24, 0x3367
    58d2:	88 23       	and	r24, r24
    58d4:	a9 f0       	breq	.+42     	; 0x5900 <__vector_47+0x5c>
		chargeCounter++;
    58d6:	80 91 64 33 	lds	r24, 0x3364
    58da:	90 91 65 33 	lds	r25, 0x3365
    58de:	01 96       	adiw	r24, 0x01	; 1
    58e0:	80 93 64 33 	sts	0x3364, r24
    58e4:	90 93 65 33 	sts	0x3365, r25
		if(chargeCounter >= 16200){
    58e8:	88 54       	subi	r24, 0x48	; 72
    58ea:	9f 43       	sbci	r25, 0x3F	; 63
    58ec:	48 f0       	brcs	.+18     	; 0x5900 <__vector_47+0x5c>
			chargeCounter=0;
    58ee:	10 92 64 33 	sts	0x3364, r1
    58f2:	10 92 65 33 	sts	0x3365, r1
			chargePercent++;
    58f6:	80 91 63 33 	lds	r24, 0x3363
    58fa:	8f 5f       	subi	r24, 0xFF	; 255
    58fc:	80 93 63 33 	sts	0x3363, r24
		}
	}
}
    5900:	ff 91       	pop	r31
    5902:	ef 91       	pop	r30
    5904:	bf 91       	pop	r27
    5906:	af 91       	pop	r26
    5908:	9f 91       	pop	r25
    590a:	8f 91       	pop	r24
    590c:	7f 91       	pop	r23
    590e:	6f 91       	pop	r22
    5910:	5f 91       	pop	r21
    5912:	4f 91       	pop	r20
    5914:	3f 91       	pop	r19
    5916:	2f 91       	pop	r18
    5918:	0f 90       	pop	r0
    591a:	0b be       	out	0x3b, r0	; 59
    591c:	0f 90       	pop	r0
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	0f 90       	pop	r0
    5922:	1f 90       	pop	r1
    5924:	18 95       	reti

00005926 <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    5926:	0f 93       	push	r16
    5928:	df 93       	push	r29
    592a:	cf 93       	push	r28
    592c:	0f 92       	push	r0
    592e:	cd b7       	in	r28, 0x3d	; 61
    5930:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    5932:	2f b7       	in	r18, 0x3f	; 63
    5934:	29 83       	std	Y+1, r18	; 0x01
    cli();
    5936:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    5938:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    593a:	fc 01       	movw	r30, r24
    593c:	08 ed       	ldi	r16, 0xD8	; 216
    593e:	04 bf       	out	0x34, r16	; 52
    5940:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	8f bf       	out	0x3f, r24	; 63
}
    5946:	0f 90       	pop	r0
    5948:	cf 91       	pop	r28
    594a:	df 91       	pop	r29
    594c:	0f 91       	pop	r16
    594e:	08 95       	ret

00005950 <display_sendCommand>:

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5950:	94 e0       	ldi	r25, 0x04	; 4
    5952:	e0 e2       	ldi	r30, 0x20	; 32
    5954:	f6 e0       	ldi	r31, 0x06	; 6
    5956:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5958:	e0 ec       	ldi	r30, 0xC0	; 192
    595a:	f8 e0       	ldi	r31, 0x08	; 8
    595c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    595e:	80 91 c2 08 	lds	r24, 0x08C2
    5962:	87 ff       	sbrs	r24, 7
    5964:	fc cf       	rjmp	.-8      	; 0x595e <display_sendCommand+0xe>
}
    5966:	08 95       	ret

00005968 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5968:	94 e0       	ldi	r25, 0x04	; 4
    596a:	e0 e2       	ldi	r30, 0x20	; 32
    596c:	f6 e0       	ldi	r31, 0x06	; 6
    596e:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    5970:	e0 ec       	ldi	r30, 0xC0	; 192
    5972:	f8 e0       	ldi	r31, 0x08	; 8
    5974:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5976:	80 91 c2 08 	lds	r24, 0x08C2
    597a:	87 ff       	sbrs	r24, 7
    597c:	fc cf       	rjmp	.-8      	; 0x5976 <display_sendData+0xe>
}
    597e:	08 95       	ret

00005980 <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    5980:	80 6b       	ori	r24, 0xB0	; 176

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5982:	94 e0       	ldi	r25, 0x04	; 4
    5984:	e0 e2       	ldi	r30, 0x20	; 32
    5986:	f6 e0       	ldi	r31, 0x06	; 6
    5988:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    598a:	e0 ec       	ldi	r30, 0xC0	; 192
    598c:	f8 e0       	ldi	r31, 0x08	; 8
    598e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5990:	80 91 c2 08 	lds	r24, 0x08C2
    5994:	87 ff       	sbrs	r24, 7
    5996:	fc cf       	rjmp	.-8      	; 0x5990 <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    5998:	96 2f       	mov	r25, r22
    599a:	9f 70       	andi	r25, 0x0F	; 15

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    599c:	84 e0       	ldi	r24, 0x04	; 4
    599e:	e0 e2       	ldi	r30, 0x20	; 32
    59a0:	f6 e0       	ldi	r31, 0x06	; 6
    59a2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59a4:	e0 ec       	ldi	r30, 0xC0	; 192
    59a6:	f8 e0       	ldi	r31, 0x08	; 8
    59a8:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59aa:	80 91 c2 08 	lds	r24, 0x08C2
    59ae:	87 ff       	sbrs	r24, 7
    59b0:	fc cf       	rjmp	.-8      	; 0x59aa <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    59b2:	62 95       	swap	r22
    59b4:	6f 70       	andi	r22, 0x0F	; 15
    59b6:	60 61       	ori	r22, 0x10	; 16

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59b8:	84 e0       	ldi	r24, 0x04	; 4
    59ba:	e0 e2       	ldi	r30, 0x20	; 32
    59bc:	f6 e0       	ldi	r31, 0x06	; 6
    59be:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59c0:	e0 ec       	ldi	r30, 0xC0	; 192
    59c2:	f8 e0       	ldi	r31, 0x08	; 8
    59c4:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59c6:	80 91 c2 08 	lds	r24, 0x08C2
    59ca:	87 ff       	sbrs	r24, 7
    59cc:	fc cf       	rjmp	.-8      	; 0x59c6 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    59ce:	08 95       	ret

000059d0 <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    59d0:	bf 92       	push	r11
    59d2:	cf 92       	push	r12
    59d4:	df 92       	push	r13
    59d6:	ef 92       	push	r14
    59d8:	ff 92       	push	r15
    59da:	0f 93       	push	r16
    59dc:	1f 93       	push	r17
    59de:	cf 93       	push	r28
    59e0:	df 93       	push	r29
    59e2:	c0 e0       	ldi	r28, 0x00	; 0
    59e4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    59e6:	56 e6       	ldi	r21, 0x66	; 102
    59e8:	c5 2e       	mov	r12, r21
    59ea:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    59ec:	40 e2       	ldi	r20, 0x20	; 32
    59ee:	e4 2e       	mov	r14, r20
    59f0:	46 e0       	ldi	r20, 0x06	; 6
    59f2:	f4 2e       	mov	r15, r20
    59f4:	34 e0       	ldi	r19, 0x04	; 4
    59f6:	b3 2e       	mov	r11, r19
	Display_SPI.DATA = dataByte;
    59f8:	00 ec       	ldi	r16, 0xC0	; 192
    59fa:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    59fc:	8c 2f       	mov	r24, r28
    59fe:	60 e0       	ldi	r22, 0x00	; 0
    5a00:	0e 94 c0 2c 	call	0x5980	; 0x5980 <display_setCursor>
    5a04:	20 e0       	ldi	r18, 0x00	; 0
    5a06:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    5a08:	cc 9d       	mul	r28, r12
    5a0a:	a0 01       	movw	r20, r0
    5a0c:	cd 9d       	mul	r28, r13
    5a0e:	50 0d       	add	r21, r0
    5a10:	dc 9d       	mul	r29, r12
    5a12:	50 0d       	add	r21, r0
    5a14:	11 24       	eor	r1, r1
    5a16:	fa 01       	movw	r30, r20
    5a18:	e2 0f       	add	r30, r18
    5a1a:	f3 1f       	adc	r31, r19
    5a1c:	e0 5a       	subi	r30, 0xA0	; 160
    5a1e:	fc 4a       	sbci	r31, 0xAC	; 172
    5a20:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a22:	f7 01       	movw	r30, r14
    5a24:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    5a26:	f8 01       	movw	r30, r16
    5a28:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a2a:	80 91 c2 08 	lds	r24, 0x08C2
    5a2e:	87 ff       	sbrs	r24, 7
    5a30:	fc cf       	rjmp	.-8      	; 0x5a2a <display_writeBufferToScreen+0x5a>
    5a32:	2f 5f       	subi	r18, 0xFF	; 255
    5a34:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a36:	26 36       	cpi	r18, 0x66	; 102
    5a38:	31 05       	cpc	r19, r1
    5a3a:	69 f7       	brne	.-38     	; 0x5a16 <display_writeBufferToScreen+0x46>
    5a3c:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a3e:	c8 30       	cpi	r28, 0x08	; 8
    5a40:	d1 05       	cpc	r29, r1
    5a42:	e1 f6       	brne	.-72     	; 0x59fc <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    5a44:	df 91       	pop	r29
    5a46:	cf 91       	pop	r28
    5a48:	1f 91       	pop	r17
    5a4a:	0f 91       	pop	r16
    5a4c:	ff 90       	pop	r15
    5a4e:	ef 90       	pop	r14
    5a50:	df 90       	pop	r13
    5a52:	cf 90       	pop	r12
    5a54:	bf 90       	pop	r11
    5a56:	08 95       	ret

00005a58 <display_clearPage>:


void display_clearPage(uint8_t page) {
    5a58:	40 e0       	ldi	r20, 0x00	; 0
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	26 e6       	ldi	r18, 0x66	; 102
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	82 9f       	mul	r24, r18
    5a64:	b0 01       	movw	r22, r0
    5a66:	83 9f       	mul	r24, r19
    5a68:	70 0d       	add	r23, r0
    5a6a:	92 9f       	mul	r25, r18
    5a6c:	70 0d       	add	r23, r0
    5a6e:	11 24       	eor	r1, r1
    5a70:	8a e0       	ldi	r24, 0x0A	; 10
    5a72:	fb 01       	movw	r30, r22
    5a74:	e4 0f       	add	r30, r20
    5a76:	f5 1f       	adc	r31, r21
    5a78:	e0 5a       	subi	r30, 0xA0	; 160
    5a7a:	fc 4a       	sbci	r31, 0xAC	; 172
    5a7c:	80 83       	st	Z, r24
    5a7e:	4f 5f       	subi	r20, 0xFF	; 255
    5a80:	5f 4f       	sbci	r21, 0xFF	; 255
    5a82:	46 36       	cpi	r20, 0x66	; 102
    5a84:	51 05       	cpc	r21, r1
    5a86:	a9 f7       	brne	.-22     	; 0x5a72 <display_clearPage+0x1a>
}
    5a88:	08 95       	ret

00005a8a <display_clearBuffer>:


void display_clearBuffer() {
    5a8a:	20 e0       	ldi	r18, 0x00	; 0
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5a8e:	66 e6       	ldi	r22, 0x66	; 102
    5a90:	70 e0       	ldi	r23, 0x00	; 0
    5a92:	0f c0       	rjmp	.+30     	; 0x5ab2 <display_clearBuffer+0x28>
    5a94:	fa 01       	movw	r30, r20
    5a96:	e8 0f       	add	r30, r24
    5a98:	f9 1f       	adc	r31, r25
    5a9a:	e0 5a       	subi	r30, 0xA0	; 160
    5a9c:	fc 4a       	sbci	r31, 0xAC	; 172
    5a9e:	10 82       	st	Z, r1
    5aa0:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5aa2:	86 36       	cpi	r24, 0x66	; 102
    5aa4:	91 05       	cpc	r25, r1
    5aa6:	b1 f7       	brne	.-20     	; 0x5a94 <display_clearBuffer+0xa>
    5aa8:	2f 5f       	subi	r18, 0xFF	; 255
    5aaa:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5aac:	28 30       	cpi	r18, 0x08	; 8
    5aae:	31 05       	cpc	r19, r1
    5ab0:	51 f0       	breq	.+20     	; 0x5ac6 <display_clearBuffer+0x3c>
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5ab6:	26 9f       	mul	r18, r22
    5ab8:	a0 01       	movw	r20, r0
    5aba:	27 9f       	mul	r18, r23
    5abc:	50 0d       	add	r21, r0
    5abe:	36 9f       	mul	r19, r22
    5ac0:	50 0d       	add	r21, r0
    5ac2:	11 24       	eor	r1, r1
    5ac4:	e7 cf       	rjmp	.-50     	; 0x5a94 <display_clearBuffer+0xa>
    5ac6:	08 95       	ret

00005ac8 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    5ac8:	cf 93       	push	r28
    5aca:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5acc:	a0 e4       	ldi	r26, 0x40	; 64
    5ace:	b6 e0       	ldi	r27, 0x06	; 6
    5ad0:	88 e3       	ldi	r24, 0x38	; 56
    5ad2:	54 96       	adiw	r26, 0x14	; 20
    5ad4:	8c 93       	st	X, r24
    5ad6:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5ad8:	40 e2       	ldi	r20, 0x20	; 32
    5ada:	56 e0       	ldi	r21, 0x06	; 6
    5adc:	fa 01       	movw	r30, r20
    5ade:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    5ae0:	30 e1       	ldi	r19, 0x10	; 16
    5ae2:	15 96       	adiw	r26, 0x05	; 5
    5ae4:	3c 93       	st	X, r19
    5ae6:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5ae8:	e0 e6       	ldi	r30, 0x60	; 96
    5aea:	f6 e0       	ldi	r31, 0x06	; 6
    5aec:	21 e0       	ldi	r18, 0x01	; 1
    5aee:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5af0:	25 83       	std	Z+5, r18	; 0x05
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	90 e9       	ldi	r25, 0x90	; 144
    5af6:	ec 01       	movw	r28, r24
    5af8:	21 97       	sbiw	r28, 0x01	; 1
    5afa:	f1 f7       	brne	.-4      	; 0x5af8 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5afc:	26 83       	std	Z+6, r18	; 0x06
    5afe:	ec 01       	movw	r28, r24
    5b00:	21 97       	sbiw	r28, 0x01	; 1
    5b02:	f1 f7       	brne	.-4      	; 0x5b00 <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5b04:	25 83       	std	Z+5, r18	; 0x05
    5b06:	01 97       	sbiw	r24, 0x01	; 1
    5b08:	f1 f7       	brne	.-4      	; 0x5b06 <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5b0a:	8d ed       	ldi	r24, 0xDD	; 221
    5b0c:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5b10:	80 eb       	ldi	r24, 0xB0	; 176
    5b12:	11 96       	adiw	r26, 0x01	; 1
    5b14:	8c 93       	st	X, r24
    5b16:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5b18:	84 e0       	ldi	r24, 0x04	; 4
    5b1a:	fa 01       	movw	r30, r20
    5b1c:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5b1e:	16 96       	adiw	r26, 0x06	; 6
    5b20:	3c 93       	st	X, r19

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b22:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b24:	82 ee       	ldi	r24, 0xE2	; 226
    5b26:	e0 ec       	ldi	r30, 0xC0	; 192
    5b28:	f8 e0       	ldi	r31, 0x08	; 8
    5b2a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b2c:	80 91 c2 08 	lds	r24, 0x08C2
    5b30:	87 ff       	sbrs	r24, 7
    5b32:	fc cf       	rjmp	.-8      	; 0x5b2c <display_init+0x64>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b34:	84 e0       	ldi	r24, 0x04	; 4
    5b36:	e0 e2       	ldi	r30, 0x20	; 32
    5b38:	f6 e0       	ldi	r31, 0x06	; 6
    5b3a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b3c:	80 e4       	ldi	r24, 0x40	; 64
    5b3e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b40:	f8 e0       	ldi	r31, 0x08	; 8
    5b42:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b44:	80 91 c2 08 	lds	r24, 0x08C2
    5b48:	87 ff       	sbrs	r24, 7
    5b4a:	fc cf       	rjmp	.-8      	; 0x5b44 <display_init+0x7c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b4c:	84 e0       	ldi	r24, 0x04	; 4
    5b4e:	e0 e2       	ldi	r30, 0x20	; 32
    5b50:	f6 e0       	ldi	r31, 0x06	; 6
    5b52:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b54:	81 ea       	ldi	r24, 0xA1	; 161
    5b56:	e0 ec       	ldi	r30, 0xC0	; 192
    5b58:	f8 e0       	ldi	r31, 0x08	; 8
    5b5a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b5c:	80 91 c2 08 	lds	r24, 0x08C2
    5b60:	87 ff       	sbrs	r24, 7
    5b62:	fc cf       	rjmp	.-8      	; 0x5b5c <display_init+0x94>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b64:	84 e0       	ldi	r24, 0x04	; 4
    5b66:	e0 e2       	ldi	r30, 0x20	; 32
    5b68:	f6 e0       	ldi	r31, 0x06	; 6
    5b6a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b6c:	80 ec       	ldi	r24, 0xC0	; 192
    5b6e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b70:	f8 e0       	ldi	r31, 0x08	; 8
    5b72:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b74:	80 91 c2 08 	lds	r24, 0x08C2
    5b78:	87 ff       	sbrs	r24, 7
    5b7a:	fc cf       	rjmp	.-8      	; 0x5b74 <display_init+0xac>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b7c:	84 e0       	ldi	r24, 0x04	; 4
    5b7e:	e0 e2       	ldi	r30, 0x20	; 32
    5b80:	f6 e0       	ldi	r31, 0x06	; 6
    5b82:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b84:	84 ea       	ldi	r24, 0xA4	; 164
    5b86:	e0 ec       	ldi	r30, 0xC0	; 192
    5b88:	f8 e0       	ldi	r31, 0x08	; 8
    5b8a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b8c:	80 91 c2 08 	lds	r24, 0x08C2
    5b90:	87 ff       	sbrs	r24, 7
    5b92:	fc cf       	rjmp	.-8      	; 0x5b8c <display_init+0xc4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b94:	84 e0       	ldi	r24, 0x04	; 4
    5b96:	e0 e2       	ldi	r30, 0x20	; 32
    5b98:	f6 e0       	ldi	r31, 0x06	; 6
    5b9a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b9c:	86 ea       	ldi	r24, 0xA6	; 166
    5b9e:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba0:	f8 e0       	ldi	r31, 0x08	; 8
    5ba2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5ba4:	80 91 c2 08 	lds	r24, 0x08C2
    5ba8:	87 ff       	sbrs	r24, 7
    5baa:	fc cf       	rjmp	.-8      	; 0x5ba4 <display_init+0xdc>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bac:	84 e0       	ldi	r24, 0x04	; 4
    5bae:	e0 e2       	ldi	r30, 0x20	; 32
    5bb0:	f6 e0       	ldi	r31, 0x06	; 6
    5bb2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bb4:	8f e2       	ldi	r24, 0x2F	; 47
    5bb6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bb8:	f8 e0       	ldi	r31, 0x08	; 8
    5bba:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bbc:	80 91 c2 08 	lds	r24, 0x08C2
    5bc0:	87 ff       	sbrs	r24, 7
    5bc2:	fc cf       	rjmp	.-8      	; 0x5bbc <display_init+0xf4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bc4:	84 e0       	ldi	r24, 0x04	; 4
    5bc6:	e0 e2       	ldi	r30, 0x20	; 32
    5bc8:	f6 e0       	ldi	r31, 0x06	; 6
    5bca:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bcc:	87 e2       	ldi	r24, 0x27	; 39
    5bce:	e0 ec       	ldi	r30, 0xC0	; 192
    5bd0:	f8 e0       	ldi	r31, 0x08	; 8
    5bd2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bd4:	80 91 c2 08 	lds	r24, 0x08C2
    5bd8:	87 ff       	sbrs	r24, 7
    5bda:	fc cf       	rjmp	.-8      	; 0x5bd4 <display_init+0x10c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bdc:	84 e0       	ldi	r24, 0x04	; 4
    5bde:	e0 e2       	ldi	r30, 0x20	; 32
    5be0:	f6 e0       	ldi	r31, 0x06	; 6
    5be2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5be4:	8a ef       	ldi	r24, 0xFA	; 250
    5be6:	e0 ec       	ldi	r30, 0xC0	; 192
    5be8:	f8 e0       	ldi	r31, 0x08	; 8
    5bea:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bec:	80 91 c2 08 	lds	r24, 0x08C2
    5bf0:	87 ff       	sbrs	r24, 7
    5bf2:	fc cf       	rjmp	.-8      	; 0x5bec <display_init+0x124>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bf4:	84 e0       	ldi	r24, 0x04	; 4
    5bf6:	e0 e2       	ldi	r30, 0x20	; 32
    5bf8:	f6 e0       	ldi	r31, 0x06	; 6
    5bfa:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bfc:	80 e9       	ldi	r24, 0x90	; 144
    5bfe:	e0 ec       	ldi	r30, 0xC0	; 192
    5c00:	f8 e0       	ldi	r31, 0x08	; 8
    5c02:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c04:	80 91 c2 08 	lds	r24, 0x08C2
    5c08:	87 ff       	sbrs	r24, 7
    5c0a:	fc cf       	rjmp	.-8      	; 0x5c04 <display_init+0x13c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c0c:	84 e0       	ldi	r24, 0x04	; 4
    5c0e:	e0 e2       	ldi	r30, 0x20	; 32
    5c10:	f6 e0       	ldi	r31, 0x06	; 6
    5c12:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c14:	80 e4       	ldi	r24, 0x40	; 64
    5c16:	e0 ec       	ldi	r30, 0xC0	; 192
    5c18:	f8 e0       	ldi	r31, 0x08	; 8
    5c1a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c1c:	80 91 c2 08 	lds	r24, 0x08C2
    5c20:	87 ff       	sbrs	r24, 7
    5c22:	fc cf       	rjmp	.-8      	; 0x5c1c <display_init+0x154>
    5c24:	8c ed       	ldi	r24, 0xDC	; 220
    5c26:	95 e0       	ldi	r25, 0x05	; 5
    5c28:	20 e7       	ldi	r18, 0x70	; 112
    5c2a:	31 e0       	ldi	r19, 0x01	; 1
    5c2c:	f9 01       	movw	r30, r18
    5c2e:	31 97       	sbiw	r30, 0x01	; 1
    5c30:	f1 f7       	brne	.-4      	; 0x5c2e <display_init+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c34:	d9 f7       	brne	.-10     	; 0x5c2c <display_init+0x164>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c36:	84 e0       	ldi	r24, 0x04	; 4
    5c38:	e0 e2       	ldi	r30, 0x20	; 32
    5c3a:	f6 e0       	ldi	r31, 0x06	; 6
    5c3c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c3e:	82 ea       	ldi	r24, 0xA2	; 162
    5c40:	e0 ec       	ldi	r30, 0xC0	; 192
    5c42:	f8 e0       	ldi	r31, 0x08	; 8
    5c44:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c46:	80 91 c2 08 	lds	r24, 0x08C2
    5c4a:	87 ff       	sbrs	r24, 7
    5c4c:	fc cf       	rjmp	.-8      	; 0x5c46 <display_init+0x17e>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c4e:	84 e0       	ldi	r24, 0x04	; 4
    5c50:	e0 e2       	ldi	r30, 0x20	; 32
    5c52:	f6 e0       	ldi	r31, 0x06	; 6
    5c54:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c56:	81 e8       	ldi	r24, 0x81	; 129
    5c58:	e0 ec       	ldi	r30, 0xC0	; 192
    5c5a:	f8 e0       	ldi	r31, 0x08	; 8
    5c5c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c5e:	80 91 c2 08 	lds	r24, 0x08C2
    5c62:	87 ff       	sbrs	r24, 7
    5c64:	fc cf       	rjmp	.-8      	; 0x5c5e <display_init+0x196>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c66:	84 e0       	ldi	r24, 0x04	; 4
    5c68:	e0 e2       	ldi	r30, 0x20	; 32
    5c6a:	f6 e0       	ldi	r31, 0x06	; 6
    5c6c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c6e:	88 e0       	ldi	r24, 0x08	; 8
    5c70:	e0 ec       	ldi	r30, 0xC0	; 192
    5c72:	f8 e0       	ldi	r31, 0x08	; 8
    5c74:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c76:	80 91 c2 08 	lds	r24, 0x08C2
    5c7a:	87 ff       	sbrs	r24, 7
    5c7c:	fc cf       	rjmp	.-8      	; 0x5c76 <display_init+0x1ae>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c7e:	84 e0       	ldi	r24, 0x04	; 4
    5c80:	e0 e2       	ldi	r30, 0x20	; 32
    5c82:	f6 e0       	ldi	r31, 0x06	; 6
    5c84:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c86:	8f ea       	ldi	r24, 0xAF	; 175
    5c88:	e0 ec       	ldi	r30, 0xC0	; 192
    5c8a:	f8 e0       	ldi	r31, 0x08	; 8
    5c8c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c8e:	80 91 c2 08 	lds	r24, 0x08C2
    5c92:	87 ff       	sbrs	r24, 7
    5c94:	fc cf       	rjmp	.-8      	; 0x5c8e <display_init+0x1c6>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearBuffer();
    5c96:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <display_clearBuffer>
	display_writeBufferToScreen();
    5c9a:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>

}
    5c9e:	df 91       	pop	r29
    5ca0:	cf 91       	pop	r28
    5ca2:	08 95       	ret

00005ca4 <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5ca4:	2f 92       	push	r2
    5ca6:	3f 92       	push	r3
    5ca8:	4f 92       	push	r4
    5caa:	5f 92       	push	r5
    5cac:	6f 92       	push	r6
    5cae:	7f 92       	push	r7
    5cb0:	8f 92       	push	r8
    5cb2:	9f 92       	push	r9
    5cb4:	af 92       	push	r10
    5cb6:	bf 92       	push	r11
    5cb8:	cf 92       	push	r12
    5cba:	df 92       	push	r13
    5cbc:	ef 92       	push	r14
    5cbe:	ff 92       	push	r15
    5cc0:	0f 93       	push	r16
    5cc2:	1f 93       	push	r17
    5cc4:	df 93       	push	r29
    5cc6:	cf 93       	push	r28
    5cc8:	cd b7       	in	r28, 0x3d	; 61
    5cca:	de b7       	in	r29, 0x3e	; 62
    5ccc:	28 97       	sbiw	r28, 0x08	; 8
    5cce:	cd bf       	out	0x3d, r28	; 61
    5cd0:	de bf       	out	0x3e, r29	; 62
    5cd2:	1c 01       	movw	r2, r24
    5cd4:	4c 83       	std	Y+4, r20	; 0x04
    5cd6:	2f 83       	std	Y+7, r18	; 0x07
    5cd8:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5cda:	d9 01       	movw	r26, r18
    5cdc:	13 96       	adiw	r26, 0x03	; 3
    5cde:	bc 91       	ld	r27, X
    5ce0:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5ce2:	f9 01       	movw	r30, r18
    5ce4:	f4 81       	ldd	r31, Z+4	; 0x04
    5ce6:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5ce8:	d9 01       	movw	r26, r18
    5cea:	15 96       	adiw	r26, 0x05	; 5
    5cec:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5cee:	bb 81       	ldd	r27, Y+3	; 0x03
    5cf0:	0b 2f       	mov	r16, r27
    5cf2:	10 e0       	ldi	r17, 0x00	; 0
    5cf4:	c8 01       	movw	r24, r16
    5cf6:	07 96       	adiw	r24, 0x07	; 7
    5cf8:	e3 e0       	ldi	r30, 0x03	; 3
    5cfa:	95 95       	asr	r25
    5cfc:	87 95       	ror	r24
    5cfe:	ea 95       	dec	r30
    5d00:	e1 f7       	brne	.-8      	; 0x5cfa <display_putString+0x56>
    5d02:	89 83       	std	Y+1, r24	; 0x01
    5d04:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d06:	e2 2e       	mov	r14, r18
    5d08:	ff 24       	eor	r15, r15
    5d0a:	e6 e0       	ldi	r30, 0x06	; 6
    5d0c:	f0 e0       	ldi	r31, 0x00	; 0
    5d0e:	ee 0e       	add	r14, r30
    5d10:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    5d12:	46 2e       	mov	r4, r22
    5d14:	55 24       	eor	r5, r5
    5d16:	6f c0       	rjmp	.+222    	; 0x5df6 <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5d18:	7e 2f       	mov	r23, r30
    5d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    5d1c:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5d1e:	af 81       	ldd	r26, Y+7	; 0x07
    5d20:	b8 85       	ldd	r27, Y+8	; 0x08
    5d22:	8c 91       	ld	r24, X
    5d24:	88 23       	and	r24, r24
    5d26:	39 f4       	brne	.+14     	; 0x5d36 <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5d28:	12 96       	adiw	r26, 0x02	; 2
    5d2a:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5d2c:	74 9f       	mul	r23, r20
    5d2e:	f0 01       	movw	r30, r0
    5d30:	11 24       	eor	r1, r1
    5d32:	36 96       	adiw	r30, 0x06	; 6
    5d34:	2b c0       	rjmp	.+86     	; 0x5d8c <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5d36:	ef 81       	ldd	r30, Y+7	; 0x07
    5d38:	f8 85       	ldd	r31, Y+8	; 0x08
    5d3a:	e7 0f       	add	r30, r23
    5d3c:	f1 1d       	adc	r31, r1
    5d3e:	46 81       	ldd	r20, Z+6	; 0x06
    5d40:	ef 81       	ldd	r30, Y+7	; 0x07
    5d42:	f8 85       	ldd	r31, Y+8	; 0x08
    5d44:	ed 83       	std	Y+5, r30	; 0x05
    5d46:	fe 83       	std	Y+6, r31	; 0x06
    5d48:	50 e0       	ldi	r21, 0x00	; 0
    5d4a:	a0 e0       	ldi	r26, 0x00	; 0
    5d4c:	b0 e0       	ldi	r27, 0x00	; 0
    5d4e:	0a c0       	rjmp	.+20     	; 0x5d64 <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5d50:	ed 81       	ldd	r30, Y+5	; 0x05
    5d52:	fe 81       	ldd	r31, Y+6	; 0x06
    5d54:	85 81       	ldd	r24, Z+5	; 0x05
    5d56:	f9 81       	ldd	r31, Y+1	; 0x01
    5d58:	f8 9f       	mul	r31, r24
    5d5a:	c0 01       	movw	r24, r0
    5d5c:	11 24       	eor	r1, r1
    5d5e:	a8 0f       	add	r26, r24
    5d60:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5d62:	5f 5f       	subi	r21, 0xFF	; 255
    5d64:	8d 81       	ldd	r24, Y+5	; 0x05
    5d66:	9e 81       	ldd	r25, Y+6	; 0x06
    5d68:	01 96       	adiw	r24, 0x01	; 1
    5d6a:	8d 83       	std	Y+5, r24	; 0x05
    5d6c:	9e 83       	std	Y+6, r25	; 0x06
    5d6e:	57 17       	cp	r21, r23
    5d70:	78 f3       	brcs	.-34     	; 0x5d50 <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d72:	84 2f       	mov	r24, r20
    5d74:	90 e0       	ldi	r25, 0x00	; 0
    5d76:	82 9f       	mul	r24, r18
    5d78:	f0 01       	movw	r30, r0
    5d7a:	83 9f       	mul	r24, r19
    5d7c:	f0 0d       	add	r31, r0
    5d7e:	92 9f       	mul	r25, r18
    5d80:	f0 0d       	add	r31, r0
    5d82:	11 24       	eor	r1, r1
    5d84:	ee 0d       	add	r30, r14
    5d86:	ff 1d       	adc	r31, r15
    5d88:	ea 0f       	add	r30, r26
    5d8a:	fb 1f       	adc	r31, r27
    5d8c:	af 81       	ldd	r26, Y+7	; 0x07
    5d8e:	b8 85       	ldd	r27, Y+8	; 0x08
    5d90:	ae 0f       	add	r26, r30
    5d92:	bf 1f       	adc	r27, r31
    5d94:	50 e0       	ldi	r21, 0x00	; 0
    5d96:	16 c0       	rjmp	.+44     	; 0x5dc4 <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5d98:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    5d9c:	99 30       	cpi	r25, 0x09	; 9
    5d9e:	50 f0       	brcs	.+20     	; 0x5db4 <display_putString+0x110>
    5da0:	08 15       	cp	r16, r8
    5da2:	19 05       	cpc	r17, r9
    5da4:	3c f4       	brge	.+14     	; 0x5db4 <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	06 2c       	mov	r0, r6
    5daa:	02 c0       	rjmp	.+4      	; 0x5db0 <display_putString+0x10c>
    5dac:	95 95       	asr	r25
    5dae:	87 95       	ror	r24
    5db0:	0a 94       	dec	r0
    5db2:	e2 f7       	brpl	.-8      	; 0x5dac <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5db4:	f5 01       	movw	r30, r10
    5db6:	e7 0f       	add	r30, r23
    5db8:	f1 1d       	adc	r31, r1
    5dba:	e0 5a       	subi	r30, 0xA0	; 160
    5dbc:	fc 4a       	sbci	r31, 0xAC	; 172
    5dbe:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5dc0:	5f 5f       	subi	r21, 0xFF	; 255
    5dc2:	11 96       	adiw	r26, 0x01	; 1
    5dc4:	75 2f       	mov	r23, r21
    5dc6:	76 0f       	add	r23, r22
    5dc8:	54 17       	cp	r21, r20
    5dca:	30 f3       	brcs	.-52     	; 0x5d98 <display_putString+0xf4>
    5dcc:	84 2f       	mov	r24, r20
    5dce:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5dd0:	85 36       	cpi	r24, 0x65	; 101
    5dd2:	31 f0       	breq	.+12     	; 0x5de0 <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    5dd4:	f5 01       	movw	r30, r10
    5dd6:	e8 0f       	add	r30, r24
    5dd8:	f1 1d       	adc	r31, r1
    5dda:	ef 59       	subi	r30, 0x9F	; 159
    5ddc:	fc 4a       	sbci	r31, 0xAC	; 172
    5dde:	10 82       	st	Z, r1
 		}
		offset++;
    5de0:	68 2f       	mov	r22, r24
    5de2:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    5de4:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5de6:	f1 01       	movw	r30, r2
    5de8:	ed 0d       	add	r30, r13
    5dea:	f1 1d       	adc	r31, r1
    5dec:	e0 81       	ld	r30, Z
    5dee:	ee 23       	and	r30, r30
    5df0:	09 f0       	breq	.+2      	; 0x5df4 <display_putString+0x150>
    5df2:	92 cf       	rjmp	.-220    	; 0x5d18 <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5df4:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5df6:	2c 2d       	mov	r18, r12
    5df8:	30 e0       	ldi	r19, 0x00	; 0
    5dfa:	c9 01       	movw	r24, r18
    5dfc:	73 e0       	ldi	r23, 0x03	; 3
    5dfe:	88 0f       	add	r24, r24
    5e00:	99 1f       	adc	r25, r25
    5e02:	7a 95       	dec	r23
    5e04:	e1 f7       	brne	.-8      	; 0x5dfe <display_putString+0x15a>
    5e06:	80 17       	cp	r24, r16
    5e08:	91 07       	cpc	r25, r17
    5e0a:	e4 f4       	brge	.+56     	; 0x5e44 <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5e0c:	2f 5f       	subi	r18, 0xFF	; 255
    5e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e10:	49 01       	movw	r8, r18
    5e12:	63 e0       	ldi	r22, 0x03	; 3
    5e14:	88 0c       	add	r8, r8
    5e16:	99 1c       	adc	r9, r9
    5e18:	6a 95       	dec	r22
    5e1a:	e1 f7       	brne	.-8      	; 0x5e14 <display_putString+0x170>
    5e1c:	21 50       	subi	r18, 0x01	; 1
    5e1e:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5e20:	34 01       	movw	r6, r8
    5e22:	60 1a       	sub	r6, r16
    5e24:	71 0a       	sbc	r7, r17
    5e26:	6c 81       	ldd	r22, Y+4	; 0x04
    5e28:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5e2a:	c9 01       	movw	r24, r18
    5e2c:	84 0d       	add	r24, r4
    5e2e:	95 1d       	adc	r25, r5
    5e30:	a6 e6       	ldi	r26, 0x66	; 102
    5e32:	b0 e0       	ldi	r27, 0x00	; 0
    5e34:	8a 9f       	mul	r24, r26
    5e36:	50 01       	movw	r10, r0
    5e38:	8b 9f       	mul	r24, r27
    5e3a:	b0 0c       	add	r11, r0
    5e3c:	9a 9f       	mul	r25, r26
    5e3e:	b0 0c       	add	r11, r0
    5e40:	11 24       	eor	r1, r1
    5e42:	d1 cf       	rjmp	.-94     	; 0x5de6 <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    5e44:	28 96       	adiw	r28, 0x08	; 8
    5e46:	cd bf       	out	0x3d, r28	; 61
    5e48:	de bf       	out	0x3e, r29	; 62
    5e4a:	cf 91       	pop	r28
    5e4c:	df 91       	pop	r29
    5e4e:	1f 91       	pop	r17
    5e50:	0f 91       	pop	r16
    5e52:	ff 90       	pop	r15
    5e54:	ef 90       	pop	r14
    5e56:	df 90       	pop	r13
    5e58:	cf 90       	pop	r12
    5e5a:	bf 90       	pop	r11
    5e5c:	af 90       	pop	r10
    5e5e:	9f 90       	pop	r9
    5e60:	8f 90       	pop	r8
    5e62:	7f 90       	pop	r7
    5e64:	6f 90       	pop	r6
    5e66:	5f 90       	pop	r5
    5e68:	4f 90       	pop	r4
    5e6a:	3f 90       	pop	r3
    5e6c:	2f 90       	pop	r2
    5e6e:	08 95       	ret

00005e70 <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    5e70:	28 2f       	mov	r18, r24
    5e72:	26 95       	lsr	r18
    5e74:	26 95       	lsr	r18
    5e76:	26 95       	lsr	r18
    5e78:	70 e0       	ldi	r23, 0x00	; 0
    5e7a:	a8 2f       	mov	r26, r24
    5e7c:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    5e7e:	44 23       	and	r20, r20
    5e80:	d9 f0       	breq	.+54     	; 0x5eb8 <display_drawPixel+0x48>
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	86 e6       	ldi	r24, 0x66	; 102
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	28 9f       	mul	r18, r24
    5e8a:	f0 01       	movw	r30, r0
    5e8c:	29 9f       	mul	r18, r25
    5e8e:	f0 0d       	add	r31, r0
    5e90:	38 9f       	mul	r19, r24
    5e92:	f0 0d       	add	r31, r0
    5e94:	11 24       	eor	r1, r1
    5e96:	e6 0f       	add	r30, r22
    5e98:	f7 1f       	adc	r31, r23
    5e9a:	e0 5a       	subi	r30, 0xA0	; 160
    5e9c:	fc 4a       	sbci	r31, 0xAC	; 172
    5e9e:	20 81       	ld	r18, Z
    5ea0:	a7 70       	andi	r26, 0x07	; 7
    5ea2:	b0 70       	andi	r27, 0x00	; 0
    5ea4:	81 e0       	ldi	r24, 0x01	; 1
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	02 c0       	rjmp	.+4      	; 0x5eae <display_drawPixel+0x3e>
    5eaa:	88 0f       	add	r24, r24
    5eac:	99 1f       	adc	r25, r25
    5eae:	aa 95       	dec	r26
    5eb0:	e2 f7       	brpl	.-8      	; 0x5eaa <display_drawPixel+0x3a>
    5eb2:	28 2b       	or	r18, r24
    5eb4:	20 83       	st	Z, r18
    5eb6:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5eb8:	30 e0       	ldi	r19, 0x00	; 0
    5eba:	86 e6       	ldi	r24, 0x66	; 102
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	28 9f       	mul	r18, r24
    5ec0:	f0 01       	movw	r30, r0
    5ec2:	29 9f       	mul	r18, r25
    5ec4:	f0 0d       	add	r31, r0
    5ec6:	38 9f       	mul	r19, r24
    5ec8:	f0 0d       	add	r31, r0
    5eca:	11 24       	eor	r1, r1
    5ecc:	e6 0f       	add	r30, r22
    5ece:	f7 1f       	adc	r31, r23
    5ed0:	e0 5a       	subi	r30, 0xA0	; 160
    5ed2:	fc 4a       	sbci	r31, 0xAC	; 172
    5ed4:	20 81       	ld	r18, Z
    5ed6:	a7 70       	andi	r26, 0x07	; 7
    5ed8:	b0 70       	andi	r27, 0x00	; 0
    5eda:	81 e0       	ldi	r24, 0x01	; 1
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	02 c0       	rjmp	.+4      	; 0x5ee4 <display_drawPixel+0x74>
    5ee0:	88 0f       	add	r24, r24
    5ee2:	99 1f       	adc	r25, r25
    5ee4:	aa 95       	dec	r26
    5ee6:	e2 f7       	brpl	.-8      	; 0x5ee0 <display_drawPixel+0x70>
    5ee8:	80 95       	com	r24
    5eea:	82 23       	and	r24, r18
    5eec:	80 83       	st	Z, r24
    5eee:	08 95       	ret

00005ef0 <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    5ef4:	90 81       	ld	r25, Z
	*val2 = *val1;
    5ef6:	8c 91       	ld	r24, X
    5ef8:	80 83       	st	Z, r24
	*val1 = tempVal;
    5efa:	9c 93       	st	X, r25
}
    5efc:	08 95       	ret

00005efe <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5efe:	df 92       	push	r13
    5f00:	ef 92       	push	r14
    5f02:	ff 92       	push	r15
    5f04:	0f 93       	push	r16
    5f06:	1f 93       	push	r17
    5f08:	cf 93       	push	r28
    5f0a:	df 93       	push	r29
    5f0c:	f8 2e       	mov	r15, r24
    5f0e:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5f10:	84 17       	cp	r24, r20
    5f12:	d9 f4       	brne	.+54     	; 0x5f4a <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    5f14:	26 17       	cp	r18, r22
    5f16:	18 f4       	brcc	.+6      	; 0x5f1e <display_drawLine+0x20>
    5f18:	dd 24       	eor	r13, r13
    5f1a:	da 94       	dec	r13
    5f1c:	02 c0       	rjmp	.+4      	; 0x5f22 <display_drawLine+0x24>
    5f1e:	dd 24       	eor	r13, r13
    5f20:	d3 94       	inc	r13
		j = column1;
    5f22:	1e 2d       	mov	r17, r14
		while (j != column2) {
    5f24:	c2 2f       	mov	r28, r18
    5f26:	d0 e0       	ldi	r29, 0x00	; 0
    5f28:	06 c0       	rjmp	.+12     	; 0x5f36 <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5f2a:	8f 2d       	mov	r24, r15
    5f2c:	61 2f       	mov	r22, r17
    5f2e:	40 2f       	mov	r20, r16
    5f30:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
    5f34:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    5f36:	81 2f       	mov	r24, r17
    5f38:	99 27       	eor	r25, r25
    5f3a:	87 fd       	sbrc	r24, 7
    5f3c:	90 95       	com	r25
    5f3e:	8c 17       	cp	r24, r28
    5f40:	9d 07       	cpc	r25, r29
    5f42:	99 f7       	brne	.-26     	; 0x5f2a <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    5f44:	8f 2d       	mov	r24, r15
    5f46:	61 2f       	mov	r22, r17
    5f48:	1c c0       	rjmp	.+56     	; 0x5f82 <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    5f4a:	62 17       	cp	r22, r18
    5f4c:	e9 f4       	brne	.+58     	; 0x5f88 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    5f4e:	48 17       	cp	r20, r24
    5f50:	18 f4       	brcc	.+6      	; 0x5f58 <display_drawLine+0x5a>
    5f52:	dd 24       	eor	r13, r13
    5f54:	da 94       	dec	r13
    5f56:	02 c0       	rjmp	.+4      	; 0x5f5c <display_drawLine+0x5e>
    5f58:	dd 24       	eor	r13, r13
    5f5a:	d3 94       	inc	r13
		i = row1;
    5f5c:	1f 2d       	mov	r17, r15
		while(i != row2) {
    5f5e:	c4 2f       	mov	r28, r20
    5f60:	d0 e0       	ldi	r29, 0x00	; 0
    5f62:	06 c0       	rjmp	.+12     	; 0x5f70 <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    5f64:	81 2f       	mov	r24, r17
    5f66:	6e 2d       	mov	r22, r14
    5f68:	40 2f       	mov	r20, r16
    5f6a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
    5f6e:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    5f70:	81 2f       	mov	r24, r17
    5f72:	99 27       	eor	r25, r25
    5f74:	87 fd       	sbrc	r24, 7
    5f76:	90 95       	com	r25
    5f78:	8c 17       	cp	r24, r28
    5f7a:	9d 07       	cpc	r25, r29
    5f7c:	99 f7       	brne	.-26     	; 0x5f64 <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    5f7e:	81 2f       	mov	r24, r17
    5f80:	6e 2d       	mov	r22, r14
    5f82:	40 2f       	mov	r20, r16
    5f84:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
			
			
		}
		*/
	}
}
    5f88:	df 91       	pop	r29
    5f8a:	cf 91       	pop	r28
    5f8c:	1f 91       	pop	r17
    5f8e:	0f 91       	pop	r16
    5f90:	ff 90       	pop	r15
    5f92:	ef 90       	pop	r14
    5f94:	df 90       	pop	r13
    5f96:	08 95       	ret

00005f98 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5f98:	6f 92       	push	r6
    5f9a:	7f 92       	push	r7
    5f9c:	8f 92       	push	r8
    5f9e:	9f 92       	push	r9
    5fa0:	bf 92       	push	r11
    5fa2:	cf 92       	push	r12
    5fa4:	df 92       	push	r13
    5fa6:	ef 92       	push	r14
    5fa8:	ff 92       	push	r15
    5faa:	0f 93       	push	r16
    5fac:	1f 93       	push	r17
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	18 2f       	mov	r17, r24
    5fb4:	b6 2e       	mov	r11, r22
    5fb6:	d2 2e       	mov	r13, r18
    5fb8:	d6 0e       	add	r13, r22
    5fba:	f4 2e       	mov	r15, r20
    5fbc:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5fbe:	00 23       	and	r16, r16
    5fc0:	c1 f4       	brne	.+48     	; 0x5ff2 <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    5fc2:	41 2f       	mov	r20, r17
    5fc4:	2d 2d       	mov	r18, r13
    5fc6:	0c 2d       	mov	r16, r12
    5fc8:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5fcc:	8f 2d       	mov	r24, r15
    5fce:	6b 2d       	mov	r22, r11
    5fd0:	4f 2d       	mov	r20, r15
    5fd2:	2d 2d       	mov	r18, r13
    5fd4:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5fd8:	81 2f       	mov	r24, r17
    5fda:	6b 2d       	mov	r22, r11
    5fdc:	4f 2d       	mov	r20, r15
    5fde:	2b 2d       	mov	r18, r11
    5fe0:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    5fe4:	81 2f       	mov	r24, r17
    5fe6:	6d 2d       	mov	r22, r13
    5fe8:	4f 2d       	mov	r20, r15
    5fea:	2d 2d       	mov	r18, r13
    5fec:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
    5ff0:	63 c0       	rjmp	.+198    	; 0x60b8 <__stack+0xb9>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    5ff2:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    5ff4:	08 2f       	mov	r16, r24
    5ff6:	10 e0       	ldi	r17, 0x00	; 0
    5ff8:	04 0f       	add	r16, r20
    5ffa:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    5ffc:	cf 2d       	mov	r28, r15
    5ffe:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    6000:	a7 e0       	ldi	r26, 0x07	; 7
    6002:	b0 e0       	ldi	r27, 0x00	; 0
    6004:	ac 1b       	sub	r26, r28
    6006:	bd 0b       	sbc	r27, r29
    6008:	2f ef       	ldi	r18, 0xFF	; 255
    600a:	82 2e       	mov	r8, r18
    600c:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    600e:	96 e6       	ldi	r25, 0x66	; 102
    6010:	69 2e       	mov	r6, r25
    6012:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    6014:	88 e0       	ldi	r24, 0x08	; 8
    6016:	c8 2e       	mov	r12, r24
    6018:	49 c0       	rjmp	.+146    	; 0x60ac <__stack+0xad>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    601a:	f7 e0       	ldi	r31, 0x07	; 7
    601c:	ff 2e       	mov	r15, r31
    601e:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    6020:	6f 2d       	mov	r22, r15
    6022:	70 e0       	ldi	r23, 0x00	; 0
    6024:	c9 01       	movw	r24, r18
    6026:	07 96       	adiw	r24, 0x07	; 7
    6028:	86 1b       	sub	r24, r22
    602a:	97 0b       	sbc	r25, r23
    602c:	c8 17       	cp	r28, r24
    602e:	d9 07       	cpc	r29, r25
    6030:	44 f0       	brlt	.+16     	; 0x6042 <__stack+0x43>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    6032:	c4 01       	movw	r24, r8
    6034:	0f 2c       	mov	r0, r15
    6036:	02 c0       	rjmp	.+4      	; 0x603c <__stack+0x3d>
    6038:	88 0f       	add	r24, r24
    603a:	99 1f       	adc	r25, r25
    603c:	0a 94       	dec	r0
    603e:	e2 f7       	brpl	.-8      	; 0x6038 <__stack+0x39>
    6040:	08 c0       	rjmp	.+16     	; 0x6052 <__stack+0x53>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    6042:	2a 0f       	add	r18, r26
    6044:	3b 1f       	adc	r19, r27
    6046:	c4 01       	movw	r24, r8
    6048:	02 c0       	rjmp	.+4      	; 0x604e <__stack+0x4f>
    604a:	95 95       	asr	r25
    604c:	87 95       	ror	r24
    604e:	2a 95       	dec	r18
    6050:	e2 f7       	brpl	.-8      	; 0x604a <__stack+0x4b>
    6052:	28 2f       	mov	r18, r24
			}
			page = i/8;
    6054:	85 2f       	mov	r24, r21
    6056:	86 95       	lsr	r24
    6058:	86 95       	lsr	r24
    605a:	86 95       	lsr	r24
    605c:	3b 2d       	mov	r19, r11
    605e:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    6060:	86 9d       	mul	r24, r6
    6062:	b0 01       	movw	r22, r0
    6064:	87 9d       	mul	r24, r7
    6066:	70 0d       	add	r23, r0
    6068:	96 9d       	mul	r25, r6
    606a:	70 0d       	add	r23, r0
    606c:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    606e:	42 2f       	mov	r20, r18
    6070:	40 95       	com	r20
    6072:	17 c0       	rjmp	.+46     	; 0x60a2 <__stack+0xa3>
    6074:	e3 2f       	mov	r30, r19
    6076:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    6078:	ee 20       	and	r14, r14
    607a:	69 f0       	breq	.+26     	; 0x6096 <__stack+0x97>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    607c:	e6 0f       	add	r30, r22
    607e:	f7 1f       	adc	r31, r23
    6080:	e0 5a       	subi	r30, 0xA0	; 160
    6082:	fc 4a       	sbci	r31, 0xAC	; 172
    6084:	80 81       	ld	r24, Z
    6086:	90 81       	ld	r25, Z
    6088:	82 23       	and	r24, r18
    608a:	80 95       	com	r24
    608c:	82 23       	and	r24, r18
    608e:	94 23       	and	r25, r20
    6090:	89 2b       	or	r24, r25
    6092:	80 83       	st	Z, r24
    6094:	05 c0       	rjmp	.+10     	; 0x60a0 <__stack+0xa1>
				} else {
					displayBuffer[page][j] = byteOut;	
    6096:	e6 0f       	add	r30, r22
    6098:	f7 1f       	adc	r31, r23
    609a:	e0 5a       	subi	r30, 0xA0	; 160
    609c:	fc 4a       	sbci	r31, 0xAC	; 172
    609e:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    60a0:	3f 5f       	subi	r19, 0xFF	; 255
    60a2:	d3 16       	cp	r13, r19
    60a4:	38 f7       	brcc	.-50     	; 0x6074 <__stack+0x75>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    60a6:	8c 2d       	mov	r24, r12
    60a8:	8f 19       	sub	r24, r15
    60aa:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    60ac:	25 2f       	mov	r18, r21
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	02 17       	cp	r16, r18
    60b2:	13 07       	cpc	r17, r19
    60b4:	0c f0       	brlt	.+2      	; 0x60b8 <__stack+0xb9>
    60b6:	b1 cf       	rjmp	.-158    	; 0x601a <__stack+0x1b>
			i += (8 - remainder);	
		}
	
	}
			
}
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	1f 91       	pop	r17
    60be:	0f 91       	pop	r16
    60c0:	ff 90       	pop	r15
    60c2:	ef 90       	pop	r14
    60c4:	df 90       	pop	r13
    60c6:	cf 90       	pop	r12
    60c8:	bf 90       	pop	r11
    60ca:	9f 90       	pop	r9
    60cc:	8f 90       	pop	r8
    60ce:	7f 90       	pop	r7
    60d0:	6f 90       	pop	r6
    60d2:	08 95       	ret

000060d4 <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    60d4:	88 e0       	ldi	r24, 0x08	; 8
    60d6:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    60da:	80 ec       	ldi	r24, 0xC0	; 192
    60dc:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    60e0:	e0 e0       	ldi	r30, 0x00	; 0
    60e2:	f8 e0       	ldi	r31, 0x08	; 8
    60e4:	8f ef       	ldi	r24, 0xFF	; 255
    60e6:	9f ef       	ldi	r25, 0xFF	; 255
    60e8:	86 a3       	std	Z+38, r24	; 0x26
    60ea:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    60ec:	80 81       	ld	r24, Z
    60ee:	80 7f       	andi	r24, 0xF0	; 240
    60f0:	84 60       	ori	r24, 0x04	; 4
    60f2:	80 83       	st	Z, r24
  
	
	
}
    60f4:	08 95       	ret

000060f6 <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    60f6:	f8 94       	cli
  UNIX_time = time;
    60f8:	60 93 68 33 	sts	0x3368, r22
    60fc:	70 93 69 33 	sts	0x3369, r23
    6100:	80 93 6a 33 	sts	0x336A, r24
    6104:	90 93 6b 33 	sts	0x336B, r25
  sei();
    6108:	78 94       	sei
}
    610a:	08 95       	ret

0000610c <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    610c:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    610e:	20 91 60 08 	lds	r18, 0x0860
    6112:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    6116:	60 91 20 08 	lds	r22, 0x0820
    611a:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    611e:	80 91 60 08 	lds	r24, 0x0860
    6122:	90 91 61 08 	lds	r25, 0x0861
    6126:	28 17       	cp	r18, r24
    6128:	39 07       	cpc	r19, r25
    612a:	41 f0       	breq	.+16     	; 0x613c <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    612c:	20 91 60 08 	lds	r18, 0x0860
    6130:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    6134:	60 91 20 08 	lds	r22, 0x0820
    6138:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    613c:	78 94       	sei
    613e:	40 e0       	ldi	r20, 0x00	; 0
    6140:	50 e0       	ldi	r21, 0x00	; 0
    6142:	a9 01       	movw	r20, r18
    6144:	33 27       	eor	r19, r19
    6146:	22 27       	eor	r18, r18
    6148:	cb 01       	movw	r24, r22
    614a:	a0 e0       	ldi	r26, 0x00	; 0
    614c:	b0 e0       	ldi	r27, 0x00	; 0
    614e:	28 0f       	add	r18, r24
    6150:	39 1f       	adc	r19, r25
    6152:	4a 1f       	adc	r20, r26
    6154:	5b 1f       	adc	r21, r27
  return result;
}
    6156:	b9 01       	movw	r22, r18
    6158:	ca 01       	movw	r24, r20
    615a:	08 95       	ret

0000615c <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    615c:	e0 e0       	ldi	r30, 0x00	; 0
    615e:	f2 e0       	ldi	r31, 0x02	; 2
    6160:	92 e0       	ldi	r25, 0x02	; 2
    6162:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    6164:	8a e2       	ldi	r24, 0x2A	; 42
    6166:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6168:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    616a:	83 e2       	ldi	r24, 0x23	; 35
    616c:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    616e:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    6170:	88 e3       	ldi	r24, 0x38	; 56
    6172:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6174:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    6176:	81 e3       	ldi	r24, 0x31	; 49
    6178:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    617a:	84 81       	ldd	r24, Z+4	; 0x04
    617c:	88 7f       	andi	r24, 0xF8	; 248
    617e:	84 60       	ori	r24, 0x04	; 4
    6180:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    6182:	80 e1       	ldi	r24, 0x10	; 16
    6184:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    6186:	83 81       	ldd	r24, Z+3	; 0x03
    6188:	80 6c       	ori	r24, 0xC0	; 192
    618a:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    618c:	81 81       	ldd	r24, Z+1	; 0x01
    618e:	88 61       	ori	r24, 0x18	; 24
    6190:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    6192:	80 a1       	ldd	r24, Z+32	; 0x20
    6194:	80 68       	ori	r24, 0x80	; 128
    6196:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    6198:	80 a5       	ldd	r24, Z+40	; 0x28
    619a:	80 68       	ori	r24, 0x80	; 128
    619c:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    619e:	80 ad       	ldd	r24, Z+56	; 0x38
    61a0:	80 68       	ori	r24, 0x80	; 128
    61a2:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    61a4:	80 a9       	ldd	r24, Z+48	; 0x30
    61a6:	80 68       	ori	r24, 0x80	; 128
    61a8:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    61aa:	81 e0       	ldi	r24, 0x01	; 1
    61ac:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    61ae:	e0 e4       	ldi	r30, 0x40	; 64
    61b0:	f9 e0       	ldi	r31, 0x09	; 9
    61b2:	80 e4       	ldi	r24, 0x40	; 64
    61b4:	98 e3       	ldi	r25, 0x38	; 56
    61b6:	86 a3       	std	Z+38, r24	; 0x26
    61b8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    61ba:	80 81       	ld	r24, Z
    61bc:	80 7f       	andi	r24, 0xF0	; 240
    61be:	87 60       	ori	r24, 0x07	; 7
    61c0:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61c2:	86 81       	ldd	r24, Z+6	; 0x06
    61c4:	83 60       	ori	r24, 0x03	; 3
    61c6:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    61c8:	e0 e0       	ldi	r30, 0x00	; 0
    61ca:	fb e0       	ldi	r31, 0x0B	; 11
    61cc:	80 e0       	ldi	r24, 0x00	; 0
    61ce:	91 e0       	ldi	r25, 0x01	; 1
    61d0:	86 a3       	std	Z+38, r24	; 0x26
    61d2:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    61d4:	80 81       	ld	r24, Z
    61d6:	80 7f       	andi	r24, 0xF0	; 240
    61d8:	84 60       	ori	r24, 0x04	; 4
    61da:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61dc:	86 81       	ldd	r24, Z+6	; 0x06
    61de:	83 60       	ori	r24, 0x03	; 3
    61e0:	86 83       	std	Z+6, r24	; 0x06

}
    61e2:	08 95       	ret

000061e4 <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    61e4:	e0 e0       	ldi	r30, 0x00	; 0
    61e6:	f2 e0       	ldi	r31, 0x02	; 2
    61e8:	60 89       	ldd	r22, Z+16	; 0x10
    61ea:	71 89       	ldd	r23, Z+17	; 0x11
    61ec:	80 e0       	ldi	r24, 0x00	; 0
    61ee:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    61f0:	2a ea       	ldi	r18, 0xAA	; 170
    61f2:	35 e2       	ldi	r19, 0x25	; 37
    61f4:	43 e0       	ldi	r20, 0x03	; 3
    61f6:	50 e0       	ldi	r21, 0x00	; 0
    61f8:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    61fc:	67 5f       	subi	r22, 0xF7	; 247
    61fe:	7a 40       	sbci	r23, 0x0A	; 10
    6200:	88 4e       	sbci	r24, 0xE8	; 232
    6202:	91 40       	sbci	r25, 0x01	; 1
    6204:	21 e5       	ldi	r18, 0x51	; 81
    6206:	37 e7       	ldi	r19, 0x77	; 119
    6208:	45 e0       	ldi	r20, 0x05	; 5
    620a:	50 e0       	ldi	r21, 0x00	; 0
    620c:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6210:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    6212:	08 95       	ret

00006214 <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    6214:	e0 e0       	ldi	r30, 0x00	; 0
    6216:	f2 e0       	ldi	r31, 0x02	; 2
    6218:	62 89       	ldd	r22, Z+18	; 0x12
    621a:	73 89       	ldd	r23, Z+19	; 0x13
    621c:	80 e0       	ldi	r24, 0x00	; 0
    621e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    6220:	27 ec       	ldi	r18, 0xC7	; 199
    6222:	3d e1       	ldi	r19, 0x1D	; 29
    6224:	40 e0       	ldi	r20, 0x00	; 0
    6226:	50 e0       	ldi	r21, 0x00	; 0
    6228:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    622c:	6c 59       	subi	r22, 0x9C	; 156
    622e:	7c 41       	sbci	r23, 0x1C	; 28
    6230:	8b 41       	sbci	r24, 0x1B	; 27
    6232:	90 40       	sbci	r25, 0x00	; 0
    6234:	28 ed       	ldi	r18, 0xD8	; 216
    6236:	3f e3       	ldi	r19, 0x3F	; 63
    6238:	41 e0       	ldi	r20, 0x01	; 1
    623a:	50 e0       	ldi	r21, 0x00	; 0
    623c:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6240:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    6242:	08 95       	ret

00006244 <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    6244:	e0 e0       	ldi	r30, 0x00	; 0
    6246:	f2 e0       	ldi	r31, 0x02	; 2
    6248:	86 89       	ldd	r24, Z+22	; 0x16
    624a:	97 89       	ldd	r25, Z+23	; 0x17
    624c:	f4 e0       	ldi	r31, 0x04	; 4
    624e:	96 95       	lsr	r25
    6250:	87 95       	ror	r24
    6252:	fa 95       	dec	r31
    6254:	e1 f7       	brne	.-8      	; 0x624e <Sensors_ReadMicrophone+0xa>
}
    6256:	08 95       	ret

00006258 <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    6258:	e0 e0       	ldi	r30, 0x00	; 0
    625a:	f2 e0       	ldi	r31, 0x02	; 2
    625c:	64 89       	ldd	r22, Z+20	; 0x14
    625e:	75 89       	ldd	r23, Z+21	; 0x15
    6260:	80 e0       	ldi	r24, 0x00	; 0
    6262:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    6264:	22 e2       	ldi	r18, 0x22	; 34
    6266:	31 ea       	ldi	r19, 0xA1	; 161
    6268:	40 e0       	ldi	r20, 0x00	; 0
    626a:	50 e0       	ldi	r21, 0x00	; 0
    626c:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    6270:	6f 53       	subi	r22, 0x3F	; 63
    6272:	74 41       	sbci	r23, 0x14	; 20
    6274:	8e 49       	sbci	r24, 0x9E	; 158
    6276:	9f 4f       	sbci	r25, 0xFF	; 255
    6278:	27 ed       	ldi	r18, 0xD7	; 215
    627a:	36 e4       	ldi	r19, 0x46	; 70
    627c:	49 e0       	ldi	r20, 0x09	; 9
    627e:	50 e0       	ldi	r21, 0x00	; 0
    6280:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6284:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    6286:	08 95       	ret

00006288 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    6288:	10 92 71 33 	sts	0x3371, r1
  	temperatureBufferToWriteTo = 1;
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	80 93 b8 2f 	sts	0x2FB8, r24
	okToSendTemperatureBuffer1 = false;
    6292:	10 92 6f 33 	sts	0x336F, r1
	okToSendTemperatureBuffer2 = false;
    6296:	10 92 70 33 	sts	0x3370, r1
}
    629a:	08 95       	ret

0000629c <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    629c:	10 92 74 33 	sts	0x3374, r1
	pressureBufferToWriteTo = 1;
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	80 93 b9 2f 	sts	0x2FB9, r24
	okToSendPressureBuffer1 = false;
    62a6:	10 92 72 33 	sts	0x3372, r1
	okToSendPressureBuffer2 = false;
    62aa:	10 92 73 33 	sts	0x3373, r1
}
    62ae:	08 95       	ret

000062b0 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    62b0:	10 92 77 33 	sts	0x3377, r1
	humidityBufferToWriteTo = 1;
    62b4:	81 e0       	ldi	r24, 0x01	; 1
    62b6:	80 93 ba 2f 	sts	0x2FBA, r24
	okToSendHumidityBuffer1 = false;
    62ba:	10 92 75 33 	sts	0x3375, r1
	okToSendHumidityBuffer2 = false;
    62be:	10 92 76 33 	sts	0x3376, r1
}
    62c2:	08 95       	ret

000062c4 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    62c4:	10 92 7a 33 	sts	0x337A, r1
    62c8:	10 92 7b 33 	sts	0x337B, r1
	microphoneBufferToWriteTo = 1;
    62cc:	81 e0       	ldi	r24, 0x01	; 1
    62ce:	80 93 bb 2f 	sts	0x2FBB, r24
	okToSendMicrophoneBuffer1 = false;
    62d2:	10 92 78 33 	sts	0x3378, r1
	okToSendMicrophoneBuffer2 = false;
    62d6:	10 92 79 33 	sts	0x3379, r1
}
    62da:	08 95       	ret

000062dc <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    62dc:	10 92 7e 33 	sts	0x337E, r1
	lightBufferToWriteTo = 1;
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	80 93 bc 2f 	sts	0x2FBC, r24
	okToSendLightBuffer1 = false;
    62e6:	10 92 7c 33 	sts	0x337C, r1
	okToSendLightBuffer2 = false;
    62ea:	10 92 7d 33 	sts	0x337D, r1
}
    62ee:	08 95       	ret

000062f0 <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    62f0:	1f 92       	push	r1
    62f2:	0f 92       	push	r0
    62f4:	0f b6       	in	r0, 0x3f	; 63
    62f6:	0f 92       	push	r0
    62f8:	0b b6       	in	r0, 0x3b	; 59
    62fa:	0f 92       	push	r0
    62fc:	11 24       	eor	r1, r1
    62fe:	0f 93       	push	r16
    6300:	1f 93       	push	r17
    6302:	2f 93       	push	r18
    6304:	3f 93       	push	r19
    6306:	4f 93       	push	r20
    6308:	5f 93       	push	r21
    630a:	6f 93       	push	r22
    630c:	7f 93       	push	r23
    630e:	8f 93       	push	r24
    6310:	9f 93       	push	r25
    6312:	af 93       	push	r26
    6314:	bf 93       	push	r27
    6316:	ef 93       	push	r30
    6318:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    631a:	80 91 6d 33 	lds	r24, 0x336D
    631e:	88 23       	and	r24, r24
    6320:	09 f4       	brne	.+2      	; 0x6324 <__vector_108+0x34>
    6322:	9b c0       	rjmp	.+310    	; 0x645a <__vector_108+0x16a>
    6324:	80 91 c2 2f 	lds	r24, 0x2FC2
    6328:	88 23       	and	r24, r24
    632a:	09 f4       	brne	.+2      	; 0x632e <__vector_108+0x3e>
    632c:	96 c0       	rjmp	.+300    	; 0x645a <__vector_108+0x16a>
	  if((microphoneBufferToWriteTo == 1) && !okToSendMicrophoneBuffer1){
    632e:	80 91 bb 2f 	lds	r24, 0x2FBB
    6332:	81 30       	cpi	r24, 0x01	; 1
    6334:	09 f0       	breq	.+2      	; 0x6338 <__vector_108+0x48>
    6336:	48 c0       	rjmp	.+144    	; 0x63c8 <__vector_108+0xd8>
    6338:	80 91 78 33 	lds	r24, 0x3378
    633c:	88 23       	and	r24, r24
    633e:	09 f0       	breq	.+2      	; 0x6342 <__vector_108+0x52>
    6340:	94 c0       	rjmp	.+296    	; 0x646a <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    6342:	80 91 7a 33 	lds	r24, 0x337A
    6346:	90 91 7b 33 	lds	r25, 0x337B
    634a:	89 2b       	or	r24, r25
    634c:	51 f4       	brne	.+20     	; 0x6362 <__vector_108+0x72>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    634e:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6352:	60 93 20 33 	sts	0x3320, r22
    6356:	70 93 21 33 	sts	0x3321, r23
    635a:	80 93 22 33 	sts	0x3322, r24
    635e:	90 93 23 33 	sts	0x3323, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6362:	00 91 7a 33 	lds	r16, 0x337A
    6366:	10 91 7b 33 	lds	r17, 0x337B
    636a:	0e 94 22 31 	call	0x6244	; 0x6244 <Sensors_ReadMicrophone>
    636e:	07 55       	subi	r16, 0x57	; 87
    6370:	1a 4b       	sbci	r17, 0xBA	; 186
    6372:	f8 01       	movw	r30, r16
    6374:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6376:	80 91 87 33 	lds	r24, 0x3387
    637a:	88 23       	and	r24, r24
    637c:	49 f4       	brne	.+18     	; 0x6390 <__vector_108+0xa0>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    637e:	e0 91 7a 33 	lds	r30, 0x337A
    6382:	f0 91 7b 33 	lds	r31, 0x337B
    6386:	e7 55       	subi	r30, 0x57	; 87
    6388:	fa 4b       	sbci	r31, 0xBA	; 186
    638a:	80 81       	ld	r24, Z
    638c:	80 93 86 33 	sts	0x3386, r24
	    }
	    microphoneBufferCounter++;
    6390:	80 91 7a 33 	lds	r24, 0x337A
    6394:	90 91 7b 33 	lds	r25, 0x337B
    6398:	01 96       	adiw	r24, 0x01	; 1
    639a:	80 93 7a 33 	sts	0x337A, r24
    639e:	90 93 7b 33 	sts	0x337B, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    63a2:	88 5e       	subi	r24, 0xE8	; 232
    63a4:	93 40       	sbci	r25, 0x03	; 3
    63a6:	09 f0       	breq	.+2      	; 0x63aa <__vector_108+0xba>
    63a8:	60 c0       	rjmp	.+192    	; 0x646a <__vector_108+0x17a>
	    	quickMic = microphoneBuffer1[0];
    63aa:	80 91 a9 45 	lds	r24, 0x45A9
    63ae:	80 93 86 33 	sts	0x3386, r24
	    	microphoneBufferCounter=0;
    63b2:	10 92 7a 33 	sts	0x337A, r1
    63b6:	10 92 7b 33 	sts	0x337B, r1
	    	microphoneBufferToWriteTo = 2;
    63ba:	82 e0       	ldi	r24, 0x02	; 2
    63bc:	80 93 bb 2f 	sts	0x2FBB, r24
	    	okToSendMicrophoneBuffer1 = true;
    63c0:	81 e0       	ldi	r24, 0x01	; 1
    63c2:	80 93 78 33 	sts	0x3378, r24
    63c6:	51 c0       	rjmp	.+162    	; 0x646a <__vector_108+0x17a>
	    }
	  } else if ((microphoneBufferToWriteTo == 2)&& !okToSendMicrophoneBuffer2){
    63c8:	82 30       	cpi	r24, 0x02	; 2
    63ca:	09 f0       	breq	.+2      	; 0x63ce <__vector_108+0xde>
    63cc:	4e c0       	rjmp	.+156    	; 0x646a <__vector_108+0x17a>
    63ce:	80 91 79 33 	lds	r24, 0x3379
    63d2:	88 23       	and	r24, r24
    63d4:	09 f0       	breq	.+2      	; 0x63d8 <__vector_108+0xe8>
    63d6:	49 c0       	rjmp	.+146    	; 0x646a <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    63d8:	80 91 7a 33 	lds	r24, 0x337A
    63dc:	90 91 7b 33 	lds	r25, 0x337B
    63e0:	89 2b       	or	r24, r25
    63e2:	51 f4       	brne	.+20     	; 0x63f8 <__vector_108+0x108>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    63e4:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    63e8:	60 93 24 33 	sts	0x3324, r22
    63ec:	70 93 25 33 	sts	0x3325, r23
    63f0:	80 93 26 33 	sts	0x3326, r24
    63f4:	90 93 27 33 	sts	0x3327, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    63f8:	00 91 7a 33 	lds	r16, 0x337A
    63fc:	10 91 7b 33 	lds	r17, 0x337B
    6400:	0e 94 22 31 	call	0x6244	; 0x6244 <Sensors_ReadMicrophone>
    6404:	03 52       	subi	r16, 0x23	; 35
    6406:	1f 4b       	sbci	r17, 0xBF	; 191
    6408:	f8 01       	movw	r30, r16
    640a:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    640c:	80 91 87 33 	lds	r24, 0x3387
    6410:	88 23       	and	r24, r24
    6412:	49 f4       	brne	.+18     	; 0x6426 <__vector_108+0x136>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    6414:	e0 91 7a 33 	lds	r30, 0x337A
    6418:	f0 91 7b 33 	lds	r31, 0x337B
    641c:	e3 52       	subi	r30, 0x23	; 35
    641e:	ff 4b       	sbci	r31, 0xBF	; 191
    6420:	80 81       	ld	r24, Z
    6422:	80 93 86 33 	sts	0x3386, r24
	    }

	    microphoneBufferCounter++;
    6426:	80 91 7a 33 	lds	r24, 0x337A
    642a:	90 91 7b 33 	lds	r25, 0x337B
    642e:	01 96       	adiw	r24, 0x01	; 1
    6430:	80 93 7a 33 	sts	0x337A, r24
    6434:	90 93 7b 33 	sts	0x337B, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6438:	88 5e       	subi	r24, 0xE8	; 232
    643a:	93 40       	sbci	r25, 0x03	; 3
    643c:	b1 f4       	brne	.+44     	; 0x646a <__vector_108+0x17a>
	    	quickMic = microphoneBuffer2[0];
    643e:	80 91 dd 40 	lds	r24, 0x40DD
    6442:	80 93 86 33 	sts	0x3386, r24
	    	microphoneBufferCounter=0;
    6446:	10 92 7a 33 	sts	0x337A, r1
    644a:	10 92 7b 33 	sts	0x337B, r1
	    	microphoneBufferToWriteTo = 1;
    644e:	81 e0       	ldi	r24, 0x01	; 1
    6450:	80 93 bb 2f 	sts	0x2FBB, r24
	    	okToSendMicrophoneBuffer2 = true;
    6454:	80 93 79 33 	sts	0x3379, r24
    6458:	08 c0       	rjmp	.+16     	; 0x646a <__vector_108+0x17a>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    645a:	80 91 87 33 	lds	r24, 0x3387
    645e:	88 23       	and	r24, r24
    6460:	21 f4       	brne	.+8      	; 0x646a <__vector_108+0x17a>
			quickMic = Sensors_ReadMicrophone();
    6462:	0e 94 22 31 	call	0x6244	; 0x6244 <Sensors_ReadMicrophone>
    6466:	80 93 86 33 	sts	0x3386, r24
		}
	}
	micSampleCounter++;
    646a:	80 91 87 33 	lds	r24, 0x3387
    646e:	8f 5f       	subi	r24, 0xFF	; 255
    6470:	80 93 87 33 	sts	0x3387, r24
}
    6474:	ff 91       	pop	r31
    6476:	ef 91       	pop	r30
    6478:	bf 91       	pop	r27
    647a:	af 91       	pop	r26
    647c:	9f 91       	pop	r25
    647e:	8f 91       	pop	r24
    6480:	7f 91       	pop	r23
    6482:	6f 91       	pop	r22
    6484:	5f 91       	pop	r21
    6486:	4f 91       	pop	r20
    6488:	3f 91       	pop	r19
    648a:	2f 91       	pop	r18
    648c:	1f 91       	pop	r17
    648e:	0f 91       	pop	r16
    6490:	0f 90       	pop	r0
    6492:	0b be       	out	0x3b, r0	; 59
    6494:	0f 90       	pop	r0
    6496:	0f be       	out	0x3f, r0	; 63
    6498:	0f 90       	pop	r0
    649a:	1f 90       	pop	r1
    649c:	18 95       	reti

0000649e <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    649e:	30 91 be 4a 	lds	r19, 0x4ABE
    64a2:	93 2f       	mov	r25, r19
    64a4:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    64a6:	28 2f       	mov	r18, r24
    64a8:	20 68       	ori	r18, 0x80	; 128
    64aa:	20 93 5f 53 	sts	0x535F, r18


	LightPort.MASTER.ADDR = writeAddress;
    64ae:	e0 e8       	ldi	r30, 0x80	; 128
    64b0:	f4 e0       	ldi	r31, 0x04	; 4
    64b2:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64b4:	80 91 84 04 	lds	r24, 0x0484
    64b8:	86 ff       	sbrs	r24, 6
    64ba:	fc cf       	rjmp	.-8      	; 0x64b4 <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    64bc:	e0 e8       	ldi	r30, 0x80	; 128
    64be:	f4 e0       	ldi	r31, 0x04	; 4
    64c0:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64c2:	80 91 84 04 	lds	r24, 0x0484
    64c6:	86 ff       	sbrs	r24, 6
    64c8:	fc cf       	rjmp	.-8      	; 0x64c2 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    64ca:	83 2f       	mov	r24, r19
    64cc:	81 60       	ori	r24, 0x01	; 1
    64ce:	80 93 27 4a 	sts	0x4A27, r24
	LightPort.MASTER.ADDR = writeAddress;
    64d2:	e0 e8       	ldi	r30, 0x80	; 128
    64d4:	f4 e0       	ldi	r31, 0x04	; 4
    64d6:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    64d8:	80 91 84 04 	lds	r24, 0x0484
    64dc:	87 ff       	sbrs	r24, 7
    64de:	fc cf       	rjmp	.-8      	; 0x64d8 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    64e0:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    64e4:	97 e0       	ldi	r25, 0x07	; 7
    64e6:	e0 e8       	ldi	r30, 0x80	; 128
    64e8:	f4 e0       	ldi	r31, 0x04	; 4
    64ea:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    64ec:	08 95       	ret

000064ee <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	0e 94 4f 32 	call	0x649e	; 0x649e <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    64f4:	20 91 be 4a 	lds	r18, 0x4ABE
    64f8:	92 2f       	mov	r25, r18
    64fa:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    64fc:	80 e9       	ldi	r24, 0x90	; 144
    64fe:	80 93 5f 53 	sts	0x535F, r24

	LightPort.MASTER.ADDR = writeAddress;
    6502:	e0 e8       	ldi	r30, 0x80	; 128
    6504:	f4 e0       	ldi	r31, 0x04	; 4
    6506:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6508:	80 91 84 04 	lds	r24, 0x0484
    650c:	86 ff       	sbrs	r24, 6
    650e:	fc cf       	rjmp	.-8      	; 0x6508 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6510:	80 e9       	ldi	r24, 0x90	; 144
    6512:	e0 e8       	ldi	r30, 0x80	; 128
    6514:	f4 e0       	ldi	r31, 0x04	; 4
    6516:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6518:	80 91 84 04 	lds	r24, 0x0484
    651c:	86 ff       	sbrs	r24, 6
    651e:	fc cf       	rjmp	.-8      	; 0x6518 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    6520:	82 2f       	mov	r24, r18
    6522:	81 60       	ori	r24, 0x01	; 1
    6524:	80 93 27 4a 	sts	0x4A27, r24
	LightPort.MASTER.ADDR = writeAddress;
    6528:	e0 e8       	ldi	r30, 0x80	; 128
    652a:	f4 e0       	ldi	r31, 0x04	; 4
    652c:	86 83       	std	Z+6, r24	; 0x06
    652e:	e6 e9       	ldi	r30, 0x96	; 150
    6530:	fa e4       	ldi	r31, 0x4A	; 74
    6532:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6534:	a0 e8       	ldi	r26, 0x80	; 128
    6536:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6538:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    653a:	80 91 84 04 	lds	r24, 0x0484
    653e:	87 ff       	sbrs	r24, 7
    6540:	fc cf       	rjmp	.-8      	; 0x653a <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    6542:	80 91 87 04 	lds	r24, 0x0487
    6546:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    6548:	97 30       	cpi	r25, 0x07	; 7
    654a:	19 f0       	breq	.+6      	; 0x6552 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    654c:	13 96       	adiw	r26, 0x03	; 3
    654e:	2c 93       	st	X, r18
    6550:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    6552:	9f 5f       	subi	r25, 0xFF	; 255
    6554:	31 96       	adiw	r30, 0x01	; 1
    6556:	98 30       	cpi	r25, 0x08	; 8
    6558:	81 f7       	brne	.-32     	; 0x653a <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    655a:	87 e0       	ldi	r24, 0x07	; 7
    655c:	e0 e8       	ldi	r30, 0x80	; 128
    655e:	f4 e0       	ldi	r31, 0x04	; 4
    6560:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    6562:	90 91 97 4a 	lds	r25, 0x4A97
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	20 91 96 4a 	lds	r18, 0x4A96
    656c:	82 0f       	add	r24, r18
    656e:	91 1d       	adc	r25, r1
    6570:	80 93 26 3c 	sts	0x3C26, r24
    6574:	90 93 27 3c 	sts	0x3C27, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    6578:	90 91 99 4a 	lds	r25, 0x4A99
    657c:	80 e0       	ldi	r24, 0x00	; 0
    657e:	20 91 98 4a 	lds	r18, 0x4A98
    6582:	82 0f       	add	r24, r18
    6584:	91 1d       	adc	r25, r1
    6586:	80 93 28 3c 	sts	0x3C28, r24
    658a:	90 93 29 3c 	sts	0x3C29, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    658e:	90 91 9b 4a 	lds	r25, 0x4A9B
    6592:	80 e0       	ldi	r24, 0x00	; 0
    6594:	20 91 9a 4a 	lds	r18, 0x4A9A
    6598:	82 0f       	add	r24, r18
    659a:	91 1d       	adc	r25, r1
    659c:	80 93 2a 3c 	sts	0x3C2A, r24
    65a0:	90 93 2b 3c 	sts	0x3C2B, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    65a4:	90 91 9d 4a 	lds	r25, 0x4A9D
    65a8:	80 e0       	ldi	r24, 0x00	; 0
    65aa:	20 91 9c 4a 	lds	r18, 0x4A9C
    65ae:	82 0f       	add	r24, r18
    65b0:	91 1d       	adc	r25, r1
    65b2:	80 93 2c 3c 	sts	0x3C2C, r24
    65b6:	90 93 2d 3c 	sts	0x3C2D, r25
}
    65ba:	08 95       	ret

000065bc <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    65bc:	e8 2f       	mov	r30, r24
    65be:	f0 e0       	ldi	r31, 0x00	; 0
    65c0:	ee 0f       	add	r30, r30
    65c2:	ff 1f       	adc	r31, r31
    65c4:	ea 5d       	subi	r30, 0xDA	; 218
    65c6:	f3 4c       	sbci	r31, 0xC3	; 195
	return colors[color];
}
    65c8:	80 81       	ld	r24, Z
    65ca:	91 81       	ldd	r25, Z+1	; 0x01
    65cc:	08 95       	ret

000065ce <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    65ce:	90 91 be 4a 	lds	r25, 0x4ABE
    65d2:	9e 7f       	andi	r25, 0xFE	; 254
    65d4:	90 93 27 4a 	sts	0x4A27, r25
	commandCode = 0b10000000 | location;
    65d8:	28 2f       	mov	r18, r24
    65da:	20 68       	ori	r18, 0x80	; 128
    65dc:	20 93 5f 53 	sts	0x535F, r18

	LightPort.MASTER.ADDR = writeAddress;
    65e0:	e0 e8       	ldi	r30, 0x80	; 128
    65e2:	f4 e0       	ldi	r31, 0x04	; 4
    65e4:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65e6:	80 91 84 04 	lds	r24, 0x0484
    65ea:	86 ff       	sbrs	r24, 6
    65ec:	fc cf       	rjmp	.-8      	; 0x65e6 <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    65ee:	e0 e8       	ldi	r30, 0x80	; 128
    65f0:	f4 e0       	ldi	r31, 0x04	; 4
    65f2:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65f4:	80 91 84 04 	lds	r24, 0x0484
    65f8:	86 ff       	sbrs	r24, 6
    65fa:	fc cf       	rjmp	.-8      	; 0x65f4 <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    65fc:	e0 e8       	ldi	r30, 0x80	; 128
    65fe:	f4 e0       	ldi	r31, 0x04	; 4
    6600:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6602:	80 91 84 04 	lds	r24, 0x0484
    6606:	86 ff       	sbrs	r24, 6
    6608:	fc cf       	rjmp	.-8      	; 0x6602 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    660a:	87 e0       	ldi	r24, 0x07	; 7
    660c:	e0 e8       	ldi	r30, 0x80	; 128
    660e:	f4 e0       	ldi	r31, 0x04	; 4
    6610:	83 83       	std	Z+3, r24	; 0x03

}
    6612:	08 95       	ret

00006614 <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	61 e0       	ldi	r22, 0x01	; 1
    6618:	0e 94 e7 32 	call	0x65ce	; 0x65ce <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    661c:	80 91 6c 33 	lds	r24, 0x336C
    6620:	e2 e8       	ldi	r30, 0x82	; 130
    6622:	ff e2       	ldi	r31, 0x2F	; 47
    6624:	e8 0f       	add	r30, r24
    6626:	f1 1d       	adc	r31, r1
    6628:	81 e0       	ldi	r24, 0x01	; 1
    662a:	60 81       	ld	r22, Z
    662c:	0e 94 e7 32 	call	0x65ce	; 0x65ce <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    6630:	80 91 6c 33 	lds	r24, 0x336C
    6634:	eb e8       	ldi	r30, 0x8B	; 139
    6636:	ff e2       	ldi	r31, 0x2F	; 47
    6638:	e8 0f       	add	r30, r24
    663a:	f1 1d       	adc	r31, r1
    663c:	87 e0       	ldi	r24, 0x07	; 7
    663e:	60 81       	ld	r22, Z
    6640:	0e 94 e7 32 	call	0x65ce	; 0x65ce <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    6644:	80 e0       	ldi	r24, 0x00	; 0
    6646:	63 e0       	ldi	r22, 0x03	; 3
    6648:	0e 94 e7 32 	call	0x65ce	; 0x65ce <Light_writeByte>
}
    664c:	08 95       	ret

0000664e <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    664e:	80 93 be 4a 	sts	0x4ABE, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6652:	e0 e8       	ldi	r30, 0x80	; 128
    6654:	f4 e0       	ldi	r31, 0x04	; 4
    6656:	88 e0       	ldi	r24, 0x08	; 8
    6658:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    665a:	84 e0       	ldi	r24, 0x04	; 4
    665c:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    665e:	8d e0       	ldi	r24, 0x0D	; 13
    6660:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    6666:	10 92 6c 33 	sts	0x336C, r1
	Light_setGain();
    666a:	0e 94 0a 33 	call	0x6614	; 0x6614 <Light_setGain>
}
    666e:	08 95       	ret

00006670 <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    6670:	1f 92       	push	r1
    6672:	0f 92       	push	r0
    6674:	0f b6       	in	r0, 0x3f	; 63
    6676:	0f 92       	push	r0
    6678:	0b b6       	in	r0, 0x3b	; 59
    667a:	0f 92       	push	r0
    667c:	11 24       	eor	r1, r1
    667e:	6f 92       	push	r6
    6680:	7f 92       	push	r7
    6682:	8f 92       	push	r8
    6684:	9f 92       	push	r9
    6686:	af 92       	push	r10
    6688:	bf 92       	push	r11
    668a:	cf 92       	push	r12
    668c:	df 92       	push	r13
    668e:	ef 92       	push	r14
    6690:	ff 92       	push	r15
    6692:	0f 93       	push	r16
    6694:	1f 93       	push	r17
    6696:	2f 93       	push	r18
    6698:	3f 93       	push	r19
    669a:	4f 93       	push	r20
    669c:	5f 93       	push	r21
    669e:	6f 93       	push	r22
    66a0:	7f 93       	push	r23
    66a2:	8f 93       	push	r24
    66a4:	9f 93       	push	r25
    66a6:	af 93       	push	r26
    66a8:	bf 93       	push	r27
    66aa:	cf 93       	push	r28
    66ac:	df 93       	push	r29
    66ae:	ef 93       	push	r30
    66b0:	ff 93       	push	r31
    UNIX_time++;
    66b2:	80 91 68 33 	lds	r24, 0x3368
    66b6:	90 91 69 33 	lds	r25, 0x3369
    66ba:	a0 91 6a 33 	lds	r26, 0x336A
    66be:	b0 91 6b 33 	lds	r27, 0x336B
    66c2:	01 96       	adiw	r24, 0x01	; 1
    66c4:	a1 1d       	adc	r26, r1
    66c6:	b1 1d       	adc	r27, r1
    66c8:	80 93 68 33 	sts	0x3368, r24
    66cc:	90 93 69 33 	sts	0x3369, r25
    66d0:	a0 93 6a 33 	sts	0x336A, r26
    66d4:	b0 93 6b 33 	sts	0x336B, r27
	if(recording){
    66d8:	80 91 6d 33 	lds	r24, 0x336D
    66dc:	88 23       	and	r24, r24
    66de:	09 f4       	brne	.+2      	; 0x66e2 <__vector_83+0x72>
    66e0:	a0 c2       	rjmp	.+1344   	; 0x6c22 <__vector_83+0x5b2>
	  rtcBlockCounter++;
    66e2:	80 91 80 33 	lds	r24, 0x3380
    66e6:	8f 5f       	subi	r24, 0xFF	; 255
    66e8:	80 93 80 33 	sts	0x3380, r24
	  if(rtcBlockCounter == 0){
    66ec:	88 23       	and	r24, r24
    66ee:	19 f4       	brne	.+6      	; 0x66f6 <__vector_83+0x86>
	    okToSendRTCBlock = true;
    66f0:	81 e0       	ldi	r24, 0x01	; 1
    66f2:	80 93 7f 33 	sts	0x337F, r24
	  }

	  if(wantToRecordTemperature){
    66f6:	80 91 bd 2f 	lds	r24, 0x2FBD
    66fa:	88 23       	and	r24, r24
    66fc:	09 f4       	brne	.+2      	; 0x6700 <__vector_83+0x90>
    66fe:	75 c0       	rjmp	.+234    	; 0x67ea <__vector_83+0x17a>
		  if(temperatureBufferToWriteTo == 1){
    6700:	80 91 b8 2f 	lds	r24, 0x2FB8
    6704:	81 30       	cpi	r24, 0x01	; 1
    6706:	c9 f5       	brne	.+114    	; 0x677a <__vector_83+0x10a>
			  if(temperatureBufferCounter == 0){
    6708:	80 91 71 33 	lds	r24, 0x3371
    670c:	88 23       	and	r24, r24
    670e:	51 f4       	brne	.+20     	; 0x6724 <__vector_83+0xb4>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    6710:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6714:	60 93 08 33 	sts	0x3308, r22
    6718:	70 93 09 33 	sts	0x3309, r23
    671c:	80 93 0a 33 	sts	0x330A, r24
    6720:	90 93 0b 33 	sts	0x330B, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    6724:	80 91 71 33 	lds	r24, 0x3371
    6728:	c8 2f       	mov	r28, r24
    672a:	d0 e0       	ldi	r29, 0x00	; 0
    672c:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <Sensors_ReadTemperature>
    6730:	cc 0f       	add	r28, r28
    6732:	dd 1f       	adc	r29, r29
    6734:	cf 56       	subi	r28, 0x6F	; 111
    6736:	d6 4b       	sbci	r29, 0xB6	; 182
    6738:	88 83       	st	Y, r24
    673a:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    673c:	20 91 71 33 	lds	r18, 0x3371
    6740:	e2 2f       	mov	r30, r18
    6742:	f0 e0       	ldi	r31, 0x00	; 0
    6744:	ee 0f       	add	r30, r30
    6746:	ff 1f       	adc	r31, r31
    6748:	ef 56       	subi	r30, 0x6F	; 111
    674a:	f6 4b       	sbci	r31, 0xB6	; 182
    674c:	80 81       	ld	r24, Z
    674e:	91 81       	ldd	r25, Z+1	; 0x01
    6750:	6a e0       	ldi	r22, 0x0A	; 10
    6752:	70 e0       	ldi	r23, 0x00	; 0
    6754:	0e 94 31 5c 	call	0xb862	; 0xb862 <__udivmodhi4>
    6758:	60 93 81 33 	sts	0x3381, r22
			  temperatureBufferCounter++;
    675c:	2f 5f       	subi	r18, 0xFF	; 255
    675e:	20 93 71 33 	sts	0x3371, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    6762:	2a 30       	cpi	r18, 0x0A	; 10
    6764:	09 f0       	breq	.+2      	; 0x6768 <__vector_83+0xf8>
    6766:	41 c0       	rjmp	.+130    	; 0x67ea <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    6768:	10 92 71 33 	sts	0x3371, r1
				  temperatureBufferToWriteTo = 2;
    676c:	82 e0       	ldi	r24, 0x02	; 2
    676e:	80 93 b8 2f 	sts	0x2FB8, r24
				  okToSendTemperatureBuffer1 = true;
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	80 93 6f 33 	sts	0x336F, r24
    6778:	38 c0       	rjmp	.+112    	; 0x67ea <__vector_83+0x17a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    677a:	82 30       	cpi	r24, 0x02	; 2
    677c:	b1 f5       	brne	.+108    	; 0x67ea <__vector_83+0x17a>
			  if(temperatureBufferCounter == 0){
    677e:	80 91 71 33 	lds	r24, 0x3371
    6782:	88 23       	and	r24, r24
    6784:	51 f4       	brne	.+20     	; 0x679a <__vector_83+0x12a>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    6786:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    678a:	60 93 0c 33 	sts	0x330C, r22
    678e:	70 93 0d 33 	sts	0x330D, r23
    6792:	80 93 0e 33 	sts	0x330E, r24
    6796:	90 93 0f 33 	sts	0x330F, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    679a:	80 91 71 33 	lds	r24, 0x3371
    679e:	c8 2f       	mov	r28, r24
    67a0:	d0 e0       	ldi	r29, 0x00	; 0
    67a2:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <Sensors_ReadTemperature>
    67a6:	cc 0f       	add	r28, r28
    67a8:	dd 1f       	adc	r29, r29
    67aa:	c4 5c       	subi	r28, 0xC4	; 196
    67ac:	d5 4b       	sbci	r29, 0xB5	; 181
    67ae:	88 83       	st	Y, r24
    67b0:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    67b2:	20 91 71 33 	lds	r18, 0x3371
    67b6:	e2 2f       	mov	r30, r18
    67b8:	f0 e0       	ldi	r31, 0x00	; 0
    67ba:	ee 0f       	add	r30, r30
    67bc:	ff 1f       	adc	r31, r31
    67be:	e4 5c       	subi	r30, 0xC4	; 196
    67c0:	f5 4b       	sbci	r31, 0xB5	; 181
    67c2:	80 81       	ld	r24, Z
    67c4:	91 81       	ldd	r25, Z+1	; 0x01
    67c6:	6a e0       	ldi	r22, 0x0A	; 10
    67c8:	70 e0       	ldi	r23, 0x00	; 0
    67ca:	0e 94 31 5c 	call	0xb862	; 0xb862 <__udivmodhi4>
    67ce:	60 93 81 33 	sts	0x3381, r22
			  temperatureBufferCounter++;
    67d2:	2f 5f       	subi	r18, 0xFF	; 255
    67d4:	20 93 71 33 	sts	0x3371, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    67d8:	2a 30       	cpi	r18, 0x0A	; 10
    67da:	39 f4       	brne	.+14     	; 0x67ea <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    67dc:	10 92 71 33 	sts	0x3371, r1
				  temperatureBufferToWriteTo = 1;
    67e0:	81 e0       	ldi	r24, 0x01	; 1
    67e2:	80 93 b8 2f 	sts	0x2FB8, r24
				  okToSendTemperatureBuffer2 = true;
    67e6:	80 93 70 33 	sts	0x3370, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    67ea:	80 91 bf 2f 	lds	r24, 0x2FBF
    67ee:	88 23       	and	r24, r24
    67f0:	09 f4       	brne	.+2      	; 0x67f4 <__vector_83+0x184>
    67f2:	60 c0       	rjmp	.+192    	; 0x68b4 <__vector_83+0x244>
		  if(humidityBufferToWriteTo == 1){
    67f4:	80 91 ba 2f 	lds	r24, 0x2FBA
    67f8:	81 30       	cpi	r24, 0x01	; 1
    67fa:	71 f5       	brne	.+92     	; 0x6858 <__vector_83+0x1e8>
			  if(humidityBufferCounter == 0){
    67fc:	80 91 77 33 	lds	r24, 0x3377
    6800:	88 23       	and	r24, r24
    6802:	51 f4       	brne	.+20     	; 0x6818 <__vector_83+0x1a8>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    6804:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6808:	60 93 10 33 	sts	0x3310, r22
    680c:	70 93 11 33 	sts	0x3311, r23
    6810:	80 93 12 33 	sts	0x3312, r24
    6814:	90 93 13 33 	sts	0x3313, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    6818:	80 91 77 33 	lds	r24, 0x3377
    681c:	c8 2f       	mov	r28, r24
    681e:	d0 e0       	ldi	r29, 0x00	; 0
    6820:	0e 94 0a 31 	call	0x6214	; 0x6214 <Sensors_ReadHumidity>
    6824:	c8 55       	subi	r28, 0x58	; 88
    6826:	d5 4b       	sbci	r29, 0xB5	; 181
    6828:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer1[humidityBufferCounter];
    682a:	90 91 77 33 	lds	r25, 0x3377
    682e:	e9 2f       	mov	r30, r25
    6830:	f0 e0       	ldi	r31, 0x00	; 0
    6832:	e8 55       	subi	r30, 0x58	; 88
    6834:	f5 4b       	sbci	r31, 0xB5	; 181
    6836:	80 81       	ld	r24, Z
    6838:	80 93 82 33 	sts	0x3382, r24
			  humidityBufferCounter++;
    683c:	9f 5f       	subi	r25, 0xFF	; 255
    683e:	90 93 77 33 	sts	0x3377, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    6842:	9a 30       	cpi	r25, 0x0A	; 10
    6844:	b9 f5       	brne	.+110    	; 0x68b4 <__vector_83+0x244>
				  humidityBufferCounter=0;
    6846:	10 92 77 33 	sts	0x3377, r1
				  humidityBufferToWriteTo = 2;
    684a:	82 e0       	ldi	r24, 0x02	; 2
    684c:	80 93 ba 2f 	sts	0x2FBA, r24
				  okToSendHumidityBuffer1 = true;
    6850:	81 e0       	ldi	r24, 0x01	; 1
    6852:	80 93 75 33 	sts	0x3375, r24
    6856:	2e c0       	rjmp	.+92     	; 0x68b4 <__vector_83+0x244>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    6858:	82 30       	cpi	r24, 0x02	; 2
    685a:	61 f5       	brne	.+88     	; 0x68b4 <__vector_83+0x244>
			  if(humidityBufferCounter == 0){
    685c:	80 91 77 33 	lds	r24, 0x3377
    6860:	88 23       	and	r24, r24
    6862:	51 f4       	brne	.+20     	; 0x6878 <__vector_83+0x208>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    6864:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6868:	60 93 14 33 	sts	0x3314, r22
    686c:	70 93 15 33 	sts	0x3315, r23
    6870:	80 93 16 33 	sts	0x3316, r24
    6874:	90 93 17 33 	sts	0x3317, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    6878:	80 91 77 33 	lds	r24, 0x3377
    687c:	c8 2f       	mov	r28, r24
    687e:	d0 e0       	ldi	r29, 0x00	; 0
    6880:	0e 94 0a 31 	call	0x6214	; 0x6214 <Sensors_ReadHumidity>
    6884:	cf 5b       	subi	r28, 0xBF	; 191
    6886:	dc 4a       	sbci	r29, 0xAC	; 172
    6888:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer2[humidityBufferCounter];
    688a:	90 91 77 33 	lds	r25, 0x3377
    688e:	e9 2f       	mov	r30, r25
    6890:	f0 e0       	ldi	r31, 0x00	; 0
    6892:	ef 5b       	subi	r30, 0xBF	; 191
    6894:	fc 4a       	sbci	r31, 0xAC	; 172
    6896:	80 81       	ld	r24, Z
    6898:	80 93 82 33 	sts	0x3382, r24
			  humidityBufferCounter++;
    689c:	9f 5f       	subi	r25, 0xFF	; 255
    689e:	90 93 77 33 	sts	0x3377, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    68a2:	9a 30       	cpi	r25, 0x0A	; 10
    68a4:	39 f4       	brne	.+14     	; 0x68b4 <__vector_83+0x244>
				  humidityBufferCounter=0;
    68a6:	10 92 77 33 	sts	0x3377, r1
				  humidityBufferToWriteTo = 1;
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	80 93 ba 2f 	sts	0x2FBA, r24
				  okToSendHumidityBuffer2 = true;
    68b0:	80 93 76 33 	sts	0x3376, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    68b4:	80 91 be 2f 	lds	r24, 0x2FBE
    68b8:	88 23       	and	r24, r24
    68ba:	09 f4       	brne	.+2      	; 0x68be <__vector_83+0x24e>
    68bc:	60 c0       	rjmp	.+192    	; 0x697e <__vector_83+0x30e>
		  if(pressureBufferToWriteTo == 1){
    68be:	80 91 b9 2f 	lds	r24, 0x2FB9
    68c2:	81 30       	cpi	r24, 0x01	; 1
    68c4:	71 f5       	brne	.+92     	; 0x6922 <__vector_83+0x2b2>
			  if(pressureBufferCounter == 0){
    68c6:	80 91 74 33 	lds	r24, 0x3374
    68ca:	88 23       	and	r24, r24
    68cc:	51 f4       	brne	.+20     	; 0x68e2 <__vector_83+0x272>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    68ce:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    68d2:	60 93 18 33 	sts	0x3318, r22
    68d6:	70 93 19 33 	sts	0x3319, r23
    68da:	80 93 1a 33 	sts	0x331A, r24
    68de:	90 93 1b 33 	sts	0x331B, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    68e2:	80 91 74 33 	lds	r24, 0x3374
    68e6:	c8 2f       	mov	r28, r24
    68e8:	d0 e0       	ldi	r29, 0x00	; 0
    68ea:	0e 94 2c 31 	call	0x6258	; 0x6258 <Sensors_ReadPressure>
    68ee:	c3 5c       	subi	r28, 0xC3	; 195
    68f0:	d3 4c       	sbci	r29, 0xC3	; 195
    68f2:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer1[pressureBufferCounter];
    68f4:	90 91 74 33 	lds	r25, 0x3374
    68f8:	e9 2f       	mov	r30, r25
    68fa:	f0 e0       	ldi	r31, 0x00	; 0
    68fc:	e3 5c       	subi	r30, 0xC3	; 195
    68fe:	f3 4c       	sbci	r31, 0xC3	; 195
    6900:	80 81       	ld	r24, Z
    6902:	80 93 83 33 	sts	0x3383, r24

			  pressureBufferCounter++;
    6906:	9f 5f       	subi	r25, 0xFF	; 255
    6908:	90 93 74 33 	sts	0x3374, r25
			  if(pressureBufferCounter == pressureNumberOfSamples){
    690c:	9a 30       	cpi	r25, 0x0A	; 10
    690e:	b9 f5       	brne	.+110    	; 0x697e <__vector_83+0x30e>
				  pressureBufferCounter=0;
    6910:	10 92 74 33 	sts	0x3374, r1
				  pressureBufferToWriteTo = 2;
    6914:	82 e0       	ldi	r24, 0x02	; 2
    6916:	80 93 b9 2f 	sts	0x2FB9, r24
				  okToSendPressureBuffer1 = true;
    691a:	81 e0       	ldi	r24, 0x01	; 1
    691c:	80 93 72 33 	sts	0x3372, r24
    6920:	2e c0       	rjmp	.+92     	; 0x697e <__vector_83+0x30e>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    6922:	82 30       	cpi	r24, 0x02	; 2
    6924:	61 f5       	brne	.+88     	; 0x697e <__vector_83+0x30e>
			  if(pressureBufferCounter == 0){
    6926:	80 91 74 33 	lds	r24, 0x3374
    692a:	88 23       	and	r24, r24
    692c:	51 f4       	brne	.+20     	; 0x6942 <__vector_83+0x2d2>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    692e:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6932:	60 93 1c 33 	sts	0x331C, r22
    6936:	70 93 1d 33 	sts	0x331D, r23
    693a:	80 93 1e 33 	sts	0x331E, r24
    693e:	90 93 1f 33 	sts	0x331F, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    6942:	80 91 74 33 	lds	r24, 0x3374
    6946:	c8 2f       	mov	r28, r24
    6948:	d0 e0       	ldi	r29, 0x00	; 0
    694a:	0e 94 2c 31 	call	0x6258	; 0x6258 <Sensors_ReadPressure>
    694e:	c5 59       	subi	r28, 0x95	; 149
    6950:	d5 4b       	sbci	r29, 0xB5	; 181
    6952:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer2[pressureBufferCounter];
    6954:	90 91 74 33 	lds	r25, 0x3374
    6958:	e9 2f       	mov	r30, r25
    695a:	f0 e0       	ldi	r31, 0x00	; 0
    695c:	e5 59       	subi	r30, 0x95	; 149
    695e:	f5 4b       	sbci	r31, 0xB5	; 181
    6960:	80 81       	ld	r24, Z
    6962:	80 93 83 33 	sts	0x3383, r24
			  pressureBufferCounter++;
    6966:	9f 5f       	subi	r25, 0xFF	; 255
    6968:	90 93 74 33 	sts	0x3374, r25
			if(pressureBufferCounter == pressureNumberOfSamples){
    696c:	9a 30       	cpi	r25, 0x0A	; 10
    696e:	39 f4       	brne	.+14     	; 0x697e <__vector_83+0x30e>
				pressureBufferCounter=0;
    6970:	10 92 74 33 	sts	0x3374, r1
				pressureBufferToWriteTo = 1;
    6974:	81 e0       	ldi	r24, 0x01	; 1
    6976:	80 93 b9 2f 	sts	0x2FB9, r24
				okToSendPressureBuffer2 = true;
    697a:	80 93 73 33 	sts	0x3373, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    697e:	80 91 c0 2f 	lds	r24, 0x2FC0
    6982:	88 23       	and	r24, r24
    6984:	09 f4       	brne	.+2      	; 0x6988 <__vector_83+0x318>
    6986:	67 c1       	rjmp	.+718    	; 0x6c56 <__vector_83+0x5e6>

		  Light_readColors();
    6988:	0e 94 77 32 	call	0x64ee	; 0x64ee <Light_readColors>
		  Light_readColors();
    698c:	0e 94 77 32 	call	0x64ee	; 0x64ee <Light_readColors>
		  Light_readColors();
    6990:	0e 94 77 32 	call	0x64ee	; 0x64ee <Light_readColors>

		  quickLight = Light_returnColor(clear);
    6994:	80 91 2c 3c 	lds	r24, 0x3C2C
    6998:	90 91 2d 3c 	lds	r25, 0x3C2D
    699c:	80 93 84 33 	sts	0x3384, r24
    69a0:	90 93 85 33 	sts	0x3385, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    69a4:	e0 91 6c 33 	lds	r30, 0x336C
    69a8:	f0 e0       	ldi	r31, 0x00	; 0
    69aa:	ee 0f       	add	r30, r30
    69ac:	ff 1f       	adc	r31, r31
    69ae:	ee 0f       	add	r30, r30
    69b0:	ff 1f       	adc	r31, r31
    69b2:	ec 56       	subi	r30, 0x6C	; 108
    69b4:	f0 4d       	sbci	r31, 0xD0	; 208
    69b6:	a0 80       	ld	r10, Z
    69b8:	b1 80       	ldd	r11, Z+1	; 0x01
    69ba:	c2 80       	ldd	r12, Z+2	; 0x02
    69bc:	d3 80       	ldd	r13, Z+3	; 0x03
    69be:	e1 e3       	ldi	r30, 0x31	; 49
    69c0:	f3 e5       	ldi	r31, 0x53	; 83
    69c2:	c6 e2       	ldi	r28, 0x26	; 38
    69c4:	dc e3       	ldi	r29, 0x3C	; 60
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    69c6:	10 82       	st	Z, r1
    69c8:	11 82       	std	Z+1, r1	; 0x01
    69ca:	12 82       	std	Z+2, r1	; 0x02
    69cc:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    69ce:	88 81       	ld	r24, Y
    69d0:	99 81       	ldd	r25, Y+1	; 0x01
    69d2:	3c 01       	movw	r6, r24
    69d4:	88 24       	eor	r8, r8
    69d6:	99 24       	eor	r9, r9
    69d8:	ee 24       	eor	r14, r14
    69da:	ff 24       	eor	r15, r15
    69dc:	87 01       	movw	r16, r14
    69de:	a6 01       	movw	r20, r12
    69e0:	95 01       	movw	r18, r10
    69e2:	e6 0c       	add	r14, r6
    69e4:	f7 1c       	adc	r15, r7
    69e6:	08 1d       	adc	r16, r8
    69e8:	19 1d       	adc	r17, r9
    69ea:	2a 0d       	add	r18, r10
    69ec:	3b 1d       	adc	r19, r11
    69ee:	4c 1d       	adc	r20, r12
    69f0:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    69f2:	da 01       	movw	r26, r20
    69f4:	c9 01       	movw	r24, r18
    69f6:	8a 19       	sub	r24, r10
    69f8:	9b 09       	sbc	r25, r11
    69fa:	ac 09       	sbc	r26, r12
    69fc:	bd 09       	sbc	r27, r13
    69fe:	80 50       	subi	r24, 0x00	; 0
    6a00:	9c 42       	sbci	r25, 0x2C	; 44
    6a02:	a1 40       	sbci	r26, 0x01	; 1
    6a04:	b0 40       	sbci	r27, 0x00	; 0
    6a06:	68 f3       	brcs	.-38     	; 0x69e2 <__vector_83+0x372>
    6a08:	e1 92       	st	Z+, r14
    6a0a:	f1 92       	st	Z+, r15
    6a0c:	01 93       	st	Z+, r16
    6a0e:	11 93       	st	Z+, r17
    6a10:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    6a12:	83 e5       	ldi	r24, 0x53	; 83
    6a14:	e1 34       	cpi	r30, 0x41	; 65
    6a16:	f8 07       	cpc	r31, r24
    6a18:	b1 f6       	brne	.-84     	; 0x69c6 <__vector_83+0x356>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    6a1a:	80 91 bc 2f 	lds	r24, 0x2FBC
    6a1e:	81 30       	cpi	r24, 0x01	; 1
    6a20:	09 f0       	breq	.+2      	; 0x6a24 <__vector_83+0x3b4>
    6a22:	72 c0       	rjmp	.+228    	; 0x6b08 <__vector_83+0x498>
			  if(lightBufferCounter == 0){
    6a24:	80 91 7e 33 	lds	r24, 0x337E
    6a28:	88 23       	and	r24, r24
    6a2a:	51 f4       	brne	.+20     	; 0x6a40 <__vector_83+0x3d0>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    6a2c:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6a30:	60 93 28 33 	sts	0x3328, r22
    6a34:	70 93 29 33 	sts	0x3329, r23
    6a38:	80 93 2a 33 	sts	0x332A, r24
    6a3c:	90 93 2b 33 	sts	0x332B, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    6a40:	20 91 7e 33 	lds	r18, 0x337E
    6a44:	e2 2f       	mov	r30, r18
    6a46:	f0 e0       	ldi	r31, 0x00	; 0
    6a48:	ee 0f       	add	r30, r30
    6a4a:	ff 1f       	adc	r31, r31
    6a4c:	ee 0f       	add	r30, r30
    6a4e:	ff 1f       	adc	r31, r31
    6a50:	ed 55       	subi	r30, 0x5D	; 93
    6a52:	f5 4a       	sbci	r31, 0xA5	; 165
    6a54:	80 91 31 53 	lds	r24, 0x5331
    6a58:	90 91 32 53 	lds	r25, 0x5332
    6a5c:	a0 91 33 53 	lds	r26, 0x5333
    6a60:	b0 91 34 53 	lds	r27, 0x5334
    6a64:	80 83       	st	Z, r24
    6a66:	91 83       	std	Z+1, r25	; 0x01
    6a68:	a2 83       	std	Z+2, r26	; 0x02
    6a6a:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a6c:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    6a6e:	e2 2f       	mov	r30, r18
    6a70:	f0 e0       	ldi	r31, 0x00	; 0
    6a72:	ee 0f       	add	r30, r30
    6a74:	ff 1f       	adc	r31, r31
    6a76:	ee 0f       	add	r30, r30
    6a78:	ff 1f       	adc	r31, r31
    6a7a:	ed 55       	subi	r30, 0x5D	; 93
    6a7c:	f5 4a       	sbci	r31, 0xA5	; 165
    6a7e:	80 91 35 53 	lds	r24, 0x5335
    6a82:	90 91 36 53 	lds	r25, 0x5336
    6a86:	a0 91 37 53 	lds	r26, 0x5337
    6a8a:	b0 91 38 53 	lds	r27, 0x5338
    6a8e:	80 83       	st	Z, r24
    6a90:	91 83       	std	Z+1, r25	; 0x01
    6a92:	a2 83       	std	Z+2, r26	; 0x02
    6a94:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a96:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    6a98:	e2 2f       	mov	r30, r18
    6a9a:	f0 e0       	ldi	r31, 0x00	; 0
    6a9c:	ee 0f       	add	r30, r30
    6a9e:	ff 1f       	adc	r31, r31
    6aa0:	ee 0f       	add	r30, r30
    6aa2:	ff 1f       	adc	r31, r31
    6aa4:	ed 55       	subi	r30, 0x5D	; 93
    6aa6:	f5 4a       	sbci	r31, 0xA5	; 165
    6aa8:	80 91 39 53 	lds	r24, 0x5339
    6aac:	90 91 3a 53 	lds	r25, 0x533A
    6ab0:	a0 91 3b 53 	lds	r26, 0x533B
    6ab4:	b0 91 3c 53 	lds	r27, 0x533C
    6ab8:	80 83       	st	Z, r24
    6aba:	91 83       	std	Z+1, r25	; 0x01
    6abc:	a2 83       	std	Z+2, r26	; 0x02
    6abe:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6ac0:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    6ac2:	e2 2f       	mov	r30, r18
    6ac4:	f0 e0       	ldi	r31, 0x00	; 0
    6ac6:	ee 0f       	add	r30, r30
    6ac8:	ff 1f       	adc	r31, r31
    6aca:	ee 0f       	add	r30, r30
    6acc:	ff 1f       	adc	r31, r31
    6ace:	ed 55       	subi	r30, 0x5D	; 93
    6ad0:	f5 4a       	sbci	r31, 0xA5	; 165
    6ad2:	80 91 3d 53 	lds	r24, 0x533D
    6ad6:	90 91 3e 53 	lds	r25, 0x533E
    6ada:	a0 91 3f 53 	lds	r26, 0x533F
    6ade:	b0 91 40 53 	lds	r27, 0x5340
    6ae2:	80 83       	st	Z, r24
    6ae4:	91 83       	std	Z+1, r25	; 0x01
    6ae6:	a2 83       	std	Z+2, r26	; 0x02
    6ae8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6aea:	2f 5f       	subi	r18, 0xFF	; 255
    6aec:	20 93 7e 33 	sts	0x337E, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6af0:	28 32       	cpi	r18, 0x28	; 40
    6af2:	09 f0       	breq	.+2      	; 0x6af6 <__vector_83+0x486>
    6af4:	7b c0       	rjmp	.+246    	; 0x6bec <__vector_83+0x57c>
				  lightBufferCounter=0;
    6af6:	10 92 7e 33 	sts	0x337E, r1
				  lightBufferToWriteTo = 2;
    6afa:	82 e0       	ldi	r24, 0x02	; 2
    6afc:	80 93 bc 2f 	sts	0x2FBC, r24
				  okToSendLightBuffer1 = true;
    6b00:	81 e0       	ldi	r24, 0x01	; 1
    6b02:	80 93 7c 33 	sts	0x337C, r24
    6b06:	72 c0       	rjmp	.+228    	; 0x6bec <__vector_83+0x57c>
			  }
		  } else if (lightBufferToWriteTo == 2){
    6b08:	82 30       	cpi	r24, 0x02	; 2
    6b0a:	09 f0       	breq	.+2      	; 0x6b0e <__vector_83+0x49e>
    6b0c:	6f c0       	rjmp	.+222    	; 0x6bec <__vector_83+0x57c>
			  if(lightBufferCounter == 0){
    6b0e:	80 91 7e 33 	lds	r24, 0x337E
    6b12:	88 23       	and	r24, r24
    6b14:	51 f4       	brne	.+20     	; 0x6b2a <__vector_83+0x4ba>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    6b16:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    6b1a:	60 93 2c 33 	sts	0x332C, r22
    6b1e:	70 93 2d 33 	sts	0x332D, r23
    6b22:	80 93 2e 33 	sts	0x332E, r24
    6b26:	90 93 2f 33 	sts	0x332F, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    6b2a:	20 91 7e 33 	lds	r18, 0x337E
    6b2e:	e2 2f       	mov	r30, r18
    6b30:	f0 e0       	ldi	r31, 0x00	; 0
    6b32:	ee 0f       	add	r30, r30
    6b34:	ff 1f       	adc	r31, r31
    6b36:	ee 0f       	add	r30, r30
    6b38:	ff 1f       	adc	r31, r31
    6b3a:	e7 5f       	subi	r30, 0xF7	; 247
    6b3c:	fa 4b       	sbci	r31, 0xBA	; 186
    6b3e:	80 91 31 53 	lds	r24, 0x5331
    6b42:	90 91 32 53 	lds	r25, 0x5332
    6b46:	a0 91 33 53 	lds	r26, 0x5333
    6b4a:	b0 91 34 53 	lds	r27, 0x5334
    6b4e:	80 83       	st	Z, r24
    6b50:	91 83       	std	Z+1, r25	; 0x01
    6b52:	a2 83       	std	Z+2, r26	; 0x02
    6b54:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b56:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    6b58:	e2 2f       	mov	r30, r18
    6b5a:	f0 e0       	ldi	r31, 0x00	; 0
    6b5c:	ee 0f       	add	r30, r30
    6b5e:	ff 1f       	adc	r31, r31
    6b60:	ee 0f       	add	r30, r30
    6b62:	ff 1f       	adc	r31, r31
    6b64:	e7 5f       	subi	r30, 0xF7	; 247
    6b66:	fa 4b       	sbci	r31, 0xBA	; 186
    6b68:	80 91 35 53 	lds	r24, 0x5335
    6b6c:	90 91 36 53 	lds	r25, 0x5336
    6b70:	a0 91 37 53 	lds	r26, 0x5337
    6b74:	b0 91 38 53 	lds	r27, 0x5338
    6b78:	80 83       	st	Z, r24
    6b7a:	91 83       	std	Z+1, r25	; 0x01
    6b7c:	a2 83       	std	Z+2, r26	; 0x02
    6b7e:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b80:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    6b82:	e2 2f       	mov	r30, r18
    6b84:	f0 e0       	ldi	r31, 0x00	; 0
    6b86:	ee 0f       	add	r30, r30
    6b88:	ff 1f       	adc	r31, r31
    6b8a:	ee 0f       	add	r30, r30
    6b8c:	ff 1f       	adc	r31, r31
    6b8e:	e7 5f       	subi	r30, 0xF7	; 247
    6b90:	fa 4b       	sbci	r31, 0xBA	; 186
    6b92:	80 91 39 53 	lds	r24, 0x5339
    6b96:	90 91 3a 53 	lds	r25, 0x533A
    6b9a:	a0 91 3b 53 	lds	r26, 0x533B
    6b9e:	b0 91 3c 53 	lds	r27, 0x533C
    6ba2:	80 83       	st	Z, r24
    6ba4:	91 83       	std	Z+1, r25	; 0x01
    6ba6:	a2 83       	std	Z+2, r26	; 0x02
    6ba8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6baa:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    6bac:	e2 2f       	mov	r30, r18
    6bae:	f0 e0       	ldi	r31, 0x00	; 0
    6bb0:	ee 0f       	add	r30, r30
    6bb2:	ff 1f       	adc	r31, r31
    6bb4:	ee 0f       	add	r30, r30
    6bb6:	ff 1f       	adc	r31, r31
    6bb8:	e7 5f       	subi	r30, 0xF7	; 247
    6bba:	fa 4b       	sbci	r31, 0xBA	; 186
    6bbc:	80 91 3d 53 	lds	r24, 0x533D
    6bc0:	90 91 3e 53 	lds	r25, 0x533E
    6bc4:	a0 91 3f 53 	lds	r26, 0x533F
    6bc8:	b0 91 40 53 	lds	r27, 0x5340
    6bcc:	80 83       	st	Z, r24
    6bce:	91 83       	std	Z+1, r25	; 0x01
    6bd0:	a2 83       	std	Z+2, r26	; 0x02
    6bd2:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6bd4:	2f 5f       	subi	r18, 0xFF	; 255
    6bd6:	20 93 7e 33 	sts	0x337E, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6bda:	28 32       	cpi	r18, 0x28	; 40
    6bdc:	39 f4       	brne	.+14     	; 0x6bec <__vector_83+0x57c>
				  lightBufferCounter=0;
    6bde:	10 92 7e 33 	sts	0x337E, r1
				  lightBufferToWriteTo = 1;
    6be2:	81 e0       	ldi	r24, 0x01	; 1
    6be4:	80 93 bc 2f 	sts	0x2FBC, r24
				  okToSendLightBuffer2 = true;
    6be8:	80 93 7d 33 	sts	0x337D, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6bec:	20 91 2c 3c 	lds	r18, 0x3C2C
    6bf0:	30 91 2d 3c 	lds	r19, 0x3C2D
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6bf4:	6f eb       	ldi	r22, 0xBF	; 191
    6bf6:	29 36       	cpi	r18, 0x69	; 105
    6bf8:	36 07       	cpc	r19, r22
    6bfa:	30 f0       	brcs	.+12     	; 0x6c08 <__vector_83+0x598>
    6bfc:	80 91 6c 33 	lds	r24, 0x336C
    6c00:	88 23       	and	r24, r24
    6c02:	11 f0       	breq	.+4      	; 0x6c08 <__vector_83+0x598>
			  gainSelector--;
    6c04:	81 50       	subi	r24, 0x01	; 1
    6c06:	08 c0       	rjmp	.+16     	; 0x6c18 <__vector_83+0x5a8>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6c08:	20 58       	subi	r18, 0x80	; 128
    6c0a:	3e 43       	sbci	r19, 0x3E	; 62
    6c0c:	20 f5       	brcc	.+72     	; 0x6c56 <__vector_83+0x5e6>
    6c0e:	80 91 6c 33 	lds	r24, 0x336C
    6c12:	88 30       	cpi	r24, 0x08	; 8
    6c14:	01 f1       	breq	.+64     	; 0x6c56 <__vector_83+0x5e6>
			  gainSelector++;
    6c16:	8f 5f       	subi	r24, 0xFF	; 255
    6c18:	80 93 6c 33 	sts	0x336C, r24
			  Light_setGain();
    6c1c:	0e 94 0a 33 	call	0x6614	; 0x6614 <Light_setGain>
    6c20:	1a c0       	rjmp	.+52     	; 0x6c56 <__vector_83+0x5e6>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6c22:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <Sensors_ReadTemperature>
    6c26:	6a e0       	ldi	r22, 0x0A	; 10
    6c28:	70 e0       	ldi	r23, 0x00	; 0
    6c2a:	0e 94 31 5c 	call	0xb862	; 0xb862 <__udivmodhi4>
    6c2e:	60 93 81 33 	sts	0x3381, r22
		quickHumidity = Sensors_ReadHumidity();
    6c32:	0e 94 0a 31 	call	0x6214	; 0x6214 <Sensors_ReadHumidity>
    6c36:	80 93 82 33 	sts	0x3382, r24
		quickPressure = Sensors_ReadPressure();
    6c3a:	0e 94 2c 31 	call	0x6258	; 0x6258 <Sensors_ReadPressure>
    6c3e:	80 93 83 33 	sts	0x3383, r24
		Light_readColors();
    6c42:	0e 94 77 32 	call	0x64ee	; 0x64ee <Light_readColors>
		quickLight = Light_returnColor(clear);
    6c46:	80 91 2c 3c 	lds	r24, 0x3C2C
    6c4a:	90 91 2d 3c 	lds	r25, 0x3C2D
    6c4e:	80 93 84 33 	sts	0x3384, r24
    6c52:	90 93 85 33 	sts	0x3385, r25
	}




}
    6c56:	ff 91       	pop	r31
    6c58:	ef 91       	pop	r30
    6c5a:	df 91       	pop	r29
    6c5c:	cf 91       	pop	r28
    6c5e:	bf 91       	pop	r27
    6c60:	af 91       	pop	r26
    6c62:	9f 91       	pop	r25
    6c64:	8f 91       	pop	r24
    6c66:	7f 91       	pop	r23
    6c68:	6f 91       	pop	r22
    6c6a:	5f 91       	pop	r21
    6c6c:	4f 91       	pop	r20
    6c6e:	3f 91       	pop	r19
    6c70:	2f 91       	pop	r18
    6c72:	1f 91       	pop	r17
    6c74:	0f 91       	pop	r16
    6c76:	ff 90       	pop	r15
    6c78:	ef 90       	pop	r14
    6c7a:	df 90       	pop	r13
    6c7c:	cf 90       	pop	r12
    6c7e:	bf 90       	pop	r11
    6c80:	af 90       	pop	r10
    6c82:	9f 90       	pop	r9
    6c84:	8f 90       	pop	r8
    6c86:	7f 90       	pop	r7
    6c88:	6f 90       	pop	r6
    6c8a:	0f 90       	pop	r0
    6c8c:	0b be       	out	0x3b, r0	; 59
    6c8e:	0f 90       	pop	r0
    6c90:	0f be       	out	0x3f, r0	; 63
    6c92:	0f 90       	pop	r0
    6c94:	1f 90       	pop	r1
    6c96:	18 95       	reti

00006c98 <RTC_init>:
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6c98:	e0 ea       	ldi	r30, 0xA0	; 160
    6c9a:	f4 e0       	ldi	r31, 0x04	; 4
    6c9c:	88 e0       	ldi	r24, 0x08	; 8
    6c9e:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6ca0:	84 e0       	ldi	r24, 0x04	; 4
    6ca2:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6ca4:	8f e0       	ldi	r24, 0x0F	; 15
    6ca6:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6ca8:	81 e0       	ldi	r24, 0x01	; 1
    6caa:	84 83       	std	Z+4, r24	; 0x04


}
    6cac:	08 95       	ret

00006cae <RTC_UTCSecsToTime>:

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    6cae:	8f 92       	push	r8
    6cb0:	9f 92       	push	r9
    6cb2:	af 92       	push	r10
    6cb4:	bf 92       	push	r11
    6cb6:	cf 92       	push	r12
    6cb8:	df 92       	push	r13
    6cba:	ef 92       	push	r14
    6cbc:	ff 92       	push	r15
    6cbe:	0f 93       	push	r16
    6cc0:	1f 93       	push	r17
    6cc2:	cf 93       	push	r28
    6cc4:	df 93       	push	r29
    6cc6:	7b 01       	movw	r14, r22
    6cc8:	8c 01       	movw	r16, r24
    6cca:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    6ccc:	2c e3       	ldi	r18, 0x3C	; 60
    6cce:	30 e0       	ldi	r19, 0x00	; 0
    6cd0:	40 e0       	ldi	r20, 0x00	; 0
    6cd2:	50 e0       	ldi	r21, 0x00	; 0
    6cd4:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6cd8:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6cda:	c8 01       	movw	r24, r16
    6cdc:	b7 01       	movw	r22, r14
    6cde:	2c e3       	ldi	r18, 0x3C	; 60
    6ce0:	30 e0       	ldi	r19, 0x00	; 0
    6ce2:	40 e0       	ldi	r20, 0x00	; 0
    6ce4:	50 e0       	ldi	r21, 0x00	; 0
    6ce6:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6cea:	12 2f       	mov	r17, r18
    6cec:	03 2f       	mov	r16, r19
    6cee:	f4 2e       	mov	r15, r20
    6cf0:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6cf2:	62 2f       	mov	r22, r18
    6cf4:	73 2f       	mov	r23, r19
    6cf6:	84 2f       	mov	r24, r20
    6cf8:	95 2f       	mov	r25, r21
    6cfa:	2c e3       	ldi	r18, 0x3C	; 60
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	40 e0       	ldi	r20, 0x00	; 0
    6d00:	50 e0       	ldi	r21, 0x00	; 0
    6d02:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6d06:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6d08:	61 2f       	mov	r22, r17
    6d0a:	70 2f       	mov	r23, r16
    6d0c:	8f 2d       	mov	r24, r15
    6d0e:	9e 2d       	mov	r25, r14
    6d10:	2c e3       	ldi	r18, 0x3C	; 60
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	40 e0       	ldi	r20, 0x00	; 0
    6d16:	50 e0       	ldi	r21, 0x00	; 0
    6d18:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6d1c:	12 2f       	mov	r17, r18
    6d1e:	03 2f       	mov	r16, r19
    6d20:	f4 2e       	mov	r15, r20
    6d22:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    6d24:	62 2f       	mov	r22, r18
    6d26:	73 2f       	mov	r23, r19
    6d28:	84 2f       	mov	r24, r20
    6d2a:	95 2f       	mov	r25, r21
    6d2c:	28 e1       	ldi	r18, 0x18	; 24
    6d2e:	30 e0       	ldi	r19, 0x00	; 0
    6d30:	40 e0       	ldi	r20, 0x00	; 0
    6d32:	50 e0       	ldi	r21, 0x00	; 0
    6d34:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6d38:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    6d3a:	61 2f       	mov	r22, r17
    6d3c:	70 2f       	mov	r23, r16
    6d3e:	8f 2d       	mov	r24, r15
    6d40:	9e 2d       	mov	r25, r14
    6d42:	28 e1       	ldi	r18, 0x18	; 24
    6d44:	30 e0       	ldi	r19, 0x00	; 0
    6d46:	40 e0       	ldi	r20, 0x00	; 0
    6d48:	50 e0       	ldi	r21, 0x00	; 0
    6d4a:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6d4e:	79 01       	movw	r14, r18
    6d50:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    6d52:	c8 01       	movw	r24, r16
    6d54:	b7 01       	movw	r22, r14
    6d56:	6c 5f       	subi	r22, 0xFC	; 252
    6d58:	7f 4f       	sbci	r23, 0xFF	; 255
    6d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    6d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d5e:	27 e0       	ldi	r18, 0x07	; 7
    6d60:	30 e0       	ldi	r19, 0x00	; 0
    6d62:	40 e0       	ldi	r20, 0x00	; 0
    6d64:	50 e0       	ldi	r21, 0x00	; 0
    6d66:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    6d6a:	6f 5f       	subi	r22, 0xFF	; 255
    6d6c:	6c 83       	std	Y+4, r22	; 0x04
    6d6e:	20 e0       	ldi	r18, 0x00	; 0
    6d70:	aa 24       	eor	r10, r10
    6d72:	bb 24       	eor	r11, r11
    6d74:	65 01       	movw	r12, r10
    6d76:	01 c0       	rjmp	.+2      	; 0x6d7a <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    6d78:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    6d7a:	82 2e       	mov	r8, r18
    6d7c:	99 24       	eor	r9, r9
    6d7e:	f4 01       	movw	r30, r8
    6d80:	ee 54       	subi	r30, 0x4E	; 78
    6d82:	f8 4f       	sbci	r31, 0xF8	; 248
    6d84:	cf 01       	movw	r24, r30
    6d86:	83 70       	andi	r24, 0x03	; 3
    6d88:	90 70       	andi	r25, 0x00	; 0
    6d8a:	89 2b       	or	r24, r25
    6d8c:	99 f4       	brne	.+38     	; 0x6db4 <RTC_UTCSecsToTime+0x106>
    6d8e:	cf 01       	movw	r24, r30
    6d90:	64 e6       	ldi	r22, 0x64	; 100
    6d92:	70 e0       	ldi	r23, 0x00	; 0
    6d94:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6d98:	89 2b       	or	r24, r25
    6d9a:	39 f4       	brne	.+14     	; 0x6daa <RTC_UTCSecsToTime+0xfc>
    6d9c:	cf 01       	movw	r24, r30
    6d9e:	60 e9       	ldi	r22, 0x90	; 144
    6da0:	71 e0       	ldi	r23, 0x01	; 1
    6da2:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6da6:	89 2b       	or	r24, r25
    6da8:	29 f4       	brne	.+10     	; 0x6db4 <RTC_UTCSecsToTime+0x106>
    6daa:	8e e6       	ldi	r24, 0x6E	; 110
    6dac:	91 e0       	ldi	r25, 0x01	; 1
    6dae:	a0 e0       	ldi	r26, 0x00	; 0
    6db0:	b0 e0       	ldi	r27, 0x00	; 0
    6db2:	04 c0       	rjmp	.+8      	; 0x6dbc <RTC_UTCSecsToTime+0x10e>
    6db4:	8d e6       	ldi	r24, 0x6D	; 109
    6db6:	91 e0       	ldi	r25, 0x01	; 1
    6db8:	a0 e0       	ldi	r26, 0x00	; 0
    6dba:	b0 e0       	ldi	r27, 0x00	; 0
    6dbc:	a8 0e       	add	r10, r24
    6dbe:	b9 1e       	adc	r11, r25
    6dc0:	ca 1e       	adc	r12, r26
    6dc2:	db 1e       	adc	r13, r27
    6dc4:	c5 01       	movw	r24, r10
    6dc6:	a0 e0       	ldi	r26, 0x00	; 0
    6dc8:	b0 e0       	ldi	r27, 0x00	; 0
    6dca:	e8 16       	cp	r14, r24
    6dcc:	f9 06       	cpc	r15, r25
    6dce:	0a 07       	cpc	r16, r26
    6dd0:	1b 07       	cpc	r17, r27
    6dd2:	90 f6       	brcc	.-92     	; 0x6d78 <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6dd4:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6dd6:	f4 01       	movw	r30, r8
    6dd8:	ee 54       	subi	r30, 0x4E	; 78
    6dda:	f8 4f       	sbci	r31, 0xF8	; 248
    6ddc:	83 e0       	ldi	r24, 0x03	; 3
    6dde:	88 2e       	mov	r8, r24
    6de0:	91 2c       	mov	r9, r1
    6de2:	8e 22       	and	r8, r30
    6de4:	9f 22       	and	r9, r31
    6de6:	81 14       	cp	r8, r1
    6de8:	91 04       	cpc	r9, r1
    6dea:	99 f4       	brne	.+38     	; 0x6e12 <RTC_UTCSecsToTime+0x164>
    6dec:	cf 01       	movw	r24, r30
    6dee:	64 e6       	ldi	r22, 0x64	; 100
    6df0:	70 e0       	ldi	r23, 0x00	; 0
    6df2:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6df6:	89 2b       	or	r24, r25
    6df8:	39 f4       	brne	.+14     	; 0x6e08 <RTC_UTCSecsToTime+0x15a>
    6dfa:	cf 01       	movw	r24, r30
    6dfc:	60 e9       	ldi	r22, 0x90	; 144
    6dfe:	71 e0       	ldi	r23, 0x01	; 1
    6e00:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6e04:	89 2b       	or	r24, r25
    6e06:	29 f4       	brne	.+10     	; 0x6e12 <RTC_UTCSecsToTime+0x164>
    6e08:	8e e6       	ldi	r24, 0x6E	; 110
    6e0a:	91 e0       	ldi	r25, 0x01	; 1
    6e0c:	a0 e0       	ldi	r26, 0x00	; 0
    6e0e:	b0 e0       	ldi	r27, 0x00	; 0
    6e10:	04 c0       	rjmp	.+8      	; 0x6e1a <RTC_UTCSecsToTime+0x16c>
    6e12:	8d e6       	ldi	r24, 0x6D	; 109
    6e14:	91 e0       	ldi	r25, 0x01	; 1
    6e16:	a0 e0       	ldi	r26, 0x00	; 0
    6e18:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6e1a:	a8 1a       	sub	r10, r24
    6e1c:	b9 0a       	sbc	r11, r25
    6e1e:	ca 0a       	sbc	r12, r26
    6e20:	db 0a       	sbc	r13, r27
    6e22:	98 01       	movw	r18, r16
    6e24:	87 01       	movw	r16, r14
    6e26:	0a 19       	sub	r16, r10
    6e28:	1b 09       	sbc	r17, r11
    6e2a:	2c 09       	sbc	r18, r12
    6e2c:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    6e2e:	cf 01       	movw	r24, r30
    6e30:	64 e6       	ldi	r22, 0x64	; 100
    6e32:	70 e0       	ldi	r23, 0x00	; 0
    6e34:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6e38:	7c 01       	movw	r14, r24
    6e3a:	cf 01       	movw	r24, r30
    6e3c:	60 e9       	ldi	r22, 0x90	; 144
    6e3e:	71 e0       	ldi	r23, 0x01	; 1
    6e40:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6e44:	ac 01       	movw	r20, r24
    6e46:	e9 eb       	ldi	r30, 0xB9	; 185
    6e48:	f2 e3       	ldi	r31, 0x32	; 50
    6e4a:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    6e4c:	61 30       	cpi	r22, 0x01	; 1
    6e4e:	51 f4       	brne	.+20     	; 0x6e64 <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    6e50:	81 14       	cp	r8, r1
    6e52:	91 04       	cpc	r9, r1
    6e54:	49 f4       	brne	.+18     	; 0x6e68 <RTC_UTCSecsToTime+0x1ba>
    6e56:	e1 14       	cp	r14, r1
    6e58:	f1 04       	cpc	r15, r1
    6e5a:	41 f4       	brne	.+16     	; 0x6e6c <RTC_UTCSecsToTime+0x1be>
    6e5c:	41 15       	cp	r20, r1
    6e5e:	51 05       	cpc	r21, r1
    6e60:	29 f0       	breq	.+10     	; 0x6e6c <RTC_UTCSecsToTime+0x1be>
    6e62:	02 c0       	rjmp	.+4      	; 0x6e68 <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    6e64:	80 81       	ld	r24, Z
    6e66:	03 c0       	rjmp	.+6      	; 0x6e6e <RTC_UTCSecsToTime+0x1c0>
    6e68:	8c e1       	ldi	r24, 0x1C	; 28
    6e6a:	01 c0       	rjmp	.+2      	; 0x6e6e <RTC_UTCSecsToTime+0x1c0>
    6e6c:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    6e6e:	90 e0       	ldi	r25, 0x00	; 0
    6e70:	a0 e0       	ldi	r26, 0x00	; 0
    6e72:	b0 e0       	ldi	r27, 0x00	; 0
    6e74:	08 17       	cp	r16, r24
    6e76:	19 07       	cpc	r17, r25
    6e78:	2a 07       	cpc	r18, r26
    6e7a:	3b 07       	cpc	r19, r27
    6e7c:	40 f0       	brcs	.+16     	; 0x6e8e <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    6e7e:	08 1b       	sub	r16, r24
    6e80:	19 0b       	sbc	r17, r25
    6e82:	2a 0b       	sbc	r18, r26
    6e84:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6e86:	6f 5f       	subi	r22, 0xFF	; 255
    6e88:	31 96       	adiw	r30, 0x01	; 1
    6e8a:	6c 30       	cpi	r22, 0x0C	; 12
    6e8c:	f9 f6       	brne	.-66     	; 0x6e4c <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    6e8e:	6f 5f       	subi	r22, 0xFF	; 255
    6e90:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6e92:	80 2f       	mov	r24, r16
    6e94:	8f 5f       	subi	r24, 0xFF	; 255
    6e96:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6e98:	ce 01       	movw	r24, r28
    6e9a:	df 91       	pop	r29
    6e9c:	cf 91       	pop	r28
    6e9e:	1f 91       	pop	r17
    6ea0:	0f 91       	pop	r16
    6ea2:	ff 90       	pop	r15
    6ea4:	ef 90       	pop	r14
    6ea6:	df 90       	pop	r13
    6ea8:	cf 90       	pop	r12
    6eaa:	bf 90       	pop	r11
    6eac:	af 90       	pop	r10
    6eae:	9f 90       	pop	r9
    6eb0:	8f 90       	pop	r8
    6eb2:	08 95       	ret

00006eb4 <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6eb4:	4f 92       	push	r4
    6eb6:	5f 92       	push	r5
    6eb8:	6f 92       	push	r6
    6eba:	7f 92       	push	r7
    6ebc:	8f 92       	push	r8
    6ebe:	9f 92       	push	r9
    6ec0:	af 92       	push	r10
    6ec2:	bf 92       	push	r11
    6ec4:	cf 92       	push	r12
    6ec6:	df 92       	push	r13
    6ec8:	ef 92       	push	r14
    6eca:	ff 92       	push	r15
    6ecc:	0f 93       	push	r16
    6ece:	1f 93       	push	r17
    6ed0:	cf 93       	push	r28
    6ed2:	df 93       	push	r29
    6ed4:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6ed6:	dc 01       	movw	r26, r24
    6ed8:	17 96       	adiw	r26, 0x07	; 7
    6eda:	1c 91       	ld	r17, X
    6edc:	61 2f       	mov	r22, r17
    6ede:	70 e0       	ldi	r23, 0x00	; 0
    6ee0:	80 e0       	ldi	r24, 0x00	; 0
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	20 e8       	ldi	r18, 0x80	; 128
    6ee6:	33 e3       	ldi	r19, 0x33	; 51
    6ee8:	41 ee       	ldi	r20, 0xE1	; 225
    6eea:	51 e0       	ldi	r21, 0x01	; 1
    6eec:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    6ef0:	5b 01       	movw	r10, r22
    6ef2:	6c 01       	movw	r12, r24
    6ef4:	22 eb       	ldi	r18, 0xB2	; 178
    6ef6:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6ef8:	e1 2f       	mov	r30, r17
    6efa:	f0 e0       	ldi	r31, 0x00	; 0
    6efc:	ee 54       	subi	r30, 0x4E	; 78
    6efe:	f8 4f       	sbci	r31, 0xF8	; 248
    6f00:	1d c0       	rjmp	.+58     	; 0x6f3c <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6f02:	c9 01       	movw	r24, r18
    6f04:	83 70       	andi	r24, 0x03	; 3
    6f06:	90 70       	andi	r25, 0x00	; 0
    6f08:	89 2b       	or	r24, r25
    6f0a:	b1 f4       	brne	.+44     	; 0x6f38 <RTC_TimeToUTCSecs+0x84>
    6f0c:	c9 01       	movw	r24, r18
    6f0e:	64 e6       	ldi	r22, 0x64	; 100
    6f10:	70 e0       	ldi	r23, 0x00	; 0
    6f12:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6f16:	89 2b       	or	r24, r25
    6f18:	39 f4       	brne	.+14     	; 0x6f28 <RTC_TimeToUTCSecs+0x74>
    6f1a:	c9 01       	movw	r24, r18
    6f1c:	60 e9       	ldi	r22, 0x90	; 144
    6f1e:	71 e0       	ldi	r23, 0x01	; 1
    6f20:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6f24:	89 2b       	or	r24, r25
    6f26:	41 f4       	brne	.+16     	; 0x6f38 <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6f28:	80 e8       	ldi	r24, 0x80	; 128
    6f2a:	91 e5       	ldi	r25, 0x51	; 81
    6f2c:	a1 e0       	ldi	r26, 0x01	; 1
    6f2e:	b0 e0       	ldi	r27, 0x00	; 0
    6f30:	a8 0e       	add	r10, r24
    6f32:	b9 1e       	adc	r11, r25
    6f34:	ca 1e       	adc	r12, r26
    6f36:	db 1e       	adc	r13, r27
    6f38:	2f 5f       	subi	r18, 0xFF	; 255
    6f3a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    6f3c:	2e 17       	cp	r18, r30
    6f3e:	3f 07       	cpc	r19, r31
    6f40:	01 f7       	brne	.-64     	; 0x6f02 <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6f42:	d4 01       	movw	r26, r8
    6f44:	16 96       	adiw	r26, 0x06	; 6
    6f46:	8c 91       	ld	r24, X
    6f48:	48 2e       	mov	r4, r24
    6f4a:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    6f4c:	c9 01       	movw	r24, r18
    6f4e:	64 e6       	ldi	r22, 0x64	; 100
    6f50:	70 e0       	ldi	r23, 0x00	; 0
    6f52:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6f56:	7c 01       	movw	r14, r24
    6f58:	c9 01       	movw	r24, r18
    6f5a:	60 e9       	ldi	r22, 0x90	; 144
    6f5c:	71 e0       	ldi	r23, 0x01	; 1
    6f5e:	0e 94 45 5c 	call	0xb88a	; 0xb88a <__divmodhi4>
    6f62:	8c 01       	movw	r16, r24
    6f64:	c1 e0       	ldi	r28, 0x01	; 1
    6f66:	d0 e0       	ldi	r29, 0x00	; 0
    6f68:	93 e0       	ldi	r25, 0x03	; 3
    6f6a:	69 2e       	mov	r6, r25
    6f6c:	71 2c       	mov	r7, r1
    6f6e:	62 22       	and	r6, r18
    6f70:	73 22       	and	r7, r19
    6f72:	27 c0       	rjmp	.+78     	; 0x6fc2 <RTC_TimeToUTCSecs+0x10e>
    6f74:	c2 30       	cpi	r28, 0x02	; 2
    6f76:	d1 05       	cpc	r29, r1
    6f78:	91 f4       	brne	.+36     	; 0x6f9e <RTC_TimeToUTCSecs+0xea>
    6f7a:	61 14       	cp	r6, r1
    6f7c:	71 04       	cpc	r7, r1
    6f7e:	79 f4       	brne	.+30     	; 0x6f9e <RTC_TimeToUTCSecs+0xea>
    6f80:	e1 14       	cp	r14, r1
    6f82:	f1 04       	cpc	r15, r1
    6f84:	19 f4       	brne	.+6      	; 0x6f8c <RTC_TimeToUTCSecs+0xd8>
    6f86:	01 15       	cp	r16, r1
    6f88:	11 05       	cpc	r17, r1
    6f8a:	49 f4       	brne	.+18     	; 0x6f9e <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    6f8c:	80 e8       	ldi	r24, 0x80	; 128
    6f8e:	9b e3       	ldi	r25, 0x3B	; 59
    6f90:	a6 e2       	ldi	r26, 0x26	; 38
    6f92:	b0 e0       	ldi	r27, 0x00	; 0
    6f94:	a8 0e       	add	r10, r24
    6f96:	b9 1e       	adc	r11, r25
    6f98:	ca 1e       	adc	r12, r26
    6f9a:	db 1e       	adc	r13, r27
    6f9c:	11 c0       	rjmp	.+34     	; 0x6fc0 <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    6f9e:	fe 01       	movw	r30, r28
    6fa0:	e8 54       	subi	r30, 0x48	; 72
    6fa2:	fd 4c       	sbci	r31, 0xCD	; 205
    6fa4:	60 81       	ld	r22, Z
    6fa6:	70 e0       	ldi	r23, 0x00	; 0
    6fa8:	80 e0       	ldi	r24, 0x00	; 0
    6faa:	90 e0       	ldi	r25, 0x00	; 0
    6fac:	20 e8       	ldi	r18, 0x80	; 128
    6fae:	31 e5       	ldi	r19, 0x51	; 81
    6fb0:	41 e0       	ldi	r20, 0x01	; 1
    6fb2:	50 e0       	ldi	r21, 0x00	; 0
    6fb4:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    6fb8:	a6 0e       	add	r10, r22
    6fba:	b7 1e       	adc	r11, r23
    6fbc:	c8 1e       	adc	r12, r24
    6fbe:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6fc0:	21 96       	adiw	r28, 0x01	; 1
    6fc2:	c4 15       	cp	r28, r4
    6fc4:	d5 05       	cpc	r29, r5
    6fc6:	b4 f2       	brlt	.-84     	; 0x6f74 <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6fc8:	d4 01       	movw	r26, r8
    6fca:	13 96       	adiw	r26, 0x03	; 3
    6fcc:	6c 91       	ld	r22, X
    6fce:	70 e0       	ldi	r23, 0x00	; 0
    6fd0:	80 e0       	ldi	r24, 0x00	; 0
    6fd2:	90 e0       	ldi	r25, 0x00	; 0
    6fd4:	20 e1       	ldi	r18, 0x10	; 16
    6fd6:	3e e0       	ldi	r19, 0x0E	; 14
    6fd8:	40 e0       	ldi	r20, 0x00	; 0
    6fda:	50 e0       	ldi	r21, 0x00	; 0
    6fdc:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    6fe0:	7b 01       	movw	r14, r22
    6fe2:	8c 01       	movw	r16, r24
    6fe4:	f4 01       	movw	r30, r8
    6fe6:	62 81       	ldd	r22, Z+2	; 0x02
    6fe8:	70 e0       	ldi	r23, 0x00	; 0
    6fea:	80 e0       	ldi	r24, 0x00	; 0
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	2c e3       	ldi	r18, 0x3C	; 60
    6ff0:	30 e0       	ldi	r19, 0x00	; 0
    6ff2:	40 e0       	ldi	r20, 0x00	; 0
    6ff4:	50 e0       	ldi	r21, 0x00	; 0
    6ff6:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    6ffa:	e6 0e       	add	r14, r22
    6ffc:	f7 1e       	adc	r15, r23
    6ffe:	08 1f       	adc	r16, r24
    7000:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    7002:	d4 01       	movw	r26, r8
    7004:	11 96       	adiw	r26, 0x01	; 1
    7006:	8c 91       	ld	r24, X
    7008:	11 97       	sbiw	r26, 0x01	; 1
    700a:	e8 0e       	add	r14, r24
    700c:	f1 1c       	adc	r15, r1
    700e:	01 1d       	adc	r16, r1
    7010:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    7012:	15 96       	adiw	r26, 0x05	; 5
    7014:	6c 91       	ld	r22, X
    7016:	70 e0       	ldi	r23, 0x00	; 0
    7018:	61 50       	subi	r22, 0x01	; 1
    701a:	70 40       	sbci	r23, 0x00	; 0
    701c:	88 27       	eor	r24, r24
    701e:	77 fd       	sbrc	r23, 7
    7020:	80 95       	com	r24
    7022:	98 2f       	mov	r25, r24
    7024:	20 e8       	ldi	r18, 0x80	; 128
    7026:	31 e5       	ldi	r19, 0x51	; 81
    7028:	41 e0       	ldi	r20, 0x01	; 1
    702a:	50 e0       	ldi	r21, 0x00	; 0
    702c:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    7030:	e6 0e       	add	r14, r22
    7032:	f7 1e       	adc	r15, r23
    7034:	08 1f       	adc	r16, r24
    7036:	19 1f       	adc	r17, r25
    7038:	ea 0c       	add	r14, r10
    703a:	fb 1c       	adc	r15, r11
    703c:	0c 1d       	adc	r16, r12
    703e:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    7040:	b7 01       	movw	r22, r14
    7042:	c8 01       	movw	r24, r16
    7044:	df 91       	pop	r29
    7046:	cf 91       	pop	r28
    7048:	1f 91       	pop	r17
    704a:	0f 91       	pop	r16
    704c:	ff 90       	pop	r15
    704e:	ef 90       	pop	r14
    7050:	df 90       	pop	r13
    7052:	cf 90       	pop	r12
    7054:	bf 90       	pop	r11
    7056:	af 90       	pop	r10
    7058:	9f 90       	pop	r9
    705a:	8f 90       	pop	r8
    705c:	7f 90       	pop	r7
    705e:	6f 90       	pop	r6
    7060:	5f 90       	pop	r5
    7062:	4f 90       	pop	r4
    7064:	08 95       	ret

00007066 <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    7066:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    7068:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    706a:	e0 ea       	ldi	r30, 0xA0	; 160
    706c:	f4 e0       	ldi	r31, 0x04	; 4
    706e:	46 83       	std	Z+6, r20	; 0x06
    7070:	fb 01       	movw	r30, r22
    7072:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    7074:	a0 ea       	ldi	r26, 0xA0	; 160
    7076:	b4 e0       	ldi	r27, 0x04	; 4
    7078:	0d c0       	rjmp	.+26     	; 0x7094 <RTC_sendBytes+0x2e>
    707a:	80 91 a4 04 	lds	r24, 0x04A4
    707e:	86 ff       	sbrs	r24, 6
    7080:	fc cf       	rjmp	.-8      	; 0x707a <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    7082:	80 91 a4 04 	lds	r24, 0x04A4
    7086:	84 fd       	sbrc	r24, 4
    7088:	07 c0       	rjmp	.+14     	; 0x7098 <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    708a:	81 91       	ld	r24, Z+
    708c:	17 96       	adiw	r26, 0x07	; 7
    708e:	8c 93       	st	X, r24
    7090:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    7092:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    7094:	95 17       	cp	r25, r21
    7096:	88 f3       	brcs	.-30     	; 0x707a <RTC_sendBytes+0x14>
    7098:	08 95       	ret

0000709a <RTC_setTime>:



} 

void RTC_setTime(void) {
    709a:	df 93       	push	r29
    709c:	cf 93       	push	r28
    709e:	cd b7       	in	r28, 0x3d	; 61
    70a0:	de b7       	in	r29, 0x3e	; 62
    70a2:	29 97       	sbiw	r28, 0x09	; 9
    70a4:	cd bf       	out	0x3d, r28	; 61
    70a6:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    70a8:	50 91 c6 4e 	lds	r21, 0x4EC6
    70ac:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    70ae:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    70b0:	40 91 bf 4e 	lds	r20, 0x4EBF
    70b4:	84 2f       	mov	r24, r20
    70b6:	6a e0       	ldi	r22, 0x0A	; 10
    70b8:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    70bc:	28 2f       	mov	r18, r24
    70be:	30 e0       	ldi	r19, 0x00	; 0
    70c0:	b4 e0       	ldi	r27, 0x04	; 4
    70c2:	22 0f       	add	r18, r18
    70c4:	33 1f       	adc	r19, r19
    70c6:	ba 95       	dec	r27
    70c8:	e1 f7       	brne	.-8      	; 0x70c2 <RTC_setTime+0x28>
    70ca:	84 2f       	mov	r24, r20
    70cc:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    70d0:	92 2b       	or	r25, r18
    70d2:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    70d4:	40 91 c0 4e 	lds	r20, 0x4EC0
    70d8:	84 2f       	mov	r24, r20
    70da:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    70de:	28 2f       	mov	r18, r24
    70e0:	30 e0       	ldi	r19, 0x00	; 0
    70e2:	a4 e0       	ldi	r26, 0x04	; 4
    70e4:	22 0f       	add	r18, r18
    70e6:	33 1f       	adc	r19, r19
    70e8:	aa 95       	dec	r26
    70ea:	e1 f7       	brne	.-8      	; 0x70e4 <RTC_setTime+0x4a>
    70ec:	84 2f       	mov	r24, r20
    70ee:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    70f2:	92 2b       	or	r25, r18
    70f4:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    70f6:	40 91 c1 4e 	lds	r20, 0x4EC1
    70fa:	84 2f       	mov	r24, r20
    70fc:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    7100:	28 2f       	mov	r18, r24
    7102:	30 e0       	ldi	r19, 0x00	; 0
    7104:	f4 e0       	ldi	r31, 0x04	; 4
    7106:	22 0f       	add	r18, r18
    7108:	33 1f       	adc	r19, r19
    710a:	fa 95       	dec	r31
    710c:	e1 f7       	brne	.-8      	; 0x7106 <RTC_setTime+0x6c>
    710e:	84 2f       	mov	r24, r20
    7110:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    7114:	92 2b       	or	r25, r18
    7116:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    7118:	30 91 c2 4e 	lds	r19, 0x4EC2
    711c:	83 2f       	mov	r24, r19
    711e:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    7122:	29 2f       	mov	r18, r25
    7124:	20 68       	ori	r18, 0x80	; 128
    7126:	83 2f       	mov	r24, r19
    7128:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    712c:	82 95       	swap	r24
    712e:	80 7f       	andi	r24, 0xF0	; 240
    7130:	28 2b       	or	r18, r24
    7132:	85 2f       	mov	r24, r21
    7134:	64 e6       	ldi	r22, 0x64	; 100
    7136:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    713a:	82 95       	swap	r24
    713c:	88 0f       	add	r24, r24
    713e:	88 0f       	add	r24, r24
    7140:	80 7c       	andi	r24, 0xC0	; 192
    7142:	28 2b       	or	r18, r24
    7144:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    7146:	80 91 c3 4e 	lds	r24, 0x4EC3
    714a:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    714c:	40 91 c4 4e 	lds	r20, 0x4EC4
    7150:	84 2f       	mov	r24, r20
    7152:	6a e0       	ldi	r22, 0x0A	; 10
    7154:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    7158:	28 2f       	mov	r18, r24
    715a:	30 e0       	ldi	r19, 0x00	; 0
    715c:	e4 e0       	ldi	r30, 0x04	; 4
    715e:	22 0f       	add	r18, r18
    7160:	33 1f       	adc	r19, r19
    7162:	ea 95       	dec	r30
    7164:	e1 f7       	brne	.-8      	; 0x715e <RTC_setTime+0xc4>
    7166:	84 2f       	mov	r24, r20
    7168:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    716c:	92 2b       	or	r25, r18
    716e:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    7170:	40 91 c5 4e 	lds	r20, 0x4EC5
    7174:	84 2f       	mov	r24, r20
    7176:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    717a:	28 2f       	mov	r18, r24
    717c:	30 e0       	ldi	r19, 0x00	; 0
    717e:	74 e0       	ldi	r23, 0x04	; 4
    7180:	22 0f       	add	r18, r18
    7182:	33 1f       	adc	r19, r19
    7184:	7a 95       	dec	r23
    7186:	e1 f7       	brne	.-8      	; 0x7180 <RTC_setTime+0xe6>
    7188:	84 2f       	mov	r24, r20
    718a:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    718e:	92 2b       	or	r25, r18
    7190:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    7192:	85 2f       	mov	r24, r21
    7194:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    7198:	28 2f       	mov	r18, r24
    719a:	30 e0       	ldi	r19, 0x00	; 0
    719c:	44 e0       	ldi	r20, 0x04	; 4
    719e:	22 0f       	add	r18, r18
    71a0:	33 1f       	adc	r19, r19
    71a2:	4a 95       	dec	r20
    71a4:	e1 f7       	brne	.-8      	; 0x719e <RTC_setTime+0x104>
    71a6:	85 2f       	mov	r24, r21
    71a8:	0e 94 25 5c 	call	0xb84a	; 0xb84a <__udivmodqi4>
    71ac:	92 2b       	or	r25, r18
    71ae:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    71b0:	89 e0       	ldi	r24, 0x09	; 9
    71b2:	be 01       	movw	r22, r28
    71b4:	6f 5f       	subi	r22, 0xFF	; 255
    71b6:	7f 4f       	sbci	r23, 0xFF	; 255
    71b8:	40 ed       	ldi	r20, 0xD0	; 208
    71ba:	0e 94 33 38 	call	0x7066	; 0x7066 <RTC_sendBytes>
}
    71be:	29 96       	adiw	r28, 0x09	; 9
    71c0:	cd bf       	out	0x3d, r28	; 61
    71c2:	de bf       	out	0x3e, r29	; 62
    71c4:	cf 91       	pop	r28
    71c6:	df 91       	pop	r29
    71c8:	08 95       	ret

000071ca <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    71ca:	4f eb       	ldi	r20, 0xBF	; 191
    71cc:	5e e4       	ldi	r21, 0x4E	; 78
    71ce:	0e 94 57 36 	call	0x6cae	; 0x6cae <RTC_UTCSecsToTime>
	RTC_setTime();
    71d2:	0e 94 4d 38 	call	0x709a	; 0x709a <RTC_setTime>
}
    71d6:	08 95       	ret

000071d8 <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    71d8:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    71da:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    71dc:	e0 ea       	ldi	r30, 0xA0	; 160
    71de:	f4 e0       	ldi	r31, 0x04	; 4
    71e0:	46 83       	std	Z+6, r20	; 0x06
    71e2:	fb 01       	movw	r30, r22
    71e4:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    71e6:	a0 ea       	ldi	r26, 0xA0	; 160
    71e8:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    71ea:	22 e0       	ldi	r18, 0x02	; 2
    71ec:	0b c0       	rjmp	.+22     	; 0x7204 <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    71ee:	80 91 a4 04 	lds	r24, 0x04A4
    71f2:	87 ff       	sbrs	r24, 7
    71f4:	fc cf       	rjmp	.-8      	; 0x71ee <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    71f6:	80 91 a7 04 	lds	r24, 0x04A7
    71fa:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    71fc:	13 96       	adiw	r26, 0x03	; 3
    71fe:	2c 93       	st	X, r18
    7200:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    7202:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    7204:	95 17       	cp	r25, r21
    7206:	98 f3       	brcs	.-26     	; 0x71ee <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    7208:	87 e0       	ldi	r24, 0x07	; 7
    720a:	e0 ea       	ldi	r30, 0xA0	; 160
    720c:	f4 e0       	ldi	r31, 0x04	; 4
    720e:	83 83       	std	Z+3, r24	; 0x03

}
    7210:	08 95       	ret

00007212 <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    7212:	0f 93       	push	r16
    7214:	1f 93       	push	r17
    7216:	df 93       	push	r29
    7218:	cf 93       	push	r28
    721a:	cd b7       	in	r28, 0x3d	; 61
    721c:	de b7       	in	r29, 0x3e	; 62
    721e:	28 97       	sbiw	r28, 0x08	; 8
    7220:	cd bf       	out	0x3d, r28	; 61
    7222:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    7224:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    7226:	81 e0       	ldi	r24, 0x01	; 1
    7228:	8e 01       	movw	r16, r28
    722a:	0f 5f       	subi	r16, 0xFF	; 255
    722c:	1f 4f       	sbci	r17, 0xFF	; 255
    722e:	b8 01       	movw	r22, r16
    7230:	40 ed       	ldi	r20, 0xD0	; 208
    7232:	0e 94 33 38 	call	0x7066	; 0x7066 <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    7236:	88 e0       	ldi	r24, 0x08	; 8
    7238:	b8 01       	movw	r22, r16
    723a:	40 ed       	ldi	r20, 0xD0	; 208
    723c:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    7240:	49 81       	ldd	r20, Y+1	; 0x01
    7242:	84 2f       	mov	r24, r20
    7244:	82 95       	swap	r24
    7246:	8f 70       	andi	r24, 0x0F	; 15
    7248:	90 e0       	ldi	r25, 0x00	; 0
    724a:	9c 01       	movw	r18, r24
    724c:	63 e0       	ldi	r22, 0x03	; 3
    724e:	22 0f       	add	r18, r18
    7250:	33 1f       	adc	r19, r19
    7252:	6a 95       	dec	r22
    7254:	e1 f7       	brne	.-8      	; 0x724e <RTC_getTime+0x3c>
    7256:	88 0f       	add	r24, r24
    7258:	99 1f       	adc	r25, r25
    725a:	28 0f       	add	r18, r24
    725c:	39 1f       	adc	r19, r25
    725e:	4f 70       	andi	r20, 0x0F	; 15
    7260:	42 0f       	add	r20, r18
    7262:	40 93 bf 4e 	sts	0x4EBF, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    7266:	4a 81       	ldd	r20, Y+2	; 0x02
    7268:	84 2f       	mov	r24, r20
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	80 77       	andi	r24, 0x70	; 112
    726e:	90 70       	andi	r25, 0x00	; 0
    7270:	24 e0       	ldi	r18, 0x04	; 4
    7272:	95 95       	asr	r25
    7274:	87 95       	ror	r24
    7276:	2a 95       	dec	r18
    7278:	e1 f7       	brne	.-8      	; 0x7272 <RTC_getTime+0x60>
    727a:	9c 01       	movw	r18, r24
    727c:	03 e0       	ldi	r16, 0x03	; 3
    727e:	22 0f       	add	r18, r18
    7280:	33 1f       	adc	r19, r19
    7282:	0a 95       	dec	r16
    7284:	e1 f7       	brne	.-8      	; 0x727e <RTC_getTime+0x6c>
    7286:	88 0f       	add	r24, r24
    7288:	99 1f       	adc	r25, r25
    728a:	28 0f       	add	r18, r24
    728c:	39 1f       	adc	r19, r25
    728e:	4f 70       	andi	r20, 0x0F	; 15
    7290:	42 0f       	add	r20, r18
    7292:	40 93 c0 4e 	sts	0x4EC0, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    7296:	4b 81       	ldd	r20, Y+3	; 0x03
    7298:	84 2f       	mov	r24, r20
    729a:	90 e0       	ldi	r25, 0x00	; 0
    729c:	80 77       	andi	r24, 0x70	; 112
    729e:	90 70       	andi	r25, 0x00	; 0
    72a0:	b4 e0       	ldi	r27, 0x04	; 4
    72a2:	95 95       	asr	r25
    72a4:	87 95       	ror	r24
    72a6:	ba 95       	dec	r27
    72a8:	e1 f7       	brne	.-8      	; 0x72a2 <RTC_getTime+0x90>
    72aa:	9c 01       	movw	r18, r24
    72ac:	a3 e0       	ldi	r26, 0x03	; 3
    72ae:	22 0f       	add	r18, r18
    72b0:	33 1f       	adc	r19, r19
    72b2:	aa 95       	dec	r26
    72b4:	e1 f7       	brne	.-8      	; 0x72ae <RTC_getTime+0x9c>
    72b6:	88 0f       	add	r24, r24
    72b8:	99 1f       	adc	r25, r25
    72ba:	28 0f       	add	r18, r24
    72bc:	39 1f       	adc	r19, r25
    72be:	4f 70       	andi	r20, 0x0F	; 15
    72c0:	42 0f       	add	r20, r18
    72c2:	40 93 c1 4e 	sts	0x4EC1, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    72c6:	4c 81       	ldd	r20, Y+4	; 0x04
    72c8:	64 2f       	mov	r22, r20
    72ca:	70 e0       	ldi	r23, 0x00	; 0
    72cc:	cb 01       	movw	r24, r22
    72ce:	80 73       	andi	r24, 0x30	; 48
    72d0:	90 70       	andi	r25, 0x00	; 0
    72d2:	e4 e0       	ldi	r30, 0x04	; 4
    72d4:	95 95       	asr	r25
    72d6:	87 95       	ror	r24
    72d8:	ea 95       	dec	r30
    72da:	e1 f7       	brne	.-8      	; 0x72d4 <RTC_getTime+0xc2>
    72dc:	9c 01       	movw	r18, r24
    72de:	53 e0       	ldi	r21, 0x03	; 3
    72e0:	22 0f       	add	r18, r18
    72e2:	33 1f       	adc	r19, r19
    72e4:	5a 95       	dec	r21
    72e6:	e1 f7       	brne	.-8      	; 0x72e0 <RTC_getTime+0xce>
    72e8:	88 0f       	add	r24, r24
    72ea:	99 1f       	adc	r25, r25
    72ec:	28 0f       	add	r18, r24
    72ee:	39 1f       	adc	r19, r25
    72f0:	4f 70       	andi	r20, 0x0F	; 15
    72f2:	42 0f       	add	r20, r18
    72f4:	40 93 c2 4e 	sts	0x4EC2, r20
	time.Wday = timeData[4];
    72f8:	8d 81       	ldd	r24, Y+5	; 0x05
    72fa:	80 93 c3 4e 	sts	0x4EC3, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    72fe:	4e 81       	ldd	r20, Y+6	; 0x06
    7300:	84 2f       	mov	r24, r20
    7302:	90 e0       	ldi	r25, 0x00	; 0
    7304:	80 73       	andi	r24, 0x30	; 48
    7306:	90 70       	andi	r25, 0x00	; 0
    7308:	14 e0       	ldi	r17, 0x04	; 4
    730a:	95 95       	asr	r25
    730c:	87 95       	ror	r24
    730e:	1a 95       	dec	r17
    7310:	e1 f7       	brne	.-8      	; 0x730a <RTC_getTime+0xf8>
    7312:	9c 01       	movw	r18, r24
    7314:	b3 e0       	ldi	r27, 0x03	; 3
    7316:	22 0f       	add	r18, r18
    7318:	33 1f       	adc	r19, r19
    731a:	ba 95       	dec	r27
    731c:	e1 f7       	brne	.-8      	; 0x7316 <RTC_getTime+0x104>
    731e:	88 0f       	add	r24, r24
    7320:	99 1f       	adc	r25, r25
    7322:	28 0f       	add	r18, r24
    7324:	39 1f       	adc	r19, r25
    7326:	4f 70       	andi	r20, 0x0F	; 15
    7328:	42 0f       	add	r20, r18
    732a:	40 93 c4 4e 	sts	0x4EC4, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    732e:	4f 81       	ldd	r20, Y+7	; 0x07
    7330:	84 2f       	mov	r24, r20
    7332:	90 e0       	ldi	r25, 0x00	; 0
    7334:	80 71       	andi	r24, 0x10	; 16
    7336:	90 70       	andi	r25, 0x00	; 0
    7338:	f4 e0       	ldi	r31, 0x04	; 4
    733a:	95 95       	asr	r25
    733c:	87 95       	ror	r24
    733e:	fa 95       	dec	r31
    7340:	e1 f7       	brne	.-8      	; 0x733a <RTC_getTime+0x128>
    7342:	9c 01       	movw	r18, r24
    7344:	e3 e0       	ldi	r30, 0x03	; 3
    7346:	22 0f       	add	r18, r18
    7348:	33 1f       	adc	r19, r19
    734a:	ea 95       	dec	r30
    734c:	e1 f7       	brne	.-8      	; 0x7346 <RTC_getTime+0x134>
    734e:	88 0f       	add	r24, r24
    7350:	99 1f       	adc	r25, r25
    7352:	28 0f       	add	r18, r24
    7354:	39 1f       	adc	r19, r25
    7356:	4f 70       	andi	r20, 0x0F	; 15
    7358:	42 0f       	add	r20, r18
    735a:	40 93 c5 4e 	sts	0x4EC5, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    735e:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    7360:	42 2f       	mov	r20, r18
    7362:	4f 70       	andi	r20, 0x0F	; 15
    7364:	42 5e       	subi	r20, 0xE2	; 226
    7366:	60 75       	andi	r22, 0x50	; 80
    7368:	70 70       	andi	r23, 0x00	; 0
    736a:	86 e0       	ldi	r24, 0x06	; 6
    736c:	75 95       	asr	r23
    736e:	67 95       	ror	r22
    7370:	8a 95       	dec	r24
    7372:	e1 f7       	brne	.-8      	; 0x736c <RTC_getTime+0x15a>
    7374:	84 e6       	ldi	r24, 0x64	; 100
    7376:	90 e0       	ldi	r25, 0x00	; 0
    7378:	fc 01       	movw	r30, r24
    737a:	6e 9f       	mul	r22, r30
    737c:	c0 01       	movw	r24, r0
    737e:	6f 9f       	mul	r22, r31
    7380:	90 0d       	add	r25, r0
    7382:	7e 9f       	mul	r23, r30
    7384:	90 0d       	add	r25, r0
    7386:	11 24       	eor	r1, r1
    7388:	48 0f       	add	r20, r24
    738a:	22 95       	swap	r18
    738c:	2f 70       	andi	r18, 0x0F	; 15
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	c9 01       	movw	r24, r18
    7392:	03 e0       	ldi	r16, 0x03	; 3
    7394:	88 0f       	add	r24, r24
    7396:	99 1f       	adc	r25, r25
    7398:	0a 95       	dec	r16
    739a:	e1 f7       	brne	.-8      	; 0x7394 <RTC_getTime+0x182>
    739c:	22 0f       	add	r18, r18
    739e:	33 1f       	adc	r19, r19
    73a0:	82 0f       	add	r24, r18
    73a2:	93 1f       	adc	r25, r19
    73a4:	48 0f       	add	r20, r24
    73a6:	40 93 c6 4e 	sts	0x4EC6, r20




} 
    73aa:	28 96       	adiw	r28, 0x08	; 8
    73ac:	cd bf       	out	0x3d, r28	; 61
    73ae:	de bf       	out	0x3e, r29	; 62
    73b0:	cf 91       	pop	r28
    73b2:	df 91       	pop	r29
    73b4:	1f 91       	pop	r17
    73b6:	0f 91       	pop	r16
    73b8:	08 95       	ret

000073ba <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    73ba:	0e 94 09 39 	call	0x7212	; 0x7212 <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    73be:	8f eb       	ldi	r24, 0xBF	; 191
    73c0:	9e e4       	ldi	r25, 0x4E	; 78
    73c2:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    73c6:	08 95       	ret

000073c8 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    73c8:	0f 93       	push	r16
    73ca:	df 93       	push	r29
    73cc:	cf 93       	push	r28
    73ce:	0f 92       	push	r0
    73d0:	cd b7       	in	r28, 0x3d	; 61
    73d2:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    73d4:	80 ec       	ldi	r24, 0xC0	; 192
    73d6:	e0 e5       	ldi	r30, 0x50	; 80
    73d8:	f0 e0       	ldi	r31, 0x00	; 0
    73da:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    73dc:	80 91 50 00 	lds	r24, 0x0050
    73e0:	88 60       	ori	r24, 0x08	; 8
    73e2:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    73e6:	80 91 51 00 	lds	r24, 0x0051
    73ea:	83 ff       	sbrs	r24, 3
    73ec:	fc cf       	rjmp	.-8      	; 0x73e6 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    73ee:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    73f2:	8f b7       	in	r24, 0x3f	; 63
    73f4:	89 83       	std	Y+1, r24	; 0x01
    cli();
    73f6:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    73f8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    73fa:	28 7f       	andi	r18, 0xF8	; 248
    73fc:	23 60       	ori	r18, 0x03	; 3
    73fe:	80 e4       	ldi	r24, 0x40	; 64
    7400:	90 e0       	ldi	r25, 0x00	; 0
    7402:	fc 01       	movw	r30, r24
    7404:	08 ed       	ldi	r16, 0xD8	; 216
    7406:	04 bf       	out	0x34, r16	; 52
    7408:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    740a:	89 81       	ldd	r24, Y+1	; 0x01
    740c:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    740e:	80 91 50 00 	lds	r24, 0x0050
    7412:	8e 7f       	andi	r24, 0xFE	; 254
    7414:	80 93 50 00 	sts	0x0050, r24
}
    7418:	0f 90       	pop	r0
    741a:	cf 91       	pop	r28
    741c:	df 91       	pop	r29
    741e:	0f 91       	pop	r16
    7420:	08 95       	ret

00007422 <Disable_JTAG>:

void Disable_JTAG(void){
    7422:	0f 93       	push	r16
    7424:	df 93       	push	r29
    7426:	cf 93       	push	r28
    7428:	0f 92       	push	r0
    742a:	cd b7       	in	r28, 0x3d	; 61
    742c:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    742e:	8f b7       	in	r24, 0x3f	; 63
    7430:	89 83       	std	Y+1, r24	; 0x01
    cli();
    7432:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7434:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7436:	21 e0       	ldi	r18, 0x01	; 1
    7438:	86 e9       	ldi	r24, 0x96	; 150
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	fc 01       	movw	r30, r24
    743e:	08 ed       	ldi	r16, 0xD8	; 216
    7440:	04 bf       	out	0x34, r16	; 52
    7442:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    7444:	89 81       	ldd	r24, Y+1	; 0x01
    7446:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    7448:	0f 90       	pop	r0
    744a:	cf 91       	pop	r28
    744c:	df 91       	pop	r29
    744e:	0f 91       	pop	r16
    7450:	08 95       	ret

00007452 <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    7452:	e0 e0       	ldi	r30, 0x00	; 0
    7454:	f1 e0       	ldi	r31, 0x01	; 1
    7456:	80 81       	ld	r24, Z
    7458:	80 68       	ori	r24, 0x80	; 128
    745a:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
    745c:	82 89       	ldd	r24, Z+18	; 0x12
    745e:	85 60       	ori	r24, 0x05	; 5
    7460:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    7462:	8b e8       	ldi	r24, 0x8B	; 139
    7464:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    7466:	80 e0       	ldi	r24, 0x00	; 0
    7468:	94 e0       	ldi	r25, 0x04	; 4
    746a:	84 8b       	std	Z+20, r24	; 0x14
    746c:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    746e:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    7470:	80 ea       	ldi	r24, 0xA0	; 160
    7472:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    7474:	8a e0       	ldi	r24, 0x0A	; 10
    7476:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    7478:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    747a:	8d ed       	ldi	r24, 0xDD	; 221
    747c:	9c e3       	ldi	r25, 0x3C	; 60
    747e:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    7480:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    7482:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    7484:	80 89       	ldd	r24, Z+16	; 0x10
    7486:	84 6a       	ori	r24, 0xA4	; 164
    7488:	80 8b       	std	Z+16, r24	; 0x10
		
}
    748a:	08 95       	ret

0000748c <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    748c:	e0 ea       	ldi	r30, 0xA0	; 160
    748e:	f0 e0       	ldi	r31, 0x00	; 0
    7490:	82 81       	ldd	r24, Z+2	; 0x02
    7492:	87 60       	ori	r24, 0x07	; 7
    7494:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    7496:	78 94       	sei
}
    7498:	08 95       	ret

0000749a <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 1440
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	TCD0.PER = 1440;
    749a:	e0 e0       	ldi	r30, 0x00	; 0
    749c:	f9 e0       	ldi	r31, 0x09	; 9
    749e:	80 ea       	ldi	r24, 0xA0	; 160
    74a0:	95 e0       	ldi	r25, 0x05	; 5
    74a2:	86 a3       	std	Z+38, r24	; 0x26
    74a4:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    74a6:	80 81       	ld	r24, Z
    74a8:	80 7f       	andi	r24, 0xF0	; 240
    74aa:	87 60       	ori	r24, 0x07	; 7
    74ac:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    74ae:	86 81       	ldd	r24, Z+6	; 0x06
    74b0:	8c 7f       	andi	r24, 0xFC	; 252
    74b2:	81 60       	ori	r24, 0x01	; 1
    74b4:	86 83       	std	Z+6, r24	; 0x06
}
    74b6:	08 95       	ret

000074b8 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    74b8:	e0 e4       	ldi	r30, 0x40	; 64
    74ba:	fa e0       	ldi	r31, 0x0A	; 10
    74bc:	80 e0       	ldi	r24, 0x00	; 0
    74be:	99 e0       	ldi	r25, 0x09	; 9
    74c0:	86 a3       	std	Z+38, r24	; 0x26
    74c2:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    74c4:	80 81       	ld	r24, Z
    74c6:	80 7f       	andi	r24, 0xF0	; 240
    74c8:	85 60       	ori	r24, 0x05	; 5
    74ca:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    74cc:	86 81       	ldd	r24, Z+6	; 0x06
    74ce:	8c 7f       	andi	r24, 0xFC	; 252
    74d0:	82 60       	ori	r24, 0x02	; 2
    74d2:	86 83       	std	Z+6, r24	; 0x06

}
    74d4:	08 95       	ret

000074d6 <SD_WriteRTCBlock>:
	    okToGetRemainingSpace = false;
	}
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    74d6:	af 92       	push	r10
    74d8:	bf 92       	push	r11
    74da:	cf 92       	push	r12
    74dc:	df 92       	push	r13
    74de:	ef 92       	push	r14
    74e0:	ff 92       	push	r15
    74e2:	0f 93       	push	r16
    74e4:	1f 93       	push	r17
    74e6:	7b 01       	movw	r14, r22
    74e8:	8c 01       	movw	r16, r24
    74ea:	59 01       	movw	r10, r18
    74ec:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    74ee:	8f ef       	ldi	r24, 0xFF	; 255
    74f0:	9f ef       	ldi	r25, 0xFF	; 255
    74f2:	af ef       	ldi	r26, 0xFF	; 255
    74f4:	bf ef       	ldi	r27, 0xFF	; 255
    74f6:	80 93 9f 56 	sts	0x569F, r24
    74fa:	90 93 a0 56 	sts	0x56A0, r25
    74fe:	a0 93 a1 56 	sts	0x56A1, r26
    7502:	b0 93 a2 56 	sts	0x56A2, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7506:	6c e4       	ldi	r22, 0x4C	; 76
    7508:	74 e7       	ldi	r23, 0x74	; 116
    750a:	8e ed       	ldi	r24, 0xDE	; 222
    750c:	90 eb       	ldi	r25, 0xB0	; 176
    750e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(27);				// record size  
    7512:	6b e1       	ldi	r22, 0x1B	; 27
    7514:	70 e0       	ldi	r23, 0x00	; 0
    7516:	80 e0       	ldi	r24, 0x00	; 0
    7518:	90 e0       	ldi	r25, 0x00	; 0
    751a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(2); 		// record type  
    751e:	82 e0       	ldi	r24, 0x02	; 2
    7520:	90 e0       	ldi	r25, 0x00	; 0
    7522:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    7526:	c8 01       	movw	r24, r16
    7528:	b7 01       	movw	r22, r14
    752a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    752e:	c6 01       	movw	r24, r12
    7530:	b5 01       	movw	r22, r10
    7532:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write8(0);
    7536:	80 e0       	ldi	r24, 0x00	; 0
    7538:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    753c:	60 e0       	ldi	r22, 0x00	; 0
    753e:	70 e0       	ldi	r23, 0x00	; 0
    7540:	80 e0       	ldi	r24, 0x00	; 0
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_WriteCRC();			      // CRC			
    7548:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>
		
	f_sync(&Log_File);
    754c:	87 ec       	ldi	r24, 0xC7	; 199
    754e:	9e e4       	ldi	r25, 0x4E	; 78
    7550:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    7554:	1f 91       	pop	r17
    7556:	0f 91       	pop	r16
    7558:	ff 90       	pop	r15
    755a:	ef 90       	pop	r14
    755c:	df 90       	pop	r13
    755e:	cf 90       	pop	r12
    7560:	bf 90       	pop	r11
    7562:	af 90       	pop	r10
    7564:	08 95       	ret

00007566 <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    7566:	20 91 57 33 	lds	r18, 0x3357
    756a:	30 91 58 33 	lds	r19, 0x3358
    756e:	80 91 55 33 	lds	r24, 0x3355
    7572:	90 91 56 33 	lds	r25, 0x3356
    7576:	28 17       	cp	r18, r24
    7578:	39 07       	cpc	r19, r25
    757a:	51 f4       	brne	.+20     	; 0x7590 <Rs232_To_Debug+0x2a>
    757c:	f4 cf       	rjmp	.-24     	; 0x7566 <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    757e:	80 91 a1 08 	lds	r24, 0x08A1
    7582:	85 ff       	sbrs	r24, 5
    7584:	fc cf       	rjmp	.-8      	; 0x757e <Rs232_To_Debug+0x18>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7586:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    758a:	90 93 a0 08 	sts	0x08A0, r25
    758e:	eb cf       	rjmp	.-42     	; 0x7566 <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    7590:	81 e0       	ldi	r24, 0x01	; 1
    7592:	0e 94 c9 03 	call	0x792	; 0x792 <Rs232_GetByte>
    7596:	98 2f       	mov	r25, r24
    7598:	f2 cf       	rjmp	.-28     	; 0x757e <Rs232_To_Debug+0x18>

0000759a <getDeviceID>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    759a:	82 e0       	ldi	r24, 0x02	; 2
    759c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75a0:	e8 e0       	ldi	r30, 0x08	; 8
    75a2:	f0 e0       	ldi	r31, 0x00	; 0
    75a4:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75a6:	10 92 ca 01 	sts	0x01CA, r1
	
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    75aa:	e0 93 28 4a 	sts	0x4A28, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75ae:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75b2:	e9 e0       	ldi	r30, 0x09	; 9
    75b4:	f0 e0       	ldi	r31, 0x00	; 0
    75b6:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75b8:	10 92 ca 01 	sts	0x01CA, r1
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
    75bc:	e0 93 29 4a 	sts	0x4A29, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75c0:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75c4:	ea e0       	ldi	r30, 0x0A	; 10
    75c6:	f0 e0       	ldi	r31, 0x00	; 0
    75c8:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75ca:	10 92 ca 01 	sts	0x01CA, r1
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
    75ce:	e0 93 2a 4a 	sts	0x4A2A, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75d2:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75d6:	eb e0       	ldi	r30, 0x0B	; 11
    75d8:	f0 e0       	ldi	r31, 0x00	; 0
    75da:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75dc:	10 92 ca 01 	sts	0x01CA, r1

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
    75e0:	e0 93 2b 4a 	sts	0x4A2B, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75e4:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75e8:	ec e0       	ldi	r30, 0x0C	; 12
    75ea:	f0 e0       	ldi	r31, 0x00	; 0
    75ec:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75ee:	10 92 ca 01 	sts	0x01CA, r1
void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
    75f2:	e0 93 2c 4a 	sts	0x4A2C, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75f6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75fa:	ed e0       	ldi	r30, 0x0D	; 13
    75fc:	f0 e0       	ldi	r31, 0x00	; 0
    75fe:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7600:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
    7604:	e0 93 2d 4a 	sts	0x4A2D, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7608:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    760c:	e0 e1       	ldi	r30, 0x10	; 16
    760e:	f0 e0       	ldi	r31, 0x00	; 0
    7610:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7612:	10 92 ca 01 	sts	0x01CA, r1
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
    7616:	e0 93 2e 4a 	sts	0x4A2E, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    761a:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    761e:	e2 e1       	ldi	r30, 0x12	; 18
    7620:	f0 e0       	ldi	r31, 0x00	; 0
    7622:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7624:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
    7628:	e0 93 2f 4a 	sts	0x4A2F, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    762c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7630:	e3 e1       	ldi	r30, 0x13	; 19
    7632:	f0 e0       	ldi	r31, 0x00	; 0
    7634:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7636:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
    763a:	e0 93 30 4a 	sts	0x4A30, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    763e:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7642:	e4 e1       	ldi	r30, 0x14	; 20
    7644:	f0 e0       	ldi	r31, 0x00	; 0
    7646:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7648:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
    764c:	e0 93 31 4a 	sts	0x4A31, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7650:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7654:	e5 e1       	ldi	r30, 0x15	; 21
    7656:	f0 e0       	ldi	r31, 0x00	; 0
    7658:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    765a:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
    765e:	e0 93 32 4a 	sts	0x4A32, r30
	deviceID[11] = '\0';
    7662:	10 92 33 4a 	sts	0x4A33, r1
    7666:	e8 e2       	ldi	r30, 0x28	; 40
    7668:	fa e4       	ldi	r31, 0x4A	; 74
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
    766a:	91 e0       	ldi	r25, 0x01	; 1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
    766c:	80 81       	ld	r24, Z
    766e:	88 23       	and	r24, r24
    7670:	09 f4       	brne	.+2      	; 0x7674 <getDeviceID+0xda>
	       deviceID[i] += 1;
    7672:	90 83       	st	Z, r25
    7674:	31 96       	adiw	r30, 0x01	; 1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
    7676:	8a e4       	ldi	r24, 0x4A	; 74
    7678:	e3 33       	cpi	r30, 0x33	; 51
    767a:	f8 07       	cpc	r31, r24
    767c:	b9 f7       	brne	.-18     	; 0x766c <getDeviceID+0xd2>
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
	    }
	}
}
    767e:	08 95       	ret

00007680 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7680:	aa ec       	ldi	r26, 0xCA	; 202
    7682:	b1 e0       	ldi	r27, 0x01	; 1
    7684:	92 e0       	ldi	r25, 0x02	; 2
    7686:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    7688:	e8 2f       	mov	r30, r24
    768a:	f0 e0       	ldi	r31, 0x00	; 0
    768c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    768e:	1c 92       	st	X, r1

	return result;
}
    7690:	8e 2f       	mov	r24, r30
    7692:	08 95       	ret

00007694 <Uploader_ClearBuffer>:



void Uploader_ClearBuffer(void){
      if(useWifiForUploading){
    7694:	80 91 39 33 	lds	r24, 0x3339
    7698:	88 23       	and	r24, r24
    769a:	19 f0       	breq	.+6      	; 0x76a2 <Uploader_ClearBuffer+0xe>
        Wifi_ClearBuffer();
    769c:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
    76a0:	08 95       	ret
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
    76a2:	80 91 3a 33 	lds	r24, 0x333A
    76a6:	90 91 3b 33 	lds	r25, 0x333B
    76aa:	80 93 3c 33 	sts	0x333C, r24
    76ae:	90 93 3d 33 	sts	0x333D, r25
    76b2:	08 95       	ret

000076b4 <Uploader_GetByte>:
    } else {
        Debug_SendString(string,CR);
    }
}

uint8_t Uploader_GetByte(bool blocking){
    76b4:	98 2f       	mov	r25, r24
    if(useWifiForUploading){
    76b6:	80 91 39 33 	lds	r24, 0x3339
    76ba:	88 23       	and	r24, r24
    76bc:	51 f0       	breq	.+20     	; 0x76d2 <Uploader_GetByte+0x1e>
        if(blocking){
    76be:	99 23       	and	r25, r25
    76c0:	21 f0       	breq	.+8      	; 0x76ca <Uploader_GetByte+0x16>
		    while(!Wifi_CharReadyToRead());
    76c2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    76c6:	88 23       	and	r24, r24
    76c8:	e1 f3       	breq	.-8      	; 0x76c2 <Uploader_GetByte+0xe>
	    }
        return Wifi_GetByte(false);
    76ca:	80 e0       	ldi	r24, 0x00	; 0
    76cc:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    76d0:	08 95       	ret
    } else {
        if(blocking){
    76d2:	99 23       	and	r25, r25
    76d4:	59 f0       	breq	.+22     	; 0x76ec <Uploader_GetByte+0x38>
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    76d6:	20 91 3c 33 	lds	r18, 0x333C
    76da:	30 91 3d 33 	lds	r19, 0x333D
    76de:	80 91 3a 33 	lds	r24, 0x333A
    76e2:	90 91 3b 33 	lds	r25, 0x333B
    76e6:	28 17       	cp	r18, r24
    76e8:	39 07       	cpc	r19, r25
    76ea:	a9 f3       	breq	.-22     	; 0x76d6 <Uploader_GetByte+0x22>
		    while(!Debug_CharReadyToRead());
	    }
        return Debug_GetByte(false);
    76ec:	80 e0       	ldi	r24, 0x00	; 0
    76ee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
    }
}
    76f2:	08 95       	ret

000076f4 <Uploader_CharReadyToRead>:

bool Uploader_CharReadyToRead(void){
    if(useWifiForUploading){
    76f4:	80 91 39 33 	lds	r24, 0x3339
    76f8:	88 23       	and	r24, r24
    76fa:	21 f0       	breq	.+8      	; 0x7704 <Uploader_CharReadyToRead+0x10>
        return Wifi_CharReadyToRead();
    76fc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    7700:	48 2f       	mov	r20, r24
    7702:	0d c0       	rjmp	.+26     	; 0x771e <Uploader_CharReadyToRead+0x2a>
    7704:	20 91 3c 33 	lds	r18, 0x333C
    7708:	30 91 3d 33 	lds	r19, 0x333D
    770c:	80 91 3a 33 	lds	r24, 0x333A
    7710:	90 91 3b 33 	lds	r25, 0x333B
    7714:	40 e0       	ldi	r20, 0x00	; 0
    7716:	28 17       	cp	r18, r24
    7718:	39 07       	cpc	r19, r25
    771a:	09 f0       	breq	.+2      	; 0x771e <Uploader_CharReadyToRead+0x2a>
    771c:	41 e0       	ldi	r20, 0x01	; 1
    } else {
        return Debug_CharReadyToRead();
    }
}
    771e:	84 2f       	mov	r24, r20
    7720:	08 95       	ret

00007722 <Uploader_Connected>:

bool Uploader_Connected(uint16_t timeOut){
    7722:	9c 01       	movw	r18, r24
    if(useWifiForUploading){
    7724:	80 91 39 33 	lds	r24, 0x3339
    7728:	88 23       	and	r24, r24
    772a:	21 f0       	breq	.+8      	; 0x7734 <Uploader_Connected+0x12>
        return Wifi_Connected(timeOut);
    772c:	c9 01       	movw	r24, r18
    772e:	0e 94 3d 03 	call	0x67a	; 0x67a <Wifi_Connected>
    7732:	08 95       	ret
    } else {
        return Debug_Connected(timeOut);
    7734:	c9 01       	movw	r24, r18
    7736:	0e 94 26 02 	call	0x44c	; 0x44c <Debug_Connected>
    }
    773a:	08 95       	ret

0000773c <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    773c:	ef 92       	push	r14
    773e:	ff 92       	push	r15
    7740:	0f 93       	push	r16
    7742:	1f 93       	push	r17
    7744:	cf 93       	push	r28
    7746:	df 93       	push	r29
    7748:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    774a:	67 ec       	ldi	r22, 0xC7	; 199
    774c:	7e e4       	ldi	r23, 0x4E	; 78
    774e:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
    7752:	60 e0       	ldi	r22, 0x00	; 0
    7754:	70 e0       	ldi	r23, 0x00	; 0
    7756:	3b c0       	rjmp	.+118    	; 0x77ce <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7758:	e0 90 9f 56 	lds	r14, 0x569F
    775c:	f0 90 a0 56 	lds	r15, 0x56A0
    7760:	00 91 a1 56 	lds	r16, 0x56A1
    7764:	10 91 a2 56 	lds	r17, 0x56A2
    7768:	20 91 9f 56 	lds	r18, 0x569F
    776c:	30 91 a0 56 	lds	r19, 0x56A0
    7770:	40 91 a1 56 	lds	r20, 0x56A1
    7774:	50 91 a2 56 	lds	r21, 0x56A2
    7778:	30 70       	andi	r19, 0x00	; 0
    777a:	40 70       	andi	r20, 0x00	; 0
    777c:	50 70       	andi	r21, 0x00	; 0
    777e:	fe 01       	movw	r30, r28
    7780:	e6 0f       	add	r30, r22
    7782:	f7 1f       	adc	r31, r23
    7784:	80 81       	ld	r24, Z
    7786:	90 e0       	ldi	r25, 0x00	; 0
    7788:	a0 e0       	ldi	r26, 0x00	; 0
    778a:	b0 e0       	ldi	r27, 0x00	; 0
    778c:	28 27       	eor	r18, r24
    778e:	39 27       	eor	r19, r25
    7790:	4a 27       	eor	r20, r26
    7792:	5b 27       	eor	r21, r27
    7794:	22 0f       	add	r18, r18
    7796:	33 1f       	adc	r19, r19
    7798:	22 0f       	add	r18, r18
    779a:	33 1f       	adc	r19, r19
    779c:	2e 57       	subi	r18, 0x7E	; 126
    779e:	34 4d       	sbci	r19, 0xD4	; 212
    77a0:	ef 2c       	mov	r14, r15
    77a2:	f0 2e       	mov	r15, r16
    77a4:	01 2f       	mov	r16, r17
    77a6:	11 27       	eor	r17, r17
    77a8:	f9 01       	movw	r30, r18
    77aa:	80 81       	ld	r24, Z
    77ac:	91 81       	ldd	r25, Z+1	; 0x01
    77ae:	a2 81       	ldd	r26, Z+2	; 0x02
    77b0:	b3 81       	ldd	r27, Z+3	; 0x03
    77b2:	e8 26       	eor	r14, r24
    77b4:	f9 26       	eor	r15, r25
    77b6:	0a 27       	eor	r16, r26
    77b8:	1b 27       	eor	r17, r27
    77ba:	e0 92 9f 56 	sts	0x569F, r14
    77be:	f0 92 a0 56 	sts	0x56A0, r15
    77c2:	00 93 a1 56 	sts	0x56A1, r16
    77c6:	10 93 a2 56 	sts	0x56A2, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    77ca:	6f 5f       	subi	r22, 0xFF	; 255
    77cc:	7f 4f       	sbci	r23, 0xFF	; 255
    77ce:	fe 01       	movw	r30, r28
    77d0:	01 90       	ld	r0, Z+
    77d2:	00 20       	and	r0, r0
    77d4:	e9 f7       	brne	.-6      	; 0x77d0 <SD_WriteString+0x94>
    77d6:	31 97       	sbiw	r30, 0x01	; 1
    77d8:	ec 1b       	sub	r30, r28
    77da:	fd 0b       	sbc	r31, r29
    77dc:	6e 17       	cp	r22, r30
    77de:	7f 07       	cpc	r23, r31
    77e0:	08 f4       	brcc	.+2      	; 0x77e4 <SD_WriteString+0xa8>
    77e2:	ba cf       	rjmp	.-140    	; 0x7758 <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    77e4:	df 91       	pop	r29
    77e6:	cf 91       	pop	r28
    77e8:	1f 91       	pop	r17
    77ea:	0f 91       	pop	r16
    77ec:	ff 90       	pop	r15
    77ee:	ef 90       	pop	r14
    77f0:	08 95       	ret

000077f2 <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    77f2:	0f 93       	push	r16
    77f4:	1f 93       	push	r17
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    77f6:	8f ef       	ldi	r24, 0xFF	; 255
    77f8:	9f ef       	ldi	r25, 0xFF	; 255
    77fa:	af ef       	ldi	r26, 0xFF	; 255
    77fc:	bf ef       	ldi	r27, 0xFF	; 255
    77fe:	80 93 9f 56 	sts	0x569F, r24
    7802:	90 93 a0 56 	sts	0x56A0, r25
    7806:	a0 93 a1 56 	sts	0x56A1, r26
    780a:	b0 93 a2 56 	sts	0x56A2, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    780e:	6c e4       	ldi	r22, 0x4C	; 76
    7810:	74 e7       	ldi	r23, 0x74	; 116
    7812:	8e ed       	ldi	r24, 0xDE	; 222
    7814:	90 eb       	ldi	r25, 0xB0	; 176
    7816:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(61);				// record size
    781a:	6d e3       	ldi	r22, 0x3D	; 61
    781c:	70 e0       	ldi	r23, 0x00	; 0
    781e:	80 e0       	ldi	r24, 0x00	; 0
    7820:	90 e0       	ldi	r25, 0x00	; 0
    7822:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(3); 		// record type
    7826:	83 e0       	ldi	r24, 0x03	; 3
    7828:	90 e0       	ldi	r25, 0x00	; 0
    782a:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    782e:	60 91 30 33 	lds	r22, 0x3330
    7832:	70 91 31 33 	lds	r23, 0x3331
    7836:	80 91 32 33 	lds	r24, 0x3332
    783a:	90 91 33 33 	lds	r25, 0x3333
    783e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    7842:	60 e0       	ldi	r22, 0x00	; 0
    7844:	70 e8       	ldi	r23, 0x80	; 128
    7846:	87 e9       	ldi	r24, 0x97	; 151
    7848:	96 e0       	ldi	r25, 0x06	; 6
    784a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(1);												// number of samples
    784e:	61 e0       	ldi	r22, 0x01	; 1
    7850:	70 e0       	ldi	r23, 0x00	; 0
    7852:	80 e0       	ldi	r24, 0x00	; 0
    7854:	90 e0       	ldi	r25, 0x00	; 0
    7856:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_WriteString("Air_Small");
    785a:	83 e3       	ldi	r24, 0x33	; 51
    785c:	90 e2       	ldi	r25, 0x20	; 32
    785e:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7862:	89 e0       	ldi	r24, 0x09	; 9
    7864:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("32");
    7868:	0d e3       	ldi	r16, 0x3D	; 61
    786a:	10 e2       	ldi	r17, 0x20	; 32
    786c:	c8 01       	movw	r24, r16
    786e:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    7872:	8a e0       	ldi	r24, 0x0A	; 10
    7874:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("Air_Large");
    7878:	80 e4       	ldi	r24, 0x40	; 64
    787a:	90 e2       	ldi	r25, 0x20	; 32
    787c:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7880:	89 e0       	ldi	r24, 0x09	; 9
    7882:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("32");
    7886:	c8 01       	movw	r24, r16
    7888:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    788c:	8a e0       	ldi	r24, 0x0A	; 10
    788e:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	SD_Write8(0x00);
    7892:	80 e0       	ldi	r24, 0x00	; 0
    7894:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	SD_Write32(smallCount);
    7898:	60 91 47 3c 	lds	r22, 0x3C47
    789c:	70 91 48 3c 	lds	r23, 0x3C48
    78a0:	80 91 49 3c 	lds	r24, 0x3C49
    78a4:	90 91 4a 3c 	lds	r25, 0x3C4A
    78a8:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(largeCount);
    78ac:	60 91 75 5b 	lds	r22, 0x5B75
    78b0:	70 91 76 5b 	lds	r23, 0x5B76
    78b4:	80 91 77 5b 	lds	r24, 0x5B77
    78b8:	90 91 78 5b 	lds	r25, 0x5B78
    78bc:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_WriteCRC();			// CRC
    78c0:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>

	f_sync(&Log_File);
    78c4:	87 ec       	ldi	r24, 0xC7	; 199
    78c6:	9e e4       	ldi	r25, 0x4E	; 78
    78c8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    78cc:	1f 91       	pop	r17
    78ce:	0f 91       	pop	r16
    78d0:	08 95       	ret

000078d2 <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    78d2:	1f 93       	push	r17
    78d4:	cf 93       	push	r28
    78d6:	df 93       	push	r29
    78d8:	18 2f       	mov	r17, r24
    78da:	8f ef       	ldi	r24, 0xFF	; 255
    78dc:	9f ef       	ldi	r25, 0xFF	; 255
    78de:	af ef       	ldi	r26, 0xFF	; 255
    78e0:	bf ef       	ldi	r27, 0xFF	; 255
    78e2:	80 93 9f 56 	sts	0x569F, r24
    78e6:	90 93 a0 56 	sts	0x56A0, r25
    78ea:	a0 93 a1 56 	sts	0x56A1, r26
    78ee:	b0 93 a2 56 	sts	0x56A2, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    78f2:	6c e4       	ldi	r22, 0x4C	; 76
    78f4:	74 e7       	ldi	r23, 0x74	; 116
    78f6:	8e ed       	ldi	r24, 0xDE	; 222
    78f8:	90 eb       	ldi	r25, 0xB0	; 176
    78fa:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(244);				// record size
    78fe:	64 ef       	ldi	r22, 0xF4	; 244
    7900:	70 e0       	ldi	r23, 0x00	; 0
    7902:	80 e0       	ldi	r24, 0x00	; 0
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(3); 		// record type
    790a:	83 e0       	ldi	r24, 0x03	; 3
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7912:	11 30       	cpi	r17, 0x01	; 1
    7914:	49 f4       	brne	.+18     	; 0x7928 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    7916:	60 91 28 33 	lds	r22, 0x3328
    791a:	70 91 29 33 	lds	r23, 0x3329
    791e:	80 91 2a 33 	lds	r24, 0x332A
    7922:	90 91 2b 33 	lds	r25, 0x332B
    7926:	08 c0       	rjmp	.+16     	; 0x7938 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    7928:	60 91 2c 33 	lds	r22, 0x332C
    792c:	70 91 2d 33 	lds	r23, 0x332D
    7930:	80 91 2e 33 	lds	r24, 0x332E
    7934:	90 91 2f 33 	lds	r25, 0x332F
    7938:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    793c:	60 e0       	ldi	r22, 0x00	; 0
    793e:	70 e2       	ldi	r23, 0x20	; 32
    7940:	8c e1       	ldi	r24, 0x1C	; 28
    7942:	90 e0       	ldi	r25, 0x00	; 0
    7944:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(10);												// number of samples
    7948:	6a e0       	ldi	r22, 0x0A	; 10
    794a:	70 e0       	ldi	r23, 0x00	; 0
    794c:	80 e0       	ldi	r24, 0x00	; 0
    794e:	90 e0       	ldi	r25, 0x00	; 0
    7950:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_WriteString("Light_Green");
    7954:	8a e4       	ldi	r24, 0x4A	; 74
    7956:	90 e2       	ldi	r25, 0x20	; 32
    7958:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    795c:	89 e0       	ldi	r24, 0x09	; 9
    795e:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("32");
    7962:	8d e3       	ldi	r24, 0x3D	; 61
    7964:	90 e2       	ldi	r25, 0x20	; 32
    7966:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    796a:	8a e0       	ldi	r24, 0x0A	; 10
    796c:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("Light_Red");
    7970:	86 e5       	ldi	r24, 0x56	; 86
    7972:	90 e2       	ldi	r25, 0x20	; 32
    7974:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7978:	89 e0       	ldi	r24, 0x09	; 9
    797a:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("32");
    797e:	8d e3       	ldi	r24, 0x3D	; 61
    7980:	90 e2       	ldi	r25, 0x20	; 32
    7982:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    7986:	8a e0       	ldi	r24, 0x0A	; 10
    7988:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("Light_Blue");
    798c:	80 e6       	ldi	r24, 0x60	; 96
    798e:	90 e2       	ldi	r25, 0x20	; 32
    7990:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7994:	89 e0       	ldi	r24, 0x09	; 9
    7996:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("32");
    799a:	8d e3       	ldi	r24, 0x3D	; 61
    799c:	90 e2       	ldi	r25, 0x20	; 32
    799e:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    79a2:	8a e0       	ldi	r24, 0x0A	; 10
    79a4:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("Light_Clear");
    79a8:	8b e6       	ldi	r24, 0x6B	; 107
    79aa:	90 e2       	ldi	r25, 0x20	; 32
    79ac:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    79b0:	89 e0       	ldi	r24, 0x09	; 9
    79b2:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("32");
    79b6:	8d e3       	ldi	r24, 0x3D	; 61
    79b8:	90 e2       	ldi	r25, 0x20	; 32
    79ba:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    79be:	8a e0       	ldi	r24, 0x0A	; 10
    79c0:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	SD_Write8(0x00);
    79c4:	80 e0       	ldi	r24, 0x00	; 0
    79c6:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	if(bufferNumber == 1){
    79ca:	11 30       	cpi	r17, 0x01	; 1
    79cc:	69 f4       	brne	.+26     	; 0x79e8 <SD_WriteLightBuffer+0x116>
    79ce:	c3 ea       	ldi	r28, 0xA3	; 163
    79d0:	da e5       	ldi	r29, 0x5A	; 90
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    79d2:	69 91       	ld	r22, Y+
    79d4:	79 91       	ld	r23, Y+
    79d6:	89 91       	ld	r24, Y+
    79d8:	99 91       	ld	r25, Y+
    79da:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    79de:	8b e5       	ldi	r24, 0x5B	; 91
    79e0:	c3 34       	cpi	r28, 0x43	; 67
    79e2:	d8 07       	cpc	r29, r24
    79e4:	b1 f7       	brne	.-20     	; 0x79d2 <SD_WriteLightBuffer+0x100>
    79e6:	0c c0       	rjmp	.+24     	; 0x7a00 <SD_WriteLightBuffer+0x12e>
    79e8:	c9 e0       	ldi	r28, 0x09	; 9
    79ea:	d5 e4       	ldi	r29, 0x45	; 69
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    79ec:	69 91       	ld	r22, Y+
    79ee:	79 91       	ld	r23, Y+
    79f0:	89 91       	ld	r24, Y+
    79f2:	99 91       	ld	r25, Y+
    79f4:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    79f8:	85 e4       	ldi	r24, 0x45	; 69
    79fa:	c9 3a       	cpi	r28, 0xA9	; 169
    79fc:	d8 07       	cpc	r29, r24
    79fe:	b1 f7       	brne	.-20     	; 0x79ec <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7a00:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>

	f_sync(&Log_File);
    7a04:	87 ec       	ldi	r24, 0xC7	; 199
    7a06:	9e e4       	ldi	r25, 0x4E	; 78
    7a08:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    7a0c:	df 91       	pop	r29
    7a0e:	cf 91       	pop	r28
    7a10:	1f 91       	pop	r17
    7a12:	08 95       	ret

00007a14 <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    7a14:	1f 93       	push	r17
    7a16:	18 2f       	mov	r17, r24
    7a18:	8f ef       	ldi	r24, 0xFF	; 255
    7a1a:	9f ef       	ldi	r25, 0xFF	; 255
    7a1c:	af ef       	ldi	r26, 0xFF	; 255
    7a1e:	bf ef       	ldi	r27, 0xFF	; 255
    7a20:	80 93 9f 56 	sts	0x569F, r24
    7a24:	90 93 a0 56 	sts	0x56A0, r25
    7a28:	a0 93 a1 56 	sts	0x56A1, r26
    7a2c:	b0 93 a2 56 	sts	0x56A2, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7a30:	6c e4       	ldi	r22, 0x4C	; 76
    7a32:	74 e7       	ldi	r23, 0x74	; 116
    7a34:	8e ed       	ldi	r24, 0xDE	; 222
    7a36:	90 eb       	ldi	r25, 0xB0	; 176
    7a38:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    7a3c:	60 e1       	ldi	r22, 0x10	; 16
    7a3e:	74 e0       	ldi	r23, 0x04	; 4
    7a40:	80 e0       	ldi	r24, 0x00	; 0
    7a42:	90 e0       	ldi	r25, 0x00	; 0
    7a44:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(3); 									// record type
    7a48:	83 e0       	ldi	r24, 0x03	; 3
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7a50:	11 30       	cpi	r17, 0x01	; 1
    7a52:	49 f4       	brne	.+18     	; 0x7a66 <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    7a54:	60 91 20 33 	lds	r22, 0x3320
    7a58:	70 91 21 33 	lds	r23, 0x3321
    7a5c:	80 91 22 33 	lds	r24, 0x3322
    7a60:	90 91 23 33 	lds	r25, 0x3323
    7a64:	08 c0       	rjmp	.+16     	; 0x7a76 <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    7a66:	60 91 24 33 	lds	r22, 0x3324
    7a6a:	70 91 25 33 	lds	r23, 0x3325
    7a6e:	80 91 26 33 	lds	r24, 0x3326
    7a72:	90 91 27 33 	lds	r25, 0x3327
    7a76:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    7a7a:	60 e0       	ldi	r22, 0x00	; 0
    7a7c:	71 e0       	ldi	r23, 0x01	; 1
    7a7e:	80 e0       	ldi	r24, 0x00	; 0
    7a80:	90 e0       	ldi	r25, 0x00	; 0
    7a82:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    7a86:	68 ee       	ldi	r22, 0xE8	; 232
    7a88:	73 e0       	ldi	r23, 0x03	; 3
    7a8a:	80 e0       	ldi	r24, 0x00	; 0
    7a8c:	90 e0       	ldi	r25, 0x00	; 0
    7a8e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_WriteString("Microphone");
    7a92:	87 e7       	ldi	r24, 0x77	; 119
    7a94:	90 e2       	ldi	r25, 0x20	; 32
    7a96:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7a9a:	89 e0       	ldi	r24, 0x09	; 9
    7a9c:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("8");
    7aa0:	82 e8       	ldi	r24, 0x82	; 130
    7aa2:	90 e2       	ldi	r25, 0x20	; 32
    7aa4:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    7aa8:	8a e0       	ldi	r24, 0x0A	; 10
    7aaa:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_Write8(0x00);
    7aae:	80 e0       	ldi	r24, 0x00	; 0
    7ab0:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	if(bufferNumber == 1){
    7ab4:	11 30       	cpi	r17, 0x01	; 1
    7ab6:	19 f4       	brne	.+6      	; 0x7abe <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    7ab8:	89 ea       	ldi	r24, 0xA9	; 169
    7aba:	95 e4       	ldi	r25, 0x45	; 69
    7abc:	02 c0       	rjmp	.+4      	; 0x7ac2 <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    7abe:	8d ed       	ldi	r24, 0xDD	; 221
    7ac0:	90 e4       	ldi	r25, 0x40	; 64
    7ac2:	68 ee       	ldi	r22, 0xE8	; 232
    7ac4:	73 e0       	ldi	r23, 0x03	; 3
    7ac6:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    7aca:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>

	f_sync(&Log_File);
    7ace:	87 ec       	ldi	r24, 0xC7	; 199
    7ad0:	9e e4       	ldi	r25, 0x4E	; 78
    7ad2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    7ad6:	1f 91       	pop	r17
    7ad8:	08 95       	ret

00007ada <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    7ada:	1f 93       	push	r17
    7adc:	cf 93       	push	r28
    7ade:	df 93       	push	r29
    7ae0:	18 2f       	mov	r17, r24
    7ae2:	8f ef       	ldi	r24, 0xFF	; 255
    7ae4:	9f ef       	ldi	r25, 0xFF	; 255
    7ae6:	af ef       	ldi	r26, 0xFF	; 255
    7ae8:	bf ef       	ldi	r27, 0xFF	; 255
    7aea:	80 93 9f 56 	sts	0x569F, r24
    7aee:	90 93 a0 56 	sts	0x56A0, r25
    7af2:	a0 93 a1 56 	sts	0x56A1, r26
    7af6:	b0 93 a2 56 	sts	0x56A2, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7afa:	6c e4       	ldi	r22, 0x4C	; 76
    7afc:	74 e7       	ldi	r23, 0x74	; 116
    7afe:	8e ed       	ldi	r24, 0xDE	; 222
    7b00:	90 eb       	ldi	r25, 0xB0	; 176
    7b02:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(48);				// record size
    7b06:	60 e3       	ldi	r22, 0x30	; 48
    7b08:	70 e0       	ldi	r23, 0x00	; 0
    7b0a:	80 e0       	ldi	r24, 0x00	; 0
    7b0c:	90 e0       	ldi	r25, 0x00	; 0
    7b0e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(3); 		// record type
    7b12:	83 e0       	ldi	r24, 0x03	; 3
    7b14:	90 e0       	ldi	r25, 0x00	; 0
    7b16:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7b1a:	11 30       	cpi	r17, 0x01	; 1
    7b1c:	49 f4       	brne	.+18     	; 0x7b30 <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    7b1e:	60 91 18 33 	lds	r22, 0x3318
    7b22:	70 91 19 33 	lds	r23, 0x3319
    7b26:	80 91 1a 33 	lds	r24, 0x331A
    7b2a:	90 91 1b 33 	lds	r25, 0x331B
    7b2e:	08 c0       	rjmp	.+16     	; 0x7b40 <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    7b30:	60 91 1c 33 	lds	r22, 0x331C
    7b34:	70 91 1d 33 	lds	r23, 0x331D
    7b38:	80 91 1e 33 	lds	r24, 0x331E
    7b3c:	90 91 1f 33 	lds	r25, 0x331F
    7b40:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7b44:	60 e0       	ldi	r22, 0x00	; 0
    7b46:	70 e2       	ldi	r23, 0x20	; 32
    7b48:	8c e1       	ldi	r24, 0x1C	; 28
    7b4a:	90 e0       	ldi	r25, 0x00	; 0
    7b4c:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(10);												// number of samples
    7b50:	6a e0       	ldi	r22, 0x0A	; 10
    7b52:	70 e0       	ldi	r23, 0x00	; 0
    7b54:	80 e0       	ldi	r24, 0x00	; 0
    7b56:	90 e0       	ldi	r25, 0x00	; 0
    7b58:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_WriteString("Pressure");
    7b5c:	84 e8       	ldi	r24, 0x84	; 132
    7b5e:	90 e2       	ldi	r25, 0x20	; 32
    7b60:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7b64:	89 e0       	ldi	r24, 0x09	; 9
    7b66:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("8");
    7b6a:	82 e8       	ldi	r24, 0x82	; 130
    7b6c:	90 e2       	ldi	r25, 0x20	; 32
    7b6e:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    7b72:	8a e0       	ldi	r24, 0x0A	; 10
    7b74:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_Write8(0x00);
    7b78:	80 e0       	ldi	r24, 0x00	; 0
    7b7a:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	if(bufferNumber == 1){
    7b7e:	11 30       	cpi	r17, 0x01	; 1
    7b80:	51 f4       	brne	.+20     	; 0x7b96 <SD_WritePressureBuffer+0xbc>
    7b82:	cd e3       	ldi	r28, 0x3D	; 61
    7b84:	dc e3       	ldi	r29, 0x3C	; 60
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    7b86:	89 91       	ld	r24, Y+
    7b88:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7b8c:	8c e3       	ldi	r24, 0x3C	; 60
    7b8e:	c7 34       	cpi	r28, 0x47	; 71
    7b90:	d8 07       	cpc	r29, r24
    7b92:	c9 f7       	brne	.-14     	; 0x7b86 <SD_WritePressureBuffer+0xac>
    7b94:	09 c0       	rjmp	.+18     	; 0x7ba8 <SD_WritePressureBuffer+0xce>
    7b96:	cb e6       	ldi	r28, 0x6B	; 107
    7b98:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    7b9a:	89 91       	ld	r24, Y+
    7b9c:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7ba0:	8a e4       	ldi	r24, 0x4A	; 74
    7ba2:	c5 37       	cpi	r28, 0x75	; 117
    7ba4:	d8 07       	cpc	r29, r24
    7ba6:	c9 f7       	brne	.-14     	; 0x7b9a <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7ba8:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>

	f_sync(&Log_File);
    7bac:	87 ec       	ldi	r24, 0xC7	; 199
    7bae:	9e e4       	ldi	r25, 0x4E	; 78
    7bb0:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    7bb4:	df 91       	pop	r29
    7bb6:	cf 91       	pop	r28
    7bb8:	1f 91       	pop	r17
    7bba:	08 95       	ret

00007bbc <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    7bbc:	1f 93       	push	r17
    7bbe:	cf 93       	push	r28
    7bc0:	df 93       	push	r29
    7bc2:	18 2f       	mov	r17, r24
    7bc4:	8f ef       	ldi	r24, 0xFF	; 255
    7bc6:	9f ef       	ldi	r25, 0xFF	; 255
    7bc8:	af ef       	ldi	r26, 0xFF	; 255
    7bca:	bf ef       	ldi	r27, 0xFF	; 255
    7bcc:	80 93 9f 56 	sts	0x569F, r24
    7bd0:	90 93 a0 56 	sts	0x56A0, r25
    7bd4:	a0 93 a1 56 	sts	0x56A1, r26
    7bd8:	b0 93 a2 56 	sts	0x56A2, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7bdc:	6c e4       	ldi	r22, 0x4C	; 76
    7bde:	74 e7       	ldi	r23, 0x74	; 116
    7be0:	8e ed       	ldi	r24, 0xDE	; 222
    7be2:	90 eb       	ldi	r25, 0xB0	; 176
    7be4:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(48);				// record size
    7be8:	60 e3       	ldi	r22, 0x30	; 48
    7bea:	70 e0       	ldi	r23, 0x00	; 0
    7bec:	80 e0       	ldi	r24, 0x00	; 0
    7bee:	90 e0       	ldi	r25, 0x00	; 0
    7bf0:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(3); 		// record type
    7bf4:	83 e0       	ldi	r24, 0x03	; 3
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7bfc:	11 30       	cpi	r17, 0x01	; 1
    7bfe:	49 f4       	brne	.+18     	; 0x7c12 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    7c00:	60 91 10 33 	lds	r22, 0x3310
    7c04:	70 91 11 33 	lds	r23, 0x3311
    7c08:	80 91 12 33 	lds	r24, 0x3312
    7c0c:	90 91 13 33 	lds	r25, 0x3313
    7c10:	08 c0       	rjmp	.+16     	; 0x7c22 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    7c12:	60 91 14 33 	lds	r22, 0x3314
    7c16:	70 91 15 33 	lds	r23, 0x3315
    7c1a:	80 91 16 33 	lds	r24, 0x3316
    7c1e:	90 91 17 33 	lds	r25, 0x3317
    7c22:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7c26:	60 e0       	ldi	r22, 0x00	; 0
    7c28:	70 e2       	ldi	r23, 0x20	; 32
    7c2a:	8c e1       	ldi	r24, 0x1C	; 28
    7c2c:	90 e0       	ldi	r25, 0x00	; 0
    7c2e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(10);												// number of samples
    7c32:	6a e0       	ldi	r22, 0x0A	; 10
    7c34:	70 e0       	ldi	r23, 0x00	; 0
    7c36:	80 e0       	ldi	r24, 0x00	; 0
    7c38:	90 e0       	ldi	r25, 0x00	; 0
    7c3a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>

	SD_WriteString("Humidity");
    7c3e:	8d e8       	ldi	r24, 0x8D	; 141
    7c40:	90 e2       	ldi	r25, 0x20	; 32
    7c42:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7c46:	89 e0       	ldi	r24, 0x09	; 9
    7c48:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("8");
    7c4c:	82 e8       	ldi	r24, 0x82	; 130
    7c4e:	90 e2       	ldi	r25, 0x20	; 32
    7c50:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    7c54:	8a e0       	ldi	r24, 0x0A	; 10
    7c56:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_Write8(0x00);
    7c5a:	80 e0       	ldi	r24, 0x00	; 0
    7c5c:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	if(bufferNumber == 1){
    7c60:	11 30       	cpi	r17, 0x01	; 1
    7c62:	51 f4       	brne	.+20     	; 0x7c78 <SD_WriteHumidityBuffer+0xbc>
    7c64:	c8 ea       	ldi	r28, 0xA8	; 168
    7c66:	da e4       	ldi	r29, 0x4A	; 74
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    7c68:	89 91       	ld	r24, Y+
    7c6a:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7c6e:	8a e4       	ldi	r24, 0x4A	; 74
    7c70:	c2 3b       	cpi	r28, 0xB2	; 178
    7c72:	d8 07       	cpc	r29, r24
    7c74:	c9 f7       	brne	.-14     	; 0x7c68 <SD_WriteHumidityBuffer+0xac>
    7c76:	09 c0       	rjmp	.+18     	; 0x7c8a <SD_WriteHumidityBuffer+0xce>
    7c78:	c1 e4       	ldi	r28, 0x41	; 65
    7c7a:	d3 e5       	ldi	r29, 0x53	; 83
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    7c7c:	89 91       	ld	r24, Y+
    7c7e:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7c82:	83 e5       	ldi	r24, 0x53	; 83
    7c84:	cb 34       	cpi	r28, 0x4B	; 75
    7c86:	d8 07       	cpc	r29, r24
    7c88:	c9 f7       	brne	.-14     	; 0x7c7c <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7c8a:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>

	f_sync(&Log_File);
    7c8e:	87 ec       	ldi	r24, 0xC7	; 199
    7c90:	9e e4       	ldi	r25, 0x4E	; 78
    7c92:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    7c96:	df 91       	pop	r29
    7c98:	cf 91       	pop	r28
    7c9a:	1f 91       	pop	r17
    7c9c:	08 95       	ret

00007c9e <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    7c9e:	1f 93       	push	r17
    7ca0:	cf 93       	push	r28
    7ca2:	df 93       	push	r29
    7ca4:	18 2f       	mov	r17, r24
    7ca6:	8f ef       	ldi	r24, 0xFF	; 255
    7ca8:	9f ef       	ldi	r25, 0xFF	; 255
    7caa:	af ef       	ldi	r26, 0xFF	; 255
    7cac:	bf ef       	ldi	r27, 0xFF	; 255
    7cae:	80 93 9f 56 	sts	0x569F, r24
    7cb2:	90 93 a0 56 	sts	0x56A0, r25
    7cb6:	a0 93 a1 56 	sts	0x56A1, r26
    7cba:	b0 93 a2 56 	sts	0x56A2, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7cbe:	6c e4       	ldi	r22, 0x4C	; 76
    7cc0:	74 e7       	ldi	r23, 0x74	; 116
    7cc2:	8e ed       	ldi	r24, 0xDE	; 222
    7cc4:	90 eb       	ldi	r25, 0xB0	; 176
    7cc6:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(62);				// record size  
    7cca:	6e e3       	ldi	r22, 0x3E	; 62
    7ccc:	70 e0       	ldi	r23, 0x00	; 0
    7cce:	80 e0       	ldi	r24, 0x00	; 0
    7cd0:	90 e0       	ldi	r25, 0x00	; 0
    7cd2:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(3); 		// record type  
    7cd6:	83 e0       	ldi	r24, 0x03	; 3
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    7cde:	11 30       	cpi	r17, 0x01	; 1
    7ce0:	49 f4       	brne	.+18     	; 0x7cf4 <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    7ce2:	60 91 08 33 	lds	r22, 0x3308
    7ce6:	70 91 09 33 	lds	r23, 0x3309
    7cea:	80 91 0a 33 	lds	r24, 0x330A
    7cee:	90 91 0b 33 	lds	r25, 0x330B
    7cf2:	08 c0       	rjmp	.+16     	; 0x7d04 <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    7cf4:	60 91 0c 33 	lds	r22, 0x330C
    7cf8:	70 91 0d 33 	lds	r23, 0x330D
    7cfc:	80 91 0e 33 	lds	r24, 0x330E
    7d00:	90 91 0f 33 	lds	r25, 0x330F
    7d04:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7d08:	60 e0       	ldi	r22, 0x00	; 0
    7d0a:	70 e2       	ldi	r23, 0x20	; 32
    7d0c:	8c e1       	ldi	r24, 0x1C	; 28
    7d0e:	90 e0       	ldi	r25, 0x00	; 0
    7d10:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(10);												// number of samples
    7d14:	6a e0       	ldi	r22, 0x0A	; 10
    7d16:	70 e0       	ldi	r23, 0x00	; 0
    7d18:	80 e0       	ldi	r24, 0x00	; 0
    7d1a:	90 e0       	ldi	r25, 0x00	; 0
    7d1c:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
		
	SD_WriteString("Temperature");
    7d20:	86 e9       	ldi	r24, 0x96	; 150
    7d22:	90 e2       	ldi	r25, 0x20	; 32
    7d24:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    7d28:	89 e0       	ldi	r24, 0x09	; 9
    7d2a:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("16");
    7d2e:	82 ea       	ldi	r24, 0xA2	; 162
    7d30:	90 e2       	ldi	r25, 0x20	; 32
    7d32:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    7d36:	8a e0       	ldi	r24, 0x0A	; 10
    7d38:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_Write8(0x00);
    7d3c:	80 e0       	ldi	r24, 0x00	; 0
    7d3e:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	
	if(bufferNumber == 1){
    7d42:	11 30       	cpi	r17, 0x01	; 1
    7d44:	59 f4       	brne	.+22     	; 0x7d5c <SD_WriteTemperatureBuffer+0xbe>
    7d46:	c1 e9       	ldi	r28, 0x91	; 145
    7d48:	d9 e4       	ldi	r29, 0x49	; 73
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    7d4a:	89 91       	ld	r24, Y+
    7d4c:	99 91       	ld	r25, Y+
    7d4e:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7d52:	89 e4       	ldi	r24, 0x49	; 73
    7d54:	c5 3a       	cpi	r28, 0xA5	; 165
    7d56:	d8 07       	cpc	r29, r24
    7d58:	c1 f7       	brne	.-16     	; 0x7d4a <SD_WriteTemperatureBuffer+0xac>
    7d5a:	0a c0       	rjmp	.+20     	; 0x7d70 <SD_WriteTemperatureBuffer+0xd2>
    7d5c:	cc e3       	ldi	r28, 0x3C	; 60
    7d5e:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    7d60:	89 91       	ld	r24, Y+
    7d62:	99 91       	ld	r25, Y+
    7d64:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7d68:	8a e4       	ldi	r24, 0x4A	; 74
    7d6a:	c0 35       	cpi	r28, 0x50	; 80
    7d6c:	d8 07       	cpc	r29, r24
    7d6e:	c1 f7       	brne	.-16     	; 0x7d60 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    7d70:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7d74:	87 ec       	ldi	r24, 0xC7	; 199
    7d76:	9e e4       	ldi	r25, 0x4E	; 78
    7d78:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

}
    7d7c:	df 91       	pop	r29
    7d7e:	cf 91       	pop	r28
    7d80:	1f 91       	pop	r17
    7d82:	08 95       	ret

00007d84 <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    7d84:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7d86:	dc 01       	movw	r26, r24
    7d88:	0d 90       	ld	r0, X+
    7d8a:	00 20       	and	r0, r0
    7d8c:	e9 f7       	brne	.-6      	; 0x7d88 <Rs232_SendString+0x4>
    7d8e:	11 97       	sbiw	r26, 0x01	; 1
    7d90:	a8 1b       	sub	r26, r24
    7d92:	b9 0b       	sbc	r27, r25
    7d94:	90 e0       	ldi	r25, 0x00	; 0
    7d96:	0a c0       	rjmp	.+20     	; 0x7dac <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    7d98:	e2 0f       	add	r30, r18
    7d9a:	f3 1f       	adc	r31, r19
    7d9c:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7d9e:	80 91 a1 09 	lds	r24, 0x09A1
    7da2:	85 ff       	sbrs	r24, 5
    7da4:	fc cf       	rjmp	.-8      	; 0x7d9e <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    7da6:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7daa:	9f 5f       	subi	r25, 0xFF	; 255
    7dac:	e9 2f       	mov	r30, r25
    7dae:	f0 e0       	ldi	r31, 0x00	; 0
    7db0:	ea 17       	cp	r30, r26
    7db2:	fb 07       	cpc	r31, r27
    7db4:	88 f3       	brcs	.-30     	; 0x7d98 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    7db6:	66 23       	and	r22, r22
    7db8:	71 f0       	breq	.+28     	; 0x7dd6 <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7dba:	80 91 a1 09 	lds	r24, 0x09A1
    7dbe:	85 ff       	sbrs	r24, 5
    7dc0:	fc cf       	rjmp	.-8      	; 0x7dba <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    7dc2:	8d e0       	ldi	r24, 0x0D	; 13
    7dc4:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7dc8:	80 91 a1 09 	lds	r24, 0x09A1
    7dcc:	85 ff       	sbrs	r24, 5
    7dce:	fc cf       	rjmp	.-8      	; 0x7dc8 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    7dd0:	8a e0       	ldi	r24, 0x0A	; 10
    7dd2:	80 93 a0 09 	sts	0x09A0, r24
    7dd6:	08 95       	ret

00007dd8 <Debug_SendString>:
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
}

void Debug_SendString(char string [],bool CR){
    7dd8:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7dda:	dc 01       	movw	r26, r24
    7ddc:	0d 90       	ld	r0, X+
    7dde:	00 20       	and	r0, r0
    7de0:	e9 f7       	brne	.-6      	; 0x7ddc <Debug_SendString+0x4>
    7de2:	11 97       	sbiw	r26, 0x01	; 1
    7de4:	a8 1b       	sub	r26, r24
    7de6:	b9 0b       	sbc	r27, r25
    7de8:	90 e0       	ldi	r25, 0x00	; 0
    7dea:	0c c0       	rjmp	.+24     	; 0x7e04 <Debug_SendString+0x2c>
		Debug_SendByte(string[i]);
    7dec:	e2 0f       	add	r30, r18
    7dee:	f3 1f       	adc	r31, r19
    7df0:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7df2:	80 91 a1 08 	lds	r24, 0x08A1
    7df6:	85 ff       	sbrs	r24, 5
    7df8:	fc cf       	rjmp	.-8      	; 0x7df2 <Debug_SendString+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7dfa:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7dfe:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7e02:	9f 5f       	subi	r25, 0xFF	; 255
    7e04:	e9 2f       	mov	r30, r25
    7e06:	f0 e0       	ldi	r31, 0x00	; 0
    7e08:	ea 17       	cp	r30, r26
    7e0a:	fb 07       	cpc	r31, r27
    7e0c:	78 f3       	brcs	.-34     	; 0x7dec <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    7e0e:	66 23       	and	r22, r22
    7e10:	91 f0       	breq	.+36     	; 0x7e36 <Debug_SendString+0x5e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7e12:	80 91 a1 08 	lds	r24, 0x08A1
    7e16:	85 ff       	sbrs	r24, 5
    7e18:	fc cf       	rjmp	.-8      	; 0x7e12 <Debug_SendString+0x3a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e1a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e1e:	8d e0       	ldi	r24, 0x0D	; 13
    7e20:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7e24:	80 91 a1 08 	lds	r24, 0x08A1
    7e28:	85 ff       	sbrs	r24, 5
    7e2a:	fc cf       	rjmp	.-8      	; 0x7e24 <Debug_SendString+0x4c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e2c:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e30:	8a e0       	ldi	r24, 0x0A	; 10
    7e32:	80 93 a0 08 	sts	0x08A0, r24
    7e36:	08 95       	ret

00007e38 <Debug_To_Wifi>:
	}
}


void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
    7e38:	85 ea       	ldi	r24, 0xA5	; 165
    7e3a:	90 e2       	ldi	r25, 0x20	; 32
    7e3c:	61 e0       	ldi	r22, 0x01	; 1
    7e3e:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    7e42:	20 91 3c 33 	lds	r18, 0x333C
    7e46:	30 91 3d 33 	lds	r19, 0x333D
    7e4a:	80 91 3a 33 	lds	r24, 0x333A
    7e4e:	90 91 3b 33 	lds	r25, 0x333B
    7e52:	28 17       	cp	r18, r24
    7e54:	39 07       	cpc	r19, r25
    7e56:	49 f0       	breq	.+18     	; 0x7e6a <Debug_To_Wifi+0x32>
	while(1){
		if(Debug_CharReadyToRead()){
		    while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    7e58:	80 91 a1 0a 	lds	r24, 0x0AA1
    7e5c:	85 ff       	sbrs	r24, 5
    7e5e:	fc cf       	rjmp	.-8      	; 0x7e58 <Debug_To_Wifi+0x20>
            Wifi_Usart.DATA = Debug_GetByte(true);
    7e60:	81 e0       	ldi	r24, 0x01	; 1
    7e62:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
    7e66:	80 93 a0 0a 	sts	0x0AA0, r24
		}
		if(Wifi_CharReadyToRead()){
    7e6a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    7e6e:	88 23       	and	r24, r24
    7e70:	41 f3       	breq	.-48     	; 0x7e42 <Debug_To_Wifi+0xa>
			Debug_SendByte(Wifi_GetByte(true));
    7e72:	81 e0       	ldi	r24, 0x01	; 1
    7e74:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    7e78:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7e7a:	80 91 a1 08 	lds	r24, 0x08A1
    7e7e:	85 ff       	sbrs	r24, 5
    7e80:	fc cf       	rjmp	.-8      	; 0x7e7a <Debug_To_Wifi+0x42>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e82:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e86:	90 93 a0 08 	sts	0x08A0, r25
    7e8a:	db cf       	rjmp	.-74     	; 0x7e42 <Debug_To_Wifi+0xa>

00007e8c <Wifi_SendByte>:
	}
	return tmp;
}


uint16_t Wifi_SendByte(uint8_t data){
    7e8c:	48 2f       	mov	r20, r24
    PORTB.OUTSET = (1 << 4);
    7e8e:	80 e1       	ldi	r24, 0x10	; 16
    7e90:	e0 e2       	ldi	r30, 0x20	; 32
    7e92:	f6 e0       	ldi	r31, 0x06	; 6
    7e94:	85 83       	std	Z+5, r24	; 0x05
    timeOutCounter = 0;
    7e96:	10 92 52 33 	sts	0x3352, r1
    7e9a:	10 92 53 33 	sts	0x3353, r1
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    7e9e:	80 91 a1 0a 	lds	r24, 0x0AA1
    7ea2:	85 ff       	sbrs	r24, 5
    7ea4:	fc cf       	rjmp	.-8      	; 0x7e9e <Wifi_SendByte+0x12>
    7ea6:	23 c0       	rjmp	.+70     	; 0x7eee <Wifi_SendByte+0x62>
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
        timeOutCounter++;
    7ea8:	80 91 52 33 	lds	r24, 0x3352
    7eac:	90 91 53 33 	lds	r25, 0x3353
    7eb0:	01 96       	adiw	r24, 0x01	; 1
    7eb2:	80 93 52 33 	sts	0x3352, r24
    7eb6:	90 93 53 33 	sts	0x3353, r25
    7eba:	c9 01       	movw	r24, r18
    7ebc:	01 97       	sbiw	r24, 0x01	; 1
    7ebe:	f1 f7       	brne	.-4      	; 0x7ebc <Wifi_SendByte+0x30>
        _delay_ms(1);
        if(timeOutCounter > 60000){
    7ec0:	80 91 52 33 	lds	r24, 0x3352
    7ec4:	90 91 53 33 	lds	r25, 0x3353
    7ec8:	81 56       	subi	r24, 0x61	; 97
    7eca:	9a 4e       	sbci	r25, 0xEA	; 234
    7ecc:	90 f0       	brcs	.+36     	; 0x7ef2 <Wifi_SendByte+0x66>
           Wifi_Usart.DATA = data;
    7ece:	40 93 a0 0a 	sts	0x0AA0, r20
           Debug_SendString("Hanging",true);
    7ed2:	83 eb       	ldi	r24, 0xB3	; 179
    7ed4:	90 e2       	ldi	r25, 0x20	; 32
    7ed6:	61 e0       	ldi	r22, 0x01	; 1
    7ed8:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
           PORTB.OUTCLR = (1 << 4);
    7edc:	80 e1       	ldi	r24, 0x10	; 16
    7ede:	e0 e2       	ldi	r30, 0x20	; 32
    7ee0:	f6 e0       	ldi	r31, 0x06	; 6
    7ee2:	86 83       	std	Z+6, r24	; 0x06
           return timeOutCounter;
    7ee4:	20 91 52 33 	lds	r18, 0x3352
    7ee8:	30 91 53 33 	lds	r19, 0x3353
    7eec:	11 c0       	rjmp	.+34     	; 0x7f10 <Wifi_SendByte+0x84>
    7eee:	26 e6       	ldi	r18, 0x66	; 102
    7ef0:	3e e0       	ldi	r19, 0x0E	; 14

uint16_t Wifi_SendByte(uint8_t data){
    PORTB.OUTSET = (1 << 4);
    timeOutCounter = 0;
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
    7ef2:	80 91 68 06 	lds	r24, 0x0668
    7ef6:	81 fd       	sbrc	r24, 1
    7ef8:	d7 cf       	rjmp	.-82     	; 0x7ea8 <Wifi_SendByte+0x1c>
           PORTB.OUTCLR = (1 << 4);
           return timeOutCounter;
        }
    }                              // Wait for RTS to be low

    Wifi_Usart.DATA = data;
    7efa:	40 93 a0 0a 	sts	0x0AA0, r20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7efe:	8a e7       	ldi	r24, 0x7A	; 122
    7f00:	8a 95       	dec	r24
    7f02:	f1 f7       	brne	.-4      	; 0x7f00 <Wifi_SendByte+0x74>
    _delay_us(25);
    PORTB.OUTCLR = (1 << 4);
    7f04:	80 e1       	ldi	r24, 0x10	; 16
    7f06:	e0 e2       	ldi	r30, 0x20	; 32
    7f08:	f6 e0       	ldi	r31, 0x06	; 6
    7f0a:	86 83       	std	Z+6, r24	; 0x06
    7f0c:	20 e0       	ldi	r18, 0x00	; 0
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
}
    7f10:	c9 01       	movw	r24, r18
    7f12:	08 95       	ret

00007f14 <Uploader_SendByte>:
    } else {
        Debug_ClearBuffer();
    }
}

uint16_t Uploader_SendByte(uint8_t data){
    7f14:	98 2f       	mov	r25, r24
    if(useWifiForUploading){
    7f16:	80 91 39 33 	lds	r24, 0x3339
    7f1a:	88 23       	and	r24, r24
    7f1c:	29 f0       	breq	.+10     	; 0x7f28 <Uploader_SendByte+0x14>
        return Wifi_SendByte(data);
    7f1e:	89 2f       	mov	r24, r25
    7f20:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <Wifi_SendByte>
    7f24:	9c 01       	movw	r18, r24
    7f26:	0a c0       	rjmp	.+20     	; 0x7f3c <Uploader_SendByte+0x28>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7f28:	80 91 a1 08 	lds	r24, 0x08A1
    7f2c:	85 ff       	sbrs	r24, 5
    7f2e:	fc cf       	rjmp	.-8      	; 0x7f28 <Uploader_SendByte+0x14>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7f30:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7f34:	90 93 a0 08 	sts	0x08A0, r25
    7f38:	20 e0       	ldi	r18, 0x00	; 0
    7f3a:	30 e0       	ldi	r19, 0x00	; 0
    } else {
        Debug_SendByte(data);
        return 0;
    }

}
    7f3c:	c9 01       	movw	r24, r18
    7f3e:	08 95       	ret

00007f40 <Wifi_SendString>:

void Wifi_SendString(char string [],bool CR){
    7f40:	ef 92       	push	r14
    7f42:	ff 92       	push	r15
    7f44:	0f 93       	push	r16
    7f46:	1f 93       	push	r17
    7f48:	cf 93       	push	r28
    7f4a:	df 93       	push	r29
    7f4c:	8c 01       	movw	r16, r24
    7f4e:	e6 2e       	mov	r14, r22
    7f50:	ff 24       	eor	r15, r15
    7f52:	06 c0       	rjmp	.+12     	; 0x7f60 <Wifi_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Wifi_SendByte(string[i]);
    7f54:	c0 0f       	add	r28, r16
    7f56:	d1 1f       	adc	r29, r17
    7f58:	88 81       	ld	r24, Y
    7f5a:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <Wifi_SendByte>
    PORTB.OUTCLR = (1 << 4);
    return 0;
}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7f5e:	f3 94       	inc	r15
    7f60:	cf 2d       	mov	r28, r15
    7f62:	d0 e0       	ldi	r29, 0x00	; 0
    7f64:	f8 01       	movw	r30, r16
    7f66:	01 90       	ld	r0, Z+
    7f68:	00 20       	and	r0, r0
    7f6a:	e9 f7       	brne	.-6      	; 0x7f66 <Wifi_SendString+0x26>
    7f6c:	31 97       	sbiw	r30, 0x01	; 1
    7f6e:	e0 1b       	sub	r30, r16
    7f70:	f1 0b       	sbc	r31, r17
    7f72:	ce 17       	cp	r28, r30
    7f74:	df 07       	cpc	r29, r31
    7f76:	70 f3       	brcs	.-36     	; 0x7f54 <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

    if(CR){
    7f78:	ee 20       	and	r14, r14
    7f7a:	31 f0       	breq	.+12     	; 0x7f88 <Wifi_SendString+0x48>
		Wifi_SendByte(13);
    7f7c:	8d e0       	ldi	r24, 0x0D	; 13
    7f7e:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <Wifi_SendByte>
		Wifi_SendByte(10);
    7f82:	8a e0       	ldi	r24, 0x0A	; 10
    7f84:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <Wifi_SendByte>
	}
}
    7f88:	df 91       	pop	r29
    7f8a:	cf 91       	pop	r28
    7f8c:	1f 91       	pop	r17
    7f8e:	0f 91       	pop	r16
    7f90:	ff 90       	pop	r15
    7f92:	ef 90       	pop	r14
    7f94:	08 95       	ret

00007f96 <Uploader_SendString>:

void Uploader_SendString(char string [],bool CR){
    7f96:	9c 01       	movw	r18, r24
     if(useWifiForUploading){
    7f98:	80 91 39 33 	lds	r24, 0x3339
    7f9c:	88 23       	and	r24, r24
    7f9e:	21 f0       	breq	.+8      	; 0x7fa8 <Uploader_SendString+0x12>
        Wifi_SendString(string,CR);
    7fa0:	c9 01       	movw	r24, r18
    7fa2:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <Wifi_SendString>
    7fa6:	08 95       	ret
    } else {
        Debug_SendString(string,CR);
    7fa8:	c9 01       	movw	r24, r18
    7faa:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    7fae:	08 95       	ret

00007fb0 <Wifi_EnterCMDMode>:

bool Wifi_EnterCMDMode(uint16_t timeOut){
    7fb0:	8f 92       	push	r8
    7fb2:	9f 92       	push	r9
    7fb4:	af 92       	push	r10
    7fb6:	bf 92       	push	r11
    7fb8:	cf 92       	push	r12
    7fba:	df 92       	push	r13
    7fbc:	ff 92       	push	r15
    7fbe:	0f 93       	push	r16
    7fc0:	1f 93       	push	r17
    7fc2:	df 93       	push	r29
    7fc4:	cf 93       	push	r28
    7fc6:	00 d0       	rcall	.+0      	; 0x7fc8 <Wifi_EnterCMDMode+0x18>
    7fc8:	00 d0       	rcall	.+0      	; 0x7fca <Wifi_EnterCMDMode+0x1a>
    7fca:	cd b7       	in	r28, 0x3d	; 61
    7fcc:	de b7       	in	r29, 0x3e	; 62
    7fce:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    7fd0:	de 01       	movw	r26, r28
    7fd2:	14 96       	adiw	r26, 0x04	; 4
    7fd4:	ef eb       	ldi	r30, 0xBF	; 191
    7fd6:	f0 e2       	ldi	r31, 0x20	; 32
    7fd8:	83 e0       	ldi	r24, 0x03	; 3
    7fda:	01 90       	ld	r0, Z+
    7fdc:	0d 92       	st	X+, r0
    7fde:	81 50       	subi	r24, 0x01	; 1
    7fe0:	e1 f7       	brne	.-8      	; 0x7fda <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    7fe2:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    7fe6:	8b eb       	ldi	r24, 0xBB	; 187
    7fe8:	90 e2       	ldi	r25, 0x20	; 32
    7fea:	60 e0       	ldi	r22, 0x00	; 0
    7fec:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <Wifi_SendString>
    7ff0:	ff 24       	eor	r15, r15
    7ff2:	00 e0       	ldi	r16, 0x00	; 0
    7ff4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    7ff6:	4e 01       	movw	r8, r28
    7ff8:	08 94       	sec
    7ffa:	81 1c       	adc	r8, r1
    7ffc:	91 1c       	adc	r9, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7ffe:	a6 e6       	ldi	r26, 0x66	; 102
    8000:	aa 2e       	mov	r10, r26
    8002:	ae e0       	ldi	r26, 0x0E	; 14
    8004:	ba 2e       	mov	r11, r26
    8006:	23 c0       	rjmp	.+70     	; 0x804e <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    8008:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    800c:	88 23       	and	r24, r24
    800e:	d1 f0       	breq	.+52     	; 0x8044 <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    8010:	80 e0       	ldi	r24, 0x00	; 0
    8012:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    8016:	f4 01       	movw	r30, r8
    8018:	ef 0d       	add	r30, r15
    801a:	f1 1d       	adc	r31, r1
    801c:	80 83       	st	Z, r24
			j++;
    801e:	f3 94       	inc	r15
			if(j > 2){
    8020:	82 e0       	ldi	r24, 0x02	; 2
    8022:	8f 15       	cp	r24, r15
    8024:	78 f4       	brcc	.+30     	; 0x8044 <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    8026:	99 81       	ldd	r25, Y+1	; 0x01
    8028:	8c 81       	ldd	r24, Y+4	; 0x04
    802a:	98 17       	cp	r25, r24
    802c:	99 f4       	brne	.+38     	; 0x8054 <Wifi_EnterCMDMode+0xa4>
    802e:	9a 81       	ldd	r25, Y+2	; 0x02
    8030:	8d 81       	ldd	r24, Y+5	; 0x05
    8032:	98 17       	cp	r25, r24
    8034:	79 f4       	brne	.+30     	; 0x8054 <Wifi_EnterCMDMode+0xa4>
    8036:	20 e0       	ldi	r18, 0x00	; 0
    8038:	9b 81       	ldd	r25, Y+3	; 0x03
    803a:	8e 81       	ldd	r24, Y+6	; 0x06
    803c:	98 17       	cp	r25, r24
    803e:	59 f4       	brne	.+22     	; 0x8056 <Wifi_EnterCMDMode+0xa6>
    8040:	21 e0       	ldi	r18, 0x01	; 1
    8042:	09 c0       	rjmp	.+18     	; 0x8056 <Wifi_EnterCMDMode+0xa6>
    8044:	c5 01       	movw	r24, r10
    8046:	01 97       	sbiw	r24, 0x01	; 1
    8048:	f1 f7       	brne	.-4      	; 0x8046 <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    804a:	0f 5f       	subi	r16, 0xFF	; 255
    804c:	1f 4f       	sbci	r17, 0xFF	; 255
    804e:	0c 15       	cp	r16, r12
    8050:	1d 05       	cpc	r17, r13
    8052:	d0 f2       	brcs	.-76     	; 0x8008 <Wifi_EnterCMDMode+0x58>
    8054:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8056:	82 2f       	mov	r24, r18
    8058:	26 96       	adiw	r28, 0x06	; 6
    805a:	cd bf       	out	0x3d, r28	; 61
    805c:	de bf       	out	0x3e, r29	; 62
    805e:	cf 91       	pop	r28
    8060:	df 91       	pop	r29
    8062:	1f 91       	pop	r17
    8064:	0f 91       	pop	r16
    8066:	ff 90       	pop	r15
    8068:	df 90       	pop	r13
    806a:	cf 90       	pop	r12
    806c:	bf 90       	pop	r11
    806e:	af 90       	pop	r10
    8070:	9f 90       	pop	r9
    8072:	8f 90       	pop	r8
    8074:	08 95       	ret

00008076 <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    8076:	2f 92       	push	r2
    8078:	3f 92       	push	r3
    807a:	5f 92       	push	r5
    807c:	6f 92       	push	r6
    807e:	7f 92       	push	r7
    8080:	8f 92       	push	r8
    8082:	9f 92       	push	r9
    8084:	af 92       	push	r10
    8086:	bf 92       	push	r11
    8088:	cf 92       	push	r12
    808a:	df 92       	push	r13
    808c:	ef 92       	push	r14
    808e:	ff 92       	push	r15
    8090:	0f 93       	push	r16
    8092:	1f 93       	push	r17
    8094:	df 93       	push	r29
    8096:	cf 93       	push	r28
    8098:	cd b7       	in	r28, 0x3d	; 61
    809a:	de b7       	in	r29, 0x3e	; 62
    809c:	e2 97       	sbiw	r28, 0x32	; 50
    809e:	cd bf       	out	0x3d, r28	; 61
    80a0:	de bf       	out	0x3e, r29	; 62
    80a2:	08 2f       	mov	r16, r24
    80a4:	d9 2e       	mov	r13, r25
    80a6:	c6 2e       	mov	r12, r22
    80a8:	77 2e       	mov	r7, r23
    80aa:	64 2e       	mov	r6, r20
    80ac:	55 2e       	mov	r5, r21
    80ae:	19 01       	movw	r2, r18
    char response [50];

	respLen = 0;
    80b0:	10 92 42 33 	sts	0x3342, r1
	toSendLen = strlen(toSend);
    80b4:	a8 2f       	mov	r26, r24
    80b6:	b9 2f       	mov	r27, r25
    80b8:	fd 01       	movw	r30, r26
    80ba:	01 90       	ld	r0, Z+
    80bc:	00 20       	and	r0, r0
    80be:	e9 f7       	brne	.-6      	; 0x80ba <Wifi_SendCommand+0x44>
    80c0:	31 97       	sbiw	r30, 0x01	; 1
    80c2:	ea 1b       	sub	r30, r26
    80c4:	fb 0b       	sbc	r31, r27
    80c6:	e0 93 43 33 	sts	0x3343, r30
	if(strlen(ok) > strlen(ok2)){
    80ca:	e6 2f       	mov	r30, r22
    80cc:	f7 2f       	mov	r31, r23
    80ce:	df 01       	movw	r26, r30
    80d0:	0d 90       	ld	r0, X+
    80d2:	00 20       	and	r0, r0
    80d4:	e9 f7       	brne	.-6      	; 0x80d0 <Wifi_SendCommand+0x5a>
    80d6:	cd 01       	movw	r24, r26
    80d8:	01 97       	sbiw	r24, 0x01	; 1
    80da:	8e 1b       	sub	r24, r30
    80dc:	9f 0b       	sbc	r25, r31
    80de:	e4 2f       	mov	r30, r20
    80e0:	f5 2f       	mov	r31, r21
    80e2:	df 01       	movw	r26, r30
    80e4:	0d 90       	ld	r0, X+
    80e6:	00 20       	and	r0, r0
    80e8:	e9 f7       	brne	.-6      	; 0x80e4 <Wifi_SendCommand+0x6e>
    80ea:	11 97       	sbiw	r26, 0x01	; 1
    80ec:	ae 1b       	sub	r26, r30
    80ee:	bf 0b       	sbc	r27, r31
    80f0:	a8 17       	cp	r26, r24
    80f2:	b9 07       	cpc	r27, r25
    80f4:	18 f4       	brcc	.+6      	; 0x80fc <Wifi_SendCommand+0x86>
		okLen = strlen(ok2);
    80f6:	a0 93 44 33 	sts	0x3344, r26
    80fa:	02 c0       	rjmp	.+4      	; 0x8100 <Wifi_SendCommand+0x8a>
	} else {
		okLen = strlen(ok);
    80fc:	80 93 44 33 	sts	0x3344, r24
	}
    Wifi_SendString("",true);
    8100:	83 ec       	ldi	r24, 0xC3	; 195
    8102:	90 e2       	ldi	r25, 0x20	; 32
    8104:	61 e0       	ldi	r22, 0x01	; 1
    8106:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <Wifi_SendString>
	Debug_SendString("-----------------",true);
    810a:	84 ec       	ldi	r24, 0xC4	; 196
    810c:	90 e2       	ldi	r25, 0x20	; 32
    810e:	61 e0       	ldi	r22, 0x01	; 1
    8110:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
	Debug_SendString("Command: ",false);
    8114:	86 ed       	ldi	r24, 0xD6	; 214
    8116:	90 e2       	ldi	r25, 0x20	; 32
    8118:	60 e0       	ldi	r22, 0x00	; 0
    811a:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
	Debug_SendString(toSend,true);
    811e:	80 2f       	mov	r24, r16
    8120:	9d 2d       	mov	r25, r13
    8122:	61 e0       	ldi	r22, 0x01	; 1
    8124:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
	Wifi_ClearBuffer();
    8128:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    812c:	80 2f       	mov	r24, r16
    812e:	9d 2d       	mov	r25, r13
    8130:	61 e0       	ldi	r22, 0x01	; 1
    8132:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <Wifi_SendString>
    8136:	ee 24       	eor	r14, r14
    8138:	ff 24       	eor	r15, r15
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
			response[respLen] = Wifi_GetByte(false);
    813a:	4e 01       	movw	r8, r28
    813c:	08 94       	sec
    813e:	81 1c       	adc	r8, r1
    8140:	91 1c       	adc	r9, r1
    8142:	b6 e6       	ldi	r27, 0x66	; 102
    8144:	ab 2e       	mov	r10, r27
    8146:	be e0       	ldi	r27, 0x0E	; 14
    8148:	bb 2e       	mov	r11, r27
    814a:	88 c0       	rjmp	.+272    	; 0x825c <Wifi_SendCommand+0x1e6>
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    814c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    8150:	88 23       	and	r24, r24
    8152:	09 f4       	brne	.+2      	; 0x8156 <Wifi_SendCommand+0xe0>
    8154:	7d c0       	rjmp	.+250    	; 0x8250 <Wifi_SendCommand+0x1da>
			response[respLen] = Wifi_GetByte(false);
    8156:	10 91 42 33 	lds	r17, 0x3342
    815a:	80 e0       	ldi	r24, 0x00	; 0
    815c:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    8160:	f4 01       	movw	r30, r8
    8162:	e1 0f       	add	r30, r17
    8164:	f1 1d       	adc	r31, r1
    8166:	80 83       	st	Z, r24
			respLen++;
    8168:	80 91 42 33 	lds	r24, 0x3342
    816c:	8f 5f       	subi	r24, 0xFF	; 255
    816e:	80 93 42 33 	sts	0x3342, r24
			if(respLen == okLen + toSendLen + 3){		
    8172:	20 91 42 33 	lds	r18, 0x3342
    8176:	40 91 44 33 	lds	r20, 0x3344
    817a:	80 91 43 33 	lds	r24, 0x3343
    817e:	30 e0       	ldi	r19, 0x00	; 0
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	84 0f       	add	r24, r20
    8184:	91 1d       	adc	r25, r1
    8186:	03 96       	adiw	r24, 0x03	; 3
    8188:	28 17       	cp	r18, r24
    818a:	39 07       	cpc	r19, r25
    818c:	09 f0       	breq	.+2      	; 0x8190 <Wifi_SendCommand+0x11a>
    818e:	60 c0       	rjmp	.+192    	; 0x8250 <Wifi_SendCommand+0x1da>
				
				Debug_SendString("Response: ",false);
    8190:	80 ee       	ldi	r24, 0xE0	; 224
    8192:	90 e2       	ldi	r25, 0x20	; 32
    8194:	60 e0       	ldi	r22, 0x00	; 0
    8196:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    819a:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(response[j]);
    819c:	9e 01       	movw	r18, r28
    819e:	2f 5f       	subi	r18, 0xFF	; 255
    81a0:	3f 4f       	sbci	r19, 0xFF	; 255
    81a2:	0d c0       	rjmp	.+26     	; 0x81be <Wifi_SendCommand+0x148>
    81a4:	f9 01       	movw	r30, r18
    81a6:	e9 0f       	add	r30, r25
    81a8:	f1 1d       	adc	r31, r1
    81aa:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    81ac:	80 91 a1 08 	lds	r24, 0x08A1
    81b0:	85 ff       	sbrs	r24, 5
    81b2:	fc cf       	rjmp	.-8      	; 0x81ac <Wifi_SendCommand+0x136>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    81b4:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81b8:	e0 93 a0 08 	sts	0x08A0, r30
			response[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Response: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    81bc:	9f 5f       	subi	r25, 0xFF	; 255
    81be:	80 91 42 33 	lds	r24, 0x3342
    81c2:	98 17       	cp	r25, r24
    81c4:	78 f3       	brcs	.-34     	; 0x81a4 <Wifi_SendCommand+0x12e>
					Debug_SendByte(response[j]);
				}
				Debug_SendString(", want: \"",false);
    81c6:	8b ee       	ldi	r24, 0xEB	; 235
    81c8:	90 e2       	ldi	r25, 0x20	; 32
    81ca:	60 e0       	ldi	r22, 0x00	; 0
    81cc:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
				Debug_SendString(ok,false);
    81d0:	8c 2d       	mov	r24, r12
    81d2:	97 2d       	mov	r25, r7
    81d4:	60 e0       	ldi	r22, 0x00	; 0
    81d6:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    81da:	80 91 a1 08 	lds	r24, 0x08A1
    81de:	85 ff       	sbrs	r24, 5
    81e0:	fc cf       	rjmp	.-8      	; 0x81da <Wifi_SendCommand+0x164>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    81e2:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81e6:	82 e2       	ldi	r24, 0x22	; 34
    81e8:	80 93 a0 08 	sts	0x08A0, r24
				Debug_SendByte('"');
				Debug_SendString(", or: \"",false);
    81ec:	85 ef       	ldi	r24, 0xF5	; 245
    81ee:	90 e2       	ldi	r25, 0x20	; 32
    81f0:	60 e0       	ldi	r22, 0x00	; 0
    81f2:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
				Debug_SendString(ok2,false);
    81f6:	86 2d       	mov	r24, r6
    81f8:	95 2d       	mov	r25, r5
    81fa:	60 e0       	ldi	r22, 0x00	; 0
    81fc:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
				Debug_SendString("\"",true);
    8200:	8d ef       	ldi	r24, 0xFD	; 253
    8202:	90 e2       	ldi	r25, 0x20	; 32
    8204:	61 e0       	ldi	r22, 0x01	; 1
    8206:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
				
				if(strstr(response,toSend) == 0){     // make sure the command is present in the response
    820a:	7e 01       	movw	r14, r28
    820c:	08 94       	sec
    820e:	e1 1c       	adc	r14, r1
    8210:	f1 1c       	adc	r15, r1
    8212:	c7 01       	movw	r24, r14
    8214:	60 2f       	mov	r22, r16
    8216:	7d 2d       	mov	r23, r13
    8218:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    821c:	00 97       	sbiw	r24, 0x00	; 0
    821e:	19 f4       	brne	.+6      	; 0x8226 <Wifi_SendCommand+0x1b0>
				   Debug_SendString("Command NOT found in response",true);
    8220:	8f ef       	ldi	r24, 0xFF	; 255
    8222:	90 e2       	ldi	r25, 0x20	; 32
    8224:	10 c0       	rjmp	.+32     	; 0x8246 <Wifi_SendCommand+0x1d0>
				   return false;
				}   else {
				   //Debug_SendString("Command found in response",true);
				}

				if(strstr(response,ok) != 0){                   // check for ok response 1
    8226:	c7 01       	movw	r24, r14
    8228:	6c 2d       	mov	r22, r12
    822a:	77 2d       	mov	r23, r7
    822c:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    8230:	00 97       	sbiw	r24, 0x00	; 0
    8232:	c9 f4       	brne	.+50     	; 0x8266 <Wifi_SendCommand+0x1f0>
				    //Debug_SendString("ok response 1 found",true);
				    return true;
				} else {
				    if(strstr(response,ok2) != 0){              // check for ok response 1
    8234:	c7 01       	movw	r24, r14
    8236:	66 2d       	mov	r22, r6
    8238:	75 2d       	mov	r23, r5
    823a:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    823e:	00 97       	sbiw	r24, 0x00	; 0
    8240:	91 f4       	brne	.+36     	; 0x8266 <Wifi_SendCommand+0x1f0>
				        //Debug_SendString("ok response 2 found",true);
				        return true;
				    } else {
				        Debug_SendString("NO ok resonses found",true);
    8242:	8d e1       	ldi	r24, 0x1D	; 29
    8244:	91 e2       	ldi	r25, 0x21	; 33
    8246:	61 e0       	ldi	r22, 0x01	; 1
    8248:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    824c:	80 e0       	ldi	r24, 0x00	; 0
    824e:	0c c0       	rjmp	.+24     	; 0x8268 <Wifi_SendCommand+0x1f2>
    8250:	c5 01       	movw	r24, r10
    8252:	01 97       	sbiw	r24, 0x01	; 1
    8254:	f1 f7       	brne	.-4      	; 0x8252 <Wifi_SendCommand+0x1dc>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    8256:	08 94       	sec
    8258:	e1 1c       	adc	r14, r1
    825a:	f1 1c       	adc	r15, r1
    825c:	e2 14       	cp	r14, r2
    825e:	f3 04       	cpc	r15, r3
    8260:	08 f4       	brcc	.+2      	; 0x8264 <Wifi_SendCommand+0x1ee>
    8262:	74 cf       	rjmp	.-280    	; 0x814c <Wifi_SendCommand+0xd6>
    8264:	f3 cf       	rjmp	.-26     	; 0x824c <Wifi_SendCommand+0x1d6>
    8266:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8268:	e2 96       	adiw	r28, 0x32	; 50
    826a:	cd bf       	out	0x3d, r28	; 61
    826c:	de bf       	out	0x3e, r29	; 62
    826e:	cf 91       	pop	r28
    8270:	df 91       	pop	r29
    8272:	1f 91       	pop	r17
    8274:	0f 91       	pop	r16
    8276:	ff 90       	pop	r15
    8278:	ef 90       	pop	r14
    827a:	df 90       	pop	r13
    827c:	cf 90       	pop	r12
    827e:	bf 90       	pop	r11
    8280:	af 90       	pop	r10
    8282:	9f 90       	pop	r9
    8284:	8f 90       	pop	r8
    8286:	7f 90       	pop	r7
    8288:	6f 90       	pop	r6
    828a:	5f 90       	pop	r5
    828c:	3f 90       	pop	r3
    828e:	2f 90       	pop	r2
    8290:	08 95       	ret

00008292 <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
    8292:	cf 92       	push	r12
    8294:	df 92       	push	r13
    8296:	ef 92       	push	r14
    8298:	ff 92       	push	r15
    829a:	1f 93       	push	r17
    829c:	cf 93       	push	r28
    829e:	df 93       	push	r29
    82a0:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    82a2:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    82a6:	82 e3       	ldi	r24, 0x32	; 50
    82a8:	91 e2       	ldi	r25, 0x21	; 33
    82aa:	6a e3       	ldi	r22, 0x3A	; 58
    82ac:	71 e2       	ldi	r23, 0x21	; 33
    82ae:	ab 01       	movw	r20, r22
    82b0:	97 01       	movw	r18, r14
    82b2:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    82b6:	10 e0       	ldi	r17, 0x00	; 0
    82b8:	c0 e0       	ldi	r28, 0x00	; 0
    82ba:	d0 e0       	ldi	r29, 0x00	; 0
    82bc:	86 e6       	ldi	r24, 0x66	; 102
    82be:	c8 2e       	mov	r12, r24
    82c0:	8e e0       	ldi	r24, 0x0E	; 14
    82c2:	d8 2e       	mov	r13, r24
    82c4:	1f c0       	rjmp	.+62     	; 0x8304 <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    82c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    82ca:	88 23       	and	r24, r24
    82cc:	b9 f0       	breq	.+46     	; 0x82fc <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    82ce:	80 e0       	ldi	r24, 0x00	; 0
    82d0:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    82d4:	e1 2f       	mov	r30, r17
    82d6:	f0 e0       	ldi	r31, 0x00	; 0
    82d8:	ef 50       	subi	r30, 0x0F	; 15
    82da:	fb 4b       	sbci	r31, 0xBB	; 187
    82dc:	80 83       	st	Z, r24
			tmp++;
    82de:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    82e0:	11 31       	cpi	r17, 0x11	; 17
    82e2:	61 f4       	brne	.+24     	; 0x82fc <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    82e4:	84 e4       	ldi	r24, 0x44	; 68
    82e6:	91 e2       	ldi	r25, 0x21	; 33
    82e8:	60 e0       	ldi	r22, 0x00	; 0
    82ea:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
				Debug_SendString(macAddr,true);
    82ee:	81 ef       	ldi	r24, 0xF1	; 241
    82f0:	94 e4       	ldi	r25, 0x44	; 68
    82f2:	61 e0       	ldi	r22, 0x01	; 1
    82f4:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    82f8:	81 e0       	ldi	r24, 0x01	; 1
    82fa:	08 c0       	rjmp	.+16     	; 0x830c <Wifi_GetMac+0x7a>
    82fc:	c6 01       	movw	r24, r12
    82fe:	01 97       	sbiw	r24, 0x01	; 1
    8300:	f1 f7       	brne	.-4      	; 0x82fe <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    8302:	21 96       	adiw	r28, 0x01	; 1
    8304:	ce 15       	cp	r28, r14
    8306:	df 05       	cpc	r29, r15
    8308:	f0 f2       	brcs	.-68     	; 0x82c6 <Wifi_GetMac+0x34>
    830a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    830c:	df 91       	pop	r29
    830e:	cf 91       	pop	r28
    8310:	1f 91       	pop	r17
    8312:	ff 90       	pop	r15
    8314:	ef 90       	pop	r14
    8316:	df 90       	pop	r13
    8318:	cf 90       	pop	r12
    831a:	08 95       	ret

0000831c <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    831c:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    831e:	42 e5       	ldi	r20, 0x52	; 82
    8320:	51 e2       	ldi	r21, 0x21	; 33
    8322:	8d e4       	ldi	r24, 0x4D	; 77
    8324:	91 e2       	ldi	r25, 0x21	; 33
    8326:	ba 01       	movw	r22, r20
    8328:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    832c:	08 95       	ret

0000832e <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    832e:	0f 93       	push	r16
    8330:	1f 93       	push	r17
	fileName[0] = '/';
    8332:	0d ed       	ldi	r16, 0xDD	; 221
    8334:	14 e4       	ldi	r17, 0x44	; 68
    8336:	2f e2       	ldi	r18, 0x2F	; 47
    8338:	20 93 dd 44 	sts	0x44DD, r18
	ltoa(var, fileName+1, 16);
    833c:	a8 01       	movw	r20, r16
    833e:	4f 5f       	subi	r20, 0xFF	; 255
    8340:	5f 4f       	sbci	r21, 0xFF	; 255
    8342:	20 e1       	ldi	r18, 0x10	; 16
    8344:	30 e0       	ldi	r19, 0x00	; 0
    8346:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <ltoa>
	strcat(fileName, ".bt");
    834a:	c8 01       	movw	r24, r16
    834c:	67 e5       	ldi	r22, 0x57	; 87
    834e:	71 e2       	ldi	r23, 0x21	; 33
    8350:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
}
    8354:	1f 91       	pop	r17
    8356:	0f 91       	pop	r16
    8358:	08 95       	ret

0000835a <__vector_77>:

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(TCD0_OVF_vect){
    835a:	1f 92       	push	r1
    835c:	0f 92       	push	r0
    835e:	0f b6       	in	r0, 0x3f	; 63
    8360:	0f 92       	push	r0
    8362:	0b b6       	in	r0, 0x3b	; 59
    8364:	0f 92       	push	r0
    8366:	11 24       	eor	r1, r1
    8368:	af 92       	push	r10
    836a:	bf 92       	push	r11
    836c:	cf 92       	push	r12
    836e:	df 92       	push	r13
    8370:	ef 92       	push	r14
    8372:	ff 92       	push	r15
    8374:	0f 93       	push	r16
    8376:	1f 93       	push	r17
    8378:	2f 93       	push	r18
    837a:	3f 93       	push	r19
    837c:	4f 93       	push	r20
    837e:	5f 93       	push	r21
    8380:	6f 93       	push	r22
    8382:	7f 93       	push	r23
    8384:	8f 93       	push	r24
    8386:	9f 93       	push	r25
    8388:	af 93       	push	r26
    838a:	bf 93       	push	r27
    838c:	ef 93       	push	r30
    838e:	ff 93       	push	r31

    if(okToDisplayGUI){
    8390:	80 91 9b 33 	lds	r24, 0x339B
    8394:	88 23       	and	r24, r24
    8396:	09 f4       	brne	.+2      	; 0x839a <__vector_77+0x40>
    8398:	b9 c5       	rjmp	.+2930   	; 0x8f0c <__vector_77+0xbb2>
        ssRefreshCounter++;
    839a:	80 91 92 33 	lds	r24, 0x3392
    839e:	90 91 93 33 	lds	r25, 0x3393
    83a2:	01 96       	adiw	r24, 0x01	; 1
    83a4:	80 93 92 33 	sts	0x3392, r24
    83a8:	90 93 93 33 	sts	0x3393, r25

        if(recording){
    83ac:	80 91 6d 33 	lds	r24, 0x336D
    83b0:	88 23       	and	r24, r24
    83b2:	09 f4       	brne	.+2      	; 0x83b6 <__vector_77+0x5c>
    83b4:	43 c0       	rjmp	.+134    	; 0x843c <__vector_77+0xe2>
            if(recordFileRestartCounter == 0){
    83b6:	80 91 bc 33 	lds	r24, 0x33BC
    83ba:	88 23       	and	r24, r24
    83bc:	d1 f5       	brne	.+116    	; 0x8432 <__vector_77+0xd8>
                if(UNIX_time > timeToStopRecording){
    83be:	20 91 68 33 	lds	r18, 0x3368
    83c2:	30 91 69 33 	lds	r19, 0x3369
    83c6:	40 91 6a 33 	lds	r20, 0x336A
    83ca:	50 91 6b 33 	lds	r21, 0x336B
    83ce:	80 91 bd 33 	lds	r24, 0x33BD
    83d2:	90 91 be 33 	lds	r25, 0x33BE
    83d6:	a0 91 bf 33 	lds	r26, 0x33BF
    83da:	b0 91 c0 33 	lds	r27, 0x33C0
    83de:	82 17       	cp	r24, r18
    83e0:	93 07       	cpc	r25, r19
    83e2:	a4 07       	cpc	r26, r20
    83e4:	b5 07       	cpc	r27, r21
    83e6:	28 f5       	brcc	.+74     	; 0x8432 <__vector_77+0xd8>
	                restartingFile = true;
    83e8:	81 e0       	ldi	r24, 0x01	; 1
    83ea:	80 93 a8 33 	sts	0x33A8, r24
	                recordFileRestartCounter = 0;
    83ee:	10 92 bc 33 	sts	0x33BC, r1
		            rs232Recording = false;
    83f2:	10 92 62 33 	sts	0x3362, r1
                    recording = false;
    83f6:	10 92 6d 33 	sts	0x336D, r1
	                okToCloseLogFile = true;
    83fa:	80 93 9a 33 	sts	0x339A, r24
	                while(okToCloseLogFile);
    83fe:	80 91 9a 33 	lds	r24, 0x339A
    8402:	88 23       	and	r24, r24
    8404:	e1 f7       	brne	.-8      	; 0x83fe <__vector_77+0xa4>
	                if(percentDiskUsed < 950){
    8406:	80 91 d2 33 	lds	r24, 0x33D2
    840a:	90 91 d3 33 	lds	r25, 0x33D3
    840e:	a0 91 d4 33 	lds	r26, 0x33D4
    8412:	b0 91 d5 33 	lds	r27, 0x33D5
    8416:	86 5b       	subi	r24, 0xB6	; 182
    8418:	93 40       	sbci	r25, 0x03	; 3
    841a:	a0 40       	sbci	r26, 0x00	; 0
    841c:	b0 40       	sbci	r27, 0x00	; 0
    841e:	38 f4       	brcc	.+14     	; 0x842e <__vector_77+0xd4>
                        okToOpenLogFile = true;
    8420:	81 e0       	ldi	r24, 0x01	; 1
    8422:	80 93 98 33 	sts	0x3398, r24
	                    while(!recording);
    8426:	80 91 6d 33 	lds	r24, 0x336D
    842a:	88 23       	and	r24, r24
    842c:	e1 f3       	breq	.-8      	; 0x8426 <__vector_77+0xcc>
	                }
	                restartingFile = false;
    842e:	10 92 a8 33 	sts	0x33A8, r1
	            }
	        }
	        recordFileRestartCounter++;
    8432:	80 91 bc 33 	lds	r24, 0x33BC
    8436:	8f 5f       	subi	r24, 0xFF	; 255
    8438:	80 93 bc 33 	sts	0x33BC, r24


	// controls


        if(currentMode == recordMode && Dpad_CheckButton(Down)){
    843c:	80 91 91 33 	lds	r24, 0x3391
    8440:	88 23       	and	r24, r24
    8442:	29 f4       	brne	.+10     	; 0x844e <__vector_77+0xf4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8444:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8448:	8c 77       	andi	r24, 0x7C	; 124
    844a:	83 ff       	sbrs	r24, 3
    844c:	14 c5       	rjmp	.+2600   	; 0x8e76 <__vector_77+0xb1c>
		    currentMode = sensorMode;
		    display_clearBuffer();
		    display_writeBufferToScreen();
	    } else if(currentMode == sensorMode && Dpad_CheckButton(Up)){
    844e:	80 91 91 33 	lds	r24, 0x3391
    8452:	81 30       	cpi	r24, 0x01	; 1
    8454:	69 f4       	brne	.+26     	; 0x8470 <__vector_77+0x116>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8456:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    845a:	8c 77       	andi	r24, 0x7C	; 124
    845c:	82 fd       	sbrc	r24, 2
    845e:	08 c0       	rjmp	.+16     	; 0x8470 <__vector_77+0x116>
    8460:	12 c5       	rjmp	.+2596   	; 0x8e86 <__vector_77+0xb2c>
    8462:	ca 01       	movw	r24, r20
    8464:	01 97       	sbiw	r24, 0x01	; 1
    8466:	f1 f7       	brne	.-4      	; 0x8464 <__vector_77+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8468:	21 50       	subi	r18, 0x01	; 1
    846a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    846c:	d1 f7       	brne	.-12     	; 0x8462 <__vector_77+0x108>
    846e:	29 c1       	rjmp	.+594    	; 0x86c2 <__vector_77+0x368>
		    currentMode = recordMode;
		    display_clearBuffer();
		    display_writeBufferToScreen();
		    _delay_ms(400);
	    } else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up) && !restartingFile){					// waiting to start recording
    8470:	80 91 91 33 	lds	r24, 0x3391
    8474:	88 23       	and	r24, r24
    8476:	f9 f4       	brne	.+62     	; 0x84b6 <__vector_77+0x15c>
    8478:	80 91 6d 33 	lds	r24, 0x336D
    847c:	88 23       	and	r24, r24
    847e:	d9 f4       	brne	.+54     	; 0x84b6 <__vector_77+0x15c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8480:	80 91 a8 06 	lds	r24, 0x06A8
    8484:	80 fd       	sbrc	r24, 0
    8486:	17 c0       	rjmp	.+46     	; 0x84b6 <__vector_77+0x15c>
    8488:	09 c5       	rjmp	.+2578   	; 0x8e9c <__vector_77+0xb42>
    848a:	80 91 a8 33 	lds	r24, 0x33A8
    848e:	88 23       	and	r24, r24
    8490:	91 f4       	brne	.+36     	; 0x84b6 <__vector_77+0x15c>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8492:	e0 e2       	ldi	r30, 0x20	; 32
    8494:	f6 e0       	ldi	r31, 0x06	; 6
    8496:	82 e0       	ldi	r24, 0x02	; 2
    8498:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    849a:	81 e0       	ldi	r24, 0x01	; 1
    849c:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Clear(sd_Red);
		    Leds_Set(sd_Green);
		    if(connected){
    849e:	80 91 4e 33 	lds	r24, 0x334E
    84a2:	88 23       	and	r24, r24
    84a4:	21 f0       	breq	.+8      	; 0x84ae <__vector_77+0x154>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    84a6:	80 e8       	ldi	r24, 0x80	; 128
    84a8:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    84aa:	80 e4       	ldi	r24, 0x40	; 64
    84ac:	7b c0       	rjmp	.+246    	; 0x85a4 <__vector_77+0x24a>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    84ae:	80 e4       	ldi	r24, 0x40	; 64
    84b0:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    84b2:	80 e8       	ldi	r24, 0x80	; 128
    84b4:	77 c0       	rjmp	.+238    	; 0x85a4 <__vector_77+0x24a>
                Leds_Set(wifi_Green);
		    } else {
		        Leds_Clear(wifi_Green);
                Leds_Set(wifi_Red);
		    }
	    } else if(currentMode == recordMode && !recording && !SD_Inserted()){
    84b6:	80 91 91 33 	lds	r24, 0x3391
    84ba:	88 23       	and	r24, r24
    84bc:	79 f4       	brne	.+30     	; 0x84dc <__vector_77+0x182>
    84be:	80 91 6d 33 	lds	r24, 0x336D
    84c2:	88 23       	and	r24, r24
    84c4:	59 f4       	brne	.+22     	; 0x84dc <__vector_77+0x182>
    84c6:	80 91 a8 06 	lds	r24, 0x06A8
    84ca:	80 ff       	sbrs	r24, 0
    84cc:	07 c0       	rjmp	.+14     	; 0x84dc <__vector_77+0x182>
    84ce:	e0 e2       	ldi	r30, 0x20	; 32
    84d0:	f6 e0       	ldi	r31, 0x06	; 6
    84d2:	82 e0       	ldi	r24, 0x02	; 2
    84d4:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    84d6:	81 e0       	ldi	r24, 0x01	; 1
    84d8:	86 83       	std	Z+6, r24	; 0x06
    84da:	f3 c0       	rjmp	.+486    	; 0x86c2 <__vector_77+0x368>
		    Leds_Set(sd_Red);
		    Leds_Clear(sd_Green);
	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){
    84dc:	80 91 91 33 	lds	r24, 0x3391
    84e0:	88 23       	and	r24, r24
    84e2:	09 f0       	breq	.+2      	; 0x84e6 <__vector_77+0x18c>
    84e4:	61 c0       	rjmp	.+194    	; 0x85a8 <__vector_77+0x24e>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    84e6:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    84ea:	8c 77       	andi	r24, 0x7C	; 124
    84ec:	82 fd       	sbrc	r24, 2
    84ee:	5c c0       	rjmp	.+184    	; 0x85a8 <__vector_77+0x24e>
    84f0:	db c4       	rjmp	.+2486   	; 0x8ea8 <__vector_77+0xb4e>
            if(percentDiskUsed < 950){
    84f2:	80 91 d2 33 	lds	r24, 0x33D2
    84f6:	90 91 d3 33 	lds	r25, 0x33D3
    84fa:	a0 91 d4 33 	lds	r26, 0x33D4
    84fe:	b0 91 d5 33 	lds	r27, 0x33D5
    8502:	86 5b       	subi	r24, 0xB6	; 182
    8504:	93 40       	sbci	r25, 0x03	; 3
    8506:	a0 40       	sbci	r26, 0x00	; 0
    8508:	b0 40       	sbci	r27, 0x00	; 0
    850a:	08 f0       	brcs	.+2      	; 0x850e <__vector_77+0x1b4>
    850c:	46 c0       	rjmp	.+140    	; 0x859a <__vector_77+0x240>
                display_putString("Recording      0m",0,0,System5x7);
    850e:	8b e5       	ldi	r24, 0x5B	; 91
    8510:	91 e2       	ldi	r25, 0x21	; 33
    8512:	60 e0       	ldi	r22, 0x00	; 0
    8514:	40 e0       	ldi	r20, 0x00	; 0
    8516:	23 ed       	ldi	r18, 0xD3	; 211
    8518:	30 e3       	ldi	r19, 0x30	; 48
    851a:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
                display_drawLine(1,60,7,60,true);		// up arrow
    851e:	81 e0       	ldi	r24, 0x01	; 1
    8520:	6c e3       	ldi	r22, 0x3C	; 60
    8522:	47 e0       	ldi	r20, 0x07	; 7
    8524:	2c e3       	ldi	r18, 0x3C	; 60
    8526:	01 e0       	ldi	r16, 0x01	; 1
    8528:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		        display_drawPixel(2,59,true);
    852c:	82 e0       	ldi	r24, 0x02	; 2
    852e:	6b e3       	ldi	r22, 0x3B	; 59
    8530:	41 e0       	ldi	r20, 0x01	; 1
    8532:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		        display_drawPixel(3,58,true);
    8536:	83 e0       	ldi	r24, 0x03	; 3
    8538:	6a e3       	ldi	r22, 0x3A	; 58
    853a:	41 e0       	ldi	r20, 0x01	; 1
    853c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
                display_drawPixel(2,61,true);
    8540:	82 e0       	ldi	r24, 0x02	; 2
    8542:	6d e3       	ldi	r22, 0x3D	; 61
    8544:	41 e0       	ldi	r20, 0x01	; 1
    8546:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
                display_drawPixel(3,62,true);
    854a:	83 e0       	ldi	r24, 0x03	; 3
    854c:	6e e3       	ldi	r22, 0x3E	; 62
    854e:	41 e0       	ldi	r20, 0x01	; 1
    8550:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		        display_writeBufferToScreen();
    8554:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>

                okToGetRemainingSpace = true;
    8558:	81 e0       	ldi	r24, 0x01	; 1
    855a:	80 93 b3 4a 	sts	0x4AB3, r24
                while(!okToGetRemainingSpace);
    855e:	80 91 b3 4a 	lds	r24, 0x4AB3
    8562:	88 23       	and	r24, r24
    8564:	e1 f3       	breq	.-8      	; 0x855e <__vector_77+0x204>
    8566:	e0 e2       	ldi	r30, 0x20	; 32
    8568:	f6 e0       	ldi	r31, 0x06	; 6
    856a:	91 e0       	ldi	r25, 0x01	; 1
    856c:	96 83       	std	Z+6, r25	; 0x06
		        Leds_Clear(wifi_Green);
		        Leds_Clear(wifi_Red);
		        Leds_Clear(ext_Green);
		        Leds_Clear(ext_Red);

                okToOpenLogFile = true;
    856e:	82 e0       	ldi	r24, 0x02	; 2
    8570:	86 83       	std	Z+6, r24	; 0x06
    8572:	80 e4       	ldi	r24, 0x40	; 64
    8574:	86 83       	std	Z+6, r24	; 0x06
    8576:	80 e8       	ldi	r24, 0x80	; 128
    8578:	86 83       	std	Z+6, r24	; 0x06
    857a:	80 e1       	ldi	r24, 0x10	; 16
    857c:	86 83       	std	Z+6, r24	; 0x06
    857e:	80 e2       	ldi	r24, 0x20	; 32
    8580:	86 83       	std	Z+6, r24	; 0x06
    8582:	90 93 98 33 	sts	0x3398, r25
    8586:	84 ef       	ldi	r24, 0xF4	; 244
    8588:	91 e0       	ldi	r25, 0x01	; 1
    858a:	20 e7       	ldi	r18, 0x70	; 112
    858c:	31 e0       	ldi	r19, 0x01	; 1
    858e:	f9 01       	movw	r30, r18
    8590:	31 97       	sbiw	r30, 0x01	; 1
    8592:	f1 f7       	brne	.-4      	; 0x8590 <__vector_77+0x236>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8594:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8596:	d9 f7       	brne	.-10     	; 0x858e <__vector_77+0x234>
    8598:	94 c0       	rjmp	.+296    	; 0x86c2 <__vector_77+0x368>
    859a:	e0 e2       	ldi	r30, 0x20	; 32
    859c:	f6 e0       	ldi	r31, 0x06	; 6
    859e:	81 e0       	ldi	r24, 0x01	; 1
    85a0:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    85a2:	82 e0       	ldi	r24, 0x02	; 2
    85a4:	85 83       	std	Z+5, r24	; 0x05
    85a6:	8d c0       	rjmp	.+282    	; 0x86c2 <__vector_77+0x368>
		        Leds_Set(sd_Red);

            }


	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){
    85a8:	80 91 91 33 	lds	r24, 0x3391
    85ac:	88 23       	and	r24, r24
    85ae:	09 f0       	breq	.+2      	; 0x85b2 <__vector_77+0x258>
    85b0:	88 c0       	rjmp	.+272    	; 0x86c2 <__vector_77+0x368>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    85b2:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    85b6:	8c 77       	andi	r24, 0x7C	; 124
    85b8:	82 fd       	sbrc	r24, 2
    85ba:	83 c0       	rjmp	.+262    	; 0x86c2 <__vector_77+0x368>
    85bc:	7b c4       	rjmp	.+2294   	; 0x8eb4 <__vector_77+0xb5a>
		    rs232Recording = false;
    85be:	10 92 62 33 	sts	0x3362, r1
		    recording = false;
    85c2:	10 92 6d 33 	sts	0x336D, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    85c6:	10 92 71 33 	sts	0x3371, r1
  	temperatureBufferToWriteTo = 1;
    85ca:	81 e0       	ldi	r24, 0x01	; 1
    85cc:	80 93 b8 2f 	sts	0x2FB8, r24
	okToSendTemperatureBuffer1 = false;
    85d0:	10 92 6f 33 	sts	0x336F, r1
	okToSendTemperatureBuffer2 = false;
    85d4:	10 92 70 33 	sts	0x3370, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    85d8:	10 92 77 33 	sts	0x3377, r1
	humidityBufferToWriteTo = 1;
    85dc:	80 93 ba 2f 	sts	0x2FBA, r24
	okToSendHumidityBuffer1 = false;
    85e0:	10 92 75 33 	sts	0x3375, r1
	okToSendHumidityBuffer2 = false;
    85e4:	10 92 76 33 	sts	0x3376, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    85e8:	10 92 74 33 	sts	0x3374, r1
	pressureBufferToWriteTo = 1;
    85ec:	80 93 b9 2f 	sts	0x2FB9, r24
	okToSendPressureBuffer1 = false;
    85f0:	10 92 72 33 	sts	0x3372, r1
	okToSendPressureBuffer2 = false;
    85f4:	10 92 73 33 	sts	0x3373, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    85f8:	10 92 7a 33 	sts	0x337A, r1
    85fc:	10 92 7b 33 	sts	0x337B, r1
	microphoneBufferToWriteTo = 1;
    8600:	80 93 bb 2f 	sts	0x2FBB, r24
	okToSendMicrophoneBuffer1 = false;
    8604:	10 92 78 33 	sts	0x3378, r1
	okToSendMicrophoneBuffer2 = false;
    8608:	10 92 79 33 	sts	0x3379, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    860c:	10 92 7e 33 	sts	0x337E, r1
	lightBufferToWriteTo = 1;
    8610:	80 93 bc 2f 	sts	0x2FBC, r24
	okToSendLightBuffer1 = false;
    8614:	10 92 7c 33 	sts	0x337C, r1
	okToSendLightBuffer2 = false;
    8618:	10 92 7d 33 	sts	0x337D, r1
		    Sensors_ResetTemperatureBuffers();
		    Sensors_ResetHumidityBuffers();
		    Sensors_ResetPressureBuffers();
		    Sensors_ResetMicrophoneBuffers();
		    Sensors_ResetLightBuffers();
		    okToCloseLogFile = true;
    861c:	80 93 9a 33 	sts	0x339A, r24


		    display_putString("Paused           ",0,0,System5x7);
    8620:	8d e6       	ldi	r24, 0x6D	; 109
    8622:	91 e2       	ldi	r25, 0x21	; 33
    8624:	60 e0       	ldi	r22, 0x00	; 0
    8626:	40 e0       	ldi	r20, 0x00	; 0
    8628:	23 ed       	ldi	r18, 0xD3	; 211
    862a:	30 e3       	ldi	r19, 0x30	; 48
    862c:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		    display_drawLine(1,60,7,60,true);		// up arrow
    8630:	81 e0       	ldi	r24, 0x01	; 1
    8632:	6c e3       	ldi	r22, 0x3C	; 60
    8634:	47 e0       	ldi	r20, 0x07	; 7
    8636:	2c e3       	ldi	r18, 0x3C	; 60
    8638:	01 e0       	ldi	r16, 0x01	; 1
    863a:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		    display_drawPixel(2,59,true);
    863e:	82 e0       	ldi	r24, 0x02	; 2
    8640:	6b e3       	ldi	r22, 0x3B	; 59
    8642:	41 e0       	ldi	r20, 0x01	; 1
    8644:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(3,58,true);
    8648:	83 e0       	ldi	r24, 0x03	; 3
    864a:	6a e3       	ldi	r22, 0x3A	; 58
    864c:	41 e0       	ldi	r20, 0x01	; 1
    864e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(2,61,true);
    8652:	82 e0       	ldi	r24, 0x02	; 2
    8654:	6d e3       	ldi	r22, 0x3D	; 61
    8656:	41 e0       	ldi	r20, 0x01	; 1
    8658:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(3,62,true);
    865c:	83 e0       	ldi	r24, 0x03	; 3
    865e:	6e e3       	ldi	r22, 0x3E	; 62
    8660:	41 e0       	ldi	r20, 0x01	; 1
    8662:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_writeBufferToScreen();
    8666:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>

            if(timeIsValid || demoMode){
    866a:	80 91 a9 33 	lds	r24, 0x33A9
    866e:	88 23       	and	r24, r24
    8670:	21 f4       	brne	.+8      	; 0x867a <__vector_77+0x320>
    8672:	80 91 38 33 	lds	r24, 0x3338
    8676:	88 23       	and	r24, r24
    8678:	11 f0       	breq	.+4      	; 0x867e <__vector_77+0x324>
    867a:	80 e4       	ldi	r24, 0x40	; 64
    867c:	01 c0       	rjmp	.+2      	; 0x8680 <__vector_77+0x326>
    867e:	80 e8       	ldi	r24, 0x80	; 128
    8680:	e0 e2       	ldi	r30, 0x20	; 32
    8682:	f6 e0       	ldi	r31, 0x06	; 6
    8684:	85 83       	std	Z+5, r24	; 0x05
    8686:	80 91 a8 06 	lds	r24, 0x06A8
    868a:	80 ff       	sbrs	r24, 0
    868c:	19 c4       	rjmp	.+2098   	; 0x8ec0 <__vector_77+0xb66>
    868e:	82 e0       	ldi	r24, 0x02	; 2
    8690:	e0 e2       	ldi	r30, 0x20	; 32
    8692:	f6 e0       	ldi	r31, 0x06	; 6
    8694:	85 83       	std	Z+5, r24	; 0x05
		    if(SD_Inserted()){
			    Leds_Set(sd_Green);
		    } else {
			    Leds_Set(sd_Red);
		    }
		    if(!chargeComplete && SD2_Inserted()){
    8696:	80 91 66 33 	lds	r24, 0x3366
    869a:	88 23       	and	r24, r24
    869c:	29 f4       	brne	.+10     	; 0x86a8 <__vector_77+0x34e>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    869e:	80 91 a8 06 	lds	r24, 0x06A8
    86a2:	81 fd       	sbrc	r24, 1
    86a4:	05 c0       	rjmp	.+10     	; 0x86b0 <__vector_77+0x356>
    86a6:	0e c4       	rjmp	.+2076   	; 0x8ec4 <__vector_77+0xb6a>
    86a8:	80 91 a8 06 	lds	r24, 0x06A8
    86ac:	81 ff       	sbrs	r24, 1
    86ae:	0f c4       	rjmp	.+2078   	; 0x8ece <__vector_77+0xb74>
    86b0:	88 e8       	ldi	r24, 0x88	; 136
    86b2:	93 e1       	ldi	r25, 0x13	; 19
    86b4:	20 e7       	ldi	r18, 0x70	; 112
    86b6:	31 e0       	ldi	r19, 0x01	; 1
    86b8:	f9 01       	movw	r30, r18
    86ba:	31 97       	sbiw	r30, 0x01	; 1
    86bc:	f1 f7       	brne	.-4      	; 0x86ba <__vector_77+0x360>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    86be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    86c0:	d9 f7       	brne	.-10     	; 0x86b8 <__vector_77+0x35e>
		    _delay_ms(500);
	    }

	// load displays

	    if(currentMode == recordMode){
    86c2:	80 91 91 33 	lds	r24, 0x3391
    86c6:	88 23       	and	r24, r24
    86c8:	09 f0       	breq	.+2      	; 0x86cc <__vector_77+0x372>
    86ca:	69 c2       	rjmp	.+1234   	; 0x8b9e <__vector_77+0x844>
		    if(recording){
    86cc:	80 91 6d 33 	lds	r24, 0x336D
    86d0:	88 23       	and	r24, r24
    86d2:	09 f4       	brne	.+2      	; 0x86d6 <__vector_77+0x37c>
    86d4:	40 c0       	rjmp	.+128    	; 0x8756 <__vector_77+0x3fc>
			    sprintf(temp2, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    86d6:	60 91 68 33 	lds	r22, 0x3368
    86da:	70 91 69 33 	lds	r23, 0x3369
    86de:	80 91 6a 33 	lds	r24, 0x336A
    86e2:	90 91 6b 33 	lds	r25, 0x336B
    86e6:	ad b7       	in	r26, 0x3d	; 61
    86e8:	be b7       	in	r27, 0x3e	; 62
    86ea:	18 97       	sbiw	r26, 0x08	; 8
    86ec:	ad bf       	out	0x3d, r26	; 61
    86ee:	be bf       	out	0x3e, r27	; 62
    86f0:	0d b7       	in	r16, 0x3d	; 61
    86f2:	1e b7       	in	r17, 0x3e	; 62
    86f4:	0f 5f       	subi	r16, 0xFF	; 255
    86f6:	1f 4f       	sbci	r17, 0xFF	; 255
    86f8:	2b ea       	ldi	r18, 0xAB	; 171
    86fa:	e2 2e       	mov	r14, r18
    86fc:	2c e3       	ldi	r18, 0x3C	; 60
    86fe:	f2 2e       	mov	r15, r18
    8700:	11 96       	adiw	r26, 0x01	; 1
    8702:	ed 92       	st	X+, r14
    8704:	fc 92       	st	X, r15
    8706:	12 97       	sbiw	r26, 0x02	; 2
    8708:	2f e7       	ldi	r18, 0x7F	; 127
    870a:	31 e2       	ldi	r19, 0x21	; 33
    870c:	f8 01       	movw	r30, r16
    870e:	22 83       	std	Z+2, r18	; 0x02
    8710:	33 83       	std	Z+3, r19	; 0x03
    8712:	20 91 34 33 	lds	r18, 0x3334
    8716:	30 91 35 33 	lds	r19, 0x3335
    871a:	40 91 36 33 	lds	r20, 0x3336
    871e:	50 91 37 33 	lds	r21, 0x3337
    8722:	62 1b       	sub	r22, r18
    8724:	73 0b       	sbc	r23, r19
    8726:	84 0b       	sbc	r24, r20
    8728:	95 0b       	sbc	r25, r21
    872a:	2c e3       	ldi	r18, 0x3C	; 60
    872c:	30 e0       	ldi	r19, 0x00	; 0
    872e:	40 e0       	ldi	r20, 0x00	; 0
    8730:	50 e0       	ldi	r21, 0x00	; 0
    8732:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    8736:	d8 01       	movw	r26, r16
    8738:	14 96       	adiw	r26, 0x04	; 4
    873a:	2d 93       	st	X+, r18
    873c:	3d 93       	st	X+, r19
    873e:	4d 93       	st	X+, r20
    8740:	5c 93       	st	X, r21
    8742:	17 97       	sbiw	r26, 0x07	; 7
    8744:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
			    display_putString(temp2,0,0,System5x7);
    8748:	ed b7       	in	r30, 0x3d	; 61
    874a:	fe b7       	in	r31, 0x3e	; 62
    874c:	38 96       	adiw	r30, 0x08	; 8
    874e:	ed bf       	out	0x3d, r30	; 61
    8750:	fe bf       	out	0x3e, r31	; 62
    8752:	c7 01       	movw	r24, r14
    8754:	02 c0       	rjmp	.+4      	; 0x875a <__vector_77+0x400>
		    } else {
			    display_putString("Paused           ",0,0,System5x7);
    8756:	8d e6       	ldi	r24, 0x6D	; 109
    8758:	91 e2       	ldi	r25, 0x21	; 33
    875a:	60 e0       	ldi	r22, 0x00	; 0
    875c:	40 e0       	ldi	r20, 0x00	; 0
    875e:	23 ed       	ldi	r18, 0xD3	; 211
    8760:	30 e3       	ldi	r19, 0x30	; 48
    8762:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		    }

		    display_drawLine(1,60,7,60,true);		// up arrow
    8766:	81 e0       	ldi	r24, 0x01	; 1
    8768:	6c e3       	ldi	r22, 0x3C	; 60
    876a:	47 e0       	ldi	r20, 0x07	; 7
    876c:	2c e3       	ldi	r18, 0x3C	; 60
    876e:	01 e0       	ldi	r16, 0x01	; 1
    8770:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		    display_drawPixel(2,59,true);
    8774:	82 e0       	ldi	r24, 0x02	; 2
    8776:	6b e3       	ldi	r22, 0x3B	; 59
    8778:	41 e0       	ldi	r20, 0x01	; 1
    877a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(3,58,true);
    877e:	83 e0       	ldi	r24, 0x03	; 3
    8780:	6a e3       	ldi	r22, 0x3A	; 58
    8782:	41 e0       	ldi	r20, 0x01	; 1
    8784:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(2,61,true);
    8788:	82 e0       	ldi	r24, 0x02	; 2
    878a:	6d e3       	ldi	r22, 0x3D	; 61
    878c:	41 e0       	ldi	r20, 0x01	; 1
    878e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(3,62,true);
    8792:	83 e0       	ldi	r24, 0x03	; 3
    8794:	6e e3       	ldi	r22, 0x3E	; 62
    8796:	41 e0       	ldi	r20, 0x01	; 1
    8798:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>

		    sprintf(temp2, "Uploading    %3u", uploadPercentBS);
    879c:	00 d0       	rcall	.+0      	; 0x879e <__vector_77+0x444>
    879e:	00 d0       	rcall	.+0      	; 0x87a0 <__vector_77+0x446>
    87a0:	ed b7       	in	r30, 0x3d	; 61
    87a2:	fe b7       	in	r31, 0x3e	; 62
    87a4:	31 96       	adiw	r30, 0x01	; 1
    87a6:	9b ea       	ldi	r25, 0xAB	; 171
    87a8:	a9 2e       	mov	r10, r25
    87aa:	9c e3       	ldi	r25, 0x3C	; 60
    87ac:	b9 2e       	mov	r11, r25
    87ae:	ad b7       	in	r26, 0x3d	; 61
    87b0:	be b7       	in	r27, 0x3e	; 62
    87b2:	11 96       	adiw	r26, 0x01	; 1
    87b4:	ad 92       	st	X+, r10
    87b6:	bc 92       	st	X, r11
    87b8:	12 97       	sbiw	r26, 0x02	; 2
    87ba:	81 e9       	ldi	r24, 0x91	; 145
    87bc:	91 e2       	ldi	r25, 0x21	; 33
    87be:	82 83       	std	Z+2, r24	; 0x02
    87c0:	93 83       	std	Z+3, r25	; 0x03
    87c2:	80 91 95 33 	lds	r24, 0x3395
    87c6:	84 83       	std	Z+4, r24	; 0x04
    87c8:	15 82       	std	Z+5, r1	; 0x05
    87ca:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    strcat(temp2,"%");
    87ce:	ed b7       	in	r30, 0x3d	; 61
    87d0:	fe b7       	in	r31, 0x3e	; 62
    87d2:	36 96       	adiw	r30, 0x06	; 6
    87d4:	ed bf       	out	0x3d, r30	; 61
    87d6:	fe bf       	out	0x3e, r31	; 62
    87d8:	c5 01       	movw	r24, r10
    87da:	62 ea       	ldi	r22, 0xA2	; 162
    87dc:	71 e2       	ldi	r23, 0x21	; 33
    87de:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
		    display_putString(temp2,1,0,System5x7);
    87e2:	c5 01       	movw	r24, r10
    87e4:	61 e0       	ldi	r22, 0x01	; 1
    87e6:	40 e0       	ldi	r20, 0x00	; 0
    87e8:	23 ed       	ldi	r18, 0xD3	; 211
    87ea:	30 e3       	ldi	r19, 0x30	; 48
    87ec:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
            sprintf(temp2,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
    87f0:	c0 90 d2 33 	lds	r12, 0x33D2
    87f4:	d0 90 d3 33 	lds	r13, 0x33D3
    87f8:	e0 90 d4 33 	lds	r14, 0x33D4
    87fc:	f0 90 d5 33 	lds	r15, 0x33D5
    8800:	2d b7       	in	r18, 0x3d	; 61
    8802:	3e b7       	in	r19, 0x3e	; 62
    8804:	2c 50       	subi	r18, 0x0C	; 12
    8806:	30 40       	sbci	r19, 0x00	; 0
    8808:	2d bf       	out	0x3d, r18	; 61
    880a:	3e bf       	out	0x3e, r19	; 62
    880c:	0d b7       	in	r16, 0x3d	; 61
    880e:	1e b7       	in	r17, 0x3e	; 62
    8810:	0f 5f       	subi	r16, 0xFF	; 255
    8812:	1f 4f       	sbci	r17, 0xFF	; 255
    8814:	ad b7       	in	r26, 0x3d	; 61
    8816:	be b7       	in	r27, 0x3e	; 62
    8818:	11 96       	adiw	r26, 0x01	; 1
    881a:	ad 92       	st	X+, r10
    881c:	bc 92       	st	X, r11
    881e:	12 97       	sbiw	r26, 0x02	; 2
    8820:	84 ea       	ldi	r24, 0xA4	; 164
    8822:	91 e2       	ldi	r25, 0x21	; 33
    8824:	f8 01       	movw	r30, r16
    8826:	82 83       	std	Z+2, r24	; 0x02
    8828:	93 83       	std	Z+3, r25	; 0x03
    882a:	c7 01       	movw	r24, r14
    882c:	b6 01       	movw	r22, r12
    882e:	2a e0       	ldi	r18, 0x0A	; 10
    8830:	30 e0       	ldi	r19, 0x00	; 0
    8832:	40 e0       	ldi	r20, 0x00	; 0
    8834:	50 e0       	ldi	r21, 0x00	; 0
    8836:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    883a:	d8 01       	movw	r26, r16
    883c:	14 96       	adiw	r26, 0x04	; 4
    883e:	2d 93       	st	X+, r18
    8840:	3d 93       	st	X+, r19
    8842:	4d 93       	st	X+, r20
    8844:	5c 93       	st	X, r21
    8846:	17 97       	sbiw	r26, 0x07	; 7
    8848:	c7 01       	movw	r24, r14
    884a:	b6 01       	movw	r22, r12
    884c:	2a e0       	ldi	r18, 0x0A	; 10
    884e:	30 e0       	ldi	r19, 0x00	; 0
    8850:	40 e0       	ldi	r20, 0x00	; 0
    8852:	50 e0       	ldi	r21, 0x00	; 0
    8854:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    8858:	f8 01       	movw	r30, r16
    885a:	60 87       	std	Z+8, r22	; 0x08
    885c:	71 87       	std	Z+9, r23	; 0x09
    885e:	82 87       	std	Z+10, r24	; 0x0a
    8860:	93 87       	std	Z+11, r25	; 0x0b
    8862:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    strcat(temp2,"%");
    8866:	2d b7       	in	r18, 0x3d	; 61
    8868:	3e b7       	in	r19, 0x3e	; 62
    886a:	24 5f       	subi	r18, 0xF4	; 244
    886c:	3f 4f       	sbci	r19, 0xFF	; 255
    886e:	2d bf       	out	0x3d, r18	; 61
    8870:	3e bf       	out	0x3e, r19	; 62
    8872:	c5 01       	movw	r24, r10
    8874:	62 ea       	ldi	r22, 0xA2	; 162
    8876:	71 e2       	ldi	r23, 0x21	; 33
    8878:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
		    display_putString(temp2,2,0,System5x7);
    887c:	c5 01       	movw	r24, r10
    887e:	62 e0       	ldi	r22, 0x02	; 2
    8880:	40 e0       	ldi	r20, 0x00	; 0
    8882:	23 ed       	ldi	r18, 0xD3	; 211
    8884:	30 e3       	ldi	r19, 0x30	; 48
    8886:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>




		    if(chargePercent == 100){
    888a:	80 91 63 33 	lds	r24, 0x3363
    888e:	84 36       	cpi	r24, 0x64	; 100
    8890:	29 f4       	brne	.+10     	; 0x889c <__vector_77+0x542>
			    chargeComplete = true;
    8892:	81 e0       	ldi	r24, 0x01	; 1
    8894:	80 93 66 33 	sts	0x3366, r24
			    okToCharge  = false;
    8898:	10 92 67 33 	sts	0x3367, r1
    889c:	80 91 a8 06 	lds	r24, 0x06A8
    88a0:	81 fd       	sbrc	r24, 1
    88a2:	13 c0       	rjmp	.+38     	; 0x88ca <__vector_77+0x570>
    88a4:	1b c3       	rjmp	.+1590   	; 0x8edc <__vector_77+0xb82>
		    }


		    if(SD2_Inserted() && chargeComplete){
			    display_putString("Ext Charged      ",3,0,System5x7);
    88a6:	88 eb       	ldi	r24, 0xB8	; 184
    88a8:	91 e2       	ldi	r25, 0x21	; 33
    88aa:	63 e0       	ldi	r22, 0x03	; 3
    88ac:	40 e0       	ldi	r20, 0x00	; 0
    88ae:	23 ed       	ldi	r18, 0xD3	; 211
    88b0:	30 e3       	ldi	r19, 0x30	; 48
    88b2:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
			    if(!recording){
    88b6:	80 91 6d 33 	lds	r24, 0x336D
    88ba:	88 23       	and	r24, r24
    88bc:	09 f0       	breq	.+2      	; 0x88c0 <__vector_77+0x566>
    88be:	83 c0       	rjmp	.+262    	; 0x89c6 <__vector_77+0x66c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    88c0:	e0 e2       	ldi	r30, 0x20	; 32
    88c2:	f6 e0       	ldi	r31, 0x06	; 6
    88c4:	80 e2       	ldi	r24, 0x20	; 32
    88c6:	86 83       	std	Z+6, r24	; 0x06
    88c8:	6d c0       	rjmp	.+218    	; 0x89a4 <__vector_77+0x64a>
    88ca:	80 91 a8 06 	lds	r24, 0x06A8
    88ce:	81 fd       	sbrc	r24, 1
    88d0:	6c c0       	rjmp	.+216    	; 0x89aa <__vector_77+0x650>
    88d2:	0a c3       	rjmp	.+1556   	; 0x8ee8 <__vector_77+0xb8e>
				    Leds_Clear(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    } else if(SD2_Inserted() && !chargeComplete){
			    sprintf(temp2, "Ext Charging  %2u",chargePercent);
    88d4:	00 d0       	rcall	.+0      	; 0x88d6 <__vector_77+0x57c>
    88d6:	00 d0       	rcall	.+0      	; 0x88d8 <__vector_77+0x57e>
    88d8:	ed b7       	in	r30, 0x3d	; 61
    88da:	fe b7       	in	r31, 0x3e	; 62
    88dc:	31 96       	adiw	r30, 0x01	; 1
    88de:	0b ea       	ldi	r16, 0xAB	; 171
    88e0:	1c e3       	ldi	r17, 0x3C	; 60
    88e2:	ad b7       	in	r26, 0x3d	; 61
    88e4:	be b7       	in	r27, 0x3e	; 62
    88e6:	11 96       	adiw	r26, 0x01	; 1
    88e8:	0d 93       	st	X+, r16
    88ea:	1c 93       	st	X, r17
    88ec:	12 97       	sbiw	r26, 0x02	; 2
    88ee:	8a ec       	ldi	r24, 0xCA	; 202
    88f0:	91 e2       	ldi	r25, 0x21	; 33
    88f2:	82 83       	std	Z+2, r24	; 0x02
    88f4:	93 83       	std	Z+3, r25	; 0x03
    88f6:	80 91 63 33 	lds	r24, 0x3363
    88fa:	84 83       	std	Z+4, r24	; 0x04
    88fc:	15 82       	std	Z+5, r1	; 0x05
    88fe:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
			    strcat(temp2,"%");
    8902:	ed b7       	in	r30, 0x3d	; 61
    8904:	fe b7       	in	r31, 0x3e	; 62
    8906:	36 96       	adiw	r30, 0x06	; 6
    8908:	ed bf       	out	0x3d, r30	; 61
    890a:	fe bf       	out	0x3e, r31	; 62
    890c:	c8 01       	movw	r24, r16
    890e:	62 ea       	ldi	r22, 0xA2	; 162
    8910:	71 e2       	ldi	r23, 0x21	; 33
    8912:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
			    display_putString(temp2,3,0,System5x7);
    8916:	c8 01       	movw	r24, r16
    8918:	63 e0       	ldi	r22, 0x03	; 3
    891a:	40 e0       	ldi	r20, 0x00	; 0
    891c:	23 ed       	ldi	r18, 0xD3	; 211
    891e:	30 e3       	ldi	r19, 0x30	; 48
    8920:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
			    okToCharge = true;
    8924:	81 e0       	ldi	r24, 0x01	; 1
    8926:	80 93 67 33 	sts	0x3367, r24
			    if(!rtcSynced){
    892a:	80 91 97 33 	lds	r24, 0x3397
    892e:	88 23       	and	r24, r24
    8930:	89 f5       	brne	.+98     	; 0x8994 <__vector_77+0x63a>
    8932:	88 e8       	ldi	r24, 0x88	; 136
    8934:	93 e1       	ldi	r25, 0x13	; 19
    8936:	20 e7       	ldi	r18, 0x70	; 112
    8938:	31 e0       	ldi	r19, 0x01	; 1
    893a:	f9 01       	movw	r30, r18
    893c:	31 97       	sbiw	r30, 0x01	; 1
    893e:	f1 f7       	brne	.-4      	; 0x893c <__vector_77+0x5e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8940:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8942:	d9 f7       	brne	.-10     	; 0x893a <__vector_77+0x5e0>
			        _delay_ms(500);
			        if(useWifiForUploading){
    8944:	80 91 39 33 	lds	r24, 0x3339
    8948:	88 23       	and	r24, r24
    894a:	29 f0       	breq	.+10     	; 0x8956 <__vector_77+0x5fc>
			            Debug_SendString("Syncing RTC", true);
    894c:	8c ed       	ldi	r24, 0xDC	; 220
    894e:	91 e2       	ldi	r25, 0x21	; 33
    8950:	61 e0       	ldi	r22, 0x01	; 1
    8952:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    8956:	e0 ea       	ldi	r30, 0xA0	; 160
    8958:	f4 e0       	ldi	r31, 0x04	; 4
    895a:	88 e0       	ldi	r24, 0x08	; 8
    895c:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    895e:	84 e0       	ldi	r24, 0x04	; 4
    8960:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    8962:	8f e0       	ldi	r24, 0x0F	; 15
    8964:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    8966:	11 e0       	ldi	r17, 0x01	; 1
    8968:	14 83       	std	Z+4, r17	; 0x04
			        }
				    RTC_init();
				    RTC_setUTCSecs(UNIX_time);
    896a:	60 91 68 33 	lds	r22, 0x3368
    896e:	70 91 69 33 	lds	r23, 0x3369
    8972:	80 91 6a 33 	lds	r24, 0x336A
    8976:	90 91 6b 33 	lds	r25, 0x336B
    897a:	0e 94 e5 38 	call	0x71ca	; 0x71ca <RTC_setUTCSecs>
				    rtcSynced = true;
    897e:	10 93 97 33 	sts	0x3397, r17
				    if(useWifiForUploading){
    8982:	80 91 39 33 	lds	r24, 0x3339
    8986:	88 23       	and	r24, r24
    8988:	29 f0       	breq	.+10     	; 0x8994 <__vector_77+0x63a>
				        Debug_SendString("RTC synced", true);
    898a:	88 ee       	ldi	r24, 0xE8	; 232
    898c:	91 e2       	ldi	r25, 0x21	; 33
    898e:	61 e0       	ldi	r22, 0x01	; 1
    8990:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
				    }
			    }
			    if(!recording){
    8994:	80 91 6d 33 	lds	r24, 0x336D
    8998:	88 23       	and	r24, r24
    899a:	a9 f4       	brne	.+42     	; 0x89c6 <__vector_77+0x66c>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    899c:	e0 e2       	ldi	r30, 0x20	; 32
    899e:	f6 e0       	ldi	r31, 0x06	; 6
    89a0:	80 e2       	ldi	r24, 0x20	; 32
    89a2:	85 83       	std	Z+5, r24	; 0x05
				    Leds_Set(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    }else{
			    display_putString("Ext Removed      ",3,0,System5x7);
    89a4:	80 e1       	ldi	r24, 0x10	; 16
    89a6:	85 83       	std	Z+5, r24	; 0x05
    89a8:	0e c0       	rjmp	.+28     	; 0x89c6 <__vector_77+0x66c>
    89aa:	83 ef       	ldi	r24, 0xF3	; 243
    89ac:	91 e2       	ldi	r25, 0x21	; 33
    89ae:	63 e0       	ldi	r22, 0x03	; 3
    89b0:	40 e0       	ldi	r20, 0x00	; 0
    89b2:	23 ed       	ldi	r18, 0xD3	; 211
    89b4:	30 e3       	ldi	r19, 0x30	; 48
    89b6:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
			    chargePercent = 0;
    89ba:	10 92 63 33 	sts	0x3363, r1
			    chargeComplete = false;
    89be:	10 92 66 33 	sts	0x3366, r1
			    rtcSynced = false;
    89c2:	10 92 97 33 	sts	0x3397, r1
			    //Leds_Clear(ext_Red);
			    //Leds_Clear(ext_Green);
		    }


		    sprintf(temp2, "Uploading    %3u", uploadPercentEXT);
    89c6:	00 d0       	rcall	.+0      	; 0x89c8 <__vector_77+0x66e>
    89c8:	00 d0       	rcall	.+0      	; 0x89ca <__vector_77+0x670>
    89ca:	ed b7       	in	r30, 0x3d	; 61
    89cc:	fe b7       	in	r31, 0x3e	; 62
    89ce:	31 96       	adiw	r30, 0x01	; 1
    89d0:	0b ea       	ldi	r16, 0xAB	; 171
    89d2:	1c e3       	ldi	r17, 0x3C	; 60
    89d4:	ad b7       	in	r26, 0x3d	; 61
    89d6:	be b7       	in	r27, 0x3e	; 62
    89d8:	11 96       	adiw	r26, 0x01	; 1
    89da:	0d 93       	st	X+, r16
    89dc:	1c 93       	st	X, r17
    89de:	12 97       	sbiw	r26, 0x02	; 2
    89e0:	81 e9       	ldi	r24, 0x91	; 145
    89e2:	91 e2       	ldi	r25, 0x21	; 33
    89e4:	82 83       	std	Z+2, r24	; 0x02
    89e6:	93 83       	std	Z+3, r25	; 0x03
    89e8:	80 91 96 33 	lds	r24, 0x3396
    89ec:	84 83       	std	Z+4, r24	; 0x04
    89ee:	15 82       	std	Z+5, r1	; 0x05
    89f0:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    strcat(temp2,"%");
    89f4:	ed b7       	in	r30, 0x3d	; 61
    89f6:	fe b7       	in	r31, 0x3e	; 62
    89f8:	36 96       	adiw	r30, 0x06	; 6
    89fa:	ed bf       	out	0x3d, r30	; 61
    89fc:	fe bf       	out	0x3e, r31	; 62
    89fe:	c8 01       	movw	r24, r16
    8a00:	62 ea       	ldi	r22, 0xA2	; 162
    8a02:	71 e2       	ldi	r23, 0x21	; 33
    8a04:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
		    display_putString(temp2,4,0,System5x7);
    8a08:	c8 01       	movw	r24, r16
    8a0a:	64 e0       	ldi	r22, 0x04	; 4
    8a0c:	40 e0       	ldi	r20, 0x00	; 0
    8a0e:	23 ed       	ldi	r18, 0xD3	; 211
    8a10:	30 e3       	ldi	r19, 0x30	; 48
    8a12:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>


		    RTC_UTCSecsToTime(UNIX_time,&time);
    8a16:	60 91 68 33 	lds	r22, 0x3368
    8a1a:	70 91 69 33 	lds	r23, 0x3369
    8a1e:	80 91 6a 33 	lds	r24, 0x336A
    8a22:	90 91 6b 33 	lds	r25, 0x336B
    8a26:	4f eb       	ldi	r20, 0xBF	; 191
    8a28:	5e e4       	ldi	r21, 0x4E	; 78
    8a2a:	0e 94 57 36 	call	0x6cae	; 0x6cae <RTC_UTCSecsToTime>
		    clockHour = time.Hour + 24;
		    clockHour -= timeZoneShift;
    8a2e:	90 91 c2 4e 	lds	r25, 0x4EC2
    8a32:	98 5e       	subi	r25, 0xE8	; 232
    8a34:	80 91 8f 33 	lds	r24, 0x338F
    8a38:	98 1b       	sub	r25, r24
    8a3a:	90 93 90 33 	sts	0x3390, r25
		    if(clockHour > 24){
    8a3e:	99 31       	cpi	r25, 0x19	; 25
    8a40:	18 f0       	brcs	.+6      	; 0x8a48 <__vector_77+0x6ee>
			    clockHour -= 24;
    8a42:	98 51       	subi	r25, 0x18	; 24
    8a44:	90 93 90 33 	sts	0x3390, r25
		    }

            if(clockHour == 0){
    8a48:	90 91 90 33 	lds	r25, 0x3390
    8a4c:	99 23       	and	r25, r25
    8a4e:	49 f4       	brne	.+18     	; 0x8a62 <__vector_77+0x708>
                displayAM = true;
    8a50:	81 e0       	ldi	r24, 0x01	; 1
    8a52:	80 93 aa 33 	sts	0x33AA, r24
                displayPM = false;
    8a56:	10 92 ab 33 	sts	0x33AB, r1
                clockHour += 12;
    8a5a:	8c e0       	ldi	r24, 0x0C	; 12
    8a5c:	80 93 90 33 	sts	0x3390, r24
    8a60:	18 c0       	rjmp	.+48     	; 0x8a92 <__vector_77+0x738>
            } else if(clockHour == 12){
    8a62:	9c 30       	cpi	r25, 0x0C	; 12
    8a64:	31 f4       	brne	.+12     	; 0x8a72 <__vector_77+0x718>
                displayAM = false;
    8a66:	10 92 aa 33 	sts	0x33AA, r1
                displayPM = true;
    8a6a:	81 e0       	ldi	r24, 0x01	; 1
    8a6c:	80 93 ab 33 	sts	0x33AB, r24
    8a70:	10 c0       	rjmp	.+32     	; 0x8a92 <__vector_77+0x738>
            } else if(clockHour > 12){
    8a72:	9d 30       	cpi	r25, 0x0D	; 13
    8a74:	48 f0       	brcs	.+18     	; 0x8a88 <__vector_77+0x72e>
                displayAM = false;
    8a76:	10 92 aa 33 	sts	0x33AA, r1
                displayPM = true;
    8a7a:	81 e0       	ldi	r24, 0x01	; 1
    8a7c:	80 93 ab 33 	sts	0x33AB, r24
                clockHour -= 12;
    8a80:	9c 50       	subi	r25, 0x0C	; 12
    8a82:	90 93 90 33 	sts	0x3390, r25
    8a86:	05 c0       	rjmp	.+10     	; 0x8a92 <__vector_77+0x738>
            }  else {
                displayAM = true;
    8a88:	81 e0       	ldi	r24, 0x01	; 1
    8a8a:	80 93 aa 33 	sts	0x33AA, r24
                displayPM = false;
    8a8e:	10 92 ab 33 	sts	0x33AB, r1
            }

            sprintf(temp2,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    8a92:	2d b7       	in	r18, 0x3d	; 61
    8a94:	3e b7       	in	r19, 0x3e	; 62
    8a96:	2a 50       	subi	r18, 0x0A	; 10
    8a98:	30 40       	sbci	r19, 0x00	; 0
    8a9a:	2d bf       	out	0x3d, r18	; 61
    8a9c:	3e bf       	out	0x3e, r19	; 62
    8a9e:	ed b7       	in	r30, 0x3d	; 61
    8aa0:	fe b7       	in	r31, 0x3e	; 62
    8aa2:	31 96       	adiw	r30, 0x01	; 1
    8aa4:	0b ea       	ldi	r16, 0xAB	; 171
    8aa6:	1c e3       	ldi	r17, 0x3C	; 60
    8aa8:	ad b7       	in	r26, 0x3d	; 61
    8aaa:	be b7       	in	r27, 0x3e	; 62
    8aac:	11 96       	adiw	r26, 0x01	; 1
    8aae:	0d 93       	st	X+, r16
    8ab0:	1c 93       	st	X, r17
    8ab2:	12 97       	sbiw	r26, 0x02	; 2
    8ab4:	85 e0       	ldi	r24, 0x05	; 5
    8ab6:	92 e2       	ldi	r25, 0x22	; 34
    8ab8:	82 83       	std	Z+2, r24	; 0x02
    8aba:	93 83       	std	Z+3, r25	; 0x03
    8abc:	80 91 90 33 	lds	r24, 0x3390
    8ac0:	84 83       	std	Z+4, r24	; 0x04
    8ac2:	15 82       	std	Z+5, r1	; 0x05
    8ac4:	80 91 c1 4e 	lds	r24, 0x4EC1
    8ac8:	86 83       	std	Z+6, r24	; 0x06
    8aca:	17 82       	std	Z+7, r1	; 0x07
    8acc:	80 91 c0 4e 	lds	r24, 0x4EC0
    8ad0:	80 87       	std	Z+8, r24	; 0x08
    8ad2:	11 86       	std	Z+9, r1	; 0x09
    8ad4:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
            if(displayAM){
    8ad8:	80 91 aa 33 	lds	r24, 0x33AA
    8adc:	ed b7       	in	r30, 0x3d	; 61
    8ade:	fe b7       	in	r31, 0x3e	; 62
    8ae0:	3a 96       	adiw	r30, 0x0a	; 10
    8ae2:	ed bf       	out	0x3d, r30	; 61
    8ae4:	fe bf       	out	0x3e, r31	; 62
    8ae6:	88 23       	and	r24, r24
    8ae8:	21 f0       	breq	.+8      	; 0x8af2 <__vector_77+0x798>
                strcat(temp2,am);
    8aea:	c8 01       	movw	r24, r16
    8aec:	67 ec       	ldi	r22, 0xC7	; 199
    8aee:	70 e3       	ldi	r23, 0x30	; 48
    8af0:	07 c0       	rjmp	.+14     	; 0x8b00 <__vector_77+0x7a6>
            } else if(displayPM){
    8af2:	80 91 ab 33 	lds	r24, 0x33AB
    8af6:	88 23       	and	r24, r24
    8af8:	29 f0       	breq	.+10     	; 0x8b04 <__vector_77+0x7aa>
                strcat(temp2,pm);
    8afa:	c8 01       	movw	r24, r16
    8afc:	6c ec       	ldi	r22, 0xCC	; 204
    8afe:	70 e3       	ldi	r23, 0x30	; 48
    8b00:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
            }
		    display_putString(temp2,6,0,System5x7);
    8b04:	0b ea       	ldi	r16, 0xAB	; 171
    8b06:	1c e3       	ldi	r17, 0x3C	; 60
    8b08:	c8 01       	movw	r24, r16
    8b0a:	66 e0       	ldi	r22, 0x06	; 6
    8b0c:	40 e0       	ldi	r20, 0x00	; 0
    8b0e:	23 ed       	ldi	r18, 0xD3	; 211
    8b10:	30 e3       	ldi	r19, 0x30	; 48
    8b12:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>

		    sprintf(temp2, "Wifi %3u",signalStrength);
    8b16:	00 d0       	rcall	.+0      	; 0x8b18 <__vector_77+0x7be>
    8b18:	00 d0       	rcall	.+0      	; 0x8b1a <__vector_77+0x7c0>
    8b1a:	ed b7       	in	r30, 0x3d	; 61
    8b1c:	fe b7       	in	r31, 0x3e	; 62
    8b1e:	31 96       	adiw	r30, 0x01	; 1
    8b20:	ad b7       	in	r26, 0x3d	; 61
    8b22:	be b7       	in	r27, 0x3e	; 62
    8b24:	11 96       	adiw	r26, 0x01	; 1
    8b26:	0d 93       	st	X+, r16
    8b28:	1c 93       	st	X, r17
    8b2a:	12 97       	sbiw	r26, 0x02	; 2
    8b2c:	89 e1       	ldi	r24, 0x19	; 25
    8b2e:	92 e2       	ldi	r25, 0x22	; 34
    8b30:	82 83       	std	Z+2, r24	; 0x02
    8b32:	93 83       	std	Z+3, r25	; 0x03
    8b34:	80 91 94 33 	lds	r24, 0x3394
    8b38:	84 83       	std	Z+4, r24	; 0x04
    8b3a:	15 82       	std	Z+5, r1	; 0x05
    8b3c:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    strcat(temp2,"%   more");
    8b40:	ed b7       	in	r30, 0x3d	; 61
    8b42:	fe b7       	in	r31, 0x3e	; 62
    8b44:	36 96       	adiw	r30, 0x06	; 6
    8b46:	ed bf       	out	0x3d, r30	; 61
    8b48:	fe bf       	out	0x3e, r31	; 62
    8b4a:	c8 01       	movw	r24, r16
    8b4c:	62 e2       	ldi	r22, 0x22	; 34
    8b4e:	72 e2       	ldi	r23, 0x22	; 34
    8b50:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
		    display_putString(temp2,7,0,System5x7);
    8b54:	c8 01       	movw	r24, r16
    8b56:	67 e0       	ldi	r22, 0x07	; 7
    8b58:	40 e0       	ldi	r20, 0x00	; 0
    8b5a:	23 ed       	ldi	r18, 0xD3	; 211
    8b5c:	30 e3       	ldi	r19, 0x30	; 48
    8b5e:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>


		    display_drawLine(56,98,63,98,true);		// down arrow
    8b62:	88 e3       	ldi	r24, 0x38	; 56
    8b64:	62 e6       	ldi	r22, 0x62	; 98
    8b66:	4f e3       	ldi	r20, 0x3F	; 63
    8b68:	22 e6       	ldi	r18, 0x62	; 98
    8b6a:	01 e0       	ldi	r16, 0x01	; 1
    8b6c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		    display_drawPixel(62,97,true);
    8b70:	8e e3       	ldi	r24, 0x3E	; 62
    8b72:	61 e6       	ldi	r22, 0x61	; 97
    8b74:	41 e0       	ldi	r20, 0x01	; 1
    8b76:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(61,96,true);
    8b7a:	8d e3       	ldi	r24, 0x3D	; 61
    8b7c:	60 e6       	ldi	r22, 0x60	; 96
    8b7e:	41 e0       	ldi	r20, 0x01	; 1
    8b80:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(62,99,true);
    8b84:	8e e3       	ldi	r24, 0x3E	; 62
    8b86:	63 e6       	ldi	r22, 0x63	; 99
    8b88:	41 e0       	ldi	r20, 0x01	; 1
    8b8a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(61,100,true);
    8b8e:	8d e3       	ldi	r24, 0x3D	; 61
    8b90:	64 e6       	ldi	r22, 0x64	; 100
    8b92:	41 e0       	ldi	r20, 0x01	; 1
    8b94:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>

		    display_writeBufferToScreen();
    8b98:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    8b9c:	b7 c1       	rjmp	.+878    	; 0x8f0c <__vector_77+0xbb2>



	    } else if(currentMode == sensorMode){
    8b9e:	a0 90 91 33 	lds	r10, 0x3391
    8ba2:	f1 e0       	ldi	r31, 0x01	; 1
    8ba4:	af 16       	cp	r10, r31
    8ba6:	09 f0       	breq	.+2      	; 0x8baa <__vector_77+0x850>
    8ba8:	b1 c1       	rjmp	.+866    	; 0x8f0c <__vector_77+0xbb2>
		    display_clearBuffer();
    8baa:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <display_clearBuffer>
		    display_putString("   Sensors  back",0,0,System5x7);
    8bae:	8b e2       	ldi	r24, 0x2B	; 43
    8bb0:	92 e2       	ldi	r25, 0x22	; 34
    8bb2:	60 e0       	ldi	r22, 0x00	; 0
    8bb4:	40 e0       	ldi	r20, 0x00	; 0
    8bb6:	23 ed       	ldi	r18, 0xD3	; 211
    8bb8:	30 e3       	ldi	r19, 0x30	; 48
    8bba:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		    display_drawLine(8, 15, 8,61,true);
    8bbe:	88 e0       	ldi	r24, 0x08	; 8
    8bc0:	6f e0       	ldi	r22, 0x0F	; 15
    8bc2:	48 e0       	ldi	r20, 0x08	; 8
    8bc4:	2d e3       	ldi	r18, 0x3D	; 61
    8bc6:	01 e0       	ldi	r16, 0x01	; 1
    8bc8:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>

		    display_drawLine(1,99,7,99,true);		// up arrow
    8bcc:	81 e0       	ldi	r24, 0x01	; 1
    8bce:	63 e6       	ldi	r22, 0x63	; 99
    8bd0:	47 e0       	ldi	r20, 0x07	; 7
    8bd2:	23 e6       	ldi	r18, 0x63	; 99
    8bd4:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <display_drawLine>
		    display_drawPixel(2,98,true);
    8bd8:	82 e0       	ldi	r24, 0x02	; 2
    8bda:	62 e6       	ldi	r22, 0x62	; 98
    8bdc:	41 e0       	ldi	r20, 0x01	; 1
    8bde:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(3,97,true);
    8be2:	83 e0       	ldi	r24, 0x03	; 3
    8be4:	61 e6       	ldi	r22, 0x61	; 97
    8be6:	41 e0       	ldi	r20, 0x01	; 1
    8be8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(2,100,true);
    8bec:	82 e0       	ldi	r24, 0x02	; 2
    8bee:	64 e6       	ldi	r22, 0x64	; 100
    8bf0:	41 e0       	ldi	r20, 0x01	; 1
    8bf2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>
		    display_drawPixel(3,101,true);
    8bf6:	83 e0       	ldi	r24, 0x03	; 3
    8bf8:	65 e6       	ldi	r22, 0x65	; 101
    8bfa:	41 e0       	ldi	r20, 0x01	; 1
    8bfc:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <display_drawPixel>

            sprintf(temp2,"Temperature: %3uC", quickTemperature);
    8c00:	00 d0       	rcall	.+0      	; 0x8c02 <__vector_77+0x8a8>
    8c02:	00 d0       	rcall	.+0      	; 0x8c04 <__vector_77+0x8aa>
    8c04:	ed b7       	in	r30, 0x3d	; 61
    8c06:	fe b7       	in	r31, 0x3e	; 62
    8c08:	31 96       	adiw	r30, 0x01	; 1
    8c0a:	0b ea       	ldi	r16, 0xAB	; 171
    8c0c:	1c e3       	ldi	r17, 0x3C	; 60
    8c0e:	ad b7       	in	r26, 0x3d	; 61
    8c10:	be b7       	in	r27, 0x3e	; 62
    8c12:	11 96       	adiw	r26, 0x01	; 1
    8c14:	0d 93       	st	X+, r16
    8c16:	1c 93       	st	X, r17
    8c18:	12 97       	sbiw	r26, 0x02	; 2
    8c1a:	8c e3       	ldi	r24, 0x3C	; 60
    8c1c:	92 e2       	ldi	r25, 0x22	; 34
    8c1e:	82 83       	std	Z+2, r24	; 0x02
    8c20:	93 83       	std	Z+3, r25	; 0x03
    8c22:	80 91 81 33 	lds	r24, 0x3381
    8c26:	84 83       	std	Z+4, r24	; 0x04
    8c28:	15 82       	std	Z+5, r1	; 0x05
    8c2a:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    display_putString(temp2,2,0,System5x7);
    8c2e:	ed b7       	in	r30, 0x3d	; 61
    8c30:	fe b7       	in	r31, 0x3e	; 62
    8c32:	36 96       	adiw	r30, 0x06	; 6
    8c34:	ed bf       	out	0x3d, r30	; 61
    8c36:	fe bf       	out	0x3e, r31	; 62
    8c38:	c8 01       	movw	r24, r16
    8c3a:	62 e0       	ldi	r22, 0x02	; 2
    8c3c:	40 e0       	ldi	r20, 0x00	; 0
    8c3e:	23 ed       	ldi	r18, 0xD3	; 211
    8c40:	30 e3       	ldi	r19, 0x30	; 48
    8c42:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
            sprintf(temp2,"Humidity:  %3u", quickHumidity);
    8c46:	00 d0       	rcall	.+0      	; 0x8c48 <__vector_77+0x8ee>
    8c48:	00 d0       	rcall	.+0      	; 0x8c4a <__vector_77+0x8f0>
    8c4a:	ed b7       	in	r30, 0x3d	; 61
    8c4c:	fe b7       	in	r31, 0x3e	; 62
    8c4e:	31 96       	adiw	r30, 0x01	; 1
    8c50:	ad b7       	in	r26, 0x3d	; 61
    8c52:	be b7       	in	r27, 0x3e	; 62
    8c54:	11 96       	adiw	r26, 0x01	; 1
    8c56:	0d 93       	st	X+, r16
    8c58:	1c 93       	st	X, r17
    8c5a:	12 97       	sbiw	r26, 0x02	; 2
    8c5c:	8e e4       	ldi	r24, 0x4E	; 78
    8c5e:	92 e2       	ldi	r25, 0x22	; 34
    8c60:	82 83       	std	Z+2, r24	; 0x02
    8c62:	93 83       	std	Z+3, r25	; 0x03
    8c64:	80 91 82 33 	lds	r24, 0x3382
    8c68:	84 83       	std	Z+4, r24	; 0x04
    8c6a:	15 82       	std	Z+5, r1	; 0x05
    8c6c:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    strcat(temp2, "%RH");
    8c70:	ed b7       	in	r30, 0x3d	; 61
    8c72:	fe b7       	in	r31, 0x3e	; 62
    8c74:	36 96       	adiw	r30, 0x06	; 6
    8c76:	ed bf       	out	0x3d, r30	; 61
    8c78:	fe bf       	out	0x3e, r31	; 62
    8c7a:	c8 01       	movw	r24, r16
    8c7c:	6d e5       	ldi	r22, 0x5D	; 93
    8c7e:	72 e2       	ldi	r23, 0x22	; 34
    8c80:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
		    display_putString(temp2,3,0,System5x7);
    8c84:	c8 01       	movw	r24, r16
    8c86:	63 e0       	ldi	r22, 0x03	; 3
    8c88:	40 e0       	ldi	r20, 0x00	; 0
    8c8a:	23 ed       	ldi	r18, 0xD3	; 211
    8c8c:	30 e3       	ldi	r19, 0x30	; 48
    8c8e:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		    sprintf(temp2,"Pressure:  %3ukPa", quickPressure);
    8c92:	00 d0       	rcall	.+0      	; 0x8c94 <__vector_77+0x93a>
    8c94:	00 d0       	rcall	.+0      	; 0x8c96 <__vector_77+0x93c>
    8c96:	ed b7       	in	r30, 0x3d	; 61
    8c98:	fe b7       	in	r31, 0x3e	; 62
    8c9a:	31 96       	adiw	r30, 0x01	; 1
    8c9c:	ad b7       	in	r26, 0x3d	; 61
    8c9e:	be b7       	in	r27, 0x3e	; 62
    8ca0:	11 96       	adiw	r26, 0x01	; 1
    8ca2:	0d 93       	st	X+, r16
    8ca4:	1c 93       	st	X, r17
    8ca6:	12 97       	sbiw	r26, 0x02	; 2
    8ca8:	81 e6       	ldi	r24, 0x61	; 97
    8caa:	92 e2       	ldi	r25, 0x22	; 34
    8cac:	82 83       	std	Z+2, r24	; 0x02
    8cae:	93 83       	std	Z+3, r25	; 0x03
    8cb0:	80 91 83 33 	lds	r24, 0x3383
    8cb4:	84 83       	std	Z+4, r24	; 0x04
    8cb6:	15 82       	std	Z+5, r1	; 0x05
    8cb8:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    display_putString(temp2,4,0,System5x7);
    8cbc:	ed b7       	in	r30, 0x3d	; 61
    8cbe:	fe b7       	in	r31, 0x3e	; 62
    8cc0:	36 96       	adiw	r30, 0x06	; 6
    8cc2:	ed bf       	out	0x3d, r30	; 61
    8cc4:	fe bf       	out	0x3e, r31	; 62
    8cc6:	c8 01       	movw	r24, r16
    8cc8:	64 e0       	ldi	r22, 0x04	; 4
    8cca:	40 e0       	ldi	r20, 0x00	; 0
    8ccc:	23 ed       	ldi	r18, 0xD3	; 211
    8cce:	30 e3       	ldi	r19, 0x30	; 48
    8cd0:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
            sprintf(temp2,"Light:      %5u", quickLight);
    8cd4:	00 d0       	rcall	.+0      	; 0x8cd6 <__vector_77+0x97c>
    8cd6:	00 d0       	rcall	.+0      	; 0x8cd8 <__vector_77+0x97e>
    8cd8:	ed b7       	in	r30, 0x3d	; 61
    8cda:	fe b7       	in	r31, 0x3e	; 62
    8cdc:	31 96       	adiw	r30, 0x01	; 1
    8cde:	ad b7       	in	r26, 0x3d	; 61
    8ce0:	be b7       	in	r27, 0x3e	; 62
    8ce2:	11 96       	adiw	r26, 0x01	; 1
    8ce4:	0d 93       	st	X+, r16
    8ce6:	1c 93       	st	X, r17
    8ce8:	12 97       	sbiw	r26, 0x02	; 2
    8cea:	83 e7       	ldi	r24, 0x73	; 115
    8cec:	92 e2       	ldi	r25, 0x22	; 34
    8cee:	82 83       	std	Z+2, r24	; 0x02
    8cf0:	93 83       	std	Z+3, r25	; 0x03
    8cf2:	80 91 84 33 	lds	r24, 0x3384
    8cf6:	90 91 85 33 	lds	r25, 0x3385
    8cfa:	84 83       	std	Z+4, r24	; 0x04
    8cfc:	95 83       	std	Z+5, r25	; 0x05
    8cfe:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    display_putString(temp2,5,0,System5x7);
    8d02:	ed b7       	in	r30, 0x3d	; 61
    8d04:	fe b7       	in	r31, 0x3e	; 62
    8d06:	36 96       	adiw	r30, 0x06	; 6
    8d08:	ed bf       	out	0x3d, r30	; 61
    8d0a:	fe bf       	out	0x3e, r31	; 62
    8d0c:	c8 01       	movw	r24, r16
    8d0e:	65 e0       	ldi	r22, 0x05	; 5
    8d10:	40 e0       	ldi	r20, 0x00	; 0
    8d12:	23 ed       	ldi	r18, 0xD3	; 211
    8d14:	30 e3       	ldi	r19, 0x30	; 48
    8d16:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
            sprintf(temp2,"Air: %5lu, %5lu", quickSmall, quickLarge);
    8d1a:	2d b7       	in	r18, 0x3d	; 61
    8d1c:	3e b7       	in	r19, 0x3e	; 62
    8d1e:	2c 50       	subi	r18, 0x0C	; 12
    8d20:	30 40       	sbci	r19, 0x00	; 0
    8d22:	2d bf       	out	0x3d, r18	; 61
    8d24:	3e bf       	out	0x3e, r19	; 62
    8d26:	ed b7       	in	r30, 0x3d	; 61
    8d28:	fe b7       	in	r31, 0x3e	; 62
    8d2a:	31 96       	adiw	r30, 0x01	; 1
    8d2c:	ad b7       	in	r26, 0x3d	; 61
    8d2e:	be b7       	in	r27, 0x3e	; 62
    8d30:	11 96       	adiw	r26, 0x01	; 1
    8d32:	0d 93       	st	X+, r16
    8d34:	1c 93       	st	X, r17
    8d36:	12 97       	sbiw	r26, 0x02	; 2
    8d38:	83 e8       	ldi	r24, 0x83	; 131
    8d3a:	92 e2       	ldi	r25, 0x22	; 34
    8d3c:	82 83       	std	Z+2, r24	; 0x02
    8d3e:	93 83       	std	Z+3, r25	; 0x03
    8d40:	80 91 5a 33 	lds	r24, 0x335A
    8d44:	90 91 5b 33 	lds	r25, 0x335B
    8d48:	a0 91 5c 33 	lds	r26, 0x335C
    8d4c:	b0 91 5d 33 	lds	r27, 0x335D
    8d50:	84 83       	std	Z+4, r24	; 0x04
    8d52:	95 83       	std	Z+5, r25	; 0x05
    8d54:	a6 83       	std	Z+6, r26	; 0x06
    8d56:	b7 83       	std	Z+7, r27	; 0x07
    8d58:	80 91 5e 33 	lds	r24, 0x335E
    8d5c:	90 91 5f 33 	lds	r25, 0x335F
    8d60:	a0 91 60 33 	lds	r26, 0x3360
    8d64:	b0 91 61 33 	lds	r27, 0x3361
    8d68:	80 87       	std	Z+8, r24	; 0x08
    8d6a:	91 87       	std	Z+9, r25	; 0x09
    8d6c:	a2 87       	std	Z+10, r26	; 0x0a
    8d6e:	b3 87       	std	Z+11, r27	; 0x0b
    8d70:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
		    display_putString(temp2,6,0,System5x7);
    8d74:	ed b7       	in	r30, 0x3d	; 61
    8d76:	fe b7       	in	r31, 0x3e	; 62
    8d78:	3c 96       	adiw	r30, 0x0c	; 12
    8d7a:	ed bf       	out	0x3d, r30	; 61
    8d7c:	fe bf       	out	0x3e, r31	; 62
    8d7e:	c8 01       	movw	r24, r16
    8d80:	66 e0       	ldi	r22, 0x06	; 6
    8d82:	40 e0       	ldi	r20, 0x00	; 0
    8d84:	23 ed       	ldi	r18, 0xD3	; 211
    8d86:	30 e3       	ldi	r19, 0x30	; 48
    8d88:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		    display_putString("Sound:           ",7,0,System5x7);
    8d8c:	83 e9       	ldi	r24, 0x93	; 147
    8d8e:	92 e2       	ldi	r25, 0x22	; 34
    8d90:	67 e0       	ldi	r22, 0x07	; 7
    8d92:	40 e0       	ldi	r20, 0x00	; 0
    8d94:	23 ed       	ldi	r18, 0xD3	; 211
    8d96:	30 e3       	ldi	r19, 0x30	; 48
    8d98:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		    display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    8d9c:	20 91 86 33 	lds	r18, 0x3386
    8da0:	26 95       	lsr	r18
    8da2:	89 e3       	ldi	r24, 0x39	; 57
    8da4:	62 e3       	ldi	r22, 0x32	; 50
    8da6:	47 e0       	ldi	r20, 0x07	; 7
    8da8:	01 e0       	ldi	r16, 0x01	; 1
    8daa:	ee 24       	eor	r14, r14
    8dac:	cc 24       	eor	r12, r12
    8dae:	c3 94       	inc	r12
    8db0:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <display_drawRectangle>
		    display_writeBufferToScreen();
    8db4:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>

		    if(chargePercent == 100){
    8db8:	80 91 63 33 	lds	r24, 0x3363
    8dbc:	84 36       	cpi	r24, 0x64	; 100
    8dbe:	21 f4       	brne	.+8      	; 0x8dc8 <__vector_77+0xa6e>
                chargeComplete = true;
    8dc0:	a0 92 66 33 	sts	0x3366, r10
			    okToCharge  = false;
    8dc4:	10 92 67 33 	sts	0x3367, r1
    8dc8:	80 91 a8 06 	lds	r24, 0x06A8
    8dcc:	81 fd       	sbrc	r24, 1
    8dce:	0a c0       	rjmp	.+20     	; 0x8de4 <__vector_77+0xa8a>
    8dd0:	91 c0       	rjmp	.+290    	; 0x8ef4 <__vector_77+0xb9a>
		    }

    		if(SD2_Inserted() && chargeComplete && !recording){
    8dd2:	80 91 6d 33 	lds	r24, 0x336D
    8dd6:	88 23       	and	r24, r24
    8dd8:	29 f4       	brne	.+10     	; 0x8de4 <__vector_77+0xa8a>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8dda:	e0 e2       	ldi	r30, 0x20	; 32
    8ddc:	f6 e0       	ldi	r31, 0x06	; 6
    8dde:	80 e2       	ldi	r24, 0x20	; 32
    8de0:	86 83       	std	Z+6, r24	; 0x06
    8de2:	39 c0       	rjmp	.+114    	; 0x8e56 <__vector_77+0xafc>
    8de4:	80 91 a8 06 	lds	r24, 0x06A8
    8de8:	81 fd       	sbrc	r24, 1
    8dea:	38 c0       	rjmp	.+112    	; 0x8e5c <__vector_77+0xb02>
    8dec:	89 c0       	rjmp	.+274    	; 0x8f00 <__vector_77+0xba6>
    			Leds_Clear(ext_Red);
    			Leds_Set(ext_Green);
    		} else if(SD2_Inserted() && !chargeComplete){
    			okToCharge = true;
    8dee:	81 e0       	ldi	r24, 0x01	; 1
    8df0:	80 93 67 33 	sts	0x3367, r24
    			if(!rtcSynced){
    8df4:	80 91 97 33 	lds	r24, 0x3397
    8df8:	88 23       	and	r24, r24
    8dfa:	21 f5       	brne	.+72     	; 0x8e44 <__vector_77+0xaea>
    				if(useWifiForUploading){
    8dfc:	80 91 39 33 	lds	r24, 0x3339
    8e00:	88 23       	and	r24, r24
    8e02:	29 f0       	breq	.+10     	; 0x8e0e <__vector_77+0xab4>
	    			    Debug_SendString("Syncing RTC", true);
    8e04:	8c ed       	ldi	r24, 0xDC	; 220
    8e06:	91 e2       	ldi	r25, 0x21	; 33
    8e08:	61 e0       	ldi	r22, 0x01	; 1
    8e0a:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
		    		}
			    	if(!demoMode){
    8e0e:	80 91 38 33 	lds	r24, 0x3338
    8e12:	88 23       	and	r24, r24
    8e14:	a1 f4       	brne	.+40     	; 0x8e3e <__vector_77+0xae4>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    8e16:	e0 ea       	ldi	r30, 0xA0	; 160
    8e18:	f4 e0       	ldi	r31, 0x04	; 4
    8e1a:	88 e0       	ldi	r24, 0x08	; 8
    8e1c:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    8e1e:	84 e0       	ldi	r24, 0x04	; 4
    8e20:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    8e22:	8f e0       	ldi	r24, 0x0F	; 15
    8e24:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    8e26:	81 e0       	ldi	r24, 0x01	; 1
    8e28:	84 83       	std	Z+4, r24	; 0x04
				    	RTC_init();
					    RTC_setUTCSecs(UNIX_time);
    8e2a:	60 91 68 33 	lds	r22, 0x3368
    8e2e:	70 91 69 33 	lds	r23, 0x3369
    8e32:	80 91 6a 33 	lds	r24, 0x336A
    8e36:	90 91 6b 33 	lds	r25, 0x336B
    8e3a:	0e 94 e5 38 	call	0x71ca	; 0x71ca <RTC_setUTCSecs>
    				}
	    			rtcSynced = true;
    8e3e:	81 e0       	ldi	r24, 0x01	; 1
    8e40:	80 93 97 33 	sts	0x3397, r24
		    	}
			    if(!recording){
    8e44:	80 91 6d 33 	lds	r24, 0x336D
    8e48:	88 23       	and	r24, r24
    8e4a:	09 f0       	breq	.+2      	; 0x8e4e <__vector_77+0xaf4>
    8e4c:	5f c0       	rjmp	.+190    	; 0x8f0c <__vector_77+0xbb2>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8e4e:	e0 e2       	ldi	r30, 0x20	; 32
    8e50:	f6 e0       	ldi	r31, 0x06	; 6
    8e52:	80 e2       	ldi	r24, 0x20	; 32
    8e54:	85 83       	std	Z+5, r24	; 0x05
				    Leds_Set(ext_Red);
    				Leds_Set(ext_Green);
	    		}

		    }else{
			    chargePercent = 0;
    8e56:	80 e1       	ldi	r24, 0x10	; 16
    8e58:	85 83       	std	Z+5, r24	; 0x05
    8e5a:	58 c0       	rjmp	.+176    	; 0x8f0c <__vector_77+0xbb2>
    8e5c:	10 92 63 33 	sts	0x3363, r1
    			chargeComplete = false;
    8e60:	10 92 66 33 	sts	0x3366, r1
	    		rtcSynced = false;
    8e64:	10 92 97 33 	sts	0x3397, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8e68:	e0 e2       	ldi	r30, 0x20	; 32
    8e6a:	f6 e0       	ldi	r31, 0x06	; 6
    8e6c:	80 e2       	ldi	r24, 0x20	; 32
    8e6e:	86 83       	std	Z+6, r24	; 0x06

	// controls


        if(currentMode == recordMode && Dpad_CheckButton(Down)){
		    currentMode = sensorMode;
    8e70:	80 e1       	ldi	r24, 0x10	; 16
    8e72:	86 83       	std	Z+6, r24	; 0x06
    8e74:	4b c0       	rjmp	.+150    	; 0x8f0c <__vector_77+0xbb2>
    8e76:	81 e0       	ldi	r24, 0x01	; 1
    8e78:	80 93 91 33 	sts	0x3391, r24
		    display_clearBuffer();
    8e7c:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <display_clearBuffer>
		    display_writeBufferToScreen();
    8e80:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    8e84:	1e cc       	rjmp	.-1988   	; 0x86c2 <__vector_77+0x368>
	    } else if(currentMode == sensorMode && Dpad_CheckButton(Up)){
		    currentMode = recordMode;
    8e86:	10 92 91 33 	sts	0x3391, r1
		    display_clearBuffer();
    8e8a:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <display_clearBuffer>
		    display_writeBufferToScreen();
    8e8e:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    8e92:	20 ea       	ldi	r18, 0xA0	; 160
    8e94:	3f e0       	ldi	r19, 0x0F	; 15
    8e96:	40 e7       	ldi	r20, 0x70	; 112
    8e98:	51 e0       	ldi	r21, 0x01	; 1
    8e9a:	e3 ca       	rjmp	.-2618   	; 0x8462 <__vector_77+0x108>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8e9c:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8ea0:	8c 77       	andi	r24, 0x7C	; 124
    8ea2:	82 fd       	sbrc	r24, 2
    8ea4:	f2 ca       	rjmp	.-2588   	; 0x848a <__vector_77+0x130>
    8ea6:	07 cb       	rjmp	.-2546   	; 0x84b6 <__vector_77+0x15c>
                Leds_Set(wifi_Red);
		    }
	    } else if(currentMode == recordMode && !recording && !SD_Inserted()){
		    Leds_Set(sd_Red);
		    Leds_Clear(sd_Green);
	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){
    8ea8:	80 91 6d 33 	lds	r24, 0x336D
    8eac:	88 23       	and	r24, r24
    8eae:	09 f0       	breq	.+2      	; 0x8eb2 <__vector_77+0xb58>
    8eb0:	7b cb       	rjmp	.-2314   	; 0x85a8 <__vector_77+0x24e>
    8eb2:	1f cb       	rjmp	.-2498   	; 0x84f2 <__vector_77+0x198>
		        Leds_Set(sd_Red);

            }


	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){
    8eb4:	80 91 6d 33 	lds	r24, 0x336D
    8eb8:	88 23       	and	r24, r24
    8eba:	09 f4       	brne	.+2      	; 0x8ebe <__vector_77+0xb64>
    8ebc:	02 cc       	rjmp	.-2044   	; 0x86c2 <__vector_77+0x368>
    8ebe:	7f cb       	rjmp	.-2306   	; 0x85be <__vector_77+0x264>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8ec0:	81 e0       	ldi	r24, 0x01	; 1
    8ec2:	e6 cb       	rjmp	.-2100   	; 0x8690 <__vector_77+0x336>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8ec4:	e0 e2       	ldi	r30, 0x20	; 32
    8ec6:	f6 e0       	ldi	r31, 0x06	; 6
    8ec8:	80 e2       	ldi	r24, 0x20	; 32
    8eca:	85 83       	std	Z+5, r24	; 0x05
    8ecc:	04 c0       	rjmp	.+8      	; 0x8ed6 <__vector_77+0xb7c>
    8ece:	e0 e2       	ldi	r30, 0x20	; 32
    8ed0:	f6 e0       	ldi	r31, 0x06	; 6
    8ed2:	80 e2       	ldi	r24, 0x20	; 32
    8ed4:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8ed6:	80 e1       	ldi	r24, 0x10	; 16
    8ed8:	85 83       	std	Z+5, r24	; 0x05
    8eda:	ea cb       	rjmp	.-2092   	; 0x86b0 <__vector_77+0x356>
			    chargeComplete = true;
			    okToCharge  = false;
		    }


		    if(SD2_Inserted() && chargeComplete){
    8edc:	80 91 66 33 	lds	r24, 0x3366
    8ee0:	88 23       	and	r24, r24
    8ee2:	09 f4       	brne	.+2      	; 0x8ee6 <__vector_77+0xb8c>
    8ee4:	f2 cc       	rjmp	.-1564   	; 0x88ca <__vector_77+0x570>
    8ee6:	df cc       	rjmp	.-1602   	; 0x88a6 <__vector_77+0x54c>
			    display_putString("Ext Charged      ",3,0,System5x7);
			    if(!recording){
				    Leds_Clear(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    } else if(SD2_Inserted() && !chargeComplete){
    8ee8:	80 91 66 33 	lds	r24, 0x3366
    8eec:	88 23       	and	r24, r24
    8eee:	09 f0       	breq	.+2      	; 0x8ef2 <__vector_77+0xb98>
    8ef0:	5c cd       	rjmp	.-1352   	; 0x89aa <__vector_77+0x650>
    8ef2:	f0 cc       	rjmp	.-1568   	; 0x88d4 <__vector_77+0x57a>
		    if(chargePercent == 100){
                chargeComplete = true;
			    okToCharge  = false;
		    }

    		if(SD2_Inserted() && chargeComplete && !recording){
    8ef4:	80 91 66 33 	lds	r24, 0x3366
    8ef8:	88 23       	and	r24, r24
    8efa:	09 f4       	brne	.+2      	; 0x8efe <__vector_77+0xba4>
    8efc:	73 cf       	rjmp	.-282    	; 0x8de4 <__vector_77+0xa8a>
    8efe:	69 cf       	rjmp	.-302    	; 0x8dd2 <__vector_77+0xa78>
    			Leds_Clear(ext_Red);
    			Leds_Set(ext_Green);
    		} else if(SD2_Inserted() && !chargeComplete){
    8f00:	80 91 66 33 	lds	r24, 0x3366
    8f04:	88 23       	and	r24, r24
    8f06:	09 f0       	breq	.+2      	; 0x8f0a <__vector_77+0xbb0>
    8f08:	a9 cf       	rjmp	.-174    	; 0x8e5c <__vector_77+0xb02>
    8f0a:	71 cf       	rjmp	.-286    	; 0x8dee <__vector_77+0xa94>
		    	Leds_Clear(ext_Red);
			    Leds_Clear(ext_Green);
	    	}
	    }
    }
}
    8f0c:	ff 91       	pop	r31
    8f0e:	ef 91       	pop	r30
    8f10:	bf 91       	pop	r27
    8f12:	af 91       	pop	r26
    8f14:	9f 91       	pop	r25
    8f16:	8f 91       	pop	r24
    8f18:	7f 91       	pop	r23
    8f1a:	6f 91       	pop	r22
    8f1c:	5f 91       	pop	r21
    8f1e:	4f 91       	pop	r20
    8f20:	3f 91       	pop	r19
    8f22:	2f 91       	pop	r18
    8f24:	1f 91       	pop	r17
    8f26:	0f 91       	pop	r16
    8f28:	ff 90       	pop	r15
    8f2a:	ef 90       	pop	r14
    8f2c:	df 90       	pop	r13
    8f2e:	cf 90       	pop	r12
    8f30:	bf 90       	pop	r11
    8f32:	af 90       	pop	r10
    8f34:	0f 90       	pop	r0
    8f36:	0b be       	out	0x3b, r0	; 59
    8f38:	0f 90       	pop	r0
    8f3a:	0f be       	out	0x3f, r0	; 63
    8f3c:	0f 90       	pop	r0
    8f3e:	1f 90       	pop	r1
    8f40:	18 95       	reti

00008f42 <Debug_TriggerUpload>:
      to--;
    }
    return false;
}

bool Debug_TriggerUpload(uint32_t size, uint16_t timeOut){
    8f42:	af 92       	push	r10
    8f44:	bf 92       	push	r11
    8f46:	cf 92       	push	r12
    8f48:	df 92       	push	r13
    8f4a:	ef 92       	push	r14
    8f4c:	ff 92       	push	r15
    8f4e:	0f 93       	push	r16
    8f50:	1f 93       	push	r17
    8f52:	df 93       	push	r29
    8f54:	cf 93       	push	r28
    8f56:	cd b7       	in	r28, 0x3d	; 61
    8f58:	de b7       	in	r29, 0x3e	; 62
    8f5a:	64 97       	sbiw	r28, 0x14	; 20
    8f5c:	cd bf       	out	0x3d, r28	; 61
    8f5e:	de bf       	out	0x3e, r29	; 62
    8f60:	6b 01       	movw	r12, r22
    8f62:	7c 01       	movw	r14, r24
    8f64:	b4 2e       	mov	r11, r20
    8f66:	a5 2e       	mov	r10, r21
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
    8f68:	80 91 3a 33 	lds	r24, 0x333A
    8f6c:	90 91 3b 33 	lds	r25, 0x333B
    8f70:	80 93 3c 33 	sts	0x333C, r24
    8f74:	90 93 3d 33 	sts	0x333D, r25
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8f78:	80 91 a1 08 	lds	r24, 0x08A1
    8f7c:	85 ff       	sbrs	r24, 5
    8f7e:	fc cf       	rjmp	.-8      	; 0x8f78 <Debug_TriggerUpload+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8f80:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8f84:	85 e5       	ldi	r24, 0x55	; 85
    8f86:	80 93 a0 08 	sts	0x08A0, r24
   char fileSize [20];

   Debug_ClearBuffer();
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
    8f8a:	8d b7       	in	r24, 0x3d	; 61
    8f8c:	9e b7       	in	r25, 0x3e	; 62
    8f8e:	08 97       	sbiw	r24, 0x08	; 8
    8f90:	8d bf       	out	0x3d, r24	; 61
    8f92:	9e bf       	out	0x3e, r25	; 62
    8f94:	ed b7       	in	r30, 0x3d	; 61
    8f96:	fe b7       	in	r31, 0x3e	; 62
    8f98:	31 96       	adiw	r30, 0x01	; 1
    8f9a:	8e 01       	movw	r16, r28
    8f9c:	0f 5f       	subi	r16, 0xFF	; 255
    8f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    8fa0:	ad b7       	in	r26, 0x3d	; 61
    8fa2:	be b7       	in	r27, 0x3e	; 62
    8fa4:	11 96       	adiw	r26, 0x01	; 1
    8fa6:	0d 93       	st	X+, r16
    8fa8:	1c 93       	st	X, r17
    8faa:	12 97       	sbiw	r26, 0x02	; 2
    8fac:	85 ea       	ldi	r24, 0xA5	; 165
    8fae:	92 e2       	ldi	r25, 0x22	; 34
    8fb0:	82 83       	std	Z+2, r24	; 0x02
    8fb2:	93 83       	std	Z+3, r25	; 0x03
    8fb4:	c4 82       	std	Z+4, r12	; 0x04
    8fb6:	d5 82       	std	Z+5, r13	; 0x05
    8fb8:	e6 82       	std	Z+6, r14	; 0x06
    8fba:	f7 82       	std	Z+7, r15	; 0x07
    8fbc:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
   Debug_SendString(fileSize,true);
    8fc0:	8d b7       	in	r24, 0x3d	; 61
    8fc2:	9e b7       	in	r25, 0x3e	; 62
    8fc4:	08 96       	adiw	r24, 0x08	; 8
    8fc6:	8d bf       	out	0x3d, r24	; 61
    8fc8:	9e bf       	out	0x3e, r25	; 62
    8fca:	c8 01       	movw	r24, r16
    8fcc:	61 e0       	ldi	r22, 0x01	; 1
    8fce:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    8fd2:	2b 2d       	mov	r18, r11
    8fd4:	3a 2d       	mov	r19, r10
    8fd6:	c9 01       	movw	r24, r18
    8fd8:	ac 01       	movw	r20, r24
    8fda:	66 e6       	ldi	r22, 0x66	; 102
    8fdc:	7e e0       	ldi	r23, 0x0E	; 14
    8fde:	10 c0       	rjmp	.+32     	; 0x9000 <Debug_TriggerUpload+0xbe>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    8fe0:	20 91 3c 33 	lds	r18, 0x333C
    8fe4:	30 91 3d 33 	lds	r19, 0x333D
    8fe8:	80 91 3a 33 	lds	r24, 0x333A
    8fec:	90 91 3b 33 	lds	r25, 0x333B
    8ff0:	28 17       	cp	r18, r24
    8ff2:	39 07       	cpc	r19, r25
    8ff4:	c1 f4       	brne	.+48     	; 0x9026 <Debug_TriggerUpload+0xe4>
    8ff6:	cb 01       	movw	r24, r22
    8ff8:	01 97       	sbiw	r24, 0x01	; 1
    8ffa:	f1 f7       	brne	.-4      	; 0x8ff8 <Debug_TriggerUpload+0xb6>
         } else {
           return false;
         }
      }
      _delay_ms(1);
      to--;
    8ffc:	41 50       	subi	r20, 0x01	; 1
    8ffe:	50 40       	sbci	r21, 0x00	; 0
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
    9000:	41 15       	cp	r20, r1
    9002:	51 05       	cpc	r21, r1
    9004:	69 f7       	brne	.-38     	; 0x8fe0 <Debug_TriggerUpload+0x9e>
    9006:	90 e0       	ldi	r25, 0x00	; 0
      _delay_ms(1);
      to--;
    }
    return false;

}
    9008:	89 2f       	mov	r24, r25
    900a:	64 96       	adiw	r28, 0x14	; 20
    900c:	cd bf       	out	0x3d, r28	; 61
    900e:	de bf       	out	0x3e, r29	; 62
    9010:	cf 91       	pop	r28
    9012:	df 91       	pop	r29
    9014:	1f 91       	pop	r17
    9016:	0f 91       	pop	r16
    9018:	ff 90       	pop	r15
    901a:	ef 90       	pop	r14
    901c:	df 90       	pop	r13
    901e:	cf 90       	pop	r12
    9020:	bf 90       	pop	r11
    9022:	af 90       	pop	r10
    9024:	08 95       	ret
   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
      if(Debug_CharReadyToRead()){
         if(Debug_GetByte(true) == 'Y'){
    9026:	81 e0       	ldi	r24, 0x01	; 1
    9028:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
    902c:	90 e0       	ldi	r25, 0x00	; 0
    902e:	89 35       	cpi	r24, 0x59	; 89
    9030:	59 f7       	brne	.-42     	; 0x9008 <Debug_TriggerUpload+0xc6>
    9032:	91 e0       	ldi	r25, 0x01	; 1
    9034:	e9 cf       	rjmp	.-46     	; 0x9008 <Debug_TriggerUpload+0xc6>

00009036 <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    9036:	af 92       	push	r10
    9038:	bf 92       	push	r11
    903a:	cf 92       	push	r12
    903c:	df 92       	push	r13
    903e:	ff 92       	push	r15
    9040:	0f 93       	push	r16
    9042:	1f 93       	push	r17
    9044:	df 93       	push	r29
    9046:	cf 93       	push	r28
    9048:	cd b7       	in	r28, 0x3d	; 61
    904a:	de b7       	in	r29, 0x3e	; 62
    904c:	c5 55       	subi	r28, 0x55	; 85
    904e:	d0 40       	sbci	r29, 0x00	; 0
    9050:	cd bf       	out	0x3d, r28	; 61
    9052:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp=0;
	char string [70];
    char timeString[15];

	Wifi_ClearBuffer();
    9054:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
    9058:	8b ea       	ldi	r24, 0xAB	; 171
    905a:	92 e2       	ldi	r25, 0x22	; 34
    905c:	64 eb       	ldi	r22, 0xB4	; 180
    905e:	72 e2       	ldi	r23, 0x22	; 34
    9060:	ab 01       	movw	r20, r22
    9062:	24 ef       	ldi	r18, 0xF4	; 244
    9064:	31 e0       	ldi	r19, 0x01	; 1
    9066:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    906a:	88 23       	and	r24, r24
    906c:	09 f4       	brne	.+2      	; 0x9070 <Wifi_GetTime+0x3a>
    906e:	56 c0       	rjmp	.+172    	; 0x911c <Wifi_GetTime+0xe6>
    9070:	84 ef       	ldi	r24, 0xF4	; 244
    9072:	91 e0       	ldi	r25, 0x01	; 1
    9074:	20 e7       	ldi	r18, 0x70	; 112
    9076:	31 e0       	ldi	r19, 0x01	; 1
    9078:	f9 01       	movw	r30, r18
    907a:	31 97       	sbiw	r30, 0x01	; 1
    907c:	f1 f7       	brne	.-4      	; 0x907a <Wifi_GetTime+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    907e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9080:	d9 f7       	brne	.-10     	; 0x9078 <Wifi_GetTime+0x42>
    9082:	40 e1       	ldi	r20, 0x10	; 16
    9084:	c4 2e       	mov	r12, r20
    9086:	d1 2c       	mov	r13, r1
    9088:	cc 0e       	add	r12, r28
    908a:	dd 1e       	adc	r13, r29
    908c:	86 01       	movw	r16, r12


	_delay_ms(50);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 70){
    908e:	36 e5       	ldi	r19, 0x56	; 86
    9090:	a3 2e       	mov	r10, r19
    9092:	b1 2c       	mov	r11, r1
    9094:	ac 0e       	add	r10, r28
    9096:	bd 1e       	adc	r11, r29
    9098:	09 c0       	rjmp	.+18     	; 0x90ac <Wifi_GetTime+0x76>
    909a:	0a 15       	cp	r16, r10
    909c:	1b 05       	cpc	r17, r11
    909e:	79 f0       	breq	.+30     	; 0x90be <Wifi_GetTime+0x88>
			string[tmp] = Wifi_GetByte(false);
    90a0:	80 e0       	ldi	r24, 0x00	; 0
    90a2:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    90a6:	f8 01       	movw	r30, r16
    90a8:	81 93       	st	Z+, r24
    90aa:	8f 01       	movw	r16, r30
    90ac:	f0 2e       	mov	r15, r16
    90ae:	fc 18       	sub	r15, r12
	}


	_delay_ms(50);
	
	while(Wifi_CharReadyToRead()){
    90b0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    90b4:	88 23       	and	r24, r24
    90b6:	89 f7       	brne	.-30     	; 0x909a <Wifi_GetTime+0x64>
			break;
		}
	}

	
	if(tmp < 4){
    90b8:	f3 e0       	ldi	r31, 0x03	; 3
    90ba:	ff 15       	cp	r31, r15
    90bc:	78 f5       	brcc	.+94     	; 0x911c <Wifi_GetTime+0xe6>
		return false;
	}
	
	if(strstr(string,"NOT SET") != 0){
    90be:	8e 01       	movw	r16, r28
    90c0:	00 5f       	subi	r16, 0xF0	; 240
    90c2:	1f 4f       	sbci	r17, 0xFF	; 255
    90c4:	c8 01       	movw	r24, r16
    90c6:	6a eb       	ldi	r22, 0xBA	; 186
    90c8:	72 e2       	ldi	r23, 0x22	; 34
    90ca:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    90ce:	00 97       	sbiw	r24, 0x00	; 0
    90d0:	31 f0       	breq	.+12     	; 0x90de <Wifi_GetTime+0xa8>
	    Debug_SendString("Time is not set",true);
    90d2:	82 ec       	ldi	r24, 0xC2	; 194
    90d4:	92 e2       	ldi	r25, 0x22	; 34
    90d6:	61 e0       	ldi	r22, 0x01	; 1
    90d8:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    90dc:	1f c0       	rjmp	.+62     	; 0x911c <Wifi_GetTime+0xe6>
		return false;
	}

    memcpy(timeString,(strstr(string,"RTC=")+4),10);
    90de:	c8 01       	movw	r24, r16
    90e0:	62 ed       	ldi	r22, 0xD2	; 210
    90e2:	72 e2       	ldi	r23, 0x22	; 34
    90e4:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    90e8:	de 01       	movw	r26, r28
    90ea:	11 96       	adiw	r26, 0x01	; 1
    90ec:	fc 01       	movw	r30, r24
    90ee:	34 96       	adiw	r30, 0x04	; 4
    90f0:	8a e0       	ldi	r24, 0x0A	; 10
    90f2:	01 90       	ld	r0, Z+
    90f4:	0d 92       	st	X+, r0
    90f6:	81 50       	subi	r24, 0x01	; 1
    90f8:	e1 f7       	brne	.-8      	; 0x90f2 <Wifi_GetTime+0xbc>
    timeString[10] = 0;
    90fa:	1b 86       	std	Y+11, r1	; 0x0b
    time_secs = atol(timeString);
    90fc:	ce 01       	movw	r24, r28
    90fe:	01 96       	adiw	r24, 0x01	; 1
    9100:	0e 94 98 5c 	call	0xb930	; 0xb930 <atol>
    9104:	9b 01       	movw	r18, r22
    9106:	ac 01       	movw	r20, r24
    9108:	20 93 46 33 	sts	0x3346, r18
    910c:	30 93 47 33 	sts	0x3347, r19
    9110:	40 93 48 33 	sts	0x3348, r20
    9114:	50 93 49 33 	sts	0x3349, r21
    9118:	81 e0       	ldi	r24, 0x01	; 1
    911a:	01 c0       	rjmp	.+2      	; 0x911e <Wifi_GetTime+0xe8>
    return true;
    911c:	80 e0       	ldi	r24, 0x00	; 0
}
    911e:	cb 5a       	subi	r28, 0xAB	; 171
    9120:	df 4f       	sbci	r29, 0xFF	; 255
    9122:	cd bf       	out	0x3d, r28	; 61
    9124:	de bf       	out	0x3e, r29	; 62
    9126:	cf 91       	pop	r28
    9128:	df 91       	pop	r29
    912a:	1f 91       	pop	r17
    912c:	0f 91       	pop	r16
    912e:	ff 90       	pop	r15
    9130:	df 90       	pop	r13
    9132:	cf 90       	pop	r12
    9134:	bf 90       	pop	r11
    9136:	af 90       	pop	r10
    9138:	08 95       	ret

0000913a <SD_Open>:
    //f_mount(2, &fso2);
	return tmp;
}


uint8_t SD_Open(char string []){
    913a:	cf 93       	push	r28
    913c:	df 93       	push	r29
    913e:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    9140:	85 e9       	ldi	r24, 0x95	; 149
    9142:	9c e3       	ldi	r25, 0x3C	; 60
    9144:	be 01       	movw	r22, r28
    9146:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
	strupr(currentLogFile);
    914a:	85 e9       	ldi	r24, 0x95	; 149
    914c:	9c e3       	ldi	r25, 0x3C	; 60
    914e:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <strupr>
    9152:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    9154:	a5 e9       	ldi	r26, 0x95	; 149
    9156:	bc e3       	ldi	r27, 0x3C	; 60
    9158:	07 c0       	rjmp	.+14     	; 0x9168 <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    915a:	fc 01       	movw	r30, r24
    915c:	eb 56       	subi	r30, 0x6B	; 107
    915e:	f3 4c       	sbci	r31, 0xC3	; 195
    9160:	80 81       	ld	r24, Z
    9162:	31 97       	sbiw	r30, 0x01	; 1
    9164:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    9166:	2f 5f       	subi	r18, 0xFF	; 255
    9168:	fd 01       	movw	r30, r26
    916a:	01 90       	ld	r0, Z+
    916c:	00 20       	and	r0, r0
    916e:	e9 f7       	brne	.-6      	; 0x916a <SD_Open+0x30>
    9170:	31 97       	sbiw	r30, 0x01	; 1
    9172:	e5 59       	subi	r30, 0x95	; 149
    9174:	fc 43       	sbci	r31, 0x3C	; 60
    9176:	82 2f       	mov	r24, r18
    9178:	90 e0       	ldi	r25, 0x00	; 0
    917a:	8e 17       	cp	r24, r30
    917c:	9f 07       	cpc	r25, r31
    917e:	68 f3       	brcs	.-38     	; 0x915a <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    9180:	ec 56       	subi	r30, 0x6C	; 108
    9182:	f3 4c       	sbci	r31, 0xC3	; 195
    9184:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9186:	87 ec       	ldi	r24, 0xC7	; 199
    9188:	9e e4       	ldi	r25, 0x4E	; 78
    918a:	be 01       	movw	r22, r28
    918c:	43 e1       	ldi	r20, 0x13	; 19
    918e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <f_open>
}
    9192:	df 91       	pop	r29
    9194:	cf 91       	pop	r28
    9196:	08 95       	ret

00009198 <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    9198:	0f 93       	push	r16
    919a:	1f 93       	push	r17
    919c:	cf 93       	push	r28
    919e:	df 93       	push	r29

	SD_Open("/config.txt");
    91a0:	87 ed       	ldi	r24, 0xD7	; 215
    91a2:	92 e2       	ldi	r25, 0x22	; 34
    91a4:	0e 94 9d 48 	call	0x913a	; 0x913a <SD_Open>
               break;
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
    91a8:	cb ea       	ldi	r28, 0xAB	; 171
    91aa:	db e5       	ldi	r29, 0x5B	; 91
	      strtok(temp,"=");
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
    91ac:	03 e1       	ldi	r16, 0x13	; 19
    91ae:	1a e4       	ldi	r17, 0x4A	; 74
void Read_config_file(void){

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    91b0:	85 ea       	ldi	r24, 0xA5	; 165
    91b2:	99 e4       	ldi	r25, 0x49	; 73
    91b4:	62 e3       	ldi	r22, 0x32	; 50
    91b6:	70 e0       	ldi	r23, 0x00	; 0
    91b8:	47 ec       	ldi	r20, 0xC7	; 199
    91ba:	5e e4       	ldi	r21, 0x4E	; 78
    91bc:	0e 94 ce 2a 	call	0x559c	; 0x559c <f_gets>
	  if(temp[0] != 0){
    91c0:	80 91 a5 49 	lds	r24, 0x49A5
    91c4:	88 23       	and	r24, r24
    91c6:	09 f4       	brne	.+2      	; 0x91ca <Read_config_file+0x32>
    91c8:	9f c1       	rjmp	.+830    	; 0x9508 <Read_config_file+0x370>
	    if(strstr(temp,"ssid") != 0){
    91ca:	85 ea       	ldi	r24, 0xA5	; 165
    91cc:	99 e4       	ldi	r25, 0x49	; 73
    91ce:	63 ee       	ldi	r22, 0xE3	; 227
    91d0:	72 e2       	ldi	r23, 0x22	; 34
    91d2:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    91d6:	00 97       	sbiw	r24, 0x00	; 0
    91d8:	a9 f0       	breq	.+42     	; 0x9204 <Read_config_file+0x6c>
	      strtok(temp,"=");
    91da:	85 ea       	ldi	r24, 0xA5	; 165
    91dc:	99 e4       	ldi	r25, 0x49	; 73
    91de:	68 ee       	ldi	r22, 0xE8	; 232
    91e0:	72 e2       	ldi	r23, 0x22	; 34
    91e2:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcat(ssid,strtok(NULL,"="));
    91e6:	80 e0       	ldi	r24, 0x00	; 0
    91e8:	90 e0       	ldi	r25, 0x00	; 0
    91ea:	68 ee       	ldi	r22, 0xE8	; 232
    91ec:	72 e2       	ldi	r23, 0x22	; 34
    91ee:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    91f2:	bc 01       	movw	r22, r24
    91f4:	89 e5       	ldi	r24, 0x59	; 89
    91f6:	90 e3       	ldi	r25, 0x30	; 48
    91f8:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	      ssidRead = true;
    91fc:	81 e0       	ldi	r24, 0x01	; 1
    91fe:	80 93 8d 33 	sts	0x338D, r24
    9202:	d6 cf       	rjmp	.-84     	; 0x91b0 <Read_config_file+0x18>
	    } else if(strstr(temp,"phrase") != 0){
    9204:	85 ea       	ldi	r24, 0xA5	; 165
    9206:	99 e4       	ldi	r25, 0x49	; 73
    9208:	6a ee       	ldi	r22, 0xEA	; 234
    920a:	72 e2       	ldi	r23, 0x22	; 34
    920c:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    9210:	00 97       	sbiw	r24, 0x00	; 0
    9212:	a9 f0       	breq	.+42     	; 0x923e <Read_config_file+0xa6>
	      strtok(temp,"=");
    9214:	85 ea       	ldi	r24, 0xA5	; 165
    9216:	99 e4       	ldi	r25, 0x49	; 73
    9218:	68 ee       	ldi	r22, 0xE8	; 232
    921a:	72 e2       	ldi	r23, 0x22	; 34
    921c:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcat(phrase,strtok(NULL,"="));
    9220:	80 e0       	ldi	r24, 0x00	; 0
    9222:	90 e0       	ldi	r25, 0x00	; 0
    9224:	68 ee       	ldi	r22, 0xE8	; 232
    9226:	72 e2       	ldi	r23, 0x22	; 34
    9228:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    922c:	bc 01       	movw	r22, r24
    922e:	85 ef       	ldi	r24, 0xF5	; 245
    9230:	9f e2       	ldi	r25, 0x2F	; 47
    9232:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	      phraseRead = true;
    9236:	81 e0       	ldi	r24, 0x01	; 1
    9238:	80 93 8a 33 	sts	0x338A, r24
    923c:	b9 cf       	rjmp	.-142    	; 0x91b0 <Read_config_file+0x18>
	    } else if(strstr(temp,"key") != 0){
    923e:	85 ea       	ldi	r24, 0xA5	; 165
    9240:	99 e4       	ldi	r25, 0x49	; 73
    9242:	61 ef       	ldi	r22, 0xF1	; 241
    9244:	72 e2       	ldi	r23, 0x22	; 34
    9246:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    924a:	00 97       	sbiw	r24, 0x00	; 0
    924c:	a9 f0       	breq	.+42     	; 0x9278 <Read_config_file+0xe0>
	      strtok(temp,"=");
    924e:	85 ea       	ldi	r24, 0xA5	; 165
    9250:	99 e4       	ldi	r25, 0x49	; 73
    9252:	68 ee       	ldi	r22, 0xE8	; 232
    9254:	72 e2       	ldi	r23, 0x22	; 34
    9256:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcat(key,strtok(NULL,"="));
    925a:	80 e0       	ldi	r24, 0x00	; 0
    925c:	90 e0       	ldi	r25, 0x00	; 0
    925e:	68 ee       	ldi	r22, 0xE8	; 232
    9260:	72 e2       	ldi	r23, 0x22	; 34
    9262:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9266:	bc 01       	movw	r22, r24
    9268:	87 e2       	ldi	r24, 0x27	; 39
    926a:	90 e3       	ldi	r25, 0x30	; 48
    926c:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	      keyRead = true;
    9270:	81 e0       	ldi	r24, 0x01	; 1
    9272:	80 93 8b 33 	sts	0x338B, r24
    9276:	9c cf       	rjmp	.-200    	; 0x91b0 <Read_config_file+0x18>
	    } else if(strstr(temp,"port") != 0){
    9278:	85 ea       	ldi	r24, 0xA5	; 165
    927a:	99 e4       	ldi	r25, 0x49	; 73
    927c:	65 ef       	ldi	r22, 0xF5	; 245
    927e:	72 e2       	ldi	r23, 0x22	; 34
    9280:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    9284:	00 97       	sbiw	r24, 0x00	; 0
    9286:	a9 f0       	breq	.+42     	; 0x92b2 <Read_config_file+0x11a>
	      strtok(temp,"=");
    9288:	85 ea       	ldi	r24, 0xA5	; 165
    928a:	99 e4       	ldi	r25, 0x49	; 73
    928c:	68 ee       	ldi	r22, 0xE8	; 232
    928e:	72 e2       	ldi	r23, 0x22	; 34
    9290:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcpy(port,strtok(NULL,"="));
    9294:	80 e0       	ldi	r24, 0x00	; 0
    9296:	90 e0       	ldi	r25, 0x00	; 0
    9298:	68 ee       	ldi	r22, 0xE8	; 232
    929a:	72 e2       	ldi	r23, 0x22	; 34
    929c:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    92a0:	bc 01       	movw	r22, r24
    92a2:	89 e7       	ldi	r24, 0x79	; 121
    92a4:	9b e5       	ldi	r25, 0x5B	; 91
    92a6:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
	      portRead = true;
    92aa:	81 e0       	ldi	r24, 0x01	; 1
    92ac:	80 93 8c 33 	sts	0x338C, r24
    92b0:	7f cf       	rjmp	.-258    	; 0x91b0 <Read_config_file+0x18>
	    } else if(strstr(temp,"auth") != 0){
    92b2:	85 ea       	ldi	r24, 0xA5	; 165
    92b4:	99 e4       	ldi	r25, 0x49	; 73
    92b6:	6a ef       	ldi	r22, 0xFA	; 250
    92b8:	72 e2       	ldi	r23, 0x22	; 34
    92ba:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    92be:	00 97       	sbiw	r24, 0x00	; 0
    92c0:	a9 f0       	breq	.+42     	; 0x92ec <Read_config_file+0x154>
	      strtok(temp,"=");
    92c2:	85 ea       	ldi	r24, 0xA5	; 165
    92c4:	99 e4       	ldi	r25, 0x49	; 73
    92c6:	68 ee       	ldi	r22, 0xE8	; 232
    92c8:	72 e2       	ldi	r23, 0x22	; 34
    92ca:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcat(auth,strtok(NULL,"="));
    92ce:	80 e0       	ldi	r24, 0x00	; 0
    92d0:	90 e0       	ldi	r25, 0x00	; 0
    92d2:	68 ee       	ldi	r22, 0xE8	; 232
    92d4:	72 e2       	ldi	r23, 0x22	; 34
    92d6:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    92da:	bc 01       	movw	r22, r24
    92dc:	83 ec       	ldi	r24, 0xC3	; 195
    92de:	9f e2       	ldi	r25, 0x2F	; 47
    92e0:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	      authRead = true;
    92e4:	81 e0       	ldi	r24, 0x01	; 1
    92e6:	80 93 89 33 	sts	0x3389, r24
    92ea:	62 cf       	rjmp	.-316    	; 0x91b0 <Read_config_file+0x18>
	     }else if(strstr(temp,"user") != 0){
    92ec:	85 ea       	ldi	r24, 0xA5	; 165
    92ee:	99 e4       	ldi	r25, 0x49	; 73
    92f0:	6f ef       	ldi	r22, 0xFF	; 255
    92f2:	72 e2       	ldi	r23, 0x22	; 34
    92f4:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    92f8:	00 97       	sbiw	r24, 0x00	; 0
    92fa:	39 f1       	breq	.+78     	; 0x934a <Read_config_file+0x1b2>
	      strtok(temp,"=");
    92fc:	85 ea       	ldi	r24, 0xA5	; 165
    92fe:	99 e4       	ldi	r25, 0x49	; 73
    9300:	68 ee       	ldi	r22, 0xE8	; 232
    9302:	72 e2       	ldi	r23, 0x22	; 34
    9304:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcpy(user,strtok(NULL,"="));
    9308:	80 e0       	ldi	r24, 0x00	; 0
    930a:	90 e0       	ldi	r25, 0x00	; 0
    930c:	68 ee       	ldi	r22, 0xE8	; 232
    930e:	72 e2       	ldi	r23, 0x22	; 34
    9310:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9314:	bc 01       	movw	r22, r24
    9316:	83 e1       	ldi	r24, 0x13	; 19
    9318:	9a e4       	ldi	r25, 0x4A	; 74
    931a:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
	      for(uint8_t i = 0; i < strlen(user); i++){
    931e:	f8 01       	movw	r30, r16
    9320:	01 90       	ld	r0, Z+
    9322:	00 20       	and	r0, r0
    9324:	e9 f7       	brne	.-6      	; 0x9320 <Read_config_file+0x188>
    9326:	31 97       	sbiw	r30, 0x01	; 1
    9328:	e3 51       	subi	r30, 0x13	; 19
    932a:	fa 44       	sbci	r31, 0x4A	; 74
    932c:	20 e0       	ldi	r18, 0x00	; 0
    932e:	07 c0       	rjmp	.+14     	; 0x933e <Read_config_file+0x1a6>
            if(user[i] < ' '){
    9330:	dc 01       	movw	r26, r24
    9332:	ad 5e       	subi	r26, 0xED	; 237
    9334:	b5 4b       	sbci	r27, 0xB5	; 181
    9336:	8c 91       	ld	r24, X
    9338:	80 32       	cpi	r24, 0x20	; 32
    933a:	78 f1       	brcs	.+94     	; 0x939a <Read_config_file+0x202>
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
	      for(uint8_t i = 0; i < strlen(user); i++){
    933c:	2f 5f       	subi	r18, 0xFF	; 255
    933e:	82 2f       	mov	r24, r18
    9340:	90 e0       	ldi	r25, 0x00	; 0
    9342:	8e 17       	cp	r24, r30
    9344:	9f 07       	cpc	r25, r31
    9346:	a0 f3       	brcs	.-24     	; 0x9330 <Read_config_file+0x198>
    9348:	33 cf       	rjmp	.-410    	; 0x91b0 <Read_config_file+0x18>
            if(user[i] < ' '){
               user[i] = 0;
               break;
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
    934a:	85 ea       	ldi	r24, 0xA5	; 165
    934c:	99 e4       	ldi	r25, 0x49	; 73
    934e:	64 e0       	ldi	r22, 0x04	; 4
    9350:	73 e2       	ldi	r23, 0x23	; 35
    9352:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    9356:	00 97       	sbiw	r24, 0x00	; 0
    9358:	49 f1       	breq	.+82     	; 0x93ac <Read_config_file+0x214>
	      strtok(temp,"=");
    935a:	85 ea       	ldi	r24, 0xA5	; 165
    935c:	99 e4       	ldi	r25, 0x49	; 73
    935e:	68 ee       	ldi	r22, 0xE8	; 232
    9360:	72 e2       	ldi	r23, 0x22	; 34
    9362:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcpy(nickname,strtok(NULL,"="));
    9366:	80 e0       	ldi	r24, 0x00	; 0
    9368:	90 e0       	ldi	r25, 0x00	; 0
    936a:	68 ee       	ldi	r22, 0xE8	; 232
    936c:	72 e2       	ldi	r23, 0x22	; 34
    936e:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9372:	bc 01       	movw	r22, r24
    9374:	8b ea       	ldi	r24, 0xAB	; 171
    9376:	9b e5       	ldi	r25, 0x5B	; 91
    9378:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
          for(uint8_t i = 0; i < strlen(nickname); i++){
    937c:	fe 01       	movw	r30, r28
    937e:	01 90       	ld	r0, Z+
    9380:	00 20       	and	r0, r0
    9382:	e9 f7       	brne	.-6      	; 0x937e <Read_config_file+0x1e6>
    9384:	31 97       	sbiw	r30, 0x01	; 1
    9386:	eb 5a       	subi	r30, 0xAB	; 171
    9388:	fb 45       	sbci	r31, 0x5B	; 91
    938a:	20 e0       	ldi	r18, 0x00	; 0
    938c:	09 c0       	rjmp	.+18     	; 0x93a0 <Read_config_file+0x208>
            if(nickname[i] < ' '){
    938e:	dc 01       	movw	r26, r24
    9390:	a5 55       	subi	r26, 0x55	; 85
    9392:	b4 4a       	sbci	r27, 0xA4	; 164
    9394:	8c 91       	ld	r24, X
    9396:	80 32       	cpi	r24, 0x20	; 32
    9398:	10 f4       	brcc	.+4      	; 0x939e <Read_config_file+0x206>
               nickname[i] = 0;
    939a:	1c 92       	st	X, r1
    939c:	09 cf       	rjmp	.-494    	; 0x91b0 <Read_config_file+0x18>
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
          for(uint8_t i = 0; i < strlen(nickname); i++){
    939e:	2f 5f       	subi	r18, 0xFF	; 255
    93a0:	82 2f       	mov	r24, r18
    93a2:	90 e0       	ldi	r25, 0x00	; 0
    93a4:	8e 17       	cp	r24, r30
    93a6:	9f 07       	cpc	r25, r31
    93a8:	90 f3       	brcs	.-28     	; 0x938e <Read_config_file+0x1f6>
    93aa:	02 cf       	rjmp	.-508    	; 0x91b0 <Read_config_file+0x18>
               nickname[i] = 0;
               break;
            }
          }

	    } else if(strstr(temp,"server") != 0){
    93ac:	85 ea       	ldi	r24, 0xA5	; 165
    93ae:	99 e4       	ldi	r25, 0x49	; 73
    93b0:	6d e0       	ldi	r22, 0x0D	; 13
    93b2:	73 e2       	ldi	r23, 0x23	; 35
    93b4:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    93b8:	00 97       	sbiw	r24, 0x00	; 0
    93ba:	91 f0       	breq	.+36     	; 0x93e0 <Read_config_file+0x248>
	      strtok(temp,"=");
    93bc:	85 ea       	ldi	r24, 0xA5	; 165
    93be:	99 e4       	ldi	r25, 0x49	; 73
    93c0:	68 ee       	ldi	r22, 0xE8	; 232
    93c2:	72 e2       	ldi	r23, 0x22	; 34
    93c4:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcat(serverOpenCommand,strtok(NULL,"="));
    93c8:	80 e0       	ldi	r24, 0x00	; 0
    93ca:	90 e0       	ldi	r25, 0x00	; 0
    93cc:	68 ee       	ldi	r22, 0xE8	; 232
    93ce:	72 e2       	ldi	r23, 0x22	; 34
    93d0:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    93d4:	bc 01       	movw	r22, r24
    93d6:	8b e8       	ldi	r24, 0x8B	; 139
    93d8:	90 e3       	ldi	r25, 0x30	; 48
    93da:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
    93de:	e8 ce       	rjmp	.-560    	; 0x91b0 <Read_config_file+0x18>
        } else if(strstr(temp,"daylightTime") != 0){
    93e0:	85 ea       	ldi	r24, 0xA5	; 165
    93e2:	99 e4       	ldi	r25, 0x49	; 73
    93e4:	64 e1       	ldi	r22, 0x14	; 20
    93e6:	73 e2       	ldi	r23, 0x23	; 35
    93e8:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    93ec:	00 97       	sbiw	r24, 0x00	; 0
    93ee:	81 f0       	breq	.+32     	; 0x9410 <Read_config_file+0x278>
	      strtok(temp,"=");
    93f0:	85 ea       	ldi	r24, 0xA5	; 165
    93f2:	99 e4       	ldi	r25, 0x49	; 73
    93f4:	68 ee       	ldi	r22, 0xE8	; 232
    93f6:	72 e2       	ldi	r23, 0x22	; 34
    93f8:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
	      strcpy(daylightTime,strtok(NULL,"="));
    93fc:	80 e0       	ldi	r24, 0x00	; 0
    93fe:	90 e0       	ldi	r25, 0x00	; 0
    9400:	68 ee       	ldi	r22, 0xE8	; 232
    9402:	72 e2       	ldi	r23, 0x22	; 34
    9404:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9408:	bc 01       	movw	r22, r24
    940a:	8c e8       	ldi	r24, 0x8C	; 140
    940c:	9a e4       	ldi	r25, 0x4A	; 74
    940e:	2f c0       	rjmp	.+94     	; 0x946e <Read_config_file+0x2d6>
        } else if(strstr(temp,"useWifi") != 0){
    9410:	85 ea       	ldi	r24, 0xA5	; 165
    9412:	99 e4       	ldi	r25, 0x49	; 73
    9414:	61 e2       	ldi	r22, 0x21	; 33
    9416:	73 e2       	ldi	r23, 0x23	; 35
    9418:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    941c:	00 97       	sbiw	r24, 0x00	; 0
    941e:	81 f0       	breq	.+32     	; 0x9440 <Read_config_file+0x2a8>
            strtok(temp,"=");
    9420:	85 ea       	ldi	r24, 0xA5	; 165
    9422:	99 e4       	ldi	r25, 0x49	; 73
    9424:	68 ee       	ldi	r22, 0xE8	; 232
    9426:	72 e2       	ldi	r23, 0x22	; 34
    9428:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
            strcpy(uploaderToUse,strtok(NULL,"="));
    942c:	80 e0       	ldi	r24, 0x00	; 0
    942e:	90 e0       	ldi	r25, 0x00	; 0
    9430:	68 ee       	ldi	r22, 0xE8	; 232
    9432:	72 e2       	ldi	r23, 0x22	; 34
    9434:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9438:	bc 01       	movw	r22, r24
    943a:	89 e0       	ldi	r24, 0x09	; 9
    943c:	9a e4       	ldi	r25, 0x4A	; 74
    943e:	17 c0       	rjmp	.+46     	; 0x946e <Read_config_file+0x2d6>
        } else if(strstr(temp,"demoMode") != 0){
    9440:	85 ea       	ldi	r24, 0xA5	; 165
    9442:	99 e4       	ldi	r25, 0x49	; 73
    9444:	69 e2       	ldi	r22, 0x29	; 41
    9446:	73 e2       	ldi	r23, 0x23	; 35
    9448:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    944c:	00 97       	sbiw	r24, 0x00	; 0
    944e:	91 f0       	breq	.+36     	; 0x9474 <Read_config_file+0x2dc>
            strtok(temp,"=");
    9450:	85 ea       	ldi	r24, 0xA5	; 165
    9452:	99 e4       	ldi	r25, 0x49	; 73
    9454:	68 ee       	ldi	r22, 0xE8	; 232
    9456:	72 e2       	ldi	r23, 0x22	; 34
    9458:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
            strcpy(demoModeString,strtok(NULL,"="));
    945c:	80 e0       	ldi	r24, 0x00	; 0
    945e:	90 e0       	ldi	r25, 0x00	; 0
    9460:	68 ee       	ldi	r22, 0xE8	; 232
    9462:	72 e2       	ldi	r23, 0x22	; 34
    9464:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9468:	bc 01       	movw	r22, r24
    946a:	8d e1       	ldi	r24, 0x1D	; 29
    946c:	9a e4       	ldi	r25, 0x4A	; 74
    946e:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
    9472:	9e ce       	rjmp	.-708    	; 0x91b0 <Read_config_file+0x18>
	    } else if(strstr(temp,"zone") != 0){
    9474:	85 ea       	ldi	r24, 0xA5	; 165
    9476:	99 e4       	ldi	r25, 0x49	; 73
    9478:	62 e3       	ldi	r22, 0x32	; 50
    947a:	73 e2       	ldi	r23, 0x23	; 35
    947c:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    9480:	00 97       	sbiw	r24, 0x00	; 0
    9482:	09 f4       	brne	.+2      	; 0x9486 <Read_config_file+0x2ee>
    9484:	95 ce       	rjmp	.-726    	; 0x91b0 <Read_config_file+0x18>
	      strtok(temp,"=");
    9486:	85 ea       	ldi	r24, 0xA5	; 165
    9488:	99 e4       	ldi	r25, 0x49	; 73
    948a:	68 ee       	ldi	r22, 0xE8	; 232
    948c:	72 e2       	ldi	r23, 0x22	; 34
    948e:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
          memmove(zone,strtok(NULL,"="),3);
    9492:	80 e0       	ldi	r24, 0x00	; 0
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	68 ee       	ldi	r22, 0xE8	; 232
    9498:	72 e2       	ldi	r23, 0x22	; 34
    949a:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    949e:	bc 01       	movw	r22, r24
    94a0:	8d eb       	ldi	r24, 0xBD	; 189
    94a2:	90 e3       	ldi	r25, 0x30	; 48
    94a4:	43 e0       	ldi	r20, 0x03	; 3
    94a6:	50 e0       	ldi	r21, 0x00	; 0
    94a8:	0e 94 c4 5c 	call	0xb988	; 0xb988 <memmove>
	      if(strcmp(zone,"EST") == 0){
    94ac:	8d eb       	ldi	r24, 0xBD	; 189
    94ae:	90 e3       	ldi	r25, 0x30	; 48
    94b0:	67 e3       	ldi	r22, 0x37	; 55
    94b2:	73 e2       	ldi	r23, 0x23	; 35
    94b4:	0e 94 19 5d 	call	0xba32	; 0xba32 <strcmp>
    94b8:	00 97       	sbiw	r24, 0x00	; 0
    94ba:	11 f4       	brne	.+4      	; 0x94c0 <Read_config_file+0x328>
	    	  timeZoneShift = 5;
    94bc:	85 e0       	ldi	r24, 0x05	; 5
    94be:	1e c0       	rjmp	.+60     	; 0x94fc <Read_config_file+0x364>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"CST") == 0){
    94c0:	8d eb       	ldi	r24, 0xBD	; 189
    94c2:	90 e3       	ldi	r25, 0x30	; 48
    94c4:	6b e3       	ldi	r22, 0x3B	; 59
    94c6:	73 e2       	ldi	r23, 0x23	; 35
    94c8:	0e 94 19 5d 	call	0xba32	; 0xba32 <strcmp>
    94cc:	00 97       	sbiw	r24, 0x00	; 0
    94ce:	11 f4       	brne	.+4      	; 0x94d4 <Read_config_file+0x33c>
	    	  timeZoneShift = 6;
    94d0:	86 e0       	ldi	r24, 0x06	; 6
    94d2:	14 c0       	rjmp	.+40     	; 0x94fc <Read_config_file+0x364>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"MST") == 0){
    94d4:	8d eb       	ldi	r24, 0xBD	; 189
    94d6:	90 e3       	ldi	r25, 0x30	; 48
    94d8:	6f e3       	ldi	r22, 0x3F	; 63
    94da:	73 e2       	ldi	r23, 0x23	; 35
    94dc:	0e 94 19 5d 	call	0xba32	; 0xba32 <strcmp>
    94e0:	00 97       	sbiw	r24, 0x00	; 0
    94e2:	11 f4       	brne	.+4      	; 0x94e8 <Read_config_file+0x350>
	    	  timeZoneShift = 7;
    94e4:	87 e0       	ldi	r24, 0x07	; 7
    94e6:	0a c0       	rjmp	.+20     	; 0x94fc <Read_config_file+0x364>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"PST") == 0){
    94e8:	8d eb       	ldi	r24, 0xBD	; 189
    94ea:	90 e3       	ldi	r25, 0x30	; 48
    94ec:	63 e4       	ldi	r22, 0x43	; 67
    94ee:	73 e2       	ldi	r23, 0x23	; 35
    94f0:	0e 94 19 5d 	call	0xba32	; 0xba32 <strcmp>
    94f4:	00 97       	sbiw	r24, 0x00	; 0
    94f6:	09 f0       	breq	.+2      	; 0x94fa <Read_config_file+0x362>
    94f8:	5b ce       	rjmp	.-842    	; 0x91b0 <Read_config_file+0x18>
	    	  timeZoneShift = 8;
    94fa:	88 e0       	ldi	r24, 0x08	; 8
    94fc:	80 93 8f 33 	sts	0x338F, r24
	    	  zoneChanged = true;
    9500:	81 e0       	ldi	r24, 0x01	; 1
    9502:	80 93 8e 33 	sts	0x338E, r24
    9506:	54 ce       	rjmp	.-856    	; 0x91b0 <Read_config_file+0x18>

	  } else {
	    break;
	  }
	}
    serverOpenCommand[strlen(serverOpenCommand)-1] = 0;
    9508:	0b e8       	ldi	r16, 0x8B	; 139
    950a:	10 e3       	ldi	r17, 0x30	; 48
    950c:	f8 01       	movw	r30, r16
    950e:	01 90       	ld	r0, Z+
    9510:	00 20       	and	r0, r0
    9512:	e9 f7       	brne	.-6      	; 0x950e <Read_config_file+0x376>
    9514:	32 97       	sbiw	r30, 0x02	; 2
    9516:	10 82       	st	Z, r1
	strcat(serverOpenCommand," ");
    9518:	c8 01       	movw	r24, r16
    951a:	67 e4       	ldi	r22, 0x47	; 71
    951c:	73 e2       	ldi	r23, 0x23	; 35
    951e:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
    strcat(serverOpenCommand,port);
    9522:	c8 01       	movw	r24, r16
    9524:	69 e7       	ldi	r22, 0x79	; 121
    9526:	7b e5       	ldi	r23, 0x5B	; 91
    9528:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    952c:	8c e8       	ldi	r24, 0x8C	; 140
    952e:	9a e4       	ldi	r25, 0x4A	; 74
    9530:	69 e4       	ldi	r22, 0x49	; 73
    9532:	73 e2       	ldi	r23, 0x23	; 35
    9534:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    9538:	00 97       	sbiw	r24, 0x00	; 0
    953a:	49 f0       	breq	.+18     	; 0x954e <Read_config_file+0x3b6>
    953c:	80 91 8e 33 	lds	r24, 0x338E
    9540:	88 23       	and	r24, r24
    9542:	29 f0       	breq	.+10     	; 0x954e <Read_config_file+0x3b6>
       timeZoneShift--;
    9544:	80 91 8f 33 	lds	r24, 0x338F
    9548:	81 50       	subi	r24, 0x01	; 1
    954a:	80 93 8f 33 	sts	0x338F, r24
    }
    if((strstr(uploaderToUse,"true") != 0)){
    954e:	89 e0       	ldi	r24, 0x09	; 9
    9550:	9a e4       	ldi	r25, 0x4A	; 74
    9552:	69 e4       	ldi	r22, 0x49	; 73
    9554:	73 e2       	ldi	r23, 0x23	; 35
    9556:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    955a:	00 97       	sbiw	r24, 0x00	; 0
    955c:	19 f0       	breq	.+6      	; 0x9564 <Read_config_file+0x3cc>
       useWifiForUploading = true;
    955e:	81 e0       	ldi	r24, 0x01	; 1
    9560:	80 93 39 33 	sts	0x3339, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    9564:	8d e1       	ldi	r24, 0x1D	; 29
    9566:	9a e4       	ldi	r25, 0x4A	; 74
    9568:	69 e4       	ldi	r22, 0x49	; 73
    956a:	73 e2       	ldi	r23, 0x23	; 35
    956c:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    9570:	00 97       	sbiw	r24, 0x00	; 0
    9572:	19 f0       	breq	.+6      	; 0x957a <Read_config_file+0x3e2>
       demoMode = true;
    9574:	81 e0       	ldi	r24, 0x01	; 1
    9576:	80 93 38 33 	sts	0x3338, r24
    }
}
    957a:	df 91       	pop	r29
    957c:	cf 91       	pop	r28
    957e:	1f 91       	pop	r17
    9580:	0f 91       	pop	r16
    9582:	08 95       	ret

00009584 <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    9584:	1f 93       	push	r17
	uint8_t resp;

	SD_MakeFileName(time);
    9586:	0e 94 97 41 	call	0x832e	; 0x832e <SD_MakeFileName>
	resp = SD_Open(fileName);
    958a:	8d ed       	ldi	r24, 0xDD	; 221
    958c:	94 e4       	ldi	r25, 0x44	; 68
    958e:	0e 94 9d 48 	call	0x913a	; 0x913a <SD_Open>
    9592:	18 2f       	mov	r17, r24
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    9594:	8f ef       	ldi	r24, 0xFF	; 255
    9596:	9f ef       	ldi	r25, 0xFF	; 255
    9598:	af ef       	ldi	r26, 0xFF	; 255
    959a:	bf ef       	ldi	r27, 0xFF	; 255
    959c:	80 93 9f 56 	sts	0x569F, r24
    95a0:	90 93 a0 56 	sts	0x56A0, r25
    95a4:	a0 93 a1 56 	sts	0x56A1, r26
    95a8:	b0 93 a2 56 	sts	0x56A2, r27
	uint8_t resp;

	SD_MakeFileName(time);
	resp = SD_Open(fileName);
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    95ac:	6c e4       	ldi	r22, 0x4C	; 76
    95ae:	74 e7       	ldi	r23, 0x74	; 116
    95b0:	8e ed       	ldi	r24, 0xDE	; 222
    95b2:	90 eb       	ldi	r25, 0xB0	; 176
    95b4:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    95b8:	6b e3       	ldi	r22, 0x3B	; 59
    95ba:	72 e0       	ldi	r23, 0x02	; 2
    95bc:	80 e0       	ldi	r24, 0x00	; 0
    95be:	90 e0       	ldi	r25, 0x00	; 0
    95c0:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    95c4:	81 e0       	ldi	r24, 0x01	; 1
    95c6:	90 e0       	ldi	r25, 0x00	; 0
    95c8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

														// payload
	SD_Write16(0x0100);				// protocol version
    95cc:	80 e0       	ldi	r24, 0x00	; 0
    95ce:	91 e0       	ldi	r25, 0x01	; 1
    95d0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>
	SD_Write8(0x02);					// time protocol
    95d4:	82 e0       	ldi	r24, 0x02	; 2
    95d6:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    95da:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    95de:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    95e2:	67 e4       	ldi	r22, 0x47	; 71
    95e4:	77 e4       	ldi	r23, 0x47	; 71
    95e6:	88 e0       	ldi	r24, 0x08	; 8
    95e8:	90 e0       	ldi	r25, 0x00	; 0
    95ea:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <SD_Write32>
	SD_Write16(0);
    95ee:	80 e0       	ldi	r24, 0x00	; 0
    95f0:	90 e0       	ldi	r25, 0x00	; 0
    95f2:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <SD_Write16>

	SD_WriteString("device_class");
    95f6:	8e e4       	ldi	r24, 0x4E	; 78
    95f8:	93 e2       	ldi	r25, 0x23	; 35
    95fa:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    95fe:	89 e0       	ldi	r24, 0x09	; 9
    9600:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString(DeviceClass);
    9604:	8b e5       	ldi	r24, 0x5B	; 91
    9606:	93 e2       	ldi	r25, 0x23	; 35
    9608:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    960c:	8a e0       	ldi	r24, 0x0A	; 10
    960e:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
		
	SD_WriteString("device_id");
    9612:	87 e6       	ldi	r24, 0x67	; 103
    9614:	93 e2       	ldi	r25, 0x23	; 35
    9616:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    961a:	89 e0       	ldi	r24, 0x09	; 9
    961c:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString(deviceID);
    9620:	88 e2       	ldi	r24, 0x28	; 40
    9622:	9a e4       	ldi	r25, 0x4A	; 74
    9624:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    9628:	8a e0       	ldi	r24, 0x0A	; 10
    962a:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
		
	SD_WriteString("firmware_version");
    962e:	81 e7       	ldi	r24, 0x71	; 113
    9630:	93 e2       	ldi	r25, 0x23	; 35
    9632:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    9636:	89 e0       	ldi	r24, 0x09	; 9
    9638:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString(FirmwareVersion);
    963c:	82 e8       	ldi	r24, 0x82	; 130
    963e:	93 e2       	ldi	r25, 0x23	; 35
    9640:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    9644:	8a e0       	ldi	r24, 0x0A	; 10
    9646:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
		
	SD_WriteString("hardware_version");
    964a:	87 e8       	ldi	r24, 0x87	; 135
    964c:	93 e2       	ldi	r25, 0x23	; 35
    964e:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    9652:	89 e0       	ldi	r24, 0x09	; 9
    9654:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString(HardwareVersion);
    9658:	88 e9       	ldi	r24, 0x98	; 152
    965a:	93 e2       	ldi	r25, 0x23	; 35
    965c:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    9660:	8a e0       	ldi	r24, 0x0A	; 10
    9662:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	SD_WriteString("channel_specs");
    9666:	8a e9       	ldi	r24, 0x9A	; 154
    9668:	93 e2       	ldi	r25, 0x23	; 35
    966a:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x09);
    966e:	89 e0       	ldi	r24, 0x09	; 9
    9670:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    9674:	88 ea       	ldi	r24, 0xA8	; 168
    9676:	93 e2       	ldi	r25, 0x23	; 35
    9678:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    967c:	89 ed       	ldi	r24, 0xD9	; 217
    967e:	93 e2       	ldi	r25, 0x23	; 35
    9680:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    9684:	82 e0       	ldi	r24, 0x02	; 2
    9686:	94 e2       	ldi	r25, 0x24	; 36
    9688:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    968c:	8b e2       	ldi	r24, 0x2B	; 43
    968e:	94 e2       	ldi	r25, 0x24	; 36
    9690:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    9694:	88 e5       	ldi	r24, 0x58	; 88
    9696:	94 e2       	ldi	r25, 0x24	; 36
    9698:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    969c:	83 e8       	ldi	r24, 0x83	; 131
    969e:	94 e2       	ldi	r25, 0x24	; 36
    96a0:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    96a4:	8f ea       	ldi	r24, 0xAF	; 175
    96a6:	94 e2       	ldi	r25, 0x24	; 36
    96a8:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    96ac:	8c ed       	ldi	r24, 0xDC	; 220
    96ae:	94 e2       	ldi	r25, 0x24	; 36
    96b0:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    96b4:	8d e0       	ldi	r24, 0x0D	; 13
    96b6:	95 e2       	ldi	r25, 0x25	; 37
    96b8:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    96bc:	8e e3       	ldi	r24, 0x3E	; 62
    96be:	95 e2       	ldi	r25, 0x25	; 37
    96c0:	0e 94 9e 3b 	call	0x773c	; 0x773c <SD_WriteString>
	SD_Write8(0x0A);
    96c4:	8a e0       	ldi	r24, 0x0A	; 10
    96c6:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>
	
	SD_Write8(0x00);
    96ca:	80 e0       	ldi	r24, 0x00	; 0
    96cc:	0e 94 05 2c 	call	0x580a	; 0x580a <SD_Write8>

	SD_WriteCRC();			// CRC			
    96d0:	0e 94 1b 2c 	call	0x5836	; 0x5836 <SD_WriteCRC>


	f_sync(&Log_File);
    96d4:	87 ec       	ldi	r24, 0xC7	; 199
    96d6:	9e e4       	ldi	r25, 0x4E	; 78
    96d8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>

	return resp;
}
    96dc:	81 2f       	mov	r24, r17
    96de:	1f 91       	pop	r17
    96e0:	08 95       	ret

000096e2 <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(TCE1_OVF_vect)
{
    96e2:	1f 92       	push	r1
    96e4:	0f 92       	push	r0
    96e6:	0f b6       	in	r0, 0x3f	; 63
    96e8:	0f 92       	push	r0
    96ea:	0b b6       	in	r0, 0x3b	; 59
    96ec:	0f 92       	push	r0
    96ee:	11 24       	eor	r1, r1
    96f0:	ef 92       	push	r14
    96f2:	ff 92       	push	r15
    96f4:	0f 93       	push	r16
    96f6:	1f 93       	push	r17
    96f8:	2f 93       	push	r18
    96fa:	3f 93       	push	r19
    96fc:	4f 93       	push	r20
    96fe:	5f 93       	push	r21
    9700:	6f 93       	push	r22
    9702:	7f 93       	push	r23
    9704:	8f 93       	push	r24
    9706:	9f 93       	push	r25
    9708:	af 93       	push	r26
    970a:	bf 93       	push	r27
    970c:	ef 93       	push	r30
    970e:	ff 93       	push	r31
    9710:	df 93       	push	r29
    9712:	cf 93       	push	r28
    9714:	0f 92       	push	r0
    9716:	0f 92       	push	r0
    9718:	cd b7       	in	r28, 0x3d	; 61
    971a:	de b7       	in	r29, 0x3e	; 62

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    971c:	80 91 78 33 	lds	r24, 0x3378
    9720:	88 23       	and	r24, r24
    9722:	71 f0       	breq	.+28     	; 0x9740 <__vector_53+0x5e>
    9724:	80 91 6d 33 	lds	r24, 0x336D
    9728:	88 23       	and	r24, r24
    972a:	51 f0       	breq	.+20     	; 0x9740 <__vector_53+0x5e>
    972c:	80 91 a8 33 	lds	r24, 0x33A8
    9730:	88 23       	and	r24, r24
    9732:	31 f4       	brne	.+12     	; 0x9740 <__vector_53+0x5e>
		SD_WriteMicrophoneBuffer(1);
    9734:	81 e0       	ldi	r24, 0x01	; 1
    9736:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    973a:	10 92 78 33 	sts	0x3378, r1
    973e:	11 c0       	rjmp	.+34     	; 0x9762 <__vector_53+0x80>
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    9740:	80 91 79 33 	lds	r24, 0x3379
    9744:	88 23       	and	r24, r24
    9746:	69 f0       	breq	.+26     	; 0x9762 <__vector_53+0x80>
    9748:	80 91 6d 33 	lds	r24, 0x336D
    974c:	88 23       	and	r24, r24
    974e:	49 f0       	breq	.+18     	; 0x9762 <__vector_53+0x80>
    9750:	80 91 a8 33 	lds	r24, 0x33A8
    9754:	88 23       	and	r24, r24
    9756:	29 f4       	brne	.+10     	; 0x9762 <__vector_53+0x80>
		SD_WriteMicrophoneBuffer(2);
    9758:	82 e0       	ldi	r24, 0x02	; 2
    975a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    975e:	10 92 79 33 	sts	0x3379, r1
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    9762:	80 91 6f 33 	lds	r24, 0x336F
    9766:	88 23       	and	r24, r24
    9768:	71 f0       	breq	.+28     	; 0x9786 <__vector_53+0xa4>
    976a:	80 91 6d 33 	lds	r24, 0x336D
    976e:	88 23       	and	r24, r24
    9770:	51 f0       	breq	.+20     	; 0x9786 <__vector_53+0xa4>
    9772:	80 91 a8 33 	lds	r24, 0x33A8
    9776:	88 23       	and	r24, r24
    9778:	31 f4       	brne	.+12     	; 0x9786 <__vector_53+0xa4>
		SD_WriteTemperatureBuffer(1);
    977a:	81 e0       	ldi	r24, 0x01	; 1
    977c:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    9780:	10 92 6f 33 	sts	0x336F, r1
    9784:	11 c0       	rjmp	.+34     	; 0x97a8 <__vector_53+0xc6>
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    9786:	80 91 70 33 	lds	r24, 0x3370
    978a:	88 23       	and	r24, r24
    978c:	69 f0       	breq	.+26     	; 0x97a8 <__vector_53+0xc6>
    978e:	80 91 6d 33 	lds	r24, 0x336D
    9792:	88 23       	and	r24, r24
    9794:	49 f0       	breq	.+18     	; 0x97a8 <__vector_53+0xc6>
    9796:	80 91 a8 33 	lds	r24, 0x33A8
    979a:	88 23       	and	r24, r24
    979c:	29 f4       	brne	.+10     	; 0x97a8 <__vector_53+0xc6>
		SD_WriteTemperatureBuffer(2);
    979e:	82 e0       	ldi	r24, 0x02	; 2
    97a0:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    97a4:	10 92 70 33 	sts	0x3370, r1
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    97a8:	80 91 75 33 	lds	r24, 0x3375
    97ac:	88 23       	and	r24, r24
    97ae:	71 f0       	breq	.+28     	; 0x97cc <__vector_53+0xea>
    97b0:	80 91 6d 33 	lds	r24, 0x336D
    97b4:	88 23       	and	r24, r24
    97b6:	51 f0       	breq	.+20     	; 0x97cc <__vector_53+0xea>
    97b8:	80 91 a8 33 	lds	r24, 0x33A8
    97bc:	88 23       	and	r24, r24
    97be:	31 f4       	brne	.+12     	; 0x97cc <__vector_53+0xea>
		SD_WriteHumidityBuffer(1);
    97c0:	81 e0       	ldi	r24, 0x01	; 1
    97c2:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    97c6:	10 92 75 33 	sts	0x3375, r1
    97ca:	11 c0       	rjmp	.+34     	; 0x97ee <__vector_53+0x10c>
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    97cc:	80 91 76 33 	lds	r24, 0x3376
    97d0:	88 23       	and	r24, r24
    97d2:	69 f0       	breq	.+26     	; 0x97ee <__vector_53+0x10c>
    97d4:	80 91 6d 33 	lds	r24, 0x336D
    97d8:	88 23       	and	r24, r24
    97da:	49 f0       	breq	.+18     	; 0x97ee <__vector_53+0x10c>
    97dc:	80 91 a8 33 	lds	r24, 0x33A8
    97e0:	88 23       	and	r24, r24
    97e2:	29 f4       	brne	.+10     	; 0x97ee <__vector_53+0x10c>
		SD_WriteHumidityBuffer(2);
    97e4:	82 e0       	ldi	r24, 0x02	; 2
    97e6:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    97ea:	10 92 76 33 	sts	0x3376, r1
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    97ee:	80 91 72 33 	lds	r24, 0x3372
    97f2:	88 23       	and	r24, r24
    97f4:	71 f0       	breq	.+28     	; 0x9812 <__vector_53+0x130>
    97f6:	80 91 6d 33 	lds	r24, 0x336D
    97fa:	88 23       	and	r24, r24
    97fc:	51 f0       	breq	.+20     	; 0x9812 <__vector_53+0x130>
    97fe:	80 91 a8 33 	lds	r24, 0x33A8
    9802:	88 23       	and	r24, r24
    9804:	31 f4       	brne	.+12     	; 0x9812 <__vector_53+0x130>
		SD_WritePressureBuffer(1);
    9806:	81 e0       	ldi	r24, 0x01	; 1
    9808:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    980c:	10 92 72 33 	sts	0x3372, r1
    9810:	11 c0       	rjmp	.+34     	; 0x9834 <__vector_53+0x152>
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    9812:	80 91 73 33 	lds	r24, 0x3373
    9816:	88 23       	and	r24, r24
    9818:	69 f0       	breq	.+26     	; 0x9834 <__vector_53+0x152>
    981a:	80 91 6d 33 	lds	r24, 0x336D
    981e:	88 23       	and	r24, r24
    9820:	49 f0       	breq	.+18     	; 0x9834 <__vector_53+0x152>
    9822:	80 91 a8 33 	lds	r24, 0x33A8
    9826:	88 23       	and	r24, r24
    9828:	29 f4       	brne	.+10     	; 0x9834 <__vector_53+0x152>
		SD_WritePressureBuffer(2);
    982a:	82 e0       	ldi	r24, 0x02	; 2
    982c:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    9830:	10 92 73 33 	sts	0x3373, r1
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    9834:	80 91 7c 33 	lds	r24, 0x337C
    9838:	88 23       	and	r24, r24
    983a:	71 f0       	breq	.+28     	; 0x9858 <__vector_53+0x176>
    983c:	80 91 6d 33 	lds	r24, 0x336D
    9840:	88 23       	and	r24, r24
    9842:	51 f0       	breq	.+20     	; 0x9858 <__vector_53+0x176>
    9844:	80 91 a8 33 	lds	r24, 0x33A8
    9848:	88 23       	and	r24, r24
    984a:	31 f4       	brne	.+12     	; 0x9858 <__vector_53+0x176>
		SD_WriteLightBuffer(1);
    984c:	81 e0       	ldi	r24, 0x01	; 1
    984e:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    9852:	10 92 7c 33 	sts	0x337C, r1
    9856:	11 c0       	rjmp	.+34     	; 0x987a <__vector_53+0x198>
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    9858:	80 91 7d 33 	lds	r24, 0x337D
    985c:	88 23       	and	r24, r24
    985e:	69 f0       	breq	.+26     	; 0x987a <__vector_53+0x198>
    9860:	80 91 6d 33 	lds	r24, 0x336D
    9864:	88 23       	and	r24, r24
    9866:	49 f0       	breq	.+18     	; 0x987a <__vector_53+0x198>
    9868:	80 91 a8 33 	lds	r24, 0x33A8
    986c:	88 23       	and	r24, r24
    986e:	29 f4       	brne	.+10     	; 0x987a <__vector_53+0x198>
		SD_WriteLightBuffer(2);
    9870:	82 e0       	ldi	r24, 0x02	; 2
    9872:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    9876:	10 92 7d 33 	sts	0x337D, r1
	}

	if(okToSendAirQuality && rs232Recording && !restartingFile){
    987a:	80 91 59 33 	lds	r24, 0x3359
    987e:	88 23       	and	r24, r24
    9880:	09 f4       	brne	.+2      	; 0x9884 <__vector_53+0x1a2>
    9882:	66 c0       	rjmp	.+204    	; 0x9950 <__vector_53+0x26e>
    9884:	80 91 62 33 	lds	r24, 0x3362
    9888:	88 23       	and	r24, r24
    988a:	09 f4       	brne	.+2      	; 0x988e <__vector_53+0x1ac>
    988c:	61 c0       	rjmp	.+194    	; 0x9950 <__vector_53+0x26e>
    988e:	80 91 a8 33 	lds	r24, 0x33A8
    9892:	88 23       	and	r24, r24
    9894:	09 f0       	breq	.+2      	; 0x9898 <__vector_53+0x1b6>
    9896:	5c c0       	rjmp	.+184    	; 0x9950 <__vector_53+0x26e>
    9898:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    989a:	20 91 57 33 	lds	r18, 0x3357
    989e:	30 91 58 33 	lds	r19, 0x3358
    98a2:	80 91 55 33 	lds	r24, 0x3355
    98a6:	90 91 56 33 	lds	r25, 0x3356
    98aa:	28 17       	cp	r18, r24
    98ac:	39 07       	cpc	r19, r25
    98ae:	09 f0       	breq	.+2      	; 0x98b2 <__vector_53+0x1d0>
    98b0:	3b c3       	rjmp	.+1654   	; 0x9f28 <__vector_53+0x846>
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
			counter++;
		}
		if(strstr(airQualityString,"Dylos") == NULL){
    98b2:	87 ed       	ldi	r24, 0xD7	; 215
    98b4:	99 e4       	ldi	r25, 0x49	; 73
    98b6:	6a e6       	ldi	r22, 0x6A	; 106
    98b8:	75 e2       	ldi	r23, 0x25	; 37
    98ba:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    98be:	00 97       	sbiw	r24, 0x00	; 0
    98c0:	09 f0       	breq	.+2      	; 0x98c4 <__vector_53+0x1e2>
    98c2:	42 c0       	rjmp	.+132    	; 0x9948 <__vector_53+0x266>
			airSampleTime = Time_Get32BitTimer();
    98c4:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    98c8:	60 93 30 33 	sts	0x3330, r22
    98cc:	70 93 31 33 	sts	0x3331, r23
    98d0:	80 93 32 33 	sts	0x3332, r24
    98d4:	90 93 33 33 	sts	0x3333, r25
			smallCount = atol(strtok(airQualityString,","));
    98d8:	87 ed       	ldi	r24, 0xD7	; 215
    98da:	99 e4       	ldi	r25, 0x49	; 73
    98dc:	60 e7       	ldi	r22, 0x70	; 112
    98de:	75 e2       	ldi	r23, 0x25	; 37
    98e0:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    98e4:	0e 94 98 5c 	call	0xb930	; 0xb930 <atol>
    98e8:	60 93 47 3c 	sts	0x3C47, r22
    98ec:	70 93 48 3c 	sts	0x3C48, r23
    98f0:	80 93 49 3c 	sts	0x3C49, r24
    98f4:	90 93 4a 3c 	sts	0x3C4A, r25
			largeCount = atol(strtok(NULL,","));
    98f8:	80 e0       	ldi	r24, 0x00	; 0
    98fa:	90 e0       	ldi	r25, 0x00	; 0
    98fc:	60 e7       	ldi	r22, 0x70	; 112
    98fe:	75 e2       	ldi	r23, 0x25	; 37
    9900:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    9904:	0e 94 98 5c 	call	0xb930	; 0xb930 <atol>
    9908:	60 93 75 5b 	sts	0x5B75, r22
    990c:	70 93 76 5b 	sts	0x5B76, r23
    9910:	80 93 77 5b 	sts	0x5B77, r24
    9914:	90 93 78 5b 	sts	0x5B78, r25

			quickSmall = smallCount;
    9918:	20 91 47 3c 	lds	r18, 0x3C47
    991c:	30 91 48 3c 	lds	r19, 0x3C48
    9920:	40 91 49 3c 	lds	r20, 0x3C49
    9924:	50 91 4a 3c 	lds	r21, 0x3C4A
    9928:	20 93 5a 33 	sts	0x335A, r18
    992c:	30 93 5b 33 	sts	0x335B, r19
    9930:	40 93 5c 33 	sts	0x335C, r20
    9934:	50 93 5d 33 	sts	0x335D, r21
			quickLarge = largeCount;
    9938:	60 93 5e 33 	sts	0x335E, r22
    993c:	70 93 5f 33 	sts	0x335F, r23
    9940:	80 93 60 33 	sts	0x3360, r24
    9944:	90 93 61 33 	sts	0x3361, r25
        }
        SD_WriteAirSample();
    9948:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <SD_WriteAirSample>
		okToSendAirQuality = false;
    994c:	10 92 59 33 	sts	0x3359, r1
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    9950:	80 91 98 33 	lds	r24, 0x3398
    9954:	88 23       	and	r24, r24
    9956:	09 f4       	brne	.+2      	; 0x995a <__vector_53+0x278>
    9958:	69 c0       	rjmp	.+210    	; 0x9a2c <__vector_53+0x34a>
    995a:	80 91 d2 33 	lds	r24, 0x33D2
    995e:	90 91 d3 33 	lds	r25, 0x33D3
    9962:	a0 91 d4 33 	lds	r26, 0x33D4
    9966:	b0 91 d5 33 	lds	r27, 0x33D5
    996a:	86 5b       	subi	r24, 0xB6	; 182
    996c:	93 40       	sbci	r25, 0x03	; 3
    996e:	a0 40       	sbci	r26, 0x00	; 0
    9970:	b0 40       	sbci	r27, 0x00	; 0
    9972:	08 f0       	brcs	.+2      	; 0x9976 <__vector_53+0x294>
    9974:	5b c0       	rjmp	.+182    	; 0x9a2c <__vector_53+0x34a>
		SD_StartLogFile(UNIX_time);								// open file
    9976:	60 91 68 33 	lds	r22, 0x3368
    997a:	70 91 69 33 	lds	r23, 0x3369
    997e:	80 91 6a 33 	lds	r24, 0x336A
    9982:	90 91 6b 33 	lds	r25, 0x336B
    9986:	0e 94 c2 4a 	call	0x9584	; 0x9584 <SD_StartLogFile>
    998a:	88 ee       	ldi	r24, 0xE8	; 232
    998c:	93 e0       	ldi	r25, 0x03	; 3
    998e:	20 e7       	ldi	r18, 0x70	; 112
    9990:	31 e0       	ldi	r19, 0x01	; 1
    9992:	f9 01       	movw	r30, r18
    9994:	31 97       	sbiw	r30, 0x01	; 1
    9996:	f1 f7       	brne	.-4      	; 0x9994 <__vector_53+0x2b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9998:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    999a:	d9 f7       	brne	.-10     	; 0x9992 <__vector_53+0x2b0>
		_delay_ms(100);

        timeToStopRecording = UNIX_time + 900;
    999c:	80 91 68 33 	lds	r24, 0x3368
    99a0:	90 91 69 33 	lds	r25, 0x3369
    99a4:	a0 91 6a 33 	lds	r26, 0x336A
    99a8:	b0 91 6b 33 	lds	r27, 0x336B
    99ac:	8c 57       	subi	r24, 0x7C	; 124
    99ae:	9c 4f       	sbci	r25, 0xFC	; 252
    99b0:	af 4f       	sbci	r26, 0xFF	; 255
    99b2:	bf 4f       	sbci	r27, 0xFF	; 255
    99b4:	80 93 bd 33 	sts	0x33BD, r24
    99b8:	90 93 be 33 	sts	0x33BE, r25
    99bc:	a0 93 bf 33 	sts	0x33BF, r26
    99c0:	b0 93 c0 33 	sts	0x33C0, r27
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    99c4:	e0 e2       	ldi	r30, 0x20	; 32
    99c6:	f6 e0       	ldi	r31, 0x06	; 6
    99c8:	11 e0       	ldi	r17, 0x01	; 1
    99ca:	16 83       	std	Z+6, r17	; 0x06

		Leds_Clear(sd_Green);
		Leds_Clear(wifi_Green);
		timeRecordingStarted = UNIX_time;
    99cc:	80 e4       	ldi	r24, 0x40	; 64
    99ce:	86 83       	std	Z+6, r24	; 0x06
    99d0:	80 91 68 33 	lds	r24, 0x3368
    99d4:	90 91 69 33 	lds	r25, 0x3369
    99d8:	a0 91 6a 33 	lds	r26, 0x336A
    99dc:	b0 91 6b 33 	lds	r27, 0x336B
    99e0:	80 93 34 33 	sts	0x3334, r24
    99e4:	90 93 35 33 	sts	0x3335, r25
    99e8:	a0 93 36 33 	sts	0x3336, r26
    99ec:	b0 93 37 33 	sts	0x3337, r27
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    99f0:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    99f4:	20 91 68 33 	lds	r18, 0x3368
    99f8:	30 91 69 33 	lds	r19, 0x3369
    99fc:	40 91 6a 33 	lds	r20, 0x336A
    9a00:	50 91 6b 33 	lds	r21, 0x336B
    9a04:	0e 94 6b 3a 	call	0x74d6	; 0x74d6 <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    9a08:	80 91 57 33 	lds	r24, 0x3357
    9a0c:	90 91 58 33 	lds	r25, 0x3358
    9a10:	80 93 55 33 	sts	0x3355, r24
    9a14:	90 93 56 33 	sts	0x3356, r25

		Rs232_ClearBuffer();
		rs232Recording = true;
    9a18:	10 93 62 33 	sts	0x3362, r17
		recording = true;
    9a1c:	10 93 6d 33 	sts	0x336D, r17
		okToOpenLogFile = false;
    9a20:	10 92 98 33 	sts	0x3398, r1
		directoryOpened = false;
    9a24:	10 92 9e 33 	sts	0x339E, r1
		okToReopenDirectory = true;
    9a28:	10 93 9d 33 	sts	0x339D, r17
	}

	if(okToCloseLogFile){
    9a2c:	80 91 9a 33 	lds	r24, 0x339A
    9a30:	88 23       	and	r24, r24
    9a32:	49 f0       	breq	.+18     	; 0x9a46 <__vector_53+0x364>
		SD_Close();
    9a34:	0e 94 66 2b 	call	0x56cc	; 0x56cc <SD_Close>
		okToCloseLogFile = false;
    9a38:	10 92 9a 33 	sts	0x339A, r1
		directoryOpened = false;
    9a3c:	10 92 9e 33 	sts	0x339E, r1
		okToReopenDirectory = true;
    9a40:	81 e0       	ldi	r24, 0x01	; 1
    9a42:	80 93 9d 33 	sts	0x339D, r24
	}

	if(okToSendRTCBlock && recording){
    9a46:	80 91 7f 33 	lds	r24, 0x337F
    9a4a:	88 23       	and	r24, r24
    9a4c:	91 f0       	breq	.+36     	; 0x9a72 <__vector_53+0x390>
    9a4e:	80 91 6d 33 	lds	r24, 0x336D
    9a52:	88 23       	and	r24, r24
    9a54:	71 f0       	breq	.+28     	; 0x9a72 <__vector_53+0x390>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    9a56:	0e 94 86 30 	call	0x610c	; 0x610c <Time_Get32BitTimer>
    9a5a:	20 91 68 33 	lds	r18, 0x3368
    9a5e:	30 91 69 33 	lds	r19, 0x3369
    9a62:	40 91 6a 33 	lds	r20, 0x336A
    9a66:	50 91 6b 33 	lds	r21, 0x336B
    9a6a:	0e 94 6b 3a 	call	0x74d6	; 0x74d6 <SD_WriteRTCBlock>
		okToSendRTCBlock = false;
    9a6e:	10 92 7f 33 	sts	0x337F, r1
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    9a72:	80 91 9c 33 	lds	r24, 0x339C
    9a76:	88 23       	and	r24, r24
    9a78:	09 f4       	brne	.+2      	; 0x9a7c <__vector_53+0x39a>
    9a7a:	63 c0       	rjmp	.+198    	; 0x9b42 <__vector_53+0x460>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    9a7c:	80 91 a8 06 	lds	r24, 0x06A8
    9a80:	80 fd       	sbrc	r24, 0
    9a82:	5f c0       	rjmp	.+190    	; 0x9b42 <__vector_53+0x460>
    9a84:	5b c2       	rjmp	.+1206   	; 0x9f3c <__vector_53+0x85a>
		if(okToReopenDirectory){
    9a86:	80 91 9d 33 	lds	r24, 0x339D
    9a8a:	88 23       	and	r24, r24
    9a8c:	69 f0       	breq	.+26     	; 0x9aa8 <__vector_53+0x3c6>
			if(f_opendir(&dir, "/") == FR_OK){
    9a8e:	8b ef       	ldi	r24, 0xFB	; 251
    9a90:	90 e5       	ldi	r25, 0x50	; 80
    9a92:	62 e7       	ldi	r22, 0x72	; 114
    9a94:	75 e2       	ldi	r23, 0x25	; 37
    9a96:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <f_opendir>
    9a9a:	88 23       	and	r24, r24
    9a9c:	29 f4       	brne	.+10     	; 0x9aa8 <__vector_53+0x3c6>
				directoryOpened = true;
    9a9e:	81 e0       	ldi	r24, 0x01	; 1
    9aa0:	80 93 9e 33 	sts	0x339E, r24
				okToReopenDirectory = false;
    9aa4:	10 92 9d 33 	sts	0x339D, r1
			}
		}

		if(directoryOpened){
    9aa8:	80 91 9e 33 	lds	r24, 0x339E
    9aac:	88 23       	and	r24, r24
    9aae:	09 f4       	brne	.+2      	; 0x9ab2 <__vector_53+0x3d0>
    9ab0:	48 c0       	rjmp	.+144    	; 0x9b42 <__vector_53+0x460>
			if((f_readdir(&dir, &fno) == FR_OK)){
    9ab2:	8b ef       	ldi	r24, 0xFB	; 251
    9ab4:	90 e5       	ldi	r25, 0x50	; 80
    9ab6:	65 ec       	ldi	r22, 0xC5	; 197
    9ab8:	74 e4       	ldi	r23, 0x44	; 68
    9aba:	0e 94 76 1f 	call	0x3eec	; 0x3eec <f_readdir>
    9abe:	88 23       	and	r24, r24
    9ac0:	09 f0       	breq	.+2      	; 0x9ac4 <__vector_53+0x3e2>
    9ac2:	3f c0       	rjmp	.+126    	; 0x9b42 <__vector_53+0x460>
				if(fno.fname[0] == 0){
    9ac4:	80 91 ce 44 	lds	r24, 0x44CE
    9ac8:	88 23       	and	r24, r24
    9aca:	31 f4       	brne	.+12     	; 0x9ad8 <__vector_53+0x3f6>
					directoryOpened = false;
    9acc:	10 92 9e 33 	sts	0x339E, r1
					okToReopenDirectory = true;
    9ad0:	81 e0       	ldi	r24, 0x01	; 1
    9ad2:	80 93 9d 33 	sts	0x339D, r24
    9ad6:	35 c0       	rjmp	.+106    	; 0x9b42 <__vector_53+0x460>
				} else {
					if(recording){
    9ad8:	80 91 6d 33 	lds	r24, 0x336D
    9adc:	88 23       	and	r24, r24
    9ade:	c1 f0       	breq	.+48     	; 0x9b10 <__vector_53+0x42e>
						if((strcasecmp(currentLogFile,fno.fname)) > 0){		// file is NOT the current file
    9ae0:	85 e9       	ldi	r24, 0x95	; 149
    9ae2:	9c e3       	ldi	r25, 0x3C	; 60
    9ae4:	6e ec       	ldi	r22, 0xCE	; 206
    9ae6:	74 e4       	ldi	r23, 0x44	; 68
    9ae8:	0e 94 d6 5c 	call	0xb9ac	; 0xb9ac <strcasecmp>
    9aec:	18 16       	cp	r1, r24
    9aee:	19 06       	cpc	r1, r25
    9af0:	44 f5       	brge	.+80     	; 0x9b42 <__vector_53+0x460>
							if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9af2:	8e ec       	ldi	r24, 0xCE	; 206
    9af4:	94 e4       	ldi	r25, 0x44	; 68
    9af6:	64 e7       	ldi	r22, 0x74	; 116
    9af8:	75 e2       	ldi	r23, 0x25	; 37
    9afa:	0e 94 e9 5c 	call	0xb9d2	; 0xb9d2 <strcasestr>
    9afe:	89 2b       	or	r24, r25
    9b00:	01 f1       	breq	.+64     	; 0x9b42 <__vector_53+0x460>
								if(strcasestr(fno.fname,".BTU") == NULL){
    9b02:	8e ec       	ldi	r24, 0xCE	; 206
    9b04:	94 e4       	ldi	r25, 0x44	; 68
    9b06:	68 e7       	ldi	r22, 0x78	; 120
    9b08:	75 e2       	ldi	r23, 0x25	; 37
    9b0a:	0e 94 e9 5c 	call	0xb9d2	; 0xb9d2 <strcasestr>
    9b0e:	0e c0       	rjmp	.+28     	; 0x9b2c <__vector_53+0x44a>
									okToUpload= true;
								}
							}
						}
					} else {
						if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9b10:	8e ec       	ldi	r24, 0xCE	; 206
    9b12:	94 e4       	ldi	r25, 0x44	; 68
    9b14:	64 e7       	ldi	r22, 0x74	; 116
    9b16:	75 e2       	ldi	r23, 0x25	; 37
    9b18:	0e 94 e9 5c 	call	0xb9d2	; 0xb9d2 <strcasestr>
    9b1c:	89 2b       	or	r24, r25
    9b1e:	89 f0       	breq	.+34     	; 0x9b42 <__vector_53+0x460>
							if(strcasestr(fno.fname,".BTU") == NULL){
    9b20:	8e ec       	ldi	r24, 0xCE	; 206
    9b22:	94 e4       	ldi	r25, 0x44	; 68
    9b24:	68 e7       	ldi	r22, 0x78	; 120
    9b26:	75 e2       	ldi	r23, 0x25	; 37
    9b28:	0e 94 e9 5c 	call	0xb9d2	; 0xb9d2 <strcasestr>
    9b2c:	89 2b       	or	r24, r25
    9b2e:	49 f4       	brne	.+18     	; 0x9b42 <__vector_53+0x460>
								strcpy(fileToUpload,fno.fname);
    9b30:	8e e2       	ldi	r24, 0x2E	; 46
    9b32:	9c e3       	ldi	r25, 0x3C	; 60
    9b34:	6e ec       	ldi	r22, 0xCE	; 206
    9b36:	74 e4       	ldi	r23, 0x44	; 68
    9b38:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
								okToUpload = true;
    9b3c:	81 e0       	ldi	r24, 0x01	; 1
    9b3e:	80 93 a2 33 	sts	0x33A2, r24
				}
			}
		}
	}

	if(okToOpenFileToUpload){
    9b42:	80 91 a5 33 	lds	r24, 0x33A5
    9b46:	88 23       	and	r24, r24
    9b48:	51 f1       	breq	.+84     	; 0x9b9e <__vector_53+0x4bc>
	   f_stat(fileToUpload,&fno);
    9b4a:	8e e2       	ldi	r24, 0x2E	; 46
    9b4c:	9c e3       	ldi	r25, 0x3C	; 60
    9b4e:	65 ec       	ldi	r22, 0xC5	; 197
    9b50:	74 e4       	ldi	r23, 0x44	; 68
    9b52:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <f_stat>
	   uploadFileSize = fno.fsize;
    9b56:	80 91 c5 44 	lds	r24, 0x44C5
    9b5a:	90 91 c6 44 	lds	r25, 0x44C6
    9b5e:	a0 91 c7 44 	lds	r26, 0x44C7
    9b62:	b0 91 c8 44 	lds	r27, 0x44C8
    9b66:	80 93 ac 33 	sts	0x33AC, r24
    9b6a:	90 93 ad 33 	sts	0x33AD, r25
    9b6e:	a0 93 ae 33 	sts	0x33AE, r26
    9b72:	b0 93 af 33 	sts	0x33AF, r27
	   f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9b76:	81 e1       	ldi	r24, 0x11	; 17
    9b78:	91 e5       	ldi	r25, 0x51	; 81
    9b7a:	6e e2       	ldi	r22, 0x2E	; 46
    9b7c:	7c e3       	ldi	r23, 0x3C	; 60
    9b7e:	43 e1       	ldi	r20, 0x13	; 19
    9b80:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <f_open>
	   f_lseek(&Upload_File, 0);
    9b84:	81 e1       	ldi	r24, 0x11	; 17
    9b86:	91 e5       	ldi	r25, 0x51	; 81
    9b88:	40 e0       	ldi	r20, 0x00	; 0
    9b8a:	50 e0       	ldi	r21, 0x00	; 0
    9b8c:	60 e0       	ldi	r22, 0x00	; 0
    9b8e:	70 e0       	ldi	r23, 0x00	; 0
    9b90:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <f_lseek>
	   uploadFileOpened = true;
    9b94:	81 e0       	ldi	r24, 0x01	; 1
    9b96:	80 93 d1 30 	sts	0x30D1, r24
	   okToOpenFileToUpload = false;
    9b9a:	10 92 a5 33 	sts	0x33A5, r1
	}

    if(okToFillUploadFileBuffer){
    9b9e:	80 91 a6 33 	lds	r24, 0x33A6
    9ba2:	88 23       	and	r24, r24
    9ba4:	81 f0       	breq	.+32     	; 0x9bc6 <__vector_53+0x4e4>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    9ba6:	81 e1       	ldi	r24, 0x11	; 17
    9ba8:	91 e5       	ldi	r25, 0x51	; 81
    9baa:	6e e3       	ldi	r22, 0x3E	; 62
    9bac:	78 e3       	ldi	r23, 0x38	; 56
    9bae:	48 ee       	ldi	r20, 0xE8	; 232
    9bb0:	53 e0       	ldi	r21, 0x03	; 3
    9bb2:	9e 01       	movw	r18, r28
    9bb4:	2f 5f       	subi	r18, 0xFF	; 255
    9bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    9bb8:	0e 94 27 18 	call	0x304e	; 0x304e <f_read>
        okToFillUploadFileBuffer = false;
    9bbc:	10 92 a6 33 	sts	0x33A6, r1
        uploadFileBufferFull = true;
    9bc0:	81 e0       	ldi	r24, 0x01	; 1
    9bc2:	80 93 a7 33 	sts	0x33A7, r24
    }


	if(okToCloseUploadFile){
    9bc6:	80 91 a0 33 	lds	r24, 0x33A0
    9bca:	88 23       	and	r24, r24
    9bcc:	b1 f0       	breq	.+44     	; 0x9bfa <__vector_53+0x518>
	    f_sync(&Upload_File);
    9bce:	81 e1       	ldi	r24, 0x11	; 17
    9bd0:	91 e5       	ldi	r25, 0x51	; 81
    9bd2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>
	    f_close(&Upload_File);
    9bd6:	81 e1       	ldi	r24, 0x11	; 17
    9bd8:	91 e5       	ldi	r25, 0x51	; 81
    9bda:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <f_close>
	    if(okToRenameUploadFile){
    9bde:	80 91 a1 33 	lds	r24, 0x33A1
    9be2:	88 23       	and	r24, r24
    9be4:	41 f0       	breq	.+16     	; 0x9bf6 <__vector_53+0x514>
	       f_rename(fileToUpload,newFileName);
    9be6:	8e e2       	ldi	r24, 0x2E	; 46
    9be8:	9c e3       	ldi	r25, 0x3C	; 60
    9bea:	60 e9       	ldi	r22, 0x90	; 144
    9bec:	76 e5       	ldi	r23, 0x56	; 86
    9bee:	0e 94 58 24 	call	0x48b0	; 0x48b0 <f_rename>
	       okToRenameUploadFile = false;
    9bf2:	10 92 a1 33 	sts	0x33A1, r1
	    }
		okToCloseUploadFile = false;
    9bf6:	10 92 a0 33 	sts	0x33A0, r1
	}




	if(okToWriteUploaderLogFile){
    9bfa:	80 91 c9 33 	lds	r24, 0x33C9
    9bfe:	88 23       	and	r24, r24
    9c00:	09 f4       	brne	.+2      	; 0x9c04 <__vector_53+0x522>
    9c02:	e0 c0       	rjmp	.+448    	; 0x9dc4 <__vector_53+0x6e2>

        if(useWifiForUploading){
    9c04:	80 91 39 33 	lds	r24, 0x3339
    9c08:	88 23       	and	r24, r24
    9c0a:	29 f0       	breq	.+10     	; 0x9c16 <__vector_53+0x534>
            Debug_SendString("Updating uploadLg File",true);
    9c0c:	8d e7       	ldi	r24, 0x7D	; 125
    9c0e:	95 e2       	ldi	r25, 0x25	; 37
    9c10:	61 e0       	ldi	r22, 0x01	; 1
    9c12:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    9c16:	84 e9       	ldi	r24, 0x94	; 148
    9c18:	95 e2       	ldi	r25, 0x25	; 37
    9c1a:	65 e7       	ldi	r22, 0x75	; 117
    9c1c:	7a e4       	ldi	r23, 0x4A	; 74
    9c1e:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9c22:	81 e1       	ldi	r24, 0x11	; 17
    9c24:	91 e5       	ldi	r25, 0x51	; 81
    9c26:	64 e9       	ldi	r22, 0x94	; 148
    9c28:	75 e2       	ldi	r23, 0x25	; 37
    9c2a:	43 e1       	ldi	r20, 0x13	; 19
    9c2c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <f_open>

        if(fno2.fsize > 0){
    9c30:	40 91 75 4a 	lds	r20, 0x4A75
    9c34:	50 91 76 4a 	lds	r21, 0x4A76
    9c38:	60 91 77 4a 	lds	r22, 0x4A77
    9c3c:	70 91 78 4a 	lds	r23, 0x4A78
    9c40:	41 15       	cp	r20, r1
    9c42:	51 05       	cpc	r21, r1
    9c44:	61 05       	cpc	r22, r1
    9c46:	71 05       	cpc	r23, r1
    9c48:	21 f0       	breq	.+8      	; 0x9c52 <__vector_53+0x570>
           f_lseek(&Upload_File, fno2.fsize);
    9c4a:	81 e1       	ldi	r24, 0x11	; 17
    9c4c:	91 e5       	ldi	r25, 0x51	; 81
    9c4e:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    9c52:	82 ea       	ldi	r24, 0xA2	; 162
    9c54:	95 e2       	ldi	r25, 0x25	; 37
    9c56:	61 e1       	ldi	r22, 0x11	; 17
    9c58:	71 e5       	ldi	r23, 0x51	; 81
    9c5a:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    9c5e:	8e e2       	ldi	r24, 0x2E	; 46
    9c60:	9c e3       	ldi	r25, 0x3C	; 60
    9c62:	61 e1       	ldi	r22, 0x11	; 17
    9c64:	71 e5       	ldi	r23, 0x51	; 81
    9c66:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(", Size: ",&Upload_File);
    9c6a:	8e ea       	ldi	r24, 0xAE	; 174
    9c6c:	95 e2       	ldi	r25, 0x25	; 37
    9c6e:	61 e1       	ldi	r22, 0x11	; 17
    9c70:	71 e5       	ldi	r23, 0x51	; 81
    9c72:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    9c76:	60 91 ac 33 	lds	r22, 0x33AC
    9c7a:	70 91 ad 33 	lds	r23, 0x33AD
    9c7e:	80 91 ae 33 	lds	r24, 0x33AE
    9c82:	90 91 af 33 	lds	r25, 0x33AF
    9c86:	43 e4       	ldi	r20, 0x43	; 67
    9c88:	5b e5       	ldi	r21, 0x5B	; 91
    9c8a:	2a e0       	ldi	r18, 0x0A	; 10
    9c8c:	30 e0       	ldi	r19, 0x00	; 0
    9c8e:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <ltoa>
    9c92:	61 e1       	ldi	r22, 0x11	; 17
    9c94:	71 e5       	ldi	r23, 0x51	; 81
    9c96:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(" bytes, Response: ",&Upload_File);
    9c9a:	87 eb       	ldi	r24, 0xB7	; 183
    9c9c:	95 e2       	ldi	r25, 0x25	; 37
    9c9e:	61 e1       	ldi	r22, 0x11	; 17
    9ca0:	71 e5       	ldi	r23, 0x51	; 81
    9ca2:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(httpResponse,&Upload_File);
    9ca6:	85 e5       	ldi	r24, 0x55	; 85
    9ca8:	93 e5       	ldi	r25, 0x53	; 83
    9caa:	61 e1       	ldi	r22, 0x11	; 17
    9cac:	71 e5       	ldi	r23, 0x51	; 81
    9cae:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(", Successful Records: ",&Upload_File);
    9cb2:	8a ec       	ldi	r24, 0xCA	; 202
    9cb4:	95 e2       	ldi	r25, 0x25	; 37
    9cb6:	61 e1       	ldi	r22, 0x11	; 17
    9cb8:	71 e5       	ldi	r23, 0x51	; 81
    9cba:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(successfulBinaryRecordsString,&Upload_File);
    9cbe:	84 eb       	ldi	r24, 0xB4	; 180
    9cc0:	9a e4       	ldi	r25, 0x4A	; 74
    9cc2:	61 e1       	ldi	r22, 0x11	; 17
    9cc4:	71 e5       	ldi	r23, 0x51	; 81
    9cc6:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(", Failed Records: ",&Upload_File);
    9cca:	81 ee       	ldi	r24, 0xE1	; 225
    9ccc:	95 e2       	ldi	r25, 0x25	; 37
    9cce:	61 e1       	ldi	r22, 0x11	; 17
    9cd0:	71 e5       	ldi	r23, 0x51	; 81
    9cd2:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(failedBinaryRecordsString,&Upload_File);
    9cd6:	8d ed       	ldi	r24, 0xDD	; 221
    9cd8:	9b e5       	ldi	r25, 0x5B	; 91
    9cda:	61 e1       	ldi	r22, 0x11	; 17
    9cdc:	71 e5       	ldi	r23, 0x51	; 81
    9cde:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(", Time to upload: ",&Upload_File);
    9ce2:	84 ef       	ldi	r24, 0xF4	; 244
    9ce4:	95 e2       	ldi	r25, 0x25	; 37
    9ce6:	61 e1       	ldi	r22, 0x11	; 17
    9ce8:	71 e5       	ldi	r23, 0x51	; 81
    9cea:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(ltoa(uploadTimeStop - uploadTimeStart,temp3,10),&Upload_File);
    9cee:	60 91 a7 3c 	lds	r22, 0x3CA7
    9cf2:	70 91 a8 3c 	lds	r23, 0x3CA8
    9cf6:	80 91 a9 3c 	lds	r24, 0x3CA9
    9cfa:	90 91 aa 3c 	lds	r25, 0x3CAA
    9cfe:	20 91 4b 3c 	lds	r18, 0x3C4B
    9d02:	30 91 4c 3c 	lds	r19, 0x3C4C
    9d06:	40 91 4d 3c 	lds	r20, 0x3C4D
    9d0a:	50 91 4e 3c 	lds	r21, 0x3C4E
    9d0e:	62 1b       	sub	r22, r18
    9d10:	73 0b       	sbc	r23, r19
    9d12:	84 0b       	sbc	r24, r20
    9d14:	95 0b       	sbc	r25, r21
    9d16:	43 e4       	ldi	r20, 0x43	; 67
    9d18:	5b e5       	ldi	r21, 0x5B	; 91
    9d1a:	2a e0       	ldi	r18, 0x0A	; 10
    9d1c:	30 e0       	ldi	r19, 0x00	; 0
    9d1e:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <ltoa>
    9d22:	61 e1       	ldi	r22, 0x11	; 17
    9d24:	71 e5       	ldi	r23, 0x51	; 81
    9d26:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(" secs, Speed of upload: ",&Upload_File);
    9d2a:	87 e0       	ldi	r24, 0x07	; 7
    9d2c:	96 e2       	ldi	r25, 0x26	; 38
    9d2e:	61 e1       	ldi	r22, 0x11	; 17
    9d30:	71 e5       	ldi	r23, 0x51	; 81
    9d32:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(ltoa(uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)),temp3,10),&Upload_File);
    9d36:	60 91 ac 33 	lds	r22, 0x33AC
    9d3a:	70 91 ad 33 	lds	r23, 0x33AD
    9d3e:	80 91 ae 33 	lds	r24, 0x33AE
    9d42:	90 91 af 33 	lds	r25, 0x33AF
    9d46:	20 91 a7 3c 	lds	r18, 0x3CA7
    9d4a:	30 91 a8 3c 	lds	r19, 0x3CA8
    9d4e:	40 91 a9 3c 	lds	r20, 0x3CA9
    9d52:	50 91 aa 3c 	lds	r21, 0x3CAA
    9d56:	e0 90 4b 3c 	lds	r14, 0x3C4B
    9d5a:	f0 90 4c 3c 	lds	r15, 0x3C4C
    9d5e:	00 91 4d 3c 	lds	r16, 0x3C4D
    9d62:	10 91 4e 3c 	lds	r17, 0x3C4E
    9d66:	2e 19       	sub	r18, r14
    9d68:	3f 09       	sbc	r19, r15
    9d6a:	40 0b       	sbc	r20, r16
    9d6c:	51 0b       	sbc	r21, r17
    9d6e:	e7 e0       	ldi	r30, 0x07	; 7
    9d70:	22 0f       	add	r18, r18
    9d72:	33 1f       	adc	r19, r19
    9d74:	44 1f       	adc	r20, r20
    9d76:	55 1f       	adc	r21, r21
    9d78:	ea 95       	dec	r30
    9d7a:	d1 f7       	brne	.-12     	; 0x9d70 <__vector_53+0x68e>
    9d7c:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    9d80:	ca 01       	movw	r24, r20
    9d82:	b9 01       	movw	r22, r18
    9d84:	43 e4       	ldi	r20, 0x43	; 67
    9d86:	5b e5       	ldi	r21, 0x5B	; 91
    9d88:	2a e0       	ldi	r18, 0x0A	; 10
    9d8a:	30 e0       	ldi	r19, 0x00	; 0
    9d8c:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <ltoa>
    9d90:	61 e1       	ldi	r22, 0x11	; 17
    9d92:	71 e5       	ldi	r23, 0x51	; 81
    9d94:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>

        f_puts(" kbps",&Upload_File);
    9d98:	80 e2       	ldi	r24, 0x20	; 32
    9d9a:	96 e2       	ldi	r25, 0x26	; 38
    9d9c:	61 e1       	ldi	r22, 0x11	; 17
    9d9e:	71 e5       	ldi	r23, 0x51	; 81
    9da0:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_putc(13,&Upload_File);
    9da4:	8d e0       	ldi	r24, 0x0D	; 13
    9da6:	90 e0       	ldi	r25, 0x00	; 0
    9da8:	61 e1       	ldi	r22, 0x11	; 17
    9daa:	71 e5       	ldi	r23, 0x51	; 81
    9dac:	0e 94 1c 2b 	call	0x5638	; 0x5638 <f_putc>
        f_sync(&Upload_File);
    9db0:	81 e1       	ldi	r24, 0x11	; 17
    9db2:	91 e5       	ldi	r25, 0x51	; 81
    9db4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>
	    f_close(&Upload_File);
    9db8:	81 e1       	ldi	r24, 0x11	; 17
    9dba:	91 e5       	ldi	r25, 0x51	; 81
    9dbc:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <f_close>
	    okToWriteUploaderLogFile = false;
    9dc0:	10 92 c9 33 	sts	0x33C9, r1
	}

	if(uploadFailed){
    9dc4:	80 91 9f 33 	lds	r24, 0x339F
    9dc8:	88 23       	and	r24, r24
    9dca:	09 f4       	brne	.+2      	; 0x9dce <__vector_53+0x6ec>
    9dcc:	61 c0       	rjmp	.+194    	; 0x9e90 <__vector_53+0x7ae>

        if(useWifiForUploading){
    9dce:	80 91 39 33 	lds	r24, 0x3339
    9dd2:	88 23       	and	r24, r24
    9dd4:	29 f0       	breq	.+10     	; 0x9de0 <__vector_53+0x6fe>
            Debug_SendString("Updating uploadLg File",true);
    9dd6:	8d e7       	ldi	r24, 0x7D	; 125
    9dd8:	95 e2       	ldi	r25, 0x25	; 37
    9dda:	61 e0       	ldi	r22, 0x01	; 1
    9ddc:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    9de0:	84 e9       	ldi	r24, 0x94	; 148
    9de2:	95 e2       	ldi	r25, 0x25	; 37
    9de4:	65 e7       	ldi	r22, 0x75	; 117
    9de6:	7a e4       	ldi	r23, 0x4A	; 74
    9de8:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9dec:	81 e1       	ldi	r24, 0x11	; 17
    9dee:	91 e5       	ldi	r25, 0x51	; 81
    9df0:	64 e9       	ldi	r22, 0x94	; 148
    9df2:	75 e2       	ldi	r23, 0x25	; 37
    9df4:	43 e1       	ldi	r20, 0x13	; 19
    9df6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <f_open>
        if(fno2.fsize > 0){
    9dfa:	40 91 75 4a 	lds	r20, 0x4A75
    9dfe:	50 91 76 4a 	lds	r21, 0x4A76
    9e02:	60 91 77 4a 	lds	r22, 0x4A77
    9e06:	70 91 78 4a 	lds	r23, 0x4A78
    9e0a:	41 15       	cp	r20, r1
    9e0c:	51 05       	cpc	r21, r1
    9e0e:	61 05       	cpc	r22, r1
    9e10:	71 05       	cpc	r23, r1
    9e12:	21 f0       	breq	.+8      	; 0x9e1c <__vector_53+0x73a>
           f_lseek(&Upload_File, fno2.fsize);
    9e14:	81 e1       	ldi	r24, 0x11	; 17
    9e16:	91 e5       	ldi	r25, 0x51	; 81
    9e18:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    9e1c:	82 ea       	ldi	r24, 0xA2	; 162
    9e1e:	95 e2       	ldi	r25, 0x25	; 37
    9e20:	61 e1       	ldi	r22, 0x11	; 17
    9e22:	71 e5       	ldi	r23, 0x51	; 81
    9e24:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    9e28:	8e e2       	ldi	r24, 0x2E	; 46
    9e2a:	9c e3       	ldi	r25, 0x3C	; 60
    9e2c:	61 e1       	ldi	r22, 0x11	; 17
    9e2e:	71 e5       	ldi	r23, 0x51	; 81
    9e30:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(", Size: ",&Upload_File);
    9e34:	8e ea       	ldi	r24, 0xAE	; 174
    9e36:	95 e2       	ldi	r25, 0x25	; 37
    9e38:	61 e1       	ldi	r22, 0x11	; 17
    9e3a:	71 e5       	ldi	r23, 0x51	; 81
    9e3c:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    9e40:	60 91 ac 33 	lds	r22, 0x33AC
    9e44:	70 91 ad 33 	lds	r23, 0x33AD
    9e48:	80 91 ae 33 	lds	r24, 0x33AE
    9e4c:	90 91 af 33 	lds	r25, 0x33AF
    9e50:	43 e4       	ldi	r20, 0x43	; 67
    9e52:	5b e5       	ldi	r21, 0x5B	; 91
    9e54:	2a e0       	ldi	r18, 0x0A	; 10
    9e56:	30 e0       	ldi	r19, 0x00	; 0
    9e58:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <ltoa>
    9e5c:	61 e1       	ldi	r22, 0x11	; 17
    9e5e:	71 e5       	ldi	r23, 0x51	; 81
    9e60:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
        f_puts(" bytes, uploadFailed failed...",&Upload_File);
    9e64:	86 e2       	ldi	r24, 0x26	; 38
    9e66:	96 e2       	ldi	r25, 0x26	; 38
    9e68:	61 e1       	ldi	r22, 0x11	; 17
    9e6a:	71 e5       	ldi	r23, 0x51	; 81
    9e6c:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>

        f_putc(13,&Upload_File);
    9e70:	8d e0       	ldi	r24, 0x0D	; 13
    9e72:	90 e0       	ldi	r25, 0x00	; 0
    9e74:	61 e1       	ldi	r22, 0x11	; 17
    9e76:	71 e5       	ldi	r23, 0x51	; 81
    9e78:	0e 94 1c 2b 	call	0x5638	; 0x5638 <f_putc>
        f_sync(&Upload_File);
    9e7c:	81 e1       	ldi	r24, 0x11	; 17
    9e7e:	91 e5       	ldi	r25, 0x51	; 81
    9e80:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <f_sync>
	    f_close(&Upload_File);
    9e84:	81 e1       	ldi	r24, 0x11	; 17
    9e86:	91 e5       	ldi	r25, 0x51	; 81
    9e88:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <f_close>
	    uploadFailed = false;
    9e8c:	10 92 9f 33 	sts	0x339F, r1
	}

	if(okToGetRemainingSpace){
    9e90:	80 91 b3 4a 	lds	r24, 0x4AB3
    9e94:	88 23       	and	r24, r24
    9e96:	09 f4       	brne	.+2      	; 0x9e9a <__vector_53+0x7b8>
    9e98:	57 c0       	rjmp	.+174    	; 0x9f48 <__vector_53+0x866>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    9e9a:	85 e4       	ldi	r24, 0x45	; 69
    9e9c:	96 e2       	ldi	r25, 0x26	; 38
    9e9e:	6a ec       	ldi	r22, 0xCA	; 202
    9ea0:	73 e3       	ldi	r23, 0x33	; 51
    9ea2:	4b ed       	ldi	r20, 0xDB	; 219
    9ea4:	54 e4       	ldi	r21, 0x44	; 68
    9ea6:	0e 94 00 20 	call	0x4000	; 0x4000 <f_getfree>
    9eaa:	88 23       	and	r24, r24
    9eac:	41 f0       	breq	.+16     	; 0x9ebe <__vector_53+0x7dc>
           spaceRemainingOnDisk = 0;
    9eae:	10 92 ca 33 	sts	0x33CA, r1
    9eb2:	10 92 cb 33 	sts	0x33CB, r1
    9eb6:	10 92 cc 33 	sts	0x33CC, r1
    9eba:	10 92 cd 33 	sts	0x33CD, r1
	    }
	    totalDiskSpace = fs->max_clust;
    9ebe:	e0 91 db 44 	lds	r30, 0x44DB
    9ec2:	f0 91 dc 44 	lds	r31, 0x44DC
    9ec6:	e2 8c       	ldd	r14, Z+26	; 0x1a
    9ec8:	f3 8c       	ldd	r15, Z+27	; 0x1b
    9eca:	04 8d       	ldd	r16, Z+28	; 0x1c
    9ecc:	15 8d       	ldd	r17, Z+29	; 0x1d
    9ece:	e0 92 ce 33 	sts	0x33CE, r14
    9ed2:	f0 92 cf 33 	sts	0x33CF, r15
    9ed6:	00 93 d0 33 	sts	0x33D0, r16
    9eda:	10 93 d1 33 	sts	0x33D1, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
	    percentDiskUsed /= totalDiskSpace;
    9ede:	80 91 ca 33 	lds	r24, 0x33CA
    9ee2:	90 91 cb 33 	lds	r25, 0x33CB
    9ee6:	a0 91 cc 33 	lds	r26, 0x33CC
    9eea:	b0 91 cd 33 	lds	r27, 0x33CD
    9eee:	a8 01       	movw	r20, r16
    9ef0:	97 01       	movw	r18, r14
    9ef2:	28 1b       	sub	r18, r24
    9ef4:	39 0b       	sbc	r19, r25
    9ef6:	4a 0b       	sbc	r20, r26
    9ef8:	5b 0b       	sbc	r21, r27
    9efa:	ca 01       	movw	r24, r20
    9efc:	b9 01       	movw	r22, r18
    9efe:	28 ee       	ldi	r18, 0xE8	; 232
    9f00:	33 e0       	ldi	r19, 0x03	; 3
    9f02:	40 e0       	ldi	r20, 0x00	; 0
    9f04:	50 e0       	ldi	r21, 0x00	; 0
    9f06:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    9f0a:	a8 01       	movw	r20, r16
    9f0c:	97 01       	movw	r18, r14
    9f0e:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    9f12:	20 93 d2 33 	sts	0x33D2, r18
    9f16:	30 93 d3 33 	sts	0x33D3, r19
    9f1a:	40 93 d4 33 	sts	0x33D4, r20
    9f1e:	50 93 d5 33 	sts	0x33D5, r21

	    okToGetRemainingSpace = false;
    9f22:	10 92 b3 4a 	sts	0x4AB3, r1
    9f26:	10 c0       	rjmp	.+32     	; 0x9f48 <__vector_53+0x866>
	}

	if(okToSendAirQuality && rs232Recording && !restartingFile){
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
    9f28:	80 e0       	ldi	r24, 0x00	; 0
    9f2a:	0e 94 c9 03 	call	0x792	; 0x792 <Rs232_GetByte>
    9f2e:	e1 2f       	mov	r30, r17
    9f30:	f0 e0       	ldi	r31, 0x00	; 0
    9f32:	e9 52       	subi	r30, 0x29	; 41
    9f34:	f6 4b       	sbci	r31, 0xB6	; 182
    9f36:	80 83       	st	Z, r24
			counter++;
    9f38:	1f 5f       	subi	r17, 0xFF	; 255
    9f3a:	af cc       	rjmp	.-1698   	; 0x989a <__vector_53+0x1b8>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
		okToSendRTCBlock = false;
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    9f3c:	80 91 a3 33 	lds	r24, 0x33A3
    9f40:	88 23       	and	r24, r24
    9f42:	09 f4       	brne	.+2      	; 0x9f46 <__vector_53+0x864>
    9f44:	a0 cd       	rjmp	.-1216   	; 0x9a86 <__vector_53+0x3a4>
    9f46:	fd cd       	rjmp	.-1030   	; 0x9b42 <__vector_53+0x460>
	    percentDiskUsed *= 1000;
	    percentDiskUsed /= totalDiskSpace;

	    okToGetRemainingSpace = false;
	}
}
    9f48:	0f 90       	pop	r0
    9f4a:	0f 90       	pop	r0
    9f4c:	cf 91       	pop	r28
    9f4e:	df 91       	pop	r29
    9f50:	ff 91       	pop	r31
    9f52:	ef 91       	pop	r30
    9f54:	bf 91       	pop	r27
    9f56:	af 91       	pop	r26
    9f58:	9f 91       	pop	r25
    9f5a:	8f 91       	pop	r24
    9f5c:	7f 91       	pop	r23
    9f5e:	6f 91       	pop	r22
    9f60:	5f 91       	pop	r21
    9f62:	4f 91       	pop	r20
    9f64:	3f 91       	pop	r19
    9f66:	2f 91       	pop	r18
    9f68:	1f 91       	pop	r17
    9f6a:	0f 91       	pop	r16
    9f6c:	ff 90       	pop	r15
    9f6e:	ef 90       	pop	r14
    9f70:	0f 90       	pop	r0
    9f72:	0b be       	out	0x3b, r0	; 59
    9f74:	0f 90       	pop	r0
    9f76:	0f be       	out	0x3f, r0	; 63
    9f78:	0f 90       	pop	r0
    9f7a:	1f 90       	pop	r1
    9f7c:	18 95       	reti

00009f7e <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9f7e:	2f 92       	push	r2
    9f80:	3f 92       	push	r3
    9f82:	4f 92       	push	r4
    9f84:	5f 92       	push	r5
    9f86:	6f 92       	push	r6
    9f88:	7f 92       	push	r7
    9f8a:	8f 92       	push	r8
    9f8c:	9f 92       	push	r9
    9f8e:	af 92       	push	r10
    9f90:	bf 92       	push	r11
    9f92:	cf 92       	push	r12
    9f94:	df 92       	push	r13
    9f96:	ef 92       	push	r14
    9f98:	ff 92       	push	r15
    9f9a:	0f 93       	push	r16
    9f9c:	1f 93       	push	r17
    9f9e:	df 93       	push	r29
    9fa0:	cf 93       	push	r28
    9fa2:	cd b7       	in	r28, 0x3d	; 61
    9fa4:	de b7       	in	r29, 0x3e	; 62
    9fa6:	63 97       	sbiw	r28, 0x13	; 19
    9fa8:	cd bf       	out	0x3d, r28	; 61
    9faa:	de bf       	out	0x3e, r29	; 62
    9fac:	6b a4       	ldd	r6, Y+43	; 0x2b
    9fae:	7c a4       	ldd	r7, Y+44	; 0x2c
    9fb0:	8e 01       	movw	r16, r28
    9fb2:	03 5d       	subi	r16, 0xD3	; 211
    9fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    9fb6:	20 e0       	ldi	r18, 0x00	; 0
    9fb8:	30 e0       	ldi	r19, 0x00	; 0
    9fba:	19 8a       	std	Y+17, r1	; 0x11
    9fbc:	1a 8a       	std	Y+18, r1	; 0x12


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9fbe:	d3 01       	movw	r26, r6
    9fc0:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    9fc2:	88 23       	and	r24, r24
    9fc4:	09 f4       	brne	.+2      	; 0x9fc8 <f_printf+0x4a>
    9fc6:	17 c1       	rjmp	.+558    	; 0xa1f6 <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9fc8:	08 94       	sec
    9fca:	61 1c       	adc	r6, r1
    9fcc:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9fce:	85 32       	cpi	r24, 0x25	; 37
    9fd0:	71 f0       	breq	.+28     	; 0x9fee <f_printf+0x70>
			cc = f_putc(c, fil);
    9fd2:	90 e0       	ldi	r25, 0x00	; 0
    9fd4:	69 a5       	ldd	r22, Y+41	; 0x29
    9fd6:	7a a5       	ldd	r23, Y+42	; 0x2a
    9fd8:	0e 94 1c 2b 	call	0x5638	; 0x5638 <f_putc>
    9fdc:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9fde:	bf ef       	ldi	r27, 0xFF	; 255
    9fe0:	8f 3f       	cpi	r24, 0xFF	; 255
    9fe2:	9b 07       	cpc	r25, r27
    9fe4:	11 f4       	brne	.+4      	; 0x9fea <f_printf+0x6c>
    9fe6:	48 01       	movw	r8, r16
    9fe8:	fa c0       	rjmp	.+500    	; 0xa1de <f_printf+0x260>
    9fea:	48 01       	movw	r8, r16
    9fec:	4c c0       	rjmp	.+152    	; 0xa086 <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    9fee:	d3 01       	movw	r26, r6
    9ff0:	ed 91       	ld	r30, X+
    9ff2:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9ff4:	e0 33       	cpi	r30, 0x30	; 48
    9ff6:	11 f0       	breq	.+4      	; 0x9ffc <f_printf+0x7e>
    9ff8:	1b 8a       	std	Y+19, r1	; 0x13
    9ffa:	04 c0       	rjmp	.+8      	; 0xa004 <f_printf+0x86>
			f = 1; c = *str++;
    9ffc:	ed 91       	ld	r30, X+
    9ffe:	3d 01       	movw	r6, r26
    a000:	b1 e0       	ldi	r27, 0x01	; 1
    a002:	bb 8b       	std	Y+19, r27	; 0x13
    a004:	aa 24       	eor	r10, r10
    a006:	bb 24       	eor	r11, r11
    a008:	13 c0       	rjmp	.+38     	; 0xa030 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    a00a:	c5 01       	movw	r24, r10
    a00c:	53 e0       	ldi	r21, 0x03	; 3
    a00e:	88 0f       	add	r24, r24
    a010:	99 1f       	adc	r25, r25
    a012:	5a 95       	dec	r21
    a014:	e1 f7       	brne	.-8      	; 0xa00e <f_printf+0x90>
    a016:	aa 0c       	add	r10, r10
    a018:	bb 1c       	adc	r11, r11
    a01a:	a8 0e       	add	r10, r24
    a01c:	b9 1e       	adc	r11, r25
    a01e:	ae 0e       	add	r10, r30
    a020:	b1 1c       	adc	r11, r1
    a022:	e0 ed       	ldi	r30, 0xD0	; 208
    a024:	ff ef       	ldi	r31, 0xFF	; 255
    a026:	ae 0e       	add	r10, r30
    a028:	bf 1e       	adc	r11, r31
			c = *str++;
    a02a:	d3 01       	movw	r26, r6
    a02c:	ed 91       	ld	r30, X+
    a02e:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    a030:	8e 2f       	mov	r24, r30
    a032:	80 53       	subi	r24, 0x30	; 48
    a034:	8a 30       	cpi	r24, 0x0A	; 10
    a036:	48 f3       	brcs	.-46     	; 0xa00a <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    a038:	ec 36       	cpi	r30, 0x6C	; 108
    a03a:	31 f4       	brne	.+12     	; 0xa048 <f_printf+0xca>
			f |= 2; c = *str++;
    a03c:	bb 89       	ldd	r27, Y+19	; 0x13
    a03e:	b2 60       	ori	r27, 0x02	; 2
    a040:	bb 8b       	std	Y+19, r27	; 0x13
    a042:	d3 01       	movw	r26, r6
    a044:	ed 91       	ld	r30, X+
    a046:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    a048:	e3 37       	cpi	r30, 0x73	; 115
    a04a:	49 f4       	brne	.+18     	; 0xa05e <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    a04c:	82 e0       	ldi	r24, 0x02	; 2
    a04e:	88 2e       	mov	r8, r24
    a050:	91 2c       	mov	r9, r1
    a052:	80 0e       	add	r8, r16
    a054:	91 1e       	adc	r9, r17
    a056:	f8 01       	movw	r30, r16
    a058:	80 81       	ld	r24, Z
    a05a:	91 81       	ldd	r25, Z+1	; 0x01
    a05c:	bb c0       	rjmp	.+374    	; 0xa1d4 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    a05e:	e3 36       	cpi	r30, 0x63	; 99
    a060:	a9 f4       	brne	.+42     	; 0xa08c <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    a062:	b2 e0       	ldi	r27, 0x02	; 2
    a064:	8b 2e       	mov	r8, r27
    a066:	91 2c       	mov	r9, r1
    a068:	80 0e       	add	r8, r16
    a06a:	91 1e       	adc	r9, r17
    a06c:	d8 01       	movw	r26, r16
    a06e:	8d 91       	ld	r24, X+
    a070:	9c 91       	ld	r25, X
    a072:	69 a5       	ldd	r22, Y+41	; 0x29
    a074:	7a a5       	ldd	r23, Y+42	; 0x2a
    a076:	0e 94 1c 2b 	call	0x5638	; 0x5638 <f_putc>
    a07a:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    a07c:	bf ef       	ldi	r27, 0xFF	; 255
    a07e:	8f 3f       	cpi	r24, 0xFF	; 255
    a080:	9b 07       	cpc	r25, r27
    a082:	09 f4       	brne	.+2      	; 0xa086 <f_printf+0x108>
    a084:	ac c0       	rjmp	.+344    	; 0xa1de <f_printf+0x260>
    a086:	21 e0       	ldi	r18, 0x01	; 1
    a088:	30 e0       	ldi	r19, 0x00	; 0
    a08a:	a9 c0       	rjmp	.+338    	; 0xa1de <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    a08c:	e4 36       	cpi	r30, 0x64	; 100
    a08e:	39 f0       	breq	.+14     	; 0xa09e <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    a090:	e5 37       	cpi	r30, 0x75	; 117
    a092:	29 f0       	breq	.+10     	; 0xa09e <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    a094:	e8 35       	cpi	r30, 0x58	; 88
    a096:	09 f0       	breq	.+2      	; 0xa09a <f_printf+0x11c>
    a098:	ae c0       	rjmp	.+348    	; 0xa1f6 <f_printf+0x278>
    a09a:	20 e1       	ldi	r18, 0x10	; 16
    a09c:	01 c0       	rjmp	.+2      	; 0xa0a0 <f_printf+0x122>
    a09e:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    a0a0:	fb 89       	ldd	r31, Y+19	; 0x13
    a0a2:	f1 ff       	sbrs	r31, 1
    a0a4:	0d c0       	rjmp	.+26     	; 0xa0c0 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    a0a6:	a4 e0       	ldi	r26, 0x04	; 4
    a0a8:	8a 2e       	mov	r8, r26
    a0aa:	91 2c       	mov	r9, r1
    a0ac:	80 0e       	add	r8, r16
    a0ae:	91 1e       	adc	r9, r17
    a0b0:	d8 01       	movw	r26, r16
    a0b2:	ed 90       	ld	r14, X+
    a0b4:	fd 90       	ld	r15, X+
    a0b6:	0d 91       	ld	r16, X+
    a0b8:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    a0ba:	e4 36       	cpi	r30, 0x64	; 100
    a0bc:	09 f5       	brne	.+66     	; 0xa100 <f_printf+0x182>
    a0be:	13 c0       	rjmp	.+38     	; 0xa0e6 <f_printf+0x168>
    a0c0:	c8 01       	movw	r24, r16
    a0c2:	02 96       	adiw	r24, 0x02	; 2
    a0c4:	d8 01       	movw	r26, r16
    a0c6:	6d 91       	ld	r22, X+
    a0c8:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    a0ca:	e4 36       	cpi	r30, 0x64	; 100
    a0cc:	39 f4       	brne	.+14     	; 0xa0dc <f_printf+0x15e>
    a0ce:	4c 01       	movw	r8, r24
    a0d0:	7b 01       	movw	r14, r22
    a0d2:	00 27       	eor	r16, r16
    a0d4:	f7 fc       	sbrc	r15, 7
    a0d6:	00 95       	com	r16
    a0d8:	10 2f       	mov	r17, r16
    a0da:	05 c0       	rjmp	.+10     	; 0xa0e6 <f_printf+0x168>
    a0dc:	4c 01       	movw	r8, r24
    a0de:	7b 01       	movw	r14, r22
    a0e0:	00 e0       	ldi	r16, 0x00	; 0
    a0e2:	10 e0       	ldi	r17, 0x00	; 0
    a0e4:	0d c0       	rjmp	.+26     	; 0xa100 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    a0e6:	17 ff       	sbrs	r17, 7
    a0e8:	0b c0       	rjmp	.+22     	; 0xa100 <f_printf+0x182>
				val = 0 - val;
    a0ea:	10 95       	com	r17
    a0ec:	00 95       	com	r16
    a0ee:	f0 94       	com	r15
    a0f0:	e0 94       	com	r14
    a0f2:	e1 1c       	adc	r14, r1
    a0f4:	f1 1c       	adc	r15, r1
    a0f6:	01 1d       	adc	r16, r1
    a0f8:	11 1d       	adc	r17, r1
				f |= 4;
    a0fa:	bb 89       	ldd	r27, Y+19	; 0x13
    a0fc:	b4 60       	ori	r27, 0x04	; 4
    a0fe:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    a100:	18 8a       	std	Y+16, r1	; 0x10
    a102:	ff e0       	ldi	r31, 0x0F	; 15
    a104:	cf 2e       	mov	r12, r31
    a106:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    a108:	22 2e       	mov	r2, r18
    a10a:	33 24       	eor	r3, r3
    a10c:	44 24       	eor	r4, r4
    a10e:	55 24       	eor	r5, r5
    a110:	c8 01       	movw	r24, r16
    a112:	b7 01       	movw	r22, r14
    a114:	a2 01       	movw	r20, r4
    a116:	91 01       	movw	r18, r2
    a118:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    a11c:	86 2f       	mov	r24, r22
    a11e:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    a120:	8a 33       	cpi	r24, 0x3A	; 58
    a122:	08 f0       	brcs	.+2      	; 0xa126 <f_printf+0x1a8>
    a124:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    a126:	08 94       	sec
    a128:	c1 08       	sbc	r12, r1
    a12a:	d1 08       	sbc	r13, r1
    a12c:	e1 e0       	ldi	r30, 0x01	; 1
    a12e:	f0 e0       	ldi	r31, 0x00	; 0
    a130:	ec 0f       	add	r30, r28
    a132:	fd 1f       	adc	r31, r29
    a134:	ec 0d       	add	r30, r12
    a136:	fd 1d       	adc	r31, r13
    a138:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    a13a:	c1 14       	cp	r12, r1
    a13c:	d1 04       	cpc	r13, r1
    a13e:	e9 f0       	breq	.+58     	; 0xa17a <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    a140:	c8 01       	movw	r24, r16
    a142:	b7 01       	movw	r22, r14
    a144:	a2 01       	movw	r20, r4
    a146:	91 01       	movw	r18, r2
    a148:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    a14c:	c9 01       	movw	r24, r18
    a14e:	da 01       	movw	r26, r20
    a150:	7c 01       	movw	r14, r24
    a152:	8d 01       	movw	r16, r26
		} while (i && val);
    a154:	e1 14       	cp	r14, r1
    a156:	f1 04       	cpc	r15, r1
    a158:	01 05       	cpc	r16, r1
    a15a:	11 05       	cpc	r17, r1
    a15c:	c9 f6       	brne	.-78     	; 0xa110 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    a15e:	eb 89       	ldd	r30, Y+19	; 0x13
    a160:	e2 ff       	sbrs	r30, 2
    a162:	0b c0       	rjmp	.+22     	; 0xa17a <f_printf+0x1fc>
    a164:	08 94       	sec
    a166:	c1 08       	sbc	r12, r1
    a168:	d1 08       	sbc	r13, r1
    a16a:	e1 e0       	ldi	r30, 0x01	; 1
    a16c:	f0 e0       	ldi	r31, 0x00	; 0
    a16e:	ec 0f       	add	r30, r28
    a170:	fd 1f       	adc	r31, r29
    a172:	ec 0d       	add	r30, r12
    a174:	fd 1d       	adc	r31, r13
    a176:	4d e2       	ldi	r20, 0x2D	; 45
    a178:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    a17a:	8f e0       	ldi	r24, 0x0F	; 15
    a17c:	90 e0       	ldi	r25, 0x00	; 0
    a17e:	8a 19       	sub	r24, r10
    a180:	9b 09       	sbc	r25, r11
    a182:	08 94       	sec
    a184:	c1 08       	sbc	r12, r1
    a186:	d1 08       	sbc	r13, r1
    a188:	e1 e0       	ldi	r30, 0x01	; 1
    a18a:	f0 e0       	ldi	r31, 0x00	; 0
    a18c:	ec 0f       	add	r30, r28
    a18e:	fd 1f       	adc	r31, r29
    a190:	ec 0d       	add	r30, r12
    a192:	fd 1d       	adc	r31, r13
    a194:	08 94       	sec
    a196:	c1 1c       	adc	r12, r1
    a198:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    a19a:	ab 89       	ldd	r26, Y+19	; 0x13
    a19c:	2a 2f       	mov	r18, r26
    a19e:	30 e0       	ldi	r19, 0x00	; 0
    a1a0:	21 70       	andi	r18, 0x01	; 1
    a1a2:	30 70       	andi	r19, 0x00	; 0
    a1a4:	0b c0       	rjmp	.+22     	; 0xa1bc <f_printf+0x23e>
    a1a6:	08 94       	sec
    a1a8:	c1 08       	sbc	r12, r1
    a1aa:	d1 08       	sbc	r13, r1
    a1ac:	21 15       	cp	r18, r1
    a1ae:	31 05       	cpc	r19, r1
    a1b0:	11 f4       	brne	.+4      	; 0xa1b6 <f_printf+0x238>
    a1b2:	40 e2       	ldi	r20, 0x20	; 32
    a1b4:	01 c0       	rjmp	.+2      	; 0xa1b8 <f_printf+0x23a>
    a1b6:	40 e3       	ldi	r20, 0x30	; 48
    a1b8:	40 83       	st	Z, r20
    a1ba:	31 97       	sbiw	r30, 0x01	; 1
    a1bc:	c1 14       	cp	r12, r1
    a1be:	d1 04       	cpc	r13, r1
    a1c0:	19 f0       	breq	.+6      	; 0xa1c8 <f_printf+0x24a>
    a1c2:	8c 15       	cp	r24, r12
    a1c4:	9d 05       	cpc	r25, r13
    a1c6:	7c f3       	brlt	.-34     	; 0xa1a6 <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    a1c8:	81 e0       	ldi	r24, 0x01	; 1
    a1ca:	90 e0       	ldi	r25, 0x00	; 0
    a1cc:	8c 0f       	add	r24, r28
    a1ce:	9d 1f       	adc	r25, r29
    a1d0:	8c 0d       	add	r24, r12
    a1d2:	9d 1d       	adc	r25, r13
    a1d4:	69 a5       	ldd	r22, Y+41	; 0x29
    a1d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    a1d8:	0e 94 42 2b 	call	0x5684	; 0x5684 <f_puts>
    a1dc:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    a1de:	e9 89       	ldd	r30, Y+17	; 0x11
    a1e0:	fa 89       	ldd	r31, Y+18	; 0x12
    a1e2:	e2 0f       	add	r30, r18
    a1e4:	f3 1f       	adc	r31, r19
    a1e6:	e9 8b       	std	Y+17, r30	; 0x11
    a1e8:	fa 8b       	std	Y+18, r31	; 0x12
    a1ea:	ff ef       	ldi	r31, 0xFF	; 255
    a1ec:	2f 3f       	cpi	r18, 0xFF	; 255
    a1ee:	3f 07       	cpc	r19, r31
    a1f0:	41 f0       	breq	.+16     	; 0xa202 <f_printf+0x284>
    a1f2:	84 01       	movw	r16, r8
    a1f4:	e4 ce       	rjmp	.-568    	; 0x9fbe <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    a1f6:	4f ef       	ldi	r20, 0xFF	; 255
    a1f8:	2f 3f       	cpi	r18, 0xFF	; 255
    a1fa:	34 07       	cpc	r19, r20
    a1fc:	11 f0       	breq	.+4      	; 0xa202 <f_printf+0x284>
    a1fe:	29 89       	ldd	r18, Y+17	; 0x11
    a200:	3a 89       	ldd	r19, Y+18	; 0x12
}
    a202:	c9 01       	movw	r24, r18
    a204:	63 96       	adiw	r28, 0x13	; 19
    a206:	cd bf       	out	0x3d, r28	; 61
    a208:	de bf       	out	0x3e, r29	; 62
    a20a:	cf 91       	pop	r28
    a20c:	df 91       	pop	r29
    a20e:	1f 91       	pop	r17
    a210:	0f 91       	pop	r16
    a212:	ff 90       	pop	r15
    a214:	ef 90       	pop	r14
    a216:	df 90       	pop	r13
    a218:	cf 90       	pop	r12
    a21a:	bf 90       	pop	r11
    a21c:	af 90       	pop	r10
    a21e:	9f 90       	pop	r9
    a220:	8f 90       	pop	r8
    a222:	7f 90       	pop	r7
    a224:	6f 90       	pop	r6
    a226:	5f 90       	pop	r5
    a228:	4f 90       	pop	r4
    a22a:	3f 90       	pop	r3
    a22c:	2f 90       	pop	r2
    a22e:	08 95       	ret

0000a230 <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    a230:	af 92       	push	r10
    a232:	bf 92       	push	r11
    a234:	cf 92       	push	r12
    a236:	df 92       	push	r13
    a238:	ff 92       	push	r15
    a23a:	0f 93       	push	r16
    a23c:	1f 93       	push	r17
    a23e:	cf 93       	push	r28
    a240:	df 93       	push	r29
    a242:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    a244:	88 e4       	ldi	r24, 0x48	; 72
    a246:	96 e2       	ldi	r25, 0x26	; 38
    a248:	62 e5       	ldi	r22, 0x52	; 82
    a24a:	76 e2       	ldi	r23, 0x26	; 38
    a24c:	ab 01       	movw	r20, r22
    a24e:	96 01       	movw	r18, r12
    a250:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a254:	ff 24       	eor	r15, r15
    a256:	c0 e0       	ldi	r28, 0x00	; 0
    a258:	d0 e0       	ldi	r29, 0x00	; 0
    a25a:	66 e6       	ldi	r22, 0x66	; 102
    a25c:	a6 2e       	mov	r10, r22
    a25e:	6e e0       	ldi	r22, 0x0E	; 14
    a260:	b6 2e       	mov	r11, r22
    a262:	39 c0       	rjmp	.+114    	; 0xa2d6 <Wifi_GetSignalStrength+0xa6>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    a264:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    a268:	88 23       	and	r24, r24
    a26a:	89 f1       	breq	.+98     	; 0xa2ce <Wifi_GetSignalStrength+0x9e>
			rssi[tmp] = Wifi_GetByte(false);
    a26c:	0f 2d       	mov	r16, r15
    a26e:	10 e0       	ldi	r17, 0x00	; 0
    a270:	80 e0       	ldi	r24, 0x00	; 0
    a272:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    a276:	f8 01       	movw	r30, r16
    a278:	e5 5b       	subi	r30, 0xB5	; 181
    a27a:	fc 4a       	sbci	r31, 0xAC	; 172
    a27c:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    a27e:	89 32       	cpi	r24, 0x29	; 41
    a280:	29 f5       	brne	.+74     	; 0xa2cc <Wifi_GetSignalStrength+0x9c>
				rssi[tmp] = 0;
    a282:	10 82       	st	Z, r1
				worker = atoi(rssi);
    a284:	8b e4       	ldi	r24, 0x4B	; 75
    a286:	93 e5       	ldi	r25, 0x53	; 83
    a288:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <atoi>
    a28c:	aa 27       	eor	r26, r26
    a28e:	97 fd       	sbrc	r25, 7
    a290:	a0 95       	com	r26
    a292:	ba 2f       	mov	r27, r26
				worker*=9208;
    a294:	bc 01       	movw	r22, r24
    a296:	cd 01       	movw	r24, r26
    a298:	28 ef       	ldi	r18, 0xF8	; 248
    a29a:	33 e2       	ldi	r19, 0x23	; 35
    a29c:	40 e0       	ldi	r20, 0x00	; 0
    a29e:	50 e0       	ldi	r21, 0x00	; 0
    a2a0:	0e 94 06 5c 	call	0xb80c	; 0xb80c <__mulsi3>
    a2a4:	9b 01       	movw	r18, r22
    a2a6:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    a2a8:	6c e6       	ldi	r22, 0x6C	; 108
    a2aa:	72 ef       	ldi	r23, 0xF2	; 242
    a2ac:	8f e0       	ldi	r24, 0x0F	; 15
    a2ae:	90 e0       	ldi	r25, 0x00	; 0
    a2b0:	62 1b       	sub	r22, r18
    a2b2:	73 0b       	sbc	r23, r19
    a2b4:	84 0b       	sbc	r24, r20
    a2b6:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    a2b8:	20 e1       	ldi	r18, 0x10	; 16
    a2ba:	37 e2       	ldi	r19, 0x27	; 39
    a2bc:	40 e0       	ldi	r20, 0x00	; 0
    a2be:	50 e0       	ldi	r21, 0x00	; 0
    a2c0:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    a2c4:	25 36       	cpi	r18, 0x65	; 101
    a2c6:	58 f0       	brcs	.+22     	; 0xa2de <Wifi_GetSignalStrength+0xae>
    a2c8:	24 e6       	ldi	r18, 0x64	; 100
    a2ca:	09 c0       	rjmp	.+18     	; 0xa2de <Wifi_GetSignalStrength+0xae>
                if(ss > 100){
                    ss = 100;
                }
				return ss;
			}
			tmp++;
    a2cc:	f3 94       	inc	r15
    a2ce:	c5 01       	movw	r24, r10
    a2d0:	01 97       	sbiw	r24, 0x01	; 1
    a2d2:	f1 f7       	brne	.-4      	; 0xa2d0 <Wifi_GetSignalStrength+0xa0>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    a2d4:	21 96       	adiw	r28, 0x01	; 1
    a2d6:	cc 15       	cp	r28, r12
    a2d8:	dd 05       	cpc	r29, r13
    a2da:	20 f2       	brcs	.-120    	; 0xa264 <Wifi_GetSignalStrength+0x34>
    a2dc:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    a2de:	82 2f       	mov	r24, r18
    a2e0:	df 91       	pop	r29
    a2e2:	cf 91       	pop	r28
    a2e4:	1f 91       	pop	r17
    a2e6:	0f 91       	pop	r16
    a2e8:	ff 90       	pop	r15
    a2ea:	df 90       	pop	r13
    a2ec:	cf 90       	pop	r12
    a2ee:	bf 90       	pop	r11
    a2f0:	af 90       	pop	r10
    a2f2:	08 95       	ret

0000a2f4 <Config_Wifi>:
    if((strstr(demoModeString,"true") != 0)){
       demoMode = true;
    }
}

void Config_Wifi(void){
    a2f4:	0f 93       	push	r16
    a2f6:	1f 93       	push	r17
    a2f8:	80 e2       	ldi	r24, 0x20	; 32
    a2fa:	9e e4       	ldi	r25, 0x4E	; 78
    a2fc:	20 e7       	ldi	r18, 0x70	; 112
    a2fe:	31 e0       	ldi	r19, 0x01	; 1
    a300:	f9 01       	movw	r30, r18
    a302:	31 97       	sbiw	r30, 0x01	; 1
    a304:	f1 f7       	brne	.-4      	; 0xa302 <Config_Wifi+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a306:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a308:	d9 f7       	brne	.-10     	; 0xa300 <Config_Wifi+0xc>



    _delay_ms(2000);

    Wifi_EnterCMDMode(1000);
    a30a:	88 ee       	ldi	r24, 0xE8	; 232
    a30c:	93 e0       	ldi	r25, 0x03	; 3
    a30e:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <Wifi_EnterCMDMode>
    a312:	80 e1       	ldi	r24, 0x10	; 16
    a314:	97 e2       	ldi	r25, 0x27	; 39
    a316:	20 e7       	ldi	r18, 0x70	; 112
    a318:	31 e0       	ldi	r19, 0x01	; 1
    a31a:	f9 01       	movw	r30, r18
    a31c:	31 97       	sbiw	r30, 0x01	; 1
    a31e:	f1 f7       	brne	.-4      	; 0xa31c <Config_Wifi+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a320:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a322:	d9 f7       	brne	.-10     	; 0xa31a <Config_Wifi+0x26>

	_delay_ms(1000);
	display_clearBuffer();
    a324:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <display_clearBuffer>
	display_writeBufferToScreen();
    a328:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    a32c:	8a e5       	ldi	r24, 0x5A	; 90
    a32e:	96 e2       	ldi	r25, 0x26	; 38
    a330:	68 e6       	ldi	r22, 0x68	; 104
    a332:	76 e2       	ldi	r23, 0x26	; 38
    a334:	ab 01       	movw	r20, r22
    a336:	24 ef       	ldi	r18, 0xF4	; 244
    a338:	31 e0       	ldi	r19, 0x01	; 1
    a33a:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a33e:	88 23       	and	r24, r24
    a340:	19 f0       	breq	.+6      	; 0xa348 <Config_Wifi+0x54>
		display_putString("reset..........OK",col,0,System5x7);
    a342:	8d e7       	ldi	r24, 0x7D	; 125
    a344:	96 e2       	ldi	r25, 0x26	; 38
    a346:	02 c0       	rjmp	.+4      	; 0xa34c <Config_Wifi+0x58>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    a348:	8f e8       	ldi	r24, 0x8F	; 143
    a34a:	96 e2       	ldi	r25, 0x26	; 38
    a34c:	60 e0       	ldi	r22, 0x00	; 0
    a34e:	40 e0       	ldi	r20, 0x00	; 0
    a350:	23 ed       	ldi	r18, 0xD3	; 211
    a352:	30 e3       	ldi	r19, 0x30	; 48
    a354:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
	}
	display_writeBufferToScreen();
    a358:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a35c:	80 e1       	ldi	r24, 0x10	; 16
    a35e:	97 e2       	ldi	r25, 0x27	; 39
    a360:	20 e7       	ldi	r18, 0x70	; 112
    a362:	31 e0       	ldi	r19, 0x01	; 1
    a364:	f9 01       	movw	r30, r18
    a366:	31 97       	sbiw	r30, 0x01	; 1
    a368:	f1 f7       	brne	.-4      	; 0xa366 <Config_Wifi+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a36c:	d9 f7       	brne	.-10     	; 0xa364 <Config_Wifi+0x70>

	_delay_ms(1000);



    Wifi_SendCommand("set sys iofunc 0x50","AOK","AOK",500);    // 0x10
    a36e:	81 ea       	ldi	r24, 0xA1	; 161
    a370:	96 e2       	ldi	r25, 0x26	; 38
    a372:	65 eb       	ldi	r22, 0xB5	; 181
    a374:	76 e2       	ldi	r23, 0x26	; 38
    a376:	ab 01       	movw	r20, r22
    a378:	24 ef       	ldi	r18, 0xF4	; 244
    a37a:	31 e0       	ldi	r19, 0x01	; 1
    a37c:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a380:	80 e1       	ldi	r24, 0x10	; 16
    a382:	97 e2       	ldi	r25, 0x27	; 39
    a384:	20 e7       	ldi	r18, 0x70	; 112
    a386:	31 e0       	ldi	r19, 0x01	; 1
    a388:	f9 01       	movw	r30, r18
    a38a:	31 97       	sbiw	r30, 0x01	; 1
    a38c:	f1 f7       	brne	.-4      	; 0xa38a <Config_Wifi+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a38e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a390:	d9 f7       	brne	.-10     	; 0xa388 <Config_Wifi+0x94>
    _delay_ms(1000);


    Wifi_SendCommand("set wlan join 0","AOK","AOK",500);
    a392:	89 eb       	ldi	r24, 0xB9	; 185
    a394:	96 e2       	ldi	r25, 0x26	; 38
    a396:	65 eb       	ldi	r22, 0xB5	; 181
    a398:	76 e2       	ldi	r23, 0x26	; 38
    a39a:	ab 01       	movw	r20, r22
    a39c:	24 ef       	ldi	r18, 0xF4	; 244
    a39e:	31 e0       	ldi	r19, 0x01	; 1
    a3a0:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a3a4:	80 e1       	ldi	r24, 0x10	; 16
    a3a6:	97 e2       	ldi	r25, 0x27	; 39
    a3a8:	20 e7       	ldi	r18, 0x70	; 112
    a3aa:	31 e0       	ldi	r19, 0x01	; 1
    a3ac:	f9 01       	movw	r30, r18
    a3ae:	31 97       	sbiw	r30, 0x01	; 1
    a3b0:	f1 f7       	brne	.-4      	; 0xa3ae <Config_Wifi+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3b4:	d9 f7       	brne	.-10     	; 0xa3ac <Config_Wifi+0xb8>
    _delay_ms(1000);

    Wifi_SendCommand("set uart flow 1","AOK","AOK",500);
    a3b6:	89 ec       	ldi	r24, 0xC9	; 201
    a3b8:	96 e2       	ldi	r25, 0x26	; 38
    a3ba:	65 eb       	ldi	r22, 0xB5	; 181
    a3bc:	76 e2       	ldi	r23, 0x26	; 38
    a3be:	ab 01       	movw	r20, r22
    a3c0:	24 ef       	ldi	r18, 0xF4	; 244
    a3c2:	31 e0       	ldi	r19, 0x01	; 1
    a3c4:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a3c8:	88 e8       	ldi	r24, 0x88	; 136
    a3ca:	93 e1       	ldi	r25, 0x13	; 19
    a3cc:	20 e7       	ldi	r18, 0x70	; 112
    a3ce:	31 e0       	ldi	r19, 0x01	; 1
    a3d0:	f9 01       	movw	r30, r18
    a3d2:	31 97       	sbiw	r30, 0x01	; 1
    a3d4:	f1 f7       	brne	.-4      	; 0xa3d2 <Config_Wifi+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3d8:	d9 f7       	brne	.-10     	; 0xa3d0 <Config_Wifi+0xdc>
    _delay_ms(500);

    Wifi_SendCommand("set comm size 1420","AOK","AOK",500);
    a3da:	89 ed       	ldi	r24, 0xD9	; 217
    a3dc:	96 e2       	ldi	r25, 0x26	; 38
    a3de:	65 eb       	ldi	r22, 0xB5	; 181
    a3e0:	76 e2       	ldi	r23, 0x26	; 38
    a3e2:	ab 01       	movw	r20, r22
    a3e4:	24 ef       	ldi	r18, 0xF4	; 244
    a3e6:	31 e0       	ldi	r19, 0x01	; 1
    a3e8:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a3ec:	88 e8       	ldi	r24, 0x88	; 136
    a3ee:	93 e1       	ldi	r25, 0x13	; 19
    a3f0:	20 e7       	ldi	r18, 0x70	; 112
    a3f2:	31 e0       	ldi	r19, 0x01	; 1
    a3f4:	f9 01       	movw	r30, r18
    a3f6:	31 97       	sbiw	r30, 0x01	; 1
    a3f8:	f1 f7       	brne	.-4      	; 0xa3f6 <Config_Wifi+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3fc:	d9 f7       	brne	.-10     	; 0xa3f4 <Config_Wifi+0x100>
	_delay_ms(500);

	Wifi_SendCommand("set comm time 10","AOK","AOK",500);
    a3fe:	8c ee       	ldi	r24, 0xEC	; 236
    a400:	96 e2       	ldi	r25, 0x26	; 38
    a402:	65 eb       	ldi	r22, 0xB5	; 181
    a404:	76 e2       	ldi	r23, 0x26	; 38
    a406:	ab 01       	movw	r20, r22
    a408:	24 ef       	ldi	r18, 0xF4	; 244
    a40a:	31 e0       	ldi	r19, 0x01	; 1
    a40c:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a410:	88 e8       	ldi	r24, 0x88	; 136
    a412:	93 e1       	ldi	r25, 0x13	; 19
    a414:	20 e7       	ldi	r18, 0x70	; 112
    a416:	31 e0       	ldi	r19, 0x01	; 1
    a418:	f9 01       	movw	r30, r18
    a41a:	31 97       	sbiw	r30, 0x01	; 1
    a41c:	f1 f7       	brne	.-4      	; 0xa41a <Config_Wifi+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a41e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a420:	d9 f7       	brne	.-10     	; 0xa418 <Config_Wifi+0x124>
	_delay_ms(500);

    if(timeServerAttempts > 5){
    a422:	80 91 d6 33 	lds	r24, 0x33D6
    a426:	86 30       	cpi	r24, 0x06	; 6
    a428:	90 f0       	brcs	.+36     	; 0xa44e <Config_Wifi+0x15a>
        Wifi_SendCommand("set time address 195.43.74.3","AOK","AOK",500);
    a42a:	8d ef       	ldi	r24, 0xFD	; 253
    a42c:	96 e2       	ldi	r25, 0x26	; 38
    a42e:	65 eb       	ldi	r22, 0xB5	; 181
    a430:	76 e2       	ldi	r23, 0x26	; 38
    a432:	ab 01       	movw	r20, r22
    a434:	24 ef       	ldi	r18, 0xF4	; 244
    a436:	31 e0       	ldi	r19, 0x01	; 1
    a438:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a43c:	88 e8       	ldi	r24, 0x88	; 136
    a43e:	93 e1       	ldi	r25, 0x13	; 19
    a440:	20 e7       	ldi	r18, 0x70	; 112
    a442:	31 e0       	ldi	r19, 0x01	; 1
    a444:	f9 01       	movw	r30, r18
    a446:	31 97       	sbiw	r30, 0x01	; 1
    a448:	f1 f7       	brne	.-4      	; 0xa446 <Config_Wifi+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a44a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a44c:	d9 f7       	brne	.-10     	; 0xa444 <Config_Wifi+0x150>
	    _delay_ms(500);
    } else if(timeServerAttempts > 25){
        Wifi_SendCommand("set time address 131.130.251.107","AOK","AOK",500);
	    _delay_ms(500);
	}
    timeServerAttempts++;
    a44e:	80 91 d6 33 	lds	r24, 0x33D6
    a452:	8f 5f       	subi	r24, 0xFF	; 255
    a454:	80 93 d6 33 	sts	0x33D6, r24

    Wifi_SendCommand("save","Storing in config","Storing in config",500);
    a458:	8a e1       	ldi	r24, 0x1A	; 26
    a45a:	97 e2       	ldi	r25, 0x27	; 39
    a45c:	6f e1       	ldi	r22, 0x1F	; 31
    a45e:	77 e2       	ldi	r23, 0x27	; 39
    a460:	ab 01       	movw	r20, r22
    a462:	24 ef       	ldi	r18, 0xF4	; 244
    a464:	31 e0       	ldi	r19, 0x01	; 1
    a466:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a46a:	80 e1       	ldi	r24, 0x10	; 16
    a46c:	97 e2       	ldi	r25, 0x27	; 39
    a46e:	20 e7       	ldi	r18, 0x70	; 112
    a470:	31 e0       	ldi	r19, 0x01	; 1
    a472:	f9 01       	movw	r30, r18
    a474:	31 97       	sbiw	r30, 0x01	; 1
    a476:	f1 f7       	brne	.-4      	; 0xa474 <Config_Wifi+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a478:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a47a:	d9 f7       	brne	.-10     	; 0xa472 <Config_Wifi+0x17e>
	_delay_ms(1000);

	Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    a47c:	81 e3       	ldi	r24, 0x31	; 49
    a47e:	97 e2       	ldi	r25, 0x27	; 39
    a480:	68 e3       	ldi	r22, 0x38	; 56
    a482:	77 e2       	ldi	r23, 0x27	; 39
    a484:	ab 01       	movw	r20, r22
    a486:	24 ef       	ldi	r18, 0xF4	; 244
    a488:	31 e0       	ldi	r19, 0x01	; 1
    a48a:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a48e:	80 e4       	ldi	r24, 0x40	; 64
    a490:	9c e9       	ldi	r25, 0x9C	; 156
    a492:	20 e7       	ldi	r18, 0x70	; 112
    a494:	31 e0       	ldi	r19, 0x01	; 1
    a496:	f9 01       	movw	r30, r18
    a498:	31 97       	sbiw	r30, 0x01	; 1
    a49a:	f1 f7       	brne	.-4      	; 0xa498 <Config_Wifi+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a49c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a49e:	d9 f7       	brne	.-10     	; 0xa496 <Config_Wifi+0x1a2>
	_delay_ms(4000);


    Wifi_EnterCMDMode(1000);
    a4a0:	88 ee       	ldi	r24, 0xE8	; 232
    a4a2:	93 e0       	ldi	r25, 0x03	; 3
    a4a4:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <Wifi_EnterCMDMode>
    a4a8:	80 e1       	ldi	r24, 0x10	; 16
    a4aa:	97 e2       	ldi	r25, 0x27	; 39
    a4ac:	20 e7       	ldi	r18, 0x70	; 112
    a4ae:	31 e0       	ldi	r19, 0x01	; 1
    a4b0:	f9 01       	movw	r30, r18
    a4b2:	31 97       	sbiw	r30, 0x01	; 1
    a4b4:	f1 f7       	brne	.-4      	; 0xa4b2 <Config_Wifi+0x1be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a4b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a4b8:	d9 f7       	brne	.-10     	; 0xa4b0 <Config_Wifi+0x1bc>
    _delay_ms(1000);

	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    a4ba:	81 e4       	ldi	r24, 0x41	; 65
    a4bc:	97 e2       	ldi	r25, 0x27	; 39
    a4be:	65 eb       	ldi	r22, 0xB5	; 181
    a4c0:	76 e2       	ldi	r23, 0x26	; 38
    a4c2:	ab 01       	movw	r20, r22
    a4c4:	24 ef       	ldi	r18, 0xF4	; 244
    a4c6:	31 e0       	ldi	r19, 0x01	; 1
    a4c8:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a4cc:	88 e8       	ldi	r24, 0x88	; 136
    a4ce:	93 e1       	ldi	r25, 0x13	; 19
    a4d0:	20 e7       	ldi	r18, 0x70	; 112
    a4d2:	31 e0       	ldi	r19, 0x01	; 1
    a4d4:	f9 01       	movw	r30, r18
    a4d6:	31 97       	sbiw	r30, 0x01	; 1
    a4d8:	f1 f7       	brne	.-4      	; 0xa4d6 <Config_Wifi+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a4da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a4dc:	d9 f7       	brne	.-10     	; 0xa4d4 <Config_Wifi+0x1e0>
	_delay_ms(500);



	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    a4de:	83 e5       	ldi	r24, 0x53	; 83
    a4e0:	97 e2       	ldi	r25, 0x27	; 39
    a4e2:	65 eb       	ldi	r22, 0xB5	; 181
    a4e4:	76 e2       	ldi	r23, 0x26	; 38
    a4e6:	ab 01       	movw	r20, r22
    a4e8:	24 ef       	ldi	r18, 0xF4	; 244
    a4ea:	31 e0       	ldi	r19, 0x01	; 1
    a4ec:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a4f0:	88 23       	and	r24, r24
    a4f2:	19 f0       	breq	.+6      	; 0xa4fa <Config_Wifi+0x206>
		display_putString("enable time....OK",col,0,System5x7);
    a4f4:	85 e6       	ldi	r24, 0x65	; 101
    a4f6:	97 e2       	ldi	r25, 0x27	; 39
    a4f8:	02 c0       	rjmp	.+4      	; 0xa4fe <Config_Wifi+0x20a>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    a4fa:	87 e7       	ldi	r24, 0x77	; 119
    a4fc:	97 e2       	ldi	r25, 0x27	; 39
    a4fe:	61 e0       	ldi	r22, 0x01	; 1
    a500:	40 e0       	ldi	r20, 0x00	; 0
    a502:	23 ed       	ldi	r18, 0xD3	; 211
    a504:	30 e3       	ldi	r19, 0x30	; 48
    a506:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
	}
	display_writeBufferToScreen();
    a50a:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a50e:	88 e8       	ldi	r24, 0x88	; 136
    a510:	93 e1       	ldi	r25, 0x13	; 19
    a512:	20 e7       	ldi	r18, 0x70	; 112
    a514:	31 e0       	ldi	r19, 0x01	; 1
    a516:	f9 01       	movw	r30, r18
    a518:	31 97       	sbiw	r30, 0x01	; 1
    a51a:	f1 f7       	brne	.-4      	; 0xa518 <Config_Wifi+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a51c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a51e:	d9 f7       	brne	.-10     	; 0xa516 <Config_Wifi+0x222>
	_delay_ms(500);
	col++;
	
	if(authRead){
    a520:	80 91 89 33 	lds	r24, 0x3389
    a524:	88 23       	and	r24, r24
    a526:	11 f4       	brne	.+4      	; 0xa52c <Config_Wifi+0x238>
    a528:	12 e0       	ldi	r17, 0x02	; 2
    a52a:	22 c0       	rjmp	.+68     	; 0xa570 <Config_Wifi+0x27c>
		if(Wifi_SendCommand(auth,"AOK","AOK",500)){
    a52c:	83 ec       	ldi	r24, 0xC3	; 195
    a52e:	9f e2       	ldi	r25, 0x2F	; 47
    a530:	65 eb       	ldi	r22, 0xB5	; 181
    a532:	76 e2       	ldi	r23, 0x26	; 38
    a534:	ab 01       	movw	r20, r22
    a536:	24 ef       	ldi	r18, 0xF4	; 244
    a538:	31 e0       	ldi	r19, 0x01	; 1
    a53a:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a53e:	88 23       	and	r24, r24
    a540:	19 f0       	breq	.+6      	; 0xa548 <Config_Wifi+0x254>
			display_putString("encryption.....OK",col,0,System5x7);
    a542:	89 e8       	ldi	r24, 0x89	; 137
    a544:	97 e2       	ldi	r25, 0x27	; 39
    a546:	02 c0       	rjmp	.+4      	; 0xa54c <Config_Wifi+0x258>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    a548:	8b e9       	ldi	r24, 0x9B	; 155
    a54a:	97 e2       	ldi	r25, 0x27	; 39
    a54c:	62 e0       	ldi	r22, 0x02	; 2
    a54e:	40 e0       	ldi	r20, 0x00	; 0
    a550:	23 ed       	ldi	r18, 0xD3	; 211
    a552:	30 e3       	ldi	r19, 0x30	; 48
    a554:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		}
		display_writeBufferToScreen();
    a558:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a55c:	88 e8       	ldi	r24, 0x88	; 136
    a55e:	93 e1       	ldi	r25, 0x13	; 19
    a560:	20 e7       	ldi	r18, 0x70	; 112
    a562:	31 e0       	ldi	r19, 0x01	; 1
    a564:	f9 01       	movw	r30, r18
    a566:	31 97       	sbiw	r30, 0x01	; 1
    a568:	f1 f7       	brne	.-4      	; 0xa566 <Config_Wifi+0x272>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a56a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a56c:	d9 f7       	brne	.-10     	; 0xa564 <Config_Wifi+0x270>
    a56e:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(500);
		col++;
	}
	
	if(phraseRead){
    a570:	80 91 8a 33 	lds	r24, 0x338A
    a574:	88 23       	and	r24, r24
    a576:	11 f1       	breq	.+68     	; 0xa5bc <Config_Wifi+0x2c8>
		if(Wifi_SendCommand(phrase,"AOK","AOK",500)){
    a578:	85 ef       	ldi	r24, 0xF5	; 245
    a57a:	9f e2       	ldi	r25, 0x2F	; 47
    a57c:	65 eb       	ldi	r22, 0xB5	; 181
    a57e:	76 e2       	ldi	r23, 0x26	; 38
    a580:	ab 01       	movw	r20, r22
    a582:	24 ef       	ldi	r18, 0xF4	; 244
    a584:	31 e0       	ldi	r19, 0x01	; 1
    a586:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a58a:	88 23       	and	r24, r24
    a58c:	19 f0       	breq	.+6      	; 0xa594 <Config_Wifi+0x2a0>
			display_putString("phrase.........OK",col,0,System5x7);
    a58e:	8d ea       	ldi	r24, 0xAD	; 173
    a590:	97 e2       	ldi	r25, 0x27	; 39
    a592:	02 c0       	rjmp	.+4      	; 0xa598 <Config_Wifi+0x2a4>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    a594:	8f eb       	ldi	r24, 0xBF	; 191
    a596:	97 e2       	ldi	r25, 0x27	; 39
    a598:	61 2f       	mov	r22, r17
    a59a:	40 e0       	ldi	r20, 0x00	; 0
    a59c:	23 ed       	ldi	r18, 0xD3	; 211
    a59e:	30 e3       	ldi	r19, 0x30	; 48
    a5a0:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		}
		display_writeBufferToScreen();
    a5a4:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a5a8:	88 e8       	ldi	r24, 0x88	; 136
    a5aa:	93 e1       	ldi	r25, 0x13	; 19
    a5ac:	20 e7       	ldi	r18, 0x70	; 112
    a5ae:	31 e0       	ldi	r19, 0x01	; 1
    a5b0:	f9 01       	movw	r30, r18
    a5b2:	31 97       	sbiw	r30, 0x01	; 1
    a5b4:	f1 f7       	brne	.-4      	; 0xa5b2 <Config_Wifi+0x2be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5b8:	d9 f7       	brne	.-10     	; 0xa5b0 <Config_Wifi+0x2bc>
    a5ba:	25 c0       	rjmp	.+74     	; 0xa606 <Config_Wifi+0x312>
		_delay_ms(500);
		col++;
	} else if(keyRead){
    a5bc:	80 91 8b 33 	lds	r24, 0x338B
    a5c0:	88 23       	and	r24, r24
    a5c2:	11 f1       	breq	.+68     	; 0xa608 <Config_Wifi+0x314>
		if(Wifi_SendCommand(key,"AOK","AOK",500)){
    a5c4:	87 e2       	ldi	r24, 0x27	; 39
    a5c6:	90 e3       	ldi	r25, 0x30	; 48
    a5c8:	65 eb       	ldi	r22, 0xB5	; 181
    a5ca:	76 e2       	ldi	r23, 0x26	; 38
    a5cc:	ab 01       	movw	r20, r22
    a5ce:	24 ef       	ldi	r18, 0xF4	; 244
    a5d0:	31 e0       	ldi	r19, 0x01	; 1
    a5d2:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a5d6:	88 23       	and	r24, r24
    a5d8:	19 f0       	breq	.+6      	; 0xa5e0 <Config_Wifi+0x2ec>
			display_putString("key............OK",col,0,System5x7);
    a5da:	81 ed       	ldi	r24, 0xD1	; 209
    a5dc:	97 e2       	ldi	r25, 0x27	; 39
    a5de:	02 c0       	rjmp	.+4      	; 0xa5e4 <Config_Wifi+0x2f0>
		} else {
			display_putString("key..........FAIL",col,0,System5x7);
    a5e0:	83 ee       	ldi	r24, 0xE3	; 227
    a5e2:	97 e2       	ldi	r25, 0x27	; 39
    a5e4:	61 2f       	mov	r22, r17
    a5e6:	40 e0       	ldi	r20, 0x00	; 0
    a5e8:	23 ed       	ldi	r18, 0xD3	; 211
    a5ea:	30 e3       	ldi	r19, 0x30	; 48
    a5ec:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		}
		display_writeBufferToScreen();
    a5f0:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a5f4:	88 e8       	ldi	r24, 0x88	; 136
    a5f6:	93 e1       	ldi	r25, 0x13	; 19
    a5f8:	20 e7       	ldi	r18, 0x70	; 112
    a5fa:	31 e0       	ldi	r19, 0x01	; 1
    a5fc:	f9 01       	movw	r30, r18
    a5fe:	31 97       	sbiw	r30, 0x01	; 1
    a600:	f1 f7       	brne	.-4      	; 0xa5fe <Config_Wifi+0x30a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a602:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a604:	d9 f7       	brne	.-10     	; 0xa5fc <Config_Wifi+0x308>
		_delay_ms(500);
		col++;
    a606:	1f 5f       	subi	r17, 0xFF	; 255
	}

	if(ssidRead){
    a608:	80 91 8d 33 	lds	r24, 0x338D
    a60c:	88 23       	and	r24, r24
    a60e:	19 f1       	breq	.+70     	; 0xa656 <Config_Wifi+0x362>
		if(Wifi_SendCommand(ssid,"DeAut","Auto-",2000)){
    a610:	89 e5       	ldi	r24, 0x59	; 89
    a612:	90 e3       	ldi	r25, 0x30	; 48
    a614:	65 ef       	ldi	r22, 0xF5	; 245
    a616:	77 e2       	ldi	r23, 0x27	; 39
    a618:	4b ef       	ldi	r20, 0xFB	; 251
    a61a:	57 e2       	ldi	r21, 0x27	; 39
    a61c:	20 ed       	ldi	r18, 0xD0	; 208
    a61e:	37 e0       	ldi	r19, 0x07	; 7
    a620:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a624:	88 23       	and	r24, r24
    a626:	19 f0       	breq	.+6      	; 0xa62e <Config_Wifi+0x33a>
			display_putString("ssid...........OK",col,0,System5x7);
    a628:	81 e0       	ldi	r24, 0x01	; 1
    a62a:	98 e2       	ldi	r25, 0x28	; 40
    a62c:	02 c0       	rjmp	.+4      	; 0xa632 <Config_Wifi+0x33e>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    a62e:	83 e1       	ldi	r24, 0x13	; 19
    a630:	98 e2       	ldi	r25, 0x28	; 40
    a632:	61 2f       	mov	r22, r17
    a634:	40 e0       	ldi	r20, 0x00	; 0
    a636:	23 ed       	ldi	r18, 0xD3	; 211
    a638:	30 e3       	ldi	r19, 0x30	; 48
    a63a:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		}
		display_writeBufferToScreen();
    a63e:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a642:	88 e9       	ldi	r24, 0x98	; 152
    a644:	9a e3       	ldi	r25, 0x3A	; 58
    a646:	20 e7       	ldi	r18, 0x70	; 112
    a648:	31 e0       	ldi	r19, 0x01	; 1
    a64a:	f9 01       	movw	r30, r18
    a64c:	31 97       	sbiw	r30, 0x01	; 1
    a64e:	f1 f7       	brne	.-4      	; 0xa64c <Config_Wifi+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a650:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a652:	d9 f7       	brne	.-10     	; 0xa64a <Config_Wifi+0x356>
		_delay_ms(1500);
		col++;
    a654:	1f 5f       	subi	r17, 0xFF	; 255
	}

	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    a656:	85 e2       	ldi	r24, 0x25	; 37
    a658:	98 e2       	ldi	r25, 0x28	; 40
    a65a:	6e e2       	ldi	r22, 0x2E	; 46
    a65c:	78 e2       	ldi	r23, 0x28	; 40
    a65e:	ab 01       	movw	r20, r22
    a660:	24 ef       	ldi	r18, 0xF4	; 244
    a662:	31 e0       	ldi	r19, 0x01	; 1
    a664:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    a668:	88 e8       	ldi	r24, 0x88	; 136
    a66a:	93 e1       	ldi	r25, 0x13	; 19
    a66c:	20 e7       	ldi	r18, 0x70	; 112
    a66e:	31 e0       	ldi	r19, 0x01	; 1
    a670:	f9 01       	movw	r30, r18
    a672:	31 97       	sbiw	r30, 0x01	; 1
    a674:	f1 f7       	brne	.-4      	; 0xa672 <Config_Wifi+0x37e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a678:	d9 f7       	brne	.-10     	; 0xa670 <Config_Wifi+0x37c>
	_delay_ms(500);

	Wifi_GetMac(1000);
    a67a:	88 ee       	ldi	r24, 0xE8	; 232
    a67c:	93 e0       	ldi	r25, 0x03	; 3
    a67e:	0e 94 49 41 	call	0x8292	; 0x8292 <Wifi_GetMac>
    a682:	88 e8       	ldi	r24, 0x88	; 136
    a684:	93 e1       	ldi	r25, 0x13	; 19
    a686:	20 e7       	ldi	r18, 0x70	; 112
    a688:	31 e0       	ldi	r19, 0x01	; 1
    a68a:	f9 01       	movw	r30, r18
    a68c:	31 97       	sbiw	r30, 0x01	; 1
    a68e:	f1 f7       	brne	.-4      	; 0xa68c <Config_Wifi+0x398>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a690:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a692:	d9 f7       	brne	.-10     	; 0xa68a <Config_Wifi+0x396>
	_delay_ms(500);
	Wifi_ExitCMDMode(500);
    a694:	84 ef       	ldi	r24, 0xF4	; 244
    a696:	91 e0       	ldi	r25, 0x01	; 1
    a698:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    a69c:	80 e1       	ldi	r24, 0x10	; 16
    a69e:	97 e2       	ldi	r25, 0x27	; 39
    a6a0:	20 e7       	ldi	r18, 0x70	; 112
    a6a2:	31 e0       	ldi	r19, 0x01	; 1
    a6a4:	f9 01       	movw	r30, r18
    a6a6:	31 97       	sbiw	r30, 0x01	; 1
    a6a8:	f1 f7       	brne	.-4      	; 0xa6a6 <Config_Wifi+0x3b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a6aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a6ac:	d9 f7       	brne	.-10     	; 0xa6a4 <Config_Wifi+0x3b0>

	_delay_ms(1000);
	
	if(Wifi_Connected(1000)){
    a6ae:	88 ee       	ldi	r24, 0xE8	; 232
    a6b0:	93 e0       	ldi	r25, 0x03	; 3
    a6b2:	0e 94 3d 03 	call	0x67a	; 0x67a <Wifi_Connected>
    a6b6:	88 23       	and	r24, r24
    a6b8:	61 f0       	breq	.+24     	; 0xa6d2 <Config_Wifi+0x3de>
		display_putString("network........OK",col,0,System5x7);
    a6ba:	88 e3       	ldi	r24, 0x38	; 56
    a6bc:	98 e2       	ldi	r25, 0x28	; 40
    a6be:	61 2f       	mov	r22, r17
    a6c0:	40 e0       	ldi	r20, 0x00	; 0
    a6c2:	23 ed       	ldi	r18, 0xD3	; 211
    a6c4:	30 e3       	ldi	r19, 0x30	; 48
    a6c6:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		connected = true;
    a6ca:	81 e0       	ldi	r24, 0x01	; 1
    a6cc:	80 93 4e 33 	sts	0x334E, r24
    a6d0:	0a c0       	rjmp	.+20     	; 0xa6e6 <Config_Wifi+0x3f2>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    a6d2:	8a e4       	ldi	r24, 0x4A	; 74
    a6d4:	98 e2       	ldi	r25, 0x28	; 40
    a6d6:	61 2f       	mov	r22, r17
    a6d8:	40 e0       	ldi	r20, 0x00	; 0
    a6da:	23 ed       	ldi	r18, 0xD3	; 211
    a6dc:	30 e3       	ldi	r19, 0x30	; 48
    a6de:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		connected = false;
    a6e2:	10 92 4e 33 	sts	0x334E, r1
	}
	display_writeBufferToScreen();
    a6e6:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
	col++;
    a6ea:	01 2f       	mov	r16, r17
    a6ec:	0f 5f       	subi	r16, 0xFF	; 255


	
	if(connected){
    a6ee:	80 91 4e 33 	lds	r24, 0x334E
    a6f2:	88 23       	and	r24, r24
    a6f4:	09 f4       	brne	.+2      	; 0xa6f8 <Config_Wifi+0x404>
    a6f6:	ad c0       	rjmp	.+346    	; 0xa852 <Config_Wifi+0x55e>
    a6f8:	80 e1       	ldi	r24, 0x10	; 16
    a6fa:	97 e2       	ldi	r25, 0x27	; 39
    a6fc:	20 e7       	ldi	r18, 0x70	; 112
    a6fe:	31 e0       	ldi	r19, 0x01	; 1
    a700:	f9 01       	movw	r30, r18
    a702:	31 97       	sbiw	r30, 0x01	; 1
    a704:	f1 f7       	brne	.-4      	; 0xa702 <Config_Wifi+0x40e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a706:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a708:	d9 f7       	brne	.-10     	; 0xa700 <Config_Wifi+0x40c>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    a70a:	84 ef       	ldi	r24, 0xF4	; 244
    a70c:	91 e0       	ldi	r25, 0x01	; 1
    a70e:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    a712:	88 ee       	ldi	r24, 0xE8	; 232
    a714:	93 e0       	ldi	r25, 0x03	; 3
    a716:	0e 94 1b 48 	call	0x9036	; 0x9036 <Wifi_GetTime>
    a71a:	88 23       	and	r24, r24
    a71c:	09 f4       	brne	.+2      	; 0xa720 <Config_Wifi+0x42c>
    a71e:	5a c0       	rjmp	.+180    	; 0xa7d4 <Config_Wifi+0x4e0>
			Time_Set(time_secs);
    a720:	80 91 46 33 	lds	r24, 0x3346
    a724:	90 91 47 33 	lds	r25, 0x3347
    a728:	a0 91 48 33 	lds	r26, 0x3348
    a72c:	b0 91 49 33 	lds	r27, 0x3349
	
	
}

void Time_Set(uint32_t time){
  cli();
    a730:	f8 94       	cli
  UNIX_time = time;
    a732:	80 93 68 33 	sts	0x3368, r24
    a736:	90 93 69 33 	sts	0x3369, r25
    a73a:	a0 93 6a 33 	sts	0x336A, r26
    a73e:	b0 93 6b 33 	sts	0x336B, r27
  sei();
    a742:	78 94       	sei
		    timeIsValid = true;
    a744:	11 e0       	ldi	r17, 0x01	; 1
    a746:	10 93 a9 33 	sts	0x33A9, r17
			display_putString("internet.......OK",col,0,System5x7);
    a74a:	8c e5       	ldi	r24, 0x5C	; 92
    a74c:	98 e2       	ldi	r25, 0x28	; 40
    a74e:	60 2f       	mov	r22, r16
    a750:	40 e0       	ldi	r20, 0x00	; 0
    a752:	23 ed       	ldi	r18, 0xD3	; 211
    a754:	30 e3       	ldi	r19, 0x30	; 48
    a756:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
			signalStrength = Wifi_GetSignalStrength(1000);
    a75a:	88 ee       	ldi	r24, 0xE8	; 232
    a75c:	93 e0       	ldi	r25, 0x03	; 3
    a75e:	0e 94 18 51 	call	0xa230	; 0xa230 <Wifi_GetSignalStrength>
    a762:	80 93 94 33 	sts	0x3394, r24

	        Debug_SendString("Getting space remaining",true);
    a766:	8e e6       	ldi	r24, 0x6E	; 110
    a768:	98 e2       	ldi	r25, 0x28	; 40
    a76a:	61 e0       	ldi	r22, 0x01	; 1
    a76c:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
	        okToGetRemainingSpace = true;
    a770:	10 93 b3 4a 	sts	0x4AB3, r17
	        while(!okToGetRemainingSpace);
    a774:	80 91 b3 4a 	lds	r24, 0x4AB3
    a778:	88 23       	and	r24, r24
    a77a:	e1 f3       	breq	.-8      	; 0xa774 <Config_Wifi+0x480>
            if(!recording){
    a77c:	80 91 6d 33 	lds	r24, 0x336D
    a780:	88 23       	and	r24, r24
    a782:	31 f4       	brne	.+12     	; 0xa790 <Config_Wifi+0x49c>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a784:	e0 e2       	ldi	r30, 0x20	; 32
    a786:	f6 e0       	ldi	r31, 0x06	; 6
    a788:	80 e4       	ldi	r24, 0x40	; 64
    a78a:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a78c:	80 e8       	ldi	r24, 0x80	; 128
    a78e:	86 83       	std	Z+6, r24	; 0x06
    a790:	80 e1       	ldi	r24, 0x10	; 16
    a792:	97 e2       	ldi	r25, 0x27	; 39
    a794:	20 e7       	ldi	r18, 0x70	; 112
    a796:	31 e0       	ldi	r19, 0x01	; 1
    a798:	f9 01       	movw	r30, r18
    a79a:	31 97       	sbiw	r30, 0x01	; 1
    a79c:	f1 f7       	brne	.-4      	; 0xa79a <Config_Wifi+0x4a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a79e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7a0:	d9 f7       	brne	.-10     	; 0xa798 <Config_Wifi+0x4a4>
                Leds_Set(wifi_Green);
			    Leds_Clear(wifi_Red);
            }
			_delay_ms(1000);
            Wifi_SendCommand("set uart instant 460800","AOK","AOK",5);
    a7a2:	86 e8       	ldi	r24, 0x86	; 134
    a7a4:	98 e2       	ldi	r25, 0x28	; 40
    a7a6:	65 eb       	ldi	r22, 0xB5	; 181
    a7a8:	76 e2       	ldi	r23, 0x26	; 38
    a7aa:	ab 01       	movw	r20, r22
    a7ac:	25 e0       	ldi	r18, 0x05	; 5
    a7ae:	30 e0       	ldi	r19, 0x00	; 0
    a7b0:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
            Wifi_Init(460800);
    a7b4:	60 e0       	ldi	r22, 0x00	; 0
    a7b6:	78 e0       	ldi	r23, 0x08	; 8
    a7b8:	87 e0       	ldi	r24, 0x07	; 7
    a7ba:	90 e0       	ldi	r25, 0x00	; 0
    a7bc:	0e 94 b6 02 	call	0x56c	; 0x56c <Wifi_Init>
    a7c0:	80 e3       	ldi	r24, 0x30	; 48
    a7c2:	95 e7       	ldi	r25, 0x75	; 117
    a7c4:	20 e7       	ldi	r18, 0x70	; 112
    a7c6:	31 e0       	ldi	r19, 0x01	; 1
    a7c8:	f9 01       	movw	r30, r18
    a7ca:	31 97       	sbiw	r30, 0x01	; 1
    a7cc:	f1 f7       	brne	.-4      	; 0xa7ca <Config_Wifi+0x4d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7d0:	d9 f7       	brne	.-10     	; 0xa7c8 <Config_Wifi+0x4d4>
    a7d2:	1d c0       	rjmp	.+58     	; 0xa80e <Config_Wifi+0x51a>
	        _delay_ms(3000);
		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    a7d4:	8e e9       	ldi	r24, 0x9E	; 158
    a7d6:	98 e2       	ldi	r25, 0x28	; 40
    a7d8:	60 2f       	mov	r22, r16
    a7da:	40 e0       	ldi	r20, 0x00	; 0
    a7dc:	23 ed       	ldi	r18, 0xD3	; 211
    a7de:	30 e3       	ldi	r19, 0x30	; 48
    a7e0:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
            if(!recording){
    a7e4:	80 91 6d 33 	lds	r24, 0x336D
    a7e8:	88 23       	and	r24, r24
    a7ea:	31 f4       	brne	.+12     	; 0xa7f8 <Config_Wifi+0x504>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a7ec:	e0 e2       	ldi	r30, 0x20	; 32
    a7ee:	f6 e0       	ldi	r31, 0x06	; 6
    a7f0:	80 e8       	ldi	r24, 0x80	; 128
    a7f2:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a7f4:	80 e4       	ldi	r24, 0x40	; 64
    a7f6:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
            }
			connected = false;
    a7f8:	10 92 4e 33 	sts	0x334E, r1
    a7fc:	88 e8       	ldi	r24, 0x88	; 136
    a7fe:	93 e1       	ldi	r25, 0x13	; 19
    a800:	20 e7       	ldi	r18, 0x70	; 112
    a802:	31 e0       	ldi	r19, 0x01	; 1
    a804:	f9 01       	movw	r30, r18
    a806:	31 97       	sbiw	r30, 0x01	; 1
    a808:	f1 f7       	brne	.-4      	; 0xa806 <Config_Wifi+0x512>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a80a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a80c:	d9 f7       	brne	.-10     	; 0xa804 <Config_Wifi+0x510>
			_delay_ms(500);

		}

		display_writeBufferToScreen();
    a80e:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a812:	80 e1       	ldi	r24, 0x10	; 16
    a814:	97 e2       	ldi	r25, 0x27	; 39
    a816:	20 e7       	ldi	r18, 0x70	; 112
    a818:	31 e0       	ldi	r19, 0x01	; 1
    a81a:	f9 01       	movw	r30, r18
    a81c:	31 97       	sbiw	r30, 0x01	; 1
    a81e:	f1 f7       	brne	.-4      	; 0xa81c <Config_Wifi+0x528>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a820:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a822:	d9 f7       	brne	.-10     	; 0xa81a <Config_Wifi+0x526>
    a824:	0d c0       	rjmp	.+26     	; 0xa840 <Config_Wifi+0x54c>
    a826:	80 e1       	ldi	r24, 0x10	; 16
    a828:	97 e2       	ldi	r25, 0x27	; 39
    a82a:	f8 01       	movw	r30, r16
    a82c:	31 97       	sbiw	r30, 0x01	; 1
    a82e:	f1 f7       	brne	.-4      	; 0xa82c <Config_Wifi+0x538>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a830:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a832:	d9 f7       	brne	.-10     	; 0xa82a <Config_Wifi+0x536>
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
    a834:	80 eb       	ldi	r24, 0xB0	; 176
    a836:	98 e2       	ldi	r25, 0x28	; 40
    a838:	61 e0       	ldi	r22, 0x01	; 1
    a83a:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    a83e:	02 c0       	rjmp	.+4      	; 0xa844 <Config_Wifi+0x550>
    a840:	00 e7       	ldi	r16, 0x70	; 112
    a842:	11 e0       	ldi	r17, 0x01	; 1

		}

		display_writeBufferToScreen();
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
    a844:	88 ee       	ldi	r24, 0xE8	; 232
    a846:	93 e0       	ldi	r25, 0x03	; 3
    a848:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    a84c:	88 23       	and	r24, r24
    a84e:	59 f3       	breq	.-42     	; 0xa826 <Config_Wifi+0x532>
    a850:	12 c0       	rjmp	.+36     	; 0xa876 <Config_Wifi+0x582>
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
		}

	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    a852:	8e e9       	ldi	r24, 0x9E	; 158
    a854:	98 e2       	ldi	r25, 0x28	; 40
    a856:	60 2f       	mov	r22, r16
    a858:	40 e0       	ldi	r20, 0x00	; 0
    a85a:	23 ed       	ldi	r18, 0xD3	; 211
    a85c:	30 e3       	ldi	r19, 0x30	; 48
    a85e:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
		display_writeBufferToScreen();
    a862:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
        if(!recording){
    a866:	80 91 6d 33 	lds	r24, 0x336D
    a86a:	88 23       	and	r24, r24
    a86c:	21 f4       	brne	.+8      	; 0xa876 <Config_Wifi+0x582>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a86e:	80 e8       	ldi	r24, 0x80	; 128
    a870:	e0 e2       	ldi	r30, 0x20	; 32
    a872:	f6 e0       	ldi	r31, 0x06	; 6
    a874:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Set(wifi_Red);
        }
	}


}
    a876:	1f 91       	pop	r17
    a878:	0f 91       	pop	r16
    a87a:	08 95       	ret

0000a87c <main>:


// ********************************** Main Program *********************************


int main(void){
    a87c:	2f 92       	push	r2
    a87e:	3f 92       	push	r3
    a880:	5f 92       	push	r5
    a882:	6f 92       	push	r6
    a884:	7f 92       	push	r7
    a886:	8f 92       	push	r8
    a888:	9f 92       	push	r9
    a88a:	af 92       	push	r10
    a88c:	bf 92       	push	r11
    a88e:	cf 92       	push	r12
    a890:	df 92       	push	r13
    a892:	ef 92       	push	r14
    a894:	ff 92       	push	r15
    a896:	0f 93       	push	r16
    a898:	1f 93       	push	r17
    a89a:	df 93       	push	r29
    a89c:	cf 93       	push	r28
    a89e:	0f 92       	push	r0
    a8a0:	cd b7       	in	r28, 0x3d	; 61
    a8a2:	de b7       	in	r29, 0x3e	; 62
    a8a4:	80 e0       	ldi	r24, 0x00	; 0
    a8a6:	98 e4       	ldi	r25, 0x48	; 72
    a8a8:	01 97       	sbiw	r24, 0x01	; 1
    a8aa:	f1 f7       	brne	.-4      	; 0xa8a8 <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    a8ac:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <Clock_Init>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    a8b0:	8f b7       	in	r24, 0x3f	; 63
    a8b2:	89 83       	std	Y+1, r24	; 0x01
    cli();
    a8b4:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    a8b6:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    a8b8:	21 e0       	ldi	r18, 0x01	; 1
    a8ba:	86 e9       	ldi	r24, 0x96	; 150
    a8bc:	90 e0       	ldi	r25, 0x00	; 0
    a8be:	fc 01       	movw	r30, r24
    a8c0:	08 ed       	ldi	r16, 0xD8	; 216
    a8c2:	04 bf       	out	0x34, r16	; 52
    a8c4:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    a8c6:	89 81       	ldd	r24, Y+1	; 0x01
    a8c8:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();

	getDeviceID();
    a8ca:	0e 94 cd 3a 	call	0x759a	; 0x759a <getDeviceID>
	display_init();
    a8ce:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <display_init>

	Time_Init();
    a8d2:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <Time_Init>
	Sensors_Init();
    a8d6:	0e 94 ae 30 	call	0x615c	; 0x615c <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    a8da:	80 91 21 06 	lds	r24, 0x0621
    a8de:	83 6f       	ori	r24, 0xF3	; 243
    a8e0:	e0 e2       	ldi	r30, 0x20	; 32
    a8e2:	f6 e0       	ldi	r31, 0x06	; 6
    a8e4:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    a8e6:	0e 94 57 03 	call	0x6ae	; 0x6ae <Dpad_Init>


	Rs232_Init();
    a8ea:	0e 94 a3 03 	call	0x746	; 0x746 <Rs232_Init>

	Light_Init(LightAddress);
    a8ee:	82 e7       	ldi	r24, 0x72	; 114
    a8f0:	0e 94 27 33 	call	0x664e	; 0x664e <Light_Init>


	Display_BackgroundWriter_Init();
    a8f4:	0e 94 4d 3a 	call	0x749a	; 0x749a <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    a8f8:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <SD_BackroundWriter_Init>
	DMA_Init();
    a8fc:	0e 94 29 3a 	call	0x7452	; 0x7452 <DMA_Init>


	display_putString("   BaseStation   ",1,0,System5x7);
    a900:	87 ec       	ldi	r24, 0xC7	; 199
    a902:	98 e2       	ldi	r25, 0x28	; 40
    a904:	61 e0       	ldi	r22, 0x01	; 1
    a906:	40 e0       	ldi	r20, 0x00	; 0
    a908:	23 ed       	ldi	r18, 0xD3	; 211
    a90a:	30 e3       	ldi	r19, 0x30	; 48
    a90c:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
	strcat(temp,"  Hardware: v");
    a910:	85 ea       	ldi	r24, 0xA5	; 165
    a912:	99 e4       	ldi	r25, 0x49	; 73
    a914:	69 ed       	ldi	r22, 0xD9	; 217
    a916:	78 e2       	ldi	r23, 0x28	; 40
    a918:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	strcat(temp,HardwareVersion);
    a91c:	85 ea       	ldi	r24, 0xA5	; 165
    a91e:	99 e4       	ldi	r25, 0x49	; 73
    a920:	68 e9       	ldi	r22, 0x98	; 152
    a922:	73 e2       	ldi	r23, 0x23	; 35
    a924:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	display_putString(temp,3,0,System5x7);
    a928:	85 ea       	ldi	r24, 0xA5	; 165
    a92a:	99 e4       	ldi	r25, 0x49	; 73
    a92c:	63 e0       	ldi	r22, 0x03	; 3
    a92e:	40 e0       	ldi	r20, 0x00	; 0
    a930:	23 ed       	ldi	r18, 0xD3	; 211
    a932:	30 e3       	ldi	r19, 0x30	; 48
    a934:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
	temp[0] = 0;
    a938:	10 92 a5 49 	sts	0x49A5, r1
	strcat(temp," Firmware: v");
    a93c:	85 ea       	ldi	r24, 0xA5	; 165
    a93e:	99 e4       	ldi	r25, 0x49	; 73
    a940:	67 ee       	ldi	r22, 0xE7	; 231
    a942:	78 e2       	ldi	r23, 0x28	; 40
    a944:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	strcat(temp,FirmwareVersion);
    a948:	85 ea       	ldi	r24, 0xA5	; 165
    a94a:	99 e4       	ldi	r25, 0x49	; 73
    a94c:	62 e8       	ldi	r22, 0x82	; 130
    a94e:	73 e2       	ldi	r23, 0x23	; 35
    a950:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
	display_putString(temp,5,0,System5x7);
    a954:	85 ea       	ldi	r24, 0xA5	; 165
    a956:	99 e4       	ldi	r25, 0x49	; 73
    a958:	65 e0       	ldi	r22, 0x05	; 5
    a95a:	40 e0       	ldi	r20, 0x00	; 0
    a95c:	23 ed       	ldi	r18, 0xD3	; 211
    a95e:	30 e3       	ldi	r19, 0x30	; 48
    a960:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
	display_writeBufferToScreen();
    a964:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>
    a968:	80 e1       	ldi	r24, 0x10	; 16
    a96a:	97 e2       	ldi	r25, 0x27	; 39
    a96c:	20 e7       	ldi	r18, 0x70	; 112
    a96e:	31 e0       	ldi	r19, 0x01	; 1
    a970:	f9 01       	movw	r30, r18
    a972:	31 97       	sbiw	r30, 0x01	; 1
    a974:	f1 f7       	brne	.-4      	; 0xa972 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a976:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a978:	d9 f7       	brne	.-10     	; 0xa970 <main+0xf4>
	_delay_ms(1000);


    SD_Init();
    a97a:	0e 94 39 2c 	call	0x5872	; 0x5872 <SD_Init>
		
}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    a97e:	80 91 a2 00 	lds	r24, 0x00A2
    a982:	87 60       	ori	r24, 0x07	; 7
    a984:	e0 ea       	ldi	r30, 0xA0	; 160
    a986:	f0 e0       	ldi	r31, 0x00	; 0
    a988:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    a98a:	78 94       	sei
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    a98c:	a0 e2       	ldi	r26, 0x20	; 32
    a98e:	b6 e0       	ldi	r27, 0x06	; 6
    a990:	42 e0       	ldi	r20, 0x02	; 2
    a992:	20 e7       	ldi	r18, 0x70	; 112
    a994:	31 e0       	ldi	r19, 0x01	; 1
    a996:	05 c0       	rjmp	.+10     	; 0xa9a2 <main+0x126>
    a998:	f9 01       	movw	r30, r18
    a99a:	31 97       	sbiw	r30, 0x01	; 1
    a99c:	f1 f7       	brne	.-4      	; 0xa99a <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a99e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9a0:	d9 f7       	brne	.-10     	; 0xa998 <main+0x11c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    a9a2:	80 91 a8 06 	lds	r24, 0x06A8
    a9a6:	80 ff       	sbrs	r24, 0
    a9a8:	22 c7       	rjmp	.+3652   	; 0xb7ee <main+0xf72>
    a9aa:	17 96       	adiw	r26, 0x07	; 7
    a9ac:	4c 93       	st	X, r20
    a9ae:	17 97       	sbiw	r26, 0x07	; 7
    a9b0:	88 e8       	ldi	r24, 0x88	; 136
    a9b2:	93 e1       	ldi	r25, 0x13	; 19
    a9b4:	f1 cf       	rjmp	.-30     	; 0xa998 <main+0x11c>
    a9b6:	ca 01       	movw	r24, r20
    a9b8:	01 97       	sbiw	r24, 0x01	; 1
    a9ba:	f1 f7       	brne	.-4      	; 0xa9b8 <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9bc:	21 50       	subi	r18, 0x01	; 1
    a9be:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9c0:	d1 f7       	brne	.-12     	; 0xa9b6 <main+0x13a>
	}
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);

	Read_config_file();
    a9c2:	0e 94 cc 48 	call	0x9198	; 0x9198 <Read_config_file>

    if(demoMode){
    a9c6:	80 91 38 33 	lds	r24, 0x3338
    a9ca:	88 23       	and	r24, r24
    a9cc:	19 f0       	breq	.+6      	; 0xa9d4 <main+0x158>
		display_putString("    Demo Mode    ",7,0,System5x7);
    a9ce:	84 ef       	ldi	r24, 0xF4	; 244
    a9d0:	98 e2       	ldi	r25, 0x28	; 40
    a9d2:	09 c0       	rjmp	.+18     	; 0xa9e6 <main+0x16a>
	} else if(useWifiForUploading) {
    a9d4:	80 91 39 33 	lds	r24, 0x3339
    a9d8:	88 23       	and	r24, r24
    a9da:	19 f0       	breq	.+6      	; 0xa9e2 <main+0x166>
	    display_putString("  Uploader: Wifi ",7,0,System5x7);
    a9dc:	86 e0       	ldi	r24, 0x06	; 6
    a9de:	99 e2       	ldi	r25, 0x29	; 41
    a9e0:	02 c0       	rjmp	.+4      	; 0xa9e6 <main+0x16a>
	} else {
	    display_putString("  Uploader: USB  ",7,0,System5x7);
    a9e2:	88 e1       	ldi	r24, 0x18	; 24
    a9e4:	99 e2       	ldi	r25, 0x29	; 41
    a9e6:	67 e0       	ldi	r22, 0x07	; 7
    a9e8:	40 e0       	ldi	r20, 0x00	; 0
    a9ea:	23 ed       	ldi	r18, 0xD3	; 211
    a9ec:	30 e3       	ldi	r19, 0x30	; 48
    a9ee:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <display_putString>
	}
    display_writeBufferToScreen();
    a9f2:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>

    if(useWifiForUploading){
    a9f6:	80 91 39 33 	lds	r24, 0x3339
    a9fa:	88 23       	and	r24, r24
    a9fc:	29 f0       	breq	.+10     	; 0xaa08 <main+0x18c>
	   Debug_Init(9600);
    a9fe:	60 e8       	ldi	r22, 0x80	; 128
    aa00:	75 e2       	ldi	r23, 0x25	; 37
    aa02:	80 e0       	ldi	r24, 0x00	; 0
    aa04:	90 e0       	ldi	r25, 0x00	; 0
    aa06:	04 c0       	rjmp	.+8      	; 0xaa10 <main+0x194>
	} else {
	   Debug_Init(460800);
    aa08:	60 e0       	ldi	r22, 0x00	; 0
    aa0a:	78 e0       	ldi	r23, 0x08	; 8
    aa0c:	87 e0       	ldi	r24, 0x07	; 7
    aa0e:	90 e0       	ldi	r25, 0x00	; 0
    aa10:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	}




    if(demoMode){
    aa14:	80 91 38 33 	lds	r24, 0x3338
    aa18:	88 23       	and	r24, r24
    aa1a:	11 f0       	breq	.+4      	; 0xaa20 <main+0x1a4>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    aa1c:	80 e4       	ldi	r24, 0x40	; 64
    aa1e:	01 c0       	rjmp	.+2      	; 0xaa22 <main+0x1a6>
	} else {
	    Leds_Set(wifi_Red);
	}

  Configure_Wifi:
    okToDisplayGUI = false;
    aa20:	80 e8       	ldi	r24, 0x80	; 128
    aa22:	e0 e2       	ldi	r30, 0x20	; 32
    aa24:	f6 e0       	ldi	r31, 0x06	; 6
    aa26:	85 83       	std	Z+5, r24	; 0x05
    aa28:	10 92 9b 33 	sts	0x339B, r1
    connected = false;
    aa2c:	10 92 4e 33 	sts	0x334E, r1
    Wifi_Init(9600);
    aa30:	60 e8       	ldi	r22, 0x80	; 128
    aa32:	75 e2       	ldi	r23, 0x25	; 37
    aa34:	80 e0       	ldi	r24, 0x00	; 0
    aa36:	90 e0       	ldi	r25, 0x00	; 0
    aa38:	0e 94 b6 02 	call	0x56c	; 0x56c <Wifi_Init>
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    aa3c:	00 e2       	ldi	r16, 0x20	; 32
    aa3e:	16 e0       	ldi	r17, 0x06	; 6
    aa40:	30 e8       	ldi	r19, 0x80	; 128
    aa42:	c3 2e       	mov	r12, r19
    aa44:	20 e7       	ldi	r18, 0x70	; 112
    aa46:	e2 2e       	mov	r14, r18
    aa48:	21 e0       	ldi	r18, 0x01	; 1
    aa4a:	f2 2e       	mov	r15, r18
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    aa4c:	90 e4       	ldi	r25, 0x40	; 64
    aa4e:	a9 2e       	mov	r10, r25
		    if(Debug_Connected(500)){
		        _delay_ms(500);
		        Time_Set(Debug_GetTime(1000));
		        Leds_Set(wifi_Green);
		        Leds_Clear(wifi_Red);
		        timeIsValid = true;
    aa50:	dd 24       	eor	r13, r13
    aa52:	d3 94       	inc	r13
		        connected = true;
                signalStrength = 100;
    aa54:	84 e6       	ldi	r24, 0x64	; 100
    aa56:	b8 2e       	mov	r11, r24
    aa58:	38 c0       	rjmp	.+112    	; 0xaaca <main+0x24e>
  Configure_Wifi:
    okToDisplayGUI = false;
    connected = false;
    Wifi_Init(9600);
    while(!connected && !demoMode){
        if(useWifiForUploading){
    aa5a:	80 91 39 33 	lds	r24, 0x3339
    aa5e:	88 23       	and	r24, r24
    aa60:	51 f0       	breq	.+20     	; 0xaa76 <main+0x1fa>
		    Config_Wifi();
    aa62:	0e 94 7a 51 	call	0xa2f4	; 0xa2f4 <Config_Wifi>
    aa66:	88 e8       	ldi	r24, 0x88	; 136
    aa68:	93 e1       	ldi	r25, 0x13	; 19
    aa6a:	f7 01       	movw	r30, r14
    aa6c:	31 97       	sbiw	r30, 0x01	; 1
    aa6e:	f1 f7       	brne	.-4      	; 0xaa6c <main+0x1f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa72:	d9 f7       	brne	.-10     	; 0xaa6a <main+0x1ee>
    aa74:	2a c0       	rjmp	.+84     	; 0xaaca <main+0x24e>
	        _delay_ms(500);
	    } else {
		    if(Debug_Connected(500)){
    aa76:	84 ef       	ldi	r24, 0xF4	; 244
    aa78:	91 e0       	ldi	r25, 0x01	; 1
    aa7a:	0e 94 26 02 	call	0x44c	; 0x44c <Debug_Connected>
    aa7e:	88 23       	and	r24, r24
    aa80:	11 f1       	breq	.+68     	; 0xaac6 <main+0x24a>
    aa82:	88 e8       	ldi	r24, 0x88	; 136
    aa84:	93 e1       	ldi	r25, 0x13	; 19
    aa86:	f7 01       	movw	r30, r14
    aa88:	31 97       	sbiw	r30, 0x01	; 1
    aa8a:	f1 f7       	brne	.-4      	; 0xaa88 <main+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa8e:	d9 f7       	brne	.-10     	; 0xaa86 <main+0x20a>
		        _delay_ms(500);
		        Time_Set(Debug_GetTime(1000));
    aa90:	88 ee       	ldi	r24, 0xE8	; 232
    aa92:	93 e0       	ldi	r25, 0x03	; 3
    aa94:	0e 94 cb 01 	call	0x396	; 0x396 <Debug_GetTime>
	
	
}

void Time_Set(uint32_t time){
  cli();
    aa98:	f8 94       	cli
  UNIX_time = time;
    aa9a:	60 93 68 33 	sts	0x3368, r22
    aa9e:	70 93 69 33 	sts	0x3369, r23
    aaa2:	80 93 6a 33 	sts	0x336A, r24
    aaa6:	90 93 6b 33 	sts	0x336B, r25
  sei();
    aaaa:	78 94       	sei
    aaac:	d8 01       	movw	r26, r16
    aaae:	15 96       	adiw	r26, 0x05	; 5
    aab0:	ac 92       	st	X, r10
    aab2:	15 97       	sbiw	r26, 0x05	; 5
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    aab4:	16 96       	adiw	r26, 0x06	; 6
    aab6:	cc 92       	st	X, r12
		        Leds_Set(wifi_Green);
		        Leds_Clear(wifi_Red);
		        timeIsValid = true;
    aab8:	d0 92 a9 33 	sts	0x33A9, r13
		        connected = true;
    aabc:	d0 92 4e 33 	sts	0x334E, r13
                signalStrength = 100;
    aac0:	b0 92 94 33 	sts	0x3394, r11
    aac4:	02 c0       	rjmp	.+4      	; 0xaaca <main+0x24e>
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    aac6:	f8 01       	movw	r30, r16
    aac8:	c7 82       	std	Z+7, r12	; 0x07

  Configure_Wifi:
    okToDisplayGUI = false;
    connected = false;
    Wifi_Init(9600);
    while(!connected && !demoMode){
    aaca:	80 91 4e 33 	lds	r24, 0x334E
    aace:	88 23       	and	r24, r24
    aad0:	29 f4       	brne	.+10     	; 0xaadc <main+0x260>
    aad2:	80 91 38 33 	lds	r24, 0x3338
    aad6:	88 23       	and	r24, r24
    aad8:	09 f4       	brne	.+2      	; 0xaadc <main+0x260>
    aada:	bf cf       	rjmp	.-130    	; 0xaa5a <main+0x1de>
    aadc:	88 e8       	ldi	r24, 0x88	; 136
    aade:	93 e1       	ldi	r25, 0x13	; 19
    aae0:	20 e7       	ldi	r18, 0x70	; 112
    aae2:	31 e0       	ldi	r19, 0x01	; 1
    aae4:	f9 01       	movw	r30, r18
    aae6:	31 97       	sbiw	r30, 0x01	; 1
    aae8:	f1 f7       	brne	.-4      	; 0xaae6 <main+0x26a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aaea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aaec:	d9 f7       	brne	.-10     	; 0xaae4 <main+0x268>


	_delay_ms(500);

	
	display_clearBuffer();
    aaee:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <display_clearBuffer>
	display_writeBufferToScreen();
    aaf2:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <display_writeBufferToScreen>

	okToDisplayGUI = true;
    aaf6:	11 e0       	ldi	r17, 0x01	; 1
    aaf8:	10 93 9b 33 	sts	0x339B, r17
	Wifi_EnterCMDMode(500);
    aafc:	84 ef       	ldi	r24, 0xF4	; 244
    aafe:	91 e0       	ldi	r25, 0x01	; 1
    ab00:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <Wifi_EnterCMDMode>




    if((!recording) && (!uploadTimedOut)){
    ab04:	80 91 6d 33 	lds	r24, 0x336D
    ab08:	88 23       	and	r24, r24
    ab0a:	59 f4       	brne	.+22     	; 0xab22 <main+0x2a6>
    ab0c:	80 91 54 33 	lds	r24, 0x3354
    ab10:	88 23       	and	r24, r24
    ab12:	39 f4       	brne	.+14     	; 0xab22 <main+0x2a6>
	    okToOpenLogFile = true;
    ab14:	10 93 98 33 	sts	0x3398, r17
	    while(!recording);
    ab18:	80 91 6d 33 	lds	r24, 0x336D
    ab1c:	88 23       	and	r24, r24
    ab1e:	e1 f3       	breq	.-8      	; 0xab18 <main+0x29c>
    ab20:	06 c0       	rjmp	.+12     	; 0xab2e <main+0x2b2>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    ab22:	e0 e2       	ldi	r30, 0x20	; 32
    ab24:	f6 e0       	ldi	r31, 0x06	; 6
    ab26:	80 e4       	ldi	r24, 0x40	; 64
    ab28:	86 83       	std	Z+6, r24	; 0x06
    ab2a:	80 e8       	ldi	r24, 0x80	; 128
    ab2c:	86 83       	std	Z+6, r24	; 0x06
    ab2e:	88 ee       	ldi	r24, 0xE8	; 232
    ab30:	93 e0       	ldi	r25, 0x03	; 3
    ab32:	20 e7       	ldi	r18, 0x70	; 112
    ab34:	31 e0       	ldi	r19, 0x01	; 1
    ab36:	f9 01       	movw	r30, r18
    ab38:	31 97       	sbiw	r30, 0x01	; 1
    ab3a:	f1 f7       	brne	.-4      	; 0xab38 <main+0x2bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab3e:	d9 f7       	brne	.-10     	; 0xab36 <main+0x2ba>
	    Leds_Clear(wifi_Red);
	}

	_delay_ms(100);

	okToReopenDirectory = true;
    ab40:	81 e0       	ldi	r24, 0x01	; 1
    ab42:	80 93 9d 33 	sts	0x339D, r24
	okToFindFileToUpload = true;
    ab46:	80 93 9c 33 	sts	0x339C, r24

    while(demoMode);
    ab4a:	80 91 38 33 	lds	r24, 0x3338
    ab4e:	88 23       	and	r24, r24
    ab50:	09 f0       	breq	.+2      	; 0xab54 <main+0x2d8>
    ab52:	5b c6       	rjmp	.+3254   	; 0xb80a <main+0xf8e>
    ab54:	00 e7       	ldi	r16, 0x70	; 112
    ab56:	60 2e       	mov	r6, r16
    ab58:	01 e0       	ldi	r16, 0x01	; 1
    ab5a:	70 2e       	mov	r7, r16

            memmove(temp,strtok(fileToUpload,"/"),12);
            memmove(fileToUpload,temp,12);

            uploadHeaderSize = 177;
            uploadHeaderSize += strlen(user);
    ab5c:	13 e1       	ldi	r17, 0x13	; 19
    ab5e:	21 2e       	mov	r2, r17
    ab60:	1a e4       	ldi	r17, 0x4A	; 74
    ab62:	31 2e       	mov	r3, r17
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    ab64:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    ab68:	8c 77       	andi	r24, 0x7C	; 124
    ab6a:	84 ff       	sbrs	r24, 4
    ab6c:	4b c6       	rjmp	.+3222   	; 0xb804 <main+0xf88>

        if(Dpad_CheckButton(Left)){
          Debug_To_Wifi();
        }

	    if(ssRefreshCounter > 300){
    ab6e:	80 91 92 33 	lds	r24, 0x3392
    ab72:	90 91 93 33 	lds	r25, 0x3393
    ab76:	8d 52       	subi	r24, 0x2D	; 45
    ab78:	91 40       	sbci	r25, 0x01	; 1
    ab7a:	08 f4       	brcc	.+2      	; 0xab7e <main+0x302>
    ab7c:	66 c0       	rjmp	.+204    	; 0xac4a <main+0x3ce>
	       okToGetRemainingSpace = true;
    ab7e:	81 e0       	ldi	r24, 0x01	; 1
    ab80:	80 93 b3 4a 	sts	0x4AB3, r24
	       while(!okToGetRemainingSpace);
    ab84:	80 91 b3 4a 	lds	r24, 0x4AB3
    ab88:	88 23       	and	r24, r24
    ab8a:	e1 f3       	breq	.-8      	; 0xab84 <main+0x308>

		   if(useWifiForUploading){
    ab8c:	80 91 39 33 	lds	r24, 0x3339
    ab90:	88 23       	and	r24, r24
    ab92:	09 f4       	brne	.+2      	; 0xab96 <main+0x31a>
    ab94:	3b c0       	rjmp	.+118    	; 0xac0c <main+0x390>
		        Wifi_EnterCMDMode(1000);
    ab96:	88 ee       	ldi	r24, 0xE8	; 232
    ab98:	93 e0       	ldi	r25, 0x03	; 3
    ab9a:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <Wifi_EnterCMDMode>
		        signalStrength = Wifi_GetSignalStrength(1000);
    ab9e:	88 ee       	ldi	r24, 0xE8	; 232
    aba0:	93 e0       	ldi	r25, 0x03	; 3
    aba2:	0e 94 18 51 	call	0xa230	; 0xa230 <Wifi_GetSignalStrength>
    aba6:	80 93 94 33 	sts	0x3394, r24
		        if(Wifi_Connected(500)){
    abaa:	84 ef       	ldi	r24, 0xF4	; 244
    abac:	91 e0       	ldi	r25, 0x01	; 1
    abae:	0e 94 3d 03 	call	0x67a	; 0x67a <Wifi_Connected>
    abb2:	88 23       	and	r24, r24
    abb4:	31 f1       	breq	.+76     	; 0xac02 <main+0x386>
    abb6:	88 e8       	ldi	r24, 0x88	; 136
    abb8:	93 e1       	ldi	r25, 0x13	; 19
    abba:	f3 01       	movw	r30, r6
    abbc:	31 97       	sbiw	r30, 0x01	; 1
    abbe:	f1 f7       	brne	.-4      	; 0xabbc <main+0x340>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abc0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abc2:	d9 f7       	brne	.-10     	; 0xabba <main+0x33e>
		            _delay_ms(500);
	                if(Wifi_GetTime(500)){
    abc4:	84 ef       	ldi	r24, 0xF4	; 244
    abc6:	91 e0       	ldi	r25, 0x01	; 1
    abc8:	0e 94 1b 48 	call	0x9036	; 0x9036 <Wifi_GetTime>
    abcc:	88 23       	and	r24, r24
    abce:	91 f0       	breq	.+36     	; 0xabf4 <main+0x378>
		                Time_Set(time_secs);
    abd0:	80 91 46 33 	lds	r24, 0x3346
    abd4:	90 91 47 33 	lds	r25, 0x3347
    abd8:	a0 91 48 33 	lds	r26, 0x3348
    abdc:	b0 91 49 33 	lds	r27, 0x3349
	
	
}

void Time_Set(uint32_t time){
  cli();
    abe0:	f8 94       	cli
  UNIX_time = time;
    abe2:	80 93 68 33 	sts	0x3368, r24
    abe6:	90 93 69 33 	sts	0x3369, r25
    abea:	a0 93 6a 33 	sts	0x336A, r26
    abee:	b0 93 6b 33 	sts	0x336B, r27
  sei();
    abf2:	78 94       	sei
    abf4:	88 e8       	ldi	r24, 0x88	; 136
    abf6:	93 e1       	ldi	r25, 0x13	; 19
    abf8:	f3 01       	movw	r30, r6
    abfa:	31 97       	sbiw	r30, 0x01	; 1
    abfc:	f1 f7       	brne	.-4      	; 0xabfa <main+0x37e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abfe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac00:	d9 f7       	brne	.-10     	; 0xabf8 <main+0x37c>
		            }
		            _delay_ms(500);
		        }
		        Wifi_ExitCMDMode(500);
    ac02:	84 ef       	ldi	r24, 0xF4	; 244
    ac04:	91 e0       	ldi	r25, 0x01	; 1
    ac06:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    ac0a:	1b c0       	rjmp	.+54     	; 0xac42 <main+0x3c6>
		   } else {
                if(Debug_Connected(500)){
    ac0c:	84 ef       	ldi	r24, 0xF4	; 244
    ac0e:	91 e0       	ldi	r25, 0x01	; 1
    ac10:	0e 94 26 02 	call	0x44c	; 0x44c <Debug_Connected>
    ac14:	88 23       	and	r24, r24
    ac16:	a9 f0       	breq	.+42     	; 0xac42 <main+0x3c6>
    ac18:	88 e8       	ldi	r24, 0x88	; 136
    ac1a:	93 e1       	ldi	r25, 0x13	; 19
    ac1c:	f3 01       	movw	r30, r6
    ac1e:	31 97       	sbiw	r30, 0x01	; 1
    ac20:	f1 f7       	brne	.-4      	; 0xac1e <main+0x3a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac24:	d9 f7       	brne	.-10     	; 0xac1c <main+0x3a0>
                    _delay_ms(500);
		            Time_Set(Debug_GetTime(1000));
    ac26:	88 ee       	ldi	r24, 0xE8	; 232
    ac28:	93 e0       	ldi	r25, 0x03	; 3
    ac2a:	0e 94 cb 01 	call	0x396	; 0x396 <Debug_GetTime>
	
	
}

void Time_Set(uint32_t time){
  cli();
    ac2e:	f8 94       	cli
  UNIX_time = time;
    ac30:	60 93 68 33 	sts	0x3368, r22
    ac34:	70 93 69 33 	sts	0x3369, r23
    ac38:	80 93 6a 33 	sts	0x336A, r24
    ac3c:	90 93 6b 33 	sts	0x336B, r25
  sei();
    ac40:	78 94       	sei
		        }
		   }
		   ssRefreshCounter = 0;
    ac42:	10 92 92 33 	sts	0x3392, r1
    ac46:	10 92 93 33 	sts	0x3393, r1
	    }

        if(okToUpload && Uploader_Connected(500)){
    ac4a:	80 91 a2 33 	lds	r24, 0x33A2
    ac4e:	88 23       	and	r24, r24
    ac50:	09 f4       	brne	.+2      	; 0xac54 <main+0x3d8>
    ac52:	88 cf       	rjmp	.-240    	; 0xab64 <main+0x2e8>
    ac54:	84 ef       	ldi	r24, 0xF4	; 244
    ac56:	91 e0       	ldi	r25, 0x01	; 1
    ac58:	0e 94 91 3b 	call	0x7722	; 0x7722 <Uploader_Connected>
    ac5c:	88 23       	and	r24, r24
    ac5e:	09 f4       	brne	.+2      	; 0xac62 <main+0x3e6>
    ac60:	81 cf       	rjmp	.-254    	; 0xab64 <main+0x2e8>
            uploading = true;
    ac62:	81 e0       	ldi	r24, 0x01	; 1
    ac64:	80 93 a3 33 	sts	0x33A3, r24
            if(fileToUpload[0] != '/'){
    ac68:	80 91 2e 3c 	lds	r24, 0x3C2E
    ac6c:	8f 32       	cpi	r24, 0x2F	; 47
    ac6e:	91 f0       	breq	.+36     	; 0xac94 <main+0x418>
			    strcpy(newFileName, "/");
    ac70:	80 e9       	ldi	r24, 0x90	; 144
    ac72:	96 e5       	ldi	r25, 0x56	; 86
    ac74:	62 e7       	ldi	r22, 0x72	; 114
    ac76:	75 e2       	ldi	r23, 0x25	; 37
    ac78:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
			    strcat(newFileName, fileToUpload);
    ac7c:	80 e9       	ldi	r24, 0x90	; 144
    ac7e:	96 e5       	ldi	r25, 0x56	; 86
    ac80:	6e e2       	ldi	r22, 0x2E	; 46
    ac82:	7c e3       	ldi	r23, 0x3C	; 60
    ac84:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>
			    strcpy(fileToUpload, newFileName);
    ac88:	8e e2       	ldi	r24, 0x2E	; 46
    ac8a:	9c e3       	ldi	r25, 0x3C	; 60
    ac8c:	60 e9       	ldi	r22, 0x90	; 144
    ac8e:	76 e5       	ldi	r23, 0x56	; 86
    ac90:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
			}
            if(useWifiForUploading){
    ac94:	80 91 39 33 	lds	r24, 0x3339
    ac98:	88 23       	and	r24, r24
    ac9a:	a1 f0       	breq	.+40     	; 0xacc4 <main+0x448>
			    Debug_SendString("",true);
    ac9c:	83 ec       	ldi	r24, 0xC3	; 195
    ac9e:	90 e2       	ldi	r25, 0x20	; 32
    aca0:	61 e0       	ldi	r22, 0x01	; 1
    aca2:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                Debug_SendString("_____________________________________________", true);
    aca6:	8a e2       	ldi	r24, 0x2A	; 42
    aca8:	99 e2       	ldi	r25, 0x29	; 41
    acaa:	61 e0       	ldi	r22, 0x01	; 1
    acac:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
			    Debug_SendString("Uploading File: ", false);
    acb0:	88 e5       	ldi	r24, 0x58	; 88
    acb2:	99 e2       	ldi	r25, 0x29	; 41
    acb4:	60 e0       	ldi	r22, 0x00	; 0
    acb6:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
			    Debug_SendString(fileToUpload, true);
    acba:	8e e2       	ldi	r24, 0x2E	; 46
    acbc:	9c e3       	ldi	r25, 0x3C	; 60
    acbe:	61 e0       	ldi	r22, 0x01	; 1
    acc0:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
			}
            okToOpenFileToUpload = true;
    acc4:	81 e0       	ldi	r24, 0x01	; 1
    acc6:	80 93 a5 33 	sts	0x33A5, r24
            while(!uploadFileOpened);
    acca:	80 91 d1 30 	lds	r24, 0x30D1
    acce:	88 23       	and	r24, r24
    acd0:	e1 f3       	breq	.-8      	; 0xacca <main+0x44e>
    acd2:	80 e2       	ldi	r24, 0x20	; 32
    acd4:	9e e4       	ldi	r25, 0x4E	; 78
    acd6:	f3 01       	movw	r30, r6
    acd8:	31 97       	sbiw	r30, 0x01	; 1
    acda:	f1 f7       	brne	.-4      	; 0xacd8 <main+0x45c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    acdc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    acde:	d9 f7       	brne	.-10     	; 0xacd6 <main+0x45a>
            _delay_ms(2000);


            numberOfPacketsToUpload = uploadFileSize /  1000;
    ace0:	60 91 ac 33 	lds	r22, 0x33AC
    ace4:	70 91 ad 33 	lds	r23, 0x33AD
    ace8:	80 91 ae 33 	lds	r24, 0x33AE
    acec:	90 91 af 33 	lds	r25, 0x33AF
    acf0:	28 ee       	ldi	r18, 0xE8	; 232
    acf2:	33 e0       	ldi	r19, 0x03	; 3
    acf4:	40 e0       	ldi	r20, 0x00	; 0
    acf6:	50 e0       	ldi	r21, 0x00	; 0
    acf8:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    acfc:	c9 01       	movw	r24, r18
    acfe:	da 01       	movw	r26, r20
    ad00:	80 93 b4 33 	sts	0x33B4, r24
    ad04:	90 93 b5 33 	sts	0x33B5, r25
    ad08:	a0 93 b6 33 	sts	0x33B6, r26
    ad0c:	b0 93 b7 33 	sts	0x33B7, r27
            leftOverBytesToUpload   = uploadFileSize %  1000;
    ad10:	60 91 ac 33 	lds	r22, 0x33AC
    ad14:	70 91 ad 33 	lds	r23, 0x33AD
    ad18:	80 91 ae 33 	lds	r24, 0x33AE
    ad1c:	90 91 af 33 	lds	r25, 0x33AF
    ad20:	28 ee       	ldi	r18, 0xE8	; 232
    ad22:	33 e0       	ldi	r19, 0x03	; 3
    ad24:	40 e0       	ldi	r20, 0x00	; 0
    ad26:	50 e0       	ldi	r21, 0x00	; 0
    ad28:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    ad2c:	9b 01       	movw	r18, r22
    ad2e:	ac 01       	movw	r20, r24
    ad30:	20 93 b8 33 	sts	0x33B8, r18
    ad34:	30 93 b9 33 	sts	0x33B9, r19
    ad38:	40 93 ba 33 	sts	0x33BA, r20
    ad3c:	50 93 bb 33 	sts	0x33BB, r21

            if(useWifiForUploading){
    ad40:	80 91 39 33 	lds	r24, 0x3339
    ad44:	88 23       	and	r24, r24
    ad46:	09 f4       	brne	.+2      	; 0xad4a <main+0x4ce>
    ad48:	ed c0       	rjmp	.+474    	; 0xaf24 <main+0x6a8>
                Debug_SendString("File Opened!", true);
    ad4a:	89 e6       	ldi	r24, 0x69	; 105
    ad4c:	99 e2       	ldi	r25, 0x29	; 41
    ad4e:	61 e0       	ldi	r22, 0x01	; 1
    ad50:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                sprintf(temp,"File Size: %lu",uploadFileSize);
    ad54:	40 91 ac 33 	lds	r20, 0x33AC
    ad58:	50 91 ad 33 	lds	r21, 0x33AD
    ad5c:	60 91 ae 33 	lds	r22, 0x33AE
    ad60:	70 91 af 33 	lds	r23, 0x33AF
    ad64:	2d b7       	in	r18, 0x3d	; 61
    ad66:	3e b7       	in	r19, 0x3e	; 62
    ad68:	28 50       	subi	r18, 0x08	; 8
    ad6a:	30 40       	sbci	r19, 0x00	; 0
    ad6c:	2d bf       	out	0x3d, r18	; 61
    ad6e:	3e bf       	out	0x3e, r19	; 62
    ad70:	ed b7       	in	r30, 0x3d	; 61
    ad72:	fe b7       	in	r31, 0x3e	; 62
    ad74:	31 96       	adiw	r30, 0x01	; 1
    ad76:	05 ea       	ldi	r16, 0xA5	; 165
    ad78:	19 e4       	ldi	r17, 0x49	; 73
    ad7a:	ad b7       	in	r26, 0x3d	; 61
    ad7c:	be b7       	in	r27, 0x3e	; 62
    ad7e:	11 96       	adiw	r26, 0x01	; 1
    ad80:	0d 93       	st	X+, r16
    ad82:	1c 93       	st	X, r17
    ad84:	12 97       	sbiw	r26, 0x02	; 2
    ad86:	26 e7       	ldi	r18, 0x76	; 118
    ad88:	39 e2       	ldi	r19, 0x29	; 41
    ad8a:	22 83       	std	Z+2, r18	; 0x02
    ad8c:	33 83       	std	Z+3, r19	; 0x03
    ad8e:	44 83       	std	Z+4, r20	; 0x04
    ad90:	55 83       	std	Z+5, r21	; 0x05
    ad92:	66 83       	std	Z+6, r22	; 0x06
    ad94:	77 83       	std	Z+7, r23	; 0x07
    ad96:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
                Debug_SendString(temp, true);
    ad9a:	6d b7       	in	r22, 0x3d	; 61
    ad9c:	7e b7       	in	r23, 0x3e	; 62
    ad9e:	68 5f       	subi	r22, 0xF8	; 248
    ada0:	7f 4f       	sbci	r23, 0xFF	; 255
    ada2:	6d bf       	out	0x3d, r22	; 61
    ada4:	7e bf       	out	0x3e, r23	; 62
    ada6:	c8 01       	movw	r24, r16
    ada8:	61 e0       	ldi	r22, 0x01	; 1
    adaa:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>

                Open_Connection:
                Wifi_EnterCMDMode(500);
    adae:	84 ef       	ldi	r24, 0xF4	; 244
    adb0:	91 e0       	ldi	r25, 0x01	; 1
    adb2:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <Wifi_EnterCMDMode>
    adb6:	80 e1       	ldi	r24, 0x10	; 16
    adb8:	97 e2       	ldi	r25, 0x27	; 39
    adba:	f3 01       	movw	r30, r6
    adbc:	31 97       	sbiw	r30, 0x01	; 1
    adbe:	f1 f7       	brne	.-4      	; 0xadbc <main+0x540>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adc0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adc2:	d9 f7       	brne	.-10     	; 0xadba <main+0x53e>
                _delay_ms(1000);

                if(!Wifi_SendCommand(serverOpenCommand,"Connect to","Connect to",500)){
    adc4:	8b e8       	ldi	r24, 0x8B	; 139
    adc6:	90 e3       	ldi	r25, 0x30	; 48
    adc8:	65 e8       	ldi	r22, 0x85	; 133
    adca:	79 e2       	ldi	r23, 0x29	; 41
    adcc:	ab 01       	movw	r20, r22
    adce:	24 ef       	ldi	r18, 0xF4	; 244
    add0:	31 e0       	ldi	r19, 0x01	; 1
    add2:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    add6:	88 23       	and	r24, r24
    add8:	99 f4       	brne	.+38     	; 0xae00 <main+0x584>
    adda:	80 e1       	ldi	r24, 0x10	; 16
    addc:	97 e2       	ldi	r25, 0x27	; 39
    adde:	f3 01       	movw	r30, r6
    ade0:	31 97       	sbiw	r30, 0x01	; 1
    ade2:	f1 f7       	brne	.-4      	; 0xade0 <main+0x564>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ade4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ade6:	d9 f7       	brne	.-10     	; 0xadde <main+0x562>

                    _delay_ms(1000);
                    Wifi_ExitCMDMode(500);
    ade8:	84 ef       	ldi	r24, 0xF4	; 244
    adea:	91 e0       	ldi	r25, 0x01	; 1
    adec:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    adf0:	8f ef       	ldi	r24, 0xFF	; 255
    adf2:	9f ef       	ldi	r25, 0xFF	; 255
    adf4:	f3 01       	movw	r30, r6
    adf6:	31 97       	sbiw	r30, 0x01	; 1
    adf8:	f1 f7       	brne	.-4      	; 0xadf6 <main+0x57a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adfa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adfc:	d9 f7       	brne	.-10     	; 0xadf4 <main+0x578>
    adfe:	d7 cf       	rjmp	.-82     	; 0xadae <main+0x532>
    ae00:	80 e4       	ldi	r24, 0x40	; 64
    ae02:	9c e9       	ldi	r25, 0x9C	; 156
    ae04:	f3 01       	movw	r30, r6
    ae06:	31 97       	sbiw	r30, 0x01	; 1
    ae08:	f1 f7       	brne	.-4      	; 0xae06 <main+0x58a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae0c:	d9 f7       	brne	.-10     	; 0xae04 <main+0x588>
    ae0e:	80 e4       	ldi	r24, 0x40	; 64
    ae10:	9c e9       	ldi	r25, 0x9C	; 156
    ae12:	f3 01       	movw	r30, r6
    ae14:	31 97       	sbiw	r30, 0x01	; 1
    ae16:	f1 f7       	brne	.-4      	; 0xae14 <main+0x598>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae1a:	d9 f7       	brne	.-10     	; 0xae12 <main+0x596>
                    goto Open_Connection;
                }
                _delay_ms(4000);
                _delay_ms(4000);

                tempStringFiller = 0;
    ae1c:	10 92 88 33 	sts	0x3388, r1
    ae20:	12 c0       	rjmp	.+36     	; 0xae46 <main+0x5ca>
                while(Wifi_CharReadyToRead()){
                    temp[tempStringFiller] = Wifi_GetByte(false);
    ae22:	80 91 88 33 	lds	r24, 0x3388
    ae26:	08 2f       	mov	r16, r24
    ae28:	10 e0       	ldi	r17, 0x00	; 0
    ae2a:	80 e0       	ldi	r24, 0x00	; 0
    ae2c:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    ae30:	0b 55       	subi	r16, 0x5B	; 91
    ae32:	16 4b       	sbci	r17, 0xB6	; 182
    ae34:	d8 01       	movw	r26, r16
    ae36:	8c 93       	st	X, r24
                    tempStringFiller++;
    ae38:	80 91 88 33 	lds	r24, 0x3388
    ae3c:	8f 5f       	subi	r24, 0xFF	; 255
    ae3e:	80 93 88 33 	sts	0x3388, r24
                    if(tempStringFiller == 49){
    ae42:	81 33       	cpi	r24, 0x31	; 49
    ae44:	21 f0       	breq	.+8      	; 0xae4e <main+0x5d2>
                }
                _delay_ms(4000);
                _delay_ms(4000);

                tempStringFiller = 0;
                while(Wifi_CharReadyToRead()){
    ae46:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    ae4a:	88 23       	and	r24, r24
    ae4c:	51 f7       	brne	.-44     	; 0xae22 <main+0x5a6>
                    tempStringFiller++;
                    if(tempStringFiller == 49){
                        break;
                    }
                }
                temp[tempStringFiller] = 0;
    ae4e:	e0 91 88 33 	lds	r30, 0x3388
    ae52:	f0 e0       	ldi	r31, 0x00	; 0
    ae54:	eb 55       	subi	r30, 0x5B	; 91
    ae56:	f6 4b       	sbci	r31, 0xB6	; 182
    ae58:	10 82       	st	Z, r1


                if(strstr(temp,"*OPEN*") != 0){                            // success
    ae5a:	85 ea       	ldi	r24, 0xA5	; 165
    ae5c:	99 e4       	ldi	r25, 0x49	; 73
    ae5e:	60 e9       	ldi	r22, 0x90	; 144
    ae60:	79 e2       	ldi	r23, 0x29	; 41
    ae62:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    ae66:	00 97       	sbiw	r24, 0x00	; 0
    ae68:	91 f0       	breq	.+36     	; 0xae8e <main+0x612>
                    Debug_SendString("Connection Open!",true);
    ae6a:	87 e9       	ldi	r24, 0x97	; 151
    ae6c:	99 e2       	ldi	r25, 0x29	; 41
    ae6e:	61 e0       	ldi	r22, 0x01	; 1
    ae70:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    ae74:	80 e1       	ldi	r24, 0x10	; 16
    ae76:	97 e2       	ldi	r25, 0x27	; 39
    ae78:	f3 01       	movw	r30, r6
    ae7a:	31 97       	sbiw	r30, 0x01	; 1
    ae7c:	f1 f7       	brne	.-4      	; 0xae7a <main+0x5fe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae80:	d9 f7       	brne	.-10     	; 0xae78 <main+0x5fc>
                        _delay_ms(10000);
                        goto Open_Connection;
                    }
                }

                Debug_SendString("Sending...", true);
    ae82:	88 ea       	ldi	r24, 0xA8	; 168
    ae84:	99 e2       	ldi	r25, 0x29	; 41
    ae86:	61 e0       	ldi	r22, 0x01	; 1
    ae88:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    ae8c:	4b c0       	rjmp	.+150    	; 0xaf24 <main+0x6a8>


                if(strstr(temp,"*OPEN*") != 0){                            // success
                    Debug_SendString("Connection Open!",true);
                    _delay_ms(1000);
                } else if (strstr(temp,"ERR:Connected!")!=0){
    ae8e:	85 ea       	ldi	r24, 0xA5	; 165
    ae90:	99 e4       	ldi	r25, 0x49	; 73
    ae92:	63 eb       	ldi	r22, 0xB3	; 179
    ae94:	79 e2       	ldi	r23, 0x29	; 41
    ae96:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    ae9a:	00 97       	sbiw	r24, 0x00	; 0
    ae9c:	01 f1       	breq	.+64     	; 0xaede <main+0x662>

                    if(!Uploader_Connected(500)){
    ae9e:	84 ef       	ldi	r24, 0xF4	; 244
    aea0:	91 e0       	ldi	r25, 0x01	; 1
    aea2:	0e 94 91 3b 	call	0x7722	; 0x7722 <Uploader_Connected>
    aea6:	88 23       	and	r24, r24
    aea8:	01 f1       	breq	.+64     	; 0xaeea <main+0x66e>
                        Wifi_ExitCMDMode(500);
                        goto Main;
                    } else{
                        Debug_SendString("Let't retry connecting...",true);
    aeaa:	82 ec       	ldi	r24, 0xC2	; 194
    aeac:	99 e2       	ldi	r25, 0x29	; 41
    aeae:	61 e0       	ldi	r22, 0x01	; 1
    aeb0:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                        Wifi_SendCommand("close","*CLOS*","*CLOS*",500);
    aeb4:	8c ed       	ldi	r24, 0xDC	; 220
    aeb6:	99 e2       	ldi	r25, 0x29	; 41
    aeb8:	62 ee       	ldi	r22, 0xE2	; 226
    aeba:	79 e2       	ldi	r23, 0x29	; 41
    aebc:	ab 01       	movw	r20, r22
    aebe:	24 ef       	ldi	r18, 0xF4	; 244
    aec0:	31 e0       	ldi	r19, 0x01	; 1
    aec2:	0e 94 3b 40 	call	0x8076	; 0x8076 <Wifi_SendCommand>
    aec6:	80 e1       	ldi	r24, 0x10	; 16
    aec8:	97 e2       	ldi	r25, 0x27	; 39
    aeca:	f3 01       	movw	r30, r6
    aecc:	31 97       	sbiw	r30, 0x01	; 1
    aece:	f1 f7       	brne	.-4      	; 0xaecc <main+0x650>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aed0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aed2:	d9 f7       	brne	.-10     	; 0xaeca <main+0x64e>
                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    aed4:	84 ef       	ldi	r24, 0xF4	; 244
    aed6:	91 e0       	ldi	r25, 0x01	; 1
    aed8:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    aedc:	68 cf       	rjmp	.-304    	; 0xadae <main+0x532>
                        goto Open_Connection;
                    }
                } else{
                    if(!Uploader_Connected(500)){
    aede:	84 ef       	ldi	r24, 0xF4	; 244
    aee0:	91 e0       	ldi	r25, 0x01	; 1
    aee2:	0e 94 91 3b 	call	0x7722	; 0x7722 <Uploader_Connected>
    aee6:	88 23       	and	r24, r24
    aee8:	29 f4       	brne	.+10     	; 0xaef4 <main+0x678>
                        Wifi_ExitCMDMode(500);
    aeea:	84 ef       	ldi	r24, 0xF4	; 244
    aeec:	91 e0       	ldi	r25, 0x01	; 1
    aeee:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    aef2:	38 ce       	rjmp	.-912    	; 0xab64 <main+0x2e8>
                        goto Main;
                    } else{
                        Debug_SendString("Other issues: ", true);
    aef4:	89 ee       	ldi	r24, 0xE9	; 233
    aef6:	99 e2       	ldi	r25, 0x29	; 41
    aef8:	61 e0       	ldi	r22, 0x01	; 1
    aefa:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
    aefe:	80 e1       	ldi	r24, 0x10	; 16
    af00:	97 e2       	ldi	r25, 0x27	; 39
    af02:	f3 01       	movw	r30, r6
    af04:	31 97       	sbiw	r30, 0x01	; 1
    af06:	f1 f7       	brne	.-4      	; 0xaf04 <main+0x688>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af0a:	d9 f7       	brne	.-10     	; 0xaf02 <main+0x686>
                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    af0c:	84 ef       	ldi	r24, 0xF4	; 244
    af0e:	91 e0       	ldi	r25, 0x01	; 1
    af10:	0e 94 8e 41 	call	0x831c	; 0x831c <Wifi_ExitCMDMode>
    af14:	8f ef       	ldi	r24, 0xFF	; 255
    af16:	9f ef       	ldi	r25, 0xFF	; 255
    af18:	f3 01       	movw	r30, r6
    af1a:	31 97       	sbiw	r30, 0x01	; 1
    af1c:	f1 f7       	brne	.-4      	; 0xaf1a <main+0x69e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af20:	d9 f7       	brne	.-10     	; 0xaf18 <main+0x69c>
    af22:	45 cf       	rjmp	.-374    	; 0xadae <main+0x532>
                }

                Debug_SendString("Sending...", true);
            }

            uploadTimeStart = UNIX_time;
    af24:	80 91 68 33 	lds	r24, 0x3368
    af28:	90 91 69 33 	lds	r25, 0x3369
    af2c:	a0 91 6a 33 	lds	r26, 0x336A
    af30:	b0 91 6b 33 	lds	r27, 0x336B
    af34:	80 93 4b 3c 	sts	0x3C4B, r24
    af38:	90 93 4c 3c 	sts	0x3C4C, r25
    af3c:	a0 93 4d 3c 	sts	0x3C4D, r26
    af40:	b0 93 4e 3c 	sts	0x3C4E, r27
            uploadTimedOut = false;
    af44:	10 92 54 33 	sts	0x3354, r1


            memmove(temp,strtok(fileToUpload,"/"),12);
    af48:	8e e2       	ldi	r24, 0x2E	; 46
    af4a:	9c e3       	ldi	r25, 0x3C	; 60
    af4c:	62 e7       	ldi	r22, 0x72	; 114
    af4e:	75 e2       	ldi	r23, 0x25	; 37
    af50:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    af54:	bc 01       	movw	r22, r24
    af56:	85 ea       	ldi	r24, 0xA5	; 165
    af58:	99 e4       	ldi	r25, 0x49	; 73
    af5a:	4c e0       	ldi	r20, 0x0C	; 12
    af5c:	50 e0       	ldi	r21, 0x00	; 0
    af5e:	0e 94 c4 5c 	call	0xb988	; 0xb988 <memmove>
            memmove(fileToUpload,temp,12);
    af62:	8e e2       	ldi	r24, 0x2E	; 46
    af64:	9c e3       	ldi	r25, 0x3C	; 60
    af66:	65 ea       	ldi	r22, 0xA5	; 165
    af68:	79 e4       	ldi	r23, 0x49	; 73
    af6a:	4c e0       	ldi	r20, 0x0C	; 12
    af6c:	50 e0       	ldi	r21, 0x00	; 0
    af6e:	0e 94 c4 5c 	call	0xb988	; 0xb988 <memmove>

            uploadHeaderSize = 177;
    af72:	81 eb       	ldi	r24, 0xB1	; 177
    af74:	90 e0       	ldi	r25, 0x00	; 0
    af76:	a0 e0       	ldi	r26, 0x00	; 0
    af78:	b0 e0       	ldi	r27, 0x00	; 0
    af7a:	80 93 b0 33 	sts	0x33B0, r24
    af7e:	90 93 b1 33 	sts	0x33B1, r25
    af82:	a0 93 b2 33 	sts	0x33B2, r26
    af86:	b0 93 b3 33 	sts	0x33B3, r27
            uploadHeaderSize += strlen(user);
    af8a:	20 91 b0 33 	lds	r18, 0x33B0
    af8e:	30 91 b1 33 	lds	r19, 0x33B1
    af92:	40 91 b2 33 	lds	r20, 0x33B2
    af96:	50 91 b3 33 	lds	r21, 0x33B3
    af9a:	f1 01       	movw	r30, r2
    af9c:	01 90       	ld	r0, Z+
    af9e:	00 20       	and	r0, r0
    afa0:	e9 f7       	brne	.-6      	; 0xaf9c <main+0x720>
    afa2:	cf 01       	movw	r24, r30
    afa4:	01 97       	sbiw	r24, 0x01	; 1
    afa6:	83 51       	subi	r24, 0x13	; 19
    afa8:	9a 44       	sbci	r25, 0x4A	; 74
    afaa:	a0 e0       	ldi	r26, 0x00	; 0
    afac:	b0 e0       	ldi	r27, 0x00	; 0
    afae:	82 0f       	add	r24, r18
    afb0:	93 1f       	adc	r25, r19
    afb2:	a4 1f       	adc	r26, r20
    afb4:	b5 1f       	adc	r27, r21
    afb6:	80 93 b0 33 	sts	0x33B0, r24
    afba:	90 93 b1 33 	sts	0x33B1, r25
    afbe:	a0 93 b2 33 	sts	0x33B2, r26
    afc2:	b0 93 b3 33 	sts	0x33B3, r27
            uploadHeaderSize += strlen(fileToUpload);
    afc6:	20 91 b0 33 	lds	r18, 0x33B0
    afca:	30 91 b1 33 	lds	r19, 0x33B1
    afce:	40 91 b2 33 	lds	r20, 0x33B2
    afd2:	50 91 b3 33 	lds	r21, 0x33B3
    afd6:	ae e2       	ldi	r26, 0x2E	; 46
    afd8:	bc e3       	ldi	r27, 0x3C	; 60
    afda:	0d 90       	ld	r0, X+
    afdc:	00 20       	and	r0, r0
    afde:	e9 f7       	brne	.-6      	; 0xafda <main+0x75e>
    afe0:	cd 01       	movw	r24, r26
    afe2:	01 97       	sbiw	r24, 0x01	; 1
    afe4:	8e 52       	subi	r24, 0x2E	; 46
    afe6:	9c 43       	sbci	r25, 0x3C	; 60
    afe8:	a0 e0       	ldi	r26, 0x00	; 0
    afea:	b0 e0       	ldi	r27, 0x00	; 0
    afec:	82 0f       	add	r24, r18
    afee:	93 1f       	adc	r25, r19
    aff0:	a4 1f       	adc	r26, r20
    aff2:	b5 1f       	adc	r27, r21
    aff4:	80 93 b0 33 	sts	0x33B0, r24
    aff8:	90 93 b1 33 	sts	0x33B1, r25
    affc:	a0 93 b2 33 	sts	0x33B2, r26
    b000:	b0 93 b3 33 	sts	0x33B3, r27
            uploadHeaderSize += strlen(nickname);
    b004:	20 91 b0 33 	lds	r18, 0x33B0
    b008:	30 91 b1 33 	lds	r19, 0x33B1
    b00c:	40 91 b2 33 	lds	r20, 0x33B2
    b010:	50 91 b3 33 	lds	r21, 0x33B3
    b014:	eb ea       	ldi	r30, 0xAB	; 171
    b016:	fb e5       	ldi	r31, 0x5B	; 91
    b018:	01 90       	ld	r0, Z+
    b01a:	00 20       	and	r0, r0
    b01c:	e9 f7       	brne	.-6      	; 0xb018 <main+0x79c>
    b01e:	cf 01       	movw	r24, r30
    b020:	01 97       	sbiw	r24, 0x01	; 1
    b022:	8b 5a       	subi	r24, 0xAB	; 171
    b024:	9b 45       	sbci	r25, 0x5B	; 91
    b026:	a0 e0       	ldi	r26, 0x00	; 0
    b028:	b0 e0       	ldi	r27, 0x00	; 0
    b02a:	82 0f       	add	r24, r18
    b02c:	93 1f       	adc	r25, r19
    b02e:	a4 1f       	adc	r26, r20
    b030:	b5 1f       	adc	r27, r21
    b032:	80 93 b0 33 	sts	0x33B0, r24
    b036:	90 93 b1 33 	sts	0x33B1, r25
    b03a:	a0 93 b2 33 	sts	0x33B2, r26
    b03e:	b0 93 b3 33 	sts	0x33B3, r27
            uploadHeaderSize += strlen(ltoa(uploadFileSize,temp,10));
    b042:	e0 90 b0 33 	lds	r14, 0x33B0
    b046:	f0 90 b1 33 	lds	r15, 0x33B1
    b04a:	00 91 b2 33 	lds	r16, 0x33B2
    b04e:	10 91 b3 33 	lds	r17, 0x33B3
    b052:	60 91 ac 33 	lds	r22, 0x33AC
    b056:	70 91 ad 33 	lds	r23, 0x33AD
    b05a:	80 91 ae 33 	lds	r24, 0x33AE
    b05e:	90 91 af 33 	lds	r25, 0x33AF
    b062:	45 ea       	ldi	r20, 0xA5	; 165
    b064:	59 e4       	ldi	r21, 0x49	; 73
    b066:	2a e0       	ldi	r18, 0x0A	; 10
    b068:	30 e0       	ldi	r19, 0x00	; 0
    b06a:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <ltoa>
    b06e:	fc 01       	movw	r30, r24
    b070:	dc 01       	movw	r26, r24
    b072:	0d 90       	ld	r0, X+
    b074:	00 20       	and	r0, r0
    b076:	e9 f7       	brne	.-6      	; 0xb072 <main+0x7f6>
    b078:	cd 01       	movw	r24, r26
    b07a:	01 97       	sbiw	r24, 0x01	; 1
    b07c:	8e 1b       	sub	r24, r30
    b07e:	9f 0b       	sbc	r25, r31
    b080:	a0 e0       	ldi	r26, 0x00	; 0
    b082:	b0 e0       	ldi	r27, 0x00	; 0
    b084:	8e 0d       	add	r24, r14
    b086:	9f 1d       	adc	r25, r15
    b088:	a0 1f       	adc	r26, r16
    b08a:	b1 1f       	adc	r27, r17
    b08c:	80 93 b0 33 	sts	0x33B0, r24
    b090:	90 93 b1 33 	sts	0x33B1, r25
    b094:	a0 93 b2 33 	sts	0x33B2, r26
    b098:	b0 93 b3 33 	sts	0x33B3, r27
            uploadHeaderSize += uploadFileSize;
    b09c:	20 91 b0 33 	lds	r18, 0x33B0
    b0a0:	30 91 b1 33 	lds	r19, 0x33B1
    b0a4:	40 91 b2 33 	lds	r20, 0x33B2
    b0a8:	50 91 b3 33 	lds	r21, 0x33B3
    b0ac:	80 91 ac 33 	lds	r24, 0x33AC
    b0b0:	90 91 ad 33 	lds	r25, 0x33AD
    b0b4:	a0 91 ae 33 	lds	r26, 0x33AE
    b0b8:	b0 91 af 33 	lds	r27, 0x33AF
    b0bc:	82 0f       	add	r24, r18
    b0be:	93 1f       	adc	r25, r19
    b0c0:	a4 1f       	adc	r26, r20
    b0c2:	b5 1f       	adc	r27, r21
    b0c4:	80 93 b0 33 	sts	0x33B0, r24
    b0c8:	90 93 b1 33 	sts	0x33B1, r25
    b0cc:	a0 93 b2 33 	sts	0x33B2, r26
    b0d0:	b0 93 b3 33 	sts	0x33B3, r27


            if(useWifiForUploading || Debug_TriggerUpload(uploadHeaderSize, 2000)){
    b0d4:	80 91 39 33 	lds	r24, 0x3339
    b0d8:	88 23       	and	r24, r24
    b0da:	79 f4       	brne	.+30     	; 0xb0fa <main+0x87e>
    b0dc:	60 91 b0 33 	lds	r22, 0x33B0
    b0e0:	70 91 b1 33 	lds	r23, 0x33B1
    b0e4:	80 91 b2 33 	lds	r24, 0x33B2
    b0e8:	90 91 b3 33 	lds	r25, 0x33B3
    b0ec:	40 ed       	ldi	r20, 0xD0	; 208
    b0ee:	57 e0       	ldi	r21, 0x07	; 7
    b0f0:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <Debug_TriggerUpload>
    b0f4:	88 23       	and	r24, r24
    b0f6:	09 f4       	brne	.+2      	; 0xb0fa <main+0x87e>
    b0f8:	12 c2       	rjmp	.+1060   	; 0xb51e <main+0xca2>
                Uploader_SendString("POST /users/",false);                              // 12
    b0fa:	88 ef       	ldi	r24, 0xF8	; 248
    b0fc:	99 e2       	ldi	r25, 0x29	; 41
    b0fe:	60 e0       	ldi	r22, 0x00	; 0
    b100:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString(user,false);
    b104:	83 e1       	ldi	r24, 0x13	; 19
    b106:	9a e4       	ldi	r25, 0x4A	; 74
    b108:	60 e0       	ldi	r22, 0x00	; 0
    b10a:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString("/binupload?dev_nickname=",false);                  // 24
    b10e:	85 e0       	ldi	r24, 0x05	; 5
    b110:	9a e2       	ldi	r25, 0x2A	; 42
    b112:	60 e0       	ldi	r22, 0x00	; 0
    b114:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString(nickname,false);
    b118:	8b ea       	ldi	r24, 0xAB	; 171
    b11a:	9b e5       	ldi	r25, 0x5B	; 91
    b11c:	60 e0       	ldi	r22, 0x00	; 0
    b11e:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString("&filename=",false);                                // 10
    b122:	8e e1       	ldi	r24, 0x1E	; 30
    b124:	9a e2       	ldi	r25, 0x2A	; 42
    b126:	60 e0       	ldi	r22, 0x00	; 0
    b128:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString(fileToUpload, false);
    b12c:	8e e2       	ldi	r24, 0x2E	; 46
    b12e:	9c e3       	ldi	r25, 0x3C	; 60
    b130:	60 e0       	ldi	r22, 0x00	; 0
    b132:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString(" HTTP/1.1",true);                                  // 11
    b136:	89 e2       	ldi	r24, 0x29	; 41
    b138:	9a e2       	ldi	r25, 0x2A	; 42
    b13a:	61 e0       	ldi	r22, 0x01	; 1
    b13c:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>

                Uploader_SendString("Host: bodytrack.org",true);                        // 21
    b140:	83 e3       	ldi	r24, 0x33	; 51
    b142:	9a e2       	ldi	r25, 0x2A	; 42
    b144:	61 e0       	ldi	r22, 0x01	; 1
    b146:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString("Content-Type: application/octet-stream",true);     // 40
    b14a:	87 e4       	ldi	r24, 0x47	; 71
    b14c:	9a e2       	ldi	r25, 0x2A	; 42
    b14e:	61 e0       	ldi	r22, 0x01	; 1
    b150:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendString("Content-Transfer-Encoding: binary",true);          // 35
    b154:	8e e6       	ldi	r24, 0x6E	; 110
    b156:	9a e2       	ldi	r25, 0x2A	; 42
    b158:	61 e0       	ldi	r22, 0x01	; 1
    b15a:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
    b15e:	40 91 ac 33 	lds	r20, 0x33AC
    b162:	50 91 ad 33 	lds	r21, 0x33AD
    b166:	60 91 ae 33 	lds	r22, 0x33AE
    b16a:	70 91 af 33 	lds	r23, 0x33AF
    b16e:	ed b7       	in	r30, 0x3d	; 61
    b170:	fe b7       	in	r31, 0x3e	; 62
    b172:	38 97       	sbiw	r30, 0x08	; 8
    b174:	ed bf       	out	0x3d, r30	; 61
    b176:	fe bf       	out	0x3e, r31	; 62
    b178:	31 96       	adiw	r30, 0x01	; 1
    b17a:	05 ea       	ldi	r16, 0xA5	; 165
    b17c:	19 e4       	ldi	r17, 0x49	; 73
    b17e:	ad b7       	in	r26, 0x3d	; 61
    b180:	be b7       	in	r27, 0x3e	; 62
    b182:	11 96       	adiw	r26, 0x01	; 1
    b184:	0d 93       	st	X+, r16
    b186:	1c 93       	st	X, r17
    b188:	12 97       	sbiw	r26, 0x02	; 2
    b18a:	20 e9       	ldi	r18, 0x90	; 144
    b18c:	3a e2       	ldi	r19, 0x2A	; 42
    b18e:	22 83       	std	Z+2, r18	; 0x02
    b190:	33 83       	std	Z+3, r19	; 0x03
    b192:	44 83       	std	Z+4, r20	; 0x04
    b194:	55 83       	std	Z+5, r21	; 0x05
    b196:	66 83       	std	Z+6, r22	; 0x06
    b198:	77 83       	std	Z+7, r23	; 0x07
    b19a:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
                Uploader_SendString(temp,true);
    b19e:	6d b7       	in	r22, 0x3d	; 61
    b1a0:	7e b7       	in	r23, 0x3e	; 62
    b1a2:	68 5f       	subi	r22, 0xF8	; 248
    b1a4:	7f 4f       	sbci	r23, 0xFF	; 255
    b1a6:	6d bf       	out	0x3d, r22	; 61
    b1a8:	7e bf       	out	0x3e, r23	; 62
    b1aa:	c8 01       	movw	r24, r16
    b1ac:	61 e0       	ldi	r22, 0x01	; 1
    b1ae:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <Uploader_SendString>
                Uploader_SendByte(0x0D);                                                // 1
    b1b2:	8d e0       	ldi	r24, 0x0D	; 13
    b1b4:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);                                                // 1
    b1b8:	8a e0       	ldi	r24, 0x0A	; 10
    b1ba:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
    b1be:	88 24       	eor	r8, r8
    b1c0:	99 24       	eor	r9, r9
    b1c2:	54 01       	movw	r10, r8
    b1c4:	cc 24       	eor	r12, r12
    b1c6:	dd 24       	eor	r13, r13
    b1c8:	76 01       	movw	r14, r12

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;
    b1ca:	55 24       	eor	r5, r5
    b1cc:	53 94       	inc	r5
    b1ce:	42 c0       	rjmp	.+132    	; 0xb254 <main+0x9d8>
                Uploader_SendString(temp,true);
                Uploader_SendByte(0x0D);                                                // 1
                Uploader_SendByte(0x0A);                                                // 1

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                    uploadFileBufferFull = false;
    b1d0:	10 92 a7 33 	sts	0x33A7, r1
                    okToFillUploadFileBuffer = true;
    b1d4:	50 92 a6 33 	sts	0x33A6, r5

                    uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    b1d8:	20 91 b4 33 	lds	r18, 0x33B4
    b1dc:	30 91 b5 33 	lds	r19, 0x33B5
    b1e0:	40 91 b6 33 	lds	r20, 0x33B6
    b1e4:	50 91 b7 33 	lds	r21, 0x33B7
    b1e8:	c7 01       	movw	r24, r14
    b1ea:	b6 01       	movw	r22, r12
    b1ec:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    b1f0:	20 93 95 33 	sts	0x3395, r18
                    while(!uploadFileBufferFull);
    b1f4:	80 91 a7 33 	lds	r24, 0x33A7
    b1f8:	88 23       	and	r24, r24
    b1fa:	e1 f3       	breq	.-8      	; 0xb1f4 <main+0x978>
    b1fc:	0e e3       	ldi	r16, 0x3E	; 62
    b1fe:	18 e3       	ldi	r17, 0x38	; 56
                    for(uint16_t j = 0; j <  uploadChunkSize; j++){
                        if(Uploader_SendByte(uploadFileBuffer[j]) > 0){
    b200:	d8 01       	movw	r26, r16
    b202:	8c 91       	ld	r24, X
    b204:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
    b208:	89 2b       	or	r24, r25
    b20a:	09 f0       	breq	.+2      	; 0xb20e <main+0x992>
    b20c:	0d cc       	rjmp	.-2022   	; 0xaa28 <main+0x1ac>
                            goto Configure_Wifi;
                        }
                        if(Wifi_CharReadyToRead()){
    b20e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    b212:	88 23       	and	r24, r24
    b214:	61 f0       	breq	.+24     	; 0xb22e <main+0x9b2>
                           Debug_SendByte(Wifi_GetByte(false));
    b216:	80 e0       	ldi	r24, 0x00	; 0
    b218:	0e 94 1a 03 	call	0x634	; 0x634 <Wifi_GetByte>
    b21c:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    b21e:	80 91 a1 08 	lds	r24, 0x08A1
    b222:	85 ff       	sbrs	r24, 5
    b224:	fc cf       	rjmp	.-8      	; 0xb21e <main+0x9a2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    b226:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    b22a:	90 93 a0 08 	sts	0x08A0, r25
    b22e:	0f 5f       	subi	r16, 0xFF	; 255
    b230:	1f 4f       	sbci	r17, 0xFF	; 255
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;

                    uploadPercentBS = (z*100)/numberOfPacketsToUpload;
                    while(!uploadFileBufferFull);
                    for(uint16_t j = 0; j <  uploadChunkSize; j++){
    b232:	bc e3       	ldi	r27, 0x3C	; 60
    b234:	06 32       	cpi	r16, 0x26	; 38
    b236:	1b 07       	cpc	r17, r27
    b238:	19 f7       	brne	.-58     	; 0xb200 <main+0x984>
                sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
                Uploader_SendString(temp,true);
                Uploader_SendByte(0x0D);                                                // 1
                Uploader_SendByte(0x0A);                                                // 1

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    b23a:	08 94       	sec
    b23c:	81 1c       	adc	r8, r1
    b23e:	91 1c       	adc	r9, r1
    b240:	a1 1c       	adc	r10, r1
    b242:	b1 1c       	adc	r11, r1
    b244:	64 e6       	ldi	r22, 0x64	; 100
    b246:	70 e0       	ldi	r23, 0x00	; 0
    b248:	80 e0       	ldi	r24, 0x00	; 0
    b24a:	90 e0       	ldi	r25, 0x00	; 0
    b24c:	c6 0e       	add	r12, r22
    b24e:	d7 1e       	adc	r13, r23
    b250:	e8 1e       	adc	r14, r24
    b252:	f9 1e       	adc	r15, r25
    b254:	80 91 b4 33 	lds	r24, 0x33B4
    b258:	90 91 b5 33 	lds	r25, 0x33B5
    b25c:	a0 91 b6 33 	lds	r26, 0x33B6
    b260:	b0 91 b7 33 	lds	r27, 0x33B7
    b264:	88 16       	cp	r8, r24
    b266:	99 06       	cpc	r9, r25
    b268:	aa 06       	cpc	r10, r26
    b26a:	bb 06       	cpc	r11, r27
    b26c:	08 f4       	brcc	.+2      	; 0xb270 <main+0x9f4>
    b26e:	b0 cf       	rjmp	.-160    	; 0xb1d0 <main+0x954>
                        if(Wifi_CharReadyToRead()){
                           Debug_SendByte(Wifi_GetByte(false));
                        }
                    }
                }
                uploadFileBufferFull = false;
    b270:	10 92 a7 33 	sts	0x33A7, r1
                okToFillUploadFileBuffer = true;
    b274:	81 e0       	ldi	r24, 0x01	; 1
    b276:	80 93 a6 33 	sts	0x33A6, r24
                while(!uploadFileBufferFull);
    b27a:	80 91 a7 33 	lds	r24, 0x33A7
    b27e:	88 23       	and	r24, r24
    b280:	e1 f3       	breq	.-8      	; 0xb27a <main+0x9fe>
    b282:	be e3       	ldi	r27, 0x3E	; 62
    b284:	cb 2e       	mov	r12, r27
    b286:	b8 e3       	ldi	r27, 0x38	; 56
    b288:	db 2e       	mov	r13, r27
    b28a:	ee 24       	eor	r14, r14
    b28c:	ff 24       	eor	r15, r15
    b28e:	87 01       	movw	r16, r14
    b290:	0d c0       	rjmp	.+26     	; 0xb2ac <main+0xa30>
                for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
                    if(Uploader_SendByte(uploadFileBuffer[j]) != 0){
    b292:	d6 01       	movw	r26, r12
    b294:	8d 91       	ld	r24, X+
    b296:	6d 01       	movw	r12, r26
    b298:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
    b29c:	08 94       	sec
    b29e:	e1 1c       	adc	r14, r1
    b2a0:	f1 1c       	adc	r15, r1
    b2a2:	01 1d       	adc	r16, r1
    b2a4:	11 1d       	adc	r17, r1
    b2a6:	89 2b       	or	r24, r25
    b2a8:	09 f0       	breq	.+2      	; 0xb2ac <main+0xa30>
    b2aa:	be cb       	rjmp	.-2180   	; 0xaa28 <main+0x1ac>
                    }
                }
                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;
                while(!uploadFileBufferFull);
                for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    b2ac:	80 91 b8 33 	lds	r24, 0x33B8
    b2b0:	90 91 b9 33 	lds	r25, 0x33B9
    b2b4:	a0 91 ba 33 	lds	r26, 0x33BA
    b2b8:	b0 91 bb 33 	lds	r27, 0x33BB
    b2bc:	e8 16       	cp	r14, r24
    b2be:	f9 06       	cpc	r15, r25
    b2c0:	0a 07       	cpc	r16, r26
    b2c2:	1b 07       	cpc	r17, r27
    b2c4:	30 f3       	brcs	.-52     	; 0xb292 <main+0xa16>
                    if(Uploader_SendByte(uploadFileBuffer[j]) != 0){
                        goto Configure_Wifi;
                    }
                }
                Uploader_SendByte(0x0D);                                                // 4
    b2c6:	8d e0       	ldi	r24, 0x0D	; 13
    b2c8:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2cc:	8a e0       	ldi	r24, 0x0A	; 10
    b2ce:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0D);
    b2d2:	8d e0       	ldi	r24, 0x0D	; 13
    b2d4:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2d8:	8a e0       	ldi	r24, 0x0A	; 10
    b2da:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0D);                                                // 4
    b2de:	8d e0       	ldi	r24, 0x0D	; 13
    b2e0:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2e4:	8a e0       	ldi	r24, 0x0A	; 10
    b2e6:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0D);
    b2ea:	8d e0       	ldi	r24, 0x0D	; 13
    b2ec:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2f0:	8a e0       	ldi	r24, 0x0A	; 10
    b2f2:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0D);                                                // 4
    b2f6:	8d e0       	ldi	r24, 0x0D	; 13
    b2f8:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2fc:	8a e0       	ldi	r24, 0x0A	; 10
    b2fe:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0D);
    b302:	8d e0       	ldi	r24, 0x0D	; 13
    b304:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b308:	8a e0       	ldi	r24, 0x0A	; 10
    b30a:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <Uploader_SendByte>

                uploadPercentBS = 100;
    b30e:	84 e6       	ldi	r24, 0x64	; 100
    b310:	80 93 95 33 	sts	0x3395, r24
    b314:	80 e1       	ldi	r24, 0x10	; 16
    b316:	97 e2       	ldi	r25, 0x27	; 39
    b318:	f3 01       	movw	r30, r6
    b31a:	31 97       	sbiw	r30, 0x01	; 1
    b31c:	f1 f7       	brne	.-4      	; 0xb31a <main+0xa9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b31e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b320:	d9 f7       	brne	.-10     	; 0xb318 <main+0xa9c>
                _delay_ms(1000);

              //Wait_For_Close:
                httpResponseReceived = false;
    b322:	10 92 c3 33 	sts	0x33C3, r1
                connectionClosed = false;
    b326:	10 92 c4 33 	sts	0x33C4, r1
                if(useWifiForUploading){
    b32a:	80 91 39 33 	lds	r24, 0x3339
    b32e:	88 23       	and	r24, r24
    b330:	29 f0       	breq	.+10     	; 0xb33c <main+0xac0>
                    Debug_SendString("Wait for connection to close",true);
    b332:	84 ea       	ldi	r24, 0xA4	; 164
    b334:	9a e2       	ldi	r25, 0x2A	; 42
    b336:	61 e0       	ldi	r22, 0x01	; 1
    b338:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                }

                httpResponse[0] = 0;
    b33c:	10 92 55 53 	sts	0x5355, r1
                connectionTimeoutTimer = 0;
    b340:	10 92 c5 33 	sts	0x33C5, r1
    b344:	10 92 c6 33 	sts	0x33C6, r1
    b348:	10 92 c7 33 	sts	0x33C7, r1
    b34c:	10 92 c8 33 	sts	0x33C8, r1
                byteReceived = 0;
    b350:	10 92 8b 4a 	sts	0x4A8B, r1
    b354:	a6 e6       	ldi	r26, 0x66	; 102
    b356:	ea 2e       	mov	r14, r26
    b358:	ae e0       	ldi	r26, 0x0E	; 14
    b35a:	fa 2e       	mov	r15, r26
    b35c:	db c0       	rjmp	.+438    	; 0xb514 <main+0xc98>
                while(!connectionClosed){
                    if(Uploader_CharReadyToRead()){
    b35e:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <Uploader_CharReadyToRead>
    b362:	88 23       	and	r24, r24
    b364:	29 f0       	breq	.+10     	; 0xb370 <main+0xaf4>
                        byteReceived = Uploader_GetByte(false);
    b366:	80 e0       	ldi	r24, 0x00	; 0
    b368:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b36c:	80 93 8b 4a 	sts	0x4A8B, r24
                    }
                    if(byteReceived == '*'){
    b370:	80 91 8b 4a 	lds	r24, 0x4A8B
    b374:	8a 32       	cpi	r24, 0x2A	; 42
    b376:	21 f5       	brne	.+72     	; 0xb3c0 <main+0xb44>
                        byteReceived = Uploader_GetByte(true);
    b378:	81 e0       	ldi	r24, 0x01	; 1
    b37a:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b37e:	80 93 8b 4a 	sts	0x4A8B, r24
                        if(byteReceived == 'C'){
    b382:	83 34       	cpi	r24, 0x43	; 67
    b384:	09 f0       	breq	.+2      	; 0xb388 <main+0xb0c>
    b386:	a2 c0       	rjmp	.+324    	; 0xb4cc <main+0xc50>
                            byteReceived = Uploader_GetByte(true);
    b388:	81 e0       	ldi	r24, 0x01	; 1
    b38a:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b38e:	80 93 8b 4a 	sts	0x4A8B, r24
                            if(byteReceived == 'L'){
    b392:	8c 34       	cpi	r24, 0x4C	; 76
    b394:	09 f0       	breq	.+2      	; 0xb398 <main+0xb1c>
    b396:	9a c0       	rjmp	.+308    	; 0xb4cc <main+0xc50>
                                byteReceived = Uploader_GetByte(true);
    b398:	81 e0       	ldi	r24, 0x01	; 1
    b39a:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b39e:	80 93 8b 4a 	sts	0x4A8B, r24
                                if(byteReceived == 'O'){
    b3a2:	8f 34       	cpi	r24, 0x4F	; 79
    b3a4:	09 f0       	breq	.+2      	; 0xb3a8 <main+0xb2c>
    b3a6:	92 c0       	rjmp	.+292    	; 0xb4cc <main+0xc50>
                                    byteReceived = Uploader_GetByte(true);
    b3a8:	81 e0       	ldi	r24, 0x01	; 1
    b3aa:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b3ae:	80 93 8b 4a 	sts	0x4A8B, r24
                                    if(byteReceived == 'S'){
    b3b2:	83 35       	cpi	r24, 0x53	; 83
    b3b4:	09 f0       	breq	.+2      	; 0xb3b8 <main+0xb3c>
    b3b6:	8a c0       	rjmp	.+276    	; 0xb4cc <main+0xc50>
                                        connectionClosed = true;
    b3b8:	81 e0       	ldi	r24, 0x01	; 1
    b3ba:	80 93 c4 33 	sts	0x33C4, r24
    b3be:	af c0       	rjmp	.+350    	; 0xb51e <main+0xca2>
                                    }
                                }
                            }
                        }

                    } else if(byteReceived == 'H'){
    b3c0:	88 34       	cpi	r24, 0x48	; 72
    b3c2:	09 f0       	breq	.+2      	; 0xb3c6 <main+0xb4a>
    b3c4:	83 c0       	rjmp	.+262    	; 0xb4cc <main+0xc50>
                        byteReceived = Uploader_GetByte(true);
    b3c6:	81 e0       	ldi	r24, 0x01	; 1
    b3c8:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b3cc:	80 93 8b 4a 	sts	0x4A8B, r24
                        if(byteReceived == 'T'){
    b3d0:	84 35       	cpi	r24, 0x54	; 84
    b3d2:	09 f0       	breq	.+2      	; 0xb3d6 <main+0xb5a>
    b3d4:	7b c0       	rjmp	.+246    	; 0xb4cc <main+0xc50>
                            byteReceived = Uploader_GetByte(true);
    b3d6:	81 e0       	ldi	r24, 0x01	; 1
    b3d8:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b3dc:	80 93 8b 4a 	sts	0x4A8B, r24
                            if(byteReceived == 'T'){
    b3e0:	84 35       	cpi	r24, 0x54	; 84
    b3e2:	09 f0       	breq	.+2      	; 0xb3e6 <main+0xb6a>
    b3e4:	73 c0       	rjmp	.+230    	; 0xb4cc <main+0xc50>
                                byteReceived = Uploader_GetByte(true);
    b3e6:	81 e0       	ldi	r24, 0x01	; 1
    b3e8:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b3ec:	80 93 8b 4a 	sts	0x4A8B, r24
                                if(byteReceived == 'P'){
    b3f0:	80 35       	cpi	r24, 0x50	; 80
    b3f2:	09 f0       	breq	.+2      	; 0xb3f6 <main+0xb7a>
    b3f4:	6b c0       	rjmp	.+214    	; 0xb4cc <main+0xc50>
                                    httpResponseReceived = true;
    b3f6:	81 e0       	ldi	r24, 0x01	; 1
    b3f8:	80 93 c3 33 	sts	0x33C3, r24
    b3fc:	80 e1       	ldi	r24, 0x10	; 16
    b3fe:	97 e2       	ldi	r25, 0x27	; 39
    b400:	f3 01       	movw	r30, r6
    b402:	31 97       	sbiw	r30, 0x01	; 1
    b404:	f1 f7       	brne	.-4      	; 0xb402 <main+0xb86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b406:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b408:	d9 f7       	brne	.-10     	; 0xb400 <main+0xb84>
                                    _delay_ms(1000);
                                    tempStringFiller = 0;
    b40a:	10 92 88 33 	sts	0x3388, r1
    b40e:	12 c0       	rjmp	.+36     	; 0xb434 <main+0xbb8>
                                    while(Uploader_CharReadyToRead()){
                                        temp[tempStringFiller] = Uploader_GetByte(false);
    b410:	80 91 88 33 	lds	r24, 0x3388
    b414:	08 2f       	mov	r16, r24
    b416:	10 e0       	ldi	r17, 0x00	; 0
    b418:	80 e0       	ldi	r24, 0x00	; 0
    b41a:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b41e:	0b 55       	subi	r16, 0x5B	; 91
    b420:	16 4b       	sbci	r17, 0xB6	; 182
    b422:	f8 01       	movw	r30, r16
    b424:	80 83       	st	Z, r24
                                        tempStringFiller++;
    b426:	80 91 88 33 	lds	r24, 0x3388
    b42a:	8f 5f       	subi	r24, 0xFF	; 255
    b42c:	80 93 88 33 	sts	0x3388, r24
                                        if(tempStringFiller == 8){
    b430:	88 30       	cpi	r24, 0x08	; 8
    b432:	21 f0       	breq	.+8      	; 0xb43c <main+0xbc0>
                                byteReceived = Uploader_GetByte(true);
                                if(byteReceived == 'P'){
                                    httpResponseReceived = true;
                                    _delay_ms(1000);
                                    tempStringFiller = 0;
                                    while(Uploader_CharReadyToRead()){
    b434:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <Uploader_CharReadyToRead>
    b438:	88 23       	and	r24, r24
    b43a:	51 f7       	brne	.-44     	; 0xb410 <main+0xb94>
                                        tempStringFiller++;
                                        if(tempStringFiller == 8){
                                            break;
                                        }
                                    }
                                    temp[tempStringFiller] = 0;
    b43c:	e0 91 88 33 	lds	r30, 0x3388
    b440:	f0 e0       	ldi	r31, 0x00	; 0
    b442:	eb 55       	subi	r30, 0x5B	; 91
    b444:	f6 4b       	sbci	r31, 0xB6	; 182
    b446:	10 82       	st	Z, r1
                                    memcpy(httpResponse,temp+5,3);
    b448:	a5 e5       	ldi	r26, 0x55	; 85
    b44a:	b3 e5       	ldi	r27, 0x53	; 83
    b44c:	ea ea       	ldi	r30, 0xAA	; 170
    b44e:	f9 e4       	ldi	r31, 0x49	; 73
    b450:	83 e0       	ldi	r24, 0x03	; 3
    b452:	01 90       	ld	r0, Z+
    b454:	0d 92       	st	X+, r0
    b456:	81 50       	subi	r24, 0x01	; 1
    b458:	e1 f7       	brne	.-8      	; 0xb452 <main+0xbd6>
                                    lengthOfHttpResponse = 0;
    b45a:	10 92 c1 33 	sts	0x33C1, r1
    b45e:	10 92 c2 33 	sts	0x33C2, r1
    b462:	80 e5       	ldi	r24, 0x50	; 80
    b464:	93 ec       	ldi	r25, 0xC3	; 195
    b466:	f3 01       	movw	r30, r6
    b468:	31 97       	sbiw	r30, 0x01	; 1
    b46a:	f1 f7       	brne	.-4      	; 0xb468 <main+0xbec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b46c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b46e:	d9 f7       	brne	.-10     	; 0xb466 <main+0xbea>
    b470:	17 c0       	rjmp	.+46     	; 0xb4a0 <main+0xc24>
                                    _delay_ms(5000);
                                    while(Uploader_CharReadyToRead()){
                                        uploadFileBuffer[lengthOfHttpResponse] = Uploader_GetByte(false);
    b472:	00 91 c1 33 	lds	r16, 0x33C1
    b476:	10 91 c2 33 	lds	r17, 0x33C2
    b47a:	80 e0       	ldi	r24, 0x00	; 0
    b47c:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <Uploader_GetByte>
    b480:	02 5c       	subi	r16, 0xC2	; 194
    b482:	17 4c       	sbci	r17, 0xC7	; 199
    b484:	d8 01       	movw	r26, r16
    b486:	8c 93       	st	X, r24
                                        lengthOfHttpResponse++;
    b488:	80 91 c1 33 	lds	r24, 0x33C1
    b48c:	90 91 c2 33 	lds	r25, 0x33C2
    b490:	01 96       	adiw	r24, 0x01	; 1
    b492:	80 93 c1 33 	sts	0x33C1, r24
    b496:	90 93 c2 33 	sts	0x33C2, r25
                                        if(lengthOfHttpResponse > 999){
    b49a:	88 5e       	subi	r24, 0xE8	; 232
    b49c:	93 40       	sbci	r25, 0x03	; 3
    b49e:	20 f4       	brcc	.+8      	; 0xb4a8 <main+0xc2c>
                                    }
                                    temp[tempStringFiller] = 0;
                                    memcpy(httpResponse,temp+5,3);
                                    lengthOfHttpResponse = 0;
                                    _delay_ms(5000);
                                    while(Uploader_CharReadyToRead()){
    b4a0:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <Uploader_CharReadyToRead>
    b4a4:	88 23       	and	r24, r24
    b4a6:	29 f7       	brne	.-54     	; 0xb472 <main+0xbf6>
                                        lengthOfHttpResponse++;
                                        if(lengthOfHttpResponse > 999){
                                            break;
                                        }
                                    }
                                    uploadFileBuffer[lengthOfHttpResponse] = 0;
    b4a8:	e0 91 c1 33 	lds	r30, 0x33C1
    b4ac:	f0 91 c2 33 	lds	r31, 0x33C2
    b4b0:	e2 5c       	subi	r30, 0xC2	; 194
    b4b2:	f7 4c       	sbci	r31, 0xC7	; 199
    b4b4:	10 82       	st	Z, r1
                                    if(strstr(uploadFileBuffer,"*CLOS") != 0){
    b4b6:	8e e3       	ldi	r24, 0x3E	; 62
    b4b8:	98 e3       	ldi	r25, 0x38	; 56
    b4ba:	61 ec       	ldi	r22, 0xC1	; 193
    b4bc:	7a e2       	ldi	r23, 0x2A	; 42
    b4be:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    b4c2:	00 97       	sbiw	r24, 0x00	; 0
    b4c4:	19 f0       	breq	.+6      	; 0xb4cc <main+0xc50>
                                        connectionClosed = true;
    b4c6:	81 e0       	ldi	r24, 0x01	; 1
    b4c8:	80 93 c4 33 	sts	0x33C4, r24
    b4cc:	c7 01       	movw	r24, r14
    b4ce:	01 97       	sbiw	r24, 0x01	; 1
    b4d0:	f1 f7       	brne	.-4      	; 0xb4ce <main+0xc52>
                                }
                            }
                        }
                    }
                    _delay_ms(1);
                    connectionTimeoutTimer++;
    b4d2:	80 91 c5 33 	lds	r24, 0x33C5
    b4d6:	90 91 c6 33 	lds	r25, 0x33C6
    b4da:	a0 91 c7 33 	lds	r26, 0x33C7
    b4de:	b0 91 c8 33 	lds	r27, 0x33C8
    b4e2:	01 96       	adiw	r24, 0x01	; 1
    b4e4:	a1 1d       	adc	r26, r1
    b4e6:	b1 1d       	adc	r27, r1
    b4e8:	80 93 c5 33 	sts	0x33C5, r24
    b4ec:	90 93 c6 33 	sts	0x33C6, r25
    b4f0:	a0 93 c7 33 	sts	0x33C7, r26
    b4f4:	b0 93 c8 33 	sts	0x33C8, r27
                    if(connectionTimeoutTimer > 120000){
    b4f8:	81 5c       	subi	r24, 0xC1	; 193
    b4fa:	94 4d       	sbci	r25, 0xD4	; 212
    b4fc:	a1 40       	sbci	r26, 0x01	; 1
    b4fe:	b0 40       	sbci	r27, 0x00	; 0
    b500:	48 f0       	brcs	.+18     	; 0xb514 <main+0xc98>
                        connectionTimeoutTimer = 0;
    b502:	10 92 c5 33 	sts	0x33C5, r1
    b506:	10 92 c6 33 	sts	0x33C6, r1
    b50a:	10 92 c7 33 	sts	0x33C7, r1
    b50e:	10 92 c8 33 	sts	0x33C8, r1
    b512:	05 c0       	rjmp	.+10     	; 0xb51e <main+0xca2>
                }

                httpResponse[0] = 0;
                connectionTimeoutTimer = 0;
                byteReceived = 0;
                while(!connectionClosed){
    b514:	80 91 c4 33 	lds	r24, 0x33C4
    b518:	88 23       	and	r24, r24
    b51a:	09 f4       	brne	.+2      	; 0xb51e <main+0xca2>
    b51c:	20 cf       	rjmp	.-448    	; 0xb35e <main+0xae2>
                }
            }



            if(useWifiForUploading){
    b51e:	80 91 39 33 	lds	r24, 0x3339
    b522:	88 23       	and	r24, r24
    b524:	29 f0       	breq	.+10     	; 0xb530 <main+0xcb4>
               Debug_SendString("Connection Closed",true);
    b526:	87 ec       	ldi	r24, 0xC7	; 199
    b528:	9a e2       	ldi	r25, 0x2A	; 42
    b52a:	61 e0       	ldi	r22, 0x01	; 1
    b52c:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
            }

            uploadTimeStop = UNIX_time;
    b530:	80 91 68 33 	lds	r24, 0x3368
    b534:	90 91 69 33 	lds	r25, 0x3369
    b538:	a0 91 6a 33 	lds	r26, 0x336A
    b53c:	b0 91 6b 33 	lds	r27, 0x336B
    b540:	80 93 a7 3c 	sts	0x3CA7, r24
    b544:	90 93 a8 3c 	sts	0x3CA8, r25
    b548:	a0 93 a9 3c 	sts	0x3CA9, r26
    b54c:	b0 93 aa 3c 	sts	0x3CAA, r27


            if((httpResponseReceived) & (strstr(httpResponse,"200") != 0)){
    b550:	10 91 c3 33 	lds	r17, 0x33C3
    b554:	85 e5       	ldi	r24, 0x55	; 85
    b556:	93 e5       	ldi	r25, 0x53	; 83
    b558:	69 ed       	ldi	r22, 0xD9	; 217
    b55a:	7a e2       	ldi	r23, 0x2A	; 42
    b55c:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    b560:	40 e0       	ldi	r20, 0x00	; 0
    b562:	50 e0       	ldi	r21, 0x00	; 0
    b564:	00 97       	sbiw	r24, 0x00	; 0
    b566:	11 f0       	breq	.+4      	; 0xb56c <main+0xcf0>
    b568:	41 e0       	ldi	r20, 0x01	; 1
    b56a:	50 e0       	ldi	r21, 0x00	; 0
    b56c:	81 2f       	mov	r24, r17
    b56e:	90 e0       	ldi	r25, 0x00	; 0
    b570:	48 23       	and	r20, r24
    b572:	59 23       	and	r21, r25
    b574:	45 2b       	or	r20, r21
    b576:	09 f4       	brne	.+2      	; 0xb57a <main+0xcfe>
    b578:	f3 c0       	rjmp	.+486    	; 0xb760 <main+0xee4>
                memcpy(successfulBinaryRecordsString,strtok((strstr(uploadFileBuffer,"\"successful_binrecs\":") + 21),","),5);
    b57a:	8e e3       	ldi	r24, 0x3E	; 62
    b57c:	98 e3       	ldi	r25, 0x38	; 56
    b57e:	6d ed       	ldi	r22, 0xDD	; 221
    b580:	7a e2       	ldi	r23, 0x2A	; 42
    b582:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    b586:	45 96       	adiw	r24, 0x15	; 21
    b588:	60 e7       	ldi	r22, 0x70	; 112
    b58a:	75 e2       	ldi	r23, 0x25	; 37
    b58c:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    b590:	a4 eb       	ldi	r26, 0xB4	; 180
    b592:	ba e4       	ldi	r27, 0x4A	; 74
    b594:	fc 01       	movw	r30, r24
    b596:	85 e0       	ldi	r24, 0x05	; 5
    b598:	01 90       	ld	r0, Z+
    b59a:	0d 92       	st	X+, r0
    b59c:	81 50       	subi	r24, 0x01	; 1
    b59e:	e1 f7       	brne	.-8      	; 0xb598 <main+0xd1c>
                memcpy(failedBinaryRecordsString    ,strtok((strstr(uploadFileBuffer,"\"failed_binrecs\":") + 17),","),5);
    b5a0:	8e e3       	ldi	r24, 0x3E	; 62
    b5a2:	98 e3       	ldi	r25, 0x38	; 56
    b5a4:	63 ef       	ldi	r22, 0xF3	; 243
    b5a6:	7a e2       	ldi	r23, 0x2A	; 42
    b5a8:	0e 94 29 5d 	call	0xba52	; 0xba52 <strstr>
    b5ac:	41 96       	adiw	r24, 0x11	; 17
    b5ae:	60 e7       	ldi	r22, 0x70	; 112
    b5b0:	75 e2       	ldi	r23, 0x25	; 37
    b5b2:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strtok>
    b5b6:	ad ed       	ldi	r26, 0xDD	; 221
    b5b8:	bb e5       	ldi	r27, 0x5B	; 91
    b5ba:	fc 01       	movw	r30, r24
    b5bc:	85 e0       	ldi	r24, 0x05	; 5
    b5be:	01 90       	ld	r0, Z+
    b5c0:	0d 92       	st	X+, r0
    b5c2:	81 50       	subi	r24, 0x01	; 1
    b5c4:	e1 f7       	brne	.-8      	; 0xb5be <main+0xd42>
                strcpy(newFileName, fileToUpload);
    b5c6:	80 e9       	ldi	r24, 0x90	; 144
    b5c8:	96 e5       	ldi	r25, 0x56	; 86
    b5ca:	6e e2       	ldi	r22, 0x2E	; 46
    b5cc:	7c e3       	ldi	r23, 0x3C	; 60
    b5ce:	0e 94 22 5d 	call	0xba44	; 0xba44 <strcpy>
                strcat(newFileName, "U");
    b5d2:	80 e9       	ldi	r24, 0x90	; 144
    b5d4:	96 e5       	ldi	r25, 0x56	; 86
    b5d6:	65 e0       	ldi	r22, 0x05	; 5
    b5d8:	7b e2       	ldi	r23, 0x2B	; 43
    b5da:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <strcat>

                if(useWifiForUploading){
    b5de:	80 91 39 33 	lds	r24, 0x3339
    b5e2:	88 23       	and	r24, r24
    b5e4:	09 f4       	brne	.+2      	; 0xb5e8 <main+0xd6c>
    b5e6:	9d c0       	rjmp	.+314    	; 0xb722 <main+0xea6>
                    Debug_SendString("Got a 200 back",true);
    b5e8:	87 e0       	ldi	r24, 0x07	; 7
    b5ea:	9b e2       	ldi	r25, 0x2B	; 43
    b5ec:	61 e0       	ldi	r22, 0x01	; 1
    b5ee:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString("Successful: ",false);
    b5f2:	86 e1       	ldi	r24, 0x16	; 22
    b5f4:	9b e2       	ldi	r25, 0x2B	; 43
    b5f6:	60 e0       	ldi	r22, 0x00	; 0
    b5f8:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString(successfulBinaryRecordsString,true);
    b5fc:	84 eb       	ldi	r24, 0xB4	; 180
    b5fe:	9a e4       	ldi	r25, 0x4A	; 74
    b600:	61 e0       	ldi	r22, 0x01	; 1
    b602:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString("Failed: ",false);
    b606:	83 e2       	ldi	r24, 0x23	; 35
    b608:	9b e2       	ldi	r25, 0x2B	; 43
    b60a:	60 e0       	ldi	r22, 0x00	; 0
    b60c:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString(failedBinaryRecordsString,true);
    b610:	8d ed       	ldi	r24, 0xDD	; 221
    b612:	9b e5       	ldi	r25, 0x5B	; 91
    b614:	61 e0       	ldi	r22, 0x01	; 1
    b616:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    sprintf(temp,"File TX took: %lu secs",uploadTimeStop - uploadTimeStart);
    b61a:	80 91 a7 3c 	lds	r24, 0x3CA7
    b61e:	90 91 a8 3c 	lds	r25, 0x3CA8
    b622:	a0 91 a9 3c 	lds	r26, 0x3CA9
    b626:	b0 91 aa 3c 	lds	r27, 0x3CAA
    b62a:	20 91 4b 3c 	lds	r18, 0x3C4B
    b62e:	30 91 4c 3c 	lds	r19, 0x3C4C
    b632:	40 91 4d 3c 	lds	r20, 0x3C4D
    b636:	50 91 4e 3c 	lds	r21, 0x3C4E
    b63a:	6d b7       	in	r22, 0x3d	; 61
    b63c:	7e b7       	in	r23, 0x3e	; 62
    b63e:	68 50       	subi	r22, 0x08	; 8
    b640:	70 40       	sbci	r23, 0x00	; 0
    b642:	6d bf       	out	0x3d, r22	; 61
    b644:	7e bf       	out	0x3e, r23	; 62
    b646:	0d b7       	in	r16, 0x3d	; 61
    b648:	1e b7       	in	r17, 0x3e	; 62
    b64a:	0f 5f       	subi	r16, 0xFF	; 255
    b64c:	1f 4f       	sbci	r17, 0xFF	; 255
    b64e:	f5 ea       	ldi	r31, 0xA5	; 165
    b650:	cf 2e       	mov	r12, r31
    b652:	f9 e4       	ldi	r31, 0x49	; 73
    b654:	df 2e       	mov	r13, r31
    b656:	ed b7       	in	r30, 0x3d	; 61
    b658:	fe b7       	in	r31, 0x3e	; 62
    b65a:	c1 82       	std	Z+1, r12	; 0x01
    b65c:	d2 82       	std	Z+2, r13	; 0x02
    b65e:	6c e2       	ldi	r22, 0x2C	; 44
    b660:	7b e2       	ldi	r23, 0x2B	; 43
    b662:	f8 01       	movw	r30, r16
    b664:	62 83       	std	Z+2, r22	; 0x02
    b666:	73 83       	std	Z+3, r23	; 0x03
    b668:	82 1b       	sub	r24, r18
    b66a:	93 0b       	sbc	r25, r19
    b66c:	a4 0b       	sbc	r26, r20
    b66e:	b5 0b       	sbc	r27, r21
    b670:	84 83       	std	Z+4, r24	; 0x04
    b672:	95 83       	std	Z+5, r25	; 0x05
    b674:	a6 83       	std	Z+6, r26	; 0x06
    b676:	b7 83       	std	Z+7, r27	; 0x07
    b678:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
                    Debug_SendString(temp,true);
    b67c:	2d b7       	in	r18, 0x3d	; 61
    b67e:	3e b7       	in	r19, 0x3e	; 62
    b680:	28 5f       	subi	r18, 0xF8	; 248
    b682:	3f 4f       	sbci	r19, 0xFF	; 255
    b684:	2d bf       	out	0x3d, r18	; 61
    b686:	3e bf       	out	0x3e, r19	; 62
    b688:	c6 01       	movw	r24, r12
    b68a:	61 e0       	ldi	r22, 0x01	; 1
    b68c:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    sprintf(temp,"TX speed: %lu kbps", uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)));
    b690:	60 91 ac 33 	lds	r22, 0x33AC
    b694:	70 91 ad 33 	lds	r23, 0x33AD
    b698:	80 91 ae 33 	lds	r24, 0x33AE
    b69c:	90 91 af 33 	lds	r25, 0x33AF
    b6a0:	20 91 a7 3c 	lds	r18, 0x3CA7
    b6a4:	30 91 a8 3c 	lds	r19, 0x3CA8
    b6a8:	40 91 a9 3c 	lds	r20, 0x3CA9
    b6ac:	50 91 aa 3c 	lds	r21, 0x3CAA
    b6b0:	e0 90 4b 3c 	lds	r14, 0x3C4B
    b6b4:	f0 90 4c 3c 	lds	r15, 0x3C4C
    b6b8:	00 91 4d 3c 	lds	r16, 0x3C4D
    b6bc:	10 91 4e 3c 	lds	r17, 0x3C4E
    b6c0:	ad b7       	in	r26, 0x3d	; 61
    b6c2:	be b7       	in	r27, 0x3e	; 62
    b6c4:	18 97       	sbiw	r26, 0x08	; 8
    b6c6:	ad bf       	out	0x3d, r26	; 61
    b6c8:	be bf       	out	0x3e, r27	; 62
    b6ca:	ad b6       	in	r10, 0x3d	; 61
    b6cc:	be b6       	in	r11, 0x3e	; 62
    b6ce:	08 94       	sec
    b6d0:	a1 1c       	adc	r10, r1
    b6d2:	b1 1c       	adc	r11, r1
    b6d4:	11 96       	adiw	r26, 0x01	; 1
    b6d6:	cd 92       	st	X+, r12
    b6d8:	dc 92       	st	X, r13
    b6da:	12 97       	sbiw	r26, 0x02	; 2
    b6dc:	a3 e4       	ldi	r26, 0x43	; 67
    b6de:	bb e2       	ldi	r27, 0x2B	; 43
    b6e0:	f5 01       	movw	r30, r10
    b6e2:	a2 83       	std	Z+2, r26	; 0x02
    b6e4:	b3 83       	std	Z+3, r27	; 0x03
    b6e6:	2e 19       	sub	r18, r14
    b6e8:	3f 09       	sbc	r19, r15
    b6ea:	40 0b       	sbc	r20, r16
    b6ec:	51 0b       	sbc	r21, r17
    b6ee:	e7 e0       	ldi	r30, 0x07	; 7
    b6f0:	22 0f       	add	r18, r18
    b6f2:	33 1f       	adc	r19, r19
    b6f4:	44 1f       	adc	r20, r20
    b6f6:	55 1f       	adc	r21, r21
    b6f8:	ea 95       	dec	r30
    b6fa:	d1 f7       	brne	.-12     	; 0xb6f0 <main+0xe74>
    b6fc:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    b700:	f5 01       	movw	r30, r10
    b702:	24 83       	std	Z+4, r18	; 0x04
    b704:	35 83       	std	Z+5, r19	; 0x05
    b706:	46 83       	std	Z+6, r20	; 0x06
    b708:	57 83       	std	Z+7, r21	; 0x07
    b70a:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <sprintf>
                    Debug_SendString(temp,true);
    b70e:	2d b7       	in	r18, 0x3d	; 61
    b710:	3e b7       	in	r19, 0x3e	; 62
    b712:	28 5f       	subi	r18, 0xF8	; 248
    b714:	3f 4f       	sbci	r19, 0xFF	; 255
    b716:	2d bf       	out	0x3d, r18	; 61
    b718:	3e bf       	out	0x3e, r19	; 62
    b71a:	c6 01       	movw	r24, r12
    b71c:	61 e0       	ldi	r22, 0x01	; 1
    b71e:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>

                }
                okToRenameUploadFile = true;
    b722:	81 e0       	ldi	r24, 0x01	; 1
    b724:	80 93 a1 33 	sts	0x33A1, r24
                okToCloseUploadFile = true;                   // flags it close file and to be to be renamed
    b728:	80 93 a0 33 	sts	0x33A0, r24
    b72c:	80 e1       	ldi	r24, 0x10	; 16
    b72e:	97 e2       	ldi	r25, 0x27	; 39
    b730:	f3 01       	movw	r30, r6
    b732:	31 97       	sbiw	r30, 0x01	; 1
    b734:	f1 f7       	brne	.-4      	; 0xb732 <main+0xeb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b736:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b738:	d9 f7       	brne	.-10     	; 0xb730 <main+0xeb4>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    b73a:	80 91 a0 33 	lds	r24, 0x33A0
    b73e:	88 23       	and	r24, r24
    b740:	e1 f7       	brne	.-8      	; 0xb73a <main+0xebe>
    b742:	80 e1       	ldi	r24, 0x10	; 16
    b744:	97 e2       	ldi	r25, 0x27	; 39
    b746:	f3 01       	movw	r30, r6
    b748:	31 97       	sbiw	r30, 0x01	; 1
    b74a:	f1 f7       	brne	.-4      	; 0xb748 <main+0xecc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b74c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b74e:	d9 f7       	brne	.-10     	; 0xb746 <main+0xeca>
                _delay_ms(1000);
                okToWriteUploaderLogFile = true;               // adds entry to log file
    b750:	81 e0       	ldi	r24, 0x01	; 1
    b752:	80 93 c9 33 	sts	0x33C9, r24
                while(okToWriteUploaderLogFile);
    b756:	80 91 c9 33 	lds	r24, 0x33C9
    b75a:	88 23       	and	r24, r24
    b75c:	e1 f7       	brne	.-8      	; 0xb756 <main+0xeda>
    b75e:	34 c0       	rjmp	.+104    	; 0xb7c8 <main+0xf4c>

            } else {
                if(useWifiForUploading){
    b760:	80 91 39 33 	lds	r24, 0x3339
    b764:	88 23       	and	r24, r24
    b766:	a1 f0       	breq	.+40     	; 0xb790 <main+0xf14>
                    Debug_SendString("File did not upload",true);
    b768:	86 e5       	ldi	r24, 0x56	; 86
    b76a:	9b e2       	ldi	r25, 0x2B	; 43
    b76c:	61 e0       	ldi	r22, 0x01	; 1
    b76e:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString("got: *",false);
    b772:	8a e6       	ldi	r24, 0x6A	; 106
    b774:	9b e2       	ldi	r25, 0x2B	; 43
    b776:	60 e0       	ldi	r22, 0x00	; 0
    b778:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString(httpResponse,false);
    b77c:	85 e5       	ldi	r24, 0x55	; 85
    b77e:	93 e5       	ldi	r25, 0x53	; 83
    b780:	60 e0       	ldi	r22, 0x00	; 0
    b782:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                    Debug_SendString("* back",true);
    b786:	81 e7       	ldi	r24, 0x71	; 113
    b788:	9b e2       	ldi	r25, 0x2B	; 43
    b78a:	61 e0       	ldi	r22, 0x01	; 1
    b78c:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
                }


			    okToCloseUploadFile = true;                    // flags it close file
    b790:	81 e0       	ldi	r24, 0x01	; 1
    b792:	80 93 a0 33 	sts	0x33A0, r24
    b796:	80 e1       	ldi	r24, 0x10	; 16
    b798:	97 e2       	ldi	r25, 0x27	; 39
    b79a:	f3 01       	movw	r30, r6
    b79c:	31 97       	sbiw	r30, 0x01	; 1
    b79e:	f1 f7       	brne	.-4      	; 0xb79c <main+0xf20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b7a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b7a2:	d9 f7       	brne	.-10     	; 0xb79a <main+0xf1e>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    b7a4:	80 91 a0 33 	lds	r24, 0x33A0
    b7a8:	88 23       	and	r24, r24
    b7aa:	e1 f7       	brne	.-8      	; 0xb7a4 <main+0xf28>
    b7ac:	80 e1       	ldi	r24, 0x10	; 16
    b7ae:	97 e2       	ldi	r25, 0x27	; 39
    b7b0:	f3 01       	movw	r30, r6
    b7b2:	31 97       	sbiw	r30, 0x01	; 1
    b7b4:	f1 f7       	brne	.-4      	; 0xb7b2 <main+0xf36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b7b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b7b8:	d9 f7       	brne	.-10     	; 0xb7b0 <main+0xf34>
                _delay_ms(1000);

			    uploadFailed = true;                             // adds error entry to log file
    b7ba:	81 e0       	ldi	r24, 0x01	; 1
    b7bc:	80 93 9f 33 	sts	0x339F, r24
                while(uploadFailed);
    b7c0:	80 91 9f 33 	lds	r24, 0x339F
    b7c4:	88 23       	and	r24, r24
    b7c6:	e1 f7       	brne	.-8      	; 0xb7c0 <main+0xf44>
            }

            if(useWifiForUploading){
    b7c8:	80 91 39 33 	lds	r24, 0x3339
    b7cc:	88 23       	and	r24, r24
    b7ce:	51 f0       	breq	.+20     	; 0xb7e4 <main+0xf68>
              Debug_SendString("Done!", true);
    b7d0:	88 e7       	ldi	r24, 0x78	; 120
    b7d2:	9b e2       	ldi	r25, 0x2B	; 43
    b7d4:	61 e0       	ldi	r22, 0x01	; 1
    b7d6:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
              Debug_SendString("_____________________________________________", true);
    b7da:	8a e2       	ldi	r24, 0x2A	; 42
    b7dc:	99 e2       	ldi	r25, 0x29	; 41
    b7de:	61 e0       	ldi	r22, 0x01	; 1
    b7e0:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <Debug_SendString>
            }

		    uploading = false;
    b7e4:	10 92 a3 33 	sts	0x33A3, r1
			okToUpload = false;
    b7e8:	10 92 a2 33 	sts	0x33A2, r1
    b7ec:	bb c9       	rjmp	.-3210   	; 0xab64 <main+0x2e8>
    b7ee:	e0 e2       	ldi	r30, 0x20	; 32
    b7f0:	f6 e0       	ldi	r31, 0x06	; 6
    b7f2:	82 e0       	ldi	r24, 0x02	; 2
    b7f4:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b7f6:	81 e0       	ldi	r24, 0x01	; 1
    b7f8:	85 83       	std	Z+5, r24	; 0x05
    b7fa:	20 e1       	ldi	r18, 0x10	; 16
    b7fc:	37 e2       	ldi	r19, 0x27	; 39
    b7fe:	40 e7       	ldi	r20, 0x70	; 112
    b800:	51 e0       	ldi	r21, 0x01	; 1
    b802:	d9 c8       	rjmp	.-3662   	; 0xa9b6 <main+0x13a>

    Main:
	while(true){

        if(Dpad_CheckButton(Left)){
          Debug_To_Wifi();
    b804:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <Debug_To_Wifi>
    b808:	b2 c9       	rjmp	.-3228   	; 0xab6e <main+0x2f2>
    b80a:	ff cf       	rjmp	.-2      	; 0xb80a <main+0xf8e>

0000b80c <__mulsi3>:
    b80c:	62 9f       	mul	r22, r18
    b80e:	d0 01       	movw	r26, r0
    b810:	73 9f       	mul	r23, r19
    b812:	f0 01       	movw	r30, r0
    b814:	82 9f       	mul	r24, r18
    b816:	e0 0d       	add	r30, r0
    b818:	f1 1d       	adc	r31, r1
    b81a:	64 9f       	mul	r22, r20
    b81c:	e0 0d       	add	r30, r0
    b81e:	f1 1d       	adc	r31, r1
    b820:	92 9f       	mul	r25, r18
    b822:	f0 0d       	add	r31, r0
    b824:	83 9f       	mul	r24, r19
    b826:	f0 0d       	add	r31, r0
    b828:	74 9f       	mul	r23, r20
    b82a:	f0 0d       	add	r31, r0
    b82c:	65 9f       	mul	r22, r21
    b82e:	f0 0d       	add	r31, r0
    b830:	99 27       	eor	r25, r25
    b832:	72 9f       	mul	r23, r18
    b834:	b0 0d       	add	r27, r0
    b836:	e1 1d       	adc	r30, r1
    b838:	f9 1f       	adc	r31, r25
    b83a:	63 9f       	mul	r22, r19
    b83c:	b0 0d       	add	r27, r0
    b83e:	e1 1d       	adc	r30, r1
    b840:	f9 1f       	adc	r31, r25
    b842:	bd 01       	movw	r22, r26
    b844:	cf 01       	movw	r24, r30
    b846:	11 24       	eor	r1, r1
    b848:	08 95       	ret

0000b84a <__udivmodqi4>:
    b84a:	99 1b       	sub	r25, r25
    b84c:	79 e0       	ldi	r23, 0x09	; 9
    b84e:	04 c0       	rjmp	.+8      	; 0xb858 <__udivmodqi4_ep>

0000b850 <__udivmodqi4_loop>:
    b850:	99 1f       	adc	r25, r25
    b852:	96 17       	cp	r25, r22
    b854:	08 f0       	brcs	.+2      	; 0xb858 <__udivmodqi4_ep>
    b856:	96 1b       	sub	r25, r22

0000b858 <__udivmodqi4_ep>:
    b858:	88 1f       	adc	r24, r24
    b85a:	7a 95       	dec	r23
    b85c:	c9 f7       	brne	.-14     	; 0xb850 <__udivmodqi4_loop>
    b85e:	80 95       	com	r24
    b860:	08 95       	ret

0000b862 <__udivmodhi4>:
    b862:	aa 1b       	sub	r26, r26
    b864:	bb 1b       	sub	r27, r27
    b866:	51 e1       	ldi	r21, 0x11	; 17
    b868:	07 c0       	rjmp	.+14     	; 0xb878 <__udivmodhi4_ep>

0000b86a <__udivmodhi4_loop>:
    b86a:	aa 1f       	adc	r26, r26
    b86c:	bb 1f       	adc	r27, r27
    b86e:	a6 17       	cp	r26, r22
    b870:	b7 07       	cpc	r27, r23
    b872:	10 f0       	brcs	.+4      	; 0xb878 <__udivmodhi4_ep>
    b874:	a6 1b       	sub	r26, r22
    b876:	b7 0b       	sbc	r27, r23

0000b878 <__udivmodhi4_ep>:
    b878:	88 1f       	adc	r24, r24
    b87a:	99 1f       	adc	r25, r25
    b87c:	5a 95       	dec	r21
    b87e:	a9 f7       	brne	.-22     	; 0xb86a <__udivmodhi4_loop>
    b880:	80 95       	com	r24
    b882:	90 95       	com	r25
    b884:	bc 01       	movw	r22, r24
    b886:	cd 01       	movw	r24, r26
    b888:	08 95       	ret

0000b88a <__divmodhi4>:
    b88a:	97 fb       	bst	r25, 7
    b88c:	09 2e       	mov	r0, r25
    b88e:	07 26       	eor	r0, r23
    b890:	0a d0       	rcall	.+20     	; 0xb8a6 <__divmodhi4_neg1>
    b892:	77 fd       	sbrc	r23, 7
    b894:	04 d0       	rcall	.+8      	; 0xb89e <__divmodhi4_neg2>
    b896:	e5 df       	rcall	.-54     	; 0xb862 <__udivmodhi4>
    b898:	06 d0       	rcall	.+12     	; 0xb8a6 <__divmodhi4_neg1>
    b89a:	00 20       	and	r0, r0
    b89c:	1a f4       	brpl	.+6      	; 0xb8a4 <__divmodhi4_exit>

0000b89e <__divmodhi4_neg2>:
    b89e:	70 95       	com	r23
    b8a0:	61 95       	neg	r22
    b8a2:	7f 4f       	sbci	r23, 0xFF	; 255

0000b8a4 <__divmodhi4_exit>:
    b8a4:	08 95       	ret

0000b8a6 <__divmodhi4_neg1>:
    b8a6:	f6 f7       	brtc	.-4      	; 0xb8a4 <__divmodhi4_exit>
    b8a8:	90 95       	com	r25
    b8aa:	81 95       	neg	r24
    b8ac:	9f 4f       	sbci	r25, 0xFF	; 255
    b8ae:	08 95       	ret

0000b8b0 <__udivmodsi4>:
    b8b0:	a1 e2       	ldi	r26, 0x21	; 33
    b8b2:	1a 2e       	mov	r1, r26
    b8b4:	aa 1b       	sub	r26, r26
    b8b6:	bb 1b       	sub	r27, r27
    b8b8:	fd 01       	movw	r30, r26
    b8ba:	0d c0       	rjmp	.+26     	; 0xb8d6 <__udivmodsi4_ep>

0000b8bc <__udivmodsi4_loop>:
    b8bc:	aa 1f       	adc	r26, r26
    b8be:	bb 1f       	adc	r27, r27
    b8c0:	ee 1f       	adc	r30, r30
    b8c2:	ff 1f       	adc	r31, r31
    b8c4:	a2 17       	cp	r26, r18
    b8c6:	b3 07       	cpc	r27, r19
    b8c8:	e4 07       	cpc	r30, r20
    b8ca:	f5 07       	cpc	r31, r21
    b8cc:	20 f0       	brcs	.+8      	; 0xb8d6 <__udivmodsi4_ep>
    b8ce:	a2 1b       	sub	r26, r18
    b8d0:	b3 0b       	sbc	r27, r19
    b8d2:	e4 0b       	sbc	r30, r20
    b8d4:	f5 0b       	sbc	r31, r21

0000b8d6 <__udivmodsi4_ep>:
    b8d6:	66 1f       	adc	r22, r22
    b8d8:	77 1f       	adc	r23, r23
    b8da:	88 1f       	adc	r24, r24
    b8dc:	99 1f       	adc	r25, r25
    b8de:	1a 94       	dec	r1
    b8e0:	69 f7       	brne	.-38     	; 0xb8bc <__udivmodsi4_loop>
    b8e2:	60 95       	com	r22
    b8e4:	70 95       	com	r23
    b8e6:	80 95       	com	r24
    b8e8:	90 95       	com	r25
    b8ea:	9b 01       	movw	r18, r22
    b8ec:	ac 01       	movw	r20, r24
    b8ee:	bd 01       	movw	r22, r26
    b8f0:	cf 01       	movw	r24, r30
    b8f2:	08 95       	ret

0000b8f4 <atoi>:
    b8f4:	fc 01       	movw	r30, r24
    b8f6:	88 27       	eor	r24, r24
    b8f8:	99 27       	eor	r25, r25
    b8fa:	e8 94       	clt
    b8fc:	21 91       	ld	r18, Z+
    b8fe:	20 32       	cpi	r18, 0x20	; 32
    b900:	e9 f3       	breq	.-6      	; 0xb8fc <atoi+0x8>
    b902:	29 30       	cpi	r18, 0x09	; 9
    b904:	10 f0       	brcs	.+4      	; 0xb90a <atoi+0x16>
    b906:	2e 30       	cpi	r18, 0x0E	; 14
    b908:	c8 f3       	brcs	.-14     	; 0xb8fc <atoi+0x8>
    b90a:	2b 32       	cpi	r18, 0x2B	; 43
    b90c:	41 f0       	breq	.+16     	; 0xb91e <atoi+0x2a>
    b90e:	2d 32       	cpi	r18, 0x2D	; 45
    b910:	39 f4       	brne	.+14     	; 0xb920 <atoi+0x2c>
    b912:	68 94       	set
    b914:	04 c0       	rjmp	.+8      	; 0xb91e <atoi+0x2a>
    b916:	0e 94 bd 5d 	call	0xbb7a	; 0xbb7a <__mulhi_const_10>
    b91a:	82 0f       	add	r24, r18
    b91c:	91 1d       	adc	r25, r1
    b91e:	21 91       	ld	r18, Z+
    b920:	20 53       	subi	r18, 0x30	; 48
    b922:	2a 30       	cpi	r18, 0x0A	; 10
    b924:	c0 f3       	brcs	.-16     	; 0xb916 <atoi+0x22>
    b926:	1e f4       	brtc	.+6      	; 0xb92e <atoi+0x3a>
    b928:	90 95       	com	r25
    b92a:	81 95       	neg	r24
    b92c:	9f 4f       	sbci	r25, 0xFF	; 255
    b92e:	08 95       	ret

0000b930 <atol>:
    b930:	1f 93       	push	r17
    b932:	fc 01       	movw	r30, r24
    b934:	99 27       	eor	r25, r25
    b936:	88 27       	eor	r24, r24
    b938:	bc 01       	movw	r22, r24
    b93a:	e8 94       	clt
    b93c:	11 91       	ld	r17, Z+
    b93e:	10 32       	cpi	r17, 0x20	; 32
    b940:	e9 f3       	breq	.-6      	; 0xb93c <atol+0xc>
    b942:	19 30       	cpi	r17, 0x09	; 9
    b944:	10 f0       	brcs	.+4      	; 0xb94a <atol+0x1a>
    b946:	1e 30       	cpi	r17, 0x0E	; 14
    b948:	c8 f3       	brcs	.-14     	; 0xb93c <atol+0xc>
    b94a:	1b 32       	cpi	r17, 0x2B	; 43
    b94c:	51 f0       	breq	.+20     	; 0xb962 <atol+0x32>
    b94e:	1d 32       	cpi	r17, 0x2D	; 45
    b950:	49 f4       	brne	.+18     	; 0xb964 <atol+0x34>
    b952:	68 94       	set
    b954:	06 c0       	rjmp	.+12     	; 0xb962 <atol+0x32>
    b956:	0e 94 a8 5d 	call	0xbb50	; 0xbb50 <__mulsi_const_10>
    b95a:	61 0f       	add	r22, r17
    b95c:	71 1d       	adc	r23, r1
    b95e:	81 1d       	adc	r24, r1
    b960:	91 1d       	adc	r25, r1
    b962:	11 91       	ld	r17, Z+
    b964:	10 53       	subi	r17, 0x30	; 48
    b966:	1a 30       	cpi	r17, 0x0A	; 10
    b968:	b0 f3       	brcs	.-20     	; 0xb956 <atol+0x26>
    b96a:	3e f4       	brtc	.+14     	; 0xb97a <atol+0x4a>
    b96c:	90 95       	com	r25
    b96e:	80 95       	com	r24
    b970:	70 95       	com	r23
    b972:	61 95       	neg	r22
    b974:	7f 4f       	sbci	r23, 0xFF	; 255
    b976:	8f 4f       	sbci	r24, 0xFF	; 255
    b978:	9f 4f       	sbci	r25, 0xFF	; 255
    b97a:	1f 91       	pop	r17
    b97c:	08 95       	ret

0000b97e <strtok>:
    b97e:	4c e3       	ldi	r20, 0x3C	; 60
    b980:	58 e3       	ldi	r21, 0x38	; 56
    b982:	0e 94 43 5d 	call	0xba86	; 0xba86 <strtok_r>
    b986:	08 95       	ret

0000b988 <memmove>:
    b988:	68 17       	cp	r22, r24
    b98a:	79 07       	cpc	r23, r25
    b98c:	68 f4       	brcc	.+26     	; 0xb9a8 <memmove+0x20>
    b98e:	fb 01       	movw	r30, r22
    b990:	dc 01       	movw	r26, r24
    b992:	e4 0f       	add	r30, r20
    b994:	f5 1f       	adc	r31, r21
    b996:	a4 0f       	add	r26, r20
    b998:	b5 1f       	adc	r27, r21
    b99a:	02 c0       	rjmp	.+4      	; 0xb9a0 <memmove+0x18>
    b99c:	02 90       	ld	r0, -Z
    b99e:	0e 92       	st	-X, r0
    b9a0:	41 50       	subi	r20, 0x01	; 1
    b9a2:	50 40       	sbci	r21, 0x00	; 0
    b9a4:	d8 f7       	brcc	.-10     	; 0xb99c <memmove+0x14>
    b9a6:	08 95       	ret
    b9a8:	0c 94 fb 5f 	jmp	0xbff6	; 0xbff6 <memcpy>

0000b9ac <strcasecmp>:
    b9ac:	fb 01       	movw	r30, r22
    b9ae:	dc 01       	movw	r26, r24
    b9b0:	8d 91       	ld	r24, X+
    b9b2:	81 34       	cpi	r24, 0x41	; 65
    b9b4:	1c f0       	brlt	.+6      	; 0xb9bc <strcasecmp+0x10>
    b9b6:	8b 35       	cpi	r24, 0x5B	; 91
    b9b8:	0c f4       	brge	.+2      	; 0xb9bc <strcasecmp+0x10>
    b9ba:	80 5e       	subi	r24, 0xE0	; 224
    b9bc:	61 91       	ld	r22, Z+
    b9be:	61 34       	cpi	r22, 0x41	; 65
    b9c0:	1c f0       	brlt	.+6      	; 0xb9c8 <strcasecmp+0x1c>
    b9c2:	6b 35       	cpi	r22, 0x5B	; 91
    b9c4:	0c f4       	brge	.+2      	; 0xb9c8 <strcasecmp+0x1c>
    b9c6:	60 5e       	subi	r22, 0xE0	; 224
    b9c8:	86 1b       	sub	r24, r22
    b9ca:	61 11       	cpse	r22, r1
    b9cc:	89 f3       	breq	.-30     	; 0xb9b0 <strcasecmp+0x4>
    b9ce:	99 0b       	sbc	r25, r25
    b9d0:	08 95       	ret

0000b9d2 <strcasestr>:
    b9d2:	fb 01       	movw	r30, r22
    b9d4:	51 91       	ld	r21, Z+
    b9d6:	55 23       	and	r21, r21
    b9d8:	b1 f0       	breq	.+44     	; 0xba06 <strcasestr+0x34>
    b9da:	bf 01       	movw	r22, r30
    b9dc:	dc 01       	movw	r26, r24
    b9de:	05 2e       	mov	r0, r21
    b9e0:	4d 91       	ld	r20, X+
    b9e2:	44 23       	and	r20, r20
    b9e4:	69 f0       	breq	.+26     	; 0xba00 <strcasestr+0x2e>
    b9e6:	10 d0       	rcall	.+32     	; 0xba08 <strcasestr+0x36>
    b9e8:	d9 f7       	brne	.-10     	; 0xb9e0 <strcasestr+0xe>
    b9ea:	cd 01       	movw	r24, r26
    b9ec:	01 90       	ld	r0, Z+
    b9ee:	00 20       	and	r0, r0
    b9f0:	49 f0       	breq	.+18     	; 0xba04 <strcasestr+0x32>
    b9f2:	4d 91       	ld	r20, X+
    b9f4:	41 11       	cpse	r20, r1
    b9f6:	08 d0       	rcall	.+16     	; 0xba08 <strcasestr+0x36>
    b9f8:	c9 f3       	breq	.-14     	; 0xb9ec <strcasestr+0x1a>
    b9fa:	fb 01       	movw	r30, r22
    b9fc:	41 11       	cpse	r20, r1
    b9fe:	ee cf       	rjmp	.-36     	; 0xb9dc <strcasestr+0xa>
    ba00:	81 e0       	ldi	r24, 0x01	; 1
    ba02:	90 e0       	ldi	r25, 0x00	; 0
    ba04:	01 97       	sbiw	r24, 0x01	; 1
    ba06:	08 95       	ret
    ba08:	40 25       	eor	r20, r0
    ba0a:	39 f0       	breq	.+14     	; 0xba1a <strcasestr+0x48>
    ba0c:	40 32       	cpi	r20, 0x20	; 32
    ba0e:	29 f4       	brne	.+10     	; 0xba1a <strcasestr+0x48>
    ba10:	40 29       	or	r20, r0
    ba12:	4b 57       	subi	r20, 0x7B	; 123
    ba14:	46 5e       	subi	r20, 0xE6	; 230
    ba16:	08 f0       	brcs	.+2      	; 0xba1a <strcasestr+0x48>
    ba18:	18 94       	sez
    ba1a:	08 95       	ret

0000ba1c <strcat>:
    ba1c:	fb 01       	movw	r30, r22
    ba1e:	dc 01       	movw	r26, r24
    ba20:	0d 90       	ld	r0, X+
    ba22:	00 20       	and	r0, r0
    ba24:	e9 f7       	brne	.-6      	; 0xba20 <strcat+0x4>
    ba26:	11 97       	sbiw	r26, 0x01	; 1
    ba28:	01 90       	ld	r0, Z+
    ba2a:	0d 92       	st	X+, r0
    ba2c:	00 20       	and	r0, r0
    ba2e:	e1 f7       	brne	.-8      	; 0xba28 <strcat+0xc>
    ba30:	08 95       	ret

0000ba32 <strcmp>:
    ba32:	fb 01       	movw	r30, r22
    ba34:	dc 01       	movw	r26, r24
    ba36:	8d 91       	ld	r24, X+
    ba38:	01 90       	ld	r0, Z+
    ba3a:	80 19       	sub	r24, r0
    ba3c:	01 10       	cpse	r0, r1
    ba3e:	d9 f3       	breq	.-10     	; 0xba36 <strcmp+0x4>
    ba40:	99 0b       	sbc	r25, r25
    ba42:	08 95       	ret

0000ba44 <strcpy>:
    ba44:	fb 01       	movw	r30, r22
    ba46:	dc 01       	movw	r26, r24
    ba48:	01 90       	ld	r0, Z+
    ba4a:	0d 92       	st	X+, r0
    ba4c:	00 20       	and	r0, r0
    ba4e:	e1 f7       	brne	.-8      	; 0xba48 <strcpy+0x4>
    ba50:	08 95       	ret

0000ba52 <strstr>:
    ba52:	fb 01       	movw	r30, r22
    ba54:	51 91       	ld	r21, Z+
    ba56:	55 23       	and	r21, r21
    ba58:	a9 f0       	breq	.+42     	; 0xba84 <strstr+0x32>
    ba5a:	bf 01       	movw	r22, r30
    ba5c:	dc 01       	movw	r26, r24
    ba5e:	4d 91       	ld	r20, X+
    ba60:	45 17       	cp	r20, r21
    ba62:	41 11       	cpse	r20, r1
    ba64:	e1 f7       	brne	.-8      	; 0xba5e <strstr+0xc>
    ba66:	59 f4       	brne	.+22     	; 0xba7e <strstr+0x2c>
    ba68:	cd 01       	movw	r24, r26
    ba6a:	01 90       	ld	r0, Z+
    ba6c:	00 20       	and	r0, r0
    ba6e:	49 f0       	breq	.+18     	; 0xba82 <strstr+0x30>
    ba70:	4d 91       	ld	r20, X+
    ba72:	40 15       	cp	r20, r0
    ba74:	41 11       	cpse	r20, r1
    ba76:	c9 f3       	breq	.-14     	; 0xba6a <strstr+0x18>
    ba78:	fb 01       	movw	r30, r22
    ba7a:	41 11       	cpse	r20, r1
    ba7c:	ef cf       	rjmp	.-34     	; 0xba5c <strstr+0xa>
    ba7e:	81 e0       	ldi	r24, 0x01	; 1
    ba80:	90 e0       	ldi	r25, 0x00	; 0
    ba82:	01 97       	sbiw	r24, 0x01	; 1
    ba84:	08 95       	ret

0000ba86 <strtok_r>:
    ba86:	fa 01       	movw	r30, r20
    ba88:	a1 91       	ld	r26, Z+
    ba8a:	b0 81       	ld	r27, Z
    ba8c:	00 97       	sbiw	r24, 0x00	; 0
    ba8e:	19 f4       	brne	.+6      	; 0xba96 <strtok_r+0x10>
    ba90:	10 97       	sbiw	r26, 0x00	; 0
    ba92:	e1 f0       	breq	.+56     	; 0xbacc <strtok_r+0x46>
    ba94:	cd 01       	movw	r24, r26
    ba96:	dc 01       	movw	r26, r24
    ba98:	cd 01       	movw	r24, r26
    ba9a:	0d 90       	ld	r0, X+
    ba9c:	00 20       	and	r0, r0
    ba9e:	11 f4       	brne	.+4      	; 0xbaa4 <strtok_r+0x1e>
    baa0:	c0 01       	movw	r24, r0
    baa2:	13 c0       	rjmp	.+38     	; 0xbaca <strtok_r+0x44>
    baa4:	fb 01       	movw	r30, r22
    baa6:	21 91       	ld	r18, Z+
    baa8:	22 23       	and	r18, r18
    baaa:	19 f0       	breq	.+6      	; 0xbab2 <strtok_r+0x2c>
    baac:	20 15       	cp	r18, r0
    baae:	d9 f7       	brne	.-10     	; 0xbaa6 <strtok_r+0x20>
    bab0:	f3 cf       	rjmp	.-26     	; 0xba98 <strtok_r+0x12>
    bab2:	fb 01       	movw	r30, r22
    bab4:	21 91       	ld	r18, Z+
    bab6:	20 15       	cp	r18, r0
    bab8:	19 f4       	brne	.+6      	; 0xbac0 <strtok_r+0x3a>
    baba:	1e 92       	st	-X, r1
    babc:	11 96       	adiw	r26, 0x01	; 1
    babe:	06 c0       	rjmp	.+12     	; 0xbacc <strtok_r+0x46>
    bac0:	22 23       	and	r18, r18
    bac2:	c1 f7       	brne	.-16     	; 0xbab4 <strtok_r+0x2e>
    bac4:	0d 90       	ld	r0, X+
    bac6:	00 20       	and	r0, r0
    bac8:	a1 f7       	brne	.-24     	; 0xbab2 <strtok_r+0x2c>
    baca:	d0 01       	movw	r26, r0
    bacc:	fa 01       	movw	r30, r20
    bace:	a1 93       	st	Z+, r26
    bad0:	b0 83       	st	Z, r27
    bad2:	08 95       	ret

0000bad4 <strupr>:
    bad4:	dc 01       	movw	r26, r24
    bad6:	6c 91       	ld	r22, X
    bad8:	61 56       	subi	r22, 0x61	; 97
    bada:	6a 31       	cpi	r22, 0x1A	; 26
    badc:	08 f0       	brcs	.+2      	; 0xbae0 <strupr+0xc>
    bade:	60 5e       	subi	r22, 0xE0	; 224
    bae0:	6f 5b       	subi	r22, 0xBF	; 191
    bae2:	6d 93       	st	X+, r22
    bae4:	c1 f7       	brne	.-16     	; 0xbad6 <strupr+0x2>
    bae6:	08 95       	ret

0000bae8 <ltoa>:
    bae8:	fa 01       	movw	r30, r20
    baea:	cf 93       	push	r28
    baec:	ff 93       	push	r31
    baee:	ef 93       	push	r30
    baf0:	22 30       	cpi	r18, 0x02	; 2
    baf2:	44 f1       	brlt	.+80     	; 0xbb44 <ltoa+0x5c>
    baf4:	25 32       	cpi	r18, 0x25	; 37
    baf6:	34 f5       	brge	.+76     	; 0xbb44 <ltoa+0x5c>
    baf8:	c2 2f       	mov	r28, r18
    bafa:	e8 94       	clt
    bafc:	ca 30       	cpi	r28, 0x0A	; 10
    bafe:	49 f4       	brne	.+18     	; 0xbb12 <ltoa+0x2a>
    bb00:	97 fb       	bst	r25, 7
    bb02:	3e f4       	brtc	.+14     	; 0xbb12 <ltoa+0x2a>
    bb04:	90 95       	com	r25
    bb06:	80 95       	com	r24
    bb08:	70 95       	com	r23
    bb0a:	61 95       	neg	r22
    bb0c:	7f 4f       	sbci	r23, 0xFF	; 255
    bb0e:	8f 4f       	sbci	r24, 0xFF	; 255
    bb10:	9f 4f       	sbci	r25, 0xFF	; 255
    bb12:	2c 2f       	mov	r18, r28
    bb14:	33 27       	eor	r19, r19
    bb16:	44 27       	eor	r20, r20
    bb18:	55 27       	eor	r21, r21
    bb1a:	ff 93       	push	r31
    bb1c:	ef 93       	push	r30
    bb1e:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <__udivmodsi4>
    bb22:	ef 91       	pop	r30
    bb24:	ff 91       	pop	r31
    bb26:	60 5d       	subi	r22, 0xD0	; 208
    bb28:	6a 33       	cpi	r22, 0x3A	; 58
    bb2a:	0c f0       	brlt	.+2      	; 0xbb2e <ltoa+0x46>
    bb2c:	69 5d       	subi	r22, 0xD9	; 217
    bb2e:	61 93       	st	Z+, r22
    bb30:	b9 01       	movw	r22, r18
    bb32:	ca 01       	movw	r24, r20
    bb34:	60 50       	subi	r22, 0x00	; 0
    bb36:	70 40       	sbci	r23, 0x00	; 0
    bb38:	80 40       	sbci	r24, 0x00	; 0
    bb3a:	90 40       	sbci	r25, 0x00	; 0
    bb3c:	51 f7       	brne	.-44     	; 0xbb12 <ltoa+0x2a>
    bb3e:	16 f4       	brtc	.+4      	; 0xbb44 <ltoa+0x5c>
    bb40:	cd e2       	ldi	r28, 0x2D	; 45
    bb42:	c1 93       	st	Z+, r28
    bb44:	10 82       	st	Z, r1
    bb46:	8f 91       	pop	r24
    bb48:	9f 91       	pop	r25
    bb4a:	cf 91       	pop	r28
    bb4c:	0c 94 0f 60 	jmp	0xc01e	; 0xc01e <strrev>

0000bb50 <__mulsi_const_10>:
    bb50:	59 2f       	mov	r21, r25
    bb52:	48 2f       	mov	r20, r24
    bb54:	37 2f       	mov	r19, r23
    bb56:	26 2f       	mov	r18, r22
    bb58:	66 0f       	add	r22, r22
    bb5a:	77 1f       	adc	r23, r23
    bb5c:	88 1f       	adc	r24, r24
    bb5e:	99 1f       	adc	r25, r25
    bb60:	66 0f       	add	r22, r22
    bb62:	77 1f       	adc	r23, r23
    bb64:	88 1f       	adc	r24, r24
    bb66:	99 1f       	adc	r25, r25
    bb68:	62 0f       	add	r22, r18
    bb6a:	73 1f       	adc	r23, r19
    bb6c:	84 1f       	adc	r24, r20
    bb6e:	95 1f       	adc	r25, r21
    bb70:	66 0f       	add	r22, r22
    bb72:	77 1f       	adc	r23, r23
    bb74:	88 1f       	adc	r24, r24
    bb76:	99 1f       	adc	r25, r25
    bb78:	08 95       	ret

0000bb7a <__mulhi_const_10>:
    bb7a:	7a e0       	ldi	r23, 0x0A	; 10
    bb7c:	97 9f       	mul	r25, r23
    bb7e:	90 2d       	mov	r25, r0
    bb80:	87 9f       	mul	r24, r23
    bb82:	80 2d       	mov	r24, r0
    bb84:	91 0d       	add	r25, r1
    bb86:	11 24       	eor	r1, r1
    bb88:	08 95       	ret

0000bb8a <sprintf>:
    bb8a:	0f 93       	push	r16
    bb8c:	1f 93       	push	r17
    bb8e:	df 93       	push	r29
    bb90:	cf 93       	push	r28
    bb92:	cd b7       	in	r28, 0x3d	; 61
    bb94:	de b7       	in	r29, 0x3e	; 62
    bb96:	2e 97       	sbiw	r28, 0x0e	; 14
    bb98:	cd bf       	out	0x3d, r28	; 61
    bb9a:	de bf       	out	0x3e, r29	; 62
    bb9c:	0e 89       	ldd	r16, Y+22	; 0x16
    bb9e:	1f 89       	ldd	r17, Y+23	; 0x17
    bba0:	86 e0       	ldi	r24, 0x06	; 6
    bba2:	8c 83       	std	Y+4, r24	; 0x04
    bba4:	09 83       	std	Y+1, r16	; 0x01
    bba6:	1a 83       	std	Y+2, r17	; 0x02
    bba8:	8f ef       	ldi	r24, 0xFF	; 255
    bbaa:	9f e7       	ldi	r25, 0x7F	; 127
    bbac:	8d 83       	std	Y+5, r24	; 0x05
    bbae:	9e 83       	std	Y+6, r25	; 0x06
    bbb0:	9e 01       	movw	r18, r28
    bbb2:	26 5e       	subi	r18, 0xE6	; 230
    bbb4:	3f 4f       	sbci	r19, 0xFF	; 255
    bbb6:	ce 01       	movw	r24, r28
    bbb8:	01 96       	adiw	r24, 0x01	; 1
    bbba:	68 8d       	ldd	r22, Y+24	; 0x18
    bbbc:	79 8d       	ldd	r23, Y+25	; 0x19
    bbbe:	a9 01       	movw	r20, r18
    bbc0:	0e 94 f0 5d 	call	0xbbe0	; 0xbbe0 <vfprintf>
    bbc4:	2f 81       	ldd	r18, Y+7	; 0x07
    bbc6:	38 85       	ldd	r19, Y+8	; 0x08
    bbc8:	02 0f       	add	r16, r18
    bbca:	13 1f       	adc	r17, r19
    bbcc:	f8 01       	movw	r30, r16
    bbce:	10 82       	st	Z, r1
    bbd0:	2e 96       	adiw	r28, 0x0e	; 14
    bbd2:	cd bf       	out	0x3d, r28	; 61
    bbd4:	de bf       	out	0x3e, r29	; 62
    bbd6:	cf 91       	pop	r28
    bbd8:	df 91       	pop	r29
    bbda:	1f 91       	pop	r17
    bbdc:	0f 91       	pop	r16
    bbde:	08 95       	ret

0000bbe0 <vfprintf>:
    bbe0:	2f 92       	push	r2
    bbe2:	3f 92       	push	r3
    bbe4:	4f 92       	push	r4
    bbe6:	5f 92       	push	r5
    bbe8:	6f 92       	push	r6
    bbea:	7f 92       	push	r7
    bbec:	8f 92       	push	r8
    bbee:	9f 92       	push	r9
    bbf0:	af 92       	push	r10
    bbf2:	bf 92       	push	r11
    bbf4:	cf 92       	push	r12
    bbf6:	df 92       	push	r13
    bbf8:	ef 92       	push	r14
    bbfa:	ff 92       	push	r15
    bbfc:	0f 93       	push	r16
    bbfe:	1f 93       	push	r17
    bc00:	df 93       	push	r29
    bc02:	cf 93       	push	r28
    bc04:	cd b7       	in	r28, 0x3d	; 61
    bc06:	de b7       	in	r29, 0x3e	; 62
    bc08:	2b 97       	sbiw	r28, 0x0b	; 11
    bc0a:	cd bf       	out	0x3d, r28	; 61
    bc0c:	de bf       	out	0x3e, r29	; 62
    bc0e:	3c 01       	movw	r6, r24
    bc10:	2b 01       	movw	r4, r22
    bc12:	5a 01       	movw	r10, r20
    bc14:	fc 01       	movw	r30, r24
    bc16:	16 82       	std	Z+6, r1	; 0x06
    bc18:	17 82       	std	Z+7, r1	; 0x07
    bc1a:	83 81       	ldd	r24, Z+3	; 0x03
    bc1c:	81 fd       	sbrc	r24, 1
    bc1e:	03 c0       	rjmp	.+6      	; 0xbc26 <vfprintf+0x46>
    bc20:	6f ef       	ldi	r22, 0xFF	; 255
    bc22:	7f ef       	ldi	r23, 0xFF	; 255
    bc24:	c6 c1       	rjmp	.+908    	; 0xbfb2 <vfprintf+0x3d2>
    bc26:	9a e0       	ldi	r25, 0x0A	; 10
    bc28:	89 2e       	mov	r8, r25
    bc2a:	1e 01       	movw	r2, r28
    bc2c:	08 94       	sec
    bc2e:	21 1c       	adc	r2, r1
    bc30:	31 1c       	adc	r3, r1
    bc32:	f3 01       	movw	r30, r6
    bc34:	23 81       	ldd	r18, Z+3	; 0x03
    bc36:	f2 01       	movw	r30, r4
    bc38:	23 fd       	sbrc	r18, 3
    bc3a:	85 91       	lpm	r24, Z+
    bc3c:	23 ff       	sbrs	r18, 3
    bc3e:	81 91       	ld	r24, Z+
    bc40:	2f 01       	movw	r4, r30
    bc42:	88 23       	and	r24, r24
    bc44:	09 f4       	brne	.+2      	; 0xbc48 <vfprintf+0x68>
    bc46:	b2 c1       	rjmp	.+868    	; 0xbfac <vfprintf+0x3cc>
    bc48:	85 32       	cpi	r24, 0x25	; 37
    bc4a:	39 f4       	brne	.+14     	; 0xbc5a <vfprintf+0x7a>
    bc4c:	23 fd       	sbrc	r18, 3
    bc4e:	85 91       	lpm	r24, Z+
    bc50:	23 ff       	sbrs	r18, 3
    bc52:	81 91       	ld	r24, Z+
    bc54:	2f 01       	movw	r4, r30
    bc56:	85 32       	cpi	r24, 0x25	; 37
    bc58:	29 f4       	brne	.+10     	; 0xbc64 <vfprintf+0x84>
    bc5a:	90 e0       	ldi	r25, 0x00	; 0
    bc5c:	b3 01       	movw	r22, r6
    bc5e:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bc62:	e7 cf       	rjmp	.-50     	; 0xbc32 <vfprintf+0x52>
    bc64:	98 2f       	mov	r25, r24
    bc66:	ff 24       	eor	r15, r15
    bc68:	ee 24       	eor	r14, r14
    bc6a:	99 24       	eor	r9, r9
    bc6c:	ff e1       	ldi	r31, 0x1F	; 31
    bc6e:	ff 15       	cp	r31, r15
    bc70:	d0 f0       	brcs	.+52     	; 0xbca6 <vfprintf+0xc6>
    bc72:	9b 32       	cpi	r25, 0x2B	; 43
    bc74:	69 f0       	breq	.+26     	; 0xbc90 <vfprintf+0xb0>
    bc76:	9c 32       	cpi	r25, 0x2C	; 44
    bc78:	28 f4       	brcc	.+10     	; 0xbc84 <vfprintf+0xa4>
    bc7a:	90 32       	cpi	r25, 0x20	; 32
    bc7c:	59 f0       	breq	.+22     	; 0xbc94 <vfprintf+0xb4>
    bc7e:	93 32       	cpi	r25, 0x23	; 35
    bc80:	91 f4       	brne	.+36     	; 0xbca6 <vfprintf+0xc6>
    bc82:	0e c0       	rjmp	.+28     	; 0xbca0 <vfprintf+0xc0>
    bc84:	9d 32       	cpi	r25, 0x2D	; 45
    bc86:	49 f0       	breq	.+18     	; 0xbc9a <vfprintf+0xba>
    bc88:	90 33       	cpi	r25, 0x30	; 48
    bc8a:	69 f4       	brne	.+26     	; 0xbca6 <vfprintf+0xc6>
    bc8c:	41 e0       	ldi	r20, 0x01	; 1
    bc8e:	24 c0       	rjmp	.+72     	; 0xbcd8 <vfprintf+0xf8>
    bc90:	52 e0       	ldi	r21, 0x02	; 2
    bc92:	f5 2a       	or	r15, r21
    bc94:	84 e0       	ldi	r24, 0x04	; 4
    bc96:	f8 2a       	or	r15, r24
    bc98:	28 c0       	rjmp	.+80     	; 0xbcea <vfprintf+0x10a>
    bc9a:	98 e0       	ldi	r25, 0x08	; 8
    bc9c:	f9 2a       	or	r15, r25
    bc9e:	25 c0       	rjmp	.+74     	; 0xbcea <vfprintf+0x10a>
    bca0:	e0 e1       	ldi	r30, 0x10	; 16
    bca2:	fe 2a       	or	r15, r30
    bca4:	22 c0       	rjmp	.+68     	; 0xbcea <vfprintf+0x10a>
    bca6:	f7 fc       	sbrc	r15, 7
    bca8:	29 c0       	rjmp	.+82     	; 0xbcfc <vfprintf+0x11c>
    bcaa:	89 2f       	mov	r24, r25
    bcac:	80 53       	subi	r24, 0x30	; 48
    bcae:	8a 30       	cpi	r24, 0x0A	; 10
    bcb0:	70 f4       	brcc	.+28     	; 0xbcce <vfprintf+0xee>
    bcb2:	f6 fe       	sbrs	r15, 6
    bcb4:	05 c0       	rjmp	.+10     	; 0xbcc0 <vfprintf+0xe0>
    bcb6:	98 9c       	mul	r9, r8
    bcb8:	90 2c       	mov	r9, r0
    bcba:	11 24       	eor	r1, r1
    bcbc:	98 0e       	add	r9, r24
    bcbe:	15 c0       	rjmp	.+42     	; 0xbcea <vfprintf+0x10a>
    bcc0:	e8 9c       	mul	r14, r8
    bcc2:	e0 2c       	mov	r14, r0
    bcc4:	11 24       	eor	r1, r1
    bcc6:	e8 0e       	add	r14, r24
    bcc8:	f0 e2       	ldi	r31, 0x20	; 32
    bcca:	ff 2a       	or	r15, r31
    bccc:	0e c0       	rjmp	.+28     	; 0xbcea <vfprintf+0x10a>
    bcce:	9e 32       	cpi	r25, 0x2E	; 46
    bcd0:	29 f4       	brne	.+10     	; 0xbcdc <vfprintf+0xfc>
    bcd2:	f6 fc       	sbrc	r15, 6
    bcd4:	6b c1       	rjmp	.+726    	; 0xbfac <vfprintf+0x3cc>
    bcd6:	40 e4       	ldi	r20, 0x40	; 64
    bcd8:	f4 2a       	or	r15, r20
    bcda:	07 c0       	rjmp	.+14     	; 0xbcea <vfprintf+0x10a>
    bcdc:	9c 36       	cpi	r25, 0x6C	; 108
    bcde:	19 f4       	brne	.+6      	; 0xbce6 <vfprintf+0x106>
    bce0:	50 e8       	ldi	r21, 0x80	; 128
    bce2:	f5 2a       	or	r15, r21
    bce4:	02 c0       	rjmp	.+4      	; 0xbcea <vfprintf+0x10a>
    bce6:	98 36       	cpi	r25, 0x68	; 104
    bce8:	49 f4       	brne	.+18     	; 0xbcfc <vfprintf+0x11c>
    bcea:	f2 01       	movw	r30, r4
    bcec:	23 fd       	sbrc	r18, 3
    bcee:	95 91       	lpm	r25, Z+
    bcf0:	23 ff       	sbrs	r18, 3
    bcf2:	91 91       	ld	r25, Z+
    bcf4:	2f 01       	movw	r4, r30
    bcf6:	99 23       	and	r25, r25
    bcf8:	09 f0       	breq	.+2      	; 0xbcfc <vfprintf+0x11c>
    bcfa:	b8 cf       	rjmp	.-144    	; 0xbc6c <vfprintf+0x8c>
    bcfc:	89 2f       	mov	r24, r25
    bcfe:	85 54       	subi	r24, 0x45	; 69
    bd00:	83 30       	cpi	r24, 0x03	; 3
    bd02:	18 f0       	brcs	.+6      	; 0xbd0a <vfprintf+0x12a>
    bd04:	80 52       	subi	r24, 0x20	; 32
    bd06:	83 30       	cpi	r24, 0x03	; 3
    bd08:	38 f4       	brcc	.+14     	; 0xbd18 <vfprintf+0x138>
    bd0a:	44 e0       	ldi	r20, 0x04	; 4
    bd0c:	50 e0       	ldi	r21, 0x00	; 0
    bd0e:	a4 0e       	add	r10, r20
    bd10:	b5 1e       	adc	r11, r21
    bd12:	5f e3       	ldi	r21, 0x3F	; 63
    bd14:	59 83       	std	Y+1, r21	; 0x01
    bd16:	0f c0       	rjmp	.+30     	; 0xbd36 <vfprintf+0x156>
    bd18:	93 36       	cpi	r25, 0x63	; 99
    bd1a:	31 f0       	breq	.+12     	; 0xbd28 <vfprintf+0x148>
    bd1c:	93 37       	cpi	r25, 0x73	; 115
    bd1e:	79 f0       	breq	.+30     	; 0xbd3e <vfprintf+0x15e>
    bd20:	93 35       	cpi	r25, 0x53	; 83
    bd22:	09 f0       	breq	.+2      	; 0xbd26 <vfprintf+0x146>
    bd24:	56 c0       	rjmp	.+172    	; 0xbdd2 <vfprintf+0x1f2>
    bd26:	20 c0       	rjmp	.+64     	; 0xbd68 <vfprintf+0x188>
    bd28:	f5 01       	movw	r30, r10
    bd2a:	80 81       	ld	r24, Z
    bd2c:	89 83       	std	Y+1, r24	; 0x01
    bd2e:	42 e0       	ldi	r20, 0x02	; 2
    bd30:	50 e0       	ldi	r21, 0x00	; 0
    bd32:	a4 0e       	add	r10, r20
    bd34:	b5 1e       	adc	r11, r21
    bd36:	61 01       	movw	r12, r2
    bd38:	01 e0       	ldi	r16, 0x01	; 1
    bd3a:	10 e0       	ldi	r17, 0x00	; 0
    bd3c:	12 c0       	rjmp	.+36     	; 0xbd62 <vfprintf+0x182>
    bd3e:	f5 01       	movw	r30, r10
    bd40:	c0 80       	ld	r12, Z
    bd42:	d1 80       	ldd	r13, Z+1	; 0x01
    bd44:	f6 fc       	sbrc	r15, 6
    bd46:	03 c0       	rjmp	.+6      	; 0xbd4e <vfprintf+0x16e>
    bd48:	6f ef       	ldi	r22, 0xFF	; 255
    bd4a:	7f ef       	ldi	r23, 0xFF	; 255
    bd4c:	02 c0       	rjmp	.+4      	; 0xbd52 <vfprintf+0x172>
    bd4e:	69 2d       	mov	r22, r9
    bd50:	70 e0       	ldi	r23, 0x00	; 0
    bd52:	42 e0       	ldi	r20, 0x02	; 2
    bd54:	50 e0       	ldi	r21, 0x00	; 0
    bd56:	a4 0e       	add	r10, r20
    bd58:	b5 1e       	adc	r11, r21
    bd5a:	c6 01       	movw	r24, r12
    bd5c:	0e 94 04 60 	call	0xc008	; 0xc008 <strnlen>
    bd60:	8c 01       	movw	r16, r24
    bd62:	5f e7       	ldi	r21, 0x7F	; 127
    bd64:	f5 22       	and	r15, r21
    bd66:	14 c0       	rjmp	.+40     	; 0xbd90 <vfprintf+0x1b0>
    bd68:	f5 01       	movw	r30, r10
    bd6a:	c0 80       	ld	r12, Z
    bd6c:	d1 80       	ldd	r13, Z+1	; 0x01
    bd6e:	f6 fc       	sbrc	r15, 6
    bd70:	03 c0       	rjmp	.+6      	; 0xbd78 <vfprintf+0x198>
    bd72:	6f ef       	ldi	r22, 0xFF	; 255
    bd74:	7f ef       	ldi	r23, 0xFF	; 255
    bd76:	02 c0       	rjmp	.+4      	; 0xbd7c <vfprintf+0x19c>
    bd78:	69 2d       	mov	r22, r9
    bd7a:	70 e0       	ldi	r23, 0x00	; 0
    bd7c:	42 e0       	ldi	r20, 0x02	; 2
    bd7e:	50 e0       	ldi	r21, 0x00	; 0
    bd80:	a4 0e       	add	r10, r20
    bd82:	b5 1e       	adc	r11, r21
    bd84:	c6 01       	movw	r24, r12
    bd86:	0e 94 f0 5f 	call	0xbfe0	; 0xbfe0 <strnlen_P>
    bd8a:	8c 01       	movw	r16, r24
    bd8c:	50 e8       	ldi	r21, 0x80	; 128
    bd8e:	f5 2a       	or	r15, r21
    bd90:	f3 fe       	sbrs	r15, 3
    bd92:	07 c0       	rjmp	.+14     	; 0xbda2 <vfprintf+0x1c2>
    bd94:	1a c0       	rjmp	.+52     	; 0xbdca <vfprintf+0x1ea>
    bd96:	80 e2       	ldi	r24, 0x20	; 32
    bd98:	90 e0       	ldi	r25, 0x00	; 0
    bd9a:	b3 01       	movw	r22, r6
    bd9c:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bda0:	ea 94       	dec	r14
    bda2:	8e 2d       	mov	r24, r14
    bda4:	90 e0       	ldi	r25, 0x00	; 0
    bda6:	08 17       	cp	r16, r24
    bda8:	19 07       	cpc	r17, r25
    bdaa:	a8 f3       	brcs	.-22     	; 0xbd96 <vfprintf+0x1b6>
    bdac:	0e c0       	rjmp	.+28     	; 0xbdca <vfprintf+0x1ea>
    bdae:	f6 01       	movw	r30, r12
    bdb0:	f7 fc       	sbrc	r15, 7
    bdb2:	85 91       	lpm	r24, Z+
    bdb4:	f7 fe       	sbrs	r15, 7
    bdb6:	81 91       	ld	r24, Z+
    bdb8:	6f 01       	movw	r12, r30
    bdba:	90 e0       	ldi	r25, 0x00	; 0
    bdbc:	b3 01       	movw	r22, r6
    bdbe:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bdc2:	e1 10       	cpse	r14, r1
    bdc4:	ea 94       	dec	r14
    bdc6:	01 50       	subi	r16, 0x01	; 1
    bdc8:	10 40       	sbci	r17, 0x00	; 0
    bdca:	01 15       	cp	r16, r1
    bdcc:	11 05       	cpc	r17, r1
    bdce:	79 f7       	brne	.-34     	; 0xbdae <vfprintf+0x1ce>
    bdd0:	ea c0       	rjmp	.+468    	; 0xbfa6 <vfprintf+0x3c6>
    bdd2:	94 36       	cpi	r25, 0x64	; 100
    bdd4:	11 f0       	breq	.+4      	; 0xbdda <vfprintf+0x1fa>
    bdd6:	99 36       	cpi	r25, 0x69	; 105
    bdd8:	69 f5       	brne	.+90     	; 0xbe34 <vfprintf+0x254>
    bdda:	f7 fe       	sbrs	r15, 7
    bddc:	08 c0       	rjmp	.+16     	; 0xbdee <vfprintf+0x20e>
    bdde:	f5 01       	movw	r30, r10
    bde0:	20 81       	ld	r18, Z
    bde2:	31 81       	ldd	r19, Z+1	; 0x01
    bde4:	42 81       	ldd	r20, Z+2	; 0x02
    bde6:	53 81       	ldd	r21, Z+3	; 0x03
    bde8:	84 e0       	ldi	r24, 0x04	; 4
    bdea:	90 e0       	ldi	r25, 0x00	; 0
    bdec:	0a c0       	rjmp	.+20     	; 0xbe02 <vfprintf+0x222>
    bdee:	f5 01       	movw	r30, r10
    bdf0:	80 81       	ld	r24, Z
    bdf2:	91 81       	ldd	r25, Z+1	; 0x01
    bdf4:	9c 01       	movw	r18, r24
    bdf6:	44 27       	eor	r20, r20
    bdf8:	37 fd       	sbrc	r19, 7
    bdfa:	40 95       	com	r20
    bdfc:	54 2f       	mov	r21, r20
    bdfe:	82 e0       	ldi	r24, 0x02	; 2
    be00:	90 e0       	ldi	r25, 0x00	; 0
    be02:	a8 0e       	add	r10, r24
    be04:	b9 1e       	adc	r11, r25
    be06:	9f e6       	ldi	r25, 0x6F	; 111
    be08:	f9 22       	and	r15, r25
    be0a:	57 ff       	sbrs	r21, 7
    be0c:	09 c0       	rjmp	.+18     	; 0xbe20 <vfprintf+0x240>
    be0e:	50 95       	com	r21
    be10:	40 95       	com	r20
    be12:	30 95       	com	r19
    be14:	21 95       	neg	r18
    be16:	3f 4f       	sbci	r19, 0xFF	; 255
    be18:	4f 4f       	sbci	r20, 0xFF	; 255
    be1a:	5f 4f       	sbci	r21, 0xFF	; 255
    be1c:	e0 e8       	ldi	r30, 0x80	; 128
    be1e:	fe 2a       	or	r15, r30
    be20:	ca 01       	movw	r24, r20
    be22:	b9 01       	movw	r22, r18
    be24:	a1 01       	movw	r20, r2
    be26:	2a e0       	ldi	r18, 0x0A	; 10
    be28:	30 e0       	ldi	r19, 0x00	; 0
    be2a:	0e 94 4b 60 	call	0xc096	; 0xc096 <__ultoa_invert>
    be2e:	d8 2e       	mov	r13, r24
    be30:	d2 18       	sub	r13, r2
    be32:	40 c0       	rjmp	.+128    	; 0xbeb4 <vfprintf+0x2d4>
    be34:	95 37       	cpi	r25, 0x75	; 117
    be36:	29 f4       	brne	.+10     	; 0xbe42 <vfprintf+0x262>
    be38:	1f 2d       	mov	r17, r15
    be3a:	1f 7e       	andi	r17, 0xEF	; 239
    be3c:	2a e0       	ldi	r18, 0x0A	; 10
    be3e:	30 e0       	ldi	r19, 0x00	; 0
    be40:	1d c0       	rjmp	.+58     	; 0xbe7c <vfprintf+0x29c>
    be42:	1f 2d       	mov	r17, r15
    be44:	19 7f       	andi	r17, 0xF9	; 249
    be46:	9f 36       	cpi	r25, 0x6F	; 111
    be48:	61 f0       	breq	.+24     	; 0xbe62 <vfprintf+0x282>
    be4a:	90 37       	cpi	r25, 0x70	; 112
    be4c:	20 f4       	brcc	.+8      	; 0xbe56 <vfprintf+0x276>
    be4e:	98 35       	cpi	r25, 0x58	; 88
    be50:	09 f0       	breq	.+2      	; 0xbe54 <vfprintf+0x274>
    be52:	ac c0       	rjmp	.+344    	; 0xbfac <vfprintf+0x3cc>
    be54:	0f c0       	rjmp	.+30     	; 0xbe74 <vfprintf+0x294>
    be56:	90 37       	cpi	r25, 0x70	; 112
    be58:	39 f0       	breq	.+14     	; 0xbe68 <vfprintf+0x288>
    be5a:	98 37       	cpi	r25, 0x78	; 120
    be5c:	09 f0       	breq	.+2      	; 0xbe60 <vfprintf+0x280>
    be5e:	a6 c0       	rjmp	.+332    	; 0xbfac <vfprintf+0x3cc>
    be60:	04 c0       	rjmp	.+8      	; 0xbe6a <vfprintf+0x28a>
    be62:	28 e0       	ldi	r18, 0x08	; 8
    be64:	30 e0       	ldi	r19, 0x00	; 0
    be66:	0a c0       	rjmp	.+20     	; 0xbe7c <vfprintf+0x29c>
    be68:	10 61       	ori	r17, 0x10	; 16
    be6a:	14 fd       	sbrc	r17, 4
    be6c:	14 60       	ori	r17, 0x04	; 4
    be6e:	20 e1       	ldi	r18, 0x10	; 16
    be70:	30 e0       	ldi	r19, 0x00	; 0
    be72:	04 c0       	rjmp	.+8      	; 0xbe7c <vfprintf+0x29c>
    be74:	14 fd       	sbrc	r17, 4
    be76:	16 60       	ori	r17, 0x06	; 6
    be78:	20 e1       	ldi	r18, 0x10	; 16
    be7a:	32 e0       	ldi	r19, 0x02	; 2
    be7c:	17 ff       	sbrs	r17, 7
    be7e:	08 c0       	rjmp	.+16     	; 0xbe90 <vfprintf+0x2b0>
    be80:	f5 01       	movw	r30, r10
    be82:	60 81       	ld	r22, Z
    be84:	71 81       	ldd	r23, Z+1	; 0x01
    be86:	82 81       	ldd	r24, Z+2	; 0x02
    be88:	93 81       	ldd	r25, Z+3	; 0x03
    be8a:	44 e0       	ldi	r20, 0x04	; 4
    be8c:	50 e0       	ldi	r21, 0x00	; 0
    be8e:	08 c0       	rjmp	.+16     	; 0xbea0 <vfprintf+0x2c0>
    be90:	f5 01       	movw	r30, r10
    be92:	80 81       	ld	r24, Z
    be94:	91 81       	ldd	r25, Z+1	; 0x01
    be96:	bc 01       	movw	r22, r24
    be98:	80 e0       	ldi	r24, 0x00	; 0
    be9a:	90 e0       	ldi	r25, 0x00	; 0
    be9c:	42 e0       	ldi	r20, 0x02	; 2
    be9e:	50 e0       	ldi	r21, 0x00	; 0
    bea0:	a4 0e       	add	r10, r20
    bea2:	b5 1e       	adc	r11, r21
    bea4:	a1 01       	movw	r20, r2
    bea6:	0e 94 4b 60 	call	0xc096	; 0xc096 <__ultoa_invert>
    beaa:	d8 2e       	mov	r13, r24
    beac:	d2 18       	sub	r13, r2
    beae:	8f e7       	ldi	r24, 0x7F	; 127
    beb0:	f8 2e       	mov	r15, r24
    beb2:	f1 22       	and	r15, r17
    beb4:	f6 fe       	sbrs	r15, 6
    beb6:	0b c0       	rjmp	.+22     	; 0xbece <vfprintf+0x2ee>
    beb8:	5e ef       	ldi	r21, 0xFE	; 254
    beba:	f5 22       	and	r15, r21
    bebc:	d9 14       	cp	r13, r9
    bebe:	38 f4       	brcc	.+14     	; 0xbece <vfprintf+0x2ee>
    bec0:	f4 fe       	sbrs	r15, 4
    bec2:	07 c0       	rjmp	.+14     	; 0xbed2 <vfprintf+0x2f2>
    bec4:	f2 fc       	sbrc	r15, 2
    bec6:	05 c0       	rjmp	.+10     	; 0xbed2 <vfprintf+0x2f2>
    bec8:	8f ee       	ldi	r24, 0xEF	; 239
    beca:	f8 22       	and	r15, r24
    becc:	02 c0       	rjmp	.+4      	; 0xbed2 <vfprintf+0x2f2>
    bece:	1d 2d       	mov	r17, r13
    bed0:	01 c0       	rjmp	.+2      	; 0xbed4 <vfprintf+0x2f4>
    bed2:	19 2d       	mov	r17, r9
    bed4:	f4 fe       	sbrs	r15, 4
    bed6:	0d c0       	rjmp	.+26     	; 0xbef2 <vfprintf+0x312>
    bed8:	fe 01       	movw	r30, r28
    beda:	ed 0d       	add	r30, r13
    bedc:	f1 1d       	adc	r31, r1
    bede:	80 81       	ld	r24, Z
    bee0:	80 33       	cpi	r24, 0x30	; 48
    bee2:	19 f4       	brne	.+6      	; 0xbeea <vfprintf+0x30a>
    bee4:	99 ee       	ldi	r25, 0xE9	; 233
    bee6:	f9 22       	and	r15, r25
    bee8:	08 c0       	rjmp	.+16     	; 0xbefa <vfprintf+0x31a>
    beea:	1f 5f       	subi	r17, 0xFF	; 255
    beec:	f2 fe       	sbrs	r15, 2
    beee:	05 c0       	rjmp	.+10     	; 0xbefa <vfprintf+0x31a>
    bef0:	03 c0       	rjmp	.+6      	; 0xbef8 <vfprintf+0x318>
    bef2:	8f 2d       	mov	r24, r15
    bef4:	86 78       	andi	r24, 0x86	; 134
    bef6:	09 f0       	breq	.+2      	; 0xbefa <vfprintf+0x31a>
    bef8:	1f 5f       	subi	r17, 0xFF	; 255
    befa:	0f 2d       	mov	r16, r15
    befc:	f3 fc       	sbrc	r15, 3
    befe:	14 c0       	rjmp	.+40     	; 0xbf28 <vfprintf+0x348>
    bf00:	f0 fe       	sbrs	r15, 0
    bf02:	0f c0       	rjmp	.+30     	; 0xbf22 <vfprintf+0x342>
    bf04:	1e 15       	cp	r17, r14
    bf06:	10 f0       	brcs	.+4      	; 0xbf0c <vfprintf+0x32c>
    bf08:	9d 2c       	mov	r9, r13
    bf0a:	0b c0       	rjmp	.+22     	; 0xbf22 <vfprintf+0x342>
    bf0c:	9d 2c       	mov	r9, r13
    bf0e:	9e 0c       	add	r9, r14
    bf10:	91 1a       	sub	r9, r17
    bf12:	1e 2d       	mov	r17, r14
    bf14:	06 c0       	rjmp	.+12     	; 0xbf22 <vfprintf+0x342>
    bf16:	80 e2       	ldi	r24, 0x20	; 32
    bf18:	90 e0       	ldi	r25, 0x00	; 0
    bf1a:	b3 01       	movw	r22, r6
    bf1c:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bf20:	1f 5f       	subi	r17, 0xFF	; 255
    bf22:	1e 15       	cp	r17, r14
    bf24:	c0 f3       	brcs	.-16     	; 0xbf16 <vfprintf+0x336>
    bf26:	04 c0       	rjmp	.+8      	; 0xbf30 <vfprintf+0x350>
    bf28:	1e 15       	cp	r17, r14
    bf2a:	10 f4       	brcc	.+4      	; 0xbf30 <vfprintf+0x350>
    bf2c:	e1 1a       	sub	r14, r17
    bf2e:	01 c0       	rjmp	.+2      	; 0xbf32 <vfprintf+0x352>
    bf30:	ee 24       	eor	r14, r14
    bf32:	04 ff       	sbrs	r16, 4
    bf34:	0f c0       	rjmp	.+30     	; 0xbf54 <vfprintf+0x374>
    bf36:	80 e3       	ldi	r24, 0x30	; 48
    bf38:	90 e0       	ldi	r25, 0x00	; 0
    bf3a:	b3 01       	movw	r22, r6
    bf3c:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bf40:	02 ff       	sbrs	r16, 2
    bf42:	1d c0       	rjmp	.+58     	; 0xbf7e <vfprintf+0x39e>
    bf44:	01 fd       	sbrc	r16, 1
    bf46:	03 c0       	rjmp	.+6      	; 0xbf4e <vfprintf+0x36e>
    bf48:	88 e7       	ldi	r24, 0x78	; 120
    bf4a:	90 e0       	ldi	r25, 0x00	; 0
    bf4c:	0e c0       	rjmp	.+28     	; 0xbf6a <vfprintf+0x38a>
    bf4e:	88 e5       	ldi	r24, 0x58	; 88
    bf50:	90 e0       	ldi	r25, 0x00	; 0
    bf52:	0b c0       	rjmp	.+22     	; 0xbf6a <vfprintf+0x38a>
    bf54:	80 2f       	mov	r24, r16
    bf56:	86 78       	andi	r24, 0x86	; 134
    bf58:	91 f0       	breq	.+36     	; 0xbf7e <vfprintf+0x39e>
    bf5a:	01 ff       	sbrs	r16, 1
    bf5c:	02 c0       	rjmp	.+4      	; 0xbf62 <vfprintf+0x382>
    bf5e:	8b e2       	ldi	r24, 0x2B	; 43
    bf60:	01 c0       	rjmp	.+2      	; 0xbf64 <vfprintf+0x384>
    bf62:	80 e2       	ldi	r24, 0x20	; 32
    bf64:	f7 fc       	sbrc	r15, 7
    bf66:	8d e2       	ldi	r24, 0x2D	; 45
    bf68:	90 e0       	ldi	r25, 0x00	; 0
    bf6a:	b3 01       	movw	r22, r6
    bf6c:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bf70:	06 c0       	rjmp	.+12     	; 0xbf7e <vfprintf+0x39e>
    bf72:	80 e3       	ldi	r24, 0x30	; 48
    bf74:	90 e0       	ldi	r25, 0x00	; 0
    bf76:	b3 01       	movw	r22, r6
    bf78:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bf7c:	9a 94       	dec	r9
    bf7e:	d9 14       	cp	r13, r9
    bf80:	c0 f3       	brcs	.-16     	; 0xbf72 <vfprintf+0x392>
    bf82:	da 94       	dec	r13
    bf84:	f1 01       	movw	r30, r2
    bf86:	ed 0d       	add	r30, r13
    bf88:	f1 1d       	adc	r31, r1
    bf8a:	80 81       	ld	r24, Z
    bf8c:	90 e0       	ldi	r25, 0x00	; 0
    bf8e:	b3 01       	movw	r22, r6
    bf90:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bf94:	dd 20       	and	r13, r13
    bf96:	a9 f7       	brne	.-22     	; 0xbf82 <vfprintf+0x3a2>
    bf98:	06 c0       	rjmp	.+12     	; 0xbfa6 <vfprintf+0x3c6>
    bf9a:	80 e2       	ldi	r24, 0x20	; 32
    bf9c:	90 e0       	ldi	r25, 0x00	; 0
    bf9e:	b3 01       	movw	r22, r6
    bfa0:	0e 94 1f 60 	call	0xc03e	; 0xc03e <fputc>
    bfa4:	ea 94       	dec	r14
    bfa6:	ee 20       	and	r14, r14
    bfa8:	c1 f7       	brne	.-16     	; 0xbf9a <vfprintf+0x3ba>
    bfaa:	43 ce       	rjmp	.-890    	; 0xbc32 <vfprintf+0x52>
    bfac:	f3 01       	movw	r30, r6
    bfae:	66 81       	ldd	r22, Z+6	; 0x06
    bfb0:	77 81       	ldd	r23, Z+7	; 0x07
    bfb2:	cb 01       	movw	r24, r22
    bfb4:	2b 96       	adiw	r28, 0x0b	; 11
    bfb6:	cd bf       	out	0x3d, r28	; 61
    bfb8:	de bf       	out	0x3e, r29	; 62
    bfba:	cf 91       	pop	r28
    bfbc:	df 91       	pop	r29
    bfbe:	1f 91       	pop	r17
    bfc0:	0f 91       	pop	r16
    bfc2:	ff 90       	pop	r15
    bfc4:	ef 90       	pop	r14
    bfc6:	df 90       	pop	r13
    bfc8:	cf 90       	pop	r12
    bfca:	bf 90       	pop	r11
    bfcc:	af 90       	pop	r10
    bfce:	9f 90       	pop	r9
    bfd0:	8f 90       	pop	r8
    bfd2:	7f 90       	pop	r7
    bfd4:	6f 90       	pop	r6
    bfd6:	5f 90       	pop	r5
    bfd8:	4f 90       	pop	r4
    bfda:	3f 90       	pop	r3
    bfdc:	2f 90       	pop	r2
    bfde:	08 95       	ret

0000bfe0 <strnlen_P>:
    bfe0:	fc 01       	movw	r30, r24
    bfe2:	05 90       	lpm	r0, Z+
    bfe4:	61 50       	subi	r22, 0x01	; 1
    bfe6:	70 40       	sbci	r23, 0x00	; 0
    bfe8:	01 10       	cpse	r0, r1
    bfea:	d8 f7       	brcc	.-10     	; 0xbfe2 <strnlen_P+0x2>
    bfec:	80 95       	com	r24
    bfee:	90 95       	com	r25
    bff0:	8e 0f       	add	r24, r30
    bff2:	9f 1f       	adc	r25, r31
    bff4:	08 95       	ret

0000bff6 <memcpy>:
    bff6:	fb 01       	movw	r30, r22
    bff8:	dc 01       	movw	r26, r24
    bffa:	02 c0       	rjmp	.+4      	; 0xc000 <memcpy+0xa>
    bffc:	01 90       	ld	r0, Z+
    bffe:	0d 92       	st	X+, r0
    c000:	41 50       	subi	r20, 0x01	; 1
    c002:	50 40       	sbci	r21, 0x00	; 0
    c004:	d8 f7       	brcc	.-10     	; 0xbffc <memcpy+0x6>
    c006:	08 95       	ret

0000c008 <strnlen>:
    c008:	fc 01       	movw	r30, r24
    c00a:	61 50       	subi	r22, 0x01	; 1
    c00c:	70 40       	sbci	r23, 0x00	; 0
    c00e:	01 90       	ld	r0, Z+
    c010:	01 10       	cpse	r0, r1
    c012:	d8 f7       	brcc	.-10     	; 0xc00a <strnlen+0x2>
    c014:	80 95       	com	r24
    c016:	90 95       	com	r25
    c018:	8e 0f       	add	r24, r30
    c01a:	9f 1f       	adc	r25, r31
    c01c:	08 95       	ret

0000c01e <strrev>:
    c01e:	dc 01       	movw	r26, r24
    c020:	fc 01       	movw	r30, r24
    c022:	67 2f       	mov	r22, r23
    c024:	71 91       	ld	r23, Z+
    c026:	77 23       	and	r23, r23
    c028:	e1 f7       	brne	.-8      	; 0xc022 <strrev+0x4>
    c02a:	32 97       	sbiw	r30, 0x02	; 2
    c02c:	04 c0       	rjmp	.+8      	; 0xc036 <strrev+0x18>
    c02e:	7c 91       	ld	r23, X
    c030:	6d 93       	st	X+, r22
    c032:	70 83       	st	Z, r23
    c034:	62 91       	ld	r22, -Z
    c036:	ae 17       	cp	r26, r30
    c038:	bf 07       	cpc	r27, r31
    c03a:	c8 f3       	brcs	.-14     	; 0xc02e <strrev+0x10>
    c03c:	08 95       	ret

0000c03e <fputc>:
    c03e:	0f 93       	push	r16
    c040:	1f 93       	push	r17
    c042:	cf 93       	push	r28
    c044:	df 93       	push	r29
    c046:	8c 01       	movw	r16, r24
    c048:	eb 01       	movw	r28, r22
    c04a:	8b 81       	ldd	r24, Y+3	; 0x03
    c04c:	81 ff       	sbrs	r24, 1
    c04e:	1b c0       	rjmp	.+54     	; 0xc086 <fputc+0x48>
    c050:	82 ff       	sbrs	r24, 2
    c052:	0d c0       	rjmp	.+26     	; 0xc06e <fputc+0x30>
    c054:	2e 81       	ldd	r18, Y+6	; 0x06
    c056:	3f 81       	ldd	r19, Y+7	; 0x07
    c058:	8c 81       	ldd	r24, Y+4	; 0x04
    c05a:	9d 81       	ldd	r25, Y+5	; 0x05
    c05c:	28 17       	cp	r18, r24
    c05e:	39 07       	cpc	r19, r25
    c060:	64 f4       	brge	.+24     	; 0xc07a <fputc+0x3c>
    c062:	e8 81       	ld	r30, Y
    c064:	f9 81       	ldd	r31, Y+1	; 0x01
    c066:	01 93       	st	Z+, r16
    c068:	e8 83       	st	Y, r30
    c06a:	f9 83       	std	Y+1, r31	; 0x01
    c06c:	06 c0       	rjmp	.+12     	; 0xc07a <fputc+0x3c>
    c06e:	e8 85       	ldd	r30, Y+8	; 0x08
    c070:	f9 85       	ldd	r31, Y+9	; 0x09
    c072:	80 2f       	mov	r24, r16
    c074:	19 95       	eicall
    c076:	89 2b       	or	r24, r25
    c078:	31 f4       	brne	.+12     	; 0xc086 <fputc+0x48>
    c07a:	8e 81       	ldd	r24, Y+6	; 0x06
    c07c:	9f 81       	ldd	r25, Y+7	; 0x07
    c07e:	01 96       	adiw	r24, 0x01	; 1
    c080:	8e 83       	std	Y+6, r24	; 0x06
    c082:	9f 83       	std	Y+7, r25	; 0x07
    c084:	02 c0       	rjmp	.+4      	; 0xc08a <fputc+0x4c>
    c086:	0f ef       	ldi	r16, 0xFF	; 255
    c088:	1f ef       	ldi	r17, 0xFF	; 255
    c08a:	c8 01       	movw	r24, r16
    c08c:	df 91       	pop	r29
    c08e:	cf 91       	pop	r28
    c090:	1f 91       	pop	r17
    c092:	0f 91       	pop	r16
    c094:	08 95       	ret

0000c096 <__ultoa_invert>:
    c096:	fa 01       	movw	r30, r20
    c098:	aa 27       	eor	r26, r26
    c09a:	28 30       	cpi	r18, 0x08	; 8
    c09c:	51 f1       	breq	.+84     	; 0xc0f2 <__ultoa_invert+0x5c>
    c09e:	20 31       	cpi	r18, 0x10	; 16
    c0a0:	81 f1       	breq	.+96     	; 0xc102 <__ultoa_invert+0x6c>
    c0a2:	e8 94       	clt
    c0a4:	6f 93       	push	r22
    c0a6:	6e 7f       	andi	r22, 0xFE	; 254
    c0a8:	6e 5f       	subi	r22, 0xFE	; 254
    c0aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c0ac:	8f 4f       	sbci	r24, 0xFF	; 255
    c0ae:	9f 4f       	sbci	r25, 0xFF	; 255
    c0b0:	af 4f       	sbci	r26, 0xFF	; 255
    c0b2:	b1 e0       	ldi	r27, 0x01	; 1
    c0b4:	3e d0       	rcall	.+124    	; 0xc132 <__ultoa_invert+0x9c>
    c0b6:	b4 e0       	ldi	r27, 0x04	; 4
    c0b8:	3c d0       	rcall	.+120    	; 0xc132 <__ultoa_invert+0x9c>
    c0ba:	67 0f       	add	r22, r23
    c0bc:	78 1f       	adc	r23, r24
    c0be:	89 1f       	adc	r24, r25
    c0c0:	9a 1f       	adc	r25, r26
    c0c2:	a1 1d       	adc	r26, r1
    c0c4:	68 0f       	add	r22, r24
    c0c6:	79 1f       	adc	r23, r25
    c0c8:	8a 1f       	adc	r24, r26
    c0ca:	91 1d       	adc	r25, r1
    c0cc:	a1 1d       	adc	r26, r1
    c0ce:	6a 0f       	add	r22, r26
    c0d0:	71 1d       	adc	r23, r1
    c0d2:	81 1d       	adc	r24, r1
    c0d4:	91 1d       	adc	r25, r1
    c0d6:	a1 1d       	adc	r26, r1
    c0d8:	20 d0       	rcall	.+64     	; 0xc11a <__ultoa_invert+0x84>
    c0da:	09 f4       	brne	.+2      	; 0xc0de <__ultoa_invert+0x48>
    c0dc:	68 94       	set
    c0de:	3f 91       	pop	r19
    c0e0:	2a e0       	ldi	r18, 0x0A	; 10
    c0e2:	26 9f       	mul	r18, r22
    c0e4:	11 24       	eor	r1, r1
    c0e6:	30 19       	sub	r19, r0
    c0e8:	30 5d       	subi	r19, 0xD0	; 208
    c0ea:	31 93       	st	Z+, r19
    c0ec:	de f6       	brtc	.-74     	; 0xc0a4 <__ultoa_invert+0xe>
    c0ee:	cf 01       	movw	r24, r30
    c0f0:	08 95       	ret
    c0f2:	46 2f       	mov	r20, r22
    c0f4:	47 70       	andi	r20, 0x07	; 7
    c0f6:	40 5d       	subi	r20, 0xD0	; 208
    c0f8:	41 93       	st	Z+, r20
    c0fa:	b3 e0       	ldi	r27, 0x03	; 3
    c0fc:	0f d0       	rcall	.+30     	; 0xc11c <__ultoa_invert+0x86>
    c0fe:	c9 f7       	brne	.-14     	; 0xc0f2 <__ultoa_invert+0x5c>
    c100:	f6 cf       	rjmp	.-20     	; 0xc0ee <__ultoa_invert+0x58>
    c102:	46 2f       	mov	r20, r22
    c104:	4f 70       	andi	r20, 0x0F	; 15
    c106:	40 5d       	subi	r20, 0xD0	; 208
    c108:	4a 33       	cpi	r20, 0x3A	; 58
    c10a:	18 f0       	brcs	.+6      	; 0xc112 <__ultoa_invert+0x7c>
    c10c:	49 5d       	subi	r20, 0xD9	; 217
    c10e:	31 fd       	sbrc	r19, 1
    c110:	40 52       	subi	r20, 0x20	; 32
    c112:	41 93       	st	Z+, r20
    c114:	02 d0       	rcall	.+4      	; 0xc11a <__ultoa_invert+0x84>
    c116:	a9 f7       	brne	.-22     	; 0xc102 <__ultoa_invert+0x6c>
    c118:	ea cf       	rjmp	.-44     	; 0xc0ee <__ultoa_invert+0x58>
    c11a:	b4 e0       	ldi	r27, 0x04	; 4
    c11c:	a6 95       	lsr	r26
    c11e:	97 95       	ror	r25
    c120:	87 95       	ror	r24
    c122:	77 95       	ror	r23
    c124:	67 95       	ror	r22
    c126:	ba 95       	dec	r27
    c128:	c9 f7       	brne	.-14     	; 0xc11c <__ultoa_invert+0x86>
    c12a:	00 97       	sbiw	r24, 0x00	; 0
    c12c:	61 05       	cpc	r22, r1
    c12e:	71 05       	cpc	r23, r1
    c130:	08 95       	ret
    c132:	9b 01       	movw	r18, r22
    c134:	ac 01       	movw	r20, r24
    c136:	0a 2e       	mov	r0, r26
    c138:	06 94       	lsr	r0
    c13a:	57 95       	ror	r21
    c13c:	47 95       	ror	r20
    c13e:	37 95       	ror	r19
    c140:	27 95       	ror	r18
    c142:	ba 95       	dec	r27
    c144:	c9 f7       	brne	.-14     	; 0xc138 <__ultoa_invert+0xa2>
    c146:	62 0f       	add	r22, r18
    c148:	73 1f       	adc	r23, r19
    c14a:	84 1f       	adc	r24, r20
    c14c:	95 1f       	adc	r25, r21
    c14e:	a0 1d       	adc	r26, r0
    c150:	08 95       	ret

0000c152 <_exit>:
    c152:	f8 94       	cli

0000c154 <__stop_program>:
    c154:	ff cf       	rjmp	.-2      	; 0xc154 <__stop_program>
