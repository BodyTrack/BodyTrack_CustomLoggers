
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000b5e  00802000  00009ba0  00009c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001ef3  00802b5e  00802b5e  0000a792  2**0
                  ALLOC
  3 .stab         00001a4c  00000000  00000000  0000a794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000593  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000c773  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001518  00000000  00000000  0000c813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008a52  00000000  00000000  0000dd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009ed  00000000  00000000  0001677d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006c2c  00000000  00000000  0001716a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  0001dd98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004252  00000000  00000000  0001e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006539  00000000  00000000  00022a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  00028fc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 fa 38 	jmp	0x71f4	; 0x71f4 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 b1 3e 	jmp	0x7d62	; 0x7d62 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 5f 2b 	jmp	0x56be	; 0x56be <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	1b e2       	ldi	r17, 0x2B	; 43
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e0 ea       	ldi	r30, 0xA0	; 160
     200:	fb e9       	ldi	r31, 0x9B	; 155
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	ae 35       	cpi	r26, 0x5E	; 94
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1a e4       	ldi	r17, 0x4A	; 74
     214:	ae e5       	ldi	r26, 0x5E	; 94
     216:	bb e2       	ldi	r27, 0x2B	; 43
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a1 35       	cpi	r26, 0x51	; 81
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <main>
     226:	0c 94 ce 4d 	jmp	0x9b9c	; 0x9b9c <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;


void Debug_Init(void){
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     22e:	e0 e4       	ldi	r30, 0x40	; 64
     230:	f6 e0       	ldi	r31, 0x06	; 6
     232:	88 e0       	ldi	r24, 0x08	; 8
     234:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	82 83       	std	Z+2, r24	; 0x02
   
	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     23a:	e0 ea       	ldi	r30, 0xA0	; 160
     23c:	f8 e0       	ldi	r31, 0x08	; 8
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	85 83       	std	Z+5, r24	; 0x05
	
	Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     242:	8f e5       	ldi	r24, 0x5F	; 95
     244:	86 83       	std	Z+6, r24	; 0x06
	Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     246:	17 82       	std	Z+7, r1	; 0x07
	
	
	Debug_Usart.CTRLB |= USART_RXEN_bm;
     248:	84 81       	ldd	r24, Z+4	; 0x04
     24a:	80 61       	ori	r24, 0x10	; 16
     24c:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     24e:	84 81       	ldd	r24, Z+4	; 0x04
     250:	88 60       	ori	r24, 0x08	; 8
     252:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     254:	83 81       	ldd	r24, Z+3	; 0x03
     256:	80 62       	ori	r24, 0x20	; 32
     258:	83 83       	std	Z+3, r24	; 0x03
}
     25a:	08 95       	ret

0000025c <Debug_CharReadyToRead>:



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     25c:	20 91 90 2b 	lds	r18, 0x2B90
     260:	30 91 91 2b 	lds	r19, 0x2B91
     264:	80 91 8e 2b 	lds	r24, 0x2B8E
     268:	90 91 8f 2b 	lds	r25, 0x2B8F
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	09 f0       	breq	.+2      	; 0x276 <Debug_CharReadyToRead+0x1a>
     274:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     276:	84 2f       	mov	r24, r20
     278:	08 95       	ret

0000027a <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     27a:	88 23       	and	r24, r24
     27c:	59 f0       	breq	.+22     	; 0x294 <Debug_GetByte+0x1a>
}



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     27e:	20 91 90 2b 	lds	r18, 0x2B90
     282:	30 91 91 2b 	lds	r19, 0x2B91
     286:	80 91 8e 2b 	lds	r24, 0x2B8E
     28a:	90 91 8f 2b 	lds	r25, 0x2B8F
     28e:	28 17       	cp	r18, r24
     290:	39 07       	cpc	r19, r25
     292:	a9 f3       	breq	.-22     	; 0x27e <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     294:	e0 91 8e 2b 	lds	r30, 0x2B8E
     298:	f0 91 8f 2b 	lds	r31, 0x2B8F
     29c:	ea 5e       	subi	r30, 0xEA	; 234
     29e:	f3 4c       	sbci	r31, 0xC3	; 195
     2a0:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     2a2:	80 91 8e 2b 	lds	r24, 0x2B8E
     2a6:	90 91 8f 2b 	lds	r25, 0x2B8F
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	80 93 8e 2b 	sts	0x2B8E, r24
     2b0:	90 93 8f 2b 	sts	0x2B8F, r25
	if(Debug_readLocation >= Debug_BufferSize){
     2b4:	80 91 8e 2b 	lds	r24, 0x2B8E
     2b8:	90 91 8f 2b 	lds	r25, 0x2B8F
     2bc:	80 50       	subi	r24, 0x00	; 0
     2be:	94 40       	sbci	r25, 0x04	; 4
     2c0:	20 f0       	brcs	.+8      	; 0x2ca <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     2c2:	10 92 8e 2b 	sts	0x2B8E, r1
     2c6:	10 92 8f 2b 	sts	0x2B8F, r1
	}
	return tmp;
}
     2ca:	8e 2f       	mov	r24, r30
     2cc:	08 95       	ret

000002ce <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     2ce:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     2d0:	80 91 a1 08 	lds	r24, 0x08A1
     2d4:	85 ff       	sbrs	r24, 5
     2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <Debug_SendByte+0x2>
	Debug_Usart.DATA = data;	
     2d8:	90 93 a0 08 	sts	0x08A0, r25
}
     2dc:	08 95       	ret

000002de <__vector_25>:
		Debug_SendByte(13);
		Debug_SendByte(10);
	}
}

ISR(USARTC0_RXC_vect){
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	0b b6       	in	r0, 0x3b	; 59
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	2f 93       	push	r18
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     2f6:	e0 91 90 2b 	lds	r30, 0x2B90
     2fa:	f0 91 91 2b 	lds	r31, 0x2B91
     2fe:	80 91 a0 08 	lds	r24, 0x08A0
     302:	ea 5e       	subi	r30, 0xEA	; 234
     304:	f3 4c       	sbci	r31, 0xC3	; 195
     306:	80 83       	st	Z, r24
	Debug_writeLocation++;
     308:	80 91 90 2b 	lds	r24, 0x2B90
     30c:	90 91 91 2b 	lds	r25, 0x2B91
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	80 93 90 2b 	sts	0x2B90, r24
     316:	90 93 91 2b 	sts	0x2B91, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     31a:	80 91 90 2b 	lds	r24, 0x2B90
     31e:	90 91 91 2b 	lds	r25, 0x2B91
     322:	80 50       	subi	r24, 0x00	; 0
     324:	94 40       	sbci	r25, 0x04	; 4
     326:	20 f0       	brcs	.+8      	; 0x330 <__vector_25+0x52>
		Debug_writeLocation = 0;
     328:	10 92 90 2b 	sts	0x2B90, r1
     32c:	10 92 91 2b 	sts	0x2B91, r1
	}
}
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0b be       	out	0x3b, r0	; 59
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <Wifi_Init>:
volatile bool connected = false;
volatile char connectionStatus[3];
char macAddr[20];
char rssi[10];

void Wifi_Init(uint32_t baud){
     348:	ab 01       	movw	r20, r22
     34a:	bc 01       	movw	r22, r24

	//Wifi_Connected_Port.Wifi_Connected_PinCTRL = PORT_OPC_PULLUP_gc;
	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	e0 ea       	ldi	r30, 0xA0	; 160
     350:	f6 e0       	ldi	r31, 0x06	; 6
     352:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     354:	e0 ea       	ldi	r30, 0xA0	; 160
     356:	fa e0       	ldi	r31, 0x0A	; 10
     358:	80 91 a4 0a 	lds	r24, 0x0AA4
     35c:	8f 7e       	andi	r24, 0xEF	; 239
     35e:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     360:	80 91 a4 0a 	lds	r24, 0x0AA4
     364:	87 7f       	andi	r24, 0xF7	; 247
     366:	84 83       	std	Z+4, r24	; 0x04
     368:	20 e1       	ldi	r18, 0x10	; 16
     36a:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36c:	80 e7       	ldi	r24, 0x70	; 112
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	fc 01       	movw	r30, r24
     372:	31 97       	sbiw	r30, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <Wifi_Init+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     376:	21 50       	subi	r18, 0x01	; 1
     378:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     37a:	d1 f7       	brne	.-12     	; 0x370 <Wifi_Init+0x28>
	_delay_ms(1000);

	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     37c:	e0 e8       	ldi	r30, 0x80	; 128
     37e:	f6 e0       	ldi	r31, 0x06	; 6
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     388:	e0 ea       	ldi	r30, 0xA0	; 160
     38a:	fa e0       	ldi	r31, 0x0A	; 10
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	85 83       	std	Z+5, r24	; 0x05
	 	    	
	if(baud == 9600){
     390:	40 38       	cpi	r20, 0x80	; 128
     392:	95 e2       	ldi	r25, 0x25	; 37
     394:	59 07       	cpc	r21, r25
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	69 07       	cpc	r22, r25
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	79 07       	cpc	r23, r25
     39e:	11 f4       	brne	.+4      	; 0x3a4 <Wifi_Init+0x5c>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     3a0:	8f e5       	ldi	r24, 0x5F	; 95
     3a2:	1b c0       	rjmp	.+54     	; 0x3da <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     3a4:	40 30       	cpi	r20, 0x00	; 0
     3a6:	92 ec       	ldi	r25, 0xC2	; 194
     3a8:	59 07       	cpc	r21, r25
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	69 07       	cpc	r22, r25
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	79 07       	cpc	r23, r25
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <Wifi_Init+0x70>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	11 c0       	rjmp	.+34     	; 0x3da <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     3b8:	40 30       	cpi	r20, 0x00	; 0
     3ba:	94 e8       	ldi	r25, 0x84	; 132
     3bc:	59 07       	cpc	r21, r25
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	69 07       	cpc	r22, r25
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	79 07       	cpc	r23, r25
     3c6:	49 f0       	breq	.+18     	; 0x3da <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     3c8:	40 30       	cpi	r20, 0x00	; 0
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	58 07       	cpc	r21, r24
     3ce:	87 e0       	ldi	r24, 0x07	; 7
     3d0:	68 07       	cpc	r22, r24
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	78 07       	cpc	r23, r24
     3d6:	19 f4       	brne	.+6      	; 0x3de <Wifi_Init+0x96>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	86 83       	std	Z+6, r24	; 0x06
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <Wifi_Init+0xa2>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     3de:	40 50       	subi	r20, 0x00	; 0
     3e0:	50 41       	sbci	r21, 0x10	; 16
     3e2:	6e 40       	sbci	r22, 0x0E	; 14
     3e4:	70 40       	sbci	r23, 0x00	; 0
     3e6:	11 f4       	brne	.+4      	; 0x3ec <Wifi_Init+0xa4>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     3e8:	16 82       	std	Z+6, r1	; 0x06
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     3ea:	17 82       	std	Z+7, r1	; 0x07
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     3ec:	e0 ea       	ldi	r30, 0xA0	; 160
     3ee:	fa e0       	ldi	r31, 0x0A	; 10
     3f0:	80 91 a4 0a 	lds	r24, 0x0AA4
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     3f8:	80 91 a4 0a 	lds	r24, 0x0AA4
     3fc:	88 60       	ori	r24, 0x08	; 8
     3fe:	84 83       	std	Z+4, r24	; 0x04
		
}
     400:	08 95       	ret

00000402 <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     402:	20 91 1d 01 	lds	r18, 0x011D
     406:	92 2f       	mov	r25, r18
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	80 93 94 2b 	sts	0x2B94, r24
     40e:	90 93 95 2b 	sts	0x2B95, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     412:	80 91 94 2b 	lds	r24, 0x2B94
     416:	90 91 95 2b 	lds	r25, 0x2B95
     41a:	20 91 1c 01 	lds	r18, 0x011C
     41e:	82 0f       	add	r24, r18
     420:	91 1d       	adc	r25, r1
     422:	80 93 94 2b 	sts	0x2B94, r24
     426:	90 93 95 2b 	sts	0x2B95, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     42a:	80 91 94 2b 	lds	r24, 0x2B94
     42e:	90 91 95 2b 	lds	r25, 0x2B95
     432:	8a 57       	subi	r24, 0x7A	; 122
     434:	9e 42       	sbci	r25, 0x2E	; 46
     436:	80 93 94 2b 	sts	0x2B94, r24
     43a:	90 93 95 2b 	sts	0x2B95, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     43e:	20 91 94 2b 	lds	r18, 0x2B94
     442:	30 91 95 2b 	lds	r19, 0x2B95
     446:	80 91 92 2b 	lds	r24, 0x2B92
     44a:	90 91 93 2b 	lds	r25, 0x2B93
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	28 17       	cp	r18, r24
     452:	39 07       	cpc	r19, r25
     454:	09 f0       	breq	.+2      	; 0x458 <Wifi_CharReadyToRead+0x56>
     456:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     458:	84 2f       	mov	r24, r20
     45a:	08 95       	ret

0000045c <Wifi_ClearBuffer>:
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
		
}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     45c:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
     460:	88 23       	and	r24, r24
     462:	31 f1       	breq	.+76     	; 0x4b0 <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     464:	20 91 1d 01 	lds	r18, 0x011D
     468:	92 2f       	mov	r25, r18
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	80 93 94 2b 	sts	0x2B94, r24
     470:	90 93 95 2b 	sts	0x2B95, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     474:	80 91 94 2b 	lds	r24, 0x2B94
     478:	90 91 95 2b 	lds	r25, 0x2B95
     47c:	20 91 1c 01 	lds	r18, 0x011C
     480:	82 0f       	add	r24, r18
     482:	91 1d       	adc	r25, r1
     484:	80 93 94 2b 	sts	0x2B94, r24
     488:	90 93 95 2b 	sts	0x2B95, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     48c:	80 91 94 2b 	lds	r24, 0x2B94
     490:	90 91 95 2b 	lds	r25, 0x2B95
     494:	8a 57       	subi	r24, 0x7A	; 122
     496:	9e 42       	sbci	r25, 0x2E	; 46
     498:	80 93 94 2b 	sts	0x2B94, r24
     49c:	90 93 95 2b 	sts	0x2B95, r25
		Wifi_readLocation = Wifi_writeLocation;
     4a0:	80 91 94 2b 	lds	r24, 0x2B94
     4a4:	90 91 95 2b 	lds	r25, 0x2B95
     4a8:	80 93 92 2b 	sts	0x2B92, r24
     4ac:	90 93 93 2b 	sts	0x2B93, r25
     4b0:	08 95       	ret

000004b2 <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     4b2:	88 23       	and	r24, r24
     4b4:	21 f0       	breq	.+8      	; 0x4be <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     4b6:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
     4ba:	88 23       	and	r24, r24
     4bc:	e1 f3       	breq	.-8      	; 0x4b6 <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     4be:	e0 91 92 2b 	lds	r30, 0x2B92
     4c2:	f0 91 93 2b 	lds	r31, 0x2B93
     4c6:	e6 58       	subi	r30, 0x86	; 134
     4c8:	f1 4d       	sbci	r31, 0xD1	; 209
     4ca:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     4cc:	80 91 92 2b 	lds	r24, 0x2B92
     4d0:	90 91 93 2b 	lds	r25, 0x2B93
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	80 93 92 2b 	sts	0x2B92, r24
     4da:	90 93 93 2b 	sts	0x2B93, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     4de:	80 91 92 2b 	lds	r24, 0x2B92
     4e2:	90 91 93 2b 	lds	r25, 0x2B93
     4e6:	80 50       	subi	r24, 0x00	; 0
     4e8:	94 40       	sbci	r25, 0x04	; 4
     4ea:	20 f0       	brcs	.+8      	; 0x4f4 <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     4ec:	10 92 92 2b 	sts	0x2B92, r1
     4f0:	10 92 93 2b 	sts	0x2B93, r1
	}
	return tmp;
}
     4f4:	8e 2f       	mov	r24, r30
     4f6:	08 95       	ret

000004f8 <Wifi_SendByte>:


void Wifi_SendByte(uint8_t data){
     4f8:	98 2f       	mov	r25, r24
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
     4fa:	80 91 a1 0a 	lds	r24, 0x0AA1
     4fe:	85 ff       	sbrs	r24, 5
     500:	fc cf       	rjmp	.-8      	; 0x4fa <Wifi_SendByte+0x2>
	Wifi_Usart.DATA = data;
     502:	90 93 a0 0a 	sts	0x0AA0, r25
}
     506:	08 95       	ret

00000508 <Wifi_Connected>:
	
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
     508:	ac 01       	movw	r20, r24
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	66 e6       	ldi	r22, 0x66	; 102
     510:	7e e0       	ldi	r23, 0x0E	; 14
     512:	0d c0       	rjmp	.+26     	; 0x52e <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     514:	80 91 a8 06 	lds	r24, 0x06A8
     518:	87 ff       	sbrs	r24, 7
     51a:	04 c0       	rjmp	.+8      	; 0x524 <Wifi_Connected+0x1c>
			connected = true;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 a2 2b 	sts	0x2BA2, r24
     522:	08 95       	ret
     524:	fb 01       	movw	r30, r22
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <Wifi_Connected+0x1e>
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     52a:	2f 5f       	subi	r18, 0xFF	; 255
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	24 17       	cp	r18, r20
     530:	35 07       	cpc	r19, r21
     532:	80 f3       	brcs	.-32     	; 0x514 <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     534:	10 92 a2 2b 	sts	0x2BA2, r1
     538:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     53a:	08 95       	ret

0000053c <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     53c:	e0 ea       	ldi	r30, 0xA0	; 160
     53e:	f6 e0       	ldi	r31, 0x06	; 6
     540:	88 e1       	ldi	r24, 0x18	; 24
     542:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     544:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     546:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     548:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     54a:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	8c 67       	ori	r24, 0x7C	; 124
     550:	82 83       	std	Z+2, r24	; 0x02
}
     552:	08 95       	ret

00000554 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     554:	e0 ea       	ldi	r30, 0xA0	; 160
     556:	f6 e0       	ldi	r31, 0x06	; 6
     558:	80 85       	ldd	r24, Z+8	; 0x08
}
     55a:	8c 77       	andi	r24, 0x7C	; 124
     55c:	08 95       	ret

0000055e <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     55e:	40 91 a8 06 	lds	r20, 0x06A8
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <Dpad_CheckButton+0x10>
     56a:	22 0f       	add	r18, r18
     56c:	33 1f       	adc	r19, r19
     56e:	8a 95       	dec	r24
     570:	e2 f7       	brpl	.-8      	; 0x56a <Dpad_CheckButton+0xc>
     572:	4c 77       	andi	r20, 0x7C	; 124
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	24 23       	and	r18, r20
     578:	35 23       	and	r19, r21
     57a:	12 16       	cp	r1, r18
     57c:	13 06       	cpc	r1, r19
     57e:	0c f0       	brlt	.+2      	; 0x582 <Dpad_CheckButton+0x24>
     580:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     582:	89 2f       	mov	r24, r25
     584:	08 95       	ret

00000586 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     586:	e0 e2       	ldi	r30, 0x20	; 32
     588:	f6 e0       	ldi	r31, 0x06	; 6
     58a:	81 81       	ldd	r24, Z+1	; 0x01
     58c:	83 6f       	ori	r24, 0xF3	; 243
     58e:	81 83       	std	Z+1, r24	; 0x01
}
     590:	08 95       	ret

00000592 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <Leds_Set+0xa>
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	8a 95       	dec	r24
     59e:	e2 f7       	brpl	.-8      	; 0x598 <Leds_Set+0x6>
     5a0:	e0 e2       	ldi	r30, 0x20	; 32
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
     5a4:	25 83       	std	Z+5, r18	; 0x05
}
     5a6:	08 95       	ret

000005a8 <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Leds_Clear+0xa>
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Leds_Clear+0x6>
     5b6:	e0 e2       	ldi	r30, 0x20	; 32
     5b8:	f6 e0       	ldi	r31, 0x06	; 6
     5ba:	26 83       	std	Z+6, r18	; 0x06
}
     5bc:	08 95       	ret

000005be <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <Leds_Toggle+0xa>
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	8a 95       	dec	r24
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <Leds_Toggle+0x6>
     5cc:	e0 e2       	ldi	r30, 0x20	; 32
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	27 83       	std	Z+7, r18	; 0x07
}
     5d2:	08 95       	ret

000005d4 <Rs232_Init>:
uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     5d4:	e0 e6       	ldi	r30, 0x60	; 96
     5d6:	f6 e0       	ldi	r31, 0x06	; 6
     5d8:	88 e0       	ldi	r24, 0x08	; 8
     5da:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     5e0:	e0 ea       	ldi	r30, 0xA0	; 160
     5e2:	f9 e0       	ldi	r31, 0x09	; 9
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     5e8:	8f e5       	ldi	r24, 0x5F	; 95
     5ea:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     5ec:	17 82       	std	Z+7, r1	; 0x07
	
	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     5ee:	84 81       	ldd	r24, Z+4	; 0x04
     5f0:	80 61       	ori	r24, 0x10	; 16
     5f2:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     5f4:	84 81       	ldd	r24, Z+4	; 0x04
     5f6:	88 60       	ori	r24, 0x08	; 8
     5f8:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     5fa:	83 81       	ldd	r24, Z+3	; 0x03
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	83 83       	std	Z+3, r24	; 0x03
}
     600:	08 95       	ret

00000602 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     602:	20 91 a5 2b 	lds	r18, 0x2BA5
     606:	30 91 a6 2b 	lds	r19, 0x2BA6
     60a:	80 91 a3 2b 	lds	r24, 0x2BA3
     60e:	90 91 a4 2b 	lds	r25, 0x2BA4
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	09 f0       	breq	.+2      	; 0x61c <Rs232_CharReadyToRead+0x1a>
     61a:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     61c:	84 2f       	mov	r24, r20
     61e:	08 95       	ret

00000620 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     620:	88 23       	and	r24, r24
     622:	59 f0       	breq	.+22     	; 0x63a <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     624:	20 91 a5 2b 	lds	r18, 0x2BA5
     628:	30 91 a6 2b 	lds	r19, 0x2BA6
     62c:	80 91 a3 2b 	lds	r24, 0x2BA3
     630:	90 91 a4 2b 	lds	r25, 0x2BA4
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	a9 f3       	breq	.-22     	; 0x624 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     63a:	e0 91 a3 2b 	lds	r30, 0x2BA3
     63e:	f0 91 a4 2b 	lds	r31, 0x2BA4
     642:	e5 55       	subi	r30, 0x55	; 85
     644:	fa 4b       	sbci	r31, 0xBA	; 186
     646:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     648:	80 91 a3 2b 	lds	r24, 0x2BA3
     64c:	90 91 a4 2b 	lds	r25, 0x2BA4
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	80 93 a3 2b 	sts	0x2BA3, r24
     656:	90 93 a4 2b 	sts	0x2BA4, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     65a:	80 91 a3 2b 	lds	r24, 0x2BA3
     65e:	90 91 a4 2b 	lds	r25, 0x2BA4
     662:	80 50       	subi	r24, 0x00	; 0
     664:	94 40       	sbci	r25, 0x04	; 4
     666:	20 f0       	brcs	.+8      	; 0x670 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     668:	10 92 a3 2b 	sts	0x2BA3, r1
     66c:	10 92 a4 2b 	sts	0x2BA4, r1
	}
	return tmp;
}
     670:	8e 2f       	mov	r24, r30
     672:	08 95       	ret

00000674 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     674:	80 91 a5 2b 	lds	r24, 0x2BA5
     678:	90 91 a6 2b 	lds	r25, 0x2BA6
     67c:	80 93 a3 2b 	sts	0x2BA3, r24
     680:	90 93 a4 2b 	sts	0x2BA4, r25
}
     684:	08 95       	ret

00000686 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     686:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     688:	80 91 a1 09 	lds	r24, 0x09A1
     68c:	85 ff       	sbrs	r24, 5
     68e:	fc cf       	rjmp	.-8      	; 0x688 <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     690:	90 93 a0 09 	sts	0x09A0, r25
}
     694:	08 95       	ret

00000696 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     696:	82 e3       	ldi	r24, 0x32	; 50
     698:	80 93 e5 2b 	sts	0x2BE5, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	e0 ec       	ldi	r30, 0xC0	; 192
     6a0:	f9 e0       	ldi	r31, 0x09	; 9
     6a2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     6a4:	80 91 c2 09 	lds	r24, 0x09C2
     6a8:	87 ff       	sbrs	r24, 7
     6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <wait_ready+0xe>
	return SD_SPI.DATA;
     6ac:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     6b0:	e0 ec       	ldi	r30, 0xC0	; 192
     6b2:	f9 e0       	ldi	r31, 0x09	; 9
     6b4:	2f ef       	ldi	r18, 0xFF	; 255
     6b6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     6b8:	80 91 c2 09 	lds	r24, 0x09C2
     6bc:	87 ff       	sbrs	r24, 7
     6be:	fc cf       	rjmp	.-8      	; 0x6b8 <wait_ready+0x22>
	return SD_SPI.DATA;
     6c0:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     6c4:	9f 3f       	cpi	r25, 0xFF	; 255
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <wait_ready+0x3a>
     6c8:	80 91 e5 2b 	lds	r24, 0x2BE5
     6cc:	88 23       	and	r24, r24
     6ce:	99 f7       	brne	.-26     	; 0x6b6 <wait_ready+0x20>

	return res;
}
     6d0:	89 2f       	mov	r24, r25
     6d2:	08 95       	ret

000006d4 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
	CS_LOW();
     6da:	c0 e6       	ldi	r28, 0x60	; 96
     6dc:	d6 e0       	ldi	r29, 0x06	; 6
     6de:	10 e1       	ldi	r17, 0x10	; 16
     6e0:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     6e2:	0e 94 4b 03 	call	0x696	; 0x696 <wait_ready>
     6e6:	8f 3f       	cpi	r24, 0xFF	; 255
     6e8:	11 f4       	brne	.+4      	; 0x6ee <select+0x1a>
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     6ee:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	e0 ec       	ldi	r30, 0xC0	; 192
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
     6f6:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     6f8:	80 91 c2 09 	lds	r24, 0x09C2
     6fc:	87 ff       	sbrs	r24, 7
     6fe:	fc cf       	rjmp	.-8      	; 0x6f8 <select+0x24>
	return SD_SPI.DATA;
     700:	80 91 c3 09 	lds	r24, 0x09C3
     704:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	08 95       	ret

0000070e <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     70e:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     710:	84 e1       	ldi	r24, 0x14	; 20
     712:	80 93 e4 2b 	sts	0x2BE4, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     716:	a0 ec       	ldi	r26, 0xC0	; 192
     718:	b9 e0       	ldi	r27, 0x09	; 9
     71a:	9f ef       	ldi	r25, 0xFF	; 255
     71c:	13 96       	adiw	r26, 0x03	; 3
     71e:	9c 93       	st	X, r25
     720:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     722:	80 91 c2 09 	lds	r24, 0x09C2
     726:	87 ff       	sbrs	r24, 7
     728:	fc cf       	rjmp	.-8      	; 0x722 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     72a:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     72e:	8f 3f       	cpi	r24, 0xFF	; 255
     730:	29 f4       	brne	.+10     	; 0x73c <rcvr_datablock+0x2e>
     732:	80 91 e4 2b 	lds	r24, 0x2BE4
     736:	88 23       	and	r24, r24
     738:	89 f7       	brne	.-30     	; 0x71c <rcvr_datablock+0xe>
     73a:	49 c0       	rjmp	.+146    	; 0x7ce <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     73c:	8e 3f       	cpi	r24, 0xFE	; 254
     73e:	09 f0       	breq	.+2      	; 0x742 <rcvr_datablock+0x34>
     740:	46 c0       	rjmp	.+140    	; 0x7ce <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     742:	a0 ec       	ldi	r26, 0xC0	; 192
     744:	b9 e0       	ldi	r27, 0x09	; 9
     746:	9f ef       	ldi	r25, 0xFF	; 255
     748:	13 96       	adiw	r26, 0x03	; 3
     74a:	9c 93       	st	X, r25
     74c:	13 97       	sbiw	r26, 0x03	; 3
     74e:	80 91 c2 09 	lds	r24, 0x09C2
     752:	87 ff       	sbrs	r24, 7
     754:	fc cf       	rjmp	.-8      	; 0x74e <rcvr_datablock+0x40>
     756:	80 91 c3 09 	lds	r24, 0x09C3
     75a:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	9c 93       	st	X, r25
     760:	13 97       	sbiw	r26, 0x03	; 3
     762:	80 91 c2 09 	lds	r24, 0x09C2
     766:	87 ff       	sbrs	r24, 7
     768:	fc cf       	rjmp	.-8      	; 0x762 <rcvr_datablock+0x54>
     76a:	80 91 c3 09 	lds	r24, 0x09C3
     76e:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	9c 93       	st	X, r25
     774:	13 97       	sbiw	r26, 0x03	; 3
     776:	80 91 c2 09 	lds	r24, 0x09C2
     77a:	87 ff       	sbrs	r24, 7
     77c:	fc cf       	rjmp	.-8      	; 0x776 <rcvr_datablock+0x68>
     77e:	80 91 c3 09 	lds	r24, 0x09C3
     782:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     784:	13 96       	adiw	r26, 0x03	; 3
     786:	9c 93       	st	X, r25
     788:	13 97       	sbiw	r26, 0x03	; 3
     78a:	80 91 c2 09 	lds	r24, 0x09C2
     78e:	87 ff       	sbrs	r24, 7
     790:	fc cf       	rjmp	.-8      	; 0x78a <rcvr_datablock+0x7c>
     792:	80 91 c3 09 	lds	r24, 0x09C3
     796:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     798:	64 50       	subi	r22, 0x04	; 4
     79a:	70 40       	sbci	r23, 0x00	; 0
     79c:	11 f0       	breq	.+4      	; 0x7a2 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     79e:	34 96       	adiw	r30, 0x04	; 4
     7a0:	d3 cf       	rjmp	.-90     	; 0x748 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	e0 ec       	ldi	r30, 0xC0	; 192
     7a6:	f9 e0       	ldi	r31, 0x09	; 9
     7a8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     7aa:	80 91 c2 09 	lds	r24, 0x09C2
     7ae:	87 ff       	sbrs	r24, 7
     7b0:	fc cf       	rjmp	.-8      	; 0x7aa <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     7b2:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	e0 ec       	ldi	r30, 0xC0	; 192
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
     7bc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     7be:	80 91 c2 09 	lds	r24, 0x09C2
     7c2:	87 ff       	sbrs	r24, 7
     7c4:	fc cf       	rjmp	.-8      	; 0x7be <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     7c6:	80 91 c3 09 	lds	r24, 0x09C3
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     7ce:	80 e0       	ldi	r24, 0x00	; 0
}
     7d0:	08 95       	ret

000007d2 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     7dc:	0e 94 4b 03 	call	0x696	; 0x696 <wait_ready>
     7e0:	8f 3f       	cpi	r24, 0xFF	; 255
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <xmit_datablock+0x16>
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	3f c0       	rjmp	.+126    	; 0x866 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     7e8:	e0 ec       	ldi	r30, 0xC0	; 192
     7ea:	f9 e0       	ldi	r31, 0x09	; 9
     7ec:	13 83       	std	Z+3, r17	; 0x03
     7ee:	80 91 c2 09 	lds	r24, 0x09C2
     7f2:	87 ff       	sbrs	r24, 7
     7f4:	fc cf       	rjmp	.-8      	; 0x7ee <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     7f6:	1d 3f       	cpi	r17, 0xFD	; 253
     7f8:	11 f4       	brne	.+4      	; 0x7fe <xmit_datablock+0x2c>
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	34 c0       	rjmp	.+104    	; 0x866 <xmit_datablock+0x94>
     7fe:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     800:	e0 ec       	ldi	r30, 0xC0	; 192
     802:	f9 e0       	ldi	r31, 0x09	; 9
     804:	88 81       	ld	r24, Y
     806:	83 83       	std	Z+3, r24	; 0x03
     808:	80 91 c2 09 	lds	r24, 0x09C2
     80c:	87 ff       	sbrs	r24, 7
     80e:	fc cf       	rjmp	.-8      	; 0x808 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	83 83       	std	Z+3, r24	; 0x03
     814:	80 91 c2 09 	lds	r24, 0x09C2
     818:	87 ff       	sbrs	r24, 7
     81a:	fc cf       	rjmp	.-8      	; 0x814 <xmit_datablock+0x42>
		} while (--wc);
     81c:	91 50       	subi	r25, 0x01	; 1
     81e:	11 f0       	breq	.+4      	; 0x824 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     820:	22 96       	adiw	r28, 0x02	; 2
     822:	f0 cf       	rjmp	.-32     	; 0x804 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	e0 ec       	ldi	r30, 0xC0	; 192
     828:	f9 e0       	ldi	r31, 0x09	; 9
     82a:	83 83       	std	Z+3, r24	; 0x03
     82c:	80 91 c2 09 	lds	r24, 0x09C2
     830:	87 ff       	sbrs	r24, 7
     832:	fc cf       	rjmp	.-8      	; 0x82c <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	e0 ec       	ldi	r30, 0xC0	; 192
     838:	f9 e0       	ldi	r31, 0x09	; 9
     83a:	83 83       	std	Z+3, r24	; 0x03
     83c:	80 91 c2 09 	lds	r24, 0x09C2
     840:	87 ff       	sbrs	r24, 7
     842:	fc cf       	rjmp	.-8      	; 0x83c <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	e0 ec       	ldi	r30, 0xC0	; 192
     848:	f9 e0       	ldi	r31, 0x09	; 9
     84a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     84c:	80 91 c2 09 	lds	r24, 0x09C2
     850:	87 ff       	sbrs	r24, 7
     852:	fc cf       	rjmp	.-8      	; 0x84c <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     854:	80 91 c3 09 	lds	r24, 0x09C3
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	8f 71       	andi	r24, 0x1F	; 31
     85c:	85 30       	cpi	r24, 0x05	; 5
     85e:	09 f0       	breq	.+2      	; 0x862 <xmit_datablock+0x90>
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     866:	89 2f       	mov	r24, r25
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	08 95       	ret

00000870 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	d8 2e       	mov	r13, r24
     87c:	7a 01       	movw	r14, r20
     87e:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     880:	87 ff       	sbrs	r24, 7
     882:	0c c0       	rjmp	.+24     	; 0x89c <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     884:	87 e7       	ldi	r24, 0x77	; 119
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
		if (res > 1) return res;
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	08 f0       	brcs	.+2      	; 0x898 <send_cmd+0x28>
     896:	72 c0       	rjmp	.+228    	; 0x97c <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     898:	8f e7       	ldi	r24, 0x7F	; 127
     89a:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     89c:	80 e1       	ldi	r24, 0x10	; 16
     89e:	e0 e6       	ldi	r30, 0x60	; 96
     8a0:	f6 e0       	ldi	r31, 0x06	; 6
     8a2:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	e0 ec       	ldi	r30, 0xC0	; 192
     8a8:	f9 e0       	ldi	r31, 0x09	; 9
     8aa:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8ac:	80 91 c2 09 	lds	r24, 0x09C2
     8b0:	87 ff       	sbrs	r24, 7
     8b2:	fc cf       	rjmp	.-8      	; 0x8ac <send_cmd+0x3c>
	return SD_SPI.DATA;
     8b4:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     8b8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <select>
     8bc:	88 23       	and	r24, r24
     8be:	11 f4       	brne	.+4      	; 0x8c4 <send_cmd+0x54>
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	5c c0       	rjmp	.+184    	; 0x97c <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     8c4:	e0 ec       	ldi	r30, 0xC0	; 192
     8c6:	f9 e0       	ldi	r31, 0x09	; 9
     8c8:	d3 82       	std	Z+3, r13	; 0x03
     8ca:	80 91 c2 09 	lds	r24, 0x09C2
     8ce:	87 ff       	sbrs	r24, 7
     8d0:	fc cf       	rjmp	.-8      	; 0x8ca <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     8d2:	81 2f       	mov	r24, r17
     8d4:	99 27       	eor	r25, r25
     8d6:	aa 27       	eor	r26, r26
     8d8:	bb 27       	eor	r27, r27
     8da:	e0 ec       	ldi	r30, 0xC0	; 192
     8dc:	f9 e0       	ldi	r31, 0x09	; 9
     8de:	83 83       	std	Z+3, r24	; 0x03
     8e0:	80 91 c2 09 	lds	r24, 0x09C2
     8e4:	87 ff       	sbrs	r24, 7
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     8e8:	c8 01       	movw	r24, r16
     8ea:	aa 27       	eor	r26, r26
     8ec:	bb 27       	eor	r27, r27
     8ee:	e0 ec       	ldi	r30, 0xC0	; 192
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	83 83       	std	Z+3, r24	; 0x03
     8f4:	80 91 c2 09 	lds	r24, 0x09C2
     8f8:	87 ff       	sbrs	r24, 7
     8fa:	fc cf       	rjmp	.-8      	; 0x8f4 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     8fc:	bb 27       	eor	r27, r27
     8fe:	a1 2f       	mov	r26, r17
     900:	90 2f       	mov	r25, r16
     902:	8f 2d       	mov	r24, r15
     904:	e0 ec       	ldi	r30, 0xC0	; 192
     906:	f9 e0       	ldi	r31, 0x09	; 9
     908:	83 83       	std	Z+3, r24	; 0x03
     90a:	80 91 c2 09 	lds	r24, 0x09C2
     90e:	87 ff       	sbrs	r24, 7
     910:	fc cf       	rjmp	.-8      	; 0x90a <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     912:	e0 ec       	ldi	r30, 0xC0	; 192
     914:	f9 e0       	ldi	r31, 0x09	; 9
     916:	e3 82       	std	Z+3, r14	; 0x03
     918:	80 91 c2 09 	lds	r24, 0x09C2
     91c:	87 ff       	sbrs	r24, 7
     91e:	fc cf       	rjmp	.-8      	; 0x918 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     920:	80 e4       	ldi	r24, 0x40	; 64
     922:	d8 16       	cp	r13, r24
     924:	11 f4       	brne	.+4      	; 0x92a <send_cmd+0xba>
     926:	85 e9       	ldi	r24, 0x95	; 149
     928:	06 c0       	rjmp	.+12     	; 0x936 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     92a:	88 e4       	ldi	r24, 0x48	; 72
     92c:	d8 16       	cp	r13, r24
     92e:	11 f4       	brne	.+4      	; 0x934 <send_cmd+0xc4>
     930:	87 e8       	ldi	r24, 0x87	; 135
     932:	01 c0       	rjmp	.+2      	; 0x936 <send_cmd+0xc6>
     934:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     936:	e0 ec       	ldi	r30, 0xC0	; 192
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	83 83       	std	Z+3, r24	; 0x03
     93c:	80 91 c2 09 	lds	r24, 0x09C2
     940:	87 ff       	sbrs	r24, 7
     942:	fc cf       	rjmp	.-8      	; 0x93c <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     944:	8c e4       	ldi	r24, 0x4C	; 76
     946:	d8 16       	cp	r13, r24
     948:	51 f4       	brne	.+20     	; 0x95e <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	e0 ec       	ldi	r30, 0xC0	; 192
     94e:	f9 e0       	ldi	r31, 0x09	; 9
     950:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     952:	80 91 c2 09 	lds	r24, 0x09C2
     956:	87 ff       	sbrs	r24, 7
     958:	fc cf       	rjmp	.-8      	; 0x952 <send_cmd+0xe2>
	return SD_SPI.DATA;
     95a:	80 91 c3 09 	lds	r24, 0x09C3
     95e:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     960:	e0 ec       	ldi	r30, 0xC0	; 192
     962:	f9 e0       	ldi	r31, 0x09	; 9
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     968:	80 91 c2 09 	lds	r24, 0x09C2
     96c:	87 ff       	sbrs	r24, 7
     96e:	fc cf       	rjmp	.-8      	; 0x968 <send_cmd+0xf8>
	return SD_SPI.DATA;
     970:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     974:	87 ff       	sbrs	r24, 7
     976:	02 c0       	rjmp	.+4      	; 0x97c <send_cmd+0x10c>
     978:	91 50       	subi	r25, 0x01	; 1
     97a:	a9 f7       	brne	.-22     	; 0x966 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	08 95       	ret

00000988 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	df 93       	push	r29
     992:	cf 93       	push	r28
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	25 97       	sbiw	r28, 0x05	; 5
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	de bf       	out	0x3e, r29	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     99e:	88 23       	and	r24, r24
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <disk_initialize+0x1e>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	ed c0       	rjmp	.+474    	; 0xb80 <disk_initialize+0x1f8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     9a6:	80 91 5d 2b 	lds	r24, 0x2B5D
     9aa:	81 fd       	sbrc	r24, 1
     9ac:	e7 c0       	rjmp	.+462    	; 0xb7c <disk_initialize+0x1f4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     9ae:	e0 e6       	ldi	r30, 0x60	; 96
     9b0:	f6 e0       	ldi	r31, 0x06	; 6
     9b2:	80 eb       	ldi	r24, 0xB0	; 176
     9b4:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     9b6:	88 e3       	ldi	r24, 0x38	; 56
     9b8:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     9ba:	14 82       	std	Z+4, r1	; 0x04
     9bc:	8c e2       	ldi	r24, 0x2C	; 44
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	20 e7       	ldi	r18, 0x70	; 112
     9c2:	31 e0       	ldi	r19, 0x01	; 1
     9c4:	f9 01       	movw	r30, r18
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <disk_initialize+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9cc:	d9 f7       	brne	.-10     	; 0x9c4 <disk_initialize+0x3c>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     9ce:	8f b7       	in	r24, 0x3f	; 63
     9d0:	89 83       	std	Y+1, r24	; 0x01
    cli();
     9d2:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     9d4:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     9d6:	24 e0       	ldi	r18, 0x04	; 4
     9d8:	81 e4       	ldi	r24, 0x41	; 65
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	08 ed       	ldi	r16, 0xD8	; 216
     9e0:	04 bf       	out	0x34, r16	; 52
     9e2:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	8f bf       	out	0x3f, r24	; 63
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     9e8:	83 e5       	ldi	r24, 0x53	; 83
     9ea:	80 93 c0 09 	sts	0x09C0, r24
     9ee:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9f0:	e0 ec       	ldi	r30, 0xC0	; 192
     9f2:	f9 e0       	ldi	r31, 0x09	; 9
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9f8:	80 91 c2 09 	lds	r24, 0x09C2
     9fc:	87 ff       	sbrs	r24, 7
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <disk_initialize+0x70>
	return SD_SPI.DATA;
     a00:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     a04:	91 50       	subi	r25, 0x01	; 1
     a06:	b9 f7       	brne	.-18     	; 0x9f6 <disk_initialize+0x6e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     a08:	80 e4       	ldi	r24, 0x40	; 64
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	09 f0       	breq	.+2      	; 0xa1c <disk_initialize+0x94>
     a1a:	88 c0       	rjmp	.+272    	; 0xb2c <disk_initialize+0x1a4>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     a1c:	84 e6       	ldi	r24, 0x64	; 100
     a1e:	80 93 e4 2b 	sts	0x2BE4, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     a22:	88 e4       	ldi	r24, 0x48	; 72
     a24:	4a ea       	ldi	r20, 0xAA	; 170
     a26:	51 e0       	ldi	r21, 0x01	; 1
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	09 f0       	breq	.+2      	; 0xa36 <disk_initialize+0xae>
     a34:	54 c0       	rjmp	.+168    	; 0xade <disk_initialize+0x156>
     a36:	32 e0       	ldi	r19, 0x02	; 2
     a38:	e3 2e       	mov	r14, r19
     a3a:	f1 2c       	mov	r15, r1
     a3c:	ec 0e       	add	r14, r28
     a3e:	fd 1e       	adc	r15, r29
     a40:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a42:	e0 ec       	ldi	r30, 0xC0	; 192
     a44:	f9 e0       	ldi	r31, 0x09	; 9
     a46:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     a48:	9e 01       	movw	r18, r28
     a4a:	2a 5f       	subi	r18, 0xFA	; 250
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a4e:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a50:	80 91 c2 09 	lds	r24, 0x09C2
     a54:	87 ff       	sbrs	r24, 7
     a56:	fc cf       	rjmp	.-8      	; 0xa50 <disk_initialize+0xc8>
	return SD_SPI.DATA;
     a58:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     a5c:	d8 01       	movw	r26, r16
     a5e:	8d 93       	st	X+, r24
     a60:	8d 01       	movw	r16, r26
     a62:	a2 17       	cp	r26, r18
     a64:	b3 07       	cpc	r27, r19
     a66:	99 f7       	brne	.-26     	; 0xa4e <disk_initialize+0xc6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <disk_initialize+0xe8>
     a6e:	5e c0       	rjmp	.+188    	; 0xb2c <disk_initialize+0x1a4>
     a70:	8d 81       	ldd	r24, Y+5	; 0x05
     a72:	8a 3a       	cpi	r24, 0xAA	; 170
     a74:	09 f0       	breq	.+2      	; 0xa78 <disk_initialize+0xf0>
     a76:	5a c0       	rjmp	.+180    	; 0xb2c <disk_initialize+0x1a4>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     a78:	80 91 e4 2b 	lds	r24, 0x2BE4
     a7c:	88 23       	and	r24, r24
     a7e:	49 f0       	breq	.+18     	; 0xa92 <disk_initialize+0x10a>
     a80:	89 ee       	ldi	r24, 0xE9	; 233
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e4       	ldi	r23, 0x40	; 64
     a8a:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     a8e:	88 23       	and	r24, r24
     a90:	99 f7       	brne	.-26     	; 0xa78 <disk_initialize+0xf0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     a92:	80 91 e4 2b 	lds	r24, 0x2BE4
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <disk_initialize+0x114>
     a9a:	48 c0       	rjmp	.+144    	; 0xb2c <disk_initialize+0x1a4>
     a9c:	8a e7       	ldi	r24, 0x7A	; 122
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     aaa:	88 23       	and	r24, r24
     aac:	09 f0       	breq	.+2      	; 0xab0 <disk_initialize+0x128>
     aae:	3e c0       	rjmp	.+124    	; 0xb2c <disk_initialize+0x1a4>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ab0:	e0 ec       	ldi	r30, 0xC0	; 192
     ab2:	f9 e0       	ldi	r31, 0x09	; 9
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
     ab6:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ab8:	80 91 c2 09 	lds	r24, 0x09C2
     abc:	87 ff       	sbrs	r24, 7
     abe:	fc cf       	rjmp	.-8      	; 0xab8 <disk_initialize+0x130>
	return SD_SPI.DATA;
     ac0:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     ac4:	d7 01       	movw	r26, r14
     ac6:	8d 93       	st	X+, r24
     ac8:	7d 01       	movw	r14, r26
     aca:	a0 17       	cp	r26, r16
     acc:	b1 07       	cpc	r27, r17
     ace:	99 f7       	brne	.-26     	; 0xab6 <disk_initialize+0x12e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	86 fd       	sbrc	r24, 6
     ad4:	02 c0       	rjmp	.+4      	; 0xada <disk_initialize+0x152>
     ad6:	14 e0       	ldi	r17, 0x04	; 4
     ad8:	2a c0       	rjmp	.+84     	; 0xb2e <disk_initialize+0x1a6>
     ada:	1c e0       	ldi	r17, 0x0C	; 12
     adc:	28 c0       	rjmp	.+80     	; 0xb2e <disk_initialize+0x1a6>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     ade:	89 ee       	ldi	r24, 0xE9	; 233
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	18 f0       	brcs	.+6      	; 0xaf6 <disk_initialize+0x16e>
     af0:	01 e4       	ldi	r16, 0x41	; 65
     af2:	11 e0       	ldi	r17, 0x01	; 1
     af4:	02 c0       	rjmp	.+4      	; 0xafa <disk_initialize+0x172>
     af6:	09 ee       	ldi	r16, 0xE9	; 233
     af8:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     afa:	80 91 e4 2b 	lds	r24, 0x2BE4
     afe:	88 23       	and	r24, r24
     b00:	49 f0       	breq	.+18     	; 0xb14 <disk_initialize+0x18c>
     b02:	80 2f       	mov	r24, r16
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     b10:	88 23       	and	r24, r24
     b12:	99 f7       	brne	.-26     	; 0xafa <disk_initialize+0x172>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     b14:	80 91 e4 2b 	lds	r24, 0x2BE4
     b18:	88 23       	and	r24, r24
     b1a:	41 f0       	breq	.+16     	; 0xb2c <disk_initialize+0x1a4>
     b1c:	80 e5       	ldi	r24, 0x50	; 80
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	52 e0       	ldi	r21, 0x02	; 2
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     b2a:	81 11       	cpse	r24, r1
     b2c:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     b2e:	10 93 e6 2b 	sts	0x2BE6, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     b32:	80 e1       	ldi	r24, 0x10	; 16
     b34:	e0 e6       	ldi	r30, 0x60	; 96
     b36:	f6 e0       	ldi	r31, 0x06	; 6
     b38:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	e0 ec       	ldi	r30, 0xC0	; 192
     b3e:	f9 e0       	ldi	r31, 0x09	; 9
     b40:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b42:	80 91 c2 09 	lds	r24, 0x09C2
     b46:	87 ff       	sbrs	r24, 7
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <disk_initialize+0x1ba>
	return SD_SPI.DATA;
     b4a:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     b4e:	11 23       	and	r17, r17
     b50:	41 f0       	breq	.+16     	; 0xb62 <disk_initialize+0x1da>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     b52:	80 91 5d 2b 	lds	r24, 0x2B5D
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	80 93 5d 2b 	sts	0x2B5D, r24
		FCLK_FAST();
     b5c:	80 ed       	ldi	r24, 0xD0	; 208
     b5e:	80 93 c0 09 	sts	0x09C0, r24


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     b62:	8f b7       	in	r24, 0x3f	; 63
     b64:	89 83       	std	Y+1, r24	; 0x01
    cli();
     b66:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     b68:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	81 e4       	ldi	r24, 0x41	; 65
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	fc 01       	movw	r30, r24
     b72:	08 ed       	ldi	r16, 0xD8	; 216
     b74:	04 bf       	out	0x34, r16	; 52
     b76:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	8f bf       	out	0x3f, r24	; 63
	} else {			/* Initialization failed */
		power_off();
	}

	CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     b7c:	80 91 5d 2b 	lds	r24, 0x2B5D
}
     b80:	25 96       	adiw	r28, 0x05	; 5
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	08 95       	ret

00000b94 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     b94:	88 23       	and	r24, r24
     b96:	11 f0       	breq	.+4      	; 0xb9c <disk_status+0x8>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	08 95       	ret
	return Stat;
     b9c:	80 91 5d 2b 	lds	r24, 0x2B5D
}
     ba0:	08 95       	ret

00000ba2 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     ba2:	0f 93       	push	r16
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     baa:	88 23       	and	r24, r24
     bac:	09 f0       	breq	.+2      	; 0xbb0 <disk_read+0xe>
     bae:	53 c0       	rjmp	.+166    	; 0xc56 <disk_read+0xb4>
     bb0:	00 23       	and	r16, r16
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <disk_read+0x14>
     bb4:	50 c0       	rjmp	.+160    	; 0xc56 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     bb6:	80 91 5d 2b 	lds	r24, 0x2B5D
     bba:	80 ff       	sbrs	r24, 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <disk_read+0x20>
     bbe:	03 e0       	ldi	r16, 0x03	; 3
     bc0:	4b c0       	rjmp	.+150    	; 0xc58 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     bc2:	80 91 e6 2b 	lds	r24, 0x2BE6
     bc6:	83 fd       	sbrc	r24, 3
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <disk_read+0x36>
     bca:	69 e0       	ldi	r22, 0x09	; 9
     bcc:	22 0f       	add	r18, r18
     bce:	33 1f       	adc	r19, r19
     bd0:	44 1f       	adc	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	6a 95       	dec	r22
     bd6:	d1 f7       	brne	.-12     	; 0xbcc <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     bd8:	01 30       	cpi	r16, 0x01	; 1
     bda:	89 f4       	brne	.+34     	; 0xbfe <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     bdc:	81 e5       	ldi	r24, 0x51	; 81
     bde:	ba 01       	movw	r22, r20
     be0:	a9 01       	movw	r20, r18
     be2:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     be6:	88 23       	and	r24, r24
     be8:	21 f5       	brne	.+72     	; 0xc32 <disk_read+0x90>
     bea:	ce 01       	movw	r24, r28
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	72 e0       	ldi	r23, 0x02	; 2
     bf0:	0e 94 87 03 	call	0x70e	; 0x70e <rcvr_datablock>
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	88 23       	and	r24, r24
     bf8:	e1 f4       	brne	.+56     	; 0xc32 <disk_read+0x90>
     bfa:	01 e0       	ldi	r16, 0x01	; 1
     bfc:	1a c0       	rjmp	.+52     	; 0xc32 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     bfe:	82 e5       	ldi	r24, 0x52	; 82
     c00:	ba 01       	movw	r22, r20
     c02:	a9 01       	movw	r20, r18
     c04:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     c08:	88 23       	and	r24, r24
     c0a:	99 f4       	brne	.+38     	; 0xc32 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     c0c:	ce 01       	movw	r24, r28
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	72 e0       	ldi	r23, 0x02	; 2
     c12:	0e 94 87 03 	call	0x70e	; 0x70e <rcvr_datablock>
     c16:	88 23       	and	r24, r24
     c18:	29 f0       	breq	.+10     	; 0xc24 <disk_read+0x82>
				buff += 512;
			} while (--count);
     c1a:	01 50       	subi	r16, 0x01	; 1
     c1c:	19 f0       	breq	.+6      	; 0xc24 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     c1e:	c0 50       	subi	r28, 0x00	; 0
     c20:	de 4f       	sbci	r29, 0xFE	; 254
     c22:	f4 cf       	rjmp	.-24     	; 0xc0c <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     c24:	8c e4       	ldi	r24, 0x4C	; 76
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     c32:	80 e1       	ldi	r24, 0x10	; 16
     c34:	e0 e6       	ldi	r30, 0x60	; 96
     c36:	f6 e0       	ldi	r31, 0x06	; 6
     c38:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	e0 ec       	ldi	r30, 0xC0	; 192
     c3e:	f9 e0       	ldi	r31, 0x09	; 9
     c40:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c42:	80 91 c2 09 	lds	r24, 0x09C2
     c46:	87 ff       	sbrs	r24, 7
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <disk_read+0xa0>
	return SD_SPI.DATA;
     c4a:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     c4e:	00 23       	and	r16, r16
     c50:	19 f0       	breq	.+6      	; 0xc58 <disk_read+0xb6>
     c52:	01 e0       	ldi	r16, 0x01	; 1
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <disk_read+0xb6>
     c56:	04 e0       	ldi	r16, 0x04	; 4
}
     c58:	80 2f       	mov	r24, r16
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	eb 01       	movw	r28, r22
     c72:	69 01       	movw	r12, r18
     c74:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     c76:	88 23       	and	r24, r24
     c78:	09 f0       	breq	.+2      	; 0xc7c <disk_write+0x1a>
     c7a:	61 c0       	rjmp	.+194    	; 0xd3e <disk_write+0xdc>
     c7c:	00 23       	and	r16, r16
     c7e:	09 f4       	brne	.+2      	; 0xc82 <disk_write+0x20>
     c80:	5e c0       	rjmp	.+188    	; 0xd3e <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     c82:	80 91 5d 2b 	lds	r24, 0x2B5D
     c86:	80 ff       	sbrs	r24, 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <disk_write+0x2c>
     c8a:	03 e0       	ldi	r16, 0x03	; 3
     c8c:	59 c0       	rjmp	.+178    	; 0xd40 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     c8e:	80 91 5d 2b 	lds	r24, 0x2B5D
     c92:	82 ff       	sbrs	r24, 2
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <disk_write+0x38>
     c96:	02 e0       	ldi	r16, 0x02	; 2
     c98:	53 c0       	rjmp	.+166    	; 0xd40 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     c9a:	80 91 e6 2b 	lds	r24, 0x2BE6
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	83 fd       	sbrc	r24, 3
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <disk_write+0x50>
     ca4:	79 e0       	ldi	r23, 0x09	; 9
     ca6:	cc 0c       	add	r12, r12
     ca8:	dd 1c       	adc	r13, r13
     caa:	ee 1c       	adc	r14, r14
     cac:	ff 1c       	adc	r15, r15
     cae:	7a 95       	dec	r23
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     cb2:	01 30       	cpi	r16, 0x01	; 1
     cb4:	69 f4       	brne	.+26     	; 0xcd0 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     cb6:	88 e5       	ldi	r24, 0x58	; 88
     cb8:	b7 01       	movw	r22, r14
     cba:	a6 01       	movw	r20, r12
     cbc:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     cc0:	88 23       	and	r24, r24
     cc2:	59 f5       	brne	.+86     	; 0xd1a <disk_write+0xb8>
     cc4:	ce 01       	movw	r24, r28
     cc6:	6e ef       	ldi	r22, 0xFE	; 254
     cc8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <xmit_datablock>
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	22 c0       	rjmp	.+68     	; 0xd14 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     cd0:	86 70       	andi	r24, 0x06	; 6
     cd2:	90 70       	andi	r25, 0x00	; 0
     cd4:	89 2b       	or	r24, r25
     cd6:	39 f0       	breq	.+14     	; 0xce6 <disk_write+0x84>
     cd8:	40 2f       	mov	r20, r16
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	87 ed       	ldi	r24, 0xD7	; 215
     ce2:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     ce6:	89 e5       	ldi	r24, 0x59	; 89
     ce8:	b7 01       	movw	r22, r14
     cea:	a6 01       	movw	r20, r12
     cec:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     cf0:	88 23       	and	r24, r24
     cf2:	99 f4       	brne	.+38     	; 0xd1a <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     cf4:	ce 01       	movw	r24, r28
     cf6:	6c ef       	ldi	r22, 0xFC	; 252
     cf8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <xmit_datablock>
     cfc:	88 23       	and	r24, r24
     cfe:	29 f0       	breq	.+10     	; 0xd0a <disk_write+0xa8>
				buff += 512;
			} while (--count);
     d00:	01 50       	subi	r16, 0x01	; 1
     d02:	19 f0       	breq	.+6      	; 0xd0a <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     d04:	c0 50       	subi	r28, 0x00	; 0
     d06:	de 4f       	sbci	r29, 0xFE	; 254
     d08:	f5 cf       	rjmp	.-22     	; 0xcf4 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	6d ef       	ldi	r22, 0xFD	; 253
     d10:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <xmit_datablock>
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <disk_write+0xb8>
     d18:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d1a:	80 e1       	ldi	r24, 0x10	; 16
     d1c:	e0 e6       	ldi	r30, 0x60	; 96
     d1e:	f6 e0       	ldi	r31, 0x06	; 6
     d20:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d22:	8f ef       	ldi	r24, 0xFF	; 255
     d24:	e0 ec       	ldi	r30, 0xC0	; 192
     d26:	f9 e0       	ldi	r31, 0x09	; 9
     d28:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d2a:	80 91 c2 09 	lds	r24, 0x09C2
     d2e:	87 ff       	sbrs	r24, 7
     d30:	fc cf       	rjmp	.-8      	; 0xd2a <disk_write+0xc8>
	return SD_SPI.DATA;
     d32:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     d36:	00 23       	and	r16, r16
     d38:	19 f0       	breq	.+6      	; 0xd40 <disk_write+0xde>
     d3a:	01 e0       	ldi	r16, 0x01	; 1
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <disk_write+0xde>
     d3e:	04 e0       	ldi	r16, 0x04	; 4
}
     d40:	80 2f       	mov	r24, r16
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	08 95       	ret

00000d52 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	60 97       	sbiw	r28, 0x10	; 16
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     d68:	88 23       	and	r24, r24
     d6a:	09 f0       	breq	.+2      	; 0xd6e <disk_ioctl+0x1c>
     d6c:	b8 c1       	rjmp	.+880    	; 0x10de <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     d6e:	64 30       	cpi	r22, 0x04	; 4
     d70:	01 f5       	brne	.+64     	; 0xdb2 <disk_ioctl+0x60>
		switch (*ptr) {
     d72:	fa 01       	movw	r30, r20
     d74:	80 81       	ld	r24, Z
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	39 f0       	breq	.+14     	; 0xd88 <disk_ioctl+0x36>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <disk_ioctl+0x2e>
     d7e:	b1 c1       	rjmp	.+866    	; 0x10e2 <disk_ioctl+0x390>
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	09 f0       	breq	.+2      	; 0xd86 <disk_ioctl+0x34>
     d84:	ac c1       	rjmp	.+856    	; 0x10de <disk_ioctl+0x38c>
     d86:	11 c0       	rjmp	.+34     	; 0xdaa <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     d88:	e0 e6       	ldi	r30, 0x60	; 96
     d8a:	f6 e0       	ldi	r31, 0x06	; 6
     d8c:	80 eb       	ldi	r24, 0xB0	; 176
     d8e:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     d90:	88 e3       	ldi	r24, 0x38	; 56
     d92:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     d94:	14 82       	std	Z+4, r1	; 0x04
     d96:	8c e2       	ldi	r24, 0x2C	; 44
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	20 e7       	ldi	r18, 0x70	; 112
     d9c:	31 e0       	ldi	r19, 0x01	; 1
     d9e:	f9 01       	movw	r30, r18
     da0:	31 97       	sbiw	r30, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	d9 f7       	brne	.-10     	; 0xd9e <disk_ioctl+0x4c>
     da8:	9c c1       	rjmp	.+824    	; 0x10e2 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	fa 01       	movw	r30, r20
     dae:	81 83       	std	Z+1, r24	; 0x01
     db0:	98 c1       	rjmp	.+816    	; 0x10e2 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     db2:	80 91 5d 2b 	lds	r24, 0x2B5D
     db6:	80 ff       	sbrs	r24, 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <disk_ioctl+0x6c>
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	93 c1       	rjmp	.+806    	; 0x10e4 <disk_ioctl+0x392>

		switch (ctrl) {
     dbe:	6a 30       	cpi	r22, 0x0A	; 10
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <disk_ioctl+0x72>
     dc2:	2f c1       	rjmp	.+606    	; 0x1022 <disk_ioctl+0x2d0>
     dc4:	6b 30       	cpi	r22, 0x0B	; 11
     dc6:	50 f4       	brcc	.+20     	; 0xddc <disk_ioctl+0x8a>
     dc8:	61 30       	cpi	r22, 0x01	; 1
     dca:	51 f1       	breq	.+84     	; 0xe20 <disk_ioctl+0xce>
     dcc:	61 30       	cpi	r22, 0x01	; 1
     dce:	a0 f0       	brcs	.+40     	; 0xdf8 <disk_ioctl+0xa6>
     dd0:	62 30       	cpi	r22, 0x02	; 2
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <disk_ioctl+0x84>
     dd4:	86 c0       	rjmp	.+268    	; 0xee2 <disk_ioctl+0x190>
     dd6:	63 30       	cpi	r22, 0x03	; 3
     dd8:	69 f4       	brne	.+26     	; 0xdf4 <disk_ioctl+0xa2>
     dda:	89 c0       	rjmp	.+274    	; 0xeee <disk_ioctl+0x19c>
     ddc:	6c 30       	cpi	r22, 0x0C	; 12
     dde:	09 f4       	brne	.+2      	; 0xde2 <disk_ioctl+0x90>
     de0:	27 c1       	rjmp	.+590    	; 0x1030 <disk_ioctl+0x2de>
     de2:	6c 30       	cpi	r22, 0x0C	; 12
     de4:	08 f4       	brcc	.+2      	; 0xde8 <disk_ioctl+0x96>
     de6:	22 c1       	rjmp	.+580    	; 0x102c <disk_ioctl+0x2da>
     de8:	6d 30       	cpi	r22, 0x0D	; 13
     dea:	09 f4       	brne	.+2      	; 0xdee <disk_ioctl+0x9c>
     dec:	2e c1       	rjmp	.+604    	; 0x104a <disk_ioctl+0x2f8>
     dee:	6e 30       	cpi	r22, 0x0E	; 14
     df0:	09 f4       	brne	.+2      	; 0xdf4 <disk_ioctl+0xa2>
     df2:	4a c1       	rjmp	.+660    	; 0x1088 <disk_ioctl+0x336>
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	64 c1       	rjmp	.+712    	; 0x10c0 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     df8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <select>
     dfc:	88 23       	and	r24, r24
     dfe:	09 f4       	brne	.+2      	; 0xe02 <disk_ioctl+0xb0>
     e00:	5e c1       	rjmp	.+700    	; 0x10be <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     e02:	80 e1       	ldi	r24, 0x10	; 16
     e04:	e0 e6       	ldi	r30, 0x60	; 96
     e06:	f6 e0       	ldi	r31, 0x06	; 6
     e08:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	e0 ec       	ldi	r30, 0xC0	; 192
     e0e:	f9 e0       	ldi	r31, 0x09	; 9
     e10:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e12:	80 91 c2 09 	lds	r24, 0x09C2
     e16:	87 ff       	sbrs	r24, 7
     e18:	fc cf       	rjmp	.-8      	; 0xe12 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     e1a:	80 91 c3 09 	lds	r24, 0x09C3
     e1e:	ff c0       	rjmp	.+510    	; 0x101e <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     e20:	89 e4       	ldi	r24, 0x49	; 73
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     e2e:	88 23       	and	r24, r24
     e30:	09 f0       	breq	.+2      	; 0xe34 <disk_ioctl+0xe2>
     e32:	45 c1       	rjmp	.+650    	; 0x10be <disk_ioctl+0x36c>
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	60 e1       	ldi	r22, 0x10	; 16
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	0e 94 87 03 	call	0x70e	; 0x70e <rcvr_datablock>
     e40:	88 23       	and	r24, r24
     e42:	09 f4       	brne	.+2      	; 0xe46 <disk_ioctl+0xf4>
     e44:	3c c1       	rjmp	.+632    	; 0x10be <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	82 95       	swap	r24
     e4a:	86 95       	lsr	r24
     e4c:	86 95       	lsr	r24
     e4e:	83 70       	andi	r24, 0x03	; 3
     e50:	7a 85       	ldd	r23, Y+10	; 0x0a
     e52:	49 85       	ldd	r20, Y+9	; 0x09
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	89 f4       	brne	.+34     	; 0xe7a <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
     e58:	87 2f       	mov	r24, r23
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	34 2f       	mov	r19, r20
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	2a e0       	ldi	r18, 0x0A	; 10
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	aa 1f       	adc	r26, r26
     e72:	bb 1f       	adc	r27, r27
     e74:	2a 95       	dec	r18
     e76:	d1 f7       	brne	.-12     	; 0xe6c <disk_ioctl+0x11a>
     e78:	cd c0       	rjmp	.+410    	; 0x1014 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     e7a:	42 95       	swap	r20
     e7c:	46 95       	lsr	r20
     e7e:	46 95       	lsr	r20
     e80:	43 70       	andi	r20, 0x03	; 3
     e82:	28 85       	ldd	r18, Y+8	; 0x08
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	22 0f       	add	r18, r18
     e8c:	33 1f       	adc	r19, r19
     e8e:	24 0f       	add	r18, r20
     e90:	31 1d       	adc	r19, r1
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	8f 81       	ldd	r24, Y+7	; 0x07
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	83 70       	andi	r24, 0x03	; 3
     e9c:	90 70       	andi	r25, 0x00	; 0
     e9e:	98 2f       	mov	r25, r24
     ea0:	88 27       	eor	r24, r24
     ea2:	99 0f       	add	r25, r25
     ea4:	99 0f       	add	r25, r25
     ea6:	28 0f       	add	r18, r24
     ea8:	39 1f       	adc	r19, r25
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	8e 81       	ldd	r24, Y+6	; 0x06
     eb0:	8f 70       	andi	r24, 0x0F	; 15
     eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb4:	66 1f       	adc	r22, r22
     eb6:	66 27       	eor	r22, r22
     eb8:	66 1f       	adc	r22, r22
     eba:	86 0f       	add	r24, r22
     ebc:	8e 5f       	subi	r24, 0xFE	; 254
     ebe:	73 70       	andi	r23, 0x03	; 3
     ec0:	77 0f       	add	r23, r23
     ec2:	87 0f       	add	r24, r23
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	09 97       	sbiw	r24, 0x09	; 9
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <disk_ioctl+0x180>
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	44 1f       	adc	r20, r20
     ed0:	55 1f       	adc	r21, r21
     ed2:	8a 95       	dec	r24
     ed4:	d2 f7       	brpl	.-12     	; 0xeca <disk_ioctl+0x178>
     ed6:	f8 01       	movw	r30, r16
     ed8:	20 83       	st	Z, r18
     eda:	31 83       	std	Z+1, r19	; 0x01
     edc:	42 83       	std	Z+2, r20	; 0x02
     ede:	53 83       	std	Z+3, r21	; 0x03
     ee0:	9e c0       	rjmp	.+316    	; 0x101e <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	fa 01       	movw	r30, r20
     ee8:	80 83       	st	Z, r24
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	98 c0       	rjmp	.+304    	; 0x101e <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
     eee:	80 91 e6 2b 	lds	r24, 0x2BE6
     ef2:	f8 2e       	mov	r15, r24
     ef4:	82 ff       	sbrs	r24, 2
     ef6:	39 c0       	rjmp	.+114    	; 0xf6a <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     ef8:	8d ec       	ldi	r24, 0xCD	; 205
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     f06:	88 23       	and	r24, r24
     f08:	09 f0       	breq	.+2      	; 0xf0c <disk_ioctl+0x1ba>
     f0a:	d9 c0       	rjmp	.+434    	; 0x10be <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	e0 ec       	ldi	r30, 0xC0	; 192
     f10:	f9 e0       	ldi	r31, 0x09	; 9
     f12:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     f14:	80 91 c2 09 	lds	r24, 0x09C2
     f18:	87 ff       	sbrs	r24, 7
     f1a:	fc cf       	rjmp	.-8      	; 0xf14 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
     f1c:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	60 e1       	ldi	r22, 0x10	; 16
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 87 03 	call	0x70e	; 0x70e <rcvr_datablock>
     f2c:	88 23       	and	r24, r24
     f2e:	09 f4       	brne	.+2      	; 0xf32 <disk_ioctl+0x1e0>
     f30:	c6 c0       	rjmp	.+396    	; 0x10be <disk_ioctl+0x36c>
     f32:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     f34:	e0 ec       	ldi	r30, 0xC0	; 192
     f36:	f9 e0       	ldi	r31, 0x09	; 9
     f38:	2f ef       	ldi	r18, 0xFF	; 255
     f3a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     f3c:	80 91 c2 09 	lds	r24, 0x09C2
     f40:	87 ff       	sbrs	r24, 7
     f42:	fc cf       	rjmp	.-8      	; 0xf3c <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
     f44:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
     f48:	91 50       	subi	r25, 0x01	; 1
     f4a:	b9 f7       	brne	.-18     	; 0xf3a <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     f4c:	2b 85       	ldd	r18, Y+11	; 0x0b
     f4e:	22 95       	swap	r18
     f50:	2f 70       	andi	r18, 0x0F	; 15
     f52:	80 e1       	ldi	r24, 0x10	; 16
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <disk_ioctl+0x212>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	aa 1f       	adc	r26, r26
     f62:	bb 1f       	adc	r27, r27
     f64:	2a 95       	dec	r18
     f66:	d2 f7       	brpl	.-12     	; 0xf5c <disk_ioctl+0x20a>
     f68:	55 c0       	rjmp	.+170    	; 0x1014 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     f6a:	89 e4       	ldi	r24, 0x49	; 73
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
     f78:	88 23       	and	r24, r24
     f7a:	09 f0       	breq	.+2      	; 0xf7e <disk_ioctl+0x22c>
     f7c:	a0 c0       	rjmp	.+320    	; 0x10be <disk_ioctl+0x36c>
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	60 e1       	ldi	r22, 0x10	; 16
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	0e 94 87 03 	call	0x70e	; 0x70e <rcvr_datablock>
     f8a:	88 23       	and	r24, r24
     f8c:	09 f4       	brne	.+2      	; 0xf90 <disk_ioctl+0x23e>
     f8e:	97 c0       	rjmp	.+302    	; 0x10be <disk_ioctl+0x36c>
     f90:	4b 85       	ldd	r20, Y+11	; 0x0b
     f92:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
     f94:	f1 fe       	sbrs	r15, 1
     f96:	1b c0       	rjmp	.+54     	; 0xfce <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     f98:	88 1f       	adc	r24, r24
     f9a:	88 27       	eor	r24, r24
     f9c:	88 1f       	adc	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	24 2f       	mov	r18, r20
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	2f 73       	andi	r18, 0x3F	; 63
     fa8:	30 70       	andi	r19, 0x00	; 0
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	82 0f       	add	r24, r18
     fb0:	93 1f       	adc	r25, r19
     fb2:	2e 85       	ldd	r18, Y+14	; 0x0e
     fb4:	22 95       	swap	r18
     fb6:	26 95       	lsr	r18
     fb8:	26 95       	lsr	r18
     fba:	23 70       	andi	r18, 0x03	; 3
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	21 50       	subi	r18, 0x01	; 1
     fc0:	30 40       	sbci	r19, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <disk_ioctl+0x276>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	2a 95       	dec	r18
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <disk_ioctl+0x272>
     fcc:	21 c0       	rjmp	.+66     	; 0x1010 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	23 70       	andi	r18, 0x03	; 3
     fd4:	30 70       	andi	r19, 0x00	; 0
     fd6:	f3 e0       	ldi	r31, 0x03	; 3
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	fa 95       	dec	r31
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <disk_ioctl+0x286>
     fe0:	82 95       	swap	r24
     fe2:	86 95       	lsr	r24
     fe4:	87 70       	andi	r24, 0x07	; 7
     fe6:	28 0f       	add	r18, r24
     fe8:	31 1d       	adc	r19, r1
     fea:	2f 5f       	subi	r18, 0xFF	; 255
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	84 2f       	mov	r24, r20
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	8c 77       	andi	r24, 0x7C	; 124
     ff4:	90 70       	andi	r25, 0x00	; 0
     ff6:	95 95       	asr	r25
     ff8:	87 95       	ror	r24
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	ac 01       	movw	r20, r24
    1002:	24 9f       	mul	r18, r20
    1004:	c0 01       	movw	r24, r0
    1006:	25 9f       	mul	r18, r21
    1008:	90 0d       	add	r25, r0
    100a:	34 9f       	mul	r19, r20
    100c:	90 0d       	add	r25, r0
    100e:	11 24       	eor	r1, r1
    1010:	a0 e0       	ldi	r26, 0x00	; 0
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	4f c0       	rjmp	.+158    	; 0x10c0 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    1022:	80 91 e6 2b 	lds	r24, 0x2BE6
    1026:	fa 01       	movw	r30, r20
    1028:	80 83       	st	Z, r24
    102a:	f9 cf       	rjmp	.-14     	; 0x101e <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    102c:	89 e4       	ldi	r24, 0x49	; 73
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1030:	8a e4       	ldi	r24, 0x4A	; 74
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
    103e:	88 23       	and	r24, r24
    1040:	f1 f5       	brne	.+124    	; 0x10be <disk_ioctl+0x36c>
    1042:	c8 01       	movw	r24, r16
    1044:	60 e1       	ldi	r22, 0x10	; 16
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	35 c0       	rjmp	.+106    	; 0x10b4 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    104a:	8a e7       	ldi	r24, 0x7A	; 122
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
    1058:	88 23       	and	r24, r24
    105a:	89 f5       	brne	.+98     	; 0x10be <disk_ioctl+0x36c>
    105c:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    105e:	a0 ec       	ldi	r26, 0xC0	; 192
    1060:	b9 e0       	ldi	r27, 0x09	; 9
    1062:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1064:	98 01       	movw	r18, r16
    1066:	2d 5f       	subi	r18, 0xFD	; 253
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    106a:	13 96       	adiw	r26, 0x03	; 3
    106c:	9c 93       	st	X, r25
    106e:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1070:	80 91 c2 09 	lds	r24, 0x09C2
    1074:	87 ff       	sbrs	r24, 7
    1076:	fc cf       	rjmp	.-8      	; 0x1070 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1078:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    107c:	80 83       	st	Z, r24
    107e:	e2 17       	cp	r30, r18
    1080:	f3 07       	cpc	r31, r19
    1082:	69 f2       	breq	.-102    	; 0x101e <disk_ioctl+0x2cc>
    1084:	31 96       	adiw	r30, 0x01	; 1
    1086:	f1 cf       	rjmp	.-30     	; 0x106a <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1088:	8d ec       	ldi	r24, 0xCD	; 205
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	0e 94 38 04 	call	0x870	; 0x870 <send_cmd>
    1096:	88 23       	and	r24, r24
    1098:	91 f4       	brne	.+36     	; 0x10be <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	e0 ec       	ldi	r30, 0xC0	; 192
    109e:	f9 e0       	ldi	r31, 0x09	; 9
    10a0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10a2:	80 91 c2 09 	lds	r24, 0x09C2
    10a6:	87 ff       	sbrs	r24, 7
    10a8:	fc cf       	rjmp	.-8      	; 0x10a2 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    10aa:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    10ae:	c8 01       	movw	r24, r16
    10b0:	60 e4       	ldi	r22, 0x40	; 64
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	0e 94 87 03 	call	0x70e	; 0x70e <rcvr_datablock>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	88 23       	and	r24, r24
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <disk_ioctl+0x36e>
    10be:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	e0 e6       	ldi	r30, 0x60	; 96
    10c4:	f6 e0       	ldi	r31, 0x06	; 6
    10c6:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	e0 ec       	ldi	r30, 0xC0	; 192
    10cc:	f9 e0       	ldi	r31, 0x09	; 9
    10ce:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10d0:	80 91 c2 09 	lds	r24, 0x09C2
    10d4:	87 ff       	sbrs	r24, 7
    10d6:	fc cf       	rjmp	.-8      	; 0x10d0 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    10d8:	80 91 c3 09 	lds	r24, 0x09C3
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <disk_ioctl+0x392>
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <disk_ioctl+0x392>
    10e2:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    10e4:	89 2f       	mov	r24, r25
    10e6:	60 96       	adiw	r28, 0x10	; 16
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	08 95       	ret

000010f8 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    10f8:	80 91 e4 2b 	lds	r24, 0x2BE4
    if (n) Timer1 = --n;
    10fc:	88 23       	and	r24, r24
    10fe:	19 f0       	breq	.+6      	; 0x1106 <disk_timerproc+0xe>
    1100:	81 50       	subi	r24, 0x01	; 1
    1102:	80 93 e4 2b 	sts	0x2BE4, r24
    n = Timer2;
    1106:	80 91 e5 2b 	lds	r24, 0x2BE5
    if (n) Timer2 = --n;
    110a:	88 23       	and	r24, r24
    110c:	19 f0       	breq	.+6      	; 0x1114 <disk_timerproc+0x1c>
    110e:	81 50       	subi	r24, 0x01	; 1
    1110:	80 93 e5 2b 	sts	0x2BE5, r24

	s = Stat;
    1114:	80 91 5d 2b 	lds	r24, 0x2B5D

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    1118:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    111a:	80 93 5d 2b 	sts	0x2B5D, r24
}
    111e:	08 95       	ret

00001120 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	08 95       	ret

0000112a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    112a:	6f 92       	push	r6
    112c:	7f 92       	push	r7
    112e:	8f 92       	push	r8
    1130:	9f 92       	push	r9
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
    1148:	4a 01       	movw	r8, r20
    114a:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    114c:	ca a4       	ldd	r12, Y+42	; 0x2a
    114e:	db a4       	ldd	r13, Y+43	; 0x2b
    1150:	ec a4       	ldd	r14, Y+44	; 0x2c
    1152:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1154:	c4 16       	cp	r12, r20
    1156:	d5 06       	cpc	r13, r21
    1158:	e6 06       	cpc	r14, r22
    115a:	f7 06       	cpc	r15, r23
    115c:	09 f4       	brne	.+2      	; 0x1160 <move_window+0x36>
    115e:	4e c0       	rjmp	.+156    	; 0x11fc <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	88 23       	and	r24, r24
    1164:	a1 f1       	breq	.+104    	; 0x11ce <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    1166:	3e e2       	ldi	r19, 0x2E	; 46
    1168:	63 2e       	mov	r6, r19
    116a:	71 2c       	mov	r7, r1
    116c:	6c 0e       	add	r6, r28
    116e:	7d 1e       	adc	r7, r29
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	b3 01       	movw	r22, r6
    1174:	a7 01       	movw	r20, r14
    1176:	96 01       	movw	r18, r12
    1178:	01 e0       	ldi	r16, 0x01	; 1
    117a:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
    117e:	88 23       	and	r24, r24
    1180:	d9 f5       	brne	.+118    	; 0x11f8 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1182:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    1184:	8e 89       	ldd	r24, Y+22	; 0x16
    1186:	9f 89       	ldd	r25, Y+23	; 0x17
    1188:	a8 8d       	ldd	r26, Y+24	; 0x18
    118a:	b9 8d       	ldd	r27, Y+25	; 0x19
    118c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    118e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1190:	48 a1       	ldd	r20, Y+32	; 0x20
    1192:	59 a1       	ldd	r21, Y+33	; 0x21
    1194:	82 0f       	add	r24, r18
    1196:	93 1f       	adc	r25, r19
    1198:	a4 1f       	adc	r26, r20
    119a:	b5 1f       	adc	r27, r21
    119c:	c8 16       	cp	r12, r24
    119e:	d9 06       	cpc	r13, r25
    11a0:	ea 06       	cpc	r14, r26
    11a2:	fb 06       	cpc	r15, r27
    11a4:	a0 f4       	brcc	.+40     	; 0x11ce <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    11a6:	1b 81       	ldd	r17, Y+3	; 0x03
    11a8:	10 c0       	rjmp	.+32     	; 0x11ca <move_window+0xa0>
					wsect += fs->sects_fat;
    11aa:	8e 89       	ldd	r24, Y+22	; 0x16
    11ac:	9f 89       	ldd	r25, Y+23	; 0x17
    11ae:	a8 8d       	ldd	r26, Y+24	; 0x18
    11b0:	b9 8d       	ldd	r27, Y+25	; 0x19
    11b2:	c8 0e       	add	r12, r24
    11b4:	d9 1e       	adc	r13, r25
    11b6:	ea 1e       	adc	r14, r26
    11b8:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	b3 01       	movw	r22, r6
    11be:	a7 01       	movw	r20, r14
    11c0:	96 01       	movw	r18, r12
    11c2:	01 e0       	ldi	r16, 0x01	; 1
    11c4:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    11c8:	11 50       	subi	r17, 0x01	; 1
    11ca:	12 30       	cpi	r17, 0x02	; 2
    11cc:	70 f7       	brcc	.-36     	; 0x11aa <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    11ce:	81 14       	cp	r8, r1
    11d0:	91 04       	cpc	r9, r1
    11d2:	a1 04       	cpc	r10, r1
    11d4:	b1 04       	cpc	r11, r1
    11d6:	91 f0       	breq	.+36     	; 0x11fc <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    11d8:	be 01       	movw	r22, r28
    11da:	62 5d       	subi	r22, 0xD2	; 210
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	a5 01       	movw	r20, r10
    11e2:	94 01       	movw	r18, r8
    11e4:	01 e0       	ldi	r16, 0x01	; 1
    11e6:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    11ea:	88 23       	and	r24, r24
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    11ee:	8a a6       	std	Y+42, r8	; 0x2a
    11f0:	9b a6       	std	Y+43, r9	; 0x2b
    11f2:	ac a6       	std	Y+44, r10	; 0x2c
    11f4:	bd a6       	std	Y+45, r11	; 0x2d
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <move_window+0xd4>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <move_window+0xd4>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	af 90       	pop	r10
    1212:	9f 90       	pop	r9
    1214:	8f 90       	pop	r8
    1216:	7f 90       	pop	r7
    1218:	6f 90       	pop	r6
    121a:	08 95       	ret

0000121c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    121c:	0f 93       	push	r16
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
	if (res == FR_OK) {
    1230:	88 23       	and	r24, r24
    1232:	09 f0       	breq	.+2      	; 0x1236 <sync+0x1a>
    1234:	7e c0       	rjmp	.+252    	; 0x1332 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1236:	88 81       	ld	r24, Y
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	09 f0       	breq	.+2      	; 0x123e <sync+0x22>
    123c:	72 c0       	rjmp	.+228    	; 0x1322 <sync+0x106>
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	88 23       	and	r24, r24
    1242:	09 f4       	brne	.+2      	; 0x1246 <sync+0x2a>
    1244:	6e c0       	rjmp	.+220    	; 0x1322 <sync+0x106>
			fs->winsect = 0;
    1246:	1a a6       	std	Y+42, r1	; 0x2a
    1248:	1b a6       	std	Y+43, r1	; 0x2b
    124a:	1c a6       	std	Y+44, r1	; 0x2c
    124c:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    124e:	be 01       	movw	r22, r28
    1250:	62 5d       	subi	r22, 0xD2	; 210
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	fb 01       	movw	r30, r22
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	01 c0       	rjmp	.+2      	; 0x125e <sync+0x42>
	while (cnt--) *d++ = (char)val;
    125c:	11 92       	st	Z+, r1
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	2f ef       	ldi	r18, 0xFF	; 255
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	92 07       	cpc	r25, r18
    1266:	d1 f7       	brne	.-12     	; 0x125c <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1268:	c4 5d       	subi	r28, 0xD4	; 212
    126a:	dd 4f       	sbci	r29, 0xFD	; 253
    126c:	85 e5       	ldi	r24, 0x55	; 85
    126e:	89 93       	st	Y+, r24
    1270:	8a ea       	ldi	r24, 0xAA	; 170
    1272:	88 83       	st	Y, r24
    1274:	cd 52       	subi	r28, 0x2D	; 45
    1276:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1278:	82 e5       	ldi	r24, 0x52	; 82
    127a:	8e a7       	std	Y+46, r24	; 0x2e
    127c:	8f a7       	std	Y+47, r24	; 0x2f
    127e:	21 e6       	ldi	r18, 0x61	; 97
    1280:	28 ab       	std	Y+48, r18	; 0x30
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1286:	ce 5e       	subi	r28, 0xEE	; 238
    1288:	dd 4f       	sbci	r29, 0xFD	; 253
    128a:	82 e7       	ldi	r24, 0x72	; 114
    128c:	89 93       	st	Y+, r24
    128e:	89 93       	st	Y+, r24
    1290:	99 93       	st	Y+, r25
    1292:	28 83       	st	Y, r18
    1294:	c5 51       	subi	r28, 0x15	; 21
    1296:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1298:	8e 85       	ldd	r24, Y+14	; 0x0e
    129a:	ca 5e       	subi	r28, 0xEA	; 234
    129c:	dd 4f       	sbci	r29, 0xFD	; 253
    129e:	88 83       	st	Y, r24
    12a0:	c6 51       	subi	r28, 0x16	; 22
    12a2:	d2 40       	sbci	r29, 0x02	; 2
    12a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a6:	c9 5e       	subi	r28, 0xE9	; 233
    12a8:	dd 4f       	sbci	r29, 0xFD	; 253
    12aa:	88 83       	st	Y, r24
    12ac:	c7 51       	subi	r28, 0x17	; 23
    12ae:	d2 40       	sbci	r29, 0x02	; 2
    12b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b4:	a8 89       	ldd	r26, Y+16	; 0x10
    12b6:	b9 89       	ldd	r27, Y+17	; 0x11
    12b8:	9d 01       	movw	r18, r26
    12ba:	44 27       	eor	r20, r20
    12bc:	55 27       	eor	r21, r21
    12be:	c8 5e       	subi	r28, 0xE8	; 232
    12c0:	dd 4f       	sbci	r29, 0xFD	; 253
    12c2:	28 83       	st	Y, r18
    12c4:	21 96       	adiw	r28, 0x01	; 1
    12c6:	8b 2f       	mov	r24, r27
    12c8:	99 27       	eor	r25, r25
    12ca:	aa 27       	eor	r26, r26
    12cc:	bb 27       	eor	r27, r27
    12ce:	88 83       	st	Y, r24
    12d0:	c9 51       	subi	r28, 0x19	; 25
    12d2:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    12d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d6:	c6 5e       	subi	r28, 0xE6	; 230
    12d8:	dd 4f       	sbci	r29, 0xFD	; 253
    12da:	88 83       	st	Y, r24
    12dc:	ca 51       	subi	r28, 0x1A	; 26
    12de:	d2 40       	sbci	r29, 0x02	; 2
    12e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e2:	c5 5e       	subi	r28, 0xE5	; 229
    12e4:	dd 4f       	sbci	r29, 0xFD	; 253
    12e6:	88 83       	st	Y, r24
    12e8:	cb 51       	subi	r28, 0x1B	; 27
    12ea:	d2 40       	sbci	r29, 0x02	; 2
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    12f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    12f4:	9d 01       	movw	r18, r26
    12f6:	44 27       	eor	r20, r20
    12f8:	55 27       	eor	r21, r21
    12fa:	c4 5e       	subi	r28, 0xE4	; 228
    12fc:	dd 4f       	sbci	r29, 0xFD	; 253
    12fe:	28 83       	st	Y, r18
    1300:	21 96       	adiw	r28, 0x01	; 1
    1302:	8b 2f       	mov	r24, r27
    1304:	99 27       	eor	r25, r25
    1306:	aa 27       	eor	r26, r26
    1308:	bb 27       	eor	r27, r27
    130a:	88 83       	st	Y, r24
    130c:	cd 51       	subi	r28, 0x1D	; 29
    130e:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    1310:	2a 89       	ldd	r18, Y+18	; 0x12
    1312:	3b 89       	ldd	r19, Y+19	; 0x13
    1314:	4c 89       	ldd	r20, Y+20	; 0x14
    1316:	5d 89       	ldd	r21, Y+21	; 0x15
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	01 e0       	ldi	r16, 0x01	; 1
    131c:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
			fs->fsi_flag = 0;
    1320:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	0e 94 a9 06 	call	0xd52	; 0xd52 <disk_ioctl>
    132e:	81 11       	cpse	r24, r1
    1330:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	0f 91       	pop	r16
    1338:	08 95       	ret

0000133a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	4c 01       	movw	r8, r24
    1356:	7a 01       	movw	r14, r20
    1358:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    135a:	42 30       	cpi	r20, 0x02	; 2
    135c:	51 05       	cpc	r21, r1
    135e:	61 05       	cpc	r22, r1
    1360:	71 05       	cpc	r23, r1
    1362:	08 f4       	brcc	.+2      	; 0x1366 <get_fat+0x2c>
    1364:	bb c0       	rjmp	.+374    	; 0x14dc <get_fat+0x1a2>
    1366:	f4 01       	movw	r30, r8
    1368:	82 8d       	ldd	r24, Z+26	; 0x1a
    136a:	93 8d       	ldd	r25, Z+27	; 0x1b
    136c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    136e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1370:	48 17       	cp	r20, r24
    1372:	59 07       	cpc	r21, r25
    1374:	6a 07       	cpc	r22, r26
    1376:	7b 07       	cpc	r23, r27
    1378:	08 f0       	brcs	.+2      	; 0x137c <get_fat+0x42>
    137a:	b0 c0       	rjmp	.+352    	; 0x14dc <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    137c:	a6 8c       	ldd	r10, Z+30	; 0x1e
    137e:	b7 8c       	ldd	r11, Z+31	; 0x1f
    1380:	c0 a0       	ldd	r12, Z+32	; 0x20
    1382:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    1384:	80 81       	ld	r24, Z
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	09 f4       	brne	.+2      	; 0x138c <get_fat+0x52>
    138a:	4d c0       	rjmp	.+154    	; 0x1426 <get_fat+0xec>
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	09 f4       	brne	.+2      	; 0x1392 <get_fat+0x58>
    1390:	68 c0       	rjmp	.+208    	; 0x1462 <get_fat+0x128>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	09 f0       	breq	.+2      	; 0x1398 <get_fat+0x5e>
    1396:	a7 c0       	rjmp	.+334    	; 0x14e6 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    1398:	ea 01       	movw	r28, r20
    139a:	d6 95       	lsr	r29
    139c:	c7 95       	ror	r28
    139e:	c4 0f       	add	r28, r20
    13a0:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    13a2:	ae 01       	movw	r20, r28
    13a4:	45 2f       	mov	r20, r21
    13a6:	55 27       	eor	r21, r21
    13a8:	46 95       	lsr	r20
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	4a 0d       	add	r20, r10
    13b0:	5b 1d       	adc	r21, r11
    13b2:	6c 1d       	adc	r22, r12
    13b4:	7d 1d       	adc	r23, r13
    13b6:	c4 01       	movw	r24, r8
    13b8:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    13bc:	88 23       	and	r24, r24
    13be:	09 f0       	breq	.+2      	; 0x13c2 <get_fat+0x88>
    13c0:	92 c0       	rjmp	.+292    	; 0x14e6 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    13c2:	fe 01       	movw	r30, r28
    13c4:	f1 70       	andi	r31, 0x01	; 1
    13c6:	e8 0d       	add	r30, r8
    13c8:	f9 1d       	adc	r31, r9
    13ca:	76 a4       	ldd	r7, Z+46	; 0x2e
    13cc:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    13ce:	ae 01       	movw	r20, r28
    13d0:	45 2f       	mov	r20, r21
    13d2:	55 27       	eor	r21, r21
    13d4:	46 95       	lsr	r20
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	4a 0d       	add	r20, r10
    13dc:	5b 1d       	adc	r21, r11
    13de:	6c 1d       	adc	r22, r12
    13e0:	7d 1d       	adc	r23, r13
    13e2:	c4 01       	movw	r24, r8
    13e4:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    13e8:	88 23       	and	r24, r24
    13ea:	09 f0       	breq	.+2      	; 0x13ee <get_fat+0xb4>
    13ec:	7c c0       	rjmp	.+248    	; 0x14e6 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    13ee:	67 2d       	mov	r22, r7
    13f0:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    13f2:	d1 70       	andi	r29, 0x01	; 1
    13f4:	c8 0d       	add	r28, r8
    13f6:	d9 1d       	adc	r29, r9
    13f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	68 2b       	or	r22, r24
    13fe:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1400:	c7 01       	movw	r24, r14
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	89 2b       	or	r24, r25
    1408:	39 f0       	breq	.+14     	; 0x1418 <get_fat+0xde>
    140a:	44 e0       	ldi	r20, 0x04	; 4
    140c:	76 95       	lsr	r23
    140e:	67 95       	ror	r22
    1410:	4a 95       	dec	r20
    1412:	e1 f7       	brne	.-8      	; 0x140c <get_fat+0xd2>
    1414:	9b 01       	movw	r18, r22
    1416:	22 c0       	rjmp	.+68     	; 0x145c <get_fat+0x122>
    1418:	9b 01       	movw	r18, r22
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	3f 70       	andi	r19, 0x0F	; 15
    1420:	40 70       	andi	r20, 0x00	; 0
    1422:	50 70       	andi	r21, 0x00	; 0
    1424:	64 c0       	rjmp	.+200    	; 0x14ee <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    1426:	45 2f       	mov	r20, r21
    1428:	56 2f       	mov	r21, r22
    142a:	67 2f       	mov	r22, r23
    142c:	77 27       	eor	r23, r23
    142e:	4a 0d       	add	r20, r10
    1430:	5b 1d       	adc	r21, r11
    1432:	6c 1d       	adc	r22, r12
    1434:	7d 1d       	adc	r23, r13
    1436:	c4 01       	movw	r24, r8
    1438:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    143c:	88 23       	and	r24, r24
    143e:	09 f0       	breq	.+2      	; 0x1442 <get_fat+0x108>
    1440:	52 c0       	rjmp	.+164    	; 0x14e6 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1442:	f7 01       	movw	r30, r14
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	f1 70       	andi	r31, 0x01	; 1
    144a:	e8 0d       	add	r30, r8
    144c:	f9 1d       	adc	r31, r9
    144e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	26 a5       	ldd	r18, Z+46	; 0x2e
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	82 2b       	or	r24, r18
    1458:	93 2b       	or	r25, r19
    145a:	9c 01       	movw	r18, r24
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	46 c0       	rjmp	.+140    	; 0x14ee <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    1462:	97 e0       	ldi	r25, 0x07	; 7
    1464:	76 95       	lsr	r23
    1466:	67 95       	ror	r22
    1468:	57 95       	ror	r21
    146a:	47 95       	ror	r20
    146c:	9a 95       	dec	r25
    146e:	d1 f7       	brne	.-12     	; 0x1464 <get_fat+0x12a>
    1470:	4a 0d       	add	r20, r10
    1472:	5b 1d       	adc	r21, r11
    1474:	6c 1d       	adc	r22, r12
    1476:	7d 1d       	adc	r23, r13
    1478:	c4 01       	movw	r24, r8
    147a:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    147e:	88 23       	and	r24, r24
    1480:	91 f5       	brne	.+100    	; 0x14e6 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    1482:	f7 01       	movw	r30, r14
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	f1 70       	andi	r31, 0x01	; 1
    148e:	e8 0d       	add	r30, r8
    1490:	f9 1d       	adc	r31, r9
    1492:	81 a9       	ldd	r24, Z+49	; 0x31
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	58 2f       	mov	r21, r24
    149c:	44 27       	eor	r20, r20
    149e:	33 27       	eor	r19, r19
    14a0:	22 27       	eor	r18, r18
    14a2:	80 a9       	ldd	r24, Z+48	; 0x30
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	dc 01       	movw	r26, r24
    14ac:	99 27       	eor	r25, r25
    14ae:	88 27       	eor	r24, r24
    14b0:	28 2b       	or	r18, r24
    14b2:	39 2b       	or	r19, r25
    14b4:	4a 2b       	or	r20, r26
    14b6:	5b 2b       	or	r21, r27
    14b8:	86 a5       	ldd	r24, Z+46	; 0x2e
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	28 2b       	or	r18, r24
    14c2:	39 2b       	or	r19, r25
    14c4:	4a 2b       	or	r20, r26
    14c6:	5b 2b       	or	r21, r27
    14c8:	97 a5       	ldd	r25, Z+47	; 0x2f
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	28 2b       	or	r18, r24
    14d2:	39 2b       	or	r19, r25
    14d4:	4a 2b       	or	r20, r26
    14d6:	5b 2b       	or	r21, r27
    14d8:	5f 70       	andi	r21, 0x0F	; 15
    14da:	09 c0       	rjmp	.+18     	; 0x14ee <get_fat+0x1b4>
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <get_fat+0x1b4>
    14e6:	2f ef       	ldi	r18, 0xFF	; 255
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	4f ef       	ldi	r20, 0xFF	; 255
    14ec:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    14ee:	b9 01       	movw	r22, r18
    14f0:	ca 01       	movw	r24, r20
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	08 95       	ret

0000150e <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    150e:	2f 92       	push	r2
    1510:	3f 92       	push	r3
    1512:	4f 92       	push	r4
    1514:	5f 92       	push	r5
    1516:	6f 92       	push	r6
    1518:	7f 92       	push	r7
    151a:	8f 92       	push	r8
    151c:	9f 92       	push	r9
    151e:	af 92       	push	r10
    1520:	bf 92       	push	r11
    1522:	cf 92       	push	r12
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	3c 01       	movw	r6, r24
    1534:	6a 01       	movw	r12, r20
    1536:	7b 01       	movw	r14, r22
    1538:	48 01       	movw	r8, r16
    153a:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    153c:	42 30       	cpi	r20, 0x02	; 2
    153e:	51 05       	cpc	r21, r1
    1540:	61 05       	cpc	r22, r1
    1542:	71 05       	cpc	r23, r1
    1544:	08 f4       	brcc	.+2      	; 0x1548 <put_fat+0x3a>
    1546:	ba c0       	rjmp	.+372    	; 0x16bc <put_fat+0x1ae>
    1548:	f3 01       	movw	r30, r6
    154a:	82 8d       	ldd	r24, Z+26	; 0x1a
    154c:	93 8d       	ldd	r25, Z+27	; 0x1b
    154e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1550:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1552:	48 17       	cp	r20, r24
    1554:	59 07       	cpc	r21, r25
    1556:	6a 07       	cpc	r22, r26
    1558:	7b 07       	cpc	r23, r27
    155a:	08 f0       	brcs	.+2      	; 0x155e <put_fat+0x50>
    155c:	af c0       	rjmp	.+350    	; 0x16bc <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    155e:	26 8c       	ldd	r2, Z+30	; 0x1e
    1560:	37 8c       	ldd	r3, Z+31	; 0x1f
    1562:	40 a0       	ldd	r4, Z+32	; 0x20
    1564:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    1566:	80 81       	ld	r24, Z
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	09 f4       	brne	.+2      	; 0x156e <put_fat+0x60>
    156c:	64 c0       	rjmp	.+200    	; 0x1636 <put_fat+0x128>
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	09 f4       	brne	.+2      	; 0x1574 <put_fat+0x66>
    1572:	7a c0       	rjmp	.+244    	; 0x1668 <put_fat+0x15a>
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	11 f0       	breq	.+4      	; 0x157c <put_fat+0x6e>
    1578:	22 e0       	ldi	r18, 0x02	; 2
    157a:	9c c0       	rjmp	.+312    	; 0x16b4 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    157c:	ea 01       	movw	r28, r20
    157e:	d6 95       	lsr	r29
    1580:	c7 95       	ror	r28
    1582:	c4 0f       	add	r28, r20
    1584:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    1586:	ae 01       	movw	r20, r28
    1588:	45 2f       	mov	r20, r21
    158a:	55 27       	eor	r21, r21
    158c:	46 95       	lsr	r20
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	42 0d       	add	r20, r2
    1594:	53 1d       	adc	r21, r3
    1596:	64 1d       	adc	r22, r4
    1598:	75 1d       	adc	r23, r5
    159a:	c3 01       	movw	r24, r6
    159c:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    15a0:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    15a2:	88 23       	and	r24, r24
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <put_fat+0x9a>
    15a6:	86 c0       	rjmp	.+268    	; 0x16b4 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    15a8:	de 01       	movw	r26, r28
    15aa:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    15ac:	86 01       	movw	r16, r12
    15ae:	01 70       	andi	r16, 0x01	; 1
    15b0:	10 70       	andi	r17, 0x00	; 0
    15b2:	01 15       	cp	r16, r1
    15b4:	11 05       	cpc	r17, r1
    15b6:	51 f0       	breq	.+20     	; 0x15cc <put_fat+0xbe>
    15b8:	f3 01       	movw	r30, r6
    15ba:	ea 0f       	add	r30, r26
    15bc:	fb 1f       	adc	r31, r27
    15be:	86 a5       	ldd	r24, Z+46	; 0x2e
    15c0:	8f 70       	andi	r24, 0x0F	; 15
    15c2:	98 2d       	mov	r25, r8
    15c4:	92 95       	swap	r25
    15c6:	90 7f       	andi	r25, 0xF0	; 240
    15c8:	98 2b       	or	r25, r24
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <put_fat+0xc0>
    15cc:	98 2d       	mov	r25, r8
    15ce:	a6 0d       	add	r26, r6
    15d0:	b7 1d       	adc	r27, r7
    15d2:	9e 96       	adiw	r26, 0x2e	; 46
    15d4:	9c 93       	st	X, r25
			bc++;
    15d6:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	f3 01       	movw	r30, r6
    15dc:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    15de:	ae 01       	movw	r20, r28
    15e0:	45 2f       	mov	r20, r21
    15e2:	55 27       	eor	r21, r21
    15e4:	46 95       	lsr	r20
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	42 0d       	add	r20, r2
    15ec:	53 1d       	adc	r21, r3
    15ee:	64 1d       	adc	r22, r4
    15f0:	75 1d       	adc	r23, r5
    15f2:	c3 01       	movw	r24, r6
    15f4:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    15f8:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    15fa:	88 23       	and	r24, r24
    15fc:	09 f0       	breq	.+2      	; 0x1600 <put_fat+0xf2>
    15fe:	5a c0       	rjmp	.+180    	; 0x16b4 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1600:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1602:	01 2b       	or	r16, r17
    1604:	49 f0       	breq	.+18     	; 0x1618 <put_fat+0x10a>
    1606:	64 e0       	ldi	r22, 0x04	; 4
    1608:	b6 94       	lsr	r11
    160a:	a7 94       	ror	r10
    160c:	97 94       	ror	r9
    160e:	87 94       	ror	r8
    1610:	6a 95       	dec	r22
    1612:	d1 f7       	brne	.-12     	; 0x1608 <put_fat+0xfa>
    1614:	48 2d       	mov	r20, r8
    1616:	0b c0       	rjmp	.+22     	; 0x162e <put_fat+0x120>
    1618:	f3 01       	movw	r30, r6
    161a:	ec 0f       	add	r30, r28
    161c:	fd 1f       	adc	r31, r29
    161e:	46 a5       	ldd	r20, Z+46	; 0x2e
    1620:	40 7f       	andi	r20, 0xF0	; 240
    1622:	bb 27       	eor	r27, r27
    1624:	ab 2d       	mov	r26, r11
    1626:	9a 2d       	mov	r25, r10
    1628:	89 2d       	mov	r24, r9
    162a:	8f 70       	andi	r24, 0x0F	; 15
    162c:	48 2b       	or	r20, r24
    162e:	c6 0d       	add	r28, r6
    1630:	d7 1d       	adc	r29, r7
    1632:	4e a7       	std	Y+46, r20	; 0x2e
    1634:	3f c0       	rjmp	.+126    	; 0x16b4 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    1636:	77 27       	eor	r23, r23
    1638:	6f 2d       	mov	r22, r15
    163a:	5e 2d       	mov	r21, r14
    163c:	4d 2d       	mov	r20, r13
    163e:	42 0d       	add	r20, r2
    1640:	53 1d       	adc	r21, r3
    1642:	64 1d       	adc	r22, r4
    1644:	75 1d       	adc	r23, r5
    1646:	c3 01       	movw	r24, r6
    1648:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    164c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    164e:	88 23       	and	r24, r24
    1650:	89 f5       	brne	.+98     	; 0x16b4 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    1652:	f6 01       	movw	r30, r12
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	f1 70       	andi	r31, 0x01	; 1
    165a:	e6 0d       	add	r30, r6
    165c:	f7 1d       	adc	r31, r7
    165e:	86 a6       	std	Z+46, r8	; 0x2e
    1660:	89 2d       	mov	r24, r9
    1662:	99 27       	eor	r25, r25
    1664:	87 a7       	std	Z+47, r24	; 0x2f
    1666:	26 c0       	rjmp	.+76     	; 0x16b4 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    1668:	87 e0       	ldi	r24, 0x07	; 7
    166a:	76 95       	lsr	r23
    166c:	67 95       	ror	r22
    166e:	57 95       	ror	r21
    1670:	47 95       	ror	r20
    1672:	8a 95       	dec	r24
    1674:	d1 f7       	brne	.-12     	; 0x166a <put_fat+0x15c>
    1676:	42 0d       	add	r20, r2
    1678:	53 1d       	adc	r21, r3
    167a:	64 1d       	adc	r22, r4
    167c:	75 1d       	adc	r23, r5
    167e:	c3 01       	movw	r24, r6
    1680:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    1684:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1686:	88 23       	and	r24, r24
    1688:	a9 f4       	brne	.+42     	; 0x16b4 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    168a:	f6 01       	movw	r30, r12
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	f1 70       	andi	r31, 0x01	; 1
    1696:	e6 0d       	add	r30, r6
    1698:	f7 1d       	adc	r31, r7
    169a:	86 a6       	std	Z+46, r8	; 0x2e
    169c:	89 2d       	mov	r24, r9
    169e:	99 27       	eor	r25, r25
    16a0:	87 a7       	std	Z+47, r24	; 0x2f
    16a2:	c5 01       	movw	r24, r10
    16a4:	aa 27       	eor	r26, r26
    16a6:	bb 27       	eor	r27, r27
    16a8:	80 ab       	std	Z+48, r24	; 0x30
    16aa:	8b 2d       	mov	r24, r11
    16ac:	99 27       	eor	r25, r25
    16ae:	aa 27       	eor	r26, r26
    16b0:	bb 27       	eor	r27, r27
    16b2:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	f3 01       	movw	r30, r6
    16b8:	84 83       	std	Z+4, r24	; 0x04
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <put_fat+0x1b0>
    16bc:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    16be:	82 2f       	mov	r24, r18
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	7f 90       	pop	r7
    16da:	6f 90       	pop	r6
    16dc:	5f 90       	pop	r5
    16de:	4f 90       	pop	r4
    16e0:	3f 90       	pop	r3
    16e2:	2f 90       	pop	r2
    16e4:	08 95       	ret

000016e6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
    16fe:	7a 01       	movw	r14, r20
    1700:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1702:	42 30       	cpi	r20, 0x02	; 2
    1704:	51 05       	cpc	r21, r1
    1706:	61 05       	cpc	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	08 f4       	brcc	.+2      	; 0x170e <remove_chain+0x28>
    170c:	58 c0       	rjmp	.+176    	; 0x17be <remove_chain+0xd8>
    170e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1710:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1712:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1714:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1716:	48 17       	cp	r20, r24
    1718:	59 07       	cpc	r21, r25
    171a:	6a 07       	cpc	r22, r26
    171c:	7b 07       	cpc	r23, r27
    171e:	08 f4       	brcc	.+2      	; 0x1722 <remove_chain+0x3c>
    1720:	41 c0       	rjmp	.+130    	; 0x17a4 <remove_chain+0xbe>
    1722:	4d c0       	rjmp	.+154    	; 0x17be <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1724:	ce 01       	movw	r24, r28
    1726:	b8 01       	movw	r22, r16
    1728:	a7 01       	movw	r20, r14
    172a:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    172e:	5b 01       	movw	r10, r22
    1730:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1732:	61 15       	cp	r22, r1
    1734:	71 05       	cpc	r23, r1
    1736:	81 05       	cpc	r24, r1
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <remove_chain+0x58>
    173c:	42 c0       	rjmp	.+132    	; 0x17c2 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	a8 16       	cp	r10, r24
    1742:	b1 04       	cpc	r11, r1
    1744:	c1 04       	cpc	r12, r1
    1746:	d1 04       	cpc	r13, r1
    1748:	d1 f1       	breq	.+116    	; 0x17be <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    174a:	2f ef       	ldi	r18, 0xFF	; 255
    174c:	a2 16       	cp	r10, r18
    174e:	2f ef       	ldi	r18, 0xFF	; 255
    1750:	b2 06       	cpc	r11, r18
    1752:	2f ef       	ldi	r18, 0xFF	; 255
    1754:	c2 06       	cpc	r12, r18
    1756:	2f ef       	ldi	r18, 0xFF	; 255
    1758:	d2 06       	cpc	r13, r18
    175a:	11 f4       	brne	.+4      	; 0x1760 <remove_chain+0x7a>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	32 c0       	rjmp	.+100    	; 0x17c4 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1760:	ce 01       	movw	r24, r28
    1762:	b8 01       	movw	r22, r16
    1764:	a7 01       	movw	r20, r14
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	0e 94 87 0a 	call	0x150e	; 0x150e <put_fat>
			if (res != FR_OK) break;
    1772:	88 23       	and	r24, r24
    1774:	39 f5       	brne	.+78     	; 0x17c4 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1776:	8e 85       	ldd	r24, Y+14	; 0x0e
    1778:	9f 85       	ldd	r25, Y+15	; 0x0f
    177a:	a8 89       	ldd	r26, Y+16	; 0x10
    177c:	b9 89       	ldd	r27, Y+17	; 0x11
    177e:	8f 3f       	cpi	r24, 0xFF	; 255
    1780:	2f ef       	ldi	r18, 0xFF	; 255
    1782:	92 07       	cpc	r25, r18
    1784:	2f ef       	ldi	r18, 0xFF	; 255
    1786:	a2 07       	cpc	r26, r18
    1788:	2f ef       	ldi	r18, 0xFF	; 255
    178a:	b2 07       	cpc	r27, r18
    178c:	41 f0       	breq	.+16     	; 0x179e <remove_chain+0xb8>
				fs->free_clust++;
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	a1 1d       	adc	r26, r1
    1792:	b1 1d       	adc	r27, r1
    1794:	8e 87       	std	Y+14, r24	; 0x0e
    1796:	9f 87       	std	Y+15, r25	; 0x0f
    1798:	a8 8b       	std	Y+16, r26	; 0x10
    179a:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    179c:	9d 82       	std	Y+5, r9	; 0x05
    179e:	86 01       	movw	r16, r12
    17a0:	75 01       	movw	r14, r10
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <remove_chain+0xc2>
    17a4:	99 24       	eor	r9, r9
    17a6:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    17a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17ac:	ac 8d       	ldd	r26, Y+28	; 0x1c
    17ae:	bd 8d       	ldd	r27, Y+29	; 0x1d
    17b0:	e8 16       	cp	r14, r24
    17b2:	f9 06       	cpc	r15, r25
    17b4:	0a 07       	cpc	r16, r26
    17b6:	1b 07       	cpc	r17, r27
    17b8:	08 f4       	brcc	.+2      	; 0x17bc <remove_chain+0xd6>
    17ba:	b4 cf       	rjmp	.-152    	; 0x1724 <remove_chain+0x3e>
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <remove_chain+0xdc>
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <remove_chain+0xde>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	08 95       	ret

000017dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    17dc:	2f 92       	push	r2
    17de:	3f 92       	push	r3
    17e0:	4f 92       	push	r4
    17e2:	5f 92       	push	r5
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <create_chain+0x26>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	1c 01       	movw	r2, r24
    180a:	2a 01       	movw	r4, r20
    180c:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    180e:	dc 01       	movw	r26, r24
    1810:	5a 96       	adiw	r26, 0x1a	; 26
    1812:	8d 91       	ld	r24, X+
    1814:	9d 91       	ld	r25, X+
    1816:	0d 90       	ld	r0, X+
    1818:	bc 91       	ld	r27, X
    181a:	a0 2d       	mov	r26, r0
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	ab 83       	std	Y+3, r26	; 0x03
    1822:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1824:	41 15       	cp	r20, r1
    1826:	51 05       	cpc	r21, r1
    1828:	61 05       	cpc	r22, r1
    182a:	71 05       	cpc	r23, r1
    182c:	81 f4       	brne	.+32     	; 0x184e <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    182e:	f1 01       	movw	r30, r2
    1830:	82 84       	ldd	r8, Z+10	; 0x0a
    1832:	93 84       	ldd	r9, Z+11	; 0x0b
    1834:	a4 84       	ldd	r10, Z+12	; 0x0c
    1836:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1838:	81 14       	cp	r8, r1
    183a:	91 04       	cpc	r9, r1
    183c:	a1 04       	cpc	r10, r1
    183e:	b1 04       	cpc	r11, r1
    1840:	11 f1       	breq	.+68     	; 0x1886 <create_chain+0xaa>
    1842:	88 16       	cp	r8, r24
    1844:	99 06       	cpc	r9, r25
    1846:	aa 06       	cpc	r10, r26
    1848:	bb 06       	cpc	r11, r27
    184a:	e8 f4       	brcc	.+58     	; 0x1886 <create_chain+0xaa>
    184c:	21 c0       	rjmp	.+66     	; 0x1890 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    184e:	c1 01       	movw	r24, r2
    1850:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    1854:	9b 01       	movw	r18, r22
    1856:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1858:	62 30       	cpi	r22, 0x02	; 2
    185a:	71 05       	cpc	r23, r1
    185c:	81 05       	cpc	r24, r1
    185e:	91 05       	cpc	r25, r1
    1860:	28 f4       	brcc	.+10     	; 0x186c <create_chain+0x90>
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	93 c0       	rjmp	.+294    	; 0x1992 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	ab 81       	ldd	r26, Y+3	; 0x03
    1872:	bc 81       	ldd	r27, Y+4	; 0x04
    1874:	28 17       	cp	r18, r24
    1876:	39 07       	cpc	r19, r25
    1878:	4a 07       	cpc	r20, r26
    187a:	5b 07       	cpc	r21, r27
    187c:	08 f4       	brcc	.+2      	; 0x1880 <create_chain+0xa4>
    187e:	89 c0       	rjmp	.+274    	; 0x1992 <create_chain+0x1b6>
    1880:	53 01       	movw	r10, r6
    1882:	42 01       	movw	r8, r4
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <create_chain+0xb4>
    1886:	b1 e0       	ldi	r27, 0x01	; 1
    1888:	8b 2e       	mov	r8, r27
    188a:	91 2c       	mov	r9, r1
    188c:	a1 2c       	mov	r10, r1
    188e:	b1 2c       	mov	r11, r1
    1890:	75 01       	movw	r14, r10
    1892:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1894:	08 94       	sec
    1896:	c1 1c       	adc	r12, r1
    1898:	d1 1c       	adc	r13, r1
    189a:	e1 1c       	adc	r14, r1
    189c:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	ab 81       	ldd	r26, Y+3	; 0x03
    18a4:	bc 81       	ldd	r27, Y+4	; 0x04
    18a6:	c8 16       	cp	r12, r24
    18a8:	d9 06       	cpc	r13, r25
    18aa:	ea 06       	cpc	r14, r26
    18ac:	fb 06       	cpc	r15, r27
    18ae:	60 f0       	brcs	.+24     	; 0x18c8 <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	89 16       	cp	r8, r25
    18b4:	91 04       	cpc	r9, r1
    18b6:	a1 04       	cpc	r10, r1
    18b8:	b1 04       	cpc	r11, r1
    18ba:	08 f4       	brcc	.+2      	; 0x18be <create_chain+0xe2>
    18bc:	61 c0       	rjmp	.+194    	; 0x1980 <create_chain+0x1a4>
    18be:	a2 e0       	ldi	r26, 0x02	; 2
    18c0:	ca 2e       	mov	r12, r26
    18c2:	d1 2c       	mov	r13, r1
    18c4:	e1 2c       	mov	r14, r1
    18c6:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    18c8:	c1 01       	movw	r24, r2
    18ca:	b7 01       	movw	r22, r14
    18cc:	a6 01       	movw	r20, r12
    18ce:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    18d2:	9b 01       	movw	r18, r22
    18d4:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    18d6:	61 15       	cp	r22, r1
    18d8:	71 05       	cpc	r23, r1
    18da:	81 05       	cpc	r24, r1
    18dc:	91 05       	cpc	r25, r1
    18de:	a9 f0       	breq	.+42     	; 0x190a <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    18e0:	6f 3f       	cpi	r22, 0xFF	; 255
    18e2:	af ef       	ldi	r26, 0xFF	; 255
    18e4:	7a 07       	cpc	r23, r26
    18e6:	af ef       	ldi	r26, 0xFF	; 255
    18e8:	8a 07       	cpc	r24, r26
    18ea:	af ef       	ldi	r26, 0xFF	; 255
    18ec:	9a 07       	cpc	r25, r26
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <create_chain+0x116>
    18f0:	50 c0       	rjmp	.+160    	; 0x1992 <create_chain+0x1b6>
    18f2:	61 30       	cpi	r22, 0x01	; 1
    18f4:	71 05       	cpc	r23, r1
    18f6:	81 05       	cpc	r24, r1
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <create_chain+0x122>
    18fc:	4a c0       	rjmp	.+148    	; 0x1992 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    18fe:	c8 14       	cp	r12, r8
    1900:	d9 04       	cpc	r13, r9
    1902:	ea 04       	cpc	r14, r10
    1904:	fb 04       	cpc	r15, r11
    1906:	31 f6       	brne	.-116    	; 0x1894 <create_chain+0xb8>
    1908:	3b c0       	rjmp	.+118    	; 0x1980 <create_chain+0x1a4>
    190a:	bc 2c       	mov	r11, r12
    190c:	ad 2c       	mov	r10, r13
    190e:	9e 2c       	mov	r9, r14
    1910:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1912:	c1 01       	movw	r24, r2
    1914:	a6 01       	movw	r20, r12
    1916:	b7 01       	movw	r22, r14
    1918:	0f ef       	ldi	r16, 0xFF	; 255
    191a:	1f ef       	ldi	r17, 0xFF	; 255
    191c:	2f ef       	ldi	r18, 0xFF	; 255
    191e:	3f e0       	ldi	r19, 0x0F	; 15
    1920:	0e 94 87 0a 	call	0x150e	; 0x150e <put_fat>
    1924:	88 23       	and	r24, r24
    1926:	89 f5       	brne	.+98     	; 0x198a <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1928:	41 14       	cp	r4, r1
    192a:	51 04       	cpc	r5, r1
    192c:	61 04       	cpc	r6, r1
    192e:	71 04       	cpc	r7, r1
    1930:	49 f0       	breq	.+18     	; 0x1944 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1932:	c1 01       	movw	r24, r2
    1934:	b3 01       	movw	r22, r6
    1936:	a2 01       	movw	r20, r4
    1938:	86 01       	movw	r16, r12
    193a:	97 01       	movw	r18, r14
    193c:	0e 94 87 0a 	call	0x150e	; 0x150e <put_fat>
    1940:	88 23       	and	r24, r24
    1942:	19 f5       	brne	.+70     	; 0x198a <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1944:	f1 01       	movw	r30, r2
    1946:	b2 86       	std	Z+10, r11	; 0x0a
    1948:	a3 86       	std	Z+11, r10	; 0x0b
    194a:	94 86       	std	Z+12, r9	; 0x0c
    194c:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    194e:	86 85       	ldd	r24, Z+14	; 0x0e
    1950:	97 85       	ldd	r25, Z+15	; 0x0f
    1952:	a0 89       	ldd	r26, Z+16	; 0x10
    1954:	b1 89       	ldd	r27, Z+17	; 0x11
    1956:	8f 3f       	cpi	r24, 0xFF	; 255
    1958:	ff ef       	ldi	r31, 0xFF	; 255
    195a:	9f 07       	cpc	r25, r31
    195c:	ff ef       	ldi	r31, 0xFF	; 255
    195e:	af 07       	cpc	r26, r31
    1960:	ff ef       	ldi	r31, 0xFF	; 255
    1962:	bf 07       	cpc	r27, r31
    1964:	51 f0       	breq	.+20     	; 0x197a <create_chain+0x19e>
		fs->free_clust--;
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	a1 09       	sbc	r26, r1
    196a:	b1 09       	sbc	r27, r1
    196c:	f1 01       	movw	r30, r2
    196e:	86 87       	std	Z+14, r24	; 0x0e
    1970:	97 87       	std	Z+15, r25	; 0x0f
    1972:	a0 8b       	std	Z+16, r26	; 0x10
    1974:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	85 83       	std	Z+5, r24	; 0x05
    197a:	a7 01       	movw	r20, r14
    197c:	96 01       	movw	r18, r12
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <create_chain+0x1b6>
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <create_chain+0x1b6>
    198a:	2f ef       	ldi	r18, 0xFF	; 255
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f ef       	ldi	r20, 0xFF	; 255
    1990:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1992:	b9 01       	movw	r22, r18
    1994:	ca 01       	movw	r24, r20
    1996:	24 96       	adiw	r28, 0x04	; 4
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	7f 90       	pop	r7
    19b6:	6f 90       	pop	r6
    19b8:	5f 90       	pop	r5
    19ba:	4f 90       	pop	r4
    19bc:	3f 90       	pop	r3
    19be:	2f 90       	pop	r2
    19c0:	08 95       	ret

000019c2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	7a 01       	movw	r14, r20
    19d2:	8b 01       	movw	r16, r22
	clst -= 2;
    19d4:	8e ef       	ldi	r24, 0xFE	; 254
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	af ef       	ldi	r26, 0xFF	; 255
    19da:	bf ef       	ldi	r27, 0xFF	; 255
    19dc:	e8 0e       	add	r14, r24
    19de:	f9 1e       	adc	r15, r25
    19e0:	0a 1f       	adc	r16, r26
    19e2:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    19e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19e8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    19ea:	bd 8d       	ldd	r27, Y+29	; 0x1d
    19ec:	02 97       	sbiw	r24, 0x02	; 2
    19ee:	a1 09       	sbc	r26, r1
    19f0:	b1 09       	sbc	r27, r1
    19f2:	e8 16       	cp	r14, r24
    19f4:	f9 06       	cpc	r15, r25
    19f6:	0a 07       	cpc	r16, r26
    19f8:	1b 07       	cpc	r17, r27
    19fa:	28 f0       	brcs	.+10     	; 0x1a06 <clust2sect+0x44>
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	12 c0       	rjmp	.+36     	; 0x1a2a <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1a06:	2a 81       	ldd	r18, Y+2	; 0x02
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	c8 01       	movw	r24, r16
    1a10:	b7 01       	movw	r22, r14
    1a12:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	8e a1       	ldd	r24, Y+38	; 0x26
    1a1c:	9f a1       	ldd	r25, Y+39	; 0x27
    1a1e:	a8 a5       	ldd	r26, Y+40	; 0x28
    1a20:	b9 a5       	ldd	r27, Y+41	; 0x29
    1a22:	28 0f       	add	r18, r24
    1a24:	39 1f       	adc	r19, r25
    1a26:	4a 1f       	adc	r20, r26
    1a28:	5b 1f       	adc	r21, r27
}
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	08 95       	ret

00001a3c <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1a3c:	af 92       	push	r10
    1a3e:	bf 92       	push	r11
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	5c 01       	movw	r10, r24
    1a52:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1a54:	dc 01       	movw	r26, r24
    1a56:	14 96       	adiw	r26, 0x04	; 4
    1a58:	6d 93       	st	X+, r22
    1a5a:	7c 93       	st	X, r23
    1a5c:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1a5e:	16 96       	adiw	r26, 0x06	; 6
    1a60:	4d 91       	ld	r20, X+
    1a62:	5d 91       	ld	r21, X+
    1a64:	6d 91       	ld	r22, X+
    1a66:	7c 91       	ld	r23, X
    1a68:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1a6a:	41 30       	cpi	r20, 0x01	; 1
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	61 05       	cpc	r22, r1
    1a70:	71 05       	cpc	r23, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <dir_seek+0x3a>
    1a74:	d3 c0       	rjmp	.+422    	; 0x1c1c <dir_seek+0x1e0>
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a7c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a7e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1a80:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1a82:	48 17       	cp	r20, r24
    1a84:	59 07       	cpc	r21, r25
    1a86:	6a 07       	cpc	r22, r26
    1a88:	7b 07       	cpc	r23, r27
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <dir_seek+0x52>
    1a8c:	c7 c0       	rjmp	.+398    	; 0x1c1c <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1a8e:	41 15       	cp	r20, r1
    1a90:	51 05       	cpc	r21, r1
    1a92:	61 05       	cpc	r22, r1
    1a94:	71 05       	cpc	r23, r1
    1a96:	81 f5       	brne	.+96     	; 0x1af8 <dir_seek+0xbc>
    1a98:	80 81       	ld	r24, Z
    1a9a:	83 30       	cpi	r24, 0x03	; 3
    1a9c:	49 f4       	brne	.+18     	; 0x1ab0 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1a9e:	42 a1       	ldd	r20, Z+34	; 0x22
    1aa0:	53 a1       	ldd	r21, Z+35	; 0x23
    1aa2:	64 a1       	ldd	r22, Z+36	; 0x24
    1aa4:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1aa6:	41 15       	cp	r20, r1
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	61 05       	cpc	r22, r1
    1aac:	71 05       	cpc	r23, r1
    1aae:	21 f5       	brne	.+72     	; 0x1af8 <dir_seek+0xbc>
		dj->clust = clst;
    1ab0:	f5 01       	movw	r30, r10
    1ab2:	12 86       	std	Z+10, r1	; 0x0a
    1ab4:	13 86       	std	Z+11, r1	; 0x0b
    1ab6:	14 86       	std	Z+12, r1	; 0x0c
    1ab8:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1aba:	01 90       	ld	r0, Z+
    1abc:	f0 81       	ld	r31, Z
    1abe:	e0 2d       	mov	r30, r0
    1ac0:	80 85       	ldd	r24, Z+8	; 0x08
    1ac2:	91 85       	ldd	r25, Z+9	; 0x09
    1ac4:	c8 16       	cp	r12, r24
    1ac6:	d9 06       	cpc	r13, r25
    1ac8:	08 f0       	brcs	.+2      	; 0x1acc <dir_seek+0x90>
    1aca:	a8 c0       	rjmp	.+336    	; 0x1c1c <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1acc:	c6 01       	movw	r24, r12
    1ace:	24 e0       	ldi	r18, 0x04	; 4
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	2a 95       	dec	r18
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <dir_seek+0x94>
    1ad8:	a0 e0       	ldi	r26, 0x00	; 0
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	22 a1       	ldd	r18, Z+34	; 0x22
    1ade:	33 a1       	ldd	r19, Z+35	; 0x23
    1ae0:	44 a1       	ldd	r20, Z+36	; 0x24
    1ae2:	55 a1       	ldd	r21, Z+37	; 0x25
    1ae4:	82 0f       	add	r24, r18
    1ae6:	93 1f       	adc	r25, r19
    1ae8:	a4 1f       	adc	r26, r20
    1aea:	b5 1f       	adc	r27, r21
    1aec:	f5 01       	movw	r30, r10
    1aee:	86 87       	std	Z+14, r24	; 0x0e
    1af0:	97 87       	std	Z+15, r25	; 0x0f
    1af2:	a0 8b       	std	Z+16, r26	; 0x10
    1af4:	b1 8b       	std	Z+17, r27	; 0x11
    1af6:	7a c0       	rjmp	.+244    	; 0x1bec <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	08 2f       	mov	r16, r24
    1afc:	10 e0       	ldi	r17, 0x00	; 0
    1afe:	94 e0       	ldi	r25, 0x04	; 4
    1b00:	00 0f       	add	r16, r16
    1b02:	11 1f       	adc	r17, r17
    1b04:	9a 95       	dec	r25
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <dir_seek+0xc4>
    1b08:	24 c0       	rjmp	.+72     	; 0x1b52 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    1b10:	ab 01       	movw	r20, r22
    1b12:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1b14:	4f 3f       	cpi	r20, 0xFF	; 255
    1b16:	ff ef       	ldi	r31, 0xFF	; 255
    1b18:	5f 07       	cpc	r21, r31
    1b1a:	ff ef       	ldi	r31, 0xFF	; 255
    1b1c:	6f 07       	cpc	r22, r31
    1b1e:	ff ef       	ldi	r31, 0xFF	; 255
    1b20:	7f 07       	cpc	r23, r31
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <dir_seek+0xec>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	7b c0       	rjmp	.+246    	; 0x1c1e <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1b28:	42 30       	cpi	r20, 0x02	; 2
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	61 05       	cpc	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	08 f4       	brcc	.+2      	; 0x1b34 <dir_seek+0xf8>
    1b32:	74 c0       	rjmp	.+232    	; 0x1c1c <dir_seek+0x1e0>
    1b34:	d5 01       	movw	r26, r10
    1b36:	ed 91       	ld	r30, X+
    1b38:	fc 91       	ld	r31, X
    1b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b3c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b3e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b40:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b42:	48 17       	cp	r20, r24
    1b44:	59 07       	cpc	r21, r25
    1b46:	6a 07       	cpc	r22, r26
    1b48:	7b 07       	cpc	r23, r27
    1b4a:	08 f0       	brcs	.+2      	; 0x1b4e <dir_seek+0x112>
    1b4c:	67 c0       	rjmp	.+206    	; 0x1c1c <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1b4e:	c0 1a       	sub	r12, r16
    1b50:	d1 0a       	sbc	r13, r17
    1b52:	f5 01       	movw	r30, r10
    1b54:	c0 81       	ld	r28, Z
    1b56:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1b58:	c0 16       	cp	r12, r16
    1b5a:	d1 06       	cpc	r13, r17
    1b5c:	b0 f6       	brcc	.-84     	; 0x1b0a <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1b5e:	d5 01       	movw	r26, r10
    1b60:	1a 96       	adiw	r26, 0x0a	; 10
    1b62:	4d 93       	st	X+, r20
    1b64:	5d 93       	st	X+, r21
    1b66:	6d 93       	st	X+, r22
    1b68:	7c 93       	st	X, r23
    1b6a:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1b6c:	8e ef       	ldi	r24, 0xFE	; 254
    1b6e:	e8 2e       	mov	r14, r24
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	f8 2e       	mov	r15, r24
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	08 2f       	mov	r16, r24
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	18 2f       	mov	r17, r24
    1b7c:	e4 0e       	add	r14, r20
    1b7e:	f5 1e       	adc	r15, r21
    1b80:	06 1f       	adc	r16, r22
    1b82:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1b84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b86:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b88:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b8a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b8c:	02 97       	sbiw	r24, 0x02	; 2
    1b8e:	a1 09       	sbc	r26, r1
    1b90:	b1 09       	sbc	r27, r1
    1b92:	e8 16       	cp	r14, r24
    1b94:	f9 06       	cpc	r15, r25
    1b96:	0a 07       	cpc	r16, r26
    1b98:	1b 07       	cpc	r17, r27
    1b9a:	28 f0       	brcs	.+10     	; 0x1ba6 <dir_seek+0x16a>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	12 c0       	rjmp	.+36     	; 0x1bca <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1ba6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	c8 01       	movw	r24, r16
    1bb0:	b7 01       	movw	r22, r14
    1bb2:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
    1bba:	8e a1       	ldd	r24, Y+38	; 0x26
    1bbc:	9f a1       	ldd	r25, Y+39	; 0x27
    1bbe:	a8 a5       	ldd	r26, Y+40	; 0x28
    1bc0:	b9 a5       	ldd	r27, Y+41	; 0x29
    1bc2:	28 0f       	add	r18, r24
    1bc4:	39 1f       	adc	r19, r25
    1bc6:	4a 1f       	adc	r20, r26
    1bc8:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1bca:	c6 01       	movw	r24, r12
    1bcc:	04 e0       	ldi	r16, 0x04	; 4
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	0a 95       	dec	r16
    1bd4:	e1 f7       	brne	.-8      	; 0x1bce <dir_seek+0x192>
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	28 0f       	add	r18, r24
    1bdc:	39 1f       	adc	r19, r25
    1bde:	4a 1f       	adc	r20, r26
    1be0:	5b 1f       	adc	r21, r27
    1be2:	f5 01       	movw	r30, r10
    1be4:	26 87       	std	Z+14, r18	; 0x0e
    1be6:	37 87       	std	Z+15, r19	; 0x0f
    1be8:	40 8b       	std	Z+16, r20	; 0x10
    1bea:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1bec:	ff e0       	ldi	r31, 0x0F	; 15
    1bee:	cf 22       	and	r12, r31
    1bf0:	dd 24       	eor	r13, r13
    1bf2:	15 e0       	ldi	r17, 0x05	; 5
    1bf4:	cc 0c       	add	r12, r12
    1bf6:	dd 1c       	adc	r13, r13
    1bf8:	1a 95       	dec	r17
    1bfa:	e1 f7       	brne	.-8      	; 0x1bf4 <dir_seek+0x1b8>
    1bfc:	8e e2       	ldi	r24, 0x2E	; 46
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	c8 0e       	add	r12, r24
    1c02:	d9 1e       	adc	r13, r25
    1c04:	d5 01       	movw	r26, r10
    1c06:	8d 91       	ld	r24, X+
    1c08:	9c 91       	ld	r25, X
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	8c 0d       	add	r24, r12
    1c0e:	9d 1d       	adc	r25, r13
    1c10:	52 96       	adiw	r26, 0x12	; 18
    1c12:	8d 93       	st	X+, r24
    1c14:	9c 93       	st	X, r25
    1c16:	53 97       	sbiw	r26, 0x13	; 19
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	08 95       	ret

00001c34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1c34:	4f 92       	push	r4
    1c36:	5f 92       	push	r5
    1c38:	6f 92       	push	r6
    1c3a:	7f 92       	push	r7
    1c3c:	8f 92       	push	r8
    1c3e:	9f 92       	push	r9
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
    1c56:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1c58:	6c 80       	ldd	r6, Y+4	; 0x04
    1c5a:	7d 80       	ldd	r7, Y+5	; 0x05
    1c5c:	08 94       	sec
    1c5e:	61 1c       	adc	r6, r1
    1c60:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1c62:	61 14       	cp	r6, r1
    1c64:	71 04       	cpc	r7, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <dir_next+0x36>
    1c68:	4c c1       	rjmp	.+664    	; 0x1f02 <dir_next+0x2ce>
    1c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c6e:	a8 89       	ldd	r26, Y+16	; 0x10
    1c70:	b9 89       	ldd	r27, Y+17	; 0x11
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	a1 05       	cpc	r26, r1
    1c76:	b1 05       	cpc	r27, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <dir_next+0x48>
    1c7a:	43 c1       	rjmp	.+646    	; 0x1f02 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1c7c:	1f e0       	ldi	r17, 0x0F	; 15
    1c7e:	41 2e       	mov	r4, r17
    1c80:	51 2c       	mov	r5, r1
    1c82:	46 20       	and	r4, r6
    1c84:	57 20       	and	r5, r7
    1c86:	41 14       	cp	r4, r1
    1c88:	51 04       	cpc	r5, r1
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <dir_next+0x5a>
    1c8c:	27 c1       	rjmp	.+590    	; 0x1edc <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	a1 1d       	adc	r26, r1
    1c92:	b1 1d       	adc	r27, r1
    1c94:	8e 87       	std	Y+14, r24	; 0x0e
    1c96:	9f 87       	std	Y+15, r25	; 0x0f
    1c98:	a8 8b       	std	Y+16, r26	; 0x10
    1c9a:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1c9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c9e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ca0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ca2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ca4:	e8 81       	ld	r30, Y
    1ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca8:	41 15       	cp	r20, r1
    1caa:	51 05       	cpc	r21, r1
    1cac:	61 05       	cpc	r22, r1
    1cae:	71 05       	cpc	r23, r1
    1cb0:	39 f4       	brne	.+14     	; 0x1cc0 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1cb2:	80 85       	ldd	r24, Z+8	; 0x08
    1cb4:	91 85       	ldd	r25, Z+9	; 0x09
    1cb6:	68 16       	cp	r6, r24
    1cb8:	79 06       	cpc	r7, r25
    1cba:	08 f4       	brcc	.+2      	; 0x1cbe <dir_next+0x8a>
    1cbc:	0f c1       	rjmp	.+542    	; 0x1edc <dir_next+0x2a8>
    1cbe:	21 c1       	rjmp	.+578    	; 0x1f02 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	93 01       	movw	r18, r6
    1cc8:	a4 e0       	ldi	r26, 0x04	; 4
    1cca:	36 95       	lsr	r19
    1ccc:	27 95       	ror	r18
    1cce:	aa 95       	dec	r26
    1cd0:	e1 f7       	brne	.-8      	; 0x1cca <dir_next+0x96>
    1cd2:	82 23       	and	r24, r18
    1cd4:	93 23       	and	r25, r19
    1cd6:	89 2b       	or	r24, r25
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <dir_next+0xa8>
    1cda:	00 c1       	rjmp	.+512    	; 0x1edc <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1cdc:	cf 01       	movw	r24, r30
    1cde:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    1ce2:	7b 01       	movw	r14, r22
    1ce4:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1ce6:	62 30       	cpi	r22, 0x02	; 2
    1ce8:	71 05       	cpc	r23, r1
    1cea:	81 05       	cpc	r24, r1
    1cec:	91 05       	cpc	r25, r1
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <dir_next+0xbe>
    1cf0:	0a c1       	rjmp	.+532    	; 0x1f06 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	e8 16       	cp	r14, r24
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	f8 06       	cpc	r15, r24
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	08 07       	cpc	r16, r24
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	18 07       	cpc	r17, r24
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <dir_next+0xd2>
    1d04:	02 c1       	rjmp	.+516    	; 0x1f0a <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1d06:	e8 81       	ld	r30, Y
    1d08:	f9 81       	ldd	r31, Y+1	; 0x01
    1d0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d0c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d0e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d10:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d12:	e8 16       	cp	r14, r24
    1d14:	f9 06       	cpc	r15, r25
    1d16:	0a 07       	cpc	r16, r26
    1d18:	1b 07       	cpc	r17, r27
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <dir_next+0xea>
    1d1c:	a6 c0       	rjmp	.+332    	; 0x1e6a <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1d1e:	dd 20       	and	r13, r13
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <dir_next+0xf0>
    1d22:	ef c0       	rjmp	.+478    	; 0x1f02 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1d24:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d26:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d2c:	cf 01       	movw	r24, r30
    1d2e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <create_chain>
    1d32:	7b 01       	movw	r14, r22
    1d34:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1d36:	61 15       	cp	r22, r1
    1d38:	71 05       	cpc	r23, r1
    1d3a:	81 05       	cpc	r24, r1
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	11 f4       	brne	.+4      	; 0x1d44 <dir_next+0x110>
    1d40:	87 e0       	ldi	r24, 0x07	; 7
    1d42:	e4 c0       	rjmp	.+456    	; 0x1f0c <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	e9 16       	cp	r14, r25
    1d48:	f1 04       	cpc	r15, r1
    1d4a:	01 05       	cpc	r16, r1
    1d4c:	11 05       	cpc	r17, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <dir_next+0x11e>
    1d50:	da c0       	rjmp	.+436    	; 0x1f06 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1d52:	af ef       	ldi	r26, 0xFF	; 255
    1d54:	ea 16       	cp	r14, r26
    1d56:	af ef       	ldi	r26, 0xFF	; 255
    1d58:	fa 06       	cpc	r15, r26
    1d5a:	af ef       	ldi	r26, 0xFF	; 255
    1d5c:	0a 07       	cpc	r16, r26
    1d5e:	af ef       	ldi	r26, 0xFF	; 255
    1d60:	1a 07       	cpc	r17, r26
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <dir_next+0x132>
    1d64:	d2 c0       	rjmp	.+420    	; 0x1f0a <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1d66:	88 81       	ld	r24, Y
    1d68:	99 81       	ldd	r25, Y+1	; 0x01
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    1d76:	88 23       	and	r24, r24
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <dir_next+0x148>
    1d7a:	c7 c0       	rjmp	.+398    	; 0x1f0a <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1d7c:	e8 81       	ld	r30, Y
    1d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d80:	be 96       	adiw	r30, 0x2e	; 46
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1d88:	11 92       	st	Z+, r1
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	bf ef       	ldi	r27, 0xFF	; 255
    1d8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d90:	9b 07       	cpc	r25, r27
    1d92:	d1 f7       	brne	.-12     	; 0x1d88 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1d94:	88 80       	ld	r8, Y
    1d96:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d98:	4e ef       	ldi	r20, 0xFE	; 254
    1d9a:	a4 2e       	mov	r10, r20
    1d9c:	4f ef       	ldi	r20, 0xFF	; 255
    1d9e:	b4 2e       	mov	r11, r20
    1da0:	4f ef       	ldi	r20, 0xFF	; 255
    1da2:	c4 2e       	mov	r12, r20
    1da4:	4f ef       	ldi	r20, 0xFF	; 255
    1da6:	d4 2e       	mov	r13, r20
    1da8:	ae 0c       	add	r10, r14
    1daa:	bf 1c       	adc	r11, r15
    1dac:	c0 1e       	adc	r12, r16
    1dae:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1db0:	f4 01       	movw	r30, r8
    1db2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1db4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1db6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1db8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1dba:	02 97       	sbiw	r24, 0x02	; 2
    1dbc:	a1 09       	sbc	r26, r1
    1dbe:	b1 09       	sbc	r27, r1
    1dc0:	a8 16       	cp	r10, r24
    1dc2:	b9 06       	cpc	r11, r25
    1dc4:	ca 06       	cpc	r12, r26
    1dc6:	db 06       	cpc	r13, r27
    1dc8:	28 f0       	brcs	.+10     	; 0x1dd4 <dir_next+0x1a0>
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	15 c0       	rjmp	.+42     	; 0x1dfe <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1dd4:	d4 01       	movw	r26, r8
    1dd6:	12 96       	adiw	r26, 0x02	; 2
    1dd8:	2c 91       	ld	r18, X
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	c6 01       	movw	r24, r12
    1de2:	b5 01       	movw	r22, r10
    1de4:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	f4 01       	movw	r30, r8
    1dee:	86 a1       	ldd	r24, Z+38	; 0x26
    1df0:	97 a1       	ldd	r25, Z+39	; 0x27
    1df2:	a0 a5       	ldd	r26, Z+40	; 0x28
    1df4:	b1 a5       	ldd	r27, Z+41	; 0x29
    1df6:	28 0f       	add	r18, r24
    1df8:	39 1f       	adc	r19, r25
    1dfa:	4a 1f       	adc	r20, r26
    1dfc:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1dfe:	d4 01       	movw	r26, r8
    1e00:	9a 96       	adiw	r26, 0x2a	; 42
    1e02:	2d 93       	st	X+, r18
    1e04:	3d 93       	st	X+, r19
    1e06:	4d 93       	st	X+, r20
    1e08:	5c 93       	st	X, r21
    1e0a:	9d 97       	sbiw	r26, 0x2d	; 45
    1e0c:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1e0e:	cc 24       	eor	r12, r12
    1e10:	c3 94       	inc	r12
    1e12:	1a c0       	rjmp	.+52     	; 0x1e48 <dir_next+0x214>
    1e14:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1e16:	88 81       	ld	r24, Y
    1e18:	99 81       	ldd	r25, Y+1	; 0x01
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    1e26:	88 23       	and	r24, r24
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <dir_next+0x1f8>
    1e2a:	6f c0       	rjmp	.+222    	; 0x1f0a <dir_next+0x2d6>
						dj->fs->winsect++;
    1e2c:	e8 81       	ld	r30, Y
    1e2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e30:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e32:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e34:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1e36:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	b1 1d       	adc	r27, r1
    1e3e:	82 a7       	std	Z+42, r24	; 0x2a
    1e40:	93 a7       	std	Z+43, r25	; 0x2b
    1e42:	a4 a7       	std	Z+44, r26	; 0x2c
    1e44:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1e46:	d3 94       	inc	r13
    1e48:	e8 81       	ld	r30, Y
    1e4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	d8 16       	cp	r13, r24
    1e50:	08 f3       	brcs	.-62     	; 0x1e14 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1e52:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e54:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e56:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1e58:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e5a:	8d 19       	sub	r24, r13
    1e5c:	91 09       	sbc	r25, r1
    1e5e:	a1 09       	sbc	r26, r1
    1e60:	b1 09       	sbc	r27, r1
    1e62:	82 a7       	std	Z+42, r24	; 0x2a
    1e64:	93 a7       	std	Z+43, r25	; 0x2b
    1e66:	a4 a7       	std	Z+44, r26	; 0x2c
    1e68:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1e6a:	ea 86       	std	Y+10, r14	; 0x0a
    1e6c:	fb 86       	std	Y+11, r15	; 0x0b
    1e6e:	0c 87       	std	Y+12, r16	; 0x0c
    1e70:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1e72:	c8 80       	ld	r12, Y
    1e74:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1e76:	8e ef       	ldi	r24, 0xFE	; 254
    1e78:	9f ef       	ldi	r25, 0xFF	; 255
    1e7a:	af ef       	ldi	r26, 0xFF	; 255
    1e7c:	bf ef       	ldi	r27, 0xFF	; 255
    1e7e:	e8 0e       	add	r14, r24
    1e80:	f9 1e       	adc	r15, r25
    1e82:	0a 1f       	adc	r16, r26
    1e84:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1e86:	f6 01       	movw	r30, r12
    1e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e8a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e8c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1e8e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1e90:	02 97       	sbiw	r24, 0x02	; 2
    1e92:	a1 09       	sbc	r26, r1
    1e94:	b1 09       	sbc	r27, r1
    1e96:	e8 16       	cp	r14, r24
    1e98:	f9 06       	cpc	r15, r25
    1e9a:	0a 07       	cpc	r16, r26
    1e9c:	1b 07       	cpc	r17, r27
    1e9e:	28 f0       	brcs	.+10     	; 0x1eaa <dir_next+0x276>
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	15 c0       	rjmp	.+42     	; 0x1ed4 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    1eaa:	d6 01       	movw	r26, r12
    1eac:	12 96       	adiw	r26, 0x02	; 2
    1eae:	2c 91       	ld	r18, X
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	b7 01       	movw	r22, r14
    1eba:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	86 a1       	ldd	r24, Z+38	; 0x26
    1ec6:	97 a1       	ldd	r25, Z+39	; 0x27
    1ec8:	a0 a5       	ldd	r26, Z+40	; 0x28
    1eca:	b1 a5       	ldd	r27, Z+41	; 0x29
    1ecc:	28 0f       	add	r18, r24
    1ece:	39 1f       	adc	r19, r25
    1ed0:	4a 1f       	adc	r20, r26
    1ed2:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    1ed4:	2e 87       	std	Y+14, r18	; 0x0e
    1ed6:	3f 87       	std	Y+15, r19	; 0x0f
    1ed8:	48 8b       	std	Y+16, r20	; 0x10
    1eda:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    1edc:	6c 82       	std	Y+4, r6	; 0x04
    1ede:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1ee0:	35 e0       	ldi	r19, 0x05	; 5
    1ee2:	44 0c       	add	r4, r4
    1ee4:	55 1c       	adc	r5, r5
    1ee6:	3a 95       	dec	r19
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <dir_next+0x2ae>
    1eea:	8e e2       	ldi	r24, 0x2E	; 46
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	48 0e       	add	r4, r24
    1ef0:	59 1e       	adc	r5, r25
    1ef2:	88 81       	ld	r24, Y
    1ef4:	99 81       	ldd	r25, Y+1	; 0x01
    1ef6:	84 0d       	add	r24, r4
    1ef8:	95 1d       	adc	r25, r5
    1efa:	8a 8b       	std	Y+18, r24	; 0x12
    1efc:	9b 8b       	std	Y+19, r25	; 0x13
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <dir_next+0x2d8>

	return FR_OK;
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	03 c0       	rjmp	.+6      	; 0x1f0c <dir_next+0x2d8>
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <dir_next+0x2d8>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
}
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	08 95       	ret

00001f2e <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	94 e0       	ldi	r25, 0x04	; 4
    1f36:	1a c0       	rjmp	.+52     	; 0x1f6c <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    1f38:	88 81       	ld	r24, Y
    1f3a:	99 81       	ldd	r25, Y+1	; 0x01
    1f3c:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    1f40:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    1f42:	88 23       	and	r24, r24
    1f44:	f1 f4       	brne	.+60     	; 0x1f82 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1f46:	ea 89       	ldd	r30, Y+18	; 0x12
    1f48:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    1f4a:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f1       	breq	.+66     	; 0x1f92 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1f50:	85 3e       	cpi	r24, 0xE5	; 229
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <dir_read+0x30>
    1f54:	8e 32       	cpi	r24, 0x2E	; 46
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <dir_read+0x30>
    1f58:	83 85       	ldd	r24, Z+11	; 0x0b
    1f5a:	83 ff       	sbrs	r24, 3
    1f5c:	16 c0       	rjmp	.+44     	; 0x1f8a <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    1f5e:	ce 01       	movw	r24, r28
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <dir_next>
    1f66:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    1f68:	88 23       	and	r24, r24
    1f6a:	59 f4       	brne	.+22     	; 0x1f82 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1f6c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f6e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f70:	68 89       	ldd	r22, Y+16	; 0x10
    1f72:	79 89       	ldd	r23, Y+17	; 0x11
    1f74:	41 15       	cp	r20, r1
    1f76:	51 05       	cpc	r21, r1
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	e9 f6       	brne	.-70     	; 0x1f38 <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1f7e:	99 23       	and	r25, r25
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <dir_read+0x5c>
    1f82:	1e 86       	std	Y+14, r1	; 0x0e
    1f84:	1f 86       	std	Y+15, r1	; 0x0f
    1f86:	18 8a       	std	Y+16, r1	; 0x10
    1f88:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    1f8a:	89 2f       	mov	r24, r25
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1f92:	94 e0       	ldi	r25, 0x04	; 4
    1f94:	f6 cf       	rjmp	.-20     	; 0x1f82 <dir_read+0x54>

00001f96 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
    1fa8:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    1faa:	88 23       	and	r24, r24
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <dir_register+0x1a>
    1fae:	41 c0       	rjmp	.+130    	; 0x2032 <dir_register+0x9c>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1fb0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fb2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fb4:	68 89       	ldd	r22, Y+16	; 0x10
    1fb6:	79 89       	ldd	r23, Y+17	; 0x11
    1fb8:	88 81       	ld	r24, Y
    1fba:	99 81       	ldd	r25, Y+1	; 0x01
    1fbc:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    1fc0:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    1fc2:	88 23       	and	r24, r24
    1fc4:	b1 f5       	brne	.+108    	; 0x2032 <dir_register+0x9c>
			c = *dj->dir;
    1fc6:	ea 89       	ldd	r30, Y+18	; 0x12
    1fc8:	fb 89       	ldd	r31, Y+19	; 0x13
    1fca:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    1fcc:	e5 3e       	cpi	r30, 0xE5	; 229
    1fce:	b9 f1       	breq	.+110    	; 0x203e <dir_register+0xa8>
    1fd0:	ee 23       	and	r30, r30
    1fd2:	a9 f1       	breq	.+106    	; 0x203e <dir_register+0xa8>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
    1fd8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <dir_next>
    1fdc:	e5 cf       	rjmp	.-54     	; 0x1fa8 <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1fde:	aa 89       	ldd	r26, Y+18	; 0x12
    1fe0:	bb 89       	ldd	r27, Y+19	; 0x13
    1fe2:	fd 01       	movw	r30, r26
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <dir_register+0x56>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1fea:	11 92       	st	Z+, r1
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	2f ef       	ldi	r18, 0xFF	; 255
    1ff0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff2:	92 07       	cpc	r25, r18
    1ff4:	d1 f7       	brne	.-12     	; 0x1fea <dir_register+0x54>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1ff6:	bd 01       	movw	r22, r26
    1ff8:	8c 89       	ldd	r24, Y+20	; 0x14
    1ffa:	9d 89       	ldd	r25, Y+21	; 0x15
    1ffc:	9c 01       	movw	r18, r24
    1ffe:	89 01       	movw	r16, r18
    2000:	2b e0       	ldi	r18, 0x0B	; 11
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <dir_register+0x7c>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    2006:	f8 01       	movw	r30, r16
    2008:	81 91       	ld	r24, Z+
    200a:	8f 01       	movw	r16, r30
    200c:	fb 01       	movw	r30, r22
    200e:	81 93       	st	Z+, r24
    2010:	bf 01       	movw	r22, r30
    2012:	21 50       	subi	r18, 0x01	; 1
    2014:	30 40       	sbci	r19, 0x00	; 0
    2016:	ff ef       	ldi	r31, 0xFF	; 255
    2018:	2f 3f       	cpi	r18, 0xFF	; 255
    201a:	3f 07       	cpc	r19, r31
    201c:	a1 f7       	brne	.-24     	; 0x2006 <dir_register+0x70>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    201e:	ec 89       	ldd	r30, Y+20	; 0x14
    2020:	fd 89       	ldd	r31, Y+21	; 0x15
    2022:	83 85       	ldd	r24, Z+11	; 0x0b
    2024:	88 71       	andi	r24, 0x18	; 24
    2026:	1c 96       	adiw	r26, 0x0c	; 12
    2028:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    202a:	e8 81       	ld	r30, Y
    202c:	f9 81       	ldd	r31, Y+1	; 0x01
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2032:	84 2f       	mov	r24, r20
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    203e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2040:	5f 85       	ldd	r21, Y+15	; 0x0f
    2042:	68 89       	ldd	r22, Y+16	; 0x10
    2044:	79 89       	ldd	r23, Y+17	; 0x11
    2046:	88 81       	ld	r24, Y
    2048:	99 81       	ldd	r25, Y+1	; 0x01
    204a:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    204e:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    2050:	88 23       	and	r24, r24
    2052:	29 f2       	breq	.-118    	; 0x1fde <dir_register+0x48>
    2054:	ee cf       	rjmp	.-36     	; 0x2032 <dir_register+0x9c>

00002056 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    205c:	6c 81       	ldd	r22, Y+4	; 0x04
    205e:	7d 81       	ldd	r23, Y+5	; 0x05
    2060:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
    2064:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2066:	88 23       	and	r24, r24
    2068:	99 f4       	brne	.+38     	; 0x2090 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    206a:	4e 85       	ldd	r20, Y+14	; 0x0e
    206c:	5f 85       	ldd	r21, Y+15	; 0x0f
    206e:	68 89       	ldd	r22, Y+16	; 0x10
    2070:	79 89       	ldd	r23, Y+17	; 0x11
    2072:	88 81       	ld	r24, Y
    2074:	99 81       	ldd	r25, Y+1	; 0x01
    2076:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    207a:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    207c:	88 23       	and	r24, r24
    207e:	41 f4       	brne	.+16     	; 0x2090 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    2080:	ea 89       	ldd	r30, Y+18	; 0x12
    2082:	fb 89       	ldd	r31, Y+19	; 0x13
    2084:	85 ee       	ldi	r24, 0xE5	; 229
    2086:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    2088:	e8 81       	ld	r30, Y
    208a:	f9 81       	ldd	r31, Y+1	; 0x01
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    2090:	89 2f       	mov	r24, r25
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	fc 01       	movw	r30, r24
    20a6:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    20a8:	eb 01       	movw	r28, r22
    20aa:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    20ac:	86 85       	ldd	r24, Z+14	; 0x0e
    20ae:	97 85       	ldd	r25, Z+15	; 0x0f
    20b0:	a0 89       	ldd	r26, Z+16	; 0x10
    20b2:	b1 89       	ldd	r27, Z+17	; 0x11
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	09 f4       	brne	.+2      	; 0x20be <get_fileinfo+0x26>
    20bc:	71 c0       	rjmp	.+226    	; 0x21a0 <get_fileinfo+0x108>
		dir = dj->dir;
    20be:	62 89       	ldd	r22, Z+18	; 0x12
    20c0:	73 89       	ldd	r23, Z+19	; 0x13
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    20c6:	fb 01       	movw	r30, r22
    20c8:	e8 0f       	add	r30, r24
    20ca:	f9 1f       	adc	r31, r25
    20cc:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    20ce:	e0 32       	cpi	r30, 0x20	; 32
    20d0:	41 f0       	breq	.+16     	; 0x20e2 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    20d2:	e5 30       	cpi	r30, 0x05	; 5
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <get_fileinfo+0x40>
    20d6:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    20d8:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	88 30       	cpi	r24, 0x08	; 8
    20de:	91 05       	cpc	r25, r1
    20e0:	91 f7       	brne	.-28     	; 0x20c6 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    20e2:	db 01       	movw	r26, r22
    20e4:	18 96       	adiw	r26, 0x08	; 8
    20e6:	8c 91       	ld	r24, X
    20e8:	80 32       	cpi	r24, 0x20	; 32
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <get_fileinfo+0x58>
    20ec:	8e 01       	movw	r16, r28
    20ee:	12 c0       	rjmp	.+36     	; 0x2114 <get_fileinfo+0x7c>
			*p++ = '.';
    20f0:	8e e2       	ldi	r24, 0x2E	; 46
    20f2:	fe 01       	movw	r30, r28
    20f4:	81 93       	st	Z+, r24
    20f6:	8f 01       	movw	r16, r30
    20f8:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    20fa:	9e 01       	movw	r18, r28
    20fc:	2c 5f       	subi	r18, 0xFC	; 252
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2100:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2102:	80 32       	cpi	r24, 0x20	; 32
    2104:	39 f0       	breq	.+14     	; 0x2114 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2106:	d8 01       	movw	r26, r16
    2108:	8d 93       	st	X+, r24
    210a:	8d 01       	movw	r16, r26
    210c:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    210e:	a2 17       	cp	r26, r18
    2110:	b3 07       	cpc	r27, r19
    2112:	b1 f7       	brne	.-20     	; 0x2100 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2114:	fb 01       	movw	r30, r22
    2116:	83 85       	ldd	r24, Z+11	; 0x0b
    2118:	d7 01       	movw	r26, r14
    211a:	18 96       	adiw	r26, 0x08	; 8
    211c:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    211e:	27 8d       	ldd	r18, Z+31	; 0x1f
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	52 2f       	mov	r21, r18
    2128:	44 27       	eor	r20, r20
    212a:	33 27       	eor	r19, r19
    212c:	22 27       	eor	r18, r18
    212e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	dc 01       	movw	r26, r24
    2138:	99 27       	eor	r25, r25
    213a:	88 27       	eor	r24, r24
    213c:	28 2b       	or	r18, r24
    213e:	39 2b       	or	r19, r25
    2140:	4a 2b       	or	r20, r26
    2142:	5b 2b       	or	r21, r27
    2144:	84 8d       	ldd	r24, Z+28	; 0x1c
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 e0       	ldi	r26, 0x00	; 0
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	28 2b       	or	r18, r24
    214e:	39 2b       	or	r19, r25
    2150:	4a 2b       	or	r20, r26
    2152:	5b 2b       	or	r21, r27
    2154:	95 8d       	ldd	r25, Z+29	; 0x1d
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	a0 e0       	ldi	r26, 0x00	; 0
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	28 2b       	or	r18, r24
    215e:	39 2b       	or	r19, r25
    2160:	4a 2b       	or	r20, r26
    2162:	5b 2b       	or	r21, r27
    2164:	f7 01       	movw	r30, r14
    2166:	20 83       	st	Z, r18
    2168:	31 83       	std	Z+1, r19	; 0x01
    216a:	42 83       	std	Z+2, r20	; 0x02
    216c:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    216e:	db 01       	movw	r26, r22
    2170:	59 96       	adiw	r26, 0x19	; 25
    2172:	9c 91       	ld	r25, X
    2174:	59 97       	sbiw	r26, 0x19	; 25
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	58 96       	adiw	r26, 0x18	; 24
    217a:	2c 91       	ld	r18, X
    217c:	58 97       	sbiw	r26, 0x18	; 24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	82 2b       	or	r24, r18
    2182:	93 2b       	or	r25, r19
    2184:	84 83       	std	Z+4, r24	; 0x04
    2186:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2188:	57 96       	adiw	r26, 0x17	; 23
    218a:	9c 91       	ld	r25, X
    218c:	57 97       	sbiw	r26, 0x17	; 23
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	56 96       	adiw	r26, 0x16	; 22
    2192:	2c 91       	ld	r18, X
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	82 2b       	or	r24, r18
    2198:	93 2b       	or	r25, r19
    219a:	86 83       	std	Z+6, r24	; 0x06
    219c:	97 83       	std	Z+7, r25	; 0x07
    219e:	e8 01       	movw	r28, r16
	}
	*p = 0;
    21a0:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	08 95       	ret

000021b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    21b0:	5f 92       	push	r5
    21b2:	6f 92       	push	r6
    21b4:	7f 92       	push	r7
    21b6:	8f 92       	push	r8
    21b8:	9f 92       	push	r9
    21ba:	af 92       	push	r10
    21bc:	bf 92       	push	r11
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	ec 01       	movw	r28, r24
    21d0:	7b 01       	movw	r14, r22
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    21d4:	08 94       	sec
    21d6:	e1 1c       	adc	r14, r1
    21d8:	f1 1c       	adc	r15, r1
    21da:	f7 01       	movw	r30, r14
    21dc:	80 81       	ld	r24, Z
    21de:	80 32       	cpi	r24, 0x20	; 32
    21e0:	c9 f3       	breq	.-14     	; 0x21d4 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    21e2:	8f 32       	cpi	r24, 0x2F	; 47
    21e4:	11 f0       	breq	.+4      	; 0x21ea <follow_path+0x3a>
    21e6:	8c 35       	cpi	r24, 0x5C	; 92
    21e8:	19 f4       	brne	.+6      	; 0x21f0 <follow_path+0x40>
		path++;
    21ea:	08 94       	sec
    21ec:	e1 1c       	adc	r14, r1
    21ee:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    21f0:	1e 82       	std	Y+6, r1	; 0x06
    21f2:	1f 82       	std	Y+7, r1	; 0x07
    21f4:	18 86       	std	Y+8, r1	; 0x08
    21f6:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    21f8:	f7 01       	movw	r30, r14
    21fa:	80 81       	ld	r24, Z
    21fc:	80 32       	cpi	r24, 0x20	; 32
    21fe:	40 f4       	brcc	.+16     	; 0x2210 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2200:	ce 01       	movw	r24, r28
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
		dj->dir = NULL;
    220a:	1a 8a       	std	Y+18, r1	; 0x12
    220c:	1b 8a       	std	Y+19, r1	; 0x13
    220e:	13 c1       	rjmp	.+550    	; 0x2436 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2210:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2212:	45 e0       	ldi	r20, 0x05	; 5
    2214:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2216:	ac 89       	ldd	r26, Y+20	; 0x14
    2218:	bd 89       	ldd	r27, Y+21	; 0x15
    221a:	fd 01       	movw	r30, r26
    221c:	8b e0       	ldi	r24, 0x0B	; 11
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2222:	01 93       	st	Z+, r16
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	2f ef       	ldi	r18, 0xFF	; 255
    2228:	8f 3f       	cpi	r24, 0xFF	; 255
    222a:	92 07       	cpc	r25, r18
    222c:	d1 f7       	brne	.-12     	; 0x2222 <follow_path+0x72>
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	cc 24       	eor	r12, r12
    2234:	dd 24       	eor	r13, r13
    2236:	38 e0       	ldi	r19, 0x08	; 8
    2238:	a3 2e       	mov	r10, r19
    223a:	b1 2c       	mov	r11, r1
    223c:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    223e:	f7 01       	movw	r30, r14
    2240:	ec 0d       	add	r30, r12
    2242:	fd 1d       	adc	r31, r13
    2244:	20 81       	ld	r18, Z
    2246:	08 94       	sec
    2248:	c1 1c       	adc	r12, r1
    224a:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    224c:	21 32       	cpi	r18, 0x21	; 33
    224e:	08 f4       	brcc	.+2      	; 0x2252 <follow_path+0xa2>
    2250:	66 c0       	rjmp	.+204    	; 0x231e <follow_path+0x16e>
    2252:	2f 32       	cpi	r18, 0x2F	; 47
    2254:	09 f4       	brne	.+2      	; 0x2258 <follow_path+0xa8>
    2256:	ff c0       	rjmp	.+510    	; 0x2456 <follow_path+0x2a6>
    2258:	2c 35       	cpi	r18, 0x5C	; 92
    225a:	09 f4       	brne	.+2      	; 0x225e <follow_path+0xae>
    225c:	fc c0       	rjmp	.+504    	; 0x2456 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    225e:	2e 32       	cpi	r18, 0x2E	; 46
    2260:	19 f0       	breq	.+6      	; 0x2268 <follow_path+0xb8>
    2262:	4a 15       	cp	r20, r10
    2264:	5b 05       	cpc	r21, r11
    2266:	84 f0       	brlt	.+32     	; 0x2288 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2268:	88 e0       	ldi	r24, 0x08	; 8
    226a:	a8 16       	cp	r10, r24
    226c:	b1 04       	cpc	r11, r1
    226e:	09 f0       	breq	.+2      	; 0x2272 <follow_path+0xc2>
    2270:	dd c0       	rjmp	.+442    	; 0x242c <follow_path+0x27c>
    2272:	2e 32       	cpi	r18, 0x2E	; 46
    2274:	09 f0       	breq	.+2      	; 0x2278 <follow_path+0xc8>
    2276:	da c0       	rjmp	.+436    	; 0x242c <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    2278:	11 0f       	add	r17, r17
    227a:	11 0f       	add	r17, r17
    227c:	48 e0       	ldi	r20, 0x08	; 8
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	2b e0       	ldi	r18, 0x0B	; 11
    2282:	a2 2e       	mov	r10, r18
    2284:	b1 2c       	mov	r11, r1
    2286:	db cf       	rjmp	.-74     	; 0x223e <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    2288:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    228a:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    228c:	82 2f       	mov	r24, r18
    228e:	81 58       	subi	r24, 0x81	; 129
    2290:	8f 31       	cpi	r24, 0x1F	; 31
    2292:	18 f0       	brcs	.+6      	; 0x229a <follow_path+0xea>
    2294:	8f 55       	subi	r24, 0x5F	; 95
    2296:	8d 31       	cpi	r24, 0x1D	; 29
    2298:	08 f5       	brcc	.+66     	; 0x22dc <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    229a:	f7 01       	movw	r30, r14
    229c:	ec 0d       	add	r30, r12
    229e:	fd 1d       	adc	r31, r13
    22a0:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    22a2:	83 2f       	mov	r24, r19
    22a4:	80 54       	subi	r24, 0x40	; 64
    22a6:	8f 33       	cpi	r24, 0x3F	; 63
    22a8:	20 f0       	brcs	.+8      	; 0x22b2 <follow_path+0x102>
    22aa:	80 54       	subi	r24, 0x40	; 64
    22ac:	8d 37       	cpi	r24, 0x7D	; 125
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <follow_path+0x102>
    22b0:	bd c0       	rjmp	.+378    	; 0x242c <follow_path+0x27c>
    22b2:	c5 01       	movw	r24, r10
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	48 17       	cp	r20, r24
    22b8:	59 07       	cpc	r21, r25
    22ba:	0c f0       	brlt	.+2      	; 0x22be <follow_path+0x10e>
    22bc:	b7 c0       	rjmp	.+366    	; 0x242c <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    22be:	08 94       	sec
    22c0:	c1 1c       	adc	r12, r1
    22c2:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    22c4:	fd 01       	movw	r30, r26
    22c6:	e4 0f       	add	r30, r20
    22c8:	f5 1f       	adc	r31, r21
    22ca:	20 83       	st	Z, r18
    22cc:	ca 01       	movw	r24, r20
    22ce:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    22d0:	fd 01       	movw	r30, r26
    22d2:	e8 0f       	add	r30, r24
    22d4:	f9 1f       	adc	r31, r25
    22d6:	30 83       	st	Z, r19
    22d8:	ac 01       	movw	r20, r24
    22da:	1e c0       	rjmp	.+60     	; 0x2318 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    22dc:	62 2f       	mov	r22, r18
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	e0 e0       	ldi	r30, 0x00	; 0
    22e2:	f0 e2       	ldi	r31, 0x20	; 32
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    22e6:	31 96       	adiw	r30, 0x01	; 1
    22e8:	80 81       	ld	r24, Z
    22ea:	88 23       	and	r24, r24
    22ec:	29 f0       	breq	.+10     	; 0x22f8 <follow_path+0x148>
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	86 17       	cp	r24, r22
    22f2:	97 07       	cpc	r25, r23
    22f4:	c1 f7       	brne	.-16     	; 0x22e6 <follow_path+0x136>
    22f6:	9a c0       	rjmp	.+308    	; 0x242c <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    22f8:	82 2f       	mov	r24, r18
    22fa:	81 54       	subi	r24, 0x41	; 65
    22fc:	8a 31       	cpi	r24, 0x1A	; 26
    22fe:	10 f4       	brcc	.+4      	; 0x2304 <follow_path+0x154>
				b |= 2;
    2300:	12 60       	ori	r17, 0x02	; 2
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2304:	82 2f       	mov	r24, r18
    2306:	81 56       	subi	r24, 0x61	; 97
    2308:	8a 31       	cpi	r24, 0x1A	; 26
    230a:	10 f4       	brcc	.+4      	; 0x2310 <follow_path+0x160>
					b |= 1; c -= 0x20;
    230c:	11 60       	ori	r17, 0x01	; 1
    230e:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2310:	fd 01       	movw	r30, r26
    2312:	e4 0f       	add	r30, r20
    2314:	f5 1f       	adc	r31, r21
    2316:	20 83       	st	Z, r18
    2318:	4f 5f       	subi	r20, 0xFF	; 255
    231a:	5f 4f       	sbci	r21, 0xFF	; 255
    231c:	90 cf       	rjmp	.-224    	; 0x223e <follow_path+0x8e>
    231e:	91 2f       	mov	r25, r17
    2320:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2322:	45 2b       	or	r20, r21
    2324:	09 f4       	brne	.+2      	; 0x2328 <follow_path+0x178>
    2326:	82 c0       	rjmp	.+260    	; 0x242c <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2328:	8c 91       	ld	r24, X
    232a:	85 3e       	cpi	r24, 0xE5	; 229
    232c:	09 f4       	brne	.+2      	; 0x2330 <follow_path+0x180>
    232e:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    2330:	e8 e0       	ldi	r30, 0x08	; 8
    2332:	ae 16       	cp	r10, r30
    2334:	b1 04       	cpc	r11, r1
    2336:	19 f4       	brne	.+6      	; 0x233e <follow_path+0x18e>
    2338:	91 2f       	mov	r25, r17
    233a:	99 0f       	add	r25, r25
    233c:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    233e:	29 2f       	mov	r18, r25
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	c9 01       	movw	r24, r18
    2344:	83 70       	andi	r24, 0x03	; 3
    2346:	90 70       	andi	r25, 0x00	; 0
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	09 f4       	brne	.+2      	; 0x234e <follow_path+0x19e>
    234c:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    234e:	2c 70       	andi	r18, 0x0C	; 12
    2350:	30 70       	andi	r19, 0x00	; 0
    2352:	24 30       	cpi	r18, 0x04	; 4
    2354:	31 05       	cpc	r19, r1
    2356:	09 f4       	brne	.+2      	; 0x235a <follow_path+0x1aa>
    2358:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    235a:	1b 96       	adiw	r26, 0x0b	; 11
    235c:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    235e:	ce 01       	movw	r24, r28
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
    2368:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    236a:	88 23       	and	r24, r24
    236c:	71 f5       	brne	.+92     	; 0x23ca <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    236e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2370:	5f 85       	ldd	r21, Y+15	; 0x0f
    2372:	68 89       	ldd	r22, Y+16	; 0x10
    2374:	79 89       	ldd	r23, Y+17	; 0x11
    2376:	88 81       	ld	r24, Y
    2378:	99 81       	ldd	r25, Y+1	; 0x01
    237a:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    237e:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    2380:	88 23       	and	r24, r24
    2382:	19 f5       	brne	.+70     	; 0x23ca <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2384:	ea 89       	ldd	r30, Y+18	; 0x12
    2386:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2388:	80 81       	ld	r24, Z
    238a:	88 23       	and	r24, r24
    238c:	11 f4       	brne	.+4      	; 0x2392 <follow_path+0x1e2>
    238e:	44 e0       	ldi	r20, 0x04	; 4
    2390:	1c c0       	rjmp	.+56     	; 0x23ca <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2392:	83 85       	ldd	r24, Z+11	; 0x0b
    2394:	83 fd       	sbrc	r24, 3
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <follow_path+0x210>
    2398:	df 01       	movw	r26, r30
    239a:	8c 89       	ldd	r24, Y+20	; 0x14
    239c:	9d 89       	ldd	r25, Y+21	; 0x15
    239e:	9c 01       	movw	r18, r24
    23a0:	f9 01       	movw	r30, r18
    23a2:	2b e0       	ldi	r18, 0x0B	; 11
    23a4:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    23a6:	21 50       	subi	r18, 0x01	; 1
    23a8:	30 40       	sbci	r19, 0x00	; 0
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	2f 3f       	cpi	r18, 0xFF	; 255
    23ae:	38 07       	cpc	r19, r24
    23b0:	61 f0       	breq	.+24     	; 0x23ca <follow_path+0x21a>
    23b2:	9c 91       	ld	r25, X
    23b4:	80 81       	ld	r24, Z
    23b6:	98 17       	cp	r25, r24
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <follow_path+0x210>
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	31 96       	adiw	r30, 0x01	; 1
    23be:	f3 cf       	rjmp	.-26     	; 0x23a6 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    23c0:	ce 01       	movw	r24, r28
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <dir_next>
    23c8:	cf cf       	rjmp	.-98     	; 0x2368 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    23ca:	ec 89       	ldd	r30, Y+20	; 0x14
    23cc:	fd 89       	ldd	r31, Y+21	; 0x15
    23ce:	93 85       	ldd	r25, Z+11	; 0x0b
    23d0:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    23d2:	44 23       	and	r20, r20
    23d4:	31 f0       	breq	.+12     	; 0x23e2 <follow_path+0x232>
    23d6:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    23d8:	44 30       	cpi	r20, 0x04	; 4
    23da:	51 f5       	brne	.+84     	; 0x2430 <follow_path+0x280>
    23dc:	99 23       	and	r25, r25
    23de:	51 f1       	breq	.+84     	; 0x2434 <follow_path+0x284>
    23e0:	2a c0       	rjmp	.+84     	; 0x2436 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    23e2:	99 23       	and	r25, r25
    23e4:	29 f5       	brne	.+74     	; 0x2430 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    23e6:	ea 89       	ldd	r30, Y+18	; 0x12
    23e8:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    23ea:	83 85       	ldd	r24, Z+11	; 0x0b
    23ec:	84 ff       	sbrs	r24, 4
    23ee:	22 c0       	rjmp	.+68     	; 0x2434 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    23f0:	ec 0c       	add	r14, r12
    23f2:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    23f4:	75 88       	ldd	r7, Z+21	; 0x15
    23f6:	66 24       	eor	r6, r6
    23f8:	24 89       	ldd	r18, Z+20	; 0x14
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	26 29       	or	r18, r6
    23fe:	37 29       	or	r19, r7
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	a9 01       	movw	r20, r18
    2406:	33 27       	eor	r19, r19
    2408:	22 27       	eor	r18, r18
    240a:	93 8c       	ldd	r9, Z+27	; 0x1b
    240c:	88 24       	eor	r8, r8
    240e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	88 29       	or	r24, r8
    2414:	99 29       	or	r25, r9
    2416:	a0 e0       	ldi	r26, 0x00	; 0
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	28 2b       	or	r18, r24
    241c:	39 2b       	or	r19, r25
    241e:	4a 2b       	or	r20, r26
    2420:	5b 2b       	or	r21, r27
    2422:	2e 83       	std	Y+6, r18	; 0x06
    2424:	3f 83       	std	Y+7, r19	; 0x07
    2426:	48 87       	std	Y+8, r20	; 0x08
    2428:	59 87       	std	Y+9, r21	; 0x09
    242a:	f5 ce       	rjmp	.-534    	; 0x2216 <follow_path+0x66>
		}
    242c:	86 e0       	ldi	r24, 0x06	; 6
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <follow_path+0x286>
    2430:	84 2f       	mov	r24, r20
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <follow_path+0x286>
    2434:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2456:	91 2f       	mov	r25, r17
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	63 cf       	rjmp	.-314    	; 0x2322 <follow_path+0x172>

0000245c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    245c:	0f 93       	push	r16
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	ec 01       	movw	r28, r24
    2464:	9a 01       	movw	r18, r20
    2466:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2468:	bc 01       	movw	r22, r24
    246a:	62 5d       	subi	r22, 0xD2	; 210
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	01 e0       	ldi	r16, 0x01	; 1
    2472:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    2476:	88 23       	and	r24, r24
    2478:	11 f0       	breq	.+4      	; 0x247e <check_fs+0x22>
    247a:	63 e0       	ldi	r22, 0x03	; 3
    247c:	6d c0       	rjmp	.+218    	; 0x2558 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    247e:	c3 5d       	subi	r28, 0xD3	; 211
    2480:	dd 4f       	sbci	r29, 0xFD	; 253
    2482:	98 81       	ld	r25, Y
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	2a 91       	ld	r18, -Y
    2488:	cc 52       	subi	r28, 0x2C	; 44
    248a:	d2 40       	sbci	r29, 0x02	; 2
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	82 2b       	or	r24, r18
    2490:	93 2b       	or	r25, r19
    2492:	85 55       	subi	r24, 0x55	; 85
    2494:	9a 4a       	sbci	r25, 0xAA	; 170
    2496:	11 f0       	breq	.+4      	; 0x249c <check_fs+0x40>
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	5e c0       	rjmp	.+188    	; 0x2558 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    249c:	c9 59       	subi	r28, 0x99	; 153
    249e:	df 4f       	sbci	r29, 0xFF	; 255
    24a0:	28 81       	ld	r18, Y
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	52 2f       	mov	r21, r18
    24aa:	44 27       	eor	r20, r20
    24ac:	33 27       	eor	r19, r19
    24ae:	22 27       	eor	r18, r18
    24b0:	8a 91       	ld	r24, -Y
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	dc 01       	movw	r26, r24
    24ba:	99 27       	eor	r25, r25
    24bc:	88 27       	eor	r24, r24
    24be:	28 2b       	or	r18, r24
    24c0:	39 2b       	or	r19, r25
    24c2:	4a 2b       	or	r20, r26
    24c4:	5b 2b       	or	r21, r27
    24c6:	22 97       	sbiw	r28, 0x02	; 2
    24c8:	89 91       	ld	r24, Y+
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	28 2b       	or	r18, r24
    24d2:	39 2b       	or	r19, r25
    24d4:	4a 2b       	or	r20, r26
    24d6:	5b 2b       	or	r21, r27
    24d8:	98 81       	ld	r25, Y
    24da:	c5 56       	subi	r28, 0x65	; 101
    24dc:	d0 40       	sbci	r29, 0x00	; 0
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	a0 e0       	ldi	r26, 0x00	; 0
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	28 2b       	or	r18, r24
    24e6:	39 2b       	or	r19, r25
    24e8:	4a 2b       	or	r20, r26
    24ea:	5b 2b       	or	r21, r27
    24ec:	50 70       	andi	r21, 0x00	; 0
    24ee:	26 54       	subi	r18, 0x46	; 70
    24f0:	31 44       	sbci	r19, 0x41	; 65
    24f2:	44 45       	sbci	r20, 0x54	; 84
    24f4:	50 40       	sbci	r21, 0x00	; 0
    24f6:	11 f4       	brne	.+4      	; 0x24fc <check_fs+0xa0>
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	2e c0       	rjmp	.+92     	; 0x2558 <check_fs+0xfc>
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	cd 57       	subi	r28, 0x7D	; 125
    2500:	df 4f       	sbci	r29, 0xFF	; 255
    2502:	28 81       	ld	r18, Y
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	52 2f       	mov	r21, r18
    250c:	44 27       	eor	r20, r20
    250e:	33 27       	eor	r19, r19
    2510:	22 27       	eor	r18, r18
    2512:	8a 91       	ld	r24, -Y
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	dc 01       	movw	r26, r24
    251c:	99 27       	eor	r25, r25
    251e:	88 27       	eor	r24, r24
    2520:	28 2b       	or	r18, r24
    2522:	39 2b       	or	r19, r25
    2524:	4a 2b       	or	r20, r26
    2526:	5b 2b       	or	r21, r27
    2528:	22 97       	sbiw	r28, 0x02	; 2
    252a:	89 91       	ld	r24, Y+
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e0       	ldi	r26, 0x00	; 0
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	28 2b       	or	r18, r24
    2534:	39 2b       	or	r19, r25
    2536:	4a 2b       	or	r20, r26
    2538:	5b 2b       	or	r21, r27
    253a:	98 81       	ld	r25, Y
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	a0 e0       	ldi	r26, 0x00	; 0
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	28 2b       	or	r18, r24
    2544:	39 2b       	or	r19, r25
    2546:	4a 2b       	or	r20, r26
    2548:	5b 2b       	or	r21, r27
    254a:	50 70       	andi	r21, 0x00	; 0
    254c:	26 54       	subi	r18, 0x46	; 70
    254e:	31 44       	sbci	r19, 0x41	; 65
    2550:	44 45       	sbci	r20, 0x54	; 84
    2552:	50 40       	sbci	r21, 0x00	; 0
    2554:	09 f0       	breq	.+2      	; 0x2558 <check_fs+0xfc>
    2556:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2558:	86 2f       	mov	r24, r22
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	dc 01       	movw	r26, r24
    2580:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2582:	ed 91       	ld	r30, X+
    2584:	fc 91       	ld	r31, X
    2586:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2588:	80 81       	ld	r24, Z
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	20 53       	subi	r18, 0x30	; 48
    2590:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    2592:	2a 30       	cpi	r18, 0x0A	; 10
    2594:	31 05       	cpc	r19, r1
    2596:	50 f4       	brcc	.+20     	; 0x25ac <chk_mounted+0x4a>
    2598:	81 81       	ldd	r24, Z+1	; 0x01
    259a:	8a 33       	cpi	r24, 0x3A	; 58
    259c:	39 f4       	brne	.+14     	; 0x25ac <chk_mounted+0x4a>
		p += 2; *path = p;			/* Return pointer to the path name */
    259e:	32 96       	adiw	r30, 0x02	; 2
    25a0:	ed 93       	st	X+, r30
    25a2:	fc 93       	st	X, r31
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    25a4:	23 2b       	or	r18, r19
    25a6:	11 f0       	breq	.+4      	; 0x25ac <chk_mounted+0x4a>
    25a8:	8b e0       	ldi	r24, 0x0B	; 11
    25aa:	79 c2       	rjmp	.+1266   	; 0x2a9e <chk_mounted+0x53c>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    25ac:	c0 91 e7 2b 	lds	r28, 0x2BE7
    25b0:	d0 91 e8 2b 	lds	r29, 0x2BE8
    25b4:	fb 01       	movw	r30, r22
    25b6:	c0 83       	st	Z, r28
    25b8:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    25ba:	20 97       	sbiw	r28, 0x00	; 0
    25bc:	11 f4       	brne	.+4      	; 0x25c2 <chk_mounted+0x60>
    25be:	8c e0       	ldi	r24, 0x0C	; 12
    25c0:	6e c2       	rjmp	.+1244   	; 0x2a9e <chk_mounted+0x53c>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    25c2:	88 81       	ld	r24, Y
    25c4:	88 23       	and	r24, r24
    25c6:	79 f0       	breq	.+30     	; 0x25e6 <chk_mounted+0x84>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	88 23       	and	r24, r24
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <chk_mounted+0x70>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <chk_mounted+0x74>
	return Stat;
    25d2:	80 91 5d 2b 	lds	r24, 0x2B5D
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    25d6:	80 fd       	sbrc	r24, 0
    25d8:	06 c0       	rjmp	.+12     	; 0x25e6 <chk_mounted+0x84>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    25da:	11 23       	and	r17, r17
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <chk_mounted+0x7e>
    25de:	5c c2       	rjmp	.+1208   	; 0x2a98 <chk_mounted+0x536>
    25e0:	82 fd       	sbrc	r24, 2
    25e2:	58 c2       	rjmp	.+1200   	; 0x2a94 <chk_mounted+0x532>
    25e4:	59 c2       	rjmp	.+1202   	; 0x2a98 <chk_mounted+0x536>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    25e6:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    25e8:	19 82       	std	Y+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	0e 94 c4 04 	call	0x988	; 0x988 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    25f0:	80 ff       	sbrs	r24, 0
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <chk_mounted+0x96>
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	53 c2       	rjmp	.+1190   	; 0x2a9e <chk_mounted+0x53c>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    25f8:	11 23       	and	r17, r17
    25fa:	11 f0       	breq	.+4      	; 0x2600 <chk_mounted+0x9e>
    25fc:	82 fd       	sbrc	r24, 2
    25fe:	4a c2       	rjmp	.+1172   	; 0x2a94 <chk_mounted+0x532>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    2600:	ce 01       	movw	r24, r28
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	0e 94 2e 12 	call	0x245c	; 0x245c <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	21 f0       	breq	.+8      	; 0x261a <chk_mounted+0xb8>
    2612:	aa 24       	eor	r10, r10
    2614:	bb 24       	eor	r11, r11
    2616:	65 01       	movw	r12, r10
    2618:	2f c0       	rjmp	.+94     	; 0x2678 <chk_mounted+0x116>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    261a:	fe 01       	movw	r30, r28
    261c:	e4 51       	subi	r30, 0x14	; 20
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2620:	84 81       	ldd	r24, Z+4	; 0x04
    2622:	88 23       	and	r24, r24
    2624:	09 f4       	brne	.+2      	; 0x2628 <chk_mounted+0xc6>
    2626:	3a c2       	rjmp	.+1140   	; 0x2a9c <chk_mounted+0x53a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2628:	83 85       	ldd	r24, Z+11	; 0x0b
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a0 e0       	ldi	r26, 0x00	; 0
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	d8 2e       	mov	r13, r24
    2632:	cc 24       	eor	r12, r12
    2634:	bb 24       	eor	r11, r11
    2636:	aa 24       	eor	r10, r10
    2638:	82 85       	ldd	r24, Z+10	; 0x0a
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	dc 01       	movw	r26, r24
    2642:	99 27       	eor	r25, r25
    2644:	88 27       	eor	r24, r24
    2646:	a8 2a       	or	r10, r24
    2648:	b9 2a       	or	r11, r25
    264a:	ca 2a       	or	r12, r26
    264c:	db 2a       	or	r13, r27
    264e:	80 85       	ldd	r24, Z+8	; 0x08
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e0       	ldi	r26, 0x00	; 0
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	a8 2a       	or	r10, r24
    2658:	b9 2a       	or	r11, r25
    265a:	ca 2a       	or	r12, r26
    265c:	db 2a       	or	r13, r27
    265e:	91 85       	ldd	r25, Z+9	; 0x09
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	a8 2a       	or	r10, r24
    2668:	b9 2a       	or	r11, r25
    266a:	ca 2a       	or	r12, r26
    266c:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    266e:	ce 01       	movw	r24, r28
    2670:	b6 01       	movw	r22, r12
    2672:	a5 01       	movw	r20, r10
    2674:	0e 94 2e 12 	call	0x245c	; 0x245c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	11 f4       	brne	.+4      	; 0x2680 <chk_mounted+0x11e>
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	0f c2       	rjmp	.+1054   	; 0x2a9e <chk_mounted+0x53c>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2680:	88 23       	and	r24, r24
    2682:	09 f0       	breq	.+2      	; 0x2686 <chk_mounted+0x124>
    2684:	0b c2       	rjmp	.+1046   	; 0x2a9c <chk_mounted+0x53a>
    2686:	9a ad       	ldd	r25, Y+58	; 0x3a
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	29 ad       	ldd	r18, Y+57	; 0x39
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	82 2b       	or	r24, r18
    2690:	93 2b       	or	r25, r19
    2692:	80 50       	subi	r24, 0x00	; 0
    2694:	92 40       	sbci	r25, 0x02	; 2
    2696:	09 f0       	breq	.+2      	; 0x269a <chk_mounted+0x138>
    2698:	01 c2       	rjmp	.+1026   	; 0x2a9c <chk_mounted+0x53a>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    269a:	cb 5b       	subi	r28, 0xBB	; 187
    269c:	df 4f       	sbci	r29, 0xFF	; 255
    269e:	98 81       	ld	r25, Y
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	2a 91       	ld	r18, -Y
    26a4:	c4 54       	subi	r28, 0x44	; 68
    26a6:	d0 40       	sbci	r29, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	82 2b       	or	r24, r18
    26ac:	93 2b       	or	r25, r19
    26ae:	7c 01       	movw	r14, r24
    26b0:	00 e0       	ldi	r16, 0x00	; 0
    26b2:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    26b4:	e1 14       	cp	r14, r1
    26b6:	f1 04       	cpc	r15, r1
    26b8:	01 05       	cpc	r16, r1
    26ba:	11 05       	cpc	r17, r1
    26bc:	41 f5       	brne	.+80     	; 0x270e <chk_mounted+0x1ac>
    26be:	cb 5a       	subi	r28, 0xAB	; 171
    26c0:	df 4f       	sbci	r29, 0xFF	; 255
    26c2:	88 81       	ld	r24, Y
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	18 2f       	mov	r17, r24
    26cc:	00 27       	eor	r16, r16
    26ce:	ff 24       	eor	r15, r15
    26d0:	ee 24       	eor	r14, r14
    26d2:	8a 91       	ld	r24, -Y
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	dc 01       	movw	r26, r24
    26dc:	99 27       	eor	r25, r25
    26de:	88 27       	eor	r24, r24
    26e0:	e8 2a       	or	r14, r24
    26e2:	f9 2a       	or	r15, r25
    26e4:	0a 2b       	or	r16, r26
    26e6:	1b 2b       	or	r17, r27
    26e8:	22 97       	sbiw	r28, 0x02	; 2
    26ea:	89 91       	ld	r24, Y+
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e0       	ldi	r26, 0x00	; 0
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e8 2a       	or	r14, r24
    26f4:	f9 2a       	or	r15, r25
    26f6:	0a 2b       	or	r16, r26
    26f8:	1b 2b       	or	r17, r27
    26fa:	98 81       	ld	r25, Y
    26fc:	c3 55       	subi	r28, 0x53	; 83
    26fe:	d0 40       	sbci	r29, 0x00	; 0
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e8 2a       	or	r14, r24
    2708:	f9 2a       	or	r15, r25
    270a:	0a 2b       	or	r16, r26
    270c:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    270e:	ee 8a       	std	Y+22, r14	; 0x16
    2710:	ff 8a       	std	Y+23, r15	; 0x17
    2712:	08 8f       	std	Y+24, r16	; 0x18
    2714:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2716:	2e ad       	ldd	r18, Y+62	; 0x3e
    2718:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	c8 01       	movw	r24, r16
    2722:	b7 01       	movw	r22, r14
    2724:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    2728:	3b 01       	movw	r6, r22
    272a:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    272c:	9d ad       	ldd	r25, Y+61	; 0x3d
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	2c ad       	ldd	r18, Y+60	; 0x3c
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	82 2b       	or	r24, r18
    2736:	93 2b       	or	r25, r19
    2738:	a0 e0       	ldi	r26, 0x00	; 0
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	8a 0d       	add	r24, r10
    273e:	9b 1d       	adc	r25, r11
    2740:	ac 1d       	adc	r26, r12
    2742:	bd 1d       	adc	r27, r13
    2744:	8e 8f       	std	Y+30, r24	; 0x1e
    2746:	9f 8f       	std	Y+31, r25	; 0x1f
    2748:	a8 a3       	std	Y+32, r26	; 0x20
    274a:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    274c:	8b ad       	ldd	r24, Y+59	; 0x3b
    274e:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2750:	c0 5c       	subi	r28, 0xC0	; 192
    2752:	df 4f       	sbci	r29, 0xFF	; 255
    2754:	98 81       	ld	r25, Y
    2756:	c0 54       	subi	r28, 0x40	; 64
    2758:	d0 40       	sbci	r29, 0x00	; 0
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	2f ad       	ldd	r18, Y+63	; 0x3f
    275e:	42 2f       	mov	r20, r18
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	48 2b       	or	r20, r24
    2764:	59 2b       	or	r21, r25
    2766:	48 87       	std	Y+8, r20	; 0x08
    2768:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    276a:	ce 5b       	subi	r28, 0xBE	; 190
    276c:	df 4f       	sbci	r29, 0xFF	; 255
    276e:	98 81       	ld	r25, Y
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	2a 91       	ld	r18, -Y
    2774:	c1 54       	subi	r28, 0x41	; 65
    2776:	d0 40       	sbci	r29, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	82 2b       	or	r24, r18
    277c:	93 2b       	or	r25, r19
    277e:	7c 01       	movw	r14, r24
    2780:	00 e0       	ldi	r16, 0x00	; 0
    2782:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2784:	e1 14       	cp	r14, r1
    2786:	f1 04       	cpc	r15, r1
    2788:	01 05       	cpc	r16, r1
    278a:	11 05       	cpc	r17, r1
    278c:	41 f5       	brne	.+80     	; 0x27de <chk_mounted+0x27c>
    278e:	cf 5a       	subi	r28, 0xAF	; 175
    2790:	df 4f       	sbci	r29, 0xFF	; 255
    2792:	88 81       	ld	r24, Y
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e0       	ldi	r26, 0x00	; 0
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	18 2f       	mov	r17, r24
    279c:	00 27       	eor	r16, r16
    279e:	ff 24       	eor	r15, r15
    27a0:	ee 24       	eor	r14, r14
    27a2:	8a 91       	ld	r24, -Y
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	a0 e0       	ldi	r26, 0x00	; 0
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	dc 01       	movw	r26, r24
    27ac:	99 27       	eor	r25, r25
    27ae:	88 27       	eor	r24, r24
    27b0:	e8 2a       	or	r14, r24
    27b2:	f9 2a       	or	r15, r25
    27b4:	0a 2b       	or	r16, r26
    27b6:	1b 2b       	or	r17, r27
    27b8:	22 97       	sbiw	r28, 0x02	; 2
    27ba:	89 91       	ld	r24, Y+
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a0 e0       	ldi	r26, 0x00	; 0
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e8 2a       	or	r14, r24
    27c4:	f9 2a       	or	r15, r25
    27c6:	0a 2b       	or	r16, r26
    27c8:	1b 2b       	or	r17, r27
    27ca:	98 81       	ld	r25, Y
    27cc:	cf 54       	subi	r28, 0x4F	; 79
    27ce:	d0 40       	sbci	r29, 0x00	; 0
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	a0 e0       	ldi	r26, 0x00	; 0
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e8 2a       	or	r14, r24
    27d8:	f9 2a       	or	r15, r25
    27da:	0a 2b       	or	r16, r26
    27dc:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    27de:	9d ad       	ldd	r25, Y+61	; 0x3d
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	82 2b       	or	r24, r18
    27e8:	93 2b       	or	r25, r19
    27ea:	a0 e0       	ldi	r26, 0x00	; 0
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e8 1a       	sub	r14, r24
    27f0:	f9 0a       	sbc	r15, r25
    27f2:	0a 0b       	sbc	r16, r26
    27f4:	1b 0b       	sbc	r17, r27
    27f6:	e6 18       	sub	r14, r6
    27f8:	f7 08       	sbc	r15, r7
    27fa:	08 09       	sbc	r16, r8
    27fc:	19 09       	sbc	r17, r9
    27fe:	f4 e0       	ldi	r31, 0x04	; 4
    2800:	56 95       	lsr	r21
    2802:	47 95       	ror	r20
    2804:	fa 95       	dec	r31
    2806:	e1 f7       	brne	.-8      	; 0x2800 <chk_mounted+0x29e>
    2808:	ca 01       	movw	r24, r20
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e8 1a       	sub	r14, r24
    2810:	f9 0a       	sbc	r15, r25
    2812:	0a 0b       	sbc	r16, r26
    2814:	1b 0b       	sbc	r17, r27
    2816:	2a 81       	ldd	r18, Y+2	; 0x02
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	c8 01       	movw	r24, r16
    2820:	b7 01       	movw	r22, r14
    2822:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    2826:	2e 5f       	subi	r18, 0xFE	; 254
    2828:	3f 4f       	sbci	r19, 0xFF	; 255
    282a:	4f 4f       	sbci	r20, 0xFF	; 255
    282c:	5f 4f       	sbci	r21, 0xFF	; 255
    282e:	2a 8f       	std	Y+26, r18	; 0x1a
    2830:	3b 8f       	std	Y+27, r19	; 0x1b
    2832:	4c 8f       	std	Y+28, r20	; 0x1c
    2834:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2836:	27 3f       	cpi	r18, 0xF7	; 247
    2838:	8f e0       	ldi	r24, 0x0F	; 15
    283a:	38 07       	cpc	r19, r24
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	48 07       	cpc	r20, r24
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	58 07       	cpc	r21, r24
    2844:	10 f4       	brcc	.+4      	; 0x284a <chk_mounted+0x2e8>
    2846:	11 e0       	ldi	r17, 0x01	; 1
    2848:	07 c0       	rjmp	.+14     	; 0x2858 <chk_mounted+0x2f6>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    284a:	27 5f       	subi	r18, 0xF7	; 247
    284c:	3f 4f       	sbci	r19, 0xFF	; 255
    284e:	40 40       	sbci	r20, 0x00	; 0
    2850:	50 40       	sbci	r21, 0x00	; 0
    2852:	08 f0       	brcs	.+2      	; 0x2856 <chk_mounted+0x2f4>
    2854:	33 c1       	rjmp	.+614    	; 0x2abc <chk_mounted+0x55a>
    2856:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2858:	8e 8d       	ldd	r24, Y+30	; 0x1e
    285a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    285c:	a8 a1       	ldd	r26, Y+32	; 0x20
    285e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2860:	86 0d       	add	r24, r6
    2862:	97 1d       	adc	r25, r7
    2864:	a8 1d       	adc	r26, r8
    2866:	b9 1d       	adc	r27, r9
    2868:	8a a3       	std	Y+34, r24	; 0x22
    286a:	9b a3       	std	Y+35, r25	; 0x23
    286c:	ac a3       	std	Y+36, r26	; 0x24
    286e:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2870:	88 85       	ldd	r24, Y+8	; 0x08
    2872:	99 85       	ldd	r25, Y+9	; 0x09
    2874:	e4 e0       	ldi	r30, 0x04	; 4
    2876:	96 95       	lsr	r25
    2878:	87 95       	ror	r24
    287a:	ea 95       	dec	r30
    287c:	e1 f7       	brne	.-8      	; 0x2876 <chk_mounted+0x314>
    287e:	a0 e0       	ldi	r26, 0x00	; 0
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2884:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2886:	48 a1       	ldd	r20, Y+32	; 0x20
    2888:	59 a1       	ldd	r21, Y+33	; 0x21
    288a:	82 0f       	add	r24, r18
    288c:	93 1f       	adc	r25, r19
    288e:	a4 1f       	adc	r26, r20
    2890:	b5 1f       	adc	r27, r21
    2892:	86 0d       	add	r24, r6
    2894:	97 1d       	adc	r25, r7
    2896:	a8 1d       	adc	r26, r8
    2898:	b9 1d       	adc	r27, r9
    289a:	8e a3       	std	Y+38, r24	; 0x26
    289c:	9f a3       	std	Y+39, r25	; 0x27
    289e:	a8 a7       	std	Y+40, r26	; 0x28
    28a0:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    28a2:	8f ef       	ldi	r24, 0xFF	; 255
    28a4:	9f ef       	ldi	r25, 0xFF	; 255
    28a6:	af ef       	ldi	r26, 0xFF	; 255
    28a8:	bf ef       	ldi	r27, 0xFF	; 255
    28aa:	8e 87       	std	Y+14, r24	; 0x0e
    28ac:	9f 87       	std	Y+15, r25	; 0x0f
    28ae:	a8 8b       	std	Y+16, r26	; 0x10
    28b0:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    28b2:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    28b4:	13 30       	cpi	r17, 0x03	; 3
    28b6:	09 f0       	breq	.+2      	; 0x28ba <chk_mounted+0x358>
    28b8:	dc c0       	rjmp	.+440    	; 0x2a72 <chk_mounted+0x510>
	 	fs->fsi_flag = 0;
    28ba:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    28bc:	c1 5a       	subi	r28, 0xA1	; 161
    28be:	df 4f       	sbci	r29, 0xFF	; 255
    28c0:	38 81       	ld	r19, Y
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	8a 91       	ld	r24, -Y
    28c6:	ce 55       	subi	r28, 0x5E	; 94
    28c8:	d0 40       	sbci	r29, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	28 2b       	or	r18, r24
    28ce:	39 2b       	or	r19, r25
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	2a 0d       	add	r18, r10
    28d6:	3b 1d       	adc	r19, r11
    28d8:	4c 1d       	adc	r20, r12
    28da:	5d 1d       	adc	r21, r13
    28dc:	2a 8b       	std	Y+18, r18	; 0x12
    28de:	3b 8b       	std	Y+19, r19	; 0x13
    28e0:	4c 8b       	std	Y+20, r20	; 0x14
    28e2:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    28e4:	be 01       	movw	r22, r28
    28e6:	62 5d       	subi	r22, 0xD2	; 210
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	01 e0       	ldi	r16, 0x01	; 1
    28ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    28f2:	88 23       	and	r24, r24
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <chk_mounted+0x396>
    28f6:	bd c0       	rjmp	.+378    	; 0x2a72 <chk_mounted+0x510>
    28f8:	c3 5d       	subi	r28, 0xD3	; 211
    28fa:	dd 4f       	sbci	r29, 0xFD	; 253
    28fc:	98 81       	ld	r25, Y
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	2a 91       	ld	r18, -Y
    2902:	cc 52       	subi	r28, 0x2C	; 44
    2904:	d2 40       	sbci	r29, 0x02	; 2
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	82 2b       	or	r24, r18
    290a:	93 2b       	or	r25, r19
    290c:	85 55       	subi	r24, 0x55	; 85
    290e:	9a 4a       	sbci	r25, 0xAA	; 170
    2910:	09 f0       	breq	.+2      	; 0x2914 <chk_mounted+0x3b2>
    2912:	af c0       	rjmp	.+350    	; 0x2a72 <chk_mounted+0x510>
    2914:	29 a9       	ldd	r18, Y+49	; 0x31
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	52 2f       	mov	r21, r18
    291e:	44 27       	eor	r20, r20
    2920:	33 27       	eor	r19, r19
    2922:	22 27       	eor	r18, r18
    2924:	88 a9       	ldd	r24, Y+48	; 0x30
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a0 e0       	ldi	r26, 0x00	; 0
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	dc 01       	movw	r26, r24
    292e:	99 27       	eor	r25, r25
    2930:	88 27       	eor	r24, r24
    2932:	28 2b       	or	r18, r24
    2934:	39 2b       	or	r19, r25
    2936:	4a 2b       	or	r20, r26
    2938:	5b 2b       	or	r21, r27
    293a:	8e a5       	ldd	r24, Y+46	; 0x2e
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 e0       	ldi	r26, 0x00	; 0
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	28 2b       	or	r18, r24
    2944:	39 2b       	or	r19, r25
    2946:	4a 2b       	or	r20, r26
    2948:	5b 2b       	or	r21, r27
    294a:	9f a5       	ldd	r25, Y+47	; 0x2f
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	28 2b       	or	r18, r24
    2954:	39 2b       	or	r19, r25
    2956:	4a 2b       	or	r20, r26
    2958:	5b 2b       	or	r21, r27
    295a:	22 55       	subi	r18, 0x52	; 82
    295c:	32 45       	sbci	r19, 0x52	; 82
    295e:	41 46       	sbci	r20, 0x61	; 97
    2960:	51 44       	sbci	r21, 0x41	; 65
    2962:	09 f0       	breq	.+2      	; 0x2966 <chk_mounted+0x404>
    2964:	86 c0       	rjmp	.+268    	; 0x2a72 <chk_mounted+0x510>
    2966:	cb 5e       	subi	r28, 0xEB	; 235
    2968:	dd 4f       	sbci	r29, 0xFD	; 253
    296a:	28 81       	ld	r18, Y
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	52 2f       	mov	r21, r18
    2974:	44 27       	eor	r20, r20
    2976:	33 27       	eor	r19, r19
    2978:	22 27       	eor	r18, r18
    297a:	8a 91       	ld	r24, -Y
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	dc 01       	movw	r26, r24
    2984:	99 27       	eor	r25, r25
    2986:	88 27       	eor	r24, r24
    2988:	28 2b       	or	r18, r24
    298a:	39 2b       	or	r19, r25
    298c:	4a 2b       	or	r20, r26
    298e:	5b 2b       	or	r21, r27
    2990:	22 97       	sbiw	r28, 0x02	; 2
    2992:	89 91       	ld	r24, Y+
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a0 e0       	ldi	r26, 0x00	; 0
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	28 2b       	or	r18, r24
    299c:	39 2b       	or	r19, r25
    299e:	4a 2b       	or	r20, r26
    29a0:	5b 2b       	or	r21, r27
    29a2:	98 81       	ld	r25, Y
    29a4:	c3 51       	subi	r28, 0x13	; 19
    29a6:	d2 40       	sbci	r29, 0x02	; 2
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	a0 e0       	ldi	r26, 0x00	; 0
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	28 2b       	or	r18, r24
    29b0:	39 2b       	or	r19, r25
    29b2:	4a 2b       	or	r20, r26
    29b4:	5b 2b       	or	r21, r27
    29b6:	22 57       	subi	r18, 0x72	; 114
    29b8:	32 47       	sbci	r19, 0x72	; 114
    29ba:	41 44       	sbci	r20, 0x41	; 65
    29bc:	51 46       	sbci	r21, 0x61	; 97
    29be:	09 f0       	breq	.+2      	; 0x29c2 <chk_mounted+0x460>
    29c0:	58 c0       	rjmp	.+176    	; 0x2a72 <chk_mounted+0x510>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    29c2:	c3 5e       	subi	r28, 0xE3	; 227
    29c4:	dd 4f       	sbci	r29, 0xFD	; 253
    29c6:	28 81       	ld	r18, Y
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	52 2f       	mov	r21, r18
    29d0:	44 27       	eor	r20, r20
    29d2:	33 27       	eor	r19, r19
    29d4:	22 27       	eor	r18, r18
    29d6:	8a 91       	ld	r24, -Y
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 e0       	ldi	r26, 0x00	; 0
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	dc 01       	movw	r26, r24
    29e0:	99 27       	eor	r25, r25
    29e2:	88 27       	eor	r24, r24
    29e4:	28 2b       	or	r18, r24
    29e6:	39 2b       	or	r19, r25
    29e8:	4a 2b       	or	r20, r26
    29ea:	5b 2b       	or	r21, r27
    29ec:	22 97       	sbiw	r28, 0x02	; 2
    29ee:	89 91       	ld	r24, Y+
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e0       	ldi	r26, 0x00	; 0
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	28 2b       	or	r18, r24
    29f8:	39 2b       	or	r19, r25
    29fa:	4a 2b       	or	r20, r26
    29fc:	5b 2b       	or	r21, r27
    29fe:	98 81       	ld	r25, Y
    2a00:	cb 51       	subi	r28, 0x1B	; 27
    2a02:	d2 40       	sbci	r29, 0x02	; 2
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	28 2b       	or	r18, r24
    2a0c:	39 2b       	or	r19, r25
    2a0e:	4a 2b       	or	r20, r26
    2a10:	5b 2b       	or	r21, r27
    2a12:	2a 87       	std	Y+10, r18	; 0x0a
    2a14:	3b 87       	std	Y+11, r19	; 0x0b
    2a16:	4c 87       	std	Y+12, r20	; 0x0c
    2a18:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2a1a:	c7 5e       	subi	r28, 0xE7	; 231
    2a1c:	dd 4f       	sbci	r29, 0xFD	; 253
    2a1e:	28 81       	ld	r18, Y
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	52 2f       	mov	r21, r18
    2a28:	44 27       	eor	r20, r20
    2a2a:	33 27       	eor	r19, r19
    2a2c:	22 27       	eor	r18, r18
    2a2e:	8a 91       	ld	r24, -Y
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a0 e0       	ldi	r26, 0x00	; 0
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	dc 01       	movw	r26, r24
    2a38:	99 27       	eor	r25, r25
    2a3a:	88 27       	eor	r24, r24
    2a3c:	28 2b       	or	r18, r24
    2a3e:	39 2b       	or	r19, r25
    2a40:	4a 2b       	or	r20, r26
    2a42:	5b 2b       	or	r21, r27
    2a44:	22 97       	sbiw	r28, 0x02	; 2
    2a46:	89 91       	ld	r24, Y+
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	28 2b       	or	r18, r24
    2a50:	39 2b       	or	r19, r25
    2a52:	4a 2b       	or	r20, r26
    2a54:	5b 2b       	or	r21, r27
    2a56:	98 81       	ld	r25, Y
    2a58:	c7 51       	subi	r28, 0x17	; 23
    2a5a:	d2 40       	sbci	r29, 0x02	; 2
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	a0 e0       	ldi	r26, 0x00	; 0
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	28 2b       	or	r18, r24
    2a64:	39 2b       	or	r19, r25
    2a66:	4a 2b       	or	r20, r26
    2a68:	5b 2b       	or	r21, r27
    2a6a:	2e 87       	std	Y+14, r18	; 0x0e
    2a6c:	3f 87       	std	Y+15, r19	; 0x0f
    2a6e:	48 8b       	std	Y+16, r20	; 0x10
    2a70:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2a72:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2a74:	1a a6       	std	Y+42, r1	; 0x2a
    2a76:	1b a6       	std	Y+43, r1	; 0x2b
    2a78:	1c a6       	std	Y+44, r1	; 0x2c
    2a7a:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2a7c:	80 91 e9 2b 	lds	r24, 0x2BE9
    2a80:	90 91 ea 2b 	lds	r25, 0x2BEA
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	80 93 e9 2b 	sts	0x2BE9, r24
    2a8a:	90 93 ea 2b 	sts	0x2BEA, r25
    2a8e:	8e 83       	std	Y+6, r24	; 0x06
    2a90:	9f 83       	std	Y+7, r25	; 0x07
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <chk_mounted+0x536>

	return FR_OK;
    2a94:	8a e0       	ldi	r24, 0x0A	; 10
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <chk_mounted+0x53c>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <chk_mounted+0x53c>
    2a9c:	8d e0       	ldi	r24, 0x0D	; 13
}
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	1f 91       	pop	r17
    2aa4:	0f 91       	pop	r16
    2aa6:	ff 90       	pop	r15
    2aa8:	ef 90       	pop	r14
    2aaa:	df 90       	pop	r13
    2aac:	cf 90       	pop	r12
    2aae:	bf 90       	pop	r11
    2ab0:	af 90       	pop	r10
    2ab2:	9f 90       	pop	r9
    2ab4:	8f 90       	pop	r8
    2ab6:	7f 90       	pop	r7
    2ab8:	6f 90       	pop	r6
    2aba:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2abc:	c3 5a       	subi	r28, 0xA3	; 163
    2abe:	df 4f       	sbci	r29, 0xFF	; 255
    2ac0:	28 81       	ld	r18, Y
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	52 2f       	mov	r21, r18
    2aca:	44 27       	eor	r20, r20
    2acc:	33 27       	eor	r19, r19
    2ace:	22 27       	eor	r18, r18
    2ad0:	8a 91       	ld	r24, -Y
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e0       	ldi	r26, 0x00	; 0
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	dc 01       	movw	r26, r24
    2ada:	99 27       	eor	r25, r25
    2adc:	88 27       	eor	r24, r24
    2ade:	28 2b       	or	r18, r24
    2ae0:	39 2b       	or	r19, r25
    2ae2:	4a 2b       	or	r20, r26
    2ae4:	5b 2b       	or	r21, r27
    2ae6:	22 97       	sbiw	r28, 0x02	; 2
    2ae8:	89 91       	ld	r24, Y+
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a0 e0       	ldi	r26, 0x00	; 0
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	28 2b       	or	r18, r24
    2af2:	39 2b       	or	r19, r25
    2af4:	4a 2b       	or	r20, r26
    2af6:	5b 2b       	or	r21, r27
    2af8:	98 81       	ld	r25, Y
    2afa:	cb 55       	subi	r28, 0x5B	; 91
    2afc:	d0 40       	sbci	r29, 0x00	; 0
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	28 2b       	or	r18, r24
    2b06:	39 2b       	or	r19, r25
    2b08:	4a 2b       	or	r20, r26
    2b0a:	5b 2b       	or	r21, r27
    2b0c:	2a a3       	std	Y+34, r18	; 0x22
    2b0e:	3b a3       	std	Y+35, r19	; 0x23
    2b10:	4c a3       	std	Y+36, r20	; 0x24
    2b12:	5d a3       	std	Y+37, r21	; 0x25
    2b14:	13 e0       	ldi	r17, 0x03	; 3
    2b16:	ac ce       	rjmp	.-680    	; 0x2870 <chk_mounted+0x30e>

00002b18 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2b18:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	a9 f0       	breq	.+42     	; 0x2b48 <validate+0x30>
    2b1e:	80 81       	ld	r24, Z
    2b20:	88 23       	and	r24, r24
    2b22:	91 f0       	breq	.+36     	; 0x2b48 <validate+0x30>
    2b24:	86 81       	ldd	r24, Z+6	; 0x06
    2b26:	97 81       	ldd	r25, Z+7	; 0x07
    2b28:	86 17       	cp	r24, r22
    2b2a:	97 07       	cpc	r25, r23
    2b2c:	69 f4       	brne	.+26     	; 0x2b48 <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2b2e:	81 81       	ldd	r24, Z+1	; 0x01
    2b30:	88 23       	and	r24, r24
    2b32:	11 f0       	breq	.+4      	; 0x2b38 <validate+0x20>
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <validate+0x24>
	return Stat;
    2b38:	80 91 5d 2b 	lds	r24, 0x2B5D
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2b3c:	80 fd       	sbrc	r24, 0
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <validate+0x2c>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	08 95       	ret
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	08 95       	ret
    2b48:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2b4a:	08 95       	ret

00002b4c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2b4c:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2b4e:	88 23       	and	r24, r24
    2b50:	11 f0       	breq	.+4      	; 0x2b56 <f_mount+0xa>
    2b52:	8b e0       	ldi	r24, 0x0B	; 11
    2b54:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2b56:	e0 91 e7 2b 	lds	r30, 0x2BE7
    2b5a:	f0 91 e8 2b 	lds	r31, 0x2BE8

	if (rfs) {
    2b5e:	30 97       	sbiw	r30, 0x00	; 0
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <f_mount+0x18>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2b62:	10 82       	st	Z, r1
	}

	if (fs) {
    2b64:	10 97       	sbiw	r26, 0x00	; 0
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
    2b68:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2b6a:	a0 93 e7 2b 	sts	0x2BE7, r26
    2b6e:	b0 93 e8 2b 	sts	0x2BE8, r27
    2b72:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2b74:	08 95       	ret

00002b76 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2b76:	5f 92       	push	r5
    2b78:	6f 92       	push	r6
    2b7a:	7f 92       	push	r7
    2b7c:	8f 92       	push	r8
    2b7e:	9f 92       	push	r9
    2b80:	af 92       	push	r10
    2b82:	bf 92       	push	r11
    2b84:	cf 92       	push	r12
    2b86:	df 92       	push	r13
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	a4 97       	sbiw	r28, 0x24	; 36
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	3c 01       	movw	r6, r24
    2ba0:	6b a3       	std	Y+35, r22	; 0x23
    2ba2:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	1d 92       	st	X+, r1
    2ba8:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2baa:	3f e1       	ldi	r19, 0x1F	; 31
    2bac:	53 2e       	mov	r5, r19
    2bae:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	03 5f       	subi	r16, 0xF3	; 243
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	4e 71       	andi	r20, 0x1E	; 30
    2bb8:	ce 01       	movw	r24, r28
    2bba:	83 96       	adiw	r24, 0x23	; 35
    2bbc:	b8 01       	movw	r22, r16
    2bbe:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2bc2:	88 23       	and	r24, r24
    2bc4:	11 f0       	breq	.+4      	; 0x2bca <f_open+0x54>
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	32 c1       	rjmp	.+612    	; 0x2e2e <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2bca:	ce 01       	movw	r24, r28
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	89 a3       	std	Y+33, r24	; 0x21
    2bd0:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
    2bdc:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2bde:	45 2d       	mov	r20, r5
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	ca 01       	movw	r24, r20
    2be4:	8c 71       	andi	r24, 0x1C	; 28
    2be6:	90 70       	andi	r25, 0x00	; 0
    2be8:	89 2b       	or	r24, r25
    2bea:	09 f4       	brne	.+2      	; 0x2bee <f_open+0x78>
    2bec:	84 c0       	rjmp	.+264    	; 0x2cf6 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2bee:	22 23       	and	r18, r18
    2bf0:	79 f0       	breq	.+30     	; 0x2c10 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2bf2:	24 30       	cpi	r18, 0x04	; 4
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <f_open+0x82>
    2bf6:	1b c1       	rjmp	.+566    	; 0x2e2e <f_open+0x2b8>
				res = dir_register(&dj);
    2bf8:	c8 01       	movw	r24, r16
    2bfa:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <dir_register>
    2bfe:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2c00:	88 23       	and	r24, r24
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <f_open+0x90>
    2c04:	14 c1       	rjmp	.+552    	; 0x2e2e <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2c06:	b8 e0       	ldi	r27, 0x08	; 8
    2c08:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2c0a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c0c:	18 a1       	ldd	r17, Y+32	; 0x20
    2c0e:	5b c0       	rjmp	.+182    	; 0x2cc6 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2c10:	52 fe       	sbrs	r5, 2
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <f_open+0xa2>
    2c14:	28 e0       	ldi	r18, 0x08	; 8
    2c16:	0b c1       	rjmp	.+534    	; 0x2e2e <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2c18:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c1a:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2c1c:	01 15       	cp	r16, r1
    2c1e:	11 05       	cpc	r17, r1
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <f_open+0xae>
    2c22:	02 c1       	rjmp	.+516    	; 0x2e28 <f_open+0x2b2>
    2c24:	f8 01       	movw	r30, r16
    2c26:	83 85       	ldd	r24, Z+11	; 0x0b
    2c28:	81 71       	andi	r24, 0x11	; 17
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <f_open+0xb8>
    2c2c:	fd c0       	rjmp	.+506    	; 0x2e28 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2c2e:	53 fe       	sbrs	r5, 3
    2c30:	4a c0       	rjmp	.+148    	; 0x2cc6 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2c32:	95 89       	ldd	r25, Z+21	; 0x15
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	24 89       	ldd	r18, Z+20	; 0x14
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	82 2b       	or	r24, r18
    2c3c:	93 2b       	or	r25, r19
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	7c 01       	movw	r14, r24
    2c44:	dd 24       	eor	r13, r13
    2c46:	cc 24       	eor	r12, r12
    2c48:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	82 2b       	or	r24, r18
    2c52:	93 2b       	or	r25, r19
    2c54:	a0 e0       	ldi	r26, 0x00	; 0
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	c8 2a       	or	r12, r24
    2c5a:	d9 2a       	or	r13, r25
    2c5c:	ea 2a       	or	r14, r26
    2c5e:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2c60:	14 8a       	std	Z+20, r1	; 0x14
    2c62:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2c64:	12 8e       	std	Z+26, r1	; 0x1a
    2c66:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2c68:	14 8e       	std	Z+28, r1	; 0x1c
    2c6a:	15 8e       	std	Z+29, r1	; 0x1d
    2c6c:	16 8e       	std	Z+30, r1	; 0x1e
    2c6e:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2c70:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c72:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2c78:	82 a4       	ldd	r8, Z+42	; 0x2a
    2c7a:	93 a4       	ldd	r9, Z+43	; 0x2b
    2c7c:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2c7e:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2c80:	c1 14       	cp	r12, r1
    2c82:	d1 04       	cpc	r13, r1
    2c84:	e1 04       	cpc	r14, r1
    2c86:	f1 04       	cpc	r15, r1
    2c88:	a1 f0       	breq	.+40     	; 0x2cb2 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2c8a:	cf 01       	movw	r24, r30
    2c8c:	b7 01       	movw	r22, r14
    2c8e:	a6 01       	movw	r20, r12
    2c90:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <remove_chain>
    2c94:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2c96:	88 23       	and	r24, r24
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <f_open+0x126>
    2c9a:	c9 c0       	rjmp	.+402    	; 0x2e2e <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2c9c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c9e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ca0:	08 94       	sec
    2ca2:	c1 08       	sbc	r12, r1
    2ca4:	d1 08       	sbc	r13, r1
    2ca6:	e1 08       	sbc	r14, r1
    2ca8:	f1 08       	sbc	r15, r1
    2caa:	c2 86       	std	Z+10, r12	; 0x0a
    2cac:	d3 86       	std	Z+11, r13	; 0x0b
    2cae:	e4 86       	std	Z+12, r14	; 0x0c
    2cb0:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb6:	b5 01       	movw	r22, r10
    2cb8:	a4 01       	movw	r20, r8
    2cba:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    2cbe:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2cc0:	88 23       	and	r24, r24
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <f_open+0x150>
    2cc4:	b4 c0       	rjmp	.+360    	; 0x2e2e <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2cc6:	53 fe       	sbrs	r5, 3
    2cc8:	27 c0       	rjmp	.+78     	; 0x2d18 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2cca:	d8 01       	movw	r26, r16
    2ccc:	1b 96       	adiw	r26, 0x0b	; 11
    2cce:	1c 92       	st	X, r1
    2cd0:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2cd2:	1e 96       	adiw	r26, 0x0e	; 14
    2cd4:	1c 92       	st	X, r1
    2cd6:	1e 97       	sbiw	r26, 0x0e	; 14
    2cd8:	1f 96       	adiw	r26, 0x0f	; 15
    2cda:	1c 92       	st	X, r1
    2cdc:	1f 97       	sbiw	r26, 0x0f	; 15
    2cde:	50 96       	adiw	r26, 0x10	; 16
    2ce0:	1c 92       	st	X, r1
    2ce2:	50 97       	sbiw	r26, 0x10	; 16
    2ce4:	51 96       	adiw	r26, 0x11	; 17
    2ce6:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2ce8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cea:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2cf0:	b0 e2       	ldi	r27, 0x20	; 32
    2cf2:	5b 2a       	or	r5, r27
    2cf4:	11 c0       	rjmp	.+34     	; 0x2d18 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2cf6:	22 23       	and	r18, r18
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <f_open+0x186>
    2cfa:	99 c0       	rjmp	.+306    	; 0x2e2e <f_open+0x2b8>
		dir = dj.dir;
    2cfc:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2cfe:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2d00:	01 15       	cp	r16, r1
    2d02:	11 05       	cpc	r17, r1
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <f_open+0x192>
    2d06:	92 c0       	rjmp	.+292    	; 0x2e2c <f_open+0x2b6>
    2d08:	f8 01       	movw	r30, r16
    2d0a:	83 85       	ldd	r24, Z+11	; 0x0b
    2d0c:	84 fd       	sbrc	r24, 4
    2d0e:	8e c0       	rjmp	.+284    	; 0x2e2c <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2d10:	51 fe       	sbrs	r5, 1
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <f_open+0x1a2>
    2d14:	80 fd       	sbrc	r24, 0
    2d16:	88 c0       	rjmp	.+272    	; 0x2e28 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2d18:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d1a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d1c:	22 a5       	ldd	r18, Z+42	; 0x2a
    2d1e:	33 a5       	ldd	r19, Z+43	; 0x2b
    2d20:	44 a5       	ldd	r20, Z+44	; 0x2c
    2d22:	55 a5       	ldd	r21, Z+45	; 0x2d
    2d24:	d3 01       	movw	r26, r6
    2d26:	5a 96       	adiw	r26, 0x1a	; 26
    2d28:	2d 93       	st	X+, r18
    2d2a:	3d 93       	st	X+, r19
    2d2c:	4d 93       	st	X+, r20
    2d2e:	5c 93       	st	X, r21
    2d30:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2d32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d34:	98 a1       	ldd	r25, Y+32	; 0x20
    2d36:	5e 96       	adiw	r26, 0x1e	; 30
    2d38:	8d 93       	st	X+, r24
    2d3a:	9c 93       	st	X, r25
    2d3c:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2d3e:	14 96       	adiw	r26, 0x04	; 4
    2d40:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2d42:	d8 01       	movw	r26, r16
    2d44:	55 96       	adiw	r26, 0x15	; 21
    2d46:	3c 91       	ld	r19, X
    2d48:	55 97       	sbiw	r26, 0x15	; 21
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	54 96       	adiw	r26, 0x14	; 20
    2d4e:	8c 91       	ld	r24, X
    2d50:	54 97       	sbiw	r26, 0x14	; 20
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	28 2b       	or	r18, r24
    2d56:	39 2b       	or	r19, r25
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	a9 01       	movw	r20, r18
    2d5e:	33 27       	eor	r19, r19
    2d60:	22 27       	eor	r18, r18
    2d62:	5b 96       	adiw	r26, 0x1b	; 27
    2d64:	9c 91       	ld	r25, X
    2d66:	5b 97       	sbiw	r26, 0x1b	; 27
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	5a 96       	adiw	r26, 0x1a	; 26
    2d6c:	6c 91       	ld	r22, X
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	86 2b       	or	r24, r22
    2d72:	97 2b       	or	r25, r23
    2d74:	a0 e0       	ldi	r26, 0x00	; 0
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	28 2b       	or	r18, r24
    2d7a:	39 2b       	or	r19, r25
    2d7c:	4a 2b       	or	r20, r26
    2d7e:	5b 2b       	or	r21, r27
    2d80:	d3 01       	movw	r26, r6
    2d82:	1e 96       	adiw	r26, 0x0e	; 14
    2d84:	2d 93       	st	X+, r18
    2d86:	3d 93       	st	X+, r19
    2d88:	4d 93       	st	X+, r20
    2d8a:	5c 93       	st	X, r21
    2d8c:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2d8e:	d8 01       	movw	r26, r16
    2d90:	5f 96       	adiw	r26, 0x1f	; 31
    2d92:	2c 91       	ld	r18, X
    2d94:	5f 97       	sbiw	r26, 0x1f	; 31
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	52 2f       	mov	r21, r18
    2d9e:	44 27       	eor	r20, r20
    2da0:	33 27       	eor	r19, r19
    2da2:	22 27       	eor	r18, r18
    2da4:	5e 96       	adiw	r26, 0x1e	; 30
    2da6:	8c 91       	ld	r24, X
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e0       	ldi	r26, 0x00	; 0
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	dc 01       	movw	r26, r24
    2db0:	99 27       	eor	r25, r25
    2db2:	88 27       	eor	r24, r24
    2db4:	28 2b       	or	r18, r24
    2db6:	39 2b       	or	r19, r25
    2db8:	4a 2b       	or	r20, r26
    2dba:	5b 2b       	or	r21, r27
    2dbc:	d8 01       	movw	r26, r16
    2dbe:	5c 96       	adiw	r26, 0x1c	; 28
    2dc0:	8c 91       	ld	r24, X
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	a0 e0       	ldi	r26, 0x00	; 0
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	28 2b       	or	r18, r24
    2dca:	39 2b       	or	r19, r25
    2dcc:	4a 2b       	or	r20, r26
    2dce:	5b 2b       	or	r21, r27
    2dd0:	d8 01       	movw	r26, r16
    2dd2:	5d 96       	adiw	r26, 0x1d	; 29
    2dd4:	9c 91       	ld	r25, X
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	a0 e0       	ldi	r26, 0x00	; 0
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	28 2b       	or	r18, r24
    2dde:	39 2b       	or	r19, r25
    2de0:	4a 2b       	or	r20, r26
    2de2:	5b 2b       	or	r21, r27
    2de4:	d3 01       	movw	r26, r6
    2de6:	1a 96       	adiw	r26, 0x0a	; 10
    2de8:	2d 93       	st	X+, r18
    2dea:	3d 93       	st	X+, r19
    2dec:	4d 93       	st	X+, r20
    2dee:	5c 93       	st	X, r21
    2df0:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2df2:	16 96       	adiw	r26, 0x06	; 6
    2df4:	1d 92       	st	X+, r1
    2df6:	1d 92       	st	X+, r1
    2df8:	1d 92       	st	X+, r1
    2dfa:	1c 92       	st	X, r1
    2dfc:	19 97       	sbiw	r26, 0x09	; 9
    2dfe:	8f ef       	ldi	r24, 0xFF	; 255
    2e00:	15 96       	adiw	r26, 0x05	; 5
    2e02:	8c 93       	st	X, r24
    2e04:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2e06:	56 96       	adiw	r26, 0x16	; 22
    2e08:	1d 92       	st	X+, r1
    2e0a:	1d 92       	st	X+, r1
    2e0c:	1d 92       	st	X+, r1
    2e0e:	1c 92       	st	X, r1
    2e10:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2e12:	ed 93       	st	X+, r30
    2e14:	fc 93       	st	X, r31
    2e16:	11 97       	sbiw	r26, 0x01	; 1
    2e18:	86 81       	ldd	r24, Z+6	; 0x06
    2e1a:	97 81       	ldd	r25, Z+7	; 0x07
    2e1c:	12 96       	adiw	r26, 0x02	; 2
    2e1e:	8d 93       	st	X+, r24
    2e20:	9c 93       	st	X, r25
    2e22:	13 97       	sbiw	r26, 0x03	; 3
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	03 c0       	rjmp	.+6      	; 0x2e2e <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    2e28:	27 e0       	ldi	r18, 0x07	; 7
    2e2a:	01 c0       	rjmp	.+2      	; 0x2e2e <f_open+0x2b8>
    2e2c:	24 e0       	ldi	r18, 0x04	; 4
}
    2e2e:	82 2f       	mov	r24, r18
    2e30:	a4 96       	adiw	r28, 0x24	; 36
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	ff 90       	pop	r15
    2e40:	ef 90       	pop	r14
    2e42:	df 90       	pop	r13
    2e44:	cf 90       	pop	r12
    2e46:	bf 90       	pop	r11
    2e48:	af 90       	pop	r10
    2e4a:	9f 90       	pop	r9
    2e4c:	8f 90       	pop	r8
    2e4e:	7f 90       	pop	r7
    2e50:	6f 90       	pop	r6
    2e52:	5f 90       	pop	r5
    2e54:	08 95       	ret

00002e56 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2e56:	2f 92       	push	r2
    2e58:	3f 92       	push	r3
    2e5a:	4f 92       	push	r4
    2e5c:	5f 92       	push	r5
    2e5e:	6f 92       	push	r6
    2e60:	7f 92       	push	r7
    2e62:	8f 92       	push	r8
    2e64:	9f 92       	push	r9
    2e66:	af 92       	push	r10
    2e68:	bf 92       	push	r11
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <f_read+0x26>
    2e7c:	0f 92       	push	r0
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	8b 83       	std	Y+3, r24	; 0x03
    2e84:	9c 83       	std	Y+4, r25	; 0x04
    2e86:	16 2f       	mov	r17, r22
    2e88:	07 2f       	mov	r16, r23
    2e8a:	4a 01       	movw	r8, r20
    2e8c:	29 83       	std	Y+1, r18	; 0x01
    2e8e:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    2e90:	d9 01       	movw	r26, r18
    2e92:	1d 92       	st	X+, r1
    2e94:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    2e96:	fc 01       	movw	r30, r24
    2e98:	62 81       	ldd	r22, Z+2	; 0x02
    2e9a:	73 81       	ldd	r23, Z+3	; 0x03
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <validate>
    2ea4:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2ea6:	88 23       	and	r24, r24
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <f_read+0x56>
    2eaa:	b3 c1       	rjmp	.+870    	; 0x3212 <f_read+0x3bc>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    2eac:	ab 81       	ldd	r26, Y+3	; 0x03
    2eae:	bc 81       	ldd	r27, Y+4	; 0x04
    2eb0:	14 96       	adiw	r26, 0x04	; 4
    2eb2:	8c 91       	ld	r24, X
    2eb4:	87 fd       	sbrc	r24, 7
    2eb6:	66 c0       	rjmp	.+204    	; 0x2f84 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    2eb8:	80 fd       	sbrc	r24, 0
    2eba:	03 c0       	rjmp	.+6      	; 0x2ec2 <f_read+0x6c>
    2ebc:	a7 e0       	ldi	r26, 0x07	; 7
    2ebe:	7a 2e       	mov	r7, r26
    2ec0:	a8 c1       	rjmp	.+848    	; 0x3212 <f_read+0x3bc>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec6:	22 85       	ldd	r18, Z+10	; 0x0a
    2ec8:	33 85       	ldd	r19, Z+11	; 0x0b
    2eca:	44 85       	ldd	r20, Z+12	; 0x0c
    2ecc:	55 85       	ldd	r21, Z+13	; 0x0d
    2ece:	86 81       	ldd	r24, Z+6	; 0x06
    2ed0:	97 81       	ldd	r25, Z+7	; 0x07
    2ed2:	a0 85       	ldd	r26, Z+8	; 0x08
    2ed4:	b1 85       	ldd	r27, Z+9	; 0x09
    2ed6:	28 1b       	sub	r18, r24
    2ed8:	39 0b       	sbc	r19, r25
    2eda:	4a 0b       	sbc	r20, r26
    2edc:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    2ede:	c4 01       	movw	r24, r8
    2ee0:	a0 e0       	ldi	r26, 0x00	; 0
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	28 17       	cp	r18, r24
    2ee6:	39 07       	cpc	r19, r25
    2ee8:	4a 07       	cpc	r20, r26
    2eea:	5b 07       	cpc	r21, r27
    2eec:	08 f4       	brcc	.+2      	; 0x2ef0 <f_read+0x9a>
    2eee:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    2ef0:	81 2f       	mov	r24, r17
    2ef2:	90 2f       	mov	r25, r16
    2ef4:	9c 01       	movw	r18, r24
    2ef6:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    2ef8:	f0 e2       	ldi	r31, 0x20	; 32
    2efa:	2f 2e       	mov	r2, r31
    2efc:	31 2c       	mov	r3, r1
    2efe:	6b 81       	ldd	r22, Y+3	; 0x03
    2f00:	7c 81       	ldd	r23, Y+4	; 0x04
    2f02:	26 0e       	add	r2, r22
    2f04:	37 1e       	adc	r3, r23
    2f06:	81 c1       	rjmp	.+770    	; 0x320a <f_read+0x3b4>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2f08:	ab 81       	ldd	r26, Y+3	; 0x03
    2f0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2f0c:	16 96       	adiw	r26, 0x06	; 6
    2f0e:	2d 91       	ld	r18, X+
    2f10:	3d 91       	ld	r19, X+
    2f12:	4d 91       	ld	r20, X+
    2f14:	5c 91       	ld	r21, X
    2f16:	19 97       	sbiw	r26, 0x09	; 9
    2f18:	da 01       	movw	r26, r20
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	91 70       	andi	r25, 0x01	; 1
    2f1e:	a0 70       	andi	r26, 0x00	; 0
    2f20:	b0 70       	andi	r27, 0x00	; 0
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	a1 05       	cpc	r26, r1
    2f26:	b1 05       	cpc	r27, r1
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <f_read+0xd6>
    2f2a:	2b c1       	rjmp	.+598    	; 0x3182 <f_read+0x32c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    2f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f30:	ed 91       	ld	r30, X+
    2f32:	fc 91       	ld	r31, X
    2f34:	11 97       	sbiw	r26, 0x01	; 1
    2f36:	15 96       	adiw	r26, 0x05	; 5
    2f38:	9c 91       	ld	r25, X
    2f3a:	15 97       	sbiw	r26, 0x05	; 5
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	98 17       	cp	r25, r24
    2f40:	a0 f1       	brcs	.+104    	; 0x2faa <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    2f42:	21 15       	cp	r18, r1
    2f44:	31 05       	cpc	r19, r1
    2f46:	41 05       	cpc	r20, r1
    2f48:	51 05       	cpc	r21, r1
    2f4a:	39 f4       	brne	.+14     	; 0x2f5a <f_read+0x104>
    2f4c:	1e 96       	adiw	r26, 0x0e	; 14
    2f4e:	6d 91       	ld	r22, X+
    2f50:	7d 91       	ld	r23, X+
    2f52:	8d 91       	ld	r24, X+
    2f54:	9c 91       	ld	r25, X
    2f56:	51 97       	sbiw	r26, 0x11	; 17
    2f58:	0b c0       	rjmp	.+22     	; 0x2f70 <f_read+0x11a>
    2f5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2f5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2f5e:	52 96       	adiw	r26, 0x12	; 18
    2f60:	4d 91       	ld	r20, X+
    2f62:	5d 91       	ld	r21, X+
    2f64:	6d 91       	ld	r22, X+
    2f66:	7c 91       	ld	r23, X
    2f68:	55 97       	sbiw	r26, 0x15	; 21
    2f6a:	cf 01       	movw	r24, r30
    2f6c:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    2f70:	62 30       	cpi	r22, 0x02	; 2
    2f72:	71 05       	cpc	r23, r1
    2f74:	81 05       	cpc	r24, r1
    2f76:	91 05       	cpc	r25, r1
    2f78:	40 f4       	brcc	.+16     	; 0x2f8a <f_read+0x134>
    2f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7e:	84 81       	ldd	r24, Z+4	; 0x04
    2f80:	80 68       	ori	r24, 0x80	; 128
    2f82:	84 83       	std	Z+4, r24	; 0x04
    2f84:	e2 e0       	ldi	r30, 0x02	; 2
    2f86:	7e 2e       	mov	r7, r30
    2f88:	44 c1       	rjmp	.+648    	; 0x3212 <f_read+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2f8a:	6f 3f       	cpi	r22, 0xFF	; 255
    2f8c:	ff ef       	ldi	r31, 0xFF	; 255
    2f8e:	7f 07       	cpc	r23, r31
    2f90:	ff ef       	ldi	r31, 0xFF	; 255
    2f92:	8f 07       	cpc	r24, r31
    2f94:	ff ef       	ldi	r31, 0xFF	; 255
    2f96:	9f 07       	cpc	r25, r31
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <f_read+0x146>
    2f9a:	df c0       	rjmp	.+446    	; 0x315a <f_read+0x304>
				fp->curr_clust = clst;				/* Update current cluster */
    2f9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa0:	62 8b       	std	Z+18, r22	; 0x12
    2fa2:	73 8b       	std	Z+19, r23	; 0x13
    2fa4:	84 8b       	std	Z+20, r24	; 0x14
    2fa6:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    2fa8:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2faa:	ab 81       	ldd	r26, Y+3	; 0x03
    2fac:	bc 81       	ldd	r27, Y+4	; 0x04
    2fae:	0d 91       	ld	r16, X+
    2fb0:	1c 91       	ld	r17, X
    2fb2:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2fb4:	52 96       	adiw	r26, 0x12	; 18
    2fb6:	2d 91       	ld	r18, X+
    2fb8:	3d 91       	ld	r19, X+
    2fba:	4d 91       	ld	r20, X+
    2fbc:	5c 91       	ld	r21, X
    2fbe:	55 97       	sbiw	r26, 0x15	; 21
    2fc0:	22 50       	subi	r18, 0x02	; 2
    2fc2:	30 40       	sbci	r19, 0x00	; 0
    2fc4:	40 40       	sbci	r20, 0x00	; 0
    2fc6:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2fc8:	f8 01       	movw	r30, r16
    2fca:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fcc:	93 8d       	ldd	r25, Z+27	; 0x1b
    2fce:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2fd0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2fd2:	02 97       	sbiw	r24, 0x02	; 2
    2fd4:	a1 09       	sbc	r26, r1
    2fd6:	b1 09       	sbc	r27, r1
    2fd8:	28 17       	cp	r18, r24
    2fda:	39 07       	cpc	r19, r25
    2fdc:	4a 07       	cpc	r20, r26
    2fde:	5b 07       	cpc	r21, r27
    2fe0:	b8 f4       	brcc	.+46     	; 0x3010 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    2fe2:	62 80       	ldd	r6, Z+2	; 0x02
    2fe4:	66 2d       	mov	r22, r6
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    2ff0:	9b 01       	movw	r18, r22
    2ff2:	ac 01       	movw	r20, r24
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	86 a1       	ldd	r24, Z+38	; 0x26
    2ff8:	97 a1       	ldd	r25, Z+39	; 0x27
    2ffa:	a0 a5       	ldd	r26, Z+40	; 0x28
    2ffc:	b1 a5       	ldd	r27, Z+41	; 0x29
    2ffe:	28 0f       	add	r18, r24
    3000:	39 1f       	adc	r19, r25
    3002:	4a 1f       	adc	r20, r26
    3004:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3006:	21 15       	cp	r18, r1
    3008:	31 05       	cpc	r19, r1
    300a:	41 05       	cpc	r20, r1
    300c:	51 05       	cpc	r21, r1
    300e:	49 f4       	brne	.+18     	; 0x3022 <f_read+0x1cc>
    3010:	ab 81       	ldd	r26, Y+3	; 0x03
    3012:	bc 81       	ldd	r27, Y+4	; 0x04
    3014:	14 96       	adiw	r26, 0x04	; 4
    3016:	8c 91       	ld	r24, X
    3018:	14 97       	sbiw	r26, 0x04	; 4
    301a:	80 68       	ori	r24, 0x80	; 128
    301c:	14 96       	adiw	r26, 0x04	; 4
    301e:	8c 93       	st	X, r24
    3020:	b1 cf       	rjmp	.-158    	; 0x2f84 <f_read+0x12e>
			sect += fp->csect;
    3022:	eb 81       	ldd	r30, Y+3	; 0x03
    3024:	fc 81       	ldd	r31, Y+4	; 0x04
    3026:	85 81       	ldd	r24, Z+5	; 0x05
    3028:	59 01       	movw	r10, r18
    302a:	6a 01       	movw	r12, r20
    302c:	a8 0e       	add	r10, r24
    302e:	b1 1c       	adc	r11, r1
    3030:	c1 1c       	adc	r12, r1
    3032:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3034:	74 01       	movw	r14, r8
    3036:	ef 2c       	mov	r14, r15
    3038:	ff 24       	eor	r15, r15
    303a:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    303c:	e1 14       	cp	r14, r1
    303e:	f1 04       	cpc	r15, r1
    3040:	09 f4       	brne	.+2      	; 0x3044 <f_read+0x1ee>
    3042:	52 c0       	rjmp	.+164    	; 0x30e8 <f_read+0x292>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	c7 01       	movw	r24, r14
    304a:	82 0f       	add	r24, r18
    304c:	93 1f       	adc	r25, r19
    304e:	66 2d       	mov	r22, r6
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	68 17       	cp	r22, r24
    3054:	79 07       	cpc	r23, r25
    3056:	18 f4       	brcc	.+6      	; 0x305e <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3058:	7b 01       	movw	r14, r22
    305a:	e2 1a       	sub	r14, r18
    305c:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    305e:	d8 01       	movw	r26, r16
    3060:	11 96       	adiw	r26, 0x01	; 1
    3062:	8c 91       	ld	r24, X
    3064:	b2 01       	movw	r22, r4
    3066:	a6 01       	movw	r20, r12
    3068:	95 01       	movw	r18, r10
    306a:	0e 2d       	mov	r16, r14
    306c:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    3070:	eb 81       	ldd	r30, Y+3	; 0x03
    3072:	fc 81       	ldd	r31, Y+4	; 0x04
    3074:	94 81       	ldd	r25, Z+4	; 0x04
    3076:	88 23       	and	r24, r24
    3078:	19 f0       	breq	.+6      	; 0x3080 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    307a:	90 68       	ori	r25, 0x80	; 128
    307c:	94 83       	std	Z+4, r25	; 0x04
    307e:	75 c0       	rjmp	.+234    	; 0x316a <f_read+0x314>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3080:	96 ff       	sbrs	r25, 6
    3082:	28 c0       	rjmp	.+80     	; 0x30d4 <f_read+0x27e>
    3084:	ab 81       	ldd	r26, Y+3	; 0x03
    3086:	bc 81       	ldd	r27, Y+4	; 0x04
    3088:	56 96       	adiw	r26, 0x16	; 22
    308a:	2d 91       	ld	r18, X+
    308c:	3d 91       	ld	r19, X+
    308e:	4d 91       	ld	r20, X+
    3090:	5c 91       	ld	r21, X
    3092:	59 97       	sbiw	r26, 0x19	; 25
    3094:	2a 19       	sub	r18, r10
    3096:	3b 09       	sbc	r19, r11
    3098:	4c 09       	sbc	r20, r12
    309a:	5d 09       	sbc	r21, r13
    309c:	c7 01       	movw	r24, r14
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	28 17       	cp	r18, r24
    30a4:	39 07       	cpc	r19, r25
    30a6:	4a 07       	cpc	r20, r26
    30a8:	5b 07       	cpc	r21, r27
    30aa:	a0 f4       	brcc	.+40     	; 0x30d4 <f_read+0x27e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    30ac:	69 e0       	ldi	r22, 0x09	; 9
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	44 1f       	adc	r20, r20
    30b4:	55 1f       	adc	r21, r21
    30b6:	6a 95       	dec	r22
    30b8:	d1 f7       	brne	.-12     	; 0x30ae <f_read+0x258>
    30ba:	f2 01       	movw	r30, r4
    30bc:	e2 0f       	add	r30, r18
    30be:	f3 1f       	adc	r31, r19
    30c0:	d1 01       	movw	r26, r2
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    30c2:	9f 01       	movw	r18, r30
    30c4:	20 50       	subi	r18, 0x00	; 0
    30c6:	3e 4f       	sbci	r19, 0xFE	; 254
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <f_read+0x278>
    30ca:	8d 91       	ld	r24, X+
    30cc:	81 93       	st	Z+, r24
    30ce:	e2 17       	cp	r30, r18
    30d0:	f3 07       	cpc	r31, r19
    30d2:	d9 f7       	brne	.-10     	; 0x30ca <f_read+0x274>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    30d4:	eb 81       	ldd	r30, Y+3	; 0x03
    30d6:	fc 81       	ldd	r31, Y+4	; 0x04
    30d8:	85 81       	ldd	r24, Z+5	; 0x05
    30da:	8e 0d       	add	r24, r14
    30dc:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    30de:	b7 01       	movw	r22, r14
    30e0:	76 2f       	mov	r23, r22
    30e2:	66 27       	eor	r22, r22
    30e4:	77 0f       	add	r23, r23
    30e6:	74 c0       	rjmp	.+232    	; 0x31d0 <f_read+0x37a>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    30e8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ea:	bc 81       	ldd	r27, Y+4	; 0x04
    30ec:	14 96       	adiw	r26, 0x04	; 4
    30ee:	8c 91       	ld	r24, X
    30f0:	14 97       	sbiw	r26, 0x04	; 4
    30f2:	86 ff       	sbrs	r24, 6
    30f4:	1b c0       	rjmp	.+54     	; 0x312c <f_read+0x2d6>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    30f6:	56 96       	adiw	r26, 0x16	; 22
    30f8:	2d 91       	ld	r18, X+
    30fa:	3d 91       	ld	r19, X+
    30fc:	4d 91       	ld	r20, X+
    30fe:	5c 91       	ld	r21, X
    3100:	59 97       	sbiw	r26, 0x19	; 25
    3102:	f8 01       	movw	r30, r16
    3104:	81 81       	ldd	r24, Z+1	; 0x01
    3106:	b1 01       	movw	r22, r2
    3108:	01 e0       	ldi	r16, 0x01	; 1
    310a:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
    310e:	ab 81       	ldd	r26, Y+3	; 0x03
    3110:	bc 81       	ldd	r27, Y+4	; 0x04
    3112:	14 96       	adiw	r26, 0x04	; 4
    3114:	9c 91       	ld	r25, X
    3116:	14 97       	sbiw	r26, 0x04	; 4
    3118:	88 23       	and	r24, r24
    311a:	21 f0       	breq	.+8      	; 0x3124 <f_read+0x2ce>
					ABORT(fp->fs, FR_DISK_ERR);
    311c:	90 68       	ori	r25, 0x80	; 128
    311e:	14 96       	adiw	r26, 0x04	; 4
    3120:	9c 93       	st	X, r25
    3122:	23 c0       	rjmp	.+70     	; 0x316a <f_read+0x314>
				fp->flag &= ~FA__DIRTY;
    3124:	9f 7b       	andi	r25, 0xBF	; 191
    3126:	eb 81       	ldd	r30, Y+3	; 0x03
    3128:	fc 81       	ldd	r31, Y+4	; 0x04
    312a:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    312c:	eb 81       	ldd	r30, Y+3	; 0x03
    312e:	fc 81       	ldd	r31, Y+4	; 0x04
    3130:	86 89       	ldd	r24, Z+22	; 0x16
    3132:	97 89       	ldd	r25, Z+23	; 0x17
    3134:	a0 8d       	ldd	r26, Z+24	; 0x18
    3136:	b1 8d       	ldd	r27, Z+25	; 0x19
    3138:	8a 15       	cp	r24, r10
    313a:	9b 05       	cpc	r25, r11
    313c:	ac 05       	cpc	r26, r12
    313e:	bd 05       	cpc	r27, r13
    3140:	b9 f0       	breq	.+46     	; 0x3170 <f_read+0x31a>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    3142:	01 90       	ld	r0, Z+
    3144:	f0 81       	ld	r31, Z
    3146:	e0 2d       	mov	r30, r0
    3148:	81 81       	ldd	r24, Z+1	; 0x01
    314a:	b1 01       	movw	r22, r2
    314c:	a6 01       	movw	r20, r12
    314e:	95 01       	movw	r18, r10
    3150:	01 e0       	ldi	r16, 0x01	; 1
    3152:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    3156:	88 23       	and	r24, r24
    3158:	59 f0       	breq	.+22     	; 0x3170 <f_read+0x31a>
					ABORT(fp->fs, FR_DISK_ERR);
    315a:	ab 81       	ldd	r26, Y+3	; 0x03
    315c:	bc 81       	ldd	r27, Y+4	; 0x04
    315e:	14 96       	adiw	r26, 0x04	; 4
    3160:	8c 91       	ld	r24, X
    3162:	14 97       	sbiw	r26, 0x04	; 4
    3164:	80 68       	ori	r24, 0x80	; 128
    3166:	14 96       	adiw	r26, 0x04	; 4
    3168:	8c 93       	st	X, r24
    316a:	77 24       	eor	r7, r7
    316c:	73 94       	inc	r7
    316e:	51 c0       	rjmp	.+162    	; 0x3212 <f_read+0x3bc>
			}
#endif
			fp->dsect = sect;
    3170:	eb 81       	ldd	r30, Y+3	; 0x03
    3172:	fc 81       	ldd	r31, Y+4	; 0x04
    3174:	a6 8a       	std	Z+22, r10	; 0x16
    3176:	b7 8a       	std	Z+23, r11	; 0x17
    3178:	c0 8e       	std	Z+24, r12	; 0x18
    317a:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    317c:	85 81       	ldd	r24, Z+5	; 0x05
    317e:	8f 5f       	subi	r24, 0xFF	; 255
    3180:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3182:	ab 81       	ldd	r26, Y+3	; 0x03
    3184:	bc 81       	ldd	r27, Y+4	; 0x04
    3186:	16 96       	adiw	r26, 0x06	; 6
    3188:	2d 91       	ld	r18, X+
    318a:	3d 91       	ld	r19, X+
    318c:	4d 91       	ld	r20, X+
    318e:	5c 91       	ld	r21, X
    3190:	19 97       	sbiw	r26, 0x09	; 9
    3192:	c9 01       	movw	r24, r18
    3194:	91 70       	andi	r25, 0x01	; 1
    3196:	e0 e0       	ldi	r30, 0x00	; 0
    3198:	f2 e0       	ldi	r31, 0x02	; 2
    319a:	e8 1b       	sub	r30, r24
    319c:	f9 0b       	sbc	r31, r25
    319e:	b4 01       	movw	r22, r8
    31a0:	e8 15       	cp	r30, r8
    31a2:	f9 05       	cpc	r31, r9
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <f_read+0x352>
    31a6:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    31a8:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    31aa:	f9 01       	movw	r30, r18
    31ac:	f1 70       	andi	r31, 0x01	; 1
    31ae:	b0 96       	adiw	r30, 0x20	; 32
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	e8 0f       	add	r30, r24
    31b6:	f9 1f       	adc	r31, r25
    31b8:	92 01       	movw	r18, r4
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <f_read+0x36e>
	while (cnt--) *d++ = *s++;
    31bc:	81 91       	ld	r24, Z+
    31be:	d9 01       	movw	r26, r18
    31c0:	8d 93       	st	X+, r24
    31c2:	9d 01       	movw	r18, r26
    31c4:	01 50       	subi	r16, 0x01	; 1
    31c6:	10 40       	sbci	r17, 0x00	; 0
    31c8:	bf ef       	ldi	r27, 0xFF	; 255
    31ca:	0f 3f       	cpi	r16, 0xFF	; 255
    31cc:	1b 07       	cpc	r17, r27
    31ce:	b1 f7       	brne	.-20     	; 0x31bc <f_read+0x366>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    31d0:	46 0e       	add	r4, r22
    31d2:	57 1e       	adc	r5, r23
    31d4:	cb 01       	movw	r24, r22
    31d6:	a0 e0       	ldi	r26, 0x00	; 0
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	eb 81       	ldd	r30, Y+3	; 0x03
    31dc:	fc 81       	ldd	r31, Y+4	; 0x04
    31de:	26 81       	ldd	r18, Z+6	; 0x06
    31e0:	37 81       	ldd	r19, Z+7	; 0x07
    31e2:	40 85       	ldd	r20, Z+8	; 0x08
    31e4:	51 85       	ldd	r21, Z+9	; 0x09
    31e6:	28 0f       	add	r18, r24
    31e8:	39 1f       	adc	r19, r25
    31ea:	4a 1f       	adc	r20, r26
    31ec:	5b 1f       	adc	r21, r27
    31ee:	26 83       	std	Z+6, r18	; 0x06
    31f0:	37 83       	std	Z+7, r19	; 0x07
    31f2:	40 87       	std	Z+8, r20	; 0x08
    31f4:	51 87       	std	Z+9, r21	; 0x09
    31f6:	e9 81       	ldd	r30, Y+1	; 0x01
    31f8:	fa 81       	ldd	r31, Y+2	; 0x02
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	86 0f       	add	r24, r22
    3200:	97 1f       	adc	r25, r23
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	86 1a       	sub	r8, r22
    3208:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    320a:	81 14       	cp	r8, r1
    320c:	91 04       	cpc	r9, r1
    320e:	09 f0       	breq	.+2      	; 0x3212 <f_read+0x3bc>
    3210:	7b ce       	rjmp	.-778    	; 0x2f08 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3212:	87 2d       	mov	r24, r7
    3214:	24 96       	adiw	r28, 0x04	; 4
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	df 90       	pop	r13
    3228:	cf 90       	pop	r12
    322a:	bf 90       	pop	r11
    322c:	af 90       	pop	r10
    322e:	9f 90       	pop	r9
    3230:	8f 90       	pop	r8
    3232:	7f 90       	pop	r7
    3234:	6f 90       	pop	r6
    3236:	5f 90       	pop	r5
    3238:	4f 90       	pop	r4
    323a:	3f 90       	pop	r3
    323c:	2f 90       	pop	r2
    323e:	08 95       	ret

00003240 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    3240:	2f 92       	push	r2
    3242:	3f 92       	push	r3
    3244:	4f 92       	push	r4
    3246:	5f 92       	push	r5
    3248:	6f 92       	push	r6
    324a:	7f 92       	push	r7
    324c:	8f 92       	push	r8
    324e:	9f 92       	push	r9
    3250:	af 92       	push	r10
    3252:	bf 92       	push	r11
    3254:	cf 92       	push	r12
    3256:	df 92       	push	r13
    3258:	ef 92       	push	r14
    325a:	ff 92       	push	r15
    325c:	0f 93       	push	r16
    325e:	1f 93       	push	r17
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	00 d0       	rcall	.+0      	; 0x3266 <f_write+0x26>
    3266:	0f 92       	push	r0
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	8b 83       	std	Y+3, r24	; 0x03
    326e:	9c 83       	std	Y+4, r25	; 0x04
    3270:	16 2f       	mov	r17, r22
    3272:	07 2f       	mov	r16, r23
    3274:	4a 01       	movw	r8, r20
    3276:	29 83       	std	Y+1, r18	; 0x01
    3278:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    327a:	d9 01       	movw	r26, r18
    327c:	1d 92       	st	X+, r1
    327e:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    3280:	fc 01       	movw	r30, r24
    3282:	62 81       	ldd	r22, Z+2	; 0x02
    3284:	73 81       	ldd	r23, Z+3	; 0x03
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <validate>
    328e:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3290:	88 23       	and	r24, r24
    3292:	09 f0       	breq	.+2      	; 0x3296 <f_write+0x56>
    3294:	03 c2       	rjmp	.+1030   	; 0x369c <f_write+0x45c>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3296:	ab 81       	ldd	r26, Y+3	; 0x03
    3298:	bc 81       	ldd	r27, Y+4	; 0x04
    329a:	14 96       	adiw	r26, 0x04	; 4
    329c:	8c 91       	ld	r24, X
    329e:	87 fd       	sbrc	r24, 7
    32a0:	7c c0       	rjmp	.+248    	; 0x339a <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    32a2:	81 fd       	sbrc	r24, 1
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <f_write+0x6c>
    32a6:	47 e0       	ldi	r20, 0x07	; 7
    32a8:	64 2e       	mov	r6, r20
    32aa:	f8 c1       	rjmp	.+1008   	; 0x369c <f_write+0x45c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    32ac:	eb 81       	ldd	r30, Y+3	; 0x03
    32ae:	fc 81       	ldd	r31, Y+4	; 0x04
    32b0:	22 85       	ldd	r18, Z+10	; 0x0a
    32b2:	33 85       	ldd	r19, Z+11	; 0x0b
    32b4:	44 85       	ldd	r20, Z+12	; 0x0c
    32b6:	55 85       	ldd	r21, Z+13	; 0x0d
    32b8:	c4 01       	movw	r24, r8
    32ba:	a0 e0       	ldi	r26, 0x00	; 0
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	82 0f       	add	r24, r18
    32c0:	93 1f       	adc	r25, r19
    32c2:	a4 1f       	adc	r26, r20
    32c4:	b5 1f       	adc	r27, r21
    32c6:	82 17       	cp	r24, r18
    32c8:	93 07       	cpc	r25, r19
    32ca:	a4 07       	cpc	r26, r20
    32cc:	b5 07       	cpc	r27, r21
    32ce:	10 f4       	brcc	.+4      	; 0x32d4 <f_write+0x94>
    32d0:	88 24       	eor	r8, r8
    32d2:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    32d4:	81 2f       	mov	r24, r17
    32d6:	90 2f       	mov	r25, r16
    32d8:	9c 01       	movw	r18, r24
    32da:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    32dc:	30 e2       	ldi	r19, 0x20	; 32
    32de:	23 2e       	mov	r2, r19
    32e0:	31 2c       	mov	r3, r1
    32e2:	6b 81       	ldd	r22, Y+3	; 0x03
    32e4:	7c 81       	ldd	r23, Y+4	; 0x04
    32e6:	26 0e       	add	r2, r22
    32e8:	37 1e       	adc	r3, r23
    32ea:	b3 c1       	rjmp	.+870    	; 0x3652 <f_write+0x412>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    32ec:	ab 81       	ldd	r26, Y+3	; 0x03
    32ee:	bc 81       	ldd	r27, Y+4	; 0x04
    32f0:	16 96       	adiw	r26, 0x06	; 6
    32f2:	2d 91       	ld	r18, X+
    32f4:	3d 91       	ld	r19, X+
    32f6:	4d 91       	ld	r20, X+
    32f8:	5c 91       	ld	r21, X
    32fa:	19 97       	sbiw	r26, 0x09	; 9
    32fc:	da 01       	movw	r26, r20
    32fe:	c9 01       	movw	r24, r18
    3300:	91 70       	andi	r25, 0x01	; 1
    3302:	a0 70       	andi	r26, 0x00	; 0
    3304:	b0 70       	andi	r27, 0x00	; 0
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	a1 05       	cpc	r26, r1
    330a:	b1 05       	cpc	r27, r1
    330c:	09 f0       	breq	.+2      	; 0x3310 <f_write+0xd0>
    330e:	59 c1       	rjmp	.+690    	; 0x35c2 <f_write+0x382>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3310:	ab 81       	ldd	r26, Y+3	; 0x03
    3312:	bc 81       	ldd	r27, Y+4	; 0x04
    3314:	ed 91       	ld	r30, X+
    3316:	fc 91       	ld	r31, X
    3318:	11 97       	sbiw	r26, 0x01	; 1
    331a:	15 96       	adiw	r26, 0x05	; 5
    331c:	9c 91       	ld	r25, X
    331e:	15 97       	sbiw	r26, 0x05	; 5
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	98 17       	cp	r25, r24
    3324:	08 f4       	brcc	.+2      	; 0x3328 <f_write+0xe8>
    3326:	54 c0       	rjmp	.+168    	; 0x33d0 <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    3328:	21 15       	cp	r18, r1
    332a:	31 05       	cpc	r19, r1
    332c:	41 05       	cpc	r20, r1
    332e:	51 05       	cpc	r21, r1
    3330:	c9 f4       	brne	.+50     	; 0x3364 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3332:	1e 96       	adiw	r26, 0x0e	; 14
    3334:	6d 91       	ld	r22, X+
    3336:	7d 91       	ld	r23, X+
    3338:	8d 91       	ld	r24, X+
    333a:	9c 91       	ld	r25, X
    333c:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    333e:	61 15       	cp	r22, r1
    3340:	71 05       	cpc	r23, r1
    3342:	81 05       	cpc	r24, r1
    3344:	91 05       	cpc	r25, r1
    3346:	f9 f4       	brne	.+62     	; 0x3386 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3348:	cf 01       	movw	r24, r30
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	60 e0       	ldi	r22, 0x00	; 0
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <create_chain>
    3356:	eb 81       	ldd	r30, Y+3	; 0x03
    3358:	fc 81       	ldd	r31, Y+4	; 0x04
    335a:	66 87       	std	Z+14, r22	; 0x0e
    335c:	77 87       	std	Z+15, r23	; 0x0f
    335e:	80 8b       	std	Z+16, r24	; 0x10
    3360:	91 8b       	std	Z+17, r25	; 0x11
    3362:	0b c0       	rjmp	.+22     	; 0x337a <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    3364:	ab 81       	ldd	r26, Y+3	; 0x03
    3366:	bc 81       	ldd	r27, Y+4	; 0x04
    3368:	52 96       	adiw	r26, 0x12	; 18
    336a:	4d 91       	ld	r20, X+
    336c:	5d 91       	ld	r21, X+
    336e:	6d 91       	ld	r22, X+
    3370:	7c 91       	ld	r23, X
    3372:	55 97       	sbiw	r26, 0x15	; 21
    3374:	cf 01       	movw	r24, r30
    3376:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    337a:	61 15       	cp	r22, r1
    337c:	71 05       	cpc	r23, r1
    337e:	81 05       	cpc	r24, r1
    3380:	91 05       	cpc	r25, r1
    3382:	09 f4       	brne	.+2      	; 0x3386 <f_write+0x146>
    3384:	6a c1       	rjmp	.+724    	; 0x365a <f_write+0x41a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3386:	61 30       	cpi	r22, 0x01	; 1
    3388:	71 05       	cpc	r23, r1
    338a:	81 05       	cpc	r24, r1
    338c:	91 05       	cpc	r25, r1
    338e:	41 f4       	brne	.+16     	; 0x33a0 <f_write+0x160>
    3390:	eb 81       	ldd	r30, Y+3	; 0x03
    3392:	fc 81       	ldd	r31, Y+4	; 0x04
    3394:	84 81       	ldd	r24, Z+4	; 0x04
    3396:	80 68       	ori	r24, 0x80	; 128
    3398:	84 83       	std	Z+4, r24	; 0x04
    339a:	22 e0       	ldi	r18, 0x02	; 2
    339c:	62 2e       	mov	r6, r18
    339e:	7e c1       	rjmp	.+764    	; 0x369c <f_write+0x45c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    33a0:	6f 3f       	cpi	r22, 0xFF	; 255
    33a2:	ff ef       	ldi	r31, 0xFF	; 255
    33a4:	7f 07       	cpc	r23, r31
    33a6:	ff ef       	ldi	r31, 0xFF	; 255
    33a8:	8f 07       	cpc	r24, r31
    33aa:	ff ef       	ldi	r31, 0xFF	; 255
    33ac:	9f 07       	cpc	r25, r31
    33ae:	49 f4       	brne	.+18     	; 0x33c2 <f_write+0x182>
    33b0:	ab 81       	ldd	r26, Y+3	; 0x03
    33b2:	bc 81       	ldd	r27, Y+4	; 0x04
    33b4:	14 96       	adiw	r26, 0x04	; 4
    33b6:	8c 91       	ld	r24, X
    33b8:	14 97       	sbiw	r26, 0x04	; 4
    33ba:	80 68       	ori	r24, 0x80	; 128
    33bc:	14 96       	adiw	r26, 0x04	; 4
    33be:	8c 93       	st	X, r24
    33c0:	ef c0       	rjmp	.+478    	; 0x35a0 <f_write+0x360>
				fp->curr_clust = clst;				/* Update current cluster */
    33c2:	eb 81       	ldd	r30, Y+3	; 0x03
    33c4:	fc 81       	ldd	r31, Y+4	; 0x04
    33c6:	62 8b       	std	Z+18, r22	; 0x12
    33c8:	73 8b       	std	Z+19, r23	; 0x13
    33ca:	84 8b       	std	Z+20, r24	; 0x14
    33cc:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    33ce:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    33d0:	ab 81       	ldd	r26, Y+3	; 0x03
    33d2:	bc 81       	ldd	r27, Y+4	; 0x04
    33d4:	14 96       	adiw	r26, 0x04	; 4
    33d6:	8c 91       	ld	r24, X
    33d8:	14 97       	sbiw	r26, 0x04	; 4
    33da:	86 ff       	sbrs	r24, 6
    33dc:	1b c0       	rjmp	.+54     	; 0x3414 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    33de:	ed 91       	ld	r30, X+
    33e0:	fc 91       	ld	r31, X
    33e2:	11 97       	sbiw	r26, 0x01	; 1
    33e4:	56 96       	adiw	r26, 0x16	; 22
    33e6:	2d 91       	ld	r18, X+
    33e8:	3d 91       	ld	r19, X+
    33ea:	4d 91       	ld	r20, X+
    33ec:	5c 91       	ld	r21, X
    33ee:	59 97       	sbiw	r26, 0x19	; 25
    33f0:	81 81       	ldd	r24, Z+1	; 0x01
    33f2:	b1 01       	movw	r22, r2
    33f4:	01 e0       	ldi	r16, 0x01	; 1
    33f6:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
    33fa:	eb 81       	ldd	r30, Y+3	; 0x03
    33fc:	fc 81       	ldd	r31, Y+4	; 0x04
    33fe:	94 81       	ldd	r25, Z+4	; 0x04
    3400:	88 23       	and	r24, r24
    3402:	19 f0       	breq	.+6      	; 0x340a <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3404:	90 68       	ori	r25, 0x80	; 128
    3406:	94 83       	std	Z+4, r25	; 0x04
    3408:	cb c0       	rjmp	.+406    	; 0x35a0 <f_write+0x360>
				fp->flag &= ~FA__DIRTY;
    340a:	9f 7b       	andi	r25, 0xBF	; 191
    340c:	ab 81       	ldd	r26, Y+3	; 0x03
    340e:	bc 81       	ldd	r27, Y+4	; 0x04
    3410:	14 96       	adiw	r26, 0x04	; 4
    3412:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3414:	eb 81       	ldd	r30, Y+3	; 0x03
    3416:	fc 81       	ldd	r31, Y+4	; 0x04
    3418:	00 81       	ld	r16, Z
    341a:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    341c:	22 89       	ldd	r18, Z+18	; 0x12
    341e:	33 89       	ldd	r19, Z+19	; 0x13
    3420:	44 89       	ldd	r20, Z+20	; 0x14
    3422:	55 89       	ldd	r21, Z+21	; 0x15
    3424:	22 50       	subi	r18, 0x02	; 2
    3426:	30 40       	sbci	r19, 0x00	; 0
    3428:	40 40       	sbci	r20, 0x00	; 0
    342a:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    342c:	f8 01       	movw	r30, r16
    342e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3430:	93 8d       	ldd	r25, Z+27	; 0x1b
    3432:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3434:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3436:	02 97       	sbiw	r24, 0x02	; 2
    3438:	a1 09       	sbc	r26, r1
    343a:	b1 09       	sbc	r27, r1
    343c:	28 17       	cp	r18, r24
    343e:	39 07       	cpc	r19, r25
    3440:	4a 07       	cpc	r20, r26
    3442:	5b 07       	cpc	r21, r27
    3444:	b8 f4       	brcc	.+46     	; 0x3474 <f_write+0x234>
	return clst * fs->csize + fs->database;
    3446:	72 80       	ldd	r7, Z+2	; 0x02
    3448:	67 2d       	mov	r22, r7
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    3454:	9b 01       	movw	r18, r22
    3456:	ac 01       	movw	r20, r24
    3458:	f8 01       	movw	r30, r16
    345a:	86 a1       	ldd	r24, Z+38	; 0x26
    345c:	97 a1       	ldd	r25, Z+39	; 0x27
    345e:	a0 a5       	ldd	r26, Z+40	; 0x28
    3460:	b1 a5       	ldd	r27, Z+41	; 0x29
    3462:	28 0f       	add	r18, r24
    3464:	39 1f       	adc	r19, r25
    3466:	4a 1f       	adc	r20, r26
    3468:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    346a:	21 15       	cp	r18, r1
    346c:	31 05       	cpc	r19, r1
    346e:	41 05       	cpc	r20, r1
    3470:	51 05       	cpc	r21, r1
    3472:	49 f4       	brne	.+18     	; 0x3486 <f_write+0x246>
    3474:	ab 81       	ldd	r26, Y+3	; 0x03
    3476:	bc 81       	ldd	r27, Y+4	; 0x04
    3478:	14 96       	adiw	r26, 0x04	; 4
    347a:	8c 91       	ld	r24, X
    347c:	14 97       	sbiw	r26, 0x04	; 4
    347e:	80 68       	ori	r24, 0x80	; 128
    3480:	14 96       	adiw	r26, 0x04	; 4
    3482:	8c 93       	st	X, r24
    3484:	8a cf       	rjmp	.-236    	; 0x339a <f_write+0x15a>
			sect += fp->csect;
    3486:	eb 81       	ldd	r30, Y+3	; 0x03
    3488:	fc 81       	ldd	r31, Y+4	; 0x04
    348a:	85 81       	ldd	r24, Z+5	; 0x05
    348c:	69 01       	movw	r12, r18
    348e:	7a 01       	movw	r14, r20
    3490:	c8 0e       	add	r12, r24
    3492:	d1 1c       	adc	r13, r1
    3494:	e1 1c       	adc	r14, r1
    3496:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3498:	54 01       	movw	r10, r8
    349a:	ab 2c       	mov	r10, r11
    349c:	bb 24       	eor	r11, r11
    349e:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    34a0:	a1 14       	cp	r10, r1
    34a2:	b1 04       	cpc	r11, r1
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <f_write+0x268>
    34a6:	54 c0       	rjmp	.+168    	; 0x3550 <f_write+0x310>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	c5 01       	movw	r24, r10
    34ae:	82 0f       	add	r24, r18
    34b0:	93 1f       	adc	r25, r19
    34b2:	67 2d       	mov	r22, r7
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	68 17       	cp	r22, r24
    34b8:	79 07       	cpc	r23, r25
    34ba:	18 f4       	brcc	.+6      	; 0x34c2 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    34bc:	5b 01       	movw	r10, r22
    34be:	a2 1a       	sub	r10, r18
    34c0:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    34c2:	d8 01       	movw	r26, r16
    34c4:	11 96       	adiw	r26, 0x01	; 1
    34c6:	8c 91       	ld	r24, X
    34c8:	b2 01       	movw	r22, r4
    34ca:	a7 01       	movw	r20, r14
    34cc:	96 01       	movw	r18, r12
    34ce:	0a 2d       	mov	r16, r10
    34d0:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
    34d4:	88 23       	and	r24, r24
    34d6:	09 f0       	breq	.+2      	; 0x34da <f_write+0x29a>
    34d8:	5e c0       	rjmp	.+188    	; 0x3596 <f_write+0x356>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    34da:	ab 81       	ldd	r26, Y+3	; 0x03
    34dc:	bc 81       	ldd	r27, Y+4	; 0x04
    34de:	56 96       	adiw	r26, 0x16	; 22
    34e0:	2d 91       	ld	r18, X+
    34e2:	3d 91       	ld	r19, X+
    34e4:	4d 91       	ld	r20, X+
    34e6:	5c 91       	ld	r21, X
    34e8:	59 97       	sbiw	r26, 0x19	; 25
    34ea:	2c 19       	sub	r18, r12
    34ec:	3d 09       	sbc	r19, r13
    34ee:	4e 09       	sbc	r20, r14
    34f0:	5f 09       	sbc	r21, r15
    34f2:	c5 01       	movw	r24, r10
    34f4:	a0 e0       	ldi	r26, 0x00	; 0
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	28 17       	cp	r18, r24
    34fa:	39 07       	cpc	r19, r25
    34fc:	4a 07       	cpc	r20, r26
    34fe:	5b 07       	cpc	r21, r27
    3500:	d0 f4       	brcc	.+52     	; 0x3536 <f_write+0x2f6>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3502:	19 e0       	ldi	r17, 0x09	; 9
    3504:	22 0f       	add	r18, r18
    3506:	33 1f       	adc	r19, r19
    3508:	44 1f       	adc	r20, r20
    350a:	55 1f       	adc	r21, r21
    350c:	1a 95       	dec	r17
    350e:	d1 f7       	brne	.-12     	; 0x3504 <f_write+0x2c4>
    3510:	c2 01       	movw	r24, r4
    3512:	82 0f       	add	r24, r18
    3514:	93 1f       	adc	r25, r19
    3516:	d1 01       	movw	r26, r2
    3518:	fc 01       	movw	r30, r24
	while (cnt--) *d++ = *s++;
    351a:	9c 01       	movw	r18, r24
    351c:	20 50       	subi	r18, 0x00	; 0
    351e:	3e 4f       	sbci	r19, 0xFE	; 254
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <f_write+0x2e6>
    3522:	81 91       	ld	r24, Z+
    3524:	8d 93       	st	X+, r24
    3526:	e2 17       	cp	r30, r18
    3528:	f3 07       	cpc	r31, r19
    352a:	d9 f7       	brne	.-10     	; 0x3522 <f_write+0x2e2>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    352c:	eb 81       	ldd	r30, Y+3	; 0x03
    352e:	fc 81       	ldd	r31, Y+4	; 0x04
    3530:	84 81       	ldd	r24, Z+4	; 0x04
    3532:	8f 7b       	andi	r24, 0xBF	; 191
    3534:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3536:	ab 81       	ldd	r26, Y+3	; 0x03
    3538:	bc 81       	ldd	r27, Y+4	; 0x04
    353a:	15 96       	adiw	r26, 0x05	; 5
    353c:	8c 91       	ld	r24, X
    353e:	15 97       	sbiw	r26, 0x05	; 5
    3540:	8a 0d       	add	r24, r10
    3542:	15 96       	adiw	r26, 0x05	; 5
    3544:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3546:	b5 01       	movw	r22, r10
    3548:	76 2f       	mov	r23, r22
    354a:	66 27       	eor	r22, r22
    354c:	77 0f       	add	r23, r23
    354e:	64 c0       	rjmp	.+200    	; 0x3618 <f_write+0x3d8>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3550:	eb 81       	ldd	r30, Y+3	; 0x03
    3552:	fc 81       	ldd	r31, Y+4	; 0x04
    3554:	86 89       	ldd	r24, Z+22	; 0x16
    3556:	97 89       	ldd	r25, Z+23	; 0x17
    3558:	a0 8d       	ldd	r26, Z+24	; 0x18
    355a:	b1 8d       	ldd	r27, Z+25	; 0x19
    355c:	8c 15       	cp	r24, r12
    355e:	9d 05       	cpc	r25, r13
    3560:	ae 05       	cpc	r26, r14
    3562:	bf 05       	cpc	r27, r15
    3564:	01 f1       	breq	.+64     	; 0x35a6 <f_write+0x366>
				if (fp->fptr < fp->fsize &&
    3566:	26 81       	ldd	r18, Z+6	; 0x06
    3568:	37 81       	ldd	r19, Z+7	; 0x07
    356a:	40 85       	ldd	r20, Z+8	; 0x08
    356c:	51 85       	ldd	r21, Z+9	; 0x09
    356e:	82 85       	ldd	r24, Z+10	; 0x0a
    3570:	93 85       	ldd	r25, Z+11	; 0x0b
    3572:	a4 85       	ldd	r26, Z+12	; 0x0c
    3574:	b5 85       	ldd	r27, Z+13	; 0x0d
    3576:	28 17       	cp	r18, r24
    3578:	39 07       	cpc	r19, r25
    357a:	4a 07       	cpc	r20, r26
    357c:	5b 07       	cpc	r21, r27
    357e:	98 f4       	brcc	.+38     	; 0x35a6 <f_write+0x366>
    3580:	d8 01       	movw	r26, r16
    3582:	11 96       	adiw	r26, 0x01	; 1
    3584:	8c 91       	ld	r24, X
    3586:	b1 01       	movw	r22, r2
    3588:	a7 01       	movw	r20, r14
    358a:	96 01       	movw	r18, r12
    358c:	01 e0       	ldi	r16, 0x01	; 1
    358e:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    3592:	88 23       	and	r24, r24
    3594:	41 f0       	breq	.+16     	; 0x35a6 <f_write+0x366>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    3596:	eb 81       	ldd	r30, Y+3	; 0x03
    3598:	fc 81       	ldd	r31, Y+4	; 0x04
    359a:	84 81       	ldd	r24, Z+4	; 0x04
    359c:	80 68       	ori	r24, 0x80	; 128
    359e:	84 83       	std	Z+4, r24	; 0x04
    35a0:	66 24       	eor	r6, r6
    35a2:	63 94       	inc	r6
    35a4:	7b c0       	rjmp	.+246    	; 0x369c <f_write+0x45c>
			}
#endif
			fp->dsect = sect;
    35a6:	ab 81       	ldd	r26, Y+3	; 0x03
    35a8:	bc 81       	ldd	r27, Y+4	; 0x04
    35aa:	56 96       	adiw	r26, 0x16	; 22
    35ac:	cd 92       	st	X+, r12
    35ae:	dd 92       	st	X+, r13
    35b0:	ed 92       	st	X+, r14
    35b2:	fc 92       	st	X, r15
    35b4:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    35b6:	15 96       	adiw	r26, 0x05	; 5
    35b8:	8c 91       	ld	r24, X
    35ba:	15 97       	sbiw	r26, 0x05	; 5
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	15 96       	adiw	r26, 0x05	; 5
    35c0:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    35c2:	eb 81       	ldd	r30, Y+3	; 0x03
    35c4:	fc 81       	ldd	r31, Y+4	; 0x04
    35c6:	26 81       	ldd	r18, Z+6	; 0x06
    35c8:	37 81       	ldd	r19, Z+7	; 0x07
    35ca:	40 85       	ldd	r20, Z+8	; 0x08
    35cc:	51 85       	ldd	r21, Z+9	; 0x09
    35ce:	c9 01       	movw	r24, r18
    35d0:	91 70       	andi	r25, 0x01	; 1
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	72 e0       	ldi	r23, 0x02	; 2
    35d6:	68 1b       	sub	r22, r24
    35d8:	79 0b       	sbc	r23, r25
    35da:	cb 01       	movw	r24, r22
    35dc:	b4 01       	movw	r22, r8
    35de:	88 15       	cp	r24, r8
    35e0:	99 05       	cpc	r25, r9
    35e2:	08 f4       	brcc	.+2      	; 0x35e6 <f_write+0x3a6>
    35e4:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    35e6:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    35e8:	f9 01       	movw	r30, r18
    35ea:	f1 70       	andi	r31, 0x01	; 1
    35ec:	b0 96       	adiw	r30, 0x20	; 32
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	9c 81       	ldd	r25, Y+4	; 0x04
    35f2:	e8 0f       	add	r30, r24
    35f4:	f9 1f       	adc	r31, r25
    35f6:	92 01       	movw	r18, r4
    35f8:	04 c0       	rjmp	.+8      	; 0x3602 <f_write+0x3c2>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    35fa:	d9 01       	movw	r26, r18
    35fc:	8d 91       	ld	r24, X+
    35fe:	9d 01       	movw	r18, r26
    3600:	81 93       	st	Z+, r24
    3602:	01 50       	subi	r16, 0x01	; 1
    3604:	10 40       	sbci	r17, 0x00	; 0
    3606:	bf ef       	ldi	r27, 0xFF	; 255
    3608:	0f 3f       	cpi	r16, 0xFF	; 255
    360a:	1b 07       	cpc	r17, r27
    360c:	b1 f7       	brne	.-20     	; 0x35fa <f_write+0x3ba>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    360e:	eb 81       	ldd	r30, Y+3	; 0x03
    3610:	fc 81       	ldd	r31, Y+4	; 0x04
    3612:	84 81       	ldd	r24, Z+4	; 0x04
    3614:	80 64       	ori	r24, 0x40	; 64
    3616:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3618:	46 0e       	add	r4, r22
    361a:	57 1e       	adc	r5, r23
    361c:	cb 01       	movw	r24, r22
    361e:	a0 e0       	ldi	r26, 0x00	; 0
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	eb 81       	ldd	r30, Y+3	; 0x03
    3624:	fc 81       	ldd	r31, Y+4	; 0x04
    3626:	26 81       	ldd	r18, Z+6	; 0x06
    3628:	37 81       	ldd	r19, Z+7	; 0x07
    362a:	40 85       	ldd	r20, Z+8	; 0x08
    362c:	51 85       	ldd	r21, Z+9	; 0x09
    362e:	28 0f       	add	r18, r24
    3630:	39 1f       	adc	r19, r25
    3632:	4a 1f       	adc	r20, r26
    3634:	5b 1f       	adc	r21, r27
    3636:	26 83       	std	Z+6, r18	; 0x06
    3638:	37 83       	std	Z+7, r19	; 0x07
    363a:	40 87       	std	Z+8, r20	; 0x08
    363c:	51 87       	std	Z+9, r21	; 0x09
    363e:	e9 81       	ldd	r30, Y+1	; 0x01
    3640:	fa 81       	ldd	r31, Y+2	; 0x02
    3642:	80 81       	ld	r24, Z
    3644:	91 81       	ldd	r25, Z+1	; 0x01
    3646:	86 0f       	add	r24, r22
    3648:	97 1f       	adc	r25, r23
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	86 1a       	sub	r8, r22
    3650:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    3652:	81 14       	cp	r8, r1
    3654:	91 04       	cpc	r9, r1
    3656:	09 f0       	breq	.+2      	; 0x365a <f_write+0x41a>
    3658:	49 ce       	rjmp	.-878    	; 0x32ec <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    365a:	ab 81       	ldd	r26, Y+3	; 0x03
    365c:	bc 81       	ldd	r27, Y+4	; 0x04
    365e:	16 96       	adiw	r26, 0x06	; 6
    3660:	2d 91       	ld	r18, X+
    3662:	3d 91       	ld	r19, X+
    3664:	4d 91       	ld	r20, X+
    3666:	5c 91       	ld	r21, X
    3668:	19 97       	sbiw	r26, 0x09	; 9
    366a:	1a 96       	adiw	r26, 0x0a	; 10
    366c:	8d 91       	ld	r24, X+
    366e:	9d 91       	ld	r25, X+
    3670:	0d 90       	ld	r0, X+
    3672:	bc 91       	ld	r27, X
    3674:	a0 2d       	mov	r26, r0
    3676:	82 17       	cp	r24, r18
    3678:	93 07       	cpc	r25, r19
    367a:	a4 07       	cpc	r26, r20
    367c:	b5 07       	cpc	r27, r21
    367e:	30 f4       	brcc	.+12     	; 0x368c <f_write+0x44c>
    3680:	eb 81       	ldd	r30, Y+3	; 0x03
    3682:	fc 81       	ldd	r31, Y+4	; 0x04
    3684:	22 87       	std	Z+10, r18	; 0x0a
    3686:	33 87       	std	Z+11, r19	; 0x0b
    3688:	44 87       	std	Z+12, r20	; 0x0c
    368a:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    368c:	ab 81       	ldd	r26, Y+3	; 0x03
    368e:	bc 81       	ldd	r27, Y+4	; 0x04
    3690:	14 96       	adiw	r26, 0x04	; 4
    3692:	8c 91       	ld	r24, X
    3694:	14 97       	sbiw	r26, 0x04	; 4
    3696:	80 62       	ori	r24, 0x20	; 32
    3698:	14 96       	adiw	r26, 0x04	; 4
    369a:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    369c:	86 2d       	mov	r24, r6
    369e:	24 96       	adiw	r28, 0x04	; 4
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ff 90       	pop	r15
    36ae:	ef 90       	pop	r14
    36b0:	df 90       	pop	r13
    36b2:	cf 90       	pop	r12
    36b4:	bf 90       	pop	r11
    36b6:	af 90       	pop	r10
    36b8:	9f 90       	pop	r9
    36ba:	8f 90       	pop	r8
    36bc:	7f 90       	pop	r7
    36be:	6f 90       	pop	r6
    36c0:	5f 90       	pop	r5
    36c2:	4f 90       	pop	r4
    36c4:	3f 90       	pop	r3
    36c6:	2f 90       	pop	r2
    36c8:	08 95       	ret

000036ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    36ca:	0f 93       	push	r16
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    36d2:	6a 81       	ldd	r22, Y+2	; 0x02
    36d4:	7b 81       	ldd	r23, Y+3	; 0x03
    36d6:	88 81       	ld	r24, Y
    36d8:	99 81       	ldd	r25, Y+1	; 0x01
    36da:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <validate>
    36de:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    36e0:	88 23       	and	r24, r24
    36e2:	09 f0       	breq	.+2      	; 0x36e6 <f_sync+0x1c>
    36e4:	65 c0       	rjmp	.+202    	; 0x37b0 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    36e6:	8c 81       	ldd	r24, Y+4	; 0x04
    36e8:	85 ff       	sbrs	r24, 5
    36ea:	62 c0       	rjmp	.+196    	; 0x37b0 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    36ec:	86 ff       	sbrs	r24, 6
    36ee:	14 c0       	rjmp	.+40     	; 0x3718 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    36f0:	e8 81       	ld	r30, Y
    36f2:	f9 81       	ldd	r31, Y+1	; 0x01
    36f4:	be 01       	movw	r22, r28
    36f6:	60 5e       	subi	r22, 0xE0	; 224
    36f8:	7f 4f       	sbci	r23, 0xFF	; 255
    36fa:	2e 89       	ldd	r18, Y+22	; 0x16
    36fc:	3f 89       	ldd	r19, Y+23	; 0x17
    36fe:	48 8d       	ldd	r20, Y+24	; 0x18
    3700:	59 8d       	ldd	r21, Y+25	; 0x19
    3702:	81 81       	ldd	r24, Z+1	; 0x01
    3704:	01 e0       	ldi	r16, 0x01	; 1
    3706:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
    370a:	88 23       	and	r24, r24
    370c:	11 f0       	breq	.+4      	; 0x3712 <f_sync+0x48>
    370e:	91 e0       	ldi	r25, 0x01	; 1
    3710:	4f c0       	rjmp	.+158    	; 0x37b0 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3712:	8c 81       	ldd	r24, Y+4	; 0x04
    3714:	8f 7b       	andi	r24, 0xBF	; 191
    3716:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3718:	4a 8d       	ldd	r20, Y+26	; 0x1a
    371a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    371c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    371e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3720:	88 81       	ld	r24, Y
    3722:	99 81       	ldd	r25, Y+1	; 0x01
    3724:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    3728:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    372a:	88 23       	and	r24, r24
    372c:	09 f0       	breq	.+2      	; 0x3730 <f_sync+0x66>
    372e:	40 c0       	rjmp	.+128    	; 0x37b0 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3730:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3732:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3734:	83 85       	ldd	r24, Z+11	; 0x0b
    3736:	80 62       	ori	r24, 0x20	; 32
    3738:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    373a:	8a 85       	ldd	r24, Y+10	; 0x0a
    373c:	84 8f       	std	Z+28, r24	; 0x1c
    373e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3740:	85 8f       	std	Z+29, r24	; 0x1d
    3742:	8a 85       	ldd	r24, Y+10	; 0x0a
    3744:	9b 85       	ldd	r25, Y+11	; 0x0b
    3746:	ac 85       	ldd	r26, Y+12	; 0x0c
    3748:	bd 85       	ldd	r27, Y+13	; 0x0d
    374a:	cd 01       	movw	r24, r26
    374c:	aa 27       	eor	r26, r26
    374e:	bb 27       	eor	r27, r27
    3750:	86 8f       	std	Z+30, r24	; 0x1e
    3752:	8a 85       	ldd	r24, Y+10	; 0x0a
    3754:	9b 85       	ldd	r25, Y+11	; 0x0b
    3756:	ac 85       	ldd	r26, Y+12	; 0x0c
    3758:	bd 85       	ldd	r27, Y+13	; 0x0d
    375a:	8b 2f       	mov	r24, r27
    375c:	99 27       	eor	r25, r25
    375e:	aa 27       	eor	r26, r26
    3760:	bb 27       	eor	r27, r27
    3762:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    3764:	8e 85       	ldd	r24, Y+14	; 0x0e
    3766:	82 8f       	std	Z+26, r24	; 0x1a
    3768:	8f 85       	ldd	r24, Y+15	; 0x0f
    376a:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    376c:	8e 85       	ldd	r24, Y+14	; 0x0e
    376e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3770:	a8 89       	ldd	r26, Y+16	; 0x10
    3772:	b9 89       	ldd	r27, Y+17	; 0x11
    3774:	cd 01       	movw	r24, r26
    3776:	aa 27       	eor	r26, r26
    3778:	bb 27       	eor	r27, r27
    377a:	84 8b       	std	Z+20, r24	; 0x14
    377c:	8e 85       	ldd	r24, Y+14	; 0x0e
    377e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3780:	a8 89       	ldd	r26, Y+16	; 0x10
    3782:	b9 89       	ldd	r27, Y+17	; 0x11
    3784:	cd 01       	movw	r24, r26
    3786:	aa 27       	eor	r26, r26
    3788:	bb 27       	eor	r27, r27
    378a:	89 2f       	mov	r24, r25
    378c:	99 27       	eor	r25, r25
    378e:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    3790:	16 8a       	std	Z+22, r1	; 0x16
    3792:	17 8a       	std	Z+23, r1	; 0x17
    3794:	10 8e       	std	Z+24, r1	; 0x18
    3796:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	8f 7d       	andi	r24, 0xDF	; 223
    379c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    379e:	e8 81       	ld	r30, Y
    37a0:	f9 81       	ldd	r31, Y+1	; 0x01
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    37a6:	88 81       	ld	r24, Y
    37a8:	99 81       	ldd	r25, Y+1	; 0x01
    37aa:	0e 94 0e 09 	call	0x121c	; 0x121c <sync>
    37ae:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    37b0:	89 2f       	mov	r24, r25
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	0f 91       	pop	r16
    37b8:	08 95       	ret

000037ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    37c0:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    37c4:	88 23       	and	r24, r24
    37c6:	11 f4       	brne	.+4      	; 0x37cc <f_close+0x12>
    37c8:	18 82       	st	Y, r1
    37ca:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    37d2:	2f 92       	push	r2
    37d4:	3f 92       	push	r3
    37d6:	4f 92       	push	r4
    37d8:	5f 92       	push	r5
    37da:	6f 92       	push	r6
    37dc:	7f 92       	push	r7
    37de:	8f 92       	push	r8
    37e0:	9f 92       	push	r9
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	28 97       	sbiw	r28, 0x08	; 8
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	8f 83       	std	Y+7, r24	; 0x07
    37fe:	98 87       	std	Y+8, r25	; 0x08
    3800:	3a 01       	movw	r6, r20
    3802:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3804:	dc 01       	movw	r26, r24
    3806:	12 96       	adiw	r26, 0x02	; 2
    3808:	6d 91       	ld	r22, X+
    380a:	7c 91       	ld	r23, X
    380c:	13 97       	sbiw	r26, 0x03	; 3
    380e:	8d 91       	ld	r24, X+
    3810:	9c 91       	ld	r25, X
    3812:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <validate>
    3816:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3818:	88 23       	and	r24, r24
    381a:	09 f0       	breq	.+2      	; 0x381e <f_lseek+0x4c>
    381c:	f3 c1       	rjmp	.+998    	; 0x3c04 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    381e:	ef 81       	ldd	r30, Y+7	; 0x07
    3820:	f8 85       	ldd	r31, Y+8	; 0x08
    3822:	84 81       	ldd	r24, Z+4	; 0x04
    3824:	87 fd       	sbrc	r24, 7
    3826:	98 c0       	rjmp	.+304    	; 0x3958 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3828:	af 81       	ldd	r26, Y+7	; 0x07
    382a:	b8 85       	ldd	r27, Y+8	; 0x08
    382c:	1a 96       	adiw	r26, 0x0a	; 10
    382e:	ad 90       	ld	r10, X+
    3830:	bd 90       	ld	r11, X+
    3832:	cd 90       	ld	r12, X+
    3834:	dc 90       	ld	r13, X
    3836:	1d 97       	sbiw	r26, 0x0d	; 13
    3838:	a6 14       	cp	r10, r6
    383a:	b7 04       	cpc	r11, r7
    383c:	c8 04       	cpc	r12, r8
    383e:	d9 04       	cpc	r13, r9
    3840:	10 f4       	brcc	.+4      	; 0x3846 <f_lseek+0x74>
    3842:	81 ff       	sbrs	r24, 1
    3844:	02 c0       	rjmp	.+4      	; 0x384a <f_lseek+0x78>
    3846:	64 01       	movw	r12, r8
    3848:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    384a:	ef 81       	ldd	r30, Y+7	; 0x07
    384c:	f8 85       	ldd	r31, Y+8	; 0x08
    384e:	26 81       	ldd	r18, Z+6	; 0x06
    3850:	37 81       	ldd	r19, Z+7	; 0x07
    3852:	40 85       	ldd	r20, Z+8	; 0x08
    3854:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3856:	16 82       	std	Z+6, r1	; 0x06
    3858:	17 82       	std	Z+7, r1	; 0x07
    385a:	10 86       	std	Z+8, r1	; 0x08
    385c:	11 86       	std	Z+9, r1	; 0x09
    385e:	8f ef       	ldi	r24, 0xFF	; 255
    3860:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3862:	a1 14       	cp	r10, r1
    3864:	b1 04       	cpc	r11, r1
    3866:	c1 04       	cpc	r12, r1
    3868:	d1 04       	cpc	r13, r1
    386a:	09 f4       	brne	.+2      	; 0x386e <f_lseek+0x9c>
    386c:	5f c1       	rjmp	.+702    	; 0x3b2c <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    386e:	01 90       	ld	r0, Z+
    3870:	f0 81       	ld	r31, Z
    3872:	e0 2d       	mov	r30, r0
    3874:	e9 83       	std	Y+1, r30	; 0x01
    3876:	fa 83       	std	Y+2, r31	; 0x02
    3878:	82 81       	ldd	r24, Z+2	; 0x02
    387a:	68 2e       	mov	r6, r24
    387c:	77 24       	eor	r7, r7
    387e:	88 24       	eor	r8, r8
    3880:	99 24       	eor	r9, r9
    3882:	89 e0       	ldi	r24, 0x09	; 9
    3884:	66 0c       	add	r6, r6
    3886:	77 1c       	adc	r7, r7
    3888:	88 1c       	adc	r8, r8
    388a:	99 1c       	adc	r9, r9
    388c:	8a 95       	dec	r24
    388e:	d1 f7       	brne	.-12     	; 0x3884 <f_lseek+0xb2>
		if (ifptr > 0 &&
    3890:	21 15       	cp	r18, r1
    3892:	31 05       	cpc	r19, r1
    3894:	41 05       	cpc	r20, r1
    3896:	51 05       	cpc	r21, r1
    3898:	f1 f1       	breq	.+124    	; 0x3916 <f_lseek+0x144>
    389a:	19 01       	movw	r2, r18
    389c:	2a 01       	movw	r4, r20
    389e:	08 94       	sec
    38a0:	21 08       	sbc	r2, r1
    38a2:	31 08       	sbc	r3, r1
    38a4:	41 08       	sbc	r4, r1
    38a6:	51 08       	sbc	r5, r1
    38a8:	c6 01       	movw	r24, r12
    38aa:	b5 01       	movw	r22, r10
    38ac:	61 50       	subi	r22, 0x01	; 1
    38ae:	70 40       	sbci	r23, 0x00	; 0
    38b0:	80 40       	sbci	r24, 0x00	; 0
    38b2:	90 40       	sbci	r25, 0x00	; 0
    38b4:	a4 01       	movw	r20, r8
    38b6:	93 01       	movw	r18, r6
    38b8:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    38bc:	2b 83       	std	Y+3, r18	; 0x03
    38be:	3c 83       	std	Y+4, r19	; 0x04
    38c0:	4d 83       	std	Y+5, r20	; 0x05
    38c2:	5e 83       	std	Y+6, r21	; 0x06
    38c4:	c2 01       	movw	r24, r4
    38c6:	b1 01       	movw	r22, r2
    38c8:	a4 01       	movw	r20, r8
    38ca:	93 01       	movw	r18, r6
    38cc:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    38d0:	8b 81       	ldd	r24, Y+3	; 0x03
    38d2:	9c 81       	ldd	r25, Y+4	; 0x04
    38d4:	ad 81       	ldd	r26, Y+5	; 0x05
    38d6:	be 81       	ldd	r27, Y+6	; 0x06
    38d8:	82 17       	cp	r24, r18
    38da:	93 07       	cpc	r25, r19
    38dc:	a4 07       	cpc	r26, r20
    38de:	b5 07       	cpc	r27, r21
    38e0:	d0 f0       	brcs	.+52     	; 0x3916 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    38e2:	88 27       	eor	r24, r24
    38e4:	99 27       	eor	r25, r25
    38e6:	dc 01       	movw	r26, r24
    38e8:	86 19       	sub	r24, r6
    38ea:	97 09       	sbc	r25, r7
    38ec:	a8 09       	sbc	r26, r8
    38ee:	b9 09       	sbc	r27, r9
    38f0:	82 21       	and	r24, r2
    38f2:	93 21       	and	r25, r3
    38f4:	a4 21       	and	r26, r4
    38f6:	b5 21       	and	r27, r5
    38f8:	ef 81       	ldd	r30, Y+7	; 0x07
    38fa:	f8 85       	ldd	r31, Y+8	; 0x08
    38fc:	86 83       	std	Z+6, r24	; 0x06
    38fe:	97 83       	std	Z+7, r25	; 0x07
    3900:	a0 87       	std	Z+8, r26	; 0x08
    3902:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3904:	a8 1a       	sub	r10, r24
    3906:	b9 0a       	sbc	r11, r25
    3908:	ca 0a       	sbc	r12, r26
    390a:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    390c:	42 89       	ldd	r20, Z+18	; 0x12
    390e:	53 89       	ldd	r21, Z+19	; 0x13
    3910:	64 89       	ldd	r22, Z+20	; 0x14
    3912:	75 89       	ldd	r23, Z+21	; 0x15
    3914:	39 c0       	rjmp	.+114    	; 0x3988 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3916:	af 81       	ldd	r26, Y+7	; 0x07
    3918:	b8 85       	ldd	r27, Y+8	; 0x08
    391a:	1e 96       	adiw	r26, 0x0e	; 14
    391c:	4d 91       	ld	r20, X+
    391e:	5d 91       	ld	r21, X+
    3920:	6d 91       	ld	r22, X+
    3922:	7c 91       	ld	r23, X
    3924:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3926:	41 15       	cp	r20, r1
    3928:	51 05       	cpc	r21, r1
    392a:	61 05       	cpc	r22, r1
    392c:	71 05       	cpc	r23, r1
    392e:	21 f5       	brne	.+72     	; 0x3978 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <create_chain>
    3940:	ab 01       	movw	r20, r22
    3942:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3944:	41 30       	cpi	r20, 0x01	; 1
    3946:	51 05       	cpc	r21, r1
    3948:	61 05       	cpc	r22, r1
    394a:	71 05       	cpc	r23, r1
    394c:	39 f4       	brne	.+14     	; 0x395c <f_lseek+0x18a>
    394e:	ef 81       	ldd	r30, Y+7	; 0x07
    3950:	f8 85       	ldd	r31, Y+8	; 0x08
    3952:	84 81       	ldd	r24, Z+4	; 0x04
    3954:	80 68       	ori	r24, 0x80	; 128
    3956:	84 83       	std	Z+4, r24	; 0x04
    3958:	12 e0       	ldi	r17, 0x02	; 2
    395a:	54 c1       	rjmp	.+680    	; 0x3c04 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    395c:	4f 3f       	cpi	r20, 0xFF	; 255
    395e:	ff ef       	ldi	r31, 0xFF	; 255
    3960:	5f 07       	cpc	r21, r31
    3962:	ff ef       	ldi	r31, 0xFF	; 255
    3964:	6f 07       	cpc	r22, r31
    3966:	ff ef       	ldi	r31, 0xFF	; 255
    3968:	7f 07       	cpc	r23, r31
    396a:	b1 f1       	breq	.+108    	; 0x39d8 <f_lseek+0x206>
				fp->org_clust = clst;
    396c:	ef 81       	ldd	r30, Y+7	; 0x07
    396e:	f8 85       	ldd	r31, Y+8	; 0x08
    3970:	46 87       	std	Z+14, r20	; 0x0e
    3972:	57 87       	std	Z+15, r21	; 0x0f
    3974:	60 8b       	std	Z+16, r22	; 0x10
    3976:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3978:	af 81       	ldd	r26, Y+7	; 0x07
    397a:	b8 85       	ldd	r27, Y+8	; 0x08
    397c:	52 96       	adiw	r26, 0x12	; 18
    397e:	4d 93       	st	X+, r20
    3980:	5d 93       	st	X+, r21
    3982:	6d 93       	st	X+, r22
    3984:	7c 93       	st	X, r23
    3986:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3988:	41 15       	cp	r20, r1
    398a:	51 05       	cpc	r21, r1
    398c:	61 05       	cpc	r22, r1
    398e:	71 05       	cpc	r23, r1
    3990:	09 f0       	breq	.+2      	; 0x3994 <f_lseek+0x1c2>
    3992:	58 c0       	rjmp	.+176    	; 0x3a44 <f_lseek+0x272>
    3994:	cb c0       	rjmp	.+406    	; 0x3b2c <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3996:	ef 81       	ldd	r30, Y+7	; 0x07
    3998:	f8 85       	ldd	r31, Y+8	; 0x08
    399a:	84 81       	ldd	r24, Z+4	; 0x04
    399c:	20 81       	ld	r18, Z
    399e:	31 81       	ldd	r19, Z+1	; 0x01
    39a0:	81 ff       	sbrs	r24, 1
    39a2:	0d c0       	rjmp	.+26     	; 0x39be <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    39a4:	c9 01       	movw	r24, r18
    39a6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <create_chain>
    39aa:	ab 01       	movw	r20, r22
    39ac:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    39ae:	41 15       	cp	r20, r1
    39b0:	51 05       	cpc	r21, r1
    39b2:	61 05       	cpc	r22, r1
    39b4:	71 05       	cpc	r23, r1
    39b6:	41 f4       	brne	.+16     	; 0x39c8 <f_lseek+0x1f6>
    39b8:	64 01       	movw	r12, r8
    39ba:	53 01       	movw	r10, r6
    39bc:	49 c0       	rjmp	.+146    	; 0x3a50 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    39be:	c9 01       	movw	r24, r18
    39c0:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    39c4:	ab 01       	movw	r20, r22
    39c6:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    39c8:	4f 3f       	cpi	r20, 0xFF	; 255
    39ca:	ff ef       	ldi	r31, 0xFF	; 255
    39cc:	5f 07       	cpc	r21, r31
    39ce:	ff ef       	ldi	r31, 0xFF	; 255
    39d0:	6f 07       	cpc	r22, r31
    39d2:	ff ef       	ldi	r31, 0xFF	; 255
    39d4:	7f 07       	cpc	r23, r31
    39d6:	49 f4       	brne	.+18     	; 0x39ea <f_lseek+0x218>
    39d8:	af 81       	ldd	r26, Y+7	; 0x07
    39da:	b8 85       	ldd	r27, Y+8	; 0x08
    39dc:	14 96       	adiw	r26, 0x04	; 4
    39de:	8c 91       	ld	r24, X
    39e0:	14 97       	sbiw	r26, 0x04	; 4
    39e2:	80 68       	ori	r24, 0x80	; 128
    39e4:	14 96       	adiw	r26, 0x04	; 4
    39e6:	8c 93       	st	X, r24
    39e8:	ed c0       	rjmp	.+474    	; 0x3bc4 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    39ea:	42 30       	cpi	r20, 0x02	; 2
    39ec:	51 05       	cpc	r21, r1
    39ee:	61 05       	cpc	r22, r1
    39f0:	71 05       	cpc	r23, r1
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <f_lseek+0x224>
    39f4:	ac cf       	rjmp	.-168    	; 0x394e <f_lseek+0x17c>
    39f6:	af 81       	ldd	r26, Y+7	; 0x07
    39f8:	b8 85       	ldd	r27, Y+8	; 0x08
    39fa:	ed 91       	ld	r30, X+
    39fc:	fc 91       	ld	r31, X
    39fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a00:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a02:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3a04:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3a06:	48 17       	cp	r20, r24
    3a08:	59 07       	cpc	r21, r25
    3a0a:	6a 07       	cpc	r22, r26
    3a0c:	7b 07       	cpc	r23, r27
    3a0e:	08 f0       	brcs	.+2      	; 0x3a12 <f_lseek+0x240>
    3a10:	9e cf       	rjmp	.-196    	; 0x394e <f_lseek+0x17c>
				fp->curr_clust = clst;
    3a12:	af 81       	ldd	r26, Y+7	; 0x07
    3a14:	b8 85       	ldd	r27, Y+8	; 0x08
    3a16:	52 96       	adiw	r26, 0x12	; 18
    3a18:	4d 93       	st	X+, r20
    3a1a:	5d 93       	st	X+, r21
    3a1c:	6d 93       	st	X+, r22
    3a1e:	7c 93       	st	X, r23
    3a20:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3a22:	fd 01       	movw	r30, r26
    3a24:	86 81       	ldd	r24, Z+6	; 0x06
    3a26:	97 81       	ldd	r25, Z+7	; 0x07
    3a28:	a0 85       	ldd	r26, Z+8	; 0x08
    3a2a:	b1 85       	ldd	r27, Z+9	; 0x09
    3a2c:	86 0d       	add	r24, r6
    3a2e:	97 1d       	adc	r25, r7
    3a30:	a8 1d       	adc	r26, r8
    3a32:	b9 1d       	adc	r27, r9
    3a34:	86 83       	std	Z+6, r24	; 0x06
    3a36:	97 83       	std	Z+7, r25	; 0x07
    3a38:	a0 87       	std	Z+8, r26	; 0x08
    3a3a:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3a3c:	a6 18       	sub	r10, r6
    3a3e:	b7 08       	sbc	r11, r7
    3a40:	c8 08       	sbc	r12, r8
    3a42:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3a44:	6a 14       	cp	r6, r10
    3a46:	7b 04       	cpc	r7, r11
    3a48:	8c 04       	cpc	r8, r12
    3a4a:	9d 04       	cpc	r9, r13
    3a4c:	08 f4       	brcc	.+2      	; 0x3a50 <f_lseek+0x27e>
    3a4e:	a3 cf       	rjmp	.-186    	; 0x3996 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3a50:	ef 81       	ldd	r30, Y+7	; 0x07
    3a52:	f8 85       	ldd	r31, Y+8	; 0x08
    3a54:	86 81       	ldd	r24, Z+6	; 0x06
    3a56:	97 81       	ldd	r25, Z+7	; 0x07
    3a58:	a0 85       	ldd	r26, Z+8	; 0x08
    3a5a:	b1 85       	ldd	r27, Z+9	; 0x09
    3a5c:	8a 0d       	add	r24, r10
    3a5e:	9b 1d       	adc	r25, r11
    3a60:	ac 1d       	adc	r26, r12
    3a62:	bd 1d       	adc	r27, r13
    3a64:	86 83       	std	Z+6, r24	; 0x06
    3a66:	97 83       	std	Z+7, r25	; 0x07
    3a68:	a0 87       	std	Z+8, r26	; 0x08
    3a6a:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3a6c:	d6 01       	movw	r26, r12
    3a6e:	c5 01       	movw	r24, r10
    3a70:	09 e0       	ldi	r16, 0x09	; 9
    3a72:	b6 95       	lsr	r27
    3a74:	a7 95       	ror	r26
    3a76:	97 95       	ror	r25
    3a78:	87 95       	ror	r24
    3a7a:	0a 95       	dec	r16
    3a7c:	d1 f7       	brne	.-12     	; 0x3a72 <f_lseek+0x2a0>
    3a7e:	08 2f       	mov	r16, r24
    3a80:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3a82:	8f ef       	ldi	r24, 0xFF	; 255
    3a84:	91 e0       	ldi	r25, 0x01	; 1
    3a86:	a0 e0       	ldi	r26, 0x00	; 0
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	a8 22       	and	r10, r24
    3a8c:	b9 22       	and	r11, r25
    3a8e:	ca 22       	and	r12, r26
    3a90:	db 22       	and	r13, r27
    3a92:	a1 14       	cp	r10, r1
    3a94:	b1 04       	cpc	r11, r1
    3a96:	c1 04       	cpc	r12, r1
    3a98:	d1 04       	cpc	r13, r1
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <f_lseek+0x2cc>
    3a9c:	47 c0       	rjmp	.+142    	; 0x3b2c <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3a9e:	80 80       	ld	r8, Z
    3aa0:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3aa2:	3e ef       	ldi	r19, 0xFE	; 254
    3aa4:	a3 2e       	mov	r10, r19
    3aa6:	3f ef       	ldi	r19, 0xFF	; 255
    3aa8:	b3 2e       	mov	r11, r19
    3aaa:	3f ef       	ldi	r19, 0xFF	; 255
    3aac:	c3 2e       	mov	r12, r19
    3aae:	3f ef       	ldi	r19, 0xFF	; 255
    3ab0:	d3 2e       	mov	r13, r19
    3ab2:	a4 0e       	add	r10, r20
    3ab4:	b5 1e       	adc	r11, r21
    3ab6:	c6 1e       	adc	r12, r22
    3ab8:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3aba:	f4 01       	movw	r30, r8
    3abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3abe:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ac0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3ac2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3ac4:	02 97       	sbiw	r24, 0x02	; 2
    3ac6:	a1 09       	sbc	r26, r1
    3ac8:	b1 09       	sbc	r27, r1
    3aca:	a8 16       	cp	r10, r24
    3acc:	b9 06       	cpc	r11, r25
    3ace:	ca 06       	cpc	r12, r26
    3ad0:	db 06       	cpc	r13, r27
    3ad2:	c0 f4       	brcc	.+48     	; 0x3b04 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3ad4:	22 81       	ldd	r18, Z+2	; 0x02
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	c6 01       	movw	r24, r12
    3ade:	b5 01       	movw	r22, r10
    3ae0:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    3ae4:	9b 01       	movw	r18, r22
    3ae6:	ac 01       	movw	r20, r24
    3ae8:	f4 01       	movw	r30, r8
    3aea:	86 a1       	ldd	r24, Z+38	; 0x26
    3aec:	97 a1       	ldd	r25, Z+39	; 0x27
    3aee:	a0 a5       	ldd	r26, Z+40	; 0x28
    3af0:	b1 a5       	ldd	r27, Z+41	; 0x29
    3af2:	28 0f       	add	r18, r24
    3af4:	39 1f       	adc	r19, r25
    3af6:	4a 1f       	adc	r20, r26
    3af8:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3afa:	21 15       	cp	r18, r1
    3afc:	31 05       	cpc	r19, r1
    3afe:	41 05       	cpc	r20, r1
    3b00:	51 05       	cpc	r21, r1
    3b02:	49 f4       	brne	.+18     	; 0x3b16 <f_lseek+0x344>
    3b04:	af 81       	ldd	r26, Y+7	; 0x07
    3b06:	b8 85       	ldd	r27, Y+8	; 0x08
    3b08:	14 96       	adiw	r26, 0x04	; 4
    3b0a:	8c 91       	ld	r24, X
    3b0c:	14 97       	sbiw	r26, 0x04	; 4
    3b0e:	80 68       	ori	r24, 0x80	; 128
    3b10:	14 96       	adiw	r26, 0x04	; 4
    3b12:	8c 93       	st	X, r24
    3b14:	21 cf       	rjmp	.-446    	; 0x3958 <f_lseek+0x186>
				nsect += fp->csect;
    3b16:	59 01       	movw	r10, r18
    3b18:	6a 01       	movw	r12, r20
    3b1a:	a0 0e       	add	r10, r16
    3b1c:	b1 1c       	adc	r11, r1
    3b1e:	c1 1c       	adc	r12, r1
    3b20:	d1 1c       	adc	r13, r1
				fp->csect++;
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	ef 81       	ldd	r30, Y+7	; 0x07
    3b26:	f8 85       	ldd	r31, Y+8	; 0x08
    3b28:	05 83       	std	Z+5, r16	; 0x05
    3b2a:	03 c0       	rjmp	.+6      	; 0x3b32 <f_lseek+0x360>
    3b2c:	aa 24       	eor	r10, r10
    3b2e:	bb 24       	eor	r11, r11
    3b30:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3b32:	ef 81       	ldd	r30, Y+7	; 0x07
    3b34:	f8 85       	ldd	r31, Y+8	; 0x08
    3b36:	86 81       	ldd	r24, Z+6	; 0x06
    3b38:	97 81       	ldd	r25, Z+7	; 0x07
    3b3a:	a0 85       	ldd	r26, Z+8	; 0x08
    3b3c:	b1 85       	ldd	r27, Z+9	; 0x09
    3b3e:	91 70       	andi	r25, 0x01	; 1
    3b40:	a0 70       	andi	r26, 0x00	; 0
    3b42:	b0 70       	andi	r27, 0x00	; 0
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	a1 05       	cpc	r26, r1
    3b48:	b1 05       	cpc	r27, r1
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <f_lseek+0x37c>
    3b4c:	45 c0       	rjmp	.+138    	; 0x3bd8 <f_lseek+0x406>
    3b4e:	26 89       	ldd	r18, Z+22	; 0x16
    3b50:	37 89       	ldd	r19, Z+23	; 0x17
    3b52:	40 8d       	ldd	r20, Z+24	; 0x18
    3b54:	51 8d       	ldd	r21, Z+25	; 0x19
    3b56:	a2 16       	cp	r10, r18
    3b58:	b3 06       	cpc	r11, r19
    3b5a:	c4 06       	cpc	r12, r20
    3b5c:	d5 06       	cpc	r13, r21
    3b5e:	e1 f1       	breq	.+120    	; 0x3bd8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3b60:	84 81       	ldd	r24, Z+4	; 0x04
    3b62:	86 ff       	sbrs	r24, 6
    3b64:	1a c0       	rjmp	.+52     	; 0x3b9a <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3b66:	01 90       	ld	r0, Z+
    3b68:	f0 81       	ld	r31, Z
    3b6a:	e0 2d       	mov	r30, r0
    3b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6e:	78 85       	ldd	r23, Y+8	; 0x08
    3b70:	60 5e       	subi	r22, 0xE0	; 224
    3b72:	7f 4f       	sbci	r23, 0xFF	; 255
    3b74:	81 81       	ldd	r24, Z+1	; 0x01
    3b76:	01 e0       	ldi	r16, 0x01	; 1
    3b78:	0e 94 31 06 	call	0xc62	; 0xc62 <disk_write>
    3b7c:	af 81       	ldd	r26, Y+7	; 0x07
    3b7e:	b8 85       	ldd	r27, Y+8	; 0x08
    3b80:	14 96       	adiw	r26, 0x04	; 4
    3b82:	9c 91       	ld	r25, X
    3b84:	14 97       	sbiw	r26, 0x04	; 4
    3b86:	88 23       	and	r24, r24
    3b88:	21 f0       	breq	.+8      	; 0x3b92 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3b8a:	90 68       	ori	r25, 0x80	; 128
    3b8c:	14 96       	adiw	r26, 0x04	; 4
    3b8e:	9c 93       	st	X, r25
    3b90:	19 c0       	rjmp	.+50     	; 0x3bc4 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3b92:	9f 7b       	andi	r25, 0xBF	; 191
    3b94:	ef 81       	ldd	r30, Y+7	; 0x07
    3b96:	f8 85       	ldd	r31, Y+8	; 0x08
    3b98:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3b9a:	af 81       	ldd	r26, Y+7	; 0x07
    3b9c:	b8 85       	ldd	r27, Y+8	; 0x08
    3b9e:	ed 91       	ld	r30, X+
    3ba0:	fc 91       	ld	r31, X
    3ba2:	11 97       	sbiw	r26, 0x01	; 1
    3ba4:	bd 01       	movw	r22, r26
    3ba6:	60 5e       	subi	r22, 0xE0	; 224
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    3baa:	81 81       	ldd	r24, Z+1	; 0x01
    3bac:	a6 01       	movw	r20, r12
    3bae:	95 01       	movw	r18, r10
    3bb0:	01 e0       	ldi	r16, 0x01	; 1
    3bb2:	0e 94 d1 05 	call	0xba2	; 0xba2 <disk_read>
    3bb6:	88 23       	and	r24, r24
    3bb8:	39 f0       	breq	.+14     	; 0x3bc8 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3bba:	ef 81       	ldd	r30, Y+7	; 0x07
    3bbc:	f8 85       	ldd	r31, Y+8	; 0x08
    3bbe:	84 81       	ldd	r24, Z+4	; 0x04
    3bc0:	80 68       	ori	r24, 0x80	; 128
    3bc2:	84 83       	std	Z+4, r24	; 0x04
    3bc4:	11 e0       	ldi	r17, 0x01	; 1
    3bc6:	1e c0       	rjmp	.+60     	; 0x3c04 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3bc8:	af 81       	ldd	r26, Y+7	; 0x07
    3bca:	b8 85       	ldd	r27, Y+8	; 0x08
    3bcc:	56 96       	adiw	r26, 0x16	; 22
    3bce:	ad 92       	st	X+, r10
    3bd0:	bd 92       	st	X+, r11
    3bd2:	cd 92       	st	X+, r12
    3bd4:	dc 92       	st	X, r13
    3bd6:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3bd8:	ef 81       	ldd	r30, Y+7	; 0x07
    3bda:	f8 85       	ldd	r31, Y+8	; 0x08
    3bdc:	26 81       	ldd	r18, Z+6	; 0x06
    3bde:	37 81       	ldd	r19, Z+7	; 0x07
    3be0:	40 85       	ldd	r20, Z+8	; 0x08
    3be2:	51 85       	ldd	r21, Z+9	; 0x09
    3be4:	82 85       	ldd	r24, Z+10	; 0x0a
    3be6:	93 85       	ldd	r25, Z+11	; 0x0b
    3be8:	a4 85       	ldd	r26, Z+12	; 0x0c
    3bea:	b5 85       	ldd	r27, Z+13	; 0x0d
    3bec:	82 17       	cp	r24, r18
    3bee:	93 07       	cpc	r25, r19
    3bf0:	a4 07       	cpc	r26, r20
    3bf2:	b5 07       	cpc	r27, r21
    3bf4:	38 f4       	brcc	.+14     	; 0x3c04 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3bf6:	22 87       	std	Z+10, r18	; 0x0a
    3bf8:	33 87       	std	Z+11, r19	; 0x0b
    3bfa:	44 87       	std	Z+12, r20	; 0x0c
    3bfc:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3bfe:	84 81       	ldd	r24, Z+4	; 0x04
    3c00:	80 62       	ori	r24, 0x20	; 32
    3c02:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3c04:	81 2f       	mov	r24, r17
    3c06:	28 96       	adiw	r28, 0x08	; 8
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	cf 91       	pop	r28
    3c0e:	df 91       	pop	r29
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	df 90       	pop	r13
    3c16:	cf 90       	pop	r12
    3c18:	bf 90       	pop	r11
    3c1a:	af 90       	pop	r10
    3c1c:	9f 90       	pop	r9
    3c1e:	8f 90       	pop	r8
    3c20:	7f 90       	pop	r7
    3c22:	6f 90       	pop	r6
    3c24:	5f 90       	pop	r5
    3c26:	4f 90       	pop	r4
    3c28:	3f 90       	pop	r3
    3c2a:	2f 90       	pop	r2
    3c2c:	08 95       	ret

00003c2e <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	2e 97       	sbiw	r28, 0x0e	; 14
    3c3c:	cd bf       	out	0x3d, r28	; 61
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	8c 01       	movw	r16, r24
    3c42:	6d 87       	std	Y+13, r22	; 0x0d
    3c44:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3c46:	ce 01       	movw	r24, r28
    3c48:	0d 96       	adiw	r24, 0x0d	; 13
    3c4a:	b8 01       	movw	r22, r16
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
	if (res == FR_OK) {
    3c52:	88 23       	and	r24, r24
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <f_opendir+0x2a>
    3c56:	46 c0       	rjmp	.+140    	; 0x3ce4 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3c58:	ce 01       	movw	r24, r28
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	d8 01       	movw	r26, r16
    3c5e:	54 96       	adiw	r26, 0x14	; 20
    3c60:	8d 93       	st	X+, r24
    3c62:	9c 93       	st	X, r25
    3c64:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3c66:	6d 85       	ldd	r22, Y+13	; 0x0d
    3c68:	7e 85       	ldd	r23, Y+14	; 0x0e
    3c6a:	c8 01       	movw	r24, r16
    3c6c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3c70:	88 23       	and	r24, r24
    3c72:	a9 f5       	brne	.+106    	; 0x3cde <f_opendir+0xb0>
			dir = dj->dir;
    3c74:	d8 01       	movw	r26, r16
    3c76:	52 96       	adiw	r26, 0x12	; 18
    3c78:	ed 91       	ld	r30, X+
    3c7a:	fc 91       	ld	r31, X
    3c7c:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3c7e:	30 97       	sbiw	r30, 0x00	; 0
    3c80:	f9 f0       	breq	.+62     	; 0x3cc0 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3c82:	83 85       	ldd	r24, Z+11	; 0x0b
    3c84:	84 ff       	sbrs	r24, 4
    3c86:	2d c0       	rjmp	.+90     	; 0x3ce2 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3c88:	35 89       	ldd	r19, Z+21	; 0x15
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	84 89       	ldd	r24, Z+20	; 0x14
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	28 2b       	or	r18, r24
    3c92:	39 2b       	or	r19, r25
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	a9 01       	movw	r20, r18
    3c9a:	33 27       	eor	r19, r19
    3c9c:	22 27       	eor	r18, r18
    3c9e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	62 8d       	ldd	r22, Z+26	; 0x1a
    3ca4:	70 e0       	ldi	r23, 0x00	; 0
    3ca6:	86 2b       	or	r24, r22
    3ca8:	97 2b       	or	r25, r23
    3caa:	a0 e0       	ldi	r26, 0x00	; 0
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	28 2b       	or	r18, r24
    3cb0:	39 2b       	or	r19, r25
    3cb2:	4a 2b       	or	r20, r26
    3cb4:	5b 2b       	or	r21, r27
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	26 83       	std	Z+6, r18	; 0x06
    3cba:	37 83       	std	Z+7, r19	; 0x07
    3cbc:	40 87       	std	Z+8, r20	; 0x08
    3cbe:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3cc0:	d8 01       	movw	r26, r16
    3cc2:	ed 91       	ld	r30, X+
    3cc4:	fc 91       	ld	r31, X
    3cc6:	11 97       	sbiw	r26, 0x01	; 1
    3cc8:	86 81       	ldd	r24, Z+6	; 0x06
    3cca:	97 81       	ldd	r25, Z+7	; 0x07
    3ccc:	12 96       	adiw	r26, 0x02	; 2
    3cce:	8d 93       	st	X+, r24
    3cd0:	9c 93       	st	X, r25
    3cd2:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3cd4:	c8 01       	movw	r24, r16
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3cde:	84 30       	cpi	r24, 0x04	; 4
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <f_opendir+0xb6>
    3ce2:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3ce4:	2e 96       	adiw	r28, 0x0e	; 14
    3ce6:	cd bf       	out	0x3d, r28	; 61
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	08 95       	ret

00003cf4 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3cf4:	ef 92       	push	r14
    3cf6:	ff 92       	push	r15
    3cf8:	0f 93       	push	r16
    3cfa:	1f 93       	push	r17
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	2c 97       	sbiw	r28, 0x0c	; 12
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	de bf       	out	0x3e, r29	; 62
    3d0a:	8c 01       	movw	r16, r24
    3d0c:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3d0e:	fc 01       	movw	r30, r24
    3d10:	62 81       	ldd	r22, Z+2	; 0x02
    3d12:	73 81       	ldd	r23, Z+3	; 0x03
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <validate>
	if (res == FR_OK) {
    3d1c:	88 23       	and	r24, r24
    3d1e:	59 f5       	brne	.+86     	; 0x3d76 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3d20:	ce 01       	movw	r24, r28
    3d22:	01 96       	adiw	r24, 0x01	; 1
    3d24:	f8 01       	movw	r30, r16
    3d26:	84 8b       	std	Z+20, r24	; 0x14
    3d28:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3d2a:	e1 14       	cp	r14, r1
    3d2c:	f1 04       	cpc	r15, r1
    3d2e:	31 f4       	brne	.+12     	; 0x3d3c <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3d30:	c8 01       	movw	r24, r16
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
    3d3a:	1d c0       	rjmp	.+58     	; 0x3d76 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3d3c:	c8 01       	movw	r24, r16
    3d3e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <dir_read>
			if (res == FR_NO_FILE) {
    3d42:	84 30       	cpi	r24, 0x04	; 4
    3d44:	31 f4       	brne	.+12     	; 0x3d52 <f_readdir+0x5e>
				dj->sect = 0;
    3d46:	f8 01       	movw	r30, r16
    3d48:	16 86       	std	Z+14, r1	; 0x0e
    3d4a:	17 86       	std	Z+15, r1	; 0x0f
    3d4c:	10 8a       	std	Z+16, r1	; 0x10
    3d4e:	11 8a       	std	Z+17, r1	; 0x11
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3d52:	88 23       	and	r24, r24
    3d54:	81 f4       	brne	.+32     	; 0x3d76 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3d56:	c8 01       	movw	r24, r16
    3d58:	b7 01       	movw	r22, r14
    3d5a:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3d5e:	c8 01       	movw	r24, r16
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <dir_next>
				if (res == FR_NO_FILE) {
    3d66:	84 30       	cpi	r24, 0x04	; 4
    3d68:	31 f4       	brne	.+12     	; 0x3d76 <f_readdir+0x82>
					dj->sect = 0;
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	16 86       	std	Z+14, r1	; 0x0e
    3d6e:	17 86       	std	Z+15, r1	; 0x0f
    3d70:	10 8a       	std	Z+16, r1	; 0x10
    3d72:	11 8a       	std	Z+17, r1	; 0x11
    3d74:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3d76:	2c 96       	adiw	r28, 0x0c	; 12
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	cf 91       	pop	r28
    3d7e:	df 91       	pop	r29
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	ff 90       	pop	r15
    3d86:	ef 90       	pop	r14
    3d88:	08 95       	ret

00003d8a <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3d8a:	cf 92       	push	r12
    3d8c:	df 92       	push	r13
    3d8e:	ef 92       	push	r14
    3d90:	ff 92       	push	r15
    3d92:	1f 93       	push	r17
    3d94:	df 93       	push	r29
    3d96:	cf 93       	push	r28
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	a4 97       	sbiw	r28, 0x24	; 36
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	8b a3       	std	Y+35, r24	; 0x23
    3da4:	9c a3       	std	Y+36, r25	; 0x24
    3da6:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3da8:	2d e0       	ldi	r18, 0x0D	; 13
    3daa:	e2 2e       	mov	r14, r18
    3dac:	f1 2c       	mov	r15, r1
    3dae:	ec 0e       	add	r14, r28
    3db0:	fd 1e       	adc	r15, r29
    3db2:	ce 01       	movw	r24, r28
    3db4:	83 96       	adiw	r24, 0x23	; 35
    3db6:	b7 01       	movw	r22, r14
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
    3dbe:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3dc0:	88 23       	and	r24, r24
    3dc2:	b1 f4       	brne	.+44     	; 0x3df0 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	89 a3       	std	Y+33, r24	; 0x21
    3dca:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    3dce:	7c a1       	ldd	r23, Y+36	; 0x24
    3dd0:	c7 01       	movw	r24, r14
    3dd2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
    3dd6:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3dd8:	88 23       	and	r24, r24
    3dda:	51 f4       	brne	.+20     	; 0x3df0 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3ddc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dde:	98 a1       	ldd	r25, Y+32	; 0x20
    3de0:	89 2b       	or	r24, r25
    3de2:	11 f4       	brne	.+4      	; 0x3de8 <f_stat+0x5e>
    3de4:	16 e0       	ldi	r17, 0x06	; 6
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3de8:	c7 01       	movw	r24, r14
    3dea:	b6 01       	movw	r22, r12
    3dec:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3df0:	81 2f       	mov	r24, r17
    3df2:	a4 96       	adiw	r28, 0x24	; 36
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	1f 91       	pop	r17
    3dfe:	ff 90       	pop	r15
    3e00:	ef 90       	pop	r14
    3e02:	df 90       	pop	r13
    3e04:	cf 90       	pop	r12
    3e06:	08 95       	ret

00003e08 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3e08:	2f 92       	push	r2
    3e0a:	3f 92       	push	r3
    3e0c:	4f 92       	push	r4
    3e0e:	5f 92       	push	r5
    3e10:	6f 92       	push	r6
    3e12:	7f 92       	push	r7
    3e14:	8f 92       	push	r8
    3e16:	9f 92       	push	r9
    3e18:	af 92       	push	r10
    3e1a:	bf 92       	push	r11
    3e1c:	cf 92       	push	r12
    3e1e:	df 92       	push	r13
    3e20:	ef 92       	push	r14
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	29 97       	sbiw	r28, 0x09	; 9
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	89 83       	std	Y+1, r24	; 0x01
    3e38:	9a 83       	std	Y+2, r25	; 0x02
    3e3a:	6c 83       	std	Y+4, r22	; 0x04
    3e3c:	7d 83       	std	Y+5, r23	; 0x05
    3e3e:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3e40:	ce 01       	movw	r24, r28
    3e42:	01 96       	adiw	r24, 0x01	; 1
    3e44:	ba 01       	movw	r22, r20
    3e46:	40 e0       	ldi	r20, 0x00	; 0
    3e48:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    3e4c:	88 23       	and	r24, r24
    3e4e:	09 f0       	breq	.+2      	; 0x3e52 <f_getfree+0x4a>
    3e50:	eb c0       	rjmp	.+470    	; 0x4028 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    3e52:	d2 01       	movw	r26, r4
    3e54:	ed 91       	ld	r30, X+
    3e56:	fc 91       	ld	r31, X
    3e58:	26 85       	ldd	r18, Z+14	; 0x0e
    3e5a:	37 85       	ldd	r19, Z+15	; 0x0f
    3e5c:	40 89       	ldd	r20, Z+16	; 0x10
    3e5e:	51 89       	ldd	r21, Z+17	; 0x11
    3e60:	e2 8c       	ldd	r14, Z+26	; 0x1a
    3e62:	f3 8c       	ldd	r15, Z+27	; 0x1b
    3e64:	04 8d       	ldd	r16, Z+28	; 0x1c
    3e66:	15 8d       	ldd	r17, Z+29	; 0x1d
    3e68:	d8 01       	movw	r26, r16
    3e6a:	c7 01       	movw	r24, r14
    3e6c:	02 97       	sbiw	r24, 0x02	; 2
    3e6e:	a1 09       	sbc	r26, r1
    3e70:	b1 09       	sbc	r27, r1
    3e72:	82 17       	cp	r24, r18
    3e74:	93 07       	cpc	r25, r19
    3e76:	a4 07       	cpc	r26, r20
    3e78:	b5 07       	cpc	r27, r21
    3e7a:	38 f0       	brcs	.+14     	; 0x3e8a <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    3e7c:	ec 81       	ldd	r30, Y+4	; 0x04
    3e7e:	fd 81       	ldd	r31, Y+5	; 0x05
    3e80:	20 83       	st	Z, r18
    3e82:	31 83       	std	Z+1, r19	; 0x01
    3e84:	42 83       	std	Z+2, r20	; 0x02
    3e86:	53 83       	std	Z+3, r21	; 0x03
    3e88:	ce c0       	rjmp	.+412    	; 0x4026 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    3e8a:	30 80       	ld	r3, Z
    3e8c:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    3e8e:	23 2d       	mov	r18, r3
    3e90:	21 30       	cpi	r18, 0x01	; 1
    3e92:	e1 f5       	brne	.+120    	; 0x3f0c <f_getfree+0x104>
    3e94:	aa 24       	eor	r10, r10
    3e96:	bb 24       	eor	r11, r11
    3e98:	65 01       	movw	r12, r10
    3e9a:	92 e0       	ldi	r25, 0x02	; 2
    3e9c:	e9 2e       	mov	r14, r25
    3e9e:	f1 2c       	mov	r15, r1
    3ea0:	01 2d       	mov	r16, r1
    3ea2:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    3ea4:	d2 01       	movw	r26, r4
    3ea6:	8d 91       	ld	r24, X+
    3ea8:	9c 91       	ld	r25, X
    3eaa:	b8 01       	movw	r22, r16
    3eac:	a7 01       	movw	r20, r14
    3eae:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    3eb2:	6f 3f       	cpi	r22, 0xFF	; 255
    3eb4:	bf ef       	ldi	r27, 0xFF	; 255
    3eb6:	7b 07       	cpc	r23, r27
    3eb8:	bf ef       	ldi	r27, 0xFF	; 255
    3eba:	8b 07       	cpc	r24, r27
    3ebc:	bf ef       	ldi	r27, 0xFF	; 255
    3ebe:	9b 07       	cpc	r25, r27
    3ec0:	11 f4       	brne	.+4      	; 0x3ec6 <f_getfree+0xbe>
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	b1 c0       	rjmp	.+354    	; 0x4028 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    3ec6:	61 30       	cpi	r22, 0x01	; 1
    3ec8:	71 05       	cpc	r23, r1
    3eca:	81 05       	cpc	r24, r1
    3ecc:	91 05       	cpc	r25, r1
    3ece:	11 f4       	brne	.+4      	; 0x3ed4 <f_getfree+0xcc>
    3ed0:	82 e0       	ldi	r24, 0x02	; 2
    3ed2:	aa c0       	rjmp	.+340    	; 0x4028 <f_getfree+0x220>
			if (stat == 0) n++;
    3ed4:	61 15       	cp	r22, r1
    3ed6:	71 05       	cpc	r23, r1
    3ed8:	81 05       	cpc	r24, r1
    3eda:	91 05       	cpc	r25, r1
    3edc:	29 f4       	brne	.+10     	; 0x3ee8 <f_getfree+0xe0>
    3ede:	08 94       	sec
    3ee0:	a1 1c       	adc	r10, r1
    3ee2:	b1 1c       	adc	r11, r1
    3ee4:	c1 1c       	adc	r12, r1
    3ee6:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    3ee8:	08 94       	sec
    3eea:	e1 1c       	adc	r14, r1
    3eec:	f1 1c       	adc	r15, r1
    3eee:	01 1d       	adc	r16, r1
    3ef0:	11 1d       	adc	r17, r1
    3ef2:	d2 01       	movw	r26, r4
    3ef4:	ed 91       	ld	r30, X+
    3ef6:	fc 91       	ld	r31, X
    3ef8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3efa:	93 8d       	ldd	r25, Z+27	; 0x1b
    3efc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3efe:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3f00:	e8 16       	cp	r14, r24
    3f02:	f9 06       	cpc	r15, r25
    3f04:	0a 07       	cpc	r16, r26
    3f06:	1b 07       	cpc	r17, r27
    3f08:	68 f2       	brcs	.-102    	; 0x3ea4 <f_getfree+0x9c>
    3f0a:	7b c0       	rjmp	.+246    	; 0x4002 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    3f0c:	66 8c       	ldd	r6, Z+30	; 0x1e
    3f0e:	77 8c       	ldd	r7, Z+31	; 0x1f
    3f10:	80 a0       	ldd	r8, Z+32	; 0x20
    3f12:	91 a0       	ldd	r9, Z+33	; 0x21
    3f14:	aa 24       	eor	r10, r10
    3f16:	bb 24       	eor	r11, r11
    3f18:	65 01       	movw	r12, r10
    3f1a:	60 e0       	ldi	r22, 0x00	; 0
    3f1c:	70 e0       	ldi	r23, 0x00	; 0
    3f1e:	e0 e0       	ldi	r30, 0x00	; 0
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    3f22:	61 15       	cp	r22, r1
    3f24:	71 05       	cpc	r23, r1
    3f26:	a9 f4       	brne	.+42     	; 0x3f52 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    3f28:	f2 01       	movw	r30, r4
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	b4 01       	movw	r22, r8
    3f30:	a3 01       	movw	r20, r6
    3f32:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
				if (res != FR_OK)
    3f36:	88 23       	and	r24, r24
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <f_getfree+0x134>
    3f3a:	76 c0       	rjmp	.+236    	; 0x4028 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    3f3c:	08 94       	sec
    3f3e:	61 1c       	adc	r6, r1
    3f40:	71 1c       	adc	r7, r1
    3f42:	81 1c       	adc	r8, r1
    3f44:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    3f46:	d2 01       	movw	r26, r4
    3f48:	ed 91       	ld	r30, X+
    3f4a:	fc 91       	ld	r31, X
    3f4c:	be 96       	adiw	r30, 0x2e	; 46
    3f4e:	60 e0       	ldi	r22, 0x00	; 0
    3f50:	72 e0       	ldi	r23, 0x02	; 2
    3f52:	b1 81       	ldd	r27, Z+1	; 0x01
    3f54:	b8 87       	std	Y+8, r27	; 0x08
    3f56:	20 81       	ld	r18, Z
    3f58:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    3f5a:	3b 81       	ldd	r19, Y+3	; 0x03
    3f5c:	32 30       	cpi	r19, 0x02	; 2
    3f5e:	99 f4       	brne	.+38     	; 0x3f86 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    3f60:	bf 83       	std	Y+7, r27	; 0x07
    3f62:	1e 82       	std	Y+6, r1	; 0x06
    3f64:	82 2f       	mov	r24, r18
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	ae 81       	ldd	r26, Y+6	; 0x06
    3f6a:	bf 81       	ldd	r27, Y+7	; 0x07
    3f6c:	8a 2b       	or	r24, r26
    3f6e:	9b 2b       	or	r25, r27
    3f70:	89 2b       	or	r24, r25
    3f72:	29 f4       	brne	.+10     	; 0x3f7e <f_getfree+0x176>
    3f74:	08 94       	sec
    3f76:	a1 1c       	adc	r10, r1
    3f78:	b1 1c       	adc	r11, r1
    3f7a:	c1 1c       	adc	r12, r1
    3f7c:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    3f7e:	32 96       	adiw	r30, 0x02	; 2
    3f80:	62 50       	subi	r22, 0x02	; 2
    3f82:	70 40       	sbci	r23, 0x00	; 0
    3f84:	33 c0       	rjmp	.+102    	; 0x3fec <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3f86:	23 81       	ldd	r18, Z+3	; 0x03
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	52 2f       	mov	r21, r18
    3f90:	44 27       	eor	r20, r20
    3f92:	33 27       	eor	r19, r19
    3f94:	22 27       	eor	r18, r18
    3f96:	82 81       	ldd	r24, Z+2	; 0x02
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	a0 e0       	ldi	r26, 0x00	; 0
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	99 27       	eor	r25, r25
    3fa2:	88 27       	eor	r24, r24
    3fa4:	28 2b       	or	r18, r24
    3fa6:	39 2b       	or	r19, r25
    3fa8:	4a 2b       	or	r20, r26
    3faa:	5b 2b       	or	r21, r27
    3fac:	39 84       	ldd	r3, Y+9	; 0x09
    3fae:	83 2d       	mov	r24, r3
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	a0 e0       	ldi	r26, 0x00	; 0
    3fb4:	b0 e0       	ldi	r27, 0x00	; 0
    3fb6:	28 2b       	or	r18, r24
    3fb8:	39 2b       	or	r19, r25
    3fba:	4a 2b       	or	r20, r26
    3fbc:	5b 2b       	or	r21, r27
    3fbe:	38 84       	ldd	r3, Y+8	; 0x08
    3fc0:	22 24       	eor	r2, r2
    3fc2:	c1 01       	movw	r24, r2
    3fc4:	a0 e0       	ldi	r26, 0x00	; 0
    3fc6:	b0 e0       	ldi	r27, 0x00	; 0
    3fc8:	28 2b       	or	r18, r24
    3fca:	39 2b       	or	r19, r25
    3fcc:	4a 2b       	or	r20, r26
    3fce:	5b 2b       	or	r21, r27
    3fd0:	5f 70       	andi	r21, 0x0F	; 15
    3fd2:	21 15       	cp	r18, r1
    3fd4:	31 05       	cpc	r19, r1
    3fd6:	41 05       	cpc	r20, r1
    3fd8:	51 05       	cpc	r21, r1
    3fda:	29 f4       	brne	.+10     	; 0x3fe6 <f_getfree+0x1de>
    3fdc:	08 94       	sec
    3fde:	a1 1c       	adc	r10, r1
    3fe0:	b1 1c       	adc	r11, r1
    3fe2:	c1 1c       	adc	r12, r1
    3fe4:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    3fe6:	34 96       	adiw	r30, 0x04	; 4
    3fe8:	64 50       	subi	r22, 0x04	; 4
    3fea:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    3fec:	08 94       	sec
    3fee:	e1 08       	sbc	r14, r1
    3ff0:	f1 08       	sbc	r15, r1
    3ff2:	01 09       	sbc	r16, r1
    3ff4:	11 09       	sbc	r17, r1
    3ff6:	e1 14       	cp	r14, r1
    3ff8:	f1 04       	cpc	r15, r1
    3ffa:	01 05       	cpc	r16, r1
    3ffc:	11 05       	cpc	r17, r1
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <f_getfree+0x1fa>
    4000:	90 cf       	rjmp	.-224    	; 0x3f22 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    4002:	d2 01       	movw	r26, r4
    4004:	ed 91       	ld	r30, X+
    4006:	fc 91       	ld	r31, X
    4008:	a6 86       	std	Z+14, r10	; 0x0e
    400a:	b7 86       	std	Z+15, r11	; 0x0f
    400c:	c0 8a       	std	Z+16, r12	; 0x10
    400e:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4010:	bb 81       	ldd	r27, Y+3	; 0x03
    4012:	b3 30       	cpi	r27, 0x03	; 3
    4014:	11 f4       	brne	.+4      	; 0x401a <f_getfree+0x212>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    401a:	ec 81       	ldd	r30, Y+4	; 0x04
    401c:	fd 81       	ldd	r31, Y+5	; 0x05
    401e:	a0 82       	st	Z, r10
    4020:	b1 82       	std	Z+1, r11	; 0x01
    4022:	c2 82       	std	Z+2, r12	; 0x02
    4024:	d3 82       	std	Z+3, r13	; 0x03
    4026:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4028:	29 96       	adiw	r28, 0x09	; 9
    402a:	cd bf       	out	0x3d, r28	; 61
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
    403a:	df 90       	pop	r13
    403c:	cf 90       	pop	r12
    403e:	bf 90       	pop	r11
    4040:	af 90       	pop	r10
    4042:	9f 90       	pop	r9
    4044:	8f 90       	pop	r8
    4046:	7f 90       	pop	r7
    4048:	6f 90       	pop	r6
    404a:	5f 90       	pop	r5
    404c:	4f 90       	pop	r4
    404e:	3f 90       	pop	r3
    4050:	2f 90       	pop	r2
    4052:	08 95       	ret

00004054 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    4054:	cf 92       	push	r12
    4056:	df 92       	push	r13
    4058:	ef 92       	push	r14
    405a:	ff 92       	push	r15
    405c:	0f 93       	push	r16
    405e:	1f 93       	push	r17
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4066:	6a 81       	ldd	r22, Y+2	; 0x02
    4068:	7b 81       	ldd	r23, Y+3	; 0x03
    406a:	88 81       	ld	r24, Y
    406c:	99 81       	ldd	r25, Y+1	; 0x01
    406e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <validate>
    4072:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4074:	88 23       	and	r24, r24
    4076:	09 f0       	breq	.+2      	; 0x407a <f_truncate+0x26>
    4078:	6e c0       	rjmp	.+220    	; 0x4156 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    407a:	6c 81       	ldd	r22, Y+4	; 0x04
    407c:	67 ff       	sbrs	r22, 7
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <f_truncate+0x30>
    4080:	12 e0       	ldi	r17, 0x02	; 2
    4082:	69 c0       	rjmp	.+210    	; 0x4156 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    4084:	61 fd       	sbrc	r22, 1
    4086:	02 c0       	rjmp	.+4      	; 0x408c <f_truncate+0x38>
    4088:	17 e0       	ldi	r17, 0x07	; 7
    408a:	65 c0       	rjmp	.+202    	; 0x4156 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    408c:	2e 81       	ldd	r18, Y+6	; 0x06
    408e:	3f 81       	ldd	r19, Y+7	; 0x07
    4090:	48 85       	ldd	r20, Y+8	; 0x08
    4092:	59 85       	ldd	r21, Y+9	; 0x09
    4094:	8a 85       	ldd	r24, Y+10	; 0x0a
    4096:	9b 85       	ldd	r25, Y+11	; 0x0b
    4098:	ac 85       	ldd	r26, Y+12	; 0x0c
    409a:	bd 85       	ldd	r27, Y+13	; 0x0d
    409c:	28 17       	cp	r18, r24
    409e:	39 07       	cpc	r19, r25
    40a0:	4a 07       	cpc	r20, r26
    40a2:	5b 07       	cpc	r21, r27
    40a4:	08 f0       	brcs	.+2      	; 0x40a8 <f_truncate+0x54>
    40a6:	57 c0       	rjmp	.+174    	; 0x4156 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    40a8:	2a 87       	std	Y+10, r18	; 0x0a
    40aa:	3b 87       	std	Y+11, r19	; 0x0b
    40ac:	4c 87       	std	Y+12, r20	; 0x0c
    40ae:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    40b0:	60 62       	ori	r22, 0x20	; 32
    40b2:	6c 83       	std	Y+4, r22	; 0x04
    40b4:	88 81       	ld	r24, Y
    40b6:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    40b8:	21 15       	cp	r18, r1
    40ba:	31 05       	cpc	r19, r1
    40bc:	41 05       	cpc	r20, r1
    40be:	51 05       	cpc	r21, r1
    40c0:	61 f4       	brne	.+24     	; 0x40da <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    40c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    40c4:	5f 85       	ldd	r21, Y+15	; 0x0f
    40c6:	68 89       	ldd	r22, Y+16	; 0x10
    40c8:	79 89       	ldd	r23, Y+17	; 0x11
    40ca:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <remove_chain>
    40ce:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    40d0:	1e 86       	std	Y+14, r1	; 0x0e
    40d2:	1f 86       	std	Y+15, r1	; 0x0f
    40d4:	18 8a       	std	Y+16, r1	; 0x10
    40d6:	19 8a       	std	Y+17, r1	; 0x11
    40d8:	39 c0       	rjmp	.+114    	; 0x414c <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    40da:	4a 89       	ldd	r20, Y+18	; 0x12
    40dc:	5b 89       	ldd	r21, Y+19	; 0x13
    40de:	6c 89       	ldd	r22, Y+20	; 0x14
    40e0:	7d 89       	ldd	r23, Y+21	; 0x15
    40e2:	0e 94 9d 09 	call	0x133a	; 0x133a <get_fat>
    40e6:	6b 01       	movw	r12, r22
    40e8:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    40ea:	8f ef       	ldi	r24, 0xFF	; 255
    40ec:	c8 16       	cp	r12, r24
    40ee:	8f ef       	ldi	r24, 0xFF	; 255
    40f0:	d8 06       	cpc	r13, r24
    40f2:	8f ef       	ldi	r24, 0xFF	; 255
    40f4:	e8 06       	cpc	r14, r24
    40f6:	8f ef       	ldi	r24, 0xFF	; 255
    40f8:	f8 06       	cpc	r15, r24
    40fa:	b9 f1       	breq	.+110    	; 0x416a <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	c8 16       	cp	r12, r24
    4100:	d1 04       	cpc	r13, r1
    4102:	e1 04       	cpc	r14, r1
    4104:	f1 04       	cpc	r15, r1
    4106:	11 f4       	brne	.+4      	; 0x410c <f_truncate+0xb8>
    4108:	12 e0       	ldi	r17, 0x02	; 2
    410a:	22 c0       	rjmp	.+68     	; 0x4150 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    410c:	e8 81       	ld	r30, Y
    410e:	f9 81       	ldd	r31, Y+1	; 0x01
    4110:	82 8d       	ldd	r24, Z+26	; 0x1a
    4112:	93 8d       	ldd	r25, Z+27	; 0x1b
    4114:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4116:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4118:	c8 16       	cp	r12, r24
    411a:	d9 06       	cpc	r13, r25
    411c:	ea 06       	cpc	r14, r26
    411e:	fb 06       	cpc	r15, r27
    4120:	d0 f4       	brcc	.+52     	; 0x4156 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    4122:	4a 89       	ldd	r20, Y+18	; 0x12
    4124:	5b 89       	ldd	r21, Y+19	; 0x13
    4126:	6c 89       	ldd	r22, Y+20	; 0x14
    4128:	7d 89       	ldd	r23, Y+21	; 0x15
    412a:	cf 01       	movw	r24, r30
    412c:	0f ef       	ldi	r16, 0xFF	; 255
    412e:	1f ef       	ldi	r17, 0xFF	; 255
    4130:	2f ef       	ldi	r18, 0xFF	; 255
    4132:	3f e0       	ldi	r19, 0x0F	; 15
    4134:	0e 94 87 0a 	call	0x150e	; 0x150e <put_fat>
    4138:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    413a:	88 23       	and	r24, r24
    413c:	49 f4       	brne	.+18     	; 0x4150 <f_truncate+0xfc>
    413e:	88 81       	ld	r24, Y
    4140:	99 81       	ldd	r25, Y+1	; 0x01
    4142:	b7 01       	movw	r22, r14
    4144:	a6 01       	movw	r20, r12
    4146:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <remove_chain>
    414a:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    414c:	11 23       	and	r17, r17
    414e:	19 f0       	breq	.+6      	; 0x4156 <f_truncate+0x102>
    4150:	8c 81       	ldd	r24, Y+4	; 0x04
    4152:	80 68       	ori	r24, 0x80	; 128
    4154:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    4156:	81 2f       	mov	r24, r17
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	ff 90       	pop	r15
    4162:	ef 90       	pop	r14
    4164:	df 90       	pop	r13
    4166:	cf 90       	pop	r12
    4168:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    416a:	11 e0       	ldi	r17, 0x01	; 1
    416c:	f1 cf       	rjmp	.-30     	; 0x4150 <f_truncate+0xfc>

0000416e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    416e:	cf 92       	push	r12
    4170:	df 92       	push	r13
    4172:	ef 92       	push	r14
    4174:	ff 92       	push	r15
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	df 93       	push	r29
    417c:	cf 93       	push	r28
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    4182:	ea 97       	sbiw	r28, 0x3a	; 58
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	89 af       	std	Y+57, r24	; 0x39
    418a:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    418c:	4d e0       	ldi	r20, 0x0D	; 13
    418e:	c4 2e       	mov	r12, r20
    4190:	d1 2c       	mov	r13, r1
    4192:	cc 0e       	add	r12, r28
    4194:	dd 1e       	adc	r13, r29
    4196:	ce 01       	movw	r24, r28
    4198:	c9 96       	adiw	r24, 0x39	; 57
    419a:	b6 01       	movw	r22, r12
    419c:	41 e0       	ldi	r20, 0x01	; 1
    419e:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    41a2:	88 23       	and	r24, r24
    41a4:	09 f0       	breq	.+2      	; 0x41a8 <f_unlink+0x3a>
    41a6:	71 c0       	rjmp	.+226    	; 0x428a <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    41a8:	ce 01       	movw	r24, r28
    41aa:	01 96       	adiw	r24, 0x01	; 1
    41ac:	89 a3       	std	Y+33, r24	; 0x21
    41ae:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    41b0:	69 ad       	ldd	r22, Y+57	; 0x39
    41b2:	7a ad       	ldd	r23, Y+58	; 0x3a
    41b4:	c6 01       	movw	r24, r12
    41b6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    41ba:	88 23       	and	r24, r24
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <f_unlink+0x52>
    41be:	65 c0       	rjmp	.+202    	; 0x428a <f_unlink+0x11c>

	dir = dj.dir;
    41c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    41c2:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    41c4:	30 97       	sbiw	r30, 0x00	; 0
    41c6:	11 f4       	brne	.+4      	; 0x41cc <f_unlink+0x5e>
    41c8:	86 e0       	ldi	r24, 0x06	; 6
    41ca:	5f c0       	rjmp	.+190    	; 0x428a <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    41cc:	83 85       	ldd	r24, Z+11	; 0x0b
    41ce:	48 2f       	mov	r20, r24
    41d0:	80 fd       	sbrc	r24, 0
    41d2:	5a c0       	rjmp	.+180    	; 0x4288 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    41d4:	95 89       	ldd	r25, Z+21	; 0x15
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	24 89       	ldd	r18, Z+20	; 0x14
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	82 2b       	or	r24, r18
    41de:	93 2b       	or	r25, r19
    41e0:	a0 e0       	ldi	r26, 0x00	; 0
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	8c 01       	movw	r16, r24
    41e6:	ff 24       	eor	r15, r15
    41e8:	ee 24       	eor	r14, r14
    41ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	82 2b       	or	r24, r18
    41f4:	93 2b       	or	r25, r19
    41f6:	a0 e0       	ldi	r26, 0x00	; 0
    41f8:	b0 e0       	ldi	r27, 0x00	; 0
    41fa:	e8 2a       	or	r14, r24
    41fc:	f9 2a       	or	r15, r25
    41fe:	0a 2b       	or	r16, r26
    4200:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    4202:	44 ff       	sbrs	r20, 4
    4204:	29 c0       	rjmp	.+82     	; 0x4258 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	e8 16       	cp	r14, r24
    420a:	f1 04       	cpc	r15, r1
    420c:	01 05       	cpc	r16, r1
    420e:	11 05       	cpc	r17, r1
    4210:	10 f4       	brcc	.+4      	; 0x4216 <f_unlink+0xa8>
    4212:	82 e0       	ldi	r24, 0x02	; 2
    4214:	3a c0       	rjmp	.+116    	; 0x428a <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4216:	de 01       	movw	r26, r28
    4218:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    421a:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    421c:	9d 01       	movw	r18, r26
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <f_unlink+0xb6>
    4220:	81 91       	ld	r24, Z+
    4222:	8d 93       	st	X+, r24
    4224:	e2 17       	cp	r30, r18
    4226:	f3 07       	cpc	r31, r19
    4228:	d9 f7       	brne	.-10     	; 0x4220 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    422a:	e9 a6       	std	Y+41, r14	; 0x29
    422c:	fa a6       	std	Y+42, r15	; 0x2a
    422e:	0b a7       	std	Y+43, r16	; 0x2b
    4230:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4232:	23 e2       	ldi	r18, 0x23	; 35
    4234:	c2 2e       	mov	r12, r18
    4236:	d1 2c       	mov	r13, r1
    4238:	cc 0e       	add	r12, r28
    423a:	dd 1e       	adc	r13, r29
    423c:	c6 01       	movw	r24, r12
    423e:	62 e0       	ldi	r22, 0x02	; 2
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4246:	88 23       	and	r24, r24
    4248:	01 f5       	brne	.+64     	; 0x428a <f_unlink+0x11c>
		res = dir_read(&sdj);
    424a:	c6 01       	movw	r24, r12
    424c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4250:	88 23       	and	r24, r24
    4252:	d1 f0       	breq	.+52     	; 0x4288 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    4254:	84 30       	cpi	r24, 0x04	; 4
    4256:	c9 f4       	brne	.+50     	; 0x428a <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    4258:	ce 01       	movw	r24, r28
    425a:	0d 96       	adiw	r24, 0x0d	; 13
    425c:	0e 94 2b 10 	call	0x2056	; 0x2056 <dir_remove>
	if (res == FR_OK) {
    4260:	88 23       	and	r24, r24
    4262:	99 f4       	brne	.+38     	; 0x428a <f_unlink+0x11c>
		if (dclst)
    4264:	e1 14       	cp	r14, r1
    4266:	f1 04       	cpc	r15, r1
    4268:	01 05       	cpc	r16, r1
    426a:	11 05       	cpc	r17, r1
    426c:	41 f0       	breq	.+16     	; 0x427e <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    426e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4270:	9e 85       	ldd	r25, Y+14	; 0x0e
    4272:	b8 01       	movw	r22, r16
    4274:	a7 01       	movw	r20, r14
    4276:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    427a:	88 23       	and	r24, r24
    427c:	31 f4       	brne	.+12     	; 0x428a <f_unlink+0x11c>
    427e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4280:	9e 85       	ldd	r25, Y+14	; 0x0e
    4282:	0e 94 0e 09 	call	0x121c	; 0x121c <sync>
    4286:	01 c0       	rjmp	.+2      	; 0x428a <f_unlink+0x11c>
    4288:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    428a:	ea 96       	adiw	r28, 0x3a	; 58
    428c:	cd bf       	out	0x3d, r28	; 61
    428e:	de bf       	out	0x3e, r29	; 62
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	ff 90       	pop	r15
    429a:	ef 90       	pop	r14
    429c:	df 90       	pop	r13
    429e:	cf 90       	pop	r12
    42a0:	08 95       	ret

000042a2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    42a2:	2f 92       	push	r2
    42a4:	3f 92       	push	r3
    42a6:	4f 92       	push	r4
    42a8:	5f 92       	push	r5
    42aa:	6f 92       	push	r6
    42ac:	7f 92       	push	r7
    42ae:	8f 92       	push	r8
    42b0:	9f 92       	push	r9
    42b2:	af 92       	push	r10
    42b4:	bf 92       	push	r11
    42b6:	cf 92       	push	r12
    42b8:	df 92       	push	r13
    42ba:	ef 92       	push	r14
    42bc:	ff 92       	push	r15
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	a8 97       	sbiw	r28, 0x28	; 40
    42cc:	cd bf       	out	0x3d, r28	; 61
    42ce:	de bf       	out	0x3e, r29	; 62
    42d0:	8b a3       	std	Y+35, r24	; 0x23
    42d2:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    42d4:	3d e0       	ldi	r19, 0x0D	; 13
    42d6:	e3 2e       	mov	r14, r19
    42d8:	f1 2c       	mov	r15, r1
    42da:	ec 0e       	add	r14, r28
    42dc:	fd 1e       	adc	r15, r29
    42de:	ce 01       	movw	r24, r28
    42e0:	83 96       	adiw	r24, 0x23	; 35
    42e2:	b7 01       	movw	r22, r14
    42e4:	41 e0       	ldi	r20, 0x01	; 1
    42e6:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
    42ea:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    42ec:	88 23       	and	r24, r24
    42ee:	09 f0       	breq	.+2      	; 0x42f2 <f_mkdir+0x50>
    42f0:	38 c1       	rjmp	.+624    	; 0x4562 <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    42f2:	ce 01       	movw	r24, r28
    42f4:	01 96       	adiw	r24, 0x01	; 1
    42f6:	89 a3       	std	Y+33, r24	; 0x21
    42f8:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    42fa:	6b a1       	ldd	r22, Y+35	; 0x23
    42fc:	7c a1       	ldd	r23, Y+36	; 0x24
    42fe:	c7 01       	movw	r24, r14
    4300:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
    4304:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4306:	88 23       	and	r24, r24
    4308:	11 f4       	brne	.+4      	; 0x430e <f_mkdir+0x6c>
    430a:	18 e0       	ldi	r17, 0x08	; 8
    430c:	2a c1       	rjmp	.+596    	; 0x4562 <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    430e:	84 30       	cpi	r24, 0x04	; 4
    4310:	09 f0       	breq	.+2      	; 0x4314 <f_mkdir+0x72>
    4312:	27 c1       	rjmp	.+590    	; 0x4562 <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    4314:	8d 85       	ldd	r24, Y+13	; 0x0d
    4316:	9e 85       	ldd	r25, Y+14	; 0x0e
    4318:	40 e0       	ldi	r20, 0x00	; 0
    431a:	50 e0       	ldi	r21, 0x00	; 0
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	70 e0       	ldi	r23, 0x00	; 0
    4320:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <create_chain>
    4324:	4b 01       	movw	r8, r22
    4326:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4328:	61 15       	cp	r22, r1
    432a:	71 05       	cpc	r23, r1
    432c:	81 05       	cpc	r24, r1
    432e:	91 05       	cpc	r25, r1
    4330:	11 f4       	brne	.+4      	; 0x4336 <f_mkdir+0x94>
    4332:	17 e0       	ldi	r17, 0x07	; 7
    4334:	16 c1       	rjmp	.+556    	; 0x4562 <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    4336:	61 30       	cpi	r22, 0x01	; 1
    4338:	71 05       	cpc	r23, r1
    433a:	81 05       	cpc	r24, r1
    433c:	91 05       	cpc	r25, r1
    433e:	11 f4       	brne	.+4      	; 0x4344 <f_mkdir+0xa2>
    4340:	12 e0       	ldi	r17, 0x02	; 2
    4342:	0f c1       	rjmp	.+542    	; 0x4562 <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4344:	6f 3f       	cpi	r22, 0xFF	; 255
    4346:	3f ef       	ldi	r19, 0xFF	; 255
    4348:	73 07       	cpc	r23, r19
    434a:	3f ef       	ldi	r19, 0xFF	; 255
    434c:	83 07       	cpc	r24, r19
    434e:	3f ef       	ldi	r19, 0xFF	; 255
    4350:	93 07       	cpc	r25, r19
    4352:	09 f4       	brne	.+2      	; 0x4356 <f_mkdir+0xb4>
    4354:	1d c1       	rjmp	.+570    	; 0x4590 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    4356:	8d 85       	ldd	r24, Y+13	; 0x0d
    4358:	9e 85       	ldd	r25, Y+14	; 0x0e
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	70 e0       	ldi	r23, 0x00	; 0
    4362:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    4366:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4368:	88 23       	and	r24, r24
    436a:	09 f0       	breq	.+2      	; 0x436e <f_mkdir+0xcc>
    436c:	fa c0       	rjmp	.+500    	; 0x4562 <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    436e:	0d 85       	ldd	r16, Y+13	; 0x0d
    4370:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4372:	2e ef       	ldi	r18, 0xFE	; 254
    4374:	c2 2e       	mov	r12, r18
    4376:	2f ef       	ldi	r18, 0xFF	; 255
    4378:	d2 2e       	mov	r13, r18
    437a:	2f ef       	ldi	r18, 0xFF	; 255
    437c:	e2 2e       	mov	r14, r18
    437e:	2f ef       	ldi	r18, 0xFF	; 255
    4380:	f2 2e       	mov	r15, r18
    4382:	c8 0c       	add	r12, r8
    4384:	d9 1c       	adc	r13, r9
    4386:	ea 1c       	adc	r14, r10
    4388:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    438a:	f8 01       	movw	r30, r16
    438c:	82 8d       	ldd	r24, Z+26	; 0x1a
    438e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4390:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4392:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4394:	02 97       	sbiw	r24, 0x02	; 2
    4396:	a1 09       	sbc	r26, r1
    4398:	b1 09       	sbc	r27, r1
    439a:	c8 16       	cp	r12, r24
    439c:	d9 06       	cpc	r13, r25
    439e:	ea 06       	cpc	r14, r26
    43a0:	fb 06       	cpc	r15, r27
    43a2:	20 f0       	brcs	.+8      	; 0x43ac <f_mkdir+0x10a>
    43a4:	44 24       	eor	r4, r4
    43a6:	55 24       	eor	r5, r5
    43a8:	32 01       	movw	r6, r4
    43aa:	14 c0       	rjmp	.+40     	; 0x43d4 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    43ac:	f8 01       	movw	r30, r16
    43ae:	22 81       	ldd	r18, Z+2	; 0x02
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	40 e0       	ldi	r20, 0x00	; 0
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	c7 01       	movw	r24, r14
    43b8:	b6 01       	movw	r22, r12
    43ba:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    43be:	2b 01       	movw	r4, r22
    43c0:	3c 01       	movw	r6, r24
    43c2:	f8 01       	movw	r30, r16
    43c4:	86 a1       	ldd	r24, Z+38	; 0x26
    43c6:	97 a1       	ldd	r25, Z+39	; 0x27
    43c8:	a0 a5       	ldd	r26, Z+40	; 0x28
    43ca:	b1 a5       	ldd	r27, Z+41	; 0x29
    43cc:	48 0e       	add	r4, r24
    43ce:	59 1e       	adc	r5, r25
    43d0:	6a 1e       	adc	r6, r26
    43d2:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    43d4:	9e e2       	ldi	r25, 0x2E	; 46
    43d6:	29 2e       	mov	r2, r25
    43d8:	31 2c       	mov	r3, r1
    43da:	20 0e       	add	r2, r16
    43dc:	31 1e       	adc	r3, r17
    43de:	f1 01       	movw	r30, r2
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	92 e0       	ldi	r25, 0x02	; 2
    43e4:	01 c0       	rjmp	.+2      	; 0x43e8 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    43e6:	11 92       	st	Z+, r1
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	2f ef       	ldi	r18, 0xFF	; 255
    43ec:	8f 3f       	cpi	r24, 0xFF	; 255
    43ee:	92 07       	cpc	r25, r18
    43f0:	d1 f7       	brne	.-12     	; 0x43e6 <f_mkdir+0x144>
    43f2:	f1 01       	movw	r30, r2
    43f4:	8b e0       	ldi	r24, 0x0B	; 11
    43f6:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    43f8:	20 e2       	ldi	r18, 0x20	; 32
    43fa:	01 c0       	rjmp	.+2      	; 0x43fe <f_mkdir+0x15c>
    43fc:	21 93       	st	Z+, r18
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	3f ef       	ldi	r19, 0xFF	; 255
    4402:	8f 3f       	cpi	r24, 0xFF	; 255
    4404:	93 07       	cpc	r25, r19
    4406:	d1 f7       	brne	.-12     	; 0x43fc <f_mkdir+0x15a>
    4408:	8e e2       	ldi	r24, 0x2E	; 46
    440a:	f8 01       	movw	r30, r16
    440c:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    440e:	80 e1       	ldi	r24, 0x10	; 16
    4410:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    4412:	0c 5b       	subi	r16, 0xBC	; 188
    4414:	1f 4f       	sbci	r17, 0xFF	; 255
    4416:	f8 01       	movw	r30, r16
    4418:	11 92       	st	Z+, r1
    441a:	11 92       	st	Z+, r1
    441c:	11 92       	st	Z+, r1
    441e:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4420:	88 a6       	std	Y+40, r8	; 0x28
    4422:	81 92       	st	Z+, r8
    4424:	8f 01       	movw	r16, r30
    4426:	89 2d       	mov	r24, r9
    4428:	99 27       	eor	r25, r25
    442a:	8f a3       	std	Y+39, r24	; 0x27
    442c:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    442e:	c5 01       	movw	r24, r10
    4430:	aa 27       	eor	r26, r26
    4432:	bb 27       	eor	r27, r27
    4434:	8e a3       	std	Y+38, r24	; 0x26
    4436:	07 50       	subi	r16, 0x07	; 7
    4438:	10 40       	sbci	r17, 0x00	; 0
    443a:	f8 01       	movw	r30, r16
    443c:	81 93       	st	Z+, r24
    443e:	8f 01       	movw	r16, r30
    4440:	89 2f       	mov	r24, r25
    4442:	99 27       	eor	r25, r25
    4444:	8d a3       	std	Y+37, r24	; 0x25
    4446:	80 83       	st	Z, r24
    4448:	03 54       	subi	r16, 0x43	; 67
    444a:	10 40       	sbci	r17, 0x00	; 0
    444c:	f1 01       	movw	r30, r2
    444e:	20 e2       	ldi	r18, 0x20	; 32
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	03 c0       	rjmp	.+6      	; 0x445a <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4454:	80 81       	ld	r24, Z
    4456:	80 a3       	std	Z+32, r24	; 0x20
    4458:	31 96       	adiw	r30, 0x01	; 1
    445a:	21 50       	subi	r18, 0x01	; 1
    445c:	30 40       	sbci	r19, 0x00	; 0
    445e:	8f ef       	ldi	r24, 0xFF	; 255
    4460:	2f 3f       	cpi	r18, 0xFF	; 255
    4462:	38 07       	cpc	r19, r24
    4464:	b9 f7       	brne	.-18     	; 0x4454 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    4466:	01 5b       	subi	r16, 0xB1	; 177
    4468:	1f 4f       	sbci	r17, 0xFF	; 255
    446a:	8e e2       	ldi	r24, 0x2E	; 46
    446c:	f8 01       	movw	r30, r16
    446e:	80 83       	st	Z, r24
    4470:	0f 54       	subi	r16, 0x4F	; 79
    4472:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4474:	2b 89       	ldd	r18, Y+19	; 0x13
    4476:	3c 89       	ldd	r19, Y+20	; 0x14
    4478:	4d 89       	ldd	r20, Y+21	; 0x15
    447a:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    447c:	ed 85       	ldd	r30, Y+13	; 0x0d
    447e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4480:	80 81       	ld	r24, Z
    4482:	83 30       	cpi	r24, 0x03	; 3
    4484:	69 f4       	brne	.+26     	; 0x44a0 <f_mkdir+0x1fe>
    4486:	82 a1       	ldd	r24, Z+34	; 0x22
    4488:	93 a1       	ldd	r25, Z+35	; 0x23
    448a:	a4 a1       	ldd	r26, Z+36	; 0x24
    448c:	b5 a1       	ldd	r27, Z+37	; 0x25
    448e:	28 17       	cp	r18, r24
    4490:	39 07       	cpc	r19, r25
    4492:	4a 07       	cpc	r20, r26
    4494:	5b 07       	cpc	r21, r27
    4496:	21 f4       	brne	.+8      	; 0x44a0 <f_mkdir+0x1fe>
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e0       	ldi	r20, 0x00	; 0
    449e:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    44a0:	08 59       	subi	r16, 0x98	; 152
    44a2:	1f 4f       	sbci	r17, 0xFF	; 255
    44a4:	f8 01       	movw	r30, r16
    44a6:	21 93       	st	Z+, r18
    44a8:	8f 01       	movw	r16, r30
    44aa:	83 2f       	mov	r24, r19
    44ac:	99 27       	eor	r25, r25
    44ae:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    44b0:	ca 01       	movw	r24, r20
    44b2:	aa 27       	eor	r26, r26
    44b4:	bb 27       	eor	r27, r27
    44b6:	07 50       	subi	r16, 0x07	; 7
    44b8:	10 40       	sbci	r17, 0x00	; 0
    44ba:	f8 01       	movw	r30, r16
    44bc:	81 93       	st	Z+, r24
    44be:	89 2f       	mov	r24, r25
    44c0:	99 27       	eor	r25, r25
    44c2:	80 83       	st	Z, r24
    44c4:	73 01       	movw	r14, r6
    44c6:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    44c8:	01 e0       	ldi	r16, 0x01	; 1
    44ca:	1e c0       	rjmp	.+60     	; 0x4508 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    44cc:	c2 a6       	std	Z+42, r12	; 0x2a
    44ce:	d3 a6       	std	Z+43, r13	; 0x2b
    44d0:	e4 a6       	std	Z+44, r14	; 0x2c
    44d2:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    44d4:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    44d6:	cf 01       	movw	r24, r30
    44d8:	40 e0       	ldi	r20, 0x00	; 0
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
    44e4:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    44e6:	88 23       	and	r24, r24
    44e8:	e1 f5       	brne	.+120    	; 0x4562 <f_mkdir+0x2c0>
    44ea:	f1 01       	movw	r30, r2
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	92 e0       	ldi	r25, 0x02	; 2
    44f0:	01 c0       	rjmp	.+2      	; 0x44f4 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    44f2:	11 92       	st	Z+, r1
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	2f ef       	ldi	r18, 0xFF	; 255
    44f8:	8f 3f       	cpi	r24, 0xFF	; 255
    44fa:	92 07       	cpc	r25, r18
    44fc:	d1 f7       	brne	.-12     	; 0x44f2 <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    44fe:	08 94       	sec
    4500:	c1 1c       	adc	r12, r1
    4502:	d1 1c       	adc	r13, r1
    4504:	e1 1c       	adc	r14, r1
    4506:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4508:	ed 85       	ldd	r30, Y+13	; 0x0d
    450a:	fe 85       	ldd	r31, Y+14	; 0x0e
    450c:	9c 2d       	mov	r25, r12
    450e:	94 19       	sub	r25, r4
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	98 17       	cp	r25, r24
    4514:	d8 f2       	brcs	.-74     	; 0x44cc <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    4516:	ce 01       	movw	r24, r28
    4518:	0d 96       	adiw	r24, 0x0d	; 13
    451a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <dir_register>
    451e:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4520:	88 23       	and	r24, r24
    4522:	39 f0       	breq	.+14     	; 0x4532 <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4524:	8d 85       	ldd	r24, Y+13	; 0x0d
    4526:	9e 85       	ldd	r25, Y+14	; 0x0e
    4528:	b5 01       	movw	r22, r10
    452a:	a4 01       	movw	r20, r8
    452c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <remove_chain>
    4530:	18 c0       	rjmp	.+48     	; 0x4562 <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    4532:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4534:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    4536:	80 e1       	ldi	r24, 0x10	; 16
    4538:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    453a:	16 8a       	std	Z+22, r1	; 0x16
    453c:	17 8a       	std	Z+23, r1	; 0x17
    453e:	10 8e       	std	Z+24, r1	; 0x18
    4540:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    4542:	38 a5       	ldd	r19, Y+40	; 0x28
    4544:	32 8f       	std	Z+26, r19	; 0x1a
    4546:	8f a1       	ldd	r24, Y+39	; 0x27
    4548:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    454a:	2e a1       	ldd	r18, Y+38	; 0x26
    454c:	24 8b       	std	Z+20, r18	; 0x14
    454e:	3d a1       	ldd	r19, Y+37	; 0x25
    4550:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    4552:	ed 85       	ldd	r30, Y+13	; 0x0d
    4554:	fe 85       	ldd	r31, Y+14	; 0x0e
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    455a:	cf 01       	movw	r24, r30
    455c:	0e 94 0e 09 	call	0x121c	; 0x121c <sync>
    4560:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    4562:	81 2f       	mov	r24, r17
    4564:	a8 96       	adiw	r28, 0x28	; 40
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	cf 91       	pop	r28
    456c:	df 91       	pop	r29
    456e:	1f 91       	pop	r17
    4570:	0f 91       	pop	r16
    4572:	ff 90       	pop	r15
    4574:	ef 90       	pop	r14
    4576:	df 90       	pop	r13
    4578:	cf 90       	pop	r12
    457a:	bf 90       	pop	r11
    457c:	af 90       	pop	r10
    457e:	9f 90       	pop	r9
    4580:	8f 90       	pop	r8
    4582:	7f 90       	pop	r7
    4584:	6f 90       	pop	r6
    4586:	5f 90       	pop	r5
    4588:	4f 90       	pop	r4
    458a:	3f 90       	pop	r3
    458c:	2f 90       	pop	r2
    458e:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    4590:	11 e0       	ldi	r17, 0x01	; 1
    4592:	e7 cf       	rjmp	.-50     	; 0x4562 <f_mkdir+0x2c0>

00004594 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4594:	ef 92       	push	r14
    4596:	ff 92       	push	r15
    4598:	0f 93       	push	r16
    459a:	1f 93       	push	r17
    459c:	df 93       	push	r29
    459e:	cf 93       	push	r28
    45a0:	cd b7       	in	r28, 0x3d	; 61
    45a2:	de b7       	in	r29, 0x3e	; 62
    45a4:	a4 97       	sbiw	r28, 0x24	; 36
    45a6:	cd bf       	out	0x3d, r28	; 61
    45a8:	de bf       	out	0x3e, r29	; 62
    45aa:	8b a3       	std	Y+35, r24	; 0x23
    45ac:	9c a3       	std	Y+36, r25	; 0x24
    45ae:	e6 2e       	mov	r14, r22
    45b0:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    45b2:	8e 01       	movw	r16, r28
    45b4:	03 5f       	subi	r16, 0xF3	; 243
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	ce 01       	movw	r24, r28
    45ba:	83 96       	adiw	r24, 0x23	; 35
    45bc:	b8 01       	movw	r22, r16
    45be:	41 e0       	ldi	r20, 0x01	; 1
    45c0:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
	if (res == FR_OK) {
    45c4:	88 23       	and	r24, r24
    45c6:	09 f5       	brne	.+66     	; 0x460a <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    45c8:	ce 01       	movw	r24, r28
    45ca:	01 96       	adiw	r24, 0x01	; 1
    45cc:	89 a3       	std	Y+33, r24	; 0x21
    45ce:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    45d0:	6b a1       	ldd	r22, Y+35	; 0x23
    45d2:	7c a1       	ldd	r23, Y+36	; 0x24
    45d4:	c8 01       	movw	r24, r16
    45d6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    45da:	88 23       	and	r24, r24
    45dc:	b1 f4       	brne	.+44     	; 0x460a <f_chmod+0x76>
			dir = dj.dir;
    45de:	ef 8d       	ldd	r30, Y+31	; 0x1f
    45e0:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    45e2:	30 97       	sbiw	r30, 0x00	; 0
    45e4:	11 f4       	brne	.+4      	; 0x45ea <f_chmod+0x56>
    45e6:	86 e0       	ldi	r24, 0x06	; 6
    45e8:	10 c0       	rjmp	.+32     	; 0x460a <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    45ea:	9f 2d       	mov	r25, r15
    45ec:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    45ee:	89 2f       	mov	r24, r25
    45f0:	80 95       	com	r24
    45f2:	23 85       	ldd	r18, Z+11	; 0x0b
    45f4:	82 23       	and	r24, r18
    45f6:	9e 21       	and	r25, r14
    45f8:	89 2b       	or	r24, r25
    45fa:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    45fc:	ed 85       	ldd	r30, Y+13	; 0x0d
    45fe:	fe 85       	ldd	r31, Y+14	; 0x0e
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4604:	cf 01       	movw	r24, r30
    4606:	0e 94 0e 09 	call	0x121c	; 0x121c <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    460a:	a4 96       	adiw	r28, 0x24	; 36
    460c:	cd bf       	out	0x3d, r28	; 61
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	cf 91       	pop	r28
    4612:	df 91       	pop	r29
    4614:	1f 91       	pop	r17
    4616:	0f 91       	pop	r16
    4618:	ff 90       	pop	r15
    461a:	ef 90       	pop	r14
    461c:	08 95       	ret

0000461e <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    461e:	ef 92       	push	r14
    4620:	ff 92       	push	r15
    4622:	0f 93       	push	r16
    4624:	1f 93       	push	r17
    4626:	df 93       	push	r29
    4628:	cf 93       	push	r28
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    462e:	a4 97       	sbiw	r28, 0x24	; 36
    4630:	cd bf       	out	0x3d, r28	; 61
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	8b a3       	std	Y+35, r24	; 0x23
    4636:	9c a3       	std	Y+36, r25	; 0x24
    4638:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    463a:	4d e0       	ldi	r20, 0x0D	; 13
    463c:	e4 2e       	mov	r14, r20
    463e:	f1 2c       	mov	r15, r1
    4640:	ec 0e       	add	r14, r28
    4642:	fd 1e       	adc	r15, r29
    4644:	ce 01       	movw	r24, r28
    4646:	83 96       	adiw	r24, 0x23	; 35
    4648:	b7 01       	movw	r22, r14
    464a:	41 e0       	ldi	r20, 0x01	; 1
    464c:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
	if (res == FR_OK) {
    4650:	88 23       	and	r24, r24
    4652:	41 f5       	brne	.+80     	; 0x46a4 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    4654:	ce 01       	movw	r24, r28
    4656:	01 96       	adiw	r24, 0x01	; 1
    4658:	89 a3       	std	Y+33, r24	; 0x21
    465a:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    465c:	6b a1       	ldd	r22, Y+35	; 0x23
    465e:	7c a1       	ldd	r23, Y+36	; 0x24
    4660:	c7 01       	movw	r24, r14
    4662:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4666:	88 23       	and	r24, r24
    4668:	e9 f4       	brne	.+58     	; 0x46a4 <f_utime+0x86>
			dir = dj.dir;
    466a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    466c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    466e:	30 97       	sbiw	r30, 0x00	; 0
    4670:	11 f4       	brne	.+4      	; 0x4676 <f_utime+0x58>
    4672:	86 e0       	ldi	r24, 0x06	; 6
    4674:	17 c0       	rjmp	.+46     	; 0x46a4 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4676:	d8 01       	movw	r26, r16
    4678:	16 96       	adiw	r26, 0x06	; 6
    467a:	8c 91       	ld	r24, X
    467c:	16 97       	sbiw	r26, 0x06	; 6
    467e:	86 8b       	std	Z+22, r24	; 0x16
    4680:	17 96       	adiw	r26, 0x07	; 7
    4682:	8c 91       	ld	r24, X
    4684:	17 97       	sbiw	r26, 0x07	; 7
    4686:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4688:	14 96       	adiw	r26, 0x04	; 4
    468a:	8c 91       	ld	r24, X
    468c:	14 97       	sbiw	r26, 0x04	; 4
    468e:	80 8f       	std	Z+24, r24	; 0x18
    4690:	15 96       	adiw	r26, 0x05	; 5
    4692:	8c 91       	ld	r24, X
    4694:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    4696:	ed 85       	ldd	r30, Y+13	; 0x0d
    4698:	fe 85       	ldd	r31, Y+14	; 0x0e
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    469e:	cf 01       	movw	r24, r30
    46a0:	0e 94 0e 09 	call	0x121c	; 0x121c <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    46a4:	a4 96       	adiw	r28, 0x24	; 36
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	de bf       	out	0x3e, r29	; 62
    46aa:	cf 91       	pop	r28
    46ac:	df 91       	pop	r29
    46ae:	1f 91       	pop	r17
    46b0:	0f 91       	pop	r16
    46b2:	ff 90       	pop	r15
    46b4:	ef 90       	pop	r14
    46b6:	08 95       	ret

000046b8 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    46b8:	cf 92       	push	r12
    46ba:	df 92       	push	r13
    46bc:	ef 92       	push	r14
    46be:	ff 92       	push	r15
    46c0:	0f 93       	push	r16
    46c2:	1f 93       	push	r17
    46c4:	df 93       	push	r29
    46c6:	cf 93       	push	r28
    46c8:	cd b7       	in	r28, 0x3d	; 61
    46ca:	de b7       	in	r29, 0x3e	; 62
    46cc:	cf 54       	subi	r28, 0x4F	; 79
    46ce:	d0 40       	sbci	r29, 0x00	; 0
    46d0:	cd bf       	out	0x3d, r28	; 61
    46d2:	de bf       	out	0x3e, r29	; 62
    46d4:	8e 01       	movw	r16, r28
    46d6:	02 5b       	subi	r16, 0xB2	; 178
    46d8:	1f 4f       	sbci	r17, 0xFF	; 255
    46da:	d8 01       	movw	r26, r16
    46dc:	8d 93       	st	X+, r24
    46de:	9c 93       	st	X, r25
    46e0:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    46e2:	ce 01       	movw	r24, r28
    46e4:	01 96       	adiw	r24, 0x01	; 1
    46e6:	8e ab       	std	Y+54, r24	; 0x36
    46e8:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    46ea:	a2 e2       	ldi	r26, 0x22	; 34
    46ec:	ea 2e       	mov	r14, r26
    46ee:	f1 2c       	mov	r15, r1
    46f0:	ec 0e       	add	r14, r28
    46f2:	fd 1e       	adc	r15, r29
    46f4:	c8 01       	movw	r24, r16
    46f6:	b7 01       	movw	r22, r14
    46f8:	41 e0       	ldi	r20, 0x01	; 1
    46fa:	0e 94 b1 12 	call	0x2562	; 0x2562 <chk_mounted>
	if (res == FR_OK) {
    46fe:	88 23       	and	r24, r24
    4700:	09 f0       	breq	.+2      	; 0x4704 <f_rename+0x4c>
    4702:	f4 c0       	rjmp	.+488    	; 0x48ec <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4704:	8a a1       	ldd	r24, Y+34	; 0x22
    4706:	9b a1       	ldd	r25, Y+35	; 0x23
    4708:	88 af       	std	Y+56, r24	; 0x38
    470a:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    470c:	f8 01       	movw	r30, r16
    470e:	60 81       	ld	r22, Z
    4710:	71 81       	ldd	r23, Z+1	; 0x01
    4712:	c7 01       	movw	r24, r14
    4714:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4718:	88 23       	and	r24, r24
    471a:	09 f0       	breq	.+2      	; 0x471e <f_rename+0x66>
    471c:	e7 c0       	rjmp	.+462    	; 0x48ec <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    471e:	8c a9       	ldd	r24, Y+52	; 0x34
    4720:	9d a9       	ldd	r25, Y+53	; 0x35
    4722:	00 97       	sbiw	r24, 0x00	; 0
    4724:	11 f4       	brne	.+4      	; 0x472a <f_rename+0x72>
    4726:	84 e0       	ldi	r24, 0x04	; 4
    4728:	e1 c0       	rjmp	.+450    	; 0x48ec <f_rename+0x234>
    472a:	dc 01       	movw	r26, r24
    472c:	fe 01       	movw	r30, r28
    472e:	3d 96       	adiw	r30, 0x0d	; 13
    4730:	04 c0       	rjmp	.+8      	; 0x473a <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4732:	1a 96       	adiw	r26, 0x0a	; 10
    4734:	8c 91       	ld	r24, X
    4736:	1a 97       	sbiw	r26, 0x0a	; 10
    4738:	81 93       	st	Z+, r24
    473a:	11 96       	adiw	r26, 0x01	; 1
    473c:	ee 15       	cp	r30, r14
    473e:	ff 05       	cpc	r31, r15
    4740:	c1 f7       	brne	.-16     	; 0x4732 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4742:	de 01       	movw	r26, r28
    4744:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    4746:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4748:	9d 01       	movw	r18, r26
    474a:	02 c0       	rjmp	.+4      	; 0x4750 <f_rename+0x98>
    474c:	81 91       	ld	r24, Z+
    474e:	8d 93       	st	X+, r24
    4750:	e2 17       	cp	r30, r18
    4752:	f3 07       	cpc	r31, r19
    4754:	d9 f7       	brne	.-10     	; 0x474c <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    4756:	8e 01       	movw	r16, r28
    4758:	08 5c       	subi	r16, 0xC8	; 200
    475a:	1f 4f       	sbci	r17, 0xFF	; 255
    475c:	c8 01       	movw	r24, r16
    475e:	b6 01       	movw	r22, r12
    4760:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    4764:	88 23       	and	r24, r24
    4766:	11 f4       	brne	.+4      	; 0x476c <f_rename+0xb4>
    4768:	88 e0       	ldi	r24, 0x08	; 8
    476a:	c0 c0       	rjmp	.+384    	; 0x48ec <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    476c:	84 30       	cpi	r24, 0x04	; 4
    476e:	09 f0       	breq	.+2      	; 0x4772 <f_rename+0xba>
    4770:	bd c0       	rjmp	.+378    	; 0x48ec <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    4772:	c8 01       	movw	r24, r16
    4774:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <dir_register>
		if (res == FR_OK) {
    4778:	88 23       	and	r24, r24
    477a:	09 f0       	breq	.+2      	; 0x477e <f_rename+0xc6>
    477c:	b7 c0       	rjmp	.+366    	; 0x48ec <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    477e:	fe 01       	movw	r30, r28
    4780:	e6 5b       	subi	r30, 0xB6	; 182
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	40 81       	ld	r20, Z
    4786:	51 81       	ldd	r21, Z+1	; 0x01
    4788:	da 01       	movw	r26, r20
    478a:	fe 01       	movw	r30, r28
    478c:	3f 96       	adiw	r30, 0x0f	; 15
    478e:	04 c0       	rjmp	.+8      	; 0x4798 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4790:	81 91       	ld	r24, Z+
    4792:	1c 96       	adiw	r26, 0x0c	; 12
    4794:	8c 93       	st	X, r24
    4796:	1c 97       	sbiw	r26, 0x0c	; 12
    4798:	11 96       	adiw	r26, 0x01	; 1
    479a:	ee 15       	cp	r30, r14
    479c:	ff 05       	cpc	r31, r15
    479e:	c1 f7       	brne	.-16     	; 0x4790 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    47a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a2:	80 62       	ori	r24, 0x20	; 32
    47a4:	da 01       	movw	r26, r20
    47a6:	1b 96       	adiw	r26, 0x0b	; 11
    47a8:	8c 93       	st	X, r24
    47aa:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    47ac:	ea a1       	ldd	r30, Y+34	; 0x22
    47ae:	fb a1       	ldd	r31, Y+35	; 0x23
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    47b4:	1b 96       	adiw	r26, 0x0b	; 11
    47b6:	8c 91       	ld	r24, X
    47b8:	1b 97       	sbiw	r26, 0x0b	; 11
    47ba:	84 ff       	sbrs	r24, 4
    47bc:	8b c0       	rjmp	.+278    	; 0x48d4 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    47be:	c8 ac       	ldd	r12, Y+56	; 0x38
    47c0:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    47c2:	5a 96       	adiw	r26, 0x1a	; 26
    47c4:	2c 91       	ld	r18, X
    47c6:	5a 97       	sbiw	r26, 0x1a	; 26
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	54 96       	adiw	r26, 0x14	; 20
    47cc:	8c 91       	ld	r24, X
    47ce:	54 97       	sbiw	r26, 0x14	; 20
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	28 2b       	or	r18, r24
    47d4:	39 2b       	or	r19, r25
    47d6:	55 96       	adiw	r26, 0x15	; 21
    47d8:	9c 91       	ld	r25, X
    47da:	55 97       	sbiw	r26, 0x15	; 21
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	28 2b       	or	r18, r24
    47e0:	39 2b       	or	r19, r25
    47e2:	5b 96       	adiw	r26, 0x1b	; 27
    47e4:	9c 91       	ld	r25, X
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	28 2b       	or	r18, r24
    47ea:	39 2b       	or	r19, r25
    47ec:	79 01       	movw	r14, r18
    47ee:	00 e0       	ldi	r16, 0x00	; 0
    47f0:	10 e0       	ldi	r17, 0x00	; 0
    47f2:	8e ef       	ldi	r24, 0xFE	; 254
    47f4:	9f ef       	ldi	r25, 0xFF	; 255
    47f6:	af ef       	ldi	r26, 0xFF	; 255
    47f8:	bf ef       	ldi	r27, 0xFF	; 255
    47fa:	e8 0e       	add	r14, r24
    47fc:	f9 1e       	adc	r15, r25
    47fe:	0a 1f       	adc	r16, r26
    4800:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4802:	f6 01       	movw	r30, r12
    4804:	82 8d       	ldd	r24, Z+26	; 0x1a
    4806:	93 8d       	ldd	r25, Z+27	; 0x1b
    4808:	a4 8d       	ldd	r26, Z+28	; 0x1c
    480a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    480c:	02 97       	sbiw	r24, 0x02	; 2
    480e:	a1 09       	sbc	r26, r1
    4810:	b1 09       	sbc	r27, r1
    4812:	e8 16       	cp	r14, r24
    4814:	f9 06       	cpc	r15, r25
    4816:	0a 07       	cpc	r16, r26
    4818:	1b 07       	cpc	r17, r27
    481a:	08 f0       	brcs	.+2      	; 0x481e <f_rename+0x166>
    481c:	66 c0       	rjmp	.+204    	; 0x48ea <f_rename+0x232>
	return clst * fs->csize + fs->database;
    481e:	22 81       	ldd	r18, Z+2	; 0x02
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	40 e0       	ldi	r20, 0x00	; 0
    4824:	50 e0       	ldi	r21, 0x00	; 0
    4826:	c8 01       	movw	r24, r16
    4828:	b7 01       	movw	r22, r14
    482a:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    482e:	ab 01       	movw	r20, r22
    4830:	bc 01       	movw	r22, r24
    4832:	f6 01       	movw	r30, r12
    4834:	86 a1       	ldd	r24, Z+38	; 0x26
    4836:	97 a1       	ldd	r25, Z+39	; 0x27
    4838:	a0 a5       	ldd	r26, Z+40	; 0x28
    483a:	b1 a5       	ldd	r27, Z+41	; 0x29
    483c:	48 0f       	add	r20, r24
    483e:	59 1f       	adc	r21, r25
    4840:	6a 1f       	adc	r22, r26
    4842:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4844:	41 15       	cp	r20, r1
    4846:	51 05       	cpc	r21, r1
    4848:	61 05       	cpc	r22, r1
    484a:	71 05       	cpc	r23, r1
    484c:	09 f4       	brne	.+2      	; 0x4850 <f_rename+0x198>
    484e:	4d c0       	rjmp	.+154    	; 0x48ea <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4850:	c6 01       	movw	r24, r12
    4852:	0e 94 95 08 	call	0x112a	; 0x112a <move_window>
					dir = dj_new.fs->win+32;
    4856:	a8 ad       	ldd	r26, Y+56	; 0x38
    4858:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    485a:	88 23       	and	r24, r24
    485c:	09 f0       	breq	.+2      	; 0x4860 <f_rename+0x1a8>
    485e:	46 c0       	rjmp	.+140    	; 0x48ec <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4860:	bd 01       	movw	r22, r26
    4862:	62 5b       	subi	r22, 0xB2	; 178
    4864:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4866:	fb 01       	movw	r30, r22
    4868:	81 81       	ldd	r24, Z+1	; 0x01
    486a:	8e 32       	cpi	r24, 0x2E	; 46
    486c:	99 f5       	brne	.+102    	; 0x48d4 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    486e:	8c 91       	ld	r24, X
    4870:	83 30       	cpi	r24, 0x03	; 3
    4872:	b1 f4       	brne	.+44     	; 0x48a0 <f_rename+0x1e8>
    4874:	fe 01       	movw	r30, r28
    4876:	fe 96       	adiw	r30, 0x3e	; 62
    4878:	20 81       	ld	r18, Z
    487a:	31 81       	ldd	r19, Z+1	; 0x01
    487c:	42 81       	ldd	r20, Z+2	; 0x02
    487e:	53 81       	ldd	r21, Z+3	; 0x03
    4880:	92 96       	adiw	r26, 0x22	; 34
    4882:	8d 91       	ld	r24, X+
    4884:	9d 91       	ld	r25, X+
    4886:	0d 90       	ld	r0, X+
    4888:	bc 91       	ld	r27, X
    488a:	a0 2d       	mov	r26, r0
    488c:	28 17       	cp	r18, r24
    488e:	39 07       	cpc	r19, r25
    4890:	4a 07       	cpc	r20, r26
    4892:	5b 07       	cpc	r21, r27
    4894:	29 f4       	brne	.+10     	; 0x48a0 <f_rename+0x1e8>
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	40 e0       	ldi	r20, 0x00	; 0
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	06 c0       	rjmp	.+12     	; 0x48ac <f_rename+0x1f4>
    48a0:	fe 01       	movw	r30, r28
    48a2:	fe 96       	adiw	r30, 0x3e	; 62
    48a4:	20 81       	ld	r18, Z
    48a6:	31 81       	ldd	r19, Z+1	; 0x01
    48a8:	42 81       	ldd	r20, Z+2	; 0x02
    48aa:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    48ac:	db 01       	movw	r26, r22
    48ae:	5a 96       	adiw	r26, 0x1a	; 26
    48b0:	2c 93       	st	X, r18
    48b2:	5a 97       	sbiw	r26, 0x1a	; 26
    48b4:	83 2f       	mov	r24, r19
    48b6:	99 27       	eor	r25, r25
    48b8:	5b 96       	adiw	r26, 0x1b	; 27
    48ba:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    48bc:	ca 01       	movw	r24, r20
    48be:	aa 27       	eor	r26, r26
    48c0:	bb 27       	eor	r27, r27
    48c2:	fb 01       	movw	r30, r22
    48c4:	84 8b       	std	Z+20, r24	; 0x14
    48c6:	89 2f       	mov	r24, r25
    48c8:	99 27       	eor	r25, r25
    48ca:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    48cc:	e8 ad       	ldd	r30, Y+56	; 0x38
    48ce:	f9 ad       	ldd	r31, Y+57	; 0x39
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    48d4:	ce 01       	movw	r24, r28
    48d6:	82 96       	adiw	r24, 0x22	; 34
    48d8:	0e 94 2b 10 	call	0x2056	; 0x2056 <dir_remove>
				if (res == FR_OK)
    48dc:	88 23       	and	r24, r24
    48de:	31 f4       	brne	.+12     	; 0x48ec <f_rename+0x234>
					res = sync(dj_old.fs);
    48e0:	8a a1       	ldd	r24, Y+34	; 0x22
    48e2:	9b a1       	ldd	r25, Y+35	; 0x23
    48e4:	0e 94 0e 09 	call	0x121c	; 0x121c <sync>
    48e8:	01 c0       	rjmp	.+2      	; 0x48ec <f_rename+0x234>
    48ea:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    48ec:	c1 5b       	subi	r28, 0xB1	; 177
    48ee:	df 4f       	sbci	r29, 0xFF	; 255
    48f0:	cd bf       	out	0x3d, r28	; 61
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	cf 91       	pop	r28
    48f6:	df 91       	pop	r29
    48f8:	1f 91       	pop	r17
    48fa:	0f 91       	pop	r16
    48fc:	ff 90       	pop	r15
    48fe:	ef 90       	pop	r14
    4900:	df 90       	pop	r13
    4902:	cf 90       	pop	r12
    4904:	08 95       	ret

00004906 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    4906:	6f 92       	push	r6
    4908:	7f 92       	push	r7
    490a:	8f 92       	push	r8
    490c:	9f 92       	push	r9
    490e:	af 92       	push	r10
    4910:	bf 92       	push	r11
    4912:	cf 92       	push	r12
    4914:	df 92       	push	r13
    4916:	ef 92       	push	r14
    4918:	ff 92       	push	r15
    491a:	0f 93       	push	r16
    491c:	1f 93       	push	r17
    491e:	df 93       	push	r29
    4920:	cf 93       	push	r28
    4922:	0f 92       	push	r0
    4924:	0f 92       	push	r0
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	5c 01       	movw	r10, r24
    492c:	6b 01       	movw	r12, r22
    492e:	4a 01       	movw	r8, r20
    4930:	8c 01       	movw	r16, r24
    4932:	ee 24       	eor	r14, r14
    4934:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    4936:	08 94       	sec
    4938:	c1 08       	sbc	r12, r1
    493a:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    493c:	3e 01       	movw	r6, r28
    493e:	08 94       	sec
    4940:	61 1c       	adc	r6, r1
    4942:	71 1c       	adc	r7, r1
    4944:	13 c0       	rjmp	.+38     	; 0x496c <f_gets+0x66>
    4946:	c4 01       	movw	r24, r8
    4948:	b8 01       	movw	r22, r16
    494a:	41 e0       	ldi	r20, 0x01	; 1
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	93 01       	movw	r18, r6
    4950:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    4954:	89 81       	ldd	r24, Y+1	; 0x01
    4956:	9a 81       	ldd	r25, Y+2	; 0x02
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	59 f4       	brne	.+22     	; 0x4972 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    495c:	08 94       	sec
    495e:	e1 1c       	adc	r14, r1
    4960:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    4962:	f8 01       	movw	r30, r16
    4964:	81 91       	ld	r24, Z+
    4966:	8f 01       	movw	r16, r30
    4968:	8a 30       	cpi	r24, 0x0A	; 10
    496a:	19 f0       	breq	.+6      	; 0x4972 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    496c:	ec 14       	cp	r14, r12
    496e:	fd 04       	cpc	r15, r13
    4970:	54 f3       	brlt	.-44     	; 0x4946 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    4972:	f8 01       	movw	r30, r16
    4974:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    4976:	ef 28       	or	r14, r15
    4978:	11 f4       	brne	.+4      	; 0x497e <f_gets+0x78>
    497a:	aa 24       	eor	r10, r10
    497c:	bb 24       	eor	r11, r11
}
    497e:	c5 01       	movw	r24, r10
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	cf 91       	pop	r28
    4986:	df 91       	pop	r29
    4988:	1f 91       	pop	r17
    498a:	0f 91       	pop	r16
    498c:	ff 90       	pop	r15
    498e:	ef 90       	pop	r14
    4990:	df 90       	pop	r13
    4992:	cf 90       	pop	r12
    4994:	bf 90       	pop	r11
    4996:	af 90       	pop	r10
    4998:	9f 90       	pop	r9
    499a:	8f 90       	pop	r8
    499c:	7f 90       	pop	r7
    499e:	6f 90       	pop	r6
    49a0:	08 95       	ret

000049a2 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	df 93       	push	r29
    49a8:	cf 93       	push	r28
    49aa:	00 d0       	rcall	.+0      	; 0x49ac <f_putc+0xa>
    49ac:	cd b7       	in	r28, 0x3d	; 61
    49ae:	de b7       	in	r29, 0x3e	; 62
    49b0:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    49b2:	61 15       	cp	r22, r1
    49b4:	71 05       	cpc	r23, r1
    49b6:	91 f0       	breq	.+36     	; 0x49dc <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    49b8:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    49ba:	cb 01       	movw	r24, r22
    49bc:	be 01       	movw	r22, r28
    49be:	6f 5f       	subi	r22, 0xFF	; 255
    49c0:	7f 4f       	sbci	r23, 0xFF	; 255
    49c2:	41 e0       	ldi	r20, 0x01	; 1
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	9e 01       	movw	r18, r28
    49c8:	2e 5f       	subi	r18, 0xFE	; 254
    49ca:	3f 4f       	sbci	r19, 0xFF	; 255
    49cc:	0e 94 20 19 	call	0x3240	; 0x3240 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    49d0:	8a 81       	ldd	r24, Y+2	; 0x02
    49d2:	9b 81       	ldd	r25, Y+3	; 0x03
    49d4:	89 2b       	or	r24, r25
    49d6:	11 f4       	brne	.+4      	; 0x49dc <f_putc+0x3a>
    49d8:	0f ef       	ldi	r16, 0xFF	; 255
    49da:	1f ef       	ldi	r17, 0xFF	; 255
}
    49dc:	c8 01       	movw	r24, r16
    49de:	23 96       	adiw	r28, 0x03	; 3
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	cf 91       	pop	r28
    49e6:	df 91       	pop	r29
    49e8:	1f 91       	pop	r17
    49ea:	0f 91       	pop	r16
    49ec:	08 95       	ret

000049ee <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    49ee:	ef 92       	push	r14
    49f0:	ff 92       	push	r15
    49f2:	0f 93       	push	r16
    49f4:	1f 93       	push	r17
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	8c 01       	movw	r16, r24
    49fc:	7b 01       	movw	r14, r22
    49fe:	c0 e0       	ldi	r28, 0x00	; 0
    4a00:	d0 e0       	ldi	r29, 0x00	; 0
    4a02:	0d c0       	rjmp	.+26     	; 0x4a1e <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	b7 01       	movw	r22, r14
    4a08:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <f_putc>
    4a0c:	8f 5f       	subi	r24, 0xFF	; 255
    4a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a10:	19 f4       	brne	.+6      	; 0x4a18 <f_puts+0x2a>
    4a12:	cf ef       	ldi	r28, 0xFF	; 255
    4a14:	df ef       	ldi	r29, 0xFF	; 255
    4a16:	07 c0       	rjmp	.+14     	; 0x4a26 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    4a18:	0f 5f       	subi	r16, 0xFF	; 255
    4a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1c:	21 96       	adiw	r28, 0x01	; 1
    4a1e:	f8 01       	movw	r30, r16
    4a20:	80 81       	ld	r24, Z
    4a22:	88 23       	and	r24, r24
    4a24:	79 f7       	brne	.-34     	; 0x4a04 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    4a26:	ce 01       	movw	r24, r28
    4a28:	df 91       	pop	r29
    4a2a:	cf 91       	pop	r28
    4a2c:	1f 91       	pop	r17
    4a2e:	0f 91       	pop	r16
    4a30:	ff 90       	pop	r15
    4a32:	ef 90       	pop	r14
    4a34:	08 95       	ret

00004a36 <SD_Inserted>:
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    4a36:	80 91 a8 06 	lds	r24, 0x06A8
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	80 ff       	sbrs	r24, 0
    4a3e:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    4a40:	89 2f       	mov	r24, r25
    4a42:	08 95       	ret

00004a44 <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    4a44:	e0 ea       	ldi	r30, 0xA0	; 160
    4a46:	f6 e0       	ldi	r31, 0x06	; 6
    4a48:	80 85       	ldd	r24, Z+8	; 0x08
    4a4a:	86 95       	lsr	r24
    4a4c:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    4a4e:	81 70       	andi	r24, 0x01	; 1
    4a50:	08 95       	ret

00004a52 <SD_WriteBuffer>:
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     } 
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    4a52:	6f 92       	push	r6
    4a54:	7f 92       	push	r7
    4a56:	8f 92       	push	r8
    4a58:	9f 92       	push	r9
    4a5a:	bf 92       	push	r11
    4a5c:	cf 92       	push	r12
    4a5e:	df 92       	push	r13
    4a60:	ef 92       	push	r14
    4a62:	ff 92       	push	r15
    4a64:	0f 93       	push	r16
    4a66:	1f 93       	push	r17
    4a68:	df 93       	push	r29
    4a6a:	cf 93       	push	r28
    4a6c:	0f 92       	push	r0
    4a6e:	0f 92       	push	r0
    4a70:	cd b7       	in	r28, 0x3d	; 61
    4a72:	de b7       	in	r29, 0x3e	; 62
    4a74:	3c 01       	movw	r6, r24
    4a76:	4b 01       	movw	r8, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    4a78:	8e e1       	ldi	r24, 0x1E	; 30
    4a7a:	90 e4       	ldi	r25, 0x40	; 64
    4a7c:	b3 01       	movw	r22, r6
    4a7e:	a4 01       	movw	r20, r8
    4a80:	9e 01       	movw	r18, r28
    4a82:	2f 5f       	subi	r18, 0xFF	; 255
    4a84:	3f 4f       	sbci	r19, 0xFF	; 255
    4a86:	0e 94 20 19 	call	0x3240	; 0x3240 <f_write>
    4a8a:	cc 24       	eor	r12, r12
    4a8c:	dd 24       	eor	r13, r13
    4a8e:	4d c0       	rjmp	.+154    	; 0x4b2a <SD_WriteBuffer+0xd8>

    for (uint16_t i=0; i<length; i++)
      { 
      CRC = CRC ^ buffer[i] ; 
    4a90:	20 91 a7 45 	lds	r18, 0x45A7
    4a94:	30 91 a8 45 	lds	r19, 0x45A8
    4a98:	40 91 a9 45 	lds	r20, 0x45A9
    4a9c:	50 91 aa 45 	lds	r21, 0x45AA
    4aa0:	f3 01       	movw	r30, r6
    4aa2:	ec 0d       	add	r30, r12
    4aa4:	fd 1d       	adc	r31, r13
    4aa6:	80 81       	ld	r24, Z
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	a0 e0       	ldi	r26, 0x00	; 0
    4aac:	b0 e0       	ldi	r27, 0x00	; 0
    4aae:	82 27       	eor	r24, r18
    4ab0:	93 27       	eor	r25, r19
    4ab2:	a4 27       	eor	r26, r20
    4ab4:	b5 27       	eor	r27, r21
    4ab6:	80 93 a7 45 	sts	0x45A7, r24
    4aba:	90 93 a8 45 	sts	0x45A8, r25
    4abe:	a0 93 a9 45 	sts	0x45A9, r26
    4ac2:	b0 93 aa 45 	sts	0x45AA, r27
    4ac6:	bb 24       	eor	r11, r11
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
    4ac8:	e0 90 a7 45 	lds	r14, 0x45A7
    4acc:	f0 90 a8 45 	lds	r15, 0x45A8
    4ad0:	00 91 a9 45 	lds	r16, 0x45A9
    4ad4:	10 91 aa 45 	lds	r17, 0x45AA
    4ad8:	60 91 a7 45 	lds	r22, 0x45A7
    4adc:	70 91 a8 45 	lds	r23, 0x45A8
    4ae0:	80 91 a9 45 	lds	r24, 0x45A9
    4ae4:	90 91 aa 45 	lds	r25, 0x45AA
    4ae8:	61 70       	andi	r22, 0x01	; 1
    4aea:	70 70       	andi	r23, 0x00	; 0
    4aec:	80 70       	andi	r24, 0x00	; 0
    4aee:	90 70       	andi	r25, 0x00	; 0
    4af0:	20 e2       	ldi	r18, 0x20	; 32
    4af2:	33 e8       	ldi	r19, 0x83	; 131
    4af4:	48 eb       	ldi	r20, 0xB8	; 184
    4af6:	5d ee       	ldi	r21, 0xED	; 237
    4af8:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    4afc:	16 95       	lsr	r17
    4afe:	07 95       	ror	r16
    4b00:	f7 94       	ror	r15
    4b02:	e7 94       	ror	r14
    4b04:	e6 26       	eor	r14, r22
    4b06:	f7 26       	eor	r15, r23
    4b08:	08 27       	eor	r16, r24
    4b0a:	19 27       	eor	r17, r25
    4b0c:	e0 92 a7 45 	sts	0x45A7, r14
    4b10:	f0 92 a8 45 	sts	0x45A8, r15
    4b14:	00 93 a9 45 	sts	0x45A9, r16
    4b18:	10 93 aa 45 	sts	0x45AA, r17
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++)
      { 
      CRC = CRC ^ buffer[i] ; 
      for (uint8_t j=0; j<8; j++) 
    4b1c:	b3 94       	inc	r11
    4b1e:	88 e0       	ldi	r24, 0x08	; 8
    4b20:	b8 16       	cp	r11, r24
    4b22:	91 f6       	brne	.-92     	; 0x4ac8 <SD_WriteBuffer+0x76>

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++)
    4b24:	08 94       	sec
    4b26:	c1 1c       	adc	r12, r1
    4b28:	d1 1c       	adc	r13, r1
    4b2a:	c8 14       	cp	r12, r8
    4b2c:	d9 04       	cpc	r13, r9
    4b2e:	08 f4       	brcc	.+2      	; 0x4b32 <SD_WriteBuffer+0xe0>
    4b30:	af cf       	rjmp	.-162    	; 0x4a90 <SD_WriteBuffer+0x3e>
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     } 
}
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	cf 91       	pop	r28
    4b38:	df 91       	pop	r29
    4b3a:	1f 91       	pop	r17
    4b3c:	0f 91       	pop	r16
    4b3e:	ff 90       	pop	r15
    4b40:	ef 90       	pop	r14
    4b42:	df 90       	pop	r13
    4b44:	cf 90       	pop	r12
    4b46:	bf 90       	pop	r11
    4b48:	9f 90       	pop	r9
    4b4a:	8f 90       	pop	r8
    4b4c:	7f 90       	pop	r7
    4b4e:	6f 90       	pop	r6
    4b50:	08 95       	ret

00004b52 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    4b52:	60 93 8a 36 	sts	0x368A, r22
	tmp32[1] = (uint8_t)(var >> 8);
    4b56:	27 2f       	mov	r18, r23
    4b58:	38 2f       	mov	r19, r24
    4b5a:	49 2f       	mov	r20, r25
    4b5c:	55 27       	eor	r21, r21
    4b5e:	20 93 8b 36 	sts	0x368B, r18
	tmp32[2] = (uint8_t)(var >> 16);
    4b62:	9c 01       	movw	r18, r24
    4b64:	44 27       	eor	r20, r20
    4b66:	55 27       	eor	r21, r21
    4b68:	20 93 8c 36 	sts	0x368C, r18
	tmp32[3] = (uint8_t)(var >> 24);
    4b6c:	69 2f       	mov	r22, r25
    4b6e:	77 27       	eor	r23, r23
    4b70:	88 27       	eor	r24, r24
    4b72:	99 27       	eor	r25, r25
    4b74:	60 93 8d 36 	sts	0x368D, r22
	SD_WriteBuffer(tmp32,4);
    4b78:	8a e8       	ldi	r24, 0x8A	; 138
    4b7a:	96 e3       	ldi	r25, 0x36	; 54
    4b7c:	64 e0       	ldi	r22, 0x04	; 4
    4b7e:	70 e0       	ldi	r23, 0x00	; 0
    4b80:	0e 94 29 25 	call	0x4a52	; 0x4a52 <SD_WriteBuffer>
}
    4b84:	08 95       	ret

00004b86 <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    4b86:	80 93 4f 4a 	sts	0x4A4F, r24
	tmp16[1] = (uint8_t)(var >> 8);
    4b8a:	90 93 50 4a 	sts	0x4A50, r25
	SD_WriteBuffer(tmp16,2);
    4b8e:	8f e4       	ldi	r24, 0x4F	; 79
    4b90:	9a e4       	ldi	r25, 0x4A	; 74
    4b92:	62 e0       	ldi	r22, 0x02	; 2
    4b94:	70 e0       	ldi	r23, 0x00	; 0
    4b96:	0e 94 29 25 	call	0x4a52	; 0x4a52 <SD_WriteBuffer>
}
    4b9a:	08 95       	ret

00004b9c <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    4b9c:	80 93 14 3c 	sts	0x3C14, r24
	SD_WriteBuffer(tmp8,1);
    4ba0:	84 e1       	ldi	r24, 0x14	; 20
    4ba2:	9c e3       	ldi	r25, 0x3C	; 60
    4ba4:	61 e0       	ldi	r22, 0x01	; 1
    4ba6:	70 e0       	ldi	r23, 0x00	; 0
    4ba8:	0e 94 29 25 	call	0x4a52	; 0x4a52 <SD_WriteBuffer>
}
    4bac:	08 95       	ret

00004bae <SD_ClearCRC>:
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    4bae:	8f ef       	ldi	r24, 0xFF	; 255
    4bb0:	9f ef       	ldi	r25, 0xFF	; 255
    4bb2:	af ef       	ldi	r26, 0xFF	; 255
    4bb4:	bf ef       	ldi	r27, 0xFF	; 255
    4bb6:	80 93 a7 45 	sts	0x45A7, r24
    4bba:	90 93 a8 45 	sts	0x45A8, r25
    4bbe:	a0 93 a9 45 	sts	0x45A9, r26
    4bc2:	b0 93 aa 45 	sts	0x45AA, r27
}
    4bc6:	08 95       	ret

00004bc8 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    4bc8:	60 91 a7 45 	lds	r22, 0x45A7
    4bcc:	70 91 a8 45 	lds	r23, 0x45A8
    4bd0:	80 91 a9 45 	lds	r24, 0x45A9
    4bd4:	90 91 aa 45 	lds	r25, 0x45AA
    4bd8:	60 95       	com	r22
    4bda:	70 95       	com	r23
    4bdc:	80 95       	com	r24
    4bde:	90 95       	com	r25
    4be0:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
}
    4be4:	08 95       	ret

00004be6 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    4be6:	e0 e0       	ldi	r30, 0x00	; 0
    4be8:	fa e0       	ldi	r31, 0x0A	; 10
    4bea:	80 e4       	ldi	r24, 0x40	; 64
    4bec:	92 e0       	ldi	r25, 0x02	; 2
    4bee:	86 a3       	std	Z+38, r24	; 0x26
    4bf0:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    4bf2:	80 81       	ld	r24, Z
    4bf4:	80 7f       	andi	r24, 0xF0	; 240
    4bf6:	86 60       	ori	r24, 0x06	; 6
    4bf8:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    4bfa:	86 81       	ldd	r24, Z+6	; 0x06
    4bfc:	8c 7f       	andi	r24, 0xFC	; 252
    4bfe:	82 60       	ori	r24, 0x02	; 2
    4c00:	86 83       	std	Z+6, r24	; 0x06
	
}
    4c02:	08 95       	ret

00004c04 <SD_Init>:
bool okToCharge 		 = false;



void SD_Init(void){
	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    4c04:	e0 ea       	ldi	r30, 0xA0	; 160
    4c06:	f6 e0       	ldi	r31, 0x06	; 6
    4c08:	88 e1       	ldi	r24, 0x18	; 24
    4c0a:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    4c0c:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    4c0e:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <SD_Timer_Init>
	disk_initialize(0);
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	0e 94 c4 04 	call	0x988	; 0x988 <disk_initialize>
	f_mount(0, &file_system_object);
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	6b ee       	ldi	r22, 0xEB	; 235
    4c1c:	7b e2       	ldi	r23, 0x2B	; 43
    4c1e:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <f_mount>
}
    4c22:	08 95       	ret

00004c24 <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    4c24:	1f 92       	push	r1
    4c26:	0f 92       	push	r0
    4c28:	0f b6       	in	r0, 0x3f	; 63
    4c2a:	0f 92       	push	r0
    4c2c:	0b b6       	in	r0, 0x3b	; 59
    4c2e:	0f 92       	push	r0
    4c30:	11 24       	eor	r1, r1
    4c32:	2f 93       	push	r18
    4c34:	3f 93       	push	r19
    4c36:	4f 93       	push	r20
    4c38:	5f 93       	push	r21
    4c3a:	6f 93       	push	r22
    4c3c:	7f 93       	push	r23
    4c3e:	8f 93       	push	r24
    4c40:	9f 93       	push	r25
    4c42:	af 93       	push	r26
    4c44:	bf 93       	push	r27
    4c46:	ef 93       	push	r30
    4c48:	ff 93       	push	r31
	disk_timerproc();
    4c4a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <disk_timerproc>


	if(okToCharge){
    4c4e:	80 91 b5 2b 	lds	r24, 0x2BB5
    4c52:	88 23       	and	r24, r24
    4c54:	a9 f0       	breq	.+42     	; 0x4c80 <__vector_47+0x5c>
		chargeCounter++;
    4c56:	80 91 b2 2b 	lds	r24, 0x2BB2
    4c5a:	90 91 b3 2b 	lds	r25, 0x2BB3
    4c5e:	01 96       	adiw	r24, 0x01	; 1
    4c60:	80 93 b2 2b 	sts	0x2BB2, r24
    4c64:	90 93 b3 2b 	sts	0x2BB3, r25
		if(chargeCounter >= 16200){
    4c68:	88 54       	subi	r24, 0x48	; 72
    4c6a:	9f 43       	sbci	r25, 0x3F	; 63
    4c6c:	48 f0       	brcs	.+18     	; 0x4c80 <__vector_47+0x5c>
			chargeCounter=0;
    4c6e:	10 92 b2 2b 	sts	0x2BB2, r1
    4c72:	10 92 b3 2b 	sts	0x2BB3, r1
			chargePercent++;
    4c76:	80 91 b1 2b 	lds	r24, 0x2BB1
    4c7a:	8f 5f       	subi	r24, 0xFF	; 255
    4c7c:	80 93 b1 2b 	sts	0x2BB1, r24
		}
	}
}
    4c80:	ff 91       	pop	r31
    4c82:	ef 91       	pop	r30
    4c84:	bf 91       	pop	r27
    4c86:	af 91       	pop	r26
    4c88:	9f 91       	pop	r25
    4c8a:	8f 91       	pop	r24
    4c8c:	7f 91       	pop	r23
    4c8e:	6f 91       	pop	r22
    4c90:	5f 91       	pop	r21
    4c92:	4f 91       	pop	r20
    4c94:	3f 91       	pop	r19
    4c96:	2f 91       	pop	r18
    4c98:	0f 90       	pop	r0
    4c9a:	0b be       	out	0x3b, r0	; 59
    4c9c:	0f 90       	pop	r0
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	0f 90       	pop	r0
    4ca2:	1f 90       	pop	r1
    4ca4:	18 95       	reti

00004ca6 <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    4ca6:	0f 93       	push	r16
    4ca8:	df 93       	push	r29
    4caa:	cf 93       	push	r28
    4cac:	0f 92       	push	r0
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    4cb2:	2f b7       	in	r18, 0x3f	; 63
    4cb4:	29 83       	std	Y+1, r18	; 0x01
    cli();
    4cb6:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    4cb8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    4cba:	fc 01       	movw	r30, r24
    4cbc:	08 ed       	ldi	r16, 0xD8	; 216
    4cbe:	04 bf       	out	0x34, r16	; 52
    4cc0:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    4cc2:	89 81       	ldd	r24, Y+1	; 0x01
    4cc4:	8f bf       	out	0x3f, r24	; 63
}
    4cc6:	0f 90       	pop	r0
    4cc8:	cf 91       	pop	r28
    4cca:	df 91       	pop	r29
    4ccc:	0f 91       	pop	r16
    4cce:	08 95       	ret

00004cd0 <display_sendCommand>:
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4cd0:	94 e0       	ldi	r25, 0x04	; 4
    4cd2:	e0 e2       	ldi	r30, 0x20	; 32
    4cd4:	f6 e0       	ldi	r31, 0x06	; 6
    4cd6:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    4cd8:	e0 ec       	ldi	r30, 0xC0	; 192
    4cda:	f8 e0       	ldi	r31, 0x08	; 8
    4cdc:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4cde:	80 91 c2 08 	lds	r24, 0x08C2
    4ce2:	87 ff       	sbrs	r24, 7
    4ce4:	fc cf       	rjmp	.-8      	; 0x4cde <display_sendCommand+0xe>
}
    4ce6:	08 95       	ret

00004ce8 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    4ce8:	94 e0       	ldi	r25, 0x04	; 4
    4cea:	e0 e2       	ldi	r30, 0x20	; 32
    4cec:	f6 e0       	ldi	r31, 0x06	; 6
    4cee:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    4cf0:	e0 ec       	ldi	r30, 0xC0	; 192
    4cf2:	f8 e0       	ldi	r31, 0x08	; 8
    4cf4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4cf6:	80 91 c2 08 	lds	r24, 0x08C2
    4cfa:	87 ff       	sbrs	r24, 7
    4cfc:	fc cf       	rjmp	.-8      	; 0x4cf6 <display_sendData+0xe>
}
    4cfe:	08 95       	ret

00004d00 <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    4d00:	80 6b       	ori	r24, 0xB0	; 176
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4d02:	94 e0       	ldi	r25, 0x04	; 4
    4d04:	e0 e2       	ldi	r30, 0x20	; 32
    4d06:	f6 e0       	ldi	r31, 0x06	; 6
    4d08:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    4d0a:	e0 ec       	ldi	r30, 0xC0	; 192
    4d0c:	f8 e0       	ldi	r31, 0x08	; 8
    4d0e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4d10:	80 91 c2 08 	lds	r24, 0x08C2
    4d14:	87 ff       	sbrs	r24, 7
    4d16:	fc cf       	rjmp	.-8      	; 0x4d10 <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    4d18:	96 2f       	mov	r25, r22
    4d1a:	9f 70       	andi	r25, 0x0F	; 15
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4d1c:	84 e0       	ldi	r24, 0x04	; 4
    4d1e:	e0 e2       	ldi	r30, 0x20	; 32
    4d20:	f6 e0       	ldi	r31, 0x06	; 6
    4d22:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4d24:	e0 ec       	ldi	r30, 0xC0	; 192
    4d26:	f8 e0       	ldi	r31, 0x08	; 8
    4d28:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4d2a:	80 91 c2 08 	lds	r24, 0x08C2
    4d2e:	87 ff       	sbrs	r24, 7
    4d30:	fc cf       	rjmp	.-8      	; 0x4d2a <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    4d32:	62 95       	swap	r22
    4d34:	6f 70       	andi	r22, 0x0F	; 15
    4d36:	60 61       	ori	r22, 0x10	; 16
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4d38:	84 e0       	ldi	r24, 0x04	; 4
    4d3a:	e0 e2       	ldi	r30, 0x20	; 32
    4d3c:	f6 e0       	ldi	r31, 0x06	; 6
    4d3e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4d40:	e0 ec       	ldi	r30, 0xC0	; 192
    4d42:	f8 e0       	ldi	r31, 0x08	; 8
    4d44:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4d46:	80 91 c2 08 	lds	r24, 0x08C2
    4d4a:	87 ff       	sbrs	r24, 7
    4d4c:	fc cf       	rjmp	.-8      	; 0x4d46 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    4d4e:	08 95       	ret

00004d50 <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    4d50:	bf 92       	push	r11
    4d52:	cf 92       	push	r12
    4d54:	df 92       	push	r13
    4d56:	ef 92       	push	r14
    4d58:	ff 92       	push	r15
    4d5a:	0f 93       	push	r16
    4d5c:	1f 93       	push	r17
    4d5e:	cf 93       	push	r28
    4d60:	df 93       	push	r29
    4d62:	c0 e0       	ldi	r28, 0x00	; 0
    4d64:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    4d66:	76 e6       	ldi	r23, 0x66	; 102
    4d68:	c7 2e       	mov	r12, r23
    4d6a:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    4d6c:	60 e2       	ldi	r22, 0x20	; 32
    4d6e:	e6 2e       	mov	r14, r22
    4d70:	66 e0       	ldi	r22, 0x06	; 6
    4d72:	f6 2e       	mov	r15, r22
    4d74:	54 e0       	ldi	r21, 0x04	; 4
    4d76:	b5 2e       	mov	r11, r21
	Display_SPI.DATA = dataByte;
    4d78:	00 ec       	ldi	r16, 0xC0	; 192
    4d7a:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    4d7c:	8c 2f       	mov	r24, r28
    4d7e:	60 e0       	ldi	r22, 0x00	; 0
    4d80:	0e 94 80 26 	call	0x4d00	; 0x4d00 <display_setCursor>
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    4d88:	cc 9d       	mul	r28, r12
    4d8a:	a0 01       	movw	r20, r0
    4d8c:	cd 9d       	mul	r28, r13
    4d8e:	50 0d       	add	r21, r0
    4d90:	dc 9d       	mul	r29, r12
    4d92:	50 0d       	add	r21, r0
    4d94:	11 24       	eor	r1, r1
    4d96:	fa 01       	movw	r30, r20
    4d98:	e2 0f       	add	r30, r18
    4d9a:	f3 1f       	adc	r31, r19
    4d9c:	e9 58       	subi	r30, 0x89	; 137
    4d9e:	fd 4b       	sbci	r31, 0xBD	; 189
    4da0:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    4da2:	f7 01       	movw	r30, r14
    4da4:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    4da6:	f8 01       	movw	r30, r16
    4da8:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4daa:	80 91 c2 08 	lds	r24, 0x08C2
    4dae:	87 ff       	sbrs	r24, 7
    4db0:	fc cf       	rjmp	.-8      	; 0x4daa <display_writeBufferToScreen+0x5a>
    4db2:	2f 5f       	subi	r18, 0xFF	; 255
    4db4:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    4db6:	26 36       	cpi	r18, 0x66	; 102
    4db8:	31 05       	cpc	r19, r1
    4dba:	69 f7       	brne	.-38     	; 0x4d96 <display_writeBufferToScreen+0x46>
    4dbc:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    4dbe:	c8 30       	cpi	r28, 0x08	; 8
    4dc0:	d1 05       	cpc	r29, r1
    4dc2:	e1 f6       	brne	.-72     	; 0x4d7c <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	df 90       	pop	r13
    4dd2:	cf 90       	pop	r12
    4dd4:	bf 90       	pop	r11
    4dd6:	08 95       	ret

00004dd8 <display_clearPage>:


void display_clearPage(uint8_t page) {
    4dd8:	40 e0       	ldi	r20, 0x00	; 0
    4dda:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	26 e6       	ldi	r18, 0x66	; 102
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	82 9f       	mul	r24, r18
    4de4:	b0 01       	movw	r22, r0
    4de6:	83 9f       	mul	r24, r19
    4de8:	70 0d       	add	r23, r0
    4dea:	92 9f       	mul	r25, r18
    4dec:	70 0d       	add	r23, r0
    4dee:	11 24       	eor	r1, r1
    4df0:	8a e0       	ldi	r24, 0x0A	; 10
    4df2:	fb 01       	movw	r30, r22
    4df4:	e4 0f       	add	r30, r20
    4df6:	f5 1f       	adc	r31, r21
    4df8:	e9 58       	subi	r30, 0x89	; 137
    4dfa:	fd 4b       	sbci	r31, 0xBD	; 189
    4dfc:	80 83       	st	Z, r24
    4dfe:	4f 5f       	subi	r20, 0xFF	; 255
    4e00:	5f 4f       	sbci	r21, 0xFF	; 255
    4e02:	46 36       	cpi	r20, 0x66	; 102
    4e04:	51 05       	cpc	r21, r1
    4e06:	a9 f7       	brne	.-22     	; 0x4df2 <display_clearPage+0x1a>
}
    4e08:	08 95       	ret

00004e0a <display_clearBuffer>:


void display_clearBuffer() {
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    4e0e:	66 e6       	ldi	r22, 0x66	; 102
    4e10:	70 e0       	ldi	r23, 0x00	; 0
    4e12:	0f c0       	rjmp	.+30     	; 0x4e32 <display_clearBuffer+0x28>
    4e14:	fa 01       	movw	r30, r20
    4e16:	e8 0f       	add	r30, r24
    4e18:	f9 1f       	adc	r31, r25
    4e1a:	e9 58       	subi	r30, 0x89	; 137
    4e1c:	fd 4b       	sbci	r31, 0xBD	; 189
    4e1e:	10 82       	st	Z, r1
    4e20:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    4e22:	86 36       	cpi	r24, 0x66	; 102
    4e24:	91 05       	cpc	r25, r1
    4e26:	b1 f7       	brne	.-20     	; 0x4e14 <display_clearBuffer+0xa>
    4e28:	2f 5f       	subi	r18, 0xFF	; 255
    4e2a:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    4e2c:	28 30       	cpi	r18, 0x08	; 8
    4e2e:	31 05       	cpc	r19, r1
    4e30:	51 f0       	breq	.+20     	; 0x4e46 <display_clearBuffer+0x3c>
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    4e36:	26 9f       	mul	r18, r22
    4e38:	a0 01       	movw	r20, r0
    4e3a:	27 9f       	mul	r18, r23
    4e3c:	50 0d       	add	r21, r0
    4e3e:	36 9f       	mul	r19, r22
    4e40:	50 0d       	add	r21, r0
    4e42:	11 24       	eor	r1, r1
    4e44:	e7 cf       	rjmp	.-50     	; 0x4e14 <display_clearBuffer+0xa>
    4e46:	08 95       	ret

00004e48 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    4e4c:	a0 e4       	ldi	r26, 0x40	; 64
    4e4e:	b6 e0       	ldi	r27, 0x06	; 6
    4e50:	88 e3       	ldi	r24, 0x38	; 56
    4e52:	54 96       	adiw	r26, 0x14	; 20
    4e54:	8c 93       	st	X, r24
    4e56:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    4e58:	40 e2       	ldi	r20, 0x20	; 32
    4e5a:	56 e0       	ldi	r21, 0x06	; 6
    4e5c:	fa 01       	movw	r30, r20
    4e5e:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    4e60:	30 e1       	ldi	r19, 0x10	; 16
    4e62:	15 96       	adiw	r26, 0x05	; 5
    4e64:	3c 93       	st	X, r19
    4e66:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    4e68:	e0 e6       	ldi	r30, 0x60	; 96
    4e6a:	f6 e0       	ldi	r31, 0x06	; 6
    4e6c:	21 e0       	ldi	r18, 0x01	; 1
    4e6e:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    4e70:	25 83       	std	Z+5, r18	; 0x05
    4e72:	80 e0       	ldi	r24, 0x00	; 0
    4e74:	90 e9       	ldi	r25, 0x90	; 144
    4e76:	ec 01       	movw	r28, r24
    4e78:	21 97       	sbiw	r28, 0x01	; 1
    4e7a:	f1 f7       	brne	.-4      	; 0x4e78 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    4e7c:	26 83       	std	Z+6, r18	; 0x06
    4e7e:	ec 01       	movw	r28, r24
    4e80:	21 97       	sbiw	r28, 0x01	; 1
    4e82:	f1 f7       	brne	.-4      	; 0x4e80 <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    4e84:	25 83       	std	Z+5, r18	; 0x05
    4e86:	01 97       	sbiw	r24, 0x01	; 1
    4e88:	f1 f7       	brne	.-4      	; 0x4e86 <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    4e8a:	8d ed       	ldi	r24, 0xDD	; 221
    4e8c:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    4e90:	80 eb       	ldi	r24, 0xB0	; 176
    4e92:	11 96       	adiw	r26, 0x01	; 1
    4e94:	8c 93       	st	X, r24
    4e96:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    4e98:	84 e0       	ldi	r24, 0x04	; 4
    4e9a:	fa 01       	movw	r30, r20
    4e9c:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    4e9e:	16 96       	adiw	r26, 0x06	; 6
    4ea0:	3c 93       	st	X, r19
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4ea2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4ea4:	80 e4       	ldi	r24, 0x40	; 64
    4ea6:	e0 ec       	ldi	r30, 0xC0	; 192
    4ea8:	f8 e0       	ldi	r31, 0x08	; 8
    4eaa:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4eac:	80 91 c2 08 	lds	r24, 0x08C2
    4eb0:	87 ff       	sbrs	r24, 7
    4eb2:	fc cf       	rjmp	.-8      	; 0x4eac <display_init+0x64>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4eb4:	84 e0       	ldi	r24, 0x04	; 4
    4eb6:	e0 e2       	ldi	r30, 0x20	; 32
    4eb8:	f6 e0       	ldi	r31, 0x06	; 6
    4eba:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4ebc:	81 ea       	ldi	r24, 0xA1	; 161
    4ebe:	e0 ec       	ldi	r30, 0xC0	; 192
    4ec0:	f8 e0       	ldi	r31, 0x08	; 8
    4ec2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4ec4:	80 91 c2 08 	lds	r24, 0x08C2
    4ec8:	87 ff       	sbrs	r24, 7
    4eca:	fc cf       	rjmp	.-8      	; 0x4ec4 <display_init+0x7c>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4ecc:	84 e0       	ldi	r24, 0x04	; 4
    4ece:	e0 e2       	ldi	r30, 0x20	; 32
    4ed0:	f6 e0       	ldi	r31, 0x06	; 6
    4ed2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4ed4:	80 ec       	ldi	r24, 0xC0	; 192
    4ed6:	e0 ec       	ldi	r30, 0xC0	; 192
    4ed8:	f8 e0       	ldi	r31, 0x08	; 8
    4eda:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4edc:	80 91 c2 08 	lds	r24, 0x08C2
    4ee0:	87 ff       	sbrs	r24, 7
    4ee2:	fc cf       	rjmp	.-8      	; 0x4edc <display_init+0x94>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4ee4:	84 e0       	ldi	r24, 0x04	; 4
    4ee6:	e0 e2       	ldi	r30, 0x20	; 32
    4ee8:	f6 e0       	ldi	r31, 0x06	; 6
    4eea:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4eec:	84 ea       	ldi	r24, 0xA4	; 164
    4eee:	e0 ec       	ldi	r30, 0xC0	; 192
    4ef0:	f8 e0       	ldi	r31, 0x08	; 8
    4ef2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4ef4:	80 91 c2 08 	lds	r24, 0x08C2
    4ef8:	87 ff       	sbrs	r24, 7
    4efa:	fc cf       	rjmp	.-8      	; 0x4ef4 <display_init+0xac>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4efc:	84 e0       	ldi	r24, 0x04	; 4
    4efe:	e0 e2       	ldi	r30, 0x20	; 32
    4f00:	f6 e0       	ldi	r31, 0x06	; 6
    4f02:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f04:	86 ea       	ldi	r24, 0xA6	; 166
    4f06:	e0 ec       	ldi	r30, 0xC0	; 192
    4f08:	f8 e0       	ldi	r31, 0x08	; 8
    4f0a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f0c:	80 91 c2 08 	lds	r24, 0x08C2
    4f10:	87 ff       	sbrs	r24, 7
    4f12:	fc cf       	rjmp	.-8      	; 0x4f0c <display_init+0xc4>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4f14:	84 e0       	ldi	r24, 0x04	; 4
    4f16:	e0 e2       	ldi	r30, 0x20	; 32
    4f18:	f6 e0       	ldi	r31, 0x06	; 6
    4f1a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f1c:	8f e2       	ldi	r24, 0x2F	; 47
    4f1e:	e0 ec       	ldi	r30, 0xC0	; 192
    4f20:	f8 e0       	ldi	r31, 0x08	; 8
    4f22:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f24:	80 91 c2 08 	lds	r24, 0x08C2
    4f28:	87 ff       	sbrs	r24, 7
    4f2a:	fc cf       	rjmp	.-8      	; 0x4f24 <display_init+0xdc>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4f2c:	84 e0       	ldi	r24, 0x04	; 4
    4f2e:	e0 e2       	ldi	r30, 0x20	; 32
    4f30:	f6 e0       	ldi	r31, 0x06	; 6
    4f32:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f34:	87 e2       	ldi	r24, 0x27	; 39
    4f36:	e0 ec       	ldi	r30, 0xC0	; 192
    4f38:	f8 e0       	ldi	r31, 0x08	; 8
    4f3a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f3c:	80 91 c2 08 	lds	r24, 0x08C2
    4f40:	87 ff       	sbrs	r24, 7
    4f42:	fc cf       	rjmp	.-8      	; 0x4f3c <display_init+0xf4>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4f44:	84 e0       	ldi	r24, 0x04	; 4
    4f46:	e0 e2       	ldi	r30, 0x20	; 32
    4f48:	f6 e0       	ldi	r31, 0x06	; 6
    4f4a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f4c:	8a ef       	ldi	r24, 0xFA	; 250
    4f4e:	e0 ec       	ldi	r30, 0xC0	; 192
    4f50:	f8 e0       	ldi	r31, 0x08	; 8
    4f52:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f54:	80 91 c2 08 	lds	r24, 0x08C2
    4f58:	87 ff       	sbrs	r24, 7
    4f5a:	fc cf       	rjmp	.-8      	; 0x4f54 <display_init+0x10c>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4f5c:	84 e0       	ldi	r24, 0x04	; 4
    4f5e:	e0 e2       	ldi	r30, 0x20	; 32
    4f60:	f6 e0       	ldi	r31, 0x06	; 6
    4f62:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f64:	80 e9       	ldi	r24, 0x90	; 144
    4f66:	e0 ec       	ldi	r30, 0xC0	; 192
    4f68:	f8 e0       	ldi	r31, 0x08	; 8
    4f6a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f6c:	80 91 c2 08 	lds	r24, 0x08C2
    4f70:	87 ff       	sbrs	r24, 7
    4f72:	fc cf       	rjmp	.-8      	; 0x4f6c <display_init+0x124>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4f74:	84 e0       	ldi	r24, 0x04	; 4
    4f76:	e0 e2       	ldi	r30, 0x20	; 32
    4f78:	f6 e0       	ldi	r31, 0x06	; 6
    4f7a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f7c:	80 e4       	ldi	r24, 0x40	; 64
    4f7e:	e0 ec       	ldi	r30, 0xC0	; 192
    4f80:	f8 e0       	ldi	r31, 0x08	; 8
    4f82:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f84:	80 91 c2 08 	lds	r24, 0x08C2
    4f88:	87 ff       	sbrs	r24, 7
    4f8a:	fc cf       	rjmp	.-8      	; 0x4f84 <display_init+0x13c>
    4f8c:	8c ed       	ldi	r24, 0xDC	; 220
    4f8e:	95 e0       	ldi	r25, 0x05	; 5
    4f90:	20 e7       	ldi	r18, 0x70	; 112
    4f92:	31 e0       	ldi	r19, 0x01	; 1
    4f94:	f9 01       	movw	r30, r18
    4f96:	31 97       	sbiw	r30, 0x01	; 1
    4f98:	f1 f7       	brne	.-4      	; 0x4f96 <display_init+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f9c:	d9 f7       	brne	.-10     	; 0x4f94 <display_init+0x14c>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4f9e:	84 e0       	ldi	r24, 0x04	; 4
    4fa0:	e0 e2       	ldi	r30, 0x20	; 32
    4fa2:	f6 e0       	ldi	r31, 0x06	; 6
    4fa4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4fa6:	82 ea       	ldi	r24, 0xA2	; 162
    4fa8:	e0 ec       	ldi	r30, 0xC0	; 192
    4faa:	f8 e0       	ldi	r31, 0x08	; 8
    4fac:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4fae:	80 91 c2 08 	lds	r24, 0x08C2
    4fb2:	87 ff       	sbrs	r24, 7
    4fb4:	fc cf       	rjmp	.-8      	; 0x4fae <display_init+0x166>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4fb6:	84 e0       	ldi	r24, 0x04	; 4
    4fb8:	e0 e2       	ldi	r30, 0x20	; 32
    4fba:	f6 e0       	ldi	r31, 0x06	; 6
    4fbc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4fbe:	81 e8       	ldi	r24, 0x81	; 129
    4fc0:	e0 ec       	ldi	r30, 0xC0	; 192
    4fc2:	f8 e0       	ldi	r31, 0x08	; 8
    4fc4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4fc6:	80 91 c2 08 	lds	r24, 0x08C2
    4fca:	87 ff       	sbrs	r24, 7
    4fcc:	fc cf       	rjmp	.-8      	; 0x4fc6 <display_init+0x17e>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4fce:	84 e0       	ldi	r24, 0x04	; 4
    4fd0:	e0 e2       	ldi	r30, 0x20	; 32
    4fd2:	f6 e0       	ldi	r31, 0x06	; 6
    4fd4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4fd6:	88 e0       	ldi	r24, 0x08	; 8
    4fd8:	e0 ec       	ldi	r30, 0xC0	; 192
    4fda:	f8 e0       	ldi	r31, 0x08	; 8
    4fdc:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4fde:	80 91 c2 08 	lds	r24, 0x08C2
    4fe2:	87 ff       	sbrs	r24, 7
    4fe4:	fc cf       	rjmp	.-8      	; 0x4fde <display_init+0x196>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4fe6:	84 e0       	ldi	r24, 0x04	; 4
    4fe8:	e0 e2       	ldi	r30, 0x20	; 32
    4fea:	f6 e0       	ldi	r31, 0x06	; 6
    4fec:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4fee:	8f ea       	ldi	r24, 0xAF	; 175
    4ff0:	e0 ec       	ldi	r30, 0xC0	; 192
    4ff2:	f8 e0       	ldi	r31, 0x08	; 8
    4ff4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4ff6:	80 91 c2 08 	lds	r24, 0x08C2
    4ffa:	87 ff       	sbrs	r24, 7
    4ffc:	fc cf       	rjmp	.-8      	; 0x4ff6 <display_init+0x1ae>




	
	display_clearBuffer();
    4ffe:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
	display_writeBufferToScreen();
    5002:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
}
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	08 95       	ret

0000500c <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    500c:	2f 92       	push	r2
    500e:	3f 92       	push	r3
    5010:	4f 92       	push	r4
    5012:	5f 92       	push	r5
    5014:	6f 92       	push	r6
    5016:	7f 92       	push	r7
    5018:	8f 92       	push	r8
    501a:	9f 92       	push	r9
    501c:	af 92       	push	r10
    501e:	bf 92       	push	r11
    5020:	cf 92       	push	r12
    5022:	df 92       	push	r13
    5024:	ef 92       	push	r14
    5026:	ff 92       	push	r15
    5028:	0f 93       	push	r16
    502a:	1f 93       	push	r17
    502c:	df 93       	push	r29
    502e:	cf 93       	push	r28
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	28 97       	sbiw	r28, 0x08	; 8
    5036:	cd bf       	out	0x3d, r28	; 61
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	1c 01       	movw	r2, r24
    503c:	4c 83       	std	Y+4, r20	; 0x04
    503e:	2f 83       	std	Y+7, r18	; 0x07
    5040:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5042:	d9 01       	movw	r26, r18
    5044:	13 96       	adiw	r26, 0x03	; 3
    5046:	bc 91       	ld	r27, X
    5048:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    504a:	f9 01       	movw	r30, r18
    504c:	f4 81       	ldd	r31, Z+4	; 0x04
    504e:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5050:	d9 01       	movw	r26, r18
    5052:	15 96       	adiw	r26, 0x05	; 5
    5054:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5056:	bb 81       	ldd	r27, Y+3	; 0x03
    5058:	0b 2f       	mov	r16, r27
    505a:	10 e0       	ldi	r17, 0x00	; 0
    505c:	c8 01       	movw	r24, r16
    505e:	07 96       	adiw	r24, 0x07	; 7
    5060:	a3 e0       	ldi	r26, 0x03	; 3
    5062:	95 95       	asr	r25
    5064:	87 95       	ror	r24
    5066:	aa 95       	dec	r26
    5068:	e1 f7       	brne	.-8      	; 0x5062 <display_putString+0x56>
    506a:	89 83       	std	Y+1, r24	; 0x01
    506c:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    506e:	e2 2e       	mov	r14, r18
    5070:	ff 24       	eor	r15, r15
    5072:	e6 e0       	ldi	r30, 0x06	; 6
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	ee 0e       	add	r14, r30
    5078:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    507a:	46 2e       	mov	r4, r22
    507c:	55 24       	eor	r5, r5
    507e:	6f c0       	rjmp	.+222    	; 0x515e <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5080:	7e 2f       	mov	r23, r30
    5082:	fa 81       	ldd	r31, Y+2	; 0x02
    5084:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5086:	af 81       	ldd	r26, Y+7	; 0x07
    5088:	b8 85       	ldd	r27, Y+8	; 0x08
    508a:	8c 91       	ld	r24, X
    508c:	88 23       	and	r24, r24
    508e:	39 f4       	brne	.+14     	; 0x509e <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5090:	12 96       	adiw	r26, 0x02	; 2
    5092:	2c 91       	ld	r18, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5094:	72 9f       	mul	r23, r18
    5096:	f0 01       	movw	r30, r0
    5098:	11 24       	eor	r1, r1
    509a:	36 96       	adiw	r30, 0x06	; 6
    509c:	2b c0       	rjmp	.+86     	; 0x50f4 <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    509e:	ef 81       	ldd	r30, Y+7	; 0x07
    50a0:	f8 85       	ldd	r31, Y+8	; 0x08
    50a2:	e7 0f       	add	r30, r23
    50a4:	f1 1d       	adc	r31, r1
    50a6:	26 81       	ldd	r18, Z+6	; 0x06
    50a8:	ef 81       	ldd	r30, Y+7	; 0x07
    50aa:	f8 85       	ldd	r31, Y+8	; 0x08
    50ac:	ed 83       	std	Y+5, r30	; 0x05
    50ae:	fe 83       	std	Y+6, r31	; 0x06
    50b0:	a0 e0       	ldi	r26, 0x00	; 0
    50b2:	b0 e0       	ldi	r27, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	0a c0       	rjmp	.+20     	; 0x50cc <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    50b8:	ed 81       	ldd	r30, Y+5	; 0x05
    50ba:	fe 81       	ldd	r31, Y+6	; 0x06
    50bc:	85 81       	ldd	r24, Z+5	; 0x05
    50be:	f9 81       	ldd	r31, Y+1	; 0x01
    50c0:	f8 9f       	mul	r31, r24
    50c2:	c0 01       	movw	r24, r0
    50c4:	11 24       	eor	r1, r1
    50c6:	a8 0f       	add	r26, r24
    50c8:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    50ca:	3f 5f       	subi	r19, 0xFF	; 255
    50cc:	8d 81       	ldd	r24, Y+5	; 0x05
    50ce:	9e 81       	ldd	r25, Y+6	; 0x06
    50d0:	01 96       	adiw	r24, 0x01	; 1
    50d2:	8d 83       	std	Y+5, r24	; 0x05
    50d4:	9e 83       	std	Y+6, r25	; 0x06
    50d6:	37 17       	cp	r19, r23
    50d8:	78 f3       	brcs	.-34     	; 0x50b8 <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    50da:	82 2f       	mov	r24, r18
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	84 9f       	mul	r24, r20
    50e0:	f0 01       	movw	r30, r0
    50e2:	85 9f       	mul	r24, r21
    50e4:	f0 0d       	add	r31, r0
    50e6:	94 9f       	mul	r25, r20
    50e8:	f0 0d       	add	r31, r0
    50ea:	11 24       	eor	r1, r1
    50ec:	ee 0d       	add	r30, r14
    50ee:	ff 1d       	adc	r31, r15
    50f0:	ea 0f       	add	r30, r26
    50f2:	fb 1f       	adc	r31, r27
    50f4:	af 81       	ldd	r26, Y+7	; 0x07
    50f6:	b8 85       	ldd	r27, Y+8	; 0x08
    50f8:	ae 0f       	add	r26, r30
    50fa:	bf 1f       	adc	r27, r31
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	16 c0       	rjmp	.+44     	; 0x512c <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5100:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5102:	9b 81       	ldd	r25, Y+3	; 0x03
    5104:	99 30       	cpi	r25, 0x09	; 9
    5106:	50 f0       	brcs	.+20     	; 0x511c <display_putString+0x110>
    5108:	08 15       	cp	r16, r8
    510a:	19 05       	cpc	r17, r9
    510c:	3c f4       	brge	.+14     	; 0x511c <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	06 2c       	mov	r0, r6
    5112:	02 c0       	rjmp	.+4      	; 0x5118 <display_putString+0x10c>
    5114:	95 95       	asr	r25
    5116:	87 95       	ror	r24
    5118:	0a 94       	dec	r0
    511a:	e2 f7       	brpl	.-8      	; 0x5114 <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    511c:	f5 01       	movw	r30, r10
    511e:	e7 0f       	add	r30, r23
    5120:	f1 1d       	adc	r31, r1
    5122:	e9 58       	subi	r30, 0x89	; 137
    5124:	fd 4b       	sbci	r31, 0xBD	; 189
    5126:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5128:	3f 5f       	subi	r19, 0xFF	; 255
    512a:	11 96       	adiw	r26, 0x01	; 1
    512c:	73 2f       	mov	r23, r19
    512e:	76 0f       	add	r23, r22
    5130:	32 17       	cp	r19, r18
    5132:	30 f3       	brcs	.-52     	; 0x5100 <display_putString+0xf4>
    5134:	82 2f       	mov	r24, r18
    5136:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5138:	85 36       	cpi	r24, 0x65	; 101
    513a:	31 f0       	breq	.+12     	; 0x5148 <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    513c:	f5 01       	movw	r30, r10
    513e:	e8 0f       	add	r30, r24
    5140:	f1 1d       	adc	r31, r1
    5142:	e8 58       	subi	r30, 0x88	; 136
    5144:	fd 4b       	sbci	r31, 0xBD	; 189
    5146:	10 82       	st	Z, r1
 		}
		offset++;
    5148:	68 2f       	mov	r22, r24
    514a:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    514c:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    514e:	f1 01       	movw	r30, r2
    5150:	ed 0d       	add	r30, r13
    5152:	f1 1d       	adc	r31, r1
    5154:	e0 81       	ld	r30, Z
    5156:	ee 23       	and	r30, r30
    5158:	09 f0       	breq	.+2      	; 0x515c <display_putString+0x150>
    515a:	92 cf       	rjmp	.-220    	; 0x5080 <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    515c:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    515e:	4c 2d       	mov	r20, r12
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	ca 01       	movw	r24, r20
    5164:	f3 e0       	ldi	r31, 0x03	; 3
    5166:	88 0f       	add	r24, r24
    5168:	99 1f       	adc	r25, r25
    516a:	fa 95       	dec	r31
    516c:	e1 f7       	brne	.-8      	; 0x5166 <display_putString+0x15a>
    516e:	80 17       	cp	r24, r16
    5170:	91 07       	cpc	r25, r17
    5172:	e4 f4       	brge	.+56     	; 0x51ac <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5174:	4f 5f       	subi	r20, 0xFF	; 255
    5176:	5f 4f       	sbci	r21, 0xFF	; 255
    5178:	4a 01       	movw	r8, r20
    517a:	e3 e0       	ldi	r30, 0x03	; 3
    517c:	88 0c       	add	r8, r8
    517e:	99 1c       	adc	r9, r9
    5180:	ea 95       	dec	r30
    5182:	e1 f7       	brne	.-8      	; 0x517c <display_putString+0x170>
    5184:	41 50       	subi	r20, 0x01	; 1
    5186:	50 40       	sbci	r21, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5188:	34 01       	movw	r6, r8
    518a:	60 1a       	sub	r6, r16
    518c:	71 0a       	sbc	r7, r17
    518e:	6c 81       	ldd	r22, Y+4	; 0x04
    5190:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5192:	ca 01       	movw	r24, r20
    5194:	84 0d       	add	r24, r4
    5196:	95 1d       	adc	r25, r5
    5198:	a6 e6       	ldi	r26, 0x66	; 102
    519a:	b0 e0       	ldi	r27, 0x00	; 0
    519c:	8a 9f       	mul	r24, r26
    519e:	50 01       	movw	r10, r0
    51a0:	8b 9f       	mul	r24, r27
    51a2:	b0 0c       	add	r11, r0
    51a4:	9a 9f       	mul	r25, r26
    51a6:	b0 0c       	add	r11, r0
    51a8:	11 24       	eor	r1, r1
    51aa:	d1 cf       	rjmp	.-94     	; 0x514e <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    51ac:	28 96       	adiw	r28, 0x08	; 8
    51ae:	cd bf       	out	0x3d, r28	; 61
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	cf 91       	pop	r28
    51b4:	df 91       	pop	r29
    51b6:	1f 91       	pop	r17
    51b8:	0f 91       	pop	r16
    51ba:	ff 90       	pop	r15
    51bc:	ef 90       	pop	r14
    51be:	df 90       	pop	r13
    51c0:	cf 90       	pop	r12
    51c2:	bf 90       	pop	r11
    51c4:	af 90       	pop	r10
    51c6:	9f 90       	pop	r9
    51c8:	8f 90       	pop	r8
    51ca:	7f 90       	pop	r7
    51cc:	6f 90       	pop	r6
    51ce:	5f 90       	pop	r5
    51d0:	4f 90       	pop	r4
    51d2:	3f 90       	pop	r3
    51d4:	2f 90       	pop	r2
    51d6:	08 95       	ret

000051d8 <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    51d8:	28 2f       	mov	r18, r24
    51da:	26 95       	lsr	r18
    51dc:	26 95       	lsr	r18
    51de:	26 95       	lsr	r18
    51e0:	70 e0       	ldi	r23, 0x00	; 0
    51e2:	a8 2f       	mov	r26, r24
    51e4:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    51e6:	44 23       	and	r20, r20
    51e8:	d9 f0       	breq	.+54     	; 0x5220 <display_drawPixel+0x48>
    51ea:	30 e0       	ldi	r19, 0x00	; 0
    51ec:	86 e6       	ldi	r24, 0x66	; 102
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	28 9f       	mul	r18, r24
    51f2:	f0 01       	movw	r30, r0
    51f4:	29 9f       	mul	r18, r25
    51f6:	f0 0d       	add	r31, r0
    51f8:	38 9f       	mul	r19, r24
    51fa:	f0 0d       	add	r31, r0
    51fc:	11 24       	eor	r1, r1
    51fe:	e6 0f       	add	r30, r22
    5200:	f7 1f       	adc	r31, r23
    5202:	e9 58       	subi	r30, 0x89	; 137
    5204:	fd 4b       	sbci	r31, 0xBD	; 189
    5206:	20 81       	ld	r18, Z
    5208:	a7 70       	andi	r26, 0x07	; 7
    520a:	b0 70       	andi	r27, 0x00	; 0
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	02 c0       	rjmp	.+4      	; 0x5216 <display_drawPixel+0x3e>
    5212:	88 0f       	add	r24, r24
    5214:	99 1f       	adc	r25, r25
    5216:	aa 95       	dec	r26
    5218:	e2 f7       	brpl	.-8      	; 0x5212 <display_drawPixel+0x3a>
    521a:	28 2b       	or	r18, r24
    521c:	20 83       	st	Z, r18
    521e:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	86 e6       	ldi	r24, 0x66	; 102
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	28 9f       	mul	r18, r24
    5228:	f0 01       	movw	r30, r0
    522a:	29 9f       	mul	r18, r25
    522c:	f0 0d       	add	r31, r0
    522e:	38 9f       	mul	r19, r24
    5230:	f0 0d       	add	r31, r0
    5232:	11 24       	eor	r1, r1
    5234:	e6 0f       	add	r30, r22
    5236:	f7 1f       	adc	r31, r23
    5238:	e9 58       	subi	r30, 0x89	; 137
    523a:	fd 4b       	sbci	r31, 0xBD	; 189
    523c:	20 81       	ld	r18, Z
    523e:	a7 70       	andi	r26, 0x07	; 7
    5240:	b0 70       	andi	r27, 0x00	; 0
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	02 c0       	rjmp	.+4      	; 0x524c <display_drawPixel+0x74>
    5248:	88 0f       	add	r24, r24
    524a:	99 1f       	adc	r25, r25
    524c:	aa 95       	dec	r26
    524e:	e2 f7       	brpl	.-8      	; 0x5248 <display_drawPixel+0x70>
    5250:	80 95       	com	r24
    5252:	82 23       	and	r24, r18
    5254:	80 83       	st	Z, r24
    5256:	08 95       	ret

00005258 <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5258:	dc 01       	movw	r26, r24
    525a:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    525c:	90 81       	ld	r25, Z
	*val2 = *val1;
    525e:	8c 91       	ld	r24, X
    5260:	80 83       	st	Z, r24
	*val1 = tempVal;
    5262:	9c 93       	st	X, r25
}
    5264:	08 95       	ret

00005266 <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5266:	df 92       	push	r13
    5268:	ef 92       	push	r14
    526a:	ff 92       	push	r15
    526c:	0f 93       	push	r16
    526e:	1f 93       	push	r17
    5270:	cf 93       	push	r28
    5272:	df 93       	push	r29
    5274:	f8 2e       	mov	r15, r24
    5276:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5278:	84 17       	cp	r24, r20
    527a:	d9 f4       	brne	.+54     	; 0x52b2 <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    527c:	26 17       	cp	r18, r22
    527e:	18 f4       	brcc	.+6      	; 0x5286 <display_drawLine+0x20>
    5280:	dd 24       	eor	r13, r13
    5282:	da 94       	dec	r13
    5284:	02 c0       	rjmp	.+4      	; 0x528a <display_drawLine+0x24>
    5286:	dd 24       	eor	r13, r13
    5288:	d3 94       	inc	r13
		j = column1;
    528a:	1e 2d       	mov	r17, r14
		while (j != column2) {
    528c:	c2 2f       	mov	r28, r18
    528e:	d0 e0       	ldi	r29, 0x00	; 0
    5290:	06 c0       	rjmp	.+12     	; 0x529e <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5292:	8f 2d       	mov	r24, r15
    5294:	61 2f       	mov	r22, r17
    5296:	40 2f       	mov	r20, r16
    5298:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
    529c:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    529e:	81 2f       	mov	r24, r17
    52a0:	99 27       	eor	r25, r25
    52a2:	87 fd       	sbrc	r24, 7
    52a4:	90 95       	com	r25
    52a6:	8c 17       	cp	r24, r28
    52a8:	9d 07       	cpc	r25, r29
    52aa:	99 f7       	brne	.-26     	; 0x5292 <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    52ac:	8f 2d       	mov	r24, r15
    52ae:	61 2f       	mov	r22, r17
    52b0:	1c c0       	rjmp	.+56     	; 0x52ea <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    52b2:	62 17       	cp	r22, r18
    52b4:	e9 f4       	brne	.+58     	; 0x52f0 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    52b6:	48 17       	cp	r20, r24
    52b8:	18 f4       	brcc	.+6      	; 0x52c0 <display_drawLine+0x5a>
    52ba:	dd 24       	eor	r13, r13
    52bc:	da 94       	dec	r13
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <display_drawLine+0x5e>
    52c0:	dd 24       	eor	r13, r13
    52c2:	d3 94       	inc	r13
		i = row1;
    52c4:	1f 2d       	mov	r17, r15
		while(i != row2) {
    52c6:	c4 2f       	mov	r28, r20
    52c8:	d0 e0       	ldi	r29, 0x00	; 0
    52ca:	06 c0       	rjmp	.+12     	; 0x52d8 <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    52cc:	81 2f       	mov	r24, r17
    52ce:	6e 2d       	mov	r22, r14
    52d0:	40 2f       	mov	r20, r16
    52d2:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
    52d6:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    52d8:	81 2f       	mov	r24, r17
    52da:	99 27       	eor	r25, r25
    52dc:	87 fd       	sbrc	r24, 7
    52de:	90 95       	com	r25
    52e0:	8c 17       	cp	r24, r28
    52e2:	9d 07       	cpc	r25, r29
    52e4:	99 f7       	brne	.-26     	; 0x52cc <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    52e6:	81 2f       	mov	r24, r17
    52e8:	6e 2d       	mov	r22, r14
    52ea:	40 2f       	mov	r20, r16
    52ec:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
			
			
		}
		*/
	}
}
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	ff 90       	pop	r15
    52fa:	ef 90       	pop	r14
    52fc:	df 90       	pop	r13
    52fe:	08 95       	ret

00005300 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5300:	6f 92       	push	r6
    5302:	7f 92       	push	r7
    5304:	8f 92       	push	r8
    5306:	9f 92       	push	r9
    5308:	bf 92       	push	r11
    530a:	cf 92       	push	r12
    530c:	df 92       	push	r13
    530e:	ef 92       	push	r14
    5310:	ff 92       	push	r15
    5312:	0f 93       	push	r16
    5314:	1f 93       	push	r17
    5316:	cf 93       	push	r28
    5318:	df 93       	push	r29
    531a:	18 2f       	mov	r17, r24
    531c:	b6 2e       	mov	r11, r22
    531e:	d2 2e       	mov	r13, r18
    5320:	d6 0e       	add	r13, r22
    5322:	f4 2e       	mov	r15, r20
    5324:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5326:	00 23       	and	r16, r16
    5328:	c1 f4       	brne	.+48     	; 0x535a <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    532a:	41 2f       	mov	r20, r17
    532c:	2d 2d       	mov	r18, r13
    532e:	0c 2d       	mov	r16, r12
    5330:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5334:	8f 2d       	mov	r24, r15
    5336:	6b 2d       	mov	r22, r11
    5338:	4f 2d       	mov	r20, r15
    533a:	2d 2d       	mov	r18, r13
    533c:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5340:	81 2f       	mov	r24, r17
    5342:	6b 2d       	mov	r22, r11
    5344:	4f 2d       	mov	r20, r15
    5346:	2b 2d       	mov	r18, r11
    5348:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    534c:	81 2f       	mov	r24, r17
    534e:	6d 2d       	mov	r22, r13
    5350:	4f 2d       	mov	r20, r15
    5352:	2d 2d       	mov	r18, r13
    5354:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
    5358:	63 c0       	rjmp	.+198    	; 0x5420 <display_drawRectangle+0x120>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    535a:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    535c:	08 2f       	mov	r16, r24
    535e:	10 e0       	ldi	r17, 0x00	; 0
    5360:	04 0f       	add	r16, r20
    5362:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    5364:	cf 2d       	mov	r28, r15
    5366:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5368:	a7 e0       	ldi	r26, 0x07	; 7
    536a:	b0 e0       	ldi	r27, 0x00	; 0
    536c:	ac 1b       	sub	r26, r28
    536e:	bd 0b       	sbc	r27, r29
    5370:	3f ef       	ldi	r19, 0xFF	; 255
    5372:	83 2e       	mov	r8, r19
    5374:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5376:	26 e6       	ldi	r18, 0x66	; 102
    5378:	62 2e       	mov	r6, r18
    537a:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    537c:	98 e0       	ldi	r25, 0x08	; 8
    537e:	c9 2e       	mov	r12, r25
    5380:	49 c0       	rjmp	.+146    	; 0x5414 <display_drawRectangle+0x114>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    5382:	87 e0       	ldi	r24, 0x07	; 7
    5384:	f8 2e       	mov	r15, r24
    5386:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    5388:	6f 2d       	mov	r22, r15
    538a:	70 e0       	ldi	r23, 0x00	; 0
    538c:	c9 01       	movw	r24, r18
    538e:	07 96       	adiw	r24, 0x07	; 7
    5390:	86 1b       	sub	r24, r22
    5392:	97 0b       	sbc	r25, r23
    5394:	c8 17       	cp	r28, r24
    5396:	d9 07       	cpc	r29, r25
    5398:	44 f0       	brlt	.+16     	; 0x53aa <display_drawRectangle+0xaa>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    539a:	c4 01       	movw	r24, r8
    539c:	0f 2c       	mov	r0, r15
    539e:	02 c0       	rjmp	.+4      	; 0x53a4 <display_drawRectangle+0xa4>
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	0a 94       	dec	r0
    53a6:	e2 f7       	brpl	.-8      	; 0x53a0 <display_drawRectangle+0xa0>
    53a8:	08 c0       	rjmp	.+16     	; 0x53ba <display_drawRectangle+0xba>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    53aa:	2a 0f       	add	r18, r26
    53ac:	3b 1f       	adc	r19, r27
    53ae:	c4 01       	movw	r24, r8
    53b0:	02 c0       	rjmp	.+4      	; 0x53b6 <display_drawRectangle+0xb6>
    53b2:	95 95       	asr	r25
    53b4:	87 95       	ror	r24
    53b6:	2a 95       	dec	r18
    53b8:	e2 f7       	brpl	.-8      	; 0x53b2 <display_drawRectangle+0xb2>
    53ba:	28 2f       	mov	r18, r24
			}
			page = i/8;
    53bc:	85 2f       	mov	r24, r21
    53be:	86 95       	lsr	r24
    53c0:	86 95       	lsr	r24
    53c2:	86 95       	lsr	r24
    53c4:	3b 2d       	mov	r19, r11
    53c6:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    53c8:	86 9d       	mul	r24, r6
    53ca:	b0 01       	movw	r22, r0
    53cc:	87 9d       	mul	r24, r7
    53ce:	70 0d       	add	r23, r0
    53d0:	96 9d       	mul	r25, r6
    53d2:	70 0d       	add	r23, r0
    53d4:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    53d6:	42 2f       	mov	r20, r18
    53d8:	40 95       	com	r20
    53da:	17 c0       	rjmp	.+46     	; 0x540a <display_drawRectangle+0x10a>
    53dc:	e3 2f       	mov	r30, r19
    53de:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    53e0:	ee 20       	and	r14, r14
    53e2:	69 f0       	breq	.+26     	; 0x53fe <display_drawRectangle+0xfe>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    53e4:	e6 0f       	add	r30, r22
    53e6:	f7 1f       	adc	r31, r23
    53e8:	e9 58       	subi	r30, 0x89	; 137
    53ea:	fd 4b       	sbci	r31, 0xBD	; 189
    53ec:	80 81       	ld	r24, Z
    53ee:	90 81       	ld	r25, Z
    53f0:	82 23       	and	r24, r18
    53f2:	80 95       	com	r24
    53f4:	82 23       	and	r24, r18
    53f6:	94 23       	and	r25, r20
    53f8:	89 2b       	or	r24, r25
    53fa:	80 83       	st	Z, r24
    53fc:	05 c0       	rjmp	.+10     	; 0x5408 <display_drawRectangle+0x108>
				} else {
					displayBuffer[page][j] = byteOut;	
    53fe:	e6 0f       	add	r30, r22
    5400:	f7 1f       	adc	r31, r23
    5402:	e9 58       	subi	r30, 0x89	; 137
    5404:	fd 4b       	sbci	r31, 0xBD	; 189
    5406:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    5408:	3f 5f       	subi	r19, 0xFF	; 255
    540a:	d3 16       	cp	r13, r19
    540c:	38 f7       	brcc	.-50     	; 0x53dc <display_drawRectangle+0xdc>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    540e:	8c 2d       	mov	r24, r12
    5410:	8f 19       	sub	r24, r15
    5412:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    5414:	25 2f       	mov	r18, r21
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	02 17       	cp	r16, r18
    541a:	13 07       	cpc	r17, r19
    541c:	0c f0       	brlt	.+2      	; 0x5420 <display_drawRectangle+0x120>
    541e:	b1 cf       	rjmp	.-158    	; 0x5382 <display_drawRectangle+0x82>
			i += (8 - remainder);	
		}
	
	}
			
}
    5420:	df 91       	pop	r29
    5422:	cf 91       	pop	r28
    5424:	1f 91       	pop	r17
    5426:	0f 91       	pop	r16
    5428:	ff 90       	pop	r15
    542a:	ef 90       	pop	r14
    542c:	df 90       	pop	r13
    542e:	cf 90       	pop	r12
    5430:	bf 90       	pop	r11
    5432:	9f 90       	pop	r9
    5434:	8f 90       	pop	r8
    5436:	7f 90       	pop	r7
    5438:	6f 90       	pop	r6
    543a:	08 95       	ret

0000543c <Time_Init>:
	// fclk = 14745600
	// div  = 14400
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD0.PER = 14400;
    543c:	e0 e0       	ldi	r30, 0x00	; 0
    543e:	f9 e0       	ldi	r31, 0x09	; 9
    5440:	80 e4       	ldi	r24, 0x40	; 64
    5442:	98 e3       	ldi	r25, 0x38	; 56
    5444:	86 a3       	std	Z+38, r24	; 0x26
    5446:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    5448:	80 81       	ld	r24, Z
    544a:	80 7f       	andi	r24, 0xF0	; 240
    544c:	87 60       	ori	r24, 0x07	; 7
    544e:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5450:	86 81       	ldd	r24, Z+6	; 0x06
    5452:	8c 7f       	andi	r24, 0xFC	; 252
    5454:	82 60       	ori	r24, 0x02	; 2
    5456:	86 83       	std	Z+6, r24	; 0x06
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    5458:	88 e0       	ldi	r24, 0x08	; 8
    545a:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    545e:	80 ec       	ldi	r24, 0xC0	; 192
    5460:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    5464:	e0 e0       	ldi	r30, 0x00	; 0
    5466:	f8 e0       	ldi	r31, 0x08	; 8
    5468:	8f ef       	ldi	r24, 0xFF	; 255
    546a:	9f ef       	ldi	r25, 0xFF	; 255
    546c:	86 a3       	std	Z+38, r24	; 0x26
    546e:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    5470:	80 81       	ld	r24, Z
    5472:	80 7f       	andi	r24, 0xF0	; 240
    5474:	84 60       	ori	r24, 0x04	; 4
    5476:	80 83       	st	Z, r24
  
	
	
}
    5478:	08 95       	ret

0000547a <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    547a:	f8 94       	cli
  UNIX_time = time;
    547c:	60 93 b6 2b 	sts	0x2BB6, r22
    5480:	70 93 b7 2b 	sts	0x2BB7, r23
    5484:	80 93 b8 2b 	sts	0x2BB8, r24
    5488:	90 93 b9 2b 	sts	0x2BB9, r25
  sei();
    548c:	78 94       	sei
}
    548e:	08 95       	ret

00005490 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    5490:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    5492:	20 91 60 08 	lds	r18, 0x0860
    5496:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    549a:	60 91 20 08 	lds	r22, 0x0820
    549e:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    54a2:	80 91 60 08 	lds	r24, 0x0860
    54a6:	90 91 61 08 	lds	r25, 0x0861
    54aa:	28 17       	cp	r18, r24
    54ac:	39 07       	cpc	r19, r25
    54ae:	41 f0       	breq	.+16     	; 0x54c0 <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    54b0:	20 91 60 08 	lds	r18, 0x0860
    54b4:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    54b8:	60 91 20 08 	lds	r22, 0x0820
    54bc:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    54c0:	78 94       	sei
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	a9 01       	movw	r20, r18
    54c8:	33 27       	eor	r19, r19
    54ca:	22 27       	eor	r18, r18
    54cc:	cb 01       	movw	r24, r22
    54ce:	a0 e0       	ldi	r26, 0x00	; 0
    54d0:	b0 e0       	ldi	r27, 0x00	; 0
    54d2:	28 0f       	add	r18, r24
    54d4:	39 1f       	adc	r19, r25
    54d6:	4a 1f       	adc	r20, r26
    54d8:	5b 1f       	adc	r21, r27
  return result;
}
    54da:	b9 01       	movw	r22, r18
    54dc:	ca 01       	movw	r24, r20
    54de:	08 95       	ret

000054e0 <__vector_77>:


ISR(TCD0_OVF_vect)
{
    54e0:	1f 92       	push	r1
    54e2:	0f 92       	push	r0
    54e4:	0f b6       	in	r0, 0x3f	; 63
    54e6:	0f 92       	push	r0
    54e8:	11 24       	eor	r1, r1
    54ea:	8f 93       	push	r24
    54ec:	9f 93       	push	r25
    54ee:	af 93       	push	r26
    54f0:	bf 93       	push	r27
	UNIX_time++;
    54f2:	80 91 b6 2b 	lds	r24, 0x2BB6
    54f6:	90 91 b7 2b 	lds	r25, 0x2BB7
    54fa:	a0 91 b8 2b 	lds	r26, 0x2BB8
    54fe:	b0 91 b9 2b 	lds	r27, 0x2BB9
    5502:	01 96       	adiw	r24, 0x01	; 1
    5504:	a1 1d       	adc	r26, r1
    5506:	b1 1d       	adc	r27, r1
    5508:	80 93 b6 2b 	sts	0x2BB6, r24
    550c:	90 93 b7 2b 	sts	0x2BB7, r25
    5510:	a0 93 b8 2b 	sts	0x2BB8, r26
    5514:	b0 93 b9 2b 	sts	0x2BB9, r27
 }
    5518:	bf 91       	pop	r27
    551a:	af 91       	pop	r26
    551c:	9f 91       	pop	r25
    551e:	8f 91       	pop	r24
    5520:	0f 90       	pop	r0
    5522:	0f be       	out	0x3f, r0	; 63
    5524:	0f 90       	pop	r0
    5526:	1f 90       	pop	r1
    5528:	18 95       	reti

0000552a <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    552a:	e0 e0       	ldi	r30, 0x00	; 0
    552c:	f2 e0       	ldi	r31, 0x02	; 2
    552e:	92 e0       	ldi	r25, 0x02	; 2
    5530:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    5532:	8a e2       	ldi	r24, 0x2A	; 42
    5534:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5536:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    5538:	83 e2       	ldi	r24, 0x23	; 35
    553a:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    553c:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    553e:	88 e3       	ldi	r24, 0x38	; 56
    5540:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5542:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    5544:	81 e3       	ldi	r24, 0x31	; 49
    5546:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    5548:	84 81       	ldd	r24, Z+4	; 0x04
    554a:	88 7f       	andi	r24, 0xF8	; 248
    554c:	84 60       	ori	r24, 0x04	; 4
    554e:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    5550:	80 e1       	ldi	r24, 0x10	; 16
    5552:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    5554:	83 81       	ldd	r24, Z+3	; 0x03
    5556:	80 6c       	ori	r24, 0xC0	; 192
    5558:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    555a:	81 81       	ldd	r24, Z+1	; 0x01
    555c:	88 61       	ori	r24, 0x18	; 24
    555e:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    5560:	80 a1       	ldd	r24, Z+32	; 0x20
    5562:	80 68       	ori	r24, 0x80	; 128
    5564:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    5566:	80 a5       	ldd	r24, Z+40	; 0x28
    5568:	80 68       	ori	r24, 0x80	; 128
    556a:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    556c:	80 ad       	ldd	r24, Z+56	; 0x38
    556e:	80 68       	ori	r24, 0x80	; 128
    5570:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    5572:	80 a9       	ldd	r24, Z+48	; 0x30
    5574:	80 68       	ori	r24, 0x80	; 128
    5576:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    557c:	e0 e4       	ldi	r30, 0x40	; 64
    557e:	f9 e0       	ldi	r31, 0x09	; 9
    5580:	80 e4       	ldi	r24, 0x40	; 64
    5582:	98 e3       	ldi	r25, 0x38	; 56
    5584:	86 a3       	std	Z+38, r24	; 0x26
    5586:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    5588:	80 81       	ld	r24, Z
    558a:	80 7f       	andi	r24, 0xF0	; 240
    558c:	87 60       	ori	r24, 0x07	; 7
    558e:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    5590:	86 81       	ldd	r24, Z+6	; 0x06
    5592:	83 60       	ori	r24, 0x03	; 3
    5594:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    5596:	e0 e0       	ldi	r30, 0x00	; 0
    5598:	fb e0       	ldi	r31, 0x0B	; 11
    559a:	80 e0       	ldi	r24, 0x00	; 0
    559c:	91 e0       	ldi	r25, 0x01	; 1
    559e:	86 a3       	std	Z+38, r24	; 0x26
    55a0:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    55a2:	80 81       	ld	r24, Z
    55a4:	80 7f       	andi	r24, 0xF0	; 240
    55a6:	84 60       	ori	r24, 0x04	; 4
    55a8:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    55aa:	86 81       	ldd	r24, Z+6	; 0x06
    55ac:	83 60       	ori	r24, 0x03	; 3
    55ae:	86 83       	std	Z+6, r24	; 0x06

}
    55b0:	08 95       	ret

000055b2 <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    55b2:	e0 e0       	ldi	r30, 0x00	; 0
    55b4:	f2 e0       	ldi	r31, 0x02	; 2
    55b6:	60 89       	ldd	r22, Z+16	; 0x10
    55b8:	71 89       	ldd	r23, Z+17	; 0x11
    55ba:	80 e0       	ldi	r24, 0x00	; 0
    55bc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    55be:	2a ea       	ldi	r18, 0xAA	; 170
    55c0:	35 e2       	ldi	r19, 0x25	; 37
    55c2:	43 e0       	ldi	r20, 0x03	; 3
    55c4:	50 e0       	ldi	r21, 0x00	; 0
    55c6:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    55ca:	67 5f       	subi	r22, 0xF7	; 247
    55cc:	7a 40       	sbci	r23, 0x0A	; 10
    55ce:	88 4e       	sbci	r24, 0xE8	; 232
    55d0:	91 40       	sbci	r25, 0x01	; 1
    55d2:	21 e5       	ldi	r18, 0x51	; 81
    55d4:	37 e7       	ldi	r19, 0x77	; 119
    55d6:	45 e0       	ldi	r20, 0x05	; 5
    55d8:	50 e0       	ldi	r21, 0x00	; 0
    55da:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    55de:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    55e0:	08 95       	ret

000055e2 <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    55e2:	e0 e0       	ldi	r30, 0x00	; 0
    55e4:	f2 e0       	ldi	r31, 0x02	; 2
    55e6:	62 89       	ldd	r22, Z+18	; 0x12
    55e8:	73 89       	ldd	r23, Z+19	; 0x13
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    55ee:	27 ec       	ldi	r18, 0xC7	; 199
    55f0:	3d e1       	ldi	r19, 0x1D	; 29
    55f2:	40 e0       	ldi	r20, 0x00	; 0
    55f4:	50 e0       	ldi	r21, 0x00	; 0
    55f6:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    55fa:	6c 59       	subi	r22, 0x9C	; 156
    55fc:	7c 41       	sbci	r23, 0x1C	; 28
    55fe:	8b 41       	sbci	r24, 0x1B	; 27
    5600:	90 40       	sbci	r25, 0x00	; 0
    5602:	28 ed       	ldi	r18, 0xD8	; 216
    5604:	3f e3       	ldi	r19, 0x3F	; 63
    5606:	41 e0       	ldi	r20, 0x01	; 1
    5608:	50 e0       	ldi	r21, 0x00	; 0
    560a:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    560e:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    5610:	08 95       	ret

00005612 <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    5612:	e0 e0       	ldi	r30, 0x00	; 0
    5614:	f2 e0       	ldi	r31, 0x02	; 2
    5616:	86 89       	ldd	r24, Z+22	; 0x16
    5618:	97 89       	ldd	r25, Z+23	; 0x17
    561a:	f4 e0       	ldi	r31, 0x04	; 4
    561c:	96 95       	lsr	r25
    561e:	87 95       	ror	r24
    5620:	fa 95       	dec	r31
    5622:	e1 f7       	brne	.-8      	; 0x561c <Sensors_ReadMicrophone+0xa>
}
    5624:	08 95       	ret

00005626 <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    5626:	e0 e0       	ldi	r30, 0x00	; 0
    5628:	f2 e0       	ldi	r31, 0x02	; 2
    562a:	64 89       	ldd	r22, Z+20	; 0x14
    562c:	75 89       	ldd	r23, Z+21	; 0x15
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    5632:	22 e2       	ldi	r18, 0x22	; 34
    5634:	31 ea       	ldi	r19, 0xA1	; 161
    5636:	40 e0       	ldi	r20, 0x00	; 0
    5638:	50 e0       	ldi	r21, 0x00	; 0
    563a:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    563e:	6f 53       	subi	r22, 0x3F	; 63
    5640:	74 41       	sbci	r23, 0x14	; 20
    5642:	8e 49       	sbci	r24, 0x9E	; 158
    5644:	9f 4f       	sbci	r25, 0xFF	; 255
    5646:	27 ed       	ldi	r18, 0xD7	; 215
    5648:	36 e4       	ldi	r19, 0x46	; 70
    564a:	49 e0       	ldi	r20, 0x09	; 9
    564c:	50 e0       	ldi	r21, 0x00	; 0
    564e:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    5652:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    5654:	08 95       	ret

00005656 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    5656:	10 92 bf 2b 	sts	0x2BBF, r1
  	temperatureBufferToWriteTo = 1;
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	80 93 59 28 	sts	0x2859, r24
	okToSendTemperatureBuffer1 = false;
    5660:	10 92 bd 2b 	sts	0x2BBD, r1
	okToSendTemperatureBuffer2 = false;
    5664:	10 92 be 2b 	sts	0x2BBE, r1
}
    5668:	08 95       	ret

0000566a <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    566a:	10 92 c2 2b 	sts	0x2BC2, r1
	pressureBufferToWriteTo = 1;
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	80 93 5a 28 	sts	0x285A, r24
	okToSendPressureBuffer1 = false;
    5674:	10 92 c0 2b 	sts	0x2BC0, r1
	okToSendPressureBuffer2 = false;
    5678:	10 92 c1 2b 	sts	0x2BC1, r1
}
    567c:	08 95       	ret

0000567e <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    567e:	10 92 c5 2b 	sts	0x2BC5, r1
	humidityBufferToWriteTo = 1;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	80 93 5b 28 	sts	0x285B, r24
	okToSendHumidityBuffer1 = false;
    5688:	10 92 c3 2b 	sts	0x2BC3, r1
	okToSendHumidityBuffer2 = false;
    568c:	10 92 c4 2b 	sts	0x2BC4, r1
}
    5690:	08 95       	ret

00005692 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    5692:	10 92 c8 2b 	sts	0x2BC8, r1
    5696:	10 92 c9 2b 	sts	0x2BC9, r1
	microphoneBufferToWriteTo = 1;
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	80 93 5c 28 	sts	0x285C, r24
	okToSendMicrophoneBuffer1 = false;
    56a0:	10 92 c6 2b 	sts	0x2BC6, r1
	okToSendMicrophoneBuffer2 = false;
    56a4:	10 92 c7 2b 	sts	0x2BC7, r1
}
    56a8:	08 95       	ret

000056aa <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    56aa:	10 92 cc 2b 	sts	0x2BCC, r1
	lightBufferToWriteTo = 1;
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	80 93 5d 28 	sts	0x285D, r24
	okToSendLightBuffer1 = false;
    56b4:	10 92 ca 2b 	sts	0x2BCA, r1
	okToSendLightBuffer2 = false;
    56b8:	10 92 cb 2b 	sts	0x2BCB, r1
}
    56bc:	08 95       	ret

000056be <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    56be:	1f 92       	push	r1
    56c0:	0f 92       	push	r0
    56c2:	0f b6       	in	r0, 0x3f	; 63
    56c4:	0f 92       	push	r0
    56c6:	0b b6       	in	r0, 0x3b	; 59
    56c8:	0f 92       	push	r0
    56ca:	11 24       	eor	r1, r1
    56cc:	0f 93       	push	r16
    56ce:	1f 93       	push	r17
    56d0:	2f 93       	push	r18
    56d2:	3f 93       	push	r19
    56d4:	4f 93       	push	r20
    56d6:	5f 93       	push	r21
    56d8:	6f 93       	push	r22
    56da:	7f 93       	push	r23
    56dc:	8f 93       	push	r24
    56de:	9f 93       	push	r25
    56e0:	af 93       	push	r26
    56e2:	bf 93       	push	r27
    56e4:	ef 93       	push	r30
    56e6:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    56e8:	80 91 bb 2b 	lds	r24, 0x2BBB
    56ec:	88 23       	and	r24, r24
    56ee:	09 f4       	brne	.+2      	; 0x56f2 <__vector_108+0x34>
    56f0:	91 c0       	rjmp	.+290    	; 0x5814 <__vector_108+0x156>
    56f2:	80 91 61 28 	lds	r24, 0x2861
    56f6:	88 23       	and	r24, r24
    56f8:	09 f4       	brne	.+2      	; 0x56fc <__vector_108+0x3e>
    56fa:	8c c0       	rjmp	.+280    	; 0x5814 <__vector_108+0x156>
	  if(microphoneBufferToWriteTo == 1){
    56fc:	80 91 5c 28 	lds	r24, 0x285C
    5700:	81 30       	cpi	r24, 0x01	; 1
    5702:	09 f0       	breq	.+2      	; 0x5706 <__vector_108+0x48>
    5704:	43 c0       	rjmp	.+134    	; 0x578c <__vector_108+0xce>
	    if(microphoneBufferCounter == 0){
    5706:	80 91 c8 2b 	lds	r24, 0x2BC8
    570a:	90 91 c9 2b 	lds	r25, 0x2BC9
    570e:	89 2b       	or	r24, r25
    5710:	51 f4       	brne	.+20     	; 0x5726 <__vector_108+0x68>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    5712:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5716:	60 93 76 2b 	sts	0x2B76, r22
    571a:	70 93 77 2b 	sts	0x2B77, r23
    571e:	80 93 78 2b 	sts	0x2B78, r24
    5722:	90 93 79 2b 	sts	0x2B79, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    5726:	00 91 c8 2b 	lds	r16, 0x2BC8
    572a:	10 91 c9 2b 	lds	r17, 0x2BC9
    572e:	0e 94 09 2b 	call	0x5612	; 0x5612 <Sensors_ReadMicrophone>
    5732:	00 5a       	subi	r16, 0xA0	; 160
    5734:	18 4c       	sbci	r17, 0xC8	; 200
    5736:	f8 01       	movw	r30, r16
    5738:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    573a:	80 91 d5 2b 	lds	r24, 0x2BD5
    573e:	88 23       	and	r24, r24
    5740:	49 f4       	brne	.+18     	; 0x5754 <__vector_108+0x96>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    5742:	e0 91 c8 2b 	lds	r30, 0x2BC8
    5746:	f0 91 c9 2b 	lds	r31, 0x2BC9
    574a:	e0 5a       	subi	r30, 0xA0	; 160
    574c:	f8 4c       	sbci	r31, 0xC8	; 200
    574e:	80 81       	ld	r24, Z
    5750:	80 93 d4 2b 	sts	0x2BD4, r24
	    }
	    microphoneBufferCounter++;
    5754:	80 91 c8 2b 	lds	r24, 0x2BC8
    5758:	90 91 c9 2b 	lds	r25, 0x2BC9
    575c:	01 96       	adiw	r24, 0x01	; 1
    575e:	80 93 c8 2b 	sts	0x2BC8, r24
    5762:	90 93 c9 2b 	sts	0x2BC9, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    5766:	88 5e       	subi	r24, 0xE8	; 232
    5768:	93 40       	sbci	r25, 0x03	; 3
    576a:	09 f0       	breq	.+2      	; 0x576e <__vector_108+0xb0>
    576c:	5b c0       	rjmp	.+182    	; 0x5824 <__vector_108+0x166>
	    	quickMic = microphoneBuffer1[0];
    576e:	80 91 60 37 	lds	r24, 0x3760
    5772:	80 93 d4 2b 	sts	0x2BD4, r24
	    	microphoneBufferCounter=0;
    5776:	10 92 c8 2b 	sts	0x2BC8, r1
    577a:	10 92 c9 2b 	sts	0x2BC9, r1
	    	microphoneBufferToWriteTo = 2;
    577e:	82 e0       	ldi	r24, 0x02	; 2
    5780:	80 93 5c 28 	sts	0x285C, r24
	    	okToSendMicrophoneBuffer1 = true;
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	80 93 c6 2b 	sts	0x2BC6, r24
    578a:	4c c0       	rjmp	.+152    	; 0x5824 <__vector_108+0x166>
	    }
	  } else if (microphoneBufferToWriteTo == 2){
    578c:	82 30       	cpi	r24, 0x02	; 2
    578e:	09 f0       	breq	.+2      	; 0x5792 <__vector_108+0xd4>
    5790:	49 c0       	rjmp	.+146    	; 0x5824 <__vector_108+0x166>
	    if(microphoneBufferCounter == 0){
    5792:	80 91 c8 2b 	lds	r24, 0x2BC8
    5796:	90 91 c9 2b 	lds	r25, 0x2BC9
    579a:	89 2b       	or	r24, r25
    579c:	51 f4       	brne	.+20     	; 0x57b2 <__vector_108+0xf4>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    579e:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    57a2:	60 93 7a 2b 	sts	0x2B7A, r22
    57a6:	70 93 7b 2b 	sts	0x2B7B, r23
    57aa:	80 93 7c 2b 	sts	0x2B7C, r24
    57ae:	90 93 7d 2b 	sts	0x2B7D, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    57b2:	00 91 c8 2b 	lds	r16, 0x2BC8
    57b6:	10 91 c9 2b 	lds	r17, 0x2BC9
    57ba:	0e 94 09 2b 	call	0x5612	; 0x5612 <Sensors_ReadMicrophone>
    57be:	06 58       	subi	r16, 0x86	; 134
    57c0:	1d 4c       	sbci	r17, 0xCD	; 205
    57c2:	f8 01       	movw	r30, r16
    57c4:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    57c6:	80 91 d5 2b 	lds	r24, 0x2BD5
    57ca:	88 23       	and	r24, r24
    57cc:	49 f4       	brne	.+18     	; 0x57e0 <__vector_108+0x122>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    57ce:	e0 91 c8 2b 	lds	r30, 0x2BC8
    57d2:	f0 91 c9 2b 	lds	r31, 0x2BC9
    57d6:	e6 58       	subi	r30, 0x86	; 134
    57d8:	fd 4c       	sbci	r31, 0xCD	; 205
    57da:	80 81       	ld	r24, Z
    57dc:	80 93 d4 2b 	sts	0x2BD4, r24
	    }

	    microphoneBufferCounter++;
    57e0:	80 91 c8 2b 	lds	r24, 0x2BC8
    57e4:	90 91 c9 2b 	lds	r25, 0x2BC9
    57e8:	01 96       	adiw	r24, 0x01	; 1
    57ea:	80 93 c8 2b 	sts	0x2BC8, r24
    57ee:	90 93 c9 2b 	sts	0x2BC9, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    57f2:	88 5e       	subi	r24, 0xE8	; 232
    57f4:	93 40       	sbci	r25, 0x03	; 3
    57f6:	b1 f4       	brne	.+44     	; 0x5824 <__vector_108+0x166>
	    	quickMic = microphoneBuffer2[0];
    57f8:	80 91 7a 32 	lds	r24, 0x327A
    57fc:	80 93 d4 2b 	sts	0x2BD4, r24
	    	microphoneBufferCounter=0;
    5800:	10 92 c8 2b 	sts	0x2BC8, r1
    5804:	10 92 c9 2b 	sts	0x2BC9, r1
	    	microphoneBufferToWriteTo = 1;
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	80 93 5c 28 	sts	0x285C, r24
	    	okToSendMicrophoneBuffer2 = true;
    580e:	80 93 c7 2b 	sts	0x2BC7, r24
    5812:	08 c0       	rjmp	.+16     	; 0x5824 <__vector_108+0x166>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    5814:	80 91 d5 2b 	lds	r24, 0x2BD5
    5818:	88 23       	and	r24, r24
    581a:	21 f4       	brne	.+8      	; 0x5824 <__vector_108+0x166>
			quickMic = Sensors_ReadMicrophone();
    581c:	0e 94 09 2b 	call	0x5612	; 0x5612 <Sensors_ReadMicrophone>
    5820:	80 93 d4 2b 	sts	0x2BD4, r24
		}
	}
	micSampleCounter++;
    5824:	80 91 d5 2b 	lds	r24, 0x2BD5
    5828:	8f 5f       	subi	r24, 0xFF	; 255
    582a:	80 93 d5 2b 	sts	0x2BD5, r24
}
    582e:	ff 91       	pop	r31
    5830:	ef 91       	pop	r30
    5832:	bf 91       	pop	r27
    5834:	af 91       	pop	r26
    5836:	9f 91       	pop	r25
    5838:	8f 91       	pop	r24
    583a:	7f 91       	pop	r23
    583c:	6f 91       	pop	r22
    583e:	5f 91       	pop	r21
    5840:	4f 91       	pop	r20
    5842:	3f 91       	pop	r19
    5844:	2f 91       	pop	r18
    5846:	1f 91       	pop	r17
    5848:	0f 91       	pop	r16
    584a:	0f 90       	pop	r0
    584c:	0b be       	out	0x3b, r0	; 59
    584e:	0f 90       	pop	r0
    5850:	0f be       	out	0x3f, r0	; 63
    5852:	0f 90       	pop	r0
    5854:	1f 90       	pop	r1
    5856:	18 95       	reti

00005858 <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    5858:	30 91 15 3c 	lds	r19, 0x3C15
    585c:	93 2f       	mov	r25, r19
    585e:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    5860:	28 2f       	mov	r18, r24
    5862:	20 68       	ori	r18, 0x80	; 128
    5864:	20 93 76 42 	sts	0x4276, r18


	LightPort.MASTER.ADDR = writeAddress;
    5868:	e0 e8       	ldi	r30, 0x80	; 128
    586a:	f4 e0       	ldi	r31, 0x04	; 4
    586c:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    586e:	80 91 84 04 	lds	r24, 0x0484
    5872:	86 ff       	sbrs	r24, 6
    5874:	fc cf       	rjmp	.-8      	; 0x586e <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    5876:	e0 e8       	ldi	r30, 0x80	; 128
    5878:	f4 e0       	ldi	r31, 0x04	; 4
    587a:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    587c:	80 91 84 04 	lds	r24, 0x0484
    5880:	86 ff       	sbrs	r24, 6
    5882:	fc cf       	rjmp	.-8      	; 0x587c <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    5884:	83 2f       	mov	r24, r19
    5886:	81 60       	ori	r24, 0x01	; 1
    5888:	80 93 c0 3b 	sts	0x3BC0, r24
	LightPort.MASTER.ADDR = writeAddress;
    588c:	e0 e8       	ldi	r30, 0x80	; 128
    588e:	f4 e0       	ldi	r31, 0x04	; 4
    5890:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    5892:	80 91 84 04 	lds	r24, 0x0484
    5896:	87 ff       	sbrs	r24, 7
    5898:	fc cf       	rjmp	.-8      	; 0x5892 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    589a:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    589e:	97 e0       	ldi	r25, 0x07	; 7
    58a0:	e0 e8       	ldi	r30, 0x80	; 128
    58a2:	f4 e0       	ldi	r31, 0x04	; 4
    58a4:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    58a6:	08 95       	ret

000058a8 <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    58a8:	80 e0       	ldi	r24, 0x00	; 0
    58aa:	0e 94 2c 2c 	call	0x5858	; 0x5858 <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    58ae:	20 91 15 3c 	lds	r18, 0x3C15
    58b2:	92 2f       	mov	r25, r18
    58b4:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    58b6:	80 e9       	ldi	r24, 0x90	; 144
    58b8:	80 93 76 42 	sts	0x4276, r24

	LightPort.MASTER.ADDR = writeAddress;
    58bc:	e0 e8       	ldi	r30, 0x80	; 128
    58be:	f4 e0       	ldi	r31, 0x04	; 4
    58c0:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    58c2:	80 91 84 04 	lds	r24, 0x0484
    58c6:	86 ff       	sbrs	r24, 6
    58c8:	fc cf       	rjmp	.-8      	; 0x58c2 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    58ca:	80 e9       	ldi	r24, 0x90	; 144
    58cc:	e0 e8       	ldi	r30, 0x80	; 128
    58ce:	f4 e0       	ldi	r31, 0x04	; 4
    58d0:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    58d2:	80 91 84 04 	lds	r24, 0x0484
    58d6:	86 ff       	sbrs	r24, 6
    58d8:	fc cf       	rjmp	.-8      	; 0x58d2 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    58da:	82 2f       	mov	r24, r18
    58dc:	81 60       	ori	r24, 0x01	; 1
    58de:	80 93 c0 3b 	sts	0x3BC0, r24
	LightPort.MASTER.ADDR = writeAddress;
    58e2:	e0 e8       	ldi	r30, 0x80	; 128
    58e4:	f4 e0       	ldi	r31, 0x04	; 4
    58e6:	86 83       	std	Z+6, r24	; 0x06
    58e8:	e8 ef       	ldi	r30, 0xF8	; 248
    58ea:	fb e3       	ldi	r31, 0x3B	; 59
    58ec:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    58ee:	a0 e8       	ldi	r26, 0x80	; 128
    58f0:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    58f2:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    58f4:	80 91 84 04 	lds	r24, 0x0484
    58f8:	87 ff       	sbrs	r24, 7
    58fa:	fc cf       	rjmp	.-8      	; 0x58f4 <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    58fc:	80 91 87 04 	lds	r24, 0x0487
    5900:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    5902:	97 30       	cpi	r25, 0x07	; 7
    5904:	19 f0       	breq	.+6      	; 0x590c <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5906:	13 96       	adiw	r26, 0x03	; 3
    5908:	2c 93       	st	X, r18
    590a:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    590c:	9f 5f       	subi	r25, 0xFF	; 255
    590e:	31 96       	adiw	r30, 0x01	; 1
    5910:	98 30       	cpi	r25, 0x08	; 8
    5912:	81 f7       	brne	.-32     	; 0x58f4 <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    5914:	87 e0       	ldi	r24, 0x07	; 7
    5916:	e0 e8       	ldi	r30, 0x80	; 128
    5918:	f4 e0       	ldi	r31, 0x04	; 4
    591a:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    591c:	90 91 f9 3b 	lds	r25, 0x3BF9
    5920:	80 e0       	ldi	r24, 0x00	; 0
    5922:	20 91 f8 3b 	lds	r18, 0x3BF8
    5926:	82 0f       	add	r24, r18
    5928:	91 1d       	adc	r25, r1
    592a:	80 93 1b 2e 	sts	0x2E1B, r24
    592e:	90 93 1c 2e 	sts	0x2E1C, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    5932:	90 91 fb 3b 	lds	r25, 0x3BFB
    5936:	80 e0       	ldi	r24, 0x00	; 0
    5938:	20 91 fa 3b 	lds	r18, 0x3BFA
    593c:	82 0f       	add	r24, r18
    593e:	91 1d       	adc	r25, r1
    5940:	80 93 1d 2e 	sts	0x2E1D, r24
    5944:	90 93 1e 2e 	sts	0x2E1E, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    5948:	90 91 fd 3b 	lds	r25, 0x3BFD
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	20 91 fc 3b 	lds	r18, 0x3BFC
    5952:	82 0f       	add	r24, r18
    5954:	91 1d       	adc	r25, r1
    5956:	80 93 1f 2e 	sts	0x2E1F, r24
    595a:	90 93 20 2e 	sts	0x2E20, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    595e:	90 91 ff 3b 	lds	r25, 0x3BFF
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	20 91 fe 3b 	lds	r18, 0x3BFE
    5968:	82 0f       	add	r24, r18
    596a:	91 1d       	adc	r25, r1
    596c:	80 93 21 2e 	sts	0x2E21, r24
    5970:	90 93 22 2e 	sts	0x2E22, r25
}
    5974:	08 95       	ret

00005976 <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    5976:	e8 2f       	mov	r30, r24
    5978:	f0 e0       	ldi	r31, 0x00	; 0
    597a:	ee 0f       	add	r30, r30
    597c:	ff 1f       	adc	r31, r31
    597e:	e5 5e       	subi	r30, 0xE5	; 229
    5980:	f1 4d       	sbci	r31, 0xD1	; 209
	return colors[color];
}
    5982:	80 81       	ld	r24, Z
    5984:	91 81       	ldd	r25, Z+1	; 0x01
    5986:	08 95       	ret

00005988 <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    5988:	90 91 15 3c 	lds	r25, 0x3C15
    598c:	9e 7f       	andi	r25, 0xFE	; 254
    598e:	90 93 c0 3b 	sts	0x3BC0, r25
	commandCode = 0b10000000 | location;
    5992:	28 2f       	mov	r18, r24
    5994:	20 68       	ori	r18, 0x80	; 128
    5996:	20 93 76 42 	sts	0x4276, r18

	LightPort.MASTER.ADDR = writeAddress;
    599a:	e0 e8       	ldi	r30, 0x80	; 128
    599c:	f4 e0       	ldi	r31, 0x04	; 4
    599e:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    59a0:	80 91 84 04 	lds	r24, 0x0484
    59a4:	86 ff       	sbrs	r24, 6
    59a6:	fc cf       	rjmp	.-8      	; 0x59a0 <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    59a8:	e0 e8       	ldi	r30, 0x80	; 128
    59aa:	f4 e0       	ldi	r31, 0x04	; 4
    59ac:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    59ae:	80 91 84 04 	lds	r24, 0x0484
    59b2:	86 ff       	sbrs	r24, 6
    59b4:	fc cf       	rjmp	.-8      	; 0x59ae <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    59b6:	e0 e8       	ldi	r30, 0x80	; 128
    59b8:	f4 e0       	ldi	r31, 0x04	; 4
    59ba:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    59bc:	80 91 84 04 	lds	r24, 0x0484
    59c0:	86 ff       	sbrs	r24, 6
    59c2:	fc cf       	rjmp	.-8      	; 0x59bc <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    59c4:	87 e0       	ldi	r24, 0x07	; 7
    59c6:	e0 e8       	ldi	r30, 0x80	; 128
    59c8:	f4 e0       	ldi	r31, 0x04	; 4
    59ca:	83 83       	std	Z+3, r24	; 0x03

}
    59cc:	08 95       	ret

000059ce <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    59ce:	80 e0       	ldi	r24, 0x00	; 0
    59d0:	61 e0       	ldi	r22, 0x01	; 1
    59d2:	0e 94 c4 2c 	call	0x5988	; 0x5988 <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    59d6:	80 91 ba 2b 	lds	r24, 0x2BBA
    59da:	e3 e2       	ldi	r30, 0x23	; 35
    59dc:	f8 e2       	ldi	r31, 0x28	; 40
    59de:	e8 0f       	add	r30, r24
    59e0:	f1 1d       	adc	r31, r1
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	60 81       	ld	r22, Z
    59e6:	0e 94 c4 2c 	call	0x5988	; 0x5988 <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    59ea:	80 91 ba 2b 	lds	r24, 0x2BBA
    59ee:	ec e2       	ldi	r30, 0x2C	; 44
    59f0:	f8 e2       	ldi	r31, 0x28	; 40
    59f2:	e8 0f       	add	r30, r24
    59f4:	f1 1d       	adc	r31, r1
    59f6:	87 e0       	ldi	r24, 0x07	; 7
    59f8:	60 81       	ld	r22, Z
    59fa:	0e 94 c4 2c 	call	0x5988	; 0x5988 <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    59fe:	80 e0       	ldi	r24, 0x00	; 0
    5a00:	63 e0       	ldi	r22, 0x03	; 3
    5a02:	0e 94 c4 2c 	call	0x5988	; 0x5988 <Light_writeByte>
}
    5a06:	08 95       	ret

00005a08 <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    5a08:	80 93 15 3c 	sts	0x3C15, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    5a0c:	e0 e8       	ldi	r30, 0x80	; 128
    5a0e:	f4 e0       	ldi	r31, 0x04	; 4
    5a10:	88 e0       	ldi	r24, 0x08	; 8
    5a12:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    5a14:	84 e0       	ldi	r24, 0x04	; 4
    5a16:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    5a18:	8d e0       	ldi	r24, 0x0D	; 13
    5a1a:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    5a20:	10 92 ba 2b 	sts	0x2BBA, r1
	Light_setGain();
    5a24:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <Light_setGain>
}
    5a28:	08 95       	ret

00005a2a <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    5a2a:	1f 92       	push	r1
    5a2c:	0f 92       	push	r0
    5a2e:	0f b6       	in	r0, 0x3f	; 63
    5a30:	0f 92       	push	r0
    5a32:	0b b6       	in	r0, 0x3b	; 59
    5a34:	0f 92       	push	r0
    5a36:	11 24       	eor	r1, r1
    5a38:	6f 92       	push	r6
    5a3a:	7f 92       	push	r7
    5a3c:	8f 92       	push	r8
    5a3e:	9f 92       	push	r9
    5a40:	af 92       	push	r10
    5a42:	bf 92       	push	r11
    5a44:	cf 92       	push	r12
    5a46:	df 92       	push	r13
    5a48:	ef 92       	push	r14
    5a4a:	ff 92       	push	r15
    5a4c:	0f 93       	push	r16
    5a4e:	1f 93       	push	r17
    5a50:	2f 93       	push	r18
    5a52:	3f 93       	push	r19
    5a54:	4f 93       	push	r20
    5a56:	5f 93       	push	r21
    5a58:	6f 93       	push	r22
    5a5a:	7f 93       	push	r23
    5a5c:	8f 93       	push	r24
    5a5e:	9f 93       	push	r25
    5a60:	af 93       	push	r26
    5a62:	bf 93       	push	r27
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
    5a68:	ef 93       	push	r30
    5a6a:	ff 93       	push	r31
	if(recording){
    5a6c:	80 91 bb 2b 	lds	r24, 0x2BBB
    5a70:	88 23       	and	r24, r24
    5a72:	09 f4       	brne	.+2      	; 0x5a76 <__vector_83+0x4c>
    5a74:	a0 c2       	rjmp	.+1344   	; 0x5fb6 <__vector_83+0x58c>
	  rtcBlockCounter++;
    5a76:	80 91 ce 2b 	lds	r24, 0x2BCE
    5a7a:	8f 5f       	subi	r24, 0xFF	; 255
    5a7c:	80 93 ce 2b 	sts	0x2BCE, r24
	  if(rtcBlockCounter == 0){
    5a80:	88 23       	and	r24, r24
    5a82:	19 f4       	brne	.+6      	; 0x5a8a <__vector_83+0x60>
	    okToSendRTCBlock = true;
    5a84:	81 e0       	ldi	r24, 0x01	; 1
    5a86:	80 93 cd 2b 	sts	0x2BCD, r24
	  }

	  if(wantToRecordTemperature){
    5a8a:	80 91 5e 28 	lds	r24, 0x285E
    5a8e:	88 23       	and	r24, r24
    5a90:	09 f4       	brne	.+2      	; 0x5a94 <__vector_83+0x6a>
    5a92:	75 c0       	rjmp	.+234    	; 0x5b7e <__vector_83+0x154>
		  if(temperatureBufferToWriteTo == 1){
    5a94:	80 91 59 28 	lds	r24, 0x2859
    5a98:	81 30       	cpi	r24, 0x01	; 1
    5a9a:	c9 f5       	brne	.+114    	; 0x5b0e <__vector_83+0xe4>
			  if(temperatureBufferCounter == 0){
    5a9c:	80 91 bf 2b 	lds	r24, 0x2BBF
    5aa0:	88 23       	and	r24, r24
    5aa2:	51 f4       	brne	.+20     	; 0x5ab8 <__vector_83+0x8e>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    5aa4:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5aa8:	60 93 5e 2b 	sts	0x2B5E, r22
    5aac:	70 93 5f 2b 	sts	0x2B5F, r23
    5ab0:	80 93 60 2b 	sts	0x2B60, r24
    5ab4:	90 93 61 2b 	sts	0x2B61, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    5ab8:	80 91 bf 2b 	lds	r24, 0x2BBF
    5abc:	c8 2f       	mov	r28, r24
    5abe:	d0 e0       	ldi	r29, 0x00	; 0
    5ac0:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <Sensors_ReadTemperature>
    5ac4:	cc 0f       	add	r28, r28
    5ac6:	dd 1f       	adc	r29, r29
    5ac8:	c8 5b       	subi	r28, 0xB8	; 184
    5aca:	d4 4c       	sbci	r29, 0xC4	; 196
    5acc:	88 83       	st	Y, r24
    5ace:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    5ad0:	20 91 bf 2b 	lds	r18, 0x2BBF
    5ad4:	e2 2f       	mov	r30, r18
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	ee 0f       	add	r30, r30
    5ada:	ff 1f       	adc	r31, r31
    5adc:	e8 5b       	subi	r30, 0xB8	; 184
    5ade:	f4 4c       	sbci	r31, 0xC4	; 196
    5ae0:	80 81       	ld	r24, Z
    5ae2:	91 81       	ldd	r25, Z+1	; 0x01
    5ae4:	6a e0       	ldi	r22, 0x0A	; 10
    5ae6:	70 e0       	ldi	r23, 0x00	; 0
    5ae8:	0e 94 b3 49 	call	0x9366	; 0x9366 <__udivmodhi4>
    5aec:	60 93 cf 2b 	sts	0x2BCF, r22
			  temperatureBufferCounter++;
    5af0:	2f 5f       	subi	r18, 0xFF	; 255
    5af2:	20 93 bf 2b 	sts	0x2BBF, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    5af6:	2a 30       	cpi	r18, 0x0A	; 10
    5af8:	09 f0       	breq	.+2      	; 0x5afc <__vector_83+0xd2>
    5afa:	41 c0       	rjmp	.+130    	; 0x5b7e <__vector_83+0x154>
				  temperatureBufferCounter=0;
    5afc:	10 92 bf 2b 	sts	0x2BBF, r1
				  temperatureBufferToWriteTo = 2;
    5b00:	82 e0       	ldi	r24, 0x02	; 2
    5b02:	80 93 59 28 	sts	0x2859, r24
				  okToSendTemperatureBuffer1 = true;
    5b06:	81 e0       	ldi	r24, 0x01	; 1
    5b08:	80 93 bd 2b 	sts	0x2BBD, r24
    5b0c:	38 c0       	rjmp	.+112    	; 0x5b7e <__vector_83+0x154>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    5b0e:	82 30       	cpi	r24, 0x02	; 2
    5b10:	b1 f5       	brne	.+108    	; 0x5b7e <__vector_83+0x154>
			  if(temperatureBufferCounter == 0){
    5b12:	80 91 bf 2b 	lds	r24, 0x2BBF
    5b16:	88 23       	and	r24, r24
    5b18:	51 f4       	brne	.+20     	; 0x5b2e <__vector_83+0x104>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    5b1a:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5b1e:	60 93 62 2b 	sts	0x2B62, r22
    5b22:	70 93 63 2b 	sts	0x2B63, r23
    5b26:	80 93 64 2b 	sts	0x2B64, r24
    5b2a:	90 93 65 2b 	sts	0x2B65, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    5b2e:	80 91 bf 2b 	lds	r24, 0x2BBF
    5b32:	c8 2f       	mov	r28, r24
    5b34:	d0 e0       	ldi	r29, 0x00	; 0
    5b36:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <Sensors_ReadTemperature>
    5b3a:	cc 0f       	add	r28, r28
    5b3c:	dd 1f       	adc	r29, r29
    5b3e:	cf 53       	subi	r28, 0x3F	; 63
    5b40:	d4 4c       	sbci	r29, 0xC4	; 196
    5b42:	88 83       	st	Y, r24
    5b44:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    5b46:	20 91 bf 2b 	lds	r18, 0x2BBF
    5b4a:	e2 2f       	mov	r30, r18
    5b4c:	f0 e0       	ldi	r31, 0x00	; 0
    5b4e:	ee 0f       	add	r30, r30
    5b50:	ff 1f       	adc	r31, r31
    5b52:	ef 53       	subi	r30, 0x3F	; 63
    5b54:	f4 4c       	sbci	r31, 0xC4	; 196
    5b56:	80 81       	ld	r24, Z
    5b58:	91 81       	ldd	r25, Z+1	; 0x01
    5b5a:	6a e0       	ldi	r22, 0x0A	; 10
    5b5c:	70 e0       	ldi	r23, 0x00	; 0
    5b5e:	0e 94 b3 49 	call	0x9366	; 0x9366 <__udivmodhi4>
    5b62:	60 93 cf 2b 	sts	0x2BCF, r22
			  temperatureBufferCounter++;
    5b66:	2f 5f       	subi	r18, 0xFF	; 255
    5b68:	20 93 bf 2b 	sts	0x2BBF, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    5b6c:	2a 30       	cpi	r18, 0x0A	; 10
    5b6e:	39 f4       	brne	.+14     	; 0x5b7e <__vector_83+0x154>
				  temperatureBufferCounter=0;
    5b70:	10 92 bf 2b 	sts	0x2BBF, r1
				  temperatureBufferToWriteTo = 1;
    5b74:	81 e0       	ldi	r24, 0x01	; 1
    5b76:	80 93 59 28 	sts	0x2859, r24
				  okToSendTemperatureBuffer2 = true;
    5b7a:	80 93 be 2b 	sts	0x2BBE, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    5b7e:	80 91 60 28 	lds	r24, 0x2860
    5b82:	88 23       	and	r24, r24
    5b84:	09 f4       	brne	.+2      	; 0x5b88 <__vector_83+0x15e>
    5b86:	60 c0       	rjmp	.+192    	; 0x5c48 <__vector_83+0x21e>
		  if(humidityBufferToWriteTo == 1){
    5b88:	80 91 5b 28 	lds	r24, 0x285B
    5b8c:	81 30       	cpi	r24, 0x01	; 1
    5b8e:	71 f5       	brne	.+92     	; 0x5bec <__vector_83+0x1c2>
			  if(humidityBufferCounter == 0){
    5b90:	80 91 c5 2b 	lds	r24, 0x2BC5
    5b94:	88 23       	and	r24, r24
    5b96:	51 f4       	brne	.+20     	; 0x5bac <__vector_83+0x182>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    5b98:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5b9c:	60 93 66 2b 	sts	0x2B66, r22
    5ba0:	70 93 67 2b 	sts	0x2B67, r23
    5ba4:	80 93 68 2b 	sts	0x2B68, r24
    5ba8:	90 93 69 2b 	sts	0x2B69, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    5bac:	80 91 c5 2b 	lds	r24, 0x2BC5
    5bb0:	c8 2f       	mov	r28, r24
    5bb2:	d0 e0       	ldi	r29, 0x00	; 0
    5bb4:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Sensors_ReadHumidity>
    5bb8:	c6 5f       	subi	r28, 0xF6	; 246
    5bba:	d3 4c       	sbci	r29, 0xC3	; 195
    5bbc:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer1[humidityBufferCounter];
    5bbe:	90 91 c5 2b 	lds	r25, 0x2BC5
    5bc2:	e9 2f       	mov	r30, r25
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	e6 5f       	subi	r30, 0xF6	; 246
    5bc8:	f3 4c       	sbci	r31, 0xC3	; 195
    5bca:	80 81       	ld	r24, Z
    5bcc:	80 93 d0 2b 	sts	0x2BD0, r24
			  humidityBufferCounter++;
    5bd0:	9f 5f       	subi	r25, 0xFF	; 255
    5bd2:	90 93 c5 2b 	sts	0x2BC5, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    5bd6:	9a 30       	cpi	r25, 0x0A	; 10
    5bd8:	b9 f5       	brne	.+110    	; 0x5c48 <__vector_83+0x21e>
				  humidityBufferCounter=0;
    5bda:	10 92 c5 2b 	sts	0x2BC5, r1
				  humidityBufferToWriteTo = 2;
    5bde:	82 e0       	ldi	r24, 0x02	; 2
    5be0:	80 93 5b 28 	sts	0x285B, r24
				  okToSendHumidityBuffer1 = true;
    5be4:	81 e0       	ldi	r24, 0x01	; 1
    5be6:	80 93 c3 2b 	sts	0x2BC3, r24
    5bea:	2e c0       	rjmp	.+92     	; 0x5c48 <__vector_83+0x21e>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    5bec:	82 30       	cpi	r24, 0x02	; 2
    5bee:	61 f5       	brne	.+88     	; 0x5c48 <__vector_83+0x21e>
			  if(humidityBufferCounter == 0){
    5bf0:	80 91 c5 2b 	lds	r24, 0x2BC5
    5bf4:	88 23       	and	r24, r24
    5bf6:	51 f4       	brne	.+20     	; 0x5c0c <__vector_83+0x1e2>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    5bf8:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5bfc:	60 93 6a 2b 	sts	0x2B6A, r22
    5c00:	70 93 6b 2b 	sts	0x2B6B, r23
    5c04:	80 93 6c 2b 	sts	0x2B6C, r24
    5c08:	90 93 6d 2b 	sts	0x2B6D, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    5c0c:	80 91 c5 2b 	lds	r24, 0x2BC5
    5c10:	c8 2f       	mov	r28, r24
    5c12:	d0 e0       	ldi	r29, 0x00	; 0
    5c14:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Sensors_ReadHumidity>
    5c18:	ce 59       	subi	r28, 0x9E	; 158
    5c1a:	dd 4b       	sbci	r29, 0xBD	; 189
    5c1c:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer2[humidityBufferCounter];
    5c1e:	90 91 c5 2b 	lds	r25, 0x2BC5
    5c22:	e9 2f       	mov	r30, r25
    5c24:	f0 e0       	ldi	r31, 0x00	; 0
    5c26:	ee 59       	subi	r30, 0x9E	; 158
    5c28:	fd 4b       	sbci	r31, 0xBD	; 189
    5c2a:	80 81       	ld	r24, Z
    5c2c:	80 93 d0 2b 	sts	0x2BD0, r24
			  humidityBufferCounter++;
    5c30:	9f 5f       	subi	r25, 0xFF	; 255
    5c32:	90 93 c5 2b 	sts	0x2BC5, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    5c36:	9a 30       	cpi	r25, 0x0A	; 10
    5c38:	39 f4       	brne	.+14     	; 0x5c48 <__vector_83+0x21e>
				  humidityBufferCounter=0;
    5c3a:	10 92 c5 2b 	sts	0x2BC5, r1
				  humidityBufferToWriteTo = 1;
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	80 93 5b 28 	sts	0x285B, r24
				  okToSendHumidityBuffer2 = true;
    5c44:	80 93 c4 2b 	sts	0x2BC4, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    5c48:	80 91 5f 28 	lds	r24, 0x285F
    5c4c:	88 23       	and	r24, r24
    5c4e:	09 f4       	brne	.+2      	; 0x5c52 <__vector_83+0x228>
    5c50:	60 c0       	rjmp	.+192    	; 0x5d12 <__vector_83+0x2e8>
		  if(pressureBufferToWriteTo == 1){
    5c52:	80 91 5a 28 	lds	r24, 0x285A
    5c56:	81 30       	cpi	r24, 0x01	; 1
    5c58:	71 f5       	brne	.+92     	; 0x5cb6 <__vector_83+0x28c>
			  if(pressureBufferCounter == 0){
    5c5a:	80 91 c2 2b 	lds	r24, 0x2BC2
    5c5e:	88 23       	and	r24, r24
    5c60:	51 f4       	brne	.+20     	; 0x5c76 <__vector_83+0x24c>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    5c62:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5c66:	60 93 6e 2b 	sts	0x2B6E, r22
    5c6a:	70 93 6f 2b 	sts	0x2B6F, r23
    5c6e:	80 93 70 2b 	sts	0x2B70, r24
    5c72:	90 93 71 2b 	sts	0x2B71, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    5c76:	80 91 c2 2b 	lds	r24, 0x2BC2
    5c7a:	c8 2f       	mov	r28, r24
    5c7c:	d0 e0       	ldi	r29, 0x00	; 0
    5c7e:	0e 94 13 2b 	call	0x5626	; 0x5626 <Sensors_ReadPressure>
    5c82:	cd 5d       	subi	r28, 0xDD	; 221
    5c84:	d1 4d       	sbci	r29, 0xD1	; 209
    5c86:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer1[pressureBufferCounter];
    5c88:	90 91 c2 2b 	lds	r25, 0x2BC2
    5c8c:	e9 2f       	mov	r30, r25
    5c8e:	f0 e0       	ldi	r31, 0x00	; 0
    5c90:	ed 5d       	subi	r30, 0xDD	; 221
    5c92:	f1 4d       	sbci	r31, 0xD1	; 209
    5c94:	80 81       	ld	r24, Z
    5c96:	80 93 d1 2b 	sts	0x2BD1, r24

			  pressureBufferCounter++;
    5c9a:	9f 5f       	subi	r25, 0xFF	; 255
    5c9c:	90 93 c2 2b 	sts	0x2BC2, r25
			  if(pressureBufferCounter == pressureNumberOfSamples){
    5ca0:	9a 30       	cpi	r25, 0x0A	; 10
    5ca2:	b9 f5       	brne	.+110    	; 0x5d12 <__vector_83+0x2e8>
				  pressureBufferCounter=0;
    5ca4:	10 92 c2 2b 	sts	0x2BC2, r1
				  pressureBufferToWriteTo = 2;
    5ca8:	82 e0       	ldi	r24, 0x02	; 2
    5caa:	80 93 5a 28 	sts	0x285A, r24
				  okToSendPressureBuffer1 = true;
    5cae:	81 e0       	ldi	r24, 0x01	; 1
    5cb0:	80 93 c0 2b 	sts	0x2BC0, r24
    5cb4:	2e c0       	rjmp	.+92     	; 0x5d12 <__vector_83+0x2e8>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    5cb6:	82 30       	cpi	r24, 0x02	; 2
    5cb8:	61 f5       	brne	.+88     	; 0x5d12 <__vector_83+0x2e8>
			  if(pressureBufferCounter == 0){
    5cba:	80 91 c2 2b 	lds	r24, 0x2BC2
    5cbe:	88 23       	and	r24, r24
    5cc0:	51 f4       	brne	.+20     	; 0x5cd6 <__vector_83+0x2ac>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    5cc2:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5cc6:	60 93 72 2b 	sts	0x2B72, r22
    5cca:	70 93 73 2b 	sts	0x2B73, r23
    5cce:	80 93 74 2b 	sts	0x2B74, r24
    5cd2:	90 93 75 2b 	sts	0x2B75, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    5cd6:	80 91 c2 2b 	lds	r24, 0x2BC2
    5cda:	c8 2f       	mov	r28, r24
    5cdc:	d0 e0       	ldi	r29, 0x00	; 0
    5cde:	0e 94 13 2b 	call	0x5626	; 0x5626 <Sensors_ReadPressure>
    5ce2:	c2 51       	subi	r28, 0x12	; 18
    5ce4:	d4 4c       	sbci	r29, 0xC4	; 196
    5ce6:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer2[pressureBufferCounter];
    5ce8:	90 91 c2 2b 	lds	r25, 0x2BC2
    5cec:	e9 2f       	mov	r30, r25
    5cee:	f0 e0       	ldi	r31, 0x00	; 0
    5cf0:	e2 51       	subi	r30, 0x12	; 18
    5cf2:	f4 4c       	sbci	r31, 0xC4	; 196
    5cf4:	80 81       	ld	r24, Z
    5cf6:	80 93 d1 2b 	sts	0x2BD1, r24
			  pressureBufferCounter++;
    5cfa:	9f 5f       	subi	r25, 0xFF	; 255
    5cfc:	90 93 c2 2b 	sts	0x2BC2, r25
			if(pressureBufferCounter == pressureNumberOfSamples){
    5d00:	9a 30       	cpi	r25, 0x0A	; 10
    5d02:	39 f4       	brne	.+14     	; 0x5d12 <__vector_83+0x2e8>
				pressureBufferCounter=0;
    5d04:	10 92 c2 2b 	sts	0x2BC2, r1
				pressureBufferToWriteTo = 1;
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	80 93 5a 28 	sts	0x285A, r24
				okToSendPressureBuffer2 = true;
    5d0e:	80 93 c1 2b 	sts	0x2BC1, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    5d12:	80 91 62 28 	lds	r24, 0x2862
    5d16:	88 23       	and	r24, r24
    5d18:	09 f4       	brne	.+2      	; 0x5d1c <__vector_83+0x2f2>
    5d1a:	67 c1       	rjmp	.+718    	; 0x5fea <__vector_83+0x5c0>

		  Light_readColors();
    5d1c:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <Light_readColors>
		  Light_readColors();
    5d20:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <Light_readColors>
		  Light_readColors();
    5d24:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <Light_readColors>

		  quickLight = Light_returnColor(clear);
    5d28:	80 91 21 2e 	lds	r24, 0x2E21
    5d2c:	90 91 22 2e 	lds	r25, 0x2E22
    5d30:	80 93 d2 2b 	sts	0x2BD2, r24
    5d34:	90 93 d3 2b 	sts	0x2BD3, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    5d38:	e0 91 ba 2b 	lds	r30, 0x2BBA
    5d3c:	f0 e0       	ldi	r31, 0x00	; 0
    5d3e:	ee 0f       	add	r30, r30
    5d40:	ff 1f       	adc	r31, r31
    5d42:	ee 0f       	add	r30, r30
    5d44:	ff 1f       	adc	r31, r31
    5d46:	eb 5c       	subi	r30, 0xCB	; 203
    5d48:	f7 4d       	sbci	r31, 0xD7	; 215
    5d4a:	a0 80       	ld	r10, Z
    5d4c:	b1 80       	ldd	r11, Z+1	; 0x01
    5d4e:	c2 80       	ldd	r12, Z+2	; 0x02
    5d50:	d3 80       	ldd	r13, Z+3	; 0x03
    5d52:	e2 e5       	ldi	r30, 0x52	; 82
    5d54:	f2 e4       	ldi	r31, 0x42	; 66
    5d56:	cb e1       	ldi	r28, 0x1B	; 27
    5d58:	de e2       	ldi	r29, 0x2E	; 46
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    5d5a:	10 82       	st	Z, r1
    5d5c:	11 82       	std	Z+1, r1	; 0x01
    5d5e:	12 82       	std	Z+2, r1	; 0x02
    5d60:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    5d62:	88 81       	ld	r24, Y
    5d64:	99 81       	ldd	r25, Y+1	; 0x01
    5d66:	3c 01       	movw	r6, r24
    5d68:	88 24       	eor	r8, r8
    5d6a:	99 24       	eor	r9, r9
    5d6c:	ee 24       	eor	r14, r14
    5d6e:	ff 24       	eor	r15, r15
    5d70:	87 01       	movw	r16, r14
    5d72:	a6 01       	movw	r20, r12
    5d74:	95 01       	movw	r18, r10
    5d76:	e6 0c       	add	r14, r6
    5d78:	f7 1c       	adc	r15, r7
    5d7a:	08 1d       	adc	r16, r8
    5d7c:	19 1d       	adc	r17, r9
    5d7e:	2a 0d       	add	r18, r10
    5d80:	3b 1d       	adc	r19, r11
    5d82:	4c 1d       	adc	r20, r12
    5d84:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    5d86:	da 01       	movw	r26, r20
    5d88:	c9 01       	movw	r24, r18
    5d8a:	8a 19       	sub	r24, r10
    5d8c:	9b 09       	sbc	r25, r11
    5d8e:	ac 09       	sbc	r26, r12
    5d90:	bd 09       	sbc	r27, r13
    5d92:	80 50       	subi	r24, 0x00	; 0
    5d94:	9c 42       	sbci	r25, 0x2C	; 44
    5d96:	a1 40       	sbci	r26, 0x01	; 1
    5d98:	b0 40       	sbci	r27, 0x00	; 0
    5d9a:	68 f3       	brcs	.-38     	; 0x5d76 <__vector_83+0x34c>
    5d9c:	e1 92       	st	Z+, r14
    5d9e:	f1 92       	st	Z+, r15
    5da0:	01 93       	st	Z+, r16
    5da2:	11 93       	st	Z+, r17
    5da4:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    5da6:	82 e4       	ldi	r24, 0x42	; 66
    5da8:	e2 36       	cpi	r30, 0x62	; 98
    5daa:	f8 07       	cpc	r31, r24
    5dac:	b1 f6       	brne	.-84     	; 0x5d5a <__vector_83+0x330>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    5dae:	80 91 5d 28 	lds	r24, 0x285D
    5db2:	81 30       	cpi	r24, 0x01	; 1
    5db4:	09 f0       	breq	.+2      	; 0x5db8 <__vector_83+0x38e>
    5db6:	72 c0       	rjmp	.+228    	; 0x5e9c <__vector_83+0x472>
			  if(lightBufferCounter == 0){
    5db8:	80 91 cc 2b 	lds	r24, 0x2BCC
    5dbc:	88 23       	and	r24, r24
    5dbe:	51 f4       	brne	.+20     	; 0x5dd4 <__vector_83+0x3aa>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    5dc0:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5dc4:	60 93 7e 2b 	sts	0x2B7E, r22
    5dc8:	70 93 7f 2b 	sts	0x2B7F, r23
    5dcc:	80 93 80 2b 	sts	0x2B80, r24
    5dd0:	90 93 81 2b 	sts	0x2B81, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    5dd4:	20 91 cc 2b 	lds	r18, 0x2BCC
    5dd8:	e2 2f       	mov	r30, r18
    5dda:	f0 e0       	ldi	r31, 0x00	; 0
    5ddc:	ee 0f       	add	r30, r30
    5dde:	ff 1f       	adc	r31, r31
    5de0:	ee 0f       	add	r30, r30
    5de2:	ff 1f       	adc	r31, r31
    5de4:	e5 55       	subi	r30, 0x55	; 85
    5de6:	f6 4b       	sbci	r31, 0xB6	; 182
    5de8:	80 91 52 42 	lds	r24, 0x4252
    5dec:	90 91 53 42 	lds	r25, 0x4253
    5df0:	a0 91 54 42 	lds	r26, 0x4254
    5df4:	b0 91 55 42 	lds	r27, 0x4255
    5df8:	80 83       	st	Z, r24
    5dfa:	91 83       	std	Z+1, r25	; 0x01
    5dfc:	a2 83       	std	Z+2, r26	; 0x02
    5dfe:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5e00:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    5e02:	e2 2f       	mov	r30, r18
    5e04:	f0 e0       	ldi	r31, 0x00	; 0
    5e06:	ee 0f       	add	r30, r30
    5e08:	ff 1f       	adc	r31, r31
    5e0a:	ee 0f       	add	r30, r30
    5e0c:	ff 1f       	adc	r31, r31
    5e0e:	e5 55       	subi	r30, 0x55	; 85
    5e10:	f6 4b       	sbci	r31, 0xB6	; 182
    5e12:	80 91 56 42 	lds	r24, 0x4256
    5e16:	90 91 57 42 	lds	r25, 0x4257
    5e1a:	a0 91 58 42 	lds	r26, 0x4258
    5e1e:	b0 91 59 42 	lds	r27, 0x4259
    5e22:	80 83       	st	Z, r24
    5e24:	91 83       	std	Z+1, r25	; 0x01
    5e26:	a2 83       	std	Z+2, r26	; 0x02
    5e28:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5e2a:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    5e2c:	e2 2f       	mov	r30, r18
    5e2e:	f0 e0       	ldi	r31, 0x00	; 0
    5e30:	ee 0f       	add	r30, r30
    5e32:	ff 1f       	adc	r31, r31
    5e34:	ee 0f       	add	r30, r30
    5e36:	ff 1f       	adc	r31, r31
    5e38:	e5 55       	subi	r30, 0x55	; 85
    5e3a:	f6 4b       	sbci	r31, 0xB6	; 182
    5e3c:	80 91 5a 42 	lds	r24, 0x425A
    5e40:	90 91 5b 42 	lds	r25, 0x425B
    5e44:	a0 91 5c 42 	lds	r26, 0x425C
    5e48:	b0 91 5d 42 	lds	r27, 0x425D
    5e4c:	80 83       	st	Z, r24
    5e4e:	91 83       	std	Z+1, r25	; 0x01
    5e50:	a2 83       	std	Z+2, r26	; 0x02
    5e52:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5e54:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    5e56:	e2 2f       	mov	r30, r18
    5e58:	f0 e0       	ldi	r31, 0x00	; 0
    5e5a:	ee 0f       	add	r30, r30
    5e5c:	ff 1f       	adc	r31, r31
    5e5e:	ee 0f       	add	r30, r30
    5e60:	ff 1f       	adc	r31, r31
    5e62:	e5 55       	subi	r30, 0x55	; 85
    5e64:	f6 4b       	sbci	r31, 0xB6	; 182
    5e66:	80 91 5e 42 	lds	r24, 0x425E
    5e6a:	90 91 5f 42 	lds	r25, 0x425F
    5e6e:	a0 91 60 42 	lds	r26, 0x4260
    5e72:	b0 91 61 42 	lds	r27, 0x4261
    5e76:	80 83       	st	Z, r24
    5e78:	91 83       	std	Z+1, r25	; 0x01
    5e7a:	a2 83       	std	Z+2, r26	; 0x02
    5e7c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5e7e:	2f 5f       	subi	r18, 0xFF	; 255
    5e80:	20 93 cc 2b 	sts	0x2BCC, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    5e84:	28 32       	cpi	r18, 0x28	; 40
    5e86:	09 f0       	breq	.+2      	; 0x5e8a <__vector_83+0x460>
    5e88:	7b c0       	rjmp	.+246    	; 0x5f80 <__vector_83+0x556>
				  lightBufferCounter=0;
    5e8a:	10 92 cc 2b 	sts	0x2BCC, r1
				  lightBufferToWriteTo = 2;
    5e8e:	82 e0       	ldi	r24, 0x02	; 2
    5e90:	80 93 5d 28 	sts	0x285D, r24
				  okToSendLightBuffer1 = true;
    5e94:	81 e0       	ldi	r24, 0x01	; 1
    5e96:	80 93 ca 2b 	sts	0x2BCA, r24
    5e9a:	72 c0       	rjmp	.+228    	; 0x5f80 <__vector_83+0x556>
			  }
		  } else if (lightBufferToWriteTo == 2){
    5e9c:	82 30       	cpi	r24, 0x02	; 2
    5e9e:	09 f0       	breq	.+2      	; 0x5ea2 <__vector_83+0x478>
    5ea0:	6f c0       	rjmp	.+222    	; 0x5f80 <__vector_83+0x556>
			  if(lightBufferCounter == 0){
    5ea2:	80 91 cc 2b 	lds	r24, 0x2BCC
    5ea6:	88 23       	and	r24, r24
    5ea8:	51 f4       	brne	.+20     	; 0x5ebe <__vector_83+0x494>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    5eaa:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    5eae:	60 93 82 2b 	sts	0x2B82, r22
    5eb2:	70 93 83 2b 	sts	0x2B83, r23
    5eb6:	80 93 84 2b 	sts	0x2B84, r24
    5eba:	90 93 85 2b 	sts	0x2B85, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    5ebe:	20 91 cc 2b 	lds	r18, 0x2BCC
    5ec2:	e2 2f       	mov	r30, r18
    5ec4:	f0 e0       	ldi	r31, 0x00	; 0
    5ec6:	ee 0f       	add	r30, r30
    5ec8:	ff 1f       	adc	r31, r31
    5eca:	ee 0f       	add	r30, r30
    5ecc:	ff 1f       	adc	r31, r31
    5ece:	e2 57       	subi	r30, 0x72	; 114
    5ed0:	f9 4c       	sbci	r31, 0xC9	; 201
    5ed2:	80 91 52 42 	lds	r24, 0x4252
    5ed6:	90 91 53 42 	lds	r25, 0x4253
    5eda:	a0 91 54 42 	lds	r26, 0x4254
    5ede:	b0 91 55 42 	lds	r27, 0x4255
    5ee2:	80 83       	st	Z, r24
    5ee4:	91 83       	std	Z+1, r25	; 0x01
    5ee6:	a2 83       	std	Z+2, r26	; 0x02
    5ee8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5eea:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    5eec:	e2 2f       	mov	r30, r18
    5eee:	f0 e0       	ldi	r31, 0x00	; 0
    5ef0:	ee 0f       	add	r30, r30
    5ef2:	ff 1f       	adc	r31, r31
    5ef4:	ee 0f       	add	r30, r30
    5ef6:	ff 1f       	adc	r31, r31
    5ef8:	e2 57       	subi	r30, 0x72	; 114
    5efa:	f9 4c       	sbci	r31, 0xC9	; 201
    5efc:	80 91 56 42 	lds	r24, 0x4256
    5f00:	90 91 57 42 	lds	r25, 0x4257
    5f04:	a0 91 58 42 	lds	r26, 0x4258
    5f08:	b0 91 59 42 	lds	r27, 0x4259
    5f0c:	80 83       	st	Z, r24
    5f0e:	91 83       	std	Z+1, r25	; 0x01
    5f10:	a2 83       	std	Z+2, r26	; 0x02
    5f12:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5f14:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    5f16:	e2 2f       	mov	r30, r18
    5f18:	f0 e0       	ldi	r31, 0x00	; 0
    5f1a:	ee 0f       	add	r30, r30
    5f1c:	ff 1f       	adc	r31, r31
    5f1e:	ee 0f       	add	r30, r30
    5f20:	ff 1f       	adc	r31, r31
    5f22:	e2 57       	subi	r30, 0x72	; 114
    5f24:	f9 4c       	sbci	r31, 0xC9	; 201
    5f26:	80 91 5a 42 	lds	r24, 0x425A
    5f2a:	90 91 5b 42 	lds	r25, 0x425B
    5f2e:	a0 91 5c 42 	lds	r26, 0x425C
    5f32:	b0 91 5d 42 	lds	r27, 0x425D
    5f36:	80 83       	st	Z, r24
    5f38:	91 83       	std	Z+1, r25	; 0x01
    5f3a:	a2 83       	std	Z+2, r26	; 0x02
    5f3c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5f3e:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    5f40:	e2 2f       	mov	r30, r18
    5f42:	f0 e0       	ldi	r31, 0x00	; 0
    5f44:	ee 0f       	add	r30, r30
    5f46:	ff 1f       	adc	r31, r31
    5f48:	ee 0f       	add	r30, r30
    5f4a:	ff 1f       	adc	r31, r31
    5f4c:	e2 57       	subi	r30, 0x72	; 114
    5f4e:	f9 4c       	sbci	r31, 0xC9	; 201
    5f50:	80 91 5e 42 	lds	r24, 0x425E
    5f54:	90 91 5f 42 	lds	r25, 0x425F
    5f58:	a0 91 60 42 	lds	r26, 0x4260
    5f5c:	b0 91 61 42 	lds	r27, 0x4261
    5f60:	80 83       	st	Z, r24
    5f62:	91 83       	std	Z+1, r25	; 0x01
    5f64:	a2 83       	std	Z+2, r26	; 0x02
    5f66:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5f68:	2f 5f       	subi	r18, 0xFF	; 255
    5f6a:	20 93 cc 2b 	sts	0x2BCC, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    5f6e:	28 32       	cpi	r18, 0x28	; 40
    5f70:	39 f4       	brne	.+14     	; 0x5f80 <__vector_83+0x556>
				  lightBufferCounter=0;
    5f72:	10 92 cc 2b 	sts	0x2BCC, r1
				  lightBufferToWriteTo = 1;
    5f76:	81 e0       	ldi	r24, 0x01	; 1
    5f78:	80 93 5d 28 	sts	0x285D, r24
				  okToSendLightBuffer2 = true;
    5f7c:	80 93 cb 2b 	sts	0x2BCB, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    5f80:	20 91 21 2e 	lds	r18, 0x2E21
    5f84:	30 91 22 2e 	lds	r19, 0x2E22
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    5f88:	6f eb       	ldi	r22, 0xBF	; 191
    5f8a:	29 36       	cpi	r18, 0x69	; 105
    5f8c:	36 07       	cpc	r19, r22
    5f8e:	30 f0       	brcs	.+12     	; 0x5f9c <__vector_83+0x572>
    5f90:	80 91 ba 2b 	lds	r24, 0x2BBA
    5f94:	88 23       	and	r24, r24
    5f96:	11 f0       	breq	.+4      	; 0x5f9c <__vector_83+0x572>
			  gainSelector--;
    5f98:	81 50       	subi	r24, 0x01	; 1
    5f9a:	08 c0       	rjmp	.+16     	; 0x5fac <__vector_83+0x582>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    5f9c:	20 58       	subi	r18, 0x80	; 128
    5f9e:	3e 43       	sbci	r19, 0x3E	; 62
    5fa0:	20 f5       	brcc	.+72     	; 0x5fea <__vector_83+0x5c0>
    5fa2:	80 91 ba 2b 	lds	r24, 0x2BBA
    5fa6:	88 30       	cpi	r24, 0x08	; 8
    5fa8:	01 f1       	breq	.+64     	; 0x5fea <__vector_83+0x5c0>
			  gainSelector++;
    5faa:	8f 5f       	subi	r24, 0xFF	; 255
    5fac:	80 93 ba 2b 	sts	0x2BBA, r24
			  Light_setGain();
    5fb0:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <Light_setGain>
    5fb4:	1a c0       	rjmp	.+52     	; 0x5fea <__vector_83+0x5c0>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    5fb6:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <Sensors_ReadTemperature>
    5fba:	6a e0       	ldi	r22, 0x0A	; 10
    5fbc:	70 e0       	ldi	r23, 0x00	; 0
    5fbe:	0e 94 b3 49 	call	0x9366	; 0x9366 <__udivmodhi4>
    5fc2:	60 93 cf 2b 	sts	0x2BCF, r22
		quickHumidity = Sensors_ReadHumidity();
    5fc6:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Sensors_ReadHumidity>
    5fca:	80 93 d0 2b 	sts	0x2BD0, r24
		quickPressure = Sensors_ReadPressure();
    5fce:	0e 94 13 2b 	call	0x5626	; 0x5626 <Sensors_ReadPressure>
    5fd2:	80 93 d1 2b 	sts	0x2BD1, r24
		Light_readColors();
    5fd6:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <Light_readColors>
		quickLight = Light_returnColor(clear);
    5fda:	80 91 21 2e 	lds	r24, 0x2E21
    5fde:	90 91 22 2e 	lds	r25, 0x2E22
    5fe2:	80 93 d2 2b 	sts	0x2BD2, r24
    5fe6:	90 93 d3 2b 	sts	0x2BD3, r25
	}




}
    5fea:	ff 91       	pop	r31
    5fec:	ef 91       	pop	r30
    5fee:	df 91       	pop	r29
    5ff0:	cf 91       	pop	r28
    5ff2:	bf 91       	pop	r27
    5ff4:	af 91       	pop	r26
    5ff6:	9f 91       	pop	r25
    5ff8:	8f 91       	pop	r24
    5ffa:	7f 91       	pop	r23
    5ffc:	6f 91       	pop	r22
    5ffe:	5f 91       	pop	r21
    6000:	4f 91       	pop	r20
    6002:	3f 91       	pop	r19
    6004:	2f 91       	pop	r18
    6006:	1f 91       	pop	r17
    6008:	0f 91       	pop	r16
    600a:	ff 90       	pop	r15
    600c:	ef 90       	pop	r14
    600e:	df 90       	pop	r13
    6010:	cf 90       	pop	r12
    6012:	bf 90       	pop	r11
    6014:	af 90       	pop	r10
    6016:	9f 90       	pop	r9
    6018:	8f 90       	pop	r8
    601a:	7f 90       	pop	r7
    601c:	6f 90       	pop	r6
    601e:	0f 90       	pop	r0
    6020:	0b be       	out	0x3b, r0	; 59
    6022:	0f 90       	pop	r0
    6024:	0f be       	out	0x3f, r0	; 63
    6026:	0f 90       	pop	r0
    6028:	1f 90       	pop	r1
    602a:	18 95       	reti

0000602c <RTC_UTCSecsToTime>:
	RTC_sendBytes(17,msg,RTCAddress);
}

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    602c:	8f 92       	push	r8
    602e:	9f 92       	push	r9
    6030:	af 92       	push	r10
    6032:	bf 92       	push	r11
    6034:	cf 92       	push	r12
    6036:	df 92       	push	r13
    6038:	ef 92       	push	r14
    603a:	ff 92       	push	r15
    603c:	0f 93       	push	r16
    603e:	1f 93       	push	r17
    6040:	cf 93       	push	r28
    6042:	df 93       	push	r29
    6044:	7b 01       	movw	r14, r22
    6046:	8c 01       	movw	r16, r24
    6048:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    604a:	2c e3       	ldi	r18, 0x3C	; 60
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	40 e0       	ldi	r20, 0x00	; 0
    6050:	50 e0       	ldi	r21, 0x00	; 0
    6052:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    6056:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6058:	c8 01       	movw	r24, r16
    605a:	b7 01       	movw	r22, r14
    605c:	2c e3       	ldi	r18, 0x3C	; 60
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	40 e0       	ldi	r20, 0x00	; 0
    6062:	50 e0       	ldi	r21, 0x00	; 0
    6064:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    6068:	12 2f       	mov	r17, r18
    606a:	03 2f       	mov	r16, r19
    606c:	f4 2e       	mov	r15, r20
    606e:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6070:	62 2f       	mov	r22, r18
    6072:	73 2f       	mov	r23, r19
    6074:	84 2f       	mov	r24, r20
    6076:	95 2f       	mov	r25, r21
    6078:	2c e3       	ldi	r18, 0x3C	; 60
    607a:	30 e0       	ldi	r19, 0x00	; 0
    607c:	40 e0       	ldi	r20, 0x00	; 0
    607e:	50 e0       	ldi	r21, 0x00	; 0
    6080:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    6084:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6086:	61 2f       	mov	r22, r17
    6088:	70 2f       	mov	r23, r16
    608a:	8f 2d       	mov	r24, r15
    608c:	9e 2d       	mov	r25, r14
    608e:	2c e3       	ldi	r18, 0x3C	; 60
    6090:	30 e0       	ldi	r19, 0x00	; 0
    6092:	40 e0       	ldi	r20, 0x00	; 0
    6094:	50 e0       	ldi	r21, 0x00	; 0
    6096:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    609a:	12 2f       	mov	r17, r18
    609c:	03 2f       	mov	r16, r19
    609e:	f4 2e       	mov	r15, r20
    60a0:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    60a2:	62 2f       	mov	r22, r18
    60a4:	73 2f       	mov	r23, r19
    60a6:	84 2f       	mov	r24, r20
    60a8:	95 2f       	mov	r25, r21
    60aa:	28 e1       	ldi	r18, 0x18	; 24
    60ac:	30 e0       	ldi	r19, 0x00	; 0
    60ae:	40 e0       	ldi	r20, 0x00	; 0
    60b0:	50 e0       	ldi	r21, 0x00	; 0
    60b2:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    60b6:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    60b8:	61 2f       	mov	r22, r17
    60ba:	70 2f       	mov	r23, r16
    60bc:	8f 2d       	mov	r24, r15
    60be:	9e 2d       	mov	r25, r14
    60c0:	28 e1       	ldi	r18, 0x18	; 24
    60c2:	30 e0       	ldi	r19, 0x00	; 0
    60c4:	40 e0       	ldi	r20, 0x00	; 0
    60c6:	50 e0       	ldi	r21, 0x00	; 0
    60c8:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    60cc:	79 01       	movw	r14, r18
    60ce:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    60d0:	c8 01       	movw	r24, r16
    60d2:	b7 01       	movw	r22, r14
    60d4:	6c 5f       	subi	r22, 0xFC	; 252
    60d6:	7f 4f       	sbci	r23, 0xFF	; 255
    60d8:	8f 4f       	sbci	r24, 0xFF	; 255
    60da:	9f 4f       	sbci	r25, 0xFF	; 255
    60dc:	27 e0       	ldi	r18, 0x07	; 7
    60de:	30 e0       	ldi	r19, 0x00	; 0
    60e0:	40 e0       	ldi	r20, 0x00	; 0
    60e2:	50 e0       	ldi	r21, 0x00	; 0
    60e4:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    60e8:	6f 5f       	subi	r22, 0xFF	; 255
    60ea:	6c 83       	std	Y+4, r22	; 0x04
    60ec:	20 e0       	ldi	r18, 0x00	; 0
    60ee:	aa 24       	eor	r10, r10
    60f0:	bb 24       	eor	r11, r11
    60f2:	65 01       	movw	r12, r10
    60f4:	01 c0       	rjmp	.+2      	; 0x60f8 <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    60f6:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    60f8:	82 2e       	mov	r8, r18
    60fa:	99 24       	eor	r9, r9
    60fc:	f4 01       	movw	r30, r8
    60fe:	ee 54       	subi	r30, 0x4E	; 78
    6100:	f8 4f       	sbci	r31, 0xF8	; 248
    6102:	cf 01       	movw	r24, r30
    6104:	83 70       	andi	r24, 0x03	; 3
    6106:	90 70       	andi	r25, 0x00	; 0
    6108:	89 2b       	or	r24, r25
    610a:	99 f4       	brne	.+38     	; 0x6132 <RTC_UTCSecsToTime+0x106>
    610c:	cf 01       	movw	r24, r30
    610e:	64 e6       	ldi	r22, 0x64	; 100
    6110:	70 e0       	ldi	r23, 0x00	; 0
    6112:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    6116:	89 2b       	or	r24, r25
    6118:	39 f4       	brne	.+14     	; 0x6128 <RTC_UTCSecsToTime+0xfc>
    611a:	cf 01       	movw	r24, r30
    611c:	60 e9       	ldi	r22, 0x90	; 144
    611e:	71 e0       	ldi	r23, 0x01	; 1
    6120:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    6124:	89 2b       	or	r24, r25
    6126:	29 f4       	brne	.+10     	; 0x6132 <RTC_UTCSecsToTime+0x106>
    6128:	8e e6       	ldi	r24, 0x6E	; 110
    612a:	91 e0       	ldi	r25, 0x01	; 1
    612c:	a0 e0       	ldi	r26, 0x00	; 0
    612e:	b0 e0       	ldi	r27, 0x00	; 0
    6130:	04 c0       	rjmp	.+8      	; 0x613a <RTC_UTCSecsToTime+0x10e>
    6132:	8d e6       	ldi	r24, 0x6D	; 109
    6134:	91 e0       	ldi	r25, 0x01	; 1
    6136:	a0 e0       	ldi	r26, 0x00	; 0
    6138:	b0 e0       	ldi	r27, 0x00	; 0
    613a:	a8 0e       	add	r10, r24
    613c:	b9 1e       	adc	r11, r25
    613e:	ca 1e       	adc	r12, r26
    6140:	db 1e       	adc	r13, r27
    6142:	c5 01       	movw	r24, r10
    6144:	a0 e0       	ldi	r26, 0x00	; 0
    6146:	b0 e0       	ldi	r27, 0x00	; 0
    6148:	e8 16       	cp	r14, r24
    614a:	f9 06       	cpc	r15, r25
    614c:	0a 07       	cpc	r16, r26
    614e:	1b 07       	cpc	r17, r27
    6150:	90 f6       	brcc	.-92     	; 0x60f6 <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6152:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6154:	f4 01       	movw	r30, r8
    6156:	ee 54       	subi	r30, 0x4E	; 78
    6158:	f8 4f       	sbci	r31, 0xF8	; 248
    615a:	83 e0       	ldi	r24, 0x03	; 3
    615c:	88 2e       	mov	r8, r24
    615e:	91 2c       	mov	r9, r1
    6160:	8e 22       	and	r8, r30
    6162:	9f 22       	and	r9, r31
    6164:	81 14       	cp	r8, r1
    6166:	91 04       	cpc	r9, r1
    6168:	99 f4       	brne	.+38     	; 0x6190 <RTC_UTCSecsToTime+0x164>
    616a:	cf 01       	movw	r24, r30
    616c:	64 e6       	ldi	r22, 0x64	; 100
    616e:	70 e0       	ldi	r23, 0x00	; 0
    6170:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    6174:	89 2b       	or	r24, r25
    6176:	39 f4       	brne	.+14     	; 0x6186 <RTC_UTCSecsToTime+0x15a>
    6178:	cf 01       	movw	r24, r30
    617a:	60 e9       	ldi	r22, 0x90	; 144
    617c:	71 e0       	ldi	r23, 0x01	; 1
    617e:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    6182:	89 2b       	or	r24, r25
    6184:	29 f4       	brne	.+10     	; 0x6190 <RTC_UTCSecsToTime+0x164>
    6186:	8e e6       	ldi	r24, 0x6E	; 110
    6188:	91 e0       	ldi	r25, 0x01	; 1
    618a:	a0 e0       	ldi	r26, 0x00	; 0
    618c:	b0 e0       	ldi	r27, 0x00	; 0
    618e:	04 c0       	rjmp	.+8      	; 0x6198 <RTC_UTCSecsToTime+0x16c>
    6190:	8d e6       	ldi	r24, 0x6D	; 109
    6192:	91 e0       	ldi	r25, 0x01	; 1
    6194:	a0 e0       	ldi	r26, 0x00	; 0
    6196:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6198:	a8 1a       	sub	r10, r24
    619a:	b9 0a       	sbc	r11, r25
    619c:	ca 0a       	sbc	r12, r26
    619e:	db 0a       	sbc	r13, r27
    61a0:	98 01       	movw	r18, r16
    61a2:	87 01       	movw	r16, r14
    61a4:	0a 19       	sub	r16, r10
    61a6:	1b 09       	sbc	r17, r11
    61a8:	2c 09       	sbc	r18, r12
    61aa:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    61ac:	cf 01       	movw	r24, r30
    61ae:	64 e6       	ldi	r22, 0x64	; 100
    61b0:	70 e0       	ldi	r23, 0x00	; 0
    61b2:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    61b6:	7c 01       	movw	r14, r24
    61b8:	cf 01       	movw	r24, r30
    61ba:	60 e9       	ldi	r22, 0x90	; 144
    61bc:	71 e0       	ldi	r23, 0x01	; 1
    61be:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    61c2:	ac 01       	movw	r20, r24
    61c4:	e1 e5       	ldi	r30, 0x51	; 81
    61c6:	fb e2       	ldi	r31, 0x2B	; 43
    61c8:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    61ca:	61 30       	cpi	r22, 0x01	; 1
    61cc:	51 f4       	brne	.+20     	; 0x61e2 <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    61ce:	81 14       	cp	r8, r1
    61d0:	91 04       	cpc	r9, r1
    61d2:	49 f4       	brne	.+18     	; 0x61e6 <RTC_UTCSecsToTime+0x1ba>
    61d4:	e1 14       	cp	r14, r1
    61d6:	f1 04       	cpc	r15, r1
    61d8:	41 f4       	brne	.+16     	; 0x61ea <RTC_UTCSecsToTime+0x1be>
    61da:	41 15       	cp	r20, r1
    61dc:	51 05       	cpc	r21, r1
    61de:	29 f0       	breq	.+10     	; 0x61ea <RTC_UTCSecsToTime+0x1be>
    61e0:	02 c0       	rjmp	.+4      	; 0x61e6 <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    61e2:	80 81       	ld	r24, Z
    61e4:	03 c0       	rjmp	.+6      	; 0x61ec <RTC_UTCSecsToTime+0x1c0>
    61e6:	8c e1       	ldi	r24, 0x1C	; 28
    61e8:	01 c0       	rjmp	.+2      	; 0x61ec <RTC_UTCSecsToTime+0x1c0>
    61ea:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	a0 e0       	ldi	r26, 0x00	; 0
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	08 17       	cp	r16, r24
    61f4:	19 07       	cpc	r17, r25
    61f6:	2a 07       	cpc	r18, r26
    61f8:	3b 07       	cpc	r19, r27
    61fa:	40 f0       	brcs	.+16     	; 0x620c <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    61fc:	08 1b       	sub	r16, r24
    61fe:	19 0b       	sbc	r17, r25
    6200:	2a 0b       	sbc	r18, r26
    6202:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6204:	6f 5f       	subi	r22, 0xFF	; 255
    6206:	31 96       	adiw	r30, 0x01	; 1
    6208:	6c 30       	cpi	r22, 0x0C	; 12
    620a:	f9 f6       	brne	.-66     	; 0x61ca <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    620c:	6f 5f       	subi	r22, 0xFF	; 255
    620e:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6210:	80 2f       	mov	r24, r16
    6212:	8f 5f       	subi	r24, 0xFF	; 255
    6214:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6216:	ce 01       	movw	r24, r28
    6218:	df 91       	pop	r29
    621a:	cf 91       	pop	r28
    621c:	1f 91       	pop	r17
    621e:	0f 91       	pop	r16
    6220:	ff 90       	pop	r15
    6222:	ef 90       	pop	r14
    6224:	df 90       	pop	r13
    6226:	cf 90       	pop	r12
    6228:	bf 90       	pop	r11
    622a:	af 90       	pop	r10
    622c:	9f 90       	pop	r9
    622e:	8f 90       	pop	r8
    6230:	08 95       	ret

00006232 <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6232:	4f 92       	push	r4
    6234:	5f 92       	push	r5
    6236:	6f 92       	push	r6
    6238:	7f 92       	push	r7
    623a:	8f 92       	push	r8
    623c:	9f 92       	push	r9
    623e:	af 92       	push	r10
    6240:	bf 92       	push	r11
    6242:	cf 92       	push	r12
    6244:	df 92       	push	r13
    6246:	ef 92       	push	r14
    6248:	ff 92       	push	r15
    624a:	0f 93       	push	r16
    624c:	1f 93       	push	r17
    624e:	cf 93       	push	r28
    6250:	df 93       	push	r29
    6252:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6254:	dc 01       	movw	r26, r24
    6256:	17 96       	adiw	r26, 0x07	; 7
    6258:	1c 91       	ld	r17, X
    625a:	61 2f       	mov	r22, r17
    625c:	70 e0       	ldi	r23, 0x00	; 0
    625e:	80 e0       	ldi	r24, 0x00	; 0
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	20 e8       	ldi	r18, 0x80	; 128
    6264:	33 e3       	ldi	r19, 0x33	; 51
    6266:	41 ee       	ldi	r20, 0xE1	; 225
    6268:	51 e0       	ldi	r21, 0x01	; 1
    626a:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    626e:	5b 01       	movw	r10, r22
    6270:	6c 01       	movw	r12, r24
    6272:	22 eb       	ldi	r18, 0xB2	; 178
    6274:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6276:	e1 2f       	mov	r30, r17
    6278:	f0 e0       	ldi	r31, 0x00	; 0
    627a:	ee 54       	subi	r30, 0x4E	; 78
    627c:	f8 4f       	sbci	r31, 0xF8	; 248
    627e:	1d c0       	rjmp	.+58     	; 0x62ba <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6280:	c9 01       	movw	r24, r18
    6282:	83 70       	andi	r24, 0x03	; 3
    6284:	90 70       	andi	r25, 0x00	; 0
    6286:	89 2b       	or	r24, r25
    6288:	b1 f4       	brne	.+44     	; 0x62b6 <RTC_TimeToUTCSecs+0x84>
    628a:	c9 01       	movw	r24, r18
    628c:	64 e6       	ldi	r22, 0x64	; 100
    628e:	70 e0       	ldi	r23, 0x00	; 0
    6290:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    6294:	89 2b       	or	r24, r25
    6296:	39 f4       	brne	.+14     	; 0x62a6 <RTC_TimeToUTCSecs+0x74>
    6298:	c9 01       	movw	r24, r18
    629a:	60 e9       	ldi	r22, 0x90	; 144
    629c:	71 e0       	ldi	r23, 0x01	; 1
    629e:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    62a2:	89 2b       	or	r24, r25
    62a4:	41 f4       	brne	.+16     	; 0x62b6 <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    62a6:	80 e8       	ldi	r24, 0x80	; 128
    62a8:	91 e5       	ldi	r25, 0x51	; 81
    62aa:	a1 e0       	ldi	r26, 0x01	; 1
    62ac:	b0 e0       	ldi	r27, 0x00	; 0
    62ae:	a8 0e       	add	r10, r24
    62b0:	b9 1e       	adc	r11, r25
    62b2:	ca 1e       	adc	r12, r26
    62b4:	db 1e       	adc	r13, r27
    62b6:	2f 5f       	subi	r18, 0xFF	; 255
    62b8:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    62ba:	2e 17       	cp	r18, r30
    62bc:	3f 07       	cpc	r19, r31
    62be:	01 f7       	brne	.-64     	; 0x6280 <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    62c0:	d4 01       	movw	r26, r8
    62c2:	16 96       	adiw	r26, 0x06	; 6
    62c4:	8c 91       	ld	r24, X
    62c6:	48 2e       	mov	r4, r24
    62c8:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    62ca:	c9 01       	movw	r24, r18
    62cc:	64 e6       	ldi	r22, 0x64	; 100
    62ce:	70 e0       	ldi	r23, 0x00	; 0
    62d0:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    62d4:	7c 01       	movw	r14, r24
    62d6:	c9 01       	movw	r24, r18
    62d8:	60 e9       	ldi	r22, 0x90	; 144
    62da:	71 e0       	ldi	r23, 0x01	; 1
    62dc:	0e 94 c7 49 	call	0x938e	; 0x938e <__divmodhi4>
    62e0:	8c 01       	movw	r16, r24
    62e2:	c1 e0       	ldi	r28, 0x01	; 1
    62e4:	d0 e0       	ldi	r29, 0x00	; 0
    62e6:	93 e0       	ldi	r25, 0x03	; 3
    62e8:	69 2e       	mov	r6, r25
    62ea:	71 2c       	mov	r7, r1
    62ec:	62 22       	and	r6, r18
    62ee:	73 22       	and	r7, r19
    62f0:	27 c0       	rjmp	.+78     	; 0x6340 <RTC_TimeToUTCSecs+0x10e>
    62f2:	c2 30       	cpi	r28, 0x02	; 2
    62f4:	d1 05       	cpc	r29, r1
    62f6:	91 f4       	brne	.+36     	; 0x631c <RTC_TimeToUTCSecs+0xea>
    62f8:	61 14       	cp	r6, r1
    62fa:	71 04       	cpc	r7, r1
    62fc:	79 f4       	brne	.+30     	; 0x631c <RTC_TimeToUTCSecs+0xea>
    62fe:	e1 14       	cp	r14, r1
    6300:	f1 04       	cpc	r15, r1
    6302:	19 f4       	brne	.+6      	; 0x630a <RTC_TimeToUTCSecs+0xd8>
    6304:	01 15       	cp	r16, r1
    6306:	11 05       	cpc	r17, r1
    6308:	49 f4       	brne	.+18     	; 0x631c <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    630a:	80 e8       	ldi	r24, 0x80	; 128
    630c:	9b e3       	ldi	r25, 0x3B	; 59
    630e:	a6 e2       	ldi	r26, 0x26	; 38
    6310:	b0 e0       	ldi	r27, 0x00	; 0
    6312:	a8 0e       	add	r10, r24
    6314:	b9 1e       	adc	r11, r25
    6316:	ca 1e       	adc	r12, r26
    6318:	db 1e       	adc	r13, r27
    631a:	11 c0       	rjmp	.+34     	; 0x633e <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    631c:	fe 01       	movw	r30, r28
    631e:	e0 5b       	subi	r30, 0xB0	; 176
    6320:	f4 4d       	sbci	r31, 0xD4	; 212
    6322:	60 81       	ld	r22, Z
    6324:	70 e0       	ldi	r23, 0x00	; 0
    6326:	80 e0       	ldi	r24, 0x00	; 0
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	20 e8       	ldi	r18, 0x80	; 128
    632c:	31 e5       	ldi	r19, 0x51	; 81
    632e:	41 e0       	ldi	r20, 0x01	; 1
    6330:	50 e0       	ldi	r21, 0x00	; 0
    6332:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    6336:	a6 0e       	add	r10, r22
    6338:	b7 1e       	adc	r11, r23
    633a:	c8 1e       	adc	r12, r24
    633c:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    633e:	21 96       	adiw	r28, 0x01	; 1
    6340:	c4 15       	cp	r28, r4
    6342:	d5 05       	cpc	r29, r5
    6344:	b4 f2       	brlt	.-84     	; 0x62f2 <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6346:	d4 01       	movw	r26, r8
    6348:	13 96       	adiw	r26, 0x03	; 3
    634a:	6c 91       	ld	r22, X
    634c:	70 e0       	ldi	r23, 0x00	; 0
    634e:	80 e0       	ldi	r24, 0x00	; 0
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	20 e1       	ldi	r18, 0x10	; 16
    6354:	3e e0       	ldi	r19, 0x0E	; 14
    6356:	40 e0       	ldi	r20, 0x00	; 0
    6358:	50 e0       	ldi	r21, 0x00	; 0
    635a:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    635e:	7b 01       	movw	r14, r22
    6360:	8c 01       	movw	r16, r24
    6362:	f4 01       	movw	r30, r8
    6364:	62 81       	ldd	r22, Z+2	; 0x02
    6366:	70 e0       	ldi	r23, 0x00	; 0
    6368:	80 e0       	ldi	r24, 0x00	; 0
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	2c e3       	ldi	r18, 0x3C	; 60
    636e:	30 e0       	ldi	r19, 0x00	; 0
    6370:	40 e0       	ldi	r20, 0x00	; 0
    6372:	50 e0       	ldi	r21, 0x00	; 0
    6374:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    6378:	e6 0e       	add	r14, r22
    637a:	f7 1e       	adc	r15, r23
    637c:	08 1f       	adc	r16, r24
    637e:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    6380:	d4 01       	movw	r26, r8
    6382:	11 96       	adiw	r26, 0x01	; 1
    6384:	8c 91       	ld	r24, X
    6386:	11 97       	sbiw	r26, 0x01	; 1
    6388:	e8 0e       	add	r14, r24
    638a:	f1 1c       	adc	r15, r1
    638c:	01 1d       	adc	r16, r1
    638e:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    6390:	15 96       	adiw	r26, 0x05	; 5
    6392:	6c 91       	ld	r22, X
    6394:	70 e0       	ldi	r23, 0x00	; 0
    6396:	61 50       	subi	r22, 0x01	; 1
    6398:	70 40       	sbci	r23, 0x00	; 0
    639a:	88 27       	eor	r24, r24
    639c:	77 fd       	sbrc	r23, 7
    639e:	80 95       	com	r24
    63a0:	98 2f       	mov	r25, r24
    63a2:	20 e8       	ldi	r18, 0x80	; 128
    63a4:	31 e5       	ldi	r19, 0x51	; 81
    63a6:	41 e0       	ldi	r20, 0x01	; 1
    63a8:	50 e0       	ldi	r21, 0x00	; 0
    63aa:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    63ae:	e6 0e       	add	r14, r22
    63b0:	f7 1e       	adc	r15, r23
    63b2:	08 1f       	adc	r16, r24
    63b4:	19 1f       	adc	r17, r25
    63b6:	ea 0c       	add	r14, r10
    63b8:	fb 1c       	adc	r15, r11
    63ba:	0c 1d       	adc	r16, r12
    63bc:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    63be:	b7 01       	movw	r22, r14
    63c0:	c8 01       	movw	r24, r16
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	1f 91       	pop	r17
    63c8:	0f 91       	pop	r16
    63ca:	ff 90       	pop	r15
    63cc:	ef 90       	pop	r14
    63ce:	df 90       	pop	r13
    63d0:	cf 90       	pop	r12
    63d2:	bf 90       	pop	r11
    63d4:	af 90       	pop	r10
    63d6:	9f 90       	pop	r9
    63d8:	8f 90       	pop	r8
    63da:	7f 90       	pop	r7
    63dc:	6f 90       	pop	r6
    63de:	5f 90       	pop	r5
    63e0:	4f 90       	pop	r4
    63e2:	08 95       	ret

000063e4 <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    63e4:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    63e6:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    63e8:	e0 ea       	ldi	r30, 0xA0	; 160
    63ea:	f4 e0       	ldi	r31, 0x04	; 4
    63ec:	46 83       	std	Z+6, r20	; 0x06
    63ee:	fb 01       	movw	r30, r22
    63f0:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    63f2:	a0 ea       	ldi	r26, 0xA0	; 160
    63f4:	b4 e0       	ldi	r27, 0x04	; 4
    63f6:	0d c0       	rjmp	.+26     	; 0x6412 <RTC_sendBytes+0x2e>
    63f8:	80 91 a4 04 	lds	r24, 0x04A4
    63fc:	86 ff       	sbrs	r24, 6
    63fe:	fc cf       	rjmp	.-8      	; 0x63f8 <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    6400:	80 91 a4 04 	lds	r24, 0x04A4
    6404:	84 fd       	sbrc	r24, 4
    6406:	07 c0       	rjmp	.+14     	; 0x6416 <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    6408:	81 91       	ld	r24, Z+
    640a:	17 96       	adiw	r26, 0x07	; 7
    640c:	8c 93       	st	X, r24
    640e:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    6410:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    6412:	95 17       	cp	r25, r21
    6414:	88 f3       	brcs	.-30     	; 0x63f8 <RTC_sendBytes+0x14>
    6416:	08 95       	ret

00006418 <RTC_setTime>:



} 

void RTC_setTime(void) {
    6418:	df 93       	push	r29
    641a:	cf 93       	push	r28
    641c:	cd b7       	in	r28, 0x3d	; 61
    641e:	de b7       	in	r29, 0x3e	; 62
    6420:	29 97       	sbiw	r28, 0x09	; 9
    6422:	cd bf       	out	0x3d, r28	; 61
    6424:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    6426:	50 91 1d 40 	lds	r21, 0x401D
    642a:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    642c:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    642e:	40 91 16 40 	lds	r20, 0x4016
    6432:	84 2f       	mov	r24, r20
    6434:	6a e0       	ldi	r22, 0x0A	; 10
    6436:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    643a:	28 2f       	mov	r18, r24
    643c:	30 e0       	ldi	r19, 0x00	; 0
    643e:	b4 e0       	ldi	r27, 0x04	; 4
    6440:	22 0f       	add	r18, r18
    6442:	33 1f       	adc	r19, r19
    6444:	ba 95       	dec	r27
    6446:	e1 f7       	brne	.-8      	; 0x6440 <RTC_setTime+0x28>
    6448:	84 2f       	mov	r24, r20
    644a:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    644e:	92 2b       	or	r25, r18
    6450:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    6452:	40 91 17 40 	lds	r20, 0x4017
    6456:	84 2f       	mov	r24, r20
    6458:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    645c:	28 2f       	mov	r18, r24
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	a4 e0       	ldi	r26, 0x04	; 4
    6462:	22 0f       	add	r18, r18
    6464:	33 1f       	adc	r19, r19
    6466:	aa 95       	dec	r26
    6468:	e1 f7       	brne	.-8      	; 0x6462 <RTC_setTime+0x4a>
    646a:	84 2f       	mov	r24, r20
    646c:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    6470:	92 2b       	or	r25, r18
    6472:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    6474:	40 91 18 40 	lds	r20, 0x4018
    6478:	84 2f       	mov	r24, r20
    647a:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    647e:	28 2f       	mov	r18, r24
    6480:	30 e0       	ldi	r19, 0x00	; 0
    6482:	f4 e0       	ldi	r31, 0x04	; 4
    6484:	22 0f       	add	r18, r18
    6486:	33 1f       	adc	r19, r19
    6488:	fa 95       	dec	r31
    648a:	e1 f7       	brne	.-8      	; 0x6484 <RTC_setTime+0x6c>
    648c:	84 2f       	mov	r24, r20
    648e:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    6492:	92 2b       	or	r25, r18
    6494:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    6496:	30 91 19 40 	lds	r19, 0x4019
    649a:	83 2f       	mov	r24, r19
    649c:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    64a0:	29 2f       	mov	r18, r25
    64a2:	20 68       	ori	r18, 0x80	; 128
    64a4:	83 2f       	mov	r24, r19
    64a6:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    64aa:	82 95       	swap	r24
    64ac:	80 7f       	andi	r24, 0xF0	; 240
    64ae:	28 2b       	or	r18, r24
    64b0:	85 2f       	mov	r24, r21
    64b2:	64 e6       	ldi	r22, 0x64	; 100
    64b4:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    64b8:	82 95       	swap	r24
    64ba:	88 0f       	add	r24, r24
    64bc:	88 0f       	add	r24, r24
    64be:	80 7c       	andi	r24, 0xC0	; 192
    64c0:	28 2b       	or	r18, r24
    64c2:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    64c4:	80 91 1a 40 	lds	r24, 0x401A
    64c8:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    64ca:	40 91 1b 40 	lds	r20, 0x401B
    64ce:	84 2f       	mov	r24, r20
    64d0:	6a e0       	ldi	r22, 0x0A	; 10
    64d2:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    64d6:	28 2f       	mov	r18, r24
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	e4 e0       	ldi	r30, 0x04	; 4
    64dc:	22 0f       	add	r18, r18
    64de:	33 1f       	adc	r19, r19
    64e0:	ea 95       	dec	r30
    64e2:	e1 f7       	brne	.-8      	; 0x64dc <RTC_setTime+0xc4>
    64e4:	84 2f       	mov	r24, r20
    64e6:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    64ea:	92 2b       	or	r25, r18
    64ec:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    64ee:	40 91 1c 40 	lds	r20, 0x401C
    64f2:	84 2f       	mov	r24, r20
    64f4:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    64f8:	28 2f       	mov	r18, r24
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	74 e0       	ldi	r23, 0x04	; 4
    64fe:	22 0f       	add	r18, r18
    6500:	33 1f       	adc	r19, r19
    6502:	7a 95       	dec	r23
    6504:	e1 f7       	brne	.-8      	; 0x64fe <RTC_setTime+0xe6>
    6506:	84 2f       	mov	r24, r20
    6508:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    650c:	92 2b       	or	r25, r18
    650e:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    6510:	85 2f       	mov	r24, r21
    6512:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    6516:	28 2f       	mov	r18, r24
    6518:	30 e0       	ldi	r19, 0x00	; 0
    651a:	44 e0       	ldi	r20, 0x04	; 4
    651c:	22 0f       	add	r18, r18
    651e:	33 1f       	adc	r19, r19
    6520:	4a 95       	dec	r20
    6522:	e1 f7       	brne	.-8      	; 0x651c <RTC_setTime+0x104>
    6524:	85 2f       	mov	r24, r21
    6526:	0e 94 a7 49 	call	0x934e	; 0x934e <__udivmodqi4>
    652a:	92 2b       	or	r25, r18
    652c:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    652e:	89 e0       	ldi	r24, 0x09	; 9
    6530:	be 01       	movw	r22, r28
    6532:	6f 5f       	subi	r22, 0xFF	; 255
    6534:	7f 4f       	sbci	r23, 0xFF	; 255
    6536:	40 ed       	ldi	r20, 0xD0	; 208
    6538:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <RTC_sendBytes>
}
    653c:	29 96       	adiw	r28, 0x09	; 9
    653e:	cd bf       	out	0x3d, r28	; 61
    6540:	de bf       	out	0x3e, r29	; 62
    6542:	cf 91       	pop	r28
    6544:	df 91       	pop	r29
    6546:	08 95       	ret

00006548 <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    6548:	46 e1       	ldi	r20, 0x16	; 22
    654a:	50 e4       	ldi	r21, 0x40	; 64
    654c:	0e 94 16 30 	call	0x602c	; 0x602c <RTC_UTCSecsToTime>
	RTC_setTime();
    6550:	0e 94 0c 32 	call	0x6418	; 0x6418 <RTC_setTime>
}
    6554:	08 95       	ret

00006556 <RTC_init>:


//Global time variable
time_t time;

void RTC_init(void) {
    6556:	df 93       	push	r29
    6558:	cf 93       	push	r28
    655a:	cd b7       	in	r28, 0x3d	; 61
    655c:	de b7       	in	r29, 0x3e	; 62
    655e:	e2 97       	sbiw	r28, 0x32	; 50
    6560:	cd bf       	out	0x3d, r28	; 61
    6562:	de bf       	out	0x3e, r29	; 62
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6564:	e0 ea       	ldi	r30, 0xA0	; 160
    6566:	f4 e0       	ldi	r31, 0x04	; 4
    6568:	88 e0       	ldi	r24, 0x08	; 8
    656a:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    656c:	84 e0       	ldi	r24, 0x04	; 4
    656e:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6570:	8f e0       	ldi	r24, 0x0F	; 15
    6572:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	84 83       	std	Z+4, r24	; 0x04
    6578:	fe 01       	movw	r30, r28
    657a:	31 96       	adiw	r30, 0x01	; 1

	int i;
	uint8_t msg[50];

	//Clear all memory of RTC
	for (i = 0; i < 17; i++) {
    657c:	ce 01       	movw	r24, r28
    657e:	42 96       	adiw	r24, 0x12	; 18
		msg[i] = 0;
    6580:	11 92       	st	Z+, r1

	int i;
	uint8_t msg[50];

	//Clear all memory of RTC
	for (i = 0; i < 17; i++) {
    6582:	e8 17       	cp	r30, r24
    6584:	f9 07       	cpc	r31, r25
    6586:	e1 f7       	brne	.-8      	; 0x6580 <RTC_init+0x2a>
		msg[i] = 0;
	}


	RTC_sendBytes(17,msg,RTCAddress);
    6588:	81 e1       	ldi	r24, 0x11	; 17
    658a:	be 01       	movw	r22, r28
    658c:	6f 5f       	subi	r22, 0xFF	; 255
    658e:	7f 4f       	sbci	r23, 0xFF	; 255
    6590:	40 ed       	ldi	r20, 0xD0	; 208
    6592:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <RTC_sendBytes>
}
    6596:	e2 96       	adiw	r28, 0x32	; 50
    6598:	cd bf       	out	0x3d, r28	; 61
    659a:	de bf       	out	0x3e, r29	; 62
    659c:	cf 91       	pop	r28
    659e:	df 91       	pop	r29
    65a0:	08 95       	ret

000065a2 <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    65a2:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    65a4:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    65a6:	e0 ea       	ldi	r30, 0xA0	; 160
    65a8:	f4 e0       	ldi	r31, 0x04	; 4
    65aa:	46 83       	std	Z+6, r20	; 0x06
    65ac:	fb 01       	movw	r30, r22
    65ae:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    65b0:	a0 ea       	ldi	r26, 0xA0	; 160
    65b2:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    65b4:	22 e0       	ldi	r18, 0x02	; 2
    65b6:	0b c0       	rjmp	.+22     	; 0x65ce <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    65b8:	80 91 a4 04 	lds	r24, 0x04A4
    65bc:	87 ff       	sbrs	r24, 7
    65be:	fc cf       	rjmp	.-8      	; 0x65b8 <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    65c0:	80 91 a7 04 	lds	r24, 0x04A7
    65c4:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    65c6:	13 96       	adiw	r26, 0x03	; 3
    65c8:	2c 93       	st	X, r18
    65ca:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    65cc:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    65ce:	95 17       	cp	r25, r21
    65d0:	98 f3       	brcs	.-26     	; 0x65b8 <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    65d2:	87 e0       	ldi	r24, 0x07	; 7
    65d4:	e0 ea       	ldi	r30, 0xA0	; 160
    65d6:	f4 e0       	ldi	r31, 0x04	; 4
    65d8:	83 83       	std	Z+3, r24	; 0x03

}
    65da:	08 95       	ret

000065dc <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    65dc:	0f 93       	push	r16
    65de:	1f 93       	push	r17
    65e0:	df 93       	push	r29
    65e2:	cf 93       	push	r28
    65e4:	cd b7       	in	r28, 0x3d	; 61
    65e6:	de b7       	in	r29, 0x3e	; 62
    65e8:	28 97       	sbiw	r28, 0x08	; 8
    65ea:	cd bf       	out	0x3d, r28	; 61
    65ec:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    65ee:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    65f0:	81 e0       	ldi	r24, 0x01	; 1
    65f2:	8e 01       	movw	r16, r28
    65f4:	0f 5f       	subi	r16, 0xFF	; 255
    65f6:	1f 4f       	sbci	r17, 0xFF	; 255
    65f8:	b8 01       	movw	r22, r16
    65fa:	40 ed       	ldi	r20, 0xD0	; 208
    65fc:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    6600:	88 e0       	ldi	r24, 0x08	; 8
    6602:	b8 01       	movw	r22, r16
    6604:	40 ed       	ldi	r20, 0xD0	; 208
    6606:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    660a:	49 81       	ldd	r20, Y+1	; 0x01
    660c:	84 2f       	mov	r24, r20
    660e:	82 95       	swap	r24
    6610:	8f 70       	andi	r24, 0x0F	; 15
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	9c 01       	movw	r18, r24
    6616:	63 e0       	ldi	r22, 0x03	; 3
    6618:	22 0f       	add	r18, r18
    661a:	33 1f       	adc	r19, r19
    661c:	6a 95       	dec	r22
    661e:	e1 f7       	brne	.-8      	; 0x6618 <RTC_getTime+0x3c>
    6620:	88 0f       	add	r24, r24
    6622:	99 1f       	adc	r25, r25
    6624:	28 0f       	add	r18, r24
    6626:	39 1f       	adc	r19, r25
    6628:	4f 70       	andi	r20, 0x0F	; 15
    662a:	42 0f       	add	r20, r18
    662c:	40 93 16 40 	sts	0x4016, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    6630:	4a 81       	ldd	r20, Y+2	; 0x02
    6632:	84 2f       	mov	r24, r20
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	80 77       	andi	r24, 0x70	; 112
    6638:	90 70       	andi	r25, 0x00	; 0
    663a:	24 e0       	ldi	r18, 0x04	; 4
    663c:	95 95       	asr	r25
    663e:	87 95       	ror	r24
    6640:	2a 95       	dec	r18
    6642:	e1 f7       	brne	.-8      	; 0x663c <RTC_getTime+0x60>
    6644:	9c 01       	movw	r18, r24
    6646:	03 e0       	ldi	r16, 0x03	; 3
    6648:	22 0f       	add	r18, r18
    664a:	33 1f       	adc	r19, r19
    664c:	0a 95       	dec	r16
    664e:	e1 f7       	brne	.-8      	; 0x6648 <RTC_getTime+0x6c>
    6650:	88 0f       	add	r24, r24
    6652:	99 1f       	adc	r25, r25
    6654:	28 0f       	add	r18, r24
    6656:	39 1f       	adc	r19, r25
    6658:	4f 70       	andi	r20, 0x0F	; 15
    665a:	42 0f       	add	r20, r18
    665c:	40 93 17 40 	sts	0x4017, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    6660:	4b 81       	ldd	r20, Y+3	; 0x03
    6662:	84 2f       	mov	r24, r20
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	80 77       	andi	r24, 0x70	; 112
    6668:	90 70       	andi	r25, 0x00	; 0
    666a:	b4 e0       	ldi	r27, 0x04	; 4
    666c:	95 95       	asr	r25
    666e:	87 95       	ror	r24
    6670:	ba 95       	dec	r27
    6672:	e1 f7       	brne	.-8      	; 0x666c <RTC_getTime+0x90>
    6674:	9c 01       	movw	r18, r24
    6676:	a3 e0       	ldi	r26, 0x03	; 3
    6678:	22 0f       	add	r18, r18
    667a:	33 1f       	adc	r19, r19
    667c:	aa 95       	dec	r26
    667e:	e1 f7       	brne	.-8      	; 0x6678 <RTC_getTime+0x9c>
    6680:	88 0f       	add	r24, r24
    6682:	99 1f       	adc	r25, r25
    6684:	28 0f       	add	r18, r24
    6686:	39 1f       	adc	r19, r25
    6688:	4f 70       	andi	r20, 0x0F	; 15
    668a:	42 0f       	add	r20, r18
    668c:	40 93 18 40 	sts	0x4018, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    6690:	4c 81       	ldd	r20, Y+4	; 0x04
    6692:	64 2f       	mov	r22, r20
    6694:	70 e0       	ldi	r23, 0x00	; 0
    6696:	cb 01       	movw	r24, r22
    6698:	80 73       	andi	r24, 0x30	; 48
    669a:	90 70       	andi	r25, 0x00	; 0
    669c:	e4 e0       	ldi	r30, 0x04	; 4
    669e:	95 95       	asr	r25
    66a0:	87 95       	ror	r24
    66a2:	ea 95       	dec	r30
    66a4:	e1 f7       	brne	.-8      	; 0x669e <RTC_getTime+0xc2>
    66a6:	9c 01       	movw	r18, r24
    66a8:	53 e0       	ldi	r21, 0x03	; 3
    66aa:	22 0f       	add	r18, r18
    66ac:	33 1f       	adc	r19, r19
    66ae:	5a 95       	dec	r21
    66b0:	e1 f7       	brne	.-8      	; 0x66aa <RTC_getTime+0xce>
    66b2:	88 0f       	add	r24, r24
    66b4:	99 1f       	adc	r25, r25
    66b6:	28 0f       	add	r18, r24
    66b8:	39 1f       	adc	r19, r25
    66ba:	4f 70       	andi	r20, 0x0F	; 15
    66bc:	42 0f       	add	r20, r18
    66be:	40 93 19 40 	sts	0x4019, r20
	time.Wday = timeData[4];
    66c2:	8d 81       	ldd	r24, Y+5	; 0x05
    66c4:	80 93 1a 40 	sts	0x401A, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    66c8:	4e 81       	ldd	r20, Y+6	; 0x06
    66ca:	84 2f       	mov	r24, r20
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	80 73       	andi	r24, 0x30	; 48
    66d0:	90 70       	andi	r25, 0x00	; 0
    66d2:	14 e0       	ldi	r17, 0x04	; 4
    66d4:	95 95       	asr	r25
    66d6:	87 95       	ror	r24
    66d8:	1a 95       	dec	r17
    66da:	e1 f7       	brne	.-8      	; 0x66d4 <RTC_getTime+0xf8>
    66dc:	9c 01       	movw	r18, r24
    66de:	b3 e0       	ldi	r27, 0x03	; 3
    66e0:	22 0f       	add	r18, r18
    66e2:	33 1f       	adc	r19, r19
    66e4:	ba 95       	dec	r27
    66e6:	e1 f7       	brne	.-8      	; 0x66e0 <RTC_getTime+0x104>
    66e8:	88 0f       	add	r24, r24
    66ea:	99 1f       	adc	r25, r25
    66ec:	28 0f       	add	r18, r24
    66ee:	39 1f       	adc	r19, r25
    66f0:	4f 70       	andi	r20, 0x0F	; 15
    66f2:	42 0f       	add	r20, r18
    66f4:	40 93 1b 40 	sts	0x401B, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    66f8:	4f 81       	ldd	r20, Y+7	; 0x07
    66fa:	84 2f       	mov	r24, r20
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	80 71       	andi	r24, 0x10	; 16
    6700:	90 70       	andi	r25, 0x00	; 0
    6702:	f4 e0       	ldi	r31, 0x04	; 4
    6704:	95 95       	asr	r25
    6706:	87 95       	ror	r24
    6708:	fa 95       	dec	r31
    670a:	e1 f7       	brne	.-8      	; 0x6704 <RTC_getTime+0x128>
    670c:	9c 01       	movw	r18, r24
    670e:	e3 e0       	ldi	r30, 0x03	; 3
    6710:	22 0f       	add	r18, r18
    6712:	33 1f       	adc	r19, r19
    6714:	ea 95       	dec	r30
    6716:	e1 f7       	brne	.-8      	; 0x6710 <RTC_getTime+0x134>
    6718:	88 0f       	add	r24, r24
    671a:	99 1f       	adc	r25, r25
    671c:	28 0f       	add	r18, r24
    671e:	39 1f       	adc	r19, r25
    6720:	4f 70       	andi	r20, 0x0F	; 15
    6722:	42 0f       	add	r20, r18
    6724:	40 93 1c 40 	sts	0x401C, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    6728:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    672a:	42 2f       	mov	r20, r18
    672c:	4f 70       	andi	r20, 0x0F	; 15
    672e:	42 5e       	subi	r20, 0xE2	; 226
    6730:	60 75       	andi	r22, 0x50	; 80
    6732:	70 70       	andi	r23, 0x00	; 0
    6734:	86 e0       	ldi	r24, 0x06	; 6
    6736:	75 95       	asr	r23
    6738:	67 95       	ror	r22
    673a:	8a 95       	dec	r24
    673c:	e1 f7       	brne	.-8      	; 0x6736 <RTC_getTime+0x15a>
    673e:	84 e6       	ldi	r24, 0x64	; 100
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	fc 01       	movw	r30, r24
    6744:	6e 9f       	mul	r22, r30
    6746:	c0 01       	movw	r24, r0
    6748:	6f 9f       	mul	r22, r31
    674a:	90 0d       	add	r25, r0
    674c:	7e 9f       	mul	r23, r30
    674e:	90 0d       	add	r25, r0
    6750:	11 24       	eor	r1, r1
    6752:	48 0f       	add	r20, r24
    6754:	22 95       	swap	r18
    6756:	2f 70       	andi	r18, 0x0F	; 15
    6758:	30 e0       	ldi	r19, 0x00	; 0
    675a:	c9 01       	movw	r24, r18
    675c:	03 e0       	ldi	r16, 0x03	; 3
    675e:	88 0f       	add	r24, r24
    6760:	99 1f       	adc	r25, r25
    6762:	0a 95       	dec	r16
    6764:	e1 f7       	brne	.-8      	; 0x675e <RTC_getTime+0x182>
    6766:	22 0f       	add	r18, r18
    6768:	33 1f       	adc	r19, r19
    676a:	82 0f       	add	r24, r18
    676c:	93 1f       	adc	r25, r19
    676e:	48 0f       	add	r20, r24
    6770:	40 93 1d 40 	sts	0x401D, r20




} 
    6774:	28 96       	adiw	r28, 0x08	; 8
    6776:	cd bf       	out	0x3d, r28	; 61
    6778:	de bf       	out	0x3e, r29	; 62
    677a:	cf 91       	pop	r28
    677c:	df 91       	pop	r29
    677e:	1f 91       	pop	r17
    6780:	0f 91       	pop	r16
    6782:	08 95       	ret

00006784 <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    6784:	0e 94 ee 32 	call	0x65dc	; 0x65dc <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    6788:	86 e1       	ldi	r24, 0x16	; 22
    678a:	90 e4       	ldi	r25, 0x40	; 64
    678c:	0e 94 19 31 	call	0x6232	; 0x6232 <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    6790:	08 95       	ret

00006792 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    6792:	0f 93       	push	r16
    6794:	df 93       	push	r29
    6796:	cf 93       	push	r28
    6798:	0f 92       	push	r0
    679a:	cd b7       	in	r28, 0x3d	; 61
    679c:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    679e:	80 ec       	ldi	r24, 0xC0	; 192
    67a0:	e0 e5       	ldi	r30, 0x50	; 80
    67a2:	f0 e0       	ldi	r31, 0x00	; 0
    67a4:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    67a6:	80 91 50 00 	lds	r24, 0x0050
    67aa:	88 60       	ori	r24, 0x08	; 8
    67ac:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    67b0:	80 91 51 00 	lds	r24, 0x0051
    67b4:	83 ff       	sbrs	r24, 3
    67b6:	fc cf       	rjmp	.-8      	; 0x67b0 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    67b8:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    67bc:	8f b7       	in	r24, 0x3f	; 63
    67be:	89 83       	std	Y+1, r24	; 0x01
    cli();
    67c0:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    67c2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    67c4:	28 7f       	andi	r18, 0xF8	; 248
    67c6:	23 60       	ori	r18, 0x03	; 3
    67c8:	80 e4       	ldi	r24, 0x40	; 64
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	fc 01       	movw	r30, r24
    67ce:	08 ed       	ldi	r16, 0xD8	; 216
    67d0:	04 bf       	out	0x34, r16	; 52
    67d2:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    67d4:	89 81       	ldd	r24, Y+1	; 0x01
    67d6:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    67d8:	80 91 50 00 	lds	r24, 0x0050
    67dc:	8e 7f       	andi	r24, 0xFE	; 254
    67de:	80 93 50 00 	sts	0x0050, r24
}
    67e2:	0f 90       	pop	r0
    67e4:	cf 91       	pop	r28
    67e6:	df 91       	pop	r29
    67e8:	0f 91       	pop	r16
    67ea:	08 95       	ret

000067ec <Disable_JTAG>:

void Disable_JTAG(void){
    67ec:	0f 93       	push	r16
    67ee:	df 93       	push	r29
    67f0:	cf 93       	push	r28
    67f2:	0f 92       	push	r0
    67f4:	cd b7       	in	r28, 0x3d	; 61
    67f6:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    67f8:	8f b7       	in	r24, 0x3f	; 63
    67fa:	89 83       	std	Y+1, r24	; 0x01
    cli();
    67fc:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    67fe:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    6800:	21 e0       	ldi	r18, 0x01	; 1
    6802:	86 e9       	ldi	r24, 0x96	; 150
    6804:	90 e0       	ldi	r25, 0x00	; 0
    6806:	fc 01       	movw	r30, r24
    6808:	08 ed       	ldi	r16, 0xD8	; 216
    680a:	04 bf       	out	0x34, r16	; 52
    680c:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    680e:	89 81       	ldd	r24, Y+1	; 0x01
    6810:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    6812:	0f 90       	pop	r0
    6814:	cf 91       	pop	r28
    6816:	df 91       	pop	r29
    6818:	0f 91       	pop	r16
    681a:	08 95       	ret

0000681c <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    681c:	e0 e0       	ldi	r30, 0x00	; 0
    681e:	f1 e0       	ldi	r31, 0x01	; 1
    6820:	80 81       	ld	r24, Z
    6822:	80 68       	ori	r24, 0x80	; 128
    6824:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;							
    6826:	82 89       	ldd	r24, Z+18	; 0x12
    6828:	85 60       	ori	r24, 0x05	; 5
    682a:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    682c:	8b e8       	ldi	r24, 0x8B	; 139
    682e:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    6830:	80 e0       	ldi	r24, 0x00	; 0
    6832:	94 e0       	ldi	r25, 0x04	; 4
    6834:	84 8b       	std	Z+20, r24	; 0x14
    6836:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    6838:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    683a:	80 ea       	ldi	r24, 0xA0	; 160
    683c:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    683e:	8a e0       	ldi	r24, 0x0A	; 10
    6840:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    6842:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    6844:	8a e7       	ldi	r24, 0x7A	; 122
    6846:	9e e2       	ldi	r25, 0x2E	; 46
    6848:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    684a:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    684c:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    684e:	80 89       	ldd	r24, Z+16	; 0x10
    6850:	84 6a       	ori	r24, 0xA4	; 164
    6852:	80 8b       	std	Z+16, r24	; 0x10
		
}
    6854:	08 95       	ret

00006856 <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    6856:	e0 ea       	ldi	r30, 0xA0	; 160
    6858:	f0 e0       	ldi	r31, 0x00	; 0
    685a:	82 81       	ldd	r24, Z+2	; 0x02
    685c:	87 60       	ori	r24, 0x07	; 7
    685e:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    6860:	78 94       	sei
}
    6862:	08 95       	ret

00006864 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    6864:	e0 e4       	ldi	r30, 0x40	; 64
    6866:	fa e0       	ldi	r31, 0x0A	; 10
    6868:	80 e0       	ldi	r24, 0x00	; 0
    686a:	99 e0       	ldi	r25, 0x09	; 9
    686c:	86 a3       	std	Z+38, r24	; 0x26
    686e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    6870:	80 81       	ld	r24, Z
    6872:	80 7f       	andi	r24, 0xF0	; 240
    6874:	85 60       	ori	r24, 0x05	; 5
    6876:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    6878:	86 81       	ldd	r24, Z+6	; 0x06
    687a:	8c 7f       	andi	r24, 0xFC	; 252
    687c:	81 60       	ori	r24, 0x01	; 1
    687e:	86 83       	std	Z+6, r24	; 0x06

}
    6880:	08 95       	ret

00006882 <SD_WriteRTCBlock>:


}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    6882:	af 92       	push	r10
    6884:	bf 92       	push	r11
    6886:	cf 92       	push	r12
    6888:	df 92       	push	r13
    688a:	ef 92       	push	r14
    688c:	ff 92       	push	r15
    688e:	0f 93       	push	r16
    6890:	1f 93       	push	r17
    6892:	7b 01       	movw	r14, r22
    6894:	8c 01       	movw	r16, r24
    6896:	59 01       	movw	r10, r18
    6898:	6a 01       	movw	r12, r20
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    689a:	8f ef       	ldi	r24, 0xFF	; 255
    689c:	9f ef       	ldi	r25, 0xFF	; 255
    689e:	af ef       	ldi	r26, 0xFF	; 255
    68a0:	bf ef       	ldi	r27, 0xFF	; 255
    68a2:	80 93 a7 45 	sts	0x45A7, r24
    68a6:	90 93 a8 45 	sts	0x45A8, r25
    68aa:	a0 93 a9 45 	sts	0x45A9, r26
    68ae:	b0 93 aa 45 	sts	0x45AA, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    68b2:	6c e4       	ldi	r22, 0x4C	; 76
    68b4:	74 e7       	ldi	r23, 0x74	; 116
    68b6:	8e ed       	ldi	r24, 0xDE	; 222
    68b8:	90 eb       	ldi	r25, 0xB0	; 176
    68ba:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(27);				// record size  
    68be:	6b e1       	ldi	r22, 0x1B	; 27
    68c0:	70 e0       	ldi	r23, 0x00	; 0
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(2); 		// record type  
    68ca:	82 e0       	ldi	r24, 0x02	; 2
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    68d2:	c8 01       	movw	r24, r16
    68d4:	b7 01       	movw	r22, r14
    68d6:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    68da:	c6 01       	movw	r24, r12
    68dc:	b5 01       	movw	r22, r10
    68de:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write8(0);
    68e2:	80 e0       	ldi	r24, 0x00	; 0
    68e4:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    68e8:	60 e0       	ldi	r22, 0x00	; 0
    68ea:	70 e0       	ldi	r23, 0x00	; 0
    68ec:	80 e0       	ldi	r24, 0x00	; 0
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_WriteCRC();			      // CRC			
    68f4:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>
		
	f_sync(&Log_File);
    68f8:	8e e1       	ldi	r24, 0x1E	; 30
    68fa:	90 e4       	ldi	r25, 0x40	; 64
    68fc:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    6900:	1f 91       	pop	r17
    6902:	0f 91       	pop	r16
    6904:	ff 90       	pop	r15
    6906:	ef 90       	pop	r14
    6908:	df 90       	pop	r13
    690a:	cf 90       	pop	r12
    690c:	bf 90       	pop	r11
    690e:	af 90       	pop	r10
    6910:	08 95       	ret

00006912 <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    6912:	20 91 a5 2b 	lds	r18, 0x2BA5
    6916:	30 91 a6 2b 	lds	r19, 0x2BA6
    691a:	80 91 a3 2b 	lds	r24, 0x2BA3
    691e:	90 91 a4 2b 	lds	r25, 0x2BA4
    6922:	28 17       	cp	r18, r24
    6924:	39 07       	cpc	r19, r25
    6926:	41 f4       	brne	.+16     	; 0x6938 <Rs232_To_Debug+0x26>
    6928:	f4 cf       	rjmp	.-24     	; 0x6912 <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    692a:	80 91 a1 08 	lds	r24, 0x08A1
    692e:	85 ff       	sbrs	r24, 5
    6930:	fc cf       	rjmp	.-8      	; 0x692a <Rs232_To_Debug+0x18>
	Debug_Usart.DATA = data;	
    6932:	90 93 a0 08 	sts	0x08A0, r25
    6936:	ed cf       	rjmp	.-38     	; 0x6912 <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    6938:	81 e0       	ldi	r24, 0x01	; 1
    693a:	0e 94 10 03 	call	0x620	; 0x620 <Rs232_GetByte>
    693e:	98 2f       	mov	r25, r24
    6940:	f4 cf       	rjmp	.-24     	; 0x692a <Rs232_To_Debug+0x18>

00006942 <Debug_To_Wifi>:
}



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    6942:	20 91 90 2b 	lds	r18, 0x2B90
    6946:	30 91 91 2b 	lds	r19, 0x2B91
    694a:	80 91 8e 2b 	lds	r24, 0x2B8E
    694e:	90 91 8f 2b 	lds	r25, 0x2B8F
    6952:	28 17       	cp	r18, r24
    6954:	39 07       	cpc	r19, r25
    6956:	b1 f4       	brne	.+44     	; 0x6984 <Debug_To_Wifi+0x42>
    6958:	06 c0       	rjmp	.+12     	; 0x6966 <Debug_To_Wifi+0x24>
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    695a:	80 91 a1 0a 	lds	r24, 0x0AA1
    695e:	85 ff       	sbrs	r24, 5
    6960:	fc cf       	rjmp	.-8      	; 0x695a <Debug_To_Wifi+0x18>
	Wifi_Usart.DATA = data;
    6962:	90 93 a0 0a 	sts	0x0AA0, r25
void Debug_To_Wifi(void){
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
		}
		if(Wifi_CharReadyToRead()){
    6966:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
    696a:	88 23       	and	r24, r24
    696c:	51 f3       	breq	.-44     	; 0x6942 <Debug_To_Wifi>
			Debug_SendByte(Wifi_GetByte(true));
    696e:	81 e0       	ldi	r24, 0x01	; 1
    6970:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Wifi_GetByte>
    6974:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    6976:	80 91 a1 08 	lds	r24, 0x08A1
    697a:	85 ff       	sbrs	r24, 5
    697c:	fc cf       	rjmp	.-8      	; 0x6976 <Debug_To_Wifi+0x34>
	Debug_Usart.DATA = data;	
    697e:	90 93 a0 08 	sts	0x08A0, r25
    6982:	df cf       	rjmp	.-66     	; 0x6942 <Debug_To_Wifi>


void Debug_To_Wifi(void){
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
    6984:	81 e0       	ldi	r24, 0x01	; 1
    6986:	0e 94 3d 01 	call	0x27a	; 0x27a <Debug_GetByte>
    698a:	98 2f       	mov	r25, r24
    698c:	e6 cf       	rjmp	.-52     	; 0x695a <Debug_To_Wifi+0x18>

0000698e <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    698e:	0f 93       	push	r16
    6990:	1f 93       	push	r17
	fileName[0] = '/';
    6992:	02 e6       	ldi	r16, 0x62	; 98
    6994:	16 e3       	ldi	r17, 0x36	; 54
    6996:	2f e2       	ldi	r18, 0x2F	; 47
    6998:	20 93 62 36 	sts	0x3662, r18
	ltoa(var, fileName+1, 16);
    699c:	a8 01       	movw	r20, r16
    699e:	4f 5f       	subi	r20, 0xFF	; 255
    69a0:	5f 4f       	sbci	r21, 0xFF	; 255
    69a2:	20 e1       	ldi	r18, 0x10	; 16
    69a4:	30 e0       	ldi	r19, 0x00	; 0
    69a6:	0e 94 a2 4a 	call	0x9544	; 0x9544 <ltoa>
	strcat(fileName, ".bt");
    69aa:	c8 01       	movw	r24, r16
    69ac:	6b e0       	ldi	r22, 0x0B	; 11
    69ae:	70 e2       	ldi	r23, 0x20	; 32
    69b0:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
}
    69b4:	1f 91       	pop	r17
    69b6:	0f 91       	pop	r16
    69b8:	08 95       	ret

000069ba <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    69ba:	af 92       	push	r10
    69bc:	bf 92       	push	r11
    69be:	cf 92       	push	r12
    69c0:	df 92       	push	r13
    69c2:	ef 92       	push	r14
    69c4:	ff 92       	push	r15
    69c6:	0f 93       	push	r16
    69c8:	1f 93       	push	r17
    69ca:	cf 93       	push	r28
    69cc:	df 93       	push	r29
    69ce:	6c 01       	movw	r12, r24
	f_puts (string, &Log_File);
    69d0:	6e e1       	ldi	r22, 0x1E	; 30
    69d2:	70 e4       	ldi	r23, 0x40	; 64
    69d4:	0e 94 f7 24 	call	0x49ee	; 0x49ee <f_puts>
    69d8:	aa 24       	eor	r10, r10
    69da:	4a c0       	rjmp	.+148    	; 0x6a70 <SD_WriteString+0xb6>
	
	for (uint8_t i=0; i<strlen(string); i++) 
      { 
      CRC = CRC ^ string[i] ; 
    69dc:	20 91 a7 45 	lds	r18, 0x45A7
    69e0:	30 91 a8 45 	lds	r19, 0x45A8
    69e4:	40 91 a9 45 	lds	r20, 0x45A9
    69e8:	50 91 aa 45 	lds	r21, 0x45AA
    69ec:	cc 0d       	add	r28, r12
    69ee:	dd 1d       	adc	r29, r13
    69f0:	88 81       	ld	r24, Y
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	a0 e0       	ldi	r26, 0x00	; 0
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	82 27       	eor	r24, r18
    69fa:	93 27       	eor	r25, r19
    69fc:	a4 27       	eor	r26, r20
    69fe:	b5 27       	eor	r27, r21
    6a00:	80 93 a7 45 	sts	0x45A7, r24
    6a04:	90 93 a8 45 	sts	0x45A8, r25
    6a08:	a0 93 a9 45 	sts	0x45A9, r26
    6a0c:	b0 93 aa 45 	sts	0x45AA, r27
    6a10:	bb 24       	eor	r11, r11
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
    6a12:	e0 90 a7 45 	lds	r14, 0x45A7
    6a16:	f0 90 a8 45 	lds	r15, 0x45A8
    6a1a:	00 91 a9 45 	lds	r16, 0x45A9
    6a1e:	10 91 aa 45 	lds	r17, 0x45AA
    6a22:	60 91 a7 45 	lds	r22, 0x45A7
    6a26:	70 91 a8 45 	lds	r23, 0x45A8
    6a2a:	80 91 a9 45 	lds	r24, 0x45A9
    6a2e:	90 91 aa 45 	lds	r25, 0x45AA
    6a32:	61 70       	andi	r22, 0x01	; 1
    6a34:	70 70       	andi	r23, 0x00	; 0
    6a36:	80 70       	andi	r24, 0x00	; 0
    6a38:	90 70       	andi	r25, 0x00	; 0
    6a3a:	20 e2       	ldi	r18, 0x20	; 32
    6a3c:	33 e8       	ldi	r19, 0x83	; 131
    6a3e:	48 eb       	ldi	r20, 0xB8	; 184
    6a40:	5d ee       	ldi	r21, 0xED	; 237
    6a42:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    6a46:	16 95       	lsr	r17
    6a48:	07 95       	ror	r16
    6a4a:	f7 94       	ror	r15
    6a4c:	e7 94       	ror	r14
    6a4e:	e6 26       	eor	r14, r22
    6a50:	f7 26       	eor	r15, r23
    6a52:	08 27       	eor	r16, r24
    6a54:	19 27       	eor	r17, r25
    6a56:	e0 92 a7 45 	sts	0x45A7, r14
    6a5a:	f0 92 a8 45 	sts	0x45A8, r15
    6a5e:	00 93 a9 45 	sts	0x45A9, r16
    6a62:	10 93 aa 45 	sts	0x45AA, r17
	f_puts (string, &Log_File);
	
	for (uint8_t i=0; i<strlen(string); i++) 
      { 
      CRC = CRC ^ string[i] ; 
      for (uint8_t j=0; j<8; j++) 
    6a66:	b3 94       	inc	r11
    6a68:	88 e0       	ldi	r24, 0x08	; 8
    6a6a:	b8 16       	cp	r11, r24
    6a6c:	91 f6       	brne	.-92     	; 0x6a12 <SD_WriteString+0x58>
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
	
	for (uint8_t i=0; i<strlen(string); i++) 
    6a6e:	a3 94       	inc	r10
    6a70:	ca 2d       	mov	r28, r10
    6a72:	d0 e0       	ldi	r29, 0x00	; 0
    6a74:	f6 01       	movw	r30, r12
    6a76:	01 90       	ld	r0, Z+
    6a78:	00 20       	and	r0, r0
    6a7a:	e9 f7       	brne	.-6      	; 0x6a76 <SD_WriteString+0xbc>
    6a7c:	31 97       	sbiw	r30, 0x01	; 1
    6a7e:	ec 19       	sub	r30, r12
    6a80:	fd 09       	sbc	r31, r13
    6a82:	ce 17       	cp	r28, r30
    6a84:	df 07       	cpc	r29, r31
    6a86:	08 f4       	brcc	.+2      	; 0x6a8a <SD_WriteString+0xd0>
    6a88:	a9 cf       	rjmp	.-174    	; 0x69dc <SD_WriteString+0x22>
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     } 
}
    6a8a:	df 91       	pop	r29
    6a8c:	cf 91       	pop	r28
    6a8e:	1f 91       	pop	r17
    6a90:	0f 91       	pop	r16
    6a92:	ff 90       	pop	r15
    6a94:	ef 90       	pop	r14
    6a96:	df 90       	pop	r13
    6a98:	cf 90       	pop	r12
    6a9a:	bf 90       	pop	r11
    6a9c:	af 90       	pop	r10
    6a9e:	08 95       	ret

00006aa0 <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    6aa0:	0f 93       	push	r16
    6aa2:	1f 93       	push	r17
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    6aa4:	8f ef       	ldi	r24, 0xFF	; 255
    6aa6:	9f ef       	ldi	r25, 0xFF	; 255
    6aa8:	af ef       	ldi	r26, 0xFF	; 255
    6aaa:	bf ef       	ldi	r27, 0xFF	; 255
    6aac:	80 93 a7 45 	sts	0x45A7, r24
    6ab0:	90 93 a8 45 	sts	0x45A8, r25
    6ab4:	a0 93 a9 45 	sts	0x45A9, r26
    6ab8:	b0 93 aa 45 	sts	0x45AA, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6abc:	6c e4       	ldi	r22, 0x4C	; 76
    6abe:	74 e7       	ldi	r23, 0x74	; 116
    6ac0:	8e ed       	ldi	r24, 0xDE	; 222
    6ac2:	90 eb       	ldi	r25, 0xB0	; 176
    6ac4:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(61);				// record size
    6ac8:	6d e3       	ldi	r22, 0x3D	; 61
    6aca:	70 e0       	ldi	r23, 0x00	; 0
    6acc:	80 e0       	ldi	r24, 0x00	; 0
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(3); 		// record type
    6ad4:	83 e0       	ldi	r24, 0x03	; 3
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    6adc:	60 91 86 2b 	lds	r22, 0x2B86
    6ae0:	70 91 87 2b 	lds	r23, 0x2B87
    6ae4:	80 91 88 2b 	lds	r24, 0x2B88
    6ae8:	90 91 89 2b 	lds	r25, 0x2B89
    6aec:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    6af0:	60 e0       	ldi	r22, 0x00	; 0
    6af2:	70 e8       	ldi	r23, 0x80	; 128
    6af4:	87 e9       	ldi	r24, 0x97	; 151
    6af6:	96 e0       	ldi	r25, 0x06	; 6
    6af8:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(1);												// number of samples
    6afc:	61 e0       	ldi	r22, 0x01	; 1
    6afe:	70 e0       	ldi	r23, 0x00	; 0
    6b00:	80 e0       	ldi	r24, 0x00	; 0
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_WriteString("Air_Small");
    6b08:	8f e0       	ldi	r24, 0x0F	; 15
    6b0a:	90 e2       	ldi	r25, 0x20	; 32
    6b0c:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6b10:	89 e0       	ldi	r24, 0x09	; 9
    6b12:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("32");
    6b16:	09 e1       	ldi	r16, 0x19	; 25
    6b18:	10 e2       	ldi	r17, 0x20	; 32
    6b1a:	c8 01       	movw	r24, r16
    6b1c:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6b20:	8a e0       	ldi	r24, 0x0A	; 10
    6b22:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("Air_Large");
    6b26:	8c e1       	ldi	r24, 0x1C	; 28
    6b28:	90 e2       	ldi	r25, 0x20	; 32
    6b2a:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6b2e:	89 e0       	ldi	r24, 0x09	; 9
    6b30:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("32");
    6b34:	c8 01       	movw	r24, r16
    6b36:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6b3a:	8a e0       	ldi	r24, 0x0A	; 10
    6b3c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	SD_Write8(0x00);
    6b40:	80 e0       	ldi	r24, 0x00	; 0
    6b42:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	SD_Write32(smallCount);
    6b46:	60 91 2d 2e 	lds	r22, 0x2E2D
    6b4a:	70 91 2e 2e 	lds	r23, 0x2E2E
    6b4e:	80 91 2f 2e 	lds	r24, 0x2E2F
    6b52:	90 91 30 2e 	lds	r25, 0x2E30
    6b56:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(largeCount);
    6b5a:	60 91 4b 4a 	lds	r22, 0x4A4B
    6b5e:	70 91 4c 4a 	lds	r23, 0x4A4C
    6b62:	80 91 4d 4a 	lds	r24, 0x4A4D
    6b66:	90 91 4e 4a 	lds	r25, 0x4A4E
    6b6a:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_WriteCRC();			// CRC
    6b6e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>

	f_sync(&Log_File);
    6b72:	8e e1       	ldi	r24, 0x1E	; 30
    6b74:	90 e4       	ldi	r25, 0x40	; 64
    6b76:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    6b7a:	1f 91       	pop	r17
    6b7c:	0f 91       	pop	r16
    6b7e:	08 95       	ret

00006b80 <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    6b80:	1f 93       	push	r17
    6b82:	cf 93       	push	r28
    6b84:	df 93       	push	r29
    6b86:	18 2f       	mov	r17, r24
    6b88:	8f ef       	ldi	r24, 0xFF	; 255
    6b8a:	9f ef       	ldi	r25, 0xFF	; 255
    6b8c:	af ef       	ldi	r26, 0xFF	; 255
    6b8e:	bf ef       	ldi	r27, 0xFF	; 255
    6b90:	80 93 a7 45 	sts	0x45A7, r24
    6b94:	90 93 a8 45 	sts	0x45A8, r25
    6b98:	a0 93 a9 45 	sts	0x45A9, r26
    6b9c:	b0 93 aa 45 	sts	0x45AA, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6ba0:	6c e4       	ldi	r22, 0x4C	; 76
    6ba2:	74 e7       	ldi	r23, 0x74	; 116
    6ba4:	8e ed       	ldi	r24, 0xDE	; 222
    6ba6:	90 eb       	ldi	r25, 0xB0	; 176
    6ba8:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(244);				// record size
    6bac:	64 ef       	ldi	r22, 0xF4	; 244
    6bae:	70 e0       	ldi	r23, 0x00	; 0
    6bb0:	80 e0       	ldi	r24, 0x00	; 0
    6bb2:	90 e0       	ldi	r25, 0x00	; 0
    6bb4:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(3); 		// record type
    6bb8:	83 e0       	ldi	r24, 0x03	; 3
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    6bc0:	11 30       	cpi	r17, 0x01	; 1
    6bc2:	49 f4       	brne	.+18     	; 0x6bd6 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    6bc4:	60 91 7e 2b 	lds	r22, 0x2B7E
    6bc8:	70 91 7f 2b 	lds	r23, 0x2B7F
    6bcc:	80 91 80 2b 	lds	r24, 0x2B80
    6bd0:	90 91 81 2b 	lds	r25, 0x2B81
    6bd4:	08 c0       	rjmp	.+16     	; 0x6be6 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    6bd6:	60 91 82 2b 	lds	r22, 0x2B82
    6bda:	70 91 83 2b 	lds	r23, 0x2B83
    6bde:	80 91 84 2b 	lds	r24, 0x2B84
    6be2:	90 91 85 2b 	lds	r25, 0x2B85
    6be6:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6bea:	60 e0       	ldi	r22, 0x00	; 0
    6bec:	70 e2       	ldi	r23, 0x20	; 32
    6bee:	8c e1       	ldi	r24, 0x1C	; 28
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(10);												// number of samples
    6bf6:	6a e0       	ldi	r22, 0x0A	; 10
    6bf8:	70 e0       	ldi	r23, 0x00	; 0
    6bfa:	80 e0       	ldi	r24, 0x00	; 0
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_WriteString("Light_Green");
    6c02:	86 e2       	ldi	r24, 0x26	; 38
    6c04:	90 e2       	ldi	r25, 0x20	; 32
    6c06:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6c0a:	89 e0       	ldi	r24, 0x09	; 9
    6c0c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("32");
    6c10:	89 e1       	ldi	r24, 0x19	; 25
    6c12:	90 e2       	ldi	r25, 0x20	; 32
    6c14:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6c18:	8a e0       	ldi	r24, 0x0A	; 10
    6c1a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("Light_Red");
    6c1e:	82 e3       	ldi	r24, 0x32	; 50
    6c20:	90 e2       	ldi	r25, 0x20	; 32
    6c22:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6c26:	89 e0       	ldi	r24, 0x09	; 9
    6c28:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("32");
    6c2c:	89 e1       	ldi	r24, 0x19	; 25
    6c2e:	90 e2       	ldi	r25, 0x20	; 32
    6c30:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6c34:	8a e0       	ldi	r24, 0x0A	; 10
    6c36:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("Light_Blue");
    6c3a:	8c e3       	ldi	r24, 0x3C	; 60
    6c3c:	90 e2       	ldi	r25, 0x20	; 32
    6c3e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6c42:	89 e0       	ldi	r24, 0x09	; 9
    6c44:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("32");
    6c48:	89 e1       	ldi	r24, 0x19	; 25
    6c4a:	90 e2       	ldi	r25, 0x20	; 32
    6c4c:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6c50:	8a e0       	ldi	r24, 0x0A	; 10
    6c52:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("Light_Clear");
    6c56:	87 e4       	ldi	r24, 0x47	; 71
    6c58:	90 e2       	ldi	r25, 0x20	; 32
    6c5a:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6c5e:	89 e0       	ldi	r24, 0x09	; 9
    6c60:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("32");
    6c64:	89 e1       	ldi	r24, 0x19	; 25
    6c66:	90 e2       	ldi	r25, 0x20	; 32
    6c68:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6c6c:	8a e0       	ldi	r24, 0x0A	; 10
    6c6e:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	SD_Write8(0x00);
    6c72:	80 e0       	ldi	r24, 0x00	; 0
    6c74:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	if(bufferNumber == 1){
    6c78:	11 30       	cpi	r17, 0x01	; 1
    6c7a:	69 f4       	brne	.+26     	; 0x6c96 <SD_WriteLightBuffer+0x116>
    6c7c:	cb ea       	ldi	r28, 0xAB	; 171
    6c7e:	d9 e4       	ldi	r29, 0x49	; 73
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    6c80:	69 91       	ld	r22, Y+
    6c82:	79 91       	ld	r23, Y+
    6c84:	89 91       	ld	r24, Y+
    6c86:	99 91       	ld	r25, Y+
    6c88:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    6c8c:	8a e4       	ldi	r24, 0x4A	; 74
    6c8e:	cb 34       	cpi	r28, 0x4B	; 75
    6c90:	d8 07       	cpc	r29, r24
    6c92:	b1 f7       	brne	.-20     	; 0x6c80 <SD_WriteLightBuffer+0x100>
    6c94:	0c c0       	rjmp	.+24     	; 0x6cae <SD_WriteLightBuffer+0x12e>
    6c96:	ce e8       	ldi	r28, 0x8E	; 142
    6c98:	d6 e3       	ldi	r29, 0x36	; 54
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    6c9a:	69 91       	ld	r22, Y+
    6c9c:	79 91       	ld	r23, Y+
    6c9e:	89 91       	ld	r24, Y+
    6ca0:	99 91       	ld	r25, Y+
    6ca2:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    6ca6:	87 e3       	ldi	r24, 0x37	; 55
    6ca8:	ce 32       	cpi	r28, 0x2E	; 46
    6caa:	d8 07       	cpc	r29, r24
    6cac:	b1 f7       	brne	.-20     	; 0x6c9a <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    6cae:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>

	f_sync(&Log_File);
    6cb2:	8e e1       	ldi	r24, 0x1E	; 30
    6cb4:	90 e4       	ldi	r25, 0x40	; 64
    6cb6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    6cba:	df 91       	pop	r29
    6cbc:	cf 91       	pop	r28
    6cbe:	1f 91       	pop	r17
    6cc0:	08 95       	ret

00006cc2 <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    6cc2:	1f 93       	push	r17
    6cc4:	18 2f       	mov	r17, r24
    6cc6:	8f ef       	ldi	r24, 0xFF	; 255
    6cc8:	9f ef       	ldi	r25, 0xFF	; 255
    6cca:	af ef       	ldi	r26, 0xFF	; 255
    6ccc:	bf ef       	ldi	r27, 0xFF	; 255
    6cce:	80 93 a7 45 	sts	0x45A7, r24
    6cd2:	90 93 a8 45 	sts	0x45A8, r25
    6cd6:	a0 93 a9 45 	sts	0x45A9, r26
    6cda:	b0 93 aa 45 	sts	0x45AA, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6cde:	6c e4       	ldi	r22, 0x4C	; 76
    6ce0:	74 e7       	ldi	r23, 0x74	; 116
    6ce2:	8e ed       	ldi	r24, 0xDE	; 222
    6ce4:	90 eb       	ldi	r25, 0xB0	; 176
    6ce6:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    6cea:	60 e1       	ldi	r22, 0x10	; 16
    6cec:	74 e0       	ldi	r23, 0x04	; 4
    6cee:	80 e0       	ldi	r24, 0x00	; 0
    6cf0:	90 e0       	ldi	r25, 0x00	; 0
    6cf2:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(3); 									// record type
    6cf6:	83 e0       	ldi	r24, 0x03	; 3
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    6cfe:	11 30       	cpi	r17, 0x01	; 1
    6d00:	49 f4       	brne	.+18     	; 0x6d14 <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    6d02:	60 91 76 2b 	lds	r22, 0x2B76
    6d06:	70 91 77 2b 	lds	r23, 0x2B77
    6d0a:	80 91 78 2b 	lds	r24, 0x2B78
    6d0e:	90 91 79 2b 	lds	r25, 0x2B79
    6d12:	08 c0       	rjmp	.+16     	; 0x6d24 <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    6d14:	60 91 7a 2b 	lds	r22, 0x2B7A
    6d18:	70 91 7b 2b 	lds	r23, 0x2B7B
    6d1c:	80 91 7c 2b 	lds	r24, 0x2B7C
    6d20:	90 91 7d 2b 	lds	r25, 0x2B7D
    6d24:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    6d28:	60 e0       	ldi	r22, 0x00	; 0
    6d2a:	71 e0       	ldi	r23, 0x01	; 1
    6d2c:	80 e0       	ldi	r24, 0x00	; 0
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    6d34:	68 ee       	ldi	r22, 0xE8	; 232
    6d36:	73 e0       	ldi	r23, 0x03	; 3
    6d38:	80 e0       	ldi	r24, 0x00	; 0
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_WriteString("Microphone");
    6d40:	83 e5       	ldi	r24, 0x53	; 83
    6d42:	90 e2       	ldi	r25, 0x20	; 32
    6d44:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6d48:	89 e0       	ldi	r24, 0x09	; 9
    6d4a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("8");
    6d4e:	8e e5       	ldi	r24, 0x5E	; 94
    6d50:	90 e2       	ldi	r25, 0x20	; 32
    6d52:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6d56:	8a e0       	ldi	r24, 0x0A	; 10
    6d58:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_Write8(0x00);
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	if(bufferNumber == 1){
    6d62:	11 30       	cpi	r17, 0x01	; 1
    6d64:	19 f4       	brne	.+6      	; 0x6d6c <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    6d66:	80 e6       	ldi	r24, 0x60	; 96
    6d68:	97 e3       	ldi	r25, 0x37	; 55
    6d6a:	02 c0       	rjmp	.+4      	; 0x6d70 <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    6d6c:	8a e7       	ldi	r24, 0x7A	; 122
    6d6e:	92 e3       	ldi	r25, 0x32	; 50
    6d70:	68 ee       	ldi	r22, 0xE8	; 232
    6d72:	73 e0       	ldi	r23, 0x03	; 3
    6d74:	0e 94 29 25 	call	0x4a52	; 0x4a52 <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    6d78:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>

	f_sync(&Log_File);
    6d7c:	8e e1       	ldi	r24, 0x1E	; 30
    6d7e:	90 e4       	ldi	r25, 0x40	; 64
    6d80:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    6d84:	1f 91       	pop	r17
    6d86:	08 95       	ret

00006d88 <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    6d88:	1f 93       	push	r17
    6d8a:	cf 93       	push	r28
    6d8c:	df 93       	push	r29
    6d8e:	18 2f       	mov	r17, r24
    6d90:	8f ef       	ldi	r24, 0xFF	; 255
    6d92:	9f ef       	ldi	r25, 0xFF	; 255
    6d94:	af ef       	ldi	r26, 0xFF	; 255
    6d96:	bf ef       	ldi	r27, 0xFF	; 255
    6d98:	80 93 a7 45 	sts	0x45A7, r24
    6d9c:	90 93 a8 45 	sts	0x45A8, r25
    6da0:	a0 93 a9 45 	sts	0x45A9, r26
    6da4:	b0 93 aa 45 	sts	0x45AA, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6da8:	6c e4       	ldi	r22, 0x4C	; 76
    6daa:	74 e7       	ldi	r23, 0x74	; 116
    6dac:	8e ed       	ldi	r24, 0xDE	; 222
    6dae:	90 eb       	ldi	r25, 0xB0	; 176
    6db0:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(48);				// record size
    6db4:	60 e3       	ldi	r22, 0x30	; 48
    6db6:	70 e0       	ldi	r23, 0x00	; 0
    6db8:	80 e0       	ldi	r24, 0x00	; 0
    6dba:	90 e0       	ldi	r25, 0x00	; 0
    6dbc:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(3); 		// record type
    6dc0:	83 e0       	ldi	r24, 0x03	; 3
    6dc2:	90 e0       	ldi	r25, 0x00	; 0
    6dc4:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    6dc8:	11 30       	cpi	r17, 0x01	; 1
    6dca:	49 f4       	brne	.+18     	; 0x6dde <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    6dcc:	60 91 6e 2b 	lds	r22, 0x2B6E
    6dd0:	70 91 6f 2b 	lds	r23, 0x2B6F
    6dd4:	80 91 70 2b 	lds	r24, 0x2B70
    6dd8:	90 91 71 2b 	lds	r25, 0x2B71
    6ddc:	08 c0       	rjmp	.+16     	; 0x6dee <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    6dde:	60 91 72 2b 	lds	r22, 0x2B72
    6de2:	70 91 73 2b 	lds	r23, 0x2B73
    6de6:	80 91 74 2b 	lds	r24, 0x2B74
    6dea:	90 91 75 2b 	lds	r25, 0x2B75
    6dee:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6df2:	60 e0       	ldi	r22, 0x00	; 0
    6df4:	70 e2       	ldi	r23, 0x20	; 32
    6df6:	8c e1       	ldi	r24, 0x1C	; 28
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(10);												// number of samples
    6dfe:	6a e0       	ldi	r22, 0x0A	; 10
    6e00:	70 e0       	ldi	r23, 0x00	; 0
    6e02:	80 e0       	ldi	r24, 0x00	; 0
    6e04:	90 e0       	ldi	r25, 0x00	; 0
    6e06:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_WriteString("Pressure");
    6e0a:	80 e6       	ldi	r24, 0x60	; 96
    6e0c:	90 e2       	ldi	r25, 0x20	; 32
    6e0e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6e12:	89 e0       	ldi	r24, 0x09	; 9
    6e14:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("8");
    6e18:	8e e5       	ldi	r24, 0x5E	; 94
    6e1a:	90 e2       	ldi	r25, 0x20	; 32
    6e1c:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6e20:	8a e0       	ldi	r24, 0x0A	; 10
    6e22:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_Write8(0x00);
    6e26:	80 e0       	ldi	r24, 0x00	; 0
    6e28:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	if(bufferNumber == 1){
    6e2c:	11 30       	cpi	r17, 0x01	; 1
    6e2e:	51 f4       	brne	.+20     	; 0x6e44 <SD_WritePressureBuffer+0xbc>
    6e30:	c3 e2       	ldi	r28, 0x23	; 35
    6e32:	de e2       	ldi	r29, 0x2E	; 46
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    6e34:	89 91       	ld	r24, Y+
    6e36:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    6e3a:	8e e2       	ldi	r24, 0x2E	; 46
    6e3c:	cd 32       	cpi	r28, 0x2D	; 45
    6e3e:	d8 07       	cpc	r29, r24
    6e40:	c9 f7       	brne	.-14     	; 0x6e34 <SD_WritePressureBuffer+0xac>
    6e42:	09 c0       	rjmp	.+18     	; 0x6e56 <SD_WritePressureBuffer+0xce>
    6e44:	ce ee       	ldi	r28, 0xEE	; 238
    6e46:	db e3       	ldi	r29, 0x3B	; 59
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    6e48:	89 91       	ld	r24, Y+
    6e4a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    6e4e:	8b e3       	ldi	r24, 0x3B	; 59
    6e50:	c8 3f       	cpi	r28, 0xF8	; 248
    6e52:	d8 07       	cpc	r29, r24
    6e54:	c9 f7       	brne	.-14     	; 0x6e48 <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    6e56:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>

	f_sync(&Log_File);
    6e5a:	8e e1       	ldi	r24, 0x1E	; 30
    6e5c:	90 e4       	ldi	r25, 0x40	; 64
    6e5e:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    6e62:	df 91       	pop	r29
    6e64:	cf 91       	pop	r28
    6e66:	1f 91       	pop	r17
    6e68:	08 95       	ret

00006e6a <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    6e6a:	1f 93       	push	r17
    6e6c:	cf 93       	push	r28
    6e6e:	df 93       	push	r29
    6e70:	18 2f       	mov	r17, r24
    6e72:	8f ef       	ldi	r24, 0xFF	; 255
    6e74:	9f ef       	ldi	r25, 0xFF	; 255
    6e76:	af ef       	ldi	r26, 0xFF	; 255
    6e78:	bf ef       	ldi	r27, 0xFF	; 255
    6e7a:	80 93 a7 45 	sts	0x45A7, r24
    6e7e:	90 93 a8 45 	sts	0x45A8, r25
    6e82:	a0 93 a9 45 	sts	0x45A9, r26
    6e86:	b0 93 aa 45 	sts	0x45AA, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6e8a:	6c e4       	ldi	r22, 0x4C	; 76
    6e8c:	74 e7       	ldi	r23, 0x74	; 116
    6e8e:	8e ed       	ldi	r24, 0xDE	; 222
    6e90:	90 eb       	ldi	r25, 0xB0	; 176
    6e92:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(48);				// record size
    6e96:	60 e3       	ldi	r22, 0x30	; 48
    6e98:	70 e0       	ldi	r23, 0x00	; 0
    6e9a:	80 e0       	ldi	r24, 0x00	; 0
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(3); 		// record type
    6ea2:	83 e0       	ldi	r24, 0x03	; 3
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    6eaa:	11 30       	cpi	r17, 0x01	; 1
    6eac:	49 f4       	brne	.+18     	; 0x6ec0 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    6eae:	60 91 66 2b 	lds	r22, 0x2B66
    6eb2:	70 91 67 2b 	lds	r23, 0x2B67
    6eb6:	80 91 68 2b 	lds	r24, 0x2B68
    6eba:	90 91 69 2b 	lds	r25, 0x2B69
    6ebe:	08 c0       	rjmp	.+16     	; 0x6ed0 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    6ec0:	60 91 6a 2b 	lds	r22, 0x2B6A
    6ec4:	70 91 6b 2b 	lds	r23, 0x2B6B
    6ec8:	80 91 6c 2b 	lds	r24, 0x2B6C
    6ecc:	90 91 6d 2b 	lds	r25, 0x2B6D
    6ed0:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6ed4:	60 e0       	ldi	r22, 0x00	; 0
    6ed6:	70 e2       	ldi	r23, 0x20	; 32
    6ed8:	8c e1       	ldi	r24, 0x1C	; 28
    6eda:	90 e0       	ldi	r25, 0x00	; 0
    6edc:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(10);												// number of samples
    6ee0:	6a e0       	ldi	r22, 0x0A	; 10
    6ee2:	70 e0       	ldi	r23, 0x00	; 0
    6ee4:	80 e0       	ldi	r24, 0x00	; 0
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>

	SD_WriteString("Humidity");
    6eec:	89 e6       	ldi	r24, 0x69	; 105
    6eee:	90 e2       	ldi	r25, 0x20	; 32
    6ef0:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6ef4:	89 e0       	ldi	r24, 0x09	; 9
    6ef6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("8");
    6efa:	8e e5       	ldi	r24, 0x5E	; 94
    6efc:	90 e2       	ldi	r25, 0x20	; 32
    6efe:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6f02:	8a e0       	ldi	r24, 0x0A	; 10
    6f04:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_Write8(0x00);
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>

	if(bufferNumber == 1){
    6f0e:	11 30       	cpi	r17, 0x01	; 1
    6f10:	51 f4       	brne	.+20     	; 0x6f26 <SD_WriteHumidityBuffer+0xbc>
    6f12:	ca e0       	ldi	r28, 0x0A	; 10
    6f14:	dc e3       	ldi	r29, 0x3C	; 60
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    6f16:	89 91       	ld	r24, Y+
    6f18:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    6f1c:	8c e3       	ldi	r24, 0x3C	; 60
    6f1e:	c4 31       	cpi	r28, 0x14	; 20
    6f20:	d8 07       	cpc	r29, r24
    6f22:	c9 f7       	brne	.-14     	; 0x6f16 <SD_WriteHumidityBuffer+0xac>
    6f24:	09 c0       	rjmp	.+18     	; 0x6f38 <SD_WriteHumidityBuffer+0xce>
    6f26:	c2 e6       	ldi	r28, 0x62	; 98
    6f28:	d2 e4       	ldi	r29, 0x42	; 66
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    6f2a:	89 91       	ld	r24, Y+
    6f2c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    6f30:	82 e4       	ldi	r24, 0x42	; 66
    6f32:	cc 36       	cpi	r28, 0x6C	; 108
    6f34:	d8 07       	cpc	r29, r24
    6f36:	c9 f7       	brne	.-14     	; 0x6f2a <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    6f38:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>

	f_sync(&Log_File);
    6f3c:	8e e1       	ldi	r24, 0x1E	; 30
    6f3e:	90 e4       	ldi	r25, 0x40	; 64
    6f40:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    6f44:	df 91       	pop	r29
    6f46:	cf 91       	pop	r28
    6f48:	1f 91       	pop	r17
    6f4a:	08 95       	ret

00006f4c <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    6f4c:	1f 93       	push	r17
    6f4e:	cf 93       	push	r28
    6f50:	df 93       	push	r29
    6f52:	18 2f       	mov	r17, r24
    6f54:	8f ef       	ldi	r24, 0xFF	; 255
    6f56:	9f ef       	ldi	r25, 0xFF	; 255
    6f58:	af ef       	ldi	r26, 0xFF	; 255
    6f5a:	bf ef       	ldi	r27, 0xFF	; 255
    6f5c:	80 93 a7 45 	sts	0x45A7, r24
    6f60:	90 93 a8 45 	sts	0x45A8, r25
    6f64:	a0 93 a9 45 	sts	0x45A9, r26
    6f68:	b0 93 aa 45 	sts	0x45AA, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    6f6c:	6c e4       	ldi	r22, 0x4C	; 76
    6f6e:	74 e7       	ldi	r23, 0x74	; 116
    6f70:	8e ed       	ldi	r24, 0xDE	; 222
    6f72:	90 eb       	ldi	r25, 0xB0	; 176
    6f74:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(62);				// record size  
    6f78:	6e e3       	ldi	r22, 0x3E	; 62
    6f7a:	70 e0       	ldi	r23, 0x00	; 0
    6f7c:	80 e0       	ldi	r24, 0x00	; 0
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(3); 		// record type  
    6f84:	83 e0       	ldi	r24, 0x03	; 3
    6f86:	90 e0       	ldi	r25, 0x00	; 0
    6f88:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    6f8c:	11 30       	cpi	r17, 0x01	; 1
    6f8e:	49 f4       	brne	.+18     	; 0x6fa2 <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    6f90:	60 91 5e 2b 	lds	r22, 0x2B5E
    6f94:	70 91 5f 2b 	lds	r23, 0x2B5F
    6f98:	80 91 60 2b 	lds	r24, 0x2B60
    6f9c:	90 91 61 2b 	lds	r25, 0x2B61
    6fa0:	08 c0       	rjmp	.+16     	; 0x6fb2 <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    6fa2:	60 91 62 2b 	lds	r22, 0x2B62
    6fa6:	70 91 63 2b 	lds	r23, 0x2B63
    6faa:	80 91 64 2b 	lds	r24, 0x2B64
    6fae:	90 91 65 2b 	lds	r25, 0x2B65
    6fb2:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6fb6:	60 e0       	ldi	r22, 0x00	; 0
    6fb8:	70 e2       	ldi	r23, 0x20	; 32
    6fba:	8c e1       	ldi	r24, 0x1C	; 28
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(10);												// number of samples
    6fc2:	6a e0       	ldi	r22, 0x0A	; 10
    6fc4:	70 e0       	ldi	r23, 0x00	; 0
    6fc6:	80 e0       	ldi	r24, 0x00	; 0
    6fc8:	90 e0       	ldi	r25, 0x00	; 0
    6fca:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
		
	SD_WriteString("Temperature");
    6fce:	82 e7       	ldi	r24, 0x72	; 114
    6fd0:	90 e2       	ldi	r25, 0x20	; 32
    6fd2:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    6fd6:	89 e0       	ldi	r24, 0x09	; 9
    6fd8:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("16");
    6fdc:	8e e7       	ldi	r24, 0x7E	; 126
    6fde:	90 e2       	ldi	r25, 0x20	; 32
    6fe0:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    6fe4:	8a e0       	ldi	r24, 0x0A	; 10
    6fe6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_Write8(0x00);
    6fea:	80 e0       	ldi	r24, 0x00	; 0
    6fec:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	
	if(bufferNumber == 1){
    6ff0:	11 30       	cpi	r17, 0x01	; 1
    6ff2:	59 f4       	brne	.+22     	; 0x700a <SD_WriteTemperatureBuffer+0xbe>
    6ff4:	c8 e4       	ldi	r28, 0x48	; 72
    6ff6:	db e3       	ldi	r29, 0x3B	; 59
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    6ff8:	89 91       	ld	r24, Y+
    6ffa:	99 91       	ld	r25, Y+
    6ffc:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7000:	8b e3       	ldi	r24, 0x3B	; 59
    7002:	cc 35       	cpi	r28, 0x5C	; 92
    7004:	d8 07       	cpc	r29, r24
    7006:	c1 f7       	brne	.-16     	; 0x6ff8 <SD_WriteTemperatureBuffer+0xac>
    7008:	0a c0       	rjmp	.+20     	; 0x701e <SD_WriteTemperatureBuffer+0xd2>
    700a:	c1 ec       	ldi	r28, 0xC1	; 193
    700c:	db e3       	ldi	r29, 0x3B	; 59
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    700e:	89 91       	ld	r24, Y+
    7010:	99 91       	ld	r25, Y+
    7012:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7016:	8b e3       	ldi	r24, 0x3B	; 59
    7018:	c5 3d       	cpi	r28, 0xD5	; 213
    701a:	d8 07       	cpc	r29, r24
    701c:	c1 f7       	brne	.-16     	; 0x700e <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    701e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7022:	8e e1       	ldi	r24, 0x1E	; 30
    7024:	90 e4       	ldi	r25, 0x40	; 64
    7026:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

}
    702a:	df 91       	pop	r29
    702c:	cf 91       	pop	r28
    702e:	1f 91       	pop	r17
    7030:	08 95       	ret

00007032 <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    7032:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7034:	dc 01       	movw	r26, r24
    7036:	0d 90       	ld	r0, X+
    7038:	00 20       	and	r0, r0
    703a:	e9 f7       	brne	.-6      	; 0x7036 <Rs232_SendString+0x4>
    703c:	11 97       	sbiw	r26, 0x01	; 1
    703e:	a8 1b       	sub	r26, r24
    7040:	b9 0b       	sbc	r27, r25
    7042:	90 e0       	ldi	r25, 0x00	; 0
    7044:	0a c0       	rjmp	.+20     	; 0x705a <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    7046:	e2 0f       	add	r30, r18
    7048:	f3 1f       	adc	r31, r19
    704a:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    704c:	80 91 a1 09 	lds	r24, 0x09A1
    7050:	85 ff       	sbrs	r24, 5
    7052:	fc cf       	rjmp	.-8      	; 0x704c <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    7054:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7058:	9f 5f       	subi	r25, 0xFF	; 255
    705a:	e9 2f       	mov	r30, r25
    705c:	f0 e0       	ldi	r31, 0x00	; 0
    705e:	ea 17       	cp	r30, r26
    7060:	fb 07       	cpc	r31, r27
    7062:	88 f3       	brcs	.-30     	; 0x7046 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    7064:	66 23       	and	r22, r22
    7066:	71 f0       	breq	.+28     	; 0x7084 <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7068:	80 91 a1 09 	lds	r24, 0x09A1
    706c:	85 ff       	sbrs	r24, 5
    706e:	fc cf       	rjmp	.-8      	; 0x7068 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    7070:	8d e0       	ldi	r24, 0x0D	; 13
    7072:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7076:	80 91 a1 09 	lds	r24, 0x09A1
    707a:	85 ff       	sbrs	r24, 5
    707c:	fc cf       	rjmp	.-8      	; 0x7076 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    707e:	8a e0       	ldi	r24, 0x0A	; 10
    7080:	80 93 a0 09 	sts	0x09A0, r24
    7084:	08 95       	ret

00007086 <Wifi_SendString>:
}

void Wifi_SendString(char string [],bool CR){
    7086:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7088:	dc 01       	movw	r26, r24
    708a:	0d 90       	ld	r0, X+
    708c:	00 20       	and	r0, r0
    708e:	e9 f7       	brne	.-6      	; 0x708a <Wifi_SendString+0x4>
    7090:	11 97       	sbiw	r26, 0x01	; 1
    7092:	a8 1b       	sub	r26, r24
    7094:	b9 0b       	sbc	r27, r25
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	0a c0       	rjmp	.+20     	; 0x70ae <Wifi_SendString+0x28>
		Wifi_SendByte(string[i]);
    709a:	e2 0f       	add	r30, r18
    709c:	f3 1f       	adc	r31, r19
    709e:	40 81       	ld	r20, Z
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    70a0:	80 91 a1 0a 	lds	r24, 0x0AA1
    70a4:	85 ff       	sbrs	r24, 5
    70a6:	fc cf       	rjmp	.-8      	; 0x70a0 <Wifi_SendString+0x1a>
	Wifi_Usart.DATA = data;
    70a8:	40 93 a0 0a 	sts	0x0AA0, r20
}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    70ac:	9f 5f       	subi	r25, 0xFF	; 255
    70ae:	e9 2f       	mov	r30, r25
    70b0:	f0 e0       	ldi	r31, 0x00	; 0
    70b2:	ea 17       	cp	r30, r26
    70b4:	fb 07       	cpc	r31, r27
    70b6:	88 f3       	brcs	.-30     	; 0x709a <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

if(CR){
    70b8:	66 23       	and	r22, r22
    70ba:	71 f0       	breq	.+28     	; 0x70d8 <Wifi_SendString+0x52>
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    70bc:	80 91 a1 0a 	lds	r24, 0x0AA1
    70c0:	85 ff       	sbrs	r24, 5
    70c2:	fc cf       	rjmp	.-8      	; 0x70bc <Wifi_SendString+0x36>
	Wifi_Usart.DATA = data;
    70c4:	8d e0       	ldi	r24, 0x0D	; 13
    70c6:	80 93 a0 0a 	sts	0x0AA0, r24
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    70ca:	80 91 a1 0a 	lds	r24, 0x0AA1
    70ce:	85 ff       	sbrs	r24, 5
    70d0:	fc cf       	rjmp	.-8      	; 0x70ca <Wifi_SendString+0x44>
	Wifi_Usart.DATA = data;
    70d2:	8a e0       	ldi	r24, 0x0A	; 10
    70d4:	80 93 a0 0a 	sts	0x0AA0, r24
    70d8:	08 95       	ret

000070da <Wifi_EnterCMDMode>:
		Wifi_SendByte(13);
		Wifi_SendByte(10);
	}
}

bool Wifi_EnterCMDMode(uint16_t timeOut){
    70da:	8f 92       	push	r8
    70dc:	9f 92       	push	r9
    70de:	af 92       	push	r10
    70e0:	bf 92       	push	r11
    70e2:	cf 92       	push	r12
    70e4:	df 92       	push	r13
    70e6:	ff 92       	push	r15
    70e8:	0f 93       	push	r16
    70ea:	1f 93       	push	r17
    70ec:	df 93       	push	r29
    70ee:	cf 93       	push	r28
    70f0:	00 d0       	rcall	.+0      	; 0x70f2 <Wifi_EnterCMDMode+0x18>
    70f2:	00 d0       	rcall	.+0      	; 0x70f4 <Wifi_EnterCMDMode+0x1a>
    70f4:	cd b7       	in	r28, 0x3d	; 61
    70f6:	de b7       	in	r29, 0x3e	; 62
    70f8:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    70fa:	de 01       	movw	r26, r28
    70fc:	14 96       	adiw	r26, 0x04	; 4
    70fe:	e5 e8       	ldi	r30, 0x85	; 133
    7100:	f0 e2       	ldi	r31, 0x20	; 32
    7102:	83 e0       	ldi	r24, 0x03	; 3
    7104:	01 90       	ld	r0, Z+
    7106:	0d 92       	st	X+, r0
    7108:	81 50       	subi	r24, 0x01	; 1
    710a:	e1 f7       	brne	.-8      	; 0x7104 <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    710c:	0e 94 2e 02 	call	0x45c	; 0x45c <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    7110:	81 e8       	ldi	r24, 0x81	; 129
    7112:	90 e2       	ldi	r25, 0x20	; 32
    7114:	60 e0       	ldi	r22, 0x00	; 0
    7116:	0e 94 43 38 	call	0x7086	; 0x7086 <Wifi_SendString>
    711a:	ff 24       	eor	r15, r15
    711c:	00 e0       	ldi	r16, 0x00	; 0
    711e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    7120:	4e 01       	movw	r8, r28
    7122:	08 94       	sec
    7124:	81 1c       	adc	r8, r1
    7126:	91 1c       	adc	r9, r1
    7128:	f6 e6       	ldi	r31, 0x66	; 102
    712a:	af 2e       	mov	r10, r31
    712c:	fe e0       	ldi	r31, 0x0E	; 14
    712e:	bf 2e       	mov	r11, r31
    7130:	23 c0       	rjmp	.+70     	; 0x7178 <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    7132:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
    7136:	88 23       	and	r24, r24
    7138:	d1 f0       	breq	.+52     	; 0x716e <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    713a:	80 e0       	ldi	r24, 0x00	; 0
    713c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Wifi_GetByte>
    7140:	f4 01       	movw	r30, r8
    7142:	ef 0d       	add	r30, r15
    7144:	f1 1d       	adc	r31, r1
    7146:	80 83       	st	Z, r24
			j++;
    7148:	f3 94       	inc	r15
			if(j > 2){
    714a:	82 e0       	ldi	r24, 0x02	; 2
    714c:	8f 15       	cp	r24, r15
    714e:	78 f4       	brcc	.+30     	; 0x716e <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    7150:	99 81       	ldd	r25, Y+1	; 0x01
    7152:	8c 81       	ldd	r24, Y+4	; 0x04
    7154:	98 17       	cp	r25, r24
    7156:	99 f4       	brne	.+38     	; 0x717e <Wifi_EnterCMDMode+0xa4>
    7158:	9a 81       	ldd	r25, Y+2	; 0x02
    715a:	8d 81       	ldd	r24, Y+5	; 0x05
    715c:	98 17       	cp	r25, r24
    715e:	79 f4       	brne	.+30     	; 0x717e <Wifi_EnterCMDMode+0xa4>
    7160:	20 e0       	ldi	r18, 0x00	; 0
    7162:	9b 81       	ldd	r25, Y+3	; 0x03
    7164:	8e 81       	ldd	r24, Y+6	; 0x06
    7166:	98 17       	cp	r25, r24
    7168:	59 f4       	brne	.+22     	; 0x7180 <Wifi_EnterCMDMode+0xa6>
    716a:	21 e0       	ldi	r18, 0x01	; 1
    716c:	09 c0       	rjmp	.+18     	; 0x7180 <Wifi_EnterCMDMode+0xa6>
    716e:	c5 01       	movw	r24, r10
    7170:	01 97       	sbiw	r24, 0x01	; 1
    7172:	f1 f7       	brne	.-4      	; 0x7170 <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    7174:	0f 5f       	subi	r16, 0xFF	; 255
    7176:	1f 4f       	sbci	r17, 0xFF	; 255
    7178:	0c 15       	cp	r16, r12
    717a:	1d 05       	cpc	r17, r13
    717c:	d0 f2       	brcs	.-76     	; 0x7132 <Wifi_EnterCMDMode+0x58>
    717e:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7180:	82 2f       	mov	r24, r18
    7182:	26 96       	adiw	r28, 0x06	; 6
    7184:	cd bf       	out	0x3d, r28	; 61
    7186:	de bf       	out	0x3e, r29	; 62
    7188:	cf 91       	pop	r28
    718a:	df 91       	pop	r29
    718c:	1f 91       	pop	r17
    718e:	0f 91       	pop	r16
    7190:	ff 90       	pop	r15
    7192:	df 90       	pop	r13
    7194:	cf 90       	pop	r12
    7196:	bf 90       	pop	r11
    7198:	af 90       	pop	r10
    719a:	9f 90       	pop	r9
    719c:	8f 90       	pop	r8
    719e:	08 95       	ret

000071a0 <Debug_SendString>:
}

void Debug_SendString(char string [],bool CR){
    71a0:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    71a2:	dc 01       	movw	r26, r24
    71a4:	0d 90       	ld	r0, X+
    71a6:	00 20       	and	r0, r0
    71a8:	e9 f7       	brne	.-6      	; 0x71a4 <Debug_SendString+0x4>
    71aa:	11 97       	sbiw	r26, 0x01	; 1
    71ac:	a8 1b       	sub	r26, r24
    71ae:	b9 0b       	sbc	r27, r25
    71b0:	90 e0       	ldi	r25, 0x00	; 0
    71b2:	0a c0       	rjmp	.+20     	; 0x71c8 <Debug_SendString+0x28>
		Debug_SendByte(string[i]);
    71b4:	e2 0f       	add	r30, r18
    71b6:	f3 1f       	adc	r31, r19
    71b8:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    71ba:	80 91 a1 08 	lds	r24, 0x08A1
    71be:	85 ff       	sbrs	r24, 5
    71c0:	fc cf       	rjmp	.-8      	; 0x71ba <Debug_SendString+0x1a>
	Debug_Usart.DATA = data;	
    71c2:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    71c6:	9f 5f       	subi	r25, 0xFF	; 255
    71c8:	e9 2f       	mov	r30, r25
    71ca:	f0 e0       	ldi	r31, 0x00	; 0
    71cc:	ea 17       	cp	r30, r26
    71ce:	fb 07       	cpc	r31, r27
    71d0:	88 f3       	brcs	.-30     	; 0x71b4 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    71d2:	66 23       	and	r22, r22
    71d4:	71 f0       	breq	.+28     	; 0x71f2 <Debug_SendString+0x52>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    71d6:	80 91 a1 08 	lds	r24, 0x08A1
    71da:	85 ff       	sbrs	r24, 5
    71dc:	fc cf       	rjmp	.-8      	; 0x71d6 <Debug_SendString+0x36>
	Debug_Usart.DATA = data;	
    71de:	8d e0       	ldi	r24, 0x0D	; 13
    71e0:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    71e4:	80 91 a1 08 	lds	r24, 0x08A1
    71e8:	85 ff       	sbrs	r24, 5
    71ea:	fc cf       	rjmp	.-8      	; 0x71e4 <Debug_SendString+0x44>
	Debug_Usart.DATA = data;	
    71ec:	8a e0       	ldi	r24, 0x0A	; 10
    71ee:	80 93 a0 08 	sts	0x08A0, r24
    71f2:	08 95       	ret

000071f4 <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;

}

ISR(TCE1_OVF_vect)
{
    71f4:	1f 92       	push	r1
    71f6:	0f 92       	push	r0
    71f8:	0f b6       	in	r0, 0x3f	; 63
    71fa:	0f 92       	push	r0
    71fc:	0b b6       	in	r0, 0x3b	; 59
    71fe:	0f 92       	push	r0
    7200:	11 24       	eor	r1, r1
    7202:	2f 93       	push	r18
    7204:	3f 93       	push	r19
    7206:	4f 93       	push	r20
    7208:	5f 93       	push	r21
    720a:	6f 93       	push	r22
    720c:	7f 93       	push	r23
    720e:	8f 93       	push	r24
    7210:	9f 93       	push	r25
    7212:	af 93       	push	r26
    7214:	bf 93       	push	r27
    7216:	ef 93       	push	r30
    7218:	ff 93       	push	r31

	if(okToSendMicrophoneBuffer1){
    721a:	80 91 c6 2b 	lds	r24, 0x2BC6
    721e:	88 23       	and	r24, r24
    7220:	31 f0       	breq	.+12     	; 0x722e <__vector_53+0x3a>
		SD_WriteMicrophoneBuffer(1);
    7222:	81 e0       	ldi	r24, 0x01	; 1
    7224:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    7228:	10 92 c6 2b 	sts	0x2BC6, r1
    722c:	09 c0       	rjmp	.+18     	; 0x7240 <__vector_53+0x4c>
	} else if (okToSendMicrophoneBuffer2){
    722e:	80 91 c7 2b 	lds	r24, 0x2BC7
    7232:	88 23       	and	r24, r24
    7234:	29 f0       	breq	.+10     	; 0x7240 <__vector_53+0x4c>
		SD_WriteMicrophoneBuffer(2);
    7236:	82 e0       	ldi	r24, 0x02	; 2
    7238:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    723c:	10 92 c7 2b 	sts	0x2BC7, r1
	}

	if(okToSendTemperatureBuffer1){
    7240:	80 91 bd 2b 	lds	r24, 0x2BBD
    7244:	88 23       	and	r24, r24
    7246:	59 f0       	breq	.+22     	; 0x725e <__vector_53+0x6a>
		Debug_SendString("T Buffer1",true);
    7248:	89 e8       	ldi	r24, 0x89	; 137
    724a:	90 e2       	ldi	r25, 0x20	; 32
    724c:	61 e0       	ldi	r22, 0x01	; 1
    724e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteTemperatureBuffer(1);
    7252:	81 e0       	ldi	r24, 0x01	; 1
    7254:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    7258:	10 92 bd 2b 	sts	0x2BBD, r1
    725c:	0e c0       	rjmp	.+28     	; 0x727a <__vector_53+0x86>
	} else if (okToSendTemperatureBuffer2){
    725e:	80 91 be 2b 	lds	r24, 0x2BBE
    7262:	88 23       	and	r24, r24
    7264:	51 f0       	breq	.+20     	; 0x727a <__vector_53+0x86>
		Debug_SendString("T Buffer2",true);
    7266:	83 e9       	ldi	r24, 0x93	; 147
    7268:	90 e2       	ldi	r25, 0x20	; 32
    726a:	61 e0       	ldi	r22, 0x01	; 1
    726c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteTemperatureBuffer(2);
    7270:	82 e0       	ldi	r24, 0x02	; 2
    7272:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    7276:	10 92 be 2b 	sts	0x2BBE, r1
	}

	if(okToSendHumidityBuffer1){
    727a:	80 91 c3 2b 	lds	r24, 0x2BC3
    727e:	88 23       	and	r24, r24
    7280:	59 f0       	breq	.+22     	; 0x7298 <__vector_53+0xa4>
		Debug_SendString("H Buffer1",true);
    7282:	8d e9       	ldi	r24, 0x9D	; 157
    7284:	90 e2       	ldi	r25, 0x20	; 32
    7286:	61 e0       	ldi	r22, 0x01	; 1
    7288:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteHumidityBuffer(1);
    728c:	81 e0       	ldi	r24, 0x01	; 1
    728e:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    7292:	10 92 c3 2b 	sts	0x2BC3, r1
    7296:	0e c0       	rjmp	.+28     	; 0x72b4 <__vector_53+0xc0>
	} else if (okToSendHumidityBuffer2){
    7298:	80 91 c4 2b 	lds	r24, 0x2BC4
    729c:	88 23       	and	r24, r24
    729e:	51 f0       	breq	.+20     	; 0x72b4 <__vector_53+0xc0>
		Debug_SendString("H Buffer2",true);
    72a0:	87 ea       	ldi	r24, 0xA7	; 167
    72a2:	90 e2       	ldi	r25, 0x20	; 32
    72a4:	61 e0       	ldi	r22, 0x01	; 1
    72a6:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteHumidityBuffer(2);
    72aa:	82 e0       	ldi	r24, 0x02	; 2
    72ac:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    72b0:	10 92 c4 2b 	sts	0x2BC4, r1
	}

	if(okToSendPressureBuffer1){
    72b4:	80 91 c0 2b 	lds	r24, 0x2BC0
    72b8:	88 23       	and	r24, r24
    72ba:	59 f0       	breq	.+22     	; 0x72d2 <__vector_53+0xde>
		Debug_SendString("P Buffer1",true);
    72bc:	81 eb       	ldi	r24, 0xB1	; 177
    72be:	90 e2       	ldi	r25, 0x20	; 32
    72c0:	61 e0       	ldi	r22, 0x01	; 1
    72c2:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WritePressureBuffer(1);
    72c6:	81 e0       	ldi	r24, 0x01	; 1
    72c8:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    72cc:	10 92 c0 2b 	sts	0x2BC0, r1
    72d0:	0e c0       	rjmp	.+28     	; 0x72ee <__vector_53+0xfa>
	} else if (okToSendPressureBuffer2){
    72d2:	80 91 c1 2b 	lds	r24, 0x2BC1
    72d6:	88 23       	and	r24, r24
    72d8:	51 f0       	breq	.+20     	; 0x72ee <__vector_53+0xfa>
		Debug_SendString("P Buffer2",true);
    72da:	8b eb       	ldi	r24, 0xBB	; 187
    72dc:	90 e2       	ldi	r25, 0x20	; 32
    72de:	61 e0       	ldi	r22, 0x01	; 1
    72e0:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WritePressureBuffer(2);
    72e4:	82 e0       	ldi	r24, 0x02	; 2
    72e6:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    72ea:	10 92 c1 2b 	sts	0x2BC1, r1
	}

	if(okToSendLightBuffer1){
    72ee:	80 91 ca 2b 	lds	r24, 0x2BCA
    72f2:	88 23       	and	r24, r24
    72f4:	59 f0       	breq	.+22     	; 0x730c <__vector_53+0x118>
		Debug_SendString("L Buffer1",true);
    72f6:	85 ec       	ldi	r24, 0xC5	; 197
    72f8:	90 e2       	ldi	r25, 0x20	; 32
    72fa:	61 e0       	ldi	r22, 0x01	; 1
    72fc:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteLightBuffer(1);
    7300:	81 e0       	ldi	r24, 0x01	; 1
    7302:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    7306:	10 92 ca 2b 	sts	0x2BCA, r1
    730a:	0e c0       	rjmp	.+28     	; 0x7328 <__vector_53+0x134>
	} else if (okToSendLightBuffer2){
    730c:	80 91 cb 2b 	lds	r24, 0x2BCB
    7310:	88 23       	and	r24, r24
    7312:	51 f0       	breq	.+20     	; 0x7328 <__vector_53+0x134>
		Debug_SendString("L Buffer2",true);
    7314:	8f ec       	ldi	r24, 0xCF	; 207
    7316:	90 e2       	ldi	r25, 0x20	; 32
    7318:	61 e0       	ldi	r22, 0x01	; 1
    731a:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteLightBuffer(2);
    731e:	82 e0       	ldi	r24, 0x02	; 2
    7320:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    7324:	10 92 cb 2b 	sts	0x2BCB, r1
	}

	if(okToSendAirQuality && recording){
    7328:	80 91 a7 2b 	lds	r24, 0x2BA7
    732c:	88 23       	and	r24, r24
    732e:	69 f0       	breq	.+26     	; 0x734a <__vector_53+0x156>
    7330:	80 91 bb 2b 	lds	r24, 0x2BBB
    7334:	88 23       	and	r24, r24
    7336:	49 f0       	breq	.+18     	; 0x734a <__vector_53+0x156>
		Debug_SendString("A Buffer",true);
    7338:	89 ed       	ldi	r24, 0xD9	; 217
    733a:	90 e2       	ldi	r25, 0x20	; 32
    733c:	61 e0       	ldi	r22, 0x01	; 1
    733e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteAirSample();
    7342:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <SD_WriteAirSample>
		okToSendAirQuality = false;
    7346:	10 92 a7 2b 	sts	0x2BA7, r1
	}

	if(okToSendRTCBlock){
    734a:	80 91 cd 2b 	lds	r24, 0x2BCD
    734e:	88 23       	and	r24, r24
    7350:	a1 f1       	breq	.+104    	; 0x73ba <__vector_53+0x1c6>
		Debug_SendString("RTC Block: ",false);
    7352:	82 ee       	ldi	r24, 0xE2	; 226
    7354:	90 e2       	ldi	r25, 0x20	; 32
    7356:	60 e0       	ldi	r22, 0x00	; 0
    7358:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    735c:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    7360:	20 91 b6 2b 	lds	r18, 0x2BB6
    7364:	30 91 b7 2b 	lds	r19, 0x2BB7
    7368:	40 91 b8 2b 	lds	r20, 0x2BB8
    736c:	50 91 b9 2b 	lds	r21, 0x2BB9
    7370:	0e 94 41 34 	call	0x6882	; 0x6882 <SD_WriteRTCBlock>
		Debug_SendString(ltoa(UNIX_time,temp,10),false);
    7374:	60 91 b6 2b 	lds	r22, 0x2BB6
    7378:	70 91 b7 2b 	lds	r23, 0x2BB7
    737c:	80 91 b8 2b 	lds	r24, 0x2BB8
    7380:	90 91 b9 2b 	lds	r25, 0x2BB9
    7384:	4c e5       	ldi	r20, 0x5C	; 92
    7386:	5b e3       	ldi	r21, 0x3B	; 59
    7388:	2a e0       	ldi	r18, 0x0A	; 10
    738a:	30 e0       	ldi	r19, 0x00	; 0
    738c:	0e 94 a2 4a 	call	0x9544	; 0x9544 <ltoa>
    7390:	60 e0       	ldi	r22, 0x00	; 0
    7392:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		Debug_SendString(", ",false);
    7396:	8e ee       	ldi	r24, 0xEE	; 238
    7398:	90 e2       	ldi	r25, 0x20	; 32
    739a:	60 e0       	ldi	r22, 0x00	; 0
    739c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);
    73a0:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    73a4:	4c e5       	ldi	r20, 0x5C	; 92
    73a6:	5b e3       	ldi	r21, 0x3B	; 59
    73a8:	2a e0       	ldi	r18, 0x0A	; 10
    73aa:	30 e0       	ldi	r19, 0x00	; 0
    73ac:	0e 94 a2 4a 	call	0x9544	; 0x9544 <ltoa>
    73b0:	61 e0       	ldi	r22, 0x01	; 1
    73b2:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		okToSendRTCBlock = false;
    73b6:	10 92 cd 2b 	sts	0x2BCD, r1
	}


}
    73ba:	ff 91       	pop	r31
    73bc:	ef 91       	pop	r30
    73be:	bf 91       	pop	r27
    73c0:	af 91       	pop	r26
    73c2:	9f 91       	pop	r25
    73c4:	8f 91       	pop	r24
    73c6:	7f 91       	pop	r23
    73c8:	6f 91       	pop	r22
    73ca:	5f 91       	pop	r21
    73cc:	4f 91       	pop	r20
    73ce:	3f 91       	pop	r19
    73d0:	2f 91       	pop	r18
    73d2:	0f 90       	pop	r0
    73d4:	0b be       	out	0x3b, r0	; 59
    73d6:	0f 90       	pop	r0
    73d8:	0f be       	out	0x3f, r0	; 63
    73da:	0f 90       	pop	r0
    73dc:	1f 90       	pop	r1
    73de:	18 95       	reti

000073e0 <SD_Close>:
	Debug_SendString(string,true);
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
}

void SD_Close(void){
	Debug_SendString("Closing File",true);
    73e0:	81 ef       	ldi	r24, 0xF1	; 241
    73e2:	90 e2       	ldi	r25, 0x20	; 32
    73e4:	61 e0       	ldi	r22, 0x01	; 1
    73e6:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	f_close(&Log_File);
    73ea:	8e e1       	ldi	r24, 0x1E	; 30
    73ec:	90 e4       	ldi	r25, 0x40	; 64
    73ee:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <f_close>
}
    73f2:	08 95       	ret

000073f4 <SD_Open>:
	disk_initialize(0);
	f_mount(0, &file_system_object);
}


uint8_t SD_Open(char string []){
    73f4:	0f 93       	push	r16
    73f6:	1f 93       	push	r17
    73f8:	8c 01       	movw	r16, r24
	Debug_SendString("File Name= ",false);
    73fa:	8e ef       	ldi	r24, 0xFE	; 254
    73fc:	90 e2       	ldi	r25, 0x20	; 32
    73fe:	60 e0       	ldi	r22, 0x00	; 0
    7400:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	Debug_SendString(string,true);
    7404:	c8 01       	movw	r24, r16
    7406:	61 e0       	ldi	r22, 0x01	; 1
    7408:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
    740c:	8e e1       	ldi	r24, 0x1E	; 30
    740e:	90 e4       	ldi	r25, 0x40	; 64
    7410:	b8 01       	movw	r22, r16
    7412:	43 e1       	ldi	r20, 0x13	; 19
    7414:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <f_open>
}
    7418:	1f 91       	pop	r17
    741a:	0f 91       	pop	r16
    741c:	08 95       	ret

0000741e <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    741e:	cf 92       	push	r12
    7420:	df 92       	push	r13
    7422:	ef 92       	push	r14
    7424:	ff 92       	push	r15
    7426:	0f 93       	push	r16
    7428:	1f 93       	push	r17
    742a:	cf 93       	push	r28
    742c:	df 93       	push	r29
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    742e:	a0 e2       	ldi	r26, 0x20	; 32
    7430:	b6 e0       	ldi	r27, 0x06	; 6
    7432:	42 e0       	ldi	r20, 0x02	; 2
    7434:	20 e7       	ldi	r18, 0x70	; 112
    7436:	31 e0       	ldi	r19, 0x01	; 1
    7438:	05 c0       	rjmp	.+10     	; 0x7444 <Read_config_file+0x26>
    743a:	f9 01       	movw	r30, r18
    743c:	31 97       	sbiw	r30, 0x01	; 1
    743e:	f1 f7       	brne	.-4      	; 0x743c <Read_config_file+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7440:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7442:	d9 f7       	brne	.-10     	; 0x743a <Read_config_file+0x1c>
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    7444:	80 91 a8 06 	lds	r24, 0x06A8
    7448:	80 ff       	sbrs	r24, 0
    744a:	24 c1       	rjmp	.+584    	; 0x7694 <Read_config_file+0x276>
    744c:	17 96       	adiw	r26, 0x07	; 7
    744e:	4c 93       	st	X, r20
    7450:	17 97       	sbiw	r26, 0x07	; 7
    7452:	88 e8       	ldi	r24, 0x88	; 136
    7454:	93 e1       	ldi	r25, 0x13	; 19
    7456:	f1 cf       	rjmp	.-30     	; 0x743a <Read_config_file+0x1c>
    7458:	ca 01       	movw	r24, r20
    745a:	01 97       	sbiw	r24, 0x01	; 1
    745c:	f1 f7       	brne	.-4      	; 0x745a <Read_config_file+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    745e:	21 50       	subi	r18, 0x01	; 1
    7460:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7462:	d1 f7       	brne	.-12     	; 0x7458 <Read_config_file+0x3a>
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);
	

	SD_Open("/config.txt");
    7464:	8a e0       	ldi	r24, 0x0A	; 10
    7466:	91 e2       	ldi	r25, 0x21	; 33
    7468:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <SD_Open>

	while(true){
	  f_gets(temp,50,&Log_File);
    746c:	cc e5       	ldi	r28, 0x5C	; 92
    746e:	db e3       	ldi	r29, 0x3B	; 59
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	    } else if(strstr(temp,"zone") != 0){
	      strtok(temp,"=");
	      strcpy(zone,strtok(NULL,"="));
	      zoneChanged = true;
    7470:	11 e0       	ldi	r17, 0x01	; 1
	      } else if(strcmp(zone,"MST") == 0){
	    	  timeZoneShift = 7;
	      } else if(strcmp(zone,"PST") == 0){
	    	  timeZoneShift = 8;
	      }
	      sprintf(temp,"shifted by %u",timeZoneShift);
    7472:	0e e5       	ldi	r16, 0x5E	; 94
    7474:	e0 2e       	mov	r14, r16
    7476:	01 e2       	ldi	r16, 0x21	; 33
    7478:	f0 2e       	mov	r15, r16
	      } else if(strcmp(zone,"CST") == 0){
	    	  timeZoneShift = 6;
	      } else if(strcmp(zone,"MST") == 0){
	    	  timeZoneShift = 7;
	      } else if(strcmp(zone,"PST") == 0){
	    	  timeZoneShift = 8;
    747a:	08 e0       	ldi	r16, 0x08	; 8
	      if(strcmp(zone,"EST") == 0){
	    	  timeZoneShift = 5;
	      } else if(strcmp(zone,"CST") == 0){
	    	  timeZoneShift = 6;
	      } else if(strcmp(zone,"MST") == 0){
	    	  timeZoneShift = 7;
    747c:	b7 e0       	ldi	r27, 0x07	; 7
    747e:	db 2e       	mov	r13, r27
	      Debug_SendString("Time Zone changed to: ",false);
	      Debug_SendString(zone,true);
	      if(strcmp(zone,"EST") == 0){
	    	  timeZoneShift = 5;
	      } else if(strcmp(zone,"CST") == 0){
	    	  timeZoneShift = 6;
    7480:	a6 e0       	ldi	r26, 0x06	; 6
    7482:	ca 2e       	mov	r12, r26
	

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    7484:	8c e5       	ldi	r24, 0x5C	; 92
    7486:	9b e3       	ldi	r25, 0x3B	; 59
    7488:	62 e3       	ldi	r22, 0x32	; 50
    748a:	70 e0       	ldi	r23, 0x00	; 0
    748c:	4e e1       	ldi	r20, 0x1E	; 30
    748e:	50 e4       	ldi	r21, 0x40	; 64
    7490:	0e 94 83 24 	call	0x4906	; 0x4906 <f_gets>
	  if(temp[0] != 0){
    7494:	80 91 5c 3b 	lds	r24, 0x3B5C
    7498:	88 23       	and	r24, r24
    749a:	09 f4       	brne	.+2      	; 0x749e <Read_config_file+0x80>
    749c:	06 c1       	rjmp	.+524    	; 0x76aa <Read_config_file+0x28c>
	    if(strstr(temp,"ssid") != 0){
    749e:	8c e5       	ldi	r24, 0x5C	; 92
    74a0:	9b e3       	ldi	r25, 0x3B	; 59
    74a2:	66 e1       	ldi	r22, 0x16	; 22
    74a4:	71 e2       	ldi	r23, 0x21	; 33
    74a6:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    74aa:	00 97       	sbiw	r24, 0x00	; 0
    74ac:	a1 f0       	breq	.+40     	; 0x74d6 <Read_config_file+0xb8>
	      strtok(temp,"=");
    74ae:	8c e5       	ldi	r24, 0x5C	; 92
    74b0:	9b e3       	ldi	r25, 0x3B	; 59
    74b2:	6b e1       	ldi	r22, 0x1B	; 27
    74b4:	71 e2       	ldi	r23, 0x21	; 33
    74b6:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	      strcat(ssid,strtok(NULL,"="));
    74ba:	80 e0       	ldi	r24, 0x00	; 0
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	6b e1       	ldi	r22, 0x1B	; 27
    74c0:	71 e2       	ldi	r23, 0x21	; 33
    74c2:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    74c6:	bc 01       	movw	r22, r24
    74c8:	8c e2       	ldi	r24, 0x2C	; 44
    74ca:	99 e2       	ldi	r25, 0x29	; 41
    74cc:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	      ssidRead = true;
    74d0:	10 93 da 2b 	sts	0x2BDA, r17
    74d4:	d7 cf       	rjmp	.-82     	; 0x7484 <Read_config_file+0x66>
	    } else if(strstr(temp,"phrase") != 0){
    74d6:	8c e5       	ldi	r24, 0x5C	; 92
    74d8:	9b e3       	ldi	r25, 0x3B	; 59
    74da:	6d e1       	ldi	r22, 0x1D	; 29
    74dc:	71 e2       	ldi	r23, 0x21	; 33
    74de:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    74e2:	00 97       	sbiw	r24, 0x00	; 0
    74e4:	a1 f0       	breq	.+40     	; 0x750e <Read_config_file+0xf0>
	      strtok(temp,"=");
    74e6:	8c e5       	ldi	r24, 0x5C	; 92
    74e8:	9b e3       	ldi	r25, 0x3B	; 59
    74ea:	6b e1       	ldi	r22, 0x1B	; 27
    74ec:	71 e2       	ldi	r23, 0x21	; 33
    74ee:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	      strcat(phrase,strtok(NULL,"="));
    74f2:	80 e0       	ldi	r24, 0x00	; 0
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	6b e1       	ldi	r22, 0x1B	; 27
    74f8:	71 e2       	ldi	r23, 0x21	; 33
    74fa:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    74fe:	bc 01       	movw	r22, r24
    7500:	86 e9       	ldi	r24, 0x96	; 150
    7502:	98 e2       	ldi	r25, 0x28	; 40
    7504:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	      phraseRead = true;
    7508:	10 93 d7 2b 	sts	0x2BD7, r17
    750c:	bb cf       	rjmp	.-138    	; 0x7484 <Read_config_file+0x66>
	    } else if(strstr(temp,"key") != 0){
    750e:	8c e5       	ldi	r24, 0x5C	; 92
    7510:	9b e3       	ldi	r25, 0x3B	; 59
    7512:	64 e2       	ldi	r22, 0x24	; 36
    7514:	71 e2       	ldi	r23, 0x21	; 33
    7516:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    751a:	00 97       	sbiw	r24, 0x00	; 0
    751c:	a1 f0       	breq	.+40     	; 0x7546 <Read_config_file+0x128>
	      strtok(temp,"=");
    751e:	8c e5       	ldi	r24, 0x5C	; 92
    7520:	9b e3       	ldi	r25, 0x3B	; 59
    7522:	6b e1       	ldi	r22, 0x1B	; 27
    7524:	71 e2       	ldi	r23, 0x21	; 33
    7526:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	      strcat(key,strtok(NULL,"="));
    752a:	80 e0       	ldi	r24, 0x00	; 0
    752c:	90 e0       	ldi	r25, 0x00	; 0
    752e:	6b e1       	ldi	r22, 0x1B	; 27
    7530:	71 e2       	ldi	r23, 0x21	; 33
    7532:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    7536:	bc 01       	movw	r22, r24
    7538:	88 ec       	ldi	r24, 0xC8	; 200
    753a:	98 e2       	ldi	r25, 0x28	; 40
    753c:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	      keyRead = true;
    7540:	10 93 d8 2b 	sts	0x2BD8, r17
    7544:	9f cf       	rjmp	.-194    	; 0x7484 <Read_config_file+0x66>
	    } else if(strstr(temp,"port") != 0){
    7546:	8c e5       	ldi	r24, 0x5C	; 92
    7548:	9b e3       	ldi	r25, 0x3B	; 59
    754a:	68 e2       	ldi	r22, 0x28	; 40
    754c:	71 e2       	ldi	r23, 0x21	; 33
    754e:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    7552:	00 97       	sbiw	r24, 0x00	; 0
    7554:	a1 f0       	breq	.+40     	; 0x757e <Read_config_file+0x160>
	      strtok(temp,"=");
    7556:	8c e5       	ldi	r24, 0x5C	; 92
    7558:	9b e3       	ldi	r25, 0x3B	; 59
    755a:	6b e1       	ldi	r22, 0x1B	; 27
    755c:	71 e2       	ldi	r23, 0x21	; 33
    755e:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	      strcat(port,strtok(NULL,"="));
    7562:	80 e0       	ldi	r24, 0x00	; 0
    7564:	90 e0       	ldi	r25, 0x00	; 0
    7566:	6b e1       	ldi	r22, 0x1B	; 27
    7568:	71 e2       	ldi	r23, 0x21	; 33
    756a:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    756e:	bc 01       	movw	r22, r24
    7570:	8a ef       	ldi	r24, 0xFA	; 250
    7572:	98 e2       	ldi	r25, 0x28	; 40
    7574:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	      portRead = true;
    7578:	10 93 d9 2b 	sts	0x2BD9, r17
    757c:	83 cf       	rjmp	.-250    	; 0x7484 <Read_config_file+0x66>
	    } else if(strstr(temp,"auth") != 0){
    757e:	8c e5       	ldi	r24, 0x5C	; 92
    7580:	9b e3       	ldi	r25, 0x3B	; 59
    7582:	6d e2       	ldi	r22, 0x2D	; 45
    7584:	71 e2       	ldi	r23, 0x21	; 33
    7586:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    758a:	00 97       	sbiw	r24, 0x00	; 0
    758c:	a1 f0       	breq	.+40     	; 0x75b6 <Read_config_file+0x198>
	      strtok(temp,"=");
    758e:	8c e5       	ldi	r24, 0x5C	; 92
    7590:	9b e3       	ldi	r25, 0x3B	; 59
    7592:	6b e1       	ldi	r22, 0x1B	; 27
    7594:	71 e2       	ldi	r23, 0x21	; 33
    7596:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	      strcat(auth,strtok(NULL,"="));
    759a:	80 e0       	ldi	r24, 0x00	; 0
    759c:	90 e0       	ldi	r25, 0x00	; 0
    759e:	6b e1       	ldi	r22, 0x1B	; 27
    75a0:	71 e2       	ldi	r23, 0x21	; 33
    75a2:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    75a6:	bc 01       	movw	r22, r24
    75a8:	84 e6       	ldi	r24, 0x64	; 100
    75aa:	98 e2       	ldi	r25, 0x28	; 40
    75ac:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	      authRead = true;
    75b0:	10 93 d6 2b 	sts	0x2BD6, r17
    75b4:	67 cf       	rjmp	.-306    	; 0x7484 <Read_config_file+0x66>
	    } else if(strstr(temp,"zone") != 0){
    75b6:	8c e5       	ldi	r24, 0x5C	; 92
    75b8:	9b e3       	ldi	r25, 0x3B	; 59
    75ba:	62 e3       	ldi	r22, 0x32	; 50
    75bc:	71 e2       	ldi	r23, 0x21	; 33
    75be:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    75c2:	00 97       	sbiw	r24, 0x00	; 0
    75c4:	09 f4       	brne	.+2      	; 0x75c8 <Read_config_file+0x1aa>
    75c6:	5e cf       	rjmp	.-324    	; 0x7484 <Read_config_file+0x66>
	      strtok(temp,"=");
    75c8:	8c e5       	ldi	r24, 0x5C	; 92
    75ca:	9b e3       	ldi	r25, 0x3B	; 59
    75cc:	6b e1       	ldi	r22, 0x1B	; 27
    75ce:	71 e2       	ldi	r23, 0x21	; 33
    75d0:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	      strcpy(zone,strtok(NULL,"="));
    75d4:	80 e0       	ldi	r24, 0x00	; 0
    75d6:	90 e0       	ldi	r25, 0x00	; 0
    75d8:	6b e1       	ldi	r22, 0x1B	; 27
    75da:	71 e2       	ldi	r23, 0x21	; 33
    75dc:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    75e0:	bc 01       	movw	r22, r24
    75e2:	8e e5       	ldi	r24, 0x5E	; 94
    75e4:	99 e2       	ldi	r25, 0x29	; 41
    75e6:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <strcpy>
	      zoneChanged = true;
    75ea:	10 93 db 2b 	sts	0x2BDB, r17
	      Debug_SendString("Time Zone changed to: ",false);
    75ee:	87 e3       	ldi	r24, 0x37	; 55
    75f0:	91 e2       	ldi	r25, 0x21	; 33
    75f2:	60 e0       	ldi	r22, 0x00	; 0
    75f4:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	      Debug_SendString(zone,true);
    75f8:	8e e5       	ldi	r24, 0x5E	; 94
    75fa:	99 e2       	ldi	r25, 0x29	; 41
    75fc:	61 e0       	ldi	r22, 0x01	; 1
    75fe:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	      if(strcmp(zone,"EST") == 0){
    7602:	8e e5       	ldi	r24, 0x5E	; 94
    7604:	99 e2       	ldi	r25, 0x29	; 41
    7606:	6e e4       	ldi	r22, 0x4E	; 78
    7608:	71 e2       	ldi	r23, 0x21	; 33
    760a:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <strcmp>
    760e:	00 97       	sbiw	r24, 0x00	; 0
    7610:	21 f4       	brne	.+8      	; 0x761a <Read_config_file+0x1fc>
	    	  timeZoneShift = 5;
    7612:	85 e0       	ldi	r24, 0x05	; 5
    7614:	80 93 dc 2b 	sts	0x2BDC, r24
    7618:	20 c0       	rjmp	.+64     	; 0x765a <Read_config_file+0x23c>
	      } else if(strcmp(zone,"CST") == 0){
    761a:	8e e5       	ldi	r24, 0x5E	; 94
    761c:	99 e2       	ldi	r25, 0x29	; 41
    761e:	62 e5       	ldi	r22, 0x52	; 82
    7620:	71 e2       	ldi	r23, 0x21	; 33
    7622:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <strcmp>
    7626:	00 97       	sbiw	r24, 0x00	; 0
    7628:	19 f4       	brne	.+6      	; 0x7630 <Read_config_file+0x212>
	    	  timeZoneShift = 6;
    762a:	c0 92 dc 2b 	sts	0x2BDC, r12
    762e:	15 c0       	rjmp	.+42     	; 0x765a <Read_config_file+0x23c>
	      } else if(strcmp(zone,"MST") == 0){
    7630:	8e e5       	ldi	r24, 0x5E	; 94
    7632:	99 e2       	ldi	r25, 0x29	; 41
    7634:	66 e5       	ldi	r22, 0x56	; 86
    7636:	71 e2       	ldi	r23, 0x21	; 33
    7638:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <strcmp>
    763c:	00 97       	sbiw	r24, 0x00	; 0
    763e:	19 f4       	brne	.+6      	; 0x7646 <Read_config_file+0x228>
	    	  timeZoneShift = 7;
    7640:	d0 92 dc 2b 	sts	0x2BDC, r13
    7644:	0a c0       	rjmp	.+20     	; 0x765a <Read_config_file+0x23c>
	      } else if(strcmp(zone,"PST") == 0){
    7646:	8e e5       	ldi	r24, 0x5E	; 94
    7648:	99 e2       	ldi	r25, 0x29	; 41
    764a:	6a e5       	ldi	r22, 0x5A	; 90
    764c:	71 e2       	ldi	r23, 0x21	; 33
    764e:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <strcmp>
    7652:	00 97       	sbiw	r24, 0x00	; 0
    7654:	11 f4       	brne	.+4      	; 0x765a <Read_config_file+0x23c>
	    	  timeZoneShift = 8;
    7656:	00 93 dc 2b 	sts	0x2BDC, r16
	      }
	      sprintf(temp,"shifted by %u",timeZoneShift);
    765a:	00 d0       	rcall	.+0      	; 0x765c <Read_config_file+0x23e>
    765c:	00 d0       	rcall	.+0      	; 0x765e <Read_config_file+0x240>
    765e:	ed b7       	in	r30, 0x3d	; 61
    7660:	fe b7       	in	r31, 0x3e	; 62
    7662:	31 96       	adiw	r30, 0x01	; 1
    7664:	ad b7       	in	r26, 0x3d	; 61
    7666:	be b7       	in	r27, 0x3e	; 62
    7668:	11 96       	adiw	r26, 0x01	; 1
    766a:	cd 93       	st	X+, r28
    766c:	dc 93       	st	X, r29
    766e:	12 97       	sbiw	r26, 0x02	; 2
    7670:	e2 82       	std	Z+2, r14	; 0x02
    7672:	f3 82       	std	Z+3, r15	; 0x03
    7674:	80 91 dc 2b 	lds	r24, 0x2BDC
    7678:	84 83       	std	Z+4, r24	; 0x04
    767a:	15 82       	std	Z+5, r1	; 0x05
    767c:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
	      Debug_SendString(temp,true);
    7680:	8d b7       	in	r24, 0x3d	; 61
    7682:	9e b7       	in	r25, 0x3e	; 62
    7684:	06 96       	adiw	r24, 0x06	; 6
    7686:	8d bf       	out	0x3d, r24	; 61
    7688:	9e bf       	out	0x3e, r25	; 62
    768a:	ce 01       	movw	r24, r28
    768c:	61 e0       	ldi	r22, 0x01	; 1
    768e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
    7692:	f8 ce       	rjmp	.-528    	; 0x7484 <Read_config_file+0x66>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    7694:	e0 e2       	ldi	r30, 0x20	; 32
    7696:	f6 e0       	ldi	r31, 0x06	; 6
    7698:	82 e0       	ldi	r24, 0x02	; 2
    769a:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    769c:	81 e0       	ldi	r24, 0x01	; 1
    769e:	85 83       	std	Z+5, r24	; 0x05
    76a0:	20 e1       	ldi	r18, 0x10	; 16
    76a2:	37 e2       	ldi	r19, 0x27	; 39
    76a4:	40 e7       	ldi	r20, 0x70	; 112
    76a6:	51 e0       	ldi	r21, 0x01	; 1
    76a8:	d7 ce       	rjmp	.-594    	; 0x7458 <Read_config_file+0x3a>
	    break;
	  }
	}
	
	
}
    76aa:	df 91       	pop	r29
    76ac:	cf 91       	pop	r28
    76ae:	1f 91       	pop	r17
    76b0:	0f 91       	pop	r16
    76b2:	ff 90       	pop	r15
    76b4:	ef 90       	pop	r14
    76b6:	df 90       	pop	r13
    76b8:	cf 90       	pop	r12
    76ba:	08 95       	ret

000076bc <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    76bc:	ef 92       	push	r14
    76be:	ff 92       	push	r15
    76c0:	0f 93       	push	r16
    76c2:	1f 93       	push	r17
    76c4:	7b 01       	movw	r14, r22
    76c6:	8c 01       	movw	r16, r24
	uint8_t resp;

	Debug_SendString("Opening Log File",true);
    76c8:	8c e6       	ldi	r24, 0x6C	; 108
    76ca:	91 e2       	ldi	r25, 0x21	; 33
    76cc:	61 e0       	ldi	r22, 0x01	; 1
    76ce:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		
	SD_MakeFileName(time);
    76d2:	c8 01       	movw	r24, r16
    76d4:	b7 01       	movw	r22, r14
    76d6:	0e 94 c7 34 	call	0x698e	; 0x698e <SD_MakeFileName>
	resp = SD_Open(fileName);
    76da:	82 e6       	ldi	r24, 0x62	; 98
    76dc:	96 e3       	ldi	r25, 0x36	; 54
    76de:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <SD_Open>
    76e2:	18 2f       	mov	r17, r24
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    76e4:	8f ef       	ldi	r24, 0xFF	; 255
    76e6:	9f ef       	ldi	r25, 0xFF	; 255
    76e8:	af ef       	ldi	r26, 0xFF	; 255
    76ea:	bf ef       	ldi	r27, 0xFF	; 255
    76ec:	80 93 a7 45 	sts	0x45A7, r24
    76f0:	90 93 a8 45 	sts	0x45A8, r25
    76f4:	a0 93 a9 45 	sts	0x45A9, r26
    76f8:	b0 93 aa 45 	sts	0x45AA, r27
		
	SD_MakeFileName(time);
	resp = SD_Open(fileName);
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    76fc:	6c e4       	ldi	r22, 0x4C	; 76
    76fe:	74 e7       	ldi	r23, 0x74	; 116
    7700:	8e ed       	ldi	r24, 0xDE	; 222
    7702:	90 eb       	ldi	r25, 0xB0	; 176
    7704:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(StartFileLength+269);				// record size
    7708:	61 e4       	ldi	r22, 0x41	; 65
    770a:	72 e0       	ldi	r23, 0x02	; 2
    770c:	80 e0       	ldi	r24, 0x00	; 0
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type  
    7714:	81 e0       	ldi	r24, 0x01	; 1
    7716:	90 e0       	ldi	r25, 0x00	; 0
    7718:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
	
														// payload
	SD_Write16(0x0100);				// protocol version
    771c:	80 e0       	ldi	r24, 0x00	; 0
    771e:	91 e0       	ldi	r25, 0x01	; 1
    7720:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
	SD_Write8(0x02);					// time protocol
    7724:	82 e0       	ldi	r24, 0x02	; 2
    7726:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    772a:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    772e:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    7732:	67 e4       	ldi	r22, 0x47	; 71
    7734:	77 e4       	ldi	r23, 0x47	; 71
    7736:	88 e0       	ldi	r24, 0x08	; 8
    7738:	90 e0       	ldi	r25, 0x00	; 0
    773a:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Write32>
	SD_Write16(0);
    773e:	80 e0       	ldi	r24, 0x00	; 0
    7740:	90 e0       	ldi	r25, 0x00	; 0
    7742:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SD_Write16>
		
	SD_WriteString("device_class");
    7746:	8d e7       	ldi	r24, 0x7D	; 125
    7748:	91 e2       	ldi	r25, 0x21	; 33
    774a:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    774e:	89 e0       	ldi	r24, 0x09	; 9
    7750:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString(DeviceClass);
    7754:	8a e8       	ldi	r24, 0x8A	; 138
    7756:	91 e2       	ldi	r25, 0x21	; 33
    7758:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    775c:	8a e0       	ldi	r24, 0x0A	; 10
    775e:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
		
	SD_WriteString("device_id");
    7762:	86 e9       	ldi	r24, 0x96	; 150
    7764:	91 e2       	ldi	r25, 0x21	; 33
    7766:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    776a:	89 e0       	ldi	r24, 0x09	; 9
    776c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString(macAddr);
    7770:	86 e7       	ldi	r24, 0x76	; 118
    7772:	96 e3       	ldi	r25, 0x36	; 54
    7774:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    7778:	8a e0       	ldi	r24, 0x0A	; 10
    777a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
		
	SD_WriteString("firmware_version");
    777e:	80 ea       	ldi	r24, 0xA0	; 160
    7780:	91 e2       	ldi	r25, 0x21	; 33
    7782:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    7786:	89 e0       	ldi	r24, 0x09	; 9
    7788:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString(FirmwareVersion);
    778c:	81 eb       	ldi	r24, 0xB1	; 177
    778e:	91 e2       	ldi	r25, 0x21	; 33
    7790:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    7794:	8a e0       	ldi	r24, 0x0A	; 10
    7796:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
		
	SD_WriteString("hardware_version");
    779a:	86 eb       	ldi	r24, 0xB6	; 182
    779c:	91 e2       	ldi	r25, 0x21	; 33
    779e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    77a2:	89 e0       	ldi	r24, 0x09	; 9
    77a4:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString(HardwareVersion);
    77a8:	87 ec       	ldi	r24, 0xC7	; 199
    77aa:	91 e2       	ldi	r25, 0x21	; 33
    77ac:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    77b0:	8a e0       	ldi	r24, 0x0A	; 10
    77b2:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	
	SD_WriteString("channel_specs");
    77b6:	89 ec       	ldi	r24, 0xC9	; 201
    77b8:	91 e2       	ldi	r25, 0x21	; 33
    77ba:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x09);
    77be:	89 e0       	ldi	r24, 0x09	; 9
    77c0:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    77c4:	87 ed       	ldi	r24, 0xD7	; 215
    77c6:	91 e2       	ldi	r25, 0x21	; 33
    77c8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    77cc:	88 e0       	ldi	r24, 0x08	; 8
    77ce:	92 e2       	ldi	r25, 0x22	; 34
    77d0:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    77d4:	81 e3       	ldi	r24, 0x31	; 49
    77d6:	92 e2       	ldi	r25, 0x22	; 34
    77d8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    77dc:	8a e5       	ldi	r24, 0x5A	; 90
    77de:	92 e2       	ldi	r25, 0x22	; 34
    77e0:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    77e4:	87 e8       	ldi	r24, 0x87	; 135
    77e6:	92 e2       	ldi	r25, 0x22	; 34
    77e8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    77ec:	82 eb       	ldi	r24, 0xB2	; 178
    77ee:	92 e2       	ldi	r25, 0x22	; 34
    77f0:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    77f4:	8e ed       	ldi	r24, 0xDE	; 222
    77f6:	92 e2       	ldi	r25, 0x22	; 34
    77f8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    77fc:	8b e0       	ldi	r24, 0x0B	; 11
    77fe:	93 e2       	ldi	r25, 0x23	; 35
    7800:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    7804:	8c e3       	ldi	r24, 0x3C	; 60
    7806:	93 e2       	ldi	r25, 0x23	; 35
    7808:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    780c:	8d e6       	ldi	r24, 0x6D	; 109
    780e:	93 e2       	ldi	r25, 0x23	; 35
    7810:	0e 94 dd 34 	call	0x69ba	; 0x69ba <SD_WriteString>
	SD_Write8(0x0A);
    7814:	8a e0       	ldi	r24, 0x0A	; 10
    7816:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
	
	SD_Write8(0x00);
    781a:	80 e0       	ldi	r24, 0x00	; 0
    781c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SD_Write8>
		
	SD_WriteCRC();			// CRC			
    7820:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7824:	8e e1       	ldi	r24, 0x1E	; 30
    7826:	90 e4       	ldi	r25, 0x40	; 64
    7828:	0e 94 65 1b 	call	0x36ca	; 0x36ca <f_sync>

	return resp;
}
    782c:	81 2f       	mov	r24, r17
    782e:	1f 91       	pop	r17
    7830:	0f 91       	pop	r16
    7832:	ff 90       	pop	r15
    7834:	ef 90       	pop	r14
    7836:	08 95       	ret

00007838 <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    7838:	6f 92       	push	r6
    783a:	7f 92       	push	r7
    783c:	8f 92       	push	r8
    783e:	9f 92       	push	r9
    7840:	af 92       	push	r10
    7842:	bf 92       	push	r11
    7844:	cf 92       	push	r12
    7846:	df 92       	push	r13
    7848:	ef 92       	push	r14
    784a:	ff 92       	push	r15
    784c:	0f 93       	push	r16
    784e:	1f 93       	push	r17
    7850:	cf 93       	push	r28
    7852:	df 93       	push	r29
    7854:	7c 01       	movw	r14, r24
    7856:	6b 01       	movw	r12, r22
    7858:	5a 01       	movw	r10, r20
    785a:	39 01       	movw	r6, r18
	respLen = 0;
    785c:	10 92 96 2b 	sts	0x2B96, r1
	toSendLen = strlen(toSend);
    7860:	fc 01       	movw	r30, r24
    7862:	01 90       	ld	r0, Z+
    7864:	00 20       	and	r0, r0
    7866:	e9 f7       	brne	.-6      	; 0x7862 <Wifi_SendCommand+0x2a>
    7868:	31 97       	sbiw	r30, 0x01	; 1
    786a:	e8 1b       	sub	r30, r24
    786c:	f9 0b       	sbc	r31, r25
    786e:	e0 93 97 2b 	sts	0x2B97, r30
	if(strlen(ok) > strlen(ok2)){
    7872:	eb 01       	movw	r28, r22
    7874:	09 90       	ld	r0, Y+
    7876:	00 20       	and	r0, r0
    7878:	e9 f7       	brne	.-6      	; 0x7874 <Wifi_SendCommand+0x3c>
    787a:	21 97       	sbiw	r28, 0x01	; 1
    787c:	c6 1b       	sub	r28, r22
    787e:	d7 0b       	sbc	r29, r23
    7880:	da 01       	movw	r26, r20
    7882:	0d 90       	ld	r0, X+
    7884:	00 20       	and	r0, r0
    7886:	e9 f7       	brne	.-6      	; 0x7882 <Wifi_SendCommand+0x4a>
    7888:	11 97       	sbiw	r26, 0x01	; 1
    788a:	a4 1b       	sub	r26, r20
    788c:	b5 0b       	sbc	r27, r21
    788e:	ac 17       	cp	r26, r28
    7890:	bd 07       	cpc	r27, r29
    7892:	18 f4       	brcc	.+6      	; 0x789a <Wifi_SendCommand+0x62>
		okLen = strlen(ok2);
    7894:	a0 93 98 2b 	sts	0x2B98, r26
    7898:	02 c0       	rjmp	.+4      	; 0x789e <Wifi_SendCommand+0x66>
	} else {
		okLen = strlen(ok);
    789a:	c0 93 98 2b 	sts	0x2B98, r28
	}

	Debug_SendString("-----------------",true);
    789e:	89 e9       	ldi	r24, 0x99	; 153
    78a0:	93 e2       	ldi	r25, 0x23	; 35
    78a2:	61 e0       	ldi	r22, 0x01	; 1
    78a4:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	Debug_SendString("Command: ",false);
    78a8:	8b ea       	ldi	r24, 0xAB	; 171
    78aa:	93 e2       	ldi	r25, 0x23	; 35
    78ac:	60 e0       	ldi	r22, 0x00	; 0
    78ae:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	Debug_SendString(toSend,true);
    78b2:	c7 01       	movw	r24, r14
    78b4:	61 e0       	ldi	r22, 0x01	; 1
    78b6:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	Wifi_ClearBuffer();
    78ba:	0e 94 2e 02 	call	0x45c	; 0x45c <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    78be:	c7 01       	movw	r24, r14
    78c0:	61 e0       	ldi	r22, 0x01	; 1
    78c2:	0e 94 43 38 	call	0x7086	; 0x7086 <Wifi_SendString>
    78c6:	00 e0       	ldi	r16, 0x00	; 0
    78c8:	10 e0       	ldi	r17, 0x00	; 0
    78ca:	86 e6       	ldi	r24, 0x66	; 102
    78cc:	88 2e       	mov	r8, r24
    78ce:	8e e0       	ldi	r24, 0x0E	; 14
    78d0:	98 2e       	mov	r9, r24
    78d2:	8c c0       	rjmp	.+280    	; 0x79ec <Wifi_SendCommand+0x1b4>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    78d4:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
    78d8:	88 23       	and	r24, r24
    78da:	09 f4       	brne	.+2      	; 0x78de <Wifi_SendCommand+0xa6>
    78dc:	82 c0       	rjmp	.+260    	; 0x79e2 <Wifi_SendCommand+0x1aa>
			resp[respLen] = Wifi_GetByte(false);
    78de:	80 91 96 2b 	lds	r24, 0x2B96
    78e2:	c8 2f       	mov	r28, r24
    78e4:	d0 e0       	ldi	r29, 0x00	; 0
    78e6:	80 e0       	ldi	r24, 0x00	; 0
    78e8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Wifi_GetByte>
    78ec:	cb 5b       	subi	r28, 0xBB	; 187
    78ee:	d1 4d       	sbci	r29, 0xD1	; 209
    78f0:	88 83       	st	Y, r24
			respLen++;
    78f2:	80 91 96 2b 	lds	r24, 0x2B96
    78f6:	8f 5f       	subi	r24, 0xFF	; 255
    78f8:	80 93 96 2b 	sts	0x2B96, r24
			if(respLen == okLen + toSendLen + 3){		
    78fc:	20 91 96 2b 	lds	r18, 0x2B96
    7900:	40 91 98 2b 	lds	r20, 0x2B98
    7904:	80 91 97 2b 	lds	r24, 0x2B97
    7908:	30 e0       	ldi	r19, 0x00	; 0
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	84 0f       	add	r24, r20
    790e:	91 1d       	adc	r25, r1
    7910:	03 96       	adiw	r24, 0x03	; 3
    7912:	28 17       	cp	r18, r24
    7914:	39 07       	cpc	r19, r25
    7916:	09 f0       	breq	.+2      	; 0x791a <Wifi_SendCommand+0xe2>
    7918:	64 c0       	rjmp	.+200    	; 0x79e2 <Wifi_SendCommand+0x1aa>
				
				Debug_SendString("Responce: ",false);
    791a:	85 eb       	ldi	r24, 0xB5	; 181
    791c:	93 e2       	ldi	r25, 0x23	; 35
    791e:	60 e0       	ldi	r22, 0x00	; 0
    7920:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
    7924:	90 e0       	ldi	r25, 0x00	; 0
    7926:	0c c0       	rjmp	.+24     	; 0x7940 <Wifi_SendCommand+0x108>
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(resp[j]);
    7928:	e9 2f       	mov	r30, r25
    792a:	f0 e0       	ldi	r31, 0x00	; 0
    792c:	eb 5b       	subi	r30, 0xBB	; 187
    792e:	f1 4d       	sbci	r31, 0xD1	; 209
    7930:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7932:	80 91 a1 08 	lds	r24, 0x08A1
    7936:	85 ff       	sbrs	r24, 5
    7938:	fc cf       	rjmp	.-8      	; 0x7932 <Wifi_SendCommand+0xfa>
	Debug_Usart.DATA = data;	
    793a:	e0 93 a0 08 	sts	0x08A0, r30
			resp[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Responce: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    793e:	9f 5f       	subi	r25, 0xFF	; 255
    7940:	80 91 96 2b 	lds	r24, 0x2B96
    7944:	98 17       	cp	r25, r24
    7946:	80 f3       	brcs	.-32     	; 0x7928 <Wifi_SendCommand+0xf0>
					Debug_SendByte(resp[j]);
				}
				Debug_SendString(",want: ",false);
    7948:	80 ec       	ldi	r24, 0xC0	; 192
    794a:	93 e2       	ldi	r25, 0x23	; 35
    794c:	60 e0       	ldi	r22, 0x00	; 0
    794e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
				Debug_SendString(ok,true);
    7952:	c6 01       	movw	r24, r12
    7954:	61 e0       	ldi	r22, 0x01	; 1
    7956:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
    795a:	20 e0       	ldi	r18, 0x00	; 0
    795c:	0d c0       	rjmp	.+26     	; 0x7978 <Wifi_SendCommand+0x140>
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
    795e:	e2 2f       	mov	r30, r18
    7960:	f0 e0       	ldi	r31, 0x00	; 0
    7962:	df 01       	movw	r26, r30
    7964:	ab 5b       	subi	r26, 0xBB	; 187
    7966:	b1 4d       	sbci	r27, 0xD1	; 209
    7968:	9c 91       	ld	r25, X
    796a:	ee 0d       	add	r30, r14
    796c:	ff 1d       	adc	r31, r15
    796e:	80 81       	ld	r24, Z
    7970:	98 17       	cp	r25, r24
    7972:	09 f0       	breq	.+2      	; 0x7976 <Wifi_SendCommand+0x13e>
    7974:	3f c0       	rjmp	.+126    	; 0x79f4 <Wifi_SendCommand+0x1bc>
				}
				Debug_SendString(",want: ",false);
				Debug_SendString(ok,true);
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
    7976:	2f 5f       	subi	r18, 0xFF	; 255
    7978:	80 91 97 2b 	lds	r24, 0x2B97
    797c:	28 17       	cp	r18, r24
    797e:	78 f3       	brcs	.-34     	; 0x795e <Wifi_SendCommand+0x126>
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7980:	20 91 97 2b 	lds	r18, 0x2B97
    7984:	2d 5f       	subi	r18, 0xFD	; 253
    7986:	1b c0       	rjmp	.+54     	; 0x79be <Wifi_SendCommand+0x186>
					if(resp[l] != ok[l-toSendLen-3]){
    7988:	ed 01       	movw	r28, r26
    798a:	cb 5b       	subi	r28, 0xBB	; 187
    798c:	d1 4d       	sbci	r29, 0xD1	; 209
    798e:	98 81       	ld	r25, Y
    7990:	80 91 97 2b 	lds	r24, 0x2B97
    7994:	fd 01       	movw	r30, r26
    7996:	e8 1b       	sub	r30, r24
    7998:	f1 09       	sbc	r31, r1
    799a:	ec 0d       	add	r30, r12
    799c:	fd 1d       	adc	r31, r13
    799e:	33 97       	sbiw	r30, 0x03	; 3
    79a0:	80 81       	ld	r24, Z
    79a2:	98 17       	cp	r25, r24
    79a4:	59 f0       	breq	.+22     	; 0x79bc <Wifi_SendCommand+0x184>
						if(resp[l] != ok2[l-toSendLen-3]){
    79a6:	88 81       	ld	r24, Y
    79a8:	90 91 97 2b 	lds	r25, 0x2B97
    79ac:	a9 1b       	sub	r26, r25
    79ae:	b1 09       	sbc	r27, r1
    79b0:	aa 0d       	add	r26, r10
    79b2:	bb 1d       	adc	r27, r11
    79b4:	13 97       	sbiw	r26, 0x03	; 3
    79b6:	9c 91       	ld	r25, X
    79b8:	89 17       	cp	r24, r25
    79ba:	e1 f4       	brne	.+56     	; 0x79f4 <Wifi_SendCommand+0x1bc>
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    79bc:	2f 5f       	subi	r18, 0xFF	; 255
    79be:	a2 2f       	mov	r26, r18
    79c0:	b0 e0       	ldi	r27, 0x00	; 0
    79c2:	80 91 96 2b 	lds	r24, 0x2B96
    79c6:	90 e0       	ldi	r25, 0x00	; 0
    79c8:	03 97       	sbiw	r24, 0x03	; 3
    79ca:	a8 17       	cp	r26, r24
    79cc:	b9 07       	cpc	r27, r25
    79ce:	e4 f2       	brlt	.-72     	; 0x7988 <Wifi_SendCommand+0x150>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    79d0:	80 91 a1 08 	lds	r24, 0x08A1
    79d4:	85 ff       	sbrs	r24, 5
    79d6:	fc cf       	rjmp	.-8      	; 0x79d0 <Wifi_SendCommand+0x198>
	Debug_Usart.DATA = data;	
    79d8:	8d e0       	ldi	r24, 0x0D	; 13
    79da:	80 93 a0 08 	sts	0x08A0, r24
    79de:	81 e0       	ldi	r24, 0x01	; 1
    79e0:	0a c0       	rjmp	.+20     	; 0x79f6 <Wifi_SendCommand+0x1be>
    79e2:	c4 01       	movw	r24, r8
    79e4:	01 97       	sbiw	r24, 0x01	; 1
    79e6:	f1 f7       	brne	.-4      	; 0x79e4 <Wifi_SendCommand+0x1ac>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    79e8:	0f 5f       	subi	r16, 0xFF	; 255
    79ea:	1f 4f       	sbci	r17, 0xFF	; 255
    79ec:	06 15       	cp	r16, r6
    79ee:	17 05       	cpc	r17, r7
    79f0:	08 f4       	brcc	.+2      	; 0x79f4 <Wifi_SendCommand+0x1bc>
    79f2:	70 cf       	rjmp	.-288    	; 0x78d4 <Wifi_SendCommand+0x9c>
    79f4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    79f6:	df 91       	pop	r29
    79f8:	cf 91       	pop	r28
    79fa:	1f 91       	pop	r17
    79fc:	0f 91       	pop	r16
    79fe:	ff 90       	pop	r15
    7a00:	ef 90       	pop	r14
    7a02:	df 90       	pop	r13
    7a04:	cf 90       	pop	r12
    7a06:	bf 90       	pop	r11
    7a08:	af 90       	pop	r10
    7a0a:	9f 90       	pop	r9
    7a0c:	8f 90       	pop	r8
    7a0e:	7f 90       	pop	r7
    7a10:	6f 90       	pop	r6
    7a12:	08 95       	ret

00007a14 <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){
    7a14:	cf 92       	push	r12
    7a16:	df 92       	push	r13
    7a18:	ef 92       	push	r14
    7a1a:	ff 92       	push	r15
    7a1c:	1f 93       	push	r17
    7a1e:	cf 93       	push	r28
    7a20:	df 93       	push	r29
    7a22:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    7a24:	0e 94 2e 02 	call	0x45c	; 0x45c <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    7a28:	88 ec       	ldi	r24, 0xC8	; 200
    7a2a:	93 e2       	ldi	r25, 0x23	; 35
    7a2c:	60 ed       	ldi	r22, 0xD0	; 208
    7a2e:	73 e2       	ldi	r23, 0x23	; 35
    7a30:	ab 01       	movw	r20, r22
    7a32:	97 01       	movw	r18, r14
    7a34:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    7a38:	10 e0       	ldi	r17, 0x00	; 0
    7a3a:	c0 e0       	ldi	r28, 0x00	; 0
    7a3c:	d0 e0       	ldi	r29, 0x00	; 0
    7a3e:	96 e6       	ldi	r25, 0x66	; 102
    7a40:	c9 2e       	mov	r12, r25
    7a42:	9e e0       	ldi	r25, 0x0E	; 14
    7a44:	d9 2e       	mov	r13, r25
    7a46:	1f c0       	rjmp	.+62     	; 0x7a86 <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    7a48:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
    7a4c:	88 23       	and	r24, r24
    7a4e:	b9 f0       	breq	.+46     	; 0x7a7e <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    7a50:	80 e0       	ldi	r24, 0x00	; 0
    7a52:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Wifi_GetByte>
    7a56:	e1 2f       	mov	r30, r17
    7a58:	f0 e0       	ldi	r31, 0x00	; 0
    7a5a:	ea 58       	subi	r30, 0x8A	; 138
    7a5c:	f9 4c       	sbci	r31, 0xC9	; 201
    7a5e:	80 83       	st	Z, r24
			tmp++;
    7a60:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    7a62:	11 31       	cpi	r17, 0x11	; 17
    7a64:	61 f4       	brne	.+24     	; 0x7a7e <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    7a66:	8a ed       	ldi	r24, 0xDA	; 218
    7a68:	93 e2       	ldi	r25, 0x23	; 35
    7a6a:	60 e0       	ldi	r22, 0x00	; 0
    7a6c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
				Debug_SendString(macAddr,true);
    7a70:	86 e7       	ldi	r24, 0x76	; 118
    7a72:	96 e3       	ldi	r25, 0x36	; 54
    7a74:	61 e0       	ldi	r22, 0x01	; 1
    7a76:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
    7a7a:	81 e0       	ldi	r24, 0x01	; 1
    7a7c:	08 c0       	rjmp	.+16     	; 0x7a8e <Wifi_GetMac+0x7a>
    7a7e:	c6 01       	movw	r24, r12
    7a80:	01 97       	sbiw	r24, 0x01	; 1
    7a82:	f1 f7       	brne	.-4      	; 0x7a80 <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    7a84:	21 96       	adiw	r28, 0x01	; 1
    7a86:	ce 15       	cp	r28, r14
    7a88:	df 05       	cpc	r29, r15
    7a8a:	f0 f2       	brcs	.-68     	; 0x7a48 <Wifi_GetMac+0x34>
    7a8c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7a8e:	df 91       	pop	r29
    7a90:	cf 91       	pop	r28
    7a92:	1f 91       	pop	r17
    7a94:	ff 90       	pop	r15
    7a96:	ef 90       	pop	r14
    7a98:	df 90       	pop	r13
    7a9a:	cf 90       	pop	r12
    7a9c:	08 95       	ret

00007a9e <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    7a9e:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    7aa0:	48 ee       	ldi	r20, 0xE8	; 232
    7aa2:	53 e2       	ldi	r21, 0x23	; 35
    7aa4:	83 ee       	ldi	r24, 0xE3	; 227
    7aa6:	93 e2       	ldi	r25, 0x23	; 35
    7aa8:	ba 01       	movw	r22, r20
    7aaa:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    7aae:	08 95       	ret

00007ab0 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    7ab0:	2f 92       	push	r2
    7ab2:	3f 92       	push	r3
    7ab4:	4f 92       	push	r4
    7ab6:	5f 92       	push	r5
    7ab8:	6f 92       	push	r6
    7aba:	7f 92       	push	r7
    7abc:	8f 92       	push	r8
    7abe:	9f 92       	push	r9
    7ac0:	af 92       	push	r10
    7ac2:	bf 92       	push	r11
    7ac4:	cf 92       	push	r12
    7ac6:	df 92       	push	r13
    7ac8:	ef 92       	push	r14
    7aca:	ff 92       	push	r15
    7acc:	0f 93       	push	r16
    7ace:	1f 93       	push	r17
    7ad0:	df 93       	push	r29
    7ad2:	cf 93       	push	r28
    7ad4:	cd b7       	in	r28, 0x3d	; 61
    7ad6:	de b7       	in	r29, 0x3e	; 62
    7ad8:	63 97       	sbiw	r28, 0x13	; 19
    7ada:	cd bf       	out	0x3d, r28	; 61
    7adc:	de bf       	out	0x3e, r29	; 62
    7ade:	6b a4       	ldd	r6, Y+43	; 0x2b
    7ae0:	7c a4       	ldd	r7, Y+44	; 0x2c
    7ae2:	8e 01       	movw	r16, r28
    7ae4:	03 5d       	subi	r16, 0xD3	; 211
    7ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ae8:	19 8a       	std	Y+17, r1	; 0x11
    7aea:	1a 8a       	std	Y+18, r1	; 0x12
    7aec:	20 e0       	ldi	r18, 0x00	; 0
    7aee:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    7af0:	d3 01       	movw	r26, r6
    7af2:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    7af4:	88 23       	and	r24, r24
    7af6:	09 f4       	brne	.+2      	; 0x7afa <f_printf+0x4a>
    7af8:	17 c1       	rjmp	.+558    	; 0x7d28 <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    7afa:	08 94       	sec
    7afc:	61 1c       	adc	r6, r1
    7afe:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    7b00:	85 32       	cpi	r24, 0x25	; 37
    7b02:	71 f0       	breq	.+28     	; 0x7b20 <f_printf+0x70>
			cc = f_putc(c, fil);
    7b04:	90 e0       	ldi	r25, 0x00	; 0
    7b06:	69 a5       	ldd	r22, Y+41	; 0x29
    7b08:	7a a5       	ldd	r23, Y+42	; 0x2a
    7b0a:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <f_putc>
    7b0e:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    7b10:	bf ef       	ldi	r27, 0xFF	; 255
    7b12:	8f 3f       	cpi	r24, 0xFF	; 255
    7b14:	9b 07       	cpc	r25, r27
    7b16:	11 f4       	brne	.+4      	; 0x7b1c <f_printf+0x6c>
    7b18:	48 01       	movw	r8, r16
    7b1a:	fa c0       	rjmp	.+500    	; 0x7d10 <f_printf+0x260>
    7b1c:	48 01       	movw	r8, r16
    7b1e:	4c c0       	rjmp	.+152    	; 0x7bb8 <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    7b20:	d3 01       	movw	r26, r6
    7b22:	ed 91       	ld	r30, X+
    7b24:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    7b26:	e0 33       	cpi	r30, 0x30	; 48
    7b28:	11 f0       	breq	.+4      	; 0x7b2e <f_printf+0x7e>
    7b2a:	1b 8a       	std	Y+19, r1	; 0x13
    7b2c:	04 c0       	rjmp	.+8      	; 0x7b36 <f_printf+0x86>
			f = 1; c = *str++;
    7b2e:	ed 91       	ld	r30, X+
    7b30:	3d 01       	movw	r6, r26
    7b32:	b1 e0       	ldi	r27, 0x01	; 1
    7b34:	bb 8b       	std	Y+19, r27	; 0x13
    7b36:	aa 24       	eor	r10, r10
    7b38:	bb 24       	eor	r11, r11
    7b3a:	13 c0       	rjmp	.+38     	; 0x7b62 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    7b3c:	c5 01       	movw	r24, r10
    7b3e:	f3 e0       	ldi	r31, 0x03	; 3
    7b40:	88 0f       	add	r24, r24
    7b42:	99 1f       	adc	r25, r25
    7b44:	fa 95       	dec	r31
    7b46:	e1 f7       	brne	.-8      	; 0x7b40 <f_printf+0x90>
    7b48:	aa 0c       	add	r10, r10
    7b4a:	bb 1c       	adc	r11, r11
    7b4c:	a8 0e       	add	r10, r24
    7b4e:	b9 1e       	adc	r11, r25
    7b50:	ae 0e       	add	r10, r30
    7b52:	b1 1c       	adc	r11, r1
    7b54:	e0 ed       	ldi	r30, 0xD0	; 208
    7b56:	ff ef       	ldi	r31, 0xFF	; 255
    7b58:	ae 0e       	add	r10, r30
    7b5a:	bf 1e       	adc	r11, r31
			c = *str++;
    7b5c:	d3 01       	movw	r26, r6
    7b5e:	ed 91       	ld	r30, X+
    7b60:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    7b62:	8e 2f       	mov	r24, r30
    7b64:	80 53       	subi	r24, 0x30	; 48
    7b66:	8a 30       	cpi	r24, 0x0A	; 10
    7b68:	48 f3       	brcs	.-46     	; 0x7b3c <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    7b6a:	ec 36       	cpi	r30, 0x6C	; 108
    7b6c:	31 f4       	brne	.+12     	; 0x7b7a <f_printf+0xca>
			f |= 2; c = *str++;
    7b6e:	bb 89       	ldd	r27, Y+19	; 0x13
    7b70:	b2 60       	ori	r27, 0x02	; 2
    7b72:	bb 8b       	std	Y+19, r27	; 0x13
    7b74:	d3 01       	movw	r26, r6
    7b76:	ed 91       	ld	r30, X+
    7b78:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    7b7a:	e3 37       	cpi	r30, 0x73	; 115
    7b7c:	49 f4       	brne	.+18     	; 0x7b90 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    7b7e:	62 e0       	ldi	r22, 0x02	; 2
    7b80:	86 2e       	mov	r8, r22
    7b82:	91 2c       	mov	r9, r1
    7b84:	80 0e       	add	r8, r16
    7b86:	91 1e       	adc	r9, r17
    7b88:	f8 01       	movw	r30, r16
    7b8a:	80 81       	ld	r24, Z
    7b8c:	91 81       	ldd	r25, Z+1	; 0x01
    7b8e:	bb c0       	rjmp	.+374    	; 0x7d06 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    7b90:	e3 36       	cpi	r30, 0x63	; 99
    7b92:	a9 f4       	brne	.+42     	; 0x7bbe <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    7b94:	52 e0       	ldi	r21, 0x02	; 2
    7b96:	85 2e       	mov	r8, r21
    7b98:	91 2c       	mov	r9, r1
    7b9a:	80 0e       	add	r8, r16
    7b9c:	91 1e       	adc	r9, r17
    7b9e:	d8 01       	movw	r26, r16
    7ba0:	8d 91       	ld	r24, X+
    7ba2:	9c 91       	ld	r25, X
    7ba4:	69 a5       	ldd	r22, Y+41	; 0x29
    7ba6:	7a a5       	ldd	r23, Y+42	; 0x2a
    7ba8:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <f_putc>
    7bac:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    7bae:	bf ef       	ldi	r27, 0xFF	; 255
    7bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    7bb2:	9b 07       	cpc	r25, r27
    7bb4:	09 f4       	brne	.+2      	; 0x7bb8 <f_printf+0x108>
    7bb6:	ac c0       	rjmp	.+344    	; 0x7d10 <f_printf+0x260>
    7bb8:	21 e0       	ldi	r18, 0x01	; 1
    7bba:	30 e0       	ldi	r19, 0x00	; 0
    7bbc:	a9 c0       	rjmp	.+338    	; 0x7d10 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    7bbe:	e4 36       	cpi	r30, 0x64	; 100
    7bc0:	39 f0       	breq	.+14     	; 0x7bd0 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    7bc2:	e5 37       	cpi	r30, 0x75	; 117
    7bc4:	29 f0       	breq	.+10     	; 0x7bd0 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    7bc6:	e8 35       	cpi	r30, 0x58	; 88
    7bc8:	09 f0       	breq	.+2      	; 0x7bcc <f_printf+0x11c>
    7bca:	ae c0       	rjmp	.+348    	; 0x7d28 <f_printf+0x278>
    7bcc:	20 e1       	ldi	r18, 0x10	; 16
    7bce:	01 c0       	rjmp	.+2      	; 0x7bd2 <f_printf+0x122>
    7bd0:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    7bd2:	fb 89       	ldd	r31, Y+19	; 0x13
    7bd4:	f1 ff       	sbrs	r31, 1
    7bd6:	0d c0       	rjmp	.+26     	; 0x7bf2 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    7bd8:	44 e0       	ldi	r20, 0x04	; 4
    7bda:	84 2e       	mov	r8, r20
    7bdc:	91 2c       	mov	r9, r1
    7bde:	80 0e       	add	r8, r16
    7be0:	91 1e       	adc	r9, r17
    7be2:	d8 01       	movw	r26, r16
    7be4:	ed 90       	ld	r14, X+
    7be6:	fd 90       	ld	r15, X+
    7be8:	0d 91       	ld	r16, X+
    7bea:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    7bec:	e4 36       	cpi	r30, 0x64	; 100
    7bee:	09 f5       	brne	.+66     	; 0x7c32 <f_printf+0x182>
    7bf0:	13 c0       	rjmp	.+38     	; 0x7c18 <f_printf+0x168>
    7bf2:	c8 01       	movw	r24, r16
    7bf4:	02 96       	adiw	r24, 0x02	; 2
    7bf6:	d8 01       	movw	r26, r16
    7bf8:	6d 91       	ld	r22, X+
    7bfa:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    7bfc:	e4 36       	cpi	r30, 0x64	; 100
    7bfe:	39 f4       	brne	.+14     	; 0x7c0e <f_printf+0x15e>
    7c00:	4c 01       	movw	r8, r24
    7c02:	7b 01       	movw	r14, r22
    7c04:	00 27       	eor	r16, r16
    7c06:	f7 fc       	sbrc	r15, 7
    7c08:	00 95       	com	r16
    7c0a:	10 2f       	mov	r17, r16
    7c0c:	05 c0       	rjmp	.+10     	; 0x7c18 <f_printf+0x168>
    7c0e:	4c 01       	movw	r8, r24
    7c10:	7b 01       	movw	r14, r22
    7c12:	00 e0       	ldi	r16, 0x00	; 0
    7c14:	10 e0       	ldi	r17, 0x00	; 0
    7c16:	0d c0       	rjmp	.+26     	; 0x7c32 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    7c18:	17 ff       	sbrs	r17, 7
    7c1a:	0b c0       	rjmp	.+22     	; 0x7c32 <f_printf+0x182>
				val = 0 - val;
    7c1c:	10 95       	com	r17
    7c1e:	00 95       	com	r16
    7c20:	f0 94       	com	r15
    7c22:	e0 94       	com	r14
    7c24:	e1 1c       	adc	r14, r1
    7c26:	f1 1c       	adc	r15, r1
    7c28:	01 1d       	adc	r16, r1
    7c2a:	11 1d       	adc	r17, r1
				f |= 4;
    7c2c:	bb 89       	ldd	r27, Y+19	; 0x13
    7c2e:	b4 60       	ori	r27, 0x04	; 4
    7c30:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    7c32:	18 8a       	std	Y+16, r1	; 0x10
    7c34:	3f e0       	ldi	r19, 0x0F	; 15
    7c36:	c3 2e       	mov	r12, r19
    7c38:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    7c3a:	22 2e       	mov	r2, r18
    7c3c:	33 24       	eor	r3, r3
    7c3e:	44 24       	eor	r4, r4
    7c40:	55 24       	eor	r5, r5
    7c42:	c8 01       	movw	r24, r16
    7c44:	b7 01       	movw	r22, r14
    7c46:	a2 01       	movw	r20, r4
    7c48:	91 01       	movw	r18, r2
    7c4a:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    7c4e:	86 2f       	mov	r24, r22
    7c50:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    7c52:	8a 33       	cpi	r24, 0x3A	; 58
    7c54:	08 f0       	brcs	.+2      	; 0x7c58 <f_printf+0x1a8>
    7c56:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    7c58:	08 94       	sec
    7c5a:	c1 08       	sbc	r12, r1
    7c5c:	d1 08       	sbc	r13, r1
    7c5e:	e1 e0       	ldi	r30, 0x01	; 1
    7c60:	f0 e0       	ldi	r31, 0x00	; 0
    7c62:	ec 0f       	add	r30, r28
    7c64:	fd 1f       	adc	r31, r29
    7c66:	ec 0d       	add	r30, r12
    7c68:	fd 1d       	adc	r31, r13
    7c6a:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    7c6c:	c1 14       	cp	r12, r1
    7c6e:	d1 04       	cpc	r13, r1
    7c70:	e9 f0       	breq	.+58     	; 0x7cac <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    7c72:	c8 01       	movw	r24, r16
    7c74:	b7 01       	movw	r22, r14
    7c76:	a2 01       	movw	r20, r4
    7c78:	91 01       	movw	r18, r2
    7c7a:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    7c7e:	c9 01       	movw	r24, r18
    7c80:	da 01       	movw	r26, r20
    7c82:	7c 01       	movw	r14, r24
    7c84:	8d 01       	movw	r16, r26
		} while (i && val);
    7c86:	e1 14       	cp	r14, r1
    7c88:	f1 04       	cpc	r15, r1
    7c8a:	01 05       	cpc	r16, r1
    7c8c:	11 05       	cpc	r17, r1
    7c8e:	c9 f6       	brne	.-78     	; 0x7c42 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    7c90:	eb 89       	ldd	r30, Y+19	; 0x13
    7c92:	e2 ff       	sbrs	r30, 2
    7c94:	0b c0       	rjmp	.+22     	; 0x7cac <f_printf+0x1fc>
    7c96:	08 94       	sec
    7c98:	c1 08       	sbc	r12, r1
    7c9a:	d1 08       	sbc	r13, r1
    7c9c:	e1 e0       	ldi	r30, 0x01	; 1
    7c9e:	f0 e0       	ldi	r31, 0x00	; 0
    7ca0:	ec 0f       	add	r30, r28
    7ca2:	fd 1f       	adc	r31, r29
    7ca4:	ec 0d       	add	r30, r12
    7ca6:	fd 1d       	adc	r31, r13
    7ca8:	4d e2       	ldi	r20, 0x2D	; 45
    7caa:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    7cac:	8f e0       	ldi	r24, 0x0F	; 15
    7cae:	90 e0       	ldi	r25, 0x00	; 0
    7cb0:	8a 19       	sub	r24, r10
    7cb2:	9b 09       	sbc	r25, r11
    7cb4:	08 94       	sec
    7cb6:	c1 08       	sbc	r12, r1
    7cb8:	d1 08       	sbc	r13, r1
    7cba:	e1 e0       	ldi	r30, 0x01	; 1
    7cbc:	f0 e0       	ldi	r31, 0x00	; 0
    7cbe:	ec 0f       	add	r30, r28
    7cc0:	fd 1f       	adc	r31, r29
    7cc2:	ec 0d       	add	r30, r12
    7cc4:	fd 1d       	adc	r31, r13
    7cc6:	08 94       	sec
    7cc8:	c1 1c       	adc	r12, r1
    7cca:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    7ccc:	ab 89       	ldd	r26, Y+19	; 0x13
    7cce:	2a 2f       	mov	r18, r26
    7cd0:	30 e0       	ldi	r19, 0x00	; 0
    7cd2:	21 70       	andi	r18, 0x01	; 1
    7cd4:	30 70       	andi	r19, 0x00	; 0
    7cd6:	0b c0       	rjmp	.+22     	; 0x7cee <f_printf+0x23e>
    7cd8:	08 94       	sec
    7cda:	c1 08       	sbc	r12, r1
    7cdc:	d1 08       	sbc	r13, r1
    7cde:	21 15       	cp	r18, r1
    7ce0:	31 05       	cpc	r19, r1
    7ce2:	11 f4       	brne	.+4      	; 0x7ce8 <f_printf+0x238>
    7ce4:	40 e2       	ldi	r20, 0x20	; 32
    7ce6:	01 c0       	rjmp	.+2      	; 0x7cea <f_printf+0x23a>
    7ce8:	40 e3       	ldi	r20, 0x30	; 48
    7cea:	40 83       	st	Z, r20
    7cec:	31 97       	sbiw	r30, 0x01	; 1
    7cee:	c1 14       	cp	r12, r1
    7cf0:	d1 04       	cpc	r13, r1
    7cf2:	19 f0       	breq	.+6      	; 0x7cfa <f_printf+0x24a>
    7cf4:	8c 15       	cp	r24, r12
    7cf6:	9d 05       	cpc	r25, r13
    7cf8:	7c f3       	brlt	.-34     	; 0x7cd8 <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    7cfa:	81 e0       	ldi	r24, 0x01	; 1
    7cfc:	90 e0       	ldi	r25, 0x00	; 0
    7cfe:	8c 0f       	add	r24, r28
    7d00:	9d 1f       	adc	r25, r29
    7d02:	8c 0d       	add	r24, r12
    7d04:	9d 1d       	adc	r25, r13
    7d06:	69 a5       	ldd	r22, Y+41	; 0x29
    7d08:	7a a5       	ldd	r23, Y+42	; 0x2a
    7d0a:	0e 94 f7 24 	call	0x49ee	; 0x49ee <f_puts>
    7d0e:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    7d10:	e9 89       	ldd	r30, Y+17	; 0x11
    7d12:	fa 89       	ldd	r31, Y+18	; 0x12
    7d14:	e2 0f       	add	r30, r18
    7d16:	f3 1f       	adc	r31, r19
    7d18:	e9 8b       	std	Y+17, r30	; 0x11
    7d1a:	fa 8b       	std	Y+18, r31	; 0x12
    7d1c:	ff ef       	ldi	r31, 0xFF	; 255
    7d1e:	2f 3f       	cpi	r18, 0xFF	; 255
    7d20:	3f 07       	cpc	r19, r31
    7d22:	41 f0       	breq	.+16     	; 0x7d34 <f_printf+0x284>
    7d24:	84 01       	movw	r16, r8
    7d26:	e4 ce       	rjmp	.-568    	; 0x7af0 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    7d28:	4f ef       	ldi	r20, 0xFF	; 255
    7d2a:	2f 3f       	cpi	r18, 0xFF	; 255
    7d2c:	34 07       	cpc	r19, r20
    7d2e:	11 f0       	breq	.+4      	; 0x7d34 <f_printf+0x284>
    7d30:	29 89       	ldd	r18, Y+17	; 0x11
    7d32:	3a 89       	ldd	r19, Y+18	; 0x12
}
    7d34:	c9 01       	movw	r24, r18
    7d36:	63 96       	adiw	r28, 0x13	; 19
    7d38:	cd bf       	out	0x3d, r28	; 61
    7d3a:	de bf       	out	0x3e, r29	; 62
    7d3c:	cf 91       	pop	r28
    7d3e:	df 91       	pop	r29
    7d40:	1f 91       	pop	r17
    7d42:	0f 91       	pop	r16
    7d44:	ff 90       	pop	r15
    7d46:	ef 90       	pop	r14
    7d48:	df 90       	pop	r13
    7d4a:	cf 90       	pop	r12
    7d4c:	bf 90       	pop	r11
    7d4e:	af 90       	pop	r10
    7d50:	9f 90       	pop	r9
    7d52:	8f 90       	pop	r8
    7d54:	7f 90       	pop	r7
    7d56:	6f 90       	pop	r6
    7d58:	5f 90       	pop	r5
    7d5a:	4f 90       	pop	r4
    7d5c:	3f 90       	pop	r3
    7d5e:	2f 90       	pop	r2
    7d60:	08 95       	ret

00007d62 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
    7d62:	1f 92       	push	r1
    7d64:	0f 92       	push	r0
    7d66:	0f b6       	in	r0, 0x3f	; 63
    7d68:	0f 92       	push	r0
    7d6a:	0b b6       	in	r0, 0x3b	; 59
    7d6c:	0f 92       	push	r0
    7d6e:	11 24       	eor	r1, r1
    7d70:	1f 93       	push	r17
    7d72:	2f 93       	push	r18
    7d74:	3f 93       	push	r19
    7d76:	4f 93       	push	r20
    7d78:	5f 93       	push	r21
    7d7a:	6f 93       	push	r22
    7d7c:	7f 93       	push	r23
    7d7e:	8f 93       	push	r24
    7d80:	9f 93       	push	r25
    7d82:	af 93       	push	r26
    7d84:	bf 93       	push	r27
    7d86:	ef 93       	push	r30
    7d88:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
    7d8a:	e0 91 a5 2b 	lds	r30, 0x2BA5
    7d8e:	f0 91 a6 2b 	lds	r31, 0x2BA6
    7d92:	80 91 a0 09 	lds	r24, 0x09A0
    7d96:	e5 55       	subi	r30, 0x55	; 85
    7d98:	fa 4b       	sbci	r31, 0xBA	; 186
    7d9a:	80 83       	st	Z, r24

	if(rs232Recording){
    7d9c:	80 91 b0 2b 	lds	r24, 0x2BB0
    7da0:	88 23       	and	r24, r24
    7da2:	09 f4       	brne	.+2      	; 0x7da6 <__vector_88+0x44>
    7da4:	65 c0       	rjmp	.+202    	; 0x7e70 <__vector_88+0x10e>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
    7da6:	e0 91 a5 2b 	lds	r30, 0x2BA5
    7daa:	f0 91 a6 2b 	lds	r31, 0x2BA6
    7dae:	e5 55       	subi	r30, 0x55	; 85
    7db0:	fa 4b       	sbci	r31, 0xBA	; 186
    7db2:	80 81       	ld	r24, Z
    7db4:	8a 30       	cpi	r24, 0x0A	; 10
    7db6:	09 f0       	breq	.+2      	; 0x7dba <__vector_88+0x58>
    7db8:	5b c0       	rjmp	.+182    	; 0x7e70 <__vector_88+0x10e>
    7dba:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    7dbc:	20 91 a5 2b 	lds	r18, 0x2BA5
    7dc0:	30 91 a6 2b 	lds	r19, 0x2BA6
    7dc4:	80 91 a3 2b 	lds	r24, 0x2BA3
    7dc8:	90 91 a4 2b 	lds	r25, 0x2BA4
    7dcc:	28 17       	cp	r18, r24
    7dce:	39 07       	cpc	r19, r25
    7dd0:	09 f0       	breq	.+2      	; 0x7dd4 <__vector_88+0x72>
    7dd2:	63 c0       	rjmp	.+198    	; 0x7e9a <__vector_88+0x138>
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
				counter++;
			}
			if(strstr(airQualityString,"Dylos") == NULL){
    7dd4:	8e e8       	ldi	r24, 0x8E	; 142
    7dd6:	9b e3       	ldi	r25, 0x3B	; 59
    7dd8:	6d ee       	ldi	r22, 0xED	; 237
    7dda:	73 e2       	ldi	r23, 0x23	; 35
    7ddc:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <strstr>
    7de0:	00 97       	sbiw	r24, 0x00	; 0
    7de2:	09 f0       	breq	.+2      	; 0x7de6 <__vector_88+0x84>
    7de4:	45 c0       	rjmp	.+138    	; 0x7e70 <__vector_88+0x10e>
				airSampleTime = Time_Get32BitTimer();
    7de6:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    7dea:	60 93 86 2b 	sts	0x2B86, r22
    7dee:	70 93 87 2b 	sts	0x2B87, r23
    7df2:	80 93 88 2b 	sts	0x2B88, r24
    7df6:	90 93 89 2b 	sts	0x2B89, r25
				smallCount = atol(strtok(airQualityString,","));
    7dfa:	8e e8       	ldi	r24, 0x8E	; 142
    7dfc:	9b e3       	ldi	r25, 0x3B	; 59
    7dfe:	63 ef       	ldi	r22, 0xF3	; 243
    7e00:	73 e2       	ldi	r23, 0x23	; 35
    7e02:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    7e06:	0e 94 1a 4a 	call	0x9434	; 0x9434 <atol>
    7e0a:	60 93 2d 2e 	sts	0x2E2D, r22
    7e0e:	70 93 2e 2e 	sts	0x2E2E, r23
    7e12:	80 93 2f 2e 	sts	0x2E2F, r24
    7e16:	90 93 30 2e 	sts	0x2E30, r25
				largeCount = atol(strtok(NULL,","));
    7e1a:	80 e0       	ldi	r24, 0x00	; 0
    7e1c:	90 e0       	ldi	r25, 0x00	; 0
    7e1e:	63 ef       	ldi	r22, 0xF3	; 243
    7e20:	73 e2       	ldi	r23, 0x23	; 35
    7e22:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    7e26:	0e 94 1a 4a 	call	0x9434	; 0x9434 <atol>
    7e2a:	60 93 4b 4a 	sts	0x4A4B, r22
    7e2e:	70 93 4c 4a 	sts	0x4A4C, r23
    7e32:	80 93 4d 4a 	sts	0x4A4D, r24
    7e36:	90 93 4e 4a 	sts	0x4A4E, r25

				quickSmall = smallCount;
    7e3a:	20 91 2d 2e 	lds	r18, 0x2E2D
    7e3e:	30 91 2e 2e 	lds	r19, 0x2E2E
    7e42:	40 91 2f 2e 	lds	r20, 0x2E2F
    7e46:	50 91 30 2e 	lds	r21, 0x2E30
    7e4a:	20 93 a8 2b 	sts	0x2BA8, r18
    7e4e:	30 93 a9 2b 	sts	0x2BA9, r19
    7e52:	40 93 aa 2b 	sts	0x2BAA, r20
    7e56:	50 93 ab 2b 	sts	0x2BAB, r21
				quickLarge = largeCount;
    7e5a:	60 93 ac 2b 	sts	0x2BAC, r22
    7e5e:	70 93 ad 2b 	sts	0x2BAD, r23
    7e62:	80 93 ae 2b 	sts	0x2BAE, r24
    7e66:	90 93 af 2b 	sts	0x2BAF, r25


				okToSendAirQuality = true;
    7e6a:	81 e0       	ldi	r24, 0x01	; 1
    7e6c:	80 93 a7 2b 	sts	0x2BA7, r24
			}

		}
	}
	Rs232_writeLocation++;
    7e70:	80 91 a5 2b 	lds	r24, 0x2BA5
    7e74:	90 91 a6 2b 	lds	r25, 0x2BA6
    7e78:	01 96       	adiw	r24, 0x01	; 1
    7e7a:	80 93 a5 2b 	sts	0x2BA5, r24
    7e7e:	90 93 a6 2b 	sts	0x2BA6, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
    7e82:	80 91 a5 2b 	lds	r24, 0x2BA5
    7e86:	90 91 a6 2b 	lds	r25, 0x2BA6
    7e8a:	80 50       	subi	r24, 0x00	; 0
    7e8c:	94 40       	sbci	r25, 0x04	; 4
    7e8e:	78 f0       	brcs	.+30     	; 0x7eae <__vector_88+0x14c>
		Rs232_writeLocation = 0;
    7e90:	10 92 a5 2b 	sts	0x2BA5, r1
    7e94:	10 92 a6 2b 	sts	0x2BA6, r1
    7e98:	0a c0       	rjmp	.+20     	; 0x7eae <__vector_88+0x14c>

	if(rs232Recording){
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
    7e9a:	80 e0       	ldi	r24, 0x00	; 0
    7e9c:	0e 94 10 03 	call	0x620	; 0x620 <Rs232_GetByte>
    7ea0:	e1 2f       	mov	r30, r17
    7ea2:	f0 e0       	ldi	r31, 0x00	; 0
    7ea4:	e2 57       	subi	r30, 0x72	; 114
    7ea6:	f4 4c       	sbci	r31, 0xC4	; 196
    7ea8:	80 83       	st	Z, r24
				counter++;
    7eaa:	1f 5f       	subi	r17, 0xFF	; 255
    7eac:	87 cf       	rjmp	.-242    	; 0x7dbc <__vector_88+0x5a>
	}
	Rs232_writeLocation++;
	if(Rs232_writeLocation >= Rs232_BufferSize){
		Rs232_writeLocation = 0;
	}
}
    7eae:	ff 91       	pop	r31
    7eb0:	ef 91       	pop	r30
    7eb2:	bf 91       	pop	r27
    7eb4:	af 91       	pop	r26
    7eb6:	9f 91       	pop	r25
    7eb8:	8f 91       	pop	r24
    7eba:	7f 91       	pop	r23
    7ebc:	6f 91       	pop	r22
    7ebe:	5f 91       	pop	r21
    7ec0:	4f 91       	pop	r20
    7ec2:	3f 91       	pop	r19
    7ec4:	2f 91       	pop	r18
    7ec6:	1f 91       	pop	r17
    7ec8:	0f 90       	pop	r0
    7eca:	0b be       	out	0x3b, r0	; 59
    7ecc:	0f 90       	pop	r0
    7ece:	0f be       	out	0x3f, r0	; 63
    7ed0:	0f 90       	pop	r0
    7ed2:	1f 90       	pop	r1
    7ed4:	18 95       	reti

00007ed6 <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    7ed6:	ef 92       	push	r14
    7ed8:	ff 92       	push	r15
    7eda:	0f 93       	push	r16
    7edc:	1f 93       	push	r17
    7ede:	cf 93       	push	r28
    7ee0:	df 93       	push	r29
	uint8_t tmp=0;
	uint32_t tmp32 = 0;
	
	Wifi_ClearBuffer();
    7ee2:	0e 94 2e 02 	call	0x45c	; 0x45c <Wifi_ClearBuffer>
	Wifi_SendCommand("show t t","Time=","Time=",500);
    7ee6:	85 ef       	ldi	r24, 0xF5	; 245
    7ee8:	93 e2       	ldi	r25, 0x23	; 35
    7eea:	6e ef       	ldi	r22, 0xFE	; 254
    7eec:	73 e2       	ldi	r23, 0x23	; 35
    7eee:	ab 01       	movw	r20, r22
    7ef0:	24 ef       	ldi	r18, 0xF4	; 244
    7ef2:	31 e0       	ldi	r19, 0x01	; 1
    7ef4:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    7ef8:	80 e0       	ldi	r24, 0x00	; 0
    7efa:	90 e9       	ldi	r25, 0x90	; 144
    7efc:	01 97       	sbiw	r24, 0x01	; 1
    7efe:	f1 f7       	brne	.-4      	; 0x7efc <Wifi_GetTime+0x26>
    7f00:	ce e2       	ldi	r28, 0x2E	; 46
    7f02:	d7 e3       	ldi	r29, 0x37	; 55
    7f04:	10 e0       	ldi	r17, 0x00	; 0
    7f06:	07 c0       	rjmp	.+14     	; 0x7f16 <Wifi_GetTime+0x40>
	_delay_ms(10);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 50){
    7f08:	12 33       	cpi	r17, 0x32	; 50
    7f0a:	49 f0       	breq	.+18     	; 0x7f1e <Wifi_GetTime+0x48>
			string[tmp] = Wifi_GetByte(false);
    7f0c:	80 e0       	ldi	r24, 0x00	; 0
    7f0e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Wifi_GetByte>
    7f12:	89 93       	st	Y+, r24
			tmp++;
    7f14:	1f 5f       	subi	r17, 0xFF	; 255
	
	Wifi_ClearBuffer();
	Wifi_SendCommand("show t t","Time=","Time=",500);
	_delay_ms(10);
	
	while(Wifi_CharReadyToRead()){
    7f16:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
    7f1a:	88 23       	and	r24, r24
    7f1c:	a9 f7       	brne	.-22     	; 0x7f08 <Wifi_GetTime+0x32>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7f1e:	80 91 a1 08 	lds	r24, 0x08A1
    7f22:	85 ff       	sbrs	r24, 5
    7f24:	fc cf       	rjmp	.-8      	; 0x7f1e <Wifi_GetTime+0x48>
	Debug_Usart.DATA = data;	
    7f26:	8d e0       	ldi	r24, 0x0D	; 13
    7f28:	80 93 a0 08 	sts	0x08A0, r24
		}
	}

	Debug_SendByte(13);
	
	if(tmp < 4){
    7f2c:	14 30       	cpi	r17, 0x04	; 4
    7f2e:	48 f4       	brcc	.+18     	; 0x7f42 <Wifi_GetTime+0x6c>
		time_secs = 0;
    7f30:	10 92 9a 2b 	sts	0x2B9A, r1
    7f34:	10 92 9b 2b 	sts	0x2B9B, r1
    7f38:	10 92 9c 2b 	sts	0x2B9C, r1
    7f3c:	10 92 9d 2b 	sts	0x2B9D, r1
    7f40:	04 c0       	rjmp	.+8      	; 0x7f4a <Wifi_GetTime+0x74>
		return false;
	}
	
	if(string[0] == 'N'){
    7f42:	80 91 2e 37 	lds	r24, 0x372E
    7f46:	8e 34       	cpi	r24, 0x4E	; 78
    7f48:	11 f4       	brne	.+4      	; 0x7f4e <Wifi_GetTime+0x78>
    7f4a:	80 e0       	ldi	r24, 0x00	; 0
    7f4c:	6d c0       	rjmp	.+218    	; 0x8028 <Wifi_GetTime+0x152>
		return false;
	}

	strtok(string,"=");
    7f4e:	8e e2       	ldi	r24, 0x2E	; 46
    7f50:	97 e3       	ldi	r25, 0x37	; 55
    7f52:	6b e1       	ldi	r22, 0x1B	; 27
    7f54:	71 e2       	ldi	r23, 0x21	; 33
    7f56:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	strtok(NULL,"=");
    7f5a:	80 e0       	ldi	r24, 0x00	; 0
    7f5c:	90 e0       	ldi	r25, 0x00	; 0
    7f5e:	6b e1       	ldi	r22, 0x1B	; 27
    7f60:	71 e2       	ldi	r23, 0x21	; 33
    7f62:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
	strcpy(timeString,strtok(NULL," "));
    7f66:	80 e0       	ldi	r24, 0x00	; 0
    7f68:	90 e0       	ldi	r25, 0x00	; 0
    7f6a:	64 e0       	ldi	r22, 0x04	; 4
    7f6c:	74 e2       	ldi	r23, 0x24	; 36
    7f6e:	0e 94 41 4a 	call	0x9482	; 0x9482 <strtok>
    7f72:	bc 01       	movw	r22, r24
    7f74:	85 ed       	ldi	r24, 0xD5	; 213
    7f76:	9b e3       	ldi	r25, 0x3B	; 59
    7f78:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <strcpy>
    7f7c:	20 e0       	ldi	r18, 0x00	; 0
    7f7e:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
    7f80:	f9 01       	movw	r30, r18
    7f82:	e0 50       	subi	r30, 0x00	; 0
    7f84:	f4 4c       	sbci	r31, 0xC4	; 196
    7f86:	d9 01       	movw	r26, r18
    7f88:	ab 52       	subi	r26, 0x2B	; 43
    7f8a:	b4 4c       	sbci	r27, 0xC4	; 196
    7f8c:	8c 91       	ld	r24, X
    7f8e:	80 83       	st	Z, r24
    7f90:	2f 5f       	subi	r18, 0xFF	; 255
    7f92:	3f 4f       	sbci	r19, 0xFF	; 255

	strtok(string,"=");
	strtok(NULL,"=");
	strcpy(timeString,strtok(NULL," "));
		
	for(uint8_t i = 0; i < 8; i++){
    7f94:	28 30       	cpi	r18, 0x08	; 8
    7f96:	31 05       	cpc	r19, r1
    7f98:	99 f7       	brne	.-26     	; 0x7f80 <Wifi_GetTime+0xaa>
    7f9a:	ad ed       	ldi	r26, 0xDD	; 221
    7f9c:	bb e3       	ldi	r27, 0x3B	; 59
    7f9e:	20 e0       	ldi	r18, 0x00	; 0
    7fa0:	30 e0       	ldi	r19, 0x00	; 0
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
		timeLower[i] = timeString[tmp];
    7fa2:	8d 91       	ld	r24, X+
    7fa4:	f9 01       	movw	r30, r18
    7fa6:	ec 51       	subi	r30, 0x1C	; 28
    7fa8:	f4 4c       	sbci	r31, 0xC4	; 196
    7faa:	80 83       	st	Z, r24
    7fac:	2f 5f       	subi	r18, 0xFF	; 255
    7fae:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
    7fb0:	25 30       	cpi	r18, 0x05	; 5
    7fb2:	31 05       	cpc	r19, r1
    7fb4:	b1 f7       	brne	.-20     	; 0x7fa2 <Wifi_GetTime+0xcc>
		timeLower[i] = timeString[tmp];
		tmp++;
	}

	tmp32 = atol(timeUpper);
    7fb6:	80 e0       	ldi	r24, 0x00	; 0
    7fb8:	9c e3       	ldi	r25, 0x3C	; 60
    7fba:	0e 94 1a 4a 	call	0x9434	; 0x9434 <atol>
    7fbe:	9b 01       	movw	r18, r22
    7fc0:	ac 01       	movw	r20, r24
	tmp32 -= 22089888;
    7fc2:	20 5a       	subi	r18, 0xA0	; 160
    7fc4:	30 41       	sbci	r19, 0x10	; 16
    7fc6:	41 45       	sbci	r20, 0x51	; 81
    7fc8:	51 40       	sbci	r21, 0x01	; 1
	tmp32 *= 100;
    7fca:	ca 01       	movw	r24, r20
    7fcc:	b9 01       	movw	r22, r18
    7fce:	24 e6       	ldi	r18, 0x64	; 100
    7fd0:	30 e0       	ldi	r19, 0x00	; 0
    7fd2:	40 e0       	ldi	r20, 0x00	; 0
    7fd4:	50 e0       	ldi	r21, 0x00	; 0
    7fd6:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
	tmp32 += ((timeLower[0]-'0')* 10);
    7fda:	e0 91 e4 3b 	lds	r30, 0x3BE4
	tmp32 += ((timeLower[1]-'0'));
    7fde:	20 91 e5 3b 	lds	r18, 0x3BE5
	}

	tmp32 = atol(timeUpper);
	tmp32 -= 22089888;
	tmp32 *= 100;
	tmp32 += ((timeLower[0]-'0')* 10);
    7fe2:	30 e0       	ldi	r19, 0x00	; 0
    7fe4:	20 53       	subi	r18, 0x30	; 48
    7fe6:	30 40       	sbci	r19, 0x00	; 0
    7fe8:	44 27       	eor	r20, r20
    7fea:	37 fd       	sbrc	r19, 7
    7fec:	40 95       	com	r20
    7fee:	54 2f       	mov	r21, r20
    7ff0:	26 0f       	add	r18, r22
    7ff2:	37 1f       	adc	r19, r23
    7ff4:	48 1f       	adc	r20, r24
    7ff6:	59 1f       	adc	r21, r25
	tmp32 += ((timeLower[1]-'0'));
    7ff8:	8a e0       	ldi	r24, 0x0A	; 10
    7ffa:	e8 9f       	mul	r30, r24
    7ffc:	c0 01       	movw	r24, r0
    7ffe:	11 24       	eor	r1, r1
    8000:	80 5e       	subi	r24, 0xE0	; 224
    8002:	91 40       	sbci	r25, 0x01	; 1
    8004:	7c 01       	movw	r14, r24
    8006:	00 27       	eor	r16, r16
    8008:	f7 fc       	sbrc	r15, 7
    800a:	00 95       	com	r16
    800c:	10 2f       	mov	r17, r16
    800e:	2e 0d       	add	r18, r14
    8010:	3f 1d       	adc	r19, r15
    8012:	40 1f       	adc	r20, r16
    8014:	51 1f       	adc	r21, r17
	
	time_secs = tmp32;
    8016:	20 93 9a 2b 	sts	0x2B9A, r18
    801a:	30 93 9b 2b 	sts	0x2B9B, r19
    801e:	40 93 9c 2b 	sts	0x2B9C, r20
    8022:	50 93 9d 2b 	sts	0x2B9D, r21
    8026:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
    8028:	df 91       	pop	r29
    802a:	cf 91       	pop	r28
    802c:	1f 91       	pop	r17
    802e:	0f 91       	pop	r16
    8030:	ff 90       	pop	r15
    8032:	ef 90       	pop	r14
    8034:	08 95       	ret

00008036 <Config_Wifi>:

void Config_Wifi(void){
    8036:	1f 93       	push	r17
	uint8_t col = 0;
	
	Wifi_ClearBuffer();
    8038:	0e 94 2e 02 	call	0x45c	; 0x45c <Wifi_ClearBuffer>



	Wifi_EnterCMDMode(1000);
    803c:	88 ee       	ldi	r24, 0xE8	; 232
    803e:	93 e0       	ldi	r25, 0x03	; 3
    8040:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
    8044:	80 e1       	ldi	r24, 0x10	; 16
    8046:	97 e2       	ldi	r25, 0x27	; 39
    8048:	20 e7       	ldi	r18, 0x70	; 112
    804a:	31 e0       	ldi	r19, 0x01	; 1
    804c:	f9 01       	movw	r30, r18
    804e:	31 97       	sbiw	r30, 0x01	; 1
    8050:	f1 f7       	brne	.-4      	; 0x804e <Config_Wifi+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8052:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8054:	d9 f7       	brne	.-10     	; 0x804c <Config_Wifi+0x16>
	_delay_ms(1000);
	display_clearBuffer();
    8056:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
	display_writeBufferToScreen();
    805a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    805e:	86 e0       	ldi	r24, 0x06	; 6
    8060:	94 e2       	ldi	r25, 0x24	; 36
    8062:	64 e1       	ldi	r22, 0x14	; 20
    8064:	74 e2       	ldi	r23, 0x24	; 36
    8066:	ab 01       	movw	r20, r22
    8068:	24 ef       	ldi	r18, 0xF4	; 244
    806a:	31 e0       	ldi	r19, 0x01	; 1
    806c:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    8070:	88 23       	and	r24, r24
    8072:	19 f0       	breq	.+6      	; 0x807a <Config_Wifi+0x44>
		display_putString("reset..........OK",col,0,System5x7);
    8074:	89 e2       	ldi	r24, 0x29	; 41
    8076:	94 e2       	ldi	r25, 0x24	; 36
    8078:	02 c0       	rjmp	.+4      	; 0x807e <Config_Wifi+0x48>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    807a:	8b e3       	ldi	r24, 0x3B	; 59
    807c:	94 e2       	ldi	r25, 0x24	; 36
    807e:	60 e0       	ldi	r22, 0x00	; 0
    8080:	40 e0       	ldi	r20, 0x00	; 0
    8082:	2b e6       	ldi	r18, 0x6B	; 107
    8084:	39 e2       	ldi	r19, 0x29	; 41
    8086:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	}
	display_writeBufferToScreen();
    808a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    808e:	80 e1       	ldi	r24, 0x10	; 16
    8090:	97 e2       	ldi	r25, 0x27	; 39
    8092:	20 e7       	ldi	r18, 0x70	; 112
    8094:	31 e0       	ldi	r19, 0x01	; 1
    8096:	f9 01       	movw	r30, r18
    8098:	31 97       	sbiw	r30, 0x01	; 1
    809a:	f1 f7       	brne	.-4      	; 0x8098 <Config_Wifi+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    809c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    809e:	d9 f7       	brne	.-10     	; 0x8096 <Config_Wifi+0x60>
	col++;
	
	_delay_ms(1000);
	
	if(needToChangeBaud){
    80a0:	80 91 68 29 	lds	r24, 0x2968
    80a4:	88 23       	and	r24, r24
    80a6:	09 f4       	brne	.+2      	; 0x80aa <Config_Wifi+0x74>
    80a8:	5f c0       	rjmp	.+190    	; 0x8168 <Config_Wifi+0x132>
		Wifi_SendCommand("set sys iofunc 0x10","AOK","AOK",500);
    80aa:	8d e4       	ldi	r24, 0x4D	; 77
    80ac:	94 e2       	ldi	r25, 0x24	; 36
    80ae:	61 e6       	ldi	r22, 0x61	; 97
    80b0:	74 e2       	ldi	r23, 0x24	; 36
    80b2:	ab 01       	movw	r20, r22
    80b4:	24 ef       	ldi	r18, 0xF4	; 244
    80b6:	31 e0       	ldi	r19, 0x01	; 1
    80b8:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    80bc:	80 e1       	ldi	r24, 0x10	; 16
    80be:	97 e2       	ldi	r25, 0x27	; 39
    80c0:	20 e7       	ldi	r18, 0x70	; 112
    80c2:	31 e0       	ldi	r19, 0x01	; 1
    80c4:	f9 01       	movw	r30, r18
    80c6:	31 97       	sbiw	r30, 0x01	; 1
    80c8:	f1 f7       	brne	.-4      	; 0x80c6 <Config_Wifi+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80cc:	d9 f7       	brne	.-10     	; 0x80c4 <Config_Wifi+0x8e>
		_delay_ms(1000);
		Wifi_SendCommand("save","Storing in config","Storing in config",500);
    80ce:	85 e6       	ldi	r24, 0x65	; 101
    80d0:	94 e2       	ldi	r25, 0x24	; 36
    80d2:	6a e6       	ldi	r22, 0x6A	; 106
    80d4:	74 e2       	ldi	r23, 0x24	; 36
    80d6:	ab 01       	movw	r20, r22
    80d8:	24 ef       	ldi	r18, 0xF4	; 244
    80da:	31 e0       	ldi	r19, 0x01	; 1
    80dc:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    80e0:	80 e1       	ldi	r24, 0x10	; 16
    80e2:	97 e2       	ldi	r25, 0x27	; 39
    80e4:	20 e7       	ldi	r18, 0x70	; 112
    80e6:	31 e0       	ldi	r19, 0x01	; 1
    80e8:	f9 01       	movw	r30, r18
    80ea:	31 97       	sbiw	r30, 0x01	; 1
    80ec:	f1 f7       	brne	.-4      	; 0x80ea <Config_Wifi+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80f0:	d9 f7       	brne	.-10     	; 0x80e8 <Config_Wifi+0xb2>
		_delay_ms(1000);
		Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    80f2:	8c e7       	ldi	r24, 0x7C	; 124
    80f4:	94 e2       	ldi	r25, 0x24	; 36
    80f6:	63 e8       	ldi	r22, 0x83	; 131
    80f8:	74 e2       	ldi	r23, 0x24	; 36
    80fa:	ab 01       	movw	r20, r22
    80fc:	24 ef       	ldi	r18, 0xF4	; 244
    80fe:	31 e0       	ldi	r19, 0x01	; 1
    8100:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    8104:	80 e1       	ldi	r24, 0x10	; 16
    8106:	97 e2       	ldi	r25, 0x27	; 39
    8108:	20 e7       	ldi	r18, 0x70	; 112
    810a:	31 e0       	ldi	r19, 0x01	; 1
    810c:	f9 01       	movw	r30, r18
    810e:	31 97       	sbiw	r30, 0x01	; 1
    8110:	f1 f7       	brne	.-4      	; 0x810e <Config_Wifi+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8114:	d9 f7       	brne	.-10     	; 0x810c <Config_Wifi+0xd6>
		_delay_ms(1000);
		Wifi_ClearBuffer();
    8116:	0e 94 2e 02 	call	0x45c	; 0x45c <Wifi_ClearBuffer>


		Wifi_EnterCMDMode(1000);
    811a:	88 ee       	ldi	r24, 0xE8	; 232
    811c:	93 e0       	ldi	r25, 0x03	; 3
    811e:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
    8122:	80 e1       	ldi	r24, 0x10	; 16
    8124:	97 e2       	ldi	r25, 0x27	; 39
    8126:	20 e7       	ldi	r18, 0x70	; 112
    8128:	31 e0       	ldi	r19, 0x01	; 1
    812a:	f9 01       	movw	r30, r18
    812c:	31 97       	sbiw	r30, 0x01	; 1
    812e:	f1 f7       	brne	.-4      	; 0x812c <Config_Wifi+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8132:	d9 f7       	brne	.-10     	; 0x812a <Config_Wifi+0xf4>
		_delay_ms(1000);
		Wifi_SendCommand("set uart instant 115200","AOK","AOK",500);
    8134:	8c e8       	ldi	r24, 0x8C	; 140
    8136:	94 e2       	ldi	r25, 0x24	; 36
    8138:	61 e6       	ldi	r22, 0x61	; 97
    813a:	74 e2       	ldi	r23, 0x24	; 36
    813c:	ab 01       	movw	r20, r22
    813e:	24 ef       	ldi	r18, 0xF4	; 244
    8140:	31 e0       	ldi	r19, 0x01	; 1
    8142:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
		Wifi_Init(115200);
    8146:	60 e0       	ldi	r22, 0x00	; 0
    8148:	72 ec       	ldi	r23, 0xC2	; 194
    814a:	81 e0       	ldi	r24, 0x01	; 1
    814c:	90 e0       	ldi	r25, 0x00	; 0
    814e:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_Init>
    8152:	80 e1       	ldi	r24, 0x10	; 16
    8154:	97 e2       	ldi	r25, 0x27	; 39
    8156:	20 e7       	ldi	r18, 0x70	; 112
    8158:	31 e0       	ldi	r19, 0x01	; 1
    815a:	f9 01       	movw	r30, r18
    815c:	31 97       	sbiw	r30, 0x01	; 1
    815e:	f1 f7       	brne	.-4      	; 0x815c <Config_Wifi+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8162:	d9 f7       	brne	.-10     	; 0x815a <Config_Wifi+0x124>
		_delay_ms(1000);
		needToChangeBaud = false;
    8164:	10 92 68 29 	sts	0x2968, r1
	}

	Wifi_EnterCMDMode(1000);
    8168:	88 ee       	ldi	r24, 0xE8	; 232
    816a:	93 e0       	ldi	r25, 0x03	; 3
    816c:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    8170:	84 ea       	ldi	r24, 0xA4	; 164
    8172:	94 e2       	ldi	r25, 0x24	; 36
    8174:	61 e6       	ldi	r22, 0x61	; 97
    8176:	74 e2       	ldi	r23, 0x24	; 36
    8178:	ab 01       	movw	r20, r22
    817a:	24 ef       	ldi	r18, 0xF4	; 244
    817c:	31 e0       	ldi	r19, 0x01	; 1
    817e:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    8182:	80 e1       	ldi	r24, 0x10	; 16
    8184:	97 e2       	ldi	r25, 0x27	; 39
    8186:	20 e7       	ldi	r18, 0x70	; 112
    8188:	31 e0       	ldi	r19, 0x01	; 1
    818a:	f9 01       	movw	r30, r18
    818c:	31 97       	sbiw	r30, 0x01	; 1
    818e:	f1 f7       	brne	.-4      	; 0x818c <Config_Wifi+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8190:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8192:	d9 f7       	brne	.-10     	; 0x818a <Config_Wifi+0x154>
	_delay_ms(1000);

	Wifi_SendCommand("set comm open 0","AOK","AOK",500);	
    8194:	86 eb       	ldi	r24, 0xB6	; 182
    8196:	94 e2       	ldi	r25, 0x24	; 36
    8198:	61 e6       	ldi	r22, 0x61	; 97
    819a:	74 e2       	ldi	r23, 0x24	; 36
    819c:	ab 01       	movw	r20, r22
    819e:	24 ef       	ldi	r18, 0xF4	; 244
    81a0:	31 e0       	ldi	r19, 0x01	; 1
    81a2:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    81a6:	80 e1       	ldi	r24, 0x10	; 16
    81a8:	97 e2       	ldi	r25, 0x27	; 39
    81aa:	20 e7       	ldi	r18, 0x70	; 112
    81ac:	31 e0       	ldi	r19, 0x01	; 1
    81ae:	f9 01       	movw	r30, r18
    81b0:	31 97       	sbiw	r30, 0x01	; 1
    81b2:	f1 f7       	brne	.-4      	; 0x81b0 <Config_Wifi+0x17a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81b6:	d9 f7       	brne	.-10     	; 0x81ae <Config_Wifi+0x178>
	_delay_ms(1000);
	
	Wifi_SendCommand("set comm close AOK","AOK","AOK",500);		
    81b8:	86 ec       	ldi	r24, 0xC6	; 198
    81ba:	94 e2       	ldi	r25, 0x24	; 36
    81bc:	61 e6       	ldi	r22, 0x61	; 97
    81be:	74 e2       	ldi	r23, 0x24	; 36
    81c0:	ab 01       	movw	r20, r22
    81c2:	24 ef       	ldi	r18, 0xF4	; 244
    81c4:	31 e0       	ldi	r19, 0x01	; 1
    81c6:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    81ca:	80 e1       	ldi	r24, 0x10	; 16
    81cc:	97 e2       	ldi	r25, 0x27	; 39
    81ce:	20 e7       	ldi	r18, 0x70	; 112
    81d0:	31 e0       	ldi	r19, 0x01	; 1
    81d2:	f9 01       	movw	r30, r18
    81d4:	31 97       	sbiw	r30, 0x01	; 1
    81d6:	f1 f7       	brne	.-4      	; 0x81d4 <Config_Wifi+0x19e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81da:	d9 f7       	brne	.-10     	; 0x81d2 <Config_Wifi+0x19c>
	_delay_ms(1000);

	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    81dc:	89 ed       	ldi	r24, 0xD9	; 217
    81de:	94 e2       	ldi	r25, 0x24	; 36
    81e0:	61 e6       	ldi	r22, 0x61	; 97
    81e2:	74 e2       	ldi	r23, 0x24	; 36
    81e4:	ab 01       	movw	r20, r22
    81e6:	24 ef       	ldi	r18, 0xF4	; 244
    81e8:	31 e0       	ldi	r19, 0x01	; 1
    81ea:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    81ee:	88 23       	and	r24, r24
    81f0:	19 f0       	breq	.+6      	; 0x81f8 <Config_Wifi+0x1c2>
		display_putString("enable time....OK",col,0,System5x7);
    81f2:	8b ee       	ldi	r24, 0xEB	; 235
    81f4:	94 e2       	ldi	r25, 0x24	; 36
    81f6:	02 c0       	rjmp	.+4      	; 0x81fc <Config_Wifi+0x1c6>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    81f8:	8d ef       	ldi	r24, 0xFD	; 253
    81fa:	94 e2       	ldi	r25, 0x24	; 36
    81fc:	61 e0       	ldi	r22, 0x01	; 1
    81fe:	40 e0       	ldi	r20, 0x00	; 0
    8200:	2b e6       	ldi	r18, 0x6B	; 107
    8202:	39 e2       	ldi	r19, 0x29	; 41
    8204:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	}
	display_writeBufferToScreen();
    8208:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    820c:	80 e1       	ldi	r24, 0x10	; 16
    820e:	97 e2       	ldi	r25, 0x27	; 39
    8210:	20 e7       	ldi	r18, 0x70	; 112
    8212:	31 e0       	ldi	r19, 0x01	; 1
    8214:	f9 01       	movw	r30, r18
    8216:	31 97       	sbiw	r30, 0x01	; 1
    8218:	f1 f7       	brne	.-4      	; 0x8216 <Config_Wifi+0x1e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    821a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    821c:	d9 f7       	brne	.-10     	; 0x8214 <Config_Wifi+0x1de>
	_delay_ms(1000);
	col++;
	
	if(authRead){
    821e:	80 91 d6 2b 	lds	r24, 0x2BD6
    8222:	88 23       	and	r24, r24
    8224:	11 f4       	brne	.+4      	; 0x822a <Config_Wifi+0x1f4>
    8226:	12 e0       	ldi	r17, 0x02	; 2
    8228:	22 c0       	rjmp	.+68     	; 0x826e <Config_Wifi+0x238>
		if(Wifi_SendCommand(auth,"AOK","AOK",500)){
    822a:	84 e6       	ldi	r24, 0x64	; 100
    822c:	98 e2       	ldi	r25, 0x28	; 40
    822e:	61 e6       	ldi	r22, 0x61	; 97
    8230:	74 e2       	ldi	r23, 0x24	; 36
    8232:	ab 01       	movw	r20, r22
    8234:	24 ef       	ldi	r18, 0xF4	; 244
    8236:	31 e0       	ldi	r19, 0x01	; 1
    8238:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    823c:	88 23       	and	r24, r24
    823e:	19 f0       	breq	.+6      	; 0x8246 <Config_Wifi+0x210>
			display_putString("encryption.....OK",col,0,System5x7);
    8240:	8f e0       	ldi	r24, 0x0F	; 15
    8242:	95 e2       	ldi	r25, 0x25	; 37
    8244:	02 c0       	rjmp	.+4      	; 0x824a <Config_Wifi+0x214>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    8246:	81 e2       	ldi	r24, 0x21	; 33
    8248:	95 e2       	ldi	r25, 0x25	; 37
    824a:	62 e0       	ldi	r22, 0x02	; 2
    824c:	40 e0       	ldi	r20, 0x00	; 0
    824e:	2b e6       	ldi	r18, 0x6B	; 107
    8250:	39 e2       	ldi	r19, 0x29	; 41
    8252:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		}
		display_writeBufferToScreen();
    8256:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    825a:	80 e1       	ldi	r24, 0x10	; 16
    825c:	97 e2       	ldi	r25, 0x27	; 39
    825e:	20 e7       	ldi	r18, 0x70	; 112
    8260:	31 e0       	ldi	r19, 0x01	; 1
    8262:	f9 01       	movw	r30, r18
    8264:	31 97       	sbiw	r30, 0x01	; 1
    8266:	f1 f7       	brne	.-4      	; 0x8264 <Config_Wifi+0x22e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    826a:	d9 f7       	brne	.-10     	; 0x8262 <Config_Wifi+0x22c>
    826c:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(1000);
		col++;
	}
	
	if(phraseRead){
    826e:	80 91 d7 2b 	lds	r24, 0x2BD7
    8272:	88 23       	and	r24, r24
    8274:	11 f1       	breq	.+68     	; 0x82ba <Config_Wifi+0x284>
		if(Wifi_SendCommand(phrase,"AOK","AOK",500)){
    8276:	86 e9       	ldi	r24, 0x96	; 150
    8278:	98 e2       	ldi	r25, 0x28	; 40
    827a:	61 e6       	ldi	r22, 0x61	; 97
    827c:	74 e2       	ldi	r23, 0x24	; 36
    827e:	ab 01       	movw	r20, r22
    8280:	24 ef       	ldi	r18, 0xF4	; 244
    8282:	31 e0       	ldi	r19, 0x01	; 1
    8284:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    8288:	88 23       	and	r24, r24
    828a:	19 f0       	breq	.+6      	; 0x8292 <Config_Wifi+0x25c>
			display_putString("phrase.........OK",col,0,System5x7);
    828c:	83 e3       	ldi	r24, 0x33	; 51
    828e:	95 e2       	ldi	r25, 0x25	; 37
    8290:	02 c0       	rjmp	.+4      	; 0x8296 <Config_Wifi+0x260>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    8292:	85 e4       	ldi	r24, 0x45	; 69
    8294:	95 e2       	ldi	r25, 0x25	; 37
    8296:	61 2f       	mov	r22, r17
    8298:	40 e0       	ldi	r20, 0x00	; 0
    829a:	2b e6       	ldi	r18, 0x6B	; 107
    829c:	39 e2       	ldi	r19, 0x29	; 41
    829e:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		}
		display_writeBufferToScreen();
    82a2:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    82a6:	80 e1       	ldi	r24, 0x10	; 16
    82a8:	97 e2       	ldi	r25, 0x27	; 39
    82aa:	20 e7       	ldi	r18, 0x70	; 112
    82ac:	31 e0       	ldi	r19, 0x01	; 1
    82ae:	f9 01       	movw	r30, r18
    82b0:	31 97       	sbiw	r30, 0x01	; 1
    82b2:	f1 f7       	brne	.-4      	; 0x82b0 <Config_Wifi+0x27a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    82b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    82b6:	d9 f7       	brne	.-10     	; 0x82ae <Config_Wifi+0x278>
    82b8:	25 c0       	rjmp	.+74     	; 0x8304 <Config_Wifi+0x2ce>
		_delay_ms(1000);
		col++;
	} else if(keyRead){
    82ba:	80 91 d8 2b 	lds	r24, 0x2BD8
    82be:	88 23       	and	r24, r24
    82c0:	11 f1       	breq	.+68     	; 0x8306 <Config_Wifi+0x2d0>
		if(Wifi_SendCommand(key,"AOK","AOK",500)){
    82c2:	88 ec       	ldi	r24, 0xC8	; 200
    82c4:	98 e2       	ldi	r25, 0x28	; 40
    82c6:	61 e6       	ldi	r22, 0x61	; 97
    82c8:	74 e2       	ldi	r23, 0x24	; 36
    82ca:	ab 01       	movw	r20, r22
    82cc:	24 ef       	ldi	r18, 0xF4	; 244
    82ce:	31 e0       	ldi	r19, 0x01	; 1
    82d0:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    82d4:	88 23       	and	r24, r24
    82d6:	19 f0       	breq	.+6      	; 0x82de <Config_Wifi+0x2a8>
			display_putString("key............OK",col,0,System5x7);
    82d8:	87 e5       	ldi	r24, 0x57	; 87
    82da:	95 e2       	ldi	r25, 0x25	; 37
    82dc:	02 c0       	rjmp	.+4      	; 0x82e2 <Config_Wifi+0x2ac>
		} else {
			display_putString("key..........FAIL",col,0,System5x7);
    82de:	89 e6       	ldi	r24, 0x69	; 105
    82e0:	95 e2       	ldi	r25, 0x25	; 37
    82e2:	61 2f       	mov	r22, r17
    82e4:	40 e0       	ldi	r20, 0x00	; 0
    82e6:	2b e6       	ldi	r18, 0x6B	; 107
    82e8:	39 e2       	ldi	r19, 0x29	; 41
    82ea:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		}
		display_writeBufferToScreen();
    82ee:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    82f2:	80 e1       	ldi	r24, 0x10	; 16
    82f4:	97 e2       	ldi	r25, 0x27	; 39
    82f6:	20 e7       	ldi	r18, 0x70	; 112
    82f8:	31 e0       	ldi	r19, 0x01	; 1
    82fa:	f9 01       	movw	r30, r18
    82fc:	31 97       	sbiw	r30, 0x01	; 1
    82fe:	f1 f7       	brne	.-4      	; 0x82fc <Config_Wifi+0x2c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8300:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8302:	d9 f7       	brne	.-10     	; 0x82fa <Config_Wifi+0x2c4>
		_delay_ms(1000);
		col++;
    8304:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	if(portRead){
    8306:	80 91 d9 2b 	lds	r24, 0x2BD9
    830a:	88 23       	and	r24, r24
    830c:	11 f1       	breq	.+68     	; 0x8352 <Config_Wifi+0x31c>
		if(Wifi_SendCommand(port,"AOK","AOK",500)){
    830e:	8a ef       	ldi	r24, 0xFA	; 250
    8310:	98 e2       	ldi	r25, 0x28	; 40
    8312:	61 e6       	ldi	r22, 0x61	; 97
    8314:	74 e2       	ldi	r23, 0x24	; 36
    8316:	ab 01       	movw	r20, r22
    8318:	24 ef       	ldi	r18, 0xF4	; 244
    831a:	31 e0       	ldi	r19, 0x01	; 1
    831c:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    8320:	88 23       	and	r24, r24
    8322:	19 f0       	breq	.+6      	; 0x832a <Config_Wifi+0x2f4>
			display_putString("port...........OK",col,0,System5x7);
    8324:	8b e7       	ldi	r24, 0x7B	; 123
    8326:	95 e2       	ldi	r25, 0x25	; 37
    8328:	02 c0       	rjmp	.+4      	; 0x832e <Config_Wifi+0x2f8>
		} else {
			display_putString("port.........FAIL",col,0,System5x7);
    832a:	8d e8       	ldi	r24, 0x8D	; 141
    832c:	95 e2       	ldi	r25, 0x25	; 37
    832e:	61 2f       	mov	r22, r17
    8330:	40 e0       	ldi	r20, 0x00	; 0
    8332:	2b e6       	ldi	r18, 0x6B	; 107
    8334:	39 e2       	ldi	r19, 0x29	; 41
    8336:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		}
		display_writeBufferToScreen();
    833a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    833e:	80 e1       	ldi	r24, 0x10	; 16
    8340:	97 e2       	ldi	r25, 0x27	; 39
    8342:	20 e7       	ldi	r18, 0x70	; 112
    8344:	31 e0       	ldi	r19, 0x01	; 1
    8346:	f9 01       	movw	r30, r18
    8348:	31 97       	sbiw	r30, 0x01	; 1
    834a:	f1 f7       	brne	.-4      	; 0x8348 <Config_Wifi+0x312>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    834c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    834e:	d9 f7       	brne	.-10     	; 0x8346 <Config_Wifi+0x310>
		_delay_ms(1000);
		col++;
    8350:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	if(ssidRead){
    8352:	80 91 da 2b 	lds	r24, 0x2BDA
    8356:	88 23       	and	r24, r24
    8358:	19 f1       	breq	.+70     	; 0x83a0 <Config_Wifi+0x36a>
		if(Wifi_SendCommand(ssid,"DeAut","Auto+",2000)){
    835a:	8c e2       	ldi	r24, 0x2C	; 44
    835c:	99 e2       	ldi	r25, 0x29	; 41
    835e:	6f e9       	ldi	r22, 0x9F	; 159
    8360:	75 e2       	ldi	r23, 0x25	; 37
    8362:	45 ea       	ldi	r20, 0xA5	; 165
    8364:	55 e2       	ldi	r21, 0x25	; 37
    8366:	20 ed       	ldi	r18, 0xD0	; 208
    8368:	37 e0       	ldi	r19, 0x07	; 7
    836a:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    836e:	88 23       	and	r24, r24
    8370:	19 f0       	breq	.+6      	; 0x8378 <Config_Wifi+0x342>
			display_putString("ssid...........OK",col,0,System5x7);
    8372:	8b ea       	ldi	r24, 0xAB	; 171
    8374:	95 e2       	ldi	r25, 0x25	; 37
    8376:	02 c0       	rjmp	.+4      	; 0x837c <Config_Wifi+0x346>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    8378:	8d eb       	ldi	r24, 0xBD	; 189
    837a:	95 e2       	ldi	r25, 0x25	; 37
    837c:	61 2f       	mov	r22, r17
    837e:	40 e0       	ldi	r20, 0x00	; 0
    8380:	2b e6       	ldi	r18, 0x6B	; 107
    8382:	39 e2       	ldi	r19, 0x29	; 41
    8384:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		}
		display_writeBufferToScreen();
    8388:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    838c:	80 e1       	ldi	r24, 0x10	; 16
    838e:	97 e2       	ldi	r25, 0x27	; 39
    8390:	20 e7       	ldi	r18, 0x70	; 112
    8392:	31 e0       	ldi	r19, 0x01	; 1
    8394:	f9 01       	movw	r30, r18
    8396:	31 97       	sbiw	r30, 0x01	; 1
    8398:	f1 f7       	brne	.-4      	; 0x8396 <Config_Wifi+0x360>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    839a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    839c:	d9 f7       	brne	.-10     	; 0x8394 <Config_Wifi+0x35e>
		_delay_ms(1000);
		col++;
    839e:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    83a0:	8f ec       	ldi	r24, 0xCF	; 207
    83a2:	95 e2       	ldi	r25, 0x25	; 37
    83a4:	68 ed       	ldi	r22, 0xD8	; 216
    83a6:	75 e2       	ldi	r23, 0x25	; 37
    83a8:	ab 01       	movw	r20, r22
    83aa:	24 ef       	ldi	r18, 0xF4	; 244
    83ac:	31 e0       	ldi	r19, 0x01	; 1
    83ae:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    83b2:	88 e8       	ldi	r24, 0x88	; 136
    83b4:	93 e1       	ldi	r25, 0x13	; 19
    83b6:	20 e7       	ldi	r18, 0x70	; 112
    83b8:	31 e0       	ldi	r19, 0x01	; 1
    83ba:	f9 01       	movw	r30, r18
    83bc:	31 97       	sbiw	r30, 0x01	; 1
    83be:	f1 f7       	brne	.-4      	; 0x83bc <Config_Wifi+0x386>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83c2:	d9 f7       	brne	.-10     	; 0x83ba <Config_Wifi+0x384>
	_delay_ms(500);
	
	Wifi_ExitCMDMode(500);
    83c4:	84 ef       	ldi	r24, 0xF4	; 244
    83c6:	91 e0       	ldi	r25, 0x01	; 1
    83c8:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <Wifi_ExitCMDMode>
    83cc:	88 e8       	ldi	r24, 0x88	; 136
    83ce:	93 e1       	ldi	r25, 0x13	; 19
    83d0:	20 e7       	ldi	r18, 0x70	; 112
    83d2:	31 e0       	ldi	r19, 0x01	; 1
    83d4:	f9 01       	movw	r30, r18
    83d6:	31 97       	sbiw	r30, 0x01	; 1
    83d8:	f1 f7       	brne	.-4      	; 0x83d6 <Config_Wifi+0x3a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83dc:	d9 f7       	brne	.-10     	; 0x83d4 <Config_Wifi+0x39e>

	_delay_ms(500);
	
	if(Wifi_Connected(1000)){
    83de:	88 ee       	ldi	r24, 0xE8	; 232
    83e0:	93 e0       	ldi	r25, 0x03	; 3
    83e2:	0e 94 84 02 	call	0x508	; 0x508 <Wifi_Connected>
    83e6:	88 23       	and	r24, r24
    83e8:	61 f0       	breq	.+24     	; 0x8402 <Config_Wifi+0x3cc>
		display_putString("network........OK",col,0,System5x7);
    83ea:	82 ee       	ldi	r24, 0xE2	; 226
    83ec:	95 e2       	ldi	r25, 0x25	; 37
    83ee:	61 2f       	mov	r22, r17
    83f0:	40 e0       	ldi	r20, 0x00	; 0
    83f2:	2b e6       	ldi	r18, 0x6B	; 107
    83f4:	39 e2       	ldi	r19, 0x29	; 41
    83f6:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		connected = true;
    83fa:	81 e0       	ldi	r24, 0x01	; 1
    83fc:	80 93 a2 2b 	sts	0x2BA2, r24
    8400:	0a c0       	rjmp	.+20     	; 0x8416 <Config_Wifi+0x3e0>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    8402:	84 ef       	ldi	r24, 0xF4	; 244
    8404:	95 e2       	ldi	r25, 0x25	; 37
    8406:	61 2f       	mov	r22, r17
    8408:	40 e0       	ldi	r20, 0x00	; 0
    840a:	2b e6       	ldi	r18, 0x6B	; 107
    840c:	39 e2       	ldi	r19, 0x29	; 41
    840e:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		connected = false;
    8412:	10 92 a2 2b 	sts	0x2BA2, r1
	}
	display_writeBufferToScreen();
    8416:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
	col++;
    841a:	1f 5f       	subi	r17, 0xFF	; 255
	
	if(connected){
    841c:	80 91 a2 2b 	lds	r24, 0x2BA2
    8420:	88 23       	and	r24, r24
    8422:	09 f4       	brne	.+2      	; 0x8426 <Config_Wifi+0x3f0>
    8424:	4f c0       	rjmp	.+158    	; 0x84c4 <Config_Wifi+0x48e>
    8426:	80 e1       	ldi	r24, 0x10	; 16
    8428:	97 e2       	ldi	r25, 0x27	; 39
    842a:	20 e7       	ldi	r18, 0x70	; 112
    842c:	31 e0       	ldi	r19, 0x01	; 1
    842e:	f9 01       	movw	r30, r18
    8430:	31 97       	sbiw	r30, 0x01	; 1
    8432:	f1 f7       	brne	.-4      	; 0x8430 <Config_Wifi+0x3fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8434:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8436:	d9 f7       	brne	.-10     	; 0x842e <Config_Wifi+0x3f8>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    8438:	84 ef       	ldi	r24, 0xF4	; 244
    843a:	91 e0       	ldi	r25, 0x01	; 1
    843c:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    8440:	88 ee       	ldi	r24, 0xE8	; 232
    8442:	93 e0       	ldi	r25, 0x03	; 3
    8444:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <Wifi_GetTime>
    8448:	88 23       	and	r24, r24
    844a:	09 f1       	breq	.+66     	; 0x848e <Config_Wifi+0x458>
			display_putString("internet.......OK",col,0,System5x7);
    844c:	86 e0       	ldi	r24, 0x06	; 6
    844e:	96 e2       	ldi	r25, 0x26	; 38
    8450:	61 2f       	mov	r22, r17
    8452:	40 e0       	ldi	r20, 0x00	; 0
    8454:	2b e6       	ldi	r18, 0x6B	; 107
    8456:	39 e2       	ldi	r19, 0x29	; 41
    8458:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
			Time_Set(time_secs);
    845c:	80 91 9a 2b 	lds	r24, 0x2B9A
    8460:	90 91 9b 2b 	lds	r25, 0x2B9B
    8464:	a0 91 9c 2b 	lds	r26, 0x2B9C
    8468:	b0 91 9d 2b 	lds	r27, 0x2B9D
	
	
}

void Time_Set(uint32_t time){
  cli();
    846c:	f8 94       	cli
  UNIX_time = time;
    846e:	80 93 b6 2b 	sts	0x2BB6, r24
    8472:	90 93 b7 2b 	sts	0x2BB7, r25
    8476:	a0 93 b8 2b 	sts	0x2BB8, r26
    847a:	b0 93 b9 2b 	sts	0x2BB9, r27
  sei();
    847e:	78 94       	sei
    8480:	e0 e2       	ldi	r30, 0x20	; 32
    8482:	f6 e0       	ldi	r31, 0x06	; 6
    8484:	80 e4       	ldi	r24, 0x40	; 64
    8486:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8488:	80 e8       	ldi	r24, 0x80	; 128
    848a:	86 83       	std	Z+6, r24	; 0x06
    848c:	10 c0       	rjmp	.+32     	; 0x84ae <Config_Wifi+0x478>
			Leds_Set(wifi_Green);
			Leds_Clear(wifi_Red);
		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    848e:	88 e1       	ldi	r24, 0x18	; 24
    8490:	96 e2       	ldi	r25, 0x26	; 38
    8492:	61 2f       	mov	r22, r17
    8494:	40 e0       	ldi	r20, 0x00	; 0
    8496:	2b e6       	ldi	r18, 0x6B	; 107
    8498:	39 e2       	ldi	r19, 0x29	; 41
    849a:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    849e:	e0 e2       	ldi	r30, 0x20	; 32
    84a0:	f6 e0       	ldi	r31, 0x06	; 6
    84a2:	80 e8       	ldi	r24, 0x80	; 128
    84a4:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    84a6:	80 e4       	ldi	r24, 0x40	; 64
    84a8:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
			connected = false;
    84aa:	10 92 a2 2b 	sts	0x2BA2, r1
		}

		display_writeBufferToScreen();
    84ae:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
		Wifi_GetMac(1000);
    84b2:	88 ee       	ldi	r24, 0xE8	; 232
    84b4:	93 e0       	ldi	r25, 0x03	; 3
    84b6:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <Wifi_GetMac>
		Wifi_ExitCMDMode(1000);
    84ba:	88 ee       	ldi	r24, 0xE8	; 232
    84bc:	93 e0       	ldi	r25, 0x03	; 3
    84be:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <Wifi_ExitCMDMode>
    84c2:	0e c0       	rjmp	.+28     	; 0x84e0 <Config_Wifi+0x4aa>
	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    84c4:	88 e1       	ldi	r24, 0x18	; 24
    84c6:	96 e2       	ldi	r25, 0x26	; 38
    84c8:	61 2f       	mov	r22, r17
    84ca:	40 e0       	ldi	r20, 0x00	; 0
    84cc:	2b e6       	ldi	r18, 0x6B	; 107
    84ce:	39 e2       	ldi	r19, 0x29	; 41
    84d0:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
		display_writeBufferToScreen();
    84d4:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    84d8:	80 e8       	ldi	r24, 0x80	; 128
    84da:	e0 e2       	ldi	r30, 0x20	; 32
    84dc:	f6 e0       	ldi	r31, 0x06	; 6
    84de:	85 83       	std	Z+5, r24	; 0x05
		Leds_Set(wifi_Red);
	}

}
    84e0:	1f 91       	pop	r17
    84e2:	08 95       	ret

000084e4 <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    84e4:	af 92       	push	r10
    84e6:	bf 92       	push	r11
    84e8:	cf 92       	push	r12
    84ea:	df 92       	push	r13
    84ec:	ff 92       	push	r15
    84ee:	0f 93       	push	r16
    84f0:	1f 93       	push	r17
    84f2:	cf 93       	push	r28
    84f4:	df 93       	push	r29
    84f6:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    84f8:	8a e2       	ldi	r24, 0x2A	; 42
    84fa:	96 e2       	ldi	r25, 0x26	; 38
    84fc:	64 e3       	ldi	r22, 0x34	; 52
    84fe:	76 e2       	ldi	r23, 0x26	; 38
    8500:	ab 01       	movw	r20, r22
    8502:	96 01       	movw	r18, r12
    8504:	0e 94 1c 3c 	call	0x7838	; 0x7838 <Wifi_SendCommand>
    8508:	ff 24       	eor	r15, r15
    850a:	c0 e0       	ldi	r28, 0x00	; 0
    850c:	d0 e0       	ldi	r29, 0x00	; 0
    850e:	a6 e6       	ldi	r26, 0x66	; 102
    8510:	aa 2e       	mov	r10, r26
    8512:	ae e0       	ldi	r26, 0x0E	; 14
    8514:	ba 2e       	mov	r11, r26
    8516:	36 c0       	rjmp	.+108    	; 0x8584 <Wifi_GetSignalStrength+0xa0>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    8518:	0e 94 01 02 	call	0x402	; 0x402 <Wifi_CharReadyToRead>
    851c:	88 23       	and	r24, r24
    851e:	71 f1       	breq	.+92     	; 0x857c <Wifi_GetSignalStrength+0x98>
			rssi[tmp] = Wifi_GetByte(false);
    8520:	0f 2d       	mov	r16, r15
    8522:	10 e0       	ldi	r17, 0x00	; 0
    8524:	80 e0       	ldi	r24, 0x00	; 0
    8526:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Wifi_GetByte>
    852a:	f8 01       	movw	r30, r16
    852c:	e4 59       	subi	r30, 0x94	; 148
    852e:	fd 4b       	sbci	r31, 0xBD	; 189
    8530:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    8532:	89 32       	cpi	r24, 0x29	; 41
    8534:	11 f5       	brne	.+68     	; 0x857a <Wifi_GetSignalStrength+0x96>
				rssi[tmp] = 0;
    8536:	10 82       	st	Z, r1
				//Debug_SendString("rssi: ", false);
				//Debug_SendString(rssi, true);
				worker = atoi(rssi);
    8538:	8c e6       	ldi	r24, 0x6C	; 108
    853a:	92 e4       	ldi	r25, 0x42	; 66
    853c:	0e 94 fc 49 	call	0x93f8	; 0x93f8 <atoi>
    8540:	aa 27       	eor	r26, r26
    8542:	97 fd       	sbrc	r25, 7
    8544:	a0 95       	com	r26
    8546:	ba 2f       	mov	r27, r26
				worker*=9208;
    8548:	bc 01       	movw	r22, r24
    854a:	cd 01       	movw	r24, r26
    854c:	28 ef       	ldi	r18, 0xF8	; 248
    854e:	33 e2       	ldi	r19, 0x23	; 35
    8550:	40 e0       	ldi	r20, 0x00	; 0
    8552:	50 e0       	ldi	r21, 0x00	; 0
    8554:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulsi3>
    8558:	9b 01       	movw	r18, r22
    855a:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    855c:	6c e6       	ldi	r22, 0x6C	; 108
    855e:	72 ef       	ldi	r23, 0xF2	; 242
    8560:	8f e0       	ldi	r24, 0x0F	; 15
    8562:	90 e0       	ldi	r25, 0x00	; 0
    8564:	62 1b       	sub	r22, r18
    8566:	73 0b       	sbc	r23, r19
    8568:	84 0b       	sbc	r24, r20
    856a:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    856c:	20 e1       	ldi	r18, 0x10	; 16
    856e:	37 e2       	ldi	r19, 0x27	; 39
    8570:	40 e0       	ldi	r20, 0x00	; 0
    8572:	50 e0       	ldi	r21, 0x00	; 0
    8574:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    8578:	09 c0       	rjmp	.+18     	; 0x858c <Wifi_GetSignalStrength+0xa8>
				//sprintf(string, "strength: %u %",ss);
				//Debug_SendString(string,true);

				return ss;
			}
			tmp++;
    857a:	f3 94       	inc	r15
    857c:	c5 01       	movw	r24, r10
    857e:	01 97       	sbiw	r24, 0x01	; 1
    8580:	f1 f7       	brne	.-4      	; 0x857e <Wifi_GetSignalStrength+0x9a>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    8582:	21 96       	adiw	r28, 0x01	; 1
    8584:	cc 15       	cp	r28, r12
    8586:	dd 05       	cpc	r29, r13
    8588:	38 f2       	brcs	.-114    	; 0x8518 <Wifi_GetSignalStrength+0x34>
    858a:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    858c:	82 2f       	mov	r24, r18
    858e:	df 91       	pop	r29
    8590:	cf 91       	pop	r28
    8592:	1f 91       	pop	r17
    8594:	0f 91       	pop	r16
    8596:	ff 90       	pop	r15
    8598:	df 90       	pop	r13
    859a:	cf 90       	pop	r12
    859c:	bf 90       	pop	r11
    859e:	af 90       	pop	r10
    85a0:	08 95       	ret

000085a2 <main>:
	

// ********************************** Main Program *********************************


int main(void){
    85a2:	2f 92       	push	r2
    85a4:	3f 92       	push	r3
    85a6:	4f 92       	push	r4
    85a8:	5f 92       	push	r5
    85aa:	6f 92       	push	r6
    85ac:	7f 92       	push	r7
    85ae:	8f 92       	push	r8
    85b0:	9f 92       	push	r9
    85b2:	af 92       	push	r10
    85b4:	bf 92       	push	r11
    85b6:	cf 92       	push	r12
    85b8:	ef 92       	push	r14
    85ba:	ff 92       	push	r15
    85bc:	0f 93       	push	r16
    85be:	1f 93       	push	r17
    85c0:	df 93       	push	r29
    85c2:	cf 93       	push	r28
    85c4:	0f 92       	push	r0
    85c6:	cd b7       	in	r28, 0x3d	; 61
    85c8:	de b7       	in	r29, 0x3e	; 62
    85ca:	80 e0       	ldi	r24, 0x00	; 0
    85cc:	98 e4       	ldi	r25, 0x48	; 72
    85ce:	01 97       	sbiw	r24, 0x01	; 1
    85d0:	f1 f7       	brne	.-4      	; 0x85ce <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    85d2:	0e 94 c9 33 	call	0x6792	; 0x6792 <Clock_Init>
	display_init();
    85d6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <display_init>

	Time_Init();
    85da:	0e 94 1e 2a 	call	0x543c	; 0x543c <Time_Init>
	Sensors_Init();
    85de:	0e 94 95 2a 	call	0x552a	; 0x552a <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    85e2:	80 91 21 06 	lds	r24, 0x0621
    85e6:	83 6f       	ori	r24, 0xF3	; 243
    85e8:	e0 e2       	ldi	r30, 0x20	; 32
    85ea:	f6 e0       	ldi	r31, 0x06	; 6
    85ec:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    85ee:	0e 94 9e 02 	call	0x53c	; 0x53c <Dpad_Init>
	Debug_Init();
    85f2:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	Rs232_Init();
    85f6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Rs232_Init>

	Wifi_Init(9600);
    85fa:	60 e8       	ldi	r22, 0x80	; 128
    85fc:	75 e2       	ldi	r23, 0x25	; 37
    85fe:	80 e0       	ldi	r24, 0x00	; 0
    8600:	90 e0       	ldi	r25, 0x00	; 0
    8602:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_Init>
	Light_Init(LightAddress);
    8606:	82 e7       	ldi	r24, 0x72	; 114
    8608:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <Light_Init>
	SD_Init();
    860c:	0e 94 02 26 	call	0x4c04	; 0x4c04 <SD_Init>

	SD_BackroundWriter_Init();
    8610:	0e 94 32 34 	call	0x6864	; 0x6864 <SD_BackroundWriter_Init>
	DMA_Init();
    8614:	0e 94 0e 34 	call	0x681c	; 0x681c <DMA_Init>
		
}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    8618:	80 91 a2 00 	lds	r24, 0x00A2
    861c:	87 60       	ori	r24, 0x07	; 7
    861e:	e0 ea       	ldi	r30, 0xA0	; 160
    8620:	f0 e0       	ldi	r31, 0x00	; 0
    8622:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    8624:	78 94       	sei


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    8626:	8f b7       	in	r24, 0x3f	; 63
    8628:	89 83       	std	Y+1, r24	; 0x01
    cli();
    862a:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    862c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    862e:	21 e0       	ldi	r18, 0x01	; 1
    8630:	86 e9       	ldi	r24, 0x96	; 150
    8632:	90 e0       	ldi	r25, 0x00	; 0
    8634:	fc 01       	movw	r30, r24
    8636:	08 ed       	ldi	r16, 0xD8	; 216
    8638:	04 bf       	out	0x34, r16	; 52
    863a:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    863c:	89 81       	ldd	r24, Y+1	; 0x01
    863e:	8f bf       	out	0x3f, r24	; 63
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8640:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8644:	8c 77       	andi	r24, 0x7C	; 124
    8646:	86 ff       	sbrs	r24, 6
    8648:	07 c6       	rjmp	.+3086   	; 0x9258 <main+0xcb6>
		Debug_SendString("Entering Debug to Wifi function",true);
		Debug_To_Wifi();
	}


	Debug_SendString("booting up...",true);
    864a:	8c e3       	ldi	r24, 0x3C	; 60
    864c:	96 e2       	ldi	r25, 0x26	; 38
    864e:	61 e0       	ldi	r22, 0x01	; 1
    8650:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>


	display_putString("   BaseStation   ",1,0,System5x7);
    8654:	8a e4       	ldi	r24, 0x4A	; 74
    8656:	96 e2       	ldi	r25, 0x26	; 38
    8658:	61 e0       	ldi	r22, 0x01	; 1
    865a:	40 e0       	ldi	r20, 0x00	; 0
    865c:	2b e6       	ldi	r18, 0x6B	; 107
    865e:	39 e2       	ldi	r19, 0x29	; 41
    8660:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	strcat(temp,"  Hardware: v");
    8664:	8c e5       	ldi	r24, 0x5C	; 92
    8666:	9b e3       	ldi	r25, 0x3B	; 59
    8668:	6c e5       	ldi	r22, 0x5C	; 92
    866a:	76 e2       	ldi	r23, 0x26	; 38
    866c:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	strcat(temp,HardwareVersion);
    8670:	8c e5       	ldi	r24, 0x5C	; 92
    8672:	9b e3       	ldi	r25, 0x3B	; 59
    8674:	67 ec       	ldi	r22, 0xC7	; 199
    8676:	71 e2       	ldi	r23, 0x21	; 33
    8678:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	display_putString(temp,3,0,System5x7);
    867c:	8c e5       	ldi	r24, 0x5C	; 92
    867e:	9b e3       	ldi	r25, 0x3B	; 59
    8680:	63 e0       	ldi	r22, 0x03	; 3
    8682:	40 e0       	ldi	r20, 0x00	; 0
    8684:	2b e6       	ldi	r18, 0x6B	; 107
    8686:	39 e2       	ldi	r19, 0x29	; 41
    8688:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	temp[0] = 0;
    868c:	10 92 5c 3b 	sts	0x3B5C, r1
	strcat(temp," Firmware: v");
    8690:	8c e5       	ldi	r24, 0x5C	; 92
    8692:	9b e3       	ldi	r25, 0x3B	; 59
    8694:	6a e6       	ldi	r22, 0x6A	; 106
    8696:	76 e2       	ldi	r23, 0x26	; 38
    8698:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	strcat(temp,FirmwareVersion);
    869c:	8c e5       	ldi	r24, 0x5C	; 92
    869e:	9b e3       	ldi	r25, 0x3B	; 59
    86a0:	61 eb       	ldi	r22, 0xB1	; 177
    86a2:	71 e2       	ldi	r23, 0x21	; 33
    86a4:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
	display_putString(temp,5,0,System5x7);
    86a8:	8c e5       	ldi	r24, 0x5C	; 92
    86aa:	9b e3       	ldi	r25, 0x3B	; 59
    86ac:	65 e0       	ldi	r22, 0x05	; 5
    86ae:	40 e0       	ldi	r20, 0x00	; 0
    86b0:	2b e6       	ldi	r18, 0x6B	; 107
    86b2:	39 e2       	ldi	r19, 0x29	; 41
    86b4:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	display_writeBufferToScreen();
    86b8:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
	if(demoMode){
    86bc:	80 91 69 29 	lds	r24, 0x2969
    86c0:	88 23       	and	r24, r24
    86c2:	41 f0       	breq	.+16     	; 0x86d4 <main+0x132>
		display_putString("    Demo Mode    ",7,0,System5x7);
    86c4:	87 e7       	ldi	r24, 0x77	; 119
    86c6:	96 e2       	ldi	r25, 0x26	; 38
    86c8:	67 e0       	ldi	r22, 0x07	; 7
    86ca:	40 e0       	ldi	r20, 0x00	; 0
    86cc:	2b e6       	ldi	r18, 0x6B	; 107
    86ce:	39 e2       	ldi	r19, 0x29	; 41
    86d0:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
	}
	display_writeBufferToScreen();
    86d4:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    86d8:	80 e2       	ldi	r24, 0x20	; 32
    86da:	9e e4       	ldi	r25, 0x4E	; 78
    86dc:	20 e7       	ldi	r18, 0x70	; 112
    86de:	31 e0       	ldi	r19, 0x01	; 1
    86e0:	f9 01       	movw	r30, r18
    86e2:	31 97       	sbiw	r30, 0x01	; 1
    86e4:	f1 f7       	brne	.-4      	; 0x86e2 <main+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    86e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    86e8:	d9 f7       	brne	.-10     	; 0x86e0 <main+0x13e>
    86ea:	06 c0       	rjmp	.+12     	; 0x86f8 <main+0x156>
    86ec:	f8 01       	movw	r30, r16
    86ee:	31 97       	sbiw	r30, 0x01	; 1
    86f0:	f1 f7       	brne	.-4      	; 0x86ee <main+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    86f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    86f4:	d9 f7       	brne	.-10     	; 0x86ec <main+0x14a>
    86f6:	08 c0       	rjmp	.+16     	; 0x8708 <main+0x166>
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    86f8:	50 e2       	ldi	r21, 0x20	; 32
    86fa:	a5 2e       	mov	r10, r21
    86fc:	56 e0       	ldi	r21, 0x06	; 6
    86fe:	b5 2e       	mov	r11, r21
    8700:	42 e0       	ldi	r20, 0x02	; 2
    8702:	e4 2e       	mov	r14, r20
    8704:	00 e7       	ldi	r16, 0x70	; 112
    8706:	11 e0       	ldi	r17, 0x01	; 1
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8708:	80 91 a8 06 	lds	r24, 0x06A8
    870c:	80 ff       	sbrs	r24, 0
    870e:	ac c5       	rjmp	.+2904   	; 0x9268 <main+0xcc6>
	



	while(!SD_Inserted()){
		Debug_SendString("SD?", true);
    8710:	89 e8       	ldi	r24, 0x89	; 137
    8712:	96 e2       	ldi	r25, 0x26	; 38
    8714:	61 e0       	ldi	r22, 0x01	; 1
    8716:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
    871a:	d5 01       	movw	r26, r10
    871c:	17 96       	adiw	r26, 0x07	; 7
    871e:	ec 92       	st	X, r14
    8720:	88 e8       	ldi	r24, 0x88	; 136
    8722:	93 e1       	ldi	r25, 0x13	; 19
    8724:	e3 cf       	rjmp	.-58     	; 0x86ec <main+0x14a>
    8726:	ca 01       	movw	r24, r20
    8728:	01 97       	sbiw	r24, 0x01	; 1
    872a:	f1 f7       	brne	.-4      	; 0x8728 <main+0x186>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    872c:	21 50       	subi	r18, 0x01	; 1
    872e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8730:	d1 f7       	brne	.-12     	; 0x8726 <main+0x184>
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);
	
	
	Read_config_file();
    8732:	0e 94 0f 3a 	call	0x741e	; 0x741e <Read_config_file>
    8736:	00 e7       	ldi	r16, 0x70	; 112
    8738:	11 e0       	ldi	r17, 0x01	; 1
    873a:	09 c0       	rjmp	.+18     	; 0x874e <main+0x1ac>


	while(!connected && !demoMode){
		Config_Wifi();
    873c:	0e 94 1b 40 	call	0x8036	; 0x8036 <Config_Wifi>
    8740:	88 e8       	ldi	r24, 0x88	; 136
    8742:	93 e1       	ldi	r25, 0x13	; 19
    8744:	f8 01       	movw	r30, r16
    8746:	31 97       	sbiw	r30, 0x01	; 1
    8748:	f1 f7       	brne	.-4      	; 0x8746 <main+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    874a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    874c:	d9 f7       	brne	.-10     	; 0x8744 <main+0x1a2>
	
	
	Read_config_file();


	while(!connected && !demoMode){
    874e:	80 91 a2 2b 	lds	r24, 0x2BA2
    8752:	88 23       	and	r24, r24
    8754:	21 f4       	brne	.+8      	; 0x875e <main+0x1bc>
    8756:	80 91 69 29 	lds	r24, 0x2969
    875a:	88 23       	and	r24, r24
    875c:	79 f3       	breq	.-34     	; 0x873c <main+0x19a>
		Config_Wifi();
		_delay_ms(500);
	}
	
	if(demoMode){
    875e:	80 91 69 29 	lds	r24, 0x2969
    8762:	88 23       	and	r24, r24
    8764:	21 f0       	breq	.+8      	; 0x876e <main+0x1cc>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8766:	80 e4       	ldi	r24, 0x40	; 64
    8768:	e0 e2       	ldi	r30, 0x20	; 32
    876a:	f6 e0       	ldi	r31, 0x06	; 6
    876c:	85 83       	std	Z+5, r24	; 0x05
    876e:	88 e8       	ldi	r24, 0x88	; 136
    8770:	93 e1       	ldi	r25, 0x13	; 19
    8772:	20 e7       	ldi	r18, 0x70	; 112
    8774:	31 e0       	ldi	r19, 0x01	; 1
    8776:	f9 01       	movw	r30, r18
    8778:	31 97       	sbiw	r30, 0x01	; 1
    877a:	f1 f7       	brne	.-4      	; 0x8778 <main+0x1d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    877c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    877e:	d9 f7       	brne	.-10     	; 0x8776 <main+0x1d4>
	
	
	


	display_clearBuffer();
    8780:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
	display_writeBufferToScreen();
    8784:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
			demoModeFirstFile = false;
			UNIX_time = 1928383;
		}
	}
	Wifi_ExitCMDMode(500);
	sprintf(temp,"time: %lu", time_secs);
    8788:	3c e5       	ldi	r19, 0x5C	; 92
    878a:	a3 2e       	mov	r10, r19
    878c:	3b e3       	ldi	r19, 0x3B	; 59
    878e:	b3 2e       	mov	r11, r19
					display_drawPixel(3,101,true);


					sprintf(temp,"Temperature: %3uC", quickTemperature);
					display_putString(temp,2,0,System5x7);
					sprintf(temp,"Humidity:  %3u", quickHumidity);
    8790:	26 e7       	ldi	r18, 0x76	; 118
    8792:	42 2e       	mov	r4, r18
    8794:	27 e2       	ldi	r18, 0x27	; 39
    8796:	52 2e       	mov	r5, r18
					strcat(temp, "%RH");
					display_putString(temp,3,0,System5x7);
					sprintf(temp,"Pressure:  %3ukPa", quickPressure);
    8798:	99 e8       	ldi	r25, 0x89	; 137
    879a:	29 2e       	mov	r2, r25
    879c:	97 e2       	ldi	r25, 0x27	; 39
    879e:	39 2e       	mov	r3, r25
					display_drawPixel(2,59,true);
					display_drawPixel(3,58,true);
					display_drawPixel(2,61,true);
					display_drawPixel(3,62,true);

					sprintf(temp, "Uploading    %3u", uploadPercentBS);
    87a0:	8d ec       	ldi	r24, 0xCD	; 205
    87a2:	68 2e       	mov	r6, r24
    87a4:	86 e2       	ldi	r24, 0x26	; 38
    87a6:	78 2e       	mov	r7, r24

	display_clearBuffer();
	display_writeBufferToScreen();

StartRecording:
	SD_Init();
    87a8:	0e 94 02 26 	call	0x4c04	; 0x4c04 <SD_Init>
	Wifi_EnterCMDMode(500);
    87ac:	84 ef       	ldi	r24, 0xF4	; 244
    87ae:	91 e0       	ldi	r25, 0x01	; 1
    87b0:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
	if(!demoMode){
    87b4:	80 91 69 29 	lds	r24, 0x2969
    87b8:	88 23       	and	r24, r24
    87ba:	29 f4       	brne	.+10     	; 0x87c6 <main+0x224>
		Wifi_GetTime(1000);
    87bc:	88 ee       	ldi	r24, 0xE8	; 232
    87be:	93 e0       	ldi	r25, 0x03	; 3
    87c0:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <Wifi_GetTime>
    87c4:	12 c0       	rjmp	.+36     	; 0x87ea <main+0x248>
	}else{
		if(demoModeFirstFile){
    87c6:	80 91 6a 29 	lds	r24, 0x296A
    87ca:	88 23       	and	r24, r24
    87cc:	71 f0       	breq	.+28     	; 0x87ea <main+0x248>
			demoModeFirstFile = false;
    87ce:	10 92 6a 29 	sts	0x296A, r1
			UNIX_time = 1928383;
    87d2:	8f eb       	ldi	r24, 0xBF	; 191
    87d4:	9c e6       	ldi	r25, 0x6C	; 108
    87d6:	ad e1       	ldi	r26, 0x1D	; 29
    87d8:	b0 e0       	ldi	r27, 0x00	; 0
    87da:	80 93 b6 2b 	sts	0x2BB6, r24
    87de:	90 93 b7 2b 	sts	0x2BB7, r25
    87e2:	a0 93 b8 2b 	sts	0x2BB8, r26
    87e6:	b0 93 b9 2b 	sts	0x2BB9, r27
		}
	}
	Wifi_ExitCMDMode(500);
    87ea:	84 ef       	ldi	r24, 0xF4	; 244
    87ec:	91 e0       	ldi	r25, 0x01	; 1
    87ee:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <Wifi_ExitCMDMode>
	sprintf(temp,"time: %lu", time_secs);
    87f2:	40 91 9a 2b 	lds	r20, 0x2B9A
    87f6:	50 91 9b 2b 	lds	r21, 0x2B9B
    87fa:	60 91 9c 2b 	lds	r22, 0x2B9C
    87fe:	70 91 9d 2b 	lds	r23, 0x2B9D
    8802:	ed b7       	in	r30, 0x3d	; 61
    8804:	fe b7       	in	r31, 0x3e	; 62
    8806:	38 97       	sbiw	r30, 0x08	; 8
    8808:	ed bf       	out	0x3d, r30	; 61
    880a:	fe bf       	out	0x3e, r31	; 62
    880c:	31 96       	adiw	r30, 0x01	; 1
    880e:	ad b7       	in	r26, 0x3d	; 61
    8810:	be b7       	in	r27, 0x3e	; 62
    8812:	11 96       	adiw	r26, 0x01	; 1
    8814:	ad 92       	st	X+, r10
    8816:	bc 92       	st	X, r11
    8818:	12 97       	sbiw	r26, 0x02	; 2
    881a:	2d e8       	ldi	r18, 0x8D	; 141
    881c:	36 e2       	ldi	r19, 0x26	; 38
    881e:	22 83       	std	Z+2, r18	; 0x02
    8820:	33 83       	std	Z+3, r19	; 0x03
    8822:	44 83       	std	Z+4, r20	; 0x04
    8824:	55 83       	std	Z+5, r21	; 0x05
    8826:	66 83       	std	Z+6, r22	; 0x06
    8828:	77 83       	std	Z+7, r23	; 0x07
    882a:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
	Debug_SendString(temp,true);
    882e:	8d b7       	in	r24, 0x3d	; 61
    8830:	9e b7       	in	r25, 0x3e	; 62
    8832:	08 96       	adiw	r24, 0x08	; 8
    8834:	8d bf       	out	0x3d, r24	; 61
    8836:	9e bf       	out	0x3e, r25	; 62
    8838:	c5 01       	movw	r24, r10
    883a:	61 e0       	ldi	r22, 0x01	; 1
    883c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
    8840:	00 e2       	ldi	r16, 0x20	; 32
    8842:	e0 2e       	mov	r14, r16
    8844:	06 e0       	ldi	r16, 0x06	; 6
    8846:	f0 2e       	mov	r15, r16
    8848:	12 e0       	ldi	r17, 0x02	; 2
    884a:	c1 2e       	mov	r12, r17
    884c:	00 e7       	ldi	r16, 0x70	; 112
    884e:	11 e0       	ldi	r17, 0x01	; 1

	while(true){


		if(SD_StartLogFile(UNIX_time) == 0){								// open file
    8850:	60 91 b6 2b 	lds	r22, 0x2BB6
    8854:	70 91 b7 2b 	lds	r23, 0x2BB7
    8858:	80 91 b8 2b 	lds	r24, 0x2BB8
    885c:	90 91 b9 2b 	lds	r25, 0x2BB9
    8860:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <SD_StartLogFile>
    8864:	88 23       	and	r24, r24
    8866:	09 f0       	breq	.+2      	; 0x886a <main+0x2c8>
    8868:	bd c4       	rjmp	.+2426   	; 0x91e4 <main+0xc42>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    886a:	e0 e2       	ldi	r30, 0x20	; 32
    886c:	f6 e0       	ldi	r31, 0x06	; 6
    886e:	11 e0       	ldi	r17, 0x01	; 1
    8870:	16 83       	std	Z+6, r17	; 0x06

			Leds_Clear(sd_Green);
			Leds_Clear(wifi_Green);
			timeRecordingStarted = UNIX_time;
    8872:	80 e4       	ldi	r24, 0x40	; 64
    8874:	86 83       	std	Z+6, r24	; 0x06
    8876:	80 91 b6 2b 	lds	r24, 0x2BB6
    887a:	90 91 b7 2b 	lds	r25, 0x2BB7
    887e:	a0 91 b8 2b 	lds	r26, 0x2BB8
    8882:	b0 91 b9 2b 	lds	r27, 0x2BB9
    8886:	80 93 8a 2b 	sts	0x2B8A, r24
    888a:	90 93 8b 2b 	sts	0x2B8B, r25
    888e:	a0 93 8c 2b 	sts	0x2B8C, r26
    8892:	b0 93 8d 2b 	sts	0x2B8D, r27

			Debug_SendString("RTC Block: ",false);							// send rtc block
    8896:	82 ee       	ldi	r24, 0xE2	; 226
    8898:	90 e2       	ldi	r25, 0x20	; 32
    889a:	60 e0       	ldi	r22, 0x00	; 0
    889c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
			SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    88a0:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    88a4:	20 91 b6 2b 	lds	r18, 0x2BB6
    88a8:	30 91 b7 2b 	lds	r19, 0x2BB7
    88ac:	40 91 b8 2b 	lds	r20, 0x2BB8
    88b0:	50 91 b9 2b 	lds	r21, 0x2BB9
    88b4:	0e 94 41 34 	call	0x6882	; 0x6882 <SD_WriteRTCBlock>
			Debug_SendString(ltoa(UNIX_time,temp,10),false);
    88b8:	60 91 b6 2b 	lds	r22, 0x2BB6
    88bc:	70 91 b7 2b 	lds	r23, 0x2BB7
    88c0:	80 91 b8 2b 	lds	r24, 0x2BB8
    88c4:	90 91 b9 2b 	lds	r25, 0x2BB9
    88c8:	4c e5       	ldi	r20, 0x5C	; 92
    88ca:	5b e3       	ldi	r21, 0x3B	; 59
    88cc:	2a e0       	ldi	r18, 0x0A	; 10
    88ce:	30 e0       	ldi	r19, 0x00	; 0
    88d0:	0e 94 a2 4a 	call	0x9544	; 0x9544 <ltoa>
    88d4:	60 e0       	ldi	r22, 0x00	; 0
    88d6:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
			Debug_SendString(", ",false);
    88da:	8e ee       	ldi	r24, 0xEE	; 238
    88dc:	90 e2       	ldi	r25, 0x20	; 32
    88de:	60 e0       	ldi	r22, 0x00	; 0
    88e0:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
			Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);
    88e4:	0e 94 48 2a 	call	0x5490	; 0x5490 <Time_Get32BitTimer>
    88e8:	4c e5       	ldi	r20, 0x5C	; 92
    88ea:	5b e3       	ldi	r21, 0x3B	; 59
    88ec:	2a e0       	ldi	r18, 0x0A	; 10
    88ee:	30 e0       	ldi	r19, 0x00	; 0
    88f0:	0e 94 a2 4a 	call	0x9544	; 0x9544 <ltoa>
    88f4:	61 e0       	ldi	r22, 0x01	; 1
    88f6:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    88fa:	80 91 a5 2b 	lds	r24, 0x2BA5
    88fe:	90 91 a6 2b 	lds	r25, 0x2BA6
    8902:	80 93 a3 2b 	sts	0x2BA3, r24
    8906:	90 93 a4 2b 	sts	0x2BA4, r25

			Rs232_ClearBuffer();
			rs232Recording = true;
    890a:	10 93 b0 2b 	sts	0x2BB0, r17
			recording = true;
    890e:	10 93 bb 2b 	sts	0x2BBB, r17
    8912:	b0 e7       	ldi	r27, 0x70	; 112
    8914:	8b 2e       	mov	r8, r27
    8916:	b1 e0       	ldi	r27, 0x01	; 1
    8918:	9b 2e       	mov	r9, r27



			while(true){

				if(ssRefreshCounter == 0){
    891a:	80 91 df 2b 	lds	r24, 0x2BDF
    891e:	88 23       	and	r24, r24
    8920:	71 f4       	brne	.+28     	; 0x893e <main+0x39c>
					Wifi_EnterCMDMode(1000);
    8922:	88 ee       	ldi	r24, 0xE8	; 232
    8924:	93 e0       	ldi	r25, 0x03	; 3
    8926:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
					signalStrength = Wifi_GetSignalStrength(1000);
    892a:	88 ee       	ldi	r24, 0xE8	; 232
    892c:	93 e0       	ldi	r25, 0x03	; 3
    892e:	0e 94 72 42 	call	0x84e4	; 0x84e4 <Wifi_GetSignalStrength>
    8932:	80 93 e0 2b 	sts	0x2BE0, r24
					Wifi_ExitCMDMode(500);
    8936:	84 ef       	ldi	r24, 0xF4	; 244
    8938:	91 e0       	ldi	r25, 0x01	; 1
    893a:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <Wifi_ExitCMDMode>
				}
				ssRefreshCounter++;
    893e:	80 91 df 2b 	lds	r24, 0x2BDF
    8942:	8f 5f       	subi	r24, 0xFF	; 255
    8944:	80 93 df 2b 	sts	0x2BDF, r24

				// controls


				if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    8948:	80 91 de 2b 	lds	r24, 0x2BDE
    894c:	88 23       	and	r24, r24
    894e:	09 f0       	breq	.+2      	; 0x8952 <main+0x3b0>
    8950:	43 c0       	rjmp	.+134    	; 0x89d8 <main+0x436>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8952:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8956:	8c 77       	andi	r24, 0x7C	; 124
    8958:	82 fd       	sbrc	r24, 2
    895a:	3e c0       	rjmp	.+124    	; 0x89d8 <main+0x436>
    895c:	90 c4       	rjmp	.+2336   	; 0x927e <main+0xcdc>

					display_putString("Recording      0m",0,0,System5x7);
    895e:	87 e9       	ldi	r24, 0x97	; 151
    8960:	96 e2       	ldi	r25, 0x26	; 38
    8962:	60 e0       	ldi	r22, 0x00	; 0
    8964:	40 e0       	ldi	r20, 0x00	; 0
    8966:	2b e6       	ldi	r18, 0x6B	; 107
    8968:	39 e2       	ldi	r19, 0x29	; 41
    896a:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					display_drawLine(1,60,7,60,true);		// up arrow
    896e:	81 e0       	ldi	r24, 0x01	; 1
    8970:	6c e3       	ldi	r22, 0x3C	; 60
    8972:	47 e0       	ldi	r20, 0x07	; 7
    8974:	2c e3       	ldi	r18, 0x3C	; 60
    8976:	01 e0       	ldi	r16, 0x01	; 1
    8978:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
					display_drawPixel(2,59,true);
    897c:	82 e0       	ldi	r24, 0x02	; 2
    897e:	6b e3       	ldi	r22, 0x3B	; 59
    8980:	41 e0       	ldi	r20, 0x01	; 1
    8982:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,58,true);
    8986:	83 e0       	ldi	r24, 0x03	; 3
    8988:	6a e3       	ldi	r22, 0x3A	; 58
    898a:	41 e0       	ldi	r20, 0x01	; 1
    898c:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(2,61,true);
    8990:	82 e0       	ldi	r24, 0x02	; 2
    8992:	6d e3       	ldi	r22, 0x3D	; 61
    8994:	41 e0       	ldi	r20, 0x01	; 1
    8996:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,62,true);
    899a:	83 e0       	ldi	r24, 0x03	; 3
    899c:	6e e3       	ldi	r22, 0x3E	; 62
    899e:	41 e0       	ldi	r20, 0x01	; 1
    89a0:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>

					display_writeBufferToScreen();
    89a4:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    89a8:	e0 e2       	ldi	r30, 0x20	; 32
    89aa:	f6 e0       	ldi	r31, 0x06	; 6
    89ac:	81 e0       	ldi	r24, 0x01	; 1
    89ae:	86 83       	std	Z+6, r24	; 0x06
    89b0:	82 e0       	ldi	r24, 0x02	; 2
    89b2:	86 83       	std	Z+6, r24	; 0x06
    89b4:	80 e4       	ldi	r24, 0x40	; 64
    89b6:	86 83       	std	Z+6, r24	; 0x06
    89b8:	80 e8       	ldi	r24, 0x80	; 128
    89ba:	86 83       	std	Z+6, r24	; 0x06
    89bc:	80 e1       	ldi	r24, 0x10	; 16
    89be:	86 83       	std	Z+6, r24	; 0x06
    89c0:	80 e2       	ldi	r24, 0x20	; 32
    89c2:	86 83       	std	Z+6, r24	; 0x06
    89c4:	80 e1       	ldi	r24, 0x10	; 16
    89c6:	97 e2       	ldi	r25, 0x27	; 39
    89c8:	20 e7       	ldi	r18, 0x70	; 112
    89ca:	31 e0       	ldi	r19, 0x01	; 1
    89cc:	f9 01       	movw	r30, r18
    89ce:	31 97       	sbiw	r30, 0x01	; 1
    89d0:	f1 f7       	brne	.-4      	; 0x89ce <main+0x42c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    89d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    89d4:	d9 f7       	brne	.-10     	; 0x89cc <main+0x42a>
    89d6:	e8 ce       	rjmp	.-560    	; 0x87a8 <main+0x206>
					Leds_Clear(ext_Green);
					Leds_Clear(ext_Red);

					_delay_ms(1000);
					goto StartRecording;
				} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){							// pause recording
    89d8:	80 91 de 2b 	lds	r24, 0x2BDE
    89dc:	88 23       	and	r24, r24
    89de:	09 f0       	breq	.+2      	; 0x89e2 <main+0x440>
    89e0:	96 c0       	rjmp	.+300    	; 0x8b0e <main+0x56c>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    89e2:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    89e6:	8c 77       	andi	r24, 0x7C	; 124
    89e8:	82 fd       	sbrc	r24, 2
    89ea:	91 c0       	rjmp	.+290    	; 0x8b0e <main+0x56c>
    89ec:	4e c4       	rjmp	.+2204   	; 0x928a <main+0xce8>

					rs232Recording = false;
    89ee:	10 92 b0 2b 	sts	0x2BB0, r1
					recording = false;
    89f2:	10 92 bb 2b 	sts	0x2BBB, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    89f6:	10 92 bf 2b 	sts	0x2BBF, r1
  	temperatureBufferToWriteTo = 1;
    89fa:	81 e0       	ldi	r24, 0x01	; 1
    89fc:	80 93 59 28 	sts	0x2859, r24
	okToSendTemperatureBuffer1 = false;
    8a00:	10 92 bd 2b 	sts	0x2BBD, r1
	okToSendTemperatureBuffer2 = false;
    8a04:	10 92 be 2b 	sts	0x2BBE, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    8a08:	10 92 c5 2b 	sts	0x2BC5, r1
	humidityBufferToWriteTo = 1;
    8a0c:	80 93 5b 28 	sts	0x285B, r24
	okToSendHumidityBuffer1 = false;
    8a10:	10 92 c3 2b 	sts	0x2BC3, r1
	okToSendHumidityBuffer2 = false;
    8a14:	10 92 c4 2b 	sts	0x2BC4, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    8a18:	10 92 c2 2b 	sts	0x2BC2, r1
	pressureBufferToWriteTo = 1;
    8a1c:	80 93 5a 28 	sts	0x285A, r24
	okToSendPressureBuffer1 = false;
    8a20:	10 92 c0 2b 	sts	0x2BC0, r1
	okToSendPressureBuffer2 = false;
    8a24:	10 92 c1 2b 	sts	0x2BC1, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    8a28:	10 92 c8 2b 	sts	0x2BC8, r1
    8a2c:	10 92 c9 2b 	sts	0x2BC9, r1
	microphoneBufferToWriteTo = 1;
    8a30:	80 93 5c 28 	sts	0x285C, r24
	okToSendMicrophoneBuffer1 = false;
    8a34:	10 92 c6 2b 	sts	0x2BC6, r1
	okToSendMicrophoneBuffer2 = false;
    8a38:	10 92 c7 2b 	sts	0x2BC7, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    8a3c:	10 92 cc 2b 	sts	0x2BCC, r1
	lightBufferToWriteTo = 1;
    8a40:	80 93 5d 28 	sts	0x285D, r24
	okToSendLightBuffer1 = false;
    8a44:	10 92 ca 2b 	sts	0x2BCA, r1
	okToSendLightBuffer2 = false;
    8a48:	10 92 cb 2b 	sts	0x2BCB, r1
					Sensors_ResetTemperatureBuffers();
					Sensors_ResetHumidityBuffers();
					Sensors_ResetPressureBuffers();
					Sensors_ResetMicrophoneBuffers();
					Sensors_ResetLightBuffers();
					SD_Close();
    8a4c:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <SD_Close>
					display_putString("Paused           ",0,0,System5x7);
    8a50:	89 ea       	ldi	r24, 0xA9	; 169
    8a52:	96 e2       	ldi	r25, 0x26	; 38
    8a54:	60 e0       	ldi	r22, 0x00	; 0
    8a56:	40 e0       	ldi	r20, 0x00	; 0
    8a58:	2b e6       	ldi	r18, 0x6B	; 107
    8a5a:	39 e2       	ldi	r19, 0x29	; 41
    8a5c:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					display_drawLine(1,60,7,60,true);		// up arrow
    8a60:	81 e0       	ldi	r24, 0x01	; 1
    8a62:	6c e3       	ldi	r22, 0x3C	; 60
    8a64:	47 e0       	ldi	r20, 0x07	; 7
    8a66:	2c e3       	ldi	r18, 0x3C	; 60
    8a68:	01 e0       	ldi	r16, 0x01	; 1
    8a6a:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
					display_drawPixel(2,59,true);
    8a6e:	82 e0       	ldi	r24, 0x02	; 2
    8a70:	6b e3       	ldi	r22, 0x3B	; 59
    8a72:	41 e0       	ldi	r20, 0x01	; 1
    8a74:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,58,true);
    8a78:	83 e0       	ldi	r24, 0x03	; 3
    8a7a:	6a e3       	ldi	r22, 0x3A	; 58
    8a7c:	41 e0       	ldi	r20, 0x01	; 1
    8a7e:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(2,61,true);
    8a82:	82 e0       	ldi	r24, 0x02	; 2
    8a84:	6d e3       	ldi	r22, 0x3D	; 61
    8a86:	41 e0       	ldi	r20, 0x01	; 1
    8a88:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,62,true);
    8a8c:	83 e0       	ldi	r24, 0x03	; 3
    8a8e:	6e e3       	ldi	r22, 0x3E	; 62
    8a90:	41 e0       	ldi	r20, 0x01	; 1
    8a92:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_writeBufferToScreen();
    8a96:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>


					if(demoMode){
    8a9a:	80 91 69 29 	lds	r24, 0x2969
    8a9e:	88 23       	and	r24, r24
    8aa0:	29 f0       	breq	.+10     	; 0x8aac <main+0x50a>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8aa2:	80 e4       	ldi	r24, 0x40	; 64
    8aa4:	e0 e2       	ldi	r30, 0x20	; 32
    8aa6:	f6 e0       	ldi	r31, 0x06	; 6
    8aa8:	85 83       	std	Z+5, r24	; 0x05
    8aaa:	14 c0       	rjmp	.+40     	; 0x8ad4 <main+0x532>
						Leds_Set(wifi_Green);
					} else {
						Wifi_EnterCMDMode(500);
    8aac:	84 ef       	ldi	r24, 0xF4	; 244
    8aae:	91 e0       	ldi	r25, 0x01	; 1
    8ab0:	0e 94 6d 38 	call	0x70da	; 0x70da <Wifi_EnterCMDMode>
						if(Wifi_GetTime(500)){
    8ab4:	84 ef       	ldi	r24, 0xF4	; 244
    8ab6:	91 e0       	ldi	r25, 0x01	; 1
    8ab8:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <Wifi_GetTime>
    8abc:	88 23       	and	r24, r24
    8abe:	11 f0       	breq	.+4      	; 0x8ac4 <main+0x522>
    8ac0:	80 e4       	ldi	r24, 0x40	; 64
    8ac2:	01 c0       	rjmp	.+2      	; 0x8ac6 <main+0x524>
							Leds_Set(wifi_Green);
						} else {
							Leds_Set(wifi_Red);
						}
						Wifi_ExitCMDMode(500);
    8ac4:	80 e8       	ldi	r24, 0x80	; 128
    8ac6:	e0 e2       	ldi	r30, 0x20	; 32
    8ac8:	f6 e0       	ldi	r31, 0x06	; 6
    8aca:	85 83       	std	Z+5, r24	; 0x05
    8acc:	84 ef       	ldi	r24, 0xF4	; 244
    8ace:	91 e0       	ldi	r25, 0x01	; 1
    8ad0:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <Wifi_ExitCMDMode>
    8ad4:	80 91 a8 06 	lds	r24, 0x06A8
    8ad8:	80 ff       	sbrs	r24, 0
    8ada:	dd c3       	rjmp	.+1978   	; 0x9296 <main+0xcf4>
    8adc:	82 e0       	ldi	r24, 0x02	; 2
    8ade:	e0 e2       	ldi	r30, 0x20	; 32
    8ae0:	f6 e0       	ldi	r31, 0x06	; 6
    8ae2:	85 83       	std	Z+5, r24	; 0x05
					if(SD_Inserted()){
						Leds_Set(sd_Green);
					} else {
						Leds_Set(sd_Red);
					}
					if(!chargeComplete && SD2_Inserted()){
    8ae4:	80 91 b4 2b 	lds	r24, 0x2BB4
    8ae8:	88 23       	and	r24, r24
    8aea:	29 f4       	brne	.+10     	; 0x8af6 <main+0x554>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    8aec:	80 91 a8 06 	lds	r24, 0x06A8
    8af0:	81 fd       	sbrc	r24, 1
    8af2:	05 c0       	rjmp	.+10     	; 0x8afe <main+0x55c>
    8af4:	d2 c3       	rjmp	.+1956   	; 0x929a <main+0xcf8>
    8af6:	80 91 a8 06 	lds	r24, 0x06A8
    8afa:	81 ff       	sbrs	r24, 1
    8afc:	d3 c3       	rjmp	.+1958   	; 0x92a4 <main+0xd02>
    8afe:	88 e8       	ldi	r24, 0x88	; 136
    8b00:	93 e1       	ldi	r25, 0x13	; 19
    8b02:	f4 01       	movw	r30, r8
    8b04:	31 97       	sbiw	r30, 0x01	; 1
    8b06:	f1 f7       	brne	.-4      	; 0x8b04 <main+0x562>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b0a:	d9 f7       	brne	.-10     	; 0x8b02 <main+0x560>
    8b0c:	3f c0       	rjmp	.+126    	; 0x8b8c <main+0x5ea>
					}



					_delay_ms(500);
				} else if(currentMode == recordMode && Dpad_CheckButton(Down)){										// go to sensorMode
    8b0e:	80 91 de 2b 	lds	r24, 0x2BDE
    8b12:	88 23       	and	r24, r24
    8b14:	29 f4       	brne	.+10     	; 0x8b20 <main+0x57e>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8b16:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8b1a:	8c 77       	andi	r24, 0x7C	; 124
    8b1c:	83 ff       	sbrs	r24, 3
    8b1e:	c9 c3       	rjmp	.+1938   	; 0x92b2 <main+0xd10>

					currentMode = sensorMode;
					display_clearBuffer();
					display_writeBufferToScreen();
				} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){										// go to recordMode
    8b20:	80 91 de 2b 	lds	r24, 0x2BDE
    8b24:	81 30       	cpi	r24, 0x01	; 1
    8b26:	61 f4       	brne	.+24     	; 0x8b40 <main+0x59e>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8b28:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8b2c:	8c 77       	andi	r24, 0x7C	; 124
    8b2e:	82 fd       	sbrc	r24, 2
    8b30:	07 c0       	rjmp	.+14     	; 0x8b40 <main+0x59e>
    8b32:	c7 c3       	rjmp	.+1934   	; 0x92c2 <main+0xd20>
    8b34:	f4 01       	movw	r30, r8
    8b36:	31 97       	sbiw	r30, 0x01	; 1
    8b38:	f1 f7       	brne	.-4      	; 0x8b36 <main+0x594>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b3c:	d9 f7       	brne	.-10     	; 0x8b34 <main+0x592>
    8b3e:	26 c0       	rjmp	.+76     	; 0x8b8c <main+0x5ea>

					currentMode = recordMode;
					display_clearBuffer();
					display_writeBufferToScreen();
					_delay_ms(400);
				} else if(currentMode == recordMode && !recording && !SD_Inserted()){											// dont allow to start recording
    8b40:	80 91 de 2b 	lds	r24, 0x2BDE
    8b44:	88 23       	and	r24, r24
    8b46:	79 f4       	brne	.+30     	; 0x8b66 <main+0x5c4>
    8b48:	80 91 bb 2b 	lds	r24, 0x2BBB
    8b4c:	88 23       	and	r24, r24
    8b4e:	59 f4       	brne	.+22     	; 0x8b66 <main+0x5c4>
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8b50:	80 91 a8 06 	lds	r24, 0x06A8
    8b54:	80 ff       	sbrs	r24, 0
    8b56:	07 c0       	rjmp	.+14     	; 0x8b66 <main+0x5c4>
    8b58:	e0 e2       	ldi	r30, 0x20	; 32
    8b5a:	f6 e0       	ldi	r31, 0x06	; 6
    8b5c:	82 e0       	ldi	r24, 0x02	; 2
    8b5e:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8b60:	81 e0       	ldi	r24, 0x01	; 1
    8b62:	86 83       	std	Z+6, r24	; 0x06
    8b64:	13 c0       	rjmp	.+38     	; 0x8b8c <main+0x5ea>
					Leds_Set(sd_Red);
					Leds_Clear(sd_Green);
				} else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up)){
    8b66:	80 91 de 2b 	lds	r24, 0x2BDE
    8b6a:	88 23       	and	r24, r24
    8b6c:	79 f4       	brne	.+30     	; 0x8b8c <main+0x5ea>
    8b6e:	80 91 bb 2b 	lds	r24, 0x2BBB
    8b72:	88 23       	and	r24, r24
    8b74:	59 f4       	brne	.+22     	; 0x8b8c <main+0x5ea>
    8b76:	80 91 a8 06 	lds	r24, 0x06A8
    8b7a:	80 fd       	sbrc	r24, 0
    8b7c:	07 c0       	rjmp	.+14     	; 0x8b8c <main+0x5ea>
    8b7e:	aa c3       	rjmp	.+1876   	; 0x92d4 <main+0xd32>
    8b80:	e0 e2       	ldi	r30, 0x20	; 32
    8b82:	f6 e0       	ldi	r31, 0x06	; 6
    8b84:	82 e0       	ldi	r24, 0x02	; 2
    8b86:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8b88:	81 e0       	ldi	r24, 0x01	; 1
    8b8a:	85 83       	std	Z+5, r24	; 0x05
					Leds_Set(sd_Green);
				}

				// load displays

				if(currentMode == recordMode){																		// show record screen
    8b8c:	80 91 de 2b 	lds	r24, 0x2BDE
    8b90:	88 23       	and	r24, r24
    8b92:	09 f0       	breq	.+2      	; 0x8b96 <main+0x5f4>
    8b94:	ca c1       	rjmp	.+916    	; 0x8f2a <main+0x988>

					if(recording){
    8b96:	80 91 bb 2b 	lds	r24, 0x2BBB
    8b9a:	88 23       	and	r24, r24
    8b9c:	e1 f1       	breq	.+120    	; 0x8c16 <main+0x674>
						sprintf(temp, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    8b9e:	60 91 b6 2b 	lds	r22, 0x2BB6
    8ba2:	70 91 b7 2b 	lds	r23, 0x2BB7
    8ba6:	80 91 b8 2b 	lds	r24, 0x2BB8
    8baa:	90 91 b9 2b 	lds	r25, 0x2BB9
    8bae:	ad b7       	in	r26, 0x3d	; 61
    8bb0:	be b7       	in	r27, 0x3e	; 62
    8bb2:	18 97       	sbiw	r26, 0x08	; 8
    8bb4:	ad bf       	out	0x3d, r26	; 61
    8bb6:	be bf       	out	0x3e, r27	; 62
    8bb8:	0d b7       	in	r16, 0x3d	; 61
    8bba:	1e b7       	in	r17, 0x3e	; 62
    8bbc:	0f 5f       	subi	r16, 0xFF	; 255
    8bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    8bc0:	11 96       	adiw	r26, 0x01	; 1
    8bc2:	ad 92       	st	X+, r10
    8bc4:	bc 92       	st	X, r11
    8bc6:	12 97       	sbiw	r26, 0x02	; 2
    8bc8:	2b eb       	ldi	r18, 0xBB	; 187
    8bca:	36 e2       	ldi	r19, 0x26	; 38
    8bcc:	f8 01       	movw	r30, r16
    8bce:	22 83       	std	Z+2, r18	; 0x02
    8bd0:	33 83       	std	Z+3, r19	; 0x03
    8bd2:	20 91 8a 2b 	lds	r18, 0x2B8A
    8bd6:	30 91 8b 2b 	lds	r19, 0x2B8B
    8bda:	40 91 8c 2b 	lds	r20, 0x2B8C
    8bde:	50 91 8d 2b 	lds	r21, 0x2B8D
    8be2:	62 1b       	sub	r22, r18
    8be4:	73 0b       	sbc	r23, r19
    8be6:	84 0b       	sbc	r24, r20
    8be8:	95 0b       	sbc	r25, r21
    8bea:	2c e3       	ldi	r18, 0x3C	; 60
    8bec:	30 e0       	ldi	r19, 0x00	; 0
    8bee:	40 e0       	ldi	r20, 0x00	; 0
    8bf0:	50 e0       	ldi	r21, 0x00	; 0
    8bf2:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    8bf6:	d8 01       	movw	r26, r16
    8bf8:	14 96       	adiw	r26, 0x04	; 4
    8bfa:	2d 93       	st	X+, r18
    8bfc:	3d 93       	st	X+, r19
    8bfe:	4d 93       	st	X+, r20
    8c00:	5c 93       	st	X, r21
    8c02:	17 97       	sbiw	r26, 0x07	; 7
    8c04:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
						display_putString(temp,0,0,System5x7);
    8c08:	ed b7       	in	r30, 0x3d	; 61
    8c0a:	fe b7       	in	r31, 0x3e	; 62
    8c0c:	38 96       	adiw	r30, 0x08	; 8
    8c0e:	ed bf       	out	0x3d, r30	; 61
    8c10:	fe bf       	out	0x3e, r31	; 62
    8c12:	c5 01       	movw	r24, r10
    8c14:	02 c0       	rjmp	.+4      	; 0x8c1a <main+0x678>
					} else {
						display_putString("Paused           ",0,0,System5x7);
    8c16:	89 ea       	ldi	r24, 0xA9	; 169
    8c18:	96 e2       	ldi	r25, 0x26	; 38
    8c1a:	60 e0       	ldi	r22, 0x00	; 0
    8c1c:	40 e0       	ldi	r20, 0x00	; 0
    8c1e:	2b e6       	ldi	r18, 0x6B	; 107
    8c20:	39 e2       	ldi	r19, 0x29	; 41
    8c22:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					}

					display_drawLine(1,60,7,60,true);		// up arrow
    8c26:	81 e0       	ldi	r24, 0x01	; 1
    8c28:	6c e3       	ldi	r22, 0x3C	; 60
    8c2a:	47 e0       	ldi	r20, 0x07	; 7
    8c2c:	2c e3       	ldi	r18, 0x3C	; 60
    8c2e:	01 e0       	ldi	r16, 0x01	; 1
    8c30:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
					display_drawPixel(2,59,true);
    8c34:	82 e0       	ldi	r24, 0x02	; 2
    8c36:	6b e3       	ldi	r22, 0x3B	; 59
    8c38:	41 e0       	ldi	r20, 0x01	; 1
    8c3a:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,58,true);
    8c3e:	83 e0       	ldi	r24, 0x03	; 3
    8c40:	6a e3       	ldi	r22, 0x3A	; 58
    8c42:	41 e0       	ldi	r20, 0x01	; 1
    8c44:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(2,61,true);
    8c48:	82 e0       	ldi	r24, 0x02	; 2
    8c4a:	6d e3       	ldi	r22, 0x3D	; 61
    8c4c:	41 e0       	ldi	r20, 0x01	; 1
    8c4e:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,62,true);
    8c52:	83 e0       	ldi	r24, 0x03	; 3
    8c54:	6e e3       	ldi	r22, 0x3E	; 62
    8c56:	41 e0       	ldi	r20, 0x01	; 1
    8c58:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>

					sprintf(temp, "Uploading    %3u", uploadPercentBS);
    8c5c:	00 d0       	rcall	.+0      	; 0x8c5e <main+0x6bc>
    8c5e:	00 d0       	rcall	.+0      	; 0x8c60 <main+0x6be>
    8c60:	ed b7       	in	r30, 0x3d	; 61
    8c62:	fe b7       	in	r31, 0x3e	; 62
    8c64:	31 96       	adiw	r30, 0x01	; 1
    8c66:	ad b7       	in	r26, 0x3d	; 61
    8c68:	be b7       	in	r27, 0x3e	; 62
    8c6a:	11 96       	adiw	r26, 0x01	; 1
    8c6c:	ad 92       	st	X+, r10
    8c6e:	bc 92       	st	X, r11
    8c70:	12 97       	sbiw	r26, 0x02	; 2
    8c72:	62 82       	std	Z+2, r6	; 0x02
    8c74:	73 82       	std	Z+3, r7	; 0x03
    8c76:	80 91 e1 2b 	lds	r24, 0x2BE1
    8c7a:	84 83       	std	Z+4, r24	; 0x04
    8c7c:	15 82       	std	Z+5, r1	; 0x05
    8c7e:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					strcat(temp,"%");
    8c82:	ed b7       	in	r30, 0x3d	; 61
    8c84:	fe b7       	in	r31, 0x3e	; 62
    8c86:	36 96       	adiw	r30, 0x06	; 6
    8c88:	ed bf       	out	0x3d, r30	; 61
    8c8a:	fe bf       	out	0x3e, r31	; 62
    8c8c:	c5 01       	movw	r24, r10
    8c8e:	6e ed       	ldi	r22, 0xDE	; 222
    8c90:	76 e2       	ldi	r23, 0x26	; 38
    8c92:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
					display_putString(temp,1,0,System5x7);
    8c96:	c5 01       	movw	r24, r10
    8c98:	61 e0       	ldi	r22, 0x01	; 1
    8c9a:	40 e0       	ldi	r20, 0x00	; 0
    8c9c:	2b e6       	ldi	r18, 0x6B	; 107
    8c9e:	39 e2       	ldi	r19, 0x29	; 41
    8ca0:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>



					if(chargePercent == 100){
    8ca4:	80 91 b1 2b 	lds	r24, 0x2BB1
    8ca8:	84 36       	cpi	r24, 0x64	; 100
    8caa:	29 f4       	brne	.+10     	; 0x8cb6 <main+0x714>
						chargeComplete = true;
    8cac:	81 e0       	ldi	r24, 0x01	; 1
    8cae:	80 93 b4 2b 	sts	0x2BB4, r24
						okToCharge  = false;
    8cb2:	10 92 b5 2b 	sts	0x2BB5, r1
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    8cb6:	80 91 a8 06 	lds	r24, 0x06A8
    8cba:	81 fd       	sbrc	r24, 1
    8cbc:	13 c0       	rjmp	.+38     	; 0x8ce4 <main+0x742>
    8cbe:	10 c3       	rjmp	.+1568   	; 0x92e0 <main+0xd3e>
					}


					if(SD2_Inserted() && chargeComplete){
						display_putString("Ext Charged      ",3,0,System5x7);
    8cc0:	80 ee       	ldi	r24, 0xE0	; 224
    8cc2:	96 e2       	ldi	r25, 0x26	; 38
    8cc4:	63 e0       	ldi	r22, 0x03	; 3
    8cc6:	40 e0       	ldi	r20, 0x00	; 0
    8cc8:	2b e6       	ldi	r18, 0x6B	; 107
    8cca:	39 e2       	ldi	r19, 0x29	; 41
    8ccc:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
						if(!recording){
    8cd0:	80 91 bb 2b 	lds	r24, 0x2BBB
    8cd4:	88 23       	and	r24, r24
    8cd6:	09 f0       	breq	.+2      	; 0x8cda <main+0x738>
    8cd8:	6e c0       	rjmp	.+220    	; 0x8db6 <main+0x814>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8cda:	e0 e2       	ldi	r30, 0x20	; 32
    8cdc:	f6 e0       	ldi	r31, 0x06	; 6
    8cde:	80 e2       	ldi	r24, 0x20	; 32
    8ce0:	86 83       	std	Z+6, r24	; 0x06
    8ce2:	52 c0       	rjmp	.+164    	; 0x8d88 <main+0x7e6>
    8ce4:	80 91 a8 06 	lds	r24, 0x06A8
    8ce8:	81 fd       	sbrc	r24, 1
    8cea:	51 c0       	rjmp	.+162    	; 0x8d8e <main+0x7ec>
    8cec:	ff c2       	rjmp	.+1534   	; 0x92ec <main+0xd4a>
							Leds_Clear(ext_Red);
							Leds_Set(ext_Green);
						}
					} else if(SD2_Inserted() && !chargeComplete){
						sprintf(temp, "Ext Charging  %2u",chargePercent);
    8cee:	00 d0       	rcall	.+0      	; 0x8cf0 <main+0x74e>
    8cf0:	00 d0       	rcall	.+0      	; 0x8cf2 <main+0x750>
    8cf2:	ed b7       	in	r30, 0x3d	; 61
    8cf4:	fe b7       	in	r31, 0x3e	; 62
    8cf6:	31 96       	adiw	r30, 0x01	; 1
    8cf8:	ad b7       	in	r26, 0x3d	; 61
    8cfa:	be b7       	in	r27, 0x3e	; 62
    8cfc:	11 96       	adiw	r26, 0x01	; 1
    8cfe:	ad 92       	st	X+, r10
    8d00:	bc 92       	st	X, r11
    8d02:	12 97       	sbiw	r26, 0x02	; 2
    8d04:	22 ef       	ldi	r18, 0xF2	; 242
    8d06:	36 e2       	ldi	r19, 0x26	; 38
    8d08:	22 83       	std	Z+2, r18	; 0x02
    8d0a:	33 83       	std	Z+3, r19	; 0x03
    8d0c:	80 91 b1 2b 	lds	r24, 0x2BB1
    8d10:	84 83       	std	Z+4, r24	; 0x04
    8d12:	15 82       	std	Z+5, r1	; 0x05
    8d14:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
						strcat(temp,"%");
    8d18:	8d b7       	in	r24, 0x3d	; 61
    8d1a:	9e b7       	in	r25, 0x3e	; 62
    8d1c:	06 96       	adiw	r24, 0x06	; 6
    8d1e:	8d bf       	out	0x3d, r24	; 61
    8d20:	9e bf       	out	0x3e, r25	; 62
    8d22:	c5 01       	movw	r24, r10
    8d24:	6e ed       	ldi	r22, 0xDE	; 222
    8d26:	76 e2       	ldi	r23, 0x26	; 38
    8d28:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
						display_putString(temp,3,0,System5x7);
    8d2c:	c5 01       	movw	r24, r10
    8d2e:	63 e0       	ldi	r22, 0x03	; 3
    8d30:	40 e0       	ldi	r20, 0x00	; 0
    8d32:	2b e6       	ldi	r18, 0x6B	; 107
    8d34:	39 e2       	ldi	r19, 0x29	; 41
    8d36:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
						okToCharge = true;
    8d3a:	11 e0       	ldi	r17, 0x01	; 1
    8d3c:	10 93 b5 2b 	sts	0x2BB5, r17
						if(!rtcSynced){
    8d40:	80 91 e3 2b 	lds	r24, 0x2BE3
    8d44:	88 23       	and	r24, r24
    8d46:	c1 f4       	brne	.+48     	; 0x8d78 <main+0x7d6>
							Debug_SendString("Syncing RTC", true);
    8d48:	84 e0       	ldi	r24, 0x04	; 4
    8d4a:	97 e2       	ldi	r25, 0x27	; 39
    8d4c:	61 e0       	ldi	r22, 0x01	; 1
    8d4e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
							RTC_init();
    8d52:	0e 94 ab 32 	call	0x6556	; 0x6556 <RTC_init>
							RTC_setUTCSecs(UNIX_time);
    8d56:	60 91 b6 2b 	lds	r22, 0x2BB6
    8d5a:	70 91 b7 2b 	lds	r23, 0x2BB7
    8d5e:	80 91 b8 2b 	lds	r24, 0x2BB8
    8d62:	90 91 b9 2b 	lds	r25, 0x2BB9
    8d66:	0e 94 a4 32 	call	0x6548	; 0x6548 <RTC_setUTCSecs>
							rtcSynced = true;
    8d6a:	10 93 e3 2b 	sts	0x2BE3, r17
							Debug_SendString("RTC synced", true);
    8d6e:	80 e1       	ldi	r24, 0x10	; 16
    8d70:	97 e2       	ldi	r25, 0x27	; 39
    8d72:	61 e0       	ldi	r22, 0x01	; 1
    8d74:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
						}
						if(!recording){
    8d78:	80 91 bb 2b 	lds	r24, 0x2BBB
    8d7c:	88 23       	and	r24, r24
    8d7e:	d9 f4       	brne	.+54     	; 0x8db6 <main+0x814>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8d80:	e0 e2       	ldi	r30, 0x20	; 32
    8d82:	f6 e0       	ldi	r31, 0x06	; 6
    8d84:	80 e2       	ldi	r24, 0x20	; 32
    8d86:	85 83       	std	Z+5, r24	; 0x05
							Leds_Set(ext_Red);
							Leds_Set(ext_Green);
						}
					}else{
						display_putString("Ext Removed      ",3,0,System5x7);
    8d88:	80 e1       	ldi	r24, 0x10	; 16
    8d8a:	85 83       	std	Z+5, r24	; 0x05
    8d8c:	14 c0       	rjmp	.+40     	; 0x8db6 <main+0x814>
    8d8e:	8b e1       	ldi	r24, 0x1B	; 27
    8d90:	97 e2       	ldi	r25, 0x27	; 39
    8d92:	63 e0       	ldi	r22, 0x03	; 3
    8d94:	40 e0       	ldi	r20, 0x00	; 0
    8d96:	2b e6       	ldi	r18, 0x6B	; 107
    8d98:	39 e2       	ldi	r19, 0x29	; 41
    8d9a:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
						chargePercent = 0;
    8d9e:	10 92 b1 2b 	sts	0x2BB1, r1
						chargeComplete = false;
    8da2:	10 92 b4 2b 	sts	0x2BB4, r1
						rtcSynced = false;
    8da6:	10 92 e3 2b 	sts	0x2BE3, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8daa:	e0 e2       	ldi	r30, 0x20	; 32
    8dac:	f6 e0       	ldi	r31, 0x06	; 6
    8dae:	80 e2       	ldi	r24, 0x20	; 32
    8db0:	86 83       	std	Z+6, r24	; 0x06





					sprintf(temp, "Uploading    %3u", uploadPercentEXT);
    8db2:	80 e1       	ldi	r24, 0x10	; 16
    8db4:	86 83       	std	Z+6, r24	; 0x06
    8db6:	00 d0       	rcall	.+0      	; 0x8db8 <main+0x816>
    8db8:	00 d0       	rcall	.+0      	; 0x8dba <main+0x818>
    8dba:	ed b7       	in	r30, 0x3d	; 61
    8dbc:	fe b7       	in	r31, 0x3e	; 62
    8dbe:	31 96       	adiw	r30, 0x01	; 1
    8dc0:	ad b7       	in	r26, 0x3d	; 61
    8dc2:	be b7       	in	r27, 0x3e	; 62
    8dc4:	11 96       	adiw	r26, 0x01	; 1
    8dc6:	ad 92       	st	X+, r10
    8dc8:	bc 92       	st	X, r11
    8dca:	12 97       	sbiw	r26, 0x02	; 2
    8dcc:	62 82       	std	Z+2, r6	; 0x02
    8dce:	73 82       	std	Z+3, r7	; 0x03
    8dd0:	80 91 e2 2b 	lds	r24, 0x2BE2
    8dd4:	84 83       	std	Z+4, r24	; 0x04
    8dd6:	15 82       	std	Z+5, r1	; 0x05
    8dd8:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					strcat(temp,"%");
    8ddc:	ed b7       	in	r30, 0x3d	; 61
    8dde:	fe b7       	in	r31, 0x3e	; 62
    8de0:	36 96       	adiw	r30, 0x06	; 6
    8de2:	ed bf       	out	0x3d, r30	; 61
    8de4:	fe bf       	out	0x3e, r31	; 62
    8de6:	c5 01       	movw	r24, r10
    8de8:	6e ed       	ldi	r22, 0xDE	; 222
    8dea:	76 e2       	ldi	r23, 0x26	; 38
    8dec:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
					display_putString(temp,4,0,System5x7);
    8df0:	c5 01       	movw	r24, r10
    8df2:	64 e0       	ldi	r22, 0x04	; 4
    8df4:	40 e0       	ldi	r20, 0x00	; 0
    8df6:	2b e6       	ldi	r18, 0x6B	; 107
    8df8:	39 e2       	ldi	r19, 0x29	; 41
    8dfa:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>

					RTC_UTCSecsToTime(UNIX_time,&time);
    8dfe:	60 91 b6 2b 	lds	r22, 0x2BB6
    8e02:	70 91 b7 2b 	lds	r23, 0x2BB7
    8e06:	80 91 b8 2b 	lds	r24, 0x2BB8
    8e0a:	90 91 b9 2b 	lds	r25, 0x2BB9
    8e0e:	46 e1       	ldi	r20, 0x16	; 22
    8e10:	50 e4       	ldi	r21, 0x40	; 64
    8e12:	0e 94 16 30 	call	0x602c	; 0x602c <RTC_UTCSecsToTime>
					clockHour = time.Hour + 24;
    8e16:	90 91 19 40 	lds	r25, 0x4019
    8e1a:	98 5e       	subi	r25, 0xE8	; 232
					clockHour -= timeZoneShift;
    8e1c:	80 91 dc 2b 	lds	r24, 0x2BDC
    8e20:	98 1b       	sub	r25, r24
    8e22:	90 93 dd 2b 	sts	0x2BDD, r25
					if(clockHour > 24){
    8e26:	99 31       	cpi	r25, 0x19	; 25
    8e28:	18 f0       	brcs	.+6      	; 0x8e30 <main+0x88e>
						clockHour -= 24;
    8e2a:	98 51       	subi	r25, 0x18	; 24
    8e2c:	90 93 dd 2b 	sts	0x2BDD, r25
					}

					sprintf(temp,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    8e30:	2d b7       	in	r18, 0x3d	; 61
    8e32:	3e b7       	in	r19, 0x3e	; 62
    8e34:	2a 50       	subi	r18, 0x0A	; 10
    8e36:	30 40       	sbci	r19, 0x00	; 0
    8e38:	2d bf       	out	0x3d, r18	; 61
    8e3a:	3e bf       	out	0x3e, r19	; 62
    8e3c:	ed b7       	in	r30, 0x3d	; 61
    8e3e:	fe b7       	in	r31, 0x3e	; 62
    8e40:	31 96       	adiw	r30, 0x01	; 1
    8e42:	ad b7       	in	r26, 0x3d	; 61
    8e44:	be b7       	in	r27, 0x3e	; 62
    8e46:	11 96       	adiw	r26, 0x01	; 1
    8e48:	ad 92       	st	X+, r10
    8e4a:	bc 92       	st	X, r11
    8e4c:	12 97       	sbiw	r26, 0x02	; 2
    8e4e:	2d e2       	ldi	r18, 0x2D	; 45
    8e50:	37 e2       	ldi	r19, 0x27	; 39
    8e52:	22 83       	std	Z+2, r18	; 0x02
    8e54:	33 83       	std	Z+3, r19	; 0x03
    8e56:	80 91 dd 2b 	lds	r24, 0x2BDD
    8e5a:	84 83       	std	Z+4, r24	; 0x04
    8e5c:	15 82       	std	Z+5, r1	; 0x05
    8e5e:	80 91 18 40 	lds	r24, 0x4018
    8e62:	86 83       	std	Z+6, r24	; 0x06
    8e64:	17 82       	std	Z+7, r1	; 0x07
    8e66:	80 91 17 40 	lds	r24, 0x4017
    8e6a:	80 87       	std	Z+8, r24	; 0x08
    8e6c:	11 86       	std	Z+9, r1	; 0x09
    8e6e:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					strcat(temp,zone);
    8e72:	8d b7       	in	r24, 0x3d	; 61
    8e74:	9e b7       	in	r25, 0x3e	; 62
    8e76:	0a 96       	adiw	r24, 0x0a	; 10
    8e78:	8d bf       	out	0x3d, r24	; 61
    8e7a:	9e bf       	out	0x3e, r25	; 62
    8e7c:	c5 01       	movw	r24, r10
    8e7e:	6e e5       	ldi	r22, 0x5E	; 94
    8e80:	79 e2       	ldi	r23, 0x29	; 41
    8e82:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
					display_putString(temp,6,0,System5x7);
    8e86:	c5 01       	movw	r24, r10
    8e88:	66 e0       	ldi	r22, 0x06	; 6
    8e8a:	40 e0       	ldi	r20, 0x00	; 0
    8e8c:	2b e6       	ldi	r18, 0x6B	; 107
    8e8e:	39 e2       	ldi	r19, 0x29	; 41
    8e90:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>

					sprintf(temp, "Wifi %3u",signalStrength);
    8e94:	00 d0       	rcall	.+0      	; 0x8e96 <main+0x8f4>
    8e96:	00 d0       	rcall	.+0      	; 0x8e98 <main+0x8f6>
    8e98:	ed b7       	in	r30, 0x3d	; 61
    8e9a:	fe b7       	in	r31, 0x3e	; 62
    8e9c:	31 96       	adiw	r30, 0x01	; 1
    8e9e:	ad b7       	in	r26, 0x3d	; 61
    8ea0:	be b7       	in	r27, 0x3e	; 62
    8ea2:	11 96       	adiw	r26, 0x01	; 1
    8ea4:	ad 92       	st	X+, r10
    8ea6:	bc 92       	st	X, r11
    8ea8:	12 97       	sbiw	r26, 0x02	; 2
    8eaa:	21 e4       	ldi	r18, 0x41	; 65
    8eac:	37 e2       	ldi	r19, 0x27	; 39
    8eae:	22 83       	std	Z+2, r18	; 0x02
    8eb0:	33 83       	std	Z+3, r19	; 0x03
    8eb2:	80 91 e0 2b 	lds	r24, 0x2BE0
    8eb6:	84 83       	std	Z+4, r24	; 0x04
    8eb8:	15 82       	std	Z+5, r1	; 0x05
    8eba:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					strcat(temp,"%   more");
    8ebe:	8d b7       	in	r24, 0x3d	; 61
    8ec0:	9e b7       	in	r25, 0x3e	; 62
    8ec2:	06 96       	adiw	r24, 0x06	; 6
    8ec4:	8d bf       	out	0x3d, r24	; 61
    8ec6:	9e bf       	out	0x3e, r25	; 62
    8ec8:	c5 01       	movw	r24, r10
    8eca:	6a e4       	ldi	r22, 0x4A	; 74
    8ecc:	77 e2       	ldi	r23, 0x27	; 39
    8ece:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
					display_putString(temp,7,0,System5x7);
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	67 e0       	ldi	r22, 0x07	; 7
    8ed6:	40 e0       	ldi	r20, 0x00	; 0
    8ed8:	2b e6       	ldi	r18, 0x6B	; 107
    8eda:	39 e2       	ldi	r19, 0x29	; 41
    8edc:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>


					display_drawLine(56,98,63,98,true);		// down arrow
    8ee0:	88 e3       	ldi	r24, 0x38	; 56
    8ee2:	62 e6       	ldi	r22, 0x62	; 98
    8ee4:	4f e3       	ldi	r20, 0x3F	; 63
    8ee6:	22 e6       	ldi	r18, 0x62	; 98
    8ee8:	01 e0       	ldi	r16, 0x01	; 1
    8eea:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
					display_drawPixel(62,97,true);
    8eee:	8e e3       	ldi	r24, 0x3E	; 62
    8ef0:	61 e6       	ldi	r22, 0x61	; 97
    8ef2:	41 e0       	ldi	r20, 0x01	; 1
    8ef4:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(61,96,true);
    8ef8:	8d e3       	ldi	r24, 0x3D	; 61
    8efa:	60 e6       	ldi	r22, 0x60	; 96
    8efc:	41 e0       	ldi	r20, 0x01	; 1
    8efe:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(62,99,true);
    8f02:	8e e3       	ldi	r24, 0x3E	; 62
    8f04:	63 e6       	ldi	r22, 0x63	; 99
    8f06:	41 e0       	ldi	r20, 0x01	; 1
    8f08:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(61,100,true);
    8f0c:	8d e3       	ldi	r24, 0x3D	; 61
    8f0e:	64 e6       	ldi	r22, 0x64	; 100
    8f10:	41 e0       	ldi	r20, 0x01	; 1
    8f12:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>

					display_writeBufferToScreen();
    8f16:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    8f1a:	84 ef       	ldi	r24, 0xF4	; 244
    8f1c:	91 e0       	ldi	r25, 0x01	; 1
    8f1e:	f4 01       	movw	r30, r8
    8f20:	31 97       	sbiw	r30, 0x01	; 1
    8f22:	f1 f7       	brne	.-4      	; 0x8f20 <main+0x97e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8f24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8f26:	d9 f7       	brne	.-10     	; 0x8f1e <main+0x97c>
    8f28:	f8 cc       	rjmp	.-1552   	; 0x891a <main+0x378>





				} else if(currentMode == sensorMode){																// show sensor screen
    8f2a:	80 91 de 2b 	lds	r24, 0x2BDE
    8f2e:	81 30       	cpi	r24, 0x01	; 1
    8f30:	09 f0       	breq	.+2      	; 0x8f34 <main+0x992>
    8f32:	f3 cc       	rjmp	.-1562   	; 0x891a <main+0x378>

					display_clearBuffer();
    8f34:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
					display_putString("   Sensors  back",0,0,System5x7);
    8f38:	83 e5       	ldi	r24, 0x53	; 83
    8f3a:	97 e2       	ldi	r25, 0x27	; 39
    8f3c:	60 e0       	ldi	r22, 0x00	; 0
    8f3e:	40 e0       	ldi	r20, 0x00	; 0
    8f40:	2b e6       	ldi	r18, 0x6B	; 107
    8f42:	39 e2       	ldi	r19, 0x29	; 41
    8f44:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					display_drawLine(8, 15, 8,61,true);
    8f48:	88 e0       	ldi	r24, 0x08	; 8
    8f4a:	6f e0       	ldi	r22, 0x0F	; 15
    8f4c:	48 e0       	ldi	r20, 0x08	; 8
    8f4e:	2d e3       	ldi	r18, 0x3D	; 61
    8f50:	01 e0       	ldi	r16, 0x01	; 1
    8f52:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>

					display_drawLine(1,99,7,99,true);		// up arrow
    8f56:	81 e0       	ldi	r24, 0x01	; 1
    8f58:	63 e6       	ldi	r22, 0x63	; 99
    8f5a:	47 e0       	ldi	r20, 0x07	; 7
    8f5c:	23 e6       	ldi	r18, 0x63	; 99
    8f5e:	0e 94 33 29 	call	0x5266	; 0x5266 <display_drawLine>
					display_drawPixel(2,98,true);
    8f62:	82 e0       	ldi	r24, 0x02	; 2
    8f64:	62 e6       	ldi	r22, 0x62	; 98
    8f66:	41 e0       	ldi	r20, 0x01	; 1
    8f68:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,97,true);
    8f6c:	83 e0       	ldi	r24, 0x03	; 3
    8f6e:	61 e6       	ldi	r22, 0x61	; 97
    8f70:	41 e0       	ldi	r20, 0x01	; 1
    8f72:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(2,100,true);
    8f76:	82 e0       	ldi	r24, 0x02	; 2
    8f78:	64 e6       	ldi	r22, 0x64	; 100
    8f7a:	41 e0       	ldi	r20, 0x01	; 1
    8f7c:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>
					display_drawPixel(3,101,true);
    8f80:	83 e0       	ldi	r24, 0x03	; 3
    8f82:	65 e6       	ldi	r22, 0x65	; 101
    8f84:	41 e0       	ldi	r20, 0x01	; 1
    8f86:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <display_drawPixel>


					sprintf(temp,"Temperature: %3uC", quickTemperature);
    8f8a:	00 d0       	rcall	.+0      	; 0x8f8c <main+0x9ea>
    8f8c:	00 d0       	rcall	.+0      	; 0x8f8e <main+0x9ec>
    8f8e:	ed b7       	in	r30, 0x3d	; 61
    8f90:	fe b7       	in	r31, 0x3e	; 62
    8f92:	31 96       	adiw	r30, 0x01	; 1
    8f94:	ad b7       	in	r26, 0x3d	; 61
    8f96:	be b7       	in	r27, 0x3e	; 62
    8f98:	11 96       	adiw	r26, 0x01	; 1
    8f9a:	ad 92       	st	X+, r10
    8f9c:	bc 92       	st	X, r11
    8f9e:	12 97       	sbiw	r26, 0x02	; 2
    8fa0:	24 e6       	ldi	r18, 0x64	; 100
    8fa2:	37 e2       	ldi	r19, 0x27	; 39
    8fa4:	22 83       	std	Z+2, r18	; 0x02
    8fa6:	33 83       	std	Z+3, r19	; 0x03
    8fa8:	80 91 cf 2b 	lds	r24, 0x2BCF
    8fac:	84 83       	std	Z+4, r24	; 0x04
    8fae:	15 82       	std	Z+5, r1	; 0x05
    8fb0:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					display_putString(temp,2,0,System5x7);
    8fb4:	8d b7       	in	r24, 0x3d	; 61
    8fb6:	9e b7       	in	r25, 0x3e	; 62
    8fb8:	06 96       	adiw	r24, 0x06	; 6
    8fba:	8d bf       	out	0x3d, r24	; 61
    8fbc:	9e bf       	out	0x3e, r25	; 62
    8fbe:	c5 01       	movw	r24, r10
    8fc0:	62 e0       	ldi	r22, 0x02	; 2
    8fc2:	40 e0       	ldi	r20, 0x00	; 0
    8fc4:	2b e6       	ldi	r18, 0x6B	; 107
    8fc6:	39 e2       	ldi	r19, 0x29	; 41
    8fc8:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					sprintf(temp,"Humidity:  %3u", quickHumidity);
    8fcc:	00 d0       	rcall	.+0      	; 0x8fce <main+0xa2c>
    8fce:	00 d0       	rcall	.+0      	; 0x8fd0 <main+0xa2e>
    8fd0:	ed b7       	in	r30, 0x3d	; 61
    8fd2:	fe b7       	in	r31, 0x3e	; 62
    8fd4:	31 96       	adiw	r30, 0x01	; 1
    8fd6:	ad b7       	in	r26, 0x3d	; 61
    8fd8:	be b7       	in	r27, 0x3e	; 62
    8fda:	11 96       	adiw	r26, 0x01	; 1
    8fdc:	ad 92       	st	X+, r10
    8fde:	bc 92       	st	X, r11
    8fe0:	12 97       	sbiw	r26, 0x02	; 2
    8fe2:	42 82       	std	Z+2, r4	; 0x02
    8fe4:	53 82       	std	Z+3, r5	; 0x03
    8fe6:	80 91 d0 2b 	lds	r24, 0x2BD0
    8fea:	84 83       	std	Z+4, r24	; 0x04
    8fec:	15 82       	std	Z+5, r1	; 0x05
    8fee:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					strcat(temp, "%RH");
    8ff2:	ed b7       	in	r30, 0x3d	; 61
    8ff4:	fe b7       	in	r31, 0x3e	; 62
    8ff6:	36 96       	adiw	r30, 0x06	; 6
    8ff8:	ed bf       	out	0x3d, r30	; 61
    8ffa:	fe bf       	out	0x3e, r31	; 62
    8ffc:	c5 01       	movw	r24, r10
    8ffe:	65 e8       	ldi	r22, 0x85	; 133
    9000:	77 e2       	ldi	r23, 0x27	; 39
    9002:	0e 94 46 4a 	call	0x948c	; 0x948c <strcat>
					display_putString(temp,3,0,System5x7);
    9006:	c5 01       	movw	r24, r10
    9008:	63 e0       	ldi	r22, 0x03	; 3
    900a:	40 e0       	ldi	r20, 0x00	; 0
    900c:	2b e6       	ldi	r18, 0x6B	; 107
    900e:	39 e2       	ldi	r19, 0x29	; 41
    9010:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					sprintf(temp,"Pressure:  %3ukPa", quickPressure);
    9014:	00 d0       	rcall	.+0      	; 0x9016 <main+0xa74>
    9016:	00 d0       	rcall	.+0      	; 0x9018 <main+0xa76>
    9018:	ed b7       	in	r30, 0x3d	; 61
    901a:	fe b7       	in	r31, 0x3e	; 62
    901c:	31 96       	adiw	r30, 0x01	; 1
    901e:	ad b7       	in	r26, 0x3d	; 61
    9020:	be b7       	in	r27, 0x3e	; 62
    9022:	11 96       	adiw	r26, 0x01	; 1
    9024:	ad 92       	st	X+, r10
    9026:	bc 92       	st	X, r11
    9028:	12 97       	sbiw	r26, 0x02	; 2
    902a:	22 82       	std	Z+2, r2	; 0x02
    902c:	33 82       	std	Z+3, r3	; 0x03
    902e:	80 91 d1 2b 	lds	r24, 0x2BD1
    9032:	84 83       	std	Z+4, r24	; 0x04
    9034:	15 82       	std	Z+5, r1	; 0x05
    9036:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					display_putString(temp,4,0,System5x7);
    903a:	ed b7       	in	r30, 0x3d	; 61
    903c:	fe b7       	in	r31, 0x3e	; 62
    903e:	36 96       	adiw	r30, 0x06	; 6
    9040:	ed bf       	out	0x3d, r30	; 61
    9042:	fe bf       	out	0x3e, r31	; 62
    9044:	c5 01       	movw	r24, r10
    9046:	64 e0       	ldi	r22, 0x04	; 4
    9048:	40 e0       	ldi	r20, 0x00	; 0
    904a:	2b e6       	ldi	r18, 0x6B	; 107
    904c:	39 e2       	ldi	r19, 0x29	; 41
    904e:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					sprintf(temp,"Light:      %5u", quickLight);
    9052:	00 d0       	rcall	.+0      	; 0x9054 <main+0xab2>
    9054:	00 d0       	rcall	.+0      	; 0x9056 <main+0xab4>
    9056:	ed b7       	in	r30, 0x3d	; 61
    9058:	fe b7       	in	r31, 0x3e	; 62
    905a:	31 96       	adiw	r30, 0x01	; 1
    905c:	ad b7       	in	r26, 0x3d	; 61
    905e:	be b7       	in	r27, 0x3e	; 62
    9060:	11 96       	adiw	r26, 0x01	; 1
    9062:	ad 92       	st	X+, r10
    9064:	bc 92       	st	X, r11
    9066:	12 97       	sbiw	r26, 0x02	; 2
    9068:	2b e9       	ldi	r18, 0x9B	; 155
    906a:	37 e2       	ldi	r19, 0x27	; 39
    906c:	22 83       	std	Z+2, r18	; 0x02
    906e:	33 83       	std	Z+3, r19	; 0x03
    9070:	80 91 d2 2b 	lds	r24, 0x2BD2
    9074:	90 91 d3 2b 	lds	r25, 0x2BD3
    9078:	84 83       	std	Z+4, r24	; 0x04
    907a:	95 83       	std	Z+5, r25	; 0x05
    907c:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					display_putString(temp,5,0,System5x7);
    9080:	8d b7       	in	r24, 0x3d	; 61
    9082:	9e b7       	in	r25, 0x3e	; 62
    9084:	06 96       	adiw	r24, 0x06	; 6
    9086:	8d bf       	out	0x3d, r24	; 61
    9088:	9e bf       	out	0x3e, r25	; 62
    908a:	c5 01       	movw	r24, r10
    908c:	65 e0       	ldi	r22, 0x05	; 5
    908e:	40 e0       	ldi	r20, 0x00	; 0
    9090:	2b e6       	ldi	r18, 0x6B	; 107
    9092:	39 e2       	ldi	r19, 0x29	; 41
    9094:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					sprintf(temp,"Air: %5lu, %5lu", quickSmall, quickLarge);
    9098:	ad b7       	in	r26, 0x3d	; 61
    909a:	be b7       	in	r27, 0x3e	; 62
    909c:	1c 97       	sbiw	r26, 0x0c	; 12
    909e:	ad bf       	out	0x3d, r26	; 61
    90a0:	be bf       	out	0x3e, r27	; 62
    90a2:	ed b7       	in	r30, 0x3d	; 61
    90a4:	fe b7       	in	r31, 0x3e	; 62
    90a6:	31 96       	adiw	r30, 0x01	; 1
    90a8:	11 96       	adiw	r26, 0x01	; 1
    90aa:	ad 92       	st	X+, r10
    90ac:	bc 92       	st	X, r11
    90ae:	12 97       	sbiw	r26, 0x02	; 2
    90b0:	2b ea       	ldi	r18, 0xAB	; 171
    90b2:	37 e2       	ldi	r19, 0x27	; 39
    90b4:	22 83       	std	Z+2, r18	; 0x02
    90b6:	33 83       	std	Z+3, r19	; 0x03
    90b8:	80 91 a8 2b 	lds	r24, 0x2BA8
    90bc:	90 91 a9 2b 	lds	r25, 0x2BA9
    90c0:	a0 91 aa 2b 	lds	r26, 0x2BAA
    90c4:	b0 91 ab 2b 	lds	r27, 0x2BAB
    90c8:	84 83       	std	Z+4, r24	; 0x04
    90ca:	95 83       	std	Z+5, r25	; 0x05
    90cc:	a6 83       	std	Z+6, r26	; 0x06
    90ce:	b7 83       	std	Z+7, r27	; 0x07
    90d0:	80 91 ac 2b 	lds	r24, 0x2BAC
    90d4:	90 91 ad 2b 	lds	r25, 0x2BAD
    90d8:	a0 91 ae 2b 	lds	r26, 0x2BAE
    90dc:	b0 91 af 2b 	lds	r27, 0x2BAF
    90e0:	80 87       	std	Z+8, r24	; 0x08
    90e2:	91 87       	std	Z+9, r25	; 0x09
    90e4:	a2 87       	std	Z+10, r26	; 0x0a
    90e6:	b3 87       	std	Z+11, r27	; 0x0b
    90e8:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <sprintf>
					display_putString(temp,6,0,System5x7);
    90ec:	8d b7       	in	r24, 0x3d	; 61
    90ee:	9e b7       	in	r25, 0x3e	; 62
    90f0:	0c 96       	adiw	r24, 0x0c	; 12
    90f2:	8d bf       	out	0x3d, r24	; 61
    90f4:	9e bf       	out	0x3e, r25	; 62
    90f6:	c5 01       	movw	r24, r10
    90f8:	66 e0       	ldi	r22, 0x06	; 6
    90fa:	40 e0       	ldi	r20, 0x00	; 0
    90fc:	2b e6       	ldi	r18, 0x6B	; 107
    90fe:	39 e2       	ldi	r19, 0x29	; 41
    9100:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					display_putString("Sound:           ",7,0,System5x7);
    9104:	8b eb       	ldi	r24, 0xBB	; 187
    9106:	97 e2       	ldi	r25, 0x27	; 39
    9108:	67 e0       	ldi	r22, 0x07	; 7
    910a:	40 e0       	ldi	r20, 0x00	; 0
    910c:	2b e6       	ldi	r18, 0x6B	; 107
    910e:	39 e2       	ldi	r19, 0x29	; 41
    9110:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
					display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    9114:	20 91 d4 2b 	lds	r18, 0x2BD4
    9118:	26 95       	lsr	r18
    911a:	89 e3       	ldi	r24, 0x39	; 57
    911c:	62 e3       	ldi	r22, 0x32	; 50
    911e:	47 e0       	ldi	r20, 0x07	; 7
    9120:	ee 24       	eor	r14, r14
    9122:	cc 24       	eor	r12, r12
    9124:	c3 94       	inc	r12
    9126:	0e 94 80 29 	call	0x5300	; 0x5300 <display_drawRectangle>
					display_writeBufferToScreen();
    912a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    912e:	84 ef       	ldi	r24, 0xF4	; 244
    9130:	91 e0       	ldi	r25, 0x01	; 1
    9132:	f4 01       	movw	r30, r8
    9134:	31 97       	sbiw	r30, 0x01	; 1
    9136:	f1 f7       	brne	.-4      	; 0x9134 <main+0xb92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    913a:	d9 f7       	brne	.-10     	; 0x9132 <main+0xb90>
					_delay_ms(50);

					if(chargePercent == 100){
    913c:	80 91 b1 2b 	lds	r24, 0x2BB1
    9140:	84 36       	cpi	r24, 0x64	; 100
    9142:	29 f4       	brne	.+10     	; 0x914e <main+0xbac>
						chargeComplete = true;
    9144:	81 e0       	ldi	r24, 0x01	; 1
    9146:	80 93 b4 2b 	sts	0x2BB4, r24
						okToCharge  = false;
    914a:	10 92 b5 2b 	sts	0x2BB5, r1
    914e:	80 91 a8 06 	lds	r24, 0x06A8
    9152:	81 fd       	sbrc	r24, 1
    9154:	0a c0       	rjmp	.+20     	; 0x916a <main+0xbc8>
    9156:	d0 c0       	rjmp	.+416    	; 0x92f8 <main+0xd56>
					}

					if(SD2_Inserted() && chargeComplete && !recording){
    9158:	80 91 bb 2b 	lds	r24, 0x2BBB
    915c:	88 23       	and	r24, r24
    915e:	29 f4       	brne	.+10     	; 0x916a <main+0xbc8>
    9160:	e0 e2       	ldi	r30, 0x20	; 32
    9162:	f6 e0       	ldi	r31, 0x06	; 6
    9164:	80 e2       	ldi	r24, 0x20	; 32
    9166:	86 83       	std	Z+6, r24	; 0x06
    9168:	2d c0       	rjmp	.+90     	; 0x91c4 <main+0xc22>
    916a:	80 91 a8 06 	lds	r24, 0x06A8
    916e:	81 fd       	sbrc	r24, 1
    9170:	2c c0       	rjmp	.+88     	; 0x91ca <main+0xc28>
    9172:	c8 c0       	rjmp	.+400    	; 0x9304 <main+0xd62>
						Leds_Clear(ext_Red);
						Leds_Set(ext_Green);
					} else if(SD2_Inserted() && !chargeComplete){
						okToCharge = true;
    9174:	81 e0       	ldi	r24, 0x01	; 1
    9176:	80 93 b5 2b 	sts	0x2BB5, r24
						if(!rtcSynced){
    917a:	80 91 e3 2b 	lds	r24, 0x2BE3
    917e:	88 23       	and	r24, r24
    9180:	c1 f4       	brne	.+48     	; 0x91b2 <main+0xc10>
							Debug_SendString("Syncing RTC", true);
    9182:	84 e0       	ldi	r24, 0x04	; 4
    9184:	97 e2       	ldi	r25, 0x27	; 39
    9186:	61 e0       	ldi	r22, 0x01	; 1
    9188:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
							if(!demoMode){
    918c:	80 91 69 29 	lds	r24, 0x2969
    9190:	88 23       	and	r24, r24
    9192:	61 f4       	brne	.+24     	; 0x91ac <main+0xc0a>
								RTC_init();
    9194:	0e 94 ab 32 	call	0x6556	; 0x6556 <RTC_init>
								RTC_setUTCSecs(UNIX_time);
    9198:	60 91 b6 2b 	lds	r22, 0x2BB6
    919c:	70 91 b7 2b 	lds	r23, 0x2BB7
    91a0:	80 91 b8 2b 	lds	r24, 0x2BB8
    91a4:	90 91 b9 2b 	lds	r25, 0x2BB9
    91a8:	0e 94 a4 32 	call	0x6548	; 0x6548 <RTC_setUTCSecs>
							}
							rtcSynced = true;
    91ac:	81 e0       	ldi	r24, 0x01	; 1
    91ae:	80 93 e3 2b 	sts	0x2BE3, r24
						}
						if(!recording){
    91b2:	80 91 bb 2b 	lds	r24, 0x2BBB
    91b6:	88 23       	and	r24, r24
    91b8:	09 f0       	breq	.+2      	; 0x91bc <main+0xc1a>
    91ba:	af cb       	rjmp	.-2210   	; 0x891a <main+0x378>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    91bc:	e0 e2       	ldi	r30, 0x20	; 32
    91be:	f6 e0       	ldi	r31, 0x06	; 6
    91c0:	80 e2       	ldi	r24, 0x20	; 32
    91c2:	85 83       	std	Z+5, r24	; 0x05
							Leds_Set(ext_Red);
							Leds_Set(ext_Green);
						}

					}else{
						chargePercent = 0;
    91c4:	80 e1       	ldi	r24, 0x10	; 16
    91c6:	85 83       	std	Z+5, r24	; 0x05
    91c8:	a8 cb       	rjmp	.-2224   	; 0x891a <main+0x378>
    91ca:	10 92 b1 2b 	sts	0x2BB1, r1
						chargeComplete = false;
    91ce:	10 92 b4 2b 	sts	0x2BB4, r1
						rtcSynced = false;
    91d2:	10 92 e3 2b 	sts	0x2BE3, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    91d6:	e0 e2       	ldi	r30, 0x20	; 32
    91d8:	f6 e0       	ldi	r31, 0x06	; 6
    91da:	80 e2       	ldi	r24, 0x20	; 32
    91dc:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    91de:	80 e1       	ldi	r24, 0x10	; 16
    91e0:	86 83       	std	Z+6, r24	; 0x06
    91e2:	9b cb       	rjmp	.-2250   	; 0x891a <main+0x378>
    91e4:	d7 01       	movw	r26, r14
    91e6:	15 96       	adiw	r26, 0x05	; 5
    91e8:	cc 92       	st	X, r12

			}
		} else {
			Leds_Set(sd_Red);

			display_clearBuffer();
    91ea:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
			display_writeBufferToScreen();
    91ee:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
			display_putString("    uSD Error    ",3,0,System5x7);
    91f2:	8d ec       	ldi	r24, 0xCD	; 205
    91f4:	97 e2       	ldi	r25, 0x27	; 39
    91f6:	63 e0       	ldi	r22, 0x03	; 3
    91f8:	40 e0       	ldi	r20, 0x00	; 0
    91fa:	2b e6       	ldi	r18, 0x6B	; 107
    91fc:	39 e2       	ldi	r19, 0x29	; 41
    91fe:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
			display_putString(" Please Remove & ",6,0,System5x7);
    9202:	8f ed       	ldi	r24, 0xDF	; 223
    9204:	97 e2       	ldi	r25, 0x27	; 39
    9206:	66 e0       	ldi	r22, 0x06	; 6
    9208:	40 e0       	ldi	r20, 0x00	; 0
    920a:	2b e6       	ldi	r18, 0x6B	; 107
    920c:	39 e2       	ldi	r19, 0x29	; 41
    920e:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
			display_putString("  Reinsert Card  ",7,0,System5x7);
    9212:	81 ef       	ldi	r24, 0xF1	; 241
    9214:	97 e2       	ldi	r25, 0x27	; 39
    9216:	67 e0       	ldi	r22, 0x07	; 7
    9218:	40 e0       	ldi	r20, 0x00	; 0
    921a:	2b e6       	ldi	r18, 0x6B	; 107
    921c:	39 e2       	ldi	r19, 0x29	; 41
    921e:	0e 94 06 28 	call	0x500c	; 0x500c <display_putString>
			display_writeBufferToScreen();
    9222:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    9226:	80 91 a8 06 	lds	r24, 0x06A8
    922a:	80 ff       	sbrs	r24, 0
    922c:	fc cf       	rjmp	.-8      	; 0x9226 <main+0xc84>
    922e:	88 ee       	ldi	r24, 0xE8	; 232
    9230:	93 e0       	ldi	r25, 0x03	; 3
    9232:	f8 01       	movw	r30, r16
    9234:	31 97       	sbiw	r30, 0x01	; 1
    9236:	f1 f7       	brne	.-4      	; 0x9234 <main+0xc92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9238:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    923a:	d9 f7       	brne	.-10     	; 0x9232 <main+0xc90>
    923c:	80 91 a8 06 	lds	r24, 0x06A8
    9240:	80 fd       	sbrc	r24, 0
    9242:	fc cf       	rjmp	.-8      	; 0x923c <main+0xc9a>
    9244:	88 ee       	ldi	r24, 0xE8	; 232
    9246:	93 e0       	ldi	r25, 0x03	; 3
    9248:	f8 01       	movw	r30, r16
    924a:	31 97       	sbiw	r30, 0x01	; 1
    924c:	f1 f7       	brne	.-4      	; 0x924a <main+0xca8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    924e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9250:	d9 f7       	brne	.-10     	; 0x9248 <main+0xca6>

			while(SD_Inserted());
			_delay_ms(100);
			while(!SD_Inserted());
			_delay_ms(100);
			SD_Init();
    9252:	0e 94 02 26 	call	0x4c04	; 0x4c04 <SD_Init>
    9256:	fc ca       	rjmp	.-2568   	; 0x8850 <main+0x2ae>

	Interrupt_Init();
	Disable_JTAG();

	if(Dpad_CheckButton(Select)){
		Debug_SendString("Entering Debug to Wifi function",true);
    9258:	83 e0       	ldi	r24, 0x03	; 3
    925a:	98 e2       	ldi	r25, 0x28	; 40
    925c:	61 e0       	ldi	r22, 0x01	; 1
    925e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Debug_SendString>
		Debug_To_Wifi();
    9262:	0e 94 a1 34 	call	0x6942	; 0x6942 <Debug_To_Wifi>
    9266:	f1 c9       	rjmp	.-3102   	; 0x864a <main+0xa8>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9268:	e0 e2       	ldi	r30, 0x20	; 32
    926a:	f6 e0       	ldi	r31, 0x06	; 6
    926c:	82 e0       	ldi	r24, 0x02	; 2
    926e:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9270:	81 e0       	ldi	r24, 0x01	; 1
    9272:	85 83       	std	Z+5, r24	; 0x05
    9274:	20 e1       	ldi	r18, 0x10	; 16
    9276:	37 e2       	ldi	r19, 0x27	; 39
    9278:	40 e7       	ldi	r20, 0x70	; 112
    927a:	51 e0       	ldi	r21, 0x01	; 1
    927c:	54 ca       	rjmp	.-2904   	; 0x8726 <main+0x184>
				ssRefreshCounter++;

				// controls


				if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    927e:	80 91 bb 2b 	lds	r24, 0x2BBB
    9282:	88 23       	and	r24, r24
    9284:	09 f0       	breq	.+2      	; 0x9288 <main+0xce6>
    9286:	a8 cb       	rjmp	.-2224   	; 0x89d8 <main+0x436>
    9288:	6a cb       	rjmp	.-2348   	; 0x895e <main+0x3bc>
					Leds_Clear(ext_Green);
					Leds_Clear(ext_Red);

					_delay_ms(1000);
					goto StartRecording;
				} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){							// pause recording
    928a:	80 91 bb 2b 	lds	r24, 0x2BBB
    928e:	88 23       	and	r24, r24
    9290:	09 f4       	brne	.+2      	; 0x9294 <main+0xcf2>
    9292:	3d cc       	rjmp	.-1926   	; 0x8b0e <main+0x56c>
    9294:	ac cb       	rjmp	.-2216   	; 0x89ee <main+0x44c>
    9296:	81 e0       	ldi	r24, 0x01	; 1
    9298:	22 cc       	rjmp	.-1980   	; 0x8ade <main+0x53c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    929a:	e0 e2       	ldi	r30, 0x20	; 32
    929c:	f6 e0       	ldi	r31, 0x06	; 6
    929e:	80 e2       	ldi	r24, 0x20	; 32
    92a0:	85 83       	std	Z+5, r24	; 0x05
    92a2:	04 c0       	rjmp	.+8      	; 0x92ac <main+0xd0a>
    92a4:	e0 e2       	ldi	r30, 0x20	; 32
    92a6:	f6 e0       	ldi	r31, 0x06	; 6
    92a8:	80 e2       	ldi	r24, 0x20	; 32
    92aa:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    92ac:	80 e1       	ldi	r24, 0x10	; 16
    92ae:	85 83       	std	Z+5, r24	; 0x05
    92b0:	26 cc       	rjmp	.-1972   	; 0x8afe <main+0x55c>


					_delay_ms(500);
				} else if(currentMode == recordMode && Dpad_CheckButton(Down)){										// go to sensorMode

					currentMode = sensorMode;
    92b2:	81 e0       	ldi	r24, 0x01	; 1
    92b4:	80 93 de 2b 	sts	0x2BDE, r24
					display_clearBuffer();
    92b8:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
					display_writeBufferToScreen();
    92bc:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    92c0:	65 cc       	rjmp	.-1846   	; 0x8b8c <main+0x5ea>
				} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){										// go to recordMode

					currentMode = recordMode;
    92c2:	10 92 de 2b 	sts	0x2BDE, r1
					display_clearBuffer();
    92c6:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <display_clearBuffer>
					display_writeBufferToScreen();
    92ca:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <display_writeBufferToScreen>
    92ce:	80 ea       	ldi	r24, 0xA0	; 160
    92d0:	9f e0       	ldi	r25, 0x0F	; 15
    92d2:	30 cc       	rjmp	.-1952   	; 0x8b34 <main+0x592>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    92d4:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    92d8:	8c 77       	andi	r24, 0x7C	; 124
    92da:	82 fd       	sbrc	r24, 2
    92dc:	51 cc       	rjmp	.-1886   	; 0x8b80 <main+0x5de>
    92de:	56 cc       	rjmp	.-1876   	; 0x8b8c <main+0x5ea>
						chargeComplete = true;
						okToCharge  = false;
					}


					if(SD2_Inserted() && chargeComplete){
    92e0:	80 91 b4 2b 	lds	r24, 0x2BB4
    92e4:	88 23       	and	r24, r24
    92e6:	09 f4       	brne	.+2      	; 0x92ea <main+0xd48>
    92e8:	fd cc       	rjmp	.-1542   	; 0x8ce4 <main+0x742>
    92ea:	ea cc       	rjmp	.-1580   	; 0x8cc0 <main+0x71e>
						display_putString("Ext Charged      ",3,0,System5x7);
						if(!recording){
							Leds_Clear(ext_Red);
							Leds_Set(ext_Green);
						}
					} else if(SD2_Inserted() && !chargeComplete){
    92ec:	80 91 b4 2b 	lds	r24, 0x2BB4
    92f0:	88 23       	and	r24, r24
    92f2:	09 f0       	breq	.+2      	; 0x92f6 <main+0xd54>
    92f4:	4c cd       	rjmp	.-1384   	; 0x8d8e <main+0x7ec>
    92f6:	fb cc       	rjmp	.-1546   	; 0x8cee <main+0x74c>
					if(chargePercent == 100){
						chargeComplete = true;
						okToCharge  = false;
					}

					if(SD2_Inserted() && chargeComplete && !recording){
    92f8:	80 91 b4 2b 	lds	r24, 0x2BB4
    92fc:	88 23       	and	r24, r24
    92fe:	09 f4       	brne	.+2      	; 0x9302 <main+0xd60>
    9300:	34 cf       	rjmp	.-408    	; 0x916a <main+0xbc8>
    9302:	2a cf       	rjmp	.-428    	; 0x9158 <main+0xbb6>
						Leds_Clear(ext_Red);
						Leds_Set(ext_Green);
					} else if(SD2_Inserted() && !chargeComplete){
    9304:	80 91 b4 2b 	lds	r24, 0x2BB4
    9308:	88 23       	and	r24, r24
    930a:	09 f0       	breq	.+2      	; 0x930e <main+0xd6c>
    930c:	5e cf       	rjmp	.-324    	; 0x91ca <main+0xc28>
    930e:	32 cf       	rjmp	.-412    	; 0x9174 <main+0xbd2>

00009310 <__mulsi3>:
    9310:	62 9f       	mul	r22, r18
    9312:	d0 01       	movw	r26, r0
    9314:	73 9f       	mul	r23, r19
    9316:	f0 01       	movw	r30, r0
    9318:	82 9f       	mul	r24, r18
    931a:	e0 0d       	add	r30, r0
    931c:	f1 1d       	adc	r31, r1
    931e:	64 9f       	mul	r22, r20
    9320:	e0 0d       	add	r30, r0
    9322:	f1 1d       	adc	r31, r1
    9324:	92 9f       	mul	r25, r18
    9326:	f0 0d       	add	r31, r0
    9328:	83 9f       	mul	r24, r19
    932a:	f0 0d       	add	r31, r0
    932c:	74 9f       	mul	r23, r20
    932e:	f0 0d       	add	r31, r0
    9330:	65 9f       	mul	r22, r21
    9332:	f0 0d       	add	r31, r0
    9334:	99 27       	eor	r25, r25
    9336:	72 9f       	mul	r23, r18
    9338:	b0 0d       	add	r27, r0
    933a:	e1 1d       	adc	r30, r1
    933c:	f9 1f       	adc	r31, r25
    933e:	63 9f       	mul	r22, r19
    9340:	b0 0d       	add	r27, r0
    9342:	e1 1d       	adc	r30, r1
    9344:	f9 1f       	adc	r31, r25
    9346:	bd 01       	movw	r22, r26
    9348:	cf 01       	movw	r24, r30
    934a:	11 24       	eor	r1, r1
    934c:	08 95       	ret

0000934e <__udivmodqi4>:
    934e:	99 1b       	sub	r25, r25
    9350:	79 e0       	ldi	r23, 0x09	; 9
    9352:	04 c0       	rjmp	.+8      	; 0x935c <__udivmodqi4_ep>

00009354 <__udivmodqi4_loop>:
    9354:	99 1f       	adc	r25, r25
    9356:	96 17       	cp	r25, r22
    9358:	08 f0       	brcs	.+2      	; 0x935c <__udivmodqi4_ep>
    935a:	96 1b       	sub	r25, r22

0000935c <__udivmodqi4_ep>:
    935c:	88 1f       	adc	r24, r24
    935e:	7a 95       	dec	r23
    9360:	c9 f7       	brne	.-14     	; 0x9354 <__udivmodqi4_loop>
    9362:	80 95       	com	r24
    9364:	08 95       	ret

00009366 <__udivmodhi4>:
    9366:	aa 1b       	sub	r26, r26
    9368:	bb 1b       	sub	r27, r27
    936a:	51 e1       	ldi	r21, 0x11	; 17
    936c:	07 c0       	rjmp	.+14     	; 0x937c <__udivmodhi4_ep>

0000936e <__udivmodhi4_loop>:
    936e:	aa 1f       	adc	r26, r26
    9370:	bb 1f       	adc	r27, r27
    9372:	a6 17       	cp	r26, r22
    9374:	b7 07       	cpc	r27, r23
    9376:	10 f0       	brcs	.+4      	; 0x937c <__udivmodhi4_ep>
    9378:	a6 1b       	sub	r26, r22
    937a:	b7 0b       	sbc	r27, r23

0000937c <__udivmodhi4_ep>:
    937c:	88 1f       	adc	r24, r24
    937e:	99 1f       	adc	r25, r25
    9380:	5a 95       	dec	r21
    9382:	a9 f7       	brne	.-22     	; 0x936e <__udivmodhi4_loop>
    9384:	80 95       	com	r24
    9386:	90 95       	com	r25
    9388:	bc 01       	movw	r22, r24
    938a:	cd 01       	movw	r24, r26
    938c:	08 95       	ret

0000938e <__divmodhi4>:
    938e:	97 fb       	bst	r25, 7
    9390:	09 2e       	mov	r0, r25
    9392:	07 26       	eor	r0, r23
    9394:	0a d0       	rcall	.+20     	; 0x93aa <__divmodhi4_neg1>
    9396:	77 fd       	sbrc	r23, 7
    9398:	04 d0       	rcall	.+8      	; 0x93a2 <__divmodhi4_neg2>
    939a:	e5 df       	rcall	.-54     	; 0x9366 <__udivmodhi4>
    939c:	06 d0       	rcall	.+12     	; 0x93aa <__divmodhi4_neg1>
    939e:	00 20       	and	r0, r0
    93a0:	1a f4       	brpl	.+6      	; 0x93a8 <__divmodhi4_exit>

000093a2 <__divmodhi4_neg2>:
    93a2:	70 95       	com	r23
    93a4:	61 95       	neg	r22
    93a6:	7f 4f       	sbci	r23, 0xFF	; 255

000093a8 <__divmodhi4_exit>:
    93a8:	08 95       	ret

000093aa <__divmodhi4_neg1>:
    93aa:	f6 f7       	brtc	.-4      	; 0x93a8 <__divmodhi4_exit>
    93ac:	90 95       	com	r25
    93ae:	81 95       	neg	r24
    93b0:	9f 4f       	sbci	r25, 0xFF	; 255
    93b2:	08 95       	ret

000093b4 <__udivmodsi4>:
    93b4:	a1 e2       	ldi	r26, 0x21	; 33
    93b6:	1a 2e       	mov	r1, r26
    93b8:	aa 1b       	sub	r26, r26
    93ba:	bb 1b       	sub	r27, r27
    93bc:	fd 01       	movw	r30, r26
    93be:	0d c0       	rjmp	.+26     	; 0x93da <__udivmodsi4_ep>

000093c0 <__udivmodsi4_loop>:
    93c0:	aa 1f       	adc	r26, r26
    93c2:	bb 1f       	adc	r27, r27
    93c4:	ee 1f       	adc	r30, r30
    93c6:	ff 1f       	adc	r31, r31
    93c8:	a2 17       	cp	r26, r18
    93ca:	b3 07       	cpc	r27, r19
    93cc:	e4 07       	cpc	r30, r20
    93ce:	f5 07       	cpc	r31, r21
    93d0:	20 f0       	brcs	.+8      	; 0x93da <__udivmodsi4_ep>
    93d2:	a2 1b       	sub	r26, r18
    93d4:	b3 0b       	sbc	r27, r19
    93d6:	e4 0b       	sbc	r30, r20
    93d8:	f5 0b       	sbc	r31, r21

000093da <__udivmodsi4_ep>:
    93da:	66 1f       	adc	r22, r22
    93dc:	77 1f       	adc	r23, r23
    93de:	88 1f       	adc	r24, r24
    93e0:	99 1f       	adc	r25, r25
    93e2:	1a 94       	dec	r1
    93e4:	69 f7       	brne	.-38     	; 0x93c0 <__udivmodsi4_loop>
    93e6:	60 95       	com	r22
    93e8:	70 95       	com	r23
    93ea:	80 95       	com	r24
    93ec:	90 95       	com	r25
    93ee:	9b 01       	movw	r18, r22
    93f0:	ac 01       	movw	r20, r24
    93f2:	bd 01       	movw	r22, r26
    93f4:	cf 01       	movw	r24, r30
    93f6:	08 95       	ret

000093f8 <atoi>:
    93f8:	fc 01       	movw	r30, r24
    93fa:	88 27       	eor	r24, r24
    93fc:	99 27       	eor	r25, r25
    93fe:	e8 94       	clt
    9400:	21 91       	ld	r18, Z+
    9402:	20 32       	cpi	r18, 0x20	; 32
    9404:	e9 f3       	breq	.-6      	; 0x9400 <atoi+0x8>
    9406:	29 30       	cpi	r18, 0x09	; 9
    9408:	10 f0       	brcs	.+4      	; 0x940e <atoi+0x16>
    940a:	2e 30       	cpi	r18, 0x0E	; 14
    940c:	c8 f3       	brcs	.-14     	; 0x9400 <atoi+0x8>
    940e:	2b 32       	cpi	r18, 0x2B	; 43
    9410:	41 f0       	breq	.+16     	; 0x9422 <atoi+0x2a>
    9412:	2d 32       	cpi	r18, 0x2D	; 45
    9414:	39 f4       	brne	.+14     	; 0x9424 <atoi+0x2c>
    9416:	68 94       	set
    9418:	04 c0       	rjmp	.+8      	; 0x9422 <atoi+0x2a>
    941a:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <__mulhi_const_10>
    941e:	82 0f       	add	r24, r18
    9420:	91 1d       	adc	r25, r1
    9422:	21 91       	ld	r18, Z+
    9424:	20 53       	subi	r18, 0x30	; 48
    9426:	2a 30       	cpi	r18, 0x0A	; 10
    9428:	c0 f3       	brcs	.-16     	; 0x941a <atoi+0x22>
    942a:	1e f4       	brtc	.+6      	; 0x9432 <atoi+0x3a>
    942c:	90 95       	com	r25
    942e:	81 95       	neg	r24
    9430:	9f 4f       	sbci	r25, 0xFF	; 255
    9432:	08 95       	ret

00009434 <atol>:
    9434:	1f 93       	push	r17
    9436:	fc 01       	movw	r30, r24
    9438:	99 27       	eor	r25, r25
    943a:	88 27       	eor	r24, r24
    943c:	bc 01       	movw	r22, r24
    943e:	e8 94       	clt
    9440:	11 91       	ld	r17, Z+
    9442:	10 32       	cpi	r17, 0x20	; 32
    9444:	e9 f3       	breq	.-6      	; 0x9440 <atol+0xc>
    9446:	19 30       	cpi	r17, 0x09	; 9
    9448:	10 f0       	brcs	.+4      	; 0x944e <atol+0x1a>
    944a:	1e 30       	cpi	r17, 0x0E	; 14
    944c:	c8 f3       	brcs	.-14     	; 0x9440 <atol+0xc>
    944e:	1b 32       	cpi	r17, 0x2B	; 43
    9450:	51 f0       	breq	.+20     	; 0x9466 <atol+0x32>
    9452:	1d 32       	cpi	r17, 0x2D	; 45
    9454:	49 f4       	brne	.+18     	; 0x9468 <atol+0x34>
    9456:	68 94       	set
    9458:	06 c0       	rjmp	.+12     	; 0x9466 <atol+0x32>
    945a:	0e 94 d6 4a 	call	0x95ac	; 0x95ac <__mulsi_const_10>
    945e:	61 0f       	add	r22, r17
    9460:	71 1d       	adc	r23, r1
    9462:	81 1d       	adc	r24, r1
    9464:	91 1d       	adc	r25, r1
    9466:	11 91       	ld	r17, Z+
    9468:	10 53       	subi	r17, 0x30	; 48
    946a:	1a 30       	cpi	r17, 0x0A	; 10
    946c:	b0 f3       	brcs	.-20     	; 0x945a <atol+0x26>
    946e:	3e f4       	brtc	.+14     	; 0x947e <atol+0x4a>
    9470:	90 95       	com	r25
    9472:	80 95       	com	r24
    9474:	70 95       	com	r23
    9476:	61 95       	neg	r22
    9478:	7f 4f       	sbci	r23, 0xFF	; 255
    947a:	8f 4f       	sbci	r24, 0xFF	; 255
    947c:	9f 4f       	sbci	r25, 0xFF	; 255
    947e:	1f 91       	pop	r17
    9480:	08 95       	ret

00009482 <strtok>:
    9482:	49 e1       	ldi	r20, 0x19	; 25
    9484:	5e e2       	ldi	r21, 0x2E	; 46
    9486:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <strtok_r>
    948a:	08 95       	ret

0000948c <strcat>:
    948c:	fb 01       	movw	r30, r22
    948e:	dc 01       	movw	r26, r24
    9490:	0d 90       	ld	r0, X+
    9492:	00 20       	and	r0, r0
    9494:	e9 f7       	brne	.-6      	; 0x9490 <strcat+0x4>
    9496:	11 97       	sbiw	r26, 0x01	; 1
    9498:	01 90       	ld	r0, Z+
    949a:	0d 92       	st	X+, r0
    949c:	00 20       	and	r0, r0
    949e:	e1 f7       	brne	.-8      	; 0x9498 <strcat+0xc>
    94a0:	08 95       	ret

000094a2 <strcmp>:
    94a2:	fb 01       	movw	r30, r22
    94a4:	dc 01       	movw	r26, r24
    94a6:	8d 91       	ld	r24, X+
    94a8:	01 90       	ld	r0, Z+
    94aa:	80 19       	sub	r24, r0
    94ac:	01 10       	cpse	r0, r1
    94ae:	d9 f3       	breq	.-10     	; 0x94a6 <strcmp+0x4>
    94b0:	99 0b       	sbc	r25, r25
    94b2:	08 95       	ret

000094b4 <strcpy>:
    94b4:	fb 01       	movw	r30, r22
    94b6:	dc 01       	movw	r26, r24
    94b8:	01 90       	ld	r0, Z+
    94ba:	0d 92       	st	X+, r0
    94bc:	00 20       	and	r0, r0
    94be:	e1 f7       	brne	.-8      	; 0x94b8 <strcpy+0x4>
    94c0:	08 95       	ret

000094c2 <strstr>:
    94c2:	fb 01       	movw	r30, r22
    94c4:	51 91       	ld	r21, Z+
    94c6:	55 23       	and	r21, r21
    94c8:	a9 f0       	breq	.+42     	; 0x94f4 <strstr+0x32>
    94ca:	bf 01       	movw	r22, r30
    94cc:	dc 01       	movw	r26, r24
    94ce:	4d 91       	ld	r20, X+
    94d0:	45 17       	cp	r20, r21
    94d2:	41 11       	cpse	r20, r1
    94d4:	e1 f7       	brne	.-8      	; 0x94ce <strstr+0xc>
    94d6:	59 f4       	brne	.+22     	; 0x94ee <strstr+0x2c>
    94d8:	cd 01       	movw	r24, r26
    94da:	01 90       	ld	r0, Z+
    94dc:	00 20       	and	r0, r0
    94de:	49 f0       	breq	.+18     	; 0x94f2 <strstr+0x30>
    94e0:	4d 91       	ld	r20, X+
    94e2:	40 15       	cp	r20, r0
    94e4:	41 11       	cpse	r20, r1
    94e6:	c9 f3       	breq	.-14     	; 0x94da <strstr+0x18>
    94e8:	fb 01       	movw	r30, r22
    94ea:	41 11       	cpse	r20, r1
    94ec:	ef cf       	rjmp	.-34     	; 0x94cc <strstr+0xa>
    94ee:	81 e0       	ldi	r24, 0x01	; 1
    94f0:	90 e0       	ldi	r25, 0x00	; 0
    94f2:	01 97       	sbiw	r24, 0x01	; 1
    94f4:	08 95       	ret

000094f6 <strtok_r>:
    94f6:	fa 01       	movw	r30, r20
    94f8:	a1 91       	ld	r26, Z+
    94fa:	b0 81       	ld	r27, Z
    94fc:	00 97       	sbiw	r24, 0x00	; 0
    94fe:	19 f4       	brne	.+6      	; 0x9506 <strtok_r+0x10>
    9500:	10 97       	sbiw	r26, 0x00	; 0
    9502:	e1 f0       	breq	.+56     	; 0x953c <strtok_r+0x46>
    9504:	cd 01       	movw	r24, r26
    9506:	dc 01       	movw	r26, r24
    9508:	cd 01       	movw	r24, r26
    950a:	0d 90       	ld	r0, X+
    950c:	00 20       	and	r0, r0
    950e:	11 f4       	brne	.+4      	; 0x9514 <strtok_r+0x1e>
    9510:	c0 01       	movw	r24, r0
    9512:	13 c0       	rjmp	.+38     	; 0x953a <strtok_r+0x44>
    9514:	fb 01       	movw	r30, r22
    9516:	21 91       	ld	r18, Z+
    9518:	22 23       	and	r18, r18
    951a:	19 f0       	breq	.+6      	; 0x9522 <strtok_r+0x2c>
    951c:	20 15       	cp	r18, r0
    951e:	d9 f7       	brne	.-10     	; 0x9516 <strtok_r+0x20>
    9520:	f3 cf       	rjmp	.-26     	; 0x9508 <strtok_r+0x12>
    9522:	fb 01       	movw	r30, r22
    9524:	21 91       	ld	r18, Z+
    9526:	20 15       	cp	r18, r0
    9528:	19 f4       	brne	.+6      	; 0x9530 <strtok_r+0x3a>
    952a:	1e 92       	st	-X, r1
    952c:	11 96       	adiw	r26, 0x01	; 1
    952e:	06 c0       	rjmp	.+12     	; 0x953c <strtok_r+0x46>
    9530:	22 23       	and	r18, r18
    9532:	c1 f7       	brne	.-16     	; 0x9524 <strtok_r+0x2e>
    9534:	0d 90       	ld	r0, X+
    9536:	00 20       	and	r0, r0
    9538:	a1 f7       	brne	.-24     	; 0x9522 <strtok_r+0x2c>
    953a:	d0 01       	movw	r26, r0
    953c:	fa 01       	movw	r30, r20
    953e:	a1 93       	st	Z+, r26
    9540:	b0 83       	st	Z, r27
    9542:	08 95       	ret

00009544 <ltoa>:
    9544:	fa 01       	movw	r30, r20
    9546:	cf 93       	push	r28
    9548:	ff 93       	push	r31
    954a:	ef 93       	push	r30
    954c:	22 30       	cpi	r18, 0x02	; 2
    954e:	44 f1       	brlt	.+80     	; 0x95a0 <ltoa+0x5c>
    9550:	25 32       	cpi	r18, 0x25	; 37
    9552:	34 f5       	brge	.+76     	; 0x95a0 <ltoa+0x5c>
    9554:	c2 2f       	mov	r28, r18
    9556:	e8 94       	clt
    9558:	ca 30       	cpi	r28, 0x0A	; 10
    955a:	49 f4       	brne	.+18     	; 0x956e <ltoa+0x2a>
    955c:	97 fb       	bst	r25, 7
    955e:	3e f4       	brtc	.+14     	; 0x956e <ltoa+0x2a>
    9560:	90 95       	com	r25
    9562:	80 95       	com	r24
    9564:	70 95       	com	r23
    9566:	61 95       	neg	r22
    9568:	7f 4f       	sbci	r23, 0xFF	; 255
    956a:	8f 4f       	sbci	r24, 0xFF	; 255
    956c:	9f 4f       	sbci	r25, 0xFF	; 255
    956e:	2c 2f       	mov	r18, r28
    9570:	33 27       	eor	r19, r19
    9572:	44 27       	eor	r20, r20
    9574:	55 27       	eor	r21, r21
    9576:	ff 93       	push	r31
    9578:	ef 93       	push	r30
    957a:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__udivmodsi4>
    957e:	ef 91       	pop	r30
    9580:	ff 91       	pop	r31
    9582:	60 5d       	subi	r22, 0xD0	; 208
    9584:	6a 33       	cpi	r22, 0x3A	; 58
    9586:	0c f0       	brlt	.+2      	; 0x958a <ltoa+0x46>
    9588:	69 5d       	subi	r22, 0xD9	; 217
    958a:	61 93       	st	Z+, r22
    958c:	b9 01       	movw	r22, r18
    958e:	ca 01       	movw	r24, r20
    9590:	60 50       	subi	r22, 0x00	; 0
    9592:	70 40       	sbci	r23, 0x00	; 0
    9594:	80 40       	sbci	r24, 0x00	; 0
    9596:	90 40       	sbci	r25, 0x00	; 0
    9598:	51 f7       	brne	.-44     	; 0x956e <ltoa+0x2a>
    959a:	16 f4       	brtc	.+4      	; 0x95a0 <ltoa+0x5c>
    959c:	cd e2       	ldi	r28, 0x2D	; 45
    959e:	c1 93       	st	Z+, r28
    95a0:	10 82       	st	Z, r1
    95a2:	8f 91       	pop	r24
    95a4:	9f 91       	pop	r25
    95a6:	cf 91       	pop	r28
    95a8:	0c 94 34 4d 	jmp	0x9a68	; 0x9a68 <strrev>

000095ac <__mulsi_const_10>:
    95ac:	59 2f       	mov	r21, r25
    95ae:	48 2f       	mov	r20, r24
    95b0:	37 2f       	mov	r19, r23
    95b2:	26 2f       	mov	r18, r22
    95b4:	66 0f       	add	r22, r22
    95b6:	77 1f       	adc	r23, r23
    95b8:	88 1f       	adc	r24, r24
    95ba:	99 1f       	adc	r25, r25
    95bc:	66 0f       	add	r22, r22
    95be:	77 1f       	adc	r23, r23
    95c0:	88 1f       	adc	r24, r24
    95c2:	99 1f       	adc	r25, r25
    95c4:	62 0f       	add	r22, r18
    95c6:	73 1f       	adc	r23, r19
    95c8:	84 1f       	adc	r24, r20
    95ca:	95 1f       	adc	r25, r21
    95cc:	66 0f       	add	r22, r22
    95ce:	77 1f       	adc	r23, r23
    95d0:	88 1f       	adc	r24, r24
    95d2:	99 1f       	adc	r25, r25
    95d4:	08 95       	ret

000095d6 <__mulhi_const_10>:
    95d6:	7a e0       	ldi	r23, 0x0A	; 10
    95d8:	97 9f       	mul	r25, r23
    95da:	90 2d       	mov	r25, r0
    95dc:	87 9f       	mul	r24, r23
    95de:	80 2d       	mov	r24, r0
    95e0:	91 0d       	add	r25, r1
    95e2:	11 24       	eor	r1, r1
    95e4:	08 95       	ret

000095e6 <sprintf>:
    95e6:	0f 93       	push	r16
    95e8:	1f 93       	push	r17
    95ea:	df 93       	push	r29
    95ec:	cf 93       	push	r28
    95ee:	cd b7       	in	r28, 0x3d	; 61
    95f0:	de b7       	in	r29, 0x3e	; 62
    95f2:	2e 97       	sbiw	r28, 0x0e	; 14
    95f4:	cd bf       	out	0x3d, r28	; 61
    95f6:	de bf       	out	0x3e, r29	; 62
    95f8:	0e 89       	ldd	r16, Y+22	; 0x16
    95fa:	1f 89       	ldd	r17, Y+23	; 0x17
    95fc:	86 e0       	ldi	r24, 0x06	; 6
    95fe:	8c 83       	std	Y+4, r24	; 0x04
    9600:	09 83       	std	Y+1, r16	; 0x01
    9602:	1a 83       	std	Y+2, r17	; 0x02
    9604:	8f ef       	ldi	r24, 0xFF	; 255
    9606:	9f e7       	ldi	r25, 0x7F	; 127
    9608:	8d 83       	std	Y+5, r24	; 0x05
    960a:	9e 83       	std	Y+6, r25	; 0x06
    960c:	9e 01       	movw	r18, r28
    960e:	26 5e       	subi	r18, 0xE6	; 230
    9610:	3f 4f       	sbci	r19, 0xFF	; 255
    9612:	ce 01       	movw	r24, r28
    9614:	01 96       	adiw	r24, 0x01	; 1
    9616:	68 8d       	ldd	r22, Y+24	; 0x18
    9618:	79 8d       	ldd	r23, Y+25	; 0x19
    961a:	a9 01       	movw	r20, r18
    961c:	0e 94 1e 4b 	call	0x963c	; 0x963c <vfprintf>
    9620:	2f 81       	ldd	r18, Y+7	; 0x07
    9622:	38 85       	ldd	r19, Y+8	; 0x08
    9624:	02 0f       	add	r16, r18
    9626:	13 1f       	adc	r17, r19
    9628:	f8 01       	movw	r30, r16
    962a:	10 82       	st	Z, r1
    962c:	2e 96       	adiw	r28, 0x0e	; 14
    962e:	cd bf       	out	0x3d, r28	; 61
    9630:	de bf       	out	0x3e, r29	; 62
    9632:	cf 91       	pop	r28
    9634:	df 91       	pop	r29
    9636:	1f 91       	pop	r17
    9638:	0f 91       	pop	r16
    963a:	08 95       	ret

0000963c <vfprintf>:
    963c:	2f 92       	push	r2
    963e:	3f 92       	push	r3
    9640:	4f 92       	push	r4
    9642:	5f 92       	push	r5
    9644:	6f 92       	push	r6
    9646:	7f 92       	push	r7
    9648:	8f 92       	push	r8
    964a:	9f 92       	push	r9
    964c:	af 92       	push	r10
    964e:	bf 92       	push	r11
    9650:	cf 92       	push	r12
    9652:	df 92       	push	r13
    9654:	ef 92       	push	r14
    9656:	ff 92       	push	r15
    9658:	0f 93       	push	r16
    965a:	1f 93       	push	r17
    965c:	df 93       	push	r29
    965e:	cf 93       	push	r28
    9660:	cd b7       	in	r28, 0x3d	; 61
    9662:	de b7       	in	r29, 0x3e	; 62
    9664:	2b 97       	sbiw	r28, 0x0b	; 11
    9666:	cd bf       	out	0x3d, r28	; 61
    9668:	de bf       	out	0x3e, r29	; 62
    966a:	3c 01       	movw	r6, r24
    966c:	2b 01       	movw	r4, r22
    966e:	5a 01       	movw	r10, r20
    9670:	fc 01       	movw	r30, r24
    9672:	16 82       	std	Z+6, r1	; 0x06
    9674:	17 82       	std	Z+7, r1	; 0x07
    9676:	83 81       	ldd	r24, Z+3	; 0x03
    9678:	81 fd       	sbrc	r24, 1
    967a:	03 c0       	rjmp	.+6      	; 0x9682 <vfprintf+0x46>
    967c:	6f ef       	ldi	r22, 0xFF	; 255
    967e:	7f ef       	ldi	r23, 0xFF	; 255
    9680:	c6 c1       	rjmp	.+908    	; 0x9a0e <vfprintf+0x3d2>
    9682:	9a e0       	ldi	r25, 0x0A	; 10
    9684:	89 2e       	mov	r8, r25
    9686:	1e 01       	movw	r2, r28
    9688:	08 94       	sec
    968a:	21 1c       	adc	r2, r1
    968c:	31 1c       	adc	r3, r1
    968e:	f3 01       	movw	r30, r6
    9690:	23 81       	ldd	r18, Z+3	; 0x03
    9692:	f2 01       	movw	r30, r4
    9694:	23 fd       	sbrc	r18, 3
    9696:	85 91       	lpm	r24, Z+
    9698:	23 ff       	sbrs	r18, 3
    969a:	81 91       	ld	r24, Z+
    969c:	2f 01       	movw	r4, r30
    969e:	88 23       	and	r24, r24
    96a0:	09 f4       	brne	.+2      	; 0x96a4 <vfprintf+0x68>
    96a2:	b2 c1       	rjmp	.+868    	; 0x9a08 <vfprintf+0x3cc>
    96a4:	85 32       	cpi	r24, 0x25	; 37
    96a6:	39 f4       	brne	.+14     	; 0x96b6 <vfprintf+0x7a>
    96a8:	23 fd       	sbrc	r18, 3
    96aa:	85 91       	lpm	r24, Z+
    96ac:	23 ff       	sbrs	r18, 3
    96ae:	81 91       	ld	r24, Z+
    96b0:	2f 01       	movw	r4, r30
    96b2:	85 32       	cpi	r24, 0x25	; 37
    96b4:	29 f4       	brne	.+10     	; 0x96c0 <vfprintf+0x84>
    96b6:	90 e0       	ldi	r25, 0x00	; 0
    96b8:	b3 01       	movw	r22, r6
    96ba:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    96be:	e7 cf       	rjmp	.-50     	; 0x968e <vfprintf+0x52>
    96c0:	98 2f       	mov	r25, r24
    96c2:	ff 24       	eor	r15, r15
    96c4:	ee 24       	eor	r14, r14
    96c6:	99 24       	eor	r9, r9
    96c8:	ff e1       	ldi	r31, 0x1F	; 31
    96ca:	ff 15       	cp	r31, r15
    96cc:	d0 f0       	brcs	.+52     	; 0x9702 <vfprintf+0xc6>
    96ce:	9b 32       	cpi	r25, 0x2B	; 43
    96d0:	69 f0       	breq	.+26     	; 0x96ec <vfprintf+0xb0>
    96d2:	9c 32       	cpi	r25, 0x2C	; 44
    96d4:	28 f4       	brcc	.+10     	; 0x96e0 <vfprintf+0xa4>
    96d6:	90 32       	cpi	r25, 0x20	; 32
    96d8:	59 f0       	breq	.+22     	; 0x96f0 <vfprintf+0xb4>
    96da:	93 32       	cpi	r25, 0x23	; 35
    96dc:	91 f4       	brne	.+36     	; 0x9702 <vfprintf+0xc6>
    96de:	0e c0       	rjmp	.+28     	; 0x96fc <vfprintf+0xc0>
    96e0:	9d 32       	cpi	r25, 0x2D	; 45
    96e2:	49 f0       	breq	.+18     	; 0x96f6 <vfprintf+0xba>
    96e4:	90 33       	cpi	r25, 0x30	; 48
    96e6:	69 f4       	brne	.+26     	; 0x9702 <vfprintf+0xc6>
    96e8:	41 e0       	ldi	r20, 0x01	; 1
    96ea:	24 c0       	rjmp	.+72     	; 0x9734 <vfprintf+0xf8>
    96ec:	52 e0       	ldi	r21, 0x02	; 2
    96ee:	f5 2a       	or	r15, r21
    96f0:	84 e0       	ldi	r24, 0x04	; 4
    96f2:	f8 2a       	or	r15, r24
    96f4:	28 c0       	rjmp	.+80     	; 0x9746 <vfprintf+0x10a>
    96f6:	98 e0       	ldi	r25, 0x08	; 8
    96f8:	f9 2a       	or	r15, r25
    96fa:	25 c0       	rjmp	.+74     	; 0x9746 <vfprintf+0x10a>
    96fc:	e0 e1       	ldi	r30, 0x10	; 16
    96fe:	fe 2a       	or	r15, r30
    9700:	22 c0       	rjmp	.+68     	; 0x9746 <vfprintf+0x10a>
    9702:	f7 fc       	sbrc	r15, 7
    9704:	29 c0       	rjmp	.+82     	; 0x9758 <vfprintf+0x11c>
    9706:	89 2f       	mov	r24, r25
    9708:	80 53       	subi	r24, 0x30	; 48
    970a:	8a 30       	cpi	r24, 0x0A	; 10
    970c:	70 f4       	brcc	.+28     	; 0x972a <vfprintf+0xee>
    970e:	f6 fe       	sbrs	r15, 6
    9710:	05 c0       	rjmp	.+10     	; 0x971c <vfprintf+0xe0>
    9712:	98 9c       	mul	r9, r8
    9714:	90 2c       	mov	r9, r0
    9716:	11 24       	eor	r1, r1
    9718:	98 0e       	add	r9, r24
    971a:	15 c0       	rjmp	.+42     	; 0x9746 <vfprintf+0x10a>
    971c:	e8 9c       	mul	r14, r8
    971e:	e0 2c       	mov	r14, r0
    9720:	11 24       	eor	r1, r1
    9722:	e8 0e       	add	r14, r24
    9724:	f0 e2       	ldi	r31, 0x20	; 32
    9726:	ff 2a       	or	r15, r31
    9728:	0e c0       	rjmp	.+28     	; 0x9746 <vfprintf+0x10a>
    972a:	9e 32       	cpi	r25, 0x2E	; 46
    972c:	29 f4       	brne	.+10     	; 0x9738 <vfprintf+0xfc>
    972e:	f6 fc       	sbrc	r15, 6
    9730:	6b c1       	rjmp	.+726    	; 0x9a08 <vfprintf+0x3cc>
    9732:	40 e4       	ldi	r20, 0x40	; 64
    9734:	f4 2a       	or	r15, r20
    9736:	07 c0       	rjmp	.+14     	; 0x9746 <vfprintf+0x10a>
    9738:	9c 36       	cpi	r25, 0x6C	; 108
    973a:	19 f4       	brne	.+6      	; 0x9742 <vfprintf+0x106>
    973c:	50 e8       	ldi	r21, 0x80	; 128
    973e:	f5 2a       	or	r15, r21
    9740:	02 c0       	rjmp	.+4      	; 0x9746 <vfprintf+0x10a>
    9742:	98 36       	cpi	r25, 0x68	; 104
    9744:	49 f4       	brne	.+18     	; 0x9758 <vfprintf+0x11c>
    9746:	f2 01       	movw	r30, r4
    9748:	23 fd       	sbrc	r18, 3
    974a:	95 91       	lpm	r25, Z+
    974c:	23 ff       	sbrs	r18, 3
    974e:	91 91       	ld	r25, Z+
    9750:	2f 01       	movw	r4, r30
    9752:	99 23       	and	r25, r25
    9754:	09 f0       	breq	.+2      	; 0x9758 <vfprintf+0x11c>
    9756:	b8 cf       	rjmp	.-144    	; 0x96c8 <vfprintf+0x8c>
    9758:	89 2f       	mov	r24, r25
    975a:	85 54       	subi	r24, 0x45	; 69
    975c:	83 30       	cpi	r24, 0x03	; 3
    975e:	18 f0       	brcs	.+6      	; 0x9766 <vfprintf+0x12a>
    9760:	80 52       	subi	r24, 0x20	; 32
    9762:	83 30       	cpi	r24, 0x03	; 3
    9764:	38 f4       	brcc	.+14     	; 0x9774 <vfprintf+0x138>
    9766:	44 e0       	ldi	r20, 0x04	; 4
    9768:	50 e0       	ldi	r21, 0x00	; 0
    976a:	a4 0e       	add	r10, r20
    976c:	b5 1e       	adc	r11, r21
    976e:	5f e3       	ldi	r21, 0x3F	; 63
    9770:	59 83       	std	Y+1, r21	; 0x01
    9772:	0f c0       	rjmp	.+30     	; 0x9792 <vfprintf+0x156>
    9774:	93 36       	cpi	r25, 0x63	; 99
    9776:	31 f0       	breq	.+12     	; 0x9784 <vfprintf+0x148>
    9778:	93 37       	cpi	r25, 0x73	; 115
    977a:	79 f0       	breq	.+30     	; 0x979a <vfprintf+0x15e>
    977c:	93 35       	cpi	r25, 0x53	; 83
    977e:	09 f0       	breq	.+2      	; 0x9782 <vfprintf+0x146>
    9780:	56 c0       	rjmp	.+172    	; 0x982e <vfprintf+0x1f2>
    9782:	20 c0       	rjmp	.+64     	; 0x97c4 <vfprintf+0x188>
    9784:	f5 01       	movw	r30, r10
    9786:	80 81       	ld	r24, Z
    9788:	89 83       	std	Y+1, r24	; 0x01
    978a:	42 e0       	ldi	r20, 0x02	; 2
    978c:	50 e0       	ldi	r21, 0x00	; 0
    978e:	a4 0e       	add	r10, r20
    9790:	b5 1e       	adc	r11, r21
    9792:	61 01       	movw	r12, r2
    9794:	01 e0       	ldi	r16, 0x01	; 1
    9796:	10 e0       	ldi	r17, 0x00	; 0
    9798:	12 c0       	rjmp	.+36     	; 0x97be <vfprintf+0x182>
    979a:	f5 01       	movw	r30, r10
    979c:	c0 80       	ld	r12, Z
    979e:	d1 80       	ldd	r13, Z+1	; 0x01
    97a0:	f6 fc       	sbrc	r15, 6
    97a2:	03 c0       	rjmp	.+6      	; 0x97aa <vfprintf+0x16e>
    97a4:	6f ef       	ldi	r22, 0xFF	; 255
    97a6:	7f ef       	ldi	r23, 0xFF	; 255
    97a8:	02 c0       	rjmp	.+4      	; 0x97ae <vfprintf+0x172>
    97aa:	69 2d       	mov	r22, r9
    97ac:	70 e0       	ldi	r23, 0x00	; 0
    97ae:	42 e0       	ldi	r20, 0x02	; 2
    97b0:	50 e0       	ldi	r21, 0x00	; 0
    97b2:	a4 0e       	add	r10, r20
    97b4:	b5 1e       	adc	r11, r21
    97b6:	c6 01       	movw	r24, r12
    97b8:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <strnlen>
    97bc:	8c 01       	movw	r16, r24
    97be:	5f e7       	ldi	r21, 0x7F	; 127
    97c0:	f5 22       	and	r15, r21
    97c2:	14 c0       	rjmp	.+40     	; 0x97ec <vfprintf+0x1b0>
    97c4:	f5 01       	movw	r30, r10
    97c6:	c0 80       	ld	r12, Z
    97c8:	d1 80       	ldd	r13, Z+1	; 0x01
    97ca:	f6 fc       	sbrc	r15, 6
    97cc:	03 c0       	rjmp	.+6      	; 0x97d4 <vfprintf+0x198>
    97ce:	6f ef       	ldi	r22, 0xFF	; 255
    97d0:	7f ef       	ldi	r23, 0xFF	; 255
    97d2:	02 c0       	rjmp	.+4      	; 0x97d8 <vfprintf+0x19c>
    97d4:	69 2d       	mov	r22, r9
    97d6:	70 e0       	ldi	r23, 0x00	; 0
    97d8:	42 e0       	ldi	r20, 0x02	; 2
    97da:	50 e0       	ldi	r21, 0x00	; 0
    97dc:	a4 0e       	add	r10, r20
    97de:	b5 1e       	adc	r11, r21
    97e0:	c6 01       	movw	r24, r12
    97e2:	0e 94 1e 4d 	call	0x9a3c	; 0x9a3c <strnlen_P>
    97e6:	8c 01       	movw	r16, r24
    97e8:	50 e8       	ldi	r21, 0x80	; 128
    97ea:	f5 2a       	or	r15, r21
    97ec:	f3 fe       	sbrs	r15, 3
    97ee:	07 c0       	rjmp	.+14     	; 0x97fe <vfprintf+0x1c2>
    97f0:	1a c0       	rjmp	.+52     	; 0x9826 <vfprintf+0x1ea>
    97f2:	80 e2       	ldi	r24, 0x20	; 32
    97f4:	90 e0       	ldi	r25, 0x00	; 0
    97f6:	b3 01       	movw	r22, r6
    97f8:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    97fc:	ea 94       	dec	r14
    97fe:	8e 2d       	mov	r24, r14
    9800:	90 e0       	ldi	r25, 0x00	; 0
    9802:	08 17       	cp	r16, r24
    9804:	19 07       	cpc	r17, r25
    9806:	a8 f3       	brcs	.-22     	; 0x97f2 <vfprintf+0x1b6>
    9808:	0e c0       	rjmp	.+28     	; 0x9826 <vfprintf+0x1ea>
    980a:	f6 01       	movw	r30, r12
    980c:	f7 fc       	sbrc	r15, 7
    980e:	85 91       	lpm	r24, Z+
    9810:	f7 fe       	sbrs	r15, 7
    9812:	81 91       	ld	r24, Z+
    9814:	6f 01       	movw	r12, r30
    9816:	90 e0       	ldi	r25, 0x00	; 0
    9818:	b3 01       	movw	r22, r6
    981a:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    981e:	e1 10       	cpse	r14, r1
    9820:	ea 94       	dec	r14
    9822:	01 50       	subi	r16, 0x01	; 1
    9824:	10 40       	sbci	r17, 0x00	; 0
    9826:	01 15       	cp	r16, r1
    9828:	11 05       	cpc	r17, r1
    982a:	79 f7       	brne	.-34     	; 0x980a <vfprintf+0x1ce>
    982c:	ea c0       	rjmp	.+468    	; 0x9a02 <vfprintf+0x3c6>
    982e:	94 36       	cpi	r25, 0x64	; 100
    9830:	11 f0       	breq	.+4      	; 0x9836 <vfprintf+0x1fa>
    9832:	99 36       	cpi	r25, 0x69	; 105
    9834:	69 f5       	brne	.+90     	; 0x9890 <vfprintf+0x254>
    9836:	f7 fe       	sbrs	r15, 7
    9838:	08 c0       	rjmp	.+16     	; 0x984a <vfprintf+0x20e>
    983a:	f5 01       	movw	r30, r10
    983c:	20 81       	ld	r18, Z
    983e:	31 81       	ldd	r19, Z+1	; 0x01
    9840:	42 81       	ldd	r20, Z+2	; 0x02
    9842:	53 81       	ldd	r21, Z+3	; 0x03
    9844:	84 e0       	ldi	r24, 0x04	; 4
    9846:	90 e0       	ldi	r25, 0x00	; 0
    9848:	0a c0       	rjmp	.+20     	; 0x985e <vfprintf+0x222>
    984a:	f5 01       	movw	r30, r10
    984c:	80 81       	ld	r24, Z
    984e:	91 81       	ldd	r25, Z+1	; 0x01
    9850:	9c 01       	movw	r18, r24
    9852:	44 27       	eor	r20, r20
    9854:	37 fd       	sbrc	r19, 7
    9856:	40 95       	com	r20
    9858:	54 2f       	mov	r21, r20
    985a:	82 e0       	ldi	r24, 0x02	; 2
    985c:	90 e0       	ldi	r25, 0x00	; 0
    985e:	a8 0e       	add	r10, r24
    9860:	b9 1e       	adc	r11, r25
    9862:	9f e6       	ldi	r25, 0x6F	; 111
    9864:	f9 22       	and	r15, r25
    9866:	57 ff       	sbrs	r21, 7
    9868:	09 c0       	rjmp	.+18     	; 0x987c <vfprintf+0x240>
    986a:	50 95       	com	r21
    986c:	40 95       	com	r20
    986e:	30 95       	com	r19
    9870:	21 95       	neg	r18
    9872:	3f 4f       	sbci	r19, 0xFF	; 255
    9874:	4f 4f       	sbci	r20, 0xFF	; 255
    9876:	5f 4f       	sbci	r21, 0xFF	; 255
    9878:	e0 e8       	ldi	r30, 0x80	; 128
    987a:	fe 2a       	or	r15, r30
    987c:	ca 01       	movw	r24, r20
    987e:	b9 01       	movw	r22, r18
    9880:	a1 01       	movw	r20, r2
    9882:	2a e0       	ldi	r18, 0x0A	; 10
    9884:	30 e0       	ldi	r19, 0x00	; 0
    9886:	0e 94 70 4d 	call	0x9ae0	; 0x9ae0 <__ultoa_invert>
    988a:	d8 2e       	mov	r13, r24
    988c:	d2 18       	sub	r13, r2
    988e:	40 c0       	rjmp	.+128    	; 0x9910 <vfprintf+0x2d4>
    9890:	95 37       	cpi	r25, 0x75	; 117
    9892:	29 f4       	brne	.+10     	; 0x989e <vfprintf+0x262>
    9894:	1f 2d       	mov	r17, r15
    9896:	1f 7e       	andi	r17, 0xEF	; 239
    9898:	2a e0       	ldi	r18, 0x0A	; 10
    989a:	30 e0       	ldi	r19, 0x00	; 0
    989c:	1d c0       	rjmp	.+58     	; 0x98d8 <vfprintf+0x29c>
    989e:	1f 2d       	mov	r17, r15
    98a0:	19 7f       	andi	r17, 0xF9	; 249
    98a2:	9f 36       	cpi	r25, 0x6F	; 111
    98a4:	61 f0       	breq	.+24     	; 0x98be <vfprintf+0x282>
    98a6:	90 37       	cpi	r25, 0x70	; 112
    98a8:	20 f4       	brcc	.+8      	; 0x98b2 <vfprintf+0x276>
    98aa:	98 35       	cpi	r25, 0x58	; 88
    98ac:	09 f0       	breq	.+2      	; 0x98b0 <vfprintf+0x274>
    98ae:	ac c0       	rjmp	.+344    	; 0x9a08 <vfprintf+0x3cc>
    98b0:	0f c0       	rjmp	.+30     	; 0x98d0 <vfprintf+0x294>
    98b2:	90 37       	cpi	r25, 0x70	; 112
    98b4:	39 f0       	breq	.+14     	; 0x98c4 <vfprintf+0x288>
    98b6:	98 37       	cpi	r25, 0x78	; 120
    98b8:	09 f0       	breq	.+2      	; 0x98bc <vfprintf+0x280>
    98ba:	a6 c0       	rjmp	.+332    	; 0x9a08 <vfprintf+0x3cc>
    98bc:	04 c0       	rjmp	.+8      	; 0x98c6 <vfprintf+0x28a>
    98be:	28 e0       	ldi	r18, 0x08	; 8
    98c0:	30 e0       	ldi	r19, 0x00	; 0
    98c2:	0a c0       	rjmp	.+20     	; 0x98d8 <vfprintf+0x29c>
    98c4:	10 61       	ori	r17, 0x10	; 16
    98c6:	14 fd       	sbrc	r17, 4
    98c8:	14 60       	ori	r17, 0x04	; 4
    98ca:	20 e1       	ldi	r18, 0x10	; 16
    98cc:	30 e0       	ldi	r19, 0x00	; 0
    98ce:	04 c0       	rjmp	.+8      	; 0x98d8 <vfprintf+0x29c>
    98d0:	14 fd       	sbrc	r17, 4
    98d2:	16 60       	ori	r17, 0x06	; 6
    98d4:	20 e1       	ldi	r18, 0x10	; 16
    98d6:	32 e0       	ldi	r19, 0x02	; 2
    98d8:	17 ff       	sbrs	r17, 7
    98da:	08 c0       	rjmp	.+16     	; 0x98ec <vfprintf+0x2b0>
    98dc:	f5 01       	movw	r30, r10
    98de:	60 81       	ld	r22, Z
    98e0:	71 81       	ldd	r23, Z+1	; 0x01
    98e2:	82 81       	ldd	r24, Z+2	; 0x02
    98e4:	93 81       	ldd	r25, Z+3	; 0x03
    98e6:	44 e0       	ldi	r20, 0x04	; 4
    98e8:	50 e0       	ldi	r21, 0x00	; 0
    98ea:	08 c0       	rjmp	.+16     	; 0x98fc <vfprintf+0x2c0>
    98ec:	f5 01       	movw	r30, r10
    98ee:	80 81       	ld	r24, Z
    98f0:	91 81       	ldd	r25, Z+1	; 0x01
    98f2:	bc 01       	movw	r22, r24
    98f4:	80 e0       	ldi	r24, 0x00	; 0
    98f6:	90 e0       	ldi	r25, 0x00	; 0
    98f8:	42 e0       	ldi	r20, 0x02	; 2
    98fa:	50 e0       	ldi	r21, 0x00	; 0
    98fc:	a4 0e       	add	r10, r20
    98fe:	b5 1e       	adc	r11, r21
    9900:	a1 01       	movw	r20, r2
    9902:	0e 94 70 4d 	call	0x9ae0	; 0x9ae0 <__ultoa_invert>
    9906:	d8 2e       	mov	r13, r24
    9908:	d2 18       	sub	r13, r2
    990a:	8f e7       	ldi	r24, 0x7F	; 127
    990c:	f8 2e       	mov	r15, r24
    990e:	f1 22       	and	r15, r17
    9910:	f6 fe       	sbrs	r15, 6
    9912:	0b c0       	rjmp	.+22     	; 0x992a <vfprintf+0x2ee>
    9914:	5e ef       	ldi	r21, 0xFE	; 254
    9916:	f5 22       	and	r15, r21
    9918:	d9 14       	cp	r13, r9
    991a:	38 f4       	brcc	.+14     	; 0x992a <vfprintf+0x2ee>
    991c:	f4 fe       	sbrs	r15, 4
    991e:	07 c0       	rjmp	.+14     	; 0x992e <vfprintf+0x2f2>
    9920:	f2 fc       	sbrc	r15, 2
    9922:	05 c0       	rjmp	.+10     	; 0x992e <vfprintf+0x2f2>
    9924:	8f ee       	ldi	r24, 0xEF	; 239
    9926:	f8 22       	and	r15, r24
    9928:	02 c0       	rjmp	.+4      	; 0x992e <vfprintf+0x2f2>
    992a:	1d 2d       	mov	r17, r13
    992c:	01 c0       	rjmp	.+2      	; 0x9930 <vfprintf+0x2f4>
    992e:	19 2d       	mov	r17, r9
    9930:	f4 fe       	sbrs	r15, 4
    9932:	0d c0       	rjmp	.+26     	; 0x994e <vfprintf+0x312>
    9934:	fe 01       	movw	r30, r28
    9936:	ed 0d       	add	r30, r13
    9938:	f1 1d       	adc	r31, r1
    993a:	80 81       	ld	r24, Z
    993c:	80 33       	cpi	r24, 0x30	; 48
    993e:	19 f4       	brne	.+6      	; 0x9946 <vfprintf+0x30a>
    9940:	99 ee       	ldi	r25, 0xE9	; 233
    9942:	f9 22       	and	r15, r25
    9944:	08 c0       	rjmp	.+16     	; 0x9956 <vfprintf+0x31a>
    9946:	1f 5f       	subi	r17, 0xFF	; 255
    9948:	f2 fe       	sbrs	r15, 2
    994a:	05 c0       	rjmp	.+10     	; 0x9956 <vfprintf+0x31a>
    994c:	03 c0       	rjmp	.+6      	; 0x9954 <vfprintf+0x318>
    994e:	8f 2d       	mov	r24, r15
    9950:	86 78       	andi	r24, 0x86	; 134
    9952:	09 f0       	breq	.+2      	; 0x9956 <vfprintf+0x31a>
    9954:	1f 5f       	subi	r17, 0xFF	; 255
    9956:	0f 2d       	mov	r16, r15
    9958:	f3 fc       	sbrc	r15, 3
    995a:	14 c0       	rjmp	.+40     	; 0x9984 <vfprintf+0x348>
    995c:	f0 fe       	sbrs	r15, 0
    995e:	0f c0       	rjmp	.+30     	; 0x997e <vfprintf+0x342>
    9960:	1e 15       	cp	r17, r14
    9962:	10 f0       	brcs	.+4      	; 0x9968 <vfprintf+0x32c>
    9964:	9d 2c       	mov	r9, r13
    9966:	0b c0       	rjmp	.+22     	; 0x997e <vfprintf+0x342>
    9968:	9d 2c       	mov	r9, r13
    996a:	9e 0c       	add	r9, r14
    996c:	91 1a       	sub	r9, r17
    996e:	1e 2d       	mov	r17, r14
    9970:	06 c0       	rjmp	.+12     	; 0x997e <vfprintf+0x342>
    9972:	80 e2       	ldi	r24, 0x20	; 32
    9974:	90 e0       	ldi	r25, 0x00	; 0
    9976:	b3 01       	movw	r22, r6
    9978:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    997c:	1f 5f       	subi	r17, 0xFF	; 255
    997e:	1e 15       	cp	r17, r14
    9980:	c0 f3       	brcs	.-16     	; 0x9972 <vfprintf+0x336>
    9982:	04 c0       	rjmp	.+8      	; 0x998c <vfprintf+0x350>
    9984:	1e 15       	cp	r17, r14
    9986:	10 f4       	brcc	.+4      	; 0x998c <vfprintf+0x350>
    9988:	e1 1a       	sub	r14, r17
    998a:	01 c0       	rjmp	.+2      	; 0x998e <vfprintf+0x352>
    998c:	ee 24       	eor	r14, r14
    998e:	04 ff       	sbrs	r16, 4
    9990:	0f c0       	rjmp	.+30     	; 0x99b0 <vfprintf+0x374>
    9992:	80 e3       	ldi	r24, 0x30	; 48
    9994:	90 e0       	ldi	r25, 0x00	; 0
    9996:	b3 01       	movw	r22, r6
    9998:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    999c:	02 ff       	sbrs	r16, 2
    999e:	1d c0       	rjmp	.+58     	; 0x99da <vfprintf+0x39e>
    99a0:	01 fd       	sbrc	r16, 1
    99a2:	03 c0       	rjmp	.+6      	; 0x99aa <vfprintf+0x36e>
    99a4:	88 e7       	ldi	r24, 0x78	; 120
    99a6:	90 e0       	ldi	r25, 0x00	; 0
    99a8:	0e c0       	rjmp	.+28     	; 0x99c6 <vfprintf+0x38a>
    99aa:	88 e5       	ldi	r24, 0x58	; 88
    99ac:	90 e0       	ldi	r25, 0x00	; 0
    99ae:	0b c0       	rjmp	.+22     	; 0x99c6 <vfprintf+0x38a>
    99b0:	80 2f       	mov	r24, r16
    99b2:	86 78       	andi	r24, 0x86	; 134
    99b4:	91 f0       	breq	.+36     	; 0x99da <vfprintf+0x39e>
    99b6:	01 ff       	sbrs	r16, 1
    99b8:	02 c0       	rjmp	.+4      	; 0x99be <vfprintf+0x382>
    99ba:	8b e2       	ldi	r24, 0x2B	; 43
    99bc:	01 c0       	rjmp	.+2      	; 0x99c0 <vfprintf+0x384>
    99be:	80 e2       	ldi	r24, 0x20	; 32
    99c0:	f7 fc       	sbrc	r15, 7
    99c2:	8d e2       	ldi	r24, 0x2D	; 45
    99c4:	90 e0       	ldi	r25, 0x00	; 0
    99c6:	b3 01       	movw	r22, r6
    99c8:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    99cc:	06 c0       	rjmp	.+12     	; 0x99da <vfprintf+0x39e>
    99ce:	80 e3       	ldi	r24, 0x30	; 48
    99d0:	90 e0       	ldi	r25, 0x00	; 0
    99d2:	b3 01       	movw	r22, r6
    99d4:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    99d8:	9a 94       	dec	r9
    99da:	d9 14       	cp	r13, r9
    99dc:	c0 f3       	brcs	.-16     	; 0x99ce <vfprintf+0x392>
    99de:	da 94       	dec	r13
    99e0:	f1 01       	movw	r30, r2
    99e2:	ed 0d       	add	r30, r13
    99e4:	f1 1d       	adc	r31, r1
    99e6:	80 81       	ld	r24, Z
    99e8:	90 e0       	ldi	r25, 0x00	; 0
    99ea:	b3 01       	movw	r22, r6
    99ec:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    99f0:	dd 20       	and	r13, r13
    99f2:	a9 f7       	brne	.-22     	; 0x99de <vfprintf+0x3a2>
    99f4:	06 c0       	rjmp	.+12     	; 0x9a02 <vfprintf+0x3c6>
    99f6:	80 e2       	ldi	r24, 0x20	; 32
    99f8:	90 e0       	ldi	r25, 0x00	; 0
    99fa:	b3 01       	movw	r22, r6
    99fc:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <fputc>
    9a00:	ea 94       	dec	r14
    9a02:	ee 20       	and	r14, r14
    9a04:	c1 f7       	brne	.-16     	; 0x99f6 <vfprintf+0x3ba>
    9a06:	43 ce       	rjmp	.-890    	; 0x968e <vfprintf+0x52>
    9a08:	f3 01       	movw	r30, r6
    9a0a:	66 81       	ldd	r22, Z+6	; 0x06
    9a0c:	77 81       	ldd	r23, Z+7	; 0x07
    9a0e:	cb 01       	movw	r24, r22
    9a10:	2b 96       	adiw	r28, 0x0b	; 11
    9a12:	cd bf       	out	0x3d, r28	; 61
    9a14:	de bf       	out	0x3e, r29	; 62
    9a16:	cf 91       	pop	r28
    9a18:	df 91       	pop	r29
    9a1a:	1f 91       	pop	r17
    9a1c:	0f 91       	pop	r16
    9a1e:	ff 90       	pop	r15
    9a20:	ef 90       	pop	r14
    9a22:	df 90       	pop	r13
    9a24:	cf 90       	pop	r12
    9a26:	bf 90       	pop	r11
    9a28:	af 90       	pop	r10
    9a2a:	9f 90       	pop	r9
    9a2c:	8f 90       	pop	r8
    9a2e:	7f 90       	pop	r7
    9a30:	6f 90       	pop	r6
    9a32:	5f 90       	pop	r5
    9a34:	4f 90       	pop	r4
    9a36:	3f 90       	pop	r3
    9a38:	2f 90       	pop	r2
    9a3a:	08 95       	ret

00009a3c <strnlen_P>:
    9a3c:	fc 01       	movw	r30, r24
    9a3e:	05 90       	lpm	r0, Z+
    9a40:	61 50       	subi	r22, 0x01	; 1
    9a42:	70 40       	sbci	r23, 0x00	; 0
    9a44:	01 10       	cpse	r0, r1
    9a46:	d8 f7       	brcc	.-10     	; 0x9a3e <strnlen_P+0x2>
    9a48:	80 95       	com	r24
    9a4a:	90 95       	com	r25
    9a4c:	8e 0f       	add	r24, r30
    9a4e:	9f 1f       	adc	r25, r31
    9a50:	08 95       	ret

00009a52 <strnlen>:
    9a52:	fc 01       	movw	r30, r24
    9a54:	61 50       	subi	r22, 0x01	; 1
    9a56:	70 40       	sbci	r23, 0x00	; 0
    9a58:	01 90       	ld	r0, Z+
    9a5a:	01 10       	cpse	r0, r1
    9a5c:	d8 f7       	brcc	.-10     	; 0x9a54 <strnlen+0x2>
    9a5e:	80 95       	com	r24
    9a60:	90 95       	com	r25
    9a62:	8e 0f       	add	r24, r30
    9a64:	9f 1f       	adc	r25, r31
    9a66:	08 95       	ret

00009a68 <strrev>:
    9a68:	dc 01       	movw	r26, r24
    9a6a:	fc 01       	movw	r30, r24
    9a6c:	67 2f       	mov	r22, r23
    9a6e:	71 91       	ld	r23, Z+
    9a70:	77 23       	and	r23, r23
    9a72:	e1 f7       	brne	.-8      	; 0x9a6c <strrev+0x4>
    9a74:	32 97       	sbiw	r30, 0x02	; 2
    9a76:	04 c0       	rjmp	.+8      	; 0x9a80 <strrev+0x18>
    9a78:	7c 91       	ld	r23, X
    9a7a:	6d 93       	st	X+, r22
    9a7c:	70 83       	st	Z, r23
    9a7e:	62 91       	ld	r22, -Z
    9a80:	ae 17       	cp	r26, r30
    9a82:	bf 07       	cpc	r27, r31
    9a84:	c8 f3       	brcs	.-14     	; 0x9a78 <strrev+0x10>
    9a86:	08 95       	ret

00009a88 <fputc>:
    9a88:	0f 93       	push	r16
    9a8a:	1f 93       	push	r17
    9a8c:	cf 93       	push	r28
    9a8e:	df 93       	push	r29
    9a90:	8c 01       	movw	r16, r24
    9a92:	eb 01       	movw	r28, r22
    9a94:	8b 81       	ldd	r24, Y+3	; 0x03
    9a96:	81 ff       	sbrs	r24, 1
    9a98:	1b c0       	rjmp	.+54     	; 0x9ad0 <fputc+0x48>
    9a9a:	82 ff       	sbrs	r24, 2
    9a9c:	0d c0       	rjmp	.+26     	; 0x9ab8 <fputc+0x30>
    9a9e:	2e 81       	ldd	r18, Y+6	; 0x06
    9aa0:	3f 81       	ldd	r19, Y+7	; 0x07
    9aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    9aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    9aa6:	28 17       	cp	r18, r24
    9aa8:	39 07       	cpc	r19, r25
    9aaa:	64 f4       	brge	.+24     	; 0x9ac4 <fputc+0x3c>
    9aac:	e8 81       	ld	r30, Y
    9aae:	f9 81       	ldd	r31, Y+1	; 0x01
    9ab0:	01 93       	st	Z+, r16
    9ab2:	e8 83       	st	Y, r30
    9ab4:	f9 83       	std	Y+1, r31	; 0x01
    9ab6:	06 c0       	rjmp	.+12     	; 0x9ac4 <fputc+0x3c>
    9ab8:	e8 85       	ldd	r30, Y+8	; 0x08
    9aba:	f9 85       	ldd	r31, Y+9	; 0x09
    9abc:	80 2f       	mov	r24, r16
    9abe:	19 95       	eicall
    9ac0:	89 2b       	or	r24, r25
    9ac2:	31 f4       	brne	.+12     	; 0x9ad0 <fputc+0x48>
    9ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    9ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    9ac8:	01 96       	adiw	r24, 0x01	; 1
    9aca:	8e 83       	std	Y+6, r24	; 0x06
    9acc:	9f 83       	std	Y+7, r25	; 0x07
    9ace:	02 c0       	rjmp	.+4      	; 0x9ad4 <fputc+0x4c>
    9ad0:	0f ef       	ldi	r16, 0xFF	; 255
    9ad2:	1f ef       	ldi	r17, 0xFF	; 255
    9ad4:	c8 01       	movw	r24, r16
    9ad6:	df 91       	pop	r29
    9ad8:	cf 91       	pop	r28
    9ada:	1f 91       	pop	r17
    9adc:	0f 91       	pop	r16
    9ade:	08 95       	ret

00009ae0 <__ultoa_invert>:
    9ae0:	fa 01       	movw	r30, r20
    9ae2:	aa 27       	eor	r26, r26
    9ae4:	28 30       	cpi	r18, 0x08	; 8
    9ae6:	51 f1       	breq	.+84     	; 0x9b3c <__ultoa_invert+0x5c>
    9ae8:	20 31       	cpi	r18, 0x10	; 16
    9aea:	81 f1       	breq	.+96     	; 0x9b4c <__ultoa_invert+0x6c>
    9aec:	e8 94       	clt
    9aee:	6f 93       	push	r22
    9af0:	6e 7f       	andi	r22, 0xFE	; 254
    9af2:	6e 5f       	subi	r22, 0xFE	; 254
    9af4:	7f 4f       	sbci	r23, 0xFF	; 255
    9af6:	8f 4f       	sbci	r24, 0xFF	; 255
    9af8:	9f 4f       	sbci	r25, 0xFF	; 255
    9afa:	af 4f       	sbci	r26, 0xFF	; 255
    9afc:	b1 e0       	ldi	r27, 0x01	; 1
    9afe:	3e d0       	rcall	.+124    	; 0x9b7c <__ultoa_invert+0x9c>
    9b00:	b4 e0       	ldi	r27, 0x04	; 4
    9b02:	3c d0       	rcall	.+120    	; 0x9b7c <__ultoa_invert+0x9c>
    9b04:	67 0f       	add	r22, r23
    9b06:	78 1f       	adc	r23, r24
    9b08:	89 1f       	adc	r24, r25
    9b0a:	9a 1f       	adc	r25, r26
    9b0c:	a1 1d       	adc	r26, r1
    9b0e:	68 0f       	add	r22, r24
    9b10:	79 1f       	adc	r23, r25
    9b12:	8a 1f       	adc	r24, r26
    9b14:	91 1d       	adc	r25, r1
    9b16:	a1 1d       	adc	r26, r1
    9b18:	6a 0f       	add	r22, r26
    9b1a:	71 1d       	adc	r23, r1
    9b1c:	81 1d       	adc	r24, r1
    9b1e:	91 1d       	adc	r25, r1
    9b20:	a1 1d       	adc	r26, r1
    9b22:	20 d0       	rcall	.+64     	; 0x9b64 <__ultoa_invert+0x84>
    9b24:	09 f4       	brne	.+2      	; 0x9b28 <__ultoa_invert+0x48>
    9b26:	68 94       	set
    9b28:	3f 91       	pop	r19
    9b2a:	2a e0       	ldi	r18, 0x0A	; 10
    9b2c:	26 9f       	mul	r18, r22
    9b2e:	11 24       	eor	r1, r1
    9b30:	30 19       	sub	r19, r0
    9b32:	30 5d       	subi	r19, 0xD0	; 208
    9b34:	31 93       	st	Z+, r19
    9b36:	de f6       	brtc	.-74     	; 0x9aee <__ultoa_invert+0xe>
    9b38:	cf 01       	movw	r24, r30
    9b3a:	08 95       	ret
    9b3c:	46 2f       	mov	r20, r22
    9b3e:	47 70       	andi	r20, 0x07	; 7
    9b40:	40 5d       	subi	r20, 0xD0	; 208
    9b42:	41 93       	st	Z+, r20
    9b44:	b3 e0       	ldi	r27, 0x03	; 3
    9b46:	0f d0       	rcall	.+30     	; 0x9b66 <__ultoa_invert+0x86>
    9b48:	c9 f7       	brne	.-14     	; 0x9b3c <__ultoa_invert+0x5c>
    9b4a:	f6 cf       	rjmp	.-20     	; 0x9b38 <__ultoa_invert+0x58>
    9b4c:	46 2f       	mov	r20, r22
    9b4e:	4f 70       	andi	r20, 0x0F	; 15
    9b50:	40 5d       	subi	r20, 0xD0	; 208
    9b52:	4a 33       	cpi	r20, 0x3A	; 58
    9b54:	18 f0       	brcs	.+6      	; 0x9b5c <__ultoa_invert+0x7c>
    9b56:	49 5d       	subi	r20, 0xD9	; 217
    9b58:	31 fd       	sbrc	r19, 1
    9b5a:	40 52       	subi	r20, 0x20	; 32
    9b5c:	41 93       	st	Z+, r20
    9b5e:	02 d0       	rcall	.+4      	; 0x9b64 <__ultoa_invert+0x84>
    9b60:	a9 f7       	brne	.-22     	; 0x9b4c <__ultoa_invert+0x6c>
    9b62:	ea cf       	rjmp	.-44     	; 0x9b38 <__ultoa_invert+0x58>
    9b64:	b4 e0       	ldi	r27, 0x04	; 4
    9b66:	a6 95       	lsr	r26
    9b68:	97 95       	ror	r25
    9b6a:	87 95       	ror	r24
    9b6c:	77 95       	ror	r23
    9b6e:	67 95       	ror	r22
    9b70:	ba 95       	dec	r27
    9b72:	c9 f7       	brne	.-14     	; 0x9b66 <__ultoa_invert+0x86>
    9b74:	00 97       	sbiw	r24, 0x00	; 0
    9b76:	61 05       	cpc	r22, r1
    9b78:	71 05       	cpc	r23, r1
    9b7a:	08 95       	ret
    9b7c:	9b 01       	movw	r18, r22
    9b7e:	ac 01       	movw	r20, r24
    9b80:	0a 2e       	mov	r0, r26
    9b82:	06 94       	lsr	r0
    9b84:	57 95       	ror	r21
    9b86:	47 95       	ror	r20
    9b88:	37 95       	ror	r19
    9b8a:	27 95       	ror	r18
    9b8c:	ba 95       	dec	r27
    9b8e:	c9 f7       	brne	.-14     	; 0x9b82 <__ultoa_invert+0xa2>
    9b90:	62 0f       	add	r22, r18
    9b92:	73 1f       	adc	r23, r19
    9b94:	84 1f       	adc	r24, r20
    9b96:	95 1f       	adc	r25, r21
    9b98:	a0 1d       	adc	r26, r0
    9b9a:	08 95       	ret

00009b9c <_exit>:
    9b9c:	f8 94       	cli

00009b9e <__stop_program>:
    9b9e:	ff cf       	rjmp	.-2      	; 0x9b9e <__stop_program>
