
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000133c  00802000  0000c112  0000c1a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002922  0080333c  0080333c  0000d4e2  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  0000d4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000f410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000fb78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001bb2  00000000  00000000  0000fc18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a2ff  00000000  00000000  000117ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a05  00000000  00000000  0001bac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000083fd  00000000  00000000  0001c4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b80  00000000  00000000  000248cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000049fa  00000000  00000000  0002544c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000076b6  00000000  00000000  00029e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000618  00000000  00000000  000314fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 46 4b 	jmp	0x968c	; 0x968c <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 a1 41 	jmp	0x8342	; 0x8342 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 3c 33 	jmp	0x6678	; 0x6678 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 7c 31 	jmp	0x62f8	; 0x62f8 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e3       	ldi	r17, 0x33	; 51
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e2 e1       	ldi	r30, 0x12	; 18
     200:	f1 ec       	ldi	r31, 0xC1	; 193
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	ac 33       	cpi	r26, 0x3C	; 60
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1c e5       	ldi	r17, 0x5C	; 92
     214:	ac e3       	ldi	r26, 0x3C	; 60
     216:	b3 e3       	ldi	r27, 0x33	; 51
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	ae 35       	cpi	r26, 0x5E	; 94
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 13 54 	call	0xa826	; 0xa826 <main>
     226:	0c 94 87 60 	jmp	0xc10e	; 0xc10e <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;



void Debug_Init(uint32_t baud){
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     232:	e0 e4       	ldi	r30, 0x40	; 64
     234:	f6 e0       	ldi	r31, 0x06	; 6
     236:	88 e0       	ldi	r24, 0x08	; 8
     238:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     23e:	e0 e6       	ldi	r30, 0x60	; 96
     240:	f6 e0       	ldi	r31, 0x06	; 6
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.Debug_RTS_CNTL = PORT_OPC_PULLUP_gc;
     246:	88 e1       	ldi	r24, 0x18	; 24
     248:	80 8b       	std	Z+16, r24	; 0x10


	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     24a:	e0 ea       	ldi	r30, 0xA0	; 160
     24c:	f8 e0       	ldi	r31, 0x08	; 8
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     252:	20 38       	cpi	r18, 0x80	; 128
     254:	85 e2       	ldi	r24, 0x25	; 37
     256:	38 07       	cpc	r19, r24
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	48 07       	cpc	r20, r24
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	19 f4       	brne	.+6      	; 0x268 <Debug_Init+0x3a>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     262:	8f e5       	ldi	r24, 0x5F	; 95
     264:	86 83       	std	Z+6, r24	; 0x06
     266:	06 c0       	rjmp	.+12     	; 0x274 <Debug_Init+0x46>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 460800){
     268:	20 50       	subi	r18, 0x00	; 0
     26a:	38 40       	sbci	r19, 0x08	; 8
     26c:	47 40       	sbci	r20, 0x07	; 7
     26e:	50 40       	sbci	r21, 0x00	; 0
     270:	11 f4       	brne	.+4      	; 0x276 <Debug_Init+0x48>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     272:	96 83       	std	Z+6, r25	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
     274:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     276:	e0 ea       	ldi	r30, 0xA0	; 160
     278:	f8 e0       	ldi	r31, 0x08	; 8
     27a:	80 91 a4 08 	lds	r24, 0x08A4
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     282:	80 91 a4 08 	lds	r24, 0x08A4
     286:	88 60       	ori	r24, 0x08	; 8
     288:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     28a:	80 91 a3 08 	lds	r24, 0x08A3
     28e:	80 62       	ori	r24, 0x20	; 32
     290:	83 83       	std	Z+3, r24	; 0x03
}
     292:	08 95       	ret

00000294 <Debug_ClearBuffer>:
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     294:	80 91 6e 33 	lds	r24, 0x336E
     298:	90 91 6f 33 	lds	r25, 0x336F
     29c:	80 93 70 33 	sts	0x3370, r24
     2a0:	90 93 71 33 	sts	0x3371, r25
}
     2a4:	08 95       	ret

000002a6 <Debug_CharReadyToRead>:


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     2a6:	20 91 70 33 	lds	r18, 0x3370
     2aa:	30 91 71 33 	lds	r19, 0x3371
     2ae:	80 91 6e 33 	lds	r24, 0x336E
     2b2:	90 91 6f 33 	lds	r25, 0x336F
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <Debug_CharReadyToRead+0x1a>
     2be:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     2c0:	84 2f       	mov	r24, r20
     2c2:	08 95       	ret

000002c4 <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     2c4:	88 23       	and	r24, r24
     2c6:	59 f0       	breq	.+22     	; 0x2de <Debug_GetByte+0x1a>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     2c8:	20 91 70 33 	lds	r18, 0x3370
     2cc:	30 91 71 33 	lds	r19, 0x3371
     2d0:	80 91 6e 33 	lds	r24, 0x336E
     2d4:	90 91 6f 33 	lds	r25, 0x336F
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	a9 f3       	breq	.-22     	; 0x2c8 <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     2de:	e0 91 6e 33 	lds	r30, 0x336E
     2e2:	f0 91 6f 33 	lds	r31, 0x336F
     2e6:	ec 5c       	subi	r30, 0xCC	; 204
     2e8:	f4 4b       	sbci	r31, 0xB4	; 180
     2ea:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     2ec:	80 91 6e 33 	lds	r24, 0x336E
     2f0:	90 91 6f 33 	lds	r25, 0x336F
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	80 93 6e 33 	sts	0x336E, r24
     2fa:	90 93 6f 33 	sts	0x336F, r25
	if(Debug_readLocation >= Debug_BufferSize){
     2fe:	80 91 6e 33 	lds	r24, 0x336E
     302:	90 91 6f 33 	lds	r25, 0x336F
     306:	80 50       	subi	r24, 0x00	; 0
     308:	94 40       	sbci	r25, 0x04	; 4
     30a:	20 f0       	brcs	.+8      	; 0x314 <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     30c:	10 92 6e 33 	sts	0x336E, r1
     310:	10 92 6f 33 	sts	0x336F, r1
	}
	return tmp;
}
     314:	8e 2f       	mov	r24, r30
     316:	08 95       	ret

00000318 <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     318:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     31a:	80 91 a1 08 	lds	r24, 0x08A1
     31e:	85 ff       	sbrs	r24, 5
     320:	fc cf       	rjmp	.-8      	; 0x31a <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     322:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     326:	90 93 a0 08 	sts	0x08A0, r25
}
     32a:	08 95       	ret

0000032c <__vector_25>:
		Debug_SendByte(13);
		Debug_SendByte(10);
	}
}

ISR(USARTC0_RXC_vect){
     32c:	1f 92       	push	r1
     32e:	0f 92       	push	r0
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	0f 92       	push	r0
     334:	0b b6       	in	r0, 0x3b	; 59
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	2f 93       	push	r18
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     344:	e0 91 70 33 	lds	r30, 0x3370
     348:	f0 91 71 33 	lds	r31, 0x3371
     34c:	80 91 a0 08 	lds	r24, 0x08A0
     350:	ec 5c       	subi	r30, 0xCC	; 204
     352:	f4 4b       	sbci	r31, 0xB4	; 180
     354:	80 83       	st	Z, r24
	Debug_writeLocation++;
     356:	80 91 70 33 	lds	r24, 0x3370
     35a:	90 91 71 33 	lds	r25, 0x3371
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	80 93 70 33 	sts	0x3370, r24
     364:	90 93 71 33 	sts	0x3371, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     368:	80 91 70 33 	lds	r24, 0x3370
     36c:	90 91 71 33 	lds	r25, 0x3371
     370:	80 50       	subi	r24, 0x00	; 0
     372:	94 40       	sbci	r25, 0x04	; 4
     374:	20 f0       	brcs	.+8      	; 0x37e <__vector_25+0x52>
		Debug_writeLocation = 0;
     376:	10 92 70 33 	sts	0x3370, r1
     37a:	10 92 71 33 	sts	0x3371, r1
	}
}
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	0b be       	out	0x3b, r0	; 59
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <Debug_GetTime>:

uint32_t Debug_GetTime(uint16_t timeOut){
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ac 01       	movw	r20, r24
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     3aa:	80 91 6e 33 	lds	r24, 0x336E
     3ae:	90 91 6f 33 	lds	r25, 0x336F
     3b2:	80 93 70 33 	sts	0x3370, r24
     3b6:	90 93 71 33 	sts	0x3371, r25
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     3ba:	80 91 a1 08 	lds	r24, 0x08A1
     3be:	85 ff       	sbrs	r24, 5
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <Debug_GetTime+0x24>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     3c2:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     3c6:	84 e5       	ldi	r24, 0x54	; 84
     3c8:	80 93 a0 08 	sts	0x08A0, r24
     3cc:	ea 01       	movw	r28, r20
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	dd 24       	eor	r13, r13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d6:	96 e6       	ldi	r25, 0x66	; 102
     3d8:	a9 2e       	mov	r10, r25
     3da:	9e e0       	ldi	r25, 0x0E	; 14
     3dc:	b9 2e       	mov	r11, r25
     3de:	14 c0       	rjmp	.+40     	; 0x408 <Debug_GetTime+0x72>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     3e0:	20 91 70 33 	lds	r18, 0x3370
     3e4:	30 91 71 33 	lds	r19, 0x3371
     3e8:	80 91 6e 33 	lds	r24, 0x336E
     3ec:	90 91 6f 33 	lds	r25, 0x336F
     3f0:	28 17       	cp	r18, r24
     3f2:	39 07       	cpc	r19, r25
     3f4:	d9 f4       	brne	.+54     	; 0x42c <Debug_GetTime+0x96>
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <Debug_GetTime+0x6a>
         tempTime  |= Debug_GetByte(true) & 0xFF;
         byteCounter++;
         if(byteCounter == 4){
            return tempTime;
         } else {
             tempTime <<= 8;
     3f8:	ee 24       	eor	r14, r14
     3fa:	f2 2e       	mov	r15, r18
     3fc:	03 2f       	mov	r16, r19
     3fe:	14 2f       	mov	r17, r20
     400:	c5 01       	movw	r24, r10
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <Debug_GetTime+0x6c>
         }
      }
      _delay_ms(1);
      to--;
     406:	21 97       	sbiw	r28, 0x01	; 1
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
     408:	20 97       	sbiw	r28, 0x00	; 0
     40a:	51 f7       	brne	.-44     	; 0x3e0 <Debug_GetTime+0x4a>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	50 e0       	ldi	r21, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return 0;
}
     414:	b9 01       	movw	r22, r18
     416:	ca 01       	movw	r24, r20
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	bf 90       	pop	r11
     428:	af 90       	pop	r10
     42a:	08 95       	ret
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
      if(Debug_CharReadyToRead()){
         tempTime  |= Debug_GetByte(true) & 0xFF;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
     432:	28 2f       	mov	r18, r24
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	2e 29       	or	r18, r14
     43c:	3f 29       	or	r19, r15
     43e:	40 2b       	or	r20, r16
     440:	51 2b       	or	r21, r17
         byteCounter++;
     442:	d3 94       	inc	r13
         if(byteCounter == 4){
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	d8 16       	cp	r13, r24
     448:	b9 f6       	brne	.-82     	; 0x3f8 <Debug_GetTime+0x62>
     44a:	e4 cf       	rjmp	.-56     	; 0x414 <Debug_GetTime+0x7e>

0000044c <Debug_Connected>:
      to--;
    }
    return 0;
}

bool Debug_Connected(uint16_t timeOut){
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ac 01       	movw	r20, r24
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     456:	80 91 6e 33 	lds	r24, 0x336E
     45a:	90 91 6f 33 	lds	r25, 0x336F
     45e:	80 93 70 33 	sts	0x3370, r24
     462:	90 93 71 33 	sts	0x3371, r25
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     466:	80 91 a1 08 	lds	r24, 0x08A1
     46a:	85 ff       	sbrs	r24, 5
     46c:	fc cf       	rjmp	.-8      	; 0x466 <Debug_Connected+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     46e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     472:	80 e5       	ldi	r24, 0x50	; 80
     474:	80 93 a0 08 	sts	0x08A0, r24
     478:	ea 01       	movw	r28, r20
     47a:	06 e6       	ldi	r16, 0x66	; 102
     47c:	1e e0       	ldi	r17, 0x0E	; 14
     47e:	0f c0       	rjmp	.+30     	; 0x49e <Debug_Connected+0x52>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     480:	20 91 70 33 	lds	r18, 0x3370
     484:	30 91 71 33 	lds	r19, 0x3371
     488:	80 91 6e 33 	lds	r24, 0x336E
     48c:	90 91 6f 33 	lds	r25, 0x336F
     490:	28 17       	cp	r18, r24
     492:	39 07       	cpc	r19, r25
     494:	61 f4       	brne	.+24     	; 0x4ae <Debug_Connected+0x62>
     496:	c8 01       	movw	r24, r16
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <Debug_Connected+0x4c>
         if(Debug_GetByte(true) == 'P'){
           return true;
         }
      }
      _delay_ms(1);
      to--;
     49c:	21 97       	sbiw	r28, 0x01	; 1

bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
     49e:	20 97       	sbiw	r28, 0x00	; 0
     4a0:	79 f7       	brne	.-34     	; 0x480 <Debug_Connected+0x34>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return false;
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
      if(Debug_CharReadyToRead()){
         if(Debug_GetByte(true) == 'P'){
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
     4b4:	80 35       	cpi	r24, 0x50	; 80
     4b6:	79 f7       	brne	.-34     	; 0x496 <Debug_Connected+0x4a>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	f4 cf       	rjmp	.-24     	; 0x4a4 <Debug_Connected+0x58>

000004bc <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     4bc:	20 91 1d 01 	lds	r18, 0x011D
     4c0:	92 2f       	mov	r25, r18
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	80 93 74 33 	sts	0x3374, r24
     4c8:	90 93 75 33 	sts	0x3375, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     4cc:	80 91 74 33 	lds	r24, 0x3374
     4d0:	90 91 75 33 	lds	r25, 0x3375
     4d4:	20 91 1c 01 	lds	r18, 0x011C
     4d8:	82 0f       	add	r24, r18
     4da:	91 1d       	adc	r25, r1
     4dc:	80 93 74 33 	sts	0x3374, r24
     4e0:	90 93 75 33 	sts	0x3375, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     4e4:	80 91 74 33 	lds	r24, 0x3374
     4e8:	90 91 75 33 	lds	r25, 0x3375
     4ec:	81 51       	subi	r24, 0x11	; 17
     4ee:	9d 43       	sbci	r25, 0x3D	; 61
     4f0:	80 93 74 33 	sts	0x3374, r24
     4f4:	90 93 75 33 	sts	0x3375, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     4f8:	20 91 74 33 	lds	r18, 0x3374
     4fc:	30 91 75 33 	lds	r19, 0x3375
     500:	80 91 72 33 	lds	r24, 0x3372
     504:	90 91 73 33 	lds	r25, 0x3373
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	28 17       	cp	r18, r24
     50c:	39 07       	cpc	r19, r25
     50e:	09 f0       	breq	.+2      	; 0x512 <Wifi_CharReadyToRead+0x56>
     510:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     512:	84 2f       	mov	r24, r20
     514:	08 95       	ret

00000516 <Wifi_ClearBuffer>:
	Wifi_ClearBuffer();
    timeOutCounter = 0;
}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     516:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
     51a:	88 23       	and	r24, r24
     51c:	31 f1       	breq	.+76     	; 0x56a <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     51e:	20 91 1d 01 	lds	r18, 0x011D
     522:	92 2f       	mov	r25, r18
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	80 93 74 33 	sts	0x3374, r24
     52a:	90 93 75 33 	sts	0x3375, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     52e:	80 91 74 33 	lds	r24, 0x3374
     532:	90 91 75 33 	lds	r25, 0x3375
     536:	20 91 1c 01 	lds	r18, 0x011C
     53a:	82 0f       	add	r24, r18
     53c:	91 1d       	adc	r25, r1
     53e:	80 93 74 33 	sts	0x3374, r24
     542:	90 93 75 33 	sts	0x3375, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     546:	80 91 74 33 	lds	r24, 0x3374
     54a:	90 91 75 33 	lds	r25, 0x3375
     54e:	81 51       	subi	r24, 0x11	; 17
     550:	9d 43       	sbci	r25, 0x3D	; 61
     552:	80 93 74 33 	sts	0x3374, r24
     556:	90 93 75 33 	sts	0x3375, r25
		Wifi_readLocation = Wifi_writeLocation;
     55a:	80 91 74 33 	lds	r24, 0x3374
     55e:	90 91 75 33 	lds	r25, 0x3375
     562:	80 93 72 33 	sts	0x3372, r24
     566:	90 93 73 33 	sts	0x3373, r25
     56a:	08 95       	ret

0000056c <Wifi_Init>:

volatile uint16_t timeOutCounter = 0;
bool uploadTimedOut = false;


void Wifi_Init(uint32_t baud){
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24


	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     570:	80 e8       	ldi	r24, 0x80	; 128
     572:	e0 ea       	ldi	r30, 0xA0	; 160
     574:	f6 e0       	ldi	r31, 0x06	; 6
     576:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.DIRCLR = (1<<Wifi_RTS_pin);
     578:	e0 e6       	ldi	r30, 0x60	; 96
     57a:	f6 e0       	ldi	r31, 0x06	; 6
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.Wifi_RTS_CNTL = PORT_OPC_PULLUP_gc;
     580:	88 e1       	ldi	r24, 0x18	; 24
     582:	81 8b       	std	Z+17, r24	; 0x11
    //Wifi_Flow_Port.DIRSET = (1<<Wifi_CTS_pin);
    //Wifi_Flow_Port.OUTCLR = (1<<Wifi_CTS_pin);


	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     584:	a0 ea       	ldi	r26, 0xA0	; 160
     586:	ba e0       	ldi	r27, 0x0A	; 10
     588:	80 91 a4 0a 	lds	r24, 0x0AA4
     58c:	8f 7e       	andi	r24, 0xEF	; 239
     58e:	14 96       	adiw	r26, 0x04	; 4
     590:	8c 93       	st	X, r24
     592:	14 97       	sbiw	r26, 0x04	; 4
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     594:	80 91 a4 0a 	lds	r24, 0x0AA4
     598:	87 7f       	andi	r24, 0xF7	; 247
     59a:	14 96       	adiw	r26, 0x04	; 4
     59c:	8c 93       	st	X, r24
     59e:	14 97       	sbiw	r26, 0x04	; 4
	//_delay_ms(1000);


	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     5a0:	e0 e8       	ldi	r30, 0x80	; 128
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
     5a4:	88 e0       	ldi	r24, 0x08	; 8
     5a6:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	15 96       	adiw	r26, 0x05	; 5
     5b0:	8c 93       	st	X, r24
     5b2:	15 97       	sbiw	r26, 0x05	; 5
	 	    	
	if(baud == 9600){
     5b4:	20 38       	cpi	r18, 0x80	; 128
     5b6:	95 e2       	ldi	r25, 0x25	; 37
     5b8:	39 07       	cpc	r19, r25
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	49 07       	cpc	r20, r25
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	59 07       	cpc	r21, r25
     5c2:	11 f4       	brne	.+4      	; 0x5c8 <Wifi_Init+0x5c>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     5c4:	8f e5       	ldi	r24, 0x5F	; 95
     5c6:	1b c0       	rjmp	.+54     	; 0x5fe <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     5c8:	20 30       	cpi	r18, 0x00	; 0
     5ca:	92 ec       	ldi	r25, 0xC2	; 194
     5cc:	39 07       	cpc	r19, r25
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	49 07       	cpc	r20, r25
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	59 07       	cpc	r21, r25
     5d6:	11 f4       	brne	.+4      	; 0x5dc <Wifi_Init+0x70>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     5d8:	87 e0       	ldi	r24, 0x07	; 7
     5da:	11 c0       	rjmp	.+34     	; 0x5fe <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     5dc:	20 30       	cpi	r18, 0x00	; 0
     5de:	94 e8       	ldi	r25, 0x84	; 132
     5e0:	39 07       	cpc	r19, r25
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	49 07       	cpc	r20, r25
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	59 07       	cpc	r21, r25
     5ea:	49 f0       	breq	.+18     	; 0x5fe <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     5ec:	20 30       	cpi	r18, 0x00	; 0
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	38 07       	cpc	r19, r24
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	48 07       	cpc	r20, r24
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	58 07       	cpc	r21, r24
     5fa:	29 f4       	brne	.+10     	; 0x606 <Wifi_Init+0x9a>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	16 96       	adiw	r26, 0x06	; 6
     600:	8c 93       	st	X, r24
     602:	16 97       	sbiw	r26, 0x06	; 6
     604:	08 c0       	rjmp	.+16     	; 0x616 <Wifi_Init+0xaa>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     606:	20 50       	subi	r18, 0x00	; 0
     608:	30 41       	sbci	r19, 0x10	; 16
     60a:	4e 40       	sbci	r20, 0x0E	; 14
     60c:	50 40       	sbci	r21, 0x00	; 0
     60e:	29 f4       	brne	.+10     	; 0x61a <Wifi_Init+0xae>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     610:	16 96       	adiw	r26, 0x06	; 6
     612:	1c 92       	st	X, r1
     614:	16 97       	sbiw	r26, 0x06	; 6
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     616:	17 96       	adiw	r26, 0x07	; 7
     618:	1c 92       	st	X, r1
		//Wifi_Usart.CTRLB |= USART_CLK2X_bm;
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     61a:	e0 ea       	ldi	r30, 0xA0	; 160
     61c:	fa e0       	ldi	r31, 0x0A	; 10
     61e:	80 91 a4 0a 	lds	r24, 0x0AA4
     622:	80 61       	ori	r24, 0x10	; 16
     624:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     626:	80 91 a4 0a 	lds	r24, 0x0AA4
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	84 83       	std	Z+4, r24	; 0x04

	Wifi_ClearBuffer();
     62e:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
    timeOutCounter = 0;
     632:	10 92 86 33 	sts	0x3386, r1
     636:	10 92 87 33 	sts	0x3387, r1
}
     63a:	08 95       	ret

0000063c <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     63c:	88 23       	and	r24, r24
     63e:	21 f0       	breq	.+8      	; 0x648 <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     640:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
     644:	88 23       	and	r24, r24
     646:	e1 f3       	breq	.-8      	; 0x640 <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     648:	e0 91 72 33 	lds	r30, 0x3372
     64c:	f0 91 73 33 	lds	r31, 0x3373
     650:	ef 5e       	subi	r30, 0xEF	; 239
     652:	f2 4c       	sbci	r31, 0xC2	; 194
     654:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     656:	80 91 72 33 	lds	r24, 0x3372
     65a:	90 91 73 33 	lds	r25, 0x3373
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	80 93 72 33 	sts	0x3372, r24
     664:	90 93 73 33 	sts	0x3373, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     668:	80 91 72 33 	lds	r24, 0x3372
     66c:	90 91 73 33 	lds	r25, 0x3373
     670:	80 50       	subi	r24, 0x00	; 0
     672:	94 40       	sbci	r25, 0x04	; 4
     674:	20 f0       	brcs	.+8      	; 0x67e <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     676:	10 92 72 33 	sts	0x3372, r1
     67a:	10 92 73 33 	sts	0x3373, r1
	}
	return tmp;
}
     67e:	8e 2f       	mov	r24, r30
     680:	08 95       	ret

00000682 <Wifi_Connected>:
    time_secs = atol(timeString);

	return true;
}

bool Wifi_Connected(uint16_t timeOut){
     682:	ac 01       	movw	r20, r24
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	66 e6       	ldi	r22, 0x66	; 102
     68a:	7e e0       	ldi	r23, 0x0E	; 14
     68c:	0d c0       	rjmp	.+26     	; 0x6a8 <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     68e:	80 91 a8 06 	lds	r24, 0x06A8
     692:	87 ff       	sbrs	r24, 7
     694:	04 c0       	rjmp	.+8      	; 0x69e <Wifi_Connected+0x1c>
			connected = true;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 82 33 	sts	0x3382, r24
     69c:	08 95       	ret
     69e:	fb 01       	movw	r30, r22
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <Wifi_Connected+0x1e>

	return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     6a4:	2f 5f       	subi	r18, 0xFF	; 255
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	24 17       	cp	r18, r20
     6aa:	35 07       	cpc	r19, r21
     6ac:	80 f3       	brcs	.-32     	; 0x68e <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     6ae:	10 92 82 33 	sts	0x3382, r1
     6b2:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     6b4:	08 95       	ret

000006b6 <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f6 e0       	ldi	r31, 0x06	; 6
     6ba:	88 e1       	ldi	r24, 0x18	; 24
     6bc:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     6be:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     6c0:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     6c2:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     6c4:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	8c 67       	ori	r24, 0x7C	; 124
     6ca:	82 83       	std	Z+2, r24	; 0x02
}
     6cc:	08 95       	ret

000006ce <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f6 e0       	ldi	r31, 0x06	; 6
     6d2:	80 85       	ldd	r24, Z+8	; 0x08
}
     6d4:	8c 77       	andi	r24, 0x7C	; 124
     6d6:	08 95       	ret

000006d8 <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6d8:	40 91 a8 06 	lds	r20, 0x06A8
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Dpad_CheckButton+0x10>
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	8a 95       	dec	r24
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <Dpad_CheckButton+0xc>
     6ec:	4c 77       	andi	r20, 0x7C	; 124
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	24 23       	and	r18, r20
     6f2:	35 23       	and	r19, r21
     6f4:	12 16       	cp	r1, r18
     6f6:	13 06       	cpc	r1, r19
     6f8:	0c f0       	brlt	.+2      	; 0x6fc <Dpad_CheckButton+0x24>
     6fa:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     6fc:	89 2f       	mov	r24, r25
     6fe:	08 95       	ret

00000700 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     700:	e0 e2       	ldi	r30, 0x20	; 32
     702:	f6 e0       	ldi	r31, 0x06	; 6
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	83 6f       	ori	r24, 0xF3	; 243
     708:	81 83       	std	Z+1, r24	; 0x01
}
     70a:	08 95       	ret

0000070c <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	02 c0       	rjmp	.+4      	; 0x716 <Leds_Set+0xa>
     712:	22 0f       	add	r18, r18
     714:	33 1f       	adc	r19, r19
     716:	8a 95       	dec	r24
     718:	e2 f7       	brpl	.-8      	; 0x712 <Leds_Set+0x6>
     71a:	e0 e2       	ldi	r30, 0x20	; 32
     71c:	f6 e0       	ldi	r31, 0x06	; 6
     71e:	25 83       	std	Z+5, r18	; 0x05
}
     720:	08 95       	ret

00000722 <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	02 c0       	rjmp	.+4      	; 0x72c <Leds_Clear+0xa>
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	8a 95       	dec	r24
     72e:	e2 f7       	brpl	.-8      	; 0x728 <Leds_Clear+0x6>
     730:	e0 e2       	ldi	r30, 0x20	; 32
     732:	f6 e0       	ldi	r31, 0x06	; 6
     734:	26 83       	std	Z+6, r18	; 0x06
}
     736:	08 95       	ret

00000738 <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     738:	21 e0       	ldi	r18, 0x01	; 1
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <Leds_Toggle+0xa>
     73e:	22 0f       	add	r18, r18
     740:	33 1f       	adc	r19, r19
     742:	8a 95       	dec	r24
     744:	e2 f7       	brpl	.-8      	; 0x73e <Leds_Toggle+0x6>
     746:	e0 e2       	ldi	r30, 0x20	; 32
     748:	f6 e0       	ldi	r31, 0x06	; 6
     74a:	27 83       	std	Z+7, r18	; 0x07
}
     74c:	08 95       	ret

0000074e <Rs232_Init>:
uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     74e:	e0 e6       	ldi	r30, 0x60	; 96
     750:	f6 e0       	ldi	r31, 0x06	; 6
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     75a:	e0 ea       	ldi	r30, 0xA0	; 160
     75c:	f9 e0       	ldi	r31, 0x09	; 9
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     762:	8f e5       	ldi	r24, 0x5F	; 95
     764:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     766:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     768:	84 81       	ldd	r24, Z+4	; 0x04
     76a:	80 61       	ori	r24, 0x10	; 16
     76c:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     76e:	84 81       	ldd	r24, Z+4	; 0x04
     770:	88 60       	ori	r24, 0x08	; 8
     772:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_HI_gc;
     774:	83 81       	ldd	r24, Z+3	; 0x03
     776:	80 63       	ori	r24, 0x30	; 48
     778:	83 83       	std	Z+3, r24	; 0x03
}
     77a:	08 95       	ret

0000077c <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     77c:	20 91 8b 33 	lds	r18, 0x338B
     780:	30 91 8c 33 	lds	r19, 0x338C
     784:	80 91 89 33 	lds	r24, 0x3389
     788:	90 91 8a 33 	lds	r25, 0x338A
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	28 17       	cp	r18, r24
     790:	39 07       	cpc	r19, r25
     792:	09 f0       	breq	.+2      	; 0x796 <Rs232_CharReadyToRead+0x1a>
     794:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     796:	84 2f       	mov	r24, r20
     798:	08 95       	ret

0000079a <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     79a:	88 23       	and	r24, r24
     79c:	59 f0       	breq	.+22     	; 0x7b4 <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     79e:	20 91 8b 33 	lds	r18, 0x338B
     7a2:	30 91 8c 33 	lds	r19, 0x338C
     7a6:	80 91 89 33 	lds	r24, 0x3389
     7aa:	90 91 8a 33 	lds	r25, 0x338A
     7ae:	28 17       	cp	r18, r24
     7b0:	39 07       	cpc	r19, r25
     7b2:	a9 f3       	breq	.-22     	; 0x79e <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     7b4:	e0 91 89 33 	lds	r30, 0x3389
     7b8:	f0 91 8a 33 	lds	r31, 0x338A
     7bc:	e8 5e       	subi	r30, 0xE8	; 232
     7be:	f8 4a       	sbci	r31, 0xA8	; 168
     7c0:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     7c2:	80 91 89 33 	lds	r24, 0x3389
     7c6:	90 91 8a 33 	lds	r25, 0x338A
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	80 93 89 33 	sts	0x3389, r24
     7d0:	90 93 8a 33 	sts	0x338A, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     7d4:	80 91 89 33 	lds	r24, 0x3389
     7d8:	90 91 8a 33 	lds	r25, 0x338A
     7dc:	80 50       	subi	r24, 0x00	; 0
     7de:	94 40       	sbci	r25, 0x04	; 4
     7e0:	20 f0       	brcs	.+8      	; 0x7ea <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     7e2:	10 92 89 33 	sts	0x3389, r1
     7e6:	10 92 8a 33 	sts	0x338A, r1
	}
	return tmp;
}
     7ea:	8e 2f       	mov	r24, r30
     7ec:	08 95       	ret

000007ee <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     7ee:	80 91 8b 33 	lds	r24, 0x338B
     7f2:	90 91 8c 33 	lds	r25, 0x338C
     7f6:	80 93 89 33 	sts	0x3389, r24
     7fa:	90 93 8a 33 	sts	0x338A, r25
}
     7fe:	08 95       	ret

00000800 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     800:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     802:	80 91 a1 09 	lds	r24, 0x09A1
     806:	85 ff       	sbrs	r24, 5
     808:	fc cf       	rjmp	.-8      	; 0x802 <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     80a:	90 93 a0 09 	sts	0x09A0, r25
}
     80e:	08 95       	ret

00000810 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	0b b6       	in	r0, 0x3b	; 59
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
     828:	e0 91 8b 33 	lds	r30, 0x338B
     82c:	f0 91 8c 33 	lds	r31, 0x338C
     830:	80 91 a0 09 	lds	r24, 0x09A0
     834:	e8 5e       	subi	r30, 0xE8	; 232
     836:	f8 4a       	sbci	r31, 0xA8	; 168
     838:	80 83       	st	Z, r24

	if(rs232Recording){
     83a:	80 91 96 33 	lds	r24, 0x3396
     83e:	88 23       	and	r24, r24
     840:	61 f0       	breq	.+24     	; 0x85a <__vector_88+0x4a>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
     842:	e0 91 8b 33 	lds	r30, 0x338B
     846:	f0 91 8c 33 	lds	r31, 0x338C
     84a:	e8 5e       	subi	r30, 0xE8	; 232
     84c:	f8 4a       	sbci	r31, 0xA8	; 168
     84e:	80 81       	ld	r24, Z
     850:	8a 30       	cpi	r24, 0x0A	; 10
     852:	19 f4       	brne	.+6      	; 0x85a <__vector_88+0x4a>
            okToSendAirQuality = true;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 8d 33 	sts	0x338D, r24
		}
	}
	Rs232_writeLocation++;
     85a:	80 91 8b 33 	lds	r24, 0x338B
     85e:	90 91 8c 33 	lds	r25, 0x338C
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	80 93 8b 33 	sts	0x338B, r24
     868:	90 93 8c 33 	sts	0x338C, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
     86c:	80 91 8b 33 	lds	r24, 0x338B
     870:	90 91 8c 33 	lds	r25, 0x338C
     874:	80 50       	subi	r24, 0x00	; 0
     876:	94 40       	sbci	r25, 0x04	; 4
     878:	20 f0       	brcs	.+8      	; 0x882 <__vector_88+0x72>
		Rs232_writeLocation = 0;
     87a:	10 92 8b 33 	sts	0x338B, r1
     87e:	10 92 8c 33 	sts	0x338C, r1
	}
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	2f 91       	pop	r18
     88c:	0f 90       	pop	r0
     88e:	0b be       	out	0x3b, r0	; 59
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     89a:	82 e3       	ldi	r24, 0x32	; 50
     89c:	80 93 0c 34 	sts	0x340C, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	e0 ec       	ldi	r30, 0xC0	; 192
     8a4:	f9 e0       	ldi	r31, 0x09	; 9
     8a6:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8a8:	80 91 c2 09 	lds	r24, 0x09C2
     8ac:	87 ff       	sbrs	r24, 7
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <wait_ready+0xe>
	return SD_SPI.DATA;
     8b0:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8b4:	e0 ec       	ldi	r30, 0xC0	; 192
     8b6:	f9 e0       	ldi	r31, 0x09	; 9
     8b8:	2f ef       	ldi	r18, 0xFF	; 255
     8ba:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8bc:	80 91 c2 09 	lds	r24, 0x09C2
     8c0:	87 ff       	sbrs	r24, 7
     8c2:	fc cf       	rjmp	.-8      	; 0x8bc <wait_ready+0x22>
	return SD_SPI.DATA;
     8c4:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     8c8:	9f 3f       	cpi	r25, 0xFF	; 255
     8ca:	21 f0       	breq	.+8      	; 0x8d4 <wait_ready+0x3a>
     8cc:	80 91 0c 34 	lds	r24, 0x340C
     8d0:	88 23       	and	r24, r24
     8d2:	99 f7       	brne	.-26     	; 0x8ba <wait_ready+0x20>

	return res;
}
     8d4:	89 2f       	mov	r24, r25
     8d6:	08 95       	ret

000008d8 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
	CS_LOW();
     8de:	c0 e6       	ldi	r28, 0x60	; 96
     8e0:	d6 e0       	ldi	r29, 0x06	; 6
     8e2:	10 e1       	ldi	r17, 0x10	; 16
     8e4:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     8e6:	0e 94 4d 04 	call	0x89a	; 0x89a <wait_ready>
     8ea:	8f 3f       	cpi	r24, 0xFF	; 255
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <select+0x1a>
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0c c0       	rjmp	.+24     	; 0x90a <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     8f2:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	e0 ec       	ldi	r30, 0xC0	; 192
     8f8:	f9 e0       	ldi	r31, 0x09	; 9
     8fa:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8fc:	80 91 c2 09 	lds	r24, 0x09C2
     900:	87 ff       	sbrs	r24, 7
     902:	fc cf       	rjmp	.-8      	; 0x8fc <select+0x24>
	return SD_SPI.DATA;
     904:	80 91 c3 09 	lds	r24, 0x09C3
     908:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	08 95       	ret

00000912 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     912:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     914:	84 e1       	ldi	r24, 0x14	; 20
     916:	80 93 0b 34 	sts	0x340B, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     91a:	a0 ec       	ldi	r26, 0xC0	; 192
     91c:	b9 e0       	ldi	r27, 0x09	; 9
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	13 96       	adiw	r26, 0x03	; 3
     922:	9c 93       	st	X, r25
     924:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     926:	80 91 c2 09 	lds	r24, 0x09C2
     92a:	87 ff       	sbrs	r24, 7
     92c:	fc cf       	rjmp	.-8      	; 0x926 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     92e:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     932:	8f 3f       	cpi	r24, 0xFF	; 255
     934:	29 f4       	brne	.+10     	; 0x940 <rcvr_datablock+0x2e>
     936:	80 91 0b 34 	lds	r24, 0x340B
     93a:	88 23       	and	r24, r24
     93c:	89 f7       	brne	.-30     	; 0x920 <rcvr_datablock+0xe>
     93e:	49 c0       	rjmp	.+146    	; 0x9d2 <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     940:	8e 3f       	cpi	r24, 0xFE	; 254
     942:	09 f0       	breq	.+2      	; 0x946 <rcvr_datablock+0x34>
     944:	46 c0       	rjmp	.+140    	; 0x9d2 <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     946:	a0 ec       	ldi	r26, 0xC0	; 192
     948:	b9 e0       	ldi	r27, 0x09	; 9
     94a:	9f ef       	ldi	r25, 0xFF	; 255
     94c:	13 96       	adiw	r26, 0x03	; 3
     94e:	9c 93       	st	X, r25
     950:	13 97       	sbiw	r26, 0x03	; 3
     952:	80 91 c2 09 	lds	r24, 0x09C2
     956:	87 ff       	sbrs	r24, 7
     958:	fc cf       	rjmp	.-8      	; 0x952 <rcvr_datablock+0x40>
     95a:	80 91 c3 09 	lds	r24, 0x09C3
     95e:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     960:	13 96       	adiw	r26, 0x03	; 3
     962:	9c 93       	st	X, r25
     964:	13 97       	sbiw	r26, 0x03	; 3
     966:	80 91 c2 09 	lds	r24, 0x09C2
     96a:	87 ff       	sbrs	r24, 7
     96c:	fc cf       	rjmp	.-8      	; 0x966 <rcvr_datablock+0x54>
     96e:	80 91 c3 09 	lds	r24, 0x09C3
     972:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     974:	13 96       	adiw	r26, 0x03	; 3
     976:	9c 93       	st	X, r25
     978:	13 97       	sbiw	r26, 0x03	; 3
     97a:	80 91 c2 09 	lds	r24, 0x09C2
     97e:	87 ff       	sbrs	r24, 7
     980:	fc cf       	rjmp	.-8      	; 0x97a <rcvr_datablock+0x68>
     982:	80 91 c3 09 	lds	r24, 0x09C3
     986:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     988:	13 96       	adiw	r26, 0x03	; 3
     98a:	9c 93       	st	X, r25
     98c:	13 97       	sbiw	r26, 0x03	; 3
     98e:	80 91 c2 09 	lds	r24, 0x09C2
     992:	87 ff       	sbrs	r24, 7
     994:	fc cf       	rjmp	.-8      	; 0x98e <rcvr_datablock+0x7c>
     996:	80 91 c3 09 	lds	r24, 0x09C3
     99a:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     99c:	64 50       	subi	r22, 0x04	; 4
     99e:	70 40       	sbci	r23, 0x00	; 0
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     9a2:	34 96       	adiw	r30, 0x04	; 4
     9a4:	d3 cf       	rjmp	.-90     	; 0x94c <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	e0 ec       	ldi	r30, 0xC0	; 192
     9aa:	f9 e0       	ldi	r31, 0x09	; 9
     9ac:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9ae:	80 91 c2 09 	lds	r24, 0x09C2
     9b2:	87 ff       	sbrs	r24, 7
     9b4:	fc cf       	rjmp	.-8      	; 0x9ae <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     9b6:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	e0 ec       	ldi	r30, 0xC0	; 192
     9be:	f9 e0       	ldi	r31, 0x09	; 9
     9c0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9c2:	80 91 c2 09 	lds	r24, 0x09C2
     9c6:	87 ff       	sbrs	r24, 7
     9c8:	fc cf       	rjmp	.-8      	; 0x9c2 <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     9ca:	80 91 c3 09 	lds	r24, 0x09C3
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     9d2:	80 e0       	ldi	r24, 0x00	; 0
}
     9d4:	08 95       	ret

000009d6 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ec 01       	movw	r28, r24
     9de:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     9e0:	0e 94 4d 04 	call	0x89a	; 0x89a <wait_ready>
     9e4:	8f 3f       	cpi	r24, 0xFF	; 255
     9e6:	11 f0       	breq	.+4      	; 0x9ec <xmit_datablock+0x16>
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	3f c0       	rjmp	.+126    	; 0xa6a <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     9ec:	e0 ec       	ldi	r30, 0xC0	; 192
     9ee:	f9 e0       	ldi	r31, 0x09	; 9
     9f0:	13 83       	std	Z+3, r17	; 0x03
     9f2:	80 91 c2 09 	lds	r24, 0x09C2
     9f6:	87 ff       	sbrs	r24, 7
     9f8:	fc cf       	rjmp	.-8      	; 0x9f2 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     9fa:	1d 3f       	cpi	r17, 0xFD	; 253
     9fc:	11 f4       	brne	.+4      	; 0xa02 <xmit_datablock+0x2c>
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	34 c0       	rjmp	.+104    	; 0xa6a <xmit_datablock+0x94>
     a02:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     a04:	e0 ec       	ldi	r30, 0xC0	; 192
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	88 81       	ld	r24, Y
     a0a:	83 83       	std	Z+3, r24	; 0x03
     a0c:	80 91 c2 09 	lds	r24, 0x09C2
     a10:	87 ff       	sbrs	r24, 7
     a12:	fc cf       	rjmp	.-8      	; 0xa0c <xmit_datablock+0x36>
			xmit_spi(*buff++);
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	83 83       	std	Z+3, r24	; 0x03
     a18:	80 91 c2 09 	lds	r24, 0x09C2
     a1c:	87 ff       	sbrs	r24, 7
     a1e:	fc cf       	rjmp	.-8      	; 0xa18 <xmit_datablock+0x42>
		} while (--wc);
     a20:	91 50       	subi	r25, 0x01	; 1
     a22:	11 f0       	breq	.+4      	; 0xa28 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a24:	22 96       	adiw	r28, 0x02	; 2
     a26:	f0 cf       	rjmp	.-32     	; 0xa08 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	e0 ec       	ldi	r30, 0xC0	; 192
     a2c:	f9 e0       	ldi	r31, 0x09	; 9
     a2e:	83 83       	std	Z+3, r24	; 0x03
     a30:	80 91 c2 09 	lds	r24, 0x09C2
     a34:	87 ff       	sbrs	r24, 7
     a36:	fc cf       	rjmp	.-8      	; 0xa30 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	e0 ec       	ldi	r30, 0xC0	; 192
     a3c:	f9 e0       	ldi	r31, 0x09	; 9
     a3e:	83 83       	std	Z+3, r24	; 0x03
     a40:	80 91 c2 09 	lds	r24, 0x09C2
     a44:	87 ff       	sbrs	r24, 7
     a46:	fc cf       	rjmp	.-8      	; 0xa40 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	e0 ec       	ldi	r30, 0xC0	; 192
     a4c:	f9 e0       	ldi	r31, 0x09	; 9
     a4e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a50:	80 91 c2 09 	lds	r24, 0x09C2
     a54:	87 ff       	sbrs	r24, 7
     a56:	fc cf       	rjmp	.-8      	; 0xa50 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     a58:	80 91 c3 09 	lds	r24, 0x09C3
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	8f 71       	andi	r24, 0x1F	; 31
     a60:	85 30       	cpi	r24, 0x05	; 5
     a62:	09 f0       	breq	.+2      	; 0xa66 <xmit_datablock+0x90>
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     a6a:	89 2f       	mov	r24, r25
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	08 95       	ret

00000a74 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	d8 2e       	mov	r13, r24
     a80:	7a 01       	movw	r14, r20
     a82:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     a84:	87 ff       	sbrs	r24, 7
     a86:	0c c0       	rjmp	.+24     	; 0xaa0 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     a88:	87 e7       	ldi	r24, 0x77	; 119
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
		if (res > 1) return res;
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	08 f0       	brcs	.+2      	; 0xa9c <send_cmd+0x28>
     a9a:	72 c0       	rjmp	.+228    	; 0xb80 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     a9c:	8f e7       	ldi	r24, 0x7F	; 127
     a9e:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	e0 e6       	ldi	r30, 0x60	; 96
     aa4:	f6 e0       	ldi	r31, 0x06	; 6
     aa6:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	e0 ec       	ldi	r30, 0xC0	; 192
     aac:	f9 e0       	ldi	r31, 0x09	; 9
     aae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ab0:	80 91 c2 09 	lds	r24, 0x09C2
     ab4:	87 ff       	sbrs	r24, 7
     ab6:	fc cf       	rjmp	.-8      	; 0xab0 <send_cmd+0x3c>
	return SD_SPI.DATA;
     ab8:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     abc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <select>
     ac0:	88 23       	and	r24, r24
     ac2:	11 f4       	brne	.+4      	; 0xac8 <send_cmd+0x54>
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	5c c0       	rjmp	.+184    	; 0xb80 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     ac8:	e0 ec       	ldi	r30, 0xC0	; 192
     aca:	f9 e0       	ldi	r31, 0x09	; 9
     acc:	d3 82       	std	Z+3, r13	; 0x03
     ace:	80 91 c2 09 	lds	r24, 0x09C2
     ad2:	87 ff       	sbrs	r24, 7
     ad4:	fc cf       	rjmp	.-8      	; 0xace <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     ad6:	81 2f       	mov	r24, r17
     ad8:	99 27       	eor	r25, r25
     ada:	aa 27       	eor	r26, r26
     adc:	bb 27       	eor	r27, r27
     ade:	e0 ec       	ldi	r30, 0xC0	; 192
     ae0:	f9 e0       	ldi	r31, 0x09	; 9
     ae2:	83 83       	std	Z+3, r24	; 0x03
     ae4:	80 91 c2 09 	lds	r24, 0x09C2
     ae8:	87 ff       	sbrs	r24, 7
     aea:	fc cf       	rjmp	.-8      	; 0xae4 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     aec:	c8 01       	movw	r24, r16
     aee:	aa 27       	eor	r26, r26
     af0:	bb 27       	eor	r27, r27
     af2:	e0 ec       	ldi	r30, 0xC0	; 192
     af4:	f9 e0       	ldi	r31, 0x09	; 9
     af6:	83 83       	std	Z+3, r24	; 0x03
     af8:	80 91 c2 09 	lds	r24, 0x09C2
     afc:	87 ff       	sbrs	r24, 7
     afe:	fc cf       	rjmp	.-8      	; 0xaf8 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     b00:	bb 27       	eor	r27, r27
     b02:	a1 2f       	mov	r26, r17
     b04:	90 2f       	mov	r25, r16
     b06:	8f 2d       	mov	r24, r15
     b08:	e0 ec       	ldi	r30, 0xC0	; 192
     b0a:	f9 e0       	ldi	r31, 0x09	; 9
     b0c:	83 83       	std	Z+3, r24	; 0x03
     b0e:	80 91 c2 09 	lds	r24, 0x09C2
     b12:	87 ff       	sbrs	r24, 7
     b14:	fc cf       	rjmp	.-8      	; 0xb0e <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     b16:	e0 ec       	ldi	r30, 0xC0	; 192
     b18:	f9 e0       	ldi	r31, 0x09	; 9
     b1a:	e3 82       	std	Z+3, r14	; 0x03
     b1c:	80 91 c2 09 	lds	r24, 0x09C2
     b20:	87 ff       	sbrs	r24, 7
     b22:	fc cf       	rjmp	.-8      	; 0xb1c <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	d8 16       	cp	r13, r24
     b28:	11 f4       	brne	.+4      	; 0xb2e <send_cmd+0xba>
     b2a:	85 e9       	ldi	r24, 0x95	; 149
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b2e:	88 e4       	ldi	r24, 0x48	; 72
     b30:	d8 16       	cp	r13, r24
     b32:	11 f4       	brne	.+4      	; 0xb38 <send_cmd+0xc4>
     b34:	87 e8       	ldi	r24, 0x87	; 135
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <send_cmd+0xc6>
     b38:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b3a:	e0 ec       	ldi	r30, 0xC0	; 192
     b3c:	f9 e0       	ldi	r31, 0x09	; 9
     b3e:	83 83       	std	Z+3, r24	; 0x03
     b40:	80 91 c2 09 	lds	r24, 0x09C2
     b44:	87 ff       	sbrs	r24, 7
     b46:	fc cf       	rjmp	.-8      	; 0xb40 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     b48:	8c e4       	ldi	r24, 0x4C	; 76
     b4a:	d8 16       	cp	r13, r24
     b4c:	51 f4       	brne	.+20     	; 0xb62 <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	e0 ec       	ldi	r30, 0xC0	; 192
     b52:	f9 e0       	ldi	r31, 0x09	; 9
     b54:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b56:	80 91 c2 09 	lds	r24, 0x09C2
     b5a:	87 ff       	sbrs	r24, 7
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <send_cmd+0xe2>
	return SD_SPI.DATA;
     b5e:	80 91 c3 09 	lds	r24, 0x09C3
     b62:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b64:	e0 ec       	ldi	r30, 0xC0	; 192
     b66:	f9 e0       	ldi	r31, 0x09	; 9
     b68:	2f ef       	ldi	r18, 0xFF	; 255
     b6a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b6c:	80 91 c2 09 	lds	r24, 0x09C2
     b70:	87 ff       	sbrs	r24, 7
     b72:	fc cf       	rjmp	.-8      	; 0xb6c <send_cmd+0xf8>
	return SD_SPI.DATA;
     b74:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     b78:	87 ff       	sbrs	r24, 7
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <send_cmd+0x10c>
     b7c:	91 50       	subi	r25, 0x01	; 1
     b7e:	a9 f7       	brne	.-22     	; 0xb6a <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	08 95       	ret

00000b8c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	00 d0       	rcall	.+0      	; 0xb9a <disk_initialize+0xe>
     b9a:	0f 92       	push	r0
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     ba0:	80 91 3b 33 	lds	r24, 0x333B
     ba4:	81 fd       	sbrc	r24, 1
     ba6:	cc c0       	rjmp	.+408    	; 0xd40 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     ba8:	e0 e6       	ldi	r30, 0x60	; 96
     baa:	f6 e0       	ldi	r31, 0x06	; 6
     bac:	80 eb       	ldi	r24, 0xB0	; 176
     bae:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     bb0:	88 e3       	ldi	r24, 0x38	; 56
     bb2:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     bb4:	14 82       	std	Z+4, r1	; 0x04
     bb6:	8c e2       	ldi	r24, 0x2C	; 44
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	20 e7       	ldi	r18, 0x70	; 112
     bbc:	31 e0       	ldi	r19, 0x01	; 1
     bbe:	f9 01       	movw	r30, r18
     bc0:	31 97       	sbiw	r30, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc6:	d9 f7       	brne	.-10     	; 0xbbe <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     bc8:	83 e5       	ldi	r24, 0x53	; 83
     bca:	80 93 c0 09 	sts	0x09C0, r24
     bce:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bd0:	e0 ec       	ldi	r30, 0xC0	; 192
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bd8:	80 91 c2 09 	lds	r24, 0x09C2
     bdc:	87 ff       	sbrs	r24, 7
     bde:	fc cf       	rjmp	.-8      	; 0xbd8 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     be0:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     be4:	91 50       	subi	r25, 0x01	; 1
     be6:	b9 f7       	brne	.-18     	; 0xbd6 <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	09 f0       	breq	.+2      	; 0xbfc <disk_initialize+0x70>
     bfa:	87 c0       	rjmp	.+270    	; 0xd0a <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     bfc:	84 e6       	ldi	r24, 0x64	; 100
     bfe:	80 93 0b 34 	sts	0x340B, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     c02:	88 e4       	ldi	r24, 0x48	; 72
     c04:	4a ea       	ldi	r20, 0xAA	; 170
     c06:	51 e0       	ldi	r21, 0x01	; 1
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	09 f0       	breq	.+2      	; 0xc16 <disk_initialize+0x8a>
     c14:	53 c0       	rjmp	.+166    	; 0xcbc <disk_initialize+0x130>
     c16:	7e 01       	movw	r14, r28
     c18:	08 94       	sec
     c1a:	e1 1c       	adc	r14, r1
     c1c:	f1 1c       	adc	r15, r1
     c1e:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c20:	e0 ec       	ldi	r30, 0xC0	; 192
     c22:	f9 e0       	ldi	r31, 0x09	; 9
     c24:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c26:	9e 01       	movw	r18, r28
     c28:	2b 5f       	subi	r18, 0xFB	; 251
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c2c:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c2e:	80 91 c2 09 	lds	r24, 0x09C2
     c32:	87 ff       	sbrs	r24, 7
     c34:	fc cf       	rjmp	.-8      	; 0xc2e <disk_initialize+0xa2>
	return SD_SPI.DATA;
     c36:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c3a:	d8 01       	movw	r26, r16
     c3c:	8d 93       	st	X+, r24
     c3e:	8d 01       	movw	r16, r26
     c40:	a2 17       	cp	r26, r18
     c42:	b3 07       	cpc	r27, r19
     c44:	99 f7       	brne	.-26     	; 0xc2c <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	09 f0       	breq	.+2      	; 0xc4e <disk_initialize+0xc2>
     c4c:	5e c0       	rjmp	.+188    	; 0xd0a <disk_initialize+0x17e>
     c4e:	8c 81       	ldd	r24, Y+4	; 0x04
     c50:	8a 3a       	cpi	r24, 0xAA	; 170
     c52:	09 f0       	breq	.+2      	; 0xc56 <disk_initialize+0xca>
     c54:	5a c0       	rjmp	.+180    	; 0xd0a <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     c56:	80 91 0b 34 	lds	r24, 0x340B
     c5a:	88 23       	and	r24, r24
     c5c:	49 f0       	breq	.+18     	; 0xc70 <disk_initialize+0xe4>
     c5e:	89 ee       	ldi	r24, 0xE9	; 233
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	70 e4       	ldi	r23, 0x40	; 64
     c68:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     c6c:	88 23       	and	r24, r24
     c6e:	99 f7       	brne	.-26     	; 0xc56 <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     c70:	80 91 0b 34 	lds	r24, 0x340B
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <disk_initialize+0xee>
     c78:	48 c0       	rjmp	.+144    	; 0xd0a <disk_initialize+0x17e>
     c7a:	8a e7       	ldi	r24, 0x7A	; 122
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     c88:	88 23       	and	r24, r24
     c8a:	09 f0       	breq	.+2      	; 0xc8e <disk_initialize+0x102>
     c8c:	3e c0       	rjmp	.+124    	; 0xd0a <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c8e:	e0 ec       	ldi	r30, 0xC0	; 192
     c90:	f9 e0       	ldi	r31, 0x09	; 9
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c96:	80 91 c2 09 	lds	r24, 0x09C2
     c9a:	87 ff       	sbrs	r24, 7
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <disk_initialize+0x10a>
	return SD_SPI.DATA;
     c9e:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     ca2:	d7 01       	movw	r26, r14
     ca4:	8d 93       	st	X+, r24
     ca6:	7d 01       	movw	r14, r26
     ca8:	a0 17       	cp	r26, r16
     caa:	b1 07       	cpc	r27, r17
     cac:	99 f7       	brne	.-26     	; 0xc94 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	86 fd       	sbrc	r24, 6
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <disk_initialize+0x12c>
     cb4:	14 e0       	ldi	r17, 0x04	; 4
     cb6:	2a c0       	rjmp	.+84     	; 0xd0c <disk_initialize+0x180>
     cb8:	1c e0       	ldi	r17, 0x0C	; 12
     cba:	28 c0       	rjmp	.+80     	; 0xd0c <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     cbc:	89 ee       	ldi	r24, 0xE9	; 233
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	18 f0       	brcs	.+6      	; 0xcd4 <disk_initialize+0x148>
     cce:	01 e4       	ldi	r16, 0x41	; 65
     cd0:	11 e0       	ldi	r17, 0x01	; 1
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <disk_initialize+0x14c>
     cd4:	09 ee       	ldi	r16, 0xE9	; 233
     cd6:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     cd8:	80 91 0b 34 	lds	r24, 0x340B
     cdc:	88 23       	and	r24, r24
     cde:	49 f0       	breq	.+18     	; 0xcf2 <disk_initialize+0x166>
     ce0:	80 2f       	mov	r24, r16
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     cee:	88 23       	and	r24, r24
     cf0:	99 f7       	brne	.-26     	; 0xcd8 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     cf2:	80 91 0b 34 	lds	r24, 0x340B
     cf6:	88 23       	and	r24, r24
     cf8:	41 f0       	breq	.+16     	; 0xd0a <disk_initialize+0x17e>
     cfa:	80 e5       	ldi	r24, 0x50	; 80
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	52 e0       	ldi	r21, 0x02	; 2
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     d08:	81 11       	cpse	r24, r1
     d0a:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     d0c:	10 93 0d 34 	sts	0x340D, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d10:	80 e1       	ldi	r24, 0x10	; 16
     d12:	e0 e6       	ldi	r30, 0x60	; 96
     d14:	f6 e0       	ldi	r31, 0x06	; 6
     d16:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	e0 ec       	ldi	r30, 0xC0	; 192
     d1c:	f9 e0       	ldi	r31, 0x09	; 9
     d1e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d20:	80 91 c2 09 	lds	r24, 0x09C2
     d24:	87 ff       	sbrs	r24, 7
     d26:	fc cf       	rjmp	.-8      	; 0xd20 <disk_initialize+0x194>
	return SD_SPI.DATA;
     d28:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     d2c:	11 23       	and	r17, r17
     d2e:	41 f0       	breq	.+16     	; 0xd40 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     d30:	80 91 3b 33 	lds	r24, 0x333B
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	80 93 3b 33 	sts	0x333B, r24
		FCLK_FAST();
     d3a:	80 ed       	ldi	r24, 0xD0	; 208
     d3c:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     d40:	80 91 3b 33 	lds	r24, 0x333B
}
     d44:	24 96       	adiw	r28, 0x04	; 4
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     d58:	88 23       	and	r24, r24
     d5a:	11 f0       	breq	.+4      	; 0xd60 <disk_status+0x8>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	08 95       	ret
	return Stat;
     d60:	80 91 3b 33 	lds	r24, 0x333B
}
     d64:	08 95       	ret

00000d66 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d66:	0f 93       	push	r16
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     d6e:	88 23       	and	r24, r24
     d70:	09 f0       	breq	.+2      	; 0xd74 <disk_read+0xe>
     d72:	53 c0       	rjmp	.+166    	; 0xe1a <disk_read+0xb4>
     d74:	00 23       	and	r16, r16
     d76:	09 f4       	brne	.+2      	; 0xd7a <disk_read+0x14>
     d78:	50 c0       	rjmp	.+160    	; 0xe1a <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d7a:	80 91 3b 33 	lds	r24, 0x333B
     d7e:	80 ff       	sbrs	r24, 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <disk_read+0x20>
     d82:	03 e0       	ldi	r16, 0x03	; 3
     d84:	4b c0       	rjmp	.+150    	; 0xe1c <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d86:	80 91 0d 34 	lds	r24, 0x340D
     d8a:	83 fd       	sbrc	r24, 3
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <disk_read+0x36>
     d8e:	69 e0       	ldi	r22, 0x09	; 9
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	55 1f       	adc	r21, r21
     d98:	6a 95       	dec	r22
     d9a:	d1 f7       	brne	.-12     	; 0xd90 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     d9c:	01 30       	cpi	r16, 0x01	; 1
     d9e:	89 f4       	brne	.+34     	; 0xdc2 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     da0:	81 e5       	ldi	r24, 0x51	; 81
     da2:	ba 01       	movw	r22, r20
     da4:	a9 01       	movw	r20, r18
     da6:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     daa:	88 23       	and	r24, r24
     dac:	21 f5       	brne	.+72     	; 0xdf6 <disk_read+0x90>
     dae:	ce 01       	movw	r24, r28
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	72 e0       	ldi	r23, 0x02	; 2
     db4:	0e 94 89 04 	call	0x912	; 0x912 <rcvr_datablock>
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	88 23       	and	r24, r24
     dbc:	e1 f4       	brne	.+56     	; 0xdf6 <disk_read+0x90>
     dbe:	01 e0       	ldi	r16, 0x01	; 1
     dc0:	1a c0       	rjmp	.+52     	; 0xdf6 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     dc2:	82 e5       	ldi	r24, 0x52	; 82
     dc4:	ba 01       	movw	r22, r20
     dc6:	a9 01       	movw	r20, r18
     dc8:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     dcc:	88 23       	and	r24, r24
     dce:	99 f4       	brne	.+38     	; 0xdf6 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     dd0:	ce 01       	movw	r24, r28
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	72 e0       	ldi	r23, 0x02	; 2
     dd6:	0e 94 89 04 	call	0x912	; 0x912 <rcvr_datablock>
     dda:	88 23       	and	r24, r24
     ddc:	29 f0       	breq	.+10     	; 0xde8 <disk_read+0x82>
				buff += 512;
			} while (--count);
     dde:	01 50       	subi	r16, 0x01	; 1
     de0:	19 f0       	breq	.+6      	; 0xde8 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     de2:	c0 50       	subi	r28, 0x00	; 0
     de4:	de 4f       	sbci	r29, 0xFE	; 254
     de6:	f4 cf       	rjmp	.-24     	; 0xdd0 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     de8:	8c e4       	ldi	r24, 0x4C	; 76
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     df6:	80 e1       	ldi	r24, 0x10	; 16
     df8:	e0 e6       	ldi	r30, 0x60	; 96
     dfa:	f6 e0       	ldi	r31, 0x06	; 6
     dfc:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	e0 ec       	ldi	r30, 0xC0	; 192
     e02:	f9 e0       	ldi	r31, 0x09	; 9
     e04:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e06:	80 91 c2 09 	lds	r24, 0x09C2
     e0a:	87 ff       	sbrs	r24, 7
     e0c:	fc cf       	rjmp	.-8      	; 0xe06 <disk_read+0xa0>
	return SD_SPI.DATA;
     e0e:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     e12:	00 23       	and	r16, r16
     e14:	19 f0       	breq	.+6      	; 0xe1c <disk_read+0xb6>
     e16:	01 e0       	ldi	r16, 0x01	; 1
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <disk_read+0xb6>
     e1a:	04 e0       	ldi	r16, 0x04	; 4
}
     e1c:	80 2f       	mov	r24, r16
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	eb 01       	movw	r28, r22
     e36:	69 01       	movw	r12, r18
     e38:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     e3a:	88 23       	and	r24, r24
     e3c:	09 f0       	breq	.+2      	; 0xe40 <disk_write+0x1a>
     e3e:	61 c0       	rjmp	.+194    	; 0xf02 <disk_write+0xdc>
     e40:	00 23       	and	r16, r16
     e42:	09 f4       	brne	.+2      	; 0xe46 <disk_write+0x20>
     e44:	5e c0       	rjmp	.+188    	; 0xf02 <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e46:	80 91 3b 33 	lds	r24, 0x333B
     e4a:	80 ff       	sbrs	r24, 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <disk_write+0x2c>
     e4e:	03 e0       	ldi	r16, 0x03	; 3
     e50:	59 c0       	rjmp	.+178    	; 0xf04 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e52:	80 91 3b 33 	lds	r24, 0x333B
     e56:	82 ff       	sbrs	r24, 2
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <disk_write+0x38>
     e5a:	02 e0       	ldi	r16, 0x02	; 2
     e5c:	53 c0       	rjmp	.+166    	; 0xf04 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e5e:	80 91 0d 34 	lds	r24, 0x340D
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	83 fd       	sbrc	r24, 3
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <disk_write+0x50>
     e68:	79 e0       	ldi	r23, 0x09	; 9
     e6a:	cc 0c       	add	r12, r12
     e6c:	dd 1c       	adc	r13, r13
     e6e:	ee 1c       	adc	r14, r14
     e70:	ff 1c       	adc	r15, r15
     e72:	7a 95       	dec	r23
     e74:	d1 f7       	brne	.-12     	; 0xe6a <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     e76:	01 30       	cpi	r16, 0x01	; 1
     e78:	69 f4       	brne	.+26     	; 0xe94 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     e7a:	88 e5       	ldi	r24, 0x58	; 88
     e7c:	b7 01       	movw	r22, r14
     e7e:	a6 01       	movw	r20, r12
     e80:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     e84:	88 23       	and	r24, r24
     e86:	59 f5       	brne	.+86     	; 0xede <disk_write+0xb8>
     e88:	ce 01       	movw	r24, r28
     e8a:	6e ef       	ldi	r22, 0xFE	; 254
     e8c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <xmit_datablock>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	22 c0       	rjmp	.+68     	; 0xed8 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e94:	86 70       	andi	r24, 0x06	; 6
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	89 2b       	or	r24, r25
     e9a:	39 f0       	breq	.+14     	; 0xeaa <disk_write+0x84>
     e9c:	40 2f       	mov	r20, r16
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	87 ed       	ldi	r24, 0xD7	; 215
     ea6:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     eaa:	89 e5       	ldi	r24, 0x59	; 89
     eac:	b7 01       	movw	r22, r14
     eae:	a6 01       	movw	r20, r12
     eb0:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     eb4:	88 23       	and	r24, r24
     eb6:	99 f4       	brne	.+38     	; 0xede <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     eb8:	ce 01       	movw	r24, r28
     eba:	6c ef       	ldi	r22, 0xFC	; 252
     ebc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <xmit_datablock>
     ec0:	88 23       	and	r24, r24
     ec2:	29 f0       	breq	.+10     	; 0xece <disk_write+0xa8>
				buff += 512;
			} while (--count);
     ec4:	01 50       	subi	r16, 0x01	; 1
     ec6:	19 f0       	breq	.+6      	; 0xece <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     ec8:	c0 50       	subi	r28, 0x00	; 0
     eca:	de 4f       	sbci	r29, 0xFE	; 254
     ecc:	f5 cf       	rjmp	.-22     	; 0xeb8 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	6d ef       	ldi	r22, 0xFD	; 253
     ed4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <xmit_datablock>
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <disk_write+0xb8>
     edc:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     ede:	80 e1       	ldi	r24, 0x10	; 16
     ee0:	e0 e6       	ldi	r30, 0x60	; 96
     ee2:	f6 e0       	ldi	r31, 0x06	; 6
     ee4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	e0 ec       	ldi	r30, 0xC0	; 192
     eea:	f9 e0       	ldi	r31, 0x09	; 9
     eec:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     eee:	80 91 c2 09 	lds	r24, 0x09C2
     ef2:	87 ff       	sbrs	r24, 7
     ef4:	fc cf       	rjmp	.-8      	; 0xeee <disk_write+0xc8>
	return SD_SPI.DATA;
     ef6:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     efa:	00 23       	and	r16, r16
     efc:	19 f0       	breq	.+6      	; 0xf04 <disk_write+0xde>
     efe:	01 e0       	ldi	r16, 0x01	; 1
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <disk_write+0xde>
     f02:	04 e0       	ldi	r16, 0x04	; 4
}
     f04:	80 2f       	mov	r24, r16
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	08 95       	ret

00000f16 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	60 97       	sbiw	r28, 0x10	; 16
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     f2c:	88 23       	and	r24, r24
     f2e:	09 f0       	breq	.+2      	; 0xf32 <disk_ioctl+0x1c>
     f30:	b8 c1       	rjmp	.+880    	; 0x12a2 <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     f32:	64 30       	cpi	r22, 0x04	; 4
     f34:	01 f5       	brne	.+64     	; 0xf76 <disk_ioctl+0x60>
		switch (*ptr) {
     f36:	fa 01       	movw	r30, r20
     f38:	80 81       	ld	r24, Z
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	39 f0       	breq	.+14     	; 0xf4c <disk_ioctl+0x36>
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	08 f4       	brcc	.+2      	; 0xf44 <disk_ioctl+0x2e>
     f42:	b1 c1       	rjmp	.+866    	; 0x12a6 <disk_ioctl+0x390>
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	09 f0       	breq	.+2      	; 0xf4a <disk_ioctl+0x34>
     f48:	ac c1       	rjmp	.+856    	; 0x12a2 <disk_ioctl+0x38c>
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     f4c:	e0 e6       	ldi	r30, 0x60	; 96
     f4e:	f6 e0       	ldi	r31, 0x06	; 6
     f50:	80 eb       	ldi	r24, 0xB0	; 176
     f52:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     f54:	88 e3       	ldi	r24, 0x38	; 56
     f56:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     f58:	14 82       	std	Z+4, r1	; 0x04
     f5a:	8c e2       	ldi	r24, 0x2C	; 44
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	20 e7       	ldi	r18, 0x70	; 112
     f60:	31 e0       	ldi	r19, 0x01	; 1
     f62:	f9 01       	movw	r30, r18
     f64:	31 97       	sbiw	r30, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	d9 f7       	brne	.-10     	; 0xf62 <disk_ioctl+0x4c>
     f6c:	9c c1       	rjmp	.+824    	; 0x12a6 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	fa 01       	movw	r30, r20
     f72:	81 83       	std	Z+1, r24	; 0x01
     f74:	98 c1       	rjmp	.+816    	; 0x12a6 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     f76:	80 91 3b 33 	lds	r24, 0x333B
     f7a:	80 ff       	sbrs	r24, 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <disk_ioctl+0x6c>
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	93 c1       	rjmp	.+806    	; 0x12a8 <disk_ioctl+0x392>

		switch (ctrl) {
     f82:	6a 30       	cpi	r22, 0x0A	; 10
     f84:	09 f4       	brne	.+2      	; 0xf88 <disk_ioctl+0x72>
     f86:	2f c1       	rjmp	.+606    	; 0x11e6 <disk_ioctl+0x2d0>
     f88:	6b 30       	cpi	r22, 0x0B	; 11
     f8a:	50 f4       	brcc	.+20     	; 0xfa0 <disk_ioctl+0x8a>
     f8c:	61 30       	cpi	r22, 0x01	; 1
     f8e:	51 f1       	breq	.+84     	; 0xfe4 <disk_ioctl+0xce>
     f90:	61 30       	cpi	r22, 0x01	; 1
     f92:	a0 f0       	brcs	.+40     	; 0xfbc <disk_ioctl+0xa6>
     f94:	62 30       	cpi	r22, 0x02	; 2
     f96:	09 f4       	brne	.+2      	; 0xf9a <disk_ioctl+0x84>
     f98:	86 c0       	rjmp	.+268    	; 0x10a6 <disk_ioctl+0x190>
     f9a:	63 30       	cpi	r22, 0x03	; 3
     f9c:	69 f4       	brne	.+26     	; 0xfb8 <disk_ioctl+0xa2>
     f9e:	89 c0       	rjmp	.+274    	; 0x10b2 <disk_ioctl+0x19c>
     fa0:	6c 30       	cpi	r22, 0x0C	; 12
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <disk_ioctl+0x90>
     fa4:	27 c1       	rjmp	.+590    	; 0x11f4 <disk_ioctl+0x2de>
     fa6:	6c 30       	cpi	r22, 0x0C	; 12
     fa8:	08 f4       	brcc	.+2      	; 0xfac <disk_ioctl+0x96>
     faa:	22 c1       	rjmp	.+580    	; 0x11f0 <disk_ioctl+0x2da>
     fac:	6d 30       	cpi	r22, 0x0D	; 13
     fae:	09 f4       	brne	.+2      	; 0xfb2 <disk_ioctl+0x9c>
     fb0:	2e c1       	rjmp	.+604    	; 0x120e <disk_ioctl+0x2f8>
     fb2:	6e 30       	cpi	r22, 0x0E	; 14
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <disk_ioctl+0xa2>
     fb6:	4a c1       	rjmp	.+660    	; 0x124c <disk_ioctl+0x336>
     fb8:	94 e0       	ldi	r25, 0x04	; 4
     fba:	64 c1       	rjmp	.+712    	; 0x1284 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     fbc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <select>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <disk_ioctl+0xb0>
     fc4:	5e c1       	rjmp	.+700    	; 0x1282 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	e0 e6       	ldi	r30, 0x60	; 96
     fca:	f6 e0       	ldi	r31, 0x06	; 6
     fcc:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	e0 ec       	ldi	r30, 0xC0	; 192
     fd2:	f9 e0       	ldi	r31, 0x09	; 9
     fd4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fd6:	80 91 c2 09 	lds	r24, 0x09C2
     fda:	87 ff       	sbrs	r24, 7
     fdc:	fc cf       	rjmp	.-8      	; 0xfd6 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     fde:	80 91 c3 09 	lds	r24, 0x09C3
     fe2:	ff c0       	rjmp	.+510    	; 0x11e2 <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     fe4:	89 e4       	ldi	r24, 0x49	; 73
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
     ff2:	88 23       	and	r24, r24
     ff4:	09 f0       	breq	.+2      	; 0xff8 <disk_ioctl+0xe2>
     ff6:	45 c1       	rjmp	.+650    	; 0x1282 <disk_ioctl+0x36c>
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	60 e1       	ldi	r22, 0x10	; 16
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 89 04 	call	0x912	; 0x912 <rcvr_datablock>
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <disk_ioctl+0xf4>
    1008:	3c c1       	rjmp	.+632    	; 0x1282 <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	82 95       	swap	r24
    100e:	86 95       	lsr	r24
    1010:	86 95       	lsr	r24
    1012:	83 70       	andi	r24, 0x03	; 3
    1014:	7a 85       	ldd	r23, Y+10	; 0x0a
    1016:	49 85       	ldd	r20, Y+9	; 0x09
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	89 f4       	brne	.+34     	; 0x103e <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    101c:	87 2f       	mov	r24, r23
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	34 2f       	mov	r19, r20
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	2a e0       	ldi	r18, 0x0A	; 10
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	aa 1f       	adc	r26, r26
    1036:	bb 1f       	adc	r27, r27
    1038:	2a 95       	dec	r18
    103a:	d1 f7       	brne	.-12     	; 0x1030 <disk_ioctl+0x11a>
    103c:	cd c0       	rjmp	.+410    	; 0x11d8 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    103e:	42 95       	swap	r20
    1040:	46 95       	lsr	r20
    1042:	46 95       	lsr	r20
    1044:	43 70       	andi	r20, 0x03	; 3
    1046:	28 85       	ldd	r18, Y+8	; 0x08
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	24 0f       	add	r18, r20
    1054:	31 1d       	adc	r19, r1
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	8f 81       	ldd	r24, Y+7	; 0x07
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	83 70       	andi	r24, 0x03	; 3
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	98 2f       	mov	r25, r24
    1064:	88 27       	eor	r24, r24
    1066:	99 0f       	add	r25, r25
    1068:	99 0f       	add	r25, r25
    106a:	28 0f       	add	r18, r24
    106c:	39 1f       	adc	r19, r25
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	8f 70       	andi	r24, 0x0F	; 15
    1076:	6b 85       	ldd	r22, Y+11	; 0x0b
    1078:	66 1f       	adc	r22, r22
    107a:	66 27       	eor	r22, r22
    107c:	66 1f       	adc	r22, r22
    107e:	86 0f       	add	r24, r22
    1080:	8e 5f       	subi	r24, 0xFE	; 254
    1082:	73 70       	andi	r23, 0x03	; 3
    1084:	77 0f       	add	r23, r23
    1086:	87 0f       	add	r24, r23
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	09 97       	sbiw	r24, 0x09	; 9
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <disk_ioctl+0x180>
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	44 1f       	adc	r20, r20
    1094:	55 1f       	adc	r21, r21
    1096:	8a 95       	dec	r24
    1098:	d2 f7       	brpl	.-12     	; 0x108e <disk_ioctl+0x178>
    109a:	f8 01       	movw	r30, r16
    109c:	20 83       	st	Z, r18
    109e:	31 83       	std	Z+1, r19	; 0x01
    10a0:	42 83       	std	Z+2, r20	; 0x02
    10a2:	53 83       	std	Z+3, r21	; 0x03
    10a4:	9e c0       	rjmp	.+316    	; 0x11e2 <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	fa 01       	movw	r30, r20
    10ac:	80 83       	st	Z, r24
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	98 c0       	rjmp	.+304    	; 0x11e2 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    10b2:	80 91 0d 34 	lds	r24, 0x340D
    10b6:	f8 2e       	mov	r15, r24
    10b8:	82 ff       	sbrs	r24, 2
    10ba:	39 c0       	rjmp	.+114    	; 0x112e <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    10bc:	8d ec       	ldi	r24, 0xCD	; 205
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
    10ca:	88 23       	and	r24, r24
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <disk_ioctl+0x1ba>
    10ce:	d9 c0       	rjmp	.+434    	; 0x1282 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	e0 ec       	ldi	r30, 0xC0	; 192
    10d4:	f9 e0       	ldi	r31, 0x09	; 9
    10d6:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10d8:	80 91 c2 09 	lds	r24, 0x09C2
    10dc:	87 ff       	sbrs	r24, 7
    10de:	fc cf       	rjmp	.-8      	; 0x10d8 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    10e0:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	60 e1       	ldi	r22, 0x10	; 16
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	0e 94 89 04 	call	0x912	; 0x912 <rcvr_datablock>
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <disk_ioctl+0x1e0>
    10f4:	c6 c0       	rjmp	.+396    	; 0x1282 <disk_ioctl+0x36c>
    10f6:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10f8:	e0 ec       	ldi	r30, 0xC0	; 192
    10fa:	f9 e0       	ldi	r31, 0x09	; 9
    10fc:	2f ef       	ldi	r18, 0xFF	; 255
    10fe:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1100:	80 91 c2 09 	lds	r24, 0x09C2
    1104:	87 ff       	sbrs	r24, 7
    1106:	fc cf       	rjmp	.-8      	; 0x1100 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    1108:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	b9 f7       	brne	.-18     	; 0x10fe <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1110:	2b 85       	ldd	r18, Y+11	; 0x0b
    1112:	22 95       	swap	r18
    1114:	2f 70       	andi	r18, 0x0F	; 15
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <disk_ioctl+0x212>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	aa 1f       	adc	r26, r26
    1126:	bb 1f       	adc	r27, r27
    1128:	2a 95       	dec	r18
    112a:	d2 f7       	brpl	.-12     	; 0x1120 <disk_ioctl+0x20a>
    112c:	55 c0       	rjmp	.+170    	; 0x11d8 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    112e:	89 e4       	ldi	r24, 0x49	; 73
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
    113c:	88 23       	and	r24, r24
    113e:	09 f0       	breq	.+2      	; 0x1142 <disk_ioctl+0x22c>
    1140:	a0 c0       	rjmp	.+320    	; 0x1282 <disk_ioctl+0x36c>
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	60 e1       	ldi	r22, 0x10	; 16
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	0e 94 89 04 	call	0x912	; 0x912 <rcvr_datablock>
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <disk_ioctl+0x23e>
    1152:	97 c0       	rjmp	.+302    	; 0x1282 <disk_ioctl+0x36c>
    1154:	4b 85       	ldd	r20, Y+11	; 0x0b
    1156:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    1158:	f1 fe       	sbrs	r15, 1
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    115c:	88 1f       	adc	r24, r24
    115e:	88 27       	eor	r24, r24
    1160:	88 1f       	adc	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	24 2f       	mov	r18, r20
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	2f 73       	andi	r18, 0x3F	; 63
    116c:	30 70       	andi	r19, 0x00	; 0
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	2e 85       	ldd	r18, Y+14	; 0x0e
    1178:	22 95       	swap	r18
    117a:	26 95       	lsr	r18
    117c:	26 95       	lsr	r18
    117e:	23 70       	andi	r18, 0x03	; 3
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	21 50       	subi	r18, 0x01	; 1
    1184:	30 40       	sbci	r19, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <disk_ioctl+0x276>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	2a 95       	dec	r18
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <disk_ioctl+0x272>
    1190:	21 c0       	rjmp	.+66     	; 0x11d4 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	23 70       	andi	r18, 0x03	; 3
    1198:	30 70       	andi	r19, 0x00	; 0
    119a:	f3 e0       	ldi	r31, 0x03	; 3
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	fa 95       	dec	r31
    11a2:	e1 f7       	brne	.-8      	; 0x119c <disk_ioctl+0x286>
    11a4:	82 95       	swap	r24
    11a6:	86 95       	lsr	r24
    11a8:	87 70       	andi	r24, 0x07	; 7
    11aa:	28 0f       	add	r18, r24
    11ac:	31 1d       	adc	r19, r1
    11ae:	2f 5f       	subi	r18, 0xFF	; 255
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	84 2f       	mov	r24, r20
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	8c 77       	andi	r24, 0x7C	; 124
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	95 95       	asr	r25
    11bc:	87 95       	ror	r24
    11be:	95 95       	asr	r25
    11c0:	87 95       	ror	r24
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	ac 01       	movw	r20, r24
    11c6:	24 9f       	mul	r18, r20
    11c8:	c0 01       	movw	r24, r0
    11ca:	25 9f       	mul	r18, r21
    11cc:	90 0d       	add	r25, r0
    11ce:	34 9f       	mul	r19, r20
    11d0:	90 0d       	add	r25, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	f8 01       	movw	r30, r16
    11da:	80 83       	st	Z, r24
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	a2 83       	std	Z+2, r26	; 0x02
    11e0:	b3 83       	std	Z+3, r27	; 0x03
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	4f c0       	rjmp	.+158    	; 0x1284 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    11e6:	80 91 0d 34 	lds	r24, 0x340D
    11ea:	fa 01       	movw	r30, r20
    11ec:	80 83       	st	Z, r24
    11ee:	f9 cf       	rjmp	.-14     	; 0x11e2 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    11f0:	89 e4       	ldi	r24, 0x49	; 73
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    11f4:	8a e4       	ldi	r24, 0x4A	; 74
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
    1202:	88 23       	and	r24, r24
    1204:	f1 f5       	brne	.+124    	; 0x1282 <disk_ioctl+0x36c>
    1206:	c8 01       	movw	r24, r16
    1208:	60 e1       	ldi	r22, 0x10	; 16
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	35 c0       	rjmp	.+106    	; 0x1278 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    120e:	8a e7       	ldi	r24, 0x7A	; 122
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
    121c:	88 23       	and	r24, r24
    121e:	89 f5       	brne	.+98     	; 0x1282 <disk_ioctl+0x36c>
    1220:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1222:	a0 ec       	ldi	r26, 0xC0	; 192
    1224:	b9 e0       	ldi	r27, 0x09	; 9
    1226:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1228:	98 01       	movw	r18, r16
    122a:	2d 5f       	subi	r18, 0xFD	; 253
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    122e:	13 96       	adiw	r26, 0x03	; 3
    1230:	9c 93       	st	X, r25
    1232:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1234:	80 91 c2 09 	lds	r24, 0x09C2
    1238:	87 ff       	sbrs	r24, 7
    123a:	fc cf       	rjmp	.-8      	; 0x1234 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    123c:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1240:	80 83       	st	Z, r24
    1242:	e2 17       	cp	r30, r18
    1244:	f3 07       	cpc	r31, r19
    1246:	69 f2       	breq	.-102    	; 0x11e2 <disk_ioctl+0x2cc>
    1248:	31 96       	adiw	r30, 0x01	; 1
    124a:	f1 cf       	rjmp	.-30     	; 0x122e <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    124c:	8d ec       	ldi	r24, 0xCD	; 205
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	0e 94 3a 05 	call	0xa74	; 0xa74 <send_cmd>
    125a:	88 23       	and	r24, r24
    125c:	91 f4       	brne	.+36     	; 0x1282 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	e0 ec       	ldi	r30, 0xC0	; 192
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1266:	80 91 c2 09 	lds	r24, 0x09C2
    126a:	87 ff       	sbrs	r24, 7
    126c:	fc cf       	rjmp	.-8      	; 0x1266 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    126e:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    1272:	c8 01       	movw	r24, r16
    1274:	60 e4       	ldi	r22, 0x40	; 64
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 89 04 	call	0x912	; 0x912 <rcvr_datablock>
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <disk_ioctl+0x36e>
    1282:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    1284:	80 e1       	ldi	r24, 0x10	; 16
    1286:	e0 e6       	ldi	r30, 0x60	; 96
    1288:	f6 e0       	ldi	r31, 0x06	; 6
    128a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	e0 ec       	ldi	r30, 0xC0	; 192
    1290:	f9 e0       	ldi	r31, 0x09	; 9
    1292:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1294:	80 91 c2 09 	lds	r24, 0x09C2
    1298:	87 ff       	sbrs	r24, 7
    129a:	fc cf       	rjmp	.-8      	; 0x1294 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    129c:	80 91 c3 09 	lds	r24, 0x09C3
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <disk_ioctl+0x392>
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <disk_ioctl+0x392>
    12a6:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    12a8:	89 2f       	mov	r24, r25
    12aa:	60 96       	adiw	r28, 0x10	; 16
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	08 95       	ret

000012bc <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    12bc:	80 91 0b 34 	lds	r24, 0x340B
    if (n) Timer1 = --n;
    12c0:	88 23       	and	r24, r24
    12c2:	19 f0       	breq	.+6      	; 0x12ca <disk_timerproc+0xe>
    12c4:	81 50       	subi	r24, 0x01	; 1
    12c6:	80 93 0b 34 	sts	0x340B, r24
    n = Timer2;
    12ca:	80 91 0c 34 	lds	r24, 0x340C
    if (n) Timer2 = --n;
    12ce:	88 23       	and	r24, r24
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <disk_timerproc+0x1c>
    12d2:	81 50       	subi	r24, 0x01	; 1
    12d4:	80 93 0c 34 	sts	0x340C, r24

	s = Stat;
    12d8:	80 91 3b 33 	lds	r24, 0x333B

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    12dc:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    12de:	80 93 3b 33 	sts	0x333B, r24
}
    12e2:	08 95       	ret

000012e4 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret

000012ee <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    12ee:	6f 92       	push	r6
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
    130c:	4a 01       	movw	r8, r20
    130e:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    1310:	ca a4       	ldd	r12, Y+42	; 0x2a
    1312:	db a4       	ldd	r13, Y+43	; 0x2b
    1314:	ec a4       	ldd	r14, Y+44	; 0x2c
    1316:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1318:	c4 16       	cp	r12, r20
    131a:	d5 06       	cpc	r13, r21
    131c:	e6 06       	cpc	r14, r22
    131e:	f7 06       	cpc	r15, r23
    1320:	09 f4       	brne	.+2      	; 0x1324 <move_window+0x36>
    1322:	4e c0       	rjmp	.+156    	; 0x13c0 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	88 23       	and	r24, r24
    1328:	a1 f1       	breq	.+104    	; 0x1392 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    132a:	3e e2       	ldi	r19, 0x2E	; 46
    132c:	63 2e       	mov	r6, r19
    132e:	71 2c       	mov	r7, r1
    1330:	6c 0e       	add	r6, r28
    1332:	7d 1e       	adc	r7, r29
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	b3 01       	movw	r22, r6
    1338:	a7 01       	movw	r20, r14
    133a:	96 01       	movw	r18, r12
    133c:	01 e0       	ldi	r16, 0x01	; 1
    133e:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    1342:	88 23       	and	r24, r24
    1344:	d9 f5       	brne	.+118    	; 0x13bc <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1346:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    1348:	8e 89       	ldd	r24, Y+22	; 0x16
    134a:	9f 89       	ldd	r25, Y+23	; 0x17
    134c:	a8 8d       	ldd	r26, Y+24	; 0x18
    134e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1352:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1354:	48 a1       	ldd	r20, Y+32	; 0x20
    1356:	59 a1       	ldd	r21, Y+33	; 0x21
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	a4 1f       	adc	r26, r20
    135e:	b5 1f       	adc	r27, r21
    1360:	c8 16       	cp	r12, r24
    1362:	d9 06       	cpc	r13, r25
    1364:	ea 06       	cpc	r14, r26
    1366:	fb 06       	cpc	r15, r27
    1368:	a0 f4       	brcc	.+40     	; 0x1392 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    136a:	1b 81       	ldd	r17, Y+3	; 0x03
    136c:	10 c0       	rjmp	.+32     	; 0x138e <move_window+0xa0>
					wsect += fs->sects_fat;
    136e:	8e 89       	ldd	r24, Y+22	; 0x16
    1370:	9f 89       	ldd	r25, Y+23	; 0x17
    1372:	a8 8d       	ldd	r26, Y+24	; 0x18
    1374:	b9 8d       	ldd	r27, Y+25	; 0x19
    1376:	c8 0e       	add	r12, r24
    1378:	d9 1e       	adc	r13, r25
    137a:	ea 1e       	adc	r14, r26
    137c:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	b3 01       	movw	r22, r6
    1382:	a7 01       	movw	r20, r14
    1384:	96 01       	movw	r18, r12
    1386:	01 e0       	ldi	r16, 0x01	; 1
    1388:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    138c:	11 50       	subi	r17, 0x01	; 1
    138e:	12 30       	cpi	r17, 0x02	; 2
    1390:	70 f7       	brcc	.-36     	; 0x136e <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1392:	81 14       	cp	r8, r1
    1394:	91 04       	cpc	r9, r1
    1396:	a1 04       	cpc	r10, r1
    1398:	b1 04       	cpc	r11, r1
    139a:	91 f0       	breq	.+36     	; 0x13c0 <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    139c:	be 01       	movw	r22, r28
    139e:	62 5d       	subi	r22, 0xD2	; 210
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	a5 01       	movw	r20, r10
    13a6:	94 01       	movw	r18, r8
    13a8:	01 e0       	ldi	r16, 0x01	; 1
    13aa:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    13ae:	88 23       	and	r24, r24
    13b0:	29 f4       	brne	.+10     	; 0x13bc <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    13b2:	8a a6       	std	Y+42, r8	; 0x2a
    13b4:	9b a6       	std	Y+43, r9	; 0x2b
    13b6:	ac a6       	std	Y+44, r10	; 0x2c
    13b8:	bd a6       	std	Y+45, r11	; 0x2d
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <move_window+0xd4>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <move_window+0xd4>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	9f 90       	pop	r9
    13d8:	8f 90       	pop	r8
    13da:	7f 90       	pop	r7
    13dc:	6f 90       	pop	r6
    13de:	08 95       	ret

000013e0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    13e0:	0f 93       	push	r16
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
	if (res == FR_OK) {
    13f4:	88 23       	and	r24, r24
    13f6:	09 f0       	breq	.+2      	; 0x13fa <sync+0x1a>
    13f8:	7e c0       	rjmp	.+252    	; 0x14f6 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    13fa:	88 81       	ld	r24, Y
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	09 f0       	breq	.+2      	; 0x1402 <sync+0x22>
    1400:	72 c0       	rjmp	.+228    	; 0x14e6 <sync+0x106>
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	88 23       	and	r24, r24
    1406:	09 f4       	brne	.+2      	; 0x140a <sync+0x2a>
    1408:	6e c0       	rjmp	.+220    	; 0x14e6 <sync+0x106>
			fs->winsect = 0;
    140a:	1a a6       	std	Y+42, r1	; 0x2a
    140c:	1b a6       	std	Y+43, r1	; 0x2b
    140e:	1c a6       	std	Y+44, r1	; 0x2c
    1410:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1412:	be 01       	movw	r22, r28
    1414:	62 5d       	subi	r22, 0xD2	; 210
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	fb 01       	movw	r30, r22
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	92 e0       	ldi	r25, 0x02	; 2
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    1420:	11 92       	st	Z+, r1
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	8f 3f       	cpi	r24, 0xFF	; 255
    1428:	92 07       	cpc	r25, r18
    142a:	d1 f7       	brne	.-12     	; 0x1420 <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    142c:	c4 5d       	subi	r28, 0xD4	; 212
    142e:	dd 4f       	sbci	r29, 0xFD	; 253
    1430:	85 e5       	ldi	r24, 0x55	; 85
    1432:	89 93       	st	Y+, r24
    1434:	8a ea       	ldi	r24, 0xAA	; 170
    1436:	88 83       	st	Y, r24
    1438:	cd 52       	subi	r28, 0x2D	; 45
    143a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    143c:	82 e5       	ldi	r24, 0x52	; 82
    143e:	8e a7       	std	Y+46, r24	; 0x2e
    1440:	8f a7       	std	Y+47, r24	; 0x2f
    1442:	21 e6       	ldi	r18, 0x61	; 97
    1444:	28 ab       	std	Y+48, r18	; 0x30
    1446:	91 e4       	ldi	r25, 0x41	; 65
    1448:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    144a:	ce 5e       	subi	r28, 0xEE	; 238
    144c:	dd 4f       	sbci	r29, 0xFD	; 253
    144e:	82 e7       	ldi	r24, 0x72	; 114
    1450:	89 93       	st	Y+, r24
    1452:	89 93       	st	Y+, r24
    1454:	99 93       	st	Y+, r25
    1456:	28 83       	st	Y, r18
    1458:	c5 51       	subi	r28, 0x15	; 21
    145a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    145c:	8e 85       	ldd	r24, Y+14	; 0x0e
    145e:	ca 5e       	subi	r28, 0xEA	; 234
    1460:	dd 4f       	sbci	r29, 0xFD	; 253
    1462:	88 83       	st	Y, r24
    1464:	c6 51       	subi	r28, 0x16	; 22
    1466:	d2 40       	sbci	r29, 0x02	; 2
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	c9 5e       	subi	r28, 0xE9	; 233
    146c:	dd 4f       	sbci	r29, 0xFD	; 253
    146e:	88 83       	st	Y, r24
    1470:	c7 51       	subi	r28, 0x17	; 23
    1472:	d2 40       	sbci	r29, 0x02	; 2
    1474:	8e 85       	ldd	r24, Y+14	; 0x0e
    1476:	9f 85       	ldd	r25, Y+15	; 0x0f
    1478:	a8 89       	ldd	r26, Y+16	; 0x10
    147a:	b9 89       	ldd	r27, Y+17	; 0x11
    147c:	9d 01       	movw	r18, r26
    147e:	44 27       	eor	r20, r20
    1480:	55 27       	eor	r21, r21
    1482:	c8 5e       	subi	r28, 0xE8	; 232
    1484:	dd 4f       	sbci	r29, 0xFD	; 253
    1486:	28 83       	st	Y, r18
    1488:	21 96       	adiw	r28, 0x01	; 1
    148a:	8b 2f       	mov	r24, r27
    148c:	99 27       	eor	r25, r25
    148e:	aa 27       	eor	r26, r26
    1490:	bb 27       	eor	r27, r27
    1492:	88 83       	st	Y, r24
    1494:	c9 51       	subi	r28, 0x19	; 25
    1496:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1498:	8a 85       	ldd	r24, Y+10	; 0x0a
    149a:	c6 5e       	subi	r28, 0xE6	; 230
    149c:	dd 4f       	sbci	r29, 0xFD	; 253
    149e:	88 83       	st	Y, r24
    14a0:	ca 51       	subi	r28, 0x1A	; 26
    14a2:	d2 40       	sbci	r29, 0x02	; 2
    14a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a6:	c5 5e       	subi	r28, 0xE5	; 229
    14a8:	dd 4f       	sbci	r29, 0xFD	; 253
    14aa:	88 83       	st	Y, r24
    14ac:	cb 51       	subi	r28, 0x1B	; 27
    14ae:	d2 40       	sbci	r29, 0x02	; 2
    14b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    14b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    14b8:	9d 01       	movw	r18, r26
    14ba:	44 27       	eor	r20, r20
    14bc:	55 27       	eor	r21, r21
    14be:	c4 5e       	subi	r28, 0xE4	; 228
    14c0:	dd 4f       	sbci	r29, 0xFD	; 253
    14c2:	28 83       	st	Y, r18
    14c4:	21 96       	adiw	r28, 0x01	; 1
    14c6:	8b 2f       	mov	r24, r27
    14c8:	99 27       	eor	r25, r25
    14ca:	aa 27       	eor	r26, r26
    14cc:	bb 27       	eor	r27, r27
    14ce:	88 83       	st	Y, r24
    14d0:	cd 51       	subi	r28, 0x1D	; 29
    14d2:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    14d4:	2a 89       	ldd	r18, Y+18	; 0x12
    14d6:	3b 89       	ldd	r19, Y+19	; 0x13
    14d8:	4c 89       	ldd	r20, Y+20	; 0x14
    14da:	5d 89       	ldd	r21, Y+21	; 0x15
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	01 e0       	ldi	r16, 0x01	; 1
    14e0:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
			fs->fsi_flag = 0;
    14e4:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 8b 07 	call	0xf16	; 0xf16 <disk_ioctl>
    14f2:	81 11       	cpse	r24, r1
    14f4:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    14fe:	7f 92       	push	r7
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	4c 01       	movw	r8, r24
    151a:	7a 01       	movw	r14, r20
    151c:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    151e:	42 30       	cpi	r20, 0x02	; 2
    1520:	51 05       	cpc	r21, r1
    1522:	61 05       	cpc	r22, r1
    1524:	71 05       	cpc	r23, r1
    1526:	08 f4       	brcc	.+2      	; 0x152a <get_fat+0x2c>
    1528:	bb c0       	rjmp	.+374    	; 0x16a0 <get_fat+0x1a2>
    152a:	f4 01       	movw	r30, r8
    152c:	82 8d       	ldd	r24, Z+26	; 0x1a
    152e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1530:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1532:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1534:	48 17       	cp	r20, r24
    1536:	59 07       	cpc	r21, r25
    1538:	6a 07       	cpc	r22, r26
    153a:	7b 07       	cpc	r23, r27
    153c:	08 f0       	brcs	.+2      	; 0x1540 <get_fat+0x42>
    153e:	b0 c0       	rjmp	.+352    	; 0x16a0 <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    1540:	a6 8c       	ldd	r10, Z+30	; 0x1e
    1542:	b7 8c       	ldd	r11, Z+31	; 0x1f
    1544:	c0 a0       	ldd	r12, Z+32	; 0x20
    1546:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    1548:	80 81       	ld	r24, Z
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	09 f4       	brne	.+2      	; 0x1550 <get_fat+0x52>
    154e:	4d c0       	rjmp	.+154    	; 0x15ea <get_fat+0xec>
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	09 f4       	brne	.+2      	; 0x1556 <get_fat+0x58>
    1554:	68 c0       	rjmp	.+208    	; 0x1626 <get_fat+0x128>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	09 f0       	breq	.+2      	; 0x155c <get_fat+0x5e>
    155a:	a7 c0       	rjmp	.+334    	; 0x16aa <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    155c:	ea 01       	movw	r28, r20
    155e:	d6 95       	lsr	r29
    1560:	c7 95       	ror	r28
    1562:	c4 0f       	add	r28, r20
    1564:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1566:	ae 01       	movw	r20, r28
    1568:	45 2f       	mov	r20, r21
    156a:	55 27       	eor	r21, r21
    156c:	46 95       	lsr	r20
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	4a 0d       	add	r20, r10
    1574:	5b 1d       	adc	r21, r11
    1576:	6c 1d       	adc	r22, r12
    1578:	7d 1d       	adc	r23, r13
    157a:	c4 01       	movw	r24, r8
    157c:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1580:	88 23       	and	r24, r24
    1582:	09 f0       	breq	.+2      	; 0x1586 <get_fat+0x88>
    1584:	92 c0       	rjmp	.+292    	; 0x16aa <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1586:	fe 01       	movw	r30, r28
    1588:	f1 70       	andi	r31, 0x01	; 1
    158a:	e8 0d       	add	r30, r8
    158c:	f9 1d       	adc	r31, r9
    158e:	76 a4       	ldd	r7, Z+46	; 0x2e
    1590:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1592:	ae 01       	movw	r20, r28
    1594:	45 2f       	mov	r20, r21
    1596:	55 27       	eor	r21, r21
    1598:	46 95       	lsr	r20
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	4a 0d       	add	r20, r10
    15a0:	5b 1d       	adc	r21, r11
    15a2:	6c 1d       	adc	r22, r12
    15a4:	7d 1d       	adc	r23, r13
    15a6:	c4 01       	movw	r24, r8
    15a8:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    15ac:	88 23       	and	r24, r24
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <get_fat+0xb4>
    15b0:	7c c0       	rjmp	.+248    	; 0x16aa <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    15b2:	67 2d       	mov	r22, r7
    15b4:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    15b6:	d1 70       	andi	r29, 0x01	; 1
    15b8:	c8 0d       	add	r28, r8
    15ba:	d9 1d       	adc	r29, r9
    15bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	68 2b       	or	r22, r24
    15c2:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    15c4:	c7 01       	movw	r24, r14
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	90 70       	andi	r25, 0x00	; 0
    15ca:	89 2b       	or	r24, r25
    15cc:	39 f0       	breq	.+14     	; 0x15dc <get_fat+0xde>
    15ce:	44 e0       	ldi	r20, 0x04	; 4
    15d0:	76 95       	lsr	r23
    15d2:	67 95       	ror	r22
    15d4:	4a 95       	dec	r20
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <get_fat+0xd2>
    15d8:	9b 01       	movw	r18, r22
    15da:	22 c0       	rjmp	.+68     	; 0x1620 <get_fat+0x122>
    15dc:	9b 01       	movw	r18, r22
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	3f 70       	andi	r19, 0x0F	; 15
    15e4:	40 70       	andi	r20, 0x00	; 0
    15e6:	50 70       	andi	r21, 0x00	; 0
    15e8:	64 c0       	rjmp	.+200    	; 0x16b2 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    15ea:	45 2f       	mov	r20, r21
    15ec:	56 2f       	mov	r21, r22
    15ee:	67 2f       	mov	r22, r23
    15f0:	77 27       	eor	r23, r23
    15f2:	4a 0d       	add	r20, r10
    15f4:	5b 1d       	adc	r21, r11
    15f6:	6c 1d       	adc	r22, r12
    15f8:	7d 1d       	adc	r23, r13
    15fa:	c4 01       	movw	r24, r8
    15fc:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1600:	88 23       	and	r24, r24
    1602:	09 f0       	breq	.+2      	; 0x1606 <get_fat+0x108>
    1604:	52 c0       	rjmp	.+164    	; 0x16aa <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1606:	f7 01       	movw	r30, r14
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	f1 70       	andi	r31, 0x01	; 1
    160e:	e8 0d       	add	r30, r8
    1610:	f9 1d       	adc	r31, r9
    1612:	97 a5       	ldd	r25, Z+47	; 0x2f
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	26 a5       	ldd	r18, Z+46	; 0x2e
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	82 2b       	or	r24, r18
    161c:	93 2b       	or	r25, r19
    161e:	9c 01       	movw	r18, r24
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	46 c0       	rjmp	.+140    	; 0x16b2 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    1626:	97 e0       	ldi	r25, 0x07	; 7
    1628:	76 95       	lsr	r23
    162a:	67 95       	ror	r22
    162c:	57 95       	ror	r21
    162e:	47 95       	ror	r20
    1630:	9a 95       	dec	r25
    1632:	d1 f7       	brne	.-12     	; 0x1628 <get_fat+0x12a>
    1634:	4a 0d       	add	r20, r10
    1636:	5b 1d       	adc	r21, r11
    1638:	6c 1d       	adc	r22, r12
    163a:	7d 1d       	adc	r23, r13
    163c:	c4 01       	movw	r24, r8
    163e:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1642:	88 23       	and	r24, r24
    1644:	91 f5       	brne	.+100    	; 0x16aa <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    1646:	f7 01       	movw	r30, r14
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	f1 70       	andi	r31, 0x01	; 1
    1652:	e8 0d       	add	r30, r8
    1654:	f9 1d       	adc	r31, r9
    1656:	81 a9       	ldd	r24, Z+49	; 0x31
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	58 2f       	mov	r21, r24
    1660:	44 27       	eor	r20, r20
    1662:	33 27       	eor	r19, r19
    1664:	22 27       	eor	r18, r18
    1666:	80 a9       	ldd	r24, Z+48	; 0x30
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	dc 01       	movw	r26, r24
    1670:	99 27       	eor	r25, r25
    1672:	88 27       	eor	r24, r24
    1674:	28 2b       	or	r18, r24
    1676:	39 2b       	or	r19, r25
    1678:	4a 2b       	or	r20, r26
    167a:	5b 2b       	or	r21, r27
    167c:	86 a5       	ldd	r24, Z+46	; 0x2e
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	28 2b       	or	r18, r24
    1686:	39 2b       	or	r19, r25
    1688:	4a 2b       	or	r20, r26
    168a:	5b 2b       	or	r21, r27
    168c:	97 a5       	ldd	r25, Z+47	; 0x2f
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	28 2b       	or	r18, r24
    1696:	39 2b       	or	r19, r25
    1698:	4a 2b       	or	r20, r26
    169a:	5b 2b       	or	r21, r27
    169c:	5f 70       	andi	r21, 0x0F	; 15
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <get_fat+0x1b4>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <get_fat+0x1b4>
    16aa:	2f ef       	ldi	r18, 0xFF	; 255
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f ef       	ldi	r20, 0xFF	; 255
    16b0:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    16b2:	b9 01       	movw	r22, r18
    16b4:	ca 01       	movw	r24, r20
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	bf 90       	pop	r11
    16c8:	af 90       	pop	r10
    16ca:	9f 90       	pop	r9
    16cc:	8f 90       	pop	r8
    16ce:	7f 90       	pop	r7
    16d0:	08 95       	ret

000016d2 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    16d2:	2f 92       	push	r2
    16d4:	3f 92       	push	r3
    16d6:	4f 92       	push	r4
    16d8:	5f 92       	push	r5
    16da:	6f 92       	push	r6
    16dc:	7f 92       	push	r7
    16de:	8f 92       	push	r8
    16e0:	9f 92       	push	r9
    16e2:	af 92       	push	r10
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	3c 01       	movw	r6, r24
    16f8:	6a 01       	movw	r12, r20
    16fa:	7b 01       	movw	r14, r22
    16fc:	48 01       	movw	r8, r16
    16fe:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    1700:	42 30       	cpi	r20, 0x02	; 2
    1702:	51 05       	cpc	r21, r1
    1704:	61 05       	cpc	r22, r1
    1706:	71 05       	cpc	r23, r1
    1708:	08 f4       	brcc	.+2      	; 0x170c <put_fat+0x3a>
    170a:	ba c0       	rjmp	.+372    	; 0x1880 <put_fat+0x1ae>
    170c:	f3 01       	movw	r30, r6
    170e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1710:	93 8d       	ldd	r25, Z+27	; 0x1b
    1712:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1714:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1716:	48 17       	cp	r20, r24
    1718:	59 07       	cpc	r21, r25
    171a:	6a 07       	cpc	r22, r26
    171c:	7b 07       	cpc	r23, r27
    171e:	08 f0       	brcs	.+2      	; 0x1722 <put_fat+0x50>
    1720:	af c0       	rjmp	.+350    	; 0x1880 <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    1722:	26 8c       	ldd	r2, Z+30	; 0x1e
    1724:	37 8c       	ldd	r3, Z+31	; 0x1f
    1726:	40 a0       	ldd	r4, Z+32	; 0x20
    1728:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    172a:	80 81       	ld	r24, Z
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	09 f4       	brne	.+2      	; 0x1732 <put_fat+0x60>
    1730:	64 c0       	rjmp	.+200    	; 0x17fa <put_fat+0x128>
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	09 f4       	brne	.+2      	; 0x1738 <put_fat+0x66>
    1736:	7a c0       	rjmp	.+244    	; 0x182c <put_fat+0x15a>
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	11 f0       	breq	.+4      	; 0x1740 <put_fat+0x6e>
    173c:	22 e0       	ldi	r18, 0x02	; 2
    173e:	9c c0       	rjmp	.+312    	; 0x1878 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1740:	ea 01       	movw	r28, r20
    1742:	d6 95       	lsr	r29
    1744:	c7 95       	ror	r28
    1746:	c4 0f       	add	r28, r20
    1748:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    174a:	ae 01       	movw	r20, r28
    174c:	45 2f       	mov	r20, r21
    174e:	55 27       	eor	r21, r21
    1750:	46 95       	lsr	r20
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	42 0d       	add	r20, r2
    1758:	53 1d       	adc	r21, r3
    175a:	64 1d       	adc	r22, r4
    175c:	75 1d       	adc	r23, r5
    175e:	c3 01       	movw	r24, r6
    1760:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1764:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1766:	88 23       	and	r24, r24
    1768:	09 f0       	breq	.+2      	; 0x176c <put_fat+0x9a>
    176a:	86 c0       	rjmp	.+268    	; 0x1878 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    176c:	de 01       	movw	r26, r28
    176e:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1770:	86 01       	movw	r16, r12
    1772:	01 70       	andi	r16, 0x01	; 1
    1774:	10 70       	andi	r17, 0x00	; 0
    1776:	01 15       	cp	r16, r1
    1778:	11 05       	cpc	r17, r1
    177a:	51 f0       	breq	.+20     	; 0x1790 <put_fat+0xbe>
    177c:	f3 01       	movw	r30, r6
    177e:	ea 0f       	add	r30, r26
    1780:	fb 1f       	adc	r31, r27
    1782:	86 a5       	ldd	r24, Z+46	; 0x2e
    1784:	8f 70       	andi	r24, 0x0F	; 15
    1786:	98 2d       	mov	r25, r8
    1788:	92 95       	swap	r25
    178a:	90 7f       	andi	r25, 0xF0	; 240
    178c:	98 2b       	or	r25, r24
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <put_fat+0xc0>
    1790:	98 2d       	mov	r25, r8
    1792:	a6 0d       	add	r26, r6
    1794:	b7 1d       	adc	r27, r7
    1796:	9e 96       	adiw	r26, 0x2e	; 46
    1798:	9c 93       	st	X, r25
			bc++;
    179a:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	f3 01       	movw	r30, r6
    17a0:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    17a2:	ae 01       	movw	r20, r28
    17a4:	45 2f       	mov	r20, r21
    17a6:	55 27       	eor	r21, r21
    17a8:	46 95       	lsr	r20
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	42 0d       	add	r20, r2
    17b0:	53 1d       	adc	r21, r3
    17b2:	64 1d       	adc	r22, r4
    17b4:	75 1d       	adc	r23, r5
    17b6:	c3 01       	movw	r24, r6
    17b8:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    17bc:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17be:	88 23       	and	r24, r24
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <put_fat+0xf2>
    17c2:	5a c0       	rjmp	.+180    	; 0x1878 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    17c4:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    17c6:	01 2b       	or	r16, r17
    17c8:	49 f0       	breq	.+18     	; 0x17dc <put_fat+0x10a>
    17ca:	64 e0       	ldi	r22, 0x04	; 4
    17cc:	b6 94       	lsr	r11
    17ce:	a7 94       	ror	r10
    17d0:	97 94       	ror	r9
    17d2:	87 94       	ror	r8
    17d4:	6a 95       	dec	r22
    17d6:	d1 f7       	brne	.-12     	; 0x17cc <put_fat+0xfa>
    17d8:	48 2d       	mov	r20, r8
    17da:	0b c0       	rjmp	.+22     	; 0x17f2 <put_fat+0x120>
    17dc:	f3 01       	movw	r30, r6
    17de:	ec 0f       	add	r30, r28
    17e0:	fd 1f       	adc	r31, r29
    17e2:	46 a5       	ldd	r20, Z+46	; 0x2e
    17e4:	40 7f       	andi	r20, 0xF0	; 240
    17e6:	bb 27       	eor	r27, r27
    17e8:	ab 2d       	mov	r26, r11
    17ea:	9a 2d       	mov	r25, r10
    17ec:	89 2d       	mov	r24, r9
    17ee:	8f 70       	andi	r24, 0x0F	; 15
    17f0:	48 2b       	or	r20, r24
    17f2:	c6 0d       	add	r28, r6
    17f4:	d7 1d       	adc	r29, r7
    17f6:	4e a7       	std	Y+46, r20	; 0x2e
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    17fa:	77 27       	eor	r23, r23
    17fc:	6f 2d       	mov	r22, r15
    17fe:	5e 2d       	mov	r21, r14
    1800:	4d 2d       	mov	r20, r13
    1802:	42 0d       	add	r20, r2
    1804:	53 1d       	adc	r21, r3
    1806:	64 1d       	adc	r22, r4
    1808:	75 1d       	adc	r23, r5
    180a:	c3 01       	movw	r24, r6
    180c:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1810:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1812:	88 23       	and	r24, r24
    1814:	89 f5       	brne	.+98     	; 0x1878 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    1816:	f6 01       	movw	r30, r12
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	f1 70       	andi	r31, 0x01	; 1
    181e:	e6 0d       	add	r30, r6
    1820:	f7 1d       	adc	r31, r7
    1822:	86 a6       	std	Z+46, r8	; 0x2e
    1824:	89 2d       	mov	r24, r9
    1826:	99 27       	eor	r25, r25
    1828:	87 a7       	std	Z+47, r24	; 0x2f
    182a:	26 c0       	rjmp	.+76     	; 0x1878 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    182c:	87 e0       	ldi	r24, 0x07	; 7
    182e:	76 95       	lsr	r23
    1830:	67 95       	ror	r22
    1832:	57 95       	ror	r21
    1834:	47 95       	ror	r20
    1836:	8a 95       	dec	r24
    1838:	d1 f7       	brne	.-12     	; 0x182e <put_fat+0x15c>
    183a:	42 0d       	add	r20, r2
    183c:	53 1d       	adc	r21, r3
    183e:	64 1d       	adc	r22, r4
    1840:	75 1d       	adc	r23, r5
    1842:	c3 01       	movw	r24, r6
    1844:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1848:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    184a:	88 23       	and	r24, r24
    184c:	a9 f4       	brne	.+42     	; 0x1878 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    184e:	f6 01       	movw	r30, r12
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	f1 70       	andi	r31, 0x01	; 1
    185a:	e6 0d       	add	r30, r6
    185c:	f7 1d       	adc	r31, r7
    185e:	86 a6       	std	Z+46, r8	; 0x2e
    1860:	89 2d       	mov	r24, r9
    1862:	99 27       	eor	r25, r25
    1864:	87 a7       	std	Z+47, r24	; 0x2f
    1866:	c5 01       	movw	r24, r10
    1868:	aa 27       	eor	r26, r26
    186a:	bb 27       	eor	r27, r27
    186c:	80 ab       	std	Z+48, r24	; 0x30
    186e:	8b 2d       	mov	r24, r11
    1870:	99 27       	eor	r25, r25
    1872:	aa 27       	eor	r26, r26
    1874:	bb 27       	eor	r27, r27
    1876:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	f3 01       	movw	r30, r6
    187c:	84 83       	std	Z+4, r24	; 0x04
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <put_fat+0x1b0>
    1880:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1882:	82 2f       	mov	r24, r18
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	bf 90       	pop	r11
    1896:	af 90       	pop	r10
    1898:	9f 90       	pop	r9
    189a:	8f 90       	pop	r8
    189c:	7f 90       	pop	r7
    189e:	6f 90       	pop	r6
    18a0:	5f 90       	pop	r5
    18a2:	4f 90       	pop	r4
    18a4:	3f 90       	pop	r3
    18a6:	2f 90       	pop	r2
    18a8:	08 95       	ret

000018aa <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	ec 01       	movw	r28, r24
    18c2:	7a 01       	movw	r14, r20
    18c4:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    18c6:	42 30       	cpi	r20, 0x02	; 2
    18c8:	51 05       	cpc	r21, r1
    18ca:	61 05       	cpc	r22, r1
    18cc:	71 05       	cpc	r23, r1
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <remove_chain+0x28>
    18d0:	58 c0       	rjmp	.+176    	; 0x1982 <remove_chain+0xd8>
    18d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18d6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18d8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18da:	48 17       	cp	r20, r24
    18dc:	59 07       	cpc	r21, r25
    18de:	6a 07       	cpc	r22, r26
    18e0:	7b 07       	cpc	r23, r27
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <remove_chain+0x3c>
    18e4:	41 c0       	rjmp	.+130    	; 0x1968 <remove_chain+0xbe>
    18e6:	4d c0       	rjmp	.+154    	; 0x1982 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    18e8:	ce 01       	movw	r24, r28
    18ea:	b8 01       	movw	r22, r16
    18ec:	a7 01       	movw	r20, r14
    18ee:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    18f2:	5b 01       	movw	r10, r22
    18f4:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    18f6:	61 15       	cp	r22, r1
    18f8:	71 05       	cpc	r23, r1
    18fa:	81 05       	cpc	r24, r1
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <remove_chain+0x58>
    1900:	42 c0       	rjmp	.+132    	; 0x1986 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	a8 16       	cp	r10, r24
    1906:	b1 04       	cpc	r11, r1
    1908:	c1 04       	cpc	r12, r1
    190a:	d1 04       	cpc	r13, r1
    190c:	d1 f1       	breq	.+116    	; 0x1982 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	a2 16       	cp	r10, r18
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	b2 06       	cpc	r11, r18
    1916:	2f ef       	ldi	r18, 0xFF	; 255
    1918:	c2 06       	cpc	r12, r18
    191a:	2f ef       	ldi	r18, 0xFF	; 255
    191c:	d2 06       	cpc	r13, r18
    191e:	11 f4       	brne	.+4      	; 0x1924 <remove_chain+0x7a>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	32 c0       	rjmp	.+100    	; 0x1988 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1924:	ce 01       	movw	r24, r28
    1926:	b8 01       	movw	r22, r16
    1928:	a7 01       	movw	r20, r14
    192a:	00 e0       	ldi	r16, 0x00	; 0
    192c:	10 e0       	ldi	r17, 0x00	; 0
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <put_fat>
			if (res != FR_OK) break;
    1936:	88 23       	and	r24, r24
    1938:	39 f5       	brne	.+78     	; 0x1988 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    193a:	8e 85       	ldd	r24, Y+14	; 0x0e
    193c:	9f 85       	ldd	r25, Y+15	; 0x0f
    193e:	a8 89       	ldd	r26, Y+16	; 0x10
    1940:	b9 89       	ldd	r27, Y+17	; 0x11
    1942:	8f 3f       	cpi	r24, 0xFF	; 255
    1944:	2f ef       	ldi	r18, 0xFF	; 255
    1946:	92 07       	cpc	r25, r18
    1948:	2f ef       	ldi	r18, 0xFF	; 255
    194a:	a2 07       	cpc	r26, r18
    194c:	2f ef       	ldi	r18, 0xFF	; 255
    194e:	b2 07       	cpc	r27, r18
    1950:	41 f0       	breq	.+16     	; 0x1962 <remove_chain+0xb8>
				fs->free_clust++;
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	a1 1d       	adc	r26, r1
    1956:	b1 1d       	adc	r27, r1
    1958:	8e 87       	std	Y+14, r24	; 0x0e
    195a:	9f 87       	std	Y+15, r25	; 0x0f
    195c:	a8 8b       	std	Y+16, r26	; 0x10
    195e:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1960:	9d 82       	std	Y+5, r9	; 0x05
    1962:	86 01       	movw	r16, r12
    1964:	75 01       	movw	r14, r10
    1966:	02 c0       	rjmp	.+4      	; 0x196c <remove_chain+0xc2>
    1968:	99 24       	eor	r9, r9
    196a:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    196c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    196e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1970:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1972:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1974:	e8 16       	cp	r14, r24
    1976:	f9 06       	cpc	r15, r25
    1978:	0a 07       	cpc	r16, r26
    197a:	1b 07       	cpc	r17, r27
    197c:	08 f4       	brcc	.+2      	; 0x1980 <remove_chain+0xd6>
    197e:	b4 cf       	rjmp	.-152    	; 0x18e8 <remove_chain+0x3e>
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <remove_chain+0xdc>
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <remove_chain+0xde>
    1986:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	9f 90       	pop	r9
    199e:	08 95       	ret

000019a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    19a0:	2f 92       	push	r2
    19a2:	3f 92       	push	r3
    19a4:	4f 92       	push	r4
    19a6:	5f 92       	push	r5
    19a8:	6f 92       	push	r6
    19aa:	7f 92       	push	r7
    19ac:	8f 92       	push	r8
    19ae:	9f 92       	push	r9
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <create_chain+0x26>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	1c 01       	movw	r2, r24
    19ce:	2a 01       	movw	r4, r20
    19d0:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    19d2:	dc 01       	movw	r26, r24
    19d4:	5a 96       	adiw	r26, 0x1a	; 26
    19d6:	8d 91       	ld	r24, X+
    19d8:	9d 91       	ld	r25, X+
    19da:	0d 90       	ld	r0, X+
    19dc:	bc 91       	ld	r27, X
    19de:	a0 2d       	mov	r26, r0
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	ab 83       	std	Y+3, r26	; 0x03
    19e6:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    19e8:	41 15       	cp	r20, r1
    19ea:	51 05       	cpc	r21, r1
    19ec:	61 05       	cpc	r22, r1
    19ee:	71 05       	cpc	r23, r1
    19f0:	81 f4       	brne	.+32     	; 0x1a12 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    19f2:	f1 01       	movw	r30, r2
    19f4:	82 84       	ldd	r8, Z+10	; 0x0a
    19f6:	93 84       	ldd	r9, Z+11	; 0x0b
    19f8:	a4 84       	ldd	r10, Z+12	; 0x0c
    19fa:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    19fc:	81 14       	cp	r8, r1
    19fe:	91 04       	cpc	r9, r1
    1a00:	a1 04       	cpc	r10, r1
    1a02:	b1 04       	cpc	r11, r1
    1a04:	11 f1       	breq	.+68     	; 0x1a4a <create_chain+0xaa>
    1a06:	88 16       	cp	r8, r24
    1a08:	99 06       	cpc	r9, r25
    1a0a:	aa 06       	cpc	r10, r26
    1a0c:	bb 06       	cpc	r11, r27
    1a0e:	e8 f4       	brcc	.+58     	; 0x1a4a <create_chain+0xaa>
    1a10:	21 c0       	rjmp	.+66     	; 0x1a54 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1a12:	c1 01       	movw	r24, r2
    1a14:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1a1c:	62 30       	cpi	r22, 0x02	; 2
    1a1e:	71 05       	cpc	r23, r1
    1a20:	81 05       	cpc	r24, r1
    1a22:	91 05       	cpc	r25, r1
    1a24:	28 f4       	brcc	.+10     	; 0x1a30 <create_chain+0x90>
    1a26:	21 e0       	ldi	r18, 0x01	; 1
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	93 c0       	rjmp	.+294    	; 0x1b56 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	ab 81       	ldd	r26, Y+3	; 0x03
    1a36:	bc 81       	ldd	r27, Y+4	; 0x04
    1a38:	28 17       	cp	r18, r24
    1a3a:	39 07       	cpc	r19, r25
    1a3c:	4a 07       	cpc	r20, r26
    1a3e:	5b 07       	cpc	r21, r27
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <create_chain+0xa4>
    1a42:	89 c0       	rjmp	.+274    	; 0x1b56 <create_chain+0x1b6>
    1a44:	53 01       	movw	r10, r6
    1a46:	42 01       	movw	r8, r4
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <create_chain+0xb4>
    1a4a:	b1 e0       	ldi	r27, 0x01	; 1
    1a4c:	8b 2e       	mov	r8, r27
    1a4e:	91 2c       	mov	r9, r1
    1a50:	a1 2c       	mov	r10, r1
    1a52:	b1 2c       	mov	r11, r1
    1a54:	75 01       	movw	r14, r10
    1a56:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1a58:	08 94       	sec
    1a5a:	c1 1c       	adc	r12, r1
    1a5c:	d1 1c       	adc	r13, r1
    1a5e:	e1 1c       	adc	r14, r1
    1a60:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	ab 81       	ldd	r26, Y+3	; 0x03
    1a68:	bc 81       	ldd	r27, Y+4	; 0x04
    1a6a:	c8 16       	cp	r12, r24
    1a6c:	d9 06       	cpc	r13, r25
    1a6e:	ea 06       	cpc	r14, r26
    1a70:	fb 06       	cpc	r15, r27
    1a72:	60 f0       	brcs	.+24     	; 0x1a8c <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1a74:	92 e0       	ldi	r25, 0x02	; 2
    1a76:	89 16       	cp	r8, r25
    1a78:	91 04       	cpc	r9, r1
    1a7a:	a1 04       	cpc	r10, r1
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <create_chain+0xe2>
    1a80:	61 c0       	rjmp	.+194    	; 0x1b44 <create_chain+0x1a4>
    1a82:	a2 e0       	ldi	r26, 0x02	; 2
    1a84:	ca 2e       	mov	r12, r26
    1a86:	d1 2c       	mov	r13, r1
    1a88:	e1 2c       	mov	r14, r1
    1a8a:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a8c:	c1 01       	movw	r24, r2
    1a8e:	b7 01       	movw	r22, r14
    1a90:	a6 01       	movw	r20, r12
    1a92:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1a9a:	61 15       	cp	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	81 05       	cpc	r24, r1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	a9 f0       	breq	.+42     	; 0x1ace <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1aa4:	6f 3f       	cpi	r22, 0xFF	; 255
    1aa6:	af ef       	ldi	r26, 0xFF	; 255
    1aa8:	7a 07       	cpc	r23, r26
    1aaa:	af ef       	ldi	r26, 0xFF	; 255
    1aac:	8a 07       	cpc	r24, r26
    1aae:	af ef       	ldi	r26, 0xFF	; 255
    1ab0:	9a 07       	cpc	r25, r26
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <create_chain+0x116>
    1ab4:	50 c0       	rjmp	.+160    	; 0x1b56 <create_chain+0x1b6>
    1ab6:	61 30       	cpi	r22, 0x01	; 1
    1ab8:	71 05       	cpc	r23, r1
    1aba:	81 05       	cpc	r24, r1
    1abc:	91 05       	cpc	r25, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <create_chain+0x122>
    1ac0:	4a c0       	rjmp	.+148    	; 0x1b56 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1ac2:	c8 14       	cp	r12, r8
    1ac4:	d9 04       	cpc	r13, r9
    1ac6:	ea 04       	cpc	r14, r10
    1ac8:	fb 04       	cpc	r15, r11
    1aca:	31 f6       	brne	.-116    	; 0x1a58 <create_chain+0xb8>
    1acc:	3b c0       	rjmp	.+118    	; 0x1b44 <create_chain+0x1a4>
    1ace:	bc 2c       	mov	r11, r12
    1ad0:	ad 2c       	mov	r10, r13
    1ad2:	9e 2c       	mov	r9, r14
    1ad4:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1ad6:	c1 01       	movw	r24, r2
    1ad8:	a6 01       	movw	r20, r12
    1ada:	b7 01       	movw	r22, r14
    1adc:	0f ef       	ldi	r16, 0xFF	; 255
    1ade:	1f ef       	ldi	r17, 0xFF	; 255
    1ae0:	2f ef       	ldi	r18, 0xFF	; 255
    1ae2:	3f e0       	ldi	r19, 0x0F	; 15
    1ae4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <put_fat>
    1ae8:	88 23       	and	r24, r24
    1aea:	89 f5       	brne	.+98     	; 0x1b4e <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1aec:	41 14       	cp	r4, r1
    1aee:	51 04       	cpc	r5, r1
    1af0:	61 04       	cpc	r6, r1
    1af2:	71 04       	cpc	r7, r1
    1af4:	49 f0       	breq	.+18     	; 0x1b08 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1af6:	c1 01       	movw	r24, r2
    1af8:	b3 01       	movw	r22, r6
    1afa:	a2 01       	movw	r20, r4
    1afc:	86 01       	movw	r16, r12
    1afe:	97 01       	movw	r18, r14
    1b00:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <put_fat>
    1b04:	88 23       	and	r24, r24
    1b06:	19 f5       	brne	.+70     	; 0x1b4e <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1b08:	f1 01       	movw	r30, r2
    1b0a:	b2 86       	std	Z+10, r11	; 0x0a
    1b0c:	a3 86       	std	Z+11, r10	; 0x0b
    1b0e:	94 86       	std	Z+12, r9	; 0x0c
    1b10:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1b12:	86 85       	ldd	r24, Z+14	; 0x0e
    1b14:	97 85       	ldd	r25, Z+15	; 0x0f
    1b16:	a0 89       	ldd	r26, Z+16	; 0x10
    1b18:	b1 89       	ldd	r27, Z+17	; 0x11
    1b1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1c:	ff ef       	ldi	r31, 0xFF	; 255
    1b1e:	9f 07       	cpc	r25, r31
    1b20:	ff ef       	ldi	r31, 0xFF	; 255
    1b22:	af 07       	cpc	r26, r31
    1b24:	ff ef       	ldi	r31, 0xFF	; 255
    1b26:	bf 07       	cpc	r27, r31
    1b28:	51 f0       	breq	.+20     	; 0x1b3e <create_chain+0x19e>
		fs->free_clust--;
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	a1 09       	sbc	r26, r1
    1b2e:	b1 09       	sbc	r27, r1
    1b30:	f1 01       	movw	r30, r2
    1b32:	86 87       	std	Z+14, r24	; 0x0e
    1b34:	97 87       	std	Z+15, r25	; 0x0f
    1b36:	a0 8b       	std	Z+16, r26	; 0x10
    1b38:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	85 83       	std	Z+5, r24	; 0x05
    1b3e:	a7 01       	movw	r20, r14
    1b40:	96 01       	movw	r18, r12
    1b42:	09 c0       	rjmp	.+18     	; 0x1b56 <create_chain+0x1b6>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <create_chain+0x1b6>
    1b4e:	2f ef       	ldi	r18, 0xFF	; 255
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f ef       	ldi	r20, 0xFF	; 255
    1b54:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1b56:	b9 01       	movw	r22, r18
    1b58:	ca 01       	movw	r24, r20
    1b5a:	24 96       	adiw	r28, 0x04	; 4
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	bf 90       	pop	r11
    1b72:	af 90       	pop	r10
    1b74:	9f 90       	pop	r9
    1b76:	8f 90       	pop	r8
    1b78:	7f 90       	pop	r7
    1b7a:	6f 90       	pop	r6
    1b7c:	5f 90       	pop	r5
    1b7e:	4f 90       	pop	r4
    1b80:	3f 90       	pop	r3
    1b82:	2f 90       	pop	r2
    1b84:	08 95       	ret

00001b86 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	7a 01       	movw	r14, r20
    1b96:	8b 01       	movw	r16, r22
	clst -= 2;
    1b98:	8e ef       	ldi	r24, 0xFE	; 254
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
    1b9c:	af ef       	ldi	r26, 0xFF	; 255
    1b9e:	bf ef       	ldi	r27, 0xFF	; 255
    1ba0:	e8 0e       	add	r14, r24
    1ba2:	f9 1e       	adc	r15, r25
    1ba4:	0a 1f       	adc	r16, r26
    1ba6:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1ba8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1baa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bac:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1bae:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1bb0:	02 97       	sbiw	r24, 0x02	; 2
    1bb2:	a1 09       	sbc	r26, r1
    1bb4:	b1 09       	sbc	r27, r1
    1bb6:	e8 16       	cp	r14, r24
    1bb8:	f9 06       	cpc	r15, r25
    1bba:	0a 07       	cpc	r16, r26
    1bbc:	1b 07       	cpc	r17, r27
    1bbe:	28 f0       	brcs	.+10     	; 0x1bca <clust2sect+0x44>
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	12 c0       	rjmp	.+36     	; 0x1bee <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1bca:	2a 81       	ldd	r18, Y+2	; 0x02
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	b7 01       	movw	r22, r14
    1bd6:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    1bda:	9b 01       	movw	r18, r22
    1bdc:	ac 01       	movw	r20, r24
    1bde:	8e a1       	ldd	r24, Y+38	; 0x26
    1be0:	9f a1       	ldd	r25, Y+39	; 0x27
    1be2:	a8 a5       	ldd	r26, Y+40	; 0x28
    1be4:	b9 a5       	ldd	r27, Y+41	; 0x29
    1be6:	28 0f       	add	r18, r24
    1be8:	39 1f       	adc	r19, r25
    1bea:	4a 1f       	adc	r20, r26
    1bec:	5b 1f       	adc	r21, r27
}
    1bee:	b9 01       	movw	r22, r18
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	08 95       	ret

00001c00 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1c00:	af 92       	push	r10
    1c02:	bf 92       	push	r11
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	5c 01       	movw	r10, r24
    1c16:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1c18:	dc 01       	movw	r26, r24
    1c1a:	14 96       	adiw	r26, 0x04	; 4
    1c1c:	6d 93       	st	X+, r22
    1c1e:	7c 93       	st	X, r23
    1c20:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1c22:	16 96       	adiw	r26, 0x06	; 6
    1c24:	4d 91       	ld	r20, X+
    1c26:	5d 91       	ld	r21, X+
    1c28:	6d 91       	ld	r22, X+
    1c2a:	7c 91       	ld	r23, X
    1c2c:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1c2e:	41 30       	cpi	r20, 0x01	; 1
    1c30:	51 05       	cpc	r21, r1
    1c32:	61 05       	cpc	r22, r1
    1c34:	71 05       	cpc	r23, r1
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <dir_seek+0x3a>
    1c38:	d3 c0       	rjmp	.+422    	; 0x1de0 <dir_seek+0x1e0>
    1c3a:	ed 91       	ld	r30, X+
    1c3c:	fc 91       	ld	r31, X
    1c3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c40:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c42:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c44:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c46:	48 17       	cp	r20, r24
    1c48:	59 07       	cpc	r21, r25
    1c4a:	6a 07       	cpc	r22, r26
    1c4c:	7b 07       	cpc	r23, r27
    1c4e:	08 f0       	brcs	.+2      	; 0x1c52 <dir_seek+0x52>
    1c50:	c7 c0       	rjmp	.+398    	; 0x1de0 <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1c52:	41 15       	cp	r20, r1
    1c54:	51 05       	cpc	r21, r1
    1c56:	61 05       	cpc	r22, r1
    1c58:	71 05       	cpc	r23, r1
    1c5a:	81 f5       	brne	.+96     	; 0x1cbc <dir_seek+0xbc>
    1c5c:	80 81       	ld	r24, Z
    1c5e:	83 30       	cpi	r24, 0x03	; 3
    1c60:	49 f4       	brne	.+18     	; 0x1c74 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1c62:	42 a1       	ldd	r20, Z+34	; 0x22
    1c64:	53 a1       	ldd	r21, Z+35	; 0x23
    1c66:	64 a1       	ldd	r22, Z+36	; 0x24
    1c68:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1c6a:	41 15       	cp	r20, r1
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	61 05       	cpc	r22, r1
    1c70:	71 05       	cpc	r23, r1
    1c72:	21 f5       	brne	.+72     	; 0x1cbc <dir_seek+0xbc>
		dj->clust = clst;
    1c74:	f5 01       	movw	r30, r10
    1c76:	12 86       	std	Z+10, r1	; 0x0a
    1c78:	13 86       	std	Z+11, r1	; 0x0b
    1c7a:	14 86       	std	Z+12, r1	; 0x0c
    1c7c:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1c7e:	01 90       	ld	r0, Z+
    1c80:	f0 81       	ld	r31, Z
    1c82:	e0 2d       	mov	r30, r0
    1c84:	80 85       	ldd	r24, Z+8	; 0x08
    1c86:	91 85       	ldd	r25, Z+9	; 0x09
    1c88:	c8 16       	cp	r12, r24
    1c8a:	d9 06       	cpc	r13, r25
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <dir_seek+0x90>
    1c8e:	a8 c0       	rjmp	.+336    	; 0x1de0 <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1c90:	c6 01       	movw	r24, r12
    1c92:	24 e0       	ldi	r18, 0x04	; 4
    1c94:	96 95       	lsr	r25
    1c96:	87 95       	ror	r24
    1c98:	2a 95       	dec	r18
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <dir_seek+0x94>
    1c9c:	a0 e0       	ldi	r26, 0x00	; 0
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	22 a1       	ldd	r18, Z+34	; 0x22
    1ca2:	33 a1       	ldd	r19, Z+35	; 0x23
    1ca4:	44 a1       	ldd	r20, Z+36	; 0x24
    1ca6:	55 a1       	ldd	r21, Z+37	; 0x25
    1ca8:	82 0f       	add	r24, r18
    1caa:	93 1f       	adc	r25, r19
    1cac:	a4 1f       	adc	r26, r20
    1cae:	b5 1f       	adc	r27, r21
    1cb0:	f5 01       	movw	r30, r10
    1cb2:	86 87       	std	Z+14, r24	; 0x0e
    1cb4:	97 87       	std	Z+15, r25	; 0x0f
    1cb6:	a0 8b       	std	Z+16, r26	; 0x10
    1cb8:	b1 8b       	std	Z+17, r27	; 0x11
    1cba:	7a c0       	rjmp	.+244    	; 0x1db0 <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	08 2f       	mov	r16, r24
    1cc0:	10 e0       	ldi	r17, 0x00	; 0
    1cc2:	94 e0       	ldi	r25, 0x04	; 4
    1cc4:	00 0f       	add	r16, r16
    1cc6:	11 1f       	adc	r17, r17
    1cc8:	9a 95       	dec	r25
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <dir_seek+0xc4>
    1ccc:	24 c0       	rjmp	.+72     	; 0x1d16 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1cce:	ce 01       	movw	r24, r28
    1cd0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    1cd4:	ab 01       	movw	r20, r22
    1cd6:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1cd8:	4f 3f       	cpi	r20, 0xFF	; 255
    1cda:	ff ef       	ldi	r31, 0xFF	; 255
    1cdc:	5f 07       	cpc	r21, r31
    1cde:	ff ef       	ldi	r31, 0xFF	; 255
    1ce0:	6f 07       	cpc	r22, r31
    1ce2:	ff ef       	ldi	r31, 0xFF	; 255
    1ce4:	7f 07       	cpc	r23, r31
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <dir_seek+0xec>
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	7b c0       	rjmp	.+246    	; 0x1de2 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1cec:	42 30       	cpi	r20, 0x02	; 2
    1cee:	51 05       	cpc	r21, r1
    1cf0:	61 05       	cpc	r22, r1
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	08 f4       	brcc	.+2      	; 0x1cf8 <dir_seek+0xf8>
    1cf6:	74 c0       	rjmp	.+232    	; 0x1de0 <dir_seek+0x1e0>
    1cf8:	d5 01       	movw	r26, r10
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d00:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d02:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d04:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d06:	48 17       	cp	r20, r24
    1d08:	59 07       	cpc	r21, r25
    1d0a:	6a 07       	cpc	r22, r26
    1d0c:	7b 07       	cpc	r23, r27
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <dir_seek+0x112>
    1d10:	67 c0       	rjmp	.+206    	; 0x1de0 <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1d12:	c0 1a       	sub	r12, r16
    1d14:	d1 0a       	sbc	r13, r17
    1d16:	f5 01       	movw	r30, r10
    1d18:	c0 81       	ld	r28, Z
    1d1a:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1d1c:	c0 16       	cp	r12, r16
    1d1e:	d1 06       	cpc	r13, r17
    1d20:	b0 f6       	brcc	.-84     	; 0x1cce <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1d22:	d5 01       	movw	r26, r10
    1d24:	1a 96       	adiw	r26, 0x0a	; 10
    1d26:	4d 93       	st	X+, r20
    1d28:	5d 93       	st	X+, r21
    1d2a:	6d 93       	st	X+, r22
    1d2c:	7c 93       	st	X, r23
    1d2e:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d30:	8e ef       	ldi	r24, 0xFE	; 254
    1d32:	e8 2e       	mov	r14, r24
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	f8 2e       	mov	r15, r24
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	08 2f       	mov	r16, r24
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	18 2f       	mov	r17, r24
    1d40:	e4 0e       	add	r14, r20
    1d42:	f5 1e       	adc	r15, r21
    1d44:	06 1f       	adc	r16, r22
    1d46:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d4c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d4e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d50:	02 97       	sbiw	r24, 0x02	; 2
    1d52:	a1 09       	sbc	r26, r1
    1d54:	b1 09       	sbc	r27, r1
    1d56:	e8 16       	cp	r14, r24
    1d58:	f9 06       	cpc	r15, r25
    1d5a:	0a 07       	cpc	r16, r26
    1d5c:	1b 07       	cpc	r17, r27
    1d5e:	28 f0       	brcs	.+10     	; 0x1d6a <dir_seek+0x16a>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	12 c0       	rjmp	.+36     	; 0x1d8e <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1d6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	c8 01       	movw	r24, r16
    1d74:	b7 01       	movw	r22, r14
    1d76:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	8e a1       	ldd	r24, Y+38	; 0x26
    1d80:	9f a1       	ldd	r25, Y+39	; 0x27
    1d82:	a8 a5       	ldd	r26, Y+40	; 0x28
    1d84:	b9 a5       	ldd	r27, Y+41	; 0x29
    1d86:	28 0f       	add	r18, r24
    1d88:	39 1f       	adc	r19, r25
    1d8a:	4a 1f       	adc	r20, r26
    1d8c:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d8e:	c6 01       	movw	r24, r12
    1d90:	04 e0       	ldi	r16, 0x04	; 4
    1d92:	96 95       	lsr	r25
    1d94:	87 95       	ror	r24
    1d96:	0a 95       	dec	r16
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <dir_seek+0x192>
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	4a 1f       	adc	r20, r26
    1da4:	5b 1f       	adc	r21, r27
    1da6:	f5 01       	movw	r30, r10
    1da8:	26 87       	std	Z+14, r18	; 0x0e
    1daa:	37 87       	std	Z+15, r19	; 0x0f
    1dac:	40 8b       	std	Z+16, r20	; 0x10
    1dae:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1db0:	ff e0       	ldi	r31, 0x0F	; 15
    1db2:	cf 22       	and	r12, r31
    1db4:	dd 24       	eor	r13, r13
    1db6:	15 e0       	ldi	r17, 0x05	; 5
    1db8:	cc 0c       	add	r12, r12
    1dba:	dd 1c       	adc	r13, r13
    1dbc:	1a 95       	dec	r17
    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <dir_seek+0x1b8>
    1dc0:	8e e2       	ldi	r24, 0x2E	; 46
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	c8 0e       	add	r12, r24
    1dc6:	d9 1e       	adc	r13, r25
    1dc8:	d5 01       	movw	r26, r10
    1dca:	8d 91       	ld	r24, X+
    1dcc:	9c 91       	ld	r25, X
    1dce:	11 97       	sbiw	r26, 0x01	; 1
    1dd0:	8c 0d       	add	r24, r12
    1dd2:	9d 1d       	adc	r25, r13
    1dd4:	52 96       	adiw	r26, 0x12	; 18
    1dd6:	8d 93       	st	X+, r24
    1dd8:	9c 93       	st	X, r25
    1dda:	53 97       	sbiw	r26, 0x13	; 19
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1de0:	82 e0       	ldi	r24, 0x02	; 2
}
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	08 95       	ret

00001df8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1df8:	4f 92       	push	r4
    1dfa:	5f 92       	push	r5
    1dfc:	6f 92       	push	r6
    1dfe:	7f 92       	push	r7
    1e00:	8f 92       	push	r8
    1e02:	9f 92       	push	r9
    1e04:	af 92       	push	r10
    1e06:	bf 92       	push	r11
    1e08:	cf 92       	push	r12
    1e0a:	df 92       	push	r13
    1e0c:	ef 92       	push	r14
    1e0e:	ff 92       	push	r15
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	ec 01       	movw	r28, r24
    1e1a:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1e1c:	6c 80       	ldd	r6, Y+4	; 0x04
    1e1e:	7d 80       	ldd	r7, Y+5	; 0x05
    1e20:	08 94       	sec
    1e22:	61 1c       	adc	r6, r1
    1e24:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e26:	61 14       	cp	r6, r1
    1e28:	71 04       	cpc	r7, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <dir_next+0x36>
    1e2c:	4c c1       	rjmp	.+664    	; 0x20c6 <dir_next+0x2ce>
    1e2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e30:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e32:	a8 89       	ldd	r26, Y+16	; 0x10
    1e34:	b9 89       	ldd	r27, Y+17	; 0x11
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	a1 05       	cpc	r26, r1
    1e3a:	b1 05       	cpc	r27, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <dir_next+0x48>
    1e3e:	43 c1       	rjmp	.+646    	; 0x20c6 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1e40:	1f e0       	ldi	r17, 0x0F	; 15
    1e42:	41 2e       	mov	r4, r17
    1e44:	51 2c       	mov	r5, r1
    1e46:	46 20       	and	r4, r6
    1e48:	57 20       	and	r5, r7
    1e4a:	41 14       	cp	r4, r1
    1e4c:	51 04       	cpc	r5, r1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <dir_next+0x5a>
    1e50:	27 c1       	rjmp	.+590    	; 0x20a0 <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	a1 1d       	adc	r26, r1
    1e56:	b1 1d       	adc	r27, r1
    1e58:	8e 87       	std	Y+14, r24	; 0x0e
    1e5a:	9f 87       	std	Y+15, r25	; 0x0f
    1e5c:	a8 8b       	std	Y+16, r26	; 0x10
    1e5e:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1e60:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e62:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e68:	e8 81       	ld	r30, Y
    1e6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e6c:	41 15       	cp	r20, r1
    1e6e:	51 05       	cpc	r21, r1
    1e70:	61 05       	cpc	r22, r1
    1e72:	71 05       	cpc	r23, r1
    1e74:	39 f4       	brne	.+14     	; 0x1e84 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1e76:	80 85       	ldd	r24, Z+8	; 0x08
    1e78:	91 85       	ldd	r25, Z+9	; 0x09
    1e7a:	68 16       	cp	r6, r24
    1e7c:	79 06       	cpc	r7, r25
    1e7e:	08 f4       	brcc	.+2      	; 0x1e82 <dir_next+0x8a>
    1e80:	0f c1       	rjmp	.+542    	; 0x20a0 <dir_next+0x2a8>
    1e82:	21 c1       	rjmp	.+578    	; 0x20c6 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	93 01       	movw	r18, r6
    1e8c:	a4 e0       	ldi	r26, 0x04	; 4
    1e8e:	36 95       	lsr	r19
    1e90:	27 95       	ror	r18
    1e92:	aa 95       	dec	r26
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <dir_next+0x96>
    1e96:	82 23       	and	r24, r18
    1e98:	93 23       	and	r25, r19
    1e9a:	89 2b       	or	r24, r25
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <dir_next+0xa8>
    1e9e:	00 c1       	rjmp	.+512    	; 0x20a0 <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1ea0:	cf 01       	movw	r24, r30
    1ea2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    1ea6:	7b 01       	movw	r14, r22
    1ea8:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1eaa:	62 30       	cpi	r22, 0x02	; 2
    1eac:	71 05       	cpc	r23, r1
    1eae:	81 05       	cpc	r24, r1
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <dir_next+0xbe>
    1eb4:	0a c1       	rjmp	.+532    	; 0x20ca <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	e8 16       	cp	r14, r24
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
    1ebc:	f8 06       	cpc	r15, r24
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	08 07       	cpc	r16, r24
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	18 07       	cpc	r17, r24
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <dir_next+0xd2>
    1ec8:	02 c1       	rjmp	.+516    	; 0x20ce <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1eca:	e8 81       	ld	r30, Y
    1ecc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ece:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ed0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ed2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ed4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1ed6:	e8 16       	cp	r14, r24
    1ed8:	f9 06       	cpc	r15, r25
    1eda:	0a 07       	cpc	r16, r26
    1edc:	1b 07       	cpc	r17, r27
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <dir_next+0xea>
    1ee0:	a6 c0       	rjmp	.+332    	; 0x202e <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1ee2:	dd 20       	and	r13, r13
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <dir_next+0xf0>
    1ee6:	ef c0       	rjmp	.+478    	; 0x20c6 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1ee8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1eea:	5b 85       	ldd	r21, Y+11	; 0x0b
    1eec:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eee:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ef0:	cf 01       	movw	r24, r30
    1ef2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <create_chain>
    1ef6:	7b 01       	movw	r14, r22
    1ef8:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1efa:	61 15       	cp	r22, r1
    1efc:	71 05       	cpc	r23, r1
    1efe:	81 05       	cpc	r24, r1
    1f00:	91 05       	cpc	r25, r1
    1f02:	11 f4       	brne	.+4      	; 0x1f08 <dir_next+0x110>
    1f04:	87 e0       	ldi	r24, 0x07	; 7
    1f06:	e4 c0       	rjmp	.+456    	; 0x20d0 <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	e9 16       	cp	r14, r25
    1f0c:	f1 04       	cpc	r15, r1
    1f0e:	01 05       	cpc	r16, r1
    1f10:	11 05       	cpc	r17, r1
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <dir_next+0x11e>
    1f14:	da c0       	rjmp	.+436    	; 0x20ca <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f16:	af ef       	ldi	r26, 0xFF	; 255
    1f18:	ea 16       	cp	r14, r26
    1f1a:	af ef       	ldi	r26, 0xFF	; 255
    1f1c:	fa 06       	cpc	r15, r26
    1f1e:	af ef       	ldi	r26, 0xFF	; 255
    1f20:	0a 07       	cpc	r16, r26
    1f22:	af ef       	ldi	r26, 0xFF	; 255
    1f24:	1a 07       	cpc	r17, r26
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <dir_next+0x132>
    1f28:	d2 c0       	rjmp	.+420    	; 0x20ce <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1f2a:	88 81       	ld	r24, Y
    1f2c:	99 81       	ldd	r25, Y+1	; 0x01
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1f3a:	88 23       	and	r24, r24
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <dir_next+0x148>
    1f3e:	c7 c0       	rjmp	.+398    	; 0x20ce <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1f40:	e8 81       	ld	r30, Y
    1f42:	f9 81       	ldd	r31, Y+1	; 0x01
    1f44:	be 96       	adiw	r30, 0x2e	; 46
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1f4c:	11 92       	st	Z+, r1
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	bf ef       	ldi	r27, 0xFF	; 255
    1f52:	8f 3f       	cpi	r24, 0xFF	; 255
    1f54:	9b 07       	cpc	r25, r27
    1f56:	d1 f7       	brne	.-12     	; 0x1f4c <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1f58:	88 80       	ld	r8, Y
    1f5a:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1f5c:	4e ef       	ldi	r20, 0xFE	; 254
    1f5e:	a4 2e       	mov	r10, r20
    1f60:	4f ef       	ldi	r20, 0xFF	; 255
    1f62:	b4 2e       	mov	r11, r20
    1f64:	4f ef       	ldi	r20, 0xFF	; 255
    1f66:	c4 2e       	mov	r12, r20
    1f68:	4f ef       	ldi	r20, 0xFF	; 255
    1f6a:	d4 2e       	mov	r13, r20
    1f6c:	ae 0c       	add	r10, r14
    1f6e:	bf 1c       	adc	r11, r15
    1f70:	c0 1e       	adc	r12, r16
    1f72:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1f74:	f4 01       	movw	r30, r8
    1f76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f78:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f7a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f7c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f7e:	02 97       	sbiw	r24, 0x02	; 2
    1f80:	a1 09       	sbc	r26, r1
    1f82:	b1 09       	sbc	r27, r1
    1f84:	a8 16       	cp	r10, r24
    1f86:	b9 06       	cpc	r11, r25
    1f88:	ca 06       	cpc	r12, r26
    1f8a:	db 06       	cpc	r13, r27
    1f8c:	28 f0       	brcs	.+10     	; 0x1f98 <dir_next+0x1a0>
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	15 c0       	rjmp	.+42     	; 0x1fc2 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1f98:	d4 01       	movw	r26, r8
    1f9a:	12 96       	adiw	r26, 0x02	; 2
    1f9c:	2c 91       	ld	r18, X
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	c6 01       	movw	r24, r12
    1fa6:	b5 01       	movw	r22, r10
    1fa8:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    1fac:	9b 01       	movw	r18, r22
    1fae:	ac 01       	movw	r20, r24
    1fb0:	f4 01       	movw	r30, r8
    1fb2:	86 a1       	ldd	r24, Z+38	; 0x26
    1fb4:	97 a1       	ldd	r25, Z+39	; 0x27
    1fb6:	a0 a5       	ldd	r26, Z+40	; 0x28
    1fb8:	b1 a5       	ldd	r27, Z+41	; 0x29
    1fba:	28 0f       	add	r18, r24
    1fbc:	39 1f       	adc	r19, r25
    1fbe:	4a 1f       	adc	r20, r26
    1fc0:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fc2:	d4 01       	movw	r26, r8
    1fc4:	9a 96       	adiw	r26, 0x2a	; 42
    1fc6:	2d 93       	st	X+, r18
    1fc8:	3d 93       	st	X+, r19
    1fca:	4d 93       	st	X+, r20
    1fcc:	5c 93       	st	X, r21
    1fce:	9d 97       	sbiw	r26, 0x2d	; 45
    1fd0:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1fd2:	cc 24       	eor	r12, r12
    1fd4:	c3 94       	inc	r12
    1fd6:	1a c0       	rjmp	.+52     	; 0x200c <dir_next+0x214>
    1fd8:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1fda:	88 81       	ld	r24, Y
    1fdc:	99 81       	ldd	r25, Y+1	; 0x01
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    1fea:	88 23       	and	r24, r24
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <dir_next+0x1f8>
    1fee:	6f c0       	rjmp	.+222    	; 0x20ce <dir_next+0x2d6>
						dj->fs->winsect++;
    1ff0:	e8 81       	ld	r30, Y
    1ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff4:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ff6:	93 a5       	ldd	r25, Z+43	; 0x2b
    1ff8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1ffa:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	a1 1d       	adc	r26, r1
    2000:	b1 1d       	adc	r27, r1
    2002:	82 a7       	std	Z+42, r24	; 0x2a
    2004:	93 a7       	std	Z+43, r25	; 0x2b
    2006:	a4 a7       	std	Z+44, r26	; 0x2c
    2008:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    200a:	d3 94       	inc	r13
    200c:	e8 81       	ld	r30, Y
    200e:	f9 81       	ldd	r31, Y+1	; 0x01
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	d8 16       	cp	r13, r24
    2014:	08 f3       	brcs	.-62     	; 0x1fd8 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2016:	82 a5       	ldd	r24, Z+42	; 0x2a
    2018:	93 a5       	ldd	r25, Z+43	; 0x2b
    201a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    201c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    201e:	8d 19       	sub	r24, r13
    2020:	91 09       	sbc	r25, r1
    2022:	a1 09       	sbc	r26, r1
    2024:	b1 09       	sbc	r27, r1
    2026:	82 a7       	std	Z+42, r24	; 0x2a
    2028:	93 a7       	std	Z+43, r25	; 0x2b
    202a:	a4 a7       	std	Z+44, r26	; 0x2c
    202c:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    202e:	ea 86       	std	Y+10, r14	; 0x0a
    2030:	fb 86       	std	Y+11, r15	; 0x0b
    2032:	0c 87       	std	Y+12, r16	; 0x0c
    2034:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2036:	c8 80       	ld	r12, Y
    2038:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    203a:	8e ef       	ldi	r24, 0xFE	; 254
    203c:	9f ef       	ldi	r25, 0xFF	; 255
    203e:	af ef       	ldi	r26, 0xFF	; 255
    2040:	bf ef       	ldi	r27, 0xFF	; 255
    2042:	e8 0e       	add	r14, r24
    2044:	f9 1e       	adc	r15, r25
    2046:	0a 1f       	adc	r16, r26
    2048:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    204a:	f6 01       	movw	r30, r12
    204c:	82 8d       	ldd	r24, Z+26	; 0x1a
    204e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2050:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2052:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2054:	02 97       	sbiw	r24, 0x02	; 2
    2056:	a1 09       	sbc	r26, r1
    2058:	b1 09       	sbc	r27, r1
    205a:	e8 16       	cp	r14, r24
    205c:	f9 06       	cpc	r15, r25
    205e:	0a 07       	cpc	r16, r26
    2060:	1b 07       	cpc	r17, r27
    2062:	28 f0       	brcs	.+10     	; 0x206e <dir_next+0x276>
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	15 c0       	rjmp	.+42     	; 0x2098 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    206e:	d6 01       	movw	r26, r12
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	2c 91       	ld	r18, X
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	c8 01       	movw	r24, r16
    207c:	b7 01       	movw	r22, r14
    207e:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    2082:	9b 01       	movw	r18, r22
    2084:	ac 01       	movw	r20, r24
    2086:	f6 01       	movw	r30, r12
    2088:	86 a1       	ldd	r24, Z+38	; 0x26
    208a:	97 a1       	ldd	r25, Z+39	; 0x27
    208c:	a0 a5       	ldd	r26, Z+40	; 0x28
    208e:	b1 a5       	ldd	r27, Z+41	; 0x29
    2090:	28 0f       	add	r18, r24
    2092:	39 1f       	adc	r19, r25
    2094:	4a 1f       	adc	r20, r26
    2096:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2098:	2e 87       	std	Y+14, r18	; 0x0e
    209a:	3f 87       	std	Y+15, r19	; 0x0f
    209c:	48 8b       	std	Y+16, r20	; 0x10
    209e:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    20a0:	6c 82       	std	Y+4, r6	; 0x04
    20a2:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    20a4:	35 e0       	ldi	r19, 0x05	; 5
    20a6:	44 0c       	add	r4, r4
    20a8:	55 1c       	adc	r5, r5
    20aa:	3a 95       	dec	r19
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <dir_next+0x2ae>
    20ae:	8e e2       	ldi	r24, 0x2E	; 46
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	48 0e       	add	r4, r24
    20b4:	59 1e       	adc	r5, r25
    20b6:	88 81       	ld	r24, Y
    20b8:	99 81       	ldd	r25, Y+1	; 0x01
    20ba:	84 0d       	add	r24, r4
    20bc:	95 1d       	adc	r25, r5
    20be:	8a 8b       	std	Y+18, r24	; 0x12
    20c0:	9b 8b       	std	Y+19, r25	; 0x13
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <dir_next+0x2d8>

	return FR_OK;
    20c6:	84 e0       	ldi	r24, 0x04	; 4
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <dir_next+0x2d8>
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <dir_next+0x2d8>
    20ce:	81 e0       	ldi	r24, 0x01	; 1
}
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	9f 90       	pop	r9
    20e6:	8f 90       	pop	r8
    20e8:	7f 90       	pop	r7
    20ea:	6f 90       	pop	r6
    20ec:	5f 90       	pop	r5
    20ee:	4f 90       	pop	r4
    20f0:	08 95       	ret

000020f2 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	ec 01       	movw	r28, r24
    20f8:	94 e0       	ldi	r25, 0x04	; 4
    20fa:	1a c0       	rjmp	.+52     	; 0x2130 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    20fc:	88 81       	ld	r24, Y
    20fe:	99 81       	ldd	r25, Y+1	; 0x01
    2100:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    2104:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2106:	88 23       	and	r24, r24
    2108:	f1 f4       	brne	.+60     	; 0x2146 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    210a:	ea 89       	ldd	r30, Y+18	; 0x12
    210c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    210e:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2110:	88 23       	and	r24, r24
    2112:	09 f1       	breq	.+66     	; 0x2156 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2114:	85 3e       	cpi	r24, 0xE5	; 229
    2116:	29 f0       	breq	.+10     	; 0x2122 <dir_read+0x30>
    2118:	8e 32       	cpi	r24, 0x2E	; 46
    211a:	19 f0       	breq	.+6      	; 0x2122 <dir_read+0x30>
    211c:	83 85       	ldd	r24, Z+11	; 0x0b
    211e:	83 ff       	sbrs	r24, 3
    2120:	16 c0       	rjmp	.+44     	; 0x214e <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    2122:	ce 01       	movw	r24, r28
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <dir_next>
    212a:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    212c:	88 23       	and	r24, r24
    212e:	59 f4       	brne	.+22     	; 0x2146 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2130:	4e 85       	ldd	r20, Y+14	; 0x0e
    2132:	5f 85       	ldd	r21, Y+15	; 0x0f
    2134:	68 89       	ldd	r22, Y+16	; 0x10
    2136:	79 89       	ldd	r23, Y+17	; 0x11
    2138:	41 15       	cp	r20, r1
    213a:	51 05       	cpc	r21, r1
    213c:	61 05       	cpc	r22, r1
    213e:	71 05       	cpc	r23, r1
    2140:	e9 f6       	brne	.-70     	; 0x20fc <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2142:	99 23       	and	r25, r25
    2144:	21 f0       	breq	.+8      	; 0x214e <dir_read+0x5c>
    2146:	1e 86       	std	Y+14, r1	; 0x0e
    2148:	1f 86       	std	Y+15, r1	; 0x0f
    214a:	18 8a       	std	Y+16, r1	; 0x10
    214c:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    214e:	89 2f       	mov	r24, r25
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2156:	94 e0       	ldi	r25, 0x04	; 4
    2158:	f6 cf       	rjmp	.-20     	; 0x2146 <dir_read+0x54>

0000215a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
    2168:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    216a:	88 23       	and	r24, r24
    216c:	e9 f5       	brne	.+122    	; 0x21e8 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    216e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2170:	5f 85       	ldd	r21, Y+15	; 0x0f
    2172:	68 89       	ldd	r22, Y+16	; 0x10
    2174:	79 89       	ldd	r23, Y+17	; 0x11
    2176:	88 81       	ld	r24, Y
    2178:	99 81       	ldd	r25, Y+1	; 0x01
    217a:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    217e:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    2180:	88 23       	and	r24, r24
    2182:	91 f5       	brne	.+100    	; 0x21e8 <dir_register+0x8e>
			c = *dj->dir;
    2184:	ea 89       	ldd	r30, Y+18	; 0x12
    2186:	fb 89       	ldd	r31, Y+19	; 0x13
    2188:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    218a:	e5 3e       	cpi	r30, 0xE5	; 229
    218c:	89 f1       	breq	.+98     	; 0x21f0 <dir_register+0x96>
    218e:	ee 23       	and	r30, r30
    2190:	79 f1       	breq	.+94     	; 0x21f0 <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2192:	ce 01       	movw	r24, r28
    2194:	61 e0       	ldi	r22, 0x01	; 1
    2196:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <dir_next>
    219a:	e6 cf       	rjmp	.-52     	; 0x2168 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    219c:	6a 89       	ldd	r22, Y+18	; 0x12
    219e:	7b 89       	ldd	r23, Y+19	; 0x13
    21a0:	fb 01       	movw	r30, r22
    21a2:	80 e2       	ldi	r24, 0x20	; 32
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    21a8:	11 92       	st	Z+, r1
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	2f ef       	ldi	r18, 0xFF	; 255
    21ae:	8f 3f       	cpi	r24, 0xFF	; 255
    21b0:	92 07       	cpc	r25, r18
    21b2:	d1 f7       	brne	.-12     	; 0x21a8 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    21b4:	8c 89       	ldd	r24, Y+20	; 0x14
    21b6:	9d 89       	ldd	r25, Y+21	; 0x15
    21b8:	9c 01       	movw	r18, r24
    21ba:	d9 01       	movw	r26, r18
    21bc:	fb 01       	movw	r30, r22
    21be:	2b e0       	ldi	r18, 0x0B	; 11
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    21c4:	8d 91       	ld	r24, X+
    21c6:	81 93       	st	Z+, r24
    21c8:	21 50       	subi	r18, 0x01	; 1
    21ca:	30 40       	sbci	r19, 0x00	; 0
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	2f 3f       	cpi	r18, 0xFF	; 255
    21d0:	38 07       	cpc	r19, r24
    21d2:	c1 f7       	brne	.-16     	; 0x21c4 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    21d4:	ec 89       	ldd	r30, Y+20	; 0x14
    21d6:	fd 89       	ldd	r31, Y+21	; 0x15
    21d8:	83 85       	ldd	r24, Z+11	; 0x0b
    21da:	88 71       	andi	r24, 0x18	; 24
    21dc:	fb 01       	movw	r30, r22
    21de:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    21e0:	e8 81       	ld	r30, Y
    21e2:	f9 81       	ldd	r31, Y+1	; 0x01
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    21e8:	84 2f       	mov	r24, r20
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    21f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    21f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    21f4:	68 89       	ldd	r22, Y+16	; 0x10
    21f6:	79 89       	ldd	r23, Y+17	; 0x11
    21f8:	88 81       	ld	r24, Y
    21fa:	99 81       	ldd	r25, Y+1	; 0x01
    21fc:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    2200:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    2202:	88 23       	and	r24, r24
    2204:	59 f2       	breq	.-106    	; 0x219c <dir_register+0x42>
    2206:	f0 cf       	rjmp	.-32     	; 0x21e8 <dir_register+0x8e>

00002208 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    220e:	6c 81       	ldd	r22, Y+4	; 0x04
    2210:	7d 81       	ldd	r23, Y+5	; 0x05
    2212:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
    2216:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2218:	88 23       	and	r24, r24
    221a:	99 f4       	brne	.+38     	; 0x2242 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    221c:	4e 85       	ldd	r20, Y+14	; 0x0e
    221e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2220:	68 89       	ldd	r22, Y+16	; 0x10
    2222:	79 89       	ldd	r23, Y+17	; 0x11
    2224:	88 81       	ld	r24, Y
    2226:	99 81       	ldd	r25, Y+1	; 0x01
    2228:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    222c:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    222e:	88 23       	and	r24, r24
    2230:	41 f4       	brne	.+16     	; 0x2242 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    2232:	ea 89       	ldd	r30, Y+18	; 0x12
    2234:	fb 89       	ldd	r31, Y+19	; 0x13
    2236:	85 ee       	ldi	r24, 0xE5	; 229
    2238:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    223a:	e8 81       	ld	r30, Y
    223c:	f9 81       	ldd	r31, Y+1	; 0x01
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    2242:	89 2f       	mov	r24, r25
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret

0000224a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	fc 01       	movw	r30, r24
    2258:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    225a:	eb 01       	movw	r28, r22
    225c:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    225e:	86 85       	ldd	r24, Z+14	; 0x0e
    2260:	97 85       	ldd	r25, Z+15	; 0x0f
    2262:	a0 89       	ldd	r26, Z+16	; 0x10
    2264:	b1 89       	ldd	r27, Z+17	; 0x11
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	a1 05       	cpc	r26, r1
    226a:	b1 05       	cpc	r27, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <get_fileinfo+0x26>
    226e:	71 c0       	rjmp	.+226    	; 0x2352 <get_fileinfo+0x108>
		dir = dj->dir;
    2270:	62 89       	ldd	r22, Z+18	; 0x12
    2272:	73 89       	ldd	r23, Z+19	; 0x13
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2278:	fb 01       	movw	r30, r22
    227a:	e8 0f       	add	r30, r24
    227c:	f9 1f       	adc	r31, r25
    227e:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    2280:	e0 32       	cpi	r30, 0x20	; 32
    2282:	41 f0       	breq	.+16     	; 0x2294 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    2284:	e5 30       	cpi	r30, 0x05	; 5
    2286:	09 f4       	brne	.+2      	; 0x228a <get_fileinfo+0x40>
    2288:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    228a:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	88 30       	cpi	r24, 0x08	; 8
    2290:	91 05       	cpc	r25, r1
    2292:	91 f7       	brne	.-28     	; 0x2278 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    2294:	db 01       	movw	r26, r22
    2296:	18 96       	adiw	r26, 0x08	; 8
    2298:	8c 91       	ld	r24, X
    229a:	80 32       	cpi	r24, 0x20	; 32
    229c:	11 f4       	brne	.+4      	; 0x22a2 <get_fileinfo+0x58>
    229e:	8e 01       	movw	r16, r28
    22a0:	12 c0       	rjmp	.+36     	; 0x22c6 <get_fileinfo+0x7c>
			*p++ = '.';
    22a2:	8e e2       	ldi	r24, 0x2E	; 46
    22a4:	fe 01       	movw	r30, r28
    22a6:	81 93       	st	Z+, r24
    22a8:	8f 01       	movw	r16, r30
    22aa:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    22ac:	9e 01       	movw	r18, r28
    22ae:	2c 5f       	subi	r18, 0xFC	; 252
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    22b2:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    22b4:	80 32       	cpi	r24, 0x20	; 32
    22b6:	39 f0       	breq	.+14     	; 0x22c6 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    22b8:	d8 01       	movw	r26, r16
    22ba:	8d 93       	st	X+, r24
    22bc:	8d 01       	movw	r16, r26
    22be:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    22c0:	a2 17       	cp	r26, r18
    22c2:	b3 07       	cpc	r27, r19
    22c4:	b1 f7       	brne	.-20     	; 0x22b2 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    22c6:	fb 01       	movw	r30, r22
    22c8:	83 85       	ldd	r24, Z+11	; 0x0b
    22ca:	d7 01       	movw	r26, r14
    22cc:	18 96       	adiw	r26, 0x08	; 8
    22ce:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    22d0:	27 8d       	ldd	r18, Z+31	; 0x1f
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	52 2f       	mov	r21, r18
    22da:	44 27       	eor	r20, r20
    22dc:	33 27       	eor	r19, r19
    22de:	22 27       	eor	r18, r18
    22e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	dc 01       	movw	r26, r24
    22ea:	99 27       	eor	r25, r25
    22ec:	88 27       	eor	r24, r24
    22ee:	28 2b       	or	r18, r24
    22f0:	39 2b       	or	r19, r25
    22f2:	4a 2b       	or	r20, r26
    22f4:	5b 2b       	or	r21, r27
    22f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	28 2b       	or	r18, r24
    2300:	39 2b       	or	r19, r25
    2302:	4a 2b       	or	r20, r26
    2304:	5b 2b       	or	r21, r27
    2306:	95 8d       	ldd	r25, Z+29	; 0x1d
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	a0 e0       	ldi	r26, 0x00	; 0
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	28 2b       	or	r18, r24
    2310:	39 2b       	or	r19, r25
    2312:	4a 2b       	or	r20, r26
    2314:	5b 2b       	or	r21, r27
    2316:	f7 01       	movw	r30, r14
    2318:	20 83       	st	Z, r18
    231a:	31 83       	std	Z+1, r19	; 0x01
    231c:	42 83       	std	Z+2, r20	; 0x02
    231e:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2320:	db 01       	movw	r26, r22
    2322:	59 96       	adiw	r26, 0x19	; 25
    2324:	9c 91       	ld	r25, X
    2326:	59 97       	sbiw	r26, 0x19	; 25
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	58 96       	adiw	r26, 0x18	; 24
    232c:	2c 91       	ld	r18, X
    232e:	58 97       	sbiw	r26, 0x18	; 24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	82 2b       	or	r24, r18
    2334:	93 2b       	or	r25, r19
    2336:	84 83       	std	Z+4, r24	; 0x04
    2338:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    233a:	57 96       	adiw	r26, 0x17	; 23
    233c:	9c 91       	ld	r25, X
    233e:	57 97       	sbiw	r26, 0x17	; 23
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	56 96       	adiw	r26, 0x16	; 22
    2344:	2c 91       	ld	r18, X
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	82 2b       	or	r24, r18
    234a:	93 2b       	or	r25, r19
    234c:	86 83       	std	Z+6, r24	; 0x06
    234e:	97 83       	std	Z+7, r25	; 0x07
    2350:	e8 01       	movw	r28, r16
	}
	*p = 0;
    2352:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	08 95       	ret

00002362 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    2362:	5f 92       	push	r5
    2364:	6f 92       	push	r6
    2366:	7f 92       	push	r7
    2368:	8f 92       	push	r8
    236a:	9f 92       	push	r9
    236c:	af 92       	push	r10
    236e:	bf 92       	push	r11
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	ec 01       	movw	r28, r24
    2382:	7b 01       	movw	r14, r22
    2384:	03 c0       	rjmp	.+6      	; 0x238c <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    2386:	08 94       	sec
    2388:	e1 1c       	adc	r14, r1
    238a:	f1 1c       	adc	r15, r1
    238c:	f7 01       	movw	r30, r14
    238e:	80 81       	ld	r24, Z
    2390:	80 32       	cpi	r24, 0x20	; 32
    2392:	c9 f3       	breq	.-14     	; 0x2386 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2394:	8f 32       	cpi	r24, 0x2F	; 47
    2396:	11 f0       	breq	.+4      	; 0x239c <follow_path+0x3a>
    2398:	8c 35       	cpi	r24, 0x5C	; 92
    239a:	19 f4       	brne	.+6      	; 0x23a2 <follow_path+0x40>
		path++;
    239c:	08 94       	sec
    239e:	e1 1c       	adc	r14, r1
    23a0:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    23a2:	1e 82       	std	Y+6, r1	; 0x06
    23a4:	1f 82       	std	Y+7, r1	; 0x07
    23a6:	18 86       	std	Y+8, r1	; 0x08
    23a8:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    23aa:	f7 01       	movw	r30, r14
    23ac:	80 81       	ld	r24, Z
    23ae:	80 32       	cpi	r24, 0x20	; 32
    23b0:	40 f4       	brcc	.+16     	; 0x23c2 <follow_path+0x60>
		res = dir_seek(dj, 0);
    23b2:	ce 01       	movw	r24, r28
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
		dj->dir = NULL;
    23bc:	1a 8a       	std	Y+18, r1	; 0x12
    23be:	1b 8a       	std	Y+19, r1	; 0x13
    23c0:	13 c1       	rjmp	.+550    	; 0x25e8 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23c2:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    23c4:	45 e0       	ldi	r20, 0x05	; 5
    23c6:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    23c8:	ac 89       	ldd	r26, Y+20	; 0x14
    23ca:	bd 89       	ldd	r27, Y+21	; 0x15
    23cc:	fd 01       	movw	r30, r26
    23ce:	8b e0       	ldi	r24, 0x0B	; 11
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23d4:	01 93       	st	Z+, r16
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	2f ef       	ldi	r18, 0xFF	; 255
    23da:	8f 3f       	cpi	r24, 0xFF	; 255
    23dc:	92 07       	cpc	r25, r18
    23de:	d1 f7       	brne	.-12     	; 0x23d4 <follow_path+0x72>
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	cc 24       	eor	r12, r12
    23e6:	dd 24       	eor	r13, r13
    23e8:	38 e0       	ldi	r19, 0x08	; 8
    23ea:	a3 2e       	mov	r10, r19
    23ec:	b1 2c       	mov	r11, r1
    23ee:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    23f0:	f7 01       	movw	r30, r14
    23f2:	ec 0d       	add	r30, r12
    23f4:	fd 1d       	adc	r31, r13
    23f6:	20 81       	ld	r18, Z
    23f8:	08 94       	sec
    23fa:	c1 1c       	adc	r12, r1
    23fc:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    23fe:	21 32       	cpi	r18, 0x21	; 33
    2400:	08 f4       	brcc	.+2      	; 0x2404 <follow_path+0xa2>
    2402:	66 c0       	rjmp	.+204    	; 0x24d0 <follow_path+0x16e>
    2404:	2f 32       	cpi	r18, 0x2F	; 47
    2406:	09 f4       	brne	.+2      	; 0x240a <follow_path+0xa8>
    2408:	ff c0       	rjmp	.+510    	; 0x2608 <follow_path+0x2a6>
    240a:	2c 35       	cpi	r18, 0x5C	; 92
    240c:	09 f4       	brne	.+2      	; 0x2410 <follow_path+0xae>
    240e:	fc c0       	rjmp	.+504    	; 0x2608 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    2410:	2e 32       	cpi	r18, 0x2E	; 46
    2412:	19 f0       	breq	.+6      	; 0x241a <follow_path+0xb8>
    2414:	4a 15       	cp	r20, r10
    2416:	5b 05       	cpc	r21, r11
    2418:	84 f0       	brlt	.+32     	; 0x243a <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    241a:	88 e0       	ldi	r24, 0x08	; 8
    241c:	a8 16       	cp	r10, r24
    241e:	b1 04       	cpc	r11, r1
    2420:	09 f0       	breq	.+2      	; 0x2424 <follow_path+0xc2>
    2422:	dd c0       	rjmp	.+442    	; 0x25de <follow_path+0x27c>
    2424:	2e 32       	cpi	r18, 0x2E	; 46
    2426:	09 f0       	breq	.+2      	; 0x242a <follow_path+0xc8>
    2428:	da c0       	rjmp	.+436    	; 0x25de <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    242a:	11 0f       	add	r17, r17
    242c:	11 0f       	add	r17, r17
    242e:	48 e0       	ldi	r20, 0x08	; 8
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	2b e0       	ldi	r18, 0x0B	; 11
    2434:	a2 2e       	mov	r10, r18
    2436:	b1 2c       	mov	r11, r1
    2438:	db cf       	rjmp	.-74     	; 0x23f0 <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    243a:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    243c:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    243e:	82 2f       	mov	r24, r18
    2440:	81 58       	subi	r24, 0x81	; 129
    2442:	8f 31       	cpi	r24, 0x1F	; 31
    2444:	18 f0       	brcs	.+6      	; 0x244c <follow_path+0xea>
    2446:	8f 55       	subi	r24, 0x5F	; 95
    2448:	8d 31       	cpi	r24, 0x1D	; 29
    244a:	08 f5       	brcc	.+66     	; 0x248e <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    244c:	f7 01       	movw	r30, r14
    244e:	ec 0d       	add	r30, r12
    2450:	fd 1d       	adc	r31, r13
    2452:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2454:	83 2f       	mov	r24, r19
    2456:	80 54       	subi	r24, 0x40	; 64
    2458:	8f 33       	cpi	r24, 0x3F	; 63
    245a:	20 f0       	brcs	.+8      	; 0x2464 <follow_path+0x102>
    245c:	80 54       	subi	r24, 0x40	; 64
    245e:	8d 37       	cpi	r24, 0x7D	; 125
    2460:	08 f0       	brcs	.+2      	; 0x2464 <follow_path+0x102>
    2462:	bd c0       	rjmp	.+378    	; 0x25de <follow_path+0x27c>
    2464:	c5 01       	movw	r24, r10
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	48 17       	cp	r20, r24
    246a:	59 07       	cpc	r21, r25
    246c:	0c f0       	brlt	.+2      	; 0x2470 <follow_path+0x10e>
    246e:	b7 c0       	rjmp	.+366    	; 0x25de <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    2470:	08 94       	sec
    2472:	c1 1c       	adc	r12, r1
    2474:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2476:	fd 01       	movw	r30, r26
    2478:	e4 0f       	add	r30, r20
    247a:	f5 1f       	adc	r31, r21
    247c:	20 83       	st	Z, r18
    247e:	ca 01       	movw	r24, r20
    2480:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2482:	fd 01       	movw	r30, r26
    2484:	e8 0f       	add	r30, r24
    2486:	f9 1f       	adc	r31, r25
    2488:	30 83       	st	Z, r19
    248a:	ac 01       	movw	r20, r24
    248c:	1e c0       	rjmp	.+60     	; 0x24ca <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    248e:	62 2f       	mov	r22, r18
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	e0 e0       	ldi	r30, 0x00	; 0
    2494:	f0 e2       	ldi	r31, 0x20	; 32
    2496:	01 c0       	rjmp	.+2      	; 0x249a <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2498:	31 96       	adiw	r30, 0x01	; 1
    249a:	80 81       	ld	r24, Z
    249c:	88 23       	and	r24, r24
    249e:	29 f0       	breq	.+10     	; 0x24aa <follow_path+0x148>
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	86 17       	cp	r24, r22
    24a4:	97 07       	cpc	r25, r23
    24a6:	c1 f7       	brne	.-16     	; 0x2498 <follow_path+0x136>
    24a8:	9a c0       	rjmp	.+308    	; 0x25de <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    24aa:	82 2f       	mov	r24, r18
    24ac:	81 54       	subi	r24, 0x41	; 65
    24ae:	8a 31       	cpi	r24, 0x1A	; 26
    24b0:	10 f4       	brcc	.+4      	; 0x24b6 <follow_path+0x154>
				b |= 2;
    24b2:	12 60       	ori	r17, 0x02	; 2
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    24b6:	82 2f       	mov	r24, r18
    24b8:	81 56       	subi	r24, 0x61	; 97
    24ba:	8a 31       	cpi	r24, 0x1A	; 26
    24bc:	10 f4       	brcc	.+4      	; 0x24c2 <follow_path+0x160>
					b |= 1; c -= 0x20;
    24be:	11 60       	ori	r17, 0x01	; 1
    24c0:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    24c2:	fd 01       	movw	r30, r26
    24c4:	e4 0f       	add	r30, r20
    24c6:	f5 1f       	adc	r31, r21
    24c8:	20 83       	st	Z, r18
    24ca:	4f 5f       	subi	r20, 0xFF	; 255
    24cc:	5f 4f       	sbci	r21, 0xFF	; 255
    24ce:	90 cf       	rjmp	.-224    	; 0x23f0 <follow_path+0x8e>
    24d0:	91 2f       	mov	r25, r17
    24d2:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    24d4:	45 2b       	or	r20, r21
    24d6:	09 f4       	brne	.+2      	; 0x24da <follow_path+0x178>
    24d8:	82 c0       	rjmp	.+260    	; 0x25de <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    24da:	8c 91       	ld	r24, X
    24dc:	85 3e       	cpi	r24, 0xE5	; 229
    24de:	09 f4       	brne	.+2      	; 0x24e2 <follow_path+0x180>
    24e0:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    24e2:	e8 e0       	ldi	r30, 0x08	; 8
    24e4:	ae 16       	cp	r10, r30
    24e6:	b1 04       	cpc	r11, r1
    24e8:	19 f4       	brne	.+6      	; 0x24f0 <follow_path+0x18e>
    24ea:	91 2f       	mov	r25, r17
    24ec:	99 0f       	add	r25, r25
    24ee:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    24f0:	29 2f       	mov	r18, r25
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	c9 01       	movw	r24, r18
    24f6:	83 70       	andi	r24, 0x03	; 3
    24f8:	90 70       	andi	r25, 0x00	; 0
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	09 f4       	brne	.+2      	; 0x2500 <follow_path+0x19e>
    24fe:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    2500:	2c 70       	andi	r18, 0x0C	; 12
    2502:	30 70       	andi	r19, 0x00	; 0
    2504:	24 30       	cpi	r18, 0x04	; 4
    2506:	31 05       	cpc	r19, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <follow_path+0x1aa>
    250a:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    250c:	1b 96       	adiw	r26, 0x0b	; 11
    250e:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    2510:	ce 01       	movw	r24, r28
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
    251a:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    251c:	88 23       	and	r24, r24
    251e:	71 f5       	brne	.+92     	; 0x257c <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2520:	4e 85       	ldd	r20, Y+14	; 0x0e
    2522:	5f 85       	ldd	r21, Y+15	; 0x0f
    2524:	68 89       	ldd	r22, Y+16	; 0x10
    2526:	79 89       	ldd	r23, Y+17	; 0x11
    2528:	88 81       	ld	r24, Y
    252a:	99 81       	ldd	r25, Y+1	; 0x01
    252c:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    2530:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    2532:	88 23       	and	r24, r24
    2534:	19 f5       	brne	.+70     	; 0x257c <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2536:	ea 89       	ldd	r30, Y+18	; 0x12
    2538:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    253a:	80 81       	ld	r24, Z
    253c:	88 23       	and	r24, r24
    253e:	11 f4       	brne	.+4      	; 0x2544 <follow_path+0x1e2>
    2540:	44 e0       	ldi	r20, 0x04	; 4
    2542:	1c c0       	rjmp	.+56     	; 0x257c <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2544:	83 85       	ldd	r24, Z+11	; 0x0b
    2546:	83 fd       	sbrc	r24, 3
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <follow_path+0x210>
    254a:	df 01       	movw	r26, r30
    254c:	8c 89       	ldd	r24, Y+20	; 0x14
    254e:	9d 89       	ldd	r25, Y+21	; 0x15
    2550:	9c 01       	movw	r18, r24
    2552:	f9 01       	movw	r30, r18
    2554:	2b e0       	ldi	r18, 0x0B	; 11
    2556:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2558:	21 50       	subi	r18, 0x01	; 1
    255a:	30 40       	sbci	r19, 0x00	; 0
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	2f 3f       	cpi	r18, 0xFF	; 255
    2560:	38 07       	cpc	r19, r24
    2562:	61 f0       	breq	.+24     	; 0x257c <follow_path+0x21a>
    2564:	9c 91       	ld	r25, X
    2566:	80 81       	ld	r24, Z
    2568:	98 17       	cp	r25, r24
    256a:	19 f4       	brne	.+6      	; 0x2572 <follow_path+0x210>
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	31 96       	adiw	r30, 0x01	; 1
    2570:	f3 cf       	rjmp	.-26     	; 0x2558 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    2572:	ce 01       	movw	r24, r28
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <dir_next>
    257a:	cf cf       	rjmp	.-98     	; 0x251a <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    257c:	ec 89       	ldd	r30, Y+20	; 0x14
    257e:	fd 89       	ldd	r31, Y+21	; 0x15
    2580:	93 85       	ldd	r25, Z+11	; 0x0b
    2582:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    2584:	44 23       	and	r20, r20
    2586:	31 f0       	breq	.+12     	; 0x2594 <follow_path+0x232>
    2588:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    258a:	44 30       	cpi	r20, 0x04	; 4
    258c:	51 f5       	brne	.+84     	; 0x25e2 <follow_path+0x280>
    258e:	99 23       	and	r25, r25
    2590:	51 f1       	breq	.+84     	; 0x25e6 <follow_path+0x284>
    2592:	2a c0       	rjmp	.+84     	; 0x25e8 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    2594:	99 23       	and	r25, r25
    2596:	29 f5       	brne	.+74     	; 0x25e2 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    2598:	ea 89       	ldd	r30, Y+18	; 0x12
    259a:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    259c:	83 85       	ldd	r24, Z+11	; 0x0b
    259e:	84 ff       	sbrs	r24, 4
    25a0:	22 c0       	rjmp	.+68     	; 0x25e6 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    25a2:	ec 0c       	add	r14, r12
    25a4:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    25a6:	75 88       	ldd	r7, Z+21	; 0x15
    25a8:	66 24       	eor	r6, r6
    25aa:	24 89       	ldd	r18, Z+20	; 0x14
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	26 29       	or	r18, r6
    25b0:	37 29       	or	r19, r7
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	a9 01       	movw	r20, r18
    25b8:	33 27       	eor	r19, r19
    25ba:	22 27       	eor	r18, r18
    25bc:	93 8c       	ldd	r9, Z+27	; 0x1b
    25be:	88 24       	eor	r8, r8
    25c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	88 29       	or	r24, r8
    25c6:	99 29       	or	r25, r9
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	28 2b       	or	r18, r24
    25ce:	39 2b       	or	r19, r25
    25d0:	4a 2b       	or	r20, r26
    25d2:	5b 2b       	or	r21, r27
    25d4:	2e 83       	std	Y+6, r18	; 0x06
    25d6:	3f 83       	std	Y+7, r19	; 0x07
    25d8:	48 87       	std	Y+8, r20	; 0x08
    25da:	59 87       	std	Y+9, r21	; 0x09
    25dc:	f5 ce       	rjmp	.-534    	; 0x23c8 <follow_path+0x66>
		}
    25de:	86 e0       	ldi	r24, 0x06	; 6
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <follow_path+0x286>
    25e2:	84 2f       	mov	r24, r20
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <follow_path+0x286>
    25e6:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	cf 90       	pop	r12
    25f8:	bf 90       	pop	r11
    25fa:	af 90       	pop	r10
    25fc:	9f 90       	pop	r9
    25fe:	8f 90       	pop	r8
    2600:	7f 90       	pop	r7
    2602:	6f 90       	pop	r6
    2604:	5f 90       	pop	r5
    2606:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2608:	91 2f       	mov	r25, r17
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	63 cf       	rjmp	.-314    	; 0x24d4 <follow_path+0x172>

0000260e <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    260e:	0f 93       	push	r16
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	ec 01       	movw	r28, r24
    2616:	9a 01       	movw	r18, r20
    2618:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    261a:	bc 01       	movw	r22, r24
    261c:	62 5d       	subi	r22, 0xD2	; 210
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	01 e0       	ldi	r16, 0x01	; 1
    2624:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    2628:	88 23       	and	r24, r24
    262a:	11 f0       	breq	.+4      	; 0x2630 <check_fs+0x22>
    262c:	63 e0       	ldi	r22, 0x03	; 3
    262e:	6d c0       	rjmp	.+218    	; 0x270a <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2630:	c3 5d       	subi	r28, 0xD3	; 211
    2632:	dd 4f       	sbci	r29, 0xFD	; 253
    2634:	98 81       	ld	r25, Y
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	2a 91       	ld	r18, -Y
    263a:	cc 52       	subi	r28, 0x2C	; 44
    263c:	d2 40       	sbci	r29, 0x02	; 2
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	82 2b       	or	r24, r18
    2642:	93 2b       	or	r25, r19
    2644:	85 55       	subi	r24, 0x55	; 85
    2646:	9a 4a       	sbci	r25, 0xAA	; 170
    2648:	11 f0       	breq	.+4      	; 0x264e <check_fs+0x40>
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	5e c0       	rjmp	.+188    	; 0x270a <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    264e:	c9 59       	subi	r28, 0x99	; 153
    2650:	df 4f       	sbci	r29, 0xFF	; 255
    2652:	28 81       	ld	r18, Y
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	52 2f       	mov	r21, r18
    265c:	44 27       	eor	r20, r20
    265e:	33 27       	eor	r19, r19
    2660:	22 27       	eor	r18, r18
    2662:	8a 91       	ld	r24, -Y
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e0       	ldi	r26, 0x00	; 0
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	dc 01       	movw	r26, r24
    266c:	99 27       	eor	r25, r25
    266e:	88 27       	eor	r24, r24
    2670:	28 2b       	or	r18, r24
    2672:	39 2b       	or	r19, r25
    2674:	4a 2b       	or	r20, r26
    2676:	5b 2b       	or	r21, r27
    2678:	22 97       	sbiw	r28, 0x02	; 2
    267a:	89 91       	ld	r24, Y+
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	28 2b       	or	r18, r24
    2684:	39 2b       	or	r19, r25
    2686:	4a 2b       	or	r20, r26
    2688:	5b 2b       	or	r21, r27
    268a:	98 81       	ld	r25, Y
    268c:	c5 56       	subi	r28, 0x65	; 101
    268e:	d0 40       	sbci	r29, 0x00	; 0
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	a0 e0       	ldi	r26, 0x00	; 0
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	28 2b       	or	r18, r24
    2698:	39 2b       	or	r19, r25
    269a:	4a 2b       	or	r20, r26
    269c:	5b 2b       	or	r21, r27
    269e:	50 70       	andi	r21, 0x00	; 0
    26a0:	26 54       	subi	r18, 0x46	; 70
    26a2:	31 44       	sbci	r19, 0x41	; 65
    26a4:	44 45       	sbci	r20, 0x54	; 84
    26a6:	50 40       	sbci	r21, 0x00	; 0
    26a8:	11 f4       	brne	.+4      	; 0x26ae <check_fs+0xa0>
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	2e c0       	rjmp	.+92     	; 0x270a <check_fs+0xfc>
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	cd 57       	subi	r28, 0x7D	; 125
    26b2:	df 4f       	sbci	r29, 0xFF	; 255
    26b4:	28 81       	ld	r18, Y
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	52 2f       	mov	r21, r18
    26be:	44 27       	eor	r20, r20
    26c0:	33 27       	eor	r19, r19
    26c2:	22 27       	eor	r18, r18
    26c4:	8a 91       	ld	r24, -Y
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a0 e0       	ldi	r26, 0x00	; 0
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	dc 01       	movw	r26, r24
    26ce:	99 27       	eor	r25, r25
    26d0:	88 27       	eor	r24, r24
    26d2:	28 2b       	or	r18, r24
    26d4:	39 2b       	or	r19, r25
    26d6:	4a 2b       	or	r20, r26
    26d8:	5b 2b       	or	r21, r27
    26da:	22 97       	sbiw	r28, 0x02	; 2
    26dc:	89 91       	ld	r24, Y+
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e0       	ldi	r26, 0x00	; 0
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	28 2b       	or	r18, r24
    26e6:	39 2b       	or	r19, r25
    26e8:	4a 2b       	or	r20, r26
    26ea:	5b 2b       	or	r21, r27
    26ec:	98 81       	ld	r25, Y
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	a0 e0       	ldi	r26, 0x00	; 0
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	28 2b       	or	r18, r24
    26f6:	39 2b       	or	r19, r25
    26f8:	4a 2b       	or	r20, r26
    26fa:	5b 2b       	or	r21, r27
    26fc:	50 70       	andi	r21, 0x00	; 0
    26fe:	26 54       	subi	r18, 0x46	; 70
    2700:	31 44       	sbci	r19, 0x41	; 65
    2702:	44 45       	sbci	r20, 0x54	; 84
    2704:	50 40       	sbci	r21, 0x00	; 0
    2706:	09 f0       	breq	.+2      	; 0x270a <check_fs+0xfc>
    2708:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    270a:	86 2f       	mov	r24, r22
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	0f 91       	pop	r16
    2712:	08 95       	ret

00002714 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2714:	6f 92       	push	r6
    2716:	7f 92       	push	r7
    2718:	8f 92       	push	r8
    271a:	9f 92       	push	r9
    271c:	af 92       	push	r10
    271e:	bf 92       	push	r11
    2720:	cf 92       	push	r12
    2722:	df 92       	push	r13
    2724:	ef 92       	push	r14
    2726:	ff 92       	push	r15
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	fc 01       	movw	r30, r24
    2732:	9b 01       	movw	r18, r22
    2734:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2736:	a0 81       	ld	r26, Z
    2738:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    273a:	8c 91       	ld	r24, X
    273c:	08 2f       	mov	r16, r24
    273e:	10 e0       	ldi	r17, 0x00	; 0
    2740:	00 53       	subi	r16, 0x30	; 48
    2742:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    2744:	0a 30       	cpi	r16, 0x0A	; 10
    2746:	11 05       	cpc	r17, r1
    2748:	68 f4       	brcc	.+26     	; 0x2764 <chk_mounted+0x50>
    274a:	11 96       	adiw	r26, 0x01	; 1
    274c:	8c 91       	ld	r24, X
    274e:	11 97       	sbiw	r26, 0x01	; 1
    2750:	8a 33       	cpi	r24, 0x3A	; 58
    2752:	41 f4       	brne	.+16     	; 0x2764 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    2754:	12 96       	adiw	r26, 0x02	; 2
    2756:	a0 83       	st	Z, r26
    2758:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    275a:	02 30       	cpi	r16, 0x02	; 2
    275c:	11 05       	cpc	r17, r1
    275e:	20 f0       	brcs	.+8      	; 0x2768 <chk_mounted+0x54>
    2760:	8b e0       	ldi	r24, 0x0B	; 11
    2762:	91 c2       	rjmp	.+1314   	; 0x2c86 <chk_mounted+0x572>
    2764:	00 e0       	ldi	r16, 0x00	; 0
    2766:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2768:	f8 01       	movw	r30, r16
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	e2 5f       	subi	r30, 0xF2	; 242
    2770:	fb 4c       	sbci	r31, 0xCB	; 203
    2772:	c0 81       	ld	r28, Z
    2774:	d1 81       	ldd	r29, Z+1	; 0x01
    2776:	f9 01       	movw	r30, r18
    2778:	c0 83       	st	Z, r28
    277a:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    277c:	20 97       	sbiw	r28, 0x00	; 0
    277e:	11 f4       	brne	.+4      	; 0x2784 <chk_mounted+0x70>
    2780:	8c e0       	ldi	r24, 0x0C	; 12
    2782:	81 c2       	rjmp	.+1282   	; 0x2c86 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2784:	88 81       	ld	r24, Y
    2786:	88 23       	and	r24, r24
    2788:	79 f0       	breq	.+30     	; 0x27a8 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	88 23       	and	r24, r24
    278e:	11 f0       	breq	.+4      	; 0x2794 <chk_mounted+0x80>
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <chk_mounted+0x84>
	return Stat;
    2794:	80 91 3b 33 	lds	r24, 0x333B
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2798:	80 fd       	sbrc	r24, 0
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    279c:	ff 20       	and	r15, r15
    279e:	09 f4       	brne	.+2      	; 0x27a2 <chk_mounted+0x8e>
    27a0:	6f c2       	rjmp	.+1246   	; 0x2c80 <chk_mounted+0x56c>
    27a2:	82 fd       	sbrc	r24, 2
    27a4:	6b c2       	rjmp	.+1238   	; 0x2c7c <chk_mounted+0x568>
    27a6:	6c c2       	rjmp	.+1240   	; 0x2c80 <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    27a8:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    27aa:	f8 01       	movw	r30, r16
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	ee 54       	subi	r30, 0x4E	; 78
    27b2:	f4 4d       	sbci	r31, 0xD4	; 212
    27b4:	80 81       	ld	r24, Z
    27b6:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    27b8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    27bc:	80 ff       	sbrs	r24, 0
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <chk_mounted+0xb0>
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	61 c2       	rjmp	.+1218   	; 0x2c86 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    27c4:	ff 20       	and	r15, r15
    27c6:	11 f0       	breq	.+4      	; 0x27cc <chk_mounted+0xb8>
    27c8:	82 fd       	sbrc	r24, 2
    27ca:	58 c2       	rjmp	.+1200   	; 0x2c7c <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    27cc:	ce 01       	movw	r24, r28
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	0e 94 07 13 	call	0x260e	; 0x260e <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	21 f0       	breq	.+8      	; 0x27e6 <chk_mounted+0xd2>
    27de:	aa 24       	eor	r10, r10
    27e0:	bb 24       	eor	r11, r11
    27e2:	65 01       	movw	r12, r10
    27e4:	3d c0       	rjmp	.+122    	; 0x2860 <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    27e6:	00 0f       	add	r16, r16
    27e8:	11 1f       	adc	r17, r17
    27ea:	0e 54       	subi	r16, 0x4E	; 78
    27ec:	14 4d       	sbci	r17, 0xD4	; 212
    27ee:	f8 01       	movw	r30, r16
    27f0:	81 81       	ldd	r24, Z+1	; 0x01
    27f2:	e8 2f       	mov	r30, r24
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	a4 e0       	ldi	r26, 0x04	; 4
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	aa 95       	dec	r26
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <chk_mounted+0xe4>
    2800:	e4 51       	subi	r30, 0x14	; 20
    2802:	fe 4f       	sbci	r31, 0xFE	; 254
    2804:	ec 0f       	add	r30, r28
    2806:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2808:	84 81       	ldd	r24, Z+4	; 0x04
    280a:	88 23       	and	r24, r24
    280c:	09 f4       	brne	.+2      	; 0x2810 <chk_mounted+0xfc>
    280e:	3a c2       	rjmp	.+1140   	; 0x2c84 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2810:	83 85       	ldd	r24, Z+11	; 0x0b
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	d8 2e       	mov	r13, r24
    281a:	cc 24       	eor	r12, r12
    281c:	bb 24       	eor	r11, r11
    281e:	aa 24       	eor	r10, r10
    2820:	82 85       	ldd	r24, Z+10	; 0x0a
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	a0 e0       	ldi	r26, 0x00	; 0
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	dc 01       	movw	r26, r24
    282a:	99 27       	eor	r25, r25
    282c:	88 27       	eor	r24, r24
    282e:	a8 2a       	or	r10, r24
    2830:	b9 2a       	or	r11, r25
    2832:	ca 2a       	or	r12, r26
    2834:	db 2a       	or	r13, r27
    2836:	80 85       	ldd	r24, Z+8	; 0x08
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	a8 2a       	or	r10, r24
    2840:	b9 2a       	or	r11, r25
    2842:	ca 2a       	or	r12, r26
    2844:	db 2a       	or	r13, r27
    2846:	91 85       	ldd	r25, Z+9	; 0x09
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	a8 2a       	or	r10, r24
    2850:	b9 2a       	or	r11, r25
    2852:	ca 2a       	or	r12, r26
    2854:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2856:	ce 01       	movw	r24, r28
    2858:	b6 01       	movw	r22, r12
    285a:	a5 01       	movw	r20, r10
    285c:	0e 94 07 13 	call	0x260e	; 0x260e <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2860:	83 30       	cpi	r24, 0x03	; 3
    2862:	11 f4       	brne	.+4      	; 0x2868 <chk_mounted+0x154>
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0f c2       	rjmp	.+1054   	; 0x2c86 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2868:	88 23       	and	r24, r24
    286a:	09 f0       	breq	.+2      	; 0x286e <chk_mounted+0x15a>
    286c:	0b c2       	rjmp	.+1046   	; 0x2c84 <chk_mounted+0x570>
    286e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	29 ad       	ldd	r18, Y+57	; 0x39
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	82 2b       	or	r24, r18
    2878:	93 2b       	or	r25, r19
    287a:	80 50       	subi	r24, 0x00	; 0
    287c:	92 40       	sbci	r25, 0x02	; 2
    287e:	09 f0       	breq	.+2      	; 0x2882 <chk_mounted+0x16e>
    2880:	01 c2       	rjmp	.+1026   	; 0x2c84 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2882:	cb 5b       	subi	r28, 0xBB	; 187
    2884:	df 4f       	sbci	r29, 0xFF	; 255
    2886:	98 81       	ld	r25, Y
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	2a 91       	ld	r18, -Y
    288c:	c4 54       	subi	r28, 0x44	; 68
    288e:	d0 40       	sbci	r29, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	82 2b       	or	r24, r18
    2894:	93 2b       	or	r25, r19
    2896:	7c 01       	movw	r14, r24
    2898:	00 e0       	ldi	r16, 0x00	; 0
    289a:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    289c:	e1 14       	cp	r14, r1
    289e:	f1 04       	cpc	r15, r1
    28a0:	01 05       	cpc	r16, r1
    28a2:	11 05       	cpc	r17, r1
    28a4:	41 f5       	brne	.+80     	; 0x28f6 <chk_mounted+0x1e2>
    28a6:	cb 5a       	subi	r28, 0xAB	; 171
    28a8:	df 4f       	sbci	r29, 0xFF	; 255
    28aa:	88 81       	ld	r24, Y
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e0       	ldi	r26, 0x00	; 0
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	18 2f       	mov	r17, r24
    28b4:	00 27       	eor	r16, r16
    28b6:	ff 24       	eor	r15, r15
    28b8:	ee 24       	eor	r14, r14
    28ba:	8a 91       	ld	r24, -Y
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e0       	ldi	r26, 0x00	; 0
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	dc 01       	movw	r26, r24
    28c4:	99 27       	eor	r25, r25
    28c6:	88 27       	eor	r24, r24
    28c8:	e8 2a       	or	r14, r24
    28ca:	f9 2a       	or	r15, r25
    28cc:	0a 2b       	or	r16, r26
    28ce:	1b 2b       	or	r17, r27
    28d0:	22 97       	sbiw	r28, 0x02	; 2
    28d2:	89 91       	ld	r24, Y+
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a0 e0       	ldi	r26, 0x00	; 0
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e8 2a       	or	r14, r24
    28dc:	f9 2a       	or	r15, r25
    28de:	0a 2b       	or	r16, r26
    28e0:	1b 2b       	or	r17, r27
    28e2:	98 81       	ld	r25, Y
    28e4:	c3 55       	subi	r28, 0x53	; 83
    28e6:	d0 40       	sbci	r29, 0x00	; 0
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e8 2a       	or	r14, r24
    28f0:	f9 2a       	or	r15, r25
    28f2:	0a 2b       	or	r16, r26
    28f4:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    28f6:	ee 8a       	std	Y+22, r14	; 0x16
    28f8:	ff 8a       	std	Y+23, r15	; 0x17
    28fa:	08 8f       	std	Y+24, r16	; 0x18
    28fc:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    28fe:	2e ad       	ldd	r18, Y+62	; 0x3e
    2900:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	c8 01       	movw	r24, r16
    290a:	b7 01       	movw	r22, r14
    290c:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    2910:	3b 01       	movw	r6, r22
    2912:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2914:	9d ad       	ldd	r25, Y+61	; 0x3d
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	2c ad       	ldd	r18, Y+60	; 0x3c
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	82 2b       	or	r24, r18
    291e:	93 2b       	or	r25, r19
    2920:	a0 e0       	ldi	r26, 0x00	; 0
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	8a 0d       	add	r24, r10
    2926:	9b 1d       	adc	r25, r11
    2928:	ac 1d       	adc	r26, r12
    292a:	bd 1d       	adc	r27, r13
    292c:	8e 8f       	std	Y+30, r24	; 0x1e
    292e:	9f 8f       	std	Y+31, r25	; 0x1f
    2930:	a8 a3       	std	Y+32, r26	; 0x20
    2932:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2934:	8b ad       	ldd	r24, Y+59	; 0x3b
    2936:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2938:	c0 5c       	subi	r28, 0xC0	; 192
    293a:	df 4f       	sbci	r29, 0xFF	; 255
    293c:	98 81       	ld	r25, Y
    293e:	c0 54       	subi	r28, 0x40	; 64
    2940:	d0 40       	sbci	r29, 0x00	; 0
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	2f ad       	ldd	r18, Y+63	; 0x3f
    2946:	42 2f       	mov	r20, r18
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	48 2b       	or	r20, r24
    294c:	59 2b       	or	r21, r25
    294e:	48 87       	std	Y+8, r20	; 0x08
    2950:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2952:	ce 5b       	subi	r28, 0xBE	; 190
    2954:	df 4f       	sbci	r29, 0xFF	; 255
    2956:	98 81       	ld	r25, Y
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	2a 91       	ld	r18, -Y
    295c:	c1 54       	subi	r28, 0x41	; 65
    295e:	d0 40       	sbci	r29, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	82 2b       	or	r24, r18
    2964:	93 2b       	or	r25, r19
    2966:	7c 01       	movw	r14, r24
    2968:	00 e0       	ldi	r16, 0x00	; 0
    296a:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    296c:	e1 14       	cp	r14, r1
    296e:	f1 04       	cpc	r15, r1
    2970:	01 05       	cpc	r16, r1
    2972:	11 05       	cpc	r17, r1
    2974:	41 f5       	brne	.+80     	; 0x29c6 <chk_mounted+0x2b2>
    2976:	cf 5a       	subi	r28, 0xAF	; 175
    2978:	df 4f       	sbci	r29, 0xFF	; 255
    297a:	88 81       	ld	r24, Y
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	18 2f       	mov	r17, r24
    2984:	00 27       	eor	r16, r16
    2986:	ff 24       	eor	r15, r15
    2988:	ee 24       	eor	r14, r14
    298a:	8a 91       	ld	r24, -Y
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	dc 01       	movw	r26, r24
    2994:	99 27       	eor	r25, r25
    2996:	88 27       	eor	r24, r24
    2998:	e8 2a       	or	r14, r24
    299a:	f9 2a       	or	r15, r25
    299c:	0a 2b       	or	r16, r26
    299e:	1b 2b       	or	r17, r27
    29a0:	22 97       	sbiw	r28, 0x02	; 2
    29a2:	89 91       	ld	r24, Y+
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a0 e0       	ldi	r26, 0x00	; 0
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e8 2a       	or	r14, r24
    29ac:	f9 2a       	or	r15, r25
    29ae:	0a 2b       	or	r16, r26
    29b0:	1b 2b       	or	r17, r27
    29b2:	98 81       	ld	r25, Y
    29b4:	cf 54       	subi	r28, 0x4F	; 79
    29b6:	d0 40       	sbci	r29, 0x00	; 0
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	a0 e0       	ldi	r26, 0x00	; 0
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e8 2a       	or	r14, r24
    29c0:	f9 2a       	or	r15, r25
    29c2:	0a 2b       	or	r16, r26
    29c4:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    29c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	82 2b       	or	r24, r18
    29d0:	93 2b       	or	r25, r19
    29d2:	a0 e0       	ldi	r26, 0x00	; 0
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e8 1a       	sub	r14, r24
    29d8:	f9 0a       	sbc	r15, r25
    29da:	0a 0b       	sbc	r16, r26
    29dc:	1b 0b       	sbc	r17, r27
    29de:	e6 18       	sub	r14, r6
    29e0:	f7 08       	sbc	r15, r7
    29e2:	08 09       	sbc	r16, r8
    29e4:	19 09       	sbc	r17, r9
    29e6:	f4 e0       	ldi	r31, 0x04	; 4
    29e8:	56 95       	lsr	r21
    29ea:	47 95       	ror	r20
    29ec:	fa 95       	dec	r31
    29ee:	e1 f7       	brne	.-8      	; 0x29e8 <chk_mounted+0x2d4>
    29f0:	ca 01       	movw	r24, r20
    29f2:	a0 e0       	ldi	r26, 0x00	; 0
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e8 1a       	sub	r14, r24
    29f8:	f9 0a       	sbc	r15, r25
    29fa:	0a 0b       	sbc	r16, r26
    29fc:	1b 0b       	sbc	r17, r27
    29fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	c8 01       	movw	r24, r16
    2a08:	b7 01       	movw	r22, r14
    2a0a:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    2a0e:	2e 5f       	subi	r18, 0xFE	; 254
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	4f 4f       	sbci	r20, 0xFF	; 255
    2a14:	5f 4f       	sbci	r21, 0xFF	; 255
    2a16:	2a 8f       	std	Y+26, r18	; 0x1a
    2a18:	3b 8f       	std	Y+27, r19	; 0x1b
    2a1a:	4c 8f       	std	Y+28, r20	; 0x1c
    2a1c:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2a1e:	27 3f       	cpi	r18, 0xF7	; 247
    2a20:	8f e0       	ldi	r24, 0x0F	; 15
    2a22:	38 07       	cpc	r19, r24
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	48 07       	cpc	r20, r24
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	58 07       	cpc	r21, r24
    2a2c:	10 f4       	brcc	.+4      	; 0x2a32 <chk_mounted+0x31e>
    2a2e:	11 e0       	ldi	r17, 0x01	; 1
    2a30:	07 c0       	rjmp	.+14     	; 0x2a40 <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2a32:	27 5f       	subi	r18, 0xF7	; 247
    2a34:	3f 4f       	sbci	r19, 0xFF	; 255
    2a36:	40 40       	sbci	r20, 0x00	; 0
    2a38:	50 40       	sbci	r21, 0x00	; 0
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <chk_mounted+0x32a>
    2a3c:	33 c1       	rjmp	.+614    	; 0x2ca4 <chk_mounted+0x590>
    2a3e:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2a40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a44:	a8 a1       	ldd	r26, Y+32	; 0x20
    2a46:	b9 a1       	ldd	r27, Y+33	; 0x21
    2a48:	86 0d       	add	r24, r6
    2a4a:	97 1d       	adc	r25, r7
    2a4c:	a8 1d       	adc	r26, r8
    2a4e:	b9 1d       	adc	r27, r9
    2a50:	8a a3       	std	Y+34, r24	; 0x22
    2a52:	9b a3       	std	Y+35, r25	; 0x23
    2a54:	ac a3       	std	Y+36, r26	; 0x24
    2a56:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2a58:	88 85       	ldd	r24, Y+8	; 0x08
    2a5a:	99 85       	ldd	r25, Y+9	; 0x09
    2a5c:	e4 e0       	ldi	r30, 0x04	; 4
    2a5e:	96 95       	lsr	r25
    2a60:	87 95       	ror	r24
    2a62:	ea 95       	dec	r30
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <chk_mounted+0x34a>
    2a66:	a0 e0       	ldi	r26, 0x00	; 0
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2a6c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2a6e:	48 a1       	ldd	r20, Y+32	; 0x20
    2a70:	59 a1       	ldd	r21, Y+33	; 0x21
    2a72:	82 0f       	add	r24, r18
    2a74:	93 1f       	adc	r25, r19
    2a76:	a4 1f       	adc	r26, r20
    2a78:	b5 1f       	adc	r27, r21
    2a7a:	86 0d       	add	r24, r6
    2a7c:	97 1d       	adc	r25, r7
    2a7e:	a8 1d       	adc	r26, r8
    2a80:	b9 1d       	adc	r27, r9
    2a82:	8e a3       	std	Y+38, r24	; 0x26
    2a84:	9f a3       	std	Y+39, r25	; 0x27
    2a86:	a8 a7       	std	Y+40, r26	; 0x28
    2a88:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	9f ef       	ldi	r25, 0xFF	; 255
    2a8e:	af ef       	ldi	r26, 0xFF	; 255
    2a90:	bf ef       	ldi	r27, 0xFF	; 255
    2a92:	8e 87       	std	Y+14, r24	; 0x0e
    2a94:	9f 87       	std	Y+15, r25	; 0x0f
    2a96:	a8 8b       	std	Y+16, r26	; 0x10
    2a98:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2a9a:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2a9c:	13 30       	cpi	r17, 0x03	; 3
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <chk_mounted+0x38e>
    2aa0:	dc c0       	rjmp	.+440    	; 0x2c5a <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2aa2:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2aa4:	c1 5a       	subi	r28, 0xA1	; 161
    2aa6:	df 4f       	sbci	r29, 0xFF	; 255
    2aa8:	38 81       	ld	r19, Y
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	8a 91       	ld	r24, -Y
    2aae:	ce 55       	subi	r28, 0x5E	; 94
    2ab0:	d0 40       	sbci	r29, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	28 2b       	or	r18, r24
    2ab6:	39 2b       	or	r19, r25
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	2a 0d       	add	r18, r10
    2abe:	3b 1d       	adc	r19, r11
    2ac0:	4c 1d       	adc	r20, r12
    2ac2:	5d 1d       	adc	r21, r13
    2ac4:	2a 8b       	std	Y+18, r18	; 0x12
    2ac6:	3b 8b       	std	Y+19, r19	; 0x13
    2ac8:	4c 8b       	std	Y+20, r20	; 0x14
    2aca:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2acc:	be 01       	movw	r22, r28
    2ace:	62 5d       	subi	r22, 0xD2	; 210
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	01 e0       	ldi	r16, 0x01	; 1
    2ad6:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    2ada:	88 23       	and	r24, r24
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <chk_mounted+0x3cc>
    2ade:	bd c0       	rjmp	.+378    	; 0x2c5a <chk_mounted+0x546>
    2ae0:	c3 5d       	subi	r28, 0xD3	; 211
    2ae2:	dd 4f       	sbci	r29, 0xFD	; 253
    2ae4:	98 81       	ld	r25, Y
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	2a 91       	ld	r18, -Y
    2aea:	cc 52       	subi	r28, 0x2C	; 44
    2aec:	d2 40       	sbci	r29, 0x02	; 2
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	82 2b       	or	r24, r18
    2af2:	93 2b       	or	r25, r19
    2af4:	85 55       	subi	r24, 0x55	; 85
    2af6:	9a 4a       	sbci	r25, 0xAA	; 170
    2af8:	09 f0       	breq	.+2      	; 0x2afc <chk_mounted+0x3e8>
    2afa:	af c0       	rjmp	.+350    	; 0x2c5a <chk_mounted+0x546>
    2afc:	29 a9       	ldd	r18, Y+49	; 0x31
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	52 2f       	mov	r21, r18
    2b06:	44 27       	eor	r20, r20
    2b08:	33 27       	eor	r19, r19
    2b0a:	22 27       	eor	r18, r18
    2b0c:	88 a9       	ldd	r24, Y+48	; 0x30
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e0       	ldi	r26, 0x00	; 0
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	dc 01       	movw	r26, r24
    2b16:	99 27       	eor	r25, r25
    2b18:	88 27       	eor	r24, r24
    2b1a:	28 2b       	or	r18, r24
    2b1c:	39 2b       	or	r19, r25
    2b1e:	4a 2b       	or	r20, r26
    2b20:	5b 2b       	or	r21, r27
    2b22:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e0       	ldi	r26, 0x00	; 0
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	28 2b       	or	r18, r24
    2b2c:	39 2b       	or	r19, r25
    2b2e:	4a 2b       	or	r20, r26
    2b30:	5b 2b       	or	r21, r27
    2b32:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	a0 e0       	ldi	r26, 0x00	; 0
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	28 2b       	or	r18, r24
    2b3c:	39 2b       	or	r19, r25
    2b3e:	4a 2b       	or	r20, r26
    2b40:	5b 2b       	or	r21, r27
    2b42:	22 55       	subi	r18, 0x52	; 82
    2b44:	32 45       	sbci	r19, 0x52	; 82
    2b46:	41 46       	sbci	r20, 0x61	; 97
    2b48:	51 44       	sbci	r21, 0x41	; 65
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <chk_mounted+0x43a>
    2b4c:	86 c0       	rjmp	.+268    	; 0x2c5a <chk_mounted+0x546>
    2b4e:	cb 5e       	subi	r28, 0xEB	; 235
    2b50:	dd 4f       	sbci	r29, 0xFD	; 253
    2b52:	28 81       	ld	r18, Y
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	52 2f       	mov	r21, r18
    2b5c:	44 27       	eor	r20, r20
    2b5e:	33 27       	eor	r19, r19
    2b60:	22 27       	eor	r18, r18
    2b62:	8a 91       	ld	r24, -Y
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	99 27       	eor	r25, r25
    2b6e:	88 27       	eor	r24, r24
    2b70:	28 2b       	or	r18, r24
    2b72:	39 2b       	or	r19, r25
    2b74:	4a 2b       	or	r20, r26
    2b76:	5b 2b       	or	r21, r27
    2b78:	22 97       	sbiw	r28, 0x02	; 2
    2b7a:	89 91       	ld	r24, Y+
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	28 2b       	or	r18, r24
    2b84:	39 2b       	or	r19, r25
    2b86:	4a 2b       	or	r20, r26
    2b88:	5b 2b       	or	r21, r27
    2b8a:	98 81       	ld	r25, Y
    2b8c:	c3 51       	subi	r28, 0x13	; 19
    2b8e:	d2 40       	sbci	r29, 0x02	; 2
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	a0 e0       	ldi	r26, 0x00	; 0
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	28 2b       	or	r18, r24
    2b98:	39 2b       	or	r19, r25
    2b9a:	4a 2b       	or	r20, r26
    2b9c:	5b 2b       	or	r21, r27
    2b9e:	22 57       	subi	r18, 0x72	; 114
    2ba0:	32 47       	sbci	r19, 0x72	; 114
    2ba2:	41 44       	sbci	r20, 0x41	; 65
    2ba4:	51 46       	sbci	r21, 0x61	; 97
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <chk_mounted+0x496>
    2ba8:	58 c0       	rjmp	.+176    	; 0x2c5a <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2baa:	c3 5e       	subi	r28, 0xE3	; 227
    2bac:	dd 4f       	sbci	r29, 0xFD	; 253
    2bae:	28 81       	ld	r18, Y
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e0       	ldi	r20, 0x00	; 0
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	52 2f       	mov	r21, r18
    2bb8:	44 27       	eor	r20, r20
    2bba:	33 27       	eor	r19, r19
    2bbc:	22 27       	eor	r18, r18
    2bbe:	8a 91       	ld	r24, -Y
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	a0 e0       	ldi	r26, 0x00	; 0
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	99 27       	eor	r25, r25
    2bca:	88 27       	eor	r24, r24
    2bcc:	28 2b       	or	r18, r24
    2bce:	39 2b       	or	r19, r25
    2bd0:	4a 2b       	or	r20, r26
    2bd2:	5b 2b       	or	r21, r27
    2bd4:	22 97       	sbiw	r28, 0x02	; 2
    2bd6:	89 91       	ld	r24, Y+
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	28 2b       	or	r18, r24
    2be0:	39 2b       	or	r19, r25
    2be2:	4a 2b       	or	r20, r26
    2be4:	5b 2b       	or	r21, r27
    2be6:	98 81       	ld	r25, Y
    2be8:	cb 51       	subi	r28, 0x1B	; 27
    2bea:	d2 40       	sbci	r29, 0x02	; 2
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	28 2b       	or	r18, r24
    2bf4:	39 2b       	or	r19, r25
    2bf6:	4a 2b       	or	r20, r26
    2bf8:	5b 2b       	or	r21, r27
    2bfa:	2a 87       	std	Y+10, r18	; 0x0a
    2bfc:	3b 87       	std	Y+11, r19	; 0x0b
    2bfe:	4c 87       	std	Y+12, r20	; 0x0c
    2c00:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2c02:	c7 5e       	subi	r28, 0xE7	; 231
    2c04:	dd 4f       	sbci	r29, 0xFD	; 253
    2c06:	28 81       	ld	r18, Y
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	52 2f       	mov	r21, r18
    2c10:	44 27       	eor	r20, r20
    2c12:	33 27       	eor	r19, r19
    2c14:	22 27       	eor	r18, r18
    2c16:	8a 91       	ld	r24, -Y
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	dc 01       	movw	r26, r24
    2c20:	99 27       	eor	r25, r25
    2c22:	88 27       	eor	r24, r24
    2c24:	28 2b       	or	r18, r24
    2c26:	39 2b       	or	r19, r25
    2c28:	4a 2b       	or	r20, r26
    2c2a:	5b 2b       	or	r21, r27
    2c2c:	22 97       	sbiw	r28, 0x02	; 2
    2c2e:	89 91       	ld	r24, Y+
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	a0 e0       	ldi	r26, 0x00	; 0
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	28 2b       	or	r18, r24
    2c38:	39 2b       	or	r19, r25
    2c3a:	4a 2b       	or	r20, r26
    2c3c:	5b 2b       	or	r21, r27
    2c3e:	98 81       	ld	r25, Y
    2c40:	c7 51       	subi	r28, 0x17	; 23
    2c42:	d2 40       	sbci	r29, 0x02	; 2
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	28 2b       	or	r18, r24
    2c4c:	39 2b       	or	r19, r25
    2c4e:	4a 2b       	or	r20, r26
    2c50:	5b 2b       	or	r21, r27
    2c52:	2e 87       	std	Y+14, r18	; 0x0e
    2c54:	3f 87       	std	Y+15, r19	; 0x0f
    2c56:	48 8b       	std	Y+16, r20	; 0x10
    2c58:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2c5a:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2c5c:	1a a6       	std	Y+42, r1	; 0x2a
    2c5e:	1b a6       	std	Y+43, r1	; 0x2b
    2c60:	1c a6       	std	Y+44, r1	; 0x2c
    2c62:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2c64:	80 91 12 34 	lds	r24, 0x3412
    2c68:	90 91 13 34 	lds	r25, 0x3413
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	80 93 12 34 	sts	0x3412, r24
    2c72:	90 93 13 34 	sts	0x3413, r25
    2c76:	8e 83       	std	Y+6, r24	; 0x06
    2c78:	9f 83       	std	Y+7, r25	; 0x07
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <chk_mounted+0x56c>

	return FR_OK;
    2c7c:	8a e0       	ldi	r24, 0x0A	; 10
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <chk_mounted+0x572>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <chk_mounted+0x572>
    2c84:	8d e0       	ldi	r24, 0x0D	; 13
}
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	ff 90       	pop	r15
    2c90:	ef 90       	pop	r14
    2c92:	df 90       	pop	r13
    2c94:	cf 90       	pop	r12
    2c96:	bf 90       	pop	r11
    2c98:	af 90       	pop	r10
    2c9a:	9f 90       	pop	r9
    2c9c:	8f 90       	pop	r8
    2c9e:	7f 90       	pop	r7
    2ca0:	6f 90       	pop	r6
    2ca2:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2ca4:	c3 5a       	subi	r28, 0xA3	; 163
    2ca6:	df 4f       	sbci	r29, 0xFF	; 255
    2ca8:	28 81       	ld	r18, Y
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	50 e0       	ldi	r21, 0x00	; 0
    2cb0:	52 2f       	mov	r21, r18
    2cb2:	44 27       	eor	r20, r20
    2cb4:	33 27       	eor	r19, r19
    2cb6:	22 27       	eor	r18, r18
    2cb8:	8a 91       	ld	r24, -Y
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a0 e0       	ldi	r26, 0x00	; 0
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	99 27       	eor	r25, r25
    2cc4:	88 27       	eor	r24, r24
    2cc6:	28 2b       	or	r18, r24
    2cc8:	39 2b       	or	r19, r25
    2cca:	4a 2b       	or	r20, r26
    2ccc:	5b 2b       	or	r21, r27
    2cce:	22 97       	sbiw	r28, 0x02	; 2
    2cd0:	89 91       	ld	r24, Y+
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a0 e0       	ldi	r26, 0x00	; 0
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	28 2b       	or	r18, r24
    2cda:	39 2b       	or	r19, r25
    2cdc:	4a 2b       	or	r20, r26
    2cde:	5b 2b       	or	r21, r27
    2ce0:	98 81       	ld	r25, Y
    2ce2:	cb 55       	subi	r28, 0x5B	; 91
    2ce4:	d0 40       	sbci	r29, 0x00	; 0
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	a0 e0       	ldi	r26, 0x00	; 0
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	28 2b       	or	r18, r24
    2cee:	39 2b       	or	r19, r25
    2cf0:	4a 2b       	or	r20, r26
    2cf2:	5b 2b       	or	r21, r27
    2cf4:	2a a3       	std	Y+34, r18	; 0x22
    2cf6:	3b a3       	std	Y+35, r19	; 0x23
    2cf8:	4c a3       	std	Y+36, r20	; 0x24
    2cfa:	5d a3       	std	Y+37, r21	; 0x25
    2cfc:	13 e0       	ldi	r17, 0x03	; 3
    2cfe:	ac ce       	rjmp	.-680    	; 0x2a58 <chk_mounted+0x344>

00002d00 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2d00:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	a9 f0       	breq	.+42     	; 0x2d30 <validate+0x30>
    2d06:	80 81       	ld	r24, Z
    2d08:	88 23       	and	r24, r24
    2d0a:	91 f0       	breq	.+36     	; 0x2d30 <validate+0x30>
    2d0c:	86 81       	ldd	r24, Z+6	; 0x06
    2d0e:	97 81       	ldd	r25, Z+7	; 0x07
    2d10:	86 17       	cp	r24, r22
    2d12:	97 07       	cpc	r25, r23
    2d14:	69 f4       	brne	.+26     	; 0x2d30 <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d16:	81 81       	ldd	r24, Z+1	; 0x01
    2d18:	88 23       	and	r24, r24
    2d1a:	11 f0       	breq	.+4      	; 0x2d20 <validate+0x20>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <validate+0x24>
	return Stat;
    2d20:	80 91 3b 33 	lds	r24, 0x333B
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2d24:	80 fd       	sbrc	r24, 0
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <validate+0x2c>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	08 95       	ret
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	08 95       	ret
    2d30:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2d32:	08 95       	ret

00002d34 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2d3a:	82 30       	cpi	r24, 0x02	; 2
    2d3c:	10 f0       	brcs	.+4      	; 0x2d42 <f_mount+0xe>
    2d3e:	8b e0       	ldi	r24, 0x0B	; 11
    2d40:	17 c0       	rjmp	.+46     	; 0x2d70 <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2d42:	a8 2f       	mov	r26, r24
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	fd 01       	movw	r30, r26
    2d48:	ee 0f       	add	r30, r30
    2d4a:	ff 1f       	adc	r31, r31
    2d4c:	e2 5f       	subi	r30, 0xF2	; 242
    2d4e:	fb 4c       	sbci	r31, 0xCB	; 203
    2d50:	01 90       	ld	r0, Z+
    2d52:	f0 81       	ld	r31, Z
    2d54:	e0 2d       	mov	r30, r0

	if (rfs) {
    2d56:	30 97       	sbiw	r30, 0x00	; 0
    2d58:	09 f0       	breq	.+2      	; 0x2d5c <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2d5a:	10 82       	st	Z, r1
	}

	if (fs) {
    2d5c:	20 97       	sbiw	r28, 0x00	; 0
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2d60:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2d62:	aa 0f       	add	r26, r26
    2d64:	bb 1f       	adc	r27, r27
    2d66:	a2 5f       	subi	r26, 0xF2	; 242
    2d68:	bb 4c       	sbci	r27, 0xCB	; 203
    2d6a:	cd 93       	st	X+, r28
    2d6c:	dc 93       	st	X, r29
    2d6e:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d76:	5f 92       	push	r5
    2d78:	6f 92       	push	r6
    2d7a:	7f 92       	push	r7
    2d7c:	8f 92       	push	r8
    2d7e:	9f 92       	push	r9
    2d80:	af 92       	push	r10
    2d82:	bf 92       	push	r11
    2d84:	cf 92       	push	r12
    2d86:	df 92       	push	r13
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	a4 97       	sbiw	r28, 0x24	; 36
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	3c 01       	movw	r6, r24
    2da0:	6b a3       	std	Y+35, r22	; 0x23
    2da2:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2da4:	dc 01       	movw	r26, r24
    2da6:	1d 92       	st	X+, r1
    2da8:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2daa:	3f e1       	ldi	r19, 0x1F	; 31
    2dac:	53 2e       	mov	r5, r19
    2dae:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2db0:	8e 01       	movw	r16, r28
    2db2:	03 5f       	subi	r16, 0xF3	; 243
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	4e 71       	andi	r20, 0x1E	; 30
    2db8:	ce 01       	movw	r24, r28
    2dba:	83 96       	adiw	r24, 0x23	; 35
    2dbc:	b8 01       	movw	r22, r16
    2dbe:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2dc2:	88 23       	and	r24, r24
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <f_open+0x54>
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	32 c1       	rjmp	.+612    	; 0x302e <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2dca:	ce 01       	movw	r24, r28
    2dcc:	01 96       	adiw	r24, 0x01	; 1
    2dce:	89 a3       	std	Y+33, r24	; 0x21
    2dd0:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd6:	c8 01       	movw	r24, r16
    2dd8:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
    2ddc:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2dde:	45 2d       	mov	r20, r5
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	ca 01       	movw	r24, r20
    2de4:	8c 71       	andi	r24, 0x1C	; 28
    2de6:	90 70       	andi	r25, 0x00	; 0
    2de8:	89 2b       	or	r24, r25
    2dea:	09 f4       	brne	.+2      	; 0x2dee <f_open+0x78>
    2dec:	84 c0       	rjmp	.+264    	; 0x2ef6 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2dee:	22 23       	and	r18, r18
    2df0:	79 f0       	breq	.+30     	; 0x2e10 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2df2:	24 30       	cpi	r18, 0x04	; 4
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <f_open+0x82>
    2df6:	1b c1       	rjmp	.+566    	; 0x302e <f_open+0x2b8>
				res = dir_register(&dj);
    2df8:	c8 01       	movw	r24, r16
    2dfa:	0e 94 ad 10 	call	0x215a	; 0x215a <dir_register>
    2dfe:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e00:	88 23       	and	r24, r24
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <f_open+0x90>
    2e04:	14 c1       	rjmp	.+552    	; 0x302e <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2e06:	b8 e0       	ldi	r27, 0x08	; 8
    2e08:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2e0a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e0c:	18 a1       	ldd	r17, Y+32	; 0x20
    2e0e:	5b c0       	rjmp	.+182    	; 0x2ec6 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2e10:	52 fe       	sbrs	r5, 2
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <f_open+0xa2>
    2e14:	28 e0       	ldi	r18, 0x08	; 8
    2e16:	0b c1       	rjmp	.+534    	; 0x302e <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2e18:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e1a:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2e1c:	01 15       	cp	r16, r1
    2e1e:	11 05       	cpc	r17, r1
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <f_open+0xae>
    2e22:	02 c1       	rjmp	.+516    	; 0x3028 <f_open+0x2b2>
    2e24:	f8 01       	movw	r30, r16
    2e26:	83 85       	ldd	r24, Z+11	; 0x0b
    2e28:	81 71       	andi	r24, 0x11	; 17
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <f_open+0xb8>
    2e2c:	fd c0       	rjmp	.+506    	; 0x3028 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2e2e:	53 fe       	sbrs	r5, 3
    2e30:	4a c0       	rjmp	.+148    	; 0x2ec6 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2e32:	95 89       	ldd	r25, Z+21	; 0x15
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	24 89       	ldd	r18, Z+20	; 0x14
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	82 2b       	or	r24, r18
    2e3c:	93 2b       	or	r25, r19
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	7c 01       	movw	r14, r24
    2e44:	dd 24       	eor	r13, r13
    2e46:	cc 24       	eor	r12, r12
    2e48:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	82 2b       	or	r24, r18
    2e52:	93 2b       	or	r25, r19
    2e54:	a0 e0       	ldi	r26, 0x00	; 0
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	c8 2a       	or	r12, r24
    2e5a:	d9 2a       	or	r13, r25
    2e5c:	ea 2a       	or	r14, r26
    2e5e:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2e60:	14 8a       	std	Z+20, r1	; 0x14
    2e62:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2e64:	12 8e       	std	Z+26, r1	; 0x1a
    2e66:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2e68:	14 8e       	std	Z+28, r1	; 0x1c
    2e6a:	15 8e       	std	Z+29, r1	; 0x1d
    2e6c:	16 8e       	std	Z+30, r1	; 0x1e
    2e6e:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2e70:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e72:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2e78:	82 a4       	ldd	r8, Z+42	; 0x2a
    2e7a:	93 a4       	ldd	r9, Z+43	; 0x2b
    2e7c:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2e7e:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2e80:	c1 14       	cp	r12, r1
    2e82:	d1 04       	cpc	r13, r1
    2e84:	e1 04       	cpc	r14, r1
    2e86:	f1 04       	cpc	r15, r1
    2e88:	a1 f0       	breq	.+40     	; 0x2eb2 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2e8a:	cf 01       	movw	r24, r30
    2e8c:	b7 01       	movw	r22, r14
    2e8e:	a6 01       	movw	r20, r12
    2e90:	0e 94 55 0c 	call	0x18aa	; 0x18aa <remove_chain>
    2e94:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2e96:	88 23       	and	r24, r24
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <f_open+0x126>
    2e9a:	c9 c0       	rjmp	.+402    	; 0x302e <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2e9c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e9e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ea0:	08 94       	sec
    2ea2:	c1 08       	sbc	r12, r1
    2ea4:	d1 08       	sbc	r13, r1
    2ea6:	e1 08       	sbc	r14, r1
    2ea8:	f1 08       	sbc	r15, r1
    2eaa:	c2 86       	std	Z+10, r12	; 0x0a
    2eac:	d3 86       	std	Z+11, r13	; 0x0b
    2eae:	e4 86       	std	Z+12, r14	; 0x0c
    2eb0:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb6:	b5 01       	movw	r22, r10
    2eb8:	a4 01       	movw	r20, r8
    2eba:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    2ebe:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2ec0:	88 23       	and	r24, r24
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <f_open+0x150>
    2ec4:	b4 c0       	rjmp	.+360    	; 0x302e <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2ec6:	53 fe       	sbrs	r5, 3
    2ec8:	27 c0       	rjmp	.+78     	; 0x2f18 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2eca:	d8 01       	movw	r26, r16
    2ecc:	1b 96       	adiw	r26, 0x0b	; 11
    2ece:	1c 92       	st	X, r1
    2ed0:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2ed2:	1e 96       	adiw	r26, 0x0e	; 14
    2ed4:	1c 92       	st	X, r1
    2ed6:	1e 97       	sbiw	r26, 0x0e	; 14
    2ed8:	1f 96       	adiw	r26, 0x0f	; 15
    2eda:	1c 92       	st	X, r1
    2edc:	1f 97       	sbiw	r26, 0x0f	; 15
    2ede:	50 96       	adiw	r26, 0x10	; 16
    2ee0:	1c 92       	st	X, r1
    2ee2:	50 97       	sbiw	r26, 0x10	; 16
    2ee4:	51 96       	adiw	r26, 0x11	; 17
    2ee6:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2ee8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2eea:	fe 85       	ldd	r31, Y+14	; 0x0e
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2ef0:	b0 e2       	ldi	r27, 0x20	; 32
    2ef2:	5b 2a       	or	r5, r27
    2ef4:	11 c0       	rjmp	.+34     	; 0x2f18 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2ef6:	22 23       	and	r18, r18
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <f_open+0x186>
    2efa:	99 c0       	rjmp	.+306    	; 0x302e <f_open+0x2b8>
		dir = dj.dir;
    2efc:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2efe:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2f00:	01 15       	cp	r16, r1
    2f02:	11 05       	cpc	r17, r1
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <f_open+0x192>
    2f06:	92 c0       	rjmp	.+292    	; 0x302c <f_open+0x2b6>
    2f08:	f8 01       	movw	r30, r16
    2f0a:	83 85       	ldd	r24, Z+11	; 0x0b
    2f0c:	84 fd       	sbrc	r24, 4
    2f0e:	8e c0       	rjmp	.+284    	; 0x302c <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2f10:	51 fe       	sbrs	r5, 1
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <f_open+0x1a2>
    2f14:	80 fd       	sbrc	r24, 0
    2f16:	88 c0       	rjmp	.+272    	; 0x3028 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2f18:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f1a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f1c:	22 a5       	ldd	r18, Z+42	; 0x2a
    2f1e:	33 a5       	ldd	r19, Z+43	; 0x2b
    2f20:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f22:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f24:	d3 01       	movw	r26, r6
    2f26:	5a 96       	adiw	r26, 0x1a	; 26
    2f28:	2d 93       	st	X+, r18
    2f2a:	3d 93       	st	X+, r19
    2f2c:	4d 93       	st	X+, r20
    2f2e:	5c 93       	st	X, r21
    2f30:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2f32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f34:	98 a1       	ldd	r25, Y+32	; 0x20
    2f36:	5e 96       	adiw	r26, 0x1e	; 30
    2f38:	8d 93       	st	X+, r24
    2f3a:	9c 93       	st	X, r25
    2f3c:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2f3e:	14 96       	adiw	r26, 0x04	; 4
    2f40:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2f42:	d8 01       	movw	r26, r16
    2f44:	55 96       	adiw	r26, 0x15	; 21
    2f46:	3c 91       	ld	r19, X
    2f48:	55 97       	sbiw	r26, 0x15	; 21
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	54 96       	adiw	r26, 0x14	; 20
    2f4e:	8c 91       	ld	r24, X
    2f50:	54 97       	sbiw	r26, 0x14	; 20
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	28 2b       	or	r18, r24
    2f56:	39 2b       	or	r19, r25
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	a9 01       	movw	r20, r18
    2f5e:	33 27       	eor	r19, r19
    2f60:	22 27       	eor	r18, r18
    2f62:	5b 96       	adiw	r26, 0x1b	; 27
    2f64:	9c 91       	ld	r25, X
    2f66:	5b 97       	sbiw	r26, 0x1b	; 27
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	5a 96       	adiw	r26, 0x1a	; 26
    2f6c:	6c 91       	ld	r22, X
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	86 2b       	or	r24, r22
    2f72:	97 2b       	or	r25, r23
    2f74:	a0 e0       	ldi	r26, 0x00	; 0
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	28 2b       	or	r18, r24
    2f7a:	39 2b       	or	r19, r25
    2f7c:	4a 2b       	or	r20, r26
    2f7e:	5b 2b       	or	r21, r27
    2f80:	d3 01       	movw	r26, r6
    2f82:	1e 96       	adiw	r26, 0x0e	; 14
    2f84:	2d 93       	st	X+, r18
    2f86:	3d 93       	st	X+, r19
    2f88:	4d 93       	st	X+, r20
    2f8a:	5c 93       	st	X, r21
    2f8c:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2f8e:	d8 01       	movw	r26, r16
    2f90:	5f 96       	adiw	r26, 0x1f	; 31
    2f92:	2c 91       	ld	r18, X
    2f94:	5f 97       	sbiw	r26, 0x1f	; 31
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	52 2f       	mov	r21, r18
    2f9e:	44 27       	eor	r20, r20
    2fa0:	33 27       	eor	r19, r19
    2fa2:	22 27       	eor	r18, r18
    2fa4:	5e 96       	adiw	r26, 0x1e	; 30
    2fa6:	8c 91       	ld	r24, X
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	dc 01       	movw	r26, r24
    2fb0:	99 27       	eor	r25, r25
    2fb2:	88 27       	eor	r24, r24
    2fb4:	28 2b       	or	r18, r24
    2fb6:	39 2b       	or	r19, r25
    2fb8:	4a 2b       	or	r20, r26
    2fba:	5b 2b       	or	r21, r27
    2fbc:	d8 01       	movw	r26, r16
    2fbe:	5c 96       	adiw	r26, 0x1c	; 28
    2fc0:	8c 91       	ld	r24, X
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	28 2b       	or	r18, r24
    2fca:	39 2b       	or	r19, r25
    2fcc:	4a 2b       	or	r20, r26
    2fce:	5b 2b       	or	r21, r27
    2fd0:	d8 01       	movw	r26, r16
    2fd2:	5d 96       	adiw	r26, 0x1d	; 29
    2fd4:	9c 91       	ld	r25, X
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	a0 e0       	ldi	r26, 0x00	; 0
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	28 2b       	or	r18, r24
    2fde:	39 2b       	or	r19, r25
    2fe0:	4a 2b       	or	r20, r26
    2fe2:	5b 2b       	or	r21, r27
    2fe4:	d3 01       	movw	r26, r6
    2fe6:	1a 96       	adiw	r26, 0x0a	; 10
    2fe8:	2d 93       	st	X+, r18
    2fea:	3d 93       	st	X+, r19
    2fec:	4d 93       	st	X+, r20
    2fee:	5c 93       	st	X, r21
    2ff0:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2ff2:	16 96       	adiw	r26, 0x06	; 6
    2ff4:	1d 92       	st	X+, r1
    2ff6:	1d 92       	st	X+, r1
    2ff8:	1d 92       	st	X+, r1
    2ffa:	1c 92       	st	X, r1
    2ffc:	19 97       	sbiw	r26, 0x09	; 9
    2ffe:	8f ef       	ldi	r24, 0xFF	; 255
    3000:	15 96       	adiw	r26, 0x05	; 5
    3002:	8c 93       	st	X, r24
    3004:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    3006:	56 96       	adiw	r26, 0x16	; 22
    3008:	1d 92       	st	X+, r1
    300a:	1d 92       	st	X+, r1
    300c:	1d 92       	st	X+, r1
    300e:	1c 92       	st	X, r1
    3010:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    3012:	ed 93       	st	X+, r30
    3014:	fc 93       	st	X, r31
    3016:	11 97       	sbiw	r26, 0x01	; 1
    3018:	86 81       	ldd	r24, Z+6	; 0x06
    301a:	97 81       	ldd	r25, Z+7	; 0x07
    301c:	12 96       	adiw	r26, 0x02	; 2
    301e:	8d 93       	st	X+, r24
    3020:	9c 93       	st	X, r25
    3022:	13 97       	sbiw	r26, 0x03	; 3
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	03 c0       	rjmp	.+6      	; 0x302e <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    3028:	27 e0       	ldi	r18, 0x07	; 7
    302a:	01 c0       	rjmp	.+2      	; 0x302e <f_open+0x2b8>
    302c:	24 e0       	ldi	r18, 0x04	; 4
}
    302e:	82 2f       	mov	r24, r18
    3030:	a4 96       	adiw	r28, 0x24	; 36
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	ff 90       	pop	r15
    3040:	ef 90       	pop	r14
    3042:	df 90       	pop	r13
    3044:	cf 90       	pop	r12
    3046:	bf 90       	pop	r11
    3048:	af 90       	pop	r10
    304a:	9f 90       	pop	r9
    304c:	8f 90       	pop	r8
    304e:	7f 90       	pop	r7
    3050:	6f 90       	pop	r6
    3052:	5f 90       	pop	r5
    3054:	08 95       	ret

00003056 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    3056:	2f 92       	push	r2
    3058:	3f 92       	push	r3
    305a:	4f 92       	push	r4
    305c:	5f 92       	push	r5
    305e:	6f 92       	push	r6
    3060:	7f 92       	push	r7
    3062:	8f 92       	push	r8
    3064:	9f 92       	push	r9
    3066:	af 92       	push	r10
    3068:	bf 92       	push	r11
    306a:	cf 92       	push	r12
    306c:	df 92       	push	r13
    306e:	ef 92       	push	r14
    3070:	ff 92       	push	r15
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	00 d0       	rcall	.+0      	; 0x307c <f_read+0x26>
    307c:	0f 92       	push	r0
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	8b 83       	std	Y+3, r24	; 0x03
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	16 2f       	mov	r17, r22
    3088:	07 2f       	mov	r16, r23
    308a:	4a 01       	movw	r8, r20
    308c:	29 83       	std	Y+1, r18	; 0x01
    308e:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    3090:	d9 01       	movw	r26, r18
    3092:	1d 92       	st	X+, r1
    3094:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    3096:	fc 01       	movw	r30, r24
    3098:	62 81       	ldd	r22, Z+2	; 0x02
    309a:	73 81       	ldd	r23, Z+3	; 0x03
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <validate>
    30a4:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    30a6:	88 23       	and	r24, r24
    30a8:	09 f0       	breq	.+2      	; 0x30ac <f_read+0x56>
    30aa:	b4 c1       	rjmp	.+872    	; 0x3414 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    30ac:	ab 81       	ldd	r26, Y+3	; 0x03
    30ae:	bc 81       	ldd	r27, Y+4	; 0x04
    30b0:	14 96       	adiw	r26, 0x04	; 4
    30b2:	8c 91       	ld	r24, X
    30b4:	87 fd       	sbrc	r24, 7
    30b6:	66 c0       	rjmp	.+204    	; 0x3184 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    30b8:	80 fd       	sbrc	r24, 0
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <f_read+0x6c>
    30bc:	a7 e0       	ldi	r26, 0x07	; 7
    30be:	7a 2e       	mov	r7, r26
    30c0:	a9 c1       	rjmp	.+850    	; 0x3414 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    30c2:	eb 81       	ldd	r30, Y+3	; 0x03
    30c4:	fc 81       	ldd	r31, Y+4	; 0x04
    30c6:	22 85       	ldd	r18, Z+10	; 0x0a
    30c8:	33 85       	ldd	r19, Z+11	; 0x0b
    30ca:	44 85       	ldd	r20, Z+12	; 0x0c
    30cc:	55 85       	ldd	r21, Z+13	; 0x0d
    30ce:	86 81       	ldd	r24, Z+6	; 0x06
    30d0:	97 81       	ldd	r25, Z+7	; 0x07
    30d2:	a0 85       	ldd	r26, Z+8	; 0x08
    30d4:	b1 85       	ldd	r27, Z+9	; 0x09
    30d6:	28 1b       	sub	r18, r24
    30d8:	39 0b       	sbc	r19, r25
    30da:	4a 0b       	sbc	r20, r26
    30dc:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    30de:	c4 01       	movw	r24, r8
    30e0:	a0 e0       	ldi	r26, 0x00	; 0
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	28 17       	cp	r18, r24
    30e6:	39 07       	cpc	r19, r25
    30e8:	4a 07       	cpc	r20, r26
    30ea:	5b 07       	cpc	r21, r27
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <f_read+0x9a>
    30ee:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    30f0:	81 2f       	mov	r24, r17
    30f2:	90 2f       	mov	r25, r16
    30f4:	9c 01       	movw	r18, r24
    30f6:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    30f8:	f0 e2       	ldi	r31, 0x20	; 32
    30fa:	2f 2e       	mov	r2, r31
    30fc:	31 2c       	mov	r3, r1
    30fe:	6b 81       	ldd	r22, Y+3	; 0x03
    3100:	7c 81       	ldd	r23, Y+4	; 0x04
    3102:	26 0e       	add	r2, r22
    3104:	37 1e       	adc	r3, r23
    3106:	82 c1       	rjmp	.+772    	; 0x340c <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3108:	ab 81       	ldd	r26, Y+3	; 0x03
    310a:	bc 81       	ldd	r27, Y+4	; 0x04
    310c:	16 96       	adiw	r26, 0x06	; 6
    310e:	2d 91       	ld	r18, X+
    3110:	3d 91       	ld	r19, X+
    3112:	4d 91       	ld	r20, X+
    3114:	5c 91       	ld	r21, X
    3116:	19 97       	sbiw	r26, 0x09	; 9
    3118:	da 01       	movw	r26, r20
    311a:	c9 01       	movw	r24, r18
    311c:	91 70       	andi	r25, 0x01	; 1
    311e:	a0 70       	andi	r26, 0x00	; 0
    3120:	b0 70       	andi	r27, 0x00	; 0
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	a1 05       	cpc	r26, r1
    3126:	b1 05       	cpc	r27, r1
    3128:	09 f0       	breq	.+2      	; 0x312c <f_read+0xd6>
    312a:	2c c1       	rjmp	.+600    	; 0x3384 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    312c:	ab 81       	ldd	r26, Y+3	; 0x03
    312e:	bc 81       	ldd	r27, Y+4	; 0x04
    3130:	ed 91       	ld	r30, X+
    3132:	fc 91       	ld	r31, X
    3134:	11 97       	sbiw	r26, 0x01	; 1
    3136:	15 96       	adiw	r26, 0x05	; 5
    3138:	9c 91       	ld	r25, X
    313a:	15 97       	sbiw	r26, 0x05	; 5
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	98 17       	cp	r25, r24
    3140:	a0 f1       	brcs	.+104    	; 0x31aa <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    3142:	21 15       	cp	r18, r1
    3144:	31 05       	cpc	r19, r1
    3146:	41 05       	cpc	r20, r1
    3148:	51 05       	cpc	r21, r1
    314a:	39 f4       	brne	.+14     	; 0x315a <f_read+0x104>
    314c:	1e 96       	adiw	r26, 0x0e	; 14
    314e:	6d 91       	ld	r22, X+
    3150:	7d 91       	ld	r23, X+
    3152:	8d 91       	ld	r24, X+
    3154:	9c 91       	ld	r25, X
    3156:	51 97       	sbiw	r26, 0x11	; 17
    3158:	0b c0       	rjmp	.+22     	; 0x3170 <f_read+0x11a>
    315a:	ab 81       	ldd	r26, Y+3	; 0x03
    315c:	bc 81       	ldd	r27, Y+4	; 0x04
    315e:	52 96       	adiw	r26, 0x12	; 18
    3160:	4d 91       	ld	r20, X+
    3162:	5d 91       	ld	r21, X+
    3164:	6d 91       	ld	r22, X+
    3166:	7c 91       	ld	r23, X
    3168:	55 97       	sbiw	r26, 0x15	; 21
    316a:	cf 01       	movw	r24, r30
    316c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3170:	62 30       	cpi	r22, 0x02	; 2
    3172:	71 05       	cpc	r23, r1
    3174:	81 05       	cpc	r24, r1
    3176:	91 05       	cpc	r25, r1
    3178:	40 f4       	brcc	.+16     	; 0x318a <f_read+0x134>
    317a:	eb 81       	ldd	r30, Y+3	; 0x03
    317c:	fc 81       	ldd	r31, Y+4	; 0x04
    317e:	84 81       	ldd	r24, Z+4	; 0x04
    3180:	80 68       	ori	r24, 0x80	; 128
    3182:	84 83       	std	Z+4, r24	; 0x04
    3184:	e2 e0       	ldi	r30, 0x02	; 2
    3186:	7e 2e       	mov	r7, r30
    3188:	45 c1       	rjmp	.+650    	; 0x3414 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    318a:	6f 3f       	cpi	r22, 0xFF	; 255
    318c:	ff ef       	ldi	r31, 0xFF	; 255
    318e:	7f 07       	cpc	r23, r31
    3190:	ff ef       	ldi	r31, 0xFF	; 255
    3192:	8f 07       	cpc	r24, r31
    3194:	ff ef       	ldi	r31, 0xFF	; 255
    3196:	9f 07       	cpc	r25, r31
    3198:	09 f4       	brne	.+2      	; 0x319c <f_read+0x146>
    319a:	e0 c0       	rjmp	.+448    	; 0x335c <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    319c:	eb 81       	ldd	r30, Y+3	; 0x03
    319e:	fc 81       	ldd	r31, Y+4	; 0x04
    31a0:	62 8b       	std	Z+18, r22	; 0x12
    31a2:	73 8b       	std	Z+19, r23	; 0x13
    31a4:	84 8b       	std	Z+20, r24	; 0x14
    31a6:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    31a8:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    31aa:	ab 81       	ldd	r26, Y+3	; 0x03
    31ac:	bc 81       	ldd	r27, Y+4	; 0x04
    31ae:	0d 91       	ld	r16, X+
    31b0:	1c 91       	ld	r17, X
    31b2:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    31b4:	52 96       	adiw	r26, 0x12	; 18
    31b6:	2d 91       	ld	r18, X+
    31b8:	3d 91       	ld	r19, X+
    31ba:	4d 91       	ld	r20, X+
    31bc:	5c 91       	ld	r21, X
    31be:	55 97       	sbiw	r26, 0x15	; 21
    31c0:	22 50       	subi	r18, 0x02	; 2
    31c2:	30 40       	sbci	r19, 0x00	; 0
    31c4:	40 40       	sbci	r20, 0x00	; 0
    31c6:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    31c8:	f8 01       	movw	r30, r16
    31ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    31cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    31ce:	a4 8d       	ldd	r26, Z+28	; 0x1c
    31d0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    31d2:	02 97       	sbiw	r24, 0x02	; 2
    31d4:	a1 09       	sbc	r26, r1
    31d6:	b1 09       	sbc	r27, r1
    31d8:	28 17       	cp	r18, r24
    31da:	39 07       	cpc	r19, r25
    31dc:	4a 07       	cpc	r20, r26
    31de:	5b 07       	cpc	r21, r27
    31e0:	b8 f4       	brcc	.+46     	; 0x3210 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    31e2:	62 80       	ldd	r6, Z+2	; 0x02
    31e4:	66 2d       	mov	r22, r6
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    31f0:	9b 01       	movw	r18, r22
    31f2:	ac 01       	movw	r20, r24
    31f4:	f8 01       	movw	r30, r16
    31f6:	86 a1       	ldd	r24, Z+38	; 0x26
    31f8:	97 a1       	ldd	r25, Z+39	; 0x27
    31fa:	a0 a5       	ldd	r26, Z+40	; 0x28
    31fc:	b1 a5       	ldd	r27, Z+41	; 0x29
    31fe:	28 0f       	add	r18, r24
    3200:	39 1f       	adc	r19, r25
    3202:	4a 1f       	adc	r20, r26
    3204:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3206:	21 15       	cp	r18, r1
    3208:	31 05       	cpc	r19, r1
    320a:	41 05       	cpc	r20, r1
    320c:	51 05       	cpc	r21, r1
    320e:	49 f4       	brne	.+18     	; 0x3222 <f_read+0x1cc>
    3210:	ab 81       	ldd	r26, Y+3	; 0x03
    3212:	bc 81       	ldd	r27, Y+4	; 0x04
    3214:	14 96       	adiw	r26, 0x04	; 4
    3216:	8c 91       	ld	r24, X
    3218:	14 97       	sbiw	r26, 0x04	; 4
    321a:	80 68       	ori	r24, 0x80	; 128
    321c:	14 96       	adiw	r26, 0x04	; 4
    321e:	8c 93       	st	X, r24
    3220:	b1 cf       	rjmp	.-158    	; 0x3184 <f_read+0x12e>
			sect += fp->csect;
    3222:	eb 81       	ldd	r30, Y+3	; 0x03
    3224:	fc 81       	ldd	r31, Y+4	; 0x04
    3226:	85 81       	ldd	r24, Z+5	; 0x05
    3228:	59 01       	movw	r10, r18
    322a:	6a 01       	movw	r12, r20
    322c:	a8 0e       	add	r10, r24
    322e:	b1 1c       	adc	r11, r1
    3230:	c1 1c       	adc	r12, r1
    3232:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3234:	74 01       	movw	r14, r8
    3236:	ef 2c       	mov	r14, r15
    3238:	ff 24       	eor	r15, r15
    323a:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    323c:	e1 14       	cp	r14, r1
    323e:	f1 04       	cpc	r15, r1
    3240:	09 f4       	brne	.+2      	; 0x3244 <f_read+0x1ee>
    3242:	53 c0       	rjmp	.+166    	; 0x32ea <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	c7 01       	movw	r24, r14
    324a:	82 0f       	add	r24, r18
    324c:	93 1f       	adc	r25, r19
    324e:	66 2d       	mov	r22, r6
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	68 17       	cp	r22, r24
    3254:	79 07       	cpc	r23, r25
    3256:	18 f4       	brcc	.+6      	; 0x325e <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3258:	7b 01       	movw	r14, r22
    325a:	e2 1a       	sub	r14, r18
    325c:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    325e:	d8 01       	movw	r26, r16
    3260:	11 96       	adiw	r26, 0x01	; 1
    3262:	8c 91       	ld	r24, X
    3264:	b2 01       	movw	r22, r4
    3266:	a6 01       	movw	r20, r12
    3268:	95 01       	movw	r18, r10
    326a:	0e 2d       	mov	r16, r14
    326c:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    3270:	eb 81       	ldd	r30, Y+3	; 0x03
    3272:	fc 81       	ldd	r31, Y+4	; 0x04
    3274:	94 81       	ldd	r25, Z+4	; 0x04
    3276:	88 23       	and	r24, r24
    3278:	19 f0       	breq	.+6      	; 0x3280 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    327a:	90 68       	ori	r25, 0x80	; 128
    327c:	94 83       	std	Z+4, r25	; 0x04
    327e:	76 c0       	rjmp	.+236    	; 0x336c <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3280:	96 ff       	sbrs	r25, 6
    3282:	29 c0       	rjmp	.+82     	; 0x32d6 <f_read+0x280>
    3284:	ab 81       	ldd	r26, Y+3	; 0x03
    3286:	bc 81       	ldd	r27, Y+4	; 0x04
    3288:	56 96       	adiw	r26, 0x16	; 22
    328a:	2d 91       	ld	r18, X+
    328c:	3d 91       	ld	r19, X+
    328e:	4d 91       	ld	r20, X+
    3290:	5c 91       	ld	r21, X
    3292:	59 97       	sbiw	r26, 0x19	; 25
    3294:	2a 19       	sub	r18, r10
    3296:	3b 09       	sbc	r19, r11
    3298:	4c 09       	sbc	r20, r12
    329a:	5d 09       	sbc	r21, r13
    329c:	c7 01       	movw	r24, r14
    329e:	a0 e0       	ldi	r26, 0x00	; 0
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	28 17       	cp	r18, r24
    32a4:	39 07       	cpc	r19, r25
    32a6:	4a 07       	cpc	r20, r26
    32a8:	5b 07       	cpc	r21, r27
    32aa:	a8 f4       	brcc	.+42     	; 0x32d6 <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    32ac:	69 e0       	ldi	r22, 0x09	; 9
    32ae:	22 0f       	add	r18, r18
    32b0:	33 1f       	adc	r19, r19
    32b2:	44 1f       	adc	r20, r20
    32b4:	55 1f       	adc	r21, r21
    32b6:	6a 95       	dec	r22
    32b8:	d1 f7       	brne	.-12     	; 0x32ae <f_read+0x258>
    32ba:	c2 01       	movw	r24, r4
    32bc:	82 0f       	add	r24, r18
    32be:	93 1f       	adc	r25, r19
    32c0:	d1 01       	movw	r26, r2
    32c2:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    32c4:	9c 01       	movw	r18, r24
    32c6:	20 50       	subi	r18, 0x00	; 0
    32c8:	3e 4f       	sbci	r19, 0xFE	; 254
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <f_read+0x27a>
    32cc:	8d 91       	ld	r24, X+
    32ce:	81 93       	st	Z+, r24
    32d0:	e2 17       	cp	r30, r18
    32d2:	f3 07       	cpc	r31, r19
    32d4:	d9 f7       	brne	.-10     	; 0x32cc <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    32d6:	eb 81       	ldd	r30, Y+3	; 0x03
    32d8:	fc 81       	ldd	r31, Y+4	; 0x04
    32da:	85 81       	ldd	r24, Z+5	; 0x05
    32dc:	8e 0d       	add	r24, r14
    32de:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    32e0:	b7 01       	movw	r22, r14
    32e2:	76 2f       	mov	r23, r22
    32e4:	66 27       	eor	r22, r22
    32e6:	77 0f       	add	r23, r23
    32e8:	74 c0       	rjmp	.+232    	; 0x33d2 <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    32ea:	ab 81       	ldd	r26, Y+3	; 0x03
    32ec:	bc 81       	ldd	r27, Y+4	; 0x04
    32ee:	14 96       	adiw	r26, 0x04	; 4
    32f0:	8c 91       	ld	r24, X
    32f2:	14 97       	sbiw	r26, 0x04	; 4
    32f4:	86 ff       	sbrs	r24, 6
    32f6:	1b c0       	rjmp	.+54     	; 0x332e <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    32f8:	56 96       	adiw	r26, 0x16	; 22
    32fa:	2d 91       	ld	r18, X+
    32fc:	3d 91       	ld	r19, X+
    32fe:	4d 91       	ld	r20, X+
    3300:	5c 91       	ld	r21, X
    3302:	59 97       	sbiw	r26, 0x19	; 25
    3304:	f8 01       	movw	r30, r16
    3306:	81 81       	ldd	r24, Z+1	; 0x01
    3308:	b1 01       	movw	r22, r2
    330a:	01 e0       	ldi	r16, 0x01	; 1
    330c:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    3310:	ab 81       	ldd	r26, Y+3	; 0x03
    3312:	bc 81       	ldd	r27, Y+4	; 0x04
    3314:	14 96       	adiw	r26, 0x04	; 4
    3316:	9c 91       	ld	r25, X
    3318:	14 97       	sbiw	r26, 0x04	; 4
    331a:	88 23       	and	r24, r24
    331c:	21 f0       	breq	.+8      	; 0x3326 <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    331e:	90 68       	ori	r25, 0x80	; 128
    3320:	14 96       	adiw	r26, 0x04	; 4
    3322:	9c 93       	st	X, r25
    3324:	23 c0       	rjmp	.+70     	; 0x336c <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    3326:	9f 7b       	andi	r25, 0xBF	; 191
    3328:	eb 81       	ldd	r30, Y+3	; 0x03
    332a:	fc 81       	ldd	r31, Y+4	; 0x04
    332c:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    332e:	eb 81       	ldd	r30, Y+3	; 0x03
    3330:	fc 81       	ldd	r31, Y+4	; 0x04
    3332:	86 89       	ldd	r24, Z+22	; 0x16
    3334:	97 89       	ldd	r25, Z+23	; 0x17
    3336:	a0 8d       	ldd	r26, Z+24	; 0x18
    3338:	b1 8d       	ldd	r27, Z+25	; 0x19
    333a:	8a 15       	cp	r24, r10
    333c:	9b 05       	cpc	r25, r11
    333e:	ac 05       	cpc	r26, r12
    3340:	bd 05       	cpc	r27, r13
    3342:	b9 f0       	breq	.+46     	; 0x3372 <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    3344:	01 90       	ld	r0, Z+
    3346:	f0 81       	ld	r31, Z
    3348:	e0 2d       	mov	r30, r0
    334a:	81 81       	ldd	r24, Z+1	; 0x01
    334c:	b1 01       	movw	r22, r2
    334e:	a6 01       	movw	r20, r12
    3350:	95 01       	movw	r18, r10
    3352:	01 e0       	ldi	r16, 0x01	; 1
    3354:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    3358:	88 23       	and	r24, r24
    335a:	59 f0       	breq	.+22     	; 0x3372 <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    335c:	ab 81       	ldd	r26, Y+3	; 0x03
    335e:	bc 81       	ldd	r27, Y+4	; 0x04
    3360:	14 96       	adiw	r26, 0x04	; 4
    3362:	8c 91       	ld	r24, X
    3364:	14 97       	sbiw	r26, 0x04	; 4
    3366:	80 68       	ori	r24, 0x80	; 128
    3368:	14 96       	adiw	r26, 0x04	; 4
    336a:	8c 93       	st	X, r24
    336c:	77 24       	eor	r7, r7
    336e:	73 94       	inc	r7
    3370:	51 c0       	rjmp	.+162    	; 0x3414 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    3372:	eb 81       	ldd	r30, Y+3	; 0x03
    3374:	fc 81       	ldd	r31, Y+4	; 0x04
    3376:	a6 8a       	std	Z+22, r10	; 0x16
    3378:	b7 8a       	std	Z+23, r11	; 0x17
    337a:	c0 8e       	std	Z+24, r12	; 0x18
    337c:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    337e:	85 81       	ldd	r24, Z+5	; 0x05
    3380:	8f 5f       	subi	r24, 0xFF	; 255
    3382:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3384:	ab 81       	ldd	r26, Y+3	; 0x03
    3386:	bc 81       	ldd	r27, Y+4	; 0x04
    3388:	16 96       	adiw	r26, 0x06	; 6
    338a:	2d 91       	ld	r18, X+
    338c:	3d 91       	ld	r19, X+
    338e:	4d 91       	ld	r20, X+
    3390:	5c 91       	ld	r21, X
    3392:	19 97       	sbiw	r26, 0x09	; 9
    3394:	c9 01       	movw	r24, r18
    3396:	91 70       	andi	r25, 0x01	; 1
    3398:	e0 e0       	ldi	r30, 0x00	; 0
    339a:	f2 e0       	ldi	r31, 0x02	; 2
    339c:	e8 1b       	sub	r30, r24
    339e:	f9 0b       	sbc	r31, r25
    33a0:	b4 01       	movw	r22, r8
    33a2:	e8 15       	cp	r30, r8
    33a4:	f9 05       	cpc	r31, r9
    33a6:	08 f4       	brcc	.+2      	; 0x33aa <f_read+0x354>
    33a8:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    33aa:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    33ac:	f9 01       	movw	r30, r18
    33ae:	f1 70       	andi	r31, 0x01	; 1
    33b0:	b0 96       	adiw	r30, 0x20	; 32
    33b2:	8b 81       	ldd	r24, Y+3	; 0x03
    33b4:	9c 81       	ldd	r25, Y+4	; 0x04
    33b6:	e8 0f       	add	r30, r24
    33b8:	f9 1f       	adc	r31, r25
    33ba:	92 01       	movw	r18, r4
    33bc:	04 c0       	rjmp	.+8      	; 0x33c6 <f_read+0x370>
	while (cnt--) *d++ = *s++;
    33be:	81 91       	ld	r24, Z+
    33c0:	d9 01       	movw	r26, r18
    33c2:	8d 93       	st	X+, r24
    33c4:	9d 01       	movw	r18, r26
    33c6:	01 50       	subi	r16, 0x01	; 1
    33c8:	10 40       	sbci	r17, 0x00	; 0
    33ca:	bf ef       	ldi	r27, 0xFF	; 255
    33cc:	0f 3f       	cpi	r16, 0xFF	; 255
    33ce:	1b 07       	cpc	r17, r27
    33d0:	b1 f7       	brne	.-20     	; 0x33be <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    33d2:	46 0e       	add	r4, r22
    33d4:	57 1e       	adc	r5, r23
    33d6:	cb 01       	movw	r24, r22
    33d8:	a0 e0       	ldi	r26, 0x00	; 0
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	eb 81       	ldd	r30, Y+3	; 0x03
    33de:	fc 81       	ldd	r31, Y+4	; 0x04
    33e0:	26 81       	ldd	r18, Z+6	; 0x06
    33e2:	37 81       	ldd	r19, Z+7	; 0x07
    33e4:	40 85       	ldd	r20, Z+8	; 0x08
    33e6:	51 85       	ldd	r21, Z+9	; 0x09
    33e8:	28 0f       	add	r18, r24
    33ea:	39 1f       	adc	r19, r25
    33ec:	4a 1f       	adc	r20, r26
    33ee:	5b 1f       	adc	r21, r27
    33f0:	26 83       	std	Z+6, r18	; 0x06
    33f2:	37 83       	std	Z+7, r19	; 0x07
    33f4:	40 87       	std	Z+8, r20	; 0x08
    33f6:	51 87       	std	Z+9, r21	; 0x09
    33f8:	e9 81       	ldd	r30, Y+1	; 0x01
    33fa:	fa 81       	ldd	r31, Y+2	; 0x02
    33fc:	80 81       	ld	r24, Z
    33fe:	91 81       	ldd	r25, Z+1	; 0x01
    3400:	86 0f       	add	r24, r22
    3402:	97 1f       	adc	r25, r23
    3404:	80 83       	st	Z, r24
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	86 1a       	sub	r8, r22
    340a:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    340c:	81 14       	cp	r8, r1
    340e:	91 04       	cpc	r9, r1
    3410:	09 f0       	breq	.+2      	; 0x3414 <f_read+0x3be>
    3412:	7a ce       	rjmp	.-780    	; 0x3108 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3414:	87 2d       	mov	r24, r7
    3416:	24 96       	adiw	r28, 0x04	; 4
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	1f 91       	pop	r17
    3422:	0f 91       	pop	r16
    3424:	ff 90       	pop	r15
    3426:	ef 90       	pop	r14
    3428:	df 90       	pop	r13
    342a:	cf 90       	pop	r12
    342c:	bf 90       	pop	r11
    342e:	af 90       	pop	r10
    3430:	9f 90       	pop	r9
    3432:	8f 90       	pop	r8
    3434:	7f 90       	pop	r7
    3436:	6f 90       	pop	r6
    3438:	5f 90       	pop	r5
    343a:	4f 90       	pop	r4
    343c:	3f 90       	pop	r3
    343e:	2f 90       	pop	r2
    3440:	08 95       	ret

00003442 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    3442:	2f 92       	push	r2
    3444:	3f 92       	push	r3
    3446:	4f 92       	push	r4
    3448:	5f 92       	push	r5
    344a:	6f 92       	push	r6
    344c:	7f 92       	push	r7
    344e:	8f 92       	push	r8
    3450:	9f 92       	push	r9
    3452:	af 92       	push	r10
    3454:	bf 92       	push	r11
    3456:	cf 92       	push	r12
    3458:	df 92       	push	r13
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	00 d0       	rcall	.+0      	; 0x3468 <f_write+0x26>
    3468:	0f 92       	push	r0
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	8b 83       	std	Y+3, r24	; 0x03
    3470:	9c 83       	std	Y+4, r25	; 0x04
    3472:	16 2f       	mov	r17, r22
    3474:	07 2f       	mov	r16, r23
    3476:	4a 01       	movw	r8, r20
    3478:	29 83       	std	Y+1, r18	; 0x01
    347a:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    347c:	d9 01       	movw	r26, r18
    347e:	1d 92       	st	X+, r1
    3480:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    3482:	fc 01       	movw	r30, r24
    3484:	62 81       	ldd	r22, Z+2	; 0x02
    3486:	73 81       	ldd	r23, Z+3	; 0x03
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	0e 94 80 16 	call	0x2d00	; 0x2d00 <validate>
    3490:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3492:	88 23       	and	r24, r24
    3494:	09 f0       	breq	.+2      	; 0x3498 <f_write+0x56>
    3496:	02 c2       	rjmp	.+1028   	; 0x389c <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3498:	ab 81       	ldd	r26, Y+3	; 0x03
    349a:	bc 81       	ldd	r27, Y+4	; 0x04
    349c:	14 96       	adiw	r26, 0x04	; 4
    349e:	8c 91       	ld	r24, X
    34a0:	87 fd       	sbrc	r24, 7
    34a2:	7c c0       	rjmp	.+248    	; 0x359c <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    34a4:	81 fd       	sbrc	r24, 1
    34a6:	03 c0       	rjmp	.+6      	; 0x34ae <f_write+0x6c>
    34a8:	47 e0       	ldi	r20, 0x07	; 7
    34aa:	64 2e       	mov	r6, r20
    34ac:	f7 c1       	rjmp	.+1006   	; 0x389c <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    34ae:	eb 81       	ldd	r30, Y+3	; 0x03
    34b0:	fc 81       	ldd	r31, Y+4	; 0x04
    34b2:	22 85       	ldd	r18, Z+10	; 0x0a
    34b4:	33 85       	ldd	r19, Z+11	; 0x0b
    34b6:	44 85       	ldd	r20, Z+12	; 0x0c
    34b8:	55 85       	ldd	r21, Z+13	; 0x0d
    34ba:	c4 01       	movw	r24, r8
    34bc:	a0 e0       	ldi	r26, 0x00	; 0
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	82 0f       	add	r24, r18
    34c2:	93 1f       	adc	r25, r19
    34c4:	a4 1f       	adc	r26, r20
    34c6:	b5 1f       	adc	r27, r21
    34c8:	82 17       	cp	r24, r18
    34ca:	93 07       	cpc	r25, r19
    34cc:	a4 07       	cpc	r26, r20
    34ce:	b5 07       	cpc	r27, r21
    34d0:	10 f4       	brcc	.+4      	; 0x34d6 <f_write+0x94>
    34d2:	88 24       	eor	r8, r8
    34d4:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    34d6:	81 2f       	mov	r24, r17
    34d8:	90 2f       	mov	r25, r16
    34da:	9c 01       	movw	r18, r24
    34dc:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    34de:	30 e2       	ldi	r19, 0x20	; 32
    34e0:	23 2e       	mov	r2, r19
    34e2:	31 2c       	mov	r3, r1
    34e4:	6b 81       	ldd	r22, Y+3	; 0x03
    34e6:	7c 81       	ldd	r23, Y+4	; 0x04
    34e8:	26 0e       	add	r2, r22
    34ea:	37 1e       	adc	r3, r23
    34ec:	b2 c1       	rjmp	.+868    	; 0x3852 <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    34ee:	ab 81       	ldd	r26, Y+3	; 0x03
    34f0:	bc 81       	ldd	r27, Y+4	; 0x04
    34f2:	16 96       	adiw	r26, 0x06	; 6
    34f4:	2d 91       	ld	r18, X+
    34f6:	3d 91       	ld	r19, X+
    34f8:	4d 91       	ld	r20, X+
    34fa:	5c 91       	ld	r21, X
    34fc:	19 97       	sbiw	r26, 0x09	; 9
    34fe:	da 01       	movw	r26, r20
    3500:	c9 01       	movw	r24, r18
    3502:	91 70       	andi	r25, 0x01	; 1
    3504:	a0 70       	andi	r26, 0x00	; 0
    3506:	b0 70       	andi	r27, 0x00	; 0
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	a1 05       	cpc	r26, r1
    350c:	b1 05       	cpc	r27, r1
    350e:	09 f0       	breq	.+2      	; 0x3512 <f_write+0xd0>
    3510:	58 c1       	rjmp	.+688    	; 0x37c2 <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3512:	ab 81       	ldd	r26, Y+3	; 0x03
    3514:	bc 81       	ldd	r27, Y+4	; 0x04
    3516:	ed 91       	ld	r30, X+
    3518:	fc 91       	ld	r31, X
    351a:	11 97       	sbiw	r26, 0x01	; 1
    351c:	15 96       	adiw	r26, 0x05	; 5
    351e:	9c 91       	ld	r25, X
    3520:	15 97       	sbiw	r26, 0x05	; 5
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	98 17       	cp	r25, r24
    3526:	08 f4       	brcc	.+2      	; 0x352a <f_write+0xe8>
    3528:	54 c0       	rjmp	.+168    	; 0x35d2 <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    352a:	21 15       	cp	r18, r1
    352c:	31 05       	cpc	r19, r1
    352e:	41 05       	cpc	r20, r1
    3530:	51 05       	cpc	r21, r1
    3532:	c9 f4       	brne	.+50     	; 0x3566 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3534:	1e 96       	adiw	r26, 0x0e	; 14
    3536:	6d 91       	ld	r22, X+
    3538:	7d 91       	ld	r23, X+
    353a:	8d 91       	ld	r24, X+
    353c:	9c 91       	ld	r25, X
    353e:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    3540:	61 15       	cp	r22, r1
    3542:	71 05       	cpc	r23, r1
    3544:	81 05       	cpc	r24, r1
    3546:	91 05       	cpc	r25, r1
    3548:	f9 f4       	brne	.+62     	; 0x3588 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    354a:	cf 01       	movw	r24, r30
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <create_chain>
    3558:	eb 81       	ldd	r30, Y+3	; 0x03
    355a:	fc 81       	ldd	r31, Y+4	; 0x04
    355c:	66 87       	std	Z+14, r22	; 0x0e
    355e:	77 87       	std	Z+15, r23	; 0x0f
    3560:	80 8b       	std	Z+16, r24	; 0x10
    3562:	91 8b       	std	Z+17, r25	; 0x11
    3564:	0b c0       	rjmp	.+22     	; 0x357c <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    3566:	ab 81       	ldd	r26, Y+3	; 0x03
    3568:	bc 81       	ldd	r27, Y+4	; 0x04
    356a:	52 96       	adiw	r26, 0x12	; 18
    356c:	4d 91       	ld	r20, X+
    356e:	5d 91       	ld	r21, X+
    3570:	6d 91       	ld	r22, X+
    3572:	7c 91       	ld	r23, X
    3574:	55 97       	sbiw	r26, 0x15	; 21
    3576:	cf 01       	movw	r24, r30
    3578:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    357c:	61 15       	cp	r22, r1
    357e:	71 05       	cpc	r23, r1
    3580:	81 05       	cpc	r24, r1
    3582:	91 05       	cpc	r25, r1
    3584:	09 f4       	brne	.+2      	; 0x3588 <f_write+0x146>
    3586:	69 c1       	rjmp	.+722    	; 0x385a <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3588:	61 30       	cpi	r22, 0x01	; 1
    358a:	71 05       	cpc	r23, r1
    358c:	81 05       	cpc	r24, r1
    358e:	91 05       	cpc	r25, r1
    3590:	41 f4       	brne	.+16     	; 0x35a2 <f_write+0x160>
    3592:	eb 81       	ldd	r30, Y+3	; 0x03
    3594:	fc 81       	ldd	r31, Y+4	; 0x04
    3596:	84 81       	ldd	r24, Z+4	; 0x04
    3598:	80 68       	ori	r24, 0x80	; 128
    359a:	84 83       	std	Z+4, r24	; 0x04
    359c:	22 e0       	ldi	r18, 0x02	; 2
    359e:	62 2e       	mov	r6, r18
    35a0:	7d c1       	rjmp	.+762    	; 0x389c <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    35a2:	6f 3f       	cpi	r22, 0xFF	; 255
    35a4:	ff ef       	ldi	r31, 0xFF	; 255
    35a6:	7f 07       	cpc	r23, r31
    35a8:	ff ef       	ldi	r31, 0xFF	; 255
    35aa:	8f 07       	cpc	r24, r31
    35ac:	ff ef       	ldi	r31, 0xFF	; 255
    35ae:	9f 07       	cpc	r25, r31
    35b0:	49 f4       	brne	.+18     	; 0x35c4 <f_write+0x182>
    35b2:	ab 81       	ldd	r26, Y+3	; 0x03
    35b4:	bc 81       	ldd	r27, Y+4	; 0x04
    35b6:	14 96       	adiw	r26, 0x04	; 4
    35b8:	8c 91       	ld	r24, X
    35ba:	14 97       	sbiw	r26, 0x04	; 4
    35bc:	80 68       	ori	r24, 0x80	; 128
    35be:	14 96       	adiw	r26, 0x04	; 4
    35c0:	8c 93       	st	X, r24
    35c2:	ee c0       	rjmp	.+476    	; 0x37a0 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    35c4:	eb 81       	ldd	r30, Y+3	; 0x03
    35c6:	fc 81       	ldd	r31, Y+4	; 0x04
    35c8:	62 8b       	std	Z+18, r22	; 0x12
    35ca:	73 8b       	std	Z+19, r23	; 0x13
    35cc:	84 8b       	std	Z+20, r24	; 0x14
    35ce:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    35d0:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    35d2:	ab 81       	ldd	r26, Y+3	; 0x03
    35d4:	bc 81       	ldd	r27, Y+4	; 0x04
    35d6:	14 96       	adiw	r26, 0x04	; 4
    35d8:	8c 91       	ld	r24, X
    35da:	14 97       	sbiw	r26, 0x04	; 4
    35dc:	86 ff       	sbrs	r24, 6
    35de:	1b c0       	rjmp	.+54     	; 0x3616 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    35e0:	ed 91       	ld	r30, X+
    35e2:	fc 91       	ld	r31, X
    35e4:	11 97       	sbiw	r26, 0x01	; 1
    35e6:	56 96       	adiw	r26, 0x16	; 22
    35e8:	2d 91       	ld	r18, X+
    35ea:	3d 91       	ld	r19, X+
    35ec:	4d 91       	ld	r20, X+
    35ee:	5c 91       	ld	r21, X
    35f0:	59 97       	sbiw	r26, 0x19	; 25
    35f2:	81 81       	ldd	r24, Z+1	; 0x01
    35f4:	b1 01       	movw	r22, r2
    35f6:	01 e0       	ldi	r16, 0x01	; 1
    35f8:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    35fc:	eb 81       	ldd	r30, Y+3	; 0x03
    35fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3600:	94 81       	ldd	r25, Z+4	; 0x04
    3602:	88 23       	and	r24, r24
    3604:	19 f0       	breq	.+6      	; 0x360c <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3606:	90 68       	ori	r25, 0x80	; 128
    3608:	94 83       	std	Z+4, r25	; 0x04
    360a:	ca c0       	rjmp	.+404    	; 0x37a0 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    360c:	9f 7b       	andi	r25, 0xBF	; 191
    360e:	ab 81       	ldd	r26, Y+3	; 0x03
    3610:	bc 81       	ldd	r27, Y+4	; 0x04
    3612:	14 96       	adiw	r26, 0x04	; 4
    3614:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3616:	eb 81       	ldd	r30, Y+3	; 0x03
    3618:	fc 81       	ldd	r31, Y+4	; 0x04
    361a:	00 81       	ld	r16, Z
    361c:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    361e:	22 89       	ldd	r18, Z+18	; 0x12
    3620:	33 89       	ldd	r19, Z+19	; 0x13
    3622:	44 89       	ldd	r20, Z+20	; 0x14
    3624:	55 89       	ldd	r21, Z+21	; 0x15
    3626:	22 50       	subi	r18, 0x02	; 2
    3628:	30 40       	sbci	r19, 0x00	; 0
    362a:	40 40       	sbci	r20, 0x00	; 0
    362c:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    362e:	f8 01       	movw	r30, r16
    3630:	82 8d       	ldd	r24, Z+26	; 0x1a
    3632:	93 8d       	ldd	r25, Z+27	; 0x1b
    3634:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3636:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3638:	02 97       	sbiw	r24, 0x02	; 2
    363a:	a1 09       	sbc	r26, r1
    363c:	b1 09       	sbc	r27, r1
    363e:	28 17       	cp	r18, r24
    3640:	39 07       	cpc	r19, r25
    3642:	4a 07       	cpc	r20, r26
    3644:	5b 07       	cpc	r21, r27
    3646:	b8 f4       	brcc	.+46     	; 0x3676 <f_write+0x234>
	return clst * fs->csize + fs->database;
    3648:	72 80       	ldd	r7, Z+2	; 0x02
    364a:	67 2d       	mov	r22, r7
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    3656:	9b 01       	movw	r18, r22
    3658:	ac 01       	movw	r20, r24
    365a:	f8 01       	movw	r30, r16
    365c:	86 a1       	ldd	r24, Z+38	; 0x26
    365e:	97 a1       	ldd	r25, Z+39	; 0x27
    3660:	a0 a5       	ldd	r26, Z+40	; 0x28
    3662:	b1 a5       	ldd	r27, Z+41	; 0x29
    3664:	28 0f       	add	r18, r24
    3666:	39 1f       	adc	r19, r25
    3668:	4a 1f       	adc	r20, r26
    366a:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    366c:	21 15       	cp	r18, r1
    366e:	31 05       	cpc	r19, r1
    3670:	41 05       	cpc	r20, r1
    3672:	51 05       	cpc	r21, r1
    3674:	49 f4       	brne	.+18     	; 0x3688 <f_write+0x246>
    3676:	ab 81       	ldd	r26, Y+3	; 0x03
    3678:	bc 81       	ldd	r27, Y+4	; 0x04
    367a:	14 96       	adiw	r26, 0x04	; 4
    367c:	8c 91       	ld	r24, X
    367e:	14 97       	sbiw	r26, 0x04	; 4
    3680:	80 68       	ori	r24, 0x80	; 128
    3682:	14 96       	adiw	r26, 0x04	; 4
    3684:	8c 93       	st	X, r24
    3686:	8a cf       	rjmp	.-236    	; 0x359c <f_write+0x15a>
			sect += fp->csect;
    3688:	eb 81       	ldd	r30, Y+3	; 0x03
    368a:	fc 81       	ldd	r31, Y+4	; 0x04
    368c:	85 81       	ldd	r24, Z+5	; 0x05
    368e:	69 01       	movw	r12, r18
    3690:	7a 01       	movw	r14, r20
    3692:	c8 0e       	add	r12, r24
    3694:	d1 1c       	adc	r13, r1
    3696:	e1 1c       	adc	r14, r1
    3698:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    369a:	54 01       	movw	r10, r8
    369c:	ab 2c       	mov	r10, r11
    369e:	bb 24       	eor	r11, r11
    36a0:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    36a2:	a1 14       	cp	r10, r1
    36a4:	b1 04       	cpc	r11, r1
    36a6:	09 f4       	brne	.+2      	; 0x36aa <f_write+0x268>
    36a8:	53 c0       	rjmp	.+166    	; 0x3750 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    36aa:	28 2f       	mov	r18, r24
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	c5 01       	movw	r24, r10
    36b0:	82 0f       	add	r24, r18
    36b2:	93 1f       	adc	r25, r19
    36b4:	67 2d       	mov	r22, r7
    36b6:	70 e0       	ldi	r23, 0x00	; 0
    36b8:	68 17       	cp	r22, r24
    36ba:	79 07       	cpc	r23, r25
    36bc:	18 f4       	brcc	.+6      	; 0x36c4 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    36be:	5b 01       	movw	r10, r22
    36c0:	a2 1a       	sub	r10, r18
    36c2:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    36c4:	d8 01       	movw	r26, r16
    36c6:	11 96       	adiw	r26, 0x01	; 1
    36c8:	8c 91       	ld	r24, X
    36ca:	b2 01       	movw	r22, r4
    36cc:	a7 01       	movw	r20, r14
    36ce:	96 01       	movw	r18, r12
    36d0:	0a 2d       	mov	r16, r10
    36d2:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    36d6:	88 23       	and	r24, r24
    36d8:	09 f0       	breq	.+2      	; 0x36dc <f_write+0x29a>
    36da:	5d c0       	rjmp	.+186    	; 0x3796 <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    36dc:	ab 81       	ldd	r26, Y+3	; 0x03
    36de:	bc 81       	ldd	r27, Y+4	; 0x04
    36e0:	56 96       	adiw	r26, 0x16	; 22
    36e2:	2d 91       	ld	r18, X+
    36e4:	3d 91       	ld	r19, X+
    36e6:	4d 91       	ld	r20, X+
    36e8:	5c 91       	ld	r21, X
    36ea:	59 97       	sbiw	r26, 0x19	; 25
    36ec:	2c 19       	sub	r18, r12
    36ee:	3d 09       	sbc	r19, r13
    36f0:	4e 09       	sbc	r20, r14
    36f2:	5f 09       	sbc	r21, r15
    36f4:	c5 01       	movw	r24, r10
    36f6:	a0 e0       	ldi	r26, 0x00	; 0
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	28 17       	cp	r18, r24
    36fc:	39 07       	cpc	r19, r25
    36fe:	4a 07       	cpc	r20, r26
    3700:	5b 07       	cpc	r21, r27
    3702:	c8 f4       	brcc	.+50     	; 0x3736 <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3704:	19 e0       	ldi	r17, 0x09	; 9
    3706:	22 0f       	add	r18, r18
    3708:	33 1f       	adc	r19, r19
    370a:	44 1f       	adc	r20, r20
    370c:	55 1f       	adc	r21, r21
    370e:	1a 95       	dec	r17
    3710:	d1 f7       	brne	.-12     	; 0x3706 <f_write+0x2c4>
    3712:	f2 01       	movw	r30, r4
    3714:	e2 0f       	add	r30, r18
    3716:	f3 1f       	adc	r31, r19
    3718:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    371a:	9f 01       	movw	r18, r30
    371c:	20 50       	subi	r18, 0x00	; 0
    371e:	3e 4f       	sbci	r19, 0xFE	; 254
    3720:	02 c0       	rjmp	.+4      	; 0x3726 <f_write+0x2e4>
    3722:	81 91       	ld	r24, Z+
    3724:	8d 93       	st	X+, r24
    3726:	e2 17       	cp	r30, r18
    3728:	f3 07       	cpc	r31, r19
    372a:	d9 f7       	brne	.-10     	; 0x3722 <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    372c:	eb 81       	ldd	r30, Y+3	; 0x03
    372e:	fc 81       	ldd	r31, Y+4	; 0x04
    3730:	84 81       	ldd	r24, Z+4	; 0x04
    3732:	8f 7b       	andi	r24, 0xBF	; 191
    3734:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3736:	ab 81       	ldd	r26, Y+3	; 0x03
    3738:	bc 81       	ldd	r27, Y+4	; 0x04
    373a:	15 96       	adiw	r26, 0x05	; 5
    373c:	8c 91       	ld	r24, X
    373e:	15 97       	sbiw	r26, 0x05	; 5
    3740:	8a 0d       	add	r24, r10
    3742:	15 96       	adiw	r26, 0x05	; 5
    3744:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3746:	b5 01       	movw	r22, r10
    3748:	76 2f       	mov	r23, r22
    374a:	66 27       	eor	r22, r22
    374c:	77 0f       	add	r23, r23
    374e:	64 c0       	rjmp	.+200    	; 0x3818 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3750:	eb 81       	ldd	r30, Y+3	; 0x03
    3752:	fc 81       	ldd	r31, Y+4	; 0x04
    3754:	86 89       	ldd	r24, Z+22	; 0x16
    3756:	97 89       	ldd	r25, Z+23	; 0x17
    3758:	a0 8d       	ldd	r26, Z+24	; 0x18
    375a:	b1 8d       	ldd	r27, Z+25	; 0x19
    375c:	8c 15       	cp	r24, r12
    375e:	9d 05       	cpc	r25, r13
    3760:	ae 05       	cpc	r26, r14
    3762:	bf 05       	cpc	r27, r15
    3764:	01 f1       	breq	.+64     	; 0x37a6 <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    3766:	26 81       	ldd	r18, Z+6	; 0x06
    3768:	37 81       	ldd	r19, Z+7	; 0x07
    376a:	40 85       	ldd	r20, Z+8	; 0x08
    376c:	51 85       	ldd	r21, Z+9	; 0x09
    376e:	82 85       	ldd	r24, Z+10	; 0x0a
    3770:	93 85       	ldd	r25, Z+11	; 0x0b
    3772:	a4 85       	ldd	r26, Z+12	; 0x0c
    3774:	b5 85       	ldd	r27, Z+13	; 0x0d
    3776:	28 17       	cp	r18, r24
    3778:	39 07       	cpc	r19, r25
    377a:	4a 07       	cpc	r20, r26
    377c:	5b 07       	cpc	r21, r27
    377e:	98 f4       	brcc	.+38     	; 0x37a6 <f_write+0x364>
    3780:	d8 01       	movw	r26, r16
    3782:	11 96       	adiw	r26, 0x01	; 1
    3784:	8c 91       	ld	r24, X
    3786:	b1 01       	movw	r22, r2
    3788:	a7 01       	movw	r20, r14
    378a:	96 01       	movw	r18, r12
    378c:	01 e0       	ldi	r16, 0x01	; 1
    378e:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    3792:	88 23       	and	r24, r24
    3794:	41 f0       	breq	.+16     	; 0x37a6 <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    3796:	eb 81       	ldd	r30, Y+3	; 0x03
    3798:	fc 81       	ldd	r31, Y+4	; 0x04
    379a:	84 81       	ldd	r24, Z+4	; 0x04
    379c:	80 68       	ori	r24, 0x80	; 128
    379e:	84 83       	std	Z+4, r24	; 0x04
    37a0:	66 24       	eor	r6, r6
    37a2:	63 94       	inc	r6
    37a4:	7b c0       	rjmp	.+246    	; 0x389c <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    37a6:	ab 81       	ldd	r26, Y+3	; 0x03
    37a8:	bc 81       	ldd	r27, Y+4	; 0x04
    37aa:	56 96       	adiw	r26, 0x16	; 22
    37ac:	cd 92       	st	X+, r12
    37ae:	dd 92       	st	X+, r13
    37b0:	ed 92       	st	X+, r14
    37b2:	fc 92       	st	X, r15
    37b4:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    37b6:	15 96       	adiw	r26, 0x05	; 5
    37b8:	8c 91       	ld	r24, X
    37ba:	15 97       	sbiw	r26, 0x05	; 5
    37bc:	8f 5f       	subi	r24, 0xFF	; 255
    37be:	15 96       	adiw	r26, 0x05	; 5
    37c0:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    37c2:	eb 81       	ldd	r30, Y+3	; 0x03
    37c4:	fc 81       	ldd	r31, Y+4	; 0x04
    37c6:	26 81       	ldd	r18, Z+6	; 0x06
    37c8:	37 81       	ldd	r19, Z+7	; 0x07
    37ca:	40 85       	ldd	r20, Z+8	; 0x08
    37cc:	51 85       	ldd	r21, Z+9	; 0x09
    37ce:	c9 01       	movw	r24, r18
    37d0:	91 70       	andi	r25, 0x01	; 1
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	72 e0       	ldi	r23, 0x02	; 2
    37d6:	68 1b       	sub	r22, r24
    37d8:	79 0b       	sbc	r23, r25
    37da:	cb 01       	movw	r24, r22
    37dc:	b4 01       	movw	r22, r8
    37de:	88 15       	cp	r24, r8
    37e0:	99 05       	cpc	r25, r9
    37e2:	08 f4       	brcc	.+2      	; 0x37e6 <f_write+0x3a4>
    37e4:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    37e6:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    37e8:	f9 01       	movw	r30, r18
    37ea:	f1 70       	andi	r31, 0x01	; 1
    37ec:	b0 96       	adiw	r30, 0x20	; 32
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	9c 81       	ldd	r25, Y+4	; 0x04
    37f2:	e8 0f       	add	r30, r24
    37f4:	f9 1f       	adc	r31, r25
    37f6:	92 01       	movw	r18, r4
    37f8:	04 c0       	rjmp	.+8      	; 0x3802 <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    37fa:	d9 01       	movw	r26, r18
    37fc:	8d 91       	ld	r24, X+
    37fe:	9d 01       	movw	r18, r26
    3800:	81 93       	st	Z+, r24
    3802:	01 50       	subi	r16, 0x01	; 1
    3804:	10 40       	sbci	r17, 0x00	; 0
    3806:	bf ef       	ldi	r27, 0xFF	; 255
    3808:	0f 3f       	cpi	r16, 0xFF	; 255
    380a:	1b 07       	cpc	r17, r27
    380c:	b1 f7       	brne	.-20     	; 0x37fa <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    380e:	eb 81       	ldd	r30, Y+3	; 0x03
    3810:	fc 81       	ldd	r31, Y+4	; 0x04
    3812:	84 81       	ldd	r24, Z+4	; 0x04
    3814:	80 64       	ori	r24, 0x40	; 64
    3816:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3818:	46 0e       	add	r4, r22
    381a:	57 1e       	adc	r5, r23
    381c:	cb 01       	movw	r24, r22
    381e:	a0 e0       	ldi	r26, 0x00	; 0
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	eb 81       	ldd	r30, Y+3	; 0x03
    3824:	fc 81       	ldd	r31, Y+4	; 0x04
    3826:	26 81       	ldd	r18, Z+6	; 0x06
    3828:	37 81       	ldd	r19, Z+7	; 0x07
    382a:	40 85       	ldd	r20, Z+8	; 0x08
    382c:	51 85       	ldd	r21, Z+9	; 0x09
    382e:	28 0f       	add	r18, r24
    3830:	39 1f       	adc	r19, r25
    3832:	4a 1f       	adc	r20, r26
    3834:	5b 1f       	adc	r21, r27
    3836:	26 83       	std	Z+6, r18	; 0x06
    3838:	37 83       	std	Z+7, r19	; 0x07
    383a:	40 87       	std	Z+8, r20	; 0x08
    383c:	51 87       	std	Z+9, r21	; 0x09
    383e:	e9 81       	ldd	r30, Y+1	; 0x01
    3840:	fa 81       	ldd	r31, Y+2	; 0x02
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	86 0f       	add	r24, r22
    3848:	97 1f       	adc	r25, r23
    384a:	80 83       	st	Z, r24
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	86 1a       	sub	r8, r22
    3850:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    3852:	81 14       	cp	r8, r1
    3854:	91 04       	cpc	r9, r1
    3856:	09 f0       	breq	.+2      	; 0x385a <f_write+0x418>
    3858:	4a ce       	rjmp	.-876    	; 0x34ee <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    385a:	ab 81       	ldd	r26, Y+3	; 0x03
    385c:	bc 81       	ldd	r27, Y+4	; 0x04
    385e:	16 96       	adiw	r26, 0x06	; 6
    3860:	2d 91       	ld	r18, X+
    3862:	3d 91       	ld	r19, X+
    3864:	4d 91       	ld	r20, X+
    3866:	5c 91       	ld	r21, X
    3868:	19 97       	sbiw	r26, 0x09	; 9
    386a:	1a 96       	adiw	r26, 0x0a	; 10
    386c:	8d 91       	ld	r24, X+
    386e:	9d 91       	ld	r25, X+
    3870:	0d 90       	ld	r0, X+
    3872:	bc 91       	ld	r27, X
    3874:	a0 2d       	mov	r26, r0
    3876:	82 17       	cp	r24, r18
    3878:	93 07       	cpc	r25, r19
    387a:	a4 07       	cpc	r26, r20
    387c:	b5 07       	cpc	r27, r21
    387e:	30 f4       	brcc	.+12     	; 0x388c <f_write+0x44a>
    3880:	eb 81       	ldd	r30, Y+3	; 0x03
    3882:	fc 81       	ldd	r31, Y+4	; 0x04
    3884:	22 87       	std	Z+10, r18	; 0x0a
    3886:	33 87       	std	Z+11, r19	; 0x0b
    3888:	44 87       	std	Z+12, r20	; 0x0c
    388a:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    388c:	ab 81       	ldd	r26, Y+3	; 0x03
    388e:	bc 81       	ldd	r27, Y+4	; 0x04
    3890:	14 96       	adiw	r26, 0x04	; 4
    3892:	8c 91       	ld	r24, X
    3894:	14 97       	sbiw	r26, 0x04	; 4
    3896:	80 62       	ori	r24, 0x20	; 32
    3898:	14 96       	adiw	r26, 0x04	; 4
    389a:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    389c:	86 2d       	mov	r24, r6
    389e:	24 96       	adiw	r28, 0x04	; 4
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	1f 91       	pop	r17
    38aa:	0f 91       	pop	r16
    38ac:	ff 90       	pop	r15
    38ae:	ef 90       	pop	r14
    38b0:	df 90       	pop	r13
    38b2:	cf 90       	pop	r12
    38b4:	bf 90       	pop	r11
    38b6:	af 90       	pop	r10
    38b8:	9f 90       	pop	r9
    38ba:	8f 90       	pop	r8
    38bc:	7f 90       	pop	r7
    38be:	6f 90       	pop	r6
    38c0:	5f 90       	pop	r5
    38c2:	4f 90       	pop	r4
    38c4:	3f 90       	pop	r3
    38c6:	2f 90       	pop	r2
    38c8:	08 95       	ret

000038ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    38ca:	0f 93       	push	r16
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    38d2:	6a 81       	ldd	r22, Y+2	; 0x02
    38d4:	7b 81       	ldd	r23, Y+3	; 0x03
    38d6:	88 81       	ld	r24, Y
    38d8:	99 81       	ldd	r25, Y+1	; 0x01
    38da:	0e 94 80 16 	call	0x2d00	; 0x2d00 <validate>
    38de:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    38e0:	88 23       	and	r24, r24
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <f_sync+0x1c>
    38e4:	65 c0       	rjmp	.+202    	; 0x39b0 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    38e6:	8c 81       	ldd	r24, Y+4	; 0x04
    38e8:	85 ff       	sbrs	r24, 5
    38ea:	62 c0       	rjmp	.+196    	; 0x39b0 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    38ec:	86 ff       	sbrs	r24, 6
    38ee:	14 c0       	rjmp	.+40     	; 0x3918 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    38f0:	e8 81       	ld	r30, Y
    38f2:	f9 81       	ldd	r31, Y+1	; 0x01
    38f4:	be 01       	movw	r22, r28
    38f6:	60 5e       	subi	r22, 0xE0	; 224
    38f8:	7f 4f       	sbci	r23, 0xFF	; 255
    38fa:	2e 89       	ldd	r18, Y+22	; 0x16
    38fc:	3f 89       	ldd	r19, Y+23	; 0x17
    38fe:	48 8d       	ldd	r20, Y+24	; 0x18
    3900:	59 8d       	ldd	r21, Y+25	; 0x19
    3902:	81 81       	ldd	r24, Z+1	; 0x01
    3904:	01 e0       	ldi	r16, 0x01	; 1
    3906:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    390a:	88 23       	and	r24, r24
    390c:	11 f0       	breq	.+4      	; 0x3912 <f_sync+0x48>
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	4f c0       	rjmp	.+158    	; 0x39b0 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3912:	8c 81       	ldd	r24, Y+4	; 0x04
    3914:	8f 7b       	andi	r24, 0xBF	; 191
    3916:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3918:	4a 8d       	ldd	r20, Y+26	; 0x1a
    391a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    391c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    391e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3920:	88 81       	ld	r24, Y
    3922:	99 81       	ldd	r25, Y+1	; 0x01
    3924:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    3928:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    392a:	88 23       	and	r24, r24
    392c:	09 f0       	breq	.+2      	; 0x3930 <f_sync+0x66>
    392e:	40 c0       	rjmp	.+128    	; 0x39b0 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3930:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3932:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3934:	83 85       	ldd	r24, Z+11	; 0x0b
    3936:	80 62       	ori	r24, 0x20	; 32
    3938:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    393a:	8a 85       	ldd	r24, Y+10	; 0x0a
    393c:	84 8f       	std	Z+28, r24	; 0x1c
    393e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3940:	85 8f       	std	Z+29, r24	; 0x1d
    3942:	8a 85       	ldd	r24, Y+10	; 0x0a
    3944:	9b 85       	ldd	r25, Y+11	; 0x0b
    3946:	ac 85       	ldd	r26, Y+12	; 0x0c
    3948:	bd 85       	ldd	r27, Y+13	; 0x0d
    394a:	cd 01       	movw	r24, r26
    394c:	aa 27       	eor	r26, r26
    394e:	bb 27       	eor	r27, r27
    3950:	86 8f       	std	Z+30, r24	; 0x1e
    3952:	8a 85       	ldd	r24, Y+10	; 0x0a
    3954:	9b 85       	ldd	r25, Y+11	; 0x0b
    3956:	ac 85       	ldd	r26, Y+12	; 0x0c
    3958:	bd 85       	ldd	r27, Y+13	; 0x0d
    395a:	8b 2f       	mov	r24, r27
    395c:	99 27       	eor	r25, r25
    395e:	aa 27       	eor	r26, r26
    3960:	bb 27       	eor	r27, r27
    3962:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    3964:	8e 85       	ldd	r24, Y+14	; 0x0e
    3966:	82 8f       	std	Z+26, r24	; 0x1a
    3968:	8f 85       	ldd	r24, Y+15	; 0x0f
    396a:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    396c:	8e 85       	ldd	r24, Y+14	; 0x0e
    396e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3970:	a8 89       	ldd	r26, Y+16	; 0x10
    3972:	b9 89       	ldd	r27, Y+17	; 0x11
    3974:	cd 01       	movw	r24, r26
    3976:	aa 27       	eor	r26, r26
    3978:	bb 27       	eor	r27, r27
    397a:	84 8b       	std	Z+20, r24	; 0x14
    397c:	8e 85       	ldd	r24, Y+14	; 0x0e
    397e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3980:	a8 89       	ldd	r26, Y+16	; 0x10
    3982:	b9 89       	ldd	r27, Y+17	; 0x11
    3984:	cd 01       	movw	r24, r26
    3986:	aa 27       	eor	r26, r26
    3988:	bb 27       	eor	r27, r27
    398a:	89 2f       	mov	r24, r25
    398c:	99 27       	eor	r25, r25
    398e:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    3990:	16 8a       	std	Z+22, r1	; 0x16
    3992:	17 8a       	std	Z+23, r1	; 0x17
    3994:	10 8e       	std	Z+24, r1	; 0x18
    3996:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    3998:	8c 81       	ldd	r24, Y+4	; 0x04
    399a:	8f 7d       	andi	r24, 0xDF	; 223
    399c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    399e:	e8 81       	ld	r30, Y
    39a0:	f9 81       	ldd	r31, Y+1	; 0x01
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    39a6:	88 81       	ld	r24, Y
    39a8:	99 81       	ldd	r25, Y+1	; 0x01
    39aa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <sync>
    39ae:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    39b0:	89 2f       	mov	r24, r25
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	0f 91       	pop	r16
    39b8:	08 95       	ret

000039ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    39c0:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    39c4:	88 23       	and	r24, r24
    39c6:	11 f4       	brne	.+4      	; 0x39cc <f_close+0x12>
    39c8:	18 82       	st	Y, r1
    39ca:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	08 95       	ret

000039d2 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    39d2:	2f 92       	push	r2
    39d4:	3f 92       	push	r3
    39d6:	4f 92       	push	r4
    39d8:	5f 92       	push	r5
    39da:	6f 92       	push	r6
    39dc:	7f 92       	push	r7
    39de:	8f 92       	push	r8
    39e0:	9f 92       	push	r9
    39e2:	af 92       	push	r10
    39e4:	bf 92       	push	r11
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	0f 93       	push	r16
    39ec:	1f 93       	push	r17
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	28 97       	sbiw	r28, 0x08	; 8
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	8f 83       	std	Y+7, r24	; 0x07
    39fe:	98 87       	std	Y+8, r25	; 0x08
    3a00:	3a 01       	movw	r6, r20
    3a02:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3a04:	dc 01       	movw	r26, r24
    3a06:	12 96       	adiw	r26, 0x02	; 2
    3a08:	6d 91       	ld	r22, X+
    3a0a:	7c 91       	ld	r23, X
    3a0c:	13 97       	sbiw	r26, 0x03	; 3
    3a0e:	8d 91       	ld	r24, X+
    3a10:	9c 91       	ld	r25, X
    3a12:	0e 94 80 16 	call	0x2d00	; 0x2d00 <validate>
    3a16:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3a18:	88 23       	and	r24, r24
    3a1a:	09 f0       	breq	.+2      	; 0x3a1e <f_lseek+0x4c>
    3a1c:	f3 c1       	rjmp	.+998    	; 0x3e04 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3a1e:	ef 81       	ldd	r30, Y+7	; 0x07
    3a20:	f8 85       	ldd	r31, Y+8	; 0x08
    3a22:	84 81       	ldd	r24, Z+4	; 0x04
    3a24:	87 fd       	sbrc	r24, 7
    3a26:	98 c0       	rjmp	.+304    	; 0x3b58 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3a28:	af 81       	ldd	r26, Y+7	; 0x07
    3a2a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a2c:	1a 96       	adiw	r26, 0x0a	; 10
    3a2e:	ad 90       	ld	r10, X+
    3a30:	bd 90       	ld	r11, X+
    3a32:	cd 90       	ld	r12, X+
    3a34:	dc 90       	ld	r13, X
    3a36:	1d 97       	sbiw	r26, 0x0d	; 13
    3a38:	a6 14       	cp	r10, r6
    3a3a:	b7 04       	cpc	r11, r7
    3a3c:	c8 04       	cpc	r12, r8
    3a3e:	d9 04       	cpc	r13, r9
    3a40:	10 f4       	brcc	.+4      	; 0x3a46 <f_lseek+0x74>
    3a42:	81 ff       	sbrs	r24, 1
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <f_lseek+0x78>
    3a46:	64 01       	movw	r12, r8
    3a48:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3a4a:	ef 81       	ldd	r30, Y+7	; 0x07
    3a4c:	f8 85       	ldd	r31, Y+8	; 0x08
    3a4e:	26 81       	ldd	r18, Z+6	; 0x06
    3a50:	37 81       	ldd	r19, Z+7	; 0x07
    3a52:	40 85       	ldd	r20, Z+8	; 0x08
    3a54:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3a56:	16 82       	std	Z+6, r1	; 0x06
    3a58:	17 82       	std	Z+7, r1	; 0x07
    3a5a:	10 86       	std	Z+8, r1	; 0x08
    3a5c:	11 86       	std	Z+9, r1	; 0x09
    3a5e:	8f ef       	ldi	r24, 0xFF	; 255
    3a60:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3a62:	a1 14       	cp	r10, r1
    3a64:	b1 04       	cpc	r11, r1
    3a66:	c1 04       	cpc	r12, r1
    3a68:	d1 04       	cpc	r13, r1
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <f_lseek+0x9c>
    3a6c:	5f c1       	rjmp	.+702    	; 0x3d2c <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3a6e:	01 90       	ld	r0, Z+
    3a70:	f0 81       	ld	r31, Z
    3a72:	e0 2d       	mov	r30, r0
    3a74:	e9 83       	std	Y+1, r30	; 0x01
    3a76:	fa 83       	std	Y+2, r31	; 0x02
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	68 2e       	mov	r6, r24
    3a7c:	77 24       	eor	r7, r7
    3a7e:	88 24       	eor	r8, r8
    3a80:	99 24       	eor	r9, r9
    3a82:	89 e0       	ldi	r24, 0x09	; 9
    3a84:	66 0c       	add	r6, r6
    3a86:	77 1c       	adc	r7, r7
    3a88:	88 1c       	adc	r8, r8
    3a8a:	99 1c       	adc	r9, r9
    3a8c:	8a 95       	dec	r24
    3a8e:	d1 f7       	brne	.-12     	; 0x3a84 <f_lseek+0xb2>
		if (ifptr > 0 &&
    3a90:	21 15       	cp	r18, r1
    3a92:	31 05       	cpc	r19, r1
    3a94:	41 05       	cpc	r20, r1
    3a96:	51 05       	cpc	r21, r1
    3a98:	f1 f1       	breq	.+124    	; 0x3b16 <f_lseek+0x144>
    3a9a:	19 01       	movw	r2, r18
    3a9c:	2a 01       	movw	r4, r20
    3a9e:	08 94       	sec
    3aa0:	21 08       	sbc	r2, r1
    3aa2:	31 08       	sbc	r3, r1
    3aa4:	41 08       	sbc	r4, r1
    3aa6:	51 08       	sbc	r5, r1
    3aa8:	c6 01       	movw	r24, r12
    3aaa:	b5 01       	movw	r22, r10
    3aac:	61 50       	subi	r22, 0x01	; 1
    3aae:	70 40       	sbci	r23, 0x00	; 0
    3ab0:	80 40       	sbci	r24, 0x00	; 0
    3ab2:	90 40       	sbci	r25, 0x00	; 0
    3ab4:	a4 01       	movw	r20, r8
    3ab6:	93 01       	movw	r18, r6
    3ab8:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    3abc:	2b 83       	std	Y+3, r18	; 0x03
    3abe:	3c 83       	std	Y+4, r19	; 0x04
    3ac0:	4d 83       	std	Y+5, r20	; 0x05
    3ac2:	5e 83       	std	Y+6, r21	; 0x06
    3ac4:	c2 01       	movw	r24, r4
    3ac6:	b1 01       	movw	r22, r2
    3ac8:	a4 01       	movw	r20, r8
    3aca:	93 01       	movw	r18, r6
    3acc:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad4:	ad 81       	ldd	r26, Y+5	; 0x05
    3ad6:	be 81       	ldd	r27, Y+6	; 0x06
    3ad8:	82 17       	cp	r24, r18
    3ada:	93 07       	cpc	r25, r19
    3adc:	a4 07       	cpc	r26, r20
    3ade:	b5 07       	cpc	r27, r21
    3ae0:	d0 f0       	brcs	.+52     	; 0x3b16 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3ae2:	88 27       	eor	r24, r24
    3ae4:	99 27       	eor	r25, r25
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	86 19       	sub	r24, r6
    3aea:	97 09       	sbc	r25, r7
    3aec:	a8 09       	sbc	r26, r8
    3aee:	b9 09       	sbc	r27, r9
    3af0:	82 21       	and	r24, r2
    3af2:	93 21       	and	r25, r3
    3af4:	a4 21       	and	r26, r4
    3af6:	b5 21       	and	r27, r5
    3af8:	ef 81       	ldd	r30, Y+7	; 0x07
    3afa:	f8 85       	ldd	r31, Y+8	; 0x08
    3afc:	86 83       	std	Z+6, r24	; 0x06
    3afe:	97 83       	std	Z+7, r25	; 0x07
    3b00:	a0 87       	std	Z+8, r26	; 0x08
    3b02:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3b04:	a8 1a       	sub	r10, r24
    3b06:	b9 0a       	sbc	r11, r25
    3b08:	ca 0a       	sbc	r12, r26
    3b0a:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3b0c:	42 89       	ldd	r20, Z+18	; 0x12
    3b0e:	53 89       	ldd	r21, Z+19	; 0x13
    3b10:	64 89       	ldd	r22, Z+20	; 0x14
    3b12:	75 89       	ldd	r23, Z+21	; 0x15
    3b14:	39 c0       	rjmp	.+114    	; 0x3b88 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3b16:	af 81       	ldd	r26, Y+7	; 0x07
    3b18:	b8 85       	ldd	r27, Y+8	; 0x08
    3b1a:	1e 96       	adiw	r26, 0x0e	; 14
    3b1c:	4d 91       	ld	r20, X+
    3b1e:	5d 91       	ld	r21, X+
    3b20:	6d 91       	ld	r22, X+
    3b22:	7c 91       	ld	r23, X
    3b24:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3b26:	41 15       	cp	r20, r1
    3b28:	51 05       	cpc	r21, r1
    3b2a:	61 05       	cpc	r22, r1
    3b2c:	71 05       	cpc	r23, r1
    3b2e:	21 f5       	brne	.+72     	; 0x3b78 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	9a 81       	ldd	r25, Y+2	; 0x02
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	60 e0       	ldi	r22, 0x00	; 0
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <create_chain>
    3b40:	ab 01       	movw	r20, r22
    3b42:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3b44:	41 30       	cpi	r20, 0x01	; 1
    3b46:	51 05       	cpc	r21, r1
    3b48:	61 05       	cpc	r22, r1
    3b4a:	71 05       	cpc	r23, r1
    3b4c:	39 f4       	brne	.+14     	; 0x3b5c <f_lseek+0x18a>
    3b4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3b50:	f8 85       	ldd	r31, Y+8	; 0x08
    3b52:	84 81       	ldd	r24, Z+4	; 0x04
    3b54:	80 68       	ori	r24, 0x80	; 128
    3b56:	84 83       	std	Z+4, r24	; 0x04
    3b58:	12 e0       	ldi	r17, 0x02	; 2
    3b5a:	54 c1       	rjmp	.+680    	; 0x3e04 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b5c:	4f 3f       	cpi	r20, 0xFF	; 255
    3b5e:	ff ef       	ldi	r31, 0xFF	; 255
    3b60:	5f 07       	cpc	r21, r31
    3b62:	ff ef       	ldi	r31, 0xFF	; 255
    3b64:	6f 07       	cpc	r22, r31
    3b66:	ff ef       	ldi	r31, 0xFF	; 255
    3b68:	7f 07       	cpc	r23, r31
    3b6a:	b1 f1       	breq	.+108    	; 0x3bd8 <f_lseek+0x206>
				fp->org_clust = clst;
    3b6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3b6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3b70:	46 87       	std	Z+14, r20	; 0x0e
    3b72:	57 87       	std	Z+15, r21	; 0x0f
    3b74:	60 8b       	std	Z+16, r22	; 0x10
    3b76:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3b78:	af 81       	ldd	r26, Y+7	; 0x07
    3b7a:	b8 85       	ldd	r27, Y+8	; 0x08
    3b7c:	52 96       	adiw	r26, 0x12	; 18
    3b7e:	4d 93       	st	X+, r20
    3b80:	5d 93       	st	X+, r21
    3b82:	6d 93       	st	X+, r22
    3b84:	7c 93       	st	X, r23
    3b86:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3b88:	41 15       	cp	r20, r1
    3b8a:	51 05       	cpc	r21, r1
    3b8c:	61 05       	cpc	r22, r1
    3b8e:	71 05       	cpc	r23, r1
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <f_lseek+0x1c2>
    3b92:	58 c0       	rjmp	.+176    	; 0x3c44 <f_lseek+0x272>
    3b94:	cb c0       	rjmp	.+406    	; 0x3d2c <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3b96:	ef 81       	ldd	r30, Y+7	; 0x07
    3b98:	f8 85       	ldd	r31, Y+8	; 0x08
    3b9a:	84 81       	ldd	r24, Z+4	; 0x04
    3b9c:	20 81       	ld	r18, Z
    3b9e:	31 81       	ldd	r19, Z+1	; 0x01
    3ba0:	81 ff       	sbrs	r24, 1
    3ba2:	0d c0       	rjmp	.+26     	; 0x3bbe <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3ba4:	c9 01       	movw	r24, r18
    3ba6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <create_chain>
    3baa:	ab 01       	movw	r20, r22
    3bac:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3bae:	41 15       	cp	r20, r1
    3bb0:	51 05       	cpc	r21, r1
    3bb2:	61 05       	cpc	r22, r1
    3bb4:	71 05       	cpc	r23, r1
    3bb6:	41 f4       	brne	.+16     	; 0x3bc8 <f_lseek+0x1f6>
    3bb8:	64 01       	movw	r12, r8
    3bba:	53 01       	movw	r10, r6
    3bbc:	49 c0       	rjmp	.+146    	; 0x3c50 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3bbe:	c9 01       	movw	r24, r18
    3bc0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    3bc4:	ab 01       	movw	r20, r22
    3bc6:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bc8:	4f 3f       	cpi	r20, 0xFF	; 255
    3bca:	ff ef       	ldi	r31, 0xFF	; 255
    3bcc:	5f 07       	cpc	r21, r31
    3bce:	ff ef       	ldi	r31, 0xFF	; 255
    3bd0:	6f 07       	cpc	r22, r31
    3bd2:	ff ef       	ldi	r31, 0xFF	; 255
    3bd4:	7f 07       	cpc	r23, r31
    3bd6:	49 f4       	brne	.+18     	; 0x3bea <f_lseek+0x218>
    3bd8:	af 81       	ldd	r26, Y+7	; 0x07
    3bda:	b8 85       	ldd	r27, Y+8	; 0x08
    3bdc:	14 96       	adiw	r26, 0x04	; 4
    3bde:	8c 91       	ld	r24, X
    3be0:	14 97       	sbiw	r26, 0x04	; 4
    3be2:	80 68       	ori	r24, 0x80	; 128
    3be4:	14 96       	adiw	r26, 0x04	; 4
    3be6:	8c 93       	st	X, r24
    3be8:	ed c0       	rjmp	.+474    	; 0x3dc4 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3bea:	42 30       	cpi	r20, 0x02	; 2
    3bec:	51 05       	cpc	r21, r1
    3bee:	61 05       	cpc	r22, r1
    3bf0:	71 05       	cpc	r23, r1
    3bf2:	08 f4       	brcc	.+2      	; 0x3bf6 <f_lseek+0x224>
    3bf4:	ac cf       	rjmp	.-168    	; 0x3b4e <f_lseek+0x17c>
    3bf6:	af 81       	ldd	r26, Y+7	; 0x07
    3bf8:	b8 85       	ldd	r27, Y+8	; 0x08
    3bfa:	ed 91       	ld	r30, X+
    3bfc:	fc 91       	ld	r31, X
    3bfe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c00:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c02:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c04:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c06:	48 17       	cp	r20, r24
    3c08:	59 07       	cpc	r21, r25
    3c0a:	6a 07       	cpc	r22, r26
    3c0c:	7b 07       	cpc	r23, r27
    3c0e:	08 f0       	brcs	.+2      	; 0x3c12 <f_lseek+0x240>
    3c10:	9e cf       	rjmp	.-196    	; 0x3b4e <f_lseek+0x17c>
				fp->curr_clust = clst;
    3c12:	af 81       	ldd	r26, Y+7	; 0x07
    3c14:	b8 85       	ldd	r27, Y+8	; 0x08
    3c16:	52 96       	adiw	r26, 0x12	; 18
    3c18:	4d 93       	st	X+, r20
    3c1a:	5d 93       	st	X+, r21
    3c1c:	6d 93       	st	X+, r22
    3c1e:	7c 93       	st	X, r23
    3c20:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3c22:	fd 01       	movw	r30, r26
    3c24:	86 81       	ldd	r24, Z+6	; 0x06
    3c26:	97 81       	ldd	r25, Z+7	; 0x07
    3c28:	a0 85       	ldd	r26, Z+8	; 0x08
    3c2a:	b1 85       	ldd	r27, Z+9	; 0x09
    3c2c:	86 0d       	add	r24, r6
    3c2e:	97 1d       	adc	r25, r7
    3c30:	a8 1d       	adc	r26, r8
    3c32:	b9 1d       	adc	r27, r9
    3c34:	86 83       	std	Z+6, r24	; 0x06
    3c36:	97 83       	std	Z+7, r25	; 0x07
    3c38:	a0 87       	std	Z+8, r26	; 0x08
    3c3a:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3c3c:	a6 18       	sub	r10, r6
    3c3e:	b7 08       	sbc	r11, r7
    3c40:	c8 08       	sbc	r12, r8
    3c42:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3c44:	6a 14       	cp	r6, r10
    3c46:	7b 04       	cpc	r7, r11
    3c48:	8c 04       	cpc	r8, r12
    3c4a:	9d 04       	cpc	r9, r13
    3c4c:	08 f4       	brcc	.+2      	; 0x3c50 <f_lseek+0x27e>
    3c4e:	a3 cf       	rjmp	.-186    	; 0x3b96 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3c50:	ef 81       	ldd	r30, Y+7	; 0x07
    3c52:	f8 85       	ldd	r31, Y+8	; 0x08
    3c54:	86 81       	ldd	r24, Z+6	; 0x06
    3c56:	97 81       	ldd	r25, Z+7	; 0x07
    3c58:	a0 85       	ldd	r26, Z+8	; 0x08
    3c5a:	b1 85       	ldd	r27, Z+9	; 0x09
    3c5c:	8a 0d       	add	r24, r10
    3c5e:	9b 1d       	adc	r25, r11
    3c60:	ac 1d       	adc	r26, r12
    3c62:	bd 1d       	adc	r27, r13
    3c64:	86 83       	std	Z+6, r24	; 0x06
    3c66:	97 83       	std	Z+7, r25	; 0x07
    3c68:	a0 87       	std	Z+8, r26	; 0x08
    3c6a:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3c6c:	d6 01       	movw	r26, r12
    3c6e:	c5 01       	movw	r24, r10
    3c70:	09 e0       	ldi	r16, 0x09	; 9
    3c72:	b6 95       	lsr	r27
    3c74:	a7 95       	ror	r26
    3c76:	97 95       	ror	r25
    3c78:	87 95       	ror	r24
    3c7a:	0a 95       	dec	r16
    3c7c:	d1 f7       	brne	.-12     	; 0x3c72 <f_lseek+0x2a0>
    3c7e:	08 2f       	mov	r16, r24
    3c80:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3c82:	8f ef       	ldi	r24, 0xFF	; 255
    3c84:	91 e0       	ldi	r25, 0x01	; 1
    3c86:	a0 e0       	ldi	r26, 0x00	; 0
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	a8 22       	and	r10, r24
    3c8c:	b9 22       	and	r11, r25
    3c8e:	ca 22       	and	r12, r26
    3c90:	db 22       	and	r13, r27
    3c92:	a1 14       	cp	r10, r1
    3c94:	b1 04       	cpc	r11, r1
    3c96:	c1 04       	cpc	r12, r1
    3c98:	d1 04       	cpc	r13, r1
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <f_lseek+0x2cc>
    3c9c:	47 c0       	rjmp	.+142    	; 0x3d2c <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3c9e:	80 80       	ld	r8, Z
    3ca0:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3ca2:	3e ef       	ldi	r19, 0xFE	; 254
    3ca4:	a3 2e       	mov	r10, r19
    3ca6:	3f ef       	ldi	r19, 0xFF	; 255
    3ca8:	b3 2e       	mov	r11, r19
    3caa:	3f ef       	ldi	r19, 0xFF	; 255
    3cac:	c3 2e       	mov	r12, r19
    3cae:	3f ef       	ldi	r19, 0xFF	; 255
    3cb0:	d3 2e       	mov	r13, r19
    3cb2:	a4 0e       	add	r10, r20
    3cb4:	b5 1e       	adc	r11, r21
    3cb6:	c6 1e       	adc	r12, r22
    3cb8:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3cba:	f4 01       	movw	r30, r8
    3cbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cbe:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cc0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3cc2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3cc4:	02 97       	sbiw	r24, 0x02	; 2
    3cc6:	a1 09       	sbc	r26, r1
    3cc8:	b1 09       	sbc	r27, r1
    3cca:	a8 16       	cp	r10, r24
    3ccc:	b9 06       	cpc	r11, r25
    3cce:	ca 06       	cpc	r12, r26
    3cd0:	db 06       	cpc	r13, r27
    3cd2:	c0 f4       	brcc	.+48     	; 0x3d04 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3cd4:	22 81       	ldd	r18, Z+2	; 0x02
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	c6 01       	movw	r24, r12
    3cde:	b5 01       	movw	r22, r10
    3ce0:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    3ce4:	9b 01       	movw	r18, r22
    3ce6:	ac 01       	movw	r20, r24
    3ce8:	f4 01       	movw	r30, r8
    3cea:	86 a1       	ldd	r24, Z+38	; 0x26
    3cec:	97 a1       	ldd	r25, Z+39	; 0x27
    3cee:	a0 a5       	ldd	r26, Z+40	; 0x28
    3cf0:	b1 a5       	ldd	r27, Z+41	; 0x29
    3cf2:	28 0f       	add	r18, r24
    3cf4:	39 1f       	adc	r19, r25
    3cf6:	4a 1f       	adc	r20, r26
    3cf8:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3cfa:	21 15       	cp	r18, r1
    3cfc:	31 05       	cpc	r19, r1
    3cfe:	41 05       	cpc	r20, r1
    3d00:	51 05       	cpc	r21, r1
    3d02:	49 f4       	brne	.+18     	; 0x3d16 <f_lseek+0x344>
    3d04:	af 81       	ldd	r26, Y+7	; 0x07
    3d06:	b8 85       	ldd	r27, Y+8	; 0x08
    3d08:	14 96       	adiw	r26, 0x04	; 4
    3d0a:	8c 91       	ld	r24, X
    3d0c:	14 97       	sbiw	r26, 0x04	; 4
    3d0e:	80 68       	ori	r24, 0x80	; 128
    3d10:	14 96       	adiw	r26, 0x04	; 4
    3d12:	8c 93       	st	X, r24
    3d14:	21 cf       	rjmp	.-446    	; 0x3b58 <f_lseek+0x186>
				nsect += fp->csect;
    3d16:	59 01       	movw	r10, r18
    3d18:	6a 01       	movw	r12, r20
    3d1a:	a0 0e       	add	r10, r16
    3d1c:	b1 1c       	adc	r11, r1
    3d1e:	c1 1c       	adc	r12, r1
    3d20:	d1 1c       	adc	r13, r1
				fp->csect++;
    3d22:	0f 5f       	subi	r16, 0xFF	; 255
    3d24:	ef 81       	ldd	r30, Y+7	; 0x07
    3d26:	f8 85       	ldd	r31, Y+8	; 0x08
    3d28:	05 83       	std	Z+5, r16	; 0x05
    3d2a:	03 c0       	rjmp	.+6      	; 0x3d32 <f_lseek+0x360>
    3d2c:	aa 24       	eor	r10, r10
    3d2e:	bb 24       	eor	r11, r11
    3d30:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3d32:	ef 81       	ldd	r30, Y+7	; 0x07
    3d34:	f8 85       	ldd	r31, Y+8	; 0x08
    3d36:	86 81       	ldd	r24, Z+6	; 0x06
    3d38:	97 81       	ldd	r25, Z+7	; 0x07
    3d3a:	a0 85       	ldd	r26, Z+8	; 0x08
    3d3c:	b1 85       	ldd	r27, Z+9	; 0x09
    3d3e:	91 70       	andi	r25, 0x01	; 1
    3d40:	a0 70       	andi	r26, 0x00	; 0
    3d42:	b0 70       	andi	r27, 0x00	; 0
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	a1 05       	cpc	r26, r1
    3d48:	b1 05       	cpc	r27, r1
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <f_lseek+0x37c>
    3d4c:	45 c0       	rjmp	.+138    	; 0x3dd8 <f_lseek+0x406>
    3d4e:	26 89       	ldd	r18, Z+22	; 0x16
    3d50:	37 89       	ldd	r19, Z+23	; 0x17
    3d52:	40 8d       	ldd	r20, Z+24	; 0x18
    3d54:	51 8d       	ldd	r21, Z+25	; 0x19
    3d56:	a2 16       	cp	r10, r18
    3d58:	b3 06       	cpc	r11, r19
    3d5a:	c4 06       	cpc	r12, r20
    3d5c:	d5 06       	cpc	r13, r21
    3d5e:	e1 f1       	breq	.+120    	; 0x3dd8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3d60:	84 81       	ldd	r24, Z+4	; 0x04
    3d62:	86 ff       	sbrs	r24, 6
    3d64:	1a c0       	rjmp	.+52     	; 0x3d9a <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3d66:	01 90       	ld	r0, Z+
    3d68:	f0 81       	ld	r31, Z
    3d6a:	e0 2d       	mov	r30, r0
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	60 5e       	subi	r22, 0xE0	; 224
    3d72:	7f 4f       	sbci	r23, 0xFF	; 255
    3d74:	81 81       	ldd	r24, Z+1	; 0x01
    3d76:	01 e0       	ldi	r16, 0x01	; 1
    3d78:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    3d7c:	af 81       	ldd	r26, Y+7	; 0x07
    3d7e:	b8 85       	ldd	r27, Y+8	; 0x08
    3d80:	14 96       	adiw	r26, 0x04	; 4
    3d82:	9c 91       	ld	r25, X
    3d84:	14 97       	sbiw	r26, 0x04	; 4
    3d86:	88 23       	and	r24, r24
    3d88:	21 f0       	breq	.+8      	; 0x3d92 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3d8a:	90 68       	ori	r25, 0x80	; 128
    3d8c:	14 96       	adiw	r26, 0x04	; 4
    3d8e:	9c 93       	st	X, r25
    3d90:	19 c0       	rjmp	.+50     	; 0x3dc4 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3d92:	9f 7b       	andi	r25, 0xBF	; 191
    3d94:	ef 81       	ldd	r30, Y+7	; 0x07
    3d96:	f8 85       	ldd	r31, Y+8	; 0x08
    3d98:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3d9a:	af 81       	ldd	r26, Y+7	; 0x07
    3d9c:	b8 85       	ldd	r27, Y+8	; 0x08
    3d9e:	ed 91       	ld	r30, X+
    3da0:	fc 91       	ld	r31, X
    3da2:	11 97       	sbiw	r26, 0x01	; 1
    3da4:	bd 01       	movw	r22, r26
    3da6:	60 5e       	subi	r22, 0xE0	; 224
    3da8:	7f 4f       	sbci	r23, 0xFF	; 255
    3daa:	81 81       	ldd	r24, Z+1	; 0x01
    3dac:	a6 01       	movw	r20, r12
    3dae:	95 01       	movw	r18, r10
    3db0:	01 e0       	ldi	r16, 0x01	; 1
    3db2:	0e 94 b3 06 	call	0xd66	; 0xd66 <disk_read>
    3db6:	88 23       	and	r24, r24
    3db8:	39 f0       	breq	.+14     	; 0x3dc8 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3dba:	ef 81       	ldd	r30, Y+7	; 0x07
    3dbc:	f8 85       	ldd	r31, Y+8	; 0x08
    3dbe:	84 81       	ldd	r24, Z+4	; 0x04
    3dc0:	80 68       	ori	r24, 0x80	; 128
    3dc2:	84 83       	std	Z+4, r24	; 0x04
    3dc4:	11 e0       	ldi	r17, 0x01	; 1
    3dc6:	1e c0       	rjmp	.+60     	; 0x3e04 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3dc8:	af 81       	ldd	r26, Y+7	; 0x07
    3dca:	b8 85       	ldd	r27, Y+8	; 0x08
    3dcc:	56 96       	adiw	r26, 0x16	; 22
    3dce:	ad 92       	st	X+, r10
    3dd0:	bd 92       	st	X+, r11
    3dd2:	cd 92       	st	X+, r12
    3dd4:	dc 92       	st	X, r13
    3dd6:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3dd8:	ef 81       	ldd	r30, Y+7	; 0x07
    3dda:	f8 85       	ldd	r31, Y+8	; 0x08
    3ddc:	26 81       	ldd	r18, Z+6	; 0x06
    3dde:	37 81       	ldd	r19, Z+7	; 0x07
    3de0:	40 85       	ldd	r20, Z+8	; 0x08
    3de2:	51 85       	ldd	r21, Z+9	; 0x09
    3de4:	82 85       	ldd	r24, Z+10	; 0x0a
    3de6:	93 85       	ldd	r25, Z+11	; 0x0b
    3de8:	a4 85       	ldd	r26, Z+12	; 0x0c
    3dea:	b5 85       	ldd	r27, Z+13	; 0x0d
    3dec:	82 17       	cp	r24, r18
    3dee:	93 07       	cpc	r25, r19
    3df0:	a4 07       	cpc	r26, r20
    3df2:	b5 07       	cpc	r27, r21
    3df4:	38 f4       	brcc	.+14     	; 0x3e04 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3df6:	22 87       	std	Z+10, r18	; 0x0a
    3df8:	33 87       	std	Z+11, r19	; 0x0b
    3dfa:	44 87       	std	Z+12, r20	; 0x0c
    3dfc:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3dfe:	84 81       	ldd	r24, Z+4	; 0x04
    3e00:	80 62       	ori	r24, 0x20	; 32
    3e02:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3e04:	81 2f       	mov	r24, r17
    3e06:	28 96       	adiw	r28, 0x08	; 8
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	cf 91       	pop	r28
    3e0e:	df 91       	pop	r29
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	df 90       	pop	r13
    3e16:	cf 90       	pop	r12
    3e18:	bf 90       	pop	r11
    3e1a:	af 90       	pop	r10
    3e1c:	9f 90       	pop	r9
    3e1e:	8f 90       	pop	r8
    3e20:	7f 90       	pop	r7
    3e22:	6f 90       	pop	r6
    3e24:	5f 90       	pop	r5
    3e26:	4f 90       	pop	r4
    3e28:	3f 90       	pop	r3
    3e2a:	2f 90       	pop	r2
    3e2c:	08 95       	ret

00003e2e <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	df 93       	push	r29
    3e34:	cf 93       	push	r28
    3e36:	cd b7       	in	r28, 0x3d	; 61
    3e38:	de b7       	in	r29, 0x3e	; 62
    3e3a:	2e 97       	sbiw	r28, 0x0e	; 14
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	8c 01       	movw	r16, r24
    3e42:	6d 87       	std	Y+13, r22	; 0x0d
    3e44:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3e46:	ce 01       	movw	r24, r28
    3e48:	0d 96       	adiw	r24, 0x0d	; 13
    3e4a:	b8 01       	movw	r22, r16
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
	if (res == FR_OK) {
    3e52:	88 23       	and	r24, r24
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <f_opendir+0x2a>
    3e56:	46 c0       	rjmp	.+140    	; 0x3ee4 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3e58:	ce 01       	movw	r24, r28
    3e5a:	01 96       	adiw	r24, 0x01	; 1
    3e5c:	d8 01       	movw	r26, r16
    3e5e:	54 96       	adiw	r26, 0x14	; 20
    3e60:	8d 93       	st	X+, r24
    3e62:	9c 93       	st	X, r25
    3e64:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3e66:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e68:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e6a:	c8 01       	movw	r24, r16
    3e6c:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3e70:	88 23       	and	r24, r24
    3e72:	a9 f5       	brne	.+106    	; 0x3ede <f_opendir+0xb0>
			dir = dj->dir;
    3e74:	d8 01       	movw	r26, r16
    3e76:	52 96       	adiw	r26, 0x12	; 18
    3e78:	ed 91       	ld	r30, X+
    3e7a:	fc 91       	ld	r31, X
    3e7c:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3e7e:	30 97       	sbiw	r30, 0x00	; 0
    3e80:	f9 f0       	breq	.+62     	; 0x3ec0 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3e82:	83 85       	ldd	r24, Z+11	; 0x0b
    3e84:	84 ff       	sbrs	r24, 4
    3e86:	2d c0       	rjmp	.+90     	; 0x3ee2 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3e88:	35 89       	ldd	r19, Z+21	; 0x15
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	84 89       	ldd	r24, Z+20	; 0x14
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	28 2b       	or	r18, r24
    3e92:	39 2b       	or	r19, r25
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	a9 01       	movw	r20, r18
    3e9a:	33 27       	eor	r19, r19
    3e9c:	22 27       	eor	r18, r18
    3e9e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	62 8d       	ldd	r22, Z+26	; 0x1a
    3ea4:	70 e0       	ldi	r23, 0x00	; 0
    3ea6:	86 2b       	or	r24, r22
    3ea8:	97 2b       	or	r25, r23
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	28 2b       	or	r18, r24
    3eb0:	39 2b       	or	r19, r25
    3eb2:	4a 2b       	or	r20, r26
    3eb4:	5b 2b       	or	r21, r27
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	26 83       	std	Z+6, r18	; 0x06
    3eba:	37 83       	std	Z+7, r19	; 0x07
    3ebc:	40 87       	std	Z+8, r20	; 0x08
    3ebe:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3ec0:	d8 01       	movw	r26, r16
    3ec2:	ed 91       	ld	r30, X+
    3ec4:	fc 91       	ld	r31, X
    3ec6:	11 97       	sbiw	r26, 0x01	; 1
    3ec8:	86 81       	ldd	r24, Z+6	; 0x06
    3eca:	97 81       	ldd	r25, Z+7	; 0x07
    3ecc:	12 96       	adiw	r26, 0x02	; 2
    3ece:	8d 93       	st	X+, r24
    3ed0:	9c 93       	st	X, r25
    3ed2:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3ed4:	c8 01       	movw	r24, r16
    3ed6:	60 e0       	ldi	r22, 0x00	; 0
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3ede:	84 30       	cpi	r24, 0x04	; 4
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <f_opendir+0xb6>
    3ee2:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3ee4:	2e 96       	adiw	r28, 0x0e	; 14
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	de bf       	out	0x3e, r29	; 62
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	1f 91       	pop	r17
    3ef0:	0f 91       	pop	r16
    3ef2:	08 95       	ret

00003ef4 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3ef4:	ef 92       	push	r14
    3ef6:	ff 92       	push	r15
    3ef8:	0f 93       	push	r16
    3efa:	1f 93       	push	r17
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	2c 97       	sbiw	r28, 0x0c	; 12
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	8c 01       	movw	r16, r24
    3f0c:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3f0e:	fc 01       	movw	r30, r24
    3f10:	62 81       	ldd	r22, Z+2	; 0x02
    3f12:	73 81       	ldd	r23, Z+3	; 0x03
    3f14:	80 81       	ld	r24, Z
    3f16:	91 81       	ldd	r25, Z+1	; 0x01
    3f18:	0e 94 80 16 	call	0x2d00	; 0x2d00 <validate>
	if (res == FR_OK) {
    3f1c:	88 23       	and	r24, r24
    3f1e:	59 f5       	brne	.+86     	; 0x3f76 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3f20:	ce 01       	movw	r24, r28
    3f22:	01 96       	adiw	r24, 0x01	; 1
    3f24:	f8 01       	movw	r30, r16
    3f26:	84 8b       	std	Z+20, r24	; 0x14
    3f28:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3f2a:	e1 14       	cp	r14, r1
    3f2c:	f1 04       	cpc	r15, r1
    3f2e:	31 f4       	brne	.+12     	; 0x3f3c <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3f30:	c8 01       	movw	r24, r16
    3f32:	60 e0       	ldi	r22, 0x00	; 0
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
    3f3a:	1d c0       	rjmp	.+58     	; 0x3f76 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3f3c:	c8 01       	movw	r24, r16
    3f3e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <dir_read>
			if (res == FR_NO_FILE) {
    3f42:	84 30       	cpi	r24, 0x04	; 4
    3f44:	31 f4       	brne	.+12     	; 0x3f52 <f_readdir+0x5e>
				dj->sect = 0;
    3f46:	f8 01       	movw	r30, r16
    3f48:	16 86       	std	Z+14, r1	; 0x0e
    3f4a:	17 86       	std	Z+15, r1	; 0x0f
    3f4c:	10 8a       	std	Z+16, r1	; 0x10
    3f4e:	11 8a       	std	Z+17, r1	; 0x11
    3f50:	02 c0       	rjmp	.+4      	; 0x3f56 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3f52:	88 23       	and	r24, r24
    3f54:	81 f4       	brne	.+32     	; 0x3f76 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3f56:	c8 01       	movw	r24, r16
    3f58:	b7 01       	movw	r22, r14
    3f5a:	0e 94 25 11 	call	0x224a	; 0x224a <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3f5e:	c8 01       	movw	r24, r16
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <dir_next>
				if (res == FR_NO_FILE) {
    3f66:	84 30       	cpi	r24, 0x04	; 4
    3f68:	31 f4       	brne	.+12     	; 0x3f76 <f_readdir+0x82>
					dj->sect = 0;
    3f6a:	f8 01       	movw	r30, r16
    3f6c:	16 86       	std	Z+14, r1	; 0x0e
    3f6e:	17 86       	std	Z+15, r1	; 0x0f
    3f70:	10 8a       	std	Z+16, r1	; 0x10
    3f72:	11 8a       	std	Z+17, r1	; 0x11
    3f74:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3f76:	2c 96       	adiw	r28, 0x0c	; 12
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	cf 91       	pop	r28
    3f7e:	df 91       	pop	r29
    3f80:	1f 91       	pop	r17
    3f82:	0f 91       	pop	r16
    3f84:	ff 90       	pop	r15
    3f86:	ef 90       	pop	r14
    3f88:	08 95       	ret

00003f8a <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3f8a:	cf 92       	push	r12
    3f8c:	df 92       	push	r13
    3f8e:	ef 92       	push	r14
    3f90:	ff 92       	push	r15
    3f92:	1f 93       	push	r17
    3f94:	df 93       	push	r29
    3f96:	cf 93       	push	r28
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	a4 97       	sbiw	r28, 0x24	; 36
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	8b a3       	std	Y+35, r24	; 0x23
    3fa4:	9c a3       	std	Y+36, r25	; 0x24
    3fa6:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3fa8:	2d e0       	ldi	r18, 0x0D	; 13
    3faa:	e2 2e       	mov	r14, r18
    3fac:	f1 2c       	mov	r15, r1
    3fae:	ec 0e       	add	r14, r28
    3fb0:	fd 1e       	adc	r15, r29
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	83 96       	adiw	r24, 0x23	; 35
    3fb6:	b7 01       	movw	r22, r14
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
    3fbe:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3fc0:	88 23       	and	r24, r24
    3fc2:	b1 f4       	brne	.+44     	; 0x3ff0 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	01 96       	adiw	r24, 0x01	; 1
    3fc8:	89 a3       	std	Y+33, r24	; 0x21
    3fca:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    3fce:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd0:	c7 01       	movw	r24, r14
    3fd2:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
    3fd6:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3fd8:	88 23       	and	r24, r24
    3fda:	51 f4       	brne	.+20     	; 0x3ff0 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fde:	98 a1       	ldd	r25, Y+32	; 0x20
    3fe0:	89 2b       	or	r24, r25
    3fe2:	11 f4       	brne	.+4      	; 0x3fe8 <f_stat+0x5e>
    3fe4:	16 e0       	ldi	r17, 0x06	; 6
    3fe6:	04 c0       	rjmp	.+8      	; 0x3ff0 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3fe8:	c7 01       	movw	r24, r14
    3fea:	b6 01       	movw	r22, r12
    3fec:	0e 94 25 11 	call	0x224a	; 0x224a <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3ff0:	81 2f       	mov	r24, r17
    3ff2:	a4 96       	adiw	r28, 0x24	; 36
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	1f 91       	pop	r17
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	df 90       	pop	r13
    4004:	cf 90       	pop	r12
    4006:	08 95       	ret

00004008 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    4008:	2f 92       	push	r2
    400a:	3f 92       	push	r3
    400c:	4f 92       	push	r4
    400e:	5f 92       	push	r5
    4010:	6f 92       	push	r6
    4012:	7f 92       	push	r7
    4014:	8f 92       	push	r8
    4016:	9f 92       	push	r9
    4018:	af 92       	push	r10
    401a:	bf 92       	push	r11
    401c:	cf 92       	push	r12
    401e:	df 92       	push	r13
    4020:	ef 92       	push	r14
    4022:	ff 92       	push	r15
    4024:	0f 93       	push	r16
    4026:	1f 93       	push	r17
    4028:	df 93       	push	r29
    402a:	cf 93       	push	r28
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	29 97       	sbiw	r28, 0x09	; 9
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	89 83       	std	Y+1, r24	; 0x01
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	6c 83       	std	Y+4, r22	; 0x04
    403c:	7d 83       	std	Y+5, r23	; 0x05
    403e:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4040:	ce 01       	movw	r24, r28
    4042:	01 96       	adiw	r24, 0x01	; 1
    4044:	ba 01       	movw	r22, r20
    4046:	40 e0       	ldi	r20, 0x00	; 0
    4048:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    404c:	88 23       	and	r24, r24
    404e:	09 f0       	breq	.+2      	; 0x4052 <f_getfree+0x4a>
    4050:	eb c0       	rjmp	.+470    	; 0x4228 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    4052:	d2 01       	movw	r26, r4
    4054:	ed 91       	ld	r30, X+
    4056:	fc 91       	ld	r31, X
    4058:	26 85       	ldd	r18, Z+14	; 0x0e
    405a:	37 85       	ldd	r19, Z+15	; 0x0f
    405c:	40 89       	ldd	r20, Z+16	; 0x10
    405e:	51 89       	ldd	r21, Z+17	; 0x11
    4060:	e2 8c       	ldd	r14, Z+26	; 0x1a
    4062:	f3 8c       	ldd	r15, Z+27	; 0x1b
    4064:	04 8d       	ldd	r16, Z+28	; 0x1c
    4066:	15 8d       	ldd	r17, Z+29	; 0x1d
    4068:	d8 01       	movw	r26, r16
    406a:	c7 01       	movw	r24, r14
    406c:	02 97       	sbiw	r24, 0x02	; 2
    406e:	a1 09       	sbc	r26, r1
    4070:	b1 09       	sbc	r27, r1
    4072:	82 17       	cp	r24, r18
    4074:	93 07       	cpc	r25, r19
    4076:	a4 07       	cpc	r26, r20
    4078:	b5 07       	cpc	r27, r21
    407a:	38 f0       	brcs	.+14     	; 0x408a <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    407c:	ec 81       	ldd	r30, Y+4	; 0x04
    407e:	fd 81       	ldd	r31, Y+5	; 0x05
    4080:	20 83       	st	Z, r18
    4082:	31 83       	std	Z+1, r19	; 0x01
    4084:	42 83       	std	Z+2, r20	; 0x02
    4086:	53 83       	std	Z+3, r21	; 0x03
    4088:	ce c0       	rjmp	.+412    	; 0x4226 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    408a:	30 80       	ld	r3, Z
    408c:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    408e:	23 2d       	mov	r18, r3
    4090:	21 30       	cpi	r18, 0x01	; 1
    4092:	e1 f5       	brne	.+120    	; 0x410c <f_getfree+0x104>
    4094:	aa 24       	eor	r10, r10
    4096:	bb 24       	eor	r11, r11
    4098:	65 01       	movw	r12, r10
    409a:	92 e0       	ldi	r25, 0x02	; 2
    409c:	e9 2e       	mov	r14, r25
    409e:	f1 2c       	mov	r15, r1
    40a0:	01 2d       	mov	r16, r1
    40a2:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    40a4:	d2 01       	movw	r26, r4
    40a6:	8d 91       	ld	r24, X+
    40a8:	9c 91       	ld	r25, X
    40aa:	b8 01       	movw	r22, r16
    40ac:	a7 01       	movw	r20, r14
    40ae:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    40b2:	6f 3f       	cpi	r22, 0xFF	; 255
    40b4:	bf ef       	ldi	r27, 0xFF	; 255
    40b6:	7b 07       	cpc	r23, r27
    40b8:	bf ef       	ldi	r27, 0xFF	; 255
    40ba:	8b 07       	cpc	r24, r27
    40bc:	bf ef       	ldi	r27, 0xFF	; 255
    40be:	9b 07       	cpc	r25, r27
    40c0:	11 f4       	brne	.+4      	; 0x40c6 <f_getfree+0xbe>
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	b1 c0       	rjmp	.+354    	; 0x4228 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    40c6:	61 30       	cpi	r22, 0x01	; 1
    40c8:	71 05       	cpc	r23, r1
    40ca:	81 05       	cpc	r24, r1
    40cc:	91 05       	cpc	r25, r1
    40ce:	11 f4       	brne	.+4      	; 0x40d4 <f_getfree+0xcc>
    40d0:	82 e0       	ldi	r24, 0x02	; 2
    40d2:	aa c0       	rjmp	.+340    	; 0x4228 <f_getfree+0x220>
			if (stat == 0) n++;
    40d4:	61 15       	cp	r22, r1
    40d6:	71 05       	cpc	r23, r1
    40d8:	81 05       	cpc	r24, r1
    40da:	91 05       	cpc	r25, r1
    40dc:	29 f4       	brne	.+10     	; 0x40e8 <f_getfree+0xe0>
    40de:	08 94       	sec
    40e0:	a1 1c       	adc	r10, r1
    40e2:	b1 1c       	adc	r11, r1
    40e4:	c1 1c       	adc	r12, r1
    40e6:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    40e8:	08 94       	sec
    40ea:	e1 1c       	adc	r14, r1
    40ec:	f1 1c       	adc	r15, r1
    40ee:	01 1d       	adc	r16, r1
    40f0:	11 1d       	adc	r17, r1
    40f2:	d2 01       	movw	r26, r4
    40f4:	ed 91       	ld	r30, X+
    40f6:	fc 91       	ld	r31, X
    40f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    40fa:	93 8d       	ldd	r25, Z+27	; 0x1b
    40fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    40fe:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4100:	e8 16       	cp	r14, r24
    4102:	f9 06       	cpc	r15, r25
    4104:	0a 07       	cpc	r16, r26
    4106:	1b 07       	cpc	r17, r27
    4108:	68 f2       	brcs	.-102    	; 0x40a4 <f_getfree+0x9c>
    410a:	7b c0       	rjmp	.+246    	; 0x4202 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    410c:	66 8c       	ldd	r6, Z+30	; 0x1e
    410e:	77 8c       	ldd	r7, Z+31	; 0x1f
    4110:	80 a0       	ldd	r8, Z+32	; 0x20
    4112:	91 a0       	ldd	r9, Z+33	; 0x21
    4114:	aa 24       	eor	r10, r10
    4116:	bb 24       	eor	r11, r11
    4118:	65 01       	movw	r12, r10
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	e0 e0       	ldi	r30, 0x00	; 0
    4120:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    4122:	61 15       	cp	r22, r1
    4124:	71 05       	cpc	r23, r1
    4126:	a9 f4       	brne	.+42     	; 0x4152 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    4128:	f2 01       	movw	r30, r4
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	b4 01       	movw	r22, r8
    4130:	a3 01       	movw	r20, r6
    4132:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
				if (res != FR_OK)
    4136:	88 23       	and	r24, r24
    4138:	09 f0       	breq	.+2      	; 0x413c <f_getfree+0x134>
    413a:	76 c0       	rjmp	.+236    	; 0x4228 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    413c:	08 94       	sec
    413e:	61 1c       	adc	r6, r1
    4140:	71 1c       	adc	r7, r1
    4142:	81 1c       	adc	r8, r1
    4144:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    4146:	d2 01       	movw	r26, r4
    4148:	ed 91       	ld	r30, X+
    414a:	fc 91       	ld	r31, X
    414c:	be 96       	adiw	r30, 0x2e	; 46
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	72 e0       	ldi	r23, 0x02	; 2
    4152:	b1 81       	ldd	r27, Z+1	; 0x01
    4154:	b8 87       	std	Y+8, r27	; 0x08
    4156:	20 81       	ld	r18, Z
    4158:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    415a:	3b 81       	ldd	r19, Y+3	; 0x03
    415c:	32 30       	cpi	r19, 0x02	; 2
    415e:	99 f4       	brne	.+38     	; 0x4186 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    4160:	bf 83       	std	Y+7, r27	; 0x07
    4162:	1e 82       	std	Y+6, r1	; 0x06
    4164:	82 2f       	mov	r24, r18
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	ae 81       	ldd	r26, Y+6	; 0x06
    416a:	bf 81       	ldd	r27, Y+7	; 0x07
    416c:	8a 2b       	or	r24, r26
    416e:	9b 2b       	or	r25, r27
    4170:	89 2b       	or	r24, r25
    4172:	29 f4       	brne	.+10     	; 0x417e <f_getfree+0x176>
    4174:	08 94       	sec
    4176:	a1 1c       	adc	r10, r1
    4178:	b1 1c       	adc	r11, r1
    417a:	c1 1c       	adc	r12, r1
    417c:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    417e:	32 96       	adiw	r30, 0x02	; 2
    4180:	62 50       	subi	r22, 0x02	; 2
    4182:	70 40       	sbci	r23, 0x00	; 0
    4184:	33 c0       	rjmp	.+102    	; 0x41ec <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    4186:	23 81       	ldd	r18, Z+3	; 0x03
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e0       	ldi	r20, 0x00	; 0
    418c:	50 e0       	ldi	r21, 0x00	; 0
    418e:	52 2f       	mov	r21, r18
    4190:	44 27       	eor	r20, r20
    4192:	33 27       	eor	r19, r19
    4194:	22 27       	eor	r18, r18
    4196:	82 81       	ldd	r24, Z+2	; 0x02
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	a0 e0       	ldi	r26, 0x00	; 0
    419c:	b0 e0       	ldi	r27, 0x00	; 0
    419e:	dc 01       	movw	r26, r24
    41a0:	99 27       	eor	r25, r25
    41a2:	88 27       	eor	r24, r24
    41a4:	28 2b       	or	r18, r24
    41a6:	39 2b       	or	r19, r25
    41a8:	4a 2b       	or	r20, r26
    41aa:	5b 2b       	or	r21, r27
    41ac:	39 84       	ldd	r3, Y+9	; 0x09
    41ae:	83 2d       	mov	r24, r3
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	a0 e0       	ldi	r26, 0x00	; 0
    41b4:	b0 e0       	ldi	r27, 0x00	; 0
    41b6:	28 2b       	or	r18, r24
    41b8:	39 2b       	or	r19, r25
    41ba:	4a 2b       	or	r20, r26
    41bc:	5b 2b       	or	r21, r27
    41be:	38 84       	ldd	r3, Y+8	; 0x08
    41c0:	22 24       	eor	r2, r2
    41c2:	c1 01       	movw	r24, r2
    41c4:	a0 e0       	ldi	r26, 0x00	; 0
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	28 2b       	or	r18, r24
    41ca:	39 2b       	or	r19, r25
    41cc:	4a 2b       	or	r20, r26
    41ce:	5b 2b       	or	r21, r27
    41d0:	5f 70       	andi	r21, 0x0F	; 15
    41d2:	21 15       	cp	r18, r1
    41d4:	31 05       	cpc	r19, r1
    41d6:	41 05       	cpc	r20, r1
    41d8:	51 05       	cpc	r21, r1
    41da:	29 f4       	brne	.+10     	; 0x41e6 <f_getfree+0x1de>
    41dc:	08 94       	sec
    41de:	a1 1c       	adc	r10, r1
    41e0:	b1 1c       	adc	r11, r1
    41e2:	c1 1c       	adc	r12, r1
    41e4:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    41e6:	34 96       	adiw	r30, 0x04	; 4
    41e8:	64 50       	subi	r22, 0x04	; 4
    41ea:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    41ec:	08 94       	sec
    41ee:	e1 08       	sbc	r14, r1
    41f0:	f1 08       	sbc	r15, r1
    41f2:	01 09       	sbc	r16, r1
    41f4:	11 09       	sbc	r17, r1
    41f6:	e1 14       	cp	r14, r1
    41f8:	f1 04       	cpc	r15, r1
    41fa:	01 05       	cpc	r16, r1
    41fc:	11 05       	cpc	r17, r1
    41fe:	09 f0       	breq	.+2      	; 0x4202 <f_getfree+0x1fa>
    4200:	90 cf       	rjmp	.-224    	; 0x4122 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    4202:	d2 01       	movw	r26, r4
    4204:	ed 91       	ld	r30, X+
    4206:	fc 91       	ld	r31, X
    4208:	a6 86       	std	Z+14, r10	; 0x0e
    420a:	b7 86       	std	Z+15, r11	; 0x0f
    420c:	c0 8a       	std	Z+16, r12	; 0x10
    420e:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4210:	bb 81       	ldd	r27, Y+3	; 0x03
    4212:	b3 30       	cpi	r27, 0x03	; 3
    4214:	11 f4       	brne	.+4      	; 0x421a <f_getfree+0x212>
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    421a:	ec 81       	ldd	r30, Y+4	; 0x04
    421c:	fd 81       	ldd	r31, Y+5	; 0x05
    421e:	a0 82       	st	Z, r10
    4220:	b1 82       	std	Z+1, r11	; 0x01
    4222:	c2 82       	std	Z+2, r12	; 0x02
    4224:	d3 82       	std	Z+3, r13	; 0x03
    4226:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4228:	29 96       	adiw	r28, 0x09	; 9
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	ff 90       	pop	r15
    4238:	ef 90       	pop	r14
    423a:	df 90       	pop	r13
    423c:	cf 90       	pop	r12
    423e:	bf 90       	pop	r11
    4240:	af 90       	pop	r10
    4242:	9f 90       	pop	r9
    4244:	8f 90       	pop	r8
    4246:	7f 90       	pop	r7
    4248:	6f 90       	pop	r6
    424a:	5f 90       	pop	r5
    424c:	4f 90       	pop	r4
    424e:	3f 90       	pop	r3
    4250:	2f 90       	pop	r2
    4252:	08 95       	ret

00004254 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    4254:	cf 92       	push	r12
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4266:	6a 81       	ldd	r22, Y+2	; 0x02
    4268:	7b 81       	ldd	r23, Y+3	; 0x03
    426a:	88 81       	ld	r24, Y
    426c:	99 81       	ldd	r25, Y+1	; 0x01
    426e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <validate>
    4272:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4274:	88 23       	and	r24, r24
    4276:	09 f0       	breq	.+2      	; 0x427a <f_truncate+0x26>
    4278:	6e c0       	rjmp	.+220    	; 0x4356 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    427a:	6c 81       	ldd	r22, Y+4	; 0x04
    427c:	67 ff       	sbrs	r22, 7
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <f_truncate+0x30>
    4280:	12 e0       	ldi	r17, 0x02	; 2
    4282:	69 c0       	rjmp	.+210    	; 0x4356 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    4284:	61 fd       	sbrc	r22, 1
    4286:	02 c0       	rjmp	.+4      	; 0x428c <f_truncate+0x38>
    4288:	17 e0       	ldi	r17, 0x07	; 7
    428a:	65 c0       	rjmp	.+202    	; 0x4356 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    428c:	2e 81       	ldd	r18, Y+6	; 0x06
    428e:	3f 81       	ldd	r19, Y+7	; 0x07
    4290:	48 85       	ldd	r20, Y+8	; 0x08
    4292:	59 85       	ldd	r21, Y+9	; 0x09
    4294:	8a 85       	ldd	r24, Y+10	; 0x0a
    4296:	9b 85       	ldd	r25, Y+11	; 0x0b
    4298:	ac 85       	ldd	r26, Y+12	; 0x0c
    429a:	bd 85       	ldd	r27, Y+13	; 0x0d
    429c:	28 17       	cp	r18, r24
    429e:	39 07       	cpc	r19, r25
    42a0:	4a 07       	cpc	r20, r26
    42a2:	5b 07       	cpc	r21, r27
    42a4:	08 f0       	brcs	.+2      	; 0x42a8 <f_truncate+0x54>
    42a6:	57 c0       	rjmp	.+174    	; 0x4356 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    42a8:	2a 87       	std	Y+10, r18	; 0x0a
    42aa:	3b 87       	std	Y+11, r19	; 0x0b
    42ac:	4c 87       	std	Y+12, r20	; 0x0c
    42ae:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    42b0:	60 62       	ori	r22, 0x20	; 32
    42b2:	6c 83       	std	Y+4, r22	; 0x04
    42b4:	88 81       	ld	r24, Y
    42b6:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    42b8:	21 15       	cp	r18, r1
    42ba:	31 05       	cpc	r19, r1
    42bc:	41 05       	cpc	r20, r1
    42be:	51 05       	cpc	r21, r1
    42c0:	61 f4       	brne	.+24     	; 0x42da <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    42c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    42c4:	5f 85       	ldd	r21, Y+15	; 0x0f
    42c6:	68 89       	ldd	r22, Y+16	; 0x10
    42c8:	79 89       	ldd	r23, Y+17	; 0x11
    42ca:	0e 94 55 0c 	call	0x18aa	; 0x18aa <remove_chain>
    42ce:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    42d0:	1e 86       	std	Y+14, r1	; 0x0e
    42d2:	1f 86       	std	Y+15, r1	; 0x0f
    42d4:	18 8a       	std	Y+16, r1	; 0x10
    42d6:	19 8a       	std	Y+17, r1	; 0x11
    42d8:	39 c0       	rjmp	.+114    	; 0x434c <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    42da:	4a 89       	ldd	r20, Y+18	; 0x12
    42dc:	5b 89       	ldd	r21, Y+19	; 0x13
    42de:	6c 89       	ldd	r22, Y+20	; 0x14
    42e0:	7d 89       	ldd	r23, Y+21	; 0x15
    42e2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <get_fat>
    42e6:	6b 01       	movw	r12, r22
    42e8:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    42ea:	8f ef       	ldi	r24, 0xFF	; 255
    42ec:	c8 16       	cp	r12, r24
    42ee:	8f ef       	ldi	r24, 0xFF	; 255
    42f0:	d8 06       	cpc	r13, r24
    42f2:	8f ef       	ldi	r24, 0xFF	; 255
    42f4:	e8 06       	cpc	r14, r24
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	f8 06       	cpc	r15, r24
    42fa:	b9 f1       	breq	.+110    	; 0x436a <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	c8 16       	cp	r12, r24
    4300:	d1 04       	cpc	r13, r1
    4302:	e1 04       	cpc	r14, r1
    4304:	f1 04       	cpc	r15, r1
    4306:	11 f4       	brne	.+4      	; 0x430c <f_truncate+0xb8>
    4308:	12 e0       	ldi	r17, 0x02	; 2
    430a:	22 c0       	rjmp	.+68     	; 0x4350 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    430c:	e8 81       	ld	r30, Y
    430e:	f9 81       	ldd	r31, Y+1	; 0x01
    4310:	82 8d       	ldd	r24, Z+26	; 0x1a
    4312:	93 8d       	ldd	r25, Z+27	; 0x1b
    4314:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4316:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4318:	c8 16       	cp	r12, r24
    431a:	d9 06       	cpc	r13, r25
    431c:	ea 06       	cpc	r14, r26
    431e:	fb 06       	cpc	r15, r27
    4320:	d0 f4       	brcc	.+52     	; 0x4356 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    4322:	4a 89       	ldd	r20, Y+18	; 0x12
    4324:	5b 89       	ldd	r21, Y+19	; 0x13
    4326:	6c 89       	ldd	r22, Y+20	; 0x14
    4328:	7d 89       	ldd	r23, Y+21	; 0x15
    432a:	cf 01       	movw	r24, r30
    432c:	0f ef       	ldi	r16, 0xFF	; 255
    432e:	1f ef       	ldi	r17, 0xFF	; 255
    4330:	2f ef       	ldi	r18, 0xFF	; 255
    4332:	3f e0       	ldi	r19, 0x0F	; 15
    4334:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <put_fat>
    4338:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    433a:	88 23       	and	r24, r24
    433c:	49 f4       	brne	.+18     	; 0x4350 <f_truncate+0xfc>
    433e:	88 81       	ld	r24, Y
    4340:	99 81       	ldd	r25, Y+1	; 0x01
    4342:	b7 01       	movw	r22, r14
    4344:	a6 01       	movw	r20, r12
    4346:	0e 94 55 0c 	call	0x18aa	; 0x18aa <remove_chain>
    434a:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    434c:	11 23       	and	r17, r17
    434e:	19 f0       	breq	.+6      	; 0x4356 <f_truncate+0x102>
    4350:	8c 81       	ldd	r24, Y+4	; 0x04
    4352:	80 68       	ori	r24, 0x80	; 128
    4354:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    4356:	81 2f       	mov	r24, r17
    4358:	df 91       	pop	r29
    435a:	cf 91       	pop	r28
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	ff 90       	pop	r15
    4362:	ef 90       	pop	r14
    4364:	df 90       	pop	r13
    4366:	cf 90       	pop	r12
    4368:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    436a:	11 e0       	ldi	r17, 0x01	; 1
    436c:	f1 cf       	rjmp	.-30     	; 0x4350 <f_truncate+0xfc>

0000436e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    436e:	cf 92       	push	r12
    4370:	df 92       	push	r13
    4372:	ef 92       	push	r14
    4374:	ff 92       	push	r15
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	cd b7       	in	r28, 0x3d	; 61
    4380:	de b7       	in	r29, 0x3e	; 62
    4382:	ea 97       	sbiw	r28, 0x3a	; 58
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	89 af       	std	Y+57, r24	; 0x39
    438a:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    438c:	4d e0       	ldi	r20, 0x0D	; 13
    438e:	c4 2e       	mov	r12, r20
    4390:	d1 2c       	mov	r13, r1
    4392:	cc 0e       	add	r12, r28
    4394:	dd 1e       	adc	r13, r29
    4396:	ce 01       	movw	r24, r28
    4398:	c9 96       	adiw	r24, 0x39	; 57
    439a:	b6 01       	movw	r22, r12
    439c:	41 e0       	ldi	r20, 0x01	; 1
    439e:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    43a2:	88 23       	and	r24, r24
    43a4:	09 f0       	breq	.+2      	; 0x43a8 <f_unlink+0x3a>
    43a6:	71 c0       	rjmp	.+226    	; 0x448a <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    43a8:	ce 01       	movw	r24, r28
    43aa:	01 96       	adiw	r24, 0x01	; 1
    43ac:	89 a3       	std	Y+33, r24	; 0x21
    43ae:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    43b0:	69 ad       	ldd	r22, Y+57	; 0x39
    43b2:	7a ad       	ldd	r23, Y+58	; 0x3a
    43b4:	c6 01       	movw	r24, r12
    43b6:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    43ba:	88 23       	and	r24, r24
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <f_unlink+0x52>
    43be:	65 c0       	rjmp	.+202    	; 0x448a <f_unlink+0x11c>

	dir = dj.dir;
    43c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    43c2:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    43c4:	30 97       	sbiw	r30, 0x00	; 0
    43c6:	11 f4       	brne	.+4      	; 0x43cc <f_unlink+0x5e>
    43c8:	86 e0       	ldi	r24, 0x06	; 6
    43ca:	5f c0       	rjmp	.+190    	; 0x448a <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    43cc:	83 85       	ldd	r24, Z+11	; 0x0b
    43ce:	48 2f       	mov	r20, r24
    43d0:	80 fd       	sbrc	r24, 0
    43d2:	5a c0       	rjmp	.+180    	; 0x4488 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    43d4:	95 89       	ldd	r25, Z+21	; 0x15
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	24 89       	ldd	r18, Z+20	; 0x14
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	82 2b       	or	r24, r18
    43de:	93 2b       	or	r25, r19
    43e0:	a0 e0       	ldi	r26, 0x00	; 0
    43e2:	b0 e0       	ldi	r27, 0x00	; 0
    43e4:	8c 01       	movw	r16, r24
    43e6:	ff 24       	eor	r15, r15
    43e8:	ee 24       	eor	r14, r14
    43ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	82 2b       	or	r24, r18
    43f4:	93 2b       	or	r25, r19
    43f6:	a0 e0       	ldi	r26, 0x00	; 0
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	e8 2a       	or	r14, r24
    43fc:	f9 2a       	or	r15, r25
    43fe:	0a 2b       	or	r16, r26
    4400:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    4402:	44 ff       	sbrs	r20, 4
    4404:	29 c0       	rjmp	.+82     	; 0x4458 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4406:	82 e0       	ldi	r24, 0x02	; 2
    4408:	e8 16       	cp	r14, r24
    440a:	f1 04       	cpc	r15, r1
    440c:	01 05       	cpc	r16, r1
    440e:	11 05       	cpc	r17, r1
    4410:	10 f4       	brcc	.+4      	; 0x4416 <f_unlink+0xa8>
    4412:	82 e0       	ldi	r24, 0x02	; 2
    4414:	3a c0       	rjmp	.+116    	; 0x448a <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4416:	de 01       	movw	r26, r28
    4418:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    441a:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    441c:	9d 01       	movw	r18, r26
    441e:	02 c0       	rjmp	.+4      	; 0x4424 <f_unlink+0xb6>
    4420:	81 91       	ld	r24, Z+
    4422:	8d 93       	st	X+, r24
    4424:	e2 17       	cp	r30, r18
    4426:	f3 07       	cpc	r31, r19
    4428:	d9 f7       	brne	.-10     	; 0x4420 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    442a:	e9 a6       	std	Y+41, r14	; 0x29
    442c:	fa a6       	std	Y+42, r15	; 0x2a
    442e:	0b a7       	std	Y+43, r16	; 0x2b
    4430:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4432:	23 e2       	ldi	r18, 0x23	; 35
    4434:	c2 2e       	mov	r12, r18
    4436:	d1 2c       	mov	r13, r1
    4438:	cc 0e       	add	r12, r28
    443a:	dd 1e       	adc	r13, r29
    443c:	c6 01       	movw	r24, r12
    443e:	62 e0       	ldi	r22, 0x02	; 2
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4446:	88 23       	and	r24, r24
    4448:	01 f5       	brne	.+64     	; 0x448a <f_unlink+0x11c>
		res = dir_read(&sdj);
    444a:	c6 01       	movw	r24, r12
    444c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4450:	88 23       	and	r24, r24
    4452:	d1 f0       	breq	.+52     	; 0x4488 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    4454:	84 30       	cpi	r24, 0x04	; 4
    4456:	c9 f4       	brne	.+50     	; 0x448a <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    4458:	ce 01       	movw	r24, r28
    445a:	0d 96       	adiw	r24, 0x0d	; 13
    445c:	0e 94 04 11 	call	0x2208	; 0x2208 <dir_remove>
	if (res == FR_OK) {
    4460:	88 23       	and	r24, r24
    4462:	99 f4       	brne	.+38     	; 0x448a <f_unlink+0x11c>
		if (dclst)
    4464:	e1 14       	cp	r14, r1
    4466:	f1 04       	cpc	r15, r1
    4468:	01 05       	cpc	r16, r1
    446a:	11 05       	cpc	r17, r1
    446c:	41 f0       	breq	.+16     	; 0x447e <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    446e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4470:	9e 85       	ldd	r25, Y+14	; 0x0e
    4472:	b8 01       	movw	r22, r16
    4474:	a7 01       	movw	r20, r14
    4476:	0e 94 55 0c 	call	0x18aa	; 0x18aa <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    447a:	88 23       	and	r24, r24
    447c:	31 f4       	brne	.+12     	; 0x448a <f_unlink+0x11c>
    447e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4480:	9e 85       	ldd	r25, Y+14	; 0x0e
    4482:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <sync>
    4486:	01 c0       	rjmp	.+2      	; 0x448a <f_unlink+0x11c>
    4488:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    448a:	ea 96       	adiw	r28, 0x3a	; 58
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	cf 91       	pop	r28
    4492:	df 91       	pop	r29
    4494:	1f 91       	pop	r17
    4496:	0f 91       	pop	r16
    4498:	ff 90       	pop	r15
    449a:	ef 90       	pop	r14
    449c:	df 90       	pop	r13
    449e:	cf 90       	pop	r12
    44a0:	08 95       	ret

000044a2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    44a2:	2f 92       	push	r2
    44a4:	3f 92       	push	r3
    44a6:	4f 92       	push	r4
    44a8:	5f 92       	push	r5
    44aa:	6f 92       	push	r6
    44ac:	7f 92       	push	r7
    44ae:	8f 92       	push	r8
    44b0:	9f 92       	push	r9
    44b2:	af 92       	push	r10
    44b4:	bf 92       	push	r11
    44b6:	cf 92       	push	r12
    44b8:	df 92       	push	r13
    44ba:	ef 92       	push	r14
    44bc:	ff 92       	push	r15
    44be:	0f 93       	push	r16
    44c0:	1f 93       	push	r17
    44c2:	df 93       	push	r29
    44c4:	cf 93       	push	r28
    44c6:	cd b7       	in	r28, 0x3d	; 61
    44c8:	de b7       	in	r29, 0x3e	; 62
    44ca:	a8 97       	sbiw	r28, 0x28	; 40
    44cc:	cd bf       	out	0x3d, r28	; 61
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	8b a3       	std	Y+35, r24	; 0x23
    44d2:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    44d4:	3d e0       	ldi	r19, 0x0D	; 13
    44d6:	e3 2e       	mov	r14, r19
    44d8:	f1 2c       	mov	r15, r1
    44da:	ec 0e       	add	r14, r28
    44dc:	fd 1e       	adc	r15, r29
    44de:	ce 01       	movw	r24, r28
    44e0:	83 96       	adiw	r24, 0x23	; 35
    44e2:	b7 01       	movw	r22, r14
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
    44ea:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44ec:	88 23       	and	r24, r24
    44ee:	09 f0       	breq	.+2      	; 0x44f2 <f_mkdir+0x50>
    44f0:	38 c1       	rjmp	.+624    	; 0x4762 <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    44f2:	ce 01       	movw	r24, r28
    44f4:	01 96       	adiw	r24, 0x01	; 1
    44f6:	89 a3       	std	Y+33, r24	; 0x21
    44f8:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    44fa:	6b a1       	ldd	r22, Y+35	; 0x23
    44fc:	7c a1       	ldd	r23, Y+36	; 0x24
    44fe:	c7 01       	movw	r24, r14
    4500:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
    4504:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4506:	88 23       	and	r24, r24
    4508:	11 f4       	brne	.+4      	; 0x450e <f_mkdir+0x6c>
    450a:	18 e0       	ldi	r17, 0x08	; 8
    450c:	2a c1       	rjmp	.+596    	; 0x4762 <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    450e:	84 30       	cpi	r24, 0x04	; 4
    4510:	09 f0       	breq	.+2      	; 0x4514 <f_mkdir+0x72>
    4512:	27 c1       	rjmp	.+590    	; 0x4762 <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    4514:	8d 85       	ldd	r24, Y+13	; 0x0d
    4516:	9e 85       	ldd	r25, Y+14	; 0x0e
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	70 e0       	ldi	r23, 0x00	; 0
    4520:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <create_chain>
    4524:	4b 01       	movw	r8, r22
    4526:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4528:	61 15       	cp	r22, r1
    452a:	71 05       	cpc	r23, r1
    452c:	81 05       	cpc	r24, r1
    452e:	91 05       	cpc	r25, r1
    4530:	11 f4       	brne	.+4      	; 0x4536 <f_mkdir+0x94>
    4532:	17 e0       	ldi	r17, 0x07	; 7
    4534:	16 c1       	rjmp	.+556    	; 0x4762 <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    4536:	61 30       	cpi	r22, 0x01	; 1
    4538:	71 05       	cpc	r23, r1
    453a:	81 05       	cpc	r24, r1
    453c:	91 05       	cpc	r25, r1
    453e:	11 f4       	brne	.+4      	; 0x4544 <f_mkdir+0xa2>
    4540:	12 e0       	ldi	r17, 0x02	; 2
    4542:	0f c1       	rjmp	.+542    	; 0x4762 <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4544:	6f 3f       	cpi	r22, 0xFF	; 255
    4546:	3f ef       	ldi	r19, 0xFF	; 255
    4548:	73 07       	cpc	r23, r19
    454a:	3f ef       	ldi	r19, 0xFF	; 255
    454c:	83 07       	cpc	r24, r19
    454e:	3f ef       	ldi	r19, 0xFF	; 255
    4550:	93 07       	cpc	r25, r19
    4552:	09 f4       	brne	.+2      	; 0x4556 <f_mkdir+0xb4>
    4554:	1d c1       	rjmp	.+570    	; 0x4790 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    4556:	8d 85       	ldd	r24, Y+13	; 0x0d
    4558:	9e 85       	ldd	r25, Y+14	; 0x0e
    455a:	40 e0       	ldi	r20, 0x00	; 0
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	60 e0       	ldi	r22, 0x00	; 0
    4560:	70 e0       	ldi	r23, 0x00	; 0
    4562:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    4566:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4568:	88 23       	and	r24, r24
    456a:	09 f0       	breq	.+2      	; 0x456e <f_mkdir+0xcc>
    456c:	fa c0       	rjmp	.+500    	; 0x4762 <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    456e:	0d 85       	ldd	r16, Y+13	; 0x0d
    4570:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4572:	2e ef       	ldi	r18, 0xFE	; 254
    4574:	c2 2e       	mov	r12, r18
    4576:	2f ef       	ldi	r18, 0xFF	; 255
    4578:	d2 2e       	mov	r13, r18
    457a:	2f ef       	ldi	r18, 0xFF	; 255
    457c:	e2 2e       	mov	r14, r18
    457e:	2f ef       	ldi	r18, 0xFF	; 255
    4580:	f2 2e       	mov	r15, r18
    4582:	c8 0c       	add	r12, r8
    4584:	d9 1c       	adc	r13, r9
    4586:	ea 1c       	adc	r14, r10
    4588:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    458a:	f8 01       	movw	r30, r16
    458c:	82 8d       	ldd	r24, Z+26	; 0x1a
    458e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4590:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4592:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4594:	02 97       	sbiw	r24, 0x02	; 2
    4596:	a1 09       	sbc	r26, r1
    4598:	b1 09       	sbc	r27, r1
    459a:	c8 16       	cp	r12, r24
    459c:	d9 06       	cpc	r13, r25
    459e:	ea 06       	cpc	r14, r26
    45a0:	fb 06       	cpc	r15, r27
    45a2:	20 f0       	brcs	.+8      	; 0x45ac <f_mkdir+0x10a>
    45a4:	44 24       	eor	r4, r4
    45a6:	55 24       	eor	r5, r5
    45a8:	32 01       	movw	r6, r4
    45aa:	14 c0       	rjmp	.+40     	; 0x45d4 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    45ac:	f8 01       	movw	r30, r16
    45ae:	22 81       	ldd	r18, Z+2	; 0x02
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e0       	ldi	r20, 0x00	; 0
    45b4:	50 e0       	ldi	r21, 0x00	; 0
    45b6:	c7 01       	movw	r24, r14
    45b8:	b6 01       	movw	r22, r12
    45ba:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    45be:	2b 01       	movw	r4, r22
    45c0:	3c 01       	movw	r6, r24
    45c2:	f8 01       	movw	r30, r16
    45c4:	86 a1       	ldd	r24, Z+38	; 0x26
    45c6:	97 a1       	ldd	r25, Z+39	; 0x27
    45c8:	a0 a5       	ldd	r26, Z+40	; 0x28
    45ca:	b1 a5       	ldd	r27, Z+41	; 0x29
    45cc:	48 0e       	add	r4, r24
    45ce:	59 1e       	adc	r5, r25
    45d0:	6a 1e       	adc	r6, r26
    45d2:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    45d4:	9e e2       	ldi	r25, 0x2E	; 46
    45d6:	29 2e       	mov	r2, r25
    45d8:	31 2c       	mov	r3, r1
    45da:	20 0e       	add	r2, r16
    45dc:	31 1e       	adc	r3, r17
    45de:	f1 01       	movw	r30, r2
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	92 e0       	ldi	r25, 0x02	; 2
    45e4:	01 c0       	rjmp	.+2      	; 0x45e8 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    45e6:	11 92       	st	Z+, r1
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	2f ef       	ldi	r18, 0xFF	; 255
    45ec:	8f 3f       	cpi	r24, 0xFF	; 255
    45ee:	92 07       	cpc	r25, r18
    45f0:	d1 f7       	brne	.-12     	; 0x45e6 <f_mkdir+0x144>
    45f2:	f1 01       	movw	r30, r2
    45f4:	8b e0       	ldi	r24, 0x0B	; 11
    45f6:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    45f8:	20 e2       	ldi	r18, 0x20	; 32
    45fa:	01 c0       	rjmp	.+2      	; 0x45fe <f_mkdir+0x15c>
    45fc:	21 93       	st	Z+, r18
    45fe:	01 97       	sbiw	r24, 0x01	; 1
    4600:	3f ef       	ldi	r19, 0xFF	; 255
    4602:	8f 3f       	cpi	r24, 0xFF	; 255
    4604:	93 07       	cpc	r25, r19
    4606:	d1 f7       	brne	.-12     	; 0x45fc <f_mkdir+0x15a>
    4608:	8e e2       	ldi	r24, 0x2E	; 46
    460a:	f8 01       	movw	r30, r16
    460c:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    460e:	80 e1       	ldi	r24, 0x10	; 16
    4610:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    4612:	0c 5b       	subi	r16, 0xBC	; 188
    4614:	1f 4f       	sbci	r17, 0xFF	; 255
    4616:	f8 01       	movw	r30, r16
    4618:	11 92       	st	Z+, r1
    461a:	11 92       	st	Z+, r1
    461c:	11 92       	st	Z+, r1
    461e:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4620:	88 a6       	std	Y+40, r8	; 0x28
    4622:	81 92       	st	Z+, r8
    4624:	8f 01       	movw	r16, r30
    4626:	89 2d       	mov	r24, r9
    4628:	99 27       	eor	r25, r25
    462a:	8f a3       	std	Y+39, r24	; 0x27
    462c:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    462e:	c5 01       	movw	r24, r10
    4630:	aa 27       	eor	r26, r26
    4632:	bb 27       	eor	r27, r27
    4634:	8e a3       	std	Y+38, r24	; 0x26
    4636:	07 50       	subi	r16, 0x07	; 7
    4638:	10 40       	sbci	r17, 0x00	; 0
    463a:	f8 01       	movw	r30, r16
    463c:	81 93       	st	Z+, r24
    463e:	8f 01       	movw	r16, r30
    4640:	89 2f       	mov	r24, r25
    4642:	99 27       	eor	r25, r25
    4644:	8d a3       	std	Y+37, r24	; 0x25
    4646:	80 83       	st	Z, r24
    4648:	03 54       	subi	r16, 0x43	; 67
    464a:	10 40       	sbci	r17, 0x00	; 0
    464c:	f1 01       	movw	r30, r2
    464e:	20 e2       	ldi	r18, 0x20	; 32
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	03 c0       	rjmp	.+6      	; 0x465a <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4654:	80 81       	ld	r24, Z
    4656:	80 a3       	std	Z+32, r24	; 0x20
    4658:	31 96       	adiw	r30, 0x01	; 1
    465a:	21 50       	subi	r18, 0x01	; 1
    465c:	30 40       	sbci	r19, 0x00	; 0
    465e:	8f ef       	ldi	r24, 0xFF	; 255
    4660:	2f 3f       	cpi	r18, 0xFF	; 255
    4662:	38 07       	cpc	r19, r24
    4664:	b9 f7       	brne	.-18     	; 0x4654 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    4666:	01 5b       	subi	r16, 0xB1	; 177
    4668:	1f 4f       	sbci	r17, 0xFF	; 255
    466a:	8e e2       	ldi	r24, 0x2E	; 46
    466c:	f8 01       	movw	r30, r16
    466e:	80 83       	st	Z, r24
    4670:	0f 54       	subi	r16, 0x4F	; 79
    4672:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4674:	2b 89       	ldd	r18, Y+19	; 0x13
    4676:	3c 89       	ldd	r19, Y+20	; 0x14
    4678:	4d 89       	ldd	r20, Y+21	; 0x15
    467a:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    467c:	ed 85       	ldd	r30, Y+13	; 0x0d
    467e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4680:	80 81       	ld	r24, Z
    4682:	83 30       	cpi	r24, 0x03	; 3
    4684:	69 f4       	brne	.+26     	; 0x46a0 <f_mkdir+0x1fe>
    4686:	82 a1       	ldd	r24, Z+34	; 0x22
    4688:	93 a1       	ldd	r25, Z+35	; 0x23
    468a:	a4 a1       	ldd	r26, Z+36	; 0x24
    468c:	b5 a1       	ldd	r27, Z+37	; 0x25
    468e:	28 17       	cp	r18, r24
    4690:	39 07       	cpc	r19, r25
    4692:	4a 07       	cpc	r20, r26
    4694:	5b 07       	cpc	r21, r27
    4696:	21 f4       	brne	.+8      	; 0x46a0 <f_mkdir+0x1fe>
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e0       	ldi	r20, 0x00	; 0
    469e:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    46a0:	08 59       	subi	r16, 0x98	; 152
    46a2:	1f 4f       	sbci	r17, 0xFF	; 255
    46a4:	f8 01       	movw	r30, r16
    46a6:	21 93       	st	Z+, r18
    46a8:	8f 01       	movw	r16, r30
    46aa:	83 2f       	mov	r24, r19
    46ac:	99 27       	eor	r25, r25
    46ae:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    46b0:	ca 01       	movw	r24, r20
    46b2:	aa 27       	eor	r26, r26
    46b4:	bb 27       	eor	r27, r27
    46b6:	07 50       	subi	r16, 0x07	; 7
    46b8:	10 40       	sbci	r17, 0x00	; 0
    46ba:	f8 01       	movw	r30, r16
    46bc:	81 93       	st	Z+, r24
    46be:	89 2f       	mov	r24, r25
    46c0:	99 27       	eor	r25, r25
    46c2:	80 83       	st	Z, r24
    46c4:	73 01       	movw	r14, r6
    46c6:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    46c8:	01 e0       	ldi	r16, 0x01	; 1
    46ca:	1e c0       	rjmp	.+60     	; 0x4708 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46cc:	c2 a6       	std	Z+42, r12	; 0x2a
    46ce:	d3 a6       	std	Z+43, r13	; 0x2b
    46d0:	e4 a6       	std	Z+44, r14	; 0x2c
    46d2:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    46d4:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    46d6:	cf 01       	movw	r24, r30
    46d8:	40 e0       	ldi	r20, 0x00	; 0
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	60 e0       	ldi	r22, 0x00	; 0
    46de:	70 e0       	ldi	r23, 0x00	; 0
    46e0:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
    46e4:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    46e6:	88 23       	and	r24, r24
    46e8:	e1 f5       	brne	.+120    	; 0x4762 <f_mkdir+0x2c0>
    46ea:	f1 01       	movw	r30, r2
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	92 e0       	ldi	r25, 0x02	; 2
    46f0:	01 c0       	rjmp	.+2      	; 0x46f4 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    46f2:	11 92       	st	Z+, r1
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	2f ef       	ldi	r18, 0xFF	; 255
    46f8:	8f 3f       	cpi	r24, 0xFF	; 255
    46fa:	92 07       	cpc	r25, r18
    46fc:	d1 f7       	brne	.-12     	; 0x46f2 <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46fe:	08 94       	sec
    4700:	c1 1c       	adc	r12, r1
    4702:	d1 1c       	adc	r13, r1
    4704:	e1 1c       	adc	r14, r1
    4706:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4708:	ed 85       	ldd	r30, Y+13	; 0x0d
    470a:	fe 85       	ldd	r31, Y+14	; 0x0e
    470c:	9c 2d       	mov	r25, r12
    470e:	94 19       	sub	r25, r4
    4710:	82 81       	ldd	r24, Z+2	; 0x02
    4712:	98 17       	cp	r25, r24
    4714:	d8 f2       	brcs	.-74     	; 0x46cc <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    4716:	ce 01       	movw	r24, r28
    4718:	0d 96       	adiw	r24, 0x0d	; 13
    471a:	0e 94 ad 10 	call	0x215a	; 0x215a <dir_register>
    471e:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4720:	88 23       	and	r24, r24
    4722:	39 f0       	breq	.+14     	; 0x4732 <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4724:	8d 85       	ldd	r24, Y+13	; 0x0d
    4726:	9e 85       	ldd	r25, Y+14	; 0x0e
    4728:	b5 01       	movw	r22, r10
    472a:	a4 01       	movw	r20, r8
    472c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <remove_chain>
    4730:	18 c0       	rjmp	.+48     	; 0x4762 <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    4732:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4734:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    4736:	80 e1       	ldi	r24, 0x10	; 16
    4738:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    473a:	16 8a       	std	Z+22, r1	; 0x16
    473c:	17 8a       	std	Z+23, r1	; 0x17
    473e:	10 8e       	std	Z+24, r1	; 0x18
    4740:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    4742:	38 a5       	ldd	r19, Y+40	; 0x28
    4744:	32 8f       	std	Z+26, r19	; 0x1a
    4746:	8f a1       	ldd	r24, Y+39	; 0x27
    4748:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    474a:	2e a1       	ldd	r18, Y+38	; 0x26
    474c:	24 8b       	std	Z+20, r18	; 0x14
    474e:	3d a1       	ldd	r19, Y+37	; 0x25
    4750:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    4752:	ed 85       	ldd	r30, Y+13	; 0x0d
    4754:	fe 85       	ldd	r31, Y+14	; 0x0e
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    475a:	cf 01       	movw	r24, r30
    475c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <sync>
    4760:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    4762:	81 2f       	mov	r24, r17
    4764:	a8 96       	adiw	r28, 0x28	; 40
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	cf 91       	pop	r28
    476c:	df 91       	pop	r29
    476e:	1f 91       	pop	r17
    4770:	0f 91       	pop	r16
    4772:	ff 90       	pop	r15
    4774:	ef 90       	pop	r14
    4776:	df 90       	pop	r13
    4778:	cf 90       	pop	r12
    477a:	bf 90       	pop	r11
    477c:	af 90       	pop	r10
    477e:	9f 90       	pop	r9
    4780:	8f 90       	pop	r8
    4782:	7f 90       	pop	r7
    4784:	6f 90       	pop	r6
    4786:	5f 90       	pop	r5
    4788:	4f 90       	pop	r4
    478a:	3f 90       	pop	r3
    478c:	2f 90       	pop	r2
    478e:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    4790:	11 e0       	ldi	r17, 0x01	; 1
    4792:	e7 cf       	rjmp	.-50     	; 0x4762 <f_mkdir+0x2c0>

00004794 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4794:	ef 92       	push	r14
    4796:	ff 92       	push	r15
    4798:	0f 93       	push	r16
    479a:	1f 93       	push	r17
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	cd b7       	in	r28, 0x3d	; 61
    47a2:	de b7       	in	r29, 0x3e	; 62
    47a4:	a4 97       	sbiw	r28, 0x24	; 36
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	de bf       	out	0x3e, r29	; 62
    47aa:	8b a3       	std	Y+35, r24	; 0x23
    47ac:	9c a3       	std	Y+36, r25	; 0x24
    47ae:	e6 2e       	mov	r14, r22
    47b0:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    47b2:	8e 01       	movw	r16, r28
    47b4:	03 5f       	subi	r16, 0xF3	; 243
    47b6:	1f 4f       	sbci	r17, 0xFF	; 255
    47b8:	ce 01       	movw	r24, r28
    47ba:	83 96       	adiw	r24, 0x23	; 35
    47bc:	b8 01       	movw	r22, r16
    47be:	41 e0       	ldi	r20, 0x01	; 1
    47c0:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
	if (res == FR_OK) {
    47c4:	88 23       	and	r24, r24
    47c6:	09 f5       	brne	.+66     	; 0x480a <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    47c8:	ce 01       	movw	r24, r28
    47ca:	01 96       	adiw	r24, 0x01	; 1
    47cc:	89 a3       	std	Y+33, r24	; 0x21
    47ce:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    47d0:	6b a1       	ldd	r22, Y+35	; 0x23
    47d2:	7c a1       	ldd	r23, Y+36	; 0x24
    47d4:	c8 01       	movw	r24, r16
    47d6:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    47da:	88 23       	and	r24, r24
    47dc:	b1 f4       	brne	.+44     	; 0x480a <f_chmod+0x76>
			dir = dj.dir;
    47de:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47e0:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    47e2:	30 97       	sbiw	r30, 0x00	; 0
    47e4:	11 f4       	brne	.+4      	; 0x47ea <f_chmod+0x56>
    47e6:	86 e0       	ldi	r24, 0x06	; 6
    47e8:	10 c0       	rjmp	.+32     	; 0x480a <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    47ea:	9f 2d       	mov	r25, r15
    47ec:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    47ee:	89 2f       	mov	r24, r25
    47f0:	80 95       	com	r24
    47f2:	23 85       	ldd	r18, Z+11	; 0x0b
    47f4:	82 23       	and	r24, r18
    47f6:	9e 21       	and	r25, r14
    47f8:	89 2b       	or	r24, r25
    47fa:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    47fc:	ed 85       	ldd	r30, Y+13	; 0x0d
    47fe:	fe 85       	ldd	r31, Y+14	; 0x0e
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4804:	cf 01       	movw	r24, r30
    4806:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    480a:	a4 96       	adiw	r28, 0x24	; 36
    480c:	cd bf       	out	0x3d, r28	; 61
    480e:	de bf       	out	0x3e, r29	; 62
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	1f 91       	pop	r17
    4816:	0f 91       	pop	r16
    4818:	ff 90       	pop	r15
    481a:	ef 90       	pop	r14
    481c:	08 95       	ret

0000481e <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    481e:	ef 92       	push	r14
    4820:	ff 92       	push	r15
    4822:	0f 93       	push	r16
    4824:	1f 93       	push	r17
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	a4 97       	sbiw	r28, 0x24	; 36
    4830:	cd bf       	out	0x3d, r28	; 61
    4832:	de bf       	out	0x3e, r29	; 62
    4834:	8b a3       	std	Y+35, r24	; 0x23
    4836:	9c a3       	std	Y+36, r25	; 0x24
    4838:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    483a:	4d e0       	ldi	r20, 0x0D	; 13
    483c:	e4 2e       	mov	r14, r20
    483e:	f1 2c       	mov	r15, r1
    4840:	ec 0e       	add	r14, r28
    4842:	fd 1e       	adc	r15, r29
    4844:	ce 01       	movw	r24, r28
    4846:	83 96       	adiw	r24, 0x23	; 35
    4848:	b7 01       	movw	r22, r14
    484a:	41 e0       	ldi	r20, 0x01	; 1
    484c:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
	if (res == FR_OK) {
    4850:	88 23       	and	r24, r24
    4852:	41 f5       	brne	.+80     	; 0x48a4 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    4854:	ce 01       	movw	r24, r28
    4856:	01 96       	adiw	r24, 0x01	; 1
    4858:	89 a3       	std	Y+33, r24	; 0x21
    485a:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    485c:	6b a1       	ldd	r22, Y+35	; 0x23
    485e:	7c a1       	ldd	r23, Y+36	; 0x24
    4860:	c7 01       	movw	r24, r14
    4862:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4866:	88 23       	and	r24, r24
    4868:	e9 f4       	brne	.+58     	; 0x48a4 <f_utime+0x86>
			dir = dj.dir;
    486a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    486c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    486e:	30 97       	sbiw	r30, 0x00	; 0
    4870:	11 f4       	brne	.+4      	; 0x4876 <f_utime+0x58>
    4872:	86 e0       	ldi	r24, 0x06	; 6
    4874:	17 c0       	rjmp	.+46     	; 0x48a4 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4876:	d8 01       	movw	r26, r16
    4878:	16 96       	adiw	r26, 0x06	; 6
    487a:	8c 91       	ld	r24, X
    487c:	16 97       	sbiw	r26, 0x06	; 6
    487e:	86 8b       	std	Z+22, r24	; 0x16
    4880:	17 96       	adiw	r26, 0x07	; 7
    4882:	8c 91       	ld	r24, X
    4884:	17 97       	sbiw	r26, 0x07	; 7
    4886:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4888:	14 96       	adiw	r26, 0x04	; 4
    488a:	8c 91       	ld	r24, X
    488c:	14 97       	sbiw	r26, 0x04	; 4
    488e:	80 8f       	std	Z+24, r24	; 0x18
    4890:	15 96       	adiw	r26, 0x05	; 5
    4892:	8c 91       	ld	r24, X
    4894:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    4896:	ed 85       	ldd	r30, Y+13	; 0x0d
    4898:	fe 85       	ldd	r31, Y+14	; 0x0e
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    489e:	cf 01       	movw	r24, r30
    48a0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    48a4:	a4 96       	adiw	r28, 0x24	; 36
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	1f 91       	pop	r17
    48b0:	0f 91       	pop	r16
    48b2:	ff 90       	pop	r15
    48b4:	ef 90       	pop	r14
    48b6:	08 95       	ret

000048b8 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    48b8:	cf 92       	push	r12
    48ba:	df 92       	push	r13
    48bc:	ef 92       	push	r14
    48be:	ff 92       	push	r15
    48c0:	0f 93       	push	r16
    48c2:	1f 93       	push	r17
    48c4:	df 93       	push	r29
    48c6:	cf 93       	push	r28
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	cf 54       	subi	r28, 0x4F	; 79
    48ce:	d0 40       	sbci	r29, 0x00	; 0
    48d0:	cd bf       	out	0x3d, r28	; 61
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	8e 01       	movw	r16, r28
    48d6:	02 5b       	subi	r16, 0xB2	; 178
    48d8:	1f 4f       	sbci	r17, 0xFF	; 255
    48da:	d8 01       	movw	r26, r16
    48dc:	8d 93       	st	X+, r24
    48de:	9c 93       	st	X, r25
    48e0:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    48e2:	ce 01       	movw	r24, r28
    48e4:	01 96       	adiw	r24, 0x01	; 1
    48e6:	8e ab       	std	Y+54, r24	; 0x36
    48e8:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    48ea:	a2 e2       	ldi	r26, 0x22	; 34
    48ec:	ea 2e       	mov	r14, r26
    48ee:	f1 2c       	mov	r15, r1
    48f0:	ec 0e       	add	r14, r28
    48f2:	fd 1e       	adc	r15, r29
    48f4:	c8 01       	movw	r24, r16
    48f6:	b7 01       	movw	r22, r14
    48f8:	41 e0       	ldi	r20, 0x01	; 1
    48fa:	0e 94 8a 13 	call	0x2714	; 0x2714 <chk_mounted>
	if (res == FR_OK) {
    48fe:	88 23       	and	r24, r24
    4900:	09 f0       	breq	.+2      	; 0x4904 <f_rename+0x4c>
    4902:	f4 c0       	rjmp	.+488    	; 0x4aec <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4904:	8a a1       	ldd	r24, Y+34	; 0x22
    4906:	9b a1       	ldd	r25, Y+35	; 0x23
    4908:	88 af       	std	Y+56, r24	; 0x38
    490a:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    490c:	f8 01       	movw	r30, r16
    490e:	60 81       	ld	r22, Z
    4910:	71 81       	ldd	r23, Z+1	; 0x01
    4912:	c7 01       	movw	r24, r14
    4914:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4918:	88 23       	and	r24, r24
    491a:	09 f0       	breq	.+2      	; 0x491e <f_rename+0x66>
    491c:	e7 c0       	rjmp	.+462    	; 0x4aec <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    491e:	8c a9       	ldd	r24, Y+52	; 0x34
    4920:	9d a9       	ldd	r25, Y+53	; 0x35
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	11 f4       	brne	.+4      	; 0x492a <f_rename+0x72>
    4926:	84 e0       	ldi	r24, 0x04	; 4
    4928:	e1 c0       	rjmp	.+450    	; 0x4aec <f_rename+0x234>
    492a:	dc 01       	movw	r26, r24
    492c:	fe 01       	movw	r30, r28
    492e:	3d 96       	adiw	r30, 0x0d	; 13
    4930:	04 c0       	rjmp	.+8      	; 0x493a <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4932:	1a 96       	adiw	r26, 0x0a	; 10
    4934:	8c 91       	ld	r24, X
    4936:	1a 97       	sbiw	r26, 0x0a	; 10
    4938:	81 93       	st	Z+, r24
    493a:	11 96       	adiw	r26, 0x01	; 1
    493c:	ee 15       	cp	r30, r14
    493e:	ff 05       	cpc	r31, r15
    4940:	c1 f7       	brne	.-16     	; 0x4932 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4942:	de 01       	movw	r26, r28
    4944:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    4946:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4948:	9d 01       	movw	r18, r26
    494a:	02 c0       	rjmp	.+4      	; 0x4950 <f_rename+0x98>
    494c:	81 91       	ld	r24, Z+
    494e:	8d 93       	st	X+, r24
    4950:	e2 17       	cp	r30, r18
    4952:	f3 07       	cpc	r31, r19
    4954:	d9 f7       	brne	.-10     	; 0x494c <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    4956:	8e 01       	movw	r16, r28
    4958:	08 5c       	subi	r16, 0xC8	; 200
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	c8 01       	movw	r24, r16
    495e:	b6 01       	movw	r22, r12
    4960:	0e 94 b1 11 	call	0x2362	; 0x2362 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    4964:	88 23       	and	r24, r24
    4966:	11 f4       	brne	.+4      	; 0x496c <f_rename+0xb4>
    4968:	88 e0       	ldi	r24, 0x08	; 8
    496a:	c0 c0       	rjmp	.+384    	; 0x4aec <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    496c:	84 30       	cpi	r24, 0x04	; 4
    496e:	09 f0       	breq	.+2      	; 0x4972 <f_rename+0xba>
    4970:	bd c0       	rjmp	.+378    	; 0x4aec <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    4972:	c8 01       	movw	r24, r16
    4974:	0e 94 ad 10 	call	0x215a	; 0x215a <dir_register>
		if (res == FR_OK) {
    4978:	88 23       	and	r24, r24
    497a:	09 f0       	breq	.+2      	; 0x497e <f_rename+0xc6>
    497c:	b7 c0       	rjmp	.+366    	; 0x4aec <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    497e:	fe 01       	movw	r30, r28
    4980:	e6 5b       	subi	r30, 0xB6	; 182
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	40 81       	ld	r20, Z
    4986:	51 81       	ldd	r21, Z+1	; 0x01
    4988:	da 01       	movw	r26, r20
    498a:	fe 01       	movw	r30, r28
    498c:	3f 96       	adiw	r30, 0x0f	; 15
    498e:	04 c0       	rjmp	.+8      	; 0x4998 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4990:	81 91       	ld	r24, Z+
    4992:	1c 96       	adiw	r26, 0x0c	; 12
    4994:	8c 93       	st	X, r24
    4996:	1c 97       	sbiw	r26, 0x0c	; 12
    4998:	11 96       	adiw	r26, 0x01	; 1
    499a:	ee 15       	cp	r30, r14
    499c:	ff 05       	cpc	r31, r15
    499e:	c1 f7       	brne	.-16     	; 0x4990 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    49a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a2:	80 62       	ori	r24, 0x20	; 32
    49a4:	da 01       	movw	r26, r20
    49a6:	1b 96       	adiw	r26, 0x0b	; 11
    49a8:	8c 93       	st	X, r24
    49aa:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    49ac:	ea a1       	ldd	r30, Y+34	; 0x22
    49ae:	fb a1       	ldd	r31, Y+35	; 0x23
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    49b4:	1b 96       	adiw	r26, 0x0b	; 11
    49b6:	8c 91       	ld	r24, X
    49b8:	1b 97       	sbiw	r26, 0x0b	; 11
    49ba:	84 ff       	sbrs	r24, 4
    49bc:	8b c0       	rjmp	.+278    	; 0x4ad4 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    49be:	c8 ac       	ldd	r12, Y+56	; 0x38
    49c0:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    49c2:	5a 96       	adiw	r26, 0x1a	; 26
    49c4:	2c 91       	ld	r18, X
    49c6:	5a 97       	sbiw	r26, 0x1a	; 26
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	54 96       	adiw	r26, 0x14	; 20
    49cc:	8c 91       	ld	r24, X
    49ce:	54 97       	sbiw	r26, 0x14	; 20
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	28 2b       	or	r18, r24
    49d4:	39 2b       	or	r19, r25
    49d6:	55 96       	adiw	r26, 0x15	; 21
    49d8:	9c 91       	ld	r25, X
    49da:	55 97       	sbiw	r26, 0x15	; 21
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	28 2b       	or	r18, r24
    49e0:	39 2b       	or	r19, r25
    49e2:	5b 96       	adiw	r26, 0x1b	; 27
    49e4:	9c 91       	ld	r25, X
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	28 2b       	or	r18, r24
    49ea:	39 2b       	or	r19, r25
    49ec:	79 01       	movw	r14, r18
    49ee:	00 e0       	ldi	r16, 0x00	; 0
    49f0:	10 e0       	ldi	r17, 0x00	; 0
    49f2:	8e ef       	ldi	r24, 0xFE	; 254
    49f4:	9f ef       	ldi	r25, 0xFF	; 255
    49f6:	af ef       	ldi	r26, 0xFF	; 255
    49f8:	bf ef       	ldi	r27, 0xFF	; 255
    49fa:	e8 0e       	add	r14, r24
    49fc:	f9 1e       	adc	r15, r25
    49fe:	0a 1f       	adc	r16, r26
    4a00:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4a02:	f6 01       	movw	r30, r12
    4a04:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a06:	93 8d       	ldd	r25, Z+27	; 0x1b
    4a08:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4a0a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4a0c:	02 97       	sbiw	r24, 0x02	; 2
    4a0e:	a1 09       	sbc	r26, r1
    4a10:	b1 09       	sbc	r27, r1
    4a12:	e8 16       	cp	r14, r24
    4a14:	f9 06       	cpc	r15, r25
    4a16:	0a 07       	cpc	r16, r26
    4a18:	1b 07       	cpc	r17, r27
    4a1a:	08 f0       	brcs	.+2      	; 0x4a1e <f_rename+0x166>
    4a1c:	66 c0       	rjmp	.+204    	; 0x4aea <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4a1e:	22 81       	ldd	r18, Z+2	; 0x02
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e0       	ldi	r20, 0x00	; 0
    4a24:	50 e0       	ldi	r21, 0x00	; 0
    4a26:	c8 01       	movw	r24, r16
    4a28:	b7 01       	movw	r22, r14
    4a2a:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    4a2e:	ab 01       	movw	r20, r22
    4a30:	bc 01       	movw	r22, r24
    4a32:	f6 01       	movw	r30, r12
    4a34:	86 a1       	ldd	r24, Z+38	; 0x26
    4a36:	97 a1       	ldd	r25, Z+39	; 0x27
    4a38:	a0 a5       	ldd	r26, Z+40	; 0x28
    4a3a:	b1 a5       	ldd	r27, Z+41	; 0x29
    4a3c:	48 0f       	add	r20, r24
    4a3e:	59 1f       	adc	r21, r25
    4a40:	6a 1f       	adc	r22, r26
    4a42:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4a44:	41 15       	cp	r20, r1
    4a46:	51 05       	cpc	r21, r1
    4a48:	61 05       	cpc	r22, r1
    4a4a:	71 05       	cpc	r23, r1
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <f_rename+0x198>
    4a4e:	4d c0       	rjmp	.+154    	; 0x4aea <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4a50:	c6 01       	movw	r24, r12
    4a52:	0e 94 77 09 	call	0x12ee	; 0x12ee <move_window>
					dir = dj_new.fs->win+32;
    4a56:	a8 ad       	ldd	r26, Y+56	; 0x38
    4a58:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4a5a:	88 23       	and	r24, r24
    4a5c:	09 f0       	breq	.+2      	; 0x4a60 <f_rename+0x1a8>
    4a5e:	46 c0       	rjmp	.+140    	; 0x4aec <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4a60:	bd 01       	movw	r22, r26
    4a62:	62 5b       	subi	r22, 0xB2	; 178
    4a64:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4a66:	fb 01       	movw	r30, r22
    4a68:	81 81       	ldd	r24, Z+1	; 0x01
    4a6a:	8e 32       	cpi	r24, 0x2E	; 46
    4a6c:	99 f5       	brne	.+102    	; 0x4ad4 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4a6e:	8c 91       	ld	r24, X
    4a70:	83 30       	cpi	r24, 0x03	; 3
    4a72:	b1 f4       	brne	.+44     	; 0x4aa0 <f_rename+0x1e8>
    4a74:	fe 01       	movw	r30, r28
    4a76:	fe 96       	adiw	r30, 0x3e	; 62
    4a78:	20 81       	ld	r18, Z
    4a7a:	31 81       	ldd	r19, Z+1	; 0x01
    4a7c:	42 81       	ldd	r20, Z+2	; 0x02
    4a7e:	53 81       	ldd	r21, Z+3	; 0x03
    4a80:	92 96       	adiw	r26, 0x22	; 34
    4a82:	8d 91       	ld	r24, X+
    4a84:	9d 91       	ld	r25, X+
    4a86:	0d 90       	ld	r0, X+
    4a88:	bc 91       	ld	r27, X
    4a8a:	a0 2d       	mov	r26, r0
    4a8c:	28 17       	cp	r18, r24
    4a8e:	39 07       	cpc	r19, r25
    4a90:	4a 07       	cpc	r20, r26
    4a92:	5b 07       	cpc	r21, r27
    4a94:	29 f4       	brne	.+10     	; 0x4aa0 <f_rename+0x1e8>
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	50 e0       	ldi	r21, 0x00	; 0
    4a9e:	06 c0       	rjmp	.+12     	; 0x4aac <f_rename+0x1f4>
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	fe 96       	adiw	r30, 0x3e	; 62
    4aa4:	20 81       	ld	r18, Z
    4aa6:	31 81       	ldd	r19, Z+1	; 0x01
    4aa8:	42 81       	ldd	r20, Z+2	; 0x02
    4aaa:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4aac:	db 01       	movw	r26, r22
    4aae:	5a 96       	adiw	r26, 0x1a	; 26
    4ab0:	2c 93       	st	X, r18
    4ab2:	5a 97       	sbiw	r26, 0x1a	; 26
    4ab4:	83 2f       	mov	r24, r19
    4ab6:	99 27       	eor	r25, r25
    4ab8:	5b 96       	adiw	r26, 0x1b	; 27
    4aba:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4abc:	ca 01       	movw	r24, r20
    4abe:	aa 27       	eor	r26, r26
    4ac0:	bb 27       	eor	r27, r27
    4ac2:	fb 01       	movw	r30, r22
    4ac4:	84 8b       	std	Z+20, r24	; 0x14
    4ac6:	89 2f       	mov	r24, r25
    4ac8:	99 27       	eor	r25, r25
    4aca:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4acc:	e8 ad       	ldd	r30, Y+56	; 0x38
    4ace:	f9 ad       	ldd	r31, Y+57	; 0x39
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	82 96       	adiw	r24, 0x22	; 34
    4ad8:	0e 94 04 11 	call	0x2208	; 0x2208 <dir_remove>
				if (res == FR_OK)
    4adc:	88 23       	and	r24, r24
    4ade:	31 f4       	brne	.+12     	; 0x4aec <f_rename+0x234>
					res = sync(dj_old.fs);
    4ae0:	8a a1       	ldd	r24, Y+34	; 0x22
    4ae2:	9b a1       	ldd	r25, Y+35	; 0x23
    4ae4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <sync>
    4ae8:	01 c0       	rjmp	.+2      	; 0x4aec <f_rename+0x234>
    4aea:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4aec:	c1 5b       	subi	r28, 0xB1	; 177
    4aee:	df 4f       	sbci	r29, 0xFF	; 255
    4af0:	cd bf       	out	0x3d, r28	; 61
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	cf 91       	pop	r28
    4af6:	df 91       	pop	r29
    4af8:	1f 91       	pop	r17
    4afa:	0f 91       	pop	r16
    4afc:	ff 90       	pop	r15
    4afe:	ef 90       	pop	r14
    4b00:	df 90       	pop	r13
    4b02:	cf 90       	pop	r12
    4b04:	08 95       	ret

00004b06 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4b06:	2f 92       	push	r2
    4b08:	3f 92       	push	r3
    4b0a:	4f 92       	push	r4
    4b0c:	5f 92       	push	r5
    4b0e:	6f 92       	push	r6
    4b10:	7f 92       	push	r7
    4b12:	8f 92       	push	r8
    4b14:	9f 92       	push	r9
    4b16:	af 92       	push	r10
    4b18:	bf 92       	push	r11
    4b1a:	cf 92       	push	r12
    4b1c:	df 92       	push	r13
    4b1e:	ef 92       	push	r14
    4b20:	ff 92       	push	r15
    4b22:	0f 93       	push	r16
    4b24:	1f 93       	push	r17
    4b26:	df 93       	push	r29
    4b28:	cf 93       	push	r28
    4b2a:	cd b7       	in	r28, 0x3d	; 61
    4b2c:	de b7       	in	r29, 0x3e	; 62
    4b2e:	a4 97       	sbiw	r28, 0x24	; 36
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	de bf       	out	0x3e, r29	; 62
    4b34:	68 a3       	std	Y+32, r22	; 0x20
    4b36:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4b38:	82 30       	cpi	r24, 0x02	; 2
    4b3a:	10 f0       	brcs	.+4      	; 0x4b40 <f_mkfs+0x3a>
    4b3c:	8b e0       	ldi	r24, 0x0B	; 11
    4b3e:	e2 c4       	rjmp	.+2500   	; 0x5504 <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4b40:	28 a1       	ldd	r18, Y+32	; 0x20
    4b42:	22 30       	cpi	r18, 0x02	; 2
    4b44:	08 f0       	brcs	.+2      	; 0x4b48 <f_mkfs+0x42>
    4b46:	db c4       	rjmp	.+2486   	; 0x54fe <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4b48:	a8 2f       	mov	r26, r24
    4b4a:	b0 e0       	ldi	r27, 0x00	; 0
    4b4c:	aa 0f       	add	r26, r26
    4b4e:	bb 1f       	adc	r27, r27
    4b50:	fd 01       	movw	r30, r26
    4b52:	e2 5f       	subi	r30, 0xF2	; 242
    4b54:	fb 4c       	sbci	r31, 0xCB	; 203
    4b56:	c0 80       	ld	r12, Z
    4b58:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4b5a:	c1 14       	cp	r12, r1
    4b5c:	d1 04       	cpc	r13, r1
    4b5e:	11 f4       	brne	.+4      	; 0x4b64 <f_mkfs+0x5e>
    4b60:	8c e0       	ldi	r24, 0x0C	; 12
    4b62:	d0 c4       	rjmp	.+2464   	; 0x5504 <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4b64:	f6 01       	movw	r30, r12
    4b66:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4b68:	ae 54       	subi	r26, 0x4E	; 78
    4b6a:	b4 4d       	sbci	r27, 0xD4	; 212
    4b6c:	fc 91       	ld	r31, X
    4b6e:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4b70:	8f 2f       	mov	r24, r31
    4b72:	0e 94 c6 05 	call	0xb8c	; 0xb8c <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4b76:	80 ff       	sbrs	r24, 0
    4b78:	02 c0       	rjmp	.+4      	; 0x4b7e <f_mkfs+0x78>
    4b7a:	83 e0       	ldi	r24, 0x03	; 3
    4b7c:	c3 c4       	rjmp	.+2438   	; 0x5504 <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4b7e:	82 ff       	sbrs	r24, 2
    4b80:	02 c0       	rjmp	.+4      	; 0x4b86 <f_mkfs+0x80>
    4b82:	8a e0       	ldi	r24, 0x0A	; 10
    4b84:	bf c4       	rjmp	.+2430   	; 0x5504 <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4b86:	89 89       	ldd	r24, Y+17	; 0x11
    4b88:	61 e0       	ldi	r22, 0x01	; 1
    4b8a:	ae 01       	movw	r20, r28
    4b8c:	4f 5f       	subi	r20, 0xFF	; 255
    4b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b90:	0e 94 8b 07 	call	0xf16	; 0xf16 <disk_ioctl>
    4b94:	88 23       	and	r24, r24
    4b96:	09 f0       	breq	.+2      	; 0x4b9a <f_mkfs+0x94>
    4b98:	b2 c4       	rjmp	.+2404   	; 0x54fe <f_mkfs+0x9f8>
    4b9a:	89 81       	ldd	r24, Y+1	; 0x01
    4b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9e:	ab 81       	ldd	r26, Y+3	; 0x03
    4ba0:	bc 81       	ldd	r27, Y+4	; 0x04
    4ba2:	80 3d       	cpi	r24, 0xD0	; 208
    4ba4:	27 e0       	ldi	r18, 0x07	; 7
    4ba6:	92 07       	cpc	r25, r18
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	a2 07       	cpc	r26, r18
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	b2 07       	cpc	r27, r18
    4bb0:	08 f4       	brcc	.+2      	; 0x4bb4 <f_mkfs+0xae>
    4bb2:	a5 c4       	rjmp	.+2378   	; 0x54fe <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4bb4:	81 50       	subi	r24, 0x01	; 1
    4bb6:	90 40       	sbci	r25, 0x00	; 0
    4bb8:	a0 4d       	sbci	r26, 0xD0	; 208
    4bba:	b7 40       	sbci	r27, 0x07	; 7
    4bbc:	40 f0       	brcs	.+16     	; 0x4bce <f_mkfs+0xc8>
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	a0 ed       	ldi	r26, 0xD0	; 208
    4bc4:	b7 e0       	ldi	r27, 0x07	; 7
    4bc6:	89 83       	std	Y+1, r24	; 0x01
    4bc8:	9a 83       	std	Y+2, r25	; 0x02
    4bca:	ab 83       	std	Y+3, r26	; 0x03
    4bcc:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4bce:	48 a1       	ldd	r20, Y+32	; 0x20
    4bd0:	44 23       	and	r20, r20
    4bd2:	29 f0       	breq	.+10     	; 0x4bde <f_mkfs+0xd8>
    4bd4:	1a 8e       	std	Y+26, r1	; 0x1a
    4bd6:	1b 8e       	std	Y+27, r1	; 0x1b
    4bd8:	1c 8e       	std	Y+28, r1	; 0x1c
    4bda:	1d 8e       	std	Y+29, r1	; 0x1d
    4bdc:	08 c0       	rjmp	.+16     	; 0x4bee <f_mkfs+0xe8>
    4bde:	8f e3       	ldi	r24, 0x3F	; 63
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	a0 e0       	ldi	r26, 0x00	; 0
    4be4:	b0 e0       	ldi	r27, 0x00	; 0
    4be6:	8a 8f       	std	Y+26, r24	; 0x1a
    4be8:	9b 8f       	std	Y+27, r25	; 0x1b
    4bea:	ac 8f       	std	Y+28, r26	; 0x1c
    4bec:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4bee:	89 80       	ldd	r8, Y+1	; 0x01
    4bf0:	9a 80       	ldd	r9, Y+2	; 0x02
    4bf2:	ab 80       	ldd	r10, Y+3	; 0x03
    4bf4:	bc 80       	ldd	r11, Y+4	; 0x04
    4bf6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4bf8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4bfa:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4bfc:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4bfe:	82 1a       	sub	r8, r18
    4c00:	93 0a       	sbc	r9, r19
    4c02:	a4 0a       	sbc	r10, r20
    4c04:	b5 0a       	sbc	r11, r21
    4c06:	89 82       	std	Y+1, r8	; 0x01
    4c08:	9a 82       	std	Y+2, r9	; 0x02
    4c0a:	ab 82       	std	Y+3, r10	; 0x03
    4c0c:	bc 82       	std	Y+4, r11	; 0x04
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	92 e0       	ldi	r25, 0x02	; 2
    4c12:	a0 e0       	ldi	r26, 0x00	; 0
    4c14:	b0 e0       	ldi	r27, 0x00	; 0
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4c1a:	73 01       	movw	r14, r6
    4c1c:	00 e0       	ldi	r16, 0x00	; 0
    4c1e:	10 e0       	ldi	r17, 0x00	; 0
    4c20:	09 c0       	rjmp	.+18     	; 0x4c34 <f_mkfs+0x12e>
    4c22:	88 0f       	add	r24, r24
    4c24:	99 1f       	adc	r25, r25
    4c26:	aa 1f       	adc	r26, r26
    4c28:	bb 1f       	adc	r27, r27
    4c2a:	2f 5f       	subi	r18, 0xFF	; 255
    4c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2e:	27 30       	cpi	r18, 0x07	; 7
    4c30:	31 05       	cpc	r19, r1
    4c32:	31 f0       	breq	.+12     	; 0x4c40 <f_mkfs+0x13a>
    4c34:	8e 15       	cp	r24, r14
    4c36:	9f 05       	cpc	r25, r15
    4c38:	a0 07       	cpc	r26, r16
    4c3a:	b1 07       	cpc	r27, r17
    4c3c:	91 f7       	brne	.-28     	; 0x4c22 <f_mkfs+0x11c>
    4c3e:	05 c0       	rjmp	.+10     	; 0x4c4a <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4c40:	8e 15       	cp	r24, r14
    4c42:	9f 05       	cpc	r25, r15
    4c44:	a0 07       	cpc	r26, r16
    4c46:	b1 07       	cpc	r27, r17
    4c48:	19 f4       	brne	.+6      	; 0x4c50 <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4c4a:	61 14       	cp	r6, r1
    4c4c:	71 04       	cpc	r7, r1
    4c4e:	11 f5       	brne	.+68     	; 0x4c94 <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4c50:	ef e0       	ldi	r30, 0x0F	; 15
    4c52:	f3 e3       	ldi	r31, 0x33	; 51
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	40 e0       	ldi	r20, 0x00	; 0
    4c5a:	50 e0       	ldi	r21, 0x00	; 0
    4c5c:	81 91       	ld	r24, Z+
    4c5e:	91 91       	ld	r25, Z+
    4c60:	a1 91       	ld	r26, Z+
    4c62:	b1 91       	ld	r27, Z+
    4c64:	b9 01       	movw	r22, r18
    4c66:	14 2f       	mov	r17, r20
    4c68:	05 2f       	mov	r16, r21
    4c6a:	2f 5f       	subi	r18, 0xFF	; 255
    4c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c70:	5f 4f       	sbci	r21, 0xFF	; 255
    4c72:	88 16       	cp	r8, r24
    4c74:	99 06       	cpc	r9, r25
    4c76:	aa 06       	cpc	r10, r26
    4c78:	bb 06       	cpc	r11, r27
    4c7a:	80 f3       	brcs	.-32     	; 0x4c5c <f_mkfs+0x156>
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	6d 83       	std	Y+5, r22	; 0x05
    4c80:	9e 83       	std	Y+6, r25	; 0x06
    4c82:	1f 83       	std	Y+7, r17	; 0x07
    4c84:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4c86:	fb 01       	movw	r30, r22
    4c88:	ee 0f       	add	r30, r30
    4c8a:	ff 1f       	adc	r31, r31
    4c8c:	e7 50       	subi	r30, 0x07	; 7
    4c8e:	fd 4c       	sbci	r31, 0xCD	; 205
    4c90:	60 80       	ld	r6, Z
    4c92:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	63 16       	cp	r6, r19
    4c98:	32 e0       	ldi	r19, 0x02	; 2
    4c9a:	73 06       	cpc	r7, r19
    4c9c:	18 f4       	brcc	.+6      	; 0x4ca4 <f_mkfs+0x19e>
    4c9e:	61 2c       	mov	r6, r1
    4ca0:	f2 e0       	ldi	r31, 0x02	; 2
    4ca2:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4ca4:	13 01       	movw	r2, r6
    4ca6:	23 2c       	mov	r2, r3
    4ca8:	33 24       	eor	r3, r3
    4caa:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4cac:	c1 01       	movw	r24, r2
    4cae:	a0 e0       	ldi	r26, 0x00	; 0
    4cb0:	b0 e0       	ldi	r27, 0x00	; 0
    4cb2:	8d 87       	std	Y+13, r24	; 0x0d
    4cb4:	9e 87       	std	Y+14, r25	; 0x0e
    4cb6:	af 87       	std	Y+15, r26	; 0x0f
    4cb8:	b8 8b       	std	Y+16, r27	; 0x10
    4cba:	c5 01       	movw	r24, r10
    4cbc:	b4 01       	movw	r22, r8
    4cbe:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cc0:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cc2:	4f 85       	ldd	r20, Y+15	; 0x0f
    4cc4:	58 89       	ldd	r21, Y+16	; 0x10
    4cc6:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    4cca:	c9 01       	movw	r24, r18
    4ccc:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4cce:	85 3f       	cpi	r24, 0xF5	; 245
    4cd0:	ef e0       	ldi	r30, 0x0F	; 15
    4cd2:	9e 07       	cpc	r25, r30
    4cd4:	e0 e0       	ldi	r30, 0x00	; 0
    4cd6:	ae 07       	cpc	r26, r30
    4cd8:	e0 e0       	ldi	r30, 0x00	; 0
    4cda:	be 07       	cpc	r27, r30
    4cdc:	08 f4       	brcc	.+2      	; 0x4ce0 <f_mkfs+0x1da>
    4cde:	28 c4       	rjmp	.+2128   	; 0x5530 <f_mkfs+0xa2a>
    4ce0:	f8 a1       	ldd	r31, Y+32	; 0x20
    4ce2:	2f 2f       	mov	r18, r31
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4ce6:	85 3f       	cpi	r24, 0xF5	; 245
    4ce8:	4f ef       	ldi	r20, 0xFF	; 255
    4cea:	94 07       	cpc	r25, r20
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	a4 07       	cpc	r26, r20
    4cf0:	40 e0       	ldi	r20, 0x00	; 0
    4cf2:	b4 07       	cpc	r27, r20
    4cf4:	50 f5       	brcc	.+84     	; 0x4d4a <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4cf6:	7c 01       	movw	r14, r24
    4cf8:	8d 01       	movw	r16, r26
    4cfa:	ee 0c       	add	r14, r14
    4cfc:	ff 1c       	adc	r15, r15
    4cfe:	00 1f       	adc	r16, r16
    4d00:	11 1f       	adc	r17, r17
    4d02:	83 e0       	ldi	r24, 0x03	; 3
    4d04:	92 e0       	ldi	r25, 0x02	; 2
    4d06:	a0 e0       	ldi	r26, 0x00	; 0
    4d08:	b0 e0       	ldi	r27, 0x00	; 0
    4d0a:	e8 0e       	add	r14, r24
    4d0c:	f9 1e       	adc	r15, r25
    4d0e:	0a 1f       	adc	r16, r26
    4d10:	1b 1f       	adc	r17, r27
    4d12:	69 e0       	ldi	r22, 0x09	; 9
    4d14:	16 95       	lsr	r17
    4d16:	07 95       	ror	r16
    4d18:	f7 94       	ror	r15
    4d1a:	e7 94       	ror	r14
    4d1c:	6a 95       	dec	r22
    4d1e:	d1 f7       	brne	.-12     	; 0x4d14 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4d20:	2f 5f       	subi	r18, 0xFF	; 255
    4d22:	3f 4f       	sbci	r19, 0xFF	; 255
    4d24:	c9 01       	movw	r24, r18
    4d26:	aa 27       	eor	r26, r26
    4d28:	97 fd       	sbrc	r25, 7
    4d2a:	a0 95       	com	r26
    4d2c:	ba 2f       	mov	r27, r26
    4d2e:	8e 8b       	std	Y+22, r24	; 0x16
    4d30:	9f 8b       	std	Y+23, r25	; 0x17
    4d32:	a8 8f       	std	Y+24, r26	; 0x18
    4d34:	b9 8f       	std	Y+25, r27	; 0x19
    4d36:	20 e2       	ldi	r18, 0x20	; 32
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	40 e0       	ldi	r20, 0x00	; 0
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	2a 8b       	std	Y+18, r18	; 0x12
    4d40:	3b 8b       	std	Y+19, r19	; 0x13
    4d42:	4c 8b       	std	Y+20, r20	; 0x14
    4d44:	5d 8b       	std	Y+21, r21	; 0x15
    4d46:	32 e0       	ldi	r19, 0x02	; 2
    4d48:	2a c0       	rjmp	.+84     	; 0x4d9e <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4d4a:	7c 01       	movw	r14, r24
    4d4c:	8d 01       	movw	r16, r26
    4d4e:	52 e0       	ldi	r21, 0x02	; 2
    4d50:	ee 0c       	add	r14, r14
    4d52:	ff 1c       	adc	r15, r15
    4d54:	00 1f       	adc	r16, r16
    4d56:	11 1f       	adc	r17, r17
    4d58:	5a 95       	dec	r21
    4d5a:	d1 f7       	brne	.-12     	; 0x4d50 <f_mkfs+0x24a>
    4d5c:	87 e0       	ldi	r24, 0x07	; 7
    4d5e:	92 e0       	ldi	r25, 0x02	; 2
    4d60:	a0 e0       	ldi	r26, 0x00	; 0
    4d62:	b0 e0       	ldi	r27, 0x00	; 0
    4d64:	e8 0e       	add	r14, r24
    4d66:	f9 1e       	adc	r15, r25
    4d68:	0a 1f       	adc	r16, r26
    4d6a:	1b 1f       	adc	r17, r27
    4d6c:	49 e0       	ldi	r20, 0x09	; 9
    4d6e:	16 95       	lsr	r17
    4d70:	07 95       	ror	r16
    4d72:	f7 94       	ror	r15
    4d74:	e7 94       	ror	r14
    4d76:	4a 95       	dec	r20
    4d78:	d1 f7       	brne	.-12     	; 0x4d6e <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4d7a:	81 e2       	ldi	r24, 0x21	; 33
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	82 1b       	sub	r24, r18
    4d80:	93 0b       	sbc	r25, r19
    4d82:	9c 01       	movw	r18, r24
    4d84:	44 27       	eor	r20, r20
    4d86:	37 fd       	sbrc	r19, 7
    4d88:	40 95       	com	r20
    4d8a:	54 2f       	mov	r21, r20
    4d8c:	2e 8b       	std	Y+22, r18	; 0x16
    4d8e:	3f 8b       	std	Y+23, r19	; 0x17
    4d90:	48 8f       	std	Y+24, r20	; 0x18
    4d92:	59 8f       	std	Y+25, r21	; 0x19
    4d94:	1a 8a       	std	Y+18, r1	; 0x12
    4d96:	1b 8a       	std	Y+19, r1	; 0x13
    4d98:	1c 8a       	std	Y+20, r1	; 0x14
    4d9a:	1d 8a       	std	Y+21, r1	; 0x15
    4d9c:	33 e0       	ldi	r19, 0x03	; 3
    4d9e:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4da0:	89 89       	ldd	r24, Y+17	; 0x11
    4da2:	63 e0       	ldi	r22, 0x03	; 3
    4da4:	ae 01       	movw	r20, r28
    4da6:	4b 5f       	subi	r20, 0xFB	; 251
    4da8:	5f 4f       	sbci	r21, 0xFF	; 255
    4daa:	0e 94 8b 07 	call	0xf16	; 0xf16 <disk_ioctl>
    4dae:	88 23       	and	r24, r24
    4db0:	09 f0       	breq	.+2      	; 0x4db4 <f_mkfs+0x2ae>
    4db2:	a5 c3       	rjmp	.+1866   	; 0x54fe <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4db4:	8e 89       	ldd	r24, Y+22	; 0x16
    4db6:	9f 89       	ldd	r25, Y+23	; 0x17
    4db8:	a8 8d       	ldd	r26, Y+24	; 0x18
    4dba:	b9 8d       	ldd	r27, Y+25	; 0x19
    4dbc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4dbe:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4dc0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4dc2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4dc4:	82 0f       	add	r24, r18
    4dc6:	93 1f       	adc	r25, r19
    4dc8:	a4 1f       	adc	r26, r20
    4dca:	b5 1f       	adc	r27, r21
    4dcc:	89 87       	std	Y+9, r24	; 0x09
    4dce:	9a 87       	std	Y+10, r25	; 0x0a
    4dd0:	ab 87       	std	Y+11, r26	; 0x0b
    4dd2:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4dd4:	2a 89       	ldd	r18, Y+18	; 0x12
    4dd6:	3b 89       	ldd	r19, Y+19	; 0x13
    4dd8:	4c 89       	ldd	r20, Y+20	; 0x14
    4dda:	5d 89       	ldd	r21, Y+21	; 0x15
    4ddc:	2e 0d       	add	r18, r14
    4dde:	3f 1d       	adc	r19, r15
    4de0:	40 1f       	adc	r20, r16
    4de2:	51 1f       	adc	r21, r17
    4de4:	28 0f       	add	r18, r24
    4de6:	39 1f       	adc	r19, r25
    4de8:	4a 1f       	adc	r20, r26
    4dea:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4dec:	8d 81       	ldd	r24, Y+5	; 0x05
    4dee:	9e 81       	ldd	r25, Y+6	; 0x06
    4df0:	af 81       	ldd	r26, Y+7	; 0x07
    4df2:	b8 85       	ldd	r27, Y+8	; 0x08
    4df4:	4c 01       	movw	r8, r24
    4df6:	5d 01       	movw	r10, r26
    4df8:	08 94       	sec
    4dfa:	81 08       	sbc	r8, r1
    4dfc:	91 08       	sbc	r9, r1
    4dfe:	a1 08       	sbc	r10, r1
    4e00:	b1 08       	sbc	r11, r1
    4e02:	82 0e       	add	r8, r18
    4e04:	93 1e       	adc	r9, r19
    4e06:	a4 1e       	adc	r10, r20
    4e08:	b5 1e       	adc	r11, r21
    4e0a:	b0 95       	com	r27
    4e0c:	a0 95       	com	r26
    4e0e:	90 95       	com	r25
    4e10:	81 95       	neg	r24
    4e12:	9f 4f       	sbci	r25, 0xFF	; 255
    4e14:	af 4f       	sbci	r26, 0xFF	; 255
    4e16:	bf 4f       	sbci	r27, 0xFF	; 255
    4e18:	88 22       	and	r8, r24
    4e1a:	99 22       	and	r9, r25
    4e1c:	aa 22       	and	r10, r26
    4e1e:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4e20:	27 01       	movw	r4, r14
    4e22:	38 01       	movw	r6, r16
    4e24:	42 1a       	sub	r4, r18
    4e26:	53 0a       	sbc	r5, r19
    4e28:	64 0a       	sbc	r6, r20
    4e2a:	75 0a       	sbc	r7, r21
    4e2c:	48 0c       	add	r4, r8
    4e2e:	59 1c       	adc	r5, r9
    4e30:	6a 1c       	adc	r6, r10
    4e32:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4e34:	e9 80       	ldd	r14, Y+1	; 0x01
    4e36:	fa 80       	ldd	r15, Y+2	; 0x02
    4e38:	0b 81       	ldd	r16, Y+3	; 0x03
    4e3a:	1c 81       	ldd	r17, Y+4	; 0x04
    4e3c:	c8 01       	movw	r24, r16
    4e3e:	b7 01       	movw	r22, r14
    4e40:	2e 89       	ldd	r18, Y+22	; 0x16
    4e42:	3f 89       	ldd	r19, Y+23	; 0x17
    4e44:	48 8d       	ldd	r20, Y+24	; 0x18
    4e46:	59 8d       	ldd	r21, Y+25	; 0x19
    4e48:	62 1b       	sub	r22, r18
    4e4a:	73 0b       	sbc	r23, r19
    4e4c:	84 0b       	sbc	r24, r20
    4e4e:	95 0b       	sbc	r25, r21
    4e50:	64 19       	sub	r22, r4
    4e52:	75 09       	sbc	r23, r5
    4e54:	86 09       	sbc	r24, r6
    4e56:	97 09       	sbc	r25, r7
    4e58:	2a 89       	ldd	r18, Y+18	; 0x12
    4e5a:	3b 89       	ldd	r19, Y+19	; 0x13
    4e5c:	4c 89       	ldd	r20, Y+20	; 0x14
    4e5e:	5d 89       	ldd	r21, Y+21	; 0x15
    4e60:	62 1b       	sub	r22, r18
    4e62:	73 0b       	sbc	r23, r19
    4e64:	84 0b       	sbc	r24, r20
    4e66:	95 0b       	sbc	r25, r21
    4e68:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e6c:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e6e:	58 89       	ldd	r21, Y+16	; 0x10
    4e70:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    4e74:	29 a3       	std	Y+33, r18	; 0x21
    4e76:	3a a3       	std	Y+34, r19	; 0x22
    4e78:	4b a3       	std	Y+35, r20	; 0x23
    4e7a:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4e7c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4e7e:	32 30       	cpi	r19, 0x02	; 2
    4e80:	51 f4       	brne	.+20     	; 0x4e96 <f_mkfs+0x390>
    4e82:	89 a1       	ldd	r24, Y+33	; 0x21
    4e84:	9a a1       	ldd	r25, Y+34	; 0x22
    4e86:	ab a1       	ldd	r26, Y+35	; 0x23
    4e88:	bc a1       	ldd	r27, Y+36	; 0x24
    4e8a:	85 5f       	subi	r24, 0xF5	; 245
    4e8c:	9f 40       	sbci	r25, 0x0F	; 15
    4e8e:	a0 40       	sbci	r26, 0x00	; 0
    4e90:	b0 40       	sbci	r27, 0x00	; 0
    4e92:	70 f4       	brcc	.+28     	; 0x4eb0 <f_mkfs+0x3aa>
    4e94:	34 c3       	rjmp	.+1640   	; 0x54fe <f_mkfs+0x9f8>
    4e96:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4e98:	f3 30       	cpi	r31, 0x03	; 3
    4e9a:	51 f4       	brne	.+20     	; 0x4eb0 <f_mkfs+0x3aa>
    4e9c:	29 a1       	ldd	r18, Y+33	; 0x21
    4e9e:	3a a1       	ldd	r19, Y+34	; 0x22
    4ea0:	4b a1       	ldd	r20, Y+35	; 0x23
    4ea2:	5c a1       	ldd	r21, Y+36	; 0x24
    4ea4:	25 5f       	subi	r18, 0xF5	; 245
    4ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea8:	40 40       	sbci	r20, 0x00	; 0
    4eaa:	50 40       	sbci	r21, 0x00	; 0
    4eac:	08 f4       	brcc	.+2      	; 0x4eb0 <f_mkfs+0x3aa>
    4eae:	27 c3       	rjmp	.+1614   	; 0x54fe <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4eb0:	8d 82       	std	Y+5, r8	; 0x05
    4eb2:	9e 82       	std	Y+6, r9	; 0x06
    4eb4:	af 82       	std	Y+7, r10	; 0x07
    4eb6:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4eb8:	98 a1       	ldd	r25, Y+32	; 0x20
    4eba:	99 23       	and	r25, r25
    4ebc:	11 f0       	breq	.+4      	; 0x4ec2 <f_mkfs+0x3bc>
    4ebe:	10 ef       	ldi	r17, 0xF0	; 240
    4ec0:	9c c0       	rjmp	.+312    	; 0x4ffa <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4ec2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ec4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4ec6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4ec8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4eca:	4e 0d       	add	r20, r14
    4ecc:	5f 1d       	adc	r21, r15
    4ece:	60 1f       	adc	r22, r16
    4ed0:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4ed2:	3e e2       	ldi	r19, 0x2E	; 46
    4ed4:	e3 2e       	mov	r14, r19
    4ed6:	f1 2c       	mov	r15, r1
    4ed8:	ec 0c       	add	r14, r12
    4eda:	fd 1c       	adc	r15, r13
    4edc:	f7 01       	movw	r30, r14
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	32 e0       	ldi	r19, 0x02	; 2
    4ee2:	01 c0       	rjmp	.+2      	; 0x4ee6 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4ee4:	11 92       	st	Z+, r1
    4ee6:	21 50       	subi	r18, 0x01	; 1
    4ee8:	30 40       	sbci	r19, 0x00	; 0
    4eea:	af ef       	ldi	r26, 0xFF	; 255
    4eec:	2f 3f       	cpi	r18, 0xFF	; 255
    4eee:	3a 07       	cpc	r19, r26
    4ef0:	c9 f7       	brne	.-14     	; 0x4ee4 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4ef2:	86 01       	movw	r16, r12
    4ef4:	04 51       	subi	r16, 0x14	; 20
    4ef6:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4ef8:	80 e8       	ldi	r24, 0x80	; 128
    4efa:	f8 01       	movw	r30, r16
    4efc:	80 83       	st	Z, r24
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	81 83       	std	Z+1, r24	; 0x01
    4f02:	82 83       	std	Z+2, r24	; 0x02
    4f04:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4f06:	40 30       	cpi	r20, 0x00	; 0
    4f08:	f4 e0       	ldi	r31, 0x04	; 4
    4f0a:	5f 07       	cpc	r21, r31
    4f0c:	fb ef       	ldi	r31, 0xFB	; 251
    4f0e:	6f 07       	cpc	r22, r31
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	7f 07       	cpc	r23, r31
    4f14:	b0 f4       	brcc	.+44     	; 0x4f42 <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4f16:	cb 01       	movw	r24, r22
    4f18:	ba 01       	movw	r22, r20
    4f1a:	21 ec       	ldi	r18, 0xC1	; 193
    4f1c:	3e e3       	ldi	r19, 0x3E	; 62
    4f1e:	40 e0       	ldi	r20, 0x00	; 0
    4f20:	50 e0       	ldi	r21, 0x00	; 0
    4f22:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    4f26:	c9 01       	movw	r24, r18
    4f28:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4f2a:	f8 01       	movw	r30, r16
    4f2c:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4f2e:	22 e0       	ldi	r18, 0x02	; 2
    4f30:	b6 95       	lsr	r27
    4f32:	a7 95       	ror	r26
    4f34:	97 95       	ror	r25
    4f36:	87 95       	ror	r24
    4f38:	2a 95       	dec	r18
    4f3a:	d1 f7       	brne	.-12     	; 0x4f30 <f_mkfs+0x42a>
    4f3c:	8f 63       	ori	r24, 0x3F	; 63
    4f3e:	86 83       	std	Z+6, r24	; 0x06
    4f40:	07 c0       	rjmp	.+14     	; 0x4f50 <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4f42:	8f ef       	ldi	r24, 0xFF	; 255
    4f44:	d8 01       	movw	r26, r16
    4f46:	16 96       	adiw	r26, 0x06	; 6
    4f48:	8c 93       	st	X, r24
    4f4a:	16 97       	sbiw	r26, 0x06	; 6
    4f4c:	17 96       	adiw	r26, 0x07	; 7
    4f4e:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4f50:	8e ef       	ldi	r24, 0xFE	; 254
    4f52:	f8 01       	movw	r30, r16
    4f54:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4f56:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4f58:	f3 30       	cpi	r31, 0x03	; 3
    4f5a:	81 f0       	breq	.+32     	; 0x4f7c <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4f5c:	89 81       	ldd	r24, Y+1	; 0x01
    4f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f60:	ab 81       	ldd	r26, Y+3	; 0x03
    4f62:	bc 81       	ldd	r27, Y+4	; 0x04
    4f64:	80 50       	subi	r24, 0x00	; 0
    4f66:	90 40       	sbci	r25, 0x00	; 0
    4f68:	a1 40       	sbci	r26, 0x01	; 1
    4f6a:	b0 40       	sbci	r27, 0x00	; 0
    4f6c:	10 f0       	brcs	.+4      	; 0x4f72 <f_mkfs+0x46c>
    4f6e:	86 e0       	ldi	r24, 0x06	; 6
    4f70:	01 c0       	rjmp	.+2      	; 0x4f74 <f_mkfs+0x46e>
    4f72:	84 e0       	ldi	r24, 0x04	; 4
    4f74:	d8 01       	movw	r26, r16
    4f76:	14 96       	adiw	r26, 0x04	; 4
    4f78:	8c 93       	st	X, r24
    4f7a:	03 c0       	rjmp	.+6      	; 0x4f82 <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4f7c:	8c e0       	ldi	r24, 0x0C	; 12
    4f7e:	f8 01       	movw	r30, r16
    4f80:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4f82:	8f e3       	ldi	r24, 0x3F	; 63
    4f84:	d8 01       	movw	r26, r16
    4f86:	18 96       	adiw	r26, 0x08	; 8
    4f88:	8c 93       	st	X, r24
    4f8a:	18 97       	sbiw	r26, 0x08	; 8
    4f8c:	19 96       	adiw	r26, 0x09	; 9
    4f8e:	1c 92       	st	X, r1
    4f90:	19 97       	sbiw	r26, 0x09	; 9
    4f92:	1a 96       	adiw	r26, 0x0a	; 10
    4f94:	1c 92       	st	X, r1
    4f96:	1a 97       	sbiw	r26, 0x0a	; 10
    4f98:	1b 96       	adiw	r26, 0x0b	; 11
    4f9a:	1c 92       	st	X, r1
    4f9c:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	1c 96       	adiw	r26, 0x0c	; 12
    4fa2:	8c 93       	st	X, r24
    4fa4:	1c 97       	sbiw	r26, 0x0c	; 12
    4fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa8:	1d 96       	adiw	r26, 0x0d	; 13
    4faa:	8c 93       	st	X, r24
    4fac:	89 81       	ldd	r24, Y+1	; 0x01
    4fae:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb0:	ab 81       	ldd	r26, Y+3	; 0x03
    4fb2:	bc 81       	ldd	r27, Y+4	; 0x04
    4fb4:	cd 01       	movw	r24, r26
    4fb6:	aa 27       	eor	r26, r26
    4fb8:	bb 27       	eor	r27, r27
    4fba:	f8 01       	movw	r30, r16
    4fbc:	86 87       	std	Z+14, r24	; 0x0e
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc2:	ab 81       	ldd	r26, Y+3	; 0x03
    4fc4:	bc 81       	ldd	r27, Y+4	; 0x04
    4fc6:	8b 2f       	mov	r24, r27
    4fc8:	99 27       	eor	r25, r25
    4fca:	aa 27       	eor	r26, r26
    4fcc:	bb 27       	eor	r27, r27
    4fce:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4fd0:	00 5c       	subi	r16, 0xC0	; 192
    4fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd4:	85 e5       	ldi	r24, 0x55	; 85
    4fd6:	d8 01       	movw	r26, r16
    4fd8:	8d 93       	st	X+, r24
    4fda:	fd 01       	movw	r30, r26
    4fdc:	8a ea       	ldi	r24, 0xAA	; 170
    4fde:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4fe0:	89 89       	ldd	r24, Y+17	; 0x11
    4fe2:	b7 01       	movw	r22, r14
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	40 e0       	ldi	r20, 0x00	; 0
    4fea:	50 e0       	ldi	r21, 0x00	; 0
    4fec:	01 e0       	ldi	r16, 0x01	; 1
    4fee:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    4ff2:	88 23       	and	r24, r24
    4ff4:	09 f0       	breq	.+2      	; 0x4ff8 <f_mkfs+0x4f2>
    4ff6:	85 c2       	rjmp	.+1290   	; 0x5502 <f_mkfs+0x9fc>
    4ff8:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    4ffa:	5e e2       	ldi	r21, 0x2E	; 46
    4ffc:	e5 2e       	mov	r14, r21
    4ffe:	f1 2c       	mov	r15, r1
    5000:	ec 0c       	add	r14, r12
    5002:	fd 1c       	adc	r15, r13
    5004:	f7 01       	movw	r30, r14
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	92 e0       	ldi	r25, 0x02	; 2
    500a:	01 c0       	rjmp	.+2      	; 0x500e <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    500c:	11 92       	st	Z+, r1
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	bf ef       	ldi	r27, 0xFF	; 255
    5012:	8f 3f       	cpi	r24, 0xFF	; 255
    5014:	9b 07       	cpc	r25, r27
    5016:	d1 f7       	brne	.-12     	; 0x500c <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    5018:	8b ee       	ldi	r24, 0xEB	; 235
    501a:	f6 01       	movw	r30, r12
    501c:	86 a7       	std	Z+46, r24	; 0x2e
    501e:	8e ef       	ldi	r24, 0xFE	; 254
    5020:	87 a7       	std	Z+47, r24	; 0x2f
    5022:	80 e9       	ldi	r24, 0x90	; 144
    5024:	80 ab       	std	Z+48, r24	; 0x30
    5026:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    5028:	11 ae       	std	Z+57, r1	; 0x39
    502a:	82 e0       	ldi	r24, 0x02	; 2
    502c:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    502e:	2e 8e       	std	Y+30, r2	; 0x1e
    5030:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    5032:	2e 89       	ldd	r18, Y+22	; 0x16
    5034:	24 af       	std	Z+60, r18	; 0x3c
    5036:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    503c:	8a 89       	ldd	r24, Y+18	; 0x12
    503e:	9b 89       	ldd	r25, Y+19	; 0x13
    5040:	ac 89       	ldd	r26, Y+20	; 0x14
    5042:	bd 89       	ldd	r27, Y+21	; 0x15
    5044:	44 e0       	ldi	r20, 0x04	; 4
    5046:	88 0f       	add	r24, r24
    5048:	99 1f       	adc	r25, r25
    504a:	aa 1f       	adc	r26, r26
    504c:	bb 1f       	adc	r27, r27
    504e:	4a 95       	dec	r20
    5050:	d1 f7       	brne	.-12     	; 0x5046 <f_mkfs+0x540>
    5052:	87 af       	std	Z+63, r24	; 0x3f
    5054:	40 e4       	ldi	r20, 0x40	; 64
    5056:	50 e0       	ldi	r21, 0x00	; 0
    5058:	c4 0e       	add	r12, r20
    505a:	d5 1e       	adc	r13, r21
    505c:	89 2f       	mov	r24, r25
    505e:	99 27       	eor	r25, r25
    5060:	d6 01       	movw	r26, r12
    5062:	8c 93       	st	X, r24
    5064:	e0 ec       	ldi	r30, 0xC0	; 192
    5066:	ff ef       	ldi	r31, 0xFF	; 255
    5068:	ce 0e       	add	r12, r30
    506a:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    506c:	89 81       	ldd	r24, Y+1	; 0x01
    506e:	9a 81       	ldd	r25, Y+2	; 0x02
    5070:	ab 81       	ldd	r26, Y+3	; 0x03
    5072:	bc 81       	ldd	r27, Y+4	; 0x04
    5074:	80 30       	cpi	r24, 0x00	; 0
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	9f 07       	cpc	r25, r31
    507a:	f1 e0       	ldi	r31, 0x01	; 1
    507c:	af 07       	cpc	r26, r31
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	bf 07       	cpc	r27, r31
    5082:	60 f4       	brcc	.+24     	; 0x509c <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    5084:	21 e4       	ldi	r18, 0x41	; 65
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	c2 0e       	add	r12, r18
    508a:	d3 1e       	adc	r13, r19
    508c:	f6 01       	movw	r30, r12
    508e:	81 93       	st	Z+, r24
    5090:	6f 01       	movw	r12, r30
    5092:	8a 81       	ldd	r24, Y+2	; 0x02
    5094:	80 83       	st	Z, r24
    5096:	2e eb       	ldi	r18, 0xBE	; 190
    5098:	3f ef       	ldi	r19, 0xFF	; 255
    509a:	1f c0       	rjmp	.+62     	; 0x50da <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    509c:	4e e4       	ldi	r20, 0x4E	; 78
    509e:	50 e0       	ldi	r21, 0x00	; 0
    50a0:	c4 0e       	add	r12, r20
    50a2:	d5 1e       	adc	r13, r21
    50a4:	f6 01       	movw	r30, r12
    50a6:	81 93       	st	Z+, r24
    50a8:	8a 81       	ldd	r24, Y+2	; 0x02
    50aa:	df 01       	movw	r26, r30
    50ac:	8d 93       	st	X+, r24
    50ae:	6d 01       	movw	r12, r26
    50b0:	89 81       	ldd	r24, Y+1	; 0x01
    50b2:	9a 81       	ldd	r25, Y+2	; 0x02
    50b4:	ab 81       	ldd	r26, Y+3	; 0x03
    50b6:	bc 81       	ldd	r27, Y+4	; 0x04
    50b8:	cd 01       	movw	r24, r26
    50ba:	aa 27       	eor	r26, r26
    50bc:	bb 27       	eor	r27, r27
    50be:	f6 01       	movw	r30, r12
    50c0:	81 93       	st	Z+, r24
    50c2:	6f 01       	movw	r12, r30
    50c4:	89 81       	ldd	r24, Y+1	; 0x01
    50c6:	9a 81       	ldd	r25, Y+2	; 0x02
    50c8:	ab 81       	ldd	r26, Y+3	; 0x03
    50ca:	bc 81       	ldd	r27, Y+4	; 0x04
    50cc:	8b 2f       	mov	r24, r27
    50ce:	99 27       	eor	r25, r25
    50d0:	aa 27       	eor	r26, r26
    50d2:	bb 27       	eor	r27, r27
    50d4:	80 83       	st	Z, r24
    50d6:	2f ea       	ldi	r18, 0xAF	; 175
    50d8:	3f ef       	ldi	r19, 0xFF	; 255
    50da:	c2 0e       	add	r12, r18
    50dc:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    50de:	43 e4       	ldi	r20, 0x43	; 67
    50e0:	50 e0       	ldi	r21, 0x00	; 0
    50e2:	c4 0e       	add	r12, r20
    50e4:	d5 1e       	adc	r13, r21
    50e6:	d6 01       	movw	r26, r12
    50e8:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    50ea:	e3 e0       	ldi	r30, 0x03	; 3
    50ec:	f0 e0       	ldi	r31, 0x00	; 0
    50ee:	ce 0e       	add	r12, r30
    50f0:	df 1e       	adc	r13, r31
    50f2:	8f e3       	ldi	r24, 0x3F	; 63
    50f4:	d6 01       	movw	r26, r12
    50f6:	8d 93       	st	X+, r24
    50f8:	fd 01       	movw	r30, r26
    50fa:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    50fc:	8f ef       	ldi	r24, 0xFF	; 255
    50fe:	df 01       	movw	r26, r30
    5100:	8d 93       	st	X+, r24
    5102:	fd 01       	movw	r30, r26
    5104:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    5106:	df 01       	movw	r26, r30
    5108:	ea 8d       	ldd	r30, Y+26	; 0x1a
    510a:	ed 93       	st	X+, r30
    510c:	1d 92       	st	X+, r1
    510e:	fd 01       	movw	r30, r26
    5110:	11 92       	st	Z+, r1
    5112:	6f 01       	movw	r12, r30
    5114:	10 82       	st	Z, r1
    5116:	23 eb       	ldi	r18, 0xB3	; 179
    5118:	3f ef       	ldi	r19, 0xFF	; 255
    511a:	c2 0e       	add	r12, r18
    511c:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    511e:	1d 82       	std	Y+5, r1	; 0x05
    5120:	1e 82       	std	Y+6, r1	; 0x06
    5122:	1f 82       	std	Y+7, r1	; 0x07
    5124:	18 86       	std	Y+8, r1	; 0x08
    5126:	b6 01       	movw	r22, r12
    5128:	6b 5a       	subi	r22, 0xAB	; 171
    512a:	7f 4f       	sbci	r23, 0xFF	; 255
    512c:	85 2d       	mov	r24, r5
    512e:	99 27       	eor	r25, r25
    5130:	d6 01       	movw	r26, r12
    5132:	ae 5a       	subi	r26, 0xAE	; 174
    5134:	bf 4f       	sbci	r27, 0xFF	; 255
    5136:	96 01       	movw	r18, r12
    5138:	2c 5a       	subi	r18, 0xAC	; 172
    513a:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    513c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    513e:	43 30       	cpi	r20, 0x03	; 3
    5140:	41 f1       	breq	.+80     	; 0x5192 <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    5142:	fb 01       	movw	r30, r22
    5144:	10 82       	st	Z, r1
    5146:	46 e5       	ldi	r20, 0x56	; 86
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	c4 0e       	add	r12, r20
    514c:	d5 1e       	adc	r13, r21
    514e:	f6 01       	movw	r30, r12
    5150:	11 92       	st	Z+, r1
    5152:	11 92       	st	Z+, r1
    5154:	6f 01       	movw	r12, r30
    5156:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    5158:	4c ee       	ldi	r20, 0xEC	; 236
    515a:	5f ef       	ldi	r21, 0xFF	; 255
    515c:	c4 0e       	add	r12, r20
    515e:	d5 1e       	adc	r13, r21
    5160:	f6 01       	movw	r30, r12
    5162:	41 92       	st	Z+, r4
    5164:	6f 01       	movw	r12, r30
    5166:	80 83       	st	Z, r24
    5168:	4b eb       	ldi	r20, 0xBB	; 187
    516a:	5f ef       	ldi	r21, 0xFF	; 255
    516c:	c4 0e       	add	r12, r20
    516e:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    5170:	80 e8       	ldi	r24, 0x80	; 128
    5172:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    5174:	89 e2       	ldi	r24, 0x29	; 41
    5176:	d9 01       	movw	r26, r18
    5178:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    517a:	d7 01       	movw	r26, r14
    517c:	9b 96       	adiw	r26, 0x2b	; 43
    517e:	eb e0       	ldi	r30, 0x0B	; 11
    5180:	f0 e2       	ldi	r31, 0x20	; 32
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5184:	81 91       	ld	r24, Z+
    5186:	8d 93       	st	X+, r24
    5188:	20 e2       	ldi	r18, 0x20	; 32
    518a:	ee 31       	cpi	r30, 0x1E	; 30
    518c:	f2 07       	cpc	r31, r18
    518e:	d1 f7       	brne	.-12     	; 0x5184 <f_mkfs+0x67e>
    5190:	51 c0       	rjmp	.+162    	; 0x5234 <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    5192:	41 e7       	ldi	r20, 0x71	; 113
    5194:	50 e0       	ldi	r21, 0x00	; 0
    5196:	c4 0e       	add	r12, r20
    5198:	d5 1e       	adc	r13, r21
    519a:	f6 01       	movw	r30, r12
    519c:	11 92       	st	Z+, r1
    519e:	11 92       	st	Z+, r1
    51a0:	11 92       	st	Z+, r1
    51a2:	6f 01       	movw	r12, r30
    51a4:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    51a6:	4c 92       	st	X, r4
    51a8:	4f ed       	ldi	r20, 0xDF	; 223
    51aa:	5f ef       	ldi	r21, 0xFF	; 255
    51ac:	c4 0e       	add	r12, r20
    51ae:	d5 1e       	adc	r13, r21
    51b0:	d6 01       	movw	r26, r12
    51b2:	8c 93       	st	X, r24
    51b4:	c3 01       	movw	r24, r6
    51b6:	aa 27       	eor	r26, r26
    51b8:	bb 27       	eor	r27, r27
    51ba:	f9 01       	movw	r30, r18
    51bc:	80 83       	st	Z, r24
    51be:	87 2d       	mov	r24, r7
    51c0:	99 27       	eor	r25, r25
    51c2:	aa 27       	eor	r26, r26
    51c4:	bb 27       	eor	r27, r27
    51c6:	fb 01       	movw	r30, r22
    51c8:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    51ca:	27 e0       	ldi	r18, 0x07	; 7
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	c2 0e       	add	r12, r18
    51d0:	d3 1e       	adc	r13, r19
    51d2:	82 e0       	ldi	r24, 0x02	; 2
    51d4:	d6 01       	movw	r26, r12
    51d6:	8d 93       	st	X+, r24
    51d8:	fd 01       	movw	r30, r26
    51da:	11 92       	st	Z+, r1
    51dc:	df 01       	movw	r26, r30
    51de:	1d 92       	st	X+, r1
    51e0:	fd 01       	movw	r30, r26
    51e2:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	df 01       	movw	r26, r30
    51e8:	8d 93       	st	X+, r24
    51ea:	fd 01       	movw	r30, r26
    51ec:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    51ee:	86 e0       	ldi	r24, 0x06	; 6
    51f0:	df 01       	movw	r26, r30
    51f2:	8d 93       	st	X+, r24
    51f4:	6d 01       	movw	r12, r26
    51f6:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    51f8:	ed e0       	ldi	r30, 0x0D	; 13
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	ce 0e       	add	r12, r30
    51fe:	df 1e       	adc	r13, r31
    5200:	80 e8       	ldi	r24, 0x80	; 128
    5202:	d6 01       	movw	r26, r12
    5204:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    5206:	e2 e0       	ldi	r30, 0x02	; 2
    5208:	f0 e0       	ldi	r31, 0x00	; 0
    520a:	ce 0e       	add	r12, r30
    520c:	df 1e       	adc	r13, r31
    520e:	89 e2       	ldi	r24, 0x29	; 41
    5210:	d6 01       	movw	r26, r12
    5212:	8c 93       	st	X, r24
    5214:	e0 e9       	ldi	r30, 0x90	; 144
    5216:	ff ef       	ldi	r31, 0xFF	; 255
    5218:	ce 0e       	add	r12, r30
    521a:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    521c:	d7 01       	movw	r26, r14
    521e:	a9 5b       	subi	r26, 0xB9	; 185
    5220:	bf 4f       	sbci	r27, 0xFF	; 255
    5222:	ef e1       	ldi	r30, 0x1F	; 31
    5224:	f0 e2       	ldi	r31, 0x20	; 32
    5226:	02 c0       	rjmp	.+4      	; 0x522c <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5228:	81 91       	ld	r24, Z+
    522a:	8d 93       	st	X+, r24
    522c:	20 e2       	ldi	r18, 0x20	; 32
    522e:	e2 33       	cpi	r30, 0x32	; 50
    5230:	f2 07       	cpc	r31, r18
    5232:	d1 f7       	brne	.-12     	; 0x5228 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    5234:	4c e2       	ldi	r20, 0x2C	; 44
    5236:	52 e0       	ldi	r21, 0x02	; 2
    5238:	c4 0e       	add	r12, r20
    523a:	d5 1e       	adc	r13, r21
    523c:	85 e5       	ldi	r24, 0x55	; 85
    523e:	d6 01       	movw	r26, r12
    5240:	8d 93       	st	X+, r24
    5242:	6d 01       	movw	r12, r26
    5244:	8a ea       	ldi	r24, 0xAA	; 170
    5246:	8c 93       	st	X, r24
    5248:	e3 ed       	ldi	r30, 0xD3	; 211
    524a:	fd ef       	ldi	r31, 0xFD	; 253
    524c:	ce 0e       	add	r12, r30
    524e:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    5250:	89 89       	ldd	r24, Y+17	; 0x11
    5252:	b7 01       	movw	r22, r14
    5254:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5256:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5258:	4c 8d       	ldd	r20, Y+28	; 0x1c
    525a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    525c:	01 e0       	ldi	r16, 0x01	; 1
    525e:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    5262:	88 23       	and	r24, r24
    5264:	09 f0       	breq	.+2      	; 0x5268 <f_mkfs+0x762>
    5266:	4d c1       	rjmp	.+666    	; 0x5502 <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    5268:	ff 8d       	ldd	r31, Y+31	; 0x1f
    526a:	f3 30       	cpi	r31, 0x03	; 3
    526c:	61 f4       	brne	.+24     	; 0x5286 <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    526e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5270:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5272:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5274:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5276:	2a 5f       	subi	r18, 0xFA	; 250
    5278:	3f 4f       	sbci	r19, 0xFF	; 255
    527a:	4f 4f       	sbci	r20, 0xFF	; 255
    527c:	5f 4f       	sbci	r21, 0xFF	; 255
    527e:	89 89       	ldd	r24, Y+17	; 0x11
    5280:	b7 01       	movw	r22, r14
    5282:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    5286:	f7 01       	movw	r30, r14
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	92 e0       	ldi	r25, 0x02	; 2
    528c:	01 c0       	rjmp	.+2      	; 0x5290 <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    528e:	11 92       	st	Z+, r1
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	2f ef       	ldi	r18, 0xFF	; 255
    5294:	8f 3f       	cpi	r24, 0xFF	; 255
    5296:	92 07       	cpc	r25, r18
    5298:	d1 f7       	brne	.-12     	; 0x528e <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    529a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    529c:	33 30       	cpi	r19, 0x03	; 3
    529e:	31 f1       	breq	.+76     	; 0x52ec <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    52a0:	31 30       	cpi	r19, 0x01	; 1
    52a2:	29 f0       	breq	.+10     	; 0x52ae <f_mkfs+0x7a8>
    52a4:	20 e0       	ldi	r18, 0x00	; 0
    52a6:	3f ef       	ldi	r19, 0xFF	; 255
    52a8:	4f ef       	ldi	r20, 0xFF	; 255
    52aa:	5f ef       	ldi	r21, 0xFF	; 255
    52ac:	04 c0       	rjmp	.+8      	; 0x52b6 <f_mkfs+0x7b0>
    52ae:	20 e0       	ldi	r18, 0x00	; 0
    52b0:	3f ef       	ldi	r19, 0xFF	; 255
    52b2:	4f ef       	ldi	r20, 0xFF	; 255
    52b4:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    52b6:	81 2f       	mov	r24, r17
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	a0 e0       	ldi	r26, 0x00	; 0
    52bc:	b0 e0       	ldi	r27, 0x00	; 0
    52be:	82 2b       	or	r24, r18
    52c0:	93 2b       	or	r25, r19
    52c2:	a4 2b       	or	r26, r20
    52c4:	b5 2b       	or	r27, r21
    52c6:	8d 83       	std	Y+5, r24	; 0x05
    52c8:	9e 83       	std	Y+6, r25	; 0x06
    52ca:	af 83       	std	Y+7, r26	; 0x07
    52cc:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    52ce:	f6 01       	movw	r30, r12
    52d0:	86 a7       	std	Z+46, r24	; 0x2e
    52d2:	29 2f       	mov	r18, r25
    52d4:	33 27       	eor	r19, r19
    52d6:	27 a7       	std	Z+47, r18	; 0x2f
    52d8:	9d 01       	movw	r18, r26
    52da:	44 27       	eor	r20, r20
    52dc:	55 27       	eor	r21, r21
    52de:	20 ab       	std	Z+48, r18	; 0x30
    52e0:	8b 2f       	mov	r24, r27
    52e2:	99 27       	eor	r25, r25
    52e4:	aa 27       	eor	r26, r26
    52e6:	bb 27       	eor	r27, r27
    52e8:	81 ab       	std	Z+49, r24	; 0x31
    52ea:	27 c0       	rjmp	.+78     	; 0x533a <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    52ec:	88 ef       	ldi	r24, 0xF8	; 248
    52ee:	d6 01       	movw	r26, r12
    52f0:	9e 96       	adiw	r26, 0x2e	; 46
    52f2:	8c 93       	st	X, r24
    52f4:	9e 97       	sbiw	r26, 0x2e	; 46
    52f6:	8f ef       	ldi	r24, 0xFF	; 255
    52f8:	9f 96       	adiw	r26, 0x2f	; 47
    52fa:	8c 93       	st	X, r24
    52fc:	9f 97       	sbiw	r26, 0x2f	; 47
    52fe:	d0 96       	adiw	r26, 0x30	; 48
    5300:	8c 93       	st	X, r24
    5302:	d0 97       	sbiw	r26, 0x30	; 48
    5304:	d1 96       	adiw	r26, 0x31	; 49
    5306:	8c 93       	st	X, r24
    5308:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    530a:	d2 96       	adiw	r26, 0x32	; 50
    530c:	8c 93       	st	X, r24
    530e:	d2 97       	sbiw	r26, 0x32	; 50
    5310:	d3 96       	adiw	r26, 0x33	; 51
    5312:	8c 93       	st	X, r24
    5314:	d3 97       	sbiw	r26, 0x33	; 51
    5316:	d4 96       	adiw	r26, 0x34	; 52
    5318:	8c 93       	st	X, r24
    531a:	d4 97       	sbiw	r26, 0x34	; 52
    531c:	d5 96       	adiw	r26, 0x35	; 53
    531e:	8c 93       	st	X, r24
    5320:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    5322:	d6 96       	adiw	r26, 0x36	; 54
    5324:	8c 93       	st	X, r24
    5326:	d6 97       	sbiw	r26, 0x36	; 54
    5328:	d7 96       	adiw	r26, 0x37	; 55
    532a:	8c 93       	st	X, r24
    532c:	d7 97       	sbiw	r26, 0x37	; 55
    532e:	d8 96       	adiw	r26, 0x38	; 56
    5330:	8c 93       	st	X, r24
    5332:	d8 97       	sbiw	r26, 0x38	; 56
    5334:	8f e0       	ldi	r24, 0x0F	; 15
    5336:	d9 96       	adiw	r26, 0x39	; 57
    5338:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    533a:	89 89       	ldd	r24, Y+17	; 0x11
    533c:	b7 01       	movw	r22, r14
    533e:	29 85       	ldd	r18, Y+9	; 0x09
    5340:	3a 85       	ldd	r19, Y+10	; 0x0a
    5342:	4b 85       	ldd	r20, Y+11	; 0x0b
    5344:	5c 85       	ldd	r21, Y+12	; 0x0c
    5346:	01 e0       	ldi	r16, 0x01	; 1
    5348:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    534c:	88 23       	and	r24, r24
    534e:	09 f0       	breq	.+2      	; 0x5352 <f_mkfs+0x84c>
    5350:	d8 c0       	rjmp	.+432    	; 0x5502 <f_mkfs+0x9fc>
    5352:	f7 01       	movw	r30, r14
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	92 e0       	ldi	r25, 0x02	; 2
    5358:	01 c0       	rjmp	.+2      	; 0x535c <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    535a:	11 92       	st	Z+, r1
    535c:	01 97       	sbiw	r24, 0x01	; 1
    535e:	bf ef       	ldi	r27, 0xFF	; 255
    5360:	8f 3f       	cpi	r24, 0xFF	; 255
    5362:	9b 07       	cpc	r25, r27
    5364:	d1 f7       	brne	.-12     	; 0x535a <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5366:	89 84       	ldd	r8, Y+9	; 0x09
    5368:	9a 84       	ldd	r9, Y+10	; 0x0a
    536a:	ab 84       	ldd	r10, Y+11	; 0x0b
    536c:	bc 84       	ldd	r11, Y+12	; 0x0c
    536e:	08 94       	sec
    5370:	81 1c       	adc	r8, r1
    5372:	91 1c       	adc	r9, r1
    5374:	a1 1c       	adc	r10, r1
    5376:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5378:	81 e0       	ldi	r24, 0x01	; 1
    537a:	90 e0       	ldi	r25, 0x00	; 0
    537c:	a0 e0       	ldi	r26, 0x00	; 0
    537e:	b0 e0       	ldi	r27, 0x00	; 0
    5380:	16 c0       	rjmp	.+44     	; 0x53ae <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5382:	89 89       	ldd	r24, Y+17	; 0x11
    5384:	b7 01       	movw	r22, r14
    5386:	a5 01       	movw	r20, r10
    5388:	94 01       	movw	r18, r8
    538a:	01 e0       	ldi	r16, 0x01	; 1
    538c:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    5390:	88 23       	and	r24, r24
    5392:	09 f0       	breq	.+2      	; 0x5396 <f_mkfs+0x890>
    5394:	b6 c0       	rjmp	.+364    	; 0x5502 <f_mkfs+0x9fc>
    5396:	08 94       	sec
    5398:	81 1c       	adc	r8, r1
    539a:	91 1c       	adc	r9, r1
    539c:	a1 1c       	adc	r10, r1
    539e:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    53a0:	8d 81       	ldd	r24, Y+5	; 0x05
    53a2:	9e 81       	ldd	r25, Y+6	; 0x06
    53a4:	af 81       	ldd	r26, Y+7	; 0x07
    53a6:	b8 85       	ldd	r27, Y+8	; 0x08
    53a8:	01 96       	adiw	r24, 0x01	; 1
    53aa:	a1 1d       	adc	r26, r1
    53ac:	b1 1d       	adc	r27, r1
    53ae:	8d 83       	std	Y+5, r24	; 0x05
    53b0:	9e 83       	std	Y+6, r25	; 0x06
    53b2:	af 83       	std	Y+7, r26	; 0x07
    53b4:	b8 87       	std	Y+8, r27	; 0x08
    53b6:	8d 81       	ldd	r24, Y+5	; 0x05
    53b8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ba:	af 81       	ldd	r26, Y+7	; 0x07
    53bc:	b8 85       	ldd	r27, Y+8	; 0x08
    53be:	84 15       	cp	r24, r4
    53c0:	95 05       	cpc	r25, r5
    53c2:	a6 05       	cpc	r26, r6
    53c4:	b7 05       	cpc	r27, r7
    53c6:	e8 f2       	brcs	.-70     	; 0x5382 <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    53c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    53ca:	e3 30       	cpi	r30, 0x03	; 3
    53cc:	11 f0       	breq	.+4      	; 0x53d2 <f_mkfs+0x8cc>
    53ce:	fa 89       	ldd	r31, Y+18	; 0x12
    53d0:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    53d2:	24 01       	movw	r4, r8
    53d4:	35 01       	movw	r6, r10
    53d6:	08 94       	sec
    53d8:	41 1c       	adc	r4, r1
    53da:	51 1c       	adc	r5, r1
    53dc:	61 1c       	adc	r6, r1
    53de:	71 1c       	adc	r7, r1
    53e0:	89 89       	ldd	r24, Y+17	; 0x11
    53e2:	b7 01       	movw	r22, r14
    53e4:	a5 01       	movw	r20, r10
    53e6:	94 01       	movw	r18, r8
    53e8:	01 e0       	ldi	r16, 0x01	; 1
    53ea:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
    53ee:	88 23       	and	r24, r24
    53f0:	09 f0       	breq	.+2      	; 0x53f4 <f_mkfs+0x8ee>
    53f2:	87 c0       	rjmp	.+270    	; 0x5502 <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    53f4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    53f6:	21 50       	subi	r18, 0x01	; 1
    53f8:	2e 8f       	std	Y+30, r18	; 0x1e
    53fa:	22 23       	and	r18, r18
    53fc:	19 f0       	breq	.+6      	; 0x5404 <f_mkfs+0x8fe>
    53fe:	53 01       	movw	r10, r6
    5400:	42 01       	movw	r8, r4
    5402:	e7 cf       	rjmp	.-50     	; 0x53d2 <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    5404:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5406:	33 30       	cpi	r19, 0x03	; 3
    5408:	09 f0       	breq	.+2      	; 0x540c <f_mkfs+0x906>
    540a:	70 c0       	rjmp	.+224    	; 0x54ec <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    540c:	4c e2       	ldi	r20, 0x2C	; 44
    540e:	52 e0       	ldi	r21, 0x02	; 2
    5410:	c4 0e       	add	r12, r20
    5412:	d5 1e       	adc	r13, r21
    5414:	85 e5       	ldi	r24, 0x55	; 85
    5416:	d6 01       	movw	r26, r12
    5418:	8d 93       	st	X+, r24
    541a:	6d 01       	movw	r12, r26
    541c:	8a ea       	ldi	r24, 0xAA	; 170
    541e:	8c 93       	st	X, r24
    5420:	e3 ed       	ldi	r30, 0xD3	; 211
    5422:	fd ef       	ldi	r31, 0xFD	; 253
    5424:	ce 0e       	add	r12, r30
    5426:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5428:	82 e5       	ldi	r24, 0x52	; 82
    542a:	d6 01       	movw	r26, r12
    542c:	9e 96       	adiw	r26, 0x2e	; 46
    542e:	8c 93       	st	X, r24
    5430:	9e 97       	sbiw	r26, 0x2e	; 46
    5432:	9f 96       	adiw	r26, 0x2f	; 47
    5434:	8c 93       	st	X, r24
    5436:	9f 97       	sbiw	r26, 0x2f	; 47
    5438:	21 e6       	ldi	r18, 0x61	; 97
    543a:	d0 96       	adiw	r26, 0x30	; 48
    543c:	2c 93       	st	X, r18
    543e:	d0 97       	sbiw	r26, 0x30	; 48
    5440:	91 e4       	ldi	r25, 0x41	; 65
    5442:	d1 96       	adiw	r26, 0x31	; 49
    5444:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    5446:	e2 e1       	ldi	r30, 0x12	; 18
    5448:	f2 e0       	ldi	r31, 0x02	; 2
    544a:	ce 0e       	add	r12, r30
    544c:	df 1e       	adc	r13, r31
    544e:	82 e7       	ldi	r24, 0x72	; 114
    5450:	d6 01       	movw	r26, r12
    5452:	8d 93       	st	X+, r24
    5454:	fd 01       	movw	r30, r26
    5456:	81 93       	st	Z+, r24
    5458:	df 01       	movw	r26, r30
    545a:	9d 93       	st	X+, r25
    545c:	fd 01       	movw	r30, r26
    545e:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    5460:	89 a1       	ldd	r24, Y+33	; 0x21
    5462:	81 50       	subi	r24, 0x01	; 1
    5464:	df 01       	movw	r26, r30
    5466:	8d 93       	st	X+, r24
    5468:	89 a1       	ldd	r24, Y+33	; 0x21
    546a:	9a a1       	ldd	r25, Y+34	; 0x22
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	fd 01       	movw	r30, r26
    5470:	91 93       	st	Z+, r25
    5472:	89 a1       	ldd	r24, Y+33	; 0x21
    5474:	9a a1       	ldd	r25, Y+34	; 0x22
    5476:	ab a1       	ldd	r26, Y+35	; 0x23
    5478:	bc a1       	ldd	r27, Y+36	; 0x24
    547a:	01 97       	sbiw	r24, 0x01	; 1
    547c:	a1 09       	sbc	r26, r1
    547e:	b1 09       	sbc	r27, r1
    5480:	9d 01       	movw	r18, r26
    5482:	44 27       	eor	r20, r20
    5484:	55 27       	eor	r21, r21
    5486:	21 93       	st	Z+, r18
    5488:	8b 2f       	mov	r24, r27
    548a:	99 27       	eor	r25, r25
    548c:	aa 27       	eor	r26, r26
    548e:	bb 27       	eor	r27, r27
    5490:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    5492:	8f ef       	ldi	r24, 0xFF	; 255
    5494:	df 01       	movw	r26, r30
    5496:	8d 93       	st	X+, r24
    5498:	fd 01       	movw	r30, r26
    549a:	81 93       	st	Z+, r24
    549c:	df 01       	movw	r26, r30
    549e:	8d 93       	st	X+, r24
    54a0:	fd 01       	movw	r30, r26
    54a2:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    54a4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54a6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54a8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54aa:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54ac:	2f 5f       	subi	r18, 0xFF	; 255
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	4f 4f       	sbci	r20, 0xFF	; 255
    54b2:	5f 4f       	sbci	r21, 0xFF	; 255
    54b4:	2a 8f       	std	Y+26, r18	; 0x1a
    54b6:	3b 8f       	std	Y+27, r19	; 0x1b
    54b8:	4c 8f       	std	Y+28, r20	; 0x1c
    54ba:	5d 8f       	std	Y+29, r21	; 0x1d
    54bc:	89 89       	ldd	r24, Y+17	; 0x11
    54be:	b7 01       	movw	r22, r14
    54c0:	01 e0       	ldi	r16, 0x01	; 1
    54c2:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    54c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54ca:	ac 8d       	ldd	r26, Y+28	; 0x1c
    54cc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    54ce:	06 96       	adiw	r24, 0x06	; 6
    54d0:	a1 1d       	adc	r26, r1
    54d2:	b1 1d       	adc	r27, r1
    54d4:	8a 8f       	std	Y+26, r24	; 0x1a
    54d6:	9b 8f       	std	Y+27, r25	; 0x1b
    54d8:	ac 8f       	std	Y+28, r26	; 0x1c
    54da:	bd 8f       	std	Y+29, r27	; 0x1d
    54dc:	89 89       	ldd	r24, Y+17	; 0x11
    54de:	b7 01       	movw	r22, r14
    54e0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54e2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54e6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54e8:	0e 94 13 07 	call	0xe26	; 0xe26 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    54ec:	89 89       	ldd	r24, Y+17	; 0x11
    54ee:	60 e0       	ldi	r22, 0x00	; 0
    54f0:	40 e0       	ldi	r20, 0x00	; 0
    54f2:	50 e0       	ldi	r21, 0x00	; 0
    54f4:	0e 94 8b 07 	call	0xf16	; 0xf16 <disk_ioctl>
    54f8:	88 23       	and	r24, r24
    54fa:	21 f0       	breq	.+8      	; 0x5504 <f_mkfs+0x9fe>
    54fc:	02 c0       	rjmp	.+4      	; 0x5502 <f_mkfs+0x9fc>
    54fe:	8e e0       	ldi	r24, 0x0E	; 14
    5500:	01 c0       	rjmp	.+2      	; 0x5504 <f_mkfs+0x9fe>
    5502:	81 e0       	ldi	r24, 0x01	; 1
}
    5504:	a4 96       	adiw	r28, 0x24	; 36
    5506:	cd bf       	out	0x3d, r28	; 61
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	cf 91       	pop	r28
    550c:	df 91       	pop	r29
    550e:	1f 91       	pop	r17
    5510:	0f 91       	pop	r16
    5512:	ff 90       	pop	r15
    5514:	ef 90       	pop	r14
    5516:	df 90       	pop	r13
    5518:	cf 90       	pop	r12
    551a:	bf 90       	pop	r11
    551c:	af 90       	pop	r10
    551e:	9f 90       	pop	r9
    5520:	8f 90       	pop	r8
    5522:	7f 90       	pop	r7
    5524:	6f 90       	pop	r6
    5526:	5f 90       	pop	r5
    5528:	4f 90       	pop	r4
    552a:	3f 90       	pop	r3
    552c:	2f 90       	pop	r2
    552e:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    5530:	7c 01       	movw	r14, r24
    5532:	8d 01       	movw	r16, r26
    5534:	ee 0c       	add	r14, r14
    5536:	ff 1c       	adc	r15, r15
    5538:	00 1f       	adc	r16, r16
    553a:	11 1f       	adc	r17, r17
    553c:	e8 0e       	add	r14, r24
    553e:	f9 1e       	adc	r15, r25
    5540:	0a 1f       	adc	r16, r26
    5542:	1b 1f       	adc	r17, r27
    5544:	08 94       	sec
    5546:	e1 1c       	adc	r14, r1
    5548:	f1 1c       	adc	r15, r1
    554a:	01 1d       	adc	r16, r1
    554c:	11 1d       	adc	r17, r1
    554e:	16 95       	lsr	r17
    5550:	07 95       	ror	r16
    5552:	f7 94       	ror	r15
    5554:	e7 94       	ror	r14
    5556:	22 e0       	ldi	r18, 0x02	; 2
    5558:	32 e0       	ldi	r19, 0x02	; 2
    555a:	40 e0       	ldi	r20, 0x00	; 0
    555c:	50 e0       	ldi	r21, 0x00	; 0
    555e:	e2 0e       	add	r14, r18
    5560:	f3 1e       	adc	r15, r19
    5562:	04 1f       	adc	r16, r20
    5564:	15 1f       	adc	r17, r21
    5566:	b9 e0       	ldi	r27, 0x09	; 9
    5568:	16 95       	lsr	r17
    556a:	07 95       	ror	r16
    556c:	f7 94       	ror	r15
    556e:	e7 94       	ror	r14
    5570:	ba 95       	dec	r27
    5572:	d1 f7       	brne	.-12     	; 0x5568 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    5574:	38 a1       	ldd	r19, Y+32	; 0x20
    5576:	83 2f       	mov	r24, r19
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	01 96       	adiw	r24, 0x01	; 1
    557c:	9c 01       	movw	r18, r24
    557e:	44 27       	eor	r20, r20
    5580:	37 fd       	sbrc	r19, 7
    5582:	40 95       	com	r20
    5584:	54 2f       	mov	r21, r20
    5586:	2e 8b       	std	Y+22, r18	; 0x16
    5588:	3f 8b       	std	Y+23, r19	; 0x17
    558a:	48 8f       	std	Y+24, r20	; 0x18
    558c:	59 8f       	std	Y+25, r21	; 0x19
    558e:	80 e2       	ldi	r24, 0x20	; 32
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	a0 e0       	ldi	r26, 0x00	; 0
    5594:	b0 e0       	ldi	r27, 0x00	; 0
    5596:	8a 8b       	std	Y+18, r24	; 0x12
    5598:	9b 8b       	std	Y+19, r25	; 0x13
    559a:	ac 8b       	std	Y+20, r26	; 0x14
    559c:	bd 8b       	std	Y+21, r27	; 0x15
    559e:	91 e0       	ldi	r25, 0x01	; 1
    55a0:	9f 8f       	std	Y+31, r25	; 0x1f
    55a2:	fe cb       	rjmp	.-2052   	; 0x4da0 <f_mkfs+0x29a>

000055a4 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    55a4:	6f 92       	push	r6
    55a6:	7f 92       	push	r7
    55a8:	8f 92       	push	r8
    55aa:	9f 92       	push	r9
    55ac:	af 92       	push	r10
    55ae:	bf 92       	push	r11
    55b0:	cf 92       	push	r12
    55b2:	df 92       	push	r13
    55b4:	ef 92       	push	r14
    55b6:	ff 92       	push	r15
    55b8:	0f 93       	push	r16
    55ba:	1f 93       	push	r17
    55bc:	df 93       	push	r29
    55be:	cf 93       	push	r28
    55c0:	0f 92       	push	r0
    55c2:	0f 92       	push	r0
    55c4:	cd b7       	in	r28, 0x3d	; 61
    55c6:	de b7       	in	r29, 0x3e	; 62
    55c8:	5c 01       	movw	r10, r24
    55ca:	6b 01       	movw	r12, r22
    55cc:	4a 01       	movw	r8, r20
    55ce:	8c 01       	movw	r16, r24
    55d0:	ee 24       	eor	r14, r14
    55d2:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    55d4:	08 94       	sec
    55d6:	c1 08       	sbc	r12, r1
    55d8:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    55da:	3e 01       	movw	r6, r28
    55dc:	08 94       	sec
    55de:	61 1c       	adc	r6, r1
    55e0:	71 1c       	adc	r7, r1
    55e2:	13 c0       	rjmp	.+38     	; 0x560a <f_gets+0x66>
    55e4:	c4 01       	movw	r24, r8
    55e6:	b8 01       	movw	r22, r16
    55e8:	41 e0       	ldi	r20, 0x01	; 1
    55ea:	50 e0       	ldi	r21, 0x00	; 0
    55ec:	93 01       	movw	r18, r6
    55ee:	0e 94 2b 18 	call	0x3056	; 0x3056 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	9a 81       	ldd	r25, Y+2	; 0x02
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	59 f4       	brne	.+22     	; 0x5610 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    55fa:	08 94       	sec
    55fc:	e1 1c       	adc	r14, r1
    55fe:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    5600:	f8 01       	movw	r30, r16
    5602:	81 91       	ld	r24, Z+
    5604:	8f 01       	movw	r16, r30
    5606:	8a 30       	cpi	r24, 0x0A	; 10
    5608:	19 f0       	breq	.+6      	; 0x5610 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    560a:	ec 14       	cp	r14, r12
    560c:	fd 04       	cpc	r15, r13
    560e:	54 f3       	brlt	.-44     	; 0x55e4 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    5610:	f8 01       	movw	r30, r16
    5612:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    5614:	ef 28       	or	r14, r15
    5616:	11 f4       	brne	.+4      	; 0x561c <f_gets+0x78>
    5618:	aa 24       	eor	r10, r10
    561a:	bb 24       	eor	r11, r11
}
    561c:	c5 01       	movw	r24, r10
    561e:	0f 90       	pop	r0
    5620:	0f 90       	pop	r0
    5622:	cf 91       	pop	r28
    5624:	df 91       	pop	r29
    5626:	1f 91       	pop	r17
    5628:	0f 91       	pop	r16
    562a:	ff 90       	pop	r15
    562c:	ef 90       	pop	r14
    562e:	df 90       	pop	r13
    5630:	cf 90       	pop	r12
    5632:	bf 90       	pop	r11
    5634:	af 90       	pop	r10
    5636:	9f 90       	pop	r9
    5638:	8f 90       	pop	r8
    563a:	7f 90       	pop	r7
    563c:	6f 90       	pop	r6
    563e:	08 95       	ret

00005640 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    5640:	0f 93       	push	r16
    5642:	1f 93       	push	r17
    5644:	df 93       	push	r29
    5646:	cf 93       	push	r28
    5648:	00 d0       	rcall	.+0      	; 0x564a <f_putc+0xa>
    564a:	cd b7       	in	r28, 0x3d	; 61
    564c:	de b7       	in	r29, 0x3e	; 62
    564e:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    5650:	61 15       	cp	r22, r1
    5652:	71 05       	cpc	r23, r1
    5654:	91 f0       	breq	.+36     	; 0x567a <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    5656:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    5658:	cb 01       	movw	r24, r22
    565a:	be 01       	movw	r22, r28
    565c:	6f 5f       	subi	r22, 0xFF	; 255
    565e:	7f 4f       	sbci	r23, 0xFF	; 255
    5660:	41 e0       	ldi	r20, 0x01	; 1
    5662:	50 e0       	ldi	r21, 0x00	; 0
    5664:	9e 01       	movw	r18, r28
    5666:	2e 5f       	subi	r18, 0xFE	; 254
    5668:	3f 4f       	sbci	r19, 0xFF	; 255
    566a:	0e 94 21 1a 	call	0x3442	; 0x3442 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	9b 81       	ldd	r25, Y+3	; 0x03
    5672:	89 2b       	or	r24, r25
    5674:	11 f4       	brne	.+4      	; 0x567a <f_putc+0x3a>
    5676:	0f ef       	ldi	r16, 0xFF	; 255
    5678:	1f ef       	ldi	r17, 0xFF	; 255
}
    567a:	c8 01       	movw	r24, r16
    567c:	23 96       	adiw	r28, 0x03	; 3
    567e:	cd bf       	out	0x3d, r28	; 61
    5680:	de bf       	out	0x3e, r29	; 62
    5682:	cf 91       	pop	r28
    5684:	df 91       	pop	r29
    5686:	1f 91       	pop	r17
    5688:	0f 91       	pop	r16
    568a:	08 95       	ret

0000568c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    568c:	ef 92       	push	r14
    568e:	ff 92       	push	r15
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	8c 01       	movw	r16, r24
    569a:	7b 01       	movw	r14, r22
    569c:	c0 e0       	ldi	r28, 0x00	; 0
    569e:	d0 e0       	ldi	r29, 0x00	; 0
    56a0:	0d c0       	rjmp	.+26     	; 0x56bc <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	b7 01       	movw	r22, r14
    56a6:	0e 94 20 2b 	call	0x5640	; 0x5640 <f_putc>
    56aa:	8f 5f       	subi	r24, 0xFF	; 255
    56ac:	9f 4f       	sbci	r25, 0xFF	; 255
    56ae:	19 f4       	brne	.+6      	; 0x56b6 <f_puts+0x2a>
    56b0:	cf ef       	ldi	r28, 0xFF	; 255
    56b2:	df ef       	ldi	r29, 0xFF	; 255
    56b4:	07 c0       	rjmp	.+14     	; 0x56c4 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    56b6:	0f 5f       	subi	r16, 0xFF	; 255
    56b8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ba:	21 96       	adiw	r28, 0x01	; 1
    56bc:	f8 01       	movw	r30, r16
    56be:	80 81       	ld	r24, Z
    56c0:	88 23       	and	r24, r24
    56c2:	79 f7       	brne	.-34     	; 0x56a2 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    56c4:	ce 01       	movw	r24, r28
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	ff 90       	pop	r15
    56d0:	ef 90       	pop	r14
    56d2:	08 95       	ret

000056d4 <SD_Close>:
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
    56d4:	8c e3       	ldi	r24, 0x3C	; 60
    56d6:	9f e4       	ldi	r25, 0x4F	; 79
    56d8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <f_close>
}
    56dc:	08 95       	ret

000056de <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    56de:	80 91 a8 06 	lds	r24, 0x06A8
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	80 ff       	sbrs	r24, 0
    56e6:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    56e8:	89 2f       	mov	r24, r25
    56ea:	08 95       	ret

000056ec <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    56ec:	e0 ea       	ldi	r30, 0xA0	; 160
    56ee:	f6 e0       	ldi	r31, 0x06	; 6
    56f0:	80 85       	ldd	r24, Z+8	; 0x08
    56f2:	86 95       	lsr	r24
    56f4:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    56f6:	81 70       	andi	r24, 0x01	; 1
    56f8:	08 95       	ret

000056fa <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    56fa:	af 92       	push	r10
    56fc:	bf 92       	push	r11
    56fe:	cf 92       	push	r12
    5700:	df 92       	push	r13
    5702:	ef 92       	push	r14
    5704:	ff 92       	push	r15
    5706:	0f 93       	push	r16
    5708:	1f 93       	push	r17
    570a:	df 93       	push	r29
    570c:	cf 93       	push	r28
    570e:	0f 92       	push	r0
    5710:	0f 92       	push	r0
    5712:	cd b7       	in	r28, 0x3d	; 61
    5714:	de b7       	in	r29, 0x3e	; 62
    5716:	5c 01       	movw	r10, r24
    5718:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    571a:	8c e3       	ldi	r24, 0x3C	; 60
    571c:	9f e4       	ldi	r25, 0x4F	; 79
    571e:	b5 01       	movw	r22, r10
    5720:	a6 01       	movw	r20, r12
    5722:	9e 01       	movw	r18, r28
    5724:	2f 5f       	subi	r18, 0xFF	; 255
    5726:	3f 4f       	sbci	r19, 0xFF	; 255
    5728:	0e 94 21 1a 	call	0x3442	; 0x3442 <f_write>
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	70 e0       	ldi	r23, 0x00	; 0
    5730:	3b c0       	rjmp	.+118    	; 0x57a8 <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    5732:	e0 90 14 57 	lds	r14, 0x5714
    5736:	f0 90 15 57 	lds	r15, 0x5715
    573a:	00 91 16 57 	lds	r16, 0x5716
    573e:	10 91 17 57 	lds	r17, 0x5717
    5742:	20 91 14 57 	lds	r18, 0x5714
    5746:	30 91 15 57 	lds	r19, 0x5715
    574a:	40 91 16 57 	lds	r20, 0x5716
    574e:	50 91 17 57 	lds	r21, 0x5717
    5752:	30 70       	andi	r19, 0x00	; 0
    5754:	40 70       	andi	r20, 0x00	; 0
    5756:	50 70       	andi	r21, 0x00	; 0
    5758:	f5 01       	movw	r30, r10
    575a:	e6 0f       	add	r30, r22
    575c:	f7 1f       	adc	r31, r23
    575e:	80 81       	ld	r24, Z
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	a0 e0       	ldi	r26, 0x00	; 0
    5764:	b0 e0       	ldi	r27, 0x00	; 0
    5766:	28 27       	eor	r18, r24
    5768:	39 27       	eor	r19, r25
    576a:	4a 27       	eor	r20, r26
    576c:	5b 27       	eor	r21, r27
    576e:	22 0f       	add	r18, r18
    5770:	33 1f       	adc	r19, r19
    5772:	22 0f       	add	r18, r18
    5774:	33 1f       	adc	r19, r19
    5776:	2a 54       	subi	r18, 0x4A	; 74
    5778:	34 4d       	sbci	r19, 0xD4	; 212
    577a:	ef 2c       	mov	r14, r15
    577c:	f0 2e       	mov	r15, r16
    577e:	01 2f       	mov	r16, r17
    5780:	11 27       	eor	r17, r17
    5782:	f9 01       	movw	r30, r18
    5784:	80 81       	ld	r24, Z
    5786:	91 81       	ldd	r25, Z+1	; 0x01
    5788:	a2 81       	ldd	r26, Z+2	; 0x02
    578a:	b3 81       	ldd	r27, Z+3	; 0x03
    578c:	e8 26       	eor	r14, r24
    578e:	f9 26       	eor	r15, r25
    5790:	0a 27       	eor	r16, r26
    5792:	1b 27       	eor	r17, r27
    5794:	e0 92 14 57 	sts	0x5714, r14
    5798:	f0 92 15 57 	sts	0x5715, r15
    579c:	00 93 16 57 	sts	0x5716, r16
    57a0:	10 93 17 57 	sts	0x5717, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    57a4:	6f 5f       	subi	r22, 0xFF	; 255
    57a6:	7f 4f       	sbci	r23, 0xFF	; 255
    57a8:	6c 15       	cp	r22, r12
    57aa:	7d 05       	cpc	r23, r13
    57ac:	10 f2       	brcs	.-124    	; 0x5732 <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	cf 91       	pop	r28
    57b4:	df 91       	pop	r29
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	ef 90       	pop	r14
    57be:	df 90       	pop	r13
    57c0:	cf 90       	pop	r12
    57c2:	bf 90       	pop	r11
    57c4:	af 90       	pop	r10
    57c6:	08 95       	ret

000057c8 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    57c8:	60 93 39 45 	sts	0x4539, r22
	tmp32[1] = (uint8_t)(var >> 8);
    57cc:	27 2f       	mov	r18, r23
    57ce:	38 2f       	mov	r19, r24
    57d0:	49 2f       	mov	r20, r25
    57d2:	55 27       	eor	r21, r21
    57d4:	20 93 3a 45 	sts	0x453A, r18
	tmp32[2] = (uint8_t)(var >> 16);
    57d8:	9c 01       	movw	r18, r24
    57da:	44 27       	eor	r20, r20
    57dc:	55 27       	eor	r21, r21
    57de:	20 93 3b 45 	sts	0x453B, r18
	tmp32[3] = (uint8_t)(var >> 24);
    57e2:	69 2f       	mov	r22, r25
    57e4:	77 27       	eor	r23, r23
    57e6:	88 27       	eor	r24, r24
    57e8:	99 27       	eor	r25, r25
    57ea:	60 93 3c 45 	sts	0x453C, r22
	SD_WriteBuffer(tmp32,4);
    57ee:	89 e3       	ldi	r24, 0x39	; 57
    57f0:	95 e4       	ldi	r25, 0x45	; 69
    57f2:	64 e0       	ldi	r22, 0x04	; 4
    57f4:	70 e0       	ldi	r23, 0x00	; 0
    57f6:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <SD_WriteBuffer>
}
    57fa:	08 95       	ret

000057fc <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    57fc:	80 93 5c 5c 	sts	0x5C5C, r24
	tmp16[1] = (uint8_t)(var >> 8);
    5800:	90 93 5d 5c 	sts	0x5C5D, r25
	SD_WriteBuffer(tmp16,2);
    5804:	8c e5       	ldi	r24, 0x5C	; 92
    5806:	9c e5       	ldi	r25, 0x5C	; 92
    5808:	62 e0       	ldi	r22, 0x02	; 2
    580a:	70 e0       	ldi	r23, 0x00	; 0
    580c:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <SD_WriteBuffer>
}
    5810:	08 95       	ret

00005812 <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    5812:	80 93 27 4b 	sts	0x4B27, r24
	SD_WriteBuffer(tmp8,1);
    5816:	87 e2       	ldi	r24, 0x27	; 39
    5818:	9b e4       	ldi	r25, 0x4B	; 75
    581a:	61 e0       	ldi	r22, 0x01	; 1
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <SD_WriteBuffer>
}
    5822:	08 95       	ret

00005824 <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5824:	8f ef       	ldi	r24, 0xFF	; 255
    5826:	9f ef       	ldi	r25, 0xFF	; 255
    5828:	af ef       	ldi	r26, 0xFF	; 255
    582a:	bf ef       	ldi	r27, 0xFF	; 255
    582c:	80 93 14 57 	sts	0x5714, r24
    5830:	90 93 15 57 	sts	0x5715, r25
    5834:	a0 93 16 57 	sts	0x5716, r26
    5838:	b0 93 17 57 	sts	0x5717, r27
}
    583c:	08 95       	ret

0000583e <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    583e:	60 91 14 57 	lds	r22, 0x5714
    5842:	70 91 15 57 	lds	r23, 0x5715
    5846:	80 91 16 57 	lds	r24, 0x5716
    584a:	90 91 17 57 	lds	r25, 0x5717
    584e:	60 95       	com	r22
    5850:	70 95       	com	r23
    5852:	80 95       	com	r24
    5854:	90 95       	com	r25
    5856:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
}
    585a:	08 95       	ret

0000585c <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    585c:	e0 e0       	ldi	r30, 0x00	; 0
    585e:	fa e0       	ldi	r31, 0x0A	; 10
    5860:	80 e4       	ldi	r24, 0x40	; 64
    5862:	92 e0       	ldi	r25, 0x02	; 2
    5864:	86 a3       	std	Z+38, r24	; 0x26
    5866:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    5868:	80 81       	ld	r24, Z
    586a:	80 7f       	andi	r24, 0xF0	; 240
    586c:	86 60       	ori	r24, 0x06	; 6
    586e:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5870:	86 81       	ldd	r24, Z+6	; 0x06
    5872:	8c 7f       	andi	r24, 0xFC	; 252
    5874:	82 60       	ori	r24, 0x02	; 2
    5876:	86 83       	std	Z+6, r24	; 0x06
	
}
    5878:	08 95       	ret

0000587a <SD_Init>:
};

//uint32_t crc_table[256];


uint8_t SD_Init(void){
    587a:	1f 93       	push	r17
	uint8_t tmp;


	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    587c:	e0 ea       	ldi	r30, 0xA0	; 160
    587e:	f6 e0       	ldi	r31, 0x06	; 6
    5880:	88 e1       	ldi	r24, 0x18	; 24
    5882:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    5884:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    5886:	0e 94 2e 2c 	call	0x585c	; 0x585c <SD_Timer_Init>
	tmp = disk_initialize(0);
    588a:	80 e0       	ldi	r24, 0x00	; 0
    588c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <disk_initialize>
    5890:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    5892:	80 e0       	ldi	r24, 0x00	; 0
    5894:	64 e1       	ldi	r22, 0x14	; 20
    5896:	74 e3       	ldi	r23, 0x34	; 52
    5898:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <f_mount>
	f_mount(1, &fso1);
    589c:	81 e0       	ldi	r24, 0x01	; 1
    589e:	62 e4       	ldi	r22, 0x42	; 66
    58a0:	76 e3       	ldi	r23, 0x36	; 54
    58a2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <f_mount>
    //f_mount(2, &fso2);
	return tmp;
}
    58a6:	81 2f       	mov	r24, r17
    58a8:	1f 91       	pop	r17
    58aa:	08 95       	ret

000058ac <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    58ac:	1f 92       	push	r1
    58ae:	0f 92       	push	r0
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	0f 92       	push	r0
    58b4:	0b b6       	in	r0, 0x3b	; 59
    58b6:	0f 92       	push	r0
    58b8:	11 24       	eor	r1, r1
    58ba:	2f 93       	push	r18
    58bc:	3f 93       	push	r19
    58be:	4f 93       	push	r20
    58c0:	5f 93       	push	r21
    58c2:	6f 93       	push	r22
    58c4:	7f 93       	push	r23
    58c6:	8f 93       	push	r24
    58c8:	9f 93       	push	r25
    58ca:	af 93       	push	r26
    58cc:	bf 93       	push	r27
    58ce:	ef 93       	push	r30
    58d0:	ff 93       	push	r31
	disk_timerproc();
    58d2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <disk_timerproc>


	if(okToCharge){
    58d6:	80 91 9b 33 	lds	r24, 0x339B
    58da:	88 23       	and	r24, r24
    58dc:	a9 f0       	breq	.+42     	; 0x5908 <__vector_47+0x5c>
		chargeCounter++;
    58de:	80 91 98 33 	lds	r24, 0x3398
    58e2:	90 91 99 33 	lds	r25, 0x3399
    58e6:	01 96       	adiw	r24, 0x01	; 1
    58e8:	80 93 98 33 	sts	0x3398, r24
    58ec:	90 93 99 33 	sts	0x3399, r25
		if(chargeCounter >= 16200){
    58f0:	88 54       	subi	r24, 0x48	; 72
    58f2:	9f 43       	sbci	r25, 0x3F	; 63
    58f4:	48 f0       	brcs	.+18     	; 0x5908 <__vector_47+0x5c>
			chargeCounter=0;
    58f6:	10 92 98 33 	sts	0x3398, r1
    58fa:	10 92 99 33 	sts	0x3399, r1
			chargePercent++;
    58fe:	80 91 97 33 	lds	r24, 0x3397
    5902:	8f 5f       	subi	r24, 0xFF	; 255
    5904:	80 93 97 33 	sts	0x3397, r24
		}
	}
}
    5908:	ff 91       	pop	r31
    590a:	ef 91       	pop	r30
    590c:	bf 91       	pop	r27
    590e:	af 91       	pop	r26
    5910:	9f 91       	pop	r25
    5912:	8f 91       	pop	r24
    5914:	7f 91       	pop	r23
    5916:	6f 91       	pop	r22
    5918:	5f 91       	pop	r21
    591a:	4f 91       	pop	r20
    591c:	3f 91       	pop	r19
    591e:	2f 91       	pop	r18
    5920:	0f 90       	pop	r0
    5922:	0b be       	out	0x3b, r0	; 59
    5924:	0f 90       	pop	r0
    5926:	0f be       	out	0x3f, r0	; 63
    5928:	0f 90       	pop	r0
    592a:	1f 90       	pop	r1
    592c:	18 95       	reti

0000592e <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    592e:	0f 93       	push	r16
    5930:	df 93       	push	r29
    5932:	cf 93       	push	r28
    5934:	0f 92       	push	r0
    5936:	cd b7       	in	r28, 0x3d	; 61
    5938:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    593a:	2f b7       	in	r18, 0x3f	; 63
    593c:	29 83       	std	Y+1, r18	; 0x01
    cli();
    593e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    5940:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    5942:	fc 01       	movw	r30, r24
    5944:	08 ed       	ldi	r16, 0xD8	; 216
    5946:	04 bf       	out	0x34, r16	; 52
    5948:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    594a:	89 81       	ldd	r24, Y+1	; 0x01
    594c:	8f bf       	out	0x3f, r24	; 63
}
    594e:	0f 90       	pop	r0
    5950:	cf 91       	pop	r28
    5952:	df 91       	pop	r29
    5954:	0f 91       	pop	r16
    5956:	08 95       	ret

00005958 <display_sendCommand>:

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5958:	94 e0       	ldi	r25, 0x04	; 4
    595a:	e0 e2       	ldi	r30, 0x20	; 32
    595c:	f6 e0       	ldi	r31, 0x06	; 6
    595e:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5960:	e0 ec       	ldi	r30, 0xC0	; 192
    5962:	f8 e0       	ldi	r31, 0x08	; 8
    5964:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5966:	80 91 c2 08 	lds	r24, 0x08C2
    596a:	87 ff       	sbrs	r24, 7
    596c:	fc cf       	rjmp	.-8      	; 0x5966 <display_sendCommand+0xe>
}
    596e:	08 95       	ret

00005970 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5970:	94 e0       	ldi	r25, 0x04	; 4
    5972:	e0 e2       	ldi	r30, 0x20	; 32
    5974:	f6 e0       	ldi	r31, 0x06	; 6
    5976:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    5978:	e0 ec       	ldi	r30, 0xC0	; 192
    597a:	f8 e0       	ldi	r31, 0x08	; 8
    597c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    597e:	80 91 c2 08 	lds	r24, 0x08C2
    5982:	87 ff       	sbrs	r24, 7
    5984:	fc cf       	rjmp	.-8      	; 0x597e <display_sendData+0xe>
}
    5986:	08 95       	ret

00005988 <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    5988:	80 6b       	ori	r24, 0xB0	; 176

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    598a:	94 e0       	ldi	r25, 0x04	; 4
    598c:	e0 e2       	ldi	r30, 0x20	; 32
    598e:	f6 e0       	ldi	r31, 0x06	; 6
    5990:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5992:	e0 ec       	ldi	r30, 0xC0	; 192
    5994:	f8 e0       	ldi	r31, 0x08	; 8
    5996:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5998:	80 91 c2 08 	lds	r24, 0x08C2
    599c:	87 ff       	sbrs	r24, 7
    599e:	fc cf       	rjmp	.-8      	; 0x5998 <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    59a0:	96 2f       	mov	r25, r22
    59a2:	9f 70       	andi	r25, 0x0F	; 15

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59a4:	84 e0       	ldi	r24, 0x04	; 4
    59a6:	e0 e2       	ldi	r30, 0x20	; 32
    59a8:	f6 e0       	ldi	r31, 0x06	; 6
    59aa:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59ac:	e0 ec       	ldi	r30, 0xC0	; 192
    59ae:	f8 e0       	ldi	r31, 0x08	; 8
    59b0:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59b2:	80 91 c2 08 	lds	r24, 0x08C2
    59b6:	87 ff       	sbrs	r24, 7
    59b8:	fc cf       	rjmp	.-8      	; 0x59b2 <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    59ba:	62 95       	swap	r22
    59bc:	6f 70       	andi	r22, 0x0F	; 15
    59be:	60 61       	ori	r22, 0x10	; 16

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59c0:	84 e0       	ldi	r24, 0x04	; 4
    59c2:	e0 e2       	ldi	r30, 0x20	; 32
    59c4:	f6 e0       	ldi	r31, 0x06	; 6
    59c6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59c8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ca:	f8 e0       	ldi	r31, 0x08	; 8
    59cc:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59ce:	80 91 c2 08 	lds	r24, 0x08C2
    59d2:	87 ff       	sbrs	r24, 7
    59d4:	fc cf       	rjmp	.-8      	; 0x59ce <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    59d6:	08 95       	ret

000059d8 <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    59d8:	bf 92       	push	r11
    59da:	cf 92       	push	r12
    59dc:	df 92       	push	r13
    59de:	ef 92       	push	r14
    59e0:	ff 92       	push	r15
    59e2:	0f 93       	push	r16
    59e4:	1f 93       	push	r17
    59e6:	cf 93       	push	r28
    59e8:	df 93       	push	r29
    59ea:	c0 e0       	ldi	r28, 0x00	; 0
    59ec:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    59ee:	56 e6       	ldi	r21, 0x66	; 102
    59f0:	c5 2e       	mov	r12, r21
    59f2:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    59f4:	40 e2       	ldi	r20, 0x20	; 32
    59f6:	e4 2e       	mov	r14, r20
    59f8:	46 e0       	ldi	r20, 0x06	; 6
    59fa:	f4 2e       	mov	r15, r20
    59fc:	34 e0       	ldi	r19, 0x04	; 4
    59fe:	b3 2e       	mov	r11, r19
	Display_SPI.DATA = dataByte;
    5a00:	00 ec       	ldi	r16, 0xC0	; 192
    5a02:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    5a04:	8c 2f       	mov	r24, r28
    5a06:	60 e0       	ldi	r22, 0x00	; 0
    5a08:	0e 94 c4 2c 	call	0x5988	; 0x5988 <display_setCursor>
    5a0c:	20 e0       	ldi	r18, 0x00	; 0
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    5a10:	cc 9d       	mul	r28, r12
    5a12:	a0 01       	movw	r20, r0
    5a14:	cd 9d       	mul	r28, r13
    5a16:	50 0d       	add	r21, r0
    5a18:	dc 9d       	mul	r29, r12
    5a1a:	50 0d       	add	r21, r0
    5a1c:	11 24       	eor	r1, r1
    5a1e:	fa 01       	movw	r30, r20
    5a20:	e2 0f       	add	r30, r18
    5a22:	f3 1f       	adc	r31, r19
    5a24:	eb 52       	subi	r30, 0x2B	; 43
    5a26:	fc 4a       	sbci	r31, 0xAC	; 172
    5a28:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a2a:	f7 01       	movw	r30, r14
    5a2c:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    5a2e:	f8 01       	movw	r30, r16
    5a30:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a32:	80 91 c2 08 	lds	r24, 0x08C2
    5a36:	87 ff       	sbrs	r24, 7
    5a38:	fc cf       	rjmp	.-8      	; 0x5a32 <display_writeBufferToScreen+0x5a>
    5a3a:	2f 5f       	subi	r18, 0xFF	; 255
    5a3c:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a3e:	26 36       	cpi	r18, 0x66	; 102
    5a40:	31 05       	cpc	r19, r1
    5a42:	69 f7       	brne	.-38     	; 0x5a1e <display_writeBufferToScreen+0x46>
    5a44:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a46:	c8 30       	cpi	r28, 0x08	; 8
    5a48:	d1 05       	cpc	r29, r1
    5a4a:	e1 f6       	brne	.-72     	; 0x5a04 <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    5a4c:	df 91       	pop	r29
    5a4e:	cf 91       	pop	r28
    5a50:	1f 91       	pop	r17
    5a52:	0f 91       	pop	r16
    5a54:	ff 90       	pop	r15
    5a56:	ef 90       	pop	r14
    5a58:	df 90       	pop	r13
    5a5a:	cf 90       	pop	r12
    5a5c:	bf 90       	pop	r11
    5a5e:	08 95       	ret

00005a60 <display_clearPage>:


void display_clearPage(uint8_t page) {
    5a60:	40 e0       	ldi	r20, 0x00	; 0
    5a62:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	26 e6       	ldi	r18, 0x66	; 102
    5a68:	30 e0       	ldi	r19, 0x00	; 0
    5a6a:	82 9f       	mul	r24, r18
    5a6c:	b0 01       	movw	r22, r0
    5a6e:	83 9f       	mul	r24, r19
    5a70:	70 0d       	add	r23, r0
    5a72:	92 9f       	mul	r25, r18
    5a74:	70 0d       	add	r23, r0
    5a76:	11 24       	eor	r1, r1
    5a78:	8a e0       	ldi	r24, 0x0A	; 10
    5a7a:	fb 01       	movw	r30, r22
    5a7c:	e4 0f       	add	r30, r20
    5a7e:	f5 1f       	adc	r31, r21
    5a80:	eb 52       	subi	r30, 0x2B	; 43
    5a82:	fc 4a       	sbci	r31, 0xAC	; 172
    5a84:	80 83       	st	Z, r24
    5a86:	4f 5f       	subi	r20, 0xFF	; 255
    5a88:	5f 4f       	sbci	r21, 0xFF	; 255
    5a8a:	46 36       	cpi	r20, 0x66	; 102
    5a8c:	51 05       	cpc	r21, r1
    5a8e:	a9 f7       	brne	.-22     	; 0x5a7a <display_clearPage+0x1a>
}
    5a90:	08 95       	ret

00005a92 <display_clearBuffer>:


void display_clearBuffer() {
    5a92:	20 e0       	ldi	r18, 0x00	; 0
    5a94:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5a96:	66 e6       	ldi	r22, 0x66	; 102
    5a98:	70 e0       	ldi	r23, 0x00	; 0
    5a9a:	0f c0       	rjmp	.+30     	; 0x5aba <display_clearBuffer+0x28>
    5a9c:	fa 01       	movw	r30, r20
    5a9e:	e8 0f       	add	r30, r24
    5aa0:	f9 1f       	adc	r31, r25
    5aa2:	eb 52       	subi	r30, 0x2B	; 43
    5aa4:	fc 4a       	sbci	r31, 0xAC	; 172
    5aa6:	10 82       	st	Z, r1
    5aa8:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5aaa:	86 36       	cpi	r24, 0x66	; 102
    5aac:	91 05       	cpc	r25, r1
    5aae:	b1 f7       	brne	.-20     	; 0x5a9c <display_clearBuffer+0xa>
    5ab0:	2f 5f       	subi	r18, 0xFF	; 255
    5ab2:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5ab4:	28 30       	cpi	r18, 0x08	; 8
    5ab6:	31 05       	cpc	r19, r1
    5ab8:	51 f0       	breq	.+20     	; 0x5ace <display_clearBuffer+0x3c>
    5aba:	80 e0       	ldi	r24, 0x00	; 0
    5abc:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5abe:	26 9f       	mul	r18, r22
    5ac0:	a0 01       	movw	r20, r0
    5ac2:	27 9f       	mul	r18, r23
    5ac4:	50 0d       	add	r21, r0
    5ac6:	36 9f       	mul	r19, r22
    5ac8:	50 0d       	add	r21, r0
    5aca:	11 24       	eor	r1, r1
    5acc:	e7 cf       	rjmp	.-50     	; 0x5a9c <display_clearBuffer+0xa>
    5ace:	08 95       	ret

00005ad0 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    5ad0:	cf 93       	push	r28
    5ad2:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5ad4:	a0 e4       	ldi	r26, 0x40	; 64
    5ad6:	b6 e0       	ldi	r27, 0x06	; 6
    5ad8:	88 e3       	ldi	r24, 0x38	; 56
    5ada:	54 96       	adiw	r26, 0x14	; 20
    5adc:	8c 93       	st	X, r24
    5ade:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5ae0:	40 e2       	ldi	r20, 0x20	; 32
    5ae2:	56 e0       	ldi	r21, 0x06	; 6
    5ae4:	fa 01       	movw	r30, r20
    5ae6:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    5ae8:	30 e1       	ldi	r19, 0x10	; 16
    5aea:	15 96       	adiw	r26, 0x05	; 5
    5aec:	3c 93       	st	X, r19
    5aee:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5af0:	e0 e6       	ldi	r30, 0x60	; 96
    5af2:	f6 e0       	ldi	r31, 0x06	; 6
    5af4:	21 e0       	ldi	r18, 0x01	; 1
    5af6:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5af8:	25 83       	std	Z+5, r18	; 0x05
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	90 e9       	ldi	r25, 0x90	; 144
    5afe:	ec 01       	movw	r28, r24
    5b00:	21 97       	sbiw	r28, 0x01	; 1
    5b02:	f1 f7       	brne	.-4      	; 0x5b00 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5b04:	26 83       	std	Z+6, r18	; 0x06
    5b06:	ec 01       	movw	r28, r24
    5b08:	21 97       	sbiw	r28, 0x01	; 1
    5b0a:	f1 f7       	brne	.-4      	; 0x5b08 <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5b0c:	25 83       	std	Z+5, r18	; 0x05
    5b0e:	01 97       	sbiw	r24, 0x01	; 1
    5b10:	f1 f7       	brne	.-4      	; 0x5b0e <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5b12:	8d ed       	ldi	r24, 0xDD	; 221
    5b14:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5b18:	80 eb       	ldi	r24, 0xB0	; 176
    5b1a:	11 96       	adiw	r26, 0x01	; 1
    5b1c:	8c 93       	st	X, r24
    5b1e:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5b20:	84 e0       	ldi	r24, 0x04	; 4
    5b22:	fa 01       	movw	r30, r20
    5b24:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5b26:	16 96       	adiw	r26, 0x06	; 6
    5b28:	3c 93       	st	X, r19

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b2a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b2c:	82 ee       	ldi	r24, 0xE2	; 226
    5b2e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b30:	f8 e0       	ldi	r31, 0x08	; 8
    5b32:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b34:	80 91 c2 08 	lds	r24, 0x08C2
    5b38:	87 ff       	sbrs	r24, 7
    5b3a:	fc cf       	rjmp	.-8      	; 0x5b34 <display_init+0x64>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b3c:	84 e0       	ldi	r24, 0x04	; 4
    5b3e:	e0 e2       	ldi	r30, 0x20	; 32
    5b40:	f6 e0       	ldi	r31, 0x06	; 6
    5b42:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b44:	80 e4       	ldi	r24, 0x40	; 64
    5b46:	e0 ec       	ldi	r30, 0xC0	; 192
    5b48:	f8 e0       	ldi	r31, 0x08	; 8
    5b4a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b4c:	80 91 c2 08 	lds	r24, 0x08C2
    5b50:	87 ff       	sbrs	r24, 7
    5b52:	fc cf       	rjmp	.-8      	; 0x5b4c <display_init+0x7c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b54:	84 e0       	ldi	r24, 0x04	; 4
    5b56:	e0 e2       	ldi	r30, 0x20	; 32
    5b58:	f6 e0       	ldi	r31, 0x06	; 6
    5b5a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b5c:	81 ea       	ldi	r24, 0xA1	; 161
    5b5e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b60:	f8 e0       	ldi	r31, 0x08	; 8
    5b62:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b64:	80 91 c2 08 	lds	r24, 0x08C2
    5b68:	87 ff       	sbrs	r24, 7
    5b6a:	fc cf       	rjmp	.-8      	; 0x5b64 <display_init+0x94>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b6c:	84 e0       	ldi	r24, 0x04	; 4
    5b6e:	e0 e2       	ldi	r30, 0x20	; 32
    5b70:	f6 e0       	ldi	r31, 0x06	; 6
    5b72:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b74:	80 ec       	ldi	r24, 0xC0	; 192
    5b76:	e0 ec       	ldi	r30, 0xC0	; 192
    5b78:	f8 e0       	ldi	r31, 0x08	; 8
    5b7a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b7c:	80 91 c2 08 	lds	r24, 0x08C2
    5b80:	87 ff       	sbrs	r24, 7
    5b82:	fc cf       	rjmp	.-8      	; 0x5b7c <display_init+0xac>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b84:	84 e0       	ldi	r24, 0x04	; 4
    5b86:	e0 e2       	ldi	r30, 0x20	; 32
    5b88:	f6 e0       	ldi	r31, 0x06	; 6
    5b8a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b8c:	84 ea       	ldi	r24, 0xA4	; 164
    5b8e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b90:	f8 e0       	ldi	r31, 0x08	; 8
    5b92:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b94:	80 91 c2 08 	lds	r24, 0x08C2
    5b98:	87 ff       	sbrs	r24, 7
    5b9a:	fc cf       	rjmp	.-8      	; 0x5b94 <display_init+0xc4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b9c:	84 e0       	ldi	r24, 0x04	; 4
    5b9e:	e0 e2       	ldi	r30, 0x20	; 32
    5ba0:	f6 e0       	ldi	r31, 0x06	; 6
    5ba2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ba4:	86 ea       	ldi	r24, 0xA6	; 166
    5ba6:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba8:	f8 e0       	ldi	r31, 0x08	; 8
    5baa:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bac:	80 91 c2 08 	lds	r24, 0x08C2
    5bb0:	87 ff       	sbrs	r24, 7
    5bb2:	fc cf       	rjmp	.-8      	; 0x5bac <display_init+0xdc>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bb4:	84 e0       	ldi	r24, 0x04	; 4
    5bb6:	e0 e2       	ldi	r30, 0x20	; 32
    5bb8:	f6 e0       	ldi	r31, 0x06	; 6
    5bba:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bbc:	8f e2       	ldi	r24, 0x2F	; 47
    5bbe:	e0 ec       	ldi	r30, 0xC0	; 192
    5bc0:	f8 e0       	ldi	r31, 0x08	; 8
    5bc2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bc4:	80 91 c2 08 	lds	r24, 0x08C2
    5bc8:	87 ff       	sbrs	r24, 7
    5bca:	fc cf       	rjmp	.-8      	; 0x5bc4 <display_init+0xf4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bcc:	84 e0       	ldi	r24, 0x04	; 4
    5bce:	e0 e2       	ldi	r30, 0x20	; 32
    5bd0:	f6 e0       	ldi	r31, 0x06	; 6
    5bd2:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bd4:	87 e2       	ldi	r24, 0x27	; 39
    5bd6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bd8:	f8 e0       	ldi	r31, 0x08	; 8
    5bda:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bdc:	80 91 c2 08 	lds	r24, 0x08C2
    5be0:	87 ff       	sbrs	r24, 7
    5be2:	fc cf       	rjmp	.-8      	; 0x5bdc <display_init+0x10c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5be4:	84 e0       	ldi	r24, 0x04	; 4
    5be6:	e0 e2       	ldi	r30, 0x20	; 32
    5be8:	f6 e0       	ldi	r31, 0x06	; 6
    5bea:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bec:	8a ef       	ldi	r24, 0xFA	; 250
    5bee:	e0 ec       	ldi	r30, 0xC0	; 192
    5bf0:	f8 e0       	ldi	r31, 0x08	; 8
    5bf2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bf4:	80 91 c2 08 	lds	r24, 0x08C2
    5bf8:	87 ff       	sbrs	r24, 7
    5bfa:	fc cf       	rjmp	.-8      	; 0x5bf4 <display_init+0x124>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bfc:	84 e0       	ldi	r24, 0x04	; 4
    5bfe:	e0 e2       	ldi	r30, 0x20	; 32
    5c00:	f6 e0       	ldi	r31, 0x06	; 6
    5c02:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c04:	80 e9       	ldi	r24, 0x90	; 144
    5c06:	e0 ec       	ldi	r30, 0xC0	; 192
    5c08:	f8 e0       	ldi	r31, 0x08	; 8
    5c0a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c0c:	80 91 c2 08 	lds	r24, 0x08C2
    5c10:	87 ff       	sbrs	r24, 7
    5c12:	fc cf       	rjmp	.-8      	; 0x5c0c <display_init+0x13c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c14:	84 e0       	ldi	r24, 0x04	; 4
    5c16:	e0 e2       	ldi	r30, 0x20	; 32
    5c18:	f6 e0       	ldi	r31, 0x06	; 6
    5c1a:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c1c:	80 e4       	ldi	r24, 0x40	; 64
    5c1e:	e0 ec       	ldi	r30, 0xC0	; 192
    5c20:	f8 e0       	ldi	r31, 0x08	; 8
    5c22:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c24:	80 91 c2 08 	lds	r24, 0x08C2
    5c28:	87 ff       	sbrs	r24, 7
    5c2a:	fc cf       	rjmp	.-8      	; 0x5c24 <display_init+0x154>
    5c2c:	8c ed       	ldi	r24, 0xDC	; 220
    5c2e:	95 e0       	ldi	r25, 0x05	; 5
    5c30:	20 e7       	ldi	r18, 0x70	; 112
    5c32:	31 e0       	ldi	r19, 0x01	; 1
    5c34:	f9 01       	movw	r30, r18
    5c36:	31 97       	sbiw	r30, 0x01	; 1
    5c38:	f1 f7       	brne	.-4      	; 0x5c36 <display_init+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c3c:	d9 f7       	brne	.-10     	; 0x5c34 <display_init+0x164>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c3e:	84 e0       	ldi	r24, 0x04	; 4
    5c40:	e0 e2       	ldi	r30, 0x20	; 32
    5c42:	f6 e0       	ldi	r31, 0x06	; 6
    5c44:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c46:	82 ea       	ldi	r24, 0xA2	; 162
    5c48:	e0 ec       	ldi	r30, 0xC0	; 192
    5c4a:	f8 e0       	ldi	r31, 0x08	; 8
    5c4c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c4e:	80 91 c2 08 	lds	r24, 0x08C2
    5c52:	87 ff       	sbrs	r24, 7
    5c54:	fc cf       	rjmp	.-8      	; 0x5c4e <display_init+0x17e>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c56:	84 e0       	ldi	r24, 0x04	; 4
    5c58:	e0 e2       	ldi	r30, 0x20	; 32
    5c5a:	f6 e0       	ldi	r31, 0x06	; 6
    5c5c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c5e:	81 e8       	ldi	r24, 0x81	; 129
    5c60:	e0 ec       	ldi	r30, 0xC0	; 192
    5c62:	f8 e0       	ldi	r31, 0x08	; 8
    5c64:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c66:	80 91 c2 08 	lds	r24, 0x08C2
    5c6a:	87 ff       	sbrs	r24, 7
    5c6c:	fc cf       	rjmp	.-8      	; 0x5c66 <display_init+0x196>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c6e:	84 e0       	ldi	r24, 0x04	; 4
    5c70:	e0 e2       	ldi	r30, 0x20	; 32
    5c72:	f6 e0       	ldi	r31, 0x06	; 6
    5c74:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c76:	88 e0       	ldi	r24, 0x08	; 8
    5c78:	e0 ec       	ldi	r30, 0xC0	; 192
    5c7a:	f8 e0       	ldi	r31, 0x08	; 8
    5c7c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c7e:	80 91 c2 08 	lds	r24, 0x08C2
    5c82:	87 ff       	sbrs	r24, 7
    5c84:	fc cf       	rjmp	.-8      	; 0x5c7e <display_init+0x1ae>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c86:	84 e0       	ldi	r24, 0x04	; 4
    5c88:	e0 e2       	ldi	r30, 0x20	; 32
    5c8a:	f6 e0       	ldi	r31, 0x06	; 6
    5c8c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c8e:	8f ea       	ldi	r24, 0xAF	; 175
    5c90:	e0 ec       	ldi	r30, 0xC0	; 192
    5c92:	f8 e0       	ldi	r31, 0x08	; 8
    5c94:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c96:	80 91 c2 08 	lds	r24, 0x08C2
    5c9a:	87 ff       	sbrs	r24, 7
    5c9c:	fc cf       	rjmp	.-8      	; 0x5c96 <display_init+0x1c6>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearBuffer();
    5c9e:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <display_clearBuffer>
	display_writeBufferToScreen();
    5ca2:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>

}
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	08 95       	ret

00005cac <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5cac:	2f 92       	push	r2
    5cae:	3f 92       	push	r3
    5cb0:	4f 92       	push	r4
    5cb2:	5f 92       	push	r5
    5cb4:	6f 92       	push	r6
    5cb6:	7f 92       	push	r7
    5cb8:	8f 92       	push	r8
    5cba:	9f 92       	push	r9
    5cbc:	af 92       	push	r10
    5cbe:	bf 92       	push	r11
    5cc0:	cf 92       	push	r12
    5cc2:	df 92       	push	r13
    5cc4:	ef 92       	push	r14
    5cc6:	ff 92       	push	r15
    5cc8:	0f 93       	push	r16
    5cca:	1f 93       	push	r17
    5ccc:	df 93       	push	r29
    5cce:	cf 93       	push	r28
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
    5cd4:	28 97       	sbiw	r28, 0x08	; 8
    5cd6:	cd bf       	out	0x3d, r28	; 61
    5cd8:	de bf       	out	0x3e, r29	; 62
    5cda:	1c 01       	movw	r2, r24
    5cdc:	4c 83       	std	Y+4, r20	; 0x04
    5cde:	2f 83       	std	Y+7, r18	; 0x07
    5ce0:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5ce2:	d9 01       	movw	r26, r18
    5ce4:	13 96       	adiw	r26, 0x03	; 3
    5ce6:	bc 91       	ld	r27, X
    5ce8:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5cea:	f9 01       	movw	r30, r18
    5cec:	f4 81       	ldd	r31, Z+4	; 0x04
    5cee:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5cf0:	d9 01       	movw	r26, r18
    5cf2:	15 96       	adiw	r26, 0x05	; 5
    5cf4:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5cf6:	bb 81       	ldd	r27, Y+3	; 0x03
    5cf8:	0b 2f       	mov	r16, r27
    5cfa:	10 e0       	ldi	r17, 0x00	; 0
    5cfc:	c8 01       	movw	r24, r16
    5cfe:	07 96       	adiw	r24, 0x07	; 7
    5d00:	e3 e0       	ldi	r30, 0x03	; 3
    5d02:	95 95       	asr	r25
    5d04:	87 95       	ror	r24
    5d06:	ea 95       	dec	r30
    5d08:	e1 f7       	brne	.-8      	; 0x5d02 <display_putString+0x56>
    5d0a:	89 83       	std	Y+1, r24	; 0x01
    5d0c:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d0e:	e2 2e       	mov	r14, r18
    5d10:	ff 24       	eor	r15, r15
    5d12:	e6 e0       	ldi	r30, 0x06	; 6
    5d14:	f0 e0       	ldi	r31, 0x00	; 0
    5d16:	ee 0e       	add	r14, r30
    5d18:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    5d1a:	46 2e       	mov	r4, r22
    5d1c:	55 24       	eor	r5, r5
    5d1e:	6f c0       	rjmp	.+222    	; 0x5dfe <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5d20:	7e 2f       	mov	r23, r30
    5d22:	fa 81       	ldd	r31, Y+2	; 0x02
    5d24:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5d26:	af 81       	ldd	r26, Y+7	; 0x07
    5d28:	b8 85       	ldd	r27, Y+8	; 0x08
    5d2a:	8c 91       	ld	r24, X
    5d2c:	88 23       	and	r24, r24
    5d2e:	39 f4       	brne	.+14     	; 0x5d3e <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5d30:	12 96       	adiw	r26, 0x02	; 2
    5d32:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5d34:	74 9f       	mul	r23, r20
    5d36:	f0 01       	movw	r30, r0
    5d38:	11 24       	eor	r1, r1
    5d3a:	36 96       	adiw	r30, 0x06	; 6
    5d3c:	2b c0       	rjmp	.+86     	; 0x5d94 <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5d3e:	ef 81       	ldd	r30, Y+7	; 0x07
    5d40:	f8 85       	ldd	r31, Y+8	; 0x08
    5d42:	e7 0f       	add	r30, r23
    5d44:	f1 1d       	adc	r31, r1
    5d46:	46 81       	ldd	r20, Z+6	; 0x06
    5d48:	ef 81       	ldd	r30, Y+7	; 0x07
    5d4a:	f8 85       	ldd	r31, Y+8	; 0x08
    5d4c:	ed 83       	std	Y+5, r30	; 0x05
    5d4e:	fe 83       	std	Y+6, r31	; 0x06
    5d50:	50 e0       	ldi	r21, 0x00	; 0
    5d52:	a0 e0       	ldi	r26, 0x00	; 0
    5d54:	b0 e0       	ldi	r27, 0x00	; 0
    5d56:	0a c0       	rjmp	.+20     	; 0x5d6c <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5d58:	ed 81       	ldd	r30, Y+5	; 0x05
    5d5a:	fe 81       	ldd	r31, Y+6	; 0x06
    5d5c:	85 81       	ldd	r24, Z+5	; 0x05
    5d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    5d60:	f8 9f       	mul	r31, r24
    5d62:	c0 01       	movw	r24, r0
    5d64:	11 24       	eor	r1, r1
    5d66:	a8 0f       	add	r26, r24
    5d68:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5d6a:	5f 5f       	subi	r21, 0xFF	; 255
    5d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d70:	01 96       	adiw	r24, 0x01	; 1
    5d72:	8d 83       	std	Y+5, r24	; 0x05
    5d74:	9e 83       	std	Y+6, r25	; 0x06
    5d76:	57 17       	cp	r21, r23
    5d78:	78 f3       	brcs	.-34     	; 0x5d58 <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d7a:	84 2f       	mov	r24, r20
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	82 9f       	mul	r24, r18
    5d80:	f0 01       	movw	r30, r0
    5d82:	83 9f       	mul	r24, r19
    5d84:	f0 0d       	add	r31, r0
    5d86:	92 9f       	mul	r25, r18
    5d88:	f0 0d       	add	r31, r0
    5d8a:	11 24       	eor	r1, r1
    5d8c:	ee 0d       	add	r30, r14
    5d8e:	ff 1d       	adc	r31, r15
    5d90:	ea 0f       	add	r30, r26
    5d92:	fb 1f       	adc	r31, r27
    5d94:	af 81       	ldd	r26, Y+7	; 0x07
    5d96:	b8 85       	ldd	r27, Y+8	; 0x08
    5d98:	ae 0f       	add	r26, r30
    5d9a:	bf 1f       	adc	r27, r31
    5d9c:	50 e0       	ldi	r21, 0x00	; 0
    5d9e:	16 c0       	rjmp	.+44     	; 0x5dcc <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5da0:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5da2:	9b 81       	ldd	r25, Y+3	; 0x03
    5da4:	99 30       	cpi	r25, 0x09	; 9
    5da6:	50 f0       	brcs	.+20     	; 0x5dbc <display_putString+0x110>
    5da8:	08 15       	cp	r16, r8
    5daa:	19 05       	cpc	r17, r9
    5dac:	3c f4       	brge	.+14     	; 0x5dbc <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	06 2c       	mov	r0, r6
    5db2:	02 c0       	rjmp	.+4      	; 0x5db8 <display_putString+0x10c>
    5db4:	95 95       	asr	r25
    5db6:	87 95       	ror	r24
    5db8:	0a 94       	dec	r0
    5dba:	e2 f7       	brpl	.-8      	; 0x5db4 <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5dbc:	f5 01       	movw	r30, r10
    5dbe:	e7 0f       	add	r30, r23
    5dc0:	f1 1d       	adc	r31, r1
    5dc2:	eb 52       	subi	r30, 0x2B	; 43
    5dc4:	fc 4a       	sbci	r31, 0xAC	; 172
    5dc6:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5dc8:	5f 5f       	subi	r21, 0xFF	; 255
    5dca:	11 96       	adiw	r26, 0x01	; 1
    5dcc:	75 2f       	mov	r23, r21
    5dce:	76 0f       	add	r23, r22
    5dd0:	54 17       	cp	r21, r20
    5dd2:	30 f3       	brcs	.-52     	; 0x5da0 <display_putString+0xf4>
    5dd4:	84 2f       	mov	r24, r20
    5dd6:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5dd8:	85 36       	cpi	r24, 0x65	; 101
    5dda:	31 f0       	breq	.+12     	; 0x5de8 <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    5ddc:	f5 01       	movw	r30, r10
    5dde:	e8 0f       	add	r30, r24
    5de0:	f1 1d       	adc	r31, r1
    5de2:	ea 52       	subi	r30, 0x2A	; 42
    5de4:	fc 4a       	sbci	r31, 0xAC	; 172
    5de6:	10 82       	st	Z, r1
 		}
		offset++;
    5de8:	68 2f       	mov	r22, r24
    5dea:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    5dec:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5dee:	f1 01       	movw	r30, r2
    5df0:	ed 0d       	add	r30, r13
    5df2:	f1 1d       	adc	r31, r1
    5df4:	e0 81       	ld	r30, Z
    5df6:	ee 23       	and	r30, r30
    5df8:	09 f0       	breq	.+2      	; 0x5dfc <display_putString+0x150>
    5dfa:	92 cf       	rjmp	.-220    	; 0x5d20 <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5dfc:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5dfe:	2c 2d       	mov	r18, r12
    5e00:	30 e0       	ldi	r19, 0x00	; 0
    5e02:	c9 01       	movw	r24, r18
    5e04:	73 e0       	ldi	r23, 0x03	; 3
    5e06:	88 0f       	add	r24, r24
    5e08:	99 1f       	adc	r25, r25
    5e0a:	7a 95       	dec	r23
    5e0c:	e1 f7       	brne	.-8      	; 0x5e06 <display_putString+0x15a>
    5e0e:	80 17       	cp	r24, r16
    5e10:	91 07       	cpc	r25, r17
    5e12:	e4 f4       	brge	.+56     	; 0x5e4c <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5e14:	2f 5f       	subi	r18, 0xFF	; 255
    5e16:	3f 4f       	sbci	r19, 0xFF	; 255
    5e18:	49 01       	movw	r8, r18
    5e1a:	63 e0       	ldi	r22, 0x03	; 3
    5e1c:	88 0c       	add	r8, r8
    5e1e:	99 1c       	adc	r9, r9
    5e20:	6a 95       	dec	r22
    5e22:	e1 f7       	brne	.-8      	; 0x5e1c <display_putString+0x170>
    5e24:	21 50       	subi	r18, 0x01	; 1
    5e26:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5e28:	34 01       	movw	r6, r8
    5e2a:	60 1a       	sub	r6, r16
    5e2c:	71 0a       	sbc	r7, r17
    5e2e:	6c 81       	ldd	r22, Y+4	; 0x04
    5e30:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5e32:	c9 01       	movw	r24, r18
    5e34:	84 0d       	add	r24, r4
    5e36:	95 1d       	adc	r25, r5
    5e38:	a6 e6       	ldi	r26, 0x66	; 102
    5e3a:	b0 e0       	ldi	r27, 0x00	; 0
    5e3c:	8a 9f       	mul	r24, r26
    5e3e:	50 01       	movw	r10, r0
    5e40:	8b 9f       	mul	r24, r27
    5e42:	b0 0c       	add	r11, r0
    5e44:	9a 9f       	mul	r25, r26
    5e46:	b0 0c       	add	r11, r0
    5e48:	11 24       	eor	r1, r1
    5e4a:	d1 cf       	rjmp	.-94     	; 0x5dee <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    5e4c:	28 96       	adiw	r28, 0x08	; 8
    5e4e:	cd bf       	out	0x3d, r28	; 61
    5e50:	de bf       	out	0x3e, r29	; 62
    5e52:	cf 91       	pop	r28
    5e54:	df 91       	pop	r29
    5e56:	1f 91       	pop	r17
    5e58:	0f 91       	pop	r16
    5e5a:	ff 90       	pop	r15
    5e5c:	ef 90       	pop	r14
    5e5e:	df 90       	pop	r13
    5e60:	cf 90       	pop	r12
    5e62:	bf 90       	pop	r11
    5e64:	af 90       	pop	r10
    5e66:	9f 90       	pop	r9
    5e68:	8f 90       	pop	r8
    5e6a:	7f 90       	pop	r7
    5e6c:	6f 90       	pop	r6
    5e6e:	5f 90       	pop	r5
    5e70:	4f 90       	pop	r4
    5e72:	3f 90       	pop	r3
    5e74:	2f 90       	pop	r2
    5e76:	08 95       	ret

00005e78 <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    5e78:	28 2f       	mov	r18, r24
    5e7a:	26 95       	lsr	r18
    5e7c:	26 95       	lsr	r18
    5e7e:	26 95       	lsr	r18
    5e80:	70 e0       	ldi	r23, 0x00	; 0
    5e82:	a8 2f       	mov	r26, r24
    5e84:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    5e86:	44 23       	and	r20, r20
    5e88:	d9 f0       	breq	.+54     	; 0x5ec0 <display_drawPixel+0x48>
    5e8a:	30 e0       	ldi	r19, 0x00	; 0
    5e8c:	86 e6       	ldi	r24, 0x66	; 102
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	28 9f       	mul	r18, r24
    5e92:	f0 01       	movw	r30, r0
    5e94:	29 9f       	mul	r18, r25
    5e96:	f0 0d       	add	r31, r0
    5e98:	38 9f       	mul	r19, r24
    5e9a:	f0 0d       	add	r31, r0
    5e9c:	11 24       	eor	r1, r1
    5e9e:	e6 0f       	add	r30, r22
    5ea0:	f7 1f       	adc	r31, r23
    5ea2:	eb 52       	subi	r30, 0x2B	; 43
    5ea4:	fc 4a       	sbci	r31, 0xAC	; 172
    5ea6:	20 81       	ld	r18, Z
    5ea8:	a7 70       	andi	r26, 0x07	; 7
    5eaa:	b0 70       	andi	r27, 0x00	; 0
    5eac:	81 e0       	ldi	r24, 0x01	; 1
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	02 c0       	rjmp	.+4      	; 0x5eb6 <display_drawPixel+0x3e>
    5eb2:	88 0f       	add	r24, r24
    5eb4:	99 1f       	adc	r25, r25
    5eb6:	aa 95       	dec	r26
    5eb8:	e2 f7       	brpl	.-8      	; 0x5eb2 <display_drawPixel+0x3a>
    5eba:	28 2b       	or	r18, r24
    5ebc:	20 83       	st	Z, r18
    5ebe:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5ec0:	30 e0       	ldi	r19, 0x00	; 0
    5ec2:	86 e6       	ldi	r24, 0x66	; 102
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	28 9f       	mul	r18, r24
    5ec8:	f0 01       	movw	r30, r0
    5eca:	29 9f       	mul	r18, r25
    5ecc:	f0 0d       	add	r31, r0
    5ece:	38 9f       	mul	r19, r24
    5ed0:	f0 0d       	add	r31, r0
    5ed2:	11 24       	eor	r1, r1
    5ed4:	e6 0f       	add	r30, r22
    5ed6:	f7 1f       	adc	r31, r23
    5ed8:	eb 52       	subi	r30, 0x2B	; 43
    5eda:	fc 4a       	sbci	r31, 0xAC	; 172
    5edc:	20 81       	ld	r18, Z
    5ede:	a7 70       	andi	r26, 0x07	; 7
    5ee0:	b0 70       	andi	r27, 0x00	; 0
    5ee2:	81 e0       	ldi	r24, 0x01	; 1
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	02 c0       	rjmp	.+4      	; 0x5eec <display_drawPixel+0x74>
    5ee8:	88 0f       	add	r24, r24
    5eea:	99 1f       	adc	r25, r25
    5eec:	aa 95       	dec	r26
    5eee:	e2 f7       	brpl	.-8      	; 0x5ee8 <display_drawPixel+0x70>
    5ef0:	80 95       	com	r24
    5ef2:	82 23       	and	r24, r18
    5ef4:	80 83       	st	Z, r24
    5ef6:	08 95       	ret

00005ef8 <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5ef8:	dc 01       	movw	r26, r24
    5efa:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    5efc:	90 81       	ld	r25, Z
	*val2 = *val1;
    5efe:	8c 91       	ld	r24, X
    5f00:	80 83       	st	Z, r24
	*val1 = tempVal;
    5f02:	9c 93       	st	X, r25
}
    5f04:	08 95       	ret

00005f06 <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5f06:	df 92       	push	r13
    5f08:	ef 92       	push	r14
    5f0a:	ff 92       	push	r15
    5f0c:	0f 93       	push	r16
    5f0e:	1f 93       	push	r17
    5f10:	cf 93       	push	r28
    5f12:	df 93       	push	r29
    5f14:	f8 2e       	mov	r15, r24
    5f16:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5f18:	84 17       	cp	r24, r20
    5f1a:	d9 f4       	brne	.+54     	; 0x5f52 <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    5f1c:	26 17       	cp	r18, r22
    5f1e:	18 f4       	brcc	.+6      	; 0x5f26 <display_drawLine+0x20>
    5f20:	dd 24       	eor	r13, r13
    5f22:	da 94       	dec	r13
    5f24:	02 c0       	rjmp	.+4      	; 0x5f2a <display_drawLine+0x24>
    5f26:	dd 24       	eor	r13, r13
    5f28:	d3 94       	inc	r13
		j = column1;
    5f2a:	1e 2d       	mov	r17, r14
		while (j != column2) {
    5f2c:	c2 2f       	mov	r28, r18
    5f2e:	d0 e0       	ldi	r29, 0x00	; 0
    5f30:	06 c0       	rjmp	.+12     	; 0x5f3e <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5f32:	8f 2d       	mov	r24, r15
    5f34:	61 2f       	mov	r22, r17
    5f36:	40 2f       	mov	r20, r16
    5f38:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
    5f3c:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    5f3e:	81 2f       	mov	r24, r17
    5f40:	99 27       	eor	r25, r25
    5f42:	87 fd       	sbrc	r24, 7
    5f44:	90 95       	com	r25
    5f46:	8c 17       	cp	r24, r28
    5f48:	9d 07       	cpc	r25, r29
    5f4a:	99 f7       	brne	.-26     	; 0x5f32 <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    5f4c:	8f 2d       	mov	r24, r15
    5f4e:	61 2f       	mov	r22, r17
    5f50:	1c c0       	rjmp	.+56     	; 0x5f8a <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    5f52:	62 17       	cp	r22, r18
    5f54:	e9 f4       	brne	.+58     	; 0x5f90 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    5f56:	48 17       	cp	r20, r24
    5f58:	18 f4       	brcc	.+6      	; 0x5f60 <display_drawLine+0x5a>
    5f5a:	dd 24       	eor	r13, r13
    5f5c:	da 94       	dec	r13
    5f5e:	02 c0       	rjmp	.+4      	; 0x5f64 <display_drawLine+0x5e>
    5f60:	dd 24       	eor	r13, r13
    5f62:	d3 94       	inc	r13
		i = row1;
    5f64:	1f 2d       	mov	r17, r15
		while(i != row2) {
    5f66:	c4 2f       	mov	r28, r20
    5f68:	d0 e0       	ldi	r29, 0x00	; 0
    5f6a:	06 c0       	rjmp	.+12     	; 0x5f78 <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    5f6c:	81 2f       	mov	r24, r17
    5f6e:	6e 2d       	mov	r22, r14
    5f70:	40 2f       	mov	r20, r16
    5f72:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
    5f76:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    5f78:	81 2f       	mov	r24, r17
    5f7a:	99 27       	eor	r25, r25
    5f7c:	87 fd       	sbrc	r24, 7
    5f7e:	90 95       	com	r25
    5f80:	8c 17       	cp	r24, r28
    5f82:	9d 07       	cpc	r25, r29
    5f84:	99 f7       	brne	.-26     	; 0x5f6c <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    5f86:	81 2f       	mov	r24, r17
    5f88:	6e 2d       	mov	r22, r14
    5f8a:	40 2f       	mov	r20, r16
    5f8c:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
			
			
		}
		*/
	}
}
    5f90:	df 91       	pop	r29
    5f92:	cf 91       	pop	r28
    5f94:	1f 91       	pop	r17
    5f96:	0f 91       	pop	r16
    5f98:	ff 90       	pop	r15
    5f9a:	ef 90       	pop	r14
    5f9c:	df 90       	pop	r13
    5f9e:	08 95       	ret

00005fa0 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5fa0:	6f 92       	push	r6
    5fa2:	7f 92       	push	r7
    5fa4:	8f 92       	push	r8
    5fa6:	9f 92       	push	r9
    5fa8:	bf 92       	push	r11
    5faa:	cf 92       	push	r12
    5fac:	df 92       	push	r13
    5fae:	ef 92       	push	r14
    5fb0:	ff 92       	push	r15
    5fb2:	0f 93       	push	r16
    5fb4:	1f 93       	push	r17
    5fb6:	cf 93       	push	r28
    5fb8:	df 93       	push	r29
    5fba:	18 2f       	mov	r17, r24
    5fbc:	b6 2e       	mov	r11, r22
    5fbe:	d2 2e       	mov	r13, r18
    5fc0:	d6 0e       	add	r13, r22
    5fc2:	f4 2e       	mov	r15, r20
    5fc4:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5fc6:	00 23       	and	r16, r16
    5fc8:	c1 f4       	brne	.+48     	; 0x5ffa <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    5fca:	41 2f       	mov	r20, r17
    5fcc:	2d 2d       	mov	r18, r13
    5fce:	0c 2d       	mov	r16, r12
    5fd0:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5fd4:	8f 2d       	mov	r24, r15
    5fd6:	6b 2d       	mov	r22, r11
    5fd8:	4f 2d       	mov	r20, r15
    5fda:	2d 2d       	mov	r18, r13
    5fdc:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5fe0:	81 2f       	mov	r24, r17
    5fe2:	6b 2d       	mov	r22, r11
    5fe4:	4f 2d       	mov	r20, r15
    5fe6:	2b 2d       	mov	r18, r11
    5fe8:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    5fec:	81 2f       	mov	r24, r17
    5fee:	6d 2d       	mov	r22, r13
    5ff0:	4f 2d       	mov	r20, r15
    5ff2:	2d 2d       	mov	r18, r13
    5ff4:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
    5ff8:	63 c0       	rjmp	.+198    	; 0x60c0 <__stack+0xc1>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    5ffa:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    5ffc:	08 2f       	mov	r16, r24
    5ffe:	10 e0       	ldi	r17, 0x00	; 0
    6000:	04 0f       	add	r16, r20
    6002:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    6004:	cf 2d       	mov	r28, r15
    6006:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    6008:	a7 e0       	ldi	r26, 0x07	; 7
    600a:	b0 e0       	ldi	r27, 0x00	; 0
    600c:	ac 1b       	sub	r26, r28
    600e:	bd 0b       	sbc	r27, r29
    6010:	2f ef       	ldi	r18, 0xFF	; 255
    6012:	82 2e       	mov	r8, r18
    6014:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    6016:	96 e6       	ldi	r25, 0x66	; 102
    6018:	69 2e       	mov	r6, r25
    601a:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    601c:	88 e0       	ldi	r24, 0x08	; 8
    601e:	c8 2e       	mov	r12, r24
    6020:	49 c0       	rjmp	.+146    	; 0x60b4 <__stack+0xb5>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    6022:	f7 e0       	ldi	r31, 0x07	; 7
    6024:	ff 2e       	mov	r15, r31
    6026:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    6028:	6f 2d       	mov	r22, r15
    602a:	70 e0       	ldi	r23, 0x00	; 0
    602c:	c9 01       	movw	r24, r18
    602e:	07 96       	adiw	r24, 0x07	; 7
    6030:	86 1b       	sub	r24, r22
    6032:	97 0b       	sbc	r25, r23
    6034:	c8 17       	cp	r28, r24
    6036:	d9 07       	cpc	r29, r25
    6038:	44 f0       	brlt	.+16     	; 0x604a <__stack+0x4b>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    603a:	c4 01       	movw	r24, r8
    603c:	0f 2c       	mov	r0, r15
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <__stack+0x45>
    6040:	88 0f       	add	r24, r24
    6042:	99 1f       	adc	r25, r25
    6044:	0a 94       	dec	r0
    6046:	e2 f7       	brpl	.-8      	; 0x6040 <__stack+0x41>
    6048:	08 c0       	rjmp	.+16     	; 0x605a <__stack+0x5b>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    604a:	2a 0f       	add	r18, r26
    604c:	3b 1f       	adc	r19, r27
    604e:	c4 01       	movw	r24, r8
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <__stack+0x57>
    6052:	95 95       	asr	r25
    6054:	87 95       	ror	r24
    6056:	2a 95       	dec	r18
    6058:	e2 f7       	brpl	.-8      	; 0x6052 <__stack+0x53>
    605a:	28 2f       	mov	r18, r24
			}
			page = i/8;
    605c:	85 2f       	mov	r24, r21
    605e:	86 95       	lsr	r24
    6060:	86 95       	lsr	r24
    6062:	86 95       	lsr	r24
    6064:	3b 2d       	mov	r19, r11
    6066:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    6068:	86 9d       	mul	r24, r6
    606a:	b0 01       	movw	r22, r0
    606c:	87 9d       	mul	r24, r7
    606e:	70 0d       	add	r23, r0
    6070:	96 9d       	mul	r25, r6
    6072:	70 0d       	add	r23, r0
    6074:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    6076:	42 2f       	mov	r20, r18
    6078:	40 95       	com	r20
    607a:	17 c0       	rjmp	.+46     	; 0x60aa <__stack+0xab>
    607c:	e3 2f       	mov	r30, r19
    607e:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    6080:	ee 20       	and	r14, r14
    6082:	69 f0       	breq	.+26     	; 0x609e <__stack+0x9f>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    6084:	e6 0f       	add	r30, r22
    6086:	f7 1f       	adc	r31, r23
    6088:	eb 52       	subi	r30, 0x2B	; 43
    608a:	fc 4a       	sbci	r31, 0xAC	; 172
    608c:	80 81       	ld	r24, Z
    608e:	90 81       	ld	r25, Z
    6090:	82 23       	and	r24, r18
    6092:	80 95       	com	r24
    6094:	82 23       	and	r24, r18
    6096:	94 23       	and	r25, r20
    6098:	89 2b       	or	r24, r25
    609a:	80 83       	st	Z, r24
    609c:	05 c0       	rjmp	.+10     	; 0x60a8 <__stack+0xa9>
				} else {
					displayBuffer[page][j] = byteOut;	
    609e:	e6 0f       	add	r30, r22
    60a0:	f7 1f       	adc	r31, r23
    60a2:	eb 52       	subi	r30, 0x2B	; 43
    60a4:	fc 4a       	sbci	r31, 0xAC	; 172
    60a6:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    60a8:	3f 5f       	subi	r19, 0xFF	; 255
    60aa:	d3 16       	cp	r13, r19
    60ac:	38 f7       	brcc	.-50     	; 0x607c <__stack+0x7d>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    60ae:	8c 2d       	mov	r24, r12
    60b0:	8f 19       	sub	r24, r15
    60b2:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    60b4:	25 2f       	mov	r18, r21
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	02 17       	cp	r16, r18
    60ba:	13 07       	cpc	r17, r19
    60bc:	0c f0       	brlt	.+2      	; 0x60c0 <__stack+0xc1>
    60be:	b1 cf       	rjmp	.-158    	; 0x6022 <__stack+0x23>
			i += (8 - remainder);	
		}
	
	}
			
}
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	1f 91       	pop	r17
    60c6:	0f 91       	pop	r16
    60c8:	ff 90       	pop	r15
    60ca:	ef 90       	pop	r14
    60cc:	df 90       	pop	r13
    60ce:	cf 90       	pop	r12
    60d0:	bf 90       	pop	r11
    60d2:	9f 90       	pop	r9
    60d4:	8f 90       	pop	r8
    60d6:	7f 90       	pop	r7
    60d8:	6f 90       	pop	r6
    60da:	08 95       	ret

000060dc <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    60dc:	88 e0       	ldi	r24, 0x08	; 8
    60de:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    60e2:	80 ec       	ldi	r24, 0xC0	; 192
    60e4:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    60e8:	e0 e0       	ldi	r30, 0x00	; 0
    60ea:	f8 e0       	ldi	r31, 0x08	; 8
    60ec:	8f ef       	ldi	r24, 0xFF	; 255
    60ee:	9f ef       	ldi	r25, 0xFF	; 255
    60f0:	86 a3       	std	Z+38, r24	; 0x26
    60f2:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    60f4:	80 81       	ld	r24, Z
    60f6:	80 7f       	andi	r24, 0xF0	; 240
    60f8:	84 60       	ori	r24, 0x04	; 4
    60fa:	80 83       	st	Z, r24
  
	
	
}
    60fc:	08 95       	ret

000060fe <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    60fe:	f8 94       	cli
  UNIX_time = time;
    6100:	60 93 9c 33 	sts	0x339C, r22
    6104:	70 93 9d 33 	sts	0x339D, r23
    6108:	80 93 9e 33 	sts	0x339E, r24
    610c:	90 93 9f 33 	sts	0x339F, r25
  sei();
    6110:	78 94       	sei
}
    6112:	08 95       	ret

00006114 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    6114:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    6116:	20 91 60 08 	lds	r18, 0x0860
    611a:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    611e:	60 91 20 08 	lds	r22, 0x0820
    6122:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    6126:	80 91 60 08 	lds	r24, 0x0860
    612a:	90 91 61 08 	lds	r25, 0x0861
    612e:	28 17       	cp	r18, r24
    6130:	39 07       	cpc	r19, r25
    6132:	41 f0       	breq	.+16     	; 0x6144 <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    6134:	20 91 60 08 	lds	r18, 0x0860
    6138:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    613c:	60 91 20 08 	lds	r22, 0x0820
    6140:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    6144:	78 94       	sei
    6146:	40 e0       	ldi	r20, 0x00	; 0
    6148:	50 e0       	ldi	r21, 0x00	; 0
    614a:	a9 01       	movw	r20, r18
    614c:	33 27       	eor	r19, r19
    614e:	22 27       	eor	r18, r18
    6150:	cb 01       	movw	r24, r22
    6152:	a0 e0       	ldi	r26, 0x00	; 0
    6154:	b0 e0       	ldi	r27, 0x00	; 0
    6156:	28 0f       	add	r18, r24
    6158:	39 1f       	adc	r19, r25
    615a:	4a 1f       	adc	r20, r26
    615c:	5b 1f       	adc	r21, r27
  return result;
}
    615e:	b9 01       	movw	r22, r18
    6160:	ca 01       	movw	r24, r20
    6162:	08 95       	ret

00006164 <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6164:	e0 e0       	ldi	r30, 0x00	; 0
    6166:	f2 e0       	ldi	r31, 0x02	; 2
    6168:	92 e0       	ldi	r25, 0x02	; 2
    616a:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    616c:	8a e2       	ldi	r24, 0x2A	; 42
    616e:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6170:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    6172:	83 e2       	ldi	r24, 0x23	; 35
    6174:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6176:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    6178:	88 e3       	ldi	r24, 0x38	; 56
    617a:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    617c:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    617e:	81 e3       	ldi	r24, 0x31	; 49
    6180:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    6182:	84 81       	ldd	r24, Z+4	; 0x04
    6184:	88 7f       	andi	r24, 0xF8	; 248
    6186:	84 60       	ori	r24, 0x04	; 4
    6188:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    618a:	80 e1       	ldi	r24, 0x10	; 16
    618c:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    618e:	83 81       	ldd	r24, Z+3	; 0x03
    6190:	80 6c       	ori	r24, 0xC0	; 192
    6192:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    6194:	81 81       	ldd	r24, Z+1	; 0x01
    6196:	88 61       	ori	r24, 0x18	; 24
    6198:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    619a:	80 a1       	ldd	r24, Z+32	; 0x20
    619c:	80 68       	ori	r24, 0x80	; 128
    619e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    61a0:	80 a5       	ldd	r24, Z+40	; 0x28
    61a2:	80 68       	ori	r24, 0x80	; 128
    61a4:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    61a6:	80 ad       	ldd	r24, Z+56	; 0x38
    61a8:	80 68       	ori	r24, 0x80	; 128
    61aa:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    61ac:	80 a9       	ldd	r24, Z+48	; 0x30
    61ae:	80 68       	ori	r24, 0x80	; 128
    61b0:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    61b6:	e0 e4       	ldi	r30, 0x40	; 64
    61b8:	f9 e0       	ldi	r31, 0x09	; 9
    61ba:	80 e4       	ldi	r24, 0x40	; 64
    61bc:	98 e3       	ldi	r25, 0x38	; 56
    61be:	86 a3       	std	Z+38, r24	; 0x26
    61c0:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    61c2:	80 81       	ld	r24, Z
    61c4:	80 7f       	andi	r24, 0xF0	; 240
    61c6:	87 60       	ori	r24, 0x07	; 7
    61c8:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61ca:	86 81       	ldd	r24, Z+6	; 0x06
    61cc:	83 60       	ori	r24, 0x03	; 3
    61ce:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    61d0:	e0 e0       	ldi	r30, 0x00	; 0
    61d2:	fb e0       	ldi	r31, 0x0B	; 11
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	91 e0       	ldi	r25, 0x01	; 1
    61d8:	86 a3       	std	Z+38, r24	; 0x26
    61da:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    61dc:	80 81       	ld	r24, Z
    61de:	80 7f       	andi	r24, 0xF0	; 240
    61e0:	84 60       	ori	r24, 0x04	; 4
    61e2:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61e4:	86 81       	ldd	r24, Z+6	; 0x06
    61e6:	83 60       	ori	r24, 0x03	; 3
    61e8:	86 83       	std	Z+6, r24	; 0x06

}
    61ea:	08 95       	ret

000061ec <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    61ec:	e0 e0       	ldi	r30, 0x00	; 0
    61ee:	f2 e0       	ldi	r31, 0x02	; 2
    61f0:	60 89       	ldd	r22, Z+16	; 0x10
    61f2:	71 89       	ldd	r23, Z+17	; 0x11
    61f4:	80 e0       	ldi	r24, 0x00	; 0
    61f6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    61f8:	2a ea       	ldi	r18, 0xAA	; 170
    61fa:	35 e2       	ldi	r19, 0x25	; 37
    61fc:	43 e0       	ldi	r20, 0x03	; 3
    61fe:	50 e0       	ldi	r21, 0x00	; 0
    6200:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    6204:	67 5f       	subi	r22, 0xF7	; 247
    6206:	7a 40       	sbci	r23, 0x0A	; 10
    6208:	88 4e       	sbci	r24, 0xE8	; 232
    620a:	91 40       	sbci	r25, 0x01	; 1
    620c:	21 e5       	ldi	r18, 0x51	; 81
    620e:	37 e7       	ldi	r19, 0x77	; 119
    6210:	45 e0       	ldi	r20, 0x05	; 5
    6212:	50 e0       	ldi	r21, 0x00	; 0
    6214:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6218:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    621a:	08 95       	ret

0000621c <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    621c:	e0 e0       	ldi	r30, 0x00	; 0
    621e:	f2 e0       	ldi	r31, 0x02	; 2
    6220:	62 89       	ldd	r22, Z+18	; 0x12
    6222:	73 89       	ldd	r23, Z+19	; 0x13
    6224:	80 e0       	ldi	r24, 0x00	; 0
    6226:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    6228:	27 ec       	ldi	r18, 0xC7	; 199
    622a:	3d e1       	ldi	r19, 0x1D	; 29
    622c:	40 e0       	ldi	r20, 0x00	; 0
    622e:	50 e0       	ldi	r21, 0x00	; 0
    6230:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    6234:	6c 59       	subi	r22, 0x9C	; 156
    6236:	7c 41       	sbci	r23, 0x1C	; 28
    6238:	8b 41       	sbci	r24, 0x1B	; 27
    623a:	90 40       	sbci	r25, 0x00	; 0
    623c:	28 ed       	ldi	r18, 0xD8	; 216
    623e:	3f e3       	ldi	r19, 0x3F	; 63
    6240:	41 e0       	ldi	r20, 0x01	; 1
    6242:	50 e0       	ldi	r21, 0x00	; 0
    6244:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6248:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    624a:	08 95       	ret

0000624c <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    624c:	e0 e0       	ldi	r30, 0x00	; 0
    624e:	f2 e0       	ldi	r31, 0x02	; 2
    6250:	86 89       	ldd	r24, Z+22	; 0x16
    6252:	97 89       	ldd	r25, Z+23	; 0x17
    6254:	f4 e0       	ldi	r31, 0x04	; 4
    6256:	96 95       	lsr	r25
    6258:	87 95       	ror	r24
    625a:	fa 95       	dec	r31
    625c:	e1 f7       	brne	.-8      	; 0x6256 <Sensors_ReadMicrophone+0xa>
}
    625e:	08 95       	ret

00006260 <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    6260:	e0 e0       	ldi	r30, 0x00	; 0
    6262:	f2 e0       	ldi	r31, 0x02	; 2
    6264:	64 89       	ldd	r22, Z+20	; 0x14
    6266:	75 89       	ldd	r23, Z+21	; 0x15
    6268:	80 e0       	ldi	r24, 0x00	; 0
    626a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    626c:	22 e2       	ldi	r18, 0x22	; 34
    626e:	31 ea       	ldi	r19, 0xA1	; 161
    6270:	40 e0       	ldi	r20, 0x00	; 0
    6272:	50 e0       	ldi	r21, 0x00	; 0
    6274:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    6278:	6f 53       	subi	r22, 0x3F	; 63
    627a:	74 41       	sbci	r23, 0x14	; 20
    627c:	8e 49       	sbci	r24, 0x9E	; 158
    627e:	9f 4f       	sbci	r25, 0xFF	; 255
    6280:	27 ed       	ldi	r18, 0xD7	; 215
    6282:	36 e4       	ldi	r19, 0x46	; 70
    6284:	49 e0       	ldi	r20, 0x09	; 9
    6286:	50 e0       	ldi	r21, 0x00	; 0
    6288:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    628c:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    628e:	08 95       	ret

00006290 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    6290:	10 92 a5 33 	sts	0x33A5, r1
  	temperatureBufferToWriteTo = 1;
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	80 93 ec 2f 	sts	0x2FEC, r24
	okToSendTemperatureBuffer1 = false;
    629a:	10 92 a3 33 	sts	0x33A3, r1
	okToSendTemperatureBuffer2 = false;
    629e:	10 92 a4 33 	sts	0x33A4, r1
}
    62a2:	08 95       	ret

000062a4 <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    62a4:	10 92 a8 33 	sts	0x33A8, r1
	pressureBufferToWriteTo = 1;
    62a8:	81 e0       	ldi	r24, 0x01	; 1
    62aa:	80 93 ed 2f 	sts	0x2FED, r24
	okToSendPressureBuffer1 = false;
    62ae:	10 92 a6 33 	sts	0x33A6, r1
	okToSendPressureBuffer2 = false;
    62b2:	10 92 a7 33 	sts	0x33A7, r1
}
    62b6:	08 95       	ret

000062b8 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    62b8:	10 92 ab 33 	sts	0x33AB, r1
	humidityBufferToWriteTo = 1;
    62bc:	81 e0       	ldi	r24, 0x01	; 1
    62be:	80 93 ee 2f 	sts	0x2FEE, r24
	okToSendHumidityBuffer1 = false;
    62c2:	10 92 a9 33 	sts	0x33A9, r1
	okToSendHumidityBuffer2 = false;
    62c6:	10 92 aa 33 	sts	0x33AA, r1
}
    62ca:	08 95       	ret

000062cc <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    62cc:	10 92 ae 33 	sts	0x33AE, r1
    62d0:	10 92 af 33 	sts	0x33AF, r1
	microphoneBufferToWriteTo = 1;
    62d4:	81 e0       	ldi	r24, 0x01	; 1
    62d6:	80 93 ef 2f 	sts	0x2FEF, r24
	okToSendMicrophoneBuffer1 = false;
    62da:	10 92 ac 33 	sts	0x33AC, r1
	okToSendMicrophoneBuffer2 = false;
    62de:	10 92 ad 33 	sts	0x33AD, r1
}
    62e2:	08 95       	ret

000062e4 <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    62e4:	10 92 b2 33 	sts	0x33B2, r1
	lightBufferToWriteTo = 1;
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	80 93 f0 2f 	sts	0x2FF0, r24
	okToSendLightBuffer1 = false;
    62ee:	10 92 b0 33 	sts	0x33B0, r1
	okToSendLightBuffer2 = false;
    62f2:	10 92 b1 33 	sts	0x33B1, r1
}
    62f6:	08 95       	ret

000062f8 <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    62f8:	1f 92       	push	r1
    62fa:	0f 92       	push	r0
    62fc:	0f b6       	in	r0, 0x3f	; 63
    62fe:	0f 92       	push	r0
    6300:	0b b6       	in	r0, 0x3b	; 59
    6302:	0f 92       	push	r0
    6304:	11 24       	eor	r1, r1
    6306:	0f 93       	push	r16
    6308:	1f 93       	push	r17
    630a:	2f 93       	push	r18
    630c:	3f 93       	push	r19
    630e:	4f 93       	push	r20
    6310:	5f 93       	push	r21
    6312:	6f 93       	push	r22
    6314:	7f 93       	push	r23
    6316:	8f 93       	push	r24
    6318:	9f 93       	push	r25
    631a:	af 93       	push	r26
    631c:	bf 93       	push	r27
    631e:	ef 93       	push	r30
    6320:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    6322:	80 91 a1 33 	lds	r24, 0x33A1
    6326:	88 23       	and	r24, r24
    6328:	09 f4       	brne	.+2      	; 0x632c <__vector_108+0x34>
    632a:	9b c0       	rjmp	.+310    	; 0x6462 <__vector_108+0x16a>
    632c:	80 91 f6 2f 	lds	r24, 0x2FF6
    6330:	88 23       	and	r24, r24
    6332:	09 f4       	brne	.+2      	; 0x6336 <__vector_108+0x3e>
    6334:	96 c0       	rjmp	.+300    	; 0x6462 <__vector_108+0x16a>
	  if((microphoneBufferToWriteTo == 1) && !okToSendMicrophoneBuffer1){
    6336:	80 91 ef 2f 	lds	r24, 0x2FEF
    633a:	81 30       	cpi	r24, 0x01	; 1
    633c:	09 f0       	breq	.+2      	; 0x6340 <__vector_108+0x48>
    633e:	48 c0       	rjmp	.+144    	; 0x63d0 <__vector_108+0xd8>
    6340:	80 91 ac 33 	lds	r24, 0x33AC
    6344:	88 23       	and	r24, r24
    6346:	09 f0       	breq	.+2      	; 0x634a <__vector_108+0x52>
    6348:	94 c0       	rjmp	.+296    	; 0x6472 <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    634a:	80 91 ae 33 	lds	r24, 0x33AE
    634e:	90 91 af 33 	lds	r25, 0x33AF
    6352:	89 2b       	or	r24, r25
    6354:	51 f4       	brne	.+20     	; 0x636a <__vector_108+0x72>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    6356:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    635a:	60 93 54 33 	sts	0x3354, r22
    635e:	70 93 55 33 	sts	0x3355, r23
    6362:	80 93 56 33 	sts	0x3356, r24
    6366:	90 93 57 33 	sts	0x3357, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    636a:	00 91 ae 33 	lds	r16, 0x33AE
    636e:	10 91 af 33 	lds	r17, 0x33AF
    6372:	0e 94 26 31 	call	0x624c	; 0x624c <Sensors_ReadMicrophone>
    6376:	01 5f       	subi	r16, 0xF1	; 241
    6378:	19 4b       	sbci	r17, 0xB9	; 185
    637a:	f8 01       	movw	r30, r16
    637c:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    637e:	80 91 bb 33 	lds	r24, 0x33BB
    6382:	88 23       	and	r24, r24
    6384:	49 f4       	brne	.+18     	; 0x6398 <__vector_108+0xa0>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    6386:	e0 91 ae 33 	lds	r30, 0x33AE
    638a:	f0 91 af 33 	lds	r31, 0x33AF
    638e:	e1 5f       	subi	r30, 0xF1	; 241
    6390:	f9 4b       	sbci	r31, 0xB9	; 185
    6392:	80 81       	ld	r24, Z
    6394:	80 93 ba 33 	sts	0x33BA, r24
	    }
	    microphoneBufferCounter++;
    6398:	80 91 ae 33 	lds	r24, 0x33AE
    639c:	90 91 af 33 	lds	r25, 0x33AF
    63a0:	01 96       	adiw	r24, 0x01	; 1
    63a2:	80 93 ae 33 	sts	0x33AE, r24
    63a6:	90 93 af 33 	sts	0x33AF, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    63aa:	88 5e       	subi	r24, 0xE8	; 232
    63ac:	93 40       	sbci	r25, 0x03	; 3
    63ae:	09 f0       	breq	.+2      	; 0x63b2 <__vector_108+0xba>
    63b0:	60 c0       	rjmp	.+192    	; 0x6472 <__vector_108+0x17a>
	    	quickMic = microphoneBuffer1[0];
    63b2:	80 91 0f 46 	lds	r24, 0x460F
    63b6:	80 93 ba 33 	sts	0x33BA, r24
	    	microphoneBufferCounter=0;
    63ba:	10 92 ae 33 	sts	0x33AE, r1
    63be:	10 92 af 33 	sts	0x33AF, r1
	    	microphoneBufferToWriteTo = 2;
    63c2:	82 e0       	ldi	r24, 0x02	; 2
    63c4:	80 93 ef 2f 	sts	0x2FEF, r24
	    	okToSendMicrophoneBuffer1 = true;
    63c8:	81 e0       	ldi	r24, 0x01	; 1
    63ca:	80 93 ac 33 	sts	0x33AC, r24
    63ce:	51 c0       	rjmp	.+162    	; 0x6472 <__vector_108+0x17a>
	    }
	  } else if ((microphoneBufferToWriteTo == 2) && !okToSendMicrophoneBuffer2){
    63d0:	82 30       	cpi	r24, 0x02	; 2
    63d2:	09 f0       	breq	.+2      	; 0x63d6 <__vector_108+0xde>
    63d4:	4e c0       	rjmp	.+156    	; 0x6472 <__vector_108+0x17a>
    63d6:	80 91 ad 33 	lds	r24, 0x33AD
    63da:	88 23       	and	r24, r24
    63dc:	09 f0       	breq	.+2      	; 0x63e0 <__vector_108+0xe8>
    63de:	49 c0       	rjmp	.+146    	; 0x6472 <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    63e0:	80 91 ae 33 	lds	r24, 0x33AE
    63e4:	90 91 af 33 	lds	r25, 0x33AF
    63e8:	89 2b       	or	r24, r25
    63ea:	51 f4       	brne	.+20     	; 0x6400 <__vector_108+0x108>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    63ec:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    63f0:	60 93 58 33 	sts	0x3358, r22
    63f4:	70 93 59 33 	sts	0x3359, r23
    63f8:	80 93 5a 33 	sts	0x335A, r24
    63fc:	90 93 5b 33 	sts	0x335B, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6400:	00 91 ae 33 	lds	r16, 0x33AE
    6404:	10 91 af 33 	lds	r17, 0x33AF
    6408:	0e 94 26 31 	call	0x624c	; 0x624c <Sensors_ReadMicrophone>
    640c:	0f 5e       	subi	r16, 0xEF	; 239
    640e:	1e 4b       	sbci	r17, 0xBE	; 190
    6410:	f8 01       	movw	r30, r16
    6412:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6414:	80 91 bb 33 	lds	r24, 0x33BB
    6418:	88 23       	and	r24, r24
    641a:	49 f4       	brne	.+18     	; 0x642e <__vector_108+0x136>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    641c:	e0 91 ae 33 	lds	r30, 0x33AE
    6420:	f0 91 af 33 	lds	r31, 0x33AF
    6424:	ef 5e       	subi	r30, 0xEF	; 239
    6426:	fe 4b       	sbci	r31, 0xBE	; 190
    6428:	80 81       	ld	r24, Z
    642a:	80 93 ba 33 	sts	0x33BA, r24
	    }

	    microphoneBufferCounter++;
    642e:	80 91 ae 33 	lds	r24, 0x33AE
    6432:	90 91 af 33 	lds	r25, 0x33AF
    6436:	01 96       	adiw	r24, 0x01	; 1
    6438:	80 93 ae 33 	sts	0x33AE, r24
    643c:	90 93 af 33 	sts	0x33AF, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6440:	88 5e       	subi	r24, 0xE8	; 232
    6442:	93 40       	sbci	r25, 0x03	; 3
    6444:	b1 f4       	brne	.+44     	; 0x6472 <__vector_108+0x17a>
	    	quickMic = microphoneBuffer2[0];
    6446:	80 91 11 41 	lds	r24, 0x4111
    644a:	80 93 ba 33 	sts	0x33BA, r24
	    	microphoneBufferCounter=0;
    644e:	10 92 ae 33 	sts	0x33AE, r1
    6452:	10 92 af 33 	sts	0x33AF, r1
	    	microphoneBufferToWriteTo = 1;
    6456:	81 e0       	ldi	r24, 0x01	; 1
    6458:	80 93 ef 2f 	sts	0x2FEF, r24
	    	okToSendMicrophoneBuffer2 = true;
    645c:	80 93 ad 33 	sts	0x33AD, r24
    6460:	08 c0       	rjmp	.+16     	; 0x6472 <__vector_108+0x17a>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    6462:	80 91 bb 33 	lds	r24, 0x33BB
    6466:	88 23       	and	r24, r24
    6468:	21 f4       	brne	.+8      	; 0x6472 <__vector_108+0x17a>
			quickMic = Sensors_ReadMicrophone();
    646a:	0e 94 26 31 	call	0x624c	; 0x624c <Sensors_ReadMicrophone>
    646e:	80 93 ba 33 	sts	0x33BA, r24
		}
	}
	micSampleCounter++;
    6472:	80 91 bb 33 	lds	r24, 0x33BB
    6476:	8f 5f       	subi	r24, 0xFF	; 255
    6478:	80 93 bb 33 	sts	0x33BB, r24
}
    647c:	ff 91       	pop	r31
    647e:	ef 91       	pop	r30
    6480:	bf 91       	pop	r27
    6482:	af 91       	pop	r26
    6484:	9f 91       	pop	r25
    6486:	8f 91       	pop	r24
    6488:	7f 91       	pop	r23
    648a:	6f 91       	pop	r22
    648c:	5f 91       	pop	r21
    648e:	4f 91       	pop	r20
    6490:	3f 91       	pop	r19
    6492:	2f 91       	pop	r18
    6494:	1f 91       	pop	r17
    6496:	0f 91       	pop	r16
    6498:	0f 90       	pop	r0
    649a:	0b be       	out	0x3b, r0	; 59
    649c:	0f 90       	pop	r0
    649e:	0f be       	out	0x3f, r0	; 63
    64a0:	0f 90       	pop	r0
    64a2:	1f 90       	pop	r1
    64a4:	18 95       	reti

000064a6 <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    64a6:	30 91 33 4b 	lds	r19, 0x4B33
    64aa:	93 2f       	mov	r25, r19
    64ac:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    64ae:	28 2f       	mov	r18, r24
    64b0:	20 68       	ori	r18, 0x80	; 128
    64b2:	20 93 d4 53 	sts	0x53D4, r18


	LightPort.MASTER.ADDR = writeAddress;
    64b6:	e0 e8       	ldi	r30, 0x80	; 128
    64b8:	f4 e0       	ldi	r31, 0x04	; 4
    64ba:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64bc:	80 91 84 04 	lds	r24, 0x0484
    64c0:	86 ff       	sbrs	r24, 6
    64c2:	fc cf       	rjmp	.-8      	; 0x64bc <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    64c4:	e0 e8       	ldi	r30, 0x80	; 128
    64c6:	f4 e0       	ldi	r31, 0x04	; 4
    64c8:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64ca:	80 91 84 04 	lds	r24, 0x0484
    64ce:	86 ff       	sbrs	r24, 6
    64d0:	fc cf       	rjmp	.-8      	; 0x64ca <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    64d2:	83 2f       	mov	r24, r19
    64d4:	81 60       	ori	r24, 0x01	; 1
    64d6:	80 93 8d 4a 	sts	0x4A8D, r24
	LightPort.MASTER.ADDR = writeAddress;
    64da:	e0 e8       	ldi	r30, 0x80	; 128
    64dc:	f4 e0       	ldi	r31, 0x04	; 4
    64de:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    64e0:	80 91 84 04 	lds	r24, 0x0484
    64e4:	87 ff       	sbrs	r24, 7
    64e6:	fc cf       	rjmp	.-8      	; 0x64e0 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    64e8:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    64ec:	97 e0       	ldi	r25, 0x07	; 7
    64ee:	e0 e8       	ldi	r30, 0x80	; 128
    64f0:	f4 e0       	ldi	r31, 0x04	; 4
    64f2:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    64f4:	08 95       	ret

000064f6 <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    64f6:	80 e0       	ldi	r24, 0x00	; 0
    64f8:	0e 94 53 32 	call	0x64a6	; 0x64a6 <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    64fc:	20 91 33 4b 	lds	r18, 0x4B33
    6500:	92 2f       	mov	r25, r18
    6502:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    6504:	80 e9       	ldi	r24, 0x90	; 144
    6506:	80 93 d4 53 	sts	0x53D4, r24

	LightPort.MASTER.ADDR = writeAddress;
    650a:	e0 e8       	ldi	r30, 0x80	; 128
    650c:	f4 e0       	ldi	r31, 0x04	; 4
    650e:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6510:	80 91 84 04 	lds	r24, 0x0484
    6514:	86 ff       	sbrs	r24, 6
    6516:	fc cf       	rjmp	.-8      	; 0x6510 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6518:	80 e9       	ldi	r24, 0x90	; 144
    651a:	e0 e8       	ldi	r30, 0x80	; 128
    651c:	f4 e0       	ldi	r31, 0x04	; 4
    651e:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6520:	80 91 84 04 	lds	r24, 0x0484
    6524:	86 ff       	sbrs	r24, 6
    6526:	fc cf       	rjmp	.-8      	; 0x6520 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    6528:	82 2f       	mov	r24, r18
    652a:	81 60       	ori	r24, 0x01	; 1
    652c:	80 93 8d 4a 	sts	0x4A8D, r24
	LightPort.MASTER.ADDR = writeAddress;
    6530:	e0 e8       	ldi	r30, 0x80	; 128
    6532:	f4 e0       	ldi	r31, 0x04	; 4
    6534:	86 83       	std	Z+6, r24	; 0x06
    6536:	eb e0       	ldi	r30, 0x0B	; 11
    6538:	fb e4       	ldi	r31, 0x4B	; 75
    653a:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    653c:	a0 e8       	ldi	r26, 0x80	; 128
    653e:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6540:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6542:	80 91 84 04 	lds	r24, 0x0484
    6546:	87 ff       	sbrs	r24, 7
    6548:	fc cf       	rjmp	.-8      	; 0x6542 <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    654a:	80 91 87 04 	lds	r24, 0x0487
    654e:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    6550:	97 30       	cpi	r25, 0x07	; 7
    6552:	19 f0       	breq	.+6      	; 0x655a <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6554:	13 96       	adiw	r26, 0x03	; 3
    6556:	2c 93       	st	X, r18
    6558:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    655a:	9f 5f       	subi	r25, 0xFF	; 255
    655c:	31 96       	adiw	r30, 0x01	; 1
    655e:	98 30       	cpi	r25, 0x08	; 8
    6560:	81 f7       	brne	.-32     	; 0x6542 <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6562:	87 e0       	ldi	r24, 0x07	; 7
    6564:	e0 e8       	ldi	r30, 0x80	; 128
    6566:	f4 e0       	ldi	r31, 0x04	; 4
    6568:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    656a:	90 91 0c 4b 	lds	r25, 0x4B0C
    656e:	80 e0       	ldi	r24, 0x00	; 0
    6570:	20 91 0b 4b 	lds	r18, 0x4B0B
    6574:	82 0f       	add	r24, r18
    6576:	91 1d       	adc	r25, r1
    6578:	80 93 5a 3c 	sts	0x3C5A, r24
    657c:	90 93 5b 3c 	sts	0x3C5B, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    6580:	90 91 0e 4b 	lds	r25, 0x4B0E
    6584:	80 e0       	ldi	r24, 0x00	; 0
    6586:	20 91 0d 4b 	lds	r18, 0x4B0D
    658a:	82 0f       	add	r24, r18
    658c:	91 1d       	adc	r25, r1
    658e:	80 93 5c 3c 	sts	0x3C5C, r24
    6592:	90 93 5d 3c 	sts	0x3C5D, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    6596:	90 91 10 4b 	lds	r25, 0x4B10
    659a:	80 e0       	ldi	r24, 0x00	; 0
    659c:	20 91 0f 4b 	lds	r18, 0x4B0F
    65a0:	82 0f       	add	r24, r18
    65a2:	91 1d       	adc	r25, r1
    65a4:	80 93 5e 3c 	sts	0x3C5E, r24
    65a8:	90 93 5f 3c 	sts	0x3C5F, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    65ac:	90 91 12 4b 	lds	r25, 0x4B12
    65b0:	80 e0       	ldi	r24, 0x00	; 0
    65b2:	20 91 11 4b 	lds	r18, 0x4B11
    65b6:	82 0f       	add	r24, r18
    65b8:	91 1d       	adc	r25, r1
    65ba:	80 93 60 3c 	sts	0x3C60, r24
    65be:	90 93 61 3c 	sts	0x3C61, r25
}
    65c2:	08 95       	ret

000065c4 <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    65c4:	e8 2f       	mov	r30, r24
    65c6:	f0 e0       	ldi	r31, 0x00	; 0
    65c8:	ee 0f       	add	r30, r30
    65ca:	ff 1f       	adc	r31, r31
    65cc:	e6 5a       	subi	r30, 0xA6	; 166
    65ce:	f3 4c       	sbci	r31, 0xC3	; 195
	return colors[color];
}
    65d0:	80 81       	ld	r24, Z
    65d2:	91 81       	ldd	r25, Z+1	; 0x01
    65d4:	08 95       	ret

000065d6 <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    65d6:	90 91 33 4b 	lds	r25, 0x4B33
    65da:	9e 7f       	andi	r25, 0xFE	; 254
    65dc:	90 93 8d 4a 	sts	0x4A8D, r25
	commandCode = 0b10000000 | location;
    65e0:	28 2f       	mov	r18, r24
    65e2:	20 68       	ori	r18, 0x80	; 128
    65e4:	20 93 d4 53 	sts	0x53D4, r18

	LightPort.MASTER.ADDR = writeAddress;
    65e8:	e0 e8       	ldi	r30, 0x80	; 128
    65ea:	f4 e0       	ldi	r31, 0x04	; 4
    65ec:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65ee:	80 91 84 04 	lds	r24, 0x0484
    65f2:	86 ff       	sbrs	r24, 6
    65f4:	fc cf       	rjmp	.-8      	; 0x65ee <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    65f6:	e0 e8       	ldi	r30, 0x80	; 128
    65f8:	f4 e0       	ldi	r31, 0x04	; 4
    65fa:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65fc:	80 91 84 04 	lds	r24, 0x0484
    6600:	86 ff       	sbrs	r24, 6
    6602:	fc cf       	rjmp	.-8      	; 0x65fc <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    6604:	e0 e8       	ldi	r30, 0x80	; 128
    6606:	f4 e0       	ldi	r31, 0x04	; 4
    6608:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    660a:	80 91 84 04 	lds	r24, 0x0484
    660e:	86 ff       	sbrs	r24, 6
    6610:	fc cf       	rjmp	.-8      	; 0x660a <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6612:	87 e0       	ldi	r24, 0x07	; 7
    6614:	e0 e8       	ldi	r30, 0x80	; 128
    6616:	f4 e0       	ldi	r31, 0x04	; 4
    6618:	83 83       	std	Z+3, r24	; 0x03

}
    661a:	08 95       	ret

0000661c <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    661c:	80 e0       	ldi	r24, 0x00	; 0
    661e:	61 e0       	ldi	r22, 0x01	; 1
    6620:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    6624:	80 91 a0 33 	lds	r24, 0x33A0
    6628:	e6 eb       	ldi	r30, 0xB6	; 182
    662a:	ff e2       	ldi	r31, 0x2F	; 47
    662c:	e8 0f       	add	r30, r24
    662e:	f1 1d       	adc	r31, r1
    6630:	81 e0       	ldi	r24, 0x01	; 1
    6632:	60 81       	ld	r22, Z
    6634:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    6638:	80 91 a0 33 	lds	r24, 0x33A0
    663c:	ef eb       	ldi	r30, 0xBF	; 191
    663e:	ff e2       	ldi	r31, 0x2F	; 47
    6640:	e8 0f       	add	r30, r24
    6642:	f1 1d       	adc	r31, r1
    6644:	87 e0       	ldi	r24, 0x07	; 7
    6646:	60 81       	ld	r22, Z
    6648:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    664c:	80 e0       	ldi	r24, 0x00	; 0
    664e:	63 e0       	ldi	r22, 0x03	; 3
    6650:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Light_writeByte>
}
    6654:	08 95       	ret

00006656 <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    6656:	80 93 33 4b 	sts	0x4B33, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    665a:	e0 e8       	ldi	r30, 0x80	; 128
    665c:	f4 e0       	ldi	r31, 0x04	; 4
    665e:	88 e0       	ldi	r24, 0x08	; 8
    6660:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6662:	84 e0       	ldi	r24, 0x04	; 4
    6664:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    6666:	8d e0       	ldi	r24, 0x0D	; 13
    6668:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    666a:	81 e0       	ldi	r24, 0x01	; 1
    666c:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    666e:	10 92 a0 33 	sts	0x33A0, r1
	Light_setGain();
    6672:	0e 94 0e 33 	call	0x661c	; 0x661c <Light_setGain>
}
    6676:	08 95       	ret

00006678 <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    6678:	1f 92       	push	r1
    667a:	0f 92       	push	r0
    667c:	0f b6       	in	r0, 0x3f	; 63
    667e:	0f 92       	push	r0
    6680:	0b b6       	in	r0, 0x3b	; 59
    6682:	0f 92       	push	r0
    6684:	11 24       	eor	r1, r1
    6686:	6f 92       	push	r6
    6688:	7f 92       	push	r7
    668a:	8f 92       	push	r8
    668c:	9f 92       	push	r9
    668e:	af 92       	push	r10
    6690:	bf 92       	push	r11
    6692:	cf 92       	push	r12
    6694:	df 92       	push	r13
    6696:	ef 92       	push	r14
    6698:	ff 92       	push	r15
    669a:	0f 93       	push	r16
    669c:	1f 93       	push	r17
    669e:	2f 93       	push	r18
    66a0:	3f 93       	push	r19
    66a2:	4f 93       	push	r20
    66a4:	5f 93       	push	r21
    66a6:	6f 93       	push	r22
    66a8:	7f 93       	push	r23
    66aa:	8f 93       	push	r24
    66ac:	9f 93       	push	r25
    66ae:	af 93       	push	r26
    66b0:	bf 93       	push	r27
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	ef 93       	push	r30
    66b8:	ff 93       	push	r31
    UNIX_time++;
    66ba:	80 91 9c 33 	lds	r24, 0x339C
    66be:	90 91 9d 33 	lds	r25, 0x339D
    66c2:	a0 91 9e 33 	lds	r26, 0x339E
    66c6:	b0 91 9f 33 	lds	r27, 0x339F
    66ca:	01 96       	adiw	r24, 0x01	; 1
    66cc:	a1 1d       	adc	r26, r1
    66ce:	b1 1d       	adc	r27, r1
    66d0:	80 93 9c 33 	sts	0x339C, r24
    66d4:	90 93 9d 33 	sts	0x339D, r25
    66d8:	a0 93 9e 33 	sts	0x339E, r26
    66dc:	b0 93 9f 33 	sts	0x339F, r27
	if(recording){
    66e0:	80 91 a1 33 	lds	r24, 0x33A1
    66e4:	88 23       	and	r24, r24
    66e6:	09 f4       	brne	.+2      	; 0x66ea <__vector_83+0x72>
    66e8:	a0 c2       	rjmp	.+1344   	; 0x6c2a <__vector_83+0x5b2>
	  rtcBlockCounter++;
    66ea:	80 91 b4 33 	lds	r24, 0x33B4
    66ee:	8f 5f       	subi	r24, 0xFF	; 255
    66f0:	80 93 b4 33 	sts	0x33B4, r24
	  if(rtcBlockCounter == 0){
    66f4:	88 23       	and	r24, r24
    66f6:	19 f4       	brne	.+6      	; 0x66fe <__vector_83+0x86>
	    okToSendRTCBlock = true;
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	80 93 b3 33 	sts	0x33B3, r24
	  }

	  if(wantToRecordTemperature){
    66fe:	80 91 f1 2f 	lds	r24, 0x2FF1
    6702:	88 23       	and	r24, r24
    6704:	09 f4       	brne	.+2      	; 0x6708 <__vector_83+0x90>
    6706:	75 c0       	rjmp	.+234    	; 0x67f2 <__vector_83+0x17a>
		  if(temperatureBufferToWriteTo == 1){
    6708:	80 91 ec 2f 	lds	r24, 0x2FEC
    670c:	81 30       	cpi	r24, 0x01	; 1
    670e:	c9 f5       	brne	.+114    	; 0x6782 <__vector_83+0x10a>
			  if(temperatureBufferCounter == 0){
    6710:	80 91 a5 33 	lds	r24, 0x33A5
    6714:	88 23       	and	r24, r24
    6716:	51 f4       	brne	.+20     	; 0x672c <__vector_83+0xb4>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    6718:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    671c:	60 93 3c 33 	sts	0x333C, r22
    6720:	70 93 3d 33 	sts	0x333D, r23
    6724:	80 93 3e 33 	sts	0x333E, r24
    6728:	90 93 3f 33 	sts	0x333F, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    672c:	80 91 a5 33 	lds	r24, 0x33A5
    6730:	c8 2f       	mov	r28, r24
    6732:	d0 e0       	ldi	r29, 0x00	; 0
    6734:	0e 94 f6 30 	call	0x61ec	; 0x61ec <Sensors_ReadTemperature>
    6738:	cc 0f       	add	r28, r28
    673a:	dd 1f       	adc	r29, r29
    673c:	c9 50       	subi	r28, 0x09	; 9
    673e:	d6 4b       	sbci	r29, 0xB6	; 182
    6740:	88 83       	st	Y, r24
    6742:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    6744:	20 91 a5 33 	lds	r18, 0x33A5
    6748:	e2 2f       	mov	r30, r18
    674a:	f0 e0       	ldi	r31, 0x00	; 0
    674c:	ee 0f       	add	r30, r30
    674e:	ff 1f       	adc	r31, r31
    6750:	e9 50       	subi	r30, 0x09	; 9
    6752:	f6 4b       	sbci	r31, 0xB6	; 182
    6754:	80 81       	ld	r24, Z
    6756:	91 81       	ldd	r25, Z+1	; 0x01
    6758:	6a e0       	ldi	r22, 0x0A	; 10
    675a:	70 e0       	ldi	r23, 0x00	; 0
    675c:	0e 94 0f 5c 	call	0xb81e	; 0xb81e <__udivmodhi4>
    6760:	60 93 b5 33 	sts	0x33B5, r22
			  temperatureBufferCounter++;
    6764:	2f 5f       	subi	r18, 0xFF	; 255
    6766:	20 93 a5 33 	sts	0x33A5, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    676a:	2a 30       	cpi	r18, 0x0A	; 10
    676c:	09 f0       	breq	.+2      	; 0x6770 <__vector_83+0xf8>
    676e:	41 c0       	rjmp	.+130    	; 0x67f2 <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    6770:	10 92 a5 33 	sts	0x33A5, r1
				  temperatureBufferToWriteTo = 2;
    6774:	82 e0       	ldi	r24, 0x02	; 2
    6776:	80 93 ec 2f 	sts	0x2FEC, r24
				  okToSendTemperatureBuffer1 = true;
    677a:	81 e0       	ldi	r24, 0x01	; 1
    677c:	80 93 a3 33 	sts	0x33A3, r24
    6780:	38 c0       	rjmp	.+112    	; 0x67f2 <__vector_83+0x17a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    6782:	82 30       	cpi	r24, 0x02	; 2
    6784:	b1 f5       	brne	.+108    	; 0x67f2 <__vector_83+0x17a>
			  if(temperatureBufferCounter == 0){
    6786:	80 91 a5 33 	lds	r24, 0x33A5
    678a:	88 23       	and	r24, r24
    678c:	51 f4       	brne	.+20     	; 0x67a2 <__vector_83+0x12a>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    678e:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    6792:	60 93 40 33 	sts	0x3340, r22
    6796:	70 93 41 33 	sts	0x3341, r23
    679a:	80 93 42 33 	sts	0x3342, r24
    679e:	90 93 43 33 	sts	0x3343, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    67a2:	80 91 a5 33 	lds	r24, 0x33A5
    67a6:	c8 2f       	mov	r28, r24
    67a8:	d0 e0       	ldi	r29, 0x00	; 0
    67aa:	0e 94 f6 30 	call	0x61ec	; 0x61ec <Sensors_ReadTemperature>
    67ae:	cc 0f       	add	r28, r28
    67b0:	dd 1f       	adc	r29, r29
    67b2:	ce 55       	subi	r28, 0x5E	; 94
    67b4:	d5 4b       	sbci	r29, 0xB5	; 181
    67b6:	88 83       	st	Y, r24
    67b8:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    67ba:	20 91 a5 33 	lds	r18, 0x33A5
    67be:	e2 2f       	mov	r30, r18
    67c0:	f0 e0       	ldi	r31, 0x00	; 0
    67c2:	ee 0f       	add	r30, r30
    67c4:	ff 1f       	adc	r31, r31
    67c6:	ee 55       	subi	r30, 0x5E	; 94
    67c8:	f5 4b       	sbci	r31, 0xB5	; 181
    67ca:	80 81       	ld	r24, Z
    67cc:	91 81       	ldd	r25, Z+1	; 0x01
    67ce:	6a e0       	ldi	r22, 0x0A	; 10
    67d0:	70 e0       	ldi	r23, 0x00	; 0
    67d2:	0e 94 0f 5c 	call	0xb81e	; 0xb81e <__udivmodhi4>
    67d6:	60 93 b5 33 	sts	0x33B5, r22
			  temperatureBufferCounter++;
    67da:	2f 5f       	subi	r18, 0xFF	; 255
    67dc:	20 93 a5 33 	sts	0x33A5, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    67e0:	2a 30       	cpi	r18, 0x0A	; 10
    67e2:	39 f4       	brne	.+14     	; 0x67f2 <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    67e4:	10 92 a5 33 	sts	0x33A5, r1
				  temperatureBufferToWriteTo = 1;
    67e8:	81 e0       	ldi	r24, 0x01	; 1
    67ea:	80 93 ec 2f 	sts	0x2FEC, r24
				  okToSendTemperatureBuffer2 = true;
    67ee:	80 93 a4 33 	sts	0x33A4, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    67f2:	80 91 f3 2f 	lds	r24, 0x2FF3
    67f6:	88 23       	and	r24, r24
    67f8:	09 f4       	brne	.+2      	; 0x67fc <__vector_83+0x184>
    67fa:	60 c0       	rjmp	.+192    	; 0x68bc <__vector_83+0x244>
		  if(humidityBufferToWriteTo == 1){
    67fc:	80 91 ee 2f 	lds	r24, 0x2FEE
    6800:	81 30       	cpi	r24, 0x01	; 1
    6802:	71 f5       	brne	.+92     	; 0x6860 <__vector_83+0x1e8>
			  if(humidityBufferCounter == 0){
    6804:	80 91 ab 33 	lds	r24, 0x33AB
    6808:	88 23       	and	r24, r24
    680a:	51 f4       	brne	.+20     	; 0x6820 <__vector_83+0x1a8>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    680c:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    6810:	60 93 44 33 	sts	0x3344, r22
    6814:	70 93 45 33 	sts	0x3345, r23
    6818:	80 93 46 33 	sts	0x3346, r24
    681c:	90 93 47 33 	sts	0x3347, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    6820:	80 91 ab 33 	lds	r24, 0x33AB
    6824:	c8 2f       	mov	r28, r24
    6826:	d0 e0       	ldi	r29, 0x00	; 0
    6828:	0e 94 0e 31 	call	0x621c	; 0x621c <Sensors_ReadHumidity>
    682c:	c3 5e       	subi	r28, 0xE3	; 227
    682e:	d4 4b       	sbci	r29, 0xB4	; 180
    6830:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer1[humidityBufferCounter];
    6832:	90 91 ab 33 	lds	r25, 0x33AB
    6836:	e9 2f       	mov	r30, r25
    6838:	f0 e0       	ldi	r31, 0x00	; 0
    683a:	e3 5e       	subi	r30, 0xE3	; 227
    683c:	f4 4b       	sbci	r31, 0xB4	; 180
    683e:	80 81       	ld	r24, Z
    6840:	80 93 b6 33 	sts	0x33B6, r24
			  humidityBufferCounter++;
    6844:	9f 5f       	subi	r25, 0xFF	; 255
    6846:	90 93 ab 33 	sts	0x33AB, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    684a:	9a 30       	cpi	r25, 0x0A	; 10
    684c:	b9 f5       	brne	.+110    	; 0x68bc <__vector_83+0x244>
				  humidityBufferCounter=0;
    684e:	10 92 ab 33 	sts	0x33AB, r1
				  humidityBufferToWriteTo = 2;
    6852:	82 e0       	ldi	r24, 0x02	; 2
    6854:	80 93 ee 2f 	sts	0x2FEE, r24
				  okToSendHumidityBuffer1 = true;
    6858:	81 e0       	ldi	r24, 0x01	; 1
    685a:	80 93 a9 33 	sts	0x33A9, r24
    685e:	2e c0       	rjmp	.+92     	; 0x68bc <__vector_83+0x244>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    6860:	82 30       	cpi	r24, 0x02	; 2
    6862:	61 f5       	brne	.+88     	; 0x68bc <__vector_83+0x244>
			  if(humidityBufferCounter == 0){
    6864:	80 91 ab 33 	lds	r24, 0x33AB
    6868:	88 23       	and	r24, r24
    686a:	51 f4       	brne	.+20     	; 0x6880 <__vector_83+0x208>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    686c:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    6870:	60 93 48 33 	sts	0x3348, r22
    6874:	70 93 49 33 	sts	0x3349, r23
    6878:	80 93 4a 33 	sts	0x334A, r24
    687c:	90 93 4b 33 	sts	0x334B, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    6880:	80 91 ab 33 	lds	r24, 0x33AB
    6884:	c8 2f       	mov	r28, r24
    6886:	d0 e0       	ldi	r29, 0x00	; 0
    6888:	0e 94 0e 31 	call	0x621c	; 0x621c <Sensors_ReadHumidity>
    688c:	ca 54       	subi	r28, 0x4A	; 74
    688e:	dc 4a       	sbci	r29, 0xAC	; 172
    6890:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer2[humidityBufferCounter];
    6892:	90 91 ab 33 	lds	r25, 0x33AB
    6896:	e9 2f       	mov	r30, r25
    6898:	f0 e0       	ldi	r31, 0x00	; 0
    689a:	ea 54       	subi	r30, 0x4A	; 74
    689c:	fc 4a       	sbci	r31, 0xAC	; 172
    689e:	80 81       	ld	r24, Z
    68a0:	80 93 b6 33 	sts	0x33B6, r24
			  humidityBufferCounter++;
    68a4:	9f 5f       	subi	r25, 0xFF	; 255
    68a6:	90 93 ab 33 	sts	0x33AB, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    68aa:	9a 30       	cpi	r25, 0x0A	; 10
    68ac:	39 f4       	brne	.+14     	; 0x68bc <__vector_83+0x244>
				  humidityBufferCounter=0;
    68ae:	10 92 ab 33 	sts	0x33AB, r1
				  humidityBufferToWriteTo = 1;
    68b2:	81 e0       	ldi	r24, 0x01	; 1
    68b4:	80 93 ee 2f 	sts	0x2FEE, r24
				  okToSendHumidityBuffer2 = true;
    68b8:	80 93 aa 33 	sts	0x33AA, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    68bc:	80 91 f2 2f 	lds	r24, 0x2FF2
    68c0:	88 23       	and	r24, r24
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <__vector_83+0x24e>
    68c4:	60 c0       	rjmp	.+192    	; 0x6986 <__vector_83+0x30e>
		  if(pressureBufferToWriteTo == 1){
    68c6:	80 91 ed 2f 	lds	r24, 0x2FED
    68ca:	81 30       	cpi	r24, 0x01	; 1
    68cc:	71 f5       	brne	.+92     	; 0x692a <__vector_83+0x2b2>
			  if(pressureBufferCounter == 0){
    68ce:	80 91 a8 33 	lds	r24, 0x33A8
    68d2:	88 23       	and	r24, r24
    68d4:	51 f4       	brne	.+20     	; 0x68ea <__vector_83+0x272>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    68d6:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    68da:	60 93 4c 33 	sts	0x334C, r22
    68de:	70 93 4d 33 	sts	0x334D, r23
    68e2:	80 93 4e 33 	sts	0x334E, r24
    68e6:	90 93 4f 33 	sts	0x334F, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    68ea:	80 91 a8 33 	lds	r24, 0x33A8
    68ee:	c8 2f       	mov	r28, r24
    68f0:	d0 e0       	ldi	r29, 0x00	; 0
    68f2:	0e 94 30 31 	call	0x6260	; 0x6260 <Sensors_ReadPressure>
    68f6:	cf 58       	subi	r28, 0x8F	; 143
    68f8:	d3 4c       	sbci	r29, 0xC3	; 195
    68fa:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer1[pressureBufferCounter];
    68fc:	90 91 a8 33 	lds	r25, 0x33A8
    6900:	e9 2f       	mov	r30, r25
    6902:	f0 e0       	ldi	r31, 0x00	; 0
    6904:	ef 58       	subi	r30, 0x8F	; 143
    6906:	f3 4c       	sbci	r31, 0xC3	; 195
    6908:	80 81       	ld	r24, Z
    690a:	80 93 b7 33 	sts	0x33B7, r24

			  pressureBufferCounter++;
    690e:	9f 5f       	subi	r25, 0xFF	; 255
    6910:	90 93 a8 33 	sts	0x33A8, r25
			  if(pressureBufferCounter == pressureNumberOfSamples){
    6914:	9a 30       	cpi	r25, 0x0A	; 10
    6916:	b9 f5       	brne	.+110    	; 0x6986 <__vector_83+0x30e>
				  pressureBufferCounter=0;
    6918:	10 92 a8 33 	sts	0x33A8, r1
				  pressureBufferToWriteTo = 2;
    691c:	82 e0       	ldi	r24, 0x02	; 2
    691e:	80 93 ed 2f 	sts	0x2FED, r24
				  okToSendPressureBuffer1 = true;
    6922:	81 e0       	ldi	r24, 0x01	; 1
    6924:	80 93 a6 33 	sts	0x33A6, r24
    6928:	2e c0       	rjmp	.+92     	; 0x6986 <__vector_83+0x30e>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    692a:	82 30       	cpi	r24, 0x02	; 2
    692c:	61 f5       	brne	.+88     	; 0x6986 <__vector_83+0x30e>
			  if(pressureBufferCounter == 0){
    692e:	80 91 a8 33 	lds	r24, 0x33A8
    6932:	88 23       	and	r24, r24
    6934:	51 f4       	brne	.+20     	; 0x694a <__vector_83+0x2d2>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    6936:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    693a:	60 93 50 33 	sts	0x3350, r22
    693e:	70 93 51 33 	sts	0x3351, r23
    6942:	80 93 52 33 	sts	0x3352, r24
    6946:	90 93 53 33 	sts	0x3353, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    694a:	80 91 a8 33 	lds	r24, 0x33A8
    694e:	c8 2f       	mov	r28, r24
    6950:	d0 e0       	ldi	r29, 0x00	; 0
    6952:	0e 94 30 31 	call	0x6260	; 0x6260 <Sensors_ReadPressure>
    6956:	c0 52       	subi	r28, 0x20	; 32
    6958:	d5 4b       	sbci	r29, 0xB5	; 181
    695a:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer2[pressureBufferCounter];
    695c:	90 91 a8 33 	lds	r25, 0x33A8
    6960:	e9 2f       	mov	r30, r25
    6962:	f0 e0       	ldi	r31, 0x00	; 0
    6964:	e0 52       	subi	r30, 0x20	; 32
    6966:	f5 4b       	sbci	r31, 0xB5	; 181
    6968:	80 81       	ld	r24, Z
    696a:	80 93 b7 33 	sts	0x33B7, r24
			  pressureBufferCounter++;
    696e:	9f 5f       	subi	r25, 0xFF	; 255
    6970:	90 93 a8 33 	sts	0x33A8, r25
			if(pressureBufferCounter == pressureNumberOfSamples){
    6974:	9a 30       	cpi	r25, 0x0A	; 10
    6976:	39 f4       	brne	.+14     	; 0x6986 <__vector_83+0x30e>
				pressureBufferCounter=0;
    6978:	10 92 a8 33 	sts	0x33A8, r1
				pressureBufferToWriteTo = 1;
    697c:	81 e0       	ldi	r24, 0x01	; 1
    697e:	80 93 ed 2f 	sts	0x2FED, r24
				okToSendPressureBuffer2 = true;
    6982:	80 93 a7 33 	sts	0x33A7, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    6986:	80 91 f4 2f 	lds	r24, 0x2FF4
    698a:	88 23       	and	r24, r24
    698c:	09 f4       	brne	.+2      	; 0x6990 <__vector_83+0x318>
    698e:	67 c1       	rjmp	.+718    	; 0x6c5e <__vector_83+0x5e6>

		  Light_readColors();
    6990:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <Light_readColors>
		  Light_readColors();
    6994:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <Light_readColors>
		  Light_readColors();
    6998:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <Light_readColors>

		  quickLight = Light_returnColor(clear);
    699c:	80 91 60 3c 	lds	r24, 0x3C60
    69a0:	90 91 61 3c 	lds	r25, 0x3C61
    69a4:	80 93 b8 33 	sts	0x33B8, r24
    69a8:	90 93 b9 33 	sts	0x33B9, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    69ac:	e0 91 a0 33 	lds	r30, 0x33A0
    69b0:	f0 e0       	ldi	r31, 0x00	; 0
    69b2:	ee 0f       	add	r30, r30
    69b4:	ff 1f       	adc	r31, r31
    69b6:	ee 0f       	add	r30, r30
    69b8:	ff 1f       	adc	r31, r31
    69ba:	e8 53       	subi	r30, 0x38	; 56
    69bc:	f0 4d       	sbci	r31, 0xD0	; 208
    69be:	a0 80       	ld	r10, Z
    69c0:	b1 80       	ldd	r11, Z+1	; 0x01
    69c2:	c2 80       	ldd	r12, Z+2	; 0x02
    69c4:	d3 80       	ldd	r13, Z+3	; 0x03
    69c6:	e6 ea       	ldi	r30, 0xA6	; 166
    69c8:	f3 e5       	ldi	r31, 0x53	; 83
    69ca:	ca e5       	ldi	r28, 0x5A	; 90
    69cc:	dc e3       	ldi	r29, 0x3C	; 60
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    69ce:	10 82       	st	Z, r1
    69d0:	11 82       	std	Z+1, r1	; 0x01
    69d2:	12 82       	std	Z+2, r1	; 0x02
    69d4:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    69d6:	88 81       	ld	r24, Y
    69d8:	99 81       	ldd	r25, Y+1	; 0x01
    69da:	3c 01       	movw	r6, r24
    69dc:	88 24       	eor	r8, r8
    69de:	99 24       	eor	r9, r9
    69e0:	ee 24       	eor	r14, r14
    69e2:	ff 24       	eor	r15, r15
    69e4:	87 01       	movw	r16, r14
    69e6:	a6 01       	movw	r20, r12
    69e8:	95 01       	movw	r18, r10
    69ea:	e6 0c       	add	r14, r6
    69ec:	f7 1c       	adc	r15, r7
    69ee:	08 1d       	adc	r16, r8
    69f0:	19 1d       	adc	r17, r9
    69f2:	2a 0d       	add	r18, r10
    69f4:	3b 1d       	adc	r19, r11
    69f6:	4c 1d       	adc	r20, r12
    69f8:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    69fa:	da 01       	movw	r26, r20
    69fc:	c9 01       	movw	r24, r18
    69fe:	8a 19       	sub	r24, r10
    6a00:	9b 09       	sbc	r25, r11
    6a02:	ac 09       	sbc	r26, r12
    6a04:	bd 09       	sbc	r27, r13
    6a06:	80 50       	subi	r24, 0x00	; 0
    6a08:	9c 42       	sbci	r25, 0x2C	; 44
    6a0a:	a1 40       	sbci	r26, 0x01	; 1
    6a0c:	b0 40       	sbci	r27, 0x00	; 0
    6a0e:	68 f3       	brcs	.-38     	; 0x69ea <__vector_83+0x372>
    6a10:	e1 92       	st	Z+, r14
    6a12:	f1 92       	st	Z+, r15
    6a14:	01 93       	st	Z+, r16
    6a16:	11 93       	st	Z+, r17
    6a18:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    6a1a:	83 e5       	ldi	r24, 0x53	; 83
    6a1c:	e6 3b       	cpi	r30, 0xB6	; 182
    6a1e:	f8 07       	cpc	r31, r24
    6a20:	b1 f6       	brne	.-84     	; 0x69ce <__vector_83+0x356>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    6a22:	80 91 f0 2f 	lds	r24, 0x2FF0
    6a26:	81 30       	cpi	r24, 0x01	; 1
    6a28:	09 f0       	breq	.+2      	; 0x6a2c <__vector_83+0x3b4>
    6a2a:	72 c0       	rjmp	.+228    	; 0x6b10 <__vector_83+0x498>
			  if(lightBufferCounter == 0){
    6a2c:	80 91 b2 33 	lds	r24, 0x33B2
    6a30:	88 23       	and	r24, r24
    6a32:	51 f4       	brne	.+20     	; 0x6a48 <__vector_83+0x3d0>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    6a34:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    6a38:	60 93 5c 33 	sts	0x335C, r22
    6a3c:	70 93 5d 33 	sts	0x335D, r23
    6a40:	80 93 5e 33 	sts	0x335E, r24
    6a44:	90 93 5f 33 	sts	0x335F, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    6a48:	20 91 b2 33 	lds	r18, 0x33B2
    6a4c:	e2 2f       	mov	r30, r18
    6a4e:	f0 e0       	ldi	r31, 0x00	; 0
    6a50:	ee 0f       	add	r30, r30
    6a52:	ff 1f       	adc	r31, r31
    6a54:	ee 0f       	add	r30, r30
    6a56:	ff 1f       	adc	r31, r31
    6a58:	e8 5e       	subi	r30, 0xE8	; 232
    6a5a:	f4 4a       	sbci	r31, 0xA4	; 164
    6a5c:	80 91 a6 53 	lds	r24, 0x53A6
    6a60:	90 91 a7 53 	lds	r25, 0x53A7
    6a64:	a0 91 a8 53 	lds	r26, 0x53A8
    6a68:	b0 91 a9 53 	lds	r27, 0x53A9
    6a6c:	80 83       	st	Z, r24
    6a6e:	91 83       	std	Z+1, r25	; 0x01
    6a70:	a2 83       	std	Z+2, r26	; 0x02
    6a72:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a74:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    6a76:	e2 2f       	mov	r30, r18
    6a78:	f0 e0       	ldi	r31, 0x00	; 0
    6a7a:	ee 0f       	add	r30, r30
    6a7c:	ff 1f       	adc	r31, r31
    6a7e:	ee 0f       	add	r30, r30
    6a80:	ff 1f       	adc	r31, r31
    6a82:	e8 5e       	subi	r30, 0xE8	; 232
    6a84:	f4 4a       	sbci	r31, 0xA4	; 164
    6a86:	80 91 aa 53 	lds	r24, 0x53AA
    6a8a:	90 91 ab 53 	lds	r25, 0x53AB
    6a8e:	a0 91 ac 53 	lds	r26, 0x53AC
    6a92:	b0 91 ad 53 	lds	r27, 0x53AD
    6a96:	80 83       	st	Z, r24
    6a98:	91 83       	std	Z+1, r25	; 0x01
    6a9a:	a2 83       	std	Z+2, r26	; 0x02
    6a9c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a9e:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    6aa0:	e2 2f       	mov	r30, r18
    6aa2:	f0 e0       	ldi	r31, 0x00	; 0
    6aa4:	ee 0f       	add	r30, r30
    6aa6:	ff 1f       	adc	r31, r31
    6aa8:	ee 0f       	add	r30, r30
    6aaa:	ff 1f       	adc	r31, r31
    6aac:	e8 5e       	subi	r30, 0xE8	; 232
    6aae:	f4 4a       	sbci	r31, 0xA4	; 164
    6ab0:	80 91 ae 53 	lds	r24, 0x53AE
    6ab4:	90 91 af 53 	lds	r25, 0x53AF
    6ab8:	a0 91 b0 53 	lds	r26, 0x53B0
    6abc:	b0 91 b1 53 	lds	r27, 0x53B1
    6ac0:	80 83       	st	Z, r24
    6ac2:	91 83       	std	Z+1, r25	; 0x01
    6ac4:	a2 83       	std	Z+2, r26	; 0x02
    6ac6:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6ac8:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    6aca:	e2 2f       	mov	r30, r18
    6acc:	f0 e0       	ldi	r31, 0x00	; 0
    6ace:	ee 0f       	add	r30, r30
    6ad0:	ff 1f       	adc	r31, r31
    6ad2:	ee 0f       	add	r30, r30
    6ad4:	ff 1f       	adc	r31, r31
    6ad6:	e8 5e       	subi	r30, 0xE8	; 232
    6ad8:	f4 4a       	sbci	r31, 0xA4	; 164
    6ada:	80 91 b2 53 	lds	r24, 0x53B2
    6ade:	90 91 b3 53 	lds	r25, 0x53B3
    6ae2:	a0 91 b4 53 	lds	r26, 0x53B4
    6ae6:	b0 91 b5 53 	lds	r27, 0x53B5
    6aea:	80 83       	st	Z, r24
    6aec:	91 83       	std	Z+1, r25	; 0x01
    6aee:	a2 83       	std	Z+2, r26	; 0x02
    6af0:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6af2:	2f 5f       	subi	r18, 0xFF	; 255
    6af4:	20 93 b2 33 	sts	0x33B2, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6af8:	28 32       	cpi	r18, 0x28	; 40
    6afa:	09 f0       	breq	.+2      	; 0x6afe <__vector_83+0x486>
    6afc:	7b c0       	rjmp	.+246    	; 0x6bf4 <__vector_83+0x57c>
				  lightBufferCounter=0;
    6afe:	10 92 b2 33 	sts	0x33B2, r1
				  lightBufferToWriteTo = 2;
    6b02:	82 e0       	ldi	r24, 0x02	; 2
    6b04:	80 93 f0 2f 	sts	0x2FF0, r24
				  okToSendLightBuffer1 = true;
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	80 93 b0 33 	sts	0x33B0, r24
    6b0e:	72 c0       	rjmp	.+228    	; 0x6bf4 <__vector_83+0x57c>
			  }
		  } else if (lightBufferToWriteTo == 2){
    6b10:	82 30       	cpi	r24, 0x02	; 2
    6b12:	09 f0       	breq	.+2      	; 0x6b16 <__vector_83+0x49e>
    6b14:	6f c0       	rjmp	.+222    	; 0x6bf4 <__vector_83+0x57c>
			  if(lightBufferCounter == 0){
    6b16:	80 91 b2 33 	lds	r24, 0x33B2
    6b1a:	88 23       	and	r24, r24
    6b1c:	51 f4       	brne	.+20     	; 0x6b32 <__vector_83+0x4ba>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    6b1e:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    6b22:	60 93 60 33 	sts	0x3360, r22
    6b26:	70 93 61 33 	sts	0x3361, r23
    6b2a:	80 93 62 33 	sts	0x3362, r24
    6b2e:	90 93 63 33 	sts	0x3363, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    6b32:	20 91 b2 33 	lds	r18, 0x33B2
    6b36:	e2 2f       	mov	r30, r18
    6b38:	f0 e0       	ldi	r31, 0x00	; 0
    6b3a:	ee 0f       	add	r30, r30
    6b3c:	ff 1f       	adc	r31, r31
    6b3e:	ee 0f       	add	r30, r30
    6b40:	ff 1f       	adc	r31, r31
    6b42:	e3 5c       	subi	r30, 0xC3	; 195
    6b44:	fa 4b       	sbci	r31, 0xBA	; 186
    6b46:	80 91 a6 53 	lds	r24, 0x53A6
    6b4a:	90 91 a7 53 	lds	r25, 0x53A7
    6b4e:	a0 91 a8 53 	lds	r26, 0x53A8
    6b52:	b0 91 a9 53 	lds	r27, 0x53A9
    6b56:	80 83       	st	Z, r24
    6b58:	91 83       	std	Z+1, r25	; 0x01
    6b5a:	a2 83       	std	Z+2, r26	; 0x02
    6b5c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b5e:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    6b60:	e2 2f       	mov	r30, r18
    6b62:	f0 e0       	ldi	r31, 0x00	; 0
    6b64:	ee 0f       	add	r30, r30
    6b66:	ff 1f       	adc	r31, r31
    6b68:	ee 0f       	add	r30, r30
    6b6a:	ff 1f       	adc	r31, r31
    6b6c:	e3 5c       	subi	r30, 0xC3	; 195
    6b6e:	fa 4b       	sbci	r31, 0xBA	; 186
    6b70:	80 91 aa 53 	lds	r24, 0x53AA
    6b74:	90 91 ab 53 	lds	r25, 0x53AB
    6b78:	a0 91 ac 53 	lds	r26, 0x53AC
    6b7c:	b0 91 ad 53 	lds	r27, 0x53AD
    6b80:	80 83       	st	Z, r24
    6b82:	91 83       	std	Z+1, r25	; 0x01
    6b84:	a2 83       	std	Z+2, r26	; 0x02
    6b86:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b88:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    6b8a:	e2 2f       	mov	r30, r18
    6b8c:	f0 e0       	ldi	r31, 0x00	; 0
    6b8e:	ee 0f       	add	r30, r30
    6b90:	ff 1f       	adc	r31, r31
    6b92:	ee 0f       	add	r30, r30
    6b94:	ff 1f       	adc	r31, r31
    6b96:	e3 5c       	subi	r30, 0xC3	; 195
    6b98:	fa 4b       	sbci	r31, 0xBA	; 186
    6b9a:	80 91 ae 53 	lds	r24, 0x53AE
    6b9e:	90 91 af 53 	lds	r25, 0x53AF
    6ba2:	a0 91 b0 53 	lds	r26, 0x53B0
    6ba6:	b0 91 b1 53 	lds	r27, 0x53B1
    6baa:	80 83       	st	Z, r24
    6bac:	91 83       	std	Z+1, r25	; 0x01
    6bae:	a2 83       	std	Z+2, r26	; 0x02
    6bb0:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6bb2:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    6bb4:	e2 2f       	mov	r30, r18
    6bb6:	f0 e0       	ldi	r31, 0x00	; 0
    6bb8:	ee 0f       	add	r30, r30
    6bba:	ff 1f       	adc	r31, r31
    6bbc:	ee 0f       	add	r30, r30
    6bbe:	ff 1f       	adc	r31, r31
    6bc0:	e3 5c       	subi	r30, 0xC3	; 195
    6bc2:	fa 4b       	sbci	r31, 0xBA	; 186
    6bc4:	80 91 b2 53 	lds	r24, 0x53B2
    6bc8:	90 91 b3 53 	lds	r25, 0x53B3
    6bcc:	a0 91 b4 53 	lds	r26, 0x53B4
    6bd0:	b0 91 b5 53 	lds	r27, 0x53B5
    6bd4:	80 83       	st	Z, r24
    6bd6:	91 83       	std	Z+1, r25	; 0x01
    6bd8:	a2 83       	std	Z+2, r26	; 0x02
    6bda:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6bdc:	2f 5f       	subi	r18, 0xFF	; 255
    6bde:	20 93 b2 33 	sts	0x33B2, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6be2:	28 32       	cpi	r18, 0x28	; 40
    6be4:	39 f4       	brne	.+14     	; 0x6bf4 <__vector_83+0x57c>
				  lightBufferCounter=0;
    6be6:	10 92 b2 33 	sts	0x33B2, r1
				  lightBufferToWriteTo = 1;
    6bea:	81 e0       	ldi	r24, 0x01	; 1
    6bec:	80 93 f0 2f 	sts	0x2FF0, r24
				  okToSendLightBuffer2 = true;
    6bf0:	80 93 b1 33 	sts	0x33B1, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6bf4:	20 91 60 3c 	lds	r18, 0x3C60
    6bf8:	30 91 61 3c 	lds	r19, 0x3C61
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6bfc:	6f eb       	ldi	r22, 0xBF	; 191
    6bfe:	29 36       	cpi	r18, 0x69	; 105
    6c00:	36 07       	cpc	r19, r22
    6c02:	30 f0       	brcs	.+12     	; 0x6c10 <__vector_83+0x598>
    6c04:	80 91 a0 33 	lds	r24, 0x33A0
    6c08:	88 23       	and	r24, r24
    6c0a:	11 f0       	breq	.+4      	; 0x6c10 <__vector_83+0x598>
			  gainSelector--;
    6c0c:	81 50       	subi	r24, 0x01	; 1
    6c0e:	08 c0       	rjmp	.+16     	; 0x6c20 <__vector_83+0x5a8>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6c10:	20 58       	subi	r18, 0x80	; 128
    6c12:	3e 43       	sbci	r19, 0x3E	; 62
    6c14:	20 f5       	brcc	.+72     	; 0x6c5e <__vector_83+0x5e6>
    6c16:	80 91 a0 33 	lds	r24, 0x33A0
    6c1a:	88 30       	cpi	r24, 0x08	; 8
    6c1c:	01 f1       	breq	.+64     	; 0x6c5e <__vector_83+0x5e6>
			  gainSelector++;
    6c1e:	8f 5f       	subi	r24, 0xFF	; 255
    6c20:	80 93 a0 33 	sts	0x33A0, r24
			  Light_setGain();
    6c24:	0e 94 0e 33 	call	0x661c	; 0x661c <Light_setGain>
    6c28:	1a c0       	rjmp	.+52     	; 0x6c5e <__vector_83+0x5e6>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6c2a:	0e 94 f6 30 	call	0x61ec	; 0x61ec <Sensors_ReadTemperature>
    6c2e:	6a e0       	ldi	r22, 0x0A	; 10
    6c30:	70 e0       	ldi	r23, 0x00	; 0
    6c32:	0e 94 0f 5c 	call	0xb81e	; 0xb81e <__udivmodhi4>
    6c36:	60 93 b5 33 	sts	0x33B5, r22
		quickHumidity = Sensors_ReadHumidity();
    6c3a:	0e 94 0e 31 	call	0x621c	; 0x621c <Sensors_ReadHumidity>
    6c3e:	80 93 b6 33 	sts	0x33B6, r24
		quickPressure = Sensors_ReadPressure();
    6c42:	0e 94 30 31 	call	0x6260	; 0x6260 <Sensors_ReadPressure>
    6c46:	80 93 b7 33 	sts	0x33B7, r24
		Light_readColors();
    6c4a:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <Light_readColors>
		quickLight = Light_returnColor(clear);
    6c4e:	80 91 60 3c 	lds	r24, 0x3C60
    6c52:	90 91 61 3c 	lds	r25, 0x3C61
    6c56:	80 93 b8 33 	sts	0x33B8, r24
    6c5a:	90 93 b9 33 	sts	0x33B9, r25
	}




}
    6c5e:	ff 91       	pop	r31
    6c60:	ef 91       	pop	r30
    6c62:	df 91       	pop	r29
    6c64:	cf 91       	pop	r28
    6c66:	bf 91       	pop	r27
    6c68:	af 91       	pop	r26
    6c6a:	9f 91       	pop	r25
    6c6c:	8f 91       	pop	r24
    6c6e:	7f 91       	pop	r23
    6c70:	6f 91       	pop	r22
    6c72:	5f 91       	pop	r21
    6c74:	4f 91       	pop	r20
    6c76:	3f 91       	pop	r19
    6c78:	2f 91       	pop	r18
    6c7a:	1f 91       	pop	r17
    6c7c:	0f 91       	pop	r16
    6c7e:	ff 90       	pop	r15
    6c80:	ef 90       	pop	r14
    6c82:	df 90       	pop	r13
    6c84:	cf 90       	pop	r12
    6c86:	bf 90       	pop	r11
    6c88:	af 90       	pop	r10
    6c8a:	9f 90       	pop	r9
    6c8c:	8f 90       	pop	r8
    6c8e:	7f 90       	pop	r7
    6c90:	6f 90       	pop	r6
    6c92:	0f 90       	pop	r0
    6c94:	0b be       	out	0x3b, r0	; 59
    6c96:	0f 90       	pop	r0
    6c98:	0f be       	out	0x3f, r0	; 63
    6c9a:	0f 90       	pop	r0
    6c9c:	1f 90       	pop	r1
    6c9e:	18 95       	reti

00006ca0 <RTC_init>:
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6ca0:	e0 ea       	ldi	r30, 0xA0	; 160
    6ca2:	f4 e0       	ldi	r31, 0x04	; 4
    6ca4:	88 e0       	ldi	r24, 0x08	; 8
    6ca6:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6ca8:	84 e0       	ldi	r24, 0x04	; 4
    6caa:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6cac:	8f e0       	ldi	r24, 0x0F	; 15
    6cae:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6cb0:	81 e0       	ldi	r24, 0x01	; 1
    6cb2:	84 83       	std	Z+4, r24	; 0x04


}
    6cb4:	08 95       	ret

00006cb6 <RTC_UTCSecsToTime>:

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    6cb6:	8f 92       	push	r8
    6cb8:	9f 92       	push	r9
    6cba:	af 92       	push	r10
    6cbc:	bf 92       	push	r11
    6cbe:	cf 92       	push	r12
    6cc0:	df 92       	push	r13
    6cc2:	ef 92       	push	r14
    6cc4:	ff 92       	push	r15
    6cc6:	0f 93       	push	r16
    6cc8:	1f 93       	push	r17
    6cca:	cf 93       	push	r28
    6ccc:	df 93       	push	r29
    6cce:	7b 01       	movw	r14, r22
    6cd0:	8c 01       	movw	r16, r24
    6cd2:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    6cd4:	2c e3       	ldi	r18, 0x3C	; 60
    6cd6:	30 e0       	ldi	r19, 0x00	; 0
    6cd8:	40 e0       	ldi	r20, 0x00	; 0
    6cda:	50 e0       	ldi	r21, 0x00	; 0
    6cdc:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6ce0:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6ce2:	c8 01       	movw	r24, r16
    6ce4:	b7 01       	movw	r22, r14
    6ce6:	2c e3       	ldi	r18, 0x3C	; 60
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	40 e0       	ldi	r20, 0x00	; 0
    6cec:	50 e0       	ldi	r21, 0x00	; 0
    6cee:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6cf2:	12 2f       	mov	r17, r18
    6cf4:	03 2f       	mov	r16, r19
    6cf6:	f4 2e       	mov	r15, r20
    6cf8:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6cfa:	62 2f       	mov	r22, r18
    6cfc:	73 2f       	mov	r23, r19
    6cfe:	84 2f       	mov	r24, r20
    6d00:	95 2f       	mov	r25, r21
    6d02:	2c e3       	ldi	r18, 0x3C	; 60
    6d04:	30 e0       	ldi	r19, 0x00	; 0
    6d06:	40 e0       	ldi	r20, 0x00	; 0
    6d08:	50 e0       	ldi	r21, 0x00	; 0
    6d0a:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6d0e:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6d10:	61 2f       	mov	r22, r17
    6d12:	70 2f       	mov	r23, r16
    6d14:	8f 2d       	mov	r24, r15
    6d16:	9e 2d       	mov	r25, r14
    6d18:	2c e3       	ldi	r18, 0x3C	; 60
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	40 e0       	ldi	r20, 0x00	; 0
    6d1e:	50 e0       	ldi	r21, 0x00	; 0
    6d20:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6d24:	12 2f       	mov	r17, r18
    6d26:	03 2f       	mov	r16, r19
    6d28:	f4 2e       	mov	r15, r20
    6d2a:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    6d2c:	62 2f       	mov	r22, r18
    6d2e:	73 2f       	mov	r23, r19
    6d30:	84 2f       	mov	r24, r20
    6d32:	95 2f       	mov	r25, r21
    6d34:	28 e1       	ldi	r18, 0x18	; 24
    6d36:	30 e0       	ldi	r19, 0x00	; 0
    6d38:	40 e0       	ldi	r20, 0x00	; 0
    6d3a:	50 e0       	ldi	r21, 0x00	; 0
    6d3c:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6d40:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    6d42:	61 2f       	mov	r22, r17
    6d44:	70 2f       	mov	r23, r16
    6d46:	8f 2d       	mov	r24, r15
    6d48:	9e 2d       	mov	r25, r14
    6d4a:	28 e1       	ldi	r18, 0x18	; 24
    6d4c:	30 e0       	ldi	r19, 0x00	; 0
    6d4e:	40 e0       	ldi	r20, 0x00	; 0
    6d50:	50 e0       	ldi	r21, 0x00	; 0
    6d52:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6d56:	79 01       	movw	r14, r18
    6d58:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    6d5a:	c8 01       	movw	r24, r16
    6d5c:	b7 01       	movw	r22, r14
    6d5e:	6c 5f       	subi	r22, 0xFC	; 252
    6d60:	7f 4f       	sbci	r23, 0xFF	; 255
    6d62:	8f 4f       	sbci	r24, 0xFF	; 255
    6d64:	9f 4f       	sbci	r25, 0xFF	; 255
    6d66:	27 e0       	ldi	r18, 0x07	; 7
    6d68:	30 e0       	ldi	r19, 0x00	; 0
    6d6a:	40 e0       	ldi	r20, 0x00	; 0
    6d6c:	50 e0       	ldi	r21, 0x00	; 0
    6d6e:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    6d72:	6f 5f       	subi	r22, 0xFF	; 255
    6d74:	6c 83       	std	Y+4, r22	; 0x04
    6d76:	20 e0       	ldi	r18, 0x00	; 0
    6d78:	aa 24       	eor	r10, r10
    6d7a:	bb 24       	eor	r11, r11
    6d7c:	65 01       	movw	r12, r10
    6d7e:	01 c0       	rjmp	.+2      	; 0x6d82 <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    6d80:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    6d82:	82 2e       	mov	r8, r18
    6d84:	99 24       	eor	r9, r9
    6d86:	f4 01       	movw	r30, r8
    6d88:	ee 54       	subi	r30, 0x4E	; 78
    6d8a:	f8 4f       	sbci	r31, 0xF8	; 248
    6d8c:	cf 01       	movw	r24, r30
    6d8e:	83 70       	andi	r24, 0x03	; 3
    6d90:	90 70       	andi	r25, 0x00	; 0
    6d92:	89 2b       	or	r24, r25
    6d94:	99 f4       	brne	.+38     	; 0x6dbc <RTC_UTCSecsToTime+0x106>
    6d96:	cf 01       	movw	r24, r30
    6d98:	64 e6       	ldi	r22, 0x64	; 100
    6d9a:	70 e0       	ldi	r23, 0x00	; 0
    6d9c:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6da0:	89 2b       	or	r24, r25
    6da2:	39 f4       	brne	.+14     	; 0x6db2 <RTC_UTCSecsToTime+0xfc>
    6da4:	cf 01       	movw	r24, r30
    6da6:	60 e9       	ldi	r22, 0x90	; 144
    6da8:	71 e0       	ldi	r23, 0x01	; 1
    6daa:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6dae:	89 2b       	or	r24, r25
    6db0:	29 f4       	brne	.+10     	; 0x6dbc <RTC_UTCSecsToTime+0x106>
    6db2:	8e e6       	ldi	r24, 0x6E	; 110
    6db4:	91 e0       	ldi	r25, 0x01	; 1
    6db6:	a0 e0       	ldi	r26, 0x00	; 0
    6db8:	b0 e0       	ldi	r27, 0x00	; 0
    6dba:	04 c0       	rjmp	.+8      	; 0x6dc4 <RTC_UTCSecsToTime+0x10e>
    6dbc:	8d e6       	ldi	r24, 0x6D	; 109
    6dbe:	91 e0       	ldi	r25, 0x01	; 1
    6dc0:	a0 e0       	ldi	r26, 0x00	; 0
    6dc2:	b0 e0       	ldi	r27, 0x00	; 0
    6dc4:	a8 0e       	add	r10, r24
    6dc6:	b9 1e       	adc	r11, r25
    6dc8:	ca 1e       	adc	r12, r26
    6dca:	db 1e       	adc	r13, r27
    6dcc:	c5 01       	movw	r24, r10
    6dce:	a0 e0       	ldi	r26, 0x00	; 0
    6dd0:	b0 e0       	ldi	r27, 0x00	; 0
    6dd2:	e8 16       	cp	r14, r24
    6dd4:	f9 06       	cpc	r15, r25
    6dd6:	0a 07       	cpc	r16, r26
    6dd8:	1b 07       	cpc	r17, r27
    6dda:	90 f6       	brcc	.-92     	; 0x6d80 <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6ddc:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6dde:	f4 01       	movw	r30, r8
    6de0:	ee 54       	subi	r30, 0x4E	; 78
    6de2:	f8 4f       	sbci	r31, 0xF8	; 248
    6de4:	83 e0       	ldi	r24, 0x03	; 3
    6de6:	88 2e       	mov	r8, r24
    6de8:	91 2c       	mov	r9, r1
    6dea:	8e 22       	and	r8, r30
    6dec:	9f 22       	and	r9, r31
    6dee:	81 14       	cp	r8, r1
    6df0:	91 04       	cpc	r9, r1
    6df2:	99 f4       	brne	.+38     	; 0x6e1a <RTC_UTCSecsToTime+0x164>
    6df4:	cf 01       	movw	r24, r30
    6df6:	64 e6       	ldi	r22, 0x64	; 100
    6df8:	70 e0       	ldi	r23, 0x00	; 0
    6dfa:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6dfe:	89 2b       	or	r24, r25
    6e00:	39 f4       	brne	.+14     	; 0x6e10 <RTC_UTCSecsToTime+0x15a>
    6e02:	cf 01       	movw	r24, r30
    6e04:	60 e9       	ldi	r22, 0x90	; 144
    6e06:	71 e0       	ldi	r23, 0x01	; 1
    6e08:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6e0c:	89 2b       	or	r24, r25
    6e0e:	29 f4       	brne	.+10     	; 0x6e1a <RTC_UTCSecsToTime+0x164>
    6e10:	8e e6       	ldi	r24, 0x6E	; 110
    6e12:	91 e0       	ldi	r25, 0x01	; 1
    6e14:	a0 e0       	ldi	r26, 0x00	; 0
    6e16:	b0 e0       	ldi	r27, 0x00	; 0
    6e18:	04 c0       	rjmp	.+8      	; 0x6e22 <RTC_UTCSecsToTime+0x16c>
    6e1a:	8d e6       	ldi	r24, 0x6D	; 109
    6e1c:	91 e0       	ldi	r25, 0x01	; 1
    6e1e:	a0 e0       	ldi	r26, 0x00	; 0
    6e20:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6e22:	a8 1a       	sub	r10, r24
    6e24:	b9 0a       	sbc	r11, r25
    6e26:	ca 0a       	sbc	r12, r26
    6e28:	db 0a       	sbc	r13, r27
    6e2a:	98 01       	movw	r18, r16
    6e2c:	87 01       	movw	r16, r14
    6e2e:	0a 19       	sub	r16, r10
    6e30:	1b 09       	sbc	r17, r11
    6e32:	2c 09       	sbc	r18, r12
    6e34:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    6e36:	cf 01       	movw	r24, r30
    6e38:	64 e6       	ldi	r22, 0x64	; 100
    6e3a:	70 e0       	ldi	r23, 0x00	; 0
    6e3c:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6e40:	7c 01       	movw	r14, r24
    6e42:	cf 01       	movw	r24, r30
    6e44:	60 e9       	ldi	r22, 0x90	; 144
    6e46:	71 e0       	ldi	r23, 0x01	; 1
    6e48:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6e4c:	ac 01       	movw	r20, r24
    6e4e:	ed ee       	ldi	r30, 0xED	; 237
    6e50:	f2 e3       	ldi	r31, 0x32	; 50
    6e52:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    6e54:	61 30       	cpi	r22, 0x01	; 1
    6e56:	51 f4       	brne	.+20     	; 0x6e6c <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    6e58:	81 14       	cp	r8, r1
    6e5a:	91 04       	cpc	r9, r1
    6e5c:	49 f4       	brne	.+18     	; 0x6e70 <RTC_UTCSecsToTime+0x1ba>
    6e5e:	e1 14       	cp	r14, r1
    6e60:	f1 04       	cpc	r15, r1
    6e62:	41 f4       	brne	.+16     	; 0x6e74 <RTC_UTCSecsToTime+0x1be>
    6e64:	41 15       	cp	r20, r1
    6e66:	51 05       	cpc	r21, r1
    6e68:	29 f0       	breq	.+10     	; 0x6e74 <RTC_UTCSecsToTime+0x1be>
    6e6a:	02 c0       	rjmp	.+4      	; 0x6e70 <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    6e6c:	80 81       	ld	r24, Z
    6e6e:	03 c0       	rjmp	.+6      	; 0x6e76 <RTC_UTCSecsToTime+0x1c0>
    6e70:	8c e1       	ldi	r24, 0x1C	; 28
    6e72:	01 c0       	rjmp	.+2      	; 0x6e76 <RTC_UTCSecsToTime+0x1c0>
    6e74:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	a0 e0       	ldi	r26, 0x00	; 0
    6e7a:	b0 e0       	ldi	r27, 0x00	; 0
    6e7c:	08 17       	cp	r16, r24
    6e7e:	19 07       	cpc	r17, r25
    6e80:	2a 07       	cpc	r18, r26
    6e82:	3b 07       	cpc	r19, r27
    6e84:	40 f0       	brcs	.+16     	; 0x6e96 <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    6e86:	08 1b       	sub	r16, r24
    6e88:	19 0b       	sbc	r17, r25
    6e8a:	2a 0b       	sbc	r18, r26
    6e8c:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6e8e:	6f 5f       	subi	r22, 0xFF	; 255
    6e90:	31 96       	adiw	r30, 0x01	; 1
    6e92:	6c 30       	cpi	r22, 0x0C	; 12
    6e94:	f9 f6       	brne	.-66     	; 0x6e54 <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    6e96:	6f 5f       	subi	r22, 0xFF	; 255
    6e98:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6e9a:	80 2f       	mov	r24, r16
    6e9c:	8f 5f       	subi	r24, 0xFF	; 255
    6e9e:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6ea0:	ce 01       	movw	r24, r28
    6ea2:	df 91       	pop	r29
    6ea4:	cf 91       	pop	r28
    6ea6:	1f 91       	pop	r17
    6ea8:	0f 91       	pop	r16
    6eaa:	ff 90       	pop	r15
    6eac:	ef 90       	pop	r14
    6eae:	df 90       	pop	r13
    6eb0:	cf 90       	pop	r12
    6eb2:	bf 90       	pop	r11
    6eb4:	af 90       	pop	r10
    6eb6:	9f 90       	pop	r9
    6eb8:	8f 90       	pop	r8
    6eba:	08 95       	ret

00006ebc <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6ebc:	4f 92       	push	r4
    6ebe:	5f 92       	push	r5
    6ec0:	6f 92       	push	r6
    6ec2:	7f 92       	push	r7
    6ec4:	8f 92       	push	r8
    6ec6:	9f 92       	push	r9
    6ec8:	af 92       	push	r10
    6eca:	bf 92       	push	r11
    6ecc:	cf 92       	push	r12
    6ece:	df 92       	push	r13
    6ed0:	ef 92       	push	r14
    6ed2:	ff 92       	push	r15
    6ed4:	0f 93       	push	r16
    6ed6:	1f 93       	push	r17
    6ed8:	cf 93       	push	r28
    6eda:	df 93       	push	r29
    6edc:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6ede:	dc 01       	movw	r26, r24
    6ee0:	17 96       	adiw	r26, 0x07	; 7
    6ee2:	1c 91       	ld	r17, X
    6ee4:	61 2f       	mov	r22, r17
    6ee6:	70 e0       	ldi	r23, 0x00	; 0
    6ee8:	80 e0       	ldi	r24, 0x00	; 0
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	20 e8       	ldi	r18, 0x80	; 128
    6eee:	33 e3       	ldi	r19, 0x33	; 51
    6ef0:	41 ee       	ldi	r20, 0xE1	; 225
    6ef2:	51 e0       	ldi	r21, 0x01	; 1
    6ef4:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    6ef8:	5b 01       	movw	r10, r22
    6efa:	6c 01       	movw	r12, r24
    6efc:	22 eb       	ldi	r18, 0xB2	; 178
    6efe:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6f00:	e1 2f       	mov	r30, r17
    6f02:	f0 e0       	ldi	r31, 0x00	; 0
    6f04:	ee 54       	subi	r30, 0x4E	; 78
    6f06:	f8 4f       	sbci	r31, 0xF8	; 248
    6f08:	1d c0       	rjmp	.+58     	; 0x6f44 <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6f0a:	c9 01       	movw	r24, r18
    6f0c:	83 70       	andi	r24, 0x03	; 3
    6f0e:	90 70       	andi	r25, 0x00	; 0
    6f10:	89 2b       	or	r24, r25
    6f12:	b1 f4       	brne	.+44     	; 0x6f40 <RTC_TimeToUTCSecs+0x84>
    6f14:	c9 01       	movw	r24, r18
    6f16:	64 e6       	ldi	r22, 0x64	; 100
    6f18:	70 e0       	ldi	r23, 0x00	; 0
    6f1a:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6f1e:	89 2b       	or	r24, r25
    6f20:	39 f4       	brne	.+14     	; 0x6f30 <RTC_TimeToUTCSecs+0x74>
    6f22:	c9 01       	movw	r24, r18
    6f24:	60 e9       	ldi	r22, 0x90	; 144
    6f26:	71 e0       	ldi	r23, 0x01	; 1
    6f28:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6f2c:	89 2b       	or	r24, r25
    6f2e:	41 f4       	brne	.+16     	; 0x6f40 <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6f30:	80 e8       	ldi	r24, 0x80	; 128
    6f32:	91 e5       	ldi	r25, 0x51	; 81
    6f34:	a1 e0       	ldi	r26, 0x01	; 1
    6f36:	b0 e0       	ldi	r27, 0x00	; 0
    6f38:	a8 0e       	add	r10, r24
    6f3a:	b9 1e       	adc	r11, r25
    6f3c:	ca 1e       	adc	r12, r26
    6f3e:	db 1e       	adc	r13, r27
    6f40:	2f 5f       	subi	r18, 0xFF	; 255
    6f42:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    6f44:	2e 17       	cp	r18, r30
    6f46:	3f 07       	cpc	r19, r31
    6f48:	01 f7       	brne	.-64     	; 0x6f0a <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6f4a:	d4 01       	movw	r26, r8
    6f4c:	16 96       	adiw	r26, 0x06	; 6
    6f4e:	8c 91       	ld	r24, X
    6f50:	48 2e       	mov	r4, r24
    6f52:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    6f54:	c9 01       	movw	r24, r18
    6f56:	64 e6       	ldi	r22, 0x64	; 100
    6f58:	70 e0       	ldi	r23, 0x00	; 0
    6f5a:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6f5e:	7c 01       	movw	r14, r24
    6f60:	c9 01       	movw	r24, r18
    6f62:	60 e9       	ldi	r22, 0x90	; 144
    6f64:	71 e0       	ldi	r23, 0x01	; 1
    6f66:	0e 94 23 5c 	call	0xb846	; 0xb846 <__divmodhi4>
    6f6a:	8c 01       	movw	r16, r24
    6f6c:	c1 e0       	ldi	r28, 0x01	; 1
    6f6e:	d0 e0       	ldi	r29, 0x00	; 0
    6f70:	93 e0       	ldi	r25, 0x03	; 3
    6f72:	69 2e       	mov	r6, r25
    6f74:	71 2c       	mov	r7, r1
    6f76:	62 22       	and	r6, r18
    6f78:	73 22       	and	r7, r19
    6f7a:	27 c0       	rjmp	.+78     	; 0x6fca <RTC_TimeToUTCSecs+0x10e>
    6f7c:	c2 30       	cpi	r28, 0x02	; 2
    6f7e:	d1 05       	cpc	r29, r1
    6f80:	91 f4       	brne	.+36     	; 0x6fa6 <RTC_TimeToUTCSecs+0xea>
    6f82:	61 14       	cp	r6, r1
    6f84:	71 04       	cpc	r7, r1
    6f86:	79 f4       	brne	.+30     	; 0x6fa6 <RTC_TimeToUTCSecs+0xea>
    6f88:	e1 14       	cp	r14, r1
    6f8a:	f1 04       	cpc	r15, r1
    6f8c:	19 f4       	brne	.+6      	; 0x6f94 <RTC_TimeToUTCSecs+0xd8>
    6f8e:	01 15       	cp	r16, r1
    6f90:	11 05       	cpc	r17, r1
    6f92:	49 f4       	brne	.+18     	; 0x6fa6 <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    6f94:	80 e8       	ldi	r24, 0x80	; 128
    6f96:	9b e3       	ldi	r25, 0x3B	; 59
    6f98:	a6 e2       	ldi	r26, 0x26	; 38
    6f9a:	b0 e0       	ldi	r27, 0x00	; 0
    6f9c:	a8 0e       	add	r10, r24
    6f9e:	b9 1e       	adc	r11, r25
    6fa0:	ca 1e       	adc	r12, r26
    6fa2:	db 1e       	adc	r13, r27
    6fa4:	11 c0       	rjmp	.+34     	; 0x6fc8 <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    6fa6:	fe 01       	movw	r30, r28
    6fa8:	e4 51       	subi	r30, 0x14	; 20
    6faa:	fd 4c       	sbci	r31, 0xCD	; 205
    6fac:	60 81       	ld	r22, Z
    6fae:	70 e0       	ldi	r23, 0x00	; 0
    6fb0:	80 e0       	ldi	r24, 0x00	; 0
    6fb2:	90 e0       	ldi	r25, 0x00	; 0
    6fb4:	20 e8       	ldi	r18, 0x80	; 128
    6fb6:	31 e5       	ldi	r19, 0x51	; 81
    6fb8:	41 e0       	ldi	r20, 0x01	; 1
    6fba:	50 e0       	ldi	r21, 0x00	; 0
    6fbc:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    6fc0:	a6 0e       	add	r10, r22
    6fc2:	b7 1e       	adc	r11, r23
    6fc4:	c8 1e       	adc	r12, r24
    6fc6:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6fc8:	21 96       	adiw	r28, 0x01	; 1
    6fca:	c4 15       	cp	r28, r4
    6fcc:	d5 05       	cpc	r29, r5
    6fce:	b4 f2       	brlt	.-84     	; 0x6f7c <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6fd0:	d4 01       	movw	r26, r8
    6fd2:	13 96       	adiw	r26, 0x03	; 3
    6fd4:	6c 91       	ld	r22, X
    6fd6:	70 e0       	ldi	r23, 0x00	; 0
    6fd8:	80 e0       	ldi	r24, 0x00	; 0
    6fda:	90 e0       	ldi	r25, 0x00	; 0
    6fdc:	20 e1       	ldi	r18, 0x10	; 16
    6fde:	3e e0       	ldi	r19, 0x0E	; 14
    6fe0:	40 e0       	ldi	r20, 0x00	; 0
    6fe2:	50 e0       	ldi	r21, 0x00	; 0
    6fe4:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    6fe8:	7b 01       	movw	r14, r22
    6fea:	8c 01       	movw	r16, r24
    6fec:	f4 01       	movw	r30, r8
    6fee:	62 81       	ldd	r22, Z+2	; 0x02
    6ff0:	70 e0       	ldi	r23, 0x00	; 0
    6ff2:	80 e0       	ldi	r24, 0x00	; 0
    6ff4:	90 e0       	ldi	r25, 0x00	; 0
    6ff6:	2c e3       	ldi	r18, 0x3C	; 60
    6ff8:	30 e0       	ldi	r19, 0x00	; 0
    6ffa:	40 e0       	ldi	r20, 0x00	; 0
    6ffc:	50 e0       	ldi	r21, 0x00	; 0
    6ffe:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    7002:	e6 0e       	add	r14, r22
    7004:	f7 1e       	adc	r15, r23
    7006:	08 1f       	adc	r16, r24
    7008:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    700a:	d4 01       	movw	r26, r8
    700c:	11 96       	adiw	r26, 0x01	; 1
    700e:	8c 91       	ld	r24, X
    7010:	11 97       	sbiw	r26, 0x01	; 1
    7012:	e8 0e       	add	r14, r24
    7014:	f1 1c       	adc	r15, r1
    7016:	01 1d       	adc	r16, r1
    7018:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    701a:	15 96       	adiw	r26, 0x05	; 5
    701c:	6c 91       	ld	r22, X
    701e:	70 e0       	ldi	r23, 0x00	; 0
    7020:	61 50       	subi	r22, 0x01	; 1
    7022:	70 40       	sbci	r23, 0x00	; 0
    7024:	88 27       	eor	r24, r24
    7026:	77 fd       	sbrc	r23, 7
    7028:	80 95       	com	r24
    702a:	98 2f       	mov	r25, r24
    702c:	20 e8       	ldi	r18, 0x80	; 128
    702e:	31 e5       	ldi	r19, 0x51	; 81
    7030:	41 e0       	ldi	r20, 0x01	; 1
    7032:	50 e0       	ldi	r21, 0x00	; 0
    7034:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    7038:	e6 0e       	add	r14, r22
    703a:	f7 1e       	adc	r15, r23
    703c:	08 1f       	adc	r16, r24
    703e:	19 1f       	adc	r17, r25
    7040:	ea 0c       	add	r14, r10
    7042:	fb 1c       	adc	r15, r11
    7044:	0c 1d       	adc	r16, r12
    7046:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    7048:	b7 01       	movw	r22, r14
    704a:	c8 01       	movw	r24, r16
    704c:	df 91       	pop	r29
    704e:	cf 91       	pop	r28
    7050:	1f 91       	pop	r17
    7052:	0f 91       	pop	r16
    7054:	ff 90       	pop	r15
    7056:	ef 90       	pop	r14
    7058:	df 90       	pop	r13
    705a:	cf 90       	pop	r12
    705c:	bf 90       	pop	r11
    705e:	af 90       	pop	r10
    7060:	9f 90       	pop	r9
    7062:	8f 90       	pop	r8
    7064:	7f 90       	pop	r7
    7066:	6f 90       	pop	r6
    7068:	5f 90       	pop	r5
    706a:	4f 90       	pop	r4
    706c:	08 95       	ret

0000706e <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    706e:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    7070:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    7072:	e0 ea       	ldi	r30, 0xA0	; 160
    7074:	f4 e0       	ldi	r31, 0x04	; 4
    7076:	46 83       	std	Z+6, r20	; 0x06
    7078:	fb 01       	movw	r30, r22
    707a:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    707c:	a0 ea       	ldi	r26, 0xA0	; 160
    707e:	b4 e0       	ldi	r27, 0x04	; 4
    7080:	0d c0       	rjmp	.+26     	; 0x709c <RTC_sendBytes+0x2e>
    7082:	80 91 a4 04 	lds	r24, 0x04A4
    7086:	86 ff       	sbrs	r24, 6
    7088:	fc cf       	rjmp	.-8      	; 0x7082 <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    708a:	80 91 a4 04 	lds	r24, 0x04A4
    708e:	84 fd       	sbrc	r24, 4
    7090:	07 c0       	rjmp	.+14     	; 0x70a0 <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    7092:	81 91       	ld	r24, Z+
    7094:	17 96       	adiw	r26, 0x07	; 7
    7096:	8c 93       	st	X, r24
    7098:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    709a:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    709c:	95 17       	cp	r25, r21
    709e:	88 f3       	brcs	.-30     	; 0x7082 <RTC_sendBytes+0x14>
    70a0:	08 95       	ret

000070a2 <RTC_setTime>:



} 

void RTC_setTime(void) {
    70a2:	df 93       	push	r29
    70a4:	cf 93       	push	r28
    70a6:	cd b7       	in	r28, 0x3d	; 61
    70a8:	de b7       	in	r29, 0x3e	; 62
    70aa:	29 97       	sbiw	r28, 0x09	; 9
    70ac:	cd bf       	out	0x3d, r28	; 61
    70ae:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    70b0:	50 91 3b 4f 	lds	r21, 0x4F3B
    70b4:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    70b6:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    70b8:	40 91 34 4f 	lds	r20, 0x4F34
    70bc:	84 2f       	mov	r24, r20
    70be:	6a e0       	ldi	r22, 0x0A	; 10
    70c0:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    70c4:	28 2f       	mov	r18, r24
    70c6:	30 e0       	ldi	r19, 0x00	; 0
    70c8:	b4 e0       	ldi	r27, 0x04	; 4
    70ca:	22 0f       	add	r18, r18
    70cc:	33 1f       	adc	r19, r19
    70ce:	ba 95       	dec	r27
    70d0:	e1 f7       	brne	.-8      	; 0x70ca <RTC_setTime+0x28>
    70d2:	84 2f       	mov	r24, r20
    70d4:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    70d8:	92 2b       	or	r25, r18
    70da:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    70dc:	40 91 35 4f 	lds	r20, 0x4F35
    70e0:	84 2f       	mov	r24, r20
    70e2:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    70e6:	28 2f       	mov	r18, r24
    70e8:	30 e0       	ldi	r19, 0x00	; 0
    70ea:	a4 e0       	ldi	r26, 0x04	; 4
    70ec:	22 0f       	add	r18, r18
    70ee:	33 1f       	adc	r19, r19
    70f0:	aa 95       	dec	r26
    70f2:	e1 f7       	brne	.-8      	; 0x70ec <RTC_setTime+0x4a>
    70f4:	84 2f       	mov	r24, r20
    70f6:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    70fa:	92 2b       	or	r25, r18
    70fc:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    70fe:	40 91 36 4f 	lds	r20, 0x4F36
    7102:	84 2f       	mov	r24, r20
    7104:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7108:	28 2f       	mov	r18, r24
    710a:	30 e0       	ldi	r19, 0x00	; 0
    710c:	f4 e0       	ldi	r31, 0x04	; 4
    710e:	22 0f       	add	r18, r18
    7110:	33 1f       	adc	r19, r19
    7112:	fa 95       	dec	r31
    7114:	e1 f7       	brne	.-8      	; 0x710e <RTC_setTime+0x6c>
    7116:	84 2f       	mov	r24, r20
    7118:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    711c:	92 2b       	or	r25, r18
    711e:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    7120:	30 91 37 4f 	lds	r19, 0x4F37
    7124:	83 2f       	mov	r24, r19
    7126:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    712a:	29 2f       	mov	r18, r25
    712c:	20 68       	ori	r18, 0x80	; 128
    712e:	83 2f       	mov	r24, r19
    7130:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7134:	82 95       	swap	r24
    7136:	80 7f       	andi	r24, 0xF0	; 240
    7138:	28 2b       	or	r18, r24
    713a:	85 2f       	mov	r24, r21
    713c:	64 e6       	ldi	r22, 0x64	; 100
    713e:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7142:	82 95       	swap	r24
    7144:	88 0f       	add	r24, r24
    7146:	88 0f       	add	r24, r24
    7148:	80 7c       	andi	r24, 0xC0	; 192
    714a:	28 2b       	or	r18, r24
    714c:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    714e:	80 91 38 4f 	lds	r24, 0x4F38
    7152:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    7154:	40 91 39 4f 	lds	r20, 0x4F39
    7158:	84 2f       	mov	r24, r20
    715a:	6a e0       	ldi	r22, 0x0A	; 10
    715c:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7160:	28 2f       	mov	r18, r24
    7162:	30 e0       	ldi	r19, 0x00	; 0
    7164:	e4 e0       	ldi	r30, 0x04	; 4
    7166:	22 0f       	add	r18, r18
    7168:	33 1f       	adc	r19, r19
    716a:	ea 95       	dec	r30
    716c:	e1 f7       	brne	.-8      	; 0x7166 <RTC_setTime+0xc4>
    716e:	84 2f       	mov	r24, r20
    7170:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7174:	92 2b       	or	r25, r18
    7176:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    7178:	40 91 3a 4f 	lds	r20, 0x4F3A
    717c:	84 2f       	mov	r24, r20
    717e:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7182:	28 2f       	mov	r18, r24
    7184:	30 e0       	ldi	r19, 0x00	; 0
    7186:	74 e0       	ldi	r23, 0x04	; 4
    7188:	22 0f       	add	r18, r18
    718a:	33 1f       	adc	r19, r19
    718c:	7a 95       	dec	r23
    718e:	e1 f7       	brne	.-8      	; 0x7188 <RTC_setTime+0xe6>
    7190:	84 2f       	mov	r24, r20
    7192:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    7196:	92 2b       	or	r25, r18
    7198:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    719a:	85 2f       	mov	r24, r21
    719c:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    71a0:	28 2f       	mov	r18, r24
    71a2:	30 e0       	ldi	r19, 0x00	; 0
    71a4:	44 e0       	ldi	r20, 0x04	; 4
    71a6:	22 0f       	add	r18, r18
    71a8:	33 1f       	adc	r19, r19
    71aa:	4a 95       	dec	r20
    71ac:	e1 f7       	brne	.-8      	; 0x71a6 <RTC_setTime+0x104>
    71ae:	85 2f       	mov	r24, r21
    71b0:	0e 94 03 5c 	call	0xb806	; 0xb806 <__udivmodqi4>
    71b4:	92 2b       	or	r25, r18
    71b6:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    71b8:	89 e0       	ldi	r24, 0x09	; 9
    71ba:	be 01       	movw	r22, r28
    71bc:	6f 5f       	subi	r22, 0xFF	; 255
    71be:	7f 4f       	sbci	r23, 0xFF	; 255
    71c0:	40 ed       	ldi	r20, 0xD0	; 208
    71c2:	0e 94 37 38 	call	0x706e	; 0x706e <RTC_sendBytes>
}
    71c6:	29 96       	adiw	r28, 0x09	; 9
    71c8:	cd bf       	out	0x3d, r28	; 61
    71ca:	de bf       	out	0x3e, r29	; 62
    71cc:	cf 91       	pop	r28
    71ce:	df 91       	pop	r29
    71d0:	08 95       	ret

000071d2 <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    71d2:	44 e3       	ldi	r20, 0x34	; 52
    71d4:	5f e4       	ldi	r21, 0x4F	; 79
    71d6:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <RTC_UTCSecsToTime>
	RTC_setTime();
    71da:	0e 94 51 38 	call	0x70a2	; 0x70a2 <RTC_setTime>
}
    71de:	08 95       	ret

000071e0 <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    71e0:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    71e2:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    71e4:	e0 ea       	ldi	r30, 0xA0	; 160
    71e6:	f4 e0       	ldi	r31, 0x04	; 4
    71e8:	46 83       	std	Z+6, r20	; 0x06
    71ea:	fb 01       	movw	r30, r22
    71ec:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    71ee:	a0 ea       	ldi	r26, 0xA0	; 160
    71f0:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    71f2:	22 e0       	ldi	r18, 0x02	; 2
    71f4:	0b c0       	rjmp	.+22     	; 0x720c <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    71f6:	80 91 a4 04 	lds	r24, 0x04A4
    71fa:	87 ff       	sbrs	r24, 7
    71fc:	fc cf       	rjmp	.-8      	; 0x71f6 <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    71fe:	80 91 a7 04 	lds	r24, 0x04A7
    7202:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    7204:	13 96       	adiw	r26, 0x03	; 3
    7206:	2c 93       	st	X, r18
    7208:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    720a:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    720c:	95 17       	cp	r25, r21
    720e:	98 f3       	brcs	.-26     	; 0x71f6 <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    7210:	87 e0       	ldi	r24, 0x07	; 7
    7212:	e0 ea       	ldi	r30, 0xA0	; 160
    7214:	f4 e0       	ldi	r31, 0x04	; 4
    7216:	83 83       	std	Z+3, r24	; 0x03

}
    7218:	08 95       	ret

0000721a <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    721a:	0f 93       	push	r16
    721c:	1f 93       	push	r17
    721e:	df 93       	push	r29
    7220:	cf 93       	push	r28
    7222:	cd b7       	in	r28, 0x3d	; 61
    7224:	de b7       	in	r29, 0x3e	; 62
    7226:	28 97       	sbiw	r28, 0x08	; 8
    7228:	cd bf       	out	0x3d, r28	; 61
    722a:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    722c:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    722e:	81 e0       	ldi	r24, 0x01	; 1
    7230:	8e 01       	movw	r16, r28
    7232:	0f 5f       	subi	r16, 0xFF	; 255
    7234:	1f 4f       	sbci	r17, 0xFF	; 255
    7236:	b8 01       	movw	r22, r16
    7238:	40 ed       	ldi	r20, 0xD0	; 208
    723a:	0e 94 37 38 	call	0x706e	; 0x706e <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    723e:	88 e0       	ldi	r24, 0x08	; 8
    7240:	b8 01       	movw	r22, r16
    7242:	40 ed       	ldi	r20, 0xD0	; 208
    7244:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    7248:	49 81       	ldd	r20, Y+1	; 0x01
    724a:	84 2f       	mov	r24, r20
    724c:	82 95       	swap	r24
    724e:	8f 70       	andi	r24, 0x0F	; 15
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	9c 01       	movw	r18, r24
    7254:	63 e0       	ldi	r22, 0x03	; 3
    7256:	22 0f       	add	r18, r18
    7258:	33 1f       	adc	r19, r19
    725a:	6a 95       	dec	r22
    725c:	e1 f7       	brne	.-8      	; 0x7256 <RTC_getTime+0x3c>
    725e:	88 0f       	add	r24, r24
    7260:	99 1f       	adc	r25, r25
    7262:	28 0f       	add	r18, r24
    7264:	39 1f       	adc	r19, r25
    7266:	4f 70       	andi	r20, 0x0F	; 15
    7268:	42 0f       	add	r20, r18
    726a:	40 93 34 4f 	sts	0x4F34, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    726e:	4a 81       	ldd	r20, Y+2	; 0x02
    7270:	84 2f       	mov	r24, r20
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	80 77       	andi	r24, 0x70	; 112
    7276:	90 70       	andi	r25, 0x00	; 0
    7278:	24 e0       	ldi	r18, 0x04	; 4
    727a:	95 95       	asr	r25
    727c:	87 95       	ror	r24
    727e:	2a 95       	dec	r18
    7280:	e1 f7       	brne	.-8      	; 0x727a <RTC_getTime+0x60>
    7282:	9c 01       	movw	r18, r24
    7284:	03 e0       	ldi	r16, 0x03	; 3
    7286:	22 0f       	add	r18, r18
    7288:	33 1f       	adc	r19, r19
    728a:	0a 95       	dec	r16
    728c:	e1 f7       	brne	.-8      	; 0x7286 <RTC_getTime+0x6c>
    728e:	88 0f       	add	r24, r24
    7290:	99 1f       	adc	r25, r25
    7292:	28 0f       	add	r18, r24
    7294:	39 1f       	adc	r19, r25
    7296:	4f 70       	andi	r20, 0x0F	; 15
    7298:	42 0f       	add	r20, r18
    729a:	40 93 35 4f 	sts	0x4F35, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    729e:	4b 81       	ldd	r20, Y+3	; 0x03
    72a0:	84 2f       	mov	r24, r20
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	80 77       	andi	r24, 0x70	; 112
    72a6:	90 70       	andi	r25, 0x00	; 0
    72a8:	b4 e0       	ldi	r27, 0x04	; 4
    72aa:	95 95       	asr	r25
    72ac:	87 95       	ror	r24
    72ae:	ba 95       	dec	r27
    72b0:	e1 f7       	brne	.-8      	; 0x72aa <RTC_getTime+0x90>
    72b2:	9c 01       	movw	r18, r24
    72b4:	a3 e0       	ldi	r26, 0x03	; 3
    72b6:	22 0f       	add	r18, r18
    72b8:	33 1f       	adc	r19, r19
    72ba:	aa 95       	dec	r26
    72bc:	e1 f7       	brne	.-8      	; 0x72b6 <RTC_getTime+0x9c>
    72be:	88 0f       	add	r24, r24
    72c0:	99 1f       	adc	r25, r25
    72c2:	28 0f       	add	r18, r24
    72c4:	39 1f       	adc	r19, r25
    72c6:	4f 70       	andi	r20, 0x0F	; 15
    72c8:	42 0f       	add	r20, r18
    72ca:	40 93 36 4f 	sts	0x4F36, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    72ce:	4c 81       	ldd	r20, Y+4	; 0x04
    72d0:	64 2f       	mov	r22, r20
    72d2:	70 e0       	ldi	r23, 0x00	; 0
    72d4:	cb 01       	movw	r24, r22
    72d6:	80 73       	andi	r24, 0x30	; 48
    72d8:	90 70       	andi	r25, 0x00	; 0
    72da:	e4 e0       	ldi	r30, 0x04	; 4
    72dc:	95 95       	asr	r25
    72de:	87 95       	ror	r24
    72e0:	ea 95       	dec	r30
    72e2:	e1 f7       	brne	.-8      	; 0x72dc <RTC_getTime+0xc2>
    72e4:	9c 01       	movw	r18, r24
    72e6:	53 e0       	ldi	r21, 0x03	; 3
    72e8:	22 0f       	add	r18, r18
    72ea:	33 1f       	adc	r19, r19
    72ec:	5a 95       	dec	r21
    72ee:	e1 f7       	brne	.-8      	; 0x72e8 <RTC_getTime+0xce>
    72f0:	88 0f       	add	r24, r24
    72f2:	99 1f       	adc	r25, r25
    72f4:	28 0f       	add	r18, r24
    72f6:	39 1f       	adc	r19, r25
    72f8:	4f 70       	andi	r20, 0x0F	; 15
    72fa:	42 0f       	add	r20, r18
    72fc:	40 93 37 4f 	sts	0x4F37, r20
	time.Wday = timeData[4];
    7300:	8d 81       	ldd	r24, Y+5	; 0x05
    7302:	80 93 38 4f 	sts	0x4F38, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    7306:	4e 81       	ldd	r20, Y+6	; 0x06
    7308:	84 2f       	mov	r24, r20
    730a:	90 e0       	ldi	r25, 0x00	; 0
    730c:	80 73       	andi	r24, 0x30	; 48
    730e:	90 70       	andi	r25, 0x00	; 0
    7310:	14 e0       	ldi	r17, 0x04	; 4
    7312:	95 95       	asr	r25
    7314:	87 95       	ror	r24
    7316:	1a 95       	dec	r17
    7318:	e1 f7       	brne	.-8      	; 0x7312 <RTC_getTime+0xf8>
    731a:	9c 01       	movw	r18, r24
    731c:	b3 e0       	ldi	r27, 0x03	; 3
    731e:	22 0f       	add	r18, r18
    7320:	33 1f       	adc	r19, r19
    7322:	ba 95       	dec	r27
    7324:	e1 f7       	brne	.-8      	; 0x731e <RTC_getTime+0x104>
    7326:	88 0f       	add	r24, r24
    7328:	99 1f       	adc	r25, r25
    732a:	28 0f       	add	r18, r24
    732c:	39 1f       	adc	r19, r25
    732e:	4f 70       	andi	r20, 0x0F	; 15
    7330:	42 0f       	add	r20, r18
    7332:	40 93 39 4f 	sts	0x4F39, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    7336:	4f 81       	ldd	r20, Y+7	; 0x07
    7338:	84 2f       	mov	r24, r20
    733a:	90 e0       	ldi	r25, 0x00	; 0
    733c:	80 71       	andi	r24, 0x10	; 16
    733e:	90 70       	andi	r25, 0x00	; 0
    7340:	f4 e0       	ldi	r31, 0x04	; 4
    7342:	95 95       	asr	r25
    7344:	87 95       	ror	r24
    7346:	fa 95       	dec	r31
    7348:	e1 f7       	brne	.-8      	; 0x7342 <RTC_getTime+0x128>
    734a:	9c 01       	movw	r18, r24
    734c:	e3 e0       	ldi	r30, 0x03	; 3
    734e:	22 0f       	add	r18, r18
    7350:	33 1f       	adc	r19, r19
    7352:	ea 95       	dec	r30
    7354:	e1 f7       	brne	.-8      	; 0x734e <RTC_getTime+0x134>
    7356:	88 0f       	add	r24, r24
    7358:	99 1f       	adc	r25, r25
    735a:	28 0f       	add	r18, r24
    735c:	39 1f       	adc	r19, r25
    735e:	4f 70       	andi	r20, 0x0F	; 15
    7360:	42 0f       	add	r20, r18
    7362:	40 93 3a 4f 	sts	0x4F3A, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    7366:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    7368:	42 2f       	mov	r20, r18
    736a:	4f 70       	andi	r20, 0x0F	; 15
    736c:	42 5e       	subi	r20, 0xE2	; 226
    736e:	60 75       	andi	r22, 0x50	; 80
    7370:	70 70       	andi	r23, 0x00	; 0
    7372:	86 e0       	ldi	r24, 0x06	; 6
    7374:	75 95       	asr	r23
    7376:	67 95       	ror	r22
    7378:	8a 95       	dec	r24
    737a:	e1 f7       	brne	.-8      	; 0x7374 <RTC_getTime+0x15a>
    737c:	84 e6       	ldi	r24, 0x64	; 100
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	fc 01       	movw	r30, r24
    7382:	6e 9f       	mul	r22, r30
    7384:	c0 01       	movw	r24, r0
    7386:	6f 9f       	mul	r22, r31
    7388:	90 0d       	add	r25, r0
    738a:	7e 9f       	mul	r23, r30
    738c:	90 0d       	add	r25, r0
    738e:	11 24       	eor	r1, r1
    7390:	48 0f       	add	r20, r24
    7392:	22 95       	swap	r18
    7394:	2f 70       	andi	r18, 0x0F	; 15
    7396:	30 e0       	ldi	r19, 0x00	; 0
    7398:	c9 01       	movw	r24, r18
    739a:	03 e0       	ldi	r16, 0x03	; 3
    739c:	88 0f       	add	r24, r24
    739e:	99 1f       	adc	r25, r25
    73a0:	0a 95       	dec	r16
    73a2:	e1 f7       	brne	.-8      	; 0x739c <RTC_getTime+0x182>
    73a4:	22 0f       	add	r18, r18
    73a6:	33 1f       	adc	r19, r19
    73a8:	82 0f       	add	r24, r18
    73aa:	93 1f       	adc	r25, r19
    73ac:	48 0f       	add	r20, r24
    73ae:	40 93 3b 4f 	sts	0x4F3B, r20




} 
    73b2:	28 96       	adiw	r28, 0x08	; 8
    73b4:	cd bf       	out	0x3d, r28	; 61
    73b6:	de bf       	out	0x3e, r29	; 62
    73b8:	cf 91       	pop	r28
    73ba:	df 91       	pop	r29
    73bc:	1f 91       	pop	r17
    73be:	0f 91       	pop	r16
    73c0:	08 95       	ret

000073c2 <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    73c2:	0e 94 0d 39 	call	0x721a	; 0x721a <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    73c6:	84 e3       	ldi	r24, 0x34	; 52
    73c8:	9f e4       	ldi	r25, 0x4F	; 79
    73ca:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    73ce:	08 95       	ret

000073d0 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    73d0:	0f 93       	push	r16
    73d2:	df 93       	push	r29
    73d4:	cf 93       	push	r28
    73d6:	0f 92       	push	r0
    73d8:	cd b7       	in	r28, 0x3d	; 61
    73da:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    73dc:	80 ec       	ldi	r24, 0xC0	; 192
    73de:	e0 e5       	ldi	r30, 0x50	; 80
    73e0:	f0 e0       	ldi	r31, 0x00	; 0
    73e2:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    73e4:	80 91 50 00 	lds	r24, 0x0050
    73e8:	88 60       	ori	r24, 0x08	; 8
    73ea:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    73ee:	80 91 51 00 	lds	r24, 0x0051
    73f2:	83 ff       	sbrs	r24, 3
    73f4:	fc cf       	rjmp	.-8      	; 0x73ee <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    73f6:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    73fa:	8f b7       	in	r24, 0x3f	; 63
    73fc:	89 83       	std	Y+1, r24	; 0x01
    cli();
    73fe:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7400:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7402:	28 7f       	andi	r18, 0xF8	; 248
    7404:	23 60       	ori	r18, 0x03	; 3
    7406:	80 e4       	ldi	r24, 0x40	; 64
    7408:	90 e0       	ldi	r25, 0x00	; 0
    740a:	fc 01       	movw	r30, r24
    740c:	08 ed       	ldi	r16, 0xD8	; 216
    740e:	04 bf       	out	0x34, r16	; 52
    7410:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    7412:	89 81       	ldd	r24, Y+1	; 0x01
    7414:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    7416:	80 91 50 00 	lds	r24, 0x0050
    741a:	8e 7f       	andi	r24, 0xFE	; 254
    741c:	80 93 50 00 	sts	0x0050, r24
}
    7420:	0f 90       	pop	r0
    7422:	cf 91       	pop	r28
    7424:	df 91       	pop	r29
    7426:	0f 91       	pop	r16
    7428:	08 95       	ret

0000742a <Disable_JTAG>:

void Disable_JTAG(void){
    742a:	0f 93       	push	r16
    742c:	df 93       	push	r29
    742e:	cf 93       	push	r28
    7430:	0f 92       	push	r0
    7432:	cd b7       	in	r28, 0x3d	; 61
    7434:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    7436:	8f b7       	in	r24, 0x3f	; 63
    7438:	89 83       	std	Y+1, r24	; 0x01
    cli();
    743a:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    743c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    743e:	21 e0       	ldi	r18, 0x01	; 1
    7440:	86 e9       	ldi	r24, 0x96	; 150
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	fc 01       	movw	r30, r24
    7446:	08 ed       	ldi	r16, 0xD8	; 216
    7448:	04 bf       	out	0x34, r16	; 52
    744a:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    744c:	89 81       	ldd	r24, Y+1	; 0x01
    744e:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    7450:	0f 90       	pop	r0
    7452:	cf 91       	pop	r28
    7454:	df 91       	pop	r29
    7456:	0f 91       	pop	r16
    7458:	08 95       	ret

0000745a <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    745a:	e0 e0       	ldi	r30, 0x00	; 0
    745c:	f1 e0       	ldi	r31, 0x01	; 1
    745e:	80 81       	ld	r24, Z
    7460:	80 68       	ori	r24, 0x80	; 128
    7462:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
    7464:	82 89       	ldd	r24, Z+18	; 0x12
    7466:	85 60       	ori	r24, 0x05	; 5
    7468:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    746a:	8b e8       	ldi	r24, 0x8B	; 139
    746c:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    746e:	80 e0       	ldi	r24, 0x00	; 0
    7470:	94 e0       	ldi	r25, 0x04	; 4
    7472:	84 8b       	std	Z+20, r24	; 0x14
    7474:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    7476:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    7478:	80 ea       	ldi	r24, 0xA0	; 160
    747a:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    747c:	8a e0       	ldi	r24, 0x0A	; 10
    747e:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    7480:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    7482:	81 e1       	ldi	r24, 0x11	; 17
    7484:	9d e3       	ldi	r25, 0x3D	; 61
    7486:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    7488:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    748a:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    748c:	80 89       	ldd	r24, Z+16	; 0x10
    748e:	84 6a       	ori	r24, 0xA4	; 164
    7490:	80 8b       	std	Z+16, r24	; 0x10
		
}
    7492:	08 95       	ret

00007494 <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    7494:	e0 ea       	ldi	r30, 0xA0	; 160
    7496:	f0 e0       	ldi	r31, 0x00	; 0
    7498:	82 81       	ldd	r24, Z+2	; 0x02
    749a:	87 60       	ori	r24, 0x07	; 7
    749c:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    749e:	78 94       	sei
}
    74a0:	08 95       	ret

000074a2 <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 1440
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	TCD0.PER = 1440;
    74a2:	e0 e0       	ldi	r30, 0x00	; 0
    74a4:	f9 e0       	ldi	r31, 0x09	; 9
    74a6:	80 ea       	ldi	r24, 0xA0	; 160
    74a8:	95 e0       	ldi	r25, 0x05	; 5
    74aa:	86 a3       	std	Z+38, r24	; 0x26
    74ac:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    74ae:	80 81       	ld	r24, Z
    74b0:	80 7f       	andi	r24, 0xF0	; 240
    74b2:	87 60       	ori	r24, 0x07	; 7
    74b4:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    74b6:	86 81       	ldd	r24, Z+6	; 0x06
    74b8:	8c 7f       	andi	r24, 0xFC	; 252
    74ba:	81 60       	ori	r24, 0x01	; 1
    74bc:	86 83       	std	Z+6, r24	; 0x06
}
    74be:	08 95       	ret

000074c0 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    74c0:	e0 e4       	ldi	r30, 0x40	; 64
    74c2:	fa e0       	ldi	r31, 0x0A	; 10
    74c4:	80 e0       	ldi	r24, 0x00	; 0
    74c6:	99 e0       	ldi	r25, 0x09	; 9
    74c8:	86 a3       	std	Z+38, r24	; 0x26
    74ca:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    74cc:	80 81       	ld	r24, Z
    74ce:	80 7f       	andi	r24, 0xF0	; 240
    74d0:	85 60       	ori	r24, 0x05	; 5
    74d2:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    74d4:	86 81       	ldd	r24, Z+6	; 0x06
    74d6:	8c 7f       	andi	r24, 0xFC	; 252
    74d8:	82 60       	ori	r24, 0x02	; 2
    74da:	86 83       	std	Z+6, r24	; 0x06

}
    74dc:	08 95       	ret

000074de <SD_WriteRTCBlock>:
	    okToGetRemainingSpace = false;
	}
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    74de:	af 92       	push	r10
    74e0:	bf 92       	push	r11
    74e2:	cf 92       	push	r12
    74e4:	df 92       	push	r13
    74e6:	ef 92       	push	r14
    74e8:	ff 92       	push	r15
    74ea:	0f 93       	push	r16
    74ec:	1f 93       	push	r17
    74ee:	7b 01       	movw	r14, r22
    74f0:	8c 01       	movw	r16, r24
    74f2:	59 01       	movw	r10, r18
    74f4:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    74f6:	8f ef       	ldi	r24, 0xFF	; 255
    74f8:	9f ef       	ldi	r25, 0xFF	; 255
    74fa:	af ef       	ldi	r26, 0xFF	; 255
    74fc:	bf ef       	ldi	r27, 0xFF	; 255
    74fe:	80 93 14 57 	sts	0x5714, r24
    7502:	90 93 15 57 	sts	0x5715, r25
    7506:	a0 93 16 57 	sts	0x5716, r26
    750a:	b0 93 17 57 	sts	0x5717, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    750e:	6c e4       	ldi	r22, 0x4C	; 76
    7510:	74 e7       	ldi	r23, 0x74	; 116
    7512:	8e ed       	ldi	r24, 0xDE	; 222
    7514:	90 eb       	ldi	r25, 0xB0	; 176
    7516:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(27);				// record size  
    751a:	6b e1       	ldi	r22, 0x1B	; 27
    751c:	70 e0       	ldi	r23, 0x00	; 0
    751e:	80 e0       	ldi	r24, 0x00	; 0
    7520:	90 e0       	ldi	r25, 0x00	; 0
    7522:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(2); 		// record type  
    7526:	82 e0       	ldi	r24, 0x02	; 2
    7528:	90 e0       	ldi	r25, 0x00	; 0
    752a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    752e:	c8 01       	movw	r24, r16
    7530:	b7 01       	movw	r22, r14
    7532:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    7536:	c6 01       	movw	r24, r12
    7538:	b5 01       	movw	r22, r10
    753a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write8(0);
    753e:	80 e0       	ldi	r24, 0x00	; 0
    7540:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    7544:	60 e0       	ldi	r22, 0x00	; 0
    7546:	70 e0       	ldi	r23, 0x00	; 0
    7548:	80 e0       	ldi	r24, 0x00	; 0
    754a:	90 e0       	ldi	r25, 0x00	; 0
    754c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_WriteCRC();			      // CRC			
    7550:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>
		
	f_sync(&Log_File);
    7554:	8c e3       	ldi	r24, 0x3C	; 60
    7556:	9f e4       	ldi	r25, 0x4F	; 79
    7558:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    755c:	1f 91       	pop	r17
    755e:	0f 91       	pop	r16
    7560:	ff 90       	pop	r15
    7562:	ef 90       	pop	r14
    7564:	df 90       	pop	r13
    7566:	cf 90       	pop	r12
    7568:	bf 90       	pop	r11
    756a:	af 90       	pop	r10
    756c:	08 95       	ret

0000756e <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    756e:	20 91 8b 33 	lds	r18, 0x338B
    7572:	30 91 8c 33 	lds	r19, 0x338C
    7576:	80 91 89 33 	lds	r24, 0x3389
    757a:	90 91 8a 33 	lds	r25, 0x338A
    757e:	28 17       	cp	r18, r24
    7580:	39 07       	cpc	r19, r25
    7582:	51 f4       	brne	.+20     	; 0x7598 <Rs232_To_Debug+0x2a>
    7584:	f4 cf       	rjmp	.-24     	; 0x756e <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7586:	80 91 a1 08 	lds	r24, 0x08A1
    758a:	85 ff       	sbrs	r24, 5
    758c:	fc cf       	rjmp	.-8      	; 0x7586 <Rs232_To_Debug+0x18>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    758e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7592:	90 93 a0 08 	sts	0x08A0, r25
    7596:	eb cf       	rjmp	.-42     	; 0x756e <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    7598:	81 e0       	ldi	r24, 0x01	; 1
    759a:	0e 94 cd 03 	call	0x79a	; 0x79a <Rs232_GetByte>
    759e:	98 2f       	mov	r25, r24
    75a0:	f2 cf       	rjmp	.-28     	; 0x7586 <Rs232_To_Debug+0x18>

000075a2 <getDeviceID>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75a2:	82 e0       	ldi	r24, 0x02	; 2
    75a4:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75a8:	e8 e0       	ldi	r30, 0x08	; 8
    75aa:	f0 e0       	ldi	r31, 0x00	; 0
    75ac:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75ae:	10 92 ca 01 	sts	0x01CA, r1
	
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    75b2:	e0 93 8e 4a 	sts	0x4A8E, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75b6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75ba:	e9 e0       	ldi	r30, 0x09	; 9
    75bc:	f0 e0       	ldi	r31, 0x00	; 0
    75be:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75c0:	10 92 ca 01 	sts	0x01CA, r1
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
    75c4:	e0 93 8f 4a 	sts	0x4A8F, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75c8:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75cc:	ea e0       	ldi	r30, 0x0A	; 10
    75ce:	f0 e0       	ldi	r31, 0x00	; 0
    75d0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75d2:	10 92 ca 01 	sts	0x01CA, r1
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
    75d6:	e0 93 90 4a 	sts	0x4A90, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75da:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75de:	eb e0       	ldi	r30, 0x0B	; 11
    75e0:	f0 e0       	ldi	r31, 0x00	; 0
    75e2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75e4:	10 92 ca 01 	sts	0x01CA, r1

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
    75e8:	e0 93 91 4a 	sts	0x4A91, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75ec:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75f0:	ec e0       	ldi	r30, 0x0C	; 12
    75f2:	f0 e0       	ldi	r31, 0x00	; 0
    75f4:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75f6:	10 92 ca 01 	sts	0x01CA, r1
void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
    75fa:	e0 93 92 4a 	sts	0x4A92, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75fe:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7602:	ed e0       	ldi	r30, 0x0D	; 13
    7604:	f0 e0       	ldi	r31, 0x00	; 0
    7606:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7608:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
    760c:	e0 93 93 4a 	sts	0x4A93, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7610:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7614:	e0 e1       	ldi	r30, 0x10	; 16
    7616:	f0 e0       	ldi	r31, 0x00	; 0
    7618:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    761a:	10 92 ca 01 	sts	0x01CA, r1
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
    761e:	e0 93 94 4a 	sts	0x4A94, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7622:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7626:	e2 e1       	ldi	r30, 0x12	; 18
    7628:	f0 e0       	ldi	r31, 0x00	; 0
    762a:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    762c:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
    7630:	e0 93 95 4a 	sts	0x4A95, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7634:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7638:	e3 e1       	ldi	r30, 0x13	; 19
    763a:	f0 e0       	ldi	r31, 0x00	; 0
    763c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    763e:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
    7642:	e0 93 96 4a 	sts	0x4A96, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7646:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    764a:	e4 e1       	ldi	r30, 0x14	; 20
    764c:	f0 e0       	ldi	r31, 0x00	; 0
    764e:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7650:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
    7654:	e0 93 97 4a 	sts	0x4A97, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7658:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    765c:	e5 e1       	ldi	r30, 0x15	; 21
    765e:	f0 e0       	ldi	r31, 0x00	; 0
    7660:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7662:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
    7666:	e0 93 98 4a 	sts	0x4A98, r30
	deviceID[11] = '\0';
    766a:	10 92 99 4a 	sts	0x4A99, r1
    766e:	ee e8       	ldi	r30, 0x8E	; 142
    7670:	fa e4       	ldi	r31, 0x4A	; 74
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
    7672:	91 e0       	ldi	r25, 0x01	; 1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
    7674:	80 81       	ld	r24, Z
    7676:	88 23       	and	r24, r24
    7678:	09 f4       	brne	.+2      	; 0x767c <getDeviceID+0xda>
	       deviceID[i] += 1;
    767a:	90 83       	st	Z, r25
    767c:	31 96       	adiw	r30, 0x01	; 1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
    767e:	8a e4       	ldi	r24, 0x4A	; 74
    7680:	e9 39       	cpi	r30, 0x99	; 153
    7682:	f8 07       	cpc	r31, r24
    7684:	b9 f7       	brne	.-18     	; 0x7674 <getDeviceID+0xd2>
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
	    }
	}
}
    7686:	08 95       	ret

00007688 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7688:	aa ec       	ldi	r26, 0xCA	; 202
    768a:	b1 e0       	ldi	r27, 0x01	; 1
    768c:	92 e0       	ldi	r25, 0x02	; 2
    768e:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    7690:	e8 2f       	mov	r30, r24
    7692:	f0 e0       	ldi	r31, 0x00	; 0
    7694:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7696:	1c 92       	st	X, r1

	return result;
}
    7698:	8e 2f       	mov	r24, r30
    769a:	08 95       	ret

0000769c <Uploader_ClearBuffer>:



void Uploader_ClearBuffer(void){
      if(useWifiForUploading){
    769c:	80 91 6d 33 	lds	r24, 0x336D
    76a0:	88 23       	and	r24, r24
    76a2:	19 f0       	breq	.+6      	; 0x76aa <Uploader_ClearBuffer+0xe>
        Wifi_ClearBuffer();
    76a4:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
    76a8:	08 95       	ret
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
    76aa:	80 91 6e 33 	lds	r24, 0x336E
    76ae:	90 91 6f 33 	lds	r25, 0x336F
    76b2:	80 93 70 33 	sts	0x3370, r24
    76b6:	90 93 71 33 	sts	0x3371, r25
    76ba:	08 95       	ret

000076bc <Uploader_GetByte>:
    } else {
        Debug_SendString(string,CR);
    }
}

uint8_t Uploader_GetByte(bool blocking){
    76bc:	98 2f       	mov	r25, r24
    if(useWifiForUploading){
    76be:	80 91 6d 33 	lds	r24, 0x336D
    76c2:	88 23       	and	r24, r24
    76c4:	51 f0       	breq	.+20     	; 0x76da <Uploader_GetByte+0x1e>
        if(blocking){
    76c6:	99 23       	and	r25, r25
    76c8:	21 f0       	breq	.+8      	; 0x76d2 <Uploader_GetByte+0x16>
		    while(!Wifi_CharReadyToRead());
    76ca:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    76ce:	88 23       	and	r24, r24
    76d0:	e1 f3       	breq	.-8      	; 0x76ca <Uploader_GetByte+0xe>
	    }
        return Wifi_GetByte(false);
    76d2:	80 e0       	ldi	r24, 0x00	; 0
    76d4:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    76d8:	08 95       	ret
    } else {
        if(blocking){
    76da:	99 23       	and	r25, r25
    76dc:	59 f0       	breq	.+22     	; 0x76f4 <Uploader_GetByte+0x38>
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    76de:	20 91 70 33 	lds	r18, 0x3370
    76e2:	30 91 71 33 	lds	r19, 0x3371
    76e6:	80 91 6e 33 	lds	r24, 0x336E
    76ea:	90 91 6f 33 	lds	r25, 0x336F
    76ee:	28 17       	cp	r18, r24
    76f0:	39 07       	cpc	r19, r25
    76f2:	a9 f3       	breq	.-22     	; 0x76de <Uploader_GetByte+0x22>
		    while(!Debug_CharReadyToRead());
	    }
        return Debug_GetByte(false);
    76f4:	80 e0       	ldi	r24, 0x00	; 0
    76f6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
    }
}
    76fa:	08 95       	ret

000076fc <Uploader_CharReadyToRead>:

bool Uploader_CharReadyToRead(void){
    if(useWifiForUploading){
    76fc:	80 91 6d 33 	lds	r24, 0x336D
    7700:	88 23       	and	r24, r24
    7702:	21 f0       	breq	.+8      	; 0x770c <Uploader_CharReadyToRead+0x10>
        return Wifi_CharReadyToRead();
    7704:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    7708:	48 2f       	mov	r20, r24
    770a:	0d c0       	rjmp	.+26     	; 0x7726 <Uploader_CharReadyToRead+0x2a>
    770c:	20 91 70 33 	lds	r18, 0x3370
    7710:	30 91 71 33 	lds	r19, 0x3371
    7714:	80 91 6e 33 	lds	r24, 0x336E
    7718:	90 91 6f 33 	lds	r25, 0x336F
    771c:	40 e0       	ldi	r20, 0x00	; 0
    771e:	28 17       	cp	r18, r24
    7720:	39 07       	cpc	r19, r25
    7722:	09 f0       	breq	.+2      	; 0x7726 <Uploader_CharReadyToRead+0x2a>
    7724:	41 e0       	ldi	r20, 0x01	; 1
    } else {
        return Debug_CharReadyToRead();
    }
}
    7726:	84 2f       	mov	r24, r20
    7728:	08 95       	ret

0000772a <Uploader_Connected>:

bool Uploader_Connected(uint16_t timeOut){
    772a:	9c 01       	movw	r18, r24
    if(useWifiForUploading){
    772c:	80 91 6d 33 	lds	r24, 0x336D
    7730:	88 23       	and	r24, r24
    7732:	21 f0       	breq	.+8      	; 0x773c <Uploader_Connected+0x12>
        return Wifi_Connected(timeOut);
    7734:	c9 01       	movw	r24, r18
    7736:	0e 94 41 03 	call	0x682	; 0x682 <Wifi_Connected>
    773a:	08 95       	ret
    } else {
        return Debug_Connected(timeOut);
    773c:	c9 01       	movw	r24, r18
    773e:	0e 94 26 02 	call	0x44c	; 0x44c <Debug_Connected>
    }
    7742:	08 95       	ret

00007744 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    7744:	ef 92       	push	r14
    7746:	ff 92       	push	r15
    7748:	0f 93       	push	r16
    774a:	1f 93       	push	r17
    774c:	cf 93       	push	r28
    774e:	df 93       	push	r29
    7750:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    7752:	6c e3       	ldi	r22, 0x3C	; 60
    7754:	7f e4       	ldi	r23, 0x4F	; 79
    7756:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
    775a:	60 e0       	ldi	r22, 0x00	; 0
    775c:	70 e0       	ldi	r23, 0x00	; 0
    775e:	3b c0       	rjmp	.+118    	; 0x77d6 <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7760:	e0 90 14 57 	lds	r14, 0x5714
    7764:	f0 90 15 57 	lds	r15, 0x5715
    7768:	00 91 16 57 	lds	r16, 0x5716
    776c:	10 91 17 57 	lds	r17, 0x5717
    7770:	20 91 14 57 	lds	r18, 0x5714
    7774:	30 91 15 57 	lds	r19, 0x5715
    7778:	40 91 16 57 	lds	r20, 0x5716
    777c:	50 91 17 57 	lds	r21, 0x5717
    7780:	30 70       	andi	r19, 0x00	; 0
    7782:	40 70       	andi	r20, 0x00	; 0
    7784:	50 70       	andi	r21, 0x00	; 0
    7786:	fe 01       	movw	r30, r28
    7788:	e6 0f       	add	r30, r22
    778a:	f7 1f       	adc	r31, r23
    778c:	80 81       	ld	r24, Z
    778e:	90 e0       	ldi	r25, 0x00	; 0
    7790:	a0 e0       	ldi	r26, 0x00	; 0
    7792:	b0 e0       	ldi	r27, 0x00	; 0
    7794:	28 27       	eor	r18, r24
    7796:	39 27       	eor	r19, r25
    7798:	4a 27       	eor	r20, r26
    779a:	5b 27       	eor	r21, r27
    779c:	22 0f       	add	r18, r18
    779e:	33 1f       	adc	r19, r19
    77a0:	22 0f       	add	r18, r18
    77a2:	33 1f       	adc	r19, r19
    77a4:	2a 54       	subi	r18, 0x4A	; 74
    77a6:	34 4d       	sbci	r19, 0xD4	; 212
    77a8:	ef 2c       	mov	r14, r15
    77aa:	f0 2e       	mov	r15, r16
    77ac:	01 2f       	mov	r16, r17
    77ae:	11 27       	eor	r17, r17
    77b0:	f9 01       	movw	r30, r18
    77b2:	80 81       	ld	r24, Z
    77b4:	91 81       	ldd	r25, Z+1	; 0x01
    77b6:	a2 81       	ldd	r26, Z+2	; 0x02
    77b8:	b3 81       	ldd	r27, Z+3	; 0x03
    77ba:	e8 26       	eor	r14, r24
    77bc:	f9 26       	eor	r15, r25
    77be:	0a 27       	eor	r16, r26
    77c0:	1b 27       	eor	r17, r27
    77c2:	e0 92 14 57 	sts	0x5714, r14
    77c6:	f0 92 15 57 	sts	0x5715, r15
    77ca:	00 93 16 57 	sts	0x5716, r16
    77ce:	10 93 17 57 	sts	0x5717, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    77d2:	6f 5f       	subi	r22, 0xFF	; 255
    77d4:	7f 4f       	sbci	r23, 0xFF	; 255
    77d6:	fe 01       	movw	r30, r28
    77d8:	01 90       	ld	r0, Z+
    77da:	00 20       	and	r0, r0
    77dc:	e9 f7       	brne	.-6      	; 0x77d8 <SD_WriteString+0x94>
    77de:	31 97       	sbiw	r30, 0x01	; 1
    77e0:	ec 1b       	sub	r30, r28
    77e2:	fd 0b       	sbc	r31, r29
    77e4:	6e 17       	cp	r22, r30
    77e6:	7f 07       	cpc	r23, r31
    77e8:	08 f4       	brcc	.+2      	; 0x77ec <SD_WriteString+0xa8>
    77ea:	ba cf       	rjmp	.-140    	; 0x7760 <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    77ec:	df 91       	pop	r29
    77ee:	cf 91       	pop	r28
    77f0:	1f 91       	pop	r17
    77f2:	0f 91       	pop	r16
    77f4:	ff 90       	pop	r15
    77f6:	ef 90       	pop	r14
    77f8:	08 95       	ret

000077fa <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    77fa:	0f 93       	push	r16
    77fc:	1f 93       	push	r17
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    77fe:	8f ef       	ldi	r24, 0xFF	; 255
    7800:	9f ef       	ldi	r25, 0xFF	; 255
    7802:	af ef       	ldi	r26, 0xFF	; 255
    7804:	bf ef       	ldi	r27, 0xFF	; 255
    7806:	80 93 14 57 	sts	0x5714, r24
    780a:	90 93 15 57 	sts	0x5715, r25
    780e:	a0 93 16 57 	sts	0x5716, r26
    7812:	b0 93 17 57 	sts	0x5717, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7816:	6c e4       	ldi	r22, 0x4C	; 76
    7818:	74 e7       	ldi	r23, 0x74	; 116
    781a:	8e ed       	ldi	r24, 0xDE	; 222
    781c:	90 eb       	ldi	r25, 0xB0	; 176
    781e:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(61);				// record size
    7822:	6d e3       	ldi	r22, 0x3D	; 61
    7824:	70 e0       	ldi	r23, 0x00	; 0
    7826:	80 e0       	ldi	r24, 0x00	; 0
    7828:	90 e0       	ldi	r25, 0x00	; 0
    782a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(3); 		// record type
    782e:	83 e0       	ldi	r24, 0x03	; 3
    7830:	90 e0       	ldi	r25, 0x00	; 0
    7832:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    7836:	60 91 64 33 	lds	r22, 0x3364
    783a:	70 91 65 33 	lds	r23, 0x3365
    783e:	80 91 66 33 	lds	r24, 0x3366
    7842:	90 91 67 33 	lds	r25, 0x3367
    7846:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    784a:	60 e0       	ldi	r22, 0x00	; 0
    784c:	70 e8       	ldi	r23, 0x80	; 128
    784e:	87 e9       	ldi	r24, 0x97	; 151
    7850:	96 e0       	ldi	r25, 0x06	; 6
    7852:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(1);												// number of samples
    7856:	61 e0       	ldi	r22, 0x01	; 1
    7858:	70 e0       	ldi	r23, 0x00	; 0
    785a:	80 e0       	ldi	r24, 0x00	; 0
    785c:	90 e0       	ldi	r25, 0x00	; 0
    785e:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_WriteString("Air_Small");
    7862:	83 e3       	ldi	r24, 0x33	; 51
    7864:	90 e2       	ldi	r25, 0x20	; 32
    7866:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    786a:	89 e0       	ldi	r24, 0x09	; 9
    786c:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("32");
    7870:	0d e3       	ldi	r16, 0x3D	; 61
    7872:	10 e2       	ldi	r17, 0x20	; 32
    7874:	c8 01       	movw	r24, r16
    7876:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    787a:	8a e0       	ldi	r24, 0x0A	; 10
    787c:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("Air_Large");
    7880:	80 e4       	ldi	r24, 0x40	; 64
    7882:	90 e2       	ldi	r25, 0x20	; 32
    7884:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7888:	89 e0       	ldi	r24, 0x09	; 9
    788a:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("32");
    788e:	c8 01       	movw	r24, r16
    7890:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    7894:	8a e0       	ldi	r24, 0x0A	; 10
    7896:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	SD_Write8(0x00);
    789a:	80 e0       	ldi	r24, 0x00	; 0
    789c:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	SD_Write32(smallCount);
    78a0:	60 91 7b 3c 	lds	r22, 0x3C7B
    78a4:	70 91 7c 3c 	lds	r23, 0x3C7C
    78a8:	80 91 7d 3c 	lds	r24, 0x3C7D
    78ac:	90 91 7e 3c 	lds	r25, 0x3C7E
    78b0:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(largeCount);
    78b4:	60 91 ea 5b 	lds	r22, 0x5BEA
    78b8:	70 91 eb 5b 	lds	r23, 0x5BEB
    78bc:	80 91 ec 5b 	lds	r24, 0x5BEC
    78c0:	90 91 ed 5b 	lds	r25, 0x5BED
    78c4:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_WriteCRC();			// CRC
    78c8:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>

	f_sync(&Log_File);
    78cc:	8c e3       	ldi	r24, 0x3C	; 60
    78ce:	9f e4       	ldi	r25, 0x4F	; 79
    78d0:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    78d4:	1f 91       	pop	r17
    78d6:	0f 91       	pop	r16
    78d8:	08 95       	ret

000078da <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    78da:	1f 93       	push	r17
    78dc:	cf 93       	push	r28
    78de:	df 93       	push	r29
    78e0:	18 2f       	mov	r17, r24
    78e2:	8f ef       	ldi	r24, 0xFF	; 255
    78e4:	9f ef       	ldi	r25, 0xFF	; 255
    78e6:	af ef       	ldi	r26, 0xFF	; 255
    78e8:	bf ef       	ldi	r27, 0xFF	; 255
    78ea:	80 93 14 57 	sts	0x5714, r24
    78ee:	90 93 15 57 	sts	0x5715, r25
    78f2:	a0 93 16 57 	sts	0x5716, r26
    78f6:	b0 93 17 57 	sts	0x5717, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    78fa:	6c e4       	ldi	r22, 0x4C	; 76
    78fc:	74 e7       	ldi	r23, 0x74	; 116
    78fe:	8e ed       	ldi	r24, 0xDE	; 222
    7900:	90 eb       	ldi	r25, 0xB0	; 176
    7902:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(244);				// record size
    7906:	64 ef       	ldi	r22, 0xF4	; 244
    7908:	70 e0       	ldi	r23, 0x00	; 0
    790a:	80 e0       	ldi	r24, 0x00	; 0
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(3); 		// record type
    7912:	83 e0       	ldi	r24, 0x03	; 3
    7914:	90 e0       	ldi	r25, 0x00	; 0
    7916:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

														// payload
	if(bufferNumber == 1){
    791a:	11 30       	cpi	r17, 0x01	; 1
    791c:	49 f4       	brne	.+18     	; 0x7930 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    791e:	60 91 5c 33 	lds	r22, 0x335C
    7922:	70 91 5d 33 	lds	r23, 0x335D
    7926:	80 91 5e 33 	lds	r24, 0x335E
    792a:	90 91 5f 33 	lds	r25, 0x335F
    792e:	08 c0       	rjmp	.+16     	; 0x7940 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    7930:	60 91 60 33 	lds	r22, 0x3360
    7934:	70 91 61 33 	lds	r23, 0x3361
    7938:	80 91 62 33 	lds	r24, 0x3362
    793c:	90 91 63 33 	lds	r25, 0x3363
    7940:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7944:	60 e0       	ldi	r22, 0x00	; 0
    7946:	70 e2       	ldi	r23, 0x20	; 32
    7948:	8c e1       	ldi	r24, 0x1C	; 28
    794a:	90 e0       	ldi	r25, 0x00	; 0
    794c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(10);												// number of samples
    7950:	6a e0       	ldi	r22, 0x0A	; 10
    7952:	70 e0       	ldi	r23, 0x00	; 0
    7954:	80 e0       	ldi	r24, 0x00	; 0
    7956:	90 e0       	ldi	r25, 0x00	; 0
    7958:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_WriteString("Light_Green");
    795c:	8a e4       	ldi	r24, 0x4A	; 74
    795e:	90 e2       	ldi	r25, 0x20	; 32
    7960:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7964:	89 e0       	ldi	r24, 0x09	; 9
    7966:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("32");
    796a:	8d e3       	ldi	r24, 0x3D	; 61
    796c:	90 e2       	ldi	r25, 0x20	; 32
    796e:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    7972:	8a e0       	ldi	r24, 0x0A	; 10
    7974:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("Light_Red");
    7978:	86 e5       	ldi	r24, 0x56	; 86
    797a:	90 e2       	ldi	r25, 0x20	; 32
    797c:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7980:	89 e0       	ldi	r24, 0x09	; 9
    7982:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("32");
    7986:	8d e3       	ldi	r24, 0x3D	; 61
    7988:	90 e2       	ldi	r25, 0x20	; 32
    798a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    798e:	8a e0       	ldi	r24, 0x0A	; 10
    7990:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("Light_Blue");
    7994:	80 e6       	ldi	r24, 0x60	; 96
    7996:	90 e2       	ldi	r25, 0x20	; 32
    7998:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    799c:	89 e0       	ldi	r24, 0x09	; 9
    799e:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("32");
    79a2:	8d e3       	ldi	r24, 0x3D	; 61
    79a4:	90 e2       	ldi	r25, 0x20	; 32
    79a6:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    79aa:	8a e0       	ldi	r24, 0x0A	; 10
    79ac:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("Light_Clear");
    79b0:	8b e6       	ldi	r24, 0x6B	; 107
    79b2:	90 e2       	ldi	r25, 0x20	; 32
    79b4:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    79b8:	89 e0       	ldi	r24, 0x09	; 9
    79ba:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("32");
    79be:	8d e3       	ldi	r24, 0x3D	; 61
    79c0:	90 e2       	ldi	r25, 0x20	; 32
    79c2:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    79c6:	8a e0       	ldi	r24, 0x0A	; 10
    79c8:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	SD_Write8(0x00);
    79cc:	80 e0       	ldi	r24, 0x00	; 0
    79ce:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	if(bufferNumber == 1){
    79d2:	11 30       	cpi	r17, 0x01	; 1
    79d4:	69 f4       	brne	.+26     	; 0x79f0 <SD_WriteLightBuffer+0x116>
    79d6:	c8 e1       	ldi	r28, 0x18	; 24
    79d8:	db e5       	ldi	r29, 0x5B	; 91
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    79da:	69 91       	ld	r22, Y+
    79dc:	79 91       	ld	r23, Y+
    79de:	89 91       	ld	r24, Y+
    79e0:	99 91       	ld	r25, Y+
    79e2:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    79e6:	8b e5       	ldi	r24, 0x5B	; 91
    79e8:	c8 3b       	cpi	r28, 0xB8	; 184
    79ea:	d8 07       	cpc	r29, r24
    79ec:	b1 f7       	brne	.-20     	; 0x79da <SD_WriteLightBuffer+0x100>
    79ee:	0c c0       	rjmp	.+24     	; 0x7a08 <SD_WriteLightBuffer+0x12e>
    79f0:	cd e3       	ldi	r28, 0x3D	; 61
    79f2:	d5 e4       	ldi	r29, 0x45	; 69
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    79f4:	69 91       	ld	r22, Y+
    79f6:	79 91       	ld	r23, Y+
    79f8:	89 91       	ld	r24, Y+
    79fa:	99 91       	ld	r25, Y+
    79fc:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    7a00:	85 e4       	ldi	r24, 0x45	; 69
    7a02:	cd 3d       	cpi	r28, 0xDD	; 221
    7a04:	d8 07       	cpc	r29, r24
    7a06:	b1 f7       	brne	.-20     	; 0x79f4 <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7a08:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>

	f_sync(&Log_File);
    7a0c:	8c e3       	ldi	r24, 0x3C	; 60
    7a0e:	9f e4       	ldi	r25, 0x4F	; 79
    7a10:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    7a14:	df 91       	pop	r29
    7a16:	cf 91       	pop	r28
    7a18:	1f 91       	pop	r17
    7a1a:	08 95       	ret

00007a1c <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    7a1c:	1f 93       	push	r17
    7a1e:	18 2f       	mov	r17, r24
    7a20:	8f ef       	ldi	r24, 0xFF	; 255
    7a22:	9f ef       	ldi	r25, 0xFF	; 255
    7a24:	af ef       	ldi	r26, 0xFF	; 255
    7a26:	bf ef       	ldi	r27, 0xFF	; 255
    7a28:	80 93 14 57 	sts	0x5714, r24
    7a2c:	90 93 15 57 	sts	0x5715, r25
    7a30:	a0 93 16 57 	sts	0x5716, r26
    7a34:	b0 93 17 57 	sts	0x5717, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7a38:	6c e4       	ldi	r22, 0x4C	; 76
    7a3a:	74 e7       	ldi	r23, 0x74	; 116
    7a3c:	8e ed       	ldi	r24, 0xDE	; 222
    7a3e:	90 eb       	ldi	r25, 0xB0	; 176
    7a40:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    7a44:	60 e1       	ldi	r22, 0x10	; 16
    7a46:	74 e0       	ldi	r23, 0x04	; 4
    7a48:	80 e0       	ldi	r24, 0x00	; 0
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(3); 									// record type
    7a50:	83 e0       	ldi	r24, 0x03	; 3
    7a52:	90 e0       	ldi	r25, 0x00	; 0
    7a54:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7a58:	11 30       	cpi	r17, 0x01	; 1
    7a5a:	49 f4       	brne	.+18     	; 0x7a6e <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    7a5c:	60 91 54 33 	lds	r22, 0x3354
    7a60:	70 91 55 33 	lds	r23, 0x3355
    7a64:	80 91 56 33 	lds	r24, 0x3356
    7a68:	90 91 57 33 	lds	r25, 0x3357
    7a6c:	08 c0       	rjmp	.+16     	; 0x7a7e <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    7a6e:	60 91 58 33 	lds	r22, 0x3358
    7a72:	70 91 59 33 	lds	r23, 0x3359
    7a76:	80 91 5a 33 	lds	r24, 0x335A
    7a7a:	90 91 5b 33 	lds	r25, 0x335B
    7a7e:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    7a82:	60 e0       	ldi	r22, 0x00	; 0
    7a84:	71 e0       	ldi	r23, 0x01	; 1
    7a86:	80 e0       	ldi	r24, 0x00	; 0
    7a88:	90 e0       	ldi	r25, 0x00	; 0
    7a8a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    7a8e:	68 ee       	ldi	r22, 0xE8	; 232
    7a90:	73 e0       	ldi	r23, 0x03	; 3
    7a92:	80 e0       	ldi	r24, 0x00	; 0
    7a94:	90 e0       	ldi	r25, 0x00	; 0
    7a96:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_WriteString("Microphone");
    7a9a:	87 e7       	ldi	r24, 0x77	; 119
    7a9c:	90 e2       	ldi	r25, 0x20	; 32
    7a9e:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7aa2:	89 e0       	ldi	r24, 0x09	; 9
    7aa4:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("8");
    7aa8:	82 e8       	ldi	r24, 0x82	; 130
    7aaa:	90 e2       	ldi	r25, 0x20	; 32
    7aac:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    7ab0:	8a e0       	ldi	r24, 0x0A	; 10
    7ab2:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_Write8(0x00);
    7ab6:	80 e0       	ldi	r24, 0x00	; 0
    7ab8:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	if(bufferNumber == 1){
    7abc:	11 30       	cpi	r17, 0x01	; 1
    7abe:	19 f4       	brne	.+6      	; 0x7ac6 <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    7ac0:	8f e0       	ldi	r24, 0x0F	; 15
    7ac2:	96 e4       	ldi	r25, 0x46	; 70
    7ac4:	02 c0       	rjmp	.+4      	; 0x7aca <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    7ac6:	81 e1       	ldi	r24, 0x11	; 17
    7ac8:	91 e4       	ldi	r25, 0x41	; 65
    7aca:	68 ee       	ldi	r22, 0xE8	; 232
    7acc:	73 e0       	ldi	r23, 0x03	; 3
    7ace:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    7ad2:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>

	f_sync(&Log_File);
    7ad6:	8c e3       	ldi	r24, 0x3C	; 60
    7ad8:	9f e4       	ldi	r25, 0x4F	; 79
    7ada:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    7ade:	1f 91       	pop	r17
    7ae0:	08 95       	ret

00007ae2 <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    7ae2:	1f 93       	push	r17
    7ae4:	cf 93       	push	r28
    7ae6:	df 93       	push	r29
    7ae8:	18 2f       	mov	r17, r24
    7aea:	8f ef       	ldi	r24, 0xFF	; 255
    7aec:	9f ef       	ldi	r25, 0xFF	; 255
    7aee:	af ef       	ldi	r26, 0xFF	; 255
    7af0:	bf ef       	ldi	r27, 0xFF	; 255
    7af2:	80 93 14 57 	sts	0x5714, r24
    7af6:	90 93 15 57 	sts	0x5715, r25
    7afa:	a0 93 16 57 	sts	0x5716, r26
    7afe:	b0 93 17 57 	sts	0x5717, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7b02:	6c e4       	ldi	r22, 0x4C	; 76
    7b04:	74 e7       	ldi	r23, 0x74	; 116
    7b06:	8e ed       	ldi	r24, 0xDE	; 222
    7b08:	90 eb       	ldi	r25, 0xB0	; 176
    7b0a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(48);				// record size
    7b0e:	60 e3       	ldi	r22, 0x30	; 48
    7b10:	70 e0       	ldi	r23, 0x00	; 0
    7b12:	80 e0       	ldi	r24, 0x00	; 0
    7b14:	90 e0       	ldi	r25, 0x00	; 0
    7b16:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(3); 		// record type
    7b1a:	83 e0       	ldi	r24, 0x03	; 3
    7b1c:	90 e0       	ldi	r25, 0x00	; 0
    7b1e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7b22:	11 30       	cpi	r17, 0x01	; 1
    7b24:	49 f4       	brne	.+18     	; 0x7b38 <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    7b26:	60 91 4c 33 	lds	r22, 0x334C
    7b2a:	70 91 4d 33 	lds	r23, 0x334D
    7b2e:	80 91 4e 33 	lds	r24, 0x334E
    7b32:	90 91 4f 33 	lds	r25, 0x334F
    7b36:	08 c0       	rjmp	.+16     	; 0x7b48 <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    7b38:	60 91 50 33 	lds	r22, 0x3350
    7b3c:	70 91 51 33 	lds	r23, 0x3351
    7b40:	80 91 52 33 	lds	r24, 0x3352
    7b44:	90 91 53 33 	lds	r25, 0x3353
    7b48:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7b4c:	60 e0       	ldi	r22, 0x00	; 0
    7b4e:	70 e2       	ldi	r23, 0x20	; 32
    7b50:	8c e1       	ldi	r24, 0x1C	; 28
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(10);												// number of samples
    7b58:	6a e0       	ldi	r22, 0x0A	; 10
    7b5a:	70 e0       	ldi	r23, 0x00	; 0
    7b5c:	80 e0       	ldi	r24, 0x00	; 0
    7b5e:	90 e0       	ldi	r25, 0x00	; 0
    7b60:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_WriteString("Pressure");
    7b64:	84 e8       	ldi	r24, 0x84	; 132
    7b66:	90 e2       	ldi	r25, 0x20	; 32
    7b68:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7b6c:	89 e0       	ldi	r24, 0x09	; 9
    7b6e:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("8");
    7b72:	82 e8       	ldi	r24, 0x82	; 130
    7b74:	90 e2       	ldi	r25, 0x20	; 32
    7b76:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    7b7a:	8a e0       	ldi	r24, 0x0A	; 10
    7b7c:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_Write8(0x00);
    7b80:	80 e0       	ldi	r24, 0x00	; 0
    7b82:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	if(bufferNumber == 1){
    7b86:	11 30       	cpi	r17, 0x01	; 1
    7b88:	51 f4       	brne	.+20     	; 0x7b9e <SD_WritePressureBuffer+0xbc>
    7b8a:	c1 e7       	ldi	r28, 0x71	; 113
    7b8c:	dc e3       	ldi	r29, 0x3C	; 60
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    7b8e:	89 91       	ld	r24, Y+
    7b90:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7b94:	8c e3       	ldi	r24, 0x3C	; 60
    7b96:	cb 37       	cpi	r28, 0x7B	; 123
    7b98:	d8 07       	cpc	r29, r24
    7b9a:	c9 f7       	brne	.-14     	; 0x7b8e <SD_WritePressureBuffer+0xac>
    7b9c:	09 c0       	rjmp	.+18     	; 0x7bb0 <SD_WritePressureBuffer+0xce>
    7b9e:	c0 ee       	ldi	r28, 0xE0	; 224
    7ba0:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    7ba2:	89 91       	ld	r24, Y+
    7ba4:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7ba8:	8a e4       	ldi	r24, 0x4A	; 74
    7baa:	ca 3e       	cpi	r28, 0xEA	; 234
    7bac:	d8 07       	cpc	r29, r24
    7bae:	c9 f7       	brne	.-14     	; 0x7ba2 <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7bb0:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>

	f_sync(&Log_File);
    7bb4:	8c e3       	ldi	r24, 0x3C	; 60
    7bb6:	9f e4       	ldi	r25, 0x4F	; 79
    7bb8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    7bbc:	df 91       	pop	r29
    7bbe:	cf 91       	pop	r28
    7bc0:	1f 91       	pop	r17
    7bc2:	08 95       	ret

00007bc4 <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    7bc4:	1f 93       	push	r17
    7bc6:	cf 93       	push	r28
    7bc8:	df 93       	push	r29
    7bca:	18 2f       	mov	r17, r24
    7bcc:	8f ef       	ldi	r24, 0xFF	; 255
    7bce:	9f ef       	ldi	r25, 0xFF	; 255
    7bd0:	af ef       	ldi	r26, 0xFF	; 255
    7bd2:	bf ef       	ldi	r27, 0xFF	; 255
    7bd4:	80 93 14 57 	sts	0x5714, r24
    7bd8:	90 93 15 57 	sts	0x5715, r25
    7bdc:	a0 93 16 57 	sts	0x5716, r26
    7be0:	b0 93 17 57 	sts	0x5717, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7be4:	6c e4       	ldi	r22, 0x4C	; 76
    7be6:	74 e7       	ldi	r23, 0x74	; 116
    7be8:	8e ed       	ldi	r24, 0xDE	; 222
    7bea:	90 eb       	ldi	r25, 0xB0	; 176
    7bec:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(48);				// record size
    7bf0:	60 e3       	ldi	r22, 0x30	; 48
    7bf2:	70 e0       	ldi	r23, 0x00	; 0
    7bf4:	80 e0       	ldi	r24, 0x00	; 0
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(3); 		// record type
    7bfc:	83 e0       	ldi	r24, 0x03	; 3
    7bfe:	90 e0       	ldi	r25, 0x00	; 0
    7c00:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7c04:	11 30       	cpi	r17, 0x01	; 1
    7c06:	49 f4       	brne	.+18     	; 0x7c1a <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    7c08:	60 91 44 33 	lds	r22, 0x3344
    7c0c:	70 91 45 33 	lds	r23, 0x3345
    7c10:	80 91 46 33 	lds	r24, 0x3346
    7c14:	90 91 47 33 	lds	r25, 0x3347
    7c18:	08 c0       	rjmp	.+16     	; 0x7c2a <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    7c1a:	60 91 48 33 	lds	r22, 0x3348
    7c1e:	70 91 49 33 	lds	r23, 0x3349
    7c22:	80 91 4a 33 	lds	r24, 0x334A
    7c26:	90 91 4b 33 	lds	r25, 0x334B
    7c2a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7c2e:	60 e0       	ldi	r22, 0x00	; 0
    7c30:	70 e2       	ldi	r23, 0x20	; 32
    7c32:	8c e1       	ldi	r24, 0x1C	; 28
    7c34:	90 e0       	ldi	r25, 0x00	; 0
    7c36:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(10);												// number of samples
    7c3a:	6a e0       	ldi	r22, 0x0A	; 10
    7c3c:	70 e0       	ldi	r23, 0x00	; 0
    7c3e:	80 e0       	ldi	r24, 0x00	; 0
    7c40:	90 e0       	ldi	r25, 0x00	; 0
    7c42:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>

	SD_WriteString("Humidity");
    7c46:	8d e8       	ldi	r24, 0x8D	; 141
    7c48:	90 e2       	ldi	r25, 0x20	; 32
    7c4a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7c4e:	89 e0       	ldi	r24, 0x09	; 9
    7c50:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("8");
    7c54:	82 e8       	ldi	r24, 0x82	; 130
    7c56:	90 e2       	ldi	r25, 0x20	; 32
    7c58:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    7c5c:	8a e0       	ldi	r24, 0x0A	; 10
    7c5e:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_Write8(0x00);
    7c62:	80 e0       	ldi	r24, 0x00	; 0
    7c64:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	if(bufferNumber == 1){
    7c68:	11 30       	cpi	r17, 0x01	; 1
    7c6a:	51 f4       	brne	.+20     	; 0x7c80 <SD_WriteHumidityBuffer+0xbc>
    7c6c:	cd e1       	ldi	r28, 0x1D	; 29
    7c6e:	db e4       	ldi	r29, 0x4B	; 75
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    7c70:	89 91       	ld	r24, Y+
    7c72:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7c76:	8b e4       	ldi	r24, 0x4B	; 75
    7c78:	c7 32       	cpi	r28, 0x27	; 39
    7c7a:	d8 07       	cpc	r29, r24
    7c7c:	c9 f7       	brne	.-14     	; 0x7c70 <SD_WriteHumidityBuffer+0xac>
    7c7e:	09 c0       	rjmp	.+18     	; 0x7c92 <SD_WriteHumidityBuffer+0xce>
    7c80:	c6 eb       	ldi	r28, 0xB6	; 182
    7c82:	d3 e5       	ldi	r29, 0x53	; 83
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    7c84:	89 91       	ld	r24, Y+
    7c86:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7c8a:	83 e5       	ldi	r24, 0x53	; 83
    7c8c:	c0 3c       	cpi	r28, 0xC0	; 192
    7c8e:	d8 07       	cpc	r29, r24
    7c90:	c9 f7       	brne	.-14     	; 0x7c84 <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7c92:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>

	f_sync(&Log_File);
    7c96:	8c e3       	ldi	r24, 0x3C	; 60
    7c98:	9f e4       	ldi	r25, 0x4F	; 79
    7c9a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    7c9e:	df 91       	pop	r29
    7ca0:	cf 91       	pop	r28
    7ca2:	1f 91       	pop	r17
    7ca4:	08 95       	ret

00007ca6 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    7ca6:	1f 93       	push	r17
    7ca8:	cf 93       	push	r28
    7caa:	df 93       	push	r29
    7cac:	18 2f       	mov	r17, r24
    7cae:	8f ef       	ldi	r24, 0xFF	; 255
    7cb0:	9f ef       	ldi	r25, 0xFF	; 255
    7cb2:	af ef       	ldi	r26, 0xFF	; 255
    7cb4:	bf ef       	ldi	r27, 0xFF	; 255
    7cb6:	80 93 14 57 	sts	0x5714, r24
    7cba:	90 93 15 57 	sts	0x5715, r25
    7cbe:	a0 93 16 57 	sts	0x5716, r26
    7cc2:	b0 93 17 57 	sts	0x5717, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7cc6:	6c e4       	ldi	r22, 0x4C	; 76
    7cc8:	74 e7       	ldi	r23, 0x74	; 116
    7cca:	8e ed       	ldi	r24, 0xDE	; 222
    7ccc:	90 eb       	ldi	r25, 0xB0	; 176
    7cce:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(62);				// record size  
    7cd2:	6e e3       	ldi	r22, 0x3E	; 62
    7cd4:	70 e0       	ldi	r23, 0x00	; 0
    7cd6:	80 e0       	ldi	r24, 0x00	; 0
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(3); 		// record type  
    7cde:	83 e0       	ldi	r24, 0x03	; 3
    7ce0:	90 e0       	ldi	r25, 0x00	; 0
    7ce2:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    7ce6:	11 30       	cpi	r17, 0x01	; 1
    7ce8:	49 f4       	brne	.+18     	; 0x7cfc <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    7cea:	60 91 3c 33 	lds	r22, 0x333C
    7cee:	70 91 3d 33 	lds	r23, 0x333D
    7cf2:	80 91 3e 33 	lds	r24, 0x333E
    7cf6:	90 91 3f 33 	lds	r25, 0x333F
    7cfa:	08 c0       	rjmp	.+16     	; 0x7d0c <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    7cfc:	60 91 40 33 	lds	r22, 0x3340
    7d00:	70 91 41 33 	lds	r23, 0x3341
    7d04:	80 91 42 33 	lds	r24, 0x3342
    7d08:	90 91 43 33 	lds	r25, 0x3343
    7d0c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7d10:	60 e0       	ldi	r22, 0x00	; 0
    7d12:	70 e2       	ldi	r23, 0x20	; 32
    7d14:	8c e1       	ldi	r24, 0x1C	; 28
    7d16:	90 e0       	ldi	r25, 0x00	; 0
    7d18:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(10);												// number of samples
    7d1c:	6a e0       	ldi	r22, 0x0A	; 10
    7d1e:	70 e0       	ldi	r23, 0x00	; 0
    7d20:	80 e0       	ldi	r24, 0x00	; 0
    7d22:	90 e0       	ldi	r25, 0x00	; 0
    7d24:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
		
	SD_WriteString("Temperature");
    7d28:	86 e9       	ldi	r24, 0x96	; 150
    7d2a:	90 e2       	ldi	r25, 0x20	; 32
    7d2c:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    7d30:	89 e0       	ldi	r24, 0x09	; 9
    7d32:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("16");
    7d36:	82 ea       	ldi	r24, 0xA2	; 162
    7d38:	90 e2       	ldi	r25, 0x20	; 32
    7d3a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    7d3e:	8a e0       	ldi	r24, 0x0A	; 10
    7d40:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_Write8(0x00);
    7d44:	80 e0       	ldi	r24, 0x00	; 0
    7d46:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	
	if(bufferNumber == 1){
    7d4a:	11 30       	cpi	r17, 0x01	; 1
    7d4c:	59 f4       	brne	.+22     	; 0x7d64 <SD_WriteTemperatureBuffer+0xbe>
    7d4e:	c7 ef       	ldi	r28, 0xF7	; 247
    7d50:	d9 e4       	ldi	r29, 0x49	; 73
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    7d52:	89 91       	ld	r24, Y+
    7d54:	99 91       	ld	r25, Y+
    7d56:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7d5a:	8a e4       	ldi	r24, 0x4A	; 74
    7d5c:	cb 30       	cpi	r28, 0x0B	; 11
    7d5e:	d8 07       	cpc	r29, r24
    7d60:	c1 f7       	brne	.-16     	; 0x7d52 <SD_WriteTemperatureBuffer+0xac>
    7d62:	0a c0       	rjmp	.+20     	; 0x7d78 <SD_WriteTemperatureBuffer+0xd2>
    7d64:	c2 ea       	ldi	r28, 0xA2	; 162
    7d66:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    7d68:	89 91       	ld	r24, Y+
    7d6a:	99 91       	ld	r25, Y+
    7d6c:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7d70:	8a e4       	ldi	r24, 0x4A	; 74
    7d72:	c6 3b       	cpi	r28, 0xB6	; 182
    7d74:	d8 07       	cpc	r29, r24
    7d76:	c1 f7       	brne	.-16     	; 0x7d68 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    7d78:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>
		
	f_sync(&Log_File);
    7d7c:	8c e3       	ldi	r24, 0x3C	; 60
    7d7e:	9f e4       	ldi	r25, 0x4F	; 79
    7d80:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

}
    7d84:	df 91       	pop	r29
    7d86:	cf 91       	pop	r28
    7d88:	1f 91       	pop	r17
    7d8a:	08 95       	ret

00007d8c <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    7d8c:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7d8e:	dc 01       	movw	r26, r24
    7d90:	0d 90       	ld	r0, X+
    7d92:	00 20       	and	r0, r0
    7d94:	e9 f7       	brne	.-6      	; 0x7d90 <Rs232_SendString+0x4>
    7d96:	11 97       	sbiw	r26, 0x01	; 1
    7d98:	a8 1b       	sub	r26, r24
    7d9a:	b9 0b       	sbc	r27, r25
    7d9c:	90 e0       	ldi	r25, 0x00	; 0
    7d9e:	0a c0       	rjmp	.+20     	; 0x7db4 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    7da0:	e2 0f       	add	r30, r18
    7da2:	f3 1f       	adc	r31, r19
    7da4:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7da6:	80 91 a1 09 	lds	r24, 0x09A1
    7daa:	85 ff       	sbrs	r24, 5
    7dac:	fc cf       	rjmp	.-8      	; 0x7da6 <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    7dae:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7db2:	9f 5f       	subi	r25, 0xFF	; 255
    7db4:	e9 2f       	mov	r30, r25
    7db6:	f0 e0       	ldi	r31, 0x00	; 0
    7db8:	ea 17       	cp	r30, r26
    7dba:	fb 07       	cpc	r31, r27
    7dbc:	88 f3       	brcs	.-30     	; 0x7da0 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    7dbe:	66 23       	and	r22, r22
    7dc0:	71 f0       	breq	.+28     	; 0x7dde <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7dc2:	80 91 a1 09 	lds	r24, 0x09A1
    7dc6:	85 ff       	sbrs	r24, 5
    7dc8:	fc cf       	rjmp	.-8      	; 0x7dc2 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    7dca:	8d e0       	ldi	r24, 0x0D	; 13
    7dcc:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7dd0:	80 91 a1 09 	lds	r24, 0x09A1
    7dd4:	85 ff       	sbrs	r24, 5
    7dd6:	fc cf       	rjmp	.-8      	; 0x7dd0 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    7dd8:	8a e0       	ldi	r24, 0x0A	; 10
    7dda:	80 93 a0 09 	sts	0x09A0, r24
    7dde:	08 95       	ret

00007de0 <Debug_SendString>:
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
}

void Debug_SendString(char string [],bool CR){
    7de0:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7de2:	dc 01       	movw	r26, r24
    7de4:	0d 90       	ld	r0, X+
    7de6:	00 20       	and	r0, r0
    7de8:	e9 f7       	brne	.-6      	; 0x7de4 <Debug_SendString+0x4>
    7dea:	11 97       	sbiw	r26, 0x01	; 1
    7dec:	a8 1b       	sub	r26, r24
    7dee:	b9 0b       	sbc	r27, r25
    7df0:	90 e0       	ldi	r25, 0x00	; 0
    7df2:	0c c0       	rjmp	.+24     	; 0x7e0c <Debug_SendString+0x2c>
		Debug_SendByte(string[i]);
    7df4:	e2 0f       	add	r30, r18
    7df6:	f3 1f       	adc	r31, r19
    7df8:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7dfa:	80 91 a1 08 	lds	r24, 0x08A1
    7dfe:	85 ff       	sbrs	r24, 5
    7e00:	fc cf       	rjmp	.-8      	; 0x7dfa <Debug_SendString+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e02:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e06:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7e0a:	9f 5f       	subi	r25, 0xFF	; 255
    7e0c:	e9 2f       	mov	r30, r25
    7e0e:	f0 e0       	ldi	r31, 0x00	; 0
    7e10:	ea 17       	cp	r30, r26
    7e12:	fb 07       	cpc	r31, r27
    7e14:	78 f3       	brcs	.-34     	; 0x7df4 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    7e16:	66 23       	and	r22, r22
    7e18:	91 f0       	breq	.+36     	; 0x7e3e <Debug_SendString+0x5e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7e1a:	80 91 a1 08 	lds	r24, 0x08A1
    7e1e:	85 ff       	sbrs	r24, 5
    7e20:	fc cf       	rjmp	.-8      	; 0x7e1a <Debug_SendString+0x3a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e22:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e26:	8d e0       	ldi	r24, 0x0D	; 13
    7e28:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7e2c:	80 91 a1 08 	lds	r24, 0x08A1
    7e30:	85 ff       	sbrs	r24, 5
    7e32:	fc cf       	rjmp	.-8      	; 0x7e2c <Debug_SendString+0x4c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e34:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e38:	8a e0       	ldi	r24, 0x0A	; 10
    7e3a:	80 93 a0 08 	sts	0x08A0, r24
    7e3e:	08 95       	ret

00007e40 <Debug_To_Wifi>:
	}
}


void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
    7e40:	85 ea       	ldi	r24, 0xA5	; 165
    7e42:	90 e2       	ldi	r25, 0x20	; 32
    7e44:	61 e0       	ldi	r22, 0x01	; 1
    7e46:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    7e4a:	20 91 70 33 	lds	r18, 0x3370
    7e4e:	30 91 71 33 	lds	r19, 0x3371
    7e52:	80 91 6e 33 	lds	r24, 0x336E
    7e56:	90 91 6f 33 	lds	r25, 0x336F
    7e5a:	28 17       	cp	r18, r24
    7e5c:	39 07       	cpc	r19, r25
    7e5e:	49 f0       	breq	.+18     	; 0x7e72 <Debug_To_Wifi+0x32>
	while(1){
		if(Debug_CharReadyToRead()){
		    while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    7e60:	80 91 a1 0a 	lds	r24, 0x0AA1
    7e64:	85 ff       	sbrs	r24, 5
    7e66:	fc cf       	rjmp	.-8      	; 0x7e60 <Debug_To_Wifi+0x20>
            Wifi_Usart.DATA = Debug_GetByte(true);
    7e68:	81 e0       	ldi	r24, 0x01	; 1
    7e6a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
    7e6e:	80 93 a0 0a 	sts	0x0AA0, r24
		}
		if(Wifi_CharReadyToRead()){
    7e72:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    7e76:	88 23       	and	r24, r24
    7e78:	41 f3       	breq	.-48     	; 0x7e4a <Debug_To_Wifi+0xa>
			Debug_SendByte(Wifi_GetByte(true));
    7e7a:	81 e0       	ldi	r24, 0x01	; 1
    7e7c:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    7e80:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7e82:	80 91 a1 08 	lds	r24, 0x08A1
    7e86:	85 ff       	sbrs	r24, 5
    7e88:	fc cf       	rjmp	.-8      	; 0x7e82 <Debug_To_Wifi+0x42>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7e8a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7e8e:	90 93 a0 08 	sts	0x08A0, r25
    7e92:	db cf       	rjmp	.-74     	; 0x7e4a <Debug_To_Wifi+0xa>

00007e94 <Wifi_SendByte>:
	}
	return tmp;
}


void Wifi_SendByte(uint8_t data){
    7e94:	1f 93       	push	r17
    7e96:	18 2f       	mov	r17, r24

	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    7e98:	80 91 a1 0a 	lds	r24, 0x0AA1
    7e9c:	85 ff       	sbrs	r24, 5
    7e9e:	fc cf       	rjmp	.-8      	; 0x7e98 <Wifi_SendByte+0x4>
    7ea0:	20 c0       	rjmp	.+64     	; 0x7ee2 <Wifi_SendByte+0x4e>
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
        timeOutCounter++;
    7ea2:	80 91 86 33 	lds	r24, 0x3386
    7ea6:	90 91 87 33 	lds	r25, 0x3387
    7eaa:	01 96       	adiw	r24, 0x01	; 1
    7eac:	80 93 86 33 	sts	0x3386, r24
    7eb0:	90 93 87 33 	sts	0x3387, r25
    7eb4:	c9 01       	movw	r24, r18
    7eb6:	01 97       	sbiw	r24, 0x01	; 1
    7eb8:	f1 f7       	brne	.-4      	; 0x7eb6 <Wifi_SendByte+0x22>
        _delay_ms(1);
        if(timeOutCounter > 10000){
    7eba:	80 91 86 33 	lds	r24, 0x3386
    7ebe:	90 91 87 33 	lds	r25, 0x3387
    7ec2:	81 51       	subi	r24, 0x11	; 17
    7ec4:	97 42       	sbci	r25, 0x27	; 39
    7ec6:	78 f0       	brcs	.+30     	; 0x7ee6 <Wifi_SendByte+0x52>
           timeOutCounter = 0;
    7ec8:	10 92 86 33 	sts	0x3386, r1
    7ecc:	10 92 87 33 	sts	0x3387, r1

           Debug_SendString("Hanging",true);
    7ed0:	83 eb       	ldi	r24, 0xB3	; 179
    7ed2:	90 e2       	ldi	r25, 0x20	; 32
    7ed4:	61 e0       	ldi	r22, 0x01	; 1
    7ed6:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>

           uploadTimedOut = true;
    7eda:	81 e0       	ldi	r24, 0x01	; 1
    7edc:	80 93 88 33 	sts	0x3388, r24
    7ee0:	06 c0       	rjmp	.+12     	; 0x7eee <Wifi_SendByte+0x5a>
    7ee2:	26 e6       	ldi	r18, 0x66	; 102
    7ee4:	3e e0       	ldi	r19, 0x0E	; 14


void Wifi_SendByte(uint8_t data){

	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
    7ee6:	80 91 68 06 	lds	r24, 0x0668
    7eea:	81 fd       	sbrc	r24, 1
    7eec:	da cf       	rjmp	.-76     	; 0x7ea2 <Wifi_SendByte+0xe>
           uploadTimedOut = true;
           break;
        }
    }                              // Wait for RTS to be low

    Wifi_Usart.DATA = data;
    7eee:	10 93 a0 0a 	sts	0x0AA0, r17
	timeOutCounter = 0;
    7ef2:	10 92 86 33 	sts	0x3386, r1
    7ef6:	10 92 87 33 	sts	0x3387, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7efa:	8a e7       	ldi	r24, 0x7A	; 122
    7efc:	8a 95       	dec	r24
    7efe:	f1 f7       	brne	.-4      	; 0x7efc <Wifi_SendByte+0x68>
    _delay_us(25);
}
    7f00:	1f 91       	pop	r17
    7f02:	08 95       	ret

00007f04 <Uploader_SendByte>:
    } else {
        Debug_ClearBuffer();
    }
}

void Uploader_SendByte(uint8_t data){
    7f04:	98 2f       	mov	r25, r24
    if(useWifiForUploading){
    7f06:	80 91 6d 33 	lds	r24, 0x336D
    7f0a:	88 23       	and	r24, r24
    7f0c:	21 f0       	breq	.+8      	; 0x7f16 <Uploader_SendByte+0x12>
        Wifi_SendByte(data);
    7f0e:	89 2f       	mov	r24, r25
    7f10:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <Wifi_SendByte>
    7f14:	08 95       	ret
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7f16:	80 91 a1 08 	lds	r24, 0x08A1
    7f1a:	85 ff       	sbrs	r24, 5
    7f1c:	fc cf       	rjmp	.-8      	; 0x7f16 <Uploader_SendByte+0x12>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7f1e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7f22:	90 93 a0 08 	sts	0x08A0, r25
    7f26:	08 95       	ret

00007f28 <Wifi_SendString>:

void Wifi_SendString(char string [],bool CR){
    7f28:	ef 92       	push	r14
    7f2a:	ff 92       	push	r15
    7f2c:	0f 93       	push	r16
    7f2e:	1f 93       	push	r17
    7f30:	cf 93       	push	r28
    7f32:	df 93       	push	r29
    7f34:	8c 01       	movw	r16, r24
    7f36:	e6 2e       	mov	r14, r22
    7f38:	ff 24       	eor	r15, r15
    7f3a:	06 c0       	rjmp	.+12     	; 0x7f48 <Wifi_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Wifi_SendByte(string[i]);
    7f3c:	c0 0f       	add	r28, r16
    7f3e:	d1 1f       	adc	r29, r17
    7f40:	88 81       	ld	r24, Y
    7f42:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <Wifi_SendByte>
	timeOutCounter = 0;
    _delay_us(25);
}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7f46:	f3 94       	inc	r15
    7f48:	cf 2d       	mov	r28, r15
    7f4a:	d0 e0       	ldi	r29, 0x00	; 0
    7f4c:	f8 01       	movw	r30, r16
    7f4e:	01 90       	ld	r0, Z+
    7f50:	00 20       	and	r0, r0
    7f52:	e9 f7       	brne	.-6      	; 0x7f4e <Wifi_SendString+0x26>
    7f54:	31 97       	sbiw	r30, 0x01	; 1
    7f56:	e0 1b       	sub	r30, r16
    7f58:	f1 0b       	sbc	r31, r17
    7f5a:	ce 17       	cp	r28, r30
    7f5c:	df 07       	cpc	r29, r31
    7f5e:	70 f3       	brcs	.-36     	; 0x7f3c <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

    if(CR){
    7f60:	ee 20       	and	r14, r14
    7f62:	31 f0       	breq	.+12     	; 0x7f70 <Wifi_SendString+0x48>
		Wifi_SendByte(13);
    7f64:	8d e0       	ldi	r24, 0x0D	; 13
    7f66:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <Wifi_SendByte>
		Wifi_SendByte(10);
    7f6a:	8a e0       	ldi	r24, 0x0A	; 10
    7f6c:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <Wifi_SendByte>
	}
}
    7f70:	df 91       	pop	r29
    7f72:	cf 91       	pop	r28
    7f74:	1f 91       	pop	r17
    7f76:	0f 91       	pop	r16
    7f78:	ff 90       	pop	r15
    7f7a:	ef 90       	pop	r14
    7f7c:	08 95       	ret

00007f7e <Uploader_SendString>:
        Debug_SendByte(data);
    }

}

void Uploader_SendString(char string [],bool CR){
    7f7e:	9c 01       	movw	r18, r24
     if(useWifiForUploading){
    7f80:	80 91 6d 33 	lds	r24, 0x336D
    7f84:	88 23       	and	r24, r24
    7f86:	21 f0       	breq	.+8      	; 0x7f90 <Uploader_SendString+0x12>
        Wifi_SendString(string,CR);
    7f88:	c9 01       	movw	r24, r18
    7f8a:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <Wifi_SendString>
    7f8e:	08 95       	ret
    } else {
        Debug_SendString(string,CR);
    7f90:	c9 01       	movw	r24, r18
    7f92:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    7f96:	08 95       	ret

00007f98 <Wifi_EnterCMDMode>:

bool Wifi_EnterCMDMode(uint16_t timeOut){
    7f98:	8f 92       	push	r8
    7f9a:	9f 92       	push	r9
    7f9c:	af 92       	push	r10
    7f9e:	bf 92       	push	r11
    7fa0:	cf 92       	push	r12
    7fa2:	df 92       	push	r13
    7fa4:	ff 92       	push	r15
    7fa6:	0f 93       	push	r16
    7fa8:	1f 93       	push	r17
    7faa:	df 93       	push	r29
    7fac:	cf 93       	push	r28
    7fae:	00 d0       	rcall	.+0      	; 0x7fb0 <Wifi_EnterCMDMode+0x18>
    7fb0:	00 d0       	rcall	.+0      	; 0x7fb2 <Wifi_EnterCMDMode+0x1a>
    7fb2:	cd b7       	in	r28, 0x3d	; 61
    7fb4:	de b7       	in	r29, 0x3e	; 62
    7fb6:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    7fb8:	de 01       	movw	r26, r28
    7fba:	14 96       	adiw	r26, 0x04	; 4
    7fbc:	ef eb       	ldi	r30, 0xBF	; 191
    7fbe:	f0 e2       	ldi	r31, 0x20	; 32
    7fc0:	83 e0       	ldi	r24, 0x03	; 3
    7fc2:	01 90       	ld	r0, Z+
    7fc4:	0d 92       	st	X+, r0
    7fc6:	81 50       	subi	r24, 0x01	; 1
    7fc8:	e1 f7       	brne	.-8      	; 0x7fc2 <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    7fca:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    7fce:	8b eb       	ldi	r24, 0xBB	; 187
    7fd0:	90 e2       	ldi	r25, 0x20	; 32
    7fd2:	60 e0       	ldi	r22, 0x00	; 0
    7fd4:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <Wifi_SendString>
    7fd8:	ff 24       	eor	r15, r15
    7fda:	00 e0       	ldi	r16, 0x00	; 0
    7fdc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    7fde:	4e 01       	movw	r8, r28
    7fe0:	08 94       	sec
    7fe2:	81 1c       	adc	r8, r1
    7fe4:	91 1c       	adc	r9, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7fe6:	a6 e6       	ldi	r26, 0x66	; 102
    7fe8:	aa 2e       	mov	r10, r26
    7fea:	ae e0       	ldi	r26, 0x0E	; 14
    7fec:	ba 2e       	mov	r11, r26
    7fee:	23 c0       	rjmp	.+70     	; 0x8036 <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    7ff0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    7ff4:	88 23       	and	r24, r24
    7ff6:	d1 f0       	breq	.+52     	; 0x802c <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    7ff8:	80 e0       	ldi	r24, 0x00	; 0
    7ffa:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    7ffe:	f4 01       	movw	r30, r8
    8000:	ef 0d       	add	r30, r15
    8002:	f1 1d       	adc	r31, r1
    8004:	80 83       	st	Z, r24
			j++;
    8006:	f3 94       	inc	r15
			if(j > 2){
    8008:	82 e0       	ldi	r24, 0x02	; 2
    800a:	8f 15       	cp	r24, r15
    800c:	78 f4       	brcc	.+30     	; 0x802c <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    800e:	99 81       	ldd	r25, Y+1	; 0x01
    8010:	8c 81       	ldd	r24, Y+4	; 0x04
    8012:	98 17       	cp	r25, r24
    8014:	99 f4       	brne	.+38     	; 0x803c <Wifi_EnterCMDMode+0xa4>
    8016:	9a 81       	ldd	r25, Y+2	; 0x02
    8018:	8d 81       	ldd	r24, Y+5	; 0x05
    801a:	98 17       	cp	r25, r24
    801c:	79 f4       	brne	.+30     	; 0x803c <Wifi_EnterCMDMode+0xa4>
    801e:	20 e0       	ldi	r18, 0x00	; 0
    8020:	9b 81       	ldd	r25, Y+3	; 0x03
    8022:	8e 81       	ldd	r24, Y+6	; 0x06
    8024:	98 17       	cp	r25, r24
    8026:	59 f4       	brne	.+22     	; 0x803e <Wifi_EnterCMDMode+0xa6>
    8028:	21 e0       	ldi	r18, 0x01	; 1
    802a:	09 c0       	rjmp	.+18     	; 0x803e <Wifi_EnterCMDMode+0xa6>
    802c:	c5 01       	movw	r24, r10
    802e:	01 97       	sbiw	r24, 0x01	; 1
    8030:	f1 f7       	brne	.-4      	; 0x802e <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    8032:	0f 5f       	subi	r16, 0xFF	; 255
    8034:	1f 4f       	sbci	r17, 0xFF	; 255
    8036:	0c 15       	cp	r16, r12
    8038:	1d 05       	cpc	r17, r13
    803a:	d0 f2       	brcs	.-76     	; 0x7ff0 <Wifi_EnterCMDMode+0x58>
    803c:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    803e:	82 2f       	mov	r24, r18
    8040:	26 96       	adiw	r28, 0x06	; 6
    8042:	cd bf       	out	0x3d, r28	; 61
    8044:	de bf       	out	0x3e, r29	; 62
    8046:	cf 91       	pop	r28
    8048:	df 91       	pop	r29
    804a:	1f 91       	pop	r17
    804c:	0f 91       	pop	r16
    804e:	ff 90       	pop	r15
    8050:	df 90       	pop	r13
    8052:	cf 90       	pop	r12
    8054:	bf 90       	pop	r11
    8056:	af 90       	pop	r10
    8058:	9f 90       	pop	r9
    805a:	8f 90       	pop	r8
    805c:	08 95       	ret

0000805e <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    805e:	2f 92       	push	r2
    8060:	3f 92       	push	r3
    8062:	5f 92       	push	r5
    8064:	6f 92       	push	r6
    8066:	7f 92       	push	r7
    8068:	8f 92       	push	r8
    806a:	9f 92       	push	r9
    806c:	af 92       	push	r10
    806e:	bf 92       	push	r11
    8070:	cf 92       	push	r12
    8072:	df 92       	push	r13
    8074:	ef 92       	push	r14
    8076:	ff 92       	push	r15
    8078:	0f 93       	push	r16
    807a:	1f 93       	push	r17
    807c:	df 93       	push	r29
    807e:	cf 93       	push	r28
    8080:	cd b7       	in	r28, 0x3d	; 61
    8082:	de b7       	in	r29, 0x3e	; 62
    8084:	e2 97       	sbiw	r28, 0x32	; 50
    8086:	cd bf       	out	0x3d, r28	; 61
    8088:	de bf       	out	0x3e, r29	; 62
    808a:	08 2f       	mov	r16, r24
    808c:	d9 2e       	mov	r13, r25
    808e:	c6 2e       	mov	r12, r22
    8090:	77 2e       	mov	r7, r23
    8092:	64 2e       	mov	r6, r20
    8094:	55 2e       	mov	r5, r21
    8096:	19 01       	movw	r2, r18
    char response [50];

	respLen = 0;
    8098:	10 92 76 33 	sts	0x3376, r1
	toSendLen = strlen(toSend);
    809c:	a8 2f       	mov	r26, r24
    809e:	b9 2f       	mov	r27, r25
    80a0:	fd 01       	movw	r30, r26
    80a2:	01 90       	ld	r0, Z+
    80a4:	00 20       	and	r0, r0
    80a6:	e9 f7       	brne	.-6      	; 0x80a2 <Wifi_SendCommand+0x44>
    80a8:	31 97       	sbiw	r30, 0x01	; 1
    80aa:	ea 1b       	sub	r30, r26
    80ac:	fb 0b       	sbc	r31, r27
    80ae:	e0 93 77 33 	sts	0x3377, r30
	if(strlen(ok) > strlen(ok2)){
    80b2:	e6 2f       	mov	r30, r22
    80b4:	f7 2f       	mov	r31, r23
    80b6:	df 01       	movw	r26, r30
    80b8:	0d 90       	ld	r0, X+
    80ba:	00 20       	and	r0, r0
    80bc:	e9 f7       	brne	.-6      	; 0x80b8 <Wifi_SendCommand+0x5a>
    80be:	cd 01       	movw	r24, r26
    80c0:	01 97       	sbiw	r24, 0x01	; 1
    80c2:	8e 1b       	sub	r24, r30
    80c4:	9f 0b       	sbc	r25, r31
    80c6:	e4 2f       	mov	r30, r20
    80c8:	f5 2f       	mov	r31, r21
    80ca:	df 01       	movw	r26, r30
    80cc:	0d 90       	ld	r0, X+
    80ce:	00 20       	and	r0, r0
    80d0:	e9 f7       	brne	.-6      	; 0x80cc <Wifi_SendCommand+0x6e>
    80d2:	11 97       	sbiw	r26, 0x01	; 1
    80d4:	ae 1b       	sub	r26, r30
    80d6:	bf 0b       	sbc	r27, r31
    80d8:	a8 17       	cp	r26, r24
    80da:	b9 07       	cpc	r27, r25
    80dc:	18 f4       	brcc	.+6      	; 0x80e4 <Wifi_SendCommand+0x86>
		okLen = strlen(ok2);
    80de:	a0 93 78 33 	sts	0x3378, r26
    80e2:	02 c0       	rjmp	.+4      	; 0x80e8 <Wifi_SendCommand+0x8a>
	} else {
		okLen = strlen(ok);
    80e4:	80 93 78 33 	sts	0x3378, r24
	}
    Wifi_SendString("",true);
    80e8:	83 ec       	ldi	r24, 0xC3	; 195
    80ea:	90 e2       	ldi	r25, 0x20	; 32
    80ec:	61 e0       	ldi	r22, 0x01	; 1
    80ee:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <Wifi_SendString>
	Debug_SendString("-----------------",true);
    80f2:	84 ec       	ldi	r24, 0xC4	; 196
    80f4:	90 e2       	ldi	r25, 0x20	; 32
    80f6:	61 e0       	ldi	r22, 0x01	; 1
    80f8:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
	Debug_SendString("Command: ",false);
    80fc:	86 ed       	ldi	r24, 0xD6	; 214
    80fe:	90 e2       	ldi	r25, 0x20	; 32
    8100:	60 e0       	ldi	r22, 0x00	; 0
    8102:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
	Debug_SendString(toSend,true);
    8106:	80 2f       	mov	r24, r16
    8108:	9d 2d       	mov	r25, r13
    810a:	61 e0       	ldi	r22, 0x01	; 1
    810c:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
	Wifi_ClearBuffer();
    8110:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    8114:	80 2f       	mov	r24, r16
    8116:	9d 2d       	mov	r25, r13
    8118:	61 e0       	ldi	r22, 0x01	; 1
    811a:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <Wifi_SendString>
    811e:	ee 24       	eor	r14, r14
    8120:	ff 24       	eor	r15, r15
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
			response[respLen] = Wifi_GetByte(false);
    8122:	4e 01       	movw	r8, r28
    8124:	08 94       	sec
    8126:	81 1c       	adc	r8, r1
    8128:	91 1c       	adc	r9, r1
    812a:	b6 e6       	ldi	r27, 0x66	; 102
    812c:	ab 2e       	mov	r10, r27
    812e:	be e0       	ldi	r27, 0x0E	; 14
    8130:	bb 2e       	mov	r11, r27
    8132:	88 c0       	rjmp	.+272    	; 0x8244 <Wifi_SendCommand+0x1e6>
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    8134:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    8138:	88 23       	and	r24, r24
    813a:	09 f4       	brne	.+2      	; 0x813e <Wifi_SendCommand+0xe0>
    813c:	7d c0       	rjmp	.+250    	; 0x8238 <Wifi_SendCommand+0x1da>
			response[respLen] = Wifi_GetByte(false);
    813e:	10 91 76 33 	lds	r17, 0x3376
    8142:	80 e0       	ldi	r24, 0x00	; 0
    8144:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    8148:	f4 01       	movw	r30, r8
    814a:	e1 0f       	add	r30, r17
    814c:	f1 1d       	adc	r31, r1
    814e:	80 83       	st	Z, r24
			respLen++;
    8150:	80 91 76 33 	lds	r24, 0x3376
    8154:	8f 5f       	subi	r24, 0xFF	; 255
    8156:	80 93 76 33 	sts	0x3376, r24
			if(respLen == okLen + toSendLen + 3){		
    815a:	20 91 76 33 	lds	r18, 0x3376
    815e:	40 91 78 33 	lds	r20, 0x3378
    8162:	80 91 77 33 	lds	r24, 0x3377
    8166:	30 e0       	ldi	r19, 0x00	; 0
    8168:	90 e0       	ldi	r25, 0x00	; 0
    816a:	84 0f       	add	r24, r20
    816c:	91 1d       	adc	r25, r1
    816e:	03 96       	adiw	r24, 0x03	; 3
    8170:	28 17       	cp	r18, r24
    8172:	39 07       	cpc	r19, r25
    8174:	09 f0       	breq	.+2      	; 0x8178 <Wifi_SendCommand+0x11a>
    8176:	60 c0       	rjmp	.+192    	; 0x8238 <Wifi_SendCommand+0x1da>
				
				Debug_SendString("Response: ",false);
    8178:	80 ee       	ldi	r24, 0xE0	; 224
    817a:	90 e2       	ldi	r25, 0x20	; 32
    817c:	60 e0       	ldi	r22, 0x00	; 0
    817e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    8182:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(response[j]);
    8184:	9e 01       	movw	r18, r28
    8186:	2f 5f       	subi	r18, 0xFF	; 255
    8188:	3f 4f       	sbci	r19, 0xFF	; 255
    818a:	0d c0       	rjmp	.+26     	; 0x81a6 <Wifi_SendCommand+0x148>
    818c:	f9 01       	movw	r30, r18
    818e:	e9 0f       	add	r30, r25
    8190:	f1 1d       	adc	r31, r1
    8192:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8194:	80 91 a1 08 	lds	r24, 0x08A1
    8198:	85 ff       	sbrs	r24, 5
    819a:	fc cf       	rjmp	.-8      	; 0x8194 <Wifi_SendCommand+0x136>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    819c:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81a0:	e0 93 a0 08 	sts	0x08A0, r30
			response[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Response: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    81a4:	9f 5f       	subi	r25, 0xFF	; 255
    81a6:	80 91 76 33 	lds	r24, 0x3376
    81aa:	98 17       	cp	r25, r24
    81ac:	78 f3       	brcs	.-34     	; 0x818c <Wifi_SendCommand+0x12e>
					Debug_SendByte(response[j]);
				}
				Debug_SendString(", want: \"",false);
    81ae:	8b ee       	ldi	r24, 0xEB	; 235
    81b0:	90 e2       	ldi	r25, 0x20	; 32
    81b2:	60 e0       	ldi	r22, 0x00	; 0
    81b4:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				Debug_SendString(ok,false);
    81b8:	8c 2d       	mov	r24, r12
    81ba:	97 2d       	mov	r25, r7
    81bc:	60 e0       	ldi	r22, 0x00	; 0
    81be:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    81c2:	80 91 a1 08 	lds	r24, 0x08A1
    81c6:	85 ff       	sbrs	r24, 5
    81c8:	fc cf       	rjmp	.-8      	; 0x81c2 <Wifi_SendCommand+0x164>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    81ca:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81ce:	82 e2       	ldi	r24, 0x22	; 34
    81d0:	80 93 a0 08 	sts	0x08A0, r24
				Debug_SendByte('"');
				Debug_SendString(", or: \"",false);
    81d4:	85 ef       	ldi	r24, 0xF5	; 245
    81d6:	90 e2       	ldi	r25, 0x20	; 32
    81d8:	60 e0       	ldi	r22, 0x00	; 0
    81da:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				Debug_SendString(ok2,false);
    81de:	86 2d       	mov	r24, r6
    81e0:	95 2d       	mov	r25, r5
    81e2:	60 e0       	ldi	r22, 0x00	; 0
    81e4:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				Debug_SendString("\"",true);
    81e8:	8d ef       	ldi	r24, 0xFD	; 253
    81ea:	90 e2       	ldi	r25, 0x20	; 32
    81ec:	61 e0       	ldi	r22, 0x01	; 1
    81ee:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				
				if(strstr(response,toSend) == 0){     // make sure the command is present in the response
    81f2:	7e 01       	movw	r14, r28
    81f4:	08 94       	sec
    81f6:	e1 1c       	adc	r14, r1
    81f8:	f1 1c       	adc	r15, r1
    81fa:	c7 01       	movw	r24, r14
    81fc:	60 2f       	mov	r22, r16
    81fe:	7d 2d       	mov	r23, r13
    8200:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    8204:	00 97       	sbiw	r24, 0x00	; 0
    8206:	19 f4       	brne	.+6      	; 0x820e <Wifi_SendCommand+0x1b0>
				   Debug_SendString("Command NOT found in response",true);
    8208:	8f ef       	ldi	r24, 0xFF	; 255
    820a:	90 e2       	ldi	r25, 0x20	; 32
    820c:	10 c0       	rjmp	.+32     	; 0x822e <Wifi_SendCommand+0x1d0>
				   return false;
				}   else {
				   //Debug_SendString("Command found in response",true);
				}

				if(strstr(response,ok) != 0){                   // check for ok response 1
    820e:	c7 01       	movw	r24, r14
    8210:	6c 2d       	mov	r22, r12
    8212:	77 2d       	mov	r23, r7
    8214:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    8218:	00 97       	sbiw	r24, 0x00	; 0
    821a:	c9 f4       	brne	.+50     	; 0x824e <Wifi_SendCommand+0x1f0>
				    //Debug_SendString("ok response 1 found",true);
				    return true;
				} else {
				    if(strstr(response,ok2) != 0){              // check for ok response 1
    821c:	c7 01       	movw	r24, r14
    821e:	66 2d       	mov	r22, r6
    8220:	75 2d       	mov	r23, r5
    8222:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    8226:	00 97       	sbiw	r24, 0x00	; 0
    8228:	91 f4       	brne	.+36     	; 0x824e <Wifi_SendCommand+0x1f0>
				        //Debug_SendString("ok response 2 found",true);
				        return true;
				    } else {
				        Debug_SendString("NO ok resonses found",true);
    822a:	8d e1       	ldi	r24, 0x1D	; 29
    822c:	91 e2       	ldi	r25, 0x21	; 33
    822e:	61 e0       	ldi	r22, 0x01	; 1
    8230:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    8234:	80 e0       	ldi	r24, 0x00	; 0
    8236:	0c c0       	rjmp	.+24     	; 0x8250 <Wifi_SendCommand+0x1f2>
    8238:	c5 01       	movw	r24, r10
    823a:	01 97       	sbiw	r24, 0x01	; 1
    823c:	f1 f7       	brne	.-4      	; 0x823a <Wifi_SendCommand+0x1dc>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    823e:	08 94       	sec
    8240:	e1 1c       	adc	r14, r1
    8242:	f1 1c       	adc	r15, r1
    8244:	e2 14       	cp	r14, r2
    8246:	f3 04       	cpc	r15, r3
    8248:	08 f4       	brcc	.+2      	; 0x824c <Wifi_SendCommand+0x1ee>
    824a:	74 cf       	rjmp	.-280    	; 0x8134 <Wifi_SendCommand+0xd6>
    824c:	f3 cf       	rjmp	.-26     	; 0x8234 <Wifi_SendCommand+0x1d6>
    824e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8250:	e2 96       	adiw	r28, 0x32	; 50
    8252:	cd bf       	out	0x3d, r28	; 61
    8254:	de bf       	out	0x3e, r29	; 62
    8256:	cf 91       	pop	r28
    8258:	df 91       	pop	r29
    825a:	1f 91       	pop	r17
    825c:	0f 91       	pop	r16
    825e:	ff 90       	pop	r15
    8260:	ef 90       	pop	r14
    8262:	df 90       	pop	r13
    8264:	cf 90       	pop	r12
    8266:	bf 90       	pop	r11
    8268:	af 90       	pop	r10
    826a:	9f 90       	pop	r9
    826c:	8f 90       	pop	r8
    826e:	7f 90       	pop	r7
    8270:	6f 90       	pop	r6
    8272:	5f 90       	pop	r5
    8274:	3f 90       	pop	r3
    8276:	2f 90       	pop	r2
    8278:	08 95       	ret

0000827a <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
    827a:	cf 92       	push	r12
    827c:	df 92       	push	r13
    827e:	ef 92       	push	r14
    8280:	ff 92       	push	r15
    8282:	1f 93       	push	r17
    8284:	cf 93       	push	r28
    8286:	df 93       	push	r29
    8288:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    828a:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    828e:	82 e3       	ldi	r24, 0x32	; 50
    8290:	91 e2       	ldi	r25, 0x21	; 33
    8292:	6a e3       	ldi	r22, 0x3A	; 58
    8294:	71 e2       	ldi	r23, 0x21	; 33
    8296:	ab 01       	movw	r20, r22
    8298:	97 01       	movw	r18, r14
    829a:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    829e:	10 e0       	ldi	r17, 0x00	; 0
    82a0:	c0 e0       	ldi	r28, 0x00	; 0
    82a2:	d0 e0       	ldi	r29, 0x00	; 0
    82a4:	86 e6       	ldi	r24, 0x66	; 102
    82a6:	c8 2e       	mov	r12, r24
    82a8:	8e e0       	ldi	r24, 0x0E	; 14
    82aa:	d8 2e       	mov	r13, r24
    82ac:	1f c0       	rjmp	.+62     	; 0x82ec <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    82ae:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    82b2:	88 23       	and	r24, r24
    82b4:	b9 f0       	breq	.+46     	; 0x82e4 <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    82b6:	80 e0       	ldi	r24, 0x00	; 0
    82b8:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    82bc:	e1 2f       	mov	r30, r17
    82be:	f0 e0       	ldi	r31, 0x00	; 0
    82c0:	eb 5d       	subi	r30, 0xDB	; 219
    82c2:	fa 4b       	sbci	r31, 0xBA	; 186
    82c4:	80 83       	st	Z, r24
			tmp++;
    82c6:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    82c8:	11 31       	cpi	r17, 0x11	; 17
    82ca:	61 f4       	brne	.+24     	; 0x82e4 <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    82cc:	84 e4       	ldi	r24, 0x44	; 68
    82ce:	91 e2       	ldi	r25, 0x21	; 33
    82d0:	60 e0       	ldi	r22, 0x00	; 0
    82d2:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				Debug_SendString(macAddr,true);
    82d6:	85 e2       	ldi	r24, 0x25	; 37
    82d8:	95 e4       	ldi	r25, 0x45	; 69
    82da:	61 e0       	ldi	r22, 0x01	; 1
    82dc:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    82e0:	81 e0       	ldi	r24, 0x01	; 1
    82e2:	08 c0       	rjmp	.+16     	; 0x82f4 <Wifi_GetMac+0x7a>
    82e4:	c6 01       	movw	r24, r12
    82e6:	01 97       	sbiw	r24, 0x01	; 1
    82e8:	f1 f7       	brne	.-4      	; 0x82e6 <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    82ea:	21 96       	adiw	r28, 0x01	; 1
    82ec:	ce 15       	cp	r28, r14
    82ee:	df 05       	cpc	r29, r15
    82f0:	f0 f2       	brcs	.-68     	; 0x82ae <Wifi_GetMac+0x34>
    82f2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    82f4:	df 91       	pop	r29
    82f6:	cf 91       	pop	r28
    82f8:	1f 91       	pop	r17
    82fa:	ff 90       	pop	r15
    82fc:	ef 90       	pop	r14
    82fe:	df 90       	pop	r13
    8300:	cf 90       	pop	r12
    8302:	08 95       	ret

00008304 <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    8304:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    8306:	42 e5       	ldi	r20, 0x52	; 82
    8308:	51 e2       	ldi	r21, 0x21	; 33
    830a:	8d e4       	ldi	r24, 0x4D	; 77
    830c:	91 e2       	ldi	r25, 0x21	; 33
    830e:	ba 01       	movw	r22, r20
    8310:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    8314:	08 95       	ret

00008316 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    8316:	0f 93       	push	r16
    8318:	1f 93       	push	r17
	fileName[0] = '/';
    831a:	01 e1       	ldi	r16, 0x11	; 17
    831c:	15 e4       	ldi	r17, 0x45	; 69
    831e:	2f e2       	ldi	r18, 0x2F	; 47
    8320:	20 93 11 45 	sts	0x4511, r18
	ltoa(var, fileName+1, 16);
    8324:	a8 01       	movw	r20, r16
    8326:	4f 5f       	subi	r20, 0xFF	; 255
    8328:	5f 4f       	sbci	r21, 0xFF	; 255
    832a:	20 e1       	ldi	r18, 0x10	; 16
    832c:	30 e0       	ldi	r19, 0x00	; 0
    832e:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
	strcat(fileName, ".bt");
    8332:	c8 01       	movw	r24, r16
    8334:	67 e5       	ldi	r22, 0x57	; 87
    8336:	71 e2       	ldi	r23, 0x21	; 33
    8338:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
}
    833c:	1f 91       	pop	r17
    833e:	0f 91       	pop	r16
    8340:	08 95       	ret

00008342 <__vector_77>:

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(TCD0_OVF_vect){
    8342:	1f 92       	push	r1
    8344:	0f 92       	push	r0
    8346:	0f b6       	in	r0, 0x3f	; 63
    8348:	0f 92       	push	r0
    834a:	0b b6       	in	r0, 0x3b	; 59
    834c:	0f 92       	push	r0
    834e:	11 24       	eor	r1, r1
    8350:	af 92       	push	r10
    8352:	bf 92       	push	r11
    8354:	cf 92       	push	r12
    8356:	df 92       	push	r13
    8358:	ef 92       	push	r14
    835a:	ff 92       	push	r15
    835c:	0f 93       	push	r16
    835e:	1f 93       	push	r17
    8360:	2f 93       	push	r18
    8362:	3f 93       	push	r19
    8364:	4f 93       	push	r20
    8366:	5f 93       	push	r21
    8368:	6f 93       	push	r22
    836a:	7f 93       	push	r23
    836c:	8f 93       	push	r24
    836e:	9f 93       	push	r25
    8370:	af 93       	push	r26
    8372:	bf 93       	push	r27
    8374:	ef 93       	push	r30
    8376:	ff 93       	push	r31

if(okToDisplayGUI){
    8378:	80 91 cf 33 	lds	r24, 0x33CF
    837c:	88 23       	and	r24, r24
    837e:	09 f4       	brne	.+2      	; 0x8382 <__vector_77+0x40>
    8380:	bf c5       	rjmp	.+2942   	; 0x8f00 <__vector_77+0xbbe>

    ssRefreshCounter++;
    8382:	80 91 c6 33 	lds	r24, 0x33C6
    8386:	90 91 c7 33 	lds	r25, 0x33C7
    838a:	01 96       	adiw	r24, 0x01	; 1
    838c:	80 93 c6 33 	sts	0x33C6, r24
    8390:	90 93 c7 33 	sts	0x33C7, r25

    if(recording){
    8394:	80 91 a1 33 	lds	r24, 0x33A1
    8398:	88 23       	and	r24, r24
    839a:	09 f4       	brne	.+2      	; 0x839e <__vector_77+0x5c>
    839c:	43 c0       	rjmp	.+134    	; 0x8424 <__vector_77+0xe2>
        if(recordFileRestartCounter == 0){
    839e:	80 91 f0 33 	lds	r24, 0x33F0
    83a2:	88 23       	and	r24, r24
    83a4:	d1 f5       	brne	.+116    	; 0x841a <__vector_77+0xd8>
            if(UNIX_time > timeToStopRecording){
    83a6:	20 91 9c 33 	lds	r18, 0x339C
    83aa:	30 91 9d 33 	lds	r19, 0x339D
    83ae:	40 91 9e 33 	lds	r20, 0x339E
    83b2:	50 91 9f 33 	lds	r21, 0x339F
    83b6:	80 91 f1 33 	lds	r24, 0x33F1
    83ba:	90 91 f2 33 	lds	r25, 0x33F2
    83be:	a0 91 f3 33 	lds	r26, 0x33F3
    83c2:	b0 91 f4 33 	lds	r27, 0x33F4
    83c6:	82 17       	cp	r24, r18
    83c8:	93 07       	cpc	r25, r19
    83ca:	a4 07       	cpc	r26, r20
    83cc:	b5 07       	cpc	r27, r21
    83ce:	28 f5       	brcc	.+74     	; 0x841a <__vector_77+0xd8>
	            restartingFile = true;
    83d0:	81 e0       	ldi	r24, 0x01	; 1
    83d2:	80 93 dc 33 	sts	0x33DC, r24
	            recordFileRestartCounter = 0;
    83d6:	10 92 f0 33 	sts	0x33F0, r1
		        rs232Recording = false;
    83da:	10 92 96 33 	sts	0x3396, r1
                recording = false;
    83de:	10 92 a1 33 	sts	0x33A1, r1
	            okToCloseLogFile = true;
    83e2:	80 93 ce 33 	sts	0x33CE, r24
	            while(okToCloseLogFile);
    83e6:	80 91 ce 33 	lds	r24, 0x33CE
    83ea:	88 23       	and	r24, r24
    83ec:	e1 f7       	brne	.-8      	; 0x83e6 <__vector_77+0xa4>
	            if(percentDiskUsed < 950){
    83ee:	80 91 06 34 	lds	r24, 0x3406
    83f2:	90 91 07 34 	lds	r25, 0x3407
    83f6:	a0 91 08 34 	lds	r26, 0x3408
    83fa:	b0 91 09 34 	lds	r27, 0x3409
    83fe:	86 5b       	subi	r24, 0xB6	; 182
    8400:	93 40       	sbci	r25, 0x03	; 3
    8402:	a0 40       	sbci	r26, 0x00	; 0
    8404:	b0 40       	sbci	r27, 0x00	; 0
    8406:	38 f4       	brcc	.+14     	; 0x8416 <__vector_77+0xd4>
                    okToOpenLogFile = true;
    8408:	81 e0       	ldi	r24, 0x01	; 1
    840a:	80 93 cc 33 	sts	0x33CC, r24
	                while(!recording);
    840e:	80 91 a1 33 	lds	r24, 0x33A1
    8412:	88 23       	and	r24, r24
    8414:	e1 f3       	breq	.-8      	; 0x840e <__vector_77+0xcc>
	            }
	            restartingFile = false;
    8416:	10 92 dc 33 	sts	0x33DC, r1
	        }
	    }
	    recordFileRestartCounter++;
    841a:	80 91 f0 33 	lds	r24, 0x33F0
    841e:	8f 5f       	subi	r24, 0xFF	; 255
    8420:	80 93 f0 33 	sts	0x33F0, r24


	// controls


    if(currentMode == recordMode && Dpad_CheckButton(Down)){											// go to sensorMode
    8424:	80 91 c5 33 	lds	r24, 0x33C5
    8428:	88 23       	and	r24, r24
    842a:	29 f4       	brne	.+10     	; 0x8436 <__vector_77+0xf4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    842c:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8430:	8c 77       	andi	r24, 0x7C	; 124
    8432:	83 ff       	sbrs	r24, 3
    8434:	1a c5       	rjmp	.+2612   	; 0x8e6a <__vector_77+0xb28>

		currentMode = sensorMode;
		display_clearBuffer();
		display_writeBufferToScreen();
	} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){											// go to recordMode
    8436:	80 91 c5 33 	lds	r24, 0x33C5
    843a:	81 30       	cpi	r24, 0x01	; 1
    843c:	69 f4       	brne	.+26     	; 0x8458 <__vector_77+0x116>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    843e:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8442:	8c 77       	andi	r24, 0x7C	; 124
    8444:	82 fd       	sbrc	r24, 2
    8446:	08 c0       	rjmp	.+16     	; 0x8458 <__vector_77+0x116>
    8448:	18 c5       	rjmp	.+2608   	; 0x8e7a <__vector_77+0xb38>
    844a:	ca 01       	movw	r24, r20
    844c:	01 97       	sbiw	r24, 0x01	; 1
    844e:	f1 f7       	brne	.-4      	; 0x844c <__vector_77+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8450:	21 50       	subi	r18, 0x01	; 1
    8452:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8454:	d1 f7       	brne	.-12     	; 0x844a <__vector_77+0x108>
    8456:	29 c1       	rjmp	.+594    	; 0x86aa <__vector_77+0x368>

		currentMode = recordMode;
		display_clearBuffer();
		display_writeBufferToScreen();
		_delay_ms(400);
	} else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up) && !restartingFile){					// waiting to start recording
    8458:	80 91 c5 33 	lds	r24, 0x33C5
    845c:	88 23       	and	r24, r24
    845e:	f9 f4       	brne	.+62     	; 0x849e <__vector_77+0x15c>
    8460:	80 91 a1 33 	lds	r24, 0x33A1
    8464:	88 23       	and	r24, r24
    8466:	d9 f4       	brne	.+54     	; 0x849e <__vector_77+0x15c>
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8468:	80 91 a8 06 	lds	r24, 0x06A8
    846c:	80 fd       	sbrc	r24, 0
    846e:	17 c0       	rjmp	.+46     	; 0x849e <__vector_77+0x15c>
    8470:	0f c5       	rjmp	.+2590   	; 0x8e90 <__vector_77+0xb4e>
    8472:	80 91 dc 33 	lds	r24, 0x33DC
    8476:	88 23       	and	r24, r24
    8478:	91 f4       	brne	.+36     	; 0x849e <__vector_77+0x15c>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    847a:	e0 e2       	ldi	r30, 0x20	; 32
    847c:	f6 e0       	ldi	r31, 0x06	; 6
    847e:	82 e0       	ldi	r24, 0x02	; 2
    8480:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8482:	81 e0       	ldi	r24, 0x01	; 1
    8484:	85 83       	std	Z+5, r24	; 0x05
		Leds_Clear(sd_Red);
		Leds_Set(sd_Green);
		if(connected){
    8486:	80 91 82 33 	lds	r24, 0x3382
    848a:	88 23       	and	r24, r24
    848c:	21 f0       	breq	.+8      	; 0x8496 <__vector_77+0x154>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    848e:	80 e8       	ldi	r24, 0x80	; 128
    8490:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8492:	80 e4       	ldi	r24, 0x40	; 64
    8494:	7b c0       	rjmp	.+246    	; 0x858c <__vector_77+0x24a>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8496:	80 e4       	ldi	r24, 0x40	; 64
    8498:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    849a:	80 e8       	ldi	r24, 0x80	; 128
    849c:	77 c0       	rjmp	.+238    	; 0x858c <__vector_77+0x24a>
            Leds_Set(wifi_Green);
		} else {
		    Leds_Clear(wifi_Green);
            Leds_Set(wifi_Red);
		}
	} else if(currentMode == recordMode && !recording && !SD_Inserted()){									// dont allow to start recording
    849e:	80 91 c5 33 	lds	r24, 0x33C5
    84a2:	88 23       	and	r24, r24
    84a4:	79 f4       	brne	.+30     	; 0x84c4 <__vector_77+0x182>
    84a6:	80 91 a1 33 	lds	r24, 0x33A1
    84aa:	88 23       	and	r24, r24
    84ac:	59 f4       	brne	.+22     	; 0x84c4 <__vector_77+0x182>
    84ae:	80 91 a8 06 	lds	r24, 0x06A8
    84b2:	80 ff       	sbrs	r24, 0
    84b4:	07 c0       	rjmp	.+14     	; 0x84c4 <__vector_77+0x182>
    84b6:	e0 e2       	ldi	r30, 0x20	; 32
    84b8:	f6 e0       	ldi	r31, 0x06	; 6
    84ba:	82 e0       	ldi	r24, 0x02	; 2
    84bc:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    84be:	81 e0       	ldi	r24, 0x01	; 1
    84c0:	86 83       	std	Z+6, r24	; 0x06
    84c2:	f3 c0       	rjmp	.+486    	; 0x86aa <__vector_77+0x368>
		Leds_Set(sd_Red);
		Leds_Clear(sd_Green);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    84c4:	80 91 c5 33 	lds	r24, 0x33C5
    84c8:	88 23       	and	r24, r24
    84ca:	09 f0       	breq	.+2      	; 0x84ce <__vector_77+0x18c>
    84cc:	61 c0       	rjmp	.+194    	; 0x8590 <__vector_77+0x24e>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    84ce:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    84d2:	8c 77       	andi	r24, 0x7C	; 124
    84d4:	82 fd       	sbrc	r24, 2
    84d6:	5c c0       	rjmp	.+184    	; 0x8590 <__vector_77+0x24e>
    84d8:	e1 c4       	rjmp	.+2498   	; 0x8e9c <__vector_77+0xb5a>
        if(percentDiskUsed < 950){
    84da:	80 91 06 34 	lds	r24, 0x3406
    84de:	90 91 07 34 	lds	r25, 0x3407
    84e2:	a0 91 08 34 	lds	r26, 0x3408
    84e6:	b0 91 09 34 	lds	r27, 0x3409
    84ea:	86 5b       	subi	r24, 0xB6	; 182
    84ec:	93 40       	sbci	r25, 0x03	; 3
    84ee:	a0 40       	sbci	r26, 0x00	; 0
    84f0:	b0 40       	sbci	r27, 0x00	; 0
    84f2:	08 f0       	brcs	.+2      	; 0x84f6 <__vector_77+0x1b4>
    84f4:	46 c0       	rjmp	.+140    	; 0x8582 <__vector_77+0x240>
           display_putString("Recording      0m",0,0,System5x7);
    84f6:	8b e5       	ldi	r24, 0x5B	; 91
    84f8:	91 e2       	ldi	r25, 0x21	; 33
    84fa:	60 e0       	ldi	r22, 0x00	; 0
    84fc:	40 e0       	ldi	r20, 0x00	; 0
    84fe:	27 e0       	ldi	r18, 0x07	; 7
    8500:	31 e3       	ldi	r19, 0x31	; 49
    8502:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
            display_drawLine(1,60,7,60,true);		// up arrow
    8506:	81 e0       	ldi	r24, 0x01	; 1
    8508:	6c e3       	ldi	r22, 0x3C	; 60
    850a:	47 e0       	ldi	r20, 0x07	; 7
    850c:	2c e3       	ldi	r18, 0x3C	; 60
    850e:	01 e0       	ldi	r16, 0x01	; 1
    8510:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		    display_drawPixel(2,59,true);
    8514:	82 e0       	ldi	r24, 0x02	; 2
    8516:	6b e3       	ldi	r22, 0x3B	; 59
    8518:	41 e0       	ldi	r20, 0x01	; 1
    851a:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		    display_drawPixel(3,58,true);
    851e:	83 e0       	ldi	r24, 0x03	; 3
    8520:	6a e3       	ldi	r22, 0x3A	; 58
    8522:	41 e0       	ldi	r20, 0x01	; 1
    8524:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
            display_drawPixel(2,61,true);
    8528:	82 e0       	ldi	r24, 0x02	; 2
    852a:	6d e3       	ldi	r22, 0x3D	; 61
    852c:	41 e0       	ldi	r20, 0x01	; 1
    852e:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
            display_drawPixel(3,62,true);
    8532:	83 e0       	ldi	r24, 0x03	; 3
    8534:	6e e3       	ldi	r22, 0x3E	; 62
    8536:	41 e0       	ldi	r20, 0x01	; 1
    8538:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		    display_writeBufferToScreen();
    853c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>

            okToGetRemainingSpace = true;
    8540:	81 e0       	ldi	r24, 0x01	; 1
    8542:	80 93 28 4b 	sts	0x4B28, r24
            while(!okToGetRemainingSpace);
    8546:	80 91 28 4b 	lds	r24, 0x4B28
    854a:	88 23       	and	r24, r24
    854c:	e1 f3       	breq	.-8      	; 0x8546 <__vector_77+0x204>
    854e:	e0 e2       	ldi	r30, 0x20	; 32
    8550:	f6 e0       	ldi	r31, 0x06	; 6
    8552:	91 e0       	ldi	r25, 0x01	; 1
    8554:	96 83       	std	Z+6, r25	; 0x06
		    Leds_Clear(wifi_Green);
		    Leds_Clear(wifi_Red);
		    Leds_Clear(ext_Green);
		    Leds_Clear(ext_Red);

            okToOpenLogFile = true;
    8556:	82 e0       	ldi	r24, 0x02	; 2
    8558:	86 83       	std	Z+6, r24	; 0x06
    855a:	80 e4       	ldi	r24, 0x40	; 64
    855c:	86 83       	std	Z+6, r24	; 0x06
    855e:	80 e8       	ldi	r24, 0x80	; 128
    8560:	86 83       	std	Z+6, r24	; 0x06
    8562:	80 e1       	ldi	r24, 0x10	; 16
    8564:	86 83       	std	Z+6, r24	; 0x06
    8566:	80 e2       	ldi	r24, 0x20	; 32
    8568:	86 83       	std	Z+6, r24	; 0x06
    856a:	90 93 cc 33 	sts	0x33CC, r25
    856e:	84 ef       	ldi	r24, 0xF4	; 244
    8570:	91 e0       	ldi	r25, 0x01	; 1
    8572:	20 e7       	ldi	r18, 0x70	; 112
    8574:	31 e0       	ldi	r19, 0x01	; 1
    8576:	f9 01       	movw	r30, r18
    8578:	31 97       	sbiw	r30, 0x01	; 1
    857a:	f1 f7       	brne	.-4      	; 0x8578 <__vector_77+0x236>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    857c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    857e:	d9 f7       	brne	.-10     	; 0x8576 <__vector_77+0x234>
    8580:	94 c0       	rjmp	.+296    	; 0x86aa <__vector_77+0x368>
    8582:	e0 e2       	ldi	r30, 0x20	; 32
    8584:	f6 e0       	ldi	r31, 0x06	; 6
    8586:	81 e0       	ldi	r24, 0x01	; 1
    8588:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    858a:	82 e0       	ldi	r24, 0x02	; 2
    858c:	85 83       	std	Z+5, r24	; 0x05
    858e:	8d c0       	rjmp	.+282    	; 0x86aa <__vector_77+0x368>
		   Leds_Set(sd_Red);

        }


	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){								// pause recording
    8590:	80 91 c5 33 	lds	r24, 0x33C5
    8594:	88 23       	and	r24, r24
    8596:	09 f0       	breq	.+2      	; 0x859a <__vector_77+0x258>
    8598:	88 c0       	rjmp	.+272    	; 0x86aa <__vector_77+0x368>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    859a:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    859e:	8c 77       	andi	r24, 0x7C	; 124
    85a0:	82 fd       	sbrc	r24, 2
    85a2:	83 c0       	rjmp	.+262    	; 0x86aa <__vector_77+0x368>
    85a4:	81 c4       	rjmp	.+2306   	; 0x8ea8 <__vector_77+0xb66>
		rs232Recording = false;
    85a6:	10 92 96 33 	sts	0x3396, r1
		recording = false;
    85aa:	10 92 a1 33 	sts	0x33A1, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    85ae:	10 92 a5 33 	sts	0x33A5, r1
  	temperatureBufferToWriteTo = 1;
    85b2:	81 e0       	ldi	r24, 0x01	; 1
    85b4:	80 93 ec 2f 	sts	0x2FEC, r24
	okToSendTemperatureBuffer1 = false;
    85b8:	10 92 a3 33 	sts	0x33A3, r1
	okToSendTemperatureBuffer2 = false;
    85bc:	10 92 a4 33 	sts	0x33A4, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    85c0:	10 92 ab 33 	sts	0x33AB, r1
	humidityBufferToWriteTo = 1;
    85c4:	80 93 ee 2f 	sts	0x2FEE, r24
	okToSendHumidityBuffer1 = false;
    85c8:	10 92 a9 33 	sts	0x33A9, r1
	okToSendHumidityBuffer2 = false;
    85cc:	10 92 aa 33 	sts	0x33AA, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    85d0:	10 92 a8 33 	sts	0x33A8, r1
	pressureBufferToWriteTo = 1;
    85d4:	80 93 ed 2f 	sts	0x2FED, r24
	okToSendPressureBuffer1 = false;
    85d8:	10 92 a6 33 	sts	0x33A6, r1
	okToSendPressureBuffer2 = false;
    85dc:	10 92 a7 33 	sts	0x33A7, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    85e0:	10 92 ae 33 	sts	0x33AE, r1
    85e4:	10 92 af 33 	sts	0x33AF, r1
	microphoneBufferToWriteTo = 1;
    85e8:	80 93 ef 2f 	sts	0x2FEF, r24
	okToSendMicrophoneBuffer1 = false;
    85ec:	10 92 ac 33 	sts	0x33AC, r1
	okToSendMicrophoneBuffer2 = false;
    85f0:	10 92 ad 33 	sts	0x33AD, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    85f4:	10 92 b2 33 	sts	0x33B2, r1
	lightBufferToWriteTo = 1;
    85f8:	80 93 f0 2f 	sts	0x2FF0, r24
	okToSendLightBuffer1 = false;
    85fc:	10 92 b0 33 	sts	0x33B0, r1
	okToSendLightBuffer2 = false;
    8600:	10 92 b1 33 	sts	0x33B1, r1
		Sensors_ResetTemperatureBuffers();
		Sensors_ResetHumidityBuffers();
		Sensors_ResetPressureBuffers();
		Sensors_ResetMicrophoneBuffers();
		Sensors_ResetLightBuffers();
		okToCloseLogFile = true;
    8604:	80 93 ce 33 	sts	0x33CE, r24


		display_putString("Paused           ",0,0,System5x7);
    8608:	8d e6       	ldi	r24, 0x6D	; 109
    860a:	91 e2       	ldi	r25, 0x21	; 33
    860c:	60 e0       	ldi	r22, 0x00	; 0
    860e:	40 e0       	ldi	r20, 0x00	; 0
    8610:	27 e0       	ldi	r18, 0x07	; 7
    8612:	31 e3       	ldi	r19, 0x31	; 49
    8614:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		display_drawLine(1,60,7,60,true);		// up arrow
    8618:	81 e0       	ldi	r24, 0x01	; 1
    861a:	6c e3       	ldi	r22, 0x3C	; 60
    861c:	47 e0       	ldi	r20, 0x07	; 7
    861e:	2c e3       	ldi	r18, 0x3C	; 60
    8620:	01 e0       	ldi	r16, 0x01	; 1
    8622:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawPixel(2,59,true);
    8626:	82 e0       	ldi	r24, 0x02	; 2
    8628:	6b e3       	ldi	r22, 0x3B	; 59
    862a:	41 e0       	ldi	r20, 0x01	; 1
    862c:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(3,58,true);
    8630:	83 e0       	ldi	r24, 0x03	; 3
    8632:	6a e3       	ldi	r22, 0x3A	; 58
    8634:	41 e0       	ldi	r20, 0x01	; 1
    8636:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(2,61,true);
    863a:	82 e0       	ldi	r24, 0x02	; 2
    863c:	6d e3       	ldi	r22, 0x3D	; 61
    863e:	41 e0       	ldi	r20, 0x01	; 1
    8640:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(3,62,true);
    8644:	83 e0       	ldi	r24, 0x03	; 3
    8646:	6e e3       	ldi	r22, 0x3E	; 62
    8648:	41 e0       	ldi	r20, 0x01	; 1
    864a:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_writeBufferToScreen();
    864e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>

        if(timeIsValid || demoMode){
    8652:	80 91 dd 33 	lds	r24, 0x33DD
    8656:	88 23       	and	r24, r24
    8658:	21 f4       	brne	.+8      	; 0x8662 <__vector_77+0x320>
    865a:	80 91 6c 33 	lds	r24, 0x336C
    865e:	88 23       	and	r24, r24
    8660:	11 f0       	breq	.+4      	; 0x8666 <__vector_77+0x324>
    8662:	80 e4       	ldi	r24, 0x40	; 64
    8664:	01 c0       	rjmp	.+2      	; 0x8668 <__vector_77+0x326>
    8666:	80 e8       	ldi	r24, 0x80	; 128
    8668:	e0 e2       	ldi	r30, 0x20	; 32
    866a:	f6 e0       	ldi	r31, 0x06	; 6
    866c:	85 83       	std	Z+5, r24	; 0x05
    866e:	80 91 a8 06 	lds	r24, 0x06A8
    8672:	80 ff       	sbrs	r24, 0
    8674:	1f c4       	rjmp	.+2110   	; 0x8eb4 <__vector_77+0xb72>
    8676:	82 e0       	ldi	r24, 0x02	; 2
    8678:	e0 e2       	ldi	r30, 0x20	; 32
    867a:	f6 e0       	ldi	r31, 0x06	; 6
    867c:	85 83       	std	Z+5, r24	; 0x05
		if(SD_Inserted()){
			Leds_Set(sd_Green);
		} else {
			Leds_Set(sd_Red);
		}
		if(!chargeComplete && SD2_Inserted()){
    867e:	80 91 9a 33 	lds	r24, 0x339A
    8682:	88 23       	and	r24, r24
    8684:	29 f4       	brne	.+10     	; 0x8690 <__vector_77+0x34e>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    8686:	80 91 a8 06 	lds	r24, 0x06A8
    868a:	81 fd       	sbrc	r24, 1
    868c:	05 c0       	rjmp	.+10     	; 0x8698 <__vector_77+0x356>
    868e:	14 c4       	rjmp	.+2088   	; 0x8eb8 <__vector_77+0xb76>
    8690:	80 91 a8 06 	lds	r24, 0x06A8
    8694:	81 ff       	sbrs	r24, 1
    8696:	15 c4       	rjmp	.+2090   	; 0x8ec2 <__vector_77+0xb80>
    8698:	88 e8       	ldi	r24, 0x88	; 136
    869a:	93 e1       	ldi	r25, 0x13	; 19
    869c:	20 e7       	ldi	r18, 0x70	; 112
    869e:	31 e0       	ldi	r19, 0x01	; 1
    86a0:	f9 01       	movw	r30, r18
    86a2:	31 97       	sbiw	r30, 0x01	; 1
    86a4:	f1 f7       	brne	.-4      	; 0x86a2 <__vector_77+0x360>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    86a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    86a8:	d9 f7       	brne	.-10     	; 0x86a0 <__vector_77+0x35e>
		_delay_ms(500);
	}

	// load displays

	if(currentMode == recordMode){																		// show record screen
    86aa:	80 91 c5 33 	lds	r24, 0x33C5
    86ae:	88 23       	and	r24, r24
    86b0:	09 f0       	breq	.+2      	; 0x86b4 <__vector_77+0x372>
    86b2:	6f c2       	rjmp	.+1246   	; 0x8b92 <__vector_77+0x850>

		if(recording){
    86b4:	80 91 a1 33 	lds	r24, 0x33A1
    86b8:	88 23       	and	r24, r24
    86ba:	09 f4       	brne	.+2      	; 0x86be <__vector_77+0x37c>
    86bc:	40 c0       	rjmp	.+128    	; 0x873e <__vector_77+0x3fc>
			sprintf(temp2, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    86be:	60 91 9c 33 	lds	r22, 0x339C
    86c2:	70 91 9d 33 	lds	r23, 0x339D
    86c6:	80 91 9e 33 	lds	r24, 0x339E
    86ca:	90 91 9f 33 	lds	r25, 0x339F
    86ce:	ad b7       	in	r26, 0x3d	; 61
    86d0:	be b7       	in	r27, 0x3e	; 62
    86d2:	18 97       	sbiw	r26, 0x08	; 8
    86d4:	ad bf       	out	0x3d, r26	; 61
    86d6:	be bf       	out	0x3e, r27	; 62
    86d8:	0d b7       	in	r16, 0x3d	; 61
    86da:	1e b7       	in	r17, 0x3e	; 62
    86dc:	0f 5f       	subi	r16, 0xFF	; 255
    86de:	1f 4f       	sbci	r17, 0xFF	; 255
    86e0:	2f ed       	ldi	r18, 0xDF	; 223
    86e2:	e2 2e       	mov	r14, r18
    86e4:	2c e3       	ldi	r18, 0x3C	; 60
    86e6:	f2 2e       	mov	r15, r18
    86e8:	11 96       	adiw	r26, 0x01	; 1
    86ea:	ed 92       	st	X+, r14
    86ec:	fc 92       	st	X, r15
    86ee:	12 97       	sbiw	r26, 0x02	; 2
    86f0:	2f e7       	ldi	r18, 0x7F	; 127
    86f2:	31 e2       	ldi	r19, 0x21	; 33
    86f4:	f8 01       	movw	r30, r16
    86f6:	22 83       	std	Z+2, r18	; 0x02
    86f8:	33 83       	std	Z+3, r19	; 0x03
    86fa:	20 91 68 33 	lds	r18, 0x3368
    86fe:	30 91 69 33 	lds	r19, 0x3369
    8702:	40 91 6a 33 	lds	r20, 0x336A
    8706:	50 91 6b 33 	lds	r21, 0x336B
    870a:	62 1b       	sub	r22, r18
    870c:	73 0b       	sbc	r23, r19
    870e:	84 0b       	sbc	r24, r20
    8710:	95 0b       	sbc	r25, r21
    8712:	2c e3       	ldi	r18, 0x3C	; 60
    8714:	30 e0       	ldi	r19, 0x00	; 0
    8716:	40 e0       	ldi	r20, 0x00	; 0
    8718:	50 e0       	ldi	r21, 0x00	; 0
    871a:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    871e:	d8 01       	movw	r26, r16
    8720:	14 96       	adiw	r26, 0x04	; 4
    8722:	2d 93       	st	X+, r18
    8724:	3d 93       	st	X+, r19
    8726:	4d 93       	st	X+, r20
    8728:	5c 93       	st	X, r21
    872a:	17 97       	sbiw	r26, 0x07	; 7
    872c:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
			display_putString(temp2,0,0,System5x7);
    8730:	ed b7       	in	r30, 0x3d	; 61
    8732:	fe b7       	in	r31, 0x3e	; 62
    8734:	38 96       	adiw	r30, 0x08	; 8
    8736:	ed bf       	out	0x3d, r30	; 61
    8738:	fe bf       	out	0x3e, r31	; 62
    873a:	c7 01       	movw	r24, r14
    873c:	02 c0       	rjmp	.+4      	; 0x8742 <__vector_77+0x400>
		} else {
			display_putString("Paused           ",0,0,System5x7);
    873e:	8d e6       	ldi	r24, 0x6D	; 109
    8740:	91 e2       	ldi	r25, 0x21	; 33
    8742:	60 e0       	ldi	r22, 0x00	; 0
    8744:	40 e0       	ldi	r20, 0x00	; 0
    8746:	27 e0       	ldi	r18, 0x07	; 7
    8748:	31 e3       	ldi	r19, 0x31	; 49
    874a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		}

		display_drawLine(1,60,7,60,true);		// up arrow
    874e:	81 e0       	ldi	r24, 0x01	; 1
    8750:	6c e3       	ldi	r22, 0x3C	; 60
    8752:	47 e0       	ldi	r20, 0x07	; 7
    8754:	2c e3       	ldi	r18, 0x3C	; 60
    8756:	01 e0       	ldi	r16, 0x01	; 1
    8758:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawPixel(2,59,true);
    875c:	82 e0       	ldi	r24, 0x02	; 2
    875e:	6b e3       	ldi	r22, 0x3B	; 59
    8760:	41 e0       	ldi	r20, 0x01	; 1
    8762:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(3,58,true);
    8766:	83 e0       	ldi	r24, 0x03	; 3
    8768:	6a e3       	ldi	r22, 0x3A	; 58
    876a:	41 e0       	ldi	r20, 0x01	; 1
    876c:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(2,61,true);
    8770:	82 e0       	ldi	r24, 0x02	; 2
    8772:	6d e3       	ldi	r22, 0x3D	; 61
    8774:	41 e0       	ldi	r20, 0x01	; 1
    8776:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(3,62,true);
    877a:	83 e0       	ldi	r24, 0x03	; 3
    877c:	6e e3       	ldi	r22, 0x3E	; 62
    877e:	41 e0       	ldi	r20, 0x01	; 1
    8780:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>

		sprintf(temp2, "Uploading    %3u", uploadPercentBS);
    8784:	00 d0       	rcall	.+0      	; 0x8786 <__vector_77+0x444>
    8786:	00 d0       	rcall	.+0      	; 0x8788 <__vector_77+0x446>
    8788:	ed b7       	in	r30, 0x3d	; 61
    878a:	fe b7       	in	r31, 0x3e	; 62
    878c:	31 96       	adiw	r30, 0x01	; 1
    878e:	9f ed       	ldi	r25, 0xDF	; 223
    8790:	a9 2e       	mov	r10, r25
    8792:	9c e3       	ldi	r25, 0x3C	; 60
    8794:	b9 2e       	mov	r11, r25
    8796:	ad b7       	in	r26, 0x3d	; 61
    8798:	be b7       	in	r27, 0x3e	; 62
    879a:	11 96       	adiw	r26, 0x01	; 1
    879c:	ad 92       	st	X+, r10
    879e:	bc 92       	st	X, r11
    87a0:	12 97       	sbiw	r26, 0x02	; 2
    87a2:	81 e9       	ldi	r24, 0x91	; 145
    87a4:	91 e2       	ldi	r25, 0x21	; 33
    87a6:	82 83       	std	Z+2, r24	; 0x02
    87a8:	93 83       	std	Z+3, r25	; 0x03
    87aa:	80 91 c9 33 	lds	r24, 0x33C9
    87ae:	84 83       	std	Z+4, r24	; 0x04
    87b0:	15 82       	std	Z+5, r1	; 0x05
    87b2:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		strcat(temp2,"%");
    87b6:	ed b7       	in	r30, 0x3d	; 61
    87b8:	fe b7       	in	r31, 0x3e	; 62
    87ba:	36 96       	adiw	r30, 0x06	; 6
    87bc:	ed bf       	out	0x3d, r30	; 61
    87be:	fe bf       	out	0x3e, r31	; 62
    87c0:	c5 01       	movw	r24, r10
    87c2:	62 ea       	ldi	r22, 0xA2	; 162
    87c4:	71 e2       	ldi	r23, 0x21	; 33
    87c6:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
		display_putString(temp2,1,0,System5x7);
    87ca:	c5 01       	movw	r24, r10
    87cc:	61 e0       	ldi	r22, 0x01	; 1
    87ce:	40 e0       	ldi	r20, 0x00	; 0
    87d0:	27 e0       	ldi	r18, 0x07	; 7
    87d2:	31 e3       	ldi	r19, 0x31	; 49
    87d4:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
        sprintf(temp2,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
    87d8:	c0 90 06 34 	lds	r12, 0x3406
    87dc:	d0 90 07 34 	lds	r13, 0x3407
    87e0:	e0 90 08 34 	lds	r14, 0x3408
    87e4:	f0 90 09 34 	lds	r15, 0x3409
    87e8:	2d b7       	in	r18, 0x3d	; 61
    87ea:	3e b7       	in	r19, 0x3e	; 62
    87ec:	2c 50       	subi	r18, 0x0C	; 12
    87ee:	30 40       	sbci	r19, 0x00	; 0
    87f0:	2d bf       	out	0x3d, r18	; 61
    87f2:	3e bf       	out	0x3e, r19	; 62
    87f4:	0d b7       	in	r16, 0x3d	; 61
    87f6:	1e b7       	in	r17, 0x3e	; 62
    87f8:	0f 5f       	subi	r16, 0xFF	; 255
    87fa:	1f 4f       	sbci	r17, 0xFF	; 255
    87fc:	ad b7       	in	r26, 0x3d	; 61
    87fe:	be b7       	in	r27, 0x3e	; 62
    8800:	11 96       	adiw	r26, 0x01	; 1
    8802:	ad 92       	st	X+, r10
    8804:	bc 92       	st	X, r11
    8806:	12 97       	sbiw	r26, 0x02	; 2
    8808:	84 ea       	ldi	r24, 0xA4	; 164
    880a:	91 e2       	ldi	r25, 0x21	; 33
    880c:	f8 01       	movw	r30, r16
    880e:	82 83       	std	Z+2, r24	; 0x02
    8810:	93 83       	std	Z+3, r25	; 0x03
    8812:	c7 01       	movw	r24, r14
    8814:	b6 01       	movw	r22, r12
    8816:	2a e0       	ldi	r18, 0x0A	; 10
    8818:	30 e0       	ldi	r19, 0x00	; 0
    881a:	40 e0       	ldi	r20, 0x00	; 0
    881c:	50 e0       	ldi	r21, 0x00	; 0
    881e:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    8822:	d8 01       	movw	r26, r16
    8824:	14 96       	adiw	r26, 0x04	; 4
    8826:	2d 93       	st	X+, r18
    8828:	3d 93       	st	X+, r19
    882a:	4d 93       	st	X+, r20
    882c:	5c 93       	st	X, r21
    882e:	17 97       	sbiw	r26, 0x07	; 7
    8830:	c7 01       	movw	r24, r14
    8832:	b6 01       	movw	r22, r12
    8834:	2a e0       	ldi	r18, 0x0A	; 10
    8836:	30 e0       	ldi	r19, 0x00	; 0
    8838:	40 e0       	ldi	r20, 0x00	; 0
    883a:	50 e0       	ldi	r21, 0x00	; 0
    883c:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    8840:	f8 01       	movw	r30, r16
    8842:	60 87       	std	Z+8, r22	; 0x08
    8844:	71 87       	std	Z+9, r23	; 0x09
    8846:	82 87       	std	Z+10, r24	; 0x0a
    8848:	93 87       	std	Z+11, r25	; 0x0b
    884a:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		strcat(temp2,"%");
    884e:	2d b7       	in	r18, 0x3d	; 61
    8850:	3e b7       	in	r19, 0x3e	; 62
    8852:	24 5f       	subi	r18, 0xF4	; 244
    8854:	3f 4f       	sbci	r19, 0xFF	; 255
    8856:	2d bf       	out	0x3d, r18	; 61
    8858:	3e bf       	out	0x3e, r19	; 62
    885a:	c5 01       	movw	r24, r10
    885c:	62 ea       	ldi	r22, 0xA2	; 162
    885e:	71 e2       	ldi	r23, 0x21	; 33
    8860:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
		display_putString(temp2,2,0,System5x7);
    8864:	c5 01       	movw	r24, r10
    8866:	62 e0       	ldi	r22, 0x02	; 2
    8868:	40 e0       	ldi	r20, 0x00	; 0
    886a:	27 e0       	ldi	r18, 0x07	; 7
    886c:	31 e3       	ldi	r19, 0x31	; 49
    886e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>




		if(chargePercent == 100){
    8872:	80 91 97 33 	lds	r24, 0x3397
    8876:	84 36       	cpi	r24, 0x64	; 100
    8878:	29 f4       	brne	.+10     	; 0x8884 <__vector_77+0x542>
			chargeComplete = true;
    887a:	81 e0       	ldi	r24, 0x01	; 1
    887c:	80 93 9a 33 	sts	0x339A, r24
			okToCharge  = false;
    8880:	10 92 9b 33 	sts	0x339B, r1
    8884:	80 91 a8 06 	lds	r24, 0x06A8
    8888:	81 fd       	sbrc	r24, 1
    888a:	13 c0       	rjmp	.+38     	; 0x88b2 <__vector_77+0x570>
    888c:	21 c3       	rjmp	.+1602   	; 0x8ed0 <__vector_77+0xb8e>
		}


		if(SD2_Inserted() && chargeComplete){
			display_putString("Ext Charged      ",3,0,System5x7);
    888e:	88 eb       	ldi	r24, 0xB8	; 184
    8890:	91 e2       	ldi	r25, 0x21	; 33
    8892:	63 e0       	ldi	r22, 0x03	; 3
    8894:	40 e0       	ldi	r20, 0x00	; 0
    8896:	27 e0       	ldi	r18, 0x07	; 7
    8898:	31 e3       	ldi	r19, 0x31	; 49
    889a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
			if(!recording){
    889e:	80 91 a1 33 	lds	r24, 0x33A1
    88a2:	88 23       	and	r24, r24
    88a4:	09 f0       	breq	.+2      	; 0x88a8 <__vector_77+0x566>
    88a6:	89 c0       	rjmp	.+274    	; 0x89ba <__vector_77+0x678>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    88a8:	e0 e2       	ldi	r30, 0x20	; 32
    88aa:	f6 e0       	ldi	r31, 0x06	; 6
    88ac:	80 e2       	ldi	r24, 0x20	; 32
    88ae:	86 83       	std	Z+6, r24	; 0x06
    88b0:	6d c0       	rjmp	.+218    	; 0x898c <__vector_77+0x64a>
    88b2:	80 91 a8 06 	lds	r24, 0x06A8
    88b6:	81 fd       	sbrc	r24, 1
    88b8:	6c c0       	rjmp	.+216    	; 0x8992 <__vector_77+0x650>
    88ba:	10 c3       	rjmp	.+1568   	; 0x8edc <__vector_77+0xb9a>
				Leds_Clear(ext_Red);
				Leds_Set(ext_Green);
			}
		} else if(SD2_Inserted() && !chargeComplete){
			sprintf(temp2, "Ext Charging  %2u",chargePercent);
    88bc:	00 d0       	rcall	.+0      	; 0x88be <__vector_77+0x57c>
    88be:	00 d0       	rcall	.+0      	; 0x88c0 <__vector_77+0x57e>
    88c0:	ed b7       	in	r30, 0x3d	; 61
    88c2:	fe b7       	in	r31, 0x3e	; 62
    88c4:	31 96       	adiw	r30, 0x01	; 1
    88c6:	0f ed       	ldi	r16, 0xDF	; 223
    88c8:	1c e3       	ldi	r17, 0x3C	; 60
    88ca:	ad b7       	in	r26, 0x3d	; 61
    88cc:	be b7       	in	r27, 0x3e	; 62
    88ce:	11 96       	adiw	r26, 0x01	; 1
    88d0:	0d 93       	st	X+, r16
    88d2:	1c 93       	st	X, r17
    88d4:	12 97       	sbiw	r26, 0x02	; 2
    88d6:	8a ec       	ldi	r24, 0xCA	; 202
    88d8:	91 e2       	ldi	r25, 0x21	; 33
    88da:	82 83       	std	Z+2, r24	; 0x02
    88dc:	93 83       	std	Z+3, r25	; 0x03
    88de:	80 91 97 33 	lds	r24, 0x3397
    88e2:	84 83       	std	Z+4, r24	; 0x04
    88e4:	15 82       	std	Z+5, r1	; 0x05
    88e6:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
			strcat(temp2,"%");
    88ea:	ed b7       	in	r30, 0x3d	; 61
    88ec:	fe b7       	in	r31, 0x3e	; 62
    88ee:	36 96       	adiw	r30, 0x06	; 6
    88f0:	ed bf       	out	0x3d, r30	; 61
    88f2:	fe bf       	out	0x3e, r31	; 62
    88f4:	c8 01       	movw	r24, r16
    88f6:	62 ea       	ldi	r22, 0xA2	; 162
    88f8:	71 e2       	ldi	r23, 0x21	; 33
    88fa:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
			display_putString(temp2,3,0,System5x7);
    88fe:	c8 01       	movw	r24, r16
    8900:	63 e0       	ldi	r22, 0x03	; 3
    8902:	40 e0       	ldi	r20, 0x00	; 0
    8904:	27 e0       	ldi	r18, 0x07	; 7
    8906:	31 e3       	ldi	r19, 0x31	; 49
    8908:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
			okToCharge = true;
    890c:	81 e0       	ldi	r24, 0x01	; 1
    890e:	80 93 9b 33 	sts	0x339B, r24
			if(!rtcSynced){
    8912:	80 91 cb 33 	lds	r24, 0x33CB
    8916:	88 23       	and	r24, r24
    8918:	89 f5       	brne	.+98     	; 0x897c <__vector_77+0x63a>
    891a:	88 e8       	ldi	r24, 0x88	; 136
    891c:	93 e1       	ldi	r25, 0x13	; 19
    891e:	20 e7       	ldi	r18, 0x70	; 112
    8920:	31 e0       	ldi	r19, 0x01	; 1
    8922:	f9 01       	movw	r30, r18
    8924:	31 97       	sbiw	r30, 0x01	; 1
    8926:	f1 f7       	brne	.-4      	; 0x8924 <__vector_77+0x5e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8928:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    892a:	d9 f7       	brne	.-10     	; 0x8922 <__vector_77+0x5e0>
			    _delay_ms(500);
			    if(useWifiForUploading){
    892c:	80 91 6d 33 	lds	r24, 0x336D
    8930:	88 23       	and	r24, r24
    8932:	29 f0       	breq	.+10     	; 0x893e <__vector_77+0x5fc>
			      Debug_SendString("Syncing RTC", true);
    8934:	8c ed       	ldi	r24, 0xDC	; 220
    8936:	91 e2       	ldi	r25, 0x21	; 33
    8938:	61 e0       	ldi	r22, 0x01	; 1
    893a:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    893e:	e0 ea       	ldi	r30, 0xA0	; 160
    8940:	f4 e0       	ldi	r31, 0x04	; 4
    8942:	88 e0       	ldi	r24, 0x08	; 8
    8944:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    8946:	84 e0       	ldi	r24, 0x04	; 4
    8948:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    894a:	8f e0       	ldi	r24, 0x0F	; 15
    894c:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    894e:	11 e0       	ldi	r17, 0x01	; 1
    8950:	14 83       	std	Z+4, r17	; 0x04
			    }
				RTC_init();
				RTC_setUTCSecs(UNIX_time);
    8952:	60 91 9c 33 	lds	r22, 0x339C
    8956:	70 91 9d 33 	lds	r23, 0x339D
    895a:	80 91 9e 33 	lds	r24, 0x339E
    895e:	90 91 9f 33 	lds	r25, 0x339F
    8962:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <RTC_setUTCSecs>
				rtcSynced = true;
    8966:	10 93 cb 33 	sts	0x33CB, r17
				if(useWifiForUploading){
    896a:	80 91 6d 33 	lds	r24, 0x336D
    896e:	88 23       	and	r24, r24
    8970:	29 f0       	breq	.+10     	; 0x897c <__vector_77+0x63a>
				    Debug_SendString("RTC synced", true);
    8972:	88 ee       	ldi	r24, 0xE8	; 232
    8974:	91 e2       	ldi	r25, 0x21	; 33
    8976:	61 e0       	ldi	r22, 0x01	; 1
    8978:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				}
			}
			if(!recording){
    897c:	80 91 a1 33 	lds	r24, 0x33A1
    8980:	88 23       	and	r24, r24
    8982:	d9 f4       	brne	.+54     	; 0x89ba <__vector_77+0x678>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8984:	e0 e2       	ldi	r30, 0x20	; 32
    8986:	f6 e0       	ldi	r31, 0x06	; 6
    8988:	80 e2       	ldi	r24, 0x20	; 32
    898a:	85 83       	std	Z+5, r24	; 0x05
				Leds_Set(ext_Red);
				Leds_Set(ext_Green);
			}
		}else{
			display_putString("Ext Removed      ",3,0,System5x7);
    898c:	80 e1       	ldi	r24, 0x10	; 16
    898e:	85 83       	std	Z+5, r24	; 0x05
    8990:	14 c0       	rjmp	.+40     	; 0x89ba <__vector_77+0x678>
    8992:	83 ef       	ldi	r24, 0xF3	; 243
    8994:	91 e2       	ldi	r25, 0x21	; 33
    8996:	63 e0       	ldi	r22, 0x03	; 3
    8998:	40 e0       	ldi	r20, 0x00	; 0
    899a:	27 e0       	ldi	r18, 0x07	; 7
    899c:	31 e3       	ldi	r19, 0x31	; 49
    899e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
			chargePercent = 0;
    89a2:	10 92 97 33 	sts	0x3397, r1
			chargeComplete = false;
    89a6:	10 92 9a 33 	sts	0x339A, r1
			rtcSynced = false;
    89aa:	10 92 cb 33 	sts	0x33CB, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    89ae:	e0 e2       	ldi	r30, 0x20	; 32
    89b0:	f6 e0       	ldi	r31, 0x06	; 6
    89b2:	80 e2       	ldi	r24, 0x20	; 32
    89b4:	86 83       	std	Z+6, r24	; 0x06
			Leds_Clear(ext_Red);
			Leds_Clear(ext_Green);
		}


		sprintf(temp2, "Uploading    %3u", uploadPercentEXT);
    89b6:	80 e1       	ldi	r24, 0x10	; 16
    89b8:	86 83       	std	Z+6, r24	; 0x06
    89ba:	00 d0       	rcall	.+0      	; 0x89bc <__vector_77+0x67a>
    89bc:	00 d0       	rcall	.+0      	; 0x89be <__vector_77+0x67c>
    89be:	ed b7       	in	r30, 0x3d	; 61
    89c0:	fe b7       	in	r31, 0x3e	; 62
    89c2:	31 96       	adiw	r30, 0x01	; 1
    89c4:	0f ed       	ldi	r16, 0xDF	; 223
    89c6:	1c e3       	ldi	r17, 0x3C	; 60
    89c8:	ad b7       	in	r26, 0x3d	; 61
    89ca:	be b7       	in	r27, 0x3e	; 62
    89cc:	11 96       	adiw	r26, 0x01	; 1
    89ce:	0d 93       	st	X+, r16
    89d0:	1c 93       	st	X, r17
    89d2:	12 97       	sbiw	r26, 0x02	; 2
    89d4:	81 e9       	ldi	r24, 0x91	; 145
    89d6:	91 e2       	ldi	r25, 0x21	; 33
    89d8:	82 83       	std	Z+2, r24	; 0x02
    89da:	93 83       	std	Z+3, r25	; 0x03
    89dc:	80 91 ca 33 	lds	r24, 0x33CA
    89e0:	84 83       	std	Z+4, r24	; 0x04
    89e2:	15 82       	std	Z+5, r1	; 0x05
    89e4:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		strcat(temp2,"%");
    89e8:	ed b7       	in	r30, 0x3d	; 61
    89ea:	fe b7       	in	r31, 0x3e	; 62
    89ec:	36 96       	adiw	r30, 0x06	; 6
    89ee:	ed bf       	out	0x3d, r30	; 61
    89f0:	fe bf       	out	0x3e, r31	; 62
    89f2:	c8 01       	movw	r24, r16
    89f4:	62 ea       	ldi	r22, 0xA2	; 162
    89f6:	71 e2       	ldi	r23, 0x21	; 33
    89f8:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
		display_putString(temp2,4,0,System5x7);
    89fc:	c8 01       	movw	r24, r16
    89fe:	64 e0       	ldi	r22, 0x04	; 4
    8a00:	40 e0       	ldi	r20, 0x00	; 0
    8a02:	27 e0       	ldi	r18, 0x07	; 7
    8a04:	31 e3       	ldi	r19, 0x31	; 49
    8a06:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>


		RTC_UTCSecsToTime(UNIX_time,&time);
    8a0a:	60 91 9c 33 	lds	r22, 0x339C
    8a0e:	70 91 9d 33 	lds	r23, 0x339D
    8a12:	80 91 9e 33 	lds	r24, 0x339E
    8a16:	90 91 9f 33 	lds	r25, 0x339F
    8a1a:	44 e3       	ldi	r20, 0x34	; 52
    8a1c:	5f e4       	ldi	r21, 0x4F	; 79
    8a1e:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <RTC_UTCSecsToTime>
		clockHour = time.Hour + 24;
		clockHour -= timeZoneShift;
    8a22:	90 91 37 4f 	lds	r25, 0x4F37
    8a26:	98 5e       	subi	r25, 0xE8	; 232
    8a28:	80 91 c3 33 	lds	r24, 0x33C3
    8a2c:	98 1b       	sub	r25, r24
    8a2e:	90 93 c4 33 	sts	0x33C4, r25
		if(clockHour > 24){
    8a32:	99 31       	cpi	r25, 0x19	; 25
    8a34:	18 f0       	brcs	.+6      	; 0x8a3c <__vector_77+0x6fa>
			clockHour -= 24;
    8a36:	98 51       	subi	r25, 0x18	; 24
    8a38:	90 93 c4 33 	sts	0x33C4, r25
		}

        if(clockHour == 0){
    8a3c:	90 91 c4 33 	lds	r25, 0x33C4
    8a40:	99 23       	and	r25, r25
    8a42:	49 f4       	brne	.+18     	; 0x8a56 <__vector_77+0x714>
            displayAM = true;
    8a44:	81 e0       	ldi	r24, 0x01	; 1
    8a46:	80 93 de 33 	sts	0x33DE, r24
            displayPM = false;
    8a4a:	10 92 df 33 	sts	0x33DF, r1
            clockHour += 12;
    8a4e:	8c e0       	ldi	r24, 0x0C	; 12
    8a50:	80 93 c4 33 	sts	0x33C4, r24
    8a54:	18 c0       	rjmp	.+48     	; 0x8a86 <__vector_77+0x744>
        } else if(clockHour == 12){
    8a56:	9c 30       	cpi	r25, 0x0C	; 12
    8a58:	31 f4       	brne	.+12     	; 0x8a66 <__vector_77+0x724>
           displayAM = false;
    8a5a:	10 92 de 33 	sts	0x33DE, r1
           displayPM = true;
    8a5e:	81 e0       	ldi	r24, 0x01	; 1
    8a60:	80 93 df 33 	sts	0x33DF, r24
    8a64:	10 c0       	rjmp	.+32     	; 0x8a86 <__vector_77+0x744>
        } else if(clockHour > 12){
    8a66:	9d 30       	cpi	r25, 0x0D	; 13
    8a68:	48 f0       	brcs	.+18     	; 0x8a7c <__vector_77+0x73a>
           displayAM = false;
    8a6a:	10 92 de 33 	sts	0x33DE, r1
           displayPM = true;
    8a6e:	81 e0       	ldi	r24, 0x01	; 1
    8a70:	80 93 df 33 	sts	0x33DF, r24
           clockHour -= 12;
    8a74:	9c 50       	subi	r25, 0x0C	; 12
    8a76:	90 93 c4 33 	sts	0x33C4, r25
    8a7a:	05 c0       	rjmp	.+10     	; 0x8a86 <__vector_77+0x744>
        }  else {
           displayAM = true;
    8a7c:	81 e0       	ldi	r24, 0x01	; 1
    8a7e:	80 93 de 33 	sts	0x33DE, r24
           displayPM = false;
    8a82:	10 92 df 33 	sts	0x33DF, r1
        }

        sprintf(temp2,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    8a86:	2d b7       	in	r18, 0x3d	; 61
    8a88:	3e b7       	in	r19, 0x3e	; 62
    8a8a:	2a 50       	subi	r18, 0x0A	; 10
    8a8c:	30 40       	sbci	r19, 0x00	; 0
    8a8e:	2d bf       	out	0x3d, r18	; 61
    8a90:	3e bf       	out	0x3e, r19	; 62
    8a92:	ed b7       	in	r30, 0x3d	; 61
    8a94:	fe b7       	in	r31, 0x3e	; 62
    8a96:	31 96       	adiw	r30, 0x01	; 1
    8a98:	0f ed       	ldi	r16, 0xDF	; 223
    8a9a:	1c e3       	ldi	r17, 0x3C	; 60
    8a9c:	ad b7       	in	r26, 0x3d	; 61
    8a9e:	be b7       	in	r27, 0x3e	; 62
    8aa0:	11 96       	adiw	r26, 0x01	; 1
    8aa2:	0d 93       	st	X+, r16
    8aa4:	1c 93       	st	X, r17
    8aa6:	12 97       	sbiw	r26, 0x02	; 2
    8aa8:	85 e0       	ldi	r24, 0x05	; 5
    8aaa:	92 e2       	ldi	r25, 0x22	; 34
    8aac:	82 83       	std	Z+2, r24	; 0x02
    8aae:	93 83       	std	Z+3, r25	; 0x03
    8ab0:	80 91 c4 33 	lds	r24, 0x33C4
    8ab4:	84 83       	std	Z+4, r24	; 0x04
    8ab6:	15 82       	std	Z+5, r1	; 0x05
    8ab8:	80 91 36 4f 	lds	r24, 0x4F36
    8abc:	86 83       	std	Z+6, r24	; 0x06
    8abe:	17 82       	std	Z+7, r1	; 0x07
    8ac0:	80 91 35 4f 	lds	r24, 0x4F35
    8ac4:	80 87       	std	Z+8, r24	; 0x08
    8ac6:	11 86       	std	Z+9, r1	; 0x09
    8ac8:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
        if(displayAM){
    8acc:	80 91 de 33 	lds	r24, 0x33DE
    8ad0:	ed b7       	in	r30, 0x3d	; 61
    8ad2:	fe b7       	in	r31, 0x3e	; 62
    8ad4:	3a 96       	adiw	r30, 0x0a	; 10
    8ad6:	ed bf       	out	0x3d, r30	; 61
    8ad8:	fe bf       	out	0x3e, r31	; 62
    8ada:	88 23       	and	r24, r24
    8adc:	21 f0       	breq	.+8      	; 0x8ae6 <__vector_77+0x7a4>
          strcat(temp2,am);
    8ade:	c8 01       	movw	r24, r16
    8ae0:	6b ef       	ldi	r22, 0xFB	; 251
    8ae2:	70 e3       	ldi	r23, 0x30	; 48
    8ae4:	07 c0       	rjmp	.+14     	; 0x8af4 <__vector_77+0x7b2>
        } else if(displayPM){
    8ae6:	80 91 df 33 	lds	r24, 0x33DF
    8aea:	88 23       	and	r24, r24
    8aec:	29 f0       	breq	.+10     	; 0x8af8 <__vector_77+0x7b6>
          strcat(temp2,pm);
    8aee:	c8 01       	movw	r24, r16
    8af0:	60 e0       	ldi	r22, 0x00	; 0
    8af2:	71 e3       	ldi	r23, 0x31	; 49
    8af4:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
        }
		display_putString(temp2,6,0,System5x7);
    8af8:	0f ed       	ldi	r16, 0xDF	; 223
    8afa:	1c e3       	ldi	r17, 0x3C	; 60
    8afc:	c8 01       	movw	r24, r16
    8afe:	66 e0       	ldi	r22, 0x06	; 6
    8b00:	40 e0       	ldi	r20, 0x00	; 0
    8b02:	27 e0       	ldi	r18, 0x07	; 7
    8b04:	31 e3       	ldi	r19, 0x31	; 49
    8b06:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>

		sprintf(temp2, "Wifi %3u",signalStrength);
    8b0a:	00 d0       	rcall	.+0      	; 0x8b0c <__vector_77+0x7ca>
    8b0c:	00 d0       	rcall	.+0      	; 0x8b0e <__vector_77+0x7cc>
    8b0e:	ed b7       	in	r30, 0x3d	; 61
    8b10:	fe b7       	in	r31, 0x3e	; 62
    8b12:	31 96       	adiw	r30, 0x01	; 1
    8b14:	ad b7       	in	r26, 0x3d	; 61
    8b16:	be b7       	in	r27, 0x3e	; 62
    8b18:	11 96       	adiw	r26, 0x01	; 1
    8b1a:	0d 93       	st	X+, r16
    8b1c:	1c 93       	st	X, r17
    8b1e:	12 97       	sbiw	r26, 0x02	; 2
    8b20:	89 e1       	ldi	r24, 0x19	; 25
    8b22:	92 e2       	ldi	r25, 0x22	; 34
    8b24:	82 83       	std	Z+2, r24	; 0x02
    8b26:	93 83       	std	Z+3, r25	; 0x03
    8b28:	80 91 c8 33 	lds	r24, 0x33C8
    8b2c:	84 83       	std	Z+4, r24	; 0x04
    8b2e:	15 82       	std	Z+5, r1	; 0x05
    8b30:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		strcat(temp2,"%   more");
    8b34:	ed b7       	in	r30, 0x3d	; 61
    8b36:	fe b7       	in	r31, 0x3e	; 62
    8b38:	36 96       	adiw	r30, 0x06	; 6
    8b3a:	ed bf       	out	0x3d, r30	; 61
    8b3c:	fe bf       	out	0x3e, r31	; 62
    8b3e:	c8 01       	movw	r24, r16
    8b40:	62 e2       	ldi	r22, 0x22	; 34
    8b42:	72 e2       	ldi	r23, 0x22	; 34
    8b44:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
		display_putString(temp2,7,0,System5x7);
    8b48:	c8 01       	movw	r24, r16
    8b4a:	67 e0       	ldi	r22, 0x07	; 7
    8b4c:	40 e0       	ldi	r20, 0x00	; 0
    8b4e:	27 e0       	ldi	r18, 0x07	; 7
    8b50:	31 e3       	ldi	r19, 0x31	; 49
    8b52:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>


		display_drawLine(56,98,63,98,true);		// down arrow
    8b56:	88 e3       	ldi	r24, 0x38	; 56
    8b58:	62 e6       	ldi	r22, 0x62	; 98
    8b5a:	4f e3       	ldi	r20, 0x3F	; 63
    8b5c:	22 e6       	ldi	r18, 0x62	; 98
    8b5e:	01 e0       	ldi	r16, 0x01	; 1
    8b60:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawPixel(62,97,true);
    8b64:	8e e3       	ldi	r24, 0x3E	; 62
    8b66:	61 e6       	ldi	r22, 0x61	; 97
    8b68:	41 e0       	ldi	r20, 0x01	; 1
    8b6a:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(61,96,true);
    8b6e:	8d e3       	ldi	r24, 0x3D	; 61
    8b70:	60 e6       	ldi	r22, 0x60	; 96
    8b72:	41 e0       	ldi	r20, 0x01	; 1
    8b74:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(62,99,true);
    8b78:	8e e3       	ldi	r24, 0x3E	; 62
    8b7a:	63 e6       	ldi	r22, 0x63	; 99
    8b7c:	41 e0       	ldi	r20, 0x01	; 1
    8b7e:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(61,100,true);
    8b82:	8d e3       	ldi	r24, 0x3D	; 61
    8b84:	64 e6       	ldi	r22, 0x64	; 100
    8b86:	41 e0       	ldi	r20, 0x01	; 1
    8b88:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>

		display_writeBufferToScreen();
    8b8c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    8b90:	b7 c1       	rjmp	.+878    	; 0x8f00 <__vector_77+0xbbe>



	} else if(currentMode == sensorMode){																// show sensor screen
    8b92:	a0 90 c5 33 	lds	r10, 0x33C5
    8b96:	f1 e0       	ldi	r31, 0x01	; 1
    8b98:	af 16       	cp	r10, r31
    8b9a:	09 f0       	breq	.+2      	; 0x8b9e <__vector_77+0x85c>
    8b9c:	b1 c1       	rjmp	.+866    	; 0x8f00 <__vector_77+0xbbe>

		display_clearBuffer();
    8b9e:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <display_clearBuffer>
		display_putString("   Sensors  back",0,0,System5x7);
    8ba2:	8b e2       	ldi	r24, 0x2B	; 43
    8ba4:	92 e2       	ldi	r25, 0x22	; 34
    8ba6:	60 e0       	ldi	r22, 0x00	; 0
    8ba8:	40 e0       	ldi	r20, 0x00	; 0
    8baa:	27 e0       	ldi	r18, 0x07	; 7
    8bac:	31 e3       	ldi	r19, 0x31	; 49
    8bae:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		display_drawLine(8, 15, 8,61,true);
    8bb2:	88 e0       	ldi	r24, 0x08	; 8
    8bb4:	6f e0       	ldi	r22, 0x0F	; 15
    8bb6:	48 e0       	ldi	r20, 0x08	; 8
    8bb8:	2d e3       	ldi	r18, 0x3D	; 61
    8bba:	01 e0       	ldi	r16, 0x01	; 1
    8bbc:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>

		display_drawLine(1,99,7,99,true);		// up arrow
    8bc0:	81 e0       	ldi	r24, 0x01	; 1
    8bc2:	63 e6       	ldi	r22, 0x63	; 99
    8bc4:	47 e0       	ldi	r20, 0x07	; 7
    8bc6:	23 e6       	ldi	r18, 0x63	; 99
    8bc8:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <display_drawLine>
		display_drawPixel(2,98,true);
    8bcc:	82 e0       	ldi	r24, 0x02	; 2
    8bce:	62 e6       	ldi	r22, 0x62	; 98
    8bd0:	41 e0       	ldi	r20, 0x01	; 1
    8bd2:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(3,97,true);
    8bd6:	83 e0       	ldi	r24, 0x03	; 3
    8bd8:	61 e6       	ldi	r22, 0x61	; 97
    8bda:	41 e0       	ldi	r20, 0x01	; 1
    8bdc:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(2,100,true);
    8be0:	82 e0       	ldi	r24, 0x02	; 2
    8be2:	64 e6       	ldi	r22, 0x64	; 100
    8be4:	41 e0       	ldi	r20, 0x01	; 1
    8be6:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>
		display_drawPixel(3,101,true);
    8bea:	83 e0       	ldi	r24, 0x03	; 3
    8bec:	65 e6       	ldi	r22, 0x65	; 101
    8bee:	41 e0       	ldi	r20, 0x01	; 1
    8bf0:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <display_drawPixel>

		sprintf(temp2,"Temperature: %3uC", quickTemperature);
    8bf4:	00 d0       	rcall	.+0      	; 0x8bf6 <__vector_77+0x8b4>
    8bf6:	00 d0       	rcall	.+0      	; 0x8bf8 <__vector_77+0x8b6>
    8bf8:	ed b7       	in	r30, 0x3d	; 61
    8bfa:	fe b7       	in	r31, 0x3e	; 62
    8bfc:	31 96       	adiw	r30, 0x01	; 1
    8bfe:	0f ed       	ldi	r16, 0xDF	; 223
    8c00:	1c e3       	ldi	r17, 0x3C	; 60
    8c02:	ad b7       	in	r26, 0x3d	; 61
    8c04:	be b7       	in	r27, 0x3e	; 62
    8c06:	11 96       	adiw	r26, 0x01	; 1
    8c08:	0d 93       	st	X+, r16
    8c0a:	1c 93       	st	X, r17
    8c0c:	12 97       	sbiw	r26, 0x02	; 2
    8c0e:	8c e3       	ldi	r24, 0x3C	; 60
    8c10:	92 e2       	ldi	r25, 0x22	; 34
    8c12:	82 83       	std	Z+2, r24	; 0x02
    8c14:	93 83       	std	Z+3, r25	; 0x03
    8c16:	80 91 b5 33 	lds	r24, 0x33B5
    8c1a:	84 83       	std	Z+4, r24	; 0x04
    8c1c:	15 82       	std	Z+5, r1	; 0x05
    8c1e:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		display_putString(temp2,2,0,System5x7);
    8c22:	ed b7       	in	r30, 0x3d	; 61
    8c24:	fe b7       	in	r31, 0x3e	; 62
    8c26:	36 96       	adiw	r30, 0x06	; 6
    8c28:	ed bf       	out	0x3d, r30	; 61
    8c2a:	fe bf       	out	0x3e, r31	; 62
    8c2c:	c8 01       	movw	r24, r16
    8c2e:	62 e0       	ldi	r22, 0x02	; 2
    8c30:	40 e0       	ldi	r20, 0x00	; 0
    8c32:	27 e0       	ldi	r18, 0x07	; 7
    8c34:	31 e3       	ldi	r19, 0x31	; 49
    8c36:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		sprintf(temp2,"Humidity:  %3u", quickHumidity);
    8c3a:	00 d0       	rcall	.+0      	; 0x8c3c <__vector_77+0x8fa>
    8c3c:	00 d0       	rcall	.+0      	; 0x8c3e <__vector_77+0x8fc>
    8c3e:	ed b7       	in	r30, 0x3d	; 61
    8c40:	fe b7       	in	r31, 0x3e	; 62
    8c42:	31 96       	adiw	r30, 0x01	; 1
    8c44:	ad b7       	in	r26, 0x3d	; 61
    8c46:	be b7       	in	r27, 0x3e	; 62
    8c48:	11 96       	adiw	r26, 0x01	; 1
    8c4a:	0d 93       	st	X+, r16
    8c4c:	1c 93       	st	X, r17
    8c4e:	12 97       	sbiw	r26, 0x02	; 2
    8c50:	8e e4       	ldi	r24, 0x4E	; 78
    8c52:	92 e2       	ldi	r25, 0x22	; 34
    8c54:	82 83       	std	Z+2, r24	; 0x02
    8c56:	93 83       	std	Z+3, r25	; 0x03
    8c58:	80 91 b6 33 	lds	r24, 0x33B6
    8c5c:	84 83       	std	Z+4, r24	; 0x04
    8c5e:	15 82       	std	Z+5, r1	; 0x05
    8c60:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		strcat(temp2, "%RH");
    8c64:	ed b7       	in	r30, 0x3d	; 61
    8c66:	fe b7       	in	r31, 0x3e	; 62
    8c68:	36 96       	adiw	r30, 0x06	; 6
    8c6a:	ed bf       	out	0x3d, r30	; 61
    8c6c:	fe bf       	out	0x3e, r31	; 62
    8c6e:	c8 01       	movw	r24, r16
    8c70:	6d e5       	ldi	r22, 0x5D	; 93
    8c72:	72 e2       	ldi	r23, 0x22	; 34
    8c74:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
		display_putString(temp2,3,0,System5x7);
    8c78:	c8 01       	movw	r24, r16
    8c7a:	63 e0       	ldi	r22, 0x03	; 3
    8c7c:	40 e0       	ldi	r20, 0x00	; 0
    8c7e:	27 e0       	ldi	r18, 0x07	; 7
    8c80:	31 e3       	ldi	r19, 0x31	; 49
    8c82:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		sprintf(temp2,"Pressure:  %3ukPa", quickPressure);
    8c86:	00 d0       	rcall	.+0      	; 0x8c88 <__vector_77+0x946>
    8c88:	00 d0       	rcall	.+0      	; 0x8c8a <__vector_77+0x948>
    8c8a:	ed b7       	in	r30, 0x3d	; 61
    8c8c:	fe b7       	in	r31, 0x3e	; 62
    8c8e:	31 96       	adiw	r30, 0x01	; 1
    8c90:	ad b7       	in	r26, 0x3d	; 61
    8c92:	be b7       	in	r27, 0x3e	; 62
    8c94:	11 96       	adiw	r26, 0x01	; 1
    8c96:	0d 93       	st	X+, r16
    8c98:	1c 93       	st	X, r17
    8c9a:	12 97       	sbiw	r26, 0x02	; 2
    8c9c:	81 e6       	ldi	r24, 0x61	; 97
    8c9e:	92 e2       	ldi	r25, 0x22	; 34
    8ca0:	82 83       	std	Z+2, r24	; 0x02
    8ca2:	93 83       	std	Z+3, r25	; 0x03
    8ca4:	80 91 b7 33 	lds	r24, 0x33B7
    8ca8:	84 83       	std	Z+4, r24	; 0x04
    8caa:	15 82       	std	Z+5, r1	; 0x05
    8cac:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		display_putString(temp2,4,0,System5x7);
    8cb0:	ed b7       	in	r30, 0x3d	; 61
    8cb2:	fe b7       	in	r31, 0x3e	; 62
    8cb4:	36 96       	adiw	r30, 0x06	; 6
    8cb6:	ed bf       	out	0x3d, r30	; 61
    8cb8:	fe bf       	out	0x3e, r31	; 62
    8cba:	c8 01       	movw	r24, r16
    8cbc:	64 e0       	ldi	r22, 0x04	; 4
    8cbe:	40 e0       	ldi	r20, 0x00	; 0
    8cc0:	27 e0       	ldi	r18, 0x07	; 7
    8cc2:	31 e3       	ldi	r19, 0x31	; 49
    8cc4:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		sprintf(temp2,"Light:      %5u", quickLight);
    8cc8:	00 d0       	rcall	.+0      	; 0x8cca <__vector_77+0x988>
    8cca:	00 d0       	rcall	.+0      	; 0x8ccc <__vector_77+0x98a>
    8ccc:	ed b7       	in	r30, 0x3d	; 61
    8cce:	fe b7       	in	r31, 0x3e	; 62
    8cd0:	31 96       	adiw	r30, 0x01	; 1
    8cd2:	ad b7       	in	r26, 0x3d	; 61
    8cd4:	be b7       	in	r27, 0x3e	; 62
    8cd6:	11 96       	adiw	r26, 0x01	; 1
    8cd8:	0d 93       	st	X+, r16
    8cda:	1c 93       	st	X, r17
    8cdc:	12 97       	sbiw	r26, 0x02	; 2
    8cde:	83 e7       	ldi	r24, 0x73	; 115
    8ce0:	92 e2       	ldi	r25, 0x22	; 34
    8ce2:	82 83       	std	Z+2, r24	; 0x02
    8ce4:	93 83       	std	Z+3, r25	; 0x03
    8ce6:	80 91 b8 33 	lds	r24, 0x33B8
    8cea:	90 91 b9 33 	lds	r25, 0x33B9
    8cee:	84 83       	std	Z+4, r24	; 0x04
    8cf0:	95 83       	std	Z+5, r25	; 0x05
    8cf2:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		display_putString(temp2,5,0,System5x7);
    8cf6:	ed b7       	in	r30, 0x3d	; 61
    8cf8:	fe b7       	in	r31, 0x3e	; 62
    8cfa:	36 96       	adiw	r30, 0x06	; 6
    8cfc:	ed bf       	out	0x3d, r30	; 61
    8cfe:	fe bf       	out	0x3e, r31	; 62
    8d00:	c8 01       	movw	r24, r16
    8d02:	65 e0       	ldi	r22, 0x05	; 5
    8d04:	40 e0       	ldi	r20, 0x00	; 0
    8d06:	27 e0       	ldi	r18, 0x07	; 7
    8d08:	31 e3       	ldi	r19, 0x31	; 49
    8d0a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		sprintf(temp2,"Air: %5lu, %5lu", quickSmall, quickLarge);
    8d0e:	2d b7       	in	r18, 0x3d	; 61
    8d10:	3e b7       	in	r19, 0x3e	; 62
    8d12:	2c 50       	subi	r18, 0x0C	; 12
    8d14:	30 40       	sbci	r19, 0x00	; 0
    8d16:	2d bf       	out	0x3d, r18	; 61
    8d18:	3e bf       	out	0x3e, r19	; 62
    8d1a:	ed b7       	in	r30, 0x3d	; 61
    8d1c:	fe b7       	in	r31, 0x3e	; 62
    8d1e:	31 96       	adiw	r30, 0x01	; 1
    8d20:	ad b7       	in	r26, 0x3d	; 61
    8d22:	be b7       	in	r27, 0x3e	; 62
    8d24:	11 96       	adiw	r26, 0x01	; 1
    8d26:	0d 93       	st	X+, r16
    8d28:	1c 93       	st	X, r17
    8d2a:	12 97       	sbiw	r26, 0x02	; 2
    8d2c:	83 e8       	ldi	r24, 0x83	; 131
    8d2e:	92 e2       	ldi	r25, 0x22	; 34
    8d30:	82 83       	std	Z+2, r24	; 0x02
    8d32:	93 83       	std	Z+3, r25	; 0x03
    8d34:	80 91 8e 33 	lds	r24, 0x338E
    8d38:	90 91 8f 33 	lds	r25, 0x338F
    8d3c:	a0 91 90 33 	lds	r26, 0x3390
    8d40:	b0 91 91 33 	lds	r27, 0x3391
    8d44:	84 83       	std	Z+4, r24	; 0x04
    8d46:	95 83       	std	Z+5, r25	; 0x05
    8d48:	a6 83       	std	Z+6, r26	; 0x06
    8d4a:	b7 83       	std	Z+7, r27	; 0x07
    8d4c:	80 91 92 33 	lds	r24, 0x3392
    8d50:	90 91 93 33 	lds	r25, 0x3393
    8d54:	a0 91 94 33 	lds	r26, 0x3394
    8d58:	b0 91 95 33 	lds	r27, 0x3395
    8d5c:	80 87       	std	Z+8, r24	; 0x08
    8d5e:	91 87       	std	Z+9, r25	; 0x09
    8d60:	a2 87       	std	Z+10, r26	; 0x0a
    8d62:	b3 87       	std	Z+11, r27	; 0x0b
    8d64:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
		display_putString(temp2,6,0,System5x7);
    8d68:	ed b7       	in	r30, 0x3d	; 61
    8d6a:	fe b7       	in	r31, 0x3e	; 62
    8d6c:	3c 96       	adiw	r30, 0x0c	; 12
    8d6e:	ed bf       	out	0x3d, r30	; 61
    8d70:	fe bf       	out	0x3e, r31	; 62
    8d72:	c8 01       	movw	r24, r16
    8d74:	66 e0       	ldi	r22, 0x06	; 6
    8d76:	40 e0       	ldi	r20, 0x00	; 0
    8d78:	27 e0       	ldi	r18, 0x07	; 7
    8d7a:	31 e3       	ldi	r19, 0x31	; 49
    8d7c:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		display_putString("Sound:           ",7,0,System5x7);
    8d80:	83 e9       	ldi	r24, 0x93	; 147
    8d82:	92 e2       	ldi	r25, 0x22	; 34
    8d84:	67 e0       	ldi	r22, 0x07	; 7
    8d86:	40 e0       	ldi	r20, 0x00	; 0
    8d88:	27 e0       	ldi	r18, 0x07	; 7
    8d8a:	31 e3       	ldi	r19, 0x31	; 49
    8d8c:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    8d90:	20 91 ba 33 	lds	r18, 0x33BA
    8d94:	26 95       	lsr	r18
    8d96:	89 e3       	ldi	r24, 0x39	; 57
    8d98:	62 e3       	ldi	r22, 0x32	; 50
    8d9a:	47 e0       	ldi	r20, 0x07	; 7
    8d9c:	01 e0       	ldi	r16, 0x01	; 1
    8d9e:	ee 24       	eor	r14, r14
    8da0:	cc 24       	eor	r12, r12
    8da2:	c3 94       	inc	r12
    8da4:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <display_drawRectangle>
		display_writeBufferToScreen();
    8da8:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>

		if(chargePercent == 100){
    8dac:	80 91 97 33 	lds	r24, 0x3397
    8db0:	84 36       	cpi	r24, 0x64	; 100
    8db2:	21 f4       	brne	.+8      	; 0x8dbc <__vector_77+0xa7a>
			chargeComplete = true;
    8db4:	a0 92 9a 33 	sts	0x339A, r10
			okToCharge  = false;
    8db8:	10 92 9b 33 	sts	0x339B, r1
    8dbc:	80 91 a8 06 	lds	r24, 0x06A8
    8dc0:	81 fd       	sbrc	r24, 1
    8dc2:	0a c0       	rjmp	.+20     	; 0x8dd8 <__vector_77+0xa96>
    8dc4:	91 c0       	rjmp	.+290    	; 0x8ee8 <__vector_77+0xba6>
		}

		if(SD2_Inserted() && chargeComplete && !recording){
    8dc6:	80 91 a1 33 	lds	r24, 0x33A1
    8dca:	88 23       	and	r24, r24
    8dcc:	29 f4       	brne	.+10     	; 0x8dd8 <__vector_77+0xa96>
    8dce:	e0 e2       	ldi	r30, 0x20	; 32
    8dd0:	f6 e0       	ldi	r31, 0x06	; 6
    8dd2:	80 e2       	ldi	r24, 0x20	; 32
    8dd4:	86 83       	std	Z+6, r24	; 0x06
    8dd6:	39 c0       	rjmp	.+114    	; 0x8e4a <__vector_77+0xb08>
    8dd8:	80 91 a8 06 	lds	r24, 0x06A8
    8ddc:	81 fd       	sbrc	r24, 1
    8dde:	38 c0       	rjmp	.+112    	; 0x8e50 <__vector_77+0xb0e>
    8de0:	89 c0       	rjmp	.+274    	; 0x8ef4 <__vector_77+0xbb2>
			Leds_Clear(ext_Red);
			Leds_Set(ext_Green);
		} else if(SD2_Inserted() && !chargeComplete){
			okToCharge = true;
    8de2:	81 e0       	ldi	r24, 0x01	; 1
    8de4:	80 93 9b 33 	sts	0x339B, r24
			if(!rtcSynced){
    8de8:	80 91 cb 33 	lds	r24, 0x33CB
    8dec:	88 23       	and	r24, r24
    8dee:	21 f5       	brne	.+72     	; 0x8e38 <__vector_77+0xaf6>
				if(useWifiForUploading){
    8df0:	80 91 6d 33 	lds	r24, 0x336D
    8df4:	88 23       	and	r24, r24
    8df6:	29 f0       	breq	.+10     	; 0x8e02 <__vector_77+0xac0>
				    Debug_SendString("Syncing RTC", true);
    8df8:	8c ed       	ldi	r24, 0xDC	; 220
    8dfa:	91 e2       	ldi	r25, 0x21	; 33
    8dfc:	61 e0       	ldi	r22, 0x01	; 1
    8dfe:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
				}
				if(!demoMode){
    8e02:	80 91 6c 33 	lds	r24, 0x336C
    8e06:	88 23       	and	r24, r24
    8e08:	a1 f4       	brne	.+40     	; 0x8e32 <__vector_77+0xaf0>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    8e0a:	e0 ea       	ldi	r30, 0xA0	; 160
    8e0c:	f4 e0       	ldi	r31, 0x04	; 4
    8e0e:	88 e0       	ldi	r24, 0x08	; 8
    8e10:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    8e12:	84 e0       	ldi	r24, 0x04	; 4
    8e14:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    8e16:	8f e0       	ldi	r24, 0x0F	; 15
    8e18:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    8e1a:	81 e0       	ldi	r24, 0x01	; 1
    8e1c:	84 83       	std	Z+4, r24	; 0x04
					RTC_init();
					RTC_setUTCSecs(UNIX_time);
    8e1e:	60 91 9c 33 	lds	r22, 0x339C
    8e22:	70 91 9d 33 	lds	r23, 0x339D
    8e26:	80 91 9e 33 	lds	r24, 0x339E
    8e2a:	90 91 9f 33 	lds	r25, 0x339F
    8e2e:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <RTC_setUTCSecs>
				}
				rtcSynced = true;
    8e32:	81 e0       	ldi	r24, 0x01	; 1
    8e34:	80 93 cb 33 	sts	0x33CB, r24
			}
			if(!recording){
    8e38:	80 91 a1 33 	lds	r24, 0x33A1
    8e3c:	88 23       	and	r24, r24
    8e3e:	09 f0       	breq	.+2      	; 0x8e42 <__vector_77+0xb00>
    8e40:	5f c0       	rjmp	.+190    	; 0x8f00 <__vector_77+0xbbe>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8e42:	e0 e2       	ldi	r30, 0x20	; 32
    8e44:	f6 e0       	ldi	r31, 0x06	; 6
    8e46:	80 e2       	ldi	r24, 0x20	; 32
    8e48:	85 83       	std	Z+5, r24	; 0x05
				Leds_Set(ext_Red);
				Leds_Set(ext_Green);
			}

		}else{
			chargePercent = 0;
    8e4a:	80 e1       	ldi	r24, 0x10	; 16
    8e4c:	85 83       	std	Z+5, r24	; 0x05
    8e4e:	58 c0       	rjmp	.+176    	; 0x8f00 <__vector_77+0xbbe>
    8e50:	10 92 97 33 	sts	0x3397, r1
			chargeComplete = false;
    8e54:	10 92 9a 33 	sts	0x339A, r1
			rtcSynced = false;
    8e58:	10 92 cb 33 	sts	0x33CB, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8e5c:	e0 e2       	ldi	r30, 0x20	; 32
    8e5e:	f6 e0       	ldi	r31, 0x06	; 6
    8e60:	80 e2       	ldi	r24, 0x20	; 32
    8e62:	86 83       	std	Z+6, r24	; 0x06
	// controls


    if(currentMode == recordMode && Dpad_CheckButton(Down)){											// go to sensorMode

		currentMode = sensorMode;
    8e64:	80 e1       	ldi	r24, 0x10	; 16
    8e66:	86 83       	std	Z+6, r24	; 0x06
    8e68:	4b c0       	rjmp	.+150    	; 0x8f00 <__vector_77+0xbbe>
    8e6a:	81 e0       	ldi	r24, 0x01	; 1
    8e6c:	80 93 c5 33 	sts	0x33C5, r24
		display_clearBuffer();
    8e70:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <display_clearBuffer>
		display_writeBufferToScreen();
    8e74:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    8e78:	18 cc       	rjmp	.-2000   	; 0x86aa <__vector_77+0x368>
	} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){											// go to recordMode

		currentMode = recordMode;
    8e7a:	10 92 c5 33 	sts	0x33C5, r1
		display_clearBuffer();
    8e7e:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <display_clearBuffer>
		display_writeBufferToScreen();
    8e82:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    8e86:	20 ea       	ldi	r18, 0xA0	; 160
    8e88:	3f e0       	ldi	r19, 0x0F	; 15
    8e8a:	40 e7       	ldi	r20, 0x70	; 112
    8e8c:	51 e0       	ldi	r21, 0x01	; 1
    8e8e:	dd ca       	rjmp	.-2630   	; 0x844a <__vector_77+0x108>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8e90:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8e94:	8c 77       	andi	r24, 0x7C	; 124
    8e96:	82 fd       	sbrc	r24, 2
    8e98:	ec ca       	rjmp	.-2600   	; 0x8472 <__vector_77+0x130>
    8e9a:	01 cb       	rjmp	.-2558   	; 0x849e <__vector_77+0x15c>
            Leds_Set(wifi_Red);
		}
	} else if(currentMode == recordMode && !recording && !SD_Inserted()){									// dont allow to start recording
		Leds_Set(sd_Red);
		Leds_Clear(sd_Green);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    8e9c:	80 91 a1 33 	lds	r24, 0x33A1
    8ea0:	88 23       	and	r24, r24
    8ea2:	09 f0       	breq	.+2      	; 0x8ea6 <__vector_77+0xb64>
    8ea4:	75 cb       	rjmp	.-2326   	; 0x8590 <__vector_77+0x24e>
    8ea6:	19 cb       	rjmp	.-2510   	; 0x84da <__vector_77+0x198>
		   Leds_Set(sd_Red);

        }


	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){								// pause recording
    8ea8:	80 91 a1 33 	lds	r24, 0x33A1
    8eac:	88 23       	and	r24, r24
    8eae:	09 f4       	brne	.+2      	; 0x8eb2 <__vector_77+0xb70>
    8eb0:	fc cb       	rjmp	.-2056   	; 0x86aa <__vector_77+0x368>
    8eb2:	79 cb       	rjmp	.-2318   	; 0x85a6 <__vector_77+0x264>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8eb4:	81 e0       	ldi	r24, 0x01	; 1
    8eb6:	e0 cb       	rjmp	.-2112   	; 0x8678 <__vector_77+0x336>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8eb8:	e0 e2       	ldi	r30, 0x20	; 32
    8eba:	f6 e0       	ldi	r31, 0x06	; 6
    8ebc:	80 e2       	ldi	r24, 0x20	; 32
    8ebe:	85 83       	std	Z+5, r24	; 0x05
    8ec0:	04 c0       	rjmp	.+8      	; 0x8eca <__vector_77+0xb88>
    8ec2:	e0 e2       	ldi	r30, 0x20	; 32
    8ec4:	f6 e0       	ldi	r31, 0x06	; 6
    8ec6:	80 e2       	ldi	r24, 0x20	; 32
    8ec8:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8eca:	80 e1       	ldi	r24, 0x10	; 16
    8ecc:	85 83       	std	Z+5, r24	; 0x05
    8ece:	e4 cb       	rjmp	.-2104   	; 0x8698 <__vector_77+0x356>
			chargeComplete = true;
			okToCharge  = false;
		}


		if(SD2_Inserted() && chargeComplete){
    8ed0:	80 91 9a 33 	lds	r24, 0x339A
    8ed4:	88 23       	and	r24, r24
    8ed6:	09 f4       	brne	.+2      	; 0x8eda <__vector_77+0xb98>
    8ed8:	ec cc       	rjmp	.-1576   	; 0x88b2 <__vector_77+0x570>
    8eda:	d9 cc       	rjmp	.-1614   	; 0x888e <__vector_77+0x54c>
			display_putString("Ext Charged      ",3,0,System5x7);
			if(!recording){
				Leds_Clear(ext_Red);
				Leds_Set(ext_Green);
			}
		} else if(SD2_Inserted() && !chargeComplete){
    8edc:	80 91 9a 33 	lds	r24, 0x339A
    8ee0:	88 23       	and	r24, r24
    8ee2:	09 f0       	breq	.+2      	; 0x8ee6 <__vector_77+0xba4>
    8ee4:	56 cd       	rjmp	.-1364   	; 0x8992 <__vector_77+0x650>
    8ee6:	ea cc       	rjmp	.-1580   	; 0x88bc <__vector_77+0x57a>
		if(chargePercent == 100){
			chargeComplete = true;
			okToCharge  = false;
		}

		if(SD2_Inserted() && chargeComplete && !recording){
    8ee8:	80 91 9a 33 	lds	r24, 0x339A
    8eec:	88 23       	and	r24, r24
    8eee:	09 f4       	brne	.+2      	; 0x8ef2 <__vector_77+0xbb0>
    8ef0:	73 cf       	rjmp	.-282    	; 0x8dd8 <__vector_77+0xa96>
    8ef2:	69 cf       	rjmp	.-302    	; 0x8dc6 <__vector_77+0xa84>
			Leds_Clear(ext_Red);
			Leds_Set(ext_Green);
		} else if(SD2_Inserted() && !chargeComplete){
    8ef4:	80 91 9a 33 	lds	r24, 0x339A
    8ef8:	88 23       	and	r24, r24
    8efa:	09 f0       	breq	.+2      	; 0x8efe <__vector_77+0xbbc>
    8efc:	a9 cf       	rjmp	.-174    	; 0x8e50 <__vector_77+0xb0e>
    8efe:	71 cf       	rjmp	.-286    	; 0x8de2 <__vector_77+0xaa0>


}


}
    8f00:	ff 91       	pop	r31
    8f02:	ef 91       	pop	r30
    8f04:	bf 91       	pop	r27
    8f06:	af 91       	pop	r26
    8f08:	9f 91       	pop	r25
    8f0a:	8f 91       	pop	r24
    8f0c:	7f 91       	pop	r23
    8f0e:	6f 91       	pop	r22
    8f10:	5f 91       	pop	r21
    8f12:	4f 91       	pop	r20
    8f14:	3f 91       	pop	r19
    8f16:	2f 91       	pop	r18
    8f18:	1f 91       	pop	r17
    8f1a:	0f 91       	pop	r16
    8f1c:	ff 90       	pop	r15
    8f1e:	ef 90       	pop	r14
    8f20:	df 90       	pop	r13
    8f22:	cf 90       	pop	r12
    8f24:	bf 90       	pop	r11
    8f26:	af 90       	pop	r10
    8f28:	0f 90       	pop	r0
    8f2a:	0b be       	out	0x3b, r0	; 59
    8f2c:	0f 90       	pop	r0
    8f2e:	0f be       	out	0x3f, r0	; 63
    8f30:	0f 90       	pop	r0
    8f32:	1f 90       	pop	r1
    8f34:	18 95       	reti

00008f36 <Debug_TriggerUpload>:
      to--;
    }
    return false;
}

bool Debug_TriggerUpload(uint32_t size, uint16_t timeOut){
    8f36:	af 92       	push	r10
    8f38:	bf 92       	push	r11
    8f3a:	cf 92       	push	r12
    8f3c:	df 92       	push	r13
    8f3e:	ef 92       	push	r14
    8f40:	ff 92       	push	r15
    8f42:	0f 93       	push	r16
    8f44:	1f 93       	push	r17
    8f46:	df 93       	push	r29
    8f48:	cf 93       	push	r28
    8f4a:	cd b7       	in	r28, 0x3d	; 61
    8f4c:	de b7       	in	r29, 0x3e	; 62
    8f4e:	64 97       	sbiw	r28, 0x14	; 20
    8f50:	cd bf       	out	0x3d, r28	; 61
    8f52:	de bf       	out	0x3e, r29	; 62
    8f54:	6b 01       	movw	r12, r22
    8f56:	7c 01       	movw	r14, r24
    8f58:	b4 2e       	mov	r11, r20
    8f5a:	a5 2e       	mov	r10, r21
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
    8f5c:	80 91 6e 33 	lds	r24, 0x336E
    8f60:	90 91 6f 33 	lds	r25, 0x336F
    8f64:	80 93 70 33 	sts	0x3370, r24
    8f68:	90 93 71 33 	sts	0x3371, r25
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8f6c:	80 91 a1 08 	lds	r24, 0x08A1
    8f70:	85 ff       	sbrs	r24, 5
    8f72:	fc cf       	rjmp	.-8      	; 0x8f6c <Debug_TriggerUpload+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8f74:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8f78:	85 e5       	ldi	r24, 0x55	; 85
    8f7a:	80 93 a0 08 	sts	0x08A0, r24
   char fileSize [20];

   Debug_ClearBuffer();
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
    8f7e:	8d b7       	in	r24, 0x3d	; 61
    8f80:	9e b7       	in	r25, 0x3e	; 62
    8f82:	08 97       	sbiw	r24, 0x08	; 8
    8f84:	8d bf       	out	0x3d, r24	; 61
    8f86:	9e bf       	out	0x3e, r25	; 62
    8f88:	ed b7       	in	r30, 0x3d	; 61
    8f8a:	fe b7       	in	r31, 0x3e	; 62
    8f8c:	31 96       	adiw	r30, 0x01	; 1
    8f8e:	8e 01       	movw	r16, r28
    8f90:	0f 5f       	subi	r16, 0xFF	; 255
    8f92:	1f 4f       	sbci	r17, 0xFF	; 255
    8f94:	ad b7       	in	r26, 0x3d	; 61
    8f96:	be b7       	in	r27, 0x3e	; 62
    8f98:	11 96       	adiw	r26, 0x01	; 1
    8f9a:	0d 93       	st	X+, r16
    8f9c:	1c 93       	st	X, r17
    8f9e:	12 97       	sbiw	r26, 0x02	; 2
    8fa0:	85 ea       	ldi	r24, 0xA5	; 165
    8fa2:	92 e2       	ldi	r25, 0x22	; 34
    8fa4:	82 83       	std	Z+2, r24	; 0x02
    8fa6:	93 83       	std	Z+3, r25	; 0x03
    8fa8:	c4 82       	std	Z+4, r12	; 0x04
    8faa:	d5 82       	std	Z+5, r13	; 0x05
    8fac:	e6 82       	std	Z+6, r14	; 0x06
    8fae:	f7 82       	std	Z+7, r15	; 0x07
    8fb0:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
   Debug_SendString(fileSize,true);
    8fb4:	8d b7       	in	r24, 0x3d	; 61
    8fb6:	9e b7       	in	r25, 0x3e	; 62
    8fb8:	08 96       	adiw	r24, 0x08	; 8
    8fba:	8d bf       	out	0x3d, r24	; 61
    8fbc:	9e bf       	out	0x3e, r25	; 62
    8fbe:	c8 01       	movw	r24, r16
    8fc0:	61 e0       	ldi	r22, 0x01	; 1
    8fc2:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    8fc6:	2b 2d       	mov	r18, r11
    8fc8:	3a 2d       	mov	r19, r10
    8fca:	c9 01       	movw	r24, r18
    8fcc:	ac 01       	movw	r20, r24
    8fce:	66 e6       	ldi	r22, 0x66	; 102
    8fd0:	7e e0       	ldi	r23, 0x0E	; 14
    8fd2:	10 c0       	rjmp	.+32     	; 0x8ff4 <Debug_TriggerUpload+0xbe>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    8fd4:	20 91 70 33 	lds	r18, 0x3370
    8fd8:	30 91 71 33 	lds	r19, 0x3371
    8fdc:	80 91 6e 33 	lds	r24, 0x336E
    8fe0:	90 91 6f 33 	lds	r25, 0x336F
    8fe4:	28 17       	cp	r18, r24
    8fe6:	39 07       	cpc	r19, r25
    8fe8:	c1 f4       	brne	.+48     	; 0x901a <Debug_TriggerUpload+0xe4>
    8fea:	cb 01       	movw	r24, r22
    8fec:	01 97       	sbiw	r24, 0x01	; 1
    8fee:	f1 f7       	brne	.-4      	; 0x8fec <Debug_TriggerUpload+0xb6>
         } else {
           return false;
         }
      }
      _delay_ms(1);
      to--;
    8ff0:	41 50       	subi	r20, 0x01	; 1
    8ff2:	50 40       	sbci	r21, 0x00	; 0
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
    8ff4:	41 15       	cp	r20, r1
    8ff6:	51 05       	cpc	r21, r1
    8ff8:	69 f7       	brne	.-38     	; 0x8fd4 <Debug_TriggerUpload+0x9e>
    8ffa:	90 e0       	ldi	r25, 0x00	; 0
      _delay_ms(1);
      to--;
    }
    return false;

}
    8ffc:	89 2f       	mov	r24, r25
    8ffe:	64 96       	adiw	r28, 0x14	; 20
    9000:	cd bf       	out	0x3d, r28	; 61
    9002:	de bf       	out	0x3e, r29	; 62
    9004:	cf 91       	pop	r28
    9006:	df 91       	pop	r29
    9008:	1f 91       	pop	r17
    900a:	0f 91       	pop	r16
    900c:	ff 90       	pop	r15
    900e:	ef 90       	pop	r14
    9010:	df 90       	pop	r13
    9012:	cf 90       	pop	r12
    9014:	bf 90       	pop	r11
    9016:	af 90       	pop	r10
    9018:	08 95       	ret
   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
      if(Debug_CharReadyToRead()){
         if(Debug_GetByte(true) == 'Y'){
    901a:	81 e0       	ldi	r24, 0x01	; 1
    901c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debug_GetByte>
    9020:	90 e0       	ldi	r25, 0x00	; 0
    9022:	89 35       	cpi	r24, 0x59	; 89
    9024:	59 f7       	brne	.-42     	; 0x8ffc <Debug_TriggerUpload+0xc6>
    9026:	91 e0       	ldi	r25, 0x01	; 1
    9028:	e9 cf       	rjmp	.-46     	; 0x8ffc <Debug_TriggerUpload+0xc6>

0000902a <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    902a:	1f 93       	push	r17
    902c:	cf 93       	push	r28
    902e:	df 93       	push	r29
	uint8_t tmp=0;
	//uint32_t tmp32 = 0;
	
	Wifi_ClearBuffer();
    9030:	0e 94 8b 02 	call	0x516	; 0x516 <Wifi_ClearBuffer>
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
    9034:	8b ea       	ldi	r24, 0xAB	; 171
    9036:	92 e2       	ldi	r25, 0x22	; 34
    9038:	64 eb       	ldi	r22, 0xB4	; 180
    903a:	72 e2       	ldi	r23, 0x22	; 34
    903c:	ab 01       	movw	r20, r22
    903e:	24 ef       	ldi	r18, 0xF4	; 244
    9040:	31 e0       	ldi	r19, 0x01	; 1
    9042:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    9046:	88 23       	and	r24, r24
    9048:	09 f4       	brne	.+2      	; 0x904c <Wifi_GetTime+0x22>
    904a:	47 c0       	rjmp	.+142    	; 0x90da <Wifi_GetTime+0xb0>
    904c:	88 ee       	ldi	r24, 0xE8	; 232
    904e:	93 e0       	ldi	r25, 0x03	; 3
    9050:	20 e7       	ldi	r18, 0x70	; 112
    9052:	31 e0       	ldi	r19, 0x01	; 1
    9054:	f9 01       	movw	r30, r18
    9056:	31 97       	sbiw	r30, 0x01	; 1
    9058:	f1 f7       	brne	.-4      	; 0x9056 <Wifi_GetTime+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    905a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    905c:	d9 f7       	brne	.-10     	; 0x9054 <Wifi_GetTime+0x2a>
    905e:	cd ed       	ldi	r28, 0xDD	; 221
    9060:	d5 e4       	ldi	r29, 0x45	; 69
    9062:	10 e0       	ldi	r17, 0x00	; 0
    9064:	07 c0       	rjmp	.+14     	; 0x9074 <Wifi_GetTime+0x4a>
	    return false;
	}
	_delay_ms(100);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 50){
    9066:	12 33       	cpi	r17, 0x32	; 50
    9068:	59 f0       	breq	.+22     	; 0x9080 <Wifi_GetTime+0x56>
			string[tmp] = Wifi_GetByte(false);
    906a:	80 e0       	ldi	r24, 0x00	; 0
    906c:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    9070:	89 93       	st	Y+, r24
			//Debug_SendByte(string[tmp]);
			tmp++;
    9072:	1f 5f       	subi	r17, 0xFF	; 255
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
	    return false;
	}
	_delay_ms(100);
	
	while(Wifi_CharReadyToRead()){
    9074:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    9078:	88 23       	and	r24, r24
    907a:	a9 f7       	brne	.-22     	; 0x9066 <Wifi_GetTime+0x3c>
			break;
		}
	}

	
	if(tmp < 4){
    907c:	14 30       	cpi	r17, 0x04	; 4
    907e:	68 f1       	brcs	.+90     	; 0x90da <Wifi_GetTime+0xb0>
		return false;
	}
	
	if(strstr(string,"NOT SET") != 0){
    9080:	8d ed       	ldi	r24, 0xDD	; 221
    9082:	95 e4       	ldi	r25, 0x45	; 69
    9084:	6a eb       	ldi	r22, 0xBA	; 186
    9086:	72 e2       	ldi	r23, 0x22	; 34
    9088:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    908c:	00 97       	sbiw	r24, 0x00	; 0
    908e:	31 f0       	breq	.+12     	; 0x909c <Wifi_GetTime+0x72>
	    Debug_SendString("Time is not set",true);
    9090:	82 ec       	ldi	r24, 0xC2	; 194
    9092:	92 e2       	ldi	r25, 0x22	; 34
    9094:	61 e0       	ldi	r22, 0x01	; 1
    9096:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    909a:	1f c0       	rjmp	.+62     	; 0x90da <Wifi_GetTime+0xb0>
	tmp32 *= 100;
	tmp32 += ((timeLower[0]-'0')* 10);
	tmp32 += ((timeLower[1]-'0'));
    time_secs = tmp32; */

    memcpy(timeString,(strstr(string,"RTC=")+4),10);        // changed for wifly v2.22
    909c:	8d ed       	ldi	r24, 0xDD	; 221
    909e:	95 e4       	ldi	r25, 0x45	; 69
    90a0:	62 ed       	ldi	r22, 0xD2	; 210
    90a2:	72 e2       	ldi	r23, 0x22	; 34
    90a4:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    90a8:	a6 eb       	ldi	r26, 0xB6	; 182
    90aa:	ba e4       	ldi	r27, 0x4A	; 74
    90ac:	fc 01       	movw	r30, r24
    90ae:	34 96       	adiw	r30, 0x04	; 4
    90b0:	8a e0       	ldi	r24, 0x0A	; 10
    90b2:	01 90       	ld	r0, Z+
    90b4:	0d 92       	st	X+, r0
    90b6:	81 50       	subi	r24, 0x01	; 1
    90b8:	e1 f7       	brne	.-8      	; 0x90b2 <Wifi_GetTime+0x88>
    time_secs = atol(timeString);
    90ba:	86 eb       	ldi	r24, 0xB6	; 182
    90bc:	9a e4       	ldi	r25, 0x4A	; 74
    90be:	0e 94 76 5c 	call	0xb8ec	; 0xb8ec <atol>
    90c2:	9b 01       	movw	r18, r22
    90c4:	ac 01       	movw	r20, r24
    90c6:	20 93 7a 33 	sts	0x337A, r18
    90ca:	30 93 7b 33 	sts	0x337B, r19
    90ce:	40 93 7c 33 	sts	0x337C, r20
    90d2:	50 93 7d 33 	sts	0x337D, r21
    90d6:	81 e0       	ldi	r24, 0x01	; 1
    90d8:	01 c0       	rjmp	.+2      	; 0x90dc <Wifi_GetTime+0xb2>

	return true;
    90da:	80 e0       	ldi	r24, 0x00	; 0
}
    90dc:	df 91       	pop	r29
    90de:	cf 91       	pop	r28
    90e0:	1f 91       	pop	r17
    90e2:	08 95       	ret

000090e4 <SD_Open>:
    //f_mount(2, &fso2);
	return tmp;
}


uint8_t SD_Open(char string []){
    90e4:	cf 93       	push	r28
    90e6:	df 93       	push	r29
    90e8:	ec 01       	movw	r28, r24
	//Debug_SendString("File Name= ",false);
	//Debug_SendString(string,true);
	strcpy(currentLogFile,string);
    90ea:	89 ec       	ldi	r24, 0xC9	; 201
    90ec:	9c e3       	ldi	r25, 0x3C	; 60
    90ee:	be 01       	movw	r22, r28
    90f0:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
	strupr(currentLogFile);
    90f4:	89 ec       	ldi	r24, 0xC9	; 201
    90f6:	9c e3       	ldi	r25, 0x3C	; 60
    90f8:	0e 94 48 5d 	call	0xba90	; 0xba90 <strupr>
    90fc:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    90fe:	a9 ec       	ldi	r26, 0xC9	; 201
    9100:	bc e3       	ldi	r27, 0x3C	; 60
    9102:	07 c0       	rjmp	.+14     	; 0x9112 <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    9104:	fc 01       	movw	r30, r24
    9106:	e7 53       	subi	r30, 0x37	; 55
    9108:	f3 4c       	sbci	r31, 0xC3	; 195
    910a:	80 81       	ld	r24, Z
    910c:	31 97       	sbiw	r30, 0x01	; 1
    910e:	80 83       	st	Z, r24
uint8_t SD_Open(char string []){
	//Debug_SendString("File Name= ",false);
	//Debug_SendString(string,true);
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    9110:	2f 5f       	subi	r18, 0xFF	; 255
    9112:	fd 01       	movw	r30, r26
    9114:	01 90       	ld	r0, Z+
    9116:	00 20       	and	r0, r0
    9118:	e9 f7       	brne	.-6      	; 0x9114 <SD_Open+0x30>
    911a:	31 97       	sbiw	r30, 0x01	; 1
    911c:	e9 5c       	subi	r30, 0xC9	; 201
    911e:	fc 43       	sbci	r31, 0x3C	; 60
    9120:	82 2f       	mov	r24, r18
    9122:	90 e0       	ldi	r25, 0x00	; 0
    9124:	8e 17       	cp	r24, r30
    9126:	9f 07       	cpc	r25, r31
    9128:	68 f3       	brcs	.-38     	; 0x9104 <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    912a:	e8 53       	subi	r30, 0x38	; 56
    912c:	f3 4c       	sbci	r31, 0xC3	; 195
    912e:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9130:	8c e3       	ldi	r24, 0x3C	; 60
    9132:	9f e4       	ldi	r25, 0x4F	; 79
    9134:	be 01       	movw	r22, r28
    9136:	43 e1       	ldi	r20, 0x13	; 19
    9138:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <f_open>
}
    913c:	df 91       	pop	r29
    913e:	cf 91       	pop	r28
    9140:	08 95       	ret

00009142 <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    9142:	0f 93       	push	r16
    9144:	1f 93       	push	r17
    9146:	cf 93       	push	r28
    9148:	df 93       	push	r29

	SD_Open("/config.txt");
    914a:	87 ed       	ldi	r24, 0xD7	; 215
    914c:	92 e2       	ldi	r25, 0x22	; 34
    914e:	0e 94 72 48 	call	0x90e4	; 0x90e4 <SD_Open>
          }
	      //Debug_SendString("User: ",false);
	      //Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
    9152:	c0 e2       	ldi	r28, 0x20	; 32
    9154:	dc e5       	ldi	r29, 0x5C	; 92
	      strtok(temp,"=");
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
    9156:	09 e7       	ldi	r16, 0x79	; 121
    9158:	1a e4       	ldi	r17, 0x4A	; 74
void Read_config_file(void){

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    915a:	8b e0       	ldi	r24, 0x0B	; 11
    915c:	9a e4       	ldi	r25, 0x4A	; 74
    915e:	62 e3       	ldi	r22, 0x32	; 50
    9160:	70 e0       	ldi	r23, 0x00	; 0
    9162:	4c e3       	ldi	r20, 0x3C	; 60
    9164:	5f e4       	ldi	r21, 0x4F	; 79
    9166:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <f_gets>
	  if(temp[0] != 0){
    916a:	80 91 0b 4a 	lds	r24, 0x4A0B
    916e:	88 23       	and	r24, r24
    9170:	09 f4       	brne	.+2      	; 0x9174 <Read_config_file+0x32>
    9172:	9f c1       	rjmp	.+830    	; 0x94b2 <Read_config_file+0x370>
	    if(strstr(temp,"ssid") != 0){
    9174:	8b e0       	ldi	r24, 0x0B	; 11
    9176:	9a e4       	ldi	r25, 0x4A	; 74
    9178:	63 ee       	ldi	r22, 0xE3	; 227
    917a:	72 e2       	ldi	r23, 0x22	; 34
    917c:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9180:	00 97       	sbiw	r24, 0x00	; 0
    9182:	a9 f0       	breq	.+42     	; 0x91ae <Read_config_file+0x6c>
	      strtok(temp,"=");
    9184:	8b e0       	ldi	r24, 0x0B	; 11
    9186:	9a e4       	ldi	r25, 0x4A	; 74
    9188:	68 ee       	ldi	r22, 0xE8	; 232
    918a:	72 e2       	ldi	r23, 0x22	; 34
    918c:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcat(ssid,strtok(NULL,"="));
    9190:	80 e0       	ldi	r24, 0x00	; 0
    9192:	90 e0       	ldi	r25, 0x00	; 0
    9194:	68 ee       	ldi	r22, 0xE8	; 232
    9196:	72 e2       	ldi	r23, 0x22	; 34
    9198:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    919c:	bc 01       	movw	r22, r24
    919e:	8d e8       	ldi	r24, 0x8D	; 141
    91a0:	90 e3       	ldi	r25, 0x30	; 48
    91a2:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	      ssidRead = true;
    91a6:	81 e0       	ldi	r24, 0x01	; 1
    91a8:	80 93 c1 33 	sts	0x33C1, r24
    91ac:	d6 cf       	rjmp	.-84     	; 0x915a <Read_config_file+0x18>
	    } else if(strstr(temp,"phrase") != 0){
    91ae:	8b e0       	ldi	r24, 0x0B	; 11
    91b0:	9a e4       	ldi	r25, 0x4A	; 74
    91b2:	6a ee       	ldi	r22, 0xEA	; 234
    91b4:	72 e2       	ldi	r23, 0x22	; 34
    91b6:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    91ba:	00 97       	sbiw	r24, 0x00	; 0
    91bc:	a9 f0       	breq	.+42     	; 0x91e8 <Read_config_file+0xa6>
	      strtok(temp,"=");
    91be:	8b e0       	ldi	r24, 0x0B	; 11
    91c0:	9a e4       	ldi	r25, 0x4A	; 74
    91c2:	68 ee       	ldi	r22, 0xE8	; 232
    91c4:	72 e2       	ldi	r23, 0x22	; 34
    91c6:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcat(phrase,strtok(NULL,"="));
    91ca:	80 e0       	ldi	r24, 0x00	; 0
    91cc:	90 e0       	ldi	r25, 0x00	; 0
    91ce:	68 ee       	ldi	r22, 0xE8	; 232
    91d0:	72 e2       	ldi	r23, 0x22	; 34
    91d2:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    91d6:	bc 01       	movw	r22, r24
    91d8:	89 e2       	ldi	r24, 0x29	; 41
    91da:	90 e3       	ldi	r25, 0x30	; 48
    91dc:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	      phraseRead = true;
    91e0:	81 e0       	ldi	r24, 0x01	; 1
    91e2:	80 93 be 33 	sts	0x33BE, r24
    91e6:	b9 cf       	rjmp	.-142    	; 0x915a <Read_config_file+0x18>
	    } else if(strstr(temp,"key") != 0){
    91e8:	8b e0       	ldi	r24, 0x0B	; 11
    91ea:	9a e4       	ldi	r25, 0x4A	; 74
    91ec:	61 ef       	ldi	r22, 0xF1	; 241
    91ee:	72 e2       	ldi	r23, 0x22	; 34
    91f0:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    91f4:	00 97       	sbiw	r24, 0x00	; 0
    91f6:	a9 f0       	breq	.+42     	; 0x9222 <Read_config_file+0xe0>
	      strtok(temp,"=");
    91f8:	8b e0       	ldi	r24, 0x0B	; 11
    91fa:	9a e4       	ldi	r25, 0x4A	; 74
    91fc:	68 ee       	ldi	r22, 0xE8	; 232
    91fe:	72 e2       	ldi	r23, 0x22	; 34
    9200:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcat(key,strtok(NULL,"="));
    9204:	80 e0       	ldi	r24, 0x00	; 0
    9206:	90 e0       	ldi	r25, 0x00	; 0
    9208:	68 ee       	ldi	r22, 0xE8	; 232
    920a:	72 e2       	ldi	r23, 0x22	; 34
    920c:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    9210:	bc 01       	movw	r22, r24
    9212:	8b e5       	ldi	r24, 0x5B	; 91
    9214:	90 e3       	ldi	r25, 0x30	; 48
    9216:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	      keyRead = true;
    921a:	81 e0       	ldi	r24, 0x01	; 1
    921c:	80 93 bf 33 	sts	0x33BF, r24
    9220:	9c cf       	rjmp	.-200    	; 0x915a <Read_config_file+0x18>
	    } else if(strstr(temp,"port") != 0){
    9222:	8b e0       	ldi	r24, 0x0B	; 11
    9224:	9a e4       	ldi	r25, 0x4A	; 74
    9226:	65 ef       	ldi	r22, 0xF5	; 245
    9228:	72 e2       	ldi	r23, 0x22	; 34
    922a:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    922e:	00 97       	sbiw	r24, 0x00	; 0
    9230:	a9 f0       	breq	.+42     	; 0x925c <Read_config_file+0x11a>
	      strtok(temp,"=");
    9232:	8b e0       	ldi	r24, 0x0B	; 11
    9234:	9a e4       	ldi	r25, 0x4A	; 74
    9236:	68 ee       	ldi	r22, 0xE8	; 232
    9238:	72 e2       	ldi	r23, 0x22	; 34
    923a:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcpy(port,strtok(NULL,"="));
    923e:	80 e0       	ldi	r24, 0x00	; 0
    9240:	90 e0       	ldi	r25, 0x00	; 0
    9242:	68 ee       	ldi	r22, 0xE8	; 232
    9244:	72 e2       	ldi	r23, 0x22	; 34
    9246:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    924a:	bc 01       	movw	r22, r24
    924c:	8e ee       	ldi	r24, 0xEE	; 238
    924e:	9b e5       	ldi	r25, 0x5B	; 91
    9250:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
	      portRead = true;
    9254:	81 e0       	ldi	r24, 0x01	; 1
    9256:	80 93 c0 33 	sts	0x33C0, r24
    925a:	7f cf       	rjmp	.-258    	; 0x915a <Read_config_file+0x18>
	    } else if(strstr(temp,"auth") != 0){
    925c:	8b e0       	ldi	r24, 0x0B	; 11
    925e:	9a e4       	ldi	r25, 0x4A	; 74
    9260:	6a ef       	ldi	r22, 0xFA	; 250
    9262:	72 e2       	ldi	r23, 0x22	; 34
    9264:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9268:	00 97       	sbiw	r24, 0x00	; 0
    926a:	a9 f0       	breq	.+42     	; 0x9296 <Read_config_file+0x154>
	      strtok(temp,"=");
    926c:	8b e0       	ldi	r24, 0x0B	; 11
    926e:	9a e4       	ldi	r25, 0x4A	; 74
    9270:	68 ee       	ldi	r22, 0xE8	; 232
    9272:	72 e2       	ldi	r23, 0x22	; 34
    9274:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcat(auth,strtok(NULL,"="));
    9278:	80 e0       	ldi	r24, 0x00	; 0
    927a:	90 e0       	ldi	r25, 0x00	; 0
    927c:	68 ee       	ldi	r22, 0xE8	; 232
    927e:	72 e2       	ldi	r23, 0x22	; 34
    9280:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    9284:	bc 01       	movw	r22, r24
    9286:	87 ef       	ldi	r24, 0xF7	; 247
    9288:	9f e2       	ldi	r25, 0x2F	; 47
    928a:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	      authRead = true;
    928e:	81 e0       	ldi	r24, 0x01	; 1
    9290:	80 93 bd 33 	sts	0x33BD, r24
    9294:	62 cf       	rjmp	.-316    	; 0x915a <Read_config_file+0x18>
	     }else if(strstr(temp,"user") != 0){
    9296:	8b e0       	ldi	r24, 0x0B	; 11
    9298:	9a e4       	ldi	r25, 0x4A	; 74
    929a:	6f ef       	ldi	r22, 0xFF	; 255
    929c:	72 e2       	ldi	r23, 0x22	; 34
    929e:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    92a2:	00 97       	sbiw	r24, 0x00	; 0
    92a4:	39 f1       	breq	.+78     	; 0x92f4 <Read_config_file+0x1b2>
	      strtok(temp,"=");
    92a6:	8b e0       	ldi	r24, 0x0B	; 11
    92a8:	9a e4       	ldi	r25, 0x4A	; 74
    92aa:	68 ee       	ldi	r22, 0xE8	; 232
    92ac:	72 e2       	ldi	r23, 0x22	; 34
    92ae:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcpy(user,strtok(NULL,"="));
    92b2:	80 e0       	ldi	r24, 0x00	; 0
    92b4:	90 e0       	ldi	r25, 0x00	; 0
    92b6:	68 ee       	ldi	r22, 0xE8	; 232
    92b8:	72 e2       	ldi	r23, 0x22	; 34
    92ba:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    92be:	bc 01       	movw	r22, r24
    92c0:	89 e7       	ldi	r24, 0x79	; 121
    92c2:	9a e4       	ldi	r25, 0x4A	; 74
    92c4:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
	      for(uint8_t i = 0; i < strlen(user); i++){
    92c8:	f8 01       	movw	r30, r16
    92ca:	01 90       	ld	r0, Z+
    92cc:	00 20       	and	r0, r0
    92ce:	e9 f7       	brne	.-6      	; 0x92ca <Read_config_file+0x188>
    92d0:	31 97       	sbiw	r30, 0x01	; 1
    92d2:	e9 57       	subi	r30, 0x79	; 121
    92d4:	fa 44       	sbci	r31, 0x4A	; 74
    92d6:	20 e0       	ldi	r18, 0x00	; 0
    92d8:	07 c0       	rjmp	.+14     	; 0x92e8 <Read_config_file+0x1a6>
            if(user[i] < ' '){
    92da:	dc 01       	movw	r26, r24
    92dc:	a7 58       	subi	r26, 0x87	; 135
    92de:	b5 4b       	sbci	r27, 0xB5	; 181
    92e0:	8c 91       	ld	r24, X
    92e2:	80 32       	cpi	r24, 0x20	; 32
    92e4:	78 f1       	brcs	.+94     	; 0x9344 <Read_config_file+0x202>
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
	      for(uint8_t i = 0; i < strlen(user); i++){
    92e6:	2f 5f       	subi	r18, 0xFF	; 255
    92e8:	82 2f       	mov	r24, r18
    92ea:	90 e0       	ldi	r25, 0x00	; 0
    92ec:	8e 17       	cp	r24, r30
    92ee:	9f 07       	cpc	r25, r31
    92f0:	a0 f3       	brcs	.-24     	; 0x92da <Read_config_file+0x198>
    92f2:	33 cf       	rjmp	.-410    	; 0x915a <Read_config_file+0x18>
               break;
            }
          }
	      //Debug_SendString("User: ",false);
	      //Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
    92f4:	8b e0       	ldi	r24, 0x0B	; 11
    92f6:	9a e4       	ldi	r25, 0x4A	; 74
    92f8:	64 e0       	ldi	r22, 0x04	; 4
    92fa:	73 e2       	ldi	r23, 0x23	; 35
    92fc:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9300:	00 97       	sbiw	r24, 0x00	; 0
    9302:	49 f1       	breq	.+82     	; 0x9356 <Read_config_file+0x214>
	      strtok(temp,"=");
    9304:	8b e0       	ldi	r24, 0x0B	; 11
    9306:	9a e4       	ldi	r25, 0x4A	; 74
    9308:	68 ee       	ldi	r22, 0xE8	; 232
    930a:	72 e2       	ldi	r23, 0x22	; 34
    930c:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcpy(nickname,strtok(NULL,"="));
    9310:	80 e0       	ldi	r24, 0x00	; 0
    9312:	90 e0       	ldi	r25, 0x00	; 0
    9314:	68 ee       	ldi	r22, 0xE8	; 232
    9316:	72 e2       	ldi	r23, 0x22	; 34
    9318:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    931c:	bc 01       	movw	r22, r24
    931e:	80 e2       	ldi	r24, 0x20	; 32
    9320:	9c e5       	ldi	r25, 0x5C	; 92
    9322:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
          for(uint8_t i = 0; i < strlen(nickname); i++){
    9326:	fe 01       	movw	r30, r28
    9328:	01 90       	ld	r0, Z+
    932a:	00 20       	and	r0, r0
    932c:	e9 f7       	brne	.-6      	; 0x9328 <Read_config_file+0x1e6>
    932e:	31 97       	sbiw	r30, 0x01	; 1
    9330:	e0 52       	subi	r30, 0x20	; 32
    9332:	fc 45       	sbci	r31, 0x5C	; 92
    9334:	20 e0       	ldi	r18, 0x00	; 0
    9336:	09 c0       	rjmp	.+18     	; 0x934a <Read_config_file+0x208>
            if(nickname[i] < ' '){
    9338:	dc 01       	movw	r26, r24
    933a:	a0 5e       	subi	r26, 0xE0	; 224
    933c:	b3 4a       	sbci	r27, 0xA3	; 163
    933e:	8c 91       	ld	r24, X
    9340:	80 32       	cpi	r24, 0x20	; 32
    9342:	10 f4       	brcc	.+4      	; 0x9348 <Read_config_file+0x206>
               nickname[i] = 0;
    9344:	1c 92       	st	X, r1
    9346:	09 cf       	rjmp	.-494    	; 0x915a <Read_config_file+0x18>
	      //Debug_SendString("User: ",false);
	      //Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
          for(uint8_t i = 0; i < strlen(nickname); i++){
    9348:	2f 5f       	subi	r18, 0xFF	; 255
    934a:	82 2f       	mov	r24, r18
    934c:	90 e0       	ldi	r25, 0x00	; 0
    934e:	8e 17       	cp	r24, r30
    9350:	9f 07       	cpc	r25, r31
    9352:	90 f3       	brcs	.-28     	; 0x9338 <Read_config_file+0x1f6>
    9354:	02 cf       	rjmp	.-508    	; 0x915a <Read_config_file+0x18>
            }
          }

          //Debug_SendString("Nickname: ",false);
          //Debug_SendString(nickname,true);
	    } else if(strstr(temp,"server") != 0){
    9356:	8b e0       	ldi	r24, 0x0B	; 11
    9358:	9a e4       	ldi	r25, 0x4A	; 74
    935a:	6d e0       	ldi	r22, 0x0D	; 13
    935c:	73 e2       	ldi	r23, 0x23	; 35
    935e:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9362:	00 97       	sbiw	r24, 0x00	; 0
    9364:	91 f0       	breq	.+36     	; 0x938a <Read_config_file+0x248>
	      strtok(temp,"=");
    9366:	8b e0       	ldi	r24, 0x0B	; 11
    9368:	9a e4       	ldi	r25, 0x4A	; 74
    936a:	68 ee       	ldi	r22, 0xE8	; 232
    936c:	72 e2       	ldi	r23, 0x22	; 34
    936e:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcat(serverOpenCommand,strtok(NULL,"="));
    9372:	80 e0       	ldi	r24, 0x00	; 0
    9374:	90 e0       	ldi	r25, 0x00	; 0
    9376:	68 ee       	ldi	r22, 0xE8	; 232
    9378:	72 e2       	ldi	r23, 0x22	; 34
    937a:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    937e:	bc 01       	movw	r22, r24
    9380:	8f eb       	ldi	r24, 0xBF	; 191
    9382:	90 e3       	ldi	r25, 0x30	; 48
    9384:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
    9388:	e8 ce       	rjmp	.-560    	; 0x915a <Read_config_file+0x18>
        } else if(strstr(temp,"daylightTime") != 0){
    938a:	8b e0       	ldi	r24, 0x0B	; 11
    938c:	9a e4       	ldi	r25, 0x4A	; 74
    938e:	64 e1       	ldi	r22, 0x14	; 20
    9390:	73 e2       	ldi	r23, 0x23	; 35
    9392:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9396:	00 97       	sbiw	r24, 0x00	; 0
    9398:	81 f0       	breq	.+32     	; 0x93ba <Read_config_file+0x278>
	      strtok(temp,"=");
    939a:	8b e0       	ldi	r24, 0x0B	; 11
    939c:	9a e4       	ldi	r25, 0x4A	; 74
    939e:	68 ee       	ldi	r22, 0xE8	; 232
    93a0:	72 e2       	ldi	r23, 0x22	; 34
    93a2:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
	      strcpy(daylightTime,strtok(NULL,"="));
    93a6:	80 e0       	ldi	r24, 0x00	; 0
    93a8:	90 e0       	ldi	r25, 0x00	; 0
    93aa:	68 ee       	ldi	r22, 0xE8	; 232
    93ac:	72 e2       	ldi	r23, 0x22	; 34
    93ae:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    93b2:	bc 01       	movw	r22, r24
    93b4:	81 e0       	ldi	r24, 0x01	; 1
    93b6:	9b e4       	ldi	r25, 0x4B	; 75
    93b8:	2f c0       	rjmp	.+94     	; 0x9418 <Read_config_file+0x2d6>
        } else if(strstr(temp,"useWifi") != 0){
    93ba:	8b e0       	ldi	r24, 0x0B	; 11
    93bc:	9a e4       	ldi	r25, 0x4A	; 74
    93be:	61 e2       	ldi	r22, 0x21	; 33
    93c0:	73 e2       	ldi	r23, 0x23	; 35
    93c2:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    93c6:	00 97       	sbiw	r24, 0x00	; 0
    93c8:	81 f0       	breq	.+32     	; 0x93ea <Read_config_file+0x2a8>
            strtok(temp,"=");
    93ca:	8b e0       	ldi	r24, 0x0B	; 11
    93cc:	9a e4       	ldi	r25, 0x4A	; 74
    93ce:	68 ee       	ldi	r22, 0xE8	; 232
    93d0:	72 e2       	ldi	r23, 0x22	; 34
    93d2:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
            strcpy(uploaderToUse,strtok(NULL,"="));
    93d6:	80 e0       	ldi	r24, 0x00	; 0
    93d8:	90 e0       	ldi	r25, 0x00	; 0
    93da:	68 ee       	ldi	r22, 0xE8	; 232
    93dc:	72 e2       	ldi	r23, 0x22	; 34
    93de:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    93e2:	bc 01       	movw	r22, r24
    93e4:	8f e6       	ldi	r24, 0x6F	; 111
    93e6:	9a e4       	ldi	r25, 0x4A	; 74
    93e8:	17 c0       	rjmp	.+46     	; 0x9418 <Read_config_file+0x2d6>
        } else if(strstr(temp,"demoMode") != 0){
    93ea:	8b e0       	ldi	r24, 0x0B	; 11
    93ec:	9a e4       	ldi	r25, 0x4A	; 74
    93ee:	69 e2       	ldi	r22, 0x29	; 41
    93f0:	73 e2       	ldi	r23, 0x23	; 35
    93f2:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    93f6:	00 97       	sbiw	r24, 0x00	; 0
    93f8:	91 f0       	breq	.+36     	; 0x941e <Read_config_file+0x2dc>
            strtok(temp,"=");
    93fa:	8b e0       	ldi	r24, 0x0B	; 11
    93fc:	9a e4       	ldi	r25, 0x4A	; 74
    93fe:	68 ee       	ldi	r22, 0xE8	; 232
    9400:	72 e2       	ldi	r23, 0x22	; 34
    9402:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
            strcpy(demoModeString,strtok(NULL,"="));
    9406:	80 e0       	ldi	r24, 0x00	; 0
    9408:	90 e0       	ldi	r25, 0x00	; 0
    940a:	68 ee       	ldi	r22, 0xE8	; 232
    940c:	72 e2       	ldi	r23, 0x22	; 34
    940e:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    9412:	bc 01       	movw	r22, r24
    9414:	83 e8       	ldi	r24, 0x83	; 131
    9416:	9a e4       	ldi	r25, 0x4A	; 74
    9418:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
    941c:	9e ce       	rjmp	.-708    	; 0x915a <Read_config_file+0x18>
	    } else if(strstr(temp,"zone") != 0){
    941e:	8b e0       	ldi	r24, 0x0B	; 11
    9420:	9a e4       	ldi	r25, 0x4A	; 74
    9422:	62 e3       	ldi	r22, 0x32	; 50
    9424:	73 e2       	ldi	r23, 0x23	; 35
    9426:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    942a:	00 97       	sbiw	r24, 0x00	; 0
    942c:	09 f4       	brne	.+2      	; 0x9430 <Read_config_file+0x2ee>
    942e:	95 ce       	rjmp	.-726    	; 0x915a <Read_config_file+0x18>
	      strtok(temp,"=");
    9430:	8b e0       	ldi	r24, 0x0B	; 11
    9432:	9a e4       	ldi	r25, 0x4A	; 74
    9434:	68 ee       	ldi	r22, 0xE8	; 232
    9436:	72 e2       	ldi	r23, 0x22	; 34
    9438:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
          memmove(zone,strtok(NULL,"="),3);
    943c:	80 e0       	ldi	r24, 0x00	; 0
    943e:	90 e0       	ldi	r25, 0x00	; 0
    9440:	68 ee       	ldi	r22, 0xE8	; 232
    9442:	72 e2       	ldi	r23, 0x22	; 34
    9444:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    9448:	bc 01       	movw	r22, r24
    944a:	81 ef       	ldi	r24, 0xF1	; 241
    944c:	90 e3       	ldi	r25, 0x30	; 48
    944e:	43 e0       	ldi	r20, 0x03	; 3
    9450:	50 e0       	ldi	r21, 0x00	; 0
    9452:	0e 94 a2 5c 	call	0xb944	; 0xb944 <memmove>
	      if(strcmp(zone,"EST") == 0){
    9456:	81 ef       	ldi	r24, 0xF1	; 241
    9458:	90 e3       	ldi	r25, 0x30	; 48
    945a:	67 e3       	ldi	r22, 0x37	; 55
    945c:	73 e2       	ldi	r23, 0x23	; 35
    945e:	0e 94 f7 5c 	call	0xb9ee	; 0xb9ee <strcmp>
    9462:	00 97       	sbiw	r24, 0x00	; 0
    9464:	11 f4       	brne	.+4      	; 0x946a <Read_config_file+0x328>
	    	  timeZoneShift = 5;
    9466:	85 e0       	ldi	r24, 0x05	; 5
    9468:	1e c0       	rjmp	.+60     	; 0x94a6 <Read_config_file+0x364>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"CST") == 0){
    946a:	81 ef       	ldi	r24, 0xF1	; 241
    946c:	90 e3       	ldi	r25, 0x30	; 48
    946e:	6b e3       	ldi	r22, 0x3B	; 59
    9470:	73 e2       	ldi	r23, 0x23	; 35
    9472:	0e 94 f7 5c 	call	0xb9ee	; 0xb9ee <strcmp>
    9476:	00 97       	sbiw	r24, 0x00	; 0
    9478:	11 f4       	brne	.+4      	; 0x947e <Read_config_file+0x33c>
	    	  timeZoneShift = 6;
    947a:	86 e0       	ldi	r24, 0x06	; 6
    947c:	14 c0       	rjmp	.+40     	; 0x94a6 <Read_config_file+0x364>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"MST") == 0){
    947e:	81 ef       	ldi	r24, 0xF1	; 241
    9480:	90 e3       	ldi	r25, 0x30	; 48
    9482:	6f e3       	ldi	r22, 0x3F	; 63
    9484:	73 e2       	ldi	r23, 0x23	; 35
    9486:	0e 94 f7 5c 	call	0xb9ee	; 0xb9ee <strcmp>
    948a:	00 97       	sbiw	r24, 0x00	; 0
    948c:	11 f4       	brne	.+4      	; 0x9492 <Read_config_file+0x350>
	    	  timeZoneShift = 7;
    948e:	87 e0       	ldi	r24, 0x07	; 7
    9490:	0a c0       	rjmp	.+20     	; 0x94a6 <Read_config_file+0x364>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"PST") == 0){
    9492:	81 ef       	ldi	r24, 0xF1	; 241
    9494:	90 e3       	ldi	r25, 0x30	; 48
    9496:	63 e4       	ldi	r22, 0x43	; 67
    9498:	73 e2       	ldi	r23, 0x23	; 35
    949a:	0e 94 f7 5c 	call	0xb9ee	; 0xb9ee <strcmp>
    949e:	00 97       	sbiw	r24, 0x00	; 0
    94a0:	09 f0       	breq	.+2      	; 0x94a4 <Read_config_file+0x362>
    94a2:	5b ce       	rjmp	.-842    	; 0x915a <Read_config_file+0x18>
	    	  timeZoneShift = 8;
    94a4:	88 e0       	ldi	r24, 0x08	; 8
    94a6:	80 93 c3 33 	sts	0x33C3, r24
	    	  zoneChanged = true;
    94aa:	81 e0       	ldi	r24, 0x01	; 1
    94ac:	80 93 c2 33 	sts	0x33C2, r24
    94b0:	54 ce       	rjmp	.-856    	; 0x915a <Read_config_file+0x18>

	  } else {
	    break;
	  }
	}
    serverOpenCommand[strlen(serverOpenCommand)-1] = 0;
    94b2:	0f eb       	ldi	r16, 0xBF	; 191
    94b4:	10 e3       	ldi	r17, 0x30	; 48
    94b6:	f8 01       	movw	r30, r16
    94b8:	01 90       	ld	r0, Z+
    94ba:	00 20       	and	r0, r0
    94bc:	e9 f7       	brne	.-6      	; 0x94b8 <Read_config_file+0x376>
    94be:	32 97       	sbiw	r30, 0x02	; 2
    94c0:	10 82       	st	Z, r1
	strcat(serverOpenCommand," ");
    94c2:	c8 01       	movw	r24, r16
    94c4:	67 e4       	ldi	r22, 0x47	; 71
    94c6:	73 e2       	ldi	r23, 0x23	; 35
    94c8:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
    strcat(serverOpenCommand,port);
    94cc:	c8 01       	movw	r24, r16
    94ce:	6e ee       	ldi	r22, 0xEE	; 238
    94d0:	7b e5       	ldi	r23, 0x5B	; 91
    94d2:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    94d6:	81 e0       	ldi	r24, 0x01	; 1
    94d8:	9b e4       	ldi	r25, 0x4B	; 75
    94da:	69 e4       	ldi	r22, 0x49	; 73
    94dc:	73 e2       	ldi	r23, 0x23	; 35
    94de:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    94e2:	00 97       	sbiw	r24, 0x00	; 0
    94e4:	49 f0       	breq	.+18     	; 0x94f8 <Read_config_file+0x3b6>
    94e6:	80 91 c2 33 	lds	r24, 0x33C2
    94ea:	88 23       	and	r24, r24
    94ec:	29 f0       	breq	.+10     	; 0x94f8 <Read_config_file+0x3b6>
       timeZoneShift--;
    94ee:	80 91 c3 33 	lds	r24, 0x33C3
    94f2:	81 50       	subi	r24, 0x01	; 1
    94f4:	80 93 c3 33 	sts	0x33C3, r24
    }
    if((strstr(uploaderToUse,"true") != 0)){
    94f8:	8f e6       	ldi	r24, 0x6F	; 111
    94fa:	9a e4       	ldi	r25, 0x4A	; 74
    94fc:	69 e4       	ldi	r22, 0x49	; 73
    94fe:	73 e2       	ldi	r23, 0x23	; 35
    9500:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9504:	00 97       	sbiw	r24, 0x00	; 0
    9506:	19 f0       	breq	.+6      	; 0x950e <Read_config_file+0x3cc>
       useWifiForUploading = true;
    9508:	81 e0       	ldi	r24, 0x01	; 1
    950a:	80 93 6d 33 	sts	0x336D, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    950e:	83 e8       	ldi	r24, 0x83	; 131
    9510:	9a e4       	ldi	r25, 0x4A	; 74
    9512:	69 e4       	ldi	r22, 0x49	; 73
    9514:	73 e2       	ldi	r23, 0x23	; 35
    9516:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    951a:	00 97       	sbiw	r24, 0x00	; 0
    951c:	19 f0       	breq	.+6      	; 0x9524 <Read_config_file+0x3e2>
       demoMode = true;
    951e:	81 e0       	ldi	r24, 0x01	; 1
    9520:	80 93 6c 33 	sts	0x336C, r24
    }
}
    9524:	df 91       	pop	r29
    9526:	cf 91       	pop	r28
    9528:	1f 91       	pop	r17
    952a:	0f 91       	pop	r16
    952c:	08 95       	ret

0000952e <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    952e:	1f 93       	push	r17
	uint8_t resp;

	//Debug_SendString("Opening Log File",true);

	SD_MakeFileName(time);
    9530:	0e 94 8b 41 	call	0x8316	; 0x8316 <SD_MakeFileName>
	resp = SD_Open(fileName);
    9534:	81 e1       	ldi	r24, 0x11	; 17
    9536:	95 e4       	ldi	r25, 0x45	; 69
    9538:	0e 94 72 48 	call	0x90e4	; 0x90e4 <SD_Open>
    953c:	18 2f       	mov	r17, r24
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    953e:	8f ef       	ldi	r24, 0xFF	; 255
    9540:	9f ef       	ldi	r25, 0xFF	; 255
    9542:	af ef       	ldi	r26, 0xFF	; 255
    9544:	bf ef       	ldi	r27, 0xFF	; 255
    9546:	80 93 14 57 	sts	0x5714, r24
    954a:	90 93 15 57 	sts	0x5715, r25
    954e:	a0 93 16 57 	sts	0x5716, r26
    9552:	b0 93 17 57 	sts	0x5717, r27
	//Debug_SendString("Opening Log File",true);

	SD_MakeFileName(time);
	resp = SD_Open(fileName);
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    9556:	6c e4       	ldi	r22, 0x4C	; 76
    9558:	74 e7       	ldi	r23, 0x74	; 116
    955a:	8e ed       	ldi	r24, 0xDE	; 222
    955c:	90 eb       	ldi	r25, 0xB0	; 176
    955e:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    9562:	6b e3       	ldi	r22, 0x3B	; 59
    9564:	72 e0       	ldi	r23, 0x02	; 2
    9566:	80 e0       	ldi	r24, 0x00	; 0
    9568:	90 e0       	ldi	r25, 0x00	; 0
    956a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    956e:	81 e0       	ldi	r24, 0x01	; 1
    9570:	90 e0       	ldi	r25, 0x00	; 0
    9572:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

														// payload
	SD_Write16(0x0100);				// protocol version
    9576:	80 e0       	ldi	r24, 0x00	; 0
    9578:	91 e0       	ldi	r25, 0x01	; 1
    957a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>
	SD_Write8(0x02);					// time protocol
    957e:	82 e0       	ldi	r24, 0x02	; 2
    9580:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    9584:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    9588:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    958c:	67 e4       	ldi	r22, 0x47	; 71
    958e:	77 e4       	ldi	r23, 0x47	; 71
    9590:	88 e0       	ldi	r24, 0x08	; 8
    9592:	90 e0       	ldi	r25, 0x00	; 0
    9594:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <SD_Write32>
	SD_Write16(0);
    9598:	80 e0       	ldi	r24, 0x00	; 0
    959a:	90 e0       	ldi	r25, 0x00	; 0
    959c:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SD_Write16>

	SD_WriteString("device_class");
    95a0:	8e e4       	ldi	r24, 0x4E	; 78
    95a2:	93 e2       	ldi	r25, 0x23	; 35
    95a4:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    95a8:	89 e0       	ldi	r24, 0x09	; 9
    95aa:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString(DeviceClass);
    95ae:	8b e5       	ldi	r24, 0x5B	; 91
    95b0:	93 e2       	ldi	r25, 0x23	; 35
    95b2:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    95b6:	8a e0       	ldi	r24, 0x0A	; 10
    95b8:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
		
	SD_WriteString("device_id");
    95bc:	87 e6       	ldi	r24, 0x67	; 103
    95be:	93 e2       	ldi	r25, 0x23	; 35
    95c0:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    95c4:	89 e0       	ldi	r24, 0x09	; 9
    95c6:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString(deviceID);
    95ca:	8e e8       	ldi	r24, 0x8E	; 142
    95cc:	9a e4       	ldi	r25, 0x4A	; 74
    95ce:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    95d2:	8a e0       	ldi	r24, 0x0A	; 10
    95d4:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
		
	SD_WriteString("firmware_version");
    95d8:	81 e7       	ldi	r24, 0x71	; 113
    95da:	93 e2       	ldi	r25, 0x23	; 35
    95dc:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    95e0:	89 e0       	ldi	r24, 0x09	; 9
    95e2:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString(FirmwareVersion);
    95e6:	82 e8       	ldi	r24, 0x82	; 130
    95e8:	93 e2       	ldi	r25, 0x23	; 35
    95ea:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    95ee:	8a e0       	ldi	r24, 0x0A	; 10
    95f0:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
		
	SD_WriteString("hardware_version");
    95f4:	87 e8       	ldi	r24, 0x87	; 135
    95f6:	93 e2       	ldi	r25, 0x23	; 35
    95f8:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    95fc:	89 e0       	ldi	r24, 0x09	; 9
    95fe:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString(HardwareVersion);
    9602:	88 e9       	ldi	r24, 0x98	; 152
    9604:	93 e2       	ldi	r25, 0x23	; 35
    9606:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    960a:	8a e0       	ldi	r24, 0x0A	; 10
    960c:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	SD_WriteString("channel_specs");
    9610:	8a e9       	ldi	r24, 0x9A	; 154
    9612:	93 e2       	ldi	r25, 0x23	; 35
    9614:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x09);
    9618:	89 e0       	ldi	r24, 0x09	; 9
    961a:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    961e:	88 ea       	ldi	r24, 0xA8	; 168
    9620:	93 e2       	ldi	r25, 0x23	; 35
    9622:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    9626:	89 ed       	ldi	r24, 0xD9	; 217
    9628:	93 e2       	ldi	r25, 0x23	; 35
    962a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    962e:	82 e0       	ldi	r24, 0x02	; 2
    9630:	94 e2       	ldi	r25, 0x24	; 36
    9632:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    9636:	8b e2       	ldi	r24, 0x2B	; 43
    9638:	94 e2       	ldi	r25, 0x24	; 36
    963a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    963e:	88 e5       	ldi	r24, 0x58	; 88
    9640:	94 e2       	ldi	r25, 0x24	; 36
    9642:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    9646:	83 e8       	ldi	r24, 0x83	; 131
    9648:	94 e2       	ldi	r25, 0x24	; 36
    964a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    964e:	8f ea       	ldi	r24, 0xAF	; 175
    9650:	94 e2       	ldi	r25, 0x24	; 36
    9652:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    9656:	8c ed       	ldi	r24, 0xDC	; 220
    9658:	94 e2       	ldi	r25, 0x24	; 36
    965a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    965e:	8d e0       	ldi	r24, 0x0D	; 13
    9660:	95 e2       	ldi	r25, 0x25	; 37
    9662:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    9666:	8e e3       	ldi	r24, 0x3E	; 62
    9668:	95 e2       	ldi	r25, 0x25	; 37
    966a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <SD_WriteString>
	SD_Write8(0x0A);
    966e:	8a e0       	ldi	r24, 0x0A	; 10
    9670:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>
	
	SD_Write8(0x00);
    9674:	80 e0       	ldi	r24, 0x00	; 0
    9676:	0e 94 09 2c 	call	0x5812	; 0x5812 <SD_Write8>

	SD_WriteCRC();			// CRC			
    967a:	0e 94 1f 2c 	call	0x583e	; 0x583e <SD_WriteCRC>


	f_sync(&Log_File);
    967e:	8c e3       	ldi	r24, 0x3C	; 60
    9680:	9f e4       	ldi	r25, 0x4F	; 79
    9682:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>

	return resp;
}
    9686:	81 2f       	mov	r24, r17
    9688:	1f 91       	pop	r17
    968a:	08 95       	ret

0000968c <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(TCE1_OVF_vect)
{
    968c:	1f 92       	push	r1
    968e:	0f 92       	push	r0
    9690:	0f b6       	in	r0, 0x3f	; 63
    9692:	0f 92       	push	r0
    9694:	0b b6       	in	r0, 0x3b	; 59
    9696:	0f 92       	push	r0
    9698:	11 24       	eor	r1, r1
    969a:	ef 92       	push	r14
    969c:	ff 92       	push	r15
    969e:	0f 93       	push	r16
    96a0:	1f 93       	push	r17
    96a2:	2f 93       	push	r18
    96a4:	3f 93       	push	r19
    96a6:	4f 93       	push	r20
    96a8:	5f 93       	push	r21
    96aa:	6f 93       	push	r22
    96ac:	7f 93       	push	r23
    96ae:	8f 93       	push	r24
    96b0:	9f 93       	push	r25
    96b2:	af 93       	push	r26
    96b4:	bf 93       	push	r27
    96b6:	ef 93       	push	r30
    96b8:	ff 93       	push	r31
    96ba:	df 93       	push	r29
    96bc:	cf 93       	push	r28
    96be:	0f 92       	push	r0
    96c0:	0f 92       	push	r0
    96c2:	cd b7       	in	r28, 0x3d	; 61
    96c4:	de b7       	in	r29, 0x3e	; 62

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    96c6:	80 91 ac 33 	lds	r24, 0x33AC
    96ca:	88 23       	and	r24, r24
    96cc:	71 f0       	breq	.+28     	; 0x96ea <__vector_53+0x5e>
    96ce:	80 91 a1 33 	lds	r24, 0x33A1
    96d2:	88 23       	and	r24, r24
    96d4:	51 f0       	breq	.+20     	; 0x96ea <__vector_53+0x5e>
    96d6:	80 91 dc 33 	lds	r24, 0x33DC
    96da:	88 23       	and	r24, r24
    96dc:	31 f4       	brne	.+12     	; 0x96ea <__vector_53+0x5e>
		SD_WriteMicrophoneBuffer(1);
    96de:	81 e0       	ldi	r24, 0x01	; 1
    96e0:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    96e4:	10 92 ac 33 	sts	0x33AC, r1
    96e8:	11 c0       	rjmp	.+34     	; 0x970c <__vector_53+0x80>
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    96ea:	80 91 ad 33 	lds	r24, 0x33AD
    96ee:	88 23       	and	r24, r24
    96f0:	69 f0       	breq	.+26     	; 0x970c <__vector_53+0x80>
    96f2:	80 91 a1 33 	lds	r24, 0x33A1
    96f6:	88 23       	and	r24, r24
    96f8:	49 f0       	breq	.+18     	; 0x970c <__vector_53+0x80>
    96fa:	80 91 dc 33 	lds	r24, 0x33DC
    96fe:	88 23       	and	r24, r24
    9700:	29 f4       	brne	.+10     	; 0x970c <__vector_53+0x80>
		SD_WriteMicrophoneBuffer(2);
    9702:	82 e0       	ldi	r24, 0x02	; 2
    9704:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    9708:	10 92 ad 33 	sts	0x33AD, r1
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    970c:	80 91 a3 33 	lds	r24, 0x33A3
    9710:	88 23       	and	r24, r24
    9712:	71 f0       	breq	.+28     	; 0x9730 <__vector_53+0xa4>
    9714:	80 91 a1 33 	lds	r24, 0x33A1
    9718:	88 23       	and	r24, r24
    971a:	51 f0       	breq	.+20     	; 0x9730 <__vector_53+0xa4>
    971c:	80 91 dc 33 	lds	r24, 0x33DC
    9720:	88 23       	and	r24, r24
    9722:	31 f4       	brne	.+12     	; 0x9730 <__vector_53+0xa4>
		//Debug_SendString("T Buffer1",true);
		SD_WriteTemperatureBuffer(1);
    9724:	81 e0       	ldi	r24, 0x01	; 1
    9726:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    972a:	10 92 a3 33 	sts	0x33A3, r1
    972e:	11 c0       	rjmp	.+34     	; 0x9752 <__vector_53+0xc6>
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    9730:	80 91 a4 33 	lds	r24, 0x33A4
    9734:	88 23       	and	r24, r24
    9736:	69 f0       	breq	.+26     	; 0x9752 <__vector_53+0xc6>
    9738:	80 91 a1 33 	lds	r24, 0x33A1
    973c:	88 23       	and	r24, r24
    973e:	49 f0       	breq	.+18     	; 0x9752 <__vector_53+0xc6>
    9740:	80 91 dc 33 	lds	r24, 0x33DC
    9744:	88 23       	and	r24, r24
    9746:	29 f4       	brne	.+10     	; 0x9752 <__vector_53+0xc6>
		//Debug_SendString("T Buffer2",true);
		SD_WriteTemperatureBuffer(2);
    9748:	82 e0       	ldi	r24, 0x02	; 2
    974a:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    974e:	10 92 a4 33 	sts	0x33A4, r1
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    9752:	80 91 a9 33 	lds	r24, 0x33A9
    9756:	88 23       	and	r24, r24
    9758:	71 f0       	breq	.+28     	; 0x9776 <__vector_53+0xea>
    975a:	80 91 a1 33 	lds	r24, 0x33A1
    975e:	88 23       	and	r24, r24
    9760:	51 f0       	breq	.+20     	; 0x9776 <__vector_53+0xea>
    9762:	80 91 dc 33 	lds	r24, 0x33DC
    9766:	88 23       	and	r24, r24
    9768:	31 f4       	brne	.+12     	; 0x9776 <__vector_53+0xea>
		//Debug_SendString("H Buffer1",true);
		SD_WriteHumidityBuffer(1);
    976a:	81 e0       	ldi	r24, 0x01	; 1
    976c:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    9770:	10 92 a9 33 	sts	0x33A9, r1
    9774:	11 c0       	rjmp	.+34     	; 0x9798 <__vector_53+0x10c>
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    9776:	80 91 aa 33 	lds	r24, 0x33AA
    977a:	88 23       	and	r24, r24
    977c:	69 f0       	breq	.+26     	; 0x9798 <__vector_53+0x10c>
    977e:	80 91 a1 33 	lds	r24, 0x33A1
    9782:	88 23       	and	r24, r24
    9784:	49 f0       	breq	.+18     	; 0x9798 <__vector_53+0x10c>
    9786:	80 91 dc 33 	lds	r24, 0x33DC
    978a:	88 23       	and	r24, r24
    978c:	29 f4       	brne	.+10     	; 0x9798 <__vector_53+0x10c>
		//Debug_SendString("H Buffer2",true);
		SD_WriteHumidityBuffer(2);
    978e:	82 e0       	ldi	r24, 0x02	; 2
    9790:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    9794:	10 92 aa 33 	sts	0x33AA, r1
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    9798:	80 91 a6 33 	lds	r24, 0x33A6
    979c:	88 23       	and	r24, r24
    979e:	71 f0       	breq	.+28     	; 0x97bc <__vector_53+0x130>
    97a0:	80 91 a1 33 	lds	r24, 0x33A1
    97a4:	88 23       	and	r24, r24
    97a6:	51 f0       	breq	.+20     	; 0x97bc <__vector_53+0x130>
    97a8:	80 91 dc 33 	lds	r24, 0x33DC
    97ac:	88 23       	and	r24, r24
    97ae:	31 f4       	brne	.+12     	; 0x97bc <__vector_53+0x130>
		//Debug_SendString("P Buffer1",true);
		SD_WritePressureBuffer(1);
    97b0:	81 e0       	ldi	r24, 0x01	; 1
    97b2:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    97b6:	10 92 a6 33 	sts	0x33A6, r1
    97ba:	11 c0       	rjmp	.+34     	; 0x97de <__vector_53+0x152>
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    97bc:	80 91 a7 33 	lds	r24, 0x33A7
    97c0:	88 23       	and	r24, r24
    97c2:	69 f0       	breq	.+26     	; 0x97de <__vector_53+0x152>
    97c4:	80 91 a1 33 	lds	r24, 0x33A1
    97c8:	88 23       	and	r24, r24
    97ca:	49 f0       	breq	.+18     	; 0x97de <__vector_53+0x152>
    97cc:	80 91 dc 33 	lds	r24, 0x33DC
    97d0:	88 23       	and	r24, r24
    97d2:	29 f4       	brne	.+10     	; 0x97de <__vector_53+0x152>
		//Debug_SendString("P Buffer2",true);
		SD_WritePressureBuffer(2);
    97d4:	82 e0       	ldi	r24, 0x02	; 2
    97d6:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    97da:	10 92 a7 33 	sts	0x33A7, r1
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    97de:	80 91 b0 33 	lds	r24, 0x33B0
    97e2:	88 23       	and	r24, r24
    97e4:	71 f0       	breq	.+28     	; 0x9802 <__vector_53+0x176>
    97e6:	80 91 a1 33 	lds	r24, 0x33A1
    97ea:	88 23       	and	r24, r24
    97ec:	51 f0       	breq	.+20     	; 0x9802 <__vector_53+0x176>
    97ee:	80 91 dc 33 	lds	r24, 0x33DC
    97f2:	88 23       	and	r24, r24
    97f4:	31 f4       	brne	.+12     	; 0x9802 <__vector_53+0x176>
		//Debug_SendString("L Buffer1",true);
		SD_WriteLightBuffer(1);
    97f6:	81 e0       	ldi	r24, 0x01	; 1
    97f8:	0e 94 6d 3c 	call	0x78da	; 0x78da <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    97fc:	10 92 b0 33 	sts	0x33B0, r1
    9800:	11 c0       	rjmp	.+34     	; 0x9824 <__vector_53+0x198>
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    9802:	80 91 b1 33 	lds	r24, 0x33B1
    9806:	88 23       	and	r24, r24
    9808:	69 f0       	breq	.+26     	; 0x9824 <__vector_53+0x198>
    980a:	80 91 a1 33 	lds	r24, 0x33A1
    980e:	88 23       	and	r24, r24
    9810:	49 f0       	breq	.+18     	; 0x9824 <__vector_53+0x198>
    9812:	80 91 dc 33 	lds	r24, 0x33DC
    9816:	88 23       	and	r24, r24
    9818:	29 f4       	brne	.+10     	; 0x9824 <__vector_53+0x198>
		//Debug_SendString("L Buffer2",true);
		SD_WriteLightBuffer(2);
    981a:	82 e0       	ldi	r24, 0x02	; 2
    981c:	0e 94 6d 3c 	call	0x78da	; 0x78da <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    9820:	10 92 b1 33 	sts	0x33B1, r1
	}

	if(okToSendAirQuality && rs232Recording && !restartingFile){
    9824:	80 91 8d 33 	lds	r24, 0x338D
    9828:	88 23       	and	r24, r24
    982a:	09 f4       	brne	.+2      	; 0x982e <__vector_53+0x1a2>
    982c:	66 c0       	rjmp	.+204    	; 0x98fa <__vector_53+0x26e>
    982e:	80 91 96 33 	lds	r24, 0x3396
    9832:	88 23       	and	r24, r24
    9834:	09 f4       	brne	.+2      	; 0x9838 <__vector_53+0x1ac>
    9836:	61 c0       	rjmp	.+194    	; 0x98fa <__vector_53+0x26e>
    9838:	80 91 dc 33 	lds	r24, 0x33DC
    983c:	88 23       	and	r24, r24
    983e:	09 f0       	breq	.+2      	; 0x9842 <__vector_53+0x1b6>
    9840:	5c c0       	rjmp	.+184    	; 0x98fa <__vector_53+0x26e>
    9842:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    9844:	20 91 8b 33 	lds	r18, 0x338B
    9848:	30 91 8c 33 	lds	r19, 0x338C
    984c:	80 91 89 33 	lds	r24, 0x3389
    9850:	90 91 8a 33 	lds	r25, 0x338A
    9854:	28 17       	cp	r18, r24
    9856:	39 07       	cpc	r19, r25
    9858:	09 f0       	breq	.+2      	; 0x985c <__vector_53+0x1d0>
    985a:	3b c3       	rjmp	.+1654   	; 0x9ed2 <__vector_53+0x846>
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
			counter++;
		}
		if(strstr(airQualityString,"Dylos") == NULL){
    985c:	8d e3       	ldi	r24, 0x3D	; 61
    985e:	9a e4       	ldi	r25, 0x4A	; 74
    9860:	6a e6       	ldi	r22, 0x6A	; 106
    9862:	75 e2       	ldi	r23, 0x25	; 37
    9864:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    9868:	00 97       	sbiw	r24, 0x00	; 0
    986a:	09 f0       	breq	.+2      	; 0x986e <__vector_53+0x1e2>
    986c:	42 c0       	rjmp	.+132    	; 0x98f2 <__vector_53+0x266>
			airSampleTime = Time_Get32BitTimer();
    986e:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    9872:	60 93 64 33 	sts	0x3364, r22
    9876:	70 93 65 33 	sts	0x3365, r23
    987a:	80 93 66 33 	sts	0x3366, r24
    987e:	90 93 67 33 	sts	0x3367, r25
			smallCount = atol(strtok(airQualityString,","));
    9882:	8d e3       	ldi	r24, 0x3D	; 61
    9884:	9a e4       	ldi	r25, 0x4A	; 74
    9886:	60 e7       	ldi	r22, 0x70	; 112
    9888:	75 e2       	ldi	r23, 0x25	; 37
    988a:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    988e:	0e 94 76 5c 	call	0xb8ec	; 0xb8ec <atol>
    9892:	60 93 7b 3c 	sts	0x3C7B, r22
    9896:	70 93 7c 3c 	sts	0x3C7C, r23
    989a:	80 93 7d 3c 	sts	0x3C7D, r24
    989e:	90 93 7e 3c 	sts	0x3C7E, r25
			largeCount = atol(strtok(NULL,","));
    98a2:	80 e0       	ldi	r24, 0x00	; 0
    98a4:	90 e0       	ldi	r25, 0x00	; 0
    98a6:	60 e7       	ldi	r22, 0x70	; 112
    98a8:	75 e2       	ldi	r23, 0x25	; 37
    98aa:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    98ae:	0e 94 76 5c 	call	0xb8ec	; 0xb8ec <atol>
    98b2:	60 93 ea 5b 	sts	0x5BEA, r22
    98b6:	70 93 eb 5b 	sts	0x5BEB, r23
    98ba:	80 93 ec 5b 	sts	0x5BEC, r24
    98be:	90 93 ed 5b 	sts	0x5BED, r25

			quickSmall = smallCount;
    98c2:	20 91 7b 3c 	lds	r18, 0x3C7B
    98c6:	30 91 7c 3c 	lds	r19, 0x3C7C
    98ca:	40 91 7d 3c 	lds	r20, 0x3C7D
    98ce:	50 91 7e 3c 	lds	r21, 0x3C7E
    98d2:	20 93 8e 33 	sts	0x338E, r18
    98d6:	30 93 8f 33 	sts	0x338F, r19
    98da:	40 93 90 33 	sts	0x3390, r20
    98de:	50 93 91 33 	sts	0x3391, r21
			quickLarge = largeCount;
    98e2:	60 93 92 33 	sts	0x3392, r22
    98e6:	70 93 93 33 	sts	0x3393, r23
    98ea:	80 93 94 33 	sts	0x3394, r24
    98ee:	90 93 95 33 	sts	0x3395, r25
        }
        SD_WriteAirSample();
    98f2:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <SD_WriteAirSample>
		okToSendAirQuality = false;
    98f6:	10 92 8d 33 	sts	0x338D, r1
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    98fa:	80 91 cc 33 	lds	r24, 0x33CC
    98fe:	88 23       	and	r24, r24
    9900:	09 f4       	brne	.+2      	; 0x9904 <__vector_53+0x278>
    9902:	69 c0       	rjmp	.+210    	; 0x99d6 <__vector_53+0x34a>
    9904:	80 91 06 34 	lds	r24, 0x3406
    9908:	90 91 07 34 	lds	r25, 0x3407
    990c:	a0 91 08 34 	lds	r26, 0x3408
    9910:	b0 91 09 34 	lds	r27, 0x3409
    9914:	86 5b       	subi	r24, 0xB6	; 182
    9916:	93 40       	sbci	r25, 0x03	; 3
    9918:	a0 40       	sbci	r26, 0x00	; 0
    991a:	b0 40       	sbci	r27, 0x00	; 0
    991c:	08 f0       	brcs	.+2      	; 0x9920 <__vector_53+0x294>
    991e:	5b c0       	rjmp	.+182    	; 0x99d6 <__vector_53+0x34a>
		//SD_Init();
		SD_StartLogFile(UNIX_time);								// open file
    9920:	60 91 9c 33 	lds	r22, 0x339C
    9924:	70 91 9d 33 	lds	r23, 0x339D
    9928:	80 91 9e 33 	lds	r24, 0x339E
    992c:	90 91 9f 33 	lds	r25, 0x339F
    9930:	0e 94 97 4a 	call	0x952e	; 0x952e <SD_StartLogFile>
    9934:	88 ee       	ldi	r24, 0xE8	; 232
    9936:	93 e0       	ldi	r25, 0x03	; 3
    9938:	20 e7       	ldi	r18, 0x70	; 112
    993a:	31 e0       	ldi	r19, 0x01	; 1
    993c:	f9 01       	movw	r30, r18
    993e:	31 97       	sbiw	r30, 0x01	; 1
    9940:	f1 f7       	brne	.-4      	; 0x993e <__vector_53+0x2b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9942:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9944:	d9 f7       	brne	.-10     	; 0x993c <__vector_53+0x2b0>
		_delay_ms(100);

        timeToStopRecording = UNIX_time + 900;
    9946:	80 91 9c 33 	lds	r24, 0x339C
    994a:	90 91 9d 33 	lds	r25, 0x339D
    994e:	a0 91 9e 33 	lds	r26, 0x339E
    9952:	b0 91 9f 33 	lds	r27, 0x339F
    9956:	8c 57       	subi	r24, 0x7C	; 124
    9958:	9c 4f       	sbci	r25, 0xFC	; 252
    995a:	af 4f       	sbci	r26, 0xFF	; 255
    995c:	bf 4f       	sbci	r27, 0xFF	; 255
    995e:	80 93 f1 33 	sts	0x33F1, r24
    9962:	90 93 f2 33 	sts	0x33F2, r25
    9966:	a0 93 f3 33 	sts	0x33F3, r26
    996a:	b0 93 f4 33 	sts	0x33F4, r27
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    996e:	e0 e2       	ldi	r30, 0x20	; 32
    9970:	f6 e0       	ldi	r31, 0x06	; 6
    9972:	11 e0       	ldi	r17, 0x01	; 1
    9974:	16 83       	std	Z+6, r17	; 0x06

		Leds_Clear(sd_Green);
		Leds_Clear(wifi_Green);
		timeRecordingStarted = UNIX_time;
    9976:	80 e4       	ldi	r24, 0x40	; 64
    9978:	86 83       	std	Z+6, r24	; 0x06
    997a:	80 91 9c 33 	lds	r24, 0x339C
    997e:	90 91 9d 33 	lds	r25, 0x339D
    9982:	a0 91 9e 33 	lds	r26, 0x339E
    9986:	b0 91 9f 33 	lds	r27, 0x339F
    998a:	80 93 68 33 	sts	0x3368, r24
    998e:	90 93 69 33 	sts	0x3369, r25
    9992:	a0 93 6a 33 	sts	0x336A, r26
    9996:	b0 93 6b 33 	sts	0x336B, r27

		//Debug_SendString("RTC Block: ",false);							// send rtc block
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    999a:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    999e:	20 91 9c 33 	lds	r18, 0x339C
    99a2:	30 91 9d 33 	lds	r19, 0x339D
    99a6:	40 91 9e 33 	lds	r20, 0x339E
    99aa:	50 91 9f 33 	lds	r21, 0x339F
    99ae:	0e 94 6f 3a 	call	0x74de	; 0x74de <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    99b2:	80 91 8b 33 	lds	r24, 0x338B
    99b6:	90 91 8c 33 	lds	r25, 0x338C
    99ba:	80 93 89 33 	sts	0x3389, r24
    99be:	90 93 8a 33 	sts	0x338A, r25
		//Debug_SendString(ltoa(UNIX_time,temp3,10),false);
		//Debug_SendString(", ",false);
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp3,10),true);

		Rs232_ClearBuffer();
		rs232Recording = true;
    99c2:	10 93 96 33 	sts	0x3396, r17
		recording = true;
    99c6:	10 93 a1 33 	sts	0x33A1, r17
		okToOpenLogFile = false;
    99ca:	10 92 cc 33 	sts	0x33CC, r1
		directoryOpened = false;
    99ce:	10 92 d2 33 	sts	0x33D2, r1
		okToReopenDirectory = true;
    99d2:	10 93 d1 33 	sts	0x33D1, r17
	}

	if(okToCloseLogFile){
    99d6:	80 91 ce 33 	lds	r24, 0x33CE
    99da:	88 23       	and	r24, r24
    99dc:	49 f0       	breq	.+18     	; 0x99f0 <__vector_53+0x364>
		SD_Close();
    99de:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <SD_Close>
		okToCloseLogFile = false;
    99e2:	10 92 ce 33 	sts	0x33CE, r1
		directoryOpened = false;
    99e6:	10 92 d2 33 	sts	0x33D2, r1
		okToReopenDirectory = true;
    99ea:	81 e0       	ldi	r24, 0x01	; 1
    99ec:	80 93 d1 33 	sts	0x33D1, r24
	}

	if(okToSendRTCBlock && recording){
    99f0:	80 91 b3 33 	lds	r24, 0x33B3
    99f4:	88 23       	and	r24, r24
    99f6:	91 f0       	breq	.+36     	; 0x9a1c <__vector_53+0x390>
    99f8:	80 91 a1 33 	lds	r24, 0x33A1
    99fc:	88 23       	and	r24, r24
    99fe:	71 f0       	breq	.+28     	; 0x9a1c <__vector_53+0x390>
		//Debug_SendString("RTC Block: ",false);
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    9a00:	0e 94 8a 30 	call	0x6114	; 0x6114 <Time_Get32BitTimer>
    9a04:	20 91 9c 33 	lds	r18, 0x339C
    9a08:	30 91 9d 33 	lds	r19, 0x339D
    9a0c:	40 91 9e 33 	lds	r20, 0x339E
    9a10:	50 91 9f 33 	lds	r21, 0x339F
    9a14:	0e 94 6f 3a 	call	0x74de	; 0x74de <SD_WriteRTCBlock>
		//Debug_SendString(ltoa(UNIX_time,temp3,10),false);
		//Debug_SendString(", ",false);
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp3,10),true);
		okToSendRTCBlock = false;
    9a18:	10 92 b3 33 	sts	0x33B3, r1
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    9a1c:	80 91 d0 33 	lds	r24, 0x33D0
    9a20:	88 23       	and	r24, r24
    9a22:	09 f4       	brne	.+2      	; 0x9a26 <__vector_53+0x39a>
    9a24:	63 c0       	rjmp	.+198    	; 0x9aec <__vector_53+0x460>
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    9a26:	80 91 a8 06 	lds	r24, 0x06A8
    9a2a:	80 fd       	sbrc	r24, 0
    9a2c:	5f c0       	rjmp	.+190    	; 0x9aec <__vector_53+0x460>
    9a2e:	5b c2       	rjmp	.+1206   	; 0x9ee6 <__vector_53+0x85a>
		if(okToReopenDirectory){
    9a30:	80 91 d1 33 	lds	r24, 0x33D1
    9a34:	88 23       	and	r24, r24
    9a36:	69 f0       	breq	.+26     	; 0x9a52 <__vector_53+0x3c6>
			if(f_opendir(&dir, "/") == FR_OK){
    9a38:	80 e7       	ldi	r24, 0x70	; 112
    9a3a:	91 e5       	ldi	r25, 0x51	; 81
    9a3c:	62 e7       	ldi	r22, 0x72	; 114
    9a3e:	75 e2       	ldi	r23, 0x25	; 37
    9a40:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <f_opendir>
    9a44:	88 23       	and	r24, r24
    9a46:	29 f4       	brne	.+10     	; 0x9a52 <__vector_53+0x3c6>
				directoryOpened = true;
    9a48:	81 e0       	ldi	r24, 0x01	; 1
    9a4a:	80 93 d2 33 	sts	0x33D2, r24
				okToReopenDirectory = false;
    9a4e:	10 92 d1 33 	sts	0x33D1, r1
			}
		}

		if(directoryOpened){
    9a52:	80 91 d2 33 	lds	r24, 0x33D2
    9a56:	88 23       	and	r24, r24
    9a58:	09 f4       	brne	.+2      	; 0x9a5c <__vector_53+0x3d0>
    9a5a:	48 c0       	rjmp	.+144    	; 0x9aec <__vector_53+0x460>
			if((f_readdir(&dir, &fno) == FR_OK)){
    9a5c:	80 e7       	ldi	r24, 0x70	; 112
    9a5e:	91 e5       	ldi	r25, 0x51	; 81
    9a60:	69 ef       	ldi	r22, 0xF9	; 249
    9a62:	74 e4       	ldi	r23, 0x44	; 68
    9a64:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <f_readdir>
    9a68:	88 23       	and	r24, r24
    9a6a:	09 f0       	breq	.+2      	; 0x9a6e <__vector_53+0x3e2>
    9a6c:	3f c0       	rjmp	.+126    	; 0x9aec <__vector_53+0x460>
				if(fno.fname[0] == 0){
    9a6e:	80 91 02 45 	lds	r24, 0x4502
    9a72:	88 23       	and	r24, r24
    9a74:	31 f4       	brne	.+12     	; 0x9a82 <__vector_53+0x3f6>
					directoryOpened = false;
    9a76:	10 92 d2 33 	sts	0x33D2, r1
					okToReopenDirectory = true;
    9a7a:	81 e0       	ldi	r24, 0x01	; 1
    9a7c:	80 93 d1 33 	sts	0x33D1, r24
    9a80:	35 c0       	rjmp	.+106    	; 0x9aec <__vector_53+0x460>
				} else {
					if(recording){
    9a82:	80 91 a1 33 	lds	r24, 0x33A1
    9a86:	88 23       	and	r24, r24
    9a88:	c1 f0       	breq	.+48     	; 0x9aba <__vector_53+0x42e>
						if((strcasecmp(currentLogFile,fno.fname)) > 0){		// file is NOT the current file
    9a8a:	89 ec       	ldi	r24, 0xC9	; 201
    9a8c:	9c e3       	ldi	r25, 0x3C	; 60
    9a8e:	62 e0       	ldi	r22, 0x02	; 2
    9a90:	75 e4       	ldi	r23, 0x45	; 69
    9a92:	0e 94 b4 5c 	call	0xb968	; 0xb968 <strcasecmp>
    9a96:	18 16       	cp	r1, r24
    9a98:	19 06       	cpc	r1, r25
    9a9a:	44 f5       	brge	.+80     	; 0x9aec <__vector_53+0x460>
							if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9a9c:	82 e0       	ldi	r24, 0x02	; 2
    9a9e:	95 e4       	ldi	r25, 0x45	; 69
    9aa0:	64 e7       	ldi	r22, 0x74	; 116
    9aa2:	75 e2       	ldi	r23, 0x25	; 37
    9aa4:	0e 94 c7 5c 	call	0xb98e	; 0xb98e <strcasestr>
    9aa8:	89 2b       	or	r24, r25
    9aaa:	01 f1       	breq	.+64     	; 0x9aec <__vector_53+0x460>
								if(strcasestr(fno.fname,".BTU") == NULL){
    9aac:	82 e0       	ldi	r24, 0x02	; 2
    9aae:	95 e4       	ldi	r25, 0x45	; 69
    9ab0:	68 e7       	ldi	r22, 0x78	; 120
    9ab2:	75 e2       	ldi	r23, 0x25	; 37
    9ab4:	0e 94 c7 5c 	call	0xb98e	; 0xb98e <strcasestr>
    9ab8:	0e c0       	rjmp	.+28     	; 0x9ad6 <__vector_53+0x44a>
									okToUpload= true;
								}
							}
						}
					} else {
						if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9aba:	82 e0       	ldi	r24, 0x02	; 2
    9abc:	95 e4       	ldi	r25, 0x45	; 69
    9abe:	64 e7       	ldi	r22, 0x74	; 116
    9ac0:	75 e2       	ldi	r23, 0x25	; 37
    9ac2:	0e 94 c7 5c 	call	0xb98e	; 0xb98e <strcasestr>
    9ac6:	89 2b       	or	r24, r25
    9ac8:	89 f0       	breq	.+34     	; 0x9aec <__vector_53+0x460>
							if(strcasestr(fno.fname,".BTU") == NULL){
    9aca:	82 e0       	ldi	r24, 0x02	; 2
    9acc:	95 e4       	ldi	r25, 0x45	; 69
    9ace:	68 e7       	ldi	r22, 0x78	; 120
    9ad0:	75 e2       	ldi	r23, 0x25	; 37
    9ad2:	0e 94 c7 5c 	call	0xb98e	; 0xb98e <strcasestr>
    9ad6:	89 2b       	or	r24, r25
    9ad8:	49 f4       	brne	.+18     	; 0x9aec <__vector_53+0x460>
								strcpy(fileToUpload,fno.fname);
    9ada:	82 e6       	ldi	r24, 0x62	; 98
    9adc:	9c e3       	ldi	r25, 0x3C	; 60
    9ade:	62 e0       	ldi	r22, 0x02	; 2
    9ae0:	75 e4       	ldi	r23, 0x45	; 69
    9ae2:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
								okToUpload = true;
    9ae6:	81 e0       	ldi	r24, 0x01	; 1
    9ae8:	80 93 d6 33 	sts	0x33D6, r24
				}
			}
		}
	}

	if(okToOpenFileToUpload){
    9aec:	80 91 d9 33 	lds	r24, 0x33D9
    9af0:	88 23       	and	r24, r24
    9af2:	51 f1       	breq	.+84     	; 0x9b48 <__vector_53+0x4bc>
	   f_stat(fileToUpload,&fno);
    9af4:	82 e6       	ldi	r24, 0x62	; 98
    9af6:	9c e3       	ldi	r25, 0x3C	; 60
    9af8:	69 ef       	ldi	r22, 0xF9	; 249
    9afa:	74 e4       	ldi	r23, 0x44	; 68
    9afc:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <f_stat>
	   uploadFileSize = fno.fsize;
    9b00:	80 91 f9 44 	lds	r24, 0x44F9
    9b04:	90 91 fa 44 	lds	r25, 0x44FA
    9b08:	a0 91 fb 44 	lds	r26, 0x44FB
    9b0c:	b0 91 fc 44 	lds	r27, 0x44FC
    9b10:	80 93 e0 33 	sts	0x33E0, r24
    9b14:	90 93 e1 33 	sts	0x33E1, r25
    9b18:	a0 93 e2 33 	sts	0x33E2, r26
    9b1c:	b0 93 e3 33 	sts	0x33E3, r27
	   f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9b20:	86 e8       	ldi	r24, 0x86	; 134
    9b22:	91 e5       	ldi	r25, 0x51	; 81
    9b24:	62 e6       	ldi	r22, 0x62	; 98
    9b26:	7c e3       	ldi	r23, 0x3C	; 60
    9b28:	43 e1       	ldi	r20, 0x13	; 19
    9b2a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <f_open>
	   f_lseek(&Upload_File, 0);
    9b2e:	86 e8       	ldi	r24, 0x86	; 134
    9b30:	91 e5       	ldi	r25, 0x51	; 81
    9b32:	40 e0       	ldi	r20, 0x00	; 0
    9b34:	50 e0       	ldi	r21, 0x00	; 0
    9b36:	60 e0       	ldi	r22, 0x00	; 0
    9b38:	70 e0       	ldi	r23, 0x00	; 0
    9b3a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <f_lseek>
	   uploadFileOpened = true;
    9b3e:	81 e0       	ldi	r24, 0x01	; 1
    9b40:	80 93 05 31 	sts	0x3105, r24
	   okToOpenFileToUpload = false;
    9b44:	10 92 d9 33 	sts	0x33D9, r1
	}

    if(okToFillUploadFileBuffer){
    9b48:	80 91 da 33 	lds	r24, 0x33DA
    9b4c:	88 23       	and	r24, r24
    9b4e:	81 f0       	breq	.+32     	; 0x9b70 <__vector_53+0x4e4>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    9b50:	86 e8       	ldi	r24, 0x86	; 134
    9b52:	91 e5       	ldi	r25, 0x51	; 81
    9b54:	62 e7       	ldi	r22, 0x72	; 114
    9b56:	78 e3       	ldi	r23, 0x38	; 56
    9b58:	48 ee       	ldi	r20, 0xE8	; 232
    9b5a:	53 e0       	ldi	r21, 0x03	; 3
    9b5c:	9e 01       	movw	r18, r28
    9b5e:	2f 5f       	subi	r18, 0xFF	; 255
    9b60:	3f 4f       	sbci	r19, 0xFF	; 255
    9b62:	0e 94 2b 18 	call	0x3056	; 0x3056 <f_read>
        okToFillUploadFileBuffer = false;
    9b66:	10 92 da 33 	sts	0x33DA, r1
        uploadFileBufferFull = true;
    9b6a:	81 e0       	ldi	r24, 0x01	; 1
    9b6c:	80 93 db 33 	sts	0x33DB, r24
    }


	if(okToCloseUploadFile){
    9b70:	80 91 d4 33 	lds	r24, 0x33D4
    9b74:	88 23       	and	r24, r24
    9b76:	b1 f0       	breq	.+44     	; 0x9ba4 <__vector_53+0x518>
	    f_sync(&Upload_File);
    9b78:	86 e8       	ldi	r24, 0x86	; 134
    9b7a:	91 e5       	ldi	r25, 0x51	; 81
    9b7c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>
	    f_close(&Upload_File);
    9b80:	86 e8       	ldi	r24, 0x86	; 134
    9b82:	91 e5       	ldi	r25, 0x51	; 81
    9b84:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <f_close>
	    if(okToRenameUploadFile){
    9b88:	80 91 d5 33 	lds	r24, 0x33D5
    9b8c:	88 23       	and	r24, r24
    9b8e:	41 f0       	breq	.+16     	; 0x9ba0 <__vector_53+0x514>
	       f_rename(fileToUpload,newFileName);
    9b90:	82 e6       	ldi	r24, 0x62	; 98
    9b92:	9c e3       	ldi	r25, 0x3C	; 60
    9b94:	65 e0       	ldi	r22, 0x05	; 5
    9b96:	77 e5       	ldi	r23, 0x57	; 87
    9b98:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <f_rename>
	       //Debug_SendString("Renaming File",true);
	       okToRenameUploadFile = false;
    9b9c:	10 92 d5 33 	sts	0x33D5, r1
	    }
		okToCloseUploadFile = false;
    9ba0:	10 92 d4 33 	sts	0x33D4, r1
	}




	if(okToWriteUploaderLogFile){
    9ba4:	80 91 fd 33 	lds	r24, 0x33FD
    9ba8:	88 23       	and	r24, r24
    9baa:	09 f4       	brne	.+2      	; 0x9bae <__vector_53+0x522>
    9bac:	e0 c0       	rjmp	.+448    	; 0x9d6e <__vector_53+0x6e2>

        if(useWifiForUploading){
    9bae:	80 91 6d 33 	lds	r24, 0x336D
    9bb2:	88 23       	and	r24, r24
    9bb4:	29 f0       	breq	.+10     	; 0x9bc0 <__vector_53+0x534>
            Debug_SendString("Updating uploadLg File",true);
    9bb6:	8d e7       	ldi	r24, 0x7D	; 125
    9bb8:	95 e2       	ldi	r25, 0x25	; 37
    9bba:	61 e0       	ldi	r22, 0x01	; 1
    9bbc:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    9bc0:	84 e9       	ldi	r24, 0x94	; 148
    9bc2:	95 e2       	ldi	r25, 0x25	; 37
    9bc4:	6a ee       	ldi	r22, 0xEA	; 234
    9bc6:	7a e4       	ldi	r23, 0x4A	; 74
    9bc8:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9bcc:	86 e8       	ldi	r24, 0x86	; 134
    9bce:	91 e5       	ldi	r25, 0x51	; 81
    9bd0:	64 e9       	ldi	r22, 0x94	; 148
    9bd2:	75 e2       	ldi	r23, 0x25	; 37
    9bd4:	43 e1       	ldi	r20, 0x13	; 19
    9bd6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <f_open>

        if(fno2.fsize > 0){
    9bda:	40 91 ea 4a 	lds	r20, 0x4AEA
    9bde:	50 91 eb 4a 	lds	r21, 0x4AEB
    9be2:	60 91 ec 4a 	lds	r22, 0x4AEC
    9be6:	70 91 ed 4a 	lds	r23, 0x4AED
    9bea:	41 15       	cp	r20, r1
    9bec:	51 05       	cpc	r21, r1
    9bee:	61 05       	cpc	r22, r1
    9bf0:	71 05       	cpc	r23, r1
    9bf2:	21 f0       	breq	.+8      	; 0x9bfc <__vector_53+0x570>
           f_lseek(&Upload_File, fno2.fsize);
    9bf4:	86 e8       	ldi	r24, 0x86	; 134
    9bf6:	91 e5       	ldi	r25, 0x51	; 81
    9bf8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    9bfc:	82 ea       	ldi	r24, 0xA2	; 162
    9bfe:	95 e2       	ldi	r25, 0x25	; 37
    9c00:	66 e8       	ldi	r22, 0x86	; 134
    9c02:	71 e5       	ldi	r23, 0x51	; 81
    9c04:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(fileToUpload,&Upload_File);
    9c08:	82 e6       	ldi	r24, 0x62	; 98
    9c0a:	9c e3       	ldi	r25, 0x3C	; 60
    9c0c:	66 e8       	ldi	r22, 0x86	; 134
    9c0e:	71 e5       	ldi	r23, 0x51	; 81
    9c10:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(", Size: ",&Upload_File);
    9c14:	8e ea       	ldi	r24, 0xAE	; 174
    9c16:	95 e2       	ldi	r25, 0x25	; 37
    9c18:	66 e8       	ldi	r22, 0x86	; 134
    9c1a:	71 e5       	ldi	r23, 0x51	; 81
    9c1c:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    9c20:	60 91 e0 33 	lds	r22, 0x33E0
    9c24:	70 91 e1 33 	lds	r23, 0x33E1
    9c28:	80 91 e2 33 	lds	r24, 0x33E2
    9c2c:	90 91 e3 33 	lds	r25, 0x33E3
    9c30:	48 eb       	ldi	r20, 0xB8	; 184
    9c32:	5b e5       	ldi	r21, 0x5B	; 91
    9c34:	2a e0       	ldi	r18, 0x0A	; 10
    9c36:	30 e0       	ldi	r19, 0x00	; 0
    9c38:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    9c3c:	66 e8       	ldi	r22, 0x86	; 134
    9c3e:	71 e5       	ldi	r23, 0x51	; 81
    9c40:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(" bytes, Response: ",&Upload_File);
    9c44:	87 eb       	ldi	r24, 0xB7	; 183
    9c46:	95 e2       	ldi	r25, 0x25	; 37
    9c48:	66 e8       	ldi	r22, 0x86	; 134
    9c4a:	71 e5       	ldi	r23, 0x51	; 81
    9c4c:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(httpResponse,&Upload_File);
    9c50:	8a ec       	ldi	r24, 0xCA	; 202
    9c52:	93 e5       	ldi	r25, 0x53	; 83
    9c54:	66 e8       	ldi	r22, 0x86	; 134
    9c56:	71 e5       	ldi	r23, 0x51	; 81
    9c58:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(", Successful Records: ",&Upload_File);
    9c5c:	8a ec       	ldi	r24, 0xCA	; 202
    9c5e:	95 e2       	ldi	r25, 0x25	; 37
    9c60:	66 e8       	ldi	r22, 0x86	; 134
    9c62:	71 e5       	ldi	r23, 0x51	; 81
    9c64:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(successfulBinaryRecordsString,&Upload_File);
    9c68:	89 e2       	ldi	r24, 0x29	; 41
    9c6a:	9b e4       	ldi	r25, 0x4B	; 75
    9c6c:	66 e8       	ldi	r22, 0x86	; 134
    9c6e:	71 e5       	ldi	r23, 0x51	; 81
    9c70:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(", Failed Records: ",&Upload_File);
    9c74:	81 ee       	ldi	r24, 0xE1	; 225
    9c76:	95 e2       	ldi	r25, 0x25	; 37
    9c78:	66 e8       	ldi	r22, 0x86	; 134
    9c7a:	71 e5       	ldi	r23, 0x51	; 81
    9c7c:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(failedBinaryRecordsString,&Upload_File);
    9c80:	82 e5       	ldi	r24, 0x52	; 82
    9c82:	9c e5       	ldi	r25, 0x5C	; 92
    9c84:	66 e8       	ldi	r22, 0x86	; 134
    9c86:	71 e5       	ldi	r23, 0x51	; 81
    9c88:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(", Time to upload: ",&Upload_File);
    9c8c:	84 ef       	ldi	r24, 0xF4	; 244
    9c8e:	95 e2       	ldi	r25, 0x25	; 37
    9c90:	66 e8       	ldi	r22, 0x86	; 134
    9c92:	71 e5       	ldi	r23, 0x51	; 81
    9c94:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(ltoa(uploadTimeStop - uploadTimeStart,temp3,10),&Upload_File);
    9c98:	60 91 db 3c 	lds	r22, 0x3CDB
    9c9c:	70 91 dc 3c 	lds	r23, 0x3CDC
    9ca0:	80 91 dd 3c 	lds	r24, 0x3CDD
    9ca4:	90 91 de 3c 	lds	r25, 0x3CDE
    9ca8:	20 91 7f 3c 	lds	r18, 0x3C7F
    9cac:	30 91 80 3c 	lds	r19, 0x3C80
    9cb0:	40 91 81 3c 	lds	r20, 0x3C81
    9cb4:	50 91 82 3c 	lds	r21, 0x3C82
    9cb8:	62 1b       	sub	r22, r18
    9cba:	73 0b       	sbc	r23, r19
    9cbc:	84 0b       	sbc	r24, r20
    9cbe:	95 0b       	sbc	r25, r21
    9cc0:	48 eb       	ldi	r20, 0xB8	; 184
    9cc2:	5b e5       	ldi	r21, 0x5B	; 91
    9cc4:	2a e0       	ldi	r18, 0x0A	; 10
    9cc6:	30 e0       	ldi	r19, 0x00	; 0
    9cc8:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    9ccc:	66 e8       	ldi	r22, 0x86	; 134
    9cce:	71 e5       	ldi	r23, 0x51	; 81
    9cd0:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(" secs, Speed of upload: ",&Upload_File);
    9cd4:	87 e0       	ldi	r24, 0x07	; 7
    9cd6:	96 e2       	ldi	r25, 0x26	; 38
    9cd8:	66 e8       	ldi	r22, 0x86	; 134
    9cda:	71 e5       	ldi	r23, 0x51	; 81
    9cdc:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(ltoa(uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)),temp3,10),&Upload_File);
    9ce0:	60 91 e0 33 	lds	r22, 0x33E0
    9ce4:	70 91 e1 33 	lds	r23, 0x33E1
    9ce8:	80 91 e2 33 	lds	r24, 0x33E2
    9cec:	90 91 e3 33 	lds	r25, 0x33E3
    9cf0:	20 91 db 3c 	lds	r18, 0x3CDB
    9cf4:	30 91 dc 3c 	lds	r19, 0x3CDC
    9cf8:	40 91 dd 3c 	lds	r20, 0x3CDD
    9cfc:	50 91 de 3c 	lds	r21, 0x3CDE
    9d00:	e0 90 7f 3c 	lds	r14, 0x3C7F
    9d04:	f0 90 80 3c 	lds	r15, 0x3C80
    9d08:	00 91 81 3c 	lds	r16, 0x3C81
    9d0c:	10 91 82 3c 	lds	r17, 0x3C82
    9d10:	2e 19       	sub	r18, r14
    9d12:	3f 09       	sbc	r19, r15
    9d14:	40 0b       	sbc	r20, r16
    9d16:	51 0b       	sbc	r21, r17
    9d18:	e7 e0       	ldi	r30, 0x07	; 7
    9d1a:	22 0f       	add	r18, r18
    9d1c:	33 1f       	adc	r19, r19
    9d1e:	44 1f       	adc	r20, r20
    9d20:	55 1f       	adc	r21, r21
    9d22:	ea 95       	dec	r30
    9d24:	d1 f7       	brne	.-12     	; 0x9d1a <__vector_53+0x68e>
    9d26:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    9d2a:	ca 01       	movw	r24, r20
    9d2c:	b9 01       	movw	r22, r18
    9d2e:	48 eb       	ldi	r20, 0xB8	; 184
    9d30:	5b e5       	ldi	r21, 0x5B	; 91
    9d32:	2a e0       	ldi	r18, 0x0A	; 10
    9d34:	30 e0       	ldi	r19, 0x00	; 0
    9d36:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    9d3a:	66 e8       	ldi	r22, 0x86	; 134
    9d3c:	71 e5       	ldi	r23, 0x51	; 81
    9d3e:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>

        f_puts(" kbps",&Upload_File);
    9d42:	80 e2       	ldi	r24, 0x20	; 32
    9d44:	96 e2       	ldi	r25, 0x26	; 38
    9d46:	66 e8       	ldi	r22, 0x86	; 134
    9d48:	71 e5       	ldi	r23, 0x51	; 81
    9d4a:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_putc(13,&Upload_File);
    9d4e:	8d e0       	ldi	r24, 0x0D	; 13
    9d50:	90 e0       	ldi	r25, 0x00	; 0
    9d52:	66 e8       	ldi	r22, 0x86	; 134
    9d54:	71 e5       	ldi	r23, 0x51	; 81
    9d56:	0e 94 20 2b 	call	0x5640	; 0x5640 <f_putc>
        f_sync(&Upload_File);
    9d5a:	86 e8       	ldi	r24, 0x86	; 134
    9d5c:	91 e5       	ldi	r25, 0x51	; 81
    9d5e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>
	    f_close(&Upload_File);
    9d62:	86 e8       	ldi	r24, 0x86	; 134
    9d64:	91 e5       	ldi	r25, 0x51	; 81
    9d66:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <f_close>
	    okToWriteUploaderLogFile = false;
    9d6a:	10 92 fd 33 	sts	0x33FD, r1
	}

	if(uploadFailed){
    9d6e:	80 91 d3 33 	lds	r24, 0x33D3
    9d72:	88 23       	and	r24, r24
    9d74:	09 f4       	brne	.+2      	; 0x9d78 <__vector_53+0x6ec>
    9d76:	61 c0       	rjmp	.+194    	; 0x9e3a <__vector_53+0x7ae>

        if(useWifiForUploading){
    9d78:	80 91 6d 33 	lds	r24, 0x336D
    9d7c:	88 23       	and	r24, r24
    9d7e:	29 f0       	breq	.+10     	; 0x9d8a <__vector_53+0x6fe>
            Debug_SendString("Updating uploadLg File",true);
    9d80:	8d e7       	ldi	r24, 0x7D	; 125
    9d82:	95 e2       	ldi	r25, 0x25	; 37
    9d84:	61 e0       	ldi	r22, 0x01	; 1
    9d86:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    9d8a:	84 e9       	ldi	r24, 0x94	; 148
    9d8c:	95 e2       	ldi	r25, 0x25	; 37
    9d8e:	6a ee       	ldi	r22, 0xEA	; 234
    9d90:	7a e4       	ldi	r23, 0x4A	; 74
    9d92:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9d96:	86 e8       	ldi	r24, 0x86	; 134
    9d98:	91 e5       	ldi	r25, 0x51	; 81
    9d9a:	64 e9       	ldi	r22, 0x94	; 148
    9d9c:	75 e2       	ldi	r23, 0x25	; 37
    9d9e:	43 e1       	ldi	r20, 0x13	; 19
    9da0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <f_open>
        if(fno2.fsize > 0){
    9da4:	40 91 ea 4a 	lds	r20, 0x4AEA
    9da8:	50 91 eb 4a 	lds	r21, 0x4AEB
    9dac:	60 91 ec 4a 	lds	r22, 0x4AEC
    9db0:	70 91 ed 4a 	lds	r23, 0x4AED
    9db4:	41 15       	cp	r20, r1
    9db6:	51 05       	cpc	r21, r1
    9db8:	61 05       	cpc	r22, r1
    9dba:	71 05       	cpc	r23, r1
    9dbc:	21 f0       	breq	.+8      	; 0x9dc6 <__vector_53+0x73a>
           f_lseek(&Upload_File, fno2.fsize);
    9dbe:	86 e8       	ldi	r24, 0x86	; 134
    9dc0:	91 e5       	ldi	r25, 0x51	; 81
    9dc2:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    9dc6:	82 ea       	ldi	r24, 0xA2	; 162
    9dc8:	95 e2       	ldi	r25, 0x25	; 37
    9dca:	66 e8       	ldi	r22, 0x86	; 134
    9dcc:	71 e5       	ldi	r23, 0x51	; 81
    9dce:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(fileToUpload,&Upload_File);
    9dd2:	82 e6       	ldi	r24, 0x62	; 98
    9dd4:	9c e3       	ldi	r25, 0x3C	; 60
    9dd6:	66 e8       	ldi	r22, 0x86	; 134
    9dd8:	71 e5       	ldi	r23, 0x51	; 81
    9dda:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(", Size: ",&Upload_File);
    9dde:	8e ea       	ldi	r24, 0xAE	; 174
    9de0:	95 e2       	ldi	r25, 0x25	; 37
    9de2:	66 e8       	ldi	r22, 0x86	; 134
    9de4:	71 e5       	ldi	r23, 0x51	; 81
    9de6:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    9dea:	60 91 e0 33 	lds	r22, 0x33E0
    9dee:	70 91 e1 33 	lds	r23, 0x33E1
    9df2:	80 91 e2 33 	lds	r24, 0x33E2
    9df6:	90 91 e3 33 	lds	r25, 0x33E3
    9dfa:	48 eb       	ldi	r20, 0xB8	; 184
    9dfc:	5b e5       	ldi	r21, 0x5B	; 91
    9dfe:	2a e0       	ldi	r18, 0x0A	; 10
    9e00:	30 e0       	ldi	r19, 0x00	; 0
    9e02:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    9e06:	66 e8       	ldi	r22, 0x86	; 134
    9e08:	71 e5       	ldi	r23, 0x51	; 81
    9e0a:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
        f_puts(" bytes, uploadFailed failed...",&Upload_File);
    9e0e:	86 e2       	ldi	r24, 0x26	; 38
    9e10:	96 e2       	ldi	r25, 0x26	; 38
    9e12:	66 e8       	ldi	r22, 0x86	; 134
    9e14:	71 e5       	ldi	r23, 0x51	; 81
    9e16:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>

        f_putc(13,&Upload_File);
    9e1a:	8d e0       	ldi	r24, 0x0D	; 13
    9e1c:	90 e0       	ldi	r25, 0x00	; 0
    9e1e:	66 e8       	ldi	r22, 0x86	; 134
    9e20:	71 e5       	ldi	r23, 0x51	; 81
    9e22:	0e 94 20 2b 	call	0x5640	; 0x5640 <f_putc>
        f_sync(&Upload_File);
    9e26:	86 e8       	ldi	r24, 0x86	; 134
    9e28:	91 e5       	ldi	r25, 0x51	; 81
    9e2a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <f_sync>
	    f_close(&Upload_File);
    9e2e:	86 e8       	ldi	r24, 0x86	; 134
    9e30:	91 e5       	ldi	r25, 0x51	; 81
    9e32:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <f_close>
	    uploadFailed = false;
    9e36:	10 92 d3 33 	sts	0x33D3, r1
	}

	if(okToGetRemainingSpace){
    9e3a:	80 91 28 4b 	lds	r24, 0x4B28
    9e3e:	88 23       	and	r24, r24
    9e40:	09 f4       	brne	.+2      	; 0x9e44 <__vector_53+0x7b8>
    9e42:	57 c0       	rjmp	.+174    	; 0x9ef2 <__vector_53+0x866>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    9e44:	85 e4       	ldi	r24, 0x45	; 69
    9e46:	96 e2       	ldi	r25, 0x26	; 38
    9e48:	6e ef       	ldi	r22, 0xFE	; 254
    9e4a:	73 e3       	ldi	r23, 0x33	; 51
    9e4c:	4f e0       	ldi	r20, 0x0F	; 15
    9e4e:	55 e4       	ldi	r21, 0x45	; 69
    9e50:	0e 94 04 20 	call	0x4008	; 0x4008 <f_getfree>
    9e54:	88 23       	and	r24, r24
    9e56:	41 f0       	breq	.+16     	; 0x9e68 <__vector_53+0x7dc>
           spaceRemainingOnDisk = 0;
    9e58:	10 92 fe 33 	sts	0x33FE, r1
    9e5c:	10 92 ff 33 	sts	0x33FF, r1
    9e60:	10 92 00 34 	sts	0x3400, r1
    9e64:	10 92 01 34 	sts	0x3401, r1
	    }
	    totalDiskSpace = fs->max_clust;
    9e68:	e0 91 0f 45 	lds	r30, 0x450F
    9e6c:	f0 91 10 45 	lds	r31, 0x4510
    9e70:	e2 8c       	ldd	r14, Z+26	; 0x1a
    9e72:	f3 8c       	ldd	r15, Z+27	; 0x1b
    9e74:	04 8d       	ldd	r16, Z+28	; 0x1c
    9e76:	15 8d       	ldd	r17, Z+29	; 0x1d
    9e78:	e0 92 02 34 	sts	0x3402, r14
    9e7c:	f0 92 03 34 	sts	0x3403, r15
    9e80:	00 93 04 34 	sts	0x3404, r16
    9e84:	10 93 05 34 	sts	0x3405, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
	    percentDiskUsed /= totalDiskSpace;
    9e88:	80 91 fe 33 	lds	r24, 0x33FE
    9e8c:	90 91 ff 33 	lds	r25, 0x33FF
    9e90:	a0 91 00 34 	lds	r26, 0x3400
    9e94:	b0 91 01 34 	lds	r27, 0x3401
    9e98:	a8 01       	movw	r20, r16
    9e9a:	97 01       	movw	r18, r14
    9e9c:	28 1b       	sub	r18, r24
    9e9e:	39 0b       	sbc	r19, r25
    9ea0:	4a 0b       	sbc	r20, r26
    9ea2:	5b 0b       	sbc	r21, r27
    9ea4:	ca 01       	movw	r24, r20
    9ea6:	b9 01       	movw	r22, r18
    9ea8:	28 ee       	ldi	r18, 0xE8	; 232
    9eaa:	33 e0       	ldi	r19, 0x03	; 3
    9eac:	40 e0       	ldi	r20, 0x00	; 0
    9eae:	50 e0       	ldi	r21, 0x00	; 0
    9eb0:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    9eb4:	a8 01       	movw	r20, r16
    9eb6:	97 01       	movw	r18, r14
    9eb8:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    9ebc:	20 93 06 34 	sts	0x3406, r18
    9ec0:	30 93 07 34 	sts	0x3407, r19
    9ec4:	40 93 08 34 	sts	0x3408, r20
    9ec8:	50 93 09 34 	sts	0x3409, r21
	    Debug_SendString(temp3,true);
	    sprintf(temp3,"Percent Used  : %lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
        Debug_SendString(temp3,false);
        Debug_SendString("%",true);
        */
	    okToGetRemainingSpace = false;
    9ecc:	10 92 28 4b 	sts	0x4B28, r1
    9ed0:	10 c0       	rjmp	.+32     	; 0x9ef2 <__vector_53+0x866>

	if(okToSendAirQuality && rs232Recording && !restartingFile){
		//Debug_SendString("A Buffer",true);
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
    9ed2:	80 e0       	ldi	r24, 0x00	; 0
    9ed4:	0e 94 cd 03 	call	0x79a	; 0x79a <Rs232_GetByte>
    9ed8:	e1 2f       	mov	r30, r17
    9eda:	f0 e0       	ldi	r31, 0x00	; 0
    9edc:	e3 5c       	subi	r30, 0xC3	; 195
    9ede:	f5 4b       	sbci	r31, 0xB5	; 181
    9ee0:	80 83       	st	Z, r24
			counter++;
    9ee2:	1f 5f       	subi	r17, 0xFF	; 255
    9ee4:	af cc       	rjmp	.-1698   	; 0x9844 <__vector_53+0x1b8>
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp3,10),true);
		okToSendRTCBlock = false;
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    9ee6:	80 91 d7 33 	lds	r24, 0x33D7
    9eea:	88 23       	and	r24, r24
    9eec:	09 f4       	brne	.+2      	; 0x9ef0 <__vector_53+0x864>
    9eee:	a0 cd       	rjmp	.-1216   	; 0x9a30 <__vector_53+0x3a4>
    9ef0:	fd cd       	rjmp	.-1030   	; 0x9aec <__vector_53+0x460>
        Debug_SendString(temp3,false);
        Debug_SendString("%",true);
        */
	    okToGetRemainingSpace = false;
	}
}
    9ef2:	0f 90       	pop	r0
    9ef4:	0f 90       	pop	r0
    9ef6:	cf 91       	pop	r28
    9ef8:	df 91       	pop	r29
    9efa:	ff 91       	pop	r31
    9efc:	ef 91       	pop	r30
    9efe:	bf 91       	pop	r27
    9f00:	af 91       	pop	r26
    9f02:	9f 91       	pop	r25
    9f04:	8f 91       	pop	r24
    9f06:	7f 91       	pop	r23
    9f08:	6f 91       	pop	r22
    9f0a:	5f 91       	pop	r21
    9f0c:	4f 91       	pop	r20
    9f0e:	3f 91       	pop	r19
    9f10:	2f 91       	pop	r18
    9f12:	1f 91       	pop	r17
    9f14:	0f 91       	pop	r16
    9f16:	ff 90       	pop	r15
    9f18:	ef 90       	pop	r14
    9f1a:	0f 90       	pop	r0
    9f1c:	0b be       	out	0x3b, r0	; 59
    9f1e:	0f 90       	pop	r0
    9f20:	0f be       	out	0x3f, r0	; 63
    9f22:	0f 90       	pop	r0
    9f24:	1f 90       	pop	r1
    9f26:	18 95       	reti

00009f28 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9f28:	2f 92       	push	r2
    9f2a:	3f 92       	push	r3
    9f2c:	4f 92       	push	r4
    9f2e:	5f 92       	push	r5
    9f30:	6f 92       	push	r6
    9f32:	7f 92       	push	r7
    9f34:	8f 92       	push	r8
    9f36:	9f 92       	push	r9
    9f38:	af 92       	push	r10
    9f3a:	bf 92       	push	r11
    9f3c:	cf 92       	push	r12
    9f3e:	df 92       	push	r13
    9f40:	ef 92       	push	r14
    9f42:	ff 92       	push	r15
    9f44:	0f 93       	push	r16
    9f46:	1f 93       	push	r17
    9f48:	df 93       	push	r29
    9f4a:	cf 93       	push	r28
    9f4c:	cd b7       	in	r28, 0x3d	; 61
    9f4e:	de b7       	in	r29, 0x3e	; 62
    9f50:	63 97       	sbiw	r28, 0x13	; 19
    9f52:	cd bf       	out	0x3d, r28	; 61
    9f54:	de bf       	out	0x3e, r29	; 62
    9f56:	6b a4       	ldd	r6, Y+43	; 0x2b
    9f58:	7c a4       	ldd	r7, Y+44	; 0x2c
    9f5a:	8e 01       	movw	r16, r28
    9f5c:	03 5d       	subi	r16, 0xD3	; 211
    9f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    9f60:	19 8a       	std	Y+17, r1	; 0x11
    9f62:	1a 8a       	std	Y+18, r1	; 0x12
    9f64:	20 e0       	ldi	r18, 0x00	; 0
    9f66:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9f68:	d3 01       	movw	r26, r6
    9f6a:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    9f6c:	88 23       	and	r24, r24
    9f6e:	09 f4       	brne	.+2      	; 0x9f72 <f_printf+0x4a>
    9f70:	17 c1       	rjmp	.+558    	; 0xa1a0 <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9f72:	08 94       	sec
    9f74:	61 1c       	adc	r6, r1
    9f76:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9f78:	85 32       	cpi	r24, 0x25	; 37
    9f7a:	71 f0       	breq	.+28     	; 0x9f98 <f_printf+0x70>
			cc = f_putc(c, fil);
    9f7c:	90 e0       	ldi	r25, 0x00	; 0
    9f7e:	69 a5       	ldd	r22, Y+41	; 0x29
    9f80:	7a a5       	ldd	r23, Y+42	; 0x2a
    9f82:	0e 94 20 2b 	call	0x5640	; 0x5640 <f_putc>
    9f86:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9f88:	bf ef       	ldi	r27, 0xFF	; 255
    9f8a:	8f 3f       	cpi	r24, 0xFF	; 255
    9f8c:	9b 07       	cpc	r25, r27
    9f8e:	11 f4       	brne	.+4      	; 0x9f94 <f_printf+0x6c>
    9f90:	48 01       	movw	r8, r16
    9f92:	fa c0       	rjmp	.+500    	; 0xa188 <f_printf+0x260>
    9f94:	48 01       	movw	r8, r16
    9f96:	4c c0       	rjmp	.+152    	; 0xa030 <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    9f98:	d3 01       	movw	r26, r6
    9f9a:	ed 91       	ld	r30, X+
    9f9c:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9f9e:	e0 33       	cpi	r30, 0x30	; 48
    9fa0:	11 f0       	breq	.+4      	; 0x9fa6 <f_printf+0x7e>
    9fa2:	1b 8a       	std	Y+19, r1	; 0x13
    9fa4:	04 c0       	rjmp	.+8      	; 0x9fae <f_printf+0x86>
			f = 1; c = *str++;
    9fa6:	ed 91       	ld	r30, X+
    9fa8:	3d 01       	movw	r6, r26
    9faa:	b1 e0       	ldi	r27, 0x01	; 1
    9fac:	bb 8b       	std	Y+19, r27	; 0x13
    9fae:	aa 24       	eor	r10, r10
    9fb0:	bb 24       	eor	r11, r11
    9fb2:	13 c0       	rjmp	.+38     	; 0x9fda <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9fb4:	c5 01       	movw	r24, r10
    9fb6:	53 e0       	ldi	r21, 0x03	; 3
    9fb8:	88 0f       	add	r24, r24
    9fba:	99 1f       	adc	r25, r25
    9fbc:	5a 95       	dec	r21
    9fbe:	e1 f7       	brne	.-8      	; 0x9fb8 <f_printf+0x90>
    9fc0:	aa 0c       	add	r10, r10
    9fc2:	bb 1c       	adc	r11, r11
    9fc4:	a8 0e       	add	r10, r24
    9fc6:	b9 1e       	adc	r11, r25
    9fc8:	ae 0e       	add	r10, r30
    9fca:	b1 1c       	adc	r11, r1
    9fcc:	e0 ed       	ldi	r30, 0xD0	; 208
    9fce:	ff ef       	ldi	r31, 0xFF	; 255
    9fd0:	ae 0e       	add	r10, r30
    9fd2:	bf 1e       	adc	r11, r31
			c = *str++;
    9fd4:	d3 01       	movw	r26, r6
    9fd6:	ed 91       	ld	r30, X+
    9fd8:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9fda:	8e 2f       	mov	r24, r30
    9fdc:	80 53       	subi	r24, 0x30	; 48
    9fde:	8a 30       	cpi	r24, 0x0A	; 10
    9fe0:	48 f3       	brcs	.-46     	; 0x9fb4 <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9fe2:	ec 36       	cpi	r30, 0x6C	; 108
    9fe4:	31 f4       	brne	.+12     	; 0x9ff2 <f_printf+0xca>
			f |= 2; c = *str++;
    9fe6:	bb 89       	ldd	r27, Y+19	; 0x13
    9fe8:	b2 60       	ori	r27, 0x02	; 2
    9fea:	bb 8b       	std	Y+19, r27	; 0x13
    9fec:	d3 01       	movw	r26, r6
    9fee:	ed 91       	ld	r30, X+
    9ff0:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9ff2:	e3 37       	cpi	r30, 0x73	; 115
    9ff4:	49 f4       	brne	.+18     	; 0xa008 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    9ff6:	82 e0       	ldi	r24, 0x02	; 2
    9ff8:	88 2e       	mov	r8, r24
    9ffa:	91 2c       	mov	r9, r1
    9ffc:	80 0e       	add	r8, r16
    9ffe:	91 1e       	adc	r9, r17
    a000:	f8 01       	movw	r30, r16
    a002:	80 81       	ld	r24, Z
    a004:	91 81       	ldd	r25, Z+1	; 0x01
    a006:	bb c0       	rjmp	.+374    	; 0xa17e <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    a008:	e3 36       	cpi	r30, 0x63	; 99
    a00a:	a9 f4       	brne	.+42     	; 0xa036 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    a00c:	b2 e0       	ldi	r27, 0x02	; 2
    a00e:	8b 2e       	mov	r8, r27
    a010:	91 2c       	mov	r9, r1
    a012:	80 0e       	add	r8, r16
    a014:	91 1e       	adc	r9, r17
    a016:	d8 01       	movw	r26, r16
    a018:	8d 91       	ld	r24, X+
    a01a:	9c 91       	ld	r25, X
    a01c:	69 a5       	ldd	r22, Y+41	; 0x29
    a01e:	7a a5       	ldd	r23, Y+42	; 0x2a
    a020:	0e 94 20 2b 	call	0x5640	; 0x5640 <f_putc>
    a024:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    a026:	bf ef       	ldi	r27, 0xFF	; 255
    a028:	8f 3f       	cpi	r24, 0xFF	; 255
    a02a:	9b 07       	cpc	r25, r27
    a02c:	09 f4       	brne	.+2      	; 0xa030 <f_printf+0x108>
    a02e:	ac c0       	rjmp	.+344    	; 0xa188 <f_printf+0x260>
    a030:	21 e0       	ldi	r18, 0x01	; 1
    a032:	30 e0       	ldi	r19, 0x00	; 0
    a034:	a9 c0       	rjmp	.+338    	; 0xa188 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    a036:	e4 36       	cpi	r30, 0x64	; 100
    a038:	39 f0       	breq	.+14     	; 0xa048 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    a03a:	e5 37       	cpi	r30, 0x75	; 117
    a03c:	29 f0       	breq	.+10     	; 0xa048 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    a03e:	e8 35       	cpi	r30, 0x58	; 88
    a040:	09 f0       	breq	.+2      	; 0xa044 <f_printf+0x11c>
    a042:	ae c0       	rjmp	.+348    	; 0xa1a0 <f_printf+0x278>
    a044:	20 e1       	ldi	r18, 0x10	; 16
    a046:	01 c0       	rjmp	.+2      	; 0xa04a <f_printf+0x122>
    a048:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    a04a:	fb 89       	ldd	r31, Y+19	; 0x13
    a04c:	f1 ff       	sbrs	r31, 1
    a04e:	0d c0       	rjmp	.+26     	; 0xa06a <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    a050:	a4 e0       	ldi	r26, 0x04	; 4
    a052:	8a 2e       	mov	r8, r26
    a054:	91 2c       	mov	r9, r1
    a056:	80 0e       	add	r8, r16
    a058:	91 1e       	adc	r9, r17
    a05a:	d8 01       	movw	r26, r16
    a05c:	ed 90       	ld	r14, X+
    a05e:	fd 90       	ld	r15, X+
    a060:	0d 91       	ld	r16, X+
    a062:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    a064:	e4 36       	cpi	r30, 0x64	; 100
    a066:	09 f5       	brne	.+66     	; 0xa0aa <f_printf+0x182>
    a068:	13 c0       	rjmp	.+38     	; 0xa090 <f_printf+0x168>
    a06a:	c8 01       	movw	r24, r16
    a06c:	02 96       	adiw	r24, 0x02	; 2
    a06e:	d8 01       	movw	r26, r16
    a070:	6d 91       	ld	r22, X+
    a072:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    a074:	e4 36       	cpi	r30, 0x64	; 100
    a076:	39 f4       	brne	.+14     	; 0xa086 <f_printf+0x15e>
    a078:	4c 01       	movw	r8, r24
    a07a:	7b 01       	movw	r14, r22
    a07c:	00 27       	eor	r16, r16
    a07e:	f7 fc       	sbrc	r15, 7
    a080:	00 95       	com	r16
    a082:	10 2f       	mov	r17, r16
    a084:	05 c0       	rjmp	.+10     	; 0xa090 <f_printf+0x168>
    a086:	4c 01       	movw	r8, r24
    a088:	7b 01       	movw	r14, r22
    a08a:	00 e0       	ldi	r16, 0x00	; 0
    a08c:	10 e0       	ldi	r17, 0x00	; 0
    a08e:	0d c0       	rjmp	.+26     	; 0xa0aa <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    a090:	17 ff       	sbrs	r17, 7
    a092:	0b c0       	rjmp	.+22     	; 0xa0aa <f_printf+0x182>
				val = 0 - val;
    a094:	10 95       	com	r17
    a096:	00 95       	com	r16
    a098:	f0 94       	com	r15
    a09a:	e0 94       	com	r14
    a09c:	e1 1c       	adc	r14, r1
    a09e:	f1 1c       	adc	r15, r1
    a0a0:	01 1d       	adc	r16, r1
    a0a2:	11 1d       	adc	r17, r1
				f |= 4;
    a0a4:	bb 89       	ldd	r27, Y+19	; 0x13
    a0a6:	b4 60       	ori	r27, 0x04	; 4
    a0a8:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    a0aa:	18 8a       	std	Y+16, r1	; 0x10
    a0ac:	ff e0       	ldi	r31, 0x0F	; 15
    a0ae:	cf 2e       	mov	r12, r31
    a0b0:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    a0b2:	22 2e       	mov	r2, r18
    a0b4:	33 24       	eor	r3, r3
    a0b6:	44 24       	eor	r4, r4
    a0b8:	55 24       	eor	r5, r5
    a0ba:	c8 01       	movw	r24, r16
    a0bc:	b7 01       	movw	r22, r14
    a0be:	a2 01       	movw	r20, r4
    a0c0:	91 01       	movw	r18, r2
    a0c2:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    a0c6:	86 2f       	mov	r24, r22
    a0c8:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    a0ca:	8a 33       	cpi	r24, 0x3A	; 58
    a0cc:	08 f0       	brcs	.+2      	; 0xa0d0 <f_printf+0x1a8>
    a0ce:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    a0d0:	08 94       	sec
    a0d2:	c1 08       	sbc	r12, r1
    a0d4:	d1 08       	sbc	r13, r1
    a0d6:	e1 e0       	ldi	r30, 0x01	; 1
    a0d8:	f0 e0       	ldi	r31, 0x00	; 0
    a0da:	ec 0f       	add	r30, r28
    a0dc:	fd 1f       	adc	r31, r29
    a0de:	ec 0d       	add	r30, r12
    a0e0:	fd 1d       	adc	r31, r13
    a0e2:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    a0e4:	c1 14       	cp	r12, r1
    a0e6:	d1 04       	cpc	r13, r1
    a0e8:	e9 f0       	breq	.+58     	; 0xa124 <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    a0ea:	c8 01       	movw	r24, r16
    a0ec:	b7 01       	movw	r22, r14
    a0ee:	a2 01       	movw	r20, r4
    a0f0:	91 01       	movw	r18, r2
    a0f2:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    a0f6:	c9 01       	movw	r24, r18
    a0f8:	da 01       	movw	r26, r20
    a0fa:	7c 01       	movw	r14, r24
    a0fc:	8d 01       	movw	r16, r26
		} while (i && val);
    a0fe:	e1 14       	cp	r14, r1
    a100:	f1 04       	cpc	r15, r1
    a102:	01 05       	cpc	r16, r1
    a104:	11 05       	cpc	r17, r1
    a106:	c9 f6       	brne	.-78     	; 0xa0ba <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    a108:	eb 89       	ldd	r30, Y+19	; 0x13
    a10a:	e2 ff       	sbrs	r30, 2
    a10c:	0b c0       	rjmp	.+22     	; 0xa124 <f_printf+0x1fc>
    a10e:	08 94       	sec
    a110:	c1 08       	sbc	r12, r1
    a112:	d1 08       	sbc	r13, r1
    a114:	e1 e0       	ldi	r30, 0x01	; 1
    a116:	f0 e0       	ldi	r31, 0x00	; 0
    a118:	ec 0f       	add	r30, r28
    a11a:	fd 1f       	adc	r31, r29
    a11c:	ec 0d       	add	r30, r12
    a11e:	fd 1d       	adc	r31, r13
    a120:	4d e2       	ldi	r20, 0x2D	; 45
    a122:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    a124:	8f e0       	ldi	r24, 0x0F	; 15
    a126:	90 e0       	ldi	r25, 0x00	; 0
    a128:	8a 19       	sub	r24, r10
    a12a:	9b 09       	sbc	r25, r11
    a12c:	08 94       	sec
    a12e:	c1 08       	sbc	r12, r1
    a130:	d1 08       	sbc	r13, r1
    a132:	e1 e0       	ldi	r30, 0x01	; 1
    a134:	f0 e0       	ldi	r31, 0x00	; 0
    a136:	ec 0f       	add	r30, r28
    a138:	fd 1f       	adc	r31, r29
    a13a:	ec 0d       	add	r30, r12
    a13c:	fd 1d       	adc	r31, r13
    a13e:	08 94       	sec
    a140:	c1 1c       	adc	r12, r1
    a142:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    a144:	ab 89       	ldd	r26, Y+19	; 0x13
    a146:	2a 2f       	mov	r18, r26
    a148:	30 e0       	ldi	r19, 0x00	; 0
    a14a:	21 70       	andi	r18, 0x01	; 1
    a14c:	30 70       	andi	r19, 0x00	; 0
    a14e:	0b c0       	rjmp	.+22     	; 0xa166 <f_printf+0x23e>
    a150:	08 94       	sec
    a152:	c1 08       	sbc	r12, r1
    a154:	d1 08       	sbc	r13, r1
    a156:	21 15       	cp	r18, r1
    a158:	31 05       	cpc	r19, r1
    a15a:	11 f4       	brne	.+4      	; 0xa160 <f_printf+0x238>
    a15c:	40 e2       	ldi	r20, 0x20	; 32
    a15e:	01 c0       	rjmp	.+2      	; 0xa162 <f_printf+0x23a>
    a160:	40 e3       	ldi	r20, 0x30	; 48
    a162:	40 83       	st	Z, r20
    a164:	31 97       	sbiw	r30, 0x01	; 1
    a166:	c1 14       	cp	r12, r1
    a168:	d1 04       	cpc	r13, r1
    a16a:	19 f0       	breq	.+6      	; 0xa172 <f_printf+0x24a>
    a16c:	8c 15       	cp	r24, r12
    a16e:	9d 05       	cpc	r25, r13
    a170:	7c f3       	brlt	.-34     	; 0xa150 <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    a172:	81 e0       	ldi	r24, 0x01	; 1
    a174:	90 e0       	ldi	r25, 0x00	; 0
    a176:	8c 0f       	add	r24, r28
    a178:	9d 1f       	adc	r25, r29
    a17a:	8c 0d       	add	r24, r12
    a17c:	9d 1d       	adc	r25, r13
    a17e:	69 a5       	ldd	r22, Y+41	; 0x29
    a180:	7a a5       	ldd	r23, Y+42	; 0x2a
    a182:	0e 94 46 2b 	call	0x568c	; 0x568c <f_puts>
    a186:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    a188:	e9 89       	ldd	r30, Y+17	; 0x11
    a18a:	fa 89       	ldd	r31, Y+18	; 0x12
    a18c:	e2 0f       	add	r30, r18
    a18e:	f3 1f       	adc	r31, r19
    a190:	e9 8b       	std	Y+17, r30	; 0x11
    a192:	fa 8b       	std	Y+18, r31	; 0x12
    a194:	ff ef       	ldi	r31, 0xFF	; 255
    a196:	2f 3f       	cpi	r18, 0xFF	; 255
    a198:	3f 07       	cpc	r19, r31
    a19a:	41 f0       	breq	.+16     	; 0xa1ac <f_printf+0x284>
    a19c:	84 01       	movw	r16, r8
    a19e:	e4 ce       	rjmp	.-568    	; 0x9f68 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    a1a0:	4f ef       	ldi	r20, 0xFF	; 255
    a1a2:	2f 3f       	cpi	r18, 0xFF	; 255
    a1a4:	34 07       	cpc	r19, r20
    a1a6:	11 f0       	breq	.+4      	; 0xa1ac <f_printf+0x284>
    a1a8:	29 89       	ldd	r18, Y+17	; 0x11
    a1aa:	3a 89       	ldd	r19, Y+18	; 0x12
}
    a1ac:	c9 01       	movw	r24, r18
    a1ae:	63 96       	adiw	r28, 0x13	; 19
    a1b0:	cd bf       	out	0x3d, r28	; 61
    a1b2:	de bf       	out	0x3e, r29	; 62
    a1b4:	cf 91       	pop	r28
    a1b6:	df 91       	pop	r29
    a1b8:	1f 91       	pop	r17
    a1ba:	0f 91       	pop	r16
    a1bc:	ff 90       	pop	r15
    a1be:	ef 90       	pop	r14
    a1c0:	df 90       	pop	r13
    a1c2:	cf 90       	pop	r12
    a1c4:	bf 90       	pop	r11
    a1c6:	af 90       	pop	r10
    a1c8:	9f 90       	pop	r9
    a1ca:	8f 90       	pop	r8
    a1cc:	7f 90       	pop	r7
    a1ce:	6f 90       	pop	r6
    a1d0:	5f 90       	pop	r5
    a1d2:	4f 90       	pop	r4
    a1d4:	3f 90       	pop	r3
    a1d6:	2f 90       	pop	r2
    a1d8:	08 95       	ret

0000a1da <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    a1da:	af 92       	push	r10
    a1dc:	bf 92       	push	r11
    a1de:	cf 92       	push	r12
    a1e0:	df 92       	push	r13
    a1e2:	ff 92       	push	r15
    a1e4:	0f 93       	push	r16
    a1e6:	1f 93       	push	r17
    a1e8:	cf 93       	push	r28
    a1ea:	df 93       	push	r29
    a1ec:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    a1ee:	88 e4       	ldi	r24, 0x48	; 72
    a1f0:	96 e2       	ldi	r25, 0x26	; 38
    a1f2:	62 e5       	ldi	r22, 0x52	; 82
    a1f4:	76 e2       	ldi	r23, 0x26	; 38
    a1f6:	ab 01       	movw	r20, r22
    a1f8:	96 01       	movw	r18, r12
    a1fa:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a1fe:	ff 24       	eor	r15, r15
    a200:	c0 e0       	ldi	r28, 0x00	; 0
    a202:	d0 e0       	ldi	r29, 0x00	; 0
    a204:	66 e6       	ldi	r22, 0x66	; 102
    a206:	a6 2e       	mov	r10, r22
    a208:	6e e0       	ldi	r22, 0x0E	; 14
    a20a:	b6 2e       	mov	r11, r22
    a20c:	39 c0       	rjmp	.+114    	; 0xa280 <Wifi_GetSignalStrength+0xa6>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    a20e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    a212:	88 23       	and	r24, r24
    a214:	89 f1       	breq	.+98     	; 0xa278 <Wifi_GetSignalStrength+0x9e>
			rssi[tmp] = Wifi_GetByte(false);
    a216:	0f 2d       	mov	r16, r15
    a218:	10 e0       	ldi	r17, 0x00	; 0
    a21a:	80 e0       	ldi	r24, 0x00	; 0
    a21c:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    a220:	f8 01       	movw	r30, r16
    a222:	e0 54       	subi	r30, 0x40	; 64
    a224:	fc 4a       	sbci	r31, 0xAC	; 172
    a226:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    a228:	89 32       	cpi	r24, 0x29	; 41
    a22a:	29 f5       	brne	.+74     	; 0xa276 <Wifi_GetSignalStrength+0x9c>
				rssi[tmp] = 0;
    a22c:	10 82       	st	Z, r1
				//Debug_SendString("rssi: ", false);
				//Debug_SendString(rssi, true);
				worker = atoi(rssi);
    a22e:	80 ec       	ldi	r24, 0xC0	; 192
    a230:	93 e5       	ldi	r25, 0x53	; 83
    a232:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <atoi>
    a236:	aa 27       	eor	r26, r26
    a238:	97 fd       	sbrc	r25, 7
    a23a:	a0 95       	com	r26
    a23c:	ba 2f       	mov	r27, r26
				worker*=9208;
    a23e:	bc 01       	movw	r22, r24
    a240:	cd 01       	movw	r24, r26
    a242:	28 ef       	ldi	r18, 0xF8	; 248
    a244:	33 e2       	ldi	r19, 0x23	; 35
    a246:	40 e0       	ldi	r20, 0x00	; 0
    a248:	50 e0       	ldi	r21, 0x00	; 0
    a24a:	0e 94 e4 5b 	call	0xb7c8	; 0xb7c8 <__mulsi3>
    a24e:	9b 01       	movw	r18, r22
    a250:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    a252:	6c e6       	ldi	r22, 0x6C	; 108
    a254:	72 ef       	ldi	r23, 0xF2	; 242
    a256:	8f e0       	ldi	r24, 0x0F	; 15
    a258:	90 e0       	ldi	r25, 0x00	; 0
    a25a:	62 1b       	sub	r22, r18
    a25c:	73 0b       	sbc	r23, r19
    a25e:	84 0b       	sbc	r24, r20
    a260:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    a262:	20 e1       	ldi	r18, 0x10	; 16
    a264:	37 e2       	ldi	r19, 0x27	; 39
    a266:	40 e0       	ldi	r20, 0x00	; 0
    a268:	50 e0       	ldi	r21, 0x00	; 0
    a26a:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    a26e:	25 36       	cpi	r18, 0x65	; 101
    a270:	58 f0       	brcs	.+22     	; 0xa288 <Wifi_GetSignalStrength+0xae>
    a272:	24 e6       	ldi	r18, 0x64	; 100
    a274:	09 c0       	rjmp	.+18     	; 0xa288 <Wifi_GetSignalStrength+0xae>
				//sprintf(string, "strength: %u %",ss);
				//Debug_SendString(string,true);

				return ss;
			}
			tmp++;
    a276:	f3 94       	inc	r15
    a278:	c5 01       	movw	r24, r10
    a27a:	01 97       	sbiw	r24, 0x01	; 1
    a27c:	f1 f7       	brne	.-4      	; 0xa27a <Wifi_GetSignalStrength+0xa0>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    a27e:	21 96       	adiw	r28, 0x01	; 1
    a280:	cc 15       	cp	r28, r12
    a282:	dd 05       	cpc	r29, r13
    a284:	20 f2       	brcs	.-120    	; 0xa20e <Wifi_GetSignalStrength+0x34>
    a286:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    a288:	82 2f       	mov	r24, r18
    a28a:	df 91       	pop	r29
    a28c:	cf 91       	pop	r28
    a28e:	1f 91       	pop	r17
    a290:	0f 91       	pop	r16
    a292:	ff 90       	pop	r15
    a294:	df 90       	pop	r13
    a296:	cf 90       	pop	r12
    a298:	bf 90       	pop	r11
    a29a:	af 90       	pop	r10
    a29c:	08 95       	ret

0000a29e <Config_Wifi>:
    if((strstr(demoModeString,"true") != 0)){
       demoMode = true;
    }
}

void Config_Wifi(void){
    a29e:	0f 93       	push	r16
    a2a0:	1f 93       	push	r17
    a2a2:	80 e2       	ldi	r24, 0x20	; 32
    a2a4:	9e e4       	ldi	r25, 0x4E	; 78
    a2a6:	20 e7       	ldi	r18, 0x70	; 112
    a2a8:	31 e0       	ldi	r19, 0x01	; 1
    a2aa:	f9 01       	movw	r30, r18
    a2ac:	31 97       	sbiw	r30, 0x01	; 1
    a2ae:	f1 f7       	brne	.-4      	; 0xa2ac <Config_Wifi+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a2b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a2b2:	d9 f7       	brne	.-10     	; 0xa2aa <Config_Wifi+0xc>



    _delay_ms(2000);

    Wifi_EnterCMDMode(1000);
    a2b4:	88 ee       	ldi	r24, 0xE8	; 232
    a2b6:	93 e0       	ldi	r25, 0x03	; 3
    a2b8:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <Wifi_EnterCMDMode>
    a2bc:	80 e1       	ldi	r24, 0x10	; 16
    a2be:	97 e2       	ldi	r25, 0x27	; 39
    a2c0:	20 e7       	ldi	r18, 0x70	; 112
    a2c2:	31 e0       	ldi	r19, 0x01	; 1
    a2c4:	f9 01       	movw	r30, r18
    a2c6:	31 97       	sbiw	r30, 0x01	; 1
    a2c8:	f1 f7       	brne	.-4      	; 0xa2c6 <Config_Wifi+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a2ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a2cc:	d9 f7       	brne	.-10     	; 0xa2c4 <Config_Wifi+0x26>

	_delay_ms(1000);
	display_clearBuffer();
    a2ce:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <display_clearBuffer>
	display_writeBufferToScreen();
    a2d2:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    a2d6:	8a e5       	ldi	r24, 0x5A	; 90
    a2d8:	96 e2       	ldi	r25, 0x26	; 38
    a2da:	68 e6       	ldi	r22, 0x68	; 104
    a2dc:	76 e2       	ldi	r23, 0x26	; 38
    a2de:	ab 01       	movw	r20, r22
    a2e0:	24 ef       	ldi	r18, 0xF4	; 244
    a2e2:	31 e0       	ldi	r19, 0x01	; 1
    a2e4:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a2e8:	88 23       	and	r24, r24
    a2ea:	19 f0       	breq	.+6      	; 0xa2f2 <Config_Wifi+0x54>
		display_putString("reset..........OK",col,0,System5x7);
    a2ec:	8d e7       	ldi	r24, 0x7D	; 125
    a2ee:	96 e2       	ldi	r25, 0x26	; 38
    a2f0:	02 c0       	rjmp	.+4      	; 0xa2f6 <Config_Wifi+0x58>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    a2f2:	8f e8       	ldi	r24, 0x8F	; 143
    a2f4:	96 e2       	ldi	r25, 0x26	; 38
    a2f6:	60 e0       	ldi	r22, 0x00	; 0
    a2f8:	40 e0       	ldi	r20, 0x00	; 0
    a2fa:	27 e0       	ldi	r18, 0x07	; 7
    a2fc:	31 e3       	ldi	r19, 0x31	; 49
    a2fe:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
	}
	display_writeBufferToScreen();
    a302:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a306:	80 e1       	ldi	r24, 0x10	; 16
    a308:	97 e2       	ldi	r25, 0x27	; 39
    a30a:	20 e7       	ldi	r18, 0x70	; 112
    a30c:	31 e0       	ldi	r19, 0x01	; 1
    a30e:	f9 01       	movw	r30, r18
    a310:	31 97       	sbiw	r30, 0x01	; 1
    a312:	f1 f7       	brne	.-4      	; 0xa310 <Config_Wifi+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a314:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a316:	d9 f7       	brne	.-10     	; 0xa30e <Config_Wifi+0x70>

	_delay_ms(1000);



    Wifi_SendCommand("set sys iofunc 0x10","AOK","AOK",500);
    a318:	81 ea       	ldi	r24, 0xA1	; 161
    a31a:	96 e2       	ldi	r25, 0x26	; 38
    a31c:	65 eb       	ldi	r22, 0xB5	; 181
    a31e:	76 e2       	ldi	r23, 0x26	; 38
    a320:	ab 01       	movw	r20, r22
    a322:	24 ef       	ldi	r18, 0xF4	; 244
    a324:	31 e0       	ldi	r19, 0x01	; 1
    a326:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a32a:	80 e1       	ldi	r24, 0x10	; 16
    a32c:	97 e2       	ldi	r25, 0x27	; 39
    a32e:	20 e7       	ldi	r18, 0x70	; 112
    a330:	31 e0       	ldi	r19, 0x01	; 1
    a332:	f9 01       	movw	r30, r18
    a334:	31 97       	sbiw	r30, 0x01	; 1
    a336:	f1 f7       	brne	.-4      	; 0xa334 <Config_Wifi+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a338:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a33a:	d9 f7       	brne	.-10     	; 0xa332 <Config_Wifi+0x94>
    _delay_ms(1000);


    Wifi_SendCommand("set wlan join 0","AOK","AOK",500);
    a33c:	89 eb       	ldi	r24, 0xB9	; 185
    a33e:	96 e2       	ldi	r25, 0x26	; 38
    a340:	65 eb       	ldi	r22, 0xB5	; 181
    a342:	76 e2       	ldi	r23, 0x26	; 38
    a344:	ab 01       	movw	r20, r22
    a346:	24 ef       	ldi	r18, 0xF4	; 244
    a348:	31 e0       	ldi	r19, 0x01	; 1
    a34a:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a34e:	80 e1       	ldi	r24, 0x10	; 16
    a350:	97 e2       	ldi	r25, 0x27	; 39
    a352:	20 e7       	ldi	r18, 0x70	; 112
    a354:	31 e0       	ldi	r19, 0x01	; 1
    a356:	f9 01       	movw	r30, r18
    a358:	31 97       	sbiw	r30, 0x01	; 1
    a35a:	f1 f7       	brne	.-4      	; 0xa358 <Config_Wifi+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a35c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a35e:	d9 f7       	brne	.-10     	; 0xa356 <Config_Wifi+0xb8>
    _delay_ms(1000);

    Wifi_SendCommand("set uart flow 1","AOK","AOK",500);
    a360:	89 ec       	ldi	r24, 0xC9	; 201
    a362:	96 e2       	ldi	r25, 0x26	; 38
    a364:	65 eb       	ldi	r22, 0xB5	; 181
    a366:	76 e2       	ldi	r23, 0x26	; 38
    a368:	ab 01       	movw	r20, r22
    a36a:	24 ef       	ldi	r18, 0xF4	; 244
    a36c:	31 e0       	ldi	r19, 0x01	; 1
    a36e:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a372:	88 e8       	ldi	r24, 0x88	; 136
    a374:	93 e1       	ldi	r25, 0x13	; 19
    a376:	20 e7       	ldi	r18, 0x70	; 112
    a378:	31 e0       	ldi	r19, 0x01	; 1
    a37a:	f9 01       	movw	r30, r18
    a37c:	31 97       	sbiw	r30, 0x01	; 1
    a37e:	f1 f7       	brne	.-4      	; 0xa37c <Config_Wifi+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a380:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a382:	d9 f7       	brne	.-10     	; 0xa37a <Config_Wifi+0xdc>
    _delay_ms(500);

    Wifi_SendCommand("set comm size 1420","AOK","AOK",500);
    a384:	89 ed       	ldi	r24, 0xD9	; 217
    a386:	96 e2       	ldi	r25, 0x26	; 38
    a388:	65 eb       	ldi	r22, 0xB5	; 181
    a38a:	76 e2       	ldi	r23, 0x26	; 38
    a38c:	ab 01       	movw	r20, r22
    a38e:	24 ef       	ldi	r18, 0xF4	; 244
    a390:	31 e0       	ldi	r19, 0x01	; 1
    a392:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a396:	88 e8       	ldi	r24, 0x88	; 136
    a398:	93 e1       	ldi	r25, 0x13	; 19
    a39a:	20 e7       	ldi	r18, 0x70	; 112
    a39c:	31 e0       	ldi	r19, 0x01	; 1
    a39e:	f9 01       	movw	r30, r18
    a3a0:	31 97       	sbiw	r30, 0x01	; 1
    a3a2:	f1 f7       	brne	.-4      	; 0xa3a0 <Config_Wifi+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3a6:	d9 f7       	brne	.-10     	; 0xa39e <Config_Wifi+0x100>
	_delay_ms(500);

	Wifi_SendCommand("set comm time 10","AOK","AOK",500);
    a3a8:	8c ee       	ldi	r24, 0xEC	; 236
    a3aa:	96 e2       	ldi	r25, 0x26	; 38
    a3ac:	65 eb       	ldi	r22, 0xB5	; 181
    a3ae:	76 e2       	ldi	r23, 0x26	; 38
    a3b0:	ab 01       	movw	r20, r22
    a3b2:	24 ef       	ldi	r18, 0xF4	; 244
    a3b4:	31 e0       	ldi	r19, 0x01	; 1
    a3b6:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a3ba:	88 e8       	ldi	r24, 0x88	; 136
    a3bc:	93 e1       	ldi	r25, 0x13	; 19
    a3be:	20 e7       	ldi	r18, 0x70	; 112
    a3c0:	31 e0       	ldi	r19, 0x01	; 1
    a3c2:	f9 01       	movw	r30, r18
    a3c4:	31 97       	sbiw	r30, 0x01	; 1
    a3c6:	f1 f7       	brne	.-4      	; 0xa3c4 <Config_Wifi+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3ca:	d9 f7       	brne	.-10     	; 0xa3c2 <Config_Wifi+0x124>
	_delay_ms(500);

    if(timeServerAttempts > 5){
    a3cc:	80 91 0a 34 	lds	r24, 0x340A
    a3d0:	86 30       	cpi	r24, 0x06	; 6
    a3d2:	90 f0       	brcs	.+36     	; 0xa3f8 <Config_Wifi+0x15a>
        Wifi_SendCommand("set time address 195.43.74.3","AOK","AOK",500);
    a3d4:	8d ef       	ldi	r24, 0xFD	; 253
    a3d6:	96 e2       	ldi	r25, 0x26	; 38
    a3d8:	65 eb       	ldi	r22, 0xB5	; 181
    a3da:	76 e2       	ldi	r23, 0x26	; 38
    a3dc:	ab 01       	movw	r20, r22
    a3de:	24 ef       	ldi	r18, 0xF4	; 244
    a3e0:	31 e0       	ldi	r19, 0x01	; 1
    a3e2:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a3e6:	88 e8       	ldi	r24, 0x88	; 136
    a3e8:	93 e1       	ldi	r25, 0x13	; 19
    a3ea:	20 e7       	ldi	r18, 0x70	; 112
    a3ec:	31 e0       	ldi	r19, 0x01	; 1
    a3ee:	f9 01       	movw	r30, r18
    a3f0:	31 97       	sbiw	r30, 0x01	; 1
    a3f2:	f1 f7       	brne	.-4      	; 0xa3f0 <Config_Wifi+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3f6:	d9 f7       	brne	.-10     	; 0xa3ee <Config_Wifi+0x150>
	    _delay_ms(500);
    } else if(timeServerAttempts > 25){
        Wifi_SendCommand("set time address 131.130.251.107","AOK","AOK",500);
	    _delay_ms(500);
	}
    timeServerAttempts++;
    a3f8:	80 91 0a 34 	lds	r24, 0x340A
    a3fc:	8f 5f       	subi	r24, 0xFF	; 255
    a3fe:	80 93 0a 34 	sts	0x340A, r24

    Wifi_SendCommand("save","Storing in config","Storing in config",500);
    a402:	8a e1       	ldi	r24, 0x1A	; 26
    a404:	97 e2       	ldi	r25, 0x27	; 39
    a406:	6f e1       	ldi	r22, 0x1F	; 31
    a408:	77 e2       	ldi	r23, 0x27	; 39
    a40a:	ab 01       	movw	r20, r22
    a40c:	24 ef       	ldi	r18, 0xF4	; 244
    a40e:	31 e0       	ldi	r19, 0x01	; 1
    a410:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a414:	80 e1       	ldi	r24, 0x10	; 16
    a416:	97 e2       	ldi	r25, 0x27	; 39
    a418:	20 e7       	ldi	r18, 0x70	; 112
    a41a:	31 e0       	ldi	r19, 0x01	; 1
    a41c:	f9 01       	movw	r30, r18
    a41e:	31 97       	sbiw	r30, 0x01	; 1
    a420:	f1 f7       	brne	.-4      	; 0xa41e <Config_Wifi+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a422:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a424:	d9 f7       	brne	.-10     	; 0xa41c <Config_Wifi+0x17e>
	_delay_ms(1000);

	Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    a426:	81 e3       	ldi	r24, 0x31	; 49
    a428:	97 e2       	ldi	r25, 0x27	; 39
    a42a:	68 e3       	ldi	r22, 0x38	; 56
    a42c:	77 e2       	ldi	r23, 0x27	; 39
    a42e:	ab 01       	movw	r20, r22
    a430:	24 ef       	ldi	r18, 0xF4	; 244
    a432:	31 e0       	ldi	r19, 0x01	; 1
    a434:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a438:	80 e4       	ldi	r24, 0x40	; 64
    a43a:	9c e9       	ldi	r25, 0x9C	; 156
    a43c:	20 e7       	ldi	r18, 0x70	; 112
    a43e:	31 e0       	ldi	r19, 0x01	; 1
    a440:	f9 01       	movw	r30, r18
    a442:	31 97       	sbiw	r30, 0x01	; 1
    a444:	f1 f7       	brne	.-4      	; 0xa442 <Config_Wifi+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a446:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a448:	d9 f7       	brne	.-10     	; 0xa440 <Config_Wifi+0x1a2>
	_delay_ms(4000);


    Wifi_EnterCMDMode(1000);
    a44a:	88 ee       	ldi	r24, 0xE8	; 232
    a44c:	93 e0       	ldi	r25, 0x03	; 3
    a44e:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <Wifi_EnterCMDMode>
    a452:	80 e1       	ldi	r24, 0x10	; 16
    a454:	97 e2       	ldi	r25, 0x27	; 39
    a456:	20 e7       	ldi	r18, 0x70	; 112
    a458:	31 e0       	ldi	r19, 0x01	; 1
    a45a:	f9 01       	movw	r30, r18
    a45c:	31 97       	sbiw	r30, 0x01	; 1
    a45e:	f1 f7       	brne	.-4      	; 0xa45c <Config_Wifi+0x1be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a462:	d9 f7       	brne	.-10     	; 0xa45a <Config_Wifi+0x1bc>
    _delay_ms(1000);

	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    a464:	81 e4       	ldi	r24, 0x41	; 65
    a466:	97 e2       	ldi	r25, 0x27	; 39
    a468:	65 eb       	ldi	r22, 0xB5	; 181
    a46a:	76 e2       	ldi	r23, 0x26	; 38
    a46c:	ab 01       	movw	r20, r22
    a46e:	24 ef       	ldi	r18, 0xF4	; 244
    a470:	31 e0       	ldi	r19, 0x01	; 1
    a472:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a476:	88 e8       	ldi	r24, 0x88	; 136
    a478:	93 e1       	ldi	r25, 0x13	; 19
    a47a:	20 e7       	ldi	r18, 0x70	; 112
    a47c:	31 e0       	ldi	r19, 0x01	; 1
    a47e:	f9 01       	movw	r30, r18
    a480:	31 97       	sbiw	r30, 0x01	; 1
    a482:	f1 f7       	brne	.-4      	; 0xa480 <Config_Wifi+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a484:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a486:	d9 f7       	brne	.-10     	; 0xa47e <Config_Wifi+0x1e0>
	_delay_ms(500);



	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    a488:	83 e5       	ldi	r24, 0x53	; 83
    a48a:	97 e2       	ldi	r25, 0x27	; 39
    a48c:	65 eb       	ldi	r22, 0xB5	; 181
    a48e:	76 e2       	ldi	r23, 0x26	; 38
    a490:	ab 01       	movw	r20, r22
    a492:	24 ef       	ldi	r18, 0xF4	; 244
    a494:	31 e0       	ldi	r19, 0x01	; 1
    a496:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a49a:	88 23       	and	r24, r24
    a49c:	19 f0       	breq	.+6      	; 0xa4a4 <Config_Wifi+0x206>
		display_putString("enable time....OK",col,0,System5x7);
    a49e:	85 e6       	ldi	r24, 0x65	; 101
    a4a0:	97 e2       	ldi	r25, 0x27	; 39
    a4a2:	02 c0       	rjmp	.+4      	; 0xa4a8 <Config_Wifi+0x20a>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    a4a4:	87 e7       	ldi	r24, 0x77	; 119
    a4a6:	97 e2       	ldi	r25, 0x27	; 39
    a4a8:	61 e0       	ldi	r22, 0x01	; 1
    a4aa:	40 e0       	ldi	r20, 0x00	; 0
    a4ac:	27 e0       	ldi	r18, 0x07	; 7
    a4ae:	31 e3       	ldi	r19, 0x31	; 49
    a4b0:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
	}
	display_writeBufferToScreen();
    a4b4:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a4b8:	88 e8       	ldi	r24, 0x88	; 136
    a4ba:	93 e1       	ldi	r25, 0x13	; 19
    a4bc:	20 e7       	ldi	r18, 0x70	; 112
    a4be:	31 e0       	ldi	r19, 0x01	; 1
    a4c0:	f9 01       	movw	r30, r18
    a4c2:	31 97       	sbiw	r30, 0x01	; 1
    a4c4:	f1 f7       	brne	.-4      	; 0xa4c2 <Config_Wifi+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a4c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a4c8:	d9 f7       	brne	.-10     	; 0xa4c0 <Config_Wifi+0x222>
	_delay_ms(500);
	col++;
	
	if(authRead){
    a4ca:	80 91 bd 33 	lds	r24, 0x33BD
    a4ce:	88 23       	and	r24, r24
    a4d0:	11 f4       	brne	.+4      	; 0xa4d6 <Config_Wifi+0x238>
    a4d2:	12 e0       	ldi	r17, 0x02	; 2
    a4d4:	22 c0       	rjmp	.+68     	; 0xa51a <Config_Wifi+0x27c>
		if(Wifi_SendCommand(auth,"AOK","AOK",500)){
    a4d6:	87 ef       	ldi	r24, 0xF7	; 247
    a4d8:	9f e2       	ldi	r25, 0x2F	; 47
    a4da:	65 eb       	ldi	r22, 0xB5	; 181
    a4dc:	76 e2       	ldi	r23, 0x26	; 38
    a4de:	ab 01       	movw	r20, r22
    a4e0:	24 ef       	ldi	r18, 0xF4	; 244
    a4e2:	31 e0       	ldi	r19, 0x01	; 1
    a4e4:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a4e8:	88 23       	and	r24, r24
    a4ea:	19 f0       	breq	.+6      	; 0xa4f2 <Config_Wifi+0x254>
			display_putString("encryption.....OK",col,0,System5x7);
    a4ec:	89 e8       	ldi	r24, 0x89	; 137
    a4ee:	97 e2       	ldi	r25, 0x27	; 39
    a4f0:	02 c0       	rjmp	.+4      	; 0xa4f6 <Config_Wifi+0x258>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    a4f2:	8b e9       	ldi	r24, 0x9B	; 155
    a4f4:	97 e2       	ldi	r25, 0x27	; 39
    a4f6:	62 e0       	ldi	r22, 0x02	; 2
    a4f8:	40 e0       	ldi	r20, 0x00	; 0
    a4fa:	27 e0       	ldi	r18, 0x07	; 7
    a4fc:	31 e3       	ldi	r19, 0x31	; 49
    a4fe:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		}
		display_writeBufferToScreen();
    a502:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a506:	88 e8       	ldi	r24, 0x88	; 136
    a508:	93 e1       	ldi	r25, 0x13	; 19
    a50a:	20 e7       	ldi	r18, 0x70	; 112
    a50c:	31 e0       	ldi	r19, 0x01	; 1
    a50e:	f9 01       	movw	r30, r18
    a510:	31 97       	sbiw	r30, 0x01	; 1
    a512:	f1 f7       	brne	.-4      	; 0xa510 <Config_Wifi+0x272>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a514:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a516:	d9 f7       	brne	.-10     	; 0xa50e <Config_Wifi+0x270>
    a518:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(500);
		col++;
	}
	
	if(phraseRead){
    a51a:	80 91 be 33 	lds	r24, 0x33BE
    a51e:	88 23       	and	r24, r24
    a520:	11 f1       	breq	.+68     	; 0xa566 <Config_Wifi+0x2c8>
		if(Wifi_SendCommand(phrase,"AOK","AOK",500)){
    a522:	89 e2       	ldi	r24, 0x29	; 41
    a524:	90 e3       	ldi	r25, 0x30	; 48
    a526:	65 eb       	ldi	r22, 0xB5	; 181
    a528:	76 e2       	ldi	r23, 0x26	; 38
    a52a:	ab 01       	movw	r20, r22
    a52c:	24 ef       	ldi	r18, 0xF4	; 244
    a52e:	31 e0       	ldi	r19, 0x01	; 1
    a530:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a534:	88 23       	and	r24, r24
    a536:	19 f0       	breq	.+6      	; 0xa53e <Config_Wifi+0x2a0>
			display_putString("phrase.........OK",col,0,System5x7);
    a538:	8d ea       	ldi	r24, 0xAD	; 173
    a53a:	97 e2       	ldi	r25, 0x27	; 39
    a53c:	02 c0       	rjmp	.+4      	; 0xa542 <Config_Wifi+0x2a4>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    a53e:	8f eb       	ldi	r24, 0xBF	; 191
    a540:	97 e2       	ldi	r25, 0x27	; 39
    a542:	61 2f       	mov	r22, r17
    a544:	40 e0       	ldi	r20, 0x00	; 0
    a546:	27 e0       	ldi	r18, 0x07	; 7
    a548:	31 e3       	ldi	r19, 0x31	; 49
    a54a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		}
		display_writeBufferToScreen();
    a54e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a552:	88 e8       	ldi	r24, 0x88	; 136
    a554:	93 e1       	ldi	r25, 0x13	; 19
    a556:	20 e7       	ldi	r18, 0x70	; 112
    a558:	31 e0       	ldi	r19, 0x01	; 1
    a55a:	f9 01       	movw	r30, r18
    a55c:	31 97       	sbiw	r30, 0x01	; 1
    a55e:	f1 f7       	brne	.-4      	; 0xa55c <Config_Wifi+0x2be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a560:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a562:	d9 f7       	brne	.-10     	; 0xa55a <Config_Wifi+0x2bc>
    a564:	25 c0       	rjmp	.+74     	; 0xa5b0 <Config_Wifi+0x312>
		_delay_ms(500);
		col++;
	} else if(keyRead){
    a566:	80 91 bf 33 	lds	r24, 0x33BF
    a56a:	88 23       	and	r24, r24
    a56c:	11 f1       	breq	.+68     	; 0xa5b2 <Config_Wifi+0x314>
		if(Wifi_SendCommand(key,"AOK","AOK",500)){
    a56e:	8b e5       	ldi	r24, 0x5B	; 91
    a570:	90 e3       	ldi	r25, 0x30	; 48
    a572:	65 eb       	ldi	r22, 0xB5	; 181
    a574:	76 e2       	ldi	r23, 0x26	; 38
    a576:	ab 01       	movw	r20, r22
    a578:	24 ef       	ldi	r18, 0xF4	; 244
    a57a:	31 e0       	ldi	r19, 0x01	; 1
    a57c:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a580:	88 23       	and	r24, r24
    a582:	19 f0       	breq	.+6      	; 0xa58a <Config_Wifi+0x2ec>
			display_putString("key............OK",col,0,System5x7);
    a584:	81 ed       	ldi	r24, 0xD1	; 209
    a586:	97 e2       	ldi	r25, 0x27	; 39
    a588:	02 c0       	rjmp	.+4      	; 0xa58e <Config_Wifi+0x2f0>
		} else {
			display_putString("key..........FAIL",col,0,System5x7);
    a58a:	83 ee       	ldi	r24, 0xE3	; 227
    a58c:	97 e2       	ldi	r25, 0x27	; 39
    a58e:	61 2f       	mov	r22, r17
    a590:	40 e0       	ldi	r20, 0x00	; 0
    a592:	27 e0       	ldi	r18, 0x07	; 7
    a594:	31 e3       	ldi	r19, 0x31	; 49
    a596:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		}
		display_writeBufferToScreen();
    a59a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a59e:	88 e8       	ldi	r24, 0x88	; 136
    a5a0:	93 e1       	ldi	r25, 0x13	; 19
    a5a2:	20 e7       	ldi	r18, 0x70	; 112
    a5a4:	31 e0       	ldi	r19, 0x01	; 1
    a5a6:	f9 01       	movw	r30, r18
    a5a8:	31 97       	sbiw	r30, 0x01	; 1
    a5aa:	f1 f7       	brne	.-4      	; 0xa5a8 <Config_Wifi+0x30a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5ae:	d9 f7       	brne	.-10     	; 0xa5a6 <Config_Wifi+0x308>
		_delay_ms(500);
		col++;
    a5b0:	1f 5f       	subi	r17, 0xFF	; 255
	}

	if(ssidRead){
    a5b2:	80 91 c1 33 	lds	r24, 0x33C1
    a5b6:	88 23       	and	r24, r24
    a5b8:	19 f1       	breq	.+70     	; 0xa600 <Config_Wifi+0x362>
		if(Wifi_SendCommand(ssid,"DeAut","Auto-",2000)){
    a5ba:	8d e8       	ldi	r24, 0x8D	; 141
    a5bc:	90 e3       	ldi	r25, 0x30	; 48
    a5be:	65 ef       	ldi	r22, 0xF5	; 245
    a5c0:	77 e2       	ldi	r23, 0x27	; 39
    a5c2:	4b ef       	ldi	r20, 0xFB	; 251
    a5c4:	57 e2       	ldi	r21, 0x27	; 39
    a5c6:	20 ed       	ldi	r18, 0xD0	; 208
    a5c8:	37 e0       	ldi	r19, 0x07	; 7
    a5ca:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a5ce:	88 23       	and	r24, r24
    a5d0:	19 f0       	breq	.+6      	; 0xa5d8 <Config_Wifi+0x33a>
			display_putString("ssid...........OK",col,0,System5x7);
    a5d2:	81 e0       	ldi	r24, 0x01	; 1
    a5d4:	98 e2       	ldi	r25, 0x28	; 40
    a5d6:	02 c0       	rjmp	.+4      	; 0xa5dc <Config_Wifi+0x33e>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    a5d8:	83 e1       	ldi	r24, 0x13	; 19
    a5da:	98 e2       	ldi	r25, 0x28	; 40
    a5dc:	61 2f       	mov	r22, r17
    a5de:	40 e0       	ldi	r20, 0x00	; 0
    a5e0:	27 e0       	ldi	r18, 0x07	; 7
    a5e2:	31 e3       	ldi	r19, 0x31	; 49
    a5e4:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		}
		display_writeBufferToScreen();
    a5e8:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a5ec:	88 e9       	ldi	r24, 0x98	; 152
    a5ee:	9a e3       	ldi	r25, 0x3A	; 58
    a5f0:	20 e7       	ldi	r18, 0x70	; 112
    a5f2:	31 e0       	ldi	r19, 0x01	; 1
    a5f4:	f9 01       	movw	r30, r18
    a5f6:	31 97       	sbiw	r30, 0x01	; 1
    a5f8:	f1 f7       	brne	.-4      	; 0xa5f6 <Config_Wifi+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5fc:	d9 f7       	brne	.-10     	; 0xa5f4 <Config_Wifi+0x356>
		_delay_ms(1500);
		col++;
    a5fe:	1f 5f       	subi	r17, 0xFF	; 255
	}

	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    a600:	85 e2       	ldi	r24, 0x25	; 37
    a602:	98 e2       	ldi	r25, 0x28	; 40
    a604:	6e e2       	ldi	r22, 0x2E	; 46
    a606:	78 e2       	ldi	r23, 0x28	; 40
    a608:	ab 01       	movw	r20, r22
    a60a:	24 ef       	ldi	r18, 0xF4	; 244
    a60c:	31 e0       	ldi	r19, 0x01	; 1
    a60e:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    a612:	88 e8       	ldi	r24, 0x88	; 136
    a614:	93 e1       	ldi	r25, 0x13	; 19
    a616:	20 e7       	ldi	r18, 0x70	; 112
    a618:	31 e0       	ldi	r19, 0x01	; 1
    a61a:	f9 01       	movw	r30, r18
    a61c:	31 97       	sbiw	r30, 0x01	; 1
    a61e:	f1 f7       	brne	.-4      	; 0xa61c <Config_Wifi+0x37e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a620:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a622:	d9 f7       	brne	.-10     	; 0xa61a <Config_Wifi+0x37c>
	_delay_ms(500);

	Wifi_GetMac(1000);
    a624:	88 ee       	ldi	r24, 0xE8	; 232
    a626:	93 e0       	ldi	r25, 0x03	; 3
    a628:	0e 94 3d 41 	call	0x827a	; 0x827a <Wifi_GetMac>
    a62c:	88 e8       	ldi	r24, 0x88	; 136
    a62e:	93 e1       	ldi	r25, 0x13	; 19
    a630:	20 e7       	ldi	r18, 0x70	; 112
    a632:	31 e0       	ldi	r19, 0x01	; 1
    a634:	f9 01       	movw	r30, r18
    a636:	31 97       	sbiw	r30, 0x01	; 1
    a638:	f1 f7       	brne	.-4      	; 0xa636 <Config_Wifi+0x398>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a63a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a63c:	d9 f7       	brne	.-10     	; 0xa634 <Config_Wifi+0x396>
	_delay_ms(500);
	Wifi_ExitCMDMode(500);
    a63e:	84 ef       	ldi	r24, 0xF4	; 244
    a640:	91 e0       	ldi	r25, 0x01	; 1
    a642:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    a646:	80 e1       	ldi	r24, 0x10	; 16
    a648:	97 e2       	ldi	r25, 0x27	; 39
    a64a:	20 e7       	ldi	r18, 0x70	; 112
    a64c:	31 e0       	ldi	r19, 0x01	; 1
    a64e:	f9 01       	movw	r30, r18
    a650:	31 97       	sbiw	r30, 0x01	; 1
    a652:	f1 f7       	brne	.-4      	; 0xa650 <Config_Wifi+0x3b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a654:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a656:	d9 f7       	brne	.-10     	; 0xa64e <Config_Wifi+0x3b0>

	_delay_ms(1000);
	
	if(Wifi_Connected(1000)){
    a658:	88 ee       	ldi	r24, 0xE8	; 232
    a65a:	93 e0       	ldi	r25, 0x03	; 3
    a65c:	0e 94 41 03 	call	0x682	; 0x682 <Wifi_Connected>
    a660:	88 23       	and	r24, r24
    a662:	61 f0       	breq	.+24     	; 0xa67c <Config_Wifi+0x3de>
		display_putString("network........OK",col,0,System5x7);
    a664:	88 e3       	ldi	r24, 0x38	; 56
    a666:	98 e2       	ldi	r25, 0x28	; 40
    a668:	61 2f       	mov	r22, r17
    a66a:	40 e0       	ldi	r20, 0x00	; 0
    a66c:	27 e0       	ldi	r18, 0x07	; 7
    a66e:	31 e3       	ldi	r19, 0x31	; 49
    a670:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		connected = true;
    a674:	81 e0       	ldi	r24, 0x01	; 1
    a676:	80 93 82 33 	sts	0x3382, r24
    a67a:	0a c0       	rjmp	.+20     	; 0xa690 <Config_Wifi+0x3f2>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    a67c:	8a e4       	ldi	r24, 0x4A	; 74
    a67e:	98 e2       	ldi	r25, 0x28	; 40
    a680:	61 2f       	mov	r22, r17
    a682:	40 e0       	ldi	r20, 0x00	; 0
    a684:	27 e0       	ldi	r18, 0x07	; 7
    a686:	31 e3       	ldi	r19, 0x31	; 49
    a688:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		connected = false;
    a68c:	10 92 82 33 	sts	0x3382, r1
	}
	display_writeBufferToScreen();
    a690:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
	col++;
    a694:	01 2f       	mov	r16, r17
    a696:	0f 5f       	subi	r16, 0xFF	; 255


	
	if(connected){
    a698:	80 91 82 33 	lds	r24, 0x3382
    a69c:	88 23       	and	r24, r24
    a69e:	09 f4       	brne	.+2      	; 0xa6a2 <Config_Wifi+0x404>
    a6a0:	ad c0       	rjmp	.+346    	; 0xa7fc <Config_Wifi+0x55e>
    a6a2:	80 e1       	ldi	r24, 0x10	; 16
    a6a4:	97 e2       	ldi	r25, 0x27	; 39
    a6a6:	20 e7       	ldi	r18, 0x70	; 112
    a6a8:	31 e0       	ldi	r19, 0x01	; 1
    a6aa:	f9 01       	movw	r30, r18
    a6ac:	31 97       	sbiw	r30, 0x01	; 1
    a6ae:	f1 f7       	brne	.-4      	; 0xa6ac <Config_Wifi+0x40e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a6b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a6b2:	d9 f7       	brne	.-10     	; 0xa6aa <Config_Wifi+0x40c>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    a6b4:	84 ef       	ldi	r24, 0xF4	; 244
    a6b6:	91 e0       	ldi	r25, 0x01	; 1
    a6b8:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    a6bc:	88 ee       	ldi	r24, 0xE8	; 232
    a6be:	93 e0       	ldi	r25, 0x03	; 3
    a6c0:	0e 94 15 48 	call	0x902a	; 0x902a <Wifi_GetTime>
    a6c4:	88 23       	and	r24, r24
    a6c6:	09 f4       	brne	.+2      	; 0xa6ca <Config_Wifi+0x42c>
    a6c8:	5a c0       	rjmp	.+180    	; 0xa77e <Config_Wifi+0x4e0>
			Time_Set(time_secs);
    a6ca:	80 91 7a 33 	lds	r24, 0x337A
    a6ce:	90 91 7b 33 	lds	r25, 0x337B
    a6d2:	a0 91 7c 33 	lds	r26, 0x337C
    a6d6:	b0 91 7d 33 	lds	r27, 0x337D
	
	
}

void Time_Set(uint32_t time){
  cli();
    a6da:	f8 94       	cli
  UNIX_time = time;
    a6dc:	80 93 9c 33 	sts	0x339C, r24
    a6e0:	90 93 9d 33 	sts	0x339D, r25
    a6e4:	a0 93 9e 33 	sts	0x339E, r26
    a6e8:	b0 93 9f 33 	sts	0x339F, r27
  sei();
    a6ec:	78 94       	sei
		    timeIsValid = true;
    a6ee:	11 e0       	ldi	r17, 0x01	; 1
    a6f0:	10 93 dd 33 	sts	0x33DD, r17
			display_putString("internet.......OK",col,0,System5x7);
    a6f4:	8c e5       	ldi	r24, 0x5C	; 92
    a6f6:	98 e2       	ldi	r25, 0x28	; 40
    a6f8:	60 2f       	mov	r22, r16
    a6fa:	40 e0       	ldi	r20, 0x00	; 0
    a6fc:	27 e0       	ldi	r18, 0x07	; 7
    a6fe:	31 e3       	ldi	r19, 0x31	; 49
    a700:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
			signalStrength = Wifi_GetSignalStrength(1000);
    a704:	88 ee       	ldi	r24, 0xE8	; 232
    a706:	93 e0       	ldi	r25, 0x03	; 3
    a708:	0e 94 ed 50 	call	0xa1da	; 0xa1da <Wifi_GetSignalStrength>
    a70c:	80 93 c8 33 	sts	0x33C8, r24

	        Debug_SendString("Getting space remaining",true);
    a710:	8e e6       	ldi	r24, 0x6E	; 110
    a712:	98 e2       	ldi	r25, 0x28	; 40
    a714:	61 e0       	ldi	r22, 0x01	; 1
    a716:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
	        okToGetRemainingSpace = true;
    a71a:	10 93 28 4b 	sts	0x4B28, r17
	        while(!okToGetRemainingSpace);
    a71e:	80 91 28 4b 	lds	r24, 0x4B28
    a722:	88 23       	and	r24, r24
    a724:	e1 f3       	breq	.-8      	; 0xa71e <Config_Wifi+0x480>
            if(!recording){
    a726:	80 91 a1 33 	lds	r24, 0x33A1
    a72a:	88 23       	and	r24, r24
    a72c:	31 f4       	brne	.+12     	; 0xa73a <Config_Wifi+0x49c>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a72e:	e0 e2       	ldi	r30, 0x20	; 32
    a730:	f6 e0       	ldi	r31, 0x06	; 6
    a732:	80 e4       	ldi	r24, 0x40	; 64
    a734:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a736:	80 e8       	ldi	r24, 0x80	; 128
    a738:	86 83       	std	Z+6, r24	; 0x06
    a73a:	80 e1       	ldi	r24, 0x10	; 16
    a73c:	97 e2       	ldi	r25, 0x27	; 39
    a73e:	20 e7       	ldi	r18, 0x70	; 112
    a740:	31 e0       	ldi	r19, 0x01	; 1
    a742:	f9 01       	movw	r30, r18
    a744:	31 97       	sbiw	r30, 0x01	; 1
    a746:	f1 f7       	brne	.-4      	; 0xa744 <Config_Wifi+0x4a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a748:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a74a:	d9 f7       	brne	.-10     	; 0xa742 <Config_Wifi+0x4a4>
                Leds_Set(wifi_Green);
			    Leds_Clear(wifi_Red);
            }
			_delay_ms(1000);
            Wifi_SendCommand("set uart instant 460800","AOK","AOK",5);
    a74c:	86 e8       	ldi	r24, 0x86	; 134
    a74e:	98 e2       	ldi	r25, 0x28	; 40
    a750:	65 eb       	ldi	r22, 0xB5	; 181
    a752:	76 e2       	ldi	r23, 0x26	; 38
    a754:	ab 01       	movw	r20, r22
    a756:	25 e0       	ldi	r18, 0x05	; 5
    a758:	30 e0       	ldi	r19, 0x00	; 0
    a75a:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
            Wifi_Init(460800);
    a75e:	60 e0       	ldi	r22, 0x00	; 0
    a760:	78 e0       	ldi	r23, 0x08	; 8
    a762:	87 e0       	ldi	r24, 0x07	; 7
    a764:	90 e0       	ldi	r25, 0x00	; 0
    a766:	0e 94 b6 02 	call	0x56c	; 0x56c <Wifi_Init>
    a76a:	80 e3       	ldi	r24, 0x30	; 48
    a76c:	95 e7       	ldi	r25, 0x75	; 117
    a76e:	20 e7       	ldi	r18, 0x70	; 112
    a770:	31 e0       	ldi	r19, 0x01	; 1
    a772:	f9 01       	movw	r30, r18
    a774:	31 97       	sbiw	r30, 0x01	; 1
    a776:	f1 f7       	brne	.-4      	; 0xa774 <Config_Wifi+0x4d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a778:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a77a:	d9 f7       	brne	.-10     	; 0xa772 <Config_Wifi+0x4d4>
    a77c:	1d c0       	rjmp	.+58     	; 0xa7b8 <Config_Wifi+0x51a>
			//while(!Wifi_EnterCMDMode(500)){
			//    _delay_ms(1000);
			//    Debug_SendString("Retrying CMD Mode",true);
			//}
		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    a77e:	8e e9       	ldi	r24, 0x9E	; 158
    a780:	98 e2       	ldi	r25, 0x28	; 40
    a782:	60 2f       	mov	r22, r16
    a784:	40 e0       	ldi	r20, 0x00	; 0
    a786:	27 e0       	ldi	r18, 0x07	; 7
    a788:	31 e3       	ldi	r19, 0x31	; 49
    a78a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
            if(!recording){
    a78e:	80 91 a1 33 	lds	r24, 0x33A1
    a792:	88 23       	and	r24, r24
    a794:	31 f4       	brne	.+12     	; 0xa7a2 <Config_Wifi+0x504>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a796:	e0 e2       	ldi	r30, 0x20	; 32
    a798:	f6 e0       	ldi	r31, 0x06	; 6
    a79a:	80 e8       	ldi	r24, 0x80	; 128
    a79c:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a79e:	80 e4       	ldi	r24, 0x40	; 64
    a7a0:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
            }
			connected = false;
    a7a2:	10 92 82 33 	sts	0x3382, r1
    a7a6:	88 e8       	ldi	r24, 0x88	; 136
    a7a8:	93 e1       	ldi	r25, 0x13	; 19
    a7aa:	20 e7       	ldi	r18, 0x70	; 112
    a7ac:	31 e0       	ldi	r19, 0x01	; 1
    a7ae:	f9 01       	movw	r30, r18
    a7b0:	31 97       	sbiw	r30, 0x01	; 1
    a7b2:	f1 f7       	brne	.-4      	; 0xa7b0 <Config_Wifi+0x512>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7b6:	d9 f7       	brne	.-10     	; 0xa7ae <Config_Wifi+0x510>
			_delay_ms(500);

		}

		display_writeBufferToScreen();
    a7b8:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a7bc:	80 e1       	ldi	r24, 0x10	; 16
    a7be:	97 e2       	ldi	r25, 0x27	; 39
    a7c0:	20 e7       	ldi	r18, 0x70	; 112
    a7c2:	31 e0       	ldi	r19, 0x01	; 1
    a7c4:	f9 01       	movw	r30, r18
    a7c6:	31 97       	sbiw	r30, 0x01	; 1
    a7c8:	f1 f7       	brne	.-4      	; 0xa7c6 <Config_Wifi+0x528>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7cc:	d9 f7       	brne	.-10     	; 0xa7c4 <Config_Wifi+0x526>
    a7ce:	0d c0       	rjmp	.+26     	; 0xa7ea <Config_Wifi+0x54c>
    a7d0:	80 e1       	ldi	r24, 0x10	; 16
    a7d2:	97 e2       	ldi	r25, 0x27	; 39
    a7d4:	f8 01       	movw	r30, r16
    a7d6:	31 97       	sbiw	r30, 0x01	; 1
    a7d8:	f1 f7       	brne	.-4      	; 0xa7d6 <Config_Wifi+0x538>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7dc:	d9 f7       	brne	.-10     	; 0xa7d4 <Config_Wifi+0x536>
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
    a7de:	80 eb       	ldi	r24, 0xB0	; 176
    a7e0:	98 e2       	ldi	r25, 0x28	; 40
    a7e2:	61 e0       	ldi	r22, 0x01	; 1
    a7e4:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    a7e8:	02 c0       	rjmp	.+4      	; 0xa7ee <Config_Wifi+0x550>
    a7ea:	00 e7       	ldi	r16, 0x70	; 112
    a7ec:	11 e0       	ldi	r17, 0x01	; 1

		}

		display_writeBufferToScreen();
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
    a7ee:	88 ee       	ldi	r24, 0xE8	; 232
    a7f0:	93 e0       	ldi	r25, 0x03	; 3
    a7f2:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    a7f6:	88 23       	and	r24, r24
    a7f8:	59 f3       	breq	.-42     	; 0xa7d0 <Config_Wifi+0x532>
    a7fa:	12 c0       	rjmp	.+36     	; 0xa820 <Config_Wifi+0x582>
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
		}

	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    a7fc:	8e e9       	ldi	r24, 0x9E	; 158
    a7fe:	98 e2       	ldi	r25, 0x28	; 40
    a800:	60 2f       	mov	r22, r16
    a802:	40 e0       	ldi	r20, 0x00	; 0
    a804:	27 e0       	ldi	r18, 0x07	; 7
    a806:	31 e3       	ldi	r19, 0x31	; 49
    a808:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
		display_writeBufferToScreen();
    a80c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
        if(!recording){
    a810:	80 91 a1 33 	lds	r24, 0x33A1
    a814:	88 23       	and	r24, r24
    a816:	21 f4       	brne	.+8      	; 0xa820 <Config_Wifi+0x582>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a818:	80 e8       	ldi	r24, 0x80	; 128
    a81a:	e0 e2       	ldi	r30, 0x20	; 32
    a81c:	f6 e0       	ldi	r31, 0x06	; 6
    a81e:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Set(wifi_Red);
        }
	}


}
    a820:	1f 91       	pop	r17
    a822:	0f 91       	pop	r16
    a824:	08 95       	ret

0000a826 <main>:


// ********************************** Main Program *********************************


int main(void){
    a826:	2f 92       	push	r2
    a828:	3f 92       	push	r3
    a82a:	5f 92       	push	r5
    a82c:	6f 92       	push	r6
    a82e:	7f 92       	push	r7
    a830:	8f 92       	push	r8
    a832:	9f 92       	push	r9
    a834:	af 92       	push	r10
    a836:	bf 92       	push	r11
    a838:	cf 92       	push	r12
    a83a:	df 92       	push	r13
    a83c:	ef 92       	push	r14
    a83e:	ff 92       	push	r15
    a840:	0f 93       	push	r16
    a842:	1f 93       	push	r17
    a844:	df 93       	push	r29
    a846:	cf 93       	push	r28
    a848:	0f 92       	push	r0
    a84a:	cd b7       	in	r28, 0x3d	; 61
    a84c:	de b7       	in	r29, 0x3e	; 62
    a84e:	80 e0       	ldi	r24, 0x00	; 0
    a850:	98 e4       	ldi	r25, 0x48	; 72
    a852:	01 97       	sbiw	r24, 0x01	; 1
    a854:	f1 f7       	brne	.-4      	; 0xa852 <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    a856:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <Clock_Init>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    a85a:	8f b7       	in	r24, 0x3f	; 63
    a85c:	89 83       	std	Y+1, r24	; 0x01
    cli();
    a85e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    a860:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    a862:	21 e0       	ldi	r18, 0x01	; 1
    a864:	86 e9       	ldi	r24, 0x96	; 150
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	fc 01       	movw	r30, r24
    a86a:	08 ed       	ldi	r16, 0xD8	; 216
    a86c:	04 bf       	out	0x34, r16	; 52
    a86e:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    a870:	89 81       	ldd	r24, Y+1	; 0x01
    a872:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();

	getDeviceID();
    a874:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <getDeviceID>
	display_init();
    a878:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <display_init>

	Time_Init();
    a87c:	0e 94 6e 30 	call	0x60dc	; 0x60dc <Time_Init>
	Sensors_Init();
    a880:	0e 94 b2 30 	call	0x6164	; 0x6164 <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    a884:	80 91 21 06 	lds	r24, 0x0621
    a888:	83 6f       	ori	r24, 0xF3	; 243
    a88a:	e0 e2       	ldi	r30, 0x20	; 32
    a88c:	f6 e0       	ldi	r31, 0x06	; 6
    a88e:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    a890:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Dpad_Init>


	Rs232_Init();
    a894:	0e 94 a7 03 	call	0x74e	; 0x74e <Rs232_Init>

	Light_Init(LightAddress);
    a898:	82 e7       	ldi	r24, 0x72	; 114
    a89a:	0e 94 2b 33 	call	0x6656	; 0x6656 <Light_Init>


	Display_BackgroundWriter_Init();
    a89e:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    a8a2:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <SD_BackroundWriter_Init>
	DMA_Init();
    a8a6:	0e 94 2d 3a 	call	0x745a	; 0x745a <DMA_Init>


	display_putString("   BaseStation   ",1,0,System5x7);
    a8aa:	87 ec       	ldi	r24, 0xC7	; 199
    a8ac:	98 e2       	ldi	r25, 0x28	; 40
    a8ae:	61 e0       	ldi	r22, 0x01	; 1
    a8b0:	40 e0       	ldi	r20, 0x00	; 0
    a8b2:	27 e0       	ldi	r18, 0x07	; 7
    a8b4:	31 e3       	ldi	r19, 0x31	; 49
    a8b6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
	strcat(temp,"  Hardware: v");
    a8ba:	8b e0       	ldi	r24, 0x0B	; 11
    a8bc:	9a e4       	ldi	r25, 0x4A	; 74
    a8be:	69 ed       	ldi	r22, 0xD9	; 217
    a8c0:	78 e2       	ldi	r23, 0x28	; 40
    a8c2:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	strcat(temp,HardwareVersion);
    a8c6:	8b e0       	ldi	r24, 0x0B	; 11
    a8c8:	9a e4       	ldi	r25, 0x4A	; 74
    a8ca:	68 e9       	ldi	r22, 0x98	; 152
    a8cc:	73 e2       	ldi	r23, 0x23	; 35
    a8ce:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	display_putString(temp,3,0,System5x7);
    a8d2:	8b e0       	ldi	r24, 0x0B	; 11
    a8d4:	9a e4       	ldi	r25, 0x4A	; 74
    a8d6:	63 e0       	ldi	r22, 0x03	; 3
    a8d8:	40 e0       	ldi	r20, 0x00	; 0
    a8da:	27 e0       	ldi	r18, 0x07	; 7
    a8dc:	31 e3       	ldi	r19, 0x31	; 49
    a8de:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
	temp[0] = 0;
    a8e2:	10 92 0b 4a 	sts	0x4A0B, r1
	strcat(temp," Firmware: v");
    a8e6:	8b e0       	ldi	r24, 0x0B	; 11
    a8e8:	9a e4       	ldi	r25, 0x4A	; 74
    a8ea:	67 ee       	ldi	r22, 0xE7	; 231
    a8ec:	78 e2       	ldi	r23, 0x28	; 40
    a8ee:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	strcat(temp,FirmwareVersion);
    a8f2:	8b e0       	ldi	r24, 0x0B	; 11
    a8f4:	9a e4       	ldi	r25, 0x4A	; 74
    a8f6:	62 e8       	ldi	r22, 0x82	; 130
    a8f8:	73 e2       	ldi	r23, 0x23	; 35
    a8fa:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
	display_putString(temp,5,0,System5x7);
    a8fe:	8b e0       	ldi	r24, 0x0B	; 11
    a900:	9a e4       	ldi	r25, 0x4A	; 74
    a902:	65 e0       	ldi	r22, 0x05	; 5
    a904:	40 e0       	ldi	r20, 0x00	; 0
    a906:	27 e0       	ldi	r18, 0x07	; 7
    a908:	31 e3       	ldi	r19, 0x31	; 49
    a90a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
	display_writeBufferToScreen();
    a90e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>
    a912:	80 e1       	ldi	r24, 0x10	; 16
    a914:	97 e2       	ldi	r25, 0x27	; 39
    a916:	20 e7       	ldi	r18, 0x70	; 112
    a918:	31 e0       	ldi	r19, 0x01	; 1
    a91a:	f9 01       	movw	r30, r18
    a91c:	31 97       	sbiw	r30, 0x01	; 1
    a91e:	f1 f7       	brne	.-4      	; 0xa91c <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a920:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a922:	d9 f7       	brne	.-10     	; 0xa91a <main+0xf4>
	_delay_ms(1000);


    SD_Init();
    a924:	0e 94 3d 2c 	call	0x587a	; 0x587a <SD_Init>
		
}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    a928:	80 91 a2 00 	lds	r24, 0x00A2
    a92c:	87 60       	ori	r24, 0x07	; 7
    a92e:	e0 ea       	ldi	r30, 0xA0	; 160
    a930:	f0 e0       	ldi	r31, 0x00	; 0
    a932:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    a934:	78 94       	sei
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    a936:	a0 e2       	ldi	r26, 0x20	; 32
    a938:	b6 e0       	ldi	r27, 0x06	; 6
    a93a:	42 e0       	ldi	r20, 0x02	; 2
    a93c:	20 e7       	ldi	r18, 0x70	; 112
    a93e:	31 e0       	ldi	r19, 0x01	; 1
    a940:	05 c0       	rjmp	.+10     	; 0xa94c <main+0x126>
    a942:	f9 01       	movw	r30, r18
    a944:	31 97       	sbiw	r30, 0x01	; 1
    a946:	f1 f7       	brne	.-4      	; 0xa944 <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a948:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a94a:	d9 f7       	brne	.-10     	; 0xa942 <main+0x11c>
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    a94c:	80 91 a8 06 	lds	r24, 0x06A8
    a950:	80 ff       	sbrs	r24, 0
    a952:	2b c7       	rjmp	.+3670   	; 0xb7aa <main+0xf84>
    a954:	17 96       	adiw	r26, 0x07	; 7
    a956:	4c 93       	st	X, r20
    a958:	17 97       	sbiw	r26, 0x07	; 7
    a95a:	88 e8       	ldi	r24, 0x88	; 136
    a95c:	93 e1       	ldi	r25, 0x13	; 19
    a95e:	f1 cf       	rjmp	.-30     	; 0xa942 <main+0x11c>
    a960:	ca 01       	movw	r24, r20
    a962:	01 97       	sbiw	r24, 0x01	; 1
    a964:	f1 f7       	brne	.-4      	; 0xa962 <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a966:	21 50       	subi	r18, 0x01	; 1
    a968:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a96a:	d1 f7       	brne	.-12     	; 0xa960 <main+0x13a>
	}
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);

	Read_config_file();
    a96c:	0e 94 a1 48 	call	0x9142	; 0x9142 <Read_config_file>

    if(demoMode){
    a970:	80 91 6c 33 	lds	r24, 0x336C
    a974:	88 23       	and	r24, r24
    a976:	19 f0       	breq	.+6      	; 0xa97e <main+0x158>
		display_putString("    Demo Mode    ",7,0,System5x7);
    a978:	84 ef       	ldi	r24, 0xF4	; 244
    a97a:	98 e2       	ldi	r25, 0x28	; 40
    a97c:	09 c0       	rjmp	.+18     	; 0xa990 <main+0x16a>
	} else if(useWifiForUploading) {
    a97e:	80 91 6d 33 	lds	r24, 0x336D
    a982:	88 23       	and	r24, r24
    a984:	19 f0       	breq	.+6      	; 0xa98c <main+0x166>
	    display_putString("  Uploader: Wifi ",7,0,System5x7);
    a986:	86 e0       	ldi	r24, 0x06	; 6
    a988:	99 e2       	ldi	r25, 0x29	; 41
    a98a:	02 c0       	rjmp	.+4      	; 0xa990 <main+0x16a>
	} else {
	    display_putString("  Uploader: USB  ",7,0,System5x7);
    a98c:	88 e1       	ldi	r24, 0x18	; 24
    a98e:	99 e2       	ldi	r25, 0x29	; 41
    a990:	67 e0       	ldi	r22, 0x07	; 7
    a992:	40 e0       	ldi	r20, 0x00	; 0
    a994:	27 e0       	ldi	r18, 0x07	; 7
    a996:	31 e3       	ldi	r19, 0x31	; 49
    a998:	0e 94 56 2e 	call	0x5cac	; 0x5cac <display_putString>
	}
    display_writeBufferToScreen();
    a99c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>

    if(useWifiForUploading){
    a9a0:	80 91 6d 33 	lds	r24, 0x336D
    a9a4:	88 23       	and	r24, r24
    a9a6:	29 f0       	breq	.+10     	; 0xa9b2 <main+0x18c>
	   Debug_Init(9600);
    a9a8:	60 e8       	ldi	r22, 0x80	; 128
    a9aa:	75 e2       	ldi	r23, 0x25	; 37
    a9ac:	80 e0       	ldi	r24, 0x00	; 0
    a9ae:	90 e0       	ldi	r25, 0x00	; 0
    a9b0:	04 c0       	rjmp	.+8      	; 0xa9ba <main+0x194>
	} else {
	   Debug_Init(460800);
    a9b2:	60 e0       	ldi	r22, 0x00	; 0
    a9b4:	78 e0       	ldi	r23, 0x08	; 8
    a9b6:	87 e0       	ldi	r24, 0x07	; 7
    a9b8:	90 e0       	ldi	r25, 0x00	; 0
    a9ba:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	}



    if(demoMode){
    a9be:	80 91 6c 33 	lds	r24, 0x336C
    a9c2:	88 23       	and	r24, r24
    a9c4:	11 f0       	breq	.+4      	; 0xa9ca <main+0x1a4>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a9c6:	80 e4       	ldi	r24, 0x40	; 64
    a9c8:	01 c0       	rjmp	.+2      	; 0xa9cc <main+0x1a6>
	} else {
	    Leds_Set(wifi_Red);
	}

  Configure_Wifi:
    Debug_SendString("Configuring Wifi",true);
    a9ca:	80 e8       	ldi	r24, 0x80	; 128
    a9cc:	e0 e2       	ldi	r30, 0x20	; 32
    a9ce:	f6 e0       	ldi	r31, 0x06	; 6
    a9d0:	85 83       	std	Z+5, r24	; 0x05
    a9d2:	8a e2       	ldi	r24, 0x2A	; 42
    a9d4:	99 e2       	ldi	r25, 0x29	; 41
    a9d6:	61 e0       	ldi	r22, 0x01	; 1
    a9d8:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    connected = false;
    a9dc:	10 92 82 33 	sts	0x3382, r1
    Wifi_Init(9600);
    a9e0:	60 e8       	ldi	r22, 0x80	; 128
    a9e2:	75 e2       	ldi	r23, 0x25	; 37
    a9e4:	80 e0       	ldi	r24, 0x00	; 0
    a9e6:	90 e0       	ldi	r25, 0x00	; 0
    a9e8:	0e 94 b6 02 	call	0x56c	; 0x56c <Wifi_Init>
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    a9ec:	00 e2       	ldi	r16, 0x20	; 32
    a9ee:	16 e0       	ldi	r17, 0x06	; 6
    a9f0:	30 e8       	ldi	r19, 0x80	; 128
    a9f2:	c3 2e       	mov	r12, r19
    a9f4:	20 e7       	ldi	r18, 0x70	; 112
    a9f6:	e2 2e       	mov	r14, r18
    a9f8:	21 e0       	ldi	r18, 0x01	; 1
    a9fa:	f2 2e       	mov	r15, r18
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a9fc:	90 e4       	ldi	r25, 0x40	; 64
    a9fe:	a9 2e       	mov	r10, r25
		    if(Debug_Connected(500)){
		        _delay_ms(500);
		        Time_Set(Debug_GetTime(1000));
		        Leds_Set(wifi_Green);
		        Leds_Clear(wifi_Red);
		        timeIsValid = true;
    aa00:	dd 24       	eor	r13, r13
    aa02:	d3 94       	inc	r13
		        connected = true;
                signalStrength = 100;
    aa04:	84 e6       	ldi	r24, 0x64	; 100
    aa06:	b8 2e       	mov	r11, r24
    aa08:	38 c0       	rjmp	.+112    	; 0xaa7a <main+0x254>
  Configure_Wifi:
    Debug_SendString("Configuring Wifi",true);
    connected = false;
    Wifi_Init(9600);
    while(!connected && !demoMode){
        if(useWifiForUploading){
    aa0a:	80 91 6d 33 	lds	r24, 0x336D
    aa0e:	88 23       	and	r24, r24
    aa10:	51 f0       	breq	.+20     	; 0xaa26 <main+0x200>
		    Config_Wifi();
    aa12:	0e 94 4f 51 	call	0xa29e	; 0xa29e <Config_Wifi>
    aa16:	88 e8       	ldi	r24, 0x88	; 136
    aa18:	93 e1       	ldi	r25, 0x13	; 19
    aa1a:	f7 01       	movw	r30, r14
    aa1c:	31 97       	sbiw	r30, 0x01	; 1
    aa1e:	f1 f7       	brne	.-4      	; 0xaa1c <main+0x1f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa20:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa22:	d9 f7       	brne	.-10     	; 0xaa1a <main+0x1f4>
    aa24:	2a c0       	rjmp	.+84     	; 0xaa7a <main+0x254>
	        _delay_ms(500);
	    } else {
		    if(Debug_Connected(500)){
    aa26:	84 ef       	ldi	r24, 0xF4	; 244
    aa28:	91 e0       	ldi	r25, 0x01	; 1
    aa2a:	0e 94 26 02 	call	0x44c	; 0x44c <Debug_Connected>
    aa2e:	88 23       	and	r24, r24
    aa30:	11 f1       	breq	.+68     	; 0xaa76 <main+0x250>
    aa32:	88 e8       	ldi	r24, 0x88	; 136
    aa34:	93 e1       	ldi	r25, 0x13	; 19
    aa36:	f7 01       	movw	r30, r14
    aa38:	31 97       	sbiw	r30, 0x01	; 1
    aa3a:	f1 f7       	brne	.-4      	; 0xaa38 <main+0x212>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa3e:	d9 f7       	brne	.-10     	; 0xaa36 <main+0x210>
		        _delay_ms(500);
		        Time_Set(Debug_GetTime(1000));
    aa40:	88 ee       	ldi	r24, 0xE8	; 232
    aa42:	93 e0       	ldi	r25, 0x03	; 3
    aa44:	0e 94 cb 01 	call	0x396	; 0x396 <Debug_GetTime>
	
	
}

void Time_Set(uint32_t time){
  cli();
    aa48:	f8 94       	cli
  UNIX_time = time;
    aa4a:	60 93 9c 33 	sts	0x339C, r22
    aa4e:	70 93 9d 33 	sts	0x339D, r23
    aa52:	80 93 9e 33 	sts	0x339E, r24
    aa56:	90 93 9f 33 	sts	0x339F, r25
  sei();
    aa5a:	78 94       	sei
    aa5c:	d8 01       	movw	r26, r16
    aa5e:	15 96       	adiw	r26, 0x05	; 5
    aa60:	ac 92       	st	X, r10
    aa62:	15 97       	sbiw	r26, 0x05	; 5
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    aa64:	16 96       	adiw	r26, 0x06	; 6
    aa66:	cc 92       	st	X, r12
		        Leds_Set(wifi_Green);
		        Leds_Clear(wifi_Red);
		        timeIsValid = true;
    aa68:	d0 92 dd 33 	sts	0x33DD, r13
		        connected = true;
    aa6c:	d0 92 82 33 	sts	0x3382, r13
                signalStrength = 100;
    aa70:	b0 92 c8 33 	sts	0x33C8, r11
    aa74:	02 c0       	rjmp	.+4      	; 0xaa7a <main+0x254>
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    aa76:	f8 01       	movw	r30, r16
    aa78:	c7 82       	std	Z+7, r12	; 0x07

  Configure_Wifi:
    Debug_SendString("Configuring Wifi",true);
    connected = false;
    Wifi_Init(9600);
    while(!connected && !demoMode){
    aa7a:	80 91 82 33 	lds	r24, 0x3382
    aa7e:	88 23       	and	r24, r24
    aa80:	29 f4       	brne	.+10     	; 0xaa8c <main+0x266>
    aa82:	80 91 6c 33 	lds	r24, 0x336C
    aa86:	88 23       	and	r24, r24
    aa88:	09 f4       	brne	.+2      	; 0xaa8c <main+0x266>
    aa8a:	bf cf       	rjmp	.-130    	; 0xaa0a <main+0x1e4>
    aa8c:	88 e8       	ldi	r24, 0x88	; 136
    aa8e:	93 e1       	ldi	r25, 0x13	; 19
    aa90:	20 e7       	ldi	r18, 0x70	; 112
    aa92:	31 e0       	ldi	r19, 0x01	; 1
    aa94:	f9 01       	movw	r30, r18
    aa96:	31 97       	sbiw	r30, 0x01	; 1
    aa98:	f1 f7       	brne	.-4      	; 0xaa96 <main+0x270>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa9c:	d9 f7       	brne	.-10     	; 0xaa94 <main+0x26e>


	_delay_ms(500);

	
	display_clearBuffer();
    aa9e:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <display_clearBuffer>
	display_writeBufferToScreen();
    aaa2:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <display_writeBufferToScreen>

	okToDisplayGUI = true;
    aaa6:	11 e0       	ldi	r17, 0x01	; 1
    aaa8:	10 93 cf 33 	sts	0x33CF, r17
	Wifi_EnterCMDMode(500);
    aaac:	84 ef       	ldi	r24, 0xF4	; 244
    aaae:	91 e0       	ldi	r25, 0x01	; 1
    aab0:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <Wifi_EnterCMDMode>



    //Debug_To_Wifi();

    if((!recording) && (!uploadTimedOut)){
    aab4:	80 91 a1 33 	lds	r24, 0x33A1
    aab8:	88 23       	and	r24, r24
    aaba:	59 f4       	brne	.+22     	; 0xaad2 <main+0x2ac>
    aabc:	80 91 88 33 	lds	r24, 0x3388
    aac0:	88 23       	and	r24, r24
    aac2:	39 f4       	brne	.+14     	; 0xaad2 <main+0x2ac>
	    okToOpenLogFile = true;
    aac4:	10 93 cc 33 	sts	0x33CC, r17
	    while(!recording);
    aac8:	80 91 a1 33 	lds	r24, 0x33A1
    aacc:	88 23       	and	r24, r24
    aace:	e1 f3       	breq	.-8      	; 0xaac8 <main+0x2a2>
    aad0:	06 c0       	rjmp	.+12     	; 0xaade <main+0x2b8>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    aad2:	e0 e2       	ldi	r30, 0x20	; 32
    aad4:	f6 e0       	ldi	r31, 0x06	; 6
    aad6:	80 e4       	ldi	r24, 0x40	; 64
    aad8:	86 83       	std	Z+6, r24	; 0x06
    aada:	80 e8       	ldi	r24, 0x80	; 128
    aadc:	86 83       	std	Z+6, r24	; 0x06
    aade:	88 ee       	ldi	r24, 0xE8	; 232
    aae0:	93 e0       	ldi	r25, 0x03	; 3
    aae2:	20 e7       	ldi	r18, 0x70	; 112
    aae4:	31 e0       	ldi	r19, 0x01	; 1
    aae6:	f9 01       	movw	r30, r18
    aae8:	31 97       	sbiw	r30, 0x01	; 1
    aaea:	f1 f7       	brne	.-4      	; 0xaae8 <main+0x2c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aaec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aaee:	d9 f7       	brne	.-10     	; 0xaae6 <main+0x2c0>
	    Leds_Clear(wifi_Red);
	}

	_delay_ms(100);

	okToReopenDirectory = true;
    aaf0:	81 e0       	ldi	r24, 0x01	; 1
    aaf2:	80 93 d1 33 	sts	0x33D1, r24
	okToFindFileToUpload = true;
    aaf6:	80 93 d0 33 	sts	0x33D0, r24

    while(demoMode);
    aafa:	80 91 6c 33 	lds	r24, 0x336C
    aafe:	88 23       	and	r24, r24
    ab00:	09 f0       	breq	.+2      	; 0xab04 <main+0x2de>
    ab02:	61 c6       	rjmp	.+3266   	; 0xb7c6 <main+0xfa0>
    ab04:	00 e7       	ldi	r16, 0x70	; 112
    ab06:	60 2e       	mov	r6, r16
    ab08:	01 e0       	ldi	r16, 0x01	; 1
    ab0a:	70 2e       	mov	r7, r16

            memmove(temp,strtok(fileToUpload,"/"),12);
            memmove(fileToUpload,temp,12);

            uploadHeaderSize = 177;
            uploadHeaderSize += strlen(user);
    ab0c:	19 e7       	ldi	r17, 0x79	; 121
    ab0e:	21 2e       	mov	r2, r17
    ab10:	1a e4       	ldi	r17, 0x4A	; 74
    ab12:	31 2e       	mov	r3, r17
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    ab14:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    ab18:	8c 77       	andi	r24, 0x7C	; 124
    ab1a:	84 ff       	sbrs	r24, 4
    ab1c:	51 c6       	rjmp	.+3234   	; 0xb7c0 <main+0xf9a>
    Main:
	while(true){
        if(Dpad_CheckButton(Left)){
          Debug_To_Wifi();
        }
	    if(ssRefreshCounter > 5000){
    ab1e:	80 91 c6 33 	lds	r24, 0x33C6
    ab22:	90 91 c7 33 	lds	r25, 0x33C7
    ab26:	89 58       	subi	r24, 0x89	; 137
    ab28:	93 41       	sbci	r25, 0x13	; 19
    ab2a:	08 f4       	brcc	.+2      	; 0xab2e <main+0x308>
    ab2c:	66 c0       	rjmp	.+204    	; 0xabfa <main+0x3d4>
	       okToGetRemainingSpace = true;
    ab2e:	81 e0       	ldi	r24, 0x01	; 1
    ab30:	80 93 28 4b 	sts	0x4B28, r24
	       while(!okToGetRemainingSpace);
    ab34:	80 91 28 4b 	lds	r24, 0x4B28
    ab38:	88 23       	and	r24, r24
    ab3a:	e1 f3       	breq	.-8      	; 0xab34 <main+0x30e>

		   if(useWifiForUploading){
    ab3c:	80 91 6d 33 	lds	r24, 0x336D
    ab40:	88 23       	and	r24, r24
    ab42:	09 f4       	brne	.+2      	; 0xab46 <main+0x320>
    ab44:	3b c0       	rjmp	.+118    	; 0xabbc <main+0x396>
		        Wifi_EnterCMDMode(1000);
    ab46:	88 ee       	ldi	r24, 0xE8	; 232
    ab48:	93 e0       	ldi	r25, 0x03	; 3
    ab4a:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <Wifi_EnterCMDMode>
		        signalStrength = Wifi_GetSignalStrength(1000);
    ab4e:	88 ee       	ldi	r24, 0xE8	; 232
    ab50:	93 e0       	ldi	r25, 0x03	; 3
    ab52:	0e 94 ed 50 	call	0xa1da	; 0xa1da <Wifi_GetSignalStrength>
    ab56:	80 93 c8 33 	sts	0x33C8, r24
		        if(Wifi_Connected(500)){
    ab5a:	84 ef       	ldi	r24, 0xF4	; 244
    ab5c:	91 e0       	ldi	r25, 0x01	; 1
    ab5e:	0e 94 41 03 	call	0x682	; 0x682 <Wifi_Connected>
    ab62:	88 23       	and	r24, r24
    ab64:	31 f1       	breq	.+76     	; 0xabb2 <main+0x38c>
    ab66:	88 e8       	ldi	r24, 0x88	; 136
    ab68:	93 e1       	ldi	r25, 0x13	; 19
    ab6a:	f3 01       	movw	r30, r6
    ab6c:	31 97       	sbiw	r30, 0x01	; 1
    ab6e:	f1 f7       	brne	.-4      	; 0xab6c <main+0x346>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab72:	d9 f7       	brne	.-10     	; 0xab6a <main+0x344>
		            _delay_ms(500);
	                if(Wifi_GetTime(500)){
    ab74:	84 ef       	ldi	r24, 0xF4	; 244
    ab76:	91 e0       	ldi	r25, 0x01	; 1
    ab78:	0e 94 15 48 	call	0x902a	; 0x902a <Wifi_GetTime>
    ab7c:	88 23       	and	r24, r24
    ab7e:	91 f0       	breq	.+36     	; 0xaba4 <main+0x37e>
		                Time_Set(time_secs);
    ab80:	80 91 7a 33 	lds	r24, 0x337A
    ab84:	90 91 7b 33 	lds	r25, 0x337B
    ab88:	a0 91 7c 33 	lds	r26, 0x337C
    ab8c:	b0 91 7d 33 	lds	r27, 0x337D
	
	
}

void Time_Set(uint32_t time){
  cli();
    ab90:	f8 94       	cli
  UNIX_time = time;
    ab92:	80 93 9c 33 	sts	0x339C, r24
    ab96:	90 93 9d 33 	sts	0x339D, r25
    ab9a:	a0 93 9e 33 	sts	0x339E, r26
    ab9e:	b0 93 9f 33 	sts	0x339F, r27
  sei();
    aba2:	78 94       	sei
    aba4:	88 e8       	ldi	r24, 0x88	; 136
    aba6:	93 e1       	ldi	r25, 0x13	; 19
    aba8:	f3 01       	movw	r30, r6
    abaa:	31 97       	sbiw	r30, 0x01	; 1
    abac:	f1 f7       	brne	.-4      	; 0xabaa <main+0x384>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abb0:	d9 f7       	brne	.-10     	; 0xaba8 <main+0x382>
		            }
		            _delay_ms(500);
		        }
		        Wifi_ExitCMDMode(500);
    abb2:	84 ef       	ldi	r24, 0xF4	; 244
    abb4:	91 e0       	ldi	r25, 0x01	; 1
    abb6:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    abba:	1b c0       	rjmp	.+54     	; 0xabf2 <main+0x3cc>
		   } else {
                if(Debug_Connected(500)){
    abbc:	84 ef       	ldi	r24, 0xF4	; 244
    abbe:	91 e0       	ldi	r25, 0x01	; 1
    abc0:	0e 94 26 02 	call	0x44c	; 0x44c <Debug_Connected>
    abc4:	88 23       	and	r24, r24
    abc6:	a9 f0       	breq	.+42     	; 0xabf2 <main+0x3cc>
    abc8:	88 e8       	ldi	r24, 0x88	; 136
    abca:	93 e1       	ldi	r25, 0x13	; 19
    abcc:	f3 01       	movw	r30, r6
    abce:	31 97       	sbiw	r30, 0x01	; 1
    abd0:	f1 f7       	brne	.-4      	; 0xabce <main+0x3a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abd2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abd4:	d9 f7       	brne	.-10     	; 0xabcc <main+0x3a6>
                    _delay_ms(500);
		            Time_Set(Debug_GetTime(1000));
    abd6:	88 ee       	ldi	r24, 0xE8	; 232
    abd8:	93 e0       	ldi	r25, 0x03	; 3
    abda:	0e 94 cb 01 	call	0x396	; 0x396 <Debug_GetTime>
	
	
}

void Time_Set(uint32_t time){
  cli();
    abde:	f8 94       	cli
  UNIX_time = time;
    abe0:	60 93 9c 33 	sts	0x339C, r22
    abe4:	70 93 9d 33 	sts	0x339D, r23
    abe8:	80 93 9e 33 	sts	0x339E, r24
    abec:	90 93 9f 33 	sts	0x339F, r25
  sei();
    abf0:	78 94       	sei
		        }
		   }
		   ssRefreshCounter = 0;
    abf2:	10 92 c6 33 	sts	0x33C6, r1
    abf6:	10 92 c7 33 	sts	0x33C7, r1
	    }

        //okToUpload = true;
        if(okToUpload && Uploader_Connected(500)){
    abfa:	80 91 d6 33 	lds	r24, 0x33D6
    abfe:	88 23       	and	r24, r24
    ac00:	09 f4       	brne	.+2      	; 0xac04 <main+0x3de>
    ac02:	88 cf       	rjmp	.-240    	; 0xab14 <main+0x2ee>
    ac04:	84 ef       	ldi	r24, 0xF4	; 244
    ac06:	91 e0       	ldi	r25, 0x01	; 1
    ac08:	0e 94 95 3b 	call	0x772a	; 0x772a <Uploader_Connected>
    ac0c:	88 23       	and	r24, r24
    ac0e:	09 f4       	brne	.+2      	; 0xac12 <main+0x3ec>
    ac10:	81 cf       	rjmp	.-254    	; 0xab14 <main+0x2ee>
            uploading = true;
    ac12:	81 e0       	ldi	r24, 0x01	; 1
    ac14:	80 93 d7 33 	sts	0x33D7, r24
            if(fileToUpload[0] != '/'){
    ac18:	80 91 62 3c 	lds	r24, 0x3C62
    ac1c:	8f 32       	cpi	r24, 0x2F	; 47
    ac1e:	91 f0       	breq	.+36     	; 0xac44 <main+0x41e>
			    strcpy(newFileName, "/");
    ac20:	85 e0       	ldi	r24, 0x05	; 5
    ac22:	97 e5       	ldi	r25, 0x57	; 87
    ac24:	62 e7       	ldi	r22, 0x72	; 114
    ac26:	75 e2       	ldi	r23, 0x25	; 37
    ac28:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
			    strcat(newFileName, fileToUpload);
    ac2c:	85 e0       	ldi	r24, 0x05	; 5
    ac2e:	97 e5       	ldi	r25, 0x57	; 87
    ac30:	62 e6       	ldi	r22, 0x62	; 98
    ac32:	7c e3       	ldi	r23, 0x3C	; 60
    ac34:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>
			    strcpy(fileToUpload, newFileName);
    ac38:	82 e6       	ldi	r24, 0x62	; 98
    ac3a:	9c e3       	ldi	r25, 0x3C	; 60
    ac3c:	65 e0       	ldi	r22, 0x05	; 5
    ac3e:	77 e5       	ldi	r23, 0x57	; 87
    ac40:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
			}
            if(useWifiForUploading){
    ac44:	80 91 6d 33 	lds	r24, 0x336D
    ac48:	88 23       	and	r24, r24
    ac4a:	a1 f0       	breq	.+40     	; 0xac74 <main+0x44e>
			    Debug_SendString("",true);
    ac4c:	83 ec       	ldi	r24, 0xC3	; 195
    ac4e:	90 e2       	ldi	r25, 0x20	; 32
    ac50:	61 e0       	ldi	r22, 0x01	; 1
    ac52:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                Debug_SendString("_____________________________________________", true);
    ac56:	8b e3       	ldi	r24, 0x3B	; 59
    ac58:	99 e2       	ldi	r25, 0x29	; 41
    ac5a:	61 e0       	ldi	r22, 0x01	; 1
    ac5c:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
			    Debug_SendString("Uploading File: ", false);
    ac60:	89 e6       	ldi	r24, 0x69	; 105
    ac62:	99 e2       	ldi	r25, 0x29	; 41
    ac64:	60 e0       	ldi	r22, 0x00	; 0
    ac66:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
			    Debug_SendString(fileToUpload, true);
    ac6a:	82 e6       	ldi	r24, 0x62	; 98
    ac6c:	9c e3       	ldi	r25, 0x3C	; 60
    ac6e:	61 e0       	ldi	r22, 0x01	; 1
    ac70:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
			}
            okToOpenFileToUpload = true;
    ac74:	81 e0       	ldi	r24, 0x01	; 1
    ac76:	80 93 d9 33 	sts	0x33D9, r24
            while(!uploadFileOpened);
    ac7a:	80 91 05 31 	lds	r24, 0x3105
    ac7e:	88 23       	and	r24, r24
    ac80:	e1 f3       	breq	.-8      	; 0xac7a <main+0x454>
    ac82:	80 e2       	ldi	r24, 0x20	; 32
    ac84:	9e e4       	ldi	r25, 0x4E	; 78
    ac86:	f3 01       	movw	r30, r6
    ac88:	31 97       	sbiw	r30, 0x01	; 1
    ac8a:	f1 f7       	brne	.-4      	; 0xac88 <main+0x462>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac8e:	d9 f7       	brne	.-10     	; 0xac86 <main+0x460>
            _delay_ms(2000);


            numberOfPacketsToUpload = uploadFileSize /  1000;
    ac90:	60 91 e0 33 	lds	r22, 0x33E0
    ac94:	70 91 e1 33 	lds	r23, 0x33E1
    ac98:	80 91 e2 33 	lds	r24, 0x33E2
    ac9c:	90 91 e3 33 	lds	r25, 0x33E3
    aca0:	28 ee       	ldi	r18, 0xE8	; 232
    aca2:	33 e0       	ldi	r19, 0x03	; 3
    aca4:	40 e0       	ldi	r20, 0x00	; 0
    aca6:	50 e0       	ldi	r21, 0x00	; 0
    aca8:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    acac:	c9 01       	movw	r24, r18
    acae:	da 01       	movw	r26, r20
    acb0:	80 93 e8 33 	sts	0x33E8, r24
    acb4:	90 93 e9 33 	sts	0x33E9, r25
    acb8:	a0 93 ea 33 	sts	0x33EA, r26
    acbc:	b0 93 eb 33 	sts	0x33EB, r27
            leftOverBytesToUpload   = uploadFileSize %  1000;
    acc0:	60 91 e0 33 	lds	r22, 0x33E0
    acc4:	70 91 e1 33 	lds	r23, 0x33E1
    acc8:	80 91 e2 33 	lds	r24, 0x33E2
    accc:	90 91 e3 33 	lds	r25, 0x33E3
    acd0:	28 ee       	ldi	r18, 0xE8	; 232
    acd2:	33 e0       	ldi	r19, 0x03	; 3
    acd4:	40 e0       	ldi	r20, 0x00	; 0
    acd6:	50 e0       	ldi	r21, 0x00	; 0
    acd8:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    acdc:	9b 01       	movw	r18, r22
    acde:	ac 01       	movw	r20, r24
    ace0:	20 93 ec 33 	sts	0x33EC, r18
    ace4:	30 93 ed 33 	sts	0x33ED, r19
    ace8:	40 93 ee 33 	sts	0x33EE, r20
    acec:	50 93 ef 33 	sts	0x33EF, r21

            if(useWifiForUploading){
    acf0:	80 91 6d 33 	lds	r24, 0x336D
    acf4:	88 23       	and	r24, r24
    acf6:	09 f4       	brne	.+2      	; 0xacfa <main+0x4d4>
    acf8:	ed c0       	rjmp	.+474    	; 0xaed4 <main+0x6ae>
                Debug_SendString("File Opened!", true);
    acfa:	8a e7       	ldi	r24, 0x7A	; 122
    acfc:	99 e2       	ldi	r25, 0x29	; 41
    acfe:	61 e0       	ldi	r22, 0x01	; 1
    ad00:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                sprintf(temp,"File Size: %lu",uploadFileSize);
    ad04:	40 91 e0 33 	lds	r20, 0x33E0
    ad08:	50 91 e1 33 	lds	r21, 0x33E1
    ad0c:	60 91 e2 33 	lds	r22, 0x33E2
    ad10:	70 91 e3 33 	lds	r23, 0x33E3
    ad14:	2d b7       	in	r18, 0x3d	; 61
    ad16:	3e b7       	in	r19, 0x3e	; 62
    ad18:	28 50       	subi	r18, 0x08	; 8
    ad1a:	30 40       	sbci	r19, 0x00	; 0
    ad1c:	2d bf       	out	0x3d, r18	; 61
    ad1e:	3e bf       	out	0x3e, r19	; 62
    ad20:	ed b7       	in	r30, 0x3d	; 61
    ad22:	fe b7       	in	r31, 0x3e	; 62
    ad24:	31 96       	adiw	r30, 0x01	; 1
    ad26:	0b e0       	ldi	r16, 0x0B	; 11
    ad28:	1a e4       	ldi	r17, 0x4A	; 74
    ad2a:	ad b7       	in	r26, 0x3d	; 61
    ad2c:	be b7       	in	r27, 0x3e	; 62
    ad2e:	11 96       	adiw	r26, 0x01	; 1
    ad30:	0d 93       	st	X+, r16
    ad32:	1c 93       	st	X, r17
    ad34:	12 97       	sbiw	r26, 0x02	; 2
    ad36:	27 e8       	ldi	r18, 0x87	; 135
    ad38:	39 e2       	ldi	r19, 0x29	; 41
    ad3a:	22 83       	std	Z+2, r18	; 0x02
    ad3c:	33 83       	std	Z+3, r19	; 0x03
    ad3e:	44 83       	std	Z+4, r20	; 0x04
    ad40:	55 83       	std	Z+5, r21	; 0x05
    ad42:	66 83       	std	Z+6, r22	; 0x06
    ad44:	77 83       	std	Z+7, r23	; 0x07
    ad46:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
                Debug_SendString(temp, true);
    ad4a:	6d b7       	in	r22, 0x3d	; 61
    ad4c:	7e b7       	in	r23, 0x3e	; 62
    ad4e:	68 5f       	subi	r22, 0xF8	; 248
    ad50:	7f 4f       	sbci	r23, 0xFF	; 255
    ad52:	6d bf       	out	0x3d, r22	; 61
    ad54:	7e bf       	out	0x3e, r23	; 62
    ad56:	c8 01       	movw	r24, r16
    ad58:	61 e0       	ldi	r22, 0x01	; 1
    ad5a:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>

                Open_Connection:
                Wifi_EnterCMDMode(500);
    ad5e:	84 ef       	ldi	r24, 0xF4	; 244
    ad60:	91 e0       	ldi	r25, 0x01	; 1
    ad62:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <Wifi_EnterCMDMode>
    ad66:	80 e1       	ldi	r24, 0x10	; 16
    ad68:	97 e2       	ldi	r25, 0x27	; 39
    ad6a:	f3 01       	movw	r30, r6
    ad6c:	31 97       	sbiw	r30, 0x01	; 1
    ad6e:	f1 f7       	brne	.-4      	; 0xad6c <main+0x546>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad72:	d9 f7       	brne	.-10     	; 0xad6a <main+0x544>
                _delay_ms(1000);

                if(!Wifi_SendCommand(serverOpenCommand,"Connect to","Connect to",500)){
    ad74:	8f eb       	ldi	r24, 0xBF	; 191
    ad76:	90 e3       	ldi	r25, 0x30	; 48
    ad78:	66 e9       	ldi	r22, 0x96	; 150
    ad7a:	79 e2       	ldi	r23, 0x29	; 41
    ad7c:	ab 01       	movw	r20, r22
    ad7e:	24 ef       	ldi	r18, 0xF4	; 244
    ad80:	31 e0       	ldi	r19, 0x01	; 1
    ad82:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    ad86:	88 23       	and	r24, r24
    ad88:	99 f4       	brne	.+38     	; 0xadb0 <main+0x58a>
    ad8a:	80 e1       	ldi	r24, 0x10	; 16
    ad8c:	97 e2       	ldi	r25, 0x27	; 39
    ad8e:	f3 01       	movw	r30, r6
    ad90:	31 97       	sbiw	r30, 0x01	; 1
    ad92:	f1 f7       	brne	.-4      	; 0xad90 <main+0x56a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad96:	d9 f7       	brne	.-10     	; 0xad8e <main+0x568>

                    _delay_ms(1000);
                    Wifi_ExitCMDMode(500);
    ad98:	84 ef       	ldi	r24, 0xF4	; 244
    ad9a:	91 e0       	ldi	r25, 0x01	; 1
    ad9c:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    ada0:	8f ef       	ldi	r24, 0xFF	; 255
    ada2:	9f ef       	ldi	r25, 0xFF	; 255
    ada4:	f3 01       	movw	r30, r6
    ada6:	31 97       	sbiw	r30, 0x01	; 1
    ada8:	f1 f7       	brne	.-4      	; 0xada6 <main+0x580>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adaa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adac:	d9 f7       	brne	.-10     	; 0xada4 <main+0x57e>
    adae:	d7 cf       	rjmp	.-82     	; 0xad5e <main+0x538>
    adb0:	80 e4       	ldi	r24, 0x40	; 64
    adb2:	9c e9       	ldi	r25, 0x9C	; 156
    adb4:	f3 01       	movw	r30, r6
    adb6:	31 97       	sbiw	r30, 0x01	; 1
    adb8:	f1 f7       	brne	.-4      	; 0xadb6 <main+0x590>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adbc:	d9 f7       	brne	.-10     	; 0xadb4 <main+0x58e>
    adbe:	80 e4       	ldi	r24, 0x40	; 64
    adc0:	9c e9       	ldi	r25, 0x9C	; 156
    adc2:	f3 01       	movw	r30, r6
    adc4:	31 97       	sbiw	r30, 0x01	; 1
    adc6:	f1 f7       	brne	.-4      	; 0xadc4 <main+0x59e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adca:	d9 f7       	brne	.-10     	; 0xadc2 <main+0x59c>
                    goto Open_Connection;
                }
                _delay_ms(4000);
                _delay_ms(4000);

                tempStringFiller = 0;
    adcc:	10 92 bc 33 	sts	0x33BC, r1
    add0:	12 c0       	rjmp	.+36     	; 0xadf6 <main+0x5d0>
                while(Wifi_CharReadyToRead()){
                    temp[tempStringFiller] = Wifi_GetByte(false);
    add2:	80 91 bc 33 	lds	r24, 0x33BC
    add6:	08 2f       	mov	r16, r24
    add8:	10 e0       	ldi	r17, 0x00	; 0
    adda:	80 e0       	ldi	r24, 0x00	; 0
    addc:	0e 94 1e 03 	call	0x63c	; 0x63c <Wifi_GetByte>
    ade0:	05 5f       	subi	r16, 0xF5	; 245
    ade2:	15 4b       	sbci	r17, 0xB5	; 181
    ade4:	d8 01       	movw	r26, r16
    ade6:	8c 93       	st	X, r24
                    tempStringFiller++;
    ade8:	80 91 bc 33 	lds	r24, 0x33BC
    adec:	8f 5f       	subi	r24, 0xFF	; 255
    adee:	80 93 bc 33 	sts	0x33BC, r24
                    if(tempStringFiller == 49){
    adf2:	81 33       	cpi	r24, 0x31	; 49
    adf4:	21 f0       	breq	.+8      	; 0xadfe <main+0x5d8>
                }
                _delay_ms(4000);
                _delay_ms(4000);

                tempStringFiller = 0;
                while(Wifi_CharReadyToRead()){
    adf6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Wifi_CharReadyToRead>
    adfa:	88 23       	and	r24, r24
    adfc:	51 f7       	brne	.-44     	; 0xadd2 <main+0x5ac>
                    tempStringFiller++;
                    if(tempStringFiller == 49){
                        break;
                    }
                }
                temp[tempStringFiller] = 0;
    adfe:	e0 91 bc 33 	lds	r30, 0x33BC
    ae02:	f0 e0       	ldi	r31, 0x00	; 0
    ae04:	e5 5f       	subi	r30, 0xF5	; 245
    ae06:	f5 4b       	sbci	r31, 0xB5	; 181
    ae08:	10 82       	st	Z, r1


                if(strstr(temp,"*OPEN*") != 0){                            // success
    ae0a:	8b e0       	ldi	r24, 0x0B	; 11
    ae0c:	9a e4       	ldi	r25, 0x4A	; 74
    ae0e:	61 ea       	ldi	r22, 0xA1	; 161
    ae10:	79 e2       	ldi	r23, 0x29	; 41
    ae12:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    ae16:	00 97       	sbiw	r24, 0x00	; 0
    ae18:	91 f0       	breq	.+36     	; 0xae3e <main+0x618>
                    Debug_SendString("Connection Open!",true);
    ae1a:	88 ea       	ldi	r24, 0xA8	; 168
    ae1c:	99 e2       	ldi	r25, 0x29	; 41
    ae1e:	61 e0       	ldi	r22, 0x01	; 1
    ae20:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    ae24:	80 e1       	ldi	r24, 0x10	; 16
    ae26:	97 e2       	ldi	r25, 0x27	; 39
    ae28:	f3 01       	movw	r30, r6
    ae2a:	31 97       	sbiw	r30, 0x01	; 1
    ae2c:	f1 f7       	brne	.-4      	; 0xae2a <main+0x604>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae2e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae30:	d9 f7       	brne	.-10     	; 0xae28 <main+0x602>
                        _delay_ms(10000);
                        goto Open_Connection;
                    }
                }

                Debug_SendString("Sending...", true);
    ae32:	89 eb       	ldi	r24, 0xB9	; 185
    ae34:	99 e2       	ldi	r25, 0x29	; 41
    ae36:	61 e0       	ldi	r22, 0x01	; 1
    ae38:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    ae3c:	4b c0       	rjmp	.+150    	; 0xaed4 <main+0x6ae>


                if(strstr(temp,"*OPEN*") != 0){                            // success
                    Debug_SendString("Connection Open!",true);
                    _delay_ms(1000);
                } else if (strstr(temp,"ERR:Connected!")!=0){
    ae3e:	8b e0       	ldi	r24, 0x0B	; 11
    ae40:	9a e4       	ldi	r25, 0x4A	; 74
    ae42:	64 ec       	ldi	r22, 0xC4	; 196
    ae44:	79 e2       	ldi	r23, 0x29	; 41
    ae46:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    ae4a:	00 97       	sbiw	r24, 0x00	; 0
    ae4c:	01 f1       	breq	.+64     	; 0xae8e <main+0x668>

                    if(!Uploader_Connected(500)){
    ae4e:	84 ef       	ldi	r24, 0xF4	; 244
    ae50:	91 e0       	ldi	r25, 0x01	; 1
    ae52:	0e 94 95 3b 	call	0x772a	; 0x772a <Uploader_Connected>
    ae56:	88 23       	and	r24, r24
    ae58:	01 f1       	breq	.+64     	; 0xae9a <main+0x674>
                        Wifi_ExitCMDMode(500);
                        goto Main;
                    } else{
                        Debug_SendString("Let't retry connecting...",true);
    ae5a:	83 ed       	ldi	r24, 0xD3	; 211
    ae5c:	99 e2       	ldi	r25, 0x29	; 41
    ae5e:	61 e0       	ldi	r22, 0x01	; 1
    ae60:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                        Wifi_SendCommand("close","*CLOS*","*CLOS*",500);
    ae64:	8d ee       	ldi	r24, 0xED	; 237
    ae66:	99 e2       	ldi	r25, 0x29	; 41
    ae68:	63 ef       	ldi	r22, 0xF3	; 243
    ae6a:	79 e2       	ldi	r23, 0x29	; 41
    ae6c:	ab 01       	movw	r20, r22
    ae6e:	24 ef       	ldi	r18, 0xF4	; 244
    ae70:	31 e0       	ldi	r19, 0x01	; 1
    ae72:	0e 94 2f 40 	call	0x805e	; 0x805e <Wifi_SendCommand>
    ae76:	80 e1       	ldi	r24, 0x10	; 16
    ae78:	97 e2       	ldi	r25, 0x27	; 39
    ae7a:	f3 01       	movw	r30, r6
    ae7c:	31 97       	sbiw	r30, 0x01	; 1
    ae7e:	f1 f7       	brne	.-4      	; 0xae7c <main+0x656>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae82:	d9 f7       	brne	.-10     	; 0xae7a <main+0x654>
                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    ae84:	84 ef       	ldi	r24, 0xF4	; 244
    ae86:	91 e0       	ldi	r25, 0x01	; 1
    ae88:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    ae8c:	68 cf       	rjmp	.-304    	; 0xad5e <main+0x538>
                        goto Open_Connection;
                    }
                } else{
                    if(!Uploader_Connected(500)){
    ae8e:	84 ef       	ldi	r24, 0xF4	; 244
    ae90:	91 e0       	ldi	r25, 0x01	; 1
    ae92:	0e 94 95 3b 	call	0x772a	; 0x772a <Uploader_Connected>
    ae96:	88 23       	and	r24, r24
    ae98:	29 f4       	brne	.+10     	; 0xaea4 <main+0x67e>
                        Wifi_ExitCMDMode(500);
    ae9a:	84 ef       	ldi	r24, 0xF4	; 244
    ae9c:	91 e0       	ldi	r25, 0x01	; 1
    ae9e:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    aea2:	38 ce       	rjmp	.-912    	; 0xab14 <main+0x2ee>
                        goto Main;
                    } else{
                        Debug_SendString("Other issues: ", true);
    aea4:	8a ef       	ldi	r24, 0xFA	; 250
    aea6:	99 e2       	ldi	r25, 0x29	; 41
    aea8:	61 e0       	ldi	r22, 0x01	; 1
    aeaa:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
    aeae:	80 e1       	ldi	r24, 0x10	; 16
    aeb0:	97 e2       	ldi	r25, 0x27	; 39
    aeb2:	f3 01       	movw	r30, r6
    aeb4:	31 97       	sbiw	r30, 0x01	; 1
    aeb6:	f1 f7       	brne	.-4      	; 0xaeb4 <main+0x68e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aeb8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aeba:	d9 f7       	brne	.-10     	; 0xaeb2 <main+0x68c>
                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    aebc:	84 ef       	ldi	r24, 0xF4	; 244
    aebe:	91 e0       	ldi	r25, 0x01	; 1
    aec0:	0e 94 82 41 	call	0x8304	; 0x8304 <Wifi_ExitCMDMode>
    aec4:	8f ef       	ldi	r24, 0xFF	; 255
    aec6:	9f ef       	ldi	r25, 0xFF	; 255
    aec8:	f3 01       	movw	r30, r6
    aeca:	31 97       	sbiw	r30, 0x01	; 1
    aecc:	f1 f7       	brne	.-4      	; 0xaeca <main+0x6a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aece:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aed0:	d9 f7       	brne	.-10     	; 0xaec8 <main+0x6a2>
    aed2:	45 cf       	rjmp	.-374    	; 0xad5e <main+0x538>
                }

                Debug_SendString("Sending...", true);
            }

            uploadTimeStart = UNIX_time;
    aed4:	80 91 9c 33 	lds	r24, 0x339C
    aed8:	90 91 9d 33 	lds	r25, 0x339D
    aedc:	a0 91 9e 33 	lds	r26, 0x339E
    aee0:	b0 91 9f 33 	lds	r27, 0x339F
    aee4:	80 93 7f 3c 	sts	0x3C7F, r24
    aee8:	90 93 80 3c 	sts	0x3C80, r25
    aeec:	a0 93 81 3c 	sts	0x3C81, r26
    aef0:	b0 93 82 3c 	sts	0x3C82, r27
            uploadTimedOut = false;
    aef4:	10 92 88 33 	sts	0x3388, r1


            memmove(temp,strtok(fileToUpload,"/"),12);
    aef8:	82 e6       	ldi	r24, 0x62	; 98
    aefa:	9c e3       	ldi	r25, 0x3C	; 60
    aefc:	62 e7       	ldi	r22, 0x72	; 114
    aefe:	75 e2       	ldi	r23, 0x25	; 37
    af00:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    af04:	bc 01       	movw	r22, r24
    af06:	8b e0       	ldi	r24, 0x0B	; 11
    af08:	9a e4       	ldi	r25, 0x4A	; 74
    af0a:	4c e0       	ldi	r20, 0x0C	; 12
    af0c:	50 e0       	ldi	r21, 0x00	; 0
    af0e:	0e 94 a2 5c 	call	0xb944	; 0xb944 <memmove>
            memmove(fileToUpload,temp,12);
    af12:	82 e6       	ldi	r24, 0x62	; 98
    af14:	9c e3       	ldi	r25, 0x3C	; 60
    af16:	6b e0       	ldi	r22, 0x0B	; 11
    af18:	7a e4       	ldi	r23, 0x4A	; 74
    af1a:	4c e0       	ldi	r20, 0x0C	; 12
    af1c:	50 e0       	ldi	r21, 0x00	; 0
    af1e:	0e 94 a2 5c 	call	0xb944	; 0xb944 <memmove>

            uploadHeaderSize = 177;
    af22:	81 eb       	ldi	r24, 0xB1	; 177
    af24:	90 e0       	ldi	r25, 0x00	; 0
    af26:	a0 e0       	ldi	r26, 0x00	; 0
    af28:	b0 e0       	ldi	r27, 0x00	; 0
    af2a:	80 93 e4 33 	sts	0x33E4, r24
    af2e:	90 93 e5 33 	sts	0x33E5, r25
    af32:	a0 93 e6 33 	sts	0x33E6, r26
    af36:	b0 93 e7 33 	sts	0x33E7, r27
            uploadHeaderSize += strlen(user);
    af3a:	20 91 e4 33 	lds	r18, 0x33E4
    af3e:	30 91 e5 33 	lds	r19, 0x33E5
    af42:	40 91 e6 33 	lds	r20, 0x33E6
    af46:	50 91 e7 33 	lds	r21, 0x33E7
    af4a:	f1 01       	movw	r30, r2
    af4c:	01 90       	ld	r0, Z+
    af4e:	00 20       	and	r0, r0
    af50:	e9 f7       	brne	.-6      	; 0xaf4c <main+0x726>
    af52:	cf 01       	movw	r24, r30
    af54:	01 97       	sbiw	r24, 0x01	; 1
    af56:	89 57       	subi	r24, 0x79	; 121
    af58:	9a 44       	sbci	r25, 0x4A	; 74
    af5a:	a0 e0       	ldi	r26, 0x00	; 0
    af5c:	b0 e0       	ldi	r27, 0x00	; 0
    af5e:	82 0f       	add	r24, r18
    af60:	93 1f       	adc	r25, r19
    af62:	a4 1f       	adc	r26, r20
    af64:	b5 1f       	adc	r27, r21
    af66:	80 93 e4 33 	sts	0x33E4, r24
    af6a:	90 93 e5 33 	sts	0x33E5, r25
    af6e:	a0 93 e6 33 	sts	0x33E6, r26
    af72:	b0 93 e7 33 	sts	0x33E7, r27
            uploadHeaderSize += strlen(fileToUpload);
    af76:	20 91 e4 33 	lds	r18, 0x33E4
    af7a:	30 91 e5 33 	lds	r19, 0x33E5
    af7e:	40 91 e6 33 	lds	r20, 0x33E6
    af82:	50 91 e7 33 	lds	r21, 0x33E7
    af86:	a2 e6       	ldi	r26, 0x62	; 98
    af88:	bc e3       	ldi	r27, 0x3C	; 60
    af8a:	0d 90       	ld	r0, X+
    af8c:	00 20       	and	r0, r0
    af8e:	e9 f7       	brne	.-6      	; 0xaf8a <main+0x764>
    af90:	cd 01       	movw	r24, r26
    af92:	01 97       	sbiw	r24, 0x01	; 1
    af94:	82 56       	subi	r24, 0x62	; 98
    af96:	9c 43       	sbci	r25, 0x3C	; 60
    af98:	a0 e0       	ldi	r26, 0x00	; 0
    af9a:	b0 e0       	ldi	r27, 0x00	; 0
    af9c:	82 0f       	add	r24, r18
    af9e:	93 1f       	adc	r25, r19
    afa0:	a4 1f       	adc	r26, r20
    afa2:	b5 1f       	adc	r27, r21
    afa4:	80 93 e4 33 	sts	0x33E4, r24
    afa8:	90 93 e5 33 	sts	0x33E5, r25
    afac:	a0 93 e6 33 	sts	0x33E6, r26
    afb0:	b0 93 e7 33 	sts	0x33E7, r27
            uploadHeaderSize += strlen(nickname);
    afb4:	20 91 e4 33 	lds	r18, 0x33E4
    afb8:	30 91 e5 33 	lds	r19, 0x33E5
    afbc:	40 91 e6 33 	lds	r20, 0x33E6
    afc0:	50 91 e7 33 	lds	r21, 0x33E7
    afc4:	e0 e2       	ldi	r30, 0x20	; 32
    afc6:	fc e5       	ldi	r31, 0x5C	; 92
    afc8:	01 90       	ld	r0, Z+
    afca:	00 20       	and	r0, r0
    afcc:	e9 f7       	brne	.-6      	; 0xafc8 <main+0x7a2>
    afce:	cf 01       	movw	r24, r30
    afd0:	01 97       	sbiw	r24, 0x01	; 1
    afd2:	80 52       	subi	r24, 0x20	; 32
    afd4:	9c 45       	sbci	r25, 0x5C	; 92
    afd6:	a0 e0       	ldi	r26, 0x00	; 0
    afd8:	b0 e0       	ldi	r27, 0x00	; 0
    afda:	82 0f       	add	r24, r18
    afdc:	93 1f       	adc	r25, r19
    afde:	a4 1f       	adc	r26, r20
    afe0:	b5 1f       	adc	r27, r21
    afe2:	80 93 e4 33 	sts	0x33E4, r24
    afe6:	90 93 e5 33 	sts	0x33E5, r25
    afea:	a0 93 e6 33 	sts	0x33E6, r26
    afee:	b0 93 e7 33 	sts	0x33E7, r27
            uploadHeaderSize += strlen(ltoa(uploadFileSize,temp,10));
    aff2:	e0 90 e4 33 	lds	r14, 0x33E4
    aff6:	f0 90 e5 33 	lds	r15, 0x33E5
    affa:	00 91 e6 33 	lds	r16, 0x33E6
    affe:	10 91 e7 33 	lds	r17, 0x33E7
    b002:	60 91 e0 33 	lds	r22, 0x33E0
    b006:	70 91 e1 33 	lds	r23, 0x33E1
    b00a:	80 91 e2 33 	lds	r24, 0x33E2
    b00e:	90 91 e3 33 	lds	r25, 0x33E3
    b012:	4b e0       	ldi	r20, 0x0B	; 11
    b014:	5a e4       	ldi	r21, 0x4A	; 74
    b016:	2a e0       	ldi	r18, 0x0A	; 10
    b018:	30 e0       	ldi	r19, 0x00	; 0
    b01a:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    b01e:	fc 01       	movw	r30, r24
    b020:	dc 01       	movw	r26, r24
    b022:	0d 90       	ld	r0, X+
    b024:	00 20       	and	r0, r0
    b026:	e9 f7       	brne	.-6      	; 0xb022 <main+0x7fc>
    b028:	cd 01       	movw	r24, r26
    b02a:	01 97       	sbiw	r24, 0x01	; 1
    b02c:	8e 1b       	sub	r24, r30
    b02e:	9f 0b       	sbc	r25, r31
    b030:	a0 e0       	ldi	r26, 0x00	; 0
    b032:	b0 e0       	ldi	r27, 0x00	; 0
    b034:	8e 0d       	add	r24, r14
    b036:	9f 1d       	adc	r25, r15
    b038:	a0 1f       	adc	r26, r16
    b03a:	b1 1f       	adc	r27, r17
    b03c:	80 93 e4 33 	sts	0x33E4, r24
    b040:	90 93 e5 33 	sts	0x33E5, r25
    b044:	a0 93 e6 33 	sts	0x33E6, r26
    b048:	b0 93 e7 33 	sts	0x33E7, r27
            uploadHeaderSize += uploadFileSize;
    b04c:	20 91 e4 33 	lds	r18, 0x33E4
    b050:	30 91 e5 33 	lds	r19, 0x33E5
    b054:	40 91 e6 33 	lds	r20, 0x33E6
    b058:	50 91 e7 33 	lds	r21, 0x33E7
    b05c:	80 91 e0 33 	lds	r24, 0x33E0
    b060:	90 91 e1 33 	lds	r25, 0x33E1
    b064:	a0 91 e2 33 	lds	r26, 0x33E2
    b068:	b0 91 e3 33 	lds	r27, 0x33E3
    b06c:	82 0f       	add	r24, r18
    b06e:	93 1f       	adc	r25, r19
    b070:	a4 1f       	adc	r26, r20
    b072:	b5 1f       	adc	r27, r21
    b074:	80 93 e4 33 	sts	0x33E4, r24
    b078:	90 93 e5 33 	sts	0x33E5, r25
    b07c:	a0 93 e6 33 	sts	0x33E6, r26
    b080:	b0 93 e7 33 	sts	0x33E7, r27


            if(useWifiForUploading || Debug_TriggerUpload(uploadHeaderSize, 2000)){
    b084:	80 91 6d 33 	lds	r24, 0x336D
    b088:	88 23       	and	r24, r24
    b08a:	79 f4       	brne	.+30     	; 0xb0aa <main+0x884>
    b08c:	60 91 e4 33 	lds	r22, 0x33E4
    b090:	70 91 e5 33 	lds	r23, 0x33E5
    b094:	80 91 e6 33 	lds	r24, 0x33E6
    b098:	90 91 e7 33 	lds	r25, 0x33E7
    b09c:	40 ed       	ldi	r20, 0xD0	; 208
    b09e:	57 e0       	ldi	r21, 0x07	; 7
    b0a0:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <Debug_TriggerUpload>
    b0a4:	88 23       	and	r24, r24
    b0a6:	09 f4       	brne	.+2      	; 0xb0aa <main+0x884>
    b0a8:	18 c2       	rjmp	.+1072   	; 0xb4da <main+0xcb4>
                Debug_SendString("File Size: ",false);
    b0aa:	89 e0       	ldi	r24, 0x09	; 9
    b0ac:	9a e2       	ldi	r25, 0x2A	; 42
    b0ae:	60 e0       	ldi	r22, 0x00	; 0
    b0b0:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                Debug_SendString(ltoa(uploadFileSize,temp,10),true);
    b0b4:	60 91 e0 33 	lds	r22, 0x33E0
    b0b8:	70 91 e1 33 	lds	r23, 0x33E1
    b0bc:	80 91 e2 33 	lds	r24, 0x33E2
    b0c0:	90 91 e3 33 	lds	r25, 0x33E3
    b0c4:	0b e0       	ldi	r16, 0x0B	; 11
    b0c6:	1a e4       	ldi	r17, 0x4A	; 74
    b0c8:	a8 01       	movw	r20, r16
    b0ca:	2a e0       	ldi	r18, 0x0A	; 10
    b0cc:	30 e0       	ldi	r19, 0x00	; 0
    b0ce:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    b0d2:	61 e0       	ldi	r22, 0x01	; 1
    b0d4:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                Debug_SendString("Total Bytes Uploaded: ",false);
    b0d8:	85 e1       	ldi	r24, 0x15	; 21
    b0da:	9a e2       	ldi	r25, 0x2A	; 42
    b0dc:	60 e0       	ldi	r22, 0x00	; 0
    b0de:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                Debug_SendString(ltoa(uploadHeaderSize,temp,10),true);
    b0e2:	60 91 e4 33 	lds	r22, 0x33E4
    b0e6:	70 91 e5 33 	lds	r23, 0x33E5
    b0ea:	80 91 e6 33 	lds	r24, 0x33E6
    b0ee:	90 91 e7 33 	lds	r25, 0x33E7
    b0f2:	a8 01       	movw	r20, r16
    b0f4:	2a e0       	ldi	r18, 0x0A	; 10
    b0f6:	30 e0       	ldi	r19, 0x00	; 0
    b0f8:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <ltoa>
    b0fc:	61 e0       	ldi	r22, 0x01	; 1
    b0fe:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>

                Uploader_SendString("POST /users/",false);                              // 12
    b102:	8c e2       	ldi	r24, 0x2C	; 44
    b104:	9a e2       	ldi	r25, 0x2A	; 42
    b106:	60 e0       	ldi	r22, 0x00	; 0
    b108:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString(user,false);
    b10c:	89 e7       	ldi	r24, 0x79	; 121
    b10e:	9a e4       	ldi	r25, 0x4A	; 74
    b110:	60 e0       	ldi	r22, 0x00	; 0
    b112:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString("/binupload?dev_nickname=",false);                  // 24
    b116:	89 e3       	ldi	r24, 0x39	; 57
    b118:	9a e2       	ldi	r25, 0x2A	; 42
    b11a:	60 e0       	ldi	r22, 0x00	; 0
    b11c:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString(nickname,false);
    b120:	80 e2       	ldi	r24, 0x20	; 32
    b122:	9c e5       	ldi	r25, 0x5C	; 92
    b124:	60 e0       	ldi	r22, 0x00	; 0
    b126:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString("&filename=",false);                                // 10
    b12a:	82 e5       	ldi	r24, 0x52	; 82
    b12c:	9a e2       	ldi	r25, 0x2A	; 42
    b12e:	60 e0       	ldi	r22, 0x00	; 0
    b130:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString(fileToUpload, false);
    b134:	82 e6       	ldi	r24, 0x62	; 98
    b136:	9c e3       	ldi	r25, 0x3C	; 60
    b138:	60 e0       	ldi	r22, 0x00	; 0
    b13a:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString(" HTTP/1.1",true);                                  // 11
    b13e:	8d e5       	ldi	r24, 0x5D	; 93
    b140:	9a e2       	ldi	r25, 0x2A	; 42
    b142:	61 e0       	ldi	r22, 0x01	; 1
    b144:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>

                Uploader_SendString("Host: bodytrack.org",true);                        // 21
    b148:	87 e6       	ldi	r24, 0x67	; 103
    b14a:	9a e2       	ldi	r25, 0x2A	; 42
    b14c:	61 e0       	ldi	r22, 0x01	; 1
    b14e:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString("Content-Type: application/octet-stream",true);     // 40
    b152:	8b e7       	ldi	r24, 0x7B	; 123
    b154:	9a e2       	ldi	r25, 0x2A	; 42
    b156:	61 e0       	ldi	r22, 0x01	; 1
    b158:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendString("Content-Transfer-Encoding: binary",true);          // 35
    b15c:	82 ea       	ldi	r24, 0xA2	; 162
    b15e:	9a e2       	ldi	r25, 0x2A	; 42
    b160:	61 e0       	ldi	r22, 0x01	; 1
    b162:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
    b166:	40 91 e0 33 	lds	r20, 0x33E0
    b16a:	50 91 e1 33 	lds	r21, 0x33E1
    b16e:	60 91 e2 33 	lds	r22, 0x33E2
    b172:	70 91 e3 33 	lds	r23, 0x33E3
    b176:	ed b7       	in	r30, 0x3d	; 61
    b178:	fe b7       	in	r31, 0x3e	; 62
    b17a:	38 97       	sbiw	r30, 0x08	; 8
    b17c:	ed bf       	out	0x3d, r30	; 61
    b17e:	fe bf       	out	0x3e, r31	; 62
    b180:	31 96       	adiw	r30, 0x01	; 1
    b182:	ad b7       	in	r26, 0x3d	; 61
    b184:	be b7       	in	r27, 0x3e	; 62
    b186:	11 96       	adiw	r26, 0x01	; 1
    b188:	0d 93       	st	X+, r16
    b18a:	1c 93       	st	X, r17
    b18c:	12 97       	sbiw	r26, 0x02	; 2
    b18e:	24 ec       	ldi	r18, 0xC4	; 196
    b190:	3a e2       	ldi	r19, 0x2A	; 42
    b192:	22 83       	std	Z+2, r18	; 0x02
    b194:	33 83       	std	Z+3, r19	; 0x03
    b196:	44 83       	std	Z+4, r20	; 0x04
    b198:	55 83       	std	Z+5, r21	; 0x05
    b19a:	66 83       	std	Z+6, r22	; 0x06
    b19c:	77 83       	std	Z+7, r23	; 0x07
    b19e:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
                Uploader_SendString(temp,true);
    b1a2:	6d b7       	in	r22, 0x3d	; 61
    b1a4:	7e b7       	in	r23, 0x3e	; 62
    b1a6:	68 5f       	subi	r22, 0xF8	; 248
    b1a8:	7f 4f       	sbci	r23, 0xFF	; 255
    b1aa:	6d bf       	out	0x3d, r22	; 61
    b1ac:	7e bf       	out	0x3e, r23	; 62
    b1ae:	c8 01       	movw	r24, r16
    b1b0:	61 e0       	ldi	r22, 0x01	; 1
    b1b2:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <Uploader_SendString>
                Uploader_SendByte(0x0D);                                                // 1
    b1b6:	8d e0       	ldi	r24, 0x0D	; 13
    b1b8:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
                Uploader_SendByte(0x0A);                                                // 1
    b1bc:	8a e0       	ldi	r24, 0x0A	; 10
    b1be:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
    b1c2:	88 24       	eor	r8, r8
    b1c4:	99 24       	eor	r9, r9
    b1c6:	54 01       	movw	r10, r8
    b1c8:	cc 24       	eor	r12, r12
    b1ca:	dd 24       	eor	r13, r13
    b1cc:	76 01       	movw	r14, r12

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;
    b1ce:	55 24       	eor	r5, r5
    b1d0:	53 94       	inc	r5
    b1d2:	34 c0       	rjmp	.+104    	; 0xb23c <main+0xa16>
                Uploader_SendString(temp,true);
                Uploader_SendByte(0x0D);                                                // 1
                Uploader_SendByte(0x0A);                                                // 1

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                    uploadFileBufferFull = false;
    b1d4:	10 92 db 33 	sts	0x33DB, r1
                    okToFillUploadFileBuffer = true;
    b1d8:	50 92 da 33 	sts	0x33DA, r5

                    uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    b1dc:	20 91 e8 33 	lds	r18, 0x33E8
    b1e0:	30 91 e9 33 	lds	r19, 0x33E9
    b1e4:	40 91 ea 33 	lds	r20, 0x33EA
    b1e8:	50 91 eb 33 	lds	r21, 0x33EB
    b1ec:	c7 01       	movw	r24, r14
    b1ee:	b6 01       	movw	r22, r12
    b1f0:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    b1f4:	20 93 c9 33 	sts	0x33C9, r18
                    while(!uploadFileBufferFull);
    b1f8:	80 91 db 33 	lds	r24, 0x33DB
    b1fc:	88 23       	and	r24, r24
    b1fe:	e1 f3       	breq	.-8      	; 0xb1f8 <main+0x9d2>
    b200:	02 e7       	ldi	r16, 0x72	; 114
    b202:	18 e3       	ldi	r17, 0x38	; 56
                    for(uint16_t j = 0; j <  uploadChunkSize; j++){
                        Uploader_SendByte(uploadFileBuffer[j]);
    b204:	d8 01       	movw	r26, r16
    b206:	8c 91       	ld	r24, X
    b208:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
                        if(uploadTimedOut){
    b20c:	80 91 88 33 	lds	r24, 0x3388
    b210:	88 23       	and	r24, r24
    b212:	09 f0       	breq	.+2      	; 0xb216 <main+0x9f0>
    b214:	de cb       	rjmp	.-2116   	; 0xa9d2 <main+0x1ac>
                            goto Configure_Wifi;
    b216:	0f 5f       	subi	r16, 0xFF	; 255
    b218:	1f 4f       	sbci	r17, 0xFF	; 255
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;

                    uploadPercentBS = (z*100)/numberOfPacketsToUpload;
                    while(!uploadFileBufferFull);
                    for(uint16_t j = 0; j <  uploadChunkSize; j++){
    b21a:	bc e3       	ldi	r27, 0x3C	; 60
    b21c:	0a 35       	cpi	r16, 0x5A	; 90
    b21e:	1b 07       	cpc	r17, r27
    b220:	89 f7       	brne	.-30     	; 0xb204 <main+0x9de>
                sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
                Uploader_SendString(temp,true);
                Uploader_SendByte(0x0D);                                                // 1
                Uploader_SendByte(0x0A);                                                // 1

                for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    b222:	08 94       	sec
    b224:	81 1c       	adc	r8, r1
    b226:	91 1c       	adc	r9, r1
    b228:	a1 1c       	adc	r10, r1
    b22a:	b1 1c       	adc	r11, r1
    b22c:	64 e6       	ldi	r22, 0x64	; 100
    b22e:	70 e0       	ldi	r23, 0x00	; 0
    b230:	80 e0       	ldi	r24, 0x00	; 0
    b232:	90 e0       	ldi	r25, 0x00	; 0
    b234:	c6 0e       	add	r12, r22
    b236:	d7 1e       	adc	r13, r23
    b238:	e8 1e       	adc	r14, r24
    b23a:	f9 1e       	adc	r15, r25
    b23c:	80 91 e8 33 	lds	r24, 0x33E8
    b240:	90 91 e9 33 	lds	r25, 0x33E9
    b244:	a0 91 ea 33 	lds	r26, 0x33EA
    b248:	b0 91 eb 33 	lds	r27, 0x33EB
    b24c:	88 16       	cp	r8, r24
    b24e:	99 06       	cpc	r9, r25
    b250:	aa 06       	cpc	r10, r26
    b252:	bb 06       	cpc	r11, r27
    b254:	08 f4       	brcc	.+2      	; 0xb258 <main+0xa32>
    b256:	be cf       	rjmp	.-132    	; 0xb1d4 <main+0x9ae>
                            goto Configure_Wifi;
                        }
                    }
                }

                uploadFileBufferFull = false;
    b258:	10 92 db 33 	sts	0x33DB, r1
                okToFillUploadFileBuffer = true;
    b25c:	81 e0       	ldi	r24, 0x01	; 1
    b25e:	80 93 da 33 	sts	0x33DA, r24
                while(!uploadFileBufferFull);
    b262:	80 91 db 33 	lds	r24, 0x33DB
    b266:	88 23       	and	r24, r24
    b268:	e1 f3       	breq	.-8      	; 0xb262 <main+0xa3c>
    b26a:	b2 e7       	ldi	r27, 0x72	; 114
    b26c:	cb 2e       	mov	r12, r27
    b26e:	b8 e3       	ldi	r27, 0x38	; 56
    b270:	db 2e       	mov	r13, r27
    b272:	ee 24       	eor	r14, r14
    b274:	ff 24       	eor	r15, r15
    b276:	87 01       	movw	r16, r14
    b278:	0f c0       	rjmp	.+30     	; 0xb298 <main+0xa72>

                for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
                    Uploader_SendByte(uploadFileBuffer[j]);
    b27a:	d6 01       	movw	r26, r12
    b27c:	8d 91       	ld	r24, X+
    b27e:	6d 01       	movw	r12, r26
    b280:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
    b284:	08 94       	sec
    b286:	e1 1c       	adc	r14, r1
    b288:	f1 1c       	adc	r15, r1
    b28a:	01 1d       	adc	r16, r1
    b28c:	11 1d       	adc	r17, r1
                    if(uploadTimedOut){
    b28e:	80 91 88 33 	lds	r24, 0x3388
    b292:	88 23       	and	r24, r24
    b294:	09 f0       	breq	.+2      	; 0xb298 <main+0xa72>
    b296:	9d cb       	rjmp	.-2246   	; 0xa9d2 <main+0x1ac>

                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;
                while(!uploadFileBufferFull);

                for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    b298:	80 91 ec 33 	lds	r24, 0x33EC
    b29c:	90 91 ed 33 	lds	r25, 0x33ED
    b2a0:	a0 91 ee 33 	lds	r26, 0x33EE
    b2a4:	b0 91 ef 33 	lds	r27, 0x33EF
    b2a8:	e8 16       	cp	r14, r24
    b2aa:	f9 06       	cpc	r15, r25
    b2ac:	0a 07       	cpc	r16, r26
    b2ae:	1b 07       	cpc	r17, r27
    b2b0:	20 f3       	brcs	.-56     	; 0xb27a <main+0xa54>
                    if(uploadTimedOut){
                        goto Configure_Wifi;
                    }
                }

                Uploader_SendByte(0x0D);                                                // 4
    b2b2:	8d e0       	ldi	r24, 0x0D	; 13
    b2b4:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2b8:	8a e0       	ldi	r24, 0x0A	; 10
    b2ba:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
                Uploader_SendByte(0x0D);
    b2be:	8d e0       	ldi	r24, 0x0D	; 13
    b2c0:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
                Uploader_SendByte(0x0A);
    b2c4:	8a e0       	ldi	r24, 0x0A	; 10
    b2c6:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <Uploader_SendByte>
                //for(uint32_t j = 0; j< 3000000; j++){
                //    Uploader_SendByte(0);
                    //uploadPercentBS = (j/30000);
                //}

                uploadPercentBS = 100;
    b2ca:	84 e6       	ldi	r24, 0x64	; 100
    b2cc:	80 93 c9 33 	sts	0x33C9, r24
    b2d0:	80 e1       	ldi	r24, 0x10	; 16
    b2d2:	97 e2       	ldi	r25, 0x27	; 39
    b2d4:	f3 01       	movw	r30, r6
    b2d6:	31 97       	sbiw	r30, 0x01	; 1
    b2d8:	f1 f7       	brne	.-4      	; 0xb2d6 <main+0xab0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b2da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b2dc:	d9 f7       	brne	.-10     	; 0xb2d4 <main+0xaae>
                _delay_ms(1000);

              //Wait_For_Close:
                httpResponseReceived = false;
    b2de:	10 92 f7 33 	sts	0x33F7, r1
                connectionClosed = false;
    b2e2:	10 92 f8 33 	sts	0x33F8, r1
                if(useWifiForUploading){
    b2e6:	80 91 6d 33 	lds	r24, 0x336D
    b2ea:	88 23       	and	r24, r24
    b2ec:	29 f0       	breq	.+10     	; 0xb2f8 <main+0xad2>
                    Debug_SendString("Wait for connection to close",true);
    b2ee:	88 ed       	ldi	r24, 0xD8	; 216
    b2f0:	9a e2       	ldi	r25, 0x2A	; 42
    b2f2:	61 e0       	ldi	r22, 0x01	; 1
    b2f4:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                }

                httpResponse[0] = 0;
    b2f8:	10 92 ca 53 	sts	0x53CA, r1
                connectionTimeoutTimer = 0;
    b2fc:	10 92 f9 33 	sts	0x33F9, r1
    b300:	10 92 fa 33 	sts	0x33FA, r1
    b304:	10 92 fb 33 	sts	0x33FB, r1
    b308:	10 92 fc 33 	sts	0x33FC, r1
                byteReceived = 0;
    b30c:	10 92 00 4b 	sts	0x4B00, r1
    b310:	a6 e6       	ldi	r26, 0x66	; 102
    b312:	ea 2e       	mov	r14, r26
    b314:	ae e0       	ldi	r26, 0x0E	; 14
    b316:	fa 2e       	mov	r15, r26
    b318:	db c0       	rjmp	.+438    	; 0xb4d0 <main+0xcaa>
                while(!connectionClosed){
                    if(Uploader_CharReadyToRead()){
    b31a:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <Uploader_CharReadyToRead>
    b31e:	88 23       	and	r24, r24
    b320:	29 f0       	breq	.+10     	; 0xb32c <main+0xb06>
                        byteReceived = Uploader_GetByte(false);
    b322:	80 e0       	ldi	r24, 0x00	; 0
    b324:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b328:	80 93 00 4b 	sts	0x4B00, r24
                    }
                    if(byteReceived == '*'){
    b32c:	80 91 00 4b 	lds	r24, 0x4B00
    b330:	8a 32       	cpi	r24, 0x2A	; 42
    b332:	21 f5       	brne	.+72     	; 0xb37c <main+0xb56>
                        byteReceived = Uploader_GetByte(true);
    b334:	81 e0       	ldi	r24, 0x01	; 1
    b336:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b33a:	80 93 00 4b 	sts	0x4B00, r24
                        if(byteReceived == 'C'){
    b33e:	83 34       	cpi	r24, 0x43	; 67
    b340:	09 f0       	breq	.+2      	; 0xb344 <main+0xb1e>
    b342:	a2 c0       	rjmp	.+324    	; 0xb488 <main+0xc62>
                            byteReceived = Uploader_GetByte(true);
    b344:	81 e0       	ldi	r24, 0x01	; 1
    b346:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b34a:	80 93 00 4b 	sts	0x4B00, r24
                            if(byteReceived == 'L'){
    b34e:	8c 34       	cpi	r24, 0x4C	; 76
    b350:	09 f0       	breq	.+2      	; 0xb354 <main+0xb2e>
    b352:	9a c0       	rjmp	.+308    	; 0xb488 <main+0xc62>
                                byteReceived = Uploader_GetByte(true);
    b354:	81 e0       	ldi	r24, 0x01	; 1
    b356:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b35a:	80 93 00 4b 	sts	0x4B00, r24
                                if(byteReceived == 'O'){
    b35e:	8f 34       	cpi	r24, 0x4F	; 79
    b360:	09 f0       	breq	.+2      	; 0xb364 <main+0xb3e>
    b362:	92 c0       	rjmp	.+292    	; 0xb488 <main+0xc62>
                                    byteReceived = Uploader_GetByte(true);
    b364:	81 e0       	ldi	r24, 0x01	; 1
    b366:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b36a:	80 93 00 4b 	sts	0x4B00, r24
                                    if(byteReceived == 'S'){
    b36e:	83 35       	cpi	r24, 0x53	; 83
    b370:	09 f0       	breq	.+2      	; 0xb374 <main+0xb4e>
    b372:	8a c0       	rjmp	.+276    	; 0xb488 <main+0xc62>
                                        connectionClosed = true;
    b374:	81 e0       	ldi	r24, 0x01	; 1
    b376:	80 93 f8 33 	sts	0x33F8, r24
    b37a:	af c0       	rjmp	.+350    	; 0xb4da <main+0xcb4>
                                    }
                                }
                            }
                        }

                    } else if(byteReceived == 'H'){
    b37c:	88 34       	cpi	r24, 0x48	; 72
    b37e:	09 f0       	breq	.+2      	; 0xb382 <main+0xb5c>
    b380:	83 c0       	rjmp	.+262    	; 0xb488 <main+0xc62>
                        byteReceived = Uploader_GetByte(true);
    b382:	81 e0       	ldi	r24, 0x01	; 1
    b384:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b388:	80 93 00 4b 	sts	0x4B00, r24
                        if(byteReceived == 'T'){
    b38c:	84 35       	cpi	r24, 0x54	; 84
    b38e:	09 f0       	breq	.+2      	; 0xb392 <main+0xb6c>
    b390:	7b c0       	rjmp	.+246    	; 0xb488 <main+0xc62>
                            byteReceived = Uploader_GetByte(true);
    b392:	81 e0       	ldi	r24, 0x01	; 1
    b394:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b398:	80 93 00 4b 	sts	0x4B00, r24
                            if(byteReceived == 'T'){
    b39c:	84 35       	cpi	r24, 0x54	; 84
    b39e:	09 f0       	breq	.+2      	; 0xb3a2 <main+0xb7c>
    b3a0:	73 c0       	rjmp	.+230    	; 0xb488 <main+0xc62>
                                byteReceived = Uploader_GetByte(true);
    b3a2:	81 e0       	ldi	r24, 0x01	; 1
    b3a4:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b3a8:	80 93 00 4b 	sts	0x4B00, r24
                                if(byteReceived == 'P'){
    b3ac:	80 35       	cpi	r24, 0x50	; 80
    b3ae:	09 f0       	breq	.+2      	; 0xb3b2 <main+0xb8c>
    b3b0:	6b c0       	rjmp	.+214    	; 0xb488 <main+0xc62>
                                    httpResponseReceived = true;
    b3b2:	81 e0       	ldi	r24, 0x01	; 1
    b3b4:	80 93 f7 33 	sts	0x33F7, r24
    b3b8:	80 e1       	ldi	r24, 0x10	; 16
    b3ba:	97 e2       	ldi	r25, 0x27	; 39
    b3bc:	f3 01       	movw	r30, r6
    b3be:	31 97       	sbiw	r30, 0x01	; 1
    b3c0:	f1 f7       	brne	.-4      	; 0xb3be <main+0xb98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3c4:	d9 f7       	brne	.-10     	; 0xb3bc <main+0xb96>
                                    _delay_ms(1000);
                                    tempStringFiller = 0;
    b3c6:	10 92 bc 33 	sts	0x33BC, r1
    b3ca:	12 c0       	rjmp	.+36     	; 0xb3f0 <main+0xbca>
                                    while(Uploader_CharReadyToRead()){
                                        temp[tempStringFiller] = Uploader_GetByte(false);
    b3cc:	80 91 bc 33 	lds	r24, 0x33BC
    b3d0:	08 2f       	mov	r16, r24
    b3d2:	10 e0       	ldi	r17, 0x00	; 0
    b3d4:	80 e0       	ldi	r24, 0x00	; 0
    b3d6:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b3da:	05 5f       	subi	r16, 0xF5	; 245
    b3dc:	15 4b       	sbci	r17, 0xB5	; 181
    b3de:	f8 01       	movw	r30, r16
    b3e0:	80 83       	st	Z, r24
                                        tempStringFiller++;
    b3e2:	80 91 bc 33 	lds	r24, 0x33BC
    b3e6:	8f 5f       	subi	r24, 0xFF	; 255
    b3e8:	80 93 bc 33 	sts	0x33BC, r24
                                        if(tempStringFiller == 8){
    b3ec:	88 30       	cpi	r24, 0x08	; 8
    b3ee:	21 f0       	breq	.+8      	; 0xb3f8 <main+0xbd2>
                                byteReceived = Uploader_GetByte(true);
                                if(byteReceived == 'P'){
                                    httpResponseReceived = true;
                                    _delay_ms(1000);
                                    tempStringFiller = 0;
                                    while(Uploader_CharReadyToRead()){
    b3f0:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <Uploader_CharReadyToRead>
    b3f4:	88 23       	and	r24, r24
    b3f6:	51 f7       	brne	.-44     	; 0xb3cc <main+0xba6>
                                        tempStringFiller++;
                                        if(tempStringFiller == 8){
                                            break;
                                        }
                                    }
                                    temp[tempStringFiller] = 0;
    b3f8:	e0 91 bc 33 	lds	r30, 0x33BC
    b3fc:	f0 e0       	ldi	r31, 0x00	; 0
    b3fe:	e5 5f       	subi	r30, 0xF5	; 245
    b400:	f5 4b       	sbci	r31, 0xB5	; 181
    b402:	10 82       	st	Z, r1
                                    memcpy(httpResponse,temp+5,3);
    b404:	aa ec       	ldi	r26, 0xCA	; 202
    b406:	b3 e5       	ldi	r27, 0x53	; 83
    b408:	e0 e1       	ldi	r30, 0x10	; 16
    b40a:	fa e4       	ldi	r31, 0x4A	; 74
    b40c:	83 e0       	ldi	r24, 0x03	; 3
    b40e:	01 90       	ld	r0, Z+
    b410:	0d 92       	st	X+, r0
    b412:	81 50       	subi	r24, 0x01	; 1
    b414:	e1 f7       	brne	.-8      	; 0xb40e <main+0xbe8>
                                    lengthOfHttpResponse = 0;
    b416:	10 92 f5 33 	sts	0x33F5, r1
    b41a:	10 92 f6 33 	sts	0x33F6, r1
    b41e:	80 e5       	ldi	r24, 0x50	; 80
    b420:	93 ec       	ldi	r25, 0xC3	; 195
    b422:	f3 01       	movw	r30, r6
    b424:	31 97       	sbiw	r30, 0x01	; 1
    b426:	f1 f7       	brne	.-4      	; 0xb424 <main+0xbfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b428:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b42a:	d9 f7       	brne	.-10     	; 0xb422 <main+0xbfc>
    b42c:	17 c0       	rjmp	.+46     	; 0xb45c <main+0xc36>
                                    _delay_ms(5000);
                                    while(Uploader_CharReadyToRead()){
                                        uploadFileBuffer[lengthOfHttpResponse] = Uploader_GetByte(false);
    b42e:	00 91 f5 33 	lds	r16, 0x33F5
    b432:	10 91 f6 33 	lds	r17, 0x33F6
    b436:	80 e0       	ldi	r24, 0x00	; 0
    b438:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <Uploader_GetByte>
    b43c:	0e 58       	subi	r16, 0x8E	; 142
    b43e:	17 4c       	sbci	r17, 0xC7	; 199
    b440:	d8 01       	movw	r26, r16
    b442:	8c 93       	st	X, r24
                                        lengthOfHttpResponse++;
    b444:	80 91 f5 33 	lds	r24, 0x33F5
    b448:	90 91 f6 33 	lds	r25, 0x33F6
    b44c:	01 96       	adiw	r24, 0x01	; 1
    b44e:	80 93 f5 33 	sts	0x33F5, r24
    b452:	90 93 f6 33 	sts	0x33F6, r25
                                        if(lengthOfHttpResponse > 999){
    b456:	88 5e       	subi	r24, 0xE8	; 232
    b458:	93 40       	sbci	r25, 0x03	; 3
    b45a:	20 f4       	brcc	.+8      	; 0xb464 <main+0xc3e>
                                    }
                                    temp[tempStringFiller] = 0;
                                    memcpy(httpResponse,temp+5,3);
                                    lengthOfHttpResponse = 0;
                                    _delay_ms(5000);
                                    while(Uploader_CharReadyToRead()){
    b45c:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <Uploader_CharReadyToRead>
    b460:	88 23       	and	r24, r24
    b462:	29 f7       	brne	.-54     	; 0xb42e <main+0xc08>
                                        lengthOfHttpResponse++;
                                        if(lengthOfHttpResponse > 999){
                                            break;
                                        }
                                    }
                                    uploadFileBuffer[lengthOfHttpResponse] = 0;
    b464:	e0 91 f5 33 	lds	r30, 0x33F5
    b468:	f0 91 f6 33 	lds	r31, 0x33F6
    b46c:	ee 58       	subi	r30, 0x8E	; 142
    b46e:	f7 4c       	sbci	r31, 0xC7	; 199
    b470:	10 82       	st	Z, r1
                                    if(strstr(uploadFileBuffer,"*CLOS") != 0){
    b472:	82 e7       	ldi	r24, 0x72	; 114
    b474:	98 e3       	ldi	r25, 0x38	; 56
    b476:	65 ef       	ldi	r22, 0xF5	; 245
    b478:	7a e2       	ldi	r23, 0x2A	; 42
    b47a:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    b47e:	00 97       	sbiw	r24, 0x00	; 0
    b480:	19 f0       	breq	.+6      	; 0xb488 <main+0xc62>
                                        connectionClosed = true;
    b482:	81 e0       	ldi	r24, 0x01	; 1
    b484:	80 93 f8 33 	sts	0x33F8, r24
    b488:	c7 01       	movw	r24, r14
    b48a:	01 97       	sbiw	r24, 0x01	; 1
    b48c:	f1 f7       	brne	.-4      	; 0xb48a <main+0xc64>
                                }
                            }
                        }
                    }
                    _delay_ms(1);
                    connectionTimeoutTimer++;
    b48e:	80 91 f9 33 	lds	r24, 0x33F9
    b492:	90 91 fa 33 	lds	r25, 0x33FA
    b496:	a0 91 fb 33 	lds	r26, 0x33FB
    b49a:	b0 91 fc 33 	lds	r27, 0x33FC
    b49e:	01 96       	adiw	r24, 0x01	; 1
    b4a0:	a1 1d       	adc	r26, r1
    b4a2:	b1 1d       	adc	r27, r1
    b4a4:	80 93 f9 33 	sts	0x33F9, r24
    b4a8:	90 93 fa 33 	sts	0x33FA, r25
    b4ac:	a0 93 fb 33 	sts	0x33FB, r26
    b4b0:	b0 93 fc 33 	sts	0x33FC, r27
                    if(connectionTimeoutTimer > 120000){
    b4b4:	81 5c       	subi	r24, 0xC1	; 193
    b4b6:	94 4d       	sbci	r25, 0xD4	; 212
    b4b8:	a1 40       	sbci	r26, 0x01	; 1
    b4ba:	b0 40       	sbci	r27, 0x00	; 0
    b4bc:	48 f0       	brcs	.+18     	; 0xb4d0 <main+0xcaa>
                        connectionTimeoutTimer = 0;
    b4be:	10 92 f9 33 	sts	0x33F9, r1
    b4c2:	10 92 fa 33 	sts	0x33FA, r1
    b4c6:	10 92 fb 33 	sts	0x33FB, r1
    b4ca:	10 92 fc 33 	sts	0x33FC, r1
    b4ce:	05 c0       	rjmp	.+10     	; 0xb4da <main+0xcb4>
                }

                httpResponse[0] = 0;
                connectionTimeoutTimer = 0;
                byteReceived = 0;
                while(!connectionClosed){
    b4d0:	80 91 f8 33 	lds	r24, 0x33F8
    b4d4:	88 23       	and	r24, r24
    b4d6:	09 f4       	brne	.+2      	; 0xb4da <main+0xcb4>
    b4d8:	20 cf       	rjmp	.-448    	; 0xb31a <main+0xaf4>
                }
            }



            if(useWifiForUploading){
    b4da:	80 91 6d 33 	lds	r24, 0x336D
    b4de:	88 23       	and	r24, r24
    b4e0:	29 f0       	breq	.+10     	; 0xb4ec <main+0xcc6>
               Debug_SendString("Connection Closed",true);
    b4e2:	8b ef       	ldi	r24, 0xFB	; 251
    b4e4:	9a e2       	ldi	r25, 0x2A	; 42
    b4e6:	61 e0       	ldi	r22, 0x01	; 1
    b4e8:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
            }

            uploadTimeStop = UNIX_time;
    b4ec:	80 91 9c 33 	lds	r24, 0x339C
    b4f0:	90 91 9d 33 	lds	r25, 0x339D
    b4f4:	a0 91 9e 33 	lds	r26, 0x339E
    b4f8:	b0 91 9f 33 	lds	r27, 0x339F
    b4fc:	80 93 db 3c 	sts	0x3CDB, r24
    b500:	90 93 dc 3c 	sts	0x3CDC, r25
    b504:	a0 93 dd 3c 	sts	0x3CDD, r26
    b508:	b0 93 de 3c 	sts	0x3CDE, r27


            if((httpResponseReceived) & (strstr(httpResponse,"200") != 0)){
    b50c:	10 91 f7 33 	lds	r17, 0x33F7
    b510:	8a ec       	ldi	r24, 0xCA	; 202
    b512:	93 e5       	ldi	r25, 0x53	; 83
    b514:	6d e0       	ldi	r22, 0x0D	; 13
    b516:	7b e2       	ldi	r23, 0x2B	; 43
    b518:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    b51c:	40 e0       	ldi	r20, 0x00	; 0
    b51e:	50 e0       	ldi	r21, 0x00	; 0
    b520:	00 97       	sbiw	r24, 0x00	; 0
    b522:	11 f0       	breq	.+4      	; 0xb528 <main+0xd02>
    b524:	41 e0       	ldi	r20, 0x01	; 1
    b526:	50 e0       	ldi	r21, 0x00	; 0
    b528:	81 2f       	mov	r24, r17
    b52a:	90 e0       	ldi	r25, 0x00	; 0
    b52c:	48 23       	and	r20, r24
    b52e:	59 23       	and	r21, r25
    b530:	45 2b       	or	r20, r21
    b532:	09 f4       	brne	.+2      	; 0xb536 <main+0xd10>
    b534:	f3 c0       	rjmp	.+486    	; 0xb71c <main+0xef6>
                memcpy(successfulBinaryRecordsString,strtok((strstr(uploadFileBuffer,"\"successful_binrecs\":") + 21),","),5);
    b536:	82 e7       	ldi	r24, 0x72	; 114
    b538:	98 e3       	ldi	r25, 0x38	; 56
    b53a:	61 e1       	ldi	r22, 0x11	; 17
    b53c:	7b e2       	ldi	r23, 0x2B	; 43
    b53e:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    b542:	45 96       	adiw	r24, 0x15	; 21
    b544:	60 e7       	ldi	r22, 0x70	; 112
    b546:	75 e2       	ldi	r23, 0x25	; 37
    b548:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    b54c:	a9 e2       	ldi	r26, 0x29	; 41
    b54e:	bb e4       	ldi	r27, 0x4B	; 75
    b550:	fc 01       	movw	r30, r24
    b552:	85 e0       	ldi	r24, 0x05	; 5
    b554:	01 90       	ld	r0, Z+
    b556:	0d 92       	st	X+, r0
    b558:	81 50       	subi	r24, 0x01	; 1
    b55a:	e1 f7       	brne	.-8      	; 0xb554 <main+0xd2e>
                memcpy(failedBinaryRecordsString    ,strtok((strstr(uploadFileBuffer,"\"failed_binrecs\":") + 17),","),5);
    b55c:	82 e7       	ldi	r24, 0x72	; 114
    b55e:	98 e3       	ldi	r25, 0x38	; 56
    b560:	67 e2       	ldi	r22, 0x27	; 39
    b562:	7b e2       	ldi	r23, 0x2B	; 43
    b564:	0e 94 07 5d 	call	0xba0e	; 0xba0e <strstr>
    b568:	41 96       	adiw	r24, 0x11	; 17
    b56a:	60 e7       	ldi	r22, 0x70	; 112
    b56c:	75 e2       	ldi	r23, 0x25	; 37
    b56e:	0e 94 9d 5c 	call	0xb93a	; 0xb93a <strtok>
    b572:	a2 e5       	ldi	r26, 0x52	; 82
    b574:	bc e5       	ldi	r27, 0x5C	; 92
    b576:	fc 01       	movw	r30, r24
    b578:	85 e0       	ldi	r24, 0x05	; 5
    b57a:	01 90       	ld	r0, Z+
    b57c:	0d 92       	st	X+, r0
    b57e:	81 50       	subi	r24, 0x01	; 1
    b580:	e1 f7       	brne	.-8      	; 0xb57a <main+0xd54>
                strcpy(newFileName, fileToUpload);
    b582:	85 e0       	ldi	r24, 0x05	; 5
    b584:	97 e5       	ldi	r25, 0x57	; 87
    b586:	62 e6       	ldi	r22, 0x62	; 98
    b588:	7c e3       	ldi	r23, 0x3C	; 60
    b58a:	0e 94 00 5d 	call	0xba00	; 0xba00 <strcpy>
                strcat(newFileName, "U");
    b58e:	85 e0       	ldi	r24, 0x05	; 5
    b590:	97 e5       	ldi	r25, 0x57	; 87
    b592:	69 e3       	ldi	r22, 0x39	; 57
    b594:	7b e2       	ldi	r23, 0x2B	; 43
    b596:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <strcat>

                if(useWifiForUploading){
    b59a:	80 91 6d 33 	lds	r24, 0x336D
    b59e:	88 23       	and	r24, r24
    b5a0:	09 f4       	brne	.+2      	; 0xb5a4 <main+0xd7e>
    b5a2:	9d c0       	rjmp	.+314    	; 0xb6de <main+0xeb8>
                    Debug_SendString("Got a 200 back",true);
    b5a4:	8b e3       	ldi	r24, 0x3B	; 59
    b5a6:	9b e2       	ldi	r25, 0x2B	; 43
    b5a8:	61 e0       	ldi	r22, 0x01	; 1
    b5aa:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString("Successful: ",false);
    b5ae:	8a e4       	ldi	r24, 0x4A	; 74
    b5b0:	9b e2       	ldi	r25, 0x2B	; 43
    b5b2:	60 e0       	ldi	r22, 0x00	; 0
    b5b4:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString(successfulBinaryRecordsString,true);
    b5b8:	89 e2       	ldi	r24, 0x29	; 41
    b5ba:	9b e4       	ldi	r25, 0x4B	; 75
    b5bc:	61 e0       	ldi	r22, 0x01	; 1
    b5be:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString("Failed: ",false);
    b5c2:	87 e5       	ldi	r24, 0x57	; 87
    b5c4:	9b e2       	ldi	r25, 0x2B	; 43
    b5c6:	60 e0       	ldi	r22, 0x00	; 0
    b5c8:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString(failedBinaryRecordsString,true);
    b5cc:	82 e5       	ldi	r24, 0x52	; 82
    b5ce:	9c e5       	ldi	r25, 0x5C	; 92
    b5d0:	61 e0       	ldi	r22, 0x01	; 1
    b5d2:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    sprintf(temp,"File TX took: %lu secs",uploadTimeStop - uploadTimeStart);
    b5d6:	80 91 db 3c 	lds	r24, 0x3CDB
    b5da:	90 91 dc 3c 	lds	r25, 0x3CDC
    b5de:	a0 91 dd 3c 	lds	r26, 0x3CDD
    b5e2:	b0 91 de 3c 	lds	r27, 0x3CDE
    b5e6:	20 91 7f 3c 	lds	r18, 0x3C7F
    b5ea:	30 91 80 3c 	lds	r19, 0x3C80
    b5ee:	40 91 81 3c 	lds	r20, 0x3C81
    b5f2:	50 91 82 3c 	lds	r21, 0x3C82
    b5f6:	6d b7       	in	r22, 0x3d	; 61
    b5f8:	7e b7       	in	r23, 0x3e	; 62
    b5fa:	68 50       	subi	r22, 0x08	; 8
    b5fc:	70 40       	sbci	r23, 0x00	; 0
    b5fe:	6d bf       	out	0x3d, r22	; 61
    b600:	7e bf       	out	0x3e, r23	; 62
    b602:	0d b7       	in	r16, 0x3d	; 61
    b604:	1e b7       	in	r17, 0x3e	; 62
    b606:	0f 5f       	subi	r16, 0xFF	; 255
    b608:	1f 4f       	sbci	r17, 0xFF	; 255
    b60a:	fb e0       	ldi	r31, 0x0B	; 11
    b60c:	cf 2e       	mov	r12, r31
    b60e:	fa e4       	ldi	r31, 0x4A	; 74
    b610:	df 2e       	mov	r13, r31
    b612:	ed b7       	in	r30, 0x3d	; 61
    b614:	fe b7       	in	r31, 0x3e	; 62
    b616:	c1 82       	std	Z+1, r12	; 0x01
    b618:	d2 82       	std	Z+2, r13	; 0x02
    b61a:	60 e6       	ldi	r22, 0x60	; 96
    b61c:	7b e2       	ldi	r23, 0x2B	; 43
    b61e:	f8 01       	movw	r30, r16
    b620:	62 83       	std	Z+2, r22	; 0x02
    b622:	73 83       	std	Z+3, r23	; 0x03
    b624:	82 1b       	sub	r24, r18
    b626:	93 0b       	sbc	r25, r19
    b628:	a4 0b       	sbc	r26, r20
    b62a:	b5 0b       	sbc	r27, r21
    b62c:	84 83       	std	Z+4, r24	; 0x04
    b62e:	95 83       	std	Z+5, r25	; 0x05
    b630:	a6 83       	std	Z+6, r26	; 0x06
    b632:	b7 83       	std	Z+7, r27	; 0x07
    b634:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
                    Debug_SendString(temp,true);
    b638:	2d b7       	in	r18, 0x3d	; 61
    b63a:	3e b7       	in	r19, 0x3e	; 62
    b63c:	28 5f       	subi	r18, 0xF8	; 248
    b63e:	3f 4f       	sbci	r19, 0xFF	; 255
    b640:	2d bf       	out	0x3d, r18	; 61
    b642:	3e bf       	out	0x3e, r19	; 62
    b644:	c6 01       	movw	r24, r12
    b646:	61 e0       	ldi	r22, 0x01	; 1
    b648:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    sprintf(temp,"TX speed: %lu kbps", uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)));
    b64c:	60 91 e0 33 	lds	r22, 0x33E0
    b650:	70 91 e1 33 	lds	r23, 0x33E1
    b654:	80 91 e2 33 	lds	r24, 0x33E2
    b658:	90 91 e3 33 	lds	r25, 0x33E3
    b65c:	20 91 db 3c 	lds	r18, 0x3CDB
    b660:	30 91 dc 3c 	lds	r19, 0x3CDC
    b664:	40 91 dd 3c 	lds	r20, 0x3CDD
    b668:	50 91 de 3c 	lds	r21, 0x3CDE
    b66c:	e0 90 7f 3c 	lds	r14, 0x3C7F
    b670:	f0 90 80 3c 	lds	r15, 0x3C80
    b674:	00 91 81 3c 	lds	r16, 0x3C81
    b678:	10 91 82 3c 	lds	r17, 0x3C82
    b67c:	ad b7       	in	r26, 0x3d	; 61
    b67e:	be b7       	in	r27, 0x3e	; 62
    b680:	18 97       	sbiw	r26, 0x08	; 8
    b682:	ad bf       	out	0x3d, r26	; 61
    b684:	be bf       	out	0x3e, r27	; 62
    b686:	ad b6       	in	r10, 0x3d	; 61
    b688:	be b6       	in	r11, 0x3e	; 62
    b68a:	08 94       	sec
    b68c:	a1 1c       	adc	r10, r1
    b68e:	b1 1c       	adc	r11, r1
    b690:	11 96       	adiw	r26, 0x01	; 1
    b692:	cd 92       	st	X+, r12
    b694:	dc 92       	st	X, r13
    b696:	12 97       	sbiw	r26, 0x02	; 2
    b698:	a7 e7       	ldi	r26, 0x77	; 119
    b69a:	bb e2       	ldi	r27, 0x2B	; 43
    b69c:	f5 01       	movw	r30, r10
    b69e:	a2 83       	std	Z+2, r26	; 0x02
    b6a0:	b3 83       	std	Z+3, r27	; 0x03
    b6a2:	2e 19       	sub	r18, r14
    b6a4:	3f 09       	sbc	r19, r15
    b6a6:	40 0b       	sbc	r20, r16
    b6a8:	51 0b       	sbc	r21, r17
    b6aa:	e7 e0       	ldi	r30, 0x07	; 7
    b6ac:	22 0f       	add	r18, r18
    b6ae:	33 1f       	adc	r19, r19
    b6b0:	44 1f       	adc	r20, r20
    b6b2:	55 1f       	adc	r21, r21
    b6b4:	ea 95       	dec	r30
    b6b6:	d1 f7       	brne	.-12     	; 0xb6ac <main+0xe86>
    b6b8:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    b6bc:	f5 01       	movw	r30, r10
    b6be:	24 83       	std	Z+4, r18	; 0x04
    b6c0:	35 83       	std	Z+5, r19	; 0x05
    b6c2:	46 83       	std	Z+6, r20	; 0x06
    b6c4:	57 83       	std	Z+7, r21	; 0x07
    b6c6:	0e 94 a3 5d 	call	0xbb46	; 0xbb46 <sprintf>
                    Debug_SendString(temp,true);
    b6ca:	2d b7       	in	r18, 0x3d	; 61
    b6cc:	3e b7       	in	r19, 0x3e	; 62
    b6ce:	28 5f       	subi	r18, 0xF8	; 248
    b6d0:	3f 4f       	sbci	r19, 0xFF	; 255
    b6d2:	2d bf       	out	0x3d, r18	; 61
    b6d4:	3e bf       	out	0x3e, r19	; 62
    b6d6:	c6 01       	movw	r24, r12
    b6d8:	61 e0       	ldi	r22, 0x01	; 1
    b6da:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>

                }
                okToRenameUploadFile = true;
    b6de:	81 e0       	ldi	r24, 0x01	; 1
    b6e0:	80 93 d5 33 	sts	0x33D5, r24
                okToCloseUploadFile = true;                   // flags it close file and to be to be renamed
    b6e4:	80 93 d4 33 	sts	0x33D4, r24
    b6e8:	80 e1       	ldi	r24, 0x10	; 16
    b6ea:	97 e2       	ldi	r25, 0x27	; 39
    b6ec:	f3 01       	movw	r30, r6
    b6ee:	31 97       	sbiw	r30, 0x01	; 1
    b6f0:	f1 f7       	brne	.-4      	; 0xb6ee <main+0xec8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b6f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b6f4:	d9 f7       	brne	.-10     	; 0xb6ec <main+0xec6>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    b6f6:	80 91 d4 33 	lds	r24, 0x33D4
    b6fa:	88 23       	and	r24, r24
    b6fc:	e1 f7       	brne	.-8      	; 0xb6f6 <main+0xed0>
    b6fe:	80 e1       	ldi	r24, 0x10	; 16
    b700:	97 e2       	ldi	r25, 0x27	; 39
    b702:	f3 01       	movw	r30, r6
    b704:	31 97       	sbiw	r30, 0x01	; 1
    b706:	f1 f7       	brne	.-4      	; 0xb704 <main+0xede>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b708:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b70a:	d9 f7       	brne	.-10     	; 0xb702 <main+0xedc>
                _delay_ms(1000);
                okToWriteUploaderLogFile = true;               // adds entry to log file
    b70c:	81 e0       	ldi	r24, 0x01	; 1
    b70e:	80 93 fd 33 	sts	0x33FD, r24
                while(okToWriteUploaderLogFile);
    b712:	80 91 fd 33 	lds	r24, 0x33FD
    b716:	88 23       	and	r24, r24
    b718:	e1 f7       	brne	.-8      	; 0xb712 <main+0xeec>
    b71a:	34 c0       	rjmp	.+104    	; 0xb784 <main+0xf5e>

            } else {
                if(useWifiForUploading){
    b71c:	80 91 6d 33 	lds	r24, 0x336D
    b720:	88 23       	and	r24, r24
    b722:	a1 f0       	breq	.+40     	; 0xb74c <main+0xf26>
                    Debug_SendString("File did not upload",true);
    b724:	8a e8       	ldi	r24, 0x8A	; 138
    b726:	9b e2       	ldi	r25, 0x2B	; 43
    b728:	61 e0       	ldi	r22, 0x01	; 1
    b72a:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString("got: *",false);
    b72e:	8e e9       	ldi	r24, 0x9E	; 158
    b730:	9b e2       	ldi	r25, 0x2B	; 43
    b732:	60 e0       	ldi	r22, 0x00	; 0
    b734:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString(httpResponse,false);
    b738:	8a ec       	ldi	r24, 0xCA	; 202
    b73a:	93 e5       	ldi	r25, 0x53	; 83
    b73c:	60 e0       	ldi	r22, 0x00	; 0
    b73e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                    Debug_SendString("* back",true);
    b742:	85 ea       	ldi	r24, 0xA5	; 165
    b744:	9b e2       	ldi	r25, 0x2B	; 43
    b746:	61 e0       	ldi	r22, 0x01	; 1
    b748:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
                }


			    okToCloseUploadFile = true;                    // flags it close file
    b74c:	81 e0       	ldi	r24, 0x01	; 1
    b74e:	80 93 d4 33 	sts	0x33D4, r24
    b752:	80 e1       	ldi	r24, 0x10	; 16
    b754:	97 e2       	ldi	r25, 0x27	; 39
    b756:	f3 01       	movw	r30, r6
    b758:	31 97       	sbiw	r30, 0x01	; 1
    b75a:	f1 f7       	brne	.-4      	; 0xb758 <main+0xf32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b75c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b75e:	d9 f7       	brne	.-10     	; 0xb756 <main+0xf30>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    b760:	80 91 d4 33 	lds	r24, 0x33D4
    b764:	88 23       	and	r24, r24
    b766:	e1 f7       	brne	.-8      	; 0xb760 <main+0xf3a>
    b768:	80 e1       	ldi	r24, 0x10	; 16
    b76a:	97 e2       	ldi	r25, 0x27	; 39
    b76c:	f3 01       	movw	r30, r6
    b76e:	31 97       	sbiw	r30, 0x01	; 1
    b770:	f1 f7       	brne	.-4      	; 0xb76e <main+0xf48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b772:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b774:	d9 f7       	brne	.-10     	; 0xb76c <main+0xf46>
                _delay_ms(1000);

			    uploadFailed = true;                             // adds error entry to log file
    b776:	81 e0       	ldi	r24, 0x01	; 1
    b778:	80 93 d3 33 	sts	0x33D3, r24
                while(uploadFailed);
    b77c:	80 91 d3 33 	lds	r24, 0x33D3
    b780:	88 23       	and	r24, r24
    b782:	e1 f7       	brne	.-8      	; 0xb77c <main+0xf56>
            }

            if(useWifiForUploading){
    b784:	80 91 6d 33 	lds	r24, 0x336D
    b788:	88 23       	and	r24, r24
    b78a:	51 f0       	breq	.+20     	; 0xb7a0 <main+0xf7a>
              Debug_SendString("Done!", true);
    b78c:	8c ea       	ldi	r24, 0xAC	; 172
    b78e:	9b e2       	ldi	r25, 0x2B	; 43
    b790:	61 e0       	ldi	r22, 0x01	; 1
    b792:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
              Debug_SendString("_____________________________________________", true);
    b796:	8b e3       	ldi	r24, 0x3B	; 59
    b798:	99 e2       	ldi	r25, 0x29	; 41
    b79a:	61 e0       	ldi	r22, 0x01	; 1
    b79c:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <Debug_SendString>
            }

		    uploading = false;
    b7a0:	10 92 d7 33 	sts	0x33D7, r1
			okToUpload = false;
    b7a4:	10 92 d6 33 	sts	0x33D6, r1
    b7a8:	b5 c9       	rjmp	.-3222   	; 0xab14 <main+0x2ee>
    b7aa:	e0 e2       	ldi	r30, 0x20	; 32
    b7ac:	f6 e0       	ldi	r31, 0x06	; 6
    b7ae:	82 e0       	ldi	r24, 0x02	; 2
    b7b0:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b7b2:	81 e0       	ldi	r24, 0x01	; 1
    b7b4:	85 83       	std	Z+5, r24	; 0x05
    b7b6:	20 e1       	ldi	r18, 0x10	; 16
    b7b8:	37 e2       	ldi	r19, 0x27	; 39
    b7ba:	40 e7       	ldi	r20, 0x70	; 112
    b7bc:	51 e0       	ldi	r21, 0x01	; 1
    b7be:	d0 c8       	rjmp	.-3680   	; 0xa960 <main+0x13a>
    while(demoMode);

    Main:
	while(true){
        if(Dpad_CheckButton(Left)){
          Debug_To_Wifi();
    b7c0:	0e 94 20 3f 	call	0x7e40	; 0x7e40 <Debug_To_Wifi>
    b7c4:	ac c9       	rjmp	.-3240   	; 0xab1e <main+0x2f8>
    b7c6:	ff cf       	rjmp	.-2      	; 0xb7c6 <main+0xfa0>

0000b7c8 <__mulsi3>:
    b7c8:	62 9f       	mul	r22, r18
    b7ca:	d0 01       	movw	r26, r0
    b7cc:	73 9f       	mul	r23, r19
    b7ce:	f0 01       	movw	r30, r0
    b7d0:	82 9f       	mul	r24, r18
    b7d2:	e0 0d       	add	r30, r0
    b7d4:	f1 1d       	adc	r31, r1
    b7d6:	64 9f       	mul	r22, r20
    b7d8:	e0 0d       	add	r30, r0
    b7da:	f1 1d       	adc	r31, r1
    b7dc:	92 9f       	mul	r25, r18
    b7de:	f0 0d       	add	r31, r0
    b7e0:	83 9f       	mul	r24, r19
    b7e2:	f0 0d       	add	r31, r0
    b7e4:	74 9f       	mul	r23, r20
    b7e6:	f0 0d       	add	r31, r0
    b7e8:	65 9f       	mul	r22, r21
    b7ea:	f0 0d       	add	r31, r0
    b7ec:	99 27       	eor	r25, r25
    b7ee:	72 9f       	mul	r23, r18
    b7f0:	b0 0d       	add	r27, r0
    b7f2:	e1 1d       	adc	r30, r1
    b7f4:	f9 1f       	adc	r31, r25
    b7f6:	63 9f       	mul	r22, r19
    b7f8:	b0 0d       	add	r27, r0
    b7fa:	e1 1d       	adc	r30, r1
    b7fc:	f9 1f       	adc	r31, r25
    b7fe:	bd 01       	movw	r22, r26
    b800:	cf 01       	movw	r24, r30
    b802:	11 24       	eor	r1, r1
    b804:	08 95       	ret

0000b806 <__udivmodqi4>:
    b806:	99 1b       	sub	r25, r25
    b808:	79 e0       	ldi	r23, 0x09	; 9
    b80a:	04 c0       	rjmp	.+8      	; 0xb814 <__udivmodqi4_ep>

0000b80c <__udivmodqi4_loop>:
    b80c:	99 1f       	adc	r25, r25
    b80e:	96 17       	cp	r25, r22
    b810:	08 f0       	brcs	.+2      	; 0xb814 <__udivmodqi4_ep>
    b812:	96 1b       	sub	r25, r22

0000b814 <__udivmodqi4_ep>:
    b814:	88 1f       	adc	r24, r24
    b816:	7a 95       	dec	r23
    b818:	c9 f7       	brne	.-14     	; 0xb80c <__udivmodqi4_loop>
    b81a:	80 95       	com	r24
    b81c:	08 95       	ret

0000b81e <__udivmodhi4>:
    b81e:	aa 1b       	sub	r26, r26
    b820:	bb 1b       	sub	r27, r27
    b822:	51 e1       	ldi	r21, 0x11	; 17
    b824:	07 c0       	rjmp	.+14     	; 0xb834 <__udivmodhi4_ep>

0000b826 <__udivmodhi4_loop>:
    b826:	aa 1f       	adc	r26, r26
    b828:	bb 1f       	adc	r27, r27
    b82a:	a6 17       	cp	r26, r22
    b82c:	b7 07       	cpc	r27, r23
    b82e:	10 f0       	brcs	.+4      	; 0xb834 <__udivmodhi4_ep>
    b830:	a6 1b       	sub	r26, r22
    b832:	b7 0b       	sbc	r27, r23

0000b834 <__udivmodhi4_ep>:
    b834:	88 1f       	adc	r24, r24
    b836:	99 1f       	adc	r25, r25
    b838:	5a 95       	dec	r21
    b83a:	a9 f7       	brne	.-22     	; 0xb826 <__udivmodhi4_loop>
    b83c:	80 95       	com	r24
    b83e:	90 95       	com	r25
    b840:	bc 01       	movw	r22, r24
    b842:	cd 01       	movw	r24, r26
    b844:	08 95       	ret

0000b846 <__divmodhi4>:
    b846:	97 fb       	bst	r25, 7
    b848:	09 2e       	mov	r0, r25
    b84a:	07 26       	eor	r0, r23
    b84c:	0a d0       	rcall	.+20     	; 0xb862 <__divmodhi4_neg1>
    b84e:	77 fd       	sbrc	r23, 7
    b850:	04 d0       	rcall	.+8      	; 0xb85a <__divmodhi4_neg2>
    b852:	e5 df       	rcall	.-54     	; 0xb81e <__udivmodhi4>
    b854:	06 d0       	rcall	.+12     	; 0xb862 <__divmodhi4_neg1>
    b856:	00 20       	and	r0, r0
    b858:	1a f4       	brpl	.+6      	; 0xb860 <__divmodhi4_exit>

0000b85a <__divmodhi4_neg2>:
    b85a:	70 95       	com	r23
    b85c:	61 95       	neg	r22
    b85e:	7f 4f       	sbci	r23, 0xFF	; 255

0000b860 <__divmodhi4_exit>:
    b860:	08 95       	ret

0000b862 <__divmodhi4_neg1>:
    b862:	f6 f7       	brtc	.-4      	; 0xb860 <__divmodhi4_exit>
    b864:	90 95       	com	r25
    b866:	81 95       	neg	r24
    b868:	9f 4f       	sbci	r25, 0xFF	; 255
    b86a:	08 95       	ret

0000b86c <__udivmodsi4>:
    b86c:	a1 e2       	ldi	r26, 0x21	; 33
    b86e:	1a 2e       	mov	r1, r26
    b870:	aa 1b       	sub	r26, r26
    b872:	bb 1b       	sub	r27, r27
    b874:	fd 01       	movw	r30, r26
    b876:	0d c0       	rjmp	.+26     	; 0xb892 <__udivmodsi4_ep>

0000b878 <__udivmodsi4_loop>:
    b878:	aa 1f       	adc	r26, r26
    b87a:	bb 1f       	adc	r27, r27
    b87c:	ee 1f       	adc	r30, r30
    b87e:	ff 1f       	adc	r31, r31
    b880:	a2 17       	cp	r26, r18
    b882:	b3 07       	cpc	r27, r19
    b884:	e4 07       	cpc	r30, r20
    b886:	f5 07       	cpc	r31, r21
    b888:	20 f0       	brcs	.+8      	; 0xb892 <__udivmodsi4_ep>
    b88a:	a2 1b       	sub	r26, r18
    b88c:	b3 0b       	sbc	r27, r19
    b88e:	e4 0b       	sbc	r30, r20
    b890:	f5 0b       	sbc	r31, r21

0000b892 <__udivmodsi4_ep>:
    b892:	66 1f       	adc	r22, r22
    b894:	77 1f       	adc	r23, r23
    b896:	88 1f       	adc	r24, r24
    b898:	99 1f       	adc	r25, r25
    b89a:	1a 94       	dec	r1
    b89c:	69 f7       	brne	.-38     	; 0xb878 <__udivmodsi4_loop>
    b89e:	60 95       	com	r22
    b8a0:	70 95       	com	r23
    b8a2:	80 95       	com	r24
    b8a4:	90 95       	com	r25
    b8a6:	9b 01       	movw	r18, r22
    b8a8:	ac 01       	movw	r20, r24
    b8aa:	bd 01       	movw	r22, r26
    b8ac:	cf 01       	movw	r24, r30
    b8ae:	08 95       	ret

0000b8b0 <atoi>:
    b8b0:	fc 01       	movw	r30, r24
    b8b2:	88 27       	eor	r24, r24
    b8b4:	99 27       	eor	r25, r25
    b8b6:	e8 94       	clt
    b8b8:	21 91       	ld	r18, Z+
    b8ba:	20 32       	cpi	r18, 0x20	; 32
    b8bc:	e9 f3       	breq	.-6      	; 0xb8b8 <atoi+0x8>
    b8be:	29 30       	cpi	r18, 0x09	; 9
    b8c0:	10 f0       	brcs	.+4      	; 0xb8c6 <atoi+0x16>
    b8c2:	2e 30       	cpi	r18, 0x0E	; 14
    b8c4:	c8 f3       	brcs	.-14     	; 0xb8b8 <atoi+0x8>
    b8c6:	2b 32       	cpi	r18, 0x2B	; 43
    b8c8:	41 f0       	breq	.+16     	; 0xb8da <atoi+0x2a>
    b8ca:	2d 32       	cpi	r18, 0x2D	; 45
    b8cc:	39 f4       	brne	.+14     	; 0xb8dc <atoi+0x2c>
    b8ce:	68 94       	set
    b8d0:	04 c0       	rjmp	.+8      	; 0xb8da <atoi+0x2a>
    b8d2:	0e 94 9b 5d 	call	0xbb36	; 0xbb36 <__mulhi_const_10>
    b8d6:	82 0f       	add	r24, r18
    b8d8:	91 1d       	adc	r25, r1
    b8da:	21 91       	ld	r18, Z+
    b8dc:	20 53       	subi	r18, 0x30	; 48
    b8de:	2a 30       	cpi	r18, 0x0A	; 10
    b8e0:	c0 f3       	brcs	.-16     	; 0xb8d2 <atoi+0x22>
    b8e2:	1e f4       	brtc	.+6      	; 0xb8ea <atoi+0x3a>
    b8e4:	90 95       	com	r25
    b8e6:	81 95       	neg	r24
    b8e8:	9f 4f       	sbci	r25, 0xFF	; 255
    b8ea:	08 95       	ret

0000b8ec <atol>:
    b8ec:	1f 93       	push	r17
    b8ee:	fc 01       	movw	r30, r24
    b8f0:	99 27       	eor	r25, r25
    b8f2:	88 27       	eor	r24, r24
    b8f4:	bc 01       	movw	r22, r24
    b8f6:	e8 94       	clt
    b8f8:	11 91       	ld	r17, Z+
    b8fa:	10 32       	cpi	r17, 0x20	; 32
    b8fc:	e9 f3       	breq	.-6      	; 0xb8f8 <atol+0xc>
    b8fe:	19 30       	cpi	r17, 0x09	; 9
    b900:	10 f0       	brcs	.+4      	; 0xb906 <atol+0x1a>
    b902:	1e 30       	cpi	r17, 0x0E	; 14
    b904:	c8 f3       	brcs	.-14     	; 0xb8f8 <atol+0xc>
    b906:	1b 32       	cpi	r17, 0x2B	; 43
    b908:	51 f0       	breq	.+20     	; 0xb91e <atol+0x32>
    b90a:	1d 32       	cpi	r17, 0x2D	; 45
    b90c:	49 f4       	brne	.+18     	; 0xb920 <atol+0x34>
    b90e:	68 94       	set
    b910:	06 c0       	rjmp	.+12     	; 0xb91e <atol+0x32>
    b912:	0e 94 86 5d 	call	0xbb0c	; 0xbb0c <__mulsi_const_10>
    b916:	61 0f       	add	r22, r17
    b918:	71 1d       	adc	r23, r1
    b91a:	81 1d       	adc	r24, r1
    b91c:	91 1d       	adc	r25, r1
    b91e:	11 91       	ld	r17, Z+
    b920:	10 53       	subi	r17, 0x30	; 48
    b922:	1a 30       	cpi	r17, 0x0A	; 10
    b924:	b0 f3       	brcs	.-20     	; 0xb912 <atol+0x26>
    b926:	3e f4       	brtc	.+14     	; 0xb936 <atol+0x4a>
    b928:	90 95       	com	r25
    b92a:	80 95       	com	r24
    b92c:	70 95       	com	r23
    b92e:	61 95       	neg	r22
    b930:	7f 4f       	sbci	r23, 0xFF	; 255
    b932:	8f 4f       	sbci	r24, 0xFF	; 255
    b934:	9f 4f       	sbci	r25, 0xFF	; 255
    b936:	1f 91       	pop	r17
    b938:	08 95       	ret

0000b93a <strtok>:
    b93a:	40 e7       	ldi	r20, 0x70	; 112
    b93c:	58 e3       	ldi	r21, 0x38	; 56
    b93e:	0e 94 21 5d 	call	0xba42	; 0xba42 <strtok_r>
    b942:	08 95       	ret

0000b944 <memmove>:
    b944:	68 17       	cp	r22, r24
    b946:	79 07       	cpc	r23, r25
    b948:	68 f4       	brcc	.+26     	; 0xb964 <memmove+0x20>
    b94a:	fb 01       	movw	r30, r22
    b94c:	dc 01       	movw	r26, r24
    b94e:	e4 0f       	add	r30, r20
    b950:	f5 1f       	adc	r31, r21
    b952:	a4 0f       	add	r26, r20
    b954:	b5 1f       	adc	r27, r21
    b956:	02 c0       	rjmp	.+4      	; 0xb95c <memmove+0x18>
    b958:	02 90       	ld	r0, -Z
    b95a:	0e 92       	st	-X, r0
    b95c:	41 50       	subi	r20, 0x01	; 1
    b95e:	50 40       	sbci	r21, 0x00	; 0
    b960:	d8 f7       	brcc	.-10     	; 0xb958 <memmove+0x14>
    b962:	08 95       	ret
    b964:	0c 94 d9 5f 	jmp	0xbfb2	; 0xbfb2 <memcpy>

0000b968 <strcasecmp>:
    b968:	fb 01       	movw	r30, r22
    b96a:	dc 01       	movw	r26, r24
    b96c:	8d 91       	ld	r24, X+
    b96e:	81 34       	cpi	r24, 0x41	; 65
    b970:	1c f0       	brlt	.+6      	; 0xb978 <strcasecmp+0x10>
    b972:	8b 35       	cpi	r24, 0x5B	; 91
    b974:	0c f4       	brge	.+2      	; 0xb978 <strcasecmp+0x10>
    b976:	80 5e       	subi	r24, 0xE0	; 224
    b978:	61 91       	ld	r22, Z+
    b97a:	61 34       	cpi	r22, 0x41	; 65
    b97c:	1c f0       	brlt	.+6      	; 0xb984 <strcasecmp+0x1c>
    b97e:	6b 35       	cpi	r22, 0x5B	; 91
    b980:	0c f4       	brge	.+2      	; 0xb984 <strcasecmp+0x1c>
    b982:	60 5e       	subi	r22, 0xE0	; 224
    b984:	86 1b       	sub	r24, r22
    b986:	61 11       	cpse	r22, r1
    b988:	89 f3       	breq	.-30     	; 0xb96c <strcasecmp+0x4>
    b98a:	99 0b       	sbc	r25, r25
    b98c:	08 95       	ret

0000b98e <strcasestr>:
    b98e:	fb 01       	movw	r30, r22
    b990:	51 91       	ld	r21, Z+
    b992:	55 23       	and	r21, r21
    b994:	b1 f0       	breq	.+44     	; 0xb9c2 <strcasestr+0x34>
    b996:	bf 01       	movw	r22, r30
    b998:	dc 01       	movw	r26, r24
    b99a:	05 2e       	mov	r0, r21
    b99c:	4d 91       	ld	r20, X+
    b99e:	44 23       	and	r20, r20
    b9a0:	69 f0       	breq	.+26     	; 0xb9bc <strcasestr+0x2e>
    b9a2:	10 d0       	rcall	.+32     	; 0xb9c4 <strcasestr+0x36>
    b9a4:	d9 f7       	brne	.-10     	; 0xb99c <strcasestr+0xe>
    b9a6:	cd 01       	movw	r24, r26
    b9a8:	01 90       	ld	r0, Z+
    b9aa:	00 20       	and	r0, r0
    b9ac:	49 f0       	breq	.+18     	; 0xb9c0 <strcasestr+0x32>
    b9ae:	4d 91       	ld	r20, X+
    b9b0:	41 11       	cpse	r20, r1
    b9b2:	08 d0       	rcall	.+16     	; 0xb9c4 <strcasestr+0x36>
    b9b4:	c9 f3       	breq	.-14     	; 0xb9a8 <strcasestr+0x1a>
    b9b6:	fb 01       	movw	r30, r22
    b9b8:	41 11       	cpse	r20, r1
    b9ba:	ee cf       	rjmp	.-36     	; 0xb998 <strcasestr+0xa>
    b9bc:	81 e0       	ldi	r24, 0x01	; 1
    b9be:	90 e0       	ldi	r25, 0x00	; 0
    b9c0:	01 97       	sbiw	r24, 0x01	; 1
    b9c2:	08 95       	ret
    b9c4:	40 25       	eor	r20, r0
    b9c6:	39 f0       	breq	.+14     	; 0xb9d6 <strcasestr+0x48>
    b9c8:	40 32       	cpi	r20, 0x20	; 32
    b9ca:	29 f4       	brne	.+10     	; 0xb9d6 <strcasestr+0x48>
    b9cc:	40 29       	or	r20, r0
    b9ce:	4b 57       	subi	r20, 0x7B	; 123
    b9d0:	46 5e       	subi	r20, 0xE6	; 230
    b9d2:	08 f0       	brcs	.+2      	; 0xb9d6 <strcasestr+0x48>
    b9d4:	18 94       	sez
    b9d6:	08 95       	ret

0000b9d8 <strcat>:
    b9d8:	fb 01       	movw	r30, r22
    b9da:	dc 01       	movw	r26, r24
    b9dc:	0d 90       	ld	r0, X+
    b9de:	00 20       	and	r0, r0
    b9e0:	e9 f7       	brne	.-6      	; 0xb9dc <strcat+0x4>
    b9e2:	11 97       	sbiw	r26, 0x01	; 1
    b9e4:	01 90       	ld	r0, Z+
    b9e6:	0d 92       	st	X+, r0
    b9e8:	00 20       	and	r0, r0
    b9ea:	e1 f7       	brne	.-8      	; 0xb9e4 <strcat+0xc>
    b9ec:	08 95       	ret

0000b9ee <strcmp>:
    b9ee:	fb 01       	movw	r30, r22
    b9f0:	dc 01       	movw	r26, r24
    b9f2:	8d 91       	ld	r24, X+
    b9f4:	01 90       	ld	r0, Z+
    b9f6:	80 19       	sub	r24, r0
    b9f8:	01 10       	cpse	r0, r1
    b9fa:	d9 f3       	breq	.-10     	; 0xb9f2 <strcmp+0x4>
    b9fc:	99 0b       	sbc	r25, r25
    b9fe:	08 95       	ret

0000ba00 <strcpy>:
    ba00:	fb 01       	movw	r30, r22
    ba02:	dc 01       	movw	r26, r24
    ba04:	01 90       	ld	r0, Z+
    ba06:	0d 92       	st	X+, r0
    ba08:	00 20       	and	r0, r0
    ba0a:	e1 f7       	brne	.-8      	; 0xba04 <strcpy+0x4>
    ba0c:	08 95       	ret

0000ba0e <strstr>:
    ba0e:	fb 01       	movw	r30, r22
    ba10:	51 91       	ld	r21, Z+
    ba12:	55 23       	and	r21, r21
    ba14:	a9 f0       	breq	.+42     	; 0xba40 <strstr+0x32>
    ba16:	bf 01       	movw	r22, r30
    ba18:	dc 01       	movw	r26, r24
    ba1a:	4d 91       	ld	r20, X+
    ba1c:	45 17       	cp	r20, r21
    ba1e:	41 11       	cpse	r20, r1
    ba20:	e1 f7       	brne	.-8      	; 0xba1a <strstr+0xc>
    ba22:	59 f4       	brne	.+22     	; 0xba3a <strstr+0x2c>
    ba24:	cd 01       	movw	r24, r26
    ba26:	01 90       	ld	r0, Z+
    ba28:	00 20       	and	r0, r0
    ba2a:	49 f0       	breq	.+18     	; 0xba3e <strstr+0x30>
    ba2c:	4d 91       	ld	r20, X+
    ba2e:	40 15       	cp	r20, r0
    ba30:	41 11       	cpse	r20, r1
    ba32:	c9 f3       	breq	.-14     	; 0xba26 <strstr+0x18>
    ba34:	fb 01       	movw	r30, r22
    ba36:	41 11       	cpse	r20, r1
    ba38:	ef cf       	rjmp	.-34     	; 0xba18 <strstr+0xa>
    ba3a:	81 e0       	ldi	r24, 0x01	; 1
    ba3c:	90 e0       	ldi	r25, 0x00	; 0
    ba3e:	01 97       	sbiw	r24, 0x01	; 1
    ba40:	08 95       	ret

0000ba42 <strtok_r>:
    ba42:	fa 01       	movw	r30, r20
    ba44:	a1 91       	ld	r26, Z+
    ba46:	b0 81       	ld	r27, Z
    ba48:	00 97       	sbiw	r24, 0x00	; 0
    ba4a:	19 f4       	brne	.+6      	; 0xba52 <strtok_r+0x10>
    ba4c:	10 97       	sbiw	r26, 0x00	; 0
    ba4e:	e1 f0       	breq	.+56     	; 0xba88 <strtok_r+0x46>
    ba50:	cd 01       	movw	r24, r26
    ba52:	dc 01       	movw	r26, r24
    ba54:	cd 01       	movw	r24, r26
    ba56:	0d 90       	ld	r0, X+
    ba58:	00 20       	and	r0, r0
    ba5a:	11 f4       	brne	.+4      	; 0xba60 <strtok_r+0x1e>
    ba5c:	c0 01       	movw	r24, r0
    ba5e:	13 c0       	rjmp	.+38     	; 0xba86 <strtok_r+0x44>
    ba60:	fb 01       	movw	r30, r22
    ba62:	21 91       	ld	r18, Z+
    ba64:	22 23       	and	r18, r18
    ba66:	19 f0       	breq	.+6      	; 0xba6e <strtok_r+0x2c>
    ba68:	20 15       	cp	r18, r0
    ba6a:	d9 f7       	brne	.-10     	; 0xba62 <strtok_r+0x20>
    ba6c:	f3 cf       	rjmp	.-26     	; 0xba54 <strtok_r+0x12>
    ba6e:	fb 01       	movw	r30, r22
    ba70:	21 91       	ld	r18, Z+
    ba72:	20 15       	cp	r18, r0
    ba74:	19 f4       	brne	.+6      	; 0xba7c <strtok_r+0x3a>
    ba76:	1e 92       	st	-X, r1
    ba78:	11 96       	adiw	r26, 0x01	; 1
    ba7a:	06 c0       	rjmp	.+12     	; 0xba88 <strtok_r+0x46>
    ba7c:	22 23       	and	r18, r18
    ba7e:	c1 f7       	brne	.-16     	; 0xba70 <strtok_r+0x2e>
    ba80:	0d 90       	ld	r0, X+
    ba82:	00 20       	and	r0, r0
    ba84:	a1 f7       	brne	.-24     	; 0xba6e <strtok_r+0x2c>
    ba86:	d0 01       	movw	r26, r0
    ba88:	fa 01       	movw	r30, r20
    ba8a:	a1 93       	st	Z+, r26
    ba8c:	b0 83       	st	Z, r27
    ba8e:	08 95       	ret

0000ba90 <strupr>:
    ba90:	dc 01       	movw	r26, r24
    ba92:	6c 91       	ld	r22, X
    ba94:	61 56       	subi	r22, 0x61	; 97
    ba96:	6a 31       	cpi	r22, 0x1A	; 26
    ba98:	08 f0       	brcs	.+2      	; 0xba9c <strupr+0xc>
    ba9a:	60 5e       	subi	r22, 0xE0	; 224
    ba9c:	6f 5b       	subi	r22, 0xBF	; 191
    ba9e:	6d 93       	st	X+, r22
    baa0:	c1 f7       	brne	.-16     	; 0xba92 <strupr+0x2>
    baa2:	08 95       	ret

0000baa4 <ltoa>:
    baa4:	fa 01       	movw	r30, r20
    baa6:	cf 93       	push	r28
    baa8:	ff 93       	push	r31
    baaa:	ef 93       	push	r30
    baac:	22 30       	cpi	r18, 0x02	; 2
    baae:	44 f1       	brlt	.+80     	; 0xbb00 <ltoa+0x5c>
    bab0:	25 32       	cpi	r18, 0x25	; 37
    bab2:	34 f5       	brge	.+76     	; 0xbb00 <ltoa+0x5c>
    bab4:	c2 2f       	mov	r28, r18
    bab6:	e8 94       	clt
    bab8:	ca 30       	cpi	r28, 0x0A	; 10
    baba:	49 f4       	brne	.+18     	; 0xbace <ltoa+0x2a>
    babc:	97 fb       	bst	r25, 7
    babe:	3e f4       	brtc	.+14     	; 0xbace <ltoa+0x2a>
    bac0:	90 95       	com	r25
    bac2:	80 95       	com	r24
    bac4:	70 95       	com	r23
    bac6:	61 95       	neg	r22
    bac8:	7f 4f       	sbci	r23, 0xFF	; 255
    baca:	8f 4f       	sbci	r24, 0xFF	; 255
    bacc:	9f 4f       	sbci	r25, 0xFF	; 255
    bace:	2c 2f       	mov	r18, r28
    bad0:	33 27       	eor	r19, r19
    bad2:	44 27       	eor	r20, r20
    bad4:	55 27       	eor	r21, r21
    bad6:	ff 93       	push	r31
    bad8:	ef 93       	push	r30
    bada:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__udivmodsi4>
    bade:	ef 91       	pop	r30
    bae0:	ff 91       	pop	r31
    bae2:	60 5d       	subi	r22, 0xD0	; 208
    bae4:	6a 33       	cpi	r22, 0x3A	; 58
    bae6:	0c f0       	brlt	.+2      	; 0xbaea <ltoa+0x46>
    bae8:	69 5d       	subi	r22, 0xD9	; 217
    baea:	61 93       	st	Z+, r22
    baec:	b9 01       	movw	r22, r18
    baee:	ca 01       	movw	r24, r20
    baf0:	60 50       	subi	r22, 0x00	; 0
    baf2:	70 40       	sbci	r23, 0x00	; 0
    baf4:	80 40       	sbci	r24, 0x00	; 0
    baf6:	90 40       	sbci	r25, 0x00	; 0
    baf8:	51 f7       	brne	.-44     	; 0xbace <ltoa+0x2a>
    bafa:	16 f4       	brtc	.+4      	; 0xbb00 <ltoa+0x5c>
    bafc:	cd e2       	ldi	r28, 0x2D	; 45
    bafe:	c1 93       	st	Z+, r28
    bb00:	10 82       	st	Z, r1
    bb02:	8f 91       	pop	r24
    bb04:	9f 91       	pop	r25
    bb06:	cf 91       	pop	r28
    bb08:	0c 94 ed 5f 	jmp	0xbfda	; 0xbfda <strrev>

0000bb0c <__mulsi_const_10>:
    bb0c:	59 2f       	mov	r21, r25
    bb0e:	48 2f       	mov	r20, r24
    bb10:	37 2f       	mov	r19, r23
    bb12:	26 2f       	mov	r18, r22
    bb14:	66 0f       	add	r22, r22
    bb16:	77 1f       	adc	r23, r23
    bb18:	88 1f       	adc	r24, r24
    bb1a:	99 1f       	adc	r25, r25
    bb1c:	66 0f       	add	r22, r22
    bb1e:	77 1f       	adc	r23, r23
    bb20:	88 1f       	adc	r24, r24
    bb22:	99 1f       	adc	r25, r25
    bb24:	62 0f       	add	r22, r18
    bb26:	73 1f       	adc	r23, r19
    bb28:	84 1f       	adc	r24, r20
    bb2a:	95 1f       	adc	r25, r21
    bb2c:	66 0f       	add	r22, r22
    bb2e:	77 1f       	adc	r23, r23
    bb30:	88 1f       	adc	r24, r24
    bb32:	99 1f       	adc	r25, r25
    bb34:	08 95       	ret

0000bb36 <__mulhi_const_10>:
    bb36:	7a e0       	ldi	r23, 0x0A	; 10
    bb38:	97 9f       	mul	r25, r23
    bb3a:	90 2d       	mov	r25, r0
    bb3c:	87 9f       	mul	r24, r23
    bb3e:	80 2d       	mov	r24, r0
    bb40:	91 0d       	add	r25, r1
    bb42:	11 24       	eor	r1, r1
    bb44:	08 95       	ret

0000bb46 <sprintf>:
    bb46:	0f 93       	push	r16
    bb48:	1f 93       	push	r17
    bb4a:	df 93       	push	r29
    bb4c:	cf 93       	push	r28
    bb4e:	cd b7       	in	r28, 0x3d	; 61
    bb50:	de b7       	in	r29, 0x3e	; 62
    bb52:	2e 97       	sbiw	r28, 0x0e	; 14
    bb54:	cd bf       	out	0x3d, r28	; 61
    bb56:	de bf       	out	0x3e, r29	; 62
    bb58:	0e 89       	ldd	r16, Y+22	; 0x16
    bb5a:	1f 89       	ldd	r17, Y+23	; 0x17
    bb5c:	86 e0       	ldi	r24, 0x06	; 6
    bb5e:	8c 83       	std	Y+4, r24	; 0x04
    bb60:	09 83       	std	Y+1, r16	; 0x01
    bb62:	1a 83       	std	Y+2, r17	; 0x02
    bb64:	8f ef       	ldi	r24, 0xFF	; 255
    bb66:	9f e7       	ldi	r25, 0x7F	; 127
    bb68:	8d 83       	std	Y+5, r24	; 0x05
    bb6a:	9e 83       	std	Y+6, r25	; 0x06
    bb6c:	9e 01       	movw	r18, r28
    bb6e:	26 5e       	subi	r18, 0xE6	; 230
    bb70:	3f 4f       	sbci	r19, 0xFF	; 255
    bb72:	ce 01       	movw	r24, r28
    bb74:	01 96       	adiw	r24, 0x01	; 1
    bb76:	68 8d       	ldd	r22, Y+24	; 0x18
    bb78:	79 8d       	ldd	r23, Y+25	; 0x19
    bb7a:	a9 01       	movw	r20, r18
    bb7c:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <vfprintf>
    bb80:	2f 81       	ldd	r18, Y+7	; 0x07
    bb82:	38 85       	ldd	r19, Y+8	; 0x08
    bb84:	02 0f       	add	r16, r18
    bb86:	13 1f       	adc	r17, r19
    bb88:	f8 01       	movw	r30, r16
    bb8a:	10 82       	st	Z, r1
    bb8c:	2e 96       	adiw	r28, 0x0e	; 14
    bb8e:	cd bf       	out	0x3d, r28	; 61
    bb90:	de bf       	out	0x3e, r29	; 62
    bb92:	cf 91       	pop	r28
    bb94:	df 91       	pop	r29
    bb96:	1f 91       	pop	r17
    bb98:	0f 91       	pop	r16
    bb9a:	08 95       	ret

0000bb9c <vfprintf>:
    bb9c:	2f 92       	push	r2
    bb9e:	3f 92       	push	r3
    bba0:	4f 92       	push	r4
    bba2:	5f 92       	push	r5
    bba4:	6f 92       	push	r6
    bba6:	7f 92       	push	r7
    bba8:	8f 92       	push	r8
    bbaa:	9f 92       	push	r9
    bbac:	af 92       	push	r10
    bbae:	bf 92       	push	r11
    bbb0:	cf 92       	push	r12
    bbb2:	df 92       	push	r13
    bbb4:	ef 92       	push	r14
    bbb6:	ff 92       	push	r15
    bbb8:	0f 93       	push	r16
    bbba:	1f 93       	push	r17
    bbbc:	df 93       	push	r29
    bbbe:	cf 93       	push	r28
    bbc0:	cd b7       	in	r28, 0x3d	; 61
    bbc2:	de b7       	in	r29, 0x3e	; 62
    bbc4:	2b 97       	sbiw	r28, 0x0b	; 11
    bbc6:	cd bf       	out	0x3d, r28	; 61
    bbc8:	de bf       	out	0x3e, r29	; 62
    bbca:	3c 01       	movw	r6, r24
    bbcc:	2b 01       	movw	r4, r22
    bbce:	5a 01       	movw	r10, r20
    bbd0:	fc 01       	movw	r30, r24
    bbd2:	16 82       	std	Z+6, r1	; 0x06
    bbd4:	17 82       	std	Z+7, r1	; 0x07
    bbd6:	83 81       	ldd	r24, Z+3	; 0x03
    bbd8:	81 fd       	sbrc	r24, 1
    bbda:	03 c0       	rjmp	.+6      	; 0xbbe2 <vfprintf+0x46>
    bbdc:	6f ef       	ldi	r22, 0xFF	; 255
    bbde:	7f ef       	ldi	r23, 0xFF	; 255
    bbe0:	c6 c1       	rjmp	.+908    	; 0xbf6e <vfprintf+0x3d2>
    bbe2:	9a e0       	ldi	r25, 0x0A	; 10
    bbe4:	89 2e       	mov	r8, r25
    bbe6:	1e 01       	movw	r2, r28
    bbe8:	08 94       	sec
    bbea:	21 1c       	adc	r2, r1
    bbec:	31 1c       	adc	r3, r1
    bbee:	f3 01       	movw	r30, r6
    bbf0:	23 81       	ldd	r18, Z+3	; 0x03
    bbf2:	f2 01       	movw	r30, r4
    bbf4:	23 fd       	sbrc	r18, 3
    bbf6:	85 91       	lpm	r24, Z+
    bbf8:	23 ff       	sbrs	r18, 3
    bbfa:	81 91       	ld	r24, Z+
    bbfc:	2f 01       	movw	r4, r30
    bbfe:	88 23       	and	r24, r24
    bc00:	09 f4       	brne	.+2      	; 0xbc04 <vfprintf+0x68>
    bc02:	b2 c1       	rjmp	.+868    	; 0xbf68 <vfprintf+0x3cc>
    bc04:	85 32       	cpi	r24, 0x25	; 37
    bc06:	39 f4       	brne	.+14     	; 0xbc16 <vfprintf+0x7a>
    bc08:	23 fd       	sbrc	r18, 3
    bc0a:	85 91       	lpm	r24, Z+
    bc0c:	23 ff       	sbrs	r18, 3
    bc0e:	81 91       	ld	r24, Z+
    bc10:	2f 01       	movw	r4, r30
    bc12:	85 32       	cpi	r24, 0x25	; 37
    bc14:	29 f4       	brne	.+10     	; 0xbc20 <vfprintf+0x84>
    bc16:	90 e0       	ldi	r25, 0x00	; 0
    bc18:	b3 01       	movw	r22, r6
    bc1a:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bc1e:	e7 cf       	rjmp	.-50     	; 0xbbee <vfprintf+0x52>
    bc20:	98 2f       	mov	r25, r24
    bc22:	ff 24       	eor	r15, r15
    bc24:	ee 24       	eor	r14, r14
    bc26:	99 24       	eor	r9, r9
    bc28:	ff e1       	ldi	r31, 0x1F	; 31
    bc2a:	ff 15       	cp	r31, r15
    bc2c:	d0 f0       	brcs	.+52     	; 0xbc62 <vfprintf+0xc6>
    bc2e:	9b 32       	cpi	r25, 0x2B	; 43
    bc30:	69 f0       	breq	.+26     	; 0xbc4c <vfprintf+0xb0>
    bc32:	9c 32       	cpi	r25, 0x2C	; 44
    bc34:	28 f4       	brcc	.+10     	; 0xbc40 <vfprintf+0xa4>
    bc36:	90 32       	cpi	r25, 0x20	; 32
    bc38:	59 f0       	breq	.+22     	; 0xbc50 <vfprintf+0xb4>
    bc3a:	93 32       	cpi	r25, 0x23	; 35
    bc3c:	91 f4       	brne	.+36     	; 0xbc62 <vfprintf+0xc6>
    bc3e:	0e c0       	rjmp	.+28     	; 0xbc5c <vfprintf+0xc0>
    bc40:	9d 32       	cpi	r25, 0x2D	; 45
    bc42:	49 f0       	breq	.+18     	; 0xbc56 <vfprintf+0xba>
    bc44:	90 33       	cpi	r25, 0x30	; 48
    bc46:	69 f4       	brne	.+26     	; 0xbc62 <vfprintf+0xc6>
    bc48:	41 e0       	ldi	r20, 0x01	; 1
    bc4a:	24 c0       	rjmp	.+72     	; 0xbc94 <vfprintf+0xf8>
    bc4c:	52 e0       	ldi	r21, 0x02	; 2
    bc4e:	f5 2a       	or	r15, r21
    bc50:	84 e0       	ldi	r24, 0x04	; 4
    bc52:	f8 2a       	or	r15, r24
    bc54:	28 c0       	rjmp	.+80     	; 0xbca6 <vfprintf+0x10a>
    bc56:	98 e0       	ldi	r25, 0x08	; 8
    bc58:	f9 2a       	or	r15, r25
    bc5a:	25 c0       	rjmp	.+74     	; 0xbca6 <vfprintf+0x10a>
    bc5c:	e0 e1       	ldi	r30, 0x10	; 16
    bc5e:	fe 2a       	or	r15, r30
    bc60:	22 c0       	rjmp	.+68     	; 0xbca6 <vfprintf+0x10a>
    bc62:	f7 fc       	sbrc	r15, 7
    bc64:	29 c0       	rjmp	.+82     	; 0xbcb8 <vfprintf+0x11c>
    bc66:	89 2f       	mov	r24, r25
    bc68:	80 53       	subi	r24, 0x30	; 48
    bc6a:	8a 30       	cpi	r24, 0x0A	; 10
    bc6c:	70 f4       	brcc	.+28     	; 0xbc8a <vfprintf+0xee>
    bc6e:	f6 fe       	sbrs	r15, 6
    bc70:	05 c0       	rjmp	.+10     	; 0xbc7c <vfprintf+0xe0>
    bc72:	98 9c       	mul	r9, r8
    bc74:	90 2c       	mov	r9, r0
    bc76:	11 24       	eor	r1, r1
    bc78:	98 0e       	add	r9, r24
    bc7a:	15 c0       	rjmp	.+42     	; 0xbca6 <vfprintf+0x10a>
    bc7c:	e8 9c       	mul	r14, r8
    bc7e:	e0 2c       	mov	r14, r0
    bc80:	11 24       	eor	r1, r1
    bc82:	e8 0e       	add	r14, r24
    bc84:	f0 e2       	ldi	r31, 0x20	; 32
    bc86:	ff 2a       	or	r15, r31
    bc88:	0e c0       	rjmp	.+28     	; 0xbca6 <vfprintf+0x10a>
    bc8a:	9e 32       	cpi	r25, 0x2E	; 46
    bc8c:	29 f4       	brne	.+10     	; 0xbc98 <vfprintf+0xfc>
    bc8e:	f6 fc       	sbrc	r15, 6
    bc90:	6b c1       	rjmp	.+726    	; 0xbf68 <vfprintf+0x3cc>
    bc92:	40 e4       	ldi	r20, 0x40	; 64
    bc94:	f4 2a       	or	r15, r20
    bc96:	07 c0       	rjmp	.+14     	; 0xbca6 <vfprintf+0x10a>
    bc98:	9c 36       	cpi	r25, 0x6C	; 108
    bc9a:	19 f4       	brne	.+6      	; 0xbca2 <vfprintf+0x106>
    bc9c:	50 e8       	ldi	r21, 0x80	; 128
    bc9e:	f5 2a       	or	r15, r21
    bca0:	02 c0       	rjmp	.+4      	; 0xbca6 <vfprintf+0x10a>
    bca2:	98 36       	cpi	r25, 0x68	; 104
    bca4:	49 f4       	brne	.+18     	; 0xbcb8 <vfprintf+0x11c>
    bca6:	f2 01       	movw	r30, r4
    bca8:	23 fd       	sbrc	r18, 3
    bcaa:	95 91       	lpm	r25, Z+
    bcac:	23 ff       	sbrs	r18, 3
    bcae:	91 91       	ld	r25, Z+
    bcb0:	2f 01       	movw	r4, r30
    bcb2:	99 23       	and	r25, r25
    bcb4:	09 f0       	breq	.+2      	; 0xbcb8 <vfprintf+0x11c>
    bcb6:	b8 cf       	rjmp	.-144    	; 0xbc28 <vfprintf+0x8c>
    bcb8:	89 2f       	mov	r24, r25
    bcba:	85 54       	subi	r24, 0x45	; 69
    bcbc:	83 30       	cpi	r24, 0x03	; 3
    bcbe:	18 f0       	brcs	.+6      	; 0xbcc6 <vfprintf+0x12a>
    bcc0:	80 52       	subi	r24, 0x20	; 32
    bcc2:	83 30       	cpi	r24, 0x03	; 3
    bcc4:	38 f4       	brcc	.+14     	; 0xbcd4 <vfprintf+0x138>
    bcc6:	44 e0       	ldi	r20, 0x04	; 4
    bcc8:	50 e0       	ldi	r21, 0x00	; 0
    bcca:	a4 0e       	add	r10, r20
    bccc:	b5 1e       	adc	r11, r21
    bcce:	5f e3       	ldi	r21, 0x3F	; 63
    bcd0:	59 83       	std	Y+1, r21	; 0x01
    bcd2:	0f c0       	rjmp	.+30     	; 0xbcf2 <vfprintf+0x156>
    bcd4:	93 36       	cpi	r25, 0x63	; 99
    bcd6:	31 f0       	breq	.+12     	; 0xbce4 <vfprintf+0x148>
    bcd8:	93 37       	cpi	r25, 0x73	; 115
    bcda:	79 f0       	breq	.+30     	; 0xbcfa <vfprintf+0x15e>
    bcdc:	93 35       	cpi	r25, 0x53	; 83
    bcde:	09 f0       	breq	.+2      	; 0xbce2 <vfprintf+0x146>
    bce0:	56 c0       	rjmp	.+172    	; 0xbd8e <vfprintf+0x1f2>
    bce2:	20 c0       	rjmp	.+64     	; 0xbd24 <vfprintf+0x188>
    bce4:	f5 01       	movw	r30, r10
    bce6:	80 81       	ld	r24, Z
    bce8:	89 83       	std	Y+1, r24	; 0x01
    bcea:	42 e0       	ldi	r20, 0x02	; 2
    bcec:	50 e0       	ldi	r21, 0x00	; 0
    bcee:	a4 0e       	add	r10, r20
    bcf0:	b5 1e       	adc	r11, r21
    bcf2:	61 01       	movw	r12, r2
    bcf4:	01 e0       	ldi	r16, 0x01	; 1
    bcf6:	10 e0       	ldi	r17, 0x00	; 0
    bcf8:	12 c0       	rjmp	.+36     	; 0xbd1e <vfprintf+0x182>
    bcfa:	f5 01       	movw	r30, r10
    bcfc:	c0 80       	ld	r12, Z
    bcfe:	d1 80       	ldd	r13, Z+1	; 0x01
    bd00:	f6 fc       	sbrc	r15, 6
    bd02:	03 c0       	rjmp	.+6      	; 0xbd0a <vfprintf+0x16e>
    bd04:	6f ef       	ldi	r22, 0xFF	; 255
    bd06:	7f ef       	ldi	r23, 0xFF	; 255
    bd08:	02 c0       	rjmp	.+4      	; 0xbd0e <vfprintf+0x172>
    bd0a:	69 2d       	mov	r22, r9
    bd0c:	70 e0       	ldi	r23, 0x00	; 0
    bd0e:	42 e0       	ldi	r20, 0x02	; 2
    bd10:	50 e0       	ldi	r21, 0x00	; 0
    bd12:	a4 0e       	add	r10, r20
    bd14:	b5 1e       	adc	r11, r21
    bd16:	c6 01       	movw	r24, r12
    bd18:	0e 94 e2 5f 	call	0xbfc4	; 0xbfc4 <strnlen>
    bd1c:	8c 01       	movw	r16, r24
    bd1e:	5f e7       	ldi	r21, 0x7F	; 127
    bd20:	f5 22       	and	r15, r21
    bd22:	14 c0       	rjmp	.+40     	; 0xbd4c <vfprintf+0x1b0>
    bd24:	f5 01       	movw	r30, r10
    bd26:	c0 80       	ld	r12, Z
    bd28:	d1 80       	ldd	r13, Z+1	; 0x01
    bd2a:	f6 fc       	sbrc	r15, 6
    bd2c:	03 c0       	rjmp	.+6      	; 0xbd34 <vfprintf+0x198>
    bd2e:	6f ef       	ldi	r22, 0xFF	; 255
    bd30:	7f ef       	ldi	r23, 0xFF	; 255
    bd32:	02 c0       	rjmp	.+4      	; 0xbd38 <vfprintf+0x19c>
    bd34:	69 2d       	mov	r22, r9
    bd36:	70 e0       	ldi	r23, 0x00	; 0
    bd38:	42 e0       	ldi	r20, 0x02	; 2
    bd3a:	50 e0       	ldi	r21, 0x00	; 0
    bd3c:	a4 0e       	add	r10, r20
    bd3e:	b5 1e       	adc	r11, r21
    bd40:	c6 01       	movw	r24, r12
    bd42:	0e 94 ce 5f 	call	0xbf9c	; 0xbf9c <strnlen_P>
    bd46:	8c 01       	movw	r16, r24
    bd48:	50 e8       	ldi	r21, 0x80	; 128
    bd4a:	f5 2a       	or	r15, r21
    bd4c:	f3 fe       	sbrs	r15, 3
    bd4e:	07 c0       	rjmp	.+14     	; 0xbd5e <vfprintf+0x1c2>
    bd50:	1a c0       	rjmp	.+52     	; 0xbd86 <vfprintf+0x1ea>
    bd52:	80 e2       	ldi	r24, 0x20	; 32
    bd54:	90 e0       	ldi	r25, 0x00	; 0
    bd56:	b3 01       	movw	r22, r6
    bd58:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bd5c:	ea 94       	dec	r14
    bd5e:	8e 2d       	mov	r24, r14
    bd60:	90 e0       	ldi	r25, 0x00	; 0
    bd62:	08 17       	cp	r16, r24
    bd64:	19 07       	cpc	r17, r25
    bd66:	a8 f3       	brcs	.-22     	; 0xbd52 <vfprintf+0x1b6>
    bd68:	0e c0       	rjmp	.+28     	; 0xbd86 <vfprintf+0x1ea>
    bd6a:	f6 01       	movw	r30, r12
    bd6c:	f7 fc       	sbrc	r15, 7
    bd6e:	85 91       	lpm	r24, Z+
    bd70:	f7 fe       	sbrs	r15, 7
    bd72:	81 91       	ld	r24, Z+
    bd74:	6f 01       	movw	r12, r30
    bd76:	90 e0       	ldi	r25, 0x00	; 0
    bd78:	b3 01       	movw	r22, r6
    bd7a:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bd7e:	e1 10       	cpse	r14, r1
    bd80:	ea 94       	dec	r14
    bd82:	01 50       	subi	r16, 0x01	; 1
    bd84:	10 40       	sbci	r17, 0x00	; 0
    bd86:	01 15       	cp	r16, r1
    bd88:	11 05       	cpc	r17, r1
    bd8a:	79 f7       	brne	.-34     	; 0xbd6a <vfprintf+0x1ce>
    bd8c:	ea c0       	rjmp	.+468    	; 0xbf62 <vfprintf+0x3c6>
    bd8e:	94 36       	cpi	r25, 0x64	; 100
    bd90:	11 f0       	breq	.+4      	; 0xbd96 <vfprintf+0x1fa>
    bd92:	99 36       	cpi	r25, 0x69	; 105
    bd94:	69 f5       	brne	.+90     	; 0xbdf0 <vfprintf+0x254>
    bd96:	f7 fe       	sbrs	r15, 7
    bd98:	08 c0       	rjmp	.+16     	; 0xbdaa <vfprintf+0x20e>
    bd9a:	f5 01       	movw	r30, r10
    bd9c:	20 81       	ld	r18, Z
    bd9e:	31 81       	ldd	r19, Z+1	; 0x01
    bda0:	42 81       	ldd	r20, Z+2	; 0x02
    bda2:	53 81       	ldd	r21, Z+3	; 0x03
    bda4:	84 e0       	ldi	r24, 0x04	; 4
    bda6:	90 e0       	ldi	r25, 0x00	; 0
    bda8:	0a c0       	rjmp	.+20     	; 0xbdbe <vfprintf+0x222>
    bdaa:	f5 01       	movw	r30, r10
    bdac:	80 81       	ld	r24, Z
    bdae:	91 81       	ldd	r25, Z+1	; 0x01
    bdb0:	9c 01       	movw	r18, r24
    bdb2:	44 27       	eor	r20, r20
    bdb4:	37 fd       	sbrc	r19, 7
    bdb6:	40 95       	com	r20
    bdb8:	54 2f       	mov	r21, r20
    bdba:	82 e0       	ldi	r24, 0x02	; 2
    bdbc:	90 e0       	ldi	r25, 0x00	; 0
    bdbe:	a8 0e       	add	r10, r24
    bdc0:	b9 1e       	adc	r11, r25
    bdc2:	9f e6       	ldi	r25, 0x6F	; 111
    bdc4:	f9 22       	and	r15, r25
    bdc6:	57 ff       	sbrs	r21, 7
    bdc8:	09 c0       	rjmp	.+18     	; 0xbddc <vfprintf+0x240>
    bdca:	50 95       	com	r21
    bdcc:	40 95       	com	r20
    bdce:	30 95       	com	r19
    bdd0:	21 95       	neg	r18
    bdd2:	3f 4f       	sbci	r19, 0xFF	; 255
    bdd4:	4f 4f       	sbci	r20, 0xFF	; 255
    bdd6:	5f 4f       	sbci	r21, 0xFF	; 255
    bdd8:	e0 e8       	ldi	r30, 0x80	; 128
    bdda:	fe 2a       	or	r15, r30
    bddc:	ca 01       	movw	r24, r20
    bdde:	b9 01       	movw	r22, r18
    bde0:	a1 01       	movw	r20, r2
    bde2:	2a e0       	ldi	r18, 0x0A	; 10
    bde4:	30 e0       	ldi	r19, 0x00	; 0
    bde6:	0e 94 29 60 	call	0xc052	; 0xc052 <__ultoa_invert>
    bdea:	d8 2e       	mov	r13, r24
    bdec:	d2 18       	sub	r13, r2
    bdee:	40 c0       	rjmp	.+128    	; 0xbe70 <vfprintf+0x2d4>
    bdf0:	95 37       	cpi	r25, 0x75	; 117
    bdf2:	29 f4       	brne	.+10     	; 0xbdfe <vfprintf+0x262>
    bdf4:	1f 2d       	mov	r17, r15
    bdf6:	1f 7e       	andi	r17, 0xEF	; 239
    bdf8:	2a e0       	ldi	r18, 0x0A	; 10
    bdfa:	30 e0       	ldi	r19, 0x00	; 0
    bdfc:	1d c0       	rjmp	.+58     	; 0xbe38 <vfprintf+0x29c>
    bdfe:	1f 2d       	mov	r17, r15
    be00:	19 7f       	andi	r17, 0xF9	; 249
    be02:	9f 36       	cpi	r25, 0x6F	; 111
    be04:	61 f0       	breq	.+24     	; 0xbe1e <vfprintf+0x282>
    be06:	90 37       	cpi	r25, 0x70	; 112
    be08:	20 f4       	brcc	.+8      	; 0xbe12 <vfprintf+0x276>
    be0a:	98 35       	cpi	r25, 0x58	; 88
    be0c:	09 f0       	breq	.+2      	; 0xbe10 <vfprintf+0x274>
    be0e:	ac c0       	rjmp	.+344    	; 0xbf68 <vfprintf+0x3cc>
    be10:	0f c0       	rjmp	.+30     	; 0xbe30 <vfprintf+0x294>
    be12:	90 37       	cpi	r25, 0x70	; 112
    be14:	39 f0       	breq	.+14     	; 0xbe24 <vfprintf+0x288>
    be16:	98 37       	cpi	r25, 0x78	; 120
    be18:	09 f0       	breq	.+2      	; 0xbe1c <vfprintf+0x280>
    be1a:	a6 c0       	rjmp	.+332    	; 0xbf68 <vfprintf+0x3cc>
    be1c:	04 c0       	rjmp	.+8      	; 0xbe26 <vfprintf+0x28a>
    be1e:	28 e0       	ldi	r18, 0x08	; 8
    be20:	30 e0       	ldi	r19, 0x00	; 0
    be22:	0a c0       	rjmp	.+20     	; 0xbe38 <vfprintf+0x29c>
    be24:	10 61       	ori	r17, 0x10	; 16
    be26:	14 fd       	sbrc	r17, 4
    be28:	14 60       	ori	r17, 0x04	; 4
    be2a:	20 e1       	ldi	r18, 0x10	; 16
    be2c:	30 e0       	ldi	r19, 0x00	; 0
    be2e:	04 c0       	rjmp	.+8      	; 0xbe38 <vfprintf+0x29c>
    be30:	14 fd       	sbrc	r17, 4
    be32:	16 60       	ori	r17, 0x06	; 6
    be34:	20 e1       	ldi	r18, 0x10	; 16
    be36:	32 e0       	ldi	r19, 0x02	; 2
    be38:	17 ff       	sbrs	r17, 7
    be3a:	08 c0       	rjmp	.+16     	; 0xbe4c <vfprintf+0x2b0>
    be3c:	f5 01       	movw	r30, r10
    be3e:	60 81       	ld	r22, Z
    be40:	71 81       	ldd	r23, Z+1	; 0x01
    be42:	82 81       	ldd	r24, Z+2	; 0x02
    be44:	93 81       	ldd	r25, Z+3	; 0x03
    be46:	44 e0       	ldi	r20, 0x04	; 4
    be48:	50 e0       	ldi	r21, 0x00	; 0
    be4a:	08 c0       	rjmp	.+16     	; 0xbe5c <vfprintf+0x2c0>
    be4c:	f5 01       	movw	r30, r10
    be4e:	80 81       	ld	r24, Z
    be50:	91 81       	ldd	r25, Z+1	; 0x01
    be52:	bc 01       	movw	r22, r24
    be54:	80 e0       	ldi	r24, 0x00	; 0
    be56:	90 e0       	ldi	r25, 0x00	; 0
    be58:	42 e0       	ldi	r20, 0x02	; 2
    be5a:	50 e0       	ldi	r21, 0x00	; 0
    be5c:	a4 0e       	add	r10, r20
    be5e:	b5 1e       	adc	r11, r21
    be60:	a1 01       	movw	r20, r2
    be62:	0e 94 29 60 	call	0xc052	; 0xc052 <__ultoa_invert>
    be66:	d8 2e       	mov	r13, r24
    be68:	d2 18       	sub	r13, r2
    be6a:	8f e7       	ldi	r24, 0x7F	; 127
    be6c:	f8 2e       	mov	r15, r24
    be6e:	f1 22       	and	r15, r17
    be70:	f6 fe       	sbrs	r15, 6
    be72:	0b c0       	rjmp	.+22     	; 0xbe8a <vfprintf+0x2ee>
    be74:	5e ef       	ldi	r21, 0xFE	; 254
    be76:	f5 22       	and	r15, r21
    be78:	d9 14       	cp	r13, r9
    be7a:	38 f4       	brcc	.+14     	; 0xbe8a <vfprintf+0x2ee>
    be7c:	f4 fe       	sbrs	r15, 4
    be7e:	07 c0       	rjmp	.+14     	; 0xbe8e <vfprintf+0x2f2>
    be80:	f2 fc       	sbrc	r15, 2
    be82:	05 c0       	rjmp	.+10     	; 0xbe8e <vfprintf+0x2f2>
    be84:	8f ee       	ldi	r24, 0xEF	; 239
    be86:	f8 22       	and	r15, r24
    be88:	02 c0       	rjmp	.+4      	; 0xbe8e <vfprintf+0x2f2>
    be8a:	1d 2d       	mov	r17, r13
    be8c:	01 c0       	rjmp	.+2      	; 0xbe90 <vfprintf+0x2f4>
    be8e:	19 2d       	mov	r17, r9
    be90:	f4 fe       	sbrs	r15, 4
    be92:	0d c0       	rjmp	.+26     	; 0xbeae <vfprintf+0x312>
    be94:	fe 01       	movw	r30, r28
    be96:	ed 0d       	add	r30, r13
    be98:	f1 1d       	adc	r31, r1
    be9a:	80 81       	ld	r24, Z
    be9c:	80 33       	cpi	r24, 0x30	; 48
    be9e:	19 f4       	brne	.+6      	; 0xbea6 <vfprintf+0x30a>
    bea0:	99 ee       	ldi	r25, 0xE9	; 233
    bea2:	f9 22       	and	r15, r25
    bea4:	08 c0       	rjmp	.+16     	; 0xbeb6 <vfprintf+0x31a>
    bea6:	1f 5f       	subi	r17, 0xFF	; 255
    bea8:	f2 fe       	sbrs	r15, 2
    beaa:	05 c0       	rjmp	.+10     	; 0xbeb6 <vfprintf+0x31a>
    beac:	03 c0       	rjmp	.+6      	; 0xbeb4 <vfprintf+0x318>
    beae:	8f 2d       	mov	r24, r15
    beb0:	86 78       	andi	r24, 0x86	; 134
    beb2:	09 f0       	breq	.+2      	; 0xbeb6 <vfprintf+0x31a>
    beb4:	1f 5f       	subi	r17, 0xFF	; 255
    beb6:	0f 2d       	mov	r16, r15
    beb8:	f3 fc       	sbrc	r15, 3
    beba:	14 c0       	rjmp	.+40     	; 0xbee4 <vfprintf+0x348>
    bebc:	f0 fe       	sbrs	r15, 0
    bebe:	0f c0       	rjmp	.+30     	; 0xbede <vfprintf+0x342>
    bec0:	1e 15       	cp	r17, r14
    bec2:	10 f0       	brcs	.+4      	; 0xbec8 <vfprintf+0x32c>
    bec4:	9d 2c       	mov	r9, r13
    bec6:	0b c0       	rjmp	.+22     	; 0xbede <vfprintf+0x342>
    bec8:	9d 2c       	mov	r9, r13
    beca:	9e 0c       	add	r9, r14
    becc:	91 1a       	sub	r9, r17
    bece:	1e 2d       	mov	r17, r14
    bed0:	06 c0       	rjmp	.+12     	; 0xbede <vfprintf+0x342>
    bed2:	80 e2       	ldi	r24, 0x20	; 32
    bed4:	90 e0       	ldi	r25, 0x00	; 0
    bed6:	b3 01       	movw	r22, r6
    bed8:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bedc:	1f 5f       	subi	r17, 0xFF	; 255
    bede:	1e 15       	cp	r17, r14
    bee0:	c0 f3       	brcs	.-16     	; 0xbed2 <vfprintf+0x336>
    bee2:	04 c0       	rjmp	.+8      	; 0xbeec <vfprintf+0x350>
    bee4:	1e 15       	cp	r17, r14
    bee6:	10 f4       	brcc	.+4      	; 0xbeec <vfprintf+0x350>
    bee8:	e1 1a       	sub	r14, r17
    beea:	01 c0       	rjmp	.+2      	; 0xbeee <vfprintf+0x352>
    beec:	ee 24       	eor	r14, r14
    beee:	04 ff       	sbrs	r16, 4
    bef0:	0f c0       	rjmp	.+30     	; 0xbf10 <vfprintf+0x374>
    bef2:	80 e3       	ldi	r24, 0x30	; 48
    bef4:	90 e0       	ldi	r25, 0x00	; 0
    bef6:	b3 01       	movw	r22, r6
    bef8:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    befc:	02 ff       	sbrs	r16, 2
    befe:	1d c0       	rjmp	.+58     	; 0xbf3a <vfprintf+0x39e>
    bf00:	01 fd       	sbrc	r16, 1
    bf02:	03 c0       	rjmp	.+6      	; 0xbf0a <vfprintf+0x36e>
    bf04:	88 e7       	ldi	r24, 0x78	; 120
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	0e c0       	rjmp	.+28     	; 0xbf26 <vfprintf+0x38a>
    bf0a:	88 e5       	ldi	r24, 0x58	; 88
    bf0c:	90 e0       	ldi	r25, 0x00	; 0
    bf0e:	0b c0       	rjmp	.+22     	; 0xbf26 <vfprintf+0x38a>
    bf10:	80 2f       	mov	r24, r16
    bf12:	86 78       	andi	r24, 0x86	; 134
    bf14:	91 f0       	breq	.+36     	; 0xbf3a <vfprintf+0x39e>
    bf16:	01 ff       	sbrs	r16, 1
    bf18:	02 c0       	rjmp	.+4      	; 0xbf1e <vfprintf+0x382>
    bf1a:	8b e2       	ldi	r24, 0x2B	; 43
    bf1c:	01 c0       	rjmp	.+2      	; 0xbf20 <vfprintf+0x384>
    bf1e:	80 e2       	ldi	r24, 0x20	; 32
    bf20:	f7 fc       	sbrc	r15, 7
    bf22:	8d e2       	ldi	r24, 0x2D	; 45
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	b3 01       	movw	r22, r6
    bf28:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bf2c:	06 c0       	rjmp	.+12     	; 0xbf3a <vfprintf+0x39e>
    bf2e:	80 e3       	ldi	r24, 0x30	; 48
    bf30:	90 e0       	ldi	r25, 0x00	; 0
    bf32:	b3 01       	movw	r22, r6
    bf34:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bf38:	9a 94       	dec	r9
    bf3a:	d9 14       	cp	r13, r9
    bf3c:	c0 f3       	brcs	.-16     	; 0xbf2e <vfprintf+0x392>
    bf3e:	da 94       	dec	r13
    bf40:	f1 01       	movw	r30, r2
    bf42:	ed 0d       	add	r30, r13
    bf44:	f1 1d       	adc	r31, r1
    bf46:	80 81       	ld	r24, Z
    bf48:	90 e0       	ldi	r25, 0x00	; 0
    bf4a:	b3 01       	movw	r22, r6
    bf4c:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bf50:	dd 20       	and	r13, r13
    bf52:	a9 f7       	brne	.-22     	; 0xbf3e <vfprintf+0x3a2>
    bf54:	06 c0       	rjmp	.+12     	; 0xbf62 <vfprintf+0x3c6>
    bf56:	80 e2       	ldi	r24, 0x20	; 32
    bf58:	90 e0       	ldi	r25, 0x00	; 0
    bf5a:	b3 01       	movw	r22, r6
    bf5c:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <fputc>
    bf60:	ea 94       	dec	r14
    bf62:	ee 20       	and	r14, r14
    bf64:	c1 f7       	brne	.-16     	; 0xbf56 <vfprintf+0x3ba>
    bf66:	43 ce       	rjmp	.-890    	; 0xbbee <vfprintf+0x52>
    bf68:	f3 01       	movw	r30, r6
    bf6a:	66 81       	ldd	r22, Z+6	; 0x06
    bf6c:	77 81       	ldd	r23, Z+7	; 0x07
    bf6e:	cb 01       	movw	r24, r22
    bf70:	2b 96       	adiw	r28, 0x0b	; 11
    bf72:	cd bf       	out	0x3d, r28	; 61
    bf74:	de bf       	out	0x3e, r29	; 62
    bf76:	cf 91       	pop	r28
    bf78:	df 91       	pop	r29
    bf7a:	1f 91       	pop	r17
    bf7c:	0f 91       	pop	r16
    bf7e:	ff 90       	pop	r15
    bf80:	ef 90       	pop	r14
    bf82:	df 90       	pop	r13
    bf84:	cf 90       	pop	r12
    bf86:	bf 90       	pop	r11
    bf88:	af 90       	pop	r10
    bf8a:	9f 90       	pop	r9
    bf8c:	8f 90       	pop	r8
    bf8e:	7f 90       	pop	r7
    bf90:	6f 90       	pop	r6
    bf92:	5f 90       	pop	r5
    bf94:	4f 90       	pop	r4
    bf96:	3f 90       	pop	r3
    bf98:	2f 90       	pop	r2
    bf9a:	08 95       	ret

0000bf9c <strnlen_P>:
    bf9c:	fc 01       	movw	r30, r24
    bf9e:	05 90       	lpm	r0, Z+
    bfa0:	61 50       	subi	r22, 0x01	; 1
    bfa2:	70 40       	sbci	r23, 0x00	; 0
    bfa4:	01 10       	cpse	r0, r1
    bfa6:	d8 f7       	brcc	.-10     	; 0xbf9e <strnlen_P+0x2>
    bfa8:	80 95       	com	r24
    bfaa:	90 95       	com	r25
    bfac:	8e 0f       	add	r24, r30
    bfae:	9f 1f       	adc	r25, r31
    bfb0:	08 95       	ret

0000bfb2 <memcpy>:
    bfb2:	fb 01       	movw	r30, r22
    bfb4:	dc 01       	movw	r26, r24
    bfb6:	02 c0       	rjmp	.+4      	; 0xbfbc <memcpy+0xa>
    bfb8:	01 90       	ld	r0, Z+
    bfba:	0d 92       	st	X+, r0
    bfbc:	41 50       	subi	r20, 0x01	; 1
    bfbe:	50 40       	sbci	r21, 0x00	; 0
    bfc0:	d8 f7       	brcc	.-10     	; 0xbfb8 <memcpy+0x6>
    bfc2:	08 95       	ret

0000bfc4 <strnlen>:
    bfc4:	fc 01       	movw	r30, r24
    bfc6:	61 50       	subi	r22, 0x01	; 1
    bfc8:	70 40       	sbci	r23, 0x00	; 0
    bfca:	01 90       	ld	r0, Z+
    bfcc:	01 10       	cpse	r0, r1
    bfce:	d8 f7       	brcc	.-10     	; 0xbfc6 <strnlen+0x2>
    bfd0:	80 95       	com	r24
    bfd2:	90 95       	com	r25
    bfd4:	8e 0f       	add	r24, r30
    bfd6:	9f 1f       	adc	r25, r31
    bfd8:	08 95       	ret

0000bfda <strrev>:
    bfda:	dc 01       	movw	r26, r24
    bfdc:	fc 01       	movw	r30, r24
    bfde:	67 2f       	mov	r22, r23
    bfe0:	71 91       	ld	r23, Z+
    bfe2:	77 23       	and	r23, r23
    bfe4:	e1 f7       	brne	.-8      	; 0xbfde <strrev+0x4>
    bfe6:	32 97       	sbiw	r30, 0x02	; 2
    bfe8:	04 c0       	rjmp	.+8      	; 0xbff2 <strrev+0x18>
    bfea:	7c 91       	ld	r23, X
    bfec:	6d 93       	st	X+, r22
    bfee:	70 83       	st	Z, r23
    bff0:	62 91       	ld	r22, -Z
    bff2:	ae 17       	cp	r26, r30
    bff4:	bf 07       	cpc	r27, r31
    bff6:	c8 f3       	brcs	.-14     	; 0xbfea <strrev+0x10>
    bff8:	08 95       	ret

0000bffa <fputc>:
    bffa:	0f 93       	push	r16
    bffc:	1f 93       	push	r17
    bffe:	cf 93       	push	r28
    c000:	df 93       	push	r29
    c002:	8c 01       	movw	r16, r24
    c004:	eb 01       	movw	r28, r22
    c006:	8b 81       	ldd	r24, Y+3	; 0x03
    c008:	81 ff       	sbrs	r24, 1
    c00a:	1b c0       	rjmp	.+54     	; 0xc042 <fputc+0x48>
    c00c:	82 ff       	sbrs	r24, 2
    c00e:	0d c0       	rjmp	.+26     	; 0xc02a <fputc+0x30>
    c010:	2e 81       	ldd	r18, Y+6	; 0x06
    c012:	3f 81       	ldd	r19, Y+7	; 0x07
    c014:	8c 81       	ldd	r24, Y+4	; 0x04
    c016:	9d 81       	ldd	r25, Y+5	; 0x05
    c018:	28 17       	cp	r18, r24
    c01a:	39 07       	cpc	r19, r25
    c01c:	64 f4       	brge	.+24     	; 0xc036 <fputc+0x3c>
    c01e:	e8 81       	ld	r30, Y
    c020:	f9 81       	ldd	r31, Y+1	; 0x01
    c022:	01 93       	st	Z+, r16
    c024:	e8 83       	st	Y, r30
    c026:	f9 83       	std	Y+1, r31	; 0x01
    c028:	06 c0       	rjmp	.+12     	; 0xc036 <fputc+0x3c>
    c02a:	e8 85       	ldd	r30, Y+8	; 0x08
    c02c:	f9 85       	ldd	r31, Y+9	; 0x09
    c02e:	80 2f       	mov	r24, r16
    c030:	19 95       	eicall
    c032:	89 2b       	or	r24, r25
    c034:	31 f4       	brne	.+12     	; 0xc042 <fputc+0x48>
    c036:	8e 81       	ldd	r24, Y+6	; 0x06
    c038:	9f 81       	ldd	r25, Y+7	; 0x07
    c03a:	01 96       	adiw	r24, 0x01	; 1
    c03c:	8e 83       	std	Y+6, r24	; 0x06
    c03e:	9f 83       	std	Y+7, r25	; 0x07
    c040:	02 c0       	rjmp	.+4      	; 0xc046 <fputc+0x4c>
    c042:	0f ef       	ldi	r16, 0xFF	; 255
    c044:	1f ef       	ldi	r17, 0xFF	; 255
    c046:	c8 01       	movw	r24, r16
    c048:	df 91       	pop	r29
    c04a:	cf 91       	pop	r28
    c04c:	1f 91       	pop	r17
    c04e:	0f 91       	pop	r16
    c050:	08 95       	ret

0000c052 <__ultoa_invert>:
    c052:	fa 01       	movw	r30, r20
    c054:	aa 27       	eor	r26, r26
    c056:	28 30       	cpi	r18, 0x08	; 8
    c058:	51 f1       	breq	.+84     	; 0xc0ae <__ultoa_invert+0x5c>
    c05a:	20 31       	cpi	r18, 0x10	; 16
    c05c:	81 f1       	breq	.+96     	; 0xc0be <__ultoa_invert+0x6c>
    c05e:	e8 94       	clt
    c060:	6f 93       	push	r22
    c062:	6e 7f       	andi	r22, 0xFE	; 254
    c064:	6e 5f       	subi	r22, 0xFE	; 254
    c066:	7f 4f       	sbci	r23, 0xFF	; 255
    c068:	8f 4f       	sbci	r24, 0xFF	; 255
    c06a:	9f 4f       	sbci	r25, 0xFF	; 255
    c06c:	af 4f       	sbci	r26, 0xFF	; 255
    c06e:	b1 e0       	ldi	r27, 0x01	; 1
    c070:	3e d0       	rcall	.+124    	; 0xc0ee <__ultoa_invert+0x9c>
    c072:	b4 e0       	ldi	r27, 0x04	; 4
    c074:	3c d0       	rcall	.+120    	; 0xc0ee <__ultoa_invert+0x9c>
    c076:	67 0f       	add	r22, r23
    c078:	78 1f       	adc	r23, r24
    c07a:	89 1f       	adc	r24, r25
    c07c:	9a 1f       	adc	r25, r26
    c07e:	a1 1d       	adc	r26, r1
    c080:	68 0f       	add	r22, r24
    c082:	79 1f       	adc	r23, r25
    c084:	8a 1f       	adc	r24, r26
    c086:	91 1d       	adc	r25, r1
    c088:	a1 1d       	adc	r26, r1
    c08a:	6a 0f       	add	r22, r26
    c08c:	71 1d       	adc	r23, r1
    c08e:	81 1d       	adc	r24, r1
    c090:	91 1d       	adc	r25, r1
    c092:	a1 1d       	adc	r26, r1
    c094:	20 d0       	rcall	.+64     	; 0xc0d6 <__ultoa_invert+0x84>
    c096:	09 f4       	brne	.+2      	; 0xc09a <__ultoa_invert+0x48>
    c098:	68 94       	set
    c09a:	3f 91       	pop	r19
    c09c:	2a e0       	ldi	r18, 0x0A	; 10
    c09e:	26 9f       	mul	r18, r22
    c0a0:	11 24       	eor	r1, r1
    c0a2:	30 19       	sub	r19, r0
    c0a4:	30 5d       	subi	r19, 0xD0	; 208
    c0a6:	31 93       	st	Z+, r19
    c0a8:	de f6       	brtc	.-74     	; 0xc060 <__ultoa_invert+0xe>
    c0aa:	cf 01       	movw	r24, r30
    c0ac:	08 95       	ret
    c0ae:	46 2f       	mov	r20, r22
    c0b0:	47 70       	andi	r20, 0x07	; 7
    c0b2:	40 5d       	subi	r20, 0xD0	; 208
    c0b4:	41 93       	st	Z+, r20
    c0b6:	b3 e0       	ldi	r27, 0x03	; 3
    c0b8:	0f d0       	rcall	.+30     	; 0xc0d8 <__ultoa_invert+0x86>
    c0ba:	c9 f7       	brne	.-14     	; 0xc0ae <__ultoa_invert+0x5c>
    c0bc:	f6 cf       	rjmp	.-20     	; 0xc0aa <__ultoa_invert+0x58>
    c0be:	46 2f       	mov	r20, r22
    c0c0:	4f 70       	andi	r20, 0x0F	; 15
    c0c2:	40 5d       	subi	r20, 0xD0	; 208
    c0c4:	4a 33       	cpi	r20, 0x3A	; 58
    c0c6:	18 f0       	brcs	.+6      	; 0xc0ce <__ultoa_invert+0x7c>
    c0c8:	49 5d       	subi	r20, 0xD9	; 217
    c0ca:	31 fd       	sbrc	r19, 1
    c0cc:	40 52       	subi	r20, 0x20	; 32
    c0ce:	41 93       	st	Z+, r20
    c0d0:	02 d0       	rcall	.+4      	; 0xc0d6 <__ultoa_invert+0x84>
    c0d2:	a9 f7       	brne	.-22     	; 0xc0be <__ultoa_invert+0x6c>
    c0d4:	ea cf       	rjmp	.-44     	; 0xc0aa <__ultoa_invert+0x58>
    c0d6:	b4 e0       	ldi	r27, 0x04	; 4
    c0d8:	a6 95       	lsr	r26
    c0da:	97 95       	ror	r25
    c0dc:	87 95       	ror	r24
    c0de:	77 95       	ror	r23
    c0e0:	67 95       	ror	r22
    c0e2:	ba 95       	dec	r27
    c0e4:	c9 f7       	brne	.-14     	; 0xc0d8 <__ultoa_invert+0x86>
    c0e6:	00 97       	sbiw	r24, 0x00	; 0
    c0e8:	61 05       	cpc	r22, r1
    c0ea:	71 05       	cpc	r23, r1
    c0ec:	08 95       	ret
    c0ee:	9b 01       	movw	r18, r22
    c0f0:	ac 01       	movw	r20, r24
    c0f2:	0a 2e       	mov	r0, r26
    c0f4:	06 94       	lsr	r0
    c0f6:	57 95       	ror	r21
    c0f8:	47 95       	ror	r20
    c0fa:	37 95       	ror	r19
    c0fc:	27 95       	ror	r18
    c0fe:	ba 95       	dec	r27
    c100:	c9 f7       	brne	.-14     	; 0xc0f4 <__ultoa_invert+0xa2>
    c102:	62 0f       	add	r22, r18
    c104:	73 1f       	adc	r23, r19
    c106:	84 1f       	adc	r24, r20
    c108:	95 1f       	adc	r25, r21
    c10a:	a0 1d       	adc	r26, r0
    c10c:	08 95       	ret

0000c10e <_exit>:
    c10e:	f8 94       	cli

0000c110 <__stop_program>:
    c110:	ff cf       	rjmp	.-2      	; 0xc110 <__stop_program>
