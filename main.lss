
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b8f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000010d0  00802000  0000b8f8  0000b98c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028f1  008030d0  008030d0  0000ca5c  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  0000ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000e988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001a9c  00000000  00000000  0000f190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009b8e  00000000  00000000  00010c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009f1  00000000  00000000  0001a7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007c2c  00000000  00000000  0001b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b20  00000000  00000000  00022dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000048ce  00000000  00000000  000238f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007310  00000000  00000000  000281c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005b8  00000000  00000000  0002f4d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 04 2c 	jmp	0x5808	; 0x5808 <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 40 4e 	jmp	0x9c80	; 0x9c80 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 59 40 	jmp	0x80b2	; 0x80b2 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 e0 32 	jmp	0x65c0	; 0x65c0 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 59 53 	jmp	0xa6b2	; 0xa6b2 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 2a 31 	jmp	0x6254	; 0x6254 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	10 e3       	ldi	r17, 0x30	; 48
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e8 ef       	ldi	r30, 0xF8	; 248
     200:	f8 eb       	ldi	r31, 0xB8	; 184
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a0 3d       	cpi	r26, 0xD0	; 208
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	19 e5       	ldi	r17, 0x59	; 89
     214:	a0 ed       	ldi	r26, 0xD0	; 208
     216:	b0 e3       	ldi	r27, 0x30	; 48
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a1 3c       	cpi	r26, 0xC1	; 193
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 31 48 	call	0x9062	; 0x9062 <main>
     226:	0c 94 7a 5c 	jmp	0xb8f4	; 0xb8f4 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;


void Debug_Init(void){
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     22e:	e0 e4       	ldi	r30, 0x40	; 64
     230:	f6 e0       	ldi	r31, 0x06	; 6
     232:	88 e0       	ldi	r24, 0x08	; 8
     234:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     23a:	e0 e6       	ldi	r30, 0x60	; 96
     23c:	f6 e0       	ldi	r31, 0x06	; 6
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	82 83       	std	Z+2, r24	; 0x02
    Debug_Flow_Port.Debug_RTS_CNTL = PORT_OPC_PULLUP_gc;
     242:	88 e1       	ldi	r24, 0x18	; 24
     244:	80 8b       	std	Z+16, r24	; 0x10


	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     246:	e0 ea       	ldi	r30, 0xA0	; 160
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	85 83       	std	Z+5, r24	; 0x05
    //Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);

    //Debug_Usart.BAUDCTRLA = 7 & 0xFF;               // 115200
    //Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);

    Debug_Usart.BAUDCTRLA = 128 & 0xFF;                   // 460800;
     24e:	80 e8       	ldi	r24, 0x80	; 128
     250:	86 83       	std	Z+6, r24	; 0x06
    Debug_Usart.BAUDCTRLB = (0b1001 << USART_BSCALE0_bp)|(128 >> 8);
     252:	80 e9       	ldi	r24, 0x90	; 144
     254:	87 83       	std	Z+7, r24	; 0x07

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     256:	84 81       	ldd	r24, Z+4	; 0x04
     258:	80 61       	ori	r24, 0x10	; 16
     25a:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     25c:	84 81       	ldd	r24, Z+4	; 0x04
     25e:	88 60       	ori	r24, 0x08	; 8
     260:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     262:	83 81       	ldd	r24, Z+3	; 0x03
     264:	80 62       	ori	r24, 0x20	; 32
     266:	83 83       	std	Z+3, r24	; 0x03
}
     268:	08 95       	ret

0000026a <Debug_ClearBuffer>:
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     26a:	80 91 00 31 	lds	r24, 0x3100
     26e:	90 91 01 31 	lds	r25, 0x3101
     272:	80 93 02 31 	sts	0x3102, r24
     276:	90 93 03 31 	sts	0x3103, r25
}
     27a:	08 95       	ret

0000027c <Debug_CharReadyToRead>:


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     27c:	20 91 02 31 	lds	r18, 0x3102
     280:	30 91 03 31 	lds	r19, 0x3103
     284:	80 91 00 31 	lds	r24, 0x3100
     288:	90 91 01 31 	lds	r25, 0x3101
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	28 17       	cp	r18, r24
     290:	39 07       	cpc	r19, r25
     292:	09 f0       	breq	.+2      	; 0x296 <Debug_CharReadyToRead+0x1a>
     294:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     296:	84 2f       	mov	r24, r20
     298:	08 95       	ret

0000029a <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     29a:	88 23       	and	r24, r24
     29c:	59 f0       	breq	.+22     	; 0x2b4 <Debug_GetByte+0x1a>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     29e:	20 91 02 31 	lds	r18, 0x3102
     2a2:	30 91 03 31 	lds	r19, 0x3103
     2a6:	80 91 00 31 	lds	r24, 0x3100
     2aa:	90 91 01 31 	lds	r25, 0x3101
     2ae:	28 17       	cp	r18, r24
     2b0:	39 07       	cpc	r19, r25
     2b2:	a9 f3       	breq	.-22     	; 0x29e <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     2b4:	e0 91 00 31 	lds	r30, 0x3100
     2b8:	f0 91 01 31 	lds	r31, 0x3101
     2bc:	e9 56       	subi	r30, 0x69	; 105
     2be:	f7 4b       	sbci	r31, 0xB7	; 183
     2c0:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     2c2:	80 91 00 31 	lds	r24, 0x3100
     2c6:	90 91 01 31 	lds	r25, 0x3101
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	80 93 00 31 	sts	0x3100, r24
     2d0:	90 93 01 31 	sts	0x3101, r25
	if(Debug_readLocation >= Debug_BufferSize){
     2d4:	80 91 00 31 	lds	r24, 0x3100
     2d8:	90 91 01 31 	lds	r25, 0x3101
     2dc:	80 50       	subi	r24, 0x00	; 0
     2de:	94 40       	sbci	r25, 0x04	; 4
     2e0:	20 f0       	brcs	.+8      	; 0x2ea <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     2e2:	10 92 00 31 	sts	0x3100, r1
     2e6:	10 92 01 31 	sts	0x3101, r1
	}
	return tmp;
}
     2ea:	8e 2f       	mov	r24, r30
     2ec:	08 95       	ret

000002ee <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     2ee:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     2f0:	80 91 a1 08 	lds	r24, 0x08A1
     2f4:	85 ff       	sbrs	r24, 5
     2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0);                              // Wait for RTS to be low
     2f8:	80 91 68 06 	lds	r24, 0x0668
     2fc:	80 fd       	sbrc	r24, 0
     2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <Debug_SendByte+0xa>
	Debug_Usart.DATA = data;
     300:	90 93 a0 08 	sts	0x08A0, r25
}
     304:	08 95       	ret

00000306 <__vector_25>:
		Debug_SendByte(13);
		Debug_SendByte(10);
	}
}

ISR(USARTC0_RXC_vect){
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	0b b6       	in	r0, 0x3b	; 59
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     31e:	e0 91 02 31 	lds	r30, 0x3102
     322:	f0 91 03 31 	lds	r31, 0x3103
     326:	80 91 a0 08 	lds	r24, 0x08A0
     32a:	e9 56       	subi	r30, 0x69	; 105
     32c:	f7 4b       	sbci	r31, 0xB7	; 183
     32e:	80 83       	st	Z, r24
	Debug_writeLocation++;
     330:	80 91 02 31 	lds	r24, 0x3102
     334:	90 91 03 31 	lds	r25, 0x3103
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	80 93 02 31 	sts	0x3102, r24
     33e:	90 93 03 31 	sts	0x3103, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     342:	80 91 02 31 	lds	r24, 0x3102
     346:	90 91 03 31 	lds	r25, 0x3103
     34a:	80 50       	subi	r24, 0x00	; 0
     34c:	94 40       	sbci	r25, 0x04	; 4
     34e:	20 f0       	brcs	.+8      	; 0x358 <__vector_25+0x52>
		Debug_writeLocation = 0;
     350:	10 92 02 31 	sts	0x3102, r1
     354:	10 92 03 31 	sts	0x3103, r1
	}
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	2f 91       	pop	r18
     362:	0f 90       	pop	r0
     364:	0b be       	out	0x3b, r0	; 59
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <Debug_GetTime>:

uint32_t Debug_GetTime(uint16_t timeOut){
     370:	bf 92       	push	r11
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	18 2f       	mov	r17, r24
     384:	09 2f       	mov	r16, r25
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     386:	80 91 00 31 	lds	r24, 0x3100
     38a:	90 91 01 31 	lds	r25, 0x3101
     38e:	80 93 02 31 	sts	0x3102, r24
     392:	90 93 03 31 	sts	0x3103, r25
uint32_t Debug_GetTime(uint16_t timeOut){
    uint16_t to = timeOut;
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first
     396:	84 e5       	ldi	r24, 0x54	; 84
     398:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
     39c:	21 2f       	mov	r18, r17
     39e:	30 2f       	mov	r19, r16
     3a0:	c9 01       	movw	r24, r18
     3a2:	8c 01       	movw	r16, r24
     3a4:	cc 24       	eor	r12, r12
     3a6:	dd 24       	eor	r13, r13
     3a8:	76 01       	movw	r14, r12
     3aa:	bb 24       	eor	r11, r11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ac:	c6 e6       	ldi	r28, 0x66	; 102
     3ae:	de e0       	ldi	r29, 0x0E	; 14
     3b0:	15 c0       	rjmp	.+42     	; 0x3dc <Debug_GetTime+0x6c>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     3b2:	20 91 02 31 	lds	r18, 0x3102
     3b6:	30 91 03 31 	lds	r19, 0x3103
     3ba:	80 91 00 31 	lds	r24, 0x3100
     3be:	90 91 01 31 	lds	r25, 0x3101
     3c2:	28 17       	cp	r18, r24
     3c4:	39 07       	cpc	r19, r25
     3c6:	e9 f4       	brne	.+58     	; 0x402 <Debug_GetTime+0x92>
     3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <Debug_GetTime+0x62>
         tempTime  |= Debug_GetByte(true) & 0xFF;
         byteCounter++;
         if(byteCounter == 4){
            return tempTime;
         } else {
             tempTime <<= 8;
     3ca:	cc 24       	eor	r12, r12
     3cc:	d2 2e       	mov	r13, r18
     3ce:	e3 2e       	mov	r14, r19
     3d0:	f4 2e       	mov	r15, r20
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <Debug_GetTime+0x64>
         }
      }
      _delay_ms(1);
      to--;
     3d8:	01 50       	subi	r16, 0x01	; 1
     3da:	10 40       	sbci	r17, 0x00	; 0
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
     3dc:	01 15       	cp	r16, r1
     3de:	11 05       	cpc	r17, r1
     3e0:	41 f7       	brne	.-48     	; 0x3b2 <Debug_GetTime+0x42>
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	50 e0       	ldi	r21, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return 0;
}
     3ea:	b9 01       	movw	r22, r18
     3ec:	ca 01       	movw	r24, r20
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	bf 90       	pop	r11
     400:	08 95       	ret
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
      if(Debug_CharReadyToRead()){
         tempTime  |= Debug_GetByte(true) & 0xFF;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	2c 29       	or	r18, r12
     412:	3d 29       	or	r19, r13
     414:	4e 29       	or	r20, r14
     416:	5f 29       	or	r21, r15
         byteCounter++;
     418:	b3 94       	inc	r11
         if(byteCounter == 4){
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	b8 16       	cp	r11, r24
     41e:	a9 f6       	brne	.-86     	; 0x3ca <Debug_GetTime+0x5a>
     420:	e4 cf       	rjmp	.-56     	; 0x3ea <Debug_GetTime+0x7a>

00000422 <Debug_Connected>:
      to--;
    }
    return 0;
}

bool Debug_Connected(uint16_t timeOut){
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	18 2f       	mov	r17, r24
     42c:	09 2f       	mov	r16, r25
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
     42e:	80 91 00 31 	lds	r24, 0x3100
     432:	90 91 01 31 	lds	r25, 0x3101
     436:	80 93 02 31 	sts	0x3102, r24
     43a:	90 93 03 31 	sts	0x3103, r25
}

bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
     43e:	80 e5       	ldi	r24, 0x50	; 80
     440:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
     444:	21 2f       	mov	r18, r17
     446:	30 2f       	mov	r19, r16
     448:	c9 01       	movw	r24, r18
     44a:	8c 01       	movw	r16, r24
     44c:	c6 e6       	ldi	r28, 0x66	; 102
     44e:	de e0       	ldi	r29, 0x0E	; 14
     450:	10 c0       	rjmp	.+32     	; 0x472 <Debug_Connected+0x50>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     452:	20 91 02 31 	lds	r18, 0x3102
     456:	30 91 03 31 	lds	r19, 0x3103
     45a:	80 91 00 31 	lds	r24, 0x3100
     45e:	90 91 01 31 	lds	r25, 0x3101
     462:	28 17       	cp	r18, r24
     464:	39 07       	cpc	r19, r25
     466:	71 f4       	brne	.+28     	; 0x484 <Debug_Connected+0x62>
     468:	ce 01       	movw	r24, r28
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <Debug_Connected+0x48>
         if(Debug_GetByte(true) == 'P'){
           return true;
         }
      }
      _delay_ms(1);
      to--;
     46e:	01 50       	subi	r16, 0x01	; 1
     470:	10 40       	sbci	r17, 0x00	; 0

bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
     472:	01 15       	cp	r16, r1
     474:	11 05       	cpc	r17, r1
     476:	69 f7       	brne	.-38     	; 0x452 <Debug_Connected+0x30>
     478:	80 e0       	ldi	r24, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return false;
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
      if(Debug_CharReadyToRead()){
         if(Debug_GetByte(true) == 'P'){
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
     48a:	80 35       	cpi	r24, 0x50	; 80
     48c:	69 f7       	brne	.-38     	; 0x468 <Debug_Connected+0x46>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	f4 cf       	rjmp	.-24     	; 0x47a <Debug_Connected+0x58>

00000492 <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     492:	20 91 1d 01 	lds	r18, 0x011D
     496:	92 2f       	mov	r25, r18
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	80 93 06 31 	sts	0x3106, r24
     49e:	90 93 07 31 	sts	0x3107, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     4a2:	80 91 06 31 	lds	r24, 0x3106
     4a6:	90 91 07 31 	lds	r25, 0x3107
     4aa:	20 91 1c 01 	lds	r18, 0x011C
     4ae:	82 0f       	add	r24, r18
     4b0:	91 1d       	adc	r25, r1
     4b2:	80 93 06 31 	sts	0x3106, r24
     4b6:	90 93 07 31 	sts	0x3107, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     4ba:	80 91 06 31 	lds	r24, 0x3106
     4be:	90 91 07 31 	lds	r25, 0x3107
     4c2:	8d 59       	subi	r24, 0x9D	; 157
     4c4:	9a 43       	sbci	r25, 0x3A	; 58
     4c6:	80 93 06 31 	sts	0x3106, r24
     4ca:	90 93 07 31 	sts	0x3107, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     4ce:	20 91 06 31 	lds	r18, 0x3106
     4d2:	30 91 07 31 	lds	r19, 0x3107
     4d6:	80 91 04 31 	lds	r24, 0x3104
     4da:	90 91 05 31 	lds	r25, 0x3105
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <Wifi_CharReadyToRead+0x56>
     4e6:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     4e8:	84 2f       	mov	r24, r20
     4ea:	08 95       	ret

000004ec <Wifi_ClearBuffer>:
	Wifi_ClearBuffer();

}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     4ec:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
     4f0:	88 23       	and	r24, r24
     4f2:	31 f1       	breq	.+76     	; 0x540 <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     4f4:	20 91 1d 01 	lds	r18, 0x011D
     4f8:	92 2f       	mov	r25, r18
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	80 93 06 31 	sts	0x3106, r24
     500:	90 93 07 31 	sts	0x3107, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     504:	80 91 06 31 	lds	r24, 0x3106
     508:	90 91 07 31 	lds	r25, 0x3107
     50c:	20 91 1c 01 	lds	r18, 0x011C
     510:	82 0f       	add	r24, r18
     512:	91 1d       	adc	r25, r1
     514:	80 93 06 31 	sts	0x3106, r24
     518:	90 93 07 31 	sts	0x3107, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     51c:	80 91 06 31 	lds	r24, 0x3106
     520:	90 91 07 31 	lds	r25, 0x3107
     524:	8d 59       	subi	r24, 0x9D	; 157
     526:	9a 43       	sbci	r25, 0x3A	; 58
     528:	80 93 06 31 	sts	0x3106, r24
     52c:	90 93 07 31 	sts	0x3107, r25
		Wifi_readLocation = Wifi_writeLocation;
     530:	80 91 06 31 	lds	r24, 0x3106
     534:	90 91 07 31 	lds	r25, 0x3107
     538:	80 93 04 31 	sts	0x3104, r24
     53c:	90 93 05 31 	sts	0x3105, r25
     540:	08 95       	ret

00000542 <Wifi_Init>:
volatile bool wifiBufferWasFull = false;

volatile uint16_t bufferDelayCounter = 0;


void Wifi_Init(uint32_t baud){
     542:	9b 01       	movw	r18, r22
     544:	ac 01       	movw	r20, r24


	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     546:	80 e8       	ldi	r24, 0x80	; 128
     548:	e0 ea       	ldi	r30, 0xA0	; 160
     54a:	f6 e0       	ldi	r31, 0x06	; 6
     54c:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.DIRCLR = (1<<Wifi_RTS_pin);
     54e:	e0 e6       	ldi	r30, 0x60	; 96
     550:	f6 e0       	ldi	r31, 0x06	; 6
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.Wifi_RTS_CNTL = PORT_OPC_PULLUP_gc;
     556:	88 e1       	ldi	r24, 0x18	; 24
     558:	81 8b       	std	Z+17, r24	; 0x11
    //Wifi_Flow_Port.DIRSET = (1<<Wifi_CTS_pin);
    //Wifi_Flow_Port.OUTCLR = (1<<Wifi_CTS_pin);


	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     55a:	a0 ea       	ldi	r26, 0xA0	; 160
     55c:	ba e0       	ldi	r27, 0x0A	; 10
     55e:	80 91 a4 0a 	lds	r24, 0x0AA4
     562:	8f 7e       	andi	r24, 0xEF	; 239
     564:	14 96       	adiw	r26, 0x04	; 4
     566:	8c 93       	st	X, r24
     568:	14 97       	sbiw	r26, 0x04	; 4
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     56a:	80 91 a4 0a 	lds	r24, 0x0AA4
     56e:	87 7f       	andi	r24, 0xF7	; 247
     570:	14 96       	adiw	r26, 0x04	; 4
     572:	8c 93       	st	X, r24
     574:	14 97       	sbiw	r26, 0x04	; 4
	//_delay_ms(1000);


	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     576:	e0 e8       	ldi	r30, 0x80	; 128
     578:	f6 e0       	ldi	r31, 0x06	; 6
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	15 96       	adiw	r26, 0x05	; 5
     586:	8c 93       	st	X, r24
     588:	15 97       	sbiw	r26, 0x05	; 5
	 	    	
	if(baud == 9600){
     58a:	20 38       	cpi	r18, 0x80	; 128
     58c:	95 e2       	ldi	r25, 0x25	; 37
     58e:	39 07       	cpc	r19, r25
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	49 07       	cpc	r20, r25
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	59 07       	cpc	r21, r25
     598:	11 f4       	brne	.+4      	; 0x59e <Wifi_Init+0x5c>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     59a:	8f e5       	ldi	r24, 0x5F	; 95
     59c:	1b c0       	rjmp	.+54     	; 0x5d4 <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     59e:	20 30       	cpi	r18, 0x00	; 0
     5a0:	92 ec       	ldi	r25, 0xC2	; 194
     5a2:	39 07       	cpc	r19, r25
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	49 07       	cpc	r20, r25
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	59 07       	cpc	r21, r25
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <Wifi_Init+0x70>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     5b2:	20 30       	cpi	r18, 0x00	; 0
     5b4:	94 e8       	ldi	r25, 0x84	; 132
     5b6:	39 07       	cpc	r19, r25
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	49 07       	cpc	r20, r25
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	49 f0       	breq	.+18     	; 0x5d4 <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     5c2:	20 30       	cpi	r18, 0x00	; 0
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	38 07       	cpc	r19, r24
     5c8:	87 e0       	ldi	r24, 0x07	; 7
     5ca:	48 07       	cpc	r20, r24
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	58 07       	cpc	r21, r24
     5d0:	29 f4       	brne	.+10     	; 0x5dc <Wifi_Init+0x9a>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	16 96       	adiw	r26, 0x06	; 6
     5d6:	8c 93       	st	X, r24
     5d8:	16 97       	sbiw	r26, 0x06	; 6
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <Wifi_Init+0xaa>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     5dc:	20 50       	subi	r18, 0x00	; 0
     5de:	30 41       	sbci	r19, 0x10	; 16
     5e0:	4e 40       	sbci	r20, 0x0E	; 14
     5e2:	50 40       	sbci	r21, 0x00	; 0
     5e4:	29 f4       	brne	.+10     	; 0x5f0 <Wifi_Init+0xae>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     5e6:	16 96       	adiw	r26, 0x06	; 6
     5e8:	1c 92       	st	X, r1
     5ea:	16 97       	sbiw	r26, 0x06	; 6
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     5ec:	17 96       	adiw	r26, 0x07	; 7
     5ee:	1c 92       	st	X, r1
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     5f0:	e0 ea       	ldi	r30, 0xA0	; 160
     5f2:	fa e0       	ldi	r31, 0x0A	; 10
     5f4:	80 91 a4 0a 	lds	r24, 0x0AA4
     5f8:	80 61       	ori	r24, 0x10	; 16
     5fa:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     5fc:	80 91 a4 0a 	lds	r24, 0x0AA4
     600:	88 60       	ori	r24, 0x08	; 8
     602:	84 83       	std	Z+4, r24	; 0x04

	Wifi_ClearBuffer();
     604:	0e 94 76 02 	call	0x4ec	; 0x4ec <Wifi_ClearBuffer>

}
     608:	08 95       	ret

0000060a <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     60a:	88 23       	and	r24, r24
     60c:	21 f0       	breq	.+8      	; 0x616 <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     60e:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
     612:	88 23       	and	r24, r24
     614:	e1 f3       	breq	.-8      	; 0x60e <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     616:	e0 91 04 31 	lds	r30, 0x3104
     61a:	f0 91 05 31 	lds	r31, 0x3105
     61e:	e3 56       	subi	r30, 0x63	; 99
     620:	f5 4c       	sbci	r31, 0xC5	; 197
     622:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     624:	80 91 04 31 	lds	r24, 0x3104
     628:	90 91 05 31 	lds	r25, 0x3105
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	80 93 04 31 	sts	0x3104, r24
     632:	90 93 05 31 	sts	0x3105, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     636:	80 91 04 31 	lds	r24, 0x3104
     63a:	90 91 05 31 	lds	r25, 0x3105
     63e:	80 50       	subi	r24, 0x00	; 0
     640:	94 40       	sbci	r25, 0x04	; 4
     642:	20 f0       	brcs	.+8      	; 0x64c <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     644:	10 92 04 31 	sts	0x3104, r1
     648:	10 92 05 31 	sts	0x3105, r1
	}
	return tmp;
}
     64c:	8e 2f       	mov	r24, r30
     64e:	08 95       	ret

00000650 <Wifi_SendByte>:


void Wifi_SendByte(uint8_t data){
     650:	98 2f       	mov	r25, r24

	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
     652:	80 91 a1 0a 	lds	r24, 0x0AA1
     656:	85 ff       	sbrs	r24, 5
     658:	fc cf       	rjmp	.-8      	; 0x652 <Wifi_SendByte+0x2>
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0);                              // Wait for RTS to be low
     65a:	80 91 68 06 	lds	r24, 0x0668
     65e:	81 fd       	sbrc	r24, 1
     660:	fc cf       	rjmp	.-8      	; 0x65a <Wifi_SendByte+0xa>

	Wifi_Usart.DATA = data;
     662:	90 93 a0 0a 	sts	0x0AA0, r25

}
     666:	08 95       	ret

00000668 <Wifi_Connected>:
	
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
     668:	ac 01       	movw	r20, r24
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	66 e6       	ldi	r22, 0x66	; 102
     670:	7e e0       	ldi	r23, 0x0E	; 14
     672:	0d c0       	rjmp	.+26     	; 0x68e <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     674:	80 91 a8 06 	lds	r24, 0x06A8
     678:	87 ff       	sbrs	r24, 7
     67a:	04 c0       	rjmp	.+8      	; 0x684 <Wifi_Connected+0x1c>
			connected = true;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 14 31 	sts	0x3114, r24
     682:	08 95       	ret
     684:	fb 01       	movw	r30, r22
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <Wifi_Connected+0x1e>
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     68a:	2f 5f       	subi	r18, 0xFF	; 255
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	24 17       	cp	r18, r20
     690:	35 07       	cpc	r19, r21
     692:	80 f3       	brcs	.-32     	; 0x674 <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     694:	10 92 14 31 	sts	0x3114, r1
     698:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     69a:	08 95       	ret

0000069c <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f6 e0       	ldi	r31, 0x06	; 6
     6a0:	88 e1       	ldi	r24, 0x18	; 24
     6a2:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     6a4:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     6a6:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     6a8:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     6aa:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	8c 67       	ori	r24, 0x7C	; 124
     6b0:	82 83       	std	Z+2, r24	; 0x02
}
     6b2:	08 95       	ret

000006b4 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6b4:	e0 ea       	ldi	r30, 0xA0	; 160
     6b6:	f6 e0       	ldi	r31, 0x06	; 6
     6b8:	80 85       	ldd	r24, Z+8	; 0x08
}
     6ba:	8c 77       	andi	r24, 0x7C	; 124
     6bc:	08 95       	ret

000006be <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6be:	40 91 a8 06 	lds	r20, 0x06A8
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <Dpad_CheckButton+0x10>
     6ca:	22 0f       	add	r18, r18
     6cc:	33 1f       	adc	r19, r19
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <Dpad_CheckButton+0xc>
     6d2:	4c 77       	andi	r20, 0x7C	; 124
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	24 23       	and	r18, r20
     6d8:	35 23       	and	r19, r21
     6da:	12 16       	cp	r1, r18
     6dc:	13 06       	cpc	r1, r19
     6de:	0c f0       	brlt	.+2      	; 0x6e2 <Dpad_CheckButton+0x24>
     6e0:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     6e2:	89 2f       	mov	r24, r25
     6e4:	08 95       	ret

000006e6 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     6e6:	e0 e2       	ldi	r30, 0x20	; 32
     6e8:	f6 e0       	ldi	r31, 0x06	; 6
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	83 6f       	ori	r24, 0xF3	; 243
     6ee:	81 83       	std	Z+1, r24	; 0x01
}
     6f0:	08 95       	ret

000006f2 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Leds_Set+0xa>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	8a 95       	dec	r24
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <Leds_Set+0x6>
     700:	e0 e2       	ldi	r30, 0x20	; 32
     702:	f6 e0       	ldi	r31, 0x06	; 6
     704:	25 83       	std	Z+5, r18	; 0x05
}
     706:	08 95       	ret

00000708 <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	02 c0       	rjmp	.+4      	; 0x712 <Leds_Clear+0xa>
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	8a 95       	dec	r24
     714:	e2 f7       	brpl	.-8      	; 0x70e <Leds_Clear+0x6>
     716:	e0 e2       	ldi	r30, 0x20	; 32
     718:	f6 e0       	ldi	r31, 0x06	; 6
     71a:	26 83       	std	Z+6, r18	; 0x06
}
     71c:	08 95       	ret

0000071e <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <Leds_Toggle+0xa>
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	8a 95       	dec	r24
     72a:	e2 f7       	brpl	.-8      	; 0x724 <Leds_Toggle+0x6>
     72c:	e0 e2       	ldi	r30, 0x20	; 32
     72e:	f6 e0       	ldi	r31, 0x06	; 6
     730:	27 83       	std	Z+7, r18	; 0x07
}
     732:	08 95       	ret

00000734 <Rs232_Init>:
uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     734:	e0 e6       	ldi	r30, 0x60	; 96
     736:	f6 e0       	ldi	r31, 0x06	; 6
     738:	88 e0       	ldi	r24, 0x08	; 8
     73a:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     748:	8f e5       	ldi	r24, 0x5F	; 95
     74a:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     74c:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	80 61       	ori	r24, 0x10	; 16
     752:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	88 60       	ori	r24, 0x08	; 8
     758:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     75a:	83 81       	ldd	r24, Z+3	; 0x03
     75c:	80 62       	ori	r24, 0x20	; 32
     75e:	83 83       	std	Z+3, r24	; 0x03
}
     760:	08 95       	ret

00000762 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     762:	20 91 1a 31 	lds	r18, 0x311A
     766:	30 91 1b 31 	lds	r19, 0x311B
     76a:	80 91 18 31 	lds	r24, 0x3118
     76e:	90 91 19 31 	lds	r25, 0x3119
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	28 17       	cp	r18, r24
     776:	39 07       	cpc	r19, r25
     778:	09 f0       	breq	.+2      	; 0x77c <Rs232_CharReadyToRead+0x1a>
     77a:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     77c:	84 2f       	mov	r24, r20
     77e:	08 95       	ret

00000780 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     780:	88 23       	and	r24, r24
     782:	59 f0       	breq	.+22     	; 0x79a <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     784:	20 91 1a 31 	lds	r18, 0x311A
     788:	30 91 1b 31 	lds	r19, 0x311B
     78c:	80 91 18 31 	lds	r24, 0x3118
     790:	90 91 19 31 	lds	r25, 0x3119
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	a9 f3       	breq	.-22     	; 0x784 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     79a:	e0 91 18 31 	lds	r30, 0x3118
     79e:	f0 91 19 31 	lds	r31, 0x3119
     7a2:	e5 58       	subi	r30, 0x85	; 133
     7a4:	fb 4a       	sbci	r31, 0xAB	; 171
     7a6:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     7a8:	80 91 18 31 	lds	r24, 0x3118
     7ac:	90 91 19 31 	lds	r25, 0x3119
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	80 93 18 31 	sts	0x3118, r24
     7b6:	90 93 19 31 	sts	0x3119, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     7ba:	80 91 18 31 	lds	r24, 0x3118
     7be:	90 91 19 31 	lds	r25, 0x3119
     7c2:	80 50       	subi	r24, 0x00	; 0
     7c4:	94 40       	sbci	r25, 0x04	; 4
     7c6:	20 f0       	brcs	.+8      	; 0x7d0 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     7c8:	10 92 18 31 	sts	0x3118, r1
     7cc:	10 92 19 31 	sts	0x3119, r1
	}
	return tmp;
}
     7d0:	8e 2f       	mov	r24, r30
     7d2:	08 95       	ret

000007d4 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     7d4:	80 91 1a 31 	lds	r24, 0x311A
     7d8:	90 91 1b 31 	lds	r25, 0x311B
     7dc:	80 93 18 31 	sts	0x3118, r24
     7e0:	90 93 19 31 	sts	0x3119, r25
}
     7e4:	08 95       	ret

000007e6 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     7e6:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     7e8:	80 91 a1 09 	lds	r24, 0x09A1
     7ec:	85 ff       	sbrs	r24, 5
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     7f0:	90 93 a0 09 	sts	0x09A0, r25
}
     7f4:	08 95       	ret

000007f6 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     7f6:	82 e3       	ldi	r24, 0x32	; 50
     7f8:	80 93 98 31 	sts	0x3198, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	e0 ec       	ldi	r30, 0xC0	; 192
     800:	f9 e0       	ldi	r31, 0x09	; 9
     802:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     804:	80 91 c2 09 	lds	r24, 0x09C2
     808:	87 ff       	sbrs	r24, 7
     80a:	fc cf       	rjmp	.-8      	; 0x804 <wait_ready+0xe>
	return SD_SPI.DATA;
     80c:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     810:	e0 ec       	ldi	r30, 0xC0	; 192
     812:	f9 e0       	ldi	r31, 0x09	; 9
     814:	2f ef       	ldi	r18, 0xFF	; 255
     816:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     818:	80 91 c2 09 	lds	r24, 0x09C2
     81c:	87 ff       	sbrs	r24, 7
     81e:	fc cf       	rjmp	.-8      	; 0x818 <wait_ready+0x22>
	return SD_SPI.DATA;
     820:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     824:	9f 3f       	cpi	r25, 0xFF	; 255
     826:	21 f0       	breq	.+8      	; 0x830 <wait_ready+0x3a>
     828:	80 91 98 31 	lds	r24, 0x3198
     82c:	88 23       	and	r24, r24
     82e:	99 f7       	brne	.-26     	; 0x816 <wait_ready+0x20>

	return res;
}
     830:	89 2f       	mov	r24, r25
     832:	08 95       	ret

00000834 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
	CS_LOW();
     83a:	c0 e6       	ldi	r28, 0x60	; 96
     83c:	d6 e0       	ldi	r29, 0x06	; 6
     83e:	10 e1       	ldi	r17, 0x10	; 16
     840:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     842:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <wait_ready>
     846:	8f 3f       	cpi	r24, 0xFF	; 255
     848:	11 f4       	brne	.+4      	; 0x84e <select+0x1a>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0c c0       	rjmp	.+24     	; 0x866 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     84e:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	e0 ec       	ldi	r30, 0xC0	; 192
     854:	f9 e0       	ldi	r31, 0x09	; 9
     856:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     858:	80 91 c2 09 	lds	r24, 0x09C2
     85c:	87 ff       	sbrs	r24, 7
     85e:	fc cf       	rjmp	.-8      	; 0x858 <select+0x24>
	return SD_SPI.DATA;
     860:	80 91 c3 09 	lds	r24, 0x09C3
     864:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	08 95       	ret

0000086e <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     86e:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     870:	84 e1       	ldi	r24, 0x14	; 20
     872:	80 93 97 31 	sts	0x3197, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     876:	a0 ec       	ldi	r26, 0xC0	; 192
     878:	b9 e0       	ldi	r27, 0x09	; 9
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	13 96       	adiw	r26, 0x03	; 3
     87e:	9c 93       	st	X, r25
     880:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     882:	80 91 c2 09 	lds	r24, 0x09C2
     886:	87 ff       	sbrs	r24, 7
     888:	fc cf       	rjmp	.-8      	; 0x882 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     88a:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	29 f4       	brne	.+10     	; 0x89c <rcvr_datablock+0x2e>
     892:	80 91 97 31 	lds	r24, 0x3197
     896:	88 23       	and	r24, r24
     898:	89 f7       	brne	.-30     	; 0x87c <rcvr_datablock+0xe>
     89a:	49 c0       	rjmp	.+146    	; 0x92e <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     89c:	8e 3f       	cpi	r24, 0xFE	; 254
     89e:	09 f0       	breq	.+2      	; 0x8a2 <rcvr_datablock+0x34>
     8a0:	46 c0       	rjmp	.+140    	; 0x92e <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     8a2:	a0 ec       	ldi	r26, 0xC0	; 192
     8a4:	b9 e0       	ldi	r27, 0x09	; 9
     8a6:	9f ef       	ldi	r25, 0xFF	; 255
     8a8:	13 96       	adiw	r26, 0x03	; 3
     8aa:	9c 93       	st	X, r25
     8ac:	13 97       	sbiw	r26, 0x03	; 3
     8ae:	80 91 c2 09 	lds	r24, 0x09C2
     8b2:	87 ff       	sbrs	r24, 7
     8b4:	fc cf       	rjmp	.-8      	; 0x8ae <rcvr_datablock+0x40>
     8b6:	80 91 c3 09 	lds	r24, 0x09C3
     8ba:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     8bc:	13 96       	adiw	r26, 0x03	; 3
     8be:	9c 93       	st	X, r25
     8c0:	13 97       	sbiw	r26, 0x03	; 3
     8c2:	80 91 c2 09 	lds	r24, 0x09C2
     8c6:	87 ff       	sbrs	r24, 7
     8c8:	fc cf       	rjmp	.-8      	; 0x8c2 <rcvr_datablock+0x54>
     8ca:	80 91 c3 09 	lds	r24, 0x09C3
     8ce:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     8d0:	13 96       	adiw	r26, 0x03	; 3
     8d2:	9c 93       	st	X, r25
     8d4:	13 97       	sbiw	r26, 0x03	; 3
     8d6:	80 91 c2 09 	lds	r24, 0x09C2
     8da:	87 ff       	sbrs	r24, 7
     8dc:	fc cf       	rjmp	.-8      	; 0x8d6 <rcvr_datablock+0x68>
     8de:	80 91 c3 09 	lds	r24, 0x09C3
     8e2:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     8e4:	13 96       	adiw	r26, 0x03	; 3
     8e6:	9c 93       	st	X, r25
     8e8:	13 97       	sbiw	r26, 0x03	; 3
     8ea:	80 91 c2 09 	lds	r24, 0x09C2
     8ee:	87 ff       	sbrs	r24, 7
     8f0:	fc cf       	rjmp	.-8      	; 0x8ea <rcvr_datablock+0x7c>
     8f2:	80 91 c3 09 	lds	r24, 0x09C3
     8f6:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     8f8:	64 50       	subi	r22, 0x04	; 4
     8fa:	70 40       	sbci	r23, 0x00	; 0
     8fc:	11 f0       	breq	.+4      	; 0x902 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     8fe:	34 96       	adiw	r30, 0x04	; 4
     900:	d3 cf       	rjmp	.-90     	; 0x8a8 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	e0 ec       	ldi	r30, 0xC0	; 192
     906:	f9 e0       	ldi	r31, 0x09	; 9
     908:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     90a:	80 91 c2 09 	lds	r24, 0x09C2
     90e:	87 ff       	sbrs	r24, 7
     910:	fc cf       	rjmp	.-8      	; 0x90a <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     912:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	e0 ec       	ldi	r30, 0xC0	; 192
     91a:	f9 e0       	ldi	r31, 0x09	; 9
     91c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     91e:	80 91 c2 09 	lds	r24, 0x09C2
     922:	87 ff       	sbrs	r24, 7
     924:	fc cf       	rjmp	.-8      	; 0x91e <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     926:	80 91 c3 09 	lds	r24, 0x09C3
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     92e:	80 e0       	ldi	r24, 0x00	; 0
}
     930:	08 95       	ret

00000932 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     93c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <wait_ready>
     940:	8f 3f       	cpi	r24, 0xFF	; 255
     942:	11 f0       	breq	.+4      	; 0x948 <xmit_datablock+0x16>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	3f c0       	rjmp	.+126    	; 0x9c6 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     948:	e0 ec       	ldi	r30, 0xC0	; 192
     94a:	f9 e0       	ldi	r31, 0x09	; 9
     94c:	13 83       	std	Z+3, r17	; 0x03
     94e:	80 91 c2 09 	lds	r24, 0x09C2
     952:	87 ff       	sbrs	r24, 7
     954:	fc cf       	rjmp	.-8      	; 0x94e <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     956:	1d 3f       	cpi	r17, 0xFD	; 253
     958:	11 f4       	brne	.+4      	; 0x95e <xmit_datablock+0x2c>
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	34 c0       	rjmp	.+104    	; 0x9c6 <xmit_datablock+0x94>
     95e:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     960:	e0 ec       	ldi	r30, 0xC0	; 192
     962:	f9 e0       	ldi	r31, 0x09	; 9
     964:	88 81       	ld	r24, Y
     966:	83 83       	std	Z+3, r24	; 0x03
     968:	80 91 c2 09 	lds	r24, 0x09C2
     96c:	87 ff       	sbrs	r24, 7
     96e:	fc cf       	rjmp	.-8      	; 0x968 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	83 83       	std	Z+3, r24	; 0x03
     974:	80 91 c2 09 	lds	r24, 0x09C2
     978:	87 ff       	sbrs	r24, 7
     97a:	fc cf       	rjmp	.-8      	; 0x974 <xmit_datablock+0x42>
		} while (--wc);
     97c:	91 50       	subi	r25, 0x01	; 1
     97e:	11 f0       	breq	.+4      	; 0x984 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     980:	22 96       	adiw	r28, 0x02	; 2
     982:	f0 cf       	rjmp	.-32     	; 0x964 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	e0 ec       	ldi	r30, 0xC0	; 192
     988:	f9 e0       	ldi	r31, 0x09	; 9
     98a:	83 83       	std	Z+3, r24	; 0x03
     98c:	80 91 c2 09 	lds	r24, 0x09C2
     990:	87 ff       	sbrs	r24, 7
     992:	fc cf       	rjmp	.-8      	; 0x98c <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	e0 ec       	ldi	r30, 0xC0	; 192
     998:	f9 e0       	ldi	r31, 0x09	; 9
     99a:	83 83       	std	Z+3, r24	; 0x03
     99c:	80 91 c2 09 	lds	r24, 0x09C2
     9a0:	87 ff       	sbrs	r24, 7
     9a2:	fc cf       	rjmp	.-8      	; 0x99c <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	e0 ec       	ldi	r30, 0xC0	; 192
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9ac:	80 91 c2 09 	lds	r24, 0x09C2
     9b0:	87 ff       	sbrs	r24, 7
     9b2:	fc cf       	rjmp	.-8      	; 0x9ac <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     9b4:	80 91 c3 09 	lds	r24, 0x09C3
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	8f 71       	andi	r24, 0x1F	; 31
     9bc:	85 30       	cpi	r24, 0x05	; 5
     9be:	09 f0       	breq	.+2      	; 0x9c2 <xmit_datablock+0x90>
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     9c6:	89 2f       	mov	r24, r25
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	08 95       	ret

000009d0 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	d8 2e       	mov	r13, r24
     9dc:	7a 01       	movw	r14, r20
     9de:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     9e0:	87 ff       	sbrs	r24, 7
     9e2:	0c c0       	rjmp	.+24     	; 0x9fc <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     9e4:	87 e7       	ldi	r24, 0x77	; 119
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
		if (res > 1) return res;
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <send_cmd+0x28>
     9f6:	72 c0       	rjmp	.+228    	; 0xadc <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     9f8:	8f e7       	ldi	r24, 0x7F	; 127
     9fa:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     9fc:	80 e1       	ldi	r24, 0x10	; 16
     9fe:	e0 e6       	ldi	r30, 0x60	; 96
     a00:	f6 e0       	ldi	r31, 0x06	; 6
     a02:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	e0 ec       	ldi	r30, 0xC0	; 192
     a08:	f9 e0       	ldi	r31, 0x09	; 9
     a0a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a0c:	80 91 c2 09 	lds	r24, 0x09C2
     a10:	87 ff       	sbrs	r24, 7
     a12:	fc cf       	rjmp	.-8      	; 0xa0c <send_cmd+0x3c>
	return SD_SPI.DATA;
     a14:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     a18:	0e 94 1a 04 	call	0x834	; 0x834 <select>
     a1c:	88 23       	and	r24, r24
     a1e:	11 f4       	brne	.+4      	; 0xa24 <send_cmd+0x54>
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	5c c0       	rjmp	.+184    	; 0xadc <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     a24:	e0 ec       	ldi	r30, 0xC0	; 192
     a26:	f9 e0       	ldi	r31, 0x09	; 9
     a28:	d3 82       	std	Z+3, r13	; 0x03
     a2a:	80 91 c2 09 	lds	r24, 0x09C2
     a2e:	87 ff       	sbrs	r24, 7
     a30:	fc cf       	rjmp	.-8      	; 0xa2a <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     a32:	81 2f       	mov	r24, r17
     a34:	99 27       	eor	r25, r25
     a36:	aa 27       	eor	r26, r26
     a38:	bb 27       	eor	r27, r27
     a3a:	e0 ec       	ldi	r30, 0xC0	; 192
     a3c:	f9 e0       	ldi	r31, 0x09	; 9
     a3e:	83 83       	std	Z+3, r24	; 0x03
     a40:	80 91 c2 09 	lds	r24, 0x09C2
     a44:	87 ff       	sbrs	r24, 7
     a46:	fc cf       	rjmp	.-8      	; 0xa40 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     a48:	c8 01       	movw	r24, r16
     a4a:	aa 27       	eor	r26, r26
     a4c:	bb 27       	eor	r27, r27
     a4e:	e0 ec       	ldi	r30, 0xC0	; 192
     a50:	f9 e0       	ldi	r31, 0x09	; 9
     a52:	83 83       	std	Z+3, r24	; 0x03
     a54:	80 91 c2 09 	lds	r24, 0x09C2
     a58:	87 ff       	sbrs	r24, 7
     a5a:	fc cf       	rjmp	.-8      	; 0xa54 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     a5c:	bb 27       	eor	r27, r27
     a5e:	a1 2f       	mov	r26, r17
     a60:	90 2f       	mov	r25, r16
     a62:	8f 2d       	mov	r24, r15
     a64:	e0 ec       	ldi	r30, 0xC0	; 192
     a66:	f9 e0       	ldi	r31, 0x09	; 9
     a68:	83 83       	std	Z+3, r24	; 0x03
     a6a:	80 91 c2 09 	lds	r24, 0x09C2
     a6e:	87 ff       	sbrs	r24, 7
     a70:	fc cf       	rjmp	.-8      	; 0xa6a <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     a72:	e0 ec       	ldi	r30, 0xC0	; 192
     a74:	f9 e0       	ldi	r31, 0x09	; 9
     a76:	e3 82       	std	Z+3, r14	; 0x03
     a78:	80 91 c2 09 	lds	r24, 0x09C2
     a7c:	87 ff       	sbrs	r24, 7
     a7e:	fc cf       	rjmp	.-8      	; 0xa78 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	d8 16       	cp	r13, r24
     a84:	11 f4       	brne	.+4      	; 0xa8a <send_cmd+0xba>
     a86:	85 e9       	ldi	r24, 0x95	; 149
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     a8a:	88 e4       	ldi	r24, 0x48	; 72
     a8c:	d8 16       	cp	r13, r24
     a8e:	11 f4       	brne	.+4      	; 0xa94 <send_cmd+0xc4>
     a90:	87 e8       	ldi	r24, 0x87	; 135
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <send_cmd+0xc6>
     a94:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     a96:	e0 ec       	ldi	r30, 0xC0	; 192
     a98:	f9 e0       	ldi	r31, 0x09	; 9
     a9a:	83 83       	std	Z+3, r24	; 0x03
     a9c:	80 91 c2 09 	lds	r24, 0x09C2
     aa0:	87 ff       	sbrs	r24, 7
     aa2:	fc cf       	rjmp	.-8      	; 0xa9c <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     aa4:	8c e4       	ldi	r24, 0x4C	; 76
     aa6:	d8 16       	cp	r13, r24
     aa8:	51 f4       	brne	.+20     	; 0xabe <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	e0 ec       	ldi	r30, 0xC0	; 192
     aae:	f9 e0       	ldi	r31, 0x09	; 9
     ab0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ab2:	80 91 c2 09 	lds	r24, 0x09C2
     ab6:	87 ff       	sbrs	r24, 7
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <send_cmd+0xe2>
	return SD_SPI.DATA;
     aba:	80 91 c3 09 	lds	r24, 0x09C3
     abe:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ac0:	e0 ec       	ldi	r30, 0xC0	; 192
     ac2:	f9 e0       	ldi	r31, 0x09	; 9
     ac4:	2f ef       	ldi	r18, 0xFF	; 255
     ac6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ac8:	80 91 c2 09 	lds	r24, 0x09C2
     acc:	87 ff       	sbrs	r24, 7
     ace:	fc cf       	rjmp	.-8      	; 0xac8 <send_cmd+0xf8>
	return SD_SPI.DATA;
     ad0:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     ad4:	87 ff       	sbrs	r24, 7
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <send_cmd+0x10c>
     ad8:	91 50       	subi	r25, 0x01	; 1
     ada:	a9 f7       	brne	.-22     	; 0xac6 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	08 95       	ret

00000ae8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <disk_initialize+0xe>
     af6:	0f 92       	push	r0
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     afc:	80 91 ce 30 	lds	r24, 0x30CE
     b00:	81 fd       	sbrc	r24, 1
     b02:	cc c0       	rjmp	.+408    	; 0xc9c <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     b04:	e0 e6       	ldi	r30, 0x60	; 96
     b06:	f6 e0       	ldi	r31, 0x06	; 6
     b08:	80 eb       	ldi	r24, 0xB0	; 176
     b0a:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     b0c:	88 e3       	ldi	r24, 0x38	; 56
     b0e:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     b10:	14 82       	std	Z+4, r1	; 0x04
     b12:	8c e2       	ldi	r24, 0x2C	; 44
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	20 e7       	ldi	r18, 0x70	; 112
     b18:	31 e0       	ldi	r19, 0x01	; 1
     b1a:	f9 01       	movw	r30, r18
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b20:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b22:	d9 f7       	brne	.-10     	; 0xb1a <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     b24:	83 e5       	ldi	r24, 0x53	; 83
     b26:	80 93 c0 09 	sts	0x09C0, r24
     b2a:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b2c:	e0 ec       	ldi	r30, 0xC0	; 192
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b34:	80 91 c2 09 	lds	r24, 0x09C2
     b38:	87 ff       	sbrs	r24, 7
     b3a:	fc cf       	rjmp	.-8      	; 0xb34 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     b3c:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     b40:	91 50       	subi	r25, 0x01	; 1
     b42:	b9 f7       	brne	.-18     	; 0xb32 <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <disk_initialize+0x70>
     b56:	87 c0       	rjmp	.+270    	; 0xc66 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     b58:	84 e6       	ldi	r24, 0x64	; 100
     b5a:	80 93 97 31 	sts	0x3197, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     b5e:	88 e4       	ldi	r24, 0x48	; 72
     b60:	4a ea       	ldi	r20, 0xAA	; 170
     b62:	51 e0       	ldi	r21, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <disk_initialize+0x8a>
     b70:	53 c0       	rjmp	.+166    	; 0xc18 <disk_initialize+0x130>
     b72:	7e 01       	movw	r14, r28
     b74:	08 94       	sec
     b76:	e1 1c       	adc	r14, r1
     b78:	f1 1c       	adc	r15, r1
     b7a:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b7c:	e0 ec       	ldi	r30, 0xC0	; 192
     b7e:	f9 e0       	ldi	r31, 0x09	; 9
     b80:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     b82:	9e 01       	movw	r18, r28
     b84:	2b 5f       	subi	r18, 0xFB	; 251
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b88:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b8a:	80 91 c2 09 	lds	r24, 0x09C2
     b8e:	87 ff       	sbrs	r24, 7
     b90:	fc cf       	rjmp	.-8      	; 0xb8a <disk_initialize+0xa2>
	return SD_SPI.DATA;
     b92:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     b96:	d8 01       	movw	r26, r16
     b98:	8d 93       	st	X+, r24
     b9a:	8d 01       	movw	r16, r26
     b9c:	a2 17       	cp	r26, r18
     b9e:	b3 07       	cpc	r27, r19
     ba0:	99 f7       	brne	.-26     	; 0xb88 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	09 f0       	breq	.+2      	; 0xbaa <disk_initialize+0xc2>
     ba8:	5e c0       	rjmp	.+188    	; 0xc66 <disk_initialize+0x17e>
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	8a 3a       	cpi	r24, 0xAA	; 170
     bae:	09 f0       	breq	.+2      	; 0xbb2 <disk_initialize+0xca>
     bb0:	5a c0       	rjmp	.+180    	; 0xc66 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     bb2:	80 91 97 31 	lds	r24, 0x3197
     bb6:	88 23       	and	r24, r24
     bb8:	49 f0       	breq	.+18     	; 0xbcc <disk_initialize+0xe4>
     bba:	89 ee       	ldi	r24, 0xE9	; 233
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e4       	ldi	r23, 0x40	; 64
     bc4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     bc8:	88 23       	and	r24, r24
     bca:	99 f7       	brne	.-26     	; 0xbb2 <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     bcc:	80 91 97 31 	lds	r24, 0x3197
     bd0:	88 23       	and	r24, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <disk_initialize+0xee>
     bd4:	48 c0       	rjmp	.+144    	; 0xc66 <disk_initialize+0x17e>
     bd6:	8a e7       	ldi	r24, 0x7A	; 122
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     be4:	88 23       	and	r24, r24
     be6:	09 f0       	breq	.+2      	; 0xbea <disk_initialize+0x102>
     be8:	3e c0       	rjmp	.+124    	; 0xc66 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bea:	e0 ec       	ldi	r30, 0xC0	; 192
     bec:	f9 e0       	ldi	r31, 0x09	; 9
     bee:	9f ef       	ldi	r25, 0xFF	; 255
     bf0:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bf2:	80 91 c2 09 	lds	r24, 0x09C2
     bf6:	87 ff       	sbrs	r24, 7
     bf8:	fc cf       	rjmp	.-8      	; 0xbf2 <disk_initialize+0x10a>
	return SD_SPI.DATA;
     bfa:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     bfe:	d7 01       	movw	r26, r14
     c00:	8d 93       	st	X+, r24
     c02:	7d 01       	movw	r14, r26
     c04:	a0 17       	cp	r26, r16
     c06:	b1 07       	cpc	r27, r17
     c08:	99 f7       	brne	.-26     	; 0xbf0 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	86 fd       	sbrc	r24, 6
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <disk_initialize+0x12c>
     c10:	14 e0       	ldi	r17, 0x04	; 4
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <disk_initialize+0x180>
     c14:	1c e0       	ldi	r17, 0x0C	; 12
     c16:	28 c0       	rjmp	.+80     	; 0xc68 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     c18:	89 ee       	ldi	r24, 0xE9	; 233
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	18 f0       	brcs	.+6      	; 0xc30 <disk_initialize+0x148>
     c2a:	01 e4       	ldi	r16, 0x41	; 65
     c2c:	11 e0       	ldi	r17, 0x01	; 1
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <disk_initialize+0x14c>
     c30:	09 ee       	ldi	r16, 0xE9	; 233
     c32:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     c34:	80 91 97 31 	lds	r24, 0x3197
     c38:	88 23       	and	r24, r24
     c3a:	49 f0       	breq	.+18     	; 0xc4e <disk_initialize+0x166>
     c3c:	80 2f       	mov	r24, r16
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     c4a:	88 23       	and	r24, r24
     c4c:	99 f7       	brne	.-26     	; 0xc34 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     c4e:	80 91 97 31 	lds	r24, 0x3197
     c52:	88 23       	and	r24, r24
     c54:	41 f0       	breq	.+16     	; 0xc66 <disk_initialize+0x17e>
     c56:	80 e5       	ldi	r24, 0x50	; 80
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	52 e0       	ldi	r21, 0x02	; 2
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     c64:	81 11       	cpse	r24, r1
     c66:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     c68:	10 93 99 31 	sts	0x3199, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     c6c:	80 e1       	ldi	r24, 0x10	; 16
     c6e:	e0 e6       	ldi	r30, 0x60	; 96
     c70:	f6 e0       	ldi	r31, 0x06	; 6
     c72:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	e0 ec       	ldi	r30, 0xC0	; 192
     c78:	f9 e0       	ldi	r31, 0x09	; 9
     c7a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c7c:	80 91 c2 09 	lds	r24, 0x09C2
     c80:	87 ff       	sbrs	r24, 7
     c82:	fc cf       	rjmp	.-8      	; 0xc7c <disk_initialize+0x194>
	return SD_SPI.DATA;
     c84:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     c88:	11 23       	and	r17, r17
     c8a:	41 f0       	breq	.+16     	; 0xc9c <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     c8c:	80 91 ce 30 	lds	r24, 0x30CE
     c90:	8e 7f       	andi	r24, 0xFE	; 254
     c92:	80 93 ce 30 	sts	0x30CE, r24
		FCLK_FAST();
     c96:	80 ed       	ldi	r24, 0xD0	; 208
     c98:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     c9c:	80 91 ce 30 	lds	r24, 0x30CE
}
     ca0:	24 96       	adiw	r28, 0x04	; 4
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	08 95       	ret

00000cb4 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     cb4:	88 23       	and	r24, r24
     cb6:	11 f0       	breq	.+4      	; 0xcbc <disk_status+0x8>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	08 95       	ret
	return Stat;
     cbc:	80 91 ce 30 	lds	r24, 0x30CE
}
     cc0:	08 95       	ret

00000cc2 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     cc2:	0f 93       	push	r16
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     cca:	88 23       	and	r24, r24
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <disk_read+0xe>
     cce:	53 c0       	rjmp	.+166    	; 0xd76 <disk_read+0xb4>
     cd0:	00 23       	and	r16, r16
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <disk_read+0x14>
     cd4:	50 c0       	rjmp	.+160    	; 0xd76 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     cd6:	80 91 ce 30 	lds	r24, 0x30CE
     cda:	80 ff       	sbrs	r24, 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <disk_read+0x20>
     cde:	03 e0       	ldi	r16, 0x03	; 3
     ce0:	4b c0       	rjmp	.+150    	; 0xd78 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     ce2:	80 91 99 31 	lds	r24, 0x3199
     ce6:	83 fd       	sbrc	r24, 3
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <disk_read+0x36>
     cea:	69 e0       	ldi	r22, 0x09	; 9
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	44 1f       	adc	r20, r20
     cf2:	55 1f       	adc	r21, r21
     cf4:	6a 95       	dec	r22
     cf6:	d1 f7       	brne	.-12     	; 0xcec <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     cf8:	01 30       	cpi	r16, 0x01	; 1
     cfa:	89 f4       	brne	.+34     	; 0xd1e <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     cfc:	81 e5       	ldi	r24, 0x51	; 81
     cfe:	ba 01       	movw	r22, r20
     d00:	a9 01       	movw	r20, r18
     d02:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     d06:	88 23       	and	r24, r24
     d08:	21 f5       	brne	.+72     	; 0xd52 <disk_read+0x90>
     d0a:	ce 01       	movw	r24, r28
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	72 e0       	ldi	r23, 0x02	; 2
     d10:	0e 94 37 04 	call	0x86e	; 0x86e <rcvr_datablock>
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	88 23       	and	r24, r24
     d18:	e1 f4       	brne	.+56     	; 0xd52 <disk_read+0x90>
     d1a:	01 e0       	ldi	r16, 0x01	; 1
     d1c:	1a c0       	rjmp	.+52     	; 0xd52 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     d1e:	82 e5       	ldi	r24, 0x52	; 82
     d20:	ba 01       	movw	r22, r20
     d22:	a9 01       	movw	r20, r18
     d24:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     d28:	88 23       	and	r24, r24
     d2a:	99 f4       	brne	.+38     	; 0xd52 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     d2c:	ce 01       	movw	r24, r28
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	72 e0       	ldi	r23, 0x02	; 2
     d32:	0e 94 37 04 	call	0x86e	; 0x86e <rcvr_datablock>
     d36:	88 23       	and	r24, r24
     d38:	29 f0       	breq	.+10     	; 0xd44 <disk_read+0x82>
				buff += 512;
			} while (--count);
     d3a:	01 50       	subi	r16, 0x01	; 1
     d3c:	19 f0       	breq	.+6      	; 0xd44 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     d3e:	c0 50       	subi	r28, 0x00	; 0
     d40:	de 4f       	sbci	r29, 0xFE	; 254
     d42:	f4 cf       	rjmp	.-24     	; 0xd2c <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     d44:	8c e4       	ldi	r24, 0x4C	; 76
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	e0 e6       	ldi	r30, 0x60	; 96
     d56:	f6 e0       	ldi	r31, 0x06	; 6
     d58:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	e0 ec       	ldi	r30, 0xC0	; 192
     d5e:	f9 e0       	ldi	r31, 0x09	; 9
     d60:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d62:	80 91 c2 09 	lds	r24, 0x09C2
     d66:	87 ff       	sbrs	r24, 7
     d68:	fc cf       	rjmp	.-8      	; 0xd62 <disk_read+0xa0>
	return SD_SPI.DATA;
     d6a:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     d6e:	00 23       	and	r16, r16
     d70:	19 f0       	breq	.+6      	; 0xd78 <disk_read+0xb6>
     d72:	01 e0       	ldi	r16, 0x01	; 1
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <disk_read+0xb6>
     d76:	04 e0       	ldi	r16, 0x04	; 4
}
     d78:	80 2f       	mov	r24, r16
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	eb 01       	movw	r28, r22
     d92:	69 01       	movw	r12, r18
     d94:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     d96:	88 23       	and	r24, r24
     d98:	09 f0       	breq	.+2      	; 0xd9c <disk_write+0x1a>
     d9a:	61 c0       	rjmp	.+194    	; 0xe5e <disk_write+0xdc>
     d9c:	00 23       	and	r16, r16
     d9e:	09 f4       	brne	.+2      	; 0xda2 <disk_write+0x20>
     da0:	5e c0       	rjmp	.+188    	; 0xe5e <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     da2:	80 91 ce 30 	lds	r24, 0x30CE
     da6:	80 ff       	sbrs	r24, 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <disk_write+0x2c>
     daa:	03 e0       	ldi	r16, 0x03	; 3
     dac:	59 c0       	rjmp	.+178    	; 0xe60 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     dae:	80 91 ce 30 	lds	r24, 0x30CE
     db2:	82 ff       	sbrs	r24, 2
     db4:	02 c0       	rjmp	.+4      	; 0xdba <disk_write+0x38>
     db6:	02 e0       	ldi	r16, 0x02	; 2
     db8:	53 c0       	rjmp	.+166    	; 0xe60 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     dba:	80 91 99 31 	lds	r24, 0x3199
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	83 fd       	sbrc	r24, 3
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <disk_write+0x50>
     dc4:	79 e0       	ldi	r23, 0x09	; 9
     dc6:	cc 0c       	add	r12, r12
     dc8:	dd 1c       	adc	r13, r13
     dca:	ee 1c       	adc	r14, r14
     dcc:	ff 1c       	adc	r15, r15
     dce:	7a 95       	dec	r23
     dd0:	d1 f7       	brne	.-12     	; 0xdc6 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     dd2:	01 30       	cpi	r16, 0x01	; 1
     dd4:	69 f4       	brne	.+26     	; 0xdf0 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     dd6:	88 e5       	ldi	r24, 0x58	; 88
     dd8:	b7 01       	movw	r22, r14
     dda:	a6 01       	movw	r20, r12
     ddc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     de0:	88 23       	and	r24, r24
     de2:	59 f5       	brne	.+86     	; 0xe3a <disk_write+0xb8>
     de4:	ce 01       	movw	r24, r28
     de6:	6e ef       	ldi	r22, 0xFE	; 254
     de8:	0e 94 99 04 	call	0x932	; 0x932 <xmit_datablock>
     dec:	00 e0       	ldi	r16, 0x00	; 0
     dee:	22 c0       	rjmp	.+68     	; 0xe34 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     df0:	86 70       	andi	r24, 0x06	; 6
     df2:	90 70       	andi	r25, 0x00	; 0
     df4:	89 2b       	or	r24, r25
     df6:	39 f0       	breq	.+14     	; 0xe06 <disk_write+0x84>
     df8:	40 2f       	mov	r20, r16
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	87 ed       	ldi	r24, 0xD7	; 215
     e02:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     e06:	89 e5       	ldi	r24, 0x59	; 89
     e08:	b7 01       	movw	r22, r14
     e0a:	a6 01       	movw	r20, r12
     e0c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     e10:	88 23       	and	r24, r24
     e12:	99 f4       	brne	.+38     	; 0xe3a <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     e14:	ce 01       	movw	r24, r28
     e16:	6c ef       	ldi	r22, 0xFC	; 252
     e18:	0e 94 99 04 	call	0x932	; 0x932 <xmit_datablock>
     e1c:	88 23       	and	r24, r24
     e1e:	29 f0       	breq	.+10     	; 0xe2a <disk_write+0xa8>
				buff += 512;
			} while (--count);
     e20:	01 50       	subi	r16, 0x01	; 1
     e22:	19 f0       	breq	.+6      	; 0xe2a <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     e24:	c0 50       	subi	r28, 0x00	; 0
     e26:	de 4f       	sbci	r29, 0xFE	; 254
     e28:	f5 cf       	rjmp	.-22     	; 0xe14 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	6d ef       	ldi	r22, 0xFD	; 253
     e30:	0e 94 99 04 	call	0x932	; 0x932 <xmit_datablock>
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <disk_write+0xb8>
     e38:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     e3a:	80 e1       	ldi	r24, 0x10	; 16
     e3c:	e0 e6       	ldi	r30, 0x60	; 96
     e3e:	f6 e0       	ldi	r31, 0x06	; 6
     e40:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	e0 ec       	ldi	r30, 0xC0	; 192
     e46:	f9 e0       	ldi	r31, 0x09	; 9
     e48:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e4a:	80 91 c2 09 	lds	r24, 0x09C2
     e4e:	87 ff       	sbrs	r24, 7
     e50:	fc cf       	rjmp	.-8      	; 0xe4a <disk_write+0xc8>
	return SD_SPI.DATA;
     e52:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     e56:	00 23       	and	r16, r16
     e58:	19 f0       	breq	.+6      	; 0xe60 <disk_write+0xde>
     e5a:	01 e0       	ldi	r16, 0x01	; 1
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <disk_write+0xde>
     e5e:	04 e0       	ldi	r16, 0x04	; 4
}
     e60:	80 2f       	mov	r24, r16
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	08 95       	ret

00000e72 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	60 97       	sbiw	r28, 0x10	; 16
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     e88:	88 23       	and	r24, r24
     e8a:	09 f0       	breq	.+2      	; 0xe8e <disk_ioctl+0x1c>
     e8c:	b8 c1       	rjmp	.+880    	; 0x11fe <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     e8e:	64 30       	cpi	r22, 0x04	; 4
     e90:	01 f5       	brne	.+64     	; 0xed2 <disk_ioctl+0x60>
		switch (*ptr) {
     e92:	fa 01       	movw	r30, r20
     e94:	80 81       	ld	r24, Z
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	39 f0       	breq	.+14     	; 0xea8 <disk_ioctl+0x36>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <disk_ioctl+0x2e>
     e9e:	b1 c1       	rjmp	.+866    	; 0x1202 <disk_ioctl+0x390>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	09 f0       	breq	.+2      	; 0xea6 <disk_ioctl+0x34>
     ea4:	ac c1       	rjmp	.+856    	; 0x11fe <disk_ioctl+0x38c>
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     ea8:	e0 e6       	ldi	r30, 0x60	; 96
     eaa:	f6 e0       	ldi	r31, 0x06	; 6
     eac:	80 eb       	ldi	r24, 0xB0	; 176
     eae:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     eb0:	88 e3       	ldi	r24, 0x38	; 56
     eb2:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     eb4:	14 82       	std	Z+4, r1	; 0x04
     eb6:	8c e2       	ldi	r24, 0x2C	; 44
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	20 e7       	ldi	r18, 0x70	; 112
     ebc:	31 e0       	ldi	r19, 0x01	; 1
     ebe:	f9 01       	movw	r30, r18
     ec0:	31 97       	sbiw	r30, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	d9 f7       	brne	.-10     	; 0xebe <disk_ioctl+0x4c>
     ec8:	9c c1       	rjmp	.+824    	; 0x1202 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	fa 01       	movw	r30, r20
     ece:	81 83       	std	Z+1, r24	; 0x01
     ed0:	98 c1       	rjmp	.+816    	; 0x1202 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     ed2:	80 91 ce 30 	lds	r24, 0x30CE
     ed6:	80 ff       	sbrs	r24, 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <disk_ioctl+0x6c>
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	93 c1       	rjmp	.+806    	; 0x1204 <disk_ioctl+0x392>

		switch (ctrl) {
     ede:	6a 30       	cpi	r22, 0x0A	; 10
     ee0:	09 f4       	brne	.+2      	; 0xee4 <disk_ioctl+0x72>
     ee2:	2f c1       	rjmp	.+606    	; 0x1142 <disk_ioctl+0x2d0>
     ee4:	6b 30       	cpi	r22, 0x0B	; 11
     ee6:	50 f4       	brcc	.+20     	; 0xefc <disk_ioctl+0x8a>
     ee8:	61 30       	cpi	r22, 0x01	; 1
     eea:	51 f1       	breq	.+84     	; 0xf40 <disk_ioctl+0xce>
     eec:	61 30       	cpi	r22, 0x01	; 1
     eee:	a0 f0       	brcs	.+40     	; 0xf18 <disk_ioctl+0xa6>
     ef0:	62 30       	cpi	r22, 0x02	; 2
     ef2:	09 f4       	brne	.+2      	; 0xef6 <disk_ioctl+0x84>
     ef4:	86 c0       	rjmp	.+268    	; 0x1002 <disk_ioctl+0x190>
     ef6:	63 30       	cpi	r22, 0x03	; 3
     ef8:	69 f4       	brne	.+26     	; 0xf14 <disk_ioctl+0xa2>
     efa:	89 c0       	rjmp	.+274    	; 0x100e <disk_ioctl+0x19c>
     efc:	6c 30       	cpi	r22, 0x0C	; 12
     efe:	09 f4       	brne	.+2      	; 0xf02 <disk_ioctl+0x90>
     f00:	27 c1       	rjmp	.+590    	; 0x1150 <disk_ioctl+0x2de>
     f02:	6c 30       	cpi	r22, 0x0C	; 12
     f04:	08 f4       	brcc	.+2      	; 0xf08 <disk_ioctl+0x96>
     f06:	22 c1       	rjmp	.+580    	; 0x114c <disk_ioctl+0x2da>
     f08:	6d 30       	cpi	r22, 0x0D	; 13
     f0a:	09 f4       	brne	.+2      	; 0xf0e <disk_ioctl+0x9c>
     f0c:	2e c1       	rjmp	.+604    	; 0x116a <disk_ioctl+0x2f8>
     f0e:	6e 30       	cpi	r22, 0x0E	; 14
     f10:	09 f4       	brne	.+2      	; 0xf14 <disk_ioctl+0xa2>
     f12:	4a c1       	rjmp	.+660    	; 0x11a8 <disk_ioctl+0x336>
     f14:	94 e0       	ldi	r25, 0x04	; 4
     f16:	64 c1       	rjmp	.+712    	; 0x11e0 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     f18:	0e 94 1a 04 	call	0x834	; 0x834 <select>
     f1c:	88 23       	and	r24, r24
     f1e:	09 f4       	brne	.+2      	; 0xf22 <disk_ioctl+0xb0>
     f20:	5e c1       	rjmp	.+700    	; 0x11de <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     f22:	80 e1       	ldi	r24, 0x10	; 16
     f24:	e0 e6       	ldi	r30, 0x60	; 96
     f26:	f6 e0       	ldi	r31, 0x06	; 6
     f28:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	e0 ec       	ldi	r30, 0xC0	; 192
     f2e:	f9 e0       	ldi	r31, 0x09	; 9
     f30:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     f32:	80 91 c2 09 	lds	r24, 0x09C2
     f36:	87 ff       	sbrs	r24, 7
     f38:	fc cf       	rjmp	.-8      	; 0xf32 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     f3a:	80 91 c3 09 	lds	r24, 0x09C3
     f3e:	ff c0       	rjmp	.+510    	; 0x113e <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     f40:	89 e4       	ldi	r24, 0x49	; 73
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
     f4e:	88 23       	and	r24, r24
     f50:	09 f0       	breq	.+2      	; 0xf54 <disk_ioctl+0xe2>
     f52:	45 c1       	rjmp	.+650    	; 0x11de <disk_ioctl+0x36c>
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	60 e1       	ldi	r22, 0x10	; 16
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 37 04 	call	0x86e	; 0x86e <rcvr_datablock>
     f60:	88 23       	and	r24, r24
     f62:	09 f4       	brne	.+2      	; 0xf66 <disk_ioctl+0xf4>
     f64:	3c c1       	rjmp	.+632    	; 0x11de <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	82 95       	swap	r24
     f6a:	86 95       	lsr	r24
     f6c:	86 95       	lsr	r24
     f6e:	83 70       	andi	r24, 0x03	; 3
     f70:	7a 85       	ldd	r23, Y+10	; 0x0a
     f72:	49 85       	ldd	r20, Y+9	; 0x09
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	89 f4       	brne	.+34     	; 0xf9a <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
     f78:	87 2f       	mov	r24, r23
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	34 2f       	mov	r19, r20
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	2a e0       	ldi	r18, 0x0A	; 10
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	aa 1f       	adc	r26, r26
     f92:	bb 1f       	adc	r27, r27
     f94:	2a 95       	dec	r18
     f96:	d1 f7       	brne	.-12     	; 0xf8c <disk_ioctl+0x11a>
     f98:	cd c0       	rjmp	.+410    	; 0x1134 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     f9a:	42 95       	swap	r20
     f9c:	46 95       	lsr	r20
     f9e:	46 95       	lsr	r20
     fa0:	43 70       	andi	r20, 0x03	; 3
     fa2:	28 85       	ldd	r18, Y+8	; 0x08
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	24 0f       	add	r18, r20
     fb0:	31 1d       	adc	r19, r1
     fb2:	2f 5f       	subi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	8f 81       	ldd	r24, Y+7	; 0x07
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	83 70       	andi	r24, 0x03	; 3
     fbc:	90 70       	andi	r25, 0x00	; 0
     fbe:	98 2f       	mov	r25, r24
     fc0:	88 27       	eor	r24, r24
     fc2:	99 0f       	add	r25, r25
     fc4:	99 0f       	add	r25, r25
     fc6:	28 0f       	add	r18, r24
     fc8:	39 1f       	adc	r19, r25
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	8f 70       	andi	r24, 0x0F	; 15
     fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd4:	66 1f       	adc	r22, r22
     fd6:	66 27       	eor	r22, r22
     fd8:	66 1f       	adc	r22, r22
     fda:	86 0f       	add	r24, r22
     fdc:	8e 5f       	subi	r24, 0xFE	; 254
     fde:	73 70       	andi	r23, 0x03	; 3
     fe0:	77 0f       	add	r23, r23
     fe2:	87 0f       	add	r24, r23
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	09 97       	sbiw	r24, 0x09	; 9
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <disk_ioctl+0x180>
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	44 1f       	adc	r20, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	8a 95       	dec	r24
     ff4:	d2 f7       	brpl	.-12     	; 0xfea <disk_ioctl+0x178>
     ff6:	f8 01       	movw	r30, r16
     ff8:	20 83       	st	Z, r18
     ffa:	31 83       	std	Z+1, r19	; 0x01
     ffc:	42 83       	std	Z+2, r20	; 0x02
     ffe:	53 83       	std	Z+3, r21	; 0x03
    1000:	9e c0       	rjmp	.+316    	; 0x113e <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	fa 01       	movw	r30, r20
    1008:	80 83       	st	Z, r24
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	98 c0       	rjmp	.+304    	; 0x113e <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    100e:	80 91 99 31 	lds	r24, 0x3199
    1012:	f8 2e       	mov	r15, r24
    1014:	82 ff       	sbrs	r24, 2
    1016:	39 c0       	rjmp	.+114    	; 0x108a <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    1018:	8d ec       	ldi	r24, 0xCD	; 205
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
    1026:	88 23       	and	r24, r24
    1028:	09 f0       	breq	.+2      	; 0x102c <disk_ioctl+0x1ba>
    102a:	d9 c0       	rjmp	.+434    	; 0x11de <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	e0 ec       	ldi	r30, 0xC0	; 192
    1030:	f9 e0       	ldi	r31, 0x09	; 9
    1032:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1034:	80 91 c2 09 	lds	r24, 0x09C2
    1038:	87 ff       	sbrs	r24, 7
    103a:	fc cf       	rjmp	.-8      	; 0x1034 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    103c:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	60 e1       	ldi	r22, 0x10	; 16
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 37 04 	call	0x86e	; 0x86e <rcvr_datablock>
    104c:	88 23       	and	r24, r24
    104e:	09 f4       	brne	.+2      	; 0x1052 <disk_ioctl+0x1e0>
    1050:	c6 c0       	rjmp	.+396    	; 0x11de <disk_ioctl+0x36c>
    1052:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1054:	e0 ec       	ldi	r30, 0xC0	; 192
    1056:	f9 e0       	ldi	r31, 0x09	; 9
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    105c:	80 91 c2 09 	lds	r24, 0x09C2
    1060:	87 ff       	sbrs	r24, 7
    1062:	fc cf       	rjmp	.-8      	; 0x105c <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    1064:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	b9 f7       	brne	.-18     	; 0x105a <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    106c:	2b 85       	ldd	r18, Y+11	; 0x0b
    106e:	22 95       	swap	r18
    1070:	2f 70       	andi	r18, 0x0F	; 15
    1072:	80 e1       	ldi	r24, 0x10	; 16
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <disk_ioctl+0x212>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	aa 1f       	adc	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	2a 95       	dec	r18
    1086:	d2 f7       	brpl	.-12     	; 0x107c <disk_ioctl+0x20a>
    1088:	55 c0       	rjmp	.+170    	; 0x1134 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    108a:	89 e4       	ldi	r24, 0x49	; 73
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
    1098:	88 23       	and	r24, r24
    109a:	09 f0       	breq	.+2      	; 0x109e <disk_ioctl+0x22c>
    109c:	a0 c0       	rjmp	.+320    	; 0x11de <disk_ioctl+0x36c>
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	60 e1       	ldi	r22, 0x10	; 16
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	0e 94 37 04 	call	0x86e	; 0x86e <rcvr_datablock>
    10aa:	88 23       	and	r24, r24
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <disk_ioctl+0x23e>
    10ae:	97 c0       	rjmp	.+302    	; 0x11de <disk_ioctl+0x36c>
    10b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    10b2:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    10b4:	f1 fe       	sbrs	r15, 1
    10b6:	1b c0       	rjmp	.+54     	; 0x10ee <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    10b8:	88 1f       	adc	r24, r24
    10ba:	88 27       	eor	r24, r24
    10bc:	88 1f       	adc	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	24 2f       	mov	r18, r20
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	2f 73       	andi	r18, 0x3F	; 63
    10c8:	30 70       	andi	r19, 0x00	; 0
    10ca:	22 0f       	add	r18, r18
    10cc:	33 1f       	adc	r19, r19
    10ce:	82 0f       	add	r24, r18
    10d0:	93 1f       	adc	r25, r19
    10d2:	2e 85       	ldd	r18, Y+14	; 0x0e
    10d4:	22 95       	swap	r18
    10d6:	26 95       	lsr	r18
    10d8:	26 95       	lsr	r18
    10da:	23 70       	andi	r18, 0x03	; 3
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	21 50       	subi	r18, 0x01	; 1
    10e0:	30 40       	sbci	r19, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <disk_ioctl+0x276>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	2a 95       	dec	r18
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <disk_ioctl+0x272>
    10ec:	21 c0       	rjmp	.+66     	; 0x1130 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	23 70       	andi	r18, 0x03	; 3
    10f4:	30 70       	andi	r19, 0x00	; 0
    10f6:	f3 e0       	ldi	r31, 0x03	; 3
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	fa 95       	dec	r31
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <disk_ioctl+0x286>
    1100:	82 95       	swap	r24
    1102:	86 95       	lsr	r24
    1104:	87 70       	andi	r24, 0x07	; 7
    1106:	28 0f       	add	r18, r24
    1108:	31 1d       	adc	r19, r1
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	84 2f       	mov	r24, r20
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	8c 77       	andi	r24, 0x7C	; 124
    1114:	90 70       	andi	r25, 0x00	; 0
    1116:	95 95       	asr	r25
    1118:	87 95       	ror	r24
    111a:	95 95       	asr	r25
    111c:	87 95       	ror	r24
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	ac 01       	movw	r20, r24
    1122:	24 9f       	mul	r18, r20
    1124:	c0 01       	movw	r24, r0
    1126:	25 9f       	mul	r18, r21
    1128:	90 0d       	add	r25, r0
    112a:	34 9f       	mul	r19, r20
    112c:	90 0d       	add	r25, r0
    112e:	11 24       	eor	r1, r1
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	f8 01       	movw	r30, r16
    1136:	80 83       	st	Z, r24
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	a2 83       	std	Z+2, r26	; 0x02
    113c:	b3 83       	std	Z+3, r27	; 0x03
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	4f c0       	rjmp	.+158    	; 0x11e0 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    1142:	80 91 99 31 	lds	r24, 0x3199
    1146:	fa 01       	movw	r30, r20
    1148:	80 83       	st	Z, r24
    114a:	f9 cf       	rjmp	.-14     	; 0x113e <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    114c:	89 e4       	ldi	r24, 0x49	; 73
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1150:	8a e4       	ldi	r24, 0x4A	; 74
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
    115e:	88 23       	and	r24, r24
    1160:	f1 f5       	brne	.+124    	; 0x11de <disk_ioctl+0x36c>
    1162:	c8 01       	movw	r24, r16
    1164:	60 e1       	ldi	r22, 0x10	; 16
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	35 c0       	rjmp	.+106    	; 0x11d4 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    116a:	8a e7       	ldi	r24, 0x7A	; 122
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
    1178:	88 23       	and	r24, r24
    117a:	89 f5       	brne	.+98     	; 0x11de <disk_ioctl+0x36c>
    117c:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    117e:	a0 ec       	ldi	r26, 0xC0	; 192
    1180:	b9 e0       	ldi	r27, 0x09	; 9
    1182:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1184:	98 01       	movw	r18, r16
    1186:	2d 5f       	subi	r18, 0xFD	; 253
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    118a:	13 96       	adiw	r26, 0x03	; 3
    118c:	9c 93       	st	X, r25
    118e:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1190:	80 91 c2 09 	lds	r24, 0x09C2
    1194:	87 ff       	sbrs	r24, 7
    1196:	fc cf       	rjmp	.-8      	; 0x1190 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1198:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    119c:	80 83       	st	Z, r24
    119e:	e2 17       	cp	r30, r18
    11a0:	f3 07       	cpc	r31, r19
    11a2:	69 f2       	breq	.-102    	; 0x113e <disk_ioctl+0x2cc>
    11a4:	31 96       	adiw	r30, 0x01	; 1
    11a6:	f1 cf       	rjmp	.-30     	; 0x118a <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    11a8:	8d ec       	ldi	r24, 0xCD	; 205
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <send_cmd>
    11b6:	88 23       	and	r24, r24
    11b8:	91 f4       	brne	.+36     	; 0x11de <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	e0 ec       	ldi	r30, 0xC0	; 192
    11be:	f9 e0       	ldi	r31, 0x09	; 9
    11c0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    11c2:	80 91 c2 09 	lds	r24, 0x09C2
    11c6:	87 ff       	sbrs	r24, 7
    11c8:	fc cf       	rjmp	.-8      	; 0x11c2 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    11ca:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    11ce:	c8 01       	movw	r24, r16
    11d0:	60 e4       	ldi	r22, 0x40	; 64
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	0e 94 37 04 	call	0x86e	; 0x86e <rcvr_datablock>
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <disk_ioctl+0x36e>
    11de:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    11e0:	80 e1       	ldi	r24, 0x10	; 16
    11e2:	e0 e6       	ldi	r30, 0x60	; 96
    11e4:	f6 e0       	ldi	r31, 0x06	; 6
    11e6:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	e0 ec       	ldi	r30, 0xC0	; 192
    11ec:	f9 e0       	ldi	r31, 0x09	; 9
    11ee:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    11f0:	80 91 c2 09 	lds	r24, 0x09C2
    11f4:	87 ff       	sbrs	r24, 7
    11f6:	fc cf       	rjmp	.-8      	; 0x11f0 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    11f8:	80 91 c3 09 	lds	r24, 0x09C3
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <disk_ioctl+0x392>
    11fe:	94 e0       	ldi	r25, 0x04	; 4
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <disk_ioctl+0x392>
    1202:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    1204:	89 2f       	mov	r24, r25
    1206:	60 96       	adiw	r28, 0x10	; 16
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	08 95       	ret

00001218 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    1218:	80 91 97 31 	lds	r24, 0x3197
    if (n) Timer1 = --n;
    121c:	88 23       	and	r24, r24
    121e:	19 f0       	breq	.+6      	; 0x1226 <disk_timerproc+0xe>
    1220:	81 50       	subi	r24, 0x01	; 1
    1222:	80 93 97 31 	sts	0x3197, r24
    n = Timer2;
    1226:	80 91 98 31 	lds	r24, 0x3198
    if (n) Timer2 = --n;
    122a:	88 23       	and	r24, r24
    122c:	19 f0       	breq	.+6      	; 0x1234 <disk_timerproc+0x1c>
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	80 93 98 31 	sts	0x3198, r24

	s = Stat;
    1234:	80 91 ce 30 	lds	r24, 0x30CE

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    1238:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    123a:	80 93 ce 30 	sts	0x30CE, r24
}
    123e:	08 95       	ret

00001240 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	08 95       	ret

0000124a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    124a:	6f 92       	push	r6
    124c:	7f 92       	push	r7
    124e:	8f 92       	push	r8
    1250:	9f 92       	push	r9
    1252:	af 92       	push	r10
    1254:	bf 92       	push	r11
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	4a 01       	movw	r8, r20
    126a:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    126c:	ca a4       	ldd	r12, Y+42	; 0x2a
    126e:	db a4       	ldd	r13, Y+43	; 0x2b
    1270:	ec a4       	ldd	r14, Y+44	; 0x2c
    1272:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1274:	c4 16       	cp	r12, r20
    1276:	d5 06       	cpc	r13, r21
    1278:	e6 06       	cpc	r14, r22
    127a:	f7 06       	cpc	r15, r23
    127c:	09 f4       	brne	.+2      	; 0x1280 <move_window+0x36>
    127e:	4e c0       	rjmp	.+156    	; 0x131c <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	88 23       	and	r24, r24
    1284:	a1 f1       	breq	.+104    	; 0x12ee <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    1286:	3e e2       	ldi	r19, 0x2E	; 46
    1288:	63 2e       	mov	r6, r19
    128a:	71 2c       	mov	r7, r1
    128c:	6c 0e       	add	r6, r28
    128e:	7d 1e       	adc	r7, r29
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	b3 01       	movw	r22, r6
    1294:	a7 01       	movw	r20, r14
    1296:	96 01       	movw	r18, r12
    1298:	01 e0       	ldi	r16, 0x01	; 1
    129a:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    129e:	88 23       	and	r24, r24
    12a0:	d9 f5       	brne	.+118    	; 0x1318 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    12a2:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    12a4:	8e 89       	ldd	r24, Y+22	; 0x16
    12a6:	9f 89       	ldd	r25, Y+23	; 0x17
    12a8:	a8 8d       	ldd	r26, Y+24	; 0x18
    12aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    12ac:	2e 8d       	ldd	r18, Y+30	; 0x1e
    12ae:	3f 8d       	ldd	r19, Y+31	; 0x1f
    12b0:	48 a1       	ldd	r20, Y+32	; 0x20
    12b2:	59 a1       	ldd	r21, Y+33	; 0x21
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	a4 1f       	adc	r26, r20
    12ba:	b5 1f       	adc	r27, r21
    12bc:	c8 16       	cp	r12, r24
    12be:	d9 06       	cpc	r13, r25
    12c0:	ea 06       	cpc	r14, r26
    12c2:	fb 06       	cpc	r15, r27
    12c4:	a0 f4       	brcc	.+40     	; 0x12ee <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    12c6:	1b 81       	ldd	r17, Y+3	; 0x03
    12c8:	10 c0       	rjmp	.+32     	; 0x12ea <move_window+0xa0>
					wsect += fs->sects_fat;
    12ca:	8e 89       	ldd	r24, Y+22	; 0x16
    12cc:	9f 89       	ldd	r25, Y+23	; 0x17
    12ce:	a8 8d       	ldd	r26, Y+24	; 0x18
    12d0:	b9 8d       	ldd	r27, Y+25	; 0x19
    12d2:	c8 0e       	add	r12, r24
    12d4:	d9 1e       	adc	r13, r25
    12d6:	ea 1e       	adc	r14, r26
    12d8:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	b3 01       	movw	r22, r6
    12de:	a7 01       	movw	r20, r14
    12e0:	96 01       	movw	r18, r12
    12e2:	01 e0       	ldi	r16, 0x01	; 1
    12e4:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    12e8:	11 50       	subi	r17, 0x01	; 1
    12ea:	12 30       	cpi	r17, 0x02	; 2
    12ec:	70 f7       	brcc	.-36     	; 0x12ca <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    12ee:	81 14       	cp	r8, r1
    12f0:	91 04       	cpc	r9, r1
    12f2:	a1 04       	cpc	r10, r1
    12f4:	b1 04       	cpc	r11, r1
    12f6:	91 f0       	breq	.+36     	; 0x131c <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    12f8:	be 01       	movw	r22, r28
    12fa:	62 5d       	subi	r22, 0xD2	; 210
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	a5 01       	movw	r20, r10
    1302:	94 01       	movw	r18, r8
    1304:	01 e0       	ldi	r16, 0x01	; 1
    1306:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    130a:	88 23       	and	r24, r24
    130c:	29 f4       	brne	.+10     	; 0x1318 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    130e:	8a a6       	std	Y+42, r8	; 0x2a
    1310:	9b a6       	std	Y+43, r9	; 0x2b
    1312:	ac a6       	std	Y+44, r10	; 0x2c
    1314:	bd a6       	std	Y+45, r11	; 0x2d
    1316:	03 c0       	rjmp	.+6      	; 0x131e <move_window+0xd4>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	01 c0       	rjmp	.+2      	; 0x131e <move_window+0xd4>
    131c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	9f 90       	pop	r9
    1334:	8f 90       	pop	r8
    1336:	7f 90       	pop	r7
    1338:	6f 90       	pop	r6
    133a:	08 95       	ret

0000133c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    133c:	0f 93       	push	r16
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
	if (res == FR_OK) {
    1350:	88 23       	and	r24, r24
    1352:	09 f0       	breq	.+2      	; 0x1356 <sync+0x1a>
    1354:	7e c0       	rjmp	.+252    	; 0x1452 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1356:	88 81       	ld	r24, Y
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	09 f0       	breq	.+2      	; 0x135e <sync+0x22>
    135c:	72 c0       	rjmp	.+228    	; 0x1442 <sync+0x106>
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <sync+0x2a>
    1364:	6e c0       	rjmp	.+220    	; 0x1442 <sync+0x106>
			fs->winsect = 0;
    1366:	1a a6       	std	Y+42, r1	; 0x2a
    1368:	1b a6       	std	Y+43, r1	; 0x2b
    136a:	1c a6       	std	Y+44, r1	; 0x2c
    136c:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    136e:	be 01       	movw	r22, r28
    1370:	62 5d       	subi	r22, 0xD2	; 210
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	fb 01       	movw	r30, r22
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	01 c0       	rjmp	.+2      	; 0x137e <sync+0x42>
	while (cnt--) *d++ = (char)val;
    137c:	11 92       	st	Z+, r1
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	2f ef       	ldi	r18, 0xFF	; 255
    1382:	8f 3f       	cpi	r24, 0xFF	; 255
    1384:	92 07       	cpc	r25, r18
    1386:	d1 f7       	brne	.-12     	; 0x137c <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1388:	c4 5d       	subi	r28, 0xD4	; 212
    138a:	dd 4f       	sbci	r29, 0xFD	; 253
    138c:	85 e5       	ldi	r24, 0x55	; 85
    138e:	89 93       	st	Y+, r24
    1390:	8a ea       	ldi	r24, 0xAA	; 170
    1392:	88 83       	st	Y, r24
    1394:	cd 52       	subi	r28, 0x2D	; 45
    1396:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1398:	82 e5       	ldi	r24, 0x52	; 82
    139a:	8e a7       	std	Y+46, r24	; 0x2e
    139c:	8f a7       	std	Y+47, r24	; 0x2f
    139e:	21 e6       	ldi	r18, 0x61	; 97
    13a0:	28 ab       	std	Y+48, r18	; 0x30
    13a2:	91 e4       	ldi	r25, 0x41	; 65
    13a4:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    13a6:	ce 5e       	subi	r28, 0xEE	; 238
    13a8:	dd 4f       	sbci	r29, 0xFD	; 253
    13aa:	82 e7       	ldi	r24, 0x72	; 114
    13ac:	89 93       	st	Y+, r24
    13ae:	89 93       	st	Y+, r24
    13b0:	99 93       	st	Y+, r25
    13b2:	28 83       	st	Y, r18
    13b4:	c5 51       	subi	r28, 0x15	; 21
    13b6:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    13b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ba:	ca 5e       	subi	r28, 0xEA	; 234
    13bc:	dd 4f       	sbci	r29, 0xFD	; 253
    13be:	88 83       	st	Y, r24
    13c0:	c6 51       	subi	r28, 0x16	; 22
    13c2:	d2 40       	sbci	r29, 0x02	; 2
    13c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c6:	c9 5e       	subi	r28, 0xE9	; 233
    13c8:	dd 4f       	sbci	r29, 0xFD	; 253
    13ca:	88 83       	st	Y, r24
    13cc:	c7 51       	subi	r28, 0x17	; 23
    13ce:	d2 40       	sbci	r29, 0x02	; 2
    13d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13d4:	a8 89       	ldd	r26, Y+16	; 0x10
    13d6:	b9 89       	ldd	r27, Y+17	; 0x11
    13d8:	9d 01       	movw	r18, r26
    13da:	44 27       	eor	r20, r20
    13dc:	55 27       	eor	r21, r21
    13de:	c8 5e       	subi	r28, 0xE8	; 232
    13e0:	dd 4f       	sbci	r29, 0xFD	; 253
    13e2:	28 83       	st	Y, r18
    13e4:	21 96       	adiw	r28, 0x01	; 1
    13e6:	8b 2f       	mov	r24, r27
    13e8:	99 27       	eor	r25, r25
    13ea:	aa 27       	eor	r26, r26
    13ec:	bb 27       	eor	r27, r27
    13ee:	88 83       	st	Y, r24
    13f0:	c9 51       	subi	r28, 0x19	; 25
    13f2:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    13f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f6:	c6 5e       	subi	r28, 0xE6	; 230
    13f8:	dd 4f       	sbci	r29, 0xFD	; 253
    13fa:	88 83       	st	Y, r24
    13fc:	ca 51       	subi	r28, 0x1A	; 26
    13fe:	d2 40       	sbci	r29, 0x02	; 2
    1400:	8b 85       	ldd	r24, Y+11	; 0x0b
    1402:	c5 5e       	subi	r28, 0xE5	; 229
    1404:	dd 4f       	sbci	r29, 0xFD	; 253
    1406:	88 83       	st	Y, r24
    1408:	cb 51       	subi	r28, 0x1B	; 27
    140a:	d2 40       	sbci	r29, 0x02	; 2
    140c:	8a 85       	ldd	r24, Y+10	; 0x0a
    140e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1410:	ac 85       	ldd	r26, Y+12	; 0x0c
    1412:	bd 85       	ldd	r27, Y+13	; 0x0d
    1414:	9d 01       	movw	r18, r26
    1416:	44 27       	eor	r20, r20
    1418:	55 27       	eor	r21, r21
    141a:	c4 5e       	subi	r28, 0xE4	; 228
    141c:	dd 4f       	sbci	r29, 0xFD	; 253
    141e:	28 83       	st	Y, r18
    1420:	21 96       	adiw	r28, 0x01	; 1
    1422:	8b 2f       	mov	r24, r27
    1424:	99 27       	eor	r25, r25
    1426:	aa 27       	eor	r26, r26
    1428:	bb 27       	eor	r27, r27
    142a:	88 83       	st	Y, r24
    142c:	cd 51       	subi	r28, 0x1D	; 29
    142e:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    1430:	2a 89       	ldd	r18, Y+18	; 0x12
    1432:	3b 89       	ldd	r19, Y+19	; 0x13
    1434:	4c 89       	ldd	r20, Y+20	; 0x14
    1436:	5d 89       	ldd	r21, Y+21	; 0x15
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	01 e0       	ldi	r16, 0x01	; 1
    143c:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
			fs->fsi_flag = 0;
    1440:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 39 07 	call	0xe72	; 0xe72 <disk_ioctl>
    144e:	81 11       	cpse	r24, r1
    1450:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    145a:	7f 92       	push	r7
    145c:	8f 92       	push	r8
    145e:	9f 92       	push	r9
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	4c 01       	movw	r8, r24
    1476:	7a 01       	movw	r14, r20
    1478:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    147a:	42 30       	cpi	r20, 0x02	; 2
    147c:	51 05       	cpc	r21, r1
    147e:	61 05       	cpc	r22, r1
    1480:	71 05       	cpc	r23, r1
    1482:	08 f4       	brcc	.+2      	; 0x1486 <get_fat+0x2c>
    1484:	bb c0       	rjmp	.+374    	; 0x15fc <get_fat+0x1a2>
    1486:	f4 01       	movw	r30, r8
    1488:	82 8d       	ldd	r24, Z+26	; 0x1a
    148a:	93 8d       	ldd	r25, Z+27	; 0x1b
    148c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    148e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1490:	48 17       	cp	r20, r24
    1492:	59 07       	cpc	r21, r25
    1494:	6a 07       	cpc	r22, r26
    1496:	7b 07       	cpc	r23, r27
    1498:	08 f0       	brcs	.+2      	; 0x149c <get_fat+0x42>
    149a:	b0 c0       	rjmp	.+352    	; 0x15fc <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    149c:	a6 8c       	ldd	r10, Z+30	; 0x1e
    149e:	b7 8c       	ldd	r11, Z+31	; 0x1f
    14a0:	c0 a0       	ldd	r12, Z+32	; 0x20
    14a2:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    14a4:	80 81       	ld	r24, Z
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	09 f4       	brne	.+2      	; 0x14ac <get_fat+0x52>
    14aa:	4d c0       	rjmp	.+154    	; 0x1546 <get_fat+0xec>
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <get_fat+0x58>
    14b0:	68 c0       	rjmp	.+208    	; 0x1582 <get_fat+0x128>
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <get_fat+0x5e>
    14b6:	a7 c0       	rjmp	.+334    	; 0x1606 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    14b8:	ea 01       	movw	r28, r20
    14ba:	d6 95       	lsr	r29
    14bc:	c7 95       	ror	r28
    14be:	c4 0f       	add	r28, r20
    14c0:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    14c2:	ae 01       	movw	r20, r28
    14c4:	45 2f       	mov	r20, r21
    14c6:	55 27       	eor	r21, r21
    14c8:	46 95       	lsr	r20
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	4a 0d       	add	r20, r10
    14d0:	5b 1d       	adc	r21, r11
    14d2:	6c 1d       	adc	r22, r12
    14d4:	7d 1d       	adc	r23, r13
    14d6:	c4 01       	movw	r24, r8
    14d8:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    14dc:	88 23       	and	r24, r24
    14de:	09 f0       	breq	.+2      	; 0x14e2 <get_fat+0x88>
    14e0:	92 c0       	rjmp	.+292    	; 0x1606 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    14e2:	fe 01       	movw	r30, r28
    14e4:	f1 70       	andi	r31, 0x01	; 1
    14e6:	e8 0d       	add	r30, r8
    14e8:	f9 1d       	adc	r31, r9
    14ea:	76 a4       	ldd	r7, Z+46	; 0x2e
    14ec:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    14ee:	ae 01       	movw	r20, r28
    14f0:	45 2f       	mov	r20, r21
    14f2:	55 27       	eor	r21, r21
    14f4:	46 95       	lsr	r20
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	4a 0d       	add	r20, r10
    14fc:	5b 1d       	adc	r21, r11
    14fe:	6c 1d       	adc	r22, r12
    1500:	7d 1d       	adc	r23, r13
    1502:	c4 01       	movw	r24, r8
    1504:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    1508:	88 23       	and	r24, r24
    150a:	09 f0       	breq	.+2      	; 0x150e <get_fat+0xb4>
    150c:	7c c0       	rjmp	.+248    	; 0x1606 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    150e:	67 2d       	mov	r22, r7
    1510:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1512:	d1 70       	andi	r29, 0x01	; 1
    1514:	c8 0d       	add	r28, r8
    1516:	d9 1d       	adc	r29, r9
    1518:	9e a5       	ldd	r25, Y+46	; 0x2e
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	68 2b       	or	r22, r24
    151e:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1520:	c7 01       	movw	r24, r14
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	89 2b       	or	r24, r25
    1528:	39 f0       	breq	.+14     	; 0x1538 <get_fat+0xde>
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	76 95       	lsr	r23
    152e:	67 95       	ror	r22
    1530:	4a 95       	dec	r20
    1532:	e1 f7       	brne	.-8      	; 0x152c <get_fat+0xd2>
    1534:	9b 01       	movw	r18, r22
    1536:	22 c0       	rjmp	.+68     	; 0x157c <get_fat+0x122>
    1538:	9b 01       	movw	r18, r22
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	3f 70       	andi	r19, 0x0F	; 15
    1540:	40 70       	andi	r20, 0x00	; 0
    1542:	50 70       	andi	r21, 0x00	; 0
    1544:	64 c0       	rjmp	.+200    	; 0x160e <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    1546:	45 2f       	mov	r20, r21
    1548:	56 2f       	mov	r21, r22
    154a:	67 2f       	mov	r22, r23
    154c:	77 27       	eor	r23, r23
    154e:	4a 0d       	add	r20, r10
    1550:	5b 1d       	adc	r21, r11
    1552:	6c 1d       	adc	r22, r12
    1554:	7d 1d       	adc	r23, r13
    1556:	c4 01       	movw	r24, r8
    1558:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    155c:	88 23       	and	r24, r24
    155e:	09 f0       	breq	.+2      	; 0x1562 <get_fat+0x108>
    1560:	52 c0       	rjmp	.+164    	; 0x1606 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1562:	f7 01       	movw	r30, r14
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	f1 70       	andi	r31, 0x01	; 1
    156a:	e8 0d       	add	r30, r8
    156c:	f9 1d       	adc	r31, r9
    156e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	26 a5       	ldd	r18, Z+46	; 0x2e
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	82 2b       	or	r24, r18
    1578:	93 2b       	or	r25, r19
    157a:	9c 01       	movw	r18, r24
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	46 c0       	rjmp	.+140    	; 0x160e <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    1582:	97 e0       	ldi	r25, 0x07	; 7
    1584:	76 95       	lsr	r23
    1586:	67 95       	ror	r22
    1588:	57 95       	ror	r21
    158a:	47 95       	ror	r20
    158c:	9a 95       	dec	r25
    158e:	d1 f7       	brne	.-12     	; 0x1584 <get_fat+0x12a>
    1590:	4a 0d       	add	r20, r10
    1592:	5b 1d       	adc	r21, r11
    1594:	6c 1d       	adc	r22, r12
    1596:	7d 1d       	adc	r23, r13
    1598:	c4 01       	movw	r24, r8
    159a:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    159e:	88 23       	and	r24, r24
    15a0:	91 f5       	brne	.+100    	; 0x1606 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    15a2:	f7 01       	movw	r30, r14
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	f1 70       	andi	r31, 0x01	; 1
    15ae:	e8 0d       	add	r30, r8
    15b0:	f9 1d       	adc	r31, r9
    15b2:	81 a9       	ldd	r24, Z+49	; 0x31
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	58 2f       	mov	r21, r24
    15bc:	44 27       	eor	r20, r20
    15be:	33 27       	eor	r19, r19
    15c0:	22 27       	eor	r18, r18
    15c2:	80 a9       	ldd	r24, Z+48	; 0x30
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	dc 01       	movw	r26, r24
    15cc:	99 27       	eor	r25, r25
    15ce:	88 27       	eor	r24, r24
    15d0:	28 2b       	or	r18, r24
    15d2:	39 2b       	or	r19, r25
    15d4:	4a 2b       	or	r20, r26
    15d6:	5b 2b       	or	r21, r27
    15d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e0       	ldi	r26, 0x00	; 0
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	28 2b       	or	r18, r24
    15e2:	39 2b       	or	r19, r25
    15e4:	4a 2b       	or	r20, r26
    15e6:	5b 2b       	or	r21, r27
    15e8:	97 a5       	ldd	r25, Z+47	; 0x2f
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	28 2b       	or	r18, r24
    15f2:	39 2b       	or	r19, r25
    15f4:	4a 2b       	or	r20, r26
    15f6:	5b 2b       	or	r21, r27
    15f8:	5f 70       	andi	r21, 0x0F	; 15
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <get_fat+0x1b4>
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <get_fat+0x1b4>
    1606:	2f ef       	ldi	r18, 0xFF	; 255
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f ef       	ldi	r20, 0xFF	; 255
    160c:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    160e:	b9 01       	movw	r22, r18
    1610:	ca 01       	movw	r24, r20
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	bf 90       	pop	r11
    1624:	af 90       	pop	r10
    1626:	9f 90       	pop	r9
    1628:	8f 90       	pop	r8
    162a:	7f 90       	pop	r7
    162c:	08 95       	ret

0000162e <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    162e:	2f 92       	push	r2
    1630:	3f 92       	push	r3
    1632:	4f 92       	push	r4
    1634:	5f 92       	push	r5
    1636:	6f 92       	push	r6
    1638:	7f 92       	push	r7
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	3c 01       	movw	r6, r24
    1654:	6a 01       	movw	r12, r20
    1656:	7b 01       	movw	r14, r22
    1658:	48 01       	movw	r8, r16
    165a:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    165c:	42 30       	cpi	r20, 0x02	; 2
    165e:	51 05       	cpc	r21, r1
    1660:	61 05       	cpc	r22, r1
    1662:	71 05       	cpc	r23, r1
    1664:	08 f4       	brcc	.+2      	; 0x1668 <put_fat+0x3a>
    1666:	ba c0       	rjmp	.+372    	; 0x17dc <put_fat+0x1ae>
    1668:	f3 01       	movw	r30, r6
    166a:	82 8d       	ldd	r24, Z+26	; 0x1a
    166c:	93 8d       	ldd	r25, Z+27	; 0x1b
    166e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1670:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1672:	48 17       	cp	r20, r24
    1674:	59 07       	cpc	r21, r25
    1676:	6a 07       	cpc	r22, r26
    1678:	7b 07       	cpc	r23, r27
    167a:	08 f0       	brcs	.+2      	; 0x167e <put_fat+0x50>
    167c:	af c0       	rjmp	.+350    	; 0x17dc <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    167e:	26 8c       	ldd	r2, Z+30	; 0x1e
    1680:	37 8c       	ldd	r3, Z+31	; 0x1f
    1682:	40 a0       	ldd	r4, Z+32	; 0x20
    1684:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    1686:	80 81       	ld	r24, Z
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	09 f4       	brne	.+2      	; 0x168e <put_fat+0x60>
    168c:	64 c0       	rjmp	.+200    	; 0x1756 <put_fat+0x128>
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	09 f4       	brne	.+2      	; 0x1694 <put_fat+0x66>
    1692:	7a c0       	rjmp	.+244    	; 0x1788 <put_fat+0x15a>
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	11 f0       	breq	.+4      	; 0x169c <put_fat+0x6e>
    1698:	22 e0       	ldi	r18, 0x02	; 2
    169a:	9c c0       	rjmp	.+312    	; 0x17d4 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    169c:	ea 01       	movw	r28, r20
    169e:	d6 95       	lsr	r29
    16a0:	c7 95       	ror	r28
    16a2:	c4 0f       	add	r28, r20
    16a4:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    16a6:	ae 01       	movw	r20, r28
    16a8:	45 2f       	mov	r20, r21
    16aa:	55 27       	eor	r21, r21
    16ac:	46 95       	lsr	r20
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	42 0d       	add	r20, r2
    16b4:	53 1d       	adc	r21, r3
    16b6:	64 1d       	adc	r22, r4
    16b8:	75 1d       	adc	r23, r5
    16ba:	c3 01       	movw	r24, r6
    16bc:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    16c0:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    16c2:	88 23       	and	r24, r24
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <put_fat+0x9a>
    16c6:	86 c0       	rjmp	.+268    	; 0x17d4 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    16c8:	de 01       	movw	r26, r28
    16ca:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    16cc:	86 01       	movw	r16, r12
    16ce:	01 70       	andi	r16, 0x01	; 1
    16d0:	10 70       	andi	r17, 0x00	; 0
    16d2:	01 15       	cp	r16, r1
    16d4:	11 05       	cpc	r17, r1
    16d6:	51 f0       	breq	.+20     	; 0x16ec <put_fat+0xbe>
    16d8:	f3 01       	movw	r30, r6
    16da:	ea 0f       	add	r30, r26
    16dc:	fb 1f       	adc	r31, r27
    16de:	86 a5       	ldd	r24, Z+46	; 0x2e
    16e0:	8f 70       	andi	r24, 0x0F	; 15
    16e2:	98 2d       	mov	r25, r8
    16e4:	92 95       	swap	r25
    16e6:	90 7f       	andi	r25, 0xF0	; 240
    16e8:	98 2b       	or	r25, r24
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <put_fat+0xc0>
    16ec:	98 2d       	mov	r25, r8
    16ee:	a6 0d       	add	r26, r6
    16f0:	b7 1d       	adc	r27, r7
    16f2:	9e 96       	adiw	r26, 0x2e	; 46
    16f4:	9c 93       	st	X, r25
			bc++;
    16f6:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	f3 01       	movw	r30, r6
    16fc:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    16fe:	ae 01       	movw	r20, r28
    1700:	45 2f       	mov	r20, r21
    1702:	55 27       	eor	r21, r21
    1704:	46 95       	lsr	r20
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	42 0d       	add	r20, r2
    170c:	53 1d       	adc	r21, r3
    170e:	64 1d       	adc	r22, r4
    1710:	75 1d       	adc	r23, r5
    1712:	c3 01       	movw	r24, r6
    1714:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    1718:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    171a:	88 23       	and	r24, r24
    171c:	09 f0       	breq	.+2      	; 0x1720 <put_fat+0xf2>
    171e:	5a c0       	rjmp	.+180    	; 0x17d4 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1720:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1722:	01 2b       	or	r16, r17
    1724:	49 f0       	breq	.+18     	; 0x1738 <put_fat+0x10a>
    1726:	64 e0       	ldi	r22, 0x04	; 4
    1728:	b6 94       	lsr	r11
    172a:	a7 94       	ror	r10
    172c:	97 94       	ror	r9
    172e:	87 94       	ror	r8
    1730:	6a 95       	dec	r22
    1732:	d1 f7       	brne	.-12     	; 0x1728 <put_fat+0xfa>
    1734:	48 2d       	mov	r20, r8
    1736:	0b c0       	rjmp	.+22     	; 0x174e <put_fat+0x120>
    1738:	f3 01       	movw	r30, r6
    173a:	ec 0f       	add	r30, r28
    173c:	fd 1f       	adc	r31, r29
    173e:	46 a5       	ldd	r20, Z+46	; 0x2e
    1740:	40 7f       	andi	r20, 0xF0	; 240
    1742:	bb 27       	eor	r27, r27
    1744:	ab 2d       	mov	r26, r11
    1746:	9a 2d       	mov	r25, r10
    1748:	89 2d       	mov	r24, r9
    174a:	8f 70       	andi	r24, 0x0F	; 15
    174c:	48 2b       	or	r20, r24
    174e:	c6 0d       	add	r28, r6
    1750:	d7 1d       	adc	r29, r7
    1752:	4e a7       	std	Y+46, r20	; 0x2e
    1754:	3f c0       	rjmp	.+126    	; 0x17d4 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    1756:	77 27       	eor	r23, r23
    1758:	6f 2d       	mov	r22, r15
    175a:	5e 2d       	mov	r21, r14
    175c:	4d 2d       	mov	r20, r13
    175e:	42 0d       	add	r20, r2
    1760:	53 1d       	adc	r21, r3
    1762:	64 1d       	adc	r22, r4
    1764:	75 1d       	adc	r23, r5
    1766:	c3 01       	movw	r24, r6
    1768:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    176c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    176e:	88 23       	and	r24, r24
    1770:	89 f5       	brne	.+98     	; 0x17d4 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    1772:	f6 01       	movw	r30, r12
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	f1 70       	andi	r31, 0x01	; 1
    177a:	e6 0d       	add	r30, r6
    177c:	f7 1d       	adc	r31, r7
    177e:	86 a6       	std	Z+46, r8	; 0x2e
    1780:	89 2d       	mov	r24, r9
    1782:	99 27       	eor	r25, r25
    1784:	87 a7       	std	Z+47, r24	; 0x2f
    1786:	26 c0       	rjmp	.+76     	; 0x17d4 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    1788:	87 e0       	ldi	r24, 0x07	; 7
    178a:	76 95       	lsr	r23
    178c:	67 95       	ror	r22
    178e:	57 95       	ror	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	d1 f7       	brne	.-12     	; 0x178a <put_fat+0x15c>
    1796:	42 0d       	add	r20, r2
    1798:	53 1d       	adc	r21, r3
    179a:	64 1d       	adc	r22, r4
    179c:	75 1d       	adc	r23, r5
    179e:	c3 01       	movw	r24, r6
    17a0:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    17a4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17a6:	88 23       	and	r24, r24
    17a8:	a9 f4       	brne	.+42     	; 0x17d4 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    17aa:	f6 01       	movw	r30, r12
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	f1 70       	andi	r31, 0x01	; 1
    17b6:	e6 0d       	add	r30, r6
    17b8:	f7 1d       	adc	r31, r7
    17ba:	86 a6       	std	Z+46, r8	; 0x2e
    17bc:	89 2d       	mov	r24, r9
    17be:	99 27       	eor	r25, r25
    17c0:	87 a7       	std	Z+47, r24	; 0x2f
    17c2:	c5 01       	movw	r24, r10
    17c4:	aa 27       	eor	r26, r26
    17c6:	bb 27       	eor	r27, r27
    17c8:	80 ab       	std	Z+48, r24	; 0x30
    17ca:	8b 2d       	mov	r24, r11
    17cc:	99 27       	eor	r25, r25
    17ce:	aa 27       	eor	r26, r26
    17d0:	bb 27       	eor	r27, r27
    17d2:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	f3 01       	movw	r30, r6
    17d8:	84 83       	std	Z+4, r24	; 0x04
    17da:	01 c0       	rjmp	.+2      	; 0x17de <put_fat+0x1b0>
    17dc:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    17de:	82 2f       	mov	r24, r18
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	df 90       	pop	r13
    17ee:	cf 90       	pop	r12
    17f0:	bf 90       	pop	r11
    17f2:	af 90       	pop	r10
    17f4:	9f 90       	pop	r9
    17f6:	8f 90       	pop	r8
    17f8:	7f 90       	pop	r7
    17fa:	6f 90       	pop	r6
    17fc:	5f 90       	pop	r5
    17fe:	4f 90       	pop	r4
    1800:	3f 90       	pop	r3
    1802:	2f 90       	pop	r2
    1804:	08 95       	ret

00001806 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1806:	9f 92       	push	r9
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	ec 01       	movw	r28, r24
    181e:	7a 01       	movw	r14, r20
    1820:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1822:	42 30       	cpi	r20, 0x02	; 2
    1824:	51 05       	cpc	r21, r1
    1826:	61 05       	cpc	r22, r1
    1828:	71 05       	cpc	r23, r1
    182a:	08 f4       	brcc	.+2      	; 0x182e <remove_chain+0x28>
    182c:	58 c0       	rjmp	.+176    	; 0x18de <remove_chain+0xd8>
    182e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1830:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1832:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1834:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1836:	48 17       	cp	r20, r24
    1838:	59 07       	cpc	r21, r25
    183a:	6a 07       	cpc	r22, r26
    183c:	7b 07       	cpc	r23, r27
    183e:	08 f4       	brcc	.+2      	; 0x1842 <remove_chain+0x3c>
    1840:	41 c0       	rjmp	.+130    	; 0x18c4 <remove_chain+0xbe>
    1842:	4d c0       	rjmp	.+154    	; 0x18de <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1844:	ce 01       	movw	r24, r28
    1846:	b8 01       	movw	r22, r16
    1848:	a7 01       	movw	r20, r14
    184a:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    184e:	5b 01       	movw	r10, r22
    1850:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1852:	61 15       	cp	r22, r1
    1854:	71 05       	cpc	r23, r1
    1856:	81 05       	cpc	r24, r1
    1858:	91 05       	cpc	r25, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <remove_chain+0x58>
    185c:	42 c0       	rjmp	.+132    	; 0x18e2 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	a8 16       	cp	r10, r24
    1862:	b1 04       	cpc	r11, r1
    1864:	c1 04       	cpc	r12, r1
    1866:	d1 04       	cpc	r13, r1
    1868:	d1 f1       	breq	.+116    	; 0x18de <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    186a:	2f ef       	ldi	r18, 0xFF	; 255
    186c:	a2 16       	cp	r10, r18
    186e:	2f ef       	ldi	r18, 0xFF	; 255
    1870:	b2 06       	cpc	r11, r18
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	c2 06       	cpc	r12, r18
    1876:	2f ef       	ldi	r18, 0xFF	; 255
    1878:	d2 06       	cpc	r13, r18
    187a:	11 f4       	brne	.+4      	; 0x1880 <remove_chain+0x7a>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	32 c0       	rjmp	.+100    	; 0x18e4 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1880:	ce 01       	movw	r24, r28
    1882:	b8 01       	movw	r22, r16
    1884:	a7 01       	movw	r20, r14
    1886:	00 e0       	ldi	r16, 0x00	; 0
    1888:	10 e0       	ldi	r17, 0x00	; 0
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	0e 94 17 0b 	call	0x162e	; 0x162e <put_fat>
			if (res != FR_OK) break;
    1892:	88 23       	and	r24, r24
    1894:	39 f5       	brne	.+78     	; 0x18e4 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1896:	8e 85       	ldd	r24, Y+14	; 0x0e
    1898:	9f 85       	ldd	r25, Y+15	; 0x0f
    189a:	a8 89       	ldd	r26, Y+16	; 0x10
    189c:	b9 89       	ldd	r27, Y+17	; 0x11
    189e:	8f 3f       	cpi	r24, 0xFF	; 255
    18a0:	2f ef       	ldi	r18, 0xFF	; 255
    18a2:	92 07       	cpc	r25, r18
    18a4:	2f ef       	ldi	r18, 0xFF	; 255
    18a6:	a2 07       	cpc	r26, r18
    18a8:	2f ef       	ldi	r18, 0xFF	; 255
    18aa:	b2 07       	cpc	r27, r18
    18ac:	41 f0       	breq	.+16     	; 0x18be <remove_chain+0xb8>
				fs->free_clust++;
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	a1 1d       	adc	r26, r1
    18b2:	b1 1d       	adc	r27, r1
    18b4:	8e 87       	std	Y+14, r24	; 0x0e
    18b6:	9f 87       	std	Y+15, r25	; 0x0f
    18b8:	a8 8b       	std	Y+16, r26	; 0x10
    18ba:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    18bc:	9d 82       	std	Y+5, r9	; 0x05
    18be:	86 01       	movw	r16, r12
    18c0:	75 01       	movw	r14, r10
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <remove_chain+0xc2>
    18c4:	99 24       	eor	r9, r9
    18c6:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    18c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18cc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18ce:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18d0:	e8 16       	cp	r14, r24
    18d2:	f9 06       	cpc	r15, r25
    18d4:	0a 07       	cpc	r16, r26
    18d6:	1b 07       	cpc	r17, r27
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <remove_chain+0xd6>
    18da:	b4 cf       	rjmp	.-152    	; 0x1844 <remove_chain+0x3e>
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <remove_chain+0xdc>
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <remove_chain+0xde>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	08 95       	ret

000018fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    18fc:	2f 92       	push	r2
    18fe:	3f 92       	push	r3
    1900:	4f 92       	push	r4
    1902:	5f 92       	push	r5
    1904:	6f 92       	push	r6
    1906:	7f 92       	push	r7
    1908:	8f 92       	push	r8
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <create_chain+0x26>
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	1c 01       	movw	r2, r24
    192a:	2a 01       	movw	r4, r20
    192c:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    192e:	dc 01       	movw	r26, r24
    1930:	5a 96       	adiw	r26, 0x1a	; 26
    1932:	8d 91       	ld	r24, X+
    1934:	9d 91       	ld	r25, X+
    1936:	0d 90       	ld	r0, X+
    1938:	bc 91       	ld	r27, X
    193a:	a0 2d       	mov	r26, r0
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	ab 83       	std	Y+3, r26	; 0x03
    1942:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1944:	41 15       	cp	r20, r1
    1946:	51 05       	cpc	r21, r1
    1948:	61 05       	cpc	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	81 f4       	brne	.+32     	; 0x196e <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    194e:	f1 01       	movw	r30, r2
    1950:	82 84       	ldd	r8, Z+10	; 0x0a
    1952:	93 84       	ldd	r9, Z+11	; 0x0b
    1954:	a4 84       	ldd	r10, Z+12	; 0x0c
    1956:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1958:	81 14       	cp	r8, r1
    195a:	91 04       	cpc	r9, r1
    195c:	a1 04       	cpc	r10, r1
    195e:	b1 04       	cpc	r11, r1
    1960:	11 f1       	breq	.+68     	; 0x19a6 <create_chain+0xaa>
    1962:	88 16       	cp	r8, r24
    1964:	99 06       	cpc	r9, r25
    1966:	aa 06       	cpc	r10, r26
    1968:	bb 06       	cpc	r11, r27
    196a:	e8 f4       	brcc	.+58     	; 0x19a6 <create_chain+0xaa>
    196c:	21 c0       	rjmp	.+66     	; 0x19b0 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    196e:	c1 01       	movw	r24, r2
    1970:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    1974:	9b 01       	movw	r18, r22
    1976:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1978:	62 30       	cpi	r22, 0x02	; 2
    197a:	71 05       	cpc	r23, r1
    197c:	81 05       	cpc	r24, r1
    197e:	91 05       	cpc	r25, r1
    1980:	28 f4       	brcc	.+10     	; 0x198c <create_chain+0x90>
    1982:	21 e0       	ldi	r18, 0x01	; 1
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	93 c0       	rjmp	.+294    	; 0x1ab2 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	ab 81       	ldd	r26, Y+3	; 0x03
    1992:	bc 81       	ldd	r27, Y+4	; 0x04
    1994:	28 17       	cp	r18, r24
    1996:	39 07       	cpc	r19, r25
    1998:	4a 07       	cpc	r20, r26
    199a:	5b 07       	cpc	r21, r27
    199c:	08 f4       	brcc	.+2      	; 0x19a0 <create_chain+0xa4>
    199e:	89 c0       	rjmp	.+274    	; 0x1ab2 <create_chain+0x1b6>
    19a0:	53 01       	movw	r10, r6
    19a2:	42 01       	movw	r8, r4
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <create_chain+0xb4>
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	8b 2e       	mov	r8, r27
    19aa:	91 2c       	mov	r9, r1
    19ac:	a1 2c       	mov	r10, r1
    19ae:	b1 2c       	mov	r11, r1
    19b0:	75 01       	movw	r14, r10
    19b2:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    19b4:	08 94       	sec
    19b6:	c1 1c       	adc	r12, r1
    19b8:	d1 1c       	adc	r13, r1
    19ba:	e1 1c       	adc	r14, r1
    19bc:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	ab 81       	ldd	r26, Y+3	; 0x03
    19c4:	bc 81       	ldd	r27, Y+4	; 0x04
    19c6:	c8 16       	cp	r12, r24
    19c8:	d9 06       	cpc	r13, r25
    19ca:	ea 06       	cpc	r14, r26
    19cc:	fb 06       	cpc	r15, r27
    19ce:	60 f0       	brcs	.+24     	; 0x19e8 <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	89 16       	cp	r8, r25
    19d4:	91 04       	cpc	r9, r1
    19d6:	a1 04       	cpc	r10, r1
    19d8:	b1 04       	cpc	r11, r1
    19da:	08 f4       	brcc	.+2      	; 0x19de <create_chain+0xe2>
    19dc:	61 c0       	rjmp	.+194    	; 0x1aa0 <create_chain+0x1a4>
    19de:	a2 e0       	ldi	r26, 0x02	; 2
    19e0:	ca 2e       	mov	r12, r26
    19e2:	d1 2c       	mov	r13, r1
    19e4:	e1 2c       	mov	r14, r1
    19e6:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    19e8:	c1 01       	movw	r24, r2
    19ea:	b7 01       	movw	r22, r14
    19ec:	a6 01       	movw	r20, r12
    19ee:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	81 05       	cpc	r24, r1
    19fc:	91 05       	cpc	r25, r1
    19fe:	a9 f0       	breq	.+42     	; 0x1a2a <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1a00:	6f 3f       	cpi	r22, 0xFF	; 255
    1a02:	af ef       	ldi	r26, 0xFF	; 255
    1a04:	7a 07       	cpc	r23, r26
    1a06:	af ef       	ldi	r26, 0xFF	; 255
    1a08:	8a 07       	cpc	r24, r26
    1a0a:	af ef       	ldi	r26, 0xFF	; 255
    1a0c:	9a 07       	cpc	r25, r26
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <create_chain+0x116>
    1a10:	50 c0       	rjmp	.+160    	; 0x1ab2 <create_chain+0x1b6>
    1a12:	61 30       	cpi	r22, 0x01	; 1
    1a14:	71 05       	cpc	r23, r1
    1a16:	81 05       	cpc	r24, r1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <create_chain+0x122>
    1a1c:	4a c0       	rjmp	.+148    	; 0x1ab2 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1a1e:	c8 14       	cp	r12, r8
    1a20:	d9 04       	cpc	r13, r9
    1a22:	ea 04       	cpc	r14, r10
    1a24:	fb 04       	cpc	r15, r11
    1a26:	31 f6       	brne	.-116    	; 0x19b4 <create_chain+0xb8>
    1a28:	3b c0       	rjmp	.+118    	; 0x1aa0 <create_chain+0x1a4>
    1a2a:	bc 2c       	mov	r11, r12
    1a2c:	ad 2c       	mov	r10, r13
    1a2e:	9e 2c       	mov	r9, r14
    1a30:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1a32:	c1 01       	movw	r24, r2
    1a34:	a6 01       	movw	r20, r12
    1a36:	b7 01       	movw	r22, r14
    1a38:	0f ef       	ldi	r16, 0xFF	; 255
    1a3a:	1f ef       	ldi	r17, 0xFF	; 255
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	3f e0       	ldi	r19, 0x0F	; 15
    1a40:	0e 94 17 0b 	call	0x162e	; 0x162e <put_fat>
    1a44:	88 23       	and	r24, r24
    1a46:	89 f5       	brne	.+98     	; 0x1aaa <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1a48:	41 14       	cp	r4, r1
    1a4a:	51 04       	cpc	r5, r1
    1a4c:	61 04       	cpc	r6, r1
    1a4e:	71 04       	cpc	r7, r1
    1a50:	49 f0       	breq	.+18     	; 0x1a64 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1a52:	c1 01       	movw	r24, r2
    1a54:	b3 01       	movw	r22, r6
    1a56:	a2 01       	movw	r20, r4
    1a58:	86 01       	movw	r16, r12
    1a5a:	97 01       	movw	r18, r14
    1a5c:	0e 94 17 0b 	call	0x162e	; 0x162e <put_fat>
    1a60:	88 23       	and	r24, r24
    1a62:	19 f5       	brne	.+70     	; 0x1aaa <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1a64:	f1 01       	movw	r30, r2
    1a66:	b2 86       	std	Z+10, r11	; 0x0a
    1a68:	a3 86       	std	Z+11, r10	; 0x0b
    1a6a:	94 86       	std	Z+12, r9	; 0x0c
    1a6c:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1a6e:	86 85       	ldd	r24, Z+14	; 0x0e
    1a70:	97 85       	ldd	r25, Z+15	; 0x0f
    1a72:	a0 89       	ldd	r26, Z+16	; 0x10
    1a74:	b1 89       	ldd	r27, Z+17	; 0x11
    1a76:	8f 3f       	cpi	r24, 0xFF	; 255
    1a78:	ff ef       	ldi	r31, 0xFF	; 255
    1a7a:	9f 07       	cpc	r25, r31
    1a7c:	ff ef       	ldi	r31, 0xFF	; 255
    1a7e:	af 07       	cpc	r26, r31
    1a80:	ff ef       	ldi	r31, 0xFF	; 255
    1a82:	bf 07       	cpc	r27, r31
    1a84:	51 f0       	breq	.+20     	; 0x1a9a <create_chain+0x19e>
		fs->free_clust--;
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	a1 09       	sbc	r26, r1
    1a8a:	b1 09       	sbc	r27, r1
    1a8c:	f1 01       	movw	r30, r2
    1a8e:	86 87       	std	Z+14, r24	; 0x0e
    1a90:	97 87       	std	Z+15, r25	; 0x0f
    1a92:	a0 8b       	std	Z+16, r26	; 0x10
    1a94:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	85 83       	std	Z+5, r24	; 0x05
    1a9a:	a7 01       	movw	r20, r14
    1a9c:	96 01       	movw	r18, r12
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <create_chain+0x1b6>
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <create_chain+0x1b6>
    1aaa:	2f ef       	ldi	r18, 0xFF	; 255
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f ef       	ldi	r20, 0xFF	; 255
    1ab0:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	24 96       	adiw	r28, 0x04	; 4
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	7f 90       	pop	r7
    1ad6:	6f 90       	pop	r6
    1ad8:	5f 90       	pop	r5
    1ada:	4f 90       	pop	r4
    1adc:	3f 90       	pop	r3
    1ade:	2f 90       	pop	r2
    1ae0:	08 95       	ret

00001ae2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
    1af0:	7a 01       	movw	r14, r20
    1af2:	8b 01       	movw	r16, r22
	clst -= 2;
    1af4:	8e ef       	ldi	r24, 0xFE	; 254
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	af ef       	ldi	r26, 0xFF	; 255
    1afa:	bf ef       	ldi	r27, 0xFF	; 255
    1afc:	e8 0e       	add	r14, r24
    1afe:	f9 1e       	adc	r15, r25
    1b00:	0a 1f       	adc	r16, r26
    1b02:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1b04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b08:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b0a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b0c:	02 97       	sbiw	r24, 0x02	; 2
    1b0e:	a1 09       	sbc	r26, r1
    1b10:	b1 09       	sbc	r27, r1
    1b12:	e8 16       	cp	r14, r24
    1b14:	f9 06       	cpc	r15, r25
    1b16:	0a 07       	cpc	r16, r26
    1b18:	1b 07       	cpc	r17, r27
    1b1a:	28 f0       	brcs	.+10     	; 0x1b26 <clust2sect+0x44>
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	12 c0       	rjmp	.+36     	; 0x1b4a <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1b26:	2a 81       	ldd	r18, Y+2	; 0x02
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	c8 01       	movw	r24, r16
    1b30:	b7 01       	movw	r22, r14
    1b32:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	8e a1       	ldd	r24, Y+38	; 0x26
    1b3c:	9f a1       	ldd	r25, Y+39	; 0x27
    1b3e:	a8 a5       	ldd	r26, Y+40	; 0x28
    1b40:	b9 a5       	ldd	r27, Y+41	; 0x29
    1b42:	28 0f       	add	r18, r24
    1b44:	39 1f       	adc	r19, r25
    1b46:	4a 1f       	adc	r20, r26
    1b48:	5b 1f       	adc	r21, r27
}
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	ca 01       	movw	r24, r20
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	08 95       	ret

00001b5c <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	5c 01       	movw	r10, r24
    1b72:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1b74:	dc 01       	movw	r26, r24
    1b76:	14 96       	adiw	r26, 0x04	; 4
    1b78:	6d 93       	st	X+, r22
    1b7a:	7c 93       	st	X, r23
    1b7c:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1b7e:	16 96       	adiw	r26, 0x06	; 6
    1b80:	4d 91       	ld	r20, X+
    1b82:	5d 91       	ld	r21, X+
    1b84:	6d 91       	ld	r22, X+
    1b86:	7c 91       	ld	r23, X
    1b88:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1b8a:	41 30       	cpi	r20, 0x01	; 1
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	61 05       	cpc	r22, r1
    1b90:	71 05       	cpc	r23, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <dir_seek+0x3a>
    1b94:	d3 c0       	rjmp	.+422    	; 0x1d3c <dir_seek+0x1e0>
    1b96:	ed 91       	ld	r30, X+
    1b98:	fc 91       	ld	r31, X
    1b9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b9e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ba0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1ba2:	48 17       	cp	r20, r24
    1ba4:	59 07       	cpc	r21, r25
    1ba6:	6a 07       	cpc	r22, r26
    1ba8:	7b 07       	cpc	r23, r27
    1baa:	08 f0       	brcs	.+2      	; 0x1bae <dir_seek+0x52>
    1bac:	c7 c0       	rjmp	.+398    	; 0x1d3c <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1bae:	41 15       	cp	r20, r1
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	61 05       	cpc	r22, r1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	81 f5       	brne	.+96     	; 0x1c18 <dir_seek+0xbc>
    1bb8:	80 81       	ld	r24, Z
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	49 f4       	brne	.+18     	; 0x1bd0 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1bbe:	42 a1       	ldd	r20, Z+34	; 0x22
    1bc0:	53 a1       	ldd	r21, Z+35	; 0x23
    1bc2:	64 a1       	ldd	r22, Z+36	; 0x24
    1bc4:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1bc6:	41 15       	cp	r20, r1
    1bc8:	51 05       	cpc	r21, r1
    1bca:	61 05       	cpc	r22, r1
    1bcc:	71 05       	cpc	r23, r1
    1bce:	21 f5       	brne	.+72     	; 0x1c18 <dir_seek+0xbc>
		dj->clust = clst;
    1bd0:	f5 01       	movw	r30, r10
    1bd2:	12 86       	std	Z+10, r1	; 0x0a
    1bd4:	13 86       	std	Z+11, r1	; 0x0b
    1bd6:	14 86       	std	Z+12, r1	; 0x0c
    1bd8:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1bda:	01 90       	ld	r0, Z+
    1bdc:	f0 81       	ld	r31, Z
    1bde:	e0 2d       	mov	r30, r0
    1be0:	80 85       	ldd	r24, Z+8	; 0x08
    1be2:	91 85       	ldd	r25, Z+9	; 0x09
    1be4:	c8 16       	cp	r12, r24
    1be6:	d9 06       	cpc	r13, r25
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <dir_seek+0x90>
    1bea:	a8 c0       	rjmp	.+336    	; 0x1d3c <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1bec:	c6 01       	movw	r24, r12
    1bee:	24 e0       	ldi	r18, 0x04	; 4
    1bf0:	96 95       	lsr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	2a 95       	dec	r18
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <dir_seek+0x94>
    1bf8:	a0 e0       	ldi	r26, 0x00	; 0
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	22 a1       	ldd	r18, Z+34	; 0x22
    1bfe:	33 a1       	ldd	r19, Z+35	; 0x23
    1c00:	44 a1       	ldd	r20, Z+36	; 0x24
    1c02:	55 a1       	ldd	r21, Z+37	; 0x25
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	a4 1f       	adc	r26, r20
    1c0a:	b5 1f       	adc	r27, r21
    1c0c:	f5 01       	movw	r30, r10
    1c0e:	86 87       	std	Z+14, r24	; 0x0e
    1c10:	97 87       	std	Z+15, r25	; 0x0f
    1c12:	a0 8b       	std	Z+16, r26	; 0x10
    1c14:	b1 8b       	std	Z+17, r27	; 0x11
    1c16:	7a c0       	rjmp	.+244    	; 0x1d0c <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	08 2f       	mov	r16, r24
    1c1c:	10 e0       	ldi	r17, 0x00	; 0
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	00 0f       	add	r16, r16
    1c22:	11 1f       	adc	r17, r17
    1c24:	9a 95       	dec	r25
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <dir_seek+0xc4>
    1c28:	24 c0       	rjmp	.+72     	; 0x1c72 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    1c30:	ab 01       	movw	r20, r22
    1c32:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1c34:	4f 3f       	cpi	r20, 0xFF	; 255
    1c36:	ff ef       	ldi	r31, 0xFF	; 255
    1c38:	5f 07       	cpc	r21, r31
    1c3a:	ff ef       	ldi	r31, 0xFF	; 255
    1c3c:	6f 07       	cpc	r22, r31
    1c3e:	ff ef       	ldi	r31, 0xFF	; 255
    1c40:	7f 07       	cpc	r23, r31
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <dir_seek+0xec>
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	7b c0       	rjmp	.+246    	; 0x1d3e <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1c48:	42 30       	cpi	r20, 0x02	; 2
    1c4a:	51 05       	cpc	r21, r1
    1c4c:	61 05       	cpc	r22, r1
    1c4e:	71 05       	cpc	r23, r1
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <dir_seek+0xf8>
    1c52:	74 c0       	rjmp	.+232    	; 0x1d3c <dir_seek+0x1e0>
    1c54:	d5 01       	movw	r26, r10
    1c56:	ed 91       	ld	r30, X+
    1c58:	fc 91       	ld	r31, X
    1c5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c5e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c60:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c62:	48 17       	cp	r20, r24
    1c64:	59 07       	cpc	r21, r25
    1c66:	6a 07       	cpc	r22, r26
    1c68:	7b 07       	cpc	r23, r27
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <dir_seek+0x112>
    1c6c:	67 c0       	rjmp	.+206    	; 0x1d3c <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1c6e:	c0 1a       	sub	r12, r16
    1c70:	d1 0a       	sbc	r13, r17
    1c72:	f5 01       	movw	r30, r10
    1c74:	c0 81       	ld	r28, Z
    1c76:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1c78:	c0 16       	cp	r12, r16
    1c7a:	d1 06       	cpc	r13, r17
    1c7c:	b0 f6       	brcc	.-84     	; 0x1c2a <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1c7e:	d5 01       	movw	r26, r10
    1c80:	1a 96       	adiw	r26, 0x0a	; 10
    1c82:	4d 93       	st	X+, r20
    1c84:	5d 93       	st	X+, r21
    1c86:	6d 93       	st	X+, r22
    1c88:	7c 93       	st	X, r23
    1c8a:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1c8c:	8e ef       	ldi	r24, 0xFE	; 254
    1c8e:	e8 2e       	mov	r14, r24
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	f8 2e       	mov	r15, r24
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
    1c96:	08 2f       	mov	r16, r24
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	18 2f       	mov	r17, r24
    1c9c:	e4 0e       	add	r14, r20
    1c9e:	f5 1e       	adc	r15, r21
    1ca0:	06 1f       	adc	r16, r22
    1ca2:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1ca4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ca6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ca8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1caa:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1cac:	02 97       	sbiw	r24, 0x02	; 2
    1cae:	a1 09       	sbc	r26, r1
    1cb0:	b1 09       	sbc	r27, r1
    1cb2:	e8 16       	cp	r14, r24
    1cb4:	f9 06       	cpc	r15, r25
    1cb6:	0a 07       	cpc	r16, r26
    1cb8:	1b 07       	cpc	r17, r27
    1cba:	28 f0       	brcs	.+10     	; 0x1cc6 <dir_seek+0x16a>
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	12 c0       	rjmp	.+36     	; 0x1cea <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	c8 01       	movw	r24, r16
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	8e a1       	ldd	r24, Y+38	; 0x26
    1cdc:	9f a1       	ldd	r25, Y+39	; 0x27
    1cde:	a8 a5       	ldd	r26, Y+40	; 0x28
    1ce0:	b9 a5       	ldd	r27, Y+41	; 0x29
    1ce2:	28 0f       	add	r18, r24
    1ce4:	39 1f       	adc	r19, r25
    1ce6:	4a 1f       	adc	r20, r26
    1ce8:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1cea:	c6 01       	movw	r24, r12
    1cec:	04 e0       	ldi	r16, 0x04	; 4
    1cee:	96 95       	lsr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	0a 95       	dec	r16
    1cf4:	e1 f7       	brne	.-8      	; 0x1cee <dir_seek+0x192>
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	28 0f       	add	r18, r24
    1cfc:	39 1f       	adc	r19, r25
    1cfe:	4a 1f       	adc	r20, r26
    1d00:	5b 1f       	adc	r21, r27
    1d02:	f5 01       	movw	r30, r10
    1d04:	26 87       	std	Z+14, r18	; 0x0e
    1d06:	37 87       	std	Z+15, r19	; 0x0f
    1d08:	40 8b       	std	Z+16, r20	; 0x10
    1d0a:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1d0c:	ff e0       	ldi	r31, 0x0F	; 15
    1d0e:	cf 22       	and	r12, r31
    1d10:	dd 24       	eor	r13, r13
    1d12:	15 e0       	ldi	r17, 0x05	; 5
    1d14:	cc 0c       	add	r12, r12
    1d16:	dd 1c       	adc	r13, r13
    1d18:	1a 95       	dec	r17
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <dir_seek+0x1b8>
    1d1c:	8e e2       	ldi	r24, 0x2E	; 46
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	c8 0e       	add	r12, r24
    1d22:	d9 1e       	adc	r13, r25
    1d24:	d5 01       	movw	r26, r10
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	11 97       	sbiw	r26, 0x01	; 1
    1d2c:	8c 0d       	add	r24, r12
    1d2e:	9d 1d       	adc	r25, r13
    1d30:	52 96       	adiw	r26, 0x12	; 18
    1d32:	8d 93       	st	X+, r24
    1d34:	9c 93       	st	X, r25
    1d36:	53 97       	sbiw	r26, 0x13	; 19
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
}
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	bf 90       	pop	r11
    1d50:	af 90       	pop	r10
    1d52:	08 95       	ret

00001d54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1d54:	4f 92       	push	r4
    1d56:	5f 92       	push	r5
    1d58:	6f 92       	push	r6
    1d5a:	7f 92       	push	r7
    1d5c:	8f 92       	push	r8
    1d5e:	9f 92       	push	r9
    1d60:	af 92       	push	r10
    1d62:	bf 92       	push	r11
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	ec 01       	movw	r28, r24
    1d76:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1d78:	6c 80       	ldd	r6, Y+4	; 0x04
    1d7a:	7d 80       	ldd	r7, Y+5	; 0x05
    1d7c:	08 94       	sec
    1d7e:	61 1c       	adc	r6, r1
    1d80:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1d82:	61 14       	cp	r6, r1
    1d84:	71 04       	cpc	r7, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <dir_next+0x36>
    1d88:	4c c1       	rjmp	.+664    	; 0x2022 <dir_next+0x2ce>
    1d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d8e:	a8 89       	ldd	r26, Y+16	; 0x10
    1d90:	b9 89       	ldd	r27, Y+17	; 0x11
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	a1 05       	cpc	r26, r1
    1d96:	b1 05       	cpc	r27, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <dir_next+0x48>
    1d9a:	43 c1       	rjmp	.+646    	; 0x2022 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1d9c:	1f e0       	ldi	r17, 0x0F	; 15
    1d9e:	41 2e       	mov	r4, r17
    1da0:	51 2c       	mov	r5, r1
    1da2:	46 20       	and	r4, r6
    1da4:	57 20       	and	r5, r7
    1da6:	41 14       	cp	r4, r1
    1da8:	51 04       	cpc	r5, r1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <dir_next+0x5a>
    1dac:	27 c1       	rjmp	.+590    	; 0x1ffc <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	a1 1d       	adc	r26, r1
    1db2:	b1 1d       	adc	r27, r1
    1db4:	8e 87       	std	Y+14, r24	; 0x0e
    1db6:	9f 87       	std	Y+15, r25	; 0x0f
    1db8:	a8 8b       	std	Y+16, r26	; 0x10
    1dba:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1dbc:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dbe:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dc4:	e8 81       	ld	r30, Y
    1dc6:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc8:	41 15       	cp	r20, r1
    1dca:	51 05       	cpc	r21, r1
    1dcc:	61 05       	cpc	r22, r1
    1dce:	71 05       	cpc	r23, r1
    1dd0:	39 f4       	brne	.+14     	; 0x1de0 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1dd2:	80 85       	ldd	r24, Z+8	; 0x08
    1dd4:	91 85       	ldd	r25, Z+9	; 0x09
    1dd6:	68 16       	cp	r6, r24
    1dd8:	79 06       	cpc	r7, r25
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <dir_next+0x8a>
    1ddc:	0f c1       	rjmp	.+542    	; 0x1ffc <dir_next+0x2a8>
    1dde:	21 c1       	rjmp	.+578    	; 0x2022 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1de0:	82 81       	ldd	r24, Z+2	; 0x02
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	93 01       	movw	r18, r6
    1de8:	a4 e0       	ldi	r26, 0x04	; 4
    1dea:	36 95       	lsr	r19
    1dec:	27 95       	ror	r18
    1dee:	aa 95       	dec	r26
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <dir_next+0x96>
    1df2:	82 23       	and	r24, r18
    1df4:	93 23       	and	r25, r19
    1df6:	89 2b       	or	r24, r25
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <dir_next+0xa8>
    1dfa:	00 c1       	rjmp	.+512    	; 0x1ffc <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1dfc:	cf 01       	movw	r24, r30
    1dfe:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    1e02:	7b 01       	movw	r14, r22
    1e04:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1e06:	62 30       	cpi	r22, 0x02	; 2
    1e08:	71 05       	cpc	r23, r1
    1e0a:	81 05       	cpc	r24, r1
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	08 f4       	brcc	.+2      	; 0x1e12 <dir_next+0xbe>
    1e10:	0a c1       	rjmp	.+532    	; 0x2026 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	e8 16       	cp	r14, r24
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	f8 06       	cpc	r15, r24
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	08 07       	cpc	r16, r24
    1e1e:	8f ef       	ldi	r24, 0xFF	; 255
    1e20:	18 07       	cpc	r17, r24
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <dir_next+0xd2>
    1e24:	02 c1       	rjmp	.+516    	; 0x202a <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1e26:	e8 81       	ld	r30, Y
    1e28:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e2e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1e30:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1e32:	e8 16       	cp	r14, r24
    1e34:	f9 06       	cpc	r15, r25
    1e36:	0a 07       	cpc	r16, r26
    1e38:	1b 07       	cpc	r17, r27
    1e3a:	08 f4       	brcc	.+2      	; 0x1e3e <dir_next+0xea>
    1e3c:	a6 c0       	rjmp	.+332    	; 0x1f8a <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1e3e:	dd 20       	and	r13, r13
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <dir_next+0xf0>
    1e42:	ef c0       	rjmp	.+478    	; 0x2022 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1e44:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e46:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e48:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e4c:	cf 01       	movw	r24, r30
    1e4e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <create_chain>
    1e52:	7b 01       	movw	r14, r22
    1e54:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1e56:	61 15       	cp	r22, r1
    1e58:	71 05       	cpc	r23, r1
    1e5a:	81 05       	cpc	r24, r1
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <dir_next+0x110>
    1e60:	87 e0       	ldi	r24, 0x07	; 7
    1e62:	e4 c0       	rjmp	.+456    	; 0x202c <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	e9 16       	cp	r14, r25
    1e68:	f1 04       	cpc	r15, r1
    1e6a:	01 05       	cpc	r16, r1
    1e6c:	11 05       	cpc	r17, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <dir_next+0x11e>
    1e70:	da c0       	rjmp	.+436    	; 0x2026 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1e72:	af ef       	ldi	r26, 0xFF	; 255
    1e74:	ea 16       	cp	r14, r26
    1e76:	af ef       	ldi	r26, 0xFF	; 255
    1e78:	fa 06       	cpc	r15, r26
    1e7a:	af ef       	ldi	r26, 0xFF	; 255
    1e7c:	0a 07       	cpc	r16, r26
    1e7e:	af ef       	ldi	r26, 0xFF	; 255
    1e80:	1a 07       	cpc	r17, r26
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <dir_next+0x132>
    1e84:	d2 c0       	rjmp	.+420    	; 0x202a <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1e86:	88 81       	ld	r24, Y
    1e88:	99 81       	ldd	r25, Y+1	; 0x01
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    1e96:	88 23       	and	r24, r24
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <dir_next+0x148>
    1e9a:	c7 c0       	rjmp	.+398    	; 0x202a <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1e9c:	e8 81       	ld	r30, Y
    1e9e:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea0:	be 96       	adiw	r30, 0x2e	; 46
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	92 e0       	ldi	r25, 0x02	; 2
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1ea8:	11 92       	st	Z+, r1
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	bf ef       	ldi	r27, 0xFF	; 255
    1eae:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb0:	9b 07       	cpc	r25, r27
    1eb2:	d1 f7       	brne	.-12     	; 0x1ea8 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1eb4:	88 80       	ld	r8, Y
    1eb6:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1eb8:	4e ef       	ldi	r20, 0xFE	; 254
    1eba:	a4 2e       	mov	r10, r20
    1ebc:	4f ef       	ldi	r20, 0xFF	; 255
    1ebe:	b4 2e       	mov	r11, r20
    1ec0:	4f ef       	ldi	r20, 0xFF	; 255
    1ec2:	c4 2e       	mov	r12, r20
    1ec4:	4f ef       	ldi	r20, 0xFF	; 255
    1ec6:	d4 2e       	mov	r13, r20
    1ec8:	ae 0c       	add	r10, r14
    1eca:	bf 1c       	adc	r11, r15
    1ecc:	c0 1e       	adc	r12, r16
    1ece:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1ed0:	f4 01       	movw	r30, r8
    1ed2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ed4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ed6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ed8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1eda:	02 97       	sbiw	r24, 0x02	; 2
    1edc:	a1 09       	sbc	r26, r1
    1ede:	b1 09       	sbc	r27, r1
    1ee0:	a8 16       	cp	r10, r24
    1ee2:	b9 06       	cpc	r11, r25
    1ee4:	ca 06       	cpc	r12, r26
    1ee6:	db 06       	cpc	r13, r27
    1ee8:	28 f0       	brcs	.+10     	; 0x1ef4 <dir_next+0x1a0>
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	15 c0       	rjmp	.+42     	; 0x1f1e <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1ef4:	d4 01       	movw	r26, r8
    1ef6:	12 96       	adiw	r26, 0x02	; 2
    1ef8:	2c 91       	ld	r18, X
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	c6 01       	movw	r24, r12
    1f02:	b5 01       	movw	r22, r10
    1f04:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    1f08:	9b 01       	movw	r18, r22
    1f0a:	ac 01       	movw	r20, r24
    1f0c:	f4 01       	movw	r30, r8
    1f0e:	86 a1       	ldd	r24, Z+38	; 0x26
    1f10:	97 a1       	ldd	r25, Z+39	; 0x27
    1f12:	a0 a5       	ldd	r26, Z+40	; 0x28
    1f14:	b1 a5       	ldd	r27, Z+41	; 0x29
    1f16:	28 0f       	add	r18, r24
    1f18:	39 1f       	adc	r19, r25
    1f1a:	4a 1f       	adc	r20, r26
    1f1c:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1f1e:	d4 01       	movw	r26, r8
    1f20:	9a 96       	adiw	r26, 0x2a	; 42
    1f22:	2d 93       	st	X+, r18
    1f24:	3d 93       	st	X+, r19
    1f26:	4d 93       	st	X+, r20
    1f28:	5c 93       	st	X, r21
    1f2a:	9d 97       	sbiw	r26, 0x2d	; 45
    1f2c:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1f2e:	cc 24       	eor	r12, r12
    1f30:	c3 94       	inc	r12
    1f32:	1a c0       	rjmp	.+52     	; 0x1f68 <dir_next+0x214>
    1f34:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1f36:	88 81       	ld	r24, Y
    1f38:	99 81       	ldd	r25, Y+1	; 0x01
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	50 e0       	ldi	r21, 0x00	; 0
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    1f46:	88 23       	and	r24, r24
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <dir_next+0x1f8>
    1f4a:	6f c0       	rjmp	.+222    	; 0x202a <dir_next+0x2d6>
						dj->fs->winsect++;
    1f4c:	e8 81       	ld	r30, Y
    1f4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f50:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f52:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f54:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f56:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	a1 1d       	adc	r26, r1
    1f5c:	b1 1d       	adc	r27, r1
    1f5e:	82 a7       	std	Z+42, r24	; 0x2a
    1f60:	93 a7       	std	Z+43, r25	; 0x2b
    1f62:	a4 a7       	std	Z+44, r26	; 0x2c
    1f64:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1f66:	d3 94       	inc	r13
    1f68:	e8 81       	ld	r30, Y
    1f6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	d8 16       	cp	r13, r24
    1f70:	08 f3       	brcs	.-62     	; 0x1f34 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1f72:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f74:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f76:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f78:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f7a:	8d 19       	sub	r24, r13
    1f7c:	91 09       	sbc	r25, r1
    1f7e:	a1 09       	sbc	r26, r1
    1f80:	b1 09       	sbc	r27, r1
    1f82:	82 a7       	std	Z+42, r24	; 0x2a
    1f84:	93 a7       	std	Z+43, r25	; 0x2b
    1f86:	a4 a7       	std	Z+44, r26	; 0x2c
    1f88:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1f8a:	ea 86       	std	Y+10, r14	; 0x0a
    1f8c:	fb 86       	std	Y+11, r15	; 0x0b
    1f8e:	0c 87       	std	Y+12, r16	; 0x0c
    1f90:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1f92:	c8 80       	ld	r12, Y
    1f94:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1f96:	8e ef       	ldi	r24, 0xFE	; 254
    1f98:	9f ef       	ldi	r25, 0xFF	; 255
    1f9a:	af ef       	ldi	r26, 0xFF	; 255
    1f9c:	bf ef       	ldi	r27, 0xFF	; 255
    1f9e:	e8 0e       	add	r14, r24
    1fa0:	f9 1e       	adc	r15, r25
    1fa2:	0a 1f       	adc	r16, r26
    1fa4:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1faa:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fac:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fae:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fb0:	02 97       	sbiw	r24, 0x02	; 2
    1fb2:	a1 09       	sbc	r26, r1
    1fb4:	b1 09       	sbc	r27, r1
    1fb6:	e8 16       	cp	r14, r24
    1fb8:	f9 06       	cpc	r15, r25
    1fba:	0a 07       	cpc	r16, r26
    1fbc:	1b 07       	cpc	r17, r27
    1fbe:	28 f0       	brcs	.+10     	; 0x1fca <dir_next+0x276>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	15 c0       	rjmp	.+42     	; 0x1ff4 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    1fca:	d6 01       	movw	r26, r12
    1fcc:	12 96       	adiw	r26, 0x02	; 2
    1fce:	2c 91       	ld	r18, X
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	b7 01       	movw	r22, r14
    1fda:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	f6 01       	movw	r30, r12
    1fe4:	86 a1       	ldd	r24, Z+38	; 0x26
    1fe6:	97 a1       	ldd	r25, Z+39	; 0x27
    1fe8:	a0 a5       	ldd	r26, Z+40	; 0x28
    1fea:	b1 a5       	ldd	r27, Z+41	; 0x29
    1fec:	28 0f       	add	r18, r24
    1fee:	39 1f       	adc	r19, r25
    1ff0:	4a 1f       	adc	r20, r26
    1ff2:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    1ff4:	2e 87       	std	Y+14, r18	; 0x0e
    1ff6:	3f 87       	std	Y+15, r19	; 0x0f
    1ff8:	48 8b       	std	Y+16, r20	; 0x10
    1ffa:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    1ffc:	6c 82       	std	Y+4, r6	; 0x04
    1ffe:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2000:	35 e0       	ldi	r19, 0x05	; 5
    2002:	44 0c       	add	r4, r4
    2004:	55 1c       	adc	r5, r5
    2006:	3a 95       	dec	r19
    2008:	e1 f7       	brne	.-8      	; 0x2002 <dir_next+0x2ae>
    200a:	8e e2       	ldi	r24, 0x2E	; 46
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	48 0e       	add	r4, r24
    2010:	59 1e       	adc	r5, r25
    2012:	88 81       	ld	r24, Y
    2014:	99 81       	ldd	r25, Y+1	; 0x01
    2016:	84 0d       	add	r24, r4
    2018:	95 1d       	adc	r25, r5
    201a:	8a 8b       	std	Y+18, r24	; 0x12
    201c:	9b 8b       	std	Y+19, r25	; 0x13
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	05 c0       	rjmp	.+10     	; 0x202c <dir_next+0x2d8>

	return FR_OK;
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	03 c0       	rjmp	.+6      	; 0x202c <dir_next+0x2d8>
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	01 c0       	rjmp	.+2      	; 0x202c <dir_next+0x2d8>
    202a:	81 e0       	ldi	r24, 0x01	; 1
}
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	9f 90       	pop	r9
    2042:	8f 90       	pop	r8
    2044:	7f 90       	pop	r7
    2046:	6f 90       	pop	r6
    2048:	5f 90       	pop	r5
    204a:	4f 90       	pop	r4
    204c:	08 95       	ret

0000204e <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	ec 01       	movw	r28, r24
    2054:	94 e0       	ldi	r25, 0x04	; 4
    2056:	1a c0       	rjmp	.+52     	; 0x208c <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    2058:	88 81       	ld	r24, Y
    205a:	99 81       	ldd	r25, Y+1	; 0x01
    205c:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    2060:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2062:	88 23       	and	r24, r24
    2064:	f1 f4       	brne	.+60     	; 0x20a2 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2066:	ea 89       	ldd	r30, Y+18	; 0x12
    2068:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    206a:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    206c:	88 23       	and	r24, r24
    206e:	09 f1       	breq	.+66     	; 0x20b2 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2070:	85 3e       	cpi	r24, 0xE5	; 229
    2072:	29 f0       	breq	.+10     	; 0x207e <dir_read+0x30>
    2074:	8e 32       	cpi	r24, 0x2E	; 46
    2076:	19 f0       	breq	.+6      	; 0x207e <dir_read+0x30>
    2078:	83 85       	ldd	r24, Z+11	; 0x0b
    207a:	83 ff       	sbrs	r24, 3
    207c:	16 c0       	rjmp	.+44     	; 0x20aa <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    207e:	ce 01       	movw	r24, r28
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <dir_next>
    2086:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2088:	88 23       	and	r24, r24
    208a:	59 f4       	brne	.+22     	; 0x20a2 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    208c:	4e 85       	ldd	r20, Y+14	; 0x0e
    208e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2090:	68 89       	ldd	r22, Y+16	; 0x10
    2092:	79 89       	ldd	r23, Y+17	; 0x11
    2094:	41 15       	cp	r20, r1
    2096:	51 05       	cpc	r21, r1
    2098:	61 05       	cpc	r22, r1
    209a:	71 05       	cpc	r23, r1
    209c:	e9 f6       	brne	.-70     	; 0x2058 <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    209e:	99 23       	and	r25, r25
    20a0:	21 f0       	breq	.+8      	; 0x20aa <dir_read+0x5c>
    20a2:	1e 86       	std	Y+14, r1	; 0x0e
    20a4:	1f 86       	std	Y+15, r1	; 0x0f
    20a6:	18 8a       	std	Y+16, r1	; 0x10
    20a8:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    20aa:	89 2f       	mov	r24, r25
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    20b2:	94 e0       	ldi	r25, 0x04	; 4
    20b4:	f6 cf       	rjmp	.-20     	; 0x20a2 <dir_read+0x54>

000020b6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
    20c4:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    20c6:	88 23       	and	r24, r24
    20c8:	e9 f5       	brne	.+122    	; 0x2144 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    20ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    20cc:	5f 85       	ldd	r21, Y+15	; 0x0f
    20ce:	68 89       	ldd	r22, Y+16	; 0x10
    20d0:	79 89       	ldd	r23, Y+17	; 0x11
    20d2:	88 81       	ld	r24, Y
    20d4:	99 81       	ldd	r25, Y+1	; 0x01
    20d6:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    20da:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    20dc:	88 23       	and	r24, r24
    20de:	91 f5       	brne	.+100    	; 0x2144 <dir_register+0x8e>
			c = *dj->dir;
    20e0:	ea 89       	ldd	r30, Y+18	; 0x12
    20e2:	fb 89       	ldd	r31, Y+19	; 0x13
    20e4:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    20e6:	e5 3e       	cpi	r30, 0xE5	; 229
    20e8:	89 f1       	breq	.+98     	; 0x214c <dir_register+0x96>
    20ea:	ee 23       	and	r30, r30
    20ec:	79 f1       	breq	.+94     	; 0x214c <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    20ee:	ce 01       	movw	r24, r28
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <dir_next>
    20f6:	e6 cf       	rjmp	.-52     	; 0x20c4 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    20f8:	6a 89       	ldd	r22, Y+18	; 0x12
    20fa:	7b 89       	ldd	r23, Y+19	; 0x13
    20fc:	fb 01       	movw	r30, r22
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2104:	11 92       	st	Z+, r1
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	2f ef       	ldi	r18, 0xFF	; 255
    210a:	8f 3f       	cpi	r24, 0xFF	; 255
    210c:	92 07       	cpc	r25, r18
    210e:	d1 f7       	brne	.-12     	; 0x2104 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2110:	8c 89       	ldd	r24, Y+20	; 0x14
    2112:	9d 89       	ldd	r25, Y+21	; 0x15
    2114:	9c 01       	movw	r18, r24
    2116:	d9 01       	movw	r26, r18
    2118:	fb 01       	movw	r30, r22
    211a:	2b e0       	ldi	r18, 0x0B	; 11
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    2120:	8d 91       	ld	r24, X+
    2122:	81 93       	st	Z+, r24
    2124:	21 50       	subi	r18, 0x01	; 1
    2126:	30 40       	sbci	r19, 0x00	; 0
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	2f 3f       	cpi	r18, 0xFF	; 255
    212c:	38 07       	cpc	r19, r24
    212e:	c1 f7       	brne	.-16     	; 0x2120 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2130:	ec 89       	ldd	r30, Y+20	; 0x14
    2132:	fd 89       	ldd	r31, Y+21	; 0x15
    2134:	83 85       	ldd	r24, Z+11	; 0x0b
    2136:	88 71       	andi	r24, 0x18	; 24
    2138:	fb 01       	movw	r30, r22
    213a:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    213c:	e8 81       	ld	r30, Y
    213e:	f9 81       	ldd	r31, Y+1	; 0x01
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2144:	84 2f       	mov	r24, r20
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    214c:	4e 85       	ldd	r20, Y+14	; 0x0e
    214e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2150:	68 89       	ldd	r22, Y+16	; 0x10
    2152:	79 89       	ldd	r23, Y+17	; 0x11
    2154:	88 81       	ld	r24, Y
    2156:	99 81       	ldd	r25, Y+1	; 0x01
    2158:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    215c:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    215e:	88 23       	and	r24, r24
    2160:	59 f2       	breq	.-106    	; 0x20f8 <dir_register+0x42>
    2162:	f0 cf       	rjmp	.-32     	; 0x2144 <dir_register+0x8e>

00002164 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    216a:	6c 81       	ldd	r22, Y+4	; 0x04
    216c:	7d 81       	ldd	r23, Y+5	; 0x05
    216e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
    2172:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2174:	88 23       	and	r24, r24
    2176:	99 f4       	brne	.+38     	; 0x219e <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    2178:	4e 85       	ldd	r20, Y+14	; 0x0e
    217a:	5f 85       	ldd	r21, Y+15	; 0x0f
    217c:	68 89       	ldd	r22, Y+16	; 0x10
    217e:	79 89       	ldd	r23, Y+17	; 0x11
    2180:	88 81       	ld	r24, Y
    2182:	99 81       	ldd	r25, Y+1	; 0x01
    2184:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    2188:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    218a:	88 23       	and	r24, r24
    218c:	41 f4       	brne	.+16     	; 0x219e <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    218e:	ea 89       	ldd	r30, Y+18	; 0x12
    2190:	fb 89       	ldd	r31, Y+19	; 0x13
    2192:	85 ee       	ldi	r24, 0xE5	; 229
    2194:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    2196:	e8 81       	ld	r30, Y
    2198:	f9 81       	ldd	r31, Y+1	; 0x01
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    219e:	89 2f       	mov	r24, r25
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	08 95       	ret

000021a6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	fc 01       	movw	r30, r24
    21b4:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    21b6:	eb 01       	movw	r28, r22
    21b8:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    21ba:	86 85       	ldd	r24, Z+14	; 0x0e
    21bc:	97 85       	ldd	r25, Z+15	; 0x0f
    21be:	a0 89       	ldd	r26, Z+16	; 0x10
    21c0:	b1 89       	ldd	r27, Z+17	; 0x11
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	a1 05       	cpc	r26, r1
    21c6:	b1 05       	cpc	r27, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <get_fileinfo+0x26>
    21ca:	71 c0       	rjmp	.+226    	; 0x22ae <get_fileinfo+0x108>
		dir = dj->dir;
    21cc:	62 89       	ldd	r22, Z+18	; 0x12
    21ce:	73 89       	ldd	r23, Z+19	; 0x13
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    21d4:	fb 01       	movw	r30, r22
    21d6:	e8 0f       	add	r30, r24
    21d8:	f9 1f       	adc	r31, r25
    21da:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    21dc:	e0 32       	cpi	r30, 0x20	; 32
    21de:	41 f0       	breq	.+16     	; 0x21f0 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    21e0:	e5 30       	cpi	r30, 0x05	; 5
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <get_fileinfo+0x40>
    21e4:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    21e6:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	88 30       	cpi	r24, 0x08	; 8
    21ec:	91 05       	cpc	r25, r1
    21ee:	91 f7       	brne	.-28     	; 0x21d4 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    21f0:	db 01       	movw	r26, r22
    21f2:	18 96       	adiw	r26, 0x08	; 8
    21f4:	8c 91       	ld	r24, X
    21f6:	80 32       	cpi	r24, 0x20	; 32
    21f8:	11 f4       	brne	.+4      	; 0x21fe <get_fileinfo+0x58>
    21fa:	8e 01       	movw	r16, r28
    21fc:	12 c0       	rjmp	.+36     	; 0x2222 <get_fileinfo+0x7c>
			*p++ = '.';
    21fe:	8e e2       	ldi	r24, 0x2E	; 46
    2200:	fe 01       	movw	r30, r28
    2202:	81 93       	st	Z+, r24
    2204:	8f 01       	movw	r16, r30
    2206:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    2208:	9e 01       	movw	r18, r28
    220a:	2c 5f       	subi	r18, 0xFC	; 252
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    220e:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2210:	80 32       	cpi	r24, 0x20	; 32
    2212:	39 f0       	breq	.+14     	; 0x2222 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2214:	d8 01       	movw	r26, r16
    2216:	8d 93       	st	X+, r24
    2218:	8d 01       	movw	r16, r26
    221a:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    221c:	a2 17       	cp	r26, r18
    221e:	b3 07       	cpc	r27, r19
    2220:	b1 f7       	brne	.-20     	; 0x220e <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2222:	fb 01       	movw	r30, r22
    2224:	83 85       	ldd	r24, Z+11	; 0x0b
    2226:	d7 01       	movw	r26, r14
    2228:	18 96       	adiw	r26, 0x08	; 8
    222a:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    222c:	27 8d       	ldd	r18, Z+31	; 0x1f
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	52 2f       	mov	r21, r18
    2236:	44 27       	eor	r20, r20
    2238:	33 27       	eor	r19, r19
    223a:	22 27       	eor	r18, r18
    223c:	86 8d       	ldd	r24, Z+30	; 0x1e
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e0       	ldi	r26, 0x00	; 0
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	dc 01       	movw	r26, r24
    2246:	99 27       	eor	r25, r25
    2248:	88 27       	eor	r24, r24
    224a:	28 2b       	or	r18, r24
    224c:	39 2b       	or	r19, r25
    224e:	4a 2b       	or	r20, r26
    2250:	5b 2b       	or	r21, r27
    2252:	84 8d       	ldd	r24, Z+28	; 0x1c
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e0       	ldi	r26, 0x00	; 0
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	28 2b       	or	r18, r24
    225c:	39 2b       	or	r19, r25
    225e:	4a 2b       	or	r20, r26
    2260:	5b 2b       	or	r21, r27
    2262:	95 8d       	ldd	r25, Z+29	; 0x1d
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	a0 e0       	ldi	r26, 0x00	; 0
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	28 2b       	or	r18, r24
    226c:	39 2b       	or	r19, r25
    226e:	4a 2b       	or	r20, r26
    2270:	5b 2b       	or	r21, r27
    2272:	f7 01       	movw	r30, r14
    2274:	20 83       	st	Z, r18
    2276:	31 83       	std	Z+1, r19	; 0x01
    2278:	42 83       	std	Z+2, r20	; 0x02
    227a:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    227c:	db 01       	movw	r26, r22
    227e:	59 96       	adiw	r26, 0x19	; 25
    2280:	9c 91       	ld	r25, X
    2282:	59 97       	sbiw	r26, 0x19	; 25
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	58 96       	adiw	r26, 0x18	; 24
    2288:	2c 91       	ld	r18, X
    228a:	58 97       	sbiw	r26, 0x18	; 24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	82 2b       	or	r24, r18
    2290:	93 2b       	or	r25, r19
    2292:	84 83       	std	Z+4, r24	; 0x04
    2294:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2296:	57 96       	adiw	r26, 0x17	; 23
    2298:	9c 91       	ld	r25, X
    229a:	57 97       	sbiw	r26, 0x17	; 23
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	56 96       	adiw	r26, 0x16	; 22
    22a0:	2c 91       	ld	r18, X
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	82 2b       	or	r24, r18
    22a6:	93 2b       	or	r25, r19
    22a8:	86 83       	std	Z+6, r24	; 0x06
    22aa:	97 83       	std	Z+7, r25	; 0x07
    22ac:	e8 01       	movw	r28, r16
	}
	*p = 0;
    22ae:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	ef 90       	pop	r14
    22bc:	08 95       	ret

000022be <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    22be:	5f 92       	push	r5
    22c0:	6f 92       	push	r6
    22c2:	7f 92       	push	r7
    22c4:	8f 92       	push	r8
    22c6:	9f 92       	push	r9
    22c8:	af 92       	push	r10
    22ca:	bf 92       	push	r11
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	ec 01       	movw	r28, r24
    22de:	7b 01       	movw	r14, r22
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    22e2:	08 94       	sec
    22e4:	e1 1c       	adc	r14, r1
    22e6:	f1 1c       	adc	r15, r1
    22e8:	f7 01       	movw	r30, r14
    22ea:	80 81       	ld	r24, Z
    22ec:	80 32       	cpi	r24, 0x20	; 32
    22ee:	c9 f3       	breq	.-14     	; 0x22e2 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    22f0:	8f 32       	cpi	r24, 0x2F	; 47
    22f2:	11 f0       	breq	.+4      	; 0x22f8 <follow_path+0x3a>
    22f4:	8c 35       	cpi	r24, 0x5C	; 92
    22f6:	19 f4       	brne	.+6      	; 0x22fe <follow_path+0x40>
		path++;
    22f8:	08 94       	sec
    22fa:	e1 1c       	adc	r14, r1
    22fc:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    22fe:	1e 82       	std	Y+6, r1	; 0x06
    2300:	1f 82       	std	Y+7, r1	; 0x07
    2302:	18 86       	std	Y+8, r1	; 0x08
    2304:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    2306:	f7 01       	movw	r30, r14
    2308:	80 81       	ld	r24, Z
    230a:	80 32       	cpi	r24, 0x20	; 32
    230c:	40 f4       	brcc	.+16     	; 0x231e <follow_path+0x60>
		res = dir_seek(dj, 0);
    230e:	ce 01       	movw	r24, r28
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
		dj->dir = NULL;
    2318:	1a 8a       	std	Y+18, r1	; 0x12
    231a:	1b 8a       	std	Y+19, r1	; 0x13
    231c:	13 c1       	rjmp	.+550    	; 0x2544 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    231e:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2320:	45 e0       	ldi	r20, 0x05	; 5
    2322:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2324:	ac 89       	ldd	r26, Y+20	; 0x14
    2326:	bd 89       	ldd	r27, Y+21	; 0x15
    2328:	fd 01       	movw	r30, r26
    232a:	8b e0       	ldi	r24, 0x0B	; 11
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2330:	01 93       	st	Z+, r16
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	2f ef       	ldi	r18, 0xFF	; 255
    2336:	8f 3f       	cpi	r24, 0xFF	; 255
    2338:	92 07       	cpc	r25, r18
    233a:	d1 f7       	brne	.-12     	; 0x2330 <follow_path+0x72>
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	cc 24       	eor	r12, r12
    2342:	dd 24       	eor	r13, r13
    2344:	38 e0       	ldi	r19, 0x08	; 8
    2346:	a3 2e       	mov	r10, r19
    2348:	b1 2c       	mov	r11, r1
    234a:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    234c:	f7 01       	movw	r30, r14
    234e:	ec 0d       	add	r30, r12
    2350:	fd 1d       	adc	r31, r13
    2352:	20 81       	ld	r18, Z
    2354:	08 94       	sec
    2356:	c1 1c       	adc	r12, r1
    2358:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    235a:	21 32       	cpi	r18, 0x21	; 33
    235c:	08 f4       	brcc	.+2      	; 0x2360 <follow_path+0xa2>
    235e:	66 c0       	rjmp	.+204    	; 0x242c <follow_path+0x16e>
    2360:	2f 32       	cpi	r18, 0x2F	; 47
    2362:	09 f4       	brne	.+2      	; 0x2366 <follow_path+0xa8>
    2364:	ff c0       	rjmp	.+510    	; 0x2564 <follow_path+0x2a6>
    2366:	2c 35       	cpi	r18, 0x5C	; 92
    2368:	09 f4       	brne	.+2      	; 0x236c <follow_path+0xae>
    236a:	fc c0       	rjmp	.+504    	; 0x2564 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    236c:	2e 32       	cpi	r18, 0x2E	; 46
    236e:	19 f0       	breq	.+6      	; 0x2376 <follow_path+0xb8>
    2370:	4a 15       	cp	r20, r10
    2372:	5b 05       	cpc	r21, r11
    2374:	84 f0       	brlt	.+32     	; 0x2396 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2376:	88 e0       	ldi	r24, 0x08	; 8
    2378:	a8 16       	cp	r10, r24
    237a:	b1 04       	cpc	r11, r1
    237c:	09 f0       	breq	.+2      	; 0x2380 <follow_path+0xc2>
    237e:	dd c0       	rjmp	.+442    	; 0x253a <follow_path+0x27c>
    2380:	2e 32       	cpi	r18, 0x2E	; 46
    2382:	09 f0       	breq	.+2      	; 0x2386 <follow_path+0xc8>
    2384:	da c0       	rjmp	.+436    	; 0x253a <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    2386:	11 0f       	add	r17, r17
    2388:	11 0f       	add	r17, r17
    238a:	48 e0       	ldi	r20, 0x08	; 8
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	2b e0       	ldi	r18, 0x0B	; 11
    2390:	a2 2e       	mov	r10, r18
    2392:	b1 2c       	mov	r11, r1
    2394:	db cf       	rjmp	.-74     	; 0x234c <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    2396:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    2398:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    239a:	82 2f       	mov	r24, r18
    239c:	81 58       	subi	r24, 0x81	; 129
    239e:	8f 31       	cpi	r24, 0x1F	; 31
    23a0:	18 f0       	brcs	.+6      	; 0x23a8 <follow_path+0xea>
    23a2:	8f 55       	subi	r24, 0x5F	; 95
    23a4:	8d 31       	cpi	r24, 0x1D	; 29
    23a6:	08 f5       	brcc	.+66     	; 0x23ea <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    23a8:	f7 01       	movw	r30, r14
    23aa:	ec 0d       	add	r30, r12
    23ac:	fd 1d       	adc	r31, r13
    23ae:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    23b0:	83 2f       	mov	r24, r19
    23b2:	80 54       	subi	r24, 0x40	; 64
    23b4:	8f 33       	cpi	r24, 0x3F	; 63
    23b6:	20 f0       	brcs	.+8      	; 0x23c0 <follow_path+0x102>
    23b8:	80 54       	subi	r24, 0x40	; 64
    23ba:	8d 37       	cpi	r24, 0x7D	; 125
    23bc:	08 f0       	brcs	.+2      	; 0x23c0 <follow_path+0x102>
    23be:	bd c0       	rjmp	.+378    	; 0x253a <follow_path+0x27c>
    23c0:	c5 01       	movw	r24, r10
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	48 17       	cp	r20, r24
    23c6:	59 07       	cpc	r21, r25
    23c8:	0c f0       	brlt	.+2      	; 0x23cc <follow_path+0x10e>
    23ca:	b7 c0       	rjmp	.+366    	; 0x253a <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    23cc:	08 94       	sec
    23ce:	c1 1c       	adc	r12, r1
    23d0:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    23d2:	fd 01       	movw	r30, r26
    23d4:	e4 0f       	add	r30, r20
    23d6:	f5 1f       	adc	r31, r21
    23d8:	20 83       	st	Z, r18
    23da:	ca 01       	movw	r24, r20
    23dc:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    23de:	fd 01       	movw	r30, r26
    23e0:	e8 0f       	add	r30, r24
    23e2:	f9 1f       	adc	r31, r25
    23e4:	30 83       	st	Z, r19
    23e6:	ac 01       	movw	r20, r24
    23e8:	1e c0       	rjmp	.+60     	; 0x2426 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    23ea:	62 2f       	mov	r22, r18
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	e0 e0       	ldi	r30, 0x00	; 0
    23f0:	f0 e2       	ldi	r31, 0x20	; 32
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    23f4:	31 96       	adiw	r30, 0x01	; 1
    23f6:	80 81       	ld	r24, Z
    23f8:	88 23       	and	r24, r24
    23fa:	29 f0       	breq	.+10     	; 0x2406 <follow_path+0x148>
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	86 17       	cp	r24, r22
    2400:	97 07       	cpc	r25, r23
    2402:	c1 f7       	brne	.-16     	; 0x23f4 <follow_path+0x136>
    2404:	9a c0       	rjmp	.+308    	; 0x253a <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2406:	82 2f       	mov	r24, r18
    2408:	81 54       	subi	r24, 0x41	; 65
    240a:	8a 31       	cpi	r24, 0x1A	; 26
    240c:	10 f4       	brcc	.+4      	; 0x2412 <follow_path+0x154>
				b |= 2;
    240e:	12 60       	ori	r17, 0x02	; 2
    2410:	06 c0       	rjmp	.+12     	; 0x241e <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2412:	82 2f       	mov	r24, r18
    2414:	81 56       	subi	r24, 0x61	; 97
    2416:	8a 31       	cpi	r24, 0x1A	; 26
    2418:	10 f4       	brcc	.+4      	; 0x241e <follow_path+0x160>
					b |= 1; c -= 0x20;
    241a:	11 60       	ori	r17, 0x01	; 1
    241c:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    241e:	fd 01       	movw	r30, r26
    2420:	e4 0f       	add	r30, r20
    2422:	f5 1f       	adc	r31, r21
    2424:	20 83       	st	Z, r18
    2426:	4f 5f       	subi	r20, 0xFF	; 255
    2428:	5f 4f       	sbci	r21, 0xFF	; 255
    242a:	90 cf       	rjmp	.-224    	; 0x234c <follow_path+0x8e>
    242c:	91 2f       	mov	r25, r17
    242e:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2430:	45 2b       	or	r20, r21
    2432:	09 f4       	brne	.+2      	; 0x2436 <follow_path+0x178>
    2434:	82 c0       	rjmp	.+260    	; 0x253a <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2436:	8c 91       	ld	r24, X
    2438:	85 3e       	cpi	r24, 0xE5	; 229
    243a:	09 f4       	brne	.+2      	; 0x243e <follow_path+0x180>
    243c:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    243e:	e8 e0       	ldi	r30, 0x08	; 8
    2440:	ae 16       	cp	r10, r30
    2442:	b1 04       	cpc	r11, r1
    2444:	19 f4       	brne	.+6      	; 0x244c <follow_path+0x18e>
    2446:	91 2f       	mov	r25, r17
    2448:	99 0f       	add	r25, r25
    244a:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    244c:	29 2f       	mov	r18, r25
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	c9 01       	movw	r24, r18
    2452:	83 70       	andi	r24, 0x03	; 3
    2454:	90 70       	andi	r25, 0x00	; 0
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	09 f4       	brne	.+2      	; 0x245c <follow_path+0x19e>
    245a:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    245c:	2c 70       	andi	r18, 0x0C	; 12
    245e:	30 70       	andi	r19, 0x00	; 0
    2460:	24 30       	cpi	r18, 0x04	; 4
    2462:	31 05       	cpc	r19, r1
    2464:	09 f4       	brne	.+2      	; 0x2468 <follow_path+0x1aa>
    2466:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2468:	1b 96       	adiw	r26, 0x0b	; 11
    246a:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    246c:	ce 01       	movw	r24, r28
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
    2476:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2478:	88 23       	and	r24, r24
    247a:	71 f5       	brne	.+92     	; 0x24d8 <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    247c:	4e 85       	ldd	r20, Y+14	; 0x0e
    247e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2480:	68 89       	ldd	r22, Y+16	; 0x10
    2482:	79 89       	ldd	r23, Y+17	; 0x11
    2484:	88 81       	ld	r24, Y
    2486:	99 81       	ldd	r25, Y+1	; 0x01
    2488:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    248c:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    248e:	88 23       	and	r24, r24
    2490:	19 f5       	brne	.+70     	; 0x24d8 <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2492:	ea 89       	ldd	r30, Y+18	; 0x12
    2494:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2496:	80 81       	ld	r24, Z
    2498:	88 23       	and	r24, r24
    249a:	11 f4       	brne	.+4      	; 0x24a0 <follow_path+0x1e2>
    249c:	44 e0       	ldi	r20, 0x04	; 4
    249e:	1c c0       	rjmp	.+56     	; 0x24d8 <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    24a0:	83 85       	ldd	r24, Z+11	; 0x0b
    24a2:	83 fd       	sbrc	r24, 3
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <follow_path+0x210>
    24a6:	df 01       	movw	r26, r30
    24a8:	8c 89       	ldd	r24, Y+20	; 0x14
    24aa:	9d 89       	ldd	r25, Y+21	; 0x15
    24ac:	9c 01       	movw	r18, r24
    24ae:	f9 01       	movw	r30, r18
    24b0:	2b e0       	ldi	r18, 0x0B	; 11
    24b2:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    24b4:	21 50       	subi	r18, 0x01	; 1
    24b6:	30 40       	sbci	r19, 0x00	; 0
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	2f 3f       	cpi	r18, 0xFF	; 255
    24bc:	38 07       	cpc	r19, r24
    24be:	61 f0       	breq	.+24     	; 0x24d8 <follow_path+0x21a>
    24c0:	9c 91       	ld	r25, X
    24c2:	80 81       	ld	r24, Z
    24c4:	98 17       	cp	r25, r24
    24c6:	19 f4       	brne	.+6      	; 0x24ce <follow_path+0x210>
    24c8:	11 96       	adiw	r26, 0x01	; 1
    24ca:	31 96       	adiw	r30, 0x01	; 1
    24cc:	f3 cf       	rjmp	.-26     	; 0x24b4 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    24ce:	ce 01       	movw	r24, r28
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <dir_next>
    24d6:	cf cf       	rjmp	.-98     	; 0x2476 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    24d8:	ec 89       	ldd	r30, Y+20	; 0x14
    24da:	fd 89       	ldd	r31, Y+21	; 0x15
    24dc:	93 85       	ldd	r25, Z+11	; 0x0b
    24de:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    24e0:	44 23       	and	r20, r20
    24e2:	31 f0       	breq	.+12     	; 0x24f0 <follow_path+0x232>
    24e4:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    24e6:	44 30       	cpi	r20, 0x04	; 4
    24e8:	51 f5       	brne	.+84     	; 0x253e <follow_path+0x280>
    24ea:	99 23       	and	r25, r25
    24ec:	51 f1       	breq	.+84     	; 0x2542 <follow_path+0x284>
    24ee:	2a c0       	rjmp	.+84     	; 0x2544 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    24f0:	99 23       	and	r25, r25
    24f2:	29 f5       	brne	.+74     	; 0x253e <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    24f4:	ea 89       	ldd	r30, Y+18	; 0x12
    24f6:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    24f8:	83 85       	ldd	r24, Z+11	; 0x0b
    24fa:	84 ff       	sbrs	r24, 4
    24fc:	22 c0       	rjmp	.+68     	; 0x2542 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    24fe:	ec 0c       	add	r14, r12
    2500:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2502:	75 88       	ldd	r7, Z+21	; 0x15
    2504:	66 24       	eor	r6, r6
    2506:	24 89       	ldd	r18, Z+20	; 0x14
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	26 29       	or	r18, r6
    250c:	37 29       	or	r19, r7
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	a9 01       	movw	r20, r18
    2514:	33 27       	eor	r19, r19
    2516:	22 27       	eor	r18, r18
    2518:	93 8c       	ldd	r9, Z+27	; 0x1b
    251a:	88 24       	eor	r8, r8
    251c:	82 8d       	ldd	r24, Z+26	; 0x1a
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	88 29       	or	r24, r8
    2522:	99 29       	or	r25, r9
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	28 2b       	or	r18, r24
    252a:	39 2b       	or	r19, r25
    252c:	4a 2b       	or	r20, r26
    252e:	5b 2b       	or	r21, r27
    2530:	2e 83       	std	Y+6, r18	; 0x06
    2532:	3f 83       	std	Y+7, r19	; 0x07
    2534:	48 87       	std	Y+8, r20	; 0x08
    2536:	59 87       	std	Y+9, r21	; 0x09
    2538:	f5 ce       	rjmp	.-534    	; 0x2324 <follow_path+0x66>
		}
    253a:	86 e0       	ldi	r24, 0x06	; 6
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <follow_path+0x286>
    253e:	84 2f       	mov	r24, r20
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <follow_path+0x286>
    2542:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	df 90       	pop	r13
    2552:	cf 90       	pop	r12
    2554:	bf 90       	pop	r11
    2556:	af 90       	pop	r10
    2558:	9f 90       	pop	r9
    255a:	8f 90       	pop	r8
    255c:	7f 90       	pop	r7
    255e:	6f 90       	pop	r6
    2560:	5f 90       	pop	r5
    2562:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2564:	91 2f       	mov	r25, r17
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	63 cf       	rjmp	.-314    	; 0x2430 <follow_path+0x172>

0000256a <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    256a:	0f 93       	push	r16
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	ec 01       	movw	r28, r24
    2572:	9a 01       	movw	r18, r20
    2574:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2576:	bc 01       	movw	r22, r24
    2578:	62 5d       	subi	r22, 0xD2	; 210
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	01 e0       	ldi	r16, 0x01	; 1
    2580:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    2584:	88 23       	and	r24, r24
    2586:	11 f0       	breq	.+4      	; 0x258c <check_fs+0x22>
    2588:	63 e0       	ldi	r22, 0x03	; 3
    258a:	6d c0       	rjmp	.+218    	; 0x2666 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    258c:	c3 5d       	subi	r28, 0xD3	; 211
    258e:	dd 4f       	sbci	r29, 0xFD	; 253
    2590:	98 81       	ld	r25, Y
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	2a 91       	ld	r18, -Y
    2596:	cc 52       	subi	r28, 0x2C	; 44
    2598:	d2 40       	sbci	r29, 0x02	; 2
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	82 2b       	or	r24, r18
    259e:	93 2b       	or	r25, r19
    25a0:	85 55       	subi	r24, 0x55	; 85
    25a2:	9a 4a       	sbci	r25, 0xAA	; 170
    25a4:	11 f0       	breq	.+4      	; 0x25aa <check_fs+0x40>
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	5e c0       	rjmp	.+188    	; 0x2666 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    25aa:	c9 59       	subi	r28, 0x99	; 153
    25ac:	df 4f       	sbci	r29, 0xFF	; 255
    25ae:	28 81       	ld	r18, Y
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	52 2f       	mov	r21, r18
    25b8:	44 27       	eor	r20, r20
    25ba:	33 27       	eor	r19, r19
    25bc:	22 27       	eor	r18, r18
    25be:	8a 91       	ld	r24, -Y
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	dc 01       	movw	r26, r24
    25c8:	99 27       	eor	r25, r25
    25ca:	88 27       	eor	r24, r24
    25cc:	28 2b       	or	r18, r24
    25ce:	39 2b       	or	r19, r25
    25d0:	4a 2b       	or	r20, r26
    25d2:	5b 2b       	or	r21, r27
    25d4:	22 97       	sbiw	r28, 0x02	; 2
    25d6:	89 91       	ld	r24, Y+
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	28 2b       	or	r18, r24
    25e0:	39 2b       	or	r19, r25
    25e2:	4a 2b       	or	r20, r26
    25e4:	5b 2b       	or	r21, r27
    25e6:	98 81       	ld	r25, Y
    25e8:	c5 56       	subi	r28, 0x65	; 101
    25ea:	d0 40       	sbci	r29, 0x00	; 0
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	a0 e0       	ldi	r26, 0x00	; 0
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	28 2b       	or	r18, r24
    25f4:	39 2b       	or	r19, r25
    25f6:	4a 2b       	or	r20, r26
    25f8:	5b 2b       	or	r21, r27
    25fa:	50 70       	andi	r21, 0x00	; 0
    25fc:	26 54       	subi	r18, 0x46	; 70
    25fe:	31 44       	sbci	r19, 0x41	; 65
    2600:	44 45       	sbci	r20, 0x54	; 84
    2602:	50 40       	sbci	r21, 0x00	; 0
    2604:	11 f4       	brne	.+4      	; 0x260a <check_fs+0xa0>
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	2e c0       	rjmp	.+92     	; 0x2666 <check_fs+0xfc>
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	cd 57       	subi	r28, 0x7D	; 125
    260e:	df 4f       	sbci	r29, 0xFF	; 255
    2610:	28 81       	ld	r18, Y
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	52 2f       	mov	r21, r18
    261a:	44 27       	eor	r20, r20
    261c:	33 27       	eor	r19, r19
    261e:	22 27       	eor	r18, r18
    2620:	8a 91       	ld	r24, -Y
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	dc 01       	movw	r26, r24
    262a:	99 27       	eor	r25, r25
    262c:	88 27       	eor	r24, r24
    262e:	28 2b       	or	r18, r24
    2630:	39 2b       	or	r19, r25
    2632:	4a 2b       	or	r20, r26
    2634:	5b 2b       	or	r21, r27
    2636:	22 97       	sbiw	r28, 0x02	; 2
    2638:	89 91       	ld	r24, Y+
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	28 2b       	or	r18, r24
    2642:	39 2b       	or	r19, r25
    2644:	4a 2b       	or	r20, r26
    2646:	5b 2b       	or	r21, r27
    2648:	98 81       	ld	r25, Y
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	a0 e0       	ldi	r26, 0x00	; 0
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	28 2b       	or	r18, r24
    2652:	39 2b       	or	r19, r25
    2654:	4a 2b       	or	r20, r26
    2656:	5b 2b       	or	r21, r27
    2658:	50 70       	andi	r21, 0x00	; 0
    265a:	26 54       	subi	r18, 0x46	; 70
    265c:	31 44       	sbci	r19, 0x41	; 65
    265e:	44 45       	sbci	r20, 0x54	; 84
    2660:	50 40       	sbci	r21, 0x00	; 0
    2662:	09 f0       	breq	.+2      	; 0x2666 <check_fs+0xfc>
    2664:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2666:	86 2f       	mov	r24, r22
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	0f 91       	pop	r16
    266e:	08 95       	ret

00002670 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2670:	6f 92       	push	r6
    2672:	7f 92       	push	r7
    2674:	8f 92       	push	r8
    2676:	9f 92       	push	r9
    2678:	af 92       	push	r10
    267a:	bf 92       	push	r11
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	fc 01       	movw	r30, r24
    268e:	9b 01       	movw	r18, r22
    2690:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2692:	a0 81       	ld	r26, Z
    2694:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2696:	8c 91       	ld	r24, X
    2698:	08 2f       	mov	r16, r24
    269a:	10 e0       	ldi	r17, 0x00	; 0
    269c:	00 53       	subi	r16, 0x30	; 48
    269e:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    26a0:	0a 30       	cpi	r16, 0x0A	; 10
    26a2:	11 05       	cpc	r17, r1
    26a4:	68 f4       	brcc	.+26     	; 0x26c0 <chk_mounted+0x50>
    26a6:	11 96       	adiw	r26, 0x01	; 1
    26a8:	8c 91       	ld	r24, X
    26aa:	11 97       	sbiw	r26, 0x01	; 1
    26ac:	8a 33       	cpi	r24, 0x3A	; 58
    26ae:	41 f4       	brne	.+16     	; 0x26c0 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    26b0:	12 96       	adiw	r26, 0x02	; 2
    26b2:	a0 83       	st	Z, r26
    26b4:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    26b6:	02 30       	cpi	r16, 0x02	; 2
    26b8:	11 05       	cpc	r17, r1
    26ba:	20 f0       	brcs	.+8      	; 0x26c4 <chk_mounted+0x54>
    26bc:	8b e0       	ldi	r24, 0x0B	; 11
    26be:	91 c2       	rjmp	.+1314   	; 0x2be2 <chk_mounted+0x572>
    26c0:	00 e0       	ldi	r16, 0x00	; 0
    26c2:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    26c4:	f8 01       	movw	r30, r16
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	e6 56       	subi	r30, 0x66	; 102
    26cc:	fe 4c       	sbci	r31, 0xCE	; 206
    26ce:	c0 81       	ld	r28, Z
    26d0:	d1 81       	ldd	r29, Z+1	; 0x01
    26d2:	f9 01       	movw	r30, r18
    26d4:	c0 83       	st	Z, r28
    26d6:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    26d8:	20 97       	sbiw	r28, 0x00	; 0
    26da:	11 f4       	brne	.+4      	; 0x26e0 <chk_mounted+0x70>
    26dc:	8c e0       	ldi	r24, 0x0C	; 12
    26de:	81 c2       	rjmp	.+1282   	; 0x2be2 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    26e0:	88 81       	ld	r24, Y
    26e2:	88 23       	and	r24, r24
    26e4:	79 f0       	breq	.+30     	; 0x2704 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	88 23       	and	r24, r24
    26ea:	11 f0       	breq	.+4      	; 0x26f0 <chk_mounted+0x80>
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <chk_mounted+0x84>
	return Stat;
    26f0:	80 91 ce 30 	lds	r24, 0x30CE
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    26f4:	80 fd       	sbrc	r24, 0
    26f6:	06 c0       	rjmp	.+12     	; 0x2704 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    26f8:	ff 20       	and	r15, r15
    26fa:	09 f4       	brne	.+2      	; 0x26fe <chk_mounted+0x8e>
    26fc:	6f c2       	rjmp	.+1246   	; 0x2bdc <chk_mounted+0x56c>
    26fe:	82 fd       	sbrc	r24, 2
    2700:	6b c2       	rjmp	.+1238   	; 0x2bd8 <chk_mounted+0x568>
    2702:	6c c2       	rjmp	.+1240   	; 0x2bdc <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2704:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    2706:	f8 01       	movw	r30, r16
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	eb 5b       	subi	r30, 0xBB	; 187
    270e:	f6 4d       	sbci	r31, 0xD6	; 214
    2710:	80 81       	ld	r24, Z
    2712:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    2714:	0e 94 74 05 	call	0xae8	; 0xae8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    2718:	80 ff       	sbrs	r24, 0
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <chk_mounted+0xb0>
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	61 c2       	rjmp	.+1218   	; 0x2be2 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2720:	ff 20       	and	r15, r15
    2722:	11 f0       	breq	.+4      	; 0x2728 <chk_mounted+0xb8>
    2724:	82 fd       	sbrc	r24, 2
    2726:	58 c2       	rjmp	.+1200   	; 0x2bd8 <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    2728:	ce 01       	movw	r24, r28
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	0e 94 b5 12 	call	0x256a	; 0x256a <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	21 f0       	breq	.+8      	; 0x2742 <chk_mounted+0xd2>
    273a:	aa 24       	eor	r10, r10
    273c:	bb 24       	eor	r11, r11
    273e:	65 01       	movw	r12, r10
    2740:	3d c0       	rjmp	.+122    	; 0x27bc <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2742:	00 0f       	add	r16, r16
    2744:	11 1f       	adc	r17, r17
    2746:	0b 5b       	subi	r16, 0xBB	; 187
    2748:	16 4d       	sbci	r17, 0xD6	; 214
    274a:	f8 01       	movw	r30, r16
    274c:	81 81       	ldd	r24, Z+1	; 0x01
    274e:	e8 2f       	mov	r30, r24
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	a4 e0       	ldi	r26, 0x04	; 4
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	aa 95       	dec	r26
    275a:	e1 f7       	brne	.-8      	; 0x2754 <chk_mounted+0xe4>
    275c:	e4 51       	subi	r30, 0x14	; 20
    275e:	fe 4f       	sbci	r31, 0xFE	; 254
    2760:	ec 0f       	add	r30, r28
    2762:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2764:	84 81       	ldd	r24, Z+4	; 0x04
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <chk_mounted+0xfc>
    276a:	3a c2       	rjmp	.+1140   	; 0x2be0 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    276c:	83 85       	ldd	r24, Z+11	; 0x0b
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e0       	ldi	r26, 0x00	; 0
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	d8 2e       	mov	r13, r24
    2776:	cc 24       	eor	r12, r12
    2778:	bb 24       	eor	r11, r11
    277a:	aa 24       	eor	r10, r10
    277c:	82 85       	ldd	r24, Z+10	; 0x0a
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e0       	ldi	r26, 0x00	; 0
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	dc 01       	movw	r26, r24
    2786:	99 27       	eor	r25, r25
    2788:	88 27       	eor	r24, r24
    278a:	a8 2a       	or	r10, r24
    278c:	b9 2a       	or	r11, r25
    278e:	ca 2a       	or	r12, r26
    2790:	db 2a       	or	r13, r27
    2792:	80 85       	ldd	r24, Z+8	; 0x08
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e0       	ldi	r26, 0x00	; 0
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	a8 2a       	or	r10, r24
    279c:	b9 2a       	or	r11, r25
    279e:	ca 2a       	or	r12, r26
    27a0:	db 2a       	or	r13, r27
    27a2:	91 85       	ldd	r25, Z+9	; 0x09
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	a0 e0       	ldi	r26, 0x00	; 0
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	a8 2a       	or	r10, r24
    27ac:	b9 2a       	or	r11, r25
    27ae:	ca 2a       	or	r12, r26
    27b0:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    27b2:	ce 01       	movw	r24, r28
    27b4:	b6 01       	movw	r22, r12
    27b6:	a5 01       	movw	r20, r10
    27b8:	0e 94 b5 12 	call	0x256a	; 0x256a <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    27bc:	83 30       	cpi	r24, 0x03	; 3
    27be:	11 f4       	brne	.+4      	; 0x27c4 <chk_mounted+0x154>
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	0f c2       	rjmp	.+1054   	; 0x2be2 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    27c4:	88 23       	and	r24, r24
    27c6:	09 f0       	breq	.+2      	; 0x27ca <chk_mounted+0x15a>
    27c8:	0b c2       	rjmp	.+1046   	; 0x2be0 <chk_mounted+0x570>
    27ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	29 ad       	ldd	r18, Y+57	; 0x39
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	82 2b       	or	r24, r18
    27d4:	93 2b       	or	r25, r19
    27d6:	80 50       	subi	r24, 0x00	; 0
    27d8:	92 40       	sbci	r25, 0x02	; 2
    27da:	09 f0       	breq	.+2      	; 0x27de <chk_mounted+0x16e>
    27dc:	01 c2       	rjmp	.+1026   	; 0x2be0 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    27de:	cb 5b       	subi	r28, 0xBB	; 187
    27e0:	df 4f       	sbci	r29, 0xFF	; 255
    27e2:	98 81       	ld	r25, Y
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	2a 91       	ld	r18, -Y
    27e8:	c4 54       	subi	r28, 0x44	; 68
    27ea:	d0 40       	sbci	r29, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	82 2b       	or	r24, r18
    27f0:	93 2b       	or	r25, r19
    27f2:	7c 01       	movw	r14, r24
    27f4:	00 e0       	ldi	r16, 0x00	; 0
    27f6:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    27f8:	e1 14       	cp	r14, r1
    27fa:	f1 04       	cpc	r15, r1
    27fc:	01 05       	cpc	r16, r1
    27fe:	11 05       	cpc	r17, r1
    2800:	41 f5       	brne	.+80     	; 0x2852 <chk_mounted+0x1e2>
    2802:	cb 5a       	subi	r28, 0xAB	; 171
    2804:	df 4f       	sbci	r29, 0xFF	; 255
    2806:	88 81       	ld	r24, Y
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	18 2f       	mov	r17, r24
    2810:	00 27       	eor	r16, r16
    2812:	ff 24       	eor	r15, r15
    2814:	ee 24       	eor	r14, r14
    2816:	8a 91       	ld	r24, -Y
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 e0       	ldi	r26, 0x00	; 0
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	dc 01       	movw	r26, r24
    2820:	99 27       	eor	r25, r25
    2822:	88 27       	eor	r24, r24
    2824:	e8 2a       	or	r14, r24
    2826:	f9 2a       	or	r15, r25
    2828:	0a 2b       	or	r16, r26
    282a:	1b 2b       	or	r17, r27
    282c:	22 97       	sbiw	r28, 0x02	; 2
    282e:	89 91       	ld	r24, Y+
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	a0 e0       	ldi	r26, 0x00	; 0
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e8 2a       	or	r14, r24
    2838:	f9 2a       	or	r15, r25
    283a:	0a 2b       	or	r16, r26
    283c:	1b 2b       	or	r17, r27
    283e:	98 81       	ld	r25, Y
    2840:	c3 55       	subi	r28, 0x53	; 83
    2842:	d0 40       	sbci	r29, 0x00	; 0
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	a0 e0       	ldi	r26, 0x00	; 0
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e8 2a       	or	r14, r24
    284c:	f9 2a       	or	r15, r25
    284e:	0a 2b       	or	r16, r26
    2850:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    2852:	ee 8a       	std	Y+22, r14	; 0x16
    2854:	ff 8a       	std	Y+23, r15	; 0x17
    2856:	08 8f       	std	Y+24, r16	; 0x18
    2858:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    285a:	2e ad       	ldd	r18, Y+62	; 0x3e
    285c:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	c8 01       	movw	r24, r16
    2866:	b7 01       	movw	r22, r14
    2868:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    286c:	3b 01       	movw	r6, r22
    286e:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2870:	9d ad       	ldd	r25, Y+61	; 0x3d
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	2c ad       	ldd	r18, Y+60	; 0x3c
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	82 2b       	or	r24, r18
    287a:	93 2b       	or	r25, r19
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	8a 0d       	add	r24, r10
    2882:	9b 1d       	adc	r25, r11
    2884:	ac 1d       	adc	r26, r12
    2886:	bd 1d       	adc	r27, r13
    2888:	8e 8f       	std	Y+30, r24	; 0x1e
    288a:	9f 8f       	std	Y+31, r25	; 0x1f
    288c:	a8 a3       	std	Y+32, r26	; 0x20
    288e:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2890:	8b ad       	ldd	r24, Y+59	; 0x3b
    2892:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2894:	c0 5c       	subi	r28, 0xC0	; 192
    2896:	df 4f       	sbci	r29, 0xFF	; 255
    2898:	98 81       	ld	r25, Y
    289a:	c0 54       	subi	r28, 0x40	; 64
    289c:	d0 40       	sbci	r29, 0x00	; 0
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	2f ad       	ldd	r18, Y+63	; 0x3f
    28a2:	42 2f       	mov	r20, r18
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	48 2b       	or	r20, r24
    28a8:	59 2b       	or	r21, r25
    28aa:	48 87       	std	Y+8, r20	; 0x08
    28ac:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    28ae:	ce 5b       	subi	r28, 0xBE	; 190
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	98 81       	ld	r25, Y
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	2a 91       	ld	r18, -Y
    28b8:	c1 54       	subi	r28, 0x41	; 65
    28ba:	d0 40       	sbci	r29, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	82 2b       	or	r24, r18
    28c0:	93 2b       	or	r25, r19
    28c2:	7c 01       	movw	r14, r24
    28c4:	00 e0       	ldi	r16, 0x00	; 0
    28c6:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    28c8:	e1 14       	cp	r14, r1
    28ca:	f1 04       	cpc	r15, r1
    28cc:	01 05       	cpc	r16, r1
    28ce:	11 05       	cpc	r17, r1
    28d0:	41 f5       	brne	.+80     	; 0x2922 <chk_mounted+0x2b2>
    28d2:	cf 5a       	subi	r28, 0xAF	; 175
    28d4:	df 4f       	sbci	r29, 0xFF	; 255
    28d6:	88 81       	ld	r24, Y
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	18 2f       	mov	r17, r24
    28e0:	00 27       	eor	r16, r16
    28e2:	ff 24       	eor	r15, r15
    28e4:	ee 24       	eor	r14, r14
    28e6:	8a 91       	ld	r24, -Y
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	dc 01       	movw	r26, r24
    28f0:	99 27       	eor	r25, r25
    28f2:	88 27       	eor	r24, r24
    28f4:	e8 2a       	or	r14, r24
    28f6:	f9 2a       	or	r15, r25
    28f8:	0a 2b       	or	r16, r26
    28fa:	1b 2b       	or	r17, r27
    28fc:	22 97       	sbiw	r28, 0x02	; 2
    28fe:	89 91       	ld	r24, Y+
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e8 2a       	or	r14, r24
    2908:	f9 2a       	or	r15, r25
    290a:	0a 2b       	or	r16, r26
    290c:	1b 2b       	or	r17, r27
    290e:	98 81       	ld	r25, Y
    2910:	cf 54       	subi	r28, 0x4F	; 79
    2912:	d0 40       	sbci	r29, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	a0 e0       	ldi	r26, 0x00	; 0
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e8 2a       	or	r14, r24
    291c:	f9 2a       	or	r15, r25
    291e:	0a 2b       	or	r16, r26
    2920:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2922:	9d ad       	ldd	r25, Y+61	; 0x3d
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	2c ad       	ldd	r18, Y+60	; 0x3c
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	82 2b       	or	r24, r18
    292c:	93 2b       	or	r25, r19
    292e:	a0 e0       	ldi	r26, 0x00	; 0
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e8 1a       	sub	r14, r24
    2934:	f9 0a       	sbc	r15, r25
    2936:	0a 0b       	sbc	r16, r26
    2938:	1b 0b       	sbc	r17, r27
    293a:	e6 18       	sub	r14, r6
    293c:	f7 08       	sbc	r15, r7
    293e:	08 09       	sbc	r16, r8
    2940:	19 09       	sbc	r17, r9
    2942:	f4 e0       	ldi	r31, 0x04	; 4
    2944:	56 95       	lsr	r21
    2946:	47 95       	ror	r20
    2948:	fa 95       	dec	r31
    294a:	e1 f7       	brne	.-8      	; 0x2944 <chk_mounted+0x2d4>
    294c:	ca 01       	movw	r24, r20
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e8 1a       	sub	r14, r24
    2954:	f9 0a       	sbc	r15, r25
    2956:	0a 0b       	sbc	r16, r26
    2958:	1b 0b       	sbc	r17, r27
    295a:	2a 81       	ldd	r18, Y+2	; 0x02
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	c8 01       	movw	r24, r16
    2964:	b7 01       	movw	r22, r14
    2966:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    296a:	2e 5f       	subi	r18, 0xFE	; 254
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
    296e:	4f 4f       	sbci	r20, 0xFF	; 255
    2970:	5f 4f       	sbci	r21, 0xFF	; 255
    2972:	2a 8f       	std	Y+26, r18	; 0x1a
    2974:	3b 8f       	std	Y+27, r19	; 0x1b
    2976:	4c 8f       	std	Y+28, r20	; 0x1c
    2978:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    297a:	27 3f       	cpi	r18, 0xF7	; 247
    297c:	8f e0       	ldi	r24, 0x0F	; 15
    297e:	38 07       	cpc	r19, r24
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	48 07       	cpc	r20, r24
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	58 07       	cpc	r21, r24
    2988:	10 f4       	brcc	.+4      	; 0x298e <chk_mounted+0x31e>
    298a:	11 e0       	ldi	r17, 0x01	; 1
    298c:	07 c0       	rjmp	.+14     	; 0x299c <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    298e:	27 5f       	subi	r18, 0xF7	; 247
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	40 40       	sbci	r20, 0x00	; 0
    2994:	50 40       	sbci	r21, 0x00	; 0
    2996:	08 f0       	brcs	.+2      	; 0x299a <chk_mounted+0x32a>
    2998:	33 c1       	rjmp	.+614    	; 0x2c00 <chk_mounted+0x590>
    299a:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    299c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    299e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29a0:	a8 a1       	ldd	r26, Y+32	; 0x20
    29a2:	b9 a1       	ldd	r27, Y+33	; 0x21
    29a4:	86 0d       	add	r24, r6
    29a6:	97 1d       	adc	r25, r7
    29a8:	a8 1d       	adc	r26, r8
    29aa:	b9 1d       	adc	r27, r9
    29ac:	8a a3       	std	Y+34, r24	; 0x22
    29ae:	9b a3       	std	Y+35, r25	; 0x23
    29b0:	ac a3       	std	Y+36, r26	; 0x24
    29b2:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    29b4:	88 85       	ldd	r24, Y+8	; 0x08
    29b6:	99 85       	ldd	r25, Y+9	; 0x09
    29b8:	e4 e0       	ldi	r30, 0x04	; 4
    29ba:	96 95       	lsr	r25
    29bc:	87 95       	ror	r24
    29be:	ea 95       	dec	r30
    29c0:	e1 f7       	brne	.-8      	; 0x29ba <chk_mounted+0x34a>
    29c2:	a0 e0       	ldi	r26, 0x00	; 0
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    29c8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    29ca:	48 a1       	ldd	r20, Y+32	; 0x20
    29cc:	59 a1       	ldd	r21, Y+33	; 0x21
    29ce:	82 0f       	add	r24, r18
    29d0:	93 1f       	adc	r25, r19
    29d2:	a4 1f       	adc	r26, r20
    29d4:	b5 1f       	adc	r27, r21
    29d6:	86 0d       	add	r24, r6
    29d8:	97 1d       	adc	r25, r7
    29da:	a8 1d       	adc	r26, r8
    29dc:	b9 1d       	adc	r27, r9
    29de:	8e a3       	std	Y+38, r24	; 0x26
    29e0:	9f a3       	std	Y+39, r25	; 0x27
    29e2:	a8 a7       	std	Y+40, r26	; 0x28
    29e4:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	9f ef       	ldi	r25, 0xFF	; 255
    29ea:	af ef       	ldi	r26, 0xFF	; 255
    29ec:	bf ef       	ldi	r27, 0xFF	; 255
    29ee:	8e 87       	std	Y+14, r24	; 0x0e
    29f0:	9f 87       	std	Y+15, r25	; 0x0f
    29f2:	a8 8b       	std	Y+16, r26	; 0x10
    29f4:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    29f6:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    29f8:	13 30       	cpi	r17, 0x03	; 3
    29fa:	09 f0       	breq	.+2      	; 0x29fe <chk_mounted+0x38e>
    29fc:	dc c0       	rjmp	.+440    	; 0x2bb6 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    29fe:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2a00:	c1 5a       	subi	r28, 0xA1	; 161
    2a02:	df 4f       	sbci	r29, 0xFF	; 255
    2a04:	38 81       	ld	r19, Y
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	8a 91       	ld	r24, -Y
    2a0a:	ce 55       	subi	r28, 0x5E	; 94
    2a0c:	d0 40       	sbci	r29, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	28 2b       	or	r18, r24
    2a12:	39 2b       	or	r19, r25
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	2a 0d       	add	r18, r10
    2a1a:	3b 1d       	adc	r19, r11
    2a1c:	4c 1d       	adc	r20, r12
    2a1e:	5d 1d       	adc	r21, r13
    2a20:	2a 8b       	std	Y+18, r18	; 0x12
    2a22:	3b 8b       	std	Y+19, r19	; 0x13
    2a24:	4c 8b       	std	Y+20, r20	; 0x14
    2a26:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2a28:	be 01       	movw	r22, r28
    2a2a:	62 5d       	subi	r22, 0xD2	; 210
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	01 e0       	ldi	r16, 0x01	; 1
    2a32:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    2a36:	88 23       	and	r24, r24
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <chk_mounted+0x3cc>
    2a3a:	bd c0       	rjmp	.+378    	; 0x2bb6 <chk_mounted+0x546>
    2a3c:	c3 5d       	subi	r28, 0xD3	; 211
    2a3e:	dd 4f       	sbci	r29, 0xFD	; 253
    2a40:	98 81       	ld	r25, Y
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	2a 91       	ld	r18, -Y
    2a46:	cc 52       	subi	r28, 0x2C	; 44
    2a48:	d2 40       	sbci	r29, 0x02	; 2
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	82 2b       	or	r24, r18
    2a4e:	93 2b       	or	r25, r19
    2a50:	85 55       	subi	r24, 0x55	; 85
    2a52:	9a 4a       	sbci	r25, 0xAA	; 170
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <chk_mounted+0x3e8>
    2a56:	af c0       	rjmp	.+350    	; 0x2bb6 <chk_mounted+0x546>
    2a58:	29 a9       	ldd	r18, Y+49	; 0x31
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	52 2f       	mov	r21, r18
    2a62:	44 27       	eor	r20, r20
    2a64:	33 27       	eor	r19, r19
    2a66:	22 27       	eor	r18, r18
    2a68:	88 a9       	ldd	r24, Y+48	; 0x30
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	dc 01       	movw	r26, r24
    2a72:	99 27       	eor	r25, r25
    2a74:	88 27       	eor	r24, r24
    2a76:	28 2b       	or	r18, r24
    2a78:	39 2b       	or	r19, r25
    2a7a:	4a 2b       	or	r20, r26
    2a7c:	5b 2b       	or	r21, r27
    2a7e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	28 2b       	or	r18, r24
    2a88:	39 2b       	or	r19, r25
    2a8a:	4a 2b       	or	r20, r26
    2a8c:	5b 2b       	or	r21, r27
    2a8e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	a0 e0       	ldi	r26, 0x00	; 0
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	28 2b       	or	r18, r24
    2a98:	39 2b       	or	r19, r25
    2a9a:	4a 2b       	or	r20, r26
    2a9c:	5b 2b       	or	r21, r27
    2a9e:	22 55       	subi	r18, 0x52	; 82
    2aa0:	32 45       	sbci	r19, 0x52	; 82
    2aa2:	41 46       	sbci	r20, 0x61	; 97
    2aa4:	51 44       	sbci	r21, 0x41	; 65
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <chk_mounted+0x43a>
    2aa8:	86 c0       	rjmp	.+268    	; 0x2bb6 <chk_mounted+0x546>
    2aaa:	cb 5e       	subi	r28, 0xEB	; 235
    2aac:	dd 4f       	sbci	r29, 0xFD	; 253
    2aae:	28 81       	ld	r18, Y
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	52 2f       	mov	r21, r18
    2ab8:	44 27       	eor	r20, r20
    2aba:	33 27       	eor	r19, r19
    2abc:	22 27       	eor	r18, r18
    2abe:	8a 91       	ld	r24, -Y
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e0       	ldi	r26, 0x00	; 0
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	99 27       	eor	r25, r25
    2aca:	88 27       	eor	r24, r24
    2acc:	28 2b       	or	r18, r24
    2ace:	39 2b       	or	r19, r25
    2ad0:	4a 2b       	or	r20, r26
    2ad2:	5b 2b       	or	r21, r27
    2ad4:	22 97       	sbiw	r28, 0x02	; 2
    2ad6:	89 91       	ld	r24, Y+
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 e0       	ldi	r26, 0x00	; 0
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	28 2b       	or	r18, r24
    2ae0:	39 2b       	or	r19, r25
    2ae2:	4a 2b       	or	r20, r26
    2ae4:	5b 2b       	or	r21, r27
    2ae6:	98 81       	ld	r25, Y
    2ae8:	c3 51       	subi	r28, 0x13	; 19
    2aea:	d2 40       	sbci	r29, 0x02	; 2
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	28 2b       	or	r18, r24
    2af4:	39 2b       	or	r19, r25
    2af6:	4a 2b       	or	r20, r26
    2af8:	5b 2b       	or	r21, r27
    2afa:	22 57       	subi	r18, 0x72	; 114
    2afc:	32 47       	sbci	r19, 0x72	; 114
    2afe:	41 44       	sbci	r20, 0x41	; 65
    2b00:	51 46       	sbci	r21, 0x61	; 97
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <chk_mounted+0x496>
    2b04:	58 c0       	rjmp	.+176    	; 0x2bb6 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2b06:	c3 5e       	subi	r28, 0xE3	; 227
    2b08:	dd 4f       	sbci	r29, 0xFD	; 253
    2b0a:	28 81       	ld	r18, Y
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	52 2f       	mov	r21, r18
    2b14:	44 27       	eor	r20, r20
    2b16:	33 27       	eor	r19, r19
    2b18:	22 27       	eor	r18, r18
    2b1a:	8a 91       	ld	r24, -Y
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a0 e0       	ldi	r26, 0x00	; 0
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	dc 01       	movw	r26, r24
    2b24:	99 27       	eor	r25, r25
    2b26:	88 27       	eor	r24, r24
    2b28:	28 2b       	or	r18, r24
    2b2a:	39 2b       	or	r19, r25
    2b2c:	4a 2b       	or	r20, r26
    2b2e:	5b 2b       	or	r21, r27
    2b30:	22 97       	sbiw	r28, 0x02	; 2
    2b32:	89 91       	ld	r24, Y+
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a0 e0       	ldi	r26, 0x00	; 0
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	28 2b       	or	r18, r24
    2b3c:	39 2b       	or	r19, r25
    2b3e:	4a 2b       	or	r20, r26
    2b40:	5b 2b       	or	r21, r27
    2b42:	98 81       	ld	r25, Y
    2b44:	cb 51       	subi	r28, 0x1B	; 27
    2b46:	d2 40       	sbci	r29, 0x02	; 2
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	28 2b       	or	r18, r24
    2b50:	39 2b       	or	r19, r25
    2b52:	4a 2b       	or	r20, r26
    2b54:	5b 2b       	or	r21, r27
    2b56:	2a 87       	std	Y+10, r18	; 0x0a
    2b58:	3b 87       	std	Y+11, r19	; 0x0b
    2b5a:	4c 87       	std	Y+12, r20	; 0x0c
    2b5c:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2b5e:	c7 5e       	subi	r28, 0xE7	; 231
    2b60:	dd 4f       	sbci	r29, 0xFD	; 253
    2b62:	28 81       	ld	r18, Y
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	52 2f       	mov	r21, r18
    2b6c:	44 27       	eor	r20, r20
    2b6e:	33 27       	eor	r19, r19
    2b70:	22 27       	eor	r18, r18
    2b72:	8a 91       	ld	r24, -Y
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	99 27       	eor	r25, r25
    2b7e:	88 27       	eor	r24, r24
    2b80:	28 2b       	or	r18, r24
    2b82:	39 2b       	or	r19, r25
    2b84:	4a 2b       	or	r20, r26
    2b86:	5b 2b       	or	r21, r27
    2b88:	22 97       	sbiw	r28, 0x02	; 2
    2b8a:	89 91       	ld	r24, Y+
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	28 2b       	or	r18, r24
    2b94:	39 2b       	or	r19, r25
    2b96:	4a 2b       	or	r20, r26
    2b98:	5b 2b       	or	r21, r27
    2b9a:	98 81       	ld	r25, Y
    2b9c:	c7 51       	subi	r28, 0x17	; 23
    2b9e:	d2 40       	sbci	r29, 0x02	; 2
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	28 2b       	or	r18, r24
    2ba8:	39 2b       	or	r19, r25
    2baa:	4a 2b       	or	r20, r26
    2bac:	5b 2b       	or	r21, r27
    2bae:	2e 87       	std	Y+14, r18	; 0x0e
    2bb0:	3f 87       	std	Y+15, r19	; 0x0f
    2bb2:	48 8b       	std	Y+16, r20	; 0x10
    2bb4:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2bb6:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2bb8:	1a a6       	std	Y+42, r1	; 0x2a
    2bba:	1b a6       	std	Y+43, r1	; 0x2b
    2bbc:	1c a6       	std	Y+44, r1	; 0x2c
    2bbe:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2bc0:	80 91 9e 31 	lds	r24, 0x319E
    2bc4:	90 91 9f 31 	lds	r25, 0x319F
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	80 93 9e 31 	sts	0x319E, r24
    2bce:	90 93 9f 31 	sts	0x319F, r25
    2bd2:	8e 83       	std	Y+6, r24	; 0x06
    2bd4:	9f 83       	std	Y+7, r25	; 0x07
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <chk_mounted+0x56c>

	return FR_OK;
    2bd8:	8a e0       	ldi	r24, 0x0A	; 10
    2bda:	03 c0       	rjmp	.+6      	; 0x2be2 <chk_mounted+0x572>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <chk_mounted+0x572>
    2be0:	8d e0       	ldi	r24, 0x0D	; 13
}
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	bf 90       	pop	r11
    2bf4:	af 90       	pop	r10
    2bf6:	9f 90       	pop	r9
    2bf8:	8f 90       	pop	r8
    2bfa:	7f 90       	pop	r7
    2bfc:	6f 90       	pop	r6
    2bfe:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2c00:	c3 5a       	subi	r28, 0xA3	; 163
    2c02:	df 4f       	sbci	r29, 0xFF	; 255
    2c04:	28 81       	ld	r18, Y
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	50 e0       	ldi	r21, 0x00	; 0
    2c0c:	52 2f       	mov	r21, r18
    2c0e:	44 27       	eor	r20, r20
    2c10:	33 27       	eor	r19, r19
    2c12:	22 27       	eor	r18, r18
    2c14:	8a 91       	ld	r24, -Y
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e0       	ldi	r26, 0x00	; 0
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	99 27       	eor	r25, r25
    2c20:	88 27       	eor	r24, r24
    2c22:	28 2b       	or	r18, r24
    2c24:	39 2b       	or	r19, r25
    2c26:	4a 2b       	or	r20, r26
    2c28:	5b 2b       	or	r21, r27
    2c2a:	22 97       	sbiw	r28, 0x02	; 2
    2c2c:	89 91       	ld	r24, Y+
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a0 e0       	ldi	r26, 0x00	; 0
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	28 2b       	or	r18, r24
    2c36:	39 2b       	or	r19, r25
    2c38:	4a 2b       	or	r20, r26
    2c3a:	5b 2b       	or	r21, r27
    2c3c:	98 81       	ld	r25, Y
    2c3e:	cb 55       	subi	r28, 0x5B	; 91
    2c40:	d0 40       	sbci	r29, 0x00	; 0
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	28 2b       	or	r18, r24
    2c4a:	39 2b       	or	r19, r25
    2c4c:	4a 2b       	or	r20, r26
    2c4e:	5b 2b       	or	r21, r27
    2c50:	2a a3       	std	Y+34, r18	; 0x22
    2c52:	3b a3       	std	Y+35, r19	; 0x23
    2c54:	4c a3       	std	Y+36, r20	; 0x24
    2c56:	5d a3       	std	Y+37, r21	; 0x25
    2c58:	13 e0       	ldi	r17, 0x03	; 3
    2c5a:	ac ce       	rjmp	.-680    	; 0x29b4 <chk_mounted+0x344>

00002c5c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2c5c:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	a9 f0       	breq	.+42     	; 0x2c8c <validate+0x30>
    2c62:	80 81       	ld	r24, Z
    2c64:	88 23       	and	r24, r24
    2c66:	91 f0       	breq	.+36     	; 0x2c8c <validate+0x30>
    2c68:	86 81       	ldd	r24, Z+6	; 0x06
    2c6a:	97 81       	ldd	r25, Z+7	; 0x07
    2c6c:	86 17       	cp	r24, r22
    2c6e:	97 07       	cpc	r25, r23
    2c70:	69 f4       	brne	.+26     	; 0x2c8c <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2c72:	81 81       	ldd	r24, Z+1	; 0x01
    2c74:	88 23       	and	r24, r24
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <validate+0x20>
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <validate+0x24>
	return Stat;
    2c7c:	80 91 ce 30 	lds	r24, 0x30CE
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2c80:	80 fd       	sbrc	r24, 0
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <validate+0x2c>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	08 95       	ret
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	08 95       	ret
    2c8c:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2c8e:	08 95       	ret

00002c90 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2c96:	82 30       	cpi	r24, 0x02	; 2
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <f_mount+0xe>
    2c9a:	8b e0       	ldi	r24, 0x0B	; 11
    2c9c:	17 c0       	rjmp	.+46     	; 0x2ccc <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2c9e:	a8 2f       	mov	r26, r24
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	fd 01       	movw	r30, r26
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	e6 56       	subi	r30, 0x66	; 102
    2caa:	fe 4c       	sbci	r31, 0xCE	; 206
    2cac:	01 90       	ld	r0, Z+
    2cae:	f0 81       	ld	r31, Z
    2cb0:	e0 2d       	mov	r30, r0

	if (rfs) {
    2cb2:	30 97       	sbiw	r30, 0x00	; 0
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2cb6:	10 82       	st	Z, r1
	}

	if (fs) {
    2cb8:	20 97       	sbiw	r28, 0x00	; 0
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2cbc:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2cbe:	aa 0f       	add	r26, r26
    2cc0:	bb 1f       	adc	r27, r27
    2cc2:	a6 56       	subi	r26, 0x66	; 102
    2cc4:	be 4c       	sbci	r27, 0xCE	; 206
    2cc6:	cd 93       	st	X+, r28
    2cc8:	dc 93       	st	X, r29
    2cca:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	08 95       	ret

00002cd2 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2cd2:	5f 92       	push	r5
    2cd4:	6f 92       	push	r6
    2cd6:	7f 92       	push	r7
    2cd8:	8f 92       	push	r8
    2cda:	9f 92       	push	r9
    2cdc:	af 92       	push	r10
    2cde:	bf 92       	push	r11
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	a4 97       	sbiw	r28, 0x24	; 36
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	3c 01       	movw	r6, r24
    2cfc:	6b a3       	std	Y+35, r22	; 0x23
    2cfe:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2d00:	dc 01       	movw	r26, r24
    2d02:	1d 92       	st	X+, r1
    2d04:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2d06:	3f e1       	ldi	r19, 0x1F	; 31
    2d08:	53 2e       	mov	r5, r19
    2d0a:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2d0c:	8e 01       	movw	r16, r28
    2d0e:	03 5f       	subi	r16, 0xF3	; 243
    2d10:	1f 4f       	sbci	r17, 0xFF	; 255
    2d12:	4e 71       	andi	r20, 0x1E	; 30
    2d14:	ce 01       	movw	r24, r28
    2d16:	83 96       	adiw	r24, 0x23	; 35
    2d18:	b8 01       	movw	r22, r16
    2d1a:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2d1e:	88 23       	and	r24, r24
    2d20:	11 f0       	breq	.+4      	; 0x2d26 <f_open+0x54>
    2d22:	28 2f       	mov	r18, r24
    2d24:	32 c1       	rjmp	.+612    	; 0x2f8a <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2d26:	ce 01       	movw	r24, r28
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	89 a3       	std	Y+33, r24	; 0x21
    2d2c:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d30:	7c a1       	ldd	r23, Y+36	; 0x24
    2d32:	c8 01       	movw	r24, r16
    2d34:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
    2d38:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2d3a:	45 2d       	mov	r20, r5
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	ca 01       	movw	r24, r20
    2d40:	8c 71       	andi	r24, 0x1C	; 28
    2d42:	90 70       	andi	r25, 0x00	; 0
    2d44:	89 2b       	or	r24, r25
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <f_open+0x78>
    2d48:	84 c0       	rjmp	.+264    	; 0x2e52 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2d4a:	22 23       	and	r18, r18
    2d4c:	79 f0       	breq	.+30     	; 0x2d6c <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2d4e:	24 30       	cpi	r18, 0x04	; 4
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <f_open+0x82>
    2d52:	1b c1       	rjmp	.+566    	; 0x2f8a <f_open+0x2b8>
				res = dir_register(&dj);
    2d54:	c8 01       	movw	r24, r16
    2d56:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <dir_register>
    2d5a:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <f_open+0x90>
    2d60:	14 c1       	rjmp	.+552    	; 0x2f8a <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2d62:	b8 e0       	ldi	r27, 0x08	; 8
    2d64:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2d66:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2d68:	18 a1       	ldd	r17, Y+32	; 0x20
    2d6a:	5b c0       	rjmp	.+182    	; 0x2e22 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2d6c:	52 fe       	sbrs	r5, 2
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <f_open+0xa2>
    2d70:	28 e0       	ldi	r18, 0x08	; 8
    2d72:	0b c1       	rjmp	.+534    	; 0x2f8a <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2d74:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2d76:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2d78:	01 15       	cp	r16, r1
    2d7a:	11 05       	cpc	r17, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <f_open+0xae>
    2d7e:	02 c1       	rjmp	.+516    	; 0x2f84 <f_open+0x2b2>
    2d80:	f8 01       	movw	r30, r16
    2d82:	83 85       	ldd	r24, Z+11	; 0x0b
    2d84:	81 71       	andi	r24, 0x11	; 17
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <f_open+0xb8>
    2d88:	fd c0       	rjmp	.+506    	; 0x2f84 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2d8a:	53 fe       	sbrs	r5, 3
    2d8c:	4a c0       	rjmp	.+148    	; 0x2e22 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2d8e:	95 89       	ldd	r25, Z+21	; 0x15
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	24 89       	ldd	r18, Z+20	; 0x14
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	82 2b       	or	r24, r18
    2d98:	93 2b       	or	r25, r19
    2d9a:	a0 e0       	ldi	r26, 0x00	; 0
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	7c 01       	movw	r14, r24
    2da0:	dd 24       	eor	r13, r13
    2da2:	cc 24       	eor	r12, r12
    2da4:	93 8d       	ldd	r25, Z+27	; 0x1b
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	22 8d       	ldd	r18, Z+26	; 0x1a
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	82 2b       	or	r24, r18
    2dae:	93 2b       	or	r25, r19
    2db0:	a0 e0       	ldi	r26, 0x00	; 0
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	c8 2a       	or	r12, r24
    2db6:	d9 2a       	or	r13, r25
    2db8:	ea 2a       	or	r14, r26
    2dba:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2dbc:	14 8a       	std	Z+20, r1	; 0x14
    2dbe:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2dc0:	12 8e       	std	Z+26, r1	; 0x1a
    2dc2:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2dc4:	14 8e       	std	Z+28, r1	; 0x1c
    2dc6:	15 8e       	std	Z+29, r1	; 0x1d
    2dc8:	16 8e       	std	Z+30, r1	; 0x1e
    2dca:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2dcc:	ed 85       	ldd	r30, Y+13	; 0x0d
    2dce:	fe 85       	ldd	r31, Y+14	; 0x0e
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2dd4:	82 a4       	ldd	r8, Z+42	; 0x2a
    2dd6:	93 a4       	ldd	r9, Z+43	; 0x2b
    2dd8:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2dda:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2ddc:	c1 14       	cp	r12, r1
    2dde:	d1 04       	cpc	r13, r1
    2de0:	e1 04       	cpc	r14, r1
    2de2:	f1 04       	cpc	r15, r1
    2de4:	a1 f0       	breq	.+40     	; 0x2e0e <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2de6:	cf 01       	movw	r24, r30
    2de8:	b7 01       	movw	r22, r14
    2dea:	a6 01       	movw	r20, r12
    2dec:	0e 94 03 0c 	call	0x1806	; 0x1806 <remove_chain>
    2df0:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2df2:	88 23       	and	r24, r24
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <f_open+0x126>
    2df6:	c9 c0       	rjmp	.+402    	; 0x2f8a <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2df8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2dfa:	fe 85       	ldd	r31, Y+14	; 0x0e
    2dfc:	08 94       	sec
    2dfe:	c1 08       	sbc	r12, r1
    2e00:	d1 08       	sbc	r13, r1
    2e02:	e1 08       	sbc	r14, r1
    2e04:	f1 08       	sbc	r15, r1
    2e06:	c2 86       	std	Z+10, r12	; 0x0a
    2e08:	d3 86       	std	Z+11, r13	; 0x0b
    2e0a:	e4 86       	std	Z+12, r14	; 0x0c
    2e0c:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e12:	b5 01       	movw	r22, r10
    2e14:	a4 01       	movw	r20, r8
    2e16:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    2e1a:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e1c:	88 23       	and	r24, r24
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <f_open+0x150>
    2e20:	b4 c0       	rjmp	.+360    	; 0x2f8a <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2e22:	53 fe       	sbrs	r5, 3
    2e24:	27 c0       	rjmp	.+78     	; 0x2e74 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2e26:	d8 01       	movw	r26, r16
    2e28:	1b 96       	adiw	r26, 0x0b	; 11
    2e2a:	1c 92       	st	X, r1
    2e2c:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2e2e:	1e 96       	adiw	r26, 0x0e	; 14
    2e30:	1c 92       	st	X, r1
    2e32:	1e 97       	sbiw	r26, 0x0e	; 14
    2e34:	1f 96       	adiw	r26, 0x0f	; 15
    2e36:	1c 92       	st	X, r1
    2e38:	1f 97       	sbiw	r26, 0x0f	; 15
    2e3a:	50 96       	adiw	r26, 0x10	; 16
    2e3c:	1c 92       	st	X, r1
    2e3e:	50 97       	sbiw	r26, 0x10	; 16
    2e40:	51 96       	adiw	r26, 0x11	; 17
    2e42:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2e44:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e46:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2e4c:	b0 e2       	ldi	r27, 0x20	; 32
    2e4e:	5b 2a       	or	r5, r27
    2e50:	11 c0       	rjmp	.+34     	; 0x2e74 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2e52:	22 23       	and	r18, r18
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <f_open+0x186>
    2e56:	99 c0       	rjmp	.+306    	; 0x2f8a <f_open+0x2b8>
		dir = dj.dir;
    2e58:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e5a:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2e5c:	01 15       	cp	r16, r1
    2e5e:	11 05       	cpc	r17, r1
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <f_open+0x192>
    2e62:	92 c0       	rjmp	.+292    	; 0x2f88 <f_open+0x2b6>
    2e64:	f8 01       	movw	r30, r16
    2e66:	83 85       	ldd	r24, Z+11	; 0x0b
    2e68:	84 fd       	sbrc	r24, 4
    2e6a:	8e c0       	rjmp	.+284    	; 0x2f88 <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2e6c:	51 fe       	sbrs	r5, 1
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <f_open+0x1a2>
    2e70:	80 fd       	sbrc	r24, 0
    2e72:	88 c0       	rjmp	.+272    	; 0x2f84 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2e74:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e76:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e78:	22 a5       	ldd	r18, Z+42	; 0x2a
    2e7a:	33 a5       	ldd	r19, Z+43	; 0x2b
    2e7c:	44 a5       	ldd	r20, Z+44	; 0x2c
    2e7e:	55 a5       	ldd	r21, Z+45	; 0x2d
    2e80:	d3 01       	movw	r26, r6
    2e82:	5a 96       	adiw	r26, 0x1a	; 26
    2e84:	2d 93       	st	X+, r18
    2e86:	3d 93       	st	X+, r19
    2e88:	4d 93       	st	X+, r20
    2e8a:	5c 93       	st	X, r21
    2e8c:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2e8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e90:	98 a1       	ldd	r25, Y+32	; 0x20
    2e92:	5e 96       	adiw	r26, 0x1e	; 30
    2e94:	8d 93       	st	X+, r24
    2e96:	9c 93       	st	X, r25
    2e98:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2e9a:	14 96       	adiw	r26, 0x04	; 4
    2e9c:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2e9e:	d8 01       	movw	r26, r16
    2ea0:	55 96       	adiw	r26, 0x15	; 21
    2ea2:	3c 91       	ld	r19, X
    2ea4:	55 97       	sbiw	r26, 0x15	; 21
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	54 96       	adiw	r26, 0x14	; 20
    2eaa:	8c 91       	ld	r24, X
    2eac:	54 97       	sbiw	r26, 0x14	; 20
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	28 2b       	or	r18, r24
    2eb2:	39 2b       	or	r19, r25
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	a9 01       	movw	r20, r18
    2eba:	33 27       	eor	r19, r19
    2ebc:	22 27       	eor	r18, r18
    2ebe:	5b 96       	adiw	r26, 0x1b	; 27
    2ec0:	9c 91       	ld	r25, X
    2ec2:	5b 97       	sbiw	r26, 0x1b	; 27
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	5a 96       	adiw	r26, 0x1a	; 26
    2ec8:	6c 91       	ld	r22, X
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	86 2b       	or	r24, r22
    2ece:	97 2b       	or	r25, r23
    2ed0:	a0 e0       	ldi	r26, 0x00	; 0
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	28 2b       	or	r18, r24
    2ed6:	39 2b       	or	r19, r25
    2ed8:	4a 2b       	or	r20, r26
    2eda:	5b 2b       	or	r21, r27
    2edc:	d3 01       	movw	r26, r6
    2ede:	1e 96       	adiw	r26, 0x0e	; 14
    2ee0:	2d 93       	st	X+, r18
    2ee2:	3d 93       	st	X+, r19
    2ee4:	4d 93       	st	X+, r20
    2ee6:	5c 93       	st	X, r21
    2ee8:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2eea:	d8 01       	movw	r26, r16
    2eec:	5f 96       	adiw	r26, 0x1f	; 31
    2eee:	2c 91       	ld	r18, X
    2ef0:	5f 97       	sbiw	r26, 0x1f	; 31
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	52 2f       	mov	r21, r18
    2efa:	44 27       	eor	r20, r20
    2efc:	33 27       	eor	r19, r19
    2efe:	22 27       	eor	r18, r18
    2f00:	5e 96       	adiw	r26, 0x1e	; 30
    2f02:	8c 91       	ld	r24, X
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	a0 e0       	ldi	r26, 0x00	; 0
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	99 27       	eor	r25, r25
    2f0e:	88 27       	eor	r24, r24
    2f10:	28 2b       	or	r18, r24
    2f12:	39 2b       	or	r19, r25
    2f14:	4a 2b       	or	r20, r26
    2f16:	5b 2b       	or	r21, r27
    2f18:	d8 01       	movw	r26, r16
    2f1a:	5c 96       	adiw	r26, 0x1c	; 28
    2f1c:	8c 91       	ld	r24, X
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	28 2b       	or	r18, r24
    2f26:	39 2b       	or	r19, r25
    2f28:	4a 2b       	or	r20, r26
    2f2a:	5b 2b       	or	r21, r27
    2f2c:	d8 01       	movw	r26, r16
    2f2e:	5d 96       	adiw	r26, 0x1d	; 29
    2f30:	9c 91       	ld	r25, X
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	a0 e0       	ldi	r26, 0x00	; 0
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	28 2b       	or	r18, r24
    2f3a:	39 2b       	or	r19, r25
    2f3c:	4a 2b       	or	r20, r26
    2f3e:	5b 2b       	or	r21, r27
    2f40:	d3 01       	movw	r26, r6
    2f42:	1a 96       	adiw	r26, 0x0a	; 10
    2f44:	2d 93       	st	X+, r18
    2f46:	3d 93       	st	X+, r19
    2f48:	4d 93       	st	X+, r20
    2f4a:	5c 93       	st	X, r21
    2f4c:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2f4e:	16 96       	adiw	r26, 0x06	; 6
    2f50:	1d 92       	st	X+, r1
    2f52:	1d 92       	st	X+, r1
    2f54:	1d 92       	st	X+, r1
    2f56:	1c 92       	st	X, r1
    2f58:	19 97       	sbiw	r26, 0x09	; 9
    2f5a:	8f ef       	ldi	r24, 0xFF	; 255
    2f5c:	15 96       	adiw	r26, 0x05	; 5
    2f5e:	8c 93       	st	X, r24
    2f60:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2f62:	56 96       	adiw	r26, 0x16	; 22
    2f64:	1d 92       	st	X+, r1
    2f66:	1d 92       	st	X+, r1
    2f68:	1d 92       	st	X+, r1
    2f6a:	1c 92       	st	X, r1
    2f6c:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2f6e:	ed 93       	st	X+, r30
    2f70:	fc 93       	st	X, r31
    2f72:	11 97       	sbiw	r26, 0x01	; 1
    2f74:	86 81       	ldd	r24, Z+6	; 0x06
    2f76:	97 81       	ldd	r25, Z+7	; 0x07
    2f78:	12 96       	adiw	r26, 0x02	; 2
    2f7a:	8d 93       	st	X+, r24
    2f7c:	9c 93       	st	X, r25
    2f7e:	13 97       	sbiw	r26, 0x03	; 3
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	03 c0       	rjmp	.+6      	; 0x2f8a <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    2f84:	27 e0       	ldi	r18, 0x07	; 7
    2f86:	01 c0       	rjmp	.+2      	; 0x2f8a <f_open+0x2b8>
    2f88:	24 e0       	ldi	r18, 0x04	; 4
}
    2f8a:	82 2f       	mov	r24, r18
    2f8c:	a4 96       	adiw	r28, 0x24	; 36
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	1f 91       	pop	r17
    2f98:	0f 91       	pop	r16
    2f9a:	ff 90       	pop	r15
    2f9c:	ef 90       	pop	r14
    2f9e:	df 90       	pop	r13
    2fa0:	cf 90       	pop	r12
    2fa2:	bf 90       	pop	r11
    2fa4:	af 90       	pop	r10
    2fa6:	9f 90       	pop	r9
    2fa8:	8f 90       	pop	r8
    2faa:	7f 90       	pop	r7
    2fac:	6f 90       	pop	r6
    2fae:	5f 90       	pop	r5
    2fb0:	08 95       	ret

00002fb2 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2fb2:	2f 92       	push	r2
    2fb4:	3f 92       	push	r3
    2fb6:	4f 92       	push	r4
    2fb8:	5f 92       	push	r5
    2fba:	6f 92       	push	r6
    2fbc:	7f 92       	push	r7
    2fbe:	8f 92       	push	r8
    2fc0:	9f 92       	push	r9
    2fc2:	af 92       	push	r10
    2fc4:	bf 92       	push	r11
    2fc6:	cf 92       	push	r12
    2fc8:	df 92       	push	r13
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <f_read+0x26>
    2fd8:	0f 92       	push	r0
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	16 2f       	mov	r17, r22
    2fe4:	07 2f       	mov	r16, r23
    2fe6:	4a 01       	movw	r8, r20
    2fe8:	29 83       	std	Y+1, r18	; 0x01
    2fea:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    2fec:	d9 01       	movw	r26, r18
    2fee:	1d 92       	st	X+, r1
    2ff0:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	62 81       	ldd	r22, Z+2	; 0x02
    2ff6:	73 81       	ldd	r23, Z+3	; 0x03
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <validate>
    3000:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3002:	88 23       	and	r24, r24
    3004:	09 f0       	breq	.+2      	; 0x3008 <f_read+0x56>
    3006:	b4 c1       	rjmp	.+872    	; 0x3370 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3008:	ab 81       	ldd	r26, Y+3	; 0x03
    300a:	bc 81       	ldd	r27, Y+4	; 0x04
    300c:	14 96       	adiw	r26, 0x04	; 4
    300e:	8c 91       	ld	r24, X
    3010:	87 fd       	sbrc	r24, 7
    3012:	66 c0       	rjmp	.+204    	; 0x30e0 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    3014:	80 fd       	sbrc	r24, 0
    3016:	03 c0       	rjmp	.+6      	; 0x301e <f_read+0x6c>
    3018:	a7 e0       	ldi	r26, 0x07	; 7
    301a:	7a 2e       	mov	r7, r26
    301c:	a9 c1       	rjmp	.+850    	; 0x3370 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    301e:	eb 81       	ldd	r30, Y+3	; 0x03
    3020:	fc 81       	ldd	r31, Y+4	; 0x04
    3022:	22 85       	ldd	r18, Z+10	; 0x0a
    3024:	33 85       	ldd	r19, Z+11	; 0x0b
    3026:	44 85       	ldd	r20, Z+12	; 0x0c
    3028:	55 85       	ldd	r21, Z+13	; 0x0d
    302a:	86 81       	ldd	r24, Z+6	; 0x06
    302c:	97 81       	ldd	r25, Z+7	; 0x07
    302e:	a0 85       	ldd	r26, Z+8	; 0x08
    3030:	b1 85       	ldd	r27, Z+9	; 0x09
    3032:	28 1b       	sub	r18, r24
    3034:	39 0b       	sbc	r19, r25
    3036:	4a 0b       	sbc	r20, r26
    3038:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    303a:	c4 01       	movw	r24, r8
    303c:	a0 e0       	ldi	r26, 0x00	; 0
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	28 17       	cp	r18, r24
    3042:	39 07       	cpc	r19, r25
    3044:	4a 07       	cpc	r20, r26
    3046:	5b 07       	cpc	r21, r27
    3048:	08 f4       	brcc	.+2      	; 0x304c <f_read+0x9a>
    304a:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    304c:	81 2f       	mov	r24, r17
    304e:	90 2f       	mov	r25, r16
    3050:	9c 01       	movw	r18, r24
    3052:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3054:	f0 e2       	ldi	r31, 0x20	; 32
    3056:	2f 2e       	mov	r2, r31
    3058:	31 2c       	mov	r3, r1
    305a:	6b 81       	ldd	r22, Y+3	; 0x03
    305c:	7c 81       	ldd	r23, Y+4	; 0x04
    305e:	26 0e       	add	r2, r22
    3060:	37 1e       	adc	r3, r23
    3062:	82 c1       	rjmp	.+772    	; 0x3368 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3064:	ab 81       	ldd	r26, Y+3	; 0x03
    3066:	bc 81       	ldd	r27, Y+4	; 0x04
    3068:	16 96       	adiw	r26, 0x06	; 6
    306a:	2d 91       	ld	r18, X+
    306c:	3d 91       	ld	r19, X+
    306e:	4d 91       	ld	r20, X+
    3070:	5c 91       	ld	r21, X
    3072:	19 97       	sbiw	r26, 0x09	; 9
    3074:	da 01       	movw	r26, r20
    3076:	c9 01       	movw	r24, r18
    3078:	91 70       	andi	r25, 0x01	; 1
    307a:	a0 70       	andi	r26, 0x00	; 0
    307c:	b0 70       	andi	r27, 0x00	; 0
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	a1 05       	cpc	r26, r1
    3082:	b1 05       	cpc	r27, r1
    3084:	09 f0       	breq	.+2      	; 0x3088 <f_read+0xd6>
    3086:	2c c1       	rjmp	.+600    	; 0x32e0 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3088:	ab 81       	ldd	r26, Y+3	; 0x03
    308a:	bc 81       	ldd	r27, Y+4	; 0x04
    308c:	ed 91       	ld	r30, X+
    308e:	fc 91       	ld	r31, X
    3090:	11 97       	sbiw	r26, 0x01	; 1
    3092:	15 96       	adiw	r26, 0x05	; 5
    3094:	9c 91       	ld	r25, X
    3096:	15 97       	sbiw	r26, 0x05	; 5
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	98 17       	cp	r25, r24
    309c:	a0 f1       	brcs	.+104    	; 0x3106 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    309e:	21 15       	cp	r18, r1
    30a0:	31 05       	cpc	r19, r1
    30a2:	41 05       	cpc	r20, r1
    30a4:	51 05       	cpc	r21, r1
    30a6:	39 f4       	brne	.+14     	; 0x30b6 <f_read+0x104>
    30a8:	1e 96       	adiw	r26, 0x0e	; 14
    30aa:	6d 91       	ld	r22, X+
    30ac:	7d 91       	ld	r23, X+
    30ae:	8d 91       	ld	r24, X+
    30b0:	9c 91       	ld	r25, X
    30b2:	51 97       	sbiw	r26, 0x11	; 17
    30b4:	0b c0       	rjmp	.+22     	; 0x30cc <f_read+0x11a>
    30b6:	ab 81       	ldd	r26, Y+3	; 0x03
    30b8:	bc 81       	ldd	r27, Y+4	; 0x04
    30ba:	52 96       	adiw	r26, 0x12	; 18
    30bc:	4d 91       	ld	r20, X+
    30be:	5d 91       	ld	r21, X+
    30c0:	6d 91       	ld	r22, X+
    30c2:	7c 91       	ld	r23, X
    30c4:	55 97       	sbiw	r26, 0x15	; 21
    30c6:	cf 01       	movw	r24, r30
    30c8:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    30cc:	62 30       	cpi	r22, 0x02	; 2
    30ce:	71 05       	cpc	r23, r1
    30d0:	81 05       	cpc	r24, r1
    30d2:	91 05       	cpc	r25, r1
    30d4:	40 f4       	brcc	.+16     	; 0x30e6 <f_read+0x134>
    30d6:	eb 81       	ldd	r30, Y+3	; 0x03
    30d8:	fc 81       	ldd	r31, Y+4	; 0x04
    30da:	84 81       	ldd	r24, Z+4	; 0x04
    30dc:	80 68       	ori	r24, 0x80	; 128
    30de:	84 83       	std	Z+4, r24	; 0x04
    30e0:	e2 e0       	ldi	r30, 0x02	; 2
    30e2:	7e 2e       	mov	r7, r30
    30e4:	45 c1       	rjmp	.+650    	; 0x3370 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    30e6:	6f 3f       	cpi	r22, 0xFF	; 255
    30e8:	ff ef       	ldi	r31, 0xFF	; 255
    30ea:	7f 07       	cpc	r23, r31
    30ec:	ff ef       	ldi	r31, 0xFF	; 255
    30ee:	8f 07       	cpc	r24, r31
    30f0:	ff ef       	ldi	r31, 0xFF	; 255
    30f2:	9f 07       	cpc	r25, r31
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <f_read+0x146>
    30f6:	e0 c0       	rjmp	.+448    	; 0x32b8 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    30f8:	eb 81       	ldd	r30, Y+3	; 0x03
    30fa:	fc 81       	ldd	r31, Y+4	; 0x04
    30fc:	62 8b       	std	Z+18, r22	; 0x12
    30fe:	73 8b       	std	Z+19, r23	; 0x13
    3100:	84 8b       	std	Z+20, r24	; 0x14
    3102:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    3104:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3106:	ab 81       	ldd	r26, Y+3	; 0x03
    3108:	bc 81       	ldd	r27, Y+4	; 0x04
    310a:	0d 91       	ld	r16, X+
    310c:	1c 91       	ld	r17, X
    310e:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3110:	52 96       	adiw	r26, 0x12	; 18
    3112:	2d 91       	ld	r18, X+
    3114:	3d 91       	ld	r19, X+
    3116:	4d 91       	ld	r20, X+
    3118:	5c 91       	ld	r21, X
    311a:	55 97       	sbiw	r26, 0x15	; 21
    311c:	22 50       	subi	r18, 0x02	; 2
    311e:	30 40       	sbci	r19, 0x00	; 0
    3120:	40 40       	sbci	r20, 0x00	; 0
    3122:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3124:	f8 01       	movw	r30, r16
    3126:	82 8d       	ldd	r24, Z+26	; 0x1a
    3128:	93 8d       	ldd	r25, Z+27	; 0x1b
    312a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    312c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    312e:	02 97       	sbiw	r24, 0x02	; 2
    3130:	a1 09       	sbc	r26, r1
    3132:	b1 09       	sbc	r27, r1
    3134:	28 17       	cp	r18, r24
    3136:	39 07       	cpc	r19, r25
    3138:	4a 07       	cpc	r20, r26
    313a:	5b 07       	cpc	r21, r27
    313c:	b8 f4       	brcc	.+46     	; 0x316c <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    313e:	62 80       	ldd	r6, Z+2	; 0x02
    3140:	66 2d       	mov	r22, r6
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    314c:	9b 01       	movw	r18, r22
    314e:	ac 01       	movw	r20, r24
    3150:	f8 01       	movw	r30, r16
    3152:	86 a1       	ldd	r24, Z+38	; 0x26
    3154:	97 a1       	ldd	r25, Z+39	; 0x27
    3156:	a0 a5       	ldd	r26, Z+40	; 0x28
    3158:	b1 a5       	ldd	r27, Z+41	; 0x29
    315a:	28 0f       	add	r18, r24
    315c:	39 1f       	adc	r19, r25
    315e:	4a 1f       	adc	r20, r26
    3160:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3162:	21 15       	cp	r18, r1
    3164:	31 05       	cpc	r19, r1
    3166:	41 05       	cpc	r20, r1
    3168:	51 05       	cpc	r21, r1
    316a:	49 f4       	brne	.+18     	; 0x317e <f_read+0x1cc>
    316c:	ab 81       	ldd	r26, Y+3	; 0x03
    316e:	bc 81       	ldd	r27, Y+4	; 0x04
    3170:	14 96       	adiw	r26, 0x04	; 4
    3172:	8c 91       	ld	r24, X
    3174:	14 97       	sbiw	r26, 0x04	; 4
    3176:	80 68       	ori	r24, 0x80	; 128
    3178:	14 96       	adiw	r26, 0x04	; 4
    317a:	8c 93       	st	X, r24
    317c:	b1 cf       	rjmp	.-158    	; 0x30e0 <f_read+0x12e>
			sect += fp->csect;
    317e:	eb 81       	ldd	r30, Y+3	; 0x03
    3180:	fc 81       	ldd	r31, Y+4	; 0x04
    3182:	85 81       	ldd	r24, Z+5	; 0x05
    3184:	59 01       	movw	r10, r18
    3186:	6a 01       	movw	r12, r20
    3188:	a8 0e       	add	r10, r24
    318a:	b1 1c       	adc	r11, r1
    318c:	c1 1c       	adc	r12, r1
    318e:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3190:	74 01       	movw	r14, r8
    3192:	ef 2c       	mov	r14, r15
    3194:	ff 24       	eor	r15, r15
    3196:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    3198:	e1 14       	cp	r14, r1
    319a:	f1 04       	cpc	r15, r1
    319c:	09 f4       	brne	.+2      	; 0x31a0 <f_read+0x1ee>
    319e:	53 c0       	rjmp	.+166    	; 0x3246 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	c7 01       	movw	r24, r14
    31a6:	82 0f       	add	r24, r18
    31a8:	93 1f       	adc	r25, r19
    31aa:	66 2d       	mov	r22, r6
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	68 17       	cp	r22, r24
    31b0:	79 07       	cpc	r23, r25
    31b2:	18 f4       	brcc	.+6      	; 0x31ba <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    31b4:	7b 01       	movw	r14, r22
    31b6:	e2 1a       	sub	r14, r18
    31b8:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    31ba:	d8 01       	movw	r26, r16
    31bc:	11 96       	adiw	r26, 0x01	; 1
    31be:	8c 91       	ld	r24, X
    31c0:	b2 01       	movw	r22, r4
    31c2:	a6 01       	movw	r20, r12
    31c4:	95 01       	movw	r18, r10
    31c6:	0e 2d       	mov	r16, r14
    31c8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    31cc:	eb 81       	ldd	r30, Y+3	; 0x03
    31ce:	fc 81       	ldd	r31, Y+4	; 0x04
    31d0:	94 81       	ldd	r25, Z+4	; 0x04
    31d2:	88 23       	and	r24, r24
    31d4:	19 f0       	breq	.+6      	; 0x31dc <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    31d6:	90 68       	ori	r25, 0x80	; 128
    31d8:	94 83       	std	Z+4, r25	; 0x04
    31da:	76 c0       	rjmp	.+236    	; 0x32c8 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    31dc:	96 ff       	sbrs	r25, 6
    31de:	29 c0       	rjmp	.+82     	; 0x3232 <f_read+0x280>
    31e0:	ab 81       	ldd	r26, Y+3	; 0x03
    31e2:	bc 81       	ldd	r27, Y+4	; 0x04
    31e4:	56 96       	adiw	r26, 0x16	; 22
    31e6:	2d 91       	ld	r18, X+
    31e8:	3d 91       	ld	r19, X+
    31ea:	4d 91       	ld	r20, X+
    31ec:	5c 91       	ld	r21, X
    31ee:	59 97       	sbiw	r26, 0x19	; 25
    31f0:	2a 19       	sub	r18, r10
    31f2:	3b 09       	sbc	r19, r11
    31f4:	4c 09       	sbc	r20, r12
    31f6:	5d 09       	sbc	r21, r13
    31f8:	c7 01       	movw	r24, r14
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	28 17       	cp	r18, r24
    3200:	39 07       	cpc	r19, r25
    3202:	4a 07       	cpc	r20, r26
    3204:	5b 07       	cpc	r21, r27
    3206:	a8 f4       	brcc	.+42     	; 0x3232 <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3208:	69 e0       	ldi	r22, 0x09	; 9
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	44 1f       	adc	r20, r20
    3210:	55 1f       	adc	r21, r21
    3212:	6a 95       	dec	r22
    3214:	d1 f7       	brne	.-12     	; 0x320a <f_read+0x258>
    3216:	c2 01       	movw	r24, r4
    3218:	82 0f       	add	r24, r18
    321a:	93 1f       	adc	r25, r19
    321c:	d1 01       	movw	r26, r2
    321e:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3220:	9c 01       	movw	r18, r24
    3222:	20 50       	subi	r18, 0x00	; 0
    3224:	3e 4f       	sbci	r19, 0xFE	; 254
    3226:	02 c0       	rjmp	.+4      	; 0x322c <f_read+0x27a>
    3228:	8d 91       	ld	r24, X+
    322a:	81 93       	st	Z+, r24
    322c:	e2 17       	cp	r30, r18
    322e:	f3 07       	cpc	r31, r19
    3230:	d9 f7       	brne	.-10     	; 0x3228 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3232:	eb 81       	ldd	r30, Y+3	; 0x03
    3234:	fc 81       	ldd	r31, Y+4	; 0x04
    3236:	85 81       	ldd	r24, Z+5	; 0x05
    3238:	8e 0d       	add	r24, r14
    323a:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    323c:	b7 01       	movw	r22, r14
    323e:	76 2f       	mov	r23, r22
    3240:	66 27       	eor	r22, r22
    3242:	77 0f       	add	r23, r23
    3244:	74 c0       	rjmp	.+232    	; 0x332e <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    3246:	ab 81       	ldd	r26, Y+3	; 0x03
    3248:	bc 81       	ldd	r27, Y+4	; 0x04
    324a:	14 96       	adiw	r26, 0x04	; 4
    324c:	8c 91       	ld	r24, X
    324e:	14 97       	sbiw	r26, 0x04	; 4
    3250:	86 ff       	sbrs	r24, 6
    3252:	1b c0       	rjmp	.+54     	; 0x328a <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3254:	56 96       	adiw	r26, 0x16	; 22
    3256:	2d 91       	ld	r18, X+
    3258:	3d 91       	ld	r19, X+
    325a:	4d 91       	ld	r20, X+
    325c:	5c 91       	ld	r21, X
    325e:	59 97       	sbiw	r26, 0x19	; 25
    3260:	f8 01       	movw	r30, r16
    3262:	81 81       	ldd	r24, Z+1	; 0x01
    3264:	b1 01       	movw	r22, r2
    3266:	01 e0       	ldi	r16, 0x01	; 1
    3268:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    326c:	ab 81       	ldd	r26, Y+3	; 0x03
    326e:	bc 81       	ldd	r27, Y+4	; 0x04
    3270:	14 96       	adiw	r26, 0x04	; 4
    3272:	9c 91       	ld	r25, X
    3274:	14 97       	sbiw	r26, 0x04	; 4
    3276:	88 23       	and	r24, r24
    3278:	21 f0       	breq	.+8      	; 0x3282 <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    327a:	90 68       	ori	r25, 0x80	; 128
    327c:	14 96       	adiw	r26, 0x04	; 4
    327e:	9c 93       	st	X, r25
    3280:	23 c0       	rjmp	.+70     	; 0x32c8 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    3282:	9f 7b       	andi	r25, 0xBF	; 191
    3284:	eb 81       	ldd	r30, Y+3	; 0x03
    3286:	fc 81       	ldd	r31, Y+4	; 0x04
    3288:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    328a:	eb 81       	ldd	r30, Y+3	; 0x03
    328c:	fc 81       	ldd	r31, Y+4	; 0x04
    328e:	86 89       	ldd	r24, Z+22	; 0x16
    3290:	97 89       	ldd	r25, Z+23	; 0x17
    3292:	a0 8d       	ldd	r26, Z+24	; 0x18
    3294:	b1 8d       	ldd	r27, Z+25	; 0x19
    3296:	8a 15       	cp	r24, r10
    3298:	9b 05       	cpc	r25, r11
    329a:	ac 05       	cpc	r26, r12
    329c:	bd 05       	cpc	r27, r13
    329e:	b9 f0       	breq	.+46     	; 0x32ce <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    32a0:	01 90       	ld	r0, Z+
    32a2:	f0 81       	ld	r31, Z
    32a4:	e0 2d       	mov	r30, r0
    32a6:	81 81       	ldd	r24, Z+1	; 0x01
    32a8:	b1 01       	movw	r22, r2
    32aa:	a6 01       	movw	r20, r12
    32ac:	95 01       	movw	r18, r10
    32ae:	01 e0       	ldi	r16, 0x01	; 1
    32b0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    32b4:	88 23       	and	r24, r24
    32b6:	59 f0       	breq	.+22     	; 0x32ce <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    32b8:	ab 81       	ldd	r26, Y+3	; 0x03
    32ba:	bc 81       	ldd	r27, Y+4	; 0x04
    32bc:	14 96       	adiw	r26, 0x04	; 4
    32be:	8c 91       	ld	r24, X
    32c0:	14 97       	sbiw	r26, 0x04	; 4
    32c2:	80 68       	ori	r24, 0x80	; 128
    32c4:	14 96       	adiw	r26, 0x04	; 4
    32c6:	8c 93       	st	X, r24
    32c8:	77 24       	eor	r7, r7
    32ca:	73 94       	inc	r7
    32cc:	51 c0       	rjmp	.+162    	; 0x3370 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    32ce:	eb 81       	ldd	r30, Y+3	; 0x03
    32d0:	fc 81       	ldd	r31, Y+4	; 0x04
    32d2:	a6 8a       	std	Z+22, r10	; 0x16
    32d4:	b7 8a       	std	Z+23, r11	; 0x17
    32d6:	c0 8e       	std	Z+24, r12	; 0x18
    32d8:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    32da:	85 81       	ldd	r24, Z+5	; 0x05
    32dc:	8f 5f       	subi	r24, 0xFF	; 255
    32de:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    32e0:	ab 81       	ldd	r26, Y+3	; 0x03
    32e2:	bc 81       	ldd	r27, Y+4	; 0x04
    32e4:	16 96       	adiw	r26, 0x06	; 6
    32e6:	2d 91       	ld	r18, X+
    32e8:	3d 91       	ld	r19, X+
    32ea:	4d 91       	ld	r20, X+
    32ec:	5c 91       	ld	r21, X
    32ee:	19 97       	sbiw	r26, 0x09	; 9
    32f0:	c9 01       	movw	r24, r18
    32f2:	91 70       	andi	r25, 0x01	; 1
    32f4:	e0 e0       	ldi	r30, 0x00	; 0
    32f6:	f2 e0       	ldi	r31, 0x02	; 2
    32f8:	e8 1b       	sub	r30, r24
    32fa:	f9 0b       	sbc	r31, r25
    32fc:	b4 01       	movw	r22, r8
    32fe:	e8 15       	cp	r30, r8
    3300:	f9 05       	cpc	r31, r9
    3302:	08 f4       	brcc	.+2      	; 0x3306 <f_read+0x354>
    3304:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    3306:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3308:	f9 01       	movw	r30, r18
    330a:	f1 70       	andi	r31, 0x01	; 1
    330c:	b0 96       	adiw	r30, 0x20	; 32
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	e8 0f       	add	r30, r24
    3314:	f9 1f       	adc	r31, r25
    3316:	92 01       	movw	r18, r4
    3318:	04 c0       	rjmp	.+8      	; 0x3322 <f_read+0x370>
	while (cnt--) *d++ = *s++;
    331a:	81 91       	ld	r24, Z+
    331c:	d9 01       	movw	r26, r18
    331e:	8d 93       	st	X+, r24
    3320:	9d 01       	movw	r18, r26
    3322:	01 50       	subi	r16, 0x01	; 1
    3324:	10 40       	sbci	r17, 0x00	; 0
    3326:	bf ef       	ldi	r27, 0xFF	; 255
    3328:	0f 3f       	cpi	r16, 0xFF	; 255
    332a:	1b 07       	cpc	r17, r27
    332c:	b1 f7       	brne	.-20     	; 0x331a <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    332e:	46 0e       	add	r4, r22
    3330:	57 1e       	adc	r5, r23
    3332:	cb 01       	movw	r24, r22
    3334:	a0 e0       	ldi	r26, 0x00	; 0
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	eb 81       	ldd	r30, Y+3	; 0x03
    333a:	fc 81       	ldd	r31, Y+4	; 0x04
    333c:	26 81       	ldd	r18, Z+6	; 0x06
    333e:	37 81       	ldd	r19, Z+7	; 0x07
    3340:	40 85       	ldd	r20, Z+8	; 0x08
    3342:	51 85       	ldd	r21, Z+9	; 0x09
    3344:	28 0f       	add	r18, r24
    3346:	39 1f       	adc	r19, r25
    3348:	4a 1f       	adc	r20, r26
    334a:	5b 1f       	adc	r21, r27
    334c:	26 83       	std	Z+6, r18	; 0x06
    334e:	37 83       	std	Z+7, r19	; 0x07
    3350:	40 87       	std	Z+8, r20	; 0x08
    3352:	51 87       	std	Z+9, r21	; 0x09
    3354:	e9 81       	ldd	r30, Y+1	; 0x01
    3356:	fa 81       	ldd	r31, Y+2	; 0x02
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	86 0f       	add	r24, r22
    335e:	97 1f       	adc	r25, r23
    3360:	80 83       	st	Z, r24
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	86 1a       	sub	r8, r22
    3366:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    3368:	81 14       	cp	r8, r1
    336a:	91 04       	cpc	r9, r1
    336c:	09 f0       	breq	.+2      	; 0x3370 <f_read+0x3be>
    336e:	7a ce       	rjmp	.-780    	; 0x3064 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3370:	87 2d       	mov	r24, r7
    3372:	24 96       	adiw	r28, 0x04	; 4
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	1f 91       	pop	r17
    337e:	0f 91       	pop	r16
    3380:	ff 90       	pop	r15
    3382:	ef 90       	pop	r14
    3384:	df 90       	pop	r13
    3386:	cf 90       	pop	r12
    3388:	bf 90       	pop	r11
    338a:	af 90       	pop	r10
    338c:	9f 90       	pop	r9
    338e:	8f 90       	pop	r8
    3390:	7f 90       	pop	r7
    3392:	6f 90       	pop	r6
    3394:	5f 90       	pop	r5
    3396:	4f 90       	pop	r4
    3398:	3f 90       	pop	r3
    339a:	2f 90       	pop	r2
    339c:	08 95       	ret

0000339e <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    339e:	2f 92       	push	r2
    33a0:	3f 92       	push	r3
    33a2:	4f 92       	push	r4
    33a4:	5f 92       	push	r5
    33a6:	6f 92       	push	r6
    33a8:	7f 92       	push	r7
    33aa:	8f 92       	push	r8
    33ac:	9f 92       	push	r9
    33ae:	af 92       	push	r10
    33b0:	bf 92       	push	r11
    33b2:	cf 92       	push	r12
    33b4:	df 92       	push	r13
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <f_write+0x26>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	8b 83       	std	Y+3, r24	; 0x03
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	16 2f       	mov	r17, r22
    33d0:	07 2f       	mov	r16, r23
    33d2:	4a 01       	movw	r8, r20
    33d4:	29 83       	std	Y+1, r18	; 0x01
    33d6:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    33d8:	d9 01       	movw	r26, r18
    33da:	1d 92       	st	X+, r1
    33dc:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    33de:	fc 01       	movw	r30, r24
    33e0:	62 81       	ldd	r22, Z+2	; 0x02
    33e2:	73 81       	ldd	r23, Z+3	; 0x03
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <validate>
    33ec:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    33ee:	88 23       	and	r24, r24
    33f0:	09 f0       	breq	.+2      	; 0x33f4 <f_write+0x56>
    33f2:	02 c2       	rjmp	.+1028   	; 0x37f8 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    33f4:	ab 81       	ldd	r26, Y+3	; 0x03
    33f6:	bc 81       	ldd	r27, Y+4	; 0x04
    33f8:	14 96       	adiw	r26, 0x04	; 4
    33fa:	8c 91       	ld	r24, X
    33fc:	87 fd       	sbrc	r24, 7
    33fe:	7c c0       	rjmp	.+248    	; 0x34f8 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    3400:	81 fd       	sbrc	r24, 1
    3402:	03 c0       	rjmp	.+6      	; 0x340a <f_write+0x6c>
    3404:	47 e0       	ldi	r20, 0x07	; 7
    3406:	64 2e       	mov	r6, r20
    3408:	f7 c1       	rjmp	.+1006   	; 0x37f8 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    340a:	eb 81       	ldd	r30, Y+3	; 0x03
    340c:	fc 81       	ldd	r31, Y+4	; 0x04
    340e:	22 85       	ldd	r18, Z+10	; 0x0a
    3410:	33 85       	ldd	r19, Z+11	; 0x0b
    3412:	44 85       	ldd	r20, Z+12	; 0x0c
    3414:	55 85       	ldd	r21, Z+13	; 0x0d
    3416:	c4 01       	movw	r24, r8
    3418:	a0 e0       	ldi	r26, 0x00	; 0
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	82 0f       	add	r24, r18
    341e:	93 1f       	adc	r25, r19
    3420:	a4 1f       	adc	r26, r20
    3422:	b5 1f       	adc	r27, r21
    3424:	82 17       	cp	r24, r18
    3426:	93 07       	cpc	r25, r19
    3428:	a4 07       	cpc	r26, r20
    342a:	b5 07       	cpc	r27, r21
    342c:	10 f4       	brcc	.+4      	; 0x3432 <f_write+0x94>
    342e:	88 24       	eor	r8, r8
    3430:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    3432:	81 2f       	mov	r24, r17
    3434:	90 2f       	mov	r25, r16
    3436:	9c 01       	movw	r18, r24
    3438:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    343a:	30 e2       	ldi	r19, 0x20	; 32
    343c:	23 2e       	mov	r2, r19
    343e:	31 2c       	mov	r3, r1
    3440:	6b 81       	ldd	r22, Y+3	; 0x03
    3442:	7c 81       	ldd	r23, Y+4	; 0x04
    3444:	26 0e       	add	r2, r22
    3446:	37 1e       	adc	r3, r23
    3448:	b2 c1       	rjmp	.+868    	; 0x37ae <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    344a:	ab 81       	ldd	r26, Y+3	; 0x03
    344c:	bc 81       	ldd	r27, Y+4	; 0x04
    344e:	16 96       	adiw	r26, 0x06	; 6
    3450:	2d 91       	ld	r18, X+
    3452:	3d 91       	ld	r19, X+
    3454:	4d 91       	ld	r20, X+
    3456:	5c 91       	ld	r21, X
    3458:	19 97       	sbiw	r26, 0x09	; 9
    345a:	da 01       	movw	r26, r20
    345c:	c9 01       	movw	r24, r18
    345e:	91 70       	andi	r25, 0x01	; 1
    3460:	a0 70       	andi	r26, 0x00	; 0
    3462:	b0 70       	andi	r27, 0x00	; 0
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	a1 05       	cpc	r26, r1
    3468:	b1 05       	cpc	r27, r1
    346a:	09 f0       	breq	.+2      	; 0x346e <f_write+0xd0>
    346c:	58 c1       	rjmp	.+688    	; 0x371e <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    346e:	ab 81       	ldd	r26, Y+3	; 0x03
    3470:	bc 81       	ldd	r27, Y+4	; 0x04
    3472:	ed 91       	ld	r30, X+
    3474:	fc 91       	ld	r31, X
    3476:	11 97       	sbiw	r26, 0x01	; 1
    3478:	15 96       	adiw	r26, 0x05	; 5
    347a:	9c 91       	ld	r25, X
    347c:	15 97       	sbiw	r26, 0x05	; 5
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	98 17       	cp	r25, r24
    3482:	08 f4       	brcc	.+2      	; 0x3486 <f_write+0xe8>
    3484:	54 c0       	rjmp	.+168    	; 0x352e <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    3486:	21 15       	cp	r18, r1
    3488:	31 05       	cpc	r19, r1
    348a:	41 05       	cpc	r20, r1
    348c:	51 05       	cpc	r21, r1
    348e:	c9 f4       	brne	.+50     	; 0x34c2 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3490:	1e 96       	adiw	r26, 0x0e	; 14
    3492:	6d 91       	ld	r22, X+
    3494:	7d 91       	ld	r23, X+
    3496:	8d 91       	ld	r24, X+
    3498:	9c 91       	ld	r25, X
    349a:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    349c:	61 15       	cp	r22, r1
    349e:	71 05       	cpc	r23, r1
    34a0:	81 05       	cpc	r24, r1
    34a2:	91 05       	cpc	r25, r1
    34a4:	f9 f4       	brne	.+62     	; 0x34e4 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    34a6:	cf 01       	movw	r24, r30
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	60 e0       	ldi	r22, 0x00	; 0
    34ae:	70 e0       	ldi	r23, 0x00	; 0
    34b0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <create_chain>
    34b4:	eb 81       	ldd	r30, Y+3	; 0x03
    34b6:	fc 81       	ldd	r31, Y+4	; 0x04
    34b8:	66 87       	std	Z+14, r22	; 0x0e
    34ba:	77 87       	std	Z+15, r23	; 0x0f
    34bc:	80 8b       	std	Z+16, r24	; 0x10
    34be:	91 8b       	std	Z+17, r25	; 0x11
    34c0:	0b c0       	rjmp	.+22     	; 0x34d8 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    34c2:	ab 81       	ldd	r26, Y+3	; 0x03
    34c4:	bc 81       	ldd	r27, Y+4	; 0x04
    34c6:	52 96       	adiw	r26, 0x12	; 18
    34c8:	4d 91       	ld	r20, X+
    34ca:	5d 91       	ld	r21, X+
    34cc:	6d 91       	ld	r22, X+
    34ce:	7c 91       	ld	r23, X
    34d0:	55 97       	sbiw	r26, 0x15	; 21
    34d2:	cf 01       	movw	r24, r30
    34d4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    34d8:	61 15       	cp	r22, r1
    34da:	71 05       	cpc	r23, r1
    34dc:	81 05       	cpc	r24, r1
    34de:	91 05       	cpc	r25, r1
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <f_write+0x146>
    34e2:	69 c1       	rjmp	.+722    	; 0x37b6 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    34e4:	61 30       	cpi	r22, 0x01	; 1
    34e6:	71 05       	cpc	r23, r1
    34e8:	81 05       	cpc	r24, r1
    34ea:	91 05       	cpc	r25, r1
    34ec:	41 f4       	brne	.+16     	; 0x34fe <f_write+0x160>
    34ee:	eb 81       	ldd	r30, Y+3	; 0x03
    34f0:	fc 81       	ldd	r31, Y+4	; 0x04
    34f2:	84 81       	ldd	r24, Z+4	; 0x04
    34f4:	80 68       	ori	r24, 0x80	; 128
    34f6:	84 83       	std	Z+4, r24	; 0x04
    34f8:	22 e0       	ldi	r18, 0x02	; 2
    34fa:	62 2e       	mov	r6, r18
    34fc:	7d c1       	rjmp	.+762    	; 0x37f8 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    34fe:	6f 3f       	cpi	r22, 0xFF	; 255
    3500:	ff ef       	ldi	r31, 0xFF	; 255
    3502:	7f 07       	cpc	r23, r31
    3504:	ff ef       	ldi	r31, 0xFF	; 255
    3506:	8f 07       	cpc	r24, r31
    3508:	ff ef       	ldi	r31, 0xFF	; 255
    350a:	9f 07       	cpc	r25, r31
    350c:	49 f4       	brne	.+18     	; 0x3520 <f_write+0x182>
    350e:	ab 81       	ldd	r26, Y+3	; 0x03
    3510:	bc 81       	ldd	r27, Y+4	; 0x04
    3512:	14 96       	adiw	r26, 0x04	; 4
    3514:	8c 91       	ld	r24, X
    3516:	14 97       	sbiw	r26, 0x04	; 4
    3518:	80 68       	ori	r24, 0x80	; 128
    351a:	14 96       	adiw	r26, 0x04	; 4
    351c:	8c 93       	st	X, r24
    351e:	ee c0       	rjmp	.+476    	; 0x36fc <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    3520:	eb 81       	ldd	r30, Y+3	; 0x03
    3522:	fc 81       	ldd	r31, Y+4	; 0x04
    3524:	62 8b       	std	Z+18, r22	; 0x12
    3526:	73 8b       	std	Z+19, r23	; 0x13
    3528:	84 8b       	std	Z+20, r24	; 0x14
    352a:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    352c:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    352e:	ab 81       	ldd	r26, Y+3	; 0x03
    3530:	bc 81       	ldd	r27, Y+4	; 0x04
    3532:	14 96       	adiw	r26, 0x04	; 4
    3534:	8c 91       	ld	r24, X
    3536:	14 97       	sbiw	r26, 0x04	; 4
    3538:	86 ff       	sbrs	r24, 6
    353a:	1b c0       	rjmp	.+54     	; 0x3572 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    353c:	ed 91       	ld	r30, X+
    353e:	fc 91       	ld	r31, X
    3540:	11 97       	sbiw	r26, 0x01	; 1
    3542:	56 96       	adiw	r26, 0x16	; 22
    3544:	2d 91       	ld	r18, X+
    3546:	3d 91       	ld	r19, X+
    3548:	4d 91       	ld	r20, X+
    354a:	5c 91       	ld	r21, X
    354c:	59 97       	sbiw	r26, 0x19	; 25
    354e:	81 81       	ldd	r24, Z+1	; 0x01
    3550:	b1 01       	movw	r22, r2
    3552:	01 e0       	ldi	r16, 0x01	; 1
    3554:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    3558:	eb 81       	ldd	r30, Y+3	; 0x03
    355a:	fc 81       	ldd	r31, Y+4	; 0x04
    355c:	94 81       	ldd	r25, Z+4	; 0x04
    355e:	88 23       	and	r24, r24
    3560:	19 f0       	breq	.+6      	; 0x3568 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3562:	90 68       	ori	r25, 0x80	; 128
    3564:	94 83       	std	Z+4, r25	; 0x04
    3566:	ca c0       	rjmp	.+404    	; 0x36fc <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    3568:	9f 7b       	andi	r25, 0xBF	; 191
    356a:	ab 81       	ldd	r26, Y+3	; 0x03
    356c:	bc 81       	ldd	r27, Y+4	; 0x04
    356e:	14 96       	adiw	r26, 0x04	; 4
    3570:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3572:	eb 81       	ldd	r30, Y+3	; 0x03
    3574:	fc 81       	ldd	r31, Y+4	; 0x04
    3576:	00 81       	ld	r16, Z
    3578:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    357a:	22 89       	ldd	r18, Z+18	; 0x12
    357c:	33 89       	ldd	r19, Z+19	; 0x13
    357e:	44 89       	ldd	r20, Z+20	; 0x14
    3580:	55 89       	ldd	r21, Z+21	; 0x15
    3582:	22 50       	subi	r18, 0x02	; 2
    3584:	30 40       	sbci	r19, 0x00	; 0
    3586:	40 40       	sbci	r20, 0x00	; 0
    3588:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    358a:	f8 01       	movw	r30, r16
    358c:	82 8d       	ldd	r24, Z+26	; 0x1a
    358e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3590:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3592:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3594:	02 97       	sbiw	r24, 0x02	; 2
    3596:	a1 09       	sbc	r26, r1
    3598:	b1 09       	sbc	r27, r1
    359a:	28 17       	cp	r18, r24
    359c:	39 07       	cpc	r19, r25
    359e:	4a 07       	cpc	r20, r26
    35a0:	5b 07       	cpc	r21, r27
    35a2:	b8 f4       	brcc	.+46     	; 0x35d2 <f_write+0x234>
	return clst * fs->csize + fs->database;
    35a4:	72 80       	ldd	r7, Z+2	; 0x02
    35a6:	67 2d       	mov	r22, r7
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    35b2:	9b 01       	movw	r18, r22
    35b4:	ac 01       	movw	r20, r24
    35b6:	f8 01       	movw	r30, r16
    35b8:	86 a1       	ldd	r24, Z+38	; 0x26
    35ba:	97 a1       	ldd	r25, Z+39	; 0x27
    35bc:	a0 a5       	ldd	r26, Z+40	; 0x28
    35be:	b1 a5       	ldd	r27, Z+41	; 0x29
    35c0:	28 0f       	add	r18, r24
    35c2:	39 1f       	adc	r19, r25
    35c4:	4a 1f       	adc	r20, r26
    35c6:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    35c8:	21 15       	cp	r18, r1
    35ca:	31 05       	cpc	r19, r1
    35cc:	41 05       	cpc	r20, r1
    35ce:	51 05       	cpc	r21, r1
    35d0:	49 f4       	brne	.+18     	; 0x35e4 <f_write+0x246>
    35d2:	ab 81       	ldd	r26, Y+3	; 0x03
    35d4:	bc 81       	ldd	r27, Y+4	; 0x04
    35d6:	14 96       	adiw	r26, 0x04	; 4
    35d8:	8c 91       	ld	r24, X
    35da:	14 97       	sbiw	r26, 0x04	; 4
    35dc:	80 68       	ori	r24, 0x80	; 128
    35de:	14 96       	adiw	r26, 0x04	; 4
    35e0:	8c 93       	st	X, r24
    35e2:	8a cf       	rjmp	.-236    	; 0x34f8 <f_write+0x15a>
			sect += fp->csect;
    35e4:	eb 81       	ldd	r30, Y+3	; 0x03
    35e6:	fc 81       	ldd	r31, Y+4	; 0x04
    35e8:	85 81       	ldd	r24, Z+5	; 0x05
    35ea:	69 01       	movw	r12, r18
    35ec:	7a 01       	movw	r14, r20
    35ee:	c8 0e       	add	r12, r24
    35f0:	d1 1c       	adc	r13, r1
    35f2:	e1 1c       	adc	r14, r1
    35f4:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    35f6:	54 01       	movw	r10, r8
    35f8:	ab 2c       	mov	r10, r11
    35fa:	bb 24       	eor	r11, r11
    35fc:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    35fe:	a1 14       	cp	r10, r1
    3600:	b1 04       	cpc	r11, r1
    3602:	09 f4       	brne	.+2      	; 0x3606 <f_write+0x268>
    3604:	53 c0       	rjmp	.+166    	; 0x36ac <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	c5 01       	movw	r24, r10
    360c:	82 0f       	add	r24, r18
    360e:	93 1f       	adc	r25, r19
    3610:	67 2d       	mov	r22, r7
    3612:	70 e0       	ldi	r23, 0x00	; 0
    3614:	68 17       	cp	r22, r24
    3616:	79 07       	cpc	r23, r25
    3618:	18 f4       	brcc	.+6      	; 0x3620 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    361a:	5b 01       	movw	r10, r22
    361c:	a2 1a       	sub	r10, r18
    361e:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    3620:	d8 01       	movw	r26, r16
    3622:	11 96       	adiw	r26, 0x01	; 1
    3624:	8c 91       	ld	r24, X
    3626:	b2 01       	movw	r22, r4
    3628:	a7 01       	movw	r20, r14
    362a:	96 01       	movw	r18, r12
    362c:	0a 2d       	mov	r16, r10
    362e:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    3632:	88 23       	and	r24, r24
    3634:	09 f0       	breq	.+2      	; 0x3638 <f_write+0x29a>
    3636:	5d c0       	rjmp	.+186    	; 0x36f2 <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    3638:	ab 81       	ldd	r26, Y+3	; 0x03
    363a:	bc 81       	ldd	r27, Y+4	; 0x04
    363c:	56 96       	adiw	r26, 0x16	; 22
    363e:	2d 91       	ld	r18, X+
    3640:	3d 91       	ld	r19, X+
    3642:	4d 91       	ld	r20, X+
    3644:	5c 91       	ld	r21, X
    3646:	59 97       	sbiw	r26, 0x19	; 25
    3648:	2c 19       	sub	r18, r12
    364a:	3d 09       	sbc	r19, r13
    364c:	4e 09       	sbc	r20, r14
    364e:	5f 09       	sbc	r21, r15
    3650:	c5 01       	movw	r24, r10
    3652:	a0 e0       	ldi	r26, 0x00	; 0
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	28 17       	cp	r18, r24
    3658:	39 07       	cpc	r19, r25
    365a:	4a 07       	cpc	r20, r26
    365c:	5b 07       	cpc	r21, r27
    365e:	c8 f4       	brcc	.+50     	; 0x3692 <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3660:	19 e0       	ldi	r17, 0x09	; 9
    3662:	22 0f       	add	r18, r18
    3664:	33 1f       	adc	r19, r19
    3666:	44 1f       	adc	r20, r20
    3668:	55 1f       	adc	r21, r21
    366a:	1a 95       	dec	r17
    366c:	d1 f7       	brne	.-12     	; 0x3662 <f_write+0x2c4>
    366e:	f2 01       	movw	r30, r4
    3670:	e2 0f       	add	r30, r18
    3672:	f3 1f       	adc	r31, r19
    3674:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    3676:	9f 01       	movw	r18, r30
    3678:	20 50       	subi	r18, 0x00	; 0
    367a:	3e 4f       	sbci	r19, 0xFE	; 254
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <f_write+0x2e4>
    367e:	81 91       	ld	r24, Z+
    3680:	8d 93       	st	X+, r24
    3682:	e2 17       	cp	r30, r18
    3684:	f3 07       	cpc	r31, r19
    3686:	d9 f7       	brne	.-10     	; 0x367e <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    3688:	eb 81       	ldd	r30, Y+3	; 0x03
    368a:	fc 81       	ldd	r31, Y+4	; 0x04
    368c:	84 81       	ldd	r24, Z+4	; 0x04
    368e:	8f 7b       	andi	r24, 0xBF	; 191
    3690:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3692:	ab 81       	ldd	r26, Y+3	; 0x03
    3694:	bc 81       	ldd	r27, Y+4	; 0x04
    3696:	15 96       	adiw	r26, 0x05	; 5
    3698:	8c 91       	ld	r24, X
    369a:	15 97       	sbiw	r26, 0x05	; 5
    369c:	8a 0d       	add	r24, r10
    369e:	15 96       	adiw	r26, 0x05	; 5
    36a0:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    36a2:	b5 01       	movw	r22, r10
    36a4:	76 2f       	mov	r23, r22
    36a6:	66 27       	eor	r22, r22
    36a8:	77 0f       	add	r23, r23
    36aa:	64 c0       	rjmp	.+200    	; 0x3774 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    36ac:	eb 81       	ldd	r30, Y+3	; 0x03
    36ae:	fc 81       	ldd	r31, Y+4	; 0x04
    36b0:	86 89       	ldd	r24, Z+22	; 0x16
    36b2:	97 89       	ldd	r25, Z+23	; 0x17
    36b4:	a0 8d       	ldd	r26, Z+24	; 0x18
    36b6:	b1 8d       	ldd	r27, Z+25	; 0x19
    36b8:	8c 15       	cp	r24, r12
    36ba:	9d 05       	cpc	r25, r13
    36bc:	ae 05       	cpc	r26, r14
    36be:	bf 05       	cpc	r27, r15
    36c0:	01 f1       	breq	.+64     	; 0x3702 <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    36c2:	26 81       	ldd	r18, Z+6	; 0x06
    36c4:	37 81       	ldd	r19, Z+7	; 0x07
    36c6:	40 85       	ldd	r20, Z+8	; 0x08
    36c8:	51 85       	ldd	r21, Z+9	; 0x09
    36ca:	82 85       	ldd	r24, Z+10	; 0x0a
    36cc:	93 85       	ldd	r25, Z+11	; 0x0b
    36ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    36d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    36d2:	28 17       	cp	r18, r24
    36d4:	39 07       	cpc	r19, r25
    36d6:	4a 07       	cpc	r20, r26
    36d8:	5b 07       	cpc	r21, r27
    36da:	98 f4       	brcc	.+38     	; 0x3702 <f_write+0x364>
    36dc:	d8 01       	movw	r26, r16
    36de:	11 96       	adiw	r26, 0x01	; 1
    36e0:	8c 91       	ld	r24, X
    36e2:	b1 01       	movw	r22, r2
    36e4:	a7 01       	movw	r20, r14
    36e6:	96 01       	movw	r18, r12
    36e8:	01 e0       	ldi	r16, 0x01	; 1
    36ea:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    36ee:	88 23       	and	r24, r24
    36f0:	41 f0       	breq	.+16     	; 0x3702 <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    36f2:	eb 81       	ldd	r30, Y+3	; 0x03
    36f4:	fc 81       	ldd	r31, Y+4	; 0x04
    36f6:	84 81       	ldd	r24, Z+4	; 0x04
    36f8:	80 68       	ori	r24, 0x80	; 128
    36fa:	84 83       	std	Z+4, r24	; 0x04
    36fc:	66 24       	eor	r6, r6
    36fe:	63 94       	inc	r6
    3700:	7b c0       	rjmp	.+246    	; 0x37f8 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    3702:	ab 81       	ldd	r26, Y+3	; 0x03
    3704:	bc 81       	ldd	r27, Y+4	; 0x04
    3706:	56 96       	adiw	r26, 0x16	; 22
    3708:	cd 92       	st	X+, r12
    370a:	dd 92       	st	X+, r13
    370c:	ed 92       	st	X+, r14
    370e:	fc 92       	st	X, r15
    3710:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    3712:	15 96       	adiw	r26, 0x05	; 5
    3714:	8c 91       	ld	r24, X
    3716:	15 97       	sbiw	r26, 0x05	; 5
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	15 96       	adiw	r26, 0x05	; 5
    371c:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    371e:	eb 81       	ldd	r30, Y+3	; 0x03
    3720:	fc 81       	ldd	r31, Y+4	; 0x04
    3722:	26 81       	ldd	r18, Z+6	; 0x06
    3724:	37 81       	ldd	r19, Z+7	; 0x07
    3726:	40 85       	ldd	r20, Z+8	; 0x08
    3728:	51 85       	ldd	r21, Z+9	; 0x09
    372a:	c9 01       	movw	r24, r18
    372c:	91 70       	andi	r25, 0x01	; 1
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	72 e0       	ldi	r23, 0x02	; 2
    3732:	68 1b       	sub	r22, r24
    3734:	79 0b       	sbc	r23, r25
    3736:	cb 01       	movw	r24, r22
    3738:	b4 01       	movw	r22, r8
    373a:	88 15       	cp	r24, r8
    373c:	99 05       	cpc	r25, r9
    373e:	08 f4       	brcc	.+2      	; 0x3742 <f_write+0x3a4>
    3740:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3742:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3744:	f9 01       	movw	r30, r18
    3746:	f1 70       	andi	r31, 0x01	; 1
    3748:	b0 96       	adiw	r30, 0x20	; 32
    374a:	8b 81       	ldd	r24, Y+3	; 0x03
    374c:	9c 81       	ldd	r25, Y+4	; 0x04
    374e:	e8 0f       	add	r30, r24
    3750:	f9 1f       	adc	r31, r25
    3752:	92 01       	movw	r18, r4
    3754:	04 c0       	rjmp	.+8      	; 0x375e <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3756:	d9 01       	movw	r26, r18
    3758:	8d 91       	ld	r24, X+
    375a:	9d 01       	movw	r18, r26
    375c:	81 93       	st	Z+, r24
    375e:	01 50       	subi	r16, 0x01	; 1
    3760:	10 40       	sbci	r17, 0x00	; 0
    3762:	bf ef       	ldi	r27, 0xFF	; 255
    3764:	0f 3f       	cpi	r16, 0xFF	; 255
    3766:	1b 07       	cpc	r17, r27
    3768:	b1 f7       	brne	.-20     	; 0x3756 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    376a:	eb 81       	ldd	r30, Y+3	; 0x03
    376c:	fc 81       	ldd	r31, Y+4	; 0x04
    376e:	84 81       	ldd	r24, Z+4	; 0x04
    3770:	80 64       	ori	r24, 0x40	; 64
    3772:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3774:	46 0e       	add	r4, r22
    3776:	57 1e       	adc	r5, r23
    3778:	cb 01       	movw	r24, r22
    377a:	a0 e0       	ldi	r26, 0x00	; 0
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	eb 81       	ldd	r30, Y+3	; 0x03
    3780:	fc 81       	ldd	r31, Y+4	; 0x04
    3782:	26 81       	ldd	r18, Z+6	; 0x06
    3784:	37 81       	ldd	r19, Z+7	; 0x07
    3786:	40 85       	ldd	r20, Z+8	; 0x08
    3788:	51 85       	ldd	r21, Z+9	; 0x09
    378a:	28 0f       	add	r18, r24
    378c:	39 1f       	adc	r19, r25
    378e:	4a 1f       	adc	r20, r26
    3790:	5b 1f       	adc	r21, r27
    3792:	26 83       	std	Z+6, r18	; 0x06
    3794:	37 83       	std	Z+7, r19	; 0x07
    3796:	40 87       	std	Z+8, r20	; 0x08
    3798:	51 87       	std	Z+9, r21	; 0x09
    379a:	e9 81       	ldd	r30, Y+1	; 0x01
    379c:	fa 81       	ldd	r31, Y+2	; 0x02
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	86 0f       	add	r24, r22
    37a4:	97 1f       	adc	r25, r23
    37a6:	80 83       	st	Z, r24
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	86 1a       	sub	r8, r22
    37ac:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    37ae:	81 14       	cp	r8, r1
    37b0:	91 04       	cpc	r9, r1
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <f_write+0x418>
    37b4:	4a ce       	rjmp	.-876    	; 0x344a <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    37b6:	ab 81       	ldd	r26, Y+3	; 0x03
    37b8:	bc 81       	ldd	r27, Y+4	; 0x04
    37ba:	16 96       	adiw	r26, 0x06	; 6
    37bc:	2d 91       	ld	r18, X+
    37be:	3d 91       	ld	r19, X+
    37c0:	4d 91       	ld	r20, X+
    37c2:	5c 91       	ld	r21, X
    37c4:	19 97       	sbiw	r26, 0x09	; 9
    37c6:	1a 96       	adiw	r26, 0x0a	; 10
    37c8:	8d 91       	ld	r24, X+
    37ca:	9d 91       	ld	r25, X+
    37cc:	0d 90       	ld	r0, X+
    37ce:	bc 91       	ld	r27, X
    37d0:	a0 2d       	mov	r26, r0
    37d2:	82 17       	cp	r24, r18
    37d4:	93 07       	cpc	r25, r19
    37d6:	a4 07       	cpc	r26, r20
    37d8:	b5 07       	cpc	r27, r21
    37da:	30 f4       	brcc	.+12     	; 0x37e8 <f_write+0x44a>
    37dc:	eb 81       	ldd	r30, Y+3	; 0x03
    37de:	fc 81       	ldd	r31, Y+4	; 0x04
    37e0:	22 87       	std	Z+10, r18	; 0x0a
    37e2:	33 87       	std	Z+11, r19	; 0x0b
    37e4:	44 87       	std	Z+12, r20	; 0x0c
    37e6:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    37e8:	ab 81       	ldd	r26, Y+3	; 0x03
    37ea:	bc 81       	ldd	r27, Y+4	; 0x04
    37ec:	14 96       	adiw	r26, 0x04	; 4
    37ee:	8c 91       	ld	r24, X
    37f0:	14 97       	sbiw	r26, 0x04	; 4
    37f2:	80 62       	ori	r24, 0x20	; 32
    37f4:	14 96       	adiw	r26, 0x04	; 4
    37f6:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    37f8:	86 2d       	mov	r24, r6
    37fa:	24 96       	adiw	r28, 0x04	; 4
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	cf 90       	pop	r12
    3810:	bf 90       	pop	r11
    3812:	af 90       	pop	r10
    3814:	9f 90       	pop	r9
    3816:	8f 90       	pop	r8
    3818:	7f 90       	pop	r7
    381a:	6f 90       	pop	r6
    381c:	5f 90       	pop	r5
    381e:	4f 90       	pop	r4
    3820:	3f 90       	pop	r3
    3822:	2f 90       	pop	r2
    3824:	08 95       	ret

00003826 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3826:	0f 93       	push	r16
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    382e:	6a 81       	ldd	r22, Y+2	; 0x02
    3830:	7b 81       	ldd	r23, Y+3	; 0x03
    3832:	88 81       	ld	r24, Y
    3834:	99 81       	ldd	r25, Y+1	; 0x01
    3836:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <validate>
    383a:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    383c:	88 23       	and	r24, r24
    383e:	09 f0       	breq	.+2      	; 0x3842 <f_sync+0x1c>
    3840:	65 c0       	rjmp	.+202    	; 0x390c <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3842:	8c 81       	ldd	r24, Y+4	; 0x04
    3844:	85 ff       	sbrs	r24, 5
    3846:	62 c0       	rjmp	.+196    	; 0x390c <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    3848:	86 ff       	sbrs	r24, 6
    384a:	14 c0       	rjmp	.+40     	; 0x3874 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    384c:	e8 81       	ld	r30, Y
    384e:	f9 81       	ldd	r31, Y+1	; 0x01
    3850:	be 01       	movw	r22, r28
    3852:	60 5e       	subi	r22, 0xE0	; 224
    3854:	7f 4f       	sbci	r23, 0xFF	; 255
    3856:	2e 89       	ldd	r18, Y+22	; 0x16
    3858:	3f 89       	ldd	r19, Y+23	; 0x17
    385a:	48 8d       	ldd	r20, Y+24	; 0x18
    385c:	59 8d       	ldd	r21, Y+25	; 0x19
    385e:	81 81       	ldd	r24, Z+1	; 0x01
    3860:	01 e0       	ldi	r16, 0x01	; 1
    3862:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    3866:	88 23       	and	r24, r24
    3868:	11 f0       	breq	.+4      	; 0x386e <f_sync+0x48>
    386a:	91 e0       	ldi	r25, 0x01	; 1
    386c:	4f c0       	rjmp	.+158    	; 0x390c <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    386e:	8c 81       	ldd	r24, Y+4	; 0x04
    3870:	8f 7b       	andi	r24, 0xBF	; 191
    3872:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3874:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3876:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3878:	6c 8d       	ldd	r22, Y+28	; 0x1c
    387a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    387c:	88 81       	ld	r24, Y
    387e:	99 81       	ldd	r25, Y+1	; 0x01
    3880:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    3884:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3886:	88 23       	and	r24, r24
    3888:	09 f0       	breq	.+2      	; 0x388c <f_sync+0x66>
    388a:	40 c0       	rjmp	.+128    	; 0x390c <f_sync+0xe6>
				dir = fp->dir_ptr;
    388c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    388e:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3890:	83 85       	ldd	r24, Z+11	; 0x0b
    3892:	80 62       	ori	r24, 0x20	; 32
    3894:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3896:	8a 85       	ldd	r24, Y+10	; 0x0a
    3898:	84 8f       	std	Z+28, r24	; 0x1c
    389a:	8b 85       	ldd	r24, Y+11	; 0x0b
    389c:	85 8f       	std	Z+29, r24	; 0x1d
    389e:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    38a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    38a6:	cd 01       	movw	r24, r26
    38a8:	aa 27       	eor	r26, r26
    38aa:	bb 27       	eor	r27, r27
    38ac:	86 8f       	std	Z+30, r24	; 0x1e
    38ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    38b2:	ac 85       	ldd	r26, Y+12	; 0x0c
    38b4:	bd 85       	ldd	r27, Y+13	; 0x0d
    38b6:	8b 2f       	mov	r24, r27
    38b8:	99 27       	eor	r25, r25
    38ba:	aa 27       	eor	r26, r26
    38bc:	bb 27       	eor	r27, r27
    38be:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    38c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    38c2:	82 8f       	std	Z+26, r24	; 0x1a
    38c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c6:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    38c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    38cc:	a8 89       	ldd	r26, Y+16	; 0x10
    38ce:	b9 89       	ldd	r27, Y+17	; 0x11
    38d0:	cd 01       	movw	r24, r26
    38d2:	aa 27       	eor	r26, r26
    38d4:	bb 27       	eor	r27, r27
    38d6:	84 8b       	std	Z+20, r24	; 0x14
    38d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38da:	9f 85       	ldd	r25, Y+15	; 0x0f
    38dc:	a8 89       	ldd	r26, Y+16	; 0x10
    38de:	b9 89       	ldd	r27, Y+17	; 0x11
    38e0:	cd 01       	movw	r24, r26
    38e2:	aa 27       	eor	r26, r26
    38e4:	bb 27       	eor	r27, r27
    38e6:	89 2f       	mov	r24, r25
    38e8:	99 27       	eor	r25, r25
    38ea:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    38ec:	16 8a       	std	Z+22, r1	; 0x16
    38ee:	17 8a       	std	Z+23, r1	; 0x17
    38f0:	10 8e       	std	Z+24, r1	; 0x18
    38f2:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    38f4:	8c 81       	ldd	r24, Y+4	; 0x04
    38f6:	8f 7d       	andi	r24, 0xDF	; 223
    38f8:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    38fa:	e8 81       	ld	r30, Y
    38fc:	f9 81       	ldd	r31, Y+1	; 0x01
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3902:	88 81       	ld	r24, Y
    3904:	99 81       	ldd	r25, Y+1	; 0x01
    3906:	0e 94 9e 09 	call	0x133c	; 0x133c <sync>
    390a:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    390c:	89 2f       	mov	r24, r25
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	0f 91       	pop	r16
    3914:	08 95       	ret

00003916 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    391c:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    3920:	88 23       	and	r24, r24
    3922:	11 f4       	brne	.+4      	; 0x3928 <f_close+0x12>
    3924:	18 82       	st	Y, r1
    3926:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	08 95       	ret

0000392e <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    392e:	2f 92       	push	r2
    3930:	3f 92       	push	r3
    3932:	4f 92       	push	r4
    3934:	5f 92       	push	r5
    3936:	6f 92       	push	r6
    3938:	7f 92       	push	r7
    393a:	8f 92       	push	r8
    393c:	9f 92       	push	r9
    393e:	af 92       	push	r10
    3940:	bf 92       	push	r11
    3942:	cf 92       	push	r12
    3944:	df 92       	push	r13
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	28 97       	sbiw	r28, 0x08	; 8
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	8f 83       	std	Y+7, r24	; 0x07
    395a:	98 87       	std	Y+8, r25	; 0x08
    395c:	3a 01       	movw	r6, r20
    395e:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3960:	dc 01       	movw	r26, r24
    3962:	12 96       	adiw	r26, 0x02	; 2
    3964:	6d 91       	ld	r22, X+
    3966:	7c 91       	ld	r23, X
    3968:	13 97       	sbiw	r26, 0x03	; 3
    396a:	8d 91       	ld	r24, X+
    396c:	9c 91       	ld	r25, X
    396e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <validate>
    3972:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3974:	88 23       	and	r24, r24
    3976:	09 f0       	breq	.+2      	; 0x397a <f_lseek+0x4c>
    3978:	f3 c1       	rjmp	.+998    	; 0x3d60 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    397a:	ef 81       	ldd	r30, Y+7	; 0x07
    397c:	f8 85       	ldd	r31, Y+8	; 0x08
    397e:	84 81       	ldd	r24, Z+4	; 0x04
    3980:	87 fd       	sbrc	r24, 7
    3982:	98 c0       	rjmp	.+304    	; 0x3ab4 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3984:	af 81       	ldd	r26, Y+7	; 0x07
    3986:	b8 85       	ldd	r27, Y+8	; 0x08
    3988:	1a 96       	adiw	r26, 0x0a	; 10
    398a:	ad 90       	ld	r10, X+
    398c:	bd 90       	ld	r11, X+
    398e:	cd 90       	ld	r12, X+
    3990:	dc 90       	ld	r13, X
    3992:	1d 97       	sbiw	r26, 0x0d	; 13
    3994:	a6 14       	cp	r10, r6
    3996:	b7 04       	cpc	r11, r7
    3998:	c8 04       	cpc	r12, r8
    399a:	d9 04       	cpc	r13, r9
    399c:	10 f4       	brcc	.+4      	; 0x39a2 <f_lseek+0x74>
    399e:	81 ff       	sbrs	r24, 1
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <f_lseek+0x78>
    39a2:	64 01       	movw	r12, r8
    39a4:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    39a6:	ef 81       	ldd	r30, Y+7	; 0x07
    39a8:	f8 85       	ldd	r31, Y+8	; 0x08
    39aa:	26 81       	ldd	r18, Z+6	; 0x06
    39ac:	37 81       	ldd	r19, Z+7	; 0x07
    39ae:	40 85       	ldd	r20, Z+8	; 0x08
    39b0:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    39b2:	16 82       	std	Z+6, r1	; 0x06
    39b4:	17 82       	std	Z+7, r1	; 0x07
    39b6:	10 86       	std	Z+8, r1	; 0x08
    39b8:	11 86       	std	Z+9, r1	; 0x09
    39ba:	8f ef       	ldi	r24, 0xFF	; 255
    39bc:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    39be:	a1 14       	cp	r10, r1
    39c0:	b1 04       	cpc	r11, r1
    39c2:	c1 04       	cpc	r12, r1
    39c4:	d1 04       	cpc	r13, r1
    39c6:	09 f4       	brne	.+2      	; 0x39ca <f_lseek+0x9c>
    39c8:	5f c1       	rjmp	.+702    	; 0x3c88 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    39ca:	01 90       	ld	r0, Z+
    39cc:	f0 81       	ld	r31, Z
    39ce:	e0 2d       	mov	r30, r0
    39d0:	e9 83       	std	Y+1, r30	; 0x01
    39d2:	fa 83       	std	Y+2, r31	; 0x02
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	68 2e       	mov	r6, r24
    39d8:	77 24       	eor	r7, r7
    39da:	88 24       	eor	r8, r8
    39dc:	99 24       	eor	r9, r9
    39de:	89 e0       	ldi	r24, 0x09	; 9
    39e0:	66 0c       	add	r6, r6
    39e2:	77 1c       	adc	r7, r7
    39e4:	88 1c       	adc	r8, r8
    39e6:	99 1c       	adc	r9, r9
    39e8:	8a 95       	dec	r24
    39ea:	d1 f7       	brne	.-12     	; 0x39e0 <f_lseek+0xb2>
		if (ifptr > 0 &&
    39ec:	21 15       	cp	r18, r1
    39ee:	31 05       	cpc	r19, r1
    39f0:	41 05       	cpc	r20, r1
    39f2:	51 05       	cpc	r21, r1
    39f4:	f1 f1       	breq	.+124    	; 0x3a72 <f_lseek+0x144>
    39f6:	19 01       	movw	r2, r18
    39f8:	2a 01       	movw	r4, r20
    39fa:	08 94       	sec
    39fc:	21 08       	sbc	r2, r1
    39fe:	31 08       	sbc	r3, r1
    3a00:	41 08       	sbc	r4, r1
    3a02:	51 08       	sbc	r5, r1
    3a04:	c6 01       	movw	r24, r12
    3a06:	b5 01       	movw	r22, r10
    3a08:	61 50       	subi	r22, 0x01	; 1
    3a0a:	70 40       	sbci	r23, 0x00	; 0
    3a0c:	80 40       	sbci	r24, 0x00	; 0
    3a0e:	90 40       	sbci	r25, 0x00	; 0
    3a10:	a4 01       	movw	r20, r8
    3a12:	93 01       	movw	r18, r6
    3a14:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    3a18:	2b 83       	std	Y+3, r18	; 0x03
    3a1a:	3c 83       	std	Y+4, r19	; 0x04
    3a1c:	4d 83       	std	Y+5, r20	; 0x05
    3a1e:	5e 83       	std	Y+6, r21	; 0x06
    3a20:	c2 01       	movw	r24, r4
    3a22:	b1 01       	movw	r22, r2
    3a24:	a4 01       	movw	r20, r8
    3a26:	93 01       	movw	r18, r6
    3a28:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a30:	ad 81       	ldd	r26, Y+5	; 0x05
    3a32:	be 81       	ldd	r27, Y+6	; 0x06
    3a34:	82 17       	cp	r24, r18
    3a36:	93 07       	cpc	r25, r19
    3a38:	a4 07       	cpc	r26, r20
    3a3a:	b5 07       	cpc	r27, r21
    3a3c:	d0 f0       	brcs	.+52     	; 0x3a72 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3a3e:	88 27       	eor	r24, r24
    3a40:	99 27       	eor	r25, r25
    3a42:	dc 01       	movw	r26, r24
    3a44:	86 19       	sub	r24, r6
    3a46:	97 09       	sbc	r25, r7
    3a48:	a8 09       	sbc	r26, r8
    3a4a:	b9 09       	sbc	r27, r9
    3a4c:	82 21       	and	r24, r2
    3a4e:	93 21       	and	r25, r3
    3a50:	a4 21       	and	r26, r4
    3a52:	b5 21       	and	r27, r5
    3a54:	ef 81       	ldd	r30, Y+7	; 0x07
    3a56:	f8 85       	ldd	r31, Y+8	; 0x08
    3a58:	86 83       	std	Z+6, r24	; 0x06
    3a5a:	97 83       	std	Z+7, r25	; 0x07
    3a5c:	a0 87       	std	Z+8, r26	; 0x08
    3a5e:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3a60:	a8 1a       	sub	r10, r24
    3a62:	b9 0a       	sbc	r11, r25
    3a64:	ca 0a       	sbc	r12, r26
    3a66:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3a68:	42 89       	ldd	r20, Z+18	; 0x12
    3a6a:	53 89       	ldd	r21, Z+19	; 0x13
    3a6c:	64 89       	ldd	r22, Z+20	; 0x14
    3a6e:	75 89       	ldd	r23, Z+21	; 0x15
    3a70:	39 c0       	rjmp	.+114    	; 0x3ae4 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3a72:	af 81       	ldd	r26, Y+7	; 0x07
    3a74:	b8 85       	ldd	r27, Y+8	; 0x08
    3a76:	1e 96       	adiw	r26, 0x0e	; 14
    3a78:	4d 91       	ld	r20, X+
    3a7a:	5d 91       	ld	r21, X+
    3a7c:	6d 91       	ld	r22, X+
    3a7e:	7c 91       	ld	r23, X
    3a80:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3a82:	41 15       	cp	r20, r1
    3a84:	51 05       	cpc	r21, r1
    3a86:	61 05       	cpc	r22, r1
    3a88:	71 05       	cpc	r23, r1
    3a8a:	21 f5       	brne	.+72     	; 0x3ad4 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <create_chain>
    3a9c:	ab 01       	movw	r20, r22
    3a9e:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3aa0:	41 30       	cpi	r20, 0x01	; 1
    3aa2:	51 05       	cpc	r21, r1
    3aa4:	61 05       	cpc	r22, r1
    3aa6:	71 05       	cpc	r23, r1
    3aa8:	39 f4       	brne	.+14     	; 0x3ab8 <f_lseek+0x18a>
    3aaa:	ef 81       	ldd	r30, Y+7	; 0x07
    3aac:	f8 85       	ldd	r31, Y+8	; 0x08
    3aae:	84 81       	ldd	r24, Z+4	; 0x04
    3ab0:	80 68       	ori	r24, 0x80	; 128
    3ab2:	84 83       	std	Z+4, r24	; 0x04
    3ab4:	12 e0       	ldi	r17, 0x02	; 2
    3ab6:	54 c1       	rjmp	.+680    	; 0x3d60 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3ab8:	4f 3f       	cpi	r20, 0xFF	; 255
    3aba:	ff ef       	ldi	r31, 0xFF	; 255
    3abc:	5f 07       	cpc	r21, r31
    3abe:	ff ef       	ldi	r31, 0xFF	; 255
    3ac0:	6f 07       	cpc	r22, r31
    3ac2:	ff ef       	ldi	r31, 0xFF	; 255
    3ac4:	7f 07       	cpc	r23, r31
    3ac6:	b1 f1       	breq	.+108    	; 0x3b34 <f_lseek+0x206>
				fp->org_clust = clst;
    3ac8:	ef 81       	ldd	r30, Y+7	; 0x07
    3aca:	f8 85       	ldd	r31, Y+8	; 0x08
    3acc:	46 87       	std	Z+14, r20	; 0x0e
    3ace:	57 87       	std	Z+15, r21	; 0x0f
    3ad0:	60 8b       	std	Z+16, r22	; 0x10
    3ad2:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3ad4:	af 81       	ldd	r26, Y+7	; 0x07
    3ad6:	b8 85       	ldd	r27, Y+8	; 0x08
    3ad8:	52 96       	adiw	r26, 0x12	; 18
    3ada:	4d 93       	st	X+, r20
    3adc:	5d 93       	st	X+, r21
    3ade:	6d 93       	st	X+, r22
    3ae0:	7c 93       	st	X, r23
    3ae2:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3ae4:	41 15       	cp	r20, r1
    3ae6:	51 05       	cpc	r21, r1
    3ae8:	61 05       	cpc	r22, r1
    3aea:	71 05       	cpc	r23, r1
    3aec:	09 f0       	breq	.+2      	; 0x3af0 <f_lseek+0x1c2>
    3aee:	58 c0       	rjmp	.+176    	; 0x3ba0 <f_lseek+0x272>
    3af0:	cb c0       	rjmp	.+406    	; 0x3c88 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3af2:	ef 81       	ldd	r30, Y+7	; 0x07
    3af4:	f8 85       	ldd	r31, Y+8	; 0x08
    3af6:	84 81       	ldd	r24, Z+4	; 0x04
    3af8:	20 81       	ld	r18, Z
    3afa:	31 81       	ldd	r19, Z+1	; 0x01
    3afc:	81 ff       	sbrs	r24, 1
    3afe:	0d c0       	rjmp	.+26     	; 0x3b1a <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3b00:	c9 01       	movw	r24, r18
    3b02:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <create_chain>
    3b06:	ab 01       	movw	r20, r22
    3b08:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3b0a:	41 15       	cp	r20, r1
    3b0c:	51 05       	cpc	r21, r1
    3b0e:	61 05       	cpc	r22, r1
    3b10:	71 05       	cpc	r23, r1
    3b12:	41 f4       	brne	.+16     	; 0x3b24 <f_lseek+0x1f6>
    3b14:	64 01       	movw	r12, r8
    3b16:	53 01       	movw	r10, r6
    3b18:	49 c0       	rjmp	.+146    	; 0x3bac <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3b1a:	c9 01       	movw	r24, r18
    3b1c:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    3b20:	ab 01       	movw	r20, r22
    3b22:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b24:	4f 3f       	cpi	r20, 0xFF	; 255
    3b26:	ff ef       	ldi	r31, 0xFF	; 255
    3b28:	5f 07       	cpc	r21, r31
    3b2a:	ff ef       	ldi	r31, 0xFF	; 255
    3b2c:	6f 07       	cpc	r22, r31
    3b2e:	ff ef       	ldi	r31, 0xFF	; 255
    3b30:	7f 07       	cpc	r23, r31
    3b32:	49 f4       	brne	.+18     	; 0x3b46 <f_lseek+0x218>
    3b34:	af 81       	ldd	r26, Y+7	; 0x07
    3b36:	b8 85       	ldd	r27, Y+8	; 0x08
    3b38:	14 96       	adiw	r26, 0x04	; 4
    3b3a:	8c 91       	ld	r24, X
    3b3c:	14 97       	sbiw	r26, 0x04	; 4
    3b3e:	80 68       	ori	r24, 0x80	; 128
    3b40:	14 96       	adiw	r26, 0x04	; 4
    3b42:	8c 93       	st	X, r24
    3b44:	ed c0       	rjmp	.+474    	; 0x3d20 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3b46:	42 30       	cpi	r20, 0x02	; 2
    3b48:	51 05       	cpc	r21, r1
    3b4a:	61 05       	cpc	r22, r1
    3b4c:	71 05       	cpc	r23, r1
    3b4e:	08 f4       	brcc	.+2      	; 0x3b52 <f_lseek+0x224>
    3b50:	ac cf       	rjmp	.-168    	; 0x3aaa <f_lseek+0x17c>
    3b52:	af 81       	ldd	r26, Y+7	; 0x07
    3b54:	b8 85       	ldd	r27, Y+8	; 0x08
    3b56:	ed 91       	ld	r30, X+
    3b58:	fc 91       	ld	r31, X
    3b5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    3b5e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3b60:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3b62:	48 17       	cp	r20, r24
    3b64:	59 07       	cpc	r21, r25
    3b66:	6a 07       	cpc	r22, r26
    3b68:	7b 07       	cpc	r23, r27
    3b6a:	08 f0       	brcs	.+2      	; 0x3b6e <f_lseek+0x240>
    3b6c:	9e cf       	rjmp	.-196    	; 0x3aaa <f_lseek+0x17c>
				fp->curr_clust = clst;
    3b6e:	af 81       	ldd	r26, Y+7	; 0x07
    3b70:	b8 85       	ldd	r27, Y+8	; 0x08
    3b72:	52 96       	adiw	r26, 0x12	; 18
    3b74:	4d 93       	st	X+, r20
    3b76:	5d 93       	st	X+, r21
    3b78:	6d 93       	st	X+, r22
    3b7a:	7c 93       	st	X, r23
    3b7c:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3b7e:	fd 01       	movw	r30, r26
    3b80:	86 81       	ldd	r24, Z+6	; 0x06
    3b82:	97 81       	ldd	r25, Z+7	; 0x07
    3b84:	a0 85       	ldd	r26, Z+8	; 0x08
    3b86:	b1 85       	ldd	r27, Z+9	; 0x09
    3b88:	86 0d       	add	r24, r6
    3b8a:	97 1d       	adc	r25, r7
    3b8c:	a8 1d       	adc	r26, r8
    3b8e:	b9 1d       	adc	r27, r9
    3b90:	86 83       	std	Z+6, r24	; 0x06
    3b92:	97 83       	std	Z+7, r25	; 0x07
    3b94:	a0 87       	std	Z+8, r26	; 0x08
    3b96:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3b98:	a6 18       	sub	r10, r6
    3b9a:	b7 08       	sbc	r11, r7
    3b9c:	c8 08       	sbc	r12, r8
    3b9e:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3ba0:	6a 14       	cp	r6, r10
    3ba2:	7b 04       	cpc	r7, r11
    3ba4:	8c 04       	cpc	r8, r12
    3ba6:	9d 04       	cpc	r9, r13
    3ba8:	08 f4       	brcc	.+2      	; 0x3bac <f_lseek+0x27e>
    3baa:	a3 cf       	rjmp	.-186    	; 0x3af2 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3bac:	ef 81       	ldd	r30, Y+7	; 0x07
    3bae:	f8 85       	ldd	r31, Y+8	; 0x08
    3bb0:	86 81       	ldd	r24, Z+6	; 0x06
    3bb2:	97 81       	ldd	r25, Z+7	; 0x07
    3bb4:	a0 85       	ldd	r26, Z+8	; 0x08
    3bb6:	b1 85       	ldd	r27, Z+9	; 0x09
    3bb8:	8a 0d       	add	r24, r10
    3bba:	9b 1d       	adc	r25, r11
    3bbc:	ac 1d       	adc	r26, r12
    3bbe:	bd 1d       	adc	r27, r13
    3bc0:	86 83       	std	Z+6, r24	; 0x06
    3bc2:	97 83       	std	Z+7, r25	; 0x07
    3bc4:	a0 87       	std	Z+8, r26	; 0x08
    3bc6:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3bc8:	d6 01       	movw	r26, r12
    3bca:	c5 01       	movw	r24, r10
    3bcc:	09 e0       	ldi	r16, 0x09	; 9
    3bce:	b6 95       	lsr	r27
    3bd0:	a7 95       	ror	r26
    3bd2:	97 95       	ror	r25
    3bd4:	87 95       	ror	r24
    3bd6:	0a 95       	dec	r16
    3bd8:	d1 f7       	brne	.-12     	; 0x3bce <f_lseek+0x2a0>
    3bda:	08 2f       	mov	r16, r24
    3bdc:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3bde:	8f ef       	ldi	r24, 0xFF	; 255
    3be0:	91 e0       	ldi	r25, 0x01	; 1
    3be2:	a0 e0       	ldi	r26, 0x00	; 0
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	a8 22       	and	r10, r24
    3be8:	b9 22       	and	r11, r25
    3bea:	ca 22       	and	r12, r26
    3bec:	db 22       	and	r13, r27
    3bee:	a1 14       	cp	r10, r1
    3bf0:	b1 04       	cpc	r11, r1
    3bf2:	c1 04       	cpc	r12, r1
    3bf4:	d1 04       	cpc	r13, r1
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <f_lseek+0x2cc>
    3bf8:	47 c0       	rjmp	.+142    	; 0x3c88 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3bfa:	80 80       	ld	r8, Z
    3bfc:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3bfe:	3e ef       	ldi	r19, 0xFE	; 254
    3c00:	a3 2e       	mov	r10, r19
    3c02:	3f ef       	ldi	r19, 0xFF	; 255
    3c04:	b3 2e       	mov	r11, r19
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	c3 2e       	mov	r12, r19
    3c0a:	3f ef       	ldi	r19, 0xFF	; 255
    3c0c:	d3 2e       	mov	r13, r19
    3c0e:	a4 0e       	add	r10, r20
    3c10:	b5 1e       	adc	r11, r21
    3c12:	c6 1e       	adc	r12, r22
    3c14:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3c16:	f4 01       	movw	r30, r8
    3c18:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c1a:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c1c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c1e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c20:	02 97       	sbiw	r24, 0x02	; 2
    3c22:	a1 09       	sbc	r26, r1
    3c24:	b1 09       	sbc	r27, r1
    3c26:	a8 16       	cp	r10, r24
    3c28:	b9 06       	cpc	r11, r25
    3c2a:	ca 06       	cpc	r12, r26
    3c2c:	db 06       	cpc	r13, r27
    3c2e:	c0 f4       	brcc	.+48     	; 0x3c60 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3c30:	22 81       	ldd	r18, Z+2	; 0x02
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e0       	ldi	r20, 0x00	; 0
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	c6 01       	movw	r24, r12
    3c3a:	b5 01       	movw	r22, r10
    3c3c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    3c40:	9b 01       	movw	r18, r22
    3c42:	ac 01       	movw	r20, r24
    3c44:	f4 01       	movw	r30, r8
    3c46:	86 a1       	ldd	r24, Z+38	; 0x26
    3c48:	97 a1       	ldd	r25, Z+39	; 0x27
    3c4a:	a0 a5       	ldd	r26, Z+40	; 0x28
    3c4c:	b1 a5       	ldd	r27, Z+41	; 0x29
    3c4e:	28 0f       	add	r18, r24
    3c50:	39 1f       	adc	r19, r25
    3c52:	4a 1f       	adc	r20, r26
    3c54:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3c56:	21 15       	cp	r18, r1
    3c58:	31 05       	cpc	r19, r1
    3c5a:	41 05       	cpc	r20, r1
    3c5c:	51 05       	cpc	r21, r1
    3c5e:	49 f4       	brne	.+18     	; 0x3c72 <f_lseek+0x344>
    3c60:	af 81       	ldd	r26, Y+7	; 0x07
    3c62:	b8 85       	ldd	r27, Y+8	; 0x08
    3c64:	14 96       	adiw	r26, 0x04	; 4
    3c66:	8c 91       	ld	r24, X
    3c68:	14 97       	sbiw	r26, 0x04	; 4
    3c6a:	80 68       	ori	r24, 0x80	; 128
    3c6c:	14 96       	adiw	r26, 0x04	; 4
    3c6e:	8c 93       	st	X, r24
    3c70:	21 cf       	rjmp	.-446    	; 0x3ab4 <f_lseek+0x186>
				nsect += fp->csect;
    3c72:	59 01       	movw	r10, r18
    3c74:	6a 01       	movw	r12, r20
    3c76:	a0 0e       	add	r10, r16
    3c78:	b1 1c       	adc	r11, r1
    3c7a:	c1 1c       	adc	r12, r1
    3c7c:	d1 1c       	adc	r13, r1
				fp->csect++;
    3c7e:	0f 5f       	subi	r16, 0xFF	; 255
    3c80:	ef 81       	ldd	r30, Y+7	; 0x07
    3c82:	f8 85       	ldd	r31, Y+8	; 0x08
    3c84:	05 83       	std	Z+5, r16	; 0x05
    3c86:	03 c0       	rjmp	.+6      	; 0x3c8e <f_lseek+0x360>
    3c88:	aa 24       	eor	r10, r10
    3c8a:	bb 24       	eor	r11, r11
    3c8c:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3c8e:	ef 81       	ldd	r30, Y+7	; 0x07
    3c90:	f8 85       	ldd	r31, Y+8	; 0x08
    3c92:	86 81       	ldd	r24, Z+6	; 0x06
    3c94:	97 81       	ldd	r25, Z+7	; 0x07
    3c96:	a0 85       	ldd	r26, Z+8	; 0x08
    3c98:	b1 85       	ldd	r27, Z+9	; 0x09
    3c9a:	91 70       	andi	r25, 0x01	; 1
    3c9c:	a0 70       	andi	r26, 0x00	; 0
    3c9e:	b0 70       	andi	r27, 0x00	; 0
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	a1 05       	cpc	r26, r1
    3ca4:	b1 05       	cpc	r27, r1
    3ca6:	09 f4       	brne	.+2      	; 0x3caa <f_lseek+0x37c>
    3ca8:	45 c0       	rjmp	.+138    	; 0x3d34 <f_lseek+0x406>
    3caa:	26 89       	ldd	r18, Z+22	; 0x16
    3cac:	37 89       	ldd	r19, Z+23	; 0x17
    3cae:	40 8d       	ldd	r20, Z+24	; 0x18
    3cb0:	51 8d       	ldd	r21, Z+25	; 0x19
    3cb2:	a2 16       	cp	r10, r18
    3cb4:	b3 06       	cpc	r11, r19
    3cb6:	c4 06       	cpc	r12, r20
    3cb8:	d5 06       	cpc	r13, r21
    3cba:	e1 f1       	breq	.+120    	; 0x3d34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3cbc:	84 81       	ldd	r24, Z+4	; 0x04
    3cbe:	86 ff       	sbrs	r24, 6
    3cc0:	1a c0       	rjmp	.+52     	; 0x3cf6 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3cc2:	01 90       	ld	r0, Z+
    3cc4:	f0 81       	ld	r31, Z
    3cc6:	e0 2d       	mov	r30, r0
    3cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cca:	78 85       	ldd	r23, Y+8	; 0x08
    3ccc:	60 5e       	subi	r22, 0xE0	; 224
    3cce:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd0:	81 81       	ldd	r24, Z+1	; 0x01
    3cd2:	01 e0       	ldi	r16, 0x01	; 1
    3cd4:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    3cd8:	af 81       	ldd	r26, Y+7	; 0x07
    3cda:	b8 85       	ldd	r27, Y+8	; 0x08
    3cdc:	14 96       	adiw	r26, 0x04	; 4
    3cde:	9c 91       	ld	r25, X
    3ce0:	14 97       	sbiw	r26, 0x04	; 4
    3ce2:	88 23       	and	r24, r24
    3ce4:	21 f0       	breq	.+8      	; 0x3cee <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3ce6:	90 68       	ori	r25, 0x80	; 128
    3ce8:	14 96       	adiw	r26, 0x04	; 4
    3cea:	9c 93       	st	X, r25
    3cec:	19 c0       	rjmp	.+50     	; 0x3d20 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3cee:	9f 7b       	andi	r25, 0xBF	; 191
    3cf0:	ef 81       	ldd	r30, Y+7	; 0x07
    3cf2:	f8 85       	ldd	r31, Y+8	; 0x08
    3cf4:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3cf6:	af 81       	ldd	r26, Y+7	; 0x07
    3cf8:	b8 85       	ldd	r27, Y+8	; 0x08
    3cfa:	ed 91       	ld	r30, X+
    3cfc:	fc 91       	ld	r31, X
    3cfe:	11 97       	sbiw	r26, 0x01	; 1
    3d00:	bd 01       	movw	r22, r26
    3d02:	60 5e       	subi	r22, 0xE0	; 224
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	81 81       	ldd	r24, Z+1	; 0x01
    3d08:	a6 01       	movw	r20, r12
    3d0a:	95 01       	movw	r18, r10
    3d0c:	01 e0       	ldi	r16, 0x01	; 1
    3d0e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <disk_read>
    3d12:	88 23       	and	r24, r24
    3d14:	39 f0       	breq	.+14     	; 0x3d24 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3d16:	ef 81       	ldd	r30, Y+7	; 0x07
    3d18:	f8 85       	ldd	r31, Y+8	; 0x08
    3d1a:	84 81       	ldd	r24, Z+4	; 0x04
    3d1c:	80 68       	ori	r24, 0x80	; 128
    3d1e:	84 83       	std	Z+4, r24	; 0x04
    3d20:	11 e0       	ldi	r17, 0x01	; 1
    3d22:	1e c0       	rjmp	.+60     	; 0x3d60 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3d24:	af 81       	ldd	r26, Y+7	; 0x07
    3d26:	b8 85       	ldd	r27, Y+8	; 0x08
    3d28:	56 96       	adiw	r26, 0x16	; 22
    3d2a:	ad 92       	st	X+, r10
    3d2c:	bd 92       	st	X+, r11
    3d2e:	cd 92       	st	X+, r12
    3d30:	dc 92       	st	X, r13
    3d32:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3d34:	ef 81       	ldd	r30, Y+7	; 0x07
    3d36:	f8 85       	ldd	r31, Y+8	; 0x08
    3d38:	26 81       	ldd	r18, Z+6	; 0x06
    3d3a:	37 81       	ldd	r19, Z+7	; 0x07
    3d3c:	40 85       	ldd	r20, Z+8	; 0x08
    3d3e:	51 85       	ldd	r21, Z+9	; 0x09
    3d40:	82 85       	ldd	r24, Z+10	; 0x0a
    3d42:	93 85       	ldd	r25, Z+11	; 0x0b
    3d44:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d46:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d48:	82 17       	cp	r24, r18
    3d4a:	93 07       	cpc	r25, r19
    3d4c:	a4 07       	cpc	r26, r20
    3d4e:	b5 07       	cpc	r27, r21
    3d50:	38 f4       	brcc	.+14     	; 0x3d60 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3d52:	22 87       	std	Z+10, r18	; 0x0a
    3d54:	33 87       	std	Z+11, r19	; 0x0b
    3d56:	44 87       	std	Z+12, r20	; 0x0c
    3d58:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3d5a:	84 81       	ldd	r24, Z+4	; 0x04
    3d5c:	80 62       	ori	r24, 0x20	; 32
    3d5e:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3d60:	81 2f       	mov	r24, r17
    3d62:	28 96       	adiw	r28, 0x08	; 8
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	cf 91       	pop	r28
    3d6a:	df 91       	pop	r29
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	df 90       	pop	r13
    3d72:	cf 90       	pop	r12
    3d74:	bf 90       	pop	r11
    3d76:	af 90       	pop	r10
    3d78:	9f 90       	pop	r9
    3d7a:	8f 90       	pop	r8
    3d7c:	7f 90       	pop	r7
    3d7e:	6f 90       	pop	r6
    3d80:	5f 90       	pop	r5
    3d82:	4f 90       	pop	r4
    3d84:	3f 90       	pop	r3
    3d86:	2f 90       	pop	r2
    3d88:	08 95       	ret

00003d8a <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	2e 97       	sbiw	r28, 0x0e	; 14
    3d98:	cd bf       	out	0x3d, r28	; 61
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	8c 01       	movw	r16, r24
    3d9e:	6d 87       	std	Y+13, r22	; 0x0d
    3da0:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3da2:	ce 01       	movw	r24, r28
    3da4:	0d 96       	adiw	r24, 0x0d	; 13
    3da6:	b8 01       	movw	r22, r16
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
	if (res == FR_OK) {
    3dae:	88 23       	and	r24, r24
    3db0:	09 f0       	breq	.+2      	; 0x3db4 <f_opendir+0x2a>
    3db2:	46 c0       	rjmp	.+140    	; 0x3e40 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3db4:	ce 01       	movw	r24, r28
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	d8 01       	movw	r26, r16
    3dba:	54 96       	adiw	r26, 0x14	; 20
    3dbc:	8d 93       	st	X+, r24
    3dbe:	9c 93       	st	X, r25
    3dc0:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3dc2:	6d 85       	ldd	r22, Y+13	; 0x0d
    3dc4:	7e 85       	ldd	r23, Y+14	; 0x0e
    3dc6:	c8 01       	movw	r24, r16
    3dc8:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3dcc:	88 23       	and	r24, r24
    3dce:	a9 f5       	brne	.+106    	; 0x3e3a <f_opendir+0xb0>
			dir = dj->dir;
    3dd0:	d8 01       	movw	r26, r16
    3dd2:	52 96       	adiw	r26, 0x12	; 18
    3dd4:	ed 91       	ld	r30, X+
    3dd6:	fc 91       	ld	r31, X
    3dd8:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3dda:	30 97       	sbiw	r30, 0x00	; 0
    3ddc:	f9 f0       	breq	.+62     	; 0x3e1c <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3dde:	83 85       	ldd	r24, Z+11	; 0x0b
    3de0:	84 ff       	sbrs	r24, 4
    3de2:	2d c0       	rjmp	.+90     	; 0x3e3e <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3de4:	35 89       	ldd	r19, Z+21	; 0x15
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	84 89       	ldd	r24, Z+20	; 0x14
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	28 2b       	or	r18, r24
    3dee:	39 2b       	or	r19, r25
    3df0:	40 e0       	ldi	r20, 0x00	; 0
    3df2:	50 e0       	ldi	r21, 0x00	; 0
    3df4:	a9 01       	movw	r20, r18
    3df6:	33 27       	eor	r19, r19
    3df8:	22 27       	eor	r18, r18
    3dfa:	93 8d       	ldd	r25, Z+27	; 0x1b
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	62 8d       	ldd	r22, Z+26	; 0x1a
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	86 2b       	or	r24, r22
    3e04:	97 2b       	or	r25, r23
    3e06:	a0 e0       	ldi	r26, 0x00	; 0
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	28 2b       	or	r18, r24
    3e0c:	39 2b       	or	r19, r25
    3e0e:	4a 2b       	or	r20, r26
    3e10:	5b 2b       	or	r21, r27
    3e12:	f8 01       	movw	r30, r16
    3e14:	26 83       	std	Z+6, r18	; 0x06
    3e16:	37 83       	std	Z+7, r19	; 0x07
    3e18:	40 87       	std	Z+8, r20	; 0x08
    3e1a:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3e1c:	d8 01       	movw	r26, r16
    3e1e:	ed 91       	ld	r30, X+
    3e20:	fc 91       	ld	r31, X
    3e22:	11 97       	sbiw	r26, 0x01	; 1
    3e24:	86 81       	ldd	r24, Z+6	; 0x06
    3e26:	97 81       	ldd	r25, Z+7	; 0x07
    3e28:	12 96       	adiw	r26, 0x02	; 2
    3e2a:	8d 93       	st	X+, r24
    3e2c:	9c 93       	st	X, r25
    3e2e:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3e30:	c8 01       	movw	r24, r16
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3e3a:	84 30       	cpi	r24, 0x04	; 4
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <f_opendir+0xb6>
    3e3e:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3e40:	2e 96       	adiw	r28, 0x0e	; 14
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	de bf       	out	0x3e, r29	; 62
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	08 95       	ret

00003e50 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3e50:	ef 92       	push	r14
    3e52:	ff 92       	push	r15
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	2c 97       	sbiw	r28, 0x0c	; 12
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	de bf       	out	0x3e, r29	; 62
    3e66:	8c 01       	movw	r16, r24
    3e68:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	62 81       	ldd	r22, Z+2	; 0x02
    3e6e:	73 81       	ldd	r23, Z+3	; 0x03
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <validate>
	if (res == FR_OK) {
    3e78:	88 23       	and	r24, r24
    3e7a:	59 f5       	brne	.+86     	; 0x3ed2 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3e7c:	ce 01       	movw	r24, r28
    3e7e:	01 96       	adiw	r24, 0x01	; 1
    3e80:	f8 01       	movw	r30, r16
    3e82:	84 8b       	std	Z+20, r24	; 0x14
    3e84:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3e86:	e1 14       	cp	r14, r1
    3e88:	f1 04       	cpc	r15, r1
    3e8a:	31 f4       	brne	.+12     	; 0x3e98 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3e8c:	c8 01       	movw	r24, r16
    3e8e:	60 e0       	ldi	r22, 0x00	; 0
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
    3e96:	1d c0       	rjmp	.+58     	; 0x3ed2 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3e98:	c8 01       	movw	r24, r16
    3e9a:	0e 94 27 10 	call	0x204e	; 0x204e <dir_read>
			if (res == FR_NO_FILE) {
    3e9e:	84 30       	cpi	r24, 0x04	; 4
    3ea0:	31 f4       	brne	.+12     	; 0x3eae <f_readdir+0x5e>
				dj->sect = 0;
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	16 86       	std	Z+14, r1	; 0x0e
    3ea6:	17 86       	std	Z+15, r1	; 0x0f
    3ea8:	10 8a       	std	Z+16, r1	; 0x10
    3eaa:	11 8a       	std	Z+17, r1	; 0x11
    3eac:	02 c0       	rjmp	.+4      	; 0x3eb2 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3eae:	88 23       	and	r24, r24
    3eb0:	81 f4       	brne	.+32     	; 0x3ed2 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	b7 01       	movw	r22, r14
    3eb6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3eba:	c8 01       	movw	r24, r16
    3ebc:	60 e0       	ldi	r22, 0x00	; 0
    3ebe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <dir_next>
				if (res == FR_NO_FILE) {
    3ec2:	84 30       	cpi	r24, 0x04	; 4
    3ec4:	31 f4       	brne	.+12     	; 0x3ed2 <f_readdir+0x82>
					dj->sect = 0;
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	16 86       	std	Z+14, r1	; 0x0e
    3eca:	17 86       	std	Z+15, r1	; 0x0f
    3ecc:	10 8a       	std	Z+16, r1	; 0x10
    3ece:	11 8a       	std	Z+17, r1	; 0x11
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3ed2:	2c 96       	adiw	r28, 0x0c	; 12
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	cf 91       	pop	r28
    3eda:	df 91       	pop	r29
    3edc:	1f 91       	pop	r17
    3ede:	0f 91       	pop	r16
    3ee0:	ff 90       	pop	r15
    3ee2:	ef 90       	pop	r14
    3ee4:	08 95       	ret

00003ee6 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	1f 93       	push	r17
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	a4 97       	sbiw	r28, 0x24	; 36
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	8b a3       	std	Y+35, r24	; 0x23
    3f00:	9c a3       	std	Y+36, r25	; 0x24
    3f02:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3f04:	2d e0       	ldi	r18, 0x0D	; 13
    3f06:	e2 2e       	mov	r14, r18
    3f08:	f1 2c       	mov	r15, r1
    3f0a:	ec 0e       	add	r14, r28
    3f0c:	fd 1e       	adc	r15, r29
    3f0e:	ce 01       	movw	r24, r28
    3f10:	83 96       	adiw	r24, 0x23	; 35
    3f12:	b7 01       	movw	r22, r14
    3f14:	40 e0       	ldi	r20, 0x00	; 0
    3f16:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
    3f1a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3f1c:	88 23       	and	r24, r24
    3f1e:	b1 f4       	brne	.+44     	; 0x3f4c <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3f20:	ce 01       	movw	r24, r28
    3f22:	01 96       	adiw	r24, 0x01	; 1
    3f24:	89 a3       	std	Y+33, r24	; 0x21
    3f26:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3f28:	6b a1       	ldd	r22, Y+35	; 0x23
    3f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f2c:	c7 01       	movw	r24, r14
    3f2e:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
    3f32:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3f34:	88 23       	and	r24, r24
    3f36:	51 f4       	brne	.+20     	; 0x3f4c <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f3a:	98 a1       	ldd	r25, Y+32	; 0x20
    3f3c:	89 2b       	or	r24, r25
    3f3e:	11 f4       	brne	.+4      	; 0x3f44 <f_stat+0x5e>
    3f40:	16 e0       	ldi	r17, 0x06	; 6
    3f42:	04 c0       	rjmp	.+8      	; 0x3f4c <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3f44:	c7 01       	movw	r24, r14
    3f46:	b6 01       	movw	r22, r12
    3f48:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3f4c:	81 2f       	mov	r24, r17
    3f4e:	a4 96       	adiw	r28, 0x24	; 36
    3f50:	cd bf       	out	0x3d, r28	; 61
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	cf 91       	pop	r28
    3f56:	df 91       	pop	r29
    3f58:	1f 91       	pop	r17
    3f5a:	ff 90       	pop	r15
    3f5c:	ef 90       	pop	r14
    3f5e:	df 90       	pop	r13
    3f60:	cf 90       	pop	r12
    3f62:	08 95       	ret

00003f64 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3f64:	2f 92       	push	r2
    3f66:	3f 92       	push	r3
    3f68:	4f 92       	push	r4
    3f6a:	5f 92       	push	r5
    3f6c:	6f 92       	push	r6
    3f6e:	7f 92       	push	r7
    3f70:	8f 92       	push	r8
    3f72:	9f 92       	push	r9
    3f74:	af 92       	push	r10
    3f76:	bf 92       	push	r11
    3f78:	cf 92       	push	r12
    3f7a:	df 92       	push	r13
    3f7c:	ef 92       	push	r14
    3f7e:	ff 92       	push	r15
    3f80:	0f 93       	push	r16
    3f82:	1f 93       	push	r17
    3f84:	df 93       	push	r29
    3f86:	cf 93       	push	r28
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
    3f8c:	29 97       	sbiw	r28, 0x09	; 9
    3f8e:	cd bf       	out	0x3d, r28	; 61
    3f90:	de bf       	out	0x3e, r29	; 62
    3f92:	89 83       	std	Y+1, r24	; 0x01
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	6c 83       	std	Y+4, r22	; 0x04
    3f98:	7d 83       	std	Y+5, r23	; 0x05
    3f9a:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	ba 01       	movw	r22, r20
    3fa2:	40 e0       	ldi	r20, 0x00	; 0
    3fa4:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    3fa8:	88 23       	and	r24, r24
    3faa:	09 f0       	breq	.+2      	; 0x3fae <f_getfree+0x4a>
    3fac:	eb c0       	rjmp	.+470    	; 0x4184 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    3fae:	d2 01       	movw	r26, r4
    3fb0:	ed 91       	ld	r30, X+
    3fb2:	fc 91       	ld	r31, X
    3fb4:	26 85       	ldd	r18, Z+14	; 0x0e
    3fb6:	37 85       	ldd	r19, Z+15	; 0x0f
    3fb8:	40 89       	ldd	r20, Z+16	; 0x10
    3fba:	51 89       	ldd	r21, Z+17	; 0x11
    3fbc:	e2 8c       	ldd	r14, Z+26	; 0x1a
    3fbe:	f3 8c       	ldd	r15, Z+27	; 0x1b
    3fc0:	04 8d       	ldd	r16, Z+28	; 0x1c
    3fc2:	15 8d       	ldd	r17, Z+29	; 0x1d
    3fc4:	d8 01       	movw	r26, r16
    3fc6:	c7 01       	movw	r24, r14
    3fc8:	02 97       	sbiw	r24, 0x02	; 2
    3fca:	a1 09       	sbc	r26, r1
    3fcc:	b1 09       	sbc	r27, r1
    3fce:	82 17       	cp	r24, r18
    3fd0:	93 07       	cpc	r25, r19
    3fd2:	a4 07       	cpc	r26, r20
    3fd4:	b5 07       	cpc	r27, r21
    3fd6:	38 f0       	brcs	.+14     	; 0x3fe6 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    3fd8:	ec 81       	ldd	r30, Y+4	; 0x04
    3fda:	fd 81       	ldd	r31, Y+5	; 0x05
    3fdc:	20 83       	st	Z, r18
    3fde:	31 83       	std	Z+1, r19	; 0x01
    3fe0:	42 83       	std	Z+2, r20	; 0x02
    3fe2:	53 83       	std	Z+3, r21	; 0x03
    3fe4:	ce c0       	rjmp	.+412    	; 0x4182 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    3fe6:	30 80       	ld	r3, Z
    3fe8:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    3fea:	23 2d       	mov	r18, r3
    3fec:	21 30       	cpi	r18, 0x01	; 1
    3fee:	e1 f5       	brne	.+120    	; 0x4068 <f_getfree+0x104>
    3ff0:	aa 24       	eor	r10, r10
    3ff2:	bb 24       	eor	r11, r11
    3ff4:	65 01       	movw	r12, r10
    3ff6:	92 e0       	ldi	r25, 0x02	; 2
    3ff8:	e9 2e       	mov	r14, r25
    3ffa:	f1 2c       	mov	r15, r1
    3ffc:	01 2d       	mov	r16, r1
    3ffe:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    4000:	d2 01       	movw	r26, r4
    4002:	8d 91       	ld	r24, X+
    4004:	9c 91       	ld	r25, X
    4006:	b8 01       	movw	r22, r16
    4008:	a7 01       	movw	r20, r14
    400a:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    400e:	6f 3f       	cpi	r22, 0xFF	; 255
    4010:	bf ef       	ldi	r27, 0xFF	; 255
    4012:	7b 07       	cpc	r23, r27
    4014:	bf ef       	ldi	r27, 0xFF	; 255
    4016:	8b 07       	cpc	r24, r27
    4018:	bf ef       	ldi	r27, 0xFF	; 255
    401a:	9b 07       	cpc	r25, r27
    401c:	11 f4       	brne	.+4      	; 0x4022 <f_getfree+0xbe>
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	b1 c0       	rjmp	.+354    	; 0x4184 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    4022:	61 30       	cpi	r22, 0x01	; 1
    4024:	71 05       	cpc	r23, r1
    4026:	81 05       	cpc	r24, r1
    4028:	91 05       	cpc	r25, r1
    402a:	11 f4       	brne	.+4      	; 0x4030 <f_getfree+0xcc>
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	aa c0       	rjmp	.+340    	; 0x4184 <f_getfree+0x220>
			if (stat == 0) n++;
    4030:	61 15       	cp	r22, r1
    4032:	71 05       	cpc	r23, r1
    4034:	81 05       	cpc	r24, r1
    4036:	91 05       	cpc	r25, r1
    4038:	29 f4       	brne	.+10     	; 0x4044 <f_getfree+0xe0>
    403a:	08 94       	sec
    403c:	a1 1c       	adc	r10, r1
    403e:	b1 1c       	adc	r11, r1
    4040:	c1 1c       	adc	r12, r1
    4042:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    4044:	08 94       	sec
    4046:	e1 1c       	adc	r14, r1
    4048:	f1 1c       	adc	r15, r1
    404a:	01 1d       	adc	r16, r1
    404c:	11 1d       	adc	r17, r1
    404e:	d2 01       	movw	r26, r4
    4050:	ed 91       	ld	r30, X+
    4052:	fc 91       	ld	r31, X
    4054:	82 8d       	ldd	r24, Z+26	; 0x1a
    4056:	93 8d       	ldd	r25, Z+27	; 0x1b
    4058:	a4 8d       	ldd	r26, Z+28	; 0x1c
    405a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    405c:	e8 16       	cp	r14, r24
    405e:	f9 06       	cpc	r15, r25
    4060:	0a 07       	cpc	r16, r26
    4062:	1b 07       	cpc	r17, r27
    4064:	68 f2       	brcs	.-102    	; 0x4000 <f_getfree+0x9c>
    4066:	7b c0       	rjmp	.+246    	; 0x415e <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    4068:	66 8c       	ldd	r6, Z+30	; 0x1e
    406a:	77 8c       	ldd	r7, Z+31	; 0x1f
    406c:	80 a0       	ldd	r8, Z+32	; 0x20
    406e:	91 a0       	ldd	r9, Z+33	; 0x21
    4070:	aa 24       	eor	r10, r10
    4072:	bb 24       	eor	r11, r11
    4074:	65 01       	movw	r12, r10
    4076:	60 e0       	ldi	r22, 0x00	; 0
    4078:	70 e0       	ldi	r23, 0x00	; 0
    407a:	e0 e0       	ldi	r30, 0x00	; 0
    407c:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    407e:	61 15       	cp	r22, r1
    4080:	71 05       	cpc	r23, r1
    4082:	a9 f4       	brne	.+42     	; 0x40ae <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    4084:	f2 01       	movw	r30, r4
    4086:	80 81       	ld	r24, Z
    4088:	91 81       	ldd	r25, Z+1	; 0x01
    408a:	b4 01       	movw	r22, r8
    408c:	a3 01       	movw	r20, r6
    408e:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
				if (res != FR_OK)
    4092:	88 23       	and	r24, r24
    4094:	09 f0       	breq	.+2      	; 0x4098 <f_getfree+0x134>
    4096:	76 c0       	rjmp	.+236    	; 0x4184 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    4098:	08 94       	sec
    409a:	61 1c       	adc	r6, r1
    409c:	71 1c       	adc	r7, r1
    409e:	81 1c       	adc	r8, r1
    40a0:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    40a2:	d2 01       	movw	r26, r4
    40a4:	ed 91       	ld	r30, X+
    40a6:	fc 91       	ld	r31, X
    40a8:	be 96       	adiw	r30, 0x2e	; 46
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	72 e0       	ldi	r23, 0x02	; 2
    40ae:	b1 81       	ldd	r27, Z+1	; 0x01
    40b0:	b8 87       	std	Y+8, r27	; 0x08
    40b2:	20 81       	ld	r18, Z
    40b4:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    40b6:	3b 81       	ldd	r19, Y+3	; 0x03
    40b8:	32 30       	cpi	r19, 0x02	; 2
    40ba:	99 f4       	brne	.+38     	; 0x40e2 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    40bc:	bf 83       	std	Y+7, r27	; 0x07
    40be:	1e 82       	std	Y+6, r1	; 0x06
    40c0:	82 2f       	mov	r24, r18
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	ae 81       	ldd	r26, Y+6	; 0x06
    40c6:	bf 81       	ldd	r27, Y+7	; 0x07
    40c8:	8a 2b       	or	r24, r26
    40ca:	9b 2b       	or	r25, r27
    40cc:	89 2b       	or	r24, r25
    40ce:	29 f4       	brne	.+10     	; 0x40da <f_getfree+0x176>
    40d0:	08 94       	sec
    40d2:	a1 1c       	adc	r10, r1
    40d4:	b1 1c       	adc	r11, r1
    40d6:	c1 1c       	adc	r12, r1
    40d8:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    40da:	32 96       	adiw	r30, 0x02	; 2
    40dc:	62 50       	subi	r22, 0x02	; 2
    40de:	70 40       	sbci	r23, 0x00	; 0
    40e0:	33 c0       	rjmp	.+102    	; 0x4148 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    40e2:	23 81       	ldd	r18, Z+3	; 0x03
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e0       	ldi	r20, 0x00	; 0
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	52 2f       	mov	r21, r18
    40ec:	44 27       	eor	r20, r20
    40ee:	33 27       	eor	r19, r19
    40f0:	22 27       	eor	r18, r18
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	a0 e0       	ldi	r26, 0x00	; 0
    40f8:	b0 e0       	ldi	r27, 0x00	; 0
    40fa:	dc 01       	movw	r26, r24
    40fc:	99 27       	eor	r25, r25
    40fe:	88 27       	eor	r24, r24
    4100:	28 2b       	or	r18, r24
    4102:	39 2b       	or	r19, r25
    4104:	4a 2b       	or	r20, r26
    4106:	5b 2b       	or	r21, r27
    4108:	39 84       	ldd	r3, Y+9	; 0x09
    410a:	83 2d       	mov	r24, r3
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	a0 e0       	ldi	r26, 0x00	; 0
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	28 2b       	or	r18, r24
    4114:	39 2b       	or	r19, r25
    4116:	4a 2b       	or	r20, r26
    4118:	5b 2b       	or	r21, r27
    411a:	38 84       	ldd	r3, Y+8	; 0x08
    411c:	22 24       	eor	r2, r2
    411e:	c1 01       	movw	r24, r2
    4120:	a0 e0       	ldi	r26, 0x00	; 0
    4122:	b0 e0       	ldi	r27, 0x00	; 0
    4124:	28 2b       	or	r18, r24
    4126:	39 2b       	or	r19, r25
    4128:	4a 2b       	or	r20, r26
    412a:	5b 2b       	or	r21, r27
    412c:	5f 70       	andi	r21, 0x0F	; 15
    412e:	21 15       	cp	r18, r1
    4130:	31 05       	cpc	r19, r1
    4132:	41 05       	cpc	r20, r1
    4134:	51 05       	cpc	r21, r1
    4136:	29 f4       	brne	.+10     	; 0x4142 <f_getfree+0x1de>
    4138:	08 94       	sec
    413a:	a1 1c       	adc	r10, r1
    413c:	b1 1c       	adc	r11, r1
    413e:	c1 1c       	adc	r12, r1
    4140:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    4142:	34 96       	adiw	r30, 0x04	; 4
    4144:	64 50       	subi	r22, 0x04	; 4
    4146:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    4148:	08 94       	sec
    414a:	e1 08       	sbc	r14, r1
    414c:	f1 08       	sbc	r15, r1
    414e:	01 09       	sbc	r16, r1
    4150:	11 09       	sbc	r17, r1
    4152:	e1 14       	cp	r14, r1
    4154:	f1 04       	cpc	r15, r1
    4156:	01 05       	cpc	r16, r1
    4158:	11 05       	cpc	r17, r1
    415a:	09 f0       	breq	.+2      	; 0x415e <f_getfree+0x1fa>
    415c:	90 cf       	rjmp	.-224    	; 0x407e <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    415e:	d2 01       	movw	r26, r4
    4160:	ed 91       	ld	r30, X+
    4162:	fc 91       	ld	r31, X
    4164:	a6 86       	std	Z+14, r10	; 0x0e
    4166:	b7 86       	std	Z+15, r11	; 0x0f
    4168:	c0 8a       	std	Z+16, r12	; 0x10
    416a:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    416c:	bb 81       	ldd	r27, Y+3	; 0x03
    416e:	b3 30       	cpi	r27, 0x03	; 3
    4170:	11 f4       	brne	.+4      	; 0x4176 <f_getfree+0x212>
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    4176:	ec 81       	ldd	r30, Y+4	; 0x04
    4178:	fd 81       	ldd	r31, Y+5	; 0x05
    417a:	a0 82       	st	Z, r10
    417c:	b1 82       	std	Z+1, r11	; 0x01
    417e:	c2 82       	std	Z+2, r12	; 0x02
    4180:	d3 82       	std	Z+3, r13	; 0x03
    4182:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4184:	29 96       	adiw	r28, 0x09	; 9
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	cf 91       	pop	r28
    418c:	df 91       	pop	r29
    418e:	1f 91       	pop	r17
    4190:	0f 91       	pop	r16
    4192:	ff 90       	pop	r15
    4194:	ef 90       	pop	r14
    4196:	df 90       	pop	r13
    4198:	cf 90       	pop	r12
    419a:	bf 90       	pop	r11
    419c:	af 90       	pop	r10
    419e:	9f 90       	pop	r9
    41a0:	8f 90       	pop	r8
    41a2:	7f 90       	pop	r7
    41a4:	6f 90       	pop	r6
    41a6:	5f 90       	pop	r5
    41a8:	4f 90       	pop	r4
    41aa:	3f 90       	pop	r3
    41ac:	2f 90       	pop	r2
    41ae:	08 95       	ret

000041b0 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    41b0:	cf 92       	push	r12
    41b2:	df 92       	push	r13
    41b4:	ef 92       	push	r14
    41b6:	ff 92       	push	r15
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	cf 93       	push	r28
    41be:	df 93       	push	r29
    41c0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    41c2:	6a 81       	ldd	r22, Y+2	; 0x02
    41c4:	7b 81       	ldd	r23, Y+3	; 0x03
    41c6:	88 81       	ld	r24, Y
    41c8:	99 81       	ldd	r25, Y+1	; 0x01
    41ca:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <validate>
    41ce:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    41d0:	88 23       	and	r24, r24
    41d2:	09 f0       	breq	.+2      	; 0x41d6 <f_truncate+0x26>
    41d4:	6e c0       	rjmp	.+220    	; 0x42b2 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    41d6:	6c 81       	ldd	r22, Y+4	; 0x04
    41d8:	67 ff       	sbrs	r22, 7
    41da:	02 c0       	rjmp	.+4      	; 0x41e0 <f_truncate+0x30>
    41dc:	12 e0       	ldi	r17, 0x02	; 2
    41de:	69 c0       	rjmp	.+210    	; 0x42b2 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    41e0:	61 fd       	sbrc	r22, 1
    41e2:	02 c0       	rjmp	.+4      	; 0x41e8 <f_truncate+0x38>
    41e4:	17 e0       	ldi	r17, 0x07	; 7
    41e6:	65 c0       	rjmp	.+202    	; 0x42b2 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    41e8:	2e 81       	ldd	r18, Y+6	; 0x06
    41ea:	3f 81       	ldd	r19, Y+7	; 0x07
    41ec:	48 85       	ldd	r20, Y+8	; 0x08
    41ee:	59 85       	ldd	r21, Y+9	; 0x09
    41f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    41f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    41f4:	ac 85       	ldd	r26, Y+12	; 0x0c
    41f6:	bd 85       	ldd	r27, Y+13	; 0x0d
    41f8:	28 17       	cp	r18, r24
    41fa:	39 07       	cpc	r19, r25
    41fc:	4a 07       	cpc	r20, r26
    41fe:	5b 07       	cpc	r21, r27
    4200:	08 f0       	brcs	.+2      	; 0x4204 <f_truncate+0x54>
    4202:	57 c0       	rjmp	.+174    	; 0x42b2 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    4204:	2a 87       	std	Y+10, r18	; 0x0a
    4206:	3b 87       	std	Y+11, r19	; 0x0b
    4208:	4c 87       	std	Y+12, r20	; 0x0c
    420a:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    420c:	60 62       	ori	r22, 0x20	; 32
    420e:	6c 83       	std	Y+4, r22	; 0x04
    4210:	88 81       	ld	r24, Y
    4212:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    4214:	21 15       	cp	r18, r1
    4216:	31 05       	cpc	r19, r1
    4218:	41 05       	cpc	r20, r1
    421a:	51 05       	cpc	r21, r1
    421c:	61 f4       	brne	.+24     	; 0x4236 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    421e:	4e 85       	ldd	r20, Y+14	; 0x0e
    4220:	5f 85       	ldd	r21, Y+15	; 0x0f
    4222:	68 89       	ldd	r22, Y+16	; 0x10
    4224:	79 89       	ldd	r23, Y+17	; 0x11
    4226:	0e 94 03 0c 	call	0x1806	; 0x1806 <remove_chain>
    422a:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    422c:	1e 86       	std	Y+14, r1	; 0x0e
    422e:	1f 86       	std	Y+15, r1	; 0x0f
    4230:	18 8a       	std	Y+16, r1	; 0x10
    4232:	19 8a       	std	Y+17, r1	; 0x11
    4234:	39 c0       	rjmp	.+114    	; 0x42a8 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    4236:	4a 89       	ldd	r20, Y+18	; 0x12
    4238:	5b 89       	ldd	r21, Y+19	; 0x13
    423a:	6c 89       	ldd	r22, Y+20	; 0x14
    423c:	7d 89       	ldd	r23, Y+21	; 0x15
    423e:	0e 94 2d 0a 	call	0x145a	; 0x145a <get_fat>
    4242:	6b 01       	movw	r12, r22
    4244:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4246:	8f ef       	ldi	r24, 0xFF	; 255
    4248:	c8 16       	cp	r12, r24
    424a:	8f ef       	ldi	r24, 0xFF	; 255
    424c:	d8 06       	cpc	r13, r24
    424e:	8f ef       	ldi	r24, 0xFF	; 255
    4250:	e8 06       	cpc	r14, r24
    4252:	8f ef       	ldi	r24, 0xFF	; 255
    4254:	f8 06       	cpc	r15, r24
    4256:	b9 f1       	breq	.+110    	; 0x42c6 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	c8 16       	cp	r12, r24
    425c:	d1 04       	cpc	r13, r1
    425e:	e1 04       	cpc	r14, r1
    4260:	f1 04       	cpc	r15, r1
    4262:	11 f4       	brne	.+4      	; 0x4268 <f_truncate+0xb8>
    4264:	12 e0       	ldi	r17, 0x02	; 2
    4266:	22 c0       	rjmp	.+68     	; 0x42ac <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    4268:	e8 81       	ld	r30, Y
    426a:	f9 81       	ldd	r31, Y+1	; 0x01
    426c:	82 8d       	ldd	r24, Z+26	; 0x1a
    426e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4270:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4272:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4274:	c8 16       	cp	r12, r24
    4276:	d9 06       	cpc	r13, r25
    4278:	ea 06       	cpc	r14, r26
    427a:	fb 06       	cpc	r15, r27
    427c:	d0 f4       	brcc	.+52     	; 0x42b2 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    427e:	4a 89       	ldd	r20, Y+18	; 0x12
    4280:	5b 89       	ldd	r21, Y+19	; 0x13
    4282:	6c 89       	ldd	r22, Y+20	; 0x14
    4284:	7d 89       	ldd	r23, Y+21	; 0x15
    4286:	cf 01       	movw	r24, r30
    4288:	0f ef       	ldi	r16, 0xFF	; 255
    428a:	1f ef       	ldi	r17, 0xFF	; 255
    428c:	2f ef       	ldi	r18, 0xFF	; 255
    428e:	3f e0       	ldi	r19, 0x0F	; 15
    4290:	0e 94 17 0b 	call	0x162e	; 0x162e <put_fat>
    4294:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4296:	88 23       	and	r24, r24
    4298:	49 f4       	brne	.+18     	; 0x42ac <f_truncate+0xfc>
    429a:	88 81       	ld	r24, Y
    429c:	99 81       	ldd	r25, Y+1	; 0x01
    429e:	b7 01       	movw	r22, r14
    42a0:	a6 01       	movw	r20, r12
    42a2:	0e 94 03 0c 	call	0x1806	; 0x1806 <remove_chain>
    42a6:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    42a8:	11 23       	and	r17, r17
    42aa:	19 f0       	breq	.+6      	; 0x42b2 <f_truncate+0x102>
    42ac:	8c 81       	ldd	r24, Y+4	; 0x04
    42ae:	80 68       	ori	r24, 0x80	; 128
    42b0:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    42b2:	81 2f       	mov	r24, r17
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    42c6:	11 e0       	ldi	r17, 0x01	; 1
    42c8:	f1 cf       	rjmp	.-30     	; 0x42ac <f_truncate+0xfc>

000042ca <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    42ca:	cf 92       	push	r12
    42cc:	df 92       	push	r13
    42ce:	ef 92       	push	r14
    42d0:	ff 92       	push	r15
    42d2:	0f 93       	push	r16
    42d4:	1f 93       	push	r17
    42d6:	df 93       	push	r29
    42d8:	cf 93       	push	r28
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	ea 97       	sbiw	r28, 0x3a	; 58
    42e0:	cd bf       	out	0x3d, r28	; 61
    42e2:	de bf       	out	0x3e, r29	; 62
    42e4:	89 af       	std	Y+57, r24	; 0x39
    42e6:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    42e8:	4d e0       	ldi	r20, 0x0D	; 13
    42ea:	c4 2e       	mov	r12, r20
    42ec:	d1 2c       	mov	r13, r1
    42ee:	cc 0e       	add	r12, r28
    42f0:	dd 1e       	adc	r13, r29
    42f2:	ce 01       	movw	r24, r28
    42f4:	c9 96       	adiw	r24, 0x39	; 57
    42f6:	b6 01       	movw	r22, r12
    42f8:	41 e0       	ldi	r20, 0x01	; 1
    42fa:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    42fe:	88 23       	and	r24, r24
    4300:	09 f0       	breq	.+2      	; 0x4304 <f_unlink+0x3a>
    4302:	71 c0       	rjmp	.+226    	; 0x43e6 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    4304:	ce 01       	movw	r24, r28
    4306:	01 96       	adiw	r24, 0x01	; 1
    4308:	89 a3       	std	Y+33, r24	; 0x21
    430a:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    430c:	69 ad       	ldd	r22, Y+57	; 0x39
    430e:	7a ad       	ldd	r23, Y+58	; 0x3a
    4310:	c6 01       	movw	r24, r12
    4312:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    4316:	88 23       	and	r24, r24
    4318:	09 f0       	breq	.+2      	; 0x431c <f_unlink+0x52>
    431a:	65 c0       	rjmp	.+202    	; 0x43e6 <f_unlink+0x11c>

	dir = dj.dir;
    431c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    431e:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    4320:	30 97       	sbiw	r30, 0x00	; 0
    4322:	11 f4       	brne	.+4      	; 0x4328 <f_unlink+0x5e>
    4324:	86 e0       	ldi	r24, 0x06	; 6
    4326:	5f c0       	rjmp	.+190    	; 0x43e6 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    4328:	83 85       	ldd	r24, Z+11	; 0x0b
    432a:	48 2f       	mov	r20, r24
    432c:	80 fd       	sbrc	r24, 0
    432e:	5a c0       	rjmp	.+180    	; 0x43e4 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    4330:	95 89       	ldd	r25, Z+21	; 0x15
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	24 89       	ldd	r18, Z+20	; 0x14
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	82 2b       	or	r24, r18
    433a:	93 2b       	or	r25, r19
    433c:	a0 e0       	ldi	r26, 0x00	; 0
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	8c 01       	movw	r16, r24
    4342:	ff 24       	eor	r15, r15
    4344:	ee 24       	eor	r14, r14
    4346:	93 8d       	ldd	r25, Z+27	; 0x1b
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	22 8d       	ldd	r18, Z+26	; 0x1a
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	82 2b       	or	r24, r18
    4350:	93 2b       	or	r25, r19
    4352:	a0 e0       	ldi	r26, 0x00	; 0
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	e8 2a       	or	r14, r24
    4358:	f9 2a       	or	r15, r25
    435a:	0a 2b       	or	r16, r26
    435c:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    435e:	44 ff       	sbrs	r20, 4
    4360:	29 c0       	rjmp	.+82     	; 0x43b4 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4362:	82 e0       	ldi	r24, 0x02	; 2
    4364:	e8 16       	cp	r14, r24
    4366:	f1 04       	cpc	r15, r1
    4368:	01 05       	cpc	r16, r1
    436a:	11 05       	cpc	r17, r1
    436c:	10 f4       	brcc	.+4      	; 0x4372 <f_unlink+0xa8>
    436e:	82 e0       	ldi	r24, 0x02	; 2
    4370:	3a c0       	rjmp	.+116    	; 0x43e6 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4372:	de 01       	movw	r26, r28
    4374:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    4376:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    4378:	9d 01       	movw	r18, r26
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <f_unlink+0xb6>
    437c:	81 91       	ld	r24, Z+
    437e:	8d 93       	st	X+, r24
    4380:	e2 17       	cp	r30, r18
    4382:	f3 07       	cpc	r31, r19
    4384:	d9 f7       	brne	.-10     	; 0x437c <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    4386:	e9 a6       	std	Y+41, r14	; 0x29
    4388:	fa a6       	std	Y+42, r15	; 0x2a
    438a:	0b a7       	std	Y+43, r16	; 0x2b
    438c:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    438e:	23 e2       	ldi	r18, 0x23	; 35
    4390:	c2 2e       	mov	r12, r18
    4392:	d1 2c       	mov	r13, r1
    4394:	cc 0e       	add	r12, r28
    4396:	dd 1e       	adc	r13, r29
    4398:	c6 01       	movw	r24, r12
    439a:	62 e0       	ldi	r22, 0x02	; 2
    439c:	70 e0       	ldi	r23, 0x00	; 0
    439e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    43a2:	88 23       	and	r24, r24
    43a4:	01 f5       	brne	.+64     	; 0x43e6 <f_unlink+0x11c>
		res = dir_read(&sdj);
    43a6:	c6 01       	movw	r24, r12
    43a8:	0e 94 27 10 	call	0x204e	; 0x204e <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    43ac:	88 23       	and	r24, r24
    43ae:	d1 f0       	breq	.+52     	; 0x43e4 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    43b0:	84 30       	cpi	r24, 0x04	; 4
    43b2:	c9 f4       	brne	.+50     	; 0x43e6 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    43b4:	ce 01       	movw	r24, r28
    43b6:	0d 96       	adiw	r24, 0x0d	; 13
    43b8:	0e 94 b2 10 	call	0x2164	; 0x2164 <dir_remove>
	if (res == FR_OK) {
    43bc:	88 23       	and	r24, r24
    43be:	99 f4       	brne	.+38     	; 0x43e6 <f_unlink+0x11c>
		if (dclst)
    43c0:	e1 14       	cp	r14, r1
    43c2:	f1 04       	cpc	r15, r1
    43c4:	01 05       	cpc	r16, r1
    43c6:	11 05       	cpc	r17, r1
    43c8:	41 f0       	breq	.+16     	; 0x43da <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    43ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    43cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ce:	b8 01       	movw	r22, r16
    43d0:	a7 01       	movw	r20, r14
    43d2:	0e 94 03 0c 	call	0x1806	; 0x1806 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    43d6:	88 23       	and	r24, r24
    43d8:	31 f4       	brne	.+12     	; 0x43e6 <f_unlink+0x11c>
    43da:	8d 85       	ldd	r24, Y+13	; 0x0d
    43dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43de:	0e 94 9e 09 	call	0x133c	; 0x133c <sync>
    43e2:	01 c0       	rjmp	.+2      	; 0x43e6 <f_unlink+0x11c>
    43e4:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    43e6:	ea 96       	adiw	r28, 0x3a	; 58
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	1f 91       	pop	r17
    43f2:	0f 91       	pop	r16
    43f4:	ff 90       	pop	r15
    43f6:	ef 90       	pop	r14
    43f8:	df 90       	pop	r13
    43fa:	cf 90       	pop	r12
    43fc:	08 95       	ret

000043fe <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    43fe:	2f 92       	push	r2
    4400:	3f 92       	push	r3
    4402:	4f 92       	push	r4
    4404:	5f 92       	push	r5
    4406:	6f 92       	push	r6
    4408:	7f 92       	push	r7
    440a:	8f 92       	push	r8
    440c:	9f 92       	push	r9
    440e:	af 92       	push	r10
    4410:	bf 92       	push	r11
    4412:	cf 92       	push	r12
    4414:	df 92       	push	r13
    4416:	ef 92       	push	r14
    4418:	ff 92       	push	r15
    441a:	0f 93       	push	r16
    441c:	1f 93       	push	r17
    441e:	df 93       	push	r29
    4420:	cf 93       	push	r28
    4422:	cd b7       	in	r28, 0x3d	; 61
    4424:	de b7       	in	r29, 0x3e	; 62
    4426:	a8 97       	sbiw	r28, 0x28	; 40
    4428:	cd bf       	out	0x3d, r28	; 61
    442a:	de bf       	out	0x3e, r29	; 62
    442c:	8b a3       	std	Y+35, r24	; 0x23
    442e:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    4430:	3d e0       	ldi	r19, 0x0D	; 13
    4432:	e3 2e       	mov	r14, r19
    4434:	f1 2c       	mov	r15, r1
    4436:	ec 0e       	add	r14, r28
    4438:	fd 1e       	adc	r15, r29
    443a:	ce 01       	movw	r24, r28
    443c:	83 96       	adiw	r24, 0x23	; 35
    443e:	b7 01       	movw	r22, r14
    4440:	41 e0       	ldi	r20, 0x01	; 1
    4442:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
    4446:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4448:	88 23       	and	r24, r24
    444a:	09 f0       	breq	.+2      	; 0x444e <f_mkdir+0x50>
    444c:	38 c1       	rjmp	.+624    	; 0x46be <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    444e:	ce 01       	movw	r24, r28
    4450:	01 96       	adiw	r24, 0x01	; 1
    4452:	89 a3       	std	Y+33, r24	; 0x21
    4454:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4456:	6b a1       	ldd	r22, Y+35	; 0x23
    4458:	7c a1       	ldd	r23, Y+36	; 0x24
    445a:	c7 01       	movw	r24, r14
    445c:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
    4460:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4462:	88 23       	and	r24, r24
    4464:	11 f4       	brne	.+4      	; 0x446a <f_mkdir+0x6c>
    4466:	18 e0       	ldi	r17, 0x08	; 8
    4468:	2a c1       	rjmp	.+596    	; 0x46be <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    446a:	84 30       	cpi	r24, 0x04	; 4
    446c:	09 f0       	breq	.+2      	; 0x4470 <f_mkdir+0x72>
    446e:	27 c1       	rjmp	.+590    	; 0x46be <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    4470:	8d 85       	ldd	r24, Y+13	; 0x0d
    4472:	9e 85       	ldd	r25, Y+14	; 0x0e
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	60 e0       	ldi	r22, 0x00	; 0
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <create_chain>
    4480:	4b 01       	movw	r8, r22
    4482:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4484:	61 15       	cp	r22, r1
    4486:	71 05       	cpc	r23, r1
    4488:	81 05       	cpc	r24, r1
    448a:	91 05       	cpc	r25, r1
    448c:	11 f4       	brne	.+4      	; 0x4492 <f_mkdir+0x94>
    448e:	17 e0       	ldi	r17, 0x07	; 7
    4490:	16 c1       	rjmp	.+556    	; 0x46be <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    4492:	61 30       	cpi	r22, 0x01	; 1
    4494:	71 05       	cpc	r23, r1
    4496:	81 05       	cpc	r24, r1
    4498:	91 05       	cpc	r25, r1
    449a:	11 f4       	brne	.+4      	; 0x44a0 <f_mkdir+0xa2>
    449c:	12 e0       	ldi	r17, 0x02	; 2
    449e:	0f c1       	rjmp	.+542    	; 0x46be <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    44a0:	6f 3f       	cpi	r22, 0xFF	; 255
    44a2:	3f ef       	ldi	r19, 0xFF	; 255
    44a4:	73 07       	cpc	r23, r19
    44a6:	3f ef       	ldi	r19, 0xFF	; 255
    44a8:	83 07       	cpc	r24, r19
    44aa:	3f ef       	ldi	r19, 0xFF	; 255
    44ac:	93 07       	cpc	r25, r19
    44ae:	09 f4       	brne	.+2      	; 0x44b2 <f_mkdir+0xb4>
    44b0:	1d c1       	rjmp	.+570    	; 0x46ec <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    44b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44b6:	40 e0       	ldi	r20, 0x00	; 0
    44b8:	50 e0       	ldi	r21, 0x00	; 0
    44ba:	60 e0       	ldi	r22, 0x00	; 0
    44bc:	70 e0       	ldi	r23, 0x00	; 0
    44be:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    44c2:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44c4:	88 23       	and	r24, r24
    44c6:	09 f0       	breq	.+2      	; 0x44ca <f_mkdir+0xcc>
    44c8:	fa c0       	rjmp	.+500    	; 0x46be <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    44ca:	0d 85       	ldd	r16, Y+13	; 0x0d
    44cc:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    44ce:	2e ef       	ldi	r18, 0xFE	; 254
    44d0:	c2 2e       	mov	r12, r18
    44d2:	2f ef       	ldi	r18, 0xFF	; 255
    44d4:	d2 2e       	mov	r13, r18
    44d6:	2f ef       	ldi	r18, 0xFF	; 255
    44d8:	e2 2e       	mov	r14, r18
    44da:	2f ef       	ldi	r18, 0xFF	; 255
    44dc:	f2 2e       	mov	r15, r18
    44de:	c8 0c       	add	r12, r8
    44e0:	d9 1c       	adc	r13, r9
    44e2:	ea 1c       	adc	r14, r10
    44e4:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    44e6:	f8 01       	movw	r30, r16
    44e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    44ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    44ec:	a4 8d       	ldd	r26, Z+28	; 0x1c
    44ee:	b5 8d       	ldd	r27, Z+29	; 0x1d
    44f0:	02 97       	sbiw	r24, 0x02	; 2
    44f2:	a1 09       	sbc	r26, r1
    44f4:	b1 09       	sbc	r27, r1
    44f6:	c8 16       	cp	r12, r24
    44f8:	d9 06       	cpc	r13, r25
    44fa:	ea 06       	cpc	r14, r26
    44fc:	fb 06       	cpc	r15, r27
    44fe:	20 f0       	brcs	.+8      	; 0x4508 <f_mkdir+0x10a>
    4500:	44 24       	eor	r4, r4
    4502:	55 24       	eor	r5, r5
    4504:	32 01       	movw	r6, r4
    4506:	14 c0       	rjmp	.+40     	; 0x4530 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    4508:	f8 01       	movw	r30, r16
    450a:	22 81       	ldd	r18, Z+2	; 0x02
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	c7 01       	movw	r24, r14
    4514:	b6 01       	movw	r22, r12
    4516:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    451a:	2b 01       	movw	r4, r22
    451c:	3c 01       	movw	r6, r24
    451e:	f8 01       	movw	r30, r16
    4520:	86 a1       	ldd	r24, Z+38	; 0x26
    4522:	97 a1       	ldd	r25, Z+39	; 0x27
    4524:	a0 a5       	ldd	r26, Z+40	; 0x28
    4526:	b1 a5       	ldd	r27, Z+41	; 0x29
    4528:	48 0e       	add	r4, r24
    452a:	59 1e       	adc	r5, r25
    452c:	6a 1e       	adc	r6, r26
    452e:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    4530:	9e e2       	ldi	r25, 0x2E	; 46
    4532:	29 2e       	mov	r2, r25
    4534:	31 2c       	mov	r3, r1
    4536:	20 0e       	add	r2, r16
    4538:	31 1e       	adc	r3, r17
    453a:	f1 01       	movw	r30, r2
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	92 e0       	ldi	r25, 0x02	; 2
    4540:	01 c0       	rjmp	.+2      	; 0x4544 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4542:	11 92       	st	Z+, r1
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	2f ef       	ldi	r18, 0xFF	; 255
    4548:	8f 3f       	cpi	r24, 0xFF	; 255
    454a:	92 07       	cpc	r25, r18
    454c:	d1 f7       	brne	.-12     	; 0x4542 <f_mkdir+0x144>
    454e:	f1 01       	movw	r30, r2
    4550:	8b e0       	ldi	r24, 0x0B	; 11
    4552:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    4554:	20 e2       	ldi	r18, 0x20	; 32
    4556:	01 c0       	rjmp	.+2      	; 0x455a <f_mkdir+0x15c>
    4558:	21 93       	st	Z+, r18
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	3f ef       	ldi	r19, 0xFF	; 255
    455e:	8f 3f       	cpi	r24, 0xFF	; 255
    4560:	93 07       	cpc	r25, r19
    4562:	d1 f7       	brne	.-12     	; 0x4558 <f_mkdir+0x15a>
    4564:	8e e2       	ldi	r24, 0x2E	; 46
    4566:	f8 01       	movw	r30, r16
    4568:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    456a:	80 e1       	ldi	r24, 0x10	; 16
    456c:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    456e:	0c 5b       	subi	r16, 0xBC	; 188
    4570:	1f 4f       	sbci	r17, 0xFF	; 255
    4572:	f8 01       	movw	r30, r16
    4574:	11 92       	st	Z+, r1
    4576:	11 92       	st	Z+, r1
    4578:	11 92       	st	Z+, r1
    457a:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    457c:	88 a6       	std	Y+40, r8	; 0x28
    457e:	81 92       	st	Z+, r8
    4580:	8f 01       	movw	r16, r30
    4582:	89 2d       	mov	r24, r9
    4584:	99 27       	eor	r25, r25
    4586:	8f a3       	std	Y+39, r24	; 0x27
    4588:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    458a:	c5 01       	movw	r24, r10
    458c:	aa 27       	eor	r26, r26
    458e:	bb 27       	eor	r27, r27
    4590:	8e a3       	std	Y+38, r24	; 0x26
    4592:	07 50       	subi	r16, 0x07	; 7
    4594:	10 40       	sbci	r17, 0x00	; 0
    4596:	f8 01       	movw	r30, r16
    4598:	81 93       	st	Z+, r24
    459a:	8f 01       	movw	r16, r30
    459c:	89 2f       	mov	r24, r25
    459e:	99 27       	eor	r25, r25
    45a0:	8d a3       	std	Y+37, r24	; 0x25
    45a2:	80 83       	st	Z, r24
    45a4:	03 54       	subi	r16, 0x43	; 67
    45a6:	10 40       	sbci	r17, 0x00	; 0
    45a8:	f1 01       	movw	r30, r2
    45aa:	20 e2       	ldi	r18, 0x20	; 32
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	03 c0       	rjmp	.+6      	; 0x45b6 <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    45b0:	80 81       	ld	r24, Z
    45b2:	80 a3       	std	Z+32, r24	; 0x20
    45b4:	31 96       	adiw	r30, 0x01	; 1
    45b6:	21 50       	subi	r18, 0x01	; 1
    45b8:	30 40       	sbci	r19, 0x00	; 0
    45ba:	8f ef       	ldi	r24, 0xFF	; 255
    45bc:	2f 3f       	cpi	r18, 0xFF	; 255
    45be:	38 07       	cpc	r19, r24
    45c0:	b9 f7       	brne	.-18     	; 0x45b0 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    45c2:	01 5b       	subi	r16, 0xB1	; 177
    45c4:	1f 4f       	sbci	r17, 0xFF	; 255
    45c6:	8e e2       	ldi	r24, 0x2E	; 46
    45c8:	f8 01       	movw	r30, r16
    45ca:	80 83       	st	Z, r24
    45cc:	0f 54       	subi	r16, 0x4F	; 79
    45ce:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    45d0:	2b 89       	ldd	r18, Y+19	; 0x13
    45d2:	3c 89       	ldd	r19, Y+20	; 0x14
    45d4:	4d 89       	ldd	r20, Y+21	; 0x15
    45d6:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    45d8:	ed 85       	ldd	r30, Y+13	; 0x0d
    45da:	fe 85       	ldd	r31, Y+14	; 0x0e
    45dc:	80 81       	ld	r24, Z
    45de:	83 30       	cpi	r24, 0x03	; 3
    45e0:	69 f4       	brne	.+26     	; 0x45fc <f_mkdir+0x1fe>
    45e2:	82 a1       	ldd	r24, Z+34	; 0x22
    45e4:	93 a1       	ldd	r25, Z+35	; 0x23
    45e6:	a4 a1       	ldd	r26, Z+36	; 0x24
    45e8:	b5 a1       	ldd	r27, Z+37	; 0x25
    45ea:	28 17       	cp	r18, r24
    45ec:	39 07       	cpc	r19, r25
    45ee:	4a 07       	cpc	r20, r26
    45f0:	5b 07       	cpc	r21, r27
    45f2:	21 f4       	brne	.+8      	; 0x45fc <f_mkdir+0x1fe>
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	40 e0       	ldi	r20, 0x00	; 0
    45fa:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    45fc:	08 59       	subi	r16, 0x98	; 152
    45fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4600:	f8 01       	movw	r30, r16
    4602:	21 93       	st	Z+, r18
    4604:	8f 01       	movw	r16, r30
    4606:	83 2f       	mov	r24, r19
    4608:	99 27       	eor	r25, r25
    460a:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    460c:	ca 01       	movw	r24, r20
    460e:	aa 27       	eor	r26, r26
    4610:	bb 27       	eor	r27, r27
    4612:	07 50       	subi	r16, 0x07	; 7
    4614:	10 40       	sbci	r17, 0x00	; 0
    4616:	f8 01       	movw	r30, r16
    4618:	81 93       	st	Z+, r24
    461a:	89 2f       	mov	r24, r25
    461c:	99 27       	eor	r25, r25
    461e:	80 83       	st	Z, r24
    4620:	73 01       	movw	r14, r6
    4622:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    4624:	01 e0       	ldi	r16, 0x01	; 1
    4626:	1e c0       	rjmp	.+60     	; 0x4664 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    4628:	c2 a6       	std	Z+42, r12	; 0x2a
    462a:	d3 a6       	std	Z+43, r13	; 0x2b
    462c:	e4 a6       	std	Z+44, r14	; 0x2c
    462e:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    4630:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    4632:	cf 01       	movw	r24, r30
    4634:	40 e0       	ldi	r20, 0x00	; 0
    4636:	50 e0       	ldi	r21, 0x00	; 0
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
    4640:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    4642:	88 23       	and	r24, r24
    4644:	e1 f5       	brne	.+120    	; 0x46be <f_mkdir+0x2c0>
    4646:	f1 01       	movw	r30, r2
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	92 e0       	ldi	r25, 0x02	; 2
    464c:	01 c0       	rjmp	.+2      	; 0x4650 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    464e:	11 92       	st	Z+, r1
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	2f ef       	ldi	r18, 0xFF	; 255
    4654:	8f 3f       	cpi	r24, 0xFF	; 255
    4656:	92 07       	cpc	r25, r18
    4658:	d1 f7       	brne	.-12     	; 0x464e <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    465a:	08 94       	sec
    465c:	c1 1c       	adc	r12, r1
    465e:	d1 1c       	adc	r13, r1
    4660:	e1 1c       	adc	r14, r1
    4662:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4664:	ed 85       	ldd	r30, Y+13	; 0x0d
    4666:	fe 85       	ldd	r31, Y+14	; 0x0e
    4668:	9c 2d       	mov	r25, r12
    466a:	94 19       	sub	r25, r4
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	98 17       	cp	r25, r24
    4670:	d8 f2       	brcs	.-74     	; 0x4628 <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    4672:	ce 01       	movw	r24, r28
    4674:	0d 96       	adiw	r24, 0x0d	; 13
    4676:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <dir_register>
    467a:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    467c:	88 23       	and	r24, r24
    467e:	39 f0       	breq	.+14     	; 0x468e <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4680:	8d 85       	ldd	r24, Y+13	; 0x0d
    4682:	9e 85       	ldd	r25, Y+14	; 0x0e
    4684:	b5 01       	movw	r22, r10
    4686:	a4 01       	movw	r20, r8
    4688:	0e 94 03 0c 	call	0x1806	; 0x1806 <remove_chain>
    468c:	18 c0       	rjmp	.+48     	; 0x46be <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    468e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4690:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    4692:	80 e1       	ldi	r24, 0x10	; 16
    4694:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    4696:	16 8a       	std	Z+22, r1	; 0x16
    4698:	17 8a       	std	Z+23, r1	; 0x17
    469a:	10 8e       	std	Z+24, r1	; 0x18
    469c:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    469e:	38 a5       	ldd	r19, Y+40	; 0x28
    46a0:	32 8f       	std	Z+26, r19	; 0x1a
    46a2:	8f a1       	ldd	r24, Y+39	; 0x27
    46a4:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    46a6:	2e a1       	ldd	r18, Y+38	; 0x26
    46a8:	24 8b       	std	Z+20, r18	; 0x14
    46aa:	3d a1       	ldd	r19, Y+37	; 0x25
    46ac:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    46ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    46b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    46b6:	cf 01       	movw	r24, r30
    46b8:	0e 94 9e 09 	call	0x133c	; 0x133c <sync>
    46bc:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    46be:	81 2f       	mov	r24, r17
    46c0:	a8 96       	adiw	r28, 0x28	; 40
    46c2:	cd bf       	out	0x3d, r28	; 61
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	ef 90       	pop	r14
    46d2:	df 90       	pop	r13
    46d4:	cf 90       	pop	r12
    46d6:	bf 90       	pop	r11
    46d8:	af 90       	pop	r10
    46da:	9f 90       	pop	r9
    46dc:	8f 90       	pop	r8
    46de:	7f 90       	pop	r7
    46e0:	6f 90       	pop	r6
    46e2:	5f 90       	pop	r5
    46e4:	4f 90       	pop	r4
    46e6:	3f 90       	pop	r3
    46e8:	2f 90       	pop	r2
    46ea:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    46ec:	11 e0       	ldi	r17, 0x01	; 1
    46ee:	e7 cf       	rjmp	.-50     	; 0x46be <f_mkdir+0x2c0>

000046f0 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    46f0:	ef 92       	push	r14
    46f2:	ff 92       	push	r15
    46f4:	0f 93       	push	r16
    46f6:	1f 93       	push	r17
    46f8:	df 93       	push	r29
    46fa:	cf 93       	push	r28
    46fc:	cd b7       	in	r28, 0x3d	; 61
    46fe:	de b7       	in	r29, 0x3e	; 62
    4700:	a4 97       	sbiw	r28, 0x24	; 36
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	8b a3       	std	Y+35, r24	; 0x23
    4708:	9c a3       	std	Y+36, r25	; 0x24
    470a:	e6 2e       	mov	r14, r22
    470c:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    470e:	8e 01       	movw	r16, r28
    4710:	03 5f       	subi	r16, 0xF3	; 243
    4712:	1f 4f       	sbci	r17, 0xFF	; 255
    4714:	ce 01       	movw	r24, r28
    4716:	83 96       	adiw	r24, 0x23	; 35
    4718:	b8 01       	movw	r22, r16
    471a:	41 e0       	ldi	r20, 0x01	; 1
    471c:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
	if (res == FR_OK) {
    4720:	88 23       	and	r24, r24
    4722:	09 f5       	brne	.+66     	; 0x4766 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    4724:	ce 01       	movw	r24, r28
    4726:	01 96       	adiw	r24, 0x01	; 1
    4728:	89 a3       	std	Y+33, r24	; 0x21
    472a:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    472c:	6b a1       	ldd	r22, Y+35	; 0x23
    472e:	7c a1       	ldd	r23, Y+36	; 0x24
    4730:	c8 01       	movw	r24, r16
    4732:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4736:	88 23       	and	r24, r24
    4738:	b1 f4       	brne	.+44     	; 0x4766 <f_chmod+0x76>
			dir = dj.dir;
    473a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    473c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    473e:	30 97       	sbiw	r30, 0x00	; 0
    4740:	11 f4       	brne	.+4      	; 0x4746 <f_chmod+0x56>
    4742:	86 e0       	ldi	r24, 0x06	; 6
    4744:	10 c0       	rjmp	.+32     	; 0x4766 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4746:	9f 2d       	mov	r25, r15
    4748:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    474a:	89 2f       	mov	r24, r25
    474c:	80 95       	com	r24
    474e:	23 85       	ldd	r18, Z+11	; 0x0b
    4750:	82 23       	and	r24, r18
    4752:	9e 21       	and	r25, r14
    4754:	89 2b       	or	r24, r25
    4756:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    4758:	ed 85       	ldd	r30, Y+13	; 0x0d
    475a:	fe 85       	ldd	r31, Y+14	; 0x0e
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4760:	cf 01       	movw	r24, r30
    4762:	0e 94 9e 09 	call	0x133c	; 0x133c <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4766:	a4 96       	adiw	r28, 0x24	; 36
    4768:	cd bf       	out	0x3d, r28	; 61
    476a:	de bf       	out	0x3e, r29	; 62
    476c:	cf 91       	pop	r28
    476e:	df 91       	pop	r29
    4770:	1f 91       	pop	r17
    4772:	0f 91       	pop	r16
    4774:	ff 90       	pop	r15
    4776:	ef 90       	pop	r14
    4778:	08 95       	ret

0000477a <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    477a:	ef 92       	push	r14
    477c:	ff 92       	push	r15
    477e:	0f 93       	push	r16
    4780:	1f 93       	push	r17
    4782:	df 93       	push	r29
    4784:	cf 93       	push	r28
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	a4 97       	sbiw	r28, 0x24	; 36
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	de bf       	out	0x3e, r29	; 62
    4790:	8b a3       	std	Y+35, r24	; 0x23
    4792:	9c a3       	std	Y+36, r25	; 0x24
    4794:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4796:	4d e0       	ldi	r20, 0x0D	; 13
    4798:	e4 2e       	mov	r14, r20
    479a:	f1 2c       	mov	r15, r1
    479c:	ec 0e       	add	r14, r28
    479e:	fd 1e       	adc	r15, r29
    47a0:	ce 01       	movw	r24, r28
    47a2:	83 96       	adiw	r24, 0x23	; 35
    47a4:	b7 01       	movw	r22, r14
    47a6:	41 e0       	ldi	r20, 0x01	; 1
    47a8:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
	if (res == FR_OK) {
    47ac:	88 23       	and	r24, r24
    47ae:	41 f5       	brne	.+80     	; 0x4800 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    47b0:	ce 01       	movw	r24, r28
    47b2:	01 96       	adiw	r24, 0x01	; 1
    47b4:	89 a3       	std	Y+33, r24	; 0x21
    47b6:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    47b8:	6b a1       	ldd	r22, Y+35	; 0x23
    47ba:	7c a1       	ldd	r23, Y+36	; 0x24
    47bc:	c7 01       	movw	r24, r14
    47be:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    47c2:	88 23       	and	r24, r24
    47c4:	e9 f4       	brne	.+58     	; 0x4800 <f_utime+0x86>
			dir = dj.dir;
    47c6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47c8:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    47ca:	30 97       	sbiw	r30, 0x00	; 0
    47cc:	11 f4       	brne	.+4      	; 0x47d2 <f_utime+0x58>
    47ce:	86 e0       	ldi	r24, 0x06	; 6
    47d0:	17 c0       	rjmp	.+46     	; 0x4800 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    47d2:	d8 01       	movw	r26, r16
    47d4:	16 96       	adiw	r26, 0x06	; 6
    47d6:	8c 91       	ld	r24, X
    47d8:	16 97       	sbiw	r26, 0x06	; 6
    47da:	86 8b       	std	Z+22, r24	; 0x16
    47dc:	17 96       	adiw	r26, 0x07	; 7
    47de:	8c 91       	ld	r24, X
    47e0:	17 97       	sbiw	r26, 0x07	; 7
    47e2:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    47e4:	14 96       	adiw	r26, 0x04	; 4
    47e6:	8c 91       	ld	r24, X
    47e8:	14 97       	sbiw	r26, 0x04	; 4
    47ea:	80 8f       	std	Z+24, r24	; 0x18
    47ec:	15 96       	adiw	r26, 0x05	; 5
    47ee:	8c 91       	ld	r24, X
    47f0:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    47f2:	ed 85       	ldd	r30, Y+13	; 0x0d
    47f4:	fe 85       	ldd	r31, Y+14	; 0x0e
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    47fa:	cf 01       	movw	r24, r30
    47fc:	0e 94 9e 09 	call	0x133c	; 0x133c <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4800:	a4 96       	adiw	r28, 0x24	; 36
    4802:	cd bf       	out	0x3d, r28	; 61
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	cf 91       	pop	r28
    4808:	df 91       	pop	r29
    480a:	1f 91       	pop	r17
    480c:	0f 91       	pop	r16
    480e:	ff 90       	pop	r15
    4810:	ef 90       	pop	r14
    4812:	08 95       	ret

00004814 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    4814:	cf 92       	push	r12
    4816:	df 92       	push	r13
    4818:	ef 92       	push	r14
    481a:	ff 92       	push	r15
    481c:	0f 93       	push	r16
    481e:	1f 93       	push	r17
    4820:	df 93       	push	r29
    4822:	cf 93       	push	r28
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	cf 54       	subi	r28, 0x4F	; 79
    482a:	d0 40       	sbci	r29, 0x00	; 0
    482c:	cd bf       	out	0x3d, r28	; 61
    482e:	de bf       	out	0x3e, r29	; 62
    4830:	8e 01       	movw	r16, r28
    4832:	02 5b       	subi	r16, 0xB2	; 178
    4834:	1f 4f       	sbci	r17, 0xFF	; 255
    4836:	d8 01       	movw	r26, r16
    4838:	8d 93       	st	X+, r24
    483a:	9c 93       	st	X, r25
    483c:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    483e:	ce 01       	movw	r24, r28
    4840:	01 96       	adiw	r24, 0x01	; 1
    4842:	8e ab       	std	Y+54, r24	; 0x36
    4844:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    4846:	a2 e2       	ldi	r26, 0x22	; 34
    4848:	ea 2e       	mov	r14, r26
    484a:	f1 2c       	mov	r15, r1
    484c:	ec 0e       	add	r14, r28
    484e:	fd 1e       	adc	r15, r29
    4850:	c8 01       	movw	r24, r16
    4852:	b7 01       	movw	r22, r14
    4854:	41 e0       	ldi	r20, 0x01	; 1
    4856:	0e 94 38 13 	call	0x2670	; 0x2670 <chk_mounted>
	if (res == FR_OK) {
    485a:	88 23       	and	r24, r24
    485c:	09 f0       	breq	.+2      	; 0x4860 <f_rename+0x4c>
    485e:	f4 c0       	rjmp	.+488    	; 0x4a48 <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4860:	8a a1       	ldd	r24, Y+34	; 0x22
    4862:	9b a1       	ldd	r25, Y+35	; 0x23
    4864:	88 af       	std	Y+56, r24	; 0x38
    4866:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    4868:	f8 01       	movw	r30, r16
    486a:	60 81       	ld	r22, Z
    486c:	71 81       	ldd	r23, Z+1	; 0x01
    486e:	c7 01       	movw	r24, r14
    4870:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4874:	88 23       	and	r24, r24
    4876:	09 f0       	breq	.+2      	; 0x487a <f_rename+0x66>
    4878:	e7 c0       	rjmp	.+462    	; 0x4a48 <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    487a:	8c a9       	ldd	r24, Y+52	; 0x34
    487c:	9d a9       	ldd	r25, Y+53	; 0x35
    487e:	00 97       	sbiw	r24, 0x00	; 0
    4880:	11 f4       	brne	.+4      	; 0x4886 <f_rename+0x72>
    4882:	84 e0       	ldi	r24, 0x04	; 4
    4884:	e1 c0       	rjmp	.+450    	; 0x4a48 <f_rename+0x234>
    4886:	dc 01       	movw	r26, r24
    4888:	fe 01       	movw	r30, r28
    488a:	3d 96       	adiw	r30, 0x0d	; 13
    488c:	04 c0       	rjmp	.+8      	; 0x4896 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    488e:	1a 96       	adiw	r26, 0x0a	; 10
    4890:	8c 91       	ld	r24, X
    4892:	1a 97       	sbiw	r26, 0x0a	; 10
    4894:	81 93       	st	Z+, r24
    4896:	11 96       	adiw	r26, 0x01	; 1
    4898:	ee 15       	cp	r30, r14
    489a:	ff 05       	cpc	r31, r15
    489c:	c1 f7       	brne	.-16     	; 0x488e <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    489e:	de 01       	movw	r26, r28
    48a0:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    48a2:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    48a4:	9d 01       	movw	r18, r26
    48a6:	02 c0       	rjmp	.+4      	; 0x48ac <f_rename+0x98>
    48a8:	81 91       	ld	r24, Z+
    48aa:	8d 93       	st	X+, r24
    48ac:	e2 17       	cp	r30, r18
    48ae:	f3 07       	cpc	r31, r19
    48b0:	d9 f7       	brne	.-10     	; 0x48a8 <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    48b2:	8e 01       	movw	r16, r28
    48b4:	08 5c       	subi	r16, 0xC8	; 200
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	c8 01       	movw	r24, r16
    48ba:	b6 01       	movw	r22, r12
    48bc:	0e 94 5f 11 	call	0x22be	; 0x22be <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    48c0:	88 23       	and	r24, r24
    48c2:	11 f4       	brne	.+4      	; 0x48c8 <f_rename+0xb4>
    48c4:	88 e0       	ldi	r24, 0x08	; 8
    48c6:	c0 c0       	rjmp	.+384    	; 0x4a48 <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    48c8:	84 30       	cpi	r24, 0x04	; 4
    48ca:	09 f0       	breq	.+2      	; 0x48ce <f_rename+0xba>
    48cc:	bd c0       	rjmp	.+378    	; 0x4a48 <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    48ce:	c8 01       	movw	r24, r16
    48d0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <dir_register>
		if (res == FR_OK) {
    48d4:	88 23       	and	r24, r24
    48d6:	09 f0       	breq	.+2      	; 0x48da <f_rename+0xc6>
    48d8:	b7 c0       	rjmp	.+366    	; 0x4a48 <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    48da:	fe 01       	movw	r30, r28
    48dc:	e6 5b       	subi	r30, 0xB6	; 182
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	40 81       	ld	r20, Z
    48e2:	51 81       	ldd	r21, Z+1	; 0x01
    48e4:	da 01       	movw	r26, r20
    48e6:	fe 01       	movw	r30, r28
    48e8:	3f 96       	adiw	r30, 0x0f	; 15
    48ea:	04 c0       	rjmp	.+8      	; 0x48f4 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    48ec:	81 91       	ld	r24, Z+
    48ee:	1c 96       	adiw	r26, 0x0c	; 12
    48f0:	8c 93       	st	X, r24
    48f2:	1c 97       	sbiw	r26, 0x0c	; 12
    48f4:	11 96       	adiw	r26, 0x01	; 1
    48f6:	ee 15       	cp	r30, r14
    48f8:	ff 05       	cpc	r31, r15
    48fa:	c1 f7       	brne	.-16     	; 0x48ec <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    48fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fe:	80 62       	ori	r24, 0x20	; 32
    4900:	da 01       	movw	r26, r20
    4902:	1b 96       	adiw	r26, 0x0b	; 11
    4904:	8c 93       	st	X, r24
    4906:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    4908:	ea a1       	ldd	r30, Y+34	; 0x22
    490a:	fb a1       	ldd	r31, Y+35	; 0x23
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4910:	1b 96       	adiw	r26, 0x0b	; 11
    4912:	8c 91       	ld	r24, X
    4914:	1b 97       	sbiw	r26, 0x0b	; 11
    4916:	84 ff       	sbrs	r24, 4
    4918:	8b c0       	rjmp	.+278    	; 0x4a30 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    491a:	c8 ac       	ldd	r12, Y+56	; 0x38
    491c:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    491e:	5a 96       	adiw	r26, 0x1a	; 26
    4920:	2c 91       	ld	r18, X
    4922:	5a 97       	sbiw	r26, 0x1a	; 26
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	54 96       	adiw	r26, 0x14	; 20
    4928:	8c 91       	ld	r24, X
    492a:	54 97       	sbiw	r26, 0x14	; 20
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	28 2b       	or	r18, r24
    4930:	39 2b       	or	r19, r25
    4932:	55 96       	adiw	r26, 0x15	; 21
    4934:	9c 91       	ld	r25, X
    4936:	55 97       	sbiw	r26, 0x15	; 21
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	28 2b       	or	r18, r24
    493c:	39 2b       	or	r19, r25
    493e:	5b 96       	adiw	r26, 0x1b	; 27
    4940:	9c 91       	ld	r25, X
    4942:	80 e0       	ldi	r24, 0x00	; 0
    4944:	28 2b       	or	r18, r24
    4946:	39 2b       	or	r19, r25
    4948:	79 01       	movw	r14, r18
    494a:	00 e0       	ldi	r16, 0x00	; 0
    494c:	10 e0       	ldi	r17, 0x00	; 0
    494e:	8e ef       	ldi	r24, 0xFE	; 254
    4950:	9f ef       	ldi	r25, 0xFF	; 255
    4952:	af ef       	ldi	r26, 0xFF	; 255
    4954:	bf ef       	ldi	r27, 0xFF	; 255
    4956:	e8 0e       	add	r14, r24
    4958:	f9 1e       	adc	r15, r25
    495a:	0a 1f       	adc	r16, r26
    495c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    495e:	f6 01       	movw	r30, r12
    4960:	82 8d       	ldd	r24, Z+26	; 0x1a
    4962:	93 8d       	ldd	r25, Z+27	; 0x1b
    4964:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4966:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4968:	02 97       	sbiw	r24, 0x02	; 2
    496a:	a1 09       	sbc	r26, r1
    496c:	b1 09       	sbc	r27, r1
    496e:	e8 16       	cp	r14, r24
    4970:	f9 06       	cpc	r15, r25
    4972:	0a 07       	cpc	r16, r26
    4974:	1b 07       	cpc	r17, r27
    4976:	08 f0       	brcs	.+2      	; 0x497a <f_rename+0x166>
    4978:	66 c0       	rjmp	.+204    	; 0x4a46 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    497a:	22 81       	ldd	r18, Z+2	; 0x02
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	40 e0       	ldi	r20, 0x00	; 0
    4980:	50 e0       	ldi	r21, 0x00	; 0
    4982:	c8 01       	movw	r24, r16
    4984:	b7 01       	movw	r22, r14
    4986:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    498a:	ab 01       	movw	r20, r22
    498c:	bc 01       	movw	r22, r24
    498e:	f6 01       	movw	r30, r12
    4990:	86 a1       	ldd	r24, Z+38	; 0x26
    4992:	97 a1       	ldd	r25, Z+39	; 0x27
    4994:	a0 a5       	ldd	r26, Z+40	; 0x28
    4996:	b1 a5       	ldd	r27, Z+41	; 0x29
    4998:	48 0f       	add	r20, r24
    499a:	59 1f       	adc	r21, r25
    499c:	6a 1f       	adc	r22, r26
    499e:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    49a0:	41 15       	cp	r20, r1
    49a2:	51 05       	cpc	r21, r1
    49a4:	61 05       	cpc	r22, r1
    49a6:	71 05       	cpc	r23, r1
    49a8:	09 f4       	brne	.+2      	; 0x49ac <f_rename+0x198>
    49aa:	4d c0       	rjmp	.+154    	; 0x4a46 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    49ac:	c6 01       	movw	r24, r12
    49ae:	0e 94 25 09 	call	0x124a	; 0x124a <move_window>
					dir = dj_new.fs->win+32;
    49b2:	a8 ad       	ldd	r26, Y+56	; 0x38
    49b4:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    49b6:	88 23       	and	r24, r24
    49b8:	09 f0       	breq	.+2      	; 0x49bc <f_rename+0x1a8>
    49ba:	46 c0       	rjmp	.+140    	; 0x4a48 <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    49bc:	bd 01       	movw	r22, r26
    49be:	62 5b       	subi	r22, 0xB2	; 178
    49c0:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    49c2:	fb 01       	movw	r30, r22
    49c4:	81 81       	ldd	r24, Z+1	; 0x01
    49c6:	8e 32       	cpi	r24, 0x2E	; 46
    49c8:	99 f5       	brne	.+102    	; 0x4a30 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    49ca:	8c 91       	ld	r24, X
    49cc:	83 30       	cpi	r24, 0x03	; 3
    49ce:	b1 f4       	brne	.+44     	; 0x49fc <f_rename+0x1e8>
    49d0:	fe 01       	movw	r30, r28
    49d2:	fe 96       	adiw	r30, 0x3e	; 62
    49d4:	20 81       	ld	r18, Z
    49d6:	31 81       	ldd	r19, Z+1	; 0x01
    49d8:	42 81       	ldd	r20, Z+2	; 0x02
    49da:	53 81       	ldd	r21, Z+3	; 0x03
    49dc:	92 96       	adiw	r26, 0x22	; 34
    49de:	8d 91       	ld	r24, X+
    49e0:	9d 91       	ld	r25, X+
    49e2:	0d 90       	ld	r0, X+
    49e4:	bc 91       	ld	r27, X
    49e6:	a0 2d       	mov	r26, r0
    49e8:	28 17       	cp	r18, r24
    49ea:	39 07       	cpc	r19, r25
    49ec:	4a 07       	cpc	r20, r26
    49ee:	5b 07       	cpc	r21, r27
    49f0:	29 f4       	brne	.+10     	; 0x49fc <f_rename+0x1e8>
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	40 e0       	ldi	r20, 0x00	; 0
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	06 c0       	rjmp	.+12     	; 0x4a08 <f_rename+0x1f4>
    49fc:	fe 01       	movw	r30, r28
    49fe:	fe 96       	adiw	r30, 0x3e	; 62
    4a00:	20 81       	ld	r18, Z
    4a02:	31 81       	ldd	r19, Z+1	; 0x01
    4a04:	42 81       	ldd	r20, Z+2	; 0x02
    4a06:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4a08:	db 01       	movw	r26, r22
    4a0a:	5a 96       	adiw	r26, 0x1a	; 26
    4a0c:	2c 93       	st	X, r18
    4a0e:	5a 97       	sbiw	r26, 0x1a	; 26
    4a10:	83 2f       	mov	r24, r19
    4a12:	99 27       	eor	r25, r25
    4a14:	5b 96       	adiw	r26, 0x1b	; 27
    4a16:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4a18:	ca 01       	movw	r24, r20
    4a1a:	aa 27       	eor	r26, r26
    4a1c:	bb 27       	eor	r27, r27
    4a1e:	fb 01       	movw	r30, r22
    4a20:	84 8b       	std	Z+20, r24	; 0x14
    4a22:	89 2f       	mov	r24, r25
    4a24:	99 27       	eor	r25, r25
    4a26:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4a28:	e8 ad       	ldd	r30, Y+56	; 0x38
    4a2a:	f9 ad       	ldd	r31, Y+57	; 0x39
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4a30:	ce 01       	movw	r24, r28
    4a32:	82 96       	adiw	r24, 0x22	; 34
    4a34:	0e 94 b2 10 	call	0x2164	; 0x2164 <dir_remove>
				if (res == FR_OK)
    4a38:	88 23       	and	r24, r24
    4a3a:	31 f4       	brne	.+12     	; 0x4a48 <f_rename+0x234>
					res = sync(dj_old.fs);
    4a3c:	8a a1       	ldd	r24, Y+34	; 0x22
    4a3e:	9b a1       	ldd	r25, Y+35	; 0x23
    4a40:	0e 94 9e 09 	call	0x133c	; 0x133c <sync>
    4a44:	01 c0       	rjmp	.+2      	; 0x4a48 <f_rename+0x234>
    4a46:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4a48:	c1 5b       	subi	r28, 0xB1	; 177
    4a4a:	df 4f       	sbci	r29, 0xFF	; 255
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	de bf       	out	0x3e, r29	; 62
    4a50:	cf 91       	pop	r28
    4a52:	df 91       	pop	r29
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	ff 90       	pop	r15
    4a5a:	ef 90       	pop	r14
    4a5c:	df 90       	pop	r13
    4a5e:	cf 90       	pop	r12
    4a60:	08 95       	ret

00004a62 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4a62:	2f 92       	push	r2
    4a64:	3f 92       	push	r3
    4a66:	4f 92       	push	r4
    4a68:	5f 92       	push	r5
    4a6a:	6f 92       	push	r6
    4a6c:	7f 92       	push	r7
    4a6e:	8f 92       	push	r8
    4a70:	9f 92       	push	r9
    4a72:	af 92       	push	r10
    4a74:	bf 92       	push	r11
    4a76:	cf 92       	push	r12
    4a78:	df 92       	push	r13
    4a7a:	ef 92       	push	r14
    4a7c:	ff 92       	push	r15
    4a7e:	0f 93       	push	r16
    4a80:	1f 93       	push	r17
    4a82:	df 93       	push	r29
    4a84:	cf 93       	push	r28
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	a4 97       	sbiw	r28, 0x24	; 36
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	de bf       	out	0x3e, r29	; 62
    4a90:	68 a3       	std	Y+32, r22	; 0x20
    4a92:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4a94:	82 30       	cpi	r24, 0x02	; 2
    4a96:	10 f0       	brcs	.+4      	; 0x4a9c <f_mkfs+0x3a>
    4a98:	8b e0       	ldi	r24, 0x0B	; 11
    4a9a:	e2 c4       	rjmp	.+2500   	; 0x5460 <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4a9c:	28 a1       	ldd	r18, Y+32	; 0x20
    4a9e:	22 30       	cpi	r18, 0x02	; 2
    4aa0:	08 f0       	brcs	.+2      	; 0x4aa4 <f_mkfs+0x42>
    4aa2:	db c4       	rjmp	.+2486   	; 0x545a <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4aa4:	a8 2f       	mov	r26, r24
    4aa6:	b0 e0       	ldi	r27, 0x00	; 0
    4aa8:	aa 0f       	add	r26, r26
    4aaa:	bb 1f       	adc	r27, r27
    4aac:	fd 01       	movw	r30, r26
    4aae:	e6 56       	subi	r30, 0x66	; 102
    4ab0:	fe 4c       	sbci	r31, 0xCE	; 206
    4ab2:	c0 80       	ld	r12, Z
    4ab4:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4ab6:	c1 14       	cp	r12, r1
    4ab8:	d1 04       	cpc	r13, r1
    4aba:	11 f4       	brne	.+4      	; 0x4ac0 <f_mkfs+0x5e>
    4abc:	8c e0       	ldi	r24, 0x0C	; 12
    4abe:	d0 c4       	rjmp	.+2464   	; 0x5460 <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4ac0:	f6 01       	movw	r30, r12
    4ac2:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4ac4:	ab 5b       	subi	r26, 0xBB	; 187
    4ac6:	b6 4d       	sbci	r27, 0xD6	; 214
    4ac8:	fc 91       	ld	r31, X
    4aca:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4acc:	8f 2f       	mov	r24, r31
    4ace:	0e 94 74 05 	call	0xae8	; 0xae8 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4ad2:	80 ff       	sbrs	r24, 0
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <f_mkfs+0x78>
    4ad6:	83 e0       	ldi	r24, 0x03	; 3
    4ad8:	c3 c4       	rjmp	.+2438   	; 0x5460 <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4ada:	82 ff       	sbrs	r24, 2
    4adc:	02 c0       	rjmp	.+4      	; 0x4ae2 <f_mkfs+0x80>
    4ade:	8a e0       	ldi	r24, 0x0A	; 10
    4ae0:	bf c4       	rjmp	.+2430   	; 0x5460 <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4ae2:	89 89       	ldd	r24, Y+17	; 0x11
    4ae4:	61 e0       	ldi	r22, 0x01	; 1
    4ae6:	ae 01       	movw	r20, r28
    4ae8:	4f 5f       	subi	r20, 0xFF	; 255
    4aea:	5f 4f       	sbci	r21, 0xFF	; 255
    4aec:	0e 94 39 07 	call	0xe72	; 0xe72 <disk_ioctl>
    4af0:	88 23       	and	r24, r24
    4af2:	09 f0       	breq	.+2      	; 0x4af6 <f_mkfs+0x94>
    4af4:	b2 c4       	rjmp	.+2404   	; 0x545a <f_mkfs+0x9f8>
    4af6:	89 81       	ldd	r24, Y+1	; 0x01
    4af8:	9a 81       	ldd	r25, Y+2	; 0x02
    4afa:	ab 81       	ldd	r26, Y+3	; 0x03
    4afc:	bc 81       	ldd	r27, Y+4	; 0x04
    4afe:	80 3d       	cpi	r24, 0xD0	; 208
    4b00:	27 e0       	ldi	r18, 0x07	; 7
    4b02:	92 07       	cpc	r25, r18
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	a2 07       	cpc	r26, r18
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	b2 07       	cpc	r27, r18
    4b0c:	08 f4       	brcc	.+2      	; 0x4b10 <f_mkfs+0xae>
    4b0e:	a5 c4       	rjmp	.+2378   	; 0x545a <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4b10:	81 50       	subi	r24, 0x01	; 1
    4b12:	90 40       	sbci	r25, 0x00	; 0
    4b14:	a0 4d       	sbci	r26, 0xD0	; 208
    4b16:	b7 40       	sbci	r27, 0x07	; 7
    4b18:	40 f0       	brcs	.+16     	; 0x4b2a <f_mkfs+0xc8>
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	a0 ed       	ldi	r26, 0xD0	; 208
    4b20:	b7 e0       	ldi	r27, 0x07	; 7
    4b22:	89 83       	std	Y+1, r24	; 0x01
    4b24:	9a 83       	std	Y+2, r25	; 0x02
    4b26:	ab 83       	std	Y+3, r26	; 0x03
    4b28:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4b2a:	48 a1       	ldd	r20, Y+32	; 0x20
    4b2c:	44 23       	and	r20, r20
    4b2e:	29 f0       	breq	.+10     	; 0x4b3a <f_mkfs+0xd8>
    4b30:	1a 8e       	std	Y+26, r1	; 0x1a
    4b32:	1b 8e       	std	Y+27, r1	; 0x1b
    4b34:	1c 8e       	std	Y+28, r1	; 0x1c
    4b36:	1d 8e       	std	Y+29, r1	; 0x1d
    4b38:	08 c0       	rjmp	.+16     	; 0x4b4a <f_mkfs+0xe8>
    4b3a:	8f e3       	ldi	r24, 0x3F	; 63
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	a0 e0       	ldi	r26, 0x00	; 0
    4b40:	b0 e0       	ldi	r27, 0x00	; 0
    4b42:	8a 8f       	std	Y+26, r24	; 0x1a
    4b44:	9b 8f       	std	Y+27, r25	; 0x1b
    4b46:	ac 8f       	std	Y+28, r26	; 0x1c
    4b48:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4b4a:	89 80       	ldd	r8, Y+1	; 0x01
    4b4c:	9a 80       	ldd	r9, Y+2	; 0x02
    4b4e:	ab 80       	ldd	r10, Y+3	; 0x03
    4b50:	bc 80       	ldd	r11, Y+4	; 0x04
    4b52:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4b54:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4b56:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4b58:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4b5a:	82 1a       	sub	r8, r18
    4b5c:	93 0a       	sbc	r9, r19
    4b5e:	a4 0a       	sbc	r10, r20
    4b60:	b5 0a       	sbc	r11, r21
    4b62:	89 82       	std	Y+1, r8	; 0x01
    4b64:	9a 82       	std	Y+2, r9	; 0x02
    4b66:	ab 82       	std	Y+3, r10	; 0x03
    4b68:	bc 82       	std	Y+4, r11	; 0x04
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	92 e0       	ldi	r25, 0x02	; 2
    4b6e:	a0 e0       	ldi	r26, 0x00	; 0
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4b76:	73 01       	movw	r14, r6
    4b78:	00 e0       	ldi	r16, 0x00	; 0
    4b7a:	10 e0       	ldi	r17, 0x00	; 0
    4b7c:	09 c0       	rjmp	.+18     	; 0x4b90 <f_mkfs+0x12e>
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	aa 1f       	adc	r26, r26
    4b84:	bb 1f       	adc	r27, r27
    4b86:	2f 5f       	subi	r18, 0xFF	; 255
    4b88:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8a:	27 30       	cpi	r18, 0x07	; 7
    4b8c:	31 05       	cpc	r19, r1
    4b8e:	31 f0       	breq	.+12     	; 0x4b9c <f_mkfs+0x13a>
    4b90:	8e 15       	cp	r24, r14
    4b92:	9f 05       	cpc	r25, r15
    4b94:	a0 07       	cpc	r26, r16
    4b96:	b1 07       	cpc	r27, r17
    4b98:	91 f7       	brne	.-28     	; 0x4b7e <f_mkfs+0x11c>
    4b9a:	05 c0       	rjmp	.+10     	; 0x4ba6 <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4b9c:	8e 15       	cp	r24, r14
    4b9e:	9f 05       	cpc	r25, r15
    4ba0:	a0 07       	cpc	r26, r16
    4ba2:	b1 07       	cpc	r27, r17
    4ba4:	19 f4       	brne	.+6      	; 0x4bac <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4ba6:	61 14       	cp	r6, r1
    4ba8:	71 04       	cpc	r7, r1
    4baa:	11 f5       	brne	.+68     	; 0x4bf0 <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4bac:	e2 ea       	ldi	r30, 0xA2	; 162
    4bae:	f0 e3       	ldi	r31, 0x30	; 48
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	40 e0       	ldi	r20, 0x00	; 0
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	81 91       	ld	r24, Z+
    4bba:	91 91       	ld	r25, Z+
    4bbc:	a1 91       	ld	r26, Z+
    4bbe:	b1 91       	ld	r27, Z+
    4bc0:	b9 01       	movw	r22, r18
    4bc2:	14 2f       	mov	r17, r20
    4bc4:	05 2f       	mov	r16, r21
    4bc6:	2f 5f       	subi	r18, 0xFF	; 255
    4bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bca:	4f 4f       	sbci	r20, 0xFF	; 255
    4bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bce:	88 16       	cp	r8, r24
    4bd0:	99 06       	cpc	r9, r25
    4bd2:	aa 06       	cpc	r10, r26
    4bd4:	bb 06       	cpc	r11, r27
    4bd6:	80 f3       	brcs	.-32     	; 0x4bb8 <f_mkfs+0x156>
    4bd8:	cb 01       	movw	r24, r22
    4bda:	6d 83       	std	Y+5, r22	; 0x05
    4bdc:	9e 83       	std	Y+6, r25	; 0x06
    4bde:	1f 83       	std	Y+7, r17	; 0x07
    4be0:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4be2:	fb 01       	movw	r30, r22
    4be4:	ee 0f       	add	r30, r30
    4be6:	ff 1f       	adc	r31, r31
    4be8:	e4 57       	subi	r30, 0x74	; 116
    4bea:	ff 4c       	sbci	r31, 0xCF	; 207
    4bec:	60 80       	ld	r6, Z
    4bee:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	63 16       	cp	r6, r19
    4bf4:	32 e0       	ldi	r19, 0x02	; 2
    4bf6:	73 06       	cpc	r7, r19
    4bf8:	18 f4       	brcc	.+6      	; 0x4c00 <f_mkfs+0x19e>
    4bfa:	61 2c       	mov	r6, r1
    4bfc:	f2 e0       	ldi	r31, 0x02	; 2
    4bfe:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4c00:	13 01       	movw	r2, r6
    4c02:	23 2c       	mov	r2, r3
    4c04:	33 24       	eor	r3, r3
    4c06:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4c08:	c1 01       	movw	r24, r2
    4c0a:	a0 e0       	ldi	r26, 0x00	; 0
    4c0c:	b0 e0       	ldi	r27, 0x00	; 0
    4c0e:	8d 87       	std	Y+13, r24	; 0x0d
    4c10:	9e 87       	std	Y+14, r25	; 0x0e
    4c12:	af 87       	std	Y+15, r26	; 0x0f
    4c14:	b8 8b       	std	Y+16, r27	; 0x10
    4c16:	c5 01       	movw	r24, r10
    4c18:	b4 01       	movw	r22, r8
    4c1a:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c1c:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c1e:	4f 85       	ldd	r20, Y+15	; 0x0f
    4c20:	58 89       	ldd	r21, Y+16	; 0x10
    4c22:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    4c26:	c9 01       	movw	r24, r18
    4c28:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4c2a:	85 3f       	cpi	r24, 0xF5	; 245
    4c2c:	ef e0       	ldi	r30, 0x0F	; 15
    4c2e:	9e 07       	cpc	r25, r30
    4c30:	e0 e0       	ldi	r30, 0x00	; 0
    4c32:	ae 07       	cpc	r26, r30
    4c34:	e0 e0       	ldi	r30, 0x00	; 0
    4c36:	be 07       	cpc	r27, r30
    4c38:	08 f4       	brcc	.+2      	; 0x4c3c <f_mkfs+0x1da>
    4c3a:	28 c4       	rjmp	.+2128   	; 0x548c <f_mkfs+0xa2a>
    4c3c:	f8 a1       	ldd	r31, Y+32	; 0x20
    4c3e:	2f 2f       	mov	r18, r31
    4c40:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4c42:	85 3f       	cpi	r24, 0xF5	; 245
    4c44:	4f ef       	ldi	r20, 0xFF	; 255
    4c46:	94 07       	cpc	r25, r20
    4c48:	40 e0       	ldi	r20, 0x00	; 0
    4c4a:	a4 07       	cpc	r26, r20
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	b4 07       	cpc	r27, r20
    4c50:	50 f5       	brcc	.+84     	; 0x4ca6 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4c52:	7c 01       	movw	r14, r24
    4c54:	8d 01       	movw	r16, r26
    4c56:	ee 0c       	add	r14, r14
    4c58:	ff 1c       	adc	r15, r15
    4c5a:	00 1f       	adc	r16, r16
    4c5c:	11 1f       	adc	r17, r17
    4c5e:	83 e0       	ldi	r24, 0x03	; 3
    4c60:	92 e0       	ldi	r25, 0x02	; 2
    4c62:	a0 e0       	ldi	r26, 0x00	; 0
    4c64:	b0 e0       	ldi	r27, 0x00	; 0
    4c66:	e8 0e       	add	r14, r24
    4c68:	f9 1e       	adc	r15, r25
    4c6a:	0a 1f       	adc	r16, r26
    4c6c:	1b 1f       	adc	r17, r27
    4c6e:	69 e0       	ldi	r22, 0x09	; 9
    4c70:	16 95       	lsr	r17
    4c72:	07 95       	ror	r16
    4c74:	f7 94       	ror	r15
    4c76:	e7 94       	ror	r14
    4c78:	6a 95       	dec	r22
    4c7a:	d1 f7       	brne	.-12     	; 0x4c70 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4c7c:	2f 5f       	subi	r18, 0xFF	; 255
    4c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c80:	c9 01       	movw	r24, r18
    4c82:	aa 27       	eor	r26, r26
    4c84:	97 fd       	sbrc	r25, 7
    4c86:	a0 95       	com	r26
    4c88:	ba 2f       	mov	r27, r26
    4c8a:	8e 8b       	std	Y+22, r24	; 0x16
    4c8c:	9f 8b       	std	Y+23, r25	; 0x17
    4c8e:	a8 8f       	std	Y+24, r26	; 0x18
    4c90:	b9 8f       	std	Y+25, r27	; 0x19
    4c92:	20 e2       	ldi	r18, 0x20	; 32
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	40 e0       	ldi	r20, 0x00	; 0
    4c98:	50 e0       	ldi	r21, 0x00	; 0
    4c9a:	2a 8b       	std	Y+18, r18	; 0x12
    4c9c:	3b 8b       	std	Y+19, r19	; 0x13
    4c9e:	4c 8b       	std	Y+20, r20	; 0x14
    4ca0:	5d 8b       	std	Y+21, r21	; 0x15
    4ca2:	32 e0       	ldi	r19, 0x02	; 2
    4ca4:	2a c0       	rjmp	.+84     	; 0x4cfa <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4ca6:	7c 01       	movw	r14, r24
    4ca8:	8d 01       	movw	r16, r26
    4caa:	52 e0       	ldi	r21, 0x02	; 2
    4cac:	ee 0c       	add	r14, r14
    4cae:	ff 1c       	adc	r15, r15
    4cb0:	00 1f       	adc	r16, r16
    4cb2:	11 1f       	adc	r17, r17
    4cb4:	5a 95       	dec	r21
    4cb6:	d1 f7       	brne	.-12     	; 0x4cac <f_mkfs+0x24a>
    4cb8:	87 e0       	ldi	r24, 0x07	; 7
    4cba:	92 e0       	ldi	r25, 0x02	; 2
    4cbc:	a0 e0       	ldi	r26, 0x00	; 0
    4cbe:	b0 e0       	ldi	r27, 0x00	; 0
    4cc0:	e8 0e       	add	r14, r24
    4cc2:	f9 1e       	adc	r15, r25
    4cc4:	0a 1f       	adc	r16, r26
    4cc6:	1b 1f       	adc	r17, r27
    4cc8:	49 e0       	ldi	r20, 0x09	; 9
    4cca:	16 95       	lsr	r17
    4ccc:	07 95       	ror	r16
    4cce:	f7 94       	ror	r15
    4cd0:	e7 94       	ror	r14
    4cd2:	4a 95       	dec	r20
    4cd4:	d1 f7       	brne	.-12     	; 0x4cca <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4cd6:	81 e2       	ldi	r24, 0x21	; 33
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	82 1b       	sub	r24, r18
    4cdc:	93 0b       	sbc	r25, r19
    4cde:	9c 01       	movw	r18, r24
    4ce0:	44 27       	eor	r20, r20
    4ce2:	37 fd       	sbrc	r19, 7
    4ce4:	40 95       	com	r20
    4ce6:	54 2f       	mov	r21, r20
    4ce8:	2e 8b       	std	Y+22, r18	; 0x16
    4cea:	3f 8b       	std	Y+23, r19	; 0x17
    4cec:	48 8f       	std	Y+24, r20	; 0x18
    4cee:	59 8f       	std	Y+25, r21	; 0x19
    4cf0:	1a 8a       	std	Y+18, r1	; 0x12
    4cf2:	1b 8a       	std	Y+19, r1	; 0x13
    4cf4:	1c 8a       	std	Y+20, r1	; 0x14
    4cf6:	1d 8a       	std	Y+21, r1	; 0x15
    4cf8:	33 e0       	ldi	r19, 0x03	; 3
    4cfa:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4cfc:	89 89       	ldd	r24, Y+17	; 0x11
    4cfe:	63 e0       	ldi	r22, 0x03	; 3
    4d00:	ae 01       	movw	r20, r28
    4d02:	4b 5f       	subi	r20, 0xFB	; 251
    4d04:	5f 4f       	sbci	r21, 0xFF	; 255
    4d06:	0e 94 39 07 	call	0xe72	; 0xe72 <disk_ioctl>
    4d0a:	88 23       	and	r24, r24
    4d0c:	09 f0       	breq	.+2      	; 0x4d10 <f_mkfs+0x2ae>
    4d0e:	a5 c3       	rjmp	.+1866   	; 0x545a <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4d10:	8e 89       	ldd	r24, Y+22	; 0x16
    4d12:	9f 89       	ldd	r25, Y+23	; 0x17
    4d14:	a8 8d       	ldd	r26, Y+24	; 0x18
    4d16:	b9 8d       	ldd	r27, Y+25	; 0x19
    4d18:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4d1a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4d1c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4d1e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4d20:	82 0f       	add	r24, r18
    4d22:	93 1f       	adc	r25, r19
    4d24:	a4 1f       	adc	r26, r20
    4d26:	b5 1f       	adc	r27, r21
    4d28:	89 87       	std	Y+9, r24	; 0x09
    4d2a:	9a 87       	std	Y+10, r25	; 0x0a
    4d2c:	ab 87       	std	Y+11, r26	; 0x0b
    4d2e:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4d30:	2a 89       	ldd	r18, Y+18	; 0x12
    4d32:	3b 89       	ldd	r19, Y+19	; 0x13
    4d34:	4c 89       	ldd	r20, Y+20	; 0x14
    4d36:	5d 89       	ldd	r21, Y+21	; 0x15
    4d38:	2e 0d       	add	r18, r14
    4d3a:	3f 1d       	adc	r19, r15
    4d3c:	40 1f       	adc	r20, r16
    4d3e:	51 1f       	adc	r21, r17
    4d40:	28 0f       	add	r18, r24
    4d42:	39 1f       	adc	r19, r25
    4d44:	4a 1f       	adc	r20, r26
    4d46:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4d48:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d4c:	af 81       	ldd	r26, Y+7	; 0x07
    4d4e:	b8 85       	ldd	r27, Y+8	; 0x08
    4d50:	4c 01       	movw	r8, r24
    4d52:	5d 01       	movw	r10, r26
    4d54:	08 94       	sec
    4d56:	81 08       	sbc	r8, r1
    4d58:	91 08       	sbc	r9, r1
    4d5a:	a1 08       	sbc	r10, r1
    4d5c:	b1 08       	sbc	r11, r1
    4d5e:	82 0e       	add	r8, r18
    4d60:	93 1e       	adc	r9, r19
    4d62:	a4 1e       	adc	r10, r20
    4d64:	b5 1e       	adc	r11, r21
    4d66:	b0 95       	com	r27
    4d68:	a0 95       	com	r26
    4d6a:	90 95       	com	r25
    4d6c:	81 95       	neg	r24
    4d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d70:	af 4f       	sbci	r26, 0xFF	; 255
    4d72:	bf 4f       	sbci	r27, 0xFF	; 255
    4d74:	88 22       	and	r8, r24
    4d76:	99 22       	and	r9, r25
    4d78:	aa 22       	and	r10, r26
    4d7a:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4d7c:	27 01       	movw	r4, r14
    4d7e:	38 01       	movw	r6, r16
    4d80:	42 1a       	sub	r4, r18
    4d82:	53 0a       	sbc	r5, r19
    4d84:	64 0a       	sbc	r6, r20
    4d86:	75 0a       	sbc	r7, r21
    4d88:	48 0c       	add	r4, r8
    4d8a:	59 1c       	adc	r5, r9
    4d8c:	6a 1c       	adc	r6, r10
    4d8e:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4d90:	e9 80       	ldd	r14, Y+1	; 0x01
    4d92:	fa 80       	ldd	r15, Y+2	; 0x02
    4d94:	0b 81       	ldd	r16, Y+3	; 0x03
    4d96:	1c 81       	ldd	r17, Y+4	; 0x04
    4d98:	c8 01       	movw	r24, r16
    4d9a:	b7 01       	movw	r22, r14
    4d9c:	2e 89       	ldd	r18, Y+22	; 0x16
    4d9e:	3f 89       	ldd	r19, Y+23	; 0x17
    4da0:	48 8d       	ldd	r20, Y+24	; 0x18
    4da2:	59 8d       	ldd	r21, Y+25	; 0x19
    4da4:	62 1b       	sub	r22, r18
    4da6:	73 0b       	sbc	r23, r19
    4da8:	84 0b       	sbc	r24, r20
    4daa:	95 0b       	sbc	r25, r21
    4dac:	64 19       	sub	r22, r4
    4dae:	75 09       	sbc	r23, r5
    4db0:	86 09       	sbc	r24, r6
    4db2:	97 09       	sbc	r25, r7
    4db4:	2a 89       	ldd	r18, Y+18	; 0x12
    4db6:	3b 89       	ldd	r19, Y+19	; 0x13
    4db8:	4c 89       	ldd	r20, Y+20	; 0x14
    4dba:	5d 89       	ldd	r21, Y+21	; 0x15
    4dbc:	62 1b       	sub	r22, r18
    4dbe:	73 0b       	sbc	r23, r19
    4dc0:	84 0b       	sbc	r24, r20
    4dc2:	95 0b       	sbc	r25, r21
    4dc4:	2d 85       	ldd	r18, Y+13	; 0x0d
    4dc6:	3e 85       	ldd	r19, Y+14	; 0x0e
    4dc8:	4f 85       	ldd	r20, Y+15	; 0x0f
    4dca:	58 89       	ldd	r21, Y+16	; 0x10
    4dcc:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    4dd0:	29 a3       	std	Y+33, r18	; 0x21
    4dd2:	3a a3       	std	Y+34, r19	; 0x22
    4dd4:	4b a3       	std	Y+35, r20	; 0x23
    4dd6:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4dd8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4dda:	32 30       	cpi	r19, 0x02	; 2
    4ddc:	51 f4       	brne	.+20     	; 0x4df2 <f_mkfs+0x390>
    4dde:	89 a1       	ldd	r24, Y+33	; 0x21
    4de0:	9a a1       	ldd	r25, Y+34	; 0x22
    4de2:	ab a1       	ldd	r26, Y+35	; 0x23
    4de4:	bc a1       	ldd	r27, Y+36	; 0x24
    4de6:	85 5f       	subi	r24, 0xF5	; 245
    4de8:	9f 40       	sbci	r25, 0x0F	; 15
    4dea:	a0 40       	sbci	r26, 0x00	; 0
    4dec:	b0 40       	sbci	r27, 0x00	; 0
    4dee:	70 f4       	brcc	.+28     	; 0x4e0c <f_mkfs+0x3aa>
    4df0:	34 c3       	rjmp	.+1640   	; 0x545a <f_mkfs+0x9f8>
    4df2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4df4:	f3 30       	cpi	r31, 0x03	; 3
    4df6:	51 f4       	brne	.+20     	; 0x4e0c <f_mkfs+0x3aa>
    4df8:	29 a1       	ldd	r18, Y+33	; 0x21
    4dfa:	3a a1       	ldd	r19, Y+34	; 0x22
    4dfc:	4b a1       	ldd	r20, Y+35	; 0x23
    4dfe:	5c a1       	ldd	r21, Y+36	; 0x24
    4e00:	25 5f       	subi	r18, 0xF5	; 245
    4e02:	3f 4f       	sbci	r19, 0xFF	; 255
    4e04:	40 40       	sbci	r20, 0x00	; 0
    4e06:	50 40       	sbci	r21, 0x00	; 0
    4e08:	08 f4       	brcc	.+2      	; 0x4e0c <f_mkfs+0x3aa>
    4e0a:	27 c3       	rjmp	.+1614   	; 0x545a <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4e0c:	8d 82       	std	Y+5, r8	; 0x05
    4e0e:	9e 82       	std	Y+6, r9	; 0x06
    4e10:	af 82       	std	Y+7, r10	; 0x07
    4e12:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4e14:	98 a1       	ldd	r25, Y+32	; 0x20
    4e16:	99 23       	and	r25, r25
    4e18:	11 f0       	breq	.+4      	; 0x4e1e <f_mkfs+0x3bc>
    4e1a:	10 ef       	ldi	r17, 0xF0	; 240
    4e1c:	9c c0       	rjmp	.+312    	; 0x4f56 <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4e1e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4e20:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4e22:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4e24:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4e26:	4e 0d       	add	r20, r14
    4e28:	5f 1d       	adc	r21, r15
    4e2a:	60 1f       	adc	r22, r16
    4e2c:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4e2e:	3e e2       	ldi	r19, 0x2E	; 46
    4e30:	e3 2e       	mov	r14, r19
    4e32:	f1 2c       	mov	r15, r1
    4e34:	ec 0c       	add	r14, r12
    4e36:	fd 1c       	adc	r15, r13
    4e38:	f7 01       	movw	r30, r14
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	32 e0       	ldi	r19, 0x02	; 2
    4e3e:	01 c0       	rjmp	.+2      	; 0x4e42 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4e40:	11 92       	st	Z+, r1
    4e42:	21 50       	subi	r18, 0x01	; 1
    4e44:	30 40       	sbci	r19, 0x00	; 0
    4e46:	af ef       	ldi	r26, 0xFF	; 255
    4e48:	2f 3f       	cpi	r18, 0xFF	; 255
    4e4a:	3a 07       	cpc	r19, r26
    4e4c:	c9 f7       	brne	.-14     	; 0x4e40 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4e4e:	86 01       	movw	r16, r12
    4e50:	04 51       	subi	r16, 0x14	; 20
    4e52:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4e54:	80 e8       	ldi	r24, 0x80	; 128
    4e56:	f8 01       	movw	r30, r16
    4e58:	80 83       	st	Z, r24
    4e5a:	81 e0       	ldi	r24, 0x01	; 1
    4e5c:	81 83       	std	Z+1, r24	; 0x01
    4e5e:	82 83       	std	Z+2, r24	; 0x02
    4e60:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4e62:	40 30       	cpi	r20, 0x00	; 0
    4e64:	f4 e0       	ldi	r31, 0x04	; 4
    4e66:	5f 07       	cpc	r21, r31
    4e68:	fb ef       	ldi	r31, 0xFB	; 251
    4e6a:	6f 07       	cpc	r22, r31
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	7f 07       	cpc	r23, r31
    4e70:	b0 f4       	brcc	.+44     	; 0x4e9e <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4e72:	cb 01       	movw	r24, r22
    4e74:	ba 01       	movw	r22, r20
    4e76:	21 ec       	ldi	r18, 0xC1	; 193
    4e78:	3e e3       	ldi	r19, 0x3E	; 62
    4e7a:	40 e0       	ldi	r20, 0x00	; 0
    4e7c:	50 e0       	ldi	r21, 0x00	; 0
    4e7e:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    4e82:	c9 01       	movw	r24, r18
    4e84:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4e86:	f8 01       	movw	r30, r16
    4e88:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4e8a:	22 e0       	ldi	r18, 0x02	; 2
    4e8c:	b6 95       	lsr	r27
    4e8e:	a7 95       	ror	r26
    4e90:	97 95       	ror	r25
    4e92:	87 95       	ror	r24
    4e94:	2a 95       	dec	r18
    4e96:	d1 f7       	brne	.-12     	; 0x4e8c <f_mkfs+0x42a>
    4e98:	8f 63       	ori	r24, 0x3F	; 63
    4e9a:	86 83       	std	Z+6, r24	; 0x06
    4e9c:	07 c0       	rjmp	.+14     	; 0x4eac <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4e9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ea0:	d8 01       	movw	r26, r16
    4ea2:	16 96       	adiw	r26, 0x06	; 6
    4ea4:	8c 93       	st	X, r24
    4ea6:	16 97       	sbiw	r26, 0x06	; 6
    4ea8:	17 96       	adiw	r26, 0x07	; 7
    4eaa:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4eac:	8e ef       	ldi	r24, 0xFE	; 254
    4eae:	f8 01       	movw	r30, r16
    4eb0:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4eb2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4eb4:	f3 30       	cpi	r31, 0x03	; 3
    4eb6:	81 f0       	breq	.+32     	; 0x4ed8 <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebc:	ab 81       	ldd	r26, Y+3	; 0x03
    4ebe:	bc 81       	ldd	r27, Y+4	; 0x04
    4ec0:	80 50       	subi	r24, 0x00	; 0
    4ec2:	90 40       	sbci	r25, 0x00	; 0
    4ec4:	a1 40       	sbci	r26, 0x01	; 1
    4ec6:	b0 40       	sbci	r27, 0x00	; 0
    4ec8:	10 f0       	brcs	.+4      	; 0x4ece <f_mkfs+0x46c>
    4eca:	86 e0       	ldi	r24, 0x06	; 6
    4ecc:	01 c0       	rjmp	.+2      	; 0x4ed0 <f_mkfs+0x46e>
    4ece:	84 e0       	ldi	r24, 0x04	; 4
    4ed0:	d8 01       	movw	r26, r16
    4ed2:	14 96       	adiw	r26, 0x04	; 4
    4ed4:	8c 93       	st	X, r24
    4ed6:	03 c0       	rjmp	.+6      	; 0x4ede <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4ed8:	8c e0       	ldi	r24, 0x0C	; 12
    4eda:	f8 01       	movw	r30, r16
    4edc:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4ede:	8f e3       	ldi	r24, 0x3F	; 63
    4ee0:	d8 01       	movw	r26, r16
    4ee2:	18 96       	adiw	r26, 0x08	; 8
    4ee4:	8c 93       	st	X, r24
    4ee6:	18 97       	sbiw	r26, 0x08	; 8
    4ee8:	19 96       	adiw	r26, 0x09	; 9
    4eea:	1c 92       	st	X, r1
    4eec:	19 97       	sbiw	r26, 0x09	; 9
    4eee:	1a 96       	adiw	r26, 0x0a	; 10
    4ef0:	1c 92       	st	X, r1
    4ef2:	1a 97       	sbiw	r26, 0x0a	; 10
    4ef4:	1b 96       	adiw	r26, 0x0b	; 11
    4ef6:	1c 92       	st	X, r1
    4ef8:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	1c 96       	adiw	r26, 0x0c	; 12
    4efe:	8c 93       	st	X, r24
    4f00:	1c 97       	sbiw	r26, 0x0c	; 12
    4f02:	8a 81       	ldd	r24, Y+2	; 0x02
    4f04:	1d 96       	adiw	r26, 0x0d	; 13
    4f06:	8c 93       	st	X, r24
    4f08:	89 81       	ldd	r24, Y+1	; 0x01
    4f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0c:	ab 81       	ldd	r26, Y+3	; 0x03
    4f0e:	bc 81       	ldd	r27, Y+4	; 0x04
    4f10:	cd 01       	movw	r24, r26
    4f12:	aa 27       	eor	r26, r26
    4f14:	bb 27       	eor	r27, r27
    4f16:	f8 01       	movw	r30, r16
    4f18:	86 87       	std	Z+14, r24	; 0x0e
    4f1a:	89 81       	ldd	r24, Y+1	; 0x01
    4f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f1e:	ab 81       	ldd	r26, Y+3	; 0x03
    4f20:	bc 81       	ldd	r27, Y+4	; 0x04
    4f22:	8b 2f       	mov	r24, r27
    4f24:	99 27       	eor	r25, r25
    4f26:	aa 27       	eor	r26, r26
    4f28:	bb 27       	eor	r27, r27
    4f2a:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4f2c:	00 5c       	subi	r16, 0xC0	; 192
    4f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f30:	85 e5       	ldi	r24, 0x55	; 85
    4f32:	d8 01       	movw	r26, r16
    4f34:	8d 93       	st	X+, r24
    4f36:	fd 01       	movw	r30, r26
    4f38:	8a ea       	ldi	r24, 0xAA	; 170
    4f3a:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4f3c:	89 89       	ldd	r24, Y+17	; 0x11
    4f3e:	b7 01       	movw	r22, r14
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e0       	ldi	r20, 0x00	; 0
    4f46:	50 e0       	ldi	r21, 0x00	; 0
    4f48:	01 e0       	ldi	r16, 0x01	; 1
    4f4a:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    4f4e:	88 23       	and	r24, r24
    4f50:	09 f0       	breq	.+2      	; 0x4f54 <f_mkfs+0x4f2>
    4f52:	85 c2       	rjmp	.+1290   	; 0x545e <f_mkfs+0x9fc>
    4f54:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    4f56:	5e e2       	ldi	r21, 0x2E	; 46
    4f58:	e5 2e       	mov	r14, r21
    4f5a:	f1 2c       	mov	r15, r1
    4f5c:	ec 0c       	add	r14, r12
    4f5e:	fd 1c       	adc	r15, r13
    4f60:	f7 01       	movw	r30, r14
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	92 e0       	ldi	r25, 0x02	; 2
    4f66:	01 c0       	rjmp	.+2      	; 0x4f6a <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4f68:	11 92       	st	Z+, r1
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	bf ef       	ldi	r27, 0xFF	; 255
    4f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4f70:	9b 07       	cpc	r25, r27
    4f72:	d1 f7       	brne	.-12     	; 0x4f68 <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    4f74:	8b ee       	ldi	r24, 0xEB	; 235
    4f76:	f6 01       	movw	r30, r12
    4f78:	86 a7       	std	Z+46, r24	; 0x2e
    4f7a:	8e ef       	ldi	r24, 0xFE	; 254
    4f7c:	87 a7       	std	Z+47, r24	; 0x2f
    4f7e:	80 e9       	ldi	r24, 0x90	; 144
    4f80:	80 ab       	std	Z+48, r24	; 0x30
    4f82:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    4f84:	11 ae       	std	Z+57, r1	; 0x39
    4f86:	82 e0       	ldi	r24, 0x02	; 2
    4f88:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    4f8a:	2e 8e       	std	Y+30, r2	; 0x1e
    4f8c:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    4f8e:	2e 89       	ldd	r18, Y+22	; 0x16
    4f90:	24 af       	std	Z+60, r18	; 0x3c
    4f92:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    4f98:	8a 89       	ldd	r24, Y+18	; 0x12
    4f9a:	9b 89       	ldd	r25, Y+19	; 0x13
    4f9c:	ac 89       	ldd	r26, Y+20	; 0x14
    4f9e:	bd 89       	ldd	r27, Y+21	; 0x15
    4fa0:	44 e0       	ldi	r20, 0x04	; 4
    4fa2:	88 0f       	add	r24, r24
    4fa4:	99 1f       	adc	r25, r25
    4fa6:	aa 1f       	adc	r26, r26
    4fa8:	bb 1f       	adc	r27, r27
    4faa:	4a 95       	dec	r20
    4fac:	d1 f7       	brne	.-12     	; 0x4fa2 <f_mkfs+0x540>
    4fae:	87 af       	std	Z+63, r24	; 0x3f
    4fb0:	40 e4       	ldi	r20, 0x40	; 64
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	c4 0e       	add	r12, r20
    4fb6:	d5 1e       	adc	r13, r21
    4fb8:	89 2f       	mov	r24, r25
    4fba:	99 27       	eor	r25, r25
    4fbc:	d6 01       	movw	r26, r12
    4fbe:	8c 93       	st	X, r24
    4fc0:	e0 ec       	ldi	r30, 0xC0	; 192
    4fc2:	ff ef       	ldi	r31, 0xFF	; 255
    4fc4:	ce 0e       	add	r12, r30
    4fc6:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    4fc8:	89 81       	ldd	r24, Y+1	; 0x01
    4fca:	9a 81       	ldd	r25, Y+2	; 0x02
    4fcc:	ab 81       	ldd	r26, Y+3	; 0x03
    4fce:	bc 81       	ldd	r27, Y+4	; 0x04
    4fd0:	80 30       	cpi	r24, 0x00	; 0
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	9f 07       	cpc	r25, r31
    4fd6:	f1 e0       	ldi	r31, 0x01	; 1
    4fd8:	af 07       	cpc	r26, r31
    4fda:	f0 e0       	ldi	r31, 0x00	; 0
    4fdc:	bf 07       	cpc	r27, r31
    4fde:	60 f4       	brcc	.+24     	; 0x4ff8 <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    4fe0:	21 e4       	ldi	r18, 0x41	; 65
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	c2 0e       	add	r12, r18
    4fe6:	d3 1e       	adc	r13, r19
    4fe8:	f6 01       	movw	r30, r12
    4fea:	81 93       	st	Z+, r24
    4fec:	6f 01       	movw	r12, r30
    4fee:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff0:	80 83       	st	Z, r24
    4ff2:	2e eb       	ldi	r18, 0xBE	; 190
    4ff4:	3f ef       	ldi	r19, 0xFF	; 255
    4ff6:	1f c0       	rjmp	.+62     	; 0x5036 <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    4ff8:	4e e4       	ldi	r20, 0x4E	; 78
    4ffa:	50 e0       	ldi	r21, 0x00	; 0
    4ffc:	c4 0e       	add	r12, r20
    4ffe:	d5 1e       	adc	r13, r21
    5000:	f6 01       	movw	r30, r12
    5002:	81 93       	st	Z+, r24
    5004:	8a 81       	ldd	r24, Y+2	; 0x02
    5006:	df 01       	movw	r26, r30
    5008:	8d 93       	st	X+, r24
    500a:	6d 01       	movw	r12, r26
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	9a 81       	ldd	r25, Y+2	; 0x02
    5010:	ab 81       	ldd	r26, Y+3	; 0x03
    5012:	bc 81       	ldd	r27, Y+4	; 0x04
    5014:	cd 01       	movw	r24, r26
    5016:	aa 27       	eor	r26, r26
    5018:	bb 27       	eor	r27, r27
    501a:	f6 01       	movw	r30, r12
    501c:	81 93       	st	Z+, r24
    501e:	6f 01       	movw	r12, r30
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
    5024:	ab 81       	ldd	r26, Y+3	; 0x03
    5026:	bc 81       	ldd	r27, Y+4	; 0x04
    5028:	8b 2f       	mov	r24, r27
    502a:	99 27       	eor	r25, r25
    502c:	aa 27       	eor	r26, r26
    502e:	bb 27       	eor	r27, r27
    5030:	80 83       	st	Z, r24
    5032:	2f ea       	ldi	r18, 0xAF	; 175
    5034:	3f ef       	ldi	r19, 0xFF	; 255
    5036:	c2 0e       	add	r12, r18
    5038:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    503a:	43 e4       	ldi	r20, 0x43	; 67
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	c4 0e       	add	r12, r20
    5040:	d5 1e       	adc	r13, r21
    5042:	d6 01       	movw	r26, r12
    5044:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    5046:	e3 e0       	ldi	r30, 0x03	; 3
    5048:	f0 e0       	ldi	r31, 0x00	; 0
    504a:	ce 0e       	add	r12, r30
    504c:	df 1e       	adc	r13, r31
    504e:	8f e3       	ldi	r24, 0x3F	; 63
    5050:	d6 01       	movw	r26, r12
    5052:	8d 93       	st	X+, r24
    5054:	fd 01       	movw	r30, r26
    5056:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    5058:	8f ef       	ldi	r24, 0xFF	; 255
    505a:	df 01       	movw	r26, r30
    505c:	8d 93       	st	X+, r24
    505e:	fd 01       	movw	r30, r26
    5060:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    5062:	df 01       	movw	r26, r30
    5064:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5066:	ed 93       	st	X+, r30
    5068:	1d 92       	st	X+, r1
    506a:	fd 01       	movw	r30, r26
    506c:	11 92       	st	Z+, r1
    506e:	6f 01       	movw	r12, r30
    5070:	10 82       	st	Z, r1
    5072:	23 eb       	ldi	r18, 0xB3	; 179
    5074:	3f ef       	ldi	r19, 0xFF	; 255
    5076:	c2 0e       	add	r12, r18
    5078:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    507a:	1d 82       	std	Y+5, r1	; 0x05
    507c:	1e 82       	std	Y+6, r1	; 0x06
    507e:	1f 82       	std	Y+7, r1	; 0x07
    5080:	18 86       	std	Y+8, r1	; 0x08
    5082:	b6 01       	movw	r22, r12
    5084:	6b 5a       	subi	r22, 0xAB	; 171
    5086:	7f 4f       	sbci	r23, 0xFF	; 255
    5088:	85 2d       	mov	r24, r5
    508a:	99 27       	eor	r25, r25
    508c:	d6 01       	movw	r26, r12
    508e:	ae 5a       	subi	r26, 0xAE	; 174
    5090:	bf 4f       	sbci	r27, 0xFF	; 255
    5092:	96 01       	movw	r18, r12
    5094:	2c 5a       	subi	r18, 0xAC	; 172
    5096:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    5098:	4f 8d       	ldd	r20, Y+31	; 0x1f
    509a:	43 30       	cpi	r20, 0x03	; 3
    509c:	41 f1       	breq	.+80     	; 0x50ee <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    509e:	fb 01       	movw	r30, r22
    50a0:	10 82       	st	Z, r1
    50a2:	46 e5       	ldi	r20, 0x56	; 86
    50a4:	50 e0       	ldi	r21, 0x00	; 0
    50a6:	c4 0e       	add	r12, r20
    50a8:	d5 1e       	adc	r13, r21
    50aa:	f6 01       	movw	r30, r12
    50ac:	11 92       	st	Z+, r1
    50ae:	11 92       	st	Z+, r1
    50b0:	6f 01       	movw	r12, r30
    50b2:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    50b4:	4c ee       	ldi	r20, 0xEC	; 236
    50b6:	5f ef       	ldi	r21, 0xFF	; 255
    50b8:	c4 0e       	add	r12, r20
    50ba:	d5 1e       	adc	r13, r21
    50bc:	f6 01       	movw	r30, r12
    50be:	41 92       	st	Z+, r4
    50c0:	6f 01       	movw	r12, r30
    50c2:	80 83       	st	Z, r24
    50c4:	4b eb       	ldi	r20, 0xBB	; 187
    50c6:	5f ef       	ldi	r21, 0xFF	; 255
    50c8:	c4 0e       	add	r12, r20
    50ca:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    50cc:	80 e8       	ldi	r24, 0x80	; 128
    50ce:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    50d0:	89 e2       	ldi	r24, 0x29	; 41
    50d2:	d9 01       	movw	r26, r18
    50d4:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    50d6:	d7 01       	movw	r26, r14
    50d8:	9b 96       	adiw	r26, 0x2b	; 43
    50da:	eb e0       	ldi	r30, 0x0B	; 11
    50dc:	f0 e2       	ldi	r31, 0x20	; 32
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    50e0:	81 91       	ld	r24, Z+
    50e2:	8d 93       	st	X+, r24
    50e4:	20 e2       	ldi	r18, 0x20	; 32
    50e6:	ee 31       	cpi	r30, 0x1E	; 30
    50e8:	f2 07       	cpc	r31, r18
    50ea:	d1 f7       	brne	.-12     	; 0x50e0 <f_mkfs+0x67e>
    50ec:	51 c0       	rjmp	.+162    	; 0x5190 <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    50ee:	41 e7       	ldi	r20, 0x71	; 113
    50f0:	50 e0       	ldi	r21, 0x00	; 0
    50f2:	c4 0e       	add	r12, r20
    50f4:	d5 1e       	adc	r13, r21
    50f6:	f6 01       	movw	r30, r12
    50f8:	11 92       	st	Z+, r1
    50fa:	11 92       	st	Z+, r1
    50fc:	11 92       	st	Z+, r1
    50fe:	6f 01       	movw	r12, r30
    5100:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    5102:	4c 92       	st	X, r4
    5104:	4f ed       	ldi	r20, 0xDF	; 223
    5106:	5f ef       	ldi	r21, 0xFF	; 255
    5108:	c4 0e       	add	r12, r20
    510a:	d5 1e       	adc	r13, r21
    510c:	d6 01       	movw	r26, r12
    510e:	8c 93       	st	X, r24
    5110:	c3 01       	movw	r24, r6
    5112:	aa 27       	eor	r26, r26
    5114:	bb 27       	eor	r27, r27
    5116:	f9 01       	movw	r30, r18
    5118:	80 83       	st	Z, r24
    511a:	87 2d       	mov	r24, r7
    511c:	99 27       	eor	r25, r25
    511e:	aa 27       	eor	r26, r26
    5120:	bb 27       	eor	r27, r27
    5122:	fb 01       	movw	r30, r22
    5124:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    5126:	27 e0       	ldi	r18, 0x07	; 7
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	c2 0e       	add	r12, r18
    512c:	d3 1e       	adc	r13, r19
    512e:	82 e0       	ldi	r24, 0x02	; 2
    5130:	d6 01       	movw	r26, r12
    5132:	8d 93       	st	X+, r24
    5134:	fd 01       	movw	r30, r26
    5136:	11 92       	st	Z+, r1
    5138:	df 01       	movw	r26, r30
    513a:	1d 92       	st	X+, r1
    513c:	fd 01       	movw	r30, r26
    513e:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	df 01       	movw	r26, r30
    5144:	8d 93       	st	X+, r24
    5146:	fd 01       	movw	r30, r26
    5148:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    514a:	86 e0       	ldi	r24, 0x06	; 6
    514c:	df 01       	movw	r26, r30
    514e:	8d 93       	st	X+, r24
    5150:	6d 01       	movw	r12, r26
    5152:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    5154:	ed e0       	ldi	r30, 0x0D	; 13
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	ce 0e       	add	r12, r30
    515a:	df 1e       	adc	r13, r31
    515c:	80 e8       	ldi	r24, 0x80	; 128
    515e:	d6 01       	movw	r26, r12
    5160:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    5162:	e2 e0       	ldi	r30, 0x02	; 2
    5164:	f0 e0       	ldi	r31, 0x00	; 0
    5166:	ce 0e       	add	r12, r30
    5168:	df 1e       	adc	r13, r31
    516a:	89 e2       	ldi	r24, 0x29	; 41
    516c:	d6 01       	movw	r26, r12
    516e:	8c 93       	st	X, r24
    5170:	e0 e9       	ldi	r30, 0x90	; 144
    5172:	ff ef       	ldi	r31, 0xFF	; 255
    5174:	ce 0e       	add	r12, r30
    5176:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5178:	d7 01       	movw	r26, r14
    517a:	a9 5b       	subi	r26, 0xB9	; 185
    517c:	bf 4f       	sbci	r27, 0xFF	; 255
    517e:	ef e1       	ldi	r30, 0x1F	; 31
    5180:	f0 e2       	ldi	r31, 0x20	; 32
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5184:	81 91       	ld	r24, Z+
    5186:	8d 93       	st	X+, r24
    5188:	20 e2       	ldi	r18, 0x20	; 32
    518a:	e2 33       	cpi	r30, 0x32	; 50
    518c:	f2 07       	cpc	r31, r18
    518e:	d1 f7       	brne	.-12     	; 0x5184 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    5190:	4c e2       	ldi	r20, 0x2C	; 44
    5192:	52 e0       	ldi	r21, 0x02	; 2
    5194:	c4 0e       	add	r12, r20
    5196:	d5 1e       	adc	r13, r21
    5198:	85 e5       	ldi	r24, 0x55	; 85
    519a:	d6 01       	movw	r26, r12
    519c:	8d 93       	st	X+, r24
    519e:	6d 01       	movw	r12, r26
    51a0:	8a ea       	ldi	r24, 0xAA	; 170
    51a2:	8c 93       	st	X, r24
    51a4:	e3 ed       	ldi	r30, 0xD3	; 211
    51a6:	fd ef       	ldi	r31, 0xFD	; 253
    51a8:	ce 0e       	add	r12, r30
    51aa:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    51ac:	89 89       	ldd	r24, Y+17	; 0x11
    51ae:	b7 01       	movw	r22, r14
    51b0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    51b2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    51b4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    51b6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    51b8:	01 e0       	ldi	r16, 0x01	; 1
    51ba:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    51be:	88 23       	and	r24, r24
    51c0:	09 f0       	breq	.+2      	; 0x51c4 <f_mkfs+0x762>
    51c2:	4d c1       	rjmp	.+666    	; 0x545e <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    51c4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    51c6:	f3 30       	cpi	r31, 0x03	; 3
    51c8:	61 f4       	brne	.+24     	; 0x51e2 <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    51ca:	2a 8d       	ldd	r18, Y+26	; 0x1a
    51cc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    51ce:	4c 8d       	ldd	r20, Y+28	; 0x1c
    51d0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    51d2:	2a 5f       	subi	r18, 0xFA	; 250
    51d4:	3f 4f       	sbci	r19, 0xFF	; 255
    51d6:	4f 4f       	sbci	r20, 0xFF	; 255
    51d8:	5f 4f       	sbci	r21, 0xFF	; 255
    51da:	89 89       	ldd	r24, Y+17	; 0x11
    51dc:	b7 01       	movw	r22, r14
    51de:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    51e2:	f7 01       	movw	r30, r14
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	92 e0       	ldi	r25, 0x02	; 2
    51e8:	01 c0       	rjmp	.+2      	; 0x51ec <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    51ea:	11 92       	st	Z+, r1
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	2f ef       	ldi	r18, 0xFF	; 255
    51f0:	8f 3f       	cpi	r24, 0xFF	; 255
    51f2:	92 07       	cpc	r25, r18
    51f4:	d1 f7       	brne	.-12     	; 0x51ea <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    51f6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    51f8:	33 30       	cpi	r19, 0x03	; 3
    51fa:	31 f1       	breq	.+76     	; 0x5248 <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    51fc:	31 30       	cpi	r19, 0x01	; 1
    51fe:	29 f0       	breq	.+10     	; 0x520a <f_mkfs+0x7a8>
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	3f ef       	ldi	r19, 0xFF	; 255
    5204:	4f ef       	ldi	r20, 0xFF	; 255
    5206:	5f ef       	ldi	r21, 0xFF	; 255
    5208:	04 c0       	rjmp	.+8      	; 0x5212 <f_mkfs+0x7b0>
    520a:	20 e0       	ldi	r18, 0x00	; 0
    520c:	3f ef       	ldi	r19, 0xFF	; 255
    520e:	4f ef       	ldi	r20, 0xFF	; 255
    5210:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    5212:	81 2f       	mov	r24, r17
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	a0 e0       	ldi	r26, 0x00	; 0
    5218:	b0 e0       	ldi	r27, 0x00	; 0
    521a:	82 2b       	or	r24, r18
    521c:	93 2b       	or	r25, r19
    521e:	a4 2b       	or	r26, r20
    5220:	b5 2b       	or	r27, r21
    5222:	8d 83       	std	Y+5, r24	; 0x05
    5224:	9e 83       	std	Y+6, r25	; 0x06
    5226:	af 83       	std	Y+7, r26	; 0x07
    5228:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    522a:	f6 01       	movw	r30, r12
    522c:	86 a7       	std	Z+46, r24	; 0x2e
    522e:	29 2f       	mov	r18, r25
    5230:	33 27       	eor	r19, r19
    5232:	27 a7       	std	Z+47, r18	; 0x2f
    5234:	9d 01       	movw	r18, r26
    5236:	44 27       	eor	r20, r20
    5238:	55 27       	eor	r21, r21
    523a:	20 ab       	std	Z+48, r18	; 0x30
    523c:	8b 2f       	mov	r24, r27
    523e:	99 27       	eor	r25, r25
    5240:	aa 27       	eor	r26, r26
    5242:	bb 27       	eor	r27, r27
    5244:	81 ab       	std	Z+49, r24	; 0x31
    5246:	27 c0       	rjmp	.+78     	; 0x5296 <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    5248:	88 ef       	ldi	r24, 0xF8	; 248
    524a:	d6 01       	movw	r26, r12
    524c:	9e 96       	adiw	r26, 0x2e	; 46
    524e:	8c 93       	st	X, r24
    5250:	9e 97       	sbiw	r26, 0x2e	; 46
    5252:	8f ef       	ldi	r24, 0xFF	; 255
    5254:	9f 96       	adiw	r26, 0x2f	; 47
    5256:	8c 93       	st	X, r24
    5258:	9f 97       	sbiw	r26, 0x2f	; 47
    525a:	d0 96       	adiw	r26, 0x30	; 48
    525c:	8c 93       	st	X, r24
    525e:	d0 97       	sbiw	r26, 0x30	; 48
    5260:	d1 96       	adiw	r26, 0x31	; 49
    5262:	8c 93       	st	X, r24
    5264:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5266:	d2 96       	adiw	r26, 0x32	; 50
    5268:	8c 93       	st	X, r24
    526a:	d2 97       	sbiw	r26, 0x32	; 50
    526c:	d3 96       	adiw	r26, 0x33	; 51
    526e:	8c 93       	st	X, r24
    5270:	d3 97       	sbiw	r26, 0x33	; 51
    5272:	d4 96       	adiw	r26, 0x34	; 52
    5274:	8c 93       	st	X, r24
    5276:	d4 97       	sbiw	r26, 0x34	; 52
    5278:	d5 96       	adiw	r26, 0x35	; 53
    527a:	8c 93       	st	X, r24
    527c:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    527e:	d6 96       	adiw	r26, 0x36	; 54
    5280:	8c 93       	st	X, r24
    5282:	d6 97       	sbiw	r26, 0x36	; 54
    5284:	d7 96       	adiw	r26, 0x37	; 55
    5286:	8c 93       	st	X, r24
    5288:	d7 97       	sbiw	r26, 0x37	; 55
    528a:	d8 96       	adiw	r26, 0x38	; 56
    528c:	8c 93       	st	X, r24
    528e:	d8 97       	sbiw	r26, 0x38	; 56
    5290:	8f e0       	ldi	r24, 0x0F	; 15
    5292:	d9 96       	adiw	r26, 0x39	; 57
    5294:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5296:	89 89       	ldd	r24, Y+17	; 0x11
    5298:	b7 01       	movw	r22, r14
    529a:	29 85       	ldd	r18, Y+9	; 0x09
    529c:	3a 85       	ldd	r19, Y+10	; 0x0a
    529e:	4b 85       	ldd	r20, Y+11	; 0x0b
    52a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    52a2:	01 e0       	ldi	r16, 0x01	; 1
    52a4:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    52a8:	88 23       	and	r24, r24
    52aa:	09 f0       	breq	.+2      	; 0x52ae <f_mkfs+0x84c>
    52ac:	d8 c0       	rjmp	.+432    	; 0x545e <f_mkfs+0x9fc>
    52ae:	f7 01       	movw	r30, r14
    52b0:	80 e0       	ldi	r24, 0x00	; 0
    52b2:	92 e0       	ldi	r25, 0x02	; 2
    52b4:	01 c0       	rjmp	.+2      	; 0x52b8 <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    52b6:	11 92       	st	Z+, r1
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	bf ef       	ldi	r27, 0xFF	; 255
    52bc:	8f 3f       	cpi	r24, 0xFF	; 255
    52be:	9b 07       	cpc	r25, r27
    52c0:	d1 f7       	brne	.-12     	; 0x52b6 <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    52c2:	89 84       	ldd	r8, Y+9	; 0x09
    52c4:	9a 84       	ldd	r9, Y+10	; 0x0a
    52c6:	ab 84       	ldd	r10, Y+11	; 0x0b
    52c8:	bc 84       	ldd	r11, Y+12	; 0x0c
    52ca:	08 94       	sec
    52cc:	81 1c       	adc	r8, r1
    52ce:	91 1c       	adc	r9, r1
    52d0:	a1 1c       	adc	r10, r1
    52d2:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	a0 e0       	ldi	r26, 0x00	; 0
    52da:	b0 e0       	ldi	r27, 0x00	; 0
    52dc:	16 c0       	rjmp	.+44     	; 0x530a <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    52de:	89 89       	ldd	r24, Y+17	; 0x11
    52e0:	b7 01       	movw	r22, r14
    52e2:	a5 01       	movw	r20, r10
    52e4:	94 01       	movw	r18, r8
    52e6:	01 e0       	ldi	r16, 0x01	; 1
    52e8:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    52ec:	88 23       	and	r24, r24
    52ee:	09 f0       	breq	.+2      	; 0x52f2 <f_mkfs+0x890>
    52f0:	b6 c0       	rjmp	.+364    	; 0x545e <f_mkfs+0x9fc>
    52f2:	08 94       	sec
    52f4:	81 1c       	adc	r8, r1
    52f6:	91 1c       	adc	r9, r1
    52f8:	a1 1c       	adc	r10, r1
    52fa:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    52fc:	8d 81       	ldd	r24, Y+5	; 0x05
    52fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5300:	af 81       	ldd	r26, Y+7	; 0x07
    5302:	b8 85       	ldd	r27, Y+8	; 0x08
    5304:	01 96       	adiw	r24, 0x01	; 1
    5306:	a1 1d       	adc	r26, r1
    5308:	b1 1d       	adc	r27, r1
    530a:	8d 83       	std	Y+5, r24	; 0x05
    530c:	9e 83       	std	Y+6, r25	; 0x06
    530e:	af 83       	std	Y+7, r26	; 0x07
    5310:	b8 87       	std	Y+8, r27	; 0x08
    5312:	8d 81       	ldd	r24, Y+5	; 0x05
    5314:	9e 81       	ldd	r25, Y+6	; 0x06
    5316:	af 81       	ldd	r26, Y+7	; 0x07
    5318:	b8 85       	ldd	r27, Y+8	; 0x08
    531a:	84 15       	cp	r24, r4
    531c:	95 05       	cpc	r25, r5
    531e:	a6 05       	cpc	r26, r6
    5320:	b7 05       	cpc	r27, r7
    5322:	e8 f2       	brcs	.-70     	; 0x52de <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    5324:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5326:	e3 30       	cpi	r30, 0x03	; 3
    5328:	11 f0       	breq	.+4      	; 0x532e <f_mkfs+0x8cc>
    532a:	fa 89       	ldd	r31, Y+18	; 0x12
    532c:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    532e:	24 01       	movw	r4, r8
    5330:	35 01       	movw	r6, r10
    5332:	08 94       	sec
    5334:	41 1c       	adc	r4, r1
    5336:	51 1c       	adc	r5, r1
    5338:	61 1c       	adc	r6, r1
    533a:	71 1c       	adc	r7, r1
    533c:	89 89       	ldd	r24, Y+17	; 0x11
    533e:	b7 01       	movw	r22, r14
    5340:	a5 01       	movw	r20, r10
    5342:	94 01       	movw	r18, r8
    5344:	01 e0       	ldi	r16, 0x01	; 1
    5346:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
    534a:	88 23       	and	r24, r24
    534c:	09 f0       	breq	.+2      	; 0x5350 <f_mkfs+0x8ee>
    534e:	87 c0       	rjmp	.+270    	; 0x545e <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    5350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5352:	21 50       	subi	r18, 0x01	; 1
    5354:	2e 8f       	std	Y+30, r18	; 0x1e
    5356:	22 23       	and	r18, r18
    5358:	19 f0       	breq	.+6      	; 0x5360 <f_mkfs+0x8fe>
    535a:	53 01       	movw	r10, r6
    535c:	42 01       	movw	r8, r4
    535e:	e7 cf       	rjmp	.-50     	; 0x532e <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    5360:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5362:	33 30       	cpi	r19, 0x03	; 3
    5364:	09 f0       	breq	.+2      	; 0x5368 <f_mkfs+0x906>
    5366:	70 c0       	rjmp	.+224    	; 0x5448 <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    5368:	4c e2       	ldi	r20, 0x2C	; 44
    536a:	52 e0       	ldi	r21, 0x02	; 2
    536c:	c4 0e       	add	r12, r20
    536e:	d5 1e       	adc	r13, r21
    5370:	85 e5       	ldi	r24, 0x55	; 85
    5372:	d6 01       	movw	r26, r12
    5374:	8d 93       	st	X+, r24
    5376:	6d 01       	movw	r12, r26
    5378:	8a ea       	ldi	r24, 0xAA	; 170
    537a:	8c 93       	st	X, r24
    537c:	e3 ed       	ldi	r30, 0xD3	; 211
    537e:	fd ef       	ldi	r31, 0xFD	; 253
    5380:	ce 0e       	add	r12, r30
    5382:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5384:	82 e5       	ldi	r24, 0x52	; 82
    5386:	d6 01       	movw	r26, r12
    5388:	9e 96       	adiw	r26, 0x2e	; 46
    538a:	8c 93       	st	X, r24
    538c:	9e 97       	sbiw	r26, 0x2e	; 46
    538e:	9f 96       	adiw	r26, 0x2f	; 47
    5390:	8c 93       	st	X, r24
    5392:	9f 97       	sbiw	r26, 0x2f	; 47
    5394:	21 e6       	ldi	r18, 0x61	; 97
    5396:	d0 96       	adiw	r26, 0x30	; 48
    5398:	2c 93       	st	X, r18
    539a:	d0 97       	sbiw	r26, 0x30	; 48
    539c:	91 e4       	ldi	r25, 0x41	; 65
    539e:	d1 96       	adiw	r26, 0x31	; 49
    53a0:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    53a2:	e2 e1       	ldi	r30, 0x12	; 18
    53a4:	f2 e0       	ldi	r31, 0x02	; 2
    53a6:	ce 0e       	add	r12, r30
    53a8:	df 1e       	adc	r13, r31
    53aa:	82 e7       	ldi	r24, 0x72	; 114
    53ac:	d6 01       	movw	r26, r12
    53ae:	8d 93       	st	X+, r24
    53b0:	fd 01       	movw	r30, r26
    53b2:	81 93       	st	Z+, r24
    53b4:	df 01       	movw	r26, r30
    53b6:	9d 93       	st	X+, r25
    53b8:	fd 01       	movw	r30, r26
    53ba:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    53bc:	89 a1       	ldd	r24, Y+33	; 0x21
    53be:	81 50       	subi	r24, 0x01	; 1
    53c0:	df 01       	movw	r26, r30
    53c2:	8d 93       	st	X+, r24
    53c4:	89 a1       	ldd	r24, Y+33	; 0x21
    53c6:	9a a1       	ldd	r25, Y+34	; 0x22
    53c8:	01 97       	sbiw	r24, 0x01	; 1
    53ca:	fd 01       	movw	r30, r26
    53cc:	91 93       	st	Z+, r25
    53ce:	89 a1       	ldd	r24, Y+33	; 0x21
    53d0:	9a a1       	ldd	r25, Y+34	; 0x22
    53d2:	ab a1       	ldd	r26, Y+35	; 0x23
    53d4:	bc a1       	ldd	r27, Y+36	; 0x24
    53d6:	01 97       	sbiw	r24, 0x01	; 1
    53d8:	a1 09       	sbc	r26, r1
    53da:	b1 09       	sbc	r27, r1
    53dc:	9d 01       	movw	r18, r26
    53de:	44 27       	eor	r20, r20
    53e0:	55 27       	eor	r21, r21
    53e2:	21 93       	st	Z+, r18
    53e4:	8b 2f       	mov	r24, r27
    53e6:	99 27       	eor	r25, r25
    53e8:	aa 27       	eor	r26, r26
    53ea:	bb 27       	eor	r27, r27
    53ec:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    53ee:	8f ef       	ldi	r24, 0xFF	; 255
    53f0:	df 01       	movw	r26, r30
    53f2:	8d 93       	st	X+, r24
    53f4:	fd 01       	movw	r30, r26
    53f6:	81 93       	st	Z+, r24
    53f8:	df 01       	movw	r26, r30
    53fa:	8d 93       	st	X+, r24
    53fc:	fd 01       	movw	r30, r26
    53fe:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    5400:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5402:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5404:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5406:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5408:	2f 5f       	subi	r18, 0xFF	; 255
    540a:	3f 4f       	sbci	r19, 0xFF	; 255
    540c:	4f 4f       	sbci	r20, 0xFF	; 255
    540e:	5f 4f       	sbci	r21, 0xFF	; 255
    5410:	2a 8f       	std	Y+26, r18	; 0x1a
    5412:	3b 8f       	std	Y+27, r19	; 0x1b
    5414:	4c 8f       	std	Y+28, r20	; 0x1c
    5416:	5d 8f       	std	Y+29, r21	; 0x1d
    5418:	89 89       	ldd	r24, Y+17	; 0x11
    541a:	b7 01       	movw	r22, r14
    541c:	01 e0       	ldi	r16, 0x01	; 1
    541e:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    5422:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5424:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5426:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5428:	bd 8d       	ldd	r27, Y+29	; 0x1d
    542a:	06 96       	adiw	r24, 0x06	; 6
    542c:	a1 1d       	adc	r26, r1
    542e:	b1 1d       	adc	r27, r1
    5430:	8a 8f       	std	Y+26, r24	; 0x1a
    5432:	9b 8f       	std	Y+27, r25	; 0x1b
    5434:	ac 8f       	std	Y+28, r26	; 0x1c
    5436:	bd 8f       	std	Y+29, r27	; 0x1d
    5438:	89 89       	ldd	r24, Y+17	; 0x11
    543a:	b7 01       	movw	r22, r14
    543c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    543e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5440:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5442:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5444:	0e 94 c1 06 	call	0xd82	; 0xd82 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    5448:	89 89       	ldd	r24, Y+17	; 0x11
    544a:	60 e0       	ldi	r22, 0x00	; 0
    544c:	40 e0       	ldi	r20, 0x00	; 0
    544e:	50 e0       	ldi	r21, 0x00	; 0
    5450:	0e 94 39 07 	call	0xe72	; 0xe72 <disk_ioctl>
    5454:	88 23       	and	r24, r24
    5456:	21 f0       	breq	.+8      	; 0x5460 <f_mkfs+0x9fe>
    5458:	02 c0       	rjmp	.+4      	; 0x545e <f_mkfs+0x9fc>
    545a:	8e e0       	ldi	r24, 0x0E	; 14
    545c:	01 c0       	rjmp	.+2      	; 0x5460 <f_mkfs+0x9fe>
    545e:	81 e0       	ldi	r24, 0x01	; 1
}
    5460:	a4 96       	adiw	r28, 0x24	; 36
    5462:	cd bf       	out	0x3d, r28	; 61
    5464:	de bf       	out	0x3e, r29	; 62
    5466:	cf 91       	pop	r28
    5468:	df 91       	pop	r29
    546a:	1f 91       	pop	r17
    546c:	0f 91       	pop	r16
    546e:	ff 90       	pop	r15
    5470:	ef 90       	pop	r14
    5472:	df 90       	pop	r13
    5474:	cf 90       	pop	r12
    5476:	bf 90       	pop	r11
    5478:	af 90       	pop	r10
    547a:	9f 90       	pop	r9
    547c:	8f 90       	pop	r8
    547e:	7f 90       	pop	r7
    5480:	6f 90       	pop	r6
    5482:	5f 90       	pop	r5
    5484:	4f 90       	pop	r4
    5486:	3f 90       	pop	r3
    5488:	2f 90       	pop	r2
    548a:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    548c:	7c 01       	movw	r14, r24
    548e:	8d 01       	movw	r16, r26
    5490:	ee 0c       	add	r14, r14
    5492:	ff 1c       	adc	r15, r15
    5494:	00 1f       	adc	r16, r16
    5496:	11 1f       	adc	r17, r17
    5498:	e8 0e       	add	r14, r24
    549a:	f9 1e       	adc	r15, r25
    549c:	0a 1f       	adc	r16, r26
    549e:	1b 1f       	adc	r17, r27
    54a0:	08 94       	sec
    54a2:	e1 1c       	adc	r14, r1
    54a4:	f1 1c       	adc	r15, r1
    54a6:	01 1d       	adc	r16, r1
    54a8:	11 1d       	adc	r17, r1
    54aa:	16 95       	lsr	r17
    54ac:	07 95       	ror	r16
    54ae:	f7 94       	ror	r15
    54b0:	e7 94       	ror	r14
    54b2:	22 e0       	ldi	r18, 0x02	; 2
    54b4:	32 e0       	ldi	r19, 0x02	; 2
    54b6:	40 e0       	ldi	r20, 0x00	; 0
    54b8:	50 e0       	ldi	r21, 0x00	; 0
    54ba:	e2 0e       	add	r14, r18
    54bc:	f3 1e       	adc	r15, r19
    54be:	04 1f       	adc	r16, r20
    54c0:	15 1f       	adc	r17, r21
    54c2:	b9 e0       	ldi	r27, 0x09	; 9
    54c4:	16 95       	lsr	r17
    54c6:	07 95       	ror	r16
    54c8:	f7 94       	ror	r15
    54ca:	e7 94       	ror	r14
    54cc:	ba 95       	dec	r27
    54ce:	d1 f7       	brne	.-12     	; 0x54c4 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    54d0:	38 a1       	ldd	r19, Y+32	; 0x20
    54d2:	83 2f       	mov	r24, r19
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	01 96       	adiw	r24, 0x01	; 1
    54d8:	9c 01       	movw	r18, r24
    54da:	44 27       	eor	r20, r20
    54dc:	37 fd       	sbrc	r19, 7
    54de:	40 95       	com	r20
    54e0:	54 2f       	mov	r21, r20
    54e2:	2e 8b       	std	Y+22, r18	; 0x16
    54e4:	3f 8b       	std	Y+23, r19	; 0x17
    54e6:	48 8f       	std	Y+24, r20	; 0x18
    54e8:	59 8f       	std	Y+25, r21	; 0x19
    54ea:	80 e2       	ldi	r24, 0x20	; 32
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	a0 e0       	ldi	r26, 0x00	; 0
    54f0:	b0 e0       	ldi	r27, 0x00	; 0
    54f2:	8a 8b       	std	Y+18, r24	; 0x12
    54f4:	9b 8b       	std	Y+19, r25	; 0x13
    54f6:	ac 8b       	std	Y+20, r26	; 0x14
    54f8:	bd 8b       	std	Y+21, r27	; 0x15
    54fa:	91 e0       	ldi	r25, 0x01	; 1
    54fc:	9f 8f       	std	Y+31, r25	; 0x1f
    54fe:	fe cb       	rjmp	.-2052   	; 0x4cfc <f_mkfs+0x29a>

00005500 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    5500:	6f 92       	push	r6
    5502:	7f 92       	push	r7
    5504:	8f 92       	push	r8
    5506:	9f 92       	push	r9
    5508:	af 92       	push	r10
    550a:	bf 92       	push	r11
    550c:	cf 92       	push	r12
    550e:	df 92       	push	r13
    5510:	ef 92       	push	r14
    5512:	ff 92       	push	r15
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
    5518:	df 93       	push	r29
    551a:	cf 93       	push	r28
    551c:	0f 92       	push	r0
    551e:	0f 92       	push	r0
    5520:	cd b7       	in	r28, 0x3d	; 61
    5522:	de b7       	in	r29, 0x3e	; 62
    5524:	5c 01       	movw	r10, r24
    5526:	6b 01       	movw	r12, r22
    5528:	4a 01       	movw	r8, r20
    552a:	8c 01       	movw	r16, r24
    552c:	ee 24       	eor	r14, r14
    552e:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5530:	08 94       	sec
    5532:	c1 08       	sbc	r12, r1
    5534:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    5536:	3e 01       	movw	r6, r28
    5538:	08 94       	sec
    553a:	61 1c       	adc	r6, r1
    553c:	71 1c       	adc	r7, r1
    553e:	13 c0       	rjmp	.+38     	; 0x5566 <f_gets+0x66>
    5540:	c4 01       	movw	r24, r8
    5542:	b8 01       	movw	r22, r16
    5544:	41 e0       	ldi	r20, 0x01	; 1
    5546:	50 e0       	ldi	r21, 0x00	; 0
    5548:	93 01       	movw	r18, r6
    554a:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    554e:	89 81       	ldd	r24, Y+1	; 0x01
    5550:	9a 81       	ldd	r25, Y+2	; 0x02
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	59 f4       	brne	.+22     	; 0x556c <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    5556:	08 94       	sec
    5558:	e1 1c       	adc	r14, r1
    555a:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    555c:	f8 01       	movw	r30, r16
    555e:	81 91       	ld	r24, Z+
    5560:	8f 01       	movw	r16, r30
    5562:	8a 30       	cpi	r24, 0x0A	; 10
    5564:	19 f0       	breq	.+6      	; 0x556c <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5566:	ec 14       	cp	r14, r12
    5568:	fd 04       	cpc	r15, r13
    556a:	54 f3       	brlt	.-44     	; 0x5540 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    556c:	f8 01       	movw	r30, r16
    556e:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    5570:	ef 28       	or	r14, r15
    5572:	11 f4       	brne	.+4      	; 0x5578 <f_gets+0x78>
    5574:	aa 24       	eor	r10, r10
    5576:	bb 24       	eor	r11, r11
}
    5578:	c5 01       	movw	r24, r10
    557a:	0f 90       	pop	r0
    557c:	0f 90       	pop	r0
    557e:	cf 91       	pop	r28
    5580:	df 91       	pop	r29
    5582:	1f 91       	pop	r17
    5584:	0f 91       	pop	r16
    5586:	ff 90       	pop	r15
    5588:	ef 90       	pop	r14
    558a:	df 90       	pop	r13
    558c:	cf 90       	pop	r12
    558e:	bf 90       	pop	r11
    5590:	af 90       	pop	r10
    5592:	9f 90       	pop	r9
    5594:	8f 90       	pop	r8
    5596:	7f 90       	pop	r7
    5598:	6f 90       	pop	r6
    559a:	08 95       	ret

0000559c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    559c:	0f 93       	push	r16
    559e:	1f 93       	push	r17
    55a0:	df 93       	push	r29
    55a2:	cf 93       	push	r28
    55a4:	00 d0       	rcall	.+0      	; 0x55a6 <f_putc+0xa>
    55a6:	cd b7       	in	r28, 0x3d	; 61
    55a8:	de b7       	in	r29, 0x3e	; 62
    55aa:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    55ac:	61 15       	cp	r22, r1
    55ae:	71 05       	cpc	r23, r1
    55b0:	91 f0       	breq	.+36     	; 0x55d6 <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    55b2:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    55b4:	cb 01       	movw	r24, r22
    55b6:	be 01       	movw	r22, r28
    55b8:	6f 5f       	subi	r22, 0xFF	; 255
    55ba:	7f 4f       	sbci	r23, 0xFF	; 255
    55bc:	41 e0       	ldi	r20, 0x01	; 1
    55be:	50 e0       	ldi	r21, 0x00	; 0
    55c0:	9e 01       	movw	r18, r28
    55c2:	2e 5f       	subi	r18, 0xFE	; 254
    55c4:	3f 4f       	sbci	r19, 0xFF	; 255
    55c6:	0e 94 cf 19 	call	0x339e	; 0x339e <f_write>
	return bw ? chr : EOF;		/* Return the result */
    55ca:	8a 81       	ldd	r24, Y+2	; 0x02
    55cc:	9b 81       	ldd	r25, Y+3	; 0x03
    55ce:	89 2b       	or	r24, r25
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <f_putc+0x3a>
    55d2:	0f ef       	ldi	r16, 0xFF	; 255
    55d4:	1f ef       	ldi	r17, 0xFF	; 255
}
    55d6:	c8 01       	movw	r24, r16
    55d8:	23 96       	adiw	r28, 0x03	; 3
    55da:	cd bf       	out	0x3d, r28	; 61
    55dc:	de bf       	out	0x3e, r29	; 62
    55de:	cf 91       	pop	r28
    55e0:	df 91       	pop	r29
    55e2:	1f 91       	pop	r17
    55e4:	0f 91       	pop	r16
    55e6:	08 95       	ret

000055e8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    55e8:	ef 92       	push	r14
    55ea:	ff 92       	push	r15
    55ec:	0f 93       	push	r16
    55ee:	1f 93       	push	r17
    55f0:	cf 93       	push	r28
    55f2:	df 93       	push	r29
    55f4:	8c 01       	movw	r16, r24
    55f6:	7b 01       	movw	r14, r22
    55f8:	c0 e0       	ldi	r28, 0x00	; 0
    55fa:	d0 e0       	ldi	r29, 0x00	; 0
    55fc:	0d c0       	rjmp	.+26     	; 0x5618 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	b7 01       	movw	r22, r14
    5602:	0e 94 ce 2a 	call	0x559c	; 0x559c <f_putc>
    5606:	8f 5f       	subi	r24, 0xFF	; 255
    5608:	9f 4f       	sbci	r25, 0xFF	; 255
    560a:	19 f4       	brne	.+6      	; 0x5612 <f_puts+0x2a>
    560c:	cf ef       	ldi	r28, 0xFF	; 255
    560e:	df ef       	ldi	r29, 0xFF	; 255
    5610:	07 c0       	rjmp	.+14     	; 0x5620 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    5612:	0f 5f       	subi	r16, 0xFF	; 255
    5614:	1f 4f       	sbci	r17, 0xFF	; 255
    5616:	21 96       	adiw	r28, 0x01	; 1
    5618:	f8 01       	movw	r30, r16
    561a:	80 81       	ld	r24, Z
    561c:	88 23       	and	r24, r24
    561e:	79 f7       	brne	.-34     	; 0x55fe <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    5620:	ce 01       	movw	r24, r28
    5622:	df 91       	pop	r29
    5624:	cf 91       	pop	r28
    5626:	1f 91       	pop	r17
    5628:	0f 91       	pop	r16
    562a:	ff 90       	pop	r15
    562c:	ef 90       	pop	r14
    562e:	08 95       	ret

00005630 <SD_Close>:
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
}

void SD_Close(void){
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
    5630:	8f e9       	ldi	r24, 0x9F	; 159
    5632:	9c e4       	ldi	r25, 0x4C	; 76
    5634:	0e 94 8b 1c 	call	0x3916	; 0x3916 <f_close>
}
    5638:	08 95       	ret

0000563a <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    563a:	80 91 a8 06 	lds	r24, 0x06A8
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	80 ff       	sbrs	r24, 0
    5642:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    5644:	89 2f       	mov	r24, r25
    5646:	08 95       	ret

00005648 <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    5648:	e0 ea       	ldi	r30, 0xA0	; 160
    564a:	f6 e0       	ldi	r31, 0x06	; 6
    564c:	80 85       	ldd	r24, Z+8	; 0x08
    564e:	86 95       	lsr	r24
    5650:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    5652:	81 70       	andi	r24, 0x01	; 1
    5654:	08 95       	ret

00005656 <SD_WriteBuffer>:
      CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }

}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    5656:	af 92       	push	r10
    5658:	bf 92       	push	r11
    565a:	cf 92       	push	r12
    565c:	df 92       	push	r13
    565e:	ef 92       	push	r14
    5660:	ff 92       	push	r15
    5662:	0f 93       	push	r16
    5664:	1f 93       	push	r17
    5666:	df 93       	push	r29
    5668:	cf 93       	push	r28
    566a:	0f 92       	push	r0
    566c:	0f 92       	push	r0
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	5c 01       	movw	r10, r24
    5674:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    5676:	8f e9       	ldi	r24, 0x9F	; 159
    5678:	9c e4       	ldi	r25, 0x4C	; 76
    567a:	b5 01       	movw	r22, r10
    567c:	a6 01       	movw	r20, r12
    567e:	9e 01       	movw	r18, r28
    5680:	2f 5f       	subi	r18, 0xFF	; 255
    5682:	3f 4f       	sbci	r19, 0xFF	; 255
    5684:	0e 94 cf 19 	call	0x339e	; 0x339e <f_write>
    5688:	60 e0       	ldi	r22, 0x00	; 0
    568a:	70 e0       	ldi	r23, 0x00	; 0
    568c:	3b c0       	rjmp	.+118    	; 0x5704 <SD_WriteBuffer+0xae>




   for (uint16_t i=0; i<length; i++){
      CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    568e:	e0 90 77 54 	lds	r14, 0x5477
    5692:	f0 90 78 54 	lds	r15, 0x5478
    5696:	00 91 79 54 	lds	r16, 0x5479
    569a:	10 91 7a 54 	lds	r17, 0x547A
    569e:	20 91 77 54 	lds	r18, 0x5477
    56a2:	30 91 78 54 	lds	r19, 0x5478
    56a6:	40 91 79 54 	lds	r20, 0x5479
    56aa:	50 91 7a 54 	lds	r21, 0x547A
    56ae:	30 70       	andi	r19, 0x00	; 0
    56b0:	40 70       	andi	r20, 0x00	; 0
    56b2:	50 70       	andi	r21, 0x00	; 0
    56b4:	f5 01       	movw	r30, r10
    56b6:	e6 0f       	add	r30, r22
    56b8:	f7 1f       	adc	r31, r23
    56ba:	80 81       	ld	r24, Z
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	a0 e0       	ldi	r26, 0x00	; 0
    56c0:	b0 e0       	ldi	r27, 0x00	; 0
    56c2:	28 27       	eor	r18, r24
    56c4:	39 27       	eor	r19, r25
    56c6:	4a 27       	eor	r20, r26
    56c8:	5b 27       	eor	r21, r27
    56ca:	22 0f       	add	r18, r18
    56cc:	33 1f       	adc	r19, r19
    56ce:	22 0f       	add	r18, r18
    56d0:	33 1f       	adc	r19, r19
    56d2:	27 5b       	subi	r18, 0xB7	; 183
    56d4:	36 4d       	sbci	r19, 0xD6	; 214
    56d6:	ef 2c       	mov	r14, r15
    56d8:	f0 2e       	mov	r15, r16
    56da:	01 2f       	mov	r16, r17
    56dc:	11 27       	eor	r17, r17
    56de:	f9 01       	movw	r30, r18
    56e0:	80 81       	ld	r24, Z
    56e2:	91 81       	ldd	r25, Z+1	; 0x01
    56e4:	a2 81       	ldd	r26, Z+2	; 0x02
    56e6:	b3 81       	ldd	r27, Z+3	; 0x03
    56e8:	e8 26       	eor	r14, r24
    56ea:	f9 26       	eor	r15, r25
    56ec:	0a 27       	eor	r16, r26
    56ee:	1b 27       	eor	r17, r27
    56f0:	e0 92 77 54 	sts	0x5477, r14
    56f4:	f0 92 78 54 	sts	0x5478, r15
    56f8:	00 93 79 54 	sts	0x5479, r16
    56fc:	10 93 7a 54 	sts	0x547A, r17





   for (uint16_t i=0; i<length; i++){
    5700:	6f 5f       	subi	r22, 0xFF	; 255
    5702:	7f 4f       	sbci	r23, 0xFF	; 255
    5704:	6c 15       	cp	r22, r12
    5706:	7d 05       	cpc	r23, r13
    5708:	10 f2       	brcs	.-124    	; 0x568e <SD_WriteBuffer+0x38>





}
    570a:	0f 90       	pop	r0
    570c:	0f 90       	pop	r0
    570e:	cf 91       	pop	r28
    5710:	df 91       	pop	r29
    5712:	1f 91       	pop	r17
    5714:	0f 91       	pop	r16
    5716:	ff 90       	pop	r15
    5718:	ef 90       	pop	r14
    571a:	df 90       	pop	r13
    571c:	cf 90       	pop	r12
    571e:	bf 90       	pop	r11
    5720:	af 90       	pop	r10
    5722:	08 95       	ret

00005724 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    5724:	60 93 c5 42 	sts	0x42C5, r22
	tmp32[1] = (uint8_t)(var >> 8);
    5728:	27 2f       	mov	r18, r23
    572a:	38 2f       	mov	r19, r24
    572c:	49 2f       	mov	r20, r25
    572e:	55 27       	eor	r21, r21
    5730:	20 93 c6 42 	sts	0x42C6, r18
	tmp32[2] = (uint8_t)(var >> 16);
    5734:	9c 01       	movw	r18, r24
    5736:	44 27       	eor	r20, r20
    5738:	55 27       	eor	r21, r21
    573a:	20 93 c7 42 	sts	0x42C7, r18
	tmp32[3] = (uint8_t)(var >> 24);
    573e:	69 2f       	mov	r22, r25
    5740:	77 27       	eor	r23, r23
    5742:	88 27       	eor	r24, r24
    5744:	99 27       	eor	r25, r25
    5746:	60 93 c8 42 	sts	0x42C8, r22
	SD_WriteBuffer(tmp32,4);
    574a:	85 ec       	ldi	r24, 0xC5	; 197
    574c:	92 e4       	ldi	r25, 0x42	; 66
    574e:	64 e0       	ldi	r22, 0x04	; 4
    5750:	70 e0       	ldi	r23, 0x00	; 0
    5752:	0e 94 2b 2b 	call	0x5656	; 0x5656 <SD_WriteBuffer>
}
    5756:	08 95       	ret

00005758 <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    5758:	80 93 bf 59 	sts	0x59BF, r24
	tmp16[1] = (uint8_t)(var >> 8);
    575c:	90 93 c0 59 	sts	0x59C0, r25
	SD_WriteBuffer(tmp16,2);
    5760:	8f eb       	ldi	r24, 0xBF	; 191
    5762:	99 e5       	ldi	r25, 0x59	; 89
    5764:	62 e0       	ldi	r22, 0x02	; 2
    5766:	70 e0       	ldi	r23, 0x00	; 0
    5768:	0e 94 2b 2b 	call	0x5656	; 0x5656 <SD_WriteBuffer>
}
    576c:	08 95       	ret

0000576e <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    576e:	80 93 8a 48 	sts	0x488A, r24
	SD_WriteBuffer(tmp8,1);
    5772:	8a e8       	ldi	r24, 0x8A	; 138
    5774:	98 e4       	ldi	r25, 0x48	; 72
    5776:	61 e0       	ldi	r22, 0x01	; 1
    5778:	70 e0       	ldi	r23, 0x00	; 0
    577a:	0e 94 2b 2b 	call	0x5656	; 0x5656 <SD_WriteBuffer>
}
    577e:	08 95       	ret

00005780 <SD_ClearCRC>:


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	9f ef       	ldi	r25, 0xFF	; 255
    5784:	af ef       	ldi	r26, 0xFF	; 255
    5786:	bf ef       	ldi	r27, 0xFF	; 255
    5788:	80 93 77 54 	sts	0x5477, r24
    578c:	90 93 78 54 	sts	0x5478, r25
    5790:	a0 93 79 54 	sts	0x5479, r26
    5794:	b0 93 7a 54 	sts	0x547A, r27
}
    5798:	08 95       	ret

0000579a <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    579a:	60 91 77 54 	lds	r22, 0x5477
    579e:	70 91 78 54 	lds	r23, 0x5478
    57a2:	80 91 79 54 	lds	r24, 0x5479
    57a6:	90 91 7a 54 	lds	r25, 0x547A
    57aa:	60 95       	com	r22
    57ac:	70 95       	com	r23
    57ae:	80 95       	com	r24
    57b0:	90 95       	com	r25
    57b2:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
}
    57b6:	08 95       	ret

000057b8 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    57b8:	e0 e0       	ldi	r30, 0x00	; 0
    57ba:	fa e0       	ldi	r31, 0x0A	; 10
    57bc:	80 e4       	ldi	r24, 0x40	; 64
    57be:	92 e0       	ldi	r25, 0x02	; 2
    57c0:	86 a3       	std	Z+38, r24	; 0x26
    57c2:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    57c4:	80 81       	ld	r24, Z
    57c6:	80 7f       	andi	r24, 0xF0	; 240
    57c8:	86 60       	ori	r24, 0x06	; 6
    57ca:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    57cc:	86 81       	ldd	r24, Z+6	; 0x06
    57ce:	8c 7f       	andi	r24, 0xFC	; 252
    57d0:	82 60       	ori	r24, 0x02	; 2
    57d2:	86 83       	std	Z+6, r24	; 0x06
	
}
    57d4:	08 95       	ret

000057d6 <SD_Init>:
0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
};


uint8_t SD_Init(void){
    57d6:	1f 93       	push	r17
	uint8_t tmp;
	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    57d8:	e0 ea       	ldi	r30, 0xA0	; 160
    57da:	f6 e0       	ldi	r31, 0x06	; 6
    57dc:	88 e1       	ldi	r24, 0x18	; 24
    57de:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    57e0:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    57e2:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <SD_Timer_Init>
	tmp = disk_initialize(0);
    57e6:	80 e0       	ldi	r24, 0x00	; 0
    57e8:	0e 94 74 05 	call	0xae8	; 0xae8 <disk_initialize>
    57ec:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	60 ea       	ldi	r22, 0xA0	; 160
    57f2:	71 e3       	ldi	r23, 0x31	; 49
    57f4:	0e 94 48 16 	call	0x2c90	; 0x2c90 <f_mount>
	f_mount(1, &fso1);
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	6e ec       	ldi	r22, 0xCE	; 206
    57fc:	73 e3       	ldi	r23, 0x33	; 51
    57fe:	0e 94 48 16 	call	0x2c90	; 0x2c90 <f_mount>



	return tmp;
}
    5802:	81 2f       	mov	r24, r17
    5804:	1f 91       	pop	r17
    5806:	08 95       	ret

00005808 <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    5808:	1f 92       	push	r1
    580a:	0f 92       	push	r0
    580c:	0f b6       	in	r0, 0x3f	; 63
    580e:	0f 92       	push	r0
    5810:	0b b6       	in	r0, 0x3b	; 59
    5812:	0f 92       	push	r0
    5814:	11 24       	eor	r1, r1
    5816:	2f 93       	push	r18
    5818:	3f 93       	push	r19
    581a:	4f 93       	push	r20
    581c:	5f 93       	push	r21
    581e:	6f 93       	push	r22
    5820:	7f 93       	push	r23
    5822:	8f 93       	push	r24
    5824:	9f 93       	push	r25
    5826:	af 93       	push	r26
    5828:	bf 93       	push	r27
    582a:	ef 93       	push	r30
    582c:	ff 93       	push	r31
	disk_timerproc();
    582e:	0e 94 0c 09 	call	0x1218	; 0x1218 <disk_timerproc>


	if(okToCharge){
    5832:	80 91 2a 31 	lds	r24, 0x312A
    5836:	88 23       	and	r24, r24
    5838:	a9 f0       	breq	.+42     	; 0x5864 <__vector_47+0x5c>
		chargeCounter++;
    583a:	80 91 27 31 	lds	r24, 0x3127
    583e:	90 91 28 31 	lds	r25, 0x3128
    5842:	01 96       	adiw	r24, 0x01	; 1
    5844:	80 93 27 31 	sts	0x3127, r24
    5848:	90 93 28 31 	sts	0x3128, r25
		if(chargeCounter >= 16200){
    584c:	88 54       	subi	r24, 0x48	; 72
    584e:	9f 43       	sbci	r25, 0x3F	; 63
    5850:	48 f0       	brcs	.+18     	; 0x5864 <__vector_47+0x5c>
			chargeCounter=0;
    5852:	10 92 27 31 	sts	0x3127, r1
    5856:	10 92 28 31 	sts	0x3128, r1
			chargePercent++;
    585a:	80 91 26 31 	lds	r24, 0x3126
    585e:	8f 5f       	subi	r24, 0xFF	; 255
    5860:	80 93 26 31 	sts	0x3126, r24
		}
	}
}
    5864:	ff 91       	pop	r31
    5866:	ef 91       	pop	r30
    5868:	bf 91       	pop	r27
    586a:	af 91       	pop	r26
    586c:	9f 91       	pop	r25
    586e:	8f 91       	pop	r24
    5870:	7f 91       	pop	r23
    5872:	6f 91       	pop	r22
    5874:	5f 91       	pop	r21
    5876:	4f 91       	pop	r20
    5878:	3f 91       	pop	r19
    587a:	2f 91       	pop	r18
    587c:	0f 90       	pop	r0
    587e:	0b be       	out	0x3b, r0	; 59
    5880:	0f 90       	pop	r0
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	0f 90       	pop	r0
    5886:	1f 90       	pop	r1
    5888:	18 95       	reti

0000588a <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    588a:	0f 93       	push	r16
    588c:	df 93       	push	r29
    588e:	cf 93       	push	r28
    5890:	0f 92       	push	r0
    5892:	cd b7       	in	r28, 0x3d	; 61
    5894:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    5896:	2f b7       	in	r18, 0x3f	; 63
    5898:	29 83       	std	Y+1, r18	; 0x01
    cli();
    589a:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    589c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    589e:	fc 01       	movw	r30, r24
    58a0:	08 ed       	ldi	r16, 0xD8	; 216
    58a2:	04 bf       	out	0x34, r16	; 52
    58a4:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	8f bf       	out	0x3f, r24	; 63
}
    58aa:	0f 90       	pop	r0
    58ac:	cf 91       	pop	r28
    58ae:	df 91       	pop	r29
    58b0:	0f 91       	pop	r16
    58b2:	08 95       	ret

000058b4 <display_sendCommand>:

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    58b4:	94 e0       	ldi	r25, 0x04	; 4
    58b6:	e0 e2       	ldi	r30, 0x20	; 32
    58b8:	f6 e0       	ldi	r31, 0x06	; 6
    58ba:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    58bc:	e0 ec       	ldi	r30, 0xC0	; 192
    58be:	f8 e0       	ldi	r31, 0x08	; 8
    58c0:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    58c2:	80 91 c2 08 	lds	r24, 0x08C2
    58c6:	87 ff       	sbrs	r24, 7
    58c8:	fc cf       	rjmp	.-8      	; 0x58c2 <display_sendCommand+0xe>
}
    58ca:	08 95       	ret

000058cc <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    58cc:	94 e0       	ldi	r25, 0x04	; 4
    58ce:	e0 e2       	ldi	r30, 0x20	; 32
    58d0:	f6 e0       	ldi	r31, 0x06	; 6
    58d2:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    58d4:	e0 ec       	ldi	r30, 0xC0	; 192
    58d6:	f8 e0       	ldi	r31, 0x08	; 8
    58d8:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    58da:	80 91 c2 08 	lds	r24, 0x08C2
    58de:	87 ff       	sbrs	r24, 7
    58e0:	fc cf       	rjmp	.-8      	; 0x58da <display_sendData+0xe>
}
    58e2:	08 95       	ret

000058e4 <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    58e4:	80 6b       	ori	r24, 0xB0	; 176

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    58e6:	94 e0       	ldi	r25, 0x04	; 4
    58e8:	e0 e2       	ldi	r30, 0x20	; 32
    58ea:	f6 e0       	ldi	r31, 0x06	; 6
    58ec:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    58ee:	e0 ec       	ldi	r30, 0xC0	; 192
    58f0:	f8 e0       	ldi	r31, 0x08	; 8
    58f2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    58f4:	80 91 c2 08 	lds	r24, 0x08C2
    58f8:	87 ff       	sbrs	r24, 7
    58fa:	fc cf       	rjmp	.-8      	; 0x58f4 <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    58fc:	96 2f       	mov	r25, r22
    58fe:	9f 70       	andi	r25, 0x0F	; 15

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5900:	84 e0       	ldi	r24, 0x04	; 4
    5902:	e0 e2       	ldi	r30, 0x20	; 32
    5904:	f6 e0       	ldi	r31, 0x06	; 6
    5906:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5908:	e0 ec       	ldi	r30, 0xC0	; 192
    590a:	f8 e0       	ldi	r31, 0x08	; 8
    590c:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    590e:	80 91 c2 08 	lds	r24, 0x08C2
    5912:	87 ff       	sbrs	r24, 7
    5914:	fc cf       	rjmp	.-8      	; 0x590e <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    5916:	62 95       	swap	r22
    5918:	6f 70       	andi	r22, 0x0F	; 15
    591a:	60 61       	ori	r22, 0x10	; 16

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    591c:	84 e0       	ldi	r24, 0x04	; 4
    591e:	e0 e2       	ldi	r30, 0x20	; 32
    5920:	f6 e0       	ldi	r31, 0x06	; 6
    5922:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5924:	e0 ec       	ldi	r30, 0xC0	; 192
    5926:	f8 e0       	ldi	r31, 0x08	; 8
    5928:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    592a:	80 91 c2 08 	lds	r24, 0x08C2
    592e:	87 ff       	sbrs	r24, 7
    5930:	fc cf       	rjmp	.-8      	; 0x592a <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    5932:	08 95       	ret

00005934 <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    5934:	bf 92       	push	r11
    5936:	cf 92       	push	r12
    5938:	df 92       	push	r13
    593a:	ef 92       	push	r14
    593c:	ff 92       	push	r15
    593e:	0f 93       	push	r16
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	c0 e0       	ldi	r28, 0x00	; 0
    5948:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    594a:	56 e6       	ldi	r21, 0x66	; 102
    594c:	c5 2e       	mov	r12, r21
    594e:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5950:	40 e2       	ldi	r20, 0x20	; 32
    5952:	e4 2e       	mov	r14, r20
    5954:	46 e0       	ldi	r20, 0x06	; 6
    5956:	f4 2e       	mov	r15, r20
    5958:	34 e0       	ldi	r19, 0x04	; 4
    595a:	b3 2e       	mov	r11, r19
	Display_SPI.DATA = dataByte;
    595c:	00 ec       	ldi	r16, 0xC0	; 192
    595e:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    5960:	8c 2f       	mov	r24, r28
    5962:	60 e0       	ldi	r22, 0x00	; 0
    5964:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <display_setCursor>
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    596c:	cc 9d       	mul	r28, r12
    596e:	a0 01       	movw	r20, r0
    5970:	cd 9d       	mul	r28, r13
    5972:	50 0d       	add	r21, r0
    5974:	dc 9d       	mul	r29, r12
    5976:	50 0d       	add	r21, r0
    5978:	11 24       	eor	r1, r1
    597a:	fa 01       	movw	r30, r20
    597c:	e2 0f       	add	r30, r18
    597e:	f3 1f       	adc	r31, r19
    5980:	e8 5c       	subi	r30, 0xC8	; 200
    5982:	fe 4a       	sbci	r31, 0xAE	; 174
    5984:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5986:	f7 01       	movw	r30, r14
    5988:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    598a:	f8 01       	movw	r30, r16
    598c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    598e:	80 91 c2 08 	lds	r24, 0x08C2
    5992:	87 ff       	sbrs	r24, 7
    5994:	fc cf       	rjmp	.-8      	; 0x598e <display_writeBufferToScreen+0x5a>
    5996:	2f 5f       	subi	r18, 0xFF	; 255
    5998:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    599a:	26 36       	cpi	r18, 0x66	; 102
    599c:	31 05       	cpc	r19, r1
    599e:	69 f7       	brne	.-38     	; 0x597a <display_writeBufferToScreen+0x46>
    59a0:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    59a2:	c8 30       	cpi	r28, 0x08	; 8
    59a4:	d1 05       	cpc	r29, r1
    59a6:	e1 f6       	brne	.-72     	; 0x5960 <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    59a8:	df 91       	pop	r29
    59aa:	cf 91       	pop	r28
    59ac:	1f 91       	pop	r17
    59ae:	0f 91       	pop	r16
    59b0:	ff 90       	pop	r15
    59b2:	ef 90       	pop	r14
    59b4:	df 90       	pop	r13
    59b6:	cf 90       	pop	r12
    59b8:	bf 90       	pop	r11
    59ba:	08 95       	ret

000059bc <display_clearPage>:


void display_clearPage(uint8_t page) {
    59bc:	40 e0       	ldi	r20, 0x00	; 0
    59be:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	26 e6       	ldi	r18, 0x66	; 102
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	82 9f       	mul	r24, r18
    59c8:	b0 01       	movw	r22, r0
    59ca:	83 9f       	mul	r24, r19
    59cc:	70 0d       	add	r23, r0
    59ce:	92 9f       	mul	r25, r18
    59d0:	70 0d       	add	r23, r0
    59d2:	11 24       	eor	r1, r1
    59d4:	8a e0       	ldi	r24, 0x0A	; 10
    59d6:	fb 01       	movw	r30, r22
    59d8:	e4 0f       	add	r30, r20
    59da:	f5 1f       	adc	r31, r21
    59dc:	e8 5c       	subi	r30, 0xC8	; 200
    59de:	fe 4a       	sbci	r31, 0xAE	; 174
    59e0:	80 83       	st	Z, r24
    59e2:	4f 5f       	subi	r20, 0xFF	; 255
    59e4:	5f 4f       	sbci	r21, 0xFF	; 255
    59e6:	46 36       	cpi	r20, 0x66	; 102
    59e8:	51 05       	cpc	r21, r1
    59ea:	a9 f7       	brne	.-22     	; 0x59d6 <display_clearPage+0x1a>
}
    59ec:	08 95       	ret

000059ee <display_clearBuffer>:


void display_clearBuffer() {
    59ee:	20 e0       	ldi	r18, 0x00	; 0
    59f0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    59f2:	66 e6       	ldi	r22, 0x66	; 102
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	0f c0       	rjmp	.+30     	; 0x5a16 <display_clearBuffer+0x28>
    59f8:	fa 01       	movw	r30, r20
    59fa:	e8 0f       	add	r30, r24
    59fc:	f9 1f       	adc	r31, r25
    59fe:	e8 5c       	subi	r30, 0xC8	; 200
    5a00:	fe 4a       	sbci	r31, 0xAE	; 174
    5a02:	10 82       	st	Z, r1
    5a04:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a06:	86 36       	cpi	r24, 0x66	; 102
    5a08:	91 05       	cpc	r25, r1
    5a0a:	b1 f7       	brne	.-20     	; 0x59f8 <display_clearBuffer+0xa>
    5a0c:	2f 5f       	subi	r18, 0xFF	; 255
    5a0e:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a10:	28 30       	cpi	r18, 0x08	; 8
    5a12:	31 05       	cpc	r19, r1
    5a14:	51 f0       	breq	.+20     	; 0x5a2a <display_clearBuffer+0x3c>
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5a1a:	26 9f       	mul	r18, r22
    5a1c:	a0 01       	movw	r20, r0
    5a1e:	27 9f       	mul	r18, r23
    5a20:	50 0d       	add	r21, r0
    5a22:	36 9f       	mul	r19, r22
    5a24:	50 0d       	add	r21, r0
    5a26:	11 24       	eor	r1, r1
    5a28:	e7 cf       	rjmp	.-50     	; 0x59f8 <display_clearBuffer+0xa>
    5a2a:	08 95       	ret

00005a2c <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    5a2c:	cf 93       	push	r28
    5a2e:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5a30:	a0 e4       	ldi	r26, 0x40	; 64
    5a32:	b6 e0       	ldi	r27, 0x06	; 6
    5a34:	88 e3       	ldi	r24, 0x38	; 56
    5a36:	54 96       	adiw	r26, 0x14	; 20
    5a38:	8c 93       	st	X, r24
    5a3a:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5a3c:	40 e2       	ldi	r20, 0x20	; 32
    5a3e:	56 e0       	ldi	r21, 0x06	; 6
    5a40:	fa 01       	movw	r30, r20
    5a42:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    5a44:	30 e1       	ldi	r19, 0x10	; 16
    5a46:	15 96       	adiw	r26, 0x05	; 5
    5a48:	3c 93       	st	X, r19
    5a4a:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5a4c:	e0 e6       	ldi	r30, 0x60	; 96
    5a4e:	f6 e0       	ldi	r31, 0x06	; 6
    5a50:	21 e0       	ldi	r18, 0x01	; 1
    5a52:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5a54:	25 83       	std	Z+5, r18	; 0x05
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	90 e9       	ldi	r25, 0x90	; 144
    5a5a:	ec 01       	movw	r28, r24
    5a5c:	21 97       	sbiw	r28, 0x01	; 1
    5a5e:	f1 f7       	brne	.-4      	; 0x5a5c <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5a60:	26 83       	std	Z+6, r18	; 0x06
    5a62:	ec 01       	movw	r28, r24
    5a64:	21 97       	sbiw	r28, 0x01	; 1
    5a66:	f1 f7       	brne	.-4      	; 0x5a64 <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5a68:	25 83       	std	Z+5, r18	; 0x05
    5a6a:	01 97       	sbiw	r24, 0x01	; 1
    5a6c:	f1 f7       	brne	.-4      	; 0x5a6a <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5a6e:	8d ed       	ldi	r24, 0xDD	; 221
    5a70:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5a74:	80 eb       	ldi	r24, 0xB0	; 176
    5a76:	11 96       	adiw	r26, 0x01	; 1
    5a78:	8c 93       	st	X, r24
    5a7a:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5a7c:	84 e0       	ldi	r24, 0x04	; 4
    5a7e:	fa 01       	movw	r30, r20
    5a80:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5a82:	16 96       	adiw	r26, 0x06	; 6
    5a84:	3c 93       	st	X, r19

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a86:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5a88:	82 ee       	ldi	r24, 0xE2	; 226
    5a8a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a8c:	f8 e0       	ldi	r31, 0x08	; 8
    5a8e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a90:	80 91 c2 08 	lds	r24, 0x08C2
    5a94:	87 ff       	sbrs	r24, 7
    5a96:	fc cf       	rjmp	.-8      	; 0x5a90 <display_init+0x64>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a98:	84 e0       	ldi	r24, 0x04	; 4
    5a9a:	e0 e2       	ldi	r30, 0x20	; 32
    5a9c:	f6 e0       	ldi	r31, 0x06	; 6
    5a9e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5aa0:	80 e4       	ldi	r24, 0x40	; 64
    5aa2:	e0 ec       	ldi	r30, 0xC0	; 192
    5aa4:	f8 e0       	ldi	r31, 0x08	; 8
    5aa6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5aa8:	80 91 c2 08 	lds	r24, 0x08C2
    5aac:	87 ff       	sbrs	r24, 7
    5aae:	fc cf       	rjmp	.-8      	; 0x5aa8 <display_init+0x7c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ab0:	84 e0       	ldi	r24, 0x04	; 4
    5ab2:	e0 e2       	ldi	r30, 0x20	; 32
    5ab4:	f6 e0       	ldi	r31, 0x06	; 6
    5ab6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ab8:	81 ea       	ldi	r24, 0xA1	; 161
    5aba:	e0 ec       	ldi	r30, 0xC0	; 192
    5abc:	f8 e0       	ldi	r31, 0x08	; 8
    5abe:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5ac0:	80 91 c2 08 	lds	r24, 0x08C2
    5ac4:	87 ff       	sbrs	r24, 7
    5ac6:	fc cf       	rjmp	.-8      	; 0x5ac0 <display_init+0x94>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ac8:	84 e0       	ldi	r24, 0x04	; 4
    5aca:	e0 e2       	ldi	r30, 0x20	; 32
    5acc:	f6 e0       	ldi	r31, 0x06	; 6
    5ace:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ad0:	80 ec       	ldi	r24, 0xC0	; 192
    5ad2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ad4:	f8 e0       	ldi	r31, 0x08	; 8
    5ad6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5ad8:	80 91 c2 08 	lds	r24, 0x08C2
    5adc:	87 ff       	sbrs	r24, 7
    5ade:	fc cf       	rjmp	.-8      	; 0x5ad8 <display_init+0xac>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ae0:	84 e0       	ldi	r24, 0x04	; 4
    5ae2:	e0 e2       	ldi	r30, 0x20	; 32
    5ae4:	f6 e0       	ldi	r31, 0x06	; 6
    5ae6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ae8:	84 ea       	ldi	r24, 0xA4	; 164
    5aea:	e0 ec       	ldi	r30, 0xC0	; 192
    5aec:	f8 e0       	ldi	r31, 0x08	; 8
    5aee:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5af0:	80 91 c2 08 	lds	r24, 0x08C2
    5af4:	87 ff       	sbrs	r24, 7
    5af6:	fc cf       	rjmp	.-8      	; 0x5af0 <display_init+0xc4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5af8:	84 e0       	ldi	r24, 0x04	; 4
    5afa:	e0 e2       	ldi	r30, 0x20	; 32
    5afc:	f6 e0       	ldi	r31, 0x06	; 6
    5afe:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b00:	86 ea       	ldi	r24, 0xA6	; 166
    5b02:	e0 ec       	ldi	r30, 0xC0	; 192
    5b04:	f8 e0       	ldi	r31, 0x08	; 8
    5b06:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b08:	80 91 c2 08 	lds	r24, 0x08C2
    5b0c:	87 ff       	sbrs	r24, 7
    5b0e:	fc cf       	rjmp	.-8      	; 0x5b08 <display_init+0xdc>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b10:	84 e0       	ldi	r24, 0x04	; 4
    5b12:	e0 e2       	ldi	r30, 0x20	; 32
    5b14:	f6 e0       	ldi	r31, 0x06	; 6
    5b16:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b18:	8f e2       	ldi	r24, 0x2F	; 47
    5b1a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b1c:	f8 e0       	ldi	r31, 0x08	; 8
    5b1e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b20:	80 91 c2 08 	lds	r24, 0x08C2
    5b24:	87 ff       	sbrs	r24, 7
    5b26:	fc cf       	rjmp	.-8      	; 0x5b20 <display_init+0xf4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b28:	84 e0       	ldi	r24, 0x04	; 4
    5b2a:	e0 e2       	ldi	r30, 0x20	; 32
    5b2c:	f6 e0       	ldi	r31, 0x06	; 6
    5b2e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b30:	87 e2       	ldi	r24, 0x27	; 39
    5b32:	e0 ec       	ldi	r30, 0xC0	; 192
    5b34:	f8 e0       	ldi	r31, 0x08	; 8
    5b36:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b38:	80 91 c2 08 	lds	r24, 0x08C2
    5b3c:	87 ff       	sbrs	r24, 7
    5b3e:	fc cf       	rjmp	.-8      	; 0x5b38 <display_init+0x10c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b40:	84 e0       	ldi	r24, 0x04	; 4
    5b42:	e0 e2       	ldi	r30, 0x20	; 32
    5b44:	f6 e0       	ldi	r31, 0x06	; 6
    5b46:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b48:	8a ef       	ldi	r24, 0xFA	; 250
    5b4a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b4c:	f8 e0       	ldi	r31, 0x08	; 8
    5b4e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b50:	80 91 c2 08 	lds	r24, 0x08C2
    5b54:	87 ff       	sbrs	r24, 7
    5b56:	fc cf       	rjmp	.-8      	; 0x5b50 <display_init+0x124>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b58:	84 e0       	ldi	r24, 0x04	; 4
    5b5a:	e0 e2       	ldi	r30, 0x20	; 32
    5b5c:	f6 e0       	ldi	r31, 0x06	; 6
    5b5e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b60:	80 e9       	ldi	r24, 0x90	; 144
    5b62:	e0 ec       	ldi	r30, 0xC0	; 192
    5b64:	f8 e0       	ldi	r31, 0x08	; 8
    5b66:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b68:	80 91 c2 08 	lds	r24, 0x08C2
    5b6c:	87 ff       	sbrs	r24, 7
    5b6e:	fc cf       	rjmp	.-8      	; 0x5b68 <display_init+0x13c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b70:	84 e0       	ldi	r24, 0x04	; 4
    5b72:	e0 e2       	ldi	r30, 0x20	; 32
    5b74:	f6 e0       	ldi	r31, 0x06	; 6
    5b76:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b78:	80 e4       	ldi	r24, 0x40	; 64
    5b7a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b7c:	f8 e0       	ldi	r31, 0x08	; 8
    5b7e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b80:	80 91 c2 08 	lds	r24, 0x08C2
    5b84:	87 ff       	sbrs	r24, 7
    5b86:	fc cf       	rjmp	.-8      	; 0x5b80 <display_init+0x154>
    5b88:	8c ed       	ldi	r24, 0xDC	; 220
    5b8a:	95 e0       	ldi	r25, 0x05	; 5
    5b8c:	20 e7       	ldi	r18, 0x70	; 112
    5b8e:	31 e0       	ldi	r19, 0x01	; 1
    5b90:	f9 01       	movw	r30, r18
    5b92:	31 97       	sbiw	r30, 0x01	; 1
    5b94:	f1 f7       	brne	.-4      	; 0x5b92 <display_init+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b98:	d9 f7       	brne	.-10     	; 0x5b90 <display_init+0x164>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b9a:	84 e0       	ldi	r24, 0x04	; 4
    5b9c:	e0 e2       	ldi	r30, 0x20	; 32
    5b9e:	f6 e0       	ldi	r31, 0x06	; 6
    5ba0:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ba2:	82 ea       	ldi	r24, 0xA2	; 162
    5ba4:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba6:	f8 e0       	ldi	r31, 0x08	; 8
    5ba8:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5baa:	80 91 c2 08 	lds	r24, 0x08C2
    5bae:	87 ff       	sbrs	r24, 7
    5bb0:	fc cf       	rjmp	.-8      	; 0x5baa <display_init+0x17e>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bb2:	84 e0       	ldi	r24, 0x04	; 4
    5bb4:	e0 e2       	ldi	r30, 0x20	; 32
    5bb6:	f6 e0       	ldi	r31, 0x06	; 6
    5bb8:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bba:	81 e8       	ldi	r24, 0x81	; 129
    5bbc:	e0 ec       	ldi	r30, 0xC0	; 192
    5bbe:	f8 e0       	ldi	r31, 0x08	; 8
    5bc0:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bc2:	80 91 c2 08 	lds	r24, 0x08C2
    5bc6:	87 ff       	sbrs	r24, 7
    5bc8:	fc cf       	rjmp	.-8      	; 0x5bc2 <display_init+0x196>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bca:	84 e0       	ldi	r24, 0x04	; 4
    5bcc:	e0 e2       	ldi	r30, 0x20	; 32
    5bce:	f6 e0       	ldi	r31, 0x06	; 6
    5bd0:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bd2:	88 e0       	ldi	r24, 0x08	; 8
    5bd4:	e0 ec       	ldi	r30, 0xC0	; 192
    5bd6:	f8 e0       	ldi	r31, 0x08	; 8
    5bd8:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bda:	80 91 c2 08 	lds	r24, 0x08C2
    5bde:	87 ff       	sbrs	r24, 7
    5be0:	fc cf       	rjmp	.-8      	; 0x5bda <display_init+0x1ae>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5be2:	84 e0       	ldi	r24, 0x04	; 4
    5be4:	e0 e2       	ldi	r30, 0x20	; 32
    5be6:	f6 e0       	ldi	r31, 0x06	; 6
    5be8:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bea:	8f ea       	ldi	r24, 0xAF	; 175
    5bec:	e0 ec       	ldi	r30, 0xC0	; 192
    5bee:	f8 e0       	ldi	r31, 0x08	; 8
    5bf0:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bf2:	80 91 c2 08 	lds	r24, 0x08C2
    5bf6:	87 ff       	sbrs	r24, 7
    5bf8:	fc cf       	rjmp	.-8      	; 0x5bf2 <display_init+0x1c6>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearBuffer();
    5bfa:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearBuffer>
	display_writeBufferToScreen();
    5bfe:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>

}
    5c02:	df 91       	pop	r29
    5c04:	cf 91       	pop	r28
    5c06:	08 95       	ret

00005c08 <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5c08:	2f 92       	push	r2
    5c0a:	3f 92       	push	r3
    5c0c:	4f 92       	push	r4
    5c0e:	5f 92       	push	r5
    5c10:	6f 92       	push	r6
    5c12:	7f 92       	push	r7
    5c14:	8f 92       	push	r8
    5c16:	9f 92       	push	r9
    5c18:	af 92       	push	r10
    5c1a:	bf 92       	push	r11
    5c1c:	cf 92       	push	r12
    5c1e:	df 92       	push	r13
    5c20:	ef 92       	push	r14
    5c22:	ff 92       	push	r15
    5c24:	0f 93       	push	r16
    5c26:	1f 93       	push	r17
    5c28:	df 93       	push	r29
    5c2a:	cf 93       	push	r28
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	28 97       	sbiw	r28, 0x08	; 8
    5c32:	cd bf       	out	0x3d, r28	; 61
    5c34:	de bf       	out	0x3e, r29	; 62
    5c36:	1c 01       	movw	r2, r24
    5c38:	4c 83       	std	Y+4, r20	; 0x04
    5c3a:	2f 83       	std	Y+7, r18	; 0x07
    5c3c:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5c3e:	d9 01       	movw	r26, r18
    5c40:	13 96       	adiw	r26, 0x03	; 3
    5c42:	bc 91       	ld	r27, X
    5c44:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5c46:	f9 01       	movw	r30, r18
    5c48:	f4 81       	ldd	r31, Z+4	; 0x04
    5c4a:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5c4c:	d9 01       	movw	r26, r18
    5c4e:	15 96       	adiw	r26, 0x05	; 5
    5c50:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5c52:	bb 81       	ldd	r27, Y+3	; 0x03
    5c54:	0b 2f       	mov	r16, r27
    5c56:	10 e0       	ldi	r17, 0x00	; 0
    5c58:	c8 01       	movw	r24, r16
    5c5a:	07 96       	adiw	r24, 0x07	; 7
    5c5c:	e3 e0       	ldi	r30, 0x03	; 3
    5c5e:	95 95       	asr	r25
    5c60:	87 95       	ror	r24
    5c62:	ea 95       	dec	r30
    5c64:	e1 f7       	brne	.-8      	; 0x5c5e <display_putString+0x56>
    5c66:	89 83       	std	Y+1, r24	; 0x01
    5c68:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5c6a:	e2 2e       	mov	r14, r18
    5c6c:	ff 24       	eor	r15, r15
    5c6e:	e6 e0       	ldi	r30, 0x06	; 6
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	ee 0e       	add	r14, r30
    5c74:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    5c76:	46 2e       	mov	r4, r22
    5c78:	55 24       	eor	r5, r5
    5c7a:	6f c0       	rjmp	.+222    	; 0x5d5a <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5c7c:	7e 2f       	mov	r23, r30
    5c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    5c80:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5c82:	af 81       	ldd	r26, Y+7	; 0x07
    5c84:	b8 85       	ldd	r27, Y+8	; 0x08
    5c86:	8c 91       	ld	r24, X
    5c88:	88 23       	and	r24, r24
    5c8a:	39 f4       	brne	.+14     	; 0x5c9a <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5c8c:	12 96       	adiw	r26, 0x02	; 2
    5c8e:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5c90:	74 9f       	mul	r23, r20
    5c92:	f0 01       	movw	r30, r0
    5c94:	11 24       	eor	r1, r1
    5c96:	36 96       	adiw	r30, 0x06	; 6
    5c98:	2b c0       	rjmp	.+86     	; 0x5cf0 <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5c9a:	ef 81       	ldd	r30, Y+7	; 0x07
    5c9c:	f8 85       	ldd	r31, Y+8	; 0x08
    5c9e:	e7 0f       	add	r30, r23
    5ca0:	f1 1d       	adc	r31, r1
    5ca2:	46 81       	ldd	r20, Z+6	; 0x06
    5ca4:	ef 81       	ldd	r30, Y+7	; 0x07
    5ca6:	f8 85       	ldd	r31, Y+8	; 0x08
    5ca8:	ed 83       	std	Y+5, r30	; 0x05
    5caa:	fe 83       	std	Y+6, r31	; 0x06
    5cac:	50 e0       	ldi	r21, 0x00	; 0
    5cae:	a0 e0       	ldi	r26, 0x00	; 0
    5cb0:	b0 e0       	ldi	r27, 0x00	; 0
    5cb2:	0a c0       	rjmp	.+20     	; 0x5cc8 <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5cb4:	ed 81       	ldd	r30, Y+5	; 0x05
    5cb6:	fe 81       	ldd	r31, Y+6	; 0x06
    5cb8:	85 81       	ldd	r24, Z+5	; 0x05
    5cba:	f9 81       	ldd	r31, Y+1	; 0x01
    5cbc:	f8 9f       	mul	r31, r24
    5cbe:	c0 01       	movw	r24, r0
    5cc0:	11 24       	eor	r1, r1
    5cc2:	a8 0f       	add	r26, r24
    5cc4:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5cc6:	5f 5f       	subi	r21, 0xFF	; 255
    5cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cca:	9e 81       	ldd	r25, Y+6	; 0x06
    5ccc:	01 96       	adiw	r24, 0x01	; 1
    5cce:	8d 83       	std	Y+5, r24	; 0x05
    5cd0:	9e 83       	std	Y+6, r25	; 0x06
    5cd2:	57 17       	cp	r21, r23
    5cd4:	78 f3       	brcs	.-34     	; 0x5cb4 <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5cd6:	84 2f       	mov	r24, r20
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	82 9f       	mul	r24, r18
    5cdc:	f0 01       	movw	r30, r0
    5cde:	83 9f       	mul	r24, r19
    5ce0:	f0 0d       	add	r31, r0
    5ce2:	92 9f       	mul	r25, r18
    5ce4:	f0 0d       	add	r31, r0
    5ce6:	11 24       	eor	r1, r1
    5ce8:	ee 0d       	add	r30, r14
    5cea:	ff 1d       	adc	r31, r15
    5cec:	ea 0f       	add	r30, r26
    5cee:	fb 1f       	adc	r31, r27
    5cf0:	af 81       	ldd	r26, Y+7	; 0x07
    5cf2:	b8 85       	ldd	r27, Y+8	; 0x08
    5cf4:	ae 0f       	add	r26, r30
    5cf6:	bf 1f       	adc	r27, r31
    5cf8:	50 e0       	ldi	r21, 0x00	; 0
    5cfa:	16 c0       	rjmp	.+44     	; 0x5d28 <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5cfc:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    5d00:	99 30       	cpi	r25, 0x09	; 9
    5d02:	50 f0       	brcs	.+20     	; 0x5d18 <display_putString+0x110>
    5d04:	08 15       	cp	r16, r8
    5d06:	19 05       	cpc	r17, r9
    5d08:	3c f4       	brge	.+14     	; 0x5d18 <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	06 2c       	mov	r0, r6
    5d0e:	02 c0       	rjmp	.+4      	; 0x5d14 <display_putString+0x10c>
    5d10:	95 95       	asr	r25
    5d12:	87 95       	ror	r24
    5d14:	0a 94       	dec	r0
    5d16:	e2 f7       	brpl	.-8      	; 0x5d10 <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5d18:	f5 01       	movw	r30, r10
    5d1a:	e7 0f       	add	r30, r23
    5d1c:	f1 1d       	adc	r31, r1
    5d1e:	e8 5c       	subi	r30, 0xC8	; 200
    5d20:	fe 4a       	sbci	r31, 0xAE	; 174
    5d22:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5d24:	5f 5f       	subi	r21, 0xFF	; 255
    5d26:	11 96       	adiw	r26, 0x01	; 1
    5d28:	75 2f       	mov	r23, r21
    5d2a:	76 0f       	add	r23, r22
    5d2c:	54 17       	cp	r21, r20
    5d2e:	30 f3       	brcs	.-52     	; 0x5cfc <display_putString+0xf4>
    5d30:	84 2f       	mov	r24, r20
    5d32:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5d34:	85 36       	cpi	r24, 0x65	; 101
    5d36:	31 f0       	breq	.+12     	; 0x5d44 <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    5d38:	f5 01       	movw	r30, r10
    5d3a:	e8 0f       	add	r30, r24
    5d3c:	f1 1d       	adc	r31, r1
    5d3e:	e7 5c       	subi	r30, 0xC7	; 199
    5d40:	fe 4a       	sbci	r31, 0xAE	; 174
    5d42:	10 82       	st	Z, r1
 		}
		offset++;
    5d44:	68 2f       	mov	r22, r24
    5d46:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    5d48:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5d4a:	f1 01       	movw	r30, r2
    5d4c:	ed 0d       	add	r30, r13
    5d4e:	f1 1d       	adc	r31, r1
    5d50:	e0 81       	ld	r30, Z
    5d52:	ee 23       	and	r30, r30
    5d54:	09 f0       	breq	.+2      	; 0x5d58 <display_putString+0x150>
    5d56:	92 cf       	rjmp	.-220    	; 0x5c7c <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5d58:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5d5a:	2c 2d       	mov	r18, r12
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	c9 01       	movw	r24, r18
    5d60:	73 e0       	ldi	r23, 0x03	; 3
    5d62:	88 0f       	add	r24, r24
    5d64:	99 1f       	adc	r25, r25
    5d66:	7a 95       	dec	r23
    5d68:	e1 f7       	brne	.-8      	; 0x5d62 <display_putString+0x15a>
    5d6a:	80 17       	cp	r24, r16
    5d6c:	91 07       	cpc	r25, r17
    5d6e:	e4 f4       	brge	.+56     	; 0x5da8 <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5d70:	2f 5f       	subi	r18, 0xFF	; 255
    5d72:	3f 4f       	sbci	r19, 0xFF	; 255
    5d74:	49 01       	movw	r8, r18
    5d76:	63 e0       	ldi	r22, 0x03	; 3
    5d78:	88 0c       	add	r8, r8
    5d7a:	99 1c       	adc	r9, r9
    5d7c:	6a 95       	dec	r22
    5d7e:	e1 f7       	brne	.-8      	; 0x5d78 <display_putString+0x170>
    5d80:	21 50       	subi	r18, 0x01	; 1
    5d82:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5d84:	34 01       	movw	r6, r8
    5d86:	60 1a       	sub	r6, r16
    5d88:	71 0a       	sbc	r7, r17
    5d8a:	6c 81       	ldd	r22, Y+4	; 0x04
    5d8c:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5d8e:	c9 01       	movw	r24, r18
    5d90:	84 0d       	add	r24, r4
    5d92:	95 1d       	adc	r25, r5
    5d94:	a6 e6       	ldi	r26, 0x66	; 102
    5d96:	b0 e0       	ldi	r27, 0x00	; 0
    5d98:	8a 9f       	mul	r24, r26
    5d9a:	50 01       	movw	r10, r0
    5d9c:	8b 9f       	mul	r24, r27
    5d9e:	b0 0c       	add	r11, r0
    5da0:	9a 9f       	mul	r25, r26
    5da2:	b0 0c       	add	r11, r0
    5da4:	11 24       	eor	r1, r1
    5da6:	d1 cf       	rjmp	.-94     	; 0x5d4a <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    5da8:	28 96       	adiw	r28, 0x08	; 8
    5daa:	cd bf       	out	0x3d, r28	; 61
    5dac:	de bf       	out	0x3e, r29	; 62
    5dae:	cf 91       	pop	r28
    5db0:	df 91       	pop	r29
    5db2:	1f 91       	pop	r17
    5db4:	0f 91       	pop	r16
    5db6:	ff 90       	pop	r15
    5db8:	ef 90       	pop	r14
    5dba:	df 90       	pop	r13
    5dbc:	cf 90       	pop	r12
    5dbe:	bf 90       	pop	r11
    5dc0:	af 90       	pop	r10
    5dc2:	9f 90       	pop	r9
    5dc4:	8f 90       	pop	r8
    5dc6:	7f 90       	pop	r7
    5dc8:	6f 90       	pop	r6
    5dca:	5f 90       	pop	r5
    5dcc:	4f 90       	pop	r4
    5dce:	3f 90       	pop	r3
    5dd0:	2f 90       	pop	r2
    5dd2:	08 95       	ret

00005dd4 <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    5dd4:	28 2f       	mov	r18, r24
    5dd6:	26 95       	lsr	r18
    5dd8:	26 95       	lsr	r18
    5dda:	26 95       	lsr	r18
    5ddc:	70 e0       	ldi	r23, 0x00	; 0
    5dde:	a8 2f       	mov	r26, r24
    5de0:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    5de2:	44 23       	and	r20, r20
    5de4:	d9 f0       	breq	.+54     	; 0x5e1c <display_drawPixel+0x48>
    5de6:	30 e0       	ldi	r19, 0x00	; 0
    5de8:	86 e6       	ldi	r24, 0x66	; 102
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	28 9f       	mul	r18, r24
    5dee:	f0 01       	movw	r30, r0
    5df0:	29 9f       	mul	r18, r25
    5df2:	f0 0d       	add	r31, r0
    5df4:	38 9f       	mul	r19, r24
    5df6:	f0 0d       	add	r31, r0
    5df8:	11 24       	eor	r1, r1
    5dfa:	e6 0f       	add	r30, r22
    5dfc:	f7 1f       	adc	r31, r23
    5dfe:	e8 5c       	subi	r30, 0xC8	; 200
    5e00:	fe 4a       	sbci	r31, 0xAE	; 174
    5e02:	20 81       	ld	r18, Z
    5e04:	a7 70       	andi	r26, 0x07	; 7
    5e06:	b0 70       	andi	r27, 0x00	; 0
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	02 c0       	rjmp	.+4      	; 0x5e12 <display_drawPixel+0x3e>
    5e0e:	88 0f       	add	r24, r24
    5e10:	99 1f       	adc	r25, r25
    5e12:	aa 95       	dec	r26
    5e14:	e2 f7       	brpl	.-8      	; 0x5e0e <display_drawPixel+0x3a>
    5e16:	28 2b       	or	r18, r24
    5e18:	20 83       	st	Z, r18
    5e1a:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5e1c:	30 e0       	ldi	r19, 0x00	; 0
    5e1e:	86 e6       	ldi	r24, 0x66	; 102
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	28 9f       	mul	r18, r24
    5e24:	f0 01       	movw	r30, r0
    5e26:	29 9f       	mul	r18, r25
    5e28:	f0 0d       	add	r31, r0
    5e2a:	38 9f       	mul	r19, r24
    5e2c:	f0 0d       	add	r31, r0
    5e2e:	11 24       	eor	r1, r1
    5e30:	e6 0f       	add	r30, r22
    5e32:	f7 1f       	adc	r31, r23
    5e34:	e8 5c       	subi	r30, 0xC8	; 200
    5e36:	fe 4a       	sbci	r31, 0xAE	; 174
    5e38:	20 81       	ld	r18, Z
    5e3a:	a7 70       	andi	r26, 0x07	; 7
    5e3c:	b0 70       	andi	r27, 0x00	; 0
    5e3e:	81 e0       	ldi	r24, 0x01	; 1
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	02 c0       	rjmp	.+4      	; 0x5e48 <display_drawPixel+0x74>
    5e44:	88 0f       	add	r24, r24
    5e46:	99 1f       	adc	r25, r25
    5e48:	aa 95       	dec	r26
    5e4a:	e2 f7       	brpl	.-8      	; 0x5e44 <display_drawPixel+0x70>
    5e4c:	80 95       	com	r24
    5e4e:	82 23       	and	r24, r18
    5e50:	80 83       	st	Z, r24
    5e52:	08 95       	ret

00005e54 <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5e54:	dc 01       	movw	r26, r24
    5e56:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    5e58:	90 81       	ld	r25, Z
	*val2 = *val1;
    5e5a:	8c 91       	ld	r24, X
    5e5c:	80 83       	st	Z, r24
	*val1 = tempVal;
    5e5e:	9c 93       	st	X, r25
}
    5e60:	08 95       	ret

00005e62 <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5e62:	df 92       	push	r13
    5e64:	ef 92       	push	r14
    5e66:	ff 92       	push	r15
    5e68:	0f 93       	push	r16
    5e6a:	1f 93       	push	r17
    5e6c:	cf 93       	push	r28
    5e6e:	df 93       	push	r29
    5e70:	f8 2e       	mov	r15, r24
    5e72:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5e74:	84 17       	cp	r24, r20
    5e76:	d9 f4       	brne	.+54     	; 0x5eae <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    5e78:	26 17       	cp	r18, r22
    5e7a:	18 f4       	brcc	.+6      	; 0x5e82 <display_drawLine+0x20>
    5e7c:	dd 24       	eor	r13, r13
    5e7e:	da 94       	dec	r13
    5e80:	02 c0       	rjmp	.+4      	; 0x5e86 <display_drawLine+0x24>
    5e82:	dd 24       	eor	r13, r13
    5e84:	d3 94       	inc	r13
		j = column1;
    5e86:	1e 2d       	mov	r17, r14
		while (j != column2) {
    5e88:	c2 2f       	mov	r28, r18
    5e8a:	d0 e0       	ldi	r29, 0x00	; 0
    5e8c:	06 c0       	rjmp	.+12     	; 0x5e9a <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5e8e:	8f 2d       	mov	r24, r15
    5e90:	61 2f       	mov	r22, r17
    5e92:	40 2f       	mov	r20, r16
    5e94:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
    5e98:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    5e9a:	81 2f       	mov	r24, r17
    5e9c:	99 27       	eor	r25, r25
    5e9e:	87 fd       	sbrc	r24, 7
    5ea0:	90 95       	com	r25
    5ea2:	8c 17       	cp	r24, r28
    5ea4:	9d 07       	cpc	r25, r29
    5ea6:	99 f7       	brne	.-26     	; 0x5e8e <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    5ea8:	8f 2d       	mov	r24, r15
    5eaa:	61 2f       	mov	r22, r17
    5eac:	1c c0       	rjmp	.+56     	; 0x5ee6 <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    5eae:	62 17       	cp	r22, r18
    5eb0:	e9 f4       	brne	.+58     	; 0x5eec <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    5eb2:	48 17       	cp	r20, r24
    5eb4:	18 f4       	brcc	.+6      	; 0x5ebc <display_drawLine+0x5a>
    5eb6:	dd 24       	eor	r13, r13
    5eb8:	da 94       	dec	r13
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <display_drawLine+0x5e>
    5ebc:	dd 24       	eor	r13, r13
    5ebe:	d3 94       	inc	r13
		i = row1;
    5ec0:	1f 2d       	mov	r17, r15
		while(i != row2) {
    5ec2:	c4 2f       	mov	r28, r20
    5ec4:	d0 e0       	ldi	r29, 0x00	; 0
    5ec6:	06 c0       	rjmp	.+12     	; 0x5ed4 <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    5ec8:	81 2f       	mov	r24, r17
    5eca:	6e 2d       	mov	r22, r14
    5ecc:	40 2f       	mov	r20, r16
    5ece:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
    5ed2:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    5ed4:	81 2f       	mov	r24, r17
    5ed6:	99 27       	eor	r25, r25
    5ed8:	87 fd       	sbrc	r24, 7
    5eda:	90 95       	com	r25
    5edc:	8c 17       	cp	r24, r28
    5ede:	9d 07       	cpc	r25, r29
    5ee0:	99 f7       	brne	.-26     	; 0x5ec8 <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    5ee2:	81 2f       	mov	r24, r17
    5ee4:	6e 2d       	mov	r22, r14
    5ee6:	40 2f       	mov	r20, r16
    5ee8:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
			
			
		}
		*/
	}
}
    5eec:	df 91       	pop	r29
    5eee:	cf 91       	pop	r28
    5ef0:	1f 91       	pop	r17
    5ef2:	0f 91       	pop	r16
    5ef4:	ff 90       	pop	r15
    5ef6:	ef 90       	pop	r14
    5ef8:	df 90       	pop	r13
    5efa:	08 95       	ret

00005efc <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5efc:	6f 92       	push	r6
    5efe:	7f 92       	push	r7
    5f00:	8f 92       	push	r8
    5f02:	9f 92       	push	r9
    5f04:	bf 92       	push	r11
    5f06:	cf 92       	push	r12
    5f08:	df 92       	push	r13
    5f0a:	ef 92       	push	r14
    5f0c:	ff 92       	push	r15
    5f0e:	0f 93       	push	r16
    5f10:	1f 93       	push	r17
    5f12:	cf 93       	push	r28
    5f14:	df 93       	push	r29
    5f16:	18 2f       	mov	r17, r24
    5f18:	b6 2e       	mov	r11, r22
    5f1a:	d2 2e       	mov	r13, r18
    5f1c:	d6 0e       	add	r13, r22
    5f1e:	f4 2e       	mov	r15, r20
    5f20:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5f22:	00 23       	and	r16, r16
    5f24:	c1 f4       	brne	.+48     	; 0x5f56 <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    5f26:	41 2f       	mov	r20, r17
    5f28:	2d 2d       	mov	r18, r13
    5f2a:	0c 2d       	mov	r16, r12
    5f2c:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5f30:	8f 2d       	mov	r24, r15
    5f32:	6b 2d       	mov	r22, r11
    5f34:	4f 2d       	mov	r20, r15
    5f36:	2d 2d       	mov	r18, r13
    5f38:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5f3c:	81 2f       	mov	r24, r17
    5f3e:	6b 2d       	mov	r22, r11
    5f40:	4f 2d       	mov	r20, r15
    5f42:	2b 2d       	mov	r18, r11
    5f44:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    5f48:	81 2f       	mov	r24, r17
    5f4a:	6d 2d       	mov	r22, r13
    5f4c:	4f 2d       	mov	r20, r15
    5f4e:	2d 2d       	mov	r18, r13
    5f50:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
    5f54:	63 c0       	rjmp	.+198    	; 0x601c <__stack+0x1d>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    5f56:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    5f58:	08 2f       	mov	r16, r24
    5f5a:	10 e0       	ldi	r17, 0x00	; 0
    5f5c:	04 0f       	add	r16, r20
    5f5e:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    5f60:	cf 2d       	mov	r28, r15
    5f62:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5f64:	a7 e0       	ldi	r26, 0x07	; 7
    5f66:	b0 e0       	ldi	r27, 0x00	; 0
    5f68:	ac 1b       	sub	r26, r28
    5f6a:	bd 0b       	sbc	r27, r29
    5f6c:	2f ef       	ldi	r18, 0xFF	; 255
    5f6e:	82 2e       	mov	r8, r18
    5f70:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5f72:	96 e6       	ldi	r25, 0x66	; 102
    5f74:	69 2e       	mov	r6, r25
    5f76:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    5f78:	88 e0       	ldi	r24, 0x08	; 8
    5f7a:	c8 2e       	mov	r12, r24
    5f7c:	49 c0       	rjmp	.+146    	; 0x6010 <__stack+0x11>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    5f7e:	f7 e0       	ldi	r31, 0x07	; 7
    5f80:	ff 2e       	mov	r15, r31
    5f82:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    5f84:	6f 2d       	mov	r22, r15
    5f86:	70 e0       	ldi	r23, 0x00	; 0
    5f88:	c9 01       	movw	r24, r18
    5f8a:	07 96       	adiw	r24, 0x07	; 7
    5f8c:	86 1b       	sub	r24, r22
    5f8e:	97 0b       	sbc	r25, r23
    5f90:	c8 17       	cp	r28, r24
    5f92:	d9 07       	cpc	r29, r25
    5f94:	44 f0       	brlt	.+16     	; 0x5fa6 <display_drawRectangle+0xaa>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    5f96:	c4 01       	movw	r24, r8
    5f98:	0f 2c       	mov	r0, r15
    5f9a:	02 c0       	rjmp	.+4      	; 0x5fa0 <display_drawRectangle+0xa4>
    5f9c:	88 0f       	add	r24, r24
    5f9e:	99 1f       	adc	r25, r25
    5fa0:	0a 94       	dec	r0
    5fa2:	e2 f7       	brpl	.-8      	; 0x5f9c <display_drawRectangle+0xa0>
    5fa4:	08 c0       	rjmp	.+16     	; 0x5fb6 <display_drawRectangle+0xba>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5fa6:	2a 0f       	add	r18, r26
    5fa8:	3b 1f       	adc	r19, r27
    5faa:	c4 01       	movw	r24, r8
    5fac:	02 c0       	rjmp	.+4      	; 0x5fb2 <display_drawRectangle+0xb6>
    5fae:	95 95       	asr	r25
    5fb0:	87 95       	ror	r24
    5fb2:	2a 95       	dec	r18
    5fb4:	e2 f7       	brpl	.-8      	; 0x5fae <display_drawRectangle+0xb2>
    5fb6:	28 2f       	mov	r18, r24
			}
			page = i/8;
    5fb8:	85 2f       	mov	r24, r21
    5fba:	86 95       	lsr	r24
    5fbc:	86 95       	lsr	r24
    5fbe:	86 95       	lsr	r24
    5fc0:	3b 2d       	mov	r19, r11
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5fc4:	86 9d       	mul	r24, r6
    5fc6:	b0 01       	movw	r22, r0
    5fc8:	87 9d       	mul	r24, r7
    5fca:	70 0d       	add	r23, r0
    5fcc:	96 9d       	mul	r25, r6
    5fce:	70 0d       	add	r23, r0
    5fd0:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    5fd2:	42 2f       	mov	r20, r18
    5fd4:	40 95       	com	r20
    5fd6:	17 c0       	rjmp	.+46     	; 0x6006 <__stack+0x7>
    5fd8:	e3 2f       	mov	r30, r19
    5fda:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    5fdc:	ee 20       	and	r14, r14
    5fde:	69 f0       	breq	.+26     	; 0x5ffa <display_drawRectangle+0xfe>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    5fe0:	e6 0f       	add	r30, r22
    5fe2:	f7 1f       	adc	r31, r23
    5fe4:	e8 5c       	subi	r30, 0xC8	; 200
    5fe6:	fe 4a       	sbci	r31, 0xAE	; 174
    5fe8:	80 81       	ld	r24, Z
    5fea:	90 81       	ld	r25, Z
    5fec:	82 23       	and	r24, r18
    5fee:	80 95       	com	r24
    5ff0:	82 23       	and	r24, r18
    5ff2:	94 23       	and	r25, r20
    5ff4:	89 2b       	or	r24, r25
    5ff6:	80 83       	st	Z, r24
    5ff8:	05 c0       	rjmp	.+10     	; 0x6004 <__stack+0x5>
				} else {
					displayBuffer[page][j] = byteOut;	
    5ffa:	e6 0f       	add	r30, r22
    5ffc:	f7 1f       	adc	r31, r23
    5ffe:	e8 5c       	subi	r30, 0xC8	; 200
    6000:	fe 4a       	sbci	r31, 0xAE	; 174
    6002:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    6004:	3f 5f       	subi	r19, 0xFF	; 255
    6006:	d3 16       	cp	r13, r19
    6008:	38 f7       	brcc	.-50     	; 0x5fd8 <display_drawRectangle+0xdc>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    600a:	8c 2d       	mov	r24, r12
    600c:	8f 19       	sub	r24, r15
    600e:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    6010:	25 2f       	mov	r18, r21
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	02 17       	cp	r16, r18
    6016:	13 07       	cpc	r17, r19
    6018:	0c f0       	brlt	.+2      	; 0x601c <__stack+0x1d>
    601a:	b1 cf       	rjmp	.-158    	; 0x5f7e <display_drawRectangle+0x82>
			i += (8 - remainder);	
		}
	
	}
			
}
    601c:	df 91       	pop	r29
    601e:	cf 91       	pop	r28
    6020:	1f 91       	pop	r17
    6022:	0f 91       	pop	r16
    6024:	ff 90       	pop	r15
    6026:	ef 90       	pop	r14
    6028:	df 90       	pop	r13
    602a:	cf 90       	pop	r12
    602c:	bf 90       	pop	r11
    602e:	9f 90       	pop	r9
    6030:	8f 90       	pop	r8
    6032:	7f 90       	pop	r7
    6034:	6f 90       	pop	r6
    6036:	08 95       	ret

00006038 <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    6038:	88 e0       	ldi	r24, 0x08	; 8
    603a:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    603e:	80 ec       	ldi	r24, 0xC0	; 192
    6040:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    6044:	e0 e0       	ldi	r30, 0x00	; 0
    6046:	f8 e0       	ldi	r31, 0x08	; 8
    6048:	8f ef       	ldi	r24, 0xFF	; 255
    604a:	9f ef       	ldi	r25, 0xFF	; 255
    604c:	86 a3       	std	Z+38, r24	; 0x26
    604e:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    6050:	80 81       	ld	r24, Z
    6052:	80 7f       	andi	r24, 0xF0	; 240
    6054:	84 60       	ori	r24, 0x04	; 4
    6056:	80 83       	st	Z, r24
  
	
	
}
    6058:	08 95       	ret

0000605a <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    605a:	f8 94       	cli
  UNIX_time = time;
    605c:	60 93 2b 31 	sts	0x312B, r22
    6060:	70 93 2c 31 	sts	0x312C, r23
    6064:	80 93 2d 31 	sts	0x312D, r24
    6068:	90 93 2e 31 	sts	0x312E, r25
  sei();
    606c:	78 94       	sei
}
    606e:	08 95       	ret

00006070 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    6070:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    6072:	20 91 60 08 	lds	r18, 0x0860
    6076:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    607a:	60 91 20 08 	lds	r22, 0x0820
    607e:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    6082:	80 91 60 08 	lds	r24, 0x0860
    6086:	90 91 61 08 	lds	r25, 0x0861
    608a:	28 17       	cp	r18, r24
    608c:	39 07       	cpc	r19, r25
    608e:	41 f0       	breq	.+16     	; 0x60a0 <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    6090:	20 91 60 08 	lds	r18, 0x0860
    6094:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    6098:	60 91 20 08 	lds	r22, 0x0820
    609c:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    60a0:	78 94       	sei
    60a2:	40 e0       	ldi	r20, 0x00	; 0
    60a4:	50 e0       	ldi	r21, 0x00	; 0
    60a6:	a9 01       	movw	r20, r18
    60a8:	33 27       	eor	r19, r19
    60aa:	22 27       	eor	r18, r18
    60ac:	cb 01       	movw	r24, r22
    60ae:	a0 e0       	ldi	r26, 0x00	; 0
    60b0:	b0 e0       	ldi	r27, 0x00	; 0
    60b2:	28 0f       	add	r18, r24
    60b4:	39 1f       	adc	r19, r25
    60b6:	4a 1f       	adc	r20, r26
    60b8:	5b 1f       	adc	r21, r27
  return result;
}
    60ba:	b9 01       	movw	r22, r18
    60bc:	ca 01       	movw	r24, r20
    60be:	08 95       	ret

000060c0 <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    60c0:	e0 e0       	ldi	r30, 0x00	; 0
    60c2:	f2 e0       	ldi	r31, 0x02	; 2
    60c4:	92 e0       	ldi	r25, 0x02	; 2
    60c6:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    60c8:	8a e2       	ldi	r24, 0x2A	; 42
    60ca:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    60cc:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    60ce:	83 e2       	ldi	r24, 0x23	; 35
    60d0:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    60d2:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    60d4:	88 e3       	ldi	r24, 0x38	; 56
    60d6:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    60d8:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    60da:	81 e3       	ldi	r24, 0x31	; 49
    60dc:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    60de:	84 81       	ldd	r24, Z+4	; 0x04
    60e0:	88 7f       	andi	r24, 0xF8	; 248
    60e2:	84 60       	ori	r24, 0x04	; 4
    60e4:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    60e6:	80 e1       	ldi	r24, 0x10	; 16
    60e8:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    60ea:	83 81       	ldd	r24, Z+3	; 0x03
    60ec:	80 6c       	ori	r24, 0xC0	; 192
    60ee:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    60f0:	81 81       	ldd	r24, Z+1	; 0x01
    60f2:	88 61       	ori	r24, 0x18	; 24
    60f4:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    60f6:	80 a1       	ldd	r24, Z+32	; 0x20
    60f8:	80 68       	ori	r24, 0x80	; 128
    60fa:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    60fc:	80 a5       	ldd	r24, Z+40	; 0x28
    60fe:	80 68       	ori	r24, 0x80	; 128
    6100:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    6102:	80 ad       	ldd	r24, Z+56	; 0x38
    6104:	80 68       	ori	r24, 0x80	; 128
    6106:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    6108:	80 a9       	ldd	r24, Z+48	; 0x30
    610a:	80 68       	ori	r24, 0x80	; 128
    610c:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    610e:	81 e0       	ldi	r24, 0x01	; 1
    6110:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    6112:	e0 e4       	ldi	r30, 0x40	; 64
    6114:	f9 e0       	ldi	r31, 0x09	; 9
    6116:	80 e4       	ldi	r24, 0x40	; 64
    6118:	98 e3       	ldi	r25, 0x38	; 56
    611a:	86 a3       	std	Z+38, r24	; 0x26
    611c:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    611e:	80 81       	ld	r24, Z
    6120:	80 7f       	andi	r24, 0xF0	; 240
    6122:	87 60       	ori	r24, 0x07	; 7
    6124:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    6126:	86 81       	ldd	r24, Z+6	; 0x06
    6128:	83 60       	ori	r24, 0x03	; 3
    612a:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    612c:	e0 e0       	ldi	r30, 0x00	; 0
    612e:	fb e0       	ldi	r31, 0x0B	; 11
    6130:	80 e0       	ldi	r24, 0x00	; 0
    6132:	91 e0       	ldi	r25, 0x01	; 1
    6134:	86 a3       	std	Z+38, r24	; 0x26
    6136:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    6138:	80 81       	ld	r24, Z
    613a:	80 7f       	andi	r24, 0xF0	; 240
    613c:	84 60       	ori	r24, 0x04	; 4
    613e:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    6140:	86 81       	ldd	r24, Z+6	; 0x06
    6142:	83 60       	ori	r24, 0x03	; 3
    6144:	86 83       	std	Z+6, r24	; 0x06

}
    6146:	08 95       	ret

00006148 <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    6148:	e0 e0       	ldi	r30, 0x00	; 0
    614a:	f2 e0       	ldi	r31, 0x02	; 2
    614c:	60 89       	ldd	r22, Z+16	; 0x10
    614e:	71 89       	ldd	r23, Z+17	; 0x11
    6150:	80 e0       	ldi	r24, 0x00	; 0
    6152:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    6154:	2a ea       	ldi	r18, 0xAA	; 170
    6156:	35 e2       	ldi	r19, 0x25	; 37
    6158:	43 e0       	ldi	r20, 0x03	; 3
    615a:	50 e0       	ldi	r21, 0x00	; 0
    615c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6160:	67 5f       	subi	r22, 0xF7	; 247
    6162:	7a 40       	sbci	r23, 0x0A	; 10
    6164:	88 4e       	sbci	r24, 0xE8	; 232
    6166:	91 40       	sbci	r25, 0x01	; 1
    6168:	21 e5       	ldi	r18, 0x51	; 81
    616a:	37 e7       	ldi	r19, 0x77	; 119
    616c:	45 e0       	ldi	r20, 0x05	; 5
    616e:	50 e0       	ldi	r21, 0x00	; 0
    6170:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6174:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    6176:	08 95       	ret

00006178 <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    6178:	e0 e0       	ldi	r30, 0x00	; 0
    617a:	f2 e0       	ldi	r31, 0x02	; 2
    617c:	62 89       	ldd	r22, Z+18	; 0x12
    617e:	73 89       	ldd	r23, Z+19	; 0x13
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    6184:	27 ec       	ldi	r18, 0xC7	; 199
    6186:	3d e1       	ldi	r19, 0x1D	; 29
    6188:	40 e0       	ldi	r20, 0x00	; 0
    618a:	50 e0       	ldi	r21, 0x00	; 0
    618c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6190:	6c 59       	subi	r22, 0x9C	; 156
    6192:	7c 41       	sbci	r23, 0x1C	; 28
    6194:	8b 41       	sbci	r24, 0x1B	; 27
    6196:	90 40       	sbci	r25, 0x00	; 0
    6198:	28 ed       	ldi	r18, 0xD8	; 216
    619a:	3f e3       	ldi	r19, 0x3F	; 63
    619c:	41 e0       	ldi	r20, 0x01	; 1
    619e:	50 e0       	ldi	r21, 0x00	; 0
    61a0:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    61a4:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    61a6:	08 95       	ret

000061a8 <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    61a8:	e0 e0       	ldi	r30, 0x00	; 0
    61aa:	f2 e0       	ldi	r31, 0x02	; 2
    61ac:	86 89       	ldd	r24, Z+22	; 0x16
    61ae:	97 89       	ldd	r25, Z+23	; 0x17
    61b0:	f4 e0       	ldi	r31, 0x04	; 4
    61b2:	96 95       	lsr	r25
    61b4:	87 95       	ror	r24
    61b6:	fa 95       	dec	r31
    61b8:	e1 f7       	brne	.-8      	; 0x61b2 <Sensors_ReadMicrophone+0xa>
}
    61ba:	08 95       	ret

000061bc <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    61bc:	e0 e0       	ldi	r30, 0x00	; 0
    61be:	f2 e0       	ldi	r31, 0x02	; 2
    61c0:	64 89       	ldd	r22, Z+20	; 0x14
    61c2:	75 89       	ldd	r23, Z+21	; 0x15
    61c4:	80 e0       	ldi	r24, 0x00	; 0
    61c6:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    61c8:	22 e2       	ldi	r18, 0x22	; 34
    61ca:	31 ea       	ldi	r19, 0xA1	; 161
    61cc:	40 e0       	ldi	r20, 0x00	; 0
    61ce:	50 e0       	ldi	r21, 0x00	; 0
    61d0:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    61d4:	6f 53       	subi	r22, 0x3F	; 63
    61d6:	74 41       	sbci	r23, 0x14	; 20
    61d8:	8e 49       	sbci	r24, 0x9E	; 158
    61da:	9f 4f       	sbci	r25, 0xFF	; 255
    61dc:	27 ed       	ldi	r18, 0xD7	; 215
    61de:	36 e4       	ldi	r19, 0x46	; 70
    61e0:	49 e0       	ldi	r20, 0x09	; 9
    61e2:	50 e0       	ldi	r21, 0x00	; 0
    61e4:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    61e8:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    61ea:	08 95       	ret

000061ec <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    61ec:	10 92 34 31 	sts	0x3134, r1
  	temperatureBufferToWriteTo = 1;
    61f0:	81 e0       	ldi	r24, 0x01	; 1
    61f2:	80 93 7f 2d 	sts	0x2D7F, r24
	okToSendTemperatureBuffer1 = false;
    61f6:	10 92 32 31 	sts	0x3132, r1
	okToSendTemperatureBuffer2 = false;
    61fa:	10 92 33 31 	sts	0x3133, r1
}
    61fe:	08 95       	ret

00006200 <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    6200:	10 92 37 31 	sts	0x3137, r1
	pressureBufferToWriteTo = 1;
    6204:	81 e0       	ldi	r24, 0x01	; 1
    6206:	80 93 80 2d 	sts	0x2D80, r24
	okToSendPressureBuffer1 = false;
    620a:	10 92 35 31 	sts	0x3135, r1
	okToSendPressureBuffer2 = false;
    620e:	10 92 36 31 	sts	0x3136, r1
}
    6212:	08 95       	ret

00006214 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    6214:	10 92 3a 31 	sts	0x313A, r1
	humidityBufferToWriteTo = 1;
    6218:	81 e0       	ldi	r24, 0x01	; 1
    621a:	80 93 81 2d 	sts	0x2D81, r24
	okToSendHumidityBuffer1 = false;
    621e:	10 92 38 31 	sts	0x3138, r1
	okToSendHumidityBuffer2 = false;
    6222:	10 92 39 31 	sts	0x3139, r1
}
    6226:	08 95       	ret

00006228 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    6228:	10 92 3d 31 	sts	0x313D, r1
    622c:	10 92 3e 31 	sts	0x313E, r1
	microphoneBufferToWriteTo = 1;
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	80 93 82 2d 	sts	0x2D82, r24
	okToSendMicrophoneBuffer1 = false;
    6236:	10 92 3b 31 	sts	0x313B, r1
	okToSendMicrophoneBuffer2 = false;
    623a:	10 92 3c 31 	sts	0x313C, r1
}
    623e:	08 95       	ret

00006240 <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    6240:	10 92 41 31 	sts	0x3141, r1
	lightBufferToWriteTo = 1;
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	80 93 83 2d 	sts	0x2D83, r24
	okToSendLightBuffer1 = false;
    624a:	10 92 3f 31 	sts	0x313F, r1
	okToSendLightBuffer2 = false;
    624e:	10 92 40 31 	sts	0x3140, r1
}
    6252:	08 95       	ret

00006254 <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    6254:	1f 92       	push	r1
    6256:	0f 92       	push	r0
    6258:	0f b6       	in	r0, 0x3f	; 63
    625a:	0f 92       	push	r0
    625c:	0b b6       	in	r0, 0x3b	; 59
    625e:	0f 92       	push	r0
    6260:	11 24       	eor	r1, r1
    6262:	0f 93       	push	r16
    6264:	1f 93       	push	r17
    6266:	2f 93       	push	r18
    6268:	3f 93       	push	r19
    626a:	4f 93       	push	r20
    626c:	5f 93       	push	r21
    626e:	6f 93       	push	r22
    6270:	7f 93       	push	r23
    6272:	8f 93       	push	r24
    6274:	9f 93       	push	r25
    6276:	af 93       	push	r26
    6278:	bf 93       	push	r27
    627a:	ef 93       	push	r30
    627c:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    627e:	80 91 30 31 	lds	r24, 0x3130
    6282:	88 23       	and	r24, r24
    6284:	09 f4       	brne	.+2      	; 0x6288 <__vector_108+0x34>
    6286:	91 c0       	rjmp	.+290    	; 0x63aa <__vector_108+0x156>
    6288:	80 91 89 2d 	lds	r24, 0x2D89
    628c:	88 23       	and	r24, r24
    628e:	09 f4       	brne	.+2      	; 0x6292 <__vector_108+0x3e>
    6290:	8c c0       	rjmp	.+280    	; 0x63aa <__vector_108+0x156>
	  if(microphoneBufferToWriteTo == 1){
    6292:	80 91 82 2d 	lds	r24, 0x2D82
    6296:	81 30       	cpi	r24, 0x01	; 1
    6298:	09 f0       	breq	.+2      	; 0x629c <__vector_108+0x48>
    629a:	43 c0       	rjmp	.+134    	; 0x6322 <__vector_108+0xce>
	    if(microphoneBufferCounter == 0){
    629c:	80 91 3d 31 	lds	r24, 0x313D
    62a0:	90 91 3e 31 	lds	r25, 0x313E
    62a4:	89 2b       	or	r24, r25
    62a6:	51 f4       	brne	.+20     	; 0x62bc <__vector_108+0x68>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    62a8:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    62ac:	60 93 e8 30 	sts	0x30E8, r22
    62b0:	70 93 e9 30 	sts	0x30E9, r23
    62b4:	80 93 ea 30 	sts	0x30EA, r24
    62b8:	90 93 eb 30 	sts	0x30EB, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    62bc:	00 91 3d 31 	lds	r16, 0x313D
    62c0:	10 91 3e 31 	lds	r17, 0x313E
    62c4:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <Sensors_ReadMicrophone>
    62c8:	05 56       	subi	r16, 0x65	; 101
    62ca:	1c 4b       	sbci	r17, 0xBC	; 188
    62cc:	f8 01       	movw	r30, r16
    62ce:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    62d0:	80 91 4a 31 	lds	r24, 0x314A
    62d4:	88 23       	and	r24, r24
    62d6:	49 f4       	brne	.+18     	; 0x62ea <__vector_108+0x96>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    62d8:	e0 91 3d 31 	lds	r30, 0x313D
    62dc:	f0 91 3e 31 	lds	r31, 0x313E
    62e0:	e5 56       	subi	r30, 0x65	; 101
    62e2:	fc 4b       	sbci	r31, 0xBC	; 188
    62e4:	80 81       	ld	r24, Z
    62e6:	80 93 49 31 	sts	0x3149, r24
	    }
	    microphoneBufferCounter++;
    62ea:	80 91 3d 31 	lds	r24, 0x313D
    62ee:	90 91 3e 31 	lds	r25, 0x313E
    62f2:	01 96       	adiw	r24, 0x01	; 1
    62f4:	80 93 3d 31 	sts	0x313D, r24
    62f8:	90 93 3e 31 	sts	0x313E, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    62fc:	88 5e       	subi	r24, 0xE8	; 232
    62fe:	93 40       	sbci	r25, 0x03	; 3
    6300:	09 f0       	breq	.+2      	; 0x6304 <__vector_108+0xb0>
    6302:	5b c0       	rjmp	.+182    	; 0x63ba <__vector_108+0x166>
	    	quickMic = microphoneBuffer1[0];
    6304:	80 91 9b 43 	lds	r24, 0x439B
    6308:	80 93 49 31 	sts	0x3149, r24
	    	microphoneBufferCounter=0;
    630c:	10 92 3d 31 	sts	0x313D, r1
    6310:	10 92 3e 31 	sts	0x313E, r1
	    	microphoneBufferToWriteTo = 2;
    6314:	82 e0       	ldi	r24, 0x02	; 2
    6316:	80 93 82 2d 	sts	0x2D82, r24
	    	okToSendMicrophoneBuffer1 = true;
    631a:	81 e0       	ldi	r24, 0x01	; 1
    631c:	80 93 3b 31 	sts	0x313B, r24
    6320:	4c c0       	rjmp	.+152    	; 0x63ba <__vector_108+0x166>
	    }
	  } else if (microphoneBufferToWriteTo == 2){
    6322:	82 30       	cpi	r24, 0x02	; 2
    6324:	09 f0       	breq	.+2      	; 0x6328 <__vector_108+0xd4>
    6326:	49 c0       	rjmp	.+146    	; 0x63ba <__vector_108+0x166>
	    if(microphoneBufferCounter == 0){
    6328:	80 91 3d 31 	lds	r24, 0x313D
    632c:	90 91 3e 31 	lds	r25, 0x313E
    6330:	89 2b       	or	r24, r25
    6332:	51 f4       	brne	.+20     	; 0x6348 <__vector_108+0xf4>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    6334:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6338:	60 93 ec 30 	sts	0x30EC, r22
    633c:	70 93 ed 30 	sts	0x30ED, r23
    6340:	80 93 ee 30 	sts	0x30EE, r24
    6344:	90 93 ef 30 	sts	0x30EF, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6348:	00 91 3d 31 	lds	r16, 0x313D
    634c:	10 91 3e 31 	lds	r17, 0x313E
    6350:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <Sensors_ReadMicrophone>
    6354:	03 56       	subi	r16, 0x63	; 99
    6356:	11 4c       	sbci	r17, 0xC1	; 193
    6358:	f8 01       	movw	r30, r16
    635a:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    635c:	80 91 4a 31 	lds	r24, 0x314A
    6360:	88 23       	and	r24, r24
    6362:	49 f4       	brne	.+18     	; 0x6376 <__vector_108+0x122>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    6364:	e0 91 3d 31 	lds	r30, 0x313D
    6368:	f0 91 3e 31 	lds	r31, 0x313E
    636c:	e3 56       	subi	r30, 0x63	; 99
    636e:	f1 4c       	sbci	r31, 0xC1	; 193
    6370:	80 81       	ld	r24, Z
    6372:	80 93 49 31 	sts	0x3149, r24
	    }

	    microphoneBufferCounter++;
    6376:	80 91 3d 31 	lds	r24, 0x313D
    637a:	90 91 3e 31 	lds	r25, 0x313E
    637e:	01 96       	adiw	r24, 0x01	; 1
    6380:	80 93 3d 31 	sts	0x313D, r24
    6384:	90 93 3e 31 	sts	0x313E, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6388:	88 5e       	subi	r24, 0xE8	; 232
    638a:	93 40       	sbci	r25, 0x03	; 3
    638c:	b1 f4       	brne	.+44     	; 0x63ba <__vector_108+0x166>
	    	quickMic = microphoneBuffer2[0];
    638e:	80 91 9d 3e 	lds	r24, 0x3E9D
    6392:	80 93 49 31 	sts	0x3149, r24
	    	microphoneBufferCounter=0;
    6396:	10 92 3d 31 	sts	0x313D, r1
    639a:	10 92 3e 31 	sts	0x313E, r1
	    	microphoneBufferToWriteTo = 1;
    639e:	81 e0       	ldi	r24, 0x01	; 1
    63a0:	80 93 82 2d 	sts	0x2D82, r24
	    	okToSendMicrophoneBuffer2 = true;
    63a4:	80 93 3c 31 	sts	0x313C, r24
    63a8:	08 c0       	rjmp	.+16     	; 0x63ba <__vector_108+0x166>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    63aa:	80 91 4a 31 	lds	r24, 0x314A
    63ae:	88 23       	and	r24, r24
    63b0:	21 f4       	brne	.+8      	; 0x63ba <__vector_108+0x166>
			quickMic = Sensors_ReadMicrophone();
    63b2:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <Sensors_ReadMicrophone>
    63b6:	80 93 49 31 	sts	0x3149, r24
		}
	}
	micSampleCounter++;
    63ba:	80 91 4a 31 	lds	r24, 0x314A
    63be:	8f 5f       	subi	r24, 0xFF	; 255
    63c0:	80 93 4a 31 	sts	0x314A, r24
}
    63c4:	ff 91       	pop	r31
    63c6:	ef 91       	pop	r30
    63c8:	bf 91       	pop	r27
    63ca:	af 91       	pop	r26
    63cc:	9f 91       	pop	r25
    63ce:	8f 91       	pop	r24
    63d0:	7f 91       	pop	r23
    63d2:	6f 91       	pop	r22
    63d4:	5f 91       	pop	r21
    63d6:	4f 91       	pop	r20
    63d8:	3f 91       	pop	r19
    63da:	2f 91       	pop	r18
    63dc:	1f 91       	pop	r17
    63de:	0f 91       	pop	r16
    63e0:	0f 90       	pop	r0
    63e2:	0b be       	out	0x3b, r0	; 59
    63e4:	0f 90       	pop	r0
    63e6:	0f be       	out	0x3f, r0	; 63
    63e8:	0f 90       	pop	r0
    63ea:	1f 90       	pop	r1
    63ec:	18 95       	reti

000063ee <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    63ee:	30 91 96 48 	lds	r19, 0x4896
    63f2:	93 2f       	mov	r25, r19
    63f4:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    63f6:	28 2f       	mov	r18, r24
    63f8:	20 68       	ori	r18, 0x80	; 128
    63fa:	20 93 37 51 	sts	0x5137, r18


	LightPort.MASTER.ADDR = writeAddress;
    63fe:	e0 e8       	ldi	r30, 0x80	; 128
    6400:	f4 e0       	ldi	r31, 0x04	; 4
    6402:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6404:	80 91 84 04 	lds	r24, 0x0484
    6408:	86 ff       	sbrs	r24, 6
    640a:	fc cf       	rjmp	.-8      	; 0x6404 <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    640c:	e0 e8       	ldi	r30, 0x80	; 128
    640e:	f4 e0       	ldi	r31, 0x04	; 4
    6410:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6412:	80 91 84 04 	lds	r24, 0x0484
    6416:	86 ff       	sbrs	r24, 6
    6418:	fc cf       	rjmp	.-8      	; 0x6412 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    641a:	83 2f       	mov	r24, r19
    641c:	81 60       	ori	r24, 0x01	; 1
    641e:	80 93 05 48 	sts	0x4805, r24
	LightPort.MASTER.ADDR = writeAddress;
    6422:	e0 e8       	ldi	r30, 0x80	; 128
    6424:	f4 e0       	ldi	r31, 0x04	; 4
    6426:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6428:	80 91 84 04 	lds	r24, 0x0484
    642c:	87 ff       	sbrs	r24, 7
    642e:	fc cf       	rjmp	.-8      	; 0x6428 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    6430:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6434:	97 e0       	ldi	r25, 0x07	; 7
    6436:	e0 e8       	ldi	r30, 0x80	; 128
    6438:	f4 e0       	ldi	r31, 0x04	; 4
    643a:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    643c:	08 95       	ret

0000643e <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    643e:	80 e0       	ldi	r24, 0x00	; 0
    6440:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    6444:	20 91 96 48 	lds	r18, 0x4896
    6448:	92 2f       	mov	r25, r18
    644a:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    644c:	80 e9       	ldi	r24, 0x90	; 144
    644e:	80 93 37 51 	sts	0x5137, r24

	LightPort.MASTER.ADDR = writeAddress;
    6452:	e0 e8       	ldi	r30, 0x80	; 128
    6454:	f4 e0       	ldi	r31, 0x04	; 4
    6456:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6458:	80 91 84 04 	lds	r24, 0x0484
    645c:	86 ff       	sbrs	r24, 6
    645e:	fc cf       	rjmp	.-8      	; 0x6458 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6460:	80 e9       	ldi	r24, 0x90	; 144
    6462:	e0 e8       	ldi	r30, 0x80	; 128
    6464:	f4 e0       	ldi	r31, 0x04	; 4
    6466:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6468:	80 91 84 04 	lds	r24, 0x0484
    646c:	86 ff       	sbrs	r24, 6
    646e:	fc cf       	rjmp	.-8      	; 0x6468 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    6470:	82 2f       	mov	r24, r18
    6472:	81 60       	ori	r24, 0x01	; 1
    6474:	80 93 05 48 	sts	0x4805, r24
	LightPort.MASTER.ADDR = writeAddress;
    6478:	e0 e8       	ldi	r30, 0x80	; 128
    647a:	f4 e0       	ldi	r31, 0x04	; 4
    647c:	86 83       	std	Z+6, r24	; 0x06
    647e:	ee e6       	ldi	r30, 0x6E	; 110
    6480:	f8 e4       	ldi	r31, 0x48	; 72
    6482:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6484:	a0 e8       	ldi	r26, 0x80	; 128
    6486:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6488:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    648a:	80 91 84 04 	lds	r24, 0x0484
    648e:	87 ff       	sbrs	r24, 7
    6490:	fc cf       	rjmp	.-8      	; 0x648a <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    6492:	80 91 87 04 	lds	r24, 0x0487
    6496:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    6498:	97 30       	cpi	r25, 0x07	; 7
    649a:	19 f0       	breq	.+6      	; 0x64a2 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    649c:	13 96       	adiw	r26, 0x03	; 3
    649e:	2c 93       	st	X, r18
    64a0:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    64a2:	9f 5f       	subi	r25, 0xFF	; 255
    64a4:	31 96       	adiw	r30, 0x01	; 1
    64a6:	98 30       	cpi	r25, 0x08	; 8
    64a8:	81 f7       	brne	.-32     	; 0x648a <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    64aa:	87 e0       	ldi	r24, 0x07	; 7
    64ac:	e0 e8       	ldi	r30, 0x80	; 128
    64ae:	f4 e0       	ldi	r31, 0x04	; 4
    64b0:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    64b2:	90 91 6f 48 	lds	r25, 0x486F
    64b6:	80 e0       	ldi	r24, 0x00	; 0
    64b8:	20 91 6e 48 	lds	r18, 0x486E
    64bc:	82 0f       	add	r24, r18
    64be:	91 1d       	adc	r25, r1
    64c0:	80 93 e6 39 	sts	0x39E6, r24
    64c4:	90 93 e7 39 	sts	0x39E7, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    64c8:	90 91 71 48 	lds	r25, 0x4871
    64cc:	80 e0       	ldi	r24, 0x00	; 0
    64ce:	20 91 70 48 	lds	r18, 0x4870
    64d2:	82 0f       	add	r24, r18
    64d4:	91 1d       	adc	r25, r1
    64d6:	80 93 e8 39 	sts	0x39E8, r24
    64da:	90 93 e9 39 	sts	0x39E9, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    64de:	90 91 73 48 	lds	r25, 0x4873
    64e2:	80 e0       	ldi	r24, 0x00	; 0
    64e4:	20 91 72 48 	lds	r18, 0x4872
    64e8:	82 0f       	add	r24, r18
    64ea:	91 1d       	adc	r25, r1
    64ec:	80 93 ea 39 	sts	0x39EA, r24
    64f0:	90 93 eb 39 	sts	0x39EB, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    64f4:	90 91 75 48 	lds	r25, 0x4875
    64f8:	80 e0       	ldi	r24, 0x00	; 0
    64fa:	20 91 74 48 	lds	r18, 0x4874
    64fe:	82 0f       	add	r24, r18
    6500:	91 1d       	adc	r25, r1
    6502:	80 93 ec 39 	sts	0x39EC, r24
    6506:	90 93 ed 39 	sts	0x39ED, r25
}
    650a:	08 95       	ret

0000650c <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    650c:	e8 2f       	mov	r30, r24
    650e:	f0 e0       	ldi	r31, 0x00	; 0
    6510:	ee 0f       	add	r30, r30
    6512:	ff 1f       	adc	r31, r31
    6514:	ea 51       	subi	r30, 0x1A	; 26
    6516:	f6 4c       	sbci	r31, 0xC6	; 198
	return colors[color];
}
    6518:	80 81       	ld	r24, Z
    651a:	91 81       	ldd	r25, Z+1	; 0x01
    651c:	08 95       	ret

0000651e <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    651e:	90 91 96 48 	lds	r25, 0x4896
    6522:	9e 7f       	andi	r25, 0xFE	; 254
    6524:	90 93 05 48 	sts	0x4805, r25
	commandCode = 0b10000000 | location;
    6528:	28 2f       	mov	r18, r24
    652a:	20 68       	ori	r18, 0x80	; 128
    652c:	20 93 37 51 	sts	0x5137, r18

	LightPort.MASTER.ADDR = writeAddress;
    6530:	e0 e8       	ldi	r30, 0x80	; 128
    6532:	f4 e0       	ldi	r31, 0x04	; 4
    6534:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6536:	80 91 84 04 	lds	r24, 0x0484
    653a:	86 ff       	sbrs	r24, 6
    653c:	fc cf       	rjmp	.-8      	; 0x6536 <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    653e:	e0 e8       	ldi	r30, 0x80	; 128
    6540:	f4 e0       	ldi	r31, 0x04	; 4
    6542:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6544:	80 91 84 04 	lds	r24, 0x0484
    6548:	86 ff       	sbrs	r24, 6
    654a:	fc cf       	rjmp	.-8      	; 0x6544 <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    654c:	e0 e8       	ldi	r30, 0x80	; 128
    654e:	f4 e0       	ldi	r31, 0x04	; 4
    6550:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6552:	80 91 84 04 	lds	r24, 0x0484
    6556:	86 ff       	sbrs	r24, 6
    6558:	fc cf       	rjmp	.-8      	; 0x6552 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    655a:	87 e0       	ldi	r24, 0x07	; 7
    655c:	e0 e8       	ldi	r30, 0x80	; 128
    655e:	f4 e0       	ldi	r31, 0x04	; 4
    6560:	83 83       	std	Z+3, r24	; 0x03

}
    6562:	08 95       	ret

00006564 <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    6564:	80 e0       	ldi	r24, 0x00	; 0
    6566:	61 e0       	ldi	r22, 0x01	; 1
    6568:	0e 94 8f 32 	call	0x651e	; 0x651e <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    656c:	80 91 2f 31 	lds	r24, 0x312F
    6570:	e9 e4       	ldi	r30, 0x49	; 73
    6572:	fd e2       	ldi	r31, 0x2D	; 45
    6574:	e8 0f       	add	r30, r24
    6576:	f1 1d       	adc	r31, r1
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	60 81       	ld	r22, Z
    657c:	0e 94 8f 32 	call	0x651e	; 0x651e <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    6580:	80 91 2f 31 	lds	r24, 0x312F
    6584:	e2 e5       	ldi	r30, 0x52	; 82
    6586:	fd e2       	ldi	r31, 0x2D	; 45
    6588:	e8 0f       	add	r30, r24
    658a:	f1 1d       	adc	r31, r1
    658c:	87 e0       	ldi	r24, 0x07	; 7
    658e:	60 81       	ld	r22, Z
    6590:	0e 94 8f 32 	call	0x651e	; 0x651e <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    6594:	80 e0       	ldi	r24, 0x00	; 0
    6596:	63 e0       	ldi	r22, 0x03	; 3
    6598:	0e 94 8f 32 	call	0x651e	; 0x651e <Light_writeByte>
}
    659c:	08 95       	ret

0000659e <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    659e:	80 93 96 48 	sts	0x4896, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    65a2:	e0 e8       	ldi	r30, 0x80	; 128
    65a4:	f4 e0       	ldi	r31, 0x04	; 4
    65a6:	88 e0       	ldi	r24, 0x08	; 8
    65a8:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    65aa:	84 e0       	ldi	r24, 0x04	; 4
    65ac:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    65ae:	8d e0       	ldi	r24, 0x0D	; 13
    65b0:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    65b2:	81 e0       	ldi	r24, 0x01	; 1
    65b4:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    65b6:	10 92 2f 31 	sts	0x312F, r1
	Light_setGain();
    65ba:	0e 94 b2 32 	call	0x6564	; 0x6564 <Light_setGain>
}
    65be:	08 95       	ret

000065c0 <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    65c0:	1f 92       	push	r1
    65c2:	0f 92       	push	r0
    65c4:	0f b6       	in	r0, 0x3f	; 63
    65c6:	0f 92       	push	r0
    65c8:	0b b6       	in	r0, 0x3b	; 59
    65ca:	0f 92       	push	r0
    65cc:	11 24       	eor	r1, r1
    65ce:	6f 92       	push	r6
    65d0:	7f 92       	push	r7
    65d2:	8f 92       	push	r8
    65d4:	9f 92       	push	r9
    65d6:	af 92       	push	r10
    65d8:	bf 92       	push	r11
    65da:	cf 92       	push	r12
    65dc:	df 92       	push	r13
    65de:	ef 92       	push	r14
    65e0:	ff 92       	push	r15
    65e2:	0f 93       	push	r16
    65e4:	1f 93       	push	r17
    65e6:	2f 93       	push	r18
    65e8:	3f 93       	push	r19
    65ea:	4f 93       	push	r20
    65ec:	5f 93       	push	r21
    65ee:	6f 93       	push	r22
    65f0:	7f 93       	push	r23
    65f2:	8f 93       	push	r24
    65f4:	9f 93       	push	r25
    65f6:	af 93       	push	r26
    65f8:	bf 93       	push	r27
    65fa:	cf 93       	push	r28
    65fc:	df 93       	push	r29
    65fe:	ef 93       	push	r30
    6600:	ff 93       	push	r31
    UNIX_time++;
    6602:	80 91 2b 31 	lds	r24, 0x312B
    6606:	90 91 2c 31 	lds	r25, 0x312C
    660a:	a0 91 2d 31 	lds	r26, 0x312D
    660e:	b0 91 2e 31 	lds	r27, 0x312E
    6612:	01 96       	adiw	r24, 0x01	; 1
    6614:	a1 1d       	adc	r26, r1
    6616:	b1 1d       	adc	r27, r1
    6618:	80 93 2b 31 	sts	0x312B, r24
    661c:	90 93 2c 31 	sts	0x312C, r25
    6620:	a0 93 2d 31 	sts	0x312D, r26
    6624:	b0 93 2e 31 	sts	0x312E, r27
	if(recording){
    6628:	80 91 30 31 	lds	r24, 0x3130
    662c:	88 23       	and	r24, r24
    662e:	09 f4       	brne	.+2      	; 0x6632 <__vector_83+0x72>
    6630:	a0 c2       	rjmp	.+1344   	; 0x6b72 <__vector_83+0x5b2>
	  rtcBlockCounter++;
    6632:	80 91 43 31 	lds	r24, 0x3143
    6636:	8f 5f       	subi	r24, 0xFF	; 255
    6638:	80 93 43 31 	sts	0x3143, r24
	  if(rtcBlockCounter == 0){
    663c:	88 23       	and	r24, r24
    663e:	19 f4       	brne	.+6      	; 0x6646 <__vector_83+0x86>
	    okToSendRTCBlock = true;
    6640:	81 e0       	ldi	r24, 0x01	; 1
    6642:	80 93 42 31 	sts	0x3142, r24
	  }

	  if(wantToRecordTemperature){
    6646:	80 91 84 2d 	lds	r24, 0x2D84
    664a:	88 23       	and	r24, r24
    664c:	09 f4       	brne	.+2      	; 0x6650 <__vector_83+0x90>
    664e:	75 c0       	rjmp	.+234    	; 0x673a <__vector_83+0x17a>
		  if(temperatureBufferToWriteTo == 1){
    6650:	80 91 7f 2d 	lds	r24, 0x2D7F
    6654:	81 30       	cpi	r24, 0x01	; 1
    6656:	c9 f5       	brne	.+114    	; 0x66ca <__vector_83+0x10a>
			  if(temperatureBufferCounter == 0){
    6658:	80 91 34 31 	lds	r24, 0x3134
    665c:	88 23       	and	r24, r24
    665e:	51 f4       	brne	.+20     	; 0x6674 <__vector_83+0xb4>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    6660:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6664:	60 93 d0 30 	sts	0x30D0, r22
    6668:	70 93 d1 30 	sts	0x30D1, r23
    666c:	80 93 d2 30 	sts	0x30D2, r24
    6670:	90 93 d3 30 	sts	0x30D3, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    6674:	80 91 34 31 	lds	r24, 0x3134
    6678:	c8 2f       	mov	r28, r24
    667a:	d0 e0       	ldi	r29, 0x00	; 0
    667c:	0e 94 a4 30 	call	0x6148	; 0x6148 <Sensors_ReadTemperature>
    6680:	cc 0f       	add	r28, r28
    6682:	dd 1f       	adc	r29, r29
    6684:	cd 57       	subi	r28, 0x7D	; 125
    6686:	d8 4b       	sbci	r29, 0xB8	; 184
    6688:	88 83       	st	Y, r24
    668a:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    668c:	20 91 34 31 	lds	r18, 0x3134
    6690:	e2 2f       	mov	r30, r18
    6692:	f0 e0       	ldi	r31, 0x00	; 0
    6694:	ee 0f       	add	r30, r30
    6696:	ff 1f       	adc	r31, r31
    6698:	ed 57       	subi	r30, 0x7D	; 125
    669a:	f8 4b       	sbci	r31, 0xB8	; 184
    669c:	80 81       	ld	r24, Z
    669e:	91 81       	ldd	r25, Z+1	; 0x01
    66a0:	6a e0       	ldi	r22, 0x0A	; 10
    66a2:	70 e0       	ldi	r23, 0x00	; 0
    66a4:	0e 94 02 58 	call	0xb004	; 0xb004 <__udivmodhi4>
    66a8:	60 93 44 31 	sts	0x3144, r22
			  temperatureBufferCounter++;
    66ac:	2f 5f       	subi	r18, 0xFF	; 255
    66ae:	20 93 34 31 	sts	0x3134, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    66b2:	2a 30       	cpi	r18, 0x0A	; 10
    66b4:	09 f0       	breq	.+2      	; 0x66b8 <__vector_83+0xf8>
    66b6:	41 c0       	rjmp	.+130    	; 0x673a <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    66b8:	10 92 34 31 	sts	0x3134, r1
				  temperatureBufferToWriteTo = 2;
    66bc:	82 e0       	ldi	r24, 0x02	; 2
    66be:	80 93 7f 2d 	sts	0x2D7F, r24
				  okToSendTemperatureBuffer1 = true;
    66c2:	81 e0       	ldi	r24, 0x01	; 1
    66c4:	80 93 32 31 	sts	0x3132, r24
    66c8:	38 c0       	rjmp	.+112    	; 0x673a <__vector_83+0x17a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    66ca:	82 30       	cpi	r24, 0x02	; 2
    66cc:	b1 f5       	brne	.+108    	; 0x673a <__vector_83+0x17a>
			  if(temperatureBufferCounter == 0){
    66ce:	80 91 34 31 	lds	r24, 0x3134
    66d2:	88 23       	and	r24, r24
    66d4:	51 f4       	brne	.+20     	; 0x66ea <__vector_83+0x12a>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    66d6:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    66da:	60 93 d4 30 	sts	0x30D4, r22
    66de:	70 93 d5 30 	sts	0x30D5, r23
    66e2:	80 93 d6 30 	sts	0x30D6, r24
    66e6:	90 93 d7 30 	sts	0x30D7, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    66ea:	80 91 34 31 	lds	r24, 0x3134
    66ee:	c8 2f       	mov	r28, r24
    66f0:	d0 e0       	ldi	r29, 0x00	; 0
    66f2:	0e 94 a4 30 	call	0x6148	; 0x6148 <Sensors_ReadTemperature>
    66f6:	cc 0f       	add	r28, r28
    66f8:	dd 1f       	adc	r29, r29
    66fa:	c6 5e       	subi	r28, 0xE6	; 230
    66fc:	d7 4b       	sbci	r29, 0xB7	; 183
    66fe:	88 83       	st	Y, r24
    6700:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    6702:	20 91 34 31 	lds	r18, 0x3134
    6706:	e2 2f       	mov	r30, r18
    6708:	f0 e0       	ldi	r31, 0x00	; 0
    670a:	ee 0f       	add	r30, r30
    670c:	ff 1f       	adc	r31, r31
    670e:	e6 5e       	subi	r30, 0xE6	; 230
    6710:	f7 4b       	sbci	r31, 0xB7	; 183
    6712:	80 81       	ld	r24, Z
    6714:	91 81       	ldd	r25, Z+1	; 0x01
    6716:	6a e0       	ldi	r22, 0x0A	; 10
    6718:	70 e0       	ldi	r23, 0x00	; 0
    671a:	0e 94 02 58 	call	0xb004	; 0xb004 <__udivmodhi4>
    671e:	60 93 44 31 	sts	0x3144, r22
			  temperatureBufferCounter++;
    6722:	2f 5f       	subi	r18, 0xFF	; 255
    6724:	20 93 34 31 	sts	0x3134, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    6728:	2a 30       	cpi	r18, 0x0A	; 10
    672a:	39 f4       	brne	.+14     	; 0x673a <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    672c:	10 92 34 31 	sts	0x3134, r1
				  temperatureBufferToWriteTo = 1;
    6730:	81 e0       	ldi	r24, 0x01	; 1
    6732:	80 93 7f 2d 	sts	0x2D7F, r24
				  okToSendTemperatureBuffer2 = true;
    6736:	80 93 33 31 	sts	0x3133, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    673a:	80 91 86 2d 	lds	r24, 0x2D86
    673e:	88 23       	and	r24, r24
    6740:	09 f4       	brne	.+2      	; 0x6744 <__vector_83+0x184>
    6742:	60 c0       	rjmp	.+192    	; 0x6804 <__vector_83+0x244>
		  if(humidityBufferToWriteTo == 1){
    6744:	80 91 81 2d 	lds	r24, 0x2D81
    6748:	81 30       	cpi	r24, 0x01	; 1
    674a:	71 f5       	brne	.+92     	; 0x67a8 <__vector_83+0x1e8>
			  if(humidityBufferCounter == 0){
    674c:	80 91 3a 31 	lds	r24, 0x313A
    6750:	88 23       	and	r24, r24
    6752:	51 f4       	brne	.+20     	; 0x6768 <__vector_83+0x1a8>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    6754:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6758:	60 93 d8 30 	sts	0x30D8, r22
    675c:	70 93 d9 30 	sts	0x30D9, r23
    6760:	80 93 da 30 	sts	0x30DA, r24
    6764:	90 93 db 30 	sts	0x30DB, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    6768:	80 91 3a 31 	lds	r24, 0x313A
    676c:	c8 2f       	mov	r28, r24
    676e:	d0 e0       	ldi	r29, 0x00	; 0
    6770:	0e 94 bc 30 	call	0x6178	; 0x6178 <Sensors_ReadHumidity>
    6774:	c0 58       	subi	r28, 0x80	; 128
    6776:	d7 4b       	sbci	r29, 0xB7	; 183
    6778:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer1[humidityBufferCounter];
    677a:	90 91 3a 31 	lds	r25, 0x313A
    677e:	e9 2f       	mov	r30, r25
    6780:	f0 e0       	ldi	r31, 0x00	; 0
    6782:	e0 58       	subi	r30, 0x80	; 128
    6784:	f7 4b       	sbci	r31, 0xB7	; 183
    6786:	80 81       	ld	r24, Z
    6788:	80 93 45 31 	sts	0x3145, r24
			  humidityBufferCounter++;
    678c:	9f 5f       	subi	r25, 0xFF	; 255
    678e:	90 93 3a 31 	sts	0x313A, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    6792:	9a 30       	cpi	r25, 0x0A	; 10
    6794:	b9 f5       	brne	.+110    	; 0x6804 <__vector_83+0x244>
				  humidityBufferCounter=0;
    6796:	10 92 3a 31 	sts	0x313A, r1
				  humidityBufferToWriteTo = 2;
    679a:	82 e0       	ldi	r24, 0x02	; 2
    679c:	80 93 81 2d 	sts	0x2D81, r24
				  okToSendHumidityBuffer1 = true;
    67a0:	81 e0       	ldi	r24, 0x01	; 1
    67a2:	80 93 38 31 	sts	0x3138, r24
    67a6:	2e c0       	rjmp	.+92     	; 0x6804 <__vector_83+0x244>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    67a8:	82 30       	cpi	r24, 0x02	; 2
    67aa:	61 f5       	brne	.+88     	; 0x6804 <__vector_83+0x244>
			  if(humidityBufferCounter == 0){
    67ac:	80 91 3a 31 	lds	r24, 0x313A
    67b0:	88 23       	and	r24, r24
    67b2:	51 f4       	brne	.+20     	; 0x67c8 <__vector_83+0x208>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    67b4:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    67b8:	60 93 dc 30 	sts	0x30DC, r22
    67bc:	70 93 dd 30 	sts	0x30DD, r23
    67c0:	80 93 de 30 	sts	0x30DE, r24
    67c4:	90 93 df 30 	sts	0x30DF, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    67c8:	80 91 3a 31 	lds	r24, 0x313A
    67cc:	c8 2f       	mov	r28, r24
    67ce:	d0 e0       	ldi	r29, 0x00	; 0
    67d0:	0e 94 bc 30 	call	0x6178	; 0x6178 <Sensors_ReadHumidity>
    67d4:	c7 5e       	subi	r28, 0xE7	; 231
    67d6:	de 4a       	sbci	r29, 0xAE	; 174
    67d8:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer2[humidityBufferCounter];
    67da:	90 91 3a 31 	lds	r25, 0x313A
    67de:	e9 2f       	mov	r30, r25
    67e0:	f0 e0       	ldi	r31, 0x00	; 0
    67e2:	e7 5e       	subi	r30, 0xE7	; 231
    67e4:	fe 4a       	sbci	r31, 0xAE	; 174
    67e6:	80 81       	ld	r24, Z
    67e8:	80 93 45 31 	sts	0x3145, r24
			  humidityBufferCounter++;
    67ec:	9f 5f       	subi	r25, 0xFF	; 255
    67ee:	90 93 3a 31 	sts	0x313A, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    67f2:	9a 30       	cpi	r25, 0x0A	; 10
    67f4:	39 f4       	brne	.+14     	; 0x6804 <__vector_83+0x244>
				  humidityBufferCounter=0;
    67f6:	10 92 3a 31 	sts	0x313A, r1
				  humidityBufferToWriteTo = 1;
    67fa:	81 e0       	ldi	r24, 0x01	; 1
    67fc:	80 93 81 2d 	sts	0x2D81, r24
				  okToSendHumidityBuffer2 = true;
    6800:	80 93 39 31 	sts	0x3139, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    6804:	80 91 85 2d 	lds	r24, 0x2D85
    6808:	88 23       	and	r24, r24
    680a:	09 f4       	brne	.+2      	; 0x680e <__vector_83+0x24e>
    680c:	60 c0       	rjmp	.+192    	; 0x68ce <__vector_83+0x30e>
		  if(pressureBufferToWriteTo == 1){
    680e:	80 91 80 2d 	lds	r24, 0x2D80
    6812:	81 30       	cpi	r24, 0x01	; 1
    6814:	71 f5       	brne	.+92     	; 0x6872 <__vector_83+0x2b2>
			  if(pressureBufferCounter == 0){
    6816:	80 91 37 31 	lds	r24, 0x3137
    681a:	88 23       	and	r24, r24
    681c:	51 f4       	brne	.+20     	; 0x6832 <__vector_83+0x272>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    681e:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6822:	60 93 e0 30 	sts	0x30E0, r22
    6826:	70 93 e1 30 	sts	0x30E1, r23
    682a:	80 93 e2 30 	sts	0x30E2, r24
    682e:	90 93 e3 30 	sts	0x30E3, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    6832:	80 91 37 31 	lds	r24, 0x3137
    6836:	c8 2f       	mov	r28, r24
    6838:	d0 e0       	ldi	r29, 0x00	; 0
    683a:	0e 94 de 30 	call	0x61bc	; 0x61bc <Sensors_ReadPressure>
    683e:	c3 50       	subi	r28, 0x03	; 3
    6840:	d6 4c       	sbci	r29, 0xC6	; 198
    6842:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer1[pressureBufferCounter];
    6844:	90 91 37 31 	lds	r25, 0x3137
    6848:	e9 2f       	mov	r30, r25
    684a:	f0 e0       	ldi	r31, 0x00	; 0
    684c:	e3 50       	subi	r30, 0x03	; 3
    684e:	f6 4c       	sbci	r31, 0xC6	; 198
    6850:	80 81       	ld	r24, Z
    6852:	80 93 46 31 	sts	0x3146, r24

			  pressureBufferCounter++;
    6856:	9f 5f       	subi	r25, 0xFF	; 255
    6858:	90 93 37 31 	sts	0x3137, r25
			  if(pressureBufferCounter == pressureNumberOfSamples){
    685c:	9a 30       	cpi	r25, 0x0A	; 10
    685e:	b9 f5       	brne	.+110    	; 0x68ce <__vector_83+0x30e>
				  pressureBufferCounter=0;
    6860:	10 92 37 31 	sts	0x3137, r1
				  pressureBufferToWriteTo = 2;
    6864:	82 e0       	ldi	r24, 0x02	; 2
    6866:	80 93 80 2d 	sts	0x2D80, r24
				  okToSendPressureBuffer1 = true;
    686a:	81 e0       	ldi	r24, 0x01	; 1
    686c:	80 93 35 31 	sts	0x3135, r24
    6870:	2e c0       	rjmp	.+92     	; 0x68ce <__vector_83+0x30e>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    6872:	82 30       	cpi	r24, 0x02	; 2
    6874:	61 f5       	brne	.+88     	; 0x68ce <__vector_83+0x30e>
			  if(pressureBufferCounter == 0){
    6876:	80 91 37 31 	lds	r24, 0x3137
    687a:	88 23       	and	r24, r24
    687c:	51 f4       	brne	.+20     	; 0x6892 <__vector_83+0x2d2>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    687e:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6882:	60 93 e4 30 	sts	0x30E4, r22
    6886:	70 93 e5 30 	sts	0x30E5, r23
    688a:	80 93 e6 30 	sts	0x30E6, r24
    688e:	90 93 e7 30 	sts	0x30E7, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    6892:	80 91 37 31 	lds	r24, 0x3137
    6896:	c8 2f       	mov	r28, r24
    6898:	d0 e0       	ldi	r29, 0x00	; 0
    689a:	0e 94 de 30 	call	0x61bc	; 0x61bc <Sensors_ReadPressure>
    689e:	c8 5a       	subi	r28, 0xA8	; 168
    68a0:	d7 4b       	sbci	r29, 0xB7	; 183
    68a2:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer2[pressureBufferCounter];
    68a4:	90 91 37 31 	lds	r25, 0x3137
    68a8:	e9 2f       	mov	r30, r25
    68aa:	f0 e0       	ldi	r31, 0x00	; 0
    68ac:	e8 5a       	subi	r30, 0xA8	; 168
    68ae:	f7 4b       	sbci	r31, 0xB7	; 183
    68b0:	80 81       	ld	r24, Z
    68b2:	80 93 46 31 	sts	0x3146, r24
			  pressureBufferCounter++;
    68b6:	9f 5f       	subi	r25, 0xFF	; 255
    68b8:	90 93 37 31 	sts	0x3137, r25
			if(pressureBufferCounter == pressureNumberOfSamples){
    68bc:	9a 30       	cpi	r25, 0x0A	; 10
    68be:	39 f4       	brne	.+14     	; 0x68ce <__vector_83+0x30e>
				pressureBufferCounter=0;
    68c0:	10 92 37 31 	sts	0x3137, r1
				pressureBufferToWriteTo = 1;
    68c4:	81 e0       	ldi	r24, 0x01	; 1
    68c6:	80 93 80 2d 	sts	0x2D80, r24
				okToSendPressureBuffer2 = true;
    68ca:	80 93 36 31 	sts	0x3136, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    68ce:	80 91 87 2d 	lds	r24, 0x2D87
    68d2:	88 23       	and	r24, r24
    68d4:	09 f4       	brne	.+2      	; 0x68d8 <__vector_83+0x318>
    68d6:	67 c1       	rjmp	.+718    	; 0x6ba6 <__vector_83+0x5e6>

		  Light_readColors();
    68d8:	0e 94 1f 32 	call	0x643e	; 0x643e <Light_readColors>
		  Light_readColors();
    68dc:	0e 94 1f 32 	call	0x643e	; 0x643e <Light_readColors>
		  Light_readColors();
    68e0:	0e 94 1f 32 	call	0x643e	; 0x643e <Light_readColors>

		  quickLight = Light_returnColor(clear);
    68e4:	80 91 ec 39 	lds	r24, 0x39EC
    68e8:	90 91 ed 39 	lds	r25, 0x39ED
    68ec:	80 93 47 31 	sts	0x3147, r24
    68f0:	90 93 48 31 	sts	0x3148, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    68f4:	e0 91 2f 31 	lds	r30, 0x312F
    68f8:	f0 e0       	ldi	r31, 0x00	; 0
    68fa:	ee 0f       	add	r30, r30
    68fc:	ff 1f       	adc	r31, r31
    68fe:	ee 0f       	add	r30, r30
    6900:	ff 1f       	adc	r31, r31
    6902:	e5 5a       	subi	r30, 0xA5	; 165
    6904:	f2 4d       	sbci	r31, 0xD2	; 210
    6906:	a0 80       	ld	r10, Z
    6908:	b1 80       	ldd	r11, Z+1	; 0x01
    690a:	c2 80       	ldd	r12, Z+2	; 0x02
    690c:	d3 80       	ldd	r13, Z+3	; 0x03
    690e:	e9 e0       	ldi	r30, 0x09	; 9
    6910:	f1 e5       	ldi	r31, 0x51	; 81
    6912:	c6 ee       	ldi	r28, 0xE6	; 230
    6914:	d9 e3       	ldi	r29, 0x39	; 57
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    6916:	10 82       	st	Z, r1
    6918:	11 82       	std	Z+1, r1	; 0x01
    691a:	12 82       	std	Z+2, r1	; 0x02
    691c:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    691e:	88 81       	ld	r24, Y
    6920:	99 81       	ldd	r25, Y+1	; 0x01
    6922:	3c 01       	movw	r6, r24
    6924:	88 24       	eor	r8, r8
    6926:	99 24       	eor	r9, r9
    6928:	ee 24       	eor	r14, r14
    692a:	ff 24       	eor	r15, r15
    692c:	87 01       	movw	r16, r14
    692e:	a6 01       	movw	r20, r12
    6930:	95 01       	movw	r18, r10
    6932:	e6 0c       	add	r14, r6
    6934:	f7 1c       	adc	r15, r7
    6936:	08 1d       	adc	r16, r8
    6938:	19 1d       	adc	r17, r9
    693a:	2a 0d       	add	r18, r10
    693c:	3b 1d       	adc	r19, r11
    693e:	4c 1d       	adc	r20, r12
    6940:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6942:	da 01       	movw	r26, r20
    6944:	c9 01       	movw	r24, r18
    6946:	8a 19       	sub	r24, r10
    6948:	9b 09       	sbc	r25, r11
    694a:	ac 09       	sbc	r26, r12
    694c:	bd 09       	sbc	r27, r13
    694e:	80 50       	subi	r24, 0x00	; 0
    6950:	9c 42       	sbci	r25, 0x2C	; 44
    6952:	a1 40       	sbci	r26, 0x01	; 1
    6954:	b0 40       	sbci	r27, 0x00	; 0
    6956:	68 f3       	brcs	.-38     	; 0x6932 <__vector_83+0x372>
    6958:	e1 92       	st	Z+, r14
    695a:	f1 92       	st	Z+, r15
    695c:	01 93       	st	Z+, r16
    695e:	11 93       	st	Z+, r17
    6960:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    6962:	81 e5       	ldi	r24, 0x51	; 81
    6964:	e9 31       	cpi	r30, 0x19	; 25
    6966:	f8 07       	cpc	r31, r24
    6968:	b1 f6       	brne	.-84     	; 0x6916 <__vector_83+0x356>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    696a:	80 91 83 2d 	lds	r24, 0x2D83
    696e:	81 30       	cpi	r24, 0x01	; 1
    6970:	09 f0       	breq	.+2      	; 0x6974 <__vector_83+0x3b4>
    6972:	72 c0       	rjmp	.+228    	; 0x6a58 <__vector_83+0x498>
			  if(lightBufferCounter == 0){
    6974:	80 91 41 31 	lds	r24, 0x3141
    6978:	88 23       	and	r24, r24
    697a:	51 f4       	brne	.+20     	; 0x6990 <__vector_83+0x3d0>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    697c:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6980:	60 93 f0 30 	sts	0x30F0, r22
    6984:	70 93 f1 30 	sts	0x30F1, r23
    6988:	80 93 f2 30 	sts	0x30F2, r24
    698c:	90 93 f3 30 	sts	0x30F3, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    6990:	20 91 41 31 	lds	r18, 0x3141
    6994:	e2 2f       	mov	r30, r18
    6996:	f0 e0       	ldi	r31, 0x00	; 0
    6998:	ee 0f       	add	r30, r30
    699a:	ff 1f       	adc	r31, r31
    699c:	ee 0f       	add	r30, r30
    699e:	ff 1f       	adc	r31, r31
    69a0:	e5 58       	subi	r30, 0x85	; 133
    69a2:	f7 4a       	sbci	r31, 0xA7	; 167
    69a4:	80 91 09 51 	lds	r24, 0x5109
    69a8:	90 91 0a 51 	lds	r25, 0x510A
    69ac:	a0 91 0b 51 	lds	r26, 0x510B
    69b0:	b0 91 0c 51 	lds	r27, 0x510C
    69b4:	80 83       	st	Z, r24
    69b6:	91 83       	std	Z+1, r25	; 0x01
    69b8:	a2 83       	std	Z+2, r26	; 0x02
    69ba:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    69bc:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    69be:	e2 2f       	mov	r30, r18
    69c0:	f0 e0       	ldi	r31, 0x00	; 0
    69c2:	ee 0f       	add	r30, r30
    69c4:	ff 1f       	adc	r31, r31
    69c6:	ee 0f       	add	r30, r30
    69c8:	ff 1f       	adc	r31, r31
    69ca:	e5 58       	subi	r30, 0x85	; 133
    69cc:	f7 4a       	sbci	r31, 0xA7	; 167
    69ce:	80 91 0d 51 	lds	r24, 0x510D
    69d2:	90 91 0e 51 	lds	r25, 0x510E
    69d6:	a0 91 0f 51 	lds	r26, 0x510F
    69da:	b0 91 10 51 	lds	r27, 0x5110
    69de:	80 83       	st	Z, r24
    69e0:	91 83       	std	Z+1, r25	; 0x01
    69e2:	a2 83       	std	Z+2, r26	; 0x02
    69e4:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    69e6:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    69e8:	e2 2f       	mov	r30, r18
    69ea:	f0 e0       	ldi	r31, 0x00	; 0
    69ec:	ee 0f       	add	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	ee 0f       	add	r30, r30
    69f2:	ff 1f       	adc	r31, r31
    69f4:	e5 58       	subi	r30, 0x85	; 133
    69f6:	f7 4a       	sbci	r31, 0xA7	; 167
    69f8:	80 91 11 51 	lds	r24, 0x5111
    69fc:	90 91 12 51 	lds	r25, 0x5112
    6a00:	a0 91 13 51 	lds	r26, 0x5113
    6a04:	b0 91 14 51 	lds	r27, 0x5114
    6a08:	80 83       	st	Z, r24
    6a0a:	91 83       	std	Z+1, r25	; 0x01
    6a0c:	a2 83       	std	Z+2, r26	; 0x02
    6a0e:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a10:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    6a12:	e2 2f       	mov	r30, r18
    6a14:	f0 e0       	ldi	r31, 0x00	; 0
    6a16:	ee 0f       	add	r30, r30
    6a18:	ff 1f       	adc	r31, r31
    6a1a:	ee 0f       	add	r30, r30
    6a1c:	ff 1f       	adc	r31, r31
    6a1e:	e5 58       	subi	r30, 0x85	; 133
    6a20:	f7 4a       	sbci	r31, 0xA7	; 167
    6a22:	80 91 15 51 	lds	r24, 0x5115
    6a26:	90 91 16 51 	lds	r25, 0x5116
    6a2a:	a0 91 17 51 	lds	r26, 0x5117
    6a2e:	b0 91 18 51 	lds	r27, 0x5118
    6a32:	80 83       	st	Z, r24
    6a34:	91 83       	std	Z+1, r25	; 0x01
    6a36:	a2 83       	std	Z+2, r26	; 0x02
    6a38:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a3a:	2f 5f       	subi	r18, 0xFF	; 255
    6a3c:	20 93 41 31 	sts	0x3141, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6a40:	28 32       	cpi	r18, 0x28	; 40
    6a42:	09 f0       	breq	.+2      	; 0x6a46 <__vector_83+0x486>
    6a44:	7b c0       	rjmp	.+246    	; 0x6b3c <__vector_83+0x57c>
				  lightBufferCounter=0;
    6a46:	10 92 41 31 	sts	0x3141, r1
				  lightBufferToWriteTo = 2;
    6a4a:	82 e0       	ldi	r24, 0x02	; 2
    6a4c:	80 93 83 2d 	sts	0x2D83, r24
				  okToSendLightBuffer1 = true;
    6a50:	81 e0       	ldi	r24, 0x01	; 1
    6a52:	80 93 3f 31 	sts	0x313F, r24
    6a56:	72 c0       	rjmp	.+228    	; 0x6b3c <__vector_83+0x57c>
			  }
		  } else if (lightBufferToWriteTo == 2){
    6a58:	82 30       	cpi	r24, 0x02	; 2
    6a5a:	09 f0       	breq	.+2      	; 0x6a5e <__vector_83+0x49e>
    6a5c:	6f c0       	rjmp	.+222    	; 0x6b3c <__vector_83+0x57c>
			  if(lightBufferCounter == 0){
    6a5e:	80 91 41 31 	lds	r24, 0x3141
    6a62:	88 23       	and	r24, r24
    6a64:	51 f4       	brne	.+20     	; 0x6a7a <__vector_83+0x4ba>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    6a66:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    6a6a:	60 93 f4 30 	sts	0x30F4, r22
    6a6e:	70 93 f5 30 	sts	0x30F5, r23
    6a72:	80 93 f6 30 	sts	0x30F6, r24
    6a76:	90 93 f7 30 	sts	0x30F7, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    6a7a:	20 91 41 31 	lds	r18, 0x3141
    6a7e:	e2 2f       	mov	r30, r18
    6a80:	f0 e0       	ldi	r31, 0x00	; 0
    6a82:	ee 0f       	add	r30, r30
    6a84:	ff 1f       	adc	r31, r31
    6a86:	ee 0f       	add	r30, r30
    6a88:	ff 1f       	adc	r31, r31
    6a8a:	e7 53       	subi	r30, 0x37	; 55
    6a8c:	fd 4b       	sbci	r31, 0xBD	; 189
    6a8e:	80 91 09 51 	lds	r24, 0x5109
    6a92:	90 91 0a 51 	lds	r25, 0x510A
    6a96:	a0 91 0b 51 	lds	r26, 0x510B
    6a9a:	b0 91 0c 51 	lds	r27, 0x510C
    6a9e:	80 83       	st	Z, r24
    6aa0:	91 83       	std	Z+1, r25	; 0x01
    6aa2:	a2 83       	std	Z+2, r26	; 0x02
    6aa4:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6aa6:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    6aa8:	e2 2f       	mov	r30, r18
    6aaa:	f0 e0       	ldi	r31, 0x00	; 0
    6aac:	ee 0f       	add	r30, r30
    6aae:	ff 1f       	adc	r31, r31
    6ab0:	ee 0f       	add	r30, r30
    6ab2:	ff 1f       	adc	r31, r31
    6ab4:	e7 53       	subi	r30, 0x37	; 55
    6ab6:	fd 4b       	sbci	r31, 0xBD	; 189
    6ab8:	80 91 0d 51 	lds	r24, 0x510D
    6abc:	90 91 0e 51 	lds	r25, 0x510E
    6ac0:	a0 91 0f 51 	lds	r26, 0x510F
    6ac4:	b0 91 10 51 	lds	r27, 0x5110
    6ac8:	80 83       	st	Z, r24
    6aca:	91 83       	std	Z+1, r25	; 0x01
    6acc:	a2 83       	std	Z+2, r26	; 0x02
    6ace:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6ad0:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    6ad2:	e2 2f       	mov	r30, r18
    6ad4:	f0 e0       	ldi	r31, 0x00	; 0
    6ad6:	ee 0f       	add	r30, r30
    6ad8:	ff 1f       	adc	r31, r31
    6ada:	ee 0f       	add	r30, r30
    6adc:	ff 1f       	adc	r31, r31
    6ade:	e7 53       	subi	r30, 0x37	; 55
    6ae0:	fd 4b       	sbci	r31, 0xBD	; 189
    6ae2:	80 91 11 51 	lds	r24, 0x5111
    6ae6:	90 91 12 51 	lds	r25, 0x5112
    6aea:	a0 91 13 51 	lds	r26, 0x5113
    6aee:	b0 91 14 51 	lds	r27, 0x5114
    6af2:	80 83       	st	Z, r24
    6af4:	91 83       	std	Z+1, r25	; 0x01
    6af6:	a2 83       	std	Z+2, r26	; 0x02
    6af8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6afa:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    6afc:	e2 2f       	mov	r30, r18
    6afe:	f0 e0       	ldi	r31, 0x00	; 0
    6b00:	ee 0f       	add	r30, r30
    6b02:	ff 1f       	adc	r31, r31
    6b04:	ee 0f       	add	r30, r30
    6b06:	ff 1f       	adc	r31, r31
    6b08:	e7 53       	subi	r30, 0x37	; 55
    6b0a:	fd 4b       	sbci	r31, 0xBD	; 189
    6b0c:	80 91 15 51 	lds	r24, 0x5115
    6b10:	90 91 16 51 	lds	r25, 0x5116
    6b14:	a0 91 17 51 	lds	r26, 0x5117
    6b18:	b0 91 18 51 	lds	r27, 0x5118
    6b1c:	80 83       	st	Z, r24
    6b1e:	91 83       	std	Z+1, r25	; 0x01
    6b20:	a2 83       	std	Z+2, r26	; 0x02
    6b22:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b24:	2f 5f       	subi	r18, 0xFF	; 255
    6b26:	20 93 41 31 	sts	0x3141, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6b2a:	28 32       	cpi	r18, 0x28	; 40
    6b2c:	39 f4       	brne	.+14     	; 0x6b3c <__vector_83+0x57c>
				  lightBufferCounter=0;
    6b2e:	10 92 41 31 	sts	0x3141, r1
				  lightBufferToWriteTo = 1;
    6b32:	81 e0       	ldi	r24, 0x01	; 1
    6b34:	80 93 83 2d 	sts	0x2D83, r24
				  okToSendLightBuffer2 = true;
    6b38:	80 93 40 31 	sts	0x3140, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6b3c:	20 91 ec 39 	lds	r18, 0x39EC
    6b40:	30 91 ed 39 	lds	r19, 0x39ED
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6b44:	6f eb       	ldi	r22, 0xBF	; 191
    6b46:	29 36       	cpi	r18, 0x69	; 105
    6b48:	36 07       	cpc	r19, r22
    6b4a:	30 f0       	brcs	.+12     	; 0x6b58 <__vector_83+0x598>
    6b4c:	80 91 2f 31 	lds	r24, 0x312F
    6b50:	88 23       	and	r24, r24
    6b52:	11 f0       	breq	.+4      	; 0x6b58 <__vector_83+0x598>
			  gainSelector--;
    6b54:	81 50       	subi	r24, 0x01	; 1
    6b56:	08 c0       	rjmp	.+16     	; 0x6b68 <__vector_83+0x5a8>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6b58:	20 58       	subi	r18, 0x80	; 128
    6b5a:	3e 43       	sbci	r19, 0x3E	; 62
    6b5c:	20 f5       	brcc	.+72     	; 0x6ba6 <__vector_83+0x5e6>
    6b5e:	80 91 2f 31 	lds	r24, 0x312F
    6b62:	88 30       	cpi	r24, 0x08	; 8
    6b64:	01 f1       	breq	.+64     	; 0x6ba6 <__vector_83+0x5e6>
			  gainSelector++;
    6b66:	8f 5f       	subi	r24, 0xFF	; 255
    6b68:	80 93 2f 31 	sts	0x312F, r24
			  Light_setGain();
    6b6c:	0e 94 b2 32 	call	0x6564	; 0x6564 <Light_setGain>
    6b70:	1a c0       	rjmp	.+52     	; 0x6ba6 <__vector_83+0x5e6>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6b72:	0e 94 a4 30 	call	0x6148	; 0x6148 <Sensors_ReadTemperature>
    6b76:	6a e0       	ldi	r22, 0x0A	; 10
    6b78:	70 e0       	ldi	r23, 0x00	; 0
    6b7a:	0e 94 02 58 	call	0xb004	; 0xb004 <__udivmodhi4>
    6b7e:	60 93 44 31 	sts	0x3144, r22
		quickHumidity = Sensors_ReadHumidity();
    6b82:	0e 94 bc 30 	call	0x6178	; 0x6178 <Sensors_ReadHumidity>
    6b86:	80 93 45 31 	sts	0x3145, r24
		quickPressure = Sensors_ReadPressure();
    6b8a:	0e 94 de 30 	call	0x61bc	; 0x61bc <Sensors_ReadPressure>
    6b8e:	80 93 46 31 	sts	0x3146, r24
		Light_readColors();
    6b92:	0e 94 1f 32 	call	0x643e	; 0x643e <Light_readColors>
		quickLight = Light_returnColor(clear);
    6b96:	80 91 ec 39 	lds	r24, 0x39EC
    6b9a:	90 91 ed 39 	lds	r25, 0x39ED
    6b9e:	80 93 47 31 	sts	0x3147, r24
    6ba2:	90 93 48 31 	sts	0x3148, r25
	}




}
    6ba6:	ff 91       	pop	r31
    6ba8:	ef 91       	pop	r30
    6baa:	df 91       	pop	r29
    6bac:	cf 91       	pop	r28
    6bae:	bf 91       	pop	r27
    6bb0:	af 91       	pop	r26
    6bb2:	9f 91       	pop	r25
    6bb4:	8f 91       	pop	r24
    6bb6:	7f 91       	pop	r23
    6bb8:	6f 91       	pop	r22
    6bba:	5f 91       	pop	r21
    6bbc:	4f 91       	pop	r20
    6bbe:	3f 91       	pop	r19
    6bc0:	2f 91       	pop	r18
    6bc2:	1f 91       	pop	r17
    6bc4:	0f 91       	pop	r16
    6bc6:	ff 90       	pop	r15
    6bc8:	ef 90       	pop	r14
    6bca:	df 90       	pop	r13
    6bcc:	cf 90       	pop	r12
    6bce:	bf 90       	pop	r11
    6bd0:	af 90       	pop	r10
    6bd2:	9f 90       	pop	r9
    6bd4:	8f 90       	pop	r8
    6bd6:	7f 90       	pop	r7
    6bd8:	6f 90       	pop	r6
    6bda:	0f 90       	pop	r0
    6bdc:	0b be       	out	0x3b, r0	; 59
    6bde:	0f 90       	pop	r0
    6be0:	0f be       	out	0x3f, r0	; 63
    6be2:	0f 90       	pop	r0
    6be4:	1f 90       	pop	r1
    6be6:	18 95       	reti

00006be8 <RTC_init>:
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6be8:	e0 ea       	ldi	r30, 0xA0	; 160
    6bea:	f4 e0       	ldi	r31, 0x04	; 4
    6bec:	88 e0       	ldi	r24, 0x08	; 8
    6bee:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6bf0:	84 e0       	ldi	r24, 0x04	; 4
    6bf2:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6bf4:	8f e0       	ldi	r24, 0x0F	; 15
    6bf6:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	84 83       	std	Z+4, r24	; 0x04


}
    6bfc:	08 95       	ret

00006bfe <RTC_UTCSecsToTime>:

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    6bfe:	8f 92       	push	r8
    6c00:	9f 92       	push	r9
    6c02:	af 92       	push	r10
    6c04:	bf 92       	push	r11
    6c06:	cf 92       	push	r12
    6c08:	df 92       	push	r13
    6c0a:	ef 92       	push	r14
    6c0c:	ff 92       	push	r15
    6c0e:	0f 93       	push	r16
    6c10:	1f 93       	push	r17
    6c12:	cf 93       	push	r28
    6c14:	df 93       	push	r29
    6c16:	7b 01       	movw	r14, r22
    6c18:	8c 01       	movw	r16, r24
    6c1a:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    6c1c:	2c e3       	ldi	r18, 0x3C	; 60
    6c1e:	30 e0       	ldi	r19, 0x00	; 0
    6c20:	40 e0       	ldi	r20, 0x00	; 0
    6c22:	50 e0       	ldi	r21, 0x00	; 0
    6c24:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6c28:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6c2a:	c8 01       	movw	r24, r16
    6c2c:	b7 01       	movw	r22, r14
    6c2e:	2c e3       	ldi	r18, 0x3C	; 60
    6c30:	30 e0       	ldi	r19, 0x00	; 0
    6c32:	40 e0       	ldi	r20, 0x00	; 0
    6c34:	50 e0       	ldi	r21, 0x00	; 0
    6c36:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6c3a:	12 2f       	mov	r17, r18
    6c3c:	03 2f       	mov	r16, r19
    6c3e:	f4 2e       	mov	r15, r20
    6c40:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6c42:	62 2f       	mov	r22, r18
    6c44:	73 2f       	mov	r23, r19
    6c46:	84 2f       	mov	r24, r20
    6c48:	95 2f       	mov	r25, r21
    6c4a:	2c e3       	ldi	r18, 0x3C	; 60
    6c4c:	30 e0       	ldi	r19, 0x00	; 0
    6c4e:	40 e0       	ldi	r20, 0x00	; 0
    6c50:	50 e0       	ldi	r21, 0x00	; 0
    6c52:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6c56:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6c58:	61 2f       	mov	r22, r17
    6c5a:	70 2f       	mov	r23, r16
    6c5c:	8f 2d       	mov	r24, r15
    6c5e:	9e 2d       	mov	r25, r14
    6c60:	2c e3       	ldi	r18, 0x3C	; 60
    6c62:	30 e0       	ldi	r19, 0x00	; 0
    6c64:	40 e0       	ldi	r20, 0x00	; 0
    6c66:	50 e0       	ldi	r21, 0x00	; 0
    6c68:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6c6c:	12 2f       	mov	r17, r18
    6c6e:	03 2f       	mov	r16, r19
    6c70:	f4 2e       	mov	r15, r20
    6c72:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    6c74:	62 2f       	mov	r22, r18
    6c76:	73 2f       	mov	r23, r19
    6c78:	84 2f       	mov	r24, r20
    6c7a:	95 2f       	mov	r25, r21
    6c7c:	28 e1       	ldi	r18, 0x18	; 24
    6c7e:	30 e0       	ldi	r19, 0x00	; 0
    6c80:	40 e0       	ldi	r20, 0x00	; 0
    6c82:	50 e0       	ldi	r21, 0x00	; 0
    6c84:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6c88:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    6c8a:	61 2f       	mov	r22, r17
    6c8c:	70 2f       	mov	r23, r16
    6c8e:	8f 2d       	mov	r24, r15
    6c90:	9e 2d       	mov	r25, r14
    6c92:	28 e1       	ldi	r18, 0x18	; 24
    6c94:	30 e0       	ldi	r19, 0x00	; 0
    6c96:	40 e0       	ldi	r20, 0x00	; 0
    6c98:	50 e0       	ldi	r21, 0x00	; 0
    6c9a:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6c9e:	79 01       	movw	r14, r18
    6ca0:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    6ca2:	c8 01       	movw	r24, r16
    6ca4:	b7 01       	movw	r22, r14
    6ca6:	6c 5f       	subi	r22, 0xFC	; 252
    6ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    6caa:	8f 4f       	sbci	r24, 0xFF	; 255
    6cac:	9f 4f       	sbci	r25, 0xFF	; 255
    6cae:	27 e0       	ldi	r18, 0x07	; 7
    6cb0:	30 e0       	ldi	r19, 0x00	; 0
    6cb2:	40 e0       	ldi	r20, 0x00	; 0
    6cb4:	50 e0       	ldi	r21, 0x00	; 0
    6cb6:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    6cba:	6f 5f       	subi	r22, 0xFF	; 255
    6cbc:	6c 83       	std	Y+4, r22	; 0x04
    6cbe:	20 e0       	ldi	r18, 0x00	; 0
    6cc0:	aa 24       	eor	r10, r10
    6cc2:	bb 24       	eor	r11, r11
    6cc4:	65 01       	movw	r12, r10
    6cc6:	01 c0       	rjmp	.+2      	; 0x6cca <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    6cc8:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    6cca:	82 2e       	mov	r8, r18
    6ccc:	99 24       	eor	r9, r9
    6cce:	f4 01       	movw	r30, r8
    6cd0:	ee 54       	subi	r30, 0x4E	; 78
    6cd2:	f8 4f       	sbci	r31, 0xF8	; 248
    6cd4:	cf 01       	movw	r24, r30
    6cd6:	83 70       	andi	r24, 0x03	; 3
    6cd8:	90 70       	andi	r25, 0x00	; 0
    6cda:	89 2b       	or	r24, r25
    6cdc:	99 f4       	brne	.+38     	; 0x6d04 <RTC_UTCSecsToTime+0x106>
    6cde:	cf 01       	movw	r24, r30
    6ce0:	64 e6       	ldi	r22, 0x64	; 100
    6ce2:	70 e0       	ldi	r23, 0x00	; 0
    6ce4:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6ce8:	89 2b       	or	r24, r25
    6cea:	39 f4       	brne	.+14     	; 0x6cfa <RTC_UTCSecsToTime+0xfc>
    6cec:	cf 01       	movw	r24, r30
    6cee:	60 e9       	ldi	r22, 0x90	; 144
    6cf0:	71 e0       	ldi	r23, 0x01	; 1
    6cf2:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6cf6:	89 2b       	or	r24, r25
    6cf8:	29 f4       	brne	.+10     	; 0x6d04 <RTC_UTCSecsToTime+0x106>
    6cfa:	8e e6       	ldi	r24, 0x6E	; 110
    6cfc:	91 e0       	ldi	r25, 0x01	; 1
    6cfe:	a0 e0       	ldi	r26, 0x00	; 0
    6d00:	b0 e0       	ldi	r27, 0x00	; 0
    6d02:	04 c0       	rjmp	.+8      	; 0x6d0c <RTC_UTCSecsToTime+0x10e>
    6d04:	8d e6       	ldi	r24, 0x6D	; 109
    6d06:	91 e0       	ldi	r25, 0x01	; 1
    6d08:	a0 e0       	ldi	r26, 0x00	; 0
    6d0a:	b0 e0       	ldi	r27, 0x00	; 0
    6d0c:	a8 0e       	add	r10, r24
    6d0e:	b9 1e       	adc	r11, r25
    6d10:	ca 1e       	adc	r12, r26
    6d12:	db 1e       	adc	r13, r27
    6d14:	c5 01       	movw	r24, r10
    6d16:	a0 e0       	ldi	r26, 0x00	; 0
    6d18:	b0 e0       	ldi	r27, 0x00	; 0
    6d1a:	e8 16       	cp	r14, r24
    6d1c:	f9 06       	cpc	r15, r25
    6d1e:	0a 07       	cpc	r16, r26
    6d20:	1b 07       	cpc	r17, r27
    6d22:	90 f6       	brcc	.-92     	; 0x6cc8 <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6d24:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6d26:	f4 01       	movw	r30, r8
    6d28:	ee 54       	subi	r30, 0x4E	; 78
    6d2a:	f8 4f       	sbci	r31, 0xF8	; 248
    6d2c:	83 e0       	ldi	r24, 0x03	; 3
    6d2e:	88 2e       	mov	r8, r24
    6d30:	91 2c       	mov	r9, r1
    6d32:	8e 22       	and	r8, r30
    6d34:	9f 22       	and	r9, r31
    6d36:	81 14       	cp	r8, r1
    6d38:	91 04       	cpc	r9, r1
    6d3a:	99 f4       	brne	.+38     	; 0x6d62 <RTC_UTCSecsToTime+0x164>
    6d3c:	cf 01       	movw	r24, r30
    6d3e:	64 e6       	ldi	r22, 0x64	; 100
    6d40:	70 e0       	ldi	r23, 0x00	; 0
    6d42:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6d46:	89 2b       	or	r24, r25
    6d48:	39 f4       	brne	.+14     	; 0x6d58 <RTC_UTCSecsToTime+0x15a>
    6d4a:	cf 01       	movw	r24, r30
    6d4c:	60 e9       	ldi	r22, 0x90	; 144
    6d4e:	71 e0       	ldi	r23, 0x01	; 1
    6d50:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6d54:	89 2b       	or	r24, r25
    6d56:	29 f4       	brne	.+10     	; 0x6d62 <RTC_UTCSecsToTime+0x164>
    6d58:	8e e6       	ldi	r24, 0x6E	; 110
    6d5a:	91 e0       	ldi	r25, 0x01	; 1
    6d5c:	a0 e0       	ldi	r26, 0x00	; 0
    6d5e:	b0 e0       	ldi	r27, 0x00	; 0
    6d60:	04 c0       	rjmp	.+8      	; 0x6d6a <RTC_UTCSecsToTime+0x16c>
    6d62:	8d e6       	ldi	r24, 0x6D	; 109
    6d64:	91 e0       	ldi	r25, 0x01	; 1
    6d66:	a0 e0       	ldi	r26, 0x00	; 0
    6d68:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6d6a:	a8 1a       	sub	r10, r24
    6d6c:	b9 0a       	sbc	r11, r25
    6d6e:	ca 0a       	sbc	r12, r26
    6d70:	db 0a       	sbc	r13, r27
    6d72:	98 01       	movw	r18, r16
    6d74:	87 01       	movw	r16, r14
    6d76:	0a 19       	sub	r16, r10
    6d78:	1b 09       	sbc	r17, r11
    6d7a:	2c 09       	sbc	r18, r12
    6d7c:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    6d7e:	cf 01       	movw	r24, r30
    6d80:	64 e6       	ldi	r22, 0x64	; 100
    6d82:	70 e0       	ldi	r23, 0x00	; 0
    6d84:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6d88:	7c 01       	movw	r14, r24
    6d8a:	cf 01       	movw	r24, r30
    6d8c:	60 e9       	ldi	r22, 0x90	; 144
    6d8e:	71 e0       	ldi	r23, 0x01	; 1
    6d90:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6d94:	ac 01       	movw	r20, r24
    6d96:	e0 e8       	ldi	r30, 0x80	; 128
    6d98:	f0 e3       	ldi	r31, 0x30	; 48
    6d9a:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    6d9c:	61 30       	cpi	r22, 0x01	; 1
    6d9e:	51 f4       	brne	.+20     	; 0x6db4 <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    6da0:	81 14       	cp	r8, r1
    6da2:	91 04       	cpc	r9, r1
    6da4:	49 f4       	brne	.+18     	; 0x6db8 <RTC_UTCSecsToTime+0x1ba>
    6da6:	e1 14       	cp	r14, r1
    6da8:	f1 04       	cpc	r15, r1
    6daa:	41 f4       	brne	.+16     	; 0x6dbc <RTC_UTCSecsToTime+0x1be>
    6dac:	41 15       	cp	r20, r1
    6dae:	51 05       	cpc	r21, r1
    6db0:	29 f0       	breq	.+10     	; 0x6dbc <RTC_UTCSecsToTime+0x1be>
    6db2:	02 c0       	rjmp	.+4      	; 0x6db8 <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    6db4:	80 81       	ld	r24, Z
    6db6:	03 c0       	rjmp	.+6      	; 0x6dbe <RTC_UTCSecsToTime+0x1c0>
    6db8:	8c e1       	ldi	r24, 0x1C	; 28
    6dba:	01 c0       	rjmp	.+2      	; 0x6dbe <RTC_UTCSecsToTime+0x1c0>
    6dbc:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    6dbe:	90 e0       	ldi	r25, 0x00	; 0
    6dc0:	a0 e0       	ldi	r26, 0x00	; 0
    6dc2:	b0 e0       	ldi	r27, 0x00	; 0
    6dc4:	08 17       	cp	r16, r24
    6dc6:	19 07       	cpc	r17, r25
    6dc8:	2a 07       	cpc	r18, r26
    6dca:	3b 07       	cpc	r19, r27
    6dcc:	40 f0       	brcs	.+16     	; 0x6dde <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    6dce:	08 1b       	sub	r16, r24
    6dd0:	19 0b       	sbc	r17, r25
    6dd2:	2a 0b       	sbc	r18, r26
    6dd4:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6dd6:	6f 5f       	subi	r22, 0xFF	; 255
    6dd8:	31 96       	adiw	r30, 0x01	; 1
    6dda:	6c 30       	cpi	r22, 0x0C	; 12
    6ddc:	f9 f6       	brne	.-66     	; 0x6d9c <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    6dde:	6f 5f       	subi	r22, 0xFF	; 255
    6de0:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6de2:	80 2f       	mov	r24, r16
    6de4:	8f 5f       	subi	r24, 0xFF	; 255
    6de6:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6de8:	ce 01       	movw	r24, r28
    6dea:	df 91       	pop	r29
    6dec:	cf 91       	pop	r28
    6dee:	1f 91       	pop	r17
    6df0:	0f 91       	pop	r16
    6df2:	ff 90       	pop	r15
    6df4:	ef 90       	pop	r14
    6df6:	df 90       	pop	r13
    6df8:	cf 90       	pop	r12
    6dfa:	bf 90       	pop	r11
    6dfc:	af 90       	pop	r10
    6dfe:	9f 90       	pop	r9
    6e00:	8f 90       	pop	r8
    6e02:	08 95       	ret

00006e04 <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6e04:	4f 92       	push	r4
    6e06:	5f 92       	push	r5
    6e08:	6f 92       	push	r6
    6e0a:	7f 92       	push	r7
    6e0c:	8f 92       	push	r8
    6e0e:	9f 92       	push	r9
    6e10:	af 92       	push	r10
    6e12:	bf 92       	push	r11
    6e14:	cf 92       	push	r12
    6e16:	df 92       	push	r13
    6e18:	ef 92       	push	r14
    6e1a:	ff 92       	push	r15
    6e1c:	0f 93       	push	r16
    6e1e:	1f 93       	push	r17
    6e20:	cf 93       	push	r28
    6e22:	df 93       	push	r29
    6e24:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6e26:	dc 01       	movw	r26, r24
    6e28:	17 96       	adiw	r26, 0x07	; 7
    6e2a:	1c 91       	ld	r17, X
    6e2c:	61 2f       	mov	r22, r17
    6e2e:	70 e0       	ldi	r23, 0x00	; 0
    6e30:	80 e0       	ldi	r24, 0x00	; 0
    6e32:	90 e0       	ldi	r25, 0x00	; 0
    6e34:	20 e8       	ldi	r18, 0x80	; 128
    6e36:	33 e3       	ldi	r19, 0x33	; 51
    6e38:	41 ee       	ldi	r20, 0xE1	; 225
    6e3a:	51 e0       	ldi	r21, 0x01	; 1
    6e3c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6e40:	5b 01       	movw	r10, r22
    6e42:	6c 01       	movw	r12, r24
    6e44:	22 eb       	ldi	r18, 0xB2	; 178
    6e46:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6e48:	e1 2f       	mov	r30, r17
    6e4a:	f0 e0       	ldi	r31, 0x00	; 0
    6e4c:	ee 54       	subi	r30, 0x4E	; 78
    6e4e:	f8 4f       	sbci	r31, 0xF8	; 248
    6e50:	1d c0       	rjmp	.+58     	; 0x6e8c <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6e52:	c9 01       	movw	r24, r18
    6e54:	83 70       	andi	r24, 0x03	; 3
    6e56:	90 70       	andi	r25, 0x00	; 0
    6e58:	89 2b       	or	r24, r25
    6e5a:	b1 f4       	brne	.+44     	; 0x6e88 <RTC_TimeToUTCSecs+0x84>
    6e5c:	c9 01       	movw	r24, r18
    6e5e:	64 e6       	ldi	r22, 0x64	; 100
    6e60:	70 e0       	ldi	r23, 0x00	; 0
    6e62:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6e66:	89 2b       	or	r24, r25
    6e68:	39 f4       	brne	.+14     	; 0x6e78 <RTC_TimeToUTCSecs+0x74>
    6e6a:	c9 01       	movw	r24, r18
    6e6c:	60 e9       	ldi	r22, 0x90	; 144
    6e6e:	71 e0       	ldi	r23, 0x01	; 1
    6e70:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6e74:	89 2b       	or	r24, r25
    6e76:	41 f4       	brne	.+16     	; 0x6e88 <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6e78:	80 e8       	ldi	r24, 0x80	; 128
    6e7a:	91 e5       	ldi	r25, 0x51	; 81
    6e7c:	a1 e0       	ldi	r26, 0x01	; 1
    6e7e:	b0 e0       	ldi	r27, 0x00	; 0
    6e80:	a8 0e       	add	r10, r24
    6e82:	b9 1e       	adc	r11, r25
    6e84:	ca 1e       	adc	r12, r26
    6e86:	db 1e       	adc	r13, r27
    6e88:	2f 5f       	subi	r18, 0xFF	; 255
    6e8a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    6e8c:	2e 17       	cp	r18, r30
    6e8e:	3f 07       	cpc	r19, r31
    6e90:	01 f7       	brne	.-64     	; 0x6e52 <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6e92:	d4 01       	movw	r26, r8
    6e94:	16 96       	adiw	r26, 0x06	; 6
    6e96:	8c 91       	ld	r24, X
    6e98:	48 2e       	mov	r4, r24
    6e9a:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    6e9c:	c9 01       	movw	r24, r18
    6e9e:	64 e6       	ldi	r22, 0x64	; 100
    6ea0:	70 e0       	ldi	r23, 0x00	; 0
    6ea2:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6ea6:	7c 01       	movw	r14, r24
    6ea8:	c9 01       	movw	r24, r18
    6eaa:	60 e9       	ldi	r22, 0x90	; 144
    6eac:	71 e0       	ldi	r23, 0x01	; 1
    6eae:	0e 94 16 58 	call	0xb02c	; 0xb02c <__divmodhi4>
    6eb2:	8c 01       	movw	r16, r24
    6eb4:	c1 e0       	ldi	r28, 0x01	; 1
    6eb6:	d0 e0       	ldi	r29, 0x00	; 0
    6eb8:	93 e0       	ldi	r25, 0x03	; 3
    6eba:	69 2e       	mov	r6, r25
    6ebc:	71 2c       	mov	r7, r1
    6ebe:	62 22       	and	r6, r18
    6ec0:	73 22       	and	r7, r19
    6ec2:	27 c0       	rjmp	.+78     	; 0x6f12 <RTC_TimeToUTCSecs+0x10e>
    6ec4:	c2 30       	cpi	r28, 0x02	; 2
    6ec6:	d1 05       	cpc	r29, r1
    6ec8:	91 f4       	brne	.+36     	; 0x6eee <RTC_TimeToUTCSecs+0xea>
    6eca:	61 14       	cp	r6, r1
    6ecc:	71 04       	cpc	r7, r1
    6ece:	79 f4       	brne	.+30     	; 0x6eee <RTC_TimeToUTCSecs+0xea>
    6ed0:	e1 14       	cp	r14, r1
    6ed2:	f1 04       	cpc	r15, r1
    6ed4:	19 f4       	brne	.+6      	; 0x6edc <RTC_TimeToUTCSecs+0xd8>
    6ed6:	01 15       	cp	r16, r1
    6ed8:	11 05       	cpc	r17, r1
    6eda:	49 f4       	brne	.+18     	; 0x6eee <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    6edc:	80 e8       	ldi	r24, 0x80	; 128
    6ede:	9b e3       	ldi	r25, 0x3B	; 59
    6ee0:	a6 e2       	ldi	r26, 0x26	; 38
    6ee2:	b0 e0       	ldi	r27, 0x00	; 0
    6ee4:	a8 0e       	add	r10, r24
    6ee6:	b9 1e       	adc	r11, r25
    6ee8:	ca 1e       	adc	r12, r26
    6eea:	db 1e       	adc	r13, r27
    6eec:	11 c0       	rjmp	.+34     	; 0x6f10 <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    6eee:	fe 01       	movw	r30, r28
    6ef0:	e1 58       	subi	r30, 0x81	; 129
    6ef2:	ff 4c       	sbci	r31, 0xCF	; 207
    6ef4:	60 81       	ld	r22, Z
    6ef6:	70 e0       	ldi	r23, 0x00	; 0
    6ef8:	80 e0       	ldi	r24, 0x00	; 0
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	20 e8       	ldi	r18, 0x80	; 128
    6efe:	31 e5       	ldi	r19, 0x51	; 81
    6f00:	41 e0       	ldi	r20, 0x01	; 1
    6f02:	50 e0       	ldi	r21, 0x00	; 0
    6f04:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6f08:	a6 0e       	add	r10, r22
    6f0a:	b7 1e       	adc	r11, r23
    6f0c:	c8 1e       	adc	r12, r24
    6f0e:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6f10:	21 96       	adiw	r28, 0x01	; 1
    6f12:	c4 15       	cp	r28, r4
    6f14:	d5 05       	cpc	r29, r5
    6f16:	b4 f2       	brlt	.-84     	; 0x6ec4 <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6f18:	d4 01       	movw	r26, r8
    6f1a:	13 96       	adiw	r26, 0x03	; 3
    6f1c:	6c 91       	ld	r22, X
    6f1e:	70 e0       	ldi	r23, 0x00	; 0
    6f20:	80 e0       	ldi	r24, 0x00	; 0
    6f22:	90 e0       	ldi	r25, 0x00	; 0
    6f24:	20 e1       	ldi	r18, 0x10	; 16
    6f26:	3e e0       	ldi	r19, 0x0E	; 14
    6f28:	40 e0       	ldi	r20, 0x00	; 0
    6f2a:	50 e0       	ldi	r21, 0x00	; 0
    6f2c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6f30:	7b 01       	movw	r14, r22
    6f32:	8c 01       	movw	r16, r24
    6f34:	f4 01       	movw	r30, r8
    6f36:	62 81       	ldd	r22, Z+2	; 0x02
    6f38:	70 e0       	ldi	r23, 0x00	; 0
    6f3a:	80 e0       	ldi	r24, 0x00	; 0
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	2c e3       	ldi	r18, 0x3C	; 60
    6f40:	30 e0       	ldi	r19, 0x00	; 0
    6f42:	40 e0       	ldi	r20, 0x00	; 0
    6f44:	50 e0       	ldi	r21, 0x00	; 0
    6f46:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6f4a:	e6 0e       	add	r14, r22
    6f4c:	f7 1e       	adc	r15, r23
    6f4e:	08 1f       	adc	r16, r24
    6f50:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    6f52:	d4 01       	movw	r26, r8
    6f54:	11 96       	adiw	r26, 0x01	; 1
    6f56:	8c 91       	ld	r24, X
    6f58:	11 97       	sbiw	r26, 0x01	; 1
    6f5a:	e8 0e       	add	r14, r24
    6f5c:	f1 1c       	adc	r15, r1
    6f5e:	01 1d       	adc	r16, r1
    6f60:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    6f62:	15 96       	adiw	r26, 0x05	; 5
    6f64:	6c 91       	ld	r22, X
    6f66:	70 e0       	ldi	r23, 0x00	; 0
    6f68:	61 50       	subi	r22, 0x01	; 1
    6f6a:	70 40       	sbci	r23, 0x00	; 0
    6f6c:	88 27       	eor	r24, r24
    6f6e:	77 fd       	sbrc	r23, 7
    6f70:	80 95       	com	r24
    6f72:	98 2f       	mov	r25, r24
    6f74:	20 e8       	ldi	r18, 0x80	; 128
    6f76:	31 e5       	ldi	r19, 0x51	; 81
    6f78:	41 e0       	ldi	r20, 0x01	; 1
    6f7a:	50 e0       	ldi	r21, 0x00	; 0
    6f7c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    6f80:	e6 0e       	add	r14, r22
    6f82:	f7 1e       	adc	r15, r23
    6f84:	08 1f       	adc	r16, r24
    6f86:	19 1f       	adc	r17, r25
    6f88:	ea 0c       	add	r14, r10
    6f8a:	fb 1c       	adc	r15, r11
    6f8c:	0c 1d       	adc	r16, r12
    6f8e:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    6f90:	b7 01       	movw	r22, r14
    6f92:	c8 01       	movw	r24, r16
    6f94:	df 91       	pop	r29
    6f96:	cf 91       	pop	r28
    6f98:	1f 91       	pop	r17
    6f9a:	0f 91       	pop	r16
    6f9c:	ff 90       	pop	r15
    6f9e:	ef 90       	pop	r14
    6fa0:	df 90       	pop	r13
    6fa2:	cf 90       	pop	r12
    6fa4:	bf 90       	pop	r11
    6fa6:	af 90       	pop	r10
    6fa8:	9f 90       	pop	r9
    6faa:	8f 90       	pop	r8
    6fac:	7f 90       	pop	r7
    6fae:	6f 90       	pop	r6
    6fb0:	5f 90       	pop	r5
    6fb2:	4f 90       	pop	r4
    6fb4:	08 95       	ret

00006fb6 <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    6fb6:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    6fb8:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    6fba:	e0 ea       	ldi	r30, 0xA0	; 160
    6fbc:	f4 e0       	ldi	r31, 0x04	; 4
    6fbe:	46 83       	std	Z+6, r20	; 0x06
    6fc0:	fb 01       	movw	r30, r22
    6fc2:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6fc4:	a0 ea       	ldi	r26, 0xA0	; 160
    6fc6:	b4 e0       	ldi	r27, 0x04	; 4
    6fc8:	0d c0       	rjmp	.+26     	; 0x6fe4 <RTC_sendBytes+0x2e>
    6fca:	80 91 a4 04 	lds	r24, 0x04A4
    6fce:	86 ff       	sbrs	r24, 6
    6fd0:	fc cf       	rjmp	.-8      	; 0x6fca <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    6fd2:	80 91 a4 04 	lds	r24, 0x04A4
    6fd6:	84 fd       	sbrc	r24, 4
    6fd8:	07 c0       	rjmp	.+14     	; 0x6fe8 <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    6fda:	81 91       	ld	r24, Z+
    6fdc:	17 96       	adiw	r26, 0x07	; 7
    6fde:	8c 93       	st	X, r24
    6fe0:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    6fe2:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    6fe4:	95 17       	cp	r25, r21
    6fe6:	88 f3       	brcs	.-30     	; 0x6fca <RTC_sendBytes+0x14>
    6fe8:	08 95       	ret

00006fea <RTC_setTime>:



} 

void RTC_setTime(void) {
    6fea:	df 93       	push	r29
    6fec:	cf 93       	push	r28
    6fee:	cd b7       	in	r28, 0x3d	; 61
    6ff0:	de b7       	in	r29, 0x3e	; 62
    6ff2:	29 97       	sbiw	r28, 0x09	; 9
    6ff4:	cd bf       	out	0x3d, r28	; 61
    6ff6:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    6ff8:	50 91 9e 4c 	lds	r21, 0x4C9E
    6ffc:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    6ffe:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    7000:	40 91 97 4c 	lds	r20, 0x4C97
    7004:	84 2f       	mov	r24, r20
    7006:	6a e0       	ldi	r22, 0x0A	; 10
    7008:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    700c:	28 2f       	mov	r18, r24
    700e:	30 e0       	ldi	r19, 0x00	; 0
    7010:	b4 e0       	ldi	r27, 0x04	; 4
    7012:	22 0f       	add	r18, r18
    7014:	33 1f       	adc	r19, r19
    7016:	ba 95       	dec	r27
    7018:	e1 f7       	brne	.-8      	; 0x7012 <RTC_setTime+0x28>
    701a:	84 2f       	mov	r24, r20
    701c:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    7020:	92 2b       	or	r25, r18
    7022:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    7024:	40 91 98 4c 	lds	r20, 0x4C98
    7028:	84 2f       	mov	r24, r20
    702a:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    702e:	28 2f       	mov	r18, r24
    7030:	30 e0       	ldi	r19, 0x00	; 0
    7032:	a4 e0       	ldi	r26, 0x04	; 4
    7034:	22 0f       	add	r18, r18
    7036:	33 1f       	adc	r19, r19
    7038:	aa 95       	dec	r26
    703a:	e1 f7       	brne	.-8      	; 0x7034 <RTC_setTime+0x4a>
    703c:	84 2f       	mov	r24, r20
    703e:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    7042:	92 2b       	or	r25, r18
    7044:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    7046:	40 91 99 4c 	lds	r20, 0x4C99
    704a:	84 2f       	mov	r24, r20
    704c:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    7050:	28 2f       	mov	r18, r24
    7052:	30 e0       	ldi	r19, 0x00	; 0
    7054:	f4 e0       	ldi	r31, 0x04	; 4
    7056:	22 0f       	add	r18, r18
    7058:	33 1f       	adc	r19, r19
    705a:	fa 95       	dec	r31
    705c:	e1 f7       	brne	.-8      	; 0x7056 <RTC_setTime+0x6c>
    705e:	84 2f       	mov	r24, r20
    7060:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    7064:	92 2b       	or	r25, r18
    7066:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    7068:	30 91 9a 4c 	lds	r19, 0x4C9A
    706c:	83 2f       	mov	r24, r19
    706e:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    7072:	29 2f       	mov	r18, r25
    7074:	20 68       	ori	r18, 0x80	; 128
    7076:	83 2f       	mov	r24, r19
    7078:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    707c:	82 95       	swap	r24
    707e:	80 7f       	andi	r24, 0xF0	; 240
    7080:	28 2b       	or	r18, r24
    7082:	85 2f       	mov	r24, r21
    7084:	64 e6       	ldi	r22, 0x64	; 100
    7086:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    708a:	82 95       	swap	r24
    708c:	88 0f       	add	r24, r24
    708e:	88 0f       	add	r24, r24
    7090:	80 7c       	andi	r24, 0xC0	; 192
    7092:	28 2b       	or	r18, r24
    7094:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    7096:	80 91 9b 4c 	lds	r24, 0x4C9B
    709a:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    709c:	40 91 9c 4c 	lds	r20, 0x4C9C
    70a0:	84 2f       	mov	r24, r20
    70a2:	6a e0       	ldi	r22, 0x0A	; 10
    70a4:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    70a8:	28 2f       	mov	r18, r24
    70aa:	30 e0       	ldi	r19, 0x00	; 0
    70ac:	e4 e0       	ldi	r30, 0x04	; 4
    70ae:	22 0f       	add	r18, r18
    70b0:	33 1f       	adc	r19, r19
    70b2:	ea 95       	dec	r30
    70b4:	e1 f7       	brne	.-8      	; 0x70ae <RTC_setTime+0xc4>
    70b6:	84 2f       	mov	r24, r20
    70b8:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    70bc:	92 2b       	or	r25, r18
    70be:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    70c0:	40 91 9d 4c 	lds	r20, 0x4C9D
    70c4:	84 2f       	mov	r24, r20
    70c6:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    70ca:	28 2f       	mov	r18, r24
    70cc:	30 e0       	ldi	r19, 0x00	; 0
    70ce:	74 e0       	ldi	r23, 0x04	; 4
    70d0:	22 0f       	add	r18, r18
    70d2:	33 1f       	adc	r19, r19
    70d4:	7a 95       	dec	r23
    70d6:	e1 f7       	brne	.-8      	; 0x70d0 <RTC_setTime+0xe6>
    70d8:	84 2f       	mov	r24, r20
    70da:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    70de:	92 2b       	or	r25, r18
    70e0:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    70e2:	85 2f       	mov	r24, r21
    70e4:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    70e8:	28 2f       	mov	r18, r24
    70ea:	30 e0       	ldi	r19, 0x00	; 0
    70ec:	44 e0       	ldi	r20, 0x04	; 4
    70ee:	22 0f       	add	r18, r18
    70f0:	33 1f       	adc	r19, r19
    70f2:	4a 95       	dec	r20
    70f4:	e1 f7       	brne	.-8      	; 0x70ee <RTC_setTime+0x104>
    70f6:	85 2f       	mov	r24, r21
    70f8:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    70fc:	92 2b       	or	r25, r18
    70fe:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    7100:	89 e0       	ldi	r24, 0x09	; 9
    7102:	be 01       	movw	r22, r28
    7104:	6f 5f       	subi	r22, 0xFF	; 255
    7106:	7f 4f       	sbci	r23, 0xFF	; 255
    7108:	40 ed       	ldi	r20, 0xD0	; 208
    710a:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <RTC_sendBytes>
}
    710e:	29 96       	adiw	r28, 0x09	; 9
    7110:	cd bf       	out	0x3d, r28	; 61
    7112:	de bf       	out	0x3e, r29	; 62
    7114:	cf 91       	pop	r28
    7116:	df 91       	pop	r29
    7118:	08 95       	ret

0000711a <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    711a:	47 e9       	ldi	r20, 0x97	; 151
    711c:	5c e4       	ldi	r21, 0x4C	; 76
    711e:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <RTC_UTCSecsToTime>
	RTC_setTime();
    7122:	0e 94 f5 37 	call	0x6fea	; 0x6fea <RTC_setTime>
}
    7126:	08 95       	ret

00007128 <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    7128:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    712a:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    712c:	e0 ea       	ldi	r30, 0xA0	; 160
    712e:	f4 e0       	ldi	r31, 0x04	; 4
    7130:	46 83       	std	Z+6, r20	; 0x06
    7132:	fb 01       	movw	r30, r22
    7134:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    7136:	a0 ea       	ldi	r26, 0xA0	; 160
    7138:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    713a:	22 e0       	ldi	r18, 0x02	; 2
    713c:	0b c0       	rjmp	.+22     	; 0x7154 <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    713e:	80 91 a4 04 	lds	r24, 0x04A4
    7142:	87 ff       	sbrs	r24, 7
    7144:	fc cf       	rjmp	.-8      	; 0x713e <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    7146:	80 91 a7 04 	lds	r24, 0x04A7
    714a:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    714c:	13 96       	adiw	r26, 0x03	; 3
    714e:	2c 93       	st	X, r18
    7150:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    7152:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    7154:	95 17       	cp	r25, r21
    7156:	98 f3       	brcs	.-26     	; 0x713e <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    7158:	87 e0       	ldi	r24, 0x07	; 7
    715a:	e0 ea       	ldi	r30, 0xA0	; 160
    715c:	f4 e0       	ldi	r31, 0x04	; 4
    715e:	83 83       	std	Z+3, r24	; 0x03

}
    7160:	08 95       	ret

00007162 <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    7162:	0f 93       	push	r16
    7164:	1f 93       	push	r17
    7166:	df 93       	push	r29
    7168:	cf 93       	push	r28
    716a:	cd b7       	in	r28, 0x3d	; 61
    716c:	de b7       	in	r29, 0x3e	; 62
    716e:	28 97       	sbiw	r28, 0x08	; 8
    7170:	cd bf       	out	0x3d, r28	; 61
    7172:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    7174:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	8e 01       	movw	r16, r28
    717a:	0f 5f       	subi	r16, 0xFF	; 255
    717c:	1f 4f       	sbci	r17, 0xFF	; 255
    717e:	b8 01       	movw	r22, r16
    7180:	40 ed       	ldi	r20, 0xD0	; 208
    7182:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    7186:	88 e0       	ldi	r24, 0x08	; 8
    7188:	b8 01       	movw	r22, r16
    718a:	40 ed       	ldi	r20, 0xD0	; 208
    718c:	0e 94 94 38 	call	0x7128	; 0x7128 <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    7190:	49 81       	ldd	r20, Y+1	; 0x01
    7192:	84 2f       	mov	r24, r20
    7194:	82 95       	swap	r24
    7196:	8f 70       	andi	r24, 0x0F	; 15
    7198:	90 e0       	ldi	r25, 0x00	; 0
    719a:	9c 01       	movw	r18, r24
    719c:	63 e0       	ldi	r22, 0x03	; 3
    719e:	22 0f       	add	r18, r18
    71a0:	33 1f       	adc	r19, r19
    71a2:	6a 95       	dec	r22
    71a4:	e1 f7       	brne	.-8      	; 0x719e <RTC_getTime+0x3c>
    71a6:	88 0f       	add	r24, r24
    71a8:	99 1f       	adc	r25, r25
    71aa:	28 0f       	add	r18, r24
    71ac:	39 1f       	adc	r19, r25
    71ae:	4f 70       	andi	r20, 0x0F	; 15
    71b0:	42 0f       	add	r20, r18
    71b2:	40 93 97 4c 	sts	0x4C97, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    71b6:	4a 81       	ldd	r20, Y+2	; 0x02
    71b8:	84 2f       	mov	r24, r20
    71ba:	90 e0       	ldi	r25, 0x00	; 0
    71bc:	80 77       	andi	r24, 0x70	; 112
    71be:	90 70       	andi	r25, 0x00	; 0
    71c0:	24 e0       	ldi	r18, 0x04	; 4
    71c2:	95 95       	asr	r25
    71c4:	87 95       	ror	r24
    71c6:	2a 95       	dec	r18
    71c8:	e1 f7       	brne	.-8      	; 0x71c2 <RTC_getTime+0x60>
    71ca:	9c 01       	movw	r18, r24
    71cc:	03 e0       	ldi	r16, 0x03	; 3
    71ce:	22 0f       	add	r18, r18
    71d0:	33 1f       	adc	r19, r19
    71d2:	0a 95       	dec	r16
    71d4:	e1 f7       	brne	.-8      	; 0x71ce <RTC_getTime+0x6c>
    71d6:	88 0f       	add	r24, r24
    71d8:	99 1f       	adc	r25, r25
    71da:	28 0f       	add	r18, r24
    71dc:	39 1f       	adc	r19, r25
    71de:	4f 70       	andi	r20, 0x0F	; 15
    71e0:	42 0f       	add	r20, r18
    71e2:	40 93 98 4c 	sts	0x4C98, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    71e6:	4b 81       	ldd	r20, Y+3	; 0x03
    71e8:	84 2f       	mov	r24, r20
    71ea:	90 e0       	ldi	r25, 0x00	; 0
    71ec:	80 77       	andi	r24, 0x70	; 112
    71ee:	90 70       	andi	r25, 0x00	; 0
    71f0:	b4 e0       	ldi	r27, 0x04	; 4
    71f2:	95 95       	asr	r25
    71f4:	87 95       	ror	r24
    71f6:	ba 95       	dec	r27
    71f8:	e1 f7       	brne	.-8      	; 0x71f2 <RTC_getTime+0x90>
    71fa:	9c 01       	movw	r18, r24
    71fc:	a3 e0       	ldi	r26, 0x03	; 3
    71fe:	22 0f       	add	r18, r18
    7200:	33 1f       	adc	r19, r19
    7202:	aa 95       	dec	r26
    7204:	e1 f7       	brne	.-8      	; 0x71fe <RTC_getTime+0x9c>
    7206:	88 0f       	add	r24, r24
    7208:	99 1f       	adc	r25, r25
    720a:	28 0f       	add	r18, r24
    720c:	39 1f       	adc	r19, r25
    720e:	4f 70       	andi	r20, 0x0F	; 15
    7210:	42 0f       	add	r20, r18
    7212:	40 93 99 4c 	sts	0x4C99, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    7216:	4c 81       	ldd	r20, Y+4	; 0x04
    7218:	64 2f       	mov	r22, r20
    721a:	70 e0       	ldi	r23, 0x00	; 0
    721c:	cb 01       	movw	r24, r22
    721e:	80 73       	andi	r24, 0x30	; 48
    7220:	90 70       	andi	r25, 0x00	; 0
    7222:	e4 e0       	ldi	r30, 0x04	; 4
    7224:	95 95       	asr	r25
    7226:	87 95       	ror	r24
    7228:	ea 95       	dec	r30
    722a:	e1 f7       	brne	.-8      	; 0x7224 <RTC_getTime+0xc2>
    722c:	9c 01       	movw	r18, r24
    722e:	53 e0       	ldi	r21, 0x03	; 3
    7230:	22 0f       	add	r18, r18
    7232:	33 1f       	adc	r19, r19
    7234:	5a 95       	dec	r21
    7236:	e1 f7       	brne	.-8      	; 0x7230 <RTC_getTime+0xce>
    7238:	88 0f       	add	r24, r24
    723a:	99 1f       	adc	r25, r25
    723c:	28 0f       	add	r18, r24
    723e:	39 1f       	adc	r19, r25
    7240:	4f 70       	andi	r20, 0x0F	; 15
    7242:	42 0f       	add	r20, r18
    7244:	40 93 9a 4c 	sts	0x4C9A, r20
	time.Wday = timeData[4];
    7248:	8d 81       	ldd	r24, Y+5	; 0x05
    724a:	80 93 9b 4c 	sts	0x4C9B, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    724e:	4e 81       	ldd	r20, Y+6	; 0x06
    7250:	84 2f       	mov	r24, r20
    7252:	90 e0       	ldi	r25, 0x00	; 0
    7254:	80 73       	andi	r24, 0x30	; 48
    7256:	90 70       	andi	r25, 0x00	; 0
    7258:	14 e0       	ldi	r17, 0x04	; 4
    725a:	95 95       	asr	r25
    725c:	87 95       	ror	r24
    725e:	1a 95       	dec	r17
    7260:	e1 f7       	brne	.-8      	; 0x725a <RTC_getTime+0xf8>
    7262:	9c 01       	movw	r18, r24
    7264:	b3 e0       	ldi	r27, 0x03	; 3
    7266:	22 0f       	add	r18, r18
    7268:	33 1f       	adc	r19, r19
    726a:	ba 95       	dec	r27
    726c:	e1 f7       	brne	.-8      	; 0x7266 <RTC_getTime+0x104>
    726e:	88 0f       	add	r24, r24
    7270:	99 1f       	adc	r25, r25
    7272:	28 0f       	add	r18, r24
    7274:	39 1f       	adc	r19, r25
    7276:	4f 70       	andi	r20, 0x0F	; 15
    7278:	42 0f       	add	r20, r18
    727a:	40 93 9c 4c 	sts	0x4C9C, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    727e:	4f 81       	ldd	r20, Y+7	; 0x07
    7280:	84 2f       	mov	r24, r20
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	80 71       	andi	r24, 0x10	; 16
    7286:	90 70       	andi	r25, 0x00	; 0
    7288:	f4 e0       	ldi	r31, 0x04	; 4
    728a:	95 95       	asr	r25
    728c:	87 95       	ror	r24
    728e:	fa 95       	dec	r31
    7290:	e1 f7       	brne	.-8      	; 0x728a <RTC_getTime+0x128>
    7292:	9c 01       	movw	r18, r24
    7294:	e3 e0       	ldi	r30, 0x03	; 3
    7296:	22 0f       	add	r18, r18
    7298:	33 1f       	adc	r19, r19
    729a:	ea 95       	dec	r30
    729c:	e1 f7       	brne	.-8      	; 0x7296 <RTC_getTime+0x134>
    729e:	88 0f       	add	r24, r24
    72a0:	99 1f       	adc	r25, r25
    72a2:	28 0f       	add	r18, r24
    72a4:	39 1f       	adc	r19, r25
    72a6:	4f 70       	andi	r20, 0x0F	; 15
    72a8:	42 0f       	add	r20, r18
    72aa:	40 93 9d 4c 	sts	0x4C9D, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    72ae:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    72b0:	42 2f       	mov	r20, r18
    72b2:	4f 70       	andi	r20, 0x0F	; 15
    72b4:	42 5e       	subi	r20, 0xE2	; 226
    72b6:	60 75       	andi	r22, 0x50	; 80
    72b8:	70 70       	andi	r23, 0x00	; 0
    72ba:	86 e0       	ldi	r24, 0x06	; 6
    72bc:	75 95       	asr	r23
    72be:	67 95       	ror	r22
    72c0:	8a 95       	dec	r24
    72c2:	e1 f7       	brne	.-8      	; 0x72bc <RTC_getTime+0x15a>
    72c4:	84 e6       	ldi	r24, 0x64	; 100
    72c6:	90 e0       	ldi	r25, 0x00	; 0
    72c8:	fc 01       	movw	r30, r24
    72ca:	6e 9f       	mul	r22, r30
    72cc:	c0 01       	movw	r24, r0
    72ce:	6f 9f       	mul	r22, r31
    72d0:	90 0d       	add	r25, r0
    72d2:	7e 9f       	mul	r23, r30
    72d4:	90 0d       	add	r25, r0
    72d6:	11 24       	eor	r1, r1
    72d8:	48 0f       	add	r20, r24
    72da:	22 95       	swap	r18
    72dc:	2f 70       	andi	r18, 0x0F	; 15
    72de:	30 e0       	ldi	r19, 0x00	; 0
    72e0:	c9 01       	movw	r24, r18
    72e2:	03 e0       	ldi	r16, 0x03	; 3
    72e4:	88 0f       	add	r24, r24
    72e6:	99 1f       	adc	r25, r25
    72e8:	0a 95       	dec	r16
    72ea:	e1 f7       	brne	.-8      	; 0x72e4 <RTC_getTime+0x182>
    72ec:	22 0f       	add	r18, r18
    72ee:	33 1f       	adc	r19, r19
    72f0:	82 0f       	add	r24, r18
    72f2:	93 1f       	adc	r25, r19
    72f4:	48 0f       	add	r20, r24
    72f6:	40 93 9e 4c 	sts	0x4C9E, r20




} 
    72fa:	28 96       	adiw	r28, 0x08	; 8
    72fc:	cd bf       	out	0x3d, r28	; 61
    72fe:	de bf       	out	0x3e, r29	; 62
    7300:	cf 91       	pop	r28
    7302:	df 91       	pop	r29
    7304:	1f 91       	pop	r17
    7306:	0f 91       	pop	r16
    7308:	08 95       	ret

0000730a <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    730a:	0e 94 b1 38 	call	0x7162	; 0x7162 <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    730e:	87 e9       	ldi	r24, 0x97	; 151
    7310:	9c e4       	ldi	r25, 0x4C	; 76
    7312:	0e 94 02 37 	call	0x6e04	; 0x6e04 <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    7316:	08 95       	ret

00007318 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    7318:	0f 93       	push	r16
    731a:	df 93       	push	r29
    731c:	cf 93       	push	r28
    731e:	0f 92       	push	r0
    7320:	cd b7       	in	r28, 0x3d	; 61
    7322:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    7324:	80 ec       	ldi	r24, 0xC0	; 192
    7326:	e0 e5       	ldi	r30, 0x50	; 80
    7328:	f0 e0       	ldi	r31, 0x00	; 0
    732a:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    732c:	80 91 50 00 	lds	r24, 0x0050
    7330:	88 60       	ori	r24, 0x08	; 8
    7332:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    7336:	80 91 51 00 	lds	r24, 0x0051
    733a:	83 ff       	sbrs	r24, 3
    733c:	fc cf       	rjmp	.-8      	; 0x7336 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    733e:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    7342:	8f b7       	in	r24, 0x3f	; 63
    7344:	89 83       	std	Y+1, r24	; 0x01
    cli();
    7346:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7348:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    734a:	28 7f       	andi	r18, 0xF8	; 248
    734c:	23 60       	ori	r18, 0x03	; 3
    734e:	80 e4       	ldi	r24, 0x40	; 64
    7350:	90 e0       	ldi	r25, 0x00	; 0
    7352:	fc 01       	movw	r30, r24
    7354:	08 ed       	ldi	r16, 0xD8	; 216
    7356:	04 bf       	out	0x34, r16	; 52
    7358:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    735a:	89 81       	ldd	r24, Y+1	; 0x01
    735c:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    735e:	80 91 50 00 	lds	r24, 0x0050
    7362:	8e 7f       	andi	r24, 0xFE	; 254
    7364:	80 93 50 00 	sts	0x0050, r24
}
    7368:	0f 90       	pop	r0
    736a:	cf 91       	pop	r28
    736c:	df 91       	pop	r29
    736e:	0f 91       	pop	r16
    7370:	08 95       	ret

00007372 <Disable_JTAG>:

void Disable_JTAG(void){
    7372:	0f 93       	push	r16
    7374:	df 93       	push	r29
    7376:	cf 93       	push	r28
    7378:	0f 92       	push	r0
    737a:	cd b7       	in	r28, 0x3d	; 61
    737c:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    737e:	8f b7       	in	r24, 0x3f	; 63
    7380:	89 83       	std	Y+1, r24	; 0x01
    cli();
    7382:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7384:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7386:	21 e0       	ldi	r18, 0x01	; 1
    7388:	86 e9       	ldi	r24, 0x96	; 150
    738a:	90 e0       	ldi	r25, 0x00	; 0
    738c:	fc 01       	movw	r30, r24
    738e:	08 ed       	ldi	r16, 0xD8	; 216
    7390:	04 bf       	out	0x34, r16	; 52
    7392:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    7394:	89 81       	ldd	r24, Y+1	; 0x01
    7396:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    7398:	0f 90       	pop	r0
    739a:	cf 91       	pop	r28
    739c:	df 91       	pop	r29
    739e:	0f 91       	pop	r16
    73a0:	08 95       	ret

000073a2 <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    73a2:	e0 e0       	ldi	r30, 0x00	; 0
    73a4:	f1 e0       	ldi	r31, 0x01	; 1
    73a6:	80 81       	ld	r24, Z
    73a8:	80 68       	ori	r24, 0x80	; 128
    73aa:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;							
    73ac:	82 89       	ldd	r24, Z+18	; 0x12
    73ae:	85 60       	ori	r24, 0x05	; 5
    73b0:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    73b2:	8b e8       	ldi	r24, 0x8B	; 139
    73b4:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    73b6:	80 e0       	ldi	r24, 0x00	; 0
    73b8:	94 e0       	ldi	r25, 0x04	; 4
    73ba:	84 8b       	std	Z+20, r24	; 0x14
    73bc:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    73be:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    73c0:	80 ea       	ldi	r24, 0xA0	; 160
    73c2:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    73c4:	8a e0       	ldi	r24, 0x0A	; 10
    73c6:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    73c8:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    73ca:	8d e9       	ldi	r24, 0x9D	; 157
    73cc:	9a e3       	ldi	r25, 0x3A	; 58
    73ce:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    73d0:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    73d2:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    73d4:	80 89       	ldd	r24, Z+16	; 0x10
    73d6:	84 6a       	ori	r24, 0xA4	; 164
    73d8:	80 8b       	std	Z+16, r24	; 0x10
		
}
    73da:	08 95       	ret

000073dc <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    73dc:	e0 ea       	ldi	r30, 0xA0	; 160
    73de:	f0 e0       	ldi	r31, 0x00	; 0
    73e0:	82 81       	ldd	r24, Z+2	; 0x02
    73e2:	87 60       	ori	r24, 0x07	; 7
    73e4:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    73e6:	78 94       	sei
}
    73e8:	08 95       	ret

000073ea <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 14400
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	TCD0.PER = 1440;
    73ea:	e0 e0       	ldi	r30, 0x00	; 0
    73ec:	f9 e0       	ldi	r31, 0x09	; 9
    73ee:	80 ea       	ldi	r24, 0xA0	; 160
    73f0:	95 e0       	ldi	r25, 0x05	; 5
    73f2:	86 a3       	std	Z+38, r24	; 0x26
    73f4:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    73f6:	80 81       	ld	r24, Z
    73f8:	80 7f       	andi	r24, 0xF0	; 240
    73fa:	87 60       	ori	r24, 0x07	; 7
    73fc:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    73fe:	86 81       	ldd	r24, Z+6	; 0x06
    7400:	8c 7f       	andi	r24, 0xFC	; 252
    7402:	81 60       	ori	r24, 0x01	; 1
    7404:	86 83       	std	Z+6, r24	; 0x06
}
    7406:	08 95       	ret

00007408 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    7408:	e0 e4       	ldi	r30, 0x40	; 64
    740a:	fa e0       	ldi	r31, 0x0A	; 10
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	99 e0       	ldi	r25, 0x09	; 9
    7410:	86 a3       	std	Z+38, r24	; 0x26
    7412:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    7414:	80 81       	ld	r24, Z
    7416:	80 7f       	andi	r24, 0xF0	; 240
    7418:	85 60       	ori	r24, 0x05	; 5
    741a:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    741c:	86 81       	ldd	r24, Z+6	; 0x06
    741e:	8c 7f       	andi	r24, 0xFC	; 252
    7420:	82 60       	ori	r24, 0x02	; 2
    7422:	86 83       	std	Z+6, r24	; 0x06

}
    7424:	08 95       	ret

00007426 <SD_WriteRTCBlock>:
	    okToGetRemainingSpace = false;
	}
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    7426:	af 92       	push	r10
    7428:	bf 92       	push	r11
    742a:	cf 92       	push	r12
    742c:	df 92       	push	r13
    742e:	ef 92       	push	r14
    7430:	ff 92       	push	r15
    7432:	0f 93       	push	r16
    7434:	1f 93       	push	r17
    7436:	7b 01       	movw	r14, r22
    7438:	8c 01       	movw	r16, r24
    743a:	59 01       	movw	r10, r18
    743c:	6a 01       	movw	r12, r20


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    743e:	8f ef       	ldi	r24, 0xFF	; 255
    7440:	9f ef       	ldi	r25, 0xFF	; 255
    7442:	af ef       	ldi	r26, 0xFF	; 255
    7444:	bf ef       	ldi	r27, 0xFF	; 255
    7446:	80 93 77 54 	sts	0x5477, r24
    744a:	90 93 78 54 	sts	0x5478, r25
    744e:	a0 93 79 54 	sts	0x5479, r26
    7452:	b0 93 7a 54 	sts	0x547A, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7456:	6c e4       	ldi	r22, 0x4C	; 76
    7458:	74 e7       	ldi	r23, 0x74	; 116
    745a:	8e ed       	ldi	r24, 0xDE	; 222
    745c:	90 eb       	ldi	r25, 0xB0	; 176
    745e:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(27);				// record size  
    7462:	6b e1       	ldi	r22, 0x1B	; 27
    7464:	70 e0       	ldi	r23, 0x00	; 0
    7466:	80 e0       	ldi	r24, 0x00	; 0
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(2); 		// record type  
    746e:	82 e0       	ldi	r24, 0x02	; 2
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    7476:	c8 01       	movw	r24, r16
    7478:	b7 01       	movw	r22, r14
    747a:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    747e:	c6 01       	movw	r24, r12
    7480:	b5 01       	movw	r22, r10
    7482:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write8(0);
    7486:	80 e0       	ldi	r24, 0x00	; 0
    7488:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    748c:	60 e0       	ldi	r22, 0x00	; 0
    748e:	70 e0       	ldi	r23, 0x00	; 0
    7490:	80 e0       	ldi	r24, 0x00	; 0
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_WriteCRC();			      // CRC			
    7498:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>
		
	f_sync(&Log_File);
    749c:	8f e9       	ldi	r24, 0x9F	; 159
    749e:	9c e4       	ldi	r25, 0x4C	; 76
    74a0:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    74a4:	1f 91       	pop	r17
    74a6:	0f 91       	pop	r16
    74a8:	ff 90       	pop	r15
    74aa:	ef 90       	pop	r14
    74ac:	df 90       	pop	r13
    74ae:	cf 90       	pop	r12
    74b0:	bf 90       	pop	r11
    74b2:	af 90       	pop	r10
    74b4:	08 95       	ret

000074b6 <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    74b6:	20 91 1a 31 	lds	r18, 0x311A
    74ba:	30 91 1b 31 	lds	r19, 0x311B
    74be:	80 91 18 31 	lds	r24, 0x3118
    74c2:	90 91 19 31 	lds	r25, 0x3119
    74c6:	28 17       	cp	r18, r24
    74c8:	39 07       	cpc	r19, r25
    74ca:	a9 f3       	breq	.-22     	; 0x74b6 <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    74cc:	81 e0       	ldi	r24, 0x01	; 1
    74ce:	0e 94 c0 03 	call	0x780	; 0x780 <Rs232_GetByte>
    74d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
    74d6:	ef cf       	rjmp	.-34     	; 0x74b6 <Rs232_To_Debug>

000074d8 <getDeviceID>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74d8:	82 e0       	ldi	r24, 0x02	; 2
    74da:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74de:	e8 e0       	ldi	r30, 0x08	; 8
    74e0:	f0 e0       	ldi	r31, 0x00	; 0
    74e2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74e4:	10 92 ca 01 	sts	0x01CA, r1
	
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    74e8:	e0 93 06 48 	sts	0x4806, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74ec:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74f0:	e9 e0       	ldi	r30, 0x09	; 9
    74f2:	f0 e0       	ldi	r31, 0x00	; 0
    74f4:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74f6:	10 92 ca 01 	sts	0x01CA, r1
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
    74fa:	e0 93 07 48 	sts	0x4807, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74fe:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7502:	ea e0       	ldi	r30, 0x0A	; 10
    7504:	f0 e0       	ldi	r31, 0x00	; 0
    7506:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7508:	10 92 ca 01 	sts	0x01CA, r1
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
    750c:	e0 93 08 48 	sts	0x4808, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7510:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7514:	eb e0       	ldi	r30, 0x0B	; 11
    7516:	f0 e0       	ldi	r31, 0x00	; 0
    7518:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    751a:	10 92 ca 01 	sts	0x01CA, r1

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
    751e:	e0 93 09 48 	sts	0x4809, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7522:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7526:	ec e0       	ldi	r30, 0x0C	; 12
    7528:	f0 e0       	ldi	r31, 0x00	; 0
    752a:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    752c:	10 92 ca 01 	sts	0x01CA, r1
void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
    7530:	e0 93 0a 48 	sts	0x480A, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7534:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7538:	ed e0       	ldi	r30, 0x0D	; 13
    753a:	f0 e0       	ldi	r31, 0x00	; 0
    753c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    753e:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
    7542:	e0 93 0b 48 	sts	0x480B, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7546:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    754a:	e0 e1       	ldi	r30, 0x10	; 16
    754c:	f0 e0       	ldi	r31, 0x00	; 0
    754e:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7550:	10 92 ca 01 	sts	0x01CA, r1
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
    7554:	e0 93 0c 48 	sts	0x480C, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7558:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    755c:	e2 e1       	ldi	r30, 0x12	; 18
    755e:	f0 e0       	ldi	r31, 0x00	; 0
    7560:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7562:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
    7566:	e0 93 0d 48 	sts	0x480D, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    756a:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    756e:	e3 e1       	ldi	r30, 0x13	; 19
    7570:	f0 e0       	ldi	r31, 0x00	; 0
    7572:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7574:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
    7578:	e0 93 0e 48 	sts	0x480E, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    757c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7580:	e4 e1       	ldi	r30, 0x14	; 20
    7582:	f0 e0       	ldi	r31, 0x00	; 0
    7584:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7586:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
    758a:	e0 93 0f 48 	sts	0x480F, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    758e:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7592:	e5 e1       	ldi	r30, 0x15	; 21
    7594:	f0 e0       	ldi	r31, 0x00	; 0
    7596:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7598:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
    759c:	e0 93 10 48 	sts	0x4810, r30
	deviceID[11] = '\0';
    75a0:	10 92 11 48 	sts	0x4811, r1
    75a4:	e6 e0       	ldi	r30, 0x06	; 6
    75a6:	f8 e4       	ldi	r31, 0x48	; 72
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
    75a8:	91 e0       	ldi	r25, 0x01	; 1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
    75aa:	80 81       	ld	r24, Z
    75ac:	88 23       	and	r24, r24
    75ae:	09 f4       	brne	.+2      	; 0x75b2 <getDeviceID+0xda>
	       deviceID[i] += 1;
    75b0:	90 83       	st	Z, r25
    75b2:	31 96       	adiw	r30, 0x01	; 1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
    75b4:	88 e4       	ldi	r24, 0x48	; 72
    75b6:	e1 31       	cpi	r30, 0x11	; 17
    75b8:	f8 07       	cpc	r31, r24
    75ba:	b9 f7       	brne	.-18     	; 0x75aa <getDeviceID+0xd2>
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
	    }
	}
}
    75bc:	08 95       	ret

000075be <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75be:	aa ec       	ldi	r26, 0xCA	; 202
    75c0:	b1 e0       	ldi	r27, 0x01	; 1
    75c2:	92 e0       	ldi	r25, 0x02	; 2
    75c4:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    75c6:	e8 2f       	mov	r30, r24
    75c8:	f0 e0       	ldi	r31, 0x00	; 0
    75ca:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75cc:	1c 92       	st	X, r1

	return result;
    75ce:	8e 2f       	mov	r24, r30
    75d0:	08 95       	ret

000075d2 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    75d2:	ef 92       	push	r14
    75d4:	ff 92       	push	r15
    75d6:	0f 93       	push	r16
    75d8:	1f 93       	push	r17
    75da:	cf 93       	push	r28
    75dc:	df 93       	push	r29
    75de:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    75e0:	6f e9       	ldi	r22, 0x9F	; 159
    75e2:	7c e4       	ldi	r23, 0x4C	; 76
    75e4:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
    75e8:	60 e0       	ldi	r22, 0x00	; 0
    75ea:	70 e0       	ldi	r23, 0x00	; 0
    75ec:	3b c0       	rjmp	.+118    	; 0x7664 <SD_WriteString+0x92>
         } 
     }*/


    for (uint16_t i=0; i<strlen(string); i++){
      CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    75ee:	e0 90 77 54 	lds	r14, 0x5477
    75f2:	f0 90 78 54 	lds	r15, 0x5478
    75f6:	00 91 79 54 	lds	r16, 0x5479
    75fa:	10 91 7a 54 	lds	r17, 0x547A
    75fe:	20 91 77 54 	lds	r18, 0x5477
    7602:	30 91 78 54 	lds	r19, 0x5478
    7606:	40 91 79 54 	lds	r20, 0x5479
    760a:	50 91 7a 54 	lds	r21, 0x547A
    760e:	30 70       	andi	r19, 0x00	; 0
    7610:	40 70       	andi	r20, 0x00	; 0
    7612:	50 70       	andi	r21, 0x00	; 0
    7614:	fe 01       	movw	r30, r28
    7616:	e6 0f       	add	r30, r22
    7618:	f7 1f       	adc	r31, r23
    761a:	80 81       	ld	r24, Z
    761c:	90 e0       	ldi	r25, 0x00	; 0
    761e:	a0 e0       	ldi	r26, 0x00	; 0
    7620:	b0 e0       	ldi	r27, 0x00	; 0
    7622:	28 27       	eor	r18, r24
    7624:	39 27       	eor	r19, r25
    7626:	4a 27       	eor	r20, r26
    7628:	5b 27       	eor	r21, r27
    762a:	22 0f       	add	r18, r18
    762c:	33 1f       	adc	r19, r19
    762e:	22 0f       	add	r18, r18
    7630:	33 1f       	adc	r19, r19
    7632:	27 5b       	subi	r18, 0xB7	; 183
    7634:	36 4d       	sbci	r19, 0xD6	; 214
    7636:	ef 2c       	mov	r14, r15
    7638:	f0 2e       	mov	r15, r16
    763a:	01 2f       	mov	r16, r17
    763c:	11 27       	eor	r17, r17
    763e:	f9 01       	movw	r30, r18
    7640:	80 81       	ld	r24, Z
    7642:	91 81       	ldd	r25, Z+1	; 0x01
    7644:	a2 81       	ldd	r26, Z+2	; 0x02
    7646:	b3 81       	ldd	r27, Z+3	; 0x03
    7648:	e8 26       	eor	r14, r24
    764a:	f9 26       	eor	r15, r25
    764c:	0a 27       	eor	r16, r26
    764e:	1b 27       	eor	r17, r27
    7650:	e0 92 77 54 	sts	0x5477, r14
    7654:	f0 92 78 54 	sts	0x5478, r15
    7658:	00 93 79 54 	sts	0x5479, r16
    765c:	10 93 7a 54 	sts	0x547A, r17
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     }*/


    for (uint16_t i=0; i<strlen(string); i++){
    7660:	6f 5f       	subi	r22, 0xFF	; 255
    7662:	7f 4f       	sbci	r23, 0xFF	; 255
    7664:	fe 01       	movw	r30, r28
    7666:	01 90       	ld	r0, Z+
    7668:	00 20       	and	r0, r0
    766a:	e9 f7       	brne	.-6      	; 0x7666 <SD_WriteString+0x94>
    766c:	31 97       	sbiw	r30, 0x01	; 1
    766e:	ec 1b       	sub	r30, r28
    7670:	fd 0b       	sbc	r31, r29
    7672:	6e 17       	cp	r22, r30
    7674:	7f 07       	cpc	r23, r31
    7676:	08 f4       	brcc	.+2      	; 0x767a <SD_WriteString+0xa8>
    7678:	ba cf       	rjmp	.-140    	; 0x75ee <SD_WriteString+0x1c>
      CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }

}
    767a:	df 91       	pop	r29
    767c:	cf 91       	pop	r28
    767e:	1f 91       	pop	r17
    7680:	0f 91       	pop	r16
    7682:	ff 90       	pop	r15
    7684:	ef 90       	pop	r14
    7686:	08 95       	ret

00007688 <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    7688:	0f 93       	push	r16
    768a:	1f 93       	push	r17


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    768c:	8f ef       	ldi	r24, 0xFF	; 255
    768e:	9f ef       	ldi	r25, 0xFF	; 255
    7690:	af ef       	ldi	r26, 0xFF	; 255
    7692:	bf ef       	ldi	r27, 0xFF	; 255
    7694:	80 93 77 54 	sts	0x5477, r24
    7698:	90 93 78 54 	sts	0x5478, r25
    769c:	a0 93 79 54 	sts	0x5479, r26
    76a0:	b0 93 7a 54 	sts	0x547A, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    76a4:	6c e4       	ldi	r22, 0x4C	; 76
    76a6:	74 e7       	ldi	r23, 0x74	; 116
    76a8:	8e ed       	ldi	r24, 0xDE	; 222
    76aa:	90 eb       	ldi	r25, 0xB0	; 176
    76ac:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(61);				// record size
    76b0:	6d e3       	ldi	r22, 0x3D	; 61
    76b2:	70 e0       	ldi	r23, 0x00	; 0
    76b4:	80 e0       	ldi	r24, 0x00	; 0
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(3); 		// record type
    76bc:	83 e0       	ldi	r24, 0x03	; 3
    76be:	90 e0       	ldi	r25, 0x00	; 0
    76c0:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    76c4:	60 91 f8 30 	lds	r22, 0x30F8
    76c8:	70 91 f9 30 	lds	r23, 0x30F9
    76cc:	80 91 fa 30 	lds	r24, 0x30FA
    76d0:	90 91 fb 30 	lds	r25, 0x30FB
    76d4:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    76d8:	60 e0       	ldi	r22, 0x00	; 0
    76da:	70 e8       	ldi	r23, 0x80	; 128
    76dc:	87 e9       	ldi	r24, 0x97	; 151
    76de:	96 e0       	ldi	r25, 0x06	; 6
    76e0:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(1);												// number of samples
    76e4:	61 e0       	ldi	r22, 0x01	; 1
    76e6:	70 e0       	ldi	r23, 0x00	; 0
    76e8:	80 e0       	ldi	r24, 0x00	; 0
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_WriteString("Air_Small");
    76f0:	83 e3       	ldi	r24, 0x33	; 51
    76f2:	90 e2       	ldi	r25, 0x20	; 32
    76f4:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    76f8:	89 e0       	ldi	r24, 0x09	; 9
    76fa:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("32");
    76fe:	0d e3       	ldi	r16, 0x3D	; 61
    7700:	10 e2       	ldi	r17, 0x20	; 32
    7702:	c8 01       	movw	r24, r16
    7704:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7708:	8a e0       	ldi	r24, 0x0A	; 10
    770a:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("Air_Large");
    770e:	80 e4       	ldi	r24, 0x40	; 64
    7710:	90 e2       	ldi	r25, 0x20	; 32
    7712:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    7716:	89 e0       	ldi	r24, 0x09	; 9
    7718:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("32");
    771c:	c8 01       	movw	r24, r16
    771e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7722:	8a e0       	ldi	r24, 0x0A	; 10
    7724:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	SD_Write8(0x00);
    7728:	80 e0       	ldi	r24, 0x00	; 0
    772a:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	SD_Write32(smallCount);
    772e:	60 91 07 3a 	lds	r22, 0x3A07
    7732:	70 91 08 3a 	lds	r23, 0x3A08
    7736:	80 91 09 3a 	lds	r24, 0x3A09
    773a:	90 91 0a 3a 	lds	r25, 0x3A0A
    773e:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(largeCount);
    7742:	60 91 4d 59 	lds	r22, 0x594D
    7746:	70 91 4e 59 	lds	r23, 0x594E
    774a:	80 91 4f 59 	lds	r24, 0x594F
    774e:	90 91 50 59 	lds	r25, 0x5950
    7752:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_WriteCRC();			// CRC
    7756:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>

	f_sync(&Log_File);
    775a:	8f e9       	ldi	r24, 0x9F	; 159
    775c:	9c e4       	ldi	r25, 0x4C	; 76
    775e:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    7762:	1f 91       	pop	r17
    7764:	0f 91       	pop	r16
    7766:	08 95       	ret

00007768 <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    7768:	1f 93       	push	r17
    776a:	cf 93       	push	r28
    776c:	df 93       	push	r29
    776e:	18 2f       	mov	r17, r24
    7770:	8f ef       	ldi	r24, 0xFF	; 255
    7772:	9f ef       	ldi	r25, 0xFF	; 255
    7774:	af ef       	ldi	r26, 0xFF	; 255
    7776:	bf ef       	ldi	r27, 0xFF	; 255
    7778:	80 93 77 54 	sts	0x5477, r24
    777c:	90 93 78 54 	sts	0x5478, r25
    7780:	a0 93 79 54 	sts	0x5479, r26
    7784:	b0 93 7a 54 	sts	0x547A, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7788:	6c e4       	ldi	r22, 0x4C	; 76
    778a:	74 e7       	ldi	r23, 0x74	; 116
    778c:	8e ed       	ldi	r24, 0xDE	; 222
    778e:	90 eb       	ldi	r25, 0xB0	; 176
    7790:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(244);				// record size
    7794:	64 ef       	ldi	r22, 0xF4	; 244
    7796:	70 e0       	ldi	r23, 0x00	; 0
    7798:	80 e0       	ldi	r24, 0x00	; 0
    779a:	90 e0       	ldi	r25, 0x00	; 0
    779c:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(3); 		// record type
    77a0:	83 e0       	ldi	r24, 0x03	; 3
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    77a8:	11 30       	cpi	r17, 0x01	; 1
    77aa:	49 f4       	brne	.+18     	; 0x77be <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    77ac:	60 91 f0 30 	lds	r22, 0x30F0
    77b0:	70 91 f1 30 	lds	r23, 0x30F1
    77b4:	80 91 f2 30 	lds	r24, 0x30F2
    77b8:	90 91 f3 30 	lds	r25, 0x30F3
    77bc:	08 c0       	rjmp	.+16     	; 0x77ce <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    77be:	60 91 f4 30 	lds	r22, 0x30F4
    77c2:	70 91 f5 30 	lds	r23, 0x30F5
    77c6:	80 91 f6 30 	lds	r24, 0x30F6
    77ca:	90 91 f7 30 	lds	r25, 0x30F7
    77ce:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    77d2:	60 e0       	ldi	r22, 0x00	; 0
    77d4:	70 e2       	ldi	r23, 0x20	; 32
    77d6:	8c e1       	ldi	r24, 0x1C	; 28
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(10);												// number of samples
    77de:	6a e0       	ldi	r22, 0x0A	; 10
    77e0:	70 e0       	ldi	r23, 0x00	; 0
    77e2:	80 e0       	ldi	r24, 0x00	; 0
    77e4:	90 e0       	ldi	r25, 0x00	; 0
    77e6:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_WriteString("Light_Green");
    77ea:	8a e4       	ldi	r24, 0x4A	; 74
    77ec:	90 e2       	ldi	r25, 0x20	; 32
    77ee:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    77f2:	89 e0       	ldi	r24, 0x09	; 9
    77f4:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("32");
    77f8:	8d e3       	ldi	r24, 0x3D	; 61
    77fa:	90 e2       	ldi	r25, 0x20	; 32
    77fc:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7800:	8a e0       	ldi	r24, 0x0A	; 10
    7802:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("Light_Red");
    7806:	86 e5       	ldi	r24, 0x56	; 86
    7808:	90 e2       	ldi	r25, 0x20	; 32
    780a:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    780e:	89 e0       	ldi	r24, 0x09	; 9
    7810:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("32");
    7814:	8d e3       	ldi	r24, 0x3D	; 61
    7816:	90 e2       	ldi	r25, 0x20	; 32
    7818:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    781c:	8a e0       	ldi	r24, 0x0A	; 10
    781e:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("Light_Blue");
    7822:	80 e6       	ldi	r24, 0x60	; 96
    7824:	90 e2       	ldi	r25, 0x20	; 32
    7826:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    782a:	89 e0       	ldi	r24, 0x09	; 9
    782c:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("32");
    7830:	8d e3       	ldi	r24, 0x3D	; 61
    7832:	90 e2       	ldi	r25, 0x20	; 32
    7834:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7838:	8a e0       	ldi	r24, 0x0A	; 10
    783a:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("Light_Clear");
    783e:	8b e6       	ldi	r24, 0x6B	; 107
    7840:	90 e2       	ldi	r25, 0x20	; 32
    7842:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    7846:	89 e0       	ldi	r24, 0x09	; 9
    7848:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("32");
    784c:	8d e3       	ldi	r24, 0x3D	; 61
    784e:	90 e2       	ldi	r25, 0x20	; 32
    7850:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7854:	8a e0       	ldi	r24, 0x0A	; 10
    7856:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	SD_Write8(0x00);
    785a:	80 e0       	ldi	r24, 0x00	; 0
    785c:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	if(bufferNumber == 1){
    7860:	11 30       	cpi	r17, 0x01	; 1
    7862:	69 f4       	brne	.+26     	; 0x787e <SD_WriteLightBuffer+0x116>
    7864:	cb e7       	ldi	r28, 0x7B	; 123
    7866:	d8 e5       	ldi	r29, 0x58	; 88
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    7868:	69 91       	ld	r22, Y+
    786a:	79 91       	ld	r23, Y+
    786c:	89 91       	ld	r24, Y+
    786e:	99 91       	ld	r25, Y+
    7870:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    7874:	89 e5       	ldi	r24, 0x59	; 89
    7876:	cb 31       	cpi	r28, 0x1B	; 27
    7878:	d8 07       	cpc	r29, r24
    787a:	b1 f7       	brne	.-20     	; 0x7868 <SD_WriteLightBuffer+0x100>
    787c:	0c c0       	rjmp	.+24     	; 0x7896 <SD_WriteLightBuffer+0x12e>
    787e:	c9 ec       	ldi	r28, 0xC9	; 201
    7880:	d2 e4       	ldi	r29, 0x42	; 66
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    7882:	69 91       	ld	r22, Y+
    7884:	79 91       	ld	r23, Y+
    7886:	89 91       	ld	r24, Y+
    7888:	99 91       	ld	r25, Y+
    788a:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    788e:	83 e4       	ldi	r24, 0x43	; 67
    7890:	c9 36       	cpi	r28, 0x69	; 105
    7892:	d8 07       	cpc	r29, r24
    7894:	b1 f7       	brne	.-20     	; 0x7882 <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7896:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>

	f_sync(&Log_File);
    789a:	8f e9       	ldi	r24, 0x9F	; 159
    789c:	9c e4       	ldi	r25, 0x4C	; 76
    789e:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    78a2:	df 91       	pop	r29
    78a4:	cf 91       	pop	r28
    78a6:	1f 91       	pop	r17
    78a8:	08 95       	ret

000078aa <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    78aa:	1f 93       	push	r17
    78ac:	18 2f       	mov	r17, r24
    78ae:	8f ef       	ldi	r24, 0xFF	; 255
    78b0:	9f ef       	ldi	r25, 0xFF	; 255
    78b2:	af ef       	ldi	r26, 0xFF	; 255
    78b4:	bf ef       	ldi	r27, 0xFF	; 255
    78b6:	80 93 77 54 	sts	0x5477, r24
    78ba:	90 93 78 54 	sts	0x5478, r25
    78be:	a0 93 79 54 	sts	0x5479, r26
    78c2:	b0 93 7a 54 	sts	0x547A, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    78c6:	6c e4       	ldi	r22, 0x4C	; 76
    78c8:	74 e7       	ldi	r23, 0x74	; 116
    78ca:	8e ed       	ldi	r24, 0xDE	; 222
    78cc:	90 eb       	ldi	r25, 0xB0	; 176
    78ce:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    78d2:	60 e1       	ldi	r22, 0x10	; 16
    78d4:	74 e0       	ldi	r23, 0x04	; 4
    78d6:	80 e0       	ldi	r24, 0x00	; 0
    78d8:	90 e0       	ldi	r25, 0x00	; 0
    78da:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(3); 									// record type
    78de:	83 e0       	ldi	r24, 0x03	; 3
    78e0:	90 e0       	ldi	r25, 0x00	; 0
    78e2:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    78e6:	11 30       	cpi	r17, 0x01	; 1
    78e8:	49 f4       	brne	.+18     	; 0x78fc <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    78ea:	60 91 e8 30 	lds	r22, 0x30E8
    78ee:	70 91 e9 30 	lds	r23, 0x30E9
    78f2:	80 91 ea 30 	lds	r24, 0x30EA
    78f6:	90 91 eb 30 	lds	r25, 0x30EB
    78fa:	08 c0       	rjmp	.+16     	; 0x790c <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    78fc:	60 91 ec 30 	lds	r22, 0x30EC
    7900:	70 91 ed 30 	lds	r23, 0x30ED
    7904:	80 91 ee 30 	lds	r24, 0x30EE
    7908:	90 91 ef 30 	lds	r25, 0x30EF
    790c:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    7910:	60 e0       	ldi	r22, 0x00	; 0
    7912:	71 e0       	ldi	r23, 0x01	; 1
    7914:	80 e0       	ldi	r24, 0x00	; 0
    7916:	90 e0       	ldi	r25, 0x00	; 0
    7918:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    791c:	68 ee       	ldi	r22, 0xE8	; 232
    791e:	73 e0       	ldi	r23, 0x03	; 3
    7920:	80 e0       	ldi	r24, 0x00	; 0
    7922:	90 e0       	ldi	r25, 0x00	; 0
    7924:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_WriteString("Microphone");
    7928:	87 e7       	ldi	r24, 0x77	; 119
    792a:	90 e2       	ldi	r25, 0x20	; 32
    792c:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    7930:	89 e0       	ldi	r24, 0x09	; 9
    7932:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("8");
    7936:	82 e8       	ldi	r24, 0x82	; 130
    7938:	90 e2       	ldi	r25, 0x20	; 32
    793a:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    793e:	8a e0       	ldi	r24, 0x0A	; 10
    7940:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_Write8(0x00);
    7944:	80 e0       	ldi	r24, 0x00	; 0
    7946:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	if(bufferNumber == 1){
    794a:	11 30       	cpi	r17, 0x01	; 1
    794c:	19 f4       	brne	.+6      	; 0x7954 <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    794e:	8b e9       	ldi	r24, 0x9B	; 155
    7950:	93 e4       	ldi	r25, 0x43	; 67
    7952:	02 c0       	rjmp	.+4      	; 0x7958 <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    7954:	8d e9       	ldi	r24, 0x9D	; 157
    7956:	9e e3       	ldi	r25, 0x3E	; 62
    7958:	68 ee       	ldi	r22, 0xE8	; 232
    795a:	73 e0       	ldi	r23, 0x03	; 3
    795c:	0e 94 2b 2b 	call	0x5656	; 0x5656 <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    7960:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>

	f_sync(&Log_File);
    7964:	8f e9       	ldi	r24, 0x9F	; 159
    7966:	9c e4       	ldi	r25, 0x4C	; 76
    7968:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    796c:	1f 91       	pop	r17
    796e:	08 95       	ret

00007970 <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    7970:	1f 93       	push	r17
    7972:	cf 93       	push	r28
    7974:	df 93       	push	r29
    7976:	18 2f       	mov	r17, r24
    7978:	8f ef       	ldi	r24, 0xFF	; 255
    797a:	9f ef       	ldi	r25, 0xFF	; 255
    797c:	af ef       	ldi	r26, 0xFF	; 255
    797e:	bf ef       	ldi	r27, 0xFF	; 255
    7980:	80 93 77 54 	sts	0x5477, r24
    7984:	90 93 78 54 	sts	0x5478, r25
    7988:	a0 93 79 54 	sts	0x5479, r26
    798c:	b0 93 7a 54 	sts	0x547A, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7990:	6c e4       	ldi	r22, 0x4C	; 76
    7992:	74 e7       	ldi	r23, 0x74	; 116
    7994:	8e ed       	ldi	r24, 0xDE	; 222
    7996:	90 eb       	ldi	r25, 0xB0	; 176
    7998:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(48);				// record size
    799c:	60 e3       	ldi	r22, 0x30	; 48
    799e:	70 e0       	ldi	r23, 0x00	; 0
    79a0:	80 e0       	ldi	r24, 0x00	; 0
    79a2:	90 e0       	ldi	r25, 0x00	; 0
    79a4:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(3); 		// record type
    79a8:	83 e0       	ldi	r24, 0x03	; 3
    79aa:	90 e0       	ldi	r25, 0x00	; 0
    79ac:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    79b0:	11 30       	cpi	r17, 0x01	; 1
    79b2:	49 f4       	brne	.+18     	; 0x79c6 <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    79b4:	60 91 e0 30 	lds	r22, 0x30E0
    79b8:	70 91 e1 30 	lds	r23, 0x30E1
    79bc:	80 91 e2 30 	lds	r24, 0x30E2
    79c0:	90 91 e3 30 	lds	r25, 0x30E3
    79c4:	08 c0       	rjmp	.+16     	; 0x79d6 <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    79c6:	60 91 e4 30 	lds	r22, 0x30E4
    79ca:	70 91 e5 30 	lds	r23, 0x30E5
    79ce:	80 91 e6 30 	lds	r24, 0x30E6
    79d2:	90 91 e7 30 	lds	r25, 0x30E7
    79d6:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    79da:	60 e0       	ldi	r22, 0x00	; 0
    79dc:	70 e2       	ldi	r23, 0x20	; 32
    79de:	8c e1       	ldi	r24, 0x1C	; 28
    79e0:	90 e0       	ldi	r25, 0x00	; 0
    79e2:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(10);												// number of samples
    79e6:	6a e0       	ldi	r22, 0x0A	; 10
    79e8:	70 e0       	ldi	r23, 0x00	; 0
    79ea:	80 e0       	ldi	r24, 0x00	; 0
    79ec:	90 e0       	ldi	r25, 0x00	; 0
    79ee:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_WriteString("Pressure");
    79f2:	84 e8       	ldi	r24, 0x84	; 132
    79f4:	90 e2       	ldi	r25, 0x20	; 32
    79f6:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    79fa:	89 e0       	ldi	r24, 0x09	; 9
    79fc:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("8");
    7a00:	82 e8       	ldi	r24, 0x82	; 130
    7a02:	90 e2       	ldi	r25, 0x20	; 32
    7a04:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7a08:	8a e0       	ldi	r24, 0x0A	; 10
    7a0a:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_Write8(0x00);
    7a0e:	80 e0       	ldi	r24, 0x00	; 0
    7a10:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	if(bufferNumber == 1){
    7a14:	11 30       	cpi	r17, 0x01	; 1
    7a16:	51 f4       	brne	.+20     	; 0x7a2c <SD_WritePressureBuffer+0xbc>
    7a18:	cd ef       	ldi	r28, 0xFD	; 253
    7a1a:	d9 e3       	ldi	r29, 0x39	; 57
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    7a1c:	89 91       	ld	r24, Y+
    7a1e:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7a22:	8a e3       	ldi	r24, 0x3A	; 58
    7a24:	c7 30       	cpi	r28, 0x07	; 7
    7a26:	d8 07       	cpc	r29, r24
    7a28:	c9 f7       	brne	.-14     	; 0x7a1c <SD_WritePressureBuffer+0xac>
    7a2a:	09 c0       	rjmp	.+18     	; 0x7a3e <SD_WritePressureBuffer+0xce>
    7a2c:	c8 e5       	ldi	r28, 0x58	; 88
    7a2e:	d8 e4       	ldi	r29, 0x48	; 72
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    7a30:	89 91       	ld	r24, Y+
    7a32:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7a36:	88 e4       	ldi	r24, 0x48	; 72
    7a38:	c2 36       	cpi	r28, 0x62	; 98
    7a3a:	d8 07       	cpc	r29, r24
    7a3c:	c9 f7       	brne	.-14     	; 0x7a30 <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7a3e:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>

	f_sync(&Log_File);
    7a42:	8f e9       	ldi	r24, 0x9F	; 159
    7a44:	9c e4       	ldi	r25, 0x4C	; 76
    7a46:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    7a4a:	df 91       	pop	r29
    7a4c:	cf 91       	pop	r28
    7a4e:	1f 91       	pop	r17
    7a50:	08 95       	ret

00007a52 <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    7a52:	1f 93       	push	r17
    7a54:	cf 93       	push	r28
    7a56:	df 93       	push	r29
    7a58:	18 2f       	mov	r17, r24
    7a5a:	8f ef       	ldi	r24, 0xFF	; 255
    7a5c:	9f ef       	ldi	r25, 0xFF	; 255
    7a5e:	af ef       	ldi	r26, 0xFF	; 255
    7a60:	bf ef       	ldi	r27, 0xFF	; 255
    7a62:	80 93 77 54 	sts	0x5477, r24
    7a66:	90 93 78 54 	sts	0x5478, r25
    7a6a:	a0 93 79 54 	sts	0x5479, r26
    7a6e:	b0 93 7a 54 	sts	0x547A, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7a72:	6c e4       	ldi	r22, 0x4C	; 76
    7a74:	74 e7       	ldi	r23, 0x74	; 116
    7a76:	8e ed       	ldi	r24, 0xDE	; 222
    7a78:	90 eb       	ldi	r25, 0xB0	; 176
    7a7a:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(48);				// record size
    7a7e:	60 e3       	ldi	r22, 0x30	; 48
    7a80:	70 e0       	ldi	r23, 0x00	; 0
    7a82:	80 e0       	ldi	r24, 0x00	; 0
    7a84:	90 e0       	ldi	r25, 0x00	; 0
    7a86:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(3); 		// record type
    7a8a:	83 e0       	ldi	r24, 0x03	; 3
    7a8c:	90 e0       	ldi	r25, 0x00	; 0
    7a8e:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7a92:	11 30       	cpi	r17, 0x01	; 1
    7a94:	49 f4       	brne	.+18     	; 0x7aa8 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    7a96:	60 91 d8 30 	lds	r22, 0x30D8
    7a9a:	70 91 d9 30 	lds	r23, 0x30D9
    7a9e:	80 91 da 30 	lds	r24, 0x30DA
    7aa2:	90 91 db 30 	lds	r25, 0x30DB
    7aa6:	08 c0       	rjmp	.+16     	; 0x7ab8 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    7aa8:	60 91 dc 30 	lds	r22, 0x30DC
    7aac:	70 91 dd 30 	lds	r23, 0x30DD
    7ab0:	80 91 de 30 	lds	r24, 0x30DE
    7ab4:	90 91 df 30 	lds	r25, 0x30DF
    7ab8:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7abc:	60 e0       	ldi	r22, 0x00	; 0
    7abe:	70 e2       	ldi	r23, 0x20	; 32
    7ac0:	8c e1       	ldi	r24, 0x1C	; 28
    7ac2:	90 e0       	ldi	r25, 0x00	; 0
    7ac4:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(10);												// number of samples
    7ac8:	6a e0       	ldi	r22, 0x0A	; 10
    7aca:	70 e0       	ldi	r23, 0x00	; 0
    7acc:	80 e0       	ldi	r24, 0x00	; 0
    7ace:	90 e0       	ldi	r25, 0x00	; 0
    7ad0:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>

	SD_WriteString("Humidity");
    7ad4:	8d e8       	ldi	r24, 0x8D	; 141
    7ad6:	90 e2       	ldi	r25, 0x20	; 32
    7ad8:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    7adc:	89 e0       	ldi	r24, 0x09	; 9
    7ade:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("8");
    7ae2:	82 e8       	ldi	r24, 0x82	; 130
    7ae4:	90 e2       	ldi	r25, 0x20	; 32
    7ae6:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7aea:	8a e0       	ldi	r24, 0x0A	; 10
    7aec:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_Write8(0x00);
    7af0:	80 e0       	ldi	r24, 0x00	; 0
    7af2:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	if(bufferNumber == 1){
    7af6:	11 30       	cpi	r17, 0x01	; 1
    7af8:	51 f4       	brne	.+20     	; 0x7b0e <SD_WriteHumidityBuffer+0xbc>
    7afa:	c0 e8       	ldi	r28, 0x80	; 128
    7afc:	d8 e4       	ldi	r29, 0x48	; 72
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    7afe:	89 91       	ld	r24, Y+
    7b00:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7b04:	88 e4       	ldi	r24, 0x48	; 72
    7b06:	ca 38       	cpi	r28, 0x8A	; 138
    7b08:	d8 07       	cpc	r29, r24
    7b0a:	c9 f7       	brne	.-14     	; 0x7afe <SD_WriteHumidityBuffer+0xac>
    7b0c:	09 c0       	rjmp	.+18     	; 0x7b20 <SD_WriteHumidityBuffer+0xce>
    7b0e:	c9 e1       	ldi	r28, 0x19	; 25
    7b10:	d1 e5       	ldi	r29, 0x51	; 81
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    7b12:	89 91       	ld	r24, Y+
    7b14:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7b18:	81 e5       	ldi	r24, 0x51	; 81
    7b1a:	c3 32       	cpi	r28, 0x23	; 35
    7b1c:	d8 07       	cpc	r29, r24
    7b1e:	c9 f7       	brne	.-14     	; 0x7b12 <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7b20:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>

	f_sync(&Log_File);
    7b24:	8f e9       	ldi	r24, 0x9F	; 159
    7b26:	9c e4       	ldi	r25, 0x4C	; 76
    7b28:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    7b2c:	df 91       	pop	r29
    7b2e:	cf 91       	pop	r28
    7b30:	1f 91       	pop	r17
    7b32:	08 95       	ret

00007b34 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    7b34:	1f 93       	push	r17
    7b36:	cf 93       	push	r28
    7b38:	df 93       	push	r29
    7b3a:	18 2f       	mov	r17, r24
    7b3c:	8f ef       	ldi	r24, 0xFF	; 255
    7b3e:	9f ef       	ldi	r25, 0xFF	; 255
    7b40:	af ef       	ldi	r26, 0xFF	; 255
    7b42:	bf ef       	ldi	r27, 0xFF	; 255
    7b44:	80 93 77 54 	sts	0x5477, r24
    7b48:	90 93 78 54 	sts	0x5478, r25
    7b4c:	a0 93 79 54 	sts	0x5479, r26
    7b50:	b0 93 7a 54 	sts	0x547A, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7b54:	6c e4       	ldi	r22, 0x4C	; 76
    7b56:	74 e7       	ldi	r23, 0x74	; 116
    7b58:	8e ed       	ldi	r24, 0xDE	; 222
    7b5a:	90 eb       	ldi	r25, 0xB0	; 176
    7b5c:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(62);				// record size  
    7b60:	6e e3       	ldi	r22, 0x3E	; 62
    7b62:	70 e0       	ldi	r23, 0x00	; 0
    7b64:	80 e0       	ldi	r24, 0x00	; 0
    7b66:	90 e0       	ldi	r25, 0x00	; 0
    7b68:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(3); 		// record type  
    7b6c:	83 e0       	ldi	r24, 0x03	; 3
    7b6e:	90 e0       	ldi	r25, 0x00	; 0
    7b70:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    7b74:	11 30       	cpi	r17, 0x01	; 1
    7b76:	49 f4       	brne	.+18     	; 0x7b8a <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    7b78:	60 91 d0 30 	lds	r22, 0x30D0
    7b7c:	70 91 d1 30 	lds	r23, 0x30D1
    7b80:	80 91 d2 30 	lds	r24, 0x30D2
    7b84:	90 91 d3 30 	lds	r25, 0x30D3
    7b88:	08 c0       	rjmp	.+16     	; 0x7b9a <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    7b8a:	60 91 d4 30 	lds	r22, 0x30D4
    7b8e:	70 91 d5 30 	lds	r23, 0x30D5
    7b92:	80 91 d6 30 	lds	r24, 0x30D6
    7b96:	90 91 d7 30 	lds	r25, 0x30D7
    7b9a:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7b9e:	60 e0       	ldi	r22, 0x00	; 0
    7ba0:	70 e2       	ldi	r23, 0x20	; 32
    7ba2:	8c e1       	ldi	r24, 0x1C	; 28
    7ba4:	90 e0       	ldi	r25, 0x00	; 0
    7ba6:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(10);												// number of samples
    7baa:	6a e0       	ldi	r22, 0x0A	; 10
    7bac:	70 e0       	ldi	r23, 0x00	; 0
    7bae:	80 e0       	ldi	r24, 0x00	; 0
    7bb0:	90 e0       	ldi	r25, 0x00	; 0
    7bb2:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
		
	SD_WriteString("Temperature");
    7bb6:	86 e9       	ldi	r24, 0x96	; 150
    7bb8:	90 e2       	ldi	r25, 0x20	; 32
    7bba:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    7bbe:	89 e0       	ldi	r24, 0x09	; 9
    7bc0:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("16");
    7bc4:	82 ea       	ldi	r24, 0xA2	; 162
    7bc6:	90 e2       	ldi	r25, 0x20	; 32
    7bc8:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    7bcc:	8a e0       	ldi	r24, 0x0A	; 10
    7bce:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_Write8(0x00);
    7bd2:	80 e0       	ldi	r24, 0x00	; 0
    7bd4:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	
	if(bufferNumber == 1){
    7bd8:	11 30       	cpi	r17, 0x01	; 1
    7bda:	59 f4       	brne	.+22     	; 0x7bf2 <SD_WriteTemperatureBuffer+0xbe>
    7bdc:	c3 e8       	ldi	r28, 0x83	; 131
    7bde:	d7 e4       	ldi	r29, 0x47	; 71
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    7be0:	89 91       	ld	r24, Y+
    7be2:	99 91       	ld	r25, Y+
    7be4:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7be8:	87 e4       	ldi	r24, 0x47	; 71
    7bea:	c7 39       	cpi	r28, 0x97	; 151
    7bec:	d8 07       	cpc	r29, r24
    7bee:	c1 f7       	brne	.-16     	; 0x7be0 <SD_WriteTemperatureBuffer+0xac>
    7bf0:	0a c0       	rjmp	.+20     	; 0x7c06 <SD_WriteTemperatureBuffer+0xd2>
    7bf2:	ca e1       	ldi	r28, 0x1A	; 26
    7bf4:	d8 e4       	ldi	r29, 0x48	; 72
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    7bf6:	89 91       	ld	r24, Y+
    7bf8:	99 91       	ld	r25, Y+
    7bfa:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7bfe:	88 e4       	ldi	r24, 0x48	; 72
    7c00:	ce 32       	cpi	r28, 0x2E	; 46
    7c02:	d8 07       	cpc	r29, r24
    7c04:	c1 f7       	brne	.-16     	; 0x7bf6 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    7c06:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>
		
	f_sync(&Log_File);
    7c0a:	8f e9       	ldi	r24, 0x9F	; 159
    7c0c:	9c e4       	ldi	r25, 0x4C	; 76
    7c0e:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

}
    7c12:	df 91       	pop	r29
    7c14:	cf 91       	pop	r28
    7c16:	1f 91       	pop	r17
    7c18:	08 95       	ret

00007c1a <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    7c1a:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7c1c:	dc 01       	movw	r26, r24
    7c1e:	0d 90       	ld	r0, X+
    7c20:	00 20       	and	r0, r0
    7c22:	e9 f7       	brne	.-6      	; 0x7c1e <Rs232_SendString+0x4>
    7c24:	11 97       	sbiw	r26, 0x01	; 1
    7c26:	a8 1b       	sub	r26, r24
    7c28:	b9 0b       	sbc	r27, r25
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	0a c0       	rjmp	.+20     	; 0x7c42 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    7c2e:	e2 0f       	add	r30, r18
    7c30:	f3 1f       	adc	r31, r19
    7c32:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7c34:	80 91 a1 09 	lds	r24, 0x09A1
    7c38:	85 ff       	sbrs	r24, 5
    7c3a:	fc cf       	rjmp	.-8      	; 0x7c34 <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    7c3c:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7c40:	9f 5f       	subi	r25, 0xFF	; 255
    7c42:	e9 2f       	mov	r30, r25
    7c44:	f0 e0       	ldi	r31, 0x00	; 0
    7c46:	ea 17       	cp	r30, r26
    7c48:	fb 07       	cpc	r31, r27
    7c4a:	88 f3       	brcs	.-30     	; 0x7c2e <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    7c4c:	66 23       	and	r22, r22
    7c4e:	71 f0       	breq	.+28     	; 0x7c6c <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7c50:	80 91 a1 09 	lds	r24, 0x09A1
    7c54:	85 ff       	sbrs	r24, 5
    7c56:	fc cf       	rjmp	.-8      	; 0x7c50 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    7c58:	8d e0       	ldi	r24, 0x0D	; 13
    7c5a:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7c5e:	80 91 a1 09 	lds	r24, 0x09A1
    7c62:	85 ff       	sbrs	r24, 5
    7c64:	fc cf       	rjmp	.-8      	; 0x7c5e <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    7c66:	8a e0       	ldi	r24, 0x0A	; 10
    7c68:	80 93 a0 09 	sts	0x09A0, r24
    7c6c:	08 95       	ret

00007c6e <Wifi_SendString>:

	Wifi_Usart.DATA = data;

}

void Wifi_SendString(char string [],bool CR){
    7c6e:	ef 92       	push	r14
    7c70:	ff 92       	push	r15
    7c72:	0f 93       	push	r16
    7c74:	1f 93       	push	r17
    7c76:	cf 93       	push	r28
    7c78:	df 93       	push	r29
    7c7a:	8c 01       	movw	r16, r24
    7c7c:	e6 2e       	mov	r14, r22
    7c7e:	ff 24       	eor	r15, r15
    7c80:	06 c0       	rjmp	.+12     	; 0x7c8e <Wifi_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Wifi_SendByte(string[i]);
    7c82:	c0 0f       	add	r28, r16
    7c84:	d1 1f       	adc	r29, r17
    7c86:	88 81       	ld	r24, Y
    7c88:	0e 94 28 03 	call	0x650	; 0x650 <Wifi_SendByte>
	Wifi_Usart.DATA = data;

}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7c8c:	f3 94       	inc	r15
    7c8e:	cf 2d       	mov	r28, r15
    7c90:	d0 e0       	ldi	r29, 0x00	; 0
    7c92:	f8 01       	movw	r30, r16
    7c94:	01 90       	ld	r0, Z+
    7c96:	00 20       	and	r0, r0
    7c98:	e9 f7       	brne	.-6      	; 0x7c94 <Wifi_SendString+0x26>
    7c9a:	31 97       	sbiw	r30, 0x01	; 1
    7c9c:	e0 1b       	sub	r30, r16
    7c9e:	f1 0b       	sbc	r31, r17
    7ca0:	ce 17       	cp	r28, r30
    7ca2:	df 07       	cpc	r29, r31
    7ca4:	70 f3       	brcs	.-36     	; 0x7c82 <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

    if(CR){
    7ca6:	ee 20       	and	r14, r14
    7ca8:	31 f0       	breq	.+12     	; 0x7cb6 <Wifi_SendString+0x48>
		Wifi_SendByte(13);
    7caa:	8d e0       	ldi	r24, 0x0D	; 13
    7cac:	0e 94 28 03 	call	0x650	; 0x650 <Wifi_SendByte>
		Wifi_SendByte(10);
    7cb0:	8a e0       	ldi	r24, 0x0A	; 10
    7cb2:	0e 94 28 03 	call	0x650	; 0x650 <Wifi_SendByte>
	}
}
    7cb6:	df 91       	pop	r29
    7cb8:	cf 91       	pop	r28
    7cba:	1f 91       	pop	r17
    7cbc:	0f 91       	pop	r16
    7cbe:	ff 90       	pop	r15
    7cc0:	ef 90       	pop	r14
    7cc2:	08 95       	ret

00007cc4 <Wifi_EnterCMDMode>:

bool Wifi_EnterCMDMode(uint16_t timeOut){
    7cc4:	8f 92       	push	r8
    7cc6:	9f 92       	push	r9
    7cc8:	af 92       	push	r10
    7cca:	bf 92       	push	r11
    7ccc:	cf 92       	push	r12
    7cce:	df 92       	push	r13
    7cd0:	ff 92       	push	r15
    7cd2:	0f 93       	push	r16
    7cd4:	1f 93       	push	r17
    7cd6:	df 93       	push	r29
    7cd8:	cf 93       	push	r28
    7cda:	00 d0       	rcall	.+0      	; 0x7cdc <Wifi_EnterCMDMode+0x18>
    7cdc:	00 d0       	rcall	.+0      	; 0x7cde <Wifi_EnterCMDMode+0x1a>
    7cde:	cd b7       	in	r28, 0x3d	; 61
    7ce0:	de b7       	in	r29, 0x3e	; 62
    7ce2:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    7ce4:	de 01       	movw	r26, r28
    7ce6:	14 96       	adiw	r26, 0x04	; 4
    7ce8:	e9 ea       	ldi	r30, 0xA9	; 169
    7cea:	f0 e2       	ldi	r31, 0x20	; 32
    7cec:	83 e0       	ldi	r24, 0x03	; 3
    7cee:	01 90       	ld	r0, Z+
    7cf0:	0d 92       	st	X+, r0
    7cf2:	81 50       	subi	r24, 0x01	; 1
    7cf4:	e1 f7       	brne	.-8      	; 0x7cee <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    7cf6:	0e 94 76 02 	call	0x4ec	; 0x4ec <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    7cfa:	85 ea       	ldi	r24, 0xA5	; 165
    7cfc:	90 e2       	ldi	r25, 0x20	; 32
    7cfe:	60 e0       	ldi	r22, 0x00	; 0
    7d00:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <Wifi_SendString>
    7d04:	ff 24       	eor	r15, r15
    7d06:	00 e0       	ldi	r16, 0x00	; 0
    7d08:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    7d0a:	4e 01       	movw	r8, r28
    7d0c:	08 94       	sec
    7d0e:	81 1c       	adc	r8, r1
    7d10:	91 1c       	adc	r9, r1
    7d12:	a6 e6       	ldi	r26, 0x66	; 102
    7d14:	aa 2e       	mov	r10, r26
    7d16:	ae e0       	ldi	r26, 0x0E	; 14
    7d18:	ba 2e       	mov	r11, r26
    7d1a:	23 c0       	rjmp	.+70     	; 0x7d62 <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    7d1c:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
    7d20:	88 23       	and	r24, r24
    7d22:	d1 f0       	breq	.+52     	; 0x7d58 <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    7d24:	80 e0       	ldi	r24, 0x00	; 0
    7d26:	0e 94 05 03 	call	0x60a	; 0x60a <Wifi_GetByte>
    7d2a:	f4 01       	movw	r30, r8
    7d2c:	ef 0d       	add	r30, r15
    7d2e:	f1 1d       	adc	r31, r1
    7d30:	80 83       	st	Z, r24
			j++;
    7d32:	f3 94       	inc	r15
			if(j > 2){
    7d34:	82 e0       	ldi	r24, 0x02	; 2
    7d36:	8f 15       	cp	r24, r15
    7d38:	78 f4       	brcc	.+30     	; 0x7d58 <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    7d3a:	99 81       	ldd	r25, Y+1	; 0x01
    7d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    7d3e:	98 17       	cp	r25, r24
    7d40:	99 f4       	brne	.+38     	; 0x7d68 <Wifi_EnterCMDMode+0xa4>
    7d42:	9a 81       	ldd	r25, Y+2	; 0x02
    7d44:	8d 81       	ldd	r24, Y+5	; 0x05
    7d46:	98 17       	cp	r25, r24
    7d48:	79 f4       	brne	.+30     	; 0x7d68 <Wifi_EnterCMDMode+0xa4>
    7d4a:	20 e0       	ldi	r18, 0x00	; 0
    7d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    7d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    7d50:	98 17       	cp	r25, r24
    7d52:	59 f4       	brne	.+22     	; 0x7d6a <Wifi_EnterCMDMode+0xa6>
    7d54:	21 e0       	ldi	r18, 0x01	; 1
    7d56:	09 c0       	rjmp	.+18     	; 0x7d6a <Wifi_EnterCMDMode+0xa6>
    7d58:	c5 01       	movw	r24, r10
    7d5a:	01 97       	sbiw	r24, 0x01	; 1
    7d5c:	f1 f7       	brne	.-4      	; 0x7d5a <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    7d5e:	0f 5f       	subi	r16, 0xFF	; 255
    7d60:	1f 4f       	sbci	r17, 0xFF	; 255
    7d62:	0c 15       	cp	r16, r12
    7d64:	1d 05       	cpc	r17, r13
    7d66:	d0 f2       	brcs	.-76     	; 0x7d1c <Wifi_EnterCMDMode+0x58>
    7d68:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7d6a:	82 2f       	mov	r24, r18
    7d6c:	26 96       	adiw	r28, 0x06	; 6
    7d6e:	cd bf       	out	0x3d, r28	; 61
    7d70:	de bf       	out	0x3e, r29	; 62
    7d72:	cf 91       	pop	r28
    7d74:	df 91       	pop	r29
    7d76:	1f 91       	pop	r17
    7d78:	0f 91       	pop	r16
    7d7a:	ff 90       	pop	r15
    7d7c:	df 90       	pop	r13
    7d7e:	cf 90       	pop	r12
    7d80:	bf 90       	pop	r11
    7d82:	af 90       	pop	r10
    7d84:	9f 90       	pop	r9
    7d86:	8f 90       	pop	r8
    7d88:	08 95       	ret

00007d8a <Debug_SendString>:
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0);                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
}

void Debug_SendString(char string [],bool CR){
    7d8a:	ef 92       	push	r14
    7d8c:	ff 92       	push	r15
    7d8e:	0f 93       	push	r16
    7d90:	1f 93       	push	r17
    7d92:	cf 93       	push	r28
    7d94:	df 93       	push	r29
    7d96:	8c 01       	movw	r16, r24
    7d98:	e6 2e       	mov	r14, r22
    7d9a:	ff 24       	eor	r15, r15
    7d9c:	06 c0       	rjmp	.+12     	; 0x7daa <Debug_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Debug_SendByte(string[i]);
    7d9e:	c0 0f       	add	r28, r16
    7da0:	d1 1f       	adc	r29, r17
    7da2:	88 81       	ld	r24, Y
    7da4:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0);                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7da8:	f3 94       	inc	r15
    7daa:	cf 2d       	mov	r28, r15
    7dac:	d0 e0       	ldi	r29, 0x00	; 0
    7dae:	f8 01       	movw	r30, r16
    7db0:	01 90       	ld	r0, Z+
    7db2:	00 20       	and	r0, r0
    7db4:	e9 f7       	brne	.-6      	; 0x7db0 <Debug_SendString+0x26>
    7db6:	31 97       	sbiw	r30, 0x01	; 1
    7db8:	e0 1b       	sub	r30, r16
    7dba:	f1 0b       	sbc	r31, r17
    7dbc:	ce 17       	cp	r28, r30
    7dbe:	df 07       	cpc	r29, r31
    7dc0:	70 f3       	brcs	.-36     	; 0x7d9e <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    7dc2:	ee 20       	and	r14, r14
    7dc4:	31 f0       	breq	.+12     	; 0x7dd2 <Debug_SendString+0x48>
		Debug_SendByte(13);
    7dc6:	8d e0       	ldi	r24, 0x0D	; 13
    7dc8:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
		Debug_SendByte(10);
    7dcc:	8a e0       	ldi	r24, 0x0A	; 10
    7dce:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
	}
}
    7dd2:	df 91       	pop	r29
    7dd4:	cf 91       	pop	r28
    7dd6:	1f 91       	pop	r17
    7dd8:	0f 91       	pop	r16
    7dda:	ff 90       	pop	r15
    7ddc:	ef 90       	pop	r14
    7dde:	08 95       	ret

00007de0 <Debug_To_Wifi>:
	}
}


void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
    7de0:	8d ea       	ldi	r24, 0xAD	; 173
    7de2:	90 e2       	ldi	r25, 0x20	; 32
    7de4:	61 e0       	ldi	r22, 0x01	; 1
    7de6:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    7dea:	20 91 02 31 	lds	r18, 0x3102
    7dee:	30 91 03 31 	lds	r19, 0x3103
    7df2:	80 91 00 31 	lds	r24, 0x3100
    7df6:	90 91 01 31 	lds	r25, 0x3101
    7dfa:	28 17       	cp	r18, r24
    7dfc:	39 07       	cpc	r19, r25
    7dfe:	51 f4       	brne	.+20     	; 0x7e14 <Debug_To_Wifi+0x34>
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
		}
		if(Wifi_CharReadyToRead()){
    7e00:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
    7e04:	88 23       	and	r24, r24
    7e06:	89 f3       	breq	.-30     	; 0x7dea <Debug_To_Wifi+0xa>
			Debug_SendByte(Wifi_GetByte(true));
    7e08:	81 e0       	ldi	r24, 0x01	; 1
    7e0a:	0e 94 05 03 	call	0x60a	; 0x60a <Wifi_GetByte>
    7e0e:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
    7e12:	eb cf       	rjmp	.-42     	; 0x7dea <Debug_To_Wifi+0xa>

void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
    7e14:	81 e0       	ldi	r24, 0x01	; 1
    7e16:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    7e1a:	0e 94 28 03 	call	0x650	; 0x650 <Wifi_SendByte>
    7e1e:	f0 cf       	rjmp	.-32     	; 0x7e00 <Debug_To_Wifi+0x20>

00007e20 <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    7e20:	6f 92       	push	r6
    7e22:	7f 92       	push	r7
    7e24:	8f 92       	push	r8
    7e26:	9f 92       	push	r9
    7e28:	af 92       	push	r10
    7e2a:	bf 92       	push	r11
    7e2c:	cf 92       	push	r12
    7e2e:	df 92       	push	r13
    7e30:	ef 92       	push	r14
    7e32:	ff 92       	push	r15
    7e34:	0f 93       	push	r16
    7e36:	1f 93       	push	r17
    7e38:	cf 93       	push	r28
    7e3a:	df 93       	push	r29
    7e3c:	7c 01       	movw	r14, r24
    7e3e:	6b 01       	movw	r12, r22
    7e40:	5a 01       	movw	r10, r20
    7e42:	39 01       	movw	r6, r18
	respLen = 0;
    7e44:	10 92 08 31 	sts	0x3108, r1
	toSendLen = strlen(toSend);
    7e48:	fc 01       	movw	r30, r24
    7e4a:	01 90       	ld	r0, Z+
    7e4c:	00 20       	and	r0, r0
    7e4e:	e9 f7       	brne	.-6      	; 0x7e4a <Wifi_SendCommand+0x2a>
    7e50:	31 97       	sbiw	r30, 0x01	; 1
    7e52:	e8 1b       	sub	r30, r24
    7e54:	f9 0b       	sbc	r31, r25
    7e56:	e0 93 09 31 	sts	0x3109, r30
	if(strlen(ok) > strlen(ok2)){
    7e5a:	eb 01       	movw	r28, r22
    7e5c:	09 90       	ld	r0, Y+
    7e5e:	00 20       	and	r0, r0
    7e60:	e9 f7       	brne	.-6      	; 0x7e5c <Wifi_SendCommand+0x3c>
    7e62:	21 97       	sbiw	r28, 0x01	; 1
    7e64:	c6 1b       	sub	r28, r22
    7e66:	d7 0b       	sbc	r29, r23
    7e68:	da 01       	movw	r26, r20
    7e6a:	0d 90       	ld	r0, X+
    7e6c:	00 20       	and	r0, r0
    7e6e:	e9 f7       	brne	.-6      	; 0x7e6a <Wifi_SendCommand+0x4a>
    7e70:	11 97       	sbiw	r26, 0x01	; 1
    7e72:	a4 1b       	sub	r26, r20
    7e74:	b5 0b       	sbc	r27, r21
    7e76:	ac 17       	cp	r26, r28
    7e78:	bd 07       	cpc	r27, r29
    7e7a:	18 f4       	brcc	.+6      	; 0x7e82 <Wifi_SendCommand+0x62>
		okLen = strlen(ok2);
    7e7c:	a0 93 0a 31 	sts	0x310A, r26
    7e80:	02 c0       	rjmp	.+4      	; 0x7e86 <Wifi_SendCommand+0x66>
	} else {
		okLen = strlen(ok);
    7e82:	c0 93 0a 31 	sts	0x310A, r28
	}

	Debug_SendString("-----------------",true);
    7e86:	8b eb       	ldi	r24, 0xBB	; 187
    7e88:	90 e2       	ldi	r25, 0x20	; 32
    7e8a:	61 e0       	ldi	r22, 0x01	; 1
    7e8c:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
	Debug_SendString("Command: ",false);
    7e90:	8d ec       	ldi	r24, 0xCD	; 205
    7e92:	90 e2       	ldi	r25, 0x20	; 32
    7e94:	60 e0       	ldi	r22, 0x00	; 0
    7e96:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
	Debug_SendString(toSend,true);
    7e9a:	c7 01       	movw	r24, r14
    7e9c:	61 e0       	ldi	r22, 0x01	; 1
    7e9e:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
	Wifi_ClearBuffer();
    7ea2:	0e 94 76 02 	call	0x4ec	; 0x4ec <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    7ea6:	c7 01       	movw	r24, r14
    7ea8:	61 e0       	ldi	r22, 0x01	; 1
    7eaa:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <Wifi_SendString>
    7eae:	00 e0       	ldi	r16, 0x00	; 0
    7eb0:	10 e0       	ldi	r17, 0x00	; 0
    7eb2:	b6 e6       	ldi	r27, 0x66	; 102
    7eb4:	8b 2e       	mov	r8, r27
    7eb6:	be e0       	ldi	r27, 0x0E	; 14
    7eb8:	9b 2e       	mov	r9, r27
    7eba:	83 c0       	rjmp	.+262    	; 0x7fc2 <Wifi_SendCommand+0x1a2>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    7ebc:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
    7ec0:	88 23       	and	r24, r24
    7ec2:	09 f4       	brne	.+2      	; 0x7ec6 <Wifi_SendCommand+0xa6>
    7ec4:	79 c0       	rjmp	.+242    	; 0x7fb8 <Wifi_SendCommand+0x198>
			resp[respLen] = Wifi_GetByte(false);
    7ec6:	80 91 08 31 	lds	r24, 0x3108
    7eca:	c8 2f       	mov	r28, r24
    7ecc:	d0 e0       	ldi	r29, 0x00	; 0
    7ece:	80 e0       	ldi	r24, 0x00	; 0
    7ed0:	0e 94 05 03 	call	0x60a	; 0x60a <Wifi_GetByte>
    7ed4:	cd 5d       	subi	r28, 0xDD	; 221
    7ed6:	d5 4c       	sbci	r29, 0xC5	; 197
    7ed8:	88 83       	st	Y, r24
			respLen++;
    7eda:	80 91 08 31 	lds	r24, 0x3108
    7ede:	8f 5f       	subi	r24, 0xFF	; 255
    7ee0:	80 93 08 31 	sts	0x3108, r24
			if(respLen == okLen + toSendLen + 3){		
    7ee4:	20 91 08 31 	lds	r18, 0x3108
    7ee8:	40 91 0a 31 	lds	r20, 0x310A
    7eec:	80 91 09 31 	lds	r24, 0x3109
    7ef0:	30 e0       	ldi	r19, 0x00	; 0
    7ef2:	90 e0       	ldi	r25, 0x00	; 0
    7ef4:	84 0f       	add	r24, r20
    7ef6:	91 1d       	adc	r25, r1
    7ef8:	03 96       	adiw	r24, 0x03	; 3
    7efa:	28 17       	cp	r18, r24
    7efc:	39 07       	cpc	r19, r25
    7efe:	09 f0       	breq	.+2      	; 0x7f02 <Wifi_SendCommand+0xe2>
    7f00:	5b c0       	rjmp	.+182    	; 0x7fb8 <Wifi_SendCommand+0x198>
				
				Debug_SendString("Response: ",false);
    7f02:	87 ed       	ldi	r24, 0xD7	; 215
    7f04:	90 e2       	ldi	r25, 0x20	; 32
    7f06:	60 e0       	ldi	r22, 0x00	; 0
    7f08:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
    7f0c:	10 e0       	ldi	r17, 0x00	; 0
    7f0e:	08 c0       	rjmp	.+16     	; 0x7f20 <Wifi_SendCommand+0x100>
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(resp[j]);
    7f10:	e1 2f       	mov	r30, r17
    7f12:	f0 e0       	ldi	r31, 0x00	; 0
    7f14:	ed 5d       	subi	r30, 0xDD	; 221
    7f16:	f5 4c       	sbci	r31, 0xC5	; 197
    7f18:	80 81       	ld	r24, Z
    7f1a:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
			resp[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Response: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    7f1e:	1f 5f       	subi	r17, 0xFF	; 255
    7f20:	80 91 08 31 	lds	r24, 0x3108
    7f24:	18 17       	cp	r17, r24
    7f26:	a0 f3       	brcs	.-24     	; 0x7f10 <Wifi_SendCommand+0xf0>
					Debug_SendByte(resp[j]);
				}
				Debug_SendString(",want: ",false);
    7f28:	82 ee       	ldi	r24, 0xE2	; 226
    7f2a:	90 e2       	ldi	r25, 0x20	; 32
    7f2c:	60 e0       	ldi	r22, 0x00	; 0
    7f2e:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
				Debug_SendString(ok,true);
    7f32:	c6 01       	movw	r24, r12
    7f34:	61 e0       	ldi	r22, 0x01	; 1
    7f36:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
    7f3a:	20 e0       	ldi	r18, 0x00	; 0
    7f3c:	0c c0       	rjmp	.+24     	; 0x7f56 <Wifi_SendCommand+0x136>
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
    7f3e:	e2 2f       	mov	r30, r18
    7f40:	f0 e0       	ldi	r31, 0x00	; 0
    7f42:	df 01       	movw	r26, r30
    7f44:	ad 5d       	subi	r26, 0xDD	; 221
    7f46:	b5 4c       	sbci	r27, 0xC5	; 197
    7f48:	9c 91       	ld	r25, X
    7f4a:	ee 0d       	add	r30, r14
    7f4c:	ff 1d       	adc	r31, r15
    7f4e:	80 81       	ld	r24, Z
    7f50:	98 17       	cp	r25, r24
    7f52:	d9 f5       	brne	.+118    	; 0x7fca <Wifi_SendCommand+0x1aa>
				}
				Debug_SendString(",want: ",false);
				Debug_SendString(ok,true);
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
    7f54:	2f 5f       	subi	r18, 0xFF	; 255
    7f56:	80 91 09 31 	lds	r24, 0x3109
    7f5a:	28 17       	cp	r18, r24
    7f5c:	80 f3       	brcs	.-32     	; 0x7f3e <Wifi_SendCommand+0x11e>
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7f5e:	20 91 09 31 	lds	r18, 0x3109
    7f62:	2d 5f       	subi	r18, 0xFD	; 253
    7f64:	1b c0       	rjmp	.+54     	; 0x7f9c <Wifi_SendCommand+0x17c>
					if(resp[l] != ok[l-toSendLen-3]){
    7f66:	ed 01       	movw	r28, r26
    7f68:	cd 5d       	subi	r28, 0xDD	; 221
    7f6a:	d5 4c       	sbci	r29, 0xC5	; 197
    7f6c:	98 81       	ld	r25, Y
    7f6e:	80 91 09 31 	lds	r24, 0x3109
    7f72:	fd 01       	movw	r30, r26
    7f74:	e8 1b       	sub	r30, r24
    7f76:	f1 09       	sbc	r31, r1
    7f78:	ec 0d       	add	r30, r12
    7f7a:	fd 1d       	adc	r31, r13
    7f7c:	33 97       	sbiw	r30, 0x03	; 3
    7f7e:	80 81       	ld	r24, Z
    7f80:	98 17       	cp	r25, r24
    7f82:	59 f0       	breq	.+22     	; 0x7f9a <Wifi_SendCommand+0x17a>
						if(resp[l] != ok2[l-toSendLen-3]){
    7f84:	88 81       	ld	r24, Y
    7f86:	90 91 09 31 	lds	r25, 0x3109
    7f8a:	a9 1b       	sub	r26, r25
    7f8c:	b1 09       	sbc	r27, r1
    7f8e:	aa 0d       	add	r26, r10
    7f90:	bb 1d       	adc	r27, r11
    7f92:	13 97       	sbiw	r26, 0x03	; 3
    7f94:	9c 91       	ld	r25, X
    7f96:	89 17       	cp	r24, r25
    7f98:	c1 f4       	brne	.+48     	; 0x7fca <Wifi_SendCommand+0x1aa>
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7f9a:	2f 5f       	subi	r18, 0xFF	; 255
    7f9c:	a2 2f       	mov	r26, r18
    7f9e:	b0 e0       	ldi	r27, 0x00	; 0
    7fa0:	80 91 08 31 	lds	r24, 0x3108
    7fa4:	90 e0       	ldi	r25, 0x00	; 0
    7fa6:	03 97       	sbiw	r24, 0x03	; 3
    7fa8:	a8 17       	cp	r26, r24
    7faa:	b9 07       	cpc	r27, r25
    7fac:	e4 f2       	brlt	.-72     	; 0x7f66 <Wifi_SendCommand+0x146>
						if(resp[l] != ok2[l-toSendLen-3]){
							return false;
						}
					}
				}
				Debug_SendByte(13);
    7fae:	8d e0       	ldi	r24, 0x0D	; 13
    7fb0:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
    7fb4:	81 e0       	ldi	r24, 0x01	; 1
    7fb6:	0a c0       	rjmp	.+20     	; 0x7fcc <Wifi_SendCommand+0x1ac>
    7fb8:	c4 01       	movw	r24, r8
    7fba:	01 97       	sbiw	r24, 0x01	; 1
    7fbc:	f1 f7       	brne	.-4      	; 0x7fba <Wifi_SendCommand+0x19a>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    7fbe:	0f 5f       	subi	r16, 0xFF	; 255
    7fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    7fc2:	06 15       	cp	r16, r6
    7fc4:	17 05       	cpc	r17, r7
    7fc6:	08 f4       	brcc	.+2      	; 0x7fca <Wifi_SendCommand+0x1aa>
    7fc8:	79 cf       	rjmp	.-270    	; 0x7ebc <Wifi_SendCommand+0x9c>
    7fca:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7fcc:	df 91       	pop	r29
    7fce:	cf 91       	pop	r28
    7fd0:	1f 91       	pop	r17
    7fd2:	0f 91       	pop	r16
    7fd4:	ff 90       	pop	r15
    7fd6:	ef 90       	pop	r14
    7fd8:	df 90       	pop	r13
    7fda:	cf 90       	pop	r12
    7fdc:	bf 90       	pop	r11
    7fde:	af 90       	pop	r10
    7fe0:	9f 90       	pop	r9
    7fe2:	8f 90       	pop	r8
    7fe4:	7f 90       	pop	r7
    7fe6:	6f 90       	pop	r6
    7fe8:	08 95       	ret

00007fea <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
    7fea:	cf 92       	push	r12
    7fec:	df 92       	push	r13
    7fee:	ef 92       	push	r14
    7ff0:	ff 92       	push	r15
    7ff2:	1f 93       	push	r17
    7ff4:	cf 93       	push	r28
    7ff6:	df 93       	push	r29
    7ff8:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    7ffa:	0e 94 76 02 	call	0x4ec	; 0x4ec <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    7ffe:	8a ee       	ldi	r24, 0xEA	; 234
    8000:	90 e2       	ldi	r25, 0x20	; 32
    8002:	62 ef       	ldi	r22, 0xF2	; 242
    8004:	70 e2       	ldi	r23, 0x20	; 32
    8006:	ab 01       	movw	r20, r22
    8008:	97 01       	movw	r18, r14
    800a:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    800e:	10 e0       	ldi	r17, 0x00	; 0
    8010:	c0 e0       	ldi	r28, 0x00	; 0
    8012:	d0 e0       	ldi	r29, 0x00	; 0
    8014:	86 e6       	ldi	r24, 0x66	; 102
    8016:	c8 2e       	mov	r12, r24
    8018:	8e e0       	ldi	r24, 0x0E	; 14
    801a:	d8 2e       	mov	r13, r24
    801c:	1f c0       	rjmp	.+62     	; 0x805c <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    801e:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
    8022:	88 23       	and	r24, r24
    8024:	b9 f0       	breq	.+46     	; 0x8054 <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    8026:	80 e0       	ldi	r24, 0x00	; 0
    8028:	0e 94 05 03 	call	0x60a	; 0x60a <Wifi_GetByte>
    802c:	e1 2f       	mov	r30, r17
    802e:	f0 e0       	ldi	r31, 0x00	; 0
    8030:	ef 54       	subi	r30, 0x4F	; 79
    8032:	fd 4b       	sbci	r31, 0xBD	; 189
    8034:	80 83       	st	Z, r24
			tmp++;
    8036:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    8038:	11 31       	cpi	r17, 0x11	; 17
    803a:	61 f4       	brne	.+24     	; 0x8054 <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    803c:	8c ef       	ldi	r24, 0xFC	; 252
    803e:	90 e2       	ldi	r25, 0x20	; 32
    8040:	60 e0       	ldi	r22, 0x00	; 0
    8042:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
				Debug_SendString(macAddr,true);
    8046:	81 eb       	ldi	r24, 0xB1	; 177
    8048:	92 e4       	ldi	r25, 0x42	; 66
    804a:	61 e0       	ldi	r22, 0x01	; 1
    804c:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
    8050:	81 e0       	ldi	r24, 0x01	; 1
    8052:	08 c0       	rjmp	.+16     	; 0x8064 <Wifi_GetMac+0x7a>
    8054:	c6 01       	movw	r24, r12
    8056:	01 97       	sbiw	r24, 0x01	; 1
    8058:	f1 f7       	brne	.-4      	; 0x8056 <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    805a:	21 96       	adiw	r28, 0x01	; 1
    805c:	ce 15       	cp	r28, r14
    805e:	df 05       	cpc	r29, r15
    8060:	f0 f2       	brcs	.-68     	; 0x801e <Wifi_GetMac+0x34>
    8062:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8064:	df 91       	pop	r29
    8066:	cf 91       	pop	r28
    8068:	1f 91       	pop	r17
    806a:	ff 90       	pop	r15
    806c:	ef 90       	pop	r14
    806e:	df 90       	pop	r13
    8070:	cf 90       	pop	r12
    8072:	08 95       	ret

00008074 <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    8074:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    8076:	4a e0       	ldi	r20, 0x0A	; 10
    8078:	51 e2       	ldi	r21, 0x21	; 33
    807a:	85 e0       	ldi	r24, 0x05	; 5
    807c:	91 e2       	ldi	r25, 0x21	; 33
    807e:	ba 01       	movw	r22, r20
    8080:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    8084:	08 95       	ret

00008086 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    8086:	0f 93       	push	r16
    8088:	1f 93       	push	r17
	fileName[0] = '/';
    808a:	0d e9       	ldi	r16, 0x9D	; 157
    808c:	12 e4       	ldi	r17, 0x42	; 66
    808e:	2f e2       	ldi	r18, 0x2F	; 47
    8090:	20 93 9d 42 	sts	0x429D, r18
	ltoa(var, fileName+1, 16);
    8094:	a8 01       	movw	r20, r16
    8096:	4f 5f       	subi	r20, 0xFF	; 255
    8098:	5f 4f       	sbci	r21, 0xFF	; 255
    809a:	20 e1       	ldi	r18, 0x10	; 16
    809c:	30 e0       	ldi	r19, 0x00	; 0
    809e:	0e 94 45 59 	call	0xb28a	; 0xb28a <ltoa>
	strcat(fileName, ".bt");
    80a2:	c8 01       	movw	r24, r16
    80a4:	6f e0       	ldi	r22, 0x0F	; 15
    80a6:	71 e2       	ldi	r23, 0x21	; 33
    80a8:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
}
    80ac:	1f 91       	pop	r17
    80ae:	0f 91       	pop	r16
    80b0:	08 95       	ret

000080b2 <__vector_77>:

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(TCD0_OVF_vect){
    80b2:	1f 92       	push	r1
    80b4:	0f 92       	push	r0
    80b6:	0f b6       	in	r0, 0x3f	; 63
    80b8:	0f 92       	push	r0
    80ba:	0b b6       	in	r0, 0x3b	; 59
    80bc:	0f 92       	push	r0
    80be:	11 24       	eor	r1, r1
    80c0:	cf 92       	push	r12
    80c2:	ef 92       	push	r14
    80c4:	ff 92       	push	r15
    80c6:	0f 93       	push	r16
    80c8:	1f 93       	push	r17
    80ca:	2f 93       	push	r18
    80cc:	3f 93       	push	r19
    80ce:	4f 93       	push	r20
    80d0:	5f 93       	push	r21
    80d2:	6f 93       	push	r22
    80d4:	7f 93       	push	r23
    80d6:	8f 93       	push	r24
    80d8:	9f 93       	push	r25
    80da:	af 93       	push	r26
    80dc:	bf 93       	push	r27
    80de:	ef 93       	push	r30
    80e0:	ff 93       	push	r31

if(okToDisplayGUI){
    80e2:	80 91 5e 31 	lds	r24, 0x315E
    80e6:	88 23       	and	r24, r24
    80e8:	09 f4       	brne	.+2      	; 0x80ec <__vector_77+0x3a>
    80ea:	50 c5       	rjmp	.+2720   	; 0x8b8c <__vector_77+0xada>

    ssRefreshCounter++;
    80ec:	80 91 55 31 	lds	r24, 0x3155
    80f0:	90 91 56 31 	lds	r25, 0x3156
    80f4:	01 96       	adiw	r24, 0x01	; 1
    80f6:	80 93 55 31 	sts	0x3155, r24
    80fa:	90 93 56 31 	sts	0x3156, r25

    if(recording){
    80fe:	80 91 30 31 	lds	r24, 0x3130
    8102:	88 23       	and	r24, r24
    8104:	51 f1       	breq	.+84     	; 0x815a <__vector_77+0xa8>
	    if(recordFileRestartCounter > 9000){    // 15 mins  = 9000
    8106:	80 91 7f 31 	lds	r24, 0x317F
    810a:	90 91 80 31 	lds	r25, 0x3180
    810e:	89 52       	subi	r24, 0x29	; 41
    8110:	93 42       	sbci	r25, 0x23	; 35
    8112:	d0 f0       	brcs	.+52     	; 0x8148 <__vector_77+0x96>
	        restartingFile = true;
    8114:	81 e0       	ldi	r24, 0x01	; 1
    8116:	80 93 6b 31 	sts	0x316B, r24
	         recordFileRestartCounter = 0;
    811a:	10 92 7f 31 	sts	0x317F, r1
    811e:	10 92 80 31 	sts	0x3180, r1
		    rs232Recording = false;
    8122:	10 92 25 31 	sts	0x3125, r1
            recording = false;
    8126:	10 92 30 31 	sts	0x3130, r1
	        okToCloseLogFile = true;
    812a:	80 93 5d 31 	sts	0x315D, r24
	        while(okToCloseLogFile);
    812e:	80 91 5d 31 	lds	r24, 0x315D
    8132:	88 23       	and	r24, r24
    8134:	e1 f7       	brne	.-8      	; 0x812e <__vector_77+0x7c>
	        okToOpenLogFile = true;
    8136:	81 e0       	ldi	r24, 0x01	; 1
    8138:	80 93 5b 31 	sts	0x315B, r24
	        while(!recording);
    813c:	80 91 30 31 	lds	r24, 0x3130
    8140:	88 23       	and	r24, r24
    8142:	e1 f3       	breq	.-8      	; 0x813c <__vector_77+0x8a>
	        restartingFile = false;
    8144:	10 92 6b 31 	sts	0x316B, r1
	    }
	    recordFileRestartCounter++;
    8148:	80 91 7f 31 	lds	r24, 0x317F
    814c:	90 91 80 31 	lds	r25, 0x3180
    8150:	01 96       	adiw	r24, 0x01	; 1
    8152:	80 93 7f 31 	sts	0x317F, r24
    8156:	90 93 80 31 	sts	0x3180, r25


	// controls


    if(currentMode == recordMode && Dpad_CheckButton(Down)){											// go to sensorMode
    815a:	80 91 54 31 	lds	r24, 0x3154
    815e:	88 23       	and	r24, r24
    8160:	29 f4       	brne	.+10     	; 0x816c <__vector_77+0xba>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8162:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8166:	8c 77       	andi	r24, 0x7C	; 124
    8168:	83 ff       	sbrs	r24, 3
    816a:	c5 c4       	rjmp	.+2442   	; 0x8af6 <__vector_77+0xa44>

		currentMode = sensorMode;
		display_clearBuffer();
		display_writeBufferToScreen();
	} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){											// go to recordMode
    816c:	80 91 54 31 	lds	r24, 0x3154
    8170:	81 30       	cpi	r24, 0x01	; 1
    8172:	69 f4       	brne	.+26     	; 0x818e <__vector_77+0xdc>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8174:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8178:	8c 77       	andi	r24, 0x7C	; 124
    817a:	82 fd       	sbrc	r24, 2
    817c:	08 c0       	rjmp	.+16     	; 0x818e <__vector_77+0xdc>
    817e:	c3 c4       	rjmp	.+2438   	; 0x8b06 <__vector_77+0xa54>
    8180:	ca 01       	movw	r24, r20
    8182:	01 97       	sbiw	r24, 0x01	; 1
    8184:	f1 f7       	brne	.-4      	; 0x8182 <__vector_77+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8186:	21 50       	subi	r18, 0x01	; 1
    8188:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    818a:	d1 f7       	brne	.-12     	; 0x8180 <__vector_77+0xce>
    818c:	09 c1       	rjmp	.+530    	; 0x83a0 <__vector_77+0x2ee>

		currentMode = recordMode;
		display_clearBuffer();
		display_writeBufferToScreen();
		_delay_ms(400);
	} else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up) && !restartingFile){					// waiting to start recording
    818e:	80 91 54 31 	lds	r24, 0x3154
    8192:	88 23       	and	r24, r24
    8194:	a1 f4       	brne	.+40     	; 0x81be <__vector_77+0x10c>
    8196:	80 91 30 31 	lds	r24, 0x3130
    819a:	88 23       	and	r24, r24
    819c:	81 f4       	brne	.+32     	; 0x81be <__vector_77+0x10c>
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    819e:	80 91 a8 06 	lds	r24, 0x06A8
    81a2:	80 fd       	sbrc	r24, 0
    81a4:	0c c0       	rjmp	.+24     	; 0x81be <__vector_77+0x10c>
    81a6:	ba c4       	rjmp	.+2420   	; 0x8b1c <__vector_77+0xa6a>
    81a8:	80 91 6b 31 	lds	r24, 0x316B
    81ac:	88 23       	and	r24, r24
    81ae:	39 f4       	brne	.+14     	; 0x81be <__vector_77+0x10c>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    81b0:	e0 e2       	ldi	r30, 0x20	; 32
    81b2:	f6 e0       	ldi	r31, 0x06	; 6
    81b4:	82 e0       	ldi	r24, 0x02	; 2
    81b6:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    81b8:	81 e0       	ldi	r24, 0x01	; 1
    81ba:	85 83       	std	Z+5, r24	; 0x05
    81bc:	f1 c0       	rjmp	.+482    	; 0x83a0 <__vector_77+0x2ee>
		Leds_Clear(sd_Red);
		Leds_Set(sd_Green);
	} else if(currentMode == recordMode && !recording && !SD_Inserted()){									// dont allow to start recording
    81be:	80 91 54 31 	lds	r24, 0x3154
    81c2:	88 23       	and	r24, r24
    81c4:	79 f4       	brne	.+30     	; 0x81e4 <__vector_77+0x132>
    81c6:	80 91 30 31 	lds	r24, 0x3130
    81ca:	88 23       	and	r24, r24
    81cc:	59 f4       	brne	.+22     	; 0x81e4 <__vector_77+0x132>
    81ce:	80 91 a8 06 	lds	r24, 0x06A8
    81d2:	80 ff       	sbrs	r24, 0
    81d4:	07 c0       	rjmp	.+14     	; 0x81e4 <__vector_77+0x132>
    81d6:	e0 e2       	ldi	r30, 0x20	; 32
    81d8:	f6 e0       	ldi	r31, 0x06	; 6
    81da:	82 e0       	ldi	r24, 0x02	; 2
    81dc:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    81de:	81 e0       	ldi	r24, 0x01	; 1
    81e0:	86 83       	std	Z+6, r24	; 0x06
    81e2:	de c0       	rjmp	.+444    	; 0x83a0 <__vector_77+0x2ee>
		Leds_Set(sd_Red);
		Leds_Clear(sd_Green);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    81e4:	80 91 54 31 	lds	r24, 0x3154
    81e8:	88 23       	and	r24, r24
    81ea:	09 f0       	breq	.+2      	; 0x81ee <__vector_77+0x13c>
    81ec:	4c c0       	rjmp	.+152    	; 0x8286 <__vector_77+0x1d4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    81ee:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    81f2:	8c 77       	andi	r24, 0x7C	; 124
    81f4:	82 fd       	sbrc	r24, 2
    81f6:	47 c0       	rjmp	.+142    	; 0x8286 <__vector_77+0x1d4>
    81f8:	97 c4       	rjmp	.+2350   	; 0x8b28 <__vector_77+0xa76>

		display_putString("Recording      0m",0,0,System5x7);
    81fa:	83 e1       	ldi	r24, 0x13	; 19
    81fc:	91 e2       	ldi	r25, 0x21	; 33
    81fe:	60 e0       	ldi	r22, 0x00	; 0
    8200:	40 e0       	ldi	r20, 0x00	; 0
    8202:	2a e9       	ldi	r18, 0x9A	; 154
    8204:	3e e2       	ldi	r19, 0x2E	; 46
    8206:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		display_drawLine(1,60,7,60,true);		// up arrow
    820a:	81 e0       	ldi	r24, 0x01	; 1
    820c:	6c e3       	ldi	r22, 0x3C	; 60
    820e:	47 e0       	ldi	r20, 0x07	; 7
    8210:	2c e3       	ldi	r18, 0x3C	; 60
    8212:	01 e0       	ldi	r16, 0x01	; 1
    8214:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawPixel(2,59,true);
    8218:	82 e0       	ldi	r24, 0x02	; 2
    821a:	6b e3       	ldi	r22, 0x3B	; 59
    821c:	41 e0       	ldi	r20, 0x01	; 1
    821e:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,58,true);
    8222:	83 e0       	ldi	r24, 0x03	; 3
    8224:	6a e3       	ldi	r22, 0x3A	; 58
    8226:	41 e0       	ldi	r20, 0x01	; 1
    8228:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(2,61,true);
    822c:	82 e0       	ldi	r24, 0x02	; 2
    822e:	6d e3       	ldi	r22, 0x3D	; 61
    8230:	41 e0       	ldi	r20, 0x01	; 1
    8232:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,62,true);
    8236:	83 e0       	ldi	r24, 0x03	; 3
    8238:	6e e3       	ldi	r22, 0x3E	; 62
    823a:	41 e0       	ldi	r20, 0x01	; 1
    823c:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_writeBufferToScreen();
    8240:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>

        okToGetRemainingSpace = true;
    8244:	81 e0       	ldi	r24, 0x01	; 1
    8246:	80 93 8b 48 	sts	0x488B, r24
	    while(!okToGetRemainingSpace);
    824a:	80 91 8b 48 	lds	r24, 0x488B
    824e:	88 23       	and	r24, r24
    8250:	e1 f3       	breq	.-8      	; 0x824a <__vector_77+0x198>
    8252:	e0 e2       	ldi	r30, 0x20	; 32
    8254:	f6 e0       	ldi	r31, 0x06	; 6
    8256:	91 e0       	ldi	r25, 0x01	; 1
    8258:	96 83       	std	Z+6, r25	; 0x06
		Leds_Clear(wifi_Green);
		Leds_Clear(wifi_Red);
		Leds_Clear(ext_Green);
		Leds_Clear(ext_Red);

		okToOpenLogFile = true;
    825a:	82 e0       	ldi	r24, 0x02	; 2
    825c:	86 83       	std	Z+6, r24	; 0x06
    825e:	80 e4       	ldi	r24, 0x40	; 64
    8260:	86 83       	std	Z+6, r24	; 0x06
    8262:	80 e8       	ldi	r24, 0x80	; 128
    8264:	86 83       	std	Z+6, r24	; 0x06
    8266:	80 e1       	ldi	r24, 0x10	; 16
    8268:	86 83       	std	Z+6, r24	; 0x06
    826a:	80 e2       	ldi	r24, 0x20	; 32
    826c:	86 83       	std	Z+6, r24	; 0x06
    826e:	90 93 5b 31 	sts	0x315B, r25
    8272:	84 ef       	ldi	r24, 0xF4	; 244
    8274:	91 e0       	ldi	r25, 0x01	; 1
    8276:	20 e7       	ldi	r18, 0x70	; 112
    8278:	31 e0       	ldi	r19, 0x01	; 1
    827a:	f9 01       	movw	r30, r18
    827c:	31 97       	sbiw	r30, 0x01	; 1
    827e:	f1 f7       	brne	.-4      	; 0x827c <__vector_77+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8282:	d9 f7       	brne	.-10     	; 0x827a <__vector_77+0x1c8>
    8284:	8d c0       	rjmp	.+282    	; 0x83a0 <__vector_77+0x2ee>
		_delay_ms(50);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){								// pause recording
    8286:	80 91 54 31 	lds	r24, 0x3154
    828a:	88 23       	and	r24, r24
    828c:	09 f0       	breq	.+2      	; 0x8290 <__vector_77+0x1de>
    828e:	88 c0       	rjmp	.+272    	; 0x83a0 <__vector_77+0x2ee>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8290:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8294:	8c 77       	andi	r24, 0x7C	; 124
    8296:	82 fd       	sbrc	r24, 2
    8298:	83 c0       	rjmp	.+262    	; 0x83a0 <__vector_77+0x2ee>
    829a:	4c c4       	rjmp	.+2200   	; 0x8b34 <__vector_77+0xa82>
		rs232Recording = false;
    829c:	10 92 25 31 	sts	0x3125, r1
		recording = false;
    82a0:	10 92 30 31 	sts	0x3130, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    82a4:	10 92 34 31 	sts	0x3134, r1
  	temperatureBufferToWriteTo = 1;
    82a8:	81 e0       	ldi	r24, 0x01	; 1
    82aa:	80 93 7f 2d 	sts	0x2D7F, r24
	okToSendTemperatureBuffer1 = false;
    82ae:	10 92 32 31 	sts	0x3132, r1
	okToSendTemperatureBuffer2 = false;
    82b2:	10 92 33 31 	sts	0x3133, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    82b6:	10 92 3a 31 	sts	0x313A, r1
	humidityBufferToWriteTo = 1;
    82ba:	80 93 81 2d 	sts	0x2D81, r24
	okToSendHumidityBuffer1 = false;
    82be:	10 92 38 31 	sts	0x3138, r1
	okToSendHumidityBuffer2 = false;
    82c2:	10 92 39 31 	sts	0x3139, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    82c6:	10 92 37 31 	sts	0x3137, r1
	pressureBufferToWriteTo = 1;
    82ca:	80 93 80 2d 	sts	0x2D80, r24
	okToSendPressureBuffer1 = false;
    82ce:	10 92 35 31 	sts	0x3135, r1
	okToSendPressureBuffer2 = false;
    82d2:	10 92 36 31 	sts	0x3136, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    82d6:	10 92 3d 31 	sts	0x313D, r1
    82da:	10 92 3e 31 	sts	0x313E, r1
	microphoneBufferToWriteTo = 1;
    82de:	80 93 82 2d 	sts	0x2D82, r24
	okToSendMicrophoneBuffer1 = false;
    82e2:	10 92 3b 31 	sts	0x313B, r1
	okToSendMicrophoneBuffer2 = false;
    82e6:	10 92 3c 31 	sts	0x313C, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    82ea:	10 92 41 31 	sts	0x3141, r1
	lightBufferToWriteTo = 1;
    82ee:	80 93 83 2d 	sts	0x2D83, r24
	okToSendLightBuffer1 = false;
    82f2:	10 92 3f 31 	sts	0x313F, r1
	okToSendLightBuffer2 = false;
    82f6:	10 92 40 31 	sts	0x3140, r1
		Sensors_ResetTemperatureBuffers();
		Sensors_ResetHumidityBuffers();
		Sensors_ResetPressureBuffers();
		Sensors_ResetMicrophoneBuffers();
		Sensors_ResetLightBuffers();
		okToCloseLogFile = true;
    82fa:	80 93 5d 31 	sts	0x315D, r24

		display_putString("Paused           ",0,0,System5x7);
    82fe:	85 e2       	ldi	r24, 0x25	; 37
    8300:	91 e2       	ldi	r25, 0x21	; 33
    8302:	60 e0       	ldi	r22, 0x00	; 0
    8304:	40 e0       	ldi	r20, 0x00	; 0
    8306:	2a e9       	ldi	r18, 0x9A	; 154
    8308:	3e e2       	ldi	r19, 0x2E	; 46
    830a:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		display_drawLine(1,60,7,60,true);		// up arrow
    830e:	81 e0       	ldi	r24, 0x01	; 1
    8310:	6c e3       	ldi	r22, 0x3C	; 60
    8312:	47 e0       	ldi	r20, 0x07	; 7
    8314:	2c e3       	ldi	r18, 0x3C	; 60
    8316:	01 e0       	ldi	r16, 0x01	; 1
    8318:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawPixel(2,59,true);
    831c:	82 e0       	ldi	r24, 0x02	; 2
    831e:	6b e3       	ldi	r22, 0x3B	; 59
    8320:	41 e0       	ldi	r20, 0x01	; 1
    8322:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,58,true);
    8326:	83 e0       	ldi	r24, 0x03	; 3
    8328:	6a e3       	ldi	r22, 0x3A	; 58
    832a:	41 e0       	ldi	r20, 0x01	; 1
    832c:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(2,61,true);
    8330:	82 e0       	ldi	r24, 0x02	; 2
    8332:	6d e3       	ldi	r22, 0x3D	; 61
    8334:	41 e0       	ldi	r20, 0x01	; 1
    8336:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,62,true);
    833a:	83 e0       	ldi	r24, 0x03	; 3
    833c:	6e e3       	ldi	r22, 0x3E	; 62
    833e:	41 e0       	ldi	r20, 0x01	; 1
    8340:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_writeBufferToScreen();
    8344:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>

        if(timeIsValid || demoMode){
    8348:	80 91 6c 31 	lds	r24, 0x316C
    834c:	88 23       	and	r24, r24
    834e:	21 f4       	brne	.+8      	; 0x8358 <__vector_77+0x2a6>
    8350:	80 91 96 31 	lds	r24, 0x3196
    8354:	88 23       	and	r24, r24
    8356:	11 f0       	breq	.+4      	; 0x835c <__vector_77+0x2aa>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8358:	80 e4       	ldi	r24, 0x40	; 64
    835a:	01 c0       	rjmp	.+2      	; 0x835e <__vector_77+0x2ac>
    835c:	80 e8       	ldi	r24, 0x80	; 128
    835e:	e0 e2       	ldi	r30, 0x20	; 32
    8360:	f6 e0       	ldi	r31, 0x06	; 6
    8362:	85 83       	std	Z+5, r24	; 0x05
    8364:	80 91 a8 06 	lds	r24, 0x06A8
    8368:	80 ff       	sbrs	r24, 0
    836a:	ea c3       	rjmp	.+2004   	; 0x8b40 <__vector_77+0xa8e>
    836c:	82 e0       	ldi	r24, 0x02	; 2
    836e:	e0 e2       	ldi	r30, 0x20	; 32
    8370:	f6 e0       	ldi	r31, 0x06	; 6
    8372:	85 83       	std	Z+5, r24	; 0x05
		if(SD_Inserted()){
			Leds_Set(sd_Green);
		} else {
			Leds_Set(sd_Red);
		}
		if(!chargeComplete && SD2_Inserted()){
    8374:	80 91 29 31 	lds	r24, 0x3129
    8378:	88 23       	and	r24, r24
    837a:	29 f4       	brne	.+10     	; 0x8386 <__vector_77+0x2d4>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    837c:	80 91 a8 06 	lds	r24, 0x06A8
    8380:	81 fd       	sbrc	r24, 1
    8382:	05 c0       	rjmp	.+10     	; 0x838e <__vector_77+0x2dc>
    8384:	df c3       	rjmp	.+1982   	; 0x8b44 <__vector_77+0xa92>
    8386:	80 91 a8 06 	lds	r24, 0x06A8
    838a:	81 ff       	sbrs	r24, 1
    838c:	e0 c3       	rjmp	.+1984   	; 0x8b4e <__vector_77+0xa9c>
    838e:	88 e8       	ldi	r24, 0x88	; 136
    8390:	93 e1       	ldi	r25, 0x13	; 19
    8392:	20 e7       	ldi	r18, 0x70	; 112
    8394:	31 e0       	ldi	r19, 0x01	; 1
    8396:	f9 01       	movw	r30, r18
    8398:	31 97       	sbiw	r30, 0x01	; 1
    839a:	f1 f7       	brne	.-4      	; 0x8398 <__vector_77+0x2e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    839c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    839e:	d9 f7       	brne	.-10     	; 0x8396 <__vector_77+0x2e4>
		_delay_ms(500);
	}

	// load displays

	if(currentMode == recordMode){																		// show record screen
    83a0:	80 91 54 31 	lds	r24, 0x3154
    83a4:	88 23       	and	r24, r24
    83a6:	09 f0       	breq	.+2      	; 0x83aa <__vector_77+0x2f8>
    83a8:	44 c2       	rjmp	.+1160   	; 0x8832 <__vector_77+0x780>

		if(recording){
    83aa:	80 91 30 31 	lds	r24, 0x3130
    83ae:	88 23       	and	r24, r24
    83b0:	09 f4       	brne	.+2      	; 0x83b4 <__vector_77+0x302>
    83b2:	40 c0       	rjmp	.+128    	; 0x8434 <__vector_77+0x382>
			sprintf(temp2, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    83b4:	60 91 2b 31 	lds	r22, 0x312B
    83b8:	70 91 2c 31 	lds	r23, 0x312C
    83bc:	80 91 2d 31 	lds	r24, 0x312D
    83c0:	90 91 2e 31 	lds	r25, 0x312E
    83c4:	ad b7       	in	r26, 0x3d	; 61
    83c6:	be b7       	in	r27, 0x3e	; 62
    83c8:	18 97       	sbiw	r26, 0x08	; 8
    83ca:	ad bf       	out	0x3d, r26	; 61
    83cc:	be bf       	out	0x3e, r27	; 62
    83ce:	0d b7       	in	r16, 0x3d	; 61
    83d0:	1e b7       	in	r17, 0x3e	; 62
    83d2:	0f 5f       	subi	r16, 0xFF	; 255
    83d4:	1f 4f       	sbci	r17, 0xFF	; 255
    83d6:	2b e6       	ldi	r18, 0x6B	; 107
    83d8:	e2 2e       	mov	r14, r18
    83da:	2a e3       	ldi	r18, 0x3A	; 58
    83dc:	f2 2e       	mov	r15, r18
    83de:	11 96       	adiw	r26, 0x01	; 1
    83e0:	ed 92       	st	X+, r14
    83e2:	fc 92       	st	X, r15
    83e4:	12 97       	sbiw	r26, 0x02	; 2
    83e6:	27 e3       	ldi	r18, 0x37	; 55
    83e8:	31 e2       	ldi	r19, 0x21	; 33
    83ea:	f8 01       	movw	r30, r16
    83ec:	22 83       	std	Z+2, r18	; 0x02
    83ee:	33 83       	std	Z+3, r19	; 0x03
    83f0:	20 91 fc 30 	lds	r18, 0x30FC
    83f4:	30 91 fd 30 	lds	r19, 0x30FD
    83f8:	40 91 fe 30 	lds	r20, 0x30FE
    83fc:	50 91 ff 30 	lds	r21, 0x30FF
    8400:	62 1b       	sub	r22, r18
    8402:	73 0b       	sbc	r23, r19
    8404:	84 0b       	sbc	r24, r20
    8406:	95 0b       	sbc	r25, r21
    8408:	2c e3       	ldi	r18, 0x3C	; 60
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	40 e0       	ldi	r20, 0x00	; 0
    840e:	50 e0       	ldi	r21, 0x00	; 0
    8410:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    8414:	d8 01       	movw	r26, r16
    8416:	14 96       	adiw	r26, 0x04	; 4
    8418:	2d 93       	st	X+, r18
    841a:	3d 93       	st	X+, r19
    841c:	4d 93       	st	X+, r20
    841e:	5c 93       	st	X, r21
    8420:	17 97       	sbiw	r26, 0x07	; 7
    8422:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
			display_putString(temp2,0,0,System5x7);
    8426:	ed b7       	in	r30, 0x3d	; 61
    8428:	fe b7       	in	r31, 0x3e	; 62
    842a:	38 96       	adiw	r30, 0x08	; 8
    842c:	ed bf       	out	0x3d, r30	; 61
    842e:	fe bf       	out	0x3e, r31	; 62
    8430:	c7 01       	movw	r24, r14
    8432:	02 c0       	rjmp	.+4      	; 0x8438 <__vector_77+0x386>
		} else {
			display_putString("Paused           ",0,0,System5x7);
    8434:	85 e2       	ldi	r24, 0x25	; 37
    8436:	91 e2       	ldi	r25, 0x21	; 33
    8438:	60 e0       	ldi	r22, 0x00	; 0
    843a:	40 e0       	ldi	r20, 0x00	; 0
    843c:	2a e9       	ldi	r18, 0x9A	; 154
    843e:	3e e2       	ldi	r19, 0x2E	; 46
    8440:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		}

		display_drawLine(1,60,7,60,true);		// up arrow
    8444:	81 e0       	ldi	r24, 0x01	; 1
    8446:	6c e3       	ldi	r22, 0x3C	; 60
    8448:	47 e0       	ldi	r20, 0x07	; 7
    844a:	2c e3       	ldi	r18, 0x3C	; 60
    844c:	01 e0       	ldi	r16, 0x01	; 1
    844e:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawPixel(2,59,true);
    8452:	82 e0       	ldi	r24, 0x02	; 2
    8454:	6b e3       	ldi	r22, 0x3B	; 59
    8456:	41 e0       	ldi	r20, 0x01	; 1
    8458:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,58,true);
    845c:	83 e0       	ldi	r24, 0x03	; 3
    845e:	6a e3       	ldi	r22, 0x3A	; 58
    8460:	41 e0       	ldi	r20, 0x01	; 1
    8462:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(2,61,true);
    8466:	82 e0       	ldi	r24, 0x02	; 2
    8468:	6d e3       	ldi	r22, 0x3D	; 61
    846a:	41 e0       	ldi	r20, 0x01	; 1
    846c:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,62,true);
    8470:	83 e0       	ldi	r24, 0x03	; 3
    8472:	6e e3       	ldi	r22, 0x3E	; 62
    8474:	41 e0       	ldi	r20, 0x01	; 1
    8476:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>

		sprintf(temp2, "Uploading    %3u", uploadPercentBS);
    847a:	00 d0       	rcall	.+0      	; 0x847c <__vector_77+0x3ca>
    847c:	00 d0       	rcall	.+0      	; 0x847e <__vector_77+0x3cc>
    847e:	ed b7       	in	r30, 0x3d	; 61
    8480:	fe b7       	in	r31, 0x3e	; 62
    8482:	31 96       	adiw	r30, 0x01	; 1
    8484:	0b e6       	ldi	r16, 0x6B	; 107
    8486:	1a e3       	ldi	r17, 0x3A	; 58
    8488:	ad b7       	in	r26, 0x3d	; 61
    848a:	be b7       	in	r27, 0x3e	; 62
    848c:	11 96       	adiw	r26, 0x01	; 1
    848e:	0d 93       	st	X+, r16
    8490:	1c 93       	st	X, r17
    8492:	12 97       	sbiw	r26, 0x02	; 2
    8494:	89 e4       	ldi	r24, 0x49	; 73
    8496:	91 e2       	ldi	r25, 0x21	; 33
    8498:	82 83       	std	Z+2, r24	; 0x02
    849a:	93 83       	std	Z+3, r25	; 0x03
    849c:	80 91 58 31 	lds	r24, 0x3158
    84a0:	84 83       	std	Z+4, r24	; 0x04
    84a2:	15 82       	std	Z+5, r1	; 0x05
    84a4:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		strcat(temp2,"%");
    84a8:	ed b7       	in	r30, 0x3d	; 61
    84aa:	fe b7       	in	r31, 0x3e	; 62
    84ac:	36 96       	adiw	r30, 0x06	; 6
    84ae:	ed bf       	out	0x3d, r30	; 61
    84b0:	fe bf       	out	0x3e, r31	; 62
    84b2:	c8 01       	movw	r24, r16
    84b4:	6a e5       	ldi	r22, 0x5A	; 90
    84b6:	71 e2       	ldi	r23, 0x21	; 33
    84b8:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
		display_putString(temp2,1,0,System5x7);
    84bc:	c8 01       	movw	r24, r16
    84be:	61 e0       	ldi	r22, 0x01	; 1
    84c0:	40 e0       	ldi	r20, 0x00	; 0
    84c2:	2a e9       	ldi	r18, 0x9A	; 154
    84c4:	3e e2       	ldi	r19, 0x2E	; 46
    84c6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>

        sprintf(temp2, "Disk Used: %3u.%1u", ((uint8_t)percentDiskUsed)/10,((uint8_t)percentDiskUsed)%10);
    84ca:	20 91 92 31 	lds	r18, 0x3192
    84ce:	8d b7       	in	r24, 0x3d	; 61
    84d0:	9e b7       	in	r25, 0x3e	; 62
    84d2:	08 97       	sbiw	r24, 0x08	; 8
    84d4:	8d bf       	out	0x3d, r24	; 61
    84d6:	9e bf       	out	0x3e, r25	; 62
    84d8:	ed b7       	in	r30, 0x3d	; 61
    84da:	fe b7       	in	r31, 0x3e	; 62
    84dc:	31 96       	adiw	r30, 0x01	; 1
    84de:	ad b7       	in	r26, 0x3d	; 61
    84e0:	be b7       	in	r27, 0x3e	; 62
    84e2:	11 96       	adiw	r26, 0x01	; 1
    84e4:	0d 93       	st	X+, r16
    84e6:	1c 93       	st	X, r17
    84e8:	12 97       	sbiw	r26, 0x02	; 2
    84ea:	8c e5       	ldi	r24, 0x5C	; 92
    84ec:	91 e2       	ldi	r25, 0x21	; 33
    84ee:	82 83       	std	Z+2, r24	; 0x02
    84f0:	93 83       	std	Z+3, r25	; 0x03
    84f2:	82 2f       	mov	r24, r18
    84f4:	6a e0       	ldi	r22, 0x0A	; 10
    84f6:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    84fa:	84 83       	std	Z+4, r24	; 0x04
    84fc:	15 82       	std	Z+5, r1	; 0x05
    84fe:	82 2f       	mov	r24, r18
    8500:	0e 94 f6 57 	call	0xafec	; 0xafec <__udivmodqi4>
    8504:	96 83       	std	Z+6, r25	; 0x06
    8506:	17 82       	std	Z+7, r1	; 0x07
    8508:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		strcat(temp2,"%");
    850c:	ed b7       	in	r30, 0x3d	; 61
    850e:	fe b7       	in	r31, 0x3e	; 62
    8510:	38 96       	adiw	r30, 0x08	; 8
    8512:	ed bf       	out	0x3d, r30	; 61
    8514:	fe bf       	out	0x3e, r31	; 62
    8516:	c8 01       	movw	r24, r16
    8518:	6a e5       	ldi	r22, 0x5A	; 90
    851a:	71 e2       	ldi	r23, 0x21	; 33
    851c:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
		display_putString(temp2,2,0,System5x7);
    8520:	c8 01       	movw	r24, r16
    8522:	62 e0       	ldi	r22, 0x02	; 2
    8524:	40 e0       	ldi	r20, 0x00	; 0
    8526:	2a e9       	ldi	r18, 0x9A	; 154
    8528:	3e e2       	ldi	r19, 0x2E	; 46
    852a:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>




		if(chargePercent == 100){
    852e:	80 91 26 31 	lds	r24, 0x3126
    8532:	84 36       	cpi	r24, 0x64	; 100
    8534:	29 f4       	brne	.+10     	; 0x8540 <__vector_77+0x48e>
			chargeComplete = true;
    8536:	81 e0       	ldi	r24, 0x01	; 1
    8538:	80 93 29 31 	sts	0x3129, r24
			okToCharge  = false;
    853c:	10 92 2a 31 	sts	0x312A, r1
    8540:	80 91 a8 06 	lds	r24, 0x06A8
    8544:	81 fd       	sbrc	r24, 1
    8546:	13 c0       	rjmp	.+38     	; 0x856e <__vector_77+0x4bc>
    8548:	09 c3       	rjmp	.+1554   	; 0x8b5c <__vector_77+0xaaa>
		}


		if(SD2_Inserted() && chargeComplete){
			display_putString("Ext Charged      ",3,0,System5x7);
    854a:	8f e6       	ldi	r24, 0x6F	; 111
    854c:	91 e2       	ldi	r25, 0x21	; 33
    854e:	63 e0       	ldi	r22, 0x03	; 3
    8550:	40 e0       	ldi	r20, 0x00	; 0
    8552:	2a e9       	ldi	r18, 0x9A	; 154
    8554:	3e e2       	ldi	r19, 0x2E	; 46
    8556:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
			if(!recording){
    855a:	80 91 30 31 	lds	r24, 0x3130
    855e:	88 23       	and	r24, r24
    8560:	09 f0       	breq	.+2      	; 0x8564 <__vector_77+0x4b2>
    8562:	7b c0       	rjmp	.+246    	; 0x865a <__vector_77+0x5a8>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8564:	e0 e2       	ldi	r30, 0x20	; 32
    8566:	f6 e0       	ldi	r31, 0x06	; 6
    8568:	80 e2       	ldi	r24, 0x20	; 32
    856a:	86 83       	std	Z+6, r24	; 0x06
    856c:	5f c0       	rjmp	.+190    	; 0x862c <__vector_77+0x57a>
    856e:	80 91 a8 06 	lds	r24, 0x06A8
    8572:	81 fd       	sbrc	r24, 1
    8574:	5e c0       	rjmp	.+188    	; 0x8632 <__vector_77+0x580>
    8576:	f8 c2       	rjmp	.+1520   	; 0x8b68 <__vector_77+0xab6>
				Leds_Clear(ext_Red);
				Leds_Set(ext_Green);
			}
		} else if(SD2_Inserted() && !chargeComplete){
			sprintf(temp2, "Ext Charging  %2u",chargePercent);
    8578:	00 d0       	rcall	.+0      	; 0x857a <__vector_77+0x4c8>
    857a:	00 d0       	rcall	.+0      	; 0x857c <__vector_77+0x4ca>
    857c:	ed b7       	in	r30, 0x3d	; 61
    857e:	fe b7       	in	r31, 0x3e	; 62
    8580:	31 96       	adiw	r30, 0x01	; 1
    8582:	0b e6       	ldi	r16, 0x6B	; 107
    8584:	1a e3       	ldi	r17, 0x3A	; 58
    8586:	ad b7       	in	r26, 0x3d	; 61
    8588:	be b7       	in	r27, 0x3e	; 62
    858a:	11 96       	adiw	r26, 0x01	; 1
    858c:	0d 93       	st	X+, r16
    858e:	1c 93       	st	X, r17
    8590:	12 97       	sbiw	r26, 0x02	; 2
    8592:	81 e8       	ldi	r24, 0x81	; 129
    8594:	91 e2       	ldi	r25, 0x21	; 33
    8596:	82 83       	std	Z+2, r24	; 0x02
    8598:	93 83       	std	Z+3, r25	; 0x03
    859a:	80 91 26 31 	lds	r24, 0x3126
    859e:	84 83       	std	Z+4, r24	; 0x04
    85a0:	15 82       	std	Z+5, r1	; 0x05
    85a2:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
			strcat(temp2,"%");
    85a6:	ed b7       	in	r30, 0x3d	; 61
    85a8:	fe b7       	in	r31, 0x3e	; 62
    85aa:	36 96       	adiw	r30, 0x06	; 6
    85ac:	ed bf       	out	0x3d, r30	; 61
    85ae:	fe bf       	out	0x3e, r31	; 62
    85b0:	c8 01       	movw	r24, r16
    85b2:	6a e5       	ldi	r22, 0x5A	; 90
    85b4:	71 e2       	ldi	r23, 0x21	; 33
    85b6:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
			display_putString(temp2,3,0,System5x7);
    85ba:	c8 01       	movw	r24, r16
    85bc:	63 e0       	ldi	r22, 0x03	; 3
    85be:	40 e0       	ldi	r20, 0x00	; 0
    85c0:	2a e9       	ldi	r18, 0x9A	; 154
    85c2:	3e e2       	ldi	r19, 0x2E	; 46
    85c4:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
			okToCharge = true;
    85c8:	81 e0       	ldi	r24, 0x01	; 1
    85ca:	80 93 2a 31 	sts	0x312A, r24
			if(!rtcSynced){
    85ce:	80 91 5a 31 	lds	r24, 0x315A
    85d2:	88 23       	and	r24, r24
    85d4:	19 f5       	brne	.+70     	; 0x861c <__vector_77+0x56a>
    85d6:	88 e8       	ldi	r24, 0x88	; 136
    85d8:	93 e1       	ldi	r25, 0x13	; 19
    85da:	20 e7       	ldi	r18, 0x70	; 112
    85dc:	31 e0       	ldi	r19, 0x01	; 1
    85de:	f9 01       	movw	r30, r18
    85e0:	31 97       	sbiw	r30, 0x01	; 1
    85e2:	f1 f7       	brne	.-4      	; 0x85e0 <__vector_77+0x52e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    85e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    85e6:	d9 f7       	brne	.-10     	; 0x85de <__vector_77+0x52c>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    85e8:	e0 ea       	ldi	r30, 0xA0	; 160
    85ea:	f4 e0       	ldi	r31, 0x04	; 4
    85ec:	88 e0       	ldi	r24, 0x08	; 8
    85ee:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    85f0:	84 e0       	ldi	r24, 0x04	; 4
    85f2:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    85f4:	8f e0       	ldi	r24, 0x0F	; 15
    85f6:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    85f8:	11 e0       	ldi	r17, 0x01	; 1
    85fa:	14 83       	std	Z+4, r17	; 0x04
			    _delay_ms(500);
				//Debug_SendString("Syncing RTC", true);
				RTC_init();

				RTC_setUTCSecs(UNIX_time+5);
    85fc:	60 91 2b 31 	lds	r22, 0x312B
    8600:	70 91 2c 31 	lds	r23, 0x312C
    8604:	80 91 2d 31 	lds	r24, 0x312D
    8608:	90 91 2e 31 	lds	r25, 0x312E
    860c:	6b 5f       	subi	r22, 0xFB	; 251
    860e:	7f 4f       	sbci	r23, 0xFF	; 255
    8610:	8f 4f       	sbci	r24, 0xFF	; 255
    8612:	9f 4f       	sbci	r25, 0xFF	; 255
    8614:	0e 94 8d 38 	call	0x711a	; 0x711a <RTC_setUTCSecs>
				rtcSynced = true;
    8618:	10 93 5a 31 	sts	0x315A, r17
				//Debug_SendString("RTC synced", true);
			}
			if(!recording){
    861c:	80 91 30 31 	lds	r24, 0x3130
    8620:	88 23       	and	r24, r24
    8622:	d9 f4       	brne	.+54     	; 0x865a <__vector_77+0x5a8>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8624:	e0 e2       	ldi	r30, 0x20	; 32
    8626:	f6 e0       	ldi	r31, 0x06	; 6
    8628:	80 e2       	ldi	r24, 0x20	; 32
    862a:	85 83       	std	Z+5, r24	; 0x05
				Leds_Set(ext_Red);
				Leds_Set(ext_Green);
			}
		}else{
			display_putString("Ext Removed      ",3,0,System5x7);
    862c:	80 e1       	ldi	r24, 0x10	; 16
    862e:	85 83       	std	Z+5, r24	; 0x05
    8630:	14 c0       	rjmp	.+40     	; 0x865a <__vector_77+0x5a8>
    8632:	83 e9       	ldi	r24, 0x93	; 147
    8634:	91 e2       	ldi	r25, 0x21	; 33
    8636:	63 e0       	ldi	r22, 0x03	; 3
    8638:	40 e0       	ldi	r20, 0x00	; 0
    863a:	2a e9       	ldi	r18, 0x9A	; 154
    863c:	3e e2       	ldi	r19, 0x2E	; 46
    863e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
			chargePercent = 0;
    8642:	10 92 26 31 	sts	0x3126, r1
			chargeComplete = false;
    8646:	10 92 29 31 	sts	0x3129, r1
			rtcSynced = false;
    864a:	10 92 5a 31 	sts	0x315A, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    864e:	e0 e2       	ldi	r30, 0x20	; 32
    8650:	f6 e0       	ldi	r31, 0x06	; 6
    8652:	80 e2       	ldi	r24, 0x20	; 32
    8654:	86 83       	std	Z+6, r24	; 0x06
			Leds_Clear(ext_Red);
			Leds_Clear(ext_Green);
		}


		sprintf(temp2, "Uploading    %3u", uploadPercentEXT);
    8656:	80 e1       	ldi	r24, 0x10	; 16
    8658:	86 83       	std	Z+6, r24	; 0x06
    865a:	00 d0       	rcall	.+0      	; 0x865c <__vector_77+0x5aa>
    865c:	00 d0       	rcall	.+0      	; 0x865e <__vector_77+0x5ac>
    865e:	ed b7       	in	r30, 0x3d	; 61
    8660:	fe b7       	in	r31, 0x3e	; 62
    8662:	31 96       	adiw	r30, 0x01	; 1
    8664:	0b e6       	ldi	r16, 0x6B	; 107
    8666:	1a e3       	ldi	r17, 0x3A	; 58
    8668:	ad b7       	in	r26, 0x3d	; 61
    866a:	be b7       	in	r27, 0x3e	; 62
    866c:	11 96       	adiw	r26, 0x01	; 1
    866e:	0d 93       	st	X+, r16
    8670:	1c 93       	st	X, r17
    8672:	12 97       	sbiw	r26, 0x02	; 2
    8674:	89 e4       	ldi	r24, 0x49	; 73
    8676:	91 e2       	ldi	r25, 0x21	; 33
    8678:	82 83       	std	Z+2, r24	; 0x02
    867a:	93 83       	std	Z+3, r25	; 0x03
    867c:	80 91 59 31 	lds	r24, 0x3159
    8680:	84 83       	std	Z+4, r24	; 0x04
    8682:	15 82       	std	Z+5, r1	; 0x05
    8684:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		strcat(temp2,"%");
    8688:	ed b7       	in	r30, 0x3d	; 61
    868a:	fe b7       	in	r31, 0x3e	; 62
    868c:	36 96       	adiw	r30, 0x06	; 6
    868e:	ed bf       	out	0x3d, r30	; 61
    8690:	fe bf       	out	0x3e, r31	; 62
    8692:	c8 01       	movw	r24, r16
    8694:	6a e5       	ldi	r22, 0x5A	; 90
    8696:	71 e2       	ldi	r23, 0x21	; 33
    8698:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
		display_putString(temp2,4,0,System5x7);
    869c:	c8 01       	movw	r24, r16
    869e:	64 e0       	ldi	r22, 0x04	; 4
    86a0:	40 e0       	ldi	r20, 0x00	; 0
    86a2:	2a e9       	ldi	r18, 0x9A	; 154
    86a4:	3e e2       	ldi	r19, 0x2E	; 46
    86a6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>


		RTC_UTCSecsToTime(UNIX_time,&time);
    86aa:	60 91 2b 31 	lds	r22, 0x312B
    86ae:	70 91 2c 31 	lds	r23, 0x312C
    86b2:	80 91 2d 31 	lds	r24, 0x312D
    86b6:	90 91 2e 31 	lds	r25, 0x312E
    86ba:	47 e9       	ldi	r20, 0x97	; 151
    86bc:	5c e4       	ldi	r21, 0x4C	; 76
    86be:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <RTC_UTCSecsToTime>
		clockHour = time.Hour + 24;
		clockHour -= timeZoneShift;
    86c2:	90 91 9a 4c 	lds	r25, 0x4C9A
    86c6:	98 5e       	subi	r25, 0xE8	; 232
    86c8:	80 91 52 31 	lds	r24, 0x3152
    86cc:	98 1b       	sub	r25, r24
    86ce:	90 93 53 31 	sts	0x3153, r25
		if(clockHour > 24){
    86d2:	99 31       	cpi	r25, 0x19	; 25
    86d4:	18 f0       	brcs	.+6      	; 0x86dc <__vector_77+0x62a>
			clockHour -= 24;
    86d6:	98 51       	subi	r25, 0x18	; 24
    86d8:	90 93 53 31 	sts	0x3153, r25
		}

        if(clockHour == 0){
    86dc:	90 91 53 31 	lds	r25, 0x3153
    86e0:	99 23       	and	r25, r25
    86e2:	49 f4       	brne	.+18     	; 0x86f6 <__vector_77+0x644>
            displayAM = true;
    86e4:	81 e0       	ldi	r24, 0x01	; 1
    86e6:	80 93 6d 31 	sts	0x316D, r24
            displayPM = false;
    86ea:	10 92 6e 31 	sts	0x316E, r1
            clockHour += 12;
    86ee:	8c e0       	ldi	r24, 0x0C	; 12
    86f0:	80 93 53 31 	sts	0x3153, r24
    86f4:	18 c0       	rjmp	.+48     	; 0x8726 <__vector_77+0x674>
        } else if(clockHour == 12){
    86f6:	9c 30       	cpi	r25, 0x0C	; 12
    86f8:	31 f4       	brne	.+12     	; 0x8706 <__vector_77+0x654>
           displayAM = false;
    86fa:	10 92 6d 31 	sts	0x316D, r1
           displayPM = true;
    86fe:	81 e0       	ldi	r24, 0x01	; 1
    8700:	80 93 6e 31 	sts	0x316E, r24
    8704:	10 c0       	rjmp	.+32     	; 0x8726 <__vector_77+0x674>
        } else if(clockHour > 12){
    8706:	9d 30       	cpi	r25, 0x0D	; 13
    8708:	48 f0       	brcs	.+18     	; 0x871c <__vector_77+0x66a>
           displayAM = false;
    870a:	10 92 6d 31 	sts	0x316D, r1
           displayPM = true;
    870e:	81 e0       	ldi	r24, 0x01	; 1
    8710:	80 93 6e 31 	sts	0x316E, r24
           clockHour -= 12;
    8714:	9c 50       	subi	r25, 0x0C	; 12
    8716:	90 93 53 31 	sts	0x3153, r25
    871a:	05 c0       	rjmp	.+10     	; 0x8726 <__vector_77+0x674>
        }  else {
           displayAM = true;
    871c:	81 e0       	ldi	r24, 0x01	; 1
    871e:	80 93 6d 31 	sts	0x316D, r24
           displayPM = false;
    8722:	10 92 6e 31 	sts	0x316E, r1
        }

        sprintf(temp2,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    8726:	2d b7       	in	r18, 0x3d	; 61
    8728:	3e b7       	in	r19, 0x3e	; 62
    872a:	2a 50       	subi	r18, 0x0A	; 10
    872c:	30 40       	sbci	r19, 0x00	; 0
    872e:	2d bf       	out	0x3d, r18	; 61
    8730:	3e bf       	out	0x3e, r19	; 62
    8732:	ed b7       	in	r30, 0x3d	; 61
    8734:	fe b7       	in	r31, 0x3e	; 62
    8736:	31 96       	adiw	r30, 0x01	; 1
    8738:	0b e6       	ldi	r16, 0x6B	; 107
    873a:	1a e3       	ldi	r17, 0x3A	; 58
    873c:	ad b7       	in	r26, 0x3d	; 61
    873e:	be b7       	in	r27, 0x3e	; 62
    8740:	11 96       	adiw	r26, 0x01	; 1
    8742:	0d 93       	st	X+, r16
    8744:	1c 93       	st	X, r17
    8746:	12 97       	sbiw	r26, 0x02	; 2
    8748:	85 ea       	ldi	r24, 0xA5	; 165
    874a:	91 e2       	ldi	r25, 0x21	; 33
    874c:	82 83       	std	Z+2, r24	; 0x02
    874e:	93 83       	std	Z+3, r25	; 0x03
    8750:	80 91 53 31 	lds	r24, 0x3153
    8754:	84 83       	std	Z+4, r24	; 0x04
    8756:	15 82       	std	Z+5, r1	; 0x05
    8758:	80 91 99 4c 	lds	r24, 0x4C99
    875c:	86 83       	std	Z+6, r24	; 0x06
    875e:	17 82       	std	Z+7, r1	; 0x07
    8760:	80 91 98 4c 	lds	r24, 0x4C98
    8764:	80 87       	std	Z+8, r24	; 0x08
    8766:	11 86       	std	Z+9, r1	; 0x09
    8768:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
        if(displayAM){
    876c:	80 91 6d 31 	lds	r24, 0x316D
    8770:	ed b7       	in	r30, 0x3d	; 61
    8772:	fe b7       	in	r31, 0x3e	; 62
    8774:	3a 96       	adiw	r30, 0x0a	; 10
    8776:	ed bf       	out	0x3d, r30	; 61
    8778:	fe bf       	out	0x3e, r31	; 62
    877a:	88 23       	and	r24, r24
    877c:	21 f0       	breq	.+8      	; 0x8786 <__vector_77+0x6d4>
          strcat(temp2,am);
    877e:	c8 01       	movw	r24, r16
    8780:	6e e8       	ldi	r22, 0x8E	; 142
    8782:	7e e2       	ldi	r23, 0x2E	; 46
    8784:	07 c0       	rjmp	.+14     	; 0x8794 <__vector_77+0x6e2>
        } else if(displayPM){
    8786:	80 91 6e 31 	lds	r24, 0x316E
    878a:	88 23       	and	r24, r24
    878c:	29 f0       	breq	.+10     	; 0x8798 <__vector_77+0x6e6>
          strcat(temp2,pm);
    878e:	c8 01       	movw	r24, r16
    8790:	63 e9       	ldi	r22, 0x93	; 147
    8792:	7e e2       	ldi	r23, 0x2E	; 46
    8794:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
        }
		display_putString(temp2,6,0,System5x7);
    8798:	0b e6       	ldi	r16, 0x6B	; 107
    879a:	1a e3       	ldi	r17, 0x3A	; 58
    879c:	c8 01       	movw	r24, r16
    879e:	66 e0       	ldi	r22, 0x06	; 6
    87a0:	40 e0       	ldi	r20, 0x00	; 0
    87a2:	2a e9       	ldi	r18, 0x9A	; 154
    87a4:	3e e2       	ldi	r19, 0x2E	; 46
    87a6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>

		sprintf(temp2, "Wifi %3u",signalStrength);
    87aa:	00 d0       	rcall	.+0      	; 0x87ac <__vector_77+0x6fa>
    87ac:	00 d0       	rcall	.+0      	; 0x87ae <__vector_77+0x6fc>
    87ae:	ed b7       	in	r30, 0x3d	; 61
    87b0:	fe b7       	in	r31, 0x3e	; 62
    87b2:	31 96       	adiw	r30, 0x01	; 1
    87b4:	ad b7       	in	r26, 0x3d	; 61
    87b6:	be b7       	in	r27, 0x3e	; 62
    87b8:	11 96       	adiw	r26, 0x01	; 1
    87ba:	0d 93       	st	X+, r16
    87bc:	1c 93       	st	X, r17
    87be:	12 97       	sbiw	r26, 0x02	; 2
    87c0:	89 eb       	ldi	r24, 0xB9	; 185
    87c2:	91 e2       	ldi	r25, 0x21	; 33
    87c4:	82 83       	std	Z+2, r24	; 0x02
    87c6:	93 83       	std	Z+3, r25	; 0x03
    87c8:	80 91 57 31 	lds	r24, 0x3157
    87cc:	84 83       	std	Z+4, r24	; 0x04
    87ce:	15 82       	std	Z+5, r1	; 0x05
    87d0:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		strcat(temp2,"%   more");
    87d4:	ed b7       	in	r30, 0x3d	; 61
    87d6:	fe b7       	in	r31, 0x3e	; 62
    87d8:	36 96       	adiw	r30, 0x06	; 6
    87da:	ed bf       	out	0x3d, r30	; 61
    87dc:	fe bf       	out	0x3e, r31	; 62
    87de:	c8 01       	movw	r24, r16
    87e0:	62 ec       	ldi	r22, 0xC2	; 194
    87e2:	71 e2       	ldi	r23, 0x21	; 33
    87e4:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
		display_putString(temp2,7,0,System5x7);
    87e8:	c8 01       	movw	r24, r16
    87ea:	67 e0       	ldi	r22, 0x07	; 7
    87ec:	40 e0       	ldi	r20, 0x00	; 0
    87ee:	2a e9       	ldi	r18, 0x9A	; 154
    87f0:	3e e2       	ldi	r19, 0x2E	; 46
    87f2:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>


		display_drawLine(56,98,63,98,true);		// down arrow
    87f6:	88 e3       	ldi	r24, 0x38	; 56
    87f8:	62 e6       	ldi	r22, 0x62	; 98
    87fa:	4f e3       	ldi	r20, 0x3F	; 63
    87fc:	22 e6       	ldi	r18, 0x62	; 98
    87fe:	01 e0       	ldi	r16, 0x01	; 1
    8800:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawPixel(62,97,true);
    8804:	8e e3       	ldi	r24, 0x3E	; 62
    8806:	61 e6       	ldi	r22, 0x61	; 97
    8808:	41 e0       	ldi	r20, 0x01	; 1
    880a:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(61,96,true);
    880e:	8d e3       	ldi	r24, 0x3D	; 61
    8810:	60 e6       	ldi	r22, 0x60	; 96
    8812:	41 e0       	ldi	r20, 0x01	; 1
    8814:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(62,99,true);
    8818:	8e e3       	ldi	r24, 0x3E	; 62
    881a:	63 e6       	ldi	r22, 0x63	; 99
    881c:	41 e0       	ldi	r20, 0x01	; 1
    881e:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(61,100,true);
    8822:	8d e3       	ldi	r24, 0x3D	; 61
    8824:	64 e6       	ldi	r22, 0x64	; 100
    8826:	41 e0       	ldi	r20, 0x01	; 1
    8828:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>

		display_writeBufferToScreen();
    882c:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    8830:	ad c1       	rjmp	.+858    	; 0x8b8c <__vector_77+0xada>



	} else if(currentMode == sensorMode){																// show sensor screen
    8832:	f0 90 54 31 	lds	r15, 0x3154
    8836:	f1 e0       	ldi	r31, 0x01	; 1
    8838:	ff 16       	cp	r15, r31
    883a:	09 f0       	breq	.+2      	; 0x883e <__vector_77+0x78c>
    883c:	a7 c1       	rjmp	.+846    	; 0x8b8c <__vector_77+0xada>

		display_clearBuffer();
    883e:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearBuffer>
		display_putString("   Sensors  back",0,0,System5x7);
    8842:	8b ec       	ldi	r24, 0xCB	; 203
    8844:	91 e2       	ldi	r25, 0x21	; 33
    8846:	60 e0       	ldi	r22, 0x00	; 0
    8848:	40 e0       	ldi	r20, 0x00	; 0
    884a:	2a e9       	ldi	r18, 0x9A	; 154
    884c:	3e e2       	ldi	r19, 0x2E	; 46
    884e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		display_drawLine(8, 15, 8,61,true);
    8852:	88 e0       	ldi	r24, 0x08	; 8
    8854:	6f e0       	ldi	r22, 0x0F	; 15
    8856:	48 e0       	ldi	r20, 0x08	; 8
    8858:	2d e3       	ldi	r18, 0x3D	; 61
    885a:	01 e0       	ldi	r16, 0x01	; 1
    885c:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>

		display_drawLine(1,99,7,99,true);		// up arrow
    8860:	81 e0       	ldi	r24, 0x01	; 1
    8862:	63 e6       	ldi	r22, 0x63	; 99
    8864:	47 e0       	ldi	r20, 0x07	; 7
    8866:	23 e6       	ldi	r18, 0x63	; 99
    8868:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <display_drawLine>
		display_drawPixel(2,98,true);
    886c:	82 e0       	ldi	r24, 0x02	; 2
    886e:	62 e6       	ldi	r22, 0x62	; 98
    8870:	41 e0       	ldi	r20, 0x01	; 1
    8872:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,97,true);
    8876:	83 e0       	ldi	r24, 0x03	; 3
    8878:	61 e6       	ldi	r22, 0x61	; 97
    887a:	41 e0       	ldi	r20, 0x01	; 1
    887c:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(2,100,true);
    8880:	82 e0       	ldi	r24, 0x02	; 2
    8882:	64 e6       	ldi	r22, 0x64	; 100
    8884:	41 e0       	ldi	r20, 0x01	; 1
    8886:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>
		display_drawPixel(3,101,true);
    888a:	83 e0       	ldi	r24, 0x03	; 3
    888c:	65 e6       	ldi	r22, 0x65	; 101
    888e:	41 e0       	ldi	r20, 0x01	; 1
    8890:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <display_drawPixel>

		sprintf(temp2,"Temperature: %3uC", quickTemperature);
    8894:	00 d0       	rcall	.+0      	; 0x8896 <__vector_77+0x7e4>
    8896:	00 d0       	rcall	.+0      	; 0x8898 <__vector_77+0x7e6>
    8898:	ed b7       	in	r30, 0x3d	; 61
    889a:	fe b7       	in	r31, 0x3e	; 62
    889c:	31 96       	adiw	r30, 0x01	; 1
    889e:	0b e6       	ldi	r16, 0x6B	; 107
    88a0:	1a e3       	ldi	r17, 0x3A	; 58
    88a2:	ad b7       	in	r26, 0x3d	; 61
    88a4:	be b7       	in	r27, 0x3e	; 62
    88a6:	11 96       	adiw	r26, 0x01	; 1
    88a8:	0d 93       	st	X+, r16
    88aa:	1c 93       	st	X, r17
    88ac:	12 97       	sbiw	r26, 0x02	; 2
    88ae:	8c ed       	ldi	r24, 0xDC	; 220
    88b0:	91 e2       	ldi	r25, 0x21	; 33
    88b2:	82 83       	std	Z+2, r24	; 0x02
    88b4:	93 83       	std	Z+3, r25	; 0x03
    88b6:	80 91 44 31 	lds	r24, 0x3144
    88ba:	84 83       	std	Z+4, r24	; 0x04
    88bc:	15 82       	std	Z+5, r1	; 0x05
    88be:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		display_putString(temp2,2,0,System5x7);
    88c2:	ed b7       	in	r30, 0x3d	; 61
    88c4:	fe b7       	in	r31, 0x3e	; 62
    88c6:	36 96       	adiw	r30, 0x06	; 6
    88c8:	ed bf       	out	0x3d, r30	; 61
    88ca:	fe bf       	out	0x3e, r31	; 62
    88cc:	c8 01       	movw	r24, r16
    88ce:	62 e0       	ldi	r22, 0x02	; 2
    88d0:	40 e0       	ldi	r20, 0x00	; 0
    88d2:	2a e9       	ldi	r18, 0x9A	; 154
    88d4:	3e e2       	ldi	r19, 0x2E	; 46
    88d6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		sprintf(temp2,"Humidity:  %3u", quickHumidity);
    88da:	00 d0       	rcall	.+0      	; 0x88dc <__vector_77+0x82a>
    88dc:	00 d0       	rcall	.+0      	; 0x88de <__vector_77+0x82c>
    88de:	ed b7       	in	r30, 0x3d	; 61
    88e0:	fe b7       	in	r31, 0x3e	; 62
    88e2:	31 96       	adiw	r30, 0x01	; 1
    88e4:	ad b7       	in	r26, 0x3d	; 61
    88e6:	be b7       	in	r27, 0x3e	; 62
    88e8:	11 96       	adiw	r26, 0x01	; 1
    88ea:	0d 93       	st	X+, r16
    88ec:	1c 93       	st	X, r17
    88ee:	12 97       	sbiw	r26, 0x02	; 2
    88f0:	8e ee       	ldi	r24, 0xEE	; 238
    88f2:	91 e2       	ldi	r25, 0x21	; 33
    88f4:	82 83       	std	Z+2, r24	; 0x02
    88f6:	93 83       	std	Z+3, r25	; 0x03
    88f8:	80 91 45 31 	lds	r24, 0x3145
    88fc:	84 83       	std	Z+4, r24	; 0x04
    88fe:	15 82       	std	Z+5, r1	; 0x05
    8900:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		strcat(temp2, "%RH");
    8904:	ed b7       	in	r30, 0x3d	; 61
    8906:	fe b7       	in	r31, 0x3e	; 62
    8908:	36 96       	adiw	r30, 0x06	; 6
    890a:	ed bf       	out	0x3d, r30	; 61
    890c:	fe bf       	out	0x3e, r31	; 62
    890e:	c8 01       	movw	r24, r16
    8910:	6d ef       	ldi	r22, 0xFD	; 253
    8912:	71 e2       	ldi	r23, 0x21	; 33
    8914:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
		display_putString(temp2,3,0,System5x7);
    8918:	c8 01       	movw	r24, r16
    891a:	63 e0       	ldi	r22, 0x03	; 3
    891c:	40 e0       	ldi	r20, 0x00	; 0
    891e:	2a e9       	ldi	r18, 0x9A	; 154
    8920:	3e e2       	ldi	r19, 0x2E	; 46
    8922:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		sprintf(temp2,"Pressure:  %3ukPa", quickPressure);
    8926:	00 d0       	rcall	.+0      	; 0x8928 <__vector_77+0x876>
    8928:	00 d0       	rcall	.+0      	; 0x892a <__vector_77+0x878>
    892a:	ed b7       	in	r30, 0x3d	; 61
    892c:	fe b7       	in	r31, 0x3e	; 62
    892e:	31 96       	adiw	r30, 0x01	; 1
    8930:	ad b7       	in	r26, 0x3d	; 61
    8932:	be b7       	in	r27, 0x3e	; 62
    8934:	11 96       	adiw	r26, 0x01	; 1
    8936:	0d 93       	st	X+, r16
    8938:	1c 93       	st	X, r17
    893a:	12 97       	sbiw	r26, 0x02	; 2
    893c:	81 e0       	ldi	r24, 0x01	; 1
    893e:	92 e2       	ldi	r25, 0x22	; 34
    8940:	82 83       	std	Z+2, r24	; 0x02
    8942:	93 83       	std	Z+3, r25	; 0x03
    8944:	80 91 46 31 	lds	r24, 0x3146
    8948:	84 83       	std	Z+4, r24	; 0x04
    894a:	15 82       	std	Z+5, r1	; 0x05
    894c:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		display_putString(temp2,4,0,System5x7);
    8950:	ed b7       	in	r30, 0x3d	; 61
    8952:	fe b7       	in	r31, 0x3e	; 62
    8954:	36 96       	adiw	r30, 0x06	; 6
    8956:	ed bf       	out	0x3d, r30	; 61
    8958:	fe bf       	out	0x3e, r31	; 62
    895a:	c8 01       	movw	r24, r16
    895c:	64 e0       	ldi	r22, 0x04	; 4
    895e:	40 e0       	ldi	r20, 0x00	; 0
    8960:	2a e9       	ldi	r18, 0x9A	; 154
    8962:	3e e2       	ldi	r19, 0x2E	; 46
    8964:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		sprintf(temp2,"Light:      %5u", quickLight);
    8968:	00 d0       	rcall	.+0      	; 0x896a <__vector_77+0x8b8>
    896a:	00 d0       	rcall	.+0      	; 0x896c <__vector_77+0x8ba>
    896c:	ed b7       	in	r30, 0x3d	; 61
    896e:	fe b7       	in	r31, 0x3e	; 62
    8970:	31 96       	adiw	r30, 0x01	; 1
    8972:	ad b7       	in	r26, 0x3d	; 61
    8974:	be b7       	in	r27, 0x3e	; 62
    8976:	11 96       	adiw	r26, 0x01	; 1
    8978:	0d 93       	st	X+, r16
    897a:	1c 93       	st	X, r17
    897c:	12 97       	sbiw	r26, 0x02	; 2
    897e:	83 e1       	ldi	r24, 0x13	; 19
    8980:	92 e2       	ldi	r25, 0x22	; 34
    8982:	82 83       	std	Z+2, r24	; 0x02
    8984:	93 83       	std	Z+3, r25	; 0x03
    8986:	80 91 47 31 	lds	r24, 0x3147
    898a:	90 91 48 31 	lds	r25, 0x3148
    898e:	84 83       	std	Z+4, r24	; 0x04
    8990:	95 83       	std	Z+5, r25	; 0x05
    8992:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		display_putString(temp2,5,0,System5x7);
    8996:	ed b7       	in	r30, 0x3d	; 61
    8998:	fe b7       	in	r31, 0x3e	; 62
    899a:	36 96       	adiw	r30, 0x06	; 6
    899c:	ed bf       	out	0x3d, r30	; 61
    899e:	fe bf       	out	0x3e, r31	; 62
    89a0:	c8 01       	movw	r24, r16
    89a2:	65 e0       	ldi	r22, 0x05	; 5
    89a4:	40 e0       	ldi	r20, 0x00	; 0
    89a6:	2a e9       	ldi	r18, 0x9A	; 154
    89a8:	3e e2       	ldi	r19, 0x2E	; 46
    89aa:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		sprintf(temp2,"Air: %5lu, %5lu", quickSmall, quickLarge);
    89ae:	2d b7       	in	r18, 0x3d	; 61
    89b0:	3e b7       	in	r19, 0x3e	; 62
    89b2:	2c 50       	subi	r18, 0x0C	; 12
    89b4:	30 40       	sbci	r19, 0x00	; 0
    89b6:	2d bf       	out	0x3d, r18	; 61
    89b8:	3e bf       	out	0x3e, r19	; 62
    89ba:	ed b7       	in	r30, 0x3d	; 61
    89bc:	fe b7       	in	r31, 0x3e	; 62
    89be:	31 96       	adiw	r30, 0x01	; 1
    89c0:	ad b7       	in	r26, 0x3d	; 61
    89c2:	be b7       	in	r27, 0x3e	; 62
    89c4:	11 96       	adiw	r26, 0x01	; 1
    89c6:	0d 93       	st	X+, r16
    89c8:	1c 93       	st	X, r17
    89ca:	12 97       	sbiw	r26, 0x02	; 2
    89cc:	83 e2       	ldi	r24, 0x23	; 35
    89ce:	92 e2       	ldi	r25, 0x22	; 34
    89d0:	82 83       	std	Z+2, r24	; 0x02
    89d2:	93 83       	std	Z+3, r25	; 0x03
    89d4:	80 91 1d 31 	lds	r24, 0x311D
    89d8:	90 91 1e 31 	lds	r25, 0x311E
    89dc:	a0 91 1f 31 	lds	r26, 0x311F
    89e0:	b0 91 20 31 	lds	r27, 0x3120
    89e4:	84 83       	std	Z+4, r24	; 0x04
    89e6:	95 83       	std	Z+5, r25	; 0x05
    89e8:	a6 83       	std	Z+6, r26	; 0x06
    89ea:	b7 83       	std	Z+7, r27	; 0x07
    89ec:	80 91 21 31 	lds	r24, 0x3121
    89f0:	90 91 22 31 	lds	r25, 0x3122
    89f4:	a0 91 23 31 	lds	r26, 0x3123
    89f8:	b0 91 24 31 	lds	r27, 0x3124
    89fc:	80 87       	std	Z+8, r24	; 0x08
    89fe:	91 87       	std	Z+9, r25	; 0x09
    8a00:	a2 87       	std	Z+10, r26	; 0x0a
    8a02:	b3 87       	std	Z+11, r27	; 0x0b
    8a04:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
		display_putString(temp2,6,0,System5x7);
    8a08:	ed b7       	in	r30, 0x3d	; 61
    8a0a:	fe b7       	in	r31, 0x3e	; 62
    8a0c:	3c 96       	adiw	r30, 0x0c	; 12
    8a0e:	ed bf       	out	0x3d, r30	; 61
    8a10:	fe bf       	out	0x3e, r31	; 62
    8a12:	c8 01       	movw	r24, r16
    8a14:	66 e0       	ldi	r22, 0x06	; 6
    8a16:	40 e0       	ldi	r20, 0x00	; 0
    8a18:	2a e9       	ldi	r18, 0x9A	; 154
    8a1a:	3e e2       	ldi	r19, 0x2E	; 46
    8a1c:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		display_putString("Sound:           ",7,0,System5x7);
    8a20:	83 e3       	ldi	r24, 0x33	; 51
    8a22:	92 e2       	ldi	r25, 0x22	; 34
    8a24:	67 e0       	ldi	r22, 0x07	; 7
    8a26:	40 e0       	ldi	r20, 0x00	; 0
    8a28:	2a e9       	ldi	r18, 0x9A	; 154
    8a2a:	3e e2       	ldi	r19, 0x2E	; 46
    8a2c:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    8a30:	20 91 49 31 	lds	r18, 0x3149
    8a34:	26 95       	lsr	r18
    8a36:	89 e3       	ldi	r24, 0x39	; 57
    8a38:	62 e3       	ldi	r22, 0x32	; 50
    8a3a:	47 e0       	ldi	r20, 0x07	; 7
    8a3c:	01 e0       	ldi	r16, 0x01	; 1
    8a3e:	ee 24       	eor	r14, r14
    8a40:	cc 24       	eor	r12, r12
    8a42:	c3 94       	inc	r12
    8a44:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <display_drawRectangle>
		display_writeBufferToScreen();
    8a48:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>

		if(chargePercent == 100){
    8a4c:	80 91 26 31 	lds	r24, 0x3126
    8a50:	84 36       	cpi	r24, 0x64	; 100
    8a52:	21 f4       	brne	.+8      	; 0x8a5c <__vector_77+0x9aa>
			chargeComplete = true;
    8a54:	f0 92 29 31 	sts	0x3129, r15
			okToCharge  = false;
    8a58:	10 92 2a 31 	sts	0x312A, r1
    8a5c:	80 91 a8 06 	lds	r24, 0x06A8
    8a60:	81 fd       	sbrc	r24, 1
    8a62:	0a c0       	rjmp	.+20     	; 0x8a78 <__vector_77+0x9c6>
    8a64:	87 c0       	rjmp	.+270    	; 0x8b74 <__vector_77+0xac2>
		}

		if(SD2_Inserted() && chargeComplete && !recording){
    8a66:	80 91 30 31 	lds	r24, 0x3130
    8a6a:	88 23       	and	r24, r24
    8a6c:	29 f4       	brne	.+10     	; 0x8a78 <__vector_77+0x9c6>
    8a6e:	e0 e2       	ldi	r30, 0x20	; 32
    8a70:	f6 e0       	ldi	r31, 0x06	; 6
    8a72:	80 e2       	ldi	r24, 0x20	; 32
    8a74:	86 83       	std	Z+6, r24	; 0x06
    8a76:	2f c0       	rjmp	.+94     	; 0x8ad6 <__vector_77+0xa24>
    8a78:	80 91 a8 06 	lds	r24, 0x06A8
    8a7c:	81 fd       	sbrc	r24, 1
    8a7e:	2e c0       	rjmp	.+92     	; 0x8adc <__vector_77+0xa2a>
    8a80:	7f c0       	rjmp	.+254    	; 0x8b80 <__vector_77+0xace>
			Leds_Clear(ext_Red);
			Leds_Set(ext_Green);
		} else if(SD2_Inserted() && !chargeComplete){
			okToCharge = true;
    8a82:	91 e0       	ldi	r25, 0x01	; 1
    8a84:	90 93 2a 31 	sts	0x312A, r25
			if(!rtcSynced){
    8a88:	80 91 5a 31 	lds	r24, 0x315A
    8a8c:	88 23       	and	r24, r24
    8a8e:	d1 f4       	brne	.+52     	; 0x8ac4 <__vector_77+0xa12>
				//Debug_SendString("Syncing RTC", true);
				if(!demoMode){
    8a90:	80 91 96 31 	lds	r24, 0x3196
    8a94:	88 23       	and	r24, r24
    8a96:	99 f4       	brne	.+38     	; 0x8abe <__vector_77+0xa0c>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    8a98:	e0 ea       	ldi	r30, 0xA0	; 160
    8a9a:	f4 e0       	ldi	r31, 0x04	; 4
    8a9c:	88 e0       	ldi	r24, 0x08	; 8
    8a9e:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    8aa0:	84 e0       	ldi	r24, 0x04	; 4
    8aa2:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    8aa4:	8f e0       	ldi	r24, 0x0F	; 15
    8aa6:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    8aa8:	94 83       	std	Z+4, r25	; 0x04
					RTC_init();
					RTC_setUTCSecs(UNIX_time);
    8aaa:	60 91 2b 31 	lds	r22, 0x312B
    8aae:	70 91 2c 31 	lds	r23, 0x312C
    8ab2:	80 91 2d 31 	lds	r24, 0x312D
    8ab6:	90 91 2e 31 	lds	r25, 0x312E
    8aba:	0e 94 8d 38 	call	0x711a	; 0x711a <RTC_setUTCSecs>
				}
				rtcSynced = true;
    8abe:	81 e0       	ldi	r24, 0x01	; 1
    8ac0:	80 93 5a 31 	sts	0x315A, r24
			}
			if(!recording){
    8ac4:	80 91 30 31 	lds	r24, 0x3130
    8ac8:	88 23       	and	r24, r24
    8aca:	09 f0       	breq	.+2      	; 0x8ace <__vector_77+0xa1c>
    8acc:	5f c0       	rjmp	.+190    	; 0x8b8c <__vector_77+0xada>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8ace:	e0 e2       	ldi	r30, 0x20	; 32
    8ad0:	f6 e0       	ldi	r31, 0x06	; 6
    8ad2:	80 e2       	ldi	r24, 0x20	; 32
    8ad4:	85 83       	std	Z+5, r24	; 0x05
				Leds_Set(ext_Red);
				Leds_Set(ext_Green);
			}

		}else{
			chargePercent = 0;
    8ad6:	80 e1       	ldi	r24, 0x10	; 16
    8ad8:	85 83       	std	Z+5, r24	; 0x05
    8ada:	58 c0       	rjmp	.+176    	; 0x8b8c <__vector_77+0xada>
    8adc:	10 92 26 31 	sts	0x3126, r1
			chargeComplete = false;
    8ae0:	10 92 29 31 	sts	0x3129, r1
			rtcSynced = false;
    8ae4:	10 92 5a 31 	sts	0x315A, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8ae8:	e0 e2       	ldi	r30, 0x20	; 32
    8aea:	f6 e0       	ldi	r31, 0x06	; 6
    8aec:	80 e2       	ldi	r24, 0x20	; 32
    8aee:	86 83       	std	Z+6, r24	; 0x06
	// controls


    if(currentMode == recordMode && Dpad_CheckButton(Down)){											// go to sensorMode

		currentMode = sensorMode;
    8af0:	80 e1       	ldi	r24, 0x10	; 16
    8af2:	86 83       	std	Z+6, r24	; 0x06
    8af4:	4b c0       	rjmp	.+150    	; 0x8b8c <__vector_77+0xada>
    8af6:	81 e0       	ldi	r24, 0x01	; 1
    8af8:	80 93 54 31 	sts	0x3154, r24
		display_clearBuffer();
    8afc:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearBuffer>
		display_writeBufferToScreen();
    8b00:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    8b04:	4d cc       	rjmp	.-1894   	; 0x83a0 <__vector_77+0x2ee>
	} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){											// go to recordMode

		currentMode = recordMode;
    8b06:	10 92 54 31 	sts	0x3154, r1
		display_clearBuffer();
    8b0a:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearBuffer>
		display_writeBufferToScreen();
    8b0e:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    8b12:	20 ea       	ldi	r18, 0xA0	; 160
    8b14:	3f e0       	ldi	r19, 0x0F	; 15
    8b16:	40 e7       	ldi	r20, 0x70	; 112
    8b18:	51 e0       	ldi	r21, 0x01	; 1
    8b1a:	32 cb       	rjmp	.-2460   	; 0x8180 <__vector_77+0xce>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8b1c:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8b20:	8c 77       	andi	r24, 0x7C	; 124
    8b22:	82 fd       	sbrc	r24, 2
    8b24:	41 cb       	rjmp	.-2430   	; 0x81a8 <__vector_77+0xf6>
    8b26:	4b cb       	rjmp	.-2410   	; 0x81be <__vector_77+0x10c>
		Leds_Clear(sd_Red);
		Leds_Set(sd_Green);
	} else if(currentMode == recordMode && !recording && !SD_Inserted()){									// dont allow to start recording
		Leds_Set(sd_Red);
		Leds_Clear(sd_Green);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    8b28:	80 91 30 31 	lds	r24, 0x3130
    8b2c:	88 23       	and	r24, r24
    8b2e:	09 f0       	breq	.+2      	; 0x8b32 <__vector_77+0xa80>
    8b30:	aa cb       	rjmp	.-2220   	; 0x8286 <__vector_77+0x1d4>
    8b32:	63 cb       	rjmp	.-2362   	; 0x81fa <__vector_77+0x148>
		Leds_Clear(ext_Green);
		Leds_Clear(ext_Red);

		okToOpenLogFile = true;
		_delay_ms(50);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){								// pause recording
    8b34:	80 91 30 31 	lds	r24, 0x3130
    8b38:	88 23       	and	r24, r24
    8b3a:	09 f4       	brne	.+2      	; 0x8b3e <__vector_77+0xa8c>
    8b3c:	31 cc       	rjmp	.-1950   	; 0x83a0 <__vector_77+0x2ee>
    8b3e:	ae cb       	rjmp	.-2212   	; 0x829c <__vector_77+0x1ea>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8b40:	81 e0       	ldi	r24, 0x01	; 1
    8b42:	15 cc       	rjmp	.-2006   	; 0x836e <__vector_77+0x2bc>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8b44:	e0 e2       	ldi	r30, 0x20	; 32
    8b46:	f6 e0       	ldi	r31, 0x06	; 6
    8b48:	80 e2       	ldi	r24, 0x20	; 32
    8b4a:	85 83       	std	Z+5, r24	; 0x05
    8b4c:	04 c0       	rjmp	.+8      	; 0x8b56 <__vector_77+0xaa4>
    8b4e:	e0 e2       	ldi	r30, 0x20	; 32
    8b50:	f6 e0       	ldi	r31, 0x06	; 6
    8b52:	80 e2       	ldi	r24, 0x20	; 32
    8b54:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8b56:	80 e1       	ldi	r24, 0x10	; 16
    8b58:	85 83       	std	Z+5, r24	; 0x05
    8b5a:	19 cc       	rjmp	.-1998   	; 0x838e <__vector_77+0x2dc>
			chargeComplete = true;
			okToCharge  = false;
		}


		if(SD2_Inserted() && chargeComplete){
    8b5c:	80 91 29 31 	lds	r24, 0x3129
    8b60:	88 23       	and	r24, r24
    8b62:	09 f4       	brne	.+2      	; 0x8b66 <__vector_77+0xab4>
    8b64:	04 cd       	rjmp	.-1528   	; 0x856e <__vector_77+0x4bc>
    8b66:	f1 cc       	rjmp	.-1566   	; 0x854a <__vector_77+0x498>
			display_putString("Ext Charged      ",3,0,System5x7);
			if(!recording){
				Leds_Clear(ext_Red);
				Leds_Set(ext_Green);
			}
		} else if(SD2_Inserted() && !chargeComplete){
    8b68:	80 91 29 31 	lds	r24, 0x3129
    8b6c:	88 23       	and	r24, r24
    8b6e:	09 f0       	breq	.+2      	; 0x8b72 <__vector_77+0xac0>
    8b70:	60 cd       	rjmp	.-1344   	; 0x8632 <__vector_77+0x580>
    8b72:	02 cd       	rjmp	.-1532   	; 0x8578 <__vector_77+0x4c6>
		if(chargePercent == 100){
			chargeComplete = true;
			okToCharge  = false;
		}

		if(SD2_Inserted() && chargeComplete && !recording){
    8b74:	80 91 29 31 	lds	r24, 0x3129
    8b78:	88 23       	and	r24, r24
    8b7a:	09 f4       	brne	.+2      	; 0x8b7e <__vector_77+0xacc>
    8b7c:	7d cf       	rjmp	.-262    	; 0x8a78 <__vector_77+0x9c6>
    8b7e:	73 cf       	rjmp	.-282    	; 0x8a66 <__vector_77+0x9b4>
			Leds_Clear(ext_Red);
			Leds_Set(ext_Green);
		} else if(SD2_Inserted() && !chargeComplete){
    8b80:	80 91 29 31 	lds	r24, 0x3129
    8b84:	88 23       	and	r24, r24
    8b86:	09 f0       	breq	.+2      	; 0x8b8a <__vector_77+0xad8>
    8b88:	a9 cf       	rjmp	.-174    	; 0x8adc <__vector_77+0xa2a>
    8b8a:	7b cf       	rjmp	.-266    	; 0x8a82 <__vector_77+0x9d0>


}


}
    8b8c:	ff 91       	pop	r31
    8b8e:	ef 91       	pop	r30
    8b90:	bf 91       	pop	r27
    8b92:	af 91       	pop	r26
    8b94:	9f 91       	pop	r25
    8b96:	8f 91       	pop	r24
    8b98:	7f 91       	pop	r23
    8b9a:	6f 91       	pop	r22
    8b9c:	5f 91       	pop	r21
    8b9e:	4f 91       	pop	r20
    8ba0:	3f 91       	pop	r19
    8ba2:	2f 91       	pop	r18
    8ba4:	1f 91       	pop	r17
    8ba6:	0f 91       	pop	r16
    8ba8:	ff 90       	pop	r15
    8baa:	ef 90       	pop	r14
    8bac:	cf 90       	pop	r12
    8bae:	0f 90       	pop	r0
    8bb0:	0b be       	out	0x3b, r0	; 59
    8bb2:	0f 90       	pop	r0
    8bb4:	0f be       	out	0x3f, r0	; 63
    8bb6:	0f 90       	pop	r0
    8bb8:	1f 90       	pop	r1
    8bba:	18 95       	reti

00008bbc <Debug_TriggerUpload>:
      to--;
    }
    return false;
}

bool Debug_TriggerUpload(uint32_t size, uint16_t timeOut){
    8bbc:	af 92       	push	r10
    8bbe:	bf 92       	push	r11
    8bc0:	cf 92       	push	r12
    8bc2:	df 92       	push	r13
    8bc4:	ef 92       	push	r14
    8bc6:	ff 92       	push	r15
    8bc8:	0f 93       	push	r16
    8bca:	1f 93       	push	r17
    8bcc:	df 93       	push	r29
    8bce:	cf 93       	push	r28
    8bd0:	cd b7       	in	r28, 0x3d	; 61
    8bd2:	de b7       	in	r29, 0x3e	; 62
    8bd4:	64 97       	sbiw	r28, 0x14	; 20
    8bd6:	cd bf       	out	0x3d, r28	; 61
    8bd8:	de bf       	out	0x3e, r29	; 62
    8bda:	6b 01       	movw	r12, r22
    8bdc:	7c 01       	movw	r14, r24
    8bde:	b4 2e       	mov	r11, r20
    8be0:	a5 2e       	mov	r10, r21
	Debug_Usart.CTRLB |= USART_TXEN_bm;
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	Debug_writeLocation = Debug_readLocation;
    8be2:	80 91 00 31 	lds	r24, 0x3100
    8be6:	90 91 01 31 	lds	r25, 0x3101
    8bea:	80 93 02 31 	sts	0x3102, r24
    8bee:	90 93 03 31 	sts	0x3103, r25
bool Debug_TriggerUpload(uint32_t size, uint16_t timeOut){
   uint16_t to = timeOut;
   char fileSize [20];

   Debug_ClearBuffer();
   Debug_SendByte('U');
    8bf2:	85 e5       	ldi	r24, 0x55	; 85
    8bf4:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>

   sprintf(fileSize, "%12lu",size);
    8bf8:	8d b7       	in	r24, 0x3d	; 61
    8bfa:	9e b7       	in	r25, 0x3e	; 62
    8bfc:	08 97       	sbiw	r24, 0x08	; 8
    8bfe:	8d bf       	out	0x3d, r24	; 61
    8c00:	9e bf       	out	0x3e, r25	; 62
    8c02:	ed b7       	in	r30, 0x3d	; 61
    8c04:	fe b7       	in	r31, 0x3e	; 62
    8c06:	31 96       	adiw	r30, 0x01	; 1
    8c08:	8e 01       	movw	r16, r28
    8c0a:	0f 5f       	subi	r16, 0xFF	; 255
    8c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    8c0e:	ad b7       	in	r26, 0x3d	; 61
    8c10:	be b7       	in	r27, 0x3e	; 62
    8c12:	11 96       	adiw	r26, 0x01	; 1
    8c14:	0d 93       	st	X+, r16
    8c16:	1c 93       	st	X, r17
    8c18:	12 97       	sbiw	r26, 0x02	; 2
    8c1a:	85 e4       	ldi	r24, 0x45	; 69
    8c1c:	92 e2       	ldi	r25, 0x22	; 34
    8c1e:	82 83       	std	Z+2, r24	; 0x02
    8c20:	93 83       	std	Z+3, r25	; 0x03
    8c22:	c4 82       	std	Z+4, r12	; 0x04
    8c24:	d5 82       	std	Z+5, r13	; 0x05
    8c26:	e6 82       	std	Z+6, r14	; 0x06
    8c28:	f7 82       	std	Z+7, r15	; 0x07
    8c2a:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
   Debug_SendString(fileSize,true);
    8c2e:	8d b7       	in	r24, 0x3d	; 61
    8c30:	9e b7       	in	r25, 0x3e	; 62
    8c32:	08 96       	adiw	r24, 0x08	; 8
    8c34:	8d bf       	out	0x3d, r24	; 61
    8c36:	9e bf       	out	0x3e, r25	; 62
    8c38:	c8 01       	movw	r24, r16
    8c3a:	61 e0       	ldi	r22, 0x01	; 1
    8c3c:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
    8c40:	2b 2d       	mov	r18, r11
    8c42:	3a 2d       	mov	r19, r10
    8c44:	c9 01       	movw	r24, r18
    8c46:	ac 01       	movw	r20, r24
    8c48:	66 e6       	ldi	r22, 0x66	; 102
    8c4a:	7e e0       	ldi	r23, 0x0E	; 14
    8c4c:	10 c0       	rjmp	.+32     	; 0x8c6e <Debug_TriggerUpload+0xb2>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    8c4e:	20 91 02 31 	lds	r18, 0x3102
    8c52:	30 91 03 31 	lds	r19, 0x3103
    8c56:	80 91 00 31 	lds	r24, 0x3100
    8c5a:	90 91 01 31 	lds	r25, 0x3101
    8c5e:	28 17       	cp	r18, r24
    8c60:	39 07       	cpc	r19, r25
    8c62:	c1 f4       	brne	.+48     	; 0x8c94 <Debug_TriggerUpload+0xd8>
    8c64:	cb 01       	movw	r24, r22
    8c66:	01 97       	sbiw	r24, 0x01	; 1
    8c68:	f1 f7       	brne	.-4      	; 0x8c66 <Debug_TriggerUpload+0xaa>
         } else {
           return false;
         }
      }
      _delay_ms(1);
      to--;
    8c6a:	41 50       	subi	r20, 0x01	; 1
    8c6c:	50 40       	sbci	r21, 0x00	; 0
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
    8c6e:	41 15       	cp	r20, r1
    8c70:	51 05       	cpc	r21, r1
    8c72:	69 f7       	brne	.-38     	; 0x8c4e <Debug_TriggerUpload+0x92>
    8c74:	90 e0       	ldi	r25, 0x00	; 0
      _delay_ms(1);
      to--;
    }
    return false;

}
    8c76:	89 2f       	mov	r24, r25
    8c78:	64 96       	adiw	r28, 0x14	; 20
    8c7a:	cd bf       	out	0x3d, r28	; 61
    8c7c:	de bf       	out	0x3e, r29	; 62
    8c7e:	cf 91       	pop	r28
    8c80:	df 91       	pop	r29
    8c82:	1f 91       	pop	r17
    8c84:	0f 91       	pop	r16
    8c86:	ff 90       	pop	r15
    8c88:	ef 90       	pop	r14
    8c8a:	df 90       	pop	r13
    8c8c:	cf 90       	pop	r12
    8c8e:	bf 90       	pop	r11
    8c90:	af 90       	pop	r10
    8c92:	08 95       	ret
   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
      if(Debug_CharReadyToRead()){
         if(Debug_GetByte(true) == 'Y'){
    8c94:	81 e0       	ldi	r24, 0x01	; 1
    8c96:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    8c9a:	90 e0       	ldi	r25, 0x00	; 0
    8c9c:	89 35       	cpi	r24, 0x59	; 89
    8c9e:	59 f7       	brne	.-42     	; 0x8c76 <Debug_TriggerUpload+0xba>
    8ca0:	91 e0       	ldi	r25, 0x01	; 1
    8ca2:	e9 cf       	rjmp	.-46     	; 0x8c76 <Debug_TriggerUpload+0xba>

00008ca4 <SD_Open>:

	return tmp;
}


uint8_t SD_Open(char string []){
    8ca4:	cf 93       	push	r28
    8ca6:	df 93       	push	r29
    8ca8:	ec 01       	movw	r28, r24
	//Debug_SendString("File Name= ",false);
	//Debug_SendString(string,true);
	strcpy(currentLogFile,string);
    8caa:	85 e5       	ldi	r24, 0x55	; 85
    8cac:	9a e3       	ldi	r25, 0x3A	; 58
    8cae:	be 01       	movw	r22, r28
    8cb0:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
	strupr(currentLogFile);
    8cb4:	85 e5       	ldi	r24, 0x55	; 85
    8cb6:	9a e3       	ldi	r25, 0x3A	; 58
    8cb8:	0e 94 3b 59 	call	0xb276	; 0xb276 <strupr>
    8cbc:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    8cbe:	a5 e5       	ldi	r26, 0x55	; 85
    8cc0:	ba e3       	ldi	r27, 0x3A	; 58
    8cc2:	07 c0       	rjmp	.+14     	; 0x8cd2 <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    8cc4:	fc 01       	movw	r30, r24
    8cc6:	eb 5a       	subi	r30, 0xAB	; 171
    8cc8:	f5 4c       	sbci	r31, 0xC5	; 197
    8cca:	80 81       	ld	r24, Z
    8ccc:	31 97       	sbiw	r30, 0x01	; 1
    8cce:	80 83       	st	Z, r24
uint8_t SD_Open(char string []){
	//Debug_SendString("File Name= ",false);
	//Debug_SendString(string,true);
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    8cd0:	2f 5f       	subi	r18, 0xFF	; 255
    8cd2:	fd 01       	movw	r30, r26
    8cd4:	01 90       	ld	r0, Z+
    8cd6:	00 20       	and	r0, r0
    8cd8:	e9 f7       	brne	.-6      	; 0x8cd4 <SD_Open+0x30>
    8cda:	31 97       	sbiw	r30, 0x01	; 1
    8cdc:	e5 55       	subi	r30, 0x55	; 85
    8cde:	fa 43       	sbci	r31, 0x3A	; 58
    8ce0:	82 2f       	mov	r24, r18
    8ce2:	90 e0       	ldi	r25, 0x00	; 0
    8ce4:	8e 17       	cp	r24, r30
    8ce6:	9f 07       	cpc	r25, r31
    8ce8:	68 f3       	brcs	.-38     	; 0x8cc4 <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    8cea:	ec 5a       	subi	r30, 0xAC	; 172
    8cec:	f5 4c       	sbci	r31, 0xC5	; 197
    8cee:	10 82       	st	Z, r1
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
    8cf0:	8f e9       	ldi	r24, 0x9F	; 159
    8cf2:	9c e4       	ldi	r25, 0x4C	; 76
    8cf4:	be 01       	movw	r22, r28
    8cf6:	43 e1       	ldi	r20, 0x13	; 19
    8cf8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <f_open>
}
    8cfc:	df 91       	pop	r29
    8cfe:	cf 91       	pop	r28
    8d00:	08 95       	ret

00008d02 <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    8d02:	0f 93       	push	r16
    8d04:	1f 93       	push	r17
    8d06:	cf 93       	push	r28
    8d08:	df 93       	push	r29

	SD_Open("/config.txt");
    8d0a:	8b e4       	ldi	r24, 0x4B	; 75
    8d0c:	92 e2       	ldi	r25, 0x22	; 34
    8d0e:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <SD_Open>
          }
	      //Debug_SendString("User: ",false);
	      //Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
    8d12:	c3 e8       	ldi	r28, 0x83	; 131
    8d14:	d9 e5       	ldi	r29, 0x59	; 89
	      strtok(temp,"=");
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
    8d16:	0b ef       	ldi	r16, 0xFB	; 251
    8d18:	17 e4       	ldi	r17, 0x47	; 71
void Read_config_file(void){

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    8d1a:	87 e9       	ldi	r24, 0x97	; 151
    8d1c:	97 e4       	ldi	r25, 0x47	; 71
    8d1e:	62 e3       	ldi	r22, 0x32	; 50
    8d20:	70 e0       	ldi	r23, 0x00	; 0
    8d22:	4f e9       	ldi	r20, 0x9F	; 159
    8d24:	5c e4       	ldi	r21, 0x4C	; 76
    8d26:	0e 94 80 2a 	call	0x5500	; 0x5500 <f_gets>
	  if(temp[0] != 0){
    8d2a:	80 91 97 47 	lds	r24, 0x4797
    8d2e:	88 23       	and	r24, r24
    8d30:	09 f4       	brne	.+2      	; 0x8d34 <Read_config_file+0x32>
    8d32:	6f c1       	rjmp	.+734    	; 0x9012 <Read_config_file+0x310>
	    if(strstr(temp,"ssid") != 0){
    8d34:	87 e9       	ldi	r24, 0x97	; 151
    8d36:	97 e4       	ldi	r25, 0x47	; 71
    8d38:	67 e5       	ldi	r22, 0x57	; 87
    8d3a:	72 e2       	ldi	r23, 0x22	; 34
    8d3c:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8d40:	00 97       	sbiw	r24, 0x00	; 0
    8d42:	a9 f0       	breq	.+42     	; 0x8d6e <Read_config_file+0x6c>
	      strtok(temp,"=");
    8d44:	87 e9       	ldi	r24, 0x97	; 151
    8d46:	97 e4       	ldi	r25, 0x47	; 71
    8d48:	6c e5       	ldi	r22, 0x5C	; 92
    8d4a:	72 e2       	ldi	r23, 0x22	; 34
    8d4c:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcat(ssid,strtok(NULL,"="));
    8d50:	80 e0       	ldi	r24, 0x00	; 0
    8d52:	90 e0       	ldi	r25, 0x00	; 0
    8d54:	6c e5       	ldi	r22, 0x5C	; 92
    8d56:	72 e2       	ldi	r23, 0x22	; 34
    8d58:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8d5c:	bc 01       	movw	r22, r24
    8d5e:	80 e2       	ldi	r24, 0x20	; 32
    8d60:	9e e2       	ldi	r25, 0x2E	; 46
    8d62:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	      ssidRead = true;
    8d66:	81 e0       	ldi	r24, 0x01	; 1
    8d68:	80 93 50 31 	sts	0x3150, r24
    8d6c:	d6 cf       	rjmp	.-84     	; 0x8d1a <Read_config_file+0x18>
	    } else if(strstr(temp,"phrase") != 0){
    8d6e:	87 e9       	ldi	r24, 0x97	; 151
    8d70:	97 e4       	ldi	r25, 0x47	; 71
    8d72:	6e e5       	ldi	r22, 0x5E	; 94
    8d74:	72 e2       	ldi	r23, 0x22	; 34
    8d76:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8d7a:	00 97       	sbiw	r24, 0x00	; 0
    8d7c:	a9 f0       	breq	.+42     	; 0x8da8 <Read_config_file+0xa6>
	      strtok(temp,"=");
    8d7e:	87 e9       	ldi	r24, 0x97	; 151
    8d80:	97 e4       	ldi	r25, 0x47	; 71
    8d82:	6c e5       	ldi	r22, 0x5C	; 92
    8d84:	72 e2       	ldi	r23, 0x22	; 34
    8d86:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcat(phrase,strtok(NULL,"="));
    8d8a:	80 e0       	ldi	r24, 0x00	; 0
    8d8c:	90 e0       	ldi	r25, 0x00	; 0
    8d8e:	6c e5       	ldi	r22, 0x5C	; 92
    8d90:	72 e2       	ldi	r23, 0x22	; 34
    8d92:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8d96:	bc 01       	movw	r22, r24
    8d98:	8c eb       	ldi	r24, 0xBC	; 188
    8d9a:	9d e2       	ldi	r25, 0x2D	; 45
    8d9c:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	      phraseRead = true;
    8da0:	81 e0       	ldi	r24, 0x01	; 1
    8da2:	80 93 4d 31 	sts	0x314D, r24
    8da6:	b9 cf       	rjmp	.-142    	; 0x8d1a <Read_config_file+0x18>
	    } else if(strstr(temp,"key") != 0){
    8da8:	87 e9       	ldi	r24, 0x97	; 151
    8daa:	97 e4       	ldi	r25, 0x47	; 71
    8dac:	65 e6       	ldi	r22, 0x65	; 101
    8dae:	72 e2       	ldi	r23, 0x22	; 34
    8db0:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8db4:	00 97       	sbiw	r24, 0x00	; 0
    8db6:	a9 f0       	breq	.+42     	; 0x8de2 <Read_config_file+0xe0>
	      strtok(temp,"=");
    8db8:	87 e9       	ldi	r24, 0x97	; 151
    8dba:	97 e4       	ldi	r25, 0x47	; 71
    8dbc:	6c e5       	ldi	r22, 0x5C	; 92
    8dbe:	72 e2       	ldi	r23, 0x22	; 34
    8dc0:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcat(key,strtok(NULL,"="));
    8dc4:	80 e0       	ldi	r24, 0x00	; 0
    8dc6:	90 e0       	ldi	r25, 0x00	; 0
    8dc8:	6c e5       	ldi	r22, 0x5C	; 92
    8dca:	72 e2       	ldi	r23, 0x22	; 34
    8dcc:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8dd0:	bc 01       	movw	r22, r24
    8dd2:	8e ee       	ldi	r24, 0xEE	; 238
    8dd4:	9d e2       	ldi	r25, 0x2D	; 45
    8dd6:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	      keyRead = true;
    8dda:	81 e0       	ldi	r24, 0x01	; 1
    8ddc:	80 93 4e 31 	sts	0x314E, r24
    8de0:	9c cf       	rjmp	.-200    	; 0x8d1a <Read_config_file+0x18>
	    } else if(strstr(temp,"port") != 0){
    8de2:	87 e9       	ldi	r24, 0x97	; 151
    8de4:	97 e4       	ldi	r25, 0x47	; 71
    8de6:	69 e6       	ldi	r22, 0x69	; 105
    8de8:	72 e2       	ldi	r23, 0x22	; 34
    8dea:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8dee:	00 97       	sbiw	r24, 0x00	; 0
    8df0:	a9 f0       	breq	.+42     	; 0x8e1c <Read_config_file+0x11a>
	      strtok(temp,"=");
    8df2:	87 e9       	ldi	r24, 0x97	; 151
    8df4:	97 e4       	ldi	r25, 0x47	; 71
    8df6:	6c e5       	ldi	r22, 0x5C	; 92
    8df8:	72 e2       	ldi	r23, 0x22	; 34
    8dfa:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcpy(port,strtok(NULL,"="));
    8dfe:	80 e0       	ldi	r24, 0x00	; 0
    8e00:	90 e0       	ldi	r25, 0x00	; 0
    8e02:	6c e5       	ldi	r22, 0x5C	; 92
    8e04:	72 e2       	ldi	r23, 0x22	; 34
    8e06:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8e0a:	bc 01       	movw	r22, r24
    8e0c:	81 e5       	ldi	r24, 0x51	; 81
    8e0e:	99 e5       	ldi	r25, 0x59	; 89
    8e10:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
	      portRead = true;
    8e14:	81 e0       	ldi	r24, 0x01	; 1
    8e16:	80 93 4f 31 	sts	0x314F, r24
    8e1a:	7f cf       	rjmp	.-258    	; 0x8d1a <Read_config_file+0x18>
	    } else if(strstr(temp,"auth") != 0){
    8e1c:	87 e9       	ldi	r24, 0x97	; 151
    8e1e:	97 e4       	ldi	r25, 0x47	; 71
    8e20:	6e e6       	ldi	r22, 0x6E	; 110
    8e22:	72 e2       	ldi	r23, 0x22	; 34
    8e24:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8e28:	00 97       	sbiw	r24, 0x00	; 0
    8e2a:	a9 f0       	breq	.+42     	; 0x8e56 <Read_config_file+0x154>
	      strtok(temp,"=");
    8e2c:	87 e9       	ldi	r24, 0x97	; 151
    8e2e:	97 e4       	ldi	r25, 0x47	; 71
    8e30:	6c e5       	ldi	r22, 0x5C	; 92
    8e32:	72 e2       	ldi	r23, 0x22	; 34
    8e34:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcat(auth,strtok(NULL,"="));
    8e38:	80 e0       	ldi	r24, 0x00	; 0
    8e3a:	90 e0       	ldi	r25, 0x00	; 0
    8e3c:	6c e5       	ldi	r22, 0x5C	; 92
    8e3e:	72 e2       	ldi	r23, 0x22	; 34
    8e40:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8e44:	bc 01       	movw	r22, r24
    8e46:	8a e8       	ldi	r24, 0x8A	; 138
    8e48:	9d e2       	ldi	r25, 0x2D	; 45
    8e4a:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	      authRead = true;
    8e4e:	81 e0       	ldi	r24, 0x01	; 1
    8e50:	80 93 4c 31 	sts	0x314C, r24
    8e54:	62 cf       	rjmp	.-316    	; 0x8d1a <Read_config_file+0x18>
	     }else if(strstr(temp,"user") != 0){
    8e56:	87 e9       	ldi	r24, 0x97	; 151
    8e58:	97 e4       	ldi	r25, 0x47	; 71
    8e5a:	63 e7       	ldi	r22, 0x73	; 115
    8e5c:	72 e2       	ldi	r23, 0x22	; 34
    8e5e:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8e62:	00 97       	sbiw	r24, 0x00	; 0
    8e64:	39 f1       	breq	.+78     	; 0x8eb4 <Read_config_file+0x1b2>
	      strtok(temp,"=");
    8e66:	87 e9       	ldi	r24, 0x97	; 151
    8e68:	97 e4       	ldi	r25, 0x47	; 71
    8e6a:	6c e5       	ldi	r22, 0x5C	; 92
    8e6c:	72 e2       	ldi	r23, 0x22	; 34
    8e6e:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcpy(user,strtok(NULL,"="));
    8e72:	80 e0       	ldi	r24, 0x00	; 0
    8e74:	90 e0       	ldi	r25, 0x00	; 0
    8e76:	6c e5       	ldi	r22, 0x5C	; 92
    8e78:	72 e2       	ldi	r23, 0x22	; 34
    8e7a:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8e7e:	bc 01       	movw	r22, r24
    8e80:	8b ef       	ldi	r24, 0xFB	; 251
    8e82:	97 e4       	ldi	r25, 0x47	; 71
    8e84:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
	      for(uint8_t i = 0; i < strlen(user); i++){
    8e88:	f8 01       	movw	r30, r16
    8e8a:	01 90       	ld	r0, Z+
    8e8c:	00 20       	and	r0, r0
    8e8e:	e9 f7       	brne	.-6      	; 0x8e8a <Read_config_file+0x188>
    8e90:	31 97       	sbiw	r30, 0x01	; 1
    8e92:	eb 5f       	subi	r30, 0xFB	; 251
    8e94:	f7 44       	sbci	r31, 0x47	; 71
    8e96:	20 e0       	ldi	r18, 0x00	; 0
    8e98:	07 c0       	rjmp	.+14     	; 0x8ea8 <Read_config_file+0x1a6>
            if(user[i] < ' '){
    8e9a:	dc 01       	movw	r26, r24
    8e9c:	a5 50       	subi	r26, 0x05	; 5
    8e9e:	b8 4b       	sbci	r27, 0xB8	; 184
    8ea0:	8c 91       	ld	r24, X
    8ea2:	80 32       	cpi	r24, 0x20	; 32
    8ea4:	78 f1       	brcs	.+94     	; 0x8f04 <Read_config_file+0x202>
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
	      for(uint8_t i = 0; i < strlen(user); i++){
    8ea6:	2f 5f       	subi	r18, 0xFF	; 255
    8ea8:	82 2f       	mov	r24, r18
    8eaa:	90 e0       	ldi	r25, 0x00	; 0
    8eac:	8e 17       	cp	r24, r30
    8eae:	9f 07       	cpc	r25, r31
    8eb0:	a0 f3       	brcs	.-24     	; 0x8e9a <Read_config_file+0x198>
    8eb2:	33 cf       	rjmp	.-410    	; 0x8d1a <Read_config_file+0x18>
               break;
            }
          }
	      //Debug_SendString("User: ",false);
	      //Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
    8eb4:	87 e9       	ldi	r24, 0x97	; 151
    8eb6:	97 e4       	ldi	r25, 0x47	; 71
    8eb8:	68 e7       	ldi	r22, 0x78	; 120
    8eba:	72 e2       	ldi	r23, 0x22	; 34
    8ebc:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8ec0:	00 97       	sbiw	r24, 0x00	; 0
    8ec2:	49 f1       	breq	.+82     	; 0x8f16 <Read_config_file+0x214>
	      strtok(temp,"=");
    8ec4:	87 e9       	ldi	r24, 0x97	; 151
    8ec6:	97 e4       	ldi	r25, 0x47	; 71
    8ec8:	6c e5       	ldi	r22, 0x5C	; 92
    8eca:	72 e2       	ldi	r23, 0x22	; 34
    8ecc:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcpy(nickname,strtok(NULL,"="));
    8ed0:	80 e0       	ldi	r24, 0x00	; 0
    8ed2:	90 e0       	ldi	r25, 0x00	; 0
    8ed4:	6c e5       	ldi	r22, 0x5C	; 92
    8ed6:	72 e2       	ldi	r23, 0x22	; 34
    8ed8:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8edc:	bc 01       	movw	r22, r24
    8ede:	83 e8       	ldi	r24, 0x83	; 131
    8ee0:	99 e5       	ldi	r25, 0x59	; 89
    8ee2:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
          for(uint8_t i = 0; i < strlen(nickname); i++){
    8ee6:	fe 01       	movw	r30, r28
    8ee8:	01 90       	ld	r0, Z+
    8eea:	00 20       	and	r0, r0
    8eec:	e9 f7       	brne	.-6      	; 0x8ee8 <Read_config_file+0x1e6>
    8eee:	31 97       	sbiw	r30, 0x01	; 1
    8ef0:	e3 58       	subi	r30, 0x83	; 131
    8ef2:	f9 45       	sbci	r31, 0x59	; 89
    8ef4:	20 e0       	ldi	r18, 0x00	; 0
    8ef6:	09 c0       	rjmp	.+18     	; 0x8f0a <Read_config_file+0x208>
            if(nickname[i] < ' '){
    8ef8:	dc 01       	movw	r26, r24
    8efa:	ad 57       	subi	r26, 0x7D	; 125
    8efc:	b6 4a       	sbci	r27, 0xA6	; 166
    8efe:	8c 91       	ld	r24, X
    8f00:	80 32       	cpi	r24, 0x20	; 32
    8f02:	10 f4       	brcc	.+4      	; 0x8f08 <Read_config_file+0x206>
               nickname[i] = 0;
    8f04:	1c 92       	st	X, r1
    8f06:	09 cf       	rjmp	.-494    	; 0x8d1a <Read_config_file+0x18>
	      //Debug_SendString("User: ",false);
	      //Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
          for(uint8_t i = 0; i < strlen(nickname); i++){
    8f08:	2f 5f       	subi	r18, 0xFF	; 255
    8f0a:	82 2f       	mov	r24, r18
    8f0c:	90 e0       	ldi	r25, 0x00	; 0
    8f0e:	8e 17       	cp	r24, r30
    8f10:	9f 07       	cpc	r25, r31
    8f12:	90 f3       	brcs	.-28     	; 0x8ef8 <Read_config_file+0x1f6>
    8f14:	02 cf       	rjmp	.-508    	; 0x8d1a <Read_config_file+0x18>
            }
          }

          //Debug_SendString("Nickname: ",false);
          //Debug_SendString(nickname,true);
	    } else if(strstr(temp,"server") != 0){
    8f16:	87 e9       	ldi	r24, 0x97	; 151
    8f18:	97 e4       	ldi	r25, 0x47	; 71
    8f1a:	61 e8       	ldi	r22, 0x81	; 129
    8f1c:	72 e2       	ldi	r23, 0x22	; 34
    8f1e:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8f22:	00 97       	sbiw	r24, 0x00	; 0
    8f24:	91 f0       	breq	.+36     	; 0x8f4a <Read_config_file+0x248>
	      strtok(temp,"=");
    8f26:	87 e9       	ldi	r24, 0x97	; 151
    8f28:	97 e4       	ldi	r25, 0x47	; 71
    8f2a:	6c e5       	ldi	r22, 0x5C	; 92
    8f2c:	72 e2       	ldi	r23, 0x22	; 34
    8f2e:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcat(serverOpenCommand,strtok(NULL,"="));
    8f32:	80 e0       	ldi	r24, 0x00	; 0
    8f34:	90 e0       	ldi	r25, 0x00	; 0
    8f36:	6c e5       	ldi	r22, 0x5C	; 92
    8f38:	72 e2       	ldi	r23, 0x22	; 34
    8f3a:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8f3e:	bc 01       	movw	r22, r24
    8f40:	82 e5       	ldi	r24, 0x52	; 82
    8f42:	9e e2       	ldi	r25, 0x2E	; 46
    8f44:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
    8f48:	e8 ce       	rjmp	.-560    	; 0x8d1a <Read_config_file+0x18>
        } else if(strstr(temp,"daylightTime") != 0){
    8f4a:	87 e9       	ldi	r24, 0x97	; 151
    8f4c:	97 e4       	ldi	r25, 0x47	; 71
    8f4e:	68 e8       	ldi	r22, 0x88	; 136
    8f50:	72 e2       	ldi	r23, 0x22	; 34
    8f52:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8f56:	00 97       	sbiw	r24, 0x00	; 0
    8f58:	91 f0       	breq	.+36     	; 0x8f7e <Read_config_file+0x27c>
	      strtok(temp,"=");
    8f5a:	87 e9       	ldi	r24, 0x97	; 151
    8f5c:	97 e4       	ldi	r25, 0x47	; 71
    8f5e:	6c e5       	ldi	r22, 0x5C	; 92
    8f60:	72 e2       	ldi	r23, 0x22	; 34
    8f62:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	      strcpy(daylightTime,strtok(NULL,"="));
    8f66:	80 e0       	ldi	r24, 0x00	; 0
    8f68:	90 e0       	ldi	r25, 0x00	; 0
    8f6a:	6c e5       	ldi	r22, 0x5C	; 92
    8f6c:	72 e2       	ldi	r23, 0x22	; 34
    8f6e:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8f72:	bc 01       	movw	r22, r24
    8f74:	84 e6       	ldi	r24, 0x64	; 100
    8f76:	98 e4       	ldi	r25, 0x48	; 72
    8f78:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
    8f7c:	ce ce       	rjmp	.-612    	; 0x8d1a <Read_config_file+0x18>

	    } else if(strstr(temp,"zone") != 0){
    8f7e:	87 e9       	ldi	r24, 0x97	; 151
    8f80:	97 e4       	ldi	r25, 0x47	; 71
    8f82:	65 e9       	ldi	r22, 0x95	; 149
    8f84:	72 e2       	ldi	r23, 0x22	; 34
    8f86:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    8f8a:	00 97       	sbiw	r24, 0x00	; 0
    8f8c:	09 f4       	brne	.+2      	; 0x8f90 <Read_config_file+0x28e>
    8f8e:	c5 ce       	rjmp	.-630    	; 0x8d1a <Read_config_file+0x18>
	      strtok(temp,"=");
    8f90:	87 e9       	ldi	r24, 0x97	; 151
    8f92:	97 e4       	ldi	r25, 0x47	; 71
    8f94:	6c e5       	ldi	r22, 0x5C	; 92
    8f96:	72 e2       	ldi	r23, 0x22	; 34
    8f98:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
          memmove(zone,strtok(NULL,"="),3);
    8f9c:	80 e0       	ldi	r24, 0x00	; 0
    8f9e:	90 e0       	ldi	r25, 0x00	; 0
    8fa0:	6c e5       	ldi	r22, 0x5C	; 92
    8fa2:	72 e2       	ldi	r23, 0x22	; 34
    8fa4:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    8fa8:	bc 01       	movw	r22, r24
    8faa:	84 e8       	ldi	r24, 0x84	; 132
    8fac:	9e e2       	ldi	r25, 0x2E	; 46
    8fae:	43 e0       	ldi	r20, 0x03	; 3
    8fb0:	50 e0       	ldi	r21, 0x00	; 0
    8fb2:	0e 94 95 58 	call	0xb12a	; 0xb12a <memmove>
	      if(strcmp(zone,"EST") == 0){
    8fb6:	84 e8       	ldi	r24, 0x84	; 132
    8fb8:	9e e2       	ldi	r25, 0x2E	; 46
    8fba:	6a e9       	ldi	r22, 0x9A	; 154
    8fbc:	72 e2       	ldi	r23, 0x22	; 34
    8fbe:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strcmp>
    8fc2:	00 97       	sbiw	r24, 0x00	; 0
    8fc4:	11 f4       	brne	.+4      	; 0x8fca <Read_config_file+0x2c8>
	    	  timeZoneShift = 5;
    8fc6:	85 e0       	ldi	r24, 0x05	; 5
    8fc8:	1e c0       	rjmp	.+60     	; 0x9006 <Read_config_file+0x304>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"CST") == 0){
    8fca:	84 e8       	ldi	r24, 0x84	; 132
    8fcc:	9e e2       	ldi	r25, 0x2E	; 46
    8fce:	6e e9       	ldi	r22, 0x9E	; 158
    8fd0:	72 e2       	ldi	r23, 0x22	; 34
    8fd2:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strcmp>
    8fd6:	00 97       	sbiw	r24, 0x00	; 0
    8fd8:	11 f4       	brne	.+4      	; 0x8fde <Read_config_file+0x2dc>
	    	  timeZoneShift = 6;
    8fda:	86 e0       	ldi	r24, 0x06	; 6
    8fdc:	14 c0       	rjmp	.+40     	; 0x9006 <Read_config_file+0x304>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"MST") == 0){
    8fde:	84 e8       	ldi	r24, 0x84	; 132
    8fe0:	9e e2       	ldi	r25, 0x2E	; 46
    8fe2:	62 ea       	ldi	r22, 0xA2	; 162
    8fe4:	72 e2       	ldi	r23, 0x22	; 34
    8fe6:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strcmp>
    8fea:	00 97       	sbiw	r24, 0x00	; 0
    8fec:	11 f4       	brne	.+4      	; 0x8ff2 <Read_config_file+0x2f0>
	    	  timeZoneShift = 7;
    8fee:	87 e0       	ldi	r24, 0x07	; 7
    8ff0:	0a c0       	rjmp	.+20     	; 0x9006 <Read_config_file+0x304>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"PST") == 0){
    8ff2:	84 e8       	ldi	r24, 0x84	; 132
    8ff4:	9e e2       	ldi	r25, 0x2E	; 46
    8ff6:	66 ea       	ldi	r22, 0xA6	; 166
    8ff8:	72 e2       	ldi	r23, 0x22	; 34
    8ffa:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strcmp>
    8ffe:	00 97       	sbiw	r24, 0x00	; 0
    9000:	09 f0       	breq	.+2      	; 0x9004 <Read_config_file+0x302>
    9002:	8b ce       	rjmp	.-746    	; 0x8d1a <Read_config_file+0x18>
	    	  timeZoneShift = 8;
    9004:	88 e0       	ldi	r24, 0x08	; 8
    9006:	80 93 52 31 	sts	0x3152, r24
	    	  zoneChanged = true;
    900a:	81 e0       	ldi	r24, 0x01	; 1
    900c:	80 93 51 31 	sts	0x3151, r24
    9010:	84 ce       	rjmp	.-760    	; 0x8d1a <Read_config_file+0x18>

	  } else {
	    break;
	  }
	}
    serverOpenCommand[strlen(serverOpenCommand)-1] = 0;
    9012:	02 e5       	ldi	r16, 0x52	; 82
    9014:	1e e2       	ldi	r17, 0x2E	; 46
    9016:	f8 01       	movw	r30, r16
    9018:	01 90       	ld	r0, Z+
    901a:	00 20       	and	r0, r0
    901c:	e9 f7       	brne	.-6      	; 0x9018 <Read_config_file+0x316>
    901e:	32 97       	sbiw	r30, 0x02	; 2
    9020:	10 82       	st	Z, r1
	strcat(serverOpenCommand," ");
    9022:	c8 01       	movw	r24, r16
    9024:	6a ea       	ldi	r22, 0xAA	; 170
    9026:	72 e2       	ldi	r23, 0x22	; 34
    9028:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
    strcat(serverOpenCommand,port);
    902c:	c8 01       	movw	r24, r16
    902e:	61 e5       	ldi	r22, 0x51	; 81
    9030:	79 e5       	ldi	r23, 0x59	; 89
    9032:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    9036:	84 e6       	ldi	r24, 0x64	; 100
    9038:	98 e4       	ldi	r25, 0x48	; 72
    903a:	6c ea       	ldi	r22, 0xAC	; 172
    903c:	72 e2       	ldi	r23, 0x22	; 34
    903e:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    9042:	00 97       	sbiw	r24, 0x00	; 0
    9044:	49 f0       	breq	.+18     	; 0x9058 <Read_config_file+0x356>
    9046:	80 91 51 31 	lds	r24, 0x3151
    904a:	88 23       	and	r24, r24
    904c:	29 f0       	breq	.+10     	; 0x9058 <Read_config_file+0x356>
       timeZoneShift--;
    904e:	80 91 52 31 	lds	r24, 0x3152
    9052:	81 50       	subi	r24, 0x01	; 1
    9054:	80 93 52 31 	sts	0x3152, r24
        /*Debug_SendString("Time Zone changed to: ",false);
	    Debug_SendString(zone,true);
        sprintf(temp,"shifted by %u",timeZoneShift);
	    Debug_SendString(temp,true);  */
    }
}
    9058:	df 91       	pop	r29
    905a:	cf 91       	pop	r28
    905c:	1f 91       	pop	r17
    905e:	0f 91       	pop	r16
    9060:	08 95       	ret

00009062 <main>:


// ********************************** Main Program *********************************


int main(void){
    9062:	2f 92       	push	r2
    9064:	3f 92       	push	r3
    9066:	5f 92       	push	r5
    9068:	6f 92       	push	r6
    906a:	7f 92       	push	r7
    906c:	8f 92       	push	r8
    906e:	9f 92       	push	r9
    9070:	af 92       	push	r10
    9072:	bf 92       	push	r11
    9074:	cf 92       	push	r12
    9076:	df 92       	push	r13
    9078:	ef 92       	push	r14
    907a:	ff 92       	push	r15
    907c:	0f 93       	push	r16
    907e:	1f 93       	push	r17
    9080:	df 93       	push	r29
    9082:	cf 93       	push	r28
    9084:	0f 92       	push	r0
    9086:	cd b7       	in	r28, 0x3d	; 61
    9088:	de b7       	in	r29, 0x3e	; 62
    908a:	80 e0       	ldi	r24, 0x00	; 0
    908c:	98 e4       	ldi	r25, 0x48	; 72
    908e:	01 97       	sbiw	r24, 0x01	; 1
    9090:	f1 f7       	brne	.-4      	; 0x908e <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    9092:	0e 94 8c 39 	call	0x7318	; 0x7318 <Clock_Init>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    9096:	8f b7       	in	r24, 0x3f	; 63
    9098:	89 83       	std	Y+1, r24	; 0x01
    cli();
    909a:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    909c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    909e:	21 e0       	ldi	r18, 0x01	; 1
    90a0:	86 e9       	ldi	r24, 0x96	; 150
    90a2:	90 e0       	ldi	r25, 0x00	; 0
    90a4:	fc 01       	movw	r30, r24
    90a6:	08 ed       	ldi	r16, 0xD8	; 216
    90a8:	04 bf       	out	0x34, r16	; 52
    90aa:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    90ac:	89 81       	ldd	r24, Y+1	; 0x01
    90ae:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();

	getDeviceID();
    90b0:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <getDeviceID>
	display_init();
    90b4:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <display_init>

	Time_Init();
    90b8:	0e 94 1c 30 	call	0x6038	; 0x6038 <Time_Init>
	Sensors_Init();
    90bc:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    90c0:	80 91 21 06 	lds	r24, 0x0621
    90c4:	83 6f       	ori	r24, 0xF3	; 243
    90c6:	e0 e2       	ldi	r30, 0x20	; 32
    90c8:	f6 e0       	ldi	r31, 0x06	; 6
    90ca:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    90cc:	0e 94 4e 03 	call	0x69c	; 0x69c <Dpad_Init>
	Debug_Init();
    90d0:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	Rs232_Init();
    90d4:	0e 94 9a 03 	call	0x734	; 0x734 <Rs232_Init>

	Light_Init(LightAddress);
    90d8:	82 e7       	ldi	r24, 0x72	; 114
    90da:	0e 94 cf 32 	call	0x659e	; 0x659e <Light_Init>


	Display_BackgroundWriter_Init();
    90de:	0e 94 f5 39 	call	0x73ea	; 0x73ea <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    90e2:	0e 94 04 3a 	call	0x7408	; 0x7408 <SD_BackroundWriter_Init>
	DMA_Init();
    90e6:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <DMA_Init>


	//Debug_SendString("booting up...",true);

	display_putString("   BaseStation   ",1,0,System5x7);
    90ea:	81 eb       	ldi	r24, 0xB1	; 177
    90ec:	92 e2       	ldi	r25, 0x22	; 34
    90ee:	61 e0       	ldi	r22, 0x01	; 1
    90f0:	40 e0       	ldi	r20, 0x00	; 0
    90f2:	2a e9       	ldi	r18, 0x9A	; 154
    90f4:	3e e2       	ldi	r19, 0x2E	; 46
    90f6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	strcat(temp,"  Hardware: v");
    90fa:	87 e9       	ldi	r24, 0x97	; 151
    90fc:	97 e4       	ldi	r25, 0x47	; 71
    90fe:	63 ec       	ldi	r22, 0xC3	; 195
    9100:	72 e2       	ldi	r23, 0x22	; 34
    9102:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	strcat(temp,HardwareVersion);
    9106:	87 e9       	ldi	r24, 0x97	; 151
    9108:	97 e4       	ldi	r25, 0x47	; 71
    910a:	61 ed       	ldi	r22, 0xD1	; 209
    910c:	72 e2       	ldi	r23, 0x22	; 34
    910e:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	display_putString(temp,3,0,System5x7);
    9112:	87 e9       	ldi	r24, 0x97	; 151
    9114:	97 e4       	ldi	r25, 0x47	; 71
    9116:	63 e0       	ldi	r22, 0x03	; 3
    9118:	40 e0       	ldi	r20, 0x00	; 0
    911a:	2a e9       	ldi	r18, 0x9A	; 154
    911c:	3e e2       	ldi	r19, 0x2E	; 46
    911e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	temp[0] = 0;
    9122:	10 92 97 47 	sts	0x4797, r1
	strcat(temp," Firmware: v");
    9126:	87 e9       	ldi	r24, 0x97	; 151
    9128:	97 e4       	ldi	r25, 0x47	; 71
    912a:	63 ed       	ldi	r22, 0xD3	; 211
    912c:	72 e2       	ldi	r23, 0x22	; 34
    912e:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	strcat(temp,FirmwareVersion);
    9132:	87 e9       	ldi	r24, 0x97	; 151
    9134:	97 e4       	ldi	r25, 0x47	; 71
    9136:	60 ee       	ldi	r22, 0xE0	; 224
    9138:	72 e2       	ldi	r23, 0x22	; 34
    913a:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
	display_putString(temp,5,0,System5x7);
    913e:	87 e9       	ldi	r24, 0x97	; 151
    9140:	97 e4       	ldi	r25, 0x47	; 71
    9142:	65 e0       	ldi	r22, 0x05	; 5
    9144:	40 e0       	ldi	r20, 0x00	; 0
    9146:	2a e9       	ldi	r18, 0x9A	; 154
    9148:	3e e2       	ldi	r19, 0x2E	; 46
    914a:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	display_writeBufferToScreen();
    914e:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
	if(demoMode){
    9152:	80 91 96 31 	lds	r24, 0x3196
    9156:	88 23       	and	r24, r24
    9158:	41 f0       	breq	.+16     	; 0x916a <main+0x108>
		display_putString("    Demo Mode    ",7,0,System5x7);
    915a:	85 ee       	ldi	r24, 0xE5	; 229
    915c:	92 e2       	ldi	r25, 0x22	; 34
    915e:	67 e0       	ldi	r22, 0x07	; 7
    9160:	40 e0       	ldi	r20, 0x00	; 0
    9162:	2a e9       	ldi	r18, 0x9A	; 154
    9164:	3e e2       	ldi	r19, 0x2E	; 46
    9166:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	}
	display_writeBufferToScreen();
    916a:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    916e:	80 e2       	ldi	r24, 0x20	; 32
    9170:	9e e4       	ldi	r25, 0x4E	; 78
    9172:	20 e7       	ldi	r18, 0x70	; 112
    9174:	31 e0       	ldi	r19, 0x01	; 1
    9176:	f9 01       	movw	r30, r18
    9178:	31 97       	sbiw	r30, 0x01	; 1
    917a:	f1 f7       	brne	.-4      	; 0x9178 <main+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    917c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    917e:	d9 f7       	brne	.-10     	; 0x9176 <main+0x114>
	_delay_ms(2000);


    SD_Init();
    9180:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <SD_Init>
		
}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    9184:	80 91 a2 00 	lds	r24, 0x00A2
    9188:	87 60       	ori	r24, 0x07	; 7
    918a:	e0 ea       	ldi	r30, 0xA0	; 160
    918c:	f0 e0       	ldi	r31, 0x00	; 0
    918e:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    9190:	78 94       	sei
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    9192:	a0 e2       	ldi	r26, 0x20	; 32
    9194:	b6 e0       	ldi	r27, 0x06	; 6
    9196:	42 e0       	ldi	r20, 0x02	; 2
    9198:	20 e7       	ldi	r18, 0x70	; 112
    919a:	31 e0       	ldi	r19, 0x01	; 1
    919c:	05 c0       	rjmp	.+10     	; 0x91a8 <main+0x146>
    919e:	f9 01       	movw	r30, r18
    91a0:	31 97       	sbiw	r30, 0x01	; 1
    91a2:	f1 f7       	brne	.-4      	; 0x91a0 <main+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    91a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    91a6:	d9 f7       	brne	.-10     	; 0x919e <main+0x13c>
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    91a8:	80 91 a8 06 	lds	r24, 0x06A8
    91ac:	80 ff       	sbrs	r24, 0
    91ae:	7a c4       	rjmp	.+2292   	; 0x9aa4 <main+0xa42>
    91b0:	17 96       	adiw	r26, 0x07	; 7
    91b2:	4c 93       	st	X, r20
    91b4:	17 97       	sbiw	r26, 0x07	; 7
    91b6:	88 e8       	ldi	r24, 0x88	; 136
    91b8:	93 e1       	ldi	r25, 0x13	; 19
    91ba:	f1 cf       	rjmp	.-30     	; 0x919e <main+0x13c>
    91bc:	ca 01       	movw	r24, r20
    91be:	01 97       	sbiw	r24, 0x01	; 1
    91c0:	f1 f7       	brne	.-4      	; 0x91be <main+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    91c2:	21 50       	subi	r18, 0x01	; 1
    91c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    91c6:	d1 f7       	brne	.-12     	; 0x91bc <main+0x15a>
	}
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);

	Read_config_file();
    91c8:	0e 94 81 46 	call	0x8d02	; 0x8d02 <Read_config_file>


    Wifi_Init(9600);
    91cc:	60 e8       	ldi	r22, 0x80	; 128
    91ce:	75 e2       	ldi	r23, 0x25	; 37
    91d0:	80 e0       	ldi	r24, 0x00	; 0
    91d2:	90 e0       	ldi	r25, 0x00	; 0
    91d4:	0e 94 a1 02 	call	0x542	; 0x542 <Wifi_Init>
    needToChangeBaud = true;
    91d8:	81 e0       	ldi	r24, 0x01	; 1
    91da:	80 93 63 48 	sts	0x4863, r24
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    91de:	80 e8       	ldi	r24, 0x80	; 128
    91e0:	e0 e2       	ldi	r30, 0x20	; 32
    91e2:	f6 e0       	ldi	r31, 0x06	; 6
    91e4:	85 83       	std	Z+5, r24	; 0x05
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    91e6:	00 e2       	ldi	r16, 0x20	; 32
    91e8:	16 e0       	ldi	r17, 0x06	; 6
    91ea:	f0 e8       	ldi	r31, 0x80	; 128
    91ec:	cf 2e       	mov	r12, r31
    91ee:	e0 e7       	ldi	r30, 0x70	; 112
    91f0:	ee 2e       	mov	r14, r30
    91f2:	e1 e0       	ldi	r30, 0x01	; 1
    91f4:	fe 2e       	mov	r15, r30
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    91f6:	70 e4       	ldi	r23, 0x40	; 64
    91f8:	b7 2e       	mov	r11, r23
		if(Debug_Connected(500)){
		   _delay_ms(500);
		   UNIX_time = Debug_GetTime(1000);
		   Leds_Set(wifi_Green);
		   Leds_Clear(wifi_Red);
		   timeIsValid = true;
    91fa:	dd 24       	eor	r13, r13
    91fc:	d3 94       	inc	r13
    91fe:	26 c0       	rjmp	.+76     	; 0x924c <main+0x1ea>
    Leds_Set(wifi_Red);

	while(!connected && !demoMode){
		//Config_Wifi();
	    //_delay_ms(500);
		if(Debug_Connected(500)){
    9200:	84 ef       	ldi	r24, 0xF4	; 244
    9202:	91 e0       	ldi	r25, 0x01	; 1
    9204:	0e 94 11 02 	call	0x422	; 0x422 <Debug_Connected>
    9208:	88 23       	and	r24, r24
    920a:	f1 f0       	breq	.+60     	; 0x9248 <main+0x1e6>
    920c:	88 e8       	ldi	r24, 0x88	; 136
    920e:	93 e1       	ldi	r25, 0x13	; 19
    9210:	f7 01       	movw	r30, r14
    9212:	31 97       	sbiw	r30, 0x01	; 1
    9214:	f1 f7       	brne	.-4      	; 0x9212 <main+0x1b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9218:	d9 f7       	brne	.-10     	; 0x9210 <main+0x1ae>
		   _delay_ms(500);
		   UNIX_time = Debug_GetTime(1000);
    921a:	88 ee       	ldi	r24, 0xE8	; 232
    921c:	93 e0       	ldi	r25, 0x03	; 3
    921e:	0e 94 b8 01 	call	0x370	; 0x370 <Debug_GetTime>
    9222:	60 93 2b 31 	sts	0x312B, r22
    9226:	70 93 2c 31 	sts	0x312C, r23
    922a:	80 93 2d 31 	sts	0x312D, r24
    922e:	90 93 2e 31 	sts	0x312E, r25
    9232:	d8 01       	movw	r26, r16
    9234:	15 96       	adiw	r26, 0x05	; 5
    9236:	bc 92       	st	X, r11
    9238:	15 97       	sbiw	r26, 0x05	; 5
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    923a:	16 96       	adiw	r26, 0x06	; 6
    923c:	cc 92       	st	X, r12
		   Leds_Set(wifi_Green);
		   Leds_Clear(wifi_Red);
		   timeIsValid = true;
    923e:	d0 92 6c 31 	sts	0x316C, r13
		   connected = true;
    9242:	d0 92 14 31 	sts	0x3114, r13
    9246:	02 c0       	rjmp	.+4      	; 0x924c <main+0x1ea>
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    9248:	f8 01       	movw	r30, r16
    924a:	c7 82       	std	Z+7, r12	; 0x07
    needToChangeBaud = true;


    Leds_Set(wifi_Red);

	while(!connected && !demoMode){
    924c:	80 91 14 31 	lds	r24, 0x3114
    9250:	88 23       	and	r24, r24
    9252:	21 f4       	brne	.+8      	; 0x925c <main+0x1fa>
    9254:	80 91 96 31 	lds	r24, 0x3196
    9258:	88 23       	and	r24, r24
    925a:	91 f2       	breq	.-92     	; 0x9200 <main+0x19e>
		} else {
		   Leds_Toggle(wifi_Red);
		}
	}
	
	if(demoMode){
    925c:	80 91 96 31 	lds	r24, 0x3196
    9260:	88 23       	and	r24, r24
    9262:	21 f0       	breq	.+8      	; 0x926c <main+0x20a>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9264:	80 e4       	ldi	r24, 0x40	; 64
    9266:	e0 e2       	ldi	r30, 0x20	; 32
    9268:	f6 e0       	ldi	r31, 0x06	; 6
    926a:	85 83       	std	Z+5, r24	; 0x05
    926c:	88 e8       	ldi	r24, 0x88	; 136
    926e:	93 e1       	ldi	r25, 0x13	; 19
    9270:	20 e7       	ldi	r18, 0x70	; 112
    9272:	31 e0       	ldi	r19, 0x01	; 1
    9274:	f9 01       	movw	r30, r18
    9276:	31 97       	sbiw	r30, 0x01	; 1
    9278:	f1 f7       	brne	.-4      	; 0x9276 <main+0x214>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    927a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    927c:	d9 f7       	brne	.-10     	; 0x9274 <main+0x212>


	_delay_ms(500);

	
	display_clearBuffer();
    927e:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearBuffer>
	display_writeBufferToScreen();
    9282:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>

    signalStrength = 100;
    9286:	84 e6       	ldi	r24, 0x64	; 100
    9288:	80 93 57 31 	sts	0x3157, r24
	okToDisplayGUI = true;
    928c:	81 e0       	ldi	r24, 0x01	; 1
    928e:	80 93 5e 31 	sts	0x315E, r24


	okToOpenLogFile = true;
    9292:	80 93 5b 31 	sts	0x315B, r24
	while(!recording);
    9296:	80 91 30 31 	lds	r24, 0x3130
    929a:	88 23       	and	r24, r24
    929c:	e1 f3       	breq	.-8      	; 0x9296 <main+0x234>
    929e:	88 ee       	ldi	r24, 0xE8	; 232
    92a0:	93 e0       	ldi	r25, 0x03	; 3
    92a2:	20 e7       	ldi	r18, 0x70	; 112
    92a4:	31 e0       	ldi	r19, 0x01	; 1
    92a6:	f9 01       	movw	r30, r18
    92a8:	31 97       	sbiw	r30, 0x01	; 1
    92aa:	f1 f7       	brne	.-4      	; 0x92a8 <main+0x246>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    92ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    92ae:	d9 f7       	brne	.-10     	; 0x92a6 <main+0x244>


	_delay_ms(100);

	okToReopenDirectory = true;
    92b0:	81 e0       	ldi	r24, 0x01	; 1
    92b2:	80 93 60 31 	sts	0x3160, r24
	okToFindFileToUpload = true;
    92b6:	80 93 5f 31 	sts	0x315F, r24

    while(demoMode);
    92ba:	80 91 96 31 	lds	r24, 0x3196
    92be:	88 23       	and	r24, r24
    92c0:	09 f0       	breq	.+2      	; 0x92c4 <main+0x262>
    92c2:	2e c4       	rjmp	.+2140   	; 0x9b20 <main+0xabe>
    92c4:	60 e7       	ldi	r22, 0x70	; 112
    92c6:	66 2e       	mov	r6, r22
    92c8:	61 e0       	ldi	r22, 0x01	; 1
    92ca:	76 2e       	mov	r7, r22

            uploadTimeStart = UNIX_time;
            //Debug_SendString("Sending...", true);


            memmove(temp,strtok(fileToUpload,"/"),12);
    92cc:	57 e9       	ldi	r21, 0x97	; 151
    92ce:	25 2e       	mov	r2, r21
    92d0:	57 e4       	ldi	r21, 0x47	; 71
    92d2:	35 2e       	mov	r3, r21
    while(demoMode);


	while(true){

	    if(ssRefreshCounter > 5000){
    92d4:	80 91 55 31 	lds	r24, 0x3155
    92d8:	90 91 56 31 	lds	r25, 0x3156
    92dc:	89 58       	subi	r24, 0x89	; 137
    92de:	93 41       	sbci	r25, 0x13	; 19
    92e0:	38 f1       	brcs	.+78     	; 0x9330 <main+0x2ce>
	       okToGetRemainingSpace = true;
    92e2:	81 e0       	ldi	r24, 0x01	; 1
    92e4:	80 93 8b 48 	sts	0x488B, r24
	       while(!okToGetRemainingSpace);
    92e8:	80 91 8b 48 	lds	r24, 0x488B
    92ec:	88 23       	and	r24, r24
    92ee:	e1 f3       	breq	.-8      	; 0x92e8 <main+0x286>
		        _delay_ms(500);
		    }
		    Wifi_ExitCMDMode(500);*/


            if(Debug_Connected(500)){
    92f0:	84 ef       	ldi	r24, 0xF4	; 244
    92f2:	91 e0       	ldi	r25, 0x01	; 1
    92f4:	0e 94 11 02 	call	0x422	; 0x422 <Debug_Connected>
    92f8:	88 23       	and	r24, r24
    92fa:	b1 f0       	breq	.+44     	; 0x9328 <main+0x2c6>
    92fc:	88 e8       	ldi	r24, 0x88	; 136
    92fe:	93 e1       	ldi	r25, 0x13	; 19
    9300:	f3 01       	movw	r30, r6
    9302:	31 97       	sbiw	r30, 0x01	; 1
    9304:	f1 f7       	brne	.-4      	; 0x9302 <main+0x2a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9306:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9308:	d9 f7       	brne	.-10     	; 0x9300 <main+0x29e>
		        _delay_ms(500);
		        UNIX_time = Debug_GetTime(1000);
    930a:	88 ee       	ldi	r24, 0xE8	; 232
    930c:	93 e0       	ldi	r25, 0x03	; 3
    930e:	0e 94 b8 01 	call	0x370	; 0x370 <Debug_GetTime>
    9312:	60 93 2b 31 	sts	0x312B, r22
    9316:	70 93 2c 31 	sts	0x312C, r23
    931a:	80 93 2d 31 	sts	0x312D, r24
    931e:	90 93 2e 31 	sts	0x312E, r25
		        timeIsValid = true;
    9322:	81 e0       	ldi	r24, 0x01	; 1
    9324:	80 93 6c 31 	sts	0x316C, r24
		    }
		    ssRefreshCounter = 0;
    9328:	10 92 55 31 	sts	0x3155, r1
    932c:	10 92 56 31 	sts	0x3156, r1
    9330:	80 e5       	ldi	r24, 0x50	; 80
    9332:	93 ec       	ldi	r25, 0xC3	; 195
    9334:	f3 01       	movw	r30, r6
    9336:	31 97       	sbiw	r30, 0x01	; 1
    9338:	f1 f7       	brne	.-4      	; 0x9336 <main+0x2d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    933a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    933c:	d9 f7       	brne	.-10     	; 0x9334 <main+0x2d2>


        _delay_ms(5000);
        //if(okToUpload && Wifi_Connected(500)){

        if(okToUpload && Debug_Connected(500)){
    933e:	80 91 65 31 	lds	r24, 0x3165
    9342:	88 23       	and	r24, r24
    9344:	09 f4       	brne	.+2      	; 0x9348 <main+0x2e6>
    9346:	c6 cf       	rjmp	.-116    	; 0x92d4 <main+0x272>
    9348:	84 ef       	ldi	r24, 0xF4	; 244
    934a:	91 e0       	ldi	r25, 0x01	; 1
    934c:	0e 94 11 02 	call	0x422	; 0x422 <Debug_Connected>
    9350:	88 23       	and	r24, r24
    9352:	09 f4       	brne	.+2      	; 0x9356 <main+0x2f4>
    9354:	bf cf       	rjmp	.-130    	; 0x92d4 <main+0x272>

            uploading = true;
    9356:	81 e0       	ldi	r24, 0x01	; 1
    9358:	80 93 66 31 	sts	0x3166, r24
			//Debug_SendString("",true);
            //Debug_SendString("_____________________________________________", true);
			//Debug_SendString("Uploading File: ", false);
			if(fileToUpload[0] != '/'){
    935c:	80 91 ee 39 	lds	r24, 0x39EE
    9360:	8f 32       	cpi	r24, 0x2F	; 47
    9362:	91 f0       	breq	.+36     	; 0x9388 <main+0x326>
			    strcpy(newFileName, "/");
    9364:	88 e6       	ldi	r24, 0x68	; 104
    9366:	94 e5       	ldi	r25, 0x54	; 84
    9368:	67 ef       	ldi	r22, 0xF7	; 247
    936a:	72 e2       	ldi	r23, 0x22	; 34
    936c:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
			    strcat(newFileName, fileToUpload);
    9370:	88 e6       	ldi	r24, 0x68	; 104
    9372:	94 e5       	ldi	r25, 0x54	; 84
    9374:	6e ee       	ldi	r22, 0xEE	; 238
    9376:	79 e3       	ldi	r23, 0x39	; 57
    9378:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
			    strcpy(fileToUpload, newFileName);
    937c:	8e ee       	ldi	r24, 0xEE	; 238
    937e:	99 e3       	ldi	r25, 0x39	; 57
    9380:	68 e6       	ldi	r22, 0x68	; 104
    9382:	74 e5       	ldi	r23, 0x54	; 84
    9384:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
			}
			//Debug_SendString(fileToUpload, true);
            okToOpenFileToUpload = true;
    9388:	81 e0       	ldi	r24, 0x01	; 1
    938a:	80 93 68 31 	sts	0x3168, r24
            while(!uploadFileOpened);
    938e:	80 91 98 2e 	lds	r24, 0x2E98
    9392:	88 23       	and	r24, r24
    9394:	e1 f3       	breq	.-8      	; 0x938e <main+0x32c>
    9396:	80 e2       	ldi	r24, 0x20	; 32
    9398:	9e e4       	ldi	r25, 0x4E	; 78
    939a:	f3 01       	movw	r30, r6
    939c:	31 97       	sbiw	r30, 0x01	; 1
    939e:	f1 f7       	brne	.-4      	; 0x939c <main+0x33a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    93a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    93a2:	d9 f7       	brne	.-10     	; 0x939a <main+0x338>

            //Debug_SendString("File Opened!", true);
            //sprintf(temp,"File Size: %lu",uploadFileSize);
            //Debug_SendString(temp, true);

            numberOfPacketsToUpload = uploadFileSize /  1000;
    93a4:	60 91 6f 31 	lds	r22, 0x316F
    93a8:	70 91 70 31 	lds	r23, 0x3170
    93ac:	80 91 71 31 	lds	r24, 0x3171
    93b0:	90 91 72 31 	lds	r25, 0x3172
    93b4:	28 ee       	ldi	r18, 0xE8	; 232
    93b6:	33 e0       	ldi	r19, 0x03	; 3
    93b8:	40 e0       	ldi	r20, 0x00	; 0
    93ba:	50 e0       	ldi	r21, 0x00	; 0
    93bc:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    93c0:	c9 01       	movw	r24, r18
    93c2:	da 01       	movw	r26, r20
    93c4:	80 93 77 31 	sts	0x3177, r24
    93c8:	90 93 78 31 	sts	0x3178, r25
    93cc:	a0 93 79 31 	sts	0x3179, r26
    93d0:	b0 93 7a 31 	sts	0x317A, r27
            leftOverBytesToUpload   = uploadFileSize %  1000;
    93d4:	60 91 6f 31 	lds	r22, 0x316F
    93d8:	70 91 70 31 	lds	r23, 0x3170
    93dc:	80 91 71 31 	lds	r24, 0x3171
    93e0:	90 91 72 31 	lds	r25, 0x3172
    93e4:	28 ee       	ldi	r18, 0xE8	; 232
    93e6:	33 e0       	ldi	r19, 0x03	; 3
    93e8:	40 e0       	ldi	r20, 0x00	; 0
    93ea:	50 e0       	ldi	r21, 0x00	; 0
    93ec:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    93f0:	9b 01       	movw	r18, r22
    93f2:	ac 01       	movw	r20, r24
    93f4:	20 93 7b 31 	sts	0x317B, r18
    93f8:	30 93 7c 31 	sts	0x317C, r19
    93fc:	40 93 7d 31 	sts	0x317D, r20
    9400:	50 93 7e 31 	sts	0x317E, r21
                Wifi_ExitCMDMode(500);
                _delay_ms(10000);
                goto Open_Connection;
            }                       */

            uploadTimeStart = UNIX_time;
    9404:	80 91 2b 31 	lds	r24, 0x312B
    9408:	90 91 2c 31 	lds	r25, 0x312C
    940c:	a0 91 2d 31 	lds	r26, 0x312D
    9410:	b0 91 2e 31 	lds	r27, 0x312E
    9414:	80 93 0b 3a 	sts	0x3A0B, r24
    9418:	90 93 0c 3a 	sts	0x3A0C, r25
    941c:	a0 93 0d 3a 	sts	0x3A0D, r26
    9420:	b0 93 0e 3a 	sts	0x3A0E, r27
            //Debug_SendString("Sending...", true);


            memmove(temp,strtok(fileToUpload,"/"),12);
    9424:	8e ee       	ldi	r24, 0xEE	; 238
    9426:	99 e3       	ldi	r25, 0x39	; 57
    9428:	67 ef       	ldi	r22, 0xF7	; 247
    942a:	72 e2       	ldi	r23, 0x22	; 34
    942c:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    9430:	bc 01       	movw	r22, r24
    9432:	87 e9       	ldi	r24, 0x97	; 151
    9434:	97 e4       	ldi	r25, 0x47	; 71
    9436:	4c e0       	ldi	r20, 0x0C	; 12
    9438:	50 e0       	ldi	r21, 0x00	; 0
    943a:	0e 94 95 58 	call	0xb12a	; 0xb12a <memmove>
            memmove(fileToUpload,temp,12);
    943e:	8e ee       	ldi	r24, 0xEE	; 238
    9440:	99 e3       	ldi	r25, 0x39	; 57
    9442:	67 e9       	ldi	r22, 0x97	; 151
    9444:	77 e4       	ldi	r23, 0x47	; 71
    9446:	4c e0       	ldi	r20, 0x0C	; 12
    9448:	50 e0       	ldi	r21, 0x00	; 0
    944a:	0e 94 95 58 	call	0xb12a	; 0xb12a <memmove>

            uploadHeaderSize = 175;
    944e:	8f ea       	ldi	r24, 0xAF	; 175
    9450:	90 e0       	ldi	r25, 0x00	; 0
    9452:	a0 e0       	ldi	r26, 0x00	; 0
    9454:	b0 e0       	ldi	r27, 0x00	; 0
    9456:	80 93 73 31 	sts	0x3173, r24
    945a:	90 93 74 31 	sts	0x3174, r25
    945e:	a0 93 75 31 	sts	0x3175, r26
    9462:	b0 93 76 31 	sts	0x3176, r27
            uploadHeaderSize += strlen(user);
    9466:	20 91 73 31 	lds	r18, 0x3173
    946a:	30 91 74 31 	lds	r19, 0x3174
    946e:	40 91 75 31 	lds	r20, 0x3175
    9472:	50 91 76 31 	lds	r21, 0x3176
    9476:	ab ef       	ldi	r26, 0xFB	; 251
    9478:	b7 e4       	ldi	r27, 0x47	; 71
    947a:	0d 90       	ld	r0, X+
    947c:	00 20       	and	r0, r0
    947e:	e9 f7       	brne	.-6      	; 0x947a <main+0x418>
    9480:	cd 01       	movw	r24, r26
    9482:	01 97       	sbiw	r24, 0x01	; 1
    9484:	8b 5f       	subi	r24, 0xFB	; 251
    9486:	97 44       	sbci	r25, 0x47	; 71
    9488:	a0 e0       	ldi	r26, 0x00	; 0
    948a:	b0 e0       	ldi	r27, 0x00	; 0
    948c:	82 0f       	add	r24, r18
    948e:	93 1f       	adc	r25, r19
    9490:	a4 1f       	adc	r26, r20
    9492:	b5 1f       	adc	r27, r21
    9494:	80 93 73 31 	sts	0x3173, r24
    9498:	90 93 74 31 	sts	0x3174, r25
    949c:	a0 93 75 31 	sts	0x3175, r26
    94a0:	b0 93 76 31 	sts	0x3176, r27
            uploadHeaderSize += strlen(fileToUpload);
    94a4:	20 91 73 31 	lds	r18, 0x3173
    94a8:	30 91 74 31 	lds	r19, 0x3174
    94ac:	40 91 75 31 	lds	r20, 0x3175
    94b0:	50 91 76 31 	lds	r21, 0x3176
    94b4:	ee ee       	ldi	r30, 0xEE	; 238
    94b6:	f9 e3       	ldi	r31, 0x39	; 57
    94b8:	01 90       	ld	r0, Z+
    94ba:	00 20       	and	r0, r0
    94bc:	e9 f7       	brne	.-6      	; 0x94b8 <main+0x456>
    94be:	cf 01       	movw	r24, r30
    94c0:	01 97       	sbiw	r24, 0x01	; 1
    94c2:	8e 5e       	subi	r24, 0xEE	; 238
    94c4:	99 43       	sbci	r25, 0x39	; 57
    94c6:	a0 e0       	ldi	r26, 0x00	; 0
    94c8:	b0 e0       	ldi	r27, 0x00	; 0
    94ca:	82 0f       	add	r24, r18
    94cc:	93 1f       	adc	r25, r19
    94ce:	a4 1f       	adc	r26, r20
    94d0:	b5 1f       	adc	r27, r21
    94d2:	80 93 73 31 	sts	0x3173, r24
    94d6:	90 93 74 31 	sts	0x3174, r25
    94da:	a0 93 75 31 	sts	0x3175, r26
    94de:	b0 93 76 31 	sts	0x3176, r27
            uploadHeaderSize += strlen(nickname);
    94e2:	20 91 73 31 	lds	r18, 0x3173
    94e6:	30 91 74 31 	lds	r19, 0x3174
    94ea:	40 91 75 31 	lds	r20, 0x3175
    94ee:	50 91 76 31 	lds	r21, 0x3176
    94f2:	a3 e8       	ldi	r26, 0x83	; 131
    94f4:	b9 e5       	ldi	r27, 0x59	; 89
    94f6:	0d 90       	ld	r0, X+
    94f8:	00 20       	and	r0, r0
    94fa:	e9 f7       	brne	.-6      	; 0x94f6 <main+0x494>
    94fc:	cd 01       	movw	r24, r26
    94fe:	01 97       	sbiw	r24, 0x01	; 1
    9500:	83 58       	subi	r24, 0x83	; 131
    9502:	99 45       	sbci	r25, 0x59	; 89
    9504:	a0 e0       	ldi	r26, 0x00	; 0
    9506:	b0 e0       	ldi	r27, 0x00	; 0
    9508:	82 0f       	add	r24, r18
    950a:	93 1f       	adc	r25, r19
    950c:	a4 1f       	adc	r26, r20
    950e:	b5 1f       	adc	r27, r21
    9510:	80 93 73 31 	sts	0x3173, r24
    9514:	90 93 74 31 	sts	0x3174, r25
    9518:	a0 93 75 31 	sts	0x3175, r26
    951c:	b0 93 76 31 	sts	0x3176, r27
            uploadHeaderSize += strlen(ltoa(uploadFileSize,temp,10));
    9520:	e0 90 73 31 	lds	r14, 0x3173
    9524:	f0 90 74 31 	lds	r15, 0x3174
    9528:	00 91 75 31 	lds	r16, 0x3175
    952c:	10 91 76 31 	lds	r17, 0x3176
    9530:	60 91 6f 31 	lds	r22, 0x316F
    9534:	70 91 70 31 	lds	r23, 0x3170
    9538:	80 91 71 31 	lds	r24, 0x3171
    953c:	90 91 72 31 	lds	r25, 0x3172
    9540:	47 e9       	ldi	r20, 0x97	; 151
    9542:	57 e4       	ldi	r21, 0x47	; 71
    9544:	2a e0       	ldi	r18, 0x0A	; 10
    9546:	30 e0       	ldi	r19, 0x00	; 0
    9548:	0e 94 45 59 	call	0xb28a	; 0xb28a <ltoa>
    954c:	fc 01       	movw	r30, r24
    954e:	dc 01       	movw	r26, r24
    9550:	0d 90       	ld	r0, X+
    9552:	00 20       	and	r0, r0
    9554:	e9 f7       	brne	.-6      	; 0x9550 <main+0x4ee>
    9556:	cd 01       	movw	r24, r26
    9558:	01 97       	sbiw	r24, 0x01	; 1
    955a:	8e 1b       	sub	r24, r30
    955c:	9f 0b       	sbc	r25, r31
    955e:	a0 e0       	ldi	r26, 0x00	; 0
    9560:	b0 e0       	ldi	r27, 0x00	; 0
    9562:	8e 0d       	add	r24, r14
    9564:	9f 1d       	adc	r25, r15
    9566:	a0 1f       	adc	r26, r16
    9568:	b1 1f       	adc	r27, r17
    956a:	80 93 73 31 	sts	0x3173, r24
    956e:	90 93 74 31 	sts	0x3174, r25
    9572:	a0 93 75 31 	sts	0x3175, r26
    9576:	b0 93 76 31 	sts	0x3176, r27
            uploadHeaderSize += uploadFileSize;
    957a:	20 91 73 31 	lds	r18, 0x3173
    957e:	30 91 74 31 	lds	r19, 0x3174
    9582:	40 91 75 31 	lds	r20, 0x3175
    9586:	50 91 76 31 	lds	r21, 0x3176
    958a:	80 91 6f 31 	lds	r24, 0x316F
    958e:	90 91 70 31 	lds	r25, 0x3170
    9592:	a0 91 71 31 	lds	r26, 0x3171
    9596:	b0 91 72 31 	lds	r27, 0x3172
    959a:	82 0f       	add	r24, r18
    959c:	93 1f       	adc	r25, r19
    959e:	a4 1f       	adc	r26, r20
    95a0:	b5 1f       	adc	r27, r21
    95a2:	80 93 73 31 	sts	0x3173, r24
    95a6:	90 93 74 31 	sts	0x3174, r25
    95aa:	a0 93 75 31 	sts	0x3175, r26
    95ae:	b0 93 76 31 	sts	0x3176, r27
            if(Debug_TriggerUpload(uploadHeaderSize, 2000)){
    95b2:	60 91 73 31 	lds	r22, 0x3173
    95b6:	70 91 74 31 	lds	r23, 0x3174
    95ba:	80 91 75 31 	lds	r24, 0x3175
    95be:	90 91 76 31 	lds	r25, 0x3176
    95c2:	40 ed       	ldi	r20, 0xD0	; 208
    95c4:	57 e0       	ldi	r21, 0x07	; 7
    95c6:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <Debug_TriggerUpload>
    95ca:	88 23       	and	r24, r24
    95cc:	09 f4       	brne	.+2      	; 0x95d0 <main+0x56e>
    95ce:	5e c2       	rjmp	.+1212   	; 0x9a8c <main+0xa2a>

            signalStrength = 100;
    95d0:	84 e6       	ldi	r24, 0x64	; 100
    95d2:	80 93 57 31 	sts	0x3157, r24
            Rs232_SendString("Connected!",true);
    95d6:	89 ef       	ldi	r24, 0xF9	; 249
    95d8:	92 e2       	ldi	r25, 0x22	; 34
    95da:	61 e0       	ldi	r22, 0x01	; 1
    95dc:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <Rs232_SendString>

            Debug_SendString("POST /users/",false);                              // 12
    95e0:	84 e0       	ldi	r24, 0x04	; 4
    95e2:	93 e2       	ldi	r25, 0x23	; 35
    95e4:	60 e0       	ldi	r22, 0x00	; 0
    95e6:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString(user,false);
    95ea:	8b ef       	ldi	r24, 0xFB	; 251
    95ec:	97 e4       	ldi	r25, 0x47	; 71
    95ee:	60 e0       	ldi	r22, 0x00	; 0
    95f0:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString("/binupload?dev_nickname=",false);                  // 24
    95f4:	81 e1       	ldi	r24, 0x11	; 17
    95f6:	93 e2       	ldi	r25, 0x23	; 35
    95f8:	60 e0       	ldi	r22, 0x00	; 0
    95fa:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString(nickname,false);
    95fe:	83 e8       	ldi	r24, 0x83	; 131
    9600:	99 e5       	ldi	r25, 0x59	; 89
    9602:	60 e0       	ldi	r22, 0x00	; 0
    9604:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString("&filename=",false);                                // 10
    9608:	8a e2       	ldi	r24, 0x2A	; 42
    960a:	93 e2       	ldi	r25, 0x23	; 35
    960c:	60 e0       	ldi	r22, 0x00	; 0
    960e:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString(fileToUpload, false);
    9612:	8e ee       	ldi	r24, 0xEE	; 238
    9614:	99 e3       	ldi	r25, 0x39	; 57
    9616:	60 e0       	ldi	r22, 0x00	; 0
    9618:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString(" HTTP/1.1",true);                                  // 11
    961c:	85 e3       	ldi	r24, 0x35	; 53
    961e:	93 e2       	ldi	r25, 0x23	; 35
    9620:	61 e0       	ldi	r22, 0x01	; 1
    9622:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>

            Debug_SendString("Host: bodytrack.org",true);                        // 21
    9626:	8f e3       	ldi	r24, 0x3F	; 63
    9628:	93 e2       	ldi	r25, 0x23	; 35
    962a:	61 e0       	ldi	r22, 0x01	; 1
    962c:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString("Content-Type: application/octet-stream",true);     // 40
    9630:	83 e5       	ldi	r24, 0x53	; 83
    9632:	93 e2       	ldi	r25, 0x23	; 35
    9634:	61 e0       	ldi	r22, 0x01	; 1
    9636:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendString("Content-Transfer-Encoding: binary",true);          // 35
    963a:	8a e7       	ldi	r24, 0x7A	; 122
    963c:	93 e2       	ldi	r25, 0x23	; 35
    963e:	61 e0       	ldi	r22, 0x01	; 1
    9640:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            sprintf(temp, "Content-Length: %lu",uploadFileSize);                 // 16
    9644:	40 91 6f 31 	lds	r20, 0x316F
    9648:	50 91 70 31 	lds	r21, 0x3170
    964c:	60 91 71 31 	lds	r22, 0x3171
    9650:	70 91 72 31 	lds	r23, 0x3172
    9654:	ed b7       	in	r30, 0x3d	; 61
    9656:	fe b7       	in	r31, 0x3e	; 62
    9658:	38 97       	sbiw	r30, 0x08	; 8
    965a:	ed bf       	out	0x3d, r30	; 61
    965c:	fe bf       	out	0x3e, r31	; 62
    965e:	31 96       	adiw	r30, 0x01	; 1
    9660:	ad b7       	in	r26, 0x3d	; 61
    9662:	be b7       	in	r27, 0x3e	; 62
    9664:	11 96       	adiw	r26, 0x01	; 1
    9666:	2d 92       	st	X+, r2
    9668:	3c 92       	st	X, r3
    966a:	12 97       	sbiw	r26, 0x02	; 2
    966c:	2c e9       	ldi	r18, 0x9C	; 156
    966e:	33 e2       	ldi	r19, 0x23	; 35
    9670:	22 83       	std	Z+2, r18	; 0x02
    9672:	33 83       	std	Z+3, r19	; 0x03
    9674:	44 83       	std	Z+4, r20	; 0x04
    9676:	55 83       	std	Z+5, r21	; 0x05
    9678:	66 83       	std	Z+6, r22	; 0x06
    967a:	77 83       	std	Z+7, r23	; 0x07
    967c:	0e 94 96 59 	call	0xb32c	; 0xb32c <sprintf>
            Debug_SendString(temp,true);
    9680:	8d b7       	in	r24, 0x3d	; 61
    9682:	9e b7       	in	r25, 0x3e	; 62
    9684:	08 96       	adiw	r24, 0x08	; 8
    9686:	8d bf       	out	0x3d, r24	; 61
    9688:	9e bf       	out	0x3e, r25	; 62
    968a:	c1 01       	movw	r24, r2
    968c:	61 e0       	ldi	r22, 0x01	; 1
    968e:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
            Debug_SendByte(0x0D);                                                // 1
    9692:	8d e0       	ldi	r24, 0x0D	; 13
    9694:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
            Debug_SendByte(0x0A);                                                // 1
    9698:	8a e0       	ldi	r24, 0x0A	; 10
    969a:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
    969e:	88 24       	eor	r8, r8
    96a0:	99 24       	eor	r9, r9
    96a2:	54 01       	movw	r10, r8
    96a4:	cc 24       	eor	r12, r12
    96a6:	dd 24       	eor	r13, r13
    96a8:	76 01       	movw	r14, r12

            for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;
    96aa:	55 24       	eor	r5, r5
    96ac:	53 94       	inc	r5
    96ae:	2e c0       	rjmp	.+92     	; 0x970c <main+0x6aa>
            Debug_SendString(temp,true);
            Debug_SendByte(0x0D);                                                // 1
            Debug_SendByte(0x0A);                                                // 1

            for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                uploadFileBufferFull = false;
    96b0:	10 92 6a 31 	sts	0x316A, r1
                okToFillUploadFileBuffer = true;
    96b4:	50 92 69 31 	sts	0x3169, r5

                uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    96b8:	20 91 77 31 	lds	r18, 0x3177
    96bc:	30 91 78 31 	lds	r19, 0x3178
    96c0:	40 91 79 31 	lds	r20, 0x3179
    96c4:	50 91 7a 31 	lds	r21, 0x317A
    96c8:	c7 01       	movw	r24, r14
    96ca:	b6 01       	movw	r22, r12
    96cc:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    96d0:	20 93 58 31 	sts	0x3158, r18
                while(!uploadFileBufferFull);
    96d4:	80 91 6a 31 	lds	r24, 0x316A
    96d8:	88 23       	and	r24, r24
    96da:	e1 f3       	breq	.-8      	; 0x96d4 <main+0x672>
    96dc:	0e ef       	ldi	r16, 0xFE	; 254
    96de:	15 e3       	ldi	r17, 0x35	; 53
                for(uint16_t j = 0; j <  uploadChunkSize; j++){
                    Debug_SendByte(uploadFileBuffer[j]);
    96e0:	d8 01       	movw	r26, r16
    96e2:	8d 91       	ld	r24, X+
    96e4:	8d 01       	movw	r16, r26
    96e6:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;

                uploadPercentBS = (z*100)/numberOfPacketsToUpload;
                while(!uploadFileBufferFull);
                for(uint16_t j = 0; j <  uploadChunkSize; j++){
    96ea:	b9 e3       	ldi	r27, 0x39	; 57
    96ec:	06 3e       	cpi	r16, 0xE6	; 230
    96ee:	1b 07       	cpc	r17, r27
    96f0:	b9 f7       	brne	.-18     	; 0x96e0 <main+0x67e>
            sprintf(temp, "Content-Length: %lu",uploadFileSize);                 // 16
            Debug_SendString(temp,true);
            Debug_SendByte(0x0D);                                                // 1
            Debug_SendByte(0x0A);                                                // 1

            for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    96f2:	08 94       	sec
    96f4:	81 1c       	adc	r8, r1
    96f6:	91 1c       	adc	r9, r1
    96f8:	a1 1c       	adc	r10, r1
    96fa:	b1 1c       	adc	r11, r1
    96fc:	84 e6       	ldi	r24, 0x64	; 100
    96fe:	90 e0       	ldi	r25, 0x00	; 0
    9700:	a0 e0       	ldi	r26, 0x00	; 0
    9702:	b0 e0       	ldi	r27, 0x00	; 0
    9704:	c8 0e       	add	r12, r24
    9706:	d9 1e       	adc	r13, r25
    9708:	ea 1e       	adc	r14, r26
    970a:	fb 1e       	adc	r15, r27
    970c:	80 91 77 31 	lds	r24, 0x3177
    9710:	90 91 78 31 	lds	r25, 0x3178
    9714:	a0 91 79 31 	lds	r26, 0x3179
    9718:	b0 91 7a 31 	lds	r27, 0x317A
    971c:	88 16       	cp	r8, r24
    971e:	99 06       	cpc	r9, r25
    9720:	aa 06       	cpc	r10, r26
    9722:	bb 06       	cpc	r11, r27
    9724:	28 f2       	brcs	.-118    	; 0x96b0 <main+0x64e>
                for(uint16_t j = 0; j <  uploadChunkSize; j++){
                    Debug_SendByte(uploadFileBuffer[j]);
                }
            }

            uploadFileBufferFull = false;
    9726:	10 92 6a 31 	sts	0x316A, r1
            okToFillUploadFileBuffer = true;
    972a:	81 e0       	ldi	r24, 0x01	; 1
    972c:	80 93 69 31 	sts	0x3169, r24
            while(!uploadFileBufferFull);
    9730:	80 91 6a 31 	lds	r24, 0x316A
    9734:	88 23       	and	r24, r24
    9736:	e1 f3       	breq	.-8      	; 0x9730 <main+0x6ce>
    9738:	4e ef       	ldi	r20, 0xFE	; 254
    973a:	c4 2e       	mov	r12, r20
    973c:	45 e3       	ldi	r20, 0x35	; 53
    973e:	d4 2e       	mov	r13, r20
    9740:	20 e0       	ldi	r18, 0x00	; 0
    9742:	30 e0       	ldi	r19, 0x00	; 0
    9744:	40 e0       	ldi	r20, 0x00	; 0
    9746:	50 e0       	ldi	r21, 0x00	; 0
    9748:	07 c0       	rjmp	.+14     	; 0x9758 <main+0x6f6>

            for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
                Debug_SendByte(uploadFileBuffer[j]);
    974a:	d6 01       	movw	r26, r12
    974c:	8d 91       	ld	r24, X+
    974e:	6d 01       	movw	r12, r26
    9750:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
    9754:	a8 01       	movw	r20, r16
    9756:	97 01       	movw	r18, r14

            uploadFileBufferFull = false;
            okToFillUploadFileBuffer = true;
            while(!uploadFileBufferFull);

            for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    9758:	80 91 7b 31 	lds	r24, 0x317B
    975c:	90 91 7c 31 	lds	r25, 0x317C
    9760:	a0 91 7d 31 	lds	r26, 0x317D
    9764:	b0 91 7e 31 	lds	r27, 0x317E
    9768:	79 01       	movw	r14, r18
    976a:	8a 01       	movw	r16, r20
    976c:	08 94       	sec
    976e:	e1 1c       	adc	r14, r1
    9770:	f1 1c       	adc	r15, r1
    9772:	01 1d       	adc	r16, r1
    9774:	11 1d       	adc	r17, r1
    9776:	28 17       	cp	r18, r24
    9778:	39 07       	cpc	r19, r25
    977a:	4a 07       	cpc	r20, r26
    977c:	5b 07       	cpc	r21, r27
    977e:	28 f3       	brcs	.-54     	; 0x974a <main+0x6e8>
            }




            Debug_SendByte(0x0D);                                                // 4
    9780:	8d e0       	ldi	r24, 0x0D	; 13
    9782:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
            Debug_SendByte(0x0A);
    9786:	8a e0       	ldi	r24, 0x0A	; 10
    9788:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
            Debug_SendByte(0x0D);
    978c:	8d e0       	ldi	r24, 0x0D	; 13
    978e:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>
            Debug_SendByte(0x0A);
    9792:	8a e0       	ldi	r24, 0x0A	; 10
    9794:	0e 94 77 01 	call	0x2ee	; 0x2ee <Debug_SendByte>


            uploadPercentBS = 100;
    9798:	84 e6       	ldi	r24, 0x64	; 100
    979a:	80 93 58 31 	sts	0x3158, r24
    979e:	80 e5       	ldi	r24, 0x50	; 80
    97a0:	93 ec       	ldi	r25, 0xC3	; 195
    97a2:	f3 01       	movw	r30, r6
    97a4:	31 97       	sbiw	r30, 0x01	; 1
    97a6:	f1 f7       	brne	.-4      	; 0x97a4 <main+0x742>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    97a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    97aa:	d9 f7       	brne	.-10     	; 0x97a2 <main+0x740>
            _delay_ms(5000);

              //Wait_For_Close:
            httpResponseReceived = false;
    97ac:	10 92 83 31 	sts	0x3183, r1
            connectionClosed = false;
    97b0:	10 92 84 31 	sts	0x3184, r1
            //Debug_SendString("Wait for connection to close",true);
            httpResponse[0] = 0;
    97b4:	10 92 2d 51 	sts	0x512D, r1
            connectionTimeoutTimer = 0;
    97b8:	10 92 85 31 	sts	0x3185, r1
    97bc:	10 92 86 31 	sts	0x3186, r1
    97c0:	10 92 87 31 	sts	0x3187, r1
    97c4:	10 92 88 31 	sts	0x3188, r1
            byteReceived = 0;
    97c8:	10 92 62 48 	sts	0x4862, r1
    97cc:	36 e6       	ldi	r19, 0x66	; 102
    97ce:	e3 2e       	mov	r14, r19
    97d0:	3e e0       	ldi	r19, 0x0E	; 14
    97d2:	f3 2e       	mov	r15, r19
    97d4:	c3 c0       	rjmp	.+390    	; 0x995c <main+0x8fa>
	Debug_writeLocation = Debug_readLocation;
}


bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    97d6:	20 91 02 31 	lds	r18, 0x3102
    97da:	30 91 03 31 	lds	r19, 0x3103
    97de:	80 91 00 31 	lds	r24, 0x3100
    97e2:	90 91 01 31 	lds	r25, 0x3101
    97e6:	28 17       	cp	r18, r24
    97e8:	39 07       	cpc	r19, r25
    97ea:	09 f0       	breq	.+2      	; 0x97ee <main+0x78c>
    97ec:	66 c1       	rjmp	.+716    	; 0x9aba <main+0xa58>
            while(!connectionClosed){
                if(Debug_CharReadyToRead()){
                  byteReceived = Debug_GetByte(false);
                }
                if(byteReceived == '*'){
    97ee:	80 91 62 48 	lds	r24, 0x4862
    97f2:	8a 32       	cpi	r24, 0x2A	; 42
    97f4:	21 f5       	brne	.+72     	; 0x983e <main+0x7dc>
                  byteReceived = Debug_GetByte(true);
    97f6:	81 e0       	ldi	r24, 0x01	; 1
    97f8:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    97fc:	80 93 62 48 	sts	0x4862, r24
                  if(byteReceived == 'C'){
    9800:	83 34       	cpi	r24, 0x43	; 67
    9802:	09 f0       	breq	.+2      	; 0x9806 <main+0x7a4>
    9804:	87 c0       	rjmp	.+270    	; 0x9914 <main+0x8b2>
                     byteReceived = Debug_GetByte(true);
    9806:	81 e0       	ldi	r24, 0x01	; 1
    9808:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    980c:	80 93 62 48 	sts	0x4862, r24
                     if(byteReceived == 'L'){
    9810:	8c 34       	cpi	r24, 0x4C	; 76
    9812:	09 f0       	breq	.+2      	; 0x9816 <main+0x7b4>
    9814:	7f c0       	rjmp	.+254    	; 0x9914 <main+0x8b2>
                        byteReceived = Debug_GetByte(true);
    9816:	81 e0       	ldi	r24, 0x01	; 1
    9818:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    981c:	80 93 62 48 	sts	0x4862, r24
                        if(byteReceived == 'O'){
    9820:	8f 34       	cpi	r24, 0x4F	; 79
    9822:	09 f0       	breq	.+2      	; 0x9826 <main+0x7c4>
    9824:	77 c0       	rjmp	.+238    	; 0x9914 <main+0x8b2>
                           byteReceived = Debug_GetByte(true);
    9826:	81 e0       	ldi	r24, 0x01	; 1
    9828:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    982c:	80 93 62 48 	sts	0x4862, r24
                           if(byteReceived == 'S'){
    9830:	83 35       	cpi	r24, 0x53	; 83
    9832:	09 f0       	breq	.+2      	; 0x9836 <main+0x7d4>
    9834:	6f c0       	rjmp	.+222    	; 0x9914 <main+0x8b2>
                               connectionClosed = true;
    9836:	81 e0       	ldi	r24, 0x01	; 1
    9838:	80 93 84 31 	sts	0x3184, r24
    983c:	94 c0       	rjmp	.+296    	; 0x9966 <main+0x904>
                               break;
                           }
                        }
                     }
                  }
                } else if(byteReceived == 'H'){
    983e:	88 34       	cpi	r24, 0x48	; 72
    9840:	09 f0       	breq	.+2      	; 0x9844 <main+0x7e2>
    9842:	68 c0       	rjmp	.+208    	; 0x9914 <main+0x8b2>
                  byteReceived = Debug_GetByte(true);
    9844:	81 e0       	ldi	r24, 0x01	; 1
    9846:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    984a:	80 93 62 48 	sts	0x4862, r24
                  if(byteReceived == 'T'){
    984e:	84 35       	cpi	r24, 0x54	; 84
    9850:	09 f0       	breq	.+2      	; 0x9854 <main+0x7f2>
    9852:	60 c0       	rjmp	.+192    	; 0x9914 <main+0x8b2>
                     byteReceived = Debug_GetByte(true);
    9854:	81 e0       	ldi	r24, 0x01	; 1
    9856:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    985a:	80 93 62 48 	sts	0x4862, r24
                     if(byteReceived == 'T'){
    985e:	84 35       	cpi	r24, 0x54	; 84
    9860:	09 f0       	breq	.+2      	; 0x9864 <main+0x802>
    9862:	58 c0       	rjmp	.+176    	; 0x9914 <main+0x8b2>
                        byteReceived = Debug_GetByte(true);
    9864:	81 e0       	ldi	r24, 0x01	; 1
    9866:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    986a:	80 93 62 48 	sts	0x4862, r24
                        if(byteReceived == 'P'){
    986e:	80 35       	cpi	r24, 0x50	; 80
    9870:	09 f0       	breq	.+2      	; 0x9874 <main+0x812>
    9872:	50 c0       	rjmp	.+160    	; 0x9914 <main+0x8b2>

                          httpResponseReceived = true;
    9874:	81 e0       	ldi	r24, 0x01	; 1
    9876:	80 93 83 31 	sts	0x3183, r24
    987a:	80 e1       	ldi	r24, 0x10	; 16
    987c:	97 e2       	ldi	r25, 0x27	; 39
    987e:	f3 01       	movw	r30, r6
    9880:	31 97       	sbiw	r30, 0x01	; 1
    9882:	f1 f7       	brne	.-4      	; 0x9880 <main+0x81e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9884:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9886:	d9 f7       	brne	.-10     	; 0x987e <main+0x81c>
                          _delay_ms(1000);
                          tempStringFiller = 0;
    9888:	10 92 4b 31 	sts	0x314B, r1
    988c:	20 91 02 31 	lds	r18, 0x3102
    9890:	30 91 03 31 	lds	r19, 0x3103
    9894:	80 91 00 31 	lds	r24, 0x3100
    9898:	90 91 01 31 	lds	r25, 0x3101
    989c:	28 17       	cp	r18, r24
    989e:	39 07       	cpc	r19, r25
    98a0:	09 f0       	breq	.+2      	; 0x98a4 <main+0x842>
    98a2:	11 c1       	rjmp	.+546    	; 0x9ac6 <main+0xa64>
                              tempStringFiller++;
                              if(tempStringFiller == 8){
                                  break;
                              }
                          }
                          temp[tempStringFiller] = 0;
    98a4:	e0 91 4b 31 	lds	r30, 0x314B
    98a8:	f0 e0       	ldi	r31, 0x00	; 0
    98aa:	e9 56       	subi	r30, 0x69	; 105
    98ac:	f8 4b       	sbci	r31, 0xB8	; 184
    98ae:	10 82       	st	Z, r1
                          memcpy(httpResponse,temp+5,3);
    98b0:	ad e2       	ldi	r26, 0x2D	; 45
    98b2:	b1 e5       	ldi	r27, 0x51	; 81
    98b4:	ec e9       	ldi	r30, 0x9C	; 156
    98b6:	f7 e4       	ldi	r31, 0x47	; 71
    98b8:	83 e0       	ldi	r24, 0x03	; 3
    98ba:	01 90       	ld	r0, Z+
    98bc:	0d 92       	st	X+, r0
    98be:	81 50       	subi	r24, 0x01	; 1
    98c0:	e1 f7       	brne	.-8      	; 0x98ba <main+0x858>
                          lengthOfHttpResponse = 0;
    98c2:	10 92 81 31 	sts	0x3181, r1
    98c6:	10 92 82 31 	sts	0x3182, r1
    98ca:	80 e5       	ldi	r24, 0x50	; 80
    98cc:	93 ec       	ldi	r25, 0xC3	; 195
    98ce:	f3 01       	movw	r30, r6
    98d0:	31 97       	sbiw	r30, 0x01	; 1
    98d2:	f1 f7       	brne	.-4      	; 0x98d0 <main+0x86e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    98d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    98d6:	d9 f7       	brne	.-10     	; 0x98ce <main+0x86c>
    98d8:	20 91 02 31 	lds	r18, 0x3102
    98dc:	30 91 03 31 	lds	r19, 0x3103
    98e0:	80 91 00 31 	lds	r24, 0x3100
    98e4:	90 91 01 31 	lds	r25, 0x3101
    98e8:	28 17       	cp	r18, r24
    98ea:	39 07       	cpc	r19, r25
    98ec:	09 f0       	breq	.+2      	; 0x98f0 <main+0x88e>
    98ee:	ff c0       	rjmp	.+510    	; 0x9aee <main+0xa8c>
                             lengthOfHttpResponse++;
                             if(lengthOfHttpResponse > 999){
                                break;
                             }
                          }
                          uploadFileBuffer[lengthOfHttpResponse] = 0;
    98f0:	e0 91 81 31 	lds	r30, 0x3181
    98f4:	f0 91 82 31 	lds	r31, 0x3182
    98f8:	e2 50       	subi	r30, 0x02	; 2
    98fa:	fa 4c       	sbci	r31, 0xCA	; 202
    98fc:	10 82       	st	Z, r1
                          if(strstr(uploadFileBuffer,"*CLOS") != 0){
    98fe:	8e ef       	ldi	r24, 0xFE	; 254
    9900:	95 e3       	ldi	r25, 0x35	; 53
    9902:	60 eb       	ldi	r22, 0xB0	; 176
    9904:	73 e2       	ldi	r23, 0x23	; 35
    9906:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    990a:	00 97       	sbiw	r24, 0x00	; 0
    990c:	19 f0       	breq	.+6      	; 0x9914 <main+0x8b2>
                             connectionClosed = true;
    990e:	81 e0       	ldi	r24, 0x01	; 1
    9910:	80 93 84 31 	sts	0x3184, r24
    9914:	c7 01       	movw	r24, r14
    9916:	01 97       	sbiw	r24, 0x01	; 1
    9918:	f1 f7       	brne	.-4      	; 0x9916 <main+0x8b4>
                        }
                     }
                  }
                }
                _delay_ms(1);
                connectionTimeoutTimer++;
    991a:	80 91 85 31 	lds	r24, 0x3185
    991e:	90 91 86 31 	lds	r25, 0x3186
    9922:	a0 91 87 31 	lds	r26, 0x3187
    9926:	b0 91 88 31 	lds	r27, 0x3188
    992a:	01 96       	adiw	r24, 0x01	; 1
    992c:	a1 1d       	adc	r26, r1
    992e:	b1 1d       	adc	r27, r1
    9930:	80 93 85 31 	sts	0x3185, r24
    9934:	90 93 86 31 	sts	0x3186, r25
    9938:	a0 93 87 31 	sts	0x3187, r26
    993c:	b0 93 88 31 	sts	0x3188, r27
                if(connectionTimeoutTimer > 120000){
    9940:	81 5c       	subi	r24, 0xC1	; 193
    9942:	94 4d       	sbci	r25, 0xD4	; 212
    9944:	a1 40       	sbci	r26, 0x01	; 1
    9946:	b0 40       	sbci	r27, 0x00	; 0
    9948:	48 f0       	brcs	.+18     	; 0x995c <main+0x8fa>
                    //Debug_SendString("Connection Timed Out",true);
                    connectionTimeoutTimer = 0;
    994a:	10 92 85 31 	sts	0x3185, r1
    994e:	10 92 86 31 	sts	0x3186, r1
    9952:	10 92 87 31 	sts	0x3187, r1
    9956:	10 92 88 31 	sts	0x3188, r1
    995a:	05 c0       	rjmp	.+10     	; 0x9966 <main+0x904>
            connectionClosed = false;
            //Debug_SendString("Wait for connection to close",true);
            httpResponse[0] = 0;
            connectionTimeoutTimer = 0;
            byteReceived = 0;
            while(!connectionClosed){
    995c:	80 91 84 31 	lds	r24, 0x3184
    9960:	88 23       	and	r24, r24
    9962:	09 f4       	brne	.+2      	; 0x9966 <main+0x904>
    9964:	38 cf       	rjmp	.-400    	; 0x97d6 <main+0x774>
                    break;
                }
            }
            //Debug_SendString("Connection Closed",true);

            uploadTimeStop = UNIX_time;
    9966:	80 91 2b 31 	lds	r24, 0x312B
    996a:	90 91 2c 31 	lds	r25, 0x312C
    996e:	a0 91 2d 31 	lds	r26, 0x312D
    9972:	b0 91 2e 31 	lds	r27, 0x312E
    9976:	80 93 67 3a 	sts	0x3A67, r24
    997a:	90 93 68 3a 	sts	0x3A68, r25
    997e:	a0 93 69 3a 	sts	0x3A69, r26
    9982:	b0 93 6a 3a 	sts	0x3A6A, r27


            if((httpResponseReceived) & (strstr(httpResponse,"200") != 0)){
    9986:	10 91 83 31 	lds	r17, 0x3183
    998a:	8d e2       	ldi	r24, 0x2D	; 45
    998c:	91 e5       	ldi	r25, 0x51	; 81
    998e:	66 eb       	ldi	r22, 0xB6	; 182
    9990:	73 e2       	ldi	r23, 0x23	; 35
    9992:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    9996:	40 e0       	ldi	r20, 0x00	; 0
    9998:	50 e0       	ldi	r21, 0x00	; 0
    999a:	00 97       	sbiw	r24, 0x00	; 0
    999c:	11 f0       	breq	.+4      	; 0x99a2 <main+0x940>
    999e:	41 e0       	ldi	r20, 0x01	; 1
    99a0:	50 e0       	ldi	r21, 0x00	; 0
    99a2:	81 2f       	mov	r24, r17
    99a4:	90 e0       	ldi	r25, 0x00	; 0
    99a6:	48 23       	and	r20, r24
    99a8:	59 23       	and	r21, r25
    99aa:	45 2b       	or	r20, r21
    99ac:	09 f4       	brne	.+2      	; 0x99b0 <main+0x94e>
    99ae:	51 c0       	rjmp	.+162    	; 0x9a52 <main+0x9f0>

                //Debug_SendString("Got a 200 back",true);

                //Debug_SendString("Successful: ",false);

                memcpy(successfulBinaryRecordsString,strtok((strstr(uploadFileBuffer,"\"successful_binrecs\":") + 21),","),5);
    99b0:	8e ef       	ldi	r24, 0xFE	; 254
    99b2:	95 e3       	ldi	r25, 0x35	; 53
    99b4:	6a eb       	ldi	r22, 0xBA	; 186
    99b6:	73 e2       	ldi	r23, 0x23	; 35
    99b8:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    99bc:	45 96       	adiw	r24, 0x15	; 21
    99be:	60 ed       	ldi	r22, 0xD0	; 208
    99c0:	73 e2       	ldi	r23, 0x23	; 35
    99c2:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    99c6:	ac e8       	ldi	r26, 0x8C	; 140
    99c8:	b8 e4       	ldi	r27, 0x48	; 72
    99ca:	fc 01       	movw	r30, r24
    99cc:	85 e0       	ldi	r24, 0x05	; 5
    99ce:	01 90       	ld	r0, Z+
    99d0:	0d 92       	st	X+, r0
    99d2:	81 50       	subi	r24, 0x01	; 1
    99d4:	e1 f7       	brne	.-8      	; 0x99ce <main+0x96c>
                //Debug_SendString(successfulBinaryRecordsString,true);

                //Debug_SendString("Failed: ",false);

                memcpy(failedBinaryRecordsString    ,strtok((strstr(uploadFileBuffer,"\"failed_binrecs\":") + 17),","),5);
    99d6:	8e ef       	ldi	r24, 0xFE	; 254
    99d8:	95 e3       	ldi	r25, 0x35	; 53
    99da:	62 ed       	ldi	r22, 0xD2	; 210
    99dc:	73 e2       	ldi	r23, 0x23	; 35
    99de:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    99e2:	41 96       	adiw	r24, 0x11	; 17
    99e4:	60 ed       	ldi	r22, 0xD0	; 208
    99e6:	73 e2       	ldi	r23, 0x23	; 35
    99e8:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    99ec:	a5 eb       	ldi	r26, 0xB5	; 181
    99ee:	b9 e5       	ldi	r27, 0x59	; 89
    99f0:	fc 01       	movw	r30, r24
    99f2:	85 e0       	ldi	r24, 0x05	; 5
    99f4:	01 90       	ld	r0, Z+
    99f6:	0d 92       	st	X+, r0
    99f8:	81 50       	subi	r24, 0x01	; 1
    99fa:	e1 f7       	brne	.-8      	; 0x99f4 <main+0x992>
                //Debug_SendString(failedBinaryRecordsString,true);


                strcpy(newFileName, fileToUpload);
    99fc:	88 e6       	ldi	r24, 0x68	; 104
    99fe:	94 e5       	ldi	r25, 0x54	; 84
    9a00:	6e ee       	ldi	r22, 0xEE	; 238
    9a02:	79 e3       	ldi	r23, 0x39	; 57
    9a04:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
			    strcat(newFileName, "U");
    9a08:	88 e6       	ldi	r24, 0x68	; 104
    9a0a:	94 e5       	ldi	r25, 0x54	; 84
    9a0c:	64 ee       	ldi	r22, 0xE4	; 228
    9a0e:	73 e2       	ldi	r23, 0x23	; 35
    9a10:	0e 94 df 58 	call	0xb1be	; 0xb1be <strcat>
                //sprintf(temp,"File TX took: %lu secs",uploadTimeStop - uploadTimeStart);
                //Debug_SendString(temp,true);
                //sprintf(temp,"TX speed: %lu kbps", uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)));
                //Debug_SendString(temp,true);

                okToRenameUploadFile = true;
    9a14:	81 e0       	ldi	r24, 0x01	; 1
    9a16:	80 93 64 31 	sts	0x3164, r24
                okToCloseUploadFile = true;                   // flags it close file and to be to be renamed
    9a1a:	80 93 63 31 	sts	0x3163, r24
    9a1e:	80 e1       	ldi	r24, 0x10	; 16
    9a20:	97 e2       	ldi	r25, 0x27	; 39
    9a22:	f3 01       	movw	r30, r6
    9a24:	31 97       	sbiw	r30, 0x01	; 1
    9a26:	f1 f7       	brne	.-4      	; 0x9a24 <main+0x9c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a2a:	d9 f7       	brne	.-10     	; 0x9a22 <main+0x9c0>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    9a2c:	80 91 63 31 	lds	r24, 0x3163
    9a30:	88 23       	and	r24, r24
    9a32:	e1 f7       	brne	.-8      	; 0x9a2c <main+0x9ca>
    9a34:	80 e1       	ldi	r24, 0x10	; 16
    9a36:	97 e2       	ldi	r25, 0x27	; 39
    9a38:	f3 01       	movw	r30, r6
    9a3a:	31 97       	sbiw	r30, 0x01	; 1
    9a3c:	f1 f7       	brne	.-4      	; 0x9a3a <main+0x9d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a40:	d9 f7       	brne	.-10     	; 0x9a38 <main+0x9d6>
                _delay_ms(1000);
                okToWriteUploaderLogFile = true;               // adds entry to log file
    9a42:	81 e0       	ldi	r24, 0x01	; 1
    9a44:	80 93 89 31 	sts	0x3189, r24
                while(okToWriteUploaderLogFile);
    9a48:	80 91 89 31 	lds	r24, 0x3189
    9a4c:	88 23       	and	r24, r24
    9a4e:	e1 f7       	brne	.-8      	; 0x9a48 <main+0x9e6>
    9a50:	24 c0       	rjmp	.+72     	; 0x9a9a <main+0xa38>

               //Debug_SendString("got: *",false);
               //Debug_SendString(httpResponse,false);
               //Debug_SendString("* back",true);

			   okToCloseUploadFile = true;                    // flags it close file
    9a52:	81 e0       	ldi	r24, 0x01	; 1
    9a54:	80 93 63 31 	sts	0x3163, r24
    9a58:	80 e1       	ldi	r24, 0x10	; 16
    9a5a:	97 e2       	ldi	r25, 0x27	; 39
    9a5c:	f3 01       	movw	r30, r6
    9a5e:	31 97       	sbiw	r30, 0x01	; 1
    9a60:	f1 f7       	brne	.-4      	; 0x9a5e <main+0x9fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a64:	d9 f7       	brne	.-10     	; 0x9a5c <main+0x9fa>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    9a66:	80 91 63 31 	lds	r24, 0x3163
    9a6a:	88 23       	and	r24, r24
    9a6c:	e1 f7       	brne	.-8      	; 0x9a66 <main+0xa04>
    9a6e:	80 e1       	ldi	r24, 0x10	; 16
    9a70:	97 e2       	ldi	r25, 0x27	; 39
    9a72:	f3 01       	movw	r30, r6
    9a74:	31 97       	sbiw	r30, 0x01	; 1
    9a76:	f1 f7       	brne	.-4      	; 0x9a74 <main+0xa12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a7a:	d9 f7       	brne	.-10     	; 0x9a72 <main+0xa10>
                _delay_ms(1000);

			   uploadFailed = true;                             // adds error entry to log file
    9a7c:	81 e0       	ldi	r24, 0x01	; 1
    9a7e:	80 93 62 31 	sts	0x3162, r24
               while(uploadFailed);
    9a82:	80 91 62 31 	lds	r24, 0x3162
    9a86:	88 23       	and	r24, r24
    9a88:	e1 f7       	brne	.-8      	; 0x9a82 <main+0xa20>
    9a8a:	07 c0       	rjmp	.+14     	; 0x9a9a <main+0xa38>
            }



            }  else {
              Rs232_SendString("Not connected",true);
    9a8c:	86 ee       	ldi	r24, 0xE6	; 230
    9a8e:	93 e2       	ldi	r25, 0x23	; 35
    9a90:	61 e0       	ldi	r22, 0x01	; 1
    9a92:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <Rs232_SendString>
              signalStrength = 0;
    9a96:	10 92 57 31 	sts	0x3157, r1

            }


		    uploading = false;
    9a9a:	10 92 66 31 	sts	0x3166, r1
			//Debug_SendString("Done!", true);
			okToUpload = false;
    9a9e:	10 92 65 31 	sts	0x3165, r1
    9aa2:	18 cc       	rjmp	.-2000   	; 0x92d4 <main+0x272>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9aa4:	e0 e2       	ldi	r30, 0x20	; 32
    9aa6:	f6 e0       	ldi	r31, 0x06	; 6
    9aa8:	82 e0       	ldi	r24, 0x02	; 2
    9aaa:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9aac:	81 e0       	ldi	r24, 0x01	; 1
    9aae:	85 83       	std	Z+5, r24	; 0x05
    9ab0:	20 e1       	ldi	r18, 0x10	; 16
    9ab2:	37 e2       	ldi	r19, 0x27	; 39
    9ab4:	40 e7       	ldi	r20, 0x70	; 112
    9ab6:	51 e0       	ldi	r21, 0x01	; 1
    9ab8:	81 cb       	rjmp	.-2302   	; 0x91bc <main+0x15a>
            httpResponse[0] = 0;
            connectionTimeoutTimer = 0;
            byteReceived = 0;
            while(!connectionClosed){
                if(Debug_CharReadyToRead()){
                  byteReceived = Debug_GetByte(false);
    9aba:	80 e0       	ldi	r24, 0x00	; 0
    9abc:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    9ac0:	80 93 62 48 	sts	0x4862, r24
    9ac4:	94 ce       	rjmp	.-728    	; 0x97ee <main+0x78c>

                          httpResponseReceived = true;
                          _delay_ms(1000);
                          tempStringFiller = 0;
                          while(Debug_CharReadyToRead()){
                              temp[tempStringFiller] = Debug_GetByte(false);
    9ac6:	80 91 4b 31 	lds	r24, 0x314B
    9aca:	08 2f       	mov	r16, r24
    9acc:	10 e0       	ldi	r17, 0x00	; 0
    9ace:	80 e0       	ldi	r24, 0x00	; 0
    9ad0:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    9ad4:	09 56       	subi	r16, 0x69	; 105
    9ad6:	18 4b       	sbci	r17, 0xB8	; 184
    9ad8:	d8 01       	movw	r26, r16
    9ada:	8c 93       	st	X, r24
                              tempStringFiller++;
    9adc:	80 91 4b 31 	lds	r24, 0x314B
    9ae0:	8f 5f       	subi	r24, 0xFF	; 255
    9ae2:	80 93 4b 31 	sts	0x314B, r24
                              if(tempStringFiller == 8){
    9ae6:	88 30       	cpi	r24, 0x08	; 8
    9ae8:	09 f0       	breq	.+2      	; 0x9aec <main+0xa8a>
    9aea:	d0 ce       	rjmp	.-608    	; 0x988c <main+0x82a>
    9aec:	db ce       	rjmp	.-586    	; 0x98a4 <main+0x842>
                          temp[tempStringFiller] = 0;
                          memcpy(httpResponse,temp+5,3);
                          lengthOfHttpResponse = 0;
                          _delay_ms(5000);
                          while(Debug_CharReadyToRead()){
                             uploadFileBuffer[lengthOfHttpResponse] = Debug_GetByte(false);
    9aee:	00 91 81 31 	lds	r16, 0x3181
    9af2:	10 91 82 31 	lds	r17, 0x3182
    9af6:	80 e0       	ldi	r24, 0x00	; 0
    9af8:	0e 94 4d 01 	call	0x29a	; 0x29a <Debug_GetByte>
    9afc:	02 50       	subi	r16, 0x02	; 2
    9afe:	1a 4c       	sbci	r17, 0xCA	; 202
    9b00:	f8 01       	movw	r30, r16
    9b02:	80 83       	st	Z, r24
                             lengthOfHttpResponse++;
    9b04:	80 91 81 31 	lds	r24, 0x3181
    9b08:	90 91 82 31 	lds	r25, 0x3182
    9b0c:	01 96       	adiw	r24, 0x01	; 1
    9b0e:	80 93 81 31 	sts	0x3181, r24
    9b12:	90 93 82 31 	sts	0x3182, r25
                             if(lengthOfHttpResponse > 999){
    9b16:	88 5e       	subi	r24, 0xE8	; 232
    9b18:	93 40       	sbci	r25, 0x03	; 3
    9b1a:	08 f4       	brcc	.+2      	; 0x9b1e <main+0xabc>
    9b1c:	dd ce       	rjmp	.-582    	; 0x98d8 <main+0x876>
    9b1e:	e8 ce       	rjmp	.-560    	; 0x98f0 <main+0x88e>
    9b20:	ff cf       	rjmp	.-2      	; 0x9b20 <main+0xabe>

00009b22 <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    9b22:	1f 93       	push	r17
	uint8_t resp;

	//Debug_SendString("Opening Log File",true);

	SD_MakeFileName(time);
    9b24:	0e 94 43 40 	call	0x8086	; 0x8086 <SD_MakeFileName>
	resp = SD_Open(fileName);
    9b28:	8d e9       	ldi	r24, 0x9D	; 157
    9b2a:	92 e4       	ldi	r25, 0x42	; 66
    9b2c:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <SD_Open>
    9b30:	18 2f       	mov	r17, r24


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    9b32:	8f ef       	ldi	r24, 0xFF	; 255
    9b34:	9f ef       	ldi	r25, 0xFF	; 255
    9b36:	af ef       	ldi	r26, 0xFF	; 255
    9b38:	bf ef       	ldi	r27, 0xFF	; 255
    9b3a:	80 93 77 54 	sts	0x5477, r24
    9b3e:	90 93 78 54 	sts	0x5478, r25
    9b42:	a0 93 79 54 	sts	0x5479, r26
    9b46:	b0 93 7a 54 	sts	0x547A, r27
	//Debug_SendString("Opening Log File",true);

	SD_MakeFileName(time);
	resp = SD_Open(fileName);
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    9b4a:	6c e4       	ldi	r22, 0x4C	; 76
    9b4c:	74 e7       	ldi	r23, 0x74	; 116
    9b4e:	8e ed       	ldi	r24, 0xDE	; 222
    9b50:	90 eb       	ldi	r25, 0xB0	; 176
    9b52:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    9b56:	6b e3       	ldi	r22, 0x3B	; 59
    9b58:	72 e0       	ldi	r23, 0x02	; 2
    9b5a:	80 e0       	ldi	r24, 0x00	; 0
    9b5c:	90 e0       	ldi	r25, 0x00	; 0
    9b5e:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    9b62:	81 e0       	ldi	r24, 0x01	; 1
    9b64:	90 e0       	ldi	r25, 0x00	; 0
    9b66:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

														// payload
	SD_Write16(0x0100);				// protocol version
    9b6a:	80 e0       	ldi	r24, 0x00	; 0
    9b6c:	91 e0       	ldi	r25, 0x01	; 1
    9b6e:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>
	SD_Write8(0x02);					// time protocol
    9b72:	82 e0       	ldi	r24, 0x02	; 2
    9b74:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    9b78:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    9b7c:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    9b80:	67 e4       	ldi	r22, 0x47	; 71
    9b82:	77 e4       	ldi	r23, 0x47	; 71
    9b84:	88 e0       	ldi	r24, 0x08	; 8
    9b86:	90 e0       	ldi	r25, 0x00	; 0
    9b88:	0e 94 92 2b 	call	0x5724	; 0x5724 <SD_Write32>
	SD_Write16(0);
    9b8c:	80 e0       	ldi	r24, 0x00	; 0
    9b8e:	90 e0       	ldi	r25, 0x00	; 0
    9b90:	0e 94 ac 2b 	call	0x5758	; 0x5758 <SD_Write16>

	SD_WriteString("device_class");
    9b94:	84 ef       	ldi	r24, 0xF4	; 244
    9b96:	93 e2       	ldi	r25, 0x23	; 35
    9b98:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    9b9c:	89 e0       	ldi	r24, 0x09	; 9
    9b9e:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString(DeviceClass);
    9ba2:	81 e0       	ldi	r24, 0x01	; 1
    9ba4:	94 e2       	ldi	r25, 0x24	; 36
    9ba6:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    9baa:	8a e0       	ldi	r24, 0x0A	; 10
    9bac:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
		
	SD_WriteString("device_id");
    9bb0:	8d e0       	ldi	r24, 0x0D	; 13
    9bb2:	94 e2       	ldi	r25, 0x24	; 36
    9bb4:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    9bb8:	89 e0       	ldi	r24, 0x09	; 9
    9bba:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString(deviceID);
    9bbe:	86 e0       	ldi	r24, 0x06	; 6
    9bc0:	98 e4       	ldi	r25, 0x48	; 72
    9bc2:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    9bc6:	8a e0       	ldi	r24, 0x0A	; 10
    9bc8:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
		
	SD_WriteString("firmware_version");
    9bcc:	87 e1       	ldi	r24, 0x17	; 23
    9bce:	94 e2       	ldi	r25, 0x24	; 36
    9bd0:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    9bd4:	89 e0       	ldi	r24, 0x09	; 9
    9bd6:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString(FirmwareVersion);
    9bda:	80 ee       	ldi	r24, 0xE0	; 224
    9bdc:	92 e2       	ldi	r25, 0x22	; 34
    9bde:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    9be2:	8a e0       	ldi	r24, 0x0A	; 10
    9be4:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
		
	SD_WriteString("hardware_version");
    9be8:	88 e2       	ldi	r24, 0x28	; 40
    9bea:	94 e2       	ldi	r25, 0x24	; 36
    9bec:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    9bf0:	89 e0       	ldi	r24, 0x09	; 9
    9bf2:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString(HardwareVersion);
    9bf6:	81 ed       	ldi	r24, 0xD1	; 209
    9bf8:	92 e2       	ldi	r25, 0x22	; 34
    9bfa:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    9bfe:	8a e0       	ldi	r24, 0x0A	; 10
    9c00:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	SD_WriteString("channel_specs");
    9c04:	89 e3       	ldi	r24, 0x39	; 57
    9c06:	94 e2       	ldi	r25, 0x24	; 36
    9c08:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x09);
    9c0c:	89 e0       	ldi	r24, 0x09	; 9
    9c0e:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    9c12:	87 e4       	ldi	r24, 0x47	; 71
    9c14:	94 e2       	ldi	r25, 0x24	; 36
    9c16:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    9c1a:	88 e7       	ldi	r24, 0x78	; 120
    9c1c:	94 e2       	ldi	r25, 0x24	; 36
    9c1e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    9c22:	81 ea       	ldi	r24, 0xA1	; 161
    9c24:	94 e2       	ldi	r25, 0x24	; 36
    9c26:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    9c2a:	8a ec       	ldi	r24, 0xCA	; 202
    9c2c:	94 e2       	ldi	r25, 0x24	; 36
    9c2e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    9c32:	87 ef       	ldi	r24, 0xF7	; 247
    9c34:	94 e2       	ldi	r25, 0x24	; 36
    9c36:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    9c3a:	82 e2       	ldi	r24, 0x22	; 34
    9c3c:	95 e2       	ldi	r25, 0x25	; 37
    9c3e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    9c42:	8e e4       	ldi	r24, 0x4E	; 78
    9c44:	95 e2       	ldi	r25, 0x25	; 37
    9c46:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    9c4a:	8b e7       	ldi	r24, 0x7B	; 123
    9c4c:	95 e2       	ldi	r25, 0x25	; 37
    9c4e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    9c52:	8c ea       	ldi	r24, 0xAC	; 172
    9c54:	95 e2       	ldi	r25, 0x25	; 37
    9c56:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    9c5a:	8d ed       	ldi	r24, 0xDD	; 221
    9c5c:	95 e2       	ldi	r25, 0x25	; 37
    9c5e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <SD_WriteString>
	SD_Write8(0x0A);
    9c62:	8a e0       	ldi	r24, 0x0A	; 10
    9c64:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>
	
	SD_Write8(0x00);
    9c68:	80 e0       	ldi	r24, 0x00	; 0
    9c6a:	0e 94 b7 2b 	call	0x576e	; 0x576e <SD_Write8>

	SD_WriteCRC();			// CRC			
    9c6e:	0e 94 cd 2b 	call	0x579a	; 0x579a <SD_WriteCRC>


	f_sync(&Log_File);
    9c72:	8f e9       	ldi	r24, 0x9F	; 159
    9c74:	9c e4       	ldi	r25, 0x4C	; 76
    9c76:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>

	return resp;
}
    9c7a:	81 2f       	mov	r24, r17
    9c7c:	1f 91       	pop	r17
    9c7e:	08 95       	ret

00009c80 <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(TCE1_OVF_vect)
{
    9c80:	1f 92       	push	r1
    9c82:	0f 92       	push	r0
    9c84:	0f b6       	in	r0, 0x3f	; 63
    9c86:	0f 92       	push	r0
    9c88:	0b b6       	in	r0, 0x3b	; 59
    9c8a:	0f 92       	push	r0
    9c8c:	11 24       	eor	r1, r1
    9c8e:	ef 92       	push	r14
    9c90:	ff 92       	push	r15
    9c92:	0f 93       	push	r16
    9c94:	1f 93       	push	r17
    9c96:	2f 93       	push	r18
    9c98:	3f 93       	push	r19
    9c9a:	4f 93       	push	r20
    9c9c:	5f 93       	push	r21
    9c9e:	6f 93       	push	r22
    9ca0:	7f 93       	push	r23
    9ca2:	8f 93       	push	r24
    9ca4:	9f 93       	push	r25
    9ca6:	af 93       	push	r26
    9ca8:	bf 93       	push	r27
    9caa:	ef 93       	push	r30
    9cac:	ff 93       	push	r31
    9cae:	df 93       	push	r29
    9cb0:	cf 93       	push	r28
    9cb2:	0f 92       	push	r0
    9cb4:	0f 92       	push	r0
    9cb6:	cd b7       	in	r28, 0x3d	; 61
    9cb8:	de b7       	in	r29, 0x3e	; 62

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    9cba:	80 91 3b 31 	lds	r24, 0x313B
    9cbe:	88 23       	and	r24, r24
    9cc0:	71 f0       	breq	.+28     	; 0x9cde <__vector_53+0x5e>
    9cc2:	80 91 30 31 	lds	r24, 0x3130
    9cc6:	88 23       	and	r24, r24
    9cc8:	51 f0       	breq	.+20     	; 0x9cde <__vector_53+0x5e>
    9cca:	80 91 6b 31 	lds	r24, 0x316B
    9cce:	88 23       	and	r24, r24
    9cd0:	31 f4       	brne	.+12     	; 0x9cde <__vector_53+0x5e>
		SD_WriteMicrophoneBuffer(1);
    9cd2:	81 e0       	ldi	r24, 0x01	; 1
    9cd4:	0e 94 55 3c 	call	0x78aa	; 0x78aa <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    9cd8:	10 92 3b 31 	sts	0x313B, r1
    9cdc:	11 c0       	rjmp	.+34     	; 0x9d00 <__vector_53+0x80>
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    9cde:	80 91 3c 31 	lds	r24, 0x313C
    9ce2:	88 23       	and	r24, r24
    9ce4:	69 f0       	breq	.+26     	; 0x9d00 <__vector_53+0x80>
    9ce6:	80 91 30 31 	lds	r24, 0x3130
    9cea:	88 23       	and	r24, r24
    9cec:	49 f0       	breq	.+18     	; 0x9d00 <__vector_53+0x80>
    9cee:	80 91 6b 31 	lds	r24, 0x316B
    9cf2:	88 23       	and	r24, r24
    9cf4:	29 f4       	brne	.+10     	; 0x9d00 <__vector_53+0x80>
		SD_WriteMicrophoneBuffer(2);
    9cf6:	82 e0       	ldi	r24, 0x02	; 2
    9cf8:	0e 94 55 3c 	call	0x78aa	; 0x78aa <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    9cfc:	10 92 3c 31 	sts	0x313C, r1
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    9d00:	80 91 32 31 	lds	r24, 0x3132
    9d04:	88 23       	and	r24, r24
    9d06:	71 f0       	breq	.+28     	; 0x9d24 <__vector_53+0xa4>
    9d08:	80 91 30 31 	lds	r24, 0x3130
    9d0c:	88 23       	and	r24, r24
    9d0e:	51 f0       	breq	.+20     	; 0x9d24 <__vector_53+0xa4>
    9d10:	80 91 6b 31 	lds	r24, 0x316B
    9d14:	88 23       	and	r24, r24
    9d16:	31 f4       	brne	.+12     	; 0x9d24 <__vector_53+0xa4>
		//Debug_SendString("T Buffer1",true);
		SD_WriteTemperatureBuffer(1);
    9d18:	81 e0       	ldi	r24, 0x01	; 1
    9d1a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    9d1e:	10 92 32 31 	sts	0x3132, r1
    9d22:	11 c0       	rjmp	.+34     	; 0x9d46 <__vector_53+0xc6>
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    9d24:	80 91 33 31 	lds	r24, 0x3133
    9d28:	88 23       	and	r24, r24
    9d2a:	69 f0       	breq	.+26     	; 0x9d46 <__vector_53+0xc6>
    9d2c:	80 91 30 31 	lds	r24, 0x3130
    9d30:	88 23       	and	r24, r24
    9d32:	49 f0       	breq	.+18     	; 0x9d46 <__vector_53+0xc6>
    9d34:	80 91 6b 31 	lds	r24, 0x316B
    9d38:	88 23       	and	r24, r24
    9d3a:	29 f4       	brne	.+10     	; 0x9d46 <__vector_53+0xc6>
		//Debug_SendString("T Buffer2",true);
		SD_WriteTemperatureBuffer(2);
    9d3c:	82 e0       	ldi	r24, 0x02	; 2
    9d3e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    9d42:	10 92 33 31 	sts	0x3133, r1
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    9d46:	80 91 38 31 	lds	r24, 0x3138
    9d4a:	88 23       	and	r24, r24
    9d4c:	71 f0       	breq	.+28     	; 0x9d6a <__vector_53+0xea>
    9d4e:	80 91 30 31 	lds	r24, 0x3130
    9d52:	88 23       	and	r24, r24
    9d54:	51 f0       	breq	.+20     	; 0x9d6a <__vector_53+0xea>
    9d56:	80 91 6b 31 	lds	r24, 0x316B
    9d5a:	88 23       	and	r24, r24
    9d5c:	31 f4       	brne	.+12     	; 0x9d6a <__vector_53+0xea>
		//Debug_SendString("H Buffer1",true);
		SD_WriteHumidityBuffer(1);
    9d5e:	81 e0       	ldi	r24, 0x01	; 1
    9d60:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    9d64:	10 92 38 31 	sts	0x3138, r1
    9d68:	11 c0       	rjmp	.+34     	; 0x9d8c <__vector_53+0x10c>
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    9d6a:	80 91 39 31 	lds	r24, 0x3139
    9d6e:	88 23       	and	r24, r24
    9d70:	69 f0       	breq	.+26     	; 0x9d8c <__vector_53+0x10c>
    9d72:	80 91 30 31 	lds	r24, 0x3130
    9d76:	88 23       	and	r24, r24
    9d78:	49 f0       	breq	.+18     	; 0x9d8c <__vector_53+0x10c>
    9d7a:	80 91 6b 31 	lds	r24, 0x316B
    9d7e:	88 23       	and	r24, r24
    9d80:	29 f4       	brne	.+10     	; 0x9d8c <__vector_53+0x10c>
		//Debug_SendString("H Buffer2",true);
		SD_WriteHumidityBuffer(2);
    9d82:	82 e0       	ldi	r24, 0x02	; 2
    9d84:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    9d88:	10 92 39 31 	sts	0x3139, r1
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    9d8c:	80 91 35 31 	lds	r24, 0x3135
    9d90:	88 23       	and	r24, r24
    9d92:	71 f0       	breq	.+28     	; 0x9db0 <__vector_53+0x130>
    9d94:	80 91 30 31 	lds	r24, 0x3130
    9d98:	88 23       	and	r24, r24
    9d9a:	51 f0       	breq	.+20     	; 0x9db0 <__vector_53+0x130>
    9d9c:	80 91 6b 31 	lds	r24, 0x316B
    9da0:	88 23       	and	r24, r24
    9da2:	31 f4       	brne	.+12     	; 0x9db0 <__vector_53+0x130>
		//Debug_SendString("P Buffer1",true);
		SD_WritePressureBuffer(1);
    9da4:	81 e0       	ldi	r24, 0x01	; 1
    9da6:	0e 94 b8 3c 	call	0x7970	; 0x7970 <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    9daa:	10 92 35 31 	sts	0x3135, r1
    9dae:	11 c0       	rjmp	.+34     	; 0x9dd2 <__vector_53+0x152>
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    9db0:	80 91 36 31 	lds	r24, 0x3136
    9db4:	88 23       	and	r24, r24
    9db6:	69 f0       	breq	.+26     	; 0x9dd2 <__vector_53+0x152>
    9db8:	80 91 30 31 	lds	r24, 0x3130
    9dbc:	88 23       	and	r24, r24
    9dbe:	49 f0       	breq	.+18     	; 0x9dd2 <__vector_53+0x152>
    9dc0:	80 91 6b 31 	lds	r24, 0x316B
    9dc4:	88 23       	and	r24, r24
    9dc6:	29 f4       	brne	.+10     	; 0x9dd2 <__vector_53+0x152>
		//Debug_SendString("P Buffer2",true);
		SD_WritePressureBuffer(2);
    9dc8:	82 e0       	ldi	r24, 0x02	; 2
    9dca:	0e 94 b8 3c 	call	0x7970	; 0x7970 <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    9dce:	10 92 36 31 	sts	0x3136, r1
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    9dd2:	80 91 3f 31 	lds	r24, 0x313F
    9dd6:	88 23       	and	r24, r24
    9dd8:	71 f0       	breq	.+28     	; 0x9df6 <__vector_53+0x176>
    9dda:	80 91 30 31 	lds	r24, 0x3130
    9dde:	88 23       	and	r24, r24
    9de0:	51 f0       	breq	.+20     	; 0x9df6 <__vector_53+0x176>
    9de2:	80 91 6b 31 	lds	r24, 0x316B
    9de6:	88 23       	and	r24, r24
    9de8:	31 f4       	brne	.+12     	; 0x9df6 <__vector_53+0x176>
		//Debug_SendString("L Buffer1",true);
		SD_WriteLightBuffer(1);
    9dea:	81 e0       	ldi	r24, 0x01	; 1
    9dec:	0e 94 b4 3b 	call	0x7768	; 0x7768 <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    9df0:	10 92 3f 31 	sts	0x313F, r1
    9df4:	11 c0       	rjmp	.+34     	; 0x9e18 <__vector_53+0x198>
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    9df6:	80 91 40 31 	lds	r24, 0x3140
    9dfa:	88 23       	and	r24, r24
    9dfc:	69 f0       	breq	.+26     	; 0x9e18 <__vector_53+0x198>
    9dfe:	80 91 30 31 	lds	r24, 0x3130
    9e02:	88 23       	and	r24, r24
    9e04:	49 f0       	breq	.+18     	; 0x9e18 <__vector_53+0x198>
    9e06:	80 91 6b 31 	lds	r24, 0x316B
    9e0a:	88 23       	and	r24, r24
    9e0c:	29 f4       	brne	.+10     	; 0x9e18 <__vector_53+0x198>
		//Debug_SendString("L Buffer2",true);
		SD_WriteLightBuffer(2);
    9e0e:	82 e0       	ldi	r24, 0x02	; 2
    9e10:	0e 94 b4 3b 	call	0x7768	; 0x7768 <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    9e14:	10 92 40 31 	sts	0x3140, r1
	}

	if(okToSendAirQuality && recording && !restartingFile){
    9e18:	80 91 1c 31 	lds	r24, 0x311C
    9e1c:	88 23       	and	r24, r24
    9e1e:	61 f0       	breq	.+24     	; 0x9e38 <__vector_53+0x1b8>
    9e20:	80 91 30 31 	lds	r24, 0x3130
    9e24:	88 23       	and	r24, r24
    9e26:	41 f0       	breq	.+16     	; 0x9e38 <__vector_53+0x1b8>
    9e28:	80 91 6b 31 	lds	r24, 0x316B
    9e2c:	88 23       	and	r24, r24
    9e2e:	21 f4       	brne	.+8      	; 0x9e38 <__vector_53+0x1b8>
		//Debug_SendString("A Buffer",true);
		SD_WriteAirSample();
    9e30:	0e 94 44 3b 	call	0x7688	; 0x7688 <SD_WriteAirSample>
		okToSendAirQuality = false;
    9e34:	10 92 1c 31 	sts	0x311C, r1
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    9e38:	80 91 5b 31 	lds	r24, 0x315B
    9e3c:	88 23       	and	r24, r24
    9e3e:	09 f4       	brne	.+2      	; 0x9e42 <__vector_53+0x1c2>
    9e40:	5b c0       	rjmp	.+182    	; 0x9ef8 <__vector_53+0x278>
    9e42:	80 91 92 31 	lds	r24, 0x3192
    9e46:	90 91 93 31 	lds	r25, 0x3193
    9e4a:	a0 91 94 31 	lds	r26, 0x3194
    9e4e:	b0 91 95 31 	lds	r27, 0x3195
    9e52:	86 5b       	subi	r24, 0xB6	; 182
    9e54:	93 40       	sbci	r25, 0x03	; 3
    9e56:	a0 40       	sbci	r26, 0x00	; 0
    9e58:	b0 40       	sbci	r27, 0x00	; 0
    9e5a:	08 f0       	brcs	.+2      	; 0x9e5e <__vector_53+0x1de>
    9e5c:	4d c0       	rjmp	.+154    	; 0x9ef8 <__vector_53+0x278>
		SD_Init();
    9e5e:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <SD_Init>
		SD_StartLogFile(UNIX_time);								// open file
    9e62:	60 91 2b 31 	lds	r22, 0x312B
    9e66:	70 91 2c 31 	lds	r23, 0x312C
    9e6a:	80 91 2d 31 	lds	r24, 0x312D
    9e6e:	90 91 2e 31 	lds	r25, 0x312E
    9e72:	0e 94 91 4d 	call	0x9b22	; 0x9b22 <SD_StartLogFile>
    9e76:	88 ee       	ldi	r24, 0xE8	; 232
    9e78:	93 e0       	ldi	r25, 0x03	; 3
    9e7a:	20 e7       	ldi	r18, 0x70	; 112
    9e7c:	31 e0       	ldi	r19, 0x01	; 1
    9e7e:	f9 01       	movw	r30, r18
    9e80:	31 97       	sbiw	r30, 0x01	; 1
    9e82:	f1 f7       	brne	.-4      	; 0x9e80 <__vector_53+0x200>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9e84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9e86:	d9 f7       	brne	.-10     	; 0x9e7e <__vector_53+0x1fe>
		_delay_ms(100);

        recordFileRestartCounter = 0;
    9e88:	10 92 7f 31 	sts	0x317F, r1
    9e8c:	10 92 80 31 	sts	0x3180, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9e90:	e0 e2       	ldi	r30, 0x20	; 32
    9e92:	f6 e0       	ldi	r31, 0x06	; 6
    9e94:	11 e0       	ldi	r17, 0x01	; 1
    9e96:	16 83       	std	Z+6, r17	; 0x06

		Leds_Clear(sd_Green);
		Leds_Clear(wifi_Green);
		timeRecordingStarted = UNIX_time;
    9e98:	80 e4       	ldi	r24, 0x40	; 64
    9e9a:	86 83       	std	Z+6, r24	; 0x06
    9e9c:	80 91 2b 31 	lds	r24, 0x312B
    9ea0:	90 91 2c 31 	lds	r25, 0x312C
    9ea4:	a0 91 2d 31 	lds	r26, 0x312D
    9ea8:	b0 91 2e 31 	lds	r27, 0x312E
    9eac:	80 93 fc 30 	sts	0x30FC, r24
    9eb0:	90 93 fd 30 	sts	0x30FD, r25
    9eb4:	a0 93 fe 30 	sts	0x30FE, r26
    9eb8:	b0 93 ff 30 	sts	0x30FF, r27

		//Debug_SendString("RTC Block: ",false);							// send rtc block
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    9ebc:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    9ec0:	20 91 2b 31 	lds	r18, 0x312B
    9ec4:	30 91 2c 31 	lds	r19, 0x312C
    9ec8:	40 91 2d 31 	lds	r20, 0x312D
    9ecc:	50 91 2e 31 	lds	r21, 0x312E
    9ed0:	0e 94 13 3a 	call	0x7426	; 0x7426 <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    9ed4:	80 91 1a 31 	lds	r24, 0x311A
    9ed8:	90 91 1b 31 	lds	r25, 0x311B
    9edc:	80 93 18 31 	sts	0x3118, r24
    9ee0:	90 93 19 31 	sts	0x3119, r25
		//Debug_SendString(ltoa(UNIX_time,temp3,10),false);
		//Debug_SendString(", ",false);
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp3,10),true);

		Rs232_ClearBuffer();
		rs232Recording = true;
    9ee4:	10 93 25 31 	sts	0x3125, r17
		recording = true;
    9ee8:	10 93 30 31 	sts	0x3130, r17
		okToOpenLogFile = false;
    9eec:	10 92 5b 31 	sts	0x315B, r1
		directoryOpened = false;
    9ef0:	10 92 61 31 	sts	0x3161, r1
		okToReopenDirectory = true;
    9ef4:	10 93 60 31 	sts	0x3160, r17
	}

	if(okToCloseLogFile){
    9ef8:	80 91 5d 31 	lds	r24, 0x315D
    9efc:	88 23       	and	r24, r24
    9efe:	49 f0       	breq	.+18     	; 0x9f12 <__vector_53+0x292>
		SD_Close();
    9f00:	0e 94 18 2b 	call	0x5630	; 0x5630 <SD_Close>
		okToCloseLogFile = false;
    9f04:	10 92 5d 31 	sts	0x315D, r1
		directoryOpened = false;
    9f08:	10 92 61 31 	sts	0x3161, r1
		okToReopenDirectory = true;
    9f0c:	81 e0       	ldi	r24, 0x01	; 1
    9f0e:	80 93 60 31 	sts	0x3160, r24
	}

	if(okToSendRTCBlock && recording){
    9f12:	80 91 42 31 	lds	r24, 0x3142
    9f16:	88 23       	and	r24, r24
    9f18:	91 f0       	breq	.+36     	; 0x9f3e <__vector_53+0x2be>
    9f1a:	80 91 30 31 	lds	r24, 0x3130
    9f1e:	88 23       	and	r24, r24
    9f20:	71 f0       	breq	.+28     	; 0x9f3e <__vector_53+0x2be>
		//Debug_SendString("RTC Block: ",false);
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    9f22:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    9f26:	20 91 2b 31 	lds	r18, 0x312B
    9f2a:	30 91 2c 31 	lds	r19, 0x312C
    9f2e:	40 91 2d 31 	lds	r20, 0x312D
    9f32:	50 91 2e 31 	lds	r21, 0x312E
    9f36:	0e 94 13 3a 	call	0x7426	; 0x7426 <SD_WriteRTCBlock>
		//Debug_SendString(ltoa(UNIX_time,temp3,10),false);
		//Debug_SendString(", ",false);
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp3,10),true);
		okToSendRTCBlock = false;
    9f3a:	10 92 42 31 	sts	0x3142, r1
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    9f3e:	80 91 5f 31 	lds	r24, 0x315F
    9f42:	88 23       	and	r24, r24
    9f44:	09 f4       	brne	.+2      	; 0x9f48 <__vector_53+0x2c8>
    9f46:	63 c0       	rjmp	.+198    	; 0xa00e <__vector_53+0x38e>
	//Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    9f48:	80 91 a8 06 	lds	r24, 0x06A8
    9f4c:	80 fd       	sbrc	r24, 0
    9f4e:	5f c0       	rjmp	.+190    	; 0xa00e <__vector_53+0x38e>
    9f50:	36 c2       	rjmp	.+1132   	; 0xa3be <__vector_53+0x73e>
		if(okToReopenDirectory){
    9f52:	80 91 60 31 	lds	r24, 0x3160
    9f56:	88 23       	and	r24, r24
    9f58:	69 f0       	breq	.+26     	; 0x9f74 <__vector_53+0x2f4>
			if(f_opendir(&dir, "/") == FR_OK){
    9f5a:	83 ed       	ldi	r24, 0xD3	; 211
    9f5c:	9e e4       	ldi	r25, 0x4E	; 78
    9f5e:	67 ef       	ldi	r22, 0xF7	; 247
    9f60:	72 e2       	ldi	r23, 0x22	; 34
    9f62:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <f_opendir>
    9f66:	88 23       	and	r24, r24
    9f68:	29 f4       	brne	.+10     	; 0x9f74 <__vector_53+0x2f4>
				directoryOpened = true;
    9f6a:	81 e0       	ldi	r24, 0x01	; 1
    9f6c:	80 93 61 31 	sts	0x3161, r24
				okToReopenDirectory = false;
    9f70:	10 92 60 31 	sts	0x3160, r1
			}
		}

		if(directoryOpened){
    9f74:	80 91 61 31 	lds	r24, 0x3161
    9f78:	88 23       	and	r24, r24
    9f7a:	09 f4       	brne	.+2      	; 0x9f7e <__vector_53+0x2fe>
    9f7c:	48 c0       	rjmp	.+144    	; 0xa00e <__vector_53+0x38e>
			if((f_readdir(&dir, &fno) == FR_OK)){
    9f7e:	83 ed       	ldi	r24, 0xD3	; 211
    9f80:	9e e4       	ldi	r25, 0x4E	; 78
    9f82:	65 e8       	ldi	r22, 0x85	; 133
    9f84:	72 e4       	ldi	r23, 0x42	; 66
    9f86:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <f_readdir>
    9f8a:	88 23       	and	r24, r24
    9f8c:	09 f0       	breq	.+2      	; 0x9f90 <__vector_53+0x310>
    9f8e:	3f c0       	rjmp	.+126    	; 0xa00e <__vector_53+0x38e>
				if(fno.fname[0] == 0){
    9f90:	80 91 8e 42 	lds	r24, 0x428E
    9f94:	88 23       	and	r24, r24
    9f96:	31 f4       	brne	.+12     	; 0x9fa4 <__vector_53+0x324>
					directoryOpened = false;
    9f98:	10 92 61 31 	sts	0x3161, r1
					okToReopenDirectory = true;
    9f9c:	81 e0       	ldi	r24, 0x01	; 1
    9f9e:	80 93 60 31 	sts	0x3160, r24
    9fa2:	35 c0       	rjmp	.+106    	; 0xa00e <__vector_53+0x38e>
				} else {
					if(recording){
    9fa4:	80 91 30 31 	lds	r24, 0x3130
    9fa8:	88 23       	and	r24, r24
    9faa:	c1 f0       	breq	.+48     	; 0x9fdc <__vector_53+0x35c>
						if((strcasecmp(currentLogFile,fno.fname)) > 0){		// file is NOT the current file
    9fac:	85 e5       	ldi	r24, 0x55	; 85
    9fae:	9a e3       	ldi	r25, 0x3A	; 58
    9fb0:	6e e8       	ldi	r22, 0x8E	; 142
    9fb2:	72 e4       	ldi	r23, 0x42	; 66
    9fb4:	0e 94 a7 58 	call	0xb14e	; 0xb14e <strcasecmp>
    9fb8:	18 16       	cp	r1, r24
    9fba:	19 06       	cpc	r1, r25
    9fbc:	44 f5       	brge	.+80     	; 0xa00e <__vector_53+0x38e>
							if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9fbe:	8e e8       	ldi	r24, 0x8E	; 142
    9fc0:	92 e4       	ldi	r25, 0x42	; 66
    9fc2:	69 e0       	ldi	r22, 0x09	; 9
    9fc4:	76 e2       	ldi	r23, 0x26	; 38
    9fc6:	0e 94 ba 58 	call	0xb174	; 0xb174 <strcasestr>
    9fca:	89 2b       	or	r24, r25
    9fcc:	01 f1       	breq	.+64     	; 0xa00e <__vector_53+0x38e>
								if(strcasestr(fno.fname,".BTU") == NULL){
    9fce:	8e e8       	ldi	r24, 0x8E	; 142
    9fd0:	92 e4       	ldi	r25, 0x42	; 66
    9fd2:	6d e0       	ldi	r22, 0x0D	; 13
    9fd4:	76 e2       	ldi	r23, 0x26	; 38
    9fd6:	0e 94 ba 58 	call	0xb174	; 0xb174 <strcasestr>
    9fda:	0e c0       	rjmp	.+28     	; 0x9ff8 <__vector_53+0x378>
									okToUpload= true;
								}
							}
						}
					} else {
						if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9fdc:	8e e8       	ldi	r24, 0x8E	; 142
    9fde:	92 e4       	ldi	r25, 0x42	; 66
    9fe0:	69 e0       	ldi	r22, 0x09	; 9
    9fe2:	76 e2       	ldi	r23, 0x26	; 38
    9fe4:	0e 94 ba 58 	call	0xb174	; 0xb174 <strcasestr>
    9fe8:	89 2b       	or	r24, r25
    9fea:	89 f0       	breq	.+34     	; 0xa00e <__vector_53+0x38e>
							if(strcasestr(fno.fname,".BTU") == NULL){
    9fec:	8e e8       	ldi	r24, 0x8E	; 142
    9fee:	92 e4       	ldi	r25, 0x42	; 66
    9ff0:	6d e0       	ldi	r22, 0x0D	; 13
    9ff2:	76 e2       	ldi	r23, 0x26	; 38
    9ff4:	0e 94 ba 58 	call	0xb174	; 0xb174 <strcasestr>
    9ff8:	89 2b       	or	r24, r25
    9ffa:	49 f4       	brne	.+18     	; 0xa00e <__vector_53+0x38e>
								strcpy(fileToUpload,fno.fname);
    9ffc:	8e ee       	ldi	r24, 0xEE	; 238
    9ffe:	99 e3       	ldi	r25, 0x39	; 57
    a000:	6e e8       	ldi	r22, 0x8E	; 142
    a002:	72 e4       	ldi	r23, 0x42	; 66
    a004:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
								okToUpload = true;
    a008:	81 e0       	ldi	r24, 0x01	; 1
    a00a:	80 93 65 31 	sts	0x3165, r24
				}
			}
		}
	}

	if(okToOpenFileToUpload){
    a00e:	80 91 68 31 	lds	r24, 0x3168
    a012:	88 23       	and	r24, r24
    a014:	51 f1       	breq	.+84     	; 0xa06a <__vector_53+0x3ea>
	   f_stat(fileToUpload,&fno);
    a016:	8e ee       	ldi	r24, 0xEE	; 238
    a018:	99 e3       	ldi	r25, 0x39	; 57
    a01a:	65 e8       	ldi	r22, 0x85	; 133
    a01c:	72 e4       	ldi	r23, 0x42	; 66
    a01e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <f_stat>
	   uploadFileSize = fno.fsize;
    a022:	80 91 85 42 	lds	r24, 0x4285
    a026:	90 91 86 42 	lds	r25, 0x4286
    a02a:	a0 91 87 42 	lds	r26, 0x4287
    a02e:	b0 91 88 42 	lds	r27, 0x4288
    a032:	80 93 6f 31 	sts	0x316F, r24
    a036:	90 93 70 31 	sts	0x3170, r25
    a03a:	a0 93 71 31 	sts	0x3171, r26
    a03e:	b0 93 72 31 	sts	0x3172, r27
	   f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a042:	89 ee       	ldi	r24, 0xE9	; 233
    a044:	9e e4       	ldi	r25, 0x4E	; 78
    a046:	6e ee       	ldi	r22, 0xEE	; 238
    a048:	79 e3       	ldi	r23, 0x39	; 57
    a04a:	43 e1       	ldi	r20, 0x13	; 19
    a04c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <f_open>
	   f_lseek(&Upload_File, 0);
    a050:	89 ee       	ldi	r24, 0xE9	; 233
    a052:	9e e4       	ldi	r25, 0x4E	; 78
    a054:	40 e0       	ldi	r20, 0x00	; 0
    a056:	50 e0       	ldi	r21, 0x00	; 0
    a058:	60 e0       	ldi	r22, 0x00	; 0
    a05a:	70 e0       	ldi	r23, 0x00	; 0
    a05c:	0e 94 97 1c 	call	0x392e	; 0x392e <f_lseek>
	   uploadFileOpened = true;
    a060:	81 e0       	ldi	r24, 0x01	; 1
    a062:	80 93 98 2e 	sts	0x2E98, r24
	   okToOpenFileToUpload = false;
    a066:	10 92 68 31 	sts	0x3168, r1
	}

    if(okToFillUploadFileBuffer){
    a06a:	80 91 69 31 	lds	r24, 0x3169
    a06e:	88 23       	and	r24, r24
    a070:	81 f0       	breq	.+32     	; 0xa092 <__vector_53+0x412>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    a072:	89 ee       	ldi	r24, 0xE9	; 233
    a074:	9e e4       	ldi	r25, 0x4E	; 78
    a076:	6e ef       	ldi	r22, 0xFE	; 254
    a078:	75 e3       	ldi	r23, 0x35	; 53
    a07a:	48 ee       	ldi	r20, 0xE8	; 232
    a07c:	53 e0       	ldi	r21, 0x03	; 3
    a07e:	9e 01       	movw	r18, r28
    a080:	2f 5f       	subi	r18, 0xFF	; 255
    a082:	3f 4f       	sbci	r19, 0xFF	; 255
    a084:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <f_read>
        okToFillUploadFileBuffer = false;
    a088:	10 92 69 31 	sts	0x3169, r1
        uploadFileBufferFull = true;
    a08c:	81 e0       	ldi	r24, 0x01	; 1
    a08e:	80 93 6a 31 	sts	0x316A, r24
    }


	if(okToCloseUploadFile){
    a092:	80 91 63 31 	lds	r24, 0x3163
    a096:	88 23       	and	r24, r24
    a098:	91 f0       	breq	.+36     	; 0xa0be <__vector_53+0x43e>
	    f_close(&Upload_File);
    a09a:	89 ee       	ldi	r24, 0xE9	; 233
    a09c:	9e e4       	ldi	r25, 0x4E	; 78
    a09e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <f_close>
	    if(okToRenameUploadFile){
    a0a2:	80 91 64 31 	lds	r24, 0x3164
    a0a6:	88 23       	and	r24, r24
    a0a8:	41 f0       	breq	.+16     	; 0xa0ba <__vector_53+0x43a>
	       f_rename(fileToUpload,newFileName);
    a0aa:	8e ee       	ldi	r24, 0xEE	; 238
    a0ac:	99 e3       	ldi	r25, 0x39	; 57
    a0ae:	68 e6       	ldi	r22, 0x68	; 104
    a0b0:	74 e5       	ldi	r23, 0x54	; 84
    a0b2:	0e 94 0a 24 	call	0x4814	; 0x4814 <f_rename>
	       //f_unlink(fileToUpload);
	       //Debug_SendString("Renaming File",true);
	       okToRenameUploadFile = false;
    a0b6:	10 92 64 31 	sts	0x3164, r1
	    }
		okToCloseUploadFile = false;
    a0ba:	10 92 63 31 	sts	0x3163, r1
	}




	if(okToWriteUploaderLogFile){
    a0be:	80 91 89 31 	lds	r24, 0x3189
    a0c2:	88 23       	and	r24, r24
    a0c4:	09 f4       	brne	.+2      	; 0xa0c8 <__vector_53+0x448>
    a0c6:	d2 c0       	rjmp	.+420    	; 0xa26c <__vector_53+0x5ec>
        //Debug_SendString("Updating uploadLg File",true);
        f_stat("/uploadLg.txt",&fno);
    a0c8:	82 e1       	ldi	r24, 0x12	; 18
    a0ca:	96 e2       	ldi	r25, 0x26	; 38
    a0cc:	65 e8       	ldi	r22, 0x85	; 133
    a0ce:	72 e4       	ldi	r23, 0x42	; 66
    a0d0:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a0d4:	89 ee       	ldi	r24, 0xE9	; 233
    a0d6:	9e e4       	ldi	r25, 0x4E	; 78
    a0d8:	62 e1       	ldi	r22, 0x12	; 18
    a0da:	76 e2       	ldi	r23, 0x26	; 38
    a0dc:	43 e1       	ldi	r20, 0x13	; 19
    a0de:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <f_open>
        f_lseek(&Upload_File, fno.fsize);
    a0e2:	40 91 85 42 	lds	r20, 0x4285
    a0e6:	50 91 86 42 	lds	r21, 0x4286
    a0ea:	60 91 87 42 	lds	r22, 0x4287
    a0ee:	70 91 88 42 	lds	r23, 0x4288
    a0f2:	89 ee       	ldi	r24, 0xE9	; 233
    a0f4:	9e e4       	ldi	r25, 0x4E	; 78
    a0f6:	0e 94 97 1c 	call	0x392e	; 0x392e <f_lseek>
        f_puts("File Name: ",&Upload_File);
    a0fa:	80 e2       	ldi	r24, 0x20	; 32
    a0fc:	96 e2       	ldi	r25, 0x26	; 38
    a0fe:	69 ee       	ldi	r22, 0xE9	; 233
    a100:	7e e4       	ldi	r23, 0x4E	; 78
    a102:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    a106:	8e ee       	ldi	r24, 0xEE	; 238
    a108:	99 e3       	ldi	r25, 0x39	; 57
    a10a:	69 ee       	ldi	r22, 0xE9	; 233
    a10c:	7e e4       	ldi	r23, 0x4E	; 78
    a10e:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(", Size: ",&Upload_File);
    a112:	8c e2       	ldi	r24, 0x2C	; 44
    a114:	96 e2       	ldi	r25, 0x26	; 38
    a116:	69 ee       	ldi	r22, 0xE9	; 233
    a118:	7e e4       	ldi	r23, 0x4E	; 78
    a11a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    a11e:	60 91 6f 31 	lds	r22, 0x316F
    a122:	70 91 70 31 	lds	r23, 0x3170
    a126:	80 91 71 31 	lds	r24, 0x3171
    a12a:	90 91 72 31 	lds	r25, 0x3172
    a12e:	4b e1       	ldi	r20, 0x1B	; 27
    a130:	59 e5       	ldi	r21, 0x59	; 89
    a132:	2a e0       	ldi	r18, 0x0A	; 10
    a134:	30 e0       	ldi	r19, 0x00	; 0
    a136:	0e 94 45 59 	call	0xb28a	; 0xb28a <ltoa>
    a13a:	69 ee       	ldi	r22, 0xE9	; 233
    a13c:	7e e4       	ldi	r23, 0x4E	; 78
    a13e:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(" bytes, Response: ",&Upload_File);
    a142:	85 e3       	ldi	r24, 0x35	; 53
    a144:	96 e2       	ldi	r25, 0x26	; 38
    a146:	69 ee       	ldi	r22, 0xE9	; 233
    a148:	7e e4       	ldi	r23, 0x4E	; 78
    a14a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(httpResponse,&Upload_File);
    a14e:	8d e2       	ldi	r24, 0x2D	; 45
    a150:	91 e5       	ldi	r25, 0x51	; 81
    a152:	69 ee       	ldi	r22, 0xE9	; 233
    a154:	7e e4       	ldi	r23, 0x4E	; 78
    a156:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(", Successful Records: ",&Upload_File);
    a15a:	88 e4       	ldi	r24, 0x48	; 72
    a15c:	96 e2       	ldi	r25, 0x26	; 38
    a15e:	69 ee       	ldi	r22, 0xE9	; 233
    a160:	7e e4       	ldi	r23, 0x4E	; 78
    a162:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(successfulBinaryRecordsString,&Upload_File);
    a166:	8c e8       	ldi	r24, 0x8C	; 140
    a168:	98 e4       	ldi	r25, 0x48	; 72
    a16a:	69 ee       	ldi	r22, 0xE9	; 233
    a16c:	7e e4       	ldi	r23, 0x4E	; 78
    a16e:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(", Failed Records: ",&Upload_File);
    a172:	8f e5       	ldi	r24, 0x5F	; 95
    a174:	96 e2       	ldi	r25, 0x26	; 38
    a176:	69 ee       	ldi	r22, 0xE9	; 233
    a178:	7e e4       	ldi	r23, 0x4E	; 78
    a17a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(failedBinaryRecordsString,&Upload_File);
    a17e:	85 eb       	ldi	r24, 0xB5	; 181
    a180:	99 e5       	ldi	r25, 0x59	; 89
    a182:	69 ee       	ldi	r22, 0xE9	; 233
    a184:	7e e4       	ldi	r23, 0x4E	; 78
    a186:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(", Time to upload: ",&Upload_File);
    a18a:	82 e7       	ldi	r24, 0x72	; 114
    a18c:	96 e2       	ldi	r25, 0x26	; 38
    a18e:	69 ee       	ldi	r22, 0xE9	; 233
    a190:	7e e4       	ldi	r23, 0x4E	; 78
    a192:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(ltoa(uploadTimeStop - uploadTimeStart,temp3,10),&Upload_File);
    a196:	60 91 67 3a 	lds	r22, 0x3A67
    a19a:	70 91 68 3a 	lds	r23, 0x3A68
    a19e:	80 91 69 3a 	lds	r24, 0x3A69
    a1a2:	90 91 6a 3a 	lds	r25, 0x3A6A
    a1a6:	20 91 0b 3a 	lds	r18, 0x3A0B
    a1aa:	30 91 0c 3a 	lds	r19, 0x3A0C
    a1ae:	40 91 0d 3a 	lds	r20, 0x3A0D
    a1b2:	50 91 0e 3a 	lds	r21, 0x3A0E
    a1b6:	62 1b       	sub	r22, r18
    a1b8:	73 0b       	sbc	r23, r19
    a1ba:	84 0b       	sbc	r24, r20
    a1bc:	95 0b       	sbc	r25, r21
    a1be:	4b e1       	ldi	r20, 0x1B	; 27
    a1c0:	59 e5       	ldi	r21, 0x59	; 89
    a1c2:	2a e0       	ldi	r18, 0x0A	; 10
    a1c4:	30 e0       	ldi	r19, 0x00	; 0
    a1c6:	0e 94 45 59 	call	0xb28a	; 0xb28a <ltoa>
    a1ca:	69 ee       	ldi	r22, 0xE9	; 233
    a1cc:	7e e4       	ldi	r23, 0x4E	; 78
    a1ce:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(" secs, Speed of upload: ",&Upload_File);
    a1d2:	85 e8       	ldi	r24, 0x85	; 133
    a1d4:	96 e2       	ldi	r25, 0x26	; 38
    a1d6:	69 ee       	ldi	r22, 0xE9	; 233
    a1d8:	7e e4       	ldi	r23, 0x4E	; 78
    a1da:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(ltoa(uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)),temp3,10),&Upload_File);
    a1de:	60 91 6f 31 	lds	r22, 0x316F
    a1e2:	70 91 70 31 	lds	r23, 0x3170
    a1e6:	80 91 71 31 	lds	r24, 0x3171
    a1ea:	90 91 72 31 	lds	r25, 0x3172
    a1ee:	20 91 67 3a 	lds	r18, 0x3A67
    a1f2:	30 91 68 3a 	lds	r19, 0x3A68
    a1f6:	40 91 69 3a 	lds	r20, 0x3A69
    a1fa:	50 91 6a 3a 	lds	r21, 0x3A6A
    a1fe:	e0 90 0b 3a 	lds	r14, 0x3A0B
    a202:	f0 90 0c 3a 	lds	r15, 0x3A0C
    a206:	00 91 0d 3a 	lds	r16, 0x3A0D
    a20a:	10 91 0e 3a 	lds	r17, 0x3A0E
    a20e:	2e 19       	sub	r18, r14
    a210:	3f 09       	sbc	r19, r15
    a212:	40 0b       	sbc	r20, r16
    a214:	51 0b       	sbc	r21, r17
    a216:	a7 e0       	ldi	r26, 0x07	; 7
    a218:	22 0f       	add	r18, r18
    a21a:	33 1f       	adc	r19, r19
    a21c:	44 1f       	adc	r20, r20
    a21e:	55 1f       	adc	r21, r21
    a220:	aa 95       	dec	r26
    a222:	d1 f7       	brne	.-12     	; 0xa218 <__vector_53+0x598>
    a224:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    a228:	ca 01       	movw	r24, r20
    a22a:	b9 01       	movw	r22, r18
    a22c:	4b e1       	ldi	r20, 0x1B	; 27
    a22e:	59 e5       	ldi	r21, 0x59	; 89
    a230:	2a e0       	ldi	r18, 0x0A	; 10
    a232:	30 e0       	ldi	r19, 0x00	; 0
    a234:	0e 94 45 59 	call	0xb28a	; 0xb28a <ltoa>
    a238:	69 ee       	ldi	r22, 0xE9	; 233
    a23a:	7e e4       	ldi	r23, 0x4E	; 78
    a23c:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>

        f_puts(" kbps",&Upload_File);
    a240:	8e e9       	ldi	r24, 0x9E	; 158
    a242:	96 e2       	ldi	r25, 0x26	; 38
    a244:	69 ee       	ldi	r22, 0xE9	; 233
    a246:	7e e4       	ldi	r23, 0x4E	; 78
    a248:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_putc(13,&Upload_File);
    a24c:	8d e0       	ldi	r24, 0x0D	; 13
    a24e:	90 e0       	ldi	r25, 0x00	; 0
    a250:	69 ee       	ldi	r22, 0xE9	; 233
    a252:	7e e4       	ldi	r23, 0x4E	; 78
    a254:	0e 94 ce 2a 	call	0x559c	; 0x559c <f_putc>
        f_sync(&Upload_File);
    a258:	89 ee       	ldi	r24, 0xE9	; 233
    a25a:	9e e4       	ldi	r25, 0x4E	; 78
    a25c:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>
	    f_close(&Upload_File);
    a260:	89 ee       	ldi	r24, 0xE9	; 233
    a262:	9e e4       	ldi	r25, 0x4E	; 78
    a264:	0e 94 8b 1c 	call	0x3916	; 0x3916 <f_close>
	    okToWriteUploaderLogFile = false;
    a268:	10 92 89 31 	sts	0x3189, r1
	}

	if(uploadFailed){
    a26c:	80 91 62 31 	lds	r24, 0x3162
    a270:	88 23       	and	r24, r24
    a272:	09 f4       	brne	.+2      	; 0xa276 <__vector_53+0x5f6>
    a274:	58 c0       	rjmp	.+176    	; 0xa326 <__vector_53+0x6a6>
        //Debug_SendString("Updating uploadLg File",true);
        f_stat("/uploadLg.txt",&fno);
    a276:	82 e1       	ldi	r24, 0x12	; 18
    a278:	96 e2       	ldi	r25, 0x26	; 38
    a27a:	65 e8       	ldi	r22, 0x85	; 133
    a27c:	72 e4       	ldi	r23, 0x42	; 66
    a27e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a282:	89 ee       	ldi	r24, 0xE9	; 233
    a284:	9e e4       	ldi	r25, 0x4E	; 78
    a286:	62 e1       	ldi	r22, 0x12	; 18
    a288:	76 e2       	ldi	r23, 0x26	; 38
    a28a:	43 e1       	ldi	r20, 0x13	; 19
    a28c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <f_open>
        if(fno.fsize > 0){
    a290:	40 91 85 42 	lds	r20, 0x4285
    a294:	50 91 86 42 	lds	r21, 0x4286
    a298:	60 91 87 42 	lds	r22, 0x4287
    a29c:	70 91 88 42 	lds	r23, 0x4288
    a2a0:	41 15       	cp	r20, r1
    a2a2:	51 05       	cpc	r21, r1
    a2a4:	61 05       	cpc	r22, r1
    a2a6:	71 05       	cpc	r23, r1
    a2a8:	21 f0       	breq	.+8      	; 0xa2b2 <__vector_53+0x632>
           f_lseek(&Upload_File, fno.fsize);
    a2aa:	89 ee       	ldi	r24, 0xE9	; 233
    a2ac:	9e e4       	ldi	r25, 0x4E	; 78
    a2ae:	0e 94 97 1c 	call	0x392e	; 0x392e <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    a2b2:	80 e2       	ldi	r24, 0x20	; 32
    a2b4:	96 e2       	ldi	r25, 0x26	; 38
    a2b6:	69 ee       	ldi	r22, 0xE9	; 233
    a2b8:	7e e4       	ldi	r23, 0x4E	; 78
    a2ba:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    a2be:	8e ee       	ldi	r24, 0xEE	; 238
    a2c0:	99 e3       	ldi	r25, 0x39	; 57
    a2c2:	69 ee       	ldi	r22, 0xE9	; 233
    a2c4:	7e e4       	ldi	r23, 0x4E	; 78
    a2c6:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(", Size: ",&Upload_File);
    a2ca:	8c e2       	ldi	r24, 0x2C	; 44
    a2cc:	96 e2       	ldi	r25, 0x26	; 38
    a2ce:	69 ee       	ldi	r22, 0xE9	; 233
    a2d0:	7e e4       	ldi	r23, 0x4E	; 78
    a2d2:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    a2d6:	60 91 6f 31 	lds	r22, 0x316F
    a2da:	70 91 70 31 	lds	r23, 0x3170
    a2de:	80 91 71 31 	lds	r24, 0x3171
    a2e2:	90 91 72 31 	lds	r25, 0x3172
    a2e6:	4b e1       	ldi	r20, 0x1B	; 27
    a2e8:	59 e5       	ldi	r21, 0x59	; 89
    a2ea:	2a e0       	ldi	r18, 0x0A	; 10
    a2ec:	30 e0       	ldi	r19, 0x00	; 0
    a2ee:	0e 94 45 59 	call	0xb28a	; 0xb28a <ltoa>
    a2f2:	69 ee       	ldi	r22, 0xE9	; 233
    a2f4:	7e e4       	ldi	r23, 0x4E	; 78
    a2f6:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
        f_puts(" bytes, uploadFailed failed...",&Upload_File);
    a2fa:	84 ea       	ldi	r24, 0xA4	; 164
    a2fc:	96 e2       	ldi	r25, 0x26	; 38
    a2fe:	69 ee       	ldi	r22, 0xE9	; 233
    a300:	7e e4       	ldi	r23, 0x4E	; 78
    a302:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>

        f_putc(13,&Upload_File);
    a306:	8d e0       	ldi	r24, 0x0D	; 13
    a308:	90 e0       	ldi	r25, 0x00	; 0
    a30a:	69 ee       	ldi	r22, 0xE9	; 233
    a30c:	7e e4       	ldi	r23, 0x4E	; 78
    a30e:	0e 94 ce 2a 	call	0x559c	; 0x559c <f_putc>
        f_sync(&Upload_File);
    a312:	89 ee       	ldi	r24, 0xE9	; 233
    a314:	9e e4       	ldi	r25, 0x4E	; 78
    a316:	0e 94 13 1c 	call	0x3826	; 0x3826 <f_sync>
	    f_close(&Upload_File);
    a31a:	89 ee       	ldi	r24, 0xE9	; 233
    a31c:	9e e4       	ldi	r25, 0x4E	; 78
    a31e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <f_close>
	    uploadFailed = false;
    a322:	10 92 62 31 	sts	0x3162, r1
	}

	if(okToGetRemainingSpace){
    a326:	80 91 8b 48 	lds	r24, 0x488B
    a32a:	88 23       	and	r24, r24
    a32c:	09 f4       	brne	.+2      	; 0xa330 <__vector_53+0x6b0>
    a32e:	4d c0       	rjmp	.+154    	; 0xa3ca <__vector_53+0x74a>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    a330:	83 ec       	ldi	r24, 0xC3	; 195
    a332:	96 e2       	ldi	r25, 0x26	; 38
    a334:	6a e8       	ldi	r22, 0x8A	; 138
    a336:	71 e3       	ldi	r23, 0x31	; 49
    a338:	4b e9       	ldi	r20, 0x9B	; 155
    a33a:	52 e4       	ldi	r21, 0x42	; 66
    a33c:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <f_getfree>
    a340:	88 23       	and	r24, r24
    a342:	41 f0       	breq	.+16     	; 0xa354 <__vector_53+0x6d4>
           spaceRemainingOnDisk = 0;
    a344:	10 92 8a 31 	sts	0x318A, r1
    a348:	10 92 8b 31 	sts	0x318B, r1
    a34c:	10 92 8c 31 	sts	0x318C, r1
    a350:	10 92 8d 31 	sts	0x318D, r1
	    }
	    totalDiskSpace = fs->max_clust;
    a354:	e0 91 9b 42 	lds	r30, 0x429B
    a358:	f0 91 9c 42 	lds	r31, 0x429C
    a35c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a35e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a360:	04 8d       	ldd	r16, Z+28	; 0x1c
    a362:	15 8d       	ldd	r17, Z+29	; 0x1d
    a364:	e0 92 8e 31 	sts	0x318E, r14
    a368:	f0 92 8f 31 	sts	0x318F, r15
    a36c:	00 93 90 31 	sts	0x3190, r16
    a370:	10 93 91 31 	sts	0x3191, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
	    percentDiskUsed /= totalDiskSpace;
    a374:	80 91 8a 31 	lds	r24, 0x318A
    a378:	90 91 8b 31 	lds	r25, 0x318B
    a37c:	a0 91 8c 31 	lds	r26, 0x318C
    a380:	b0 91 8d 31 	lds	r27, 0x318D
    a384:	a8 01       	movw	r20, r16
    a386:	97 01       	movw	r18, r14
    a388:	28 1b       	sub	r18, r24
    a38a:	39 0b       	sbc	r19, r25
    a38c:	4a 0b       	sbc	r20, r26
    a38e:	5b 0b       	sbc	r21, r27
    a390:	ca 01       	movw	r24, r20
    a392:	b9 01       	movw	r22, r18
    a394:	28 ee       	ldi	r18, 0xE8	; 232
    a396:	33 e0       	ldi	r19, 0x03	; 3
    a398:	40 e0       	ldi	r20, 0x00	; 0
    a39a:	50 e0       	ldi	r21, 0x00	; 0
    a39c:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    a3a0:	a8 01       	movw	r20, r16
    a3a2:	97 01       	movw	r18, r14
    a3a4:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    a3a8:	20 93 92 31 	sts	0x3192, r18
    a3ac:	30 93 93 31 	sts	0x3193, r19
    a3b0:	40 93 94 31 	sts	0x3194, r20
    a3b4:	50 93 95 31 	sts	0x3195, r21
	    Debug_SendString(temp3,true);
        sprintf(temp3,"Percent Used  : %u.%u",((uint8_t)percentDiskUsed)/10,((uint8_t)percentDiskUsed)%10);
        Debug_SendString(temp3,false);
        Debug_SendString("%",true);  */

	    okToGetRemainingSpace = false;
    a3b8:	10 92 8b 48 	sts	0x488B, r1
    a3bc:	06 c0       	rjmp	.+12     	; 0xa3ca <__vector_53+0x74a>
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp3,10),true);
		okToSendRTCBlock = false;
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    a3be:	80 91 66 31 	lds	r24, 0x3166
    a3c2:	88 23       	and	r24, r24
    a3c4:	09 f4       	brne	.+2      	; 0xa3c8 <__vector_53+0x748>
    a3c6:	c5 cd       	rjmp	.-1142   	; 0x9f52 <__vector_53+0x2d2>
    a3c8:	22 ce       	rjmp	.-956    	; 0xa00e <__vector_53+0x38e>
        Debug_SendString(temp3,false);
        Debug_SendString("%",true);  */

	    okToGetRemainingSpace = false;
	}
}
    a3ca:	0f 90       	pop	r0
    a3cc:	0f 90       	pop	r0
    a3ce:	cf 91       	pop	r28
    a3d0:	df 91       	pop	r29
    a3d2:	ff 91       	pop	r31
    a3d4:	ef 91       	pop	r30
    a3d6:	bf 91       	pop	r27
    a3d8:	af 91       	pop	r26
    a3da:	9f 91       	pop	r25
    a3dc:	8f 91       	pop	r24
    a3de:	7f 91       	pop	r23
    a3e0:	6f 91       	pop	r22
    a3e2:	5f 91       	pop	r21
    a3e4:	4f 91       	pop	r20
    a3e6:	3f 91       	pop	r19
    a3e8:	2f 91       	pop	r18
    a3ea:	1f 91       	pop	r17
    a3ec:	0f 91       	pop	r16
    a3ee:	ff 90       	pop	r15
    a3f0:	ef 90       	pop	r14
    a3f2:	0f 90       	pop	r0
    a3f4:	0b be       	out	0x3b, r0	; 59
    a3f6:	0f 90       	pop	r0
    a3f8:	0f be       	out	0x3f, r0	; 63
    a3fa:	0f 90       	pop	r0
    a3fc:	1f 90       	pop	r1
    a3fe:	18 95       	reti

0000a400 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    a400:	2f 92       	push	r2
    a402:	3f 92       	push	r3
    a404:	4f 92       	push	r4
    a406:	5f 92       	push	r5
    a408:	6f 92       	push	r6
    a40a:	7f 92       	push	r7
    a40c:	8f 92       	push	r8
    a40e:	9f 92       	push	r9
    a410:	af 92       	push	r10
    a412:	bf 92       	push	r11
    a414:	cf 92       	push	r12
    a416:	df 92       	push	r13
    a418:	ef 92       	push	r14
    a41a:	ff 92       	push	r15
    a41c:	0f 93       	push	r16
    a41e:	1f 93       	push	r17
    a420:	df 93       	push	r29
    a422:	cf 93       	push	r28
    a424:	cd b7       	in	r28, 0x3d	; 61
    a426:	de b7       	in	r29, 0x3e	; 62
    a428:	63 97       	sbiw	r28, 0x13	; 19
    a42a:	cd bf       	out	0x3d, r28	; 61
    a42c:	de bf       	out	0x3e, r29	; 62
    a42e:	6b a4       	ldd	r6, Y+43	; 0x2b
    a430:	7c a4       	ldd	r7, Y+44	; 0x2c
    a432:	8e 01       	movw	r16, r28
    a434:	03 5d       	subi	r16, 0xD3	; 211
    a436:	1f 4f       	sbci	r17, 0xFF	; 255
    a438:	19 8a       	std	Y+17, r1	; 0x11
    a43a:	1a 8a       	std	Y+18, r1	; 0x12
    a43c:	20 e0       	ldi	r18, 0x00	; 0
    a43e:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    a440:	d3 01       	movw	r26, r6
    a442:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    a444:	88 23       	and	r24, r24
    a446:	09 f4       	brne	.+2      	; 0xa44a <f_printf+0x4a>
    a448:	17 c1       	rjmp	.+558    	; 0xa678 <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    a44a:	08 94       	sec
    a44c:	61 1c       	adc	r6, r1
    a44e:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    a450:	85 32       	cpi	r24, 0x25	; 37
    a452:	71 f0       	breq	.+28     	; 0xa470 <f_printf+0x70>
			cc = f_putc(c, fil);
    a454:	90 e0       	ldi	r25, 0x00	; 0
    a456:	69 a5       	ldd	r22, Y+41	; 0x29
    a458:	7a a5       	ldd	r23, Y+42	; 0x2a
    a45a:	0e 94 ce 2a 	call	0x559c	; 0x559c <f_putc>
    a45e:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    a460:	bf ef       	ldi	r27, 0xFF	; 255
    a462:	8f 3f       	cpi	r24, 0xFF	; 255
    a464:	9b 07       	cpc	r25, r27
    a466:	11 f4       	brne	.+4      	; 0xa46c <f_printf+0x6c>
    a468:	48 01       	movw	r8, r16
    a46a:	fa c0       	rjmp	.+500    	; 0xa660 <f_printf+0x260>
    a46c:	48 01       	movw	r8, r16
    a46e:	4c c0       	rjmp	.+152    	; 0xa508 <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    a470:	d3 01       	movw	r26, r6
    a472:	ed 91       	ld	r30, X+
    a474:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    a476:	e0 33       	cpi	r30, 0x30	; 48
    a478:	11 f0       	breq	.+4      	; 0xa47e <f_printf+0x7e>
    a47a:	1b 8a       	std	Y+19, r1	; 0x13
    a47c:	04 c0       	rjmp	.+8      	; 0xa486 <f_printf+0x86>
			f = 1; c = *str++;
    a47e:	ed 91       	ld	r30, X+
    a480:	3d 01       	movw	r6, r26
    a482:	b1 e0       	ldi	r27, 0x01	; 1
    a484:	bb 8b       	std	Y+19, r27	; 0x13
    a486:	aa 24       	eor	r10, r10
    a488:	bb 24       	eor	r11, r11
    a48a:	13 c0       	rjmp	.+38     	; 0xa4b2 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    a48c:	c5 01       	movw	r24, r10
    a48e:	53 e0       	ldi	r21, 0x03	; 3
    a490:	88 0f       	add	r24, r24
    a492:	99 1f       	adc	r25, r25
    a494:	5a 95       	dec	r21
    a496:	e1 f7       	brne	.-8      	; 0xa490 <f_printf+0x90>
    a498:	aa 0c       	add	r10, r10
    a49a:	bb 1c       	adc	r11, r11
    a49c:	a8 0e       	add	r10, r24
    a49e:	b9 1e       	adc	r11, r25
    a4a0:	ae 0e       	add	r10, r30
    a4a2:	b1 1c       	adc	r11, r1
    a4a4:	e0 ed       	ldi	r30, 0xD0	; 208
    a4a6:	ff ef       	ldi	r31, 0xFF	; 255
    a4a8:	ae 0e       	add	r10, r30
    a4aa:	bf 1e       	adc	r11, r31
			c = *str++;
    a4ac:	d3 01       	movw	r26, r6
    a4ae:	ed 91       	ld	r30, X+
    a4b0:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    a4b2:	8e 2f       	mov	r24, r30
    a4b4:	80 53       	subi	r24, 0x30	; 48
    a4b6:	8a 30       	cpi	r24, 0x0A	; 10
    a4b8:	48 f3       	brcs	.-46     	; 0xa48c <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    a4ba:	ec 36       	cpi	r30, 0x6C	; 108
    a4bc:	31 f4       	brne	.+12     	; 0xa4ca <f_printf+0xca>
			f |= 2; c = *str++;
    a4be:	bb 89       	ldd	r27, Y+19	; 0x13
    a4c0:	b2 60       	ori	r27, 0x02	; 2
    a4c2:	bb 8b       	std	Y+19, r27	; 0x13
    a4c4:	d3 01       	movw	r26, r6
    a4c6:	ed 91       	ld	r30, X+
    a4c8:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    a4ca:	e3 37       	cpi	r30, 0x73	; 115
    a4cc:	49 f4       	brne	.+18     	; 0xa4e0 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    a4ce:	22 e0       	ldi	r18, 0x02	; 2
    a4d0:	82 2e       	mov	r8, r18
    a4d2:	91 2c       	mov	r9, r1
    a4d4:	80 0e       	add	r8, r16
    a4d6:	91 1e       	adc	r9, r17
    a4d8:	f8 01       	movw	r30, r16
    a4da:	80 81       	ld	r24, Z
    a4dc:	91 81       	ldd	r25, Z+1	; 0x01
    a4de:	bb c0       	rjmp	.+374    	; 0xa656 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    a4e0:	e3 36       	cpi	r30, 0x63	; 99
    a4e2:	a9 f4       	brne	.+42     	; 0xa50e <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    a4e4:	92 e0       	ldi	r25, 0x02	; 2
    a4e6:	89 2e       	mov	r8, r25
    a4e8:	91 2c       	mov	r9, r1
    a4ea:	80 0e       	add	r8, r16
    a4ec:	91 1e       	adc	r9, r17
    a4ee:	d8 01       	movw	r26, r16
    a4f0:	8d 91       	ld	r24, X+
    a4f2:	9c 91       	ld	r25, X
    a4f4:	69 a5       	ldd	r22, Y+41	; 0x29
    a4f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    a4f8:	0e 94 ce 2a 	call	0x559c	; 0x559c <f_putc>
    a4fc:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    a4fe:	bf ef       	ldi	r27, 0xFF	; 255
    a500:	8f 3f       	cpi	r24, 0xFF	; 255
    a502:	9b 07       	cpc	r25, r27
    a504:	09 f4       	brne	.+2      	; 0xa508 <f_printf+0x108>
    a506:	ac c0       	rjmp	.+344    	; 0xa660 <f_printf+0x260>
    a508:	21 e0       	ldi	r18, 0x01	; 1
    a50a:	30 e0       	ldi	r19, 0x00	; 0
    a50c:	a9 c0       	rjmp	.+338    	; 0xa660 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    a50e:	e4 36       	cpi	r30, 0x64	; 100
    a510:	39 f0       	breq	.+14     	; 0xa520 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    a512:	e5 37       	cpi	r30, 0x75	; 117
    a514:	29 f0       	breq	.+10     	; 0xa520 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    a516:	e8 35       	cpi	r30, 0x58	; 88
    a518:	09 f0       	breq	.+2      	; 0xa51c <f_printf+0x11c>
    a51a:	ae c0       	rjmp	.+348    	; 0xa678 <f_printf+0x278>
    a51c:	20 e1       	ldi	r18, 0x10	; 16
    a51e:	01 c0       	rjmp	.+2      	; 0xa522 <f_printf+0x122>
    a520:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    a522:	fb 89       	ldd	r31, Y+19	; 0x13
    a524:	f1 ff       	sbrs	r31, 1
    a526:	0d c0       	rjmp	.+26     	; 0xa542 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    a528:	84 e0       	ldi	r24, 0x04	; 4
    a52a:	88 2e       	mov	r8, r24
    a52c:	91 2c       	mov	r9, r1
    a52e:	80 0e       	add	r8, r16
    a530:	91 1e       	adc	r9, r17
    a532:	d8 01       	movw	r26, r16
    a534:	ed 90       	ld	r14, X+
    a536:	fd 90       	ld	r15, X+
    a538:	0d 91       	ld	r16, X+
    a53a:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    a53c:	e4 36       	cpi	r30, 0x64	; 100
    a53e:	09 f5       	brne	.+66     	; 0xa582 <f_printf+0x182>
    a540:	13 c0       	rjmp	.+38     	; 0xa568 <f_printf+0x168>
    a542:	c8 01       	movw	r24, r16
    a544:	02 96       	adiw	r24, 0x02	; 2
    a546:	d8 01       	movw	r26, r16
    a548:	6d 91       	ld	r22, X+
    a54a:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    a54c:	e4 36       	cpi	r30, 0x64	; 100
    a54e:	39 f4       	brne	.+14     	; 0xa55e <f_printf+0x15e>
    a550:	4c 01       	movw	r8, r24
    a552:	7b 01       	movw	r14, r22
    a554:	00 27       	eor	r16, r16
    a556:	f7 fc       	sbrc	r15, 7
    a558:	00 95       	com	r16
    a55a:	10 2f       	mov	r17, r16
    a55c:	05 c0       	rjmp	.+10     	; 0xa568 <f_printf+0x168>
    a55e:	4c 01       	movw	r8, r24
    a560:	7b 01       	movw	r14, r22
    a562:	00 e0       	ldi	r16, 0x00	; 0
    a564:	10 e0       	ldi	r17, 0x00	; 0
    a566:	0d c0       	rjmp	.+26     	; 0xa582 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    a568:	17 ff       	sbrs	r17, 7
    a56a:	0b c0       	rjmp	.+22     	; 0xa582 <f_printf+0x182>
				val = 0 - val;
    a56c:	10 95       	com	r17
    a56e:	00 95       	com	r16
    a570:	f0 94       	com	r15
    a572:	e0 94       	com	r14
    a574:	e1 1c       	adc	r14, r1
    a576:	f1 1c       	adc	r15, r1
    a578:	01 1d       	adc	r16, r1
    a57a:	11 1d       	adc	r17, r1
				f |= 4;
    a57c:	bb 89       	ldd	r27, Y+19	; 0x13
    a57e:	b4 60       	ori	r27, 0x04	; 4
    a580:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    a582:	18 8a       	std	Y+16, r1	; 0x10
    a584:	bf e0       	ldi	r27, 0x0F	; 15
    a586:	cb 2e       	mov	r12, r27
    a588:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    a58a:	22 2e       	mov	r2, r18
    a58c:	33 24       	eor	r3, r3
    a58e:	44 24       	eor	r4, r4
    a590:	55 24       	eor	r5, r5
    a592:	c8 01       	movw	r24, r16
    a594:	b7 01       	movw	r22, r14
    a596:	a2 01       	movw	r20, r4
    a598:	91 01       	movw	r18, r2
    a59a:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    a59e:	86 2f       	mov	r24, r22
    a5a0:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    a5a2:	8a 33       	cpi	r24, 0x3A	; 58
    a5a4:	08 f0       	brcs	.+2      	; 0xa5a8 <f_printf+0x1a8>
    a5a6:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    a5a8:	08 94       	sec
    a5aa:	c1 08       	sbc	r12, r1
    a5ac:	d1 08       	sbc	r13, r1
    a5ae:	e1 e0       	ldi	r30, 0x01	; 1
    a5b0:	f0 e0       	ldi	r31, 0x00	; 0
    a5b2:	ec 0f       	add	r30, r28
    a5b4:	fd 1f       	adc	r31, r29
    a5b6:	ec 0d       	add	r30, r12
    a5b8:	fd 1d       	adc	r31, r13
    a5ba:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    a5bc:	c1 14       	cp	r12, r1
    a5be:	d1 04       	cpc	r13, r1
    a5c0:	e9 f0       	breq	.+58     	; 0xa5fc <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    a5c2:	c8 01       	movw	r24, r16
    a5c4:	b7 01       	movw	r22, r14
    a5c6:	a2 01       	movw	r20, r4
    a5c8:	91 01       	movw	r18, r2
    a5ca:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    a5ce:	c9 01       	movw	r24, r18
    a5d0:	da 01       	movw	r26, r20
    a5d2:	7c 01       	movw	r14, r24
    a5d4:	8d 01       	movw	r16, r26
		} while (i && val);
    a5d6:	e1 14       	cp	r14, r1
    a5d8:	f1 04       	cpc	r15, r1
    a5da:	01 05       	cpc	r16, r1
    a5dc:	11 05       	cpc	r17, r1
    a5de:	c9 f6       	brne	.-78     	; 0xa592 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    a5e0:	eb 89       	ldd	r30, Y+19	; 0x13
    a5e2:	e2 ff       	sbrs	r30, 2
    a5e4:	0b c0       	rjmp	.+22     	; 0xa5fc <f_printf+0x1fc>
    a5e6:	08 94       	sec
    a5e8:	c1 08       	sbc	r12, r1
    a5ea:	d1 08       	sbc	r13, r1
    a5ec:	e1 e0       	ldi	r30, 0x01	; 1
    a5ee:	f0 e0       	ldi	r31, 0x00	; 0
    a5f0:	ec 0f       	add	r30, r28
    a5f2:	fd 1f       	adc	r31, r29
    a5f4:	ec 0d       	add	r30, r12
    a5f6:	fd 1d       	adc	r31, r13
    a5f8:	4d e2       	ldi	r20, 0x2D	; 45
    a5fa:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    a5fc:	8f e0       	ldi	r24, 0x0F	; 15
    a5fe:	90 e0       	ldi	r25, 0x00	; 0
    a600:	8a 19       	sub	r24, r10
    a602:	9b 09       	sbc	r25, r11
    a604:	08 94       	sec
    a606:	c1 08       	sbc	r12, r1
    a608:	d1 08       	sbc	r13, r1
    a60a:	e1 e0       	ldi	r30, 0x01	; 1
    a60c:	f0 e0       	ldi	r31, 0x00	; 0
    a60e:	ec 0f       	add	r30, r28
    a610:	fd 1f       	adc	r31, r29
    a612:	ec 0d       	add	r30, r12
    a614:	fd 1d       	adc	r31, r13
    a616:	08 94       	sec
    a618:	c1 1c       	adc	r12, r1
    a61a:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    a61c:	ab 89       	ldd	r26, Y+19	; 0x13
    a61e:	2a 2f       	mov	r18, r26
    a620:	30 e0       	ldi	r19, 0x00	; 0
    a622:	21 70       	andi	r18, 0x01	; 1
    a624:	30 70       	andi	r19, 0x00	; 0
    a626:	0b c0       	rjmp	.+22     	; 0xa63e <f_printf+0x23e>
    a628:	08 94       	sec
    a62a:	c1 08       	sbc	r12, r1
    a62c:	d1 08       	sbc	r13, r1
    a62e:	21 15       	cp	r18, r1
    a630:	31 05       	cpc	r19, r1
    a632:	11 f4       	brne	.+4      	; 0xa638 <f_printf+0x238>
    a634:	40 e2       	ldi	r20, 0x20	; 32
    a636:	01 c0       	rjmp	.+2      	; 0xa63a <f_printf+0x23a>
    a638:	40 e3       	ldi	r20, 0x30	; 48
    a63a:	40 83       	st	Z, r20
    a63c:	31 97       	sbiw	r30, 0x01	; 1
    a63e:	c1 14       	cp	r12, r1
    a640:	d1 04       	cpc	r13, r1
    a642:	19 f0       	breq	.+6      	; 0xa64a <f_printf+0x24a>
    a644:	8c 15       	cp	r24, r12
    a646:	9d 05       	cpc	r25, r13
    a648:	7c f3       	brlt	.-34     	; 0xa628 <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    a64a:	81 e0       	ldi	r24, 0x01	; 1
    a64c:	90 e0       	ldi	r25, 0x00	; 0
    a64e:	8c 0f       	add	r24, r28
    a650:	9d 1f       	adc	r25, r29
    a652:	8c 0d       	add	r24, r12
    a654:	9d 1d       	adc	r25, r13
    a656:	69 a5       	ldd	r22, Y+41	; 0x29
    a658:	7a a5       	ldd	r23, Y+42	; 0x2a
    a65a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <f_puts>
    a65e:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    a660:	e9 89       	ldd	r30, Y+17	; 0x11
    a662:	fa 89       	ldd	r31, Y+18	; 0x12
    a664:	e2 0f       	add	r30, r18
    a666:	f3 1f       	adc	r31, r19
    a668:	e9 8b       	std	Y+17, r30	; 0x11
    a66a:	fa 8b       	std	Y+18, r31	; 0x12
    a66c:	ff ef       	ldi	r31, 0xFF	; 255
    a66e:	2f 3f       	cpi	r18, 0xFF	; 255
    a670:	3f 07       	cpc	r19, r31
    a672:	41 f0       	breq	.+16     	; 0xa684 <f_printf+0x284>
    a674:	84 01       	movw	r16, r8
    a676:	e4 ce       	rjmp	.-568    	; 0xa440 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    a678:	4f ef       	ldi	r20, 0xFF	; 255
    a67a:	2f 3f       	cpi	r18, 0xFF	; 255
    a67c:	34 07       	cpc	r19, r20
    a67e:	11 f0       	breq	.+4      	; 0xa684 <f_printf+0x284>
    a680:	29 89       	ldd	r18, Y+17	; 0x11
    a682:	3a 89       	ldd	r19, Y+18	; 0x12
}
    a684:	c9 01       	movw	r24, r18
    a686:	63 96       	adiw	r28, 0x13	; 19
    a688:	cd bf       	out	0x3d, r28	; 61
    a68a:	de bf       	out	0x3e, r29	; 62
    a68c:	cf 91       	pop	r28
    a68e:	df 91       	pop	r29
    a690:	1f 91       	pop	r17
    a692:	0f 91       	pop	r16
    a694:	ff 90       	pop	r15
    a696:	ef 90       	pop	r14
    a698:	df 90       	pop	r13
    a69a:	cf 90       	pop	r12
    a69c:	bf 90       	pop	r11
    a69e:	af 90       	pop	r10
    a6a0:	9f 90       	pop	r9
    a6a2:	8f 90       	pop	r8
    a6a4:	7f 90       	pop	r7
    a6a6:	6f 90       	pop	r6
    a6a8:	5f 90       	pop	r5
    a6aa:	4f 90       	pop	r4
    a6ac:	3f 90       	pop	r3
    a6ae:	2f 90       	pop	r2
    a6b0:	08 95       	ret

0000a6b2 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
    a6b2:	1f 92       	push	r1
    a6b4:	0f 92       	push	r0
    a6b6:	0f b6       	in	r0, 0x3f	; 63
    a6b8:	0f 92       	push	r0
    a6ba:	0b b6       	in	r0, 0x3b	; 59
    a6bc:	0f 92       	push	r0
    a6be:	11 24       	eor	r1, r1
    a6c0:	1f 93       	push	r17
    a6c2:	2f 93       	push	r18
    a6c4:	3f 93       	push	r19
    a6c6:	4f 93       	push	r20
    a6c8:	5f 93       	push	r21
    a6ca:	6f 93       	push	r22
    a6cc:	7f 93       	push	r23
    a6ce:	8f 93       	push	r24
    a6d0:	9f 93       	push	r25
    a6d2:	af 93       	push	r26
    a6d4:	bf 93       	push	r27
    a6d6:	ef 93       	push	r30
    a6d8:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
    a6da:	e0 91 1a 31 	lds	r30, 0x311A
    a6de:	f0 91 1b 31 	lds	r31, 0x311B
    a6e2:	80 91 a0 09 	lds	r24, 0x09A0
    a6e6:	e5 58       	subi	r30, 0x85	; 133
    a6e8:	fb 4a       	sbci	r31, 0xAB	; 171
    a6ea:	80 83       	st	Z, r24

	if(rs232Recording){
    a6ec:	80 91 25 31 	lds	r24, 0x3125
    a6f0:	88 23       	and	r24, r24
    a6f2:	09 f4       	brne	.+2      	; 0xa6f6 <__vector_88+0x44>
    a6f4:	65 c0       	rjmp	.+202    	; 0xa7c0 <__vector_88+0x10e>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
    a6f6:	e0 91 1a 31 	lds	r30, 0x311A
    a6fa:	f0 91 1b 31 	lds	r31, 0x311B
    a6fe:	e5 58       	subi	r30, 0x85	; 133
    a700:	fb 4a       	sbci	r31, 0xAB	; 171
    a702:	80 81       	ld	r24, Z
    a704:	8a 30       	cpi	r24, 0x0A	; 10
    a706:	09 f0       	breq	.+2      	; 0xa70a <__vector_88+0x58>
    a708:	5b c0       	rjmp	.+182    	; 0xa7c0 <__vector_88+0x10e>
    a70a:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    a70c:	20 91 1a 31 	lds	r18, 0x311A
    a710:	30 91 1b 31 	lds	r19, 0x311B
    a714:	80 91 18 31 	lds	r24, 0x3118
    a718:	90 91 19 31 	lds	r25, 0x3119
    a71c:	28 17       	cp	r18, r24
    a71e:	39 07       	cpc	r19, r25
    a720:	09 f0       	breq	.+2      	; 0xa724 <__vector_88+0x72>
    a722:	63 c0       	rjmp	.+198    	; 0xa7ea <__vector_88+0x138>
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
				counter++;
			}
			if(strstr(airQualityString,"Dylos") == NULL){
    a724:	89 ec       	ldi	r24, 0xC9	; 201
    a726:	97 e4       	ldi	r25, 0x47	; 71
    a728:	66 ec       	ldi	r22, 0xC6	; 198
    a72a:	76 e2       	ldi	r23, 0x26	; 38
    a72c:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    a730:	00 97       	sbiw	r24, 0x00	; 0
    a732:	09 f0       	breq	.+2      	; 0xa736 <__vector_88+0x84>
    a734:	45 c0       	rjmp	.+138    	; 0xa7c0 <__vector_88+0x10e>
				airSampleTime = Time_Get32BitTimer();
    a736:	0e 94 38 30 	call	0x6070	; 0x6070 <Time_Get32BitTimer>
    a73a:	60 93 f8 30 	sts	0x30F8, r22
    a73e:	70 93 f9 30 	sts	0x30F9, r23
    a742:	80 93 fa 30 	sts	0x30FA, r24
    a746:	90 93 fb 30 	sts	0x30FB, r25
				smallCount = atol(strtok(airQualityString,","));
    a74a:	89 ec       	ldi	r24, 0xC9	; 201
    a74c:	97 e4       	ldi	r25, 0x47	; 71
    a74e:	60 ed       	ldi	r22, 0xD0	; 208
    a750:	73 e2       	ldi	r23, 0x23	; 35
    a752:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    a756:	0e 94 69 58 	call	0xb0d2	; 0xb0d2 <atol>
    a75a:	60 93 07 3a 	sts	0x3A07, r22
    a75e:	70 93 08 3a 	sts	0x3A08, r23
    a762:	80 93 09 3a 	sts	0x3A09, r24
    a766:	90 93 0a 3a 	sts	0x3A0A, r25
				largeCount = atol(strtok(NULL,","));
    a76a:	80 e0       	ldi	r24, 0x00	; 0
    a76c:	90 e0       	ldi	r25, 0x00	; 0
    a76e:	60 ed       	ldi	r22, 0xD0	; 208
    a770:	73 e2       	ldi	r23, 0x23	; 35
    a772:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    a776:	0e 94 69 58 	call	0xb0d2	; 0xb0d2 <atol>
    a77a:	60 93 4d 59 	sts	0x594D, r22
    a77e:	70 93 4e 59 	sts	0x594E, r23
    a782:	80 93 4f 59 	sts	0x594F, r24
    a786:	90 93 50 59 	sts	0x5950, r25

				quickSmall = smallCount;
    a78a:	20 91 07 3a 	lds	r18, 0x3A07
    a78e:	30 91 08 3a 	lds	r19, 0x3A08
    a792:	40 91 09 3a 	lds	r20, 0x3A09
    a796:	50 91 0a 3a 	lds	r21, 0x3A0A
    a79a:	20 93 1d 31 	sts	0x311D, r18
    a79e:	30 93 1e 31 	sts	0x311E, r19
    a7a2:	40 93 1f 31 	sts	0x311F, r20
    a7a6:	50 93 20 31 	sts	0x3120, r21
				quickLarge = largeCount;
    a7aa:	60 93 21 31 	sts	0x3121, r22
    a7ae:	70 93 22 31 	sts	0x3122, r23
    a7b2:	80 93 23 31 	sts	0x3123, r24
    a7b6:	90 93 24 31 	sts	0x3124, r25


				okToSendAirQuality = true;
    a7ba:	81 e0       	ldi	r24, 0x01	; 1
    a7bc:	80 93 1c 31 	sts	0x311C, r24
			}

		}
	}
	Rs232_writeLocation++;
    a7c0:	80 91 1a 31 	lds	r24, 0x311A
    a7c4:	90 91 1b 31 	lds	r25, 0x311B
    a7c8:	01 96       	adiw	r24, 0x01	; 1
    a7ca:	80 93 1a 31 	sts	0x311A, r24
    a7ce:	90 93 1b 31 	sts	0x311B, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
    a7d2:	80 91 1a 31 	lds	r24, 0x311A
    a7d6:	90 91 1b 31 	lds	r25, 0x311B
    a7da:	80 50       	subi	r24, 0x00	; 0
    a7dc:	94 40       	sbci	r25, 0x04	; 4
    a7de:	78 f0       	brcs	.+30     	; 0xa7fe <__vector_88+0x14c>
		Rs232_writeLocation = 0;
    a7e0:	10 92 1a 31 	sts	0x311A, r1
    a7e4:	10 92 1b 31 	sts	0x311B, r1
    a7e8:	0a c0       	rjmp	.+20     	; 0xa7fe <__vector_88+0x14c>

	if(rs232Recording){
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
    a7ea:	80 e0       	ldi	r24, 0x00	; 0
    a7ec:	0e 94 c0 03 	call	0x780	; 0x780 <Rs232_GetByte>
    a7f0:	e1 2f       	mov	r30, r17
    a7f2:	f0 e0       	ldi	r31, 0x00	; 0
    a7f4:	e7 53       	subi	r30, 0x37	; 55
    a7f6:	f8 4b       	sbci	r31, 0xB8	; 184
    a7f8:	80 83       	st	Z, r24
				counter++;
    a7fa:	1f 5f       	subi	r17, 0xFF	; 255
    a7fc:	87 cf       	rjmp	.-242    	; 0xa70c <__vector_88+0x5a>
	}
	Rs232_writeLocation++;
	if(Rs232_writeLocation >= Rs232_BufferSize){
		Rs232_writeLocation = 0;
	}
}
    a7fe:	ff 91       	pop	r31
    a800:	ef 91       	pop	r30
    a802:	bf 91       	pop	r27
    a804:	af 91       	pop	r26
    a806:	9f 91       	pop	r25
    a808:	8f 91       	pop	r24
    a80a:	7f 91       	pop	r23
    a80c:	6f 91       	pop	r22
    a80e:	5f 91       	pop	r21
    a810:	4f 91       	pop	r20
    a812:	3f 91       	pop	r19
    a814:	2f 91       	pop	r18
    a816:	1f 91       	pop	r17
    a818:	0f 90       	pop	r0
    a81a:	0b be       	out	0x3b, r0	; 59
    a81c:	0f 90       	pop	r0
    a81e:	0f be       	out	0x3f, r0	; 63
    a820:	0f 90       	pop	r0
    a822:	1f 90       	pop	r1
    a824:	18 95       	reti

0000a826 <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    a826:	ef 92       	push	r14
    a828:	ff 92       	push	r15
    a82a:	0f 93       	push	r16
    a82c:	1f 93       	push	r17
    a82e:	cf 93       	push	r28
    a830:	df 93       	push	r29
	uint8_t tmp=0;
	uint32_t tmp32 = 0;
	
	Wifi_ClearBuffer();
    a832:	0e 94 76 02 	call	0x4ec	; 0x4ec <Wifi_ClearBuffer>
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
    a836:	8c ec       	ldi	r24, 0xCC	; 204
    a838:	96 e2       	ldi	r25, 0x26	; 38
    a83a:	65 ed       	ldi	r22, 0xD5	; 213
    a83c:	76 e2       	ldi	r23, 0x26	; 38
    a83e:	ab 01       	movw	r20, r22
    a840:	24 ef       	ldi	r18, 0xF4	; 244
    a842:	31 e0       	ldi	r19, 0x01	; 1
    a844:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    a848:	88 23       	and	r24, r24
    a84a:	09 f4       	brne	.+2      	; 0xa84e <Wifi_GetTime+0x28>
    a84c:	97 c0       	rjmp	.+302    	; 0xa97c <Wifi_GetTime+0x156>
    a84e:	88 ee       	ldi	r24, 0xE8	; 232
    a850:	93 e0       	ldi	r25, 0x03	; 3
    a852:	20 e7       	ldi	r18, 0x70	; 112
    a854:	31 e0       	ldi	r19, 0x01	; 1
    a856:	f9 01       	movw	r30, r18
    a858:	31 97       	sbiw	r30, 0x01	; 1
    a85a:	f1 f7       	brne	.-4      	; 0xa858 <Wifi_GetTime+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a85c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a85e:	d9 f7       	brne	.-10     	; 0xa856 <Wifi_GetTime+0x30>
    a860:	c9 e6       	ldi	r28, 0x69	; 105
    a862:	d3 e4       	ldi	r29, 0x43	; 67
    a864:	10 e0       	ldi	r17, 0x00	; 0
    a866:	07 c0       	rjmp	.+14     	; 0xa876 <Wifi_GetTime+0x50>
	    return false;
	}
	_delay_ms(100);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 50){
    a868:	12 33       	cpi	r17, 0x32	; 50
    a86a:	61 f0       	breq	.+24     	; 0xa884 <Wifi_GetTime+0x5e>
			string[tmp] = Wifi_GetByte(false);
    a86c:	80 e0       	ldi	r24, 0x00	; 0
    a86e:	0e 94 05 03 	call	0x60a	; 0x60a <Wifi_GetByte>
    a872:	89 93       	st	Y+, r24
			tmp++;
    a874:	1f 5f       	subi	r17, 0xFF	; 255
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
	    return false;
	}
	_delay_ms(100);
	
	while(Wifi_CharReadyToRead()){
    a876:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
    a87a:	88 23       	and	r24, r24
    a87c:	a9 f7       	brne	.-22     	; 0xa868 <Wifi_GetTime+0x42>
			break;
		}
	}

	
	if(tmp < 4){
    a87e:	14 30       	cpi	r17, 0x04	; 4
    a880:	08 f4       	brcc	.+2      	; 0xa884 <Wifi_GetTime+0x5e>
    a882:	7c c0       	rjmp	.+248    	; 0xa97c <Wifi_GetTime+0x156>
		return false;
	}
	
	if(strstr(string,"NOT SET") != 0){
    a884:	89 e6       	ldi	r24, 0x69	; 105
    a886:	93 e4       	ldi	r25, 0x43	; 67
    a888:	6b ed       	ldi	r22, 0xDB	; 219
    a88a:	76 e2       	ldi	r23, 0x26	; 38
    a88c:	0e 94 fa 58 	call	0xb1f4	; 0xb1f4 <strstr>
    a890:	00 97       	sbiw	r24, 0x00	; 0
    a892:	31 f0       	breq	.+12     	; 0xa8a0 <Wifi_GetTime+0x7a>
	    Debug_SendString("Time is not set",true);
    a894:	83 ee       	ldi	r24, 0xE3	; 227
    a896:	96 e2       	ldi	r25, 0x26	; 38
    a898:	61 e0       	ldi	r22, 0x01	; 1
    a89a:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <Debug_SendString>
    a89e:	6e c0       	rjmp	.+220    	; 0xa97c <Wifi_GetTime+0x156>
		return false;
	}

	strtok(string,"=");
    a8a0:	89 e6       	ldi	r24, 0x69	; 105
    a8a2:	93 e4       	ldi	r25, 0x43	; 67
    a8a4:	6c e5       	ldi	r22, 0x5C	; 92
    a8a6:	72 e2       	ldi	r23, 0x22	; 34
    a8a8:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	strtok(NULL,"=");
    a8ac:	80 e0       	ldi	r24, 0x00	; 0
    a8ae:	90 e0       	ldi	r25, 0x00	; 0
    a8b0:	6c e5       	ldi	r22, 0x5C	; 92
    a8b2:	72 e2       	ldi	r23, 0x22	; 34
    a8b4:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
	strcpy(timeString,strtok(NULL," "));
    a8b8:	80 e0       	ldi	r24, 0x00	; 0
    a8ba:	90 e0       	ldi	r25, 0x00	; 0
    a8bc:	6a ea       	ldi	r22, 0xAA	; 170
    a8be:	72 e2       	ldi	r23, 0x22	; 34
    a8c0:	0e 94 90 58 	call	0xb120	; 0xb120 <strtok>
    a8c4:	bc 01       	movw	r22, r24
    a8c6:	8e e2       	ldi	r24, 0x2E	; 46
    a8c8:	98 e4       	ldi	r25, 0x48	; 72
    a8ca:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <strcpy>
    a8ce:	20 e0       	ldi	r18, 0x00	; 0
    a8d0:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
    a8d2:	f9 01       	movw	r30, r18
    a8d4:	ea 58       	subi	r30, 0x8A	; 138
    a8d6:	f7 4b       	sbci	r31, 0xB7	; 183
    a8d8:	d9 01       	movw	r26, r18
    a8da:	a2 5d       	subi	r26, 0xD2	; 210
    a8dc:	b7 4b       	sbci	r27, 0xB7	; 183
    a8de:	8c 91       	ld	r24, X
    a8e0:	80 83       	st	Z, r24
    a8e2:	2f 5f       	subi	r18, 0xFF	; 255
    a8e4:	3f 4f       	sbci	r19, 0xFF	; 255

	strtok(string,"=");
	strtok(NULL,"=");
	strcpy(timeString,strtok(NULL," "));
		
	for(uint8_t i = 0; i < 8; i++){
    a8e6:	28 30       	cpi	r18, 0x08	; 8
    a8e8:	31 05       	cpc	r19, r1
    a8ea:	99 f7       	brne	.-26     	; 0xa8d2 <Wifi_GetTime+0xac>
    a8ec:	a6 e3       	ldi	r26, 0x36	; 54
    a8ee:	b8 e4       	ldi	r27, 0x48	; 72
    a8f0:	20 e0       	ldi	r18, 0x00	; 0
    a8f2:	30 e0       	ldi	r19, 0x00	; 0
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
		timeLower[i] = timeString[tmp];
    a8f4:	8d 91       	ld	r24, X+
    a8f6:	f9 01       	movw	r30, r18
    a8f8:	e3 5c       	subi	r30, 0xC3	; 195
    a8fa:	f7 4b       	sbci	r31, 0xB7	; 183
    a8fc:	80 83       	st	Z, r24
    a8fe:	2f 5f       	subi	r18, 0xFF	; 255
    a900:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
    a902:	25 30       	cpi	r18, 0x05	; 5
    a904:	31 05       	cpc	r19, r1
    a906:	b1 f7       	brne	.-20     	; 0xa8f4 <Wifi_GetTime+0xce>
		timeLower[i] = timeString[tmp];
		tmp++;
	}

	tmp32 = atol(timeUpper);
    a908:	86 e7       	ldi	r24, 0x76	; 118
    a90a:	98 e4       	ldi	r25, 0x48	; 72
    a90c:	0e 94 69 58 	call	0xb0d2	; 0xb0d2 <atol>
    a910:	9b 01       	movw	r18, r22
    a912:	ac 01       	movw	r20, r24
	tmp32 -= 22089888;
    a914:	20 5a       	subi	r18, 0xA0	; 160
    a916:	30 41       	sbci	r19, 0x10	; 16
    a918:	41 45       	sbci	r20, 0x51	; 81
    a91a:	51 40       	sbci	r21, 0x01	; 1
	tmp32 *= 100;
    a91c:	ca 01       	movw	r24, r20
    a91e:	b9 01       	movw	r22, r18
    a920:	24 e6       	ldi	r18, 0x64	; 100
    a922:	30 e0       	ldi	r19, 0x00	; 0
    a924:	40 e0       	ldi	r20, 0x00	; 0
    a926:	50 e0       	ldi	r21, 0x00	; 0
    a928:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
	tmp32 += ((timeLower[0]-'0')* 10);
    a92c:	e0 91 3d 48 	lds	r30, 0x483D
	tmp32 += ((timeLower[1]-'0'));
    a930:	20 91 3e 48 	lds	r18, 0x483E
	}

	tmp32 = atol(timeUpper);
	tmp32 -= 22089888;
	tmp32 *= 100;
	tmp32 += ((timeLower[0]-'0')* 10);
    a934:	30 e0       	ldi	r19, 0x00	; 0
    a936:	20 53       	subi	r18, 0x30	; 48
    a938:	30 40       	sbci	r19, 0x00	; 0
    a93a:	44 27       	eor	r20, r20
    a93c:	37 fd       	sbrc	r19, 7
    a93e:	40 95       	com	r20
    a940:	54 2f       	mov	r21, r20
    a942:	26 0f       	add	r18, r22
    a944:	37 1f       	adc	r19, r23
    a946:	48 1f       	adc	r20, r24
    a948:	59 1f       	adc	r21, r25
	tmp32 += ((timeLower[1]-'0'));
    a94a:	8a e0       	ldi	r24, 0x0A	; 10
    a94c:	e8 9f       	mul	r30, r24
    a94e:	c0 01       	movw	r24, r0
    a950:	11 24       	eor	r1, r1
    a952:	80 5e       	subi	r24, 0xE0	; 224
    a954:	91 40       	sbci	r25, 0x01	; 1
    a956:	7c 01       	movw	r14, r24
    a958:	00 27       	eor	r16, r16
    a95a:	f7 fc       	sbrc	r15, 7
    a95c:	00 95       	com	r16
    a95e:	10 2f       	mov	r17, r16
    a960:	2e 0d       	add	r18, r14
    a962:	3f 1d       	adc	r19, r15
    a964:	40 1f       	adc	r20, r16
    a966:	51 1f       	adc	r21, r17
	
	time_secs = tmp32;
    a968:	20 93 0c 31 	sts	0x310C, r18
    a96c:	30 93 0d 31 	sts	0x310D, r19
    a970:	40 93 0e 31 	sts	0x310E, r20
    a974:	50 93 0f 31 	sts	0x310F, r21
    a978:	81 e0       	ldi	r24, 0x01	; 1
    a97a:	01 c0       	rjmp	.+2      	; 0xa97e <Wifi_GetTime+0x158>
	return true;
    a97c:	80 e0       	ldi	r24, 0x00	; 0
}
    a97e:	df 91       	pop	r29
    a980:	cf 91       	pop	r28
    a982:	1f 91       	pop	r17
    a984:	0f 91       	pop	r16
    a986:	ff 90       	pop	r15
    a988:	ef 90       	pop	r14
    a98a:	08 95       	ret

0000a98c <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    a98c:	af 92       	push	r10
    a98e:	bf 92       	push	r11
    a990:	cf 92       	push	r12
    a992:	df 92       	push	r13
    a994:	ff 92       	push	r15
    a996:	0f 93       	push	r16
    a998:	1f 93       	push	r17
    a99a:	cf 93       	push	r28
    a99c:	df 93       	push	r29
    a99e:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    a9a0:	83 ef       	ldi	r24, 0xF3	; 243
    a9a2:	96 e2       	ldi	r25, 0x26	; 38
    a9a4:	6d ef       	ldi	r22, 0xFD	; 253
    a9a6:	76 e2       	ldi	r23, 0x26	; 38
    a9a8:	ab 01       	movw	r20, r22
    a9aa:	96 01       	movw	r18, r12
    a9ac:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    a9b0:	ff 24       	eor	r15, r15
    a9b2:	c0 e0       	ldi	r28, 0x00	; 0
    a9b4:	d0 e0       	ldi	r29, 0x00	; 0
    a9b6:	66 e6       	ldi	r22, 0x66	; 102
    a9b8:	a6 2e       	mov	r10, r22
    a9ba:	6e e0       	ldi	r22, 0x0E	; 14
    a9bc:	b6 2e       	mov	r11, r22
    a9be:	39 c0       	rjmp	.+114    	; 0xaa32 <Wifi_GetSignalStrength+0xa6>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    a9c0:	0e 94 49 02 	call	0x492	; 0x492 <Wifi_CharReadyToRead>
    a9c4:	88 23       	and	r24, r24
    a9c6:	89 f1       	breq	.+98     	; 0xaa2a <Wifi_GetSignalStrength+0x9e>
			rssi[tmp] = Wifi_GetByte(false);
    a9c8:	0f 2d       	mov	r16, r15
    a9ca:	10 e0       	ldi	r17, 0x00	; 0
    a9cc:	80 e0       	ldi	r24, 0x00	; 0
    a9ce:	0e 94 05 03 	call	0x60a	; 0x60a <Wifi_GetByte>
    a9d2:	f8 01       	movw	r30, r16
    a9d4:	ed 5d       	subi	r30, 0xDD	; 221
    a9d6:	fe 4a       	sbci	r31, 0xAE	; 174
    a9d8:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    a9da:	89 32       	cpi	r24, 0x29	; 41
    a9dc:	29 f5       	brne	.+74     	; 0xaa28 <Wifi_GetSignalStrength+0x9c>
				rssi[tmp] = 0;
    a9de:	10 82       	st	Z, r1
				//Debug_SendString("rssi: ", false);
				//Debug_SendString(rssi, true);
				worker = atoi(rssi);
    a9e0:	83 e2       	ldi	r24, 0x23	; 35
    a9e2:	91 e5       	ldi	r25, 0x51	; 81
    a9e4:	0e 94 4b 58 	call	0xb096	; 0xb096 <atoi>
    a9e8:	aa 27       	eor	r26, r26
    a9ea:	97 fd       	sbrc	r25, 7
    a9ec:	a0 95       	com	r26
    a9ee:	ba 2f       	mov	r27, r26
				worker*=9208;
    a9f0:	bc 01       	movw	r22, r24
    a9f2:	cd 01       	movw	r24, r26
    a9f4:	28 ef       	ldi	r18, 0xF8	; 248
    a9f6:	33 e2       	ldi	r19, 0x23	; 35
    a9f8:	40 e0       	ldi	r20, 0x00	; 0
    a9fa:	50 e0       	ldi	r21, 0x00	; 0
    a9fc:	0e 94 d7 57 	call	0xafae	; 0xafae <__mulsi3>
    aa00:	9b 01       	movw	r18, r22
    aa02:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    aa04:	6c e6       	ldi	r22, 0x6C	; 108
    aa06:	72 ef       	ldi	r23, 0xF2	; 242
    aa08:	8f e0       	ldi	r24, 0x0F	; 15
    aa0a:	90 e0       	ldi	r25, 0x00	; 0
    aa0c:	62 1b       	sub	r22, r18
    aa0e:	73 0b       	sbc	r23, r19
    aa10:	84 0b       	sbc	r24, r20
    aa12:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    aa14:	20 e1       	ldi	r18, 0x10	; 16
    aa16:	37 e2       	ldi	r19, 0x27	; 39
    aa18:	40 e0       	ldi	r20, 0x00	; 0
    aa1a:	50 e0       	ldi	r21, 0x00	; 0
    aa1c:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    aa20:	25 36       	cpi	r18, 0x65	; 101
    aa22:	58 f0       	brcs	.+22     	; 0xaa3a <Wifi_GetSignalStrength+0xae>
    aa24:	24 e6       	ldi	r18, 0x64	; 100
    aa26:	09 c0       	rjmp	.+18     	; 0xaa3a <Wifi_GetSignalStrength+0xae>
				//sprintf(string, "strength: %u %",ss);
				//Debug_SendString(string,true);

				return ss;
			}
			tmp++;
    aa28:	f3 94       	inc	r15
    aa2a:	c5 01       	movw	r24, r10
    aa2c:	01 97       	sbiw	r24, 0x01	; 1
    aa2e:	f1 f7       	brne	.-4      	; 0xaa2c <Wifi_GetSignalStrength+0xa0>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    aa30:	21 96       	adiw	r28, 0x01	; 1
    aa32:	cc 15       	cp	r28, r12
    aa34:	dd 05       	cpc	r29, r13
    aa36:	20 f2       	brcs	.-120    	; 0xa9c0 <Wifi_GetSignalStrength+0x34>
    aa38:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    aa3a:	82 2f       	mov	r24, r18
    aa3c:	df 91       	pop	r29
    aa3e:	cf 91       	pop	r28
    aa40:	1f 91       	pop	r17
    aa42:	0f 91       	pop	r16
    aa44:	ff 90       	pop	r15
    aa46:	df 90       	pop	r13
    aa48:	cf 90       	pop	r12
    aa4a:	bf 90       	pop	r11
    aa4c:	af 90       	pop	r10
    aa4e:	08 95       	ret

0000aa50 <Config_Wifi>:
        sprintf(temp,"shifted by %u",timeZoneShift);
	    Debug_SendString(temp,true);  */
    }
}

void Config_Wifi(void){
    aa50:	1f 93       	push	r17
    aa52:	cf 93       	push	r28
    aa54:	df 93       	push	r29
    aa56:	80 e2       	ldi	r24, 0x20	; 32
    aa58:	9e e4       	ldi	r25, 0x4E	; 78
    aa5a:	20 e7       	ldi	r18, 0x70	; 112
    aa5c:	31 e0       	ldi	r19, 0x01	; 1
    aa5e:	f9 01       	movw	r30, r18
    aa60:	31 97       	sbiw	r30, 0x01	; 1
    aa62:	f1 f7       	brne	.-4      	; 0xaa60 <Config_Wifi+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa66:	d9 f7       	brne	.-10     	; 0xaa5e <Config_Wifi+0xe>



    _delay_ms(2000);

    Wifi_EnterCMDMode(1000);
    aa68:	88 ee       	ldi	r24, 0xE8	; 232
    aa6a:	93 e0       	ldi	r25, 0x03	; 3
    aa6c:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <Wifi_EnterCMDMode>
    aa70:	80 e1       	ldi	r24, 0x10	; 16
    aa72:	97 e2       	ldi	r25, 0x27	; 39
    aa74:	20 e7       	ldi	r18, 0x70	; 112
    aa76:	31 e0       	ldi	r19, 0x01	; 1
    aa78:	f9 01       	movw	r30, r18
    aa7a:	31 97       	sbiw	r30, 0x01	; 1
    aa7c:	f1 f7       	brne	.-4      	; 0xaa7a <Config_Wifi+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa80:	d9 f7       	brne	.-10     	; 0xaa78 <Config_Wifi+0x28>

	_delay_ms(1000);
	display_clearBuffer();
    aa82:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearBuffer>
	display_writeBufferToScreen();
    aa86:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    aa8a:	85 e0       	ldi	r24, 0x05	; 5
    aa8c:	97 e2       	ldi	r25, 0x27	; 39
    aa8e:	63 e1       	ldi	r22, 0x13	; 19
    aa90:	77 e2       	ldi	r23, 0x27	; 39
    aa92:	ab 01       	movw	r20, r22
    aa94:	24 ef       	ldi	r18, 0xF4	; 244
    aa96:	31 e0       	ldi	r19, 0x01	; 1
    aa98:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    aa9c:	88 23       	and	r24, r24
    aa9e:	19 f0       	breq	.+6      	; 0xaaa6 <Config_Wifi+0x56>
		display_putString("reset..........OK",col,0,System5x7);
    aaa0:	88 e2       	ldi	r24, 0x28	; 40
    aaa2:	97 e2       	ldi	r25, 0x27	; 39
    aaa4:	02 c0       	rjmp	.+4      	; 0xaaaa <Config_Wifi+0x5a>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    aaa6:	8a e3       	ldi	r24, 0x3A	; 58
    aaa8:	97 e2       	ldi	r25, 0x27	; 39
    aaaa:	60 e0       	ldi	r22, 0x00	; 0
    aaac:	40 e0       	ldi	r20, 0x00	; 0
    aaae:	2a e9       	ldi	r18, 0x9A	; 154
    aab0:	3e e2       	ldi	r19, 0x2E	; 46
    aab2:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	}
	display_writeBufferToScreen();
    aab6:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    aaba:	80 e1       	ldi	r24, 0x10	; 16
    aabc:	97 e2       	ldi	r25, 0x27	; 39
    aabe:	20 e7       	ldi	r18, 0x70	; 112
    aac0:	31 e0       	ldi	r19, 0x01	; 1
    aac2:	f9 01       	movw	r30, r18
    aac4:	31 97       	sbiw	r30, 0x01	; 1
    aac6:	f1 f7       	brne	.-4      	; 0xaac4 <Config_Wifi+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aac8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aaca:	d9 f7       	brne	.-10     	; 0xaac2 <Config_Wifi+0x72>

	_delay_ms(1000);



    Wifi_SendCommand("set sys iofunc 0x10","AOK","AOK",500);
    aacc:	8c e4       	ldi	r24, 0x4C	; 76
    aace:	97 e2       	ldi	r25, 0x27	; 39
    aad0:	60 e6       	ldi	r22, 0x60	; 96
    aad2:	77 e2       	ldi	r23, 0x27	; 39
    aad4:	ab 01       	movw	r20, r22
    aad6:	24 ef       	ldi	r18, 0xF4	; 244
    aad8:	31 e0       	ldi	r19, 0x01	; 1
    aada:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    aade:	80 e1       	ldi	r24, 0x10	; 16
    aae0:	97 e2       	ldi	r25, 0x27	; 39
    aae2:	20 e7       	ldi	r18, 0x70	; 112
    aae4:	31 e0       	ldi	r19, 0x01	; 1
    aae6:	f9 01       	movw	r30, r18
    aae8:	31 97       	sbiw	r30, 0x01	; 1
    aaea:	f1 f7       	brne	.-4      	; 0xaae8 <Config_Wifi+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aaec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aaee:	d9 f7       	brne	.-10     	; 0xaae6 <Config_Wifi+0x96>
    _delay_ms(1000);


    Wifi_SendCommand("set wlan join 0","AOK","AOK",500);
    aaf0:	84 e6       	ldi	r24, 0x64	; 100
    aaf2:	97 e2       	ldi	r25, 0x27	; 39
    aaf4:	60 e6       	ldi	r22, 0x60	; 96
    aaf6:	77 e2       	ldi	r23, 0x27	; 39
    aaf8:	ab 01       	movw	r20, r22
    aafa:	24 ef       	ldi	r18, 0xF4	; 244
    aafc:	31 e0       	ldi	r19, 0x01	; 1
    aafe:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ab02:	80 e1       	ldi	r24, 0x10	; 16
    ab04:	97 e2       	ldi	r25, 0x27	; 39
    ab06:	20 e7       	ldi	r18, 0x70	; 112
    ab08:	31 e0       	ldi	r19, 0x01	; 1
    ab0a:	f9 01       	movw	r30, r18
    ab0c:	31 97       	sbiw	r30, 0x01	; 1
    ab0e:	f1 f7       	brne	.-4      	; 0xab0c <Config_Wifi+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab10:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab12:	d9 f7       	brne	.-10     	; 0xab0a <Config_Wifi+0xba>
    _delay_ms(1000);

    Wifi_SendCommand("set uart flow 1","AOK","AOK",500);
    ab14:	84 e7       	ldi	r24, 0x74	; 116
    ab16:	97 e2       	ldi	r25, 0x27	; 39
    ab18:	60 e6       	ldi	r22, 0x60	; 96
    ab1a:	77 e2       	ldi	r23, 0x27	; 39
    ab1c:	ab 01       	movw	r20, r22
    ab1e:	24 ef       	ldi	r18, 0xF4	; 244
    ab20:	31 e0       	ldi	r19, 0x01	; 1
    ab22:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
   // _delay_ms(500);

    Wifi_SendCommand("set comm size 1420","AOK","AOK",500);
    ab26:	84 e8       	ldi	r24, 0x84	; 132
    ab28:	97 e2       	ldi	r25, 0x27	; 39
    ab2a:	60 e6       	ldi	r22, 0x60	; 96
    ab2c:	77 e2       	ldi	r23, 0x27	; 39
    ab2e:	ab 01       	movw	r20, r22
    ab30:	24 ef       	ldi	r18, 0xF4	; 244
    ab32:	31 e0       	ldi	r19, 0x01	; 1
    ab34:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ab38:	88 e8       	ldi	r24, 0x88	; 136
    ab3a:	93 e1       	ldi	r25, 0x13	; 19
    ab3c:	20 e7       	ldi	r18, 0x70	; 112
    ab3e:	31 e0       	ldi	r19, 0x01	; 1
    ab40:	f9 01       	movw	r30, r18
    ab42:	31 97       	sbiw	r30, 0x01	; 1
    ab44:	f1 f7       	brne	.-4      	; 0xab42 <Config_Wifi+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab48:	d9 f7       	brne	.-10     	; 0xab40 <Config_Wifi+0xf0>
	_delay_ms(500);

	Wifi_SendCommand("set comm time 1000","AOK","AOK",500);
    ab4a:	87 e9       	ldi	r24, 0x97	; 151
    ab4c:	97 e2       	ldi	r25, 0x27	; 39
    ab4e:	60 e6       	ldi	r22, 0x60	; 96
    ab50:	77 e2       	ldi	r23, 0x27	; 39
    ab52:	ab 01       	movw	r20, r22
    ab54:	24 ef       	ldi	r18, 0xF4	; 244
    ab56:	31 e0       	ldi	r19, 0x01	; 1
    ab58:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ab5c:	88 e8       	ldi	r24, 0x88	; 136
    ab5e:	93 e1       	ldi	r25, 0x13	; 19
    ab60:	20 e7       	ldi	r18, 0x70	; 112
    ab62:	31 e0       	ldi	r19, 0x01	; 1
    ab64:	f9 01       	movw	r30, r18
    ab66:	31 97       	sbiw	r30, 0x01	; 1
    ab68:	f1 f7       	brne	.-4      	; 0xab66 <Config_Wifi+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab6c:	d9 f7       	brne	.-10     	; 0xab64 <Config_Wifi+0x114>
	_delay_ms(500);

    Wifi_SendCommand("set time address 195.43.74.3","AOK","AOK",500);
    ab6e:	8a ea       	ldi	r24, 0xAA	; 170
    ab70:	97 e2       	ldi	r25, 0x27	; 39
    ab72:	60 e6       	ldi	r22, 0x60	; 96
    ab74:	77 e2       	ldi	r23, 0x27	; 39
    ab76:	ab 01       	movw	r20, r22
    ab78:	24 ef       	ldi	r18, 0xF4	; 244
    ab7a:	31 e0       	ldi	r19, 0x01	; 1
    ab7c:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ab80:	88 e8       	ldi	r24, 0x88	; 136
    ab82:	93 e1       	ldi	r25, 0x13	; 19
    ab84:	20 e7       	ldi	r18, 0x70	; 112
    ab86:	31 e0       	ldi	r19, 0x01	; 1
    ab88:	f9 01       	movw	r30, r18
    ab8a:	31 97       	sbiw	r30, 0x01	; 1
    ab8c:	f1 f7       	brne	.-4      	; 0xab8a <Config_Wifi+0x13a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab90:	d9 f7       	brne	.-10     	; 0xab88 <Config_Wifi+0x138>
	_delay_ms(500);

    Wifi_SendCommand("save","Storing in config","Storing in config",500);
    ab92:	87 ec       	ldi	r24, 0xC7	; 199
    ab94:	97 e2       	ldi	r25, 0x27	; 39
    ab96:	6c ec       	ldi	r22, 0xCC	; 204
    ab98:	77 e2       	ldi	r23, 0x27	; 39
    ab9a:	ab 01       	movw	r20, r22
    ab9c:	24 ef       	ldi	r18, 0xF4	; 244
    ab9e:	31 e0       	ldi	r19, 0x01	; 1
    aba0:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    aba4:	80 e1       	ldi	r24, 0x10	; 16
    aba6:	97 e2       	ldi	r25, 0x27	; 39
    aba8:	20 e7       	ldi	r18, 0x70	; 112
    abaa:	31 e0       	ldi	r19, 0x01	; 1
    abac:	f9 01       	movw	r30, r18
    abae:	31 97       	sbiw	r30, 0x01	; 1
    abb0:	f1 f7       	brne	.-4      	; 0xabae <Config_Wifi+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abb4:	d9 f7       	brne	.-10     	; 0xabac <Config_Wifi+0x15c>
	_delay_ms(1000);

	Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    abb6:	8e ed       	ldi	r24, 0xDE	; 222
    abb8:	97 e2       	ldi	r25, 0x27	; 39
    abba:	65 ee       	ldi	r22, 0xE5	; 229
    abbc:	77 e2       	ldi	r23, 0x27	; 39
    abbe:	ab 01       	movw	r20, r22
    abc0:	24 ef       	ldi	r18, 0xF4	; 244
    abc2:	31 e0       	ldi	r19, 0x01	; 1
    abc4:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    abc8:	80 e4       	ldi	r24, 0x40	; 64
    abca:	9c e9       	ldi	r25, 0x9C	; 156
    abcc:	20 e7       	ldi	r18, 0x70	; 112
    abce:	31 e0       	ldi	r19, 0x01	; 1
    abd0:	f9 01       	movw	r30, r18
    abd2:	31 97       	sbiw	r30, 0x01	; 1
    abd4:	f1 f7       	brne	.-4      	; 0xabd2 <Config_Wifi+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abd6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abd8:	d9 f7       	brne	.-10     	; 0xabd0 <Config_Wifi+0x180>
	_delay_ms(4000);


    Wifi_EnterCMDMode(1000);
    abda:	88 ee       	ldi	r24, 0xE8	; 232
    abdc:	93 e0       	ldi	r25, 0x03	; 3
    abde:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <Wifi_EnterCMDMode>
    abe2:	80 e1       	ldi	r24, 0x10	; 16
    abe4:	97 e2       	ldi	r25, 0x27	; 39
    abe6:	20 e7       	ldi	r18, 0x70	; 112
    abe8:	31 e0       	ldi	r19, 0x01	; 1
    abea:	f9 01       	movw	r30, r18
    abec:	31 97       	sbiw	r30, 0x01	; 1
    abee:	f1 f7       	brne	.-4      	; 0xabec <Config_Wifi+0x19c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abf0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abf2:	d9 f7       	brne	.-10     	; 0xabea <Config_Wifi+0x19a>
    _delay_ms(1000);

	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    abf4:	8e ee       	ldi	r24, 0xEE	; 238
    abf6:	97 e2       	ldi	r25, 0x27	; 39
    abf8:	60 e6       	ldi	r22, 0x60	; 96
    abfa:	77 e2       	ldi	r23, 0x27	; 39
    abfc:	ab 01       	movw	r20, r22
    abfe:	24 ef       	ldi	r18, 0xF4	; 244
    ac00:	31 e0       	ldi	r19, 0x01	; 1
    ac02:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ac06:	88 e8       	ldi	r24, 0x88	; 136
    ac08:	93 e1       	ldi	r25, 0x13	; 19
    ac0a:	20 e7       	ldi	r18, 0x70	; 112
    ac0c:	31 e0       	ldi	r19, 0x01	; 1
    ac0e:	f9 01       	movw	r30, r18
    ac10:	31 97       	sbiw	r30, 0x01	; 1
    ac12:	f1 f7       	brne	.-4      	; 0xac10 <Config_Wifi+0x1c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac16:	d9 f7       	brne	.-10     	; 0xac0e <Config_Wifi+0x1be>
	_delay_ms(500);



	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    ac18:	80 e0       	ldi	r24, 0x00	; 0
    ac1a:	98 e2       	ldi	r25, 0x28	; 40
    ac1c:	60 e6       	ldi	r22, 0x60	; 96
    ac1e:	77 e2       	ldi	r23, 0x27	; 39
    ac20:	ab 01       	movw	r20, r22
    ac22:	24 ef       	ldi	r18, 0xF4	; 244
    ac24:	31 e0       	ldi	r19, 0x01	; 1
    ac26:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ac2a:	88 23       	and	r24, r24
    ac2c:	19 f0       	breq	.+6      	; 0xac34 <Config_Wifi+0x1e4>
		display_putString("enable time....OK",col,0,System5x7);
    ac2e:	82 e1       	ldi	r24, 0x12	; 18
    ac30:	98 e2       	ldi	r25, 0x28	; 40
    ac32:	02 c0       	rjmp	.+4      	; 0xac38 <Config_Wifi+0x1e8>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    ac34:	84 e2       	ldi	r24, 0x24	; 36
    ac36:	98 e2       	ldi	r25, 0x28	; 40
    ac38:	61 e0       	ldi	r22, 0x01	; 1
    ac3a:	40 e0       	ldi	r20, 0x00	; 0
    ac3c:	2a e9       	ldi	r18, 0x9A	; 154
    ac3e:	3e e2       	ldi	r19, 0x2E	; 46
    ac40:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	}
	display_writeBufferToScreen();
    ac44:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    ac48:	88 e8       	ldi	r24, 0x88	; 136
    ac4a:	93 e1       	ldi	r25, 0x13	; 19
    ac4c:	20 e7       	ldi	r18, 0x70	; 112
    ac4e:	31 e0       	ldi	r19, 0x01	; 1
    ac50:	f9 01       	movw	r30, r18
    ac52:	31 97       	sbiw	r30, 0x01	; 1
    ac54:	f1 f7       	brne	.-4      	; 0xac52 <Config_Wifi+0x202>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac58:	d9 f7       	brne	.-10     	; 0xac50 <Config_Wifi+0x200>
	_delay_ms(500);
	col++;
	
	if(authRead){
    ac5a:	80 91 4c 31 	lds	r24, 0x314C
    ac5e:	88 23       	and	r24, r24
    ac60:	11 f4       	brne	.+4      	; 0xac66 <Config_Wifi+0x216>
    ac62:	12 e0       	ldi	r17, 0x02	; 2
    ac64:	22 c0       	rjmp	.+68     	; 0xacaa <Config_Wifi+0x25a>
		if(Wifi_SendCommand(auth,"AOK","AOK",500)){
    ac66:	8a e8       	ldi	r24, 0x8A	; 138
    ac68:	9d e2       	ldi	r25, 0x2D	; 45
    ac6a:	60 e6       	ldi	r22, 0x60	; 96
    ac6c:	77 e2       	ldi	r23, 0x27	; 39
    ac6e:	ab 01       	movw	r20, r22
    ac70:	24 ef       	ldi	r18, 0xF4	; 244
    ac72:	31 e0       	ldi	r19, 0x01	; 1
    ac74:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ac78:	88 23       	and	r24, r24
    ac7a:	19 f0       	breq	.+6      	; 0xac82 <Config_Wifi+0x232>
			display_putString("encryption.....OK",col,0,System5x7);
    ac7c:	86 e3       	ldi	r24, 0x36	; 54
    ac7e:	98 e2       	ldi	r25, 0x28	; 40
    ac80:	02 c0       	rjmp	.+4      	; 0xac86 <Config_Wifi+0x236>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    ac82:	88 e4       	ldi	r24, 0x48	; 72
    ac84:	98 e2       	ldi	r25, 0x28	; 40
    ac86:	62 e0       	ldi	r22, 0x02	; 2
    ac88:	40 e0       	ldi	r20, 0x00	; 0
    ac8a:	2a e9       	ldi	r18, 0x9A	; 154
    ac8c:	3e e2       	ldi	r19, 0x2E	; 46
    ac8e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		}
		display_writeBufferToScreen();
    ac92:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    ac96:	88 e8       	ldi	r24, 0x88	; 136
    ac98:	93 e1       	ldi	r25, 0x13	; 19
    ac9a:	20 e7       	ldi	r18, 0x70	; 112
    ac9c:	31 e0       	ldi	r19, 0x01	; 1
    ac9e:	f9 01       	movw	r30, r18
    aca0:	31 97       	sbiw	r30, 0x01	; 1
    aca2:	f1 f7       	brne	.-4      	; 0xaca0 <Config_Wifi+0x250>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aca4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aca6:	d9 f7       	brne	.-10     	; 0xac9e <Config_Wifi+0x24e>
    aca8:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(500);
		col++;
	}
	
	if(phraseRead){
    acaa:	80 91 4d 31 	lds	r24, 0x314D
    acae:	88 23       	and	r24, r24
    acb0:	11 f1       	breq	.+68     	; 0xacf6 <Config_Wifi+0x2a6>
		if(Wifi_SendCommand(phrase,"AOK","AOK",500)){
    acb2:	8c eb       	ldi	r24, 0xBC	; 188
    acb4:	9d e2       	ldi	r25, 0x2D	; 45
    acb6:	60 e6       	ldi	r22, 0x60	; 96
    acb8:	77 e2       	ldi	r23, 0x27	; 39
    acba:	ab 01       	movw	r20, r22
    acbc:	24 ef       	ldi	r18, 0xF4	; 244
    acbe:	31 e0       	ldi	r19, 0x01	; 1
    acc0:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    acc4:	88 23       	and	r24, r24
    acc6:	19 f0       	breq	.+6      	; 0xacce <Config_Wifi+0x27e>
			display_putString("phrase.........OK",col,0,System5x7);
    acc8:	8a e5       	ldi	r24, 0x5A	; 90
    acca:	98 e2       	ldi	r25, 0x28	; 40
    accc:	02 c0       	rjmp	.+4      	; 0xacd2 <Config_Wifi+0x282>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    acce:	8c e6       	ldi	r24, 0x6C	; 108
    acd0:	98 e2       	ldi	r25, 0x28	; 40
    acd2:	61 2f       	mov	r22, r17
    acd4:	40 e0       	ldi	r20, 0x00	; 0
    acd6:	2a e9       	ldi	r18, 0x9A	; 154
    acd8:	3e e2       	ldi	r19, 0x2E	; 46
    acda:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		}
		display_writeBufferToScreen();
    acde:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    ace2:	88 e8       	ldi	r24, 0x88	; 136
    ace4:	93 e1       	ldi	r25, 0x13	; 19
    ace6:	20 e7       	ldi	r18, 0x70	; 112
    ace8:	31 e0       	ldi	r19, 0x01	; 1
    acea:	f9 01       	movw	r30, r18
    acec:	31 97       	sbiw	r30, 0x01	; 1
    acee:	f1 f7       	brne	.-4      	; 0xacec <Config_Wifi+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    acf0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    acf2:	d9 f7       	brne	.-10     	; 0xacea <Config_Wifi+0x29a>
    acf4:	25 c0       	rjmp	.+74     	; 0xad40 <Config_Wifi+0x2f0>
		_delay_ms(500);
		col++;
	} else if(keyRead){
    acf6:	80 91 4e 31 	lds	r24, 0x314E
    acfa:	88 23       	and	r24, r24
    acfc:	11 f1       	breq	.+68     	; 0xad42 <Config_Wifi+0x2f2>
		if(Wifi_SendCommand(key,"AOK","AOK",500)){
    acfe:	8e ee       	ldi	r24, 0xEE	; 238
    ad00:	9d e2       	ldi	r25, 0x2D	; 45
    ad02:	60 e6       	ldi	r22, 0x60	; 96
    ad04:	77 e2       	ldi	r23, 0x27	; 39
    ad06:	ab 01       	movw	r20, r22
    ad08:	24 ef       	ldi	r18, 0xF4	; 244
    ad0a:	31 e0       	ldi	r19, 0x01	; 1
    ad0c:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ad10:	88 23       	and	r24, r24
    ad12:	19 f0       	breq	.+6      	; 0xad1a <Config_Wifi+0x2ca>
			display_putString("key............OK",col,0,System5x7);
    ad14:	8e e7       	ldi	r24, 0x7E	; 126
    ad16:	98 e2       	ldi	r25, 0x28	; 40
    ad18:	02 c0       	rjmp	.+4      	; 0xad1e <Config_Wifi+0x2ce>
		} else {
			display_putString("key..........FAIL",col,0,System5x7);
    ad1a:	80 e9       	ldi	r24, 0x90	; 144
    ad1c:	98 e2       	ldi	r25, 0x28	; 40
    ad1e:	61 2f       	mov	r22, r17
    ad20:	40 e0       	ldi	r20, 0x00	; 0
    ad22:	2a e9       	ldi	r18, 0x9A	; 154
    ad24:	3e e2       	ldi	r19, 0x2E	; 46
    ad26:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		}
		display_writeBufferToScreen();
    ad2a:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    ad2e:	88 e8       	ldi	r24, 0x88	; 136
    ad30:	93 e1       	ldi	r25, 0x13	; 19
    ad32:	20 e7       	ldi	r18, 0x70	; 112
    ad34:	31 e0       	ldi	r19, 0x01	; 1
    ad36:	f9 01       	movw	r30, r18
    ad38:	31 97       	sbiw	r30, 0x01	; 1
    ad3a:	f1 f7       	brne	.-4      	; 0xad38 <Config_Wifi+0x2e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad3e:	d9 f7       	brne	.-10     	; 0xad36 <Config_Wifi+0x2e6>
		_delay_ms(500);
		col++;
    ad40:	1f 5f       	subi	r17, 0xFF	; 255
	}

	if(ssidRead){
    ad42:	80 91 50 31 	lds	r24, 0x3150
    ad46:	88 23       	and	r24, r24
    ad48:	19 f1       	breq	.+70     	; 0xad90 <Config_Wifi+0x340>
		if(Wifi_SendCommand(ssid,"DeAut","Auto+",2000)){
    ad4a:	80 e2       	ldi	r24, 0x20	; 32
    ad4c:	9e e2       	ldi	r25, 0x2E	; 46
    ad4e:	62 ea       	ldi	r22, 0xA2	; 162
    ad50:	78 e2       	ldi	r23, 0x28	; 40
    ad52:	48 ea       	ldi	r20, 0xA8	; 168
    ad54:	58 e2       	ldi	r21, 0x28	; 40
    ad56:	20 ed       	ldi	r18, 0xD0	; 208
    ad58:	37 e0       	ldi	r19, 0x07	; 7
    ad5a:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ad5e:	88 23       	and	r24, r24
    ad60:	19 f0       	breq	.+6      	; 0xad68 <Config_Wifi+0x318>
			display_putString("ssid...........OK",col,0,System5x7);
    ad62:	8e ea       	ldi	r24, 0xAE	; 174
    ad64:	98 e2       	ldi	r25, 0x28	; 40
    ad66:	02 c0       	rjmp	.+4      	; 0xad6c <Config_Wifi+0x31c>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    ad68:	80 ec       	ldi	r24, 0xC0	; 192
    ad6a:	98 e2       	ldi	r25, 0x28	; 40
    ad6c:	61 2f       	mov	r22, r17
    ad6e:	40 e0       	ldi	r20, 0x00	; 0
    ad70:	2a e9       	ldi	r18, 0x9A	; 154
    ad72:	3e e2       	ldi	r19, 0x2E	; 46
    ad74:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		}
		display_writeBufferToScreen();
    ad78:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    ad7c:	88 e9       	ldi	r24, 0x98	; 152
    ad7e:	9a e3       	ldi	r25, 0x3A	; 58
    ad80:	20 e7       	ldi	r18, 0x70	; 112
    ad82:	31 e0       	ldi	r19, 0x01	; 1
    ad84:	f9 01       	movw	r30, r18
    ad86:	31 97       	sbiw	r30, 0x01	; 1
    ad88:	f1 f7       	brne	.-4      	; 0xad86 <Config_Wifi+0x336>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad8c:	d9 f7       	brne	.-10     	; 0xad84 <Config_Wifi+0x334>
		_delay_ms(1500);
		col++;
    ad8e:	1f 5f       	subi	r17, 0xFF	; 255
	}

	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    ad90:	82 ed       	ldi	r24, 0xD2	; 210
    ad92:	98 e2       	ldi	r25, 0x28	; 40
    ad94:	6b ed       	ldi	r22, 0xDB	; 219
    ad96:	78 e2       	ldi	r23, 0x28	; 40
    ad98:	ab 01       	movw	r20, r22
    ad9a:	24 ef       	ldi	r18, 0xF4	; 244
    ad9c:	31 e0       	ldi	r19, 0x01	; 1
    ad9e:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
    ada2:	88 e8       	ldi	r24, 0x88	; 136
    ada4:	93 e1       	ldi	r25, 0x13	; 19
    ada6:	20 e7       	ldi	r18, 0x70	; 112
    ada8:	31 e0       	ldi	r19, 0x01	; 1
    adaa:	f9 01       	movw	r30, r18
    adac:	31 97       	sbiw	r30, 0x01	; 1
    adae:	f1 f7       	brne	.-4      	; 0xadac <Config_Wifi+0x35c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adb2:	d9 f7       	brne	.-10     	; 0xadaa <Config_Wifi+0x35a>
	_delay_ms(500);

	Wifi_GetMac(1000);
    adb4:	88 ee       	ldi	r24, 0xE8	; 232
    adb6:	93 e0       	ldi	r25, 0x03	; 3
    adb8:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <Wifi_GetMac>
    adbc:	88 e8       	ldi	r24, 0x88	; 136
    adbe:	93 e1       	ldi	r25, 0x13	; 19
    adc0:	20 e7       	ldi	r18, 0x70	; 112
    adc2:	31 e0       	ldi	r19, 0x01	; 1
    adc4:	f9 01       	movw	r30, r18
    adc6:	31 97       	sbiw	r30, 0x01	; 1
    adc8:	f1 f7       	brne	.-4      	; 0xadc6 <Config_Wifi+0x376>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    adcc:	d9 f7       	brne	.-10     	; 0xadc4 <Config_Wifi+0x374>
	_delay_ms(500);
	Wifi_ExitCMDMode(500);
    adce:	84 ef       	ldi	r24, 0xF4	; 244
    add0:	91 e0       	ldi	r25, 0x01	; 1
    add2:	0e 94 3a 40 	call	0x8074	; 0x8074 <Wifi_ExitCMDMode>
    add6:	80 e1       	ldi	r24, 0x10	; 16
    add8:	97 e2       	ldi	r25, 0x27	; 39
    adda:	20 e7       	ldi	r18, 0x70	; 112
    addc:	31 e0       	ldi	r19, 0x01	; 1
    adde:	f9 01       	movw	r30, r18
    ade0:	31 97       	sbiw	r30, 0x01	; 1
    ade2:	f1 f7       	brne	.-4      	; 0xade0 <Config_Wifi+0x390>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ade4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ade6:	d9 f7       	brne	.-10     	; 0xadde <Config_Wifi+0x38e>

	_delay_ms(1000);
	
	if(Wifi_Connected(1000)){
    ade8:	88 ee       	ldi	r24, 0xE8	; 232
    adea:	93 e0       	ldi	r25, 0x03	; 3
    adec:	0e 94 34 03 	call	0x668	; 0x668 <Wifi_Connected>
    adf0:	88 23       	and	r24, r24
    adf2:	61 f0       	breq	.+24     	; 0xae0c <Config_Wifi+0x3bc>
		display_putString("network........OK",col,0,System5x7);
    adf4:	85 ee       	ldi	r24, 0xE5	; 229
    adf6:	98 e2       	ldi	r25, 0x28	; 40
    adf8:	61 2f       	mov	r22, r17
    adfa:	40 e0       	ldi	r20, 0x00	; 0
    adfc:	2a e9       	ldi	r18, 0x9A	; 154
    adfe:	3e e2       	ldi	r19, 0x2E	; 46
    ae00:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		connected = true;
    ae04:	81 e0       	ldi	r24, 0x01	; 1
    ae06:	80 93 14 31 	sts	0x3114, r24
    ae0a:	0a c0       	rjmp	.+20     	; 0xae20 <Config_Wifi+0x3d0>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    ae0c:	87 ef       	ldi	r24, 0xF7	; 247
    ae0e:	98 e2       	ldi	r25, 0x28	; 40
    ae10:	61 2f       	mov	r22, r17
    ae12:	40 e0       	ldi	r20, 0x00	; 0
    ae14:	2a e9       	ldi	r18, 0x9A	; 154
    ae16:	3e e2       	ldi	r19, 0x2E	; 46
    ae18:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		connected = false;
    ae1c:	10 92 14 31 	sts	0x3114, r1
	}
	display_writeBufferToScreen();
    ae20:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
	col++;
    ae24:	1f 5f       	subi	r17, 0xFF	; 255


	
	if(connected){
    ae26:	80 91 14 31 	lds	r24, 0x3114
    ae2a:	88 23       	and	r24, r24
    ae2c:	09 f4       	brne	.+2      	; 0xae30 <Config_Wifi+0x3e0>
    ae2e:	ad c0       	rjmp	.+346    	; 0xaf8a <Config_Wifi+0x53a>
    ae30:	80 e1       	ldi	r24, 0x10	; 16
    ae32:	97 e2       	ldi	r25, 0x27	; 39
    ae34:	20 e7       	ldi	r18, 0x70	; 112
    ae36:	31 e0       	ldi	r19, 0x01	; 1
    ae38:	f9 01       	movw	r30, r18
    ae3a:	31 97       	sbiw	r30, 0x01	; 1
    ae3c:	f1 f7       	brne	.-4      	; 0xae3a <Config_Wifi+0x3ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae40:	d9 f7       	brne	.-10     	; 0xae38 <Config_Wifi+0x3e8>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    ae42:	84 ef       	ldi	r24, 0xF4	; 244
    ae44:	91 e0       	ldi	r25, 0x01	; 1
    ae46:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    ae4a:	88 ee       	ldi	r24, 0xE8	; 232
    ae4c:	93 e0       	ldi	r25, 0x03	; 3
    ae4e:	0e 94 13 54 	call	0xa826	; 0xa826 <Wifi_GetTime>
    ae52:	88 23       	and	r24, r24
    ae54:	09 f4       	brne	.+2      	; 0xae58 <Config_Wifi+0x408>
    ae56:	63 c0       	rjmp	.+198    	; 0xaf1e <Config_Wifi+0x4ce>
		    timeIsValid = true;
    ae58:	81 e0       	ldi	r24, 0x01	; 1
    ae5a:	80 93 6c 31 	sts	0x316C, r24
			display_putString("internet.......OK",col,0,System5x7);
    ae5e:	89 e0       	ldi	r24, 0x09	; 9
    ae60:	99 e2       	ldi	r25, 0x29	; 41
    ae62:	61 2f       	mov	r22, r17
    ae64:	40 e0       	ldi	r20, 0x00	; 0
    ae66:	2a e9       	ldi	r18, 0x9A	; 154
    ae68:	3e e2       	ldi	r19, 0x2E	; 46
    ae6a:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
			Time_Set(time_secs);
    ae6e:	80 91 0c 31 	lds	r24, 0x310C
    ae72:	90 91 0d 31 	lds	r25, 0x310D
    ae76:	a0 91 0e 31 	lds	r26, 0x310E
    ae7a:	b0 91 0f 31 	lds	r27, 0x310F
	
	
}

void Time_Set(uint32_t time){
  cli();
    ae7e:	f8 94       	cli
  UNIX_time = time;
    ae80:	80 93 2b 31 	sts	0x312B, r24
    ae84:	90 93 2c 31 	sts	0x312C, r25
    ae88:	a0 93 2d 31 	sts	0x312D, r26
    ae8c:	b0 93 2e 31 	sts	0x312E, r27
  sei();
    ae90:	78 94       	sei
			signalStrength = Wifi_GetSignalStrength(1000);
    ae92:	88 ee       	ldi	r24, 0xE8	; 232
    ae94:	93 e0       	ldi	r25, 0x03	; 3
    ae96:	0e 94 c6 54 	call	0xa98c	; 0xa98c <Wifi_GetSignalStrength>
    ae9a:	80 93 57 31 	sts	0x3157, r24

	        //Debug_SendString("Getting space remaining",true);
	        okToGetRemainingSpace = true;
    ae9e:	81 e0       	ldi	r24, 0x01	; 1
    aea0:	80 93 8b 48 	sts	0x488B, r24
	        while(!okToGetRemainingSpace);
    aea4:	80 91 8b 48 	lds	r24, 0x488B
    aea8:	88 23       	and	r24, r24
    aeaa:	e1 f3       	breq	.-8      	; 0xaea4 <Config_Wifi+0x454>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    aeac:	e0 e2       	ldi	r30, 0x20	; 32
    aeae:	f6 e0       	ldi	r31, 0x06	; 6
    aeb0:	80 e4       	ldi	r24, 0x40	; 64
    aeb2:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    aeb4:	80 e8       	ldi	r24, 0x80	; 128
    aeb6:	86 83       	std	Z+6, r24	; 0x06
    aeb8:	80 e1       	ldi	r24, 0x10	; 16
    aeba:	97 e2       	ldi	r25, 0x27	; 39
    aebc:	20 e7       	ldi	r18, 0x70	; 112
    aebe:	31 e0       	ldi	r19, 0x01	; 1
    aec0:	f9 01       	movw	r30, r18
    aec2:	31 97       	sbiw	r30, 0x01	; 1
    aec4:	f1 f7       	brne	.-4      	; 0xaec2 <Config_Wifi+0x472>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aec6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aec8:	d9 f7       	brne	.-10     	; 0xaec0 <Config_Wifi+0x470>


			Leds_Set(wifi_Green);
			Leds_Clear(wifi_Red);
			_delay_ms(1000);
            Wifi_SendCommand("set uart instant 460800","AOK","AOK",5);
    aeca:	8b e1       	ldi	r24, 0x1B	; 27
    aecc:	99 e2       	ldi	r25, 0x29	; 41
    aece:	60 e6       	ldi	r22, 0x60	; 96
    aed0:	77 e2       	ldi	r23, 0x27	; 39
    aed2:	ab 01       	movw	r20, r22
    aed4:	25 e0       	ldi	r18, 0x05	; 5
    aed6:	30 e0       	ldi	r19, 0x00	; 0
    aed8:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <Wifi_SendCommand>
            Wifi_Init(460800);
    aedc:	60 e0       	ldi	r22, 0x00	; 0
    aede:	78 e0       	ldi	r23, 0x08	; 8
    aee0:	87 e0       	ldi	r24, 0x07	; 7
    aee2:	90 e0       	ldi	r25, 0x00	; 0
    aee4:	0e 94 a1 02 	call	0x542	; 0x542 <Wifi_Init>
    aee8:	80 e3       	ldi	r24, 0x30	; 48
    aeea:	95 e7       	ldi	r25, 0x75	; 117
    aeec:	20 e7       	ldi	r18, 0x70	; 112
    aeee:	31 e0       	ldi	r19, 0x01	; 1
    aef0:	f9 01       	movw	r30, r18
    aef2:	31 97       	sbiw	r30, 0x01	; 1
    aef4:	f1 f7       	brne	.-4      	; 0xaef2 <Config_Wifi+0x4a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aef6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aef8:	d9 f7       	brne	.-10     	; 0xaef0 <Config_Wifi+0x4a0>
    aefa:	08 c0       	rjmp	.+16     	; 0xaf0c <Config_Wifi+0x4bc>
    aefc:	80 e1       	ldi	r24, 0x10	; 16
    aefe:	97 e2       	ldi	r25, 0x27	; 39
    af00:	fe 01       	movw	r30, r28
    af02:	31 97       	sbiw	r30, 0x01	; 1
    af04:	f1 f7       	brne	.-4      	; 0xaf02 <Config_Wifi+0x4b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af08:	d9 f7       	brne	.-10     	; 0xaf00 <Config_Wifi+0x4b0>
    af0a:	02 c0       	rjmp	.+4      	; 0xaf10 <Config_Wifi+0x4c0>
    af0c:	c0 e7       	ldi	r28, 0x70	; 112
    af0e:	d1 e0       	ldi	r29, 0x01	; 1
            //Wifi_SendCommand("set uart instant 115200","AOK","AOK",5);
            //Wifi_Init(115200);
	        _delay_ms(3000);
			while(!Wifi_EnterCMDMode(500)){
    af10:	84 ef       	ldi	r24, 0xF4	; 244
    af12:	91 e0       	ldi	r25, 0x01	; 1
    af14:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <Wifi_EnterCMDMode>
    af18:	88 23       	and	r24, r24
    af1a:	81 f3       	breq	.-32     	; 0xaefc <Config_Wifi+0x4ac>
    af1c:	19 c0       	rjmp	.+50     	; 0xaf50 <Config_Wifi+0x500>
			    _delay_ms(1000);
			    //Debug_SendString("Retrying CMD Mode",true);
			}
		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    af1e:	83 e3       	ldi	r24, 0x33	; 51
    af20:	99 e2       	ldi	r25, 0x29	; 41
    af22:	61 2f       	mov	r22, r17
    af24:	40 e0       	ldi	r20, 0x00	; 0
    af26:	2a e9       	ldi	r18, 0x9A	; 154
    af28:	3e e2       	ldi	r19, 0x2E	; 46
    af2a:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    af2e:	e0 e2       	ldi	r30, 0x20	; 32
    af30:	f6 e0       	ldi	r31, 0x06	; 6
    af32:	80 e8       	ldi	r24, 0x80	; 128
    af34:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    af36:	80 e4       	ldi	r24, 0x40	; 64
    af38:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
			connected = false;
    af3a:	10 92 14 31 	sts	0x3114, r1
    af3e:	88 e8       	ldi	r24, 0x88	; 136
    af40:	93 e1       	ldi	r25, 0x13	; 19
    af42:	20 e7       	ldi	r18, 0x70	; 112
    af44:	31 e0       	ldi	r19, 0x01	; 1
    af46:	f9 01       	movw	r30, r18
    af48:	31 97       	sbiw	r30, 0x01	; 1
    af4a:	f1 f7       	brne	.-4      	; 0xaf48 <Config_Wifi+0x4f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af4e:	d9 f7       	brne	.-10     	; 0xaf46 <Config_Wifi+0x4f6>
			_delay_ms(500);

		}

		display_writeBufferToScreen();
    af50:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
    af54:	80 e1       	ldi	r24, 0x10	; 16
    af56:	97 e2       	ldi	r25, 0x27	; 39
    af58:	20 e7       	ldi	r18, 0x70	; 112
    af5a:	31 e0       	ldi	r19, 0x01	; 1
    af5c:	f9 01       	movw	r30, r18
    af5e:	31 97       	sbiw	r30, 0x01	; 1
    af60:	f1 f7       	brne	.-4      	; 0xaf5e <Config_Wifi+0x50e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af64:	d9 f7       	brne	.-10     	; 0xaf5c <Config_Wifi+0x50c>
    af66:	08 c0       	rjmp	.+16     	; 0xaf78 <Config_Wifi+0x528>
    af68:	80 e1       	ldi	r24, 0x10	; 16
    af6a:	97 e2       	ldi	r25, 0x27	; 39
    af6c:	fe 01       	movw	r30, r28
    af6e:	31 97       	sbiw	r30, 0x01	; 1
    af70:	f1 f7       	brne	.-4      	; 0xaf6e <Config_Wifi+0x51e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af74:	d9 f7       	brne	.-10     	; 0xaf6c <Config_Wifi+0x51c>
    af76:	02 c0       	rjmp	.+4      	; 0xaf7c <Config_Wifi+0x52c>
    af78:	c0 e7       	ldi	r28, 0x70	; 112
    af7a:	d1 e0       	ldi	r29, 0x01	; 1
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
    af7c:	88 ee       	ldi	r24, 0xE8	; 232
    af7e:	93 e0       	ldi	r25, 0x03	; 3
    af80:	0e 94 3a 40 	call	0x8074	; 0x8074 <Wifi_ExitCMDMode>
    af84:	88 23       	and	r24, r24
    af86:	81 f3       	breq	.-32     	; 0xaf68 <Config_Wifi+0x518>
    af88:	0e c0       	rjmp	.+28     	; 0xafa6 <Config_Wifi+0x556>
		   // Debug_SendString("Retrying EXIT CMD Mode",true);
		}


	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    af8a:	83 e3       	ldi	r24, 0x33	; 51
    af8c:	99 e2       	ldi	r25, 0x29	; 41
    af8e:	61 2f       	mov	r22, r17
    af90:	40 e0       	ldi	r20, 0x00	; 0
    af92:	2a e9       	ldi	r18, 0x9A	; 154
    af94:	3e e2       	ldi	r19, 0x2E	; 46
    af96:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <display_putString>
		display_writeBufferToScreen();
    af9a:	0e 94 9a 2c 	call	0x5934	; 0x5934 <display_writeBufferToScreen>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    af9e:	80 e8       	ldi	r24, 0x80	; 128
    afa0:	e0 e2       	ldi	r30, 0x20	; 32
    afa2:	f6 e0       	ldi	r31, 0x06	; 6
    afa4:	85 83       	std	Z+5, r24	; 0x05
		Leds_Set(wifi_Red);
	}


}
    afa6:	df 91       	pop	r29
    afa8:	cf 91       	pop	r28
    afaa:	1f 91       	pop	r17
    afac:	08 95       	ret

0000afae <__mulsi3>:
    afae:	62 9f       	mul	r22, r18
    afb0:	d0 01       	movw	r26, r0
    afb2:	73 9f       	mul	r23, r19
    afb4:	f0 01       	movw	r30, r0
    afb6:	82 9f       	mul	r24, r18
    afb8:	e0 0d       	add	r30, r0
    afba:	f1 1d       	adc	r31, r1
    afbc:	64 9f       	mul	r22, r20
    afbe:	e0 0d       	add	r30, r0
    afc0:	f1 1d       	adc	r31, r1
    afc2:	92 9f       	mul	r25, r18
    afc4:	f0 0d       	add	r31, r0
    afc6:	83 9f       	mul	r24, r19
    afc8:	f0 0d       	add	r31, r0
    afca:	74 9f       	mul	r23, r20
    afcc:	f0 0d       	add	r31, r0
    afce:	65 9f       	mul	r22, r21
    afd0:	f0 0d       	add	r31, r0
    afd2:	99 27       	eor	r25, r25
    afd4:	72 9f       	mul	r23, r18
    afd6:	b0 0d       	add	r27, r0
    afd8:	e1 1d       	adc	r30, r1
    afda:	f9 1f       	adc	r31, r25
    afdc:	63 9f       	mul	r22, r19
    afde:	b0 0d       	add	r27, r0
    afe0:	e1 1d       	adc	r30, r1
    afe2:	f9 1f       	adc	r31, r25
    afe4:	bd 01       	movw	r22, r26
    afe6:	cf 01       	movw	r24, r30
    afe8:	11 24       	eor	r1, r1
    afea:	08 95       	ret

0000afec <__udivmodqi4>:
    afec:	99 1b       	sub	r25, r25
    afee:	79 e0       	ldi	r23, 0x09	; 9
    aff0:	04 c0       	rjmp	.+8      	; 0xaffa <__udivmodqi4_ep>

0000aff2 <__udivmodqi4_loop>:
    aff2:	99 1f       	adc	r25, r25
    aff4:	96 17       	cp	r25, r22
    aff6:	08 f0       	brcs	.+2      	; 0xaffa <__udivmodqi4_ep>
    aff8:	96 1b       	sub	r25, r22

0000affa <__udivmodqi4_ep>:
    affa:	88 1f       	adc	r24, r24
    affc:	7a 95       	dec	r23
    affe:	c9 f7       	brne	.-14     	; 0xaff2 <__udivmodqi4_loop>
    b000:	80 95       	com	r24
    b002:	08 95       	ret

0000b004 <__udivmodhi4>:
    b004:	aa 1b       	sub	r26, r26
    b006:	bb 1b       	sub	r27, r27
    b008:	51 e1       	ldi	r21, 0x11	; 17
    b00a:	07 c0       	rjmp	.+14     	; 0xb01a <__udivmodhi4_ep>

0000b00c <__udivmodhi4_loop>:
    b00c:	aa 1f       	adc	r26, r26
    b00e:	bb 1f       	adc	r27, r27
    b010:	a6 17       	cp	r26, r22
    b012:	b7 07       	cpc	r27, r23
    b014:	10 f0       	brcs	.+4      	; 0xb01a <__udivmodhi4_ep>
    b016:	a6 1b       	sub	r26, r22
    b018:	b7 0b       	sbc	r27, r23

0000b01a <__udivmodhi4_ep>:
    b01a:	88 1f       	adc	r24, r24
    b01c:	99 1f       	adc	r25, r25
    b01e:	5a 95       	dec	r21
    b020:	a9 f7       	brne	.-22     	; 0xb00c <__udivmodhi4_loop>
    b022:	80 95       	com	r24
    b024:	90 95       	com	r25
    b026:	bc 01       	movw	r22, r24
    b028:	cd 01       	movw	r24, r26
    b02a:	08 95       	ret

0000b02c <__divmodhi4>:
    b02c:	97 fb       	bst	r25, 7
    b02e:	09 2e       	mov	r0, r25
    b030:	07 26       	eor	r0, r23
    b032:	0a d0       	rcall	.+20     	; 0xb048 <__divmodhi4_neg1>
    b034:	77 fd       	sbrc	r23, 7
    b036:	04 d0       	rcall	.+8      	; 0xb040 <__divmodhi4_neg2>
    b038:	e5 df       	rcall	.-54     	; 0xb004 <__udivmodhi4>
    b03a:	06 d0       	rcall	.+12     	; 0xb048 <__divmodhi4_neg1>
    b03c:	00 20       	and	r0, r0
    b03e:	1a f4       	brpl	.+6      	; 0xb046 <__divmodhi4_exit>

0000b040 <__divmodhi4_neg2>:
    b040:	70 95       	com	r23
    b042:	61 95       	neg	r22
    b044:	7f 4f       	sbci	r23, 0xFF	; 255

0000b046 <__divmodhi4_exit>:
    b046:	08 95       	ret

0000b048 <__divmodhi4_neg1>:
    b048:	f6 f7       	brtc	.-4      	; 0xb046 <__divmodhi4_exit>
    b04a:	90 95       	com	r25
    b04c:	81 95       	neg	r24
    b04e:	9f 4f       	sbci	r25, 0xFF	; 255
    b050:	08 95       	ret

0000b052 <__udivmodsi4>:
    b052:	a1 e2       	ldi	r26, 0x21	; 33
    b054:	1a 2e       	mov	r1, r26
    b056:	aa 1b       	sub	r26, r26
    b058:	bb 1b       	sub	r27, r27
    b05a:	fd 01       	movw	r30, r26
    b05c:	0d c0       	rjmp	.+26     	; 0xb078 <__udivmodsi4_ep>

0000b05e <__udivmodsi4_loop>:
    b05e:	aa 1f       	adc	r26, r26
    b060:	bb 1f       	adc	r27, r27
    b062:	ee 1f       	adc	r30, r30
    b064:	ff 1f       	adc	r31, r31
    b066:	a2 17       	cp	r26, r18
    b068:	b3 07       	cpc	r27, r19
    b06a:	e4 07       	cpc	r30, r20
    b06c:	f5 07       	cpc	r31, r21
    b06e:	20 f0       	brcs	.+8      	; 0xb078 <__udivmodsi4_ep>
    b070:	a2 1b       	sub	r26, r18
    b072:	b3 0b       	sbc	r27, r19
    b074:	e4 0b       	sbc	r30, r20
    b076:	f5 0b       	sbc	r31, r21

0000b078 <__udivmodsi4_ep>:
    b078:	66 1f       	adc	r22, r22
    b07a:	77 1f       	adc	r23, r23
    b07c:	88 1f       	adc	r24, r24
    b07e:	99 1f       	adc	r25, r25
    b080:	1a 94       	dec	r1
    b082:	69 f7       	brne	.-38     	; 0xb05e <__udivmodsi4_loop>
    b084:	60 95       	com	r22
    b086:	70 95       	com	r23
    b088:	80 95       	com	r24
    b08a:	90 95       	com	r25
    b08c:	9b 01       	movw	r18, r22
    b08e:	ac 01       	movw	r20, r24
    b090:	bd 01       	movw	r22, r26
    b092:	cf 01       	movw	r24, r30
    b094:	08 95       	ret

0000b096 <atoi>:
    b096:	fc 01       	movw	r30, r24
    b098:	88 27       	eor	r24, r24
    b09a:	99 27       	eor	r25, r25
    b09c:	e8 94       	clt
    b09e:	21 91       	ld	r18, Z+
    b0a0:	20 32       	cpi	r18, 0x20	; 32
    b0a2:	e9 f3       	breq	.-6      	; 0xb09e <atoi+0x8>
    b0a4:	29 30       	cpi	r18, 0x09	; 9
    b0a6:	10 f0       	brcs	.+4      	; 0xb0ac <atoi+0x16>
    b0a8:	2e 30       	cpi	r18, 0x0E	; 14
    b0aa:	c8 f3       	brcs	.-14     	; 0xb09e <atoi+0x8>
    b0ac:	2b 32       	cpi	r18, 0x2B	; 43
    b0ae:	41 f0       	breq	.+16     	; 0xb0c0 <atoi+0x2a>
    b0b0:	2d 32       	cpi	r18, 0x2D	; 45
    b0b2:	39 f4       	brne	.+14     	; 0xb0c2 <atoi+0x2c>
    b0b4:	68 94       	set
    b0b6:	04 c0       	rjmp	.+8      	; 0xb0c0 <atoi+0x2a>
    b0b8:	0e 94 8e 59 	call	0xb31c	; 0xb31c <__mulhi_const_10>
    b0bc:	82 0f       	add	r24, r18
    b0be:	91 1d       	adc	r25, r1
    b0c0:	21 91       	ld	r18, Z+
    b0c2:	20 53       	subi	r18, 0x30	; 48
    b0c4:	2a 30       	cpi	r18, 0x0A	; 10
    b0c6:	c0 f3       	brcs	.-16     	; 0xb0b8 <atoi+0x22>
    b0c8:	1e f4       	brtc	.+6      	; 0xb0d0 <atoi+0x3a>
    b0ca:	90 95       	com	r25
    b0cc:	81 95       	neg	r24
    b0ce:	9f 4f       	sbci	r25, 0xFF	; 255
    b0d0:	08 95       	ret

0000b0d2 <atol>:
    b0d2:	1f 93       	push	r17
    b0d4:	fc 01       	movw	r30, r24
    b0d6:	99 27       	eor	r25, r25
    b0d8:	88 27       	eor	r24, r24
    b0da:	bc 01       	movw	r22, r24
    b0dc:	e8 94       	clt
    b0de:	11 91       	ld	r17, Z+
    b0e0:	10 32       	cpi	r17, 0x20	; 32
    b0e2:	e9 f3       	breq	.-6      	; 0xb0de <atol+0xc>
    b0e4:	19 30       	cpi	r17, 0x09	; 9
    b0e6:	10 f0       	brcs	.+4      	; 0xb0ec <atol+0x1a>
    b0e8:	1e 30       	cpi	r17, 0x0E	; 14
    b0ea:	c8 f3       	brcs	.-14     	; 0xb0de <atol+0xc>
    b0ec:	1b 32       	cpi	r17, 0x2B	; 43
    b0ee:	51 f0       	breq	.+20     	; 0xb104 <atol+0x32>
    b0f0:	1d 32       	cpi	r17, 0x2D	; 45
    b0f2:	49 f4       	brne	.+18     	; 0xb106 <atol+0x34>
    b0f4:	68 94       	set
    b0f6:	06 c0       	rjmp	.+12     	; 0xb104 <atol+0x32>
    b0f8:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <__mulsi_const_10>
    b0fc:	61 0f       	add	r22, r17
    b0fe:	71 1d       	adc	r23, r1
    b100:	81 1d       	adc	r24, r1
    b102:	91 1d       	adc	r25, r1
    b104:	11 91       	ld	r17, Z+
    b106:	10 53       	subi	r17, 0x30	; 48
    b108:	1a 30       	cpi	r17, 0x0A	; 10
    b10a:	b0 f3       	brcs	.-20     	; 0xb0f8 <atol+0x26>
    b10c:	3e f4       	brtc	.+14     	; 0xb11c <atol+0x4a>
    b10e:	90 95       	com	r25
    b110:	80 95       	com	r24
    b112:	70 95       	com	r23
    b114:	61 95       	neg	r22
    b116:	7f 4f       	sbci	r23, 0xFF	; 255
    b118:	8f 4f       	sbci	r24, 0xFF	; 255
    b11a:	9f 4f       	sbci	r25, 0xFF	; 255
    b11c:	1f 91       	pop	r17
    b11e:	08 95       	ret

0000b120 <strtok>:
    b120:	4c ef       	ldi	r20, 0xFC	; 252
    b122:	55 e3       	ldi	r21, 0x35	; 53
    b124:	0e 94 14 59 	call	0xb228	; 0xb228 <strtok_r>
    b128:	08 95       	ret

0000b12a <memmove>:
    b12a:	68 17       	cp	r22, r24
    b12c:	79 07       	cpc	r23, r25
    b12e:	68 f4       	brcc	.+26     	; 0xb14a <memmove+0x20>
    b130:	fb 01       	movw	r30, r22
    b132:	dc 01       	movw	r26, r24
    b134:	e4 0f       	add	r30, r20
    b136:	f5 1f       	adc	r31, r21
    b138:	a4 0f       	add	r26, r20
    b13a:	b5 1f       	adc	r27, r21
    b13c:	02 c0       	rjmp	.+4      	; 0xb142 <memmove+0x18>
    b13e:	02 90       	ld	r0, -Z
    b140:	0e 92       	st	-X, r0
    b142:	41 50       	subi	r20, 0x01	; 1
    b144:	50 40       	sbci	r21, 0x00	; 0
    b146:	d8 f7       	brcc	.-10     	; 0xb13e <memmove+0x14>
    b148:	08 95       	ret
    b14a:	0c 94 cc 5b 	jmp	0xb798	; 0xb798 <memcpy>

0000b14e <strcasecmp>:
    b14e:	fb 01       	movw	r30, r22
    b150:	dc 01       	movw	r26, r24
    b152:	8d 91       	ld	r24, X+
    b154:	81 34       	cpi	r24, 0x41	; 65
    b156:	1c f0       	brlt	.+6      	; 0xb15e <strcasecmp+0x10>
    b158:	8b 35       	cpi	r24, 0x5B	; 91
    b15a:	0c f4       	brge	.+2      	; 0xb15e <strcasecmp+0x10>
    b15c:	80 5e       	subi	r24, 0xE0	; 224
    b15e:	61 91       	ld	r22, Z+
    b160:	61 34       	cpi	r22, 0x41	; 65
    b162:	1c f0       	brlt	.+6      	; 0xb16a <strcasecmp+0x1c>
    b164:	6b 35       	cpi	r22, 0x5B	; 91
    b166:	0c f4       	brge	.+2      	; 0xb16a <strcasecmp+0x1c>
    b168:	60 5e       	subi	r22, 0xE0	; 224
    b16a:	86 1b       	sub	r24, r22
    b16c:	61 11       	cpse	r22, r1
    b16e:	89 f3       	breq	.-30     	; 0xb152 <strcasecmp+0x4>
    b170:	99 0b       	sbc	r25, r25
    b172:	08 95       	ret

0000b174 <strcasestr>:
    b174:	fb 01       	movw	r30, r22
    b176:	51 91       	ld	r21, Z+
    b178:	55 23       	and	r21, r21
    b17a:	b1 f0       	breq	.+44     	; 0xb1a8 <strcasestr+0x34>
    b17c:	bf 01       	movw	r22, r30
    b17e:	dc 01       	movw	r26, r24
    b180:	05 2e       	mov	r0, r21
    b182:	4d 91       	ld	r20, X+
    b184:	44 23       	and	r20, r20
    b186:	69 f0       	breq	.+26     	; 0xb1a2 <strcasestr+0x2e>
    b188:	10 d0       	rcall	.+32     	; 0xb1aa <strcasestr+0x36>
    b18a:	d9 f7       	brne	.-10     	; 0xb182 <strcasestr+0xe>
    b18c:	cd 01       	movw	r24, r26
    b18e:	01 90       	ld	r0, Z+
    b190:	00 20       	and	r0, r0
    b192:	49 f0       	breq	.+18     	; 0xb1a6 <strcasestr+0x32>
    b194:	4d 91       	ld	r20, X+
    b196:	41 11       	cpse	r20, r1
    b198:	08 d0       	rcall	.+16     	; 0xb1aa <strcasestr+0x36>
    b19a:	c9 f3       	breq	.-14     	; 0xb18e <strcasestr+0x1a>
    b19c:	fb 01       	movw	r30, r22
    b19e:	41 11       	cpse	r20, r1
    b1a0:	ee cf       	rjmp	.-36     	; 0xb17e <strcasestr+0xa>
    b1a2:	81 e0       	ldi	r24, 0x01	; 1
    b1a4:	90 e0       	ldi	r25, 0x00	; 0
    b1a6:	01 97       	sbiw	r24, 0x01	; 1
    b1a8:	08 95       	ret
    b1aa:	40 25       	eor	r20, r0
    b1ac:	39 f0       	breq	.+14     	; 0xb1bc <strcasestr+0x48>
    b1ae:	40 32       	cpi	r20, 0x20	; 32
    b1b0:	29 f4       	brne	.+10     	; 0xb1bc <strcasestr+0x48>
    b1b2:	40 29       	or	r20, r0
    b1b4:	4b 57       	subi	r20, 0x7B	; 123
    b1b6:	46 5e       	subi	r20, 0xE6	; 230
    b1b8:	08 f0       	brcs	.+2      	; 0xb1bc <strcasestr+0x48>
    b1ba:	18 94       	sez
    b1bc:	08 95       	ret

0000b1be <strcat>:
    b1be:	fb 01       	movw	r30, r22
    b1c0:	dc 01       	movw	r26, r24
    b1c2:	0d 90       	ld	r0, X+
    b1c4:	00 20       	and	r0, r0
    b1c6:	e9 f7       	brne	.-6      	; 0xb1c2 <strcat+0x4>
    b1c8:	11 97       	sbiw	r26, 0x01	; 1
    b1ca:	01 90       	ld	r0, Z+
    b1cc:	0d 92       	st	X+, r0
    b1ce:	00 20       	and	r0, r0
    b1d0:	e1 f7       	brne	.-8      	; 0xb1ca <strcat+0xc>
    b1d2:	08 95       	ret

0000b1d4 <strcmp>:
    b1d4:	fb 01       	movw	r30, r22
    b1d6:	dc 01       	movw	r26, r24
    b1d8:	8d 91       	ld	r24, X+
    b1da:	01 90       	ld	r0, Z+
    b1dc:	80 19       	sub	r24, r0
    b1de:	01 10       	cpse	r0, r1
    b1e0:	d9 f3       	breq	.-10     	; 0xb1d8 <strcmp+0x4>
    b1e2:	99 0b       	sbc	r25, r25
    b1e4:	08 95       	ret

0000b1e6 <strcpy>:
    b1e6:	fb 01       	movw	r30, r22
    b1e8:	dc 01       	movw	r26, r24
    b1ea:	01 90       	ld	r0, Z+
    b1ec:	0d 92       	st	X+, r0
    b1ee:	00 20       	and	r0, r0
    b1f0:	e1 f7       	brne	.-8      	; 0xb1ea <strcpy+0x4>
    b1f2:	08 95       	ret

0000b1f4 <strstr>:
    b1f4:	fb 01       	movw	r30, r22
    b1f6:	51 91       	ld	r21, Z+
    b1f8:	55 23       	and	r21, r21
    b1fa:	a9 f0       	breq	.+42     	; 0xb226 <strstr+0x32>
    b1fc:	bf 01       	movw	r22, r30
    b1fe:	dc 01       	movw	r26, r24
    b200:	4d 91       	ld	r20, X+
    b202:	45 17       	cp	r20, r21
    b204:	41 11       	cpse	r20, r1
    b206:	e1 f7       	brne	.-8      	; 0xb200 <strstr+0xc>
    b208:	59 f4       	brne	.+22     	; 0xb220 <strstr+0x2c>
    b20a:	cd 01       	movw	r24, r26
    b20c:	01 90       	ld	r0, Z+
    b20e:	00 20       	and	r0, r0
    b210:	49 f0       	breq	.+18     	; 0xb224 <strstr+0x30>
    b212:	4d 91       	ld	r20, X+
    b214:	40 15       	cp	r20, r0
    b216:	41 11       	cpse	r20, r1
    b218:	c9 f3       	breq	.-14     	; 0xb20c <strstr+0x18>
    b21a:	fb 01       	movw	r30, r22
    b21c:	41 11       	cpse	r20, r1
    b21e:	ef cf       	rjmp	.-34     	; 0xb1fe <strstr+0xa>
    b220:	81 e0       	ldi	r24, 0x01	; 1
    b222:	90 e0       	ldi	r25, 0x00	; 0
    b224:	01 97       	sbiw	r24, 0x01	; 1
    b226:	08 95       	ret

0000b228 <strtok_r>:
    b228:	fa 01       	movw	r30, r20
    b22a:	a1 91       	ld	r26, Z+
    b22c:	b0 81       	ld	r27, Z
    b22e:	00 97       	sbiw	r24, 0x00	; 0
    b230:	19 f4       	brne	.+6      	; 0xb238 <strtok_r+0x10>
    b232:	10 97       	sbiw	r26, 0x00	; 0
    b234:	e1 f0       	breq	.+56     	; 0xb26e <strtok_r+0x46>
    b236:	cd 01       	movw	r24, r26
    b238:	dc 01       	movw	r26, r24
    b23a:	cd 01       	movw	r24, r26
    b23c:	0d 90       	ld	r0, X+
    b23e:	00 20       	and	r0, r0
    b240:	11 f4       	brne	.+4      	; 0xb246 <strtok_r+0x1e>
    b242:	c0 01       	movw	r24, r0
    b244:	13 c0       	rjmp	.+38     	; 0xb26c <strtok_r+0x44>
    b246:	fb 01       	movw	r30, r22
    b248:	21 91       	ld	r18, Z+
    b24a:	22 23       	and	r18, r18
    b24c:	19 f0       	breq	.+6      	; 0xb254 <strtok_r+0x2c>
    b24e:	20 15       	cp	r18, r0
    b250:	d9 f7       	brne	.-10     	; 0xb248 <strtok_r+0x20>
    b252:	f3 cf       	rjmp	.-26     	; 0xb23a <strtok_r+0x12>
    b254:	fb 01       	movw	r30, r22
    b256:	21 91       	ld	r18, Z+
    b258:	20 15       	cp	r18, r0
    b25a:	19 f4       	brne	.+6      	; 0xb262 <strtok_r+0x3a>
    b25c:	1e 92       	st	-X, r1
    b25e:	11 96       	adiw	r26, 0x01	; 1
    b260:	06 c0       	rjmp	.+12     	; 0xb26e <strtok_r+0x46>
    b262:	22 23       	and	r18, r18
    b264:	c1 f7       	brne	.-16     	; 0xb256 <strtok_r+0x2e>
    b266:	0d 90       	ld	r0, X+
    b268:	00 20       	and	r0, r0
    b26a:	a1 f7       	brne	.-24     	; 0xb254 <strtok_r+0x2c>
    b26c:	d0 01       	movw	r26, r0
    b26e:	fa 01       	movw	r30, r20
    b270:	a1 93       	st	Z+, r26
    b272:	b0 83       	st	Z, r27
    b274:	08 95       	ret

0000b276 <strupr>:
    b276:	dc 01       	movw	r26, r24
    b278:	6c 91       	ld	r22, X
    b27a:	61 56       	subi	r22, 0x61	; 97
    b27c:	6a 31       	cpi	r22, 0x1A	; 26
    b27e:	08 f0       	brcs	.+2      	; 0xb282 <strupr+0xc>
    b280:	60 5e       	subi	r22, 0xE0	; 224
    b282:	6f 5b       	subi	r22, 0xBF	; 191
    b284:	6d 93       	st	X+, r22
    b286:	c1 f7       	brne	.-16     	; 0xb278 <strupr+0x2>
    b288:	08 95       	ret

0000b28a <ltoa>:
    b28a:	fa 01       	movw	r30, r20
    b28c:	cf 93       	push	r28
    b28e:	ff 93       	push	r31
    b290:	ef 93       	push	r30
    b292:	22 30       	cpi	r18, 0x02	; 2
    b294:	44 f1       	brlt	.+80     	; 0xb2e6 <ltoa+0x5c>
    b296:	25 32       	cpi	r18, 0x25	; 37
    b298:	34 f5       	brge	.+76     	; 0xb2e6 <ltoa+0x5c>
    b29a:	c2 2f       	mov	r28, r18
    b29c:	e8 94       	clt
    b29e:	ca 30       	cpi	r28, 0x0A	; 10
    b2a0:	49 f4       	brne	.+18     	; 0xb2b4 <ltoa+0x2a>
    b2a2:	97 fb       	bst	r25, 7
    b2a4:	3e f4       	brtc	.+14     	; 0xb2b4 <ltoa+0x2a>
    b2a6:	90 95       	com	r25
    b2a8:	80 95       	com	r24
    b2aa:	70 95       	com	r23
    b2ac:	61 95       	neg	r22
    b2ae:	7f 4f       	sbci	r23, 0xFF	; 255
    b2b0:	8f 4f       	sbci	r24, 0xFF	; 255
    b2b2:	9f 4f       	sbci	r25, 0xFF	; 255
    b2b4:	2c 2f       	mov	r18, r28
    b2b6:	33 27       	eor	r19, r19
    b2b8:	44 27       	eor	r20, r20
    b2ba:	55 27       	eor	r21, r21
    b2bc:	ff 93       	push	r31
    b2be:	ef 93       	push	r30
    b2c0:	0e 94 29 58 	call	0xb052	; 0xb052 <__udivmodsi4>
    b2c4:	ef 91       	pop	r30
    b2c6:	ff 91       	pop	r31
    b2c8:	60 5d       	subi	r22, 0xD0	; 208
    b2ca:	6a 33       	cpi	r22, 0x3A	; 58
    b2cc:	0c f0       	brlt	.+2      	; 0xb2d0 <ltoa+0x46>
    b2ce:	69 5d       	subi	r22, 0xD9	; 217
    b2d0:	61 93       	st	Z+, r22
    b2d2:	b9 01       	movw	r22, r18
    b2d4:	ca 01       	movw	r24, r20
    b2d6:	60 50       	subi	r22, 0x00	; 0
    b2d8:	70 40       	sbci	r23, 0x00	; 0
    b2da:	80 40       	sbci	r24, 0x00	; 0
    b2dc:	90 40       	sbci	r25, 0x00	; 0
    b2de:	51 f7       	brne	.-44     	; 0xb2b4 <ltoa+0x2a>
    b2e0:	16 f4       	brtc	.+4      	; 0xb2e6 <ltoa+0x5c>
    b2e2:	cd e2       	ldi	r28, 0x2D	; 45
    b2e4:	c1 93       	st	Z+, r28
    b2e6:	10 82       	st	Z, r1
    b2e8:	8f 91       	pop	r24
    b2ea:	9f 91       	pop	r25
    b2ec:	cf 91       	pop	r28
    b2ee:	0c 94 e0 5b 	jmp	0xb7c0	; 0xb7c0 <strrev>

0000b2f2 <__mulsi_const_10>:
    b2f2:	59 2f       	mov	r21, r25
    b2f4:	48 2f       	mov	r20, r24
    b2f6:	37 2f       	mov	r19, r23
    b2f8:	26 2f       	mov	r18, r22
    b2fa:	66 0f       	add	r22, r22
    b2fc:	77 1f       	adc	r23, r23
    b2fe:	88 1f       	adc	r24, r24
    b300:	99 1f       	adc	r25, r25
    b302:	66 0f       	add	r22, r22
    b304:	77 1f       	adc	r23, r23
    b306:	88 1f       	adc	r24, r24
    b308:	99 1f       	adc	r25, r25
    b30a:	62 0f       	add	r22, r18
    b30c:	73 1f       	adc	r23, r19
    b30e:	84 1f       	adc	r24, r20
    b310:	95 1f       	adc	r25, r21
    b312:	66 0f       	add	r22, r22
    b314:	77 1f       	adc	r23, r23
    b316:	88 1f       	adc	r24, r24
    b318:	99 1f       	adc	r25, r25
    b31a:	08 95       	ret

0000b31c <__mulhi_const_10>:
    b31c:	7a e0       	ldi	r23, 0x0A	; 10
    b31e:	97 9f       	mul	r25, r23
    b320:	90 2d       	mov	r25, r0
    b322:	87 9f       	mul	r24, r23
    b324:	80 2d       	mov	r24, r0
    b326:	91 0d       	add	r25, r1
    b328:	11 24       	eor	r1, r1
    b32a:	08 95       	ret

0000b32c <sprintf>:
    b32c:	0f 93       	push	r16
    b32e:	1f 93       	push	r17
    b330:	df 93       	push	r29
    b332:	cf 93       	push	r28
    b334:	cd b7       	in	r28, 0x3d	; 61
    b336:	de b7       	in	r29, 0x3e	; 62
    b338:	2e 97       	sbiw	r28, 0x0e	; 14
    b33a:	cd bf       	out	0x3d, r28	; 61
    b33c:	de bf       	out	0x3e, r29	; 62
    b33e:	0e 89       	ldd	r16, Y+22	; 0x16
    b340:	1f 89       	ldd	r17, Y+23	; 0x17
    b342:	86 e0       	ldi	r24, 0x06	; 6
    b344:	8c 83       	std	Y+4, r24	; 0x04
    b346:	09 83       	std	Y+1, r16	; 0x01
    b348:	1a 83       	std	Y+2, r17	; 0x02
    b34a:	8f ef       	ldi	r24, 0xFF	; 255
    b34c:	9f e7       	ldi	r25, 0x7F	; 127
    b34e:	8d 83       	std	Y+5, r24	; 0x05
    b350:	9e 83       	std	Y+6, r25	; 0x06
    b352:	9e 01       	movw	r18, r28
    b354:	26 5e       	subi	r18, 0xE6	; 230
    b356:	3f 4f       	sbci	r19, 0xFF	; 255
    b358:	ce 01       	movw	r24, r28
    b35a:	01 96       	adiw	r24, 0x01	; 1
    b35c:	68 8d       	ldd	r22, Y+24	; 0x18
    b35e:	79 8d       	ldd	r23, Y+25	; 0x19
    b360:	a9 01       	movw	r20, r18
    b362:	0e 94 c1 59 	call	0xb382	; 0xb382 <vfprintf>
    b366:	2f 81       	ldd	r18, Y+7	; 0x07
    b368:	38 85       	ldd	r19, Y+8	; 0x08
    b36a:	02 0f       	add	r16, r18
    b36c:	13 1f       	adc	r17, r19
    b36e:	f8 01       	movw	r30, r16
    b370:	10 82       	st	Z, r1
    b372:	2e 96       	adiw	r28, 0x0e	; 14
    b374:	cd bf       	out	0x3d, r28	; 61
    b376:	de bf       	out	0x3e, r29	; 62
    b378:	cf 91       	pop	r28
    b37a:	df 91       	pop	r29
    b37c:	1f 91       	pop	r17
    b37e:	0f 91       	pop	r16
    b380:	08 95       	ret

0000b382 <vfprintf>:
    b382:	2f 92       	push	r2
    b384:	3f 92       	push	r3
    b386:	4f 92       	push	r4
    b388:	5f 92       	push	r5
    b38a:	6f 92       	push	r6
    b38c:	7f 92       	push	r7
    b38e:	8f 92       	push	r8
    b390:	9f 92       	push	r9
    b392:	af 92       	push	r10
    b394:	bf 92       	push	r11
    b396:	cf 92       	push	r12
    b398:	df 92       	push	r13
    b39a:	ef 92       	push	r14
    b39c:	ff 92       	push	r15
    b39e:	0f 93       	push	r16
    b3a0:	1f 93       	push	r17
    b3a2:	df 93       	push	r29
    b3a4:	cf 93       	push	r28
    b3a6:	cd b7       	in	r28, 0x3d	; 61
    b3a8:	de b7       	in	r29, 0x3e	; 62
    b3aa:	2b 97       	sbiw	r28, 0x0b	; 11
    b3ac:	cd bf       	out	0x3d, r28	; 61
    b3ae:	de bf       	out	0x3e, r29	; 62
    b3b0:	3c 01       	movw	r6, r24
    b3b2:	2b 01       	movw	r4, r22
    b3b4:	5a 01       	movw	r10, r20
    b3b6:	fc 01       	movw	r30, r24
    b3b8:	16 82       	std	Z+6, r1	; 0x06
    b3ba:	17 82       	std	Z+7, r1	; 0x07
    b3bc:	83 81       	ldd	r24, Z+3	; 0x03
    b3be:	81 fd       	sbrc	r24, 1
    b3c0:	03 c0       	rjmp	.+6      	; 0xb3c8 <vfprintf+0x46>
    b3c2:	6f ef       	ldi	r22, 0xFF	; 255
    b3c4:	7f ef       	ldi	r23, 0xFF	; 255
    b3c6:	c6 c1       	rjmp	.+908    	; 0xb754 <vfprintf+0x3d2>
    b3c8:	9a e0       	ldi	r25, 0x0A	; 10
    b3ca:	89 2e       	mov	r8, r25
    b3cc:	1e 01       	movw	r2, r28
    b3ce:	08 94       	sec
    b3d0:	21 1c       	adc	r2, r1
    b3d2:	31 1c       	adc	r3, r1
    b3d4:	f3 01       	movw	r30, r6
    b3d6:	23 81       	ldd	r18, Z+3	; 0x03
    b3d8:	f2 01       	movw	r30, r4
    b3da:	23 fd       	sbrc	r18, 3
    b3dc:	85 91       	lpm	r24, Z+
    b3de:	23 ff       	sbrs	r18, 3
    b3e0:	81 91       	ld	r24, Z+
    b3e2:	2f 01       	movw	r4, r30
    b3e4:	88 23       	and	r24, r24
    b3e6:	09 f4       	brne	.+2      	; 0xb3ea <vfprintf+0x68>
    b3e8:	b2 c1       	rjmp	.+868    	; 0xb74e <vfprintf+0x3cc>
    b3ea:	85 32       	cpi	r24, 0x25	; 37
    b3ec:	39 f4       	brne	.+14     	; 0xb3fc <vfprintf+0x7a>
    b3ee:	23 fd       	sbrc	r18, 3
    b3f0:	85 91       	lpm	r24, Z+
    b3f2:	23 ff       	sbrs	r18, 3
    b3f4:	81 91       	ld	r24, Z+
    b3f6:	2f 01       	movw	r4, r30
    b3f8:	85 32       	cpi	r24, 0x25	; 37
    b3fa:	29 f4       	brne	.+10     	; 0xb406 <vfprintf+0x84>
    b3fc:	90 e0       	ldi	r25, 0x00	; 0
    b3fe:	b3 01       	movw	r22, r6
    b400:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b404:	e7 cf       	rjmp	.-50     	; 0xb3d4 <vfprintf+0x52>
    b406:	98 2f       	mov	r25, r24
    b408:	ff 24       	eor	r15, r15
    b40a:	ee 24       	eor	r14, r14
    b40c:	99 24       	eor	r9, r9
    b40e:	ff e1       	ldi	r31, 0x1F	; 31
    b410:	ff 15       	cp	r31, r15
    b412:	d0 f0       	brcs	.+52     	; 0xb448 <vfprintf+0xc6>
    b414:	9b 32       	cpi	r25, 0x2B	; 43
    b416:	69 f0       	breq	.+26     	; 0xb432 <vfprintf+0xb0>
    b418:	9c 32       	cpi	r25, 0x2C	; 44
    b41a:	28 f4       	brcc	.+10     	; 0xb426 <vfprintf+0xa4>
    b41c:	90 32       	cpi	r25, 0x20	; 32
    b41e:	59 f0       	breq	.+22     	; 0xb436 <vfprintf+0xb4>
    b420:	93 32       	cpi	r25, 0x23	; 35
    b422:	91 f4       	brne	.+36     	; 0xb448 <vfprintf+0xc6>
    b424:	0e c0       	rjmp	.+28     	; 0xb442 <vfprintf+0xc0>
    b426:	9d 32       	cpi	r25, 0x2D	; 45
    b428:	49 f0       	breq	.+18     	; 0xb43c <vfprintf+0xba>
    b42a:	90 33       	cpi	r25, 0x30	; 48
    b42c:	69 f4       	brne	.+26     	; 0xb448 <vfprintf+0xc6>
    b42e:	41 e0       	ldi	r20, 0x01	; 1
    b430:	24 c0       	rjmp	.+72     	; 0xb47a <vfprintf+0xf8>
    b432:	52 e0       	ldi	r21, 0x02	; 2
    b434:	f5 2a       	or	r15, r21
    b436:	84 e0       	ldi	r24, 0x04	; 4
    b438:	f8 2a       	or	r15, r24
    b43a:	28 c0       	rjmp	.+80     	; 0xb48c <vfprintf+0x10a>
    b43c:	98 e0       	ldi	r25, 0x08	; 8
    b43e:	f9 2a       	or	r15, r25
    b440:	25 c0       	rjmp	.+74     	; 0xb48c <vfprintf+0x10a>
    b442:	e0 e1       	ldi	r30, 0x10	; 16
    b444:	fe 2a       	or	r15, r30
    b446:	22 c0       	rjmp	.+68     	; 0xb48c <vfprintf+0x10a>
    b448:	f7 fc       	sbrc	r15, 7
    b44a:	29 c0       	rjmp	.+82     	; 0xb49e <vfprintf+0x11c>
    b44c:	89 2f       	mov	r24, r25
    b44e:	80 53       	subi	r24, 0x30	; 48
    b450:	8a 30       	cpi	r24, 0x0A	; 10
    b452:	70 f4       	brcc	.+28     	; 0xb470 <vfprintf+0xee>
    b454:	f6 fe       	sbrs	r15, 6
    b456:	05 c0       	rjmp	.+10     	; 0xb462 <vfprintf+0xe0>
    b458:	98 9c       	mul	r9, r8
    b45a:	90 2c       	mov	r9, r0
    b45c:	11 24       	eor	r1, r1
    b45e:	98 0e       	add	r9, r24
    b460:	15 c0       	rjmp	.+42     	; 0xb48c <vfprintf+0x10a>
    b462:	e8 9c       	mul	r14, r8
    b464:	e0 2c       	mov	r14, r0
    b466:	11 24       	eor	r1, r1
    b468:	e8 0e       	add	r14, r24
    b46a:	f0 e2       	ldi	r31, 0x20	; 32
    b46c:	ff 2a       	or	r15, r31
    b46e:	0e c0       	rjmp	.+28     	; 0xb48c <vfprintf+0x10a>
    b470:	9e 32       	cpi	r25, 0x2E	; 46
    b472:	29 f4       	brne	.+10     	; 0xb47e <vfprintf+0xfc>
    b474:	f6 fc       	sbrc	r15, 6
    b476:	6b c1       	rjmp	.+726    	; 0xb74e <vfprintf+0x3cc>
    b478:	40 e4       	ldi	r20, 0x40	; 64
    b47a:	f4 2a       	or	r15, r20
    b47c:	07 c0       	rjmp	.+14     	; 0xb48c <vfprintf+0x10a>
    b47e:	9c 36       	cpi	r25, 0x6C	; 108
    b480:	19 f4       	brne	.+6      	; 0xb488 <vfprintf+0x106>
    b482:	50 e8       	ldi	r21, 0x80	; 128
    b484:	f5 2a       	or	r15, r21
    b486:	02 c0       	rjmp	.+4      	; 0xb48c <vfprintf+0x10a>
    b488:	98 36       	cpi	r25, 0x68	; 104
    b48a:	49 f4       	brne	.+18     	; 0xb49e <vfprintf+0x11c>
    b48c:	f2 01       	movw	r30, r4
    b48e:	23 fd       	sbrc	r18, 3
    b490:	95 91       	lpm	r25, Z+
    b492:	23 ff       	sbrs	r18, 3
    b494:	91 91       	ld	r25, Z+
    b496:	2f 01       	movw	r4, r30
    b498:	99 23       	and	r25, r25
    b49a:	09 f0       	breq	.+2      	; 0xb49e <vfprintf+0x11c>
    b49c:	b8 cf       	rjmp	.-144    	; 0xb40e <vfprintf+0x8c>
    b49e:	89 2f       	mov	r24, r25
    b4a0:	85 54       	subi	r24, 0x45	; 69
    b4a2:	83 30       	cpi	r24, 0x03	; 3
    b4a4:	18 f0       	brcs	.+6      	; 0xb4ac <vfprintf+0x12a>
    b4a6:	80 52       	subi	r24, 0x20	; 32
    b4a8:	83 30       	cpi	r24, 0x03	; 3
    b4aa:	38 f4       	brcc	.+14     	; 0xb4ba <vfprintf+0x138>
    b4ac:	44 e0       	ldi	r20, 0x04	; 4
    b4ae:	50 e0       	ldi	r21, 0x00	; 0
    b4b0:	a4 0e       	add	r10, r20
    b4b2:	b5 1e       	adc	r11, r21
    b4b4:	5f e3       	ldi	r21, 0x3F	; 63
    b4b6:	59 83       	std	Y+1, r21	; 0x01
    b4b8:	0f c0       	rjmp	.+30     	; 0xb4d8 <vfprintf+0x156>
    b4ba:	93 36       	cpi	r25, 0x63	; 99
    b4bc:	31 f0       	breq	.+12     	; 0xb4ca <vfprintf+0x148>
    b4be:	93 37       	cpi	r25, 0x73	; 115
    b4c0:	79 f0       	breq	.+30     	; 0xb4e0 <vfprintf+0x15e>
    b4c2:	93 35       	cpi	r25, 0x53	; 83
    b4c4:	09 f0       	breq	.+2      	; 0xb4c8 <vfprintf+0x146>
    b4c6:	56 c0       	rjmp	.+172    	; 0xb574 <vfprintf+0x1f2>
    b4c8:	20 c0       	rjmp	.+64     	; 0xb50a <vfprintf+0x188>
    b4ca:	f5 01       	movw	r30, r10
    b4cc:	80 81       	ld	r24, Z
    b4ce:	89 83       	std	Y+1, r24	; 0x01
    b4d0:	42 e0       	ldi	r20, 0x02	; 2
    b4d2:	50 e0       	ldi	r21, 0x00	; 0
    b4d4:	a4 0e       	add	r10, r20
    b4d6:	b5 1e       	adc	r11, r21
    b4d8:	61 01       	movw	r12, r2
    b4da:	01 e0       	ldi	r16, 0x01	; 1
    b4dc:	10 e0       	ldi	r17, 0x00	; 0
    b4de:	12 c0       	rjmp	.+36     	; 0xb504 <vfprintf+0x182>
    b4e0:	f5 01       	movw	r30, r10
    b4e2:	c0 80       	ld	r12, Z
    b4e4:	d1 80       	ldd	r13, Z+1	; 0x01
    b4e6:	f6 fc       	sbrc	r15, 6
    b4e8:	03 c0       	rjmp	.+6      	; 0xb4f0 <vfprintf+0x16e>
    b4ea:	6f ef       	ldi	r22, 0xFF	; 255
    b4ec:	7f ef       	ldi	r23, 0xFF	; 255
    b4ee:	02 c0       	rjmp	.+4      	; 0xb4f4 <vfprintf+0x172>
    b4f0:	69 2d       	mov	r22, r9
    b4f2:	70 e0       	ldi	r23, 0x00	; 0
    b4f4:	42 e0       	ldi	r20, 0x02	; 2
    b4f6:	50 e0       	ldi	r21, 0x00	; 0
    b4f8:	a4 0e       	add	r10, r20
    b4fa:	b5 1e       	adc	r11, r21
    b4fc:	c6 01       	movw	r24, r12
    b4fe:	0e 94 d5 5b 	call	0xb7aa	; 0xb7aa <strnlen>
    b502:	8c 01       	movw	r16, r24
    b504:	5f e7       	ldi	r21, 0x7F	; 127
    b506:	f5 22       	and	r15, r21
    b508:	14 c0       	rjmp	.+40     	; 0xb532 <vfprintf+0x1b0>
    b50a:	f5 01       	movw	r30, r10
    b50c:	c0 80       	ld	r12, Z
    b50e:	d1 80       	ldd	r13, Z+1	; 0x01
    b510:	f6 fc       	sbrc	r15, 6
    b512:	03 c0       	rjmp	.+6      	; 0xb51a <vfprintf+0x198>
    b514:	6f ef       	ldi	r22, 0xFF	; 255
    b516:	7f ef       	ldi	r23, 0xFF	; 255
    b518:	02 c0       	rjmp	.+4      	; 0xb51e <vfprintf+0x19c>
    b51a:	69 2d       	mov	r22, r9
    b51c:	70 e0       	ldi	r23, 0x00	; 0
    b51e:	42 e0       	ldi	r20, 0x02	; 2
    b520:	50 e0       	ldi	r21, 0x00	; 0
    b522:	a4 0e       	add	r10, r20
    b524:	b5 1e       	adc	r11, r21
    b526:	c6 01       	movw	r24, r12
    b528:	0e 94 c1 5b 	call	0xb782	; 0xb782 <strnlen_P>
    b52c:	8c 01       	movw	r16, r24
    b52e:	50 e8       	ldi	r21, 0x80	; 128
    b530:	f5 2a       	or	r15, r21
    b532:	f3 fe       	sbrs	r15, 3
    b534:	07 c0       	rjmp	.+14     	; 0xb544 <vfprintf+0x1c2>
    b536:	1a c0       	rjmp	.+52     	; 0xb56c <vfprintf+0x1ea>
    b538:	80 e2       	ldi	r24, 0x20	; 32
    b53a:	90 e0       	ldi	r25, 0x00	; 0
    b53c:	b3 01       	movw	r22, r6
    b53e:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b542:	ea 94       	dec	r14
    b544:	8e 2d       	mov	r24, r14
    b546:	90 e0       	ldi	r25, 0x00	; 0
    b548:	08 17       	cp	r16, r24
    b54a:	19 07       	cpc	r17, r25
    b54c:	a8 f3       	brcs	.-22     	; 0xb538 <vfprintf+0x1b6>
    b54e:	0e c0       	rjmp	.+28     	; 0xb56c <vfprintf+0x1ea>
    b550:	f6 01       	movw	r30, r12
    b552:	f7 fc       	sbrc	r15, 7
    b554:	85 91       	lpm	r24, Z+
    b556:	f7 fe       	sbrs	r15, 7
    b558:	81 91       	ld	r24, Z+
    b55a:	6f 01       	movw	r12, r30
    b55c:	90 e0       	ldi	r25, 0x00	; 0
    b55e:	b3 01       	movw	r22, r6
    b560:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b564:	e1 10       	cpse	r14, r1
    b566:	ea 94       	dec	r14
    b568:	01 50       	subi	r16, 0x01	; 1
    b56a:	10 40       	sbci	r17, 0x00	; 0
    b56c:	01 15       	cp	r16, r1
    b56e:	11 05       	cpc	r17, r1
    b570:	79 f7       	brne	.-34     	; 0xb550 <vfprintf+0x1ce>
    b572:	ea c0       	rjmp	.+468    	; 0xb748 <vfprintf+0x3c6>
    b574:	94 36       	cpi	r25, 0x64	; 100
    b576:	11 f0       	breq	.+4      	; 0xb57c <vfprintf+0x1fa>
    b578:	99 36       	cpi	r25, 0x69	; 105
    b57a:	69 f5       	brne	.+90     	; 0xb5d6 <vfprintf+0x254>
    b57c:	f7 fe       	sbrs	r15, 7
    b57e:	08 c0       	rjmp	.+16     	; 0xb590 <vfprintf+0x20e>
    b580:	f5 01       	movw	r30, r10
    b582:	20 81       	ld	r18, Z
    b584:	31 81       	ldd	r19, Z+1	; 0x01
    b586:	42 81       	ldd	r20, Z+2	; 0x02
    b588:	53 81       	ldd	r21, Z+3	; 0x03
    b58a:	84 e0       	ldi	r24, 0x04	; 4
    b58c:	90 e0       	ldi	r25, 0x00	; 0
    b58e:	0a c0       	rjmp	.+20     	; 0xb5a4 <vfprintf+0x222>
    b590:	f5 01       	movw	r30, r10
    b592:	80 81       	ld	r24, Z
    b594:	91 81       	ldd	r25, Z+1	; 0x01
    b596:	9c 01       	movw	r18, r24
    b598:	44 27       	eor	r20, r20
    b59a:	37 fd       	sbrc	r19, 7
    b59c:	40 95       	com	r20
    b59e:	54 2f       	mov	r21, r20
    b5a0:	82 e0       	ldi	r24, 0x02	; 2
    b5a2:	90 e0       	ldi	r25, 0x00	; 0
    b5a4:	a8 0e       	add	r10, r24
    b5a6:	b9 1e       	adc	r11, r25
    b5a8:	9f e6       	ldi	r25, 0x6F	; 111
    b5aa:	f9 22       	and	r15, r25
    b5ac:	57 ff       	sbrs	r21, 7
    b5ae:	09 c0       	rjmp	.+18     	; 0xb5c2 <vfprintf+0x240>
    b5b0:	50 95       	com	r21
    b5b2:	40 95       	com	r20
    b5b4:	30 95       	com	r19
    b5b6:	21 95       	neg	r18
    b5b8:	3f 4f       	sbci	r19, 0xFF	; 255
    b5ba:	4f 4f       	sbci	r20, 0xFF	; 255
    b5bc:	5f 4f       	sbci	r21, 0xFF	; 255
    b5be:	e0 e8       	ldi	r30, 0x80	; 128
    b5c0:	fe 2a       	or	r15, r30
    b5c2:	ca 01       	movw	r24, r20
    b5c4:	b9 01       	movw	r22, r18
    b5c6:	a1 01       	movw	r20, r2
    b5c8:	2a e0       	ldi	r18, 0x0A	; 10
    b5ca:	30 e0       	ldi	r19, 0x00	; 0
    b5cc:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__ultoa_invert>
    b5d0:	d8 2e       	mov	r13, r24
    b5d2:	d2 18       	sub	r13, r2
    b5d4:	40 c0       	rjmp	.+128    	; 0xb656 <vfprintf+0x2d4>
    b5d6:	95 37       	cpi	r25, 0x75	; 117
    b5d8:	29 f4       	brne	.+10     	; 0xb5e4 <vfprintf+0x262>
    b5da:	1f 2d       	mov	r17, r15
    b5dc:	1f 7e       	andi	r17, 0xEF	; 239
    b5de:	2a e0       	ldi	r18, 0x0A	; 10
    b5e0:	30 e0       	ldi	r19, 0x00	; 0
    b5e2:	1d c0       	rjmp	.+58     	; 0xb61e <vfprintf+0x29c>
    b5e4:	1f 2d       	mov	r17, r15
    b5e6:	19 7f       	andi	r17, 0xF9	; 249
    b5e8:	9f 36       	cpi	r25, 0x6F	; 111
    b5ea:	61 f0       	breq	.+24     	; 0xb604 <vfprintf+0x282>
    b5ec:	90 37       	cpi	r25, 0x70	; 112
    b5ee:	20 f4       	brcc	.+8      	; 0xb5f8 <vfprintf+0x276>
    b5f0:	98 35       	cpi	r25, 0x58	; 88
    b5f2:	09 f0       	breq	.+2      	; 0xb5f6 <vfprintf+0x274>
    b5f4:	ac c0       	rjmp	.+344    	; 0xb74e <vfprintf+0x3cc>
    b5f6:	0f c0       	rjmp	.+30     	; 0xb616 <vfprintf+0x294>
    b5f8:	90 37       	cpi	r25, 0x70	; 112
    b5fa:	39 f0       	breq	.+14     	; 0xb60a <vfprintf+0x288>
    b5fc:	98 37       	cpi	r25, 0x78	; 120
    b5fe:	09 f0       	breq	.+2      	; 0xb602 <vfprintf+0x280>
    b600:	a6 c0       	rjmp	.+332    	; 0xb74e <vfprintf+0x3cc>
    b602:	04 c0       	rjmp	.+8      	; 0xb60c <vfprintf+0x28a>
    b604:	28 e0       	ldi	r18, 0x08	; 8
    b606:	30 e0       	ldi	r19, 0x00	; 0
    b608:	0a c0       	rjmp	.+20     	; 0xb61e <vfprintf+0x29c>
    b60a:	10 61       	ori	r17, 0x10	; 16
    b60c:	14 fd       	sbrc	r17, 4
    b60e:	14 60       	ori	r17, 0x04	; 4
    b610:	20 e1       	ldi	r18, 0x10	; 16
    b612:	30 e0       	ldi	r19, 0x00	; 0
    b614:	04 c0       	rjmp	.+8      	; 0xb61e <vfprintf+0x29c>
    b616:	14 fd       	sbrc	r17, 4
    b618:	16 60       	ori	r17, 0x06	; 6
    b61a:	20 e1       	ldi	r18, 0x10	; 16
    b61c:	32 e0       	ldi	r19, 0x02	; 2
    b61e:	17 ff       	sbrs	r17, 7
    b620:	08 c0       	rjmp	.+16     	; 0xb632 <vfprintf+0x2b0>
    b622:	f5 01       	movw	r30, r10
    b624:	60 81       	ld	r22, Z
    b626:	71 81       	ldd	r23, Z+1	; 0x01
    b628:	82 81       	ldd	r24, Z+2	; 0x02
    b62a:	93 81       	ldd	r25, Z+3	; 0x03
    b62c:	44 e0       	ldi	r20, 0x04	; 4
    b62e:	50 e0       	ldi	r21, 0x00	; 0
    b630:	08 c0       	rjmp	.+16     	; 0xb642 <vfprintf+0x2c0>
    b632:	f5 01       	movw	r30, r10
    b634:	80 81       	ld	r24, Z
    b636:	91 81       	ldd	r25, Z+1	; 0x01
    b638:	bc 01       	movw	r22, r24
    b63a:	80 e0       	ldi	r24, 0x00	; 0
    b63c:	90 e0       	ldi	r25, 0x00	; 0
    b63e:	42 e0       	ldi	r20, 0x02	; 2
    b640:	50 e0       	ldi	r21, 0x00	; 0
    b642:	a4 0e       	add	r10, r20
    b644:	b5 1e       	adc	r11, r21
    b646:	a1 01       	movw	r20, r2
    b648:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__ultoa_invert>
    b64c:	d8 2e       	mov	r13, r24
    b64e:	d2 18       	sub	r13, r2
    b650:	8f e7       	ldi	r24, 0x7F	; 127
    b652:	f8 2e       	mov	r15, r24
    b654:	f1 22       	and	r15, r17
    b656:	f6 fe       	sbrs	r15, 6
    b658:	0b c0       	rjmp	.+22     	; 0xb670 <vfprintf+0x2ee>
    b65a:	5e ef       	ldi	r21, 0xFE	; 254
    b65c:	f5 22       	and	r15, r21
    b65e:	d9 14       	cp	r13, r9
    b660:	38 f4       	brcc	.+14     	; 0xb670 <vfprintf+0x2ee>
    b662:	f4 fe       	sbrs	r15, 4
    b664:	07 c0       	rjmp	.+14     	; 0xb674 <vfprintf+0x2f2>
    b666:	f2 fc       	sbrc	r15, 2
    b668:	05 c0       	rjmp	.+10     	; 0xb674 <vfprintf+0x2f2>
    b66a:	8f ee       	ldi	r24, 0xEF	; 239
    b66c:	f8 22       	and	r15, r24
    b66e:	02 c0       	rjmp	.+4      	; 0xb674 <vfprintf+0x2f2>
    b670:	1d 2d       	mov	r17, r13
    b672:	01 c0       	rjmp	.+2      	; 0xb676 <vfprintf+0x2f4>
    b674:	19 2d       	mov	r17, r9
    b676:	f4 fe       	sbrs	r15, 4
    b678:	0d c0       	rjmp	.+26     	; 0xb694 <vfprintf+0x312>
    b67a:	fe 01       	movw	r30, r28
    b67c:	ed 0d       	add	r30, r13
    b67e:	f1 1d       	adc	r31, r1
    b680:	80 81       	ld	r24, Z
    b682:	80 33       	cpi	r24, 0x30	; 48
    b684:	19 f4       	brne	.+6      	; 0xb68c <vfprintf+0x30a>
    b686:	99 ee       	ldi	r25, 0xE9	; 233
    b688:	f9 22       	and	r15, r25
    b68a:	08 c0       	rjmp	.+16     	; 0xb69c <vfprintf+0x31a>
    b68c:	1f 5f       	subi	r17, 0xFF	; 255
    b68e:	f2 fe       	sbrs	r15, 2
    b690:	05 c0       	rjmp	.+10     	; 0xb69c <vfprintf+0x31a>
    b692:	03 c0       	rjmp	.+6      	; 0xb69a <vfprintf+0x318>
    b694:	8f 2d       	mov	r24, r15
    b696:	86 78       	andi	r24, 0x86	; 134
    b698:	09 f0       	breq	.+2      	; 0xb69c <vfprintf+0x31a>
    b69a:	1f 5f       	subi	r17, 0xFF	; 255
    b69c:	0f 2d       	mov	r16, r15
    b69e:	f3 fc       	sbrc	r15, 3
    b6a0:	14 c0       	rjmp	.+40     	; 0xb6ca <vfprintf+0x348>
    b6a2:	f0 fe       	sbrs	r15, 0
    b6a4:	0f c0       	rjmp	.+30     	; 0xb6c4 <vfprintf+0x342>
    b6a6:	1e 15       	cp	r17, r14
    b6a8:	10 f0       	brcs	.+4      	; 0xb6ae <vfprintf+0x32c>
    b6aa:	9d 2c       	mov	r9, r13
    b6ac:	0b c0       	rjmp	.+22     	; 0xb6c4 <vfprintf+0x342>
    b6ae:	9d 2c       	mov	r9, r13
    b6b0:	9e 0c       	add	r9, r14
    b6b2:	91 1a       	sub	r9, r17
    b6b4:	1e 2d       	mov	r17, r14
    b6b6:	06 c0       	rjmp	.+12     	; 0xb6c4 <vfprintf+0x342>
    b6b8:	80 e2       	ldi	r24, 0x20	; 32
    b6ba:	90 e0       	ldi	r25, 0x00	; 0
    b6bc:	b3 01       	movw	r22, r6
    b6be:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b6c2:	1f 5f       	subi	r17, 0xFF	; 255
    b6c4:	1e 15       	cp	r17, r14
    b6c6:	c0 f3       	brcs	.-16     	; 0xb6b8 <vfprintf+0x336>
    b6c8:	04 c0       	rjmp	.+8      	; 0xb6d2 <vfprintf+0x350>
    b6ca:	1e 15       	cp	r17, r14
    b6cc:	10 f4       	brcc	.+4      	; 0xb6d2 <vfprintf+0x350>
    b6ce:	e1 1a       	sub	r14, r17
    b6d0:	01 c0       	rjmp	.+2      	; 0xb6d4 <vfprintf+0x352>
    b6d2:	ee 24       	eor	r14, r14
    b6d4:	04 ff       	sbrs	r16, 4
    b6d6:	0f c0       	rjmp	.+30     	; 0xb6f6 <vfprintf+0x374>
    b6d8:	80 e3       	ldi	r24, 0x30	; 48
    b6da:	90 e0       	ldi	r25, 0x00	; 0
    b6dc:	b3 01       	movw	r22, r6
    b6de:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b6e2:	02 ff       	sbrs	r16, 2
    b6e4:	1d c0       	rjmp	.+58     	; 0xb720 <vfprintf+0x39e>
    b6e6:	01 fd       	sbrc	r16, 1
    b6e8:	03 c0       	rjmp	.+6      	; 0xb6f0 <vfprintf+0x36e>
    b6ea:	88 e7       	ldi	r24, 0x78	; 120
    b6ec:	90 e0       	ldi	r25, 0x00	; 0
    b6ee:	0e c0       	rjmp	.+28     	; 0xb70c <vfprintf+0x38a>
    b6f0:	88 e5       	ldi	r24, 0x58	; 88
    b6f2:	90 e0       	ldi	r25, 0x00	; 0
    b6f4:	0b c0       	rjmp	.+22     	; 0xb70c <vfprintf+0x38a>
    b6f6:	80 2f       	mov	r24, r16
    b6f8:	86 78       	andi	r24, 0x86	; 134
    b6fa:	91 f0       	breq	.+36     	; 0xb720 <vfprintf+0x39e>
    b6fc:	01 ff       	sbrs	r16, 1
    b6fe:	02 c0       	rjmp	.+4      	; 0xb704 <vfprintf+0x382>
    b700:	8b e2       	ldi	r24, 0x2B	; 43
    b702:	01 c0       	rjmp	.+2      	; 0xb706 <vfprintf+0x384>
    b704:	80 e2       	ldi	r24, 0x20	; 32
    b706:	f7 fc       	sbrc	r15, 7
    b708:	8d e2       	ldi	r24, 0x2D	; 45
    b70a:	90 e0       	ldi	r25, 0x00	; 0
    b70c:	b3 01       	movw	r22, r6
    b70e:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b712:	06 c0       	rjmp	.+12     	; 0xb720 <vfprintf+0x39e>
    b714:	80 e3       	ldi	r24, 0x30	; 48
    b716:	90 e0       	ldi	r25, 0x00	; 0
    b718:	b3 01       	movw	r22, r6
    b71a:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b71e:	9a 94       	dec	r9
    b720:	d9 14       	cp	r13, r9
    b722:	c0 f3       	brcs	.-16     	; 0xb714 <vfprintf+0x392>
    b724:	da 94       	dec	r13
    b726:	f1 01       	movw	r30, r2
    b728:	ed 0d       	add	r30, r13
    b72a:	f1 1d       	adc	r31, r1
    b72c:	80 81       	ld	r24, Z
    b72e:	90 e0       	ldi	r25, 0x00	; 0
    b730:	b3 01       	movw	r22, r6
    b732:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b736:	dd 20       	and	r13, r13
    b738:	a9 f7       	brne	.-22     	; 0xb724 <vfprintf+0x3a2>
    b73a:	06 c0       	rjmp	.+12     	; 0xb748 <vfprintf+0x3c6>
    b73c:	80 e2       	ldi	r24, 0x20	; 32
    b73e:	90 e0       	ldi	r25, 0x00	; 0
    b740:	b3 01       	movw	r22, r6
    b742:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <fputc>
    b746:	ea 94       	dec	r14
    b748:	ee 20       	and	r14, r14
    b74a:	c1 f7       	brne	.-16     	; 0xb73c <vfprintf+0x3ba>
    b74c:	43 ce       	rjmp	.-890    	; 0xb3d4 <vfprintf+0x52>
    b74e:	f3 01       	movw	r30, r6
    b750:	66 81       	ldd	r22, Z+6	; 0x06
    b752:	77 81       	ldd	r23, Z+7	; 0x07
    b754:	cb 01       	movw	r24, r22
    b756:	2b 96       	adiw	r28, 0x0b	; 11
    b758:	cd bf       	out	0x3d, r28	; 61
    b75a:	de bf       	out	0x3e, r29	; 62
    b75c:	cf 91       	pop	r28
    b75e:	df 91       	pop	r29
    b760:	1f 91       	pop	r17
    b762:	0f 91       	pop	r16
    b764:	ff 90       	pop	r15
    b766:	ef 90       	pop	r14
    b768:	df 90       	pop	r13
    b76a:	cf 90       	pop	r12
    b76c:	bf 90       	pop	r11
    b76e:	af 90       	pop	r10
    b770:	9f 90       	pop	r9
    b772:	8f 90       	pop	r8
    b774:	7f 90       	pop	r7
    b776:	6f 90       	pop	r6
    b778:	5f 90       	pop	r5
    b77a:	4f 90       	pop	r4
    b77c:	3f 90       	pop	r3
    b77e:	2f 90       	pop	r2
    b780:	08 95       	ret

0000b782 <strnlen_P>:
    b782:	fc 01       	movw	r30, r24
    b784:	05 90       	lpm	r0, Z+
    b786:	61 50       	subi	r22, 0x01	; 1
    b788:	70 40       	sbci	r23, 0x00	; 0
    b78a:	01 10       	cpse	r0, r1
    b78c:	d8 f7       	brcc	.-10     	; 0xb784 <strnlen_P+0x2>
    b78e:	80 95       	com	r24
    b790:	90 95       	com	r25
    b792:	8e 0f       	add	r24, r30
    b794:	9f 1f       	adc	r25, r31
    b796:	08 95       	ret

0000b798 <memcpy>:
    b798:	fb 01       	movw	r30, r22
    b79a:	dc 01       	movw	r26, r24
    b79c:	02 c0       	rjmp	.+4      	; 0xb7a2 <memcpy+0xa>
    b79e:	01 90       	ld	r0, Z+
    b7a0:	0d 92       	st	X+, r0
    b7a2:	41 50       	subi	r20, 0x01	; 1
    b7a4:	50 40       	sbci	r21, 0x00	; 0
    b7a6:	d8 f7       	brcc	.-10     	; 0xb79e <memcpy+0x6>
    b7a8:	08 95       	ret

0000b7aa <strnlen>:
    b7aa:	fc 01       	movw	r30, r24
    b7ac:	61 50       	subi	r22, 0x01	; 1
    b7ae:	70 40       	sbci	r23, 0x00	; 0
    b7b0:	01 90       	ld	r0, Z+
    b7b2:	01 10       	cpse	r0, r1
    b7b4:	d8 f7       	brcc	.-10     	; 0xb7ac <strnlen+0x2>
    b7b6:	80 95       	com	r24
    b7b8:	90 95       	com	r25
    b7ba:	8e 0f       	add	r24, r30
    b7bc:	9f 1f       	adc	r25, r31
    b7be:	08 95       	ret

0000b7c0 <strrev>:
    b7c0:	dc 01       	movw	r26, r24
    b7c2:	fc 01       	movw	r30, r24
    b7c4:	67 2f       	mov	r22, r23
    b7c6:	71 91       	ld	r23, Z+
    b7c8:	77 23       	and	r23, r23
    b7ca:	e1 f7       	brne	.-8      	; 0xb7c4 <strrev+0x4>
    b7cc:	32 97       	sbiw	r30, 0x02	; 2
    b7ce:	04 c0       	rjmp	.+8      	; 0xb7d8 <strrev+0x18>
    b7d0:	7c 91       	ld	r23, X
    b7d2:	6d 93       	st	X+, r22
    b7d4:	70 83       	st	Z, r23
    b7d6:	62 91       	ld	r22, -Z
    b7d8:	ae 17       	cp	r26, r30
    b7da:	bf 07       	cpc	r27, r31
    b7dc:	c8 f3       	brcs	.-14     	; 0xb7d0 <strrev+0x10>
    b7de:	08 95       	ret

0000b7e0 <fputc>:
    b7e0:	0f 93       	push	r16
    b7e2:	1f 93       	push	r17
    b7e4:	cf 93       	push	r28
    b7e6:	df 93       	push	r29
    b7e8:	8c 01       	movw	r16, r24
    b7ea:	eb 01       	movw	r28, r22
    b7ec:	8b 81       	ldd	r24, Y+3	; 0x03
    b7ee:	81 ff       	sbrs	r24, 1
    b7f0:	1b c0       	rjmp	.+54     	; 0xb828 <fputc+0x48>
    b7f2:	82 ff       	sbrs	r24, 2
    b7f4:	0d c0       	rjmp	.+26     	; 0xb810 <fputc+0x30>
    b7f6:	2e 81       	ldd	r18, Y+6	; 0x06
    b7f8:	3f 81       	ldd	r19, Y+7	; 0x07
    b7fa:	8c 81       	ldd	r24, Y+4	; 0x04
    b7fc:	9d 81       	ldd	r25, Y+5	; 0x05
    b7fe:	28 17       	cp	r18, r24
    b800:	39 07       	cpc	r19, r25
    b802:	64 f4       	brge	.+24     	; 0xb81c <fputc+0x3c>
    b804:	e8 81       	ld	r30, Y
    b806:	f9 81       	ldd	r31, Y+1	; 0x01
    b808:	01 93       	st	Z+, r16
    b80a:	e8 83       	st	Y, r30
    b80c:	f9 83       	std	Y+1, r31	; 0x01
    b80e:	06 c0       	rjmp	.+12     	; 0xb81c <fputc+0x3c>
    b810:	e8 85       	ldd	r30, Y+8	; 0x08
    b812:	f9 85       	ldd	r31, Y+9	; 0x09
    b814:	80 2f       	mov	r24, r16
    b816:	19 95       	eicall
    b818:	89 2b       	or	r24, r25
    b81a:	31 f4       	brne	.+12     	; 0xb828 <fputc+0x48>
    b81c:	8e 81       	ldd	r24, Y+6	; 0x06
    b81e:	9f 81       	ldd	r25, Y+7	; 0x07
    b820:	01 96       	adiw	r24, 0x01	; 1
    b822:	8e 83       	std	Y+6, r24	; 0x06
    b824:	9f 83       	std	Y+7, r25	; 0x07
    b826:	02 c0       	rjmp	.+4      	; 0xb82c <fputc+0x4c>
    b828:	0f ef       	ldi	r16, 0xFF	; 255
    b82a:	1f ef       	ldi	r17, 0xFF	; 255
    b82c:	c8 01       	movw	r24, r16
    b82e:	df 91       	pop	r29
    b830:	cf 91       	pop	r28
    b832:	1f 91       	pop	r17
    b834:	0f 91       	pop	r16
    b836:	08 95       	ret

0000b838 <__ultoa_invert>:
    b838:	fa 01       	movw	r30, r20
    b83a:	aa 27       	eor	r26, r26
    b83c:	28 30       	cpi	r18, 0x08	; 8
    b83e:	51 f1       	breq	.+84     	; 0xb894 <__ultoa_invert+0x5c>
    b840:	20 31       	cpi	r18, 0x10	; 16
    b842:	81 f1       	breq	.+96     	; 0xb8a4 <__ultoa_invert+0x6c>
    b844:	e8 94       	clt
    b846:	6f 93       	push	r22
    b848:	6e 7f       	andi	r22, 0xFE	; 254
    b84a:	6e 5f       	subi	r22, 0xFE	; 254
    b84c:	7f 4f       	sbci	r23, 0xFF	; 255
    b84e:	8f 4f       	sbci	r24, 0xFF	; 255
    b850:	9f 4f       	sbci	r25, 0xFF	; 255
    b852:	af 4f       	sbci	r26, 0xFF	; 255
    b854:	b1 e0       	ldi	r27, 0x01	; 1
    b856:	3e d0       	rcall	.+124    	; 0xb8d4 <__ultoa_invert+0x9c>
    b858:	b4 e0       	ldi	r27, 0x04	; 4
    b85a:	3c d0       	rcall	.+120    	; 0xb8d4 <__ultoa_invert+0x9c>
    b85c:	67 0f       	add	r22, r23
    b85e:	78 1f       	adc	r23, r24
    b860:	89 1f       	adc	r24, r25
    b862:	9a 1f       	adc	r25, r26
    b864:	a1 1d       	adc	r26, r1
    b866:	68 0f       	add	r22, r24
    b868:	79 1f       	adc	r23, r25
    b86a:	8a 1f       	adc	r24, r26
    b86c:	91 1d       	adc	r25, r1
    b86e:	a1 1d       	adc	r26, r1
    b870:	6a 0f       	add	r22, r26
    b872:	71 1d       	adc	r23, r1
    b874:	81 1d       	adc	r24, r1
    b876:	91 1d       	adc	r25, r1
    b878:	a1 1d       	adc	r26, r1
    b87a:	20 d0       	rcall	.+64     	; 0xb8bc <__ultoa_invert+0x84>
    b87c:	09 f4       	brne	.+2      	; 0xb880 <__ultoa_invert+0x48>
    b87e:	68 94       	set
    b880:	3f 91       	pop	r19
    b882:	2a e0       	ldi	r18, 0x0A	; 10
    b884:	26 9f       	mul	r18, r22
    b886:	11 24       	eor	r1, r1
    b888:	30 19       	sub	r19, r0
    b88a:	30 5d       	subi	r19, 0xD0	; 208
    b88c:	31 93       	st	Z+, r19
    b88e:	de f6       	brtc	.-74     	; 0xb846 <__ultoa_invert+0xe>
    b890:	cf 01       	movw	r24, r30
    b892:	08 95       	ret
    b894:	46 2f       	mov	r20, r22
    b896:	47 70       	andi	r20, 0x07	; 7
    b898:	40 5d       	subi	r20, 0xD0	; 208
    b89a:	41 93       	st	Z+, r20
    b89c:	b3 e0       	ldi	r27, 0x03	; 3
    b89e:	0f d0       	rcall	.+30     	; 0xb8be <__ultoa_invert+0x86>
    b8a0:	c9 f7       	brne	.-14     	; 0xb894 <__ultoa_invert+0x5c>
    b8a2:	f6 cf       	rjmp	.-20     	; 0xb890 <__ultoa_invert+0x58>
    b8a4:	46 2f       	mov	r20, r22
    b8a6:	4f 70       	andi	r20, 0x0F	; 15
    b8a8:	40 5d       	subi	r20, 0xD0	; 208
    b8aa:	4a 33       	cpi	r20, 0x3A	; 58
    b8ac:	18 f0       	brcs	.+6      	; 0xb8b4 <__ultoa_invert+0x7c>
    b8ae:	49 5d       	subi	r20, 0xD9	; 217
    b8b0:	31 fd       	sbrc	r19, 1
    b8b2:	40 52       	subi	r20, 0x20	; 32
    b8b4:	41 93       	st	Z+, r20
    b8b6:	02 d0       	rcall	.+4      	; 0xb8bc <__ultoa_invert+0x84>
    b8b8:	a9 f7       	brne	.-22     	; 0xb8a4 <__ultoa_invert+0x6c>
    b8ba:	ea cf       	rjmp	.-44     	; 0xb890 <__ultoa_invert+0x58>
    b8bc:	b4 e0       	ldi	r27, 0x04	; 4
    b8be:	a6 95       	lsr	r26
    b8c0:	97 95       	ror	r25
    b8c2:	87 95       	ror	r24
    b8c4:	77 95       	ror	r23
    b8c6:	67 95       	ror	r22
    b8c8:	ba 95       	dec	r27
    b8ca:	c9 f7       	brne	.-14     	; 0xb8be <__ultoa_invert+0x86>
    b8cc:	00 97       	sbiw	r24, 0x00	; 0
    b8ce:	61 05       	cpc	r22, r1
    b8d0:	71 05       	cpc	r23, r1
    b8d2:	08 95       	ret
    b8d4:	9b 01       	movw	r18, r22
    b8d6:	ac 01       	movw	r20, r24
    b8d8:	0a 2e       	mov	r0, r26
    b8da:	06 94       	lsr	r0
    b8dc:	57 95       	ror	r21
    b8de:	47 95       	ror	r20
    b8e0:	37 95       	ror	r19
    b8e2:	27 95       	ror	r18
    b8e4:	ba 95       	dec	r27
    b8e6:	c9 f7       	brne	.-14     	; 0xb8da <__ultoa_invert+0xa2>
    b8e8:	62 0f       	add	r22, r18
    b8ea:	73 1f       	adc	r23, r19
    b8ec:	84 1f       	adc	r24, r20
    b8ee:	95 1f       	adc	r25, r21
    b8f0:	a0 1d       	adc	r26, r0
    b8f2:	08 95       	ret

0000b8f4 <_exit>:
    b8f4:	f8 94       	cli

0000b8f6 <__stop_program>:
    b8f6:	ff cf       	rjmp	.-2      	; 0xb8f6 <__stop_program>
