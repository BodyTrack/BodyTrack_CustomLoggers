
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ca2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001278  00802000  0000ca2c  0000cac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002a30  00803278  00803278  0000dd38  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  0000dd38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000fc64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001bfc  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a8d0  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a05  00000000  00000000  0001c938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008ee8  00000000  00000000  0001d33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bc0  00000000  00000000  00026228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a50  00000000  00000000  00026de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007791  00000000  00000000  0002b838  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007e0  00000000  00000000  00032fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 22 4f 	jmp	0x9e44	; 0x9e44 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 43 45 	jmp	0x8a86	; 0x8a86 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 2e 33 	jmp	0x665c	; 0x665c <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 6e 31 	jmp	0x62dc	; 0x62dc <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	12 e3       	ldi	r17, 0x32	; 50
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ec e2       	ldi	r30, 0x2C	; 44
     200:	fa ec       	ldi	r31, 0xCA	; 202
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a8 37       	cpi	r26, 0x78	; 120
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1c e5       	ldi	r17, 0x5C	; 92
     214:	a8 e7       	ldi	r26, 0x78	; 120
     216:	b2 e3       	ldi	r27, 0x32	; 50
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 3a       	cpi	r26, 0xA8	; 168
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 39 58 	call	0xb072	; 0xb072 <main>
     226:	0c 94 14 65 	jmp	0xca28	; 0xca28 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;



void Debug_Init(uint32_t baud){
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     232:	e0 e4       	ldi	r30, 0x40	; 64
     234:	f6 e0       	ldi	r31, 0x06	; 6
     236:	88 e0       	ldi	r24, 0x08	; 8
     238:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     23e:	e0 e6       	ldi	r30, 0x60	; 96
     240:	f6 e0       	ldi	r31, 0x06	; 6
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.Debug_RTS_CNTL = PORT_OPC_PULLUP_gc;
     246:	88 e1       	ldi	r24, 0x18	; 24
     248:	80 8b       	std	Z+16, r24	; 0x10


	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     24a:	e0 ea       	ldi	r30, 0xA0	; 160
     24c:	f8 e0       	ldi	r31, 0x08	; 8
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     252:	20 38       	cpi	r18, 0x80	; 128
     254:	85 e2       	ldi	r24, 0x25	; 37
     256:	38 07       	cpc	r19, r24
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	48 07       	cpc	r20, r24
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	11 f4       	brne	.+4      	; 0x266 <Debug_Init+0x38>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     262:	8f e5       	ldi	r24, 0x5F	; 95
     264:	09 c0       	rjmp	.+18     	; 0x278 <Debug_Init+0x4a>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     266:	20 30       	cpi	r18, 0x00	; 0
     268:	82 ec       	ldi	r24, 0xC2	; 194
     26a:	38 07       	cpc	r19, r24
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	48 07       	cpc	r20, r24
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	58 07       	cpc	r21, r24
     274:	19 f4       	brne	.+6      	; 0x27c <Debug_Init+0x4e>
		Debug_Usart.BAUDCTRLA = 7 & 0xFF;
     276:	87 e0       	ldi	r24, 0x07	; 7
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	06 c0       	rjmp	.+12     	; 0x288 <Debug_Init+0x5a>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 460800){
     27c:	20 50       	subi	r18, 0x00	; 0
     27e:	38 40       	sbci	r19, 0x08	; 8
     280:	47 40       	sbci	r20, 0x07	; 7
     282:	50 40       	sbci	r21, 0x00	; 0
     284:	11 f4       	brne	.+4      	; 0x28a <Debug_Init+0x5c>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     286:	96 83       	std	Z+6, r25	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
     288:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     28a:	e0 ea       	ldi	r30, 0xA0	; 160
     28c:	f8 e0       	ldi	r31, 0x08	; 8
     28e:	80 91 a4 08 	lds	r24, 0x08A4
     292:	80 61       	ori	r24, 0x10	; 16
     294:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     296:	80 91 a4 08 	lds	r24, 0x08A4
     29a:	88 60       	ori	r24, 0x08	; 8
     29c:	84 83       	std	Z+4, r24	; 0x04
	
	//Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
     29e:	08 95       	ret

000002a0 <Debug_CharReadyToRead>:
	}
}


bool Debug_CharReadyToRead(void){
    Debug_writeLocation  = DMA.CH1.DESTADDR1 << 8;
     2a0:	20 91 2d 01 	lds	r18, 0x012D
     2a4:	92 2f       	mov	r25, r18
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	80 93 ac 32 	sts	0x32AC, r24
     2ac:	90 93 ad 32 	sts	0x32AD, r25
	Debug_writeLocation += DMA.CH1.DESTADDR0;
     2b0:	80 91 ac 32 	lds	r24, 0x32AC
     2b4:	90 91 ad 32 	lds	r25, 0x32AD
     2b8:	20 91 2c 01 	lds	r18, 0x012C
     2bc:	82 0f       	add	r24, r18
     2be:	91 1d       	adc	r25, r1
     2c0:	80 93 ac 32 	sts	0x32AC, r24
     2c4:	90 93 ad 32 	sts	0x32AD, r25
	Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     2c8:	80 91 ac 32 	lds	r24, 0x32AC
     2cc:	90 91 ad 32 	lds	r25, 0x32AD
     2d0:	8e 52       	subi	r24, 0x2E	; 46
     2d2:	9b 44       	sbci	r25, 0x4B	; 75
     2d4:	80 93 ac 32 	sts	0x32AC, r24
     2d8:	90 93 ad 32 	sts	0x32AD, r25



	if(Debug_writeLocation == Debug_readLocation){
     2dc:	20 91 ac 32 	lds	r18, 0x32AC
     2e0:	30 91 ad 32 	lds	r19, 0x32AD
     2e4:	80 91 aa 32 	lds	r24, 0x32AA
     2e8:	90 91 ab 32 	lds	r25, 0x32AB
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	28 17       	cp	r18, r24
     2f0:	39 07       	cpc	r19, r25
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <Debug_CharReadyToRead+0x56>
     2f4:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     2f6:	84 2f       	mov	r24, r20
     2f8:	08 95       	ret

000002fa <Debug_ClearBuffer>:
	
	//Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
}
void Debug_ClearBuffer(void){
	//Debug_writeLocation = Debug_readLocation;
	if(Debug_CharReadyToRead()){
     2fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
     2fe:	88 23       	and	r24, r24
     300:	31 f1       	breq	.+76     	; 0x34e <Debug_ClearBuffer+0x54>
		Debug_writeLocation  = DMA.CH1.DESTADDR1 << 8;
     302:	20 91 2d 01 	lds	r18, 0x012D
     306:	92 2f       	mov	r25, r18
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 93 ac 32 	sts	0x32AC, r24
     30e:	90 93 ad 32 	sts	0x32AD, r25
		Debug_writeLocation += DMA.CH1.DESTADDR0;
     312:	80 91 ac 32 	lds	r24, 0x32AC
     316:	90 91 ad 32 	lds	r25, 0x32AD
     31a:	20 91 2c 01 	lds	r18, 0x012C
     31e:	82 0f       	add	r24, r18
     320:	91 1d       	adc	r25, r1
     322:	80 93 ac 32 	sts	0x32AC, r24
     326:	90 93 ad 32 	sts	0x32AD, r25
		Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     32a:	80 91 ac 32 	lds	r24, 0x32AC
     32e:	90 91 ad 32 	lds	r25, 0x32AD
     332:	8e 52       	subi	r24, 0x2E	; 46
     334:	9b 44       	sbci	r25, 0x4B	; 75
     336:	80 93 ac 32 	sts	0x32AC, r24
     33a:	90 93 ad 32 	sts	0x32AD, r25
		Debug_readLocation = Debug_writeLocation;
     33e:	80 91 ac 32 	lds	r24, 0x32AC
     342:	90 91 ad 32 	lds	r25, 0x32AD
     346:	80 93 aa 32 	sts	0x32AA, r24
     34a:	90 93 ab 32 	sts	0x32AB, r25
     34e:	08 95       	ret

00000350 <Debug_GetByte>:
		return true;
	}
}

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     350:	88 23       	and	r24, r24
     352:	21 f0       	breq	.+8      	; 0x35c <Debug_GetByte+0xc>
		while(!Debug_CharReadyToRead());
     354:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
     358:	88 23       	and	r24, r24
     35a:	e1 f3       	breq	.-8      	; 0x354 <Debug_GetByte+0x4>
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     35c:	e0 91 aa 32 	lds	r30, 0x32AA
     360:	f0 91 ab 32 	lds	r31, 0x32AB
     364:	e2 5d       	subi	r30, 0xD2	; 210
     366:	f4 4b       	sbci	r31, 0xB4	; 180
     368:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     36a:	80 91 aa 32 	lds	r24, 0x32AA
     36e:	90 91 ab 32 	lds	r25, 0x32AB
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	80 93 aa 32 	sts	0x32AA, r24
     378:	90 93 ab 32 	sts	0x32AB, r25
	if(Debug_readLocation >= Debug_BufferSize){
     37c:	80 91 aa 32 	lds	r24, 0x32AA
     380:	90 91 ab 32 	lds	r25, 0x32AB
     384:	80 50       	subi	r24, 0x00	; 0
     386:	94 40       	sbci	r25, 0x04	; 4
     388:	20 f0       	brcs	.+8      	; 0x392 <Debug_GetByte+0x42>
	  Debug_readLocation=0;
     38a:	10 92 aa 32 	sts	0x32AA, r1
     38e:	10 92 ab 32 	sts	0x32AB, r1
	}
	return tmp;
}
     392:	8e 2f       	mov	r24, r30
     394:	08 95       	ret

00000396 <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     396:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     398:	80 91 a1 08 	lds	r24, 0x08A1
     39c:	85 ff       	sbrs	r24, 5
     39e:	fc cf       	rjmp	.-8      	; 0x398 <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     3a0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     3a4:	90 93 a0 08 	sts	0x08A0, r25
}
     3a8:	08 95       	ret

000003aa <Debug_GetTime>:
	if(Debug_writeLocation >= Debug_BufferSize){
		Debug_writeLocation = 0;
	}
}    */

uint32_t Debug_GetTime(uint16_t timeOut){
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	18 2f       	mov	r17, r24
     3be:	09 2f       	mov	r16, r25
    uint16_t to = timeOut;
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
     3c0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Debug_ClearBuffer>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     3c4:	80 91 a1 08 	lds	r24, 0x08A1
     3c8:	85 ff       	sbrs	r24, 5
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <Debug_GetTime+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     3cc:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     3d0:	84 e5       	ldi	r24, 0x54	; 84
     3d2:	80 93 a0 08 	sts	0x08A0, r24
     3d6:	21 2f       	mov	r18, r17
     3d8:	30 2f       	mov	r19, r16
     3da:	c9 01       	movw	r24, r18
     3dc:	ec 01       	movw	r28, r24
     3de:	ee 24       	eor	r14, r14
     3e0:	ff 24       	eor	r15, r15
     3e2:	87 01       	movw	r16, r14
     3e4:	dd 24       	eor	r13, r13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3e6:	96 e6       	ldi	r25, 0x66	; 102
     3e8:	a9 2e       	mov	r10, r25
     3ea:	9e e0       	ldi	r25, 0x0E	; 14
     3ec:	b9 2e       	mov	r11, r25
     3ee:	1b c0       	rjmp	.+54     	; 0x426 <Debug_GetTime+0x7c>
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
      if(Debug_CharReadyToRead()){
     3f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
     3f4:	88 23       	and	r24, r24
     3f6:	99 f0       	breq	.+38     	; 0x41e <Debug_GetTime+0x74>
         tempTime  |= Debug_GetByte(true) & 0xFF;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
     3fe:	28 2f       	mov	r18, r24
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	2e 29       	or	r18, r14
     408:	3f 29       	or	r19, r15
     40a:	40 2b       	or	r20, r16
     40c:	51 2b       	or	r21, r17
         byteCounter++;
     40e:	d3 94       	inc	r13
         if(byteCounter == 4){
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	d8 16       	cp	r13, r24
     414:	71 f0       	breq	.+28     	; 0x432 <Debug_GetTime+0x88>
            return tempTime;
         } else {
             tempTime <<= 8;
     416:	ee 24       	eor	r14, r14
     418:	f2 2e       	mov	r15, r18
     41a:	03 2f       	mov	r16, r19
     41c:	14 2f       	mov	r17, r20
     41e:	c5 01       	movw	r24, r10
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <Debug_GetTime+0x76>
         }
      }
      _delay_ms(1);
      to--;
     424:	21 97       	sbiw	r28, 0x01	; 1
    uint32_t tempTime = 0;
    uint8_t byteCounter = 0;
    Debug_ClearBuffer();
    Debug_SendByte('T');             // returns unix time MSB first

    while(to > 0){
     426:	20 97       	sbiw	r28, 0x00	; 0
     428:	19 f7       	brne	.-58     	; 0x3f0 <Debug_GetTime+0x46>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	50 e0       	ldi	r21, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return 0;
}
     432:	b9 01       	movw	r22, r18
     434:	ca 01       	movw	r24, r20
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	08 95       	ret

0000044a <Debug_Connected>:

bool Debug_Connected(uint16_t timeOut){
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	18 2f       	mov	r17, r24
     454:	09 2f       	mov	r16, r25
    uint16_t to = timeOut;
    Debug_ClearBuffer();
     456:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Debug_ClearBuffer>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     45a:	80 91 a1 08 	lds	r24, 0x08A1
     45e:	85 ff       	sbrs	r24, 5
     460:	fc cf       	rjmp	.-8      	; 0x45a <Debug_Connected+0x10>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
     462:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
     466:	80 e5       	ldi	r24, 0x50	; 80
     468:	80 93 a0 08 	sts	0x08A0, r24
     46c:	21 2f       	mov	r18, r17
     46e:	30 2f       	mov	r19, r16
     470:	c9 01       	movw	r24, r18
     472:	ec 01       	movw	r28, r24
     474:	06 e6       	ldi	r16, 0x66	; 102
     476:	1e e0       	ldi	r17, 0x0E	; 14
     478:	0f c0       	rjmp	.+30     	; 0x498 <Debug_Connected+0x4e>
bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
      if(Debug_CharReadyToRead()){
     47a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
     47e:	88 23       	and	r24, r24
     480:	39 f0       	breq	.+14     	; 0x490 <Debug_Connected+0x46>
         if(Debug_GetByte(true) == 'P'){
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
     488:	80 35       	cpi	r24, 0x50	; 80
     48a:	11 f4       	brne	.+4      	; 0x490 <Debug_Connected+0x46>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	07 c0       	rjmp	.+14     	; 0x49e <Debug_Connected+0x54>
     490:	c8 01       	movw	r24, r16
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <Debug_Connected+0x48>
           return true;
         }
      }
      _delay_ms(1);
      to--;
     496:	21 97       	sbiw	r28, 0x01	; 1

bool Debug_Connected(uint16_t timeOut){
    uint16_t to = timeOut;
    Debug_ClearBuffer();
    Debug_SendByte('P');
    while(to > 0){
     498:	20 97       	sbiw	r28, 0x00	; 0
     49a:	79 f7       	brne	.-34     	; 0x47a <Debug_Connected+0x30>
     49c:	80 e0       	ldi	r24, 0x00	; 0
      }
      _delay_ms(1);
      to--;
    }
    return false;
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     4a8:	20 91 1d 01 	lds	r18, 0x011D
     4ac:	92 2f       	mov	r25, r18
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	80 93 b0 32 	sts	0x32B0, r24
     4b4:	90 93 b1 32 	sts	0x32B1, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     4b8:	80 91 b0 32 	lds	r24, 0x32B0
     4bc:	90 91 b1 32 	lds	r25, 0x32B1
     4c0:	20 91 1c 01 	lds	r18, 0x011C
     4c4:	82 0f       	add	r24, r18
     4c6:	91 1d       	adc	r25, r1
     4c8:	80 93 b0 32 	sts	0x32B0, r24
     4cc:	90 93 b1 32 	sts	0x32B1, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     4d0:	80 91 b0 32 	lds	r24, 0x32B0
     4d4:	90 91 b1 32 	lds	r25, 0x32B1
     4d8:	84 58       	subi	r24, 0x84	; 132
     4da:	9c 43       	sbci	r25, 0x3C	; 60
     4dc:	80 93 b0 32 	sts	0x32B0, r24
     4e0:	90 93 b1 32 	sts	0x32B1, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     4e4:	20 91 b0 32 	lds	r18, 0x32B0
     4e8:	30 91 b1 32 	lds	r19, 0x32B1
     4ec:	80 91 ae 32 	lds	r24, 0x32AE
     4f0:	90 91 af 32 	lds	r25, 0x32AF
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	09 f0       	breq	.+2      	; 0x4fe <Wifi_CharReadyToRead+0x56>
     4fc:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     4fe:	84 2f       	mov	r24, r20
     500:	08 95       	ret

00000502 <Wifi_ClearBuffer>:

	Wifi_ClearBuffer();
}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     502:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
     506:	88 23       	and	r24, r24
     508:	31 f1       	breq	.+76     	; 0x556 <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     50a:	20 91 1d 01 	lds	r18, 0x011D
     50e:	92 2f       	mov	r25, r18
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	80 93 b0 32 	sts	0x32B0, r24
     516:	90 93 b1 32 	sts	0x32B1, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     51a:	80 91 b0 32 	lds	r24, 0x32B0
     51e:	90 91 b1 32 	lds	r25, 0x32B1
     522:	20 91 1c 01 	lds	r18, 0x011C
     526:	82 0f       	add	r24, r18
     528:	91 1d       	adc	r25, r1
     52a:	80 93 b0 32 	sts	0x32B0, r24
     52e:	90 93 b1 32 	sts	0x32B1, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     532:	80 91 b0 32 	lds	r24, 0x32B0
     536:	90 91 b1 32 	lds	r25, 0x32B1
     53a:	84 58       	subi	r24, 0x84	; 132
     53c:	9c 43       	sbci	r25, 0x3C	; 60
     53e:	80 93 b0 32 	sts	0x32B0, r24
     542:	90 93 b1 32 	sts	0x32B1, r25
		Wifi_readLocation = Wifi_writeLocation;
     546:	80 91 b0 32 	lds	r24, 0x32B0
     54a:	90 91 b1 32 	lds	r25, 0x32B1
     54e:	80 93 ae 32 	sts	0x32AE, r24
     552:	90 93 af 32 	sts	0x32AF, r25
     556:	08 95       	ret

00000558 <Wifi_Init>:

volatile uint16_t timeOutCounter = 0;
bool uploadTimedOut = false;


void Wifi_Init(uint32_t baud){
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24


	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	e0 ea       	ldi	r30, 0xA0	; 160
     560:	f6 e0       	ldi	r31, 0x06	; 6
     562:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.DIRCLR = (1<<Wifi_RTS_pin);
     564:	e0 e6       	ldi	r30, 0x60	; 96
     566:	f6 e0       	ldi	r31, 0x06	; 6
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.Wifi_RTS_CNTL = PORT_OPC_PULLUP_gc;
     56c:	88 e1       	ldi	r24, 0x18	; 24
     56e:	81 8b       	std	Z+17, r24	; 0x11
    //Wifi_Flow_Port.DIRSET = (1<<Wifi_CTS_pin);
    //Wifi_Flow_Port.OUTCLR = (1<<Wifi_CTS_pin);


	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     570:	a0 ea       	ldi	r26, 0xA0	; 160
     572:	ba e0       	ldi	r27, 0x0A	; 10
     574:	80 91 a4 0a 	lds	r24, 0x0AA4
     578:	8f 7e       	andi	r24, 0xEF	; 239
     57a:	14 96       	adiw	r26, 0x04	; 4
     57c:	8c 93       	st	X, r24
     57e:	14 97       	sbiw	r26, 0x04	; 4
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     580:	80 91 a4 0a 	lds	r24, 0x0AA4
     584:	87 7f       	andi	r24, 0xF7	; 247
     586:	14 96       	adiw	r26, 0x04	; 4
     588:	8c 93       	st	X, r24
     58a:	14 97       	sbiw	r26, 0x04	; 4
	//_delay_ms(1000);


	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     58c:	e0 e8       	ldi	r30, 0x80	; 128
     58e:	f6 e0       	ldi	r31, 0x06	; 6
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	15 96       	adiw	r26, 0x05	; 5
     59c:	8c 93       	st	X, r24
     59e:	15 97       	sbiw	r26, 0x05	; 5
	 	    	
	if(baud == 9600){
     5a0:	20 38       	cpi	r18, 0x80	; 128
     5a2:	95 e2       	ldi	r25, 0x25	; 37
     5a4:	39 07       	cpc	r19, r25
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	49 07       	cpc	r20, r25
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	59 07       	cpc	r21, r25
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <Wifi_Init+0x5c>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     5b0:	8f e5       	ldi	r24, 0x5F	; 95
     5b2:	1b c0       	rjmp	.+54     	; 0x5ea <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     5b4:	20 30       	cpi	r18, 0x00	; 0
     5b6:	92 ec       	ldi	r25, 0xC2	; 194
     5b8:	39 07       	cpc	r19, r25
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	49 07       	cpc	r20, r25
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	59 07       	cpc	r21, r25
     5c2:	11 f4       	brne	.+4      	; 0x5c8 <Wifi_Init+0x70>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     5c4:	87 e0       	ldi	r24, 0x07	; 7
     5c6:	11 c0       	rjmp	.+34     	; 0x5ea <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     5c8:	20 30       	cpi	r18, 0x00	; 0
     5ca:	94 e8       	ldi	r25, 0x84	; 132
     5cc:	39 07       	cpc	r19, r25
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	49 07       	cpc	r20, r25
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	59 07       	cpc	r21, r25
     5d6:	49 f0       	breq	.+18     	; 0x5ea <Wifi_Init+0x92>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     5d8:	20 30       	cpi	r18, 0x00	; 0
     5da:	88 e0       	ldi	r24, 0x08	; 8
     5dc:	38 07       	cpc	r19, r24
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	48 07       	cpc	r20, r24
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	58 07       	cpc	r21, r24
     5e6:	29 f4       	brne	.+10     	; 0x5f2 <Wifi_Init+0x9a>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	16 96       	adiw	r26, 0x06	; 6
     5ec:	8c 93       	st	X, r24
     5ee:	16 97       	sbiw	r26, 0x06	; 6
     5f0:	08 c0       	rjmp	.+16     	; 0x602 <Wifi_Init+0xaa>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     5f2:	20 50       	subi	r18, 0x00	; 0
     5f4:	30 41       	sbci	r19, 0x10	; 16
     5f6:	4e 40       	sbci	r20, 0x0E	; 14
     5f8:	50 40       	sbci	r21, 0x00	; 0
     5fa:	29 f4       	brne	.+10     	; 0x606 <Wifi_Init+0xae>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     5fc:	16 96       	adiw	r26, 0x06	; 6
     5fe:	1c 92       	st	X, r1
     600:	16 97       	sbiw	r26, 0x06	; 6
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     602:	17 96       	adiw	r26, 0x07	; 7
     604:	1c 92       	st	X, r1
		//Wifi_Usart.CTRLB |= USART_CLK2X_bm;
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     606:	e0 ea       	ldi	r30, 0xA0	; 160
     608:	fa e0       	ldi	r31, 0x0A	; 10
     60a:	80 91 a4 0a 	lds	r24, 0x0AA4
     60e:	80 61       	ori	r24, 0x10	; 16
     610:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     612:	80 91 a4 0a 	lds	r24, 0x0AA4
     616:	88 60       	ori	r24, 0x08	; 8
     618:	84 83       	std	Z+4, r24	; 0x04

	Wifi_ClearBuffer();
     61a:	0e 94 81 02 	call	0x502	; 0x502 <Wifi_ClearBuffer>
}
     61e:	08 95       	ret

00000620 <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     620:	88 23       	and	r24, r24
     622:	21 f0       	breq	.+8      	; 0x62c <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     624:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
     628:	88 23       	and	r24, r24
     62a:	e1 f3       	breq	.-8      	; 0x624 <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     62c:	e0 91 ae 32 	lds	r30, 0x32AE
     630:	f0 91 af 32 	lds	r31, 0x32AF
     634:	ec 57       	subi	r30, 0x7C	; 124
     636:	f3 4c       	sbci	r31, 0xC3	; 195
     638:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     63a:	80 91 ae 32 	lds	r24, 0x32AE
     63e:	90 91 af 32 	lds	r25, 0x32AF
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	80 93 ae 32 	sts	0x32AE, r24
     648:	90 93 af 32 	sts	0x32AF, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     64c:	80 91 ae 32 	lds	r24, 0x32AE
     650:	90 91 af 32 	lds	r25, 0x32AF
     654:	80 50       	subi	r24, 0x00	; 0
     656:	94 40       	sbci	r25, 0x04	; 4
     658:	20 f0       	brcs	.+8      	; 0x662 <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     65a:	10 92 ae 32 	sts	0x32AE, r1
     65e:	10 92 af 32 	sts	0x32AF, r1
	}
	return tmp;
}
     662:	8e 2f       	mov	r24, r30
     664:	08 95       	ret

00000666 <Wifi_Connected>:
    timeString[10] = 0;
    time_secs = atol(timeString);
    return true;
}

bool Wifi_Connected(uint16_t timeOut){
     666:	ac 01       	movw	r20, r24
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	66 e6       	ldi	r22, 0x66	; 102
     66e:	7e e0       	ldi	r23, 0x0E	; 14
     670:	0d c0       	rjmp	.+26     	; 0x68c <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     672:	80 91 a8 06 	lds	r24, 0x06A8
     676:	87 ff       	sbrs	r24, 7
     678:	04 c0       	rjmp	.+8      	; 0x682 <Wifi_Connected+0x1c>
			connected = true;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 be 32 	sts	0x32BE, r24
     680:	08 95       	ret
     682:	fb 01       	movw	r30, r22
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <Wifi_Connected+0x1e>
    time_secs = atol(timeString);
    return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	24 17       	cp	r18, r20
     68e:	35 07       	cpc	r19, r21
     690:	80 f3       	brcs	.-32     	; 0x672 <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     692:	10 92 be 32 	sts	0x32BE, r1
     696:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     698:	08 95       	ret

0000069a <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     69a:	e0 ea       	ldi	r30, 0xA0	; 160
     69c:	f6 e0       	ldi	r31, 0x06	; 6
     69e:	88 e1       	ldi	r24, 0x18	; 24
     6a0:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     6a2:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     6a4:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     6a6:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     6a8:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     6aa:	82 81       	ldd	r24, Z+2	; 0x02
     6ac:	8c 67       	ori	r24, 0x7C	; 124
     6ae:	82 83       	std	Z+2, r24	; 0x02
}
     6b0:	08 95       	ret

000006b2 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6b2:	e0 ea       	ldi	r30, 0xA0	; 160
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	80 85       	ldd	r24, Z+8	; 0x08
}
     6b8:	8c 77       	andi	r24, 0x7C	; 124
     6ba:	08 95       	ret

000006bc <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     6bc:	40 91 a8 06 	lds	r20, 0x06A8
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <Dpad_CheckButton+0x10>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	8a 95       	dec	r24
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <Dpad_CheckButton+0xc>
     6d0:	4c 77       	andi	r20, 0x7C	; 124
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	24 23       	and	r18, r20
     6d6:	35 23       	and	r19, r21
     6d8:	12 16       	cp	r1, r18
     6da:	13 06       	cpc	r1, r19
     6dc:	0c f0       	brlt	.+2      	; 0x6e0 <Dpad_CheckButton+0x24>
     6de:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     6e0:	89 2f       	mov	r24, r25
     6e2:	08 95       	ret

000006e4 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     6e4:	e0 e2       	ldi	r30, 0x20	; 32
     6e6:	f6 e0       	ldi	r31, 0x06	; 6
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	83 6f       	ori	r24, 0xF3	; 243
     6ec:	81 83       	std	Z+1, r24	; 0x01
}
     6ee:	08 95       	ret

000006f0 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <Leds_Set+0xa>
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	8a 95       	dec	r24
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <Leds_Set+0x6>
     6fe:	e0 e2       	ldi	r30, 0x20	; 32
     700:	f6 e0       	ldi	r31, 0x06	; 6
     702:	25 83       	std	Z+5, r18	; 0x05
}
     704:	08 95       	ret

00000706 <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <Leds_Clear+0xa>
     70c:	22 0f       	add	r18, r18
     70e:	33 1f       	adc	r19, r19
     710:	8a 95       	dec	r24
     712:	e2 f7       	brpl	.-8      	; 0x70c <Leds_Clear+0x6>
     714:	e0 e2       	ldi	r30, 0x20	; 32
     716:	f6 e0       	ldi	r31, 0x06	; 6
     718:	26 83       	std	Z+6, r18	; 0x06
}
     71a:	08 95       	ret

0000071c <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	02 c0       	rjmp	.+4      	; 0x726 <Leds_Toggle+0xa>
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	8a 95       	dec	r24
     728:	e2 f7       	brpl	.-8      	; 0x722 <Leds_Toggle+0x6>
     72a:	e0 e2       	ldi	r30, 0x20	; 32
     72c:	f6 e0       	ldi	r31, 0x06	; 6
     72e:	27 83       	std	Z+7, r18	; 0x07
}
     730:	08 95       	ret

00000732 <Rs232_Init>:
uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     732:	e0 e6       	ldi	r30, 0x60	; 96
     734:	f6 e0       	ldi	r31, 0x06	; 6
     736:	88 e0       	ldi	r24, 0x08	; 8
     738:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     73e:	e0 ea       	ldi	r30, 0xA0	; 160
     740:	f9 e0       	ldi	r31, 0x09	; 9
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     746:	8f e5       	ldi	r24, 0x5F	; 95
     748:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     74a:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     74c:	84 81       	ldd	r24, Z+4	; 0x04
     74e:	80 61       	ori	r24, 0x10	; 16
     750:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     752:	84 81       	ldd	r24, Z+4	; 0x04
     754:	88 60       	ori	r24, 0x08	; 8
     756:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_HI_gc;
     758:	83 81       	ldd	r24, Z+3	; 0x03
     75a:	80 63       	ori	r24, 0x30	; 48
     75c:	83 83       	std	Z+3, r24	; 0x03
}
     75e:	08 95       	ret

00000760 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     760:	20 91 c7 32 	lds	r18, 0x32C7
     764:	30 91 c8 32 	lds	r19, 0x32C8
     768:	80 91 c5 32 	lds	r24, 0x32C5
     76c:	90 91 c6 32 	lds	r25, 0x32C6
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	28 17       	cp	r18, r24
     774:	39 07       	cpc	r19, r25
     776:	09 f0       	breq	.+2      	; 0x77a <Rs232_CharReadyToRead+0x1a>
     778:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     77a:	84 2f       	mov	r24, r20
     77c:	08 95       	ret

0000077e <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     77e:	88 23       	and	r24, r24
     780:	59 f0       	breq	.+22     	; 0x798 <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     782:	20 91 c7 32 	lds	r18, 0x32C7
     786:	30 91 c8 32 	lds	r19, 0x32C8
     78a:	80 91 c5 32 	lds	r24, 0x32C5
     78e:	90 91 c6 32 	lds	r25, 0x32C6
     792:	28 17       	cp	r18, r24
     794:	39 07       	cpc	r19, r25
     796:	a9 f3       	breq	.-22     	; 0x782 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     798:	e0 91 c5 32 	lds	r30, 0x32C5
     79c:	f0 91 c6 32 	lds	r31, 0x32C6
     7a0:	ee 59       	subi	r30, 0x9E	; 158
     7a2:	f8 4a       	sbci	r31, 0xA8	; 168
     7a4:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     7a6:	80 91 c5 32 	lds	r24, 0x32C5
     7aa:	90 91 c6 32 	lds	r25, 0x32C6
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	80 93 c5 32 	sts	0x32C5, r24
     7b4:	90 93 c6 32 	sts	0x32C6, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     7b8:	80 91 c5 32 	lds	r24, 0x32C5
     7bc:	90 91 c6 32 	lds	r25, 0x32C6
     7c0:	80 50       	subi	r24, 0x00	; 0
     7c2:	94 40       	sbci	r25, 0x04	; 4
     7c4:	20 f0       	brcs	.+8      	; 0x7ce <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     7c6:	10 92 c5 32 	sts	0x32C5, r1
     7ca:	10 92 c6 32 	sts	0x32C6, r1
	}
	return tmp;
}
     7ce:	8e 2f       	mov	r24, r30
     7d0:	08 95       	ret

000007d2 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     7d2:	80 91 c7 32 	lds	r24, 0x32C7
     7d6:	90 91 c8 32 	lds	r25, 0x32C8
     7da:	80 93 c5 32 	sts	0x32C5, r24
     7de:	90 93 c6 32 	sts	0x32C6, r25
}
     7e2:	08 95       	ret

000007e4 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     7e4:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     7e6:	80 91 a1 09 	lds	r24, 0x09A1
     7ea:	85 ff       	sbrs	r24, 5
     7ec:	fc cf       	rjmp	.-8      	; 0x7e6 <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     7ee:	90 93 a0 09 	sts	0x09A0, r25
}
     7f2:	08 95       	ret

000007f4 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	0b b6       	in	r0, 0x3b	; 59
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	2f 93       	push	r18
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
     80c:	e0 91 c7 32 	lds	r30, 0x32C7
     810:	f0 91 c8 32 	lds	r31, 0x32C8
     814:	80 91 a0 09 	lds	r24, 0x09A0
     818:	ee 59       	subi	r30, 0x9E	; 158
     81a:	f8 4a       	sbci	r31, 0xA8	; 168
     81c:	80 83       	st	Z, r24

	if(rs232Recording){
     81e:	80 91 d2 32 	lds	r24, 0x32D2
     822:	88 23       	and	r24, r24
     824:	61 f0       	breq	.+24     	; 0x83e <__vector_88+0x4a>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
     826:	e0 91 c7 32 	lds	r30, 0x32C7
     82a:	f0 91 c8 32 	lds	r31, 0x32C8
     82e:	ee 59       	subi	r30, 0x9E	; 158
     830:	f8 4a       	sbci	r31, 0xA8	; 168
     832:	80 81       	ld	r24, Z
     834:	8a 30       	cpi	r24, 0x0A	; 10
     836:	19 f4       	brne	.+6      	; 0x83e <__vector_88+0x4a>
            okToSendAirQuality = true;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 c9 32 	sts	0x32C9, r24
		}
	}
	Rs232_writeLocation++;
     83e:	80 91 c7 32 	lds	r24, 0x32C7
     842:	90 91 c8 32 	lds	r25, 0x32C8
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	80 93 c7 32 	sts	0x32C7, r24
     84c:	90 93 c8 32 	sts	0x32C8, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
     850:	80 91 c7 32 	lds	r24, 0x32C7
     854:	90 91 c8 32 	lds	r25, 0x32C8
     858:	80 50       	subi	r24, 0x00	; 0
     85a:	94 40       	sbci	r25, 0x04	; 4
     85c:	20 f0       	brcs	.+8      	; 0x866 <__vector_88+0x72>
		Rs232_writeLocation = 0;
     85e:	10 92 c7 32 	sts	0x32C7, r1
     862:	10 92 c8 32 	sts	0x32C8, r1
	}
}
     866:	ff 91       	pop	r31
     868:	ef 91       	pop	r30
     86a:	9f 91       	pop	r25
     86c:	8f 91       	pop	r24
     86e:	2f 91       	pop	r18
     870:	0f 90       	pop	r0
     872:	0b be       	out	0x3b, r0	; 59
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0
     87a:	1f 90       	pop	r1
     87c:	18 95       	reti

0000087e <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     87e:	82 e3       	ldi	r24, 0x32	; 50
     880:	80 93 4d 33 	sts	0x334D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	e0 ec       	ldi	r30, 0xC0	; 192
     888:	f9 e0       	ldi	r31, 0x09	; 9
     88a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     88c:	80 91 c2 09 	lds	r24, 0x09C2
     890:	87 ff       	sbrs	r24, 7
     892:	fc cf       	rjmp	.-8      	; 0x88c <wait_ready+0xe>
	return SD_SPI.DATA;
     894:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     898:	e0 ec       	ldi	r30, 0xC0	; 192
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8a0:	80 91 c2 09 	lds	r24, 0x09C2
     8a4:	87 ff       	sbrs	r24, 7
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <wait_ready+0x22>
	return SD_SPI.DATA;
     8a8:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     8ac:	9f 3f       	cpi	r25, 0xFF	; 255
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <wait_ready+0x3a>
     8b0:	80 91 4d 33 	lds	r24, 0x334D
     8b4:	88 23       	and	r24, r24
     8b6:	99 f7       	brne	.-26     	; 0x89e <wait_ready+0x20>

	return res;
}
     8b8:	89 2f       	mov	r24, r25
     8ba:	08 95       	ret

000008bc <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
	CS_LOW();
     8c2:	c0 e6       	ldi	r28, 0x60	; 96
     8c4:	d6 e0       	ldi	r29, 0x06	; 6
     8c6:	10 e1       	ldi	r17, 0x10	; 16
     8c8:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     8ca:	0e 94 3f 04 	call	0x87e	; 0x87e <wait_ready>
     8ce:	8f 3f       	cpi	r24, 0xFF	; 255
     8d0:	11 f4       	brne	.+4      	; 0x8d6 <select+0x1a>
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0c c0       	rjmp	.+24     	; 0x8ee <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     8d6:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	e0 ec       	ldi	r30, 0xC0	; 192
     8dc:	f9 e0       	ldi	r31, 0x09	; 9
     8de:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8e0:	80 91 c2 09 	lds	r24, 0x09C2
     8e4:	87 ff       	sbrs	r24, 7
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <select+0x24>
	return SD_SPI.DATA;
     8e8:	80 91 c3 09 	lds	r24, 0x09C3
     8ec:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	08 95       	ret

000008f6 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     8f6:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     8f8:	84 e1       	ldi	r24, 0x14	; 20
     8fa:	80 93 4c 33 	sts	0x334C, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8fe:	a0 ec       	ldi	r26, 0xC0	; 192
     900:	b9 e0       	ldi	r27, 0x09	; 9
     902:	9f ef       	ldi	r25, 0xFF	; 255
     904:	13 96       	adiw	r26, 0x03	; 3
     906:	9c 93       	st	X, r25
     908:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     90a:	80 91 c2 09 	lds	r24, 0x09C2
     90e:	87 ff       	sbrs	r24, 7
     910:	fc cf       	rjmp	.-8      	; 0x90a <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     912:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	29 f4       	brne	.+10     	; 0x924 <rcvr_datablock+0x2e>
     91a:	80 91 4c 33 	lds	r24, 0x334C
     91e:	88 23       	and	r24, r24
     920:	89 f7       	brne	.-30     	; 0x904 <rcvr_datablock+0xe>
     922:	49 c0       	rjmp	.+146    	; 0x9b6 <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     924:	8e 3f       	cpi	r24, 0xFE	; 254
     926:	09 f0       	breq	.+2      	; 0x92a <rcvr_datablock+0x34>
     928:	46 c0       	rjmp	.+140    	; 0x9b6 <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     92a:	a0 ec       	ldi	r26, 0xC0	; 192
     92c:	b9 e0       	ldi	r27, 0x09	; 9
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	13 96       	adiw	r26, 0x03	; 3
     932:	9c 93       	st	X, r25
     934:	13 97       	sbiw	r26, 0x03	; 3
     936:	80 91 c2 09 	lds	r24, 0x09C2
     93a:	87 ff       	sbrs	r24, 7
     93c:	fc cf       	rjmp	.-8      	; 0x936 <rcvr_datablock+0x40>
     93e:	80 91 c3 09 	lds	r24, 0x09C3
     942:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     944:	13 96       	adiw	r26, 0x03	; 3
     946:	9c 93       	st	X, r25
     948:	13 97       	sbiw	r26, 0x03	; 3
     94a:	80 91 c2 09 	lds	r24, 0x09C2
     94e:	87 ff       	sbrs	r24, 7
     950:	fc cf       	rjmp	.-8      	; 0x94a <rcvr_datablock+0x54>
     952:	80 91 c3 09 	lds	r24, 0x09C3
     956:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     958:	13 96       	adiw	r26, 0x03	; 3
     95a:	9c 93       	st	X, r25
     95c:	13 97       	sbiw	r26, 0x03	; 3
     95e:	80 91 c2 09 	lds	r24, 0x09C2
     962:	87 ff       	sbrs	r24, 7
     964:	fc cf       	rjmp	.-8      	; 0x95e <rcvr_datablock+0x68>
     966:	80 91 c3 09 	lds	r24, 0x09C3
     96a:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     96c:	13 96       	adiw	r26, 0x03	; 3
     96e:	9c 93       	st	X, r25
     970:	13 97       	sbiw	r26, 0x03	; 3
     972:	80 91 c2 09 	lds	r24, 0x09C2
     976:	87 ff       	sbrs	r24, 7
     978:	fc cf       	rjmp	.-8      	; 0x972 <rcvr_datablock+0x7c>
     97a:	80 91 c3 09 	lds	r24, 0x09C3
     97e:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     980:	64 50       	subi	r22, 0x04	; 4
     982:	70 40       	sbci	r23, 0x00	; 0
     984:	11 f0       	breq	.+4      	; 0x98a <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     986:	34 96       	adiw	r30, 0x04	; 4
     988:	d3 cf       	rjmp	.-90     	; 0x930 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	e0 ec       	ldi	r30, 0xC0	; 192
     98e:	f9 e0       	ldi	r31, 0x09	; 9
     990:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     992:	80 91 c2 09 	lds	r24, 0x09C2
     996:	87 ff       	sbrs	r24, 7
     998:	fc cf       	rjmp	.-8      	; 0x992 <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     99a:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	e0 ec       	ldi	r30, 0xC0	; 192
     9a2:	f9 e0       	ldi	r31, 0x09	; 9
     9a4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9a6:	80 91 c2 09 	lds	r24, 0x09C2
     9aa:	87 ff       	sbrs	r24, 7
     9ac:	fc cf       	rjmp	.-8      	; 0x9a6 <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     9ae:	80 91 c3 09 	lds	r24, 0x09C3
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     9b6:	80 e0       	ldi	r24, 0x00	; 0
}
     9b8:	08 95       	ret

000009ba <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
     9c2:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     9c4:	0e 94 3f 04 	call	0x87e	; 0x87e <wait_ready>
     9c8:	8f 3f       	cpi	r24, 0xFF	; 255
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <xmit_datablock+0x16>
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	3f c0       	rjmp	.+126    	; 0xa4e <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     9d0:	e0 ec       	ldi	r30, 0xC0	; 192
     9d2:	f9 e0       	ldi	r31, 0x09	; 9
     9d4:	13 83       	std	Z+3, r17	; 0x03
     9d6:	80 91 c2 09 	lds	r24, 0x09C2
     9da:	87 ff       	sbrs	r24, 7
     9dc:	fc cf       	rjmp	.-8      	; 0x9d6 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     9de:	1d 3f       	cpi	r17, 0xFD	; 253
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <xmit_datablock+0x2c>
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	34 c0       	rjmp	.+104    	; 0xa4e <xmit_datablock+0x94>
     9e6:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     9e8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ea:	f9 e0       	ldi	r31, 0x09	; 9
     9ec:	88 81       	ld	r24, Y
     9ee:	83 83       	std	Z+3, r24	; 0x03
     9f0:	80 91 c2 09 	lds	r24, 0x09C2
     9f4:	87 ff       	sbrs	r24, 7
     9f6:	fc cf       	rjmp	.-8      	; 0x9f0 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	83 83       	std	Z+3, r24	; 0x03
     9fc:	80 91 c2 09 	lds	r24, 0x09C2
     a00:	87 ff       	sbrs	r24, 7
     a02:	fc cf       	rjmp	.-8      	; 0x9fc <xmit_datablock+0x42>
		} while (--wc);
     a04:	91 50       	subi	r25, 0x01	; 1
     a06:	11 f0       	breq	.+4      	; 0xa0c <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a08:	22 96       	adiw	r28, 0x02	; 2
     a0a:	f0 cf       	rjmp	.-32     	; 0x9ec <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	e0 ec       	ldi	r30, 0xC0	; 192
     a10:	f9 e0       	ldi	r31, 0x09	; 9
     a12:	83 83       	std	Z+3, r24	; 0x03
     a14:	80 91 c2 09 	lds	r24, 0x09C2
     a18:	87 ff       	sbrs	r24, 7
     a1a:	fc cf       	rjmp	.-8      	; 0xa14 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e0 ec       	ldi	r30, 0xC0	; 192
     a20:	f9 e0       	ldi	r31, 0x09	; 9
     a22:	83 83       	std	Z+3, r24	; 0x03
     a24:	80 91 c2 09 	lds	r24, 0x09C2
     a28:	87 ff       	sbrs	r24, 7
     a2a:	fc cf       	rjmp	.-8      	; 0xa24 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e0 ec       	ldi	r30, 0xC0	; 192
     a30:	f9 e0       	ldi	r31, 0x09	; 9
     a32:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a34:	80 91 c2 09 	lds	r24, 0x09C2
     a38:	87 ff       	sbrs	r24, 7
     a3a:	fc cf       	rjmp	.-8      	; 0xa34 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     a3c:	80 91 c3 09 	lds	r24, 0x09C3
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	8f 71       	andi	r24, 0x1F	; 31
     a44:	85 30       	cpi	r24, 0x05	; 5
     a46:	09 f0       	breq	.+2      	; 0xa4a <xmit_datablock+0x90>
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     a4e:	89 2f       	mov	r24, r25
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	08 95       	ret

00000a58 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	d8 2e       	mov	r13, r24
     a64:	7a 01       	movw	r14, r20
     a66:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     a68:	87 ff       	sbrs	r24, 7
     a6a:	0c c0       	rjmp	.+24     	; 0xa84 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     a6c:	87 e7       	ldi	r24, 0x77	; 119
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
		if (res > 1) return res;
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	08 f0       	brcs	.+2      	; 0xa80 <send_cmd+0x28>
     a7e:	72 c0       	rjmp	.+228    	; 0xb64 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     a80:	8f e7       	ldi	r24, 0x7F	; 127
     a82:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     a84:	80 e1       	ldi	r24, 0x10	; 16
     a86:	e0 e6       	ldi	r30, 0x60	; 96
     a88:	f6 e0       	ldi	r31, 0x06	; 6
     a8a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e0 ec       	ldi	r30, 0xC0	; 192
     a90:	f9 e0       	ldi	r31, 0x09	; 9
     a92:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a94:	80 91 c2 09 	lds	r24, 0x09C2
     a98:	87 ff       	sbrs	r24, 7
     a9a:	fc cf       	rjmp	.-8      	; 0xa94 <send_cmd+0x3c>
	return SD_SPI.DATA;
     a9c:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     aa0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <select>
     aa4:	88 23       	and	r24, r24
     aa6:	11 f4       	brne	.+4      	; 0xaac <send_cmd+0x54>
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	5c c0       	rjmp	.+184    	; 0xb64 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     aac:	e0 ec       	ldi	r30, 0xC0	; 192
     aae:	f9 e0       	ldi	r31, 0x09	; 9
     ab0:	d3 82       	std	Z+3, r13	; 0x03
     ab2:	80 91 c2 09 	lds	r24, 0x09C2
     ab6:	87 ff       	sbrs	r24, 7
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     aba:	81 2f       	mov	r24, r17
     abc:	99 27       	eor	r25, r25
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	e0 ec       	ldi	r30, 0xC0	; 192
     ac4:	f9 e0       	ldi	r31, 0x09	; 9
     ac6:	83 83       	std	Z+3, r24	; 0x03
     ac8:	80 91 c2 09 	lds	r24, 0x09C2
     acc:	87 ff       	sbrs	r24, 7
     ace:	fc cf       	rjmp	.-8      	; 0xac8 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     ad0:	c8 01       	movw	r24, r16
     ad2:	aa 27       	eor	r26, r26
     ad4:	bb 27       	eor	r27, r27
     ad6:	e0 ec       	ldi	r30, 0xC0	; 192
     ad8:	f9 e0       	ldi	r31, 0x09	; 9
     ada:	83 83       	std	Z+3, r24	; 0x03
     adc:	80 91 c2 09 	lds	r24, 0x09C2
     ae0:	87 ff       	sbrs	r24, 7
     ae2:	fc cf       	rjmp	.-8      	; 0xadc <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     ae4:	bb 27       	eor	r27, r27
     ae6:	a1 2f       	mov	r26, r17
     ae8:	90 2f       	mov	r25, r16
     aea:	8f 2d       	mov	r24, r15
     aec:	e0 ec       	ldi	r30, 0xC0	; 192
     aee:	f9 e0       	ldi	r31, 0x09	; 9
     af0:	83 83       	std	Z+3, r24	; 0x03
     af2:	80 91 c2 09 	lds	r24, 0x09C2
     af6:	87 ff       	sbrs	r24, 7
     af8:	fc cf       	rjmp	.-8      	; 0xaf2 <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     afa:	e0 ec       	ldi	r30, 0xC0	; 192
     afc:	f9 e0       	ldi	r31, 0x09	; 9
     afe:	e3 82       	std	Z+3, r14	; 0x03
     b00:	80 91 c2 09 	lds	r24, 0x09C2
     b04:	87 ff       	sbrs	r24, 7
     b06:	fc cf       	rjmp	.-8      	; 0xb00 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b08:	80 e4       	ldi	r24, 0x40	; 64
     b0a:	d8 16       	cp	r13, r24
     b0c:	11 f4       	brne	.+4      	; 0xb12 <send_cmd+0xba>
     b0e:	85 e9       	ldi	r24, 0x95	; 149
     b10:	06 c0       	rjmp	.+12     	; 0xb1e <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b12:	88 e4       	ldi	r24, 0x48	; 72
     b14:	d8 16       	cp	r13, r24
     b16:	11 f4       	brne	.+4      	; 0xb1c <send_cmd+0xc4>
     b18:	87 e8       	ldi	r24, 0x87	; 135
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <send_cmd+0xc6>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b1e:	e0 ec       	ldi	r30, 0xC0	; 192
     b20:	f9 e0       	ldi	r31, 0x09	; 9
     b22:	83 83       	std	Z+3, r24	; 0x03
     b24:	80 91 c2 09 	lds	r24, 0x09C2
     b28:	87 ff       	sbrs	r24, 7
     b2a:	fc cf       	rjmp	.-8      	; 0xb24 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     b2c:	8c e4       	ldi	r24, 0x4C	; 76
     b2e:	d8 16       	cp	r13, r24
     b30:	51 f4       	brne	.+20     	; 0xb46 <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	e0 ec       	ldi	r30, 0xC0	; 192
     b36:	f9 e0       	ldi	r31, 0x09	; 9
     b38:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b3a:	80 91 c2 09 	lds	r24, 0x09C2
     b3e:	87 ff       	sbrs	r24, 7
     b40:	fc cf       	rjmp	.-8      	; 0xb3a <send_cmd+0xe2>
	return SD_SPI.DATA;
     b42:	80 91 c3 09 	lds	r24, 0x09C3
     b46:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b48:	e0 ec       	ldi	r30, 0xC0	; 192
     b4a:	f9 e0       	ldi	r31, 0x09	; 9
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b50:	80 91 c2 09 	lds	r24, 0x09C2
     b54:	87 ff       	sbrs	r24, 7
     b56:	fc cf       	rjmp	.-8      	; 0xb50 <send_cmd+0xf8>
	return SD_SPI.DATA;
     b58:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     b5c:	87 ff       	sbrs	r24, 7
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <send_cmd+0x10c>
     b60:	91 50       	subi	r25, 0x01	; 1
     b62:	a9 f7       	brne	.-22     	; 0xb4e <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	08 95       	ret

00000b70 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <disk_initialize+0xe>
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     b84:	80 91 77 32 	lds	r24, 0x3277
     b88:	81 fd       	sbrc	r24, 1
     b8a:	cc c0       	rjmp	.+408    	; 0xd24 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     b8c:	e0 e6       	ldi	r30, 0x60	; 96
     b8e:	f6 e0       	ldi	r31, 0x06	; 6
     b90:	80 eb       	ldi	r24, 0xB0	; 176
     b92:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     b94:	88 e3       	ldi	r24, 0x38	; 56
     b96:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     b98:	14 82       	std	Z+4, r1	; 0x04
     b9a:	8c e2       	ldi	r24, 0x2C	; 44
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	20 e7       	ldi	r18, 0x70	; 112
     ba0:	31 e0       	ldi	r19, 0x01	; 1
     ba2:	f9 01       	movw	r30, r18
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     baa:	d9 f7       	brne	.-10     	; 0xba2 <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     bac:	83 e5       	ldi	r24, 0x53	; 83
     bae:	80 93 c0 09 	sts	0x09C0, r24
     bb2:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bb4:	e0 ec       	ldi	r30, 0xC0	; 192
     bb6:	f9 e0       	ldi	r31, 0x09	; 9
     bb8:	2f ef       	ldi	r18, 0xFF	; 255
     bba:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bbc:	80 91 c2 09 	lds	r24, 0x09C2
     bc0:	87 ff       	sbrs	r24, 7
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <disk_initialize+0x4c>
	return SD_SPI.DATA;
     bc4:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     bc8:	91 50       	subi	r25, 0x01	; 1
     bca:	b9 f7       	brne	.-18     	; 0xbba <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     bcc:	80 e4       	ldi	r24, 0x40	; 64
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <disk_initialize+0x70>
     bde:	87 c0       	rjmp	.+270    	; 0xcee <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     be0:	84 e6       	ldi	r24, 0x64	; 100
     be2:	80 93 4c 33 	sts	0x334C, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     be6:	88 e4       	ldi	r24, 0x48	; 72
     be8:	4a ea       	ldi	r20, 0xAA	; 170
     bea:	51 e0       	ldi	r21, 0x01	; 1
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	09 f0       	breq	.+2      	; 0xbfa <disk_initialize+0x8a>
     bf8:	53 c0       	rjmp	.+166    	; 0xca0 <disk_initialize+0x130>
     bfa:	7e 01       	movw	r14, r28
     bfc:	08 94       	sec
     bfe:	e1 1c       	adc	r14, r1
     c00:	f1 1c       	adc	r15, r1
     c02:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c04:	e0 ec       	ldi	r30, 0xC0	; 192
     c06:	f9 e0       	ldi	r31, 0x09	; 9
     c08:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c0a:	9e 01       	movw	r18, r28
     c0c:	2b 5f       	subi	r18, 0xFB	; 251
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c10:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c12:	80 91 c2 09 	lds	r24, 0x09C2
     c16:	87 ff       	sbrs	r24, 7
     c18:	fc cf       	rjmp	.-8      	; 0xc12 <disk_initialize+0xa2>
	return SD_SPI.DATA;
     c1a:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c1e:	d8 01       	movw	r26, r16
     c20:	8d 93       	st	X+, r24
     c22:	8d 01       	movw	r16, r26
     c24:	a2 17       	cp	r26, r18
     c26:	b3 07       	cpc	r27, r19
     c28:	99 f7       	brne	.-26     	; 0xc10 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <disk_initialize+0xc2>
     c30:	5e c0       	rjmp	.+188    	; 0xcee <disk_initialize+0x17e>
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	8a 3a       	cpi	r24, 0xAA	; 170
     c36:	09 f0       	breq	.+2      	; 0xc3a <disk_initialize+0xca>
     c38:	5a c0       	rjmp	.+180    	; 0xcee <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     c3a:	80 91 4c 33 	lds	r24, 0x334C
     c3e:	88 23       	and	r24, r24
     c40:	49 f0       	breq	.+18     	; 0xc54 <disk_initialize+0xe4>
     c42:	89 ee       	ldi	r24, 0xE9	; 233
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e4       	ldi	r23, 0x40	; 64
     c4c:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     c50:	88 23       	and	r24, r24
     c52:	99 f7       	brne	.-26     	; 0xc3a <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     c54:	80 91 4c 33 	lds	r24, 0x334C
     c58:	88 23       	and	r24, r24
     c5a:	09 f4       	brne	.+2      	; 0xc5e <disk_initialize+0xee>
     c5c:	48 c0       	rjmp	.+144    	; 0xcee <disk_initialize+0x17e>
     c5e:	8a e7       	ldi	r24, 0x7A	; 122
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     c6c:	88 23       	and	r24, r24
     c6e:	09 f0       	breq	.+2      	; 0xc72 <disk_initialize+0x102>
     c70:	3e c0       	rjmp	.+124    	; 0xcee <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c72:	e0 ec       	ldi	r30, 0xC0	; 192
     c74:	f9 e0       	ldi	r31, 0x09	; 9
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c7a:	80 91 c2 09 	lds	r24, 0x09C2
     c7e:	87 ff       	sbrs	r24, 7
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <disk_initialize+0x10a>
	return SD_SPI.DATA;
     c82:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     c86:	d7 01       	movw	r26, r14
     c88:	8d 93       	st	X+, r24
     c8a:	7d 01       	movw	r14, r26
     c8c:	a0 17       	cp	r26, r16
     c8e:	b1 07       	cpc	r27, r17
     c90:	99 f7       	brne	.-26     	; 0xc78 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	86 fd       	sbrc	r24, 6
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <disk_initialize+0x12c>
     c98:	14 e0       	ldi	r17, 0x04	; 4
     c9a:	2a c0       	rjmp	.+84     	; 0xcf0 <disk_initialize+0x180>
     c9c:	1c e0       	ldi	r17, 0x0C	; 12
     c9e:	28 c0       	rjmp	.+80     	; 0xcf0 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     ca0:	89 ee       	ldi	r24, 0xE9	; 233
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	18 f0       	brcs	.+6      	; 0xcb8 <disk_initialize+0x148>
     cb2:	01 e4       	ldi	r16, 0x41	; 65
     cb4:	11 e0       	ldi	r17, 0x01	; 1
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <disk_initialize+0x14c>
     cb8:	09 ee       	ldi	r16, 0xE9	; 233
     cba:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     cbc:	80 91 4c 33 	lds	r24, 0x334C
     cc0:	88 23       	and	r24, r24
     cc2:	49 f0       	breq	.+18     	; 0xcd6 <disk_initialize+0x166>
     cc4:	80 2f       	mov	r24, r16
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     cd2:	88 23       	and	r24, r24
     cd4:	99 f7       	brne	.-26     	; 0xcbc <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     cd6:	80 91 4c 33 	lds	r24, 0x334C
     cda:	88 23       	and	r24, r24
     cdc:	41 f0       	breq	.+16     	; 0xcee <disk_initialize+0x17e>
     cde:	80 e5       	ldi	r24, 0x50	; 80
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	52 e0       	ldi	r21, 0x02	; 2
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     cec:	81 11       	cpse	r24, r1
     cee:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     cf0:	10 93 4e 33 	sts	0x334E, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     cf4:	80 e1       	ldi	r24, 0x10	; 16
     cf6:	e0 e6       	ldi	r30, 0x60	; 96
     cf8:	f6 e0       	ldi	r31, 0x06	; 6
     cfa:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	e0 ec       	ldi	r30, 0xC0	; 192
     d00:	f9 e0       	ldi	r31, 0x09	; 9
     d02:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d04:	80 91 c2 09 	lds	r24, 0x09C2
     d08:	87 ff       	sbrs	r24, 7
     d0a:	fc cf       	rjmp	.-8      	; 0xd04 <disk_initialize+0x194>
	return SD_SPI.DATA;
     d0c:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     d10:	11 23       	and	r17, r17
     d12:	41 f0       	breq	.+16     	; 0xd24 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     d14:	80 91 77 32 	lds	r24, 0x3277
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	80 93 77 32 	sts	0x3277, r24
		FCLK_FAST();
     d1e:	80 ed       	ldi	r24, 0xD0	; 208
     d20:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     d24:	80 91 77 32 	lds	r24, 0x3277
}
     d28:	24 96       	adiw	r28, 0x04	; 4
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     d3c:	88 23       	and	r24, r24
     d3e:	11 f0       	breq	.+4      	; 0xd44 <disk_status+0x8>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	08 95       	ret
	return Stat;
     d44:	80 91 77 32 	lds	r24, 0x3277
}
     d48:	08 95       	ret

00000d4a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d4a:	0f 93       	push	r16
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <disk_read+0xe>
     d56:	53 c0       	rjmp	.+166    	; 0xdfe <disk_read+0xb4>
     d58:	00 23       	and	r16, r16
     d5a:	09 f4       	brne	.+2      	; 0xd5e <disk_read+0x14>
     d5c:	50 c0       	rjmp	.+160    	; 0xdfe <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d5e:	80 91 77 32 	lds	r24, 0x3277
     d62:	80 ff       	sbrs	r24, 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <disk_read+0x20>
     d66:	03 e0       	ldi	r16, 0x03	; 3
     d68:	4b c0       	rjmp	.+150    	; 0xe00 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d6a:	80 91 4e 33 	lds	r24, 0x334E
     d6e:	83 fd       	sbrc	r24, 3
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <disk_read+0x36>
     d72:	69 e0       	ldi	r22, 0x09	; 9
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	44 1f       	adc	r20, r20
     d7a:	55 1f       	adc	r21, r21
     d7c:	6a 95       	dec	r22
     d7e:	d1 f7       	brne	.-12     	; 0xd74 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     d80:	01 30       	cpi	r16, 0x01	; 1
     d82:	89 f4       	brne	.+34     	; 0xda6 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     d84:	81 e5       	ldi	r24, 0x51	; 81
     d86:	ba 01       	movw	r22, r20
     d88:	a9 01       	movw	r20, r18
     d8a:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     d8e:	88 23       	and	r24, r24
     d90:	21 f5       	brne	.+72     	; 0xdda <disk_read+0x90>
     d92:	ce 01       	movw	r24, r28
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	72 e0       	ldi	r23, 0x02	; 2
     d98:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <rcvr_datablock>
     d9c:	00 e0       	ldi	r16, 0x00	; 0
     d9e:	88 23       	and	r24, r24
     da0:	e1 f4       	brne	.+56     	; 0xdda <disk_read+0x90>
     da2:	01 e0       	ldi	r16, 0x01	; 1
     da4:	1a c0       	rjmp	.+52     	; 0xdda <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     da6:	82 e5       	ldi	r24, 0x52	; 82
     da8:	ba 01       	movw	r22, r20
     daa:	a9 01       	movw	r20, r18
     dac:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     db0:	88 23       	and	r24, r24
     db2:	99 f4       	brne	.+38     	; 0xdda <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     db4:	ce 01       	movw	r24, r28
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	72 e0       	ldi	r23, 0x02	; 2
     dba:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <rcvr_datablock>
     dbe:	88 23       	and	r24, r24
     dc0:	29 f0       	breq	.+10     	; 0xdcc <disk_read+0x82>
				buff += 512;
			} while (--count);
     dc2:	01 50       	subi	r16, 0x01	; 1
     dc4:	19 f0       	breq	.+6      	; 0xdcc <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     dc6:	c0 50       	subi	r28, 0x00	; 0
     dc8:	de 4f       	sbci	r29, 0xFE	; 254
     dca:	f4 cf       	rjmp	.-24     	; 0xdb4 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     dcc:	8c e4       	ldi	r24, 0x4C	; 76
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     dda:	80 e1       	ldi	r24, 0x10	; 16
     ddc:	e0 e6       	ldi	r30, 0x60	; 96
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	e0 ec       	ldi	r30, 0xC0	; 192
     de6:	f9 e0       	ldi	r31, 0x09	; 9
     de8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     dea:	80 91 c2 09 	lds	r24, 0x09C2
     dee:	87 ff       	sbrs	r24, 7
     df0:	fc cf       	rjmp	.-8      	; 0xdea <disk_read+0xa0>
	return SD_SPI.DATA;
     df2:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     df6:	00 23       	and	r16, r16
     df8:	19 f0       	breq	.+6      	; 0xe00 <disk_read+0xb6>
     dfa:	01 e0       	ldi	r16, 0x01	; 1
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <disk_read+0xb6>
     dfe:	04 e0       	ldi	r16, 0x04	; 4
}
     e00:	80 2f       	mov	r24, r16
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	eb 01       	movw	r28, r22
     e1a:	69 01       	movw	r12, r18
     e1c:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     e1e:	88 23       	and	r24, r24
     e20:	09 f0       	breq	.+2      	; 0xe24 <disk_write+0x1a>
     e22:	61 c0       	rjmp	.+194    	; 0xee6 <disk_write+0xdc>
     e24:	00 23       	and	r16, r16
     e26:	09 f4       	brne	.+2      	; 0xe2a <disk_write+0x20>
     e28:	5e c0       	rjmp	.+188    	; 0xee6 <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e2a:	80 91 77 32 	lds	r24, 0x3277
     e2e:	80 ff       	sbrs	r24, 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <disk_write+0x2c>
     e32:	03 e0       	ldi	r16, 0x03	; 3
     e34:	59 c0       	rjmp	.+178    	; 0xee8 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e36:	80 91 77 32 	lds	r24, 0x3277
     e3a:	82 ff       	sbrs	r24, 2
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <disk_write+0x38>
     e3e:	02 e0       	ldi	r16, 0x02	; 2
     e40:	53 c0       	rjmp	.+166    	; 0xee8 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e42:	80 91 4e 33 	lds	r24, 0x334E
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	83 fd       	sbrc	r24, 3
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <disk_write+0x50>
     e4c:	79 e0       	ldi	r23, 0x09	; 9
     e4e:	cc 0c       	add	r12, r12
     e50:	dd 1c       	adc	r13, r13
     e52:	ee 1c       	adc	r14, r14
     e54:	ff 1c       	adc	r15, r15
     e56:	7a 95       	dec	r23
     e58:	d1 f7       	brne	.-12     	; 0xe4e <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     e5a:	01 30       	cpi	r16, 0x01	; 1
     e5c:	69 f4       	brne	.+26     	; 0xe78 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     e5e:	88 e5       	ldi	r24, 0x58	; 88
     e60:	b7 01       	movw	r22, r14
     e62:	a6 01       	movw	r20, r12
     e64:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     e68:	88 23       	and	r24, r24
     e6a:	59 f5       	brne	.+86     	; 0xec2 <disk_write+0xb8>
     e6c:	ce 01       	movw	r24, r28
     e6e:	6e ef       	ldi	r22, 0xFE	; 254
     e70:	0e 94 dd 04 	call	0x9ba	; 0x9ba <xmit_datablock>
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	22 c0       	rjmp	.+68     	; 0xebc <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e78:	86 70       	andi	r24, 0x06	; 6
     e7a:	90 70       	andi	r25, 0x00	; 0
     e7c:	89 2b       	or	r24, r25
     e7e:	39 f0       	breq	.+14     	; 0xe8e <disk_write+0x84>
     e80:	40 2f       	mov	r20, r16
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	87 ed       	ldi	r24, 0xD7	; 215
     e8a:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     e8e:	89 e5       	ldi	r24, 0x59	; 89
     e90:	b7 01       	movw	r22, r14
     e92:	a6 01       	movw	r20, r12
     e94:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     e98:	88 23       	and	r24, r24
     e9a:	99 f4       	brne	.+38     	; 0xec2 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     e9c:	ce 01       	movw	r24, r28
     e9e:	6c ef       	ldi	r22, 0xFC	; 252
     ea0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <xmit_datablock>
     ea4:	88 23       	and	r24, r24
     ea6:	29 f0       	breq	.+10     	; 0xeb2 <disk_write+0xa8>
				buff += 512;
			} while (--count);
     ea8:	01 50       	subi	r16, 0x01	; 1
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     eac:	c0 50       	subi	r28, 0x00	; 0
     eae:	de 4f       	sbci	r29, 0xFE	; 254
     eb0:	f5 cf       	rjmp	.-22     	; 0xe9c <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	6d ef       	ldi	r22, 0xFD	; 253
     eb8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <xmit_datablock>
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <disk_write+0xb8>
     ec0:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	e0 e6       	ldi	r30, 0x60	; 96
     ec6:	f6 e0       	ldi	r31, 0x06	; 6
     ec8:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	e0 ec       	ldi	r30, 0xC0	; 192
     ece:	f9 e0       	ldi	r31, 0x09	; 9
     ed0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ed2:	80 91 c2 09 	lds	r24, 0x09C2
     ed6:	87 ff       	sbrs	r24, 7
     ed8:	fc cf       	rjmp	.-8      	; 0xed2 <disk_write+0xc8>
	return SD_SPI.DATA;
     eda:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     ede:	00 23       	and	r16, r16
     ee0:	19 f0       	breq	.+6      	; 0xee8 <disk_write+0xde>
     ee2:	01 e0       	ldi	r16, 0x01	; 1
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <disk_write+0xde>
     ee6:	04 e0       	ldi	r16, 0x04	; 4
}
     ee8:	80 2f       	mov	r24, r16
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	08 95       	ret

00000efa <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	60 97       	sbiw	r28, 0x10	; 16
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     f10:	88 23       	and	r24, r24
     f12:	09 f0       	breq	.+2      	; 0xf16 <disk_ioctl+0x1c>
     f14:	b8 c1       	rjmp	.+880    	; 0x1286 <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     f16:	64 30       	cpi	r22, 0x04	; 4
     f18:	01 f5       	brne	.+64     	; 0xf5a <disk_ioctl+0x60>
		switch (*ptr) {
     f1a:	fa 01       	movw	r30, r20
     f1c:	80 81       	ld	r24, Z
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	39 f0       	breq	.+14     	; 0xf30 <disk_ioctl+0x36>
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	08 f4       	brcc	.+2      	; 0xf28 <disk_ioctl+0x2e>
     f26:	b1 c1       	rjmp	.+866    	; 0x128a <disk_ioctl+0x390>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	09 f0       	breq	.+2      	; 0xf2e <disk_ioctl+0x34>
     f2c:	ac c1       	rjmp	.+856    	; 0x1286 <disk_ioctl+0x38c>
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     f30:	e0 e6       	ldi	r30, 0x60	; 96
     f32:	f6 e0       	ldi	r31, 0x06	; 6
     f34:	80 eb       	ldi	r24, 0xB0	; 176
     f36:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     f38:	88 e3       	ldi	r24, 0x38	; 56
     f3a:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     f3c:	14 82       	std	Z+4, r1	; 0x04
     f3e:	8c e2       	ldi	r24, 0x2C	; 44
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	20 e7       	ldi	r18, 0x70	; 112
     f44:	31 e0       	ldi	r19, 0x01	; 1
     f46:	f9 01       	movw	r30, r18
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	d9 f7       	brne	.-10     	; 0xf46 <disk_ioctl+0x4c>
     f50:	9c c1       	rjmp	.+824    	; 0x128a <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	fa 01       	movw	r30, r20
     f56:	81 83       	std	Z+1, r24	; 0x01
     f58:	98 c1       	rjmp	.+816    	; 0x128a <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     f5a:	80 91 77 32 	lds	r24, 0x3277
     f5e:	80 ff       	sbrs	r24, 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <disk_ioctl+0x6c>
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	93 c1       	rjmp	.+806    	; 0x128c <disk_ioctl+0x392>

		switch (ctrl) {
     f66:	6a 30       	cpi	r22, 0x0A	; 10
     f68:	09 f4       	brne	.+2      	; 0xf6c <disk_ioctl+0x72>
     f6a:	2f c1       	rjmp	.+606    	; 0x11ca <disk_ioctl+0x2d0>
     f6c:	6b 30       	cpi	r22, 0x0B	; 11
     f6e:	50 f4       	brcc	.+20     	; 0xf84 <disk_ioctl+0x8a>
     f70:	61 30       	cpi	r22, 0x01	; 1
     f72:	51 f1       	breq	.+84     	; 0xfc8 <disk_ioctl+0xce>
     f74:	61 30       	cpi	r22, 0x01	; 1
     f76:	a0 f0       	brcs	.+40     	; 0xfa0 <disk_ioctl+0xa6>
     f78:	62 30       	cpi	r22, 0x02	; 2
     f7a:	09 f4       	brne	.+2      	; 0xf7e <disk_ioctl+0x84>
     f7c:	86 c0       	rjmp	.+268    	; 0x108a <disk_ioctl+0x190>
     f7e:	63 30       	cpi	r22, 0x03	; 3
     f80:	69 f4       	brne	.+26     	; 0xf9c <disk_ioctl+0xa2>
     f82:	89 c0       	rjmp	.+274    	; 0x1096 <disk_ioctl+0x19c>
     f84:	6c 30       	cpi	r22, 0x0C	; 12
     f86:	09 f4       	brne	.+2      	; 0xf8a <disk_ioctl+0x90>
     f88:	27 c1       	rjmp	.+590    	; 0x11d8 <disk_ioctl+0x2de>
     f8a:	6c 30       	cpi	r22, 0x0C	; 12
     f8c:	08 f4       	brcc	.+2      	; 0xf90 <disk_ioctl+0x96>
     f8e:	22 c1       	rjmp	.+580    	; 0x11d4 <disk_ioctl+0x2da>
     f90:	6d 30       	cpi	r22, 0x0D	; 13
     f92:	09 f4       	brne	.+2      	; 0xf96 <disk_ioctl+0x9c>
     f94:	2e c1       	rjmp	.+604    	; 0x11f2 <disk_ioctl+0x2f8>
     f96:	6e 30       	cpi	r22, 0x0E	; 14
     f98:	09 f4       	brne	.+2      	; 0xf9c <disk_ioctl+0xa2>
     f9a:	4a c1       	rjmp	.+660    	; 0x1230 <disk_ioctl+0x336>
     f9c:	94 e0       	ldi	r25, 0x04	; 4
     f9e:	64 c1       	rjmp	.+712    	; 0x1268 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     fa0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <select>
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <disk_ioctl+0xb0>
     fa8:	5e c1       	rjmp	.+700    	; 0x1266 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     faa:	80 e1       	ldi	r24, 0x10	; 16
     fac:	e0 e6       	ldi	r30, 0x60	; 96
     fae:	f6 e0       	ldi	r31, 0x06	; 6
     fb0:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	e0 ec       	ldi	r30, 0xC0	; 192
     fb6:	f9 e0       	ldi	r31, 0x09	; 9
     fb8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fba:	80 91 c2 09 	lds	r24, 0x09C2
     fbe:	87 ff       	sbrs	r24, 7
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     fc2:	80 91 c3 09 	lds	r24, 0x09C3
     fc6:	ff c0       	rjmp	.+510    	; 0x11c6 <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     fc8:	89 e4       	ldi	r24, 0x49	; 73
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
     fd6:	88 23       	and	r24, r24
     fd8:	09 f0       	breq	.+2      	; 0xfdc <disk_ioctl+0xe2>
     fda:	45 c1       	rjmp	.+650    	; 0x1266 <disk_ioctl+0x36c>
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	60 e1       	ldi	r22, 0x10	; 16
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <rcvr_datablock>
     fe8:	88 23       	and	r24, r24
     fea:	09 f4       	brne	.+2      	; 0xfee <disk_ioctl+0xf4>
     fec:	3c c1       	rjmp	.+632    	; 0x1266 <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	82 95       	swap	r24
     ff2:	86 95       	lsr	r24
     ff4:	86 95       	lsr	r24
     ff6:	83 70       	andi	r24, 0x03	; 3
     ff8:	7a 85       	ldd	r23, Y+10	; 0x0a
     ffa:	49 85       	ldd	r20, Y+9	; 0x09
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	89 f4       	brne	.+34     	; 0x1022 <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    1000:	87 2f       	mov	r24, r23
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	34 2f       	mov	r19, r20
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	a0 e0       	ldi	r26, 0x00	; 0
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	2a e0       	ldi	r18, 0x0A	; 10
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	aa 1f       	adc	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	2a 95       	dec	r18
    101e:	d1 f7       	brne	.-12     	; 0x1014 <disk_ioctl+0x11a>
    1020:	cd c0       	rjmp	.+410    	; 0x11bc <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1022:	42 95       	swap	r20
    1024:	46 95       	lsr	r20
    1026:	46 95       	lsr	r20
    1028:	43 70       	andi	r20, 0x03	; 3
    102a:	28 85       	ldd	r18, Y+8	; 0x08
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	24 0f       	add	r18, r20
    1038:	31 1d       	adc	r19, r1
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	8f 81       	ldd	r24, Y+7	; 0x07
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	83 70       	andi	r24, 0x03	; 3
    1044:	90 70       	andi	r25, 0x00	; 0
    1046:	98 2f       	mov	r25, r24
    1048:	88 27       	eor	r24, r24
    104a:	99 0f       	add	r25, r25
    104c:	99 0f       	add	r25, r25
    104e:	28 0f       	add	r18, r24
    1050:	39 1f       	adc	r19, r25
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	8f 70       	andi	r24, 0x0F	; 15
    105a:	6b 85       	ldd	r22, Y+11	; 0x0b
    105c:	66 1f       	adc	r22, r22
    105e:	66 27       	eor	r22, r22
    1060:	66 1f       	adc	r22, r22
    1062:	86 0f       	add	r24, r22
    1064:	8e 5f       	subi	r24, 0xFE	; 254
    1066:	73 70       	andi	r23, 0x03	; 3
    1068:	77 0f       	add	r23, r23
    106a:	87 0f       	add	r24, r23
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	09 97       	sbiw	r24, 0x09	; 9
    1070:	04 c0       	rjmp	.+8      	; 0x107a <disk_ioctl+0x180>
    1072:	22 0f       	add	r18, r18
    1074:	33 1f       	adc	r19, r19
    1076:	44 1f       	adc	r20, r20
    1078:	55 1f       	adc	r21, r21
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <disk_ioctl+0x178>
    107e:	f8 01       	movw	r30, r16
    1080:	20 83       	st	Z, r18
    1082:	31 83       	std	Z+1, r19	; 0x01
    1084:	42 83       	std	Z+2, r20	; 0x02
    1086:	53 83       	std	Z+3, r21	; 0x03
    1088:	9e c0       	rjmp	.+316    	; 0x11c6 <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	fa 01       	movw	r30, r20
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	98 c0       	rjmp	.+304    	; 0x11c6 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    1096:	80 91 4e 33 	lds	r24, 0x334E
    109a:	f8 2e       	mov	r15, r24
    109c:	82 ff       	sbrs	r24, 2
    109e:	39 c0       	rjmp	.+114    	; 0x1112 <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    10a0:	8d ec       	ldi	r24, 0xCD	; 205
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
    10ae:	88 23       	and	r24, r24
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <disk_ioctl+0x1ba>
    10b2:	d9 c0       	rjmp	.+434    	; 0x1266 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	e0 ec       	ldi	r30, 0xC0	; 192
    10b8:	f9 e0       	ldi	r31, 0x09	; 9
    10ba:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10bc:	80 91 c2 09 	lds	r24, 0x09C2
    10c0:	87 ff       	sbrs	r24, 7
    10c2:	fc cf       	rjmp	.-8      	; 0x10bc <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    10c4:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	60 e1       	ldi	r22, 0x10	; 16
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <rcvr_datablock>
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <disk_ioctl+0x1e0>
    10d8:	c6 c0       	rjmp	.+396    	; 0x1266 <disk_ioctl+0x36c>
    10da:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10dc:	e0 ec       	ldi	r30, 0xC0	; 192
    10de:	f9 e0       	ldi	r31, 0x09	; 9
    10e0:	2f ef       	ldi	r18, 0xFF	; 255
    10e2:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10e4:	80 91 c2 09 	lds	r24, 0x09C2
    10e8:	87 ff       	sbrs	r24, 7
    10ea:	fc cf       	rjmp	.-8      	; 0x10e4 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    10ec:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	b9 f7       	brne	.-18     	; 0x10e2 <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    10f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    10f6:	22 95       	swap	r18
    10f8:	2f 70       	andi	r18, 0x0F	; 15
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <disk_ioctl+0x212>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	2a 95       	dec	r18
    110e:	d2 f7       	brpl	.-12     	; 0x1104 <disk_ioctl+0x20a>
    1110:	55 c0       	rjmp	.+170    	; 0x11bc <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1112:	89 e4       	ldi	r24, 0x49	; 73
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
    1120:	88 23       	and	r24, r24
    1122:	09 f0       	breq	.+2      	; 0x1126 <disk_ioctl+0x22c>
    1124:	a0 c0       	rjmp	.+320    	; 0x1266 <disk_ioctl+0x36c>
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	60 e1       	ldi	r22, 0x10	; 16
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <rcvr_datablock>
    1132:	88 23       	and	r24, r24
    1134:	09 f4       	brne	.+2      	; 0x1138 <disk_ioctl+0x23e>
    1136:	97 c0       	rjmp	.+302    	; 0x1266 <disk_ioctl+0x36c>
    1138:	4b 85       	ldd	r20, Y+11	; 0x0b
    113a:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    113c:	f1 fe       	sbrs	r15, 1
    113e:	1b c0       	rjmp	.+54     	; 0x1176 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1140:	88 1f       	adc	r24, r24
    1142:	88 27       	eor	r24, r24
    1144:	88 1f       	adc	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	24 2f       	mov	r18, r20
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	2f 73       	andi	r18, 0x3F	; 63
    1150:	30 70       	andi	r19, 0x00	; 0
    1152:	22 0f       	add	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	82 0f       	add	r24, r18
    1158:	93 1f       	adc	r25, r19
    115a:	2e 85       	ldd	r18, Y+14	; 0x0e
    115c:	22 95       	swap	r18
    115e:	26 95       	lsr	r18
    1160:	26 95       	lsr	r18
    1162:	23 70       	andi	r18, 0x03	; 3
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	21 50       	subi	r18, 0x01	; 1
    1168:	30 40       	sbci	r19, 0x00	; 0
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <disk_ioctl+0x276>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	2a 95       	dec	r18
    1172:	e2 f7       	brpl	.-8      	; 0x116c <disk_ioctl+0x272>
    1174:	21 c0       	rjmp	.+66     	; 0x11b8 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	23 70       	andi	r18, 0x03	; 3
    117c:	30 70       	andi	r19, 0x00	; 0
    117e:	f3 e0       	ldi	r31, 0x03	; 3
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	fa 95       	dec	r31
    1186:	e1 f7       	brne	.-8      	; 0x1180 <disk_ioctl+0x286>
    1188:	82 95       	swap	r24
    118a:	86 95       	lsr	r24
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	28 0f       	add	r18, r24
    1190:	31 1d       	adc	r19, r1
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	84 2f       	mov	r24, r20
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	8c 77       	andi	r24, 0x7C	; 124
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	ac 01       	movw	r20, r24
    11aa:	24 9f       	mul	r18, r20
    11ac:	c0 01       	movw	r24, r0
    11ae:	25 9f       	mul	r18, r21
    11b0:	90 0d       	add	r25, r0
    11b2:	34 9f       	mul	r19, r20
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	f8 01       	movw	r30, r16
    11be:	80 83       	st	Z, r24
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    11c4:	b3 83       	std	Z+3, r27	; 0x03
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	4f c0       	rjmp	.+158    	; 0x1268 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    11ca:	80 91 4e 33 	lds	r24, 0x334E
    11ce:	fa 01       	movw	r30, r20
    11d0:	80 83       	st	Z, r24
    11d2:	f9 cf       	rjmp	.-14     	; 0x11c6 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    11d4:	89 e4       	ldi	r24, 0x49	; 73
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    11d8:	8a e4       	ldi	r24, 0x4A	; 74
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
    11e6:	88 23       	and	r24, r24
    11e8:	f1 f5       	brne	.+124    	; 0x1266 <disk_ioctl+0x36c>
    11ea:	c8 01       	movw	r24, r16
    11ec:	60 e1       	ldi	r22, 0x10	; 16
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	35 c0       	rjmp	.+106    	; 0x125c <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    11f2:	8a e7       	ldi	r24, 0x7A	; 122
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
    1200:	88 23       	and	r24, r24
    1202:	89 f5       	brne	.+98     	; 0x1266 <disk_ioctl+0x36c>
    1204:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1206:	a0 ec       	ldi	r26, 0xC0	; 192
    1208:	b9 e0       	ldi	r27, 0x09	; 9
    120a:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    120c:	98 01       	movw	r18, r16
    120e:	2d 5f       	subi	r18, 0xFD	; 253
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1212:	13 96       	adiw	r26, 0x03	; 3
    1214:	9c 93       	st	X, r25
    1216:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1218:	80 91 c2 09 	lds	r24, 0x09C2
    121c:	87 ff       	sbrs	r24, 7
    121e:	fc cf       	rjmp	.-8      	; 0x1218 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1220:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1224:	80 83       	st	Z, r24
    1226:	e2 17       	cp	r30, r18
    1228:	f3 07       	cpc	r31, r19
    122a:	69 f2       	breq	.-102    	; 0x11c6 <disk_ioctl+0x2cc>
    122c:	31 96       	adiw	r30, 0x01	; 1
    122e:	f1 cf       	rjmp	.-30     	; 0x1212 <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1230:	8d ec       	ldi	r24, 0xCD	; 205
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_cmd>
    123e:	88 23       	and	r24, r24
    1240:	91 f4       	brne	.+36     	; 0x1266 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	e0 ec       	ldi	r30, 0xC0	; 192
    1246:	f9 e0       	ldi	r31, 0x09	; 9
    1248:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    124a:	80 91 c2 09 	lds	r24, 0x09C2
    124e:	87 ff       	sbrs	r24, 7
    1250:	fc cf       	rjmp	.-8      	; 0x124a <disk_ioctl+0x350>
	return SD_SPI.DATA;
    1252:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    1256:	c8 01       	movw	r24, r16
    1258:	60 e4       	ldi	r22, 0x40	; 64
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <rcvr_datablock>
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <disk_ioctl+0x36e>
    1266:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    1268:	80 e1       	ldi	r24, 0x10	; 16
    126a:	e0 e6       	ldi	r30, 0x60	; 96
    126c:	f6 e0       	ldi	r31, 0x06	; 6
    126e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	e0 ec       	ldi	r30, 0xC0	; 192
    1274:	f9 e0       	ldi	r31, 0x09	; 9
    1276:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1278:	80 91 c2 09 	lds	r24, 0x09C2
    127c:	87 ff       	sbrs	r24, 7
    127e:	fc cf       	rjmp	.-8      	; 0x1278 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    1280:	80 91 c3 09 	lds	r24, 0x09C3
    1284:	03 c0       	rjmp	.+6      	; 0x128c <disk_ioctl+0x392>
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	01 c0       	rjmp	.+2      	; 0x128c <disk_ioctl+0x392>
    128a:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    128c:	89 2f       	mov	r24, r25
    128e:	60 96       	adiw	r28, 0x10	; 16
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	08 95       	ret

000012a0 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    12a0:	80 91 4c 33 	lds	r24, 0x334C
    if (n) Timer1 = --n;
    12a4:	88 23       	and	r24, r24
    12a6:	19 f0       	breq	.+6      	; 0x12ae <disk_timerproc+0xe>
    12a8:	81 50       	subi	r24, 0x01	; 1
    12aa:	80 93 4c 33 	sts	0x334C, r24
    n = Timer2;
    12ae:	80 91 4d 33 	lds	r24, 0x334D
    if (n) Timer2 = --n;
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <disk_timerproc+0x1c>
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	80 93 4d 33 	sts	0x334D, r24

	s = Stat;
    12bc:	80 91 77 32 	lds	r24, 0x3277

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    12c0:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    12c2:	80 93 77 32 	sts	0x3277, r24
}
    12c6:	08 95       	ret

000012c8 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret

000012d2 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    12d2:	6f 92       	push	r6
    12d4:	7f 92       	push	r7
    12d6:	8f 92       	push	r8
    12d8:	9f 92       	push	r9
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	4a 01       	movw	r8, r20
    12f2:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    12f4:	ca a4       	ldd	r12, Y+42	; 0x2a
    12f6:	db a4       	ldd	r13, Y+43	; 0x2b
    12f8:	ec a4       	ldd	r14, Y+44	; 0x2c
    12fa:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    12fc:	c4 16       	cp	r12, r20
    12fe:	d5 06       	cpc	r13, r21
    1300:	e6 06       	cpc	r14, r22
    1302:	f7 06       	cpc	r15, r23
    1304:	09 f4       	brne	.+2      	; 0x1308 <move_window+0x36>
    1306:	4e c0       	rjmp	.+156    	; 0x13a4 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	88 23       	and	r24, r24
    130c:	a1 f1       	breq	.+104    	; 0x1376 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    130e:	3e e2       	ldi	r19, 0x2E	; 46
    1310:	63 2e       	mov	r6, r19
    1312:	71 2c       	mov	r7, r1
    1314:	6c 0e       	add	r6, r28
    1316:	7d 1e       	adc	r7, r29
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	b3 01       	movw	r22, r6
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	01 e0       	ldi	r16, 0x01	; 1
    1322:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    1326:	88 23       	and	r24, r24
    1328:	d9 f5       	brne	.+118    	; 0x13a0 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    132a:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    132c:	8e 89       	ldd	r24, Y+22	; 0x16
    132e:	9f 89       	ldd	r25, Y+23	; 0x17
    1330:	a8 8d       	ldd	r26, Y+24	; 0x18
    1332:	b9 8d       	ldd	r27, Y+25	; 0x19
    1334:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1336:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1338:	48 a1       	ldd	r20, Y+32	; 0x20
    133a:	59 a1       	ldd	r21, Y+33	; 0x21
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	a4 1f       	adc	r26, r20
    1342:	b5 1f       	adc	r27, r21
    1344:	c8 16       	cp	r12, r24
    1346:	d9 06       	cpc	r13, r25
    1348:	ea 06       	cpc	r14, r26
    134a:	fb 06       	cpc	r15, r27
    134c:	a0 f4       	brcc	.+40     	; 0x1376 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    134e:	1b 81       	ldd	r17, Y+3	; 0x03
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <move_window+0xa0>
					wsect += fs->sects_fat;
    1352:	8e 89       	ldd	r24, Y+22	; 0x16
    1354:	9f 89       	ldd	r25, Y+23	; 0x17
    1356:	a8 8d       	ldd	r26, Y+24	; 0x18
    1358:	b9 8d       	ldd	r27, Y+25	; 0x19
    135a:	c8 0e       	add	r12, r24
    135c:	d9 1e       	adc	r13, r25
    135e:	ea 1e       	adc	r14, r26
    1360:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	b3 01       	movw	r22, r6
    1366:	a7 01       	movw	r20, r14
    1368:	96 01       	movw	r18, r12
    136a:	01 e0       	ldi	r16, 0x01	; 1
    136c:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1370:	11 50       	subi	r17, 0x01	; 1
    1372:	12 30       	cpi	r17, 0x02	; 2
    1374:	70 f7       	brcc	.-36     	; 0x1352 <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1376:	81 14       	cp	r8, r1
    1378:	91 04       	cpc	r9, r1
    137a:	a1 04       	cpc	r10, r1
    137c:	b1 04       	cpc	r11, r1
    137e:	91 f0       	breq	.+36     	; 0x13a4 <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    1380:	be 01       	movw	r22, r28
    1382:	62 5d       	subi	r22, 0xD2	; 210
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	a5 01       	movw	r20, r10
    138a:	94 01       	movw	r18, r8
    138c:	01 e0       	ldi	r16, 0x01	; 1
    138e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    1392:	88 23       	and	r24, r24
    1394:	29 f4       	brne	.+10     	; 0x13a0 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1396:	8a a6       	std	Y+42, r8	; 0x2a
    1398:	9b a6       	std	Y+43, r9	; 0x2b
    139a:	ac a6       	std	Y+44, r10	; 0x2c
    139c:	bd a6       	std	Y+45, r11	; 0x2d
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <move_window+0xd4>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <move_window+0xd4>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	7f 90       	pop	r7
    13c0:	6f 90       	pop	r6
    13c2:	08 95       	ret

000013c4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    13c4:	0f 93       	push	r16
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
	if (res == FR_OK) {
    13d8:	88 23       	and	r24, r24
    13da:	09 f0       	breq	.+2      	; 0x13de <sync+0x1a>
    13dc:	7e c0       	rjmp	.+252    	; 0x14da <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    13de:	88 81       	ld	r24, Y
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <sync+0x22>
    13e4:	72 c0       	rjmp	.+228    	; 0x14ca <sync+0x106>
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	88 23       	and	r24, r24
    13ea:	09 f4       	brne	.+2      	; 0x13ee <sync+0x2a>
    13ec:	6e c0       	rjmp	.+220    	; 0x14ca <sync+0x106>
			fs->winsect = 0;
    13ee:	1a a6       	std	Y+42, r1	; 0x2a
    13f0:	1b a6       	std	Y+43, r1	; 0x2b
    13f2:	1c a6       	std	Y+44, r1	; 0x2c
    13f4:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    13f6:	be 01       	movw	r22, r28
    13f8:	62 5d       	subi	r22, 0xD2	; 210
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	fb 01       	movw	r30, r22
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    1404:	11 92       	st	Z+, r1
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	2f ef       	ldi	r18, 0xFF	; 255
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	92 07       	cpc	r25, r18
    140e:	d1 f7       	brne	.-12     	; 0x1404 <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1410:	c4 5d       	subi	r28, 0xD4	; 212
    1412:	dd 4f       	sbci	r29, 0xFD	; 253
    1414:	85 e5       	ldi	r24, 0x55	; 85
    1416:	89 93       	st	Y+, r24
    1418:	8a ea       	ldi	r24, 0xAA	; 170
    141a:	88 83       	st	Y, r24
    141c:	cd 52       	subi	r28, 0x2D	; 45
    141e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1420:	82 e5       	ldi	r24, 0x52	; 82
    1422:	8e a7       	std	Y+46, r24	; 0x2e
    1424:	8f a7       	std	Y+47, r24	; 0x2f
    1426:	21 e6       	ldi	r18, 0x61	; 97
    1428:	28 ab       	std	Y+48, r18	; 0x30
    142a:	91 e4       	ldi	r25, 0x41	; 65
    142c:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    142e:	ce 5e       	subi	r28, 0xEE	; 238
    1430:	dd 4f       	sbci	r29, 0xFD	; 253
    1432:	82 e7       	ldi	r24, 0x72	; 114
    1434:	89 93       	st	Y+, r24
    1436:	89 93       	st	Y+, r24
    1438:	99 93       	st	Y+, r25
    143a:	28 83       	st	Y, r18
    143c:	c5 51       	subi	r28, 0x15	; 21
    143e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1440:	8e 85       	ldd	r24, Y+14	; 0x0e
    1442:	ca 5e       	subi	r28, 0xEA	; 234
    1444:	dd 4f       	sbci	r29, 0xFD	; 253
    1446:	88 83       	st	Y, r24
    1448:	c6 51       	subi	r28, 0x16	; 22
    144a:	d2 40       	sbci	r29, 0x02	; 2
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	c9 5e       	subi	r28, 0xE9	; 233
    1450:	dd 4f       	sbci	r29, 0xFD	; 253
    1452:	88 83       	st	Y, r24
    1454:	c7 51       	subi	r28, 0x17	; 23
    1456:	d2 40       	sbci	r29, 0x02	; 2
    1458:	8e 85       	ldd	r24, Y+14	; 0x0e
    145a:	9f 85       	ldd	r25, Y+15	; 0x0f
    145c:	a8 89       	ldd	r26, Y+16	; 0x10
    145e:	b9 89       	ldd	r27, Y+17	; 0x11
    1460:	9d 01       	movw	r18, r26
    1462:	44 27       	eor	r20, r20
    1464:	55 27       	eor	r21, r21
    1466:	c8 5e       	subi	r28, 0xE8	; 232
    1468:	dd 4f       	sbci	r29, 0xFD	; 253
    146a:	28 83       	st	Y, r18
    146c:	21 96       	adiw	r28, 0x01	; 1
    146e:	8b 2f       	mov	r24, r27
    1470:	99 27       	eor	r25, r25
    1472:	aa 27       	eor	r26, r26
    1474:	bb 27       	eor	r27, r27
    1476:	88 83       	st	Y, r24
    1478:	c9 51       	subi	r28, 0x19	; 25
    147a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    147c:	8a 85       	ldd	r24, Y+10	; 0x0a
    147e:	c6 5e       	subi	r28, 0xE6	; 230
    1480:	dd 4f       	sbci	r29, 0xFD	; 253
    1482:	88 83       	st	Y, r24
    1484:	ca 51       	subi	r28, 0x1A	; 26
    1486:	d2 40       	sbci	r29, 0x02	; 2
    1488:	8b 85       	ldd	r24, Y+11	; 0x0b
    148a:	c5 5e       	subi	r28, 0xE5	; 229
    148c:	dd 4f       	sbci	r29, 0xFD	; 253
    148e:	88 83       	st	Y, r24
    1490:	cb 51       	subi	r28, 0x1B	; 27
    1492:	d2 40       	sbci	r29, 0x02	; 2
    1494:	8a 85       	ldd	r24, Y+10	; 0x0a
    1496:	9b 85       	ldd	r25, Y+11	; 0x0b
    1498:	ac 85       	ldd	r26, Y+12	; 0x0c
    149a:	bd 85       	ldd	r27, Y+13	; 0x0d
    149c:	9d 01       	movw	r18, r26
    149e:	44 27       	eor	r20, r20
    14a0:	55 27       	eor	r21, r21
    14a2:	c4 5e       	subi	r28, 0xE4	; 228
    14a4:	dd 4f       	sbci	r29, 0xFD	; 253
    14a6:	28 83       	st	Y, r18
    14a8:	21 96       	adiw	r28, 0x01	; 1
    14aa:	8b 2f       	mov	r24, r27
    14ac:	99 27       	eor	r25, r25
    14ae:	aa 27       	eor	r26, r26
    14b0:	bb 27       	eor	r27, r27
    14b2:	88 83       	st	Y, r24
    14b4:	cd 51       	subi	r28, 0x1D	; 29
    14b6:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    14b8:	2a 89       	ldd	r18, Y+18	; 0x12
    14ba:	3b 89       	ldd	r19, Y+19	; 0x13
    14bc:	4c 89       	ldd	r20, Y+20	; 0x14
    14be:	5d 89       	ldd	r21, Y+21	; 0x15
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	01 e0       	ldi	r16, 0x01	; 1
    14c4:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
			fs->fsi_flag = 0;
    14c8:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	0e 94 7d 07 	call	0xefa	; 0xefa <disk_ioctl>
    14d6:	81 11       	cpse	r24, r1
    14d8:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    14e2:	7f 92       	push	r7
    14e4:	8f 92       	push	r8
    14e6:	9f 92       	push	r9
    14e8:	af 92       	push	r10
    14ea:	bf 92       	push	r11
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	4c 01       	movw	r8, r24
    14fe:	7a 01       	movw	r14, r20
    1500:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    1502:	42 30       	cpi	r20, 0x02	; 2
    1504:	51 05       	cpc	r21, r1
    1506:	61 05       	cpc	r22, r1
    1508:	71 05       	cpc	r23, r1
    150a:	08 f4       	brcc	.+2      	; 0x150e <get_fat+0x2c>
    150c:	bb c0       	rjmp	.+374    	; 0x1684 <get_fat+0x1a2>
    150e:	f4 01       	movw	r30, r8
    1510:	82 8d       	ldd	r24, Z+26	; 0x1a
    1512:	93 8d       	ldd	r25, Z+27	; 0x1b
    1514:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1516:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1518:	48 17       	cp	r20, r24
    151a:	59 07       	cpc	r21, r25
    151c:	6a 07       	cpc	r22, r26
    151e:	7b 07       	cpc	r23, r27
    1520:	08 f0       	brcs	.+2      	; 0x1524 <get_fat+0x42>
    1522:	b0 c0       	rjmp	.+352    	; 0x1684 <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    1524:	a6 8c       	ldd	r10, Z+30	; 0x1e
    1526:	b7 8c       	ldd	r11, Z+31	; 0x1f
    1528:	c0 a0       	ldd	r12, Z+32	; 0x20
    152a:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    152c:	80 81       	ld	r24, Z
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	09 f4       	brne	.+2      	; 0x1534 <get_fat+0x52>
    1532:	4d c0       	rjmp	.+154    	; 0x15ce <get_fat+0xec>
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	09 f4       	brne	.+2      	; 0x153a <get_fat+0x58>
    1538:	68 c0       	rjmp	.+208    	; 0x160a <get_fat+0x128>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	09 f0       	breq	.+2      	; 0x1540 <get_fat+0x5e>
    153e:	a7 c0       	rjmp	.+334    	; 0x168e <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    1540:	ea 01       	movw	r28, r20
    1542:	d6 95       	lsr	r29
    1544:	c7 95       	ror	r28
    1546:	c4 0f       	add	r28, r20
    1548:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    154a:	ae 01       	movw	r20, r28
    154c:	45 2f       	mov	r20, r21
    154e:	55 27       	eor	r21, r21
    1550:	46 95       	lsr	r20
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	4a 0d       	add	r20, r10
    1558:	5b 1d       	adc	r21, r11
    155a:	6c 1d       	adc	r22, r12
    155c:	7d 1d       	adc	r23, r13
    155e:	c4 01       	movw	r24, r8
    1560:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <get_fat+0x88>
    1568:	92 c0       	rjmp	.+292    	; 0x168e <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    156a:	fe 01       	movw	r30, r28
    156c:	f1 70       	andi	r31, 0x01	; 1
    156e:	e8 0d       	add	r30, r8
    1570:	f9 1d       	adc	r31, r9
    1572:	76 a4       	ldd	r7, Z+46	; 0x2e
    1574:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1576:	ae 01       	movw	r20, r28
    1578:	45 2f       	mov	r20, r21
    157a:	55 27       	eor	r21, r21
    157c:	46 95       	lsr	r20
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	4a 0d       	add	r20, r10
    1584:	5b 1d       	adc	r21, r11
    1586:	6c 1d       	adc	r22, r12
    1588:	7d 1d       	adc	r23, r13
    158a:	c4 01       	movw	r24, r8
    158c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    1590:	88 23       	and	r24, r24
    1592:	09 f0       	breq	.+2      	; 0x1596 <get_fat+0xb4>
    1594:	7c c0       	rjmp	.+248    	; 0x168e <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1596:	67 2d       	mov	r22, r7
    1598:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    159a:	d1 70       	andi	r29, 0x01	; 1
    159c:	c8 0d       	add	r28, r8
    159e:	d9 1d       	adc	r29, r9
    15a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	68 2b       	or	r22, r24
    15a6:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    15a8:	c7 01       	movw	r24, r14
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	89 2b       	or	r24, r25
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <get_fat+0xde>
    15b2:	44 e0       	ldi	r20, 0x04	; 4
    15b4:	76 95       	lsr	r23
    15b6:	67 95       	ror	r22
    15b8:	4a 95       	dec	r20
    15ba:	e1 f7       	brne	.-8      	; 0x15b4 <get_fat+0xd2>
    15bc:	9b 01       	movw	r18, r22
    15be:	22 c0       	rjmp	.+68     	; 0x1604 <get_fat+0x122>
    15c0:	9b 01       	movw	r18, r22
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	3f 70       	andi	r19, 0x0F	; 15
    15c8:	40 70       	andi	r20, 0x00	; 0
    15ca:	50 70       	andi	r21, 0x00	; 0
    15cc:	64 c0       	rjmp	.+200    	; 0x1696 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    15ce:	45 2f       	mov	r20, r21
    15d0:	56 2f       	mov	r21, r22
    15d2:	67 2f       	mov	r22, r23
    15d4:	77 27       	eor	r23, r23
    15d6:	4a 0d       	add	r20, r10
    15d8:	5b 1d       	adc	r21, r11
    15da:	6c 1d       	adc	r22, r12
    15dc:	7d 1d       	adc	r23, r13
    15de:	c4 01       	movw	r24, r8
    15e0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    15e4:	88 23       	and	r24, r24
    15e6:	09 f0       	breq	.+2      	; 0x15ea <get_fat+0x108>
    15e8:	52 c0       	rjmp	.+164    	; 0x168e <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    15ea:	f7 01       	movw	r30, r14
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	f1 70       	andi	r31, 0x01	; 1
    15f2:	e8 0d       	add	r30, r8
    15f4:	f9 1d       	adc	r31, r9
    15f6:	97 a5       	ldd	r25, Z+47	; 0x2f
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	26 a5       	ldd	r18, Z+46	; 0x2e
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	82 2b       	or	r24, r18
    1600:	93 2b       	or	r25, r19
    1602:	9c 01       	movw	r18, r24
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	46 c0       	rjmp	.+140    	; 0x1696 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    160a:	97 e0       	ldi	r25, 0x07	; 7
    160c:	76 95       	lsr	r23
    160e:	67 95       	ror	r22
    1610:	57 95       	ror	r21
    1612:	47 95       	ror	r20
    1614:	9a 95       	dec	r25
    1616:	d1 f7       	brne	.-12     	; 0x160c <get_fat+0x12a>
    1618:	4a 0d       	add	r20, r10
    161a:	5b 1d       	adc	r21, r11
    161c:	6c 1d       	adc	r22, r12
    161e:	7d 1d       	adc	r23, r13
    1620:	c4 01       	movw	r24, r8
    1622:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    1626:	88 23       	and	r24, r24
    1628:	91 f5       	brne	.+100    	; 0x168e <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    162a:	f7 01       	movw	r30, r14
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	f1 70       	andi	r31, 0x01	; 1
    1636:	e8 0d       	add	r30, r8
    1638:	f9 1d       	adc	r31, r9
    163a:	81 a9       	ldd	r24, Z+49	; 0x31
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	58 2f       	mov	r21, r24
    1644:	44 27       	eor	r20, r20
    1646:	33 27       	eor	r19, r19
    1648:	22 27       	eor	r18, r18
    164a:	80 a9       	ldd	r24, Z+48	; 0x30
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	dc 01       	movw	r26, r24
    1654:	99 27       	eor	r25, r25
    1656:	88 27       	eor	r24, r24
    1658:	28 2b       	or	r18, r24
    165a:	39 2b       	or	r19, r25
    165c:	4a 2b       	or	r20, r26
    165e:	5b 2b       	or	r21, r27
    1660:	86 a5       	ldd	r24, Z+46	; 0x2e
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	28 2b       	or	r18, r24
    166a:	39 2b       	or	r19, r25
    166c:	4a 2b       	or	r20, r26
    166e:	5b 2b       	or	r21, r27
    1670:	97 a5       	ldd	r25, Z+47	; 0x2f
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	a0 e0       	ldi	r26, 0x00	; 0
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	28 2b       	or	r18, r24
    167a:	39 2b       	or	r19, r25
    167c:	4a 2b       	or	r20, r26
    167e:	5b 2b       	or	r21, r27
    1680:	5f 70       	andi	r21, 0x0F	; 15
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <get_fat+0x1b4>
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <get_fat+0x1b4>
    168e:	2f ef       	ldi	r18, 0xFF	; 255
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	4f ef       	ldi	r20, 0xFF	; 255
    1694:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    1696:	b9 01       	movw	r22, r18
    1698:	ca 01       	movw	r24, r20
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	9f 90       	pop	r9
    16b0:	8f 90       	pop	r8
    16b2:	7f 90       	pop	r7
    16b4:	08 95       	ret

000016b6 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    16b6:	2f 92       	push	r2
    16b8:	3f 92       	push	r3
    16ba:	4f 92       	push	r4
    16bc:	5f 92       	push	r5
    16be:	6f 92       	push	r6
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	3c 01       	movw	r6, r24
    16dc:	6a 01       	movw	r12, r20
    16de:	7b 01       	movw	r14, r22
    16e0:	48 01       	movw	r8, r16
    16e2:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    16e4:	42 30       	cpi	r20, 0x02	; 2
    16e6:	51 05       	cpc	r21, r1
    16e8:	61 05       	cpc	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <put_fat+0x3a>
    16ee:	ba c0       	rjmp	.+372    	; 0x1864 <put_fat+0x1ae>
    16f0:	f3 01       	movw	r30, r6
    16f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    16f4:	93 8d       	ldd	r25, Z+27	; 0x1b
    16f6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16f8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    16fa:	48 17       	cp	r20, r24
    16fc:	59 07       	cpc	r21, r25
    16fe:	6a 07       	cpc	r22, r26
    1700:	7b 07       	cpc	r23, r27
    1702:	08 f0       	brcs	.+2      	; 0x1706 <put_fat+0x50>
    1704:	af c0       	rjmp	.+350    	; 0x1864 <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    1706:	26 8c       	ldd	r2, Z+30	; 0x1e
    1708:	37 8c       	ldd	r3, Z+31	; 0x1f
    170a:	40 a0       	ldd	r4, Z+32	; 0x20
    170c:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    170e:	80 81       	ld	r24, Z
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	09 f4       	brne	.+2      	; 0x1716 <put_fat+0x60>
    1714:	64 c0       	rjmp	.+200    	; 0x17de <put_fat+0x128>
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	09 f4       	brne	.+2      	; 0x171c <put_fat+0x66>
    171a:	7a c0       	rjmp	.+244    	; 0x1810 <put_fat+0x15a>
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	11 f0       	breq	.+4      	; 0x1724 <put_fat+0x6e>
    1720:	22 e0       	ldi	r18, 0x02	; 2
    1722:	9c c0       	rjmp	.+312    	; 0x185c <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1724:	ea 01       	movw	r28, r20
    1726:	d6 95       	lsr	r29
    1728:	c7 95       	ror	r28
    172a:	c4 0f       	add	r28, r20
    172c:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    172e:	ae 01       	movw	r20, r28
    1730:	45 2f       	mov	r20, r21
    1732:	55 27       	eor	r21, r21
    1734:	46 95       	lsr	r20
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	42 0d       	add	r20, r2
    173c:	53 1d       	adc	r21, r3
    173e:	64 1d       	adc	r22, r4
    1740:	75 1d       	adc	r23, r5
    1742:	c3 01       	movw	r24, r6
    1744:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    1748:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    174a:	88 23       	and	r24, r24
    174c:	09 f0       	breq	.+2      	; 0x1750 <put_fat+0x9a>
    174e:	86 c0       	rjmp	.+268    	; 0x185c <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1750:	de 01       	movw	r26, r28
    1752:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1754:	86 01       	movw	r16, r12
    1756:	01 70       	andi	r16, 0x01	; 1
    1758:	10 70       	andi	r17, 0x00	; 0
    175a:	01 15       	cp	r16, r1
    175c:	11 05       	cpc	r17, r1
    175e:	51 f0       	breq	.+20     	; 0x1774 <put_fat+0xbe>
    1760:	f3 01       	movw	r30, r6
    1762:	ea 0f       	add	r30, r26
    1764:	fb 1f       	adc	r31, r27
    1766:	86 a5       	ldd	r24, Z+46	; 0x2e
    1768:	8f 70       	andi	r24, 0x0F	; 15
    176a:	98 2d       	mov	r25, r8
    176c:	92 95       	swap	r25
    176e:	90 7f       	andi	r25, 0xF0	; 240
    1770:	98 2b       	or	r25, r24
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <put_fat+0xc0>
    1774:	98 2d       	mov	r25, r8
    1776:	a6 0d       	add	r26, r6
    1778:	b7 1d       	adc	r27, r7
    177a:	9e 96       	adiw	r26, 0x2e	; 46
    177c:	9c 93       	st	X, r25
			bc++;
    177e:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	f3 01       	movw	r30, r6
    1784:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    1786:	ae 01       	movw	r20, r28
    1788:	45 2f       	mov	r20, r21
    178a:	55 27       	eor	r21, r21
    178c:	46 95       	lsr	r20
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	42 0d       	add	r20, r2
    1794:	53 1d       	adc	r21, r3
    1796:	64 1d       	adc	r22, r4
    1798:	75 1d       	adc	r23, r5
    179a:	c3 01       	movw	r24, r6
    179c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    17a0:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17a2:	88 23       	and	r24, r24
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <put_fat+0xf2>
    17a6:	5a c0       	rjmp	.+180    	; 0x185c <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    17a8:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    17aa:	01 2b       	or	r16, r17
    17ac:	49 f0       	breq	.+18     	; 0x17c0 <put_fat+0x10a>
    17ae:	64 e0       	ldi	r22, 0x04	; 4
    17b0:	b6 94       	lsr	r11
    17b2:	a7 94       	ror	r10
    17b4:	97 94       	ror	r9
    17b6:	87 94       	ror	r8
    17b8:	6a 95       	dec	r22
    17ba:	d1 f7       	brne	.-12     	; 0x17b0 <put_fat+0xfa>
    17bc:	48 2d       	mov	r20, r8
    17be:	0b c0       	rjmp	.+22     	; 0x17d6 <put_fat+0x120>
    17c0:	f3 01       	movw	r30, r6
    17c2:	ec 0f       	add	r30, r28
    17c4:	fd 1f       	adc	r31, r29
    17c6:	46 a5       	ldd	r20, Z+46	; 0x2e
    17c8:	40 7f       	andi	r20, 0xF0	; 240
    17ca:	bb 27       	eor	r27, r27
    17cc:	ab 2d       	mov	r26, r11
    17ce:	9a 2d       	mov	r25, r10
    17d0:	89 2d       	mov	r24, r9
    17d2:	8f 70       	andi	r24, 0x0F	; 15
    17d4:	48 2b       	or	r20, r24
    17d6:	c6 0d       	add	r28, r6
    17d8:	d7 1d       	adc	r29, r7
    17da:	4e a7       	std	Y+46, r20	; 0x2e
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    17de:	77 27       	eor	r23, r23
    17e0:	6f 2d       	mov	r22, r15
    17e2:	5e 2d       	mov	r21, r14
    17e4:	4d 2d       	mov	r20, r13
    17e6:	42 0d       	add	r20, r2
    17e8:	53 1d       	adc	r21, r3
    17ea:	64 1d       	adc	r22, r4
    17ec:	75 1d       	adc	r23, r5
    17ee:	c3 01       	movw	r24, r6
    17f0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    17f4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17f6:	88 23       	and	r24, r24
    17f8:	89 f5       	brne	.+98     	; 0x185c <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    17fa:	f6 01       	movw	r30, r12
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	f1 70       	andi	r31, 0x01	; 1
    1802:	e6 0d       	add	r30, r6
    1804:	f7 1d       	adc	r31, r7
    1806:	86 a6       	std	Z+46, r8	; 0x2e
    1808:	89 2d       	mov	r24, r9
    180a:	99 27       	eor	r25, r25
    180c:	87 a7       	std	Z+47, r24	; 0x2f
    180e:	26 c0       	rjmp	.+76     	; 0x185c <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    1810:	87 e0       	ldi	r24, 0x07	; 7
    1812:	76 95       	lsr	r23
    1814:	67 95       	ror	r22
    1816:	57 95       	ror	r21
    1818:	47 95       	ror	r20
    181a:	8a 95       	dec	r24
    181c:	d1 f7       	brne	.-12     	; 0x1812 <put_fat+0x15c>
    181e:	42 0d       	add	r20, r2
    1820:	53 1d       	adc	r21, r3
    1822:	64 1d       	adc	r22, r4
    1824:	75 1d       	adc	r23, r5
    1826:	c3 01       	movw	r24, r6
    1828:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    182c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    182e:	88 23       	and	r24, r24
    1830:	a9 f4       	brne	.+42     	; 0x185c <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    1832:	f6 01       	movw	r30, r12
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	f1 70       	andi	r31, 0x01	; 1
    183e:	e6 0d       	add	r30, r6
    1840:	f7 1d       	adc	r31, r7
    1842:	86 a6       	std	Z+46, r8	; 0x2e
    1844:	89 2d       	mov	r24, r9
    1846:	99 27       	eor	r25, r25
    1848:	87 a7       	std	Z+47, r24	; 0x2f
    184a:	c5 01       	movw	r24, r10
    184c:	aa 27       	eor	r26, r26
    184e:	bb 27       	eor	r27, r27
    1850:	80 ab       	std	Z+48, r24	; 0x30
    1852:	8b 2d       	mov	r24, r11
    1854:	99 27       	eor	r25, r25
    1856:	aa 27       	eor	r26, r26
    1858:	bb 27       	eor	r27, r27
    185a:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	f3 01       	movw	r30, r6
    1860:	84 83       	std	Z+4, r24	; 0x04
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <put_fat+0x1b0>
    1864:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1866:	82 2f       	mov	r24, r18
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	df 90       	pop	r13
    1876:	cf 90       	pop	r12
    1878:	bf 90       	pop	r11
    187a:	af 90       	pop	r10
    187c:	9f 90       	pop	r9
    187e:	8f 90       	pop	r8
    1880:	7f 90       	pop	r7
    1882:	6f 90       	pop	r6
    1884:	5f 90       	pop	r5
    1886:	4f 90       	pop	r4
    1888:	3f 90       	pop	r3
    188a:	2f 90       	pop	r2
    188c:	08 95       	ret

0000188e <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ec 01       	movw	r28, r24
    18a6:	7a 01       	movw	r14, r20
    18a8:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    18aa:	42 30       	cpi	r20, 0x02	; 2
    18ac:	51 05       	cpc	r21, r1
    18ae:	61 05       	cpc	r22, r1
    18b0:	71 05       	cpc	r23, r1
    18b2:	08 f4       	brcc	.+2      	; 0x18b6 <remove_chain+0x28>
    18b4:	58 c0       	rjmp	.+176    	; 0x1966 <remove_chain+0xd8>
    18b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ba:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18bc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18be:	48 17       	cp	r20, r24
    18c0:	59 07       	cpc	r21, r25
    18c2:	6a 07       	cpc	r22, r26
    18c4:	7b 07       	cpc	r23, r27
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <remove_chain+0x3c>
    18c8:	41 c0       	rjmp	.+130    	; 0x194c <remove_chain+0xbe>
    18ca:	4d c0       	rjmp	.+154    	; 0x1966 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    18cc:	ce 01       	movw	r24, r28
    18ce:	b8 01       	movw	r22, r16
    18d0:	a7 01       	movw	r20, r14
    18d2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    18d6:	5b 01       	movw	r10, r22
    18d8:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    18da:	61 15       	cp	r22, r1
    18dc:	71 05       	cpc	r23, r1
    18de:	81 05       	cpc	r24, r1
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <remove_chain+0x58>
    18e4:	42 c0       	rjmp	.+132    	; 0x196a <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	a8 16       	cp	r10, r24
    18ea:	b1 04       	cpc	r11, r1
    18ec:	c1 04       	cpc	r12, r1
    18ee:	d1 04       	cpc	r13, r1
    18f0:	d1 f1       	breq	.+116    	; 0x1966 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    18f2:	2f ef       	ldi	r18, 0xFF	; 255
    18f4:	a2 16       	cp	r10, r18
    18f6:	2f ef       	ldi	r18, 0xFF	; 255
    18f8:	b2 06       	cpc	r11, r18
    18fa:	2f ef       	ldi	r18, 0xFF	; 255
    18fc:	c2 06       	cpc	r12, r18
    18fe:	2f ef       	ldi	r18, 0xFF	; 255
    1900:	d2 06       	cpc	r13, r18
    1902:	11 f4       	brne	.+4      	; 0x1908 <remove_chain+0x7a>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	32 c0       	rjmp	.+100    	; 0x196c <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1908:	ce 01       	movw	r24, r28
    190a:	b8 01       	movw	r22, r16
    190c:	a7 01       	movw	r20, r14
    190e:	00 e0       	ldi	r16, 0x00	; 0
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <put_fat>
			if (res != FR_OK) break;
    191a:	88 23       	and	r24, r24
    191c:	39 f5       	brne	.+78     	; 0x196c <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    191e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1920:	9f 85       	ldd	r25, Y+15	; 0x0f
    1922:	a8 89       	ldd	r26, Y+16	; 0x10
    1924:	b9 89       	ldd	r27, Y+17	; 0x11
    1926:	8f 3f       	cpi	r24, 0xFF	; 255
    1928:	2f ef       	ldi	r18, 0xFF	; 255
    192a:	92 07       	cpc	r25, r18
    192c:	2f ef       	ldi	r18, 0xFF	; 255
    192e:	a2 07       	cpc	r26, r18
    1930:	2f ef       	ldi	r18, 0xFF	; 255
    1932:	b2 07       	cpc	r27, r18
    1934:	41 f0       	breq	.+16     	; 0x1946 <remove_chain+0xb8>
				fs->free_clust++;
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	a1 1d       	adc	r26, r1
    193a:	b1 1d       	adc	r27, r1
    193c:	8e 87       	std	Y+14, r24	; 0x0e
    193e:	9f 87       	std	Y+15, r25	; 0x0f
    1940:	a8 8b       	std	Y+16, r26	; 0x10
    1942:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1944:	9d 82       	std	Y+5, r9	; 0x05
    1946:	86 01       	movw	r16, r12
    1948:	75 01       	movw	r14, r10
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <remove_chain+0xc2>
    194c:	99 24       	eor	r9, r9
    194e:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1950:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1952:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1954:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1956:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1958:	e8 16       	cp	r14, r24
    195a:	f9 06       	cpc	r15, r25
    195c:	0a 07       	cpc	r16, r26
    195e:	1b 07       	cpc	r17, r27
    1960:	08 f4       	brcc	.+2      	; 0x1964 <remove_chain+0xd6>
    1962:	b4 cf       	rjmp	.-152    	; 0x18cc <remove_chain+0x3e>
    1964:	02 c0       	rjmp	.+4      	; 0x196a <remove_chain+0xdc>
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	01 c0       	rjmp	.+2      	; 0x196c <remove_chain+0xde>
    196a:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	08 95       	ret

00001984 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1984:	2f 92       	push	r2
    1986:	3f 92       	push	r3
    1988:	4f 92       	push	r4
    198a:	5f 92       	push	r5
    198c:	6f 92       	push	r6
    198e:	7f 92       	push	r7
    1990:	8f 92       	push	r8
    1992:	9f 92       	push	r9
    1994:	af 92       	push	r10
    1996:	bf 92       	push	r11
    1998:	cf 92       	push	r12
    199a:	df 92       	push	r13
    199c:	ef 92       	push	r14
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <create_chain+0x26>
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	1c 01       	movw	r2, r24
    19b2:	2a 01       	movw	r4, r20
    19b4:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    19b6:	dc 01       	movw	r26, r24
    19b8:	5a 96       	adiw	r26, 0x1a	; 26
    19ba:	8d 91       	ld	r24, X+
    19bc:	9d 91       	ld	r25, X+
    19be:	0d 90       	ld	r0, X+
    19c0:	bc 91       	ld	r27, X
    19c2:	a0 2d       	mov	r26, r0
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	ab 83       	std	Y+3, r26	; 0x03
    19ca:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    19cc:	41 15       	cp	r20, r1
    19ce:	51 05       	cpc	r21, r1
    19d0:	61 05       	cpc	r22, r1
    19d2:	71 05       	cpc	r23, r1
    19d4:	81 f4       	brne	.+32     	; 0x19f6 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    19d6:	f1 01       	movw	r30, r2
    19d8:	82 84       	ldd	r8, Z+10	; 0x0a
    19da:	93 84       	ldd	r9, Z+11	; 0x0b
    19dc:	a4 84       	ldd	r10, Z+12	; 0x0c
    19de:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    19e0:	81 14       	cp	r8, r1
    19e2:	91 04       	cpc	r9, r1
    19e4:	a1 04       	cpc	r10, r1
    19e6:	b1 04       	cpc	r11, r1
    19e8:	11 f1       	breq	.+68     	; 0x1a2e <create_chain+0xaa>
    19ea:	88 16       	cp	r8, r24
    19ec:	99 06       	cpc	r9, r25
    19ee:	aa 06       	cpc	r10, r26
    19f0:	bb 06       	cpc	r11, r27
    19f2:	e8 f4       	brcc	.+58     	; 0x1a2e <create_chain+0xaa>
    19f4:	21 c0       	rjmp	.+66     	; 0x1a38 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    19f6:	c1 01       	movw	r24, r2
    19f8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1a00:	62 30       	cpi	r22, 0x02	; 2
    1a02:	71 05       	cpc	r23, r1
    1a04:	81 05       	cpc	r24, r1
    1a06:	91 05       	cpc	r25, r1
    1a08:	28 f4       	brcc	.+10     	; 0x1a14 <create_chain+0x90>
    1a0a:	21 e0       	ldi	r18, 0x01	; 1
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	93 c0       	rjmp	.+294    	; 0x1b3a <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	ab 81       	ldd	r26, Y+3	; 0x03
    1a1a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	4a 07       	cpc	r20, r26
    1a22:	5b 07       	cpc	r21, r27
    1a24:	08 f4       	brcc	.+2      	; 0x1a28 <create_chain+0xa4>
    1a26:	89 c0       	rjmp	.+274    	; 0x1b3a <create_chain+0x1b6>
    1a28:	53 01       	movw	r10, r6
    1a2a:	42 01       	movw	r8, r4
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <create_chain+0xb4>
    1a2e:	b1 e0       	ldi	r27, 0x01	; 1
    1a30:	8b 2e       	mov	r8, r27
    1a32:	91 2c       	mov	r9, r1
    1a34:	a1 2c       	mov	r10, r1
    1a36:	b1 2c       	mov	r11, r1
    1a38:	75 01       	movw	r14, r10
    1a3a:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1a3c:	08 94       	sec
    1a3e:	c1 1c       	adc	r12, r1
    1a40:	d1 1c       	adc	r13, r1
    1a42:	e1 1c       	adc	r14, r1
    1a44:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a4e:	c8 16       	cp	r12, r24
    1a50:	d9 06       	cpc	r13, r25
    1a52:	ea 06       	cpc	r14, r26
    1a54:	fb 06       	cpc	r15, r27
    1a56:	60 f0       	brcs	.+24     	; 0x1a70 <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	89 16       	cp	r8, r25
    1a5c:	91 04       	cpc	r9, r1
    1a5e:	a1 04       	cpc	r10, r1
    1a60:	b1 04       	cpc	r11, r1
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <create_chain+0xe2>
    1a64:	61 c0       	rjmp	.+194    	; 0x1b28 <create_chain+0x1a4>
    1a66:	a2 e0       	ldi	r26, 0x02	; 2
    1a68:	ca 2e       	mov	r12, r26
    1a6a:	d1 2c       	mov	r13, r1
    1a6c:	e1 2c       	mov	r14, r1
    1a6e:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a70:	c1 01       	movw	r24, r2
    1a72:	b7 01       	movw	r22, r14
    1a74:	a6 01       	movw	r20, r12
    1a76:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1a7e:	61 15       	cp	r22, r1
    1a80:	71 05       	cpc	r23, r1
    1a82:	81 05       	cpc	r24, r1
    1a84:	91 05       	cpc	r25, r1
    1a86:	a9 f0       	breq	.+42     	; 0x1ab2 <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1a88:	6f 3f       	cpi	r22, 0xFF	; 255
    1a8a:	af ef       	ldi	r26, 0xFF	; 255
    1a8c:	7a 07       	cpc	r23, r26
    1a8e:	af ef       	ldi	r26, 0xFF	; 255
    1a90:	8a 07       	cpc	r24, r26
    1a92:	af ef       	ldi	r26, 0xFF	; 255
    1a94:	9a 07       	cpc	r25, r26
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <create_chain+0x116>
    1a98:	50 c0       	rjmp	.+160    	; 0x1b3a <create_chain+0x1b6>
    1a9a:	61 30       	cpi	r22, 0x01	; 1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	81 05       	cpc	r24, r1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <create_chain+0x122>
    1aa4:	4a c0       	rjmp	.+148    	; 0x1b3a <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1aa6:	c8 14       	cp	r12, r8
    1aa8:	d9 04       	cpc	r13, r9
    1aaa:	ea 04       	cpc	r14, r10
    1aac:	fb 04       	cpc	r15, r11
    1aae:	31 f6       	brne	.-116    	; 0x1a3c <create_chain+0xb8>
    1ab0:	3b c0       	rjmp	.+118    	; 0x1b28 <create_chain+0x1a4>
    1ab2:	bc 2c       	mov	r11, r12
    1ab4:	ad 2c       	mov	r10, r13
    1ab6:	9e 2c       	mov	r9, r14
    1ab8:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1aba:	c1 01       	movw	r24, r2
    1abc:	a6 01       	movw	r20, r12
    1abe:	b7 01       	movw	r22, r14
    1ac0:	0f ef       	ldi	r16, 0xFF	; 255
    1ac2:	1f ef       	ldi	r17, 0xFF	; 255
    1ac4:	2f ef       	ldi	r18, 0xFF	; 255
    1ac6:	3f e0       	ldi	r19, 0x0F	; 15
    1ac8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <put_fat>
    1acc:	88 23       	and	r24, r24
    1ace:	89 f5       	brne	.+98     	; 0x1b32 <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1ad0:	41 14       	cp	r4, r1
    1ad2:	51 04       	cpc	r5, r1
    1ad4:	61 04       	cpc	r6, r1
    1ad6:	71 04       	cpc	r7, r1
    1ad8:	49 f0       	breq	.+18     	; 0x1aec <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1ada:	c1 01       	movw	r24, r2
    1adc:	b3 01       	movw	r22, r6
    1ade:	a2 01       	movw	r20, r4
    1ae0:	86 01       	movw	r16, r12
    1ae2:	97 01       	movw	r18, r14
    1ae4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <put_fat>
    1ae8:	88 23       	and	r24, r24
    1aea:	19 f5       	brne	.+70     	; 0x1b32 <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1aec:	f1 01       	movw	r30, r2
    1aee:	b2 86       	std	Z+10, r11	; 0x0a
    1af0:	a3 86       	std	Z+11, r10	; 0x0b
    1af2:	94 86       	std	Z+12, r9	; 0x0c
    1af4:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1af6:	86 85       	ldd	r24, Z+14	; 0x0e
    1af8:	97 85       	ldd	r25, Z+15	; 0x0f
    1afa:	a0 89       	ldd	r26, Z+16	; 0x10
    1afc:	b1 89       	ldd	r27, Z+17	; 0x11
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	ff ef       	ldi	r31, 0xFF	; 255
    1b02:	9f 07       	cpc	r25, r31
    1b04:	ff ef       	ldi	r31, 0xFF	; 255
    1b06:	af 07       	cpc	r26, r31
    1b08:	ff ef       	ldi	r31, 0xFF	; 255
    1b0a:	bf 07       	cpc	r27, r31
    1b0c:	51 f0       	breq	.+20     	; 0x1b22 <create_chain+0x19e>
		fs->free_clust--;
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	a1 09       	sbc	r26, r1
    1b12:	b1 09       	sbc	r27, r1
    1b14:	f1 01       	movw	r30, r2
    1b16:	86 87       	std	Z+14, r24	; 0x0e
    1b18:	97 87       	std	Z+15, r25	; 0x0f
    1b1a:	a0 8b       	std	Z+16, r26	; 0x10
    1b1c:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	85 83       	std	Z+5, r24	; 0x05
    1b22:	a7 01       	movw	r20, r14
    1b24:	96 01       	movw	r18, r12
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <create_chain+0x1b6>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <create_chain+0x1b6>
    1b32:	2f ef       	ldi	r18, 0xFF	; 255
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f ef       	ldi	r20, 0xFF	; 255
    1b38:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1b3a:	b9 01       	movw	r22, r18
    1b3c:	ca 01       	movw	r24, r20
    1b3e:	24 96       	adiw	r28, 0x04	; 4
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	9f 90       	pop	r9
    1b5a:	8f 90       	pop	r8
    1b5c:	7f 90       	pop	r7
    1b5e:	6f 90       	pop	r6
    1b60:	5f 90       	pop	r5
    1b62:	4f 90       	pop	r4
    1b64:	3f 90       	pop	r3
    1b66:	2f 90       	pop	r2
    1b68:	08 95       	ret

00001b6a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	ec 01       	movw	r28, r24
    1b78:	7a 01       	movw	r14, r20
    1b7a:	8b 01       	movw	r16, r22
	clst -= 2;
    1b7c:	8e ef       	ldi	r24, 0xFE	; 254
    1b7e:	9f ef       	ldi	r25, 0xFF	; 255
    1b80:	af ef       	ldi	r26, 0xFF	; 255
    1b82:	bf ef       	ldi	r27, 0xFF	; 255
    1b84:	e8 0e       	add	r14, r24
    1b86:	f9 1e       	adc	r15, r25
    1b88:	0a 1f       	adc	r16, r26
    1b8a:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1b8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b90:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b92:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b94:	02 97       	sbiw	r24, 0x02	; 2
    1b96:	a1 09       	sbc	r26, r1
    1b98:	b1 09       	sbc	r27, r1
    1b9a:	e8 16       	cp	r14, r24
    1b9c:	f9 06       	cpc	r15, r25
    1b9e:	0a 07       	cpc	r16, r26
    1ba0:	1b 07       	cpc	r17, r27
    1ba2:	28 f0       	brcs	.+10     	; 0x1bae <clust2sect+0x44>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	12 c0       	rjmp	.+36     	; 0x1bd2 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1bae:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	b7 01       	movw	r22, r14
    1bba:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	8e a1       	ldd	r24, Y+38	; 0x26
    1bc4:	9f a1       	ldd	r25, Y+39	; 0x27
    1bc6:	a8 a5       	ldd	r26, Y+40	; 0x28
    1bc8:	b9 a5       	ldd	r27, Y+41	; 0x29
    1bca:	28 0f       	add	r18, r24
    1bcc:	39 1f       	adc	r19, r25
    1bce:	4a 1f       	adc	r20, r26
    1bd0:	5b 1f       	adc	r21, r27
}
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	ca 01       	movw	r24, r20
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1be4:	af 92       	push	r10
    1be6:	bf 92       	push	r11
    1be8:	cf 92       	push	r12
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	5c 01       	movw	r10, r24
    1bfa:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	14 96       	adiw	r26, 0x04	; 4
    1c00:	6d 93       	st	X+, r22
    1c02:	7c 93       	st	X, r23
    1c04:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1c06:	16 96       	adiw	r26, 0x06	; 6
    1c08:	4d 91       	ld	r20, X+
    1c0a:	5d 91       	ld	r21, X+
    1c0c:	6d 91       	ld	r22, X+
    1c0e:	7c 91       	ld	r23, X
    1c10:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1c12:	41 30       	cpi	r20, 0x01	; 1
    1c14:	51 05       	cpc	r21, r1
    1c16:	61 05       	cpc	r22, r1
    1c18:	71 05       	cpc	r23, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <dir_seek+0x3a>
    1c1c:	d3 c0       	rjmp	.+422    	; 0x1dc4 <dir_seek+0x1e0>
    1c1e:	ed 91       	ld	r30, X+
    1c20:	fc 91       	ld	r31, X
    1c22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c24:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c26:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c28:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c2a:	48 17       	cp	r20, r24
    1c2c:	59 07       	cpc	r21, r25
    1c2e:	6a 07       	cpc	r22, r26
    1c30:	7b 07       	cpc	r23, r27
    1c32:	08 f0       	brcs	.+2      	; 0x1c36 <dir_seek+0x52>
    1c34:	c7 c0       	rjmp	.+398    	; 0x1dc4 <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1c36:	41 15       	cp	r20, r1
    1c38:	51 05       	cpc	r21, r1
    1c3a:	61 05       	cpc	r22, r1
    1c3c:	71 05       	cpc	r23, r1
    1c3e:	81 f5       	brne	.+96     	; 0x1ca0 <dir_seek+0xbc>
    1c40:	80 81       	ld	r24, Z
    1c42:	83 30       	cpi	r24, 0x03	; 3
    1c44:	49 f4       	brne	.+18     	; 0x1c58 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1c46:	42 a1       	ldd	r20, Z+34	; 0x22
    1c48:	53 a1       	ldd	r21, Z+35	; 0x23
    1c4a:	64 a1       	ldd	r22, Z+36	; 0x24
    1c4c:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1c4e:	41 15       	cp	r20, r1
    1c50:	51 05       	cpc	r21, r1
    1c52:	61 05       	cpc	r22, r1
    1c54:	71 05       	cpc	r23, r1
    1c56:	21 f5       	brne	.+72     	; 0x1ca0 <dir_seek+0xbc>
		dj->clust = clst;
    1c58:	f5 01       	movw	r30, r10
    1c5a:	12 86       	std	Z+10, r1	; 0x0a
    1c5c:	13 86       	std	Z+11, r1	; 0x0b
    1c5e:	14 86       	std	Z+12, r1	; 0x0c
    1c60:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1c62:	01 90       	ld	r0, Z+
    1c64:	f0 81       	ld	r31, Z
    1c66:	e0 2d       	mov	r30, r0
    1c68:	80 85       	ldd	r24, Z+8	; 0x08
    1c6a:	91 85       	ldd	r25, Z+9	; 0x09
    1c6c:	c8 16       	cp	r12, r24
    1c6e:	d9 06       	cpc	r13, r25
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <dir_seek+0x90>
    1c72:	a8 c0       	rjmp	.+336    	; 0x1dc4 <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1c74:	c6 01       	movw	r24, r12
    1c76:	24 e0       	ldi	r18, 0x04	; 4
    1c78:	96 95       	lsr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	2a 95       	dec	r18
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <dir_seek+0x94>
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	22 a1       	ldd	r18, Z+34	; 0x22
    1c86:	33 a1       	ldd	r19, Z+35	; 0x23
    1c88:	44 a1       	ldd	r20, Z+36	; 0x24
    1c8a:	55 a1       	ldd	r21, Z+37	; 0x25
    1c8c:	82 0f       	add	r24, r18
    1c8e:	93 1f       	adc	r25, r19
    1c90:	a4 1f       	adc	r26, r20
    1c92:	b5 1f       	adc	r27, r21
    1c94:	f5 01       	movw	r30, r10
    1c96:	86 87       	std	Z+14, r24	; 0x0e
    1c98:	97 87       	std	Z+15, r25	; 0x0f
    1c9a:	a0 8b       	std	Z+16, r26	; 0x10
    1c9c:	b1 8b       	std	Z+17, r27	; 0x11
    1c9e:	7a c0       	rjmp	.+244    	; 0x1d94 <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	08 2f       	mov	r16, r24
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	94 e0       	ldi	r25, 0x04	; 4
    1ca8:	00 0f       	add	r16, r16
    1caa:	11 1f       	adc	r17, r17
    1cac:	9a 95       	dec	r25
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <dir_seek+0xc4>
    1cb0:	24 c0       	rjmp	.+72     	; 0x1cfa <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    1cb8:	ab 01       	movw	r20, r22
    1cba:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1cbc:	4f 3f       	cpi	r20, 0xFF	; 255
    1cbe:	ff ef       	ldi	r31, 0xFF	; 255
    1cc0:	5f 07       	cpc	r21, r31
    1cc2:	ff ef       	ldi	r31, 0xFF	; 255
    1cc4:	6f 07       	cpc	r22, r31
    1cc6:	ff ef       	ldi	r31, 0xFF	; 255
    1cc8:	7f 07       	cpc	r23, r31
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <dir_seek+0xec>
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	7b c0       	rjmp	.+246    	; 0x1dc6 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1cd0:	42 30       	cpi	r20, 0x02	; 2
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	61 05       	cpc	r22, r1
    1cd6:	71 05       	cpc	r23, r1
    1cd8:	08 f4       	brcc	.+2      	; 0x1cdc <dir_seek+0xf8>
    1cda:	74 c0       	rjmp	.+232    	; 0x1dc4 <dir_seek+0x1e0>
    1cdc:	d5 01       	movw	r26, r10
    1cde:	ed 91       	ld	r30, X+
    1ce0:	fc 91       	ld	r31, X
    1ce2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ce4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ce6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ce8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1cea:	48 17       	cp	r20, r24
    1cec:	59 07       	cpc	r21, r25
    1cee:	6a 07       	cpc	r22, r26
    1cf0:	7b 07       	cpc	r23, r27
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <dir_seek+0x112>
    1cf4:	67 c0       	rjmp	.+206    	; 0x1dc4 <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1cf6:	c0 1a       	sub	r12, r16
    1cf8:	d1 0a       	sbc	r13, r17
    1cfa:	f5 01       	movw	r30, r10
    1cfc:	c0 81       	ld	r28, Z
    1cfe:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1d00:	c0 16       	cp	r12, r16
    1d02:	d1 06       	cpc	r13, r17
    1d04:	b0 f6       	brcc	.-84     	; 0x1cb2 <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1d06:	d5 01       	movw	r26, r10
    1d08:	1a 96       	adiw	r26, 0x0a	; 10
    1d0a:	4d 93       	st	X+, r20
    1d0c:	5d 93       	st	X+, r21
    1d0e:	6d 93       	st	X+, r22
    1d10:	7c 93       	st	X, r23
    1d12:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d14:	8e ef       	ldi	r24, 0xFE	; 254
    1d16:	e8 2e       	mov	r14, r24
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	f8 2e       	mov	r15, r24
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	08 2f       	mov	r16, r24
    1d20:	8f ef       	ldi	r24, 0xFF	; 255
    1d22:	18 2f       	mov	r17, r24
    1d24:	e4 0e       	add	r14, r20
    1d26:	f5 1e       	adc	r15, r21
    1d28:	06 1f       	adc	r16, r22
    1d2a:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d30:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d32:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d34:	02 97       	sbiw	r24, 0x02	; 2
    1d36:	a1 09       	sbc	r26, r1
    1d38:	b1 09       	sbc	r27, r1
    1d3a:	e8 16       	cp	r14, r24
    1d3c:	f9 06       	cpc	r15, r25
    1d3e:	0a 07       	cpc	r16, r26
    1d40:	1b 07       	cpc	r17, r27
    1d42:	28 f0       	brcs	.+10     	; 0x1d4e <dir_seek+0x16a>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	12 c0       	rjmp	.+36     	; 0x1d72 <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1d4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	c8 01       	movw	r24, r16
    1d58:	b7 01       	movw	r22, r14
    1d5a:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	8e a1       	ldd	r24, Y+38	; 0x26
    1d64:	9f a1       	ldd	r25, Y+39	; 0x27
    1d66:	a8 a5       	ldd	r26, Y+40	; 0x28
    1d68:	b9 a5       	ldd	r27, Y+41	; 0x29
    1d6a:	28 0f       	add	r18, r24
    1d6c:	39 1f       	adc	r19, r25
    1d6e:	4a 1f       	adc	r20, r26
    1d70:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d72:	c6 01       	movw	r24, r12
    1d74:	04 e0       	ldi	r16, 0x04	; 4
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	0a 95       	dec	r16
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <dir_seek+0x192>
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	28 0f       	add	r18, r24
    1d84:	39 1f       	adc	r19, r25
    1d86:	4a 1f       	adc	r20, r26
    1d88:	5b 1f       	adc	r21, r27
    1d8a:	f5 01       	movw	r30, r10
    1d8c:	26 87       	std	Z+14, r18	; 0x0e
    1d8e:	37 87       	std	Z+15, r19	; 0x0f
    1d90:	40 8b       	std	Z+16, r20	; 0x10
    1d92:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1d94:	ff e0       	ldi	r31, 0x0F	; 15
    1d96:	cf 22       	and	r12, r31
    1d98:	dd 24       	eor	r13, r13
    1d9a:	15 e0       	ldi	r17, 0x05	; 5
    1d9c:	cc 0c       	add	r12, r12
    1d9e:	dd 1c       	adc	r13, r13
    1da0:	1a 95       	dec	r17
    1da2:	e1 f7       	brne	.-8      	; 0x1d9c <dir_seek+0x1b8>
    1da4:	8e e2       	ldi	r24, 0x2E	; 46
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	c8 0e       	add	r12, r24
    1daa:	d9 1e       	adc	r13, r25
    1dac:	d5 01       	movw	r26, r10
    1dae:	8d 91       	ld	r24, X+
    1db0:	9c 91       	ld	r25, X
    1db2:	11 97       	sbiw	r26, 0x01	; 1
    1db4:	8c 0d       	add	r24, r12
    1db6:	9d 1d       	adc	r25, r13
    1db8:	52 96       	adiw	r26, 0x12	; 18
    1dba:	8d 93       	st	X+, r24
    1dbc:	9c 93       	st	X, r25
    1dbe:	53 97       	sbiw	r26, 0x13	; 19
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
}
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	bf 90       	pop	r11
    1dd8:	af 90       	pop	r10
    1dda:	08 95       	ret

00001ddc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1ddc:	4f 92       	push	r4
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	ec 01       	movw	r28, r24
    1dfe:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1e00:	6c 80       	ldd	r6, Y+4	; 0x04
    1e02:	7d 80       	ldd	r7, Y+5	; 0x05
    1e04:	08 94       	sec
    1e06:	61 1c       	adc	r6, r1
    1e08:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e0a:	61 14       	cp	r6, r1
    1e0c:	71 04       	cpc	r7, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <dir_next+0x36>
    1e10:	4c c1       	rjmp	.+664    	; 0x20aa <dir_next+0x2ce>
    1e12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e16:	a8 89       	ldd	r26, Y+16	; 0x10
    1e18:	b9 89       	ldd	r27, Y+17	; 0x11
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	a1 05       	cpc	r26, r1
    1e1e:	b1 05       	cpc	r27, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <dir_next+0x48>
    1e22:	43 c1       	rjmp	.+646    	; 0x20aa <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1e24:	1f e0       	ldi	r17, 0x0F	; 15
    1e26:	41 2e       	mov	r4, r17
    1e28:	51 2c       	mov	r5, r1
    1e2a:	46 20       	and	r4, r6
    1e2c:	57 20       	and	r5, r7
    1e2e:	41 14       	cp	r4, r1
    1e30:	51 04       	cpc	r5, r1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <dir_next+0x5a>
    1e34:	27 c1       	rjmp	.+590    	; 0x2084 <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	b1 1d       	adc	r27, r1
    1e3c:	8e 87       	std	Y+14, r24	; 0x0e
    1e3e:	9f 87       	std	Y+15, r25	; 0x0f
    1e40:	a8 8b       	std	Y+16, r26	; 0x10
    1e42:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1e44:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e46:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e48:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e4c:	e8 81       	ld	r30, Y
    1e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e50:	41 15       	cp	r20, r1
    1e52:	51 05       	cpc	r21, r1
    1e54:	61 05       	cpc	r22, r1
    1e56:	71 05       	cpc	r23, r1
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1e5a:	80 85       	ldd	r24, Z+8	; 0x08
    1e5c:	91 85       	ldd	r25, Z+9	; 0x09
    1e5e:	68 16       	cp	r6, r24
    1e60:	79 06       	cpc	r7, r25
    1e62:	08 f4       	brcc	.+2      	; 0x1e66 <dir_next+0x8a>
    1e64:	0f c1       	rjmp	.+542    	; 0x2084 <dir_next+0x2a8>
    1e66:	21 c1       	rjmp	.+578    	; 0x20aa <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	93 01       	movw	r18, r6
    1e70:	a4 e0       	ldi	r26, 0x04	; 4
    1e72:	36 95       	lsr	r19
    1e74:	27 95       	ror	r18
    1e76:	aa 95       	dec	r26
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <dir_next+0x96>
    1e7a:	82 23       	and	r24, r18
    1e7c:	93 23       	and	r25, r19
    1e7e:	89 2b       	or	r24, r25
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <dir_next+0xa8>
    1e82:	00 c1       	rjmp	.+512    	; 0x2084 <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1e84:	cf 01       	movw	r24, r30
    1e86:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    1e8a:	7b 01       	movw	r14, r22
    1e8c:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1e8e:	62 30       	cpi	r22, 0x02	; 2
    1e90:	71 05       	cpc	r23, r1
    1e92:	81 05       	cpc	r24, r1
    1e94:	91 05       	cpc	r25, r1
    1e96:	08 f4       	brcc	.+2      	; 0x1e9a <dir_next+0xbe>
    1e98:	0a c1       	rjmp	.+532    	; 0x20ae <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	e8 16       	cp	r14, r24
    1e9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ea0:	f8 06       	cpc	r15, r24
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	08 07       	cpc	r16, r24
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	18 07       	cpc	r17, r24
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <dir_next+0xd2>
    1eac:	02 c1       	rjmp	.+516    	; 0x20b2 <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1eae:	e8 81       	ld	r30, Y
    1eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eb6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1eb8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1eba:	e8 16       	cp	r14, r24
    1ebc:	f9 06       	cpc	r15, r25
    1ebe:	0a 07       	cpc	r16, r26
    1ec0:	1b 07       	cpc	r17, r27
    1ec2:	08 f4       	brcc	.+2      	; 0x1ec6 <dir_next+0xea>
    1ec4:	a6 c0       	rjmp	.+332    	; 0x2012 <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1ec6:	dd 20       	and	r13, r13
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <dir_next+0xf0>
    1eca:	ef c0       	rjmp	.+478    	; 0x20aa <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1ecc:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ece:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ed0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ed2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <create_chain>
    1eda:	7b 01       	movw	r14, r22
    1edc:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1ede:	61 15       	cp	r22, r1
    1ee0:	71 05       	cpc	r23, r1
    1ee2:	81 05       	cpc	r24, r1
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <dir_next+0x110>
    1ee8:	87 e0       	ldi	r24, 0x07	; 7
    1eea:	e4 c0       	rjmp	.+456    	; 0x20b4 <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	e9 16       	cp	r14, r25
    1ef0:	f1 04       	cpc	r15, r1
    1ef2:	01 05       	cpc	r16, r1
    1ef4:	11 05       	cpc	r17, r1
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <dir_next+0x11e>
    1ef8:	da c0       	rjmp	.+436    	; 0x20ae <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1efa:	af ef       	ldi	r26, 0xFF	; 255
    1efc:	ea 16       	cp	r14, r26
    1efe:	af ef       	ldi	r26, 0xFF	; 255
    1f00:	fa 06       	cpc	r15, r26
    1f02:	af ef       	ldi	r26, 0xFF	; 255
    1f04:	0a 07       	cpc	r16, r26
    1f06:	af ef       	ldi	r26, 0xFF	; 255
    1f08:	1a 07       	cpc	r17, r26
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <dir_next+0x132>
    1f0c:	d2 c0       	rjmp	.+420    	; 0x20b2 <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1f0e:	88 81       	ld	r24, Y
    1f10:	99 81       	ldd	r25, Y+1	; 0x01
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    1f1e:	88 23       	and	r24, r24
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <dir_next+0x148>
    1f22:	c7 c0       	rjmp	.+398    	; 0x20b2 <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1f24:	e8 81       	ld	r30, Y
    1f26:	f9 81       	ldd	r31, Y+1	; 0x01
    1f28:	be 96       	adiw	r30, 0x2e	; 46
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	92 e0       	ldi	r25, 0x02	; 2
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1f30:	11 92       	st	Z+, r1
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	bf ef       	ldi	r27, 0xFF	; 255
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	9b 07       	cpc	r25, r27
    1f3a:	d1 f7       	brne	.-12     	; 0x1f30 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1f3c:	88 80       	ld	r8, Y
    1f3e:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1f40:	4e ef       	ldi	r20, 0xFE	; 254
    1f42:	a4 2e       	mov	r10, r20
    1f44:	4f ef       	ldi	r20, 0xFF	; 255
    1f46:	b4 2e       	mov	r11, r20
    1f48:	4f ef       	ldi	r20, 0xFF	; 255
    1f4a:	c4 2e       	mov	r12, r20
    1f4c:	4f ef       	ldi	r20, 0xFF	; 255
    1f4e:	d4 2e       	mov	r13, r20
    1f50:	ae 0c       	add	r10, r14
    1f52:	bf 1c       	adc	r11, r15
    1f54:	c0 1e       	adc	r12, r16
    1f56:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1f58:	f4 01       	movw	r30, r8
    1f5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f5e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f60:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f62:	02 97       	sbiw	r24, 0x02	; 2
    1f64:	a1 09       	sbc	r26, r1
    1f66:	b1 09       	sbc	r27, r1
    1f68:	a8 16       	cp	r10, r24
    1f6a:	b9 06       	cpc	r11, r25
    1f6c:	ca 06       	cpc	r12, r26
    1f6e:	db 06       	cpc	r13, r27
    1f70:	28 f0       	brcs	.+10     	; 0x1f7c <dir_next+0x1a0>
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	15 c0       	rjmp	.+42     	; 0x1fa6 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1f7c:	d4 01       	movw	r26, r8
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	2c 91       	ld	r18, X
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	c6 01       	movw	r24, r12
    1f8a:	b5 01       	movw	r22, r10
    1f8c:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    1f90:	9b 01       	movw	r18, r22
    1f92:	ac 01       	movw	r20, r24
    1f94:	f4 01       	movw	r30, r8
    1f96:	86 a1       	ldd	r24, Z+38	; 0x26
    1f98:	97 a1       	ldd	r25, Z+39	; 0x27
    1f9a:	a0 a5       	ldd	r26, Z+40	; 0x28
    1f9c:	b1 a5       	ldd	r27, Z+41	; 0x29
    1f9e:	28 0f       	add	r18, r24
    1fa0:	39 1f       	adc	r19, r25
    1fa2:	4a 1f       	adc	r20, r26
    1fa4:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fa6:	d4 01       	movw	r26, r8
    1fa8:	9a 96       	adiw	r26, 0x2a	; 42
    1faa:	2d 93       	st	X+, r18
    1fac:	3d 93       	st	X+, r19
    1fae:	4d 93       	st	X+, r20
    1fb0:	5c 93       	st	X, r21
    1fb2:	9d 97       	sbiw	r26, 0x2d	; 45
    1fb4:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1fb6:	cc 24       	eor	r12, r12
    1fb8:	c3 94       	inc	r12
    1fba:	1a c0       	rjmp	.+52     	; 0x1ff0 <dir_next+0x214>
    1fbc:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1fbe:	88 81       	ld	r24, Y
    1fc0:	99 81       	ldd	r25, Y+1	; 0x01
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <dir_next+0x1f8>
    1fd2:	6f c0       	rjmp	.+222    	; 0x20b2 <dir_next+0x2d6>
						dj->fs->winsect++;
    1fd4:	e8 81       	ld	r30, Y
    1fd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1fd8:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fda:	93 a5       	ldd	r25, Z+43	; 0x2b
    1fdc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1fde:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	b1 1d       	adc	r27, r1
    1fe6:	82 a7       	std	Z+42, r24	; 0x2a
    1fe8:	93 a7       	std	Z+43, r25	; 0x2b
    1fea:	a4 a7       	std	Z+44, r26	; 0x2c
    1fec:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1fee:	d3 94       	inc	r13
    1ff0:	e8 81       	ld	r30, Y
    1ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	d8 16       	cp	r13, r24
    1ff8:	08 f3       	brcs	.-62     	; 0x1fbc <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1ffa:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ffc:	93 a5       	ldd	r25, Z+43	; 0x2b
    1ffe:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2000:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2002:	8d 19       	sub	r24, r13
    2004:	91 09       	sbc	r25, r1
    2006:	a1 09       	sbc	r26, r1
    2008:	b1 09       	sbc	r27, r1
    200a:	82 a7       	std	Z+42, r24	; 0x2a
    200c:	93 a7       	std	Z+43, r25	; 0x2b
    200e:	a4 a7       	std	Z+44, r26	; 0x2c
    2010:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2012:	ea 86       	std	Y+10, r14	; 0x0a
    2014:	fb 86       	std	Y+11, r15	; 0x0b
    2016:	0c 87       	std	Y+12, r16	; 0x0c
    2018:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    201a:	c8 80       	ld	r12, Y
    201c:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    201e:	8e ef       	ldi	r24, 0xFE	; 254
    2020:	9f ef       	ldi	r25, 0xFF	; 255
    2022:	af ef       	ldi	r26, 0xFF	; 255
    2024:	bf ef       	ldi	r27, 0xFF	; 255
    2026:	e8 0e       	add	r14, r24
    2028:	f9 1e       	adc	r15, r25
    202a:	0a 1f       	adc	r16, r26
    202c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    202e:	f6 01       	movw	r30, r12
    2030:	82 8d       	ldd	r24, Z+26	; 0x1a
    2032:	93 8d       	ldd	r25, Z+27	; 0x1b
    2034:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2036:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2038:	02 97       	sbiw	r24, 0x02	; 2
    203a:	a1 09       	sbc	r26, r1
    203c:	b1 09       	sbc	r27, r1
    203e:	e8 16       	cp	r14, r24
    2040:	f9 06       	cpc	r15, r25
    2042:	0a 07       	cpc	r16, r26
    2044:	1b 07       	cpc	r17, r27
    2046:	28 f0       	brcs	.+10     	; 0x2052 <dir_next+0x276>
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	15 c0       	rjmp	.+42     	; 0x207c <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    2052:	d6 01       	movw	r26, r12
    2054:	12 96       	adiw	r26, 0x02	; 2
    2056:	2c 91       	ld	r18, X
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	c8 01       	movw	r24, r16
    2060:	b7 01       	movw	r22, r14
    2062:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    2066:	9b 01       	movw	r18, r22
    2068:	ac 01       	movw	r20, r24
    206a:	f6 01       	movw	r30, r12
    206c:	86 a1       	ldd	r24, Z+38	; 0x26
    206e:	97 a1       	ldd	r25, Z+39	; 0x27
    2070:	a0 a5       	ldd	r26, Z+40	; 0x28
    2072:	b1 a5       	ldd	r27, Z+41	; 0x29
    2074:	28 0f       	add	r18, r24
    2076:	39 1f       	adc	r19, r25
    2078:	4a 1f       	adc	r20, r26
    207a:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    207c:	2e 87       	std	Y+14, r18	; 0x0e
    207e:	3f 87       	std	Y+15, r19	; 0x0f
    2080:	48 8b       	std	Y+16, r20	; 0x10
    2082:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    2084:	6c 82       	std	Y+4, r6	; 0x04
    2086:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2088:	35 e0       	ldi	r19, 0x05	; 5
    208a:	44 0c       	add	r4, r4
    208c:	55 1c       	adc	r5, r5
    208e:	3a 95       	dec	r19
    2090:	e1 f7       	brne	.-8      	; 0x208a <dir_next+0x2ae>
    2092:	8e e2       	ldi	r24, 0x2E	; 46
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	48 0e       	add	r4, r24
    2098:	59 1e       	adc	r5, r25
    209a:	88 81       	ld	r24, Y
    209c:	99 81       	ldd	r25, Y+1	; 0x01
    209e:	84 0d       	add	r24, r4
    20a0:	95 1d       	adc	r25, r5
    20a2:	8a 8b       	std	Y+18, r24	; 0x12
    20a4:	9b 8b       	std	Y+19, r25	; 0x13
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <dir_next+0x2d8>

	return FR_OK;
    20aa:	84 e0       	ldi	r24, 0x04	; 4
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <dir_next+0x2d8>
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <dir_next+0x2d8>
    20b2:	81 e0       	ldi	r24, 0x01	; 1
}
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	df 90       	pop	r13
    20c2:	cf 90       	pop	r12
    20c4:	bf 90       	pop	r11
    20c6:	af 90       	pop	r10
    20c8:	9f 90       	pop	r9
    20ca:	8f 90       	pop	r8
    20cc:	7f 90       	pop	r7
    20ce:	6f 90       	pop	r6
    20d0:	5f 90       	pop	r5
    20d2:	4f 90       	pop	r4
    20d4:	08 95       	ret

000020d6 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    20dc:	94 e0       	ldi	r25, 0x04	; 4
    20de:	1a c0       	rjmp	.+52     	; 0x2114 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    20e0:	88 81       	ld	r24, Y
    20e2:	99 81       	ldd	r25, Y+1	; 0x01
    20e4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    20e8:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    20ea:	88 23       	and	r24, r24
    20ec:	f1 f4       	brne	.+60     	; 0x212a <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    20ee:	ea 89       	ldd	r30, Y+18	; 0x12
    20f0:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    20f2:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    20f4:	88 23       	and	r24, r24
    20f6:	09 f1       	breq	.+66     	; 0x213a <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    20f8:	85 3e       	cpi	r24, 0xE5	; 229
    20fa:	29 f0       	breq	.+10     	; 0x2106 <dir_read+0x30>
    20fc:	8e 32       	cpi	r24, 0x2E	; 46
    20fe:	19 f0       	breq	.+6      	; 0x2106 <dir_read+0x30>
    2100:	83 85       	ldd	r24, Z+11	; 0x0b
    2102:	83 ff       	sbrs	r24, 3
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    2106:	ce 01       	movw	r24, r28
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <dir_next>
    210e:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2110:	88 23       	and	r24, r24
    2112:	59 f4       	brne	.+22     	; 0x212a <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2114:	4e 85       	ldd	r20, Y+14	; 0x0e
    2116:	5f 85       	ldd	r21, Y+15	; 0x0f
    2118:	68 89       	ldd	r22, Y+16	; 0x10
    211a:	79 89       	ldd	r23, Y+17	; 0x11
    211c:	41 15       	cp	r20, r1
    211e:	51 05       	cpc	r21, r1
    2120:	61 05       	cpc	r22, r1
    2122:	71 05       	cpc	r23, r1
    2124:	e9 f6       	brne	.-70     	; 0x20e0 <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2126:	99 23       	and	r25, r25
    2128:	21 f0       	breq	.+8      	; 0x2132 <dir_read+0x5c>
    212a:	1e 86       	std	Y+14, r1	; 0x0e
    212c:	1f 86       	std	Y+15, r1	; 0x0f
    212e:	18 8a       	std	Y+16, r1	; 0x10
    2130:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    2132:	89 2f       	mov	r24, r25
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    213a:	94 e0       	ldi	r25, 0x04	; 4
    213c:	f6 cf       	rjmp	.-20     	; 0x212a <dir_read+0x54>

0000213e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
    214c:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    214e:	88 23       	and	r24, r24
    2150:	e9 f5       	brne	.+122    	; 0x21cc <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2152:	4e 85       	ldd	r20, Y+14	; 0x0e
    2154:	5f 85       	ldd	r21, Y+15	; 0x0f
    2156:	68 89       	ldd	r22, Y+16	; 0x10
    2158:	79 89       	ldd	r23, Y+17	; 0x11
    215a:	88 81       	ld	r24, Y
    215c:	99 81       	ldd	r25, Y+1	; 0x01
    215e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    2162:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    2164:	88 23       	and	r24, r24
    2166:	91 f5       	brne	.+100    	; 0x21cc <dir_register+0x8e>
			c = *dj->dir;
    2168:	ea 89       	ldd	r30, Y+18	; 0x12
    216a:	fb 89       	ldd	r31, Y+19	; 0x13
    216c:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    216e:	e5 3e       	cpi	r30, 0xE5	; 229
    2170:	89 f1       	breq	.+98     	; 0x21d4 <dir_register+0x96>
    2172:	ee 23       	and	r30, r30
    2174:	79 f1       	breq	.+94     	; 0x21d4 <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2176:	ce 01       	movw	r24, r28
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <dir_next>
    217e:	e6 cf       	rjmp	.-52     	; 0x214c <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2180:	6a 89       	ldd	r22, Y+18	; 0x12
    2182:	7b 89       	ldd	r23, Y+19	; 0x13
    2184:	fb 01       	movw	r30, r22
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	01 c0       	rjmp	.+2      	; 0x218e <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    218c:	11 92       	st	Z+, r1
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	2f ef       	ldi	r18, 0xFF	; 255
    2192:	8f 3f       	cpi	r24, 0xFF	; 255
    2194:	92 07       	cpc	r25, r18
    2196:	d1 f7       	brne	.-12     	; 0x218c <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2198:	8c 89       	ldd	r24, Y+20	; 0x14
    219a:	9d 89       	ldd	r25, Y+21	; 0x15
    219c:	9c 01       	movw	r18, r24
    219e:	d9 01       	movw	r26, r18
    21a0:	fb 01       	movw	r30, r22
    21a2:	2b e0       	ldi	r18, 0x0B	; 11
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    21a8:	8d 91       	ld	r24, X+
    21aa:	81 93       	st	Z+, r24
    21ac:	21 50       	subi	r18, 0x01	; 1
    21ae:	30 40       	sbci	r19, 0x00	; 0
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	2f 3f       	cpi	r18, 0xFF	; 255
    21b4:	38 07       	cpc	r19, r24
    21b6:	c1 f7       	brne	.-16     	; 0x21a8 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    21b8:	ec 89       	ldd	r30, Y+20	; 0x14
    21ba:	fd 89       	ldd	r31, Y+21	; 0x15
    21bc:	83 85       	ldd	r24, Z+11	; 0x0b
    21be:	88 71       	andi	r24, 0x18	; 24
    21c0:	fb 01       	movw	r30, r22
    21c2:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    21c4:	e8 81       	ld	r30, Y
    21c6:	f9 81       	ldd	r31, Y+1	; 0x01
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    21cc:	84 2f       	mov	r24, r20
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    21d4:	4e 85       	ldd	r20, Y+14	; 0x0e
    21d6:	5f 85       	ldd	r21, Y+15	; 0x0f
    21d8:	68 89       	ldd	r22, Y+16	; 0x10
    21da:	79 89       	ldd	r23, Y+17	; 0x11
    21dc:	88 81       	ld	r24, Y
    21de:	99 81       	ldd	r25, Y+1	; 0x01
    21e0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    21e4:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    21e6:	88 23       	and	r24, r24
    21e8:	59 f2       	breq	.-106    	; 0x2180 <dir_register+0x42>
    21ea:	f0 cf       	rjmp	.-32     	; 0x21cc <dir_register+0x8e>

000021ec <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    21f2:	6c 81       	ldd	r22, Y+4	; 0x04
    21f4:	7d 81       	ldd	r23, Y+5	; 0x05
    21f6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
    21fa:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    21fc:	88 23       	and	r24, r24
    21fe:	99 f4       	brne	.+38     	; 0x2226 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    2200:	4e 85       	ldd	r20, Y+14	; 0x0e
    2202:	5f 85       	ldd	r21, Y+15	; 0x0f
    2204:	68 89       	ldd	r22, Y+16	; 0x10
    2206:	79 89       	ldd	r23, Y+17	; 0x11
    2208:	88 81       	ld	r24, Y
    220a:	99 81       	ldd	r25, Y+1	; 0x01
    220c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    2210:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    2212:	88 23       	and	r24, r24
    2214:	41 f4       	brne	.+16     	; 0x2226 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    2216:	ea 89       	ldd	r30, Y+18	; 0x12
    2218:	fb 89       	ldd	r31, Y+19	; 0x13
    221a:	85 ee       	ldi	r24, 0xE5	; 229
    221c:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    221e:	e8 81       	ld	r30, Y
    2220:	f9 81       	ldd	r31, Y+1	; 0x01
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    2226:	89 2f       	mov	r24, r25
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	fc 01       	movw	r30, r24
    223c:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    223e:	eb 01       	movw	r28, r22
    2240:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    2242:	86 85       	ldd	r24, Z+14	; 0x0e
    2244:	97 85       	ldd	r25, Z+15	; 0x0f
    2246:	a0 89       	ldd	r26, Z+16	; 0x10
    2248:	b1 89       	ldd	r27, Z+17	; 0x11
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	a1 05       	cpc	r26, r1
    224e:	b1 05       	cpc	r27, r1
    2250:	09 f4       	brne	.+2      	; 0x2254 <get_fileinfo+0x26>
    2252:	71 c0       	rjmp	.+226    	; 0x2336 <get_fileinfo+0x108>
		dir = dj->dir;
    2254:	62 89       	ldd	r22, Z+18	; 0x12
    2256:	73 89       	ldd	r23, Z+19	; 0x13
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    225c:	fb 01       	movw	r30, r22
    225e:	e8 0f       	add	r30, r24
    2260:	f9 1f       	adc	r31, r25
    2262:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    2264:	e0 32       	cpi	r30, 0x20	; 32
    2266:	41 f0       	breq	.+16     	; 0x2278 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    2268:	e5 30       	cpi	r30, 0x05	; 5
    226a:	09 f4       	brne	.+2      	; 0x226e <get_fileinfo+0x40>
    226c:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    226e:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	88 30       	cpi	r24, 0x08	; 8
    2274:	91 05       	cpc	r25, r1
    2276:	91 f7       	brne	.-28     	; 0x225c <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    2278:	db 01       	movw	r26, r22
    227a:	18 96       	adiw	r26, 0x08	; 8
    227c:	8c 91       	ld	r24, X
    227e:	80 32       	cpi	r24, 0x20	; 32
    2280:	11 f4       	brne	.+4      	; 0x2286 <get_fileinfo+0x58>
    2282:	8e 01       	movw	r16, r28
    2284:	12 c0       	rjmp	.+36     	; 0x22aa <get_fileinfo+0x7c>
			*p++ = '.';
    2286:	8e e2       	ldi	r24, 0x2E	; 46
    2288:	fe 01       	movw	r30, r28
    228a:	81 93       	st	Z+, r24
    228c:	8f 01       	movw	r16, r30
    228e:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    2290:	9e 01       	movw	r18, r28
    2292:	2c 5f       	subi	r18, 0xFC	; 252
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2296:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2298:	80 32       	cpi	r24, 0x20	; 32
    229a:	39 f0       	breq	.+14     	; 0x22aa <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    229c:	d8 01       	movw	r26, r16
    229e:	8d 93       	st	X+, r24
    22a0:	8d 01       	movw	r16, r26
    22a2:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    22a4:	a2 17       	cp	r26, r18
    22a6:	b3 07       	cpc	r27, r19
    22a8:	b1 f7       	brne	.-20     	; 0x2296 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    22aa:	fb 01       	movw	r30, r22
    22ac:	83 85       	ldd	r24, Z+11	; 0x0b
    22ae:	d7 01       	movw	r26, r14
    22b0:	18 96       	adiw	r26, 0x08	; 8
    22b2:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    22b4:	27 8d       	ldd	r18, Z+31	; 0x1f
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	52 2f       	mov	r21, r18
    22be:	44 27       	eor	r20, r20
    22c0:	33 27       	eor	r19, r19
    22c2:	22 27       	eor	r18, r18
    22c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 e0       	ldi	r26, 0x00	; 0
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	dc 01       	movw	r26, r24
    22ce:	99 27       	eor	r25, r25
    22d0:	88 27       	eor	r24, r24
    22d2:	28 2b       	or	r18, r24
    22d4:	39 2b       	or	r19, r25
    22d6:	4a 2b       	or	r20, r26
    22d8:	5b 2b       	or	r21, r27
    22da:	84 8d       	ldd	r24, Z+28	; 0x1c
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	28 2b       	or	r18, r24
    22e4:	39 2b       	or	r19, r25
    22e6:	4a 2b       	or	r20, r26
    22e8:	5b 2b       	or	r21, r27
    22ea:	95 8d       	ldd	r25, Z+29	; 0x1d
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	a0 e0       	ldi	r26, 0x00	; 0
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	28 2b       	or	r18, r24
    22f4:	39 2b       	or	r19, r25
    22f6:	4a 2b       	or	r20, r26
    22f8:	5b 2b       	or	r21, r27
    22fa:	f7 01       	movw	r30, r14
    22fc:	20 83       	st	Z, r18
    22fe:	31 83       	std	Z+1, r19	; 0x01
    2300:	42 83       	std	Z+2, r20	; 0x02
    2302:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2304:	db 01       	movw	r26, r22
    2306:	59 96       	adiw	r26, 0x19	; 25
    2308:	9c 91       	ld	r25, X
    230a:	59 97       	sbiw	r26, 0x19	; 25
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	58 96       	adiw	r26, 0x18	; 24
    2310:	2c 91       	ld	r18, X
    2312:	58 97       	sbiw	r26, 0x18	; 24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	82 2b       	or	r24, r18
    2318:	93 2b       	or	r25, r19
    231a:	84 83       	std	Z+4, r24	; 0x04
    231c:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    231e:	57 96       	adiw	r26, 0x17	; 23
    2320:	9c 91       	ld	r25, X
    2322:	57 97       	sbiw	r26, 0x17	; 23
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	56 96       	adiw	r26, 0x16	; 22
    2328:	2c 91       	ld	r18, X
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	82 2b       	or	r24, r18
    232e:	93 2b       	or	r25, r19
    2330:	86 83       	std	Z+6, r24	; 0x06
    2332:	97 83       	std	Z+7, r25	; 0x07
    2334:	e8 01       	movw	r28, r16
	}
	*p = 0;
    2336:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	08 95       	ret

00002346 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    2346:	5f 92       	push	r5
    2348:	6f 92       	push	r6
    234a:	7f 92       	push	r7
    234c:	8f 92       	push	r8
    234e:	9f 92       	push	r9
    2350:	af 92       	push	r10
    2352:	bf 92       	push	r11
    2354:	cf 92       	push	r12
    2356:	df 92       	push	r13
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	ec 01       	movw	r28, r24
    2366:	7b 01       	movw	r14, r22
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    236a:	08 94       	sec
    236c:	e1 1c       	adc	r14, r1
    236e:	f1 1c       	adc	r15, r1
    2370:	f7 01       	movw	r30, r14
    2372:	80 81       	ld	r24, Z
    2374:	80 32       	cpi	r24, 0x20	; 32
    2376:	c9 f3       	breq	.-14     	; 0x236a <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2378:	8f 32       	cpi	r24, 0x2F	; 47
    237a:	11 f0       	breq	.+4      	; 0x2380 <follow_path+0x3a>
    237c:	8c 35       	cpi	r24, 0x5C	; 92
    237e:	19 f4       	brne	.+6      	; 0x2386 <follow_path+0x40>
		path++;
    2380:	08 94       	sec
    2382:	e1 1c       	adc	r14, r1
    2384:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2386:	1e 82       	std	Y+6, r1	; 0x06
    2388:	1f 82       	std	Y+7, r1	; 0x07
    238a:	18 86       	std	Y+8, r1	; 0x08
    238c:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    238e:	f7 01       	movw	r30, r14
    2390:	80 81       	ld	r24, Z
    2392:	80 32       	cpi	r24, 0x20	; 32
    2394:	40 f4       	brcc	.+16     	; 0x23a6 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2396:	ce 01       	movw	r24, r28
    2398:	60 e0       	ldi	r22, 0x00	; 0
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
		dj->dir = NULL;
    23a0:	1a 8a       	std	Y+18, r1	; 0x12
    23a2:	1b 8a       	std	Y+19, r1	; 0x13
    23a4:	13 c1       	rjmp	.+550    	; 0x25cc <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23a6:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    23a8:	45 e0       	ldi	r20, 0x05	; 5
    23aa:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    23ac:	ac 89       	ldd	r26, Y+20	; 0x14
    23ae:	bd 89       	ldd	r27, Y+21	; 0x15
    23b0:	fd 01       	movw	r30, r26
    23b2:	8b e0       	ldi	r24, 0x0B	; 11
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    23b8:	01 93       	st	Z+, r16
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	2f ef       	ldi	r18, 0xFF	; 255
    23be:	8f 3f       	cpi	r24, 0xFF	; 255
    23c0:	92 07       	cpc	r25, r18
    23c2:	d1 f7       	brne	.-12     	; 0x23b8 <follow_path+0x72>
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	cc 24       	eor	r12, r12
    23ca:	dd 24       	eor	r13, r13
    23cc:	38 e0       	ldi	r19, 0x08	; 8
    23ce:	a3 2e       	mov	r10, r19
    23d0:	b1 2c       	mov	r11, r1
    23d2:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    23d4:	f7 01       	movw	r30, r14
    23d6:	ec 0d       	add	r30, r12
    23d8:	fd 1d       	adc	r31, r13
    23da:	20 81       	ld	r18, Z
    23dc:	08 94       	sec
    23de:	c1 1c       	adc	r12, r1
    23e0:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    23e2:	21 32       	cpi	r18, 0x21	; 33
    23e4:	08 f4       	brcc	.+2      	; 0x23e8 <follow_path+0xa2>
    23e6:	66 c0       	rjmp	.+204    	; 0x24b4 <follow_path+0x16e>
    23e8:	2f 32       	cpi	r18, 0x2F	; 47
    23ea:	09 f4       	brne	.+2      	; 0x23ee <follow_path+0xa8>
    23ec:	ff c0       	rjmp	.+510    	; 0x25ec <follow_path+0x2a6>
    23ee:	2c 35       	cpi	r18, 0x5C	; 92
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <follow_path+0xae>
    23f2:	fc c0       	rjmp	.+504    	; 0x25ec <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    23f4:	2e 32       	cpi	r18, 0x2E	; 46
    23f6:	19 f0       	breq	.+6      	; 0x23fe <follow_path+0xb8>
    23f8:	4a 15       	cp	r20, r10
    23fa:	5b 05       	cpc	r21, r11
    23fc:	84 f0       	brlt	.+32     	; 0x241e <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    23fe:	88 e0       	ldi	r24, 0x08	; 8
    2400:	a8 16       	cp	r10, r24
    2402:	b1 04       	cpc	r11, r1
    2404:	09 f0       	breq	.+2      	; 0x2408 <follow_path+0xc2>
    2406:	dd c0       	rjmp	.+442    	; 0x25c2 <follow_path+0x27c>
    2408:	2e 32       	cpi	r18, 0x2E	; 46
    240a:	09 f0       	breq	.+2      	; 0x240e <follow_path+0xc8>
    240c:	da c0       	rjmp	.+436    	; 0x25c2 <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    240e:	11 0f       	add	r17, r17
    2410:	11 0f       	add	r17, r17
    2412:	48 e0       	ldi	r20, 0x08	; 8
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	2b e0       	ldi	r18, 0x0B	; 11
    2418:	a2 2e       	mov	r10, r18
    241a:	b1 2c       	mov	r11, r1
    241c:	db cf       	rjmp	.-74     	; 0x23d4 <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    241e:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    2420:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    2422:	82 2f       	mov	r24, r18
    2424:	81 58       	subi	r24, 0x81	; 129
    2426:	8f 31       	cpi	r24, 0x1F	; 31
    2428:	18 f0       	brcs	.+6      	; 0x2430 <follow_path+0xea>
    242a:	8f 55       	subi	r24, 0x5F	; 95
    242c:	8d 31       	cpi	r24, 0x1D	; 29
    242e:	08 f5       	brcc	.+66     	; 0x2472 <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    2430:	f7 01       	movw	r30, r14
    2432:	ec 0d       	add	r30, r12
    2434:	fd 1d       	adc	r31, r13
    2436:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2438:	83 2f       	mov	r24, r19
    243a:	80 54       	subi	r24, 0x40	; 64
    243c:	8f 33       	cpi	r24, 0x3F	; 63
    243e:	20 f0       	brcs	.+8      	; 0x2448 <follow_path+0x102>
    2440:	80 54       	subi	r24, 0x40	; 64
    2442:	8d 37       	cpi	r24, 0x7D	; 125
    2444:	08 f0       	brcs	.+2      	; 0x2448 <follow_path+0x102>
    2446:	bd c0       	rjmp	.+378    	; 0x25c2 <follow_path+0x27c>
    2448:	c5 01       	movw	r24, r10
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	48 17       	cp	r20, r24
    244e:	59 07       	cpc	r21, r25
    2450:	0c f0       	brlt	.+2      	; 0x2454 <follow_path+0x10e>
    2452:	b7 c0       	rjmp	.+366    	; 0x25c2 <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    2454:	08 94       	sec
    2456:	c1 1c       	adc	r12, r1
    2458:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    245a:	fd 01       	movw	r30, r26
    245c:	e4 0f       	add	r30, r20
    245e:	f5 1f       	adc	r31, r21
    2460:	20 83       	st	Z, r18
    2462:	ca 01       	movw	r24, r20
    2464:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2466:	fd 01       	movw	r30, r26
    2468:	e8 0f       	add	r30, r24
    246a:	f9 1f       	adc	r31, r25
    246c:	30 83       	st	Z, r19
    246e:	ac 01       	movw	r20, r24
    2470:	1e c0       	rjmp	.+60     	; 0x24ae <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    2472:	62 2f       	mov	r22, r18
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	e0 e0       	ldi	r30, 0x00	; 0
    2478:	f0 e2       	ldi	r31, 0x20	; 32
    247a:	01 c0       	rjmp	.+2      	; 0x247e <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    247c:	31 96       	adiw	r30, 0x01	; 1
    247e:	80 81       	ld	r24, Z
    2480:	88 23       	and	r24, r24
    2482:	29 f0       	breq	.+10     	; 0x248e <follow_path+0x148>
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	86 17       	cp	r24, r22
    2488:	97 07       	cpc	r25, r23
    248a:	c1 f7       	brne	.-16     	; 0x247c <follow_path+0x136>
    248c:	9a c0       	rjmp	.+308    	; 0x25c2 <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    248e:	82 2f       	mov	r24, r18
    2490:	81 54       	subi	r24, 0x41	; 65
    2492:	8a 31       	cpi	r24, 0x1A	; 26
    2494:	10 f4       	brcc	.+4      	; 0x249a <follow_path+0x154>
				b |= 2;
    2496:	12 60       	ori	r17, 0x02	; 2
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    249a:	82 2f       	mov	r24, r18
    249c:	81 56       	subi	r24, 0x61	; 97
    249e:	8a 31       	cpi	r24, 0x1A	; 26
    24a0:	10 f4       	brcc	.+4      	; 0x24a6 <follow_path+0x160>
					b |= 1; c -= 0x20;
    24a2:	11 60       	ori	r17, 0x01	; 1
    24a4:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    24a6:	fd 01       	movw	r30, r26
    24a8:	e4 0f       	add	r30, r20
    24aa:	f5 1f       	adc	r31, r21
    24ac:	20 83       	st	Z, r18
    24ae:	4f 5f       	subi	r20, 0xFF	; 255
    24b0:	5f 4f       	sbci	r21, 0xFF	; 255
    24b2:	90 cf       	rjmp	.-224    	; 0x23d4 <follow_path+0x8e>
    24b4:	91 2f       	mov	r25, r17
    24b6:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    24b8:	45 2b       	or	r20, r21
    24ba:	09 f4       	brne	.+2      	; 0x24be <follow_path+0x178>
    24bc:	82 c0       	rjmp	.+260    	; 0x25c2 <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    24be:	8c 91       	ld	r24, X
    24c0:	85 3e       	cpi	r24, 0xE5	; 229
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <follow_path+0x180>
    24c4:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    24c6:	e8 e0       	ldi	r30, 0x08	; 8
    24c8:	ae 16       	cp	r10, r30
    24ca:	b1 04       	cpc	r11, r1
    24cc:	19 f4       	brne	.+6      	; 0x24d4 <follow_path+0x18e>
    24ce:	91 2f       	mov	r25, r17
    24d0:	99 0f       	add	r25, r25
    24d2:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    24d4:	29 2f       	mov	r18, r25
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	c9 01       	movw	r24, r18
    24da:	83 70       	andi	r24, 0x03	; 3
    24dc:	90 70       	andi	r25, 0x00	; 0
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <follow_path+0x19e>
    24e2:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    24e4:	2c 70       	andi	r18, 0x0C	; 12
    24e6:	30 70       	andi	r19, 0x00	; 0
    24e8:	24 30       	cpi	r18, 0x04	; 4
    24ea:	31 05       	cpc	r19, r1
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <follow_path+0x1aa>
    24ee:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    24f0:	1b 96       	adiw	r26, 0x0b	; 11
    24f2:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    24f4:	ce 01       	movw	r24, r28
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
    24fe:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2500:	88 23       	and	r24, r24
    2502:	71 f5       	brne	.+92     	; 0x2560 <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2504:	4e 85       	ldd	r20, Y+14	; 0x0e
    2506:	5f 85       	ldd	r21, Y+15	; 0x0f
    2508:	68 89       	ldd	r22, Y+16	; 0x10
    250a:	79 89       	ldd	r23, Y+17	; 0x11
    250c:	88 81       	ld	r24, Y
    250e:	99 81       	ldd	r25, Y+1	; 0x01
    2510:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    2514:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    2516:	88 23       	and	r24, r24
    2518:	19 f5       	brne	.+70     	; 0x2560 <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    251a:	ea 89       	ldd	r30, Y+18	; 0x12
    251c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    251e:	80 81       	ld	r24, Z
    2520:	88 23       	and	r24, r24
    2522:	11 f4       	brne	.+4      	; 0x2528 <follow_path+0x1e2>
    2524:	44 e0       	ldi	r20, 0x04	; 4
    2526:	1c c0       	rjmp	.+56     	; 0x2560 <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2528:	83 85       	ldd	r24, Z+11	; 0x0b
    252a:	83 fd       	sbrc	r24, 3
    252c:	14 c0       	rjmp	.+40     	; 0x2556 <follow_path+0x210>
    252e:	df 01       	movw	r26, r30
    2530:	8c 89       	ldd	r24, Y+20	; 0x14
    2532:	9d 89       	ldd	r25, Y+21	; 0x15
    2534:	9c 01       	movw	r18, r24
    2536:	f9 01       	movw	r30, r18
    2538:	2b e0       	ldi	r18, 0x0B	; 11
    253a:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    253c:	21 50       	subi	r18, 0x01	; 1
    253e:	30 40       	sbci	r19, 0x00	; 0
    2540:	8f ef       	ldi	r24, 0xFF	; 255
    2542:	2f 3f       	cpi	r18, 0xFF	; 255
    2544:	38 07       	cpc	r19, r24
    2546:	61 f0       	breq	.+24     	; 0x2560 <follow_path+0x21a>
    2548:	9c 91       	ld	r25, X
    254a:	80 81       	ld	r24, Z
    254c:	98 17       	cp	r25, r24
    254e:	19 f4       	brne	.+6      	; 0x2556 <follow_path+0x210>
    2550:	11 96       	adiw	r26, 0x01	; 1
    2552:	31 96       	adiw	r30, 0x01	; 1
    2554:	f3 cf       	rjmp	.-26     	; 0x253c <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    2556:	ce 01       	movw	r24, r28
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <dir_next>
    255e:	cf cf       	rjmp	.-98     	; 0x24fe <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    2560:	ec 89       	ldd	r30, Y+20	; 0x14
    2562:	fd 89       	ldd	r31, Y+21	; 0x15
    2564:	93 85       	ldd	r25, Z+11	; 0x0b
    2566:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    2568:	44 23       	and	r20, r20
    256a:	31 f0       	breq	.+12     	; 0x2578 <follow_path+0x232>
    256c:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    256e:	44 30       	cpi	r20, 0x04	; 4
    2570:	51 f5       	brne	.+84     	; 0x25c6 <follow_path+0x280>
    2572:	99 23       	and	r25, r25
    2574:	51 f1       	breq	.+84     	; 0x25ca <follow_path+0x284>
    2576:	2a c0       	rjmp	.+84     	; 0x25cc <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    2578:	99 23       	and	r25, r25
    257a:	29 f5       	brne	.+74     	; 0x25c6 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    257c:	ea 89       	ldd	r30, Y+18	; 0x12
    257e:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    2580:	83 85       	ldd	r24, Z+11	; 0x0b
    2582:	84 ff       	sbrs	r24, 4
    2584:	22 c0       	rjmp	.+68     	; 0x25ca <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2586:	ec 0c       	add	r14, r12
    2588:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    258a:	75 88       	ldd	r7, Z+21	; 0x15
    258c:	66 24       	eor	r6, r6
    258e:	24 89       	ldd	r18, Z+20	; 0x14
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	26 29       	or	r18, r6
    2594:	37 29       	or	r19, r7
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	a9 01       	movw	r20, r18
    259c:	33 27       	eor	r19, r19
    259e:	22 27       	eor	r18, r18
    25a0:	93 8c       	ldd	r9, Z+27	; 0x1b
    25a2:	88 24       	eor	r8, r8
    25a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	88 29       	or	r24, r8
    25aa:	99 29       	or	r25, r9
    25ac:	a0 e0       	ldi	r26, 0x00	; 0
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	28 2b       	or	r18, r24
    25b2:	39 2b       	or	r19, r25
    25b4:	4a 2b       	or	r20, r26
    25b6:	5b 2b       	or	r21, r27
    25b8:	2e 83       	std	Y+6, r18	; 0x06
    25ba:	3f 83       	std	Y+7, r19	; 0x07
    25bc:	48 87       	std	Y+8, r20	; 0x08
    25be:	59 87       	std	Y+9, r21	; 0x09
    25c0:	f5 ce       	rjmp	.-534    	; 0x23ac <follow_path+0x66>
		}
    25c2:	86 e0       	ldi	r24, 0x06	; 6
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <follow_path+0x286>
    25c6:	84 2f       	mov	r24, r20
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <follow_path+0x286>
    25ca:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	df 90       	pop	r13
    25da:	cf 90       	pop	r12
    25dc:	bf 90       	pop	r11
    25de:	af 90       	pop	r10
    25e0:	9f 90       	pop	r9
    25e2:	8f 90       	pop	r8
    25e4:	7f 90       	pop	r7
    25e6:	6f 90       	pop	r6
    25e8:	5f 90       	pop	r5
    25ea:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    25ec:	91 2f       	mov	r25, r17
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	63 cf       	rjmp	.-314    	; 0x24b8 <follow_path+0x172>

000025f2 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    25f2:	0f 93       	push	r16
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	ec 01       	movw	r28, r24
    25fa:	9a 01       	movw	r18, r20
    25fc:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    25fe:	bc 01       	movw	r22, r24
    2600:	62 5d       	subi	r22, 0xD2	; 210
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	01 e0       	ldi	r16, 0x01	; 1
    2608:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    260c:	88 23       	and	r24, r24
    260e:	11 f0       	breq	.+4      	; 0x2614 <check_fs+0x22>
    2610:	63 e0       	ldi	r22, 0x03	; 3
    2612:	6d c0       	rjmp	.+218    	; 0x26ee <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2614:	c3 5d       	subi	r28, 0xD3	; 211
    2616:	dd 4f       	sbci	r29, 0xFD	; 253
    2618:	98 81       	ld	r25, Y
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	2a 91       	ld	r18, -Y
    261e:	cc 52       	subi	r28, 0x2C	; 44
    2620:	d2 40       	sbci	r29, 0x02	; 2
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	82 2b       	or	r24, r18
    2626:	93 2b       	or	r25, r19
    2628:	85 55       	subi	r24, 0x55	; 85
    262a:	9a 4a       	sbci	r25, 0xAA	; 170
    262c:	11 f0       	breq	.+4      	; 0x2632 <check_fs+0x40>
    262e:	62 e0       	ldi	r22, 0x02	; 2
    2630:	5e c0       	rjmp	.+188    	; 0x26ee <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2632:	c9 59       	subi	r28, 0x99	; 153
    2634:	df 4f       	sbci	r29, 0xFF	; 255
    2636:	28 81       	ld	r18, Y
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	52 2f       	mov	r21, r18
    2640:	44 27       	eor	r20, r20
    2642:	33 27       	eor	r19, r19
    2644:	22 27       	eor	r18, r18
    2646:	8a 91       	ld	r24, -Y
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	dc 01       	movw	r26, r24
    2650:	99 27       	eor	r25, r25
    2652:	88 27       	eor	r24, r24
    2654:	28 2b       	or	r18, r24
    2656:	39 2b       	or	r19, r25
    2658:	4a 2b       	or	r20, r26
    265a:	5b 2b       	or	r21, r27
    265c:	22 97       	sbiw	r28, 0x02	; 2
    265e:	89 91       	ld	r24, Y+
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	28 2b       	or	r18, r24
    2668:	39 2b       	or	r19, r25
    266a:	4a 2b       	or	r20, r26
    266c:	5b 2b       	or	r21, r27
    266e:	98 81       	ld	r25, Y
    2670:	c5 56       	subi	r28, 0x65	; 101
    2672:	d0 40       	sbci	r29, 0x00	; 0
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	a0 e0       	ldi	r26, 0x00	; 0
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	28 2b       	or	r18, r24
    267c:	39 2b       	or	r19, r25
    267e:	4a 2b       	or	r20, r26
    2680:	5b 2b       	or	r21, r27
    2682:	50 70       	andi	r21, 0x00	; 0
    2684:	26 54       	subi	r18, 0x46	; 70
    2686:	31 44       	sbci	r19, 0x41	; 65
    2688:	44 45       	sbci	r20, 0x54	; 84
    268a:	50 40       	sbci	r21, 0x00	; 0
    268c:	11 f4       	brne	.+4      	; 0x2692 <check_fs+0xa0>
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	2e c0       	rjmp	.+92     	; 0x26ee <check_fs+0xfc>
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	cd 57       	subi	r28, 0x7D	; 125
    2696:	df 4f       	sbci	r29, 0xFF	; 255
    2698:	28 81       	ld	r18, Y
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	52 2f       	mov	r21, r18
    26a2:	44 27       	eor	r20, r20
    26a4:	33 27       	eor	r19, r19
    26a6:	22 27       	eor	r18, r18
    26a8:	8a 91       	ld	r24, -Y
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e0       	ldi	r26, 0x00	; 0
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	dc 01       	movw	r26, r24
    26b2:	99 27       	eor	r25, r25
    26b4:	88 27       	eor	r24, r24
    26b6:	28 2b       	or	r18, r24
    26b8:	39 2b       	or	r19, r25
    26ba:	4a 2b       	or	r20, r26
    26bc:	5b 2b       	or	r21, r27
    26be:	22 97       	sbiw	r28, 0x02	; 2
    26c0:	89 91       	ld	r24, Y+
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e0       	ldi	r26, 0x00	; 0
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	28 2b       	or	r18, r24
    26ca:	39 2b       	or	r19, r25
    26cc:	4a 2b       	or	r20, r26
    26ce:	5b 2b       	or	r21, r27
    26d0:	98 81       	ld	r25, Y
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	a0 e0       	ldi	r26, 0x00	; 0
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	28 2b       	or	r18, r24
    26da:	39 2b       	or	r19, r25
    26dc:	4a 2b       	or	r20, r26
    26de:	5b 2b       	or	r21, r27
    26e0:	50 70       	andi	r21, 0x00	; 0
    26e2:	26 54       	subi	r18, 0x46	; 70
    26e4:	31 44       	sbci	r19, 0x41	; 65
    26e6:	44 45       	sbci	r20, 0x54	; 84
    26e8:	50 40       	sbci	r21, 0x00	; 0
    26ea:	09 f0       	breq	.+2      	; 0x26ee <check_fs+0xfc>
    26ec:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    26ee:	86 2f       	mov	r24, r22
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    26f8:	6f 92       	push	r6
    26fa:	7f 92       	push	r7
    26fc:	8f 92       	push	r8
    26fe:	9f 92       	push	r9
    2700:	af 92       	push	r10
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	fc 01       	movw	r30, r24
    2716:	9b 01       	movw	r18, r22
    2718:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    271a:	a0 81       	ld	r26, Z
    271c:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    271e:	8c 91       	ld	r24, X
    2720:	08 2f       	mov	r16, r24
    2722:	10 e0       	ldi	r17, 0x00	; 0
    2724:	00 53       	subi	r16, 0x30	; 48
    2726:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    2728:	0a 30       	cpi	r16, 0x0A	; 10
    272a:	11 05       	cpc	r17, r1
    272c:	68 f4       	brcc	.+26     	; 0x2748 <chk_mounted+0x50>
    272e:	11 96       	adiw	r26, 0x01	; 1
    2730:	8c 91       	ld	r24, X
    2732:	11 97       	sbiw	r26, 0x01	; 1
    2734:	8a 33       	cpi	r24, 0x3A	; 58
    2736:	41 f4       	brne	.+16     	; 0x2748 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    2738:	12 96       	adiw	r26, 0x02	; 2
    273a:	a0 83       	st	Z, r26
    273c:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    273e:	02 30       	cpi	r16, 0x02	; 2
    2740:	11 05       	cpc	r17, r1
    2742:	20 f0       	brcs	.+8      	; 0x274c <chk_mounted+0x54>
    2744:	8b e0       	ldi	r24, 0x0B	; 11
    2746:	91 c2       	rjmp	.+1314   	; 0x2c6a <chk_mounted+0x572>
    2748:	00 e0       	ldi	r16, 0x00	; 0
    274a:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    274c:	f8 01       	movw	r30, r16
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	e1 5b       	subi	r30, 0xB1	; 177
    2754:	fc 4c       	sbci	r31, 0xCC	; 204
    2756:	c0 81       	ld	r28, Z
    2758:	d1 81       	ldd	r29, Z+1	; 0x01
    275a:	f9 01       	movw	r30, r18
    275c:	c0 83       	st	Z, r28
    275e:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2760:	20 97       	sbiw	r28, 0x00	; 0
    2762:	11 f4       	brne	.+4      	; 0x2768 <chk_mounted+0x70>
    2764:	8c e0       	ldi	r24, 0x0C	; 12
    2766:	81 c2       	rjmp	.+1282   	; 0x2c6a <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2768:	88 81       	ld	r24, Y
    276a:	88 23       	and	r24, r24
    276c:	79 f0       	breq	.+30     	; 0x278c <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	88 23       	and	r24, r24
    2772:	11 f0       	breq	.+4      	; 0x2778 <chk_mounted+0x80>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	02 c0       	rjmp	.+4      	; 0x277c <chk_mounted+0x84>
	return Stat;
    2778:	80 91 77 32 	lds	r24, 0x3277
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    277c:	80 fd       	sbrc	r24, 0
    277e:	06 c0       	rjmp	.+12     	; 0x278c <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2780:	ff 20       	and	r15, r15
    2782:	09 f4       	brne	.+2      	; 0x2786 <chk_mounted+0x8e>
    2784:	6f c2       	rjmp	.+1246   	; 0x2c64 <chk_mounted+0x56c>
    2786:	82 fd       	sbrc	r24, 2
    2788:	6b c2       	rjmp	.+1238   	; 0x2c60 <chk_mounted+0x568>
    278a:	6c c2       	rjmp	.+1240   	; 0x2c64 <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    278c:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    278e:	f8 01       	movw	r30, r16
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ea 54       	subi	r30, 0x4A	; 74
    2796:	f4 4d       	sbci	r31, 0xD4	; 212
    2798:	80 81       	ld	r24, Z
    279a:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    279c:	0e 94 b8 05 	call	0xb70	; 0xb70 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    27a0:	80 ff       	sbrs	r24, 0
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <chk_mounted+0xb0>
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	61 c2       	rjmp	.+1218   	; 0x2c6a <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    27a8:	ff 20       	and	r15, r15
    27aa:	11 f0       	breq	.+4      	; 0x27b0 <chk_mounted+0xb8>
    27ac:	82 fd       	sbrc	r24, 2
    27ae:	58 c2       	rjmp	.+1200   	; 0x2c60 <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    27b0:	ce 01       	movw	r24, r28
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    27be:	81 30       	cpi	r24, 0x01	; 1
    27c0:	21 f0       	breq	.+8      	; 0x27ca <chk_mounted+0xd2>
    27c2:	aa 24       	eor	r10, r10
    27c4:	bb 24       	eor	r11, r11
    27c6:	65 01       	movw	r12, r10
    27c8:	3d c0       	rjmp	.+122    	; 0x2844 <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    27ca:	00 0f       	add	r16, r16
    27cc:	11 1f       	adc	r17, r17
    27ce:	0a 54       	subi	r16, 0x4A	; 74
    27d0:	14 4d       	sbci	r17, 0xD4	; 212
    27d2:	f8 01       	movw	r30, r16
    27d4:	81 81       	ldd	r24, Z+1	; 0x01
    27d6:	e8 2f       	mov	r30, r24
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	a4 e0       	ldi	r26, 0x04	; 4
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	aa 95       	dec	r26
    27e2:	e1 f7       	brne	.-8      	; 0x27dc <chk_mounted+0xe4>
    27e4:	e4 51       	subi	r30, 0x14	; 20
    27e6:	fe 4f       	sbci	r31, 0xFE	; 254
    27e8:	ec 0f       	add	r30, r28
    27ea:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    27ec:	84 81       	ldd	r24, Z+4	; 0x04
    27ee:	88 23       	and	r24, r24
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <chk_mounted+0xfc>
    27f2:	3a c2       	rjmp	.+1140   	; 0x2c68 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    27f4:	83 85       	ldd	r24, Z+11	; 0x0b
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e0       	ldi	r26, 0x00	; 0
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	d8 2e       	mov	r13, r24
    27fe:	cc 24       	eor	r12, r12
    2800:	bb 24       	eor	r11, r11
    2802:	aa 24       	eor	r10, r10
    2804:	82 85       	ldd	r24, Z+10	; 0x0a
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	dc 01       	movw	r26, r24
    280e:	99 27       	eor	r25, r25
    2810:	88 27       	eor	r24, r24
    2812:	a8 2a       	or	r10, r24
    2814:	b9 2a       	or	r11, r25
    2816:	ca 2a       	or	r12, r26
    2818:	db 2a       	or	r13, r27
    281a:	80 85       	ldd	r24, Z+8	; 0x08
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e0       	ldi	r26, 0x00	; 0
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	a8 2a       	or	r10, r24
    2824:	b9 2a       	or	r11, r25
    2826:	ca 2a       	or	r12, r26
    2828:	db 2a       	or	r13, r27
    282a:	91 85       	ldd	r25, Z+9	; 0x09
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	a0 e0       	ldi	r26, 0x00	; 0
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	a8 2a       	or	r10, r24
    2834:	b9 2a       	or	r11, r25
    2836:	ca 2a       	or	r12, r26
    2838:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    283a:	ce 01       	movw	r24, r28
    283c:	b6 01       	movw	r22, r12
    283e:	a5 01       	movw	r20, r10
    2840:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2844:	83 30       	cpi	r24, 0x03	; 3
    2846:	11 f4       	brne	.+4      	; 0x284c <chk_mounted+0x154>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0f c2       	rjmp	.+1054   	; 0x2c6a <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    284c:	88 23       	and	r24, r24
    284e:	09 f0       	breq	.+2      	; 0x2852 <chk_mounted+0x15a>
    2850:	0b c2       	rjmp	.+1046   	; 0x2c68 <chk_mounted+0x570>
    2852:	9a ad       	ldd	r25, Y+58	; 0x3a
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	29 ad       	ldd	r18, Y+57	; 0x39
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	82 2b       	or	r24, r18
    285c:	93 2b       	or	r25, r19
    285e:	80 50       	subi	r24, 0x00	; 0
    2860:	92 40       	sbci	r25, 0x02	; 2
    2862:	09 f0       	breq	.+2      	; 0x2866 <chk_mounted+0x16e>
    2864:	01 c2       	rjmp	.+1026   	; 0x2c68 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2866:	cb 5b       	subi	r28, 0xBB	; 187
    2868:	df 4f       	sbci	r29, 0xFF	; 255
    286a:	98 81       	ld	r25, Y
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	2a 91       	ld	r18, -Y
    2870:	c4 54       	subi	r28, 0x44	; 68
    2872:	d0 40       	sbci	r29, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	82 2b       	or	r24, r18
    2878:	93 2b       	or	r25, r19
    287a:	7c 01       	movw	r14, r24
    287c:	00 e0       	ldi	r16, 0x00	; 0
    287e:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    2880:	e1 14       	cp	r14, r1
    2882:	f1 04       	cpc	r15, r1
    2884:	01 05       	cpc	r16, r1
    2886:	11 05       	cpc	r17, r1
    2888:	41 f5       	brne	.+80     	; 0x28da <chk_mounted+0x1e2>
    288a:	cb 5a       	subi	r28, 0xAB	; 171
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	88 81       	ld	r24, Y
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e0       	ldi	r26, 0x00	; 0
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	18 2f       	mov	r17, r24
    2898:	00 27       	eor	r16, r16
    289a:	ff 24       	eor	r15, r15
    289c:	ee 24       	eor	r14, r14
    289e:	8a 91       	ld	r24, -Y
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a0 e0       	ldi	r26, 0x00	; 0
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	dc 01       	movw	r26, r24
    28a8:	99 27       	eor	r25, r25
    28aa:	88 27       	eor	r24, r24
    28ac:	e8 2a       	or	r14, r24
    28ae:	f9 2a       	or	r15, r25
    28b0:	0a 2b       	or	r16, r26
    28b2:	1b 2b       	or	r17, r27
    28b4:	22 97       	sbiw	r28, 0x02	; 2
    28b6:	89 91       	ld	r24, Y+
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a0 e0       	ldi	r26, 0x00	; 0
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e8 2a       	or	r14, r24
    28c0:	f9 2a       	or	r15, r25
    28c2:	0a 2b       	or	r16, r26
    28c4:	1b 2b       	or	r17, r27
    28c6:	98 81       	ld	r25, Y
    28c8:	c3 55       	subi	r28, 0x53	; 83
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e8 2a       	or	r14, r24
    28d4:	f9 2a       	or	r15, r25
    28d6:	0a 2b       	or	r16, r26
    28d8:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    28da:	ee 8a       	std	Y+22, r14	; 0x16
    28dc:	ff 8a       	std	Y+23, r15	; 0x17
    28de:	08 8f       	std	Y+24, r16	; 0x18
    28e0:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    28e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    28e4:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	c8 01       	movw	r24, r16
    28ee:	b7 01       	movw	r22, r14
    28f0:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    28f4:	3b 01       	movw	r6, r22
    28f6:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    28f8:	9d ad       	ldd	r25, Y+61	; 0x3d
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	2c ad       	ldd	r18, Y+60	; 0x3c
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	82 2b       	or	r24, r18
    2902:	93 2b       	or	r25, r19
    2904:	a0 e0       	ldi	r26, 0x00	; 0
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	8a 0d       	add	r24, r10
    290a:	9b 1d       	adc	r25, r11
    290c:	ac 1d       	adc	r26, r12
    290e:	bd 1d       	adc	r27, r13
    2910:	8e 8f       	std	Y+30, r24	; 0x1e
    2912:	9f 8f       	std	Y+31, r25	; 0x1f
    2914:	a8 a3       	std	Y+32, r26	; 0x20
    2916:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2918:	8b ad       	ldd	r24, Y+59	; 0x3b
    291a:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    291c:	c0 5c       	subi	r28, 0xC0	; 192
    291e:	df 4f       	sbci	r29, 0xFF	; 255
    2920:	98 81       	ld	r25, Y
    2922:	c0 54       	subi	r28, 0x40	; 64
    2924:	d0 40       	sbci	r29, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	2f ad       	ldd	r18, Y+63	; 0x3f
    292a:	42 2f       	mov	r20, r18
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	48 2b       	or	r20, r24
    2930:	59 2b       	or	r21, r25
    2932:	48 87       	std	Y+8, r20	; 0x08
    2934:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2936:	ce 5b       	subi	r28, 0xBE	; 190
    2938:	df 4f       	sbci	r29, 0xFF	; 255
    293a:	98 81       	ld	r25, Y
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	2a 91       	ld	r18, -Y
    2940:	c1 54       	subi	r28, 0x41	; 65
    2942:	d0 40       	sbci	r29, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	82 2b       	or	r24, r18
    2948:	93 2b       	or	r25, r19
    294a:	7c 01       	movw	r14, r24
    294c:	00 e0       	ldi	r16, 0x00	; 0
    294e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2950:	e1 14       	cp	r14, r1
    2952:	f1 04       	cpc	r15, r1
    2954:	01 05       	cpc	r16, r1
    2956:	11 05       	cpc	r17, r1
    2958:	41 f5       	brne	.+80     	; 0x29aa <chk_mounted+0x2b2>
    295a:	cf 5a       	subi	r28, 0xAF	; 175
    295c:	df 4f       	sbci	r29, 0xFF	; 255
    295e:	88 81       	ld	r24, Y
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	a0 e0       	ldi	r26, 0x00	; 0
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	18 2f       	mov	r17, r24
    2968:	00 27       	eor	r16, r16
    296a:	ff 24       	eor	r15, r15
    296c:	ee 24       	eor	r14, r14
    296e:	8a 91       	ld	r24, -Y
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e0       	ldi	r26, 0x00	; 0
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	dc 01       	movw	r26, r24
    2978:	99 27       	eor	r25, r25
    297a:	88 27       	eor	r24, r24
    297c:	e8 2a       	or	r14, r24
    297e:	f9 2a       	or	r15, r25
    2980:	0a 2b       	or	r16, r26
    2982:	1b 2b       	or	r17, r27
    2984:	22 97       	sbiw	r28, 0x02	; 2
    2986:	89 91       	ld	r24, Y+
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e0       	ldi	r26, 0x00	; 0
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e8 2a       	or	r14, r24
    2990:	f9 2a       	or	r15, r25
    2992:	0a 2b       	or	r16, r26
    2994:	1b 2b       	or	r17, r27
    2996:	98 81       	ld	r25, Y
    2998:	cf 54       	subi	r28, 0x4F	; 79
    299a:	d0 40       	sbci	r29, 0x00	; 0
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e8 2a       	or	r14, r24
    29a4:	f9 2a       	or	r15, r25
    29a6:	0a 2b       	or	r16, r26
    29a8:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    29aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	82 2b       	or	r24, r18
    29b4:	93 2b       	or	r25, r19
    29b6:	a0 e0       	ldi	r26, 0x00	; 0
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e8 1a       	sub	r14, r24
    29bc:	f9 0a       	sbc	r15, r25
    29be:	0a 0b       	sbc	r16, r26
    29c0:	1b 0b       	sbc	r17, r27
    29c2:	e6 18       	sub	r14, r6
    29c4:	f7 08       	sbc	r15, r7
    29c6:	08 09       	sbc	r16, r8
    29c8:	19 09       	sbc	r17, r9
    29ca:	f4 e0       	ldi	r31, 0x04	; 4
    29cc:	56 95       	lsr	r21
    29ce:	47 95       	ror	r20
    29d0:	fa 95       	dec	r31
    29d2:	e1 f7       	brne	.-8      	; 0x29cc <chk_mounted+0x2d4>
    29d4:	ca 01       	movw	r24, r20
    29d6:	a0 e0       	ldi	r26, 0x00	; 0
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e8 1a       	sub	r14, r24
    29dc:	f9 0a       	sbc	r15, r25
    29de:	0a 0b       	sbc	r16, r26
    29e0:	1b 0b       	sbc	r17, r27
    29e2:	2a 81       	ldd	r18, Y+2	; 0x02
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	c8 01       	movw	r24, r16
    29ec:	b7 01       	movw	r22, r14
    29ee:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    29f2:	2e 5f       	subi	r18, 0xFE	; 254
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	4f 4f       	sbci	r20, 0xFF	; 255
    29f8:	5f 4f       	sbci	r21, 0xFF	; 255
    29fa:	2a 8f       	std	Y+26, r18	; 0x1a
    29fc:	3b 8f       	std	Y+27, r19	; 0x1b
    29fe:	4c 8f       	std	Y+28, r20	; 0x1c
    2a00:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2a02:	27 3f       	cpi	r18, 0xF7	; 247
    2a04:	8f e0       	ldi	r24, 0x0F	; 15
    2a06:	38 07       	cpc	r19, r24
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	48 07       	cpc	r20, r24
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	58 07       	cpc	r21, r24
    2a10:	10 f4       	brcc	.+4      	; 0x2a16 <chk_mounted+0x31e>
    2a12:	11 e0       	ldi	r17, 0x01	; 1
    2a14:	07 c0       	rjmp	.+14     	; 0x2a24 <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2a16:	27 5f       	subi	r18, 0xF7	; 247
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	40 40       	sbci	r20, 0x00	; 0
    2a1c:	50 40       	sbci	r21, 0x00	; 0
    2a1e:	08 f0       	brcs	.+2      	; 0x2a22 <chk_mounted+0x32a>
    2a20:	33 c1       	rjmp	.+614    	; 0x2c88 <chk_mounted+0x590>
    2a22:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2a24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a28:	a8 a1       	ldd	r26, Y+32	; 0x20
    2a2a:	b9 a1       	ldd	r27, Y+33	; 0x21
    2a2c:	86 0d       	add	r24, r6
    2a2e:	97 1d       	adc	r25, r7
    2a30:	a8 1d       	adc	r26, r8
    2a32:	b9 1d       	adc	r27, r9
    2a34:	8a a3       	std	Y+34, r24	; 0x22
    2a36:	9b a3       	std	Y+35, r25	; 0x23
    2a38:	ac a3       	std	Y+36, r26	; 0x24
    2a3a:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2a3c:	88 85       	ldd	r24, Y+8	; 0x08
    2a3e:	99 85       	ldd	r25, Y+9	; 0x09
    2a40:	e4 e0       	ldi	r30, 0x04	; 4
    2a42:	96 95       	lsr	r25
    2a44:	87 95       	ror	r24
    2a46:	ea 95       	dec	r30
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <chk_mounted+0x34a>
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2a50:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2a52:	48 a1       	ldd	r20, Y+32	; 0x20
    2a54:	59 a1       	ldd	r21, Y+33	; 0x21
    2a56:	82 0f       	add	r24, r18
    2a58:	93 1f       	adc	r25, r19
    2a5a:	a4 1f       	adc	r26, r20
    2a5c:	b5 1f       	adc	r27, r21
    2a5e:	86 0d       	add	r24, r6
    2a60:	97 1d       	adc	r25, r7
    2a62:	a8 1d       	adc	r26, r8
    2a64:	b9 1d       	adc	r27, r9
    2a66:	8e a3       	std	Y+38, r24	; 0x26
    2a68:	9f a3       	std	Y+39, r25	; 0x27
    2a6a:	a8 a7       	std	Y+40, r26	; 0x28
    2a6c:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
    2a70:	9f ef       	ldi	r25, 0xFF	; 255
    2a72:	af ef       	ldi	r26, 0xFF	; 255
    2a74:	bf ef       	ldi	r27, 0xFF	; 255
    2a76:	8e 87       	std	Y+14, r24	; 0x0e
    2a78:	9f 87       	std	Y+15, r25	; 0x0f
    2a7a:	a8 8b       	std	Y+16, r26	; 0x10
    2a7c:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2a7e:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2a80:	13 30       	cpi	r17, 0x03	; 3
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <chk_mounted+0x38e>
    2a84:	dc c0       	rjmp	.+440    	; 0x2c3e <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2a86:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2a88:	c1 5a       	subi	r28, 0xA1	; 161
    2a8a:	df 4f       	sbci	r29, 0xFF	; 255
    2a8c:	38 81       	ld	r19, Y
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	8a 91       	ld	r24, -Y
    2a92:	ce 55       	subi	r28, 0x5E	; 94
    2a94:	d0 40       	sbci	r29, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	28 2b       	or	r18, r24
    2a9a:	39 2b       	or	r19, r25
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	2a 0d       	add	r18, r10
    2aa2:	3b 1d       	adc	r19, r11
    2aa4:	4c 1d       	adc	r20, r12
    2aa6:	5d 1d       	adc	r21, r13
    2aa8:	2a 8b       	std	Y+18, r18	; 0x12
    2aaa:	3b 8b       	std	Y+19, r19	; 0x13
    2aac:	4c 8b       	std	Y+20, r20	; 0x14
    2aae:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2ab0:	be 01       	movw	r22, r28
    2ab2:	62 5d       	subi	r22, 0xD2	; 210
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	01 e0       	ldi	r16, 0x01	; 1
    2aba:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    2abe:	88 23       	and	r24, r24
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <chk_mounted+0x3cc>
    2ac2:	bd c0       	rjmp	.+378    	; 0x2c3e <chk_mounted+0x546>
    2ac4:	c3 5d       	subi	r28, 0xD3	; 211
    2ac6:	dd 4f       	sbci	r29, 0xFD	; 253
    2ac8:	98 81       	ld	r25, Y
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	2a 91       	ld	r18, -Y
    2ace:	cc 52       	subi	r28, 0x2C	; 44
    2ad0:	d2 40       	sbci	r29, 0x02	; 2
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	82 2b       	or	r24, r18
    2ad6:	93 2b       	or	r25, r19
    2ad8:	85 55       	subi	r24, 0x55	; 85
    2ada:	9a 4a       	sbci	r25, 0xAA	; 170
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <chk_mounted+0x3e8>
    2ade:	af c0       	rjmp	.+350    	; 0x2c3e <chk_mounted+0x546>
    2ae0:	29 a9       	ldd	r18, Y+49	; 0x31
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	52 2f       	mov	r21, r18
    2aea:	44 27       	eor	r20, r20
    2aec:	33 27       	eor	r19, r19
    2aee:	22 27       	eor	r18, r18
    2af0:	88 a9       	ldd	r24, Y+48	; 0x30
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a0 e0       	ldi	r26, 0x00	; 0
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	dc 01       	movw	r26, r24
    2afa:	99 27       	eor	r25, r25
    2afc:	88 27       	eor	r24, r24
    2afe:	28 2b       	or	r18, r24
    2b00:	39 2b       	or	r19, r25
    2b02:	4a 2b       	or	r20, r26
    2b04:	5b 2b       	or	r21, r27
    2b06:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	28 2b       	or	r18, r24
    2b10:	39 2b       	or	r19, r25
    2b12:	4a 2b       	or	r20, r26
    2b14:	5b 2b       	or	r21, r27
    2b16:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	28 2b       	or	r18, r24
    2b20:	39 2b       	or	r19, r25
    2b22:	4a 2b       	or	r20, r26
    2b24:	5b 2b       	or	r21, r27
    2b26:	22 55       	subi	r18, 0x52	; 82
    2b28:	32 45       	sbci	r19, 0x52	; 82
    2b2a:	41 46       	sbci	r20, 0x61	; 97
    2b2c:	51 44       	sbci	r21, 0x41	; 65
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <chk_mounted+0x43a>
    2b30:	86 c0       	rjmp	.+268    	; 0x2c3e <chk_mounted+0x546>
    2b32:	cb 5e       	subi	r28, 0xEB	; 235
    2b34:	dd 4f       	sbci	r29, 0xFD	; 253
    2b36:	28 81       	ld	r18, Y
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	52 2f       	mov	r21, r18
    2b40:	44 27       	eor	r20, r20
    2b42:	33 27       	eor	r19, r19
    2b44:	22 27       	eor	r18, r18
    2b46:	8a 91       	ld	r24, -Y
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	dc 01       	movw	r26, r24
    2b50:	99 27       	eor	r25, r25
    2b52:	88 27       	eor	r24, r24
    2b54:	28 2b       	or	r18, r24
    2b56:	39 2b       	or	r19, r25
    2b58:	4a 2b       	or	r20, r26
    2b5a:	5b 2b       	or	r21, r27
    2b5c:	22 97       	sbiw	r28, 0x02	; 2
    2b5e:	89 91       	ld	r24, Y+
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e0       	ldi	r26, 0x00	; 0
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	28 2b       	or	r18, r24
    2b68:	39 2b       	or	r19, r25
    2b6a:	4a 2b       	or	r20, r26
    2b6c:	5b 2b       	or	r21, r27
    2b6e:	98 81       	ld	r25, Y
    2b70:	c3 51       	subi	r28, 0x13	; 19
    2b72:	d2 40       	sbci	r29, 0x02	; 2
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	28 2b       	or	r18, r24
    2b7c:	39 2b       	or	r19, r25
    2b7e:	4a 2b       	or	r20, r26
    2b80:	5b 2b       	or	r21, r27
    2b82:	22 57       	subi	r18, 0x72	; 114
    2b84:	32 47       	sbci	r19, 0x72	; 114
    2b86:	41 44       	sbci	r20, 0x41	; 65
    2b88:	51 46       	sbci	r21, 0x61	; 97
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <chk_mounted+0x496>
    2b8c:	58 c0       	rjmp	.+176    	; 0x2c3e <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2b8e:	c3 5e       	subi	r28, 0xE3	; 227
    2b90:	dd 4f       	sbci	r29, 0xFD	; 253
    2b92:	28 81       	ld	r18, Y
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	52 2f       	mov	r21, r18
    2b9c:	44 27       	eor	r20, r20
    2b9e:	33 27       	eor	r19, r19
    2ba0:	22 27       	eor	r18, r18
    2ba2:	8a 91       	ld	r24, -Y
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	a0 e0       	ldi	r26, 0x00	; 0
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	dc 01       	movw	r26, r24
    2bac:	99 27       	eor	r25, r25
    2bae:	88 27       	eor	r24, r24
    2bb0:	28 2b       	or	r18, r24
    2bb2:	39 2b       	or	r19, r25
    2bb4:	4a 2b       	or	r20, r26
    2bb6:	5b 2b       	or	r21, r27
    2bb8:	22 97       	sbiw	r28, 0x02	; 2
    2bba:	89 91       	ld	r24, Y+
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e0       	ldi	r26, 0x00	; 0
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	28 2b       	or	r18, r24
    2bc4:	39 2b       	or	r19, r25
    2bc6:	4a 2b       	or	r20, r26
    2bc8:	5b 2b       	or	r21, r27
    2bca:	98 81       	ld	r25, Y
    2bcc:	cb 51       	subi	r28, 0x1B	; 27
    2bce:	d2 40       	sbci	r29, 0x02	; 2
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	28 2b       	or	r18, r24
    2bd8:	39 2b       	or	r19, r25
    2bda:	4a 2b       	or	r20, r26
    2bdc:	5b 2b       	or	r21, r27
    2bde:	2a 87       	std	Y+10, r18	; 0x0a
    2be0:	3b 87       	std	Y+11, r19	; 0x0b
    2be2:	4c 87       	std	Y+12, r20	; 0x0c
    2be4:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2be6:	c7 5e       	subi	r28, 0xE7	; 231
    2be8:	dd 4f       	sbci	r29, 0xFD	; 253
    2bea:	28 81       	ld	r18, Y
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	52 2f       	mov	r21, r18
    2bf4:	44 27       	eor	r20, r20
    2bf6:	33 27       	eor	r19, r19
    2bf8:	22 27       	eor	r18, r18
    2bfa:	8a 91       	ld	r24, -Y
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a0 e0       	ldi	r26, 0x00	; 0
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	dc 01       	movw	r26, r24
    2c04:	99 27       	eor	r25, r25
    2c06:	88 27       	eor	r24, r24
    2c08:	28 2b       	or	r18, r24
    2c0a:	39 2b       	or	r19, r25
    2c0c:	4a 2b       	or	r20, r26
    2c0e:	5b 2b       	or	r21, r27
    2c10:	22 97       	sbiw	r28, 0x02	; 2
    2c12:	89 91       	ld	r24, Y+
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e0       	ldi	r26, 0x00	; 0
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	28 2b       	or	r18, r24
    2c1c:	39 2b       	or	r19, r25
    2c1e:	4a 2b       	or	r20, r26
    2c20:	5b 2b       	or	r21, r27
    2c22:	98 81       	ld	r25, Y
    2c24:	c7 51       	subi	r28, 0x17	; 23
    2c26:	d2 40       	sbci	r29, 0x02	; 2
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	a0 e0       	ldi	r26, 0x00	; 0
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	28 2b       	or	r18, r24
    2c30:	39 2b       	or	r19, r25
    2c32:	4a 2b       	or	r20, r26
    2c34:	5b 2b       	or	r21, r27
    2c36:	2e 87       	std	Y+14, r18	; 0x0e
    2c38:	3f 87       	std	Y+15, r19	; 0x0f
    2c3a:	48 8b       	std	Y+16, r20	; 0x10
    2c3c:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2c3e:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2c40:	1a a6       	std	Y+42, r1	; 0x2a
    2c42:	1b a6       	std	Y+43, r1	; 0x2b
    2c44:	1c a6       	std	Y+44, r1	; 0x2c
    2c46:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2c48:	80 91 53 33 	lds	r24, 0x3353
    2c4c:	90 91 54 33 	lds	r25, 0x3354
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	80 93 53 33 	sts	0x3353, r24
    2c56:	90 93 54 33 	sts	0x3354, r25
    2c5a:	8e 83       	std	Y+6, r24	; 0x06
    2c5c:	9f 83       	std	Y+7, r25	; 0x07
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <chk_mounted+0x56c>

	return FR_OK;
    2c60:	8a e0       	ldi	r24, 0x0A	; 10
    2c62:	03 c0       	rjmp	.+6      	; 0x2c6a <chk_mounted+0x572>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <chk_mounted+0x572>
    2c68:	8d e0       	ldi	r24, 0x0D	; 13
}
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	df 90       	pop	r13
    2c78:	cf 90       	pop	r12
    2c7a:	bf 90       	pop	r11
    2c7c:	af 90       	pop	r10
    2c7e:	9f 90       	pop	r9
    2c80:	8f 90       	pop	r8
    2c82:	7f 90       	pop	r7
    2c84:	6f 90       	pop	r6
    2c86:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2c88:	c3 5a       	subi	r28, 0xA3	; 163
    2c8a:	df 4f       	sbci	r29, 0xFF	; 255
    2c8c:	28 81       	ld	r18, Y
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	52 2f       	mov	r21, r18
    2c96:	44 27       	eor	r20, r20
    2c98:	33 27       	eor	r19, r19
    2c9a:	22 27       	eor	r18, r18
    2c9c:	8a 91       	ld	r24, -Y
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e0       	ldi	r26, 0x00	; 0
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	99 27       	eor	r25, r25
    2ca8:	88 27       	eor	r24, r24
    2caa:	28 2b       	or	r18, r24
    2cac:	39 2b       	or	r19, r25
    2cae:	4a 2b       	or	r20, r26
    2cb0:	5b 2b       	or	r21, r27
    2cb2:	22 97       	sbiw	r28, 0x02	; 2
    2cb4:	89 91       	ld	r24, Y+
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	28 2b       	or	r18, r24
    2cbe:	39 2b       	or	r19, r25
    2cc0:	4a 2b       	or	r20, r26
    2cc2:	5b 2b       	or	r21, r27
    2cc4:	98 81       	ld	r25, Y
    2cc6:	cb 55       	subi	r28, 0x5B	; 91
    2cc8:	d0 40       	sbci	r29, 0x00	; 0
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	28 2b       	or	r18, r24
    2cd2:	39 2b       	or	r19, r25
    2cd4:	4a 2b       	or	r20, r26
    2cd6:	5b 2b       	or	r21, r27
    2cd8:	2a a3       	std	Y+34, r18	; 0x22
    2cda:	3b a3       	std	Y+35, r19	; 0x23
    2cdc:	4c a3       	std	Y+36, r20	; 0x24
    2cde:	5d a3       	std	Y+37, r21	; 0x25
    2ce0:	13 e0       	ldi	r17, 0x03	; 3
    2ce2:	ac ce       	rjmp	.-680    	; 0x2a3c <chk_mounted+0x344>

00002ce4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2ce4:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	a9 f0       	breq	.+42     	; 0x2d14 <validate+0x30>
    2cea:	80 81       	ld	r24, Z
    2cec:	88 23       	and	r24, r24
    2cee:	91 f0       	breq	.+36     	; 0x2d14 <validate+0x30>
    2cf0:	86 81       	ldd	r24, Z+6	; 0x06
    2cf2:	97 81       	ldd	r25, Z+7	; 0x07
    2cf4:	86 17       	cp	r24, r22
    2cf6:	97 07       	cpc	r25, r23
    2cf8:	69 f4       	brne	.+26     	; 0x2d14 <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2cfa:	81 81       	ldd	r24, Z+1	; 0x01
    2cfc:	88 23       	and	r24, r24
    2cfe:	11 f0       	breq	.+4      	; 0x2d04 <validate+0x20>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <validate+0x24>
	return Stat;
    2d04:	80 91 77 32 	lds	r24, 0x3277
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2d08:	80 fd       	sbrc	r24, 0
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <validate+0x2c>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	08 95       	ret
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	08 95       	ret
    2d14:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2d16:	08 95       	ret

00002d18 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2d1e:	82 30       	cpi	r24, 0x02	; 2
    2d20:	10 f0       	brcs	.+4      	; 0x2d26 <f_mount+0xe>
    2d22:	8b e0       	ldi	r24, 0x0B	; 11
    2d24:	17 c0       	rjmp	.+46     	; 0x2d54 <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2d26:	a8 2f       	mov	r26, r24
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	fd 01       	movw	r30, r26
    2d2c:	ee 0f       	add	r30, r30
    2d2e:	ff 1f       	adc	r31, r31
    2d30:	e1 5b       	subi	r30, 0xB1	; 177
    2d32:	fc 4c       	sbci	r31, 0xCC	; 204
    2d34:	01 90       	ld	r0, Z+
    2d36:	f0 81       	ld	r31, Z
    2d38:	e0 2d       	mov	r30, r0

	if (rfs) {
    2d3a:	30 97       	sbiw	r30, 0x00	; 0
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2d3e:	10 82       	st	Z, r1
	}

	if (fs) {
    2d40:	20 97       	sbiw	r28, 0x00	; 0
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2d44:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2d46:	aa 0f       	add	r26, r26
    2d48:	bb 1f       	adc	r27, r27
    2d4a:	a1 5b       	subi	r26, 0xB1	; 177
    2d4c:	bc 4c       	sbci	r27, 0xCC	; 204
    2d4e:	cd 93       	st	X+, r28
    2d50:	dc 93       	st	X, r29
    2d52:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d5a:	5f 92       	push	r5
    2d5c:	6f 92       	push	r6
    2d5e:	7f 92       	push	r7
    2d60:	8f 92       	push	r8
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	a4 97       	sbiw	r28, 0x24	; 36
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	3c 01       	movw	r6, r24
    2d84:	6b a3       	std	Y+35, r22	; 0x23
    2d86:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2d88:	dc 01       	movw	r26, r24
    2d8a:	1d 92       	st	X+, r1
    2d8c:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2d8e:	3f e1       	ldi	r19, 0x1F	; 31
    2d90:	53 2e       	mov	r5, r19
    2d92:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2d94:	8e 01       	movw	r16, r28
    2d96:	03 5f       	subi	r16, 0xF3	; 243
    2d98:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9a:	4e 71       	andi	r20, 0x1E	; 30
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	83 96       	adiw	r24, 0x23	; 35
    2da0:	b8 01       	movw	r22, r16
    2da2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2da6:	88 23       	and	r24, r24
    2da8:	11 f0       	breq	.+4      	; 0x2dae <f_open+0x54>
    2daa:	28 2f       	mov	r18, r24
    2dac:	32 c1       	rjmp	.+612    	; 0x3012 <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2dae:	ce 01       	movw	r24, r28
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	89 a3       	std	Y+33, r24	; 0x21
    2db4:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2db6:	6b a1       	ldd	r22, Y+35	; 0x23
    2db8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dba:	c8 01       	movw	r24, r16
    2dbc:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
    2dc0:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2dc2:	45 2d       	mov	r20, r5
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	ca 01       	movw	r24, r20
    2dc8:	8c 71       	andi	r24, 0x1C	; 28
    2dca:	90 70       	andi	r25, 0x00	; 0
    2dcc:	89 2b       	or	r24, r25
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <f_open+0x78>
    2dd0:	84 c0       	rjmp	.+264    	; 0x2eda <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2dd2:	22 23       	and	r18, r18
    2dd4:	79 f0       	breq	.+30     	; 0x2df4 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2dd6:	24 30       	cpi	r18, 0x04	; 4
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <f_open+0x82>
    2dda:	1b c1       	rjmp	.+566    	; 0x3012 <f_open+0x2b8>
				res = dir_register(&dj);
    2ddc:	c8 01       	movw	r24, r16
    2dde:	0e 94 9f 10 	call	0x213e	; 0x213e <dir_register>
    2de2:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2de4:	88 23       	and	r24, r24
    2de6:	09 f0       	breq	.+2      	; 0x2dea <f_open+0x90>
    2de8:	14 c1       	rjmp	.+552    	; 0x3012 <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2dea:	b8 e0       	ldi	r27, 0x08	; 8
    2dec:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2dee:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2df0:	18 a1       	ldd	r17, Y+32	; 0x20
    2df2:	5b c0       	rjmp	.+182    	; 0x2eaa <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2df4:	52 fe       	sbrs	r5, 2
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <f_open+0xa2>
    2df8:	28 e0       	ldi	r18, 0x08	; 8
    2dfa:	0b c1       	rjmp	.+534    	; 0x3012 <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2dfc:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2dfe:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2e00:	01 15       	cp	r16, r1
    2e02:	11 05       	cpc	r17, r1
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <f_open+0xae>
    2e06:	02 c1       	rjmp	.+516    	; 0x300c <f_open+0x2b2>
    2e08:	f8 01       	movw	r30, r16
    2e0a:	83 85       	ldd	r24, Z+11	; 0x0b
    2e0c:	81 71       	andi	r24, 0x11	; 17
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <f_open+0xb8>
    2e10:	fd c0       	rjmp	.+506    	; 0x300c <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2e12:	53 fe       	sbrs	r5, 3
    2e14:	4a c0       	rjmp	.+148    	; 0x2eaa <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2e16:	95 89       	ldd	r25, Z+21	; 0x15
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	24 89       	ldd	r18, Z+20	; 0x14
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	82 2b       	or	r24, r18
    2e20:	93 2b       	or	r25, r19
    2e22:	a0 e0       	ldi	r26, 0x00	; 0
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	7c 01       	movw	r14, r24
    2e28:	dd 24       	eor	r13, r13
    2e2a:	cc 24       	eor	r12, r12
    2e2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	82 2b       	or	r24, r18
    2e36:	93 2b       	or	r25, r19
    2e38:	a0 e0       	ldi	r26, 0x00	; 0
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	c8 2a       	or	r12, r24
    2e3e:	d9 2a       	or	r13, r25
    2e40:	ea 2a       	or	r14, r26
    2e42:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2e44:	14 8a       	std	Z+20, r1	; 0x14
    2e46:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2e48:	12 8e       	std	Z+26, r1	; 0x1a
    2e4a:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2e4c:	14 8e       	std	Z+28, r1	; 0x1c
    2e4e:	15 8e       	std	Z+29, r1	; 0x1d
    2e50:	16 8e       	std	Z+30, r1	; 0x1e
    2e52:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2e54:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e56:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2e5c:	82 a4       	ldd	r8, Z+42	; 0x2a
    2e5e:	93 a4       	ldd	r9, Z+43	; 0x2b
    2e60:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2e62:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2e64:	c1 14       	cp	r12, r1
    2e66:	d1 04       	cpc	r13, r1
    2e68:	e1 04       	cpc	r14, r1
    2e6a:	f1 04       	cpc	r15, r1
    2e6c:	a1 f0       	breq	.+40     	; 0x2e96 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2e6e:	cf 01       	movw	r24, r30
    2e70:	b7 01       	movw	r22, r14
    2e72:	a6 01       	movw	r20, r12
    2e74:	0e 94 47 0c 	call	0x188e	; 0x188e <remove_chain>
    2e78:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2e7a:	88 23       	and	r24, r24
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <f_open+0x126>
    2e7e:	c9 c0       	rjmp	.+402    	; 0x3012 <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2e80:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e82:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e84:	08 94       	sec
    2e86:	c1 08       	sbc	r12, r1
    2e88:	d1 08       	sbc	r13, r1
    2e8a:	e1 08       	sbc	r14, r1
    2e8c:	f1 08       	sbc	r15, r1
    2e8e:	c2 86       	std	Z+10, r12	; 0x0a
    2e90:	d3 86       	std	Z+11, r13	; 0x0b
    2e92:	e4 86       	std	Z+12, r14	; 0x0c
    2e94:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	b5 01       	movw	r22, r10
    2e9c:	a4 01       	movw	r20, r8
    2e9e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    2ea2:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2ea4:	88 23       	and	r24, r24
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <f_open+0x150>
    2ea8:	b4 c0       	rjmp	.+360    	; 0x3012 <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2eaa:	53 fe       	sbrs	r5, 3
    2eac:	27 c0       	rjmp	.+78     	; 0x2efc <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2eae:	d8 01       	movw	r26, r16
    2eb0:	1b 96       	adiw	r26, 0x0b	; 11
    2eb2:	1c 92       	st	X, r1
    2eb4:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2eb6:	1e 96       	adiw	r26, 0x0e	; 14
    2eb8:	1c 92       	st	X, r1
    2eba:	1e 97       	sbiw	r26, 0x0e	; 14
    2ebc:	1f 96       	adiw	r26, 0x0f	; 15
    2ebe:	1c 92       	st	X, r1
    2ec0:	1f 97       	sbiw	r26, 0x0f	; 15
    2ec2:	50 96       	adiw	r26, 0x10	; 16
    2ec4:	1c 92       	st	X, r1
    2ec6:	50 97       	sbiw	r26, 0x10	; 16
    2ec8:	51 96       	adiw	r26, 0x11	; 17
    2eca:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2ecc:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ece:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2ed4:	b0 e2       	ldi	r27, 0x20	; 32
    2ed6:	5b 2a       	or	r5, r27
    2ed8:	11 c0       	rjmp	.+34     	; 0x2efc <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2eda:	22 23       	and	r18, r18
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <f_open+0x186>
    2ede:	99 c0       	rjmp	.+306    	; 0x3012 <f_open+0x2b8>
		dir = dj.dir;
    2ee0:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2ee2:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2ee4:	01 15       	cp	r16, r1
    2ee6:	11 05       	cpc	r17, r1
    2ee8:	09 f4       	brne	.+2      	; 0x2eec <f_open+0x192>
    2eea:	92 c0       	rjmp	.+292    	; 0x3010 <f_open+0x2b6>
    2eec:	f8 01       	movw	r30, r16
    2eee:	83 85       	ldd	r24, Z+11	; 0x0b
    2ef0:	84 fd       	sbrc	r24, 4
    2ef2:	8e c0       	rjmp	.+284    	; 0x3010 <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2ef4:	51 fe       	sbrs	r5, 1
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <f_open+0x1a2>
    2ef8:	80 fd       	sbrc	r24, 0
    2efa:	88 c0       	rjmp	.+272    	; 0x300c <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2efc:	ed 85       	ldd	r30, Y+13	; 0x0d
    2efe:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f00:	22 a5       	ldd	r18, Z+42	; 0x2a
    2f02:	33 a5       	ldd	r19, Z+43	; 0x2b
    2f04:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f06:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f08:	d3 01       	movw	r26, r6
    2f0a:	5a 96       	adiw	r26, 0x1a	; 26
    2f0c:	2d 93       	st	X+, r18
    2f0e:	3d 93       	st	X+, r19
    2f10:	4d 93       	st	X+, r20
    2f12:	5c 93       	st	X, r21
    2f14:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2f16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f18:	98 a1       	ldd	r25, Y+32	; 0x20
    2f1a:	5e 96       	adiw	r26, 0x1e	; 30
    2f1c:	8d 93       	st	X+, r24
    2f1e:	9c 93       	st	X, r25
    2f20:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2f22:	14 96       	adiw	r26, 0x04	; 4
    2f24:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2f26:	d8 01       	movw	r26, r16
    2f28:	55 96       	adiw	r26, 0x15	; 21
    2f2a:	3c 91       	ld	r19, X
    2f2c:	55 97       	sbiw	r26, 0x15	; 21
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	54 96       	adiw	r26, 0x14	; 20
    2f32:	8c 91       	ld	r24, X
    2f34:	54 97       	sbiw	r26, 0x14	; 20
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	28 2b       	or	r18, r24
    2f3a:	39 2b       	or	r19, r25
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	a9 01       	movw	r20, r18
    2f42:	33 27       	eor	r19, r19
    2f44:	22 27       	eor	r18, r18
    2f46:	5b 96       	adiw	r26, 0x1b	; 27
    2f48:	9c 91       	ld	r25, X
    2f4a:	5b 97       	sbiw	r26, 0x1b	; 27
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	5a 96       	adiw	r26, 0x1a	; 26
    2f50:	6c 91       	ld	r22, X
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	86 2b       	or	r24, r22
    2f56:	97 2b       	or	r25, r23
    2f58:	a0 e0       	ldi	r26, 0x00	; 0
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	28 2b       	or	r18, r24
    2f5e:	39 2b       	or	r19, r25
    2f60:	4a 2b       	or	r20, r26
    2f62:	5b 2b       	or	r21, r27
    2f64:	d3 01       	movw	r26, r6
    2f66:	1e 96       	adiw	r26, 0x0e	; 14
    2f68:	2d 93       	st	X+, r18
    2f6a:	3d 93       	st	X+, r19
    2f6c:	4d 93       	st	X+, r20
    2f6e:	5c 93       	st	X, r21
    2f70:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2f72:	d8 01       	movw	r26, r16
    2f74:	5f 96       	adiw	r26, 0x1f	; 31
    2f76:	2c 91       	ld	r18, X
    2f78:	5f 97       	sbiw	r26, 0x1f	; 31
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	52 2f       	mov	r21, r18
    2f82:	44 27       	eor	r20, r20
    2f84:	33 27       	eor	r19, r19
    2f86:	22 27       	eor	r18, r18
    2f88:	5e 96       	adiw	r26, 0x1e	; 30
    2f8a:	8c 91       	ld	r24, X
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a0 e0       	ldi	r26, 0x00	; 0
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	dc 01       	movw	r26, r24
    2f94:	99 27       	eor	r25, r25
    2f96:	88 27       	eor	r24, r24
    2f98:	28 2b       	or	r18, r24
    2f9a:	39 2b       	or	r19, r25
    2f9c:	4a 2b       	or	r20, r26
    2f9e:	5b 2b       	or	r21, r27
    2fa0:	d8 01       	movw	r26, r16
    2fa2:	5c 96       	adiw	r26, 0x1c	; 28
    2fa4:	8c 91       	ld	r24, X
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e0       	ldi	r26, 0x00	; 0
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	28 2b       	or	r18, r24
    2fae:	39 2b       	or	r19, r25
    2fb0:	4a 2b       	or	r20, r26
    2fb2:	5b 2b       	or	r21, r27
    2fb4:	d8 01       	movw	r26, r16
    2fb6:	5d 96       	adiw	r26, 0x1d	; 29
    2fb8:	9c 91       	ld	r25, X
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	28 2b       	or	r18, r24
    2fc2:	39 2b       	or	r19, r25
    2fc4:	4a 2b       	or	r20, r26
    2fc6:	5b 2b       	or	r21, r27
    2fc8:	d3 01       	movw	r26, r6
    2fca:	1a 96       	adiw	r26, 0x0a	; 10
    2fcc:	2d 93       	st	X+, r18
    2fce:	3d 93       	st	X+, r19
    2fd0:	4d 93       	st	X+, r20
    2fd2:	5c 93       	st	X, r21
    2fd4:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2fd6:	16 96       	adiw	r26, 0x06	; 6
    2fd8:	1d 92       	st	X+, r1
    2fda:	1d 92       	st	X+, r1
    2fdc:	1d 92       	st	X+, r1
    2fde:	1c 92       	st	X, r1
    2fe0:	19 97       	sbiw	r26, 0x09	; 9
    2fe2:	8f ef       	ldi	r24, 0xFF	; 255
    2fe4:	15 96       	adiw	r26, 0x05	; 5
    2fe6:	8c 93       	st	X, r24
    2fe8:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2fea:	56 96       	adiw	r26, 0x16	; 22
    2fec:	1d 92       	st	X+, r1
    2fee:	1d 92       	st	X+, r1
    2ff0:	1d 92       	st	X+, r1
    2ff2:	1c 92       	st	X, r1
    2ff4:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2ff6:	ed 93       	st	X+, r30
    2ff8:	fc 93       	st	X, r31
    2ffa:	11 97       	sbiw	r26, 0x01	; 1
    2ffc:	86 81       	ldd	r24, Z+6	; 0x06
    2ffe:	97 81       	ldd	r25, Z+7	; 0x07
    3000:	12 96       	adiw	r26, 0x02	; 2
    3002:	8d 93       	st	X+, r24
    3004:	9c 93       	st	X, r25
    3006:	13 97       	sbiw	r26, 0x03	; 3
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    300c:	27 e0       	ldi	r18, 0x07	; 7
    300e:	01 c0       	rjmp	.+2      	; 0x3012 <f_open+0x2b8>
    3010:	24 e0       	ldi	r18, 0x04	; 4
}
    3012:	82 2f       	mov	r24, r18
    3014:	a4 96       	adiw	r28, 0x24	; 36
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	ff 90       	pop	r15
    3024:	ef 90       	pop	r14
    3026:	df 90       	pop	r13
    3028:	cf 90       	pop	r12
    302a:	bf 90       	pop	r11
    302c:	af 90       	pop	r10
    302e:	9f 90       	pop	r9
    3030:	8f 90       	pop	r8
    3032:	7f 90       	pop	r7
    3034:	6f 90       	pop	r6
    3036:	5f 90       	pop	r5
    3038:	08 95       	ret

0000303a <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    303a:	2f 92       	push	r2
    303c:	3f 92       	push	r3
    303e:	4f 92       	push	r4
    3040:	5f 92       	push	r5
    3042:	6f 92       	push	r6
    3044:	7f 92       	push	r7
    3046:	8f 92       	push	r8
    3048:	9f 92       	push	r9
    304a:	af 92       	push	r10
    304c:	bf 92       	push	r11
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ef 92       	push	r14
    3054:	ff 92       	push	r15
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <f_read+0x26>
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	8b 83       	std	Y+3, r24	; 0x03
    3068:	9c 83       	std	Y+4, r25	; 0x04
    306a:	16 2f       	mov	r17, r22
    306c:	07 2f       	mov	r16, r23
    306e:	4a 01       	movw	r8, r20
    3070:	29 83       	std	Y+1, r18	; 0x01
    3072:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    3074:	d9 01       	movw	r26, r18
    3076:	1d 92       	st	X+, r1
    3078:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    307a:	fc 01       	movw	r30, r24
    307c:	62 81       	ldd	r22, Z+2	; 0x02
    307e:	73 81       	ldd	r23, Z+3	; 0x03
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
    3084:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <validate>
    3088:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    308a:	88 23       	and	r24, r24
    308c:	09 f0       	breq	.+2      	; 0x3090 <f_read+0x56>
    308e:	b4 c1       	rjmp	.+872    	; 0x33f8 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3090:	ab 81       	ldd	r26, Y+3	; 0x03
    3092:	bc 81       	ldd	r27, Y+4	; 0x04
    3094:	14 96       	adiw	r26, 0x04	; 4
    3096:	8c 91       	ld	r24, X
    3098:	87 fd       	sbrc	r24, 7
    309a:	66 c0       	rjmp	.+204    	; 0x3168 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    309c:	80 fd       	sbrc	r24, 0
    309e:	03 c0       	rjmp	.+6      	; 0x30a6 <f_read+0x6c>
    30a0:	a7 e0       	ldi	r26, 0x07	; 7
    30a2:	7a 2e       	mov	r7, r26
    30a4:	a9 c1       	rjmp	.+850    	; 0x33f8 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    30a6:	eb 81       	ldd	r30, Y+3	; 0x03
    30a8:	fc 81       	ldd	r31, Y+4	; 0x04
    30aa:	22 85       	ldd	r18, Z+10	; 0x0a
    30ac:	33 85       	ldd	r19, Z+11	; 0x0b
    30ae:	44 85       	ldd	r20, Z+12	; 0x0c
    30b0:	55 85       	ldd	r21, Z+13	; 0x0d
    30b2:	86 81       	ldd	r24, Z+6	; 0x06
    30b4:	97 81       	ldd	r25, Z+7	; 0x07
    30b6:	a0 85       	ldd	r26, Z+8	; 0x08
    30b8:	b1 85       	ldd	r27, Z+9	; 0x09
    30ba:	28 1b       	sub	r18, r24
    30bc:	39 0b       	sbc	r19, r25
    30be:	4a 0b       	sbc	r20, r26
    30c0:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    30c2:	c4 01       	movw	r24, r8
    30c4:	a0 e0       	ldi	r26, 0x00	; 0
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	28 17       	cp	r18, r24
    30ca:	39 07       	cpc	r19, r25
    30cc:	4a 07       	cpc	r20, r26
    30ce:	5b 07       	cpc	r21, r27
    30d0:	08 f4       	brcc	.+2      	; 0x30d4 <f_read+0x9a>
    30d2:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    30d4:	81 2f       	mov	r24, r17
    30d6:	90 2f       	mov	r25, r16
    30d8:	9c 01       	movw	r18, r24
    30da:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    30dc:	f0 e2       	ldi	r31, 0x20	; 32
    30de:	2f 2e       	mov	r2, r31
    30e0:	31 2c       	mov	r3, r1
    30e2:	6b 81       	ldd	r22, Y+3	; 0x03
    30e4:	7c 81       	ldd	r23, Y+4	; 0x04
    30e6:	26 0e       	add	r2, r22
    30e8:	37 1e       	adc	r3, r23
    30ea:	82 c1       	rjmp	.+772    	; 0x33f0 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    30ec:	ab 81       	ldd	r26, Y+3	; 0x03
    30ee:	bc 81       	ldd	r27, Y+4	; 0x04
    30f0:	16 96       	adiw	r26, 0x06	; 6
    30f2:	2d 91       	ld	r18, X+
    30f4:	3d 91       	ld	r19, X+
    30f6:	4d 91       	ld	r20, X+
    30f8:	5c 91       	ld	r21, X
    30fa:	19 97       	sbiw	r26, 0x09	; 9
    30fc:	da 01       	movw	r26, r20
    30fe:	c9 01       	movw	r24, r18
    3100:	91 70       	andi	r25, 0x01	; 1
    3102:	a0 70       	andi	r26, 0x00	; 0
    3104:	b0 70       	andi	r27, 0x00	; 0
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	a1 05       	cpc	r26, r1
    310a:	b1 05       	cpc	r27, r1
    310c:	09 f0       	breq	.+2      	; 0x3110 <f_read+0xd6>
    310e:	2c c1       	rjmp	.+600    	; 0x3368 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3110:	ab 81       	ldd	r26, Y+3	; 0x03
    3112:	bc 81       	ldd	r27, Y+4	; 0x04
    3114:	ed 91       	ld	r30, X+
    3116:	fc 91       	ld	r31, X
    3118:	11 97       	sbiw	r26, 0x01	; 1
    311a:	15 96       	adiw	r26, 0x05	; 5
    311c:	9c 91       	ld	r25, X
    311e:	15 97       	sbiw	r26, 0x05	; 5
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	98 17       	cp	r25, r24
    3124:	a0 f1       	brcs	.+104    	; 0x318e <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    3126:	21 15       	cp	r18, r1
    3128:	31 05       	cpc	r19, r1
    312a:	41 05       	cpc	r20, r1
    312c:	51 05       	cpc	r21, r1
    312e:	39 f4       	brne	.+14     	; 0x313e <f_read+0x104>
    3130:	1e 96       	adiw	r26, 0x0e	; 14
    3132:	6d 91       	ld	r22, X+
    3134:	7d 91       	ld	r23, X+
    3136:	8d 91       	ld	r24, X+
    3138:	9c 91       	ld	r25, X
    313a:	51 97       	sbiw	r26, 0x11	; 17
    313c:	0b c0       	rjmp	.+22     	; 0x3154 <f_read+0x11a>
    313e:	ab 81       	ldd	r26, Y+3	; 0x03
    3140:	bc 81       	ldd	r27, Y+4	; 0x04
    3142:	52 96       	adiw	r26, 0x12	; 18
    3144:	4d 91       	ld	r20, X+
    3146:	5d 91       	ld	r21, X+
    3148:	6d 91       	ld	r22, X+
    314a:	7c 91       	ld	r23, X
    314c:	55 97       	sbiw	r26, 0x15	; 21
    314e:	cf 01       	movw	r24, r30
    3150:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3154:	62 30       	cpi	r22, 0x02	; 2
    3156:	71 05       	cpc	r23, r1
    3158:	81 05       	cpc	r24, r1
    315a:	91 05       	cpc	r25, r1
    315c:	40 f4       	brcc	.+16     	; 0x316e <f_read+0x134>
    315e:	eb 81       	ldd	r30, Y+3	; 0x03
    3160:	fc 81       	ldd	r31, Y+4	; 0x04
    3162:	84 81       	ldd	r24, Z+4	; 0x04
    3164:	80 68       	ori	r24, 0x80	; 128
    3166:	84 83       	std	Z+4, r24	; 0x04
    3168:	e2 e0       	ldi	r30, 0x02	; 2
    316a:	7e 2e       	mov	r7, r30
    316c:	45 c1       	rjmp	.+650    	; 0x33f8 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    316e:	6f 3f       	cpi	r22, 0xFF	; 255
    3170:	ff ef       	ldi	r31, 0xFF	; 255
    3172:	7f 07       	cpc	r23, r31
    3174:	ff ef       	ldi	r31, 0xFF	; 255
    3176:	8f 07       	cpc	r24, r31
    3178:	ff ef       	ldi	r31, 0xFF	; 255
    317a:	9f 07       	cpc	r25, r31
    317c:	09 f4       	brne	.+2      	; 0x3180 <f_read+0x146>
    317e:	e0 c0       	rjmp	.+448    	; 0x3340 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    3180:	eb 81       	ldd	r30, Y+3	; 0x03
    3182:	fc 81       	ldd	r31, Y+4	; 0x04
    3184:	62 8b       	std	Z+18, r22	; 0x12
    3186:	73 8b       	std	Z+19, r23	; 0x13
    3188:	84 8b       	std	Z+20, r24	; 0x14
    318a:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    318c:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    318e:	ab 81       	ldd	r26, Y+3	; 0x03
    3190:	bc 81       	ldd	r27, Y+4	; 0x04
    3192:	0d 91       	ld	r16, X+
    3194:	1c 91       	ld	r17, X
    3196:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3198:	52 96       	adiw	r26, 0x12	; 18
    319a:	2d 91       	ld	r18, X+
    319c:	3d 91       	ld	r19, X+
    319e:	4d 91       	ld	r20, X+
    31a0:	5c 91       	ld	r21, X
    31a2:	55 97       	sbiw	r26, 0x15	; 21
    31a4:	22 50       	subi	r18, 0x02	; 2
    31a6:	30 40       	sbci	r19, 0x00	; 0
    31a8:	40 40       	sbci	r20, 0x00	; 0
    31aa:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    31ac:	f8 01       	movw	r30, r16
    31ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    31b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    31b2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    31b4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    31b6:	02 97       	sbiw	r24, 0x02	; 2
    31b8:	a1 09       	sbc	r26, r1
    31ba:	b1 09       	sbc	r27, r1
    31bc:	28 17       	cp	r18, r24
    31be:	39 07       	cpc	r19, r25
    31c0:	4a 07       	cpc	r20, r26
    31c2:	5b 07       	cpc	r21, r27
    31c4:	b8 f4       	brcc	.+46     	; 0x31f4 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    31c6:	62 80       	ldd	r6, Z+2	; 0x02
    31c8:	66 2d       	mov	r22, r6
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    31d4:	9b 01       	movw	r18, r22
    31d6:	ac 01       	movw	r20, r24
    31d8:	f8 01       	movw	r30, r16
    31da:	86 a1       	ldd	r24, Z+38	; 0x26
    31dc:	97 a1       	ldd	r25, Z+39	; 0x27
    31de:	a0 a5       	ldd	r26, Z+40	; 0x28
    31e0:	b1 a5       	ldd	r27, Z+41	; 0x29
    31e2:	28 0f       	add	r18, r24
    31e4:	39 1f       	adc	r19, r25
    31e6:	4a 1f       	adc	r20, r26
    31e8:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    31ea:	21 15       	cp	r18, r1
    31ec:	31 05       	cpc	r19, r1
    31ee:	41 05       	cpc	r20, r1
    31f0:	51 05       	cpc	r21, r1
    31f2:	49 f4       	brne	.+18     	; 0x3206 <f_read+0x1cc>
    31f4:	ab 81       	ldd	r26, Y+3	; 0x03
    31f6:	bc 81       	ldd	r27, Y+4	; 0x04
    31f8:	14 96       	adiw	r26, 0x04	; 4
    31fa:	8c 91       	ld	r24, X
    31fc:	14 97       	sbiw	r26, 0x04	; 4
    31fe:	80 68       	ori	r24, 0x80	; 128
    3200:	14 96       	adiw	r26, 0x04	; 4
    3202:	8c 93       	st	X, r24
    3204:	b1 cf       	rjmp	.-158    	; 0x3168 <f_read+0x12e>
			sect += fp->csect;
    3206:	eb 81       	ldd	r30, Y+3	; 0x03
    3208:	fc 81       	ldd	r31, Y+4	; 0x04
    320a:	85 81       	ldd	r24, Z+5	; 0x05
    320c:	59 01       	movw	r10, r18
    320e:	6a 01       	movw	r12, r20
    3210:	a8 0e       	add	r10, r24
    3212:	b1 1c       	adc	r11, r1
    3214:	c1 1c       	adc	r12, r1
    3216:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3218:	74 01       	movw	r14, r8
    321a:	ef 2c       	mov	r14, r15
    321c:	ff 24       	eor	r15, r15
    321e:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    3220:	e1 14       	cp	r14, r1
    3222:	f1 04       	cpc	r15, r1
    3224:	09 f4       	brne	.+2      	; 0x3228 <f_read+0x1ee>
    3226:	53 c0       	rjmp	.+166    	; 0x32ce <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	c7 01       	movw	r24, r14
    322e:	82 0f       	add	r24, r18
    3230:	93 1f       	adc	r25, r19
    3232:	66 2d       	mov	r22, r6
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	68 17       	cp	r22, r24
    3238:	79 07       	cpc	r23, r25
    323a:	18 f4       	brcc	.+6      	; 0x3242 <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    323c:	7b 01       	movw	r14, r22
    323e:	e2 1a       	sub	r14, r18
    3240:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    3242:	d8 01       	movw	r26, r16
    3244:	11 96       	adiw	r26, 0x01	; 1
    3246:	8c 91       	ld	r24, X
    3248:	b2 01       	movw	r22, r4
    324a:	a6 01       	movw	r20, r12
    324c:	95 01       	movw	r18, r10
    324e:	0e 2d       	mov	r16, r14
    3250:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    3254:	eb 81       	ldd	r30, Y+3	; 0x03
    3256:	fc 81       	ldd	r31, Y+4	; 0x04
    3258:	94 81       	ldd	r25, Z+4	; 0x04
    325a:	88 23       	and	r24, r24
    325c:	19 f0       	breq	.+6      	; 0x3264 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    325e:	90 68       	ori	r25, 0x80	; 128
    3260:	94 83       	std	Z+4, r25	; 0x04
    3262:	76 c0       	rjmp	.+236    	; 0x3350 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3264:	96 ff       	sbrs	r25, 6
    3266:	29 c0       	rjmp	.+82     	; 0x32ba <f_read+0x280>
    3268:	ab 81       	ldd	r26, Y+3	; 0x03
    326a:	bc 81       	ldd	r27, Y+4	; 0x04
    326c:	56 96       	adiw	r26, 0x16	; 22
    326e:	2d 91       	ld	r18, X+
    3270:	3d 91       	ld	r19, X+
    3272:	4d 91       	ld	r20, X+
    3274:	5c 91       	ld	r21, X
    3276:	59 97       	sbiw	r26, 0x19	; 25
    3278:	2a 19       	sub	r18, r10
    327a:	3b 09       	sbc	r19, r11
    327c:	4c 09       	sbc	r20, r12
    327e:	5d 09       	sbc	r21, r13
    3280:	c7 01       	movw	r24, r14
    3282:	a0 e0       	ldi	r26, 0x00	; 0
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	28 17       	cp	r18, r24
    3288:	39 07       	cpc	r19, r25
    328a:	4a 07       	cpc	r20, r26
    328c:	5b 07       	cpc	r21, r27
    328e:	a8 f4       	brcc	.+42     	; 0x32ba <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3290:	69 e0       	ldi	r22, 0x09	; 9
    3292:	22 0f       	add	r18, r18
    3294:	33 1f       	adc	r19, r19
    3296:	44 1f       	adc	r20, r20
    3298:	55 1f       	adc	r21, r21
    329a:	6a 95       	dec	r22
    329c:	d1 f7       	brne	.-12     	; 0x3292 <f_read+0x258>
    329e:	c2 01       	movw	r24, r4
    32a0:	82 0f       	add	r24, r18
    32a2:	93 1f       	adc	r25, r19
    32a4:	d1 01       	movw	r26, r2
    32a6:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    32a8:	9c 01       	movw	r18, r24
    32aa:	20 50       	subi	r18, 0x00	; 0
    32ac:	3e 4f       	sbci	r19, 0xFE	; 254
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <f_read+0x27a>
    32b0:	8d 91       	ld	r24, X+
    32b2:	81 93       	st	Z+, r24
    32b4:	e2 17       	cp	r30, r18
    32b6:	f3 07       	cpc	r31, r19
    32b8:	d9 f7       	brne	.-10     	; 0x32b0 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    32ba:	eb 81       	ldd	r30, Y+3	; 0x03
    32bc:	fc 81       	ldd	r31, Y+4	; 0x04
    32be:	85 81       	ldd	r24, Z+5	; 0x05
    32c0:	8e 0d       	add	r24, r14
    32c2:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    32c4:	b7 01       	movw	r22, r14
    32c6:	76 2f       	mov	r23, r22
    32c8:	66 27       	eor	r22, r22
    32ca:	77 0f       	add	r23, r23
    32cc:	74 c0       	rjmp	.+232    	; 0x33b6 <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    32ce:	ab 81       	ldd	r26, Y+3	; 0x03
    32d0:	bc 81       	ldd	r27, Y+4	; 0x04
    32d2:	14 96       	adiw	r26, 0x04	; 4
    32d4:	8c 91       	ld	r24, X
    32d6:	14 97       	sbiw	r26, 0x04	; 4
    32d8:	86 ff       	sbrs	r24, 6
    32da:	1b c0       	rjmp	.+54     	; 0x3312 <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    32dc:	56 96       	adiw	r26, 0x16	; 22
    32de:	2d 91       	ld	r18, X+
    32e0:	3d 91       	ld	r19, X+
    32e2:	4d 91       	ld	r20, X+
    32e4:	5c 91       	ld	r21, X
    32e6:	59 97       	sbiw	r26, 0x19	; 25
    32e8:	f8 01       	movw	r30, r16
    32ea:	81 81       	ldd	r24, Z+1	; 0x01
    32ec:	b1 01       	movw	r22, r2
    32ee:	01 e0       	ldi	r16, 0x01	; 1
    32f0:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    32f4:	ab 81       	ldd	r26, Y+3	; 0x03
    32f6:	bc 81       	ldd	r27, Y+4	; 0x04
    32f8:	14 96       	adiw	r26, 0x04	; 4
    32fa:	9c 91       	ld	r25, X
    32fc:	14 97       	sbiw	r26, 0x04	; 4
    32fe:	88 23       	and	r24, r24
    3300:	21 f0       	breq	.+8      	; 0x330a <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    3302:	90 68       	ori	r25, 0x80	; 128
    3304:	14 96       	adiw	r26, 0x04	; 4
    3306:	9c 93       	st	X, r25
    3308:	23 c0       	rjmp	.+70     	; 0x3350 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    330a:	9f 7b       	andi	r25, 0xBF	; 191
    330c:	eb 81       	ldd	r30, Y+3	; 0x03
    330e:	fc 81       	ldd	r31, Y+4	; 0x04
    3310:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    3312:	eb 81       	ldd	r30, Y+3	; 0x03
    3314:	fc 81       	ldd	r31, Y+4	; 0x04
    3316:	86 89       	ldd	r24, Z+22	; 0x16
    3318:	97 89       	ldd	r25, Z+23	; 0x17
    331a:	a0 8d       	ldd	r26, Z+24	; 0x18
    331c:	b1 8d       	ldd	r27, Z+25	; 0x19
    331e:	8a 15       	cp	r24, r10
    3320:	9b 05       	cpc	r25, r11
    3322:	ac 05       	cpc	r26, r12
    3324:	bd 05       	cpc	r27, r13
    3326:	b9 f0       	breq	.+46     	; 0x3356 <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    3328:	01 90       	ld	r0, Z+
    332a:	f0 81       	ld	r31, Z
    332c:	e0 2d       	mov	r30, r0
    332e:	81 81       	ldd	r24, Z+1	; 0x01
    3330:	b1 01       	movw	r22, r2
    3332:	a6 01       	movw	r20, r12
    3334:	95 01       	movw	r18, r10
    3336:	01 e0       	ldi	r16, 0x01	; 1
    3338:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    333c:	88 23       	and	r24, r24
    333e:	59 f0       	breq	.+22     	; 0x3356 <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    3340:	ab 81       	ldd	r26, Y+3	; 0x03
    3342:	bc 81       	ldd	r27, Y+4	; 0x04
    3344:	14 96       	adiw	r26, 0x04	; 4
    3346:	8c 91       	ld	r24, X
    3348:	14 97       	sbiw	r26, 0x04	; 4
    334a:	80 68       	ori	r24, 0x80	; 128
    334c:	14 96       	adiw	r26, 0x04	; 4
    334e:	8c 93       	st	X, r24
    3350:	77 24       	eor	r7, r7
    3352:	73 94       	inc	r7
    3354:	51 c0       	rjmp	.+162    	; 0x33f8 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    3356:	eb 81       	ldd	r30, Y+3	; 0x03
    3358:	fc 81       	ldd	r31, Y+4	; 0x04
    335a:	a6 8a       	std	Z+22, r10	; 0x16
    335c:	b7 8a       	std	Z+23, r11	; 0x17
    335e:	c0 8e       	std	Z+24, r12	; 0x18
    3360:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    3362:	85 81       	ldd	r24, Z+5	; 0x05
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3368:	ab 81       	ldd	r26, Y+3	; 0x03
    336a:	bc 81       	ldd	r27, Y+4	; 0x04
    336c:	16 96       	adiw	r26, 0x06	; 6
    336e:	2d 91       	ld	r18, X+
    3370:	3d 91       	ld	r19, X+
    3372:	4d 91       	ld	r20, X+
    3374:	5c 91       	ld	r21, X
    3376:	19 97       	sbiw	r26, 0x09	; 9
    3378:	c9 01       	movw	r24, r18
    337a:	91 70       	andi	r25, 0x01	; 1
    337c:	e0 e0       	ldi	r30, 0x00	; 0
    337e:	f2 e0       	ldi	r31, 0x02	; 2
    3380:	e8 1b       	sub	r30, r24
    3382:	f9 0b       	sbc	r31, r25
    3384:	b4 01       	movw	r22, r8
    3386:	e8 15       	cp	r30, r8
    3388:	f9 05       	cpc	r31, r9
    338a:	08 f4       	brcc	.+2      	; 0x338e <f_read+0x354>
    338c:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    338e:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3390:	f9 01       	movw	r30, r18
    3392:	f1 70       	andi	r31, 0x01	; 1
    3394:	b0 96       	adiw	r30, 0x20	; 32
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	e8 0f       	add	r30, r24
    339c:	f9 1f       	adc	r31, r25
    339e:	92 01       	movw	r18, r4
    33a0:	04 c0       	rjmp	.+8      	; 0x33aa <f_read+0x370>
	while (cnt--) *d++ = *s++;
    33a2:	81 91       	ld	r24, Z+
    33a4:	d9 01       	movw	r26, r18
    33a6:	8d 93       	st	X+, r24
    33a8:	9d 01       	movw	r18, r26
    33aa:	01 50       	subi	r16, 0x01	; 1
    33ac:	10 40       	sbci	r17, 0x00	; 0
    33ae:	bf ef       	ldi	r27, 0xFF	; 255
    33b0:	0f 3f       	cpi	r16, 0xFF	; 255
    33b2:	1b 07       	cpc	r17, r27
    33b4:	b1 f7       	brne	.-20     	; 0x33a2 <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    33b6:	46 0e       	add	r4, r22
    33b8:	57 1e       	adc	r5, r23
    33ba:	cb 01       	movw	r24, r22
    33bc:	a0 e0       	ldi	r26, 0x00	; 0
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	eb 81       	ldd	r30, Y+3	; 0x03
    33c2:	fc 81       	ldd	r31, Y+4	; 0x04
    33c4:	26 81       	ldd	r18, Z+6	; 0x06
    33c6:	37 81       	ldd	r19, Z+7	; 0x07
    33c8:	40 85       	ldd	r20, Z+8	; 0x08
    33ca:	51 85       	ldd	r21, Z+9	; 0x09
    33cc:	28 0f       	add	r18, r24
    33ce:	39 1f       	adc	r19, r25
    33d0:	4a 1f       	adc	r20, r26
    33d2:	5b 1f       	adc	r21, r27
    33d4:	26 83       	std	Z+6, r18	; 0x06
    33d6:	37 83       	std	Z+7, r19	; 0x07
    33d8:	40 87       	std	Z+8, r20	; 0x08
    33da:	51 87       	std	Z+9, r21	; 0x09
    33dc:	e9 81       	ldd	r30, Y+1	; 0x01
    33de:	fa 81       	ldd	r31, Y+2	; 0x02
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	86 0f       	add	r24, r22
    33e6:	97 1f       	adc	r25, r23
    33e8:	80 83       	st	Z, r24
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	86 1a       	sub	r8, r22
    33ee:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    33f0:	81 14       	cp	r8, r1
    33f2:	91 04       	cpc	r9, r1
    33f4:	09 f0       	breq	.+2      	; 0x33f8 <f_read+0x3be>
    33f6:	7a ce       	rjmp	.-780    	; 0x30ec <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    33f8:	87 2d       	mov	r24, r7
    33fa:	24 96       	adiw	r28, 0x04	; 4
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	ff 90       	pop	r15
    340a:	ef 90       	pop	r14
    340c:	df 90       	pop	r13
    340e:	cf 90       	pop	r12
    3410:	bf 90       	pop	r11
    3412:	af 90       	pop	r10
    3414:	9f 90       	pop	r9
    3416:	8f 90       	pop	r8
    3418:	7f 90       	pop	r7
    341a:	6f 90       	pop	r6
    341c:	5f 90       	pop	r5
    341e:	4f 90       	pop	r4
    3420:	3f 90       	pop	r3
    3422:	2f 90       	pop	r2
    3424:	08 95       	ret

00003426 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    3426:	2f 92       	push	r2
    3428:	3f 92       	push	r3
    342a:	4f 92       	push	r4
    342c:	5f 92       	push	r5
    342e:	6f 92       	push	r6
    3430:	7f 92       	push	r7
    3432:	8f 92       	push	r8
    3434:	9f 92       	push	r9
    3436:	af 92       	push	r10
    3438:	bf 92       	push	r11
    343a:	cf 92       	push	r12
    343c:	df 92       	push	r13
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	00 d0       	rcall	.+0      	; 0x344c <f_write+0x26>
    344c:	0f 92       	push	r0
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	8b 83       	std	Y+3, r24	; 0x03
    3454:	9c 83       	std	Y+4, r25	; 0x04
    3456:	16 2f       	mov	r17, r22
    3458:	07 2f       	mov	r16, r23
    345a:	4a 01       	movw	r8, r20
    345c:	29 83       	std	Y+1, r18	; 0x01
    345e:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    3460:	d9 01       	movw	r26, r18
    3462:	1d 92       	st	X+, r1
    3464:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    3466:	fc 01       	movw	r30, r24
    3468:	62 81       	ldd	r22, Z+2	; 0x02
    346a:	73 81       	ldd	r23, Z+3	; 0x03
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <validate>
    3474:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3476:	88 23       	and	r24, r24
    3478:	09 f0       	breq	.+2      	; 0x347c <f_write+0x56>
    347a:	02 c2       	rjmp	.+1028   	; 0x3880 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    347c:	ab 81       	ldd	r26, Y+3	; 0x03
    347e:	bc 81       	ldd	r27, Y+4	; 0x04
    3480:	14 96       	adiw	r26, 0x04	; 4
    3482:	8c 91       	ld	r24, X
    3484:	87 fd       	sbrc	r24, 7
    3486:	7c c0       	rjmp	.+248    	; 0x3580 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    3488:	81 fd       	sbrc	r24, 1
    348a:	03 c0       	rjmp	.+6      	; 0x3492 <f_write+0x6c>
    348c:	47 e0       	ldi	r20, 0x07	; 7
    348e:	64 2e       	mov	r6, r20
    3490:	f7 c1       	rjmp	.+1006   	; 0x3880 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    3492:	eb 81       	ldd	r30, Y+3	; 0x03
    3494:	fc 81       	ldd	r31, Y+4	; 0x04
    3496:	22 85       	ldd	r18, Z+10	; 0x0a
    3498:	33 85       	ldd	r19, Z+11	; 0x0b
    349a:	44 85       	ldd	r20, Z+12	; 0x0c
    349c:	55 85       	ldd	r21, Z+13	; 0x0d
    349e:	c4 01       	movw	r24, r8
    34a0:	a0 e0       	ldi	r26, 0x00	; 0
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	82 0f       	add	r24, r18
    34a6:	93 1f       	adc	r25, r19
    34a8:	a4 1f       	adc	r26, r20
    34aa:	b5 1f       	adc	r27, r21
    34ac:	82 17       	cp	r24, r18
    34ae:	93 07       	cpc	r25, r19
    34b0:	a4 07       	cpc	r26, r20
    34b2:	b5 07       	cpc	r27, r21
    34b4:	10 f4       	brcc	.+4      	; 0x34ba <f_write+0x94>
    34b6:	88 24       	eor	r8, r8
    34b8:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    34ba:	81 2f       	mov	r24, r17
    34bc:	90 2f       	mov	r25, r16
    34be:	9c 01       	movw	r18, r24
    34c0:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    34c2:	30 e2       	ldi	r19, 0x20	; 32
    34c4:	23 2e       	mov	r2, r19
    34c6:	31 2c       	mov	r3, r1
    34c8:	6b 81       	ldd	r22, Y+3	; 0x03
    34ca:	7c 81       	ldd	r23, Y+4	; 0x04
    34cc:	26 0e       	add	r2, r22
    34ce:	37 1e       	adc	r3, r23
    34d0:	b2 c1       	rjmp	.+868    	; 0x3836 <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    34d2:	ab 81       	ldd	r26, Y+3	; 0x03
    34d4:	bc 81       	ldd	r27, Y+4	; 0x04
    34d6:	16 96       	adiw	r26, 0x06	; 6
    34d8:	2d 91       	ld	r18, X+
    34da:	3d 91       	ld	r19, X+
    34dc:	4d 91       	ld	r20, X+
    34de:	5c 91       	ld	r21, X
    34e0:	19 97       	sbiw	r26, 0x09	; 9
    34e2:	da 01       	movw	r26, r20
    34e4:	c9 01       	movw	r24, r18
    34e6:	91 70       	andi	r25, 0x01	; 1
    34e8:	a0 70       	andi	r26, 0x00	; 0
    34ea:	b0 70       	andi	r27, 0x00	; 0
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	a1 05       	cpc	r26, r1
    34f0:	b1 05       	cpc	r27, r1
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <f_write+0xd0>
    34f4:	58 c1       	rjmp	.+688    	; 0x37a6 <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    34f6:	ab 81       	ldd	r26, Y+3	; 0x03
    34f8:	bc 81       	ldd	r27, Y+4	; 0x04
    34fa:	ed 91       	ld	r30, X+
    34fc:	fc 91       	ld	r31, X
    34fe:	11 97       	sbiw	r26, 0x01	; 1
    3500:	15 96       	adiw	r26, 0x05	; 5
    3502:	9c 91       	ld	r25, X
    3504:	15 97       	sbiw	r26, 0x05	; 5
    3506:	82 81       	ldd	r24, Z+2	; 0x02
    3508:	98 17       	cp	r25, r24
    350a:	08 f4       	brcc	.+2      	; 0x350e <f_write+0xe8>
    350c:	54 c0       	rjmp	.+168    	; 0x35b6 <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    350e:	21 15       	cp	r18, r1
    3510:	31 05       	cpc	r19, r1
    3512:	41 05       	cpc	r20, r1
    3514:	51 05       	cpc	r21, r1
    3516:	c9 f4       	brne	.+50     	; 0x354a <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3518:	1e 96       	adiw	r26, 0x0e	; 14
    351a:	6d 91       	ld	r22, X+
    351c:	7d 91       	ld	r23, X+
    351e:	8d 91       	ld	r24, X+
    3520:	9c 91       	ld	r25, X
    3522:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    3524:	61 15       	cp	r22, r1
    3526:	71 05       	cpc	r23, r1
    3528:	81 05       	cpc	r24, r1
    352a:	91 05       	cpc	r25, r1
    352c:	f9 f4       	brne	.+62     	; 0x356c <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    352e:	cf 01       	movw	r24, r30
    3530:	40 e0       	ldi	r20, 0x00	; 0
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	0e 94 c2 0c 	call	0x1984	; 0x1984 <create_chain>
    353c:	eb 81       	ldd	r30, Y+3	; 0x03
    353e:	fc 81       	ldd	r31, Y+4	; 0x04
    3540:	66 87       	std	Z+14, r22	; 0x0e
    3542:	77 87       	std	Z+15, r23	; 0x0f
    3544:	80 8b       	std	Z+16, r24	; 0x10
    3546:	91 8b       	std	Z+17, r25	; 0x11
    3548:	0b c0       	rjmp	.+22     	; 0x3560 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    354a:	ab 81       	ldd	r26, Y+3	; 0x03
    354c:	bc 81       	ldd	r27, Y+4	; 0x04
    354e:	52 96       	adiw	r26, 0x12	; 18
    3550:	4d 91       	ld	r20, X+
    3552:	5d 91       	ld	r21, X+
    3554:	6d 91       	ld	r22, X+
    3556:	7c 91       	ld	r23, X
    3558:	55 97       	sbiw	r26, 0x15	; 21
    355a:	cf 01       	movw	r24, r30
    355c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    3560:	61 15       	cp	r22, r1
    3562:	71 05       	cpc	r23, r1
    3564:	81 05       	cpc	r24, r1
    3566:	91 05       	cpc	r25, r1
    3568:	09 f4       	brne	.+2      	; 0x356c <f_write+0x146>
    356a:	69 c1       	rjmp	.+722    	; 0x383e <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    356c:	61 30       	cpi	r22, 0x01	; 1
    356e:	71 05       	cpc	r23, r1
    3570:	81 05       	cpc	r24, r1
    3572:	91 05       	cpc	r25, r1
    3574:	41 f4       	brne	.+16     	; 0x3586 <f_write+0x160>
    3576:	eb 81       	ldd	r30, Y+3	; 0x03
    3578:	fc 81       	ldd	r31, Y+4	; 0x04
    357a:	84 81       	ldd	r24, Z+4	; 0x04
    357c:	80 68       	ori	r24, 0x80	; 128
    357e:	84 83       	std	Z+4, r24	; 0x04
    3580:	22 e0       	ldi	r18, 0x02	; 2
    3582:	62 2e       	mov	r6, r18
    3584:	7d c1       	rjmp	.+762    	; 0x3880 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3586:	6f 3f       	cpi	r22, 0xFF	; 255
    3588:	ff ef       	ldi	r31, 0xFF	; 255
    358a:	7f 07       	cpc	r23, r31
    358c:	ff ef       	ldi	r31, 0xFF	; 255
    358e:	8f 07       	cpc	r24, r31
    3590:	ff ef       	ldi	r31, 0xFF	; 255
    3592:	9f 07       	cpc	r25, r31
    3594:	49 f4       	brne	.+18     	; 0x35a8 <f_write+0x182>
    3596:	ab 81       	ldd	r26, Y+3	; 0x03
    3598:	bc 81       	ldd	r27, Y+4	; 0x04
    359a:	14 96       	adiw	r26, 0x04	; 4
    359c:	8c 91       	ld	r24, X
    359e:	14 97       	sbiw	r26, 0x04	; 4
    35a0:	80 68       	ori	r24, 0x80	; 128
    35a2:	14 96       	adiw	r26, 0x04	; 4
    35a4:	8c 93       	st	X, r24
    35a6:	ee c0       	rjmp	.+476    	; 0x3784 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    35a8:	eb 81       	ldd	r30, Y+3	; 0x03
    35aa:	fc 81       	ldd	r31, Y+4	; 0x04
    35ac:	62 8b       	std	Z+18, r22	; 0x12
    35ae:	73 8b       	std	Z+19, r23	; 0x13
    35b0:	84 8b       	std	Z+20, r24	; 0x14
    35b2:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    35b4:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    35b6:	ab 81       	ldd	r26, Y+3	; 0x03
    35b8:	bc 81       	ldd	r27, Y+4	; 0x04
    35ba:	14 96       	adiw	r26, 0x04	; 4
    35bc:	8c 91       	ld	r24, X
    35be:	14 97       	sbiw	r26, 0x04	; 4
    35c0:	86 ff       	sbrs	r24, 6
    35c2:	1b c0       	rjmp	.+54     	; 0x35fa <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    35c4:	ed 91       	ld	r30, X+
    35c6:	fc 91       	ld	r31, X
    35c8:	11 97       	sbiw	r26, 0x01	; 1
    35ca:	56 96       	adiw	r26, 0x16	; 22
    35cc:	2d 91       	ld	r18, X+
    35ce:	3d 91       	ld	r19, X+
    35d0:	4d 91       	ld	r20, X+
    35d2:	5c 91       	ld	r21, X
    35d4:	59 97       	sbiw	r26, 0x19	; 25
    35d6:	81 81       	ldd	r24, Z+1	; 0x01
    35d8:	b1 01       	movw	r22, r2
    35da:	01 e0       	ldi	r16, 0x01	; 1
    35dc:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    35e0:	eb 81       	ldd	r30, Y+3	; 0x03
    35e2:	fc 81       	ldd	r31, Y+4	; 0x04
    35e4:	94 81       	ldd	r25, Z+4	; 0x04
    35e6:	88 23       	and	r24, r24
    35e8:	19 f0       	breq	.+6      	; 0x35f0 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    35ea:	90 68       	ori	r25, 0x80	; 128
    35ec:	94 83       	std	Z+4, r25	; 0x04
    35ee:	ca c0       	rjmp	.+404    	; 0x3784 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    35f0:	9f 7b       	andi	r25, 0xBF	; 191
    35f2:	ab 81       	ldd	r26, Y+3	; 0x03
    35f4:	bc 81       	ldd	r27, Y+4	; 0x04
    35f6:	14 96       	adiw	r26, 0x04	; 4
    35f8:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    35fa:	eb 81       	ldd	r30, Y+3	; 0x03
    35fc:	fc 81       	ldd	r31, Y+4	; 0x04
    35fe:	00 81       	ld	r16, Z
    3600:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3602:	22 89       	ldd	r18, Z+18	; 0x12
    3604:	33 89       	ldd	r19, Z+19	; 0x13
    3606:	44 89       	ldd	r20, Z+20	; 0x14
    3608:	55 89       	ldd	r21, Z+21	; 0x15
    360a:	22 50       	subi	r18, 0x02	; 2
    360c:	30 40       	sbci	r19, 0x00	; 0
    360e:	40 40       	sbci	r20, 0x00	; 0
    3610:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3612:	f8 01       	movw	r30, r16
    3614:	82 8d       	ldd	r24, Z+26	; 0x1a
    3616:	93 8d       	ldd	r25, Z+27	; 0x1b
    3618:	a4 8d       	ldd	r26, Z+28	; 0x1c
    361a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    361c:	02 97       	sbiw	r24, 0x02	; 2
    361e:	a1 09       	sbc	r26, r1
    3620:	b1 09       	sbc	r27, r1
    3622:	28 17       	cp	r18, r24
    3624:	39 07       	cpc	r19, r25
    3626:	4a 07       	cpc	r20, r26
    3628:	5b 07       	cpc	r21, r27
    362a:	b8 f4       	brcc	.+46     	; 0x365a <f_write+0x234>
	return clst * fs->csize + fs->database;
    362c:	72 80       	ldd	r7, Z+2	; 0x02
    362e:	67 2d       	mov	r22, r7
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    363a:	9b 01       	movw	r18, r22
    363c:	ac 01       	movw	r20, r24
    363e:	f8 01       	movw	r30, r16
    3640:	86 a1       	ldd	r24, Z+38	; 0x26
    3642:	97 a1       	ldd	r25, Z+39	; 0x27
    3644:	a0 a5       	ldd	r26, Z+40	; 0x28
    3646:	b1 a5       	ldd	r27, Z+41	; 0x29
    3648:	28 0f       	add	r18, r24
    364a:	39 1f       	adc	r19, r25
    364c:	4a 1f       	adc	r20, r26
    364e:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3650:	21 15       	cp	r18, r1
    3652:	31 05       	cpc	r19, r1
    3654:	41 05       	cpc	r20, r1
    3656:	51 05       	cpc	r21, r1
    3658:	49 f4       	brne	.+18     	; 0x366c <f_write+0x246>
    365a:	ab 81       	ldd	r26, Y+3	; 0x03
    365c:	bc 81       	ldd	r27, Y+4	; 0x04
    365e:	14 96       	adiw	r26, 0x04	; 4
    3660:	8c 91       	ld	r24, X
    3662:	14 97       	sbiw	r26, 0x04	; 4
    3664:	80 68       	ori	r24, 0x80	; 128
    3666:	14 96       	adiw	r26, 0x04	; 4
    3668:	8c 93       	st	X, r24
    366a:	8a cf       	rjmp	.-236    	; 0x3580 <f_write+0x15a>
			sect += fp->csect;
    366c:	eb 81       	ldd	r30, Y+3	; 0x03
    366e:	fc 81       	ldd	r31, Y+4	; 0x04
    3670:	85 81       	ldd	r24, Z+5	; 0x05
    3672:	69 01       	movw	r12, r18
    3674:	7a 01       	movw	r14, r20
    3676:	c8 0e       	add	r12, r24
    3678:	d1 1c       	adc	r13, r1
    367a:	e1 1c       	adc	r14, r1
    367c:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    367e:	54 01       	movw	r10, r8
    3680:	ab 2c       	mov	r10, r11
    3682:	bb 24       	eor	r11, r11
    3684:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    3686:	a1 14       	cp	r10, r1
    3688:	b1 04       	cpc	r11, r1
    368a:	09 f4       	brne	.+2      	; 0x368e <f_write+0x268>
    368c:	53 c0       	rjmp	.+166    	; 0x3734 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	c5 01       	movw	r24, r10
    3694:	82 0f       	add	r24, r18
    3696:	93 1f       	adc	r25, r19
    3698:	67 2d       	mov	r22, r7
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	68 17       	cp	r22, r24
    369e:	79 07       	cpc	r23, r25
    36a0:	18 f4       	brcc	.+6      	; 0x36a8 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    36a2:	5b 01       	movw	r10, r22
    36a4:	a2 1a       	sub	r10, r18
    36a6:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    36a8:	d8 01       	movw	r26, r16
    36aa:	11 96       	adiw	r26, 0x01	; 1
    36ac:	8c 91       	ld	r24, X
    36ae:	b2 01       	movw	r22, r4
    36b0:	a7 01       	movw	r20, r14
    36b2:	96 01       	movw	r18, r12
    36b4:	0a 2d       	mov	r16, r10
    36b6:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    36ba:	88 23       	and	r24, r24
    36bc:	09 f0       	breq	.+2      	; 0x36c0 <f_write+0x29a>
    36be:	5d c0       	rjmp	.+186    	; 0x377a <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    36c0:	ab 81       	ldd	r26, Y+3	; 0x03
    36c2:	bc 81       	ldd	r27, Y+4	; 0x04
    36c4:	56 96       	adiw	r26, 0x16	; 22
    36c6:	2d 91       	ld	r18, X+
    36c8:	3d 91       	ld	r19, X+
    36ca:	4d 91       	ld	r20, X+
    36cc:	5c 91       	ld	r21, X
    36ce:	59 97       	sbiw	r26, 0x19	; 25
    36d0:	2c 19       	sub	r18, r12
    36d2:	3d 09       	sbc	r19, r13
    36d4:	4e 09       	sbc	r20, r14
    36d6:	5f 09       	sbc	r21, r15
    36d8:	c5 01       	movw	r24, r10
    36da:	a0 e0       	ldi	r26, 0x00	; 0
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	28 17       	cp	r18, r24
    36e0:	39 07       	cpc	r19, r25
    36e2:	4a 07       	cpc	r20, r26
    36e4:	5b 07       	cpc	r21, r27
    36e6:	c8 f4       	brcc	.+50     	; 0x371a <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    36e8:	19 e0       	ldi	r17, 0x09	; 9
    36ea:	22 0f       	add	r18, r18
    36ec:	33 1f       	adc	r19, r19
    36ee:	44 1f       	adc	r20, r20
    36f0:	55 1f       	adc	r21, r21
    36f2:	1a 95       	dec	r17
    36f4:	d1 f7       	brne	.-12     	; 0x36ea <f_write+0x2c4>
    36f6:	f2 01       	movw	r30, r4
    36f8:	e2 0f       	add	r30, r18
    36fa:	f3 1f       	adc	r31, r19
    36fc:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    36fe:	9f 01       	movw	r18, r30
    3700:	20 50       	subi	r18, 0x00	; 0
    3702:	3e 4f       	sbci	r19, 0xFE	; 254
    3704:	02 c0       	rjmp	.+4      	; 0x370a <f_write+0x2e4>
    3706:	81 91       	ld	r24, Z+
    3708:	8d 93       	st	X+, r24
    370a:	e2 17       	cp	r30, r18
    370c:	f3 07       	cpc	r31, r19
    370e:	d9 f7       	brne	.-10     	; 0x3706 <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    3710:	eb 81       	ldd	r30, Y+3	; 0x03
    3712:	fc 81       	ldd	r31, Y+4	; 0x04
    3714:	84 81       	ldd	r24, Z+4	; 0x04
    3716:	8f 7b       	andi	r24, 0xBF	; 191
    3718:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    371a:	ab 81       	ldd	r26, Y+3	; 0x03
    371c:	bc 81       	ldd	r27, Y+4	; 0x04
    371e:	15 96       	adiw	r26, 0x05	; 5
    3720:	8c 91       	ld	r24, X
    3722:	15 97       	sbiw	r26, 0x05	; 5
    3724:	8a 0d       	add	r24, r10
    3726:	15 96       	adiw	r26, 0x05	; 5
    3728:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    372a:	b5 01       	movw	r22, r10
    372c:	76 2f       	mov	r23, r22
    372e:	66 27       	eor	r22, r22
    3730:	77 0f       	add	r23, r23
    3732:	64 c0       	rjmp	.+200    	; 0x37fc <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3734:	eb 81       	ldd	r30, Y+3	; 0x03
    3736:	fc 81       	ldd	r31, Y+4	; 0x04
    3738:	86 89       	ldd	r24, Z+22	; 0x16
    373a:	97 89       	ldd	r25, Z+23	; 0x17
    373c:	a0 8d       	ldd	r26, Z+24	; 0x18
    373e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3740:	8c 15       	cp	r24, r12
    3742:	9d 05       	cpc	r25, r13
    3744:	ae 05       	cpc	r26, r14
    3746:	bf 05       	cpc	r27, r15
    3748:	01 f1       	breq	.+64     	; 0x378a <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    374a:	26 81       	ldd	r18, Z+6	; 0x06
    374c:	37 81       	ldd	r19, Z+7	; 0x07
    374e:	40 85       	ldd	r20, Z+8	; 0x08
    3750:	51 85       	ldd	r21, Z+9	; 0x09
    3752:	82 85       	ldd	r24, Z+10	; 0x0a
    3754:	93 85       	ldd	r25, Z+11	; 0x0b
    3756:	a4 85       	ldd	r26, Z+12	; 0x0c
    3758:	b5 85       	ldd	r27, Z+13	; 0x0d
    375a:	28 17       	cp	r18, r24
    375c:	39 07       	cpc	r19, r25
    375e:	4a 07       	cpc	r20, r26
    3760:	5b 07       	cpc	r21, r27
    3762:	98 f4       	brcc	.+38     	; 0x378a <f_write+0x364>
    3764:	d8 01       	movw	r26, r16
    3766:	11 96       	adiw	r26, 0x01	; 1
    3768:	8c 91       	ld	r24, X
    376a:	b1 01       	movw	r22, r2
    376c:	a7 01       	movw	r20, r14
    376e:	96 01       	movw	r18, r12
    3770:	01 e0       	ldi	r16, 0x01	; 1
    3772:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    3776:	88 23       	and	r24, r24
    3778:	41 f0       	breq	.+16     	; 0x378a <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    377a:	eb 81       	ldd	r30, Y+3	; 0x03
    377c:	fc 81       	ldd	r31, Y+4	; 0x04
    377e:	84 81       	ldd	r24, Z+4	; 0x04
    3780:	80 68       	ori	r24, 0x80	; 128
    3782:	84 83       	std	Z+4, r24	; 0x04
    3784:	66 24       	eor	r6, r6
    3786:	63 94       	inc	r6
    3788:	7b c0       	rjmp	.+246    	; 0x3880 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    378a:	ab 81       	ldd	r26, Y+3	; 0x03
    378c:	bc 81       	ldd	r27, Y+4	; 0x04
    378e:	56 96       	adiw	r26, 0x16	; 22
    3790:	cd 92       	st	X+, r12
    3792:	dd 92       	st	X+, r13
    3794:	ed 92       	st	X+, r14
    3796:	fc 92       	st	X, r15
    3798:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    379a:	15 96       	adiw	r26, 0x05	; 5
    379c:	8c 91       	ld	r24, X
    379e:	15 97       	sbiw	r26, 0x05	; 5
    37a0:	8f 5f       	subi	r24, 0xFF	; 255
    37a2:	15 96       	adiw	r26, 0x05	; 5
    37a4:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    37a6:	eb 81       	ldd	r30, Y+3	; 0x03
    37a8:	fc 81       	ldd	r31, Y+4	; 0x04
    37aa:	26 81       	ldd	r18, Z+6	; 0x06
    37ac:	37 81       	ldd	r19, Z+7	; 0x07
    37ae:	40 85       	ldd	r20, Z+8	; 0x08
    37b0:	51 85       	ldd	r21, Z+9	; 0x09
    37b2:	c9 01       	movw	r24, r18
    37b4:	91 70       	andi	r25, 0x01	; 1
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	72 e0       	ldi	r23, 0x02	; 2
    37ba:	68 1b       	sub	r22, r24
    37bc:	79 0b       	sbc	r23, r25
    37be:	cb 01       	movw	r24, r22
    37c0:	b4 01       	movw	r22, r8
    37c2:	88 15       	cp	r24, r8
    37c4:	99 05       	cpc	r25, r9
    37c6:	08 f4       	brcc	.+2      	; 0x37ca <f_write+0x3a4>
    37c8:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    37ca:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    37cc:	f9 01       	movw	r30, r18
    37ce:	f1 70       	andi	r31, 0x01	; 1
    37d0:	b0 96       	adiw	r30, 0x20	; 32
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	e8 0f       	add	r30, r24
    37d8:	f9 1f       	adc	r31, r25
    37da:	92 01       	movw	r18, r4
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    37de:	d9 01       	movw	r26, r18
    37e0:	8d 91       	ld	r24, X+
    37e2:	9d 01       	movw	r18, r26
    37e4:	81 93       	st	Z+, r24
    37e6:	01 50       	subi	r16, 0x01	; 1
    37e8:	10 40       	sbci	r17, 0x00	; 0
    37ea:	bf ef       	ldi	r27, 0xFF	; 255
    37ec:	0f 3f       	cpi	r16, 0xFF	; 255
    37ee:	1b 07       	cpc	r17, r27
    37f0:	b1 f7       	brne	.-20     	; 0x37de <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    37f2:	eb 81       	ldd	r30, Y+3	; 0x03
    37f4:	fc 81       	ldd	r31, Y+4	; 0x04
    37f6:	84 81       	ldd	r24, Z+4	; 0x04
    37f8:	80 64       	ori	r24, 0x40	; 64
    37fa:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    37fc:	46 0e       	add	r4, r22
    37fe:	57 1e       	adc	r5, r23
    3800:	cb 01       	movw	r24, r22
    3802:	a0 e0       	ldi	r26, 0x00	; 0
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	eb 81       	ldd	r30, Y+3	; 0x03
    3808:	fc 81       	ldd	r31, Y+4	; 0x04
    380a:	26 81       	ldd	r18, Z+6	; 0x06
    380c:	37 81       	ldd	r19, Z+7	; 0x07
    380e:	40 85       	ldd	r20, Z+8	; 0x08
    3810:	51 85       	ldd	r21, Z+9	; 0x09
    3812:	28 0f       	add	r18, r24
    3814:	39 1f       	adc	r19, r25
    3816:	4a 1f       	adc	r20, r26
    3818:	5b 1f       	adc	r21, r27
    381a:	26 83       	std	Z+6, r18	; 0x06
    381c:	37 83       	std	Z+7, r19	; 0x07
    381e:	40 87       	std	Z+8, r20	; 0x08
    3820:	51 87       	std	Z+9, r21	; 0x09
    3822:	e9 81       	ldd	r30, Y+1	; 0x01
    3824:	fa 81       	ldd	r31, Y+2	; 0x02
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	86 0f       	add	r24, r22
    382c:	97 1f       	adc	r25, r23
    382e:	80 83       	st	Z, r24
    3830:	91 83       	std	Z+1, r25	; 0x01
    3832:	86 1a       	sub	r8, r22
    3834:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    3836:	81 14       	cp	r8, r1
    3838:	91 04       	cpc	r9, r1
    383a:	09 f0       	breq	.+2      	; 0x383e <f_write+0x418>
    383c:	4a ce       	rjmp	.-876    	; 0x34d2 <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    383e:	ab 81       	ldd	r26, Y+3	; 0x03
    3840:	bc 81       	ldd	r27, Y+4	; 0x04
    3842:	16 96       	adiw	r26, 0x06	; 6
    3844:	2d 91       	ld	r18, X+
    3846:	3d 91       	ld	r19, X+
    3848:	4d 91       	ld	r20, X+
    384a:	5c 91       	ld	r21, X
    384c:	19 97       	sbiw	r26, 0x09	; 9
    384e:	1a 96       	adiw	r26, 0x0a	; 10
    3850:	8d 91       	ld	r24, X+
    3852:	9d 91       	ld	r25, X+
    3854:	0d 90       	ld	r0, X+
    3856:	bc 91       	ld	r27, X
    3858:	a0 2d       	mov	r26, r0
    385a:	82 17       	cp	r24, r18
    385c:	93 07       	cpc	r25, r19
    385e:	a4 07       	cpc	r26, r20
    3860:	b5 07       	cpc	r27, r21
    3862:	30 f4       	brcc	.+12     	; 0x3870 <f_write+0x44a>
    3864:	eb 81       	ldd	r30, Y+3	; 0x03
    3866:	fc 81       	ldd	r31, Y+4	; 0x04
    3868:	22 87       	std	Z+10, r18	; 0x0a
    386a:	33 87       	std	Z+11, r19	; 0x0b
    386c:	44 87       	std	Z+12, r20	; 0x0c
    386e:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    3870:	ab 81       	ldd	r26, Y+3	; 0x03
    3872:	bc 81       	ldd	r27, Y+4	; 0x04
    3874:	14 96       	adiw	r26, 0x04	; 4
    3876:	8c 91       	ld	r24, X
    3878:	14 97       	sbiw	r26, 0x04	; 4
    387a:	80 62       	ori	r24, 0x20	; 32
    387c:	14 96       	adiw	r26, 0x04	; 4
    387e:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    3880:	86 2d       	mov	r24, r6
    3882:	24 96       	adiw	r28, 0x04	; 4
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	cf 91       	pop	r28
    388a:	df 91       	pop	r29
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	ff 90       	pop	r15
    3892:	ef 90       	pop	r14
    3894:	df 90       	pop	r13
    3896:	cf 90       	pop	r12
    3898:	bf 90       	pop	r11
    389a:	af 90       	pop	r10
    389c:	9f 90       	pop	r9
    389e:	8f 90       	pop	r8
    38a0:	7f 90       	pop	r7
    38a2:	6f 90       	pop	r6
    38a4:	5f 90       	pop	r5
    38a6:	4f 90       	pop	r4
    38a8:	3f 90       	pop	r3
    38aa:	2f 90       	pop	r2
    38ac:	08 95       	ret

000038ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    38ae:	0f 93       	push	r16
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
    38b4:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    38b6:	6a 81       	ldd	r22, Y+2	; 0x02
    38b8:	7b 81       	ldd	r23, Y+3	; 0x03
    38ba:	88 81       	ld	r24, Y
    38bc:	99 81       	ldd	r25, Y+1	; 0x01
    38be:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <validate>
    38c2:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    38c4:	88 23       	and	r24, r24
    38c6:	09 f0       	breq	.+2      	; 0x38ca <f_sync+0x1c>
    38c8:	65 c0       	rjmp	.+202    	; 0x3994 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    38ca:	8c 81       	ldd	r24, Y+4	; 0x04
    38cc:	85 ff       	sbrs	r24, 5
    38ce:	62 c0       	rjmp	.+196    	; 0x3994 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    38d0:	86 ff       	sbrs	r24, 6
    38d2:	14 c0       	rjmp	.+40     	; 0x38fc <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    38d4:	e8 81       	ld	r30, Y
    38d6:	f9 81       	ldd	r31, Y+1	; 0x01
    38d8:	be 01       	movw	r22, r28
    38da:	60 5e       	subi	r22, 0xE0	; 224
    38dc:	7f 4f       	sbci	r23, 0xFF	; 255
    38de:	2e 89       	ldd	r18, Y+22	; 0x16
    38e0:	3f 89       	ldd	r19, Y+23	; 0x17
    38e2:	48 8d       	ldd	r20, Y+24	; 0x18
    38e4:	59 8d       	ldd	r21, Y+25	; 0x19
    38e6:	81 81       	ldd	r24, Z+1	; 0x01
    38e8:	01 e0       	ldi	r16, 0x01	; 1
    38ea:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    38ee:	88 23       	and	r24, r24
    38f0:	11 f0       	breq	.+4      	; 0x38f6 <f_sync+0x48>
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	4f c0       	rjmp	.+158    	; 0x3994 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	8f 7b       	andi	r24, 0xBF	; 191
    38fa:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    38fc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    38fe:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3900:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3902:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3904:	88 81       	ld	r24, Y
    3906:	99 81       	ldd	r25, Y+1	; 0x01
    3908:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    390c:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    390e:	88 23       	and	r24, r24
    3910:	09 f0       	breq	.+2      	; 0x3914 <f_sync+0x66>
    3912:	40 c0       	rjmp	.+128    	; 0x3994 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3914:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3916:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3918:	83 85       	ldd	r24, Z+11	; 0x0b
    391a:	80 62       	ori	r24, 0x20	; 32
    391c:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    391e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3920:	84 8f       	std	Z+28, r24	; 0x1c
    3922:	8b 85       	ldd	r24, Y+11	; 0x0b
    3924:	85 8f       	std	Z+29, r24	; 0x1d
    3926:	8a 85       	ldd	r24, Y+10	; 0x0a
    3928:	9b 85       	ldd	r25, Y+11	; 0x0b
    392a:	ac 85       	ldd	r26, Y+12	; 0x0c
    392c:	bd 85       	ldd	r27, Y+13	; 0x0d
    392e:	cd 01       	movw	r24, r26
    3930:	aa 27       	eor	r26, r26
    3932:	bb 27       	eor	r27, r27
    3934:	86 8f       	std	Z+30, r24	; 0x1e
    3936:	8a 85       	ldd	r24, Y+10	; 0x0a
    3938:	9b 85       	ldd	r25, Y+11	; 0x0b
    393a:	ac 85       	ldd	r26, Y+12	; 0x0c
    393c:	bd 85       	ldd	r27, Y+13	; 0x0d
    393e:	8b 2f       	mov	r24, r27
    3940:	99 27       	eor	r25, r25
    3942:	aa 27       	eor	r26, r26
    3944:	bb 27       	eor	r27, r27
    3946:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    3948:	8e 85       	ldd	r24, Y+14	; 0x0e
    394a:	82 8f       	std	Z+26, r24	; 0x1a
    394c:	8f 85       	ldd	r24, Y+15	; 0x0f
    394e:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    3950:	8e 85       	ldd	r24, Y+14	; 0x0e
    3952:	9f 85       	ldd	r25, Y+15	; 0x0f
    3954:	a8 89       	ldd	r26, Y+16	; 0x10
    3956:	b9 89       	ldd	r27, Y+17	; 0x11
    3958:	cd 01       	movw	r24, r26
    395a:	aa 27       	eor	r26, r26
    395c:	bb 27       	eor	r27, r27
    395e:	84 8b       	std	Z+20, r24	; 0x14
    3960:	8e 85       	ldd	r24, Y+14	; 0x0e
    3962:	9f 85       	ldd	r25, Y+15	; 0x0f
    3964:	a8 89       	ldd	r26, Y+16	; 0x10
    3966:	b9 89       	ldd	r27, Y+17	; 0x11
    3968:	cd 01       	movw	r24, r26
    396a:	aa 27       	eor	r26, r26
    396c:	bb 27       	eor	r27, r27
    396e:	89 2f       	mov	r24, r25
    3970:	99 27       	eor	r25, r25
    3972:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    3974:	16 8a       	std	Z+22, r1	; 0x16
    3976:	17 8a       	std	Z+23, r1	; 0x17
    3978:	10 8e       	std	Z+24, r1	; 0x18
    397a:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    397c:	8c 81       	ldd	r24, Y+4	; 0x04
    397e:	8f 7d       	andi	r24, 0xDF	; 223
    3980:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3982:	e8 81       	ld	r30, Y
    3984:	f9 81       	ldd	r31, Y+1	; 0x01
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    398a:	88 81       	ld	r24, Y
    398c:	99 81       	ldd	r25, Y+1	; 0x01
    398e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sync>
    3992:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3994:	89 2f       	mov	r24, r25
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	0f 91       	pop	r16
    399c:	08 95       	ret

0000399e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    39a4:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    39a8:	88 23       	and	r24, r24
    39aa:	11 f4       	brne	.+4      	; 0x39b0 <f_close+0x12>
    39ac:	18 82       	st	Y, r1
    39ae:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	08 95       	ret

000039b6 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    39b6:	2f 92       	push	r2
    39b8:	3f 92       	push	r3
    39ba:	4f 92       	push	r4
    39bc:	5f 92       	push	r5
    39be:	6f 92       	push	r6
    39c0:	7f 92       	push	r7
    39c2:	8f 92       	push	r8
    39c4:	9f 92       	push	r9
    39c6:	af 92       	push	r10
    39c8:	bf 92       	push	r11
    39ca:	cf 92       	push	r12
    39cc:	df 92       	push	r13
    39ce:	0f 93       	push	r16
    39d0:	1f 93       	push	r17
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	28 97       	sbiw	r28, 0x08	; 8
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	8f 83       	std	Y+7, r24	; 0x07
    39e2:	98 87       	std	Y+8, r25	; 0x08
    39e4:	3a 01       	movw	r6, r20
    39e6:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    39e8:	dc 01       	movw	r26, r24
    39ea:	12 96       	adiw	r26, 0x02	; 2
    39ec:	6d 91       	ld	r22, X+
    39ee:	7c 91       	ld	r23, X
    39f0:	13 97       	sbiw	r26, 0x03	; 3
    39f2:	8d 91       	ld	r24, X+
    39f4:	9c 91       	ld	r25, X
    39f6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <validate>
    39fa:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    39fc:	88 23       	and	r24, r24
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <f_lseek+0x4c>
    3a00:	f3 c1       	rjmp	.+998    	; 0x3de8 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3a02:	ef 81       	ldd	r30, Y+7	; 0x07
    3a04:	f8 85       	ldd	r31, Y+8	; 0x08
    3a06:	84 81       	ldd	r24, Z+4	; 0x04
    3a08:	87 fd       	sbrc	r24, 7
    3a0a:	98 c0       	rjmp	.+304    	; 0x3b3c <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3a0c:	af 81       	ldd	r26, Y+7	; 0x07
    3a0e:	b8 85       	ldd	r27, Y+8	; 0x08
    3a10:	1a 96       	adiw	r26, 0x0a	; 10
    3a12:	ad 90       	ld	r10, X+
    3a14:	bd 90       	ld	r11, X+
    3a16:	cd 90       	ld	r12, X+
    3a18:	dc 90       	ld	r13, X
    3a1a:	1d 97       	sbiw	r26, 0x0d	; 13
    3a1c:	a6 14       	cp	r10, r6
    3a1e:	b7 04       	cpc	r11, r7
    3a20:	c8 04       	cpc	r12, r8
    3a22:	d9 04       	cpc	r13, r9
    3a24:	10 f4       	brcc	.+4      	; 0x3a2a <f_lseek+0x74>
    3a26:	81 ff       	sbrs	r24, 1
    3a28:	02 c0       	rjmp	.+4      	; 0x3a2e <f_lseek+0x78>
    3a2a:	64 01       	movw	r12, r8
    3a2c:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3a2e:	ef 81       	ldd	r30, Y+7	; 0x07
    3a30:	f8 85       	ldd	r31, Y+8	; 0x08
    3a32:	26 81       	ldd	r18, Z+6	; 0x06
    3a34:	37 81       	ldd	r19, Z+7	; 0x07
    3a36:	40 85       	ldd	r20, Z+8	; 0x08
    3a38:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3a3a:	16 82       	std	Z+6, r1	; 0x06
    3a3c:	17 82       	std	Z+7, r1	; 0x07
    3a3e:	10 86       	std	Z+8, r1	; 0x08
    3a40:	11 86       	std	Z+9, r1	; 0x09
    3a42:	8f ef       	ldi	r24, 0xFF	; 255
    3a44:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3a46:	a1 14       	cp	r10, r1
    3a48:	b1 04       	cpc	r11, r1
    3a4a:	c1 04       	cpc	r12, r1
    3a4c:	d1 04       	cpc	r13, r1
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <f_lseek+0x9c>
    3a50:	5f c1       	rjmp	.+702    	; 0x3d10 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3a52:	01 90       	ld	r0, Z+
    3a54:	f0 81       	ld	r31, Z
    3a56:	e0 2d       	mov	r30, r0
    3a58:	e9 83       	std	Y+1, r30	; 0x01
    3a5a:	fa 83       	std	Y+2, r31	; 0x02
    3a5c:	82 81       	ldd	r24, Z+2	; 0x02
    3a5e:	68 2e       	mov	r6, r24
    3a60:	77 24       	eor	r7, r7
    3a62:	88 24       	eor	r8, r8
    3a64:	99 24       	eor	r9, r9
    3a66:	89 e0       	ldi	r24, 0x09	; 9
    3a68:	66 0c       	add	r6, r6
    3a6a:	77 1c       	adc	r7, r7
    3a6c:	88 1c       	adc	r8, r8
    3a6e:	99 1c       	adc	r9, r9
    3a70:	8a 95       	dec	r24
    3a72:	d1 f7       	brne	.-12     	; 0x3a68 <f_lseek+0xb2>
		if (ifptr > 0 &&
    3a74:	21 15       	cp	r18, r1
    3a76:	31 05       	cpc	r19, r1
    3a78:	41 05       	cpc	r20, r1
    3a7a:	51 05       	cpc	r21, r1
    3a7c:	f1 f1       	breq	.+124    	; 0x3afa <f_lseek+0x144>
    3a7e:	19 01       	movw	r2, r18
    3a80:	2a 01       	movw	r4, r20
    3a82:	08 94       	sec
    3a84:	21 08       	sbc	r2, r1
    3a86:	31 08       	sbc	r3, r1
    3a88:	41 08       	sbc	r4, r1
    3a8a:	51 08       	sbc	r5, r1
    3a8c:	c6 01       	movw	r24, r12
    3a8e:	b5 01       	movw	r22, r10
    3a90:	61 50       	subi	r22, 0x01	; 1
    3a92:	70 40       	sbci	r23, 0x00	; 0
    3a94:	80 40       	sbci	r24, 0x00	; 0
    3a96:	90 40       	sbci	r25, 0x00	; 0
    3a98:	a4 01       	movw	r20, r8
    3a9a:	93 01       	movw	r18, r6
    3a9c:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    3aa0:	2b 83       	std	Y+3, r18	; 0x03
    3aa2:	3c 83       	std	Y+4, r19	; 0x04
    3aa4:	4d 83       	std	Y+5, r20	; 0x05
    3aa6:	5e 83       	std	Y+6, r21	; 0x06
    3aa8:	c2 01       	movw	r24, r4
    3aaa:	b1 01       	movw	r22, r2
    3aac:	a4 01       	movw	r20, r8
    3aae:	93 01       	movw	r18, r6
    3ab0:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    3ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab8:	ad 81       	ldd	r26, Y+5	; 0x05
    3aba:	be 81       	ldd	r27, Y+6	; 0x06
    3abc:	82 17       	cp	r24, r18
    3abe:	93 07       	cpc	r25, r19
    3ac0:	a4 07       	cpc	r26, r20
    3ac2:	b5 07       	cpc	r27, r21
    3ac4:	d0 f0       	brcs	.+52     	; 0x3afa <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3ac6:	88 27       	eor	r24, r24
    3ac8:	99 27       	eor	r25, r25
    3aca:	dc 01       	movw	r26, r24
    3acc:	86 19       	sub	r24, r6
    3ace:	97 09       	sbc	r25, r7
    3ad0:	a8 09       	sbc	r26, r8
    3ad2:	b9 09       	sbc	r27, r9
    3ad4:	82 21       	and	r24, r2
    3ad6:	93 21       	and	r25, r3
    3ad8:	a4 21       	and	r26, r4
    3ada:	b5 21       	and	r27, r5
    3adc:	ef 81       	ldd	r30, Y+7	; 0x07
    3ade:	f8 85       	ldd	r31, Y+8	; 0x08
    3ae0:	86 83       	std	Z+6, r24	; 0x06
    3ae2:	97 83       	std	Z+7, r25	; 0x07
    3ae4:	a0 87       	std	Z+8, r26	; 0x08
    3ae6:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3ae8:	a8 1a       	sub	r10, r24
    3aea:	b9 0a       	sbc	r11, r25
    3aec:	ca 0a       	sbc	r12, r26
    3aee:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3af0:	42 89       	ldd	r20, Z+18	; 0x12
    3af2:	53 89       	ldd	r21, Z+19	; 0x13
    3af4:	64 89       	ldd	r22, Z+20	; 0x14
    3af6:	75 89       	ldd	r23, Z+21	; 0x15
    3af8:	39 c0       	rjmp	.+114    	; 0x3b6c <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3afa:	af 81       	ldd	r26, Y+7	; 0x07
    3afc:	b8 85       	ldd	r27, Y+8	; 0x08
    3afe:	1e 96       	adiw	r26, 0x0e	; 14
    3b00:	4d 91       	ld	r20, X+
    3b02:	5d 91       	ld	r21, X+
    3b04:	6d 91       	ld	r22, X+
    3b06:	7c 91       	ld	r23, X
    3b08:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3b0a:	41 15       	cp	r20, r1
    3b0c:	51 05       	cpc	r21, r1
    3b0e:	61 05       	cpc	r22, r1
    3b10:	71 05       	cpc	r23, r1
    3b12:	21 f5       	brne	.+72     	; 0x3b5c <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	9a 81       	ldd	r25, Y+2	; 0x02
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	70 e0       	ldi	r23, 0x00	; 0
    3b20:	0e 94 c2 0c 	call	0x1984	; 0x1984 <create_chain>
    3b24:	ab 01       	movw	r20, r22
    3b26:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3b28:	41 30       	cpi	r20, 0x01	; 1
    3b2a:	51 05       	cpc	r21, r1
    3b2c:	61 05       	cpc	r22, r1
    3b2e:	71 05       	cpc	r23, r1
    3b30:	39 f4       	brne	.+14     	; 0x3b40 <f_lseek+0x18a>
    3b32:	ef 81       	ldd	r30, Y+7	; 0x07
    3b34:	f8 85       	ldd	r31, Y+8	; 0x08
    3b36:	84 81       	ldd	r24, Z+4	; 0x04
    3b38:	80 68       	ori	r24, 0x80	; 128
    3b3a:	84 83       	std	Z+4, r24	; 0x04
    3b3c:	12 e0       	ldi	r17, 0x02	; 2
    3b3e:	54 c1       	rjmp	.+680    	; 0x3de8 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b40:	4f 3f       	cpi	r20, 0xFF	; 255
    3b42:	ff ef       	ldi	r31, 0xFF	; 255
    3b44:	5f 07       	cpc	r21, r31
    3b46:	ff ef       	ldi	r31, 0xFF	; 255
    3b48:	6f 07       	cpc	r22, r31
    3b4a:	ff ef       	ldi	r31, 0xFF	; 255
    3b4c:	7f 07       	cpc	r23, r31
    3b4e:	b1 f1       	breq	.+108    	; 0x3bbc <f_lseek+0x206>
				fp->org_clust = clst;
    3b50:	ef 81       	ldd	r30, Y+7	; 0x07
    3b52:	f8 85       	ldd	r31, Y+8	; 0x08
    3b54:	46 87       	std	Z+14, r20	; 0x0e
    3b56:	57 87       	std	Z+15, r21	; 0x0f
    3b58:	60 8b       	std	Z+16, r22	; 0x10
    3b5a:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3b5c:	af 81       	ldd	r26, Y+7	; 0x07
    3b5e:	b8 85       	ldd	r27, Y+8	; 0x08
    3b60:	52 96       	adiw	r26, 0x12	; 18
    3b62:	4d 93       	st	X+, r20
    3b64:	5d 93       	st	X+, r21
    3b66:	6d 93       	st	X+, r22
    3b68:	7c 93       	st	X, r23
    3b6a:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3b6c:	41 15       	cp	r20, r1
    3b6e:	51 05       	cpc	r21, r1
    3b70:	61 05       	cpc	r22, r1
    3b72:	71 05       	cpc	r23, r1
    3b74:	09 f0       	breq	.+2      	; 0x3b78 <f_lseek+0x1c2>
    3b76:	58 c0       	rjmp	.+176    	; 0x3c28 <f_lseek+0x272>
    3b78:	cb c0       	rjmp	.+406    	; 0x3d10 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3b7a:	ef 81       	ldd	r30, Y+7	; 0x07
    3b7c:	f8 85       	ldd	r31, Y+8	; 0x08
    3b7e:	84 81       	ldd	r24, Z+4	; 0x04
    3b80:	20 81       	ld	r18, Z
    3b82:	31 81       	ldd	r19, Z+1	; 0x01
    3b84:	81 ff       	sbrs	r24, 1
    3b86:	0d c0       	rjmp	.+26     	; 0x3ba2 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3b88:	c9 01       	movw	r24, r18
    3b8a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <create_chain>
    3b8e:	ab 01       	movw	r20, r22
    3b90:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3b92:	41 15       	cp	r20, r1
    3b94:	51 05       	cpc	r21, r1
    3b96:	61 05       	cpc	r22, r1
    3b98:	71 05       	cpc	r23, r1
    3b9a:	41 f4       	brne	.+16     	; 0x3bac <f_lseek+0x1f6>
    3b9c:	64 01       	movw	r12, r8
    3b9e:	53 01       	movw	r10, r6
    3ba0:	49 c0       	rjmp	.+146    	; 0x3c34 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3ba2:	c9 01       	movw	r24, r18
    3ba4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    3ba8:	ab 01       	movw	r20, r22
    3baa:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bac:	4f 3f       	cpi	r20, 0xFF	; 255
    3bae:	ff ef       	ldi	r31, 0xFF	; 255
    3bb0:	5f 07       	cpc	r21, r31
    3bb2:	ff ef       	ldi	r31, 0xFF	; 255
    3bb4:	6f 07       	cpc	r22, r31
    3bb6:	ff ef       	ldi	r31, 0xFF	; 255
    3bb8:	7f 07       	cpc	r23, r31
    3bba:	49 f4       	brne	.+18     	; 0x3bce <f_lseek+0x218>
    3bbc:	af 81       	ldd	r26, Y+7	; 0x07
    3bbe:	b8 85       	ldd	r27, Y+8	; 0x08
    3bc0:	14 96       	adiw	r26, 0x04	; 4
    3bc2:	8c 91       	ld	r24, X
    3bc4:	14 97       	sbiw	r26, 0x04	; 4
    3bc6:	80 68       	ori	r24, 0x80	; 128
    3bc8:	14 96       	adiw	r26, 0x04	; 4
    3bca:	8c 93       	st	X, r24
    3bcc:	ed c0       	rjmp	.+474    	; 0x3da8 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3bce:	42 30       	cpi	r20, 0x02	; 2
    3bd0:	51 05       	cpc	r21, r1
    3bd2:	61 05       	cpc	r22, r1
    3bd4:	71 05       	cpc	r23, r1
    3bd6:	08 f4       	brcc	.+2      	; 0x3bda <f_lseek+0x224>
    3bd8:	ac cf       	rjmp	.-168    	; 0x3b32 <f_lseek+0x17c>
    3bda:	af 81       	ldd	r26, Y+7	; 0x07
    3bdc:	b8 85       	ldd	r27, Y+8	; 0x08
    3bde:	ed 91       	ld	r30, X+
    3be0:	fc 91       	ld	r31, X
    3be2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3be4:	93 8d       	ldd	r25, Z+27	; 0x1b
    3be6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3be8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3bea:	48 17       	cp	r20, r24
    3bec:	59 07       	cpc	r21, r25
    3bee:	6a 07       	cpc	r22, r26
    3bf0:	7b 07       	cpc	r23, r27
    3bf2:	08 f0       	brcs	.+2      	; 0x3bf6 <f_lseek+0x240>
    3bf4:	9e cf       	rjmp	.-196    	; 0x3b32 <f_lseek+0x17c>
				fp->curr_clust = clst;
    3bf6:	af 81       	ldd	r26, Y+7	; 0x07
    3bf8:	b8 85       	ldd	r27, Y+8	; 0x08
    3bfa:	52 96       	adiw	r26, 0x12	; 18
    3bfc:	4d 93       	st	X+, r20
    3bfe:	5d 93       	st	X+, r21
    3c00:	6d 93       	st	X+, r22
    3c02:	7c 93       	st	X, r23
    3c04:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3c06:	fd 01       	movw	r30, r26
    3c08:	86 81       	ldd	r24, Z+6	; 0x06
    3c0a:	97 81       	ldd	r25, Z+7	; 0x07
    3c0c:	a0 85       	ldd	r26, Z+8	; 0x08
    3c0e:	b1 85       	ldd	r27, Z+9	; 0x09
    3c10:	86 0d       	add	r24, r6
    3c12:	97 1d       	adc	r25, r7
    3c14:	a8 1d       	adc	r26, r8
    3c16:	b9 1d       	adc	r27, r9
    3c18:	86 83       	std	Z+6, r24	; 0x06
    3c1a:	97 83       	std	Z+7, r25	; 0x07
    3c1c:	a0 87       	std	Z+8, r26	; 0x08
    3c1e:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3c20:	a6 18       	sub	r10, r6
    3c22:	b7 08       	sbc	r11, r7
    3c24:	c8 08       	sbc	r12, r8
    3c26:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3c28:	6a 14       	cp	r6, r10
    3c2a:	7b 04       	cpc	r7, r11
    3c2c:	8c 04       	cpc	r8, r12
    3c2e:	9d 04       	cpc	r9, r13
    3c30:	08 f4       	brcc	.+2      	; 0x3c34 <f_lseek+0x27e>
    3c32:	a3 cf       	rjmp	.-186    	; 0x3b7a <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3c34:	ef 81       	ldd	r30, Y+7	; 0x07
    3c36:	f8 85       	ldd	r31, Y+8	; 0x08
    3c38:	86 81       	ldd	r24, Z+6	; 0x06
    3c3a:	97 81       	ldd	r25, Z+7	; 0x07
    3c3c:	a0 85       	ldd	r26, Z+8	; 0x08
    3c3e:	b1 85       	ldd	r27, Z+9	; 0x09
    3c40:	8a 0d       	add	r24, r10
    3c42:	9b 1d       	adc	r25, r11
    3c44:	ac 1d       	adc	r26, r12
    3c46:	bd 1d       	adc	r27, r13
    3c48:	86 83       	std	Z+6, r24	; 0x06
    3c4a:	97 83       	std	Z+7, r25	; 0x07
    3c4c:	a0 87       	std	Z+8, r26	; 0x08
    3c4e:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3c50:	d6 01       	movw	r26, r12
    3c52:	c5 01       	movw	r24, r10
    3c54:	09 e0       	ldi	r16, 0x09	; 9
    3c56:	b6 95       	lsr	r27
    3c58:	a7 95       	ror	r26
    3c5a:	97 95       	ror	r25
    3c5c:	87 95       	ror	r24
    3c5e:	0a 95       	dec	r16
    3c60:	d1 f7       	brne	.-12     	; 0x3c56 <f_lseek+0x2a0>
    3c62:	08 2f       	mov	r16, r24
    3c64:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3c66:	8f ef       	ldi	r24, 0xFF	; 255
    3c68:	91 e0       	ldi	r25, 0x01	; 1
    3c6a:	a0 e0       	ldi	r26, 0x00	; 0
    3c6c:	b0 e0       	ldi	r27, 0x00	; 0
    3c6e:	a8 22       	and	r10, r24
    3c70:	b9 22       	and	r11, r25
    3c72:	ca 22       	and	r12, r26
    3c74:	db 22       	and	r13, r27
    3c76:	a1 14       	cp	r10, r1
    3c78:	b1 04       	cpc	r11, r1
    3c7a:	c1 04       	cpc	r12, r1
    3c7c:	d1 04       	cpc	r13, r1
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <f_lseek+0x2cc>
    3c80:	47 c0       	rjmp	.+142    	; 0x3d10 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3c82:	80 80       	ld	r8, Z
    3c84:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3c86:	3e ef       	ldi	r19, 0xFE	; 254
    3c88:	a3 2e       	mov	r10, r19
    3c8a:	3f ef       	ldi	r19, 0xFF	; 255
    3c8c:	b3 2e       	mov	r11, r19
    3c8e:	3f ef       	ldi	r19, 0xFF	; 255
    3c90:	c3 2e       	mov	r12, r19
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	d3 2e       	mov	r13, r19
    3c96:	a4 0e       	add	r10, r20
    3c98:	b5 1e       	adc	r11, r21
    3c9a:	c6 1e       	adc	r12, r22
    3c9c:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3c9e:	f4 01       	movw	r30, r8
    3ca0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ca2:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ca4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3ca6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3ca8:	02 97       	sbiw	r24, 0x02	; 2
    3caa:	a1 09       	sbc	r26, r1
    3cac:	b1 09       	sbc	r27, r1
    3cae:	a8 16       	cp	r10, r24
    3cb0:	b9 06       	cpc	r11, r25
    3cb2:	ca 06       	cpc	r12, r26
    3cb4:	db 06       	cpc	r13, r27
    3cb6:	c0 f4       	brcc	.+48     	; 0x3ce8 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3cb8:	22 81       	ldd	r18, Z+2	; 0x02
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	c6 01       	movw	r24, r12
    3cc2:	b5 01       	movw	r22, r10
    3cc4:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    3cc8:	9b 01       	movw	r18, r22
    3cca:	ac 01       	movw	r20, r24
    3ccc:	f4 01       	movw	r30, r8
    3cce:	86 a1       	ldd	r24, Z+38	; 0x26
    3cd0:	97 a1       	ldd	r25, Z+39	; 0x27
    3cd2:	a0 a5       	ldd	r26, Z+40	; 0x28
    3cd4:	b1 a5       	ldd	r27, Z+41	; 0x29
    3cd6:	28 0f       	add	r18, r24
    3cd8:	39 1f       	adc	r19, r25
    3cda:	4a 1f       	adc	r20, r26
    3cdc:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3cde:	21 15       	cp	r18, r1
    3ce0:	31 05       	cpc	r19, r1
    3ce2:	41 05       	cpc	r20, r1
    3ce4:	51 05       	cpc	r21, r1
    3ce6:	49 f4       	brne	.+18     	; 0x3cfa <f_lseek+0x344>
    3ce8:	af 81       	ldd	r26, Y+7	; 0x07
    3cea:	b8 85       	ldd	r27, Y+8	; 0x08
    3cec:	14 96       	adiw	r26, 0x04	; 4
    3cee:	8c 91       	ld	r24, X
    3cf0:	14 97       	sbiw	r26, 0x04	; 4
    3cf2:	80 68       	ori	r24, 0x80	; 128
    3cf4:	14 96       	adiw	r26, 0x04	; 4
    3cf6:	8c 93       	st	X, r24
    3cf8:	21 cf       	rjmp	.-446    	; 0x3b3c <f_lseek+0x186>
				nsect += fp->csect;
    3cfa:	59 01       	movw	r10, r18
    3cfc:	6a 01       	movw	r12, r20
    3cfe:	a0 0e       	add	r10, r16
    3d00:	b1 1c       	adc	r11, r1
    3d02:	c1 1c       	adc	r12, r1
    3d04:	d1 1c       	adc	r13, r1
				fp->csect++;
    3d06:	0f 5f       	subi	r16, 0xFF	; 255
    3d08:	ef 81       	ldd	r30, Y+7	; 0x07
    3d0a:	f8 85       	ldd	r31, Y+8	; 0x08
    3d0c:	05 83       	std	Z+5, r16	; 0x05
    3d0e:	03 c0       	rjmp	.+6      	; 0x3d16 <f_lseek+0x360>
    3d10:	aa 24       	eor	r10, r10
    3d12:	bb 24       	eor	r11, r11
    3d14:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3d16:	ef 81       	ldd	r30, Y+7	; 0x07
    3d18:	f8 85       	ldd	r31, Y+8	; 0x08
    3d1a:	86 81       	ldd	r24, Z+6	; 0x06
    3d1c:	97 81       	ldd	r25, Z+7	; 0x07
    3d1e:	a0 85       	ldd	r26, Z+8	; 0x08
    3d20:	b1 85       	ldd	r27, Z+9	; 0x09
    3d22:	91 70       	andi	r25, 0x01	; 1
    3d24:	a0 70       	andi	r26, 0x00	; 0
    3d26:	b0 70       	andi	r27, 0x00	; 0
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	a1 05       	cpc	r26, r1
    3d2c:	b1 05       	cpc	r27, r1
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <f_lseek+0x37c>
    3d30:	45 c0       	rjmp	.+138    	; 0x3dbc <f_lseek+0x406>
    3d32:	26 89       	ldd	r18, Z+22	; 0x16
    3d34:	37 89       	ldd	r19, Z+23	; 0x17
    3d36:	40 8d       	ldd	r20, Z+24	; 0x18
    3d38:	51 8d       	ldd	r21, Z+25	; 0x19
    3d3a:	a2 16       	cp	r10, r18
    3d3c:	b3 06       	cpc	r11, r19
    3d3e:	c4 06       	cpc	r12, r20
    3d40:	d5 06       	cpc	r13, r21
    3d42:	e1 f1       	breq	.+120    	; 0x3dbc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3d44:	84 81       	ldd	r24, Z+4	; 0x04
    3d46:	86 ff       	sbrs	r24, 6
    3d48:	1a c0       	rjmp	.+52     	; 0x3d7e <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3d4a:	01 90       	ld	r0, Z+
    3d4c:	f0 81       	ld	r31, Z
    3d4e:	e0 2d       	mov	r30, r0
    3d50:	6f 81       	ldd	r22, Y+7	; 0x07
    3d52:	78 85       	ldd	r23, Y+8	; 0x08
    3d54:	60 5e       	subi	r22, 0xE0	; 224
    3d56:	7f 4f       	sbci	r23, 0xFF	; 255
    3d58:	81 81       	ldd	r24, Z+1	; 0x01
    3d5a:	01 e0       	ldi	r16, 0x01	; 1
    3d5c:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    3d60:	af 81       	ldd	r26, Y+7	; 0x07
    3d62:	b8 85       	ldd	r27, Y+8	; 0x08
    3d64:	14 96       	adiw	r26, 0x04	; 4
    3d66:	9c 91       	ld	r25, X
    3d68:	14 97       	sbiw	r26, 0x04	; 4
    3d6a:	88 23       	and	r24, r24
    3d6c:	21 f0       	breq	.+8      	; 0x3d76 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3d6e:	90 68       	ori	r25, 0x80	; 128
    3d70:	14 96       	adiw	r26, 0x04	; 4
    3d72:	9c 93       	st	X, r25
    3d74:	19 c0       	rjmp	.+50     	; 0x3da8 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3d76:	9f 7b       	andi	r25, 0xBF	; 191
    3d78:	ef 81       	ldd	r30, Y+7	; 0x07
    3d7a:	f8 85       	ldd	r31, Y+8	; 0x08
    3d7c:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3d7e:	af 81       	ldd	r26, Y+7	; 0x07
    3d80:	b8 85       	ldd	r27, Y+8	; 0x08
    3d82:	ed 91       	ld	r30, X+
    3d84:	fc 91       	ld	r31, X
    3d86:	11 97       	sbiw	r26, 0x01	; 1
    3d88:	bd 01       	movw	r22, r26
    3d8a:	60 5e       	subi	r22, 0xE0	; 224
    3d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8e:	81 81       	ldd	r24, Z+1	; 0x01
    3d90:	a6 01       	movw	r20, r12
    3d92:	95 01       	movw	r18, r10
    3d94:	01 e0       	ldi	r16, 0x01	; 1
    3d96:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_read>
    3d9a:	88 23       	and	r24, r24
    3d9c:	39 f0       	breq	.+14     	; 0x3dac <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3d9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3da0:	f8 85       	ldd	r31, Y+8	; 0x08
    3da2:	84 81       	ldd	r24, Z+4	; 0x04
    3da4:	80 68       	ori	r24, 0x80	; 128
    3da6:	84 83       	std	Z+4, r24	; 0x04
    3da8:	11 e0       	ldi	r17, 0x01	; 1
    3daa:	1e c0       	rjmp	.+60     	; 0x3de8 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3dac:	af 81       	ldd	r26, Y+7	; 0x07
    3dae:	b8 85       	ldd	r27, Y+8	; 0x08
    3db0:	56 96       	adiw	r26, 0x16	; 22
    3db2:	ad 92       	st	X+, r10
    3db4:	bd 92       	st	X+, r11
    3db6:	cd 92       	st	X+, r12
    3db8:	dc 92       	st	X, r13
    3dba:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3dbc:	ef 81       	ldd	r30, Y+7	; 0x07
    3dbe:	f8 85       	ldd	r31, Y+8	; 0x08
    3dc0:	26 81       	ldd	r18, Z+6	; 0x06
    3dc2:	37 81       	ldd	r19, Z+7	; 0x07
    3dc4:	40 85       	ldd	r20, Z+8	; 0x08
    3dc6:	51 85       	ldd	r21, Z+9	; 0x09
    3dc8:	82 85       	ldd	r24, Z+10	; 0x0a
    3dca:	93 85       	ldd	r25, Z+11	; 0x0b
    3dcc:	a4 85       	ldd	r26, Z+12	; 0x0c
    3dce:	b5 85       	ldd	r27, Z+13	; 0x0d
    3dd0:	82 17       	cp	r24, r18
    3dd2:	93 07       	cpc	r25, r19
    3dd4:	a4 07       	cpc	r26, r20
    3dd6:	b5 07       	cpc	r27, r21
    3dd8:	38 f4       	brcc	.+14     	; 0x3de8 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3dda:	22 87       	std	Z+10, r18	; 0x0a
    3ddc:	33 87       	std	Z+11, r19	; 0x0b
    3dde:	44 87       	std	Z+12, r20	; 0x0c
    3de0:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3de2:	84 81       	ldd	r24, Z+4	; 0x04
    3de4:	80 62       	ori	r24, 0x20	; 32
    3de6:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3de8:	81 2f       	mov	r24, r17
    3dea:	28 96       	adiw	r28, 0x08	; 8
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	1f 91       	pop	r17
    3df6:	0f 91       	pop	r16
    3df8:	df 90       	pop	r13
    3dfa:	cf 90       	pop	r12
    3dfc:	bf 90       	pop	r11
    3dfe:	af 90       	pop	r10
    3e00:	9f 90       	pop	r9
    3e02:	8f 90       	pop	r8
    3e04:	7f 90       	pop	r7
    3e06:	6f 90       	pop	r6
    3e08:	5f 90       	pop	r5
    3e0a:	4f 90       	pop	r4
    3e0c:	3f 90       	pop	r3
    3e0e:	2f 90       	pop	r2
    3e10:	08 95       	ret

00003e12 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	2e 97       	sbiw	r28, 0x0e	; 14
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	8c 01       	movw	r16, r24
    3e26:	6d 87       	std	Y+13, r22	; 0x0d
    3e28:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	0d 96       	adiw	r24, 0x0d	; 13
    3e2e:	b8 01       	movw	r22, r16
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
	if (res == FR_OK) {
    3e36:	88 23       	and	r24, r24
    3e38:	09 f0       	breq	.+2      	; 0x3e3c <f_opendir+0x2a>
    3e3a:	46 c0       	rjmp	.+140    	; 0x3ec8 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	01 96       	adiw	r24, 0x01	; 1
    3e40:	d8 01       	movw	r26, r16
    3e42:	54 96       	adiw	r26, 0x14	; 20
    3e44:	8d 93       	st	X+, r24
    3e46:	9c 93       	st	X, r25
    3e48:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3e4a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e4c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e4e:	c8 01       	movw	r24, r16
    3e50:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3e54:	88 23       	and	r24, r24
    3e56:	a9 f5       	brne	.+106    	; 0x3ec2 <f_opendir+0xb0>
			dir = dj->dir;
    3e58:	d8 01       	movw	r26, r16
    3e5a:	52 96       	adiw	r26, 0x12	; 18
    3e5c:	ed 91       	ld	r30, X+
    3e5e:	fc 91       	ld	r31, X
    3e60:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3e62:	30 97       	sbiw	r30, 0x00	; 0
    3e64:	f9 f0       	breq	.+62     	; 0x3ea4 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3e66:	83 85       	ldd	r24, Z+11	; 0x0b
    3e68:	84 ff       	sbrs	r24, 4
    3e6a:	2d c0       	rjmp	.+90     	; 0x3ec6 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3e6c:	35 89       	ldd	r19, Z+21	; 0x15
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	84 89       	ldd	r24, Z+20	; 0x14
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	28 2b       	or	r18, r24
    3e76:	39 2b       	or	r19, r25
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	a9 01       	movw	r20, r18
    3e7e:	33 27       	eor	r19, r19
    3e80:	22 27       	eor	r18, r18
    3e82:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	62 8d       	ldd	r22, Z+26	; 0x1a
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	86 2b       	or	r24, r22
    3e8c:	97 2b       	or	r25, r23
    3e8e:	a0 e0       	ldi	r26, 0x00	; 0
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	28 2b       	or	r18, r24
    3e94:	39 2b       	or	r19, r25
    3e96:	4a 2b       	or	r20, r26
    3e98:	5b 2b       	or	r21, r27
    3e9a:	f8 01       	movw	r30, r16
    3e9c:	26 83       	std	Z+6, r18	; 0x06
    3e9e:	37 83       	std	Z+7, r19	; 0x07
    3ea0:	40 87       	std	Z+8, r20	; 0x08
    3ea2:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3ea4:	d8 01       	movw	r26, r16
    3ea6:	ed 91       	ld	r30, X+
    3ea8:	fc 91       	ld	r31, X
    3eaa:	11 97       	sbiw	r26, 0x01	; 1
    3eac:	86 81       	ldd	r24, Z+6	; 0x06
    3eae:	97 81       	ldd	r25, Z+7	; 0x07
    3eb0:	12 96       	adiw	r26, 0x02	; 2
    3eb2:	8d 93       	st	X+, r24
    3eb4:	9c 93       	st	X, r25
    3eb6:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3eb8:	c8 01       	movw	r24, r16
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	70 e0       	ldi	r23, 0x00	; 0
    3ebe:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3ec2:	84 30       	cpi	r24, 0x04	; 4
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <f_opendir+0xb6>
    3ec6:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3ec8:	2e 96       	adiw	r28, 0x0e	; 14
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	1f 91       	pop	r17
    3ed4:	0f 91       	pop	r16
    3ed6:	08 95       	ret

00003ed8 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3ed8:	ef 92       	push	r14
    3eda:	ff 92       	push	r15
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	2c 97       	sbiw	r28, 0x0c	; 12
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	8c 01       	movw	r16, r24
    3ef0:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	62 81       	ldd	r22, Z+2	; 0x02
    3ef6:	73 81       	ldd	r23, Z+3	; 0x03
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <validate>
	if (res == FR_OK) {
    3f00:	88 23       	and	r24, r24
    3f02:	59 f5       	brne	.+86     	; 0x3f5a <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3f04:	ce 01       	movw	r24, r28
    3f06:	01 96       	adiw	r24, 0x01	; 1
    3f08:	f8 01       	movw	r30, r16
    3f0a:	84 8b       	std	Z+20, r24	; 0x14
    3f0c:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3f0e:	e1 14       	cp	r14, r1
    3f10:	f1 04       	cpc	r15, r1
    3f12:	31 f4       	brne	.+12     	; 0x3f20 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3f14:	c8 01       	movw	r24, r16
    3f16:	60 e0       	ldi	r22, 0x00	; 0
    3f18:	70 e0       	ldi	r23, 0x00	; 0
    3f1a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
    3f1e:	1d c0       	rjmp	.+58     	; 0x3f5a <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3f20:	c8 01       	movw	r24, r16
    3f22:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <dir_read>
			if (res == FR_NO_FILE) {
    3f26:	84 30       	cpi	r24, 0x04	; 4
    3f28:	31 f4       	brne	.+12     	; 0x3f36 <f_readdir+0x5e>
				dj->sect = 0;
    3f2a:	f8 01       	movw	r30, r16
    3f2c:	16 86       	std	Z+14, r1	; 0x0e
    3f2e:	17 86       	std	Z+15, r1	; 0x0f
    3f30:	10 8a       	std	Z+16, r1	; 0x10
    3f32:	11 8a       	std	Z+17, r1	; 0x11
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3f36:	88 23       	and	r24, r24
    3f38:	81 f4       	brne	.+32     	; 0x3f5a <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3f3a:	c8 01       	movw	r24, r16
    3f3c:	b7 01       	movw	r22, r14
    3f3e:	0e 94 17 11 	call	0x222e	; 0x222e <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3f42:	c8 01       	movw	r24, r16
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <dir_next>
				if (res == FR_NO_FILE) {
    3f4a:	84 30       	cpi	r24, 0x04	; 4
    3f4c:	31 f4       	brne	.+12     	; 0x3f5a <f_readdir+0x82>
					dj->sect = 0;
    3f4e:	f8 01       	movw	r30, r16
    3f50:	16 86       	std	Z+14, r1	; 0x0e
    3f52:	17 86       	std	Z+15, r1	; 0x0f
    3f54:	10 8a       	std	Z+16, r1	; 0x10
    3f56:	11 8a       	std	Z+17, r1	; 0x11
    3f58:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3f5a:	2c 96       	adiw	r28, 0x0c	; 12
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	de bf       	out	0x3e, r29	; 62
    3f60:	cf 91       	pop	r28
    3f62:	df 91       	pop	r29
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	ff 90       	pop	r15
    3f6a:	ef 90       	pop	r14
    3f6c:	08 95       	ret

00003f6e <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3f6e:	cf 92       	push	r12
    3f70:	df 92       	push	r13
    3f72:	ef 92       	push	r14
    3f74:	ff 92       	push	r15
    3f76:	1f 93       	push	r17
    3f78:	df 93       	push	r29
    3f7a:	cf 93       	push	r28
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	a4 97       	sbiw	r28, 0x24	; 36
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	8b a3       	std	Y+35, r24	; 0x23
    3f88:	9c a3       	std	Y+36, r25	; 0x24
    3f8a:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3f8c:	2d e0       	ldi	r18, 0x0D	; 13
    3f8e:	e2 2e       	mov	r14, r18
    3f90:	f1 2c       	mov	r15, r1
    3f92:	ec 0e       	add	r14, r28
    3f94:	fd 1e       	adc	r15, r29
    3f96:	ce 01       	movw	r24, r28
    3f98:	83 96       	adiw	r24, 0x23	; 35
    3f9a:	b7 01       	movw	r22, r14
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
    3fa2:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3fa4:	88 23       	and	r24, r24
    3fa6:	b1 f4       	brne	.+44     	; 0x3fd4 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3fa8:	ce 01       	movw	r24, r28
    3faa:	01 96       	adiw	r24, 0x01	; 1
    3fac:	89 a3       	std	Y+33, r24	; 0x21
    3fae:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3fb0:	6b a1       	ldd	r22, Y+35	; 0x23
    3fb2:	7c a1       	ldd	r23, Y+36	; 0x24
    3fb4:	c7 01       	movw	r24, r14
    3fb6:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
    3fba:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3fbc:	88 23       	and	r24, r24
    3fbe:	51 f4       	brne	.+20     	; 0x3fd4 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3fc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fc2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fc4:	89 2b       	or	r24, r25
    3fc6:	11 f4       	brne	.+4      	; 0x3fcc <f_stat+0x5e>
    3fc8:	16 e0       	ldi	r17, 0x06	; 6
    3fca:	04 c0       	rjmp	.+8      	; 0x3fd4 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3fcc:	c7 01       	movw	r24, r14
    3fce:	b6 01       	movw	r22, r12
    3fd0:	0e 94 17 11 	call	0x222e	; 0x222e <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3fd4:	81 2f       	mov	r24, r17
    3fd6:	a4 96       	adiw	r28, 0x24	; 36
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	1f 91       	pop	r17
    3fe2:	ff 90       	pop	r15
    3fe4:	ef 90       	pop	r14
    3fe6:	df 90       	pop	r13
    3fe8:	cf 90       	pop	r12
    3fea:	08 95       	ret

00003fec <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3fec:	2f 92       	push	r2
    3fee:	3f 92       	push	r3
    3ff0:	4f 92       	push	r4
    3ff2:	5f 92       	push	r5
    3ff4:	6f 92       	push	r6
    3ff6:	7f 92       	push	r7
    3ff8:	8f 92       	push	r8
    3ffa:	9f 92       	push	r9
    3ffc:	af 92       	push	r10
    3ffe:	bf 92       	push	r11
    4000:	cf 92       	push	r12
    4002:	df 92       	push	r13
    4004:	ef 92       	push	r14
    4006:	ff 92       	push	r15
    4008:	0f 93       	push	r16
    400a:	1f 93       	push	r17
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	29 97       	sbiw	r28, 0x09	; 9
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	de bf       	out	0x3e, r29	; 62
    401a:	89 83       	std	Y+1, r24	; 0x01
    401c:	9a 83       	std	Y+2, r25	; 0x02
    401e:	6c 83       	std	Y+4, r22	; 0x04
    4020:	7d 83       	std	Y+5, r23	; 0x05
    4022:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4024:	ce 01       	movw	r24, r28
    4026:	01 96       	adiw	r24, 0x01	; 1
    4028:	ba 01       	movw	r22, r20
    402a:	40 e0       	ldi	r20, 0x00	; 0
    402c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    4030:	88 23       	and	r24, r24
    4032:	09 f0       	breq	.+2      	; 0x4036 <f_getfree+0x4a>
    4034:	eb c0       	rjmp	.+470    	; 0x420c <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    4036:	d2 01       	movw	r26, r4
    4038:	ed 91       	ld	r30, X+
    403a:	fc 91       	ld	r31, X
    403c:	26 85       	ldd	r18, Z+14	; 0x0e
    403e:	37 85       	ldd	r19, Z+15	; 0x0f
    4040:	40 89       	ldd	r20, Z+16	; 0x10
    4042:	51 89       	ldd	r21, Z+17	; 0x11
    4044:	e2 8c       	ldd	r14, Z+26	; 0x1a
    4046:	f3 8c       	ldd	r15, Z+27	; 0x1b
    4048:	04 8d       	ldd	r16, Z+28	; 0x1c
    404a:	15 8d       	ldd	r17, Z+29	; 0x1d
    404c:	d8 01       	movw	r26, r16
    404e:	c7 01       	movw	r24, r14
    4050:	02 97       	sbiw	r24, 0x02	; 2
    4052:	a1 09       	sbc	r26, r1
    4054:	b1 09       	sbc	r27, r1
    4056:	82 17       	cp	r24, r18
    4058:	93 07       	cpc	r25, r19
    405a:	a4 07       	cpc	r26, r20
    405c:	b5 07       	cpc	r27, r21
    405e:	38 f0       	brcs	.+14     	; 0x406e <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    4060:	ec 81       	ldd	r30, Y+4	; 0x04
    4062:	fd 81       	ldd	r31, Y+5	; 0x05
    4064:	20 83       	st	Z, r18
    4066:	31 83       	std	Z+1, r19	; 0x01
    4068:	42 83       	std	Z+2, r20	; 0x02
    406a:	53 83       	std	Z+3, r21	; 0x03
    406c:	ce c0       	rjmp	.+412    	; 0x420a <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    406e:	30 80       	ld	r3, Z
    4070:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    4072:	23 2d       	mov	r18, r3
    4074:	21 30       	cpi	r18, 0x01	; 1
    4076:	e1 f5       	brne	.+120    	; 0x40f0 <f_getfree+0x104>
    4078:	aa 24       	eor	r10, r10
    407a:	bb 24       	eor	r11, r11
    407c:	65 01       	movw	r12, r10
    407e:	92 e0       	ldi	r25, 0x02	; 2
    4080:	e9 2e       	mov	r14, r25
    4082:	f1 2c       	mov	r15, r1
    4084:	01 2d       	mov	r16, r1
    4086:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    4088:	d2 01       	movw	r26, r4
    408a:	8d 91       	ld	r24, X+
    408c:	9c 91       	ld	r25, X
    408e:	b8 01       	movw	r22, r16
    4090:	a7 01       	movw	r20, r14
    4092:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    4096:	6f 3f       	cpi	r22, 0xFF	; 255
    4098:	bf ef       	ldi	r27, 0xFF	; 255
    409a:	7b 07       	cpc	r23, r27
    409c:	bf ef       	ldi	r27, 0xFF	; 255
    409e:	8b 07       	cpc	r24, r27
    40a0:	bf ef       	ldi	r27, 0xFF	; 255
    40a2:	9b 07       	cpc	r25, r27
    40a4:	11 f4       	brne	.+4      	; 0x40aa <f_getfree+0xbe>
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	b1 c0       	rjmp	.+354    	; 0x420c <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    40aa:	61 30       	cpi	r22, 0x01	; 1
    40ac:	71 05       	cpc	r23, r1
    40ae:	81 05       	cpc	r24, r1
    40b0:	91 05       	cpc	r25, r1
    40b2:	11 f4       	brne	.+4      	; 0x40b8 <f_getfree+0xcc>
    40b4:	82 e0       	ldi	r24, 0x02	; 2
    40b6:	aa c0       	rjmp	.+340    	; 0x420c <f_getfree+0x220>
			if (stat == 0) n++;
    40b8:	61 15       	cp	r22, r1
    40ba:	71 05       	cpc	r23, r1
    40bc:	81 05       	cpc	r24, r1
    40be:	91 05       	cpc	r25, r1
    40c0:	29 f4       	brne	.+10     	; 0x40cc <f_getfree+0xe0>
    40c2:	08 94       	sec
    40c4:	a1 1c       	adc	r10, r1
    40c6:	b1 1c       	adc	r11, r1
    40c8:	c1 1c       	adc	r12, r1
    40ca:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    40cc:	08 94       	sec
    40ce:	e1 1c       	adc	r14, r1
    40d0:	f1 1c       	adc	r15, r1
    40d2:	01 1d       	adc	r16, r1
    40d4:	11 1d       	adc	r17, r1
    40d6:	d2 01       	movw	r26, r4
    40d8:	ed 91       	ld	r30, X+
    40da:	fc 91       	ld	r31, X
    40dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    40de:	93 8d       	ldd	r25, Z+27	; 0x1b
    40e0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    40e2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    40e4:	e8 16       	cp	r14, r24
    40e6:	f9 06       	cpc	r15, r25
    40e8:	0a 07       	cpc	r16, r26
    40ea:	1b 07       	cpc	r17, r27
    40ec:	68 f2       	brcs	.-102    	; 0x4088 <f_getfree+0x9c>
    40ee:	7b c0       	rjmp	.+246    	; 0x41e6 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    40f0:	66 8c       	ldd	r6, Z+30	; 0x1e
    40f2:	77 8c       	ldd	r7, Z+31	; 0x1f
    40f4:	80 a0       	ldd	r8, Z+32	; 0x20
    40f6:	91 a0       	ldd	r9, Z+33	; 0x21
    40f8:	aa 24       	eor	r10, r10
    40fa:	bb 24       	eor	r11, r11
    40fc:	65 01       	movw	r12, r10
    40fe:	60 e0       	ldi	r22, 0x00	; 0
    4100:	70 e0       	ldi	r23, 0x00	; 0
    4102:	e0 e0       	ldi	r30, 0x00	; 0
    4104:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    4106:	61 15       	cp	r22, r1
    4108:	71 05       	cpc	r23, r1
    410a:	a9 f4       	brne	.+42     	; 0x4136 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    410c:	f2 01       	movw	r30, r4
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	b4 01       	movw	r22, r8
    4114:	a3 01       	movw	r20, r6
    4116:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
				if (res != FR_OK)
    411a:	88 23       	and	r24, r24
    411c:	09 f0       	breq	.+2      	; 0x4120 <f_getfree+0x134>
    411e:	76 c0       	rjmp	.+236    	; 0x420c <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    4120:	08 94       	sec
    4122:	61 1c       	adc	r6, r1
    4124:	71 1c       	adc	r7, r1
    4126:	81 1c       	adc	r8, r1
    4128:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    412a:	d2 01       	movw	r26, r4
    412c:	ed 91       	ld	r30, X+
    412e:	fc 91       	ld	r31, X
    4130:	be 96       	adiw	r30, 0x2e	; 46
    4132:	60 e0       	ldi	r22, 0x00	; 0
    4134:	72 e0       	ldi	r23, 0x02	; 2
    4136:	b1 81       	ldd	r27, Z+1	; 0x01
    4138:	b8 87       	std	Y+8, r27	; 0x08
    413a:	20 81       	ld	r18, Z
    413c:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    413e:	3b 81       	ldd	r19, Y+3	; 0x03
    4140:	32 30       	cpi	r19, 0x02	; 2
    4142:	99 f4       	brne	.+38     	; 0x416a <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    4144:	bf 83       	std	Y+7, r27	; 0x07
    4146:	1e 82       	std	Y+6, r1	; 0x06
    4148:	82 2f       	mov	r24, r18
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	ae 81       	ldd	r26, Y+6	; 0x06
    414e:	bf 81       	ldd	r27, Y+7	; 0x07
    4150:	8a 2b       	or	r24, r26
    4152:	9b 2b       	or	r25, r27
    4154:	89 2b       	or	r24, r25
    4156:	29 f4       	brne	.+10     	; 0x4162 <f_getfree+0x176>
    4158:	08 94       	sec
    415a:	a1 1c       	adc	r10, r1
    415c:	b1 1c       	adc	r11, r1
    415e:	c1 1c       	adc	r12, r1
    4160:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    4162:	32 96       	adiw	r30, 0x02	; 2
    4164:	62 50       	subi	r22, 0x02	; 2
    4166:	70 40       	sbci	r23, 0x00	; 0
    4168:	33 c0       	rjmp	.+102    	; 0x41d0 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    416a:	23 81       	ldd	r18, Z+3	; 0x03
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e0       	ldi	r20, 0x00	; 0
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	52 2f       	mov	r21, r18
    4174:	44 27       	eor	r20, r20
    4176:	33 27       	eor	r19, r19
    4178:	22 27       	eor	r18, r18
    417a:	82 81       	ldd	r24, Z+2	; 0x02
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	a0 e0       	ldi	r26, 0x00	; 0
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	dc 01       	movw	r26, r24
    4184:	99 27       	eor	r25, r25
    4186:	88 27       	eor	r24, r24
    4188:	28 2b       	or	r18, r24
    418a:	39 2b       	or	r19, r25
    418c:	4a 2b       	or	r20, r26
    418e:	5b 2b       	or	r21, r27
    4190:	39 84       	ldd	r3, Y+9	; 0x09
    4192:	83 2d       	mov	r24, r3
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	a0 e0       	ldi	r26, 0x00	; 0
    4198:	b0 e0       	ldi	r27, 0x00	; 0
    419a:	28 2b       	or	r18, r24
    419c:	39 2b       	or	r19, r25
    419e:	4a 2b       	or	r20, r26
    41a0:	5b 2b       	or	r21, r27
    41a2:	38 84       	ldd	r3, Y+8	; 0x08
    41a4:	22 24       	eor	r2, r2
    41a6:	c1 01       	movw	r24, r2
    41a8:	a0 e0       	ldi	r26, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	28 2b       	or	r18, r24
    41ae:	39 2b       	or	r19, r25
    41b0:	4a 2b       	or	r20, r26
    41b2:	5b 2b       	or	r21, r27
    41b4:	5f 70       	andi	r21, 0x0F	; 15
    41b6:	21 15       	cp	r18, r1
    41b8:	31 05       	cpc	r19, r1
    41ba:	41 05       	cpc	r20, r1
    41bc:	51 05       	cpc	r21, r1
    41be:	29 f4       	brne	.+10     	; 0x41ca <f_getfree+0x1de>
    41c0:	08 94       	sec
    41c2:	a1 1c       	adc	r10, r1
    41c4:	b1 1c       	adc	r11, r1
    41c6:	c1 1c       	adc	r12, r1
    41c8:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    41ca:	34 96       	adiw	r30, 0x04	; 4
    41cc:	64 50       	subi	r22, 0x04	; 4
    41ce:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    41d0:	08 94       	sec
    41d2:	e1 08       	sbc	r14, r1
    41d4:	f1 08       	sbc	r15, r1
    41d6:	01 09       	sbc	r16, r1
    41d8:	11 09       	sbc	r17, r1
    41da:	e1 14       	cp	r14, r1
    41dc:	f1 04       	cpc	r15, r1
    41de:	01 05       	cpc	r16, r1
    41e0:	11 05       	cpc	r17, r1
    41e2:	09 f0       	breq	.+2      	; 0x41e6 <f_getfree+0x1fa>
    41e4:	90 cf       	rjmp	.-224    	; 0x4106 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    41e6:	d2 01       	movw	r26, r4
    41e8:	ed 91       	ld	r30, X+
    41ea:	fc 91       	ld	r31, X
    41ec:	a6 86       	std	Z+14, r10	; 0x0e
    41ee:	b7 86       	std	Z+15, r11	; 0x0f
    41f0:	c0 8a       	std	Z+16, r12	; 0x10
    41f2:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    41f4:	bb 81       	ldd	r27, Y+3	; 0x03
    41f6:	b3 30       	cpi	r27, 0x03	; 3
    41f8:	11 f4       	brne	.+4      	; 0x41fe <f_getfree+0x212>
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    41fe:	ec 81       	ldd	r30, Y+4	; 0x04
    4200:	fd 81       	ldd	r31, Y+5	; 0x05
    4202:	a0 82       	st	Z, r10
    4204:	b1 82       	std	Z+1, r11	; 0x01
    4206:	c2 82       	std	Z+2, r12	; 0x02
    4208:	d3 82       	std	Z+3, r13	; 0x03
    420a:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    420c:	29 96       	adiw	r28, 0x09	; 9
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	cf 91       	pop	r28
    4214:	df 91       	pop	r29
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	ff 90       	pop	r15
    421c:	ef 90       	pop	r14
    421e:	df 90       	pop	r13
    4220:	cf 90       	pop	r12
    4222:	bf 90       	pop	r11
    4224:	af 90       	pop	r10
    4226:	9f 90       	pop	r9
    4228:	8f 90       	pop	r8
    422a:	7f 90       	pop	r7
    422c:	6f 90       	pop	r6
    422e:	5f 90       	pop	r5
    4230:	4f 90       	pop	r4
    4232:	3f 90       	pop	r3
    4234:	2f 90       	pop	r2
    4236:	08 95       	ret

00004238 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    4238:	cf 92       	push	r12
    423a:	df 92       	push	r13
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	0f 93       	push	r16
    4242:	1f 93       	push	r17
    4244:	cf 93       	push	r28
    4246:	df 93       	push	r29
    4248:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    424a:	6a 81       	ldd	r22, Y+2	; 0x02
    424c:	7b 81       	ldd	r23, Y+3	; 0x03
    424e:	88 81       	ld	r24, Y
    4250:	99 81       	ldd	r25, Y+1	; 0x01
    4252:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <validate>
    4256:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4258:	88 23       	and	r24, r24
    425a:	09 f0       	breq	.+2      	; 0x425e <f_truncate+0x26>
    425c:	6e c0       	rjmp	.+220    	; 0x433a <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    425e:	6c 81       	ldd	r22, Y+4	; 0x04
    4260:	67 ff       	sbrs	r22, 7
    4262:	02 c0       	rjmp	.+4      	; 0x4268 <f_truncate+0x30>
    4264:	12 e0       	ldi	r17, 0x02	; 2
    4266:	69 c0       	rjmp	.+210    	; 0x433a <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    4268:	61 fd       	sbrc	r22, 1
    426a:	02 c0       	rjmp	.+4      	; 0x4270 <f_truncate+0x38>
    426c:	17 e0       	ldi	r17, 0x07	; 7
    426e:	65 c0       	rjmp	.+202    	; 0x433a <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    4270:	2e 81       	ldd	r18, Y+6	; 0x06
    4272:	3f 81       	ldd	r19, Y+7	; 0x07
    4274:	48 85       	ldd	r20, Y+8	; 0x08
    4276:	59 85       	ldd	r21, Y+9	; 0x09
    4278:	8a 85       	ldd	r24, Y+10	; 0x0a
    427a:	9b 85       	ldd	r25, Y+11	; 0x0b
    427c:	ac 85       	ldd	r26, Y+12	; 0x0c
    427e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4280:	28 17       	cp	r18, r24
    4282:	39 07       	cpc	r19, r25
    4284:	4a 07       	cpc	r20, r26
    4286:	5b 07       	cpc	r21, r27
    4288:	08 f0       	brcs	.+2      	; 0x428c <f_truncate+0x54>
    428a:	57 c0       	rjmp	.+174    	; 0x433a <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    428c:	2a 87       	std	Y+10, r18	; 0x0a
    428e:	3b 87       	std	Y+11, r19	; 0x0b
    4290:	4c 87       	std	Y+12, r20	; 0x0c
    4292:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    4294:	60 62       	ori	r22, 0x20	; 32
    4296:	6c 83       	std	Y+4, r22	; 0x04
    4298:	88 81       	ld	r24, Y
    429a:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    429c:	21 15       	cp	r18, r1
    429e:	31 05       	cpc	r19, r1
    42a0:	41 05       	cpc	r20, r1
    42a2:	51 05       	cpc	r21, r1
    42a4:	61 f4       	brne	.+24     	; 0x42be <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    42a6:	4e 85       	ldd	r20, Y+14	; 0x0e
    42a8:	5f 85       	ldd	r21, Y+15	; 0x0f
    42aa:	68 89       	ldd	r22, Y+16	; 0x10
    42ac:	79 89       	ldd	r23, Y+17	; 0x11
    42ae:	0e 94 47 0c 	call	0x188e	; 0x188e <remove_chain>
    42b2:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    42b4:	1e 86       	std	Y+14, r1	; 0x0e
    42b6:	1f 86       	std	Y+15, r1	; 0x0f
    42b8:	18 8a       	std	Y+16, r1	; 0x10
    42ba:	19 8a       	std	Y+17, r1	; 0x11
    42bc:	39 c0       	rjmp	.+114    	; 0x4330 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    42be:	4a 89       	ldd	r20, Y+18	; 0x12
    42c0:	5b 89       	ldd	r21, Y+19	; 0x13
    42c2:	6c 89       	ldd	r22, Y+20	; 0x14
    42c4:	7d 89       	ldd	r23, Y+21	; 0x15
    42c6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <get_fat>
    42ca:	6b 01       	movw	r12, r22
    42cc:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    42ce:	8f ef       	ldi	r24, 0xFF	; 255
    42d0:	c8 16       	cp	r12, r24
    42d2:	8f ef       	ldi	r24, 0xFF	; 255
    42d4:	d8 06       	cpc	r13, r24
    42d6:	8f ef       	ldi	r24, 0xFF	; 255
    42d8:	e8 06       	cpc	r14, r24
    42da:	8f ef       	ldi	r24, 0xFF	; 255
    42dc:	f8 06       	cpc	r15, r24
    42de:	b9 f1       	breq	.+110    	; 0x434e <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	c8 16       	cp	r12, r24
    42e4:	d1 04       	cpc	r13, r1
    42e6:	e1 04       	cpc	r14, r1
    42e8:	f1 04       	cpc	r15, r1
    42ea:	11 f4       	brne	.+4      	; 0x42f0 <f_truncate+0xb8>
    42ec:	12 e0       	ldi	r17, 0x02	; 2
    42ee:	22 c0       	rjmp	.+68     	; 0x4334 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    42f0:	e8 81       	ld	r30, Y
    42f2:	f9 81       	ldd	r31, Y+1	; 0x01
    42f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    42f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    42f8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    42fa:	b5 8d       	ldd	r27, Z+29	; 0x1d
    42fc:	c8 16       	cp	r12, r24
    42fe:	d9 06       	cpc	r13, r25
    4300:	ea 06       	cpc	r14, r26
    4302:	fb 06       	cpc	r15, r27
    4304:	d0 f4       	brcc	.+52     	; 0x433a <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    4306:	4a 89       	ldd	r20, Y+18	; 0x12
    4308:	5b 89       	ldd	r21, Y+19	; 0x13
    430a:	6c 89       	ldd	r22, Y+20	; 0x14
    430c:	7d 89       	ldd	r23, Y+21	; 0x15
    430e:	cf 01       	movw	r24, r30
    4310:	0f ef       	ldi	r16, 0xFF	; 255
    4312:	1f ef       	ldi	r17, 0xFF	; 255
    4314:	2f ef       	ldi	r18, 0xFF	; 255
    4316:	3f e0       	ldi	r19, 0x0F	; 15
    4318:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <put_fat>
    431c:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    431e:	88 23       	and	r24, r24
    4320:	49 f4       	brne	.+18     	; 0x4334 <f_truncate+0xfc>
    4322:	88 81       	ld	r24, Y
    4324:	99 81       	ldd	r25, Y+1	; 0x01
    4326:	b7 01       	movw	r22, r14
    4328:	a6 01       	movw	r20, r12
    432a:	0e 94 47 0c 	call	0x188e	; 0x188e <remove_chain>
    432e:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4330:	11 23       	and	r17, r17
    4332:	19 f0       	breq	.+6      	; 0x433a <f_truncate+0x102>
    4334:	8c 81       	ldd	r24, Y+4	; 0x04
    4336:	80 68       	ori	r24, 0x80	; 128
    4338:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    433a:	81 2f       	mov	r24, r17
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	1f 91       	pop	r17
    4342:	0f 91       	pop	r16
    4344:	ff 90       	pop	r15
    4346:	ef 90       	pop	r14
    4348:	df 90       	pop	r13
    434a:	cf 90       	pop	r12
    434c:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    434e:	11 e0       	ldi	r17, 0x01	; 1
    4350:	f1 cf       	rjmp	.-30     	; 0x4334 <f_truncate+0xfc>

00004352 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    4352:	cf 92       	push	r12
    4354:	df 92       	push	r13
    4356:	ef 92       	push	r14
    4358:	ff 92       	push	r15
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	ea 97       	sbiw	r28, 0x3a	; 58
    4368:	cd bf       	out	0x3d, r28	; 61
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	89 af       	std	Y+57, r24	; 0x39
    436e:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    4370:	4d e0       	ldi	r20, 0x0D	; 13
    4372:	c4 2e       	mov	r12, r20
    4374:	d1 2c       	mov	r13, r1
    4376:	cc 0e       	add	r12, r28
    4378:	dd 1e       	adc	r13, r29
    437a:	ce 01       	movw	r24, r28
    437c:	c9 96       	adiw	r24, 0x39	; 57
    437e:	b6 01       	movw	r22, r12
    4380:	41 e0       	ldi	r20, 0x01	; 1
    4382:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4386:	88 23       	and	r24, r24
    4388:	09 f0       	breq	.+2      	; 0x438c <f_unlink+0x3a>
    438a:	71 c0       	rjmp	.+226    	; 0x446e <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    438c:	ce 01       	movw	r24, r28
    438e:	01 96       	adiw	r24, 0x01	; 1
    4390:	89 a3       	std	Y+33, r24	; 0x21
    4392:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4394:	69 ad       	ldd	r22, Y+57	; 0x39
    4396:	7a ad       	ldd	r23, Y+58	; 0x3a
    4398:	c6 01       	movw	r24, r12
    439a:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    439e:	88 23       	and	r24, r24
    43a0:	09 f0       	breq	.+2      	; 0x43a4 <f_unlink+0x52>
    43a2:	65 c0       	rjmp	.+202    	; 0x446e <f_unlink+0x11c>

	dir = dj.dir;
    43a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    43a6:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    43a8:	30 97       	sbiw	r30, 0x00	; 0
    43aa:	11 f4       	brne	.+4      	; 0x43b0 <f_unlink+0x5e>
    43ac:	86 e0       	ldi	r24, 0x06	; 6
    43ae:	5f c0       	rjmp	.+190    	; 0x446e <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    43b0:	83 85       	ldd	r24, Z+11	; 0x0b
    43b2:	48 2f       	mov	r20, r24
    43b4:	80 fd       	sbrc	r24, 0
    43b6:	5a c0       	rjmp	.+180    	; 0x446c <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    43b8:	95 89       	ldd	r25, Z+21	; 0x15
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	24 89       	ldd	r18, Z+20	; 0x14
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	82 2b       	or	r24, r18
    43c2:	93 2b       	or	r25, r19
    43c4:	a0 e0       	ldi	r26, 0x00	; 0
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	8c 01       	movw	r16, r24
    43ca:	ff 24       	eor	r15, r15
    43cc:	ee 24       	eor	r14, r14
    43ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	22 8d       	ldd	r18, Z+26	; 0x1a
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	82 2b       	or	r24, r18
    43d8:	93 2b       	or	r25, r19
    43da:	a0 e0       	ldi	r26, 0x00	; 0
    43dc:	b0 e0       	ldi	r27, 0x00	; 0
    43de:	e8 2a       	or	r14, r24
    43e0:	f9 2a       	or	r15, r25
    43e2:	0a 2b       	or	r16, r26
    43e4:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    43e6:	44 ff       	sbrs	r20, 4
    43e8:	29 c0       	rjmp	.+82     	; 0x443c <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    43ea:	82 e0       	ldi	r24, 0x02	; 2
    43ec:	e8 16       	cp	r14, r24
    43ee:	f1 04       	cpc	r15, r1
    43f0:	01 05       	cpc	r16, r1
    43f2:	11 05       	cpc	r17, r1
    43f4:	10 f4       	brcc	.+4      	; 0x43fa <f_unlink+0xa8>
    43f6:	82 e0       	ldi	r24, 0x02	; 2
    43f8:	3a c0       	rjmp	.+116    	; 0x446e <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    43fa:	de 01       	movw	r26, r28
    43fc:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    43fe:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    4400:	9d 01       	movw	r18, r26
    4402:	02 c0       	rjmp	.+4      	; 0x4408 <f_unlink+0xb6>
    4404:	81 91       	ld	r24, Z+
    4406:	8d 93       	st	X+, r24
    4408:	e2 17       	cp	r30, r18
    440a:	f3 07       	cpc	r31, r19
    440c:	d9 f7       	brne	.-10     	; 0x4404 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    440e:	e9 a6       	std	Y+41, r14	; 0x29
    4410:	fa a6       	std	Y+42, r15	; 0x2a
    4412:	0b a7       	std	Y+43, r16	; 0x2b
    4414:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4416:	23 e2       	ldi	r18, 0x23	; 35
    4418:	c2 2e       	mov	r12, r18
    441a:	d1 2c       	mov	r13, r1
    441c:	cc 0e       	add	r12, r28
    441e:	dd 1e       	adc	r13, r29
    4420:	c6 01       	movw	r24, r12
    4422:	62 e0       	ldi	r22, 0x02	; 2
    4424:	70 e0       	ldi	r23, 0x00	; 0
    4426:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    442a:	88 23       	and	r24, r24
    442c:	01 f5       	brne	.+64     	; 0x446e <f_unlink+0x11c>
		res = dir_read(&sdj);
    442e:	c6 01       	movw	r24, r12
    4430:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4434:	88 23       	and	r24, r24
    4436:	d1 f0       	breq	.+52     	; 0x446c <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    4438:	84 30       	cpi	r24, 0x04	; 4
    443a:	c9 f4       	brne	.+50     	; 0x446e <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    443c:	ce 01       	movw	r24, r28
    443e:	0d 96       	adiw	r24, 0x0d	; 13
    4440:	0e 94 f6 10 	call	0x21ec	; 0x21ec <dir_remove>
	if (res == FR_OK) {
    4444:	88 23       	and	r24, r24
    4446:	99 f4       	brne	.+38     	; 0x446e <f_unlink+0x11c>
		if (dclst)
    4448:	e1 14       	cp	r14, r1
    444a:	f1 04       	cpc	r15, r1
    444c:	01 05       	cpc	r16, r1
    444e:	11 05       	cpc	r17, r1
    4450:	41 f0       	breq	.+16     	; 0x4462 <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    4452:	8d 85       	ldd	r24, Y+13	; 0x0d
    4454:	9e 85       	ldd	r25, Y+14	; 0x0e
    4456:	b8 01       	movw	r22, r16
    4458:	a7 01       	movw	r20, r14
    445a:	0e 94 47 0c 	call	0x188e	; 0x188e <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    445e:	88 23       	and	r24, r24
    4460:	31 f4       	brne	.+12     	; 0x446e <f_unlink+0x11c>
    4462:	8d 85       	ldd	r24, Y+13	; 0x0d
    4464:	9e 85       	ldd	r25, Y+14	; 0x0e
    4466:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sync>
    446a:	01 c0       	rjmp	.+2      	; 0x446e <f_unlink+0x11c>
    446c:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    446e:	ea 96       	adiw	r28, 0x3a	; 58
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	de bf       	out	0x3e, r29	; 62
    4474:	cf 91       	pop	r28
    4476:	df 91       	pop	r29
    4478:	1f 91       	pop	r17
    447a:	0f 91       	pop	r16
    447c:	ff 90       	pop	r15
    447e:	ef 90       	pop	r14
    4480:	df 90       	pop	r13
    4482:	cf 90       	pop	r12
    4484:	08 95       	ret

00004486 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    4486:	2f 92       	push	r2
    4488:	3f 92       	push	r3
    448a:	4f 92       	push	r4
    448c:	5f 92       	push	r5
    448e:	6f 92       	push	r6
    4490:	7f 92       	push	r7
    4492:	8f 92       	push	r8
    4494:	9f 92       	push	r9
    4496:	af 92       	push	r10
    4498:	bf 92       	push	r11
    449a:	cf 92       	push	r12
    449c:	df 92       	push	r13
    449e:	ef 92       	push	r14
    44a0:	ff 92       	push	r15
    44a2:	0f 93       	push	r16
    44a4:	1f 93       	push	r17
    44a6:	df 93       	push	r29
    44a8:	cf 93       	push	r28
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
    44ae:	a8 97       	sbiw	r28, 0x28	; 40
    44b0:	cd bf       	out	0x3d, r28	; 61
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	8b a3       	std	Y+35, r24	; 0x23
    44b6:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    44b8:	3d e0       	ldi	r19, 0x0D	; 13
    44ba:	e3 2e       	mov	r14, r19
    44bc:	f1 2c       	mov	r15, r1
    44be:	ec 0e       	add	r14, r28
    44c0:	fd 1e       	adc	r15, r29
    44c2:	ce 01       	movw	r24, r28
    44c4:	83 96       	adiw	r24, 0x23	; 35
    44c6:	b7 01       	movw	r22, r14
    44c8:	41 e0       	ldi	r20, 0x01	; 1
    44ca:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
    44ce:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44d0:	88 23       	and	r24, r24
    44d2:	09 f0       	breq	.+2      	; 0x44d6 <f_mkdir+0x50>
    44d4:	38 c1       	rjmp	.+624    	; 0x4746 <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    44d6:	ce 01       	movw	r24, r28
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	89 a3       	std	Y+33, r24	; 0x21
    44dc:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    44de:	6b a1       	ldd	r22, Y+35	; 0x23
    44e0:	7c a1       	ldd	r23, Y+36	; 0x24
    44e2:	c7 01       	movw	r24, r14
    44e4:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
    44e8:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    44ea:	88 23       	and	r24, r24
    44ec:	11 f4       	brne	.+4      	; 0x44f2 <f_mkdir+0x6c>
    44ee:	18 e0       	ldi	r17, 0x08	; 8
    44f0:	2a c1       	rjmp	.+596    	; 0x4746 <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    44f2:	84 30       	cpi	r24, 0x04	; 4
    44f4:	09 f0       	breq	.+2      	; 0x44f8 <f_mkdir+0x72>
    44f6:	27 c1       	rjmp	.+590    	; 0x4746 <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    44f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    44fc:	40 e0       	ldi	r20, 0x00	; 0
    44fe:	50 e0       	ldi	r21, 0x00	; 0
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	70 e0       	ldi	r23, 0x00	; 0
    4504:	0e 94 c2 0c 	call	0x1984	; 0x1984 <create_chain>
    4508:	4b 01       	movw	r8, r22
    450a:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    450c:	61 15       	cp	r22, r1
    450e:	71 05       	cpc	r23, r1
    4510:	81 05       	cpc	r24, r1
    4512:	91 05       	cpc	r25, r1
    4514:	11 f4       	brne	.+4      	; 0x451a <f_mkdir+0x94>
    4516:	17 e0       	ldi	r17, 0x07	; 7
    4518:	16 c1       	rjmp	.+556    	; 0x4746 <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    451a:	61 30       	cpi	r22, 0x01	; 1
    451c:	71 05       	cpc	r23, r1
    451e:	81 05       	cpc	r24, r1
    4520:	91 05       	cpc	r25, r1
    4522:	11 f4       	brne	.+4      	; 0x4528 <f_mkdir+0xa2>
    4524:	12 e0       	ldi	r17, 0x02	; 2
    4526:	0f c1       	rjmp	.+542    	; 0x4746 <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4528:	6f 3f       	cpi	r22, 0xFF	; 255
    452a:	3f ef       	ldi	r19, 0xFF	; 255
    452c:	73 07       	cpc	r23, r19
    452e:	3f ef       	ldi	r19, 0xFF	; 255
    4530:	83 07       	cpc	r24, r19
    4532:	3f ef       	ldi	r19, 0xFF	; 255
    4534:	93 07       	cpc	r25, r19
    4536:	09 f4       	brne	.+2      	; 0x453a <f_mkdir+0xb4>
    4538:	1d c1       	rjmp	.+570    	; 0x4774 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	9e 85       	ldd	r25, Y+14	; 0x0e
    453e:	40 e0       	ldi	r20, 0x00	; 0
    4540:	50 e0       	ldi	r21, 0x00	; 0
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	70 e0       	ldi	r23, 0x00	; 0
    4546:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    454a:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    454c:	88 23       	and	r24, r24
    454e:	09 f0       	breq	.+2      	; 0x4552 <f_mkdir+0xcc>
    4550:	fa c0       	rjmp	.+500    	; 0x4746 <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    4552:	0d 85       	ldd	r16, Y+13	; 0x0d
    4554:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4556:	2e ef       	ldi	r18, 0xFE	; 254
    4558:	c2 2e       	mov	r12, r18
    455a:	2f ef       	ldi	r18, 0xFF	; 255
    455c:	d2 2e       	mov	r13, r18
    455e:	2f ef       	ldi	r18, 0xFF	; 255
    4560:	e2 2e       	mov	r14, r18
    4562:	2f ef       	ldi	r18, 0xFF	; 255
    4564:	f2 2e       	mov	r15, r18
    4566:	c8 0c       	add	r12, r8
    4568:	d9 1c       	adc	r13, r9
    456a:	ea 1c       	adc	r14, r10
    456c:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    456e:	f8 01       	movw	r30, r16
    4570:	82 8d       	ldd	r24, Z+26	; 0x1a
    4572:	93 8d       	ldd	r25, Z+27	; 0x1b
    4574:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4576:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4578:	02 97       	sbiw	r24, 0x02	; 2
    457a:	a1 09       	sbc	r26, r1
    457c:	b1 09       	sbc	r27, r1
    457e:	c8 16       	cp	r12, r24
    4580:	d9 06       	cpc	r13, r25
    4582:	ea 06       	cpc	r14, r26
    4584:	fb 06       	cpc	r15, r27
    4586:	20 f0       	brcs	.+8      	; 0x4590 <f_mkdir+0x10a>
    4588:	44 24       	eor	r4, r4
    458a:	55 24       	eor	r5, r5
    458c:	32 01       	movw	r6, r4
    458e:	14 c0       	rjmp	.+40     	; 0x45b8 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    4590:	f8 01       	movw	r30, r16
    4592:	22 81       	ldd	r18, Z+2	; 0x02
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	50 e0       	ldi	r21, 0x00	; 0
    459a:	c7 01       	movw	r24, r14
    459c:	b6 01       	movw	r22, r12
    459e:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    45a2:	2b 01       	movw	r4, r22
    45a4:	3c 01       	movw	r6, r24
    45a6:	f8 01       	movw	r30, r16
    45a8:	86 a1       	ldd	r24, Z+38	; 0x26
    45aa:	97 a1       	ldd	r25, Z+39	; 0x27
    45ac:	a0 a5       	ldd	r26, Z+40	; 0x28
    45ae:	b1 a5       	ldd	r27, Z+41	; 0x29
    45b0:	48 0e       	add	r4, r24
    45b2:	59 1e       	adc	r5, r25
    45b4:	6a 1e       	adc	r6, r26
    45b6:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    45b8:	9e e2       	ldi	r25, 0x2E	; 46
    45ba:	29 2e       	mov	r2, r25
    45bc:	31 2c       	mov	r3, r1
    45be:	20 0e       	add	r2, r16
    45c0:	31 1e       	adc	r3, r17
    45c2:	f1 01       	movw	r30, r2
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	92 e0       	ldi	r25, 0x02	; 2
    45c8:	01 c0       	rjmp	.+2      	; 0x45cc <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    45ca:	11 92       	st	Z+, r1
    45cc:	01 97       	sbiw	r24, 0x01	; 1
    45ce:	2f ef       	ldi	r18, 0xFF	; 255
    45d0:	8f 3f       	cpi	r24, 0xFF	; 255
    45d2:	92 07       	cpc	r25, r18
    45d4:	d1 f7       	brne	.-12     	; 0x45ca <f_mkdir+0x144>
    45d6:	f1 01       	movw	r30, r2
    45d8:	8b e0       	ldi	r24, 0x0B	; 11
    45da:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    45dc:	20 e2       	ldi	r18, 0x20	; 32
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <f_mkdir+0x15c>
    45e0:	21 93       	st	Z+, r18
    45e2:	01 97       	sbiw	r24, 0x01	; 1
    45e4:	3f ef       	ldi	r19, 0xFF	; 255
    45e6:	8f 3f       	cpi	r24, 0xFF	; 255
    45e8:	93 07       	cpc	r25, r19
    45ea:	d1 f7       	brne	.-12     	; 0x45e0 <f_mkdir+0x15a>
    45ec:	8e e2       	ldi	r24, 0x2E	; 46
    45ee:	f8 01       	movw	r30, r16
    45f0:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    45f2:	80 e1       	ldi	r24, 0x10	; 16
    45f4:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    45f6:	0c 5b       	subi	r16, 0xBC	; 188
    45f8:	1f 4f       	sbci	r17, 0xFF	; 255
    45fa:	f8 01       	movw	r30, r16
    45fc:	11 92       	st	Z+, r1
    45fe:	11 92       	st	Z+, r1
    4600:	11 92       	st	Z+, r1
    4602:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4604:	88 a6       	std	Y+40, r8	; 0x28
    4606:	81 92       	st	Z+, r8
    4608:	8f 01       	movw	r16, r30
    460a:	89 2d       	mov	r24, r9
    460c:	99 27       	eor	r25, r25
    460e:	8f a3       	std	Y+39, r24	; 0x27
    4610:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4612:	c5 01       	movw	r24, r10
    4614:	aa 27       	eor	r26, r26
    4616:	bb 27       	eor	r27, r27
    4618:	8e a3       	std	Y+38, r24	; 0x26
    461a:	07 50       	subi	r16, 0x07	; 7
    461c:	10 40       	sbci	r17, 0x00	; 0
    461e:	f8 01       	movw	r30, r16
    4620:	81 93       	st	Z+, r24
    4622:	8f 01       	movw	r16, r30
    4624:	89 2f       	mov	r24, r25
    4626:	99 27       	eor	r25, r25
    4628:	8d a3       	std	Y+37, r24	; 0x25
    462a:	80 83       	st	Z, r24
    462c:	03 54       	subi	r16, 0x43	; 67
    462e:	10 40       	sbci	r17, 0x00	; 0
    4630:	f1 01       	movw	r30, r2
    4632:	20 e2       	ldi	r18, 0x20	; 32
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	03 c0       	rjmp	.+6      	; 0x463e <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4638:	80 81       	ld	r24, Z
    463a:	80 a3       	std	Z+32, r24	; 0x20
    463c:	31 96       	adiw	r30, 0x01	; 1
    463e:	21 50       	subi	r18, 0x01	; 1
    4640:	30 40       	sbci	r19, 0x00	; 0
    4642:	8f ef       	ldi	r24, 0xFF	; 255
    4644:	2f 3f       	cpi	r18, 0xFF	; 255
    4646:	38 07       	cpc	r19, r24
    4648:	b9 f7       	brne	.-18     	; 0x4638 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    464a:	01 5b       	subi	r16, 0xB1	; 177
    464c:	1f 4f       	sbci	r17, 0xFF	; 255
    464e:	8e e2       	ldi	r24, 0x2E	; 46
    4650:	f8 01       	movw	r30, r16
    4652:	80 83       	st	Z, r24
    4654:	0f 54       	subi	r16, 0x4F	; 79
    4656:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4658:	2b 89       	ldd	r18, Y+19	; 0x13
    465a:	3c 89       	ldd	r19, Y+20	; 0x14
    465c:	4d 89       	ldd	r20, Y+21	; 0x15
    465e:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    4660:	ed 85       	ldd	r30, Y+13	; 0x0d
    4662:	fe 85       	ldd	r31, Y+14	; 0x0e
    4664:	80 81       	ld	r24, Z
    4666:	83 30       	cpi	r24, 0x03	; 3
    4668:	69 f4       	brne	.+26     	; 0x4684 <f_mkdir+0x1fe>
    466a:	82 a1       	ldd	r24, Z+34	; 0x22
    466c:	93 a1       	ldd	r25, Z+35	; 0x23
    466e:	a4 a1       	ldd	r26, Z+36	; 0x24
    4670:	b5 a1       	ldd	r27, Z+37	; 0x25
    4672:	28 17       	cp	r18, r24
    4674:	39 07       	cpc	r19, r25
    4676:	4a 07       	cpc	r20, r26
    4678:	5b 07       	cpc	r21, r27
    467a:	21 f4       	brne	.+8      	; 0x4684 <f_mkdir+0x1fe>
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	40 e0       	ldi	r20, 0x00	; 0
    4682:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    4684:	08 59       	subi	r16, 0x98	; 152
    4686:	1f 4f       	sbci	r17, 0xFF	; 255
    4688:	f8 01       	movw	r30, r16
    468a:	21 93       	st	Z+, r18
    468c:	8f 01       	movw	r16, r30
    468e:	83 2f       	mov	r24, r19
    4690:	99 27       	eor	r25, r25
    4692:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    4694:	ca 01       	movw	r24, r20
    4696:	aa 27       	eor	r26, r26
    4698:	bb 27       	eor	r27, r27
    469a:	07 50       	subi	r16, 0x07	; 7
    469c:	10 40       	sbci	r17, 0x00	; 0
    469e:	f8 01       	movw	r30, r16
    46a0:	81 93       	st	Z+, r24
    46a2:	89 2f       	mov	r24, r25
    46a4:	99 27       	eor	r25, r25
    46a6:	80 83       	st	Z, r24
    46a8:	73 01       	movw	r14, r6
    46aa:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    46ac:	01 e0       	ldi	r16, 0x01	; 1
    46ae:	1e c0       	rjmp	.+60     	; 0x46ec <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46b0:	c2 a6       	std	Z+42, r12	; 0x2a
    46b2:	d3 a6       	std	Z+43, r13	; 0x2b
    46b4:	e4 a6       	std	Z+44, r14	; 0x2c
    46b6:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    46b8:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    46ba:	cf 01       	movw	r24, r30
    46bc:	40 e0       	ldi	r20, 0x00	; 0
    46be:	50 e0       	ldi	r21, 0x00	; 0
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	70 e0       	ldi	r23, 0x00	; 0
    46c4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
    46c8:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    46ca:	88 23       	and	r24, r24
    46cc:	e1 f5       	brne	.+120    	; 0x4746 <f_mkdir+0x2c0>
    46ce:	f1 01       	movw	r30, r2
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	92 e0       	ldi	r25, 0x02	; 2
    46d4:	01 c0       	rjmp	.+2      	; 0x46d8 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    46d6:	11 92       	st	Z+, r1
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	2f ef       	ldi	r18, 0xFF	; 255
    46dc:	8f 3f       	cpi	r24, 0xFF	; 255
    46de:	92 07       	cpc	r25, r18
    46e0:	d1 f7       	brne	.-12     	; 0x46d6 <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    46e2:	08 94       	sec
    46e4:	c1 1c       	adc	r12, r1
    46e6:	d1 1c       	adc	r13, r1
    46e8:	e1 1c       	adc	r14, r1
    46ea:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    46ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    46ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    46f0:	9c 2d       	mov	r25, r12
    46f2:	94 19       	sub	r25, r4
    46f4:	82 81       	ldd	r24, Z+2	; 0x02
    46f6:	98 17       	cp	r25, r24
    46f8:	d8 f2       	brcs	.-74     	; 0x46b0 <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    46fa:	ce 01       	movw	r24, r28
    46fc:	0d 96       	adiw	r24, 0x0d	; 13
    46fe:	0e 94 9f 10 	call	0x213e	; 0x213e <dir_register>
    4702:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4704:	88 23       	and	r24, r24
    4706:	39 f0       	breq	.+14     	; 0x4716 <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4708:	8d 85       	ldd	r24, Y+13	; 0x0d
    470a:	9e 85       	ldd	r25, Y+14	; 0x0e
    470c:	b5 01       	movw	r22, r10
    470e:	a4 01       	movw	r20, r8
    4710:	0e 94 47 0c 	call	0x188e	; 0x188e <remove_chain>
    4714:	18 c0       	rjmp	.+48     	; 0x4746 <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    4716:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4718:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    471a:	80 e1       	ldi	r24, 0x10	; 16
    471c:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    471e:	16 8a       	std	Z+22, r1	; 0x16
    4720:	17 8a       	std	Z+23, r1	; 0x17
    4722:	10 8e       	std	Z+24, r1	; 0x18
    4724:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    4726:	38 a5       	ldd	r19, Y+40	; 0x28
    4728:	32 8f       	std	Z+26, r19	; 0x1a
    472a:	8f a1       	ldd	r24, Y+39	; 0x27
    472c:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    472e:	2e a1       	ldd	r18, Y+38	; 0x26
    4730:	24 8b       	std	Z+20, r18	; 0x14
    4732:	3d a1       	ldd	r19, Y+37	; 0x25
    4734:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    4736:	ed 85       	ldd	r30, Y+13	; 0x0d
    4738:	fe 85       	ldd	r31, Y+14	; 0x0e
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    473e:	cf 01       	movw	r24, r30
    4740:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sync>
    4744:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    4746:	81 2f       	mov	r24, r17
    4748:	a8 96       	adiw	r28, 0x28	; 40
    474a:	cd bf       	out	0x3d, r28	; 61
    474c:	de bf       	out	0x3e, r29	; 62
    474e:	cf 91       	pop	r28
    4750:	df 91       	pop	r29
    4752:	1f 91       	pop	r17
    4754:	0f 91       	pop	r16
    4756:	ff 90       	pop	r15
    4758:	ef 90       	pop	r14
    475a:	df 90       	pop	r13
    475c:	cf 90       	pop	r12
    475e:	bf 90       	pop	r11
    4760:	af 90       	pop	r10
    4762:	9f 90       	pop	r9
    4764:	8f 90       	pop	r8
    4766:	7f 90       	pop	r7
    4768:	6f 90       	pop	r6
    476a:	5f 90       	pop	r5
    476c:	4f 90       	pop	r4
    476e:	3f 90       	pop	r3
    4770:	2f 90       	pop	r2
    4772:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    4774:	11 e0       	ldi	r17, 0x01	; 1
    4776:	e7 cf       	rjmp	.-50     	; 0x4746 <f_mkdir+0x2c0>

00004778 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4778:	ef 92       	push	r14
    477a:	ff 92       	push	r15
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	a4 97       	sbiw	r28, 0x24	; 36
    478a:	cd bf       	out	0x3d, r28	; 61
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	8b a3       	std	Y+35, r24	; 0x23
    4790:	9c a3       	std	Y+36, r25	; 0x24
    4792:	e6 2e       	mov	r14, r22
    4794:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4796:	8e 01       	movw	r16, r28
    4798:	03 5f       	subi	r16, 0xF3	; 243
    479a:	1f 4f       	sbci	r17, 0xFF	; 255
    479c:	ce 01       	movw	r24, r28
    479e:	83 96       	adiw	r24, 0x23	; 35
    47a0:	b8 01       	movw	r22, r16
    47a2:	41 e0       	ldi	r20, 0x01	; 1
    47a4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
	if (res == FR_OK) {
    47a8:	88 23       	and	r24, r24
    47aa:	09 f5       	brne	.+66     	; 0x47ee <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    47ac:	ce 01       	movw	r24, r28
    47ae:	01 96       	adiw	r24, 0x01	; 1
    47b0:	89 a3       	std	Y+33, r24	; 0x21
    47b2:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    47b4:	6b a1       	ldd	r22, Y+35	; 0x23
    47b6:	7c a1       	ldd	r23, Y+36	; 0x24
    47b8:	c8 01       	movw	r24, r16
    47ba:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    47be:	88 23       	and	r24, r24
    47c0:	b1 f4       	brne	.+44     	; 0x47ee <f_chmod+0x76>
			dir = dj.dir;
    47c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47c4:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    47c6:	30 97       	sbiw	r30, 0x00	; 0
    47c8:	11 f4       	brne	.+4      	; 0x47ce <f_chmod+0x56>
    47ca:	86 e0       	ldi	r24, 0x06	; 6
    47cc:	10 c0       	rjmp	.+32     	; 0x47ee <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    47ce:	9f 2d       	mov	r25, r15
    47d0:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    47d2:	89 2f       	mov	r24, r25
    47d4:	80 95       	com	r24
    47d6:	23 85       	ldd	r18, Z+11	; 0x0b
    47d8:	82 23       	and	r24, r18
    47da:	9e 21       	and	r25, r14
    47dc:	89 2b       	or	r24, r25
    47de:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    47e0:	ed 85       	ldd	r30, Y+13	; 0x0d
    47e2:	fe 85       	ldd	r31, Y+14	; 0x0e
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    47e8:	cf 01       	movw	r24, r30
    47ea:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    47ee:	a4 96       	adiw	r28, 0x24	; 36
    47f0:	cd bf       	out	0x3d, r28	; 61
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	cf 91       	pop	r28
    47f6:	df 91       	pop	r29
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	ff 90       	pop	r15
    47fe:	ef 90       	pop	r14
    4800:	08 95       	ret

00004802 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    4802:	ef 92       	push	r14
    4804:	ff 92       	push	r15
    4806:	0f 93       	push	r16
    4808:	1f 93       	push	r17
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	a4 97       	sbiw	r28, 0x24	; 36
    4814:	cd bf       	out	0x3d, r28	; 61
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	8b a3       	std	Y+35, r24	; 0x23
    481a:	9c a3       	std	Y+36, r25	; 0x24
    481c:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    481e:	4d e0       	ldi	r20, 0x0D	; 13
    4820:	e4 2e       	mov	r14, r20
    4822:	f1 2c       	mov	r15, r1
    4824:	ec 0e       	add	r14, r28
    4826:	fd 1e       	adc	r15, r29
    4828:	ce 01       	movw	r24, r28
    482a:	83 96       	adiw	r24, 0x23	; 35
    482c:	b7 01       	movw	r22, r14
    482e:	41 e0       	ldi	r20, 0x01	; 1
    4830:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
	if (res == FR_OK) {
    4834:	88 23       	and	r24, r24
    4836:	41 f5       	brne	.+80     	; 0x4888 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    4838:	ce 01       	movw	r24, r28
    483a:	01 96       	adiw	r24, 0x01	; 1
    483c:	89 a3       	std	Y+33, r24	; 0x21
    483e:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    4840:	6b a1       	ldd	r22, Y+35	; 0x23
    4842:	7c a1       	ldd	r23, Y+36	; 0x24
    4844:	c7 01       	movw	r24, r14
    4846:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    484a:	88 23       	and	r24, r24
    484c:	e9 f4       	brne	.+58     	; 0x4888 <f_utime+0x86>
			dir = dj.dir;
    484e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4850:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    4852:	30 97       	sbiw	r30, 0x00	; 0
    4854:	11 f4       	brne	.+4      	; 0x485a <f_utime+0x58>
    4856:	86 e0       	ldi	r24, 0x06	; 6
    4858:	17 c0       	rjmp	.+46     	; 0x4888 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    485a:	d8 01       	movw	r26, r16
    485c:	16 96       	adiw	r26, 0x06	; 6
    485e:	8c 91       	ld	r24, X
    4860:	16 97       	sbiw	r26, 0x06	; 6
    4862:	86 8b       	std	Z+22, r24	; 0x16
    4864:	17 96       	adiw	r26, 0x07	; 7
    4866:	8c 91       	ld	r24, X
    4868:	17 97       	sbiw	r26, 0x07	; 7
    486a:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    486c:	14 96       	adiw	r26, 0x04	; 4
    486e:	8c 91       	ld	r24, X
    4870:	14 97       	sbiw	r26, 0x04	; 4
    4872:	80 8f       	std	Z+24, r24	; 0x18
    4874:	15 96       	adiw	r26, 0x05	; 5
    4876:	8c 91       	ld	r24, X
    4878:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    487a:	ed 85       	ldd	r30, Y+13	; 0x0d
    487c:	fe 85       	ldd	r31, Y+14	; 0x0e
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4882:	cf 01       	movw	r24, r30
    4884:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4888:	a4 96       	adiw	r28, 0x24	; 36
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	cf 91       	pop	r28
    4890:	df 91       	pop	r29
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	ff 90       	pop	r15
    4898:	ef 90       	pop	r14
    489a:	08 95       	ret

0000489c <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    489c:	cf 92       	push	r12
    489e:	df 92       	push	r13
    48a0:	ef 92       	push	r14
    48a2:	ff 92       	push	r15
    48a4:	0f 93       	push	r16
    48a6:	1f 93       	push	r17
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
    48b0:	cf 54       	subi	r28, 0x4F	; 79
    48b2:	d0 40       	sbci	r29, 0x00	; 0
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	8e 01       	movw	r16, r28
    48ba:	02 5b       	subi	r16, 0xB2	; 178
    48bc:	1f 4f       	sbci	r17, 0xFF	; 255
    48be:	d8 01       	movw	r26, r16
    48c0:	8d 93       	st	X+, r24
    48c2:	9c 93       	st	X, r25
    48c4:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    48c6:	ce 01       	movw	r24, r28
    48c8:	01 96       	adiw	r24, 0x01	; 1
    48ca:	8e ab       	std	Y+54, r24	; 0x36
    48cc:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    48ce:	a2 e2       	ldi	r26, 0x22	; 34
    48d0:	ea 2e       	mov	r14, r26
    48d2:	f1 2c       	mov	r15, r1
    48d4:	ec 0e       	add	r14, r28
    48d6:	fd 1e       	adc	r15, r29
    48d8:	c8 01       	movw	r24, r16
    48da:	b7 01       	movw	r22, r14
    48dc:	41 e0       	ldi	r20, 0x01	; 1
    48de:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <chk_mounted>
	if (res == FR_OK) {
    48e2:	88 23       	and	r24, r24
    48e4:	09 f0       	breq	.+2      	; 0x48e8 <f_rename+0x4c>
    48e6:	f4 c0       	rjmp	.+488    	; 0x4ad0 <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    48e8:	8a a1       	ldd	r24, Y+34	; 0x22
    48ea:	9b a1       	ldd	r25, Y+35	; 0x23
    48ec:	88 af       	std	Y+56, r24	; 0x38
    48ee:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    48f0:	f8 01       	movw	r30, r16
    48f2:	60 81       	ld	r22, Z
    48f4:	71 81       	ldd	r23, Z+1	; 0x01
    48f6:	c7 01       	movw	r24, r14
    48f8:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    48fc:	88 23       	and	r24, r24
    48fe:	09 f0       	breq	.+2      	; 0x4902 <f_rename+0x66>
    4900:	e7 c0       	rjmp	.+462    	; 0x4ad0 <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    4902:	8c a9       	ldd	r24, Y+52	; 0x34
    4904:	9d a9       	ldd	r25, Y+53	; 0x35
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	11 f4       	brne	.+4      	; 0x490e <f_rename+0x72>
    490a:	84 e0       	ldi	r24, 0x04	; 4
    490c:	e1 c0       	rjmp	.+450    	; 0x4ad0 <f_rename+0x234>
    490e:	dc 01       	movw	r26, r24
    4910:	fe 01       	movw	r30, r28
    4912:	3d 96       	adiw	r30, 0x0d	; 13
    4914:	04 c0       	rjmp	.+8      	; 0x491e <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4916:	1a 96       	adiw	r26, 0x0a	; 10
    4918:	8c 91       	ld	r24, X
    491a:	1a 97       	sbiw	r26, 0x0a	; 10
    491c:	81 93       	st	Z+, r24
    491e:	11 96       	adiw	r26, 0x01	; 1
    4920:	ee 15       	cp	r30, r14
    4922:	ff 05       	cpc	r31, r15
    4924:	c1 f7       	brne	.-16     	; 0x4916 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4926:	de 01       	movw	r26, r28
    4928:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    492a:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    492c:	9d 01       	movw	r18, r26
    492e:	02 c0       	rjmp	.+4      	; 0x4934 <f_rename+0x98>
    4930:	81 91       	ld	r24, Z+
    4932:	8d 93       	st	X+, r24
    4934:	e2 17       	cp	r30, r18
    4936:	f3 07       	cpc	r31, r19
    4938:	d9 f7       	brne	.-10     	; 0x4930 <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    493a:	8e 01       	movw	r16, r28
    493c:	08 5c       	subi	r16, 0xC8	; 200
    493e:	1f 4f       	sbci	r17, 0xFF	; 255
    4940:	c8 01       	movw	r24, r16
    4942:	b6 01       	movw	r22, r12
    4944:	0e 94 a3 11 	call	0x2346	; 0x2346 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    4948:	88 23       	and	r24, r24
    494a:	11 f4       	brne	.+4      	; 0x4950 <f_rename+0xb4>
    494c:	88 e0       	ldi	r24, 0x08	; 8
    494e:	c0 c0       	rjmp	.+384    	; 0x4ad0 <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    4950:	84 30       	cpi	r24, 0x04	; 4
    4952:	09 f0       	breq	.+2      	; 0x4956 <f_rename+0xba>
    4954:	bd c0       	rjmp	.+378    	; 0x4ad0 <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    4956:	c8 01       	movw	r24, r16
    4958:	0e 94 9f 10 	call	0x213e	; 0x213e <dir_register>
		if (res == FR_OK) {
    495c:	88 23       	and	r24, r24
    495e:	09 f0       	breq	.+2      	; 0x4962 <f_rename+0xc6>
    4960:	b7 c0       	rjmp	.+366    	; 0x4ad0 <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    4962:	fe 01       	movw	r30, r28
    4964:	e6 5b       	subi	r30, 0xB6	; 182
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	40 81       	ld	r20, Z
    496a:	51 81       	ldd	r21, Z+1	; 0x01
    496c:	da 01       	movw	r26, r20
    496e:	fe 01       	movw	r30, r28
    4970:	3f 96       	adiw	r30, 0x0f	; 15
    4972:	04 c0       	rjmp	.+8      	; 0x497c <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4974:	81 91       	ld	r24, Z+
    4976:	1c 96       	adiw	r26, 0x0c	; 12
    4978:	8c 93       	st	X, r24
    497a:	1c 97       	sbiw	r26, 0x0c	; 12
    497c:	11 96       	adiw	r26, 0x01	; 1
    497e:	ee 15       	cp	r30, r14
    4980:	ff 05       	cpc	r31, r15
    4982:	c1 f7       	brne	.-16     	; 0x4974 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    4984:	8d 85       	ldd	r24, Y+13	; 0x0d
    4986:	80 62       	ori	r24, 0x20	; 32
    4988:	da 01       	movw	r26, r20
    498a:	1b 96       	adiw	r26, 0x0b	; 11
    498c:	8c 93       	st	X, r24
    498e:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    4990:	ea a1       	ldd	r30, Y+34	; 0x22
    4992:	fb a1       	ldd	r31, Y+35	; 0x23
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4998:	1b 96       	adiw	r26, 0x0b	; 11
    499a:	8c 91       	ld	r24, X
    499c:	1b 97       	sbiw	r26, 0x0b	; 11
    499e:	84 ff       	sbrs	r24, 4
    49a0:	8b c0       	rjmp	.+278    	; 0x4ab8 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    49a2:	c8 ac       	ldd	r12, Y+56	; 0x38
    49a4:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    49a6:	5a 96       	adiw	r26, 0x1a	; 26
    49a8:	2c 91       	ld	r18, X
    49aa:	5a 97       	sbiw	r26, 0x1a	; 26
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	54 96       	adiw	r26, 0x14	; 20
    49b0:	8c 91       	ld	r24, X
    49b2:	54 97       	sbiw	r26, 0x14	; 20
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	28 2b       	or	r18, r24
    49b8:	39 2b       	or	r19, r25
    49ba:	55 96       	adiw	r26, 0x15	; 21
    49bc:	9c 91       	ld	r25, X
    49be:	55 97       	sbiw	r26, 0x15	; 21
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	28 2b       	or	r18, r24
    49c4:	39 2b       	or	r19, r25
    49c6:	5b 96       	adiw	r26, 0x1b	; 27
    49c8:	9c 91       	ld	r25, X
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	28 2b       	or	r18, r24
    49ce:	39 2b       	or	r19, r25
    49d0:	79 01       	movw	r14, r18
    49d2:	00 e0       	ldi	r16, 0x00	; 0
    49d4:	10 e0       	ldi	r17, 0x00	; 0
    49d6:	8e ef       	ldi	r24, 0xFE	; 254
    49d8:	9f ef       	ldi	r25, 0xFF	; 255
    49da:	af ef       	ldi	r26, 0xFF	; 255
    49dc:	bf ef       	ldi	r27, 0xFF	; 255
    49de:	e8 0e       	add	r14, r24
    49e0:	f9 1e       	adc	r15, r25
    49e2:	0a 1f       	adc	r16, r26
    49e4:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    49e6:	f6 01       	movw	r30, r12
    49e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    49ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    49ec:	a4 8d       	ldd	r26, Z+28	; 0x1c
    49ee:	b5 8d       	ldd	r27, Z+29	; 0x1d
    49f0:	02 97       	sbiw	r24, 0x02	; 2
    49f2:	a1 09       	sbc	r26, r1
    49f4:	b1 09       	sbc	r27, r1
    49f6:	e8 16       	cp	r14, r24
    49f8:	f9 06       	cpc	r15, r25
    49fa:	0a 07       	cpc	r16, r26
    49fc:	1b 07       	cpc	r17, r27
    49fe:	08 f0       	brcs	.+2      	; 0x4a02 <f_rename+0x166>
    4a00:	66 c0       	rjmp	.+204    	; 0x4ace <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4a02:	22 81       	ldd	r18, Z+2	; 0x02
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	40 e0       	ldi	r20, 0x00	; 0
    4a08:	50 e0       	ldi	r21, 0x00	; 0
    4a0a:	c8 01       	movw	r24, r16
    4a0c:	b7 01       	movw	r22, r14
    4a0e:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    4a12:	ab 01       	movw	r20, r22
    4a14:	bc 01       	movw	r22, r24
    4a16:	f6 01       	movw	r30, r12
    4a18:	86 a1       	ldd	r24, Z+38	; 0x26
    4a1a:	97 a1       	ldd	r25, Z+39	; 0x27
    4a1c:	a0 a5       	ldd	r26, Z+40	; 0x28
    4a1e:	b1 a5       	ldd	r27, Z+41	; 0x29
    4a20:	48 0f       	add	r20, r24
    4a22:	59 1f       	adc	r21, r25
    4a24:	6a 1f       	adc	r22, r26
    4a26:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4a28:	41 15       	cp	r20, r1
    4a2a:	51 05       	cpc	r21, r1
    4a2c:	61 05       	cpc	r22, r1
    4a2e:	71 05       	cpc	r23, r1
    4a30:	09 f4       	brne	.+2      	; 0x4a34 <f_rename+0x198>
    4a32:	4d c0       	rjmp	.+154    	; 0x4ace <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4a34:	c6 01       	movw	r24, r12
    4a36:	0e 94 69 09 	call	0x12d2	; 0x12d2 <move_window>
					dir = dj_new.fs->win+32;
    4a3a:	a8 ad       	ldd	r26, Y+56	; 0x38
    4a3c:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4a3e:	88 23       	and	r24, r24
    4a40:	09 f0       	breq	.+2      	; 0x4a44 <f_rename+0x1a8>
    4a42:	46 c0       	rjmp	.+140    	; 0x4ad0 <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4a44:	bd 01       	movw	r22, r26
    4a46:	62 5b       	subi	r22, 0xB2	; 178
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4a4a:	fb 01       	movw	r30, r22
    4a4c:	81 81       	ldd	r24, Z+1	; 0x01
    4a4e:	8e 32       	cpi	r24, 0x2E	; 46
    4a50:	99 f5       	brne	.+102    	; 0x4ab8 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4a52:	8c 91       	ld	r24, X
    4a54:	83 30       	cpi	r24, 0x03	; 3
    4a56:	b1 f4       	brne	.+44     	; 0x4a84 <f_rename+0x1e8>
    4a58:	fe 01       	movw	r30, r28
    4a5a:	fe 96       	adiw	r30, 0x3e	; 62
    4a5c:	20 81       	ld	r18, Z
    4a5e:	31 81       	ldd	r19, Z+1	; 0x01
    4a60:	42 81       	ldd	r20, Z+2	; 0x02
    4a62:	53 81       	ldd	r21, Z+3	; 0x03
    4a64:	92 96       	adiw	r26, 0x22	; 34
    4a66:	8d 91       	ld	r24, X+
    4a68:	9d 91       	ld	r25, X+
    4a6a:	0d 90       	ld	r0, X+
    4a6c:	bc 91       	ld	r27, X
    4a6e:	a0 2d       	mov	r26, r0
    4a70:	28 17       	cp	r18, r24
    4a72:	39 07       	cpc	r19, r25
    4a74:	4a 07       	cpc	r20, r26
    4a76:	5b 07       	cpc	r21, r27
    4a78:	29 f4       	brne	.+10     	; 0x4a84 <f_rename+0x1e8>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e0       	ldi	r20, 0x00	; 0
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	06 c0       	rjmp	.+12     	; 0x4a90 <f_rename+0x1f4>
    4a84:	fe 01       	movw	r30, r28
    4a86:	fe 96       	adiw	r30, 0x3e	; 62
    4a88:	20 81       	ld	r18, Z
    4a8a:	31 81       	ldd	r19, Z+1	; 0x01
    4a8c:	42 81       	ldd	r20, Z+2	; 0x02
    4a8e:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4a90:	db 01       	movw	r26, r22
    4a92:	5a 96       	adiw	r26, 0x1a	; 26
    4a94:	2c 93       	st	X, r18
    4a96:	5a 97       	sbiw	r26, 0x1a	; 26
    4a98:	83 2f       	mov	r24, r19
    4a9a:	99 27       	eor	r25, r25
    4a9c:	5b 96       	adiw	r26, 0x1b	; 27
    4a9e:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4aa0:	ca 01       	movw	r24, r20
    4aa2:	aa 27       	eor	r26, r26
    4aa4:	bb 27       	eor	r27, r27
    4aa6:	fb 01       	movw	r30, r22
    4aa8:	84 8b       	std	Z+20, r24	; 0x14
    4aaa:	89 2f       	mov	r24, r25
    4aac:	99 27       	eor	r25, r25
    4aae:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4ab0:	e8 ad       	ldd	r30, Y+56	; 0x38
    4ab2:	f9 ad       	ldd	r31, Y+57	; 0x39
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4ab8:	ce 01       	movw	r24, r28
    4aba:	82 96       	adiw	r24, 0x22	; 34
    4abc:	0e 94 f6 10 	call	0x21ec	; 0x21ec <dir_remove>
				if (res == FR_OK)
    4ac0:	88 23       	and	r24, r24
    4ac2:	31 f4       	brne	.+12     	; 0x4ad0 <f_rename+0x234>
					res = sync(dj_old.fs);
    4ac4:	8a a1       	ldd	r24, Y+34	; 0x22
    4ac6:	9b a1       	ldd	r25, Y+35	; 0x23
    4ac8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sync>
    4acc:	01 c0       	rjmp	.+2      	; 0x4ad0 <f_rename+0x234>
    4ace:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4ad0:	c1 5b       	subi	r28, 0xB1	; 177
    4ad2:	df 4f       	sbci	r29, 0xFF	; 255
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	cf 91       	pop	r28
    4ada:	df 91       	pop	r29
    4adc:	1f 91       	pop	r17
    4ade:	0f 91       	pop	r16
    4ae0:	ff 90       	pop	r15
    4ae2:	ef 90       	pop	r14
    4ae4:	df 90       	pop	r13
    4ae6:	cf 90       	pop	r12
    4ae8:	08 95       	ret

00004aea <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4aea:	2f 92       	push	r2
    4aec:	3f 92       	push	r3
    4aee:	4f 92       	push	r4
    4af0:	5f 92       	push	r5
    4af2:	6f 92       	push	r6
    4af4:	7f 92       	push	r7
    4af6:	8f 92       	push	r8
    4af8:	9f 92       	push	r9
    4afa:	af 92       	push	r10
    4afc:	bf 92       	push	r11
    4afe:	cf 92       	push	r12
    4b00:	df 92       	push	r13
    4b02:	ef 92       	push	r14
    4b04:	ff 92       	push	r15
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	df 93       	push	r29
    4b0c:	cf 93       	push	r28
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	a4 97       	sbiw	r28, 0x24	; 36
    4b14:	cd bf       	out	0x3d, r28	; 61
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	68 a3       	std	Y+32, r22	; 0x20
    4b1a:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4b1c:	82 30       	cpi	r24, 0x02	; 2
    4b1e:	10 f0       	brcs	.+4      	; 0x4b24 <f_mkfs+0x3a>
    4b20:	8b e0       	ldi	r24, 0x0B	; 11
    4b22:	e2 c4       	rjmp	.+2500   	; 0x54e8 <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4b24:	28 a1       	ldd	r18, Y+32	; 0x20
    4b26:	22 30       	cpi	r18, 0x02	; 2
    4b28:	08 f0       	brcs	.+2      	; 0x4b2c <f_mkfs+0x42>
    4b2a:	db c4       	rjmp	.+2486   	; 0x54e2 <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4b2c:	a8 2f       	mov	r26, r24
    4b2e:	b0 e0       	ldi	r27, 0x00	; 0
    4b30:	aa 0f       	add	r26, r26
    4b32:	bb 1f       	adc	r27, r27
    4b34:	fd 01       	movw	r30, r26
    4b36:	e1 5b       	subi	r30, 0xB1	; 177
    4b38:	fc 4c       	sbci	r31, 0xCC	; 204
    4b3a:	c0 80       	ld	r12, Z
    4b3c:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4b3e:	c1 14       	cp	r12, r1
    4b40:	d1 04       	cpc	r13, r1
    4b42:	11 f4       	brne	.+4      	; 0x4b48 <f_mkfs+0x5e>
    4b44:	8c e0       	ldi	r24, 0x0C	; 12
    4b46:	d0 c4       	rjmp	.+2464   	; 0x54e8 <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4b48:	f6 01       	movw	r30, r12
    4b4a:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4b4c:	aa 54       	subi	r26, 0x4A	; 74
    4b4e:	b4 4d       	sbci	r27, 0xD4	; 212
    4b50:	fc 91       	ld	r31, X
    4b52:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4b54:	8f 2f       	mov	r24, r31
    4b56:	0e 94 b8 05 	call	0xb70	; 0xb70 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4b5a:	80 ff       	sbrs	r24, 0
    4b5c:	02 c0       	rjmp	.+4      	; 0x4b62 <f_mkfs+0x78>
    4b5e:	83 e0       	ldi	r24, 0x03	; 3
    4b60:	c3 c4       	rjmp	.+2438   	; 0x54e8 <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4b62:	82 ff       	sbrs	r24, 2
    4b64:	02 c0       	rjmp	.+4      	; 0x4b6a <f_mkfs+0x80>
    4b66:	8a e0       	ldi	r24, 0x0A	; 10
    4b68:	bf c4       	rjmp	.+2430   	; 0x54e8 <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4b6a:	89 89       	ldd	r24, Y+17	; 0x11
    4b6c:	61 e0       	ldi	r22, 0x01	; 1
    4b6e:	ae 01       	movw	r20, r28
    4b70:	4f 5f       	subi	r20, 0xFF	; 255
    4b72:	5f 4f       	sbci	r21, 0xFF	; 255
    4b74:	0e 94 7d 07 	call	0xefa	; 0xefa <disk_ioctl>
    4b78:	88 23       	and	r24, r24
    4b7a:	09 f0       	breq	.+2      	; 0x4b7e <f_mkfs+0x94>
    4b7c:	b2 c4       	rjmp	.+2404   	; 0x54e2 <f_mkfs+0x9f8>
    4b7e:	89 81       	ldd	r24, Y+1	; 0x01
    4b80:	9a 81       	ldd	r25, Y+2	; 0x02
    4b82:	ab 81       	ldd	r26, Y+3	; 0x03
    4b84:	bc 81       	ldd	r27, Y+4	; 0x04
    4b86:	80 3d       	cpi	r24, 0xD0	; 208
    4b88:	27 e0       	ldi	r18, 0x07	; 7
    4b8a:	92 07       	cpc	r25, r18
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	a2 07       	cpc	r26, r18
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	b2 07       	cpc	r27, r18
    4b94:	08 f4       	brcc	.+2      	; 0x4b98 <f_mkfs+0xae>
    4b96:	a5 c4       	rjmp	.+2378   	; 0x54e2 <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4b98:	81 50       	subi	r24, 0x01	; 1
    4b9a:	90 40       	sbci	r25, 0x00	; 0
    4b9c:	a0 4d       	sbci	r26, 0xD0	; 208
    4b9e:	b7 40       	sbci	r27, 0x07	; 7
    4ba0:	40 f0       	brcs	.+16     	; 0x4bb2 <f_mkfs+0xc8>
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	a0 ed       	ldi	r26, 0xD0	; 208
    4ba8:	b7 e0       	ldi	r27, 0x07	; 7
    4baa:	89 83       	std	Y+1, r24	; 0x01
    4bac:	9a 83       	std	Y+2, r25	; 0x02
    4bae:	ab 83       	std	Y+3, r26	; 0x03
    4bb0:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4bb2:	48 a1       	ldd	r20, Y+32	; 0x20
    4bb4:	44 23       	and	r20, r20
    4bb6:	29 f0       	breq	.+10     	; 0x4bc2 <f_mkfs+0xd8>
    4bb8:	1a 8e       	std	Y+26, r1	; 0x1a
    4bba:	1b 8e       	std	Y+27, r1	; 0x1b
    4bbc:	1c 8e       	std	Y+28, r1	; 0x1c
    4bbe:	1d 8e       	std	Y+29, r1	; 0x1d
    4bc0:	08 c0       	rjmp	.+16     	; 0x4bd2 <f_mkfs+0xe8>
    4bc2:	8f e3       	ldi	r24, 0x3F	; 63
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	a0 e0       	ldi	r26, 0x00	; 0
    4bc8:	b0 e0       	ldi	r27, 0x00	; 0
    4bca:	8a 8f       	std	Y+26, r24	; 0x1a
    4bcc:	9b 8f       	std	Y+27, r25	; 0x1b
    4bce:	ac 8f       	std	Y+28, r26	; 0x1c
    4bd0:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4bd2:	89 80       	ldd	r8, Y+1	; 0x01
    4bd4:	9a 80       	ldd	r9, Y+2	; 0x02
    4bd6:	ab 80       	ldd	r10, Y+3	; 0x03
    4bd8:	bc 80       	ldd	r11, Y+4	; 0x04
    4bda:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4bdc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4bde:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4be0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4be2:	82 1a       	sub	r8, r18
    4be4:	93 0a       	sbc	r9, r19
    4be6:	a4 0a       	sbc	r10, r20
    4be8:	b5 0a       	sbc	r11, r21
    4bea:	89 82       	std	Y+1, r8	; 0x01
    4bec:	9a 82       	std	Y+2, r9	; 0x02
    4bee:	ab 82       	std	Y+3, r10	; 0x03
    4bf0:	bc 82       	std	Y+4, r11	; 0x04
    4bf2:	80 e0       	ldi	r24, 0x00	; 0
    4bf4:	92 e0       	ldi	r25, 0x02	; 2
    4bf6:	a0 e0       	ldi	r26, 0x00	; 0
    4bf8:	b0 e0       	ldi	r27, 0x00	; 0
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4bfe:	73 01       	movw	r14, r6
    4c00:	00 e0       	ldi	r16, 0x00	; 0
    4c02:	10 e0       	ldi	r17, 0x00	; 0
    4c04:	09 c0       	rjmp	.+18     	; 0x4c18 <f_mkfs+0x12e>
    4c06:	88 0f       	add	r24, r24
    4c08:	99 1f       	adc	r25, r25
    4c0a:	aa 1f       	adc	r26, r26
    4c0c:	bb 1f       	adc	r27, r27
    4c0e:	2f 5f       	subi	r18, 0xFF	; 255
    4c10:	3f 4f       	sbci	r19, 0xFF	; 255
    4c12:	27 30       	cpi	r18, 0x07	; 7
    4c14:	31 05       	cpc	r19, r1
    4c16:	31 f0       	breq	.+12     	; 0x4c24 <f_mkfs+0x13a>
    4c18:	8e 15       	cp	r24, r14
    4c1a:	9f 05       	cpc	r25, r15
    4c1c:	a0 07       	cpc	r26, r16
    4c1e:	b1 07       	cpc	r27, r17
    4c20:	91 f7       	brne	.-28     	; 0x4c06 <f_mkfs+0x11c>
    4c22:	05 c0       	rjmp	.+10     	; 0x4c2e <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4c24:	8e 15       	cp	r24, r14
    4c26:	9f 05       	cpc	r25, r15
    4c28:	a0 07       	cpc	r26, r16
    4c2a:	b1 07       	cpc	r27, r17
    4c2c:	19 f4       	brne	.+6      	; 0x4c34 <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4c2e:	61 14       	cp	r6, r1
    4c30:	71 04       	cpc	r7, r1
    4c32:	11 f5       	brne	.+68     	; 0x4c78 <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4c34:	eb e4       	ldi	r30, 0x4B	; 75
    4c36:	f2 e3       	ldi	r31, 0x32	; 50
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	40 e0       	ldi	r20, 0x00	; 0
    4c3e:	50 e0       	ldi	r21, 0x00	; 0
    4c40:	81 91       	ld	r24, Z+
    4c42:	91 91       	ld	r25, Z+
    4c44:	a1 91       	ld	r26, Z+
    4c46:	b1 91       	ld	r27, Z+
    4c48:	b9 01       	movw	r22, r18
    4c4a:	14 2f       	mov	r17, r20
    4c4c:	05 2f       	mov	r16, r21
    4c4e:	2f 5f       	subi	r18, 0xFF	; 255
    4c50:	3f 4f       	sbci	r19, 0xFF	; 255
    4c52:	4f 4f       	sbci	r20, 0xFF	; 255
    4c54:	5f 4f       	sbci	r21, 0xFF	; 255
    4c56:	88 16       	cp	r8, r24
    4c58:	99 06       	cpc	r9, r25
    4c5a:	aa 06       	cpc	r10, r26
    4c5c:	bb 06       	cpc	r11, r27
    4c5e:	80 f3       	brcs	.-32     	; 0x4c40 <f_mkfs+0x156>
    4c60:	cb 01       	movw	r24, r22
    4c62:	6d 83       	std	Y+5, r22	; 0x05
    4c64:	9e 83       	std	Y+6, r25	; 0x06
    4c66:	1f 83       	std	Y+7, r17	; 0x07
    4c68:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4c6a:	fb 01       	movw	r30, r22
    4c6c:	ee 0f       	add	r30, r30
    4c6e:	ff 1f       	adc	r31, r31
    4c70:	eb 5c       	subi	r30, 0xCB	; 203
    4c72:	fd 4c       	sbci	r31, 0xCD	; 205
    4c74:	60 80       	ld	r6, Z
    4c76:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	63 16       	cp	r6, r19
    4c7c:	32 e0       	ldi	r19, 0x02	; 2
    4c7e:	73 06       	cpc	r7, r19
    4c80:	18 f4       	brcc	.+6      	; 0x4c88 <f_mkfs+0x19e>
    4c82:	61 2c       	mov	r6, r1
    4c84:	f2 e0       	ldi	r31, 0x02	; 2
    4c86:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4c88:	13 01       	movw	r2, r6
    4c8a:	23 2c       	mov	r2, r3
    4c8c:	33 24       	eor	r3, r3
    4c8e:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4c90:	c1 01       	movw	r24, r2
    4c92:	a0 e0       	ldi	r26, 0x00	; 0
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	8d 87       	std	Y+13, r24	; 0x0d
    4c98:	9e 87       	std	Y+14, r25	; 0x0e
    4c9a:	af 87       	std	Y+15, r26	; 0x0f
    4c9c:	b8 8b       	std	Y+16, r27	; 0x10
    4c9e:	c5 01       	movw	r24, r10
    4ca0:	b4 01       	movw	r22, r8
    4ca2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ca4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ca6:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ca8:	58 89       	ldd	r21, Y+16	; 0x10
    4caa:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    4cae:	c9 01       	movw	r24, r18
    4cb0:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4cb2:	85 3f       	cpi	r24, 0xF5	; 245
    4cb4:	ef e0       	ldi	r30, 0x0F	; 15
    4cb6:	9e 07       	cpc	r25, r30
    4cb8:	e0 e0       	ldi	r30, 0x00	; 0
    4cba:	ae 07       	cpc	r26, r30
    4cbc:	e0 e0       	ldi	r30, 0x00	; 0
    4cbe:	be 07       	cpc	r27, r30
    4cc0:	08 f4       	brcc	.+2      	; 0x4cc4 <f_mkfs+0x1da>
    4cc2:	28 c4       	rjmp	.+2128   	; 0x5514 <f_mkfs+0xa2a>
    4cc4:	f8 a1       	ldd	r31, Y+32	; 0x20
    4cc6:	2f 2f       	mov	r18, r31
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4cca:	85 3f       	cpi	r24, 0xF5	; 245
    4ccc:	4f ef       	ldi	r20, 0xFF	; 255
    4cce:	94 07       	cpc	r25, r20
    4cd0:	40 e0       	ldi	r20, 0x00	; 0
    4cd2:	a4 07       	cpc	r26, r20
    4cd4:	40 e0       	ldi	r20, 0x00	; 0
    4cd6:	b4 07       	cpc	r27, r20
    4cd8:	50 f5       	brcc	.+84     	; 0x4d2e <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4cda:	7c 01       	movw	r14, r24
    4cdc:	8d 01       	movw	r16, r26
    4cde:	ee 0c       	add	r14, r14
    4ce0:	ff 1c       	adc	r15, r15
    4ce2:	00 1f       	adc	r16, r16
    4ce4:	11 1f       	adc	r17, r17
    4ce6:	83 e0       	ldi	r24, 0x03	; 3
    4ce8:	92 e0       	ldi	r25, 0x02	; 2
    4cea:	a0 e0       	ldi	r26, 0x00	; 0
    4cec:	b0 e0       	ldi	r27, 0x00	; 0
    4cee:	e8 0e       	add	r14, r24
    4cf0:	f9 1e       	adc	r15, r25
    4cf2:	0a 1f       	adc	r16, r26
    4cf4:	1b 1f       	adc	r17, r27
    4cf6:	69 e0       	ldi	r22, 0x09	; 9
    4cf8:	16 95       	lsr	r17
    4cfa:	07 95       	ror	r16
    4cfc:	f7 94       	ror	r15
    4cfe:	e7 94       	ror	r14
    4d00:	6a 95       	dec	r22
    4d02:	d1 f7       	brne	.-12     	; 0x4cf8 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4d04:	2f 5f       	subi	r18, 0xFF	; 255
    4d06:	3f 4f       	sbci	r19, 0xFF	; 255
    4d08:	c9 01       	movw	r24, r18
    4d0a:	aa 27       	eor	r26, r26
    4d0c:	97 fd       	sbrc	r25, 7
    4d0e:	a0 95       	com	r26
    4d10:	ba 2f       	mov	r27, r26
    4d12:	8e 8b       	std	Y+22, r24	; 0x16
    4d14:	9f 8b       	std	Y+23, r25	; 0x17
    4d16:	a8 8f       	std	Y+24, r26	; 0x18
    4d18:	b9 8f       	std	Y+25, r27	; 0x19
    4d1a:	20 e2       	ldi	r18, 0x20	; 32
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	40 e0       	ldi	r20, 0x00	; 0
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	2a 8b       	std	Y+18, r18	; 0x12
    4d24:	3b 8b       	std	Y+19, r19	; 0x13
    4d26:	4c 8b       	std	Y+20, r20	; 0x14
    4d28:	5d 8b       	std	Y+21, r21	; 0x15
    4d2a:	32 e0       	ldi	r19, 0x02	; 2
    4d2c:	2a c0       	rjmp	.+84     	; 0x4d82 <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4d2e:	7c 01       	movw	r14, r24
    4d30:	8d 01       	movw	r16, r26
    4d32:	52 e0       	ldi	r21, 0x02	; 2
    4d34:	ee 0c       	add	r14, r14
    4d36:	ff 1c       	adc	r15, r15
    4d38:	00 1f       	adc	r16, r16
    4d3a:	11 1f       	adc	r17, r17
    4d3c:	5a 95       	dec	r21
    4d3e:	d1 f7       	brne	.-12     	; 0x4d34 <f_mkfs+0x24a>
    4d40:	87 e0       	ldi	r24, 0x07	; 7
    4d42:	92 e0       	ldi	r25, 0x02	; 2
    4d44:	a0 e0       	ldi	r26, 0x00	; 0
    4d46:	b0 e0       	ldi	r27, 0x00	; 0
    4d48:	e8 0e       	add	r14, r24
    4d4a:	f9 1e       	adc	r15, r25
    4d4c:	0a 1f       	adc	r16, r26
    4d4e:	1b 1f       	adc	r17, r27
    4d50:	49 e0       	ldi	r20, 0x09	; 9
    4d52:	16 95       	lsr	r17
    4d54:	07 95       	ror	r16
    4d56:	f7 94       	ror	r15
    4d58:	e7 94       	ror	r14
    4d5a:	4a 95       	dec	r20
    4d5c:	d1 f7       	brne	.-12     	; 0x4d52 <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4d5e:	81 e2       	ldi	r24, 0x21	; 33
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	82 1b       	sub	r24, r18
    4d64:	93 0b       	sbc	r25, r19
    4d66:	9c 01       	movw	r18, r24
    4d68:	44 27       	eor	r20, r20
    4d6a:	37 fd       	sbrc	r19, 7
    4d6c:	40 95       	com	r20
    4d6e:	54 2f       	mov	r21, r20
    4d70:	2e 8b       	std	Y+22, r18	; 0x16
    4d72:	3f 8b       	std	Y+23, r19	; 0x17
    4d74:	48 8f       	std	Y+24, r20	; 0x18
    4d76:	59 8f       	std	Y+25, r21	; 0x19
    4d78:	1a 8a       	std	Y+18, r1	; 0x12
    4d7a:	1b 8a       	std	Y+19, r1	; 0x13
    4d7c:	1c 8a       	std	Y+20, r1	; 0x14
    4d7e:	1d 8a       	std	Y+21, r1	; 0x15
    4d80:	33 e0       	ldi	r19, 0x03	; 3
    4d82:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4d84:	89 89       	ldd	r24, Y+17	; 0x11
    4d86:	63 e0       	ldi	r22, 0x03	; 3
    4d88:	ae 01       	movw	r20, r28
    4d8a:	4b 5f       	subi	r20, 0xFB	; 251
    4d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8e:	0e 94 7d 07 	call	0xefa	; 0xefa <disk_ioctl>
    4d92:	88 23       	and	r24, r24
    4d94:	09 f0       	breq	.+2      	; 0x4d98 <f_mkfs+0x2ae>
    4d96:	a5 c3       	rjmp	.+1866   	; 0x54e2 <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4d98:	8e 89       	ldd	r24, Y+22	; 0x16
    4d9a:	9f 89       	ldd	r25, Y+23	; 0x17
    4d9c:	a8 8d       	ldd	r26, Y+24	; 0x18
    4d9e:	b9 8d       	ldd	r27, Y+25	; 0x19
    4da0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4da2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4da4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4da6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4da8:	82 0f       	add	r24, r18
    4daa:	93 1f       	adc	r25, r19
    4dac:	a4 1f       	adc	r26, r20
    4dae:	b5 1f       	adc	r27, r21
    4db0:	89 87       	std	Y+9, r24	; 0x09
    4db2:	9a 87       	std	Y+10, r25	; 0x0a
    4db4:	ab 87       	std	Y+11, r26	; 0x0b
    4db6:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4db8:	2a 89       	ldd	r18, Y+18	; 0x12
    4dba:	3b 89       	ldd	r19, Y+19	; 0x13
    4dbc:	4c 89       	ldd	r20, Y+20	; 0x14
    4dbe:	5d 89       	ldd	r21, Y+21	; 0x15
    4dc0:	2e 0d       	add	r18, r14
    4dc2:	3f 1d       	adc	r19, r15
    4dc4:	40 1f       	adc	r20, r16
    4dc6:	51 1f       	adc	r21, r17
    4dc8:	28 0f       	add	r18, r24
    4dca:	39 1f       	adc	r19, r25
    4dcc:	4a 1f       	adc	r20, r26
    4dce:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd4:	af 81       	ldd	r26, Y+7	; 0x07
    4dd6:	b8 85       	ldd	r27, Y+8	; 0x08
    4dd8:	4c 01       	movw	r8, r24
    4dda:	5d 01       	movw	r10, r26
    4ddc:	08 94       	sec
    4dde:	81 08       	sbc	r8, r1
    4de0:	91 08       	sbc	r9, r1
    4de2:	a1 08       	sbc	r10, r1
    4de4:	b1 08       	sbc	r11, r1
    4de6:	82 0e       	add	r8, r18
    4de8:	93 1e       	adc	r9, r19
    4dea:	a4 1e       	adc	r10, r20
    4dec:	b5 1e       	adc	r11, r21
    4dee:	b0 95       	com	r27
    4df0:	a0 95       	com	r26
    4df2:	90 95       	com	r25
    4df4:	81 95       	neg	r24
    4df6:	9f 4f       	sbci	r25, 0xFF	; 255
    4df8:	af 4f       	sbci	r26, 0xFF	; 255
    4dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    4dfc:	88 22       	and	r8, r24
    4dfe:	99 22       	and	r9, r25
    4e00:	aa 22       	and	r10, r26
    4e02:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4e04:	27 01       	movw	r4, r14
    4e06:	38 01       	movw	r6, r16
    4e08:	42 1a       	sub	r4, r18
    4e0a:	53 0a       	sbc	r5, r19
    4e0c:	64 0a       	sbc	r6, r20
    4e0e:	75 0a       	sbc	r7, r21
    4e10:	48 0c       	add	r4, r8
    4e12:	59 1c       	adc	r5, r9
    4e14:	6a 1c       	adc	r6, r10
    4e16:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4e18:	e9 80       	ldd	r14, Y+1	; 0x01
    4e1a:	fa 80       	ldd	r15, Y+2	; 0x02
    4e1c:	0b 81       	ldd	r16, Y+3	; 0x03
    4e1e:	1c 81       	ldd	r17, Y+4	; 0x04
    4e20:	c8 01       	movw	r24, r16
    4e22:	b7 01       	movw	r22, r14
    4e24:	2e 89       	ldd	r18, Y+22	; 0x16
    4e26:	3f 89       	ldd	r19, Y+23	; 0x17
    4e28:	48 8d       	ldd	r20, Y+24	; 0x18
    4e2a:	59 8d       	ldd	r21, Y+25	; 0x19
    4e2c:	62 1b       	sub	r22, r18
    4e2e:	73 0b       	sbc	r23, r19
    4e30:	84 0b       	sbc	r24, r20
    4e32:	95 0b       	sbc	r25, r21
    4e34:	64 19       	sub	r22, r4
    4e36:	75 09       	sbc	r23, r5
    4e38:	86 09       	sbc	r24, r6
    4e3a:	97 09       	sbc	r25, r7
    4e3c:	2a 89       	ldd	r18, Y+18	; 0x12
    4e3e:	3b 89       	ldd	r19, Y+19	; 0x13
    4e40:	4c 89       	ldd	r20, Y+20	; 0x14
    4e42:	5d 89       	ldd	r21, Y+21	; 0x15
    4e44:	62 1b       	sub	r22, r18
    4e46:	73 0b       	sbc	r23, r19
    4e48:	84 0b       	sbc	r24, r20
    4e4a:	95 0b       	sbc	r25, r21
    4e4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e50:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e52:	58 89       	ldd	r21, Y+16	; 0x10
    4e54:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    4e58:	29 a3       	std	Y+33, r18	; 0x21
    4e5a:	3a a3       	std	Y+34, r19	; 0x22
    4e5c:	4b a3       	std	Y+35, r20	; 0x23
    4e5e:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4e60:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4e62:	32 30       	cpi	r19, 0x02	; 2
    4e64:	51 f4       	brne	.+20     	; 0x4e7a <f_mkfs+0x390>
    4e66:	89 a1       	ldd	r24, Y+33	; 0x21
    4e68:	9a a1       	ldd	r25, Y+34	; 0x22
    4e6a:	ab a1       	ldd	r26, Y+35	; 0x23
    4e6c:	bc a1       	ldd	r27, Y+36	; 0x24
    4e6e:	85 5f       	subi	r24, 0xF5	; 245
    4e70:	9f 40       	sbci	r25, 0x0F	; 15
    4e72:	a0 40       	sbci	r26, 0x00	; 0
    4e74:	b0 40       	sbci	r27, 0x00	; 0
    4e76:	70 f4       	brcc	.+28     	; 0x4e94 <f_mkfs+0x3aa>
    4e78:	34 c3       	rjmp	.+1640   	; 0x54e2 <f_mkfs+0x9f8>
    4e7a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4e7c:	f3 30       	cpi	r31, 0x03	; 3
    4e7e:	51 f4       	brne	.+20     	; 0x4e94 <f_mkfs+0x3aa>
    4e80:	29 a1       	ldd	r18, Y+33	; 0x21
    4e82:	3a a1       	ldd	r19, Y+34	; 0x22
    4e84:	4b a1       	ldd	r20, Y+35	; 0x23
    4e86:	5c a1       	ldd	r21, Y+36	; 0x24
    4e88:	25 5f       	subi	r18, 0xF5	; 245
    4e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8c:	40 40       	sbci	r20, 0x00	; 0
    4e8e:	50 40       	sbci	r21, 0x00	; 0
    4e90:	08 f4       	brcc	.+2      	; 0x4e94 <f_mkfs+0x3aa>
    4e92:	27 c3       	rjmp	.+1614   	; 0x54e2 <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4e94:	8d 82       	std	Y+5, r8	; 0x05
    4e96:	9e 82       	std	Y+6, r9	; 0x06
    4e98:	af 82       	std	Y+7, r10	; 0x07
    4e9a:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4e9c:	98 a1       	ldd	r25, Y+32	; 0x20
    4e9e:	99 23       	and	r25, r25
    4ea0:	11 f0       	breq	.+4      	; 0x4ea6 <f_mkfs+0x3bc>
    4ea2:	10 ef       	ldi	r17, 0xF0	; 240
    4ea4:	9c c0       	rjmp	.+312    	; 0x4fde <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4ea6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ea8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4eaa:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4eac:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4eae:	4e 0d       	add	r20, r14
    4eb0:	5f 1d       	adc	r21, r15
    4eb2:	60 1f       	adc	r22, r16
    4eb4:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4eb6:	3e e2       	ldi	r19, 0x2E	; 46
    4eb8:	e3 2e       	mov	r14, r19
    4eba:	f1 2c       	mov	r15, r1
    4ebc:	ec 0c       	add	r14, r12
    4ebe:	fd 1c       	adc	r15, r13
    4ec0:	f7 01       	movw	r30, r14
    4ec2:	20 e0       	ldi	r18, 0x00	; 0
    4ec4:	32 e0       	ldi	r19, 0x02	; 2
    4ec6:	01 c0       	rjmp	.+2      	; 0x4eca <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4ec8:	11 92       	st	Z+, r1
    4eca:	21 50       	subi	r18, 0x01	; 1
    4ecc:	30 40       	sbci	r19, 0x00	; 0
    4ece:	af ef       	ldi	r26, 0xFF	; 255
    4ed0:	2f 3f       	cpi	r18, 0xFF	; 255
    4ed2:	3a 07       	cpc	r19, r26
    4ed4:	c9 f7       	brne	.-14     	; 0x4ec8 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4ed6:	86 01       	movw	r16, r12
    4ed8:	04 51       	subi	r16, 0x14	; 20
    4eda:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4edc:	80 e8       	ldi	r24, 0x80	; 128
    4ede:	f8 01       	movw	r30, r16
    4ee0:	80 83       	st	Z, r24
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	81 83       	std	Z+1, r24	; 0x01
    4ee6:	82 83       	std	Z+2, r24	; 0x02
    4ee8:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4eea:	40 30       	cpi	r20, 0x00	; 0
    4eec:	f4 e0       	ldi	r31, 0x04	; 4
    4eee:	5f 07       	cpc	r21, r31
    4ef0:	fb ef       	ldi	r31, 0xFB	; 251
    4ef2:	6f 07       	cpc	r22, r31
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	7f 07       	cpc	r23, r31
    4ef8:	b0 f4       	brcc	.+44     	; 0x4f26 <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4efa:	cb 01       	movw	r24, r22
    4efc:	ba 01       	movw	r22, r20
    4efe:	21 ec       	ldi	r18, 0xC1	; 193
    4f00:	3e e3       	ldi	r19, 0x3E	; 62
    4f02:	40 e0       	ldi	r20, 0x00	; 0
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    4f0a:	c9 01       	movw	r24, r18
    4f0c:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4f0e:	f8 01       	movw	r30, r16
    4f10:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4f12:	22 e0       	ldi	r18, 0x02	; 2
    4f14:	b6 95       	lsr	r27
    4f16:	a7 95       	ror	r26
    4f18:	97 95       	ror	r25
    4f1a:	87 95       	ror	r24
    4f1c:	2a 95       	dec	r18
    4f1e:	d1 f7       	brne	.-12     	; 0x4f14 <f_mkfs+0x42a>
    4f20:	8f 63       	ori	r24, 0x3F	; 63
    4f22:	86 83       	std	Z+6, r24	; 0x06
    4f24:	07 c0       	rjmp	.+14     	; 0x4f34 <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	d8 01       	movw	r26, r16
    4f2a:	16 96       	adiw	r26, 0x06	; 6
    4f2c:	8c 93       	st	X, r24
    4f2e:	16 97       	sbiw	r26, 0x06	; 6
    4f30:	17 96       	adiw	r26, 0x07	; 7
    4f32:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4f34:	8e ef       	ldi	r24, 0xFE	; 254
    4f36:	f8 01       	movw	r30, r16
    4f38:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4f3a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4f3c:	f3 30       	cpi	r31, 0x03	; 3
    4f3e:	81 f0       	breq	.+32     	; 0x4f60 <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4f40:	89 81       	ldd	r24, Y+1	; 0x01
    4f42:	9a 81       	ldd	r25, Y+2	; 0x02
    4f44:	ab 81       	ldd	r26, Y+3	; 0x03
    4f46:	bc 81       	ldd	r27, Y+4	; 0x04
    4f48:	80 50       	subi	r24, 0x00	; 0
    4f4a:	90 40       	sbci	r25, 0x00	; 0
    4f4c:	a1 40       	sbci	r26, 0x01	; 1
    4f4e:	b0 40       	sbci	r27, 0x00	; 0
    4f50:	10 f0       	brcs	.+4      	; 0x4f56 <f_mkfs+0x46c>
    4f52:	86 e0       	ldi	r24, 0x06	; 6
    4f54:	01 c0       	rjmp	.+2      	; 0x4f58 <f_mkfs+0x46e>
    4f56:	84 e0       	ldi	r24, 0x04	; 4
    4f58:	d8 01       	movw	r26, r16
    4f5a:	14 96       	adiw	r26, 0x04	; 4
    4f5c:	8c 93       	st	X, r24
    4f5e:	03 c0       	rjmp	.+6      	; 0x4f66 <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4f60:	8c e0       	ldi	r24, 0x0C	; 12
    4f62:	f8 01       	movw	r30, r16
    4f64:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4f66:	8f e3       	ldi	r24, 0x3F	; 63
    4f68:	d8 01       	movw	r26, r16
    4f6a:	18 96       	adiw	r26, 0x08	; 8
    4f6c:	8c 93       	st	X, r24
    4f6e:	18 97       	sbiw	r26, 0x08	; 8
    4f70:	19 96       	adiw	r26, 0x09	; 9
    4f72:	1c 92       	st	X, r1
    4f74:	19 97       	sbiw	r26, 0x09	; 9
    4f76:	1a 96       	adiw	r26, 0x0a	; 10
    4f78:	1c 92       	st	X, r1
    4f7a:	1a 97       	sbiw	r26, 0x0a	; 10
    4f7c:	1b 96       	adiw	r26, 0x0b	; 11
    4f7e:	1c 92       	st	X, r1
    4f80:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	1c 96       	adiw	r26, 0x0c	; 12
    4f86:	8c 93       	st	X, r24
    4f88:	1c 97       	sbiw	r26, 0x0c	; 12
    4f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8c:	1d 96       	adiw	r26, 0x0d	; 13
    4f8e:	8c 93       	st	X, r24
    4f90:	89 81       	ldd	r24, Y+1	; 0x01
    4f92:	9a 81       	ldd	r25, Y+2	; 0x02
    4f94:	ab 81       	ldd	r26, Y+3	; 0x03
    4f96:	bc 81       	ldd	r27, Y+4	; 0x04
    4f98:	cd 01       	movw	r24, r26
    4f9a:	aa 27       	eor	r26, r26
    4f9c:	bb 27       	eor	r27, r27
    4f9e:	f8 01       	movw	r30, r16
    4fa0:	86 87       	std	Z+14, r24	; 0x0e
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa6:	ab 81       	ldd	r26, Y+3	; 0x03
    4fa8:	bc 81       	ldd	r27, Y+4	; 0x04
    4faa:	8b 2f       	mov	r24, r27
    4fac:	99 27       	eor	r25, r25
    4fae:	aa 27       	eor	r26, r26
    4fb0:	bb 27       	eor	r27, r27
    4fb2:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4fb4:	00 5c       	subi	r16, 0xC0	; 192
    4fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb8:	85 e5       	ldi	r24, 0x55	; 85
    4fba:	d8 01       	movw	r26, r16
    4fbc:	8d 93       	st	X+, r24
    4fbe:	fd 01       	movw	r30, r26
    4fc0:	8a ea       	ldi	r24, 0xAA	; 170
    4fc2:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4fc4:	89 89       	ldd	r24, Y+17	; 0x11
    4fc6:	b7 01       	movw	r22, r14
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	40 e0       	ldi	r20, 0x00	; 0
    4fce:	50 e0       	ldi	r21, 0x00	; 0
    4fd0:	01 e0       	ldi	r16, 0x01	; 1
    4fd2:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    4fd6:	88 23       	and	r24, r24
    4fd8:	09 f0       	breq	.+2      	; 0x4fdc <f_mkfs+0x4f2>
    4fda:	85 c2       	rjmp	.+1290   	; 0x54e6 <f_mkfs+0x9fc>
    4fdc:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    4fde:	5e e2       	ldi	r21, 0x2E	; 46
    4fe0:	e5 2e       	mov	r14, r21
    4fe2:	f1 2c       	mov	r15, r1
    4fe4:	ec 0c       	add	r14, r12
    4fe6:	fd 1c       	adc	r15, r13
    4fe8:	f7 01       	movw	r30, r14
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	92 e0       	ldi	r25, 0x02	; 2
    4fee:	01 c0       	rjmp	.+2      	; 0x4ff2 <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4ff0:	11 92       	st	Z+, r1
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	bf ef       	ldi	r27, 0xFF	; 255
    4ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ff8:	9b 07       	cpc	r25, r27
    4ffa:	d1 f7       	brne	.-12     	; 0x4ff0 <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    4ffc:	8b ee       	ldi	r24, 0xEB	; 235
    4ffe:	f6 01       	movw	r30, r12
    5000:	86 a7       	std	Z+46, r24	; 0x2e
    5002:	8e ef       	ldi	r24, 0xFE	; 254
    5004:	87 a7       	std	Z+47, r24	; 0x2f
    5006:	80 e9       	ldi	r24, 0x90	; 144
    5008:	80 ab       	std	Z+48, r24	; 0x30
    500a:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    500c:	11 ae       	std	Z+57, r1	; 0x39
    500e:	82 e0       	ldi	r24, 0x02	; 2
    5010:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    5012:	2e 8e       	std	Y+30, r2	; 0x1e
    5014:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    5016:	2e 89       	ldd	r18, Y+22	; 0x16
    5018:	24 af       	std	Z+60, r18	; 0x3c
    501a:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    5020:	8a 89       	ldd	r24, Y+18	; 0x12
    5022:	9b 89       	ldd	r25, Y+19	; 0x13
    5024:	ac 89       	ldd	r26, Y+20	; 0x14
    5026:	bd 89       	ldd	r27, Y+21	; 0x15
    5028:	44 e0       	ldi	r20, 0x04	; 4
    502a:	88 0f       	add	r24, r24
    502c:	99 1f       	adc	r25, r25
    502e:	aa 1f       	adc	r26, r26
    5030:	bb 1f       	adc	r27, r27
    5032:	4a 95       	dec	r20
    5034:	d1 f7       	brne	.-12     	; 0x502a <f_mkfs+0x540>
    5036:	87 af       	std	Z+63, r24	; 0x3f
    5038:	40 e4       	ldi	r20, 0x40	; 64
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	c4 0e       	add	r12, r20
    503e:	d5 1e       	adc	r13, r21
    5040:	89 2f       	mov	r24, r25
    5042:	99 27       	eor	r25, r25
    5044:	d6 01       	movw	r26, r12
    5046:	8c 93       	st	X, r24
    5048:	e0 ec       	ldi	r30, 0xC0	; 192
    504a:	ff ef       	ldi	r31, 0xFF	; 255
    504c:	ce 0e       	add	r12, r30
    504e:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    5050:	89 81       	ldd	r24, Y+1	; 0x01
    5052:	9a 81       	ldd	r25, Y+2	; 0x02
    5054:	ab 81       	ldd	r26, Y+3	; 0x03
    5056:	bc 81       	ldd	r27, Y+4	; 0x04
    5058:	80 30       	cpi	r24, 0x00	; 0
    505a:	f0 e0       	ldi	r31, 0x00	; 0
    505c:	9f 07       	cpc	r25, r31
    505e:	f1 e0       	ldi	r31, 0x01	; 1
    5060:	af 07       	cpc	r26, r31
    5062:	f0 e0       	ldi	r31, 0x00	; 0
    5064:	bf 07       	cpc	r27, r31
    5066:	60 f4       	brcc	.+24     	; 0x5080 <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    5068:	21 e4       	ldi	r18, 0x41	; 65
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	c2 0e       	add	r12, r18
    506e:	d3 1e       	adc	r13, r19
    5070:	f6 01       	movw	r30, r12
    5072:	81 93       	st	Z+, r24
    5074:	6f 01       	movw	r12, r30
    5076:	8a 81       	ldd	r24, Y+2	; 0x02
    5078:	80 83       	st	Z, r24
    507a:	2e eb       	ldi	r18, 0xBE	; 190
    507c:	3f ef       	ldi	r19, 0xFF	; 255
    507e:	1f c0       	rjmp	.+62     	; 0x50be <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    5080:	4e e4       	ldi	r20, 0x4E	; 78
    5082:	50 e0       	ldi	r21, 0x00	; 0
    5084:	c4 0e       	add	r12, r20
    5086:	d5 1e       	adc	r13, r21
    5088:	f6 01       	movw	r30, r12
    508a:	81 93       	st	Z+, r24
    508c:	8a 81       	ldd	r24, Y+2	; 0x02
    508e:	df 01       	movw	r26, r30
    5090:	8d 93       	st	X+, r24
    5092:	6d 01       	movw	r12, r26
    5094:	89 81       	ldd	r24, Y+1	; 0x01
    5096:	9a 81       	ldd	r25, Y+2	; 0x02
    5098:	ab 81       	ldd	r26, Y+3	; 0x03
    509a:	bc 81       	ldd	r27, Y+4	; 0x04
    509c:	cd 01       	movw	r24, r26
    509e:	aa 27       	eor	r26, r26
    50a0:	bb 27       	eor	r27, r27
    50a2:	f6 01       	movw	r30, r12
    50a4:	81 93       	st	Z+, r24
    50a6:	6f 01       	movw	r12, r30
    50a8:	89 81       	ldd	r24, Y+1	; 0x01
    50aa:	9a 81       	ldd	r25, Y+2	; 0x02
    50ac:	ab 81       	ldd	r26, Y+3	; 0x03
    50ae:	bc 81       	ldd	r27, Y+4	; 0x04
    50b0:	8b 2f       	mov	r24, r27
    50b2:	99 27       	eor	r25, r25
    50b4:	aa 27       	eor	r26, r26
    50b6:	bb 27       	eor	r27, r27
    50b8:	80 83       	st	Z, r24
    50ba:	2f ea       	ldi	r18, 0xAF	; 175
    50bc:	3f ef       	ldi	r19, 0xFF	; 255
    50be:	c2 0e       	add	r12, r18
    50c0:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    50c2:	43 e4       	ldi	r20, 0x43	; 67
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	c4 0e       	add	r12, r20
    50c8:	d5 1e       	adc	r13, r21
    50ca:	d6 01       	movw	r26, r12
    50cc:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    50ce:	e3 e0       	ldi	r30, 0x03	; 3
    50d0:	f0 e0       	ldi	r31, 0x00	; 0
    50d2:	ce 0e       	add	r12, r30
    50d4:	df 1e       	adc	r13, r31
    50d6:	8f e3       	ldi	r24, 0x3F	; 63
    50d8:	d6 01       	movw	r26, r12
    50da:	8d 93       	st	X+, r24
    50dc:	fd 01       	movw	r30, r26
    50de:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    50e0:	8f ef       	ldi	r24, 0xFF	; 255
    50e2:	df 01       	movw	r26, r30
    50e4:	8d 93       	st	X+, r24
    50e6:	fd 01       	movw	r30, r26
    50e8:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    50ea:	df 01       	movw	r26, r30
    50ec:	ea 8d       	ldd	r30, Y+26	; 0x1a
    50ee:	ed 93       	st	X+, r30
    50f0:	1d 92       	st	X+, r1
    50f2:	fd 01       	movw	r30, r26
    50f4:	11 92       	st	Z+, r1
    50f6:	6f 01       	movw	r12, r30
    50f8:	10 82       	st	Z, r1
    50fa:	23 eb       	ldi	r18, 0xB3	; 179
    50fc:	3f ef       	ldi	r19, 0xFF	; 255
    50fe:	c2 0e       	add	r12, r18
    5100:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    5102:	1d 82       	std	Y+5, r1	; 0x05
    5104:	1e 82       	std	Y+6, r1	; 0x06
    5106:	1f 82       	std	Y+7, r1	; 0x07
    5108:	18 86       	std	Y+8, r1	; 0x08
    510a:	b6 01       	movw	r22, r12
    510c:	6b 5a       	subi	r22, 0xAB	; 171
    510e:	7f 4f       	sbci	r23, 0xFF	; 255
    5110:	85 2d       	mov	r24, r5
    5112:	99 27       	eor	r25, r25
    5114:	d6 01       	movw	r26, r12
    5116:	ae 5a       	subi	r26, 0xAE	; 174
    5118:	bf 4f       	sbci	r27, 0xFF	; 255
    511a:	96 01       	movw	r18, r12
    511c:	2c 5a       	subi	r18, 0xAC	; 172
    511e:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    5120:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5122:	43 30       	cpi	r20, 0x03	; 3
    5124:	41 f1       	breq	.+80     	; 0x5176 <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    5126:	fb 01       	movw	r30, r22
    5128:	10 82       	st	Z, r1
    512a:	46 e5       	ldi	r20, 0x56	; 86
    512c:	50 e0       	ldi	r21, 0x00	; 0
    512e:	c4 0e       	add	r12, r20
    5130:	d5 1e       	adc	r13, r21
    5132:	f6 01       	movw	r30, r12
    5134:	11 92       	st	Z+, r1
    5136:	11 92       	st	Z+, r1
    5138:	6f 01       	movw	r12, r30
    513a:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    513c:	4c ee       	ldi	r20, 0xEC	; 236
    513e:	5f ef       	ldi	r21, 0xFF	; 255
    5140:	c4 0e       	add	r12, r20
    5142:	d5 1e       	adc	r13, r21
    5144:	f6 01       	movw	r30, r12
    5146:	41 92       	st	Z+, r4
    5148:	6f 01       	movw	r12, r30
    514a:	80 83       	st	Z, r24
    514c:	4b eb       	ldi	r20, 0xBB	; 187
    514e:	5f ef       	ldi	r21, 0xFF	; 255
    5150:	c4 0e       	add	r12, r20
    5152:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    5154:	80 e8       	ldi	r24, 0x80	; 128
    5156:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    5158:	89 e2       	ldi	r24, 0x29	; 41
    515a:	d9 01       	movw	r26, r18
    515c:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    515e:	d7 01       	movw	r26, r14
    5160:	9b 96       	adiw	r26, 0x2b	; 43
    5162:	eb e0       	ldi	r30, 0x0B	; 11
    5164:	f0 e2       	ldi	r31, 0x20	; 32
    5166:	02 c0       	rjmp	.+4      	; 0x516c <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5168:	81 91       	ld	r24, Z+
    516a:	8d 93       	st	X+, r24
    516c:	20 e2       	ldi	r18, 0x20	; 32
    516e:	ee 31       	cpi	r30, 0x1E	; 30
    5170:	f2 07       	cpc	r31, r18
    5172:	d1 f7       	brne	.-12     	; 0x5168 <f_mkfs+0x67e>
    5174:	51 c0       	rjmp	.+162    	; 0x5218 <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    5176:	41 e7       	ldi	r20, 0x71	; 113
    5178:	50 e0       	ldi	r21, 0x00	; 0
    517a:	c4 0e       	add	r12, r20
    517c:	d5 1e       	adc	r13, r21
    517e:	f6 01       	movw	r30, r12
    5180:	11 92       	st	Z+, r1
    5182:	11 92       	st	Z+, r1
    5184:	11 92       	st	Z+, r1
    5186:	6f 01       	movw	r12, r30
    5188:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    518a:	4c 92       	st	X, r4
    518c:	4f ed       	ldi	r20, 0xDF	; 223
    518e:	5f ef       	ldi	r21, 0xFF	; 255
    5190:	c4 0e       	add	r12, r20
    5192:	d5 1e       	adc	r13, r21
    5194:	d6 01       	movw	r26, r12
    5196:	8c 93       	st	X, r24
    5198:	c3 01       	movw	r24, r6
    519a:	aa 27       	eor	r26, r26
    519c:	bb 27       	eor	r27, r27
    519e:	f9 01       	movw	r30, r18
    51a0:	80 83       	st	Z, r24
    51a2:	87 2d       	mov	r24, r7
    51a4:	99 27       	eor	r25, r25
    51a6:	aa 27       	eor	r26, r26
    51a8:	bb 27       	eor	r27, r27
    51aa:	fb 01       	movw	r30, r22
    51ac:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    51ae:	27 e0       	ldi	r18, 0x07	; 7
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	c2 0e       	add	r12, r18
    51b4:	d3 1e       	adc	r13, r19
    51b6:	82 e0       	ldi	r24, 0x02	; 2
    51b8:	d6 01       	movw	r26, r12
    51ba:	8d 93       	st	X+, r24
    51bc:	fd 01       	movw	r30, r26
    51be:	11 92       	st	Z+, r1
    51c0:	df 01       	movw	r26, r30
    51c2:	1d 92       	st	X+, r1
    51c4:	fd 01       	movw	r30, r26
    51c6:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	df 01       	movw	r26, r30
    51cc:	8d 93       	st	X+, r24
    51ce:	fd 01       	movw	r30, r26
    51d0:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    51d2:	86 e0       	ldi	r24, 0x06	; 6
    51d4:	df 01       	movw	r26, r30
    51d6:	8d 93       	st	X+, r24
    51d8:	6d 01       	movw	r12, r26
    51da:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    51dc:	ed e0       	ldi	r30, 0x0D	; 13
    51de:	f0 e0       	ldi	r31, 0x00	; 0
    51e0:	ce 0e       	add	r12, r30
    51e2:	df 1e       	adc	r13, r31
    51e4:	80 e8       	ldi	r24, 0x80	; 128
    51e6:	d6 01       	movw	r26, r12
    51e8:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    51ea:	e2 e0       	ldi	r30, 0x02	; 2
    51ec:	f0 e0       	ldi	r31, 0x00	; 0
    51ee:	ce 0e       	add	r12, r30
    51f0:	df 1e       	adc	r13, r31
    51f2:	89 e2       	ldi	r24, 0x29	; 41
    51f4:	d6 01       	movw	r26, r12
    51f6:	8c 93       	st	X, r24
    51f8:	e0 e9       	ldi	r30, 0x90	; 144
    51fa:	ff ef       	ldi	r31, 0xFF	; 255
    51fc:	ce 0e       	add	r12, r30
    51fe:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5200:	d7 01       	movw	r26, r14
    5202:	a9 5b       	subi	r26, 0xB9	; 185
    5204:	bf 4f       	sbci	r27, 0xFF	; 255
    5206:	ef e1       	ldi	r30, 0x1F	; 31
    5208:	f0 e2       	ldi	r31, 0x20	; 32
    520a:	02 c0       	rjmp	.+4      	; 0x5210 <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    520c:	81 91       	ld	r24, Z+
    520e:	8d 93       	st	X+, r24
    5210:	20 e2       	ldi	r18, 0x20	; 32
    5212:	e2 33       	cpi	r30, 0x32	; 50
    5214:	f2 07       	cpc	r31, r18
    5216:	d1 f7       	brne	.-12     	; 0x520c <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    5218:	4c e2       	ldi	r20, 0x2C	; 44
    521a:	52 e0       	ldi	r21, 0x02	; 2
    521c:	c4 0e       	add	r12, r20
    521e:	d5 1e       	adc	r13, r21
    5220:	85 e5       	ldi	r24, 0x55	; 85
    5222:	d6 01       	movw	r26, r12
    5224:	8d 93       	st	X+, r24
    5226:	6d 01       	movw	r12, r26
    5228:	8a ea       	ldi	r24, 0xAA	; 170
    522a:	8c 93       	st	X, r24
    522c:	e3 ed       	ldi	r30, 0xD3	; 211
    522e:	fd ef       	ldi	r31, 0xFD	; 253
    5230:	ce 0e       	add	r12, r30
    5232:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    5234:	89 89       	ldd	r24, Y+17	; 0x11
    5236:	b7 01       	movw	r22, r14
    5238:	2a 8d       	ldd	r18, Y+26	; 0x1a
    523a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    523c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    523e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5240:	01 e0       	ldi	r16, 0x01	; 1
    5242:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    5246:	88 23       	and	r24, r24
    5248:	09 f0       	breq	.+2      	; 0x524c <f_mkfs+0x762>
    524a:	4d c1       	rjmp	.+666    	; 0x54e6 <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    524c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    524e:	f3 30       	cpi	r31, 0x03	; 3
    5250:	61 f4       	brne	.+24     	; 0x526a <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    5252:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5254:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5256:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5258:	5d 8d       	ldd	r21, Y+29	; 0x1d
    525a:	2a 5f       	subi	r18, 0xFA	; 250
    525c:	3f 4f       	sbci	r19, 0xFF	; 255
    525e:	4f 4f       	sbci	r20, 0xFF	; 255
    5260:	5f 4f       	sbci	r21, 0xFF	; 255
    5262:	89 89       	ldd	r24, Y+17	; 0x11
    5264:	b7 01       	movw	r22, r14
    5266:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    526a:	f7 01       	movw	r30, r14
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	92 e0       	ldi	r25, 0x02	; 2
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5272:	11 92       	st	Z+, r1
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	2f ef       	ldi	r18, 0xFF	; 255
    5278:	8f 3f       	cpi	r24, 0xFF	; 255
    527a:	92 07       	cpc	r25, r18
    527c:	d1 f7       	brne	.-12     	; 0x5272 <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    527e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5280:	33 30       	cpi	r19, 0x03	; 3
    5282:	31 f1       	breq	.+76     	; 0x52d0 <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    5284:	31 30       	cpi	r19, 0x01	; 1
    5286:	29 f0       	breq	.+10     	; 0x5292 <f_mkfs+0x7a8>
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	3f ef       	ldi	r19, 0xFF	; 255
    528c:	4f ef       	ldi	r20, 0xFF	; 255
    528e:	5f ef       	ldi	r21, 0xFF	; 255
    5290:	04 c0       	rjmp	.+8      	; 0x529a <f_mkfs+0x7b0>
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	3f ef       	ldi	r19, 0xFF	; 255
    5296:	4f ef       	ldi	r20, 0xFF	; 255
    5298:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    529a:	81 2f       	mov	r24, r17
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	a0 e0       	ldi	r26, 0x00	; 0
    52a0:	b0 e0       	ldi	r27, 0x00	; 0
    52a2:	82 2b       	or	r24, r18
    52a4:	93 2b       	or	r25, r19
    52a6:	a4 2b       	or	r26, r20
    52a8:	b5 2b       	or	r27, r21
    52aa:	8d 83       	std	Y+5, r24	; 0x05
    52ac:	9e 83       	std	Y+6, r25	; 0x06
    52ae:	af 83       	std	Y+7, r26	; 0x07
    52b0:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    52b2:	f6 01       	movw	r30, r12
    52b4:	86 a7       	std	Z+46, r24	; 0x2e
    52b6:	29 2f       	mov	r18, r25
    52b8:	33 27       	eor	r19, r19
    52ba:	27 a7       	std	Z+47, r18	; 0x2f
    52bc:	9d 01       	movw	r18, r26
    52be:	44 27       	eor	r20, r20
    52c0:	55 27       	eor	r21, r21
    52c2:	20 ab       	std	Z+48, r18	; 0x30
    52c4:	8b 2f       	mov	r24, r27
    52c6:	99 27       	eor	r25, r25
    52c8:	aa 27       	eor	r26, r26
    52ca:	bb 27       	eor	r27, r27
    52cc:	81 ab       	std	Z+49, r24	; 0x31
    52ce:	27 c0       	rjmp	.+78     	; 0x531e <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    52d0:	88 ef       	ldi	r24, 0xF8	; 248
    52d2:	d6 01       	movw	r26, r12
    52d4:	9e 96       	adiw	r26, 0x2e	; 46
    52d6:	8c 93       	st	X, r24
    52d8:	9e 97       	sbiw	r26, 0x2e	; 46
    52da:	8f ef       	ldi	r24, 0xFF	; 255
    52dc:	9f 96       	adiw	r26, 0x2f	; 47
    52de:	8c 93       	st	X, r24
    52e0:	9f 97       	sbiw	r26, 0x2f	; 47
    52e2:	d0 96       	adiw	r26, 0x30	; 48
    52e4:	8c 93       	st	X, r24
    52e6:	d0 97       	sbiw	r26, 0x30	; 48
    52e8:	d1 96       	adiw	r26, 0x31	; 49
    52ea:	8c 93       	st	X, r24
    52ec:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    52ee:	d2 96       	adiw	r26, 0x32	; 50
    52f0:	8c 93       	st	X, r24
    52f2:	d2 97       	sbiw	r26, 0x32	; 50
    52f4:	d3 96       	adiw	r26, 0x33	; 51
    52f6:	8c 93       	st	X, r24
    52f8:	d3 97       	sbiw	r26, 0x33	; 51
    52fa:	d4 96       	adiw	r26, 0x34	; 52
    52fc:	8c 93       	st	X, r24
    52fe:	d4 97       	sbiw	r26, 0x34	; 52
    5300:	d5 96       	adiw	r26, 0x35	; 53
    5302:	8c 93       	st	X, r24
    5304:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    5306:	d6 96       	adiw	r26, 0x36	; 54
    5308:	8c 93       	st	X, r24
    530a:	d6 97       	sbiw	r26, 0x36	; 54
    530c:	d7 96       	adiw	r26, 0x37	; 55
    530e:	8c 93       	st	X, r24
    5310:	d7 97       	sbiw	r26, 0x37	; 55
    5312:	d8 96       	adiw	r26, 0x38	; 56
    5314:	8c 93       	st	X, r24
    5316:	d8 97       	sbiw	r26, 0x38	; 56
    5318:	8f e0       	ldi	r24, 0x0F	; 15
    531a:	d9 96       	adiw	r26, 0x39	; 57
    531c:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    531e:	89 89       	ldd	r24, Y+17	; 0x11
    5320:	b7 01       	movw	r22, r14
    5322:	29 85       	ldd	r18, Y+9	; 0x09
    5324:	3a 85       	ldd	r19, Y+10	; 0x0a
    5326:	4b 85       	ldd	r20, Y+11	; 0x0b
    5328:	5c 85       	ldd	r21, Y+12	; 0x0c
    532a:	01 e0       	ldi	r16, 0x01	; 1
    532c:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    5330:	88 23       	and	r24, r24
    5332:	09 f0       	breq	.+2      	; 0x5336 <f_mkfs+0x84c>
    5334:	d8 c0       	rjmp	.+432    	; 0x54e6 <f_mkfs+0x9fc>
    5336:	f7 01       	movw	r30, r14
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	92 e0       	ldi	r25, 0x02	; 2
    533c:	01 c0       	rjmp	.+2      	; 0x5340 <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    533e:	11 92       	st	Z+, r1
    5340:	01 97       	sbiw	r24, 0x01	; 1
    5342:	bf ef       	ldi	r27, 0xFF	; 255
    5344:	8f 3f       	cpi	r24, 0xFF	; 255
    5346:	9b 07       	cpc	r25, r27
    5348:	d1 f7       	brne	.-12     	; 0x533e <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    534a:	89 84       	ldd	r8, Y+9	; 0x09
    534c:	9a 84       	ldd	r9, Y+10	; 0x0a
    534e:	ab 84       	ldd	r10, Y+11	; 0x0b
    5350:	bc 84       	ldd	r11, Y+12	; 0x0c
    5352:	08 94       	sec
    5354:	81 1c       	adc	r8, r1
    5356:	91 1c       	adc	r9, r1
    5358:	a1 1c       	adc	r10, r1
    535a:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	a0 e0       	ldi	r26, 0x00	; 0
    5362:	b0 e0       	ldi	r27, 0x00	; 0
    5364:	16 c0       	rjmp	.+44     	; 0x5392 <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5366:	89 89       	ldd	r24, Y+17	; 0x11
    5368:	b7 01       	movw	r22, r14
    536a:	a5 01       	movw	r20, r10
    536c:	94 01       	movw	r18, r8
    536e:	01 e0       	ldi	r16, 0x01	; 1
    5370:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    5374:	88 23       	and	r24, r24
    5376:	09 f0       	breq	.+2      	; 0x537a <f_mkfs+0x890>
    5378:	b6 c0       	rjmp	.+364    	; 0x54e6 <f_mkfs+0x9fc>
    537a:	08 94       	sec
    537c:	81 1c       	adc	r8, r1
    537e:	91 1c       	adc	r9, r1
    5380:	a1 1c       	adc	r10, r1
    5382:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5384:	8d 81       	ldd	r24, Y+5	; 0x05
    5386:	9e 81       	ldd	r25, Y+6	; 0x06
    5388:	af 81       	ldd	r26, Y+7	; 0x07
    538a:	b8 85       	ldd	r27, Y+8	; 0x08
    538c:	01 96       	adiw	r24, 0x01	; 1
    538e:	a1 1d       	adc	r26, r1
    5390:	b1 1d       	adc	r27, r1
    5392:	8d 83       	std	Y+5, r24	; 0x05
    5394:	9e 83       	std	Y+6, r25	; 0x06
    5396:	af 83       	std	Y+7, r26	; 0x07
    5398:	b8 87       	std	Y+8, r27	; 0x08
    539a:	8d 81       	ldd	r24, Y+5	; 0x05
    539c:	9e 81       	ldd	r25, Y+6	; 0x06
    539e:	af 81       	ldd	r26, Y+7	; 0x07
    53a0:	b8 85       	ldd	r27, Y+8	; 0x08
    53a2:	84 15       	cp	r24, r4
    53a4:	95 05       	cpc	r25, r5
    53a6:	a6 05       	cpc	r26, r6
    53a8:	b7 05       	cpc	r27, r7
    53aa:	e8 f2       	brcs	.-70     	; 0x5366 <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    53ac:	ef 8d       	ldd	r30, Y+31	; 0x1f
    53ae:	e3 30       	cpi	r30, 0x03	; 3
    53b0:	11 f0       	breq	.+4      	; 0x53b6 <f_mkfs+0x8cc>
    53b2:	fa 89       	ldd	r31, Y+18	; 0x12
    53b4:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    53b6:	24 01       	movw	r4, r8
    53b8:	35 01       	movw	r6, r10
    53ba:	08 94       	sec
    53bc:	41 1c       	adc	r4, r1
    53be:	51 1c       	adc	r5, r1
    53c0:	61 1c       	adc	r6, r1
    53c2:	71 1c       	adc	r7, r1
    53c4:	89 89       	ldd	r24, Y+17	; 0x11
    53c6:	b7 01       	movw	r22, r14
    53c8:	a5 01       	movw	r20, r10
    53ca:	94 01       	movw	r18, r8
    53cc:	01 e0       	ldi	r16, 0x01	; 1
    53ce:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
    53d2:	88 23       	and	r24, r24
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <f_mkfs+0x8ee>
    53d6:	87 c0       	rjmp	.+270    	; 0x54e6 <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    53d8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    53da:	21 50       	subi	r18, 0x01	; 1
    53dc:	2e 8f       	std	Y+30, r18	; 0x1e
    53de:	22 23       	and	r18, r18
    53e0:	19 f0       	breq	.+6      	; 0x53e8 <f_mkfs+0x8fe>
    53e2:	53 01       	movw	r10, r6
    53e4:	42 01       	movw	r8, r4
    53e6:	e7 cf       	rjmp	.-50     	; 0x53b6 <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    53e8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    53ea:	33 30       	cpi	r19, 0x03	; 3
    53ec:	09 f0       	breq	.+2      	; 0x53f0 <f_mkfs+0x906>
    53ee:	70 c0       	rjmp	.+224    	; 0x54d0 <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    53f0:	4c e2       	ldi	r20, 0x2C	; 44
    53f2:	52 e0       	ldi	r21, 0x02	; 2
    53f4:	c4 0e       	add	r12, r20
    53f6:	d5 1e       	adc	r13, r21
    53f8:	85 e5       	ldi	r24, 0x55	; 85
    53fa:	d6 01       	movw	r26, r12
    53fc:	8d 93       	st	X+, r24
    53fe:	6d 01       	movw	r12, r26
    5400:	8a ea       	ldi	r24, 0xAA	; 170
    5402:	8c 93       	st	X, r24
    5404:	e3 ed       	ldi	r30, 0xD3	; 211
    5406:	fd ef       	ldi	r31, 0xFD	; 253
    5408:	ce 0e       	add	r12, r30
    540a:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    540c:	82 e5       	ldi	r24, 0x52	; 82
    540e:	d6 01       	movw	r26, r12
    5410:	9e 96       	adiw	r26, 0x2e	; 46
    5412:	8c 93       	st	X, r24
    5414:	9e 97       	sbiw	r26, 0x2e	; 46
    5416:	9f 96       	adiw	r26, 0x2f	; 47
    5418:	8c 93       	st	X, r24
    541a:	9f 97       	sbiw	r26, 0x2f	; 47
    541c:	21 e6       	ldi	r18, 0x61	; 97
    541e:	d0 96       	adiw	r26, 0x30	; 48
    5420:	2c 93       	st	X, r18
    5422:	d0 97       	sbiw	r26, 0x30	; 48
    5424:	91 e4       	ldi	r25, 0x41	; 65
    5426:	d1 96       	adiw	r26, 0x31	; 49
    5428:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    542a:	e2 e1       	ldi	r30, 0x12	; 18
    542c:	f2 e0       	ldi	r31, 0x02	; 2
    542e:	ce 0e       	add	r12, r30
    5430:	df 1e       	adc	r13, r31
    5432:	82 e7       	ldi	r24, 0x72	; 114
    5434:	d6 01       	movw	r26, r12
    5436:	8d 93       	st	X+, r24
    5438:	fd 01       	movw	r30, r26
    543a:	81 93       	st	Z+, r24
    543c:	df 01       	movw	r26, r30
    543e:	9d 93       	st	X+, r25
    5440:	fd 01       	movw	r30, r26
    5442:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    5444:	89 a1       	ldd	r24, Y+33	; 0x21
    5446:	81 50       	subi	r24, 0x01	; 1
    5448:	df 01       	movw	r26, r30
    544a:	8d 93       	st	X+, r24
    544c:	89 a1       	ldd	r24, Y+33	; 0x21
    544e:	9a a1       	ldd	r25, Y+34	; 0x22
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	fd 01       	movw	r30, r26
    5454:	91 93       	st	Z+, r25
    5456:	89 a1       	ldd	r24, Y+33	; 0x21
    5458:	9a a1       	ldd	r25, Y+34	; 0x22
    545a:	ab a1       	ldd	r26, Y+35	; 0x23
    545c:	bc a1       	ldd	r27, Y+36	; 0x24
    545e:	01 97       	sbiw	r24, 0x01	; 1
    5460:	a1 09       	sbc	r26, r1
    5462:	b1 09       	sbc	r27, r1
    5464:	9d 01       	movw	r18, r26
    5466:	44 27       	eor	r20, r20
    5468:	55 27       	eor	r21, r21
    546a:	21 93       	st	Z+, r18
    546c:	8b 2f       	mov	r24, r27
    546e:	99 27       	eor	r25, r25
    5470:	aa 27       	eor	r26, r26
    5472:	bb 27       	eor	r27, r27
    5474:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    5476:	8f ef       	ldi	r24, 0xFF	; 255
    5478:	df 01       	movw	r26, r30
    547a:	8d 93       	st	X+, r24
    547c:	fd 01       	movw	r30, r26
    547e:	81 93       	st	Z+, r24
    5480:	df 01       	movw	r26, r30
    5482:	8d 93       	st	X+, r24
    5484:	fd 01       	movw	r30, r26
    5486:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    5488:	2a 8d       	ldd	r18, Y+26	; 0x1a
    548a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    548c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    548e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5490:	2f 5f       	subi	r18, 0xFF	; 255
    5492:	3f 4f       	sbci	r19, 0xFF	; 255
    5494:	4f 4f       	sbci	r20, 0xFF	; 255
    5496:	5f 4f       	sbci	r21, 0xFF	; 255
    5498:	2a 8f       	std	Y+26, r18	; 0x1a
    549a:	3b 8f       	std	Y+27, r19	; 0x1b
    549c:	4c 8f       	std	Y+28, r20	; 0x1c
    549e:	5d 8f       	std	Y+29, r21	; 0x1d
    54a0:	89 89       	ldd	r24, Y+17	; 0x11
    54a2:	b7 01       	movw	r22, r14
    54a4:	01 e0       	ldi	r16, 0x01	; 1
    54a6:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    54aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54ae:	ac 8d       	ldd	r26, Y+28	; 0x1c
    54b0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    54b2:	06 96       	adiw	r24, 0x06	; 6
    54b4:	a1 1d       	adc	r26, r1
    54b6:	b1 1d       	adc	r27, r1
    54b8:	8a 8f       	std	Y+26, r24	; 0x1a
    54ba:	9b 8f       	std	Y+27, r25	; 0x1b
    54bc:	ac 8f       	std	Y+28, r26	; 0x1c
    54be:	bd 8f       	std	Y+29, r27	; 0x1d
    54c0:	89 89       	ldd	r24, Y+17	; 0x11
    54c2:	b7 01       	movw	r22, r14
    54c4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54c6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54c8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    54ca:	5d 8d       	ldd	r21, Y+29	; 0x1d
    54cc:	0e 94 05 07 	call	0xe0a	; 0xe0a <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    54d0:	89 89       	ldd	r24, Y+17	; 0x11
    54d2:	60 e0       	ldi	r22, 0x00	; 0
    54d4:	40 e0       	ldi	r20, 0x00	; 0
    54d6:	50 e0       	ldi	r21, 0x00	; 0
    54d8:	0e 94 7d 07 	call	0xefa	; 0xefa <disk_ioctl>
    54dc:	88 23       	and	r24, r24
    54de:	21 f0       	breq	.+8      	; 0x54e8 <f_mkfs+0x9fe>
    54e0:	02 c0       	rjmp	.+4      	; 0x54e6 <f_mkfs+0x9fc>
    54e2:	8e e0       	ldi	r24, 0x0E	; 14
    54e4:	01 c0       	rjmp	.+2      	; 0x54e8 <f_mkfs+0x9fe>
    54e6:	81 e0       	ldi	r24, 0x01	; 1
}
    54e8:	a4 96       	adiw	r28, 0x24	; 36
    54ea:	cd bf       	out	0x3d, r28	; 61
    54ec:	de bf       	out	0x3e, r29	; 62
    54ee:	cf 91       	pop	r28
    54f0:	df 91       	pop	r29
    54f2:	1f 91       	pop	r17
    54f4:	0f 91       	pop	r16
    54f6:	ff 90       	pop	r15
    54f8:	ef 90       	pop	r14
    54fa:	df 90       	pop	r13
    54fc:	cf 90       	pop	r12
    54fe:	bf 90       	pop	r11
    5500:	af 90       	pop	r10
    5502:	9f 90       	pop	r9
    5504:	8f 90       	pop	r8
    5506:	7f 90       	pop	r7
    5508:	6f 90       	pop	r6
    550a:	5f 90       	pop	r5
    550c:	4f 90       	pop	r4
    550e:	3f 90       	pop	r3
    5510:	2f 90       	pop	r2
    5512:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    5514:	7c 01       	movw	r14, r24
    5516:	8d 01       	movw	r16, r26
    5518:	ee 0c       	add	r14, r14
    551a:	ff 1c       	adc	r15, r15
    551c:	00 1f       	adc	r16, r16
    551e:	11 1f       	adc	r17, r17
    5520:	e8 0e       	add	r14, r24
    5522:	f9 1e       	adc	r15, r25
    5524:	0a 1f       	adc	r16, r26
    5526:	1b 1f       	adc	r17, r27
    5528:	08 94       	sec
    552a:	e1 1c       	adc	r14, r1
    552c:	f1 1c       	adc	r15, r1
    552e:	01 1d       	adc	r16, r1
    5530:	11 1d       	adc	r17, r1
    5532:	16 95       	lsr	r17
    5534:	07 95       	ror	r16
    5536:	f7 94       	ror	r15
    5538:	e7 94       	ror	r14
    553a:	22 e0       	ldi	r18, 0x02	; 2
    553c:	32 e0       	ldi	r19, 0x02	; 2
    553e:	40 e0       	ldi	r20, 0x00	; 0
    5540:	50 e0       	ldi	r21, 0x00	; 0
    5542:	e2 0e       	add	r14, r18
    5544:	f3 1e       	adc	r15, r19
    5546:	04 1f       	adc	r16, r20
    5548:	15 1f       	adc	r17, r21
    554a:	b9 e0       	ldi	r27, 0x09	; 9
    554c:	16 95       	lsr	r17
    554e:	07 95       	ror	r16
    5550:	f7 94       	ror	r15
    5552:	e7 94       	ror	r14
    5554:	ba 95       	dec	r27
    5556:	d1 f7       	brne	.-12     	; 0x554c <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    5558:	38 a1       	ldd	r19, Y+32	; 0x20
    555a:	83 2f       	mov	r24, r19
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	01 96       	adiw	r24, 0x01	; 1
    5560:	9c 01       	movw	r18, r24
    5562:	44 27       	eor	r20, r20
    5564:	37 fd       	sbrc	r19, 7
    5566:	40 95       	com	r20
    5568:	54 2f       	mov	r21, r20
    556a:	2e 8b       	std	Y+22, r18	; 0x16
    556c:	3f 8b       	std	Y+23, r19	; 0x17
    556e:	48 8f       	std	Y+24, r20	; 0x18
    5570:	59 8f       	std	Y+25, r21	; 0x19
    5572:	80 e2       	ldi	r24, 0x20	; 32
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	a0 e0       	ldi	r26, 0x00	; 0
    5578:	b0 e0       	ldi	r27, 0x00	; 0
    557a:	8a 8b       	std	Y+18, r24	; 0x12
    557c:	9b 8b       	std	Y+19, r25	; 0x13
    557e:	ac 8b       	std	Y+20, r26	; 0x14
    5580:	bd 8b       	std	Y+21, r27	; 0x15
    5582:	91 e0       	ldi	r25, 0x01	; 1
    5584:	9f 8f       	std	Y+31, r25	; 0x1f
    5586:	fe cb       	rjmp	.-2052   	; 0x4d84 <f_mkfs+0x29a>

00005588 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    5588:	6f 92       	push	r6
    558a:	7f 92       	push	r7
    558c:	8f 92       	push	r8
    558e:	9f 92       	push	r9
    5590:	af 92       	push	r10
    5592:	bf 92       	push	r11
    5594:	cf 92       	push	r12
    5596:	df 92       	push	r13
    5598:	ef 92       	push	r14
    559a:	ff 92       	push	r15
    559c:	0f 93       	push	r16
    559e:	1f 93       	push	r17
    55a0:	df 93       	push	r29
    55a2:	cf 93       	push	r28
    55a4:	0f 92       	push	r0
    55a6:	0f 92       	push	r0
    55a8:	cd b7       	in	r28, 0x3d	; 61
    55aa:	de b7       	in	r29, 0x3e	; 62
    55ac:	5c 01       	movw	r10, r24
    55ae:	6b 01       	movw	r12, r22
    55b0:	4a 01       	movw	r8, r20
    55b2:	8c 01       	movw	r16, r24
    55b4:	ee 24       	eor	r14, r14
    55b6:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    55b8:	08 94       	sec
    55ba:	c1 08       	sbc	r12, r1
    55bc:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    55be:	3e 01       	movw	r6, r28
    55c0:	08 94       	sec
    55c2:	61 1c       	adc	r6, r1
    55c4:	71 1c       	adc	r7, r1
    55c6:	13 c0       	rjmp	.+38     	; 0x55ee <f_gets+0x66>
    55c8:	c4 01       	movw	r24, r8
    55ca:	b8 01       	movw	r22, r16
    55cc:	41 e0       	ldi	r20, 0x01	; 1
    55ce:	50 e0       	ldi	r21, 0x00	; 0
    55d0:	93 01       	movw	r18, r6
    55d2:	0e 94 1d 18 	call	0x303a	; 0x303a <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    55d6:	89 81       	ldd	r24, Y+1	; 0x01
    55d8:	9a 81       	ldd	r25, Y+2	; 0x02
    55da:	01 97       	sbiw	r24, 0x01	; 1
    55dc:	59 f4       	brne	.+22     	; 0x55f4 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    55de:	08 94       	sec
    55e0:	e1 1c       	adc	r14, r1
    55e2:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    55e4:	f8 01       	movw	r30, r16
    55e6:	81 91       	ld	r24, Z+
    55e8:	8f 01       	movw	r16, r30
    55ea:	8a 30       	cpi	r24, 0x0A	; 10
    55ec:	19 f0       	breq	.+6      	; 0x55f4 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    55ee:	ec 14       	cp	r14, r12
    55f0:	fd 04       	cpc	r15, r13
    55f2:	54 f3       	brlt	.-44     	; 0x55c8 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    55f4:	f8 01       	movw	r30, r16
    55f6:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    55f8:	ef 28       	or	r14, r15
    55fa:	11 f4       	brne	.+4      	; 0x5600 <f_gets+0x78>
    55fc:	aa 24       	eor	r10, r10
    55fe:	bb 24       	eor	r11, r11
}
    5600:	c5 01       	movw	r24, r10
    5602:	0f 90       	pop	r0
    5604:	0f 90       	pop	r0
    5606:	cf 91       	pop	r28
    5608:	df 91       	pop	r29
    560a:	1f 91       	pop	r17
    560c:	0f 91       	pop	r16
    560e:	ff 90       	pop	r15
    5610:	ef 90       	pop	r14
    5612:	df 90       	pop	r13
    5614:	cf 90       	pop	r12
    5616:	bf 90       	pop	r11
    5618:	af 90       	pop	r10
    561a:	9f 90       	pop	r9
    561c:	8f 90       	pop	r8
    561e:	7f 90       	pop	r7
    5620:	6f 90       	pop	r6
    5622:	08 95       	ret

00005624 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    5624:	0f 93       	push	r16
    5626:	1f 93       	push	r17
    5628:	df 93       	push	r29
    562a:	cf 93       	push	r28
    562c:	00 d0       	rcall	.+0      	; 0x562e <f_putc+0xa>
    562e:	cd b7       	in	r28, 0x3d	; 61
    5630:	de b7       	in	r29, 0x3e	; 62
    5632:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    5634:	61 15       	cp	r22, r1
    5636:	71 05       	cpc	r23, r1
    5638:	91 f0       	breq	.+36     	; 0x565e <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    563a:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    563c:	cb 01       	movw	r24, r22
    563e:	be 01       	movw	r22, r28
    5640:	6f 5f       	subi	r22, 0xFF	; 255
    5642:	7f 4f       	sbci	r23, 0xFF	; 255
    5644:	41 e0       	ldi	r20, 0x01	; 1
    5646:	50 e0       	ldi	r21, 0x00	; 0
    5648:	9e 01       	movw	r18, r28
    564a:	2e 5f       	subi	r18, 0xFE	; 254
    564c:	3f 4f       	sbci	r19, 0xFF	; 255
    564e:	0e 94 13 1a 	call	0x3426	; 0x3426 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    5652:	8a 81       	ldd	r24, Y+2	; 0x02
    5654:	9b 81       	ldd	r25, Y+3	; 0x03
    5656:	89 2b       	or	r24, r25
    5658:	11 f4       	brne	.+4      	; 0x565e <f_putc+0x3a>
    565a:	0f ef       	ldi	r16, 0xFF	; 255
    565c:	1f ef       	ldi	r17, 0xFF	; 255
}
    565e:	c8 01       	movw	r24, r16
    5660:	23 96       	adiw	r28, 0x03	; 3
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	de bf       	out	0x3e, r29	; 62
    5666:	cf 91       	pop	r28
    5668:	df 91       	pop	r29
    566a:	1f 91       	pop	r17
    566c:	0f 91       	pop	r16
    566e:	08 95       	ret

00005670 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5670:	ef 92       	push	r14
    5672:	ff 92       	push	r15
    5674:	0f 93       	push	r16
    5676:	1f 93       	push	r17
    5678:	cf 93       	push	r28
    567a:	df 93       	push	r29
    567c:	8c 01       	movw	r16, r24
    567e:	7b 01       	movw	r14, r22
    5680:	c0 e0       	ldi	r28, 0x00	; 0
    5682:	d0 e0       	ldi	r29, 0x00	; 0
    5684:	0d c0       	rjmp	.+26     	; 0x56a0 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	b7 01       	movw	r22, r14
    568a:	0e 94 12 2b 	call	0x5624	; 0x5624 <f_putc>
    568e:	8f 5f       	subi	r24, 0xFF	; 255
    5690:	9f 4f       	sbci	r25, 0xFF	; 255
    5692:	19 f4       	brne	.+6      	; 0x569a <f_puts+0x2a>
    5694:	cf ef       	ldi	r28, 0xFF	; 255
    5696:	df ef       	ldi	r29, 0xFF	; 255
    5698:	07 c0       	rjmp	.+14     	; 0x56a8 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    569a:	0f 5f       	subi	r16, 0xFF	; 255
    569c:	1f 4f       	sbci	r17, 0xFF	; 255
    569e:	21 96       	adiw	r28, 0x01	; 1
    56a0:	f8 01       	movw	r30, r16
    56a2:	80 81       	ld	r24, Z
    56a4:	88 23       	and	r24, r24
    56a6:	79 f7       	brne	.-34     	; 0x5686 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    56a8:	ce 01       	movw	r24, r28
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	1f 91       	pop	r17
    56b0:	0f 91       	pop	r16
    56b2:	ff 90       	pop	r15
    56b4:	ef 90       	pop	r14
    56b6:	08 95       	ret

000056b8 <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    56b8:	88 e6       	ldi	r24, 0x68	; 104
    56ba:	9f e4       	ldi	r25, 0x4F	; 79
    56bc:	0e 94 cf 1c 	call	0x399e	; 0x399e <f_close>
}
    56c0:	08 95       	ret

000056c2 <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    56c2:	80 91 a8 06 	lds	r24, 0x06A8
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	80 ff       	sbrs	r24, 0
    56ca:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    56cc:	89 2f       	mov	r24, r25
    56ce:	08 95       	ret

000056d0 <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    56d0:	e0 ea       	ldi	r30, 0xA0	; 160
    56d2:	f6 e0       	ldi	r31, 0x06	; 6
    56d4:	80 85       	ldd	r24, Z+8	; 0x08
    56d6:	86 95       	lsr	r24
    56d8:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    56da:	81 70       	andi	r24, 0x01	; 1
    56dc:	08 95       	ret

000056de <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    56de:	af 92       	push	r10
    56e0:	bf 92       	push	r11
    56e2:	cf 92       	push	r12
    56e4:	df 92       	push	r13
    56e6:	ef 92       	push	r14
    56e8:	ff 92       	push	r15
    56ea:	0f 93       	push	r16
    56ec:	1f 93       	push	r17
    56ee:	df 93       	push	r29
    56f0:	cf 93       	push	r28
    56f2:	0f 92       	push	r0
    56f4:	0f 92       	push	r0
    56f6:	cd b7       	in	r28, 0x3d	; 61
    56f8:	de b7       	in	r29, 0x3e	; 62
    56fa:	5c 01       	movw	r10, r24
    56fc:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    56fe:	88 e6       	ldi	r24, 0x68	; 104
    5700:	9f e4       	ldi	r25, 0x4F	; 79
    5702:	b5 01       	movw	r22, r10
    5704:	a6 01       	movw	r20, r12
    5706:	9e 01       	movw	r18, r28
    5708:	2f 5f       	subi	r18, 0xFF	; 255
    570a:	3f 4f       	sbci	r19, 0xFF	; 255
    570c:	0e 94 13 1a 	call	0x3426	; 0x3426 <f_write>
    5710:	60 e0       	ldi	r22, 0x00	; 0
    5712:	70 e0       	ldi	r23, 0x00	; 0
    5714:	3b c0       	rjmp	.+118    	; 0x578c <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    5716:	e0 90 5e 57 	lds	r14, 0x575E
    571a:	f0 90 5f 57 	lds	r15, 0x575F
    571e:	00 91 60 57 	lds	r16, 0x5760
    5722:	10 91 61 57 	lds	r17, 0x5761
    5726:	20 91 5e 57 	lds	r18, 0x575E
    572a:	30 91 5f 57 	lds	r19, 0x575F
    572e:	40 91 60 57 	lds	r20, 0x5760
    5732:	50 91 61 57 	lds	r21, 0x5761
    5736:	30 70       	andi	r19, 0x00	; 0
    5738:	40 70       	andi	r20, 0x00	; 0
    573a:	50 70       	andi	r21, 0x00	; 0
    573c:	f5 01       	movw	r30, r10
    573e:	e6 0f       	add	r30, r22
    5740:	f7 1f       	adc	r31, r23
    5742:	80 81       	ld	r24, Z
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	a0 e0       	ldi	r26, 0x00	; 0
    5748:	b0 e0       	ldi	r27, 0x00	; 0
    574a:	28 27       	eor	r18, r24
    574c:	39 27       	eor	r19, r25
    574e:	4a 27       	eor	r20, r26
    5750:	5b 27       	eor	r21, r27
    5752:	22 0f       	add	r18, r18
    5754:	33 1f       	adc	r19, r19
    5756:	22 0f       	add	r18, r18
    5758:	33 1f       	adc	r19, r19
    575a:	26 54       	subi	r18, 0x46	; 70
    575c:	34 4d       	sbci	r19, 0xD4	; 212
    575e:	ef 2c       	mov	r14, r15
    5760:	f0 2e       	mov	r15, r16
    5762:	01 2f       	mov	r16, r17
    5764:	11 27       	eor	r17, r17
    5766:	f9 01       	movw	r30, r18
    5768:	80 81       	ld	r24, Z
    576a:	91 81       	ldd	r25, Z+1	; 0x01
    576c:	a2 81       	ldd	r26, Z+2	; 0x02
    576e:	b3 81       	ldd	r27, Z+3	; 0x03
    5770:	e8 26       	eor	r14, r24
    5772:	f9 26       	eor	r15, r25
    5774:	0a 27       	eor	r16, r26
    5776:	1b 27       	eor	r17, r27
    5778:	e0 92 5e 57 	sts	0x575E, r14
    577c:	f0 92 5f 57 	sts	0x575F, r15
    5780:	00 93 60 57 	sts	0x5760, r16
    5784:	10 93 61 57 	sts	0x5761, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    5788:	6f 5f       	subi	r22, 0xFF	; 255
    578a:	7f 4f       	sbci	r23, 0xFF	; 255
    578c:	6c 15       	cp	r22, r12
    578e:	7d 05       	cpc	r23, r13
    5790:	10 f2       	brcs	.-124    	; 0x5716 <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    5792:	0f 90       	pop	r0
    5794:	0f 90       	pop	r0
    5796:	cf 91       	pop	r28
    5798:	df 91       	pop	r29
    579a:	1f 91       	pop	r17
    579c:	0f 91       	pop	r16
    579e:	ff 90       	pop	r15
    57a0:	ef 90       	pop	r14
    57a2:	df 90       	pop	r13
    57a4:	cf 90       	pop	r12
    57a6:	bf 90       	pop	r11
    57a8:	af 90       	pop	r10
    57aa:	08 95       	ret

000057ac <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    57ac:	60 93 de 44 	sts	0x44DE, r22
	tmp32[1] = (uint8_t)(var >> 8);
    57b0:	27 2f       	mov	r18, r23
    57b2:	38 2f       	mov	r19, r24
    57b4:	49 2f       	mov	r20, r25
    57b6:	55 27       	eor	r21, r21
    57b8:	20 93 df 44 	sts	0x44DF, r18
	tmp32[2] = (uint8_t)(var >> 16);
    57bc:	9c 01       	movw	r18, r24
    57be:	44 27       	eor	r20, r20
    57c0:	55 27       	eor	r21, r21
    57c2:	20 93 e0 44 	sts	0x44E0, r18
	tmp32[3] = (uint8_t)(var >> 24);
    57c6:	69 2f       	mov	r22, r25
    57c8:	77 27       	eor	r23, r23
    57ca:	88 27       	eor	r24, r24
    57cc:	99 27       	eor	r25, r25
    57ce:	60 93 e1 44 	sts	0x44E1, r22
	SD_WriteBuffer(tmp32,4);
    57d2:	8e ed       	ldi	r24, 0xDE	; 222
    57d4:	94 e4       	ldi	r25, 0x44	; 68
    57d6:	64 e0       	ldi	r22, 0x04	; 4
    57d8:	70 e0       	ldi	r23, 0x00	; 0
    57da:	0e 94 6f 2b 	call	0x56de	; 0x56de <SD_WriteBuffer>
}
    57de:	08 95       	ret

000057e0 <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    57e0:	80 93 a6 5c 	sts	0x5CA6, r24
	tmp16[1] = (uint8_t)(var >> 8);
    57e4:	90 93 a7 5c 	sts	0x5CA7, r25
	SD_WriteBuffer(tmp16,2);
    57e8:	86 ea       	ldi	r24, 0xA6	; 166
    57ea:	9c e5       	ldi	r25, 0x5C	; 92
    57ec:	62 e0       	ldi	r22, 0x02	; 2
    57ee:	70 e0       	ldi	r23, 0x00	; 0
    57f0:	0e 94 6f 2b 	call	0x56de	; 0x56de <SD_WriteBuffer>
}
    57f4:	08 95       	ret

000057f6 <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    57f6:	80 93 ef 4a 	sts	0x4AEF, r24
	SD_WriteBuffer(tmp8,1);
    57fa:	8f ee       	ldi	r24, 0xEF	; 239
    57fc:	9a e4       	ldi	r25, 0x4A	; 74
    57fe:	61 e0       	ldi	r22, 0x01	; 1
    5800:	70 e0       	ldi	r23, 0x00	; 0
    5802:	0e 94 6f 2b 	call	0x56de	; 0x56de <SD_WriteBuffer>
}
    5806:	08 95       	ret

00005808 <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5808:	8f ef       	ldi	r24, 0xFF	; 255
    580a:	9f ef       	ldi	r25, 0xFF	; 255
    580c:	af ef       	ldi	r26, 0xFF	; 255
    580e:	bf ef       	ldi	r27, 0xFF	; 255
    5810:	80 93 5e 57 	sts	0x575E, r24
    5814:	90 93 5f 57 	sts	0x575F, r25
    5818:	a0 93 60 57 	sts	0x5760, r26
    581c:	b0 93 61 57 	sts	0x5761, r27
}
    5820:	08 95       	ret

00005822 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    5822:	60 91 5e 57 	lds	r22, 0x575E
    5826:	70 91 5f 57 	lds	r23, 0x575F
    582a:	80 91 60 57 	lds	r24, 0x5760
    582e:	90 91 61 57 	lds	r25, 0x5761
    5832:	60 95       	com	r22
    5834:	70 95       	com	r23
    5836:	80 95       	com	r24
    5838:	90 95       	com	r25
    583a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
}
    583e:	08 95       	ret

00005840 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    5840:	e0 e0       	ldi	r30, 0x00	; 0
    5842:	fa e0       	ldi	r31, 0x0A	; 10
    5844:	80 e4       	ldi	r24, 0x40	; 64
    5846:	92 e0       	ldi	r25, 0x02	; 2
    5848:	86 a3       	std	Z+38, r24	; 0x26
    584a:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    584c:	80 81       	ld	r24, Z
    584e:	80 7f       	andi	r24, 0xF0	; 240
    5850:	86 60       	ori	r24, 0x06	; 6
    5852:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5854:	86 81       	ldd	r24, Z+6	; 0x06
    5856:	8c 7f       	andi	r24, 0xFC	; 252
    5858:	82 60       	ori	r24, 0x02	; 2
    585a:	86 83       	std	Z+6, r24	; 0x06
	
}
    585c:	08 95       	ret

0000585e <SD_Init>:
};

//uint32_t crc_table[256];


uint8_t SD_Init(void){
    585e:	1f 93       	push	r17
	uint8_t tmp;


	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    5860:	e0 ea       	ldi	r30, 0xA0	; 160
    5862:	f6 e0       	ldi	r31, 0x06	; 6
    5864:	88 e1       	ldi	r24, 0x18	; 24
    5866:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    5868:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    586a:	0e 94 20 2c 	call	0x5840	; 0x5840 <SD_Timer_Init>
	tmp = disk_initialize(0);
    586e:	80 e0       	ldi	r24, 0x00	; 0
    5870:	0e 94 b8 05 	call	0xb70	; 0xb70 <disk_initialize>
    5874:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    5876:	80 e0       	ldi	r24, 0x00	; 0
    5878:	65 e5       	ldi	r22, 0x55	; 85
    587a:	73 e3       	ldi	r23, 0x33	; 51
    587c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <f_mount>
	f_mount(1, &fso1);
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	63 e8       	ldi	r22, 0x83	; 131
    5884:	75 e3       	ldi	r23, 0x35	; 53
    5886:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <f_mount>
    //f_mount(2, &fso2);
	return tmp;
}
    588a:	81 2f       	mov	r24, r17
    588c:	1f 91       	pop	r17
    588e:	08 95       	ret

00005890 <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    5890:	1f 92       	push	r1
    5892:	0f 92       	push	r0
    5894:	0f b6       	in	r0, 0x3f	; 63
    5896:	0f 92       	push	r0
    5898:	0b b6       	in	r0, 0x3b	; 59
    589a:	0f 92       	push	r0
    589c:	11 24       	eor	r1, r1
    589e:	2f 93       	push	r18
    58a0:	3f 93       	push	r19
    58a2:	4f 93       	push	r20
    58a4:	5f 93       	push	r21
    58a6:	6f 93       	push	r22
    58a8:	7f 93       	push	r23
    58aa:	8f 93       	push	r24
    58ac:	9f 93       	push	r25
    58ae:	af 93       	push	r26
    58b0:	bf 93       	push	r27
    58b2:	ef 93       	push	r30
    58b4:	ff 93       	push	r31
	disk_timerproc();
    58b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <disk_timerproc>


	if(okToCharge){
    58ba:	80 91 d7 32 	lds	r24, 0x32D7
    58be:	88 23       	and	r24, r24
    58c0:	a9 f0       	breq	.+42     	; 0x58ec <__vector_47+0x5c>
		chargeCounter++;
    58c2:	80 91 d4 32 	lds	r24, 0x32D4
    58c6:	90 91 d5 32 	lds	r25, 0x32D5
    58ca:	01 96       	adiw	r24, 0x01	; 1
    58cc:	80 93 d4 32 	sts	0x32D4, r24
    58d0:	90 93 d5 32 	sts	0x32D5, r25
		if(chargeCounter >= 16200){
    58d4:	88 54       	subi	r24, 0x48	; 72
    58d6:	9f 43       	sbci	r25, 0x3F	; 63
    58d8:	48 f0       	brcs	.+18     	; 0x58ec <__vector_47+0x5c>
			chargeCounter=0;
    58da:	10 92 d4 32 	sts	0x32D4, r1
    58de:	10 92 d5 32 	sts	0x32D5, r1
			chargePercent++;
    58e2:	80 91 d3 32 	lds	r24, 0x32D3
    58e6:	8f 5f       	subi	r24, 0xFF	; 255
    58e8:	80 93 d3 32 	sts	0x32D3, r24
		}
	}
}
    58ec:	ff 91       	pop	r31
    58ee:	ef 91       	pop	r30
    58f0:	bf 91       	pop	r27
    58f2:	af 91       	pop	r26
    58f4:	9f 91       	pop	r25
    58f6:	8f 91       	pop	r24
    58f8:	7f 91       	pop	r23
    58fa:	6f 91       	pop	r22
    58fc:	5f 91       	pop	r21
    58fe:	4f 91       	pop	r20
    5900:	3f 91       	pop	r19
    5902:	2f 91       	pop	r18
    5904:	0f 90       	pop	r0
    5906:	0b be       	out	0x3b, r0	; 59
    5908:	0f 90       	pop	r0
    590a:	0f be       	out	0x3f, r0	; 63
    590c:	0f 90       	pop	r0
    590e:	1f 90       	pop	r1
    5910:	18 95       	reti

00005912 <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    5912:	0f 93       	push	r16
    5914:	df 93       	push	r29
    5916:	cf 93       	push	r28
    5918:	0f 92       	push	r0
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    591e:	2f b7       	in	r18, 0x3f	; 63
    5920:	29 83       	std	Y+1, r18	; 0x01
    cli();
    5922:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    5924:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    5926:	fc 01       	movw	r30, r24
    5928:	08 ed       	ldi	r16, 0xD8	; 216
    592a:	04 bf       	out	0x34, r16	; 52
    592c:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    592e:	89 81       	ldd	r24, Y+1	; 0x01
    5930:	8f bf       	out	0x3f, r24	; 63
}
    5932:	0f 90       	pop	r0
    5934:	cf 91       	pop	r28
    5936:	df 91       	pop	r29
    5938:	0f 91       	pop	r16
    593a:	08 95       	ret

0000593c <display_sendCommand>:

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    593c:	94 e0       	ldi	r25, 0x04	; 4
    593e:	e0 e2       	ldi	r30, 0x20	; 32
    5940:	f6 e0       	ldi	r31, 0x06	; 6
    5942:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5944:	e0 ec       	ldi	r30, 0xC0	; 192
    5946:	f8 e0       	ldi	r31, 0x08	; 8
    5948:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    594a:	80 91 c2 08 	lds	r24, 0x08C2
    594e:	87 ff       	sbrs	r24, 7
    5950:	fc cf       	rjmp	.-8      	; 0x594a <display_sendCommand+0xe>
}
    5952:	08 95       	ret

00005954 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5954:	94 e0       	ldi	r25, 0x04	; 4
    5956:	e0 e2       	ldi	r30, 0x20	; 32
    5958:	f6 e0       	ldi	r31, 0x06	; 6
    595a:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    595c:	e0 ec       	ldi	r30, 0xC0	; 192
    595e:	f8 e0       	ldi	r31, 0x08	; 8
    5960:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5962:	80 91 c2 08 	lds	r24, 0x08C2
    5966:	87 ff       	sbrs	r24, 7
    5968:	fc cf       	rjmp	.-8      	; 0x5962 <display_sendData+0xe>
}
    596a:	08 95       	ret

0000596c <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    596c:	80 6b       	ori	r24, 0xB0	; 176

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    596e:	94 e0       	ldi	r25, 0x04	; 4
    5970:	e0 e2       	ldi	r30, 0x20	; 32
    5972:	f6 e0       	ldi	r31, 0x06	; 6
    5974:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5976:	e0 ec       	ldi	r30, 0xC0	; 192
    5978:	f8 e0       	ldi	r31, 0x08	; 8
    597a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    597c:	80 91 c2 08 	lds	r24, 0x08C2
    5980:	87 ff       	sbrs	r24, 7
    5982:	fc cf       	rjmp	.-8      	; 0x597c <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    5984:	96 2f       	mov	r25, r22
    5986:	9f 70       	andi	r25, 0x0F	; 15

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5988:	84 e0       	ldi	r24, 0x04	; 4
    598a:	e0 e2       	ldi	r30, 0x20	; 32
    598c:	f6 e0       	ldi	r31, 0x06	; 6
    598e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5990:	e0 ec       	ldi	r30, 0xC0	; 192
    5992:	f8 e0       	ldi	r31, 0x08	; 8
    5994:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5996:	80 91 c2 08 	lds	r24, 0x08C2
    599a:	87 ff       	sbrs	r24, 7
    599c:	fc cf       	rjmp	.-8      	; 0x5996 <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    599e:	62 95       	swap	r22
    59a0:	6f 70       	andi	r22, 0x0F	; 15
    59a2:	60 61       	ori	r22, 0x10	; 16

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59a4:	84 e0       	ldi	r24, 0x04	; 4
    59a6:	e0 e2       	ldi	r30, 0x20	; 32
    59a8:	f6 e0       	ldi	r31, 0x06	; 6
    59aa:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59ac:	e0 ec       	ldi	r30, 0xC0	; 192
    59ae:	f8 e0       	ldi	r31, 0x08	; 8
    59b0:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59b2:	80 91 c2 08 	lds	r24, 0x08C2
    59b6:	87 ff       	sbrs	r24, 7
    59b8:	fc cf       	rjmp	.-8      	; 0x59b2 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    59ba:	08 95       	ret

000059bc <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	c0 e0       	ldi	r28, 0x00	; 0
    59d0:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    59d2:	56 e6       	ldi	r21, 0x66	; 102
    59d4:	c5 2e       	mov	r12, r21
    59d6:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    59d8:	40 e2       	ldi	r20, 0x20	; 32
    59da:	e4 2e       	mov	r14, r20
    59dc:	46 e0       	ldi	r20, 0x06	; 6
    59de:	f4 2e       	mov	r15, r20
    59e0:	34 e0       	ldi	r19, 0x04	; 4
    59e2:	b3 2e       	mov	r11, r19
	Display_SPI.DATA = dataByte;
    59e4:	00 ec       	ldi	r16, 0xC0	; 192
    59e6:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    59e8:	8c 2f       	mov	r24, r28
    59ea:	60 e0       	ldi	r22, 0x00	; 0
    59ec:	0e 94 b6 2c 	call	0x596c	; 0x596c <display_setCursor>
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    59f4:	cc 9d       	mul	r28, r12
    59f6:	a0 01       	movw	r20, r0
    59f8:	cd 9d       	mul	r28, r13
    59fa:	50 0d       	add	r21, r0
    59fc:	dc 9d       	mul	r29, r12
    59fe:	50 0d       	add	r21, r0
    5a00:	11 24       	eor	r1, r1
    5a02:	fa 01       	movw	r30, r20
    5a04:	e2 0f       	add	r30, r18
    5a06:	f3 1f       	adc	r31, r19
    5a08:	e1 5e       	subi	r30, 0xE1	; 225
    5a0a:	fb 4a       	sbci	r31, 0xAB	; 171
    5a0c:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a0e:	f7 01       	movw	r30, r14
    5a10:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    5a12:	f8 01       	movw	r30, r16
    5a14:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a16:	80 91 c2 08 	lds	r24, 0x08C2
    5a1a:	87 ff       	sbrs	r24, 7
    5a1c:	fc cf       	rjmp	.-8      	; 0x5a16 <display_writeBufferToScreen+0x5a>
    5a1e:	2f 5f       	subi	r18, 0xFF	; 255
    5a20:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a22:	26 36       	cpi	r18, 0x66	; 102
    5a24:	31 05       	cpc	r19, r1
    5a26:	69 f7       	brne	.-38     	; 0x5a02 <display_writeBufferToScreen+0x46>
    5a28:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a2a:	c8 30       	cpi	r28, 0x08	; 8
    5a2c:	d1 05       	cpc	r29, r1
    5a2e:	e1 f6       	brne	.-72     	; 0x59e8 <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    5a30:	df 91       	pop	r29
    5a32:	cf 91       	pop	r28
    5a34:	1f 91       	pop	r17
    5a36:	0f 91       	pop	r16
    5a38:	ff 90       	pop	r15
    5a3a:	ef 90       	pop	r14
    5a3c:	df 90       	pop	r13
    5a3e:	cf 90       	pop	r12
    5a40:	bf 90       	pop	r11
    5a42:	08 95       	ret

00005a44 <display_clearPage>:


void display_clearPage(uint8_t page) {
    5a44:	40 e0       	ldi	r20, 0x00	; 0
    5a46:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	26 e6       	ldi	r18, 0x66	; 102
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	82 9f       	mul	r24, r18
    5a50:	b0 01       	movw	r22, r0
    5a52:	83 9f       	mul	r24, r19
    5a54:	70 0d       	add	r23, r0
    5a56:	92 9f       	mul	r25, r18
    5a58:	70 0d       	add	r23, r0
    5a5a:	11 24       	eor	r1, r1
    5a5c:	8a e0       	ldi	r24, 0x0A	; 10
    5a5e:	fb 01       	movw	r30, r22
    5a60:	e4 0f       	add	r30, r20
    5a62:	f5 1f       	adc	r31, r21
    5a64:	e1 5e       	subi	r30, 0xE1	; 225
    5a66:	fb 4a       	sbci	r31, 0xAB	; 171
    5a68:	80 83       	st	Z, r24
    5a6a:	4f 5f       	subi	r20, 0xFF	; 255
    5a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a6e:	46 36       	cpi	r20, 0x66	; 102
    5a70:	51 05       	cpc	r21, r1
    5a72:	a9 f7       	brne	.-22     	; 0x5a5e <display_clearPage+0x1a>
}
    5a74:	08 95       	ret

00005a76 <display_clearBuffer>:


void display_clearBuffer() {
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5a7a:	66 e6       	ldi	r22, 0x66	; 102
    5a7c:	70 e0       	ldi	r23, 0x00	; 0
    5a7e:	0f c0       	rjmp	.+30     	; 0x5a9e <display_clearBuffer+0x28>
    5a80:	fa 01       	movw	r30, r20
    5a82:	e8 0f       	add	r30, r24
    5a84:	f9 1f       	adc	r31, r25
    5a86:	e1 5e       	subi	r30, 0xE1	; 225
    5a88:	fb 4a       	sbci	r31, 0xAB	; 171
    5a8a:	10 82       	st	Z, r1
    5a8c:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a8e:	86 36       	cpi	r24, 0x66	; 102
    5a90:	91 05       	cpc	r25, r1
    5a92:	b1 f7       	brne	.-20     	; 0x5a80 <display_clearBuffer+0xa>
    5a94:	2f 5f       	subi	r18, 0xFF	; 255
    5a96:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a98:	28 30       	cpi	r18, 0x08	; 8
    5a9a:	31 05       	cpc	r19, r1
    5a9c:	51 f0       	breq	.+20     	; 0x5ab2 <display_clearBuffer+0x3c>
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    5aa2:	26 9f       	mul	r18, r22
    5aa4:	a0 01       	movw	r20, r0
    5aa6:	27 9f       	mul	r18, r23
    5aa8:	50 0d       	add	r21, r0
    5aaa:	36 9f       	mul	r19, r22
    5aac:	50 0d       	add	r21, r0
    5aae:	11 24       	eor	r1, r1
    5ab0:	e7 cf       	rjmp	.-50     	; 0x5a80 <display_clearBuffer+0xa>
    5ab2:	08 95       	ret

00005ab4 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    5ab4:	cf 93       	push	r28
    5ab6:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5ab8:	a0 e4       	ldi	r26, 0x40	; 64
    5aba:	b6 e0       	ldi	r27, 0x06	; 6
    5abc:	88 e3       	ldi	r24, 0x38	; 56
    5abe:	54 96       	adiw	r26, 0x14	; 20
    5ac0:	8c 93       	st	X, r24
    5ac2:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5ac4:	40 e2       	ldi	r20, 0x20	; 32
    5ac6:	56 e0       	ldi	r21, 0x06	; 6
    5ac8:	fa 01       	movw	r30, r20
    5aca:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    5acc:	30 e1       	ldi	r19, 0x10	; 16
    5ace:	15 96       	adiw	r26, 0x05	; 5
    5ad0:	3c 93       	st	X, r19
    5ad2:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5ad4:	e0 e6       	ldi	r30, 0x60	; 96
    5ad6:	f6 e0       	ldi	r31, 0x06	; 6
    5ad8:	21 e0       	ldi	r18, 0x01	; 1
    5ada:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5adc:	25 83       	std	Z+5, r18	; 0x05
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	90 e9       	ldi	r25, 0x90	; 144
    5ae2:	ec 01       	movw	r28, r24
    5ae4:	21 97       	sbiw	r28, 0x01	; 1
    5ae6:	f1 f7       	brne	.-4      	; 0x5ae4 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5ae8:	26 83       	std	Z+6, r18	; 0x06
    5aea:	ec 01       	movw	r28, r24
    5aec:	21 97       	sbiw	r28, 0x01	; 1
    5aee:	f1 f7       	brne	.-4      	; 0x5aec <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5af0:	25 83       	std	Z+5, r18	; 0x05
    5af2:	01 97       	sbiw	r24, 0x01	; 1
    5af4:	f1 f7       	brne	.-4      	; 0x5af2 <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5af6:	8d ed       	ldi	r24, 0xDD	; 221
    5af8:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5afc:	80 eb       	ldi	r24, 0xB0	; 176
    5afe:	11 96       	adiw	r26, 0x01	; 1
    5b00:	8c 93       	st	X, r24
    5b02:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5b04:	84 e0       	ldi	r24, 0x04	; 4
    5b06:	fa 01       	movw	r30, r20
    5b08:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5b0a:	16 96       	adiw	r26, 0x06	; 6
    5b0c:	3c 93       	st	X, r19

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b0e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b10:	82 ee       	ldi	r24, 0xE2	; 226
    5b12:	e0 ec       	ldi	r30, 0xC0	; 192
    5b14:	f8 e0       	ldi	r31, 0x08	; 8
    5b16:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b18:	80 91 c2 08 	lds	r24, 0x08C2
    5b1c:	87 ff       	sbrs	r24, 7
    5b1e:	fc cf       	rjmp	.-8      	; 0x5b18 <display_init+0x64>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b20:	84 e0       	ldi	r24, 0x04	; 4
    5b22:	e0 e2       	ldi	r30, 0x20	; 32
    5b24:	f6 e0       	ldi	r31, 0x06	; 6
    5b26:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b28:	80 e4       	ldi	r24, 0x40	; 64
    5b2a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b2c:	f8 e0       	ldi	r31, 0x08	; 8
    5b2e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b30:	80 91 c2 08 	lds	r24, 0x08C2
    5b34:	87 ff       	sbrs	r24, 7
    5b36:	fc cf       	rjmp	.-8      	; 0x5b30 <display_init+0x7c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b38:	84 e0       	ldi	r24, 0x04	; 4
    5b3a:	e0 e2       	ldi	r30, 0x20	; 32
    5b3c:	f6 e0       	ldi	r31, 0x06	; 6
    5b3e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b40:	81 ea       	ldi	r24, 0xA1	; 161
    5b42:	e0 ec       	ldi	r30, 0xC0	; 192
    5b44:	f8 e0       	ldi	r31, 0x08	; 8
    5b46:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b48:	80 91 c2 08 	lds	r24, 0x08C2
    5b4c:	87 ff       	sbrs	r24, 7
    5b4e:	fc cf       	rjmp	.-8      	; 0x5b48 <display_init+0x94>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b50:	84 e0       	ldi	r24, 0x04	; 4
    5b52:	e0 e2       	ldi	r30, 0x20	; 32
    5b54:	f6 e0       	ldi	r31, 0x06	; 6
    5b56:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b58:	80 ec       	ldi	r24, 0xC0	; 192
    5b5a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b5c:	f8 e0       	ldi	r31, 0x08	; 8
    5b5e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b60:	80 91 c2 08 	lds	r24, 0x08C2
    5b64:	87 ff       	sbrs	r24, 7
    5b66:	fc cf       	rjmp	.-8      	; 0x5b60 <display_init+0xac>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b68:	84 e0       	ldi	r24, 0x04	; 4
    5b6a:	e0 e2       	ldi	r30, 0x20	; 32
    5b6c:	f6 e0       	ldi	r31, 0x06	; 6
    5b6e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b70:	84 ea       	ldi	r24, 0xA4	; 164
    5b72:	e0 ec       	ldi	r30, 0xC0	; 192
    5b74:	f8 e0       	ldi	r31, 0x08	; 8
    5b76:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b78:	80 91 c2 08 	lds	r24, 0x08C2
    5b7c:	87 ff       	sbrs	r24, 7
    5b7e:	fc cf       	rjmp	.-8      	; 0x5b78 <display_init+0xc4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b80:	84 e0       	ldi	r24, 0x04	; 4
    5b82:	e0 e2       	ldi	r30, 0x20	; 32
    5b84:	f6 e0       	ldi	r31, 0x06	; 6
    5b86:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b88:	86 ea       	ldi	r24, 0xA6	; 166
    5b8a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b8c:	f8 e0       	ldi	r31, 0x08	; 8
    5b8e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b90:	80 91 c2 08 	lds	r24, 0x08C2
    5b94:	87 ff       	sbrs	r24, 7
    5b96:	fc cf       	rjmp	.-8      	; 0x5b90 <display_init+0xdc>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b98:	84 e0       	ldi	r24, 0x04	; 4
    5b9a:	e0 e2       	ldi	r30, 0x20	; 32
    5b9c:	f6 e0       	ldi	r31, 0x06	; 6
    5b9e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ba0:	8f e2       	ldi	r24, 0x2F	; 47
    5ba2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba4:	f8 e0       	ldi	r31, 0x08	; 8
    5ba6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5ba8:	80 91 c2 08 	lds	r24, 0x08C2
    5bac:	87 ff       	sbrs	r24, 7
    5bae:	fc cf       	rjmp	.-8      	; 0x5ba8 <display_init+0xf4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bb0:	84 e0       	ldi	r24, 0x04	; 4
    5bb2:	e0 e2       	ldi	r30, 0x20	; 32
    5bb4:	f6 e0       	ldi	r31, 0x06	; 6
    5bb6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bb8:	87 e2       	ldi	r24, 0x27	; 39
    5bba:	e0 ec       	ldi	r30, 0xC0	; 192
    5bbc:	f8 e0       	ldi	r31, 0x08	; 8
    5bbe:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bc0:	80 91 c2 08 	lds	r24, 0x08C2
    5bc4:	87 ff       	sbrs	r24, 7
    5bc6:	fc cf       	rjmp	.-8      	; 0x5bc0 <display_init+0x10c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bc8:	84 e0       	ldi	r24, 0x04	; 4
    5bca:	e0 e2       	ldi	r30, 0x20	; 32
    5bcc:	f6 e0       	ldi	r31, 0x06	; 6
    5bce:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bd0:	8a ef       	ldi	r24, 0xFA	; 250
    5bd2:	e0 ec       	ldi	r30, 0xC0	; 192
    5bd4:	f8 e0       	ldi	r31, 0x08	; 8
    5bd6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bd8:	80 91 c2 08 	lds	r24, 0x08C2
    5bdc:	87 ff       	sbrs	r24, 7
    5bde:	fc cf       	rjmp	.-8      	; 0x5bd8 <display_init+0x124>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5be0:	84 e0       	ldi	r24, 0x04	; 4
    5be2:	e0 e2       	ldi	r30, 0x20	; 32
    5be4:	f6 e0       	ldi	r31, 0x06	; 6
    5be6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5be8:	80 e9       	ldi	r24, 0x90	; 144
    5bea:	e0 ec       	ldi	r30, 0xC0	; 192
    5bec:	f8 e0       	ldi	r31, 0x08	; 8
    5bee:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bf0:	80 91 c2 08 	lds	r24, 0x08C2
    5bf4:	87 ff       	sbrs	r24, 7
    5bf6:	fc cf       	rjmp	.-8      	; 0x5bf0 <display_init+0x13c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bf8:	84 e0       	ldi	r24, 0x04	; 4
    5bfa:	e0 e2       	ldi	r30, 0x20	; 32
    5bfc:	f6 e0       	ldi	r31, 0x06	; 6
    5bfe:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c00:	80 e4       	ldi	r24, 0x40	; 64
    5c02:	e0 ec       	ldi	r30, 0xC0	; 192
    5c04:	f8 e0       	ldi	r31, 0x08	; 8
    5c06:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c08:	80 91 c2 08 	lds	r24, 0x08C2
    5c0c:	87 ff       	sbrs	r24, 7
    5c0e:	fc cf       	rjmp	.-8      	; 0x5c08 <display_init+0x154>
    5c10:	8c ed       	ldi	r24, 0xDC	; 220
    5c12:	95 e0       	ldi	r25, 0x05	; 5
    5c14:	20 e7       	ldi	r18, 0x70	; 112
    5c16:	31 e0       	ldi	r19, 0x01	; 1
    5c18:	f9 01       	movw	r30, r18
    5c1a:	31 97       	sbiw	r30, 0x01	; 1
    5c1c:	f1 f7       	brne	.-4      	; 0x5c1a <display_init+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c20:	d9 f7       	brne	.-10     	; 0x5c18 <display_init+0x164>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c22:	84 e0       	ldi	r24, 0x04	; 4
    5c24:	e0 e2       	ldi	r30, 0x20	; 32
    5c26:	f6 e0       	ldi	r31, 0x06	; 6
    5c28:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c2a:	82 ea       	ldi	r24, 0xA2	; 162
    5c2c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c2e:	f8 e0       	ldi	r31, 0x08	; 8
    5c30:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c32:	80 91 c2 08 	lds	r24, 0x08C2
    5c36:	87 ff       	sbrs	r24, 7
    5c38:	fc cf       	rjmp	.-8      	; 0x5c32 <display_init+0x17e>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c3a:	84 e0       	ldi	r24, 0x04	; 4
    5c3c:	e0 e2       	ldi	r30, 0x20	; 32
    5c3e:	f6 e0       	ldi	r31, 0x06	; 6
    5c40:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c42:	81 e8       	ldi	r24, 0x81	; 129
    5c44:	e0 ec       	ldi	r30, 0xC0	; 192
    5c46:	f8 e0       	ldi	r31, 0x08	; 8
    5c48:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c4a:	80 91 c2 08 	lds	r24, 0x08C2
    5c4e:	87 ff       	sbrs	r24, 7
    5c50:	fc cf       	rjmp	.-8      	; 0x5c4a <display_init+0x196>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c52:	84 e0       	ldi	r24, 0x04	; 4
    5c54:	e0 e2       	ldi	r30, 0x20	; 32
    5c56:	f6 e0       	ldi	r31, 0x06	; 6
    5c58:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c5a:	88 e0       	ldi	r24, 0x08	; 8
    5c5c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c5e:	f8 e0       	ldi	r31, 0x08	; 8
    5c60:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c62:	80 91 c2 08 	lds	r24, 0x08C2
    5c66:	87 ff       	sbrs	r24, 7
    5c68:	fc cf       	rjmp	.-8      	; 0x5c62 <display_init+0x1ae>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c6a:	84 e0       	ldi	r24, 0x04	; 4
    5c6c:	e0 e2       	ldi	r30, 0x20	; 32
    5c6e:	f6 e0       	ldi	r31, 0x06	; 6
    5c70:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c72:	8f ea       	ldi	r24, 0xAF	; 175
    5c74:	e0 ec       	ldi	r30, 0xC0	; 192
    5c76:	f8 e0       	ldi	r31, 0x08	; 8
    5c78:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c7a:	80 91 c2 08 	lds	r24, 0x08C2
    5c7e:	87 ff       	sbrs	r24, 7
    5c80:	fc cf       	rjmp	.-8      	; 0x5c7a <display_init+0x1c6>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearBuffer();
    5c82:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
	display_writeBufferToScreen();
    5c86:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>

}
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	08 95       	ret

00005c90 <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5c90:	2f 92       	push	r2
    5c92:	3f 92       	push	r3
    5c94:	4f 92       	push	r4
    5c96:	5f 92       	push	r5
    5c98:	6f 92       	push	r6
    5c9a:	7f 92       	push	r7
    5c9c:	8f 92       	push	r8
    5c9e:	9f 92       	push	r9
    5ca0:	af 92       	push	r10
    5ca2:	bf 92       	push	r11
    5ca4:	cf 92       	push	r12
    5ca6:	df 92       	push	r13
    5ca8:	ef 92       	push	r14
    5caa:	ff 92       	push	r15
    5cac:	0f 93       	push	r16
    5cae:	1f 93       	push	r17
    5cb0:	df 93       	push	r29
    5cb2:	cf 93       	push	r28
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	28 97       	sbiw	r28, 0x08	; 8
    5cba:	cd bf       	out	0x3d, r28	; 61
    5cbc:	de bf       	out	0x3e, r29	; 62
    5cbe:	1c 01       	movw	r2, r24
    5cc0:	4c 83       	std	Y+4, r20	; 0x04
    5cc2:	2f 83       	std	Y+7, r18	; 0x07
    5cc4:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5cc6:	d9 01       	movw	r26, r18
    5cc8:	13 96       	adiw	r26, 0x03	; 3
    5cca:	bc 91       	ld	r27, X
    5ccc:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5cce:	f9 01       	movw	r30, r18
    5cd0:	f4 81       	ldd	r31, Z+4	; 0x04
    5cd2:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5cd4:	d9 01       	movw	r26, r18
    5cd6:	15 96       	adiw	r26, 0x05	; 5
    5cd8:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5cda:	bb 81       	ldd	r27, Y+3	; 0x03
    5cdc:	0b 2f       	mov	r16, r27
    5cde:	10 e0       	ldi	r17, 0x00	; 0
    5ce0:	c8 01       	movw	r24, r16
    5ce2:	07 96       	adiw	r24, 0x07	; 7
    5ce4:	e3 e0       	ldi	r30, 0x03	; 3
    5ce6:	95 95       	asr	r25
    5ce8:	87 95       	ror	r24
    5cea:	ea 95       	dec	r30
    5cec:	e1 f7       	brne	.-8      	; 0x5ce6 <display_putString+0x56>
    5cee:	89 83       	std	Y+1, r24	; 0x01
    5cf0:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5cf2:	e2 2e       	mov	r14, r18
    5cf4:	ff 24       	eor	r15, r15
    5cf6:	e6 e0       	ldi	r30, 0x06	; 6
    5cf8:	f0 e0       	ldi	r31, 0x00	; 0
    5cfa:	ee 0e       	add	r14, r30
    5cfc:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    5cfe:	46 2e       	mov	r4, r22
    5d00:	55 24       	eor	r5, r5
    5d02:	6f c0       	rjmp	.+222    	; 0x5de2 <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5d04:	7e 2f       	mov	r23, r30
    5d06:	fa 81       	ldd	r31, Y+2	; 0x02
    5d08:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5d0a:	af 81       	ldd	r26, Y+7	; 0x07
    5d0c:	b8 85       	ldd	r27, Y+8	; 0x08
    5d0e:	8c 91       	ld	r24, X
    5d10:	88 23       	and	r24, r24
    5d12:	39 f4       	brne	.+14     	; 0x5d22 <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5d14:	12 96       	adiw	r26, 0x02	; 2
    5d16:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5d18:	74 9f       	mul	r23, r20
    5d1a:	f0 01       	movw	r30, r0
    5d1c:	11 24       	eor	r1, r1
    5d1e:	36 96       	adiw	r30, 0x06	; 6
    5d20:	2b c0       	rjmp	.+86     	; 0x5d78 <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5d22:	ef 81       	ldd	r30, Y+7	; 0x07
    5d24:	f8 85       	ldd	r31, Y+8	; 0x08
    5d26:	e7 0f       	add	r30, r23
    5d28:	f1 1d       	adc	r31, r1
    5d2a:	46 81       	ldd	r20, Z+6	; 0x06
    5d2c:	ef 81       	ldd	r30, Y+7	; 0x07
    5d2e:	f8 85       	ldd	r31, Y+8	; 0x08
    5d30:	ed 83       	std	Y+5, r30	; 0x05
    5d32:	fe 83       	std	Y+6, r31	; 0x06
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	a0 e0       	ldi	r26, 0x00	; 0
    5d38:	b0 e0       	ldi	r27, 0x00	; 0
    5d3a:	0a c0       	rjmp	.+20     	; 0x5d50 <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5d3c:	ed 81       	ldd	r30, Y+5	; 0x05
    5d3e:	fe 81       	ldd	r31, Y+6	; 0x06
    5d40:	85 81       	ldd	r24, Z+5	; 0x05
    5d42:	f9 81       	ldd	r31, Y+1	; 0x01
    5d44:	f8 9f       	mul	r31, r24
    5d46:	c0 01       	movw	r24, r0
    5d48:	11 24       	eor	r1, r1
    5d4a:	a8 0f       	add	r26, r24
    5d4c:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5d4e:	5f 5f       	subi	r21, 0xFF	; 255
    5d50:	8d 81       	ldd	r24, Y+5	; 0x05
    5d52:	9e 81       	ldd	r25, Y+6	; 0x06
    5d54:	01 96       	adiw	r24, 0x01	; 1
    5d56:	8d 83       	std	Y+5, r24	; 0x05
    5d58:	9e 83       	std	Y+6, r25	; 0x06
    5d5a:	57 17       	cp	r21, r23
    5d5c:	78 f3       	brcs	.-34     	; 0x5d3c <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d5e:	84 2f       	mov	r24, r20
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	82 9f       	mul	r24, r18
    5d64:	f0 01       	movw	r30, r0
    5d66:	83 9f       	mul	r24, r19
    5d68:	f0 0d       	add	r31, r0
    5d6a:	92 9f       	mul	r25, r18
    5d6c:	f0 0d       	add	r31, r0
    5d6e:	11 24       	eor	r1, r1
    5d70:	ee 0d       	add	r30, r14
    5d72:	ff 1d       	adc	r31, r15
    5d74:	ea 0f       	add	r30, r26
    5d76:	fb 1f       	adc	r31, r27
    5d78:	af 81       	ldd	r26, Y+7	; 0x07
    5d7a:	b8 85       	ldd	r27, Y+8	; 0x08
    5d7c:	ae 0f       	add	r26, r30
    5d7e:	bf 1f       	adc	r27, r31
    5d80:	50 e0       	ldi	r21, 0x00	; 0
    5d82:	16 c0       	rjmp	.+44     	; 0x5db0 <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5d84:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5d86:	9b 81       	ldd	r25, Y+3	; 0x03
    5d88:	99 30       	cpi	r25, 0x09	; 9
    5d8a:	50 f0       	brcs	.+20     	; 0x5da0 <display_putString+0x110>
    5d8c:	08 15       	cp	r16, r8
    5d8e:	19 05       	cpc	r17, r9
    5d90:	3c f4       	brge	.+14     	; 0x5da0 <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	06 2c       	mov	r0, r6
    5d96:	02 c0       	rjmp	.+4      	; 0x5d9c <display_putString+0x10c>
    5d98:	95 95       	asr	r25
    5d9a:	87 95       	ror	r24
    5d9c:	0a 94       	dec	r0
    5d9e:	e2 f7       	brpl	.-8      	; 0x5d98 <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5da0:	f5 01       	movw	r30, r10
    5da2:	e7 0f       	add	r30, r23
    5da4:	f1 1d       	adc	r31, r1
    5da6:	e1 5e       	subi	r30, 0xE1	; 225
    5da8:	fb 4a       	sbci	r31, 0xAB	; 171
    5daa:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5dac:	5f 5f       	subi	r21, 0xFF	; 255
    5dae:	11 96       	adiw	r26, 0x01	; 1
    5db0:	75 2f       	mov	r23, r21
    5db2:	76 0f       	add	r23, r22
    5db4:	54 17       	cp	r21, r20
    5db6:	30 f3       	brcs	.-52     	; 0x5d84 <display_putString+0xf4>
    5db8:	84 2f       	mov	r24, r20
    5dba:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5dbc:	85 36       	cpi	r24, 0x65	; 101
    5dbe:	31 f0       	breq	.+12     	; 0x5dcc <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    5dc0:	f5 01       	movw	r30, r10
    5dc2:	e8 0f       	add	r30, r24
    5dc4:	f1 1d       	adc	r31, r1
    5dc6:	e0 5e       	subi	r30, 0xE0	; 224
    5dc8:	fb 4a       	sbci	r31, 0xAB	; 171
    5dca:	10 82       	st	Z, r1
 		}
		offset++;
    5dcc:	68 2f       	mov	r22, r24
    5dce:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    5dd0:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5dd2:	f1 01       	movw	r30, r2
    5dd4:	ed 0d       	add	r30, r13
    5dd6:	f1 1d       	adc	r31, r1
    5dd8:	e0 81       	ld	r30, Z
    5dda:	ee 23       	and	r30, r30
    5ddc:	09 f0       	breq	.+2      	; 0x5de0 <display_putString+0x150>
    5dde:	92 cf       	rjmp	.-220    	; 0x5d04 <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5de0:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5de2:	2c 2d       	mov	r18, r12
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	c9 01       	movw	r24, r18
    5de8:	73 e0       	ldi	r23, 0x03	; 3
    5dea:	88 0f       	add	r24, r24
    5dec:	99 1f       	adc	r25, r25
    5dee:	7a 95       	dec	r23
    5df0:	e1 f7       	brne	.-8      	; 0x5dea <display_putString+0x15a>
    5df2:	80 17       	cp	r24, r16
    5df4:	91 07       	cpc	r25, r17
    5df6:	e4 f4       	brge	.+56     	; 0x5e30 <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5df8:	2f 5f       	subi	r18, 0xFF	; 255
    5dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5dfc:	49 01       	movw	r8, r18
    5dfe:	63 e0       	ldi	r22, 0x03	; 3
    5e00:	88 0c       	add	r8, r8
    5e02:	99 1c       	adc	r9, r9
    5e04:	6a 95       	dec	r22
    5e06:	e1 f7       	brne	.-8      	; 0x5e00 <display_putString+0x170>
    5e08:	21 50       	subi	r18, 0x01	; 1
    5e0a:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5e0c:	34 01       	movw	r6, r8
    5e0e:	60 1a       	sub	r6, r16
    5e10:	71 0a       	sbc	r7, r17
    5e12:	6c 81       	ldd	r22, Y+4	; 0x04
    5e14:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5e16:	c9 01       	movw	r24, r18
    5e18:	84 0d       	add	r24, r4
    5e1a:	95 1d       	adc	r25, r5
    5e1c:	a6 e6       	ldi	r26, 0x66	; 102
    5e1e:	b0 e0       	ldi	r27, 0x00	; 0
    5e20:	8a 9f       	mul	r24, r26
    5e22:	50 01       	movw	r10, r0
    5e24:	8b 9f       	mul	r24, r27
    5e26:	b0 0c       	add	r11, r0
    5e28:	9a 9f       	mul	r25, r26
    5e2a:	b0 0c       	add	r11, r0
    5e2c:	11 24       	eor	r1, r1
    5e2e:	d1 cf       	rjmp	.-94     	; 0x5dd2 <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    5e30:	28 96       	adiw	r28, 0x08	; 8
    5e32:	cd bf       	out	0x3d, r28	; 61
    5e34:	de bf       	out	0x3e, r29	; 62
    5e36:	cf 91       	pop	r28
    5e38:	df 91       	pop	r29
    5e3a:	1f 91       	pop	r17
    5e3c:	0f 91       	pop	r16
    5e3e:	ff 90       	pop	r15
    5e40:	ef 90       	pop	r14
    5e42:	df 90       	pop	r13
    5e44:	cf 90       	pop	r12
    5e46:	bf 90       	pop	r11
    5e48:	af 90       	pop	r10
    5e4a:	9f 90       	pop	r9
    5e4c:	8f 90       	pop	r8
    5e4e:	7f 90       	pop	r7
    5e50:	6f 90       	pop	r6
    5e52:	5f 90       	pop	r5
    5e54:	4f 90       	pop	r4
    5e56:	3f 90       	pop	r3
    5e58:	2f 90       	pop	r2
    5e5a:	08 95       	ret

00005e5c <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    5e5c:	28 2f       	mov	r18, r24
    5e5e:	26 95       	lsr	r18
    5e60:	26 95       	lsr	r18
    5e62:	26 95       	lsr	r18
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	a8 2f       	mov	r26, r24
    5e68:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    5e6a:	44 23       	and	r20, r20
    5e6c:	d9 f0       	breq	.+54     	; 0x5ea4 <display_drawPixel+0x48>
    5e6e:	30 e0       	ldi	r19, 0x00	; 0
    5e70:	86 e6       	ldi	r24, 0x66	; 102
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	28 9f       	mul	r18, r24
    5e76:	f0 01       	movw	r30, r0
    5e78:	29 9f       	mul	r18, r25
    5e7a:	f0 0d       	add	r31, r0
    5e7c:	38 9f       	mul	r19, r24
    5e7e:	f0 0d       	add	r31, r0
    5e80:	11 24       	eor	r1, r1
    5e82:	e6 0f       	add	r30, r22
    5e84:	f7 1f       	adc	r31, r23
    5e86:	e1 5e       	subi	r30, 0xE1	; 225
    5e88:	fb 4a       	sbci	r31, 0xAB	; 171
    5e8a:	20 81       	ld	r18, Z
    5e8c:	a7 70       	andi	r26, 0x07	; 7
    5e8e:	b0 70       	andi	r27, 0x00	; 0
    5e90:	81 e0       	ldi	r24, 0x01	; 1
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	02 c0       	rjmp	.+4      	; 0x5e9a <display_drawPixel+0x3e>
    5e96:	88 0f       	add	r24, r24
    5e98:	99 1f       	adc	r25, r25
    5e9a:	aa 95       	dec	r26
    5e9c:	e2 f7       	brpl	.-8      	; 0x5e96 <display_drawPixel+0x3a>
    5e9e:	28 2b       	or	r18, r24
    5ea0:	20 83       	st	Z, r18
    5ea2:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5ea4:	30 e0       	ldi	r19, 0x00	; 0
    5ea6:	86 e6       	ldi	r24, 0x66	; 102
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	28 9f       	mul	r18, r24
    5eac:	f0 01       	movw	r30, r0
    5eae:	29 9f       	mul	r18, r25
    5eb0:	f0 0d       	add	r31, r0
    5eb2:	38 9f       	mul	r19, r24
    5eb4:	f0 0d       	add	r31, r0
    5eb6:	11 24       	eor	r1, r1
    5eb8:	e6 0f       	add	r30, r22
    5eba:	f7 1f       	adc	r31, r23
    5ebc:	e1 5e       	subi	r30, 0xE1	; 225
    5ebe:	fb 4a       	sbci	r31, 0xAB	; 171
    5ec0:	20 81       	ld	r18, Z
    5ec2:	a7 70       	andi	r26, 0x07	; 7
    5ec4:	b0 70       	andi	r27, 0x00	; 0
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	02 c0       	rjmp	.+4      	; 0x5ed0 <display_drawPixel+0x74>
    5ecc:	88 0f       	add	r24, r24
    5ece:	99 1f       	adc	r25, r25
    5ed0:	aa 95       	dec	r26
    5ed2:	e2 f7       	brpl	.-8      	; 0x5ecc <display_drawPixel+0x70>
    5ed4:	80 95       	com	r24
    5ed6:	82 23       	and	r24, r18
    5ed8:	80 83       	st	Z, r24
    5eda:	08 95       	ret

00005edc <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5edc:	dc 01       	movw	r26, r24
    5ede:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    5ee0:	90 81       	ld	r25, Z
	*val2 = *val1;
    5ee2:	8c 91       	ld	r24, X
    5ee4:	80 83       	st	Z, r24
	*val1 = tempVal;
    5ee6:	9c 93       	st	X, r25
}
    5ee8:	08 95       	ret

00005eea <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5eea:	df 92       	push	r13
    5eec:	ef 92       	push	r14
    5eee:	ff 92       	push	r15
    5ef0:	0f 93       	push	r16
    5ef2:	1f 93       	push	r17
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	f8 2e       	mov	r15, r24
    5efa:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5efc:	84 17       	cp	r24, r20
    5efe:	d9 f4       	brne	.+54     	; 0x5f36 <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    5f00:	26 17       	cp	r18, r22
    5f02:	18 f4       	brcc	.+6      	; 0x5f0a <display_drawLine+0x20>
    5f04:	dd 24       	eor	r13, r13
    5f06:	da 94       	dec	r13
    5f08:	02 c0       	rjmp	.+4      	; 0x5f0e <display_drawLine+0x24>
    5f0a:	dd 24       	eor	r13, r13
    5f0c:	d3 94       	inc	r13
		j = column1;
    5f0e:	1e 2d       	mov	r17, r14
		while (j != column2) {
    5f10:	c2 2f       	mov	r28, r18
    5f12:	d0 e0       	ldi	r29, 0x00	; 0
    5f14:	06 c0       	rjmp	.+12     	; 0x5f22 <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5f16:	8f 2d       	mov	r24, r15
    5f18:	61 2f       	mov	r22, r17
    5f1a:	40 2f       	mov	r20, r16
    5f1c:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
    5f20:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    5f22:	81 2f       	mov	r24, r17
    5f24:	99 27       	eor	r25, r25
    5f26:	87 fd       	sbrc	r24, 7
    5f28:	90 95       	com	r25
    5f2a:	8c 17       	cp	r24, r28
    5f2c:	9d 07       	cpc	r25, r29
    5f2e:	99 f7       	brne	.-26     	; 0x5f16 <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    5f30:	8f 2d       	mov	r24, r15
    5f32:	61 2f       	mov	r22, r17
    5f34:	1c c0       	rjmp	.+56     	; 0x5f6e <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    5f36:	62 17       	cp	r22, r18
    5f38:	e9 f4       	brne	.+58     	; 0x5f74 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    5f3a:	48 17       	cp	r20, r24
    5f3c:	18 f4       	brcc	.+6      	; 0x5f44 <display_drawLine+0x5a>
    5f3e:	dd 24       	eor	r13, r13
    5f40:	da 94       	dec	r13
    5f42:	02 c0       	rjmp	.+4      	; 0x5f48 <display_drawLine+0x5e>
    5f44:	dd 24       	eor	r13, r13
    5f46:	d3 94       	inc	r13
		i = row1;
    5f48:	1f 2d       	mov	r17, r15
		while(i != row2) {
    5f4a:	c4 2f       	mov	r28, r20
    5f4c:	d0 e0       	ldi	r29, 0x00	; 0
    5f4e:	06 c0       	rjmp	.+12     	; 0x5f5c <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    5f50:	81 2f       	mov	r24, r17
    5f52:	6e 2d       	mov	r22, r14
    5f54:	40 2f       	mov	r20, r16
    5f56:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
    5f5a:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    5f5c:	81 2f       	mov	r24, r17
    5f5e:	99 27       	eor	r25, r25
    5f60:	87 fd       	sbrc	r24, 7
    5f62:	90 95       	com	r25
    5f64:	8c 17       	cp	r24, r28
    5f66:	9d 07       	cpc	r25, r29
    5f68:	99 f7       	brne	.-26     	; 0x5f50 <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    5f6a:	81 2f       	mov	r24, r17
    5f6c:	6e 2d       	mov	r22, r14
    5f6e:	40 2f       	mov	r20, r16
    5f70:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
			
			
		}
		*/
	}
}
    5f74:	df 91       	pop	r29
    5f76:	cf 91       	pop	r28
    5f78:	1f 91       	pop	r17
    5f7a:	0f 91       	pop	r16
    5f7c:	ff 90       	pop	r15
    5f7e:	ef 90       	pop	r14
    5f80:	df 90       	pop	r13
    5f82:	08 95       	ret

00005f84 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5f84:	6f 92       	push	r6
    5f86:	7f 92       	push	r7
    5f88:	8f 92       	push	r8
    5f8a:	9f 92       	push	r9
    5f8c:	bf 92       	push	r11
    5f8e:	cf 92       	push	r12
    5f90:	df 92       	push	r13
    5f92:	ef 92       	push	r14
    5f94:	ff 92       	push	r15
    5f96:	0f 93       	push	r16
    5f98:	1f 93       	push	r17
    5f9a:	cf 93       	push	r28
    5f9c:	df 93       	push	r29
    5f9e:	18 2f       	mov	r17, r24
    5fa0:	b6 2e       	mov	r11, r22
    5fa2:	d2 2e       	mov	r13, r18
    5fa4:	d6 0e       	add	r13, r22
    5fa6:	f4 2e       	mov	r15, r20
    5fa8:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5faa:	00 23       	and	r16, r16
    5fac:	c1 f4       	brne	.+48     	; 0x5fde <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    5fae:	41 2f       	mov	r20, r17
    5fb0:	2d 2d       	mov	r18, r13
    5fb2:	0c 2d       	mov	r16, r12
    5fb4:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5fb8:	8f 2d       	mov	r24, r15
    5fba:	6b 2d       	mov	r22, r11
    5fbc:	4f 2d       	mov	r20, r15
    5fbe:	2d 2d       	mov	r18, r13
    5fc0:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5fc4:	81 2f       	mov	r24, r17
    5fc6:	6b 2d       	mov	r22, r11
    5fc8:	4f 2d       	mov	r20, r15
    5fca:	2b 2d       	mov	r18, r11
    5fcc:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    5fd0:	81 2f       	mov	r24, r17
    5fd2:	6d 2d       	mov	r22, r13
    5fd4:	4f 2d       	mov	r20, r15
    5fd6:	2d 2d       	mov	r18, r13
    5fd8:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
    5fdc:	63 c0       	rjmp	.+198    	; 0x60a4 <__stack+0xa5>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    5fde:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    5fe0:	08 2f       	mov	r16, r24
    5fe2:	10 e0       	ldi	r17, 0x00	; 0
    5fe4:	04 0f       	add	r16, r20
    5fe6:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    5fe8:	cf 2d       	mov	r28, r15
    5fea:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5fec:	a7 e0       	ldi	r26, 0x07	; 7
    5fee:	b0 e0       	ldi	r27, 0x00	; 0
    5ff0:	ac 1b       	sub	r26, r28
    5ff2:	bd 0b       	sbc	r27, r29
    5ff4:	2f ef       	ldi	r18, 0xFF	; 255
    5ff6:	82 2e       	mov	r8, r18
    5ff8:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5ffa:	96 e6       	ldi	r25, 0x66	; 102
    5ffc:	69 2e       	mov	r6, r25
    5ffe:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    6000:	88 e0       	ldi	r24, 0x08	; 8
    6002:	c8 2e       	mov	r12, r24
    6004:	49 c0       	rjmp	.+146    	; 0x6098 <__stack+0x99>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    6006:	f7 e0       	ldi	r31, 0x07	; 7
    6008:	ff 2e       	mov	r15, r31
    600a:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    600c:	6f 2d       	mov	r22, r15
    600e:	70 e0       	ldi	r23, 0x00	; 0
    6010:	c9 01       	movw	r24, r18
    6012:	07 96       	adiw	r24, 0x07	; 7
    6014:	86 1b       	sub	r24, r22
    6016:	97 0b       	sbc	r25, r23
    6018:	c8 17       	cp	r28, r24
    601a:	d9 07       	cpc	r29, r25
    601c:	44 f0       	brlt	.+16     	; 0x602e <__stack+0x2f>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    601e:	c4 01       	movw	r24, r8
    6020:	0f 2c       	mov	r0, r15
    6022:	02 c0       	rjmp	.+4      	; 0x6028 <__stack+0x29>
    6024:	88 0f       	add	r24, r24
    6026:	99 1f       	adc	r25, r25
    6028:	0a 94       	dec	r0
    602a:	e2 f7       	brpl	.-8      	; 0x6024 <__stack+0x25>
    602c:	08 c0       	rjmp	.+16     	; 0x603e <__stack+0x3f>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    602e:	2a 0f       	add	r18, r26
    6030:	3b 1f       	adc	r19, r27
    6032:	c4 01       	movw	r24, r8
    6034:	02 c0       	rjmp	.+4      	; 0x603a <__stack+0x3b>
    6036:	95 95       	asr	r25
    6038:	87 95       	ror	r24
    603a:	2a 95       	dec	r18
    603c:	e2 f7       	brpl	.-8      	; 0x6036 <__stack+0x37>
    603e:	28 2f       	mov	r18, r24
			}
			page = i/8;
    6040:	85 2f       	mov	r24, r21
    6042:	86 95       	lsr	r24
    6044:	86 95       	lsr	r24
    6046:	86 95       	lsr	r24
    6048:	3b 2d       	mov	r19, r11
    604a:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    604c:	86 9d       	mul	r24, r6
    604e:	b0 01       	movw	r22, r0
    6050:	87 9d       	mul	r24, r7
    6052:	70 0d       	add	r23, r0
    6054:	96 9d       	mul	r25, r6
    6056:	70 0d       	add	r23, r0
    6058:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    605a:	42 2f       	mov	r20, r18
    605c:	40 95       	com	r20
    605e:	17 c0       	rjmp	.+46     	; 0x608e <__stack+0x8f>
    6060:	e3 2f       	mov	r30, r19
    6062:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    6064:	ee 20       	and	r14, r14
    6066:	69 f0       	breq	.+26     	; 0x6082 <__stack+0x83>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    6068:	e6 0f       	add	r30, r22
    606a:	f7 1f       	adc	r31, r23
    606c:	e1 5e       	subi	r30, 0xE1	; 225
    606e:	fb 4a       	sbci	r31, 0xAB	; 171
    6070:	80 81       	ld	r24, Z
    6072:	90 81       	ld	r25, Z
    6074:	82 23       	and	r24, r18
    6076:	80 95       	com	r24
    6078:	82 23       	and	r24, r18
    607a:	94 23       	and	r25, r20
    607c:	89 2b       	or	r24, r25
    607e:	80 83       	st	Z, r24
    6080:	05 c0       	rjmp	.+10     	; 0x608c <__stack+0x8d>
				} else {
					displayBuffer[page][j] = byteOut;	
    6082:	e6 0f       	add	r30, r22
    6084:	f7 1f       	adc	r31, r23
    6086:	e1 5e       	subi	r30, 0xE1	; 225
    6088:	fb 4a       	sbci	r31, 0xAB	; 171
    608a:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    608c:	3f 5f       	subi	r19, 0xFF	; 255
    608e:	d3 16       	cp	r13, r19
    6090:	38 f7       	brcc	.-50     	; 0x6060 <__stack+0x61>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    6092:	8c 2d       	mov	r24, r12
    6094:	8f 19       	sub	r24, r15
    6096:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    6098:	25 2f       	mov	r18, r21
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	02 17       	cp	r16, r18
    609e:	13 07       	cpc	r17, r19
    60a0:	0c f0       	brlt	.+2      	; 0x60a4 <__stack+0xa5>
    60a2:	b1 cf       	rjmp	.-158    	; 0x6006 <__stack+0x7>
			i += (8 - remainder);	
		}
	
	}
			
}
    60a4:	df 91       	pop	r29
    60a6:	cf 91       	pop	r28
    60a8:	1f 91       	pop	r17
    60aa:	0f 91       	pop	r16
    60ac:	ff 90       	pop	r15
    60ae:	ef 90       	pop	r14
    60b0:	df 90       	pop	r13
    60b2:	cf 90       	pop	r12
    60b4:	bf 90       	pop	r11
    60b6:	9f 90       	pop	r9
    60b8:	8f 90       	pop	r8
    60ba:	7f 90       	pop	r7
    60bc:	6f 90       	pop	r6
    60be:	08 95       	ret

000060c0 <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    60c0:	88 e0       	ldi	r24, 0x08	; 8
    60c2:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    60c6:	80 ec       	ldi	r24, 0xC0	; 192
    60c8:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    60cc:	e0 e0       	ldi	r30, 0x00	; 0
    60ce:	f8 e0       	ldi	r31, 0x08	; 8
    60d0:	8f ef       	ldi	r24, 0xFF	; 255
    60d2:	9f ef       	ldi	r25, 0xFF	; 255
    60d4:	86 a3       	std	Z+38, r24	; 0x26
    60d6:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    60d8:	80 81       	ld	r24, Z
    60da:	80 7f       	andi	r24, 0xF0	; 240
    60dc:	84 60       	ori	r24, 0x04	; 4
    60de:	80 83       	st	Z, r24
  
	
	
}
    60e0:	08 95       	ret

000060e2 <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    60e2:	f8 94       	cli
  UNIX_time = time;
    60e4:	60 93 d8 32 	sts	0x32D8, r22
    60e8:	70 93 d9 32 	sts	0x32D9, r23
    60ec:	80 93 da 32 	sts	0x32DA, r24
    60f0:	90 93 db 32 	sts	0x32DB, r25
  sei();
    60f4:	78 94       	sei
}
    60f6:	08 95       	ret

000060f8 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    60f8:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    60fa:	20 91 60 08 	lds	r18, 0x0860
    60fe:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    6102:	60 91 20 08 	lds	r22, 0x0820
    6106:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    610a:	80 91 60 08 	lds	r24, 0x0860
    610e:	90 91 61 08 	lds	r25, 0x0861
    6112:	28 17       	cp	r18, r24
    6114:	39 07       	cpc	r19, r25
    6116:	41 f0       	breq	.+16     	; 0x6128 <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    6118:	20 91 60 08 	lds	r18, 0x0860
    611c:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    6120:	60 91 20 08 	lds	r22, 0x0820
    6124:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    6128:	78 94       	sei
    612a:	40 e0       	ldi	r20, 0x00	; 0
    612c:	50 e0       	ldi	r21, 0x00	; 0
    612e:	a9 01       	movw	r20, r18
    6130:	33 27       	eor	r19, r19
    6132:	22 27       	eor	r18, r18
    6134:	cb 01       	movw	r24, r22
    6136:	a0 e0       	ldi	r26, 0x00	; 0
    6138:	b0 e0       	ldi	r27, 0x00	; 0
    613a:	28 0f       	add	r18, r24
    613c:	39 1f       	adc	r19, r25
    613e:	4a 1f       	adc	r20, r26
    6140:	5b 1f       	adc	r21, r27
  return result;
}
    6142:	b9 01       	movw	r22, r18
    6144:	ca 01       	movw	r24, r20
    6146:	08 95       	ret

00006148 <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6148:	e0 e0       	ldi	r30, 0x00	; 0
    614a:	f2 e0       	ldi	r31, 0x02	; 2
    614c:	92 e0       	ldi	r25, 0x02	; 2
    614e:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    6150:	8a e2       	ldi	r24, 0x2A	; 42
    6152:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6154:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    6156:	83 e2       	ldi	r24, 0x23	; 35
    6158:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    615a:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    615c:	88 e3       	ldi	r24, 0x38	; 56
    615e:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    6160:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    6162:	81 e3       	ldi	r24, 0x31	; 49
    6164:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    6166:	84 81       	ldd	r24, Z+4	; 0x04
    6168:	88 7f       	andi	r24, 0xF8	; 248
    616a:	84 60       	ori	r24, 0x04	; 4
    616c:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    616e:	80 e1       	ldi	r24, 0x10	; 16
    6170:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    6172:	83 81       	ldd	r24, Z+3	; 0x03
    6174:	80 6c       	ori	r24, 0xC0	; 192
    6176:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    6178:	81 81       	ldd	r24, Z+1	; 0x01
    617a:	88 61       	ori	r24, 0x18	; 24
    617c:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    617e:	80 a1       	ldd	r24, Z+32	; 0x20
    6180:	80 68       	ori	r24, 0x80	; 128
    6182:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    6184:	80 a5       	ldd	r24, Z+40	; 0x28
    6186:	80 68       	ori	r24, 0x80	; 128
    6188:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    618a:	80 ad       	ldd	r24, Z+56	; 0x38
    618c:	80 68       	ori	r24, 0x80	; 128
    618e:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    6190:	80 a9       	ldd	r24, Z+48	; 0x30
    6192:	80 68       	ori	r24, 0x80	; 128
    6194:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    619a:	e0 e4       	ldi	r30, 0x40	; 64
    619c:	f9 e0       	ldi	r31, 0x09	; 9
    619e:	80 e4       	ldi	r24, 0x40	; 64
    61a0:	98 e3       	ldi	r25, 0x38	; 56
    61a2:	86 a3       	std	Z+38, r24	; 0x26
    61a4:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    61a6:	80 81       	ld	r24, Z
    61a8:	80 7f       	andi	r24, 0xF0	; 240
    61aa:	87 60       	ori	r24, 0x07	; 7
    61ac:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61ae:	86 81       	ldd	r24, Z+6	; 0x06
    61b0:	83 60       	ori	r24, 0x03	; 3
    61b2:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    61b4:	e0 e0       	ldi	r30, 0x00	; 0
    61b6:	fb e0       	ldi	r31, 0x0B	; 11
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	91 e0       	ldi	r25, 0x01	; 1
    61bc:	86 a3       	std	Z+38, r24	; 0x26
    61be:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    61c0:	80 81       	ld	r24, Z
    61c2:	80 7f       	andi	r24, 0xF0	; 240
    61c4:	84 60       	ori	r24, 0x04	; 4
    61c6:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61c8:	86 81       	ldd	r24, Z+6	; 0x06
    61ca:	83 60       	ori	r24, 0x03	; 3
    61cc:	86 83       	std	Z+6, r24	; 0x06

}
    61ce:	08 95       	ret

000061d0 <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    61d0:	e0 e0       	ldi	r30, 0x00	; 0
    61d2:	f2 e0       	ldi	r31, 0x02	; 2
    61d4:	60 89       	ldd	r22, Z+16	; 0x10
    61d6:	71 89       	ldd	r23, Z+17	; 0x11
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    61dc:	2a ea       	ldi	r18, 0xAA	; 170
    61de:	35 e2       	ldi	r19, 0x25	; 37
    61e0:	43 e0       	ldi	r20, 0x03	; 3
    61e2:	50 e0       	ldi	r21, 0x00	; 0
    61e4:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    61e8:	67 5f       	subi	r22, 0xF7	; 247
    61ea:	7a 40       	sbci	r23, 0x0A	; 10
    61ec:	88 4e       	sbci	r24, 0xE8	; 232
    61ee:	91 40       	sbci	r25, 0x01	; 1
    61f0:	21 e5       	ldi	r18, 0x51	; 81
    61f2:	37 e7       	ldi	r19, 0x77	; 119
    61f4:	45 e0       	ldi	r20, 0x05	; 5
    61f6:	50 e0       	ldi	r21, 0x00	; 0
    61f8:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    61fc:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    61fe:	08 95       	ret

00006200 <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    6200:	e0 e0       	ldi	r30, 0x00	; 0
    6202:	f2 e0       	ldi	r31, 0x02	; 2
    6204:	62 89       	ldd	r22, Z+18	; 0x12
    6206:	73 89       	ldd	r23, Z+19	; 0x13
    6208:	80 e0       	ldi	r24, 0x00	; 0
    620a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    620c:	27 ec       	ldi	r18, 0xC7	; 199
    620e:	3d e1       	ldi	r19, 0x1D	; 29
    6210:	40 e0       	ldi	r20, 0x00	; 0
    6212:	50 e0       	ldi	r21, 0x00	; 0
    6214:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    6218:	6c 59       	subi	r22, 0x9C	; 156
    621a:	7c 41       	sbci	r23, 0x1C	; 28
    621c:	8b 41       	sbci	r24, 0x1B	; 27
    621e:	90 40       	sbci	r25, 0x00	; 0
    6220:	28 ed       	ldi	r18, 0xD8	; 216
    6222:	3f e3       	ldi	r19, 0x3F	; 63
    6224:	41 e0       	ldi	r20, 0x01	; 1
    6226:	50 e0       	ldi	r21, 0x00	; 0
    6228:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    622c:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    622e:	08 95       	ret

00006230 <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    6230:	e0 e0       	ldi	r30, 0x00	; 0
    6232:	f2 e0       	ldi	r31, 0x02	; 2
    6234:	86 89       	ldd	r24, Z+22	; 0x16
    6236:	97 89       	ldd	r25, Z+23	; 0x17
    6238:	f4 e0       	ldi	r31, 0x04	; 4
    623a:	96 95       	lsr	r25
    623c:	87 95       	ror	r24
    623e:	fa 95       	dec	r31
    6240:	e1 f7       	brne	.-8      	; 0x623a <Sensors_ReadMicrophone+0xa>
}
    6242:	08 95       	ret

00006244 <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    6244:	e0 e0       	ldi	r30, 0x00	; 0
    6246:	f2 e0       	ldi	r31, 0x02	; 2
    6248:	64 89       	ldd	r22, Z+20	; 0x14
    624a:	75 89       	ldd	r23, Z+21	; 0x15
    624c:	80 e0       	ldi	r24, 0x00	; 0
    624e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    6250:	22 e2       	ldi	r18, 0x22	; 34
    6252:	31 ea       	ldi	r19, 0xA1	; 161
    6254:	40 e0       	ldi	r20, 0x00	; 0
    6256:	50 e0       	ldi	r21, 0x00	; 0
    6258:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    625c:	6f 53       	subi	r22, 0x3F	; 63
    625e:	74 41       	sbci	r23, 0x14	; 20
    6260:	8e 49       	sbci	r24, 0x9E	; 158
    6262:	9f 4f       	sbci	r25, 0xFF	; 255
    6264:	27 ed       	ldi	r18, 0xD7	; 215
    6266:	36 e4       	ldi	r19, 0x46	; 70
    6268:	49 e0       	ldi	r20, 0x09	; 9
    626a:	50 e0       	ldi	r21, 0x00	; 0
    626c:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6270:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    6272:	08 95       	ret

00006274 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    6274:	10 92 e1 32 	sts	0x32E1, r1
  	temperatureBufferToWriteTo = 1;
    6278:	81 e0       	ldi	r24, 0x01	; 1
    627a:	80 93 f0 2f 	sts	0x2FF0, r24
	okToSendTemperatureBuffer1 = false;
    627e:	10 92 df 32 	sts	0x32DF, r1
	okToSendTemperatureBuffer2 = false;
    6282:	10 92 e0 32 	sts	0x32E0, r1
}
    6286:	08 95       	ret

00006288 <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    6288:	10 92 e4 32 	sts	0x32E4, r1
	pressureBufferToWriteTo = 1;
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	80 93 f1 2f 	sts	0x2FF1, r24
	okToSendPressureBuffer1 = false;
    6292:	10 92 e2 32 	sts	0x32E2, r1
	okToSendPressureBuffer2 = false;
    6296:	10 92 e3 32 	sts	0x32E3, r1
}
    629a:	08 95       	ret

0000629c <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    629c:	10 92 e7 32 	sts	0x32E7, r1
	humidityBufferToWriteTo = 1;
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	80 93 f2 2f 	sts	0x2FF2, r24
	okToSendHumidityBuffer1 = false;
    62a6:	10 92 e5 32 	sts	0x32E5, r1
	okToSendHumidityBuffer2 = false;
    62aa:	10 92 e6 32 	sts	0x32E6, r1
}
    62ae:	08 95       	ret

000062b0 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    62b0:	10 92 ea 32 	sts	0x32EA, r1
    62b4:	10 92 eb 32 	sts	0x32EB, r1
	microphoneBufferToWriteTo = 1;
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	80 93 f3 2f 	sts	0x2FF3, r24
	okToSendMicrophoneBuffer1 = false;
    62be:	10 92 e8 32 	sts	0x32E8, r1
	okToSendMicrophoneBuffer2 = false;
    62c2:	10 92 e9 32 	sts	0x32E9, r1
}
    62c6:	08 95       	ret

000062c8 <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    62c8:	10 92 ee 32 	sts	0x32EE, r1
	lightBufferToWriteTo = 1;
    62cc:	81 e0       	ldi	r24, 0x01	; 1
    62ce:	80 93 f4 2f 	sts	0x2FF4, r24
	okToSendLightBuffer1 = false;
    62d2:	10 92 ec 32 	sts	0x32EC, r1
	okToSendLightBuffer2 = false;
    62d6:	10 92 ed 32 	sts	0x32ED, r1
}
    62da:	08 95       	ret

000062dc <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    62dc:	1f 92       	push	r1
    62de:	0f 92       	push	r0
    62e0:	0f b6       	in	r0, 0x3f	; 63
    62e2:	0f 92       	push	r0
    62e4:	0b b6       	in	r0, 0x3b	; 59
    62e6:	0f 92       	push	r0
    62e8:	11 24       	eor	r1, r1
    62ea:	0f 93       	push	r16
    62ec:	1f 93       	push	r17
    62ee:	2f 93       	push	r18
    62f0:	3f 93       	push	r19
    62f2:	4f 93       	push	r20
    62f4:	5f 93       	push	r21
    62f6:	6f 93       	push	r22
    62f8:	7f 93       	push	r23
    62fa:	8f 93       	push	r24
    62fc:	9f 93       	push	r25
    62fe:	af 93       	push	r26
    6300:	bf 93       	push	r27
    6302:	ef 93       	push	r30
    6304:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    6306:	80 91 dd 32 	lds	r24, 0x32DD
    630a:	88 23       	and	r24, r24
    630c:	09 f4       	brne	.+2      	; 0x6310 <__vector_108+0x34>
    630e:	9b c0       	rjmp	.+310    	; 0x6446 <__vector_108+0x16a>
    6310:	80 91 f1 32 	lds	r24, 0x32F1
    6314:	88 23       	and	r24, r24
    6316:	09 f4       	brne	.+2      	; 0x631a <__vector_108+0x3e>
    6318:	96 c0       	rjmp	.+300    	; 0x6446 <__vector_108+0x16a>
	  if((microphoneBufferToWriteTo == 1) && !okToSendMicrophoneBuffer1){
    631a:	80 91 f3 2f 	lds	r24, 0x2FF3
    631e:	81 30       	cpi	r24, 0x01	; 1
    6320:	09 f0       	breq	.+2      	; 0x6324 <__vector_108+0x48>
    6322:	48 c0       	rjmp	.+144    	; 0x63b4 <__vector_108+0xd8>
    6324:	80 91 e8 32 	lds	r24, 0x32E8
    6328:	88 23       	and	r24, r24
    632a:	09 f0       	breq	.+2      	; 0x632e <__vector_108+0x52>
    632c:	94 c0       	rjmp	.+296    	; 0x6456 <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    632e:	80 91 ea 32 	lds	r24, 0x32EA
    6332:	90 91 eb 32 	lds	r25, 0x32EB
    6336:	89 2b       	or	r24, r25
    6338:	51 f4       	brne	.+20     	; 0x634e <__vector_108+0x72>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    633a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    633e:	60 93 90 32 	sts	0x3290, r22
    6342:	70 93 91 32 	sts	0x3291, r23
    6346:	80 93 92 32 	sts	0x3292, r24
    634a:	90 93 93 32 	sts	0x3293, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    634e:	00 91 ea 32 	lds	r16, 0x32EA
    6352:	10 91 eb 32 	lds	r17, 0x32EB
    6356:	0e 94 18 31 	call	0x6230	; 0x6230 <Sensors_ReadMicrophone>
    635a:	0c 54       	subi	r16, 0x4C	; 76
    635c:	1a 4b       	sbci	r17, 0xBA	; 186
    635e:	f8 01       	movw	r30, r16
    6360:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6362:	80 91 f8 32 	lds	r24, 0x32F8
    6366:	88 23       	and	r24, r24
    6368:	49 f4       	brne	.+18     	; 0x637c <__vector_108+0xa0>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    636a:	e0 91 ea 32 	lds	r30, 0x32EA
    636e:	f0 91 eb 32 	lds	r31, 0x32EB
    6372:	ec 54       	subi	r30, 0x4C	; 76
    6374:	fa 4b       	sbci	r31, 0xBA	; 186
    6376:	80 81       	ld	r24, Z
    6378:	80 93 f7 32 	sts	0x32F7, r24
	    }
	    microphoneBufferCounter++;
    637c:	80 91 ea 32 	lds	r24, 0x32EA
    6380:	90 91 eb 32 	lds	r25, 0x32EB
    6384:	01 96       	adiw	r24, 0x01	; 1
    6386:	80 93 ea 32 	sts	0x32EA, r24
    638a:	90 93 eb 32 	sts	0x32EB, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    638e:	88 5e       	subi	r24, 0xE8	; 232
    6390:	93 40       	sbci	r25, 0x03	; 3
    6392:	09 f0       	breq	.+2      	; 0x6396 <__vector_108+0xba>
    6394:	60 c0       	rjmp	.+192    	; 0x6456 <__vector_108+0x17a>
	    	quickMic = microphoneBuffer1[0];
    6396:	80 91 b4 45 	lds	r24, 0x45B4
    639a:	80 93 f7 32 	sts	0x32F7, r24
	    	microphoneBufferCounter=0;
    639e:	10 92 ea 32 	sts	0x32EA, r1
    63a2:	10 92 eb 32 	sts	0x32EB, r1
	    	microphoneBufferToWriteTo = 2;
    63a6:	82 e0       	ldi	r24, 0x02	; 2
    63a8:	80 93 f3 2f 	sts	0x2FF3, r24
	    	okToSendMicrophoneBuffer1 = true;
    63ac:	81 e0       	ldi	r24, 0x01	; 1
    63ae:	80 93 e8 32 	sts	0x32E8, r24
    63b2:	51 c0       	rjmp	.+162    	; 0x6456 <__vector_108+0x17a>
	    }
	  } else if ((microphoneBufferToWriteTo == 2)&& !okToSendMicrophoneBuffer2){
    63b4:	82 30       	cpi	r24, 0x02	; 2
    63b6:	09 f0       	breq	.+2      	; 0x63ba <__vector_108+0xde>
    63b8:	4e c0       	rjmp	.+156    	; 0x6456 <__vector_108+0x17a>
    63ba:	80 91 e9 32 	lds	r24, 0x32E9
    63be:	88 23       	and	r24, r24
    63c0:	09 f0       	breq	.+2      	; 0x63c4 <__vector_108+0xe8>
    63c2:	49 c0       	rjmp	.+146    	; 0x6456 <__vector_108+0x17a>
	    if(microphoneBufferCounter == 0){
    63c4:	80 91 ea 32 	lds	r24, 0x32EA
    63c8:	90 91 eb 32 	lds	r25, 0x32EB
    63cc:	89 2b       	or	r24, r25
    63ce:	51 f4       	brne	.+20     	; 0x63e4 <__vector_108+0x108>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    63d0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    63d4:	60 93 94 32 	sts	0x3294, r22
    63d8:	70 93 95 32 	sts	0x3295, r23
    63dc:	80 93 96 32 	sts	0x3296, r24
    63e0:	90 93 97 32 	sts	0x3297, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    63e4:	00 91 ea 32 	lds	r16, 0x32EA
    63e8:	10 91 eb 32 	lds	r17, 0x32EB
    63ec:	0e 94 18 31 	call	0x6230	; 0x6230 <Sensors_ReadMicrophone>
    63f0:	0c 57       	subi	r16, 0x7C	; 124
    63f2:	1f 4b       	sbci	r17, 0xBF	; 191
    63f4:	f8 01       	movw	r30, r16
    63f6:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    63f8:	80 91 f8 32 	lds	r24, 0x32F8
    63fc:	88 23       	and	r24, r24
    63fe:	49 f4       	brne	.+18     	; 0x6412 <__vector_108+0x136>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    6400:	e0 91 ea 32 	lds	r30, 0x32EA
    6404:	f0 91 eb 32 	lds	r31, 0x32EB
    6408:	ec 57       	subi	r30, 0x7C	; 124
    640a:	ff 4b       	sbci	r31, 0xBF	; 191
    640c:	80 81       	ld	r24, Z
    640e:	80 93 f7 32 	sts	0x32F7, r24
	    }

	    microphoneBufferCounter++;
    6412:	80 91 ea 32 	lds	r24, 0x32EA
    6416:	90 91 eb 32 	lds	r25, 0x32EB
    641a:	01 96       	adiw	r24, 0x01	; 1
    641c:	80 93 ea 32 	sts	0x32EA, r24
    6420:	90 93 eb 32 	sts	0x32EB, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6424:	88 5e       	subi	r24, 0xE8	; 232
    6426:	93 40       	sbci	r25, 0x03	; 3
    6428:	b1 f4       	brne	.+44     	; 0x6456 <__vector_108+0x17a>
	    	quickMic = microphoneBuffer2[0];
    642a:	80 91 84 40 	lds	r24, 0x4084
    642e:	80 93 f7 32 	sts	0x32F7, r24
	    	microphoneBufferCounter=0;
    6432:	10 92 ea 32 	sts	0x32EA, r1
    6436:	10 92 eb 32 	sts	0x32EB, r1
	    	microphoneBufferToWriteTo = 1;
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	80 93 f3 2f 	sts	0x2FF3, r24
	    	okToSendMicrophoneBuffer2 = true;
    6440:	80 93 e9 32 	sts	0x32E9, r24
    6444:	08 c0       	rjmp	.+16     	; 0x6456 <__vector_108+0x17a>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    6446:	80 91 f8 32 	lds	r24, 0x32F8
    644a:	88 23       	and	r24, r24
    644c:	21 f4       	brne	.+8      	; 0x6456 <__vector_108+0x17a>
			quickMic = Sensors_ReadMicrophone();
    644e:	0e 94 18 31 	call	0x6230	; 0x6230 <Sensors_ReadMicrophone>
    6452:	80 93 f7 32 	sts	0x32F7, r24
		}
	}
	micSampleCounter++;
    6456:	80 91 f8 32 	lds	r24, 0x32F8
    645a:	8f 5f       	subi	r24, 0xFF	; 255
    645c:	80 93 f8 32 	sts	0x32F8, r24
}
    6460:	ff 91       	pop	r31
    6462:	ef 91       	pop	r30
    6464:	bf 91       	pop	r27
    6466:	af 91       	pop	r26
    6468:	9f 91       	pop	r25
    646a:	8f 91       	pop	r24
    646c:	7f 91       	pop	r23
    646e:	6f 91       	pop	r22
    6470:	5f 91       	pop	r21
    6472:	4f 91       	pop	r20
    6474:	3f 91       	pop	r19
    6476:	2f 91       	pop	r18
    6478:	1f 91       	pop	r17
    647a:	0f 91       	pop	r16
    647c:	0f 90       	pop	r0
    647e:	0b be       	out	0x3b, r0	; 59
    6480:	0f 90       	pop	r0
    6482:	0f be       	out	0x3f, r0	; 63
    6484:	0f 90       	pop	r0
    6486:	1f 90       	pop	r1
    6488:	18 95       	reti

0000648a <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    648a:	30 91 2d 4b 	lds	r19, 0x4B2D
    648e:	93 2f       	mov	r25, r19
    6490:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    6492:	28 2f       	mov	r18, r24
    6494:	20 68       	ori	r18, 0x80	; 128
    6496:	20 93 1e 54 	sts	0x541E, r18


	LightPort.MASTER.ADDR = writeAddress;
    649a:	e0 e8       	ldi	r30, 0x80	; 128
    649c:	f4 e0       	ldi	r31, 0x04	; 4
    649e:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64a0:	80 91 84 04 	lds	r24, 0x0484
    64a4:	86 ff       	sbrs	r24, 6
    64a6:	fc cf       	rjmp	.-8      	; 0x64a0 <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    64a8:	e0 e8       	ldi	r30, 0x80	; 128
    64aa:	f4 e0       	ldi	r31, 0x04	; 4
    64ac:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64ae:	80 91 84 04 	lds	r24, 0x0484
    64b2:	86 ff       	sbrs	r24, 6
    64b4:	fc cf       	rjmp	.-8      	; 0x64ae <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    64b6:	83 2f       	mov	r24, r19
    64b8:	81 60       	ori	r24, 0x01	; 1
    64ba:	80 93 64 4a 	sts	0x4A64, r24
	LightPort.MASTER.ADDR = writeAddress;
    64be:	e0 e8       	ldi	r30, 0x80	; 128
    64c0:	f4 e0       	ldi	r31, 0x04	; 4
    64c2:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    64c4:	80 91 84 04 	lds	r24, 0x0484
    64c8:	87 ff       	sbrs	r24, 7
    64ca:	fc cf       	rjmp	.-8      	; 0x64c4 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    64cc:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    64d0:	97 e0       	ldi	r25, 0x07	; 7
    64d2:	e0 e8       	ldi	r30, 0x80	; 128
    64d4:	f4 e0       	ldi	r31, 0x04	; 4
    64d6:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    64d8:	08 95       	ret

000064da <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    64da:	80 e0       	ldi	r24, 0x00	; 0
    64dc:	0e 94 45 32 	call	0x648a	; 0x648a <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    64e0:	20 91 2d 4b 	lds	r18, 0x4B2D
    64e4:	92 2f       	mov	r25, r18
    64e6:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    64e8:	80 e9       	ldi	r24, 0x90	; 144
    64ea:	80 93 1e 54 	sts	0x541E, r24

	LightPort.MASTER.ADDR = writeAddress;
    64ee:	e0 e8       	ldi	r30, 0x80	; 128
    64f0:	f4 e0       	ldi	r31, 0x04	; 4
    64f2:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    64f4:	80 91 84 04 	lds	r24, 0x0484
    64f8:	86 ff       	sbrs	r24, 6
    64fa:	fc cf       	rjmp	.-8      	; 0x64f4 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    64fc:	80 e9       	ldi	r24, 0x90	; 144
    64fe:	e0 e8       	ldi	r30, 0x80	; 128
    6500:	f4 e0       	ldi	r31, 0x04	; 4
    6502:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6504:	80 91 84 04 	lds	r24, 0x0484
    6508:	86 ff       	sbrs	r24, 6
    650a:	fc cf       	rjmp	.-8      	; 0x6504 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    650c:	82 2f       	mov	r24, r18
    650e:	81 60       	ori	r24, 0x01	; 1
    6510:	80 93 64 4a 	sts	0x4A64, r24
	LightPort.MASTER.ADDR = writeAddress;
    6514:	e0 e8       	ldi	r30, 0x80	; 128
    6516:	f4 e0       	ldi	r31, 0x04	; 4
    6518:	86 83       	std	Z+6, r24	; 0x06
    651a:	e3 ed       	ldi	r30, 0xD3	; 211
    651c:	fa e4       	ldi	r31, 0x4A	; 74
    651e:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6520:	a0 e8       	ldi	r26, 0x80	; 128
    6522:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6524:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6526:	80 91 84 04 	lds	r24, 0x0484
    652a:	87 ff       	sbrs	r24, 7
    652c:	fc cf       	rjmp	.-8      	; 0x6526 <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    652e:	80 91 87 04 	lds	r24, 0x0487
    6532:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    6534:	97 30       	cpi	r25, 0x07	; 7
    6536:	19 f0       	breq	.+6      	; 0x653e <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6538:	13 96       	adiw	r26, 0x03	; 3
    653a:	2c 93       	st	X, r18
    653c:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    653e:	9f 5f       	subi	r25, 0xFF	; 255
    6540:	31 96       	adiw	r30, 0x01	; 1
    6542:	98 30       	cpi	r25, 0x08	; 8
    6544:	81 f7       	brne	.-32     	; 0x6526 <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6546:	87 e0       	ldi	r24, 0x07	; 7
    6548:	e0 e8       	ldi	r30, 0x80	; 128
    654a:	f4 e0       	ldi	r31, 0x04	; 4
    654c:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    654e:	90 91 d4 4a 	lds	r25, 0x4AD4
    6552:	80 e0       	ldi	r24, 0x00	; 0
    6554:	20 91 d3 4a 	lds	r18, 0x4AD3
    6558:	82 0f       	add	r24, r18
    655a:	91 1d       	adc	r25, r1
    655c:	80 93 cd 3b 	sts	0x3BCD, r24
    6560:	90 93 ce 3b 	sts	0x3BCE, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    6564:	90 91 d6 4a 	lds	r25, 0x4AD6
    6568:	80 e0       	ldi	r24, 0x00	; 0
    656a:	20 91 d5 4a 	lds	r18, 0x4AD5
    656e:	82 0f       	add	r24, r18
    6570:	91 1d       	adc	r25, r1
    6572:	80 93 cf 3b 	sts	0x3BCF, r24
    6576:	90 93 d0 3b 	sts	0x3BD0, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    657a:	90 91 d8 4a 	lds	r25, 0x4AD8
    657e:	80 e0       	ldi	r24, 0x00	; 0
    6580:	20 91 d7 4a 	lds	r18, 0x4AD7
    6584:	82 0f       	add	r24, r18
    6586:	91 1d       	adc	r25, r1
    6588:	80 93 d1 3b 	sts	0x3BD1, r24
    658c:	90 93 d2 3b 	sts	0x3BD2, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    6590:	90 91 da 4a 	lds	r25, 0x4ADA
    6594:	80 e0       	ldi	r24, 0x00	; 0
    6596:	20 91 d9 4a 	lds	r18, 0x4AD9
    659a:	82 0f       	add	r24, r18
    659c:	91 1d       	adc	r25, r1
    659e:	80 93 d3 3b 	sts	0x3BD3, r24
    65a2:	90 93 d4 3b 	sts	0x3BD4, r25
}
    65a6:	08 95       	ret

000065a8 <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    65a8:	e8 2f       	mov	r30, r24
    65aa:	f0 e0       	ldi	r31, 0x00	; 0
    65ac:	ee 0f       	add	r30, r30
    65ae:	ff 1f       	adc	r31, r31
    65b0:	e3 53       	subi	r30, 0x33	; 51
    65b2:	f4 4c       	sbci	r31, 0xC4	; 196
	return colors[color];
}
    65b4:	80 81       	ld	r24, Z
    65b6:	91 81       	ldd	r25, Z+1	; 0x01
    65b8:	08 95       	ret

000065ba <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    65ba:	90 91 2d 4b 	lds	r25, 0x4B2D
    65be:	9e 7f       	andi	r25, 0xFE	; 254
    65c0:	90 93 64 4a 	sts	0x4A64, r25
	commandCode = 0b10000000 | location;
    65c4:	28 2f       	mov	r18, r24
    65c6:	20 68       	ori	r18, 0x80	; 128
    65c8:	20 93 1e 54 	sts	0x541E, r18

	LightPort.MASTER.ADDR = writeAddress;
    65cc:	e0 e8       	ldi	r30, 0x80	; 128
    65ce:	f4 e0       	ldi	r31, 0x04	; 4
    65d0:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65d2:	80 91 84 04 	lds	r24, 0x0484
    65d6:	86 ff       	sbrs	r24, 6
    65d8:	fc cf       	rjmp	.-8      	; 0x65d2 <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    65da:	e0 e8       	ldi	r30, 0x80	; 128
    65dc:	f4 e0       	ldi	r31, 0x04	; 4
    65de:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65e0:	80 91 84 04 	lds	r24, 0x0484
    65e4:	86 ff       	sbrs	r24, 6
    65e6:	fc cf       	rjmp	.-8      	; 0x65e0 <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    65e8:	e0 e8       	ldi	r30, 0x80	; 128
    65ea:	f4 e0       	ldi	r31, 0x04	; 4
    65ec:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    65ee:	80 91 84 04 	lds	r24, 0x0484
    65f2:	86 ff       	sbrs	r24, 6
    65f4:	fc cf       	rjmp	.-8      	; 0x65ee <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    65f6:	87 e0       	ldi	r24, 0x07	; 7
    65f8:	e0 e8       	ldi	r30, 0x80	; 128
    65fa:	f4 e0       	ldi	r31, 0x04	; 4
    65fc:	83 83       	std	Z+3, r24	; 0x03

}
    65fe:	08 95       	ret

00006600 <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    6600:	80 e0       	ldi	r24, 0x00	; 0
    6602:	61 e0       	ldi	r22, 0x01	; 1
    6604:	0e 94 dd 32 	call	0x65ba	; 0x65ba <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    6608:	80 91 dc 32 	lds	r24, 0x32DC
    660c:	ea eb       	ldi	r30, 0xBA	; 186
    660e:	ff e2       	ldi	r31, 0x2F	; 47
    6610:	e8 0f       	add	r30, r24
    6612:	f1 1d       	adc	r31, r1
    6614:	81 e0       	ldi	r24, 0x01	; 1
    6616:	60 81       	ld	r22, Z
    6618:	0e 94 dd 32 	call	0x65ba	; 0x65ba <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    661c:	80 91 dc 32 	lds	r24, 0x32DC
    6620:	e3 ec       	ldi	r30, 0xC3	; 195
    6622:	ff e2       	ldi	r31, 0x2F	; 47
    6624:	e8 0f       	add	r30, r24
    6626:	f1 1d       	adc	r31, r1
    6628:	87 e0       	ldi	r24, 0x07	; 7
    662a:	60 81       	ld	r22, Z
    662c:	0e 94 dd 32 	call	0x65ba	; 0x65ba <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    6630:	80 e0       	ldi	r24, 0x00	; 0
    6632:	63 e0       	ldi	r22, 0x03	; 3
    6634:	0e 94 dd 32 	call	0x65ba	; 0x65ba <Light_writeByte>
}
    6638:	08 95       	ret

0000663a <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    663a:	80 93 2d 4b 	sts	0x4B2D, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    663e:	e0 e8       	ldi	r30, 0x80	; 128
    6640:	f4 e0       	ldi	r31, 0x04	; 4
    6642:	88 e0       	ldi	r24, 0x08	; 8
    6644:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6646:	84 e0       	ldi	r24, 0x04	; 4
    6648:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    664a:	8d e0       	ldi	r24, 0x0D	; 13
    664c:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    664e:	81 e0       	ldi	r24, 0x01	; 1
    6650:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    6652:	10 92 dc 32 	sts	0x32DC, r1
	Light_setGain();
    6656:	0e 94 00 33 	call	0x6600	; 0x6600 <Light_setGain>
}
    665a:	08 95       	ret

0000665c <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    665c:	1f 92       	push	r1
    665e:	0f 92       	push	r0
    6660:	0f b6       	in	r0, 0x3f	; 63
    6662:	0f 92       	push	r0
    6664:	0b b6       	in	r0, 0x3b	; 59
    6666:	0f 92       	push	r0
    6668:	11 24       	eor	r1, r1
    666a:	6f 92       	push	r6
    666c:	7f 92       	push	r7
    666e:	8f 92       	push	r8
    6670:	9f 92       	push	r9
    6672:	af 92       	push	r10
    6674:	bf 92       	push	r11
    6676:	cf 92       	push	r12
    6678:	df 92       	push	r13
    667a:	ef 92       	push	r14
    667c:	ff 92       	push	r15
    667e:	0f 93       	push	r16
    6680:	1f 93       	push	r17
    6682:	2f 93       	push	r18
    6684:	3f 93       	push	r19
    6686:	4f 93       	push	r20
    6688:	5f 93       	push	r21
    668a:	6f 93       	push	r22
    668c:	7f 93       	push	r23
    668e:	8f 93       	push	r24
    6690:	9f 93       	push	r25
    6692:	af 93       	push	r26
    6694:	bf 93       	push	r27
    6696:	cf 93       	push	r28
    6698:	df 93       	push	r29
    669a:	ef 93       	push	r30
    669c:	ff 93       	push	r31
    UNIX_time++;
    669e:	80 91 d8 32 	lds	r24, 0x32D8
    66a2:	90 91 d9 32 	lds	r25, 0x32D9
    66a6:	a0 91 da 32 	lds	r26, 0x32DA
    66aa:	b0 91 db 32 	lds	r27, 0x32DB
    66ae:	01 96       	adiw	r24, 0x01	; 1
    66b0:	a1 1d       	adc	r26, r1
    66b2:	b1 1d       	adc	r27, r1
    66b4:	80 93 d8 32 	sts	0x32D8, r24
    66b8:	90 93 d9 32 	sts	0x32D9, r25
    66bc:	a0 93 da 32 	sts	0x32DA, r26
    66c0:	b0 93 db 32 	sts	0x32DB, r27
	if(recording){
    66c4:	80 91 dd 32 	lds	r24, 0x32DD
    66c8:	88 23       	and	r24, r24
    66ca:	09 f4       	brne	.+2      	; 0x66ce <__vector_83+0x72>
    66cc:	a0 c2       	rjmp	.+1344   	; 0x6c0e <__vector_83+0x5b2>
	  rtcBlockCounter++;
    66ce:	80 91 f0 32 	lds	r24, 0x32F0
    66d2:	8f 5f       	subi	r24, 0xFF	; 255
    66d4:	80 93 f0 32 	sts	0x32F0, r24
	  if(rtcBlockCounter == 0){
    66d8:	88 23       	and	r24, r24
    66da:	19 f4       	brne	.+6      	; 0x66e2 <__vector_83+0x86>
	    okToSendRTCBlock = true;
    66dc:	81 e0       	ldi	r24, 0x01	; 1
    66de:	80 93 ef 32 	sts	0x32EF, r24
	  }

	  if(wantToRecordTemperature){
    66e2:	80 91 f5 2f 	lds	r24, 0x2FF5
    66e6:	88 23       	and	r24, r24
    66e8:	09 f4       	brne	.+2      	; 0x66ec <__vector_83+0x90>
    66ea:	75 c0       	rjmp	.+234    	; 0x67d6 <__vector_83+0x17a>
		  if(temperatureBufferToWriteTo == 1){
    66ec:	80 91 f0 2f 	lds	r24, 0x2FF0
    66f0:	81 30       	cpi	r24, 0x01	; 1
    66f2:	c9 f5       	brne	.+114    	; 0x6766 <__vector_83+0x10a>
			  if(temperatureBufferCounter == 0){
    66f4:	80 91 e1 32 	lds	r24, 0x32E1
    66f8:	88 23       	and	r24, r24
    66fa:	51 f4       	brne	.+20     	; 0x6710 <__vector_83+0xb4>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    66fc:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    6700:	60 93 78 32 	sts	0x3278, r22
    6704:	70 93 79 32 	sts	0x3279, r23
    6708:	80 93 7a 32 	sts	0x327A, r24
    670c:	90 93 7b 32 	sts	0x327B, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    6710:	80 91 e1 32 	lds	r24, 0x32E1
    6714:	c8 2f       	mov	r28, r24
    6716:	d0 e0       	ldi	r29, 0x00	; 0
    6718:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <Sensors_ReadTemperature>
    671c:	cc 0f       	add	r28, r28
    671e:	dd 1f       	adc	r29, r29
    6720:	c4 56       	subi	r28, 0x64	; 100
    6722:	d6 4b       	sbci	r29, 0xB6	; 182
    6724:	88 83       	st	Y, r24
    6726:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    6728:	20 91 e1 32 	lds	r18, 0x32E1
    672c:	e2 2f       	mov	r30, r18
    672e:	f0 e0       	ldi	r31, 0x00	; 0
    6730:	ee 0f       	add	r30, r30
    6732:	ff 1f       	adc	r31, r31
    6734:	e4 56       	subi	r30, 0x64	; 100
    6736:	f6 4b       	sbci	r31, 0xB6	; 182
    6738:	80 81       	ld	r24, Z
    673a:	91 81       	ldd	r25, Z+1	; 0x01
    673c:	6a e0       	ldi	r22, 0x0A	; 10
    673e:	70 e0       	ldi	r23, 0x00	; 0
    6740:	0e 94 9c 60 	call	0xc138	; 0xc138 <__udivmodhi4>
    6744:	60 93 f2 32 	sts	0x32F2, r22
			  temperatureBufferCounter++;
    6748:	2f 5f       	subi	r18, 0xFF	; 255
    674a:	20 93 e1 32 	sts	0x32E1, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    674e:	2a 30       	cpi	r18, 0x0A	; 10
    6750:	09 f0       	breq	.+2      	; 0x6754 <__vector_83+0xf8>
    6752:	41 c0       	rjmp	.+130    	; 0x67d6 <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    6754:	10 92 e1 32 	sts	0x32E1, r1
				  temperatureBufferToWriteTo = 2;
    6758:	82 e0       	ldi	r24, 0x02	; 2
    675a:	80 93 f0 2f 	sts	0x2FF0, r24
				  okToSendTemperatureBuffer1 = true;
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	80 93 df 32 	sts	0x32DF, r24
    6764:	38 c0       	rjmp	.+112    	; 0x67d6 <__vector_83+0x17a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    6766:	82 30       	cpi	r24, 0x02	; 2
    6768:	b1 f5       	brne	.+108    	; 0x67d6 <__vector_83+0x17a>
			  if(temperatureBufferCounter == 0){
    676a:	80 91 e1 32 	lds	r24, 0x32E1
    676e:	88 23       	and	r24, r24
    6770:	51 f4       	brne	.+20     	; 0x6786 <__vector_83+0x12a>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    6772:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    6776:	60 93 7c 32 	sts	0x327C, r22
    677a:	70 93 7d 32 	sts	0x327D, r23
    677e:	80 93 7e 32 	sts	0x327E, r24
    6782:	90 93 7f 32 	sts	0x327F, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    6786:	80 91 e1 32 	lds	r24, 0x32E1
    678a:	c8 2f       	mov	r28, r24
    678c:	d0 e0       	ldi	r29, 0x00	; 0
    678e:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <Sensors_ReadTemperature>
    6792:	cc 0f       	add	r28, r28
    6794:	dd 1f       	adc	r29, r29
    6796:	c7 58       	subi	r28, 0x87	; 135
    6798:	d5 4b       	sbci	r29, 0xB5	; 181
    679a:	88 83       	st	Y, r24
    679c:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    679e:	20 91 e1 32 	lds	r18, 0x32E1
    67a2:	e2 2f       	mov	r30, r18
    67a4:	f0 e0       	ldi	r31, 0x00	; 0
    67a6:	ee 0f       	add	r30, r30
    67a8:	ff 1f       	adc	r31, r31
    67aa:	e7 58       	subi	r30, 0x87	; 135
    67ac:	f5 4b       	sbci	r31, 0xB5	; 181
    67ae:	80 81       	ld	r24, Z
    67b0:	91 81       	ldd	r25, Z+1	; 0x01
    67b2:	6a e0       	ldi	r22, 0x0A	; 10
    67b4:	70 e0       	ldi	r23, 0x00	; 0
    67b6:	0e 94 9c 60 	call	0xc138	; 0xc138 <__udivmodhi4>
    67ba:	60 93 f2 32 	sts	0x32F2, r22
			  temperatureBufferCounter++;
    67be:	2f 5f       	subi	r18, 0xFF	; 255
    67c0:	20 93 e1 32 	sts	0x32E1, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    67c4:	2a 30       	cpi	r18, 0x0A	; 10
    67c6:	39 f4       	brne	.+14     	; 0x67d6 <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    67c8:	10 92 e1 32 	sts	0x32E1, r1
				  temperatureBufferToWriteTo = 1;
    67cc:	81 e0       	ldi	r24, 0x01	; 1
    67ce:	80 93 f0 2f 	sts	0x2FF0, r24
				  okToSendTemperatureBuffer2 = true;
    67d2:	80 93 e0 32 	sts	0x32E0, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    67d6:	80 91 f7 2f 	lds	r24, 0x2FF7
    67da:	88 23       	and	r24, r24
    67dc:	09 f4       	brne	.+2      	; 0x67e0 <__vector_83+0x184>
    67de:	60 c0       	rjmp	.+192    	; 0x68a0 <__vector_83+0x244>
		  if(humidityBufferToWriteTo == 1){
    67e0:	80 91 f2 2f 	lds	r24, 0x2FF2
    67e4:	81 30       	cpi	r24, 0x01	; 1
    67e6:	71 f5       	brne	.+92     	; 0x6844 <__vector_83+0x1e8>
			  if(humidityBufferCounter == 0){
    67e8:	80 91 e7 32 	lds	r24, 0x32E7
    67ec:	88 23       	and	r24, r24
    67ee:	51 f4       	brne	.+20     	; 0x6804 <__vector_83+0x1a8>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    67f0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    67f4:	60 93 80 32 	sts	0x3280, r22
    67f8:	70 93 81 32 	sts	0x3281, r23
    67fc:	80 93 82 32 	sts	0x3282, r24
    6800:	90 93 83 32 	sts	0x3283, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    6804:	80 91 e7 32 	lds	r24, 0x32E7
    6808:	c8 2f       	mov	r28, r24
    680a:	d0 e0       	ldi	r29, 0x00	; 0
    680c:	0e 94 00 31 	call	0x6200	; 0x6200 <Sensors_ReadHumidity>
    6810:	cb 51       	subi	r28, 0x1B	; 27
    6812:	d5 4b       	sbci	r29, 0xB5	; 181
    6814:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer1[humidityBufferCounter];
    6816:	90 91 e7 32 	lds	r25, 0x32E7
    681a:	e9 2f       	mov	r30, r25
    681c:	f0 e0       	ldi	r31, 0x00	; 0
    681e:	eb 51       	subi	r30, 0x1B	; 27
    6820:	f5 4b       	sbci	r31, 0xB5	; 181
    6822:	80 81       	ld	r24, Z
    6824:	80 93 f3 32 	sts	0x32F3, r24
			  humidityBufferCounter++;
    6828:	9f 5f       	subi	r25, 0xFF	; 255
    682a:	90 93 e7 32 	sts	0x32E7, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    682e:	9a 30       	cpi	r25, 0x0A	; 10
    6830:	b9 f5       	brne	.+110    	; 0x68a0 <__vector_83+0x244>
				  humidityBufferCounter=0;
    6832:	10 92 e7 32 	sts	0x32E7, r1
				  humidityBufferToWriteTo = 2;
    6836:	82 e0       	ldi	r24, 0x02	; 2
    6838:	80 93 f2 2f 	sts	0x2FF2, r24
				  okToSendHumidityBuffer1 = true;
    683c:	81 e0       	ldi	r24, 0x01	; 1
    683e:	80 93 e5 32 	sts	0x32E5, r24
    6842:	2e c0       	rjmp	.+92     	; 0x68a0 <__vector_83+0x244>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    6844:	82 30       	cpi	r24, 0x02	; 2
    6846:	61 f5       	brne	.+88     	; 0x68a0 <__vector_83+0x244>
			  if(humidityBufferCounter == 0){
    6848:	80 91 e7 32 	lds	r24, 0x32E7
    684c:	88 23       	and	r24, r24
    684e:	51 f4       	brne	.+20     	; 0x6864 <__vector_83+0x208>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    6850:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    6854:	60 93 84 32 	sts	0x3284, r22
    6858:	70 93 85 32 	sts	0x3285, r23
    685c:	80 93 86 32 	sts	0x3286, r24
    6860:	90 93 87 32 	sts	0x3287, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    6864:	80 91 e7 32 	lds	r24, 0x32E7
    6868:	c8 2f       	mov	r28, r24
    686a:	d0 e0       	ldi	r29, 0x00	; 0
    686c:	0e 94 00 31 	call	0x6200	; 0x6200 <Sensors_ReadHumidity>
    6870:	c0 50       	subi	r28, 0x00	; 0
    6872:	dc 4a       	sbci	r29, 0xAC	; 172
    6874:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer2[humidityBufferCounter];
    6876:	90 91 e7 32 	lds	r25, 0x32E7
    687a:	e9 2f       	mov	r30, r25
    687c:	f0 e0       	ldi	r31, 0x00	; 0
    687e:	e0 50       	subi	r30, 0x00	; 0
    6880:	fc 4a       	sbci	r31, 0xAC	; 172
    6882:	80 81       	ld	r24, Z
    6884:	80 93 f3 32 	sts	0x32F3, r24
			  humidityBufferCounter++;
    6888:	9f 5f       	subi	r25, 0xFF	; 255
    688a:	90 93 e7 32 	sts	0x32E7, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    688e:	9a 30       	cpi	r25, 0x0A	; 10
    6890:	39 f4       	brne	.+14     	; 0x68a0 <__vector_83+0x244>
				  humidityBufferCounter=0;
    6892:	10 92 e7 32 	sts	0x32E7, r1
				  humidityBufferToWriteTo = 1;
    6896:	81 e0       	ldi	r24, 0x01	; 1
    6898:	80 93 f2 2f 	sts	0x2FF2, r24
				  okToSendHumidityBuffer2 = true;
    689c:	80 93 e6 32 	sts	0x32E6, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    68a0:	80 91 f6 2f 	lds	r24, 0x2FF6
    68a4:	88 23       	and	r24, r24
    68a6:	09 f4       	brne	.+2      	; 0x68aa <__vector_83+0x24e>
    68a8:	60 c0       	rjmp	.+192    	; 0x696a <__vector_83+0x30e>
		  if(pressureBufferToWriteTo == 1){
    68aa:	80 91 f1 2f 	lds	r24, 0x2FF1
    68ae:	81 30       	cpi	r24, 0x01	; 1
    68b0:	71 f5       	brne	.+92     	; 0x690e <__vector_83+0x2b2>
			  if(pressureBufferCounter == 0){
    68b2:	80 91 e4 32 	lds	r24, 0x32E4
    68b6:	88 23       	and	r24, r24
    68b8:	51 f4       	brne	.+20     	; 0x68ce <__vector_83+0x272>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    68ba:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    68be:	60 93 88 32 	sts	0x3288, r22
    68c2:	70 93 89 32 	sts	0x3289, r23
    68c6:	80 93 8a 32 	sts	0x328A, r24
    68ca:	90 93 8b 32 	sts	0x328B, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    68ce:	80 91 e4 32 	lds	r24, 0x32E4
    68d2:	c8 2f       	mov	r28, r24
    68d4:	d0 e0       	ldi	r29, 0x00	; 0
    68d6:	0e 94 22 31 	call	0x6244	; 0x6244 <Sensors_ReadPressure>
    68da:	cc 51       	subi	r28, 0x1C	; 28
    68dc:	d4 4c       	sbci	r29, 0xC4	; 196
    68de:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer1[pressureBufferCounter];
    68e0:	90 91 e4 32 	lds	r25, 0x32E4
    68e4:	e9 2f       	mov	r30, r25
    68e6:	f0 e0       	ldi	r31, 0x00	; 0
    68e8:	ec 51       	subi	r30, 0x1C	; 28
    68ea:	f4 4c       	sbci	r31, 0xC4	; 196
    68ec:	80 81       	ld	r24, Z
    68ee:	80 93 f4 32 	sts	0x32F4, r24

			  pressureBufferCounter++;
    68f2:	9f 5f       	subi	r25, 0xFF	; 255
    68f4:	90 93 e4 32 	sts	0x32E4, r25
			  if(pressureBufferCounter == pressureNumberOfSamples){
    68f8:	9a 30       	cpi	r25, 0x0A	; 10
    68fa:	b9 f5       	brne	.+110    	; 0x696a <__vector_83+0x30e>
				  pressureBufferCounter=0;
    68fc:	10 92 e4 32 	sts	0x32E4, r1
				  pressureBufferToWriteTo = 2;
    6900:	82 e0       	ldi	r24, 0x02	; 2
    6902:	80 93 f1 2f 	sts	0x2FF1, r24
				  okToSendPressureBuffer1 = true;
    6906:	81 e0       	ldi	r24, 0x01	; 1
    6908:	80 93 e2 32 	sts	0x32E2, r24
    690c:	2e c0       	rjmp	.+92     	; 0x696a <__vector_83+0x30e>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    690e:	82 30       	cpi	r24, 0x02	; 2
    6910:	61 f5       	brne	.+88     	; 0x696a <__vector_83+0x30e>
			  if(pressureBufferCounter == 0){
    6912:	80 91 e4 32 	lds	r24, 0x32E4
    6916:	88 23       	and	r24, r24
    6918:	51 f4       	brne	.+20     	; 0x692e <__vector_83+0x2d2>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    691a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    691e:	60 93 8c 32 	sts	0x328C, r22
    6922:	70 93 8d 32 	sts	0x328D, r23
    6926:	80 93 8e 32 	sts	0x328E, r24
    692a:	90 93 8f 32 	sts	0x328F, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    692e:	80 91 e4 32 	lds	r24, 0x32E4
    6932:	c8 2f       	mov	r28, r24
    6934:	d0 e0       	ldi	r29, 0x00	; 0
    6936:	0e 94 22 31 	call	0x6244	; 0x6244 <Sensors_ReadPressure>
    693a:	c8 55       	subi	r28, 0x58	; 88
    693c:	d5 4b       	sbci	r29, 0xB5	; 181
    693e:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer2[pressureBufferCounter];
    6940:	90 91 e4 32 	lds	r25, 0x32E4
    6944:	e9 2f       	mov	r30, r25
    6946:	f0 e0       	ldi	r31, 0x00	; 0
    6948:	e8 55       	subi	r30, 0x58	; 88
    694a:	f5 4b       	sbci	r31, 0xB5	; 181
    694c:	80 81       	ld	r24, Z
    694e:	80 93 f4 32 	sts	0x32F4, r24
			  pressureBufferCounter++;
    6952:	9f 5f       	subi	r25, 0xFF	; 255
    6954:	90 93 e4 32 	sts	0x32E4, r25
			if(pressureBufferCounter == pressureNumberOfSamples){
    6958:	9a 30       	cpi	r25, 0x0A	; 10
    695a:	39 f4       	brne	.+14     	; 0x696a <__vector_83+0x30e>
				pressureBufferCounter=0;
    695c:	10 92 e4 32 	sts	0x32E4, r1
				pressureBufferToWriteTo = 1;
    6960:	81 e0       	ldi	r24, 0x01	; 1
    6962:	80 93 f1 2f 	sts	0x2FF1, r24
				okToSendPressureBuffer2 = true;
    6966:	80 93 e3 32 	sts	0x32E3, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    696a:	80 91 f8 2f 	lds	r24, 0x2FF8
    696e:	88 23       	and	r24, r24
    6970:	09 f4       	brne	.+2      	; 0x6974 <__vector_83+0x318>
    6972:	67 c1       	rjmp	.+718    	; 0x6c42 <__vector_83+0x5e6>

		  Light_readColors();
    6974:	0e 94 6d 32 	call	0x64da	; 0x64da <Light_readColors>
		  Light_readColors();
    6978:	0e 94 6d 32 	call	0x64da	; 0x64da <Light_readColors>
		  Light_readColors();
    697c:	0e 94 6d 32 	call	0x64da	; 0x64da <Light_readColors>

		  quickLight = Light_returnColor(clear);
    6980:	80 91 d3 3b 	lds	r24, 0x3BD3
    6984:	90 91 d4 3b 	lds	r25, 0x3BD4
    6988:	80 93 f5 32 	sts	0x32F5, r24
    698c:	90 93 f6 32 	sts	0x32F6, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6990:	e0 91 dc 32 	lds	r30, 0x32DC
    6994:	f0 e0       	ldi	r31, 0x00	; 0
    6996:	ee 0f       	add	r30, r30
    6998:	ff 1f       	adc	r31, r31
    699a:	ee 0f       	add	r30, r30
    699c:	ff 1f       	adc	r31, r31
    699e:	e4 53       	subi	r30, 0x34	; 52
    69a0:	f0 4d       	sbci	r31, 0xD0	; 208
    69a2:	a0 80       	ld	r10, Z
    69a4:	b1 80       	ldd	r11, Z+1	; 0x01
    69a6:	c2 80       	ldd	r12, Z+2	; 0x02
    69a8:	d3 80       	ldd	r13, Z+3	; 0x03
    69aa:	e0 ef       	ldi	r30, 0xF0	; 240
    69ac:	f3 e5       	ldi	r31, 0x53	; 83
    69ae:	cd ec       	ldi	r28, 0xCD	; 205
    69b0:	db e3       	ldi	r29, 0x3B	; 59
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    69b2:	10 82       	st	Z, r1
    69b4:	11 82       	std	Z+1, r1	; 0x01
    69b6:	12 82       	std	Z+2, r1	; 0x02
    69b8:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    69ba:	88 81       	ld	r24, Y
    69bc:	99 81       	ldd	r25, Y+1	; 0x01
    69be:	3c 01       	movw	r6, r24
    69c0:	88 24       	eor	r8, r8
    69c2:	99 24       	eor	r9, r9
    69c4:	ee 24       	eor	r14, r14
    69c6:	ff 24       	eor	r15, r15
    69c8:	87 01       	movw	r16, r14
    69ca:	a6 01       	movw	r20, r12
    69cc:	95 01       	movw	r18, r10
    69ce:	e6 0c       	add	r14, r6
    69d0:	f7 1c       	adc	r15, r7
    69d2:	08 1d       	adc	r16, r8
    69d4:	19 1d       	adc	r17, r9
    69d6:	2a 0d       	add	r18, r10
    69d8:	3b 1d       	adc	r19, r11
    69da:	4c 1d       	adc	r20, r12
    69dc:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    69de:	da 01       	movw	r26, r20
    69e0:	c9 01       	movw	r24, r18
    69e2:	8a 19       	sub	r24, r10
    69e4:	9b 09       	sbc	r25, r11
    69e6:	ac 09       	sbc	r26, r12
    69e8:	bd 09       	sbc	r27, r13
    69ea:	80 50       	subi	r24, 0x00	; 0
    69ec:	9c 42       	sbci	r25, 0x2C	; 44
    69ee:	a1 40       	sbci	r26, 0x01	; 1
    69f0:	b0 40       	sbci	r27, 0x00	; 0
    69f2:	68 f3       	brcs	.-38     	; 0x69ce <__vector_83+0x372>
    69f4:	e1 92       	st	Z+, r14
    69f6:	f1 92       	st	Z+, r15
    69f8:	01 93       	st	Z+, r16
    69fa:	11 93       	st	Z+, r17
    69fc:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    69fe:	84 e5       	ldi	r24, 0x54	; 84
    6a00:	e0 30       	cpi	r30, 0x00	; 0
    6a02:	f8 07       	cpc	r31, r24
    6a04:	b1 f6       	brne	.-84     	; 0x69b2 <__vector_83+0x356>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    6a06:	80 91 f4 2f 	lds	r24, 0x2FF4
    6a0a:	81 30       	cpi	r24, 0x01	; 1
    6a0c:	09 f0       	breq	.+2      	; 0x6a10 <__vector_83+0x3b4>
    6a0e:	72 c0       	rjmp	.+228    	; 0x6af4 <__vector_83+0x498>
			  if(lightBufferCounter == 0){
    6a10:	80 91 ee 32 	lds	r24, 0x32EE
    6a14:	88 23       	and	r24, r24
    6a16:	51 f4       	brne	.+20     	; 0x6a2c <__vector_83+0x3d0>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    6a18:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    6a1c:	60 93 98 32 	sts	0x3298, r22
    6a20:	70 93 99 32 	sts	0x3299, r23
    6a24:	80 93 9a 32 	sts	0x329A, r24
    6a28:	90 93 9b 32 	sts	0x329B, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    6a2c:	20 91 ee 32 	lds	r18, 0x32EE
    6a30:	e2 2f       	mov	r30, r18
    6a32:	f0 e0       	ldi	r31, 0x00	; 0
    6a34:	ee 0f       	add	r30, r30
    6a36:	ff 1f       	adc	r31, r31
    6a38:	ee 0f       	add	r30, r30
    6a3a:	ff 1f       	adc	r31, r31
    6a3c:	ee 59       	subi	r30, 0x9E	; 158
    6a3e:	f4 4a       	sbci	r31, 0xA4	; 164
    6a40:	80 91 f0 53 	lds	r24, 0x53F0
    6a44:	90 91 f1 53 	lds	r25, 0x53F1
    6a48:	a0 91 f2 53 	lds	r26, 0x53F2
    6a4c:	b0 91 f3 53 	lds	r27, 0x53F3
    6a50:	80 83       	st	Z, r24
    6a52:	91 83       	std	Z+1, r25	; 0x01
    6a54:	a2 83       	std	Z+2, r26	; 0x02
    6a56:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a58:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    6a5a:	e2 2f       	mov	r30, r18
    6a5c:	f0 e0       	ldi	r31, 0x00	; 0
    6a5e:	ee 0f       	add	r30, r30
    6a60:	ff 1f       	adc	r31, r31
    6a62:	ee 0f       	add	r30, r30
    6a64:	ff 1f       	adc	r31, r31
    6a66:	ee 59       	subi	r30, 0x9E	; 158
    6a68:	f4 4a       	sbci	r31, 0xA4	; 164
    6a6a:	80 91 f4 53 	lds	r24, 0x53F4
    6a6e:	90 91 f5 53 	lds	r25, 0x53F5
    6a72:	a0 91 f6 53 	lds	r26, 0x53F6
    6a76:	b0 91 f7 53 	lds	r27, 0x53F7
    6a7a:	80 83       	st	Z, r24
    6a7c:	91 83       	std	Z+1, r25	; 0x01
    6a7e:	a2 83       	std	Z+2, r26	; 0x02
    6a80:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a82:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    6a84:	e2 2f       	mov	r30, r18
    6a86:	f0 e0       	ldi	r31, 0x00	; 0
    6a88:	ee 0f       	add	r30, r30
    6a8a:	ff 1f       	adc	r31, r31
    6a8c:	ee 0f       	add	r30, r30
    6a8e:	ff 1f       	adc	r31, r31
    6a90:	ee 59       	subi	r30, 0x9E	; 158
    6a92:	f4 4a       	sbci	r31, 0xA4	; 164
    6a94:	80 91 f8 53 	lds	r24, 0x53F8
    6a98:	90 91 f9 53 	lds	r25, 0x53F9
    6a9c:	a0 91 fa 53 	lds	r26, 0x53FA
    6aa0:	b0 91 fb 53 	lds	r27, 0x53FB
    6aa4:	80 83       	st	Z, r24
    6aa6:	91 83       	std	Z+1, r25	; 0x01
    6aa8:	a2 83       	std	Z+2, r26	; 0x02
    6aaa:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6aac:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    6aae:	e2 2f       	mov	r30, r18
    6ab0:	f0 e0       	ldi	r31, 0x00	; 0
    6ab2:	ee 0f       	add	r30, r30
    6ab4:	ff 1f       	adc	r31, r31
    6ab6:	ee 0f       	add	r30, r30
    6ab8:	ff 1f       	adc	r31, r31
    6aba:	ee 59       	subi	r30, 0x9E	; 158
    6abc:	f4 4a       	sbci	r31, 0xA4	; 164
    6abe:	80 91 fc 53 	lds	r24, 0x53FC
    6ac2:	90 91 fd 53 	lds	r25, 0x53FD
    6ac6:	a0 91 fe 53 	lds	r26, 0x53FE
    6aca:	b0 91 ff 53 	lds	r27, 0x53FF
    6ace:	80 83       	st	Z, r24
    6ad0:	91 83       	std	Z+1, r25	; 0x01
    6ad2:	a2 83       	std	Z+2, r26	; 0x02
    6ad4:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6ad6:	2f 5f       	subi	r18, 0xFF	; 255
    6ad8:	20 93 ee 32 	sts	0x32EE, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6adc:	28 32       	cpi	r18, 0x28	; 40
    6ade:	09 f0       	breq	.+2      	; 0x6ae2 <__vector_83+0x486>
    6ae0:	7b c0       	rjmp	.+246    	; 0x6bd8 <__vector_83+0x57c>
				  lightBufferCounter=0;
    6ae2:	10 92 ee 32 	sts	0x32EE, r1
				  lightBufferToWriteTo = 2;
    6ae6:	82 e0       	ldi	r24, 0x02	; 2
    6ae8:	80 93 f4 2f 	sts	0x2FF4, r24
				  okToSendLightBuffer1 = true;
    6aec:	81 e0       	ldi	r24, 0x01	; 1
    6aee:	80 93 ec 32 	sts	0x32EC, r24
    6af2:	72 c0       	rjmp	.+228    	; 0x6bd8 <__vector_83+0x57c>
			  }
		  } else if (lightBufferToWriteTo == 2){
    6af4:	82 30       	cpi	r24, 0x02	; 2
    6af6:	09 f0       	breq	.+2      	; 0x6afa <__vector_83+0x49e>
    6af8:	6f c0       	rjmp	.+222    	; 0x6bd8 <__vector_83+0x57c>
			  if(lightBufferCounter == 0){
    6afa:	80 91 ee 32 	lds	r24, 0x32EE
    6afe:	88 23       	and	r24, r24
    6b00:	51 f4       	brne	.+20     	; 0x6b16 <__vector_83+0x4ba>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    6b02:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    6b06:	60 93 9c 32 	sts	0x329C, r22
    6b0a:	70 93 9d 32 	sts	0x329D, r23
    6b0e:	80 93 9e 32 	sts	0x329E, r24
    6b12:	90 93 9f 32 	sts	0x329F, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    6b16:	20 91 ee 32 	lds	r18, 0x32EE
    6b1a:	e2 2f       	mov	r30, r18
    6b1c:	f0 e0       	ldi	r31, 0x00	; 0
    6b1e:	ee 0f       	add	r30, r30
    6b20:	ff 1f       	adc	r31, r31
    6b22:	ee 0f       	add	r30, r30
    6b24:	ff 1f       	adc	r31, r31
    6b26:	ee 51       	subi	r30, 0x1E	; 30
    6b28:	fb 4b       	sbci	r31, 0xBB	; 187
    6b2a:	80 91 f0 53 	lds	r24, 0x53F0
    6b2e:	90 91 f1 53 	lds	r25, 0x53F1
    6b32:	a0 91 f2 53 	lds	r26, 0x53F2
    6b36:	b0 91 f3 53 	lds	r27, 0x53F3
    6b3a:	80 83       	st	Z, r24
    6b3c:	91 83       	std	Z+1, r25	; 0x01
    6b3e:	a2 83       	std	Z+2, r26	; 0x02
    6b40:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b42:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    6b44:	e2 2f       	mov	r30, r18
    6b46:	f0 e0       	ldi	r31, 0x00	; 0
    6b48:	ee 0f       	add	r30, r30
    6b4a:	ff 1f       	adc	r31, r31
    6b4c:	ee 0f       	add	r30, r30
    6b4e:	ff 1f       	adc	r31, r31
    6b50:	ee 51       	subi	r30, 0x1E	; 30
    6b52:	fb 4b       	sbci	r31, 0xBB	; 187
    6b54:	80 91 f4 53 	lds	r24, 0x53F4
    6b58:	90 91 f5 53 	lds	r25, 0x53F5
    6b5c:	a0 91 f6 53 	lds	r26, 0x53F6
    6b60:	b0 91 f7 53 	lds	r27, 0x53F7
    6b64:	80 83       	st	Z, r24
    6b66:	91 83       	std	Z+1, r25	; 0x01
    6b68:	a2 83       	std	Z+2, r26	; 0x02
    6b6a:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b6c:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    6b6e:	e2 2f       	mov	r30, r18
    6b70:	f0 e0       	ldi	r31, 0x00	; 0
    6b72:	ee 0f       	add	r30, r30
    6b74:	ff 1f       	adc	r31, r31
    6b76:	ee 0f       	add	r30, r30
    6b78:	ff 1f       	adc	r31, r31
    6b7a:	ee 51       	subi	r30, 0x1E	; 30
    6b7c:	fb 4b       	sbci	r31, 0xBB	; 187
    6b7e:	80 91 f8 53 	lds	r24, 0x53F8
    6b82:	90 91 f9 53 	lds	r25, 0x53F9
    6b86:	a0 91 fa 53 	lds	r26, 0x53FA
    6b8a:	b0 91 fb 53 	lds	r27, 0x53FB
    6b8e:	80 83       	st	Z, r24
    6b90:	91 83       	std	Z+1, r25	; 0x01
    6b92:	a2 83       	std	Z+2, r26	; 0x02
    6b94:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6b96:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    6b98:	e2 2f       	mov	r30, r18
    6b9a:	f0 e0       	ldi	r31, 0x00	; 0
    6b9c:	ee 0f       	add	r30, r30
    6b9e:	ff 1f       	adc	r31, r31
    6ba0:	ee 0f       	add	r30, r30
    6ba2:	ff 1f       	adc	r31, r31
    6ba4:	ee 51       	subi	r30, 0x1E	; 30
    6ba6:	fb 4b       	sbci	r31, 0xBB	; 187
    6ba8:	80 91 fc 53 	lds	r24, 0x53FC
    6bac:	90 91 fd 53 	lds	r25, 0x53FD
    6bb0:	a0 91 fe 53 	lds	r26, 0x53FE
    6bb4:	b0 91 ff 53 	lds	r27, 0x53FF
    6bb8:	80 83       	st	Z, r24
    6bba:	91 83       	std	Z+1, r25	; 0x01
    6bbc:	a2 83       	std	Z+2, r26	; 0x02
    6bbe:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6bc0:	2f 5f       	subi	r18, 0xFF	; 255
    6bc2:	20 93 ee 32 	sts	0x32EE, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6bc6:	28 32       	cpi	r18, 0x28	; 40
    6bc8:	39 f4       	brne	.+14     	; 0x6bd8 <__vector_83+0x57c>
				  lightBufferCounter=0;
    6bca:	10 92 ee 32 	sts	0x32EE, r1
				  lightBufferToWriteTo = 1;
    6bce:	81 e0       	ldi	r24, 0x01	; 1
    6bd0:	80 93 f4 2f 	sts	0x2FF4, r24
				  okToSendLightBuffer2 = true;
    6bd4:	80 93 ed 32 	sts	0x32ED, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6bd8:	20 91 d3 3b 	lds	r18, 0x3BD3
    6bdc:	30 91 d4 3b 	lds	r19, 0x3BD4
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6be0:	6f eb       	ldi	r22, 0xBF	; 191
    6be2:	29 36       	cpi	r18, 0x69	; 105
    6be4:	36 07       	cpc	r19, r22
    6be6:	30 f0       	brcs	.+12     	; 0x6bf4 <__vector_83+0x598>
    6be8:	80 91 dc 32 	lds	r24, 0x32DC
    6bec:	88 23       	and	r24, r24
    6bee:	11 f0       	breq	.+4      	; 0x6bf4 <__vector_83+0x598>
			  gainSelector--;
    6bf0:	81 50       	subi	r24, 0x01	; 1
    6bf2:	08 c0       	rjmp	.+16     	; 0x6c04 <__vector_83+0x5a8>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6bf4:	20 58       	subi	r18, 0x80	; 128
    6bf6:	3e 43       	sbci	r19, 0x3E	; 62
    6bf8:	20 f5       	brcc	.+72     	; 0x6c42 <__vector_83+0x5e6>
    6bfa:	80 91 dc 32 	lds	r24, 0x32DC
    6bfe:	88 30       	cpi	r24, 0x08	; 8
    6c00:	01 f1       	breq	.+64     	; 0x6c42 <__vector_83+0x5e6>
			  gainSelector++;
    6c02:	8f 5f       	subi	r24, 0xFF	; 255
    6c04:	80 93 dc 32 	sts	0x32DC, r24
			  Light_setGain();
    6c08:	0e 94 00 33 	call	0x6600	; 0x6600 <Light_setGain>
    6c0c:	1a c0       	rjmp	.+52     	; 0x6c42 <__vector_83+0x5e6>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6c0e:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <Sensors_ReadTemperature>
    6c12:	6a e0       	ldi	r22, 0x0A	; 10
    6c14:	70 e0       	ldi	r23, 0x00	; 0
    6c16:	0e 94 9c 60 	call	0xc138	; 0xc138 <__udivmodhi4>
    6c1a:	60 93 f2 32 	sts	0x32F2, r22
		quickHumidity = Sensors_ReadHumidity();
    6c1e:	0e 94 00 31 	call	0x6200	; 0x6200 <Sensors_ReadHumidity>
    6c22:	80 93 f3 32 	sts	0x32F3, r24
		quickPressure = Sensors_ReadPressure();
    6c26:	0e 94 22 31 	call	0x6244	; 0x6244 <Sensors_ReadPressure>
    6c2a:	80 93 f4 32 	sts	0x32F4, r24
		Light_readColors();
    6c2e:	0e 94 6d 32 	call	0x64da	; 0x64da <Light_readColors>
		quickLight = Light_returnColor(clear);
    6c32:	80 91 d3 3b 	lds	r24, 0x3BD3
    6c36:	90 91 d4 3b 	lds	r25, 0x3BD4
    6c3a:	80 93 f5 32 	sts	0x32F5, r24
    6c3e:	90 93 f6 32 	sts	0x32F6, r25
	}




}
    6c42:	ff 91       	pop	r31
    6c44:	ef 91       	pop	r30
    6c46:	df 91       	pop	r29
    6c48:	cf 91       	pop	r28
    6c4a:	bf 91       	pop	r27
    6c4c:	af 91       	pop	r26
    6c4e:	9f 91       	pop	r25
    6c50:	8f 91       	pop	r24
    6c52:	7f 91       	pop	r23
    6c54:	6f 91       	pop	r22
    6c56:	5f 91       	pop	r21
    6c58:	4f 91       	pop	r20
    6c5a:	3f 91       	pop	r19
    6c5c:	2f 91       	pop	r18
    6c5e:	1f 91       	pop	r17
    6c60:	0f 91       	pop	r16
    6c62:	ff 90       	pop	r15
    6c64:	ef 90       	pop	r14
    6c66:	df 90       	pop	r13
    6c68:	cf 90       	pop	r12
    6c6a:	bf 90       	pop	r11
    6c6c:	af 90       	pop	r10
    6c6e:	9f 90       	pop	r9
    6c70:	8f 90       	pop	r8
    6c72:	7f 90       	pop	r7
    6c74:	6f 90       	pop	r6
    6c76:	0f 90       	pop	r0
    6c78:	0b be       	out	0x3b, r0	; 59
    6c7a:	0f 90       	pop	r0
    6c7c:	0f be       	out	0x3f, r0	; 63
    6c7e:	0f 90       	pop	r0
    6c80:	1f 90       	pop	r1
    6c82:	18 95       	reti

00006c84 <RTC_init>:
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6c84:	e0 ea       	ldi	r30, 0xA0	; 160
    6c86:	f4 e0       	ldi	r31, 0x04	; 4
    6c88:	88 e0       	ldi	r24, 0x08	; 8
    6c8a:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6c8c:	84 e0       	ldi	r24, 0x04	; 4
    6c8e:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6c90:	8f e0       	ldi	r24, 0x0F	; 15
    6c92:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6c94:	81 e0       	ldi	r24, 0x01	; 1
    6c96:	84 83       	std	Z+4, r24	; 0x04


}
    6c98:	08 95       	ret

00006c9a <RTC_UTCSecsToTime>:

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    6c9a:	8f 92       	push	r8
    6c9c:	9f 92       	push	r9
    6c9e:	af 92       	push	r10
    6ca0:	bf 92       	push	r11
    6ca2:	cf 92       	push	r12
    6ca4:	df 92       	push	r13
    6ca6:	ef 92       	push	r14
    6ca8:	ff 92       	push	r15
    6caa:	0f 93       	push	r16
    6cac:	1f 93       	push	r17
    6cae:	cf 93       	push	r28
    6cb0:	df 93       	push	r29
    6cb2:	7b 01       	movw	r14, r22
    6cb4:	8c 01       	movw	r16, r24
    6cb6:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    6cb8:	2c e3       	ldi	r18, 0x3C	; 60
    6cba:	30 e0       	ldi	r19, 0x00	; 0
    6cbc:	40 e0       	ldi	r20, 0x00	; 0
    6cbe:	50 e0       	ldi	r21, 0x00	; 0
    6cc0:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6cc4:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6cc6:	c8 01       	movw	r24, r16
    6cc8:	b7 01       	movw	r22, r14
    6cca:	2c e3       	ldi	r18, 0x3C	; 60
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	40 e0       	ldi	r20, 0x00	; 0
    6cd0:	50 e0       	ldi	r21, 0x00	; 0
    6cd2:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6cd6:	12 2f       	mov	r17, r18
    6cd8:	03 2f       	mov	r16, r19
    6cda:	f4 2e       	mov	r15, r20
    6cdc:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6cde:	62 2f       	mov	r22, r18
    6ce0:	73 2f       	mov	r23, r19
    6ce2:	84 2f       	mov	r24, r20
    6ce4:	95 2f       	mov	r25, r21
    6ce6:	2c e3       	ldi	r18, 0x3C	; 60
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	40 e0       	ldi	r20, 0x00	; 0
    6cec:	50 e0       	ldi	r21, 0x00	; 0
    6cee:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6cf2:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6cf4:	61 2f       	mov	r22, r17
    6cf6:	70 2f       	mov	r23, r16
    6cf8:	8f 2d       	mov	r24, r15
    6cfa:	9e 2d       	mov	r25, r14
    6cfc:	2c e3       	ldi	r18, 0x3C	; 60
    6cfe:	30 e0       	ldi	r19, 0x00	; 0
    6d00:	40 e0       	ldi	r20, 0x00	; 0
    6d02:	50 e0       	ldi	r21, 0x00	; 0
    6d04:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6d08:	12 2f       	mov	r17, r18
    6d0a:	03 2f       	mov	r16, r19
    6d0c:	f4 2e       	mov	r15, r20
    6d0e:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    6d10:	62 2f       	mov	r22, r18
    6d12:	73 2f       	mov	r23, r19
    6d14:	84 2f       	mov	r24, r20
    6d16:	95 2f       	mov	r25, r21
    6d18:	28 e1       	ldi	r18, 0x18	; 24
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	40 e0       	ldi	r20, 0x00	; 0
    6d1e:	50 e0       	ldi	r21, 0x00	; 0
    6d20:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6d24:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    6d26:	61 2f       	mov	r22, r17
    6d28:	70 2f       	mov	r23, r16
    6d2a:	8f 2d       	mov	r24, r15
    6d2c:	9e 2d       	mov	r25, r14
    6d2e:	28 e1       	ldi	r18, 0x18	; 24
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	40 e0       	ldi	r20, 0x00	; 0
    6d34:	50 e0       	ldi	r21, 0x00	; 0
    6d36:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6d3a:	79 01       	movw	r14, r18
    6d3c:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    6d3e:	c8 01       	movw	r24, r16
    6d40:	b7 01       	movw	r22, r14
    6d42:	6c 5f       	subi	r22, 0xFC	; 252
    6d44:	7f 4f       	sbci	r23, 0xFF	; 255
    6d46:	8f 4f       	sbci	r24, 0xFF	; 255
    6d48:	9f 4f       	sbci	r25, 0xFF	; 255
    6d4a:	27 e0       	ldi	r18, 0x07	; 7
    6d4c:	30 e0       	ldi	r19, 0x00	; 0
    6d4e:	40 e0       	ldi	r20, 0x00	; 0
    6d50:	50 e0       	ldi	r21, 0x00	; 0
    6d52:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    6d56:	6f 5f       	subi	r22, 0xFF	; 255
    6d58:	6c 83       	std	Y+4, r22	; 0x04
    6d5a:	20 e0       	ldi	r18, 0x00	; 0
    6d5c:	aa 24       	eor	r10, r10
    6d5e:	bb 24       	eor	r11, r11
    6d60:	65 01       	movw	r12, r10
    6d62:	01 c0       	rjmp	.+2      	; 0x6d66 <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    6d64:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    6d66:	82 2e       	mov	r8, r18
    6d68:	99 24       	eor	r9, r9
    6d6a:	f4 01       	movw	r30, r8
    6d6c:	ee 54       	subi	r30, 0x4E	; 78
    6d6e:	f8 4f       	sbci	r31, 0xF8	; 248
    6d70:	cf 01       	movw	r24, r30
    6d72:	83 70       	andi	r24, 0x03	; 3
    6d74:	90 70       	andi	r25, 0x00	; 0
    6d76:	89 2b       	or	r24, r25
    6d78:	99 f4       	brne	.+38     	; 0x6da0 <RTC_UTCSecsToTime+0x106>
    6d7a:	cf 01       	movw	r24, r30
    6d7c:	64 e6       	ldi	r22, 0x64	; 100
    6d7e:	70 e0       	ldi	r23, 0x00	; 0
    6d80:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6d84:	89 2b       	or	r24, r25
    6d86:	39 f4       	brne	.+14     	; 0x6d96 <RTC_UTCSecsToTime+0xfc>
    6d88:	cf 01       	movw	r24, r30
    6d8a:	60 e9       	ldi	r22, 0x90	; 144
    6d8c:	71 e0       	ldi	r23, 0x01	; 1
    6d8e:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6d92:	89 2b       	or	r24, r25
    6d94:	29 f4       	brne	.+10     	; 0x6da0 <RTC_UTCSecsToTime+0x106>
    6d96:	8e e6       	ldi	r24, 0x6E	; 110
    6d98:	91 e0       	ldi	r25, 0x01	; 1
    6d9a:	a0 e0       	ldi	r26, 0x00	; 0
    6d9c:	b0 e0       	ldi	r27, 0x00	; 0
    6d9e:	04 c0       	rjmp	.+8      	; 0x6da8 <RTC_UTCSecsToTime+0x10e>
    6da0:	8d e6       	ldi	r24, 0x6D	; 109
    6da2:	91 e0       	ldi	r25, 0x01	; 1
    6da4:	a0 e0       	ldi	r26, 0x00	; 0
    6da6:	b0 e0       	ldi	r27, 0x00	; 0
    6da8:	a8 0e       	add	r10, r24
    6daa:	b9 1e       	adc	r11, r25
    6dac:	ca 1e       	adc	r12, r26
    6dae:	db 1e       	adc	r13, r27
    6db0:	c5 01       	movw	r24, r10
    6db2:	a0 e0       	ldi	r26, 0x00	; 0
    6db4:	b0 e0       	ldi	r27, 0x00	; 0
    6db6:	e8 16       	cp	r14, r24
    6db8:	f9 06       	cpc	r15, r25
    6dba:	0a 07       	cpc	r16, r26
    6dbc:	1b 07       	cpc	r17, r27
    6dbe:	90 f6       	brcc	.-92     	; 0x6d64 <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6dc0:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6dc2:	f4 01       	movw	r30, r8
    6dc4:	ee 54       	subi	r30, 0x4E	; 78
    6dc6:	f8 4f       	sbci	r31, 0xF8	; 248
    6dc8:	83 e0       	ldi	r24, 0x03	; 3
    6dca:	88 2e       	mov	r8, r24
    6dcc:	91 2c       	mov	r9, r1
    6dce:	8e 22       	and	r8, r30
    6dd0:	9f 22       	and	r9, r31
    6dd2:	81 14       	cp	r8, r1
    6dd4:	91 04       	cpc	r9, r1
    6dd6:	99 f4       	brne	.+38     	; 0x6dfe <RTC_UTCSecsToTime+0x164>
    6dd8:	cf 01       	movw	r24, r30
    6dda:	64 e6       	ldi	r22, 0x64	; 100
    6ddc:	70 e0       	ldi	r23, 0x00	; 0
    6dde:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6de2:	89 2b       	or	r24, r25
    6de4:	39 f4       	brne	.+14     	; 0x6df4 <RTC_UTCSecsToTime+0x15a>
    6de6:	cf 01       	movw	r24, r30
    6de8:	60 e9       	ldi	r22, 0x90	; 144
    6dea:	71 e0       	ldi	r23, 0x01	; 1
    6dec:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6df0:	89 2b       	or	r24, r25
    6df2:	29 f4       	brne	.+10     	; 0x6dfe <RTC_UTCSecsToTime+0x164>
    6df4:	8e e6       	ldi	r24, 0x6E	; 110
    6df6:	91 e0       	ldi	r25, 0x01	; 1
    6df8:	a0 e0       	ldi	r26, 0x00	; 0
    6dfa:	b0 e0       	ldi	r27, 0x00	; 0
    6dfc:	04 c0       	rjmp	.+8      	; 0x6e06 <RTC_UTCSecsToTime+0x16c>
    6dfe:	8d e6       	ldi	r24, 0x6D	; 109
    6e00:	91 e0       	ldi	r25, 0x01	; 1
    6e02:	a0 e0       	ldi	r26, 0x00	; 0
    6e04:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6e06:	a8 1a       	sub	r10, r24
    6e08:	b9 0a       	sbc	r11, r25
    6e0a:	ca 0a       	sbc	r12, r26
    6e0c:	db 0a       	sbc	r13, r27
    6e0e:	98 01       	movw	r18, r16
    6e10:	87 01       	movw	r16, r14
    6e12:	0a 19       	sub	r16, r10
    6e14:	1b 09       	sbc	r17, r11
    6e16:	2c 09       	sbc	r18, r12
    6e18:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    6e1a:	cf 01       	movw	r24, r30
    6e1c:	64 e6       	ldi	r22, 0x64	; 100
    6e1e:	70 e0       	ldi	r23, 0x00	; 0
    6e20:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6e24:	7c 01       	movw	r14, r24
    6e26:	cf 01       	movw	r24, r30
    6e28:	60 e9       	ldi	r22, 0x90	; 144
    6e2a:	71 e0       	ldi	r23, 0x01	; 1
    6e2c:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6e30:	ac 01       	movw	r20, r24
    6e32:	e9 e2       	ldi	r30, 0x29	; 41
    6e34:	f2 e3       	ldi	r31, 0x32	; 50
    6e36:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    6e38:	61 30       	cpi	r22, 0x01	; 1
    6e3a:	51 f4       	brne	.+20     	; 0x6e50 <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    6e3c:	81 14       	cp	r8, r1
    6e3e:	91 04       	cpc	r9, r1
    6e40:	49 f4       	brne	.+18     	; 0x6e54 <RTC_UTCSecsToTime+0x1ba>
    6e42:	e1 14       	cp	r14, r1
    6e44:	f1 04       	cpc	r15, r1
    6e46:	41 f4       	brne	.+16     	; 0x6e58 <RTC_UTCSecsToTime+0x1be>
    6e48:	41 15       	cp	r20, r1
    6e4a:	51 05       	cpc	r21, r1
    6e4c:	29 f0       	breq	.+10     	; 0x6e58 <RTC_UTCSecsToTime+0x1be>
    6e4e:	02 c0       	rjmp	.+4      	; 0x6e54 <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    6e50:	80 81       	ld	r24, Z
    6e52:	03 c0       	rjmp	.+6      	; 0x6e5a <RTC_UTCSecsToTime+0x1c0>
    6e54:	8c e1       	ldi	r24, 0x1C	; 28
    6e56:	01 c0       	rjmp	.+2      	; 0x6e5a <RTC_UTCSecsToTime+0x1c0>
    6e58:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	a0 e0       	ldi	r26, 0x00	; 0
    6e5e:	b0 e0       	ldi	r27, 0x00	; 0
    6e60:	08 17       	cp	r16, r24
    6e62:	19 07       	cpc	r17, r25
    6e64:	2a 07       	cpc	r18, r26
    6e66:	3b 07       	cpc	r19, r27
    6e68:	40 f0       	brcs	.+16     	; 0x6e7a <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    6e6a:	08 1b       	sub	r16, r24
    6e6c:	19 0b       	sbc	r17, r25
    6e6e:	2a 0b       	sbc	r18, r26
    6e70:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6e72:	6f 5f       	subi	r22, 0xFF	; 255
    6e74:	31 96       	adiw	r30, 0x01	; 1
    6e76:	6c 30       	cpi	r22, 0x0C	; 12
    6e78:	f9 f6       	brne	.-66     	; 0x6e38 <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    6e7a:	6f 5f       	subi	r22, 0xFF	; 255
    6e7c:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6e7e:	80 2f       	mov	r24, r16
    6e80:	8f 5f       	subi	r24, 0xFF	; 255
    6e82:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6e84:	ce 01       	movw	r24, r28
    6e86:	df 91       	pop	r29
    6e88:	cf 91       	pop	r28
    6e8a:	1f 91       	pop	r17
    6e8c:	0f 91       	pop	r16
    6e8e:	ff 90       	pop	r15
    6e90:	ef 90       	pop	r14
    6e92:	df 90       	pop	r13
    6e94:	cf 90       	pop	r12
    6e96:	bf 90       	pop	r11
    6e98:	af 90       	pop	r10
    6e9a:	9f 90       	pop	r9
    6e9c:	8f 90       	pop	r8
    6e9e:	08 95       	ret

00006ea0 <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6ea0:	4f 92       	push	r4
    6ea2:	5f 92       	push	r5
    6ea4:	6f 92       	push	r6
    6ea6:	7f 92       	push	r7
    6ea8:	8f 92       	push	r8
    6eaa:	9f 92       	push	r9
    6eac:	af 92       	push	r10
    6eae:	bf 92       	push	r11
    6eb0:	cf 92       	push	r12
    6eb2:	df 92       	push	r13
    6eb4:	ef 92       	push	r14
    6eb6:	ff 92       	push	r15
    6eb8:	0f 93       	push	r16
    6eba:	1f 93       	push	r17
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6ec2:	dc 01       	movw	r26, r24
    6ec4:	17 96       	adiw	r26, 0x07	; 7
    6ec6:	1c 91       	ld	r17, X
    6ec8:	61 2f       	mov	r22, r17
    6eca:	70 e0       	ldi	r23, 0x00	; 0
    6ecc:	80 e0       	ldi	r24, 0x00	; 0
    6ece:	90 e0       	ldi	r25, 0x00	; 0
    6ed0:	20 e8       	ldi	r18, 0x80	; 128
    6ed2:	33 e3       	ldi	r19, 0x33	; 51
    6ed4:	41 ee       	ldi	r20, 0xE1	; 225
    6ed6:	51 e0       	ldi	r21, 0x01	; 1
    6ed8:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    6edc:	5b 01       	movw	r10, r22
    6ede:	6c 01       	movw	r12, r24
    6ee0:	22 eb       	ldi	r18, 0xB2	; 178
    6ee2:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6ee4:	e1 2f       	mov	r30, r17
    6ee6:	f0 e0       	ldi	r31, 0x00	; 0
    6ee8:	ee 54       	subi	r30, 0x4E	; 78
    6eea:	f8 4f       	sbci	r31, 0xF8	; 248
    6eec:	1d c0       	rjmp	.+58     	; 0x6f28 <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6eee:	c9 01       	movw	r24, r18
    6ef0:	83 70       	andi	r24, 0x03	; 3
    6ef2:	90 70       	andi	r25, 0x00	; 0
    6ef4:	89 2b       	or	r24, r25
    6ef6:	b1 f4       	brne	.+44     	; 0x6f24 <RTC_TimeToUTCSecs+0x84>
    6ef8:	c9 01       	movw	r24, r18
    6efa:	64 e6       	ldi	r22, 0x64	; 100
    6efc:	70 e0       	ldi	r23, 0x00	; 0
    6efe:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6f02:	89 2b       	or	r24, r25
    6f04:	39 f4       	brne	.+14     	; 0x6f14 <RTC_TimeToUTCSecs+0x74>
    6f06:	c9 01       	movw	r24, r18
    6f08:	60 e9       	ldi	r22, 0x90	; 144
    6f0a:	71 e0       	ldi	r23, 0x01	; 1
    6f0c:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6f10:	89 2b       	or	r24, r25
    6f12:	41 f4       	brne	.+16     	; 0x6f24 <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6f14:	80 e8       	ldi	r24, 0x80	; 128
    6f16:	91 e5       	ldi	r25, 0x51	; 81
    6f18:	a1 e0       	ldi	r26, 0x01	; 1
    6f1a:	b0 e0       	ldi	r27, 0x00	; 0
    6f1c:	a8 0e       	add	r10, r24
    6f1e:	b9 1e       	adc	r11, r25
    6f20:	ca 1e       	adc	r12, r26
    6f22:	db 1e       	adc	r13, r27
    6f24:	2f 5f       	subi	r18, 0xFF	; 255
    6f26:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    6f28:	2e 17       	cp	r18, r30
    6f2a:	3f 07       	cpc	r19, r31
    6f2c:	01 f7       	brne	.-64     	; 0x6eee <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6f2e:	d4 01       	movw	r26, r8
    6f30:	16 96       	adiw	r26, 0x06	; 6
    6f32:	8c 91       	ld	r24, X
    6f34:	48 2e       	mov	r4, r24
    6f36:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    6f38:	c9 01       	movw	r24, r18
    6f3a:	64 e6       	ldi	r22, 0x64	; 100
    6f3c:	70 e0       	ldi	r23, 0x00	; 0
    6f3e:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6f42:	7c 01       	movw	r14, r24
    6f44:	c9 01       	movw	r24, r18
    6f46:	60 e9       	ldi	r22, 0x90	; 144
    6f48:	71 e0       	ldi	r23, 0x01	; 1
    6f4a:	0e 94 b0 60 	call	0xc160	; 0xc160 <__divmodhi4>
    6f4e:	8c 01       	movw	r16, r24
    6f50:	c1 e0       	ldi	r28, 0x01	; 1
    6f52:	d0 e0       	ldi	r29, 0x00	; 0
    6f54:	93 e0       	ldi	r25, 0x03	; 3
    6f56:	69 2e       	mov	r6, r25
    6f58:	71 2c       	mov	r7, r1
    6f5a:	62 22       	and	r6, r18
    6f5c:	73 22       	and	r7, r19
    6f5e:	27 c0       	rjmp	.+78     	; 0x6fae <RTC_TimeToUTCSecs+0x10e>
    6f60:	c2 30       	cpi	r28, 0x02	; 2
    6f62:	d1 05       	cpc	r29, r1
    6f64:	91 f4       	brne	.+36     	; 0x6f8a <RTC_TimeToUTCSecs+0xea>
    6f66:	61 14       	cp	r6, r1
    6f68:	71 04       	cpc	r7, r1
    6f6a:	79 f4       	brne	.+30     	; 0x6f8a <RTC_TimeToUTCSecs+0xea>
    6f6c:	e1 14       	cp	r14, r1
    6f6e:	f1 04       	cpc	r15, r1
    6f70:	19 f4       	brne	.+6      	; 0x6f78 <RTC_TimeToUTCSecs+0xd8>
    6f72:	01 15       	cp	r16, r1
    6f74:	11 05       	cpc	r17, r1
    6f76:	49 f4       	brne	.+18     	; 0x6f8a <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    6f78:	80 e8       	ldi	r24, 0x80	; 128
    6f7a:	9b e3       	ldi	r25, 0x3B	; 59
    6f7c:	a6 e2       	ldi	r26, 0x26	; 38
    6f7e:	b0 e0       	ldi	r27, 0x00	; 0
    6f80:	a8 0e       	add	r10, r24
    6f82:	b9 1e       	adc	r11, r25
    6f84:	ca 1e       	adc	r12, r26
    6f86:	db 1e       	adc	r13, r27
    6f88:	11 c0       	rjmp	.+34     	; 0x6fac <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    6f8a:	fe 01       	movw	r30, r28
    6f8c:	e8 5d       	subi	r30, 0xD8	; 216
    6f8e:	fd 4c       	sbci	r31, 0xCD	; 205
    6f90:	60 81       	ld	r22, Z
    6f92:	70 e0       	ldi	r23, 0x00	; 0
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	20 e8       	ldi	r18, 0x80	; 128
    6f9a:	31 e5       	ldi	r19, 0x51	; 81
    6f9c:	41 e0       	ldi	r20, 0x01	; 1
    6f9e:	50 e0       	ldi	r21, 0x00	; 0
    6fa0:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    6fa4:	a6 0e       	add	r10, r22
    6fa6:	b7 1e       	adc	r11, r23
    6fa8:	c8 1e       	adc	r12, r24
    6faa:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6fac:	21 96       	adiw	r28, 0x01	; 1
    6fae:	c4 15       	cp	r28, r4
    6fb0:	d5 05       	cpc	r29, r5
    6fb2:	b4 f2       	brlt	.-84     	; 0x6f60 <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6fb4:	d4 01       	movw	r26, r8
    6fb6:	13 96       	adiw	r26, 0x03	; 3
    6fb8:	6c 91       	ld	r22, X
    6fba:	70 e0       	ldi	r23, 0x00	; 0
    6fbc:	80 e0       	ldi	r24, 0x00	; 0
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	20 e1       	ldi	r18, 0x10	; 16
    6fc2:	3e e0       	ldi	r19, 0x0E	; 14
    6fc4:	40 e0       	ldi	r20, 0x00	; 0
    6fc6:	50 e0       	ldi	r21, 0x00	; 0
    6fc8:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    6fcc:	7b 01       	movw	r14, r22
    6fce:	8c 01       	movw	r16, r24
    6fd0:	f4 01       	movw	r30, r8
    6fd2:	62 81       	ldd	r22, Z+2	; 0x02
    6fd4:	70 e0       	ldi	r23, 0x00	; 0
    6fd6:	80 e0       	ldi	r24, 0x00	; 0
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	2c e3       	ldi	r18, 0x3C	; 60
    6fdc:	30 e0       	ldi	r19, 0x00	; 0
    6fde:	40 e0       	ldi	r20, 0x00	; 0
    6fe0:	50 e0       	ldi	r21, 0x00	; 0
    6fe2:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    6fe6:	e6 0e       	add	r14, r22
    6fe8:	f7 1e       	adc	r15, r23
    6fea:	08 1f       	adc	r16, r24
    6fec:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    6fee:	d4 01       	movw	r26, r8
    6ff0:	11 96       	adiw	r26, 0x01	; 1
    6ff2:	8c 91       	ld	r24, X
    6ff4:	11 97       	sbiw	r26, 0x01	; 1
    6ff6:	e8 0e       	add	r14, r24
    6ff8:	f1 1c       	adc	r15, r1
    6ffa:	01 1d       	adc	r16, r1
    6ffc:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    6ffe:	15 96       	adiw	r26, 0x05	; 5
    7000:	6c 91       	ld	r22, X
    7002:	70 e0       	ldi	r23, 0x00	; 0
    7004:	61 50       	subi	r22, 0x01	; 1
    7006:	70 40       	sbci	r23, 0x00	; 0
    7008:	88 27       	eor	r24, r24
    700a:	77 fd       	sbrc	r23, 7
    700c:	80 95       	com	r24
    700e:	98 2f       	mov	r25, r24
    7010:	20 e8       	ldi	r18, 0x80	; 128
    7012:	31 e5       	ldi	r19, 0x51	; 81
    7014:	41 e0       	ldi	r20, 0x01	; 1
    7016:	50 e0       	ldi	r21, 0x00	; 0
    7018:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    701c:	e6 0e       	add	r14, r22
    701e:	f7 1e       	adc	r15, r23
    7020:	08 1f       	adc	r16, r24
    7022:	19 1f       	adc	r17, r25
    7024:	ea 0c       	add	r14, r10
    7026:	fb 1c       	adc	r15, r11
    7028:	0c 1d       	adc	r16, r12
    702a:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    702c:	b7 01       	movw	r22, r14
    702e:	c8 01       	movw	r24, r16
    7030:	df 91       	pop	r29
    7032:	cf 91       	pop	r28
    7034:	1f 91       	pop	r17
    7036:	0f 91       	pop	r16
    7038:	ff 90       	pop	r15
    703a:	ef 90       	pop	r14
    703c:	df 90       	pop	r13
    703e:	cf 90       	pop	r12
    7040:	bf 90       	pop	r11
    7042:	af 90       	pop	r10
    7044:	9f 90       	pop	r9
    7046:	8f 90       	pop	r8
    7048:	7f 90       	pop	r7
    704a:	6f 90       	pop	r6
    704c:	5f 90       	pop	r5
    704e:	4f 90       	pop	r4
    7050:	08 95       	ret

00007052 <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    7052:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    7054:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    7056:	e0 ea       	ldi	r30, 0xA0	; 160
    7058:	f4 e0       	ldi	r31, 0x04	; 4
    705a:	46 83       	std	Z+6, r20	; 0x06
    705c:	fb 01       	movw	r30, r22
    705e:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    7060:	a0 ea       	ldi	r26, 0xA0	; 160
    7062:	b4 e0       	ldi	r27, 0x04	; 4
    7064:	0d c0       	rjmp	.+26     	; 0x7080 <RTC_sendBytes+0x2e>
    7066:	80 91 a4 04 	lds	r24, 0x04A4
    706a:	86 ff       	sbrs	r24, 6
    706c:	fc cf       	rjmp	.-8      	; 0x7066 <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    706e:	80 91 a4 04 	lds	r24, 0x04A4
    7072:	84 fd       	sbrc	r24, 4
    7074:	07 c0       	rjmp	.+14     	; 0x7084 <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    7076:	81 91       	ld	r24, Z+
    7078:	17 96       	adiw	r26, 0x07	; 7
    707a:	8c 93       	st	X, r24
    707c:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    707e:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    7080:	95 17       	cp	r25, r21
    7082:	88 f3       	brcs	.-30     	; 0x7066 <RTC_sendBytes+0x14>
    7084:	08 95       	ret

00007086 <RTC_setTime>:



} 

void RTC_setTime(void) {
    7086:	df 93       	push	r29
    7088:	cf 93       	push	r28
    708a:	cd b7       	in	r28, 0x3d	; 61
    708c:	de b7       	in	r29, 0x3e	; 62
    708e:	29 97       	sbiw	r28, 0x09	; 9
    7090:	cd bf       	out	0x3d, r28	; 61
    7092:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    7094:	50 91 35 4f 	lds	r21, 0x4F35
    7098:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    709a:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    709c:	40 91 2e 4f 	lds	r20, 0x4F2E
    70a0:	84 2f       	mov	r24, r20
    70a2:	6a e0       	ldi	r22, 0x0A	; 10
    70a4:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    70a8:	28 2f       	mov	r18, r24
    70aa:	30 e0       	ldi	r19, 0x00	; 0
    70ac:	b4 e0       	ldi	r27, 0x04	; 4
    70ae:	22 0f       	add	r18, r18
    70b0:	33 1f       	adc	r19, r19
    70b2:	ba 95       	dec	r27
    70b4:	e1 f7       	brne	.-8      	; 0x70ae <RTC_setTime+0x28>
    70b6:	84 2f       	mov	r24, r20
    70b8:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    70bc:	92 2b       	or	r25, r18
    70be:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    70c0:	40 91 2f 4f 	lds	r20, 0x4F2F
    70c4:	84 2f       	mov	r24, r20
    70c6:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    70ca:	28 2f       	mov	r18, r24
    70cc:	30 e0       	ldi	r19, 0x00	; 0
    70ce:	a4 e0       	ldi	r26, 0x04	; 4
    70d0:	22 0f       	add	r18, r18
    70d2:	33 1f       	adc	r19, r19
    70d4:	aa 95       	dec	r26
    70d6:	e1 f7       	brne	.-8      	; 0x70d0 <RTC_setTime+0x4a>
    70d8:	84 2f       	mov	r24, r20
    70da:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    70de:	92 2b       	or	r25, r18
    70e0:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    70e2:	40 91 30 4f 	lds	r20, 0x4F30
    70e6:	84 2f       	mov	r24, r20
    70e8:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    70ec:	28 2f       	mov	r18, r24
    70ee:	30 e0       	ldi	r19, 0x00	; 0
    70f0:	f4 e0       	ldi	r31, 0x04	; 4
    70f2:	22 0f       	add	r18, r18
    70f4:	33 1f       	adc	r19, r19
    70f6:	fa 95       	dec	r31
    70f8:	e1 f7       	brne	.-8      	; 0x70f2 <RTC_setTime+0x6c>
    70fa:	84 2f       	mov	r24, r20
    70fc:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7100:	92 2b       	or	r25, r18
    7102:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    7104:	30 91 31 4f 	lds	r19, 0x4F31
    7108:	83 2f       	mov	r24, r19
    710a:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    710e:	29 2f       	mov	r18, r25
    7110:	20 68       	ori	r18, 0x80	; 128
    7112:	83 2f       	mov	r24, r19
    7114:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7118:	82 95       	swap	r24
    711a:	80 7f       	andi	r24, 0xF0	; 240
    711c:	28 2b       	or	r18, r24
    711e:	85 2f       	mov	r24, r21
    7120:	64 e6       	ldi	r22, 0x64	; 100
    7122:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7126:	82 95       	swap	r24
    7128:	88 0f       	add	r24, r24
    712a:	88 0f       	add	r24, r24
    712c:	80 7c       	andi	r24, 0xC0	; 192
    712e:	28 2b       	or	r18, r24
    7130:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    7132:	80 91 32 4f 	lds	r24, 0x4F32
    7136:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    7138:	40 91 33 4f 	lds	r20, 0x4F33
    713c:	84 2f       	mov	r24, r20
    713e:	6a e0       	ldi	r22, 0x0A	; 10
    7140:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7144:	28 2f       	mov	r18, r24
    7146:	30 e0       	ldi	r19, 0x00	; 0
    7148:	e4 e0       	ldi	r30, 0x04	; 4
    714a:	22 0f       	add	r18, r18
    714c:	33 1f       	adc	r19, r19
    714e:	ea 95       	dec	r30
    7150:	e1 f7       	brne	.-8      	; 0x714a <RTC_setTime+0xc4>
    7152:	84 2f       	mov	r24, r20
    7154:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7158:	92 2b       	or	r25, r18
    715a:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    715c:	40 91 34 4f 	lds	r20, 0x4F34
    7160:	84 2f       	mov	r24, r20
    7162:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7166:	28 2f       	mov	r18, r24
    7168:	30 e0       	ldi	r19, 0x00	; 0
    716a:	74 e0       	ldi	r23, 0x04	; 4
    716c:	22 0f       	add	r18, r18
    716e:	33 1f       	adc	r19, r19
    7170:	7a 95       	dec	r23
    7172:	e1 f7       	brne	.-8      	; 0x716c <RTC_setTime+0xe6>
    7174:	84 2f       	mov	r24, r20
    7176:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    717a:	92 2b       	or	r25, r18
    717c:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    717e:	85 2f       	mov	r24, r21
    7180:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7184:	28 2f       	mov	r18, r24
    7186:	30 e0       	ldi	r19, 0x00	; 0
    7188:	44 e0       	ldi	r20, 0x04	; 4
    718a:	22 0f       	add	r18, r18
    718c:	33 1f       	adc	r19, r19
    718e:	4a 95       	dec	r20
    7190:	e1 f7       	brne	.-8      	; 0x718a <RTC_setTime+0x104>
    7192:	85 2f       	mov	r24, r21
    7194:	0e 94 90 60 	call	0xc120	; 0xc120 <__udivmodqi4>
    7198:	92 2b       	or	r25, r18
    719a:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    719c:	89 e0       	ldi	r24, 0x09	; 9
    719e:	be 01       	movw	r22, r28
    71a0:	6f 5f       	subi	r22, 0xFF	; 255
    71a2:	7f 4f       	sbci	r23, 0xFF	; 255
    71a4:	40 ed       	ldi	r20, 0xD0	; 208
    71a6:	0e 94 29 38 	call	0x7052	; 0x7052 <RTC_sendBytes>
}
    71aa:	29 96       	adiw	r28, 0x09	; 9
    71ac:	cd bf       	out	0x3d, r28	; 61
    71ae:	de bf       	out	0x3e, r29	; 62
    71b0:	cf 91       	pop	r28
    71b2:	df 91       	pop	r29
    71b4:	08 95       	ret

000071b6 <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    71b6:	4e e2       	ldi	r20, 0x2E	; 46
    71b8:	5f e4       	ldi	r21, 0x4F	; 79
    71ba:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <RTC_UTCSecsToTime>
	RTC_setTime();
    71be:	0e 94 43 38 	call	0x7086	; 0x7086 <RTC_setTime>
}
    71c2:	08 95       	ret

000071c4 <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    71c4:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    71c6:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    71c8:	e0 ea       	ldi	r30, 0xA0	; 160
    71ca:	f4 e0       	ldi	r31, 0x04	; 4
    71cc:	46 83       	std	Z+6, r20	; 0x06
    71ce:	fb 01       	movw	r30, r22
    71d0:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    71d2:	a0 ea       	ldi	r26, 0xA0	; 160
    71d4:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    71d6:	22 e0       	ldi	r18, 0x02	; 2
    71d8:	0b c0       	rjmp	.+22     	; 0x71f0 <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    71da:	80 91 a4 04 	lds	r24, 0x04A4
    71de:	87 ff       	sbrs	r24, 7
    71e0:	fc cf       	rjmp	.-8      	; 0x71da <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    71e2:	80 91 a7 04 	lds	r24, 0x04A7
    71e6:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    71e8:	13 96       	adiw	r26, 0x03	; 3
    71ea:	2c 93       	st	X, r18
    71ec:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    71ee:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    71f0:	95 17       	cp	r25, r21
    71f2:	98 f3       	brcs	.-26     	; 0x71da <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    71f4:	87 e0       	ldi	r24, 0x07	; 7
    71f6:	e0 ea       	ldi	r30, 0xA0	; 160
    71f8:	f4 e0       	ldi	r31, 0x04	; 4
    71fa:	83 83       	std	Z+3, r24	; 0x03

}
    71fc:	08 95       	ret

000071fe <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    71fe:	0f 93       	push	r16
    7200:	1f 93       	push	r17
    7202:	df 93       	push	r29
    7204:	cf 93       	push	r28
    7206:	cd b7       	in	r28, 0x3d	; 61
    7208:	de b7       	in	r29, 0x3e	; 62
    720a:	28 97       	sbiw	r28, 0x08	; 8
    720c:	cd bf       	out	0x3d, r28	; 61
    720e:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    7210:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    7212:	81 e0       	ldi	r24, 0x01	; 1
    7214:	8e 01       	movw	r16, r28
    7216:	0f 5f       	subi	r16, 0xFF	; 255
    7218:	1f 4f       	sbci	r17, 0xFF	; 255
    721a:	b8 01       	movw	r22, r16
    721c:	40 ed       	ldi	r20, 0xD0	; 208
    721e:	0e 94 29 38 	call	0x7052	; 0x7052 <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    7222:	88 e0       	ldi	r24, 0x08	; 8
    7224:	b8 01       	movw	r22, r16
    7226:	40 ed       	ldi	r20, 0xD0	; 208
    7228:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    722c:	49 81       	ldd	r20, Y+1	; 0x01
    722e:	84 2f       	mov	r24, r20
    7230:	82 95       	swap	r24
    7232:	8f 70       	andi	r24, 0x0F	; 15
    7234:	90 e0       	ldi	r25, 0x00	; 0
    7236:	9c 01       	movw	r18, r24
    7238:	63 e0       	ldi	r22, 0x03	; 3
    723a:	22 0f       	add	r18, r18
    723c:	33 1f       	adc	r19, r19
    723e:	6a 95       	dec	r22
    7240:	e1 f7       	brne	.-8      	; 0x723a <RTC_getTime+0x3c>
    7242:	88 0f       	add	r24, r24
    7244:	99 1f       	adc	r25, r25
    7246:	28 0f       	add	r18, r24
    7248:	39 1f       	adc	r19, r25
    724a:	4f 70       	andi	r20, 0x0F	; 15
    724c:	42 0f       	add	r20, r18
    724e:	40 93 2e 4f 	sts	0x4F2E, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    7252:	4a 81       	ldd	r20, Y+2	; 0x02
    7254:	84 2f       	mov	r24, r20
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	80 77       	andi	r24, 0x70	; 112
    725a:	90 70       	andi	r25, 0x00	; 0
    725c:	24 e0       	ldi	r18, 0x04	; 4
    725e:	95 95       	asr	r25
    7260:	87 95       	ror	r24
    7262:	2a 95       	dec	r18
    7264:	e1 f7       	brne	.-8      	; 0x725e <RTC_getTime+0x60>
    7266:	9c 01       	movw	r18, r24
    7268:	03 e0       	ldi	r16, 0x03	; 3
    726a:	22 0f       	add	r18, r18
    726c:	33 1f       	adc	r19, r19
    726e:	0a 95       	dec	r16
    7270:	e1 f7       	brne	.-8      	; 0x726a <RTC_getTime+0x6c>
    7272:	88 0f       	add	r24, r24
    7274:	99 1f       	adc	r25, r25
    7276:	28 0f       	add	r18, r24
    7278:	39 1f       	adc	r19, r25
    727a:	4f 70       	andi	r20, 0x0F	; 15
    727c:	42 0f       	add	r20, r18
    727e:	40 93 2f 4f 	sts	0x4F2F, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    7282:	4b 81       	ldd	r20, Y+3	; 0x03
    7284:	84 2f       	mov	r24, r20
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	80 77       	andi	r24, 0x70	; 112
    728a:	90 70       	andi	r25, 0x00	; 0
    728c:	b4 e0       	ldi	r27, 0x04	; 4
    728e:	95 95       	asr	r25
    7290:	87 95       	ror	r24
    7292:	ba 95       	dec	r27
    7294:	e1 f7       	brne	.-8      	; 0x728e <RTC_getTime+0x90>
    7296:	9c 01       	movw	r18, r24
    7298:	a3 e0       	ldi	r26, 0x03	; 3
    729a:	22 0f       	add	r18, r18
    729c:	33 1f       	adc	r19, r19
    729e:	aa 95       	dec	r26
    72a0:	e1 f7       	brne	.-8      	; 0x729a <RTC_getTime+0x9c>
    72a2:	88 0f       	add	r24, r24
    72a4:	99 1f       	adc	r25, r25
    72a6:	28 0f       	add	r18, r24
    72a8:	39 1f       	adc	r19, r25
    72aa:	4f 70       	andi	r20, 0x0F	; 15
    72ac:	42 0f       	add	r20, r18
    72ae:	40 93 30 4f 	sts	0x4F30, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    72b2:	4c 81       	ldd	r20, Y+4	; 0x04
    72b4:	64 2f       	mov	r22, r20
    72b6:	70 e0       	ldi	r23, 0x00	; 0
    72b8:	cb 01       	movw	r24, r22
    72ba:	80 73       	andi	r24, 0x30	; 48
    72bc:	90 70       	andi	r25, 0x00	; 0
    72be:	e4 e0       	ldi	r30, 0x04	; 4
    72c0:	95 95       	asr	r25
    72c2:	87 95       	ror	r24
    72c4:	ea 95       	dec	r30
    72c6:	e1 f7       	brne	.-8      	; 0x72c0 <RTC_getTime+0xc2>
    72c8:	9c 01       	movw	r18, r24
    72ca:	53 e0       	ldi	r21, 0x03	; 3
    72cc:	22 0f       	add	r18, r18
    72ce:	33 1f       	adc	r19, r19
    72d0:	5a 95       	dec	r21
    72d2:	e1 f7       	brne	.-8      	; 0x72cc <RTC_getTime+0xce>
    72d4:	88 0f       	add	r24, r24
    72d6:	99 1f       	adc	r25, r25
    72d8:	28 0f       	add	r18, r24
    72da:	39 1f       	adc	r19, r25
    72dc:	4f 70       	andi	r20, 0x0F	; 15
    72de:	42 0f       	add	r20, r18
    72e0:	40 93 31 4f 	sts	0x4F31, r20
	time.Wday = timeData[4];
    72e4:	8d 81       	ldd	r24, Y+5	; 0x05
    72e6:	80 93 32 4f 	sts	0x4F32, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    72ea:	4e 81       	ldd	r20, Y+6	; 0x06
    72ec:	84 2f       	mov	r24, r20
    72ee:	90 e0       	ldi	r25, 0x00	; 0
    72f0:	80 73       	andi	r24, 0x30	; 48
    72f2:	90 70       	andi	r25, 0x00	; 0
    72f4:	14 e0       	ldi	r17, 0x04	; 4
    72f6:	95 95       	asr	r25
    72f8:	87 95       	ror	r24
    72fa:	1a 95       	dec	r17
    72fc:	e1 f7       	brne	.-8      	; 0x72f6 <RTC_getTime+0xf8>
    72fe:	9c 01       	movw	r18, r24
    7300:	b3 e0       	ldi	r27, 0x03	; 3
    7302:	22 0f       	add	r18, r18
    7304:	33 1f       	adc	r19, r19
    7306:	ba 95       	dec	r27
    7308:	e1 f7       	brne	.-8      	; 0x7302 <RTC_getTime+0x104>
    730a:	88 0f       	add	r24, r24
    730c:	99 1f       	adc	r25, r25
    730e:	28 0f       	add	r18, r24
    7310:	39 1f       	adc	r19, r25
    7312:	4f 70       	andi	r20, 0x0F	; 15
    7314:	42 0f       	add	r20, r18
    7316:	40 93 33 4f 	sts	0x4F33, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    731a:	4f 81       	ldd	r20, Y+7	; 0x07
    731c:	84 2f       	mov	r24, r20
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	80 71       	andi	r24, 0x10	; 16
    7322:	90 70       	andi	r25, 0x00	; 0
    7324:	f4 e0       	ldi	r31, 0x04	; 4
    7326:	95 95       	asr	r25
    7328:	87 95       	ror	r24
    732a:	fa 95       	dec	r31
    732c:	e1 f7       	brne	.-8      	; 0x7326 <RTC_getTime+0x128>
    732e:	9c 01       	movw	r18, r24
    7330:	e3 e0       	ldi	r30, 0x03	; 3
    7332:	22 0f       	add	r18, r18
    7334:	33 1f       	adc	r19, r19
    7336:	ea 95       	dec	r30
    7338:	e1 f7       	brne	.-8      	; 0x7332 <RTC_getTime+0x134>
    733a:	88 0f       	add	r24, r24
    733c:	99 1f       	adc	r25, r25
    733e:	28 0f       	add	r18, r24
    7340:	39 1f       	adc	r19, r25
    7342:	4f 70       	andi	r20, 0x0F	; 15
    7344:	42 0f       	add	r20, r18
    7346:	40 93 34 4f 	sts	0x4F34, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    734a:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    734c:	42 2f       	mov	r20, r18
    734e:	4f 70       	andi	r20, 0x0F	; 15
    7350:	42 5e       	subi	r20, 0xE2	; 226
    7352:	60 75       	andi	r22, 0x50	; 80
    7354:	70 70       	andi	r23, 0x00	; 0
    7356:	86 e0       	ldi	r24, 0x06	; 6
    7358:	75 95       	asr	r23
    735a:	67 95       	ror	r22
    735c:	8a 95       	dec	r24
    735e:	e1 f7       	brne	.-8      	; 0x7358 <RTC_getTime+0x15a>
    7360:	84 e6       	ldi	r24, 0x64	; 100
    7362:	90 e0       	ldi	r25, 0x00	; 0
    7364:	fc 01       	movw	r30, r24
    7366:	6e 9f       	mul	r22, r30
    7368:	c0 01       	movw	r24, r0
    736a:	6f 9f       	mul	r22, r31
    736c:	90 0d       	add	r25, r0
    736e:	7e 9f       	mul	r23, r30
    7370:	90 0d       	add	r25, r0
    7372:	11 24       	eor	r1, r1
    7374:	48 0f       	add	r20, r24
    7376:	22 95       	swap	r18
    7378:	2f 70       	andi	r18, 0x0F	; 15
    737a:	30 e0       	ldi	r19, 0x00	; 0
    737c:	c9 01       	movw	r24, r18
    737e:	03 e0       	ldi	r16, 0x03	; 3
    7380:	88 0f       	add	r24, r24
    7382:	99 1f       	adc	r25, r25
    7384:	0a 95       	dec	r16
    7386:	e1 f7       	brne	.-8      	; 0x7380 <RTC_getTime+0x182>
    7388:	22 0f       	add	r18, r18
    738a:	33 1f       	adc	r19, r19
    738c:	82 0f       	add	r24, r18
    738e:	93 1f       	adc	r25, r19
    7390:	48 0f       	add	r20, r24
    7392:	40 93 35 4f 	sts	0x4F35, r20




} 
    7396:	28 96       	adiw	r28, 0x08	; 8
    7398:	cd bf       	out	0x3d, r28	; 61
    739a:	de bf       	out	0x3e, r29	; 62
    739c:	cf 91       	pop	r28
    739e:	df 91       	pop	r29
    73a0:	1f 91       	pop	r17
    73a2:	0f 91       	pop	r16
    73a4:	08 95       	ret

000073a6 <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    73a6:	0e 94 ff 38 	call	0x71fe	; 0x71fe <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    73aa:	8e e2       	ldi	r24, 0x2E	; 46
    73ac:	9f e4       	ldi	r25, 0x4F	; 79
    73ae:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    73b2:	08 95       	ret

000073b4 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    73b4:	0f 93       	push	r16
    73b6:	df 93       	push	r29
    73b8:	cf 93       	push	r28
    73ba:	0f 92       	push	r0
    73bc:	cd b7       	in	r28, 0x3d	; 61
    73be:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    73c0:	80 ec       	ldi	r24, 0xC0	; 192
    73c2:	e0 e5       	ldi	r30, 0x50	; 80
    73c4:	f0 e0       	ldi	r31, 0x00	; 0
    73c6:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    73c8:	80 91 50 00 	lds	r24, 0x0050
    73cc:	88 60       	ori	r24, 0x08	; 8
    73ce:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    73d2:	80 91 51 00 	lds	r24, 0x0051
    73d6:	83 ff       	sbrs	r24, 3
    73d8:	fc cf       	rjmp	.-8      	; 0x73d2 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    73da:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    73de:	8f b7       	in	r24, 0x3f	; 63
    73e0:	89 83       	std	Y+1, r24	; 0x01
    cli();
    73e2:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    73e4:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    73e6:	28 7f       	andi	r18, 0xF8	; 248
    73e8:	23 60       	ori	r18, 0x03	; 3
    73ea:	80 e4       	ldi	r24, 0x40	; 64
    73ec:	90 e0       	ldi	r25, 0x00	; 0
    73ee:	fc 01       	movw	r30, r24
    73f0:	08 ed       	ldi	r16, 0xD8	; 216
    73f2:	04 bf       	out	0x34, r16	; 52
    73f4:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    73f6:	89 81       	ldd	r24, Y+1	; 0x01
    73f8:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    73fa:	80 91 50 00 	lds	r24, 0x0050
    73fe:	8e 7f       	andi	r24, 0xFE	; 254
    7400:	80 93 50 00 	sts	0x0050, r24
}
    7404:	0f 90       	pop	r0
    7406:	cf 91       	pop	r28
    7408:	df 91       	pop	r29
    740a:	0f 91       	pop	r16
    740c:	08 95       	ret

0000740e <Disable_JTAG>:

void Disable_JTAG(void){
    740e:	0f 93       	push	r16
    7410:	df 93       	push	r29
    7412:	cf 93       	push	r28
    7414:	0f 92       	push	r0
    7416:	cd b7       	in	r28, 0x3d	; 61
    7418:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    741a:	8f b7       	in	r24, 0x3f	; 63
    741c:	89 83       	std	Y+1, r24	; 0x01
    cli();
    741e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7420:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7422:	21 e0       	ldi	r18, 0x01	; 1
    7424:	86 e9       	ldi	r24, 0x96	; 150
    7426:	90 e0       	ldi	r25, 0x00	; 0
    7428:	fc 01       	movw	r30, r24
    742a:	08 ed       	ldi	r16, 0xD8	; 216
    742c:	04 bf       	out	0x34, r16	; 52
    742e:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    7430:	89 81       	ldd	r24, Y+1	; 0x01
    7432:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    7434:	0f 90       	pop	r0
    7436:	cf 91       	pop	r28
    7438:	df 91       	pop	r29
    743a:	0f 91       	pop	r16
    743c:	08 95       	ret

0000743e <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    743e:	e0 e0       	ldi	r30, 0x00	; 0
    7440:	f1 e0       	ldi	r31, 0x01	; 1
    7442:	80 81       	ld	r24, Z
    7444:	80 68       	ori	r24, 0x80	; 128
    7446:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
    7448:	82 89       	ldd	r24, Z+18	; 0x12
    744a:	85 60       	ori	r24, 0x05	; 5
    744c:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    744e:	8b e8       	ldi	r24, 0x8B	; 139
    7450:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    7452:	20 e0       	ldi	r18, 0x00	; 0
    7454:	34 e0       	ldi	r19, 0x04	; 4
    7456:	24 8b       	std	Z+20, r18	; 0x14
    7458:	35 8b       	std	Z+21, r19	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    745a:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    745c:	40 ea       	ldi	r20, 0xA0	; 160
    745e:	40 8f       	std	Z+24, r20	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    7460:	8a e0       	ldi	r24, 0x0A	; 10
    7462:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    7464:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    7466:	84 e8       	ldi	r24, 0x84	; 132
    7468:	9c e3       	ldi	r25, 0x3C	; 60
    746a:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    746c:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    746e:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    7470:	80 89       	ldd	r24, Z+16	; 0x10
    7472:	84 6a       	ori	r24, 0xA4	; 164
    7474:	80 8b       	std	Z+16, r24	; 0x10

	// Debug
	DMA.CH1.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
    7476:	82 a1       	ldd	r24, Z+34	; 0x22
    7478:	85 60       	ori	r24, 0x05	; 5
    747a:	82 a3       	std	Z+34, r24	; 0x22
    DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
    747c:	8b e4       	ldi	r24, 0x4B	; 75
    747e:	83 a3       	std	Z+35, r24	; 0x23
    DMA.CH1.TRFCNT = Debug_BufferSize;	// 1024 bytes in block
    7480:	24 a3       	std	Z+36, r18	; 0x24
    7482:	35 a3       	std	Z+37, r19	; 0x25
    DMA.CH1.REPCNT  = 0;		// repeat forever
    7484:	16 a2       	std	Z+38, r1	; 0x26

    DMA.CH1.SRCADDR0 = (((uint16_t)(&Debug_Usart.DATA) >> 0) & 0xFF);
    7486:	40 a7       	std	Z+40, r20	; 0x28
    DMA.CH1.SRCADDR1 = (((uint16_t)(&Debug_Usart.DATA) >> 8) & 0xFF);
    7488:	88 e0       	ldi	r24, 0x08	; 8
    748a:	81 a7       	std	Z+41, r24	; 0x29
    DMA.CH1.SRCADDR2 = 0x00;
    748c:	12 a6       	std	Z+42, r1	; 0x2a

    DMA.CH1.DESTADDR0 = (((uint16_t)(&DebugBuffer[0]) >> 0) & 0xFF);
    748e:	8e e2       	ldi	r24, 0x2E	; 46
    7490:	9b e4       	ldi	r25, 0x4B	; 75
    7492:	84 a7       	std	Z+44, r24	; 0x2c
    DMA.CH1.DESTADDR1 = (((uint16_t)(&DebugBuffer[0]) >> 8) & 0xFF);
    7494:	95 a7       	std	Z+45, r25	; 0x2d
    DMA.CH1.DESTADDR2 = 0x00;
    7496:	16 a6       	std	Z+46, r1	; 0x2e

    DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;
    7498:	80 a1       	ldd	r24, Z+32	; 0x20
    749a:	84 6a       	ori	r24, 0xA4	; 164
    749c:	80 a3       	std	Z+32, r24	; 0x20

}
    749e:	08 95       	ret

000074a0 <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    74a0:	e0 ea       	ldi	r30, 0xA0	; 160
    74a2:	f0 e0       	ldi	r31, 0x00	; 0
    74a4:	82 81       	ldd	r24, Z+2	; 0x02
    74a6:	87 60       	ori	r24, 0x07	; 7
    74a8:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    74aa:	78 94       	sei
}
    74ac:	08 95       	ret

000074ae <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 1440
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	TCD0.PER = 1440;
    74ae:	e0 e0       	ldi	r30, 0x00	; 0
    74b0:	f9 e0       	ldi	r31, 0x09	; 9
    74b2:	80 ea       	ldi	r24, 0xA0	; 160
    74b4:	95 e0       	ldi	r25, 0x05	; 5
    74b6:	86 a3       	std	Z+38, r24	; 0x26
    74b8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    74ba:	80 81       	ld	r24, Z
    74bc:	80 7f       	andi	r24, 0xF0	; 240
    74be:	87 60       	ori	r24, 0x07	; 7
    74c0:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    74c2:	86 81       	ldd	r24, Z+6	; 0x06
    74c4:	8c 7f       	andi	r24, 0xFC	; 252
    74c6:	81 60       	ori	r24, 0x01	; 1
    74c8:	86 83       	std	Z+6, r24	; 0x06
}
    74ca:	08 95       	ret

000074cc <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    74cc:	e0 e4       	ldi	r30, 0x40	; 64
    74ce:	fa e0       	ldi	r31, 0x0A	; 10
    74d0:	80 e0       	ldi	r24, 0x00	; 0
    74d2:	99 e0       	ldi	r25, 0x09	; 9
    74d4:	86 a3       	std	Z+38, r24	; 0x26
    74d6:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    74d8:	80 81       	ld	r24, Z
    74da:	80 7f       	andi	r24, 0xF0	; 240
    74dc:	85 60       	ori	r24, 0x05	; 5
    74de:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    74e0:	86 81       	ldd	r24, Z+6	; 0x06
    74e2:	8c 7f       	andi	r24, 0xFC	; 252
    74e4:	82 60       	ori	r24, 0x02	; 2
    74e6:	86 83       	std	Z+6, r24	; 0x06

}
    74e8:	08 95       	ret

000074ea <SD_WriteRTCBlock>:
	    okToEraseFile = false;
	}
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    74ea:	af 92       	push	r10
    74ec:	bf 92       	push	r11
    74ee:	cf 92       	push	r12
    74f0:	df 92       	push	r13
    74f2:	ef 92       	push	r14
    74f4:	ff 92       	push	r15
    74f6:	0f 93       	push	r16
    74f8:	1f 93       	push	r17
    74fa:	7b 01       	movw	r14, r22
    74fc:	8c 01       	movw	r16, r24
    74fe:	59 01       	movw	r10, r18
    7500:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7502:	8f ef       	ldi	r24, 0xFF	; 255
    7504:	9f ef       	ldi	r25, 0xFF	; 255
    7506:	af ef       	ldi	r26, 0xFF	; 255
    7508:	bf ef       	ldi	r27, 0xFF	; 255
    750a:	80 93 5e 57 	sts	0x575E, r24
    750e:	90 93 5f 57 	sts	0x575F, r25
    7512:	a0 93 60 57 	sts	0x5760, r26
    7516:	b0 93 61 57 	sts	0x5761, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    751a:	6c e4       	ldi	r22, 0x4C	; 76
    751c:	74 e7       	ldi	r23, 0x74	; 116
    751e:	8e ed       	ldi	r24, 0xDE	; 222
    7520:	90 eb       	ldi	r25, 0xB0	; 176
    7522:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(27);				// record size  
    7526:	6b e1       	ldi	r22, 0x1B	; 27
    7528:	70 e0       	ldi	r23, 0x00	; 0
    752a:	80 e0       	ldi	r24, 0x00	; 0
    752c:	90 e0       	ldi	r25, 0x00	; 0
    752e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(2); 		// record type  
    7532:	82 e0       	ldi	r24, 0x02	; 2
    7534:	90 e0       	ldi	r25, 0x00	; 0
    7536:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    753a:	c8 01       	movw	r24, r16
    753c:	b7 01       	movw	r22, r14
    753e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    7542:	c6 01       	movw	r24, r12
    7544:	b5 01       	movw	r22, r10
    7546:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write8(0);
    754a:	80 e0       	ldi	r24, 0x00	; 0
    754c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    7550:	60 e0       	ldi	r22, 0x00	; 0
    7552:	70 e0       	ldi	r23, 0x00	; 0
    7554:	80 e0       	ldi	r24, 0x00	; 0
    7556:	90 e0       	ldi	r25, 0x00	; 0
    7558:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_WriteCRC();			      // CRC			
    755c:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7560:	88 e6       	ldi	r24, 0x68	; 104
    7562:	9f e4       	ldi	r25, 0x4F	; 79
    7564:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    7568:	1f 91       	pop	r17
    756a:	0f 91       	pop	r16
    756c:	ff 90       	pop	r15
    756e:	ef 90       	pop	r14
    7570:	df 90       	pop	r13
    7572:	cf 90       	pop	r12
    7574:	bf 90       	pop	r11
    7576:	af 90       	pop	r10
    7578:	08 95       	ret

0000757a <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    757a:	20 91 c7 32 	lds	r18, 0x32C7
    757e:	30 91 c8 32 	lds	r19, 0x32C8
    7582:	80 91 c5 32 	lds	r24, 0x32C5
    7586:	90 91 c6 32 	lds	r25, 0x32C6
    758a:	28 17       	cp	r18, r24
    758c:	39 07       	cpc	r19, r25
    758e:	51 f4       	brne	.+20     	; 0x75a4 <Rs232_To_Debug+0x2a>
    7590:	f4 cf       	rjmp	.-24     	; 0x757a <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7592:	80 91 a1 08 	lds	r24, 0x08A1
    7596:	85 ff       	sbrs	r24, 5
    7598:	fc cf       	rjmp	.-8      	; 0x7592 <Rs232_To_Debug+0x18>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    759a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    759e:	90 93 a0 08 	sts	0x08A0, r25
    75a2:	eb cf       	rjmp	.-42     	; 0x757a <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    75a4:	81 e0       	ldi	r24, 0x01	; 1
    75a6:	0e 94 bf 03 	call	0x77e	; 0x77e <Rs232_GetByte>
    75aa:	98 2f       	mov	r25, r24
    75ac:	f2 cf       	rjmp	.-28     	; 0x7592 <Rs232_To_Debug+0x18>

000075ae <getDeviceID>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75ae:	82 e0       	ldi	r24, 0x02	; 2
    75b0:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75b4:	e8 e0       	ldi	r30, 0x08	; 8
    75b6:	f0 e0       	ldi	r31, 0x00	; 0
    75b8:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75ba:	10 92 ca 01 	sts	0x01CA, r1
	
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    75be:	e0 93 65 4a 	sts	0x4A65, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75c2:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75c6:	e9 e0       	ldi	r30, 0x09	; 9
    75c8:	f0 e0       	ldi	r31, 0x00	; 0
    75ca:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75cc:	10 92 ca 01 	sts	0x01CA, r1
	}
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
    75d0:	e0 93 66 4a 	sts	0x4A66, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75d4:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75d8:	ea e0       	ldi	r30, 0x0A	; 10
    75da:	f0 e0       	ldi	r31, 0x00	; 0
    75dc:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75de:	10 92 ca 01 	sts	0x01CA, r1
}

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
    75e2:	e0 93 67 4a 	sts	0x4A67, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75e6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75ea:	eb e0       	ldi	r30, 0x0B	; 11
    75ec:	f0 e0       	ldi	r31, 0x00	; 0
    75ee:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    75f0:	10 92 ca 01 	sts	0x01CA, r1

void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
    75f4:	e0 93 68 4a 	sts	0x4A68, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    75f8:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    75fc:	ec e0       	ldi	r30, 0x0C	; 12
    75fe:	f0 e0       	ldi	r31, 0x00	; 0
    7600:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7602:	10 92 ca 01 	sts	0x01CA, r1
void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
    7606:	e0 93 69 4a 	sts	0x4A69, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    760a:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    760e:	ed e0       	ldi	r30, 0x0D	; 13
    7610:	f0 e0       	ldi	r31, 0x00	; 0
    7612:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7614:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
    7618:	e0 93 6a 4a 	sts	0x4A6A, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    761c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7620:	e0 e1       	ldi	r30, 0x10	; 16
    7622:	f0 e0       	ldi	r31, 0x00	; 0
    7624:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7626:	10 92 ca 01 	sts	0x01CA, r1
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
    762a:	e0 93 6b 4a 	sts	0x4A6B, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    762e:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7632:	e2 e1       	ldi	r30, 0x12	; 18
    7634:	f0 e0       	ldi	r31, 0x00	; 0
    7636:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7638:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
    763c:	e0 93 6c 4a 	sts	0x4A6C, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7640:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7644:	e3 e1       	ldi	r30, 0x13	; 19
    7646:	f0 e0       	ldi	r31, 0x00	; 0
    7648:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    764a:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
    764e:	e0 93 6d 4a 	sts	0x4A6D, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7652:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7656:	e4 e1       	ldi	r30, 0x14	; 20
    7658:	f0 e0       	ldi	r31, 0x00	; 0
    765a:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    765c:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
    7660:	e0 93 6e 4a 	sts	0x4A6E, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7664:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7668:	e5 e1       	ldi	r30, 0x15	; 21
    766a:	f0 e0       	ldi	r31, 0x00	; 0
    766c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    766e:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
    7672:	e0 93 6f 4a 	sts	0x4A6F, r30
	deviceID[11] = '\0';
    7676:	10 92 70 4a 	sts	0x4A70, r1
    767a:	e5 e6       	ldi	r30, 0x65	; 101
    767c:	fa e4       	ldi	r31, 0x4A	; 74
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
    767e:	91 e0       	ldi	r25, 0x01	; 1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
    7680:	80 81       	ld	r24, Z
    7682:	88 23       	and	r24, r24
    7684:	09 f4       	brne	.+2      	; 0x7688 <getDeviceID+0xda>
	       deviceID[i] += 1;
    7686:	90 83       	st	Z, r25
    7688:	31 96       	adiw	r30, 0x01	; 1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
    768a:	8a e4       	ldi	r24, 0x4A	; 74
    768c:	e0 37       	cpi	r30, 0x70	; 112
    768e:	f8 07       	cpc	r31, r24
    7690:	b9 f7       	brne	.-18     	; 0x7680 <getDeviceID+0xd2>
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
	    }
	}
}
    7692:	08 95       	ret

00007694 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7694:	aa ec       	ldi	r26, 0xCA	; 202
    7696:	b1 e0       	ldi	r27, 0x01	; 1
    7698:	92 e0       	ldi	r25, 0x02	; 2
    769a:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    769c:	e8 2f       	mov	r30, r24
    769e:	f0 e0       	ldi	r31, 0x00	; 0
    76a0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    76a2:	1c 92       	st	X, r1

	return result;
}
    76a4:	8e 2f       	mov	r24, r30
    76a6:	08 95       	ret

000076a8 <getTime>:
			singCounter--;
		}
	}
}

bool getTime(void){
    76a8:	88 ee       	ldi	r24, 0xE8	; 232
    76aa:	93 e0       	ldi	r25, 0x03	; 3
    76ac:	20 e7       	ldi	r18, 0x70	; 112
    76ae:	31 e0       	ldi	r19, 0x01	; 1
    76b0:	f9 01       	movw	r30, r18
    76b2:	31 97       	sbiw	r30, 0x01	; 1
    76b4:	f1 f7       	brne	.-4      	; 0x76b2 <getTime+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76b8:	d9 f7       	brne	.-10     	; 0x76b0 <getTime+0x8>

    _delay_ms(100);

    command[1] = Debug_GetByte(false);
    76ba:	80 e0       	ldi	r24, 0x00	; 0
    76bc:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    76c0:	80 93 83 45 	sts	0x4583, r24
	command[2] = Debug_GetByte(false);
    76c4:	80 e0       	ldi	r24, 0x00	; 0
    76c6:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    76ca:	80 93 84 45 	sts	0x4584, r24
	command[3] = Debug_GetByte(false);
    76ce:	80 e0       	ldi	r24, 0x00	; 0
    76d0:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    76d4:	80 93 85 45 	sts	0x4585, r24
	command[4] = Debug_GetByte(false);
    76d8:	80 e0       	ldi	r24, 0x00	; 0
    76da:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    76de:	80 93 86 45 	sts	0x4586, r24

    tempTime = command[1];
    76e2:	80 91 83 45 	lds	r24, 0x4583
    tempTime <<= 8;
    tempTime += command[2];
    76e6:	20 91 84 45 	lds	r18, 0x4584
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	a0 e0       	ldi	r26, 0x00	; 0
    76ee:	b0 e0       	ldi	r27, 0x00	; 0
    76f0:	ba 2f       	mov	r27, r26
    76f2:	a9 2f       	mov	r26, r25
    76f4:	98 2f       	mov	r25, r24
    76f6:	88 27       	eor	r24, r24
    76f8:	82 0f       	add	r24, r18
    76fa:	91 1d       	adc	r25, r1
    76fc:	a1 1d       	adc	r26, r1
    76fe:	b1 1d       	adc	r27, r1
    tempTime <<= 8;
    tempTime += command[3];
    7700:	20 91 85 45 	lds	r18, 0x4585
    7704:	ba 2f       	mov	r27, r26
    7706:	a9 2f       	mov	r26, r25
    7708:	98 2f       	mov	r25, r24
    770a:	88 27       	eor	r24, r24
    770c:	82 0f       	add	r24, r18
    770e:	91 1d       	adc	r25, r1
    7710:	a1 1d       	adc	r26, r1
    7712:	b1 1d       	adc	r27, r1
    tempTime <<= 8;
    tempTime += command[4];
    7714:	20 91 86 45 	lds	r18, 0x4586
    7718:	ba 2f       	mov	r27, r26
    771a:	a9 2f       	mov	r26, r25
    771c:	98 2f       	mov	r25, r24
    771e:	88 27       	eor	r24, r24
    7720:	82 0f       	add	r24, r18
    7722:	91 1d       	adc	r25, r1
    7724:	a1 1d       	adc	r26, r1
    7726:	b1 1d       	adc	r27, r1
    7728:	80 93 48 33 	sts	0x3348, r24
    772c:	90 93 49 33 	sts	0x3349, r25
    7730:	a0 93 4a 33 	sts	0x334A, r26
    7734:	b0 93 4b 33 	sts	0x334B, r27
	
	
}

void Time_Set(uint32_t time){
  cli();
    7738:	f8 94       	cli
  UNIX_time = time;
    773a:	80 93 d8 32 	sts	0x32D8, r24
    773e:	90 93 d9 32 	sts	0x32D9, r25
    7742:	a0 93 da 32 	sts	0x32DA, r26
    7746:	b0 93 db 32 	sts	0x32DB, r27
  sei();
    774a:	78 94       	sei
    774c:	20 e0       	ldi	r18, 0x00	; 0
    774e:	30 e0       	ldi	r19, 0x00	; 0
    Time_Set(tempTime);

    // echo back to cpu
    for(uint8_t j = 0; j < 5; j++){
        Debug_SendByte(command[j]);
    7750:	f9 01       	movw	r30, r18
    7752:	ee 57       	subi	r30, 0x7E	; 126
    7754:	fa 4b       	sbci	r31, 0xBA	; 186
    7756:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7758:	80 91 a1 08 	lds	r24, 0x08A1
    775c:	85 ff       	sbrs	r24, 5
    775e:	fc cf       	rjmp	.-8      	; 0x7758 <getTime+0xb0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7760:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7764:	e0 93 a0 08 	sts	0x08A0, r30
    7768:	2f 5f       	subi	r18, 0xFF	; 255
    776a:	3f 4f       	sbci	r19, 0xFF	; 255
    tempTime <<= 8;
    tempTime += command[4];
    Time_Set(tempTime);

    // echo back to cpu
    for(uint8_t j = 0; j < 5; j++){
    776c:	25 30       	cpi	r18, 0x05	; 5
    776e:	31 05       	cpc	r19, r1
    7770:	79 f7       	brne	.-34     	; 0x7750 <getTime+0xa8>
        Debug_SendByte(command[j]);
    }

    return true;
}
    7772:	81 e0       	ldi	r24, 0x01	; 1
    7774:	08 95       	ret

00007776 <eraseFile>:

    uploading = false;
    okToUpload = false;
}

void eraseFile(void){
    7776:	ef 92       	push	r14
    7778:	ff 92       	push	r15
    777a:	0f 93       	push	r16
    777c:	1f 93       	push	r17
    777e:	cf 93       	push	r28
    7780:	df 93       	push	r29
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7782:	80 91 a1 08 	lds	r24, 0x08A1
    7786:	85 ff       	sbrs	r24, 5
    7788:	fc cf       	rjmp	.-8      	; 0x7782 <eraseFile+0xc>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    778a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    778e:	85 e4       	ldi	r24, 0x45	; 69
    7790:	80 93 a0 08 	sts	0x08A0, r24
    7794:	88 ee       	ldi	r24, 0xE8	; 232
    7796:	93 e0       	ldi	r25, 0x03	; 3
    7798:	20 e7       	ldi	r18, 0x70	; 112
    779a:	31 e0       	ldi	r19, 0x01	; 1
    779c:	f9 01       	movw	r30, r18
    779e:	31 97       	sbiw	r30, 0x01	; 1
    77a0:	f1 f7       	brne	.-4      	; 0x779e <eraseFile+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77a4:	d9 f7       	brne	.-10     	; 0x779c <eraseFile+0x26>
    77a6:	ff 24       	eor	r15, r15
    77a8:	10 e0       	ldi	r17, 0x00	; 0
    77aa:	00 e0       	ldi	r16, 0x00	; 0
                fileToErase[commandCounter-1] = Debug_GetByte(false);
                Debug_SendByte(fileToErase[commandCounter-1]);
                commandCounter++;
                if(commandCounter == (numBytesToRead-1)){
                    fileToErase[numBytesToRead-1] = 0;
                    okToEraseFile = true;
    77ac:	ee 24       	eor	r14, r14
    77ae:	e3 94       	inc	r14
    77b0:	c6 e6       	ldi	r28, 0x66	; 102
    77b2:	de e0       	ldi	r29, 0x0E	; 14
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    Debug_SendByte('E');
    _delay_ms(100);
    while(true){
        if(Debug_CharReadyToRead()){
    77b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
    77b8:	88 23       	and	r24, r24
    77ba:	a9 f1       	breq	.+106    	; 0x7826 <eraseFile+0xb0>
            if(commandCounter == 0){
    77bc:	11 23       	and	r17, r17
    77be:	71 f4       	brne	.+28     	; 0x77dc <eraseFile+0x66>
                numBytesToRead = Debug_GetByte(false);
    77c0:	80 e0       	ldi	r24, 0x00	; 0
    77c2:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    77c6:	08 2f       	mov	r16, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    77c8:	80 91 a1 08 	lds	r24, 0x08A1
    77cc:	85 ff       	sbrs	r24, 5
    77ce:	fc cf       	rjmp	.-8      	; 0x77c8 <eraseFile+0x52>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    77d0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    77d4:	00 93 a0 08 	sts	0x08A0, r16
    77d8:	11 e0       	ldi	r17, 0x01	; 1
    77da:	25 c0       	rjmp	.+74     	; 0x7826 <eraseFile+0xb0>
                Debug_SendByte(numBytesToRead);
                commandCounter++;
            } else {
                fileToErase[commandCounter-1] = Debug_GetByte(false);
    77dc:	80 e0       	ldi	r24, 0x00	; 0
    77de:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    77e2:	98 2f       	mov	r25, r24
    77e4:	e1 2f       	mov	r30, r17
    77e6:	f0 e0       	ldi	r31, 0x00	; 0
    77e8:	e5 52       	subi	r30, 0x25	; 37
    77ea:	fc 4a       	sbci	r31, 0xAC	; 172
    77ec:	80 83       	st	Z, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    77ee:	80 91 a1 08 	lds	r24, 0x08A1
    77f2:	85 ff       	sbrs	r24, 5
    77f4:	fc cf       	rjmp	.-8      	; 0x77ee <eraseFile+0x78>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    77f6:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    77fa:	90 93 a0 08 	sts	0x08A0, r25
                Debug_SendByte(fileToErase[commandCounter-1]);
                commandCounter++;
    77fe:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead-1)){
    7800:	e1 2f       	mov	r30, r17
    7802:	f0 e0       	ldi	r31, 0x00	; 0
    7804:	80 2f       	mov	r24, r16
    7806:	90 e0       	ldi	r25, 0x00	; 0
    7808:	01 97       	sbiw	r24, 0x01	; 1
    780a:	e8 17       	cp	r30, r24
    780c:	f9 07       	cpc	r31, r25
    780e:	59 f4       	brne	.+22     	; 0x7826 <eraseFile+0xb0>
                    fileToErase[numBytesToRead-1] = 0;
    7810:	e4 52       	subi	r30, 0x24	; 36
    7812:	fc 4a       	sbci	r31, 0xAC	; 172
    7814:	10 82       	st	Z, r1
                    okToEraseFile = true;
    7816:	e0 92 12 33 	sts	0x3312, r14
                    while(okToEraseFile);
    781a:	80 91 12 33 	lds	r24, 0x3312
    781e:	88 23       	and	r24, r24
    7820:	e1 f7       	brne	.-8      	; 0x781a <eraseFile+0xa4>
                    okToUpload = false;
    7822:	10 92 13 33 	sts	0x3313, r1
    7826:	ce 01       	movw	r24, r28
    7828:	01 97       	sbiw	r24, 0x01	; 1
    782a:	f1 f7       	brne	.-4      	; 0x7828 <eraseFile+0xb2>
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    782c:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    782e:	85 e6       	ldi	r24, 0x65	; 101
    7830:	f8 16       	cp	r15, r24
    7832:	09 f0       	breq	.+2      	; 0x7836 <eraseFile+0xc0>
    7834:	bf cf       	rjmp	.-130    	; 0x77b4 <eraseFile+0x3e>
            return;
        }
    }
}
    7836:	df 91       	pop	r29
    7838:	cf 91       	pop	r28
    783a:	1f 91       	pop	r17
    783c:	0f 91       	pop	r16
    783e:	ff 90       	pop	r15
    7840:	ef 90       	pop	r14
    7842:	08 95       	ret

00007844 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    7844:	ef 92       	push	r14
    7846:	ff 92       	push	r15
    7848:	0f 93       	push	r16
    784a:	1f 93       	push	r17
    784c:	cf 93       	push	r28
    784e:	df 93       	push	r29
    7850:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    7852:	68 e6       	ldi	r22, 0x68	; 104
    7854:	7f e4       	ldi	r23, 0x4F	; 79
    7856:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
    785a:	60 e0       	ldi	r22, 0x00	; 0
    785c:	70 e0       	ldi	r23, 0x00	; 0
    785e:	3b c0       	rjmp	.+118    	; 0x78d6 <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7860:	e0 90 5e 57 	lds	r14, 0x575E
    7864:	f0 90 5f 57 	lds	r15, 0x575F
    7868:	00 91 60 57 	lds	r16, 0x5760
    786c:	10 91 61 57 	lds	r17, 0x5761
    7870:	20 91 5e 57 	lds	r18, 0x575E
    7874:	30 91 5f 57 	lds	r19, 0x575F
    7878:	40 91 60 57 	lds	r20, 0x5760
    787c:	50 91 61 57 	lds	r21, 0x5761
    7880:	30 70       	andi	r19, 0x00	; 0
    7882:	40 70       	andi	r20, 0x00	; 0
    7884:	50 70       	andi	r21, 0x00	; 0
    7886:	fe 01       	movw	r30, r28
    7888:	e6 0f       	add	r30, r22
    788a:	f7 1f       	adc	r31, r23
    788c:	80 81       	ld	r24, Z
    788e:	90 e0       	ldi	r25, 0x00	; 0
    7890:	a0 e0       	ldi	r26, 0x00	; 0
    7892:	b0 e0       	ldi	r27, 0x00	; 0
    7894:	28 27       	eor	r18, r24
    7896:	39 27       	eor	r19, r25
    7898:	4a 27       	eor	r20, r26
    789a:	5b 27       	eor	r21, r27
    789c:	22 0f       	add	r18, r18
    789e:	33 1f       	adc	r19, r19
    78a0:	22 0f       	add	r18, r18
    78a2:	33 1f       	adc	r19, r19
    78a4:	26 54       	subi	r18, 0x46	; 70
    78a6:	34 4d       	sbci	r19, 0xD4	; 212
    78a8:	ef 2c       	mov	r14, r15
    78aa:	f0 2e       	mov	r15, r16
    78ac:	01 2f       	mov	r16, r17
    78ae:	11 27       	eor	r17, r17
    78b0:	f9 01       	movw	r30, r18
    78b2:	80 81       	ld	r24, Z
    78b4:	91 81       	ldd	r25, Z+1	; 0x01
    78b6:	a2 81       	ldd	r26, Z+2	; 0x02
    78b8:	b3 81       	ldd	r27, Z+3	; 0x03
    78ba:	e8 26       	eor	r14, r24
    78bc:	f9 26       	eor	r15, r25
    78be:	0a 27       	eor	r16, r26
    78c0:	1b 27       	eor	r17, r27
    78c2:	e0 92 5e 57 	sts	0x575E, r14
    78c6:	f0 92 5f 57 	sts	0x575F, r15
    78ca:	00 93 60 57 	sts	0x5760, r16
    78ce:	10 93 61 57 	sts	0x5761, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    78d2:	6f 5f       	subi	r22, 0xFF	; 255
    78d4:	7f 4f       	sbci	r23, 0xFF	; 255
    78d6:	fe 01       	movw	r30, r28
    78d8:	01 90       	ld	r0, Z+
    78da:	00 20       	and	r0, r0
    78dc:	e9 f7       	brne	.-6      	; 0x78d8 <SD_WriteString+0x94>
    78de:	31 97       	sbiw	r30, 0x01	; 1
    78e0:	ec 1b       	sub	r30, r28
    78e2:	fd 0b       	sbc	r31, r29
    78e4:	6e 17       	cp	r22, r30
    78e6:	7f 07       	cpc	r23, r31
    78e8:	08 f4       	brcc	.+2      	; 0x78ec <SD_WriteString+0xa8>
    78ea:	ba cf       	rjmp	.-140    	; 0x7860 <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    78ec:	df 91       	pop	r29
    78ee:	cf 91       	pop	r28
    78f0:	1f 91       	pop	r17
    78f2:	0f 91       	pop	r16
    78f4:	ff 90       	pop	r15
    78f6:	ef 90       	pop	r14
    78f8:	08 95       	ret

000078fa <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    78fa:	0f 93       	push	r16
    78fc:	1f 93       	push	r17
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    78fe:	8f ef       	ldi	r24, 0xFF	; 255
    7900:	9f ef       	ldi	r25, 0xFF	; 255
    7902:	af ef       	ldi	r26, 0xFF	; 255
    7904:	bf ef       	ldi	r27, 0xFF	; 255
    7906:	80 93 5e 57 	sts	0x575E, r24
    790a:	90 93 5f 57 	sts	0x575F, r25
    790e:	a0 93 60 57 	sts	0x5760, r26
    7912:	b0 93 61 57 	sts	0x5761, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7916:	6c e4       	ldi	r22, 0x4C	; 76
    7918:	74 e7       	ldi	r23, 0x74	; 116
    791a:	8e ed       	ldi	r24, 0xDE	; 222
    791c:	90 eb       	ldi	r25, 0xB0	; 176
    791e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(61);				// record size
    7922:	6d e3       	ldi	r22, 0x3D	; 61
    7924:	70 e0       	ldi	r23, 0x00	; 0
    7926:	80 e0       	ldi	r24, 0x00	; 0
    7928:	90 e0       	ldi	r25, 0x00	; 0
    792a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(3); 		// record type
    792e:	83 e0       	ldi	r24, 0x03	; 3
    7930:	90 e0       	ldi	r25, 0x00	; 0
    7932:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    7936:	60 91 a0 32 	lds	r22, 0x32A0
    793a:	70 91 a1 32 	lds	r23, 0x32A1
    793e:	80 91 a2 32 	lds	r24, 0x32A2
    7942:	90 91 a3 32 	lds	r25, 0x32A3
    7946:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    794a:	60 e0       	ldi	r22, 0x00	; 0
    794c:	70 e8       	ldi	r23, 0x80	; 128
    794e:	87 e9       	ldi	r24, 0x97	; 151
    7950:	96 e0       	ldi	r25, 0x06	; 6
    7952:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(1);												// number of samples
    7956:	61 e0       	ldi	r22, 0x01	; 1
    7958:	70 e0       	ldi	r23, 0x00	; 0
    795a:	80 e0       	ldi	r24, 0x00	; 0
    795c:	90 e0       	ldi	r25, 0x00	; 0
    795e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_WriteString("Air_Small");
    7962:	83 e3       	ldi	r24, 0x33	; 51
    7964:	90 e2       	ldi	r25, 0x20	; 32
    7966:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    796a:	89 e0       	ldi	r24, 0x09	; 9
    796c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("32");
    7970:	0d e3       	ldi	r16, 0x3D	; 61
    7972:	10 e2       	ldi	r17, 0x20	; 32
    7974:	c8 01       	movw	r24, r16
    7976:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    797a:	8a e0       	ldi	r24, 0x0A	; 10
    797c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("Air_Large");
    7980:	80 e4       	ldi	r24, 0x40	; 64
    7982:	90 e2       	ldi	r25, 0x20	; 32
    7984:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7988:	89 e0       	ldi	r24, 0x09	; 9
    798a:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("32");
    798e:	c8 01       	movw	r24, r16
    7990:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7994:	8a e0       	ldi	r24, 0x0A	; 10
    7996:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	SD_Write8(0x00);
    799a:	80 e0       	ldi	r24, 0x00	; 0
    799c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	SD_Write32(smallCount);
    79a0:	60 91 ee 3b 	lds	r22, 0x3BEE
    79a4:	70 91 ef 3b 	lds	r23, 0x3BEF
    79a8:	80 91 f0 3b 	lds	r24, 0x3BF0
    79ac:	90 91 f1 3b 	lds	r25, 0x3BF1
    79b0:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(largeCount);
    79b4:	60 91 34 5c 	lds	r22, 0x5C34
    79b8:	70 91 35 5c 	lds	r23, 0x5C35
    79bc:	80 91 36 5c 	lds	r24, 0x5C36
    79c0:	90 91 37 5c 	lds	r25, 0x5C37
    79c4:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_WriteCRC();			// CRC
    79c8:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>

	f_sync(&Log_File);
    79cc:	88 e6       	ldi	r24, 0x68	; 104
    79ce:	9f e4       	ldi	r25, 0x4F	; 79
    79d0:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    79d4:	1f 91       	pop	r17
    79d6:	0f 91       	pop	r16
    79d8:	08 95       	ret

000079da <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    79da:	1f 93       	push	r17
    79dc:	cf 93       	push	r28
    79de:	df 93       	push	r29
    79e0:	18 2f       	mov	r17, r24
    79e2:	8f ef       	ldi	r24, 0xFF	; 255
    79e4:	9f ef       	ldi	r25, 0xFF	; 255
    79e6:	af ef       	ldi	r26, 0xFF	; 255
    79e8:	bf ef       	ldi	r27, 0xFF	; 255
    79ea:	80 93 5e 57 	sts	0x575E, r24
    79ee:	90 93 5f 57 	sts	0x575F, r25
    79f2:	a0 93 60 57 	sts	0x5760, r26
    79f6:	b0 93 61 57 	sts	0x5761, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    79fa:	6c e4       	ldi	r22, 0x4C	; 76
    79fc:	74 e7       	ldi	r23, 0x74	; 116
    79fe:	8e ed       	ldi	r24, 0xDE	; 222
    7a00:	90 eb       	ldi	r25, 0xB0	; 176
    7a02:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(244);				// record size
    7a06:	64 ef       	ldi	r22, 0xF4	; 244
    7a08:	70 e0       	ldi	r23, 0x00	; 0
    7a0a:	80 e0       	ldi	r24, 0x00	; 0
    7a0c:	90 e0       	ldi	r25, 0x00	; 0
    7a0e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(3); 		// record type
    7a12:	83 e0       	ldi	r24, 0x03	; 3
    7a14:	90 e0       	ldi	r25, 0x00	; 0
    7a16:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7a1a:	11 30       	cpi	r17, 0x01	; 1
    7a1c:	49 f4       	brne	.+18     	; 0x7a30 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    7a1e:	60 91 98 32 	lds	r22, 0x3298
    7a22:	70 91 99 32 	lds	r23, 0x3299
    7a26:	80 91 9a 32 	lds	r24, 0x329A
    7a2a:	90 91 9b 32 	lds	r25, 0x329B
    7a2e:	08 c0       	rjmp	.+16     	; 0x7a40 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    7a30:	60 91 9c 32 	lds	r22, 0x329C
    7a34:	70 91 9d 32 	lds	r23, 0x329D
    7a38:	80 91 9e 32 	lds	r24, 0x329E
    7a3c:	90 91 9f 32 	lds	r25, 0x329F
    7a40:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7a44:	60 e0       	ldi	r22, 0x00	; 0
    7a46:	70 e2       	ldi	r23, 0x20	; 32
    7a48:	8c e1       	ldi	r24, 0x1C	; 28
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(10);												// number of samples
    7a50:	6a e0       	ldi	r22, 0x0A	; 10
    7a52:	70 e0       	ldi	r23, 0x00	; 0
    7a54:	80 e0       	ldi	r24, 0x00	; 0
    7a56:	90 e0       	ldi	r25, 0x00	; 0
    7a58:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_WriteString("Light_Green");
    7a5c:	8a e4       	ldi	r24, 0x4A	; 74
    7a5e:	90 e2       	ldi	r25, 0x20	; 32
    7a60:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7a64:	89 e0       	ldi	r24, 0x09	; 9
    7a66:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("32");
    7a6a:	8d e3       	ldi	r24, 0x3D	; 61
    7a6c:	90 e2       	ldi	r25, 0x20	; 32
    7a6e:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7a72:	8a e0       	ldi	r24, 0x0A	; 10
    7a74:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("Light_Red");
    7a78:	86 e5       	ldi	r24, 0x56	; 86
    7a7a:	90 e2       	ldi	r25, 0x20	; 32
    7a7c:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7a80:	89 e0       	ldi	r24, 0x09	; 9
    7a82:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("32");
    7a86:	8d e3       	ldi	r24, 0x3D	; 61
    7a88:	90 e2       	ldi	r25, 0x20	; 32
    7a8a:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7a8e:	8a e0       	ldi	r24, 0x0A	; 10
    7a90:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("Light_Blue");
    7a94:	80 e6       	ldi	r24, 0x60	; 96
    7a96:	90 e2       	ldi	r25, 0x20	; 32
    7a98:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7a9c:	89 e0       	ldi	r24, 0x09	; 9
    7a9e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("32");
    7aa2:	8d e3       	ldi	r24, 0x3D	; 61
    7aa4:	90 e2       	ldi	r25, 0x20	; 32
    7aa6:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7aaa:	8a e0       	ldi	r24, 0x0A	; 10
    7aac:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("Light_Clear");
    7ab0:	8b e6       	ldi	r24, 0x6B	; 107
    7ab2:	90 e2       	ldi	r25, 0x20	; 32
    7ab4:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7ab8:	89 e0       	ldi	r24, 0x09	; 9
    7aba:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("32");
    7abe:	8d e3       	ldi	r24, 0x3D	; 61
    7ac0:	90 e2       	ldi	r25, 0x20	; 32
    7ac2:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7ac6:	8a e0       	ldi	r24, 0x0A	; 10
    7ac8:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	SD_Write8(0x00);
    7acc:	80 e0       	ldi	r24, 0x00	; 0
    7ace:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	if(bufferNumber == 1){
    7ad2:	11 30       	cpi	r17, 0x01	; 1
    7ad4:	69 f4       	brne	.+26     	; 0x7af0 <SD_WriteLightBuffer+0x116>
    7ad6:	c2 e6       	ldi	r28, 0x62	; 98
    7ad8:	db e5       	ldi	r29, 0x5B	; 91
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    7ada:	69 91       	ld	r22, Y+
    7adc:	79 91       	ld	r23, Y+
    7ade:	89 91       	ld	r24, Y+
    7ae0:	99 91       	ld	r25, Y+
    7ae2:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    7ae6:	8c e5       	ldi	r24, 0x5C	; 92
    7ae8:	c2 30       	cpi	r28, 0x02	; 2
    7aea:	d8 07       	cpc	r29, r24
    7aec:	b1 f7       	brne	.-20     	; 0x7ada <SD_WriteLightBuffer+0x100>
    7aee:	0c c0       	rjmp	.+24     	; 0x7b08 <SD_WriteLightBuffer+0x12e>
    7af0:	c2 ee       	ldi	r28, 0xE2	; 226
    7af2:	d4 e4       	ldi	r29, 0x44	; 68
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    7af4:	69 91       	ld	r22, Y+
    7af6:	79 91       	ld	r23, Y+
    7af8:	89 91       	ld	r24, Y+
    7afa:	99 91       	ld	r25, Y+
    7afc:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    7b00:	85 e4       	ldi	r24, 0x45	; 69
    7b02:	c2 38       	cpi	r28, 0x82	; 130
    7b04:	d8 07       	cpc	r29, r24
    7b06:	b1 f7       	brne	.-20     	; 0x7af4 <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7b08:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>

	f_sync(&Log_File);
    7b0c:	88 e6       	ldi	r24, 0x68	; 104
    7b0e:	9f e4       	ldi	r25, 0x4F	; 79
    7b10:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    7b14:	df 91       	pop	r29
    7b16:	cf 91       	pop	r28
    7b18:	1f 91       	pop	r17
    7b1a:	08 95       	ret

00007b1c <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    7b1c:	1f 93       	push	r17
    7b1e:	18 2f       	mov	r17, r24
    7b20:	8f ef       	ldi	r24, 0xFF	; 255
    7b22:	9f ef       	ldi	r25, 0xFF	; 255
    7b24:	af ef       	ldi	r26, 0xFF	; 255
    7b26:	bf ef       	ldi	r27, 0xFF	; 255
    7b28:	80 93 5e 57 	sts	0x575E, r24
    7b2c:	90 93 5f 57 	sts	0x575F, r25
    7b30:	a0 93 60 57 	sts	0x5760, r26
    7b34:	b0 93 61 57 	sts	0x5761, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7b38:	6c e4       	ldi	r22, 0x4C	; 76
    7b3a:	74 e7       	ldi	r23, 0x74	; 116
    7b3c:	8e ed       	ldi	r24, 0xDE	; 222
    7b3e:	90 eb       	ldi	r25, 0xB0	; 176
    7b40:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    7b44:	60 e1       	ldi	r22, 0x10	; 16
    7b46:	74 e0       	ldi	r23, 0x04	; 4
    7b48:	80 e0       	ldi	r24, 0x00	; 0
    7b4a:	90 e0       	ldi	r25, 0x00	; 0
    7b4c:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(3); 									// record type
    7b50:	83 e0       	ldi	r24, 0x03	; 3
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7b58:	11 30       	cpi	r17, 0x01	; 1
    7b5a:	49 f4       	brne	.+18     	; 0x7b6e <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    7b5c:	60 91 90 32 	lds	r22, 0x3290
    7b60:	70 91 91 32 	lds	r23, 0x3291
    7b64:	80 91 92 32 	lds	r24, 0x3292
    7b68:	90 91 93 32 	lds	r25, 0x3293
    7b6c:	08 c0       	rjmp	.+16     	; 0x7b7e <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    7b6e:	60 91 94 32 	lds	r22, 0x3294
    7b72:	70 91 95 32 	lds	r23, 0x3295
    7b76:	80 91 96 32 	lds	r24, 0x3296
    7b7a:	90 91 97 32 	lds	r25, 0x3297
    7b7e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    7b82:	60 e0       	ldi	r22, 0x00	; 0
    7b84:	71 e0       	ldi	r23, 0x01	; 1
    7b86:	80 e0       	ldi	r24, 0x00	; 0
    7b88:	90 e0       	ldi	r25, 0x00	; 0
    7b8a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    7b8e:	68 ee       	ldi	r22, 0xE8	; 232
    7b90:	73 e0       	ldi	r23, 0x03	; 3
    7b92:	80 e0       	ldi	r24, 0x00	; 0
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_WriteString("Microphone");
    7b9a:	87 e7       	ldi	r24, 0x77	; 119
    7b9c:	90 e2       	ldi	r25, 0x20	; 32
    7b9e:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7ba2:	89 e0       	ldi	r24, 0x09	; 9
    7ba4:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("8");
    7ba8:	82 e8       	ldi	r24, 0x82	; 130
    7baa:	90 e2       	ldi	r25, 0x20	; 32
    7bac:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7bb0:	8a e0       	ldi	r24, 0x0A	; 10
    7bb2:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_Write8(0x00);
    7bb6:	80 e0       	ldi	r24, 0x00	; 0
    7bb8:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	if(bufferNumber == 1){
    7bbc:	11 30       	cpi	r17, 0x01	; 1
    7bbe:	19 f4       	brne	.+6      	; 0x7bc6 <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    7bc0:	84 eb       	ldi	r24, 0xB4	; 180
    7bc2:	95 e4       	ldi	r25, 0x45	; 69
    7bc4:	02 c0       	rjmp	.+4      	; 0x7bca <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    7bc6:	84 e8       	ldi	r24, 0x84	; 132
    7bc8:	90 e4       	ldi	r25, 0x40	; 64
    7bca:	68 ee       	ldi	r22, 0xE8	; 232
    7bcc:	73 e0       	ldi	r23, 0x03	; 3
    7bce:	0e 94 6f 2b 	call	0x56de	; 0x56de <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    7bd2:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>

	f_sync(&Log_File);
    7bd6:	88 e6       	ldi	r24, 0x68	; 104
    7bd8:	9f e4       	ldi	r25, 0x4F	; 79
    7bda:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    7bde:	1f 91       	pop	r17
    7be0:	08 95       	ret

00007be2 <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    7be2:	1f 93       	push	r17
    7be4:	cf 93       	push	r28
    7be6:	df 93       	push	r29
    7be8:	18 2f       	mov	r17, r24
    7bea:	8f ef       	ldi	r24, 0xFF	; 255
    7bec:	9f ef       	ldi	r25, 0xFF	; 255
    7bee:	af ef       	ldi	r26, 0xFF	; 255
    7bf0:	bf ef       	ldi	r27, 0xFF	; 255
    7bf2:	80 93 5e 57 	sts	0x575E, r24
    7bf6:	90 93 5f 57 	sts	0x575F, r25
    7bfa:	a0 93 60 57 	sts	0x5760, r26
    7bfe:	b0 93 61 57 	sts	0x5761, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7c02:	6c e4       	ldi	r22, 0x4C	; 76
    7c04:	74 e7       	ldi	r23, 0x74	; 116
    7c06:	8e ed       	ldi	r24, 0xDE	; 222
    7c08:	90 eb       	ldi	r25, 0xB0	; 176
    7c0a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(48);				// record size
    7c0e:	60 e3       	ldi	r22, 0x30	; 48
    7c10:	70 e0       	ldi	r23, 0x00	; 0
    7c12:	80 e0       	ldi	r24, 0x00	; 0
    7c14:	90 e0       	ldi	r25, 0x00	; 0
    7c16:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(3); 		// record type
    7c1a:	83 e0       	ldi	r24, 0x03	; 3
    7c1c:	90 e0       	ldi	r25, 0x00	; 0
    7c1e:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7c22:	11 30       	cpi	r17, 0x01	; 1
    7c24:	49 f4       	brne	.+18     	; 0x7c38 <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    7c26:	60 91 88 32 	lds	r22, 0x3288
    7c2a:	70 91 89 32 	lds	r23, 0x3289
    7c2e:	80 91 8a 32 	lds	r24, 0x328A
    7c32:	90 91 8b 32 	lds	r25, 0x328B
    7c36:	08 c0       	rjmp	.+16     	; 0x7c48 <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    7c38:	60 91 8c 32 	lds	r22, 0x328C
    7c3c:	70 91 8d 32 	lds	r23, 0x328D
    7c40:	80 91 8e 32 	lds	r24, 0x328E
    7c44:	90 91 8f 32 	lds	r25, 0x328F
    7c48:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7c4c:	60 e0       	ldi	r22, 0x00	; 0
    7c4e:	70 e2       	ldi	r23, 0x20	; 32
    7c50:	8c e1       	ldi	r24, 0x1C	; 28
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(10);												// number of samples
    7c58:	6a e0       	ldi	r22, 0x0A	; 10
    7c5a:	70 e0       	ldi	r23, 0x00	; 0
    7c5c:	80 e0       	ldi	r24, 0x00	; 0
    7c5e:	90 e0       	ldi	r25, 0x00	; 0
    7c60:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_WriteString("Pressure");
    7c64:	84 e8       	ldi	r24, 0x84	; 132
    7c66:	90 e2       	ldi	r25, 0x20	; 32
    7c68:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7c6c:	89 e0       	ldi	r24, 0x09	; 9
    7c6e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("8");
    7c72:	82 e8       	ldi	r24, 0x82	; 130
    7c74:	90 e2       	ldi	r25, 0x20	; 32
    7c76:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7c7a:	8a e0       	ldi	r24, 0x0A	; 10
    7c7c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_Write8(0x00);
    7c80:	80 e0       	ldi	r24, 0x00	; 0
    7c82:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	if(bufferNumber == 1){
    7c86:	11 30       	cpi	r17, 0x01	; 1
    7c88:	51 f4       	brne	.+20     	; 0x7c9e <SD_WritePressureBuffer+0xbc>
    7c8a:	c4 ee       	ldi	r28, 0xE4	; 228
    7c8c:	db e3       	ldi	r29, 0x3B	; 59
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    7c8e:	89 91       	ld	r24, Y+
    7c90:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7c94:	8b e3       	ldi	r24, 0x3B	; 59
    7c96:	ce 3e       	cpi	r28, 0xEE	; 238
    7c98:	d8 07       	cpc	r29, r24
    7c9a:	c9 f7       	brne	.-14     	; 0x7c8e <SD_WritePressureBuffer+0xac>
    7c9c:	09 c0       	rjmp	.+18     	; 0x7cb0 <SD_WritePressureBuffer+0xce>
    7c9e:	c8 ea       	ldi	r28, 0xA8	; 168
    7ca0:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    7ca2:	89 91       	ld	r24, Y+
    7ca4:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7ca8:	8a e4       	ldi	r24, 0x4A	; 74
    7caa:	c2 3b       	cpi	r28, 0xB2	; 178
    7cac:	d8 07       	cpc	r29, r24
    7cae:	c9 f7       	brne	.-14     	; 0x7ca2 <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7cb0:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>

	f_sync(&Log_File);
    7cb4:	88 e6       	ldi	r24, 0x68	; 104
    7cb6:	9f e4       	ldi	r25, 0x4F	; 79
    7cb8:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    7cbc:	df 91       	pop	r29
    7cbe:	cf 91       	pop	r28
    7cc0:	1f 91       	pop	r17
    7cc2:	08 95       	ret

00007cc4 <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    7cc4:	1f 93       	push	r17
    7cc6:	cf 93       	push	r28
    7cc8:	df 93       	push	r29
    7cca:	18 2f       	mov	r17, r24
    7ccc:	8f ef       	ldi	r24, 0xFF	; 255
    7cce:	9f ef       	ldi	r25, 0xFF	; 255
    7cd0:	af ef       	ldi	r26, 0xFF	; 255
    7cd2:	bf ef       	ldi	r27, 0xFF	; 255
    7cd4:	80 93 5e 57 	sts	0x575E, r24
    7cd8:	90 93 5f 57 	sts	0x575F, r25
    7cdc:	a0 93 60 57 	sts	0x5760, r26
    7ce0:	b0 93 61 57 	sts	0x5761, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7ce4:	6c e4       	ldi	r22, 0x4C	; 76
    7ce6:	74 e7       	ldi	r23, 0x74	; 116
    7ce8:	8e ed       	ldi	r24, 0xDE	; 222
    7cea:	90 eb       	ldi	r25, 0xB0	; 176
    7cec:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(48);				// record size
    7cf0:	60 e3       	ldi	r22, 0x30	; 48
    7cf2:	70 e0       	ldi	r23, 0x00	; 0
    7cf4:	80 e0       	ldi	r24, 0x00	; 0
    7cf6:	90 e0       	ldi	r25, 0x00	; 0
    7cf8:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(3); 		// record type
    7cfc:	83 e0       	ldi	r24, 0x03	; 3
    7cfe:	90 e0       	ldi	r25, 0x00	; 0
    7d00:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    7d04:	11 30       	cpi	r17, 0x01	; 1
    7d06:	49 f4       	brne	.+18     	; 0x7d1a <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    7d08:	60 91 80 32 	lds	r22, 0x3280
    7d0c:	70 91 81 32 	lds	r23, 0x3281
    7d10:	80 91 82 32 	lds	r24, 0x3282
    7d14:	90 91 83 32 	lds	r25, 0x3283
    7d18:	08 c0       	rjmp	.+16     	; 0x7d2a <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    7d1a:	60 91 84 32 	lds	r22, 0x3284
    7d1e:	70 91 85 32 	lds	r23, 0x3285
    7d22:	80 91 86 32 	lds	r24, 0x3286
    7d26:	90 91 87 32 	lds	r25, 0x3287
    7d2a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7d2e:	60 e0       	ldi	r22, 0x00	; 0
    7d30:	70 e2       	ldi	r23, 0x20	; 32
    7d32:	8c e1       	ldi	r24, 0x1C	; 28
    7d34:	90 e0       	ldi	r25, 0x00	; 0
    7d36:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(10);												// number of samples
    7d3a:	6a e0       	ldi	r22, 0x0A	; 10
    7d3c:	70 e0       	ldi	r23, 0x00	; 0
    7d3e:	80 e0       	ldi	r24, 0x00	; 0
    7d40:	90 e0       	ldi	r25, 0x00	; 0
    7d42:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>

	SD_WriteString("Humidity");
    7d46:	8d e8       	ldi	r24, 0x8D	; 141
    7d48:	90 e2       	ldi	r25, 0x20	; 32
    7d4a:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7d4e:	89 e0       	ldi	r24, 0x09	; 9
    7d50:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("8");
    7d54:	82 e8       	ldi	r24, 0x82	; 130
    7d56:	90 e2       	ldi	r25, 0x20	; 32
    7d58:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7d5c:	8a e0       	ldi	r24, 0x0A	; 10
    7d5e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_Write8(0x00);
    7d62:	80 e0       	ldi	r24, 0x00	; 0
    7d64:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	if(bufferNumber == 1){
    7d68:	11 30       	cpi	r17, 0x01	; 1
    7d6a:	51 f4       	brne	.+20     	; 0x7d80 <SD_WriteHumidityBuffer+0xbc>
    7d6c:	c5 ee       	ldi	r28, 0xE5	; 229
    7d6e:	da e4       	ldi	r29, 0x4A	; 74
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    7d70:	89 91       	ld	r24, Y+
    7d72:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7d76:	8a e4       	ldi	r24, 0x4A	; 74
    7d78:	cf 3e       	cpi	r28, 0xEF	; 239
    7d7a:	d8 07       	cpc	r29, r24
    7d7c:	c9 f7       	brne	.-14     	; 0x7d70 <SD_WriteHumidityBuffer+0xac>
    7d7e:	09 c0       	rjmp	.+18     	; 0x7d92 <SD_WriteHumidityBuffer+0xce>
    7d80:	c0 e0       	ldi	r28, 0x00	; 0
    7d82:	d4 e5       	ldi	r29, 0x54	; 84
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    7d84:	89 91       	ld	r24, Y+
    7d86:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7d8a:	84 e5       	ldi	r24, 0x54	; 84
    7d8c:	ca 30       	cpi	r28, 0x0A	; 10
    7d8e:	d8 07       	cpc	r29, r24
    7d90:	c9 f7       	brne	.-14     	; 0x7d84 <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7d92:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>

	f_sync(&Log_File);
    7d96:	88 e6       	ldi	r24, 0x68	; 104
    7d98:	9f e4       	ldi	r25, 0x4F	; 79
    7d9a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    7d9e:	df 91       	pop	r29
    7da0:	cf 91       	pop	r28
    7da2:	1f 91       	pop	r17
    7da4:	08 95       	ret

00007da6 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    7da6:	1f 93       	push	r17
    7da8:	cf 93       	push	r28
    7daa:	df 93       	push	r29
    7dac:	18 2f       	mov	r17, r24
    7dae:	8f ef       	ldi	r24, 0xFF	; 255
    7db0:	9f ef       	ldi	r25, 0xFF	; 255
    7db2:	af ef       	ldi	r26, 0xFF	; 255
    7db4:	bf ef       	ldi	r27, 0xFF	; 255
    7db6:	80 93 5e 57 	sts	0x575E, r24
    7dba:	90 93 5f 57 	sts	0x575F, r25
    7dbe:	a0 93 60 57 	sts	0x5760, r26
    7dc2:	b0 93 61 57 	sts	0x5761, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7dc6:	6c e4       	ldi	r22, 0x4C	; 76
    7dc8:	74 e7       	ldi	r23, 0x74	; 116
    7dca:	8e ed       	ldi	r24, 0xDE	; 222
    7dcc:	90 eb       	ldi	r25, 0xB0	; 176
    7dce:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(62);				// record size  
    7dd2:	6e e3       	ldi	r22, 0x3E	; 62
    7dd4:	70 e0       	ldi	r23, 0x00	; 0
    7dd6:	80 e0       	ldi	r24, 0x00	; 0
    7dd8:	90 e0       	ldi	r25, 0x00	; 0
    7dda:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(3); 		// record type  
    7dde:	83 e0       	ldi	r24, 0x03	; 3
    7de0:	90 e0       	ldi	r25, 0x00	; 0
    7de2:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    7de6:	11 30       	cpi	r17, 0x01	; 1
    7de8:	49 f4       	brne	.+18     	; 0x7dfc <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    7dea:	60 91 78 32 	lds	r22, 0x3278
    7dee:	70 91 79 32 	lds	r23, 0x3279
    7df2:	80 91 7a 32 	lds	r24, 0x327A
    7df6:	90 91 7b 32 	lds	r25, 0x327B
    7dfa:	08 c0       	rjmp	.+16     	; 0x7e0c <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    7dfc:	60 91 7c 32 	lds	r22, 0x327C
    7e00:	70 91 7d 32 	lds	r23, 0x327D
    7e04:	80 91 7e 32 	lds	r24, 0x327E
    7e08:	90 91 7f 32 	lds	r25, 0x327F
    7e0c:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7e10:	60 e0       	ldi	r22, 0x00	; 0
    7e12:	70 e2       	ldi	r23, 0x20	; 32
    7e14:	8c e1       	ldi	r24, 0x1C	; 28
    7e16:	90 e0       	ldi	r25, 0x00	; 0
    7e18:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(10);												// number of samples
    7e1c:	6a e0       	ldi	r22, 0x0A	; 10
    7e1e:	70 e0       	ldi	r23, 0x00	; 0
    7e20:	80 e0       	ldi	r24, 0x00	; 0
    7e22:	90 e0       	ldi	r25, 0x00	; 0
    7e24:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
		
	SD_WriteString("Temperature");
    7e28:	86 e9       	ldi	r24, 0x96	; 150
    7e2a:	90 e2       	ldi	r25, 0x20	; 32
    7e2c:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    7e30:	89 e0       	ldi	r24, 0x09	; 9
    7e32:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("16");
    7e36:	82 ea       	ldi	r24, 0xA2	; 162
    7e38:	90 e2       	ldi	r25, 0x20	; 32
    7e3a:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    7e3e:	8a e0       	ldi	r24, 0x0A	; 10
    7e40:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_Write8(0x00);
    7e44:	80 e0       	ldi	r24, 0x00	; 0
    7e46:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	
	if(bufferNumber == 1){
    7e4a:	11 30       	cpi	r17, 0x01	; 1
    7e4c:	59 f4       	brne	.+22     	; 0x7e64 <SD_WriteTemperatureBuffer+0xbe>
    7e4e:	cc e9       	ldi	r28, 0x9C	; 156
    7e50:	d9 e4       	ldi	r29, 0x49	; 73
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    7e52:	89 91       	ld	r24, Y+
    7e54:	99 91       	ld	r25, Y+
    7e56:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    7e5a:	89 e4       	ldi	r24, 0x49	; 73
    7e5c:	c0 3b       	cpi	r28, 0xB0	; 176
    7e5e:	d8 07       	cpc	r29, r24
    7e60:	c1 f7       	brne	.-16     	; 0x7e52 <SD_WriteTemperatureBuffer+0xac>
    7e62:	0a c0       	rjmp	.+20     	; 0x7e78 <SD_WriteTemperatureBuffer+0xd2>
    7e64:	c9 e7       	ldi	r28, 0x79	; 121
    7e66:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    7e68:	89 91       	ld	r24, Y+
    7e6a:	99 91       	ld	r25, Y+
    7e6c:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7e70:	8a e4       	ldi	r24, 0x4A	; 74
    7e72:	cd 38       	cpi	r28, 0x8D	; 141
    7e74:	d8 07       	cpc	r29, r24
    7e76:	c1 f7       	brne	.-16     	; 0x7e68 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    7e78:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7e7c:	88 e6       	ldi	r24, 0x68	; 104
    7e7e:	9f e4       	ldi	r25, 0x4F	; 79
    7e80:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

}
    7e84:	df 91       	pop	r29
    7e86:	cf 91       	pop	r28
    7e88:	1f 91       	pop	r17
    7e8a:	08 95       	ret

00007e8c <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    7e8c:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7e8e:	dc 01       	movw	r26, r24
    7e90:	0d 90       	ld	r0, X+
    7e92:	00 20       	and	r0, r0
    7e94:	e9 f7       	brne	.-6      	; 0x7e90 <Rs232_SendString+0x4>
    7e96:	11 97       	sbiw	r26, 0x01	; 1
    7e98:	a8 1b       	sub	r26, r24
    7e9a:	b9 0b       	sbc	r27, r25
    7e9c:	90 e0       	ldi	r25, 0x00	; 0
    7e9e:	0a c0       	rjmp	.+20     	; 0x7eb4 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    7ea0:	e2 0f       	add	r30, r18
    7ea2:	f3 1f       	adc	r31, r19
    7ea4:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7ea6:	80 91 a1 09 	lds	r24, 0x09A1
    7eaa:	85 ff       	sbrs	r24, 5
    7eac:	fc cf       	rjmp	.-8      	; 0x7ea6 <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    7eae:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7eb2:	9f 5f       	subi	r25, 0xFF	; 255
    7eb4:	e9 2f       	mov	r30, r25
    7eb6:	f0 e0       	ldi	r31, 0x00	; 0
    7eb8:	ea 17       	cp	r30, r26
    7eba:	fb 07       	cpc	r31, r27
    7ebc:	88 f3       	brcs	.-30     	; 0x7ea0 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    7ebe:	66 23       	and	r22, r22
    7ec0:	71 f0       	breq	.+28     	; 0x7ede <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7ec2:	80 91 a1 09 	lds	r24, 0x09A1
    7ec6:	85 ff       	sbrs	r24, 5
    7ec8:	fc cf       	rjmp	.-8      	; 0x7ec2 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    7eca:	8d e0       	ldi	r24, 0x0D	; 13
    7ecc:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7ed0:	80 91 a1 09 	lds	r24, 0x09A1
    7ed4:	85 ff       	sbrs	r24, 5
    7ed6:	fc cf       	rjmp	.-8      	; 0x7ed0 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    7ed8:	8a e0       	ldi	r24, 0x0A	; 10
    7eda:	80 93 a0 09 	sts	0x09A0, r24
    7ede:	08 95       	ret

00007ee0 <Debug_SendString>:
}

void Debug_SendString(char string [],bool CR){
    7ee0:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7ee2:	dc 01       	movw	r26, r24
    7ee4:	0d 90       	ld	r0, X+
    7ee6:	00 20       	and	r0, r0
    7ee8:	e9 f7       	brne	.-6      	; 0x7ee4 <Debug_SendString+0x4>
    7eea:	11 97       	sbiw	r26, 0x01	; 1
    7eec:	a8 1b       	sub	r26, r24
    7eee:	b9 0b       	sbc	r27, r25
    7ef0:	90 e0       	ldi	r25, 0x00	; 0
    7ef2:	0c c0       	rjmp	.+24     	; 0x7f0c <Debug_SendString+0x2c>
		Debug_SendByte(string[i]);
    7ef4:	e2 0f       	add	r30, r18
    7ef6:	f3 1f       	adc	r31, r19
    7ef8:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7efa:	80 91 a1 08 	lds	r24, 0x08A1
    7efe:	85 ff       	sbrs	r24, 5
    7f00:	fc cf       	rjmp	.-8      	; 0x7efa <Debug_SendString+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7f02:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7f06:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7f0a:	9f 5f       	subi	r25, 0xFF	; 255
    7f0c:	e9 2f       	mov	r30, r25
    7f0e:	f0 e0       	ldi	r31, 0x00	; 0
    7f10:	ea 17       	cp	r30, r26
    7f12:	fb 07       	cpc	r31, r27
    7f14:	78 f3       	brcs	.-34     	; 0x7ef4 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    7f16:	66 23       	and	r22, r22
    7f18:	91 f0       	breq	.+36     	; 0x7f3e <Debug_SendString+0x5e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7f1a:	80 91 a1 08 	lds	r24, 0x08A1
    7f1e:	85 ff       	sbrs	r24, 5
    7f20:	fc cf       	rjmp	.-8      	; 0x7f1a <Debug_SendString+0x3a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7f22:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7f26:	8d e0       	ldi	r24, 0x0D	; 13
    7f28:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7f2c:	80 91 a1 08 	lds	r24, 0x08A1
    7f30:	85 ff       	sbrs	r24, 5
    7f32:	fc cf       	rjmp	.-8      	; 0x7f2c <Debug_SendString+0x4c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    7f34:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    7f38:	8a e0       	ldi	r24, 0x0A	; 10
    7f3a:	80 93 a0 08 	sts	0x08A0, r24
    7f3e:	08 95       	ret

00007f40 <connectToComputer>:
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return result;
}

void connectToComputer(void){
    7f40:	af 92       	push	r10
    7f42:	bf 92       	push	r11
    7f44:	cf 92       	push	r12
    7f46:	df 92       	push	r13
    7f48:	ef 92       	push	r14
    7f4a:	ff 92       	push	r15
    7f4c:	0f 93       	push	r16
    7f4e:	1f 93       	push	r17
    7f50:	cf 93       	push	r28
    7f52:	df 93       	push	r29
	uint16_t singCounter;
	uint8_t  char1;
	uint8_t  char2;

	connected = false;
    7f54:	10 92 be 32 	sts	0x32BE, r1
	Debug_ClearBuffer();
    7f58:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Debug_ClearBuffer>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    7f5c:	80 e2       	ldi	r24, 0x20	; 32
    7f5e:	c8 2e       	mov	r12, r24
    7f60:	86 e0       	ldi	r24, 0x06	; 6
    7f62:	d8 2e       	mov	r13, r24
    7f64:	00 e8       	ldi	r16, 0x80	; 128
    7f66:	a0 2e       	mov	r10, r16
    7f68:	e1 2c       	mov	r14, r1
    7f6a:	18 e4       	ldi	r17, 0x48	; 72
    7f6c:	f1 2e       	mov	r15, r17
				char1 = Debug_GetByte(false);
				if(char1 == 'B'){
					_delay_ms(5);
					char2 = Debug_GetByte(false);
					if(char2 == 'T'){
						connected = true;
    7f6e:	06 e6       	ldi	r16, 0x66	; 102
    7f70:	1e e0       	ldi	r17, 0x0E	; 14
    7f72:	bb 24       	eor	r11, r11
    7f74:	b3 94       	inc	r11
    7f76:	31 c0       	rjmp	.+98     	; 0x7fda <connectToComputer+0x9a>
	uint8_t  char2;

	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		Debug_SendString("BS",false);
    7f78:	85 ea       	ldi	r24, 0xA5	; 165
    7f7a:	90 e2       	ldi	r25, 0x20	; 32
    7f7c:	60 e0       	ldi	r22, 0x00	; 0
    7f7e:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
		if(!recording){
    7f82:	80 91 dd 32 	lds	r24, 0x32DD
    7f86:	88 23       	and	r24, r24
    7f88:	11 f4       	brne	.+4      	; 0x7f8e <connectToComputer+0x4e>
    7f8a:	f6 01       	movw	r30, r12
    7f8c:	a5 82       	std	Z+5, r10	; 0x05
    7f8e:	ce ee       	ldi	r28, 0xEE	; 238
    7f90:	d2 e0       	ldi	r29, 0x02	; 2
		    Leds_Set(wifi_Red);
		}
		singCounter = 750;
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
    7f92:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
    7f96:	88 23       	and	r24, r24
    7f98:	d9 f0       	breq	.+54     	; 0x7fd0 <connectToComputer+0x90>
				char1 = Debug_GetByte(false);
    7f9a:	80 e0       	ldi	r24, 0x00	; 0
    7f9c:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
				if(char1 == 'B'){
    7fa0:	82 34       	cpi	r24, 0x42	; 66
    7fa2:	b1 f4       	brne	.+44     	; 0x7fd0 <connectToComputer+0x90>
    7fa4:	c7 01       	movw	r24, r14
    7fa6:	01 97       	sbiw	r24, 0x01	; 1
    7fa8:	f1 f7       	brne	.-4      	; 0x7fa6 <connectToComputer+0x66>
					_delay_ms(5);
					char2 = Debug_GetByte(false);
    7faa:	80 e0       	ldi	r24, 0x00	; 0
    7fac:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
					if(char2 == 'T'){
    7fb0:	84 35       	cpi	r24, 0x54	; 84
    7fb2:	71 f4       	brne	.+28     	; 0x7fd0 <connectToComputer+0x90>
						connected = true;
    7fb4:	b0 92 be 32 	sts	0x32BE, r11
						Debug_SendString("BT",false);
    7fb8:	88 ea       	ldi	r24, 0xA8	; 168
    7fba:	90 e2       	ldi	r25, 0x20	; 32
    7fbc:	60 e0       	ldi	r22, 0x00	; 0
    7fbe:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
						timeOutCounter = 0;
    7fc2:	10 92 c2 32 	sts	0x32C2, r1
    7fc6:	10 92 c3 32 	sts	0x32C3, r1
						Debug_ClearBuffer();
    7fca:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Debug_ClearBuffer>
    7fce:	05 c0       	rjmp	.+10     	; 0x7fda <connectToComputer+0x9a>
    7fd0:	c8 01       	movw	r24, r16
    7fd2:	01 97       	sbiw	r24, 0x01	; 1
    7fd4:	f1 f7       	brne	.-4      	; 0x7fd2 <connectToComputer+0x92>
						break;
					}
				}
			}
			_delay_ms(1);
			singCounter--;
    7fd6:	21 97       	sbiw	r28, 0x01	; 1
		Debug_SendString("BS",false);
		if(!recording){
		    Leds_Set(wifi_Red);
		}
		singCounter = 750;
		while(singCounter > 0){
    7fd8:	e1 f6       	brne	.-72     	; 0x7f92 <connectToComputer+0x52>
	uint8_t  char1;
	uint8_t  char2;

	connected = false;
	Debug_ClearBuffer();
	while(!connected){
    7fda:	80 91 be 32 	lds	r24, 0x32BE
    7fde:	88 23       	and	r24, r24
    7fe0:	59 f2       	breq	.-106    	; 0x7f78 <connectToComputer+0x38>
			}
			_delay_ms(1);
			singCounter--;
		}
	}
}
    7fe2:	df 91       	pop	r29
    7fe4:	cf 91       	pop	r28
    7fe6:	1f 91       	pop	r17
    7fe8:	0f 91       	pop	r16
    7fea:	ff 90       	pop	r15
    7fec:	ef 90       	pop	r14
    7fee:	df 90       	pop	r13
    7ff0:	cf 90       	pop	r12
    7ff2:	bf 90       	pop	r11
    7ff4:	af 90       	pop	r10
    7ff6:	08 95       	ret

00007ff8 <Debug_To_Wifi>:
	}
}


void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
    7ff8:	8b ea       	ldi	r24, 0xAB	; 171
    7ffa:	90 e2       	ldi	r25, 0x20	; 32
    7ffc:	61 e0       	ldi	r22, 0x01	; 1
    7ffe:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
	while(1){
		if(Debug_CharReadyToRead()){
    8002:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
    8006:	88 23       	and	r24, r24
    8008:	49 f0       	breq	.+18     	; 0x801c <Debug_To_Wifi+0x24>
		    while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    800a:	80 91 a1 0a 	lds	r24, 0x0AA1
    800e:	85 ff       	sbrs	r24, 5
    8010:	fc cf       	rjmp	.-8      	; 0x800a <Debug_To_Wifi+0x12>
            Wifi_Usart.DATA = Debug_GetByte(true);
    8012:	81 e0       	ldi	r24, 0x01	; 1
    8014:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    8018:	80 93 a0 0a 	sts	0x0AA0, r24
		}
		if(Wifi_CharReadyToRead()){
    801c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    8020:	88 23       	and	r24, r24
    8022:	79 f3       	breq	.-34     	; 0x8002 <Debug_To_Wifi+0xa>
			Debug_SendByte(Wifi_GetByte(true));
    8024:	81 e0       	ldi	r24, 0x01	; 1
    8026:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    802a:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    802c:	80 91 a1 08 	lds	r24, 0x08A1
    8030:	85 ff       	sbrs	r24, 5
    8032:	fc cf       	rjmp	.-8      	; 0x802c <Debug_To_Wifi+0x34>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8034:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8038:	90 93 a0 08 	sts	0x08A0, r25
    803c:	e2 cf       	rjmp	.-60     	; 0x8002 <Debug_To_Wifi+0xa>

0000803e <Wifi_SendByte>:
	}
	return tmp;
}


uint16_t Wifi_SendByte(uint8_t data){
    803e:	48 2f       	mov	r20, r24
    timeOutCounter = 0;
    8040:	10 92 c2 32 	sts	0x32C2, r1
    8044:	10 92 c3 32 	sts	0x32C3, r1
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    8048:	80 91 a1 0a 	lds	r24, 0x0AA1
    804c:	85 ff       	sbrs	r24, 5
    804e:	fc cf       	rjmp	.-8      	; 0x8048 <Wifi_SendByte+0xa>
    8050:	1f c0       	rjmp	.+62     	; 0x8090 <Wifi_SendByte+0x52>
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
        timeOutCounter++;
    8052:	80 91 c2 32 	lds	r24, 0x32C2
    8056:	90 91 c3 32 	lds	r25, 0x32C3
    805a:	01 96       	adiw	r24, 0x01	; 1
    805c:	80 93 c2 32 	sts	0x32C2, r24
    8060:	90 93 c3 32 	sts	0x32C3, r25
    8064:	c9 01       	movw	r24, r18
    8066:	01 97       	sbiw	r24, 0x01	; 1
    8068:	f1 f7       	brne	.-4      	; 0x8066 <Wifi_SendByte+0x28>
        _delay_ms(1);
        if(timeOutCounter > 60000){
    806a:	80 91 c2 32 	lds	r24, 0x32C2
    806e:	90 91 c3 32 	lds	r25, 0x32C3
    8072:	81 56       	subi	r24, 0x61	; 97
    8074:	9a 4e       	sbci	r25, 0xEA	; 234
    8076:	70 f0       	brcs	.+28     	; 0x8094 <Wifi_SendByte+0x56>
           Wifi_Usart.DATA = data;
    8078:	40 93 a0 0a 	sts	0x0AA0, r20
           Debug_SendString("Hanging",true);
    807c:	89 eb       	ldi	r24, 0xB9	; 185
    807e:	90 e2       	ldi	r25, 0x20	; 32
    8080:	61 e0       	ldi	r22, 0x01	; 1
    8082:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
           return timeOutCounter;
    8086:	20 91 c2 32 	lds	r18, 0x32C2
    808a:	30 91 c3 32 	lds	r19, 0x32C3
    808e:	11 c0       	rjmp	.+34     	; 0x80b2 <Wifi_SendByte+0x74>
    8090:	26 e6       	ldi	r18, 0x66	; 102
    8092:	3e e0       	ldi	r19, 0x0E	; 14


uint16_t Wifi_SendByte(uint8_t data){
    timeOutCounter = 0;
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0){
    8094:	80 91 68 06 	lds	r24, 0x0668
    8098:	81 fd       	sbrc	r24, 1
    809a:	db cf       	rjmp	.-74     	; 0x8052 <Wifi_SendByte+0x14>
           Debug_SendString("Hanging",true);
           return timeOutCounter;
        }
    }                              // Wait for RTS to be low

    Wifi_Usart.DATA = data;
    809c:	40 93 a0 0a 	sts	0x0AA0, r20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    80a0:	8a e7       	ldi	r24, 0x7A	; 122
    80a2:	8a 95       	dec	r24
    80a4:	f1 f7       	brne	.-4      	; 0x80a2 <Wifi_SendByte+0x64>
    _delay_us(25);
    PORTB.OUTCLR = (1 << 4);
    80a6:	80 e1       	ldi	r24, 0x10	; 16
    80a8:	e0 e2       	ldi	r30, 0x20	; 32
    80aa:	f6 e0       	ldi	r31, 0x06	; 6
    80ac:	86 83       	std	Z+6, r24	; 0x06
    80ae:	20 e0       	ldi	r18, 0x00	; 0
    80b0:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
}
    80b2:	c9 01       	movw	r24, r18
    80b4:	08 95       	ret

000080b6 <sendPort>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    80b6:	80 91 a1 08 	lds	r24, 0x08A1
    80ba:	85 ff       	sbrs	r24, 5
    80bc:	fc cf       	rjmp	.-8      	; 0x80b6 <sendPort>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    80be:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    80c2:	8f e4       	ldi	r24, 0x4F	; 79
    80c4:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(server,true);
}

void sendPort(void){
	Debug_SendByte('O');
	if(port[strlen(port)-1] < 32){
    80c8:	e8 e3       	ldi	r30, 0x38	; 56
    80ca:	fc e5       	ldi	r31, 0x5C	; 92
    80cc:	01 90       	ld	r0, Z+
    80ce:	00 20       	and	r0, r0
    80d0:	e9 f7       	brne	.-6      	; 0x80cc <sendPort+0x16>
    80d2:	32 97       	sbiw	r30, 0x02	; 2
    80d4:	80 81       	ld	r24, Z
    80d6:	80 32       	cpi	r24, 0x20	; 32
    80d8:	08 f4       	brcc	.+2      	; 0x80dc <sendPort+0x26>
        port[strlen(port)-1] = 0;
    80da:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(port)+2);
    80dc:	e8 e3       	ldi	r30, 0x38	; 56
    80de:	fc e5       	ldi	r31, 0x5C	; 92
    80e0:	01 90       	ld	r0, Z+
    80e2:	00 20       	and	r0, r0
    80e4:	e9 f7       	brne	.-6      	; 0x80e0 <sendPort+0x2a>
    80e6:	31 97       	sbiw	r30, 0x01	; 1
    80e8:	e8 53       	subi	r30, 0x38	; 56
    80ea:	fc 45       	sbci	r31, 0x5C	; 92
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    80ec:	80 91 a1 08 	lds	r24, 0x08A1
    80f0:	85 ff       	sbrs	r24, 5
    80f2:	fc cf       	rjmp	.-8      	; 0x80ec <sendPort+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    80f4:	80 91 68 06 	lds	r24, 0x0668
    80f8:	8e 2f       	mov	r24, r30
    80fa:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    80fc:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(port,true);
    8100:	88 e3       	ldi	r24, 0x38	; 56
    8102:	9c e5       	ldi	r25, 0x5C	; 92
    8104:	61 e0       	ldi	r22, 0x01	; 1
    8106:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
}
    810a:	08 95       	ret

0000810c <sendServer>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    810c:	80 91 a1 08 	lds	r24, 0x08A1
    8110:	85 ff       	sbrs	r24, 5
    8112:	fc cf       	rjmp	.-8      	; 0x810c <sendServer>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8114:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8118:	86 e5       	ldi	r24, 0x56	; 86
    811a:	80 93 a0 08 	sts	0x08A0, r24
    }
}

void sendServer(void){
	Debug_SendByte('V');
	if(server[strlen(server)-1] < 32){
    811e:	e2 e3       	ldi	r30, 0x32	; 50
    8120:	fa e4       	ldi	r31, 0x4A	; 74
    8122:	01 90       	ld	r0, Z+
    8124:	00 20       	and	r0, r0
    8126:	e9 f7       	brne	.-6      	; 0x8122 <sendServer+0x16>
    8128:	32 97       	sbiw	r30, 0x02	; 2
    812a:	80 81       	ld	r24, Z
    812c:	80 32       	cpi	r24, 0x20	; 32
    812e:	08 f4       	brcc	.+2      	; 0x8132 <sendServer+0x26>
        server[strlen(server)-1] = 0;
    8130:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(server)+2);
    8132:	e2 e3       	ldi	r30, 0x32	; 50
    8134:	fa e4       	ldi	r31, 0x4A	; 74
    8136:	01 90       	ld	r0, Z+
    8138:	00 20       	and	r0, r0
    813a:	e9 f7       	brne	.-6      	; 0x8136 <sendServer+0x2a>
    813c:	31 97       	sbiw	r30, 0x01	; 1
    813e:	e2 53       	subi	r30, 0x32	; 50
    8140:	fa 44       	sbci	r31, 0x4A	; 74
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8142:	80 91 a1 08 	lds	r24, 0x08A1
    8146:	85 ff       	sbrs	r24, 5
    8148:	fc cf       	rjmp	.-8      	; 0x8142 <sendServer+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    814a:	80 91 68 06 	lds	r24, 0x0668
    814e:	8e 2f       	mov	r24, r30
    8150:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8152:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(server,true);
    8156:	82 e3       	ldi	r24, 0x32	; 50
    8158:	9a e4       	ldi	r25, 0x4A	; 74
    815a:	61 e0       	ldi	r22, 0x01	; 1
    815c:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
}
    8160:	08 95       	ret

00008162 <uploadFile>:
    }
	Debug_SendByte(strlen(nickname)+2);
	Debug_SendString(nickname,true);
}

void uploadFile(void){
    8162:	9f 92       	push	r9
    8164:	af 92       	push	r10
    8166:	bf 92       	push	r11
    8168:	cf 92       	push	r12
    816a:	df 92       	push	r13
    816c:	ef 92       	push	r14
    816e:	ff 92       	push	r15
    8170:	0f 93       	push	r16
    8172:	1f 93       	push	r17
    if(!uploading){
    8174:	80 91 14 33 	lds	r24, 0x3314
    8178:	88 23       	and	r24, r24
    817a:	51 f5       	brne	.+84     	; 0x81d0 <uploadFile+0x6e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    817c:	80 91 a1 08 	lds	r24, 0x08A1
    8180:	85 ff       	sbrs	r24, 5
    8182:	fc cf       	rjmp	.-8      	; 0x817c <uploadFile+0x1a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8184:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8188:	84 e4       	ldi	r24, 0x44	; 68
    818a:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    818e:	80 91 a1 08 	lds	r24, 0x08A1
    8192:	85 ff       	sbrs	r24, 5
    8194:	fc cf       	rjmp	.-8      	; 0x818e <uploadFile+0x2c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8196:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    819a:	10 92 a0 08 	sts	0x08A0, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    819e:	80 91 a1 08 	lds	r24, 0x08A1
    81a2:	85 ff       	sbrs	r24, 5
    81a4:	fc cf       	rjmp	.-8      	; 0x819e <uploadFile+0x3c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    81a6:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81aa:	10 92 a0 08 	sts	0x08A0, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    81ae:	80 91 a1 08 	lds	r24, 0x08A1
    81b2:	85 ff       	sbrs	r24, 5
    81b4:	fc cf       	rjmp	.-8      	; 0x81ae <uploadFile+0x4c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    81b6:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81ba:	10 92 a0 08 	sts	0x08A0, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    81be:	80 91 a1 08 	lds	r24, 0x08A1
    81c2:	85 ff       	sbrs	r24, 5
    81c4:	fc cf       	rjmp	.-8      	; 0x81be <uploadFile+0x5c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    81c6:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    81ca:	10 92 a0 08 	sts	0x08A0, r1
    81ce:	06 c1       	rjmp	.+524    	; 0x83dc <uploadFile+0x27a>
        Debug_SendByte(0);
        return;
    }

    uint32_t lengthOfResp = 0;
    lengthOfResp = uploadFileSize + strlen(fileToUpload) + 2;
    81d0:	20 91 1d 33 	lds	r18, 0x331D
    81d4:	30 91 1e 33 	lds	r19, 0x331E
    81d8:	40 91 1f 33 	lds	r20, 0x331F
    81dc:	50 91 20 33 	lds	r21, 0x3320
    81e0:	85 ed       	ldi	r24, 0xD5	; 213
    81e2:	9b e3       	ldi	r25, 0x3B	; 59
    81e4:	dc 01       	movw	r26, r24
    81e6:	0d 90       	ld	r0, X+
    81e8:	00 20       	and	r0, r0
    81ea:	e9 f7       	brne	.-6      	; 0x81e6 <uploadFile+0x84>
    81ec:	cd 01       	movw	r24, r26
    81ee:	01 97       	sbiw	r24, 0x01	; 1
    81f0:	85 5d       	subi	r24, 0xD5	; 213
    81f2:	9b 43       	sbci	r25, 0x3B	; 59
    81f4:	2e 5f       	subi	r18, 0xFE	; 254
    81f6:	3f 4f       	sbci	r19, 0xFF	; 255
    81f8:	4f 4f       	sbci	r20, 0xFF	; 255
    81fa:	5f 4f       	sbci	r21, 0xFF	; 255
    81fc:	a0 e0       	ldi	r26, 0x00	; 0
    81fe:	b0 e0       	ldi	r27, 0x00	; 0
    8200:	28 0f       	add	r18, r24
    8202:	39 1f       	adc	r19, r25
    8204:	4a 1f       	adc	r20, r26
    8206:	5b 1f       	adc	r21, r27
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8208:	80 91 a1 08 	lds	r24, 0x08A1
    820c:	85 ff       	sbrs	r24, 5
    820e:	fc cf       	rjmp	.-8      	; 0x8208 <uploadFile+0xa6>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8210:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8214:	84 e4       	ldi	r24, 0x44	; 68
    8216:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    821a:	80 91 a1 08 	lds	r24, 0x08A1
    821e:	85 ff       	sbrs	r24, 5
    8220:	fc cf       	rjmp	.-8      	; 0x821a <uploadFile+0xb8>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8222:	80 91 68 06 	lds	r24, 0x0668
    Debug_SendByte('D');
    Debug_SendByte((lengthOfResp >> 24) & 0xFF);
    8226:	85 2f       	mov	r24, r21
    8228:	99 27       	eor	r25, r25
    822a:	aa 27       	eor	r26, r26
    822c:	bb 27       	eor	r27, r27
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    822e:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8232:	80 91 a1 08 	lds	r24, 0x08A1
    8236:	85 ff       	sbrs	r24, 5
    8238:	fc cf       	rjmp	.-8      	; 0x8232 <uploadFile+0xd0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    823a:	80 91 68 06 	lds	r24, 0x0668
    Debug_SendByte((lengthOfResp >> 16) & 0xFF);
    823e:	ca 01       	movw	r24, r20
    8240:	aa 27       	eor	r26, r26
    8242:	bb 27       	eor	r27, r27
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8244:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8248:	80 91 a1 08 	lds	r24, 0x08A1
    824c:	85 ff       	sbrs	r24, 5
    824e:	fc cf       	rjmp	.-8      	; 0x8248 <uploadFile+0xe6>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8250:	80 91 68 06 	lds	r24, 0x0668
    Debug_SendByte((lengthOfResp >>  8) & 0xFF);
    8254:	bb 27       	eor	r27, r27
    8256:	a5 2f       	mov	r26, r21
    8258:	94 2f       	mov	r25, r20
    825a:	83 2f       	mov	r24, r19
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    825c:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8260:	80 91 a1 08 	lds	r24, 0x08A1
    8264:	85 ff       	sbrs	r24, 5
    8266:	fc cf       	rjmp	.-8      	; 0x8260 <uploadFile+0xfe>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8268:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    826c:	20 93 a0 08 	sts	0x08A0, r18
    Debug_SendByte((lengthOfResp >>  0) & 0xFF);
    Debug_SendString(fileToUpload,true);
    8270:	85 ed       	ldi	r24, 0xD5	; 213
    8272:	9b e3       	ldi	r25, 0x3B	; 59
    8274:	61 e0       	ldi	r22, 0x01	; 1
    8276:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>

    numberOfPacketsToUpload = uploadFileSize /  1000;
    827a:	60 91 1d 33 	lds	r22, 0x331D
    827e:	70 91 1e 33 	lds	r23, 0x331E
    8282:	80 91 1f 33 	lds	r24, 0x331F
    8286:	90 91 20 33 	lds	r25, 0x3320
    828a:	28 ee       	ldi	r18, 0xE8	; 232
    828c:	33 e0       	ldi	r19, 0x03	; 3
    828e:	40 e0       	ldi	r20, 0x00	; 0
    8290:	50 e0       	ldi	r21, 0x00	; 0
    8292:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    8296:	c9 01       	movw	r24, r18
    8298:	da 01       	movw	r26, r20
    829a:	80 93 25 33 	sts	0x3325, r24
    829e:	90 93 26 33 	sts	0x3326, r25
    82a2:	a0 93 27 33 	sts	0x3327, r26
    82a6:	b0 93 28 33 	sts	0x3328, r27
    leftOverBytesToUpload   = uploadFileSize %  1000;
    82aa:	60 91 1d 33 	lds	r22, 0x331D
    82ae:	70 91 1e 33 	lds	r23, 0x331E
    82b2:	80 91 1f 33 	lds	r24, 0x331F
    82b6:	90 91 20 33 	lds	r25, 0x3320
    82ba:	28 ee       	ldi	r18, 0xE8	; 232
    82bc:	33 e0       	ldi	r19, 0x03	; 3
    82be:	40 e0       	ldi	r20, 0x00	; 0
    82c0:	50 e0       	ldi	r21, 0x00	; 0
    82c2:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    82c6:	9b 01       	movw	r18, r22
    82c8:	ac 01       	movw	r20, r24
    82ca:	20 93 29 33 	sts	0x3329, r18
    82ce:	30 93 2a 33 	sts	0x332A, r19
    82d2:	40 93 2b 33 	sts	0x332B, r20
    82d6:	50 93 2c 33 	sts	0x332C, r21
    82da:	20 91 05 33 	lds	r18, 0x3305
    82de:	aa 24       	eor	r10, r10
    82e0:	bb 24       	eor	r11, r11
    82e2:	65 01       	movw	r12, r10
    82e4:	ee 24       	eor	r14, r14
    82e6:	ff 24       	eor	r15, r15
    82e8:	87 01       	movw	r16, r14

    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
    82ea:	99 24       	eor	r9, r9
    82ec:	93 94       	inc	r9
    82ee:	31 c0       	rjmp	.+98     	; 0x8352 <uploadFile+0x1f0>

    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;

    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
    82f0:	10 92 18 33 	sts	0x3318, r1
        okToFillUploadFileBuffer = true;
    82f4:	90 92 17 33 	sts	0x3317, r9

        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    82f8:	20 91 25 33 	lds	r18, 0x3325
    82fc:	30 91 26 33 	lds	r19, 0x3326
    8300:	40 91 27 33 	lds	r20, 0x3327
    8304:	50 91 28 33 	lds	r21, 0x3328
    8308:	c8 01       	movw	r24, r16
    830a:	b7 01       	movw	r22, r14
    830c:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
        while(!uploadFileBufferFull);
    8310:	80 91 18 33 	lds	r24, 0x3318
    8314:	88 23       	and	r24, r24
    8316:	e1 f3       	breq	.-8      	; 0x8310 <uploadFile+0x1ae>
    8318:	e5 ee       	ldi	r30, 0xE5	; 229
    831a:	f7 e3       	ldi	r31, 0x37	; 55
            for(uint16_t j = 0; j <  uploadChunkSize; j++){
                Debug_SendByte(uploadFileBuffer[j]);
    831c:	90 81       	ld	r25, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    831e:	80 91 a1 08 	lds	r24, 0x08A1
    8322:	85 ff       	sbrs	r24, 5
    8324:	fc cf       	rjmp	.-8      	; 0x831e <uploadFile+0x1bc>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8326:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    832a:	90 93 a0 08 	sts	0x08A0, r25
    832e:	31 96       	adiw	r30, 0x01	; 1
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;

        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
        while(!uploadFileBufferFull);
            for(uint16_t j = 0; j <  uploadChunkSize; j++){
    8330:	bb e3       	ldi	r27, 0x3B	; 59
    8332:	ed 3c       	cpi	r30, 0xCD	; 205
    8334:	fb 07       	cpc	r31, r27
    8336:	91 f7       	brne	.-28     	; 0x831c <uploadFile+0x1ba>
    Debug_SendString(fileToUpload,true);

    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;

    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    8338:	08 94       	sec
    833a:	a1 1c       	adc	r10, r1
    833c:	b1 1c       	adc	r11, r1
    833e:	c1 1c       	adc	r12, r1
    8340:	d1 1c       	adc	r13, r1
    8342:	84 e6       	ldi	r24, 0x64	; 100
    8344:	90 e0       	ldi	r25, 0x00	; 0
    8346:	a0 e0       	ldi	r26, 0x00	; 0
    8348:	b0 e0       	ldi	r27, 0x00	; 0
    834a:	e8 0e       	add	r14, r24
    834c:	f9 1e       	adc	r15, r25
    834e:	0a 1f       	adc	r16, r26
    8350:	1b 1f       	adc	r17, r27
    8352:	80 91 25 33 	lds	r24, 0x3325
    8356:	90 91 26 33 	lds	r25, 0x3326
    835a:	a0 91 27 33 	lds	r26, 0x3327
    835e:	b0 91 28 33 	lds	r27, 0x3328
    8362:	a8 16       	cp	r10, r24
    8364:	b9 06       	cpc	r11, r25
    8366:	ca 06       	cpc	r12, r26
    8368:	db 06       	cpc	r13, r27
    836a:	10 f2       	brcs	.-124    	; 0x82f0 <uploadFile+0x18e>
    836c:	20 93 05 33 	sts	0x3305, r18
        while(!uploadFileBufferFull);
            for(uint16_t j = 0; j <  uploadChunkSize; j++){
                Debug_SendByte(uploadFileBuffer[j]);
            }
    }
    uploadFileBufferFull = false;
    8370:	10 92 18 33 	sts	0x3318, r1
    okToFillUploadFileBuffer = true;
    8374:	81 e0       	ldi	r24, 0x01	; 1
    8376:	80 93 17 33 	sts	0x3317, r24
    while(!uploadFileBufferFull);
    837a:	80 91 18 33 	lds	r24, 0x3318
    837e:	88 23       	and	r24, r24
    8380:	e1 f3       	breq	.-8      	; 0x837a <uploadFile+0x218>
    8382:	e5 ee       	ldi	r30, 0xE5	; 229
    8384:	f7 e3       	ldi	r31, 0x37	; 55
    8386:	20 e0       	ldi	r18, 0x00	; 0
    8388:	30 e0       	ldi	r19, 0x00	; 0
    838a:	40 e0       	ldi	r20, 0x00	; 0
    838c:	50 e0       	ldi	r21, 0x00	; 0
    838e:	0e c0       	rjmp	.+28     	; 0x83ac <uploadFile+0x24a>
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
        Debug_SendByte(uploadFileBuffer[j]);
    8390:	90 81       	ld	r25, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8392:	80 91 a1 08 	lds	r24, 0x08A1
    8396:	85 ff       	sbrs	r24, 5
    8398:	fc cf       	rjmp	.-8      	; 0x8392 <uploadFile+0x230>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    839a:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    839e:	90 93 a0 08 	sts	0x08A0, r25
    83a2:	2f 5f       	subi	r18, 0xFF	; 255
    83a4:	3f 4f       	sbci	r19, 0xFF	; 255
    83a6:	4f 4f       	sbci	r20, 0xFF	; 255
    83a8:	5f 4f       	sbci	r21, 0xFF	; 255
    83aa:	31 96       	adiw	r30, 0x01	; 1
            }
    }
    uploadFileBufferFull = false;
    okToFillUploadFileBuffer = true;
    while(!uploadFileBufferFull);
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    83ac:	80 91 29 33 	lds	r24, 0x3329
    83b0:	90 91 2a 33 	lds	r25, 0x332A
    83b4:	a0 91 2b 33 	lds	r26, 0x332B
    83b8:	b0 91 2c 33 	lds	r27, 0x332C
    83bc:	28 17       	cp	r18, r24
    83be:	39 07       	cpc	r19, r25
    83c0:	4a 07       	cpc	r20, r26
    83c2:	5b 07       	cpc	r21, r27
    83c4:	28 f3       	brcs	.-54     	; 0x8390 <uploadFile+0x22e>
        Debug_SendByte(uploadFileBuffer[j]);
    }

    okToCloseUploadFile = true;
    83c6:	81 e0       	ldi	r24, 0x01	; 1
    83c8:	80 93 10 33 	sts	0x3310, r24
    while(okToCloseUploadFile);
    83cc:	80 91 10 33 	lds	r24, 0x3310
    83d0:	88 23       	and	r24, r24
    83d2:	e1 f7       	brne	.-8      	; 0x83cc <uploadFile+0x26a>

    uploading = false;
    83d4:	10 92 14 33 	sts	0x3314, r1
    okToUpload = false;
    83d8:	10 92 13 33 	sts	0x3313, r1
}
    83dc:	1f 91       	pop	r17
    83de:	0f 91       	pop	r16
    83e0:	ff 90       	pop	r15
    83e2:	ef 90       	pop	r14
    83e4:	df 90       	pop	r13
    83e6:	cf 90       	pop	r12
    83e8:	bf 90       	pop	r11
    83ea:	af 90       	pop	r10
    83ec:	9f 90       	pop	r9
    83ee:	08 95       	ret

000083f0 <sendNickname>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    83f0:	80 91 a1 08 	lds	r24, 0x08A1
    83f4:	85 ff       	sbrs	r24, 5
    83f6:	fc cf       	rjmp	.-8      	; 0x83f0 <sendNickname>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    83f8:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    83fc:	8e e4       	ldi	r24, 0x4E	; 78
    83fe:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(user,true);
}

void sendNickname(void){
	Debug_SendByte('N');
	if(nickname[strlen(nickname)-1] < 32){
    8402:	ea e6       	ldi	r30, 0x6A	; 106
    8404:	fc e5       	ldi	r31, 0x5C	; 92
    8406:	01 90       	ld	r0, Z+
    8408:	00 20       	and	r0, r0
    840a:	e9 f7       	brne	.-6      	; 0x8406 <sendNickname+0x16>
    840c:	32 97       	sbiw	r30, 0x02	; 2
    840e:	80 81       	ld	r24, Z
    8410:	80 32       	cpi	r24, 0x20	; 32
    8412:	08 f4       	brcc	.+2      	; 0x8416 <sendNickname+0x26>
       nickname[strlen(nickname)-1] = 0;
    8414:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(nickname)+2);
    8416:	ea e6       	ldi	r30, 0x6A	; 106
    8418:	fc e5       	ldi	r31, 0x5C	; 92
    841a:	01 90       	ld	r0, Z+
    841c:	00 20       	and	r0, r0
    841e:	e9 f7       	brne	.-6      	; 0x841a <sendNickname+0x2a>
    8420:	31 97       	sbiw	r30, 0x01	; 1
    8422:	ea 56       	subi	r30, 0x6A	; 106
    8424:	fc 45       	sbci	r31, 0x5C	; 92
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8426:	80 91 a1 08 	lds	r24, 0x08A1
    842a:	85 ff       	sbrs	r24, 5
    842c:	fc cf       	rjmp	.-8      	; 0x8426 <sendNickname+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    842e:	80 91 68 06 	lds	r24, 0x0668
    8432:	8e 2f       	mov	r24, r30
    8434:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8436:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(nickname,true);
    843a:	8a e6       	ldi	r24, 0x6A	; 106
    843c:	9c e5       	ldi	r25, 0x5C	; 92
    843e:	61 e0       	ldi	r22, 0x01	; 1
    8440:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
}
    8444:	08 95       	ret

00008446 <sendUser>:
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8446:	80 91 a1 08 	lds	r24, 0x08A1
    844a:	85 ff       	sbrs	r24, 5
    844c:	fc cf       	rjmp	.-8      	; 0x8446 <sendUser>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    844e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8452:	85 e5       	ldi	r24, 0x55	; 85
    8454:	80 93 a0 08 	sts	0x08A0, r24
   }
}

void sendUser(void){
	Debug_SendByte('U');
	if(user[strlen(user)-1] < 32){
    8458:	ee e1       	ldi	r30, 0x1E	; 30
    845a:	fa e4       	ldi	r31, 0x4A	; 74
    845c:	01 90       	ld	r0, Z+
    845e:	00 20       	and	r0, r0
    8460:	e9 f7       	brne	.-6      	; 0x845c <sendUser+0x16>
    8462:	32 97       	sbiw	r30, 0x02	; 2
    8464:	80 81       	ld	r24, Z
    8466:	80 32       	cpi	r24, 0x20	; 32
    8468:	08 f4       	brcc	.+2      	; 0x846c <sendUser+0x26>
        user[strlen(user)-1] = 0;
    846a:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(user)+2);
    846c:	ee e1       	ldi	r30, 0x1E	; 30
    846e:	fa e4       	ldi	r31, 0x4A	; 74
    8470:	01 90       	ld	r0, Z+
    8472:	00 20       	and	r0, r0
    8474:	e9 f7       	brne	.-6      	; 0x8470 <sendUser+0x2a>
    8476:	31 97       	sbiw	r30, 0x01	; 1
    8478:	ee 51       	subi	r30, 0x1E	; 30
    847a:	fa 44       	sbci	r31, 0x4A	; 74
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    847c:	80 91 a1 08 	lds	r24, 0x08A1
    8480:	85 ff       	sbrs	r24, 5
    8482:	fc cf       	rjmp	.-8      	; 0x847c <sendUser+0x36>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8484:	80 91 68 06 	lds	r24, 0x0668
    8488:	8e 2f       	mov	r24, r30
    848a:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    848c:	80 93 a0 08 	sts	0x08A0, r24
	Debug_SendString(user,true);
    8490:	8e e1       	ldi	r24, 0x1E	; 30
    8492:	9a e4       	ldi	r25, 0x4A	; 74
    8494:	61 e0       	ldi	r22, 0x01	; 1
    8496:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
}
    849a:	08 95       	ret

0000849c <sendKey>:
       Debug_SendString("",true);
   }
}

void sendKey(void){
   if(phraseRead){
    849c:	80 91 fb 32 	lds	r24, 0x32FB
    84a0:	88 23       	and	r24, r24
    84a2:	41 f1       	breq	.+80     	; 0x84f4 <sendKey+0x58>
       if(phrase[strlen(phrase)-1] < 32){
    84a4:	eb ef       	ldi	r30, 0xFB	; 251
    84a6:	fa e4       	ldi	r31, 0x4A	; 74
    84a8:	01 90       	ld	r0, Z+
    84aa:	00 20       	and	r0, r0
    84ac:	e9 f7       	brne	.-6      	; 0x84a8 <sendKey+0xc>
    84ae:	32 97       	sbiw	r30, 0x02	; 2
    84b0:	80 81       	ld	r24, Z
    84b2:	80 32       	cpi	r24, 0x20	; 32
    84b4:	08 f4       	brcc	.+2      	; 0x84b8 <sendKey+0x1c>
         phrase[strlen(phrase)-1] = 0;
    84b6:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    84b8:	80 91 a1 08 	lds	r24, 0x08A1
    84bc:	85 ff       	sbrs	r24, 5
    84be:	fc cf       	rjmp	.-8      	; 0x84b8 <sendKey+0x1c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    84c0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    84c4:	8b e4       	ldi	r24, 0x4B	; 75
    84c6:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('K');
       Debug_SendByte(strlen(phrase)+2);
    84ca:	eb ef       	ldi	r30, 0xFB	; 251
    84cc:	fa e4       	ldi	r31, 0x4A	; 74
    84ce:	01 90       	ld	r0, Z+
    84d0:	00 20       	and	r0, r0
    84d2:	e9 f7       	brne	.-6      	; 0x84ce <sendKey+0x32>
    84d4:	31 97       	sbiw	r30, 0x01	; 1
    84d6:	eb 5f       	subi	r30, 0xFB	; 251
    84d8:	fa 44       	sbci	r31, 0x4A	; 74
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    84da:	80 91 a1 08 	lds	r24, 0x08A1
    84de:	85 ff       	sbrs	r24, 5
    84e0:	fc cf       	rjmp	.-8      	; 0x84da <sendKey+0x3e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    84e2:	80 91 68 06 	lds	r24, 0x0668
    84e6:	8e 2f       	mov	r24, r30
    84e8:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    84ea:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(phrase,true);
    84ee:	8b ef       	ldi	r24, 0xFB	; 251
    84f0:	9a e4       	ldi	r25, 0x4A	; 74
    84f2:	3f c0       	rjmp	.+126    	; 0x8572 <sendKey+0xd6>
   } else if(keyRead){
    84f4:	80 91 fc 32 	lds	r24, 0x32FC
    84f8:	88 23       	and	r24, r24
    84fa:	41 f1       	breq	.+80     	; 0x854c <sendKey+0xb0>
       if(key[strlen(key)-1] < 32){
    84fc:	e6 e3       	ldi	r30, 0x36	; 54
    84fe:	ff e4       	ldi	r31, 0x4F	; 79
    8500:	01 90       	ld	r0, Z+
    8502:	00 20       	and	r0, r0
    8504:	e9 f7       	brne	.-6      	; 0x8500 <sendKey+0x64>
    8506:	32 97       	sbiw	r30, 0x02	; 2
    8508:	80 81       	ld	r24, Z
    850a:	80 32       	cpi	r24, 0x20	; 32
    850c:	08 f4       	brcc	.+2      	; 0x8510 <sendKey+0x74>
         key[strlen(key)-1] = 0;
    850e:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8510:	80 91 a1 08 	lds	r24, 0x08A1
    8514:	85 ff       	sbrs	r24, 5
    8516:	fc cf       	rjmp	.-8      	; 0x8510 <sendKey+0x74>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8518:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    851c:	8b e4       	ldi	r24, 0x4B	; 75
    851e:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('K');
       Debug_SendByte(strlen(key)+2);
    8522:	e6 e3       	ldi	r30, 0x36	; 54
    8524:	ff e4       	ldi	r31, 0x4F	; 79
    8526:	01 90       	ld	r0, Z+
    8528:	00 20       	and	r0, r0
    852a:	e9 f7       	brne	.-6      	; 0x8526 <sendKey+0x8a>
    852c:	31 97       	sbiw	r30, 0x01	; 1
    852e:	e6 53       	subi	r30, 0x36	; 54
    8530:	ff 44       	sbci	r31, 0x4F	; 79
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8532:	80 91 a1 08 	lds	r24, 0x08A1
    8536:	85 ff       	sbrs	r24, 5
    8538:	fc cf       	rjmp	.-8      	; 0x8532 <sendKey+0x96>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    853a:	80 91 68 06 	lds	r24, 0x0668
    853e:	8e 2f       	mov	r24, r30
    8540:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8542:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(key,true);
    8546:	86 e3       	ldi	r24, 0x36	; 54
    8548:	9f e4       	ldi	r25, 0x4F	; 79
    854a:	13 c0       	rjmp	.+38     	; 0x8572 <sendKey+0xd6>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    854c:	80 91 a1 08 	lds	r24, 0x08A1
    8550:	85 ff       	sbrs	r24, 5
    8552:	fc cf       	rjmp	.-8      	; 0x854c <sendKey+0xb0>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8554:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8558:	8b e4       	ldi	r24, 0x4B	; 75
    855a:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    855e:	80 91 a1 08 	lds	r24, 0x08A1
    8562:	85 ff       	sbrs	r24, 5
    8564:	fc cf       	rjmp	.-8      	; 0x855e <sendKey+0xc2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8566:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    856a:	10 92 a0 08 	sts	0x08A0, r1
   } else {
       Debug_SendByte('K');
       Debug_SendByte(0);
       Debug_SendString("",true);
    856e:	81 ec       	ldi	r24, 0xC1	; 193
    8570:	90 e2       	ldi	r25, 0x20	; 32
    8572:	61 e0       	ldi	r22, 0x01	; 1
    8574:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    8578:	08 95       	ret

0000857a <sendAuthType>:
       Debug_SendString("",true);
   }
}

void sendAuthType(void){
   if(authRead){
    857a:	80 91 fa 32 	lds	r24, 0x32FA
    857e:	88 23       	and	r24, r24
    8580:	41 f1       	breq	.+80     	; 0x85d2 <sendAuthType+0x58>
       if(auth[strlen(auth)-1] < 32){
    8582:	e8 e9       	ldi	r30, 0x98	; 152
    8584:	f4 e4       	ldi	r31, 0x44	; 68
    8586:	01 90       	ld	r0, Z+
    8588:	00 20       	and	r0, r0
    858a:	e9 f7       	brne	.-6      	; 0x8586 <sendAuthType+0xc>
    858c:	32 97       	sbiw	r30, 0x02	; 2
    858e:	80 81       	ld	r24, Z
    8590:	80 32       	cpi	r24, 0x20	; 32
    8592:	08 f4       	brcc	.+2      	; 0x8596 <sendAuthType+0x1c>
         auth[strlen(auth)-1] = 0;
    8594:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8596:	80 91 a1 08 	lds	r24, 0x08A1
    859a:	85 ff       	sbrs	r24, 5
    859c:	fc cf       	rjmp	.-8      	; 0x8596 <sendAuthType+0x1c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    859e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    85a2:	81 e4       	ldi	r24, 0x41	; 65
    85a4:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('A');
       Debug_SendByte(strlen(auth)+2);
    85a8:	e8 e9       	ldi	r30, 0x98	; 152
    85aa:	f4 e4       	ldi	r31, 0x44	; 68
    85ac:	01 90       	ld	r0, Z+
    85ae:	00 20       	and	r0, r0
    85b0:	e9 f7       	brne	.-6      	; 0x85ac <sendAuthType+0x32>
    85b2:	31 97       	sbiw	r30, 0x01	; 1
    85b4:	e8 59       	subi	r30, 0x98	; 152
    85b6:	f4 44       	sbci	r31, 0x44	; 68
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    85b8:	80 91 a1 08 	lds	r24, 0x08A1
    85bc:	85 ff       	sbrs	r24, 5
    85be:	fc cf       	rjmp	.-8      	; 0x85b8 <sendAuthType+0x3e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    85c0:	80 91 68 06 	lds	r24, 0x0668
    85c4:	8e 2f       	mov	r24, r30
    85c6:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    85c8:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(auth,true);
    85cc:	88 e9       	ldi	r24, 0x98	; 152
    85ce:	94 e4       	ldi	r25, 0x44	; 68
    85d0:	13 c0       	rjmp	.+38     	; 0x85f8 <sendAuthType+0x7e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    85d2:	80 91 a1 08 	lds	r24, 0x08A1
    85d6:	85 ff       	sbrs	r24, 5
    85d8:	fc cf       	rjmp	.-8      	; 0x85d2 <sendAuthType+0x58>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    85da:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    85de:	81 e4       	ldi	r24, 0x41	; 65
    85e0:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    85e4:	80 91 a1 08 	lds	r24, 0x08A1
    85e8:	85 ff       	sbrs	r24, 5
    85ea:	fc cf       	rjmp	.-8      	; 0x85e4 <sendAuthType+0x6a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    85ec:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    85f0:	10 92 a0 08 	sts	0x08A0, r1
   } else {
       Debug_SendByte('A');
       Debug_SendByte(0);
       Debug_SendString("",true);
    85f4:	81 ec       	ldi	r24, 0xC1	; 193
    85f6:	90 e2       	ldi	r25, 0x20	; 32
    85f8:	61 e0       	ldi	r22, 0x01	; 1
    85fa:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    85fe:	08 95       	ret

00008600 <sendSSID>:
    return true;
}


void sendSSID(void){
   if(ssidRead){
    8600:	80 91 fd 32 	lds	r24, 0x32FD
    8604:	88 23       	and	r24, r24
    8606:	41 f1       	breq	.+80     	; 0x8658 <sendSSID+0x58>
       if(ssid[strlen(ssid)-1] < 32){
    8608:	e3 eb       	ldi	r30, 0xB3	; 179
    860a:	f7 e3       	ldi	r31, 0x37	; 55
    860c:	01 90       	ld	r0, Z+
    860e:	00 20       	and	r0, r0
    8610:	e9 f7       	brne	.-6      	; 0x860c <sendSSID+0xc>
    8612:	32 97       	sbiw	r30, 0x02	; 2
    8614:	80 81       	ld	r24, Z
    8616:	80 32       	cpi	r24, 0x20	; 32
    8618:	08 f4       	brcc	.+2      	; 0x861c <sendSSID+0x1c>
         ssid[strlen(ssid)-1] = 0;
    861a:	10 82       	st	Z, r1
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    861c:	80 91 a1 08 	lds	r24, 0x08A1
    8620:	85 ff       	sbrs	r24, 5
    8622:	fc cf       	rjmp	.-8      	; 0x861c <sendSSID+0x1c>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8624:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8628:	83 e5       	ldi	r24, 0x53	; 83
    862a:	80 93 a0 08 	sts	0x08A0, r24
       }
       Debug_SendByte('S');
       Debug_SendByte(strlen(ssid)+2);
    862e:	e3 eb       	ldi	r30, 0xB3	; 179
    8630:	f7 e3       	ldi	r31, 0x37	; 55
    8632:	01 90       	ld	r0, Z+
    8634:	00 20       	and	r0, r0
    8636:	e9 f7       	brne	.-6      	; 0x8632 <sendSSID+0x32>
    8638:	31 97       	sbiw	r30, 0x01	; 1
    863a:	e3 5b       	subi	r30, 0xB3	; 179
    863c:	f7 43       	sbci	r31, 0x37	; 55
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    863e:	80 91 a1 08 	lds	r24, 0x08A1
    8642:	85 ff       	sbrs	r24, 5
    8644:	fc cf       	rjmp	.-8      	; 0x863e <sendSSID+0x3e>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8646:	80 91 68 06 	lds	r24, 0x0668
    864a:	8e 2f       	mov	r24, r30
    864c:	8e 5f       	subi	r24, 0xFE	; 254
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    864e:	80 93 a0 08 	sts	0x08A0, r24
       Debug_SendString(ssid,true);
    8652:	83 eb       	ldi	r24, 0xB3	; 179
    8654:	97 e3       	ldi	r25, 0x37	; 55
    8656:	13 c0       	rjmp	.+38     	; 0x867e <sendSSID+0x7e>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8658:	80 91 a1 08 	lds	r24, 0x08A1
    865c:	85 ff       	sbrs	r24, 5
    865e:	fc cf       	rjmp	.-8      	; 0x8658 <sendSSID+0x58>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8660:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8664:	83 e5       	ldi	r24, 0x53	; 83
    8666:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    866a:	80 91 a1 08 	lds	r24, 0x08A1
    866e:	85 ff       	sbrs	r24, 5
    8670:	fc cf       	rjmp	.-8      	; 0x866a <sendSSID+0x6a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    8672:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8676:	10 92 a0 08 	sts	0x08A0, r1
   } else {
       Debug_SendByte('S');
       Debug_SendByte(0);
       Debug_SendString("",true);
    867a:	81 ec       	ldi	r24, 0xC1	; 193
    867c:	90 e2       	ldi	r25, 0x20	; 32
    867e:	61 e0       	ldi	r22, 0x01	; 1
    8680:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    8684:	08 95       	ret

00008686 <Wifi_SendString>:

void Wifi_SendString(char string [],bool CR){
    8686:	ef 92       	push	r14
    8688:	ff 92       	push	r15
    868a:	0f 93       	push	r16
    868c:	1f 93       	push	r17
    868e:	cf 93       	push	r28
    8690:	df 93       	push	r29
    8692:	8c 01       	movw	r16, r24
    8694:	e6 2e       	mov	r14, r22
    8696:	ff 24       	eor	r15, r15
    8698:	06 c0       	rjmp	.+12     	; 0x86a6 <Wifi_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Wifi_SendByte(string[i]);
    869a:	c0 0f       	add	r28, r16
    869c:	d1 1f       	adc	r29, r17
    869e:	88 81       	ld	r24, Y
    86a0:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
    PORTB.OUTCLR = (1 << 4);
    return 0;
}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    86a4:	f3 94       	inc	r15
    86a6:	cf 2d       	mov	r28, r15
    86a8:	d0 e0       	ldi	r29, 0x00	; 0
    86aa:	f8 01       	movw	r30, r16
    86ac:	01 90       	ld	r0, Z+
    86ae:	00 20       	and	r0, r0
    86b0:	e9 f7       	brne	.-6      	; 0x86ac <Wifi_SendString+0x26>
    86b2:	31 97       	sbiw	r30, 0x01	; 1
    86b4:	e0 1b       	sub	r30, r16
    86b6:	f1 0b       	sbc	r31, r17
    86b8:	ce 17       	cp	r28, r30
    86ba:	df 07       	cpc	r29, r31
    86bc:	70 f3       	brcs	.-36     	; 0x869a <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

    if(CR){
    86be:	ee 20       	and	r14, r14
    86c0:	31 f0       	breq	.+12     	; 0x86ce <Wifi_SendString+0x48>
		Wifi_SendByte(13);
    86c2:	8d e0       	ldi	r24, 0x0D	; 13
    86c4:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
		Wifi_SendByte(10);
    86c8:	8a e0       	ldi	r24, 0x0A	; 10
    86ca:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
	}
}
    86ce:	df 91       	pop	r29
    86d0:	cf 91       	pop	r28
    86d2:	1f 91       	pop	r17
    86d4:	0f 91       	pop	r16
    86d6:	ff 90       	pop	r15
    86d8:	ef 90       	pop	r14
    86da:	08 95       	ret

000086dc <Wifi_EnterCMDMode>:

bool Wifi_EnterCMDMode(uint16_t timeOut){
    86dc:	8f 92       	push	r8
    86de:	9f 92       	push	r9
    86e0:	af 92       	push	r10
    86e2:	bf 92       	push	r11
    86e4:	cf 92       	push	r12
    86e6:	df 92       	push	r13
    86e8:	ff 92       	push	r15
    86ea:	0f 93       	push	r16
    86ec:	1f 93       	push	r17
    86ee:	df 93       	push	r29
    86f0:	cf 93       	push	r28
    86f2:	00 d0       	rcall	.+0      	; 0x86f4 <Wifi_EnterCMDMode+0x18>
    86f4:	00 d0       	rcall	.+0      	; 0x86f6 <Wifi_EnterCMDMode+0x1a>
    86f6:	cd b7       	in	r28, 0x3d	; 61
    86f8:	de b7       	in	r29, 0x3e	; 62
    86fa:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    86fc:	de 01       	movw	r26, r28
    86fe:	14 96       	adiw	r26, 0x04	; 4
    8700:	e6 ec       	ldi	r30, 0xC6	; 198
    8702:	f0 e2       	ldi	r31, 0x20	; 32
    8704:	83 e0       	ldi	r24, 0x03	; 3
    8706:	01 90       	ld	r0, Z+
    8708:	0d 92       	st	X+, r0
    870a:	81 50       	subi	r24, 0x01	; 1
    870c:	e1 f7       	brne	.-8      	; 0x8706 <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    870e:	0e 94 81 02 	call	0x502	; 0x502 <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    8712:	82 ec       	ldi	r24, 0xC2	; 194
    8714:	90 e2       	ldi	r25, 0x20	; 32
    8716:	60 e0       	ldi	r22, 0x00	; 0
    8718:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
    871c:	ff 24       	eor	r15, r15
    871e:	00 e0       	ldi	r16, 0x00	; 0
    8720:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    8722:	4e 01       	movw	r8, r28
    8724:	08 94       	sec
    8726:	81 1c       	adc	r8, r1
    8728:	91 1c       	adc	r9, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    872a:	e6 e6       	ldi	r30, 0x66	; 102
    872c:	ae 2e       	mov	r10, r30
    872e:	ee e0       	ldi	r30, 0x0E	; 14
    8730:	be 2e       	mov	r11, r30
    8732:	23 c0       	rjmp	.+70     	; 0x877a <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    8734:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    8738:	88 23       	and	r24, r24
    873a:	d1 f0       	breq	.+52     	; 0x8770 <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    873c:	80 e0       	ldi	r24, 0x00	; 0
    873e:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    8742:	f4 01       	movw	r30, r8
    8744:	ef 0d       	add	r30, r15
    8746:	f1 1d       	adc	r31, r1
    8748:	80 83       	st	Z, r24
			j++;
    874a:	f3 94       	inc	r15
			if(j > 2){
    874c:	82 e0       	ldi	r24, 0x02	; 2
    874e:	8f 15       	cp	r24, r15
    8750:	78 f4       	brcc	.+30     	; 0x8770 <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    8752:	99 81       	ldd	r25, Y+1	; 0x01
    8754:	8c 81       	ldd	r24, Y+4	; 0x04
    8756:	98 17       	cp	r25, r24
    8758:	99 f4       	brne	.+38     	; 0x8780 <Wifi_EnterCMDMode+0xa4>
    875a:	9a 81       	ldd	r25, Y+2	; 0x02
    875c:	8d 81       	ldd	r24, Y+5	; 0x05
    875e:	98 17       	cp	r25, r24
    8760:	79 f4       	brne	.+30     	; 0x8780 <Wifi_EnterCMDMode+0xa4>
    8762:	20 e0       	ldi	r18, 0x00	; 0
    8764:	9b 81       	ldd	r25, Y+3	; 0x03
    8766:	8e 81       	ldd	r24, Y+6	; 0x06
    8768:	98 17       	cp	r25, r24
    876a:	59 f4       	brne	.+22     	; 0x8782 <Wifi_EnterCMDMode+0xa6>
    876c:	21 e0       	ldi	r18, 0x01	; 1
    876e:	09 c0       	rjmp	.+18     	; 0x8782 <Wifi_EnterCMDMode+0xa6>
    8770:	c5 01       	movw	r24, r10
    8772:	01 97       	sbiw	r24, 0x01	; 1
    8774:	f1 f7       	brne	.-4      	; 0x8772 <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    8776:	0f 5f       	subi	r16, 0xFF	; 255
    8778:	1f 4f       	sbci	r17, 0xFF	; 255
    877a:	0c 15       	cp	r16, r12
    877c:	1d 05       	cpc	r17, r13
    877e:	d0 f2       	brcs	.-76     	; 0x8734 <Wifi_EnterCMDMode+0x58>
    8780:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8782:	82 2f       	mov	r24, r18
    8784:	26 96       	adiw	r28, 0x06	; 6
    8786:	cd bf       	out	0x3d, r28	; 61
    8788:	de bf       	out	0x3e, r29	; 62
    878a:	cf 91       	pop	r28
    878c:	df 91       	pop	r29
    878e:	1f 91       	pop	r17
    8790:	0f 91       	pop	r16
    8792:	ff 90       	pop	r15
    8794:	df 90       	pop	r13
    8796:	cf 90       	pop	r12
    8798:	bf 90       	pop	r11
    879a:	af 90       	pop	r10
    879c:	9f 90       	pop	r9
    879e:	8f 90       	pop	r8
    87a0:	08 95       	ret

000087a2 <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    87a2:	2f 92       	push	r2
    87a4:	3f 92       	push	r3
    87a6:	5f 92       	push	r5
    87a8:	6f 92       	push	r6
    87aa:	7f 92       	push	r7
    87ac:	8f 92       	push	r8
    87ae:	9f 92       	push	r9
    87b0:	af 92       	push	r10
    87b2:	bf 92       	push	r11
    87b4:	cf 92       	push	r12
    87b6:	df 92       	push	r13
    87b8:	ef 92       	push	r14
    87ba:	ff 92       	push	r15
    87bc:	0f 93       	push	r16
    87be:	1f 93       	push	r17
    87c0:	df 93       	push	r29
    87c2:	cf 93       	push	r28
    87c4:	cd b7       	in	r28, 0x3d	; 61
    87c6:	de b7       	in	r29, 0x3e	; 62
    87c8:	e2 97       	sbiw	r28, 0x32	; 50
    87ca:	cd bf       	out	0x3d, r28	; 61
    87cc:	de bf       	out	0x3e, r29	; 62
    87ce:	08 2f       	mov	r16, r24
    87d0:	d9 2e       	mov	r13, r25
    87d2:	c6 2e       	mov	r12, r22
    87d4:	77 2e       	mov	r7, r23
    87d6:	64 2e       	mov	r6, r20
    87d8:	55 2e       	mov	r5, r21
    87da:	19 01       	movw	r2, r18
    char response [50];

	respLen = 0;
    87dc:	10 92 b2 32 	sts	0x32B2, r1
	toSendLen = strlen(toSend);
    87e0:	a8 2f       	mov	r26, r24
    87e2:	b9 2f       	mov	r27, r25
    87e4:	fd 01       	movw	r30, r26
    87e6:	01 90       	ld	r0, Z+
    87e8:	00 20       	and	r0, r0
    87ea:	e9 f7       	brne	.-6      	; 0x87e6 <Wifi_SendCommand+0x44>
    87ec:	31 97       	sbiw	r30, 0x01	; 1
    87ee:	ea 1b       	sub	r30, r26
    87f0:	fb 0b       	sbc	r31, r27
    87f2:	e0 93 b3 32 	sts	0x32B3, r30
	if(strlen(ok) > strlen(ok2)){
    87f6:	e6 2f       	mov	r30, r22
    87f8:	f7 2f       	mov	r31, r23
    87fa:	df 01       	movw	r26, r30
    87fc:	0d 90       	ld	r0, X+
    87fe:	00 20       	and	r0, r0
    8800:	e9 f7       	brne	.-6      	; 0x87fc <Wifi_SendCommand+0x5a>
    8802:	cd 01       	movw	r24, r26
    8804:	01 97       	sbiw	r24, 0x01	; 1
    8806:	8e 1b       	sub	r24, r30
    8808:	9f 0b       	sbc	r25, r31
    880a:	e4 2f       	mov	r30, r20
    880c:	f5 2f       	mov	r31, r21
    880e:	df 01       	movw	r26, r30
    8810:	0d 90       	ld	r0, X+
    8812:	00 20       	and	r0, r0
    8814:	e9 f7       	brne	.-6      	; 0x8810 <Wifi_SendCommand+0x6e>
    8816:	11 97       	sbiw	r26, 0x01	; 1
    8818:	ae 1b       	sub	r26, r30
    881a:	bf 0b       	sbc	r27, r31
    881c:	a8 17       	cp	r26, r24
    881e:	b9 07       	cpc	r27, r25
    8820:	18 f4       	brcc	.+6      	; 0x8828 <Wifi_SendCommand+0x86>
		okLen = strlen(ok2);
    8822:	a0 93 b4 32 	sts	0x32B4, r26
    8826:	02 c0       	rjmp	.+4      	; 0x882c <Wifi_SendCommand+0x8a>
	} else {
		okLen = strlen(ok);
    8828:	80 93 b4 32 	sts	0x32B4, r24
	}
    Wifi_SendString("",true);
    882c:	81 ec       	ldi	r24, 0xC1	; 193
    882e:	90 e2       	ldi	r25, 0x20	; 32
    8830:	61 e0       	ldi	r22, 0x01	; 1
    8832:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
	Debug_SendString("-----------------",true);
    8836:	8a ec       	ldi	r24, 0xCA	; 202
    8838:	90 e2       	ldi	r25, 0x20	; 32
    883a:	61 e0       	ldi	r22, 0x01	; 1
    883c:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
	Debug_SendString("Command: ",false);
    8840:	8c ed       	ldi	r24, 0xDC	; 220
    8842:	90 e2       	ldi	r25, 0x20	; 32
    8844:	60 e0       	ldi	r22, 0x00	; 0
    8846:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
	Debug_SendString(toSend,true);
    884a:	80 2f       	mov	r24, r16
    884c:	9d 2d       	mov	r25, r13
    884e:	61 e0       	ldi	r22, 0x01	; 1
    8850:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
	Wifi_ClearBuffer();
    8854:	0e 94 81 02 	call	0x502	; 0x502 <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    8858:	80 2f       	mov	r24, r16
    885a:	9d 2d       	mov	r25, r13
    885c:	61 e0       	ldi	r22, 0x01	; 1
    885e:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
    8862:	ee 24       	eor	r14, r14
    8864:	ff 24       	eor	r15, r15
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
			response[respLen] = Wifi_GetByte(false);
    8866:	4e 01       	movw	r8, r28
    8868:	08 94       	sec
    886a:	81 1c       	adc	r8, r1
    886c:	91 1c       	adc	r9, r1
    886e:	f6 e6       	ldi	r31, 0x66	; 102
    8870:	af 2e       	mov	r10, r31
    8872:	fe e0       	ldi	r31, 0x0E	; 14
    8874:	bf 2e       	mov	r11, r31
    8876:	88 c0       	rjmp	.+272    	; 0x8988 <Wifi_SendCommand+0x1e6>
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    8878:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    887c:	88 23       	and	r24, r24
    887e:	09 f4       	brne	.+2      	; 0x8882 <Wifi_SendCommand+0xe0>
    8880:	7d c0       	rjmp	.+250    	; 0x897c <Wifi_SendCommand+0x1da>
			response[respLen] = Wifi_GetByte(false);
    8882:	10 91 b2 32 	lds	r17, 0x32B2
    8886:	80 e0       	ldi	r24, 0x00	; 0
    8888:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    888c:	f4 01       	movw	r30, r8
    888e:	e1 0f       	add	r30, r17
    8890:	f1 1d       	adc	r31, r1
    8892:	80 83       	st	Z, r24
			respLen++;
    8894:	80 91 b2 32 	lds	r24, 0x32B2
    8898:	8f 5f       	subi	r24, 0xFF	; 255
    889a:	80 93 b2 32 	sts	0x32B2, r24
			if(respLen == okLen + toSendLen + 3){		
    889e:	20 91 b2 32 	lds	r18, 0x32B2
    88a2:	40 91 b4 32 	lds	r20, 0x32B4
    88a6:	80 91 b3 32 	lds	r24, 0x32B3
    88aa:	30 e0       	ldi	r19, 0x00	; 0
    88ac:	90 e0       	ldi	r25, 0x00	; 0
    88ae:	84 0f       	add	r24, r20
    88b0:	91 1d       	adc	r25, r1
    88b2:	03 96       	adiw	r24, 0x03	; 3
    88b4:	28 17       	cp	r18, r24
    88b6:	39 07       	cpc	r19, r25
    88b8:	09 f0       	breq	.+2      	; 0x88bc <Wifi_SendCommand+0x11a>
    88ba:	60 c0       	rjmp	.+192    	; 0x897c <Wifi_SendCommand+0x1da>
				
				Debug_SendString("Response: ",false);
    88bc:	86 ee       	ldi	r24, 0xE6	; 230
    88be:	90 e2       	ldi	r25, 0x20	; 32
    88c0:	60 e0       	ldi	r22, 0x00	; 0
    88c2:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    88c6:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(response[j]);
    88c8:	9e 01       	movw	r18, r28
    88ca:	2f 5f       	subi	r18, 0xFF	; 255
    88cc:	3f 4f       	sbci	r19, 0xFF	; 255
    88ce:	0d c0       	rjmp	.+26     	; 0x88ea <Wifi_SendCommand+0x148>
    88d0:	f9 01       	movw	r30, r18
    88d2:	e9 0f       	add	r30, r25
    88d4:	f1 1d       	adc	r31, r1
    88d6:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    88d8:	80 91 a1 08 	lds	r24, 0x08A1
    88dc:	85 ff       	sbrs	r24, 5
    88de:	fc cf       	rjmp	.-8      	; 0x88d8 <Wifi_SendCommand+0x136>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    88e0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    88e4:	e0 93 a0 08 	sts	0x08A0, r30
			response[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Response: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    88e8:	9f 5f       	subi	r25, 0xFF	; 255
    88ea:	80 91 b2 32 	lds	r24, 0x32B2
    88ee:	98 17       	cp	r25, r24
    88f0:	78 f3       	brcs	.-34     	; 0x88d0 <Wifi_SendCommand+0x12e>
					Debug_SendByte(response[j]);
				}
				Debug_SendString(", want: \"",false);
    88f2:	81 ef       	ldi	r24, 0xF1	; 241
    88f4:	90 e2       	ldi	r25, 0x20	; 32
    88f6:	60 e0       	ldi	r22, 0x00	; 0
    88f8:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
				Debug_SendString(ok,false);
    88fc:	8c 2d       	mov	r24, r12
    88fe:	97 2d       	mov	r25, r7
    8900:	60 e0       	ldi	r22, 0x00	; 0
    8902:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    8906:	80 91 a1 08 	lds	r24, 0x08A1
    890a:	85 ff       	sbrs	r24, 5
    890c:	fc cf       	rjmp	.-8      	; 0x8906 <Wifi_SendCommand+0x164>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    890e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    8912:	82 e2       	ldi	r24, 0x22	; 34
    8914:	80 93 a0 08 	sts	0x08A0, r24
				Debug_SendByte('"');
				Debug_SendString(", or: \"",false);
    8918:	8b ef       	ldi	r24, 0xFB	; 251
    891a:	90 e2       	ldi	r25, 0x20	; 32
    891c:	60 e0       	ldi	r22, 0x00	; 0
    891e:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
				Debug_SendString(ok2,false);
    8922:	86 2d       	mov	r24, r6
    8924:	95 2d       	mov	r25, r5
    8926:	60 e0       	ldi	r22, 0x00	; 0
    8928:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
				Debug_SendString("\"",true);
    892c:	83 e0       	ldi	r24, 0x03	; 3
    892e:	91 e2       	ldi	r25, 0x21	; 33
    8930:	61 e0       	ldi	r22, 0x01	; 1
    8932:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
				
				if(strstr(response,toSend) == 0){     // make sure the command is present in the response
    8936:	7e 01       	movw	r14, r28
    8938:	08 94       	sec
    893a:	e1 1c       	adc	r14, r1
    893c:	f1 1c       	adc	r15, r1
    893e:	c7 01       	movw	r24, r14
    8940:	60 2f       	mov	r22, r16
    8942:	7d 2d       	mov	r23, r13
    8944:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    8948:	00 97       	sbiw	r24, 0x00	; 0
    894a:	19 f4       	brne	.+6      	; 0x8952 <Wifi_SendCommand+0x1b0>
				   Debug_SendString("Command NOT found in response",true);
    894c:	85 e0       	ldi	r24, 0x05	; 5
    894e:	91 e2       	ldi	r25, 0x21	; 33
    8950:	10 c0       	rjmp	.+32     	; 0x8972 <Wifi_SendCommand+0x1d0>
				   return false;
				}   else {
				   //Debug_SendString("Command found in response",true);
				}

				if(strstr(response,ok) != 0){                   // check for ok response 1
    8952:	c7 01       	movw	r24, r14
    8954:	6c 2d       	mov	r22, r12
    8956:	77 2d       	mov	r23, r7
    8958:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    895c:	00 97       	sbiw	r24, 0x00	; 0
    895e:	c9 f4       	brne	.+50     	; 0x8992 <Wifi_SendCommand+0x1f0>
				    //Debug_SendString("ok response 1 found",true);
				    return true;
				} else {
				    if(strstr(response,ok2) != 0){              // check for ok response 1
    8960:	c7 01       	movw	r24, r14
    8962:	66 2d       	mov	r22, r6
    8964:	75 2d       	mov	r23, r5
    8966:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    896a:	00 97       	sbiw	r24, 0x00	; 0
    896c:	91 f4       	brne	.+36     	; 0x8992 <Wifi_SendCommand+0x1f0>
				        //Debug_SendString("ok response 2 found",true);
				        return true;
				    } else {
				        Debug_SendString("NO ok resonses found",true);
    896e:	83 e2       	ldi	r24, 0x23	; 35
    8970:	91 e2       	ldi	r25, 0x21	; 33
    8972:	61 e0       	ldi	r22, 0x01	; 1
    8974:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    8978:	80 e0       	ldi	r24, 0x00	; 0
    897a:	0c c0       	rjmp	.+24     	; 0x8994 <Wifi_SendCommand+0x1f2>
    897c:	c5 01       	movw	r24, r10
    897e:	01 97       	sbiw	r24, 0x01	; 1
    8980:	f1 f7       	brne	.-4      	; 0x897e <Wifi_SendCommand+0x1dc>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    8982:	08 94       	sec
    8984:	e1 1c       	adc	r14, r1
    8986:	f1 1c       	adc	r15, r1
    8988:	e2 14       	cp	r14, r2
    898a:	f3 04       	cpc	r15, r3
    898c:	08 f4       	brcc	.+2      	; 0x8990 <Wifi_SendCommand+0x1ee>
    898e:	74 cf       	rjmp	.-280    	; 0x8878 <Wifi_SendCommand+0xd6>
    8990:	f3 cf       	rjmp	.-26     	; 0x8978 <Wifi_SendCommand+0x1d6>
    8992:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8994:	e2 96       	adiw	r28, 0x32	; 50
    8996:	cd bf       	out	0x3d, r28	; 61
    8998:	de bf       	out	0x3e, r29	; 62
    899a:	cf 91       	pop	r28
    899c:	df 91       	pop	r29
    899e:	1f 91       	pop	r17
    89a0:	0f 91       	pop	r16
    89a2:	ff 90       	pop	r15
    89a4:	ef 90       	pop	r14
    89a6:	df 90       	pop	r13
    89a8:	cf 90       	pop	r12
    89aa:	bf 90       	pop	r11
    89ac:	af 90       	pop	r10
    89ae:	9f 90       	pop	r9
    89b0:	8f 90       	pop	r8
    89b2:	7f 90       	pop	r7
    89b4:	6f 90       	pop	r6
    89b6:	5f 90       	pop	r5
    89b8:	3f 90       	pop	r3
    89ba:	2f 90       	pop	r2
    89bc:	08 95       	ret

000089be <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
    89be:	cf 92       	push	r12
    89c0:	df 92       	push	r13
    89c2:	ef 92       	push	r14
    89c4:	ff 92       	push	r15
    89c6:	1f 93       	push	r17
    89c8:	cf 93       	push	r28
    89ca:	df 93       	push	r29
    89cc:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    89ce:	0e 94 81 02 	call	0x502	; 0x502 <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    89d2:	88 e3       	ldi	r24, 0x38	; 56
    89d4:	91 e2       	ldi	r25, 0x21	; 33
    89d6:	60 e4       	ldi	r22, 0x40	; 64
    89d8:	71 e2       	ldi	r23, 0x21	; 33
    89da:	ab 01       	movw	r20, r22
    89dc:	97 01       	movw	r18, r14
    89de:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    89e2:	10 e0       	ldi	r17, 0x00	; 0
    89e4:	c0 e0       	ldi	r28, 0x00	; 0
    89e6:	d0 e0       	ldi	r29, 0x00	; 0
    89e8:	a6 e6       	ldi	r26, 0x66	; 102
    89ea:	ca 2e       	mov	r12, r26
    89ec:	ae e0       	ldi	r26, 0x0E	; 14
    89ee:	da 2e       	mov	r13, r26
    89f0:	1f c0       	rjmp	.+62     	; 0x8a30 <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    89f2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    89f6:	88 23       	and	r24, r24
    89f8:	b9 f0       	breq	.+46     	; 0x8a28 <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    89fa:	80 e0       	ldi	r24, 0x00	; 0
    89fc:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    8a00:	e1 2f       	mov	r30, r17
    8a02:	f0 e0       	ldi	r31, 0x00	; 0
    8a04:	e6 53       	subi	r30, 0x36	; 54
    8a06:	fb 4b       	sbci	r31, 0xBB	; 187
    8a08:	80 83       	st	Z, r24
			tmp++;
    8a0a:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    8a0c:	11 31       	cpi	r17, 0x11	; 17
    8a0e:	61 f4       	brne	.+24     	; 0x8a28 <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    8a10:	8a e4       	ldi	r24, 0x4A	; 74
    8a12:	91 e2       	ldi	r25, 0x21	; 33
    8a14:	60 e0       	ldi	r22, 0x00	; 0
    8a16:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
				Debug_SendString(macAddr,true);
    8a1a:	8a ec       	ldi	r24, 0xCA	; 202
    8a1c:	94 e4       	ldi	r25, 0x44	; 68
    8a1e:	61 e0       	ldi	r22, 0x01	; 1
    8a20:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    8a24:	81 e0       	ldi	r24, 0x01	; 1
    8a26:	08 c0       	rjmp	.+16     	; 0x8a38 <Wifi_GetMac+0x7a>
    8a28:	c6 01       	movw	r24, r12
    8a2a:	01 97       	sbiw	r24, 0x01	; 1
    8a2c:	f1 f7       	brne	.-4      	; 0x8a2a <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){    // 17 characters
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    8a2e:	21 96       	adiw	r28, 0x01	; 1
    8a30:	ce 15       	cp	r28, r14
    8a32:	df 05       	cpc	r29, r15
    8a34:	f0 f2       	brcs	.-68     	; 0x89f2 <Wifi_GetMac+0x34>
    8a36:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    8a38:	df 91       	pop	r29
    8a3a:	cf 91       	pop	r28
    8a3c:	1f 91       	pop	r17
    8a3e:	ff 90       	pop	r15
    8a40:	ef 90       	pop	r14
    8a42:	df 90       	pop	r13
    8a44:	cf 90       	pop	r12
    8a46:	08 95       	ret

00008a48 <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    8a48:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    8a4a:	48 e5       	ldi	r20, 0x58	; 88
    8a4c:	51 e2       	ldi	r21, 0x21	; 33
    8a4e:	83 e5       	ldi	r24, 0x53	; 83
    8a50:	91 e2       	ldi	r25, 0x21	; 33
    8a52:	ba 01       	movw	r22, r20
    8a54:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    8a58:	08 95       	ret

00008a5a <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    8a5a:	0f 93       	push	r16
    8a5c:	1f 93       	push	r17
	fileName[0] = '/';
    8a5e:	04 e8       	ldi	r16, 0x84	; 132
    8a60:	14 e4       	ldi	r17, 0x44	; 68
    8a62:	2f e2       	ldi	r18, 0x2F	; 47
    8a64:	20 93 84 44 	sts	0x4484, r18
	ltoa(var, fileName+1, 16);
    8a68:	a8 01       	movw	r20, r16
    8a6a:	4f 5f       	subi	r20, 0xFF	; 255
    8a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a6e:	20 e1       	ldi	r18, 0x10	; 16
    8a70:	30 e0       	ldi	r19, 0x00	; 0
    8a72:	0e 94 df 61 	call	0xc3be	; 0xc3be <ltoa>
	strcat(fileName, ".bt");
    8a76:	c8 01       	movw	r24, r16
    8a78:	6d e5       	ldi	r22, 0x5D	; 93
    8a7a:	71 e2       	ldi	r23, 0x21	; 33
    8a7c:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
}
    8a80:	1f 91       	pop	r17
    8a82:	0f 91       	pop	r16
    8a84:	08 95       	ret

00008a86 <__vector_77>:

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(TCD0_OVF_vect){
    8a86:	1f 92       	push	r1
    8a88:	0f 92       	push	r0
    8a8a:	0f b6       	in	r0, 0x3f	; 63
    8a8c:	0f 92       	push	r0
    8a8e:	0b b6       	in	r0, 0x3b	; 59
    8a90:	0f 92       	push	r0
    8a92:	11 24       	eor	r1, r1
    8a94:	af 92       	push	r10
    8a96:	bf 92       	push	r11
    8a98:	cf 92       	push	r12
    8a9a:	df 92       	push	r13
    8a9c:	ef 92       	push	r14
    8a9e:	ff 92       	push	r15
    8aa0:	0f 93       	push	r16
    8aa2:	1f 93       	push	r17
    8aa4:	2f 93       	push	r18
    8aa6:	3f 93       	push	r19
    8aa8:	4f 93       	push	r20
    8aaa:	5f 93       	push	r21
    8aac:	6f 93       	push	r22
    8aae:	7f 93       	push	r23
    8ab0:	8f 93       	push	r24
    8ab2:	9f 93       	push	r25
    8ab4:	af 93       	push	r26
    8ab6:	bf 93       	push	r27
    8ab8:	ef 93       	push	r30
    8aba:	ff 93       	push	r31

    if(okToDisplayGUI){
    8abc:	80 91 0b 33 	lds	r24, 0x330B
    8ac0:	88 23       	and	r24, r24
    8ac2:	09 f4       	brne	.+2      	; 0x8ac6 <__vector_77+0x40>
    8ac4:	b9 c5       	rjmp	.+2930   	; 0x9638 <__vector_77+0xbb2>
        ssRefreshCounter++;
    8ac6:	80 91 02 33 	lds	r24, 0x3302
    8aca:	90 91 03 33 	lds	r25, 0x3303
    8ace:	01 96       	adiw	r24, 0x01	; 1
    8ad0:	80 93 02 33 	sts	0x3302, r24
    8ad4:	90 93 03 33 	sts	0x3303, r25

        if(recording){
    8ad8:	80 91 dd 32 	lds	r24, 0x32DD
    8adc:	88 23       	and	r24, r24
    8ade:	09 f4       	brne	.+2      	; 0x8ae2 <__vector_77+0x5c>
    8ae0:	43 c0       	rjmp	.+134    	; 0x8b68 <__vector_77+0xe2>
            if(recordFileRestartCounter == 0){
    8ae2:	80 91 2d 33 	lds	r24, 0x332D
    8ae6:	88 23       	and	r24, r24
    8ae8:	d1 f5       	brne	.+116    	; 0x8b5e <__vector_77+0xd8>
                if(UNIX_time > timeToStopRecording){
    8aea:	20 91 d8 32 	lds	r18, 0x32D8
    8aee:	30 91 d9 32 	lds	r19, 0x32D9
    8af2:	40 91 da 32 	lds	r20, 0x32DA
    8af6:	50 91 db 32 	lds	r21, 0x32DB
    8afa:	80 91 2e 33 	lds	r24, 0x332E
    8afe:	90 91 2f 33 	lds	r25, 0x332F
    8b02:	a0 91 30 33 	lds	r26, 0x3330
    8b06:	b0 91 31 33 	lds	r27, 0x3331
    8b0a:	82 17       	cp	r24, r18
    8b0c:	93 07       	cpc	r25, r19
    8b0e:	a4 07       	cpc	r26, r20
    8b10:	b5 07       	cpc	r27, r21
    8b12:	28 f5       	brcc	.+74     	; 0x8b5e <__vector_77+0xd8>
	                restartingFile = true;
    8b14:	81 e0       	ldi	r24, 0x01	; 1
    8b16:	80 93 19 33 	sts	0x3319, r24
	                recordFileRestartCounter = 0;
    8b1a:	10 92 2d 33 	sts	0x332D, r1
		            rs232Recording = false;
    8b1e:	10 92 d2 32 	sts	0x32D2, r1
                    recording = false;
    8b22:	10 92 dd 32 	sts	0x32DD, r1
	                okToCloseLogFile = true;
    8b26:	80 93 0a 33 	sts	0x330A, r24
	                while(okToCloseLogFile);
    8b2a:	80 91 0a 33 	lds	r24, 0x330A
    8b2e:	88 23       	and	r24, r24
    8b30:	e1 f7       	brne	.-8      	; 0x8b2a <__vector_77+0xa4>
	                if(percentDiskUsed < 950){
    8b32:	80 91 43 33 	lds	r24, 0x3343
    8b36:	90 91 44 33 	lds	r25, 0x3344
    8b3a:	a0 91 45 33 	lds	r26, 0x3345
    8b3e:	b0 91 46 33 	lds	r27, 0x3346
    8b42:	86 5b       	subi	r24, 0xB6	; 182
    8b44:	93 40       	sbci	r25, 0x03	; 3
    8b46:	a0 40       	sbci	r26, 0x00	; 0
    8b48:	b0 40       	sbci	r27, 0x00	; 0
    8b4a:	38 f4       	brcc	.+14     	; 0x8b5a <__vector_77+0xd4>
                        okToOpenLogFile = true;
    8b4c:	81 e0       	ldi	r24, 0x01	; 1
    8b4e:	80 93 08 33 	sts	0x3308, r24
	                    while(!recording);
    8b52:	80 91 dd 32 	lds	r24, 0x32DD
    8b56:	88 23       	and	r24, r24
    8b58:	e1 f3       	breq	.-8      	; 0x8b52 <__vector_77+0xcc>
	                }
	                restartingFile = false;
    8b5a:	10 92 19 33 	sts	0x3319, r1
	            }
	        }
	        recordFileRestartCounter++;
    8b5e:	80 91 2d 33 	lds	r24, 0x332D
    8b62:	8f 5f       	subi	r24, 0xFF	; 255
    8b64:	80 93 2d 33 	sts	0x332D, r24


	// controls


        if(currentMode == recordMode && Dpad_CheckButton(Down)){
    8b68:	80 91 01 33 	lds	r24, 0x3301
    8b6c:	88 23       	and	r24, r24
    8b6e:	29 f4       	brne	.+10     	; 0x8b7a <__vector_77+0xf4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8b70:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8b74:	8c 77       	andi	r24, 0x7C	; 124
    8b76:	83 ff       	sbrs	r24, 3
    8b78:	14 c5       	rjmp	.+2600   	; 0x95a2 <__vector_77+0xb1c>
		    currentMode = sensorMode;
		    display_clearBuffer();
		    display_writeBufferToScreen();
	    } else if(currentMode == sensorMode && Dpad_CheckButton(Up)){
    8b7a:	80 91 01 33 	lds	r24, 0x3301
    8b7e:	81 30       	cpi	r24, 0x01	; 1
    8b80:	69 f4       	brne	.+26     	; 0x8b9c <__vector_77+0x116>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8b82:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8b86:	8c 77       	andi	r24, 0x7C	; 124
    8b88:	82 fd       	sbrc	r24, 2
    8b8a:	08 c0       	rjmp	.+16     	; 0x8b9c <__vector_77+0x116>
    8b8c:	12 c5       	rjmp	.+2596   	; 0x95b2 <__vector_77+0xb2c>
    8b8e:	ca 01       	movw	r24, r20
    8b90:	01 97       	sbiw	r24, 0x01	; 1
    8b92:	f1 f7       	brne	.-4      	; 0x8b90 <__vector_77+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b94:	21 50       	subi	r18, 0x01	; 1
    8b96:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b98:	d1 f7       	brne	.-12     	; 0x8b8e <__vector_77+0x108>
    8b9a:	29 c1       	rjmp	.+594    	; 0x8dee <__vector_77+0x368>
		    currentMode = recordMode;
		    display_clearBuffer();
		    display_writeBufferToScreen();
		    _delay_ms(400);
	    } else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up) && !restartingFile){					// waiting to start recording
    8b9c:	80 91 01 33 	lds	r24, 0x3301
    8ba0:	88 23       	and	r24, r24
    8ba2:	f9 f4       	brne	.+62     	; 0x8be2 <__vector_77+0x15c>
    8ba4:	80 91 dd 32 	lds	r24, 0x32DD
    8ba8:	88 23       	and	r24, r24
    8baa:	d9 f4       	brne	.+54     	; 0x8be2 <__vector_77+0x15c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    8bac:	80 91 a8 06 	lds	r24, 0x06A8
    8bb0:	80 fd       	sbrc	r24, 0
    8bb2:	17 c0       	rjmp	.+46     	; 0x8be2 <__vector_77+0x15c>
    8bb4:	09 c5       	rjmp	.+2578   	; 0x95c8 <__vector_77+0xb42>
    8bb6:	80 91 19 33 	lds	r24, 0x3319
    8bba:	88 23       	and	r24, r24
    8bbc:	91 f4       	brne	.+36     	; 0x8be2 <__vector_77+0x15c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8bbe:	e0 e2       	ldi	r30, 0x20	; 32
    8bc0:	f6 e0       	ldi	r31, 0x06	; 6
    8bc2:	82 e0       	ldi	r24, 0x02	; 2
    8bc4:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8bc6:	81 e0       	ldi	r24, 0x01	; 1
    8bc8:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Clear(sd_Red);
		    Leds_Set(sd_Green);
		    if(connected){
    8bca:	80 91 be 32 	lds	r24, 0x32BE
    8bce:	88 23       	and	r24, r24
    8bd0:	21 f0       	breq	.+8      	; 0x8bda <__vector_77+0x154>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8bd2:	80 e8       	ldi	r24, 0x80	; 128
    8bd4:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8bd6:	80 e4       	ldi	r24, 0x40	; 64
    8bd8:	7b c0       	rjmp	.+246    	; 0x8cd0 <__vector_77+0x24a>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8bda:	80 e4       	ldi	r24, 0x40	; 64
    8bdc:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8bde:	80 e8       	ldi	r24, 0x80	; 128
    8be0:	77 c0       	rjmp	.+238    	; 0x8cd0 <__vector_77+0x24a>
                Leds_Set(wifi_Green);
		    } else {
		        Leds_Clear(wifi_Green);
                Leds_Set(wifi_Red);
		    }
	    } else if(currentMode == recordMode && !recording && !SD_Inserted()){
    8be2:	80 91 01 33 	lds	r24, 0x3301
    8be6:	88 23       	and	r24, r24
    8be8:	79 f4       	brne	.+30     	; 0x8c08 <__vector_77+0x182>
    8bea:	80 91 dd 32 	lds	r24, 0x32DD
    8bee:	88 23       	and	r24, r24
    8bf0:	59 f4       	brne	.+22     	; 0x8c08 <__vector_77+0x182>
    8bf2:	80 91 a8 06 	lds	r24, 0x06A8
    8bf6:	80 ff       	sbrs	r24, 0
    8bf8:	07 c0       	rjmp	.+14     	; 0x8c08 <__vector_77+0x182>
    8bfa:	e0 e2       	ldi	r30, 0x20	; 32
    8bfc:	f6 e0       	ldi	r31, 0x06	; 6
    8bfe:	82 e0       	ldi	r24, 0x02	; 2
    8c00:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8c02:	81 e0       	ldi	r24, 0x01	; 1
    8c04:	86 83       	std	Z+6, r24	; 0x06
    8c06:	f3 c0       	rjmp	.+486    	; 0x8dee <__vector_77+0x368>
		    Leds_Set(sd_Red);
		    Leds_Clear(sd_Green);
	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){
    8c08:	80 91 01 33 	lds	r24, 0x3301
    8c0c:	88 23       	and	r24, r24
    8c0e:	09 f0       	breq	.+2      	; 0x8c12 <__vector_77+0x18c>
    8c10:	61 c0       	rjmp	.+194    	; 0x8cd4 <__vector_77+0x24e>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8c12:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8c16:	8c 77       	andi	r24, 0x7C	; 124
    8c18:	82 fd       	sbrc	r24, 2
    8c1a:	5c c0       	rjmp	.+184    	; 0x8cd4 <__vector_77+0x24e>
    8c1c:	db c4       	rjmp	.+2486   	; 0x95d4 <__vector_77+0xb4e>
            if(percentDiskUsed < 950){
    8c1e:	80 91 43 33 	lds	r24, 0x3343
    8c22:	90 91 44 33 	lds	r25, 0x3344
    8c26:	a0 91 45 33 	lds	r26, 0x3345
    8c2a:	b0 91 46 33 	lds	r27, 0x3346
    8c2e:	86 5b       	subi	r24, 0xB6	; 182
    8c30:	93 40       	sbci	r25, 0x03	; 3
    8c32:	a0 40       	sbci	r26, 0x00	; 0
    8c34:	b0 40       	sbci	r27, 0x00	; 0
    8c36:	08 f0       	brcs	.+2      	; 0x8c3a <__vector_77+0x1b4>
    8c38:	46 c0       	rjmp	.+140    	; 0x8cc6 <__vector_77+0x240>
                display_putString("Recording      0m",0,0,System5x7);
    8c3a:	81 e6       	ldi	r24, 0x61	; 97
    8c3c:	91 e2       	ldi	r25, 0x21	; 33
    8c3e:	60 e0       	ldi	r22, 0x00	; 0
    8c40:	40 e0       	ldi	r20, 0x00	; 0
    8c42:	23 e4       	ldi	r18, 0x43	; 67
    8c44:	30 e3       	ldi	r19, 0x30	; 48
    8c46:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
                display_drawLine(1,60,7,60,true);		// up arrow
    8c4a:	81 e0       	ldi	r24, 0x01	; 1
    8c4c:	6c e3       	ldi	r22, 0x3C	; 60
    8c4e:	47 e0       	ldi	r20, 0x07	; 7
    8c50:	2c e3       	ldi	r18, 0x3C	; 60
    8c52:	01 e0       	ldi	r16, 0x01	; 1
    8c54:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		        display_drawPixel(2,59,true);
    8c58:	82 e0       	ldi	r24, 0x02	; 2
    8c5a:	6b e3       	ldi	r22, 0x3B	; 59
    8c5c:	41 e0       	ldi	r20, 0x01	; 1
    8c5e:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		        display_drawPixel(3,58,true);
    8c62:	83 e0       	ldi	r24, 0x03	; 3
    8c64:	6a e3       	ldi	r22, 0x3A	; 58
    8c66:	41 e0       	ldi	r20, 0x01	; 1
    8c68:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
                display_drawPixel(2,61,true);
    8c6c:	82 e0       	ldi	r24, 0x02	; 2
    8c6e:	6d e3       	ldi	r22, 0x3D	; 61
    8c70:	41 e0       	ldi	r20, 0x01	; 1
    8c72:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
                display_drawPixel(3,62,true);
    8c76:	83 e0       	ldi	r24, 0x03	; 3
    8c78:	6e e3       	ldi	r22, 0x3E	; 62
    8c7a:	41 e0       	ldi	r20, 0x01	; 1
    8c7c:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		        display_writeBufferToScreen();
    8c80:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>

                okToGetRemainingSpace = true;
    8c84:	81 e0       	ldi	r24, 0x01	; 1
    8c86:	80 93 f0 4a 	sts	0x4AF0, r24
                while(!okToGetRemainingSpace);
    8c8a:	80 91 f0 4a 	lds	r24, 0x4AF0
    8c8e:	88 23       	and	r24, r24
    8c90:	e1 f3       	breq	.-8      	; 0x8c8a <__vector_77+0x204>
    8c92:	e0 e2       	ldi	r30, 0x20	; 32
    8c94:	f6 e0       	ldi	r31, 0x06	; 6
    8c96:	91 e0       	ldi	r25, 0x01	; 1
    8c98:	96 83       	std	Z+6, r25	; 0x06
		        Leds_Clear(wifi_Green);
		        Leds_Clear(wifi_Red);
		        Leds_Clear(ext_Green);
		        Leds_Clear(ext_Red);

                okToOpenLogFile = true;
    8c9a:	82 e0       	ldi	r24, 0x02	; 2
    8c9c:	86 83       	std	Z+6, r24	; 0x06
    8c9e:	80 e4       	ldi	r24, 0x40	; 64
    8ca0:	86 83       	std	Z+6, r24	; 0x06
    8ca2:	80 e8       	ldi	r24, 0x80	; 128
    8ca4:	86 83       	std	Z+6, r24	; 0x06
    8ca6:	80 e1       	ldi	r24, 0x10	; 16
    8ca8:	86 83       	std	Z+6, r24	; 0x06
    8caa:	80 e2       	ldi	r24, 0x20	; 32
    8cac:	86 83       	std	Z+6, r24	; 0x06
    8cae:	90 93 08 33 	sts	0x3308, r25
    8cb2:	84 ef       	ldi	r24, 0xF4	; 244
    8cb4:	91 e0       	ldi	r25, 0x01	; 1
    8cb6:	20 e7       	ldi	r18, 0x70	; 112
    8cb8:	31 e0       	ldi	r19, 0x01	; 1
    8cba:	f9 01       	movw	r30, r18
    8cbc:	31 97       	sbiw	r30, 0x01	; 1
    8cbe:	f1 f7       	brne	.-4      	; 0x8cbc <__vector_77+0x236>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8cc0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8cc2:	d9 f7       	brne	.-10     	; 0x8cba <__vector_77+0x234>
    8cc4:	94 c0       	rjmp	.+296    	; 0x8dee <__vector_77+0x368>
    8cc6:	e0 e2       	ldi	r30, 0x20	; 32
    8cc8:	f6 e0       	ldi	r31, 0x06	; 6
    8cca:	81 e0       	ldi	r24, 0x01	; 1
    8ccc:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8cce:	82 e0       	ldi	r24, 0x02	; 2
    8cd0:	85 83       	std	Z+5, r24	; 0x05
    8cd2:	8d c0       	rjmp	.+282    	; 0x8dee <__vector_77+0x368>
		        Leds_Set(sd_Red);

            }


	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){
    8cd4:	80 91 01 33 	lds	r24, 0x3301
    8cd8:	88 23       	and	r24, r24
    8cda:	09 f0       	breq	.+2      	; 0x8cde <__vector_77+0x258>
    8cdc:	88 c0       	rjmp	.+272    	; 0x8dee <__vector_77+0x368>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8cde:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8ce2:	8c 77       	andi	r24, 0x7C	; 124
    8ce4:	82 fd       	sbrc	r24, 2
    8ce6:	83 c0       	rjmp	.+262    	; 0x8dee <__vector_77+0x368>
    8ce8:	7b c4       	rjmp	.+2294   	; 0x95e0 <__vector_77+0xb5a>
		    rs232Recording = false;
    8cea:	10 92 d2 32 	sts	0x32D2, r1
		    recording = false;
    8cee:	10 92 dd 32 	sts	0x32DD, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    8cf2:	10 92 e1 32 	sts	0x32E1, r1
  	temperatureBufferToWriteTo = 1;
    8cf6:	81 e0       	ldi	r24, 0x01	; 1
    8cf8:	80 93 f0 2f 	sts	0x2FF0, r24
	okToSendTemperatureBuffer1 = false;
    8cfc:	10 92 df 32 	sts	0x32DF, r1
	okToSendTemperatureBuffer2 = false;
    8d00:	10 92 e0 32 	sts	0x32E0, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    8d04:	10 92 e7 32 	sts	0x32E7, r1
	humidityBufferToWriteTo = 1;
    8d08:	80 93 f2 2f 	sts	0x2FF2, r24
	okToSendHumidityBuffer1 = false;
    8d0c:	10 92 e5 32 	sts	0x32E5, r1
	okToSendHumidityBuffer2 = false;
    8d10:	10 92 e6 32 	sts	0x32E6, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    8d14:	10 92 e4 32 	sts	0x32E4, r1
	pressureBufferToWriteTo = 1;
    8d18:	80 93 f1 2f 	sts	0x2FF1, r24
	okToSendPressureBuffer1 = false;
    8d1c:	10 92 e2 32 	sts	0x32E2, r1
	okToSendPressureBuffer2 = false;
    8d20:	10 92 e3 32 	sts	0x32E3, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    8d24:	10 92 ea 32 	sts	0x32EA, r1
    8d28:	10 92 eb 32 	sts	0x32EB, r1
	microphoneBufferToWriteTo = 1;
    8d2c:	80 93 f3 2f 	sts	0x2FF3, r24
	okToSendMicrophoneBuffer1 = false;
    8d30:	10 92 e8 32 	sts	0x32E8, r1
	okToSendMicrophoneBuffer2 = false;
    8d34:	10 92 e9 32 	sts	0x32E9, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    8d38:	10 92 ee 32 	sts	0x32EE, r1
	lightBufferToWriteTo = 1;
    8d3c:	80 93 f4 2f 	sts	0x2FF4, r24
	okToSendLightBuffer1 = false;
    8d40:	10 92 ec 32 	sts	0x32EC, r1
	okToSendLightBuffer2 = false;
    8d44:	10 92 ed 32 	sts	0x32ED, r1
		    Sensors_ResetTemperatureBuffers();
		    Sensors_ResetHumidityBuffers();
		    Sensors_ResetPressureBuffers();
		    Sensors_ResetMicrophoneBuffers();
		    Sensors_ResetLightBuffers();
		    okToCloseLogFile = true;
    8d48:	80 93 0a 33 	sts	0x330A, r24


		    display_putString("Paused           ",0,0,System5x7);
    8d4c:	83 e7       	ldi	r24, 0x73	; 115
    8d4e:	91 e2       	ldi	r25, 0x21	; 33
    8d50:	60 e0       	ldi	r22, 0x00	; 0
    8d52:	40 e0       	ldi	r20, 0x00	; 0
    8d54:	23 e4       	ldi	r18, 0x43	; 67
    8d56:	30 e3       	ldi	r19, 0x30	; 48
    8d58:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		    display_drawLine(1,60,7,60,true);		// up arrow
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
    8d5e:	6c e3       	ldi	r22, 0x3C	; 60
    8d60:	47 e0       	ldi	r20, 0x07	; 7
    8d62:	2c e3       	ldi	r18, 0x3C	; 60
    8d64:	01 e0       	ldi	r16, 0x01	; 1
    8d66:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		    display_drawPixel(2,59,true);
    8d6a:	82 e0       	ldi	r24, 0x02	; 2
    8d6c:	6b e3       	ldi	r22, 0x3B	; 59
    8d6e:	41 e0       	ldi	r20, 0x01	; 1
    8d70:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(3,58,true);
    8d74:	83 e0       	ldi	r24, 0x03	; 3
    8d76:	6a e3       	ldi	r22, 0x3A	; 58
    8d78:	41 e0       	ldi	r20, 0x01	; 1
    8d7a:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(2,61,true);
    8d7e:	82 e0       	ldi	r24, 0x02	; 2
    8d80:	6d e3       	ldi	r22, 0x3D	; 61
    8d82:	41 e0       	ldi	r20, 0x01	; 1
    8d84:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(3,62,true);
    8d88:	83 e0       	ldi	r24, 0x03	; 3
    8d8a:	6e e3       	ldi	r22, 0x3E	; 62
    8d8c:	41 e0       	ldi	r20, 0x01	; 1
    8d8e:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_writeBufferToScreen();
    8d92:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>

            if(timeIsValid || demoMode){
    8d96:	80 91 1a 33 	lds	r24, 0x331A
    8d9a:	88 23       	and	r24, r24
    8d9c:	21 f4       	brne	.+8      	; 0x8da6 <__vector_77+0x320>
    8d9e:	80 91 a8 32 	lds	r24, 0x32A8
    8da2:	88 23       	and	r24, r24
    8da4:	11 f0       	breq	.+4      	; 0x8daa <__vector_77+0x324>
    8da6:	80 e4       	ldi	r24, 0x40	; 64
    8da8:	01 c0       	rjmp	.+2      	; 0x8dac <__vector_77+0x326>
    8daa:	80 e8       	ldi	r24, 0x80	; 128
    8dac:	e0 e2       	ldi	r30, 0x20	; 32
    8dae:	f6 e0       	ldi	r31, 0x06	; 6
    8db0:	85 83       	std	Z+5, r24	; 0x05
    8db2:	80 91 a8 06 	lds	r24, 0x06A8
    8db6:	80 ff       	sbrs	r24, 0
    8db8:	19 c4       	rjmp	.+2098   	; 0x95ec <__vector_77+0xb66>
    8dba:	82 e0       	ldi	r24, 0x02	; 2
    8dbc:	e0 e2       	ldi	r30, 0x20	; 32
    8dbe:	f6 e0       	ldi	r31, 0x06	; 6
    8dc0:	85 83       	std	Z+5, r24	; 0x05
		    if(SD_Inserted()){
			    Leds_Set(sd_Green);
		    } else {
			    Leds_Set(sd_Red);
		    }
		    if(!chargeComplete && SD2_Inserted()){
    8dc2:	80 91 d6 32 	lds	r24, 0x32D6
    8dc6:	88 23       	and	r24, r24
    8dc8:	29 f4       	brne	.+10     	; 0x8dd4 <__vector_77+0x34e>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    8dca:	80 91 a8 06 	lds	r24, 0x06A8
    8dce:	81 fd       	sbrc	r24, 1
    8dd0:	05 c0       	rjmp	.+10     	; 0x8ddc <__vector_77+0x356>
    8dd2:	0e c4       	rjmp	.+2076   	; 0x95f0 <__vector_77+0xb6a>
    8dd4:	80 91 a8 06 	lds	r24, 0x06A8
    8dd8:	81 ff       	sbrs	r24, 1
    8dda:	0f c4       	rjmp	.+2078   	; 0x95fa <__vector_77+0xb74>
    8ddc:	88 e8       	ldi	r24, 0x88	; 136
    8dde:	93 e1       	ldi	r25, 0x13	; 19
    8de0:	20 e7       	ldi	r18, 0x70	; 112
    8de2:	31 e0       	ldi	r19, 0x01	; 1
    8de4:	f9 01       	movw	r30, r18
    8de6:	31 97       	sbiw	r30, 0x01	; 1
    8de8:	f1 f7       	brne	.-4      	; 0x8de6 <__vector_77+0x360>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8dea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8dec:	d9 f7       	brne	.-10     	; 0x8de4 <__vector_77+0x35e>
		    _delay_ms(500);
	    }

	// load displays

	    if(currentMode == recordMode){
    8dee:	80 91 01 33 	lds	r24, 0x3301
    8df2:	88 23       	and	r24, r24
    8df4:	09 f0       	breq	.+2      	; 0x8df8 <__vector_77+0x372>
    8df6:	69 c2       	rjmp	.+1234   	; 0x92ca <__vector_77+0x844>
		    if(recording){
    8df8:	80 91 dd 32 	lds	r24, 0x32DD
    8dfc:	88 23       	and	r24, r24
    8dfe:	09 f4       	brne	.+2      	; 0x8e02 <__vector_77+0x37c>
    8e00:	40 c0       	rjmp	.+128    	; 0x8e82 <__vector_77+0x3fc>
			    sprintf(temp2, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    8e02:	60 91 d8 32 	lds	r22, 0x32D8
    8e06:	70 91 d9 32 	lds	r23, 0x32D9
    8e0a:	80 91 da 32 	lds	r24, 0x32DA
    8e0e:	90 91 db 32 	lds	r25, 0x32DB
    8e12:	ad b7       	in	r26, 0x3d	; 61
    8e14:	be b7       	in	r27, 0x3e	; 62
    8e16:	18 97       	sbiw	r26, 0x08	; 8
    8e18:	ad bf       	out	0x3d, r26	; 61
    8e1a:	be bf       	out	0x3e, r27	; 62
    8e1c:	0d b7       	in	r16, 0x3d	; 61
    8e1e:	1e b7       	in	r17, 0x3e	; 62
    8e20:	0f 5f       	subi	r16, 0xFF	; 255
    8e22:	1f 4f       	sbci	r17, 0xFF	; 255
    8e24:	22 e5       	ldi	r18, 0x52	; 82
    8e26:	e2 2e       	mov	r14, r18
    8e28:	2c e3       	ldi	r18, 0x3C	; 60
    8e2a:	f2 2e       	mov	r15, r18
    8e2c:	11 96       	adiw	r26, 0x01	; 1
    8e2e:	ed 92       	st	X+, r14
    8e30:	fc 92       	st	X, r15
    8e32:	12 97       	sbiw	r26, 0x02	; 2
    8e34:	25 e8       	ldi	r18, 0x85	; 133
    8e36:	31 e2       	ldi	r19, 0x21	; 33
    8e38:	f8 01       	movw	r30, r16
    8e3a:	22 83       	std	Z+2, r18	; 0x02
    8e3c:	33 83       	std	Z+3, r19	; 0x03
    8e3e:	20 91 a4 32 	lds	r18, 0x32A4
    8e42:	30 91 a5 32 	lds	r19, 0x32A5
    8e46:	40 91 a6 32 	lds	r20, 0x32A6
    8e4a:	50 91 a7 32 	lds	r21, 0x32A7
    8e4e:	62 1b       	sub	r22, r18
    8e50:	73 0b       	sbc	r23, r19
    8e52:	84 0b       	sbc	r24, r20
    8e54:	95 0b       	sbc	r25, r21
    8e56:	2c e3       	ldi	r18, 0x3C	; 60
    8e58:	30 e0       	ldi	r19, 0x00	; 0
    8e5a:	40 e0       	ldi	r20, 0x00	; 0
    8e5c:	50 e0       	ldi	r21, 0x00	; 0
    8e5e:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    8e62:	d8 01       	movw	r26, r16
    8e64:	14 96       	adiw	r26, 0x04	; 4
    8e66:	2d 93       	st	X+, r18
    8e68:	3d 93       	st	X+, r19
    8e6a:	4d 93       	st	X+, r20
    8e6c:	5c 93       	st	X, r21
    8e6e:	17 97       	sbiw	r26, 0x07	; 7
    8e70:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
			    display_putString(temp2,0,0,System5x7);
    8e74:	ed b7       	in	r30, 0x3d	; 61
    8e76:	fe b7       	in	r31, 0x3e	; 62
    8e78:	38 96       	adiw	r30, 0x08	; 8
    8e7a:	ed bf       	out	0x3d, r30	; 61
    8e7c:	fe bf       	out	0x3e, r31	; 62
    8e7e:	c7 01       	movw	r24, r14
    8e80:	02 c0       	rjmp	.+4      	; 0x8e86 <__vector_77+0x400>
		    } else {
			    display_putString("Paused           ",0,0,System5x7);
    8e82:	83 e7       	ldi	r24, 0x73	; 115
    8e84:	91 e2       	ldi	r25, 0x21	; 33
    8e86:	60 e0       	ldi	r22, 0x00	; 0
    8e88:	40 e0       	ldi	r20, 0x00	; 0
    8e8a:	23 e4       	ldi	r18, 0x43	; 67
    8e8c:	30 e3       	ldi	r19, 0x30	; 48
    8e8e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		    }

		    display_drawLine(1,60,7,60,true);		// up arrow
    8e92:	81 e0       	ldi	r24, 0x01	; 1
    8e94:	6c e3       	ldi	r22, 0x3C	; 60
    8e96:	47 e0       	ldi	r20, 0x07	; 7
    8e98:	2c e3       	ldi	r18, 0x3C	; 60
    8e9a:	01 e0       	ldi	r16, 0x01	; 1
    8e9c:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		    display_drawPixel(2,59,true);
    8ea0:	82 e0       	ldi	r24, 0x02	; 2
    8ea2:	6b e3       	ldi	r22, 0x3B	; 59
    8ea4:	41 e0       	ldi	r20, 0x01	; 1
    8ea6:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(3,58,true);
    8eaa:	83 e0       	ldi	r24, 0x03	; 3
    8eac:	6a e3       	ldi	r22, 0x3A	; 58
    8eae:	41 e0       	ldi	r20, 0x01	; 1
    8eb0:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(2,61,true);
    8eb4:	82 e0       	ldi	r24, 0x02	; 2
    8eb6:	6d e3       	ldi	r22, 0x3D	; 61
    8eb8:	41 e0       	ldi	r20, 0x01	; 1
    8eba:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(3,62,true);
    8ebe:	83 e0       	ldi	r24, 0x03	; 3
    8ec0:	6e e3       	ldi	r22, 0x3E	; 62
    8ec2:	41 e0       	ldi	r20, 0x01	; 1
    8ec4:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>

		    sprintf(temp2, "Uploading    %3u", uploadPercentBS);
    8ec8:	00 d0       	rcall	.+0      	; 0x8eca <__vector_77+0x444>
    8eca:	00 d0       	rcall	.+0      	; 0x8ecc <__vector_77+0x446>
    8ecc:	ed b7       	in	r30, 0x3d	; 61
    8ece:	fe b7       	in	r31, 0x3e	; 62
    8ed0:	31 96       	adiw	r30, 0x01	; 1
    8ed2:	b2 e5       	ldi	r27, 0x52	; 82
    8ed4:	ab 2e       	mov	r10, r27
    8ed6:	bc e3       	ldi	r27, 0x3C	; 60
    8ed8:	bb 2e       	mov	r11, r27
    8eda:	ad b7       	in	r26, 0x3d	; 61
    8edc:	be b7       	in	r27, 0x3e	; 62
    8ede:	11 96       	adiw	r26, 0x01	; 1
    8ee0:	ad 92       	st	X+, r10
    8ee2:	bc 92       	st	X, r11
    8ee4:	12 97       	sbiw	r26, 0x02	; 2
    8ee6:	87 e9       	ldi	r24, 0x97	; 151
    8ee8:	91 e2       	ldi	r25, 0x21	; 33
    8eea:	82 83       	std	Z+2, r24	; 0x02
    8eec:	93 83       	std	Z+3, r25	; 0x03
    8eee:	80 91 05 33 	lds	r24, 0x3305
    8ef2:	84 83       	std	Z+4, r24	; 0x04
    8ef4:	15 82       	std	Z+5, r1	; 0x05
    8ef6:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    strcat(temp2,"%");
    8efa:	ed b7       	in	r30, 0x3d	; 61
    8efc:	fe b7       	in	r31, 0x3e	; 62
    8efe:	36 96       	adiw	r30, 0x06	; 6
    8f00:	ed bf       	out	0x3d, r30	; 61
    8f02:	fe bf       	out	0x3e, r31	; 62
    8f04:	c5 01       	movw	r24, r10
    8f06:	68 ea       	ldi	r22, 0xA8	; 168
    8f08:	71 e2       	ldi	r23, 0x21	; 33
    8f0a:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		    display_putString(temp2,1,0,System5x7);
    8f0e:	c5 01       	movw	r24, r10
    8f10:	61 e0       	ldi	r22, 0x01	; 1
    8f12:	40 e0       	ldi	r20, 0x00	; 0
    8f14:	23 e4       	ldi	r18, 0x43	; 67
    8f16:	30 e3       	ldi	r19, 0x30	; 48
    8f18:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
            sprintf(temp2,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
    8f1c:	c0 90 43 33 	lds	r12, 0x3343
    8f20:	d0 90 44 33 	lds	r13, 0x3344
    8f24:	e0 90 45 33 	lds	r14, 0x3345
    8f28:	f0 90 46 33 	lds	r15, 0x3346
    8f2c:	2d b7       	in	r18, 0x3d	; 61
    8f2e:	3e b7       	in	r19, 0x3e	; 62
    8f30:	2c 50       	subi	r18, 0x0C	; 12
    8f32:	30 40       	sbci	r19, 0x00	; 0
    8f34:	2d bf       	out	0x3d, r18	; 61
    8f36:	3e bf       	out	0x3e, r19	; 62
    8f38:	0d b7       	in	r16, 0x3d	; 61
    8f3a:	1e b7       	in	r17, 0x3e	; 62
    8f3c:	0f 5f       	subi	r16, 0xFF	; 255
    8f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8f40:	ad b7       	in	r26, 0x3d	; 61
    8f42:	be b7       	in	r27, 0x3e	; 62
    8f44:	11 96       	adiw	r26, 0x01	; 1
    8f46:	ad 92       	st	X+, r10
    8f48:	bc 92       	st	X, r11
    8f4a:	12 97       	sbiw	r26, 0x02	; 2
    8f4c:	8a ea       	ldi	r24, 0xAA	; 170
    8f4e:	91 e2       	ldi	r25, 0x21	; 33
    8f50:	f8 01       	movw	r30, r16
    8f52:	82 83       	std	Z+2, r24	; 0x02
    8f54:	93 83       	std	Z+3, r25	; 0x03
    8f56:	c7 01       	movw	r24, r14
    8f58:	b6 01       	movw	r22, r12
    8f5a:	2a e0       	ldi	r18, 0x0A	; 10
    8f5c:	30 e0       	ldi	r19, 0x00	; 0
    8f5e:	40 e0       	ldi	r20, 0x00	; 0
    8f60:	50 e0       	ldi	r21, 0x00	; 0
    8f62:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    8f66:	d8 01       	movw	r26, r16
    8f68:	14 96       	adiw	r26, 0x04	; 4
    8f6a:	2d 93       	st	X+, r18
    8f6c:	3d 93       	st	X+, r19
    8f6e:	4d 93       	st	X+, r20
    8f70:	5c 93       	st	X, r21
    8f72:	17 97       	sbiw	r26, 0x07	; 7
    8f74:	c7 01       	movw	r24, r14
    8f76:	b6 01       	movw	r22, r12
    8f78:	2a e0       	ldi	r18, 0x0A	; 10
    8f7a:	30 e0       	ldi	r19, 0x00	; 0
    8f7c:	40 e0       	ldi	r20, 0x00	; 0
    8f7e:	50 e0       	ldi	r21, 0x00	; 0
    8f80:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    8f84:	f8 01       	movw	r30, r16
    8f86:	60 87       	std	Z+8, r22	; 0x08
    8f88:	71 87       	std	Z+9, r23	; 0x09
    8f8a:	82 87       	std	Z+10, r24	; 0x0a
    8f8c:	93 87       	std	Z+11, r25	; 0x0b
    8f8e:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    strcat(temp2,"%");
    8f92:	2d b7       	in	r18, 0x3d	; 61
    8f94:	3e b7       	in	r19, 0x3e	; 62
    8f96:	24 5f       	subi	r18, 0xF4	; 244
    8f98:	3f 4f       	sbci	r19, 0xFF	; 255
    8f9a:	2d bf       	out	0x3d, r18	; 61
    8f9c:	3e bf       	out	0x3e, r19	; 62
    8f9e:	c5 01       	movw	r24, r10
    8fa0:	68 ea       	ldi	r22, 0xA8	; 168
    8fa2:	71 e2       	ldi	r23, 0x21	; 33
    8fa4:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		    display_putString(temp2,2,0,System5x7);
    8fa8:	c5 01       	movw	r24, r10
    8faa:	62 e0       	ldi	r22, 0x02	; 2
    8fac:	40 e0       	ldi	r20, 0x00	; 0
    8fae:	23 e4       	ldi	r18, 0x43	; 67
    8fb0:	30 e3       	ldi	r19, 0x30	; 48
    8fb2:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>




		    if(chargePercent == 100){
    8fb6:	80 91 d3 32 	lds	r24, 0x32D3
    8fba:	84 36       	cpi	r24, 0x64	; 100
    8fbc:	29 f4       	brne	.+10     	; 0x8fc8 <__vector_77+0x542>
			    chargeComplete = true;
    8fbe:	81 e0       	ldi	r24, 0x01	; 1
    8fc0:	80 93 d6 32 	sts	0x32D6, r24
			    okToCharge  = false;
    8fc4:	10 92 d7 32 	sts	0x32D7, r1
    8fc8:	80 91 a8 06 	lds	r24, 0x06A8
    8fcc:	81 fd       	sbrc	r24, 1
    8fce:	13 c0       	rjmp	.+38     	; 0x8ff6 <__vector_77+0x570>
    8fd0:	1b c3       	rjmp	.+1590   	; 0x9608 <__vector_77+0xb82>
		    }


		    if(SD2_Inserted() && chargeComplete){
			    display_putString("Ext Charged      ",3,0,System5x7);
    8fd2:	8e eb       	ldi	r24, 0xBE	; 190
    8fd4:	91 e2       	ldi	r25, 0x21	; 33
    8fd6:	63 e0       	ldi	r22, 0x03	; 3
    8fd8:	40 e0       	ldi	r20, 0x00	; 0
    8fda:	23 e4       	ldi	r18, 0x43	; 67
    8fdc:	30 e3       	ldi	r19, 0x30	; 48
    8fde:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
			    if(!recording){
    8fe2:	80 91 dd 32 	lds	r24, 0x32DD
    8fe6:	88 23       	and	r24, r24
    8fe8:	09 f0       	breq	.+2      	; 0x8fec <__vector_77+0x566>
    8fea:	83 c0       	rjmp	.+262    	; 0x90f2 <__vector_77+0x66c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8fec:	e0 e2       	ldi	r30, 0x20	; 32
    8fee:	f6 e0       	ldi	r31, 0x06	; 6
    8ff0:	80 e2       	ldi	r24, 0x20	; 32
    8ff2:	86 83       	std	Z+6, r24	; 0x06
    8ff4:	6d c0       	rjmp	.+218    	; 0x90d0 <__vector_77+0x64a>
    8ff6:	80 91 a8 06 	lds	r24, 0x06A8
    8ffa:	81 fd       	sbrc	r24, 1
    8ffc:	6c c0       	rjmp	.+216    	; 0x90d6 <__vector_77+0x650>
    8ffe:	0a c3       	rjmp	.+1556   	; 0x9614 <__vector_77+0xb8e>
				    Leds_Clear(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    } else if(SD2_Inserted() && !chargeComplete){
			    sprintf(temp2, "Ext Charging  %2u",chargePercent);
    9000:	00 d0       	rcall	.+0      	; 0x9002 <__vector_77+0x57c>
    9002:	00 d0       	rcall	.+0      	; 0x9004 <__vector_77+0x57e>
    9004:	ed b7       	in	r30, 0x3d	; 61
    9006:	fe b7       	in	r31, 0x3e	; 62
    9008:	31 96       	adiw	r30, 0x01	; 1
    900a:	02 e5       	ldi	r16, 0x52	; 82
    900c:	1c e3       	ldi	r17, 0x3C	; 60
    900e:	ad b7       	in	r26, 0x3d	; 61
    9010:	be b7       	in	r27, 0x3e	; 62
    9012:	11 96       	adiw	r26, 0x01	; 1
    9014:	0d 93       	st	X+, r16
    9016:	1c 93       	st	X, r17
    9018:	12 97       	sbiw	r26, 0x02	; 2
    901a:	80 ed       	ldi	r24, 0xD0	; 208
    901c:	91 e2       	ldi	r25, 0x21	; 33
    901e:	82 83       	std	Z+2, r24	; 0x02
    9020:	93 83       	std	Z+3, r25	; 0x03
    9022:	80 91 d3 32 	lds	r24, 0x32D3
    9026:	84 83       	std	Z+4, r24	; 0x04
    9028:	15 82       	std	Z+5, r1	; 0x05
    902a:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
			    strcat(temp2,"%");
    902e:	ed b7       	in	r30, 0x3d	; 61
    9030:	fe b7       	in	r31, 0x3e	; 62
    9032:	36 96       	adiw	r30, 0x06	; 6
    9034:	ed bf       	out	0x3d, r30	; 61
    9036:	fe bf       	out	0x3e, r31	; 62
    9038:	c8 01       	movw	r24, r16
    903a:	68 ea       	ldi	r22, 0xA8	; 168
    903c:	71 e2       	ldi	r23, 0x21	; 33
    903e:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
			    display_putString(temp2,3,0,System5x7);
    9042:	c8 01       	movw	r24, r16
    9044:	63 e0       	ldi	r22, 0x03	; 3
    9046:	40 e0       	ldi	r20, 0x00	; 0
    9048:	23 e4       	ldi	r18, 0x43	; 67
    904a:	30 e3       	ldi	r19, 0x30	; 48
    904c:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
			    okToCharge = true;
    9050:	81 e0       	ldi	r24, 0x01	; 1
    9052:	80 93 d7 32 	sts	0x32D7, r24
			    if(!rtcSynced){
    9056:	80 91 07 33 	lds	r24, 0x3307
    905a:	88 23       	and	r24, r24
    905c:	89 f5       	brne	.+98     	; 0x90c0 <__vector_77+0x63a>
    905e:	88 e8       	ldi	r24, 0x88	; 136
    9060:	93 e1       	ldi	r25, 0x13	; 19
    9062:	20 e7       	ldi	r18, 0x70	; 112
    9064:	31 e0       	ldi	r19, 0x01	; 1
    9066:	f9 01       	movw	r30, r18
    9068:	31 97       	sbiw	r30, 0x01	; 1
    906a:	f1 f7       	brne	.-4      	; 0x9068 <__vector_77+0x5e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    906c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    906e:	d9 f7       	brne	.-10     	; 0x9066 <__vector_77+0x5e0>
			        _delay_ms(500);
			        if(useWifiForUploading){
    9070:	80 91 a9 32 	lds	r24, 0x32A9
    9074:	88 23       	and	r24, r24
    9076:	29 f0       	breq	.+10     	; 0x9082 <__vector_77+0x5fc>
			            Debug_SendString("Syncing RTC", true);
    9078:	82 ee       	ldi	r24, 0xE2	; 226
    907a:	91 e2       	ldi	r25, 0x21	; 33
    907c:	61 e0       	ldi	r22, 0x01	; 1
    907e:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    9082:	e0 ea       	ldi	r30, 0xA0	; 160
    9084:	f4 e0       	ldi	r31, 0x04	; 4
    9086:	88 e0       	ldi	r24, 0x08	; 8
    9088:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    908a:	84 e0       	ldi	r24, 0x04	; 4
    908c:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    908e:	8f e0       	ldi	r24, 0x0F	; 15
    9090:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    9092:	11 e0       	ldi	r17, 0x01	; 1
    9094:	14 83       	std	Z+4, r17	; 0x04
			        }
				    RTC_init();
				    RTC_setUTCSecs(UNIX_time);
    9096:	60 91 d8 32 	lds	r22, 0x32D8
    909a:	70 91 d9 32 	lds	r23, 0x32D9
    909e:	80 91 da 32 	lds	r24, 0x32DA
    90a2:	90 91 db 32 	lds	r25, 0x32DB
    90a6:	0e 94 db 38 	call	0x71b6	; 0x71b6 <RTC_setUTCSecs>
				    rtcSynced = true;
    90aa:	10 93 07 33 	sts	0x3307, r17
				    if(useWifiForUploading){
    90ae:	80 91 a9 32 	lds	r24, 0x32A9
    90b2:	88 23       	and	r24, r24
    90b4:	29 f0       	breq	.+10     	; 0x90c0 <__vector_77+0x63a>
				        Debug_SendString("RTC synced", true);
    90b6:	8e ee       	ldi	r24, 0xEE	; 238
    90b8:	91 e2       	ldi	r25, 0x21	; 33
    90ba:	61 e0       	ldi	r22, 0x01	; 1
    90bc:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
				    }
			    }
			    if(!recording){
    90c0:	80 91 dd 32 	lds	r24, 0x32DD
    90c4:	88 23       	and	r24, r24
    90c6:	a9 f4       	brne	.+42     	; 0x90f2 <__vector_77+0x66c>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    90c8:	e0 e2       	ldi	r30, 0x20	; 32
    90ca:	f6 e0       	ldi	r31, 0x06	; 6
    90cc:	80 e2       	ldi	r24, 0x20	; 32
    90ce:	85 83       	std	Z+5, r24	; 0x05
				    Leds_Set(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    }else{
			    display_putString("Ext Removed      ",3,0,System5x7);
    90d0:	80 e1       	ldi	r24, 0x10	; 16
    90d2:	85 83       	std	Z+5, r24	; 0x05
    90d4:	0e c0       	rjmp	.+28     	; 0x90f2 <__vector_77+0x66c>
    90d6:	89 ef       	ldi	r24, 0xF9	; 249
    90d8:	91 e2       	ldi	r25, 0x21	; 33
    90da:	63 e0       	ldi	r22, 0x03	; 3
    90dc:	40 e0       	ldi	r20, 0x00	; 0
    90de:	23 e4       	ldi	r18, 0x43	; 67
    90e0:	30 e3       	ldi	r19, 0x30	; 48
    90e2:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
			    chargePercent = 0;
    90e6:	10 92 d3 32 	sts	0x32D3, r1
			    chargeComplete = false;
    90ea:	10 92 d6 32 	sts	0x32D6, r1
			    rtcSynced = false;
    90ee:	10 92 07 33 	sts	0x3307, r1
			    //Leds_Clear(ext_Red);
			    //Leds_Clear(ext_Green);
		    }


		    sprintf(temp2, "Uploading    %3u", uploadPercentEXT);
    90f2:	00 d0       	rcall	.+0      	; 0x90f4 <__vector_77+0x66e>
    90f4:	00 d0       	rcall	.+0      	; 0x90f6 <__vector_77+0x670>
    90f6:	ed b7       	in	r30, 0x3d	; 61
    90f8:	fe b7       	in	r31, 0x3e	; 62
    90fa:	31 96       	adiw	r30, 0x01	; 1
    90fc:	02 e5       	ldi	r16, 0x52	; 82
    90fe:	1c e3       	ldi	r17, 0x3C	; 60
    9100:	ad b7       	in	r26, 0x3d	; 61
    9102:	be b7       	in	r27, 0x3e	; 62
    9104:	11 96       	adiw	r26, 0x01	; 1
    9106:	0d 93       	st	X+, r16
    9108:	1c 93       	st	X, r17
    910a:	12 97       	sbiw	r26, 0x02	; 2
    910c:	87 e9       	ldi	r24, 0x97	; 151
    910e:	91 e2       	ldi	r25, 0x21	; 33
    9110:	82 83       	std	Z+2, r24	; 0x02
    9112:	93 83       	std	Z+3, r25	; 0x03
    9114:	80 91 06 33 	lds	r24, 0x3306
    9118:	84 83       	std	Z+4, r24	; 0x04
    911a:	15 82       	std	Z+5, r1	; 0x05
    911c:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    strcat(temp2,"%");
    9120:	ed b7       	in	r30, 0x3d	; 61
    9122:	fe b7       	in	r31, 0x3e	; 62
    9124:	36 96       	adiw	r30, 0x06	; 6
    9126:	ed bf       	out	0x3d, r30	; 61
    9128:	fe bf       	out	0x3e, r31	; 62
    912a:	c8 01       	movw	r24, r16
    912c:	68 ea       	ldi	r22, 0xA8	; 168
    912e:	71 e2       	ldi	r23, 0x21	; 33
    9130:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		    display_putString(temp2,4,0,System5x7);
    9134:	c8 01       	movw	r24, r16
    9136:	64 e0       	ldi	r22, 0x04	; 4
    9138:	40 e0       	ldi	r20, 0x00	; 0
    913a:	23 e4       	ldi	r18, 0x43	; 67
    913c:	30 e3       	ldi	r19, 0x30	; 48
    913e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>


		    RTC_UTCSecsToTime(UNIX_time,&time);
    9142:	60 91 d8 32 	lds	r22, 0x32D8
    9146:	70 91 d9 32 	lds	r23, 0x32D9
    914a:	80 91 da 32 	lds	r24, 0x32DA
    914e:	90 91 db 32 	lds	r25, 0x32DB
    9152:	4e e2       	ldi	r20, 0x2E	; 46
    9154:	5f e4       	ldi	r21, 0x4F	; 79
    9156:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <RTC_UTCSecsToTime>
		    clockHour = time.Hour + 24;
		    clockHour -= timeZoneShift;
    915a:	90 91 31 4f 	lds	r25, 0x4F31
    915e:	98 5e       	subi	r25, 0xE8	; 232
    9160:	80 91 ff 32 	lds	r24, 0x32FF
    9164:	98 1b       	sub	r25, r24
    9166:	90 93 00 33 	sts	0x3300, r25
		    if(clockHour > 24){
    916a:	99 31       	cpi	r25, 0x19	; 25
    916c:	18 f0       	brcs	.+6      	; 0x9174 <__vector_77+0x6ee>
			    clockHour -= 24;
    916e:	98 51       	subi	r25, 0x18	; 24
    9170:	90 93 00 33 	sts	0x3300, r25
		    }

            if(clockHour == 0){
    9174:	90 91 00 33 	lds	r25, 0x3300
    9178:	99 23       	and	r25, r25
    917a:	49 f4       	brne	.+18     	; 0x918e <__vector_77+0x708>
                displayAM = true;
    917c:	81 e0       	ldi	r24, 0x01	; 1
    917e:	80 93 1b 33 	sts	0x331B, r24
                displayPM = false;
    9182:	10 92 1c 33 	sts	0x331C, r1
                clockHour += 12;
    9186:	8c e0       	ldi	r24, 0x0C	; 12
    9188:	80 93 00 33 	sts	0x3300, r24
    918c:	18 c0       	rjmp	.+48     	; 0x91be <__vector_77+0x738>
            } else if(clockHour == 12){
    918e:	9c 30       	cpi	r25, 0x0C	; 12
    9190:	31 f4       	brne	.+12     	; 0x919e <__vector_77+0x718>
                displayAM = false;
    9192:	10 92 1b 33 	sts	0x331B, r1
                displayPM = true;
    9196:	81 e0       	ldi	r24, 0x01	; 1
    9198:	80 93 1c 33 	sts	0x331C, r24
    919c:	10 c0       	rjmp	.+32     	; 0x91be <__vector_77+0x738>
            } else if(clockHour > 12){
    919e:	9d 30       	cpi	r25, 0x0D	; 13
    91a0:	48 f0       	brcs	.+18     	; 0x91b4 <__vector_77+0x72e>
                displayAM = false;
    91a2:	10 92 1b 33 	sts	0x331B, r1
                displayPM = true;
    91a6:	81 e0       	ldi	r24, 0x01	; 1
    91a8:	80 93 1c 33 	sts	0x331C, r24
                clockHour -= 12;
    91ac:	9c 50       	subi	r25, 0x0C	; 12
    91ae:	90 93 00 33 	sts	0x3300, r25
    91b2:	05 c0       	rjmp	.+10     	; 0x91be <__vector_77+0x738>
            }  else {
                displayAM = true;
    91b4:	81 e0       	ldi	r24, 0x01	; 1
    91b6:	80 93 1b 33 	sts	0x331B, r24
                displayPM = false;
    91ba:	10 92 1c 33 	sts	0x331C, r1
            }

            sprintf(temp2,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    91be:	2d b7       	in	r18, 0x3d	; 61
    91c0:	3e b7       	in	r19, 0x3e	; 62
    91c2:	2a 50       	subi	r18, 0x0A	; 10
    91c4:	30 40       	sbci	r19, 0x00	; 0
    91c6:	2d bf       	out	0x3d, r18	; 61
    91c8:	3e bf       	out	0x3e, r19	; 62
    91ca:	ed b7       	in	r30, 0x3d	; 61
    91cc:	fe b7       	in	r31, 0x3e	; 62
    91ce:	31 96       	adiw	r30, 0x01	; 1
    91d0:	02 e5       	ldi	r16, 0x52	; 82
    91d2:	1c e3       	ldi	r17, 0x3C	; 60
    91d4:	ad b7       	in	r26, 0x3d	; 61
    91d6:	be b7       	in	r27, 0x3e	; 62
    91d8:	11 96       	adiw	r26, 0x01	; 1
    91da:	0d 93       	st	X+, r16
    91dc:	1c 93       	st	X, r17
    91de:	12 97       	sbiw	r26, 0x02	; 2
    91e0:	8b e0       	ldi	r24, 0x0B	; 11
    91e2:	92 e2       	ldi	r25, 0x22	; 34
    91e4:	82 83       	std	Z+2, r24	; 0x02
    91e6:	93 83       	std	Z+3, r25	; 0x03
    91e8:	80 91 00 33 	lds	r24, 0x3300
    91ec:	84 83       	std	Z+4, r24	; 0x04
    91ee:	15 82       	std	Z+5, r1	; 0x05
    91f0:	80 91 30 4f 	lds	r24, 0x4F30
    91f4:	86 83       	std	Z+6, r24	; 0x06
    91f6:	17 82       	std	Z+7, r1	; 0x07
    91f8:	80 91 2f 4f 	lds	r24, 0x4F2F
    91fc:	80 87       	std	Z+8, r24	; 0x08
    91fe:	11 86       	std	Z+9, r1	; 0x09
    9200:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
            if(displayAM){
    9204:	80 91 1b 33 	lds	r24, 0x331B
    9208:	ed b7       	in	r30, 0x3d	; 61
    920a:	fe b7       	in	r31, 0x3e	; 62
    920c:	3a 96       	adiw	r30, 0x0a	; 10
    920e:	ed bf       	out	0x3d, r30	; 61
    9210:	fe bf       	out	0x3e, r31	; 62
    9212:	88 23       	and	r24, r24
    9214:	21 f0       	breq	.+8      	; 0x921e <__vector_77+0x798>
                strcat(temp2,am);
    9216:	c8 01       	movw	r24, r16
    9218:	66 e3       	ldi	r22, 0x36	; 54
    921a:	70 e3       	ldi	r23, 0x30	; 48
    921c:	07 c0       	rjmp	.+14     	; 0x922c <__vector_77+0x7a6>
            } else if(displayPM){
    921e:	80 91 1c 33 	lds	r24, 0x331C
    9222:	88 23       	and	r24, r24
    9224:	29 f0       	breq	.+10     	; 0x9230 <__vector_77+0x7aa>
                strcat(temp2,pm);
    9226:	c8 01       	movw	r24, r16
    9228:	6b e3       	ldi	r22, 0x3B	; 59
    922a:	70 e3       	ldi	r23, 0x30	; 48
    922c:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
            }
		    display_putString(temp2,6,0,System5x7);
    9230:	02 e5       	ldi	r16, 0x52	; 82
    9232:	1c e3       	ldi	r17, 0x3C	; 60
    9234:	c8 01       	movw	r24, r16
    9236:	66 e0       	ldi	r22, 0x06	; 6
    9238:	40 e0       	ldi	r20, 0x00	; 0
    923a:	23 e4       	ldi	r18, 0x43	; 67
    923c:	30 e3       	ldi	r19, 0x30	; 48
    923e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>

		    sprintf(temp2, "Wifi %3u",signalStrength);
    9242:	00 d0       	rcall	.+0      	; 0x9244 <__vector_77+0x7be>
    9244:	00 d0       	rcall	.+0      	; 0x9246 <__vector_77+0x7c0>
    9246:	ed b7       	in	r30, 0x3d	; 61
    9248:	fe b7       	in	r31, 0x3e	; 62
    924a:	31 96       	adiw	r30, 0x01	; 1
    924c:	ad b7       	in	r26, 0x3d	; 61
    924e:	be b7       	in	r27, 0x3e	; 62
    9250:	11 96       	adiw	r26, 0x01	; 1
    9252:	0d 93       	st	X+, r16
    9254:	1c 93       	st	X, r17
    9256:	12 97       	sbiw	r26, 0x02	; 2
    9258:	8f e1       	ldi	r24, 0x1F	; 31
    925a:	92 e2       	ldi	r25, 0x22	; 34
    925c:	82 83       	std	Z+2, r24	; 0x02
    925e:	93 83       	std	Z+3, r25	; 0x03
    9260:	80 91 04 33 	lds	r24, 0x3304
    9264:	84 83       	std	Z+4, r24	; 0x04
    9266:	15 82       	std	Z+5, r1	; 0x05
    9268:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    strcat(temp2,"%   more");
    926c:	ed b7       	in	r30, 0x3d	; 61
    926e:	fe b7       	in	r31, 0x3e	; 62
    9270:	36 96       	adiw	r30, 0x06	; 6
    9272:	ed bf       	out	0x3d, r30	; 61
    9274:	fe bf       	out	0x3e, r31	; 62
    9276:	c8 01       	movw	r24, r16
    9278:	68 e2       	ldi	r22, 0x28	; 40
    927a:	72 e2       	ldi	r23, 0x22	; 34
    927c:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		    display_putString(temp2,7,0,System5x7);
    9280:	c8 01       	movw	r24, r16
    9282:	67 e0       	ldi	r22, 0x07	; 7
    9284:	40 e0       	ldi	r20, 0x00	; 0
    9286:	23 e4       	ldi	r18, 0x43	; 67
    9288:	30 e3       	ldi	r19, 0x30	; 48
    928a:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>


		    display_drawLine(56,98,63,98,true);		// down arrow
    928e:	88 e3       	ldi	r24, 0x38	; 56
    9290:	62 e6       	ldi	r22, 0x62	; 98
    9292:	4f e3       	ldi	r20, 0x3F	; 63
    9294:	22 e6       	ldi	r18, 0x62	; 98
    9296:	01 e0       	ldi	r16, 0x01	; 1
    9298:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		    display_drawPixel(62,97,true);
    929c:	8e e3       	ldi	r24, 0x3E	; 62
    929e:	61 e6       	ldi	r22, 0x61	; 97
    92a0:	41 e0       	ldi	r20, 0x01	; 1
    92a2:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(61,96,true);
    92a6:	8d e3       	ldi	r24, 0x3D	; 61
    92a8:	60 e6       	ldi	r22, 0x60	; 96
    92aa:	41 e0       	ldi	r20, 0x01	; 1
    92ac:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(62,99,true);
    92b0:	8e e3       	ldi	r24, 0x3E	; 62
    92b2:	63 e6       	ldi	r22, 0x63	; 99
    92b4:	41 e0       	ldi	r20, 0x01	; 1
    92b6:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(61,100,true);
    92ba:	8d e3       	ldi	r24, 0x3D	; 61
    92bc:	64 e6       	ldi	r22, 0x64	; 100
    92be:	41 e0       	ldi	r20, 0x01	; 1
    92c0:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>

		    display_writeBufferToScreen();
    92c4:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    92c8:	b7 c1       	rjmp	.+878    	; 0x9638 <__vector_77+0xbb2>



	    } else if(currentMode == sensorMode){
    92ca:	a0 90 01 33 	lds	r10, 0x3301
    92ce:	f1 e0       	ldi	r31, 0x01	; 1
    92d0:	af 16       	cp	r10, r31
    92d2:	09 f0       	breq	.+2      	; 0x92d6 <__vector_77+0x850>
    92d4:	b1 c1       	rjmp	.+866    	; 0x9638 <__vector_77+0xbb2>
		    display_clearBuffer();
    92d6:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
		    display_putString("   Sensors  back",0,0,System5x7);
    92da:	81 e3       	ldi	r24, 0x31	; 49
    92dc:	92 e2       	ldi	r25, 0x22	; 34
    92de:	60 e0       	ldi	r22, 0x00	; 0
    92e0:	40 e0       	ldi	r20, 0x00	; 0
    92e2:	23 e4       	ldi	r18, 0x43	; 67
    92e4:	30 e3       	ldi	r19, 0x30	; 48
    92e6:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		    display_drawLine(8, 15, 8,61,true);
    92ea:	88 e0       	ldi	r24, 0x08	; 8
    92ec:	6f e0       	ldi	r22, 0x0F	; 15
    92ee:	48 e0       	ldi	r20, 0x08	; 8
    92f0:	2d e3       	ldi	r18, 0x3D	; 61
    92f2:	01 e0       	ldi	r16, 0x01	; 1
    92f4:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>

		    display_drawLine(1,99,7,99,true);		// up arrow
    92f8:	81 e0       	ldi	r24, 0x01	; 1
    92fa:	63 e6       	ldi	r22, 0x63	; 99
    92fc:	47 e0       	ldi	r20, 0x07	; 7
    92fe:	23 e6       	ldi	r18, 0x63	; 99
    9300:	0e 94 75 2f 	call	0x5eea	; 0x5eea <display_drawLine>
		    display_drawPixel(2,98,true);
    9304:	82 e0       	ldi	r24, 0x02	; 2
    9306:	62 e6       	ldi	r22, 0x62	; 98
    9308:	41 e0       	ldi	r20, 0x01	; 1
    930a:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(3,97,true);
    930e:	83 e0       	ldi	r24, 0x03	; 3
    9310:	61 e6       	ldi	r22, 0x61	; 97
    9312:	41 e0       	ldi	r20, 0x01	; 1
    9314:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(2,100,true);
    9318:	82 e0       	ldi	r24, 0x02	; 2
    931a:	64 e6       	ldi	r22, 0x64	; 100
    931c:	41 e0       	ldi	r20, 0x01	; 1
    931e:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>
		    display_drawPixel(3,101,true);
    9322:	83 e0       	ldi	r24, 0x03	; 3
    9324:	65 e6       	ldi	r22, 0x65	; 101
    9326:	41 e0       	ldi	r20, 0x01	; 1
    9328:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <display_drawPixel>

            sprintf(temp2,"Temperature: %3uC", quickTemperature);
    932c:	00 d0       	rcall	.+0      	; 0x932e <__vector_77+0x8a8>
    932e:	00 d0       	rcall	.+0      	; 0x9330 <__vector_77+0x8aa>
    9330:	ed b7       	in	r30, 0x3d	; 61
    9332:	fe b7       	in	r31, 0x3e	; 62
    9334:	31 96       	adiw	r30, 0x01	; 1
    9336:	02 e5       	ldi	r16, 0x52	; 82
    9338:	1c e3       	ldi	r17, 0x3C	; 60
    933a:	ad b7       	in	r26, 0x3d	; 61
    933c:	be b7       	in	r27, 0x3e	; 62
    933e:	11 96       	adiw	r26, 0x01	; 1
    9340:	0d 93       	st	X+, r16
    9342:	1c 93       	st	X, r17
    9344:	12 97       	sbiw	r26, 0x02	; 2
    9346:	82 e4       	ldi	r24, 0x42	; 66
    9348:	92 e2       	ldi	r25, 0x22	; 34
    934a:	82 83       	std	Z+2, r24	; 0x02
    934c:	93 83       	std	Z+3, r25	; 0x03
    934e:	80 91 f2 32 	lds	r24, 0x32F2
    9352:	84 83       	std	Z+4, r24	; 0x04
    9354:	15 82       	std	Z+5, r1	; 0x05
    9356:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    display_putString(temp2,2,0,System5x7);
    935a:	ed b7       	in	r30, 0x3d	; 61
    935c:	fe b7       	in	r31, 0x3e	; 62
    935e:	36 96       	adiw	r30, 0x06	; 6
    9360:	ed bf       	out	0x3d, r30	; 61
    9362:	fe bf       	out	0x3e, r31	; 62
    9364:	c8 01       	movw	r24, r16
    9366:	62 e0       	ldi	r22, 0x02	; 2
    9368:	40 e0       	ldi	r20, 0x00	; 0
    936a:	23 e4       	ldi	r18, 0x43	; 67
    936c:	30 e3       	ldi	r19, 0x30	; 48
    936e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
            sprintf(temp2,"Humidity:  %3u", quickHumidity);
    9372:	00 d0       	rcall	.+0      	; 0x9374 <__vector_77+0x8ee>
    9374:	00 d0       	rcall	.+0      	; 0x9376 <__vector_77+0x8f0>
    9376:	ed b7       	in	r30, 0x3d	; 61
    9378:	fe b7       	in	r31, 0x3e	; 62
    937a:	31 96       	adiw	r30, 0x01	; 1
    937c:	ad b7       	in	r26, 0x3d	; 61
    937e:	be b7       	in	r27, 0x3e	; 62
    9380:	11 96       	adiw	r26, 0x01	; 1
    9382:	0d 93       	st	X+, r16
    9384:	1c 93       	st	X, r17
    9386:	12 97       	sbiw	r26, 0x02	; 2
    9388:	84 e5       	ldi	r24, 0x54	; 84
    938a:	92 e2       	ldi	r25, 0x22	; 34
    938c:	82 83       	std	Z+2, r24	; 0x02
    938e:	93 83       	std	Z+3, r25	; 0x03
    9390:	80 91 f3 32 	lds	r24, 0x32F3
    9394:	84 83       	std	Z+4, r24	; 0x04
    9396:	15 82       	std	Z+5, r1	; 0x05
    9398:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    strcat(temp2, "%RH");
    939c:	ed b7       	in	r30, 0x3d	; 61
    939e:	fe b7       	in	r31, 0x3e	; 62
    93a0:	36 96       	adiw	r30, 0x06	; 6
    93a2:	ed bf       	out	0x3d, r30	; 61
    93a4:	fe bf       	out	0x3e, r31	; 62
    93a6:	c8 01       	movw	r24, r16
    93a8:	63 e6       	ldi	r22, 0x63	; 99
    93aa:	72 e2       	ldi	r23, 0x22	; 34
    93ac:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		    display_putString(temp2,3,0,System5x7);
    93b0:	c8 01       	movw	r24, r16
    93b2:	63 e0       	ldi	r22, 0x03	; 3
    93b4:	40 e0       	ldi	r20, 0x00	; 0
    93b6:	23 e4       	ldi	r18, 0x43	; 67
    93b8:	30 e3       	ldi	r19, 0x30	; 48
    93ba:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		    sprintf(temp2,"Pressure:  %3ukPa", quickPressure);
    93be:	00 d0       	rcall	.+0      	; 0x93c0 <__vector_77+0x93a>
    93c0:	00 d0       	rcall	.+0      	; 0x93c2 <__vector_77+0x93c>
    93c2:	ed b7       	in	r30, 0x3d	; 61
    93c4:	fe b7       	in	r31, 0x3e	; 62
    93c6:	31 96       	adiw	r30, 0x01	; 1
    93c8:	ad b7       	in	r26, 0x3d	; 61
    93ca:	be b7       	in	r27, 0x3e	; 62
    93cc:	11 96       	adiw	r26, 0x01	; 1
    93ce:	0d 93       	st	X+, r16
    93d0:	1c 93       	st	X, r17
    93d2:	12 97       	sbiw	r26, 0x02	; 2
    93d4:	87 e6       	ldi	r24, 0x67	; 103
    93d6:	92 e2       	ldi	r25, 0x22	; 34
    93d8:	82 83       	std	Z+2, r24	; 0x02
    93da:	93 83       	std	Z+3, r25	; 0x03
    93dc:	80 91 f4 32 	lds	r24, 0x32F4
    93e0:	84 83       	std	Z+4, r24	; 0x04
    93e2:	15 82       	std	Z+5, r1	; 0x05
    93e4:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    display_putString(temp2,4,0,System5x7);
    93e8:	ed b7       	in	r30, 0x3d	; 61
    93ea:	fe b7       	in	r31, 0x3e	; 62
    93ec:	36 96       	adiw	r30, 0x06	; 6
    93ee:	ed bf       	out	0x3d, r30	; 61
    93f0:	fe bf       	out	0x3e, r31	; 62
    93f2:	c8 01       	movw	r24, r16
    93f4:	64 e0       	ldi	r22, 0x04	; 4
    93f6:	40 e0       	ldi	r20, 0x00	; 0
    93f8:	23 e4       	ldi	r18, 0x43	; 67
    93fa:	30 e3       	ldi	r19, 0x30	; 48
    93fc:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
            sprintf(temp2,"Light:      %5u", quickLight);
    9400:	00 d0       	rcall	.+0      	; 0x9402 <__vector_77+0x97c>
    9402:	00 d0       	rcall	.+0      	; 0x9404 <__vector_77+0x97e>
    9404:	ed b7       	in	r30, 0x3d	; 61
    9406:	fe b7       	in	r31, 0x3e	; 62
    9408:	31 96       	adiw	r30, 0x01	; 1
    940a:	ad b7       	in	r26, 0x3d	; 61
    940c:	be b7       	in	r27, 0x3e	; 62
    940e:	11 96       	adiw	r26, 0x01	; 1
    9410:	0d 93       	st	X+, r16
    9412:	1c 93       	st	X, r17
    9414:	12 97       	sbiw	r26, 0x02	; 2
    9416:	89 e7       	ldi	r24, 0x79	; 121
    9418:	92 e2       	ldi	r25, 0x22	; 34
    941a:	82 83       	std	Z+2, r24	; 0x02
    941c:	93 83       	std	Z+3, r25	; 0x03
    941e:	80 91 f5 32 	lds	r24, 0x32F5
    9422:	90 91 f6 32 	lds	r25, 0x32F6
    9426:	84 83       	std	Z+4, r24	; 0x04
    9428:	95 83       	std	Z+5, r25	; 0x05
    942a:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    display_putString(temp2,5,0,System5x7);
    942e:	ed b7       	in	r30, 0x3d	; 61
    9430:	fe b7       	in	r31, 0x3e	; 62
    9432:	36 96       	adiw	r30, 0x06	; 6
    9434:	ed bf       	out	0x3d, r30	; 61
    9436:	fe bf       	out	0x3e, r31	; 62
    9438:	c8 01       	movw	r24, r16
    943a:	65 e0       	ldi	r22, 0x05	; 5
    943c:	40 e0       	ldi	r20, 0x00	; 0
    943e:	23 e4       	ldi	r18, 0x43	; 67
    9440:	30 e3       	ldi	r19, 0x30	; 48
    9442:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
            sprintf(temp2,"Air: %5lu, %5lu", quickSmall, quickLarge);
    9446:	2d b7       	in	r18, 0x3d	; 61
    9448:	3e b7       	in	r19, 0x3e	; 62
    944a:	2c 50       	subi	r18, 0x0C	; 12
    944c:	30 40       	sbci	r19, 0x00	; 0
    944e:	2d bf       	out	0x3d, r18	; 61
    9450:	3e bf       	out	0x3e, r19	; 62
    9452:	ed b7       	in	r30, 0x3d	; 61
    9454:	fe b7       	in	r31, 0x3e	; 62
    9456:	31 96       	adiw	r30, 0x01	; 1
    9458:	ad b7       	in	r26, 0x3d	; 61
    945a:	be b7       	in	r27, 0x3e	; 62
    945c:	11 96       	adiw	r26, 0x01	; 1
    945e:	0d 93       	st	X+, r16
    9460:	1c 93       	st	X, r17
    9462:	12 97       	sbiw	r26, 0x02	; 2
    9464:	89 e8       	ldi	r24, 0x89	; 137
    9466:	92 e2       	ldi	r25, 0x22	; 34
    9468:	82 83       	std	Z+2, r24	; 0x02
    946a:	93 83       	std	Z+3, r25	; 0x03
    946c:	80 91 ca 32 	lds	r24, 0x32CA
    9470:	90 91 cb 32 	lds	r25, 0x32CB
    9474:	a0 91 cc 32 	lds	r26, 0x32CC
    9478:	b0 91 cd 32 	lds	r27, 0x32CD
    947c:	84 83       	std	Z+4, r24	; 0x04
    947e:	95 83       	std	Z+5, r25	; 0x05
    9480:	a6 83       	std	Z+6, r26	; 0x06
    9482:	b7 83       	std	Z+7, r27	; 0x07
    9484:	80 91 ce 32 	lds	r24, 0x32CE
    9488:	90 91 cf 32 	lds	r25, 0x32CF
    948c:	a0 91 d0 32 	lds	r26, 0x32D0
    9490:	b0 91 d1 32 	lds	r27, 0x32D1
    9494:	80 87       	std	Z+8, r24	; 0x08
    9496:	91 87       	std	Z+9, r25	; 0x09
    9498:	a2 87       	std	Z+10, r26	; 0x0a
    949a:	b3 87       	std	Z+11, r27	; 0x0b
    949c:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
		    display_putString(temp2,6,0,System5x7);
    94a0:	ed b7       	in	r30, 0x3d	; 61
    94a2:	fe b7       	in	r31, 0x3e	; 62
    94a4:	3c 96       	adiw	r30, 0x0c	; 12
    94a6:	ed bf       	out	0x3d, r30	; 61
    94a8:	fe bf       	out	0x3e, r31	; 62
    94aa:	c8 01       	movw	r24, r16
    94ac:	66 e0       	ldi	r22, 0x06	; 6
    94ae:	40 e0       	ldi	r20, 0x00	; 0
    94b0:	23 e4       	ldi	r18, 0x43	; 67
    94b2:	30 e3       	ldi	r19, 0x30	; 48
    94b4:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		    display_putString("Sound:           ",7,0,System5x7);
    94b8:	89 e9       	ldi	r24, 0x99	; 153
    94ba:	92 e2       	ldi	r25, 0x22	; 34
    94bc:	67 e0       	ldi	r22, 0x07	; 7
    94be:	40 e0       	ldi	r20, 0x00	; 0
    94c0:	23 e4       	ldi	r18, 0x43	; 67
    94c2:	30 e3       	ldi	r19, 0x30	; 48
    94c4:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		    display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    94c8:	20 91 f7 32 	lds	r18, 0x32F7
    94cc:	26 95       	lsr	r18
    94ce:	89 e3       	ldi	r24, 0x39	; 57
    94d0:	62 e3       	ldi	r22, 0x32	; 50
    94d2:	47 e0       	ldi	r20, 0x07	; 7
    94d4:	01 e0       	ldi	r16, 0x01	; 1
    94d6:	ee 24       	eor	r14, r14
    94d8:	cc 24       	eor	r12, r12
    94da:	c3 94       	inc	r12
    94dc:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <display_drawRectangle>
		    display_writeBufferToScreen();
    94e0:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>

		    if(chargePercent == 100){
    94e4:	80 91 d3 32 	lds	r24, 0x32D3
    94e8:	84 36       	cpi	r24, 0x64	; 100
    94ea:	21 f4       	brne	.+8      	; 0x94f4 <__vector_77+0xa6e>
                chargeComplete = true;
    94ec:	a0 92 d6 32 	sts	0x32D6, r10
			    okToCharge  = false;
    94f0:	10 92 d7 32 	sts	0x32D7, r1
    94f4:	80 91 a8 06 	lds	r24, 0x06A8
    94f8:	81 fd       	sbrc	r24, 1
    94fa:	0a c0       	rjmp	.+20     	; 0x9510 <__vector_77+0xa8a>
    94fc:	91 c0       	rjmp	.+290    	; 0x9620 <__vector_77+0xb9a>
		    }

    		if(SD2_Inserted() && chargeComplete && !recording){
    94fe:	80 91 dd 32 	lds	r24, 0x32DD
    9502:	88 23       	and	r24, r24
    9504:	29 f4       	brne	.+10     	; 0x9510 <__vector_77+0xa8a>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9506:	e0 e2       	ldi	r30, 0x20	; 32
    9508:	f6 e0       	ldi	r31, 0x06	; 6
    950a:	80 e2       	ldi	r24, 0x20	; 32
    950c:	86 83       	std	Z+6, r24	; 0x06
    950e:	39 c0       	rjmp	.+114    	; 0x9582 <__vector_77+0xafc>
    9510:	80 91 a8 06 	lds	r24, 0x06A8
    9514:	81 fd       	sbrc	r24, 1
    9516:	38 c0       	rjmp	.+112    	; 0x9588 <__vector_77+0xb02>
    9518:	89 c0       	rjmp	.+274    	; 0x962c <__vector_77+0xba6>
    			Leds_Clear(ext_Red);
    			Leds_Set(ext_Green);
    		} else if(SD2_Inserted() && !chargeComplete){
    			okToCharge = true;
    951a:	81 e0       	ldi	r24, 0x01	; 1
    951c:	80 93 d7 32 	sts	0x32D7, r24
    			if(!rtcSynced){
    9520:	80 91 07 33 	lds	r24, 0x3307
    9524:	88 23       	and	r24, r24
    9526:	21 f5       	brne	.+72     	; 0x9570 <__vector_77+0xaea>
    				if(useWifiForUploading){
    9528:	80 91 a9 32 	lds	r24, 0x32A9
    952c:	88 23       	and	r24, r24
    952e:	29 f0       	breq	.+10     	; 0x953a <__vector_77+0xab4>
	    			    Debug_SendString("Syncing RTC", true);
    9530:	82 ee       	ldi	r24, 0xE2	; 226
    9532:	91 e2       	ldi	r25, 0x21	; 33
    9534:	61 e0       	ldi	r22, 0x01	; 1
    9536:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
		    		}
			    	if(!demoMode){
    953a:	80 91 a8 32 	lds	r24, 0x32A8
    953e:	88 23       	and	r24, r24
    9540:	a1 f4       	brne	.+40     	; 0x956a <__vector_77+0xae4>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    9542:	e0 ea       	ldi	r30, 0xA0	; 160
    9544:	f4 e0       	ldi	r31, 0x04	; 4
    9546:	88 e0       	ldi	r24, 0x08	; 8
    9548:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    954a:	84 e0       	ldi	r24, 0x04	; 4
    954c:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    954e:	8f e0       	ldi	r24, 0x0F	; 15
    9550:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    9552:	81 e0       	ldi	r24, 0x01	; 1
    9554:	84 83       	std	Z+4, r24	; 0x04
				    	RTC_init();
					    RTC_setUTCSecs(UNIX_time);
    9556:	60 91 d8 32 	lds	r22, 0x32D8
    955a:	70 91 d9 32 	lds	r23, 0x32D9
    955e:	80 91 da 32 	lds	r24, 0x32DA
    9562:	90 91 db 32 	lds	r25, 0x32DB
    9566:	0e 94 db 38 	call	0x71b6	; 0x71b6 <RTC_setUTCSecs>
    				}
	    			rtcSynced = true;
    956a:	81 e0       	ldi	r24, 0x01	; 1
    956c:	80 93 07 33 	sts	0x3307, r24
		    	}
			    if(!recording){
    9570:	80 91 dd 32 	lds	r24, 0x32DD
    9574:	88 23       	and	r24, r24
    9576:	09 f0       	breq	.+2      	; 0x957a <__vector_77+0xaf4>
    9578:	5f c0       	rjmp	.+190    	; 0x9638 <__vector_77+0xbb2>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    957a:	e0 e2       	ldi	r30, 0x20	; 32
    957c:	f6 e0       	ldi	r31, 0x06	; 6
    957e:	80 e2       	ldi	r24, 0x20	; 32
    9580:	85 83       	std	Z+5, r24	; 0x05
				    Leds_Set(ext_Red);
    				Leds_Set(ext_Green);
	    		}

		    }else{
			    chargePercent = 0;
    9582:	80 e1       	ldi	r24, 0x10	; 16
    9584:	85 83       	std	Z+5, r24	; 0x05
    9586:	58 c0       	rjmp	.+176    	; 0x9638 <__vector_77+0xbb2>
    9588:	10 92 d3 32 	sts	0x32D3, r1
    			chargeComplete = false;
    958c:	10 92 d6 32 	sts	0x32D6, r1
	    		rtcSynced = false;
    9590:	10 92 07 33 	sts	0x3307, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    9594:	e0 e2       	ldi	r30, 0x20	; 32
    9596:	f6 e0       	ldi	r31, 0x06	; 6
    9598:	80 e2       	ldi	r24, 0x20	; 32
    959a:	86 83       	std	Z+6, r24	; 0x06

	// controls


        if(currentMode == recordMode && Dpad_CheckButton(Down)){
		    currentMode = sensorMode;
    959c:	80 e1       	ldi	r24, 0x10	; 16
    959e:	86 83       	std	Z+6, r24	; 0x06
    95a0:	4b c0       	rjmp	.+150    	; 0x9638 <__vector_77+0xbb2>
    95a2:	81 e0       	ldi	r24, 0x01	; 1
    95a4:	80 93 01 33 	sts	0x3301, r24
		    display_clearBuffer();
    95a8:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
		    display_writeBufferToScreen();
    95ac:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    95b0:	1e cc       	rjmp	.-1988   	; 0x8dee <__vector_77+0x368>
	    } else if(currentMode == sensorMode && Dpad_CheckButton(Up)){
		    currentMode = recordMode;
    95b2:	10 92 01 33 	sts	0x3301, r1
		    display_clearBuffer();
    95b6:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
		    display_writeBufferToScreen();
    95ba:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    95be:	20 ea       	ldi	r18, 0xA0	; 160
    95c0:	3f e0       	ldi	r19, 0x0F	; 15
    95c2:	40 e7       	ldi	r20, 0x70	; 112
    95c4:	51 e0       	ldi	r21, 0x01	; 1
    95c6:	e3 ca       	rjmp	.-2618   	; 0x8b8e <__vector_77+0x108>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    95c8:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    95cc:	8c 77       	andi	r24, 0x7C	; 124
    95ce:	82 fd       	sbrc	r24, 2
    95d0:	f2 ca       	rjmp	.-2588   	; 0x8bb6 <__vector_77+0x130>
    95d2:	07 cb       	rjmp	.-2546   	; 0x8be2 <__vector_77+0x15c>
                Leds_Set(wifi_Red);
		    }
	    } else if(currentMode == recordMode && !recording && !SD_Inserted()){
		    Leds_Set(sd_Red);
		    Leds_Clear(sd_Green);
	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){
    95d4:	80 91 dd 32 	lds	r24, 0x32DD
    95d8:	88 23       	and	r24, r24
    95da:	09 f0       	breq	.+2      	; 0x95de <__vector_77+0xb58>
    95dc:	7b cb       	rjmp	.-2314   	; 0x8cd4 <__vector_77+0x24e>
    95de:	1f cb       	rjmp	.-2498   	; 0x8c1e <__vector_77+0x198>
		        Leds_Set(sd_Red);

            }


	    } else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){
    95e0:	80 91 dd 32 	lds	r24, 0x32DD
    95e4:	88 23       	and	r24, r24
    95e6:	09 f4       	brne	.+2      	; 0x95ea <__vector_77+0xb64>
    95e8:	02 cc       	rjmp	.-2044   	; 0x8dee <__vector_77+0x368>
    95ea:	7f cb       	rjmp	.-2306   	; 0x8cea <__vector_77+0x264>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    95ec:	81 e0       	ldi	r24, 0x01	; 1
    95ee:	e6 cb       	rjmp	.-2100   	; 0x8dbc <__vector_77+0x336>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    95f0:	e0 e2       	ldi	r30, 0x20	; 32
    95f2:	f6 e0       	ldi	r31, 0x06	; 6
    95f4:	80 e2       	ldi	r24, 0x20	; 32
    95f6:	85 83       	std	Z+5, r24	; 0x05
    95f8:	04 c0       	rjmp	.+8      	; 0x9602 <__vector_77+0xb7c>
    95fa:	e0 e2       	ldi	r30, 0x20	; 32
    95fc:	f6 e0       	ldi	r31, 0x06	; 6
    95fe:	80 e2       	ldi	r24, 0x20	; 32
    9600:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    9602:	80 e1       	ldi	r24, 0x10	; 16
    9604:	85 83       	std	Z+5, r24	; 0x05
    9606:	ea cb       	rjmp	.-2092   	; 0x8ddc <__vector_77+0x356>
			    chargeComplete = true;
			    okToCharge  = false;
		    }


		    if(SD2_Inserted() && chargeComplete){
    9608:	80 91 d6 32 	lds	r24, 0x32D6
    960c:	88 23       	and	r24, r24
    960e:	09 f4       	brne	.+2      	; 0x9612 <__vector_77+0xb8c>
    9610:	f2 cc       	rjmp	.-1564   	; 0x8ff6 <__vector_77+0x570>
    9612:	df cc       	rjmp	.-1602   	; 0x8fd2 <__vector_77+0x54c>
			    display_putString("Ext Charged      ",3,0,System5x7);
			    if(!recording){
				    Leds_Clear(ext_Red);
				    Leds_Set(ext_Green);
			    }
		    } else if(SD2_Inserted() && !chargeComplete){
    9614:	80 91 d6 32 	lds	r24, 0x32D6
    9618:	88 23       	and	r24, r24
    961a:	09 f0       	breq	.+2      	; 0x961e <__vector_77+0xb98>
    961c:	5c cd       	rjmp	.-1352   	; 0x90d6 <__vector_77+0x650>
    961e:	f0 cc       	rjmp	.-1568   	; 0x9000 <__vector_77+0x57a>
		    if(chargePercent == 100){
                chargeComplete = true;
			    okToCharge  = false;
		    }

    		if(SD2_Inserted() && chargeComplete && !recording){
    9620:	80 91 d6 32 	lds	r24, 0x32D6
    9624:	88 23       	and	r24, r24
    9626:	09 f4       	brne	.+2      	; 0x962a <__vector_77+0xba4>
    9628:	73 cf       	rjmp	.-282    	; 0x9510 <__vector_77+0xa8a>
    962a:	69 cf       	rjmp	.-302    	; 0x94fe <__vector_77+0xa78>
    			Leds_Clear(ext_Red);
    			Leds_Set(ext_Green);
    		} else if(SD2_Inserted() && !chargeComplete){
    962c:	80 91 d6 32 	lds	r24, 0x32D6
    9630:	88 23       	and	r24, r24
    9632:	09 f0       	breq	.+2      	; 0x9636 <__vector_77+0xbb0>
    9634:	a9 cf       	rjmp	.-174    	; 0x9588 <__vector_77+0xb02>
    9636:	71 cf       	rjmp	.-286    	; 0x951a <__vector_77+0xa94>
		    	Leds_Clear(ext_Red);
			    Leds_Clear(ext_Green);
	    	}
	    }
    }
}
    9638:	ff 91       	pop	r31
    963a:	ef 91       	pop	r30
    963c:	bf 91       	pop	r27
    963e:	af 91       	pop	r26
    9640:	9f 91       	pop	r25
    9642:	8f 91       	pop	r24
    9644:	7f 91       	pop	r23
    9646:	6f 91       	pop	r22
    9648:	5f 91       	pop	r21
    964a:	4f 91       	pop	r20
    964c:	3f 91       	pop	r19
    964e:	2f 91       	pop	r18
    9650:	1f 91       	pop	r17
    9652:	0f 91       	pop	r16
    9654:	ff 90       	pop	r15
    9656:	ef 90       	pop	r14
    9658:	df 90       	pop	r13
    965a:	cf 90       	pop	r12
    965c:	bf 90       	pop	r11
    965e:	af 90       	pop	r10
    9660:	0f 90       	pop	r0
    9662:	0b be       	out	0x3b, r0	; 59
    9664:	0f 90       	pop	r0
    9666:	0f be       	out	0x3f, r0	; 63
    9668:	0f 90       	pop	r0
    966a:	1f 90       	pop	r1
    966c:	18 95       	reti

0000966e <Debug_TriggerUpload>:
      to--;
    }
    return false;
}

bool Debug_TriggerUpload(uint32_t size, uint16_t timeOut){
    966e:	af 92       	push	r10
    9670:	bf 92       	push	r11
    9672:	cf 92       	push	r12
    9674:	df 92       	push	r13
    9676:	ef 92       	push	r14
    9678:	ff 92       	push	r15
    967a:	0f 93       	push	r16
    967c:	1f 93       	push	r17
    967e:	df 93       	push	r29
    9680:	cf 93       	push	r28
    9682:	cd b7       	in	r28, 0x3d	; 61
    9684:	de b7       	in	r29, 0x3e	; 62
    9686:	64 97       	sbiw	r28, 0x14	; 20
    9688:	cd bf       	out	0x3d, r28	; 61
    968a:	de bf       	out	0x3e, r29	; 62
    968c:	6b 01       	movw	r12, r22
    968e:	7c 01       	movw	r14, r24
    9690:	b4 2e       	mov	r11, r20
    9692:	a5 2e       	mov	r10, r21
   uint16_t to = timeOut;
   char fileSize [20];

   Debug_ClearBuffer();
    9694:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Debug_ClearBuffer>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    9698:	80 91 a1 08 	lds	r24, 0x08A1
    969c:	85 ff       	sbrs	r24, 5
    969e:	fc cf       	rjmp	.-8      	; 0x9698 <Debug_TriggerUpload+0x2a>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    96a0:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    96a4:	85 e5       	ldi	r24, 0x55	; 85
    96a6:	80 93 a0 08 	sts	0x08A0, r24
   char fileSize [20];

   Debug_ClearBuffer();
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
    96aa:	8d b7       	in	r24, 0x3d	; 61
    96ac:	9e b7       	in	r25, 0x3e	; 62
    96ae:	08 97       	sbiw	r24, 0x08	; 8
    96b0:	8d bf       	out	0x3d, r24	; 61
    96b2:	9e bf       	out	0x3e, r25	; 62
    96b4:	ed b7       	in	r30, 0x3d	; 61
    96b6:	fe b7       	in	r31, 0x3e	; 62
    96b8:	31 96       	adiw	r30, 0x01	; 1
    96ba:	8e 01       	movw	r16, r28
    96bc:	0f 5f       	subi	r16, 0xFF	; 255
    96be:	1f 4f       	sbci	r17, 0xFF	; 255
    96c0:	ad b7       	in	r26, 0x3d	; 61
    96c2:	be b7       	in	r27, 0x3e	; 62
    96c4:	11 96       	adiw	r26, 0x01	; 1
    96c6:	0d 93       	st	X+, r16
    96c8:	1c 93       	st	X, r17
    96ca:	12 97       	sbiw	r26, 0x02	; 2
    96cc:	8b ea       	ldi	r24, 0xAB	; 171
    96ce:	92 e2       	ldi	r25, 0x22	; 34
    96d0:	82 83       	std	Z+2, r24	; 0x02
    96d2:	93 83       	std	Z+3, r25	; 0x03
    96d4:	c4 82       	std	Z+4, r12	; 0x04
    96d6:	d5 82       	std	Z+5, r13	; 0x05
    96d8:	e6 82       	std	Z+6, r14	; 0x06
    96da:	f7 82       	std	Z+7, r15	; 0x07
    96dc:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
   Debug_SendString(fileSize,true);
    96e0:	8d b7       	in	r24, 0x3d	; 61
    96e2:	9e b7       	in	r25, 0x3e	; 62
    96e4:	08 96       	adiw	r24, 0x08	; 8
    96e6:	8d bf       	out	0x3d, r24	; 61
    96e8:	9e bf       	out	0x3e, r25	; 62
    96ea:	c8 01       	movw	r24, r16
    96ec:	61 e0       	ldi	r22, 0x01	; 1
    96ee:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    96f2:	2b 2d       	mov	r18, r11
    96f4:	3a 2d       	mov	r19, r10
    96f6:	c9 01       	movw	r24, r18
    96f8:	8c 01       	movw	r16, r24
    96fa:	36 e6       	ldi	r19, 0x66	; 102
    96fc:	e3 2e       	mov	r14, r19
    96fe:	3e e0       	ldi	r19, 0x0E	; 14
    9700:	f3 2e       	mov	r15, r19
    9702:	11 c0       	rjmp	.+34     	; 0x9726 <Debug_TriggerUpload+0xb8>

    while(to > 0){
      if(Debug_CharReadyToRead()){
    9704:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
    9708:	88 23       	and	r24, r24
    970a:	41 f0       	breq	.+16     	; 0x971c <Debug_TriggerUpload+0xae>
         if(Debug_GetByte(true) == 'Y'){
    970c:	81 e0       	ldi	r24, 0x01	; 1
    970e:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    9712:	90 e0       	ldi	r25, 0x00	; 0
    9714:	89 35       	cpi	r24, 0x59	; 89
    9716:	59 f4       	brne	.+22     	; 0x972e <Debug_TriggerUpload+0xc0>
    9718:	91 e0       	ldi	r25, 0x01	; 1
    971a:	09 c0       	rjmp	.+18     	; 0x972e <Debug_TriggerUpload+0xc0>
    971c:	c7 01       	movw	r24, r14
    971e:	01 97       	sbiw	r24, 0x01	; 1
    9720:	f1 f7       	brne	.-4      	; 0x971e <Debug_TriggerUpload+0xb0>
         } else {
           return false;
         }
      }
      _delay_ms(1);
      to--;
    9722:	01 50       	subi	r16, 0x01	; 1
    9724:	10 40       	sbci	r17, 0x00	; 0
   Debug_SendByte('U');

   sprintf(fileSize, "%12lu",size);
   Debug_SendString(fileSize,true);

    while(to > 0){
    9726:	01 15       	cp	r16, r1
    9728:	11 05       	cpc	r17, r1
    972a:	61 f7       	brne	.-40     	; 0x9704 <Debug_TriggerUpload+0x96>
    972c:	90 e0       	ldi	r25, 0x00	; 0
      _delay_ms(1);
      to--;
    }
    return false;

}
    972e:	89 2f       	mov	r24, r25
    9730:	64 96       	adiw	r28, 0x14	; 20
    9732:	cd bf       	out	0x3d, r28	; 61
    9734:	de bf       	out	0x3e, r29	; 62
    9736:	cf 91       	pop	r28
    9738:	df 91       	pop	r29
    973a:	1f 91       	pop	r17
    973c:	0f 91       	pop	r16
    973e:	ff 90       	pop	r15
    9740:	ef 90       	pop	r14
    9742:	df 90       	pop	r13
    9744:	cf 90       	pop	r12
    9746:	bf 90       	pop	r11
    9748:	af 90       	pop	r10
    974a:	08 95       	ret

0000974c <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    974c:	af 92       	push	r10
    974e:	bf 92       	push	r11
    9750:	cf 92       	push	r12
    9752:	df 92       	push	r13
    9754:	ff 92       	push	r15
    9756:	0f 93       	push	r16
    9758:	1f 93       	push	r17
    975a:	df 93       	push	r29
    975c:	cf 93       	push	r28
    975e:	cd b7       	in	r28, 0x3d	; 61
    9760:	de b7       	in	r29, 0x3e	; 62
    9762:	c5 55       	subi	r28, 0x55	; 85
    9764:	d0 40       	sbci	r29, 0x00	; 0
    9766:	cd bf       	out	0x3d, r28	; 61
    9768:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp=0;
	char string [70];
    char timeString[15];

	Wifi_ClearBuffer();
    976a:	0e 94 81 02 	call	0x502	; 0x502 <Wifi_ClearBuffer>
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
    976e:	81 eb       	ldi	r24, 0xB1	; 177
    9770:	92 e2       	ldi	r25, 0x22	; 34
    9772:	6a eb       	ldi	r22, 0xBA	; 186
    9774:	72 e2       	ldi	r23, 0x22	; 34
    9776:	ab 01       	movw	r20, r22
    9778:	24 ef       	ldi	r18, 0xF4	; 244
    977a:	31 e0       	ldi	r19, 0x01	; 1
    977c:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    9780:	88 23       	and	r24, r24
    9782:	09 f4       	brne	.+2      	; 0x9786 <Wifi_GetTime+0x3a>
    9784:	56 c0       	rjmp	.+172    	; 0x9832 <Wifi_GetTime+0xe6>
    9786:	84 ef       	ldi	r24, 0xF4	; 244
    9788:	91 e0       	ldi	r25, 0x01	; 1
    978a:	20 e7       	ldi	r18, 0x70	; 112
    978c:	31 e0       	ldi	r19, 0x01	; 1
    978e:	f9 01       	movw	r30, r18
    9790:	31 97       	sbiw	r30, 0x01	; 1
    9792:	f1 f7       	brne	.-4      	; 0x9790 <Wifi_GetTime+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9794:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9796:	d9 f7       	brne	.-10     	; 0x978e <Wifi_GetTime+0x42>
    9798:	50 e1       	ldi	r21, 0x10	; 16
    979a:	c5 2e       	mov	r12, r21
    979c:	d1 2c       	mov	r13, r1
    979e:	cc 0e       	add	r12, r28
    97a0:	dd 1e       	adc	r13, r29
    97a2:	86 01       	movw	r16, r12


	_delay_ms(50);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 70){
    97a4:	46 e5       	ldi	r20, 0x56	; 86
    97a6:	a4 2e       	mov	r10, r20
    97a8:	b1 2c       	mov	r11, r1
    97aa:	ac 0e       	add	r10, r28
    97ac:	bd 1e       	adc	r11, r29
    97ae:	09 c0       	rjmp	.+18     	; 0x97c2 <Wifi_GetTime+0x76>
    97b0:	0a 15       	cp	r16, r10
    97b2:	1b 05       	cpc	r17, r11
    97b4:	79 f0       	breq	.+30     	; 0x97d4 <Wifi_GetTime+0x88>
			string[tmp] = Wifi_GetByte(false);
    97b6:	80 e0       	ldi	r24, 0x00	; 0
    97b8:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    97bc:	f8 01       	movw	r30, r16
    97be:	81 93       	st	Z+, r24
    97c0:	8f 01       	movw	r16, r30
    97c2:	f0 2e       	mov	r15, r16
    97c4:	fc 18       	sub	r15, r12
	}


	_delay_ms(50);
	
	while(Wifi_CharReadyToRead()){
    97c6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    97ca:	88 23       	and	r24, r24
    97cc:	89 f7       	brne	.-30     	; 0x97b0 <Wifi_GetTime+0x64>
			break;
		}
	}

	
	if(tmp < 4){
    97ce:	f3 e0       	ldi	r31, 0x03	; 3
    97d0:	ff 15       	cp	r31, r15
    97d2:	78 f5       	brcc	.+94     	; 0x9832 <Wifi_GetTime+0xe6>
		return false;
	}
	
	if(strstr(string,"NOT SET") != 0){
    97d4:	8e 01       	movw	r16, r28
    97d6:	00 5f       	subi	r16, 0xF0	; 240
    97d8:	1f 4f       	sbci	r17, 0xFF	; 255
    97da:	c8 01       	movw	r24, r16
    97dc:	60 ec       	ldi	r22, 0xC0	; 192
    97de:	72 e2       	ldi	r23, 0x22	; 34
    97e0:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    97e4:	00 97       	sbiw	r24, 0x00	; 0
    97e6:	31 f0       	breq	.+12     	; 0x97f4 <Wifi_GetTime+0xa8>
	    Debug_SendString("Time is not set",true);
    97e8:	88 ec       	ldi	r24, 0xC8	; 200
    97ea:	92 e2       	ldi	r25, 0x22	; 34
    97ec:	61 e0       	ldi	r22, 0x01	; 1
    97ee:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    97f2:	1f c0       	rjmp	.+62     	; 0x9832 <Wifi_GetTime+0xe6>
		return false;
	}

    memcpy(timeString,(strstr(string,"RTC=")+4),10);
    97f4:	c8 01       	movw	r24, r16
    97f6:	68 ed       	ldi	r22, 0xD8	; 216
    97f8:	72 e2       	ldi	r23, 0x22	; 34
    97fa:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    97fe:	de 01       	movw	r26, r28
    9800:	11 96       	adiw	r26, 0x01	; 1
    9802:	fc 01       	movw	r30, r24
    9804:	34 96       	adiw	r30, 0x04	; 4
    9806:	8a e0       	ldi	r24, 0x0A	; 10
    9808:	01 90       	ld	r0, Z+
    980a:	0d 92       	st	X+, r0
    980c:	81 50       	subi	r24, 0x01	; 1
    980e:	e1 f7       	brne	.-8      	; 0x9808 <Wifi_GetTime+0xbc>
    timeString[10] = 0;
    9810:	1b 86       	std	Y+11, r1	; 0x0b
    time_secs = atol(timeString);
    9812:	ce 01       	movw	r24, r28
    9814:	01 96       	adiw	r24, 0x01	; 1
    9816:	0e 94 03 61 	call	0xc206	; 0xc206 <atol>
    981a:	9b 01       	movw	r18, r22
    981c:	ac 01       	movw	r20, r24
    981e:	20 93 b6 32 	sts	0x32B6, r18
    9822:	30 93 b7 32 	sts	0x32B7, r19
    9826:	40 93 b8 32 	sts	0x32B8, r20
    982a:	50 93 b9 32 	sts	0x32B9, r21
    982e:	81 e0       	ldi	r24, 0x01	; 1
    9830:	01 c0       	rjmp	.+2      	; 0x9834 <Wifi_GetTime+0xe8>
    return true;
    9832:	80 e0       	ldi	r24, 0x00	; 0
}
    9834:	cb 5a       	subi	r28, 0xAB	; 171
    9836:	df 4f       	sbci	r29, 0xFF	; 255
    9838:	cd bf       	out	0x3d, r28	; 61
    983a:	de bf       	out	0x3e, r29	; 62
    983c:	cf 91       	pop	r28
    983e:	df 91       	pop	r29
    9840:	1f 91       	pop	r17
    9842:	0f 91       	pop	r16
    9844:	ff 90       	pop	r15
    9846:	df 90       	pop	r13
    9848:	cf 90       	pop	r12
    984a:	bf 90       	pop	r11
    984c:	af 90       	pop	r10
    984e:	08 95       	ret

00009850 <SD_Open>:
    //f_mount(2, &fso2);
	return tmp;
}


uint8_t SD_Open(char string []){
    9850:	cf 93       	push	r28
    9852:	df 93       	push	r29
    9854:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    9856:	8c e3       	ldi	r24, 0x3C	; 60
    9858:	9c e3       	ldi	r25, 0x3C	; 60
    985a:	be 01       	movw	r22, r28
    985c:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	strupr(currentLogFile);
    9860:	8c e3       	ldi	r24, 0x3C	; 60
    9862:	9c e3       	ldi	r25, 0x3C	; 60
    9864:	0e 94 d5 61 	call	0xc3aa	; 0xc3aa <strupr>
    9868:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    986a:	ac e3       	ldi	r26, 0x3C	; 60
    986c:	bc e3       	ldi	r27, 0x3C	; 60
    986e:	07 c0       	rjmp	.+14     	; 0x987e <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    9870:	fc 01       	movw	r30, r24
    9872:	e4 5c       	subi	r30, 0xC4	; 196
    9874:	f3 4c       	sbci	r31, 0xC3	; 195
    9876:	80 81       	ld	r24, Z
    9878:	31 97       	sbiw	r30, 0x01	; 1
    987a:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    987c:	2f 5f       	subi	r18, 0xFF	; 255
    987e:	fd 01       	movw	r30, r26
    9880:	01 90       	ld	r0, Z+
    9882:	00 20       	and	r0, r0
    9884:	e9 f7       	brne	.-6      	; 0x9880 <SD_Open+0x30>
    9886:	31 97       	sbiw	r30, 0x01	; 1
    9888:	ec 53       	subi	r30, 0x3C	; 60
    988a:	fc 43       	sbci	r31, 0x3C	; 60
    988c:	82 2f       	mov	r24, r18
    988e:	90 e0       	ldi	r25, 0x00	; 0
    9890:	8e 17       	cp	r24, r30
    9892:	9f 07       	cpc	r25, r31
    9894:	68 f3       	brcs	.-38     	; 0x9870 <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    9896:	e5 5c       	subi	r30, 0xC5	; 197
    9898:	f3 4c       	sbci	r31, 0xC3	; 195
    989a:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    989c:	88 e6       	ldi	r24, 0x68	; 104
    989e:	9f e4       	ldi	r25, 0x4F	; 79
    98a0:	be 01       	movw	r22, r28
    98a2:	43 e1       	ldi	r20, 0x13	; 19
    98a4:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <f_open>
}
    98a8:	df 91       	pop	r29
    98aa:	cf 91       	pop	r28
    98ac:	08 95       	ret

000098ae <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    98ae:	0f 93       	push	r16
    98b0:	1f 93       	push	r17
    98b2:	cf 93       	push	r28
    98b4:	df 93       	push	r29

	SD_Open("/config.txt");
    98b6:	8d ed       	ldi	r24, 0xDD	; 221
    98b8:	92 e2       	ldi	r25, 0x22	; 34
    98ba:	0e 94 28 4c 	call	0x9850	; 0x9850 <SD_Open>
               break;
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
    98be:	ca e6       	ldi	r28, 0x6A	; 106
    98c0:	dc e5       	ldi	r29, 0x5C	; 92
	      strtok(temp,"=");
	      strcpy(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
    98c2:	0e e1       	ldi	r16, 0x1E	; 30
    98c4:	1a e4       	ldi	r17, 0x4A	; 74
void Read_config_file(void){

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    98c6:	80 eb       	ldi	r24, 0xB0	; 176
    98c8:	99 e4       	ldi	r25, 0x49	; 73
    98ca:	62 e3       	ldi	r22, 0x32	; 50
    98cc:	70 e0       	ldi	r23, 0x00	; 0
    98ce:	48 e6       	ldi	r20, 0x68	; 104
    98d0:	5f e4       	ldi	r21, 0x4F	; 79
    98d2:	0e 94 c4 2a 	call	0x5588	; 0x5588 <f_gets>
	  if(temp[0] != 0){
    98d6:	80 91 b0 49 	lds	r24, 0x49B0
    98da:	88 23       	and	r24, r24
    98dc:	09 f4       	brne	.+2      	; 0x98e0 <Read_config_file+0x32>
    98de:	b0 c1       	rjmp	.+864    	; 0x9c40 <Read_config_file+0x392>
	    if(strstr(temp,"ssid") != 0){
    98e0:	80 eb       	ldi	r24, 0xB0	; 176
    98e2:	99 e4       	ldi	r25, 0x49	; 73
    98e4:	69 ee       	ldi	r22, 0xE9	; 233
    98e6:	72 e2       	ldi	r23, 0x22	; 34
    98e8:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    98ec:	00 97       	sbiw	r24, 0x00	; 0
    98ee:	a9 f0       	breq	.+42     	; 0x991a <Read_config_file+0x6c>
	      strtok(temp,"=");
    98f0:	80 eb       	ldi	r24, 0xB0	; 176
    98f2:	99 e4       	ldi	r25, 0x49	; 73
    98f4:	6e ee       	ldi	r22, 0xEE	; 238
    98f6:	72 e2       	ldi	r23, 0x22	; 34
    98f8:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(ssid,strtok(NULL,"="));
    98fc:	80 e0       	ldi	r24, 0x00	; 0
    98fe:	90 e0       	ldi	r25, 0x00	; 0
    9900:	6e ee       	ldi	r22, 0xEE	; 238
    9902:	72 e2       	ldi	r23, 0x22	; 34
    9904:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9908:	bc 01       	movw	r22, r24
    990a:	83 eb       	ldi	r24, 0xB3	; 179
    990c:	97 e3       	ldi	r25, 0x37	; 55
    990e:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	      ssidRead = true;
    9912:	81 e0       	ldi	r24, 0x01	; 1
    9914:	80 93 fd 32 	sts	0x32FD, r24
    9918:	d6 cf       	rjmp	.-84     	; 0x98c6 <Read_config_file+0x18>
	    } else if(strstr(temp,"phrase") != 0){
    991a:	80 eb       	ldi	r24, 0xB0	; 176
    991c:	99 e4       	ldi	r25, 0x49	; 73
    991e:	60 ef       	ldi	r22, 0xF0	; 240
    9920:	72 e2       	ldi	r23, 0x22	; 34
    9922:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9926:	00 97       	sbiw	r24, 0x00	; 0
    9928:	a9 f0       	breq	.+42     	; 0x9954 <Read_config_file+0xa6>
	      strtok(temp,"=");
    992a:	80 eb       	ldi	r24, 0xB0	; 176
    992c:	99 e4       	ldi	r25, 0x49	; 73
    992e:	6e ee       	ldi	r22, 0xEE	; 238
    9930:	72 e2       	ldi	r23, 0x22	; 34
    9932:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(phrase,strtok(NULL,"="));
    9936:	80 e0       	ldi	r24, 0x00	; 0
    9938:	90 e0       	ldi	r25, 0x00	; 0
    993a:	6e ee       	ldi	r22, 0xEE	; 238
    993c:	72 e2       	ldi	r23, 0x22	; 34
    993e:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9942:	bc 01       	movw	r22, r24
    9944:	8b ef       	ldi	r24, 0xFB	; 251
    9946:	9a e4       	ldi	r25, 0x4A	; 74
    9948:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	      phraseRead = true;
    994c:	81 e0       	ldi	r24, 0x01	; 1
    994e:	80 93 fb 32 	sts	0x32FB, r24
    9952:	b9 cf       	rjmp	.-142    	; 0x98c6 <Read_config_file+0x18>
	    } else if(strstr(temp,"key") != 0){
    9954:	80 eb       	ldi	r24, 0xB0	; 176
    9956:	99 e4       	ldi	r25, 0x49	; 73
    9958:	67 ef       	ldi	r22, 0xF7	; 247
    995a:	72 e2       	ldi	r23, 0x22	; 34
    995c:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9960:	00 97       	sbiw	r24, 0x00	; 0
    9962:	a9 f0       	breq	.+42     	; 0x998e <Read_config_file+0xe0>
	      strtok(temp,"=");
    9964:	80 eb       	ldi	r24, 0xB0	; 176
    9966:	99 e4       	ldi	r25, 0x49	; 73
    9968:	6e ee       	ldi	r22, 0xEE	; 238
    996a:	72 e2       	ldi	r23, 0x22	; 34
    996c:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(key,strtok(NULL,"="));
    9970:	80 e0       	ldi	r24, 0x00	; 0
    9972:	90 e0       	ldi	r25, 0x00	; 0
    9974:	6e ee       	ldi	r22, 0xEE	; 238
    9976:	72 e2       	ldi	r23, 0x22	; 34
    9978:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    997c:	bc 01       	movw	r22, r24
    997e:	86 e3       	ldi	r24, 0x36	; 54
    9980:	9f e4       	ldi	r25, 0x4F	; 79
    9982:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	      keyRead = true;
    9986:	81 e0       	ldi	r24, 0x01	; 1
    9988:	80 93 fc 32 	sts	0x32FC, r24
    998c:	9c cf       	rjmp	.-200    	; 0x98c6 <Read_config_file+0x18>
	    } else if(strstr(temp,"port") != 0){
    998e:	80 eb       	ldi	r24, 0xB0	; 176
    9990:	99 e4       	ldi	r25, 0x49	; 73
    9992:	6b ef       	ldi	r22, 0xFB	; 251
    9994:	72 e2       	ldi	r23, 0x22	; 34
    9996:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    999a:	00 97       	sbiw	r24, 0x00	; 0
    999c:	81 f0       	breq	.+32     	; 0x99be <Read_config_file+0x110>
	      strtok(temp,"=");
    999e:	80 eb       	ldi	r24, 0xB0	; 176
    99a0:	99 e4       	ldi	r25, 0x49	; 73
    99a2:	6e ee       	ldi	r22, 0xEE	; 238
    99a4:	72 e2       	ldi	r23, 0x22	; 34
    99a6:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(port,strtok(NULL,"="));
    99aa:	80 e0       	ldi	r24, 0x00	; 0
    99ac:	90 e0       	ldi	r25, 0x00	; 0
    99ae:	6e ee       	ldi	r22, 0xEE	; 238
    99b0:	72 e2       	ldi	r23, 0x22	; 34
    99b2:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    99b6:	bc 01       	movw	r22, r24
    99b8:	88 e3       	ldi	r24, 0x38	; 56
    99ba:	9c e5       	ldi	r25, 0x5C	; 92
    99bc:	94 c0       	rjmp	.+296    	; 0x9ae6 <Read_config_file+0x238>
	    } else if(strstr(temp,"auth") != 0){
    99be:	80 eb       	ldi	r24, 0xB0	; 176
    99c0:	99 e4       	ldi	r25, 0x49	; 73
    99c2:	60 e0       	ldi	r22, 0x00	; 0
    99c4:	73 e2       	ldi	r23, 0x23	; 35
    99c6:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    99ca:	00 97       	sbiw	r24, 0x00	; 0
    99cc:	a9 f0       	breq	.+42     	; 0x99f8 <Read_config_file+0x14a>
	      strtok(temp,"=");
    99ce:	80 eb       	ldi	r24, 0xB0	; 176
    99d0:	99 e4       	ldi	r25, 0x49	; 73
    99d2:	6e ee       	ldi	r22, 0xEE	; 238
    99d4:	72 e2       	ldi	r23, 0x22	; 34
    99d6:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(auth,strtok(NULL,"="));
    99da:	80 e0       	ldi	r24, 0x00	; 0
    99dc:	90 e0       	ldi	r25, 0x00	; 0
    99de:	6e ee       	ldi	r22, 0xEE	; 238
    99e0:	72 e2       	ldi	r23, 0x22	; 34
    99e2:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    99e6:	bc 01       	movw	r22, r24
    99e8:	88 e9       	ldi	r24, 0x98	; 152
    99ea:	94 e4       	ldi	r25, 0x44	; 68
    99ec:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	      authRead = true;
    99f0:	81 e0       	ldi	r24, 0x01	; 1
    99f2:	80 93 fa 32 	sts	0x32FA, r24
    99f6:	67 cf       	rjmp	.-306    	; 0x98c6 <Read_config_file+0x18>
	     }else if(strstr(temp,"user") != 0){
    99f8:	80 eb       	ldi	r24, 0xB0	; 176
    99fa:	99 e4       	ldi	r25, 0x49	; 73
    99fc:	65 e0       	ldi	r22, 0x05	; 5
    99fe:	73 e2       	ldi	r23, 0x23	; 35
    9a00:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9a04:	00 97       	sbiw	r24, 0x00	; 0
    9a06:	39 f1       	breq	.+78     	; 0x9a56 <Read_config_file+0x1a8>
	      strtok(temp,"=");
    9a08:	80 eb       	ldi	r24, 0xB0	; 176
    9a0a:	99 e4       	ldi	r25, 0x49	; 73
    9a0c:	6e ee       	ldi	r22, 0xEE	; 238
    9a0e:	72 e2       	ldi	r23, 0x22	; 34
    9a10:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(user,strtok(NULL,"="));
    9a14:	80 e0       	ldi	r24, 0x00	; 0
    9a16:	90 e0       	ldi	r25, 0x00	; 0
    9a18:	6e ee       	ldi	r22, 0xEE	; 238
    9a1a:	72 e2       	ldi	r23, 0x22	; 34
    9a1c:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9a20:	bc 01       	movw	r22, r24
    9a22:	8e e1       	ldi	r24, 0x1E	; 30
    9a24:	9a e4       	ldi	r25, 0x4A	; 74
    9a26:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	      for(uint8_t i = 0; i < strlen(user); i++){
    9a2a:	f8 01       	movw	r30, r16
    9a2c:	01 90       	ld	r0, Z+
    9a2e:	00 20       	and	r0, r0
    9a30:	e9 f7       	brne	.-6      	; 0x9a2c <Read_config_file+0x17e>
    9a32:	31 97       	sbiw	r30, 0x01	; 1
    9a34:	ee 51       	subi	r30, 0x1E	; 30
    9a36:	fa 44       	sbci	r31, 0x4A	; 74
    9a38:	20 e0       	ldi	r18, 0x00	; 0
    9a3a:	07 c0       	rjmp	.+14     	; 0x9a4a <Read_config_file+0x19c>
            if(user[i] < ' '){
    9a3c:	dc 01       	movw	r26, r24
    9a3e:	a2 5e       	subi	r26, 0xE2	; 226
    9a40:	b5 4b       	sbci	r27, 0xB5	; 181
    9a42:	8c 91       	ld	r24, X
    9a44:	80 32       	cpi	r24, 0x20	; 32
    9a46:	78 f1       	brcs	.+94     	; 0x9aa6 <Read_config_file+0x1f8>
	      strcpy(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
	      for(uint8_t i = 0; i < strlen(user); i++){
    9a48:	2f 5f       	subi	r18, 0xFF	; 255
    9a4a:	82 2f       	mov	r24, r18
    9a4c:	90 e0       	ldi	r25, 0x00	; 0
    9a4e:	8e 17       	cp	r24, r30
    9a50:	9f 07       	cpc	r25, r31
    9a52:	a0 f3       	brcs	.-24     	; 0x9a3c <Read_config_file+0x18e>
    9a54:	38 cf       	rjmp	.-400    	; 0x98c6 <Read_config_file+0x18>
            if(user[i] < ' '){
               user[i] = 0;
               break;
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
    9a56:	80 eb       	ldi	r24, 0xB0	; 176
    9a58:	99 e4       	ldi	r25, 0x49	; 73
    9a5a:	6a e0       	ldi	r22, 0x0A	; 10
    9a5c:	73 e2       	ldi	r23, 0x23	; 35
    9a5e:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9a62:	00 97       	sbiw	r24, 0x00	; 0
    9a64:	49 f1       	breq	.+82     	; 0x9ab8 <Read_config_file+0x20a>
	      strtok(temp,"=");
    9a66:	80 eb       	ldi	r24, 0xB0	; 176
    9a68:	99 e4       	ldi	r25, 0x49	; 73
    9a6a:	6e ee       	ldi	r22, 0xEE	; 238
    9a6c:	72 e2       	ldi	r23, 0x22	; 34
    9a6e:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(nickname,strtok(NULL,"="));
    9a72:	80 e0       	ldi	r24, 0x00	; 0
    9a74:	90 e0       	ldi	r25, 0x00	; 0
    9a76:	6e ee       	ldi	r22, 0xEE	; 238
    9a78:	72 e2       	ldi	r23, 0x22	; 34
    9a7a:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9a7e:	bc 01       	movw	r22, r24
    9a80:	8a e6       	ldi	r24, 0x6A	; 106
    9a82:	9c e5       	ldi	r25, 0x5C	; 92
    9a84:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
          for(uint8_t i = 0; i < strlen(nickname); i++){
    9a88:	fe 01       	movw	r30, r28
    9a8a:	01 90       	ld	r0, Z+
    9a8c:	00 20       	and	r0, r0
    9a8e:	e9 f7       	brne	.-6      	; 0x9a8a <Read_config_file+0x1dc>
    9a90:	31 97       	sbiw	r30, 0x01	; 1
    9a92:	ea 56       	subi	r30, 0x6A	; 106
    9a94:	fc 45       	sbci	r31, 0x5C	; 92
    9a96:	20 e0       	ldi	r18, 0x00	; 0
    9a98:	09 c0       	rjmp	.+18     	; 0x9aac <Read_config_file+0x1fe>
            if(nickname[i] < ' '){
    9a9a:	dc 01       	movw	r26, r24
    9a9c:	a6 59       	subi	r26, 0x96	; 150
    9a9e:	b3 4a       	sbci	r27, 0xA3	; 163
    9aa0:	8c 91       	ld	r24, X
    9aa2:	80 32       	cpi	r24, 0x20	; 32
    9aa4:	10 f4       	brcc	.+4      	; 0x9aaa <Read_config_file+0x1fc>
               nickname[i] = 0;
    9aa6:	1c 92       	st	X, r1
    9aa8:	0e cf       	rjmp	.-484    	; 0x98c6 <Read_config_file+0x18>
            }
          }
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
          for(uint8_t i = 0; i < strlen(nickname); i++){
    9aaa:	2f 5f       	subi	r18, 0xFF	; 255
    9aac:	82 2f       	mov	r24, r18
    9aae:	90 e0       	ldi	r25, 0x00	; 0
    9ab0:	8e 17       	cp	r24, r30
    9ab2:	9f 07       	cpc	r25, r31
    9ab4:	90 f3       	brcs	.-28     	; 0x9a9a <Read_config_file+0x1ec>
    9ab6:	07 cf       	rjmp	.-498    	; 0x98c6 <Read_config_file+0x18>
               nickname[i] = 0;
               break;
            }
          }

	    } else if(strstr(temp,"server") != 0){
    9ab8:	80 eb       	ldi	r24, 0xB0	; 176
    9aba:	99 e4       	ldi	r25, 0x49	; 73
    9abc:	63 e1       	ldi	r22, 0x13	; 19
    9abe:	73 e2       	ldi	r23, 0x23	; 35
    9ac0:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9ac4:	00 97       	sbiw	r24, 0x00	; 0
    9ac6:	91 f0       	breq	.+36     	; 0x9aec <Read_config_file+0x23e>
	      strtok(temp,"=");
    9ac8:	80 eb       	ldi	r24, 0xB0	; 176
    9aca:	99 e4       	ldi	r25, 0x49	; 73
    9acc:	6e ee       	ldi	r22, 0xEE	; 238
    9ace:	72 e2       	ldi	r23, 0x22	; 34
    9ad0:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(server,strtok(NULL,"="));
    9ad4:	80 e0       	ldi	r24, 0x00	; 0
    9ad6:	90 e0       	ldi	r25, 0x00	; 0
    9ad8:	6e ee       	ldi	r22, 0xEE	; 238
    9ada:	72 e2       	ldi	r23, 0x22	; 34
    9adc:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9ae0:	bc 01       	movw	r22, r24
    9ae2:	82 e3       	ldi	r24, 0x32	; 50
    9ae4:	9a e4       	ldi	r25, 0x4A	; 74
    9ae6:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
    9aea:	ed ce       	rjmp	.-550    	; 0x98c6 <Read_config_file+0x18>
	    } else if(strstr(temp,"daylightTime") != 0){
    9aec:	80 eb       	ldi	r24, 0xB0	; 176
    9aee:	99 e4       	ldi	r25, 0x49	; 73
    9af0:	6a e1       	ldi	r22, 0x1A	; 26
    9af2:	73 e2       	ldi	r23, 0x23	; 35
    9af4:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9af8:	00 97       	sbiw	r24, 0x00	; 0
    9afa:	81 f0       	breq	.+32     	; 0x9b1c <Read_config_file+0x26e>
	      strtok(temp,"=");
    9afc:	80 eb       	ldi	r24, 0xB0	; 176
    9afe:	99 e4       	ldi	r25, 0x49	; 73
    9b00:	6e ee       	ldi	r22, 0xEE	; 238
    9b02:	72 e2       	ldi	r23, 0x22	; 34
    9b04:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
	      strcpy(daylightTime,strtok(NULL,"="));
    9b08:	80 e0       	ldi	r24, 0x00	; 0
    9b0a:	90 e0       	ldi	r25, 0x00	; 0
    9b0c:	6e ee       	ldi	r22, 0xEE	; 238
    9b0e:	72 e2       	ldi	r23, 0x22	; 34
    9b10:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9b14:	bc 01       	movw	r22, r24
    9b16:	89 ec       	ldi	r24, 0xC9	; 201
    9b18:	9a e4       	ldi	r25, 0x4A	; 74
    9b1a:	e5 cf       	rjmp	.-54     	; 0x9ae6 <Read_config_file+0x238>
        } else if(strstr(temp,"useWifi") != 0){
    9b1c:	80 eb       	ldi	r24, 0xB0	; 176
    9b1e:	99 e4       	ldi	r25, 0x49	; 73
    9b20:	67 e2       	ldi	r22, 0x27	; 39
    9b22:	73 e2       	ldi	r23, 0x23	; 35
    9b24:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9b28:	00 97       	sbiw	r24, 0x00	; 0
    9b2a:	81 f0       	breq	.+32     	; 0x9b4c <Read_config_file+0x29e>
            strtok(temp,"=");
    9b2c:	80 eb       	ldi	r24, 0xB0	; 176
    9b2e:	99 e4       	ldi	r25, 0x49	; 73
    9b30:	6e ee       	ldi	r22, 0xEE	; 238
    9b32:	72 e2       	ldi	r23, 0x22	; 34
    9b34:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
            strcpy(uploaderToUse,strtok(NULL,"="));
    9b38:	80 e0       	ldi	r24, 0x00	; 0
    9b3a:	90 e0       	ldi	r25, 0x00	; 0
    9b3c:	6e ee       	ldi	r22, 0xEE	; 238
    9b3e:	72 e2       	ldi	r23, 0x22	; 34
    9b40:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9b44:	bc 01       	movw	r22, r24
    9b46:	84 e1       	ldi	r24, 0x14	; 20
    9b48:	9a e4       	ldi	r25, 0x4A	; 74
    9b4a:	cd cf       	rjmp	.-102    	; 0x9ae6 <Read_config_file+0x238>
        } else if(strstr(temp,"demoMode") != 0){
    9b4c:	80 eb       	ldi	r24, 0xB0	; 176
    9b4e:	99 e4       	ldi	r25, 0x49	; 73
    9b50:	6f e2       	ldi	r22, 0x2F	; 47
    9b52:	73 e2       	ldi	r23, 0x23	; 35
    9b54:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9b58:	00 97       	sbiw	r24, 0x00	; 0
    9b5a:	81 f0       	breq	.+32     	; 0x9b7c <Read_config_file+0x2ce>
            strtok(temp,"=");
    9b5c:	80 eb       	ldi	r24, 0xB0	; 176
    9b5e:	99 e4       	ldi	r25, 0x49	; 73
    9b60:	6e ee       	ldi	r22, 0xEE	; 238
    9b62:	72 e2       	ldi	r23, 0x22	; 34
    9b64:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
            strcpy(demoModeString,strtok(NULL,"="));
    9b68:	80 e0       	ldi	r24, 0x00	; 0
    9b6a:	90 e0       	ldi	r25, 0x00	; 0
    9b6c:	6e ee       	ldi	r22, 0xEE	; 238
    9b6e:	72 e2       	ldi	r23, 0x22	; 34
    9b70:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9b74:	bc 01       	movw	r22, r24
    9b76:	88 e2       	ldi	r24, 0x28	; 40
    9b78:	9a e4       	ldi	r25, 0x4A	; 74
    9b7a:	b5 cf       	rjmp	.-150    	; 0x9ae6 <Read_config_file+0x238>
        } else if(strstr(temp,"recordAudio") != 0){
    9b7c:	80 eb       	ldi	r24, 0xB0	; 176
    9b7e:	99 e4       	ldi	r25, 0x49	; 73
    9b80:	68 e3       	ldi	r22, 0x38	; 56
    9b82:	73 e2       	ldi	r23, 0x23	; 35
    9b84:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9b88:	00 97       	sbiw	r24, 0x00	; 0
    9b8a:	81 f0       	breq	.+32     	; 0x9bac <Read_config_file+0x2fe>
            strtok(temp,"=");
    9b8c:	80 eb       	ldi	r24, 0xB0	; 176
    9b8e:	99 e4       	ldi	r25, 0x49	; 73
    9b90:	6e ee       	ldi	r22, 0xEE	; 238
    9b92:	72 e2       	ldi	r23, 0x22	; 34
    9b94:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
            strcpy(microphoneString,strtok(NULL,"="));
    9b98:	80 e0       	ldi	r24, 0x00	; 0
    9b9a:	90 e0       	ldi	r25, 0x00	; 0
    9b9c:	6e ee       	ldi	r22, 0xEE	; 238
    9b9e:	72 e2       	ldi	r23, 0x22	; 34
    9ba0:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9ba4:	bc 01       	movw	r22, r24
    9ba6:	88 e8       	ldi	r24, 0x88	; 136
    9ba8:	91 e5       	ldi	r25, 0x51	; 81
    9baa:	9d cf       	rjmp	.-198    	; 0x9ae6 <Read_config_file+0x238>
	    } else if(strstr(temp,"zone") != 0){
    9bac:	80 eb       	ldi	r24, 0xB0	; 176
    9bae:	99 e4       	ldi	r25, 0x49	; 73
    9bb0:	64 e4       	ldi	r22, 0x44	; 68
    9bb2:	73 e2       	ldi	r23, 0x23	; 35
    9bb4:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9bb8:	00 97       	sbiw	r24, 0x00	; 0
    9bba:	09 f4       	brne	.+2      	; 0x9bbe <Read_config_file+0x310>
    9bbc:	84 ce       	rjmp	.-760    	; 0x98c6 <Read_config_file+0x18>
	      strtok(temp,"=");
    9bbe:	80 eb       	ldi	r24, 0xB0	; 176
    9bc0:	99 e4       	ldi	r25, 0x49	; 73
    9bc2:	6e ee       	ldi	r22, 0xEE	; 238
    9bc4:	72 e2       	ldi	r23, 0x22	; 34
    9bc6:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
          memmove(zone,strtok(NULL,"="),3);
    9bca:	80 e0       	ldi	r24, 0x00	; 0
    9bcc:	90 e0       	ldi	r25, 0x00	; 0
    9bce:	6e ee       	ldi	r22, 0xEE	; 238
    9bd0:	72 e2       	ldi	r23, 0x22	; 34
    9bd2:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    9bd6:	bc 01       	movw	r22, r24
    9bd8:	8c e2       	ldi	r24, 0x2C	; 44
    9bda:	90 e3       	ldi	r25, 0x30	; 48
    9bdc:	43 e0       	ldi	r20, 0x03	; 3
    9bde:	50 e0       	ldi	r21, 0x00	; 0
    9be0:	0e 94 2f 61 	call	0xc25e	; 0xc25e <memmove>
	      if(strcmp(zone,"EST") == 0){
    9be4:	8c e2       	ldi	r24, 0x2C	; 44
    9be6:	90 e3       	ldi	r25, 0x30	; 48
    9be8:	69 e4       	ldi	r22, 0x49	; 73
    9bea:	73 e2       	ldi	r23, 0x23	; 35
    9bec:	0e 94 84 61 	call	0xc308	; 0xc308 <strcmp>
    9bf0:	00 97       	sbiw	r24, 0x00	; 0
    9bf2:	11 f4       	brne	.+4      	; 0x9bf8 <Read_config_file+0x34a>
	    	  timeZoneShift = 5;
    9bf4:	85 e0       	ldi	r24, 0x05	; 5
    9bf6:	1e c0       	rjmp	.+60     	; 0x9c34 <Read_config_file+0x386>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"CST") == 0){
    9bf8:	8c e2       	ldi	r24, 0x2C	; 44
    9bfa:	90 e3       	ldi	r25, 0x30	; 48
    9bfc:	6d e4       	ldi	r22, 0x4D	; 77
    9bfe:	73 e2       	ldi	r23, 0x23	; 35
    9c00:	0e 94 84 61 	call	0xc308	; 0xc308 <strcmp>
    9c04:	00 97       	sbiw	r24, 0x00	; 0
    9c06:	11 f4       	brne	.+4      	; 0x9c0c <Read_config_file+0x35e>
	    	  timeZoneShift = 6;
    9c08:	86 e0       	ldi	r24, 0x06	; 6
    9c0a:	14 c0       	rjmp	.+40     	; 0x9c34 <Read_config_file+0x386>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"MST") == 0){
    9c0c:	8c e2       	ldi	r24, 0x2C	; 44
    9c0e:	90 e3       	ldi	r25, 0x30	; 48
    9c10:	61 e5       	ldi	r22, 0x51	; 81
    9c12:	73 e2       	ldi	r23, 0x23	; 35
    9c14:	0e 94 84 61 	call	0xc308	; 0xc308 <strcmp>
    9c18:	00 97       	sbiw	r24, 0x00	; 0
    9c1a:	11 f4       	brne	.+4      	; 0x9c20 <Read_config_file+0x372>
	    	  timeZoneShift = 7;
    9c1c:	87 e0       	ldi	r24, 0x07	; 7
    9c1e:	0a c0       	rjmp	.+20     	; 0x9c34 <Read_config_file+0x386>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"PST") == 0){
    9c20:	8c e2       	ldi	r24, 0x2C	; 44
    9c22:	90 e3       	ldi	r25, 0x30	; 48
    9c24:	65 e5       	ldi	r22, 0x55	; 85
    9c26:	73 e2       	ldi	r23, 0x23	; 35
    9c28:	0e 94 84 61 	call	0xc308	; 0xc308 <strcmp>
    9c2c:	00 97       	sbiw	r24, 0x00	; 0
    9c2e:	09 f0       	breq	.+2      	; 0x9c32 <Read_config_file+0x384>
    9c30:	4a ce       	rjmp	.-876    	; 0x98c6 <Read_config_file+0x18>
	    	  timeZoneShift = 8;
    9c32:	88 e0       	ldi	r24, 0x08	; 8
    9c34:	80 93 ff 32 	sts	0x32FF, r24
	    	  zoneChanged = true;
    9c38:	81 e0       	ldi	r24, 0x01	; 1
    9c3a:	80 93 fe 32 	sts	0x32FE, r24
    9c3e:	43 ce       	rjmp	.-890    	; 0x98c6 <Read_config_file+0x18>

	  } else {
	    break;
	  }
	}
    if(server[strlen(server)-1] < 32){
    9c40:	e2 e3       	ldi	r30, 0x32	; 50
    9c42:	fa e4       	ldi	r31, 0x4A	; 74
    9c44:	01 90       	ld	r0, Z+
    9c46:	00 20       	and	r0, r0
    9c48:	e9 f7       	brne	.-6      	; 0x9c44 <Read_config_file+0x396>
    9c4a:	32 97       	sbiw	r30, 0x02	; 2
    9c4c:	80 81       	ld	r24, Z
    9c4e:	80 32       	cpi	r24, 0x20	; 32
    9c50:	08 f4       	brcc	.+2      	; 0x9c54 <Read_config_file+0x3a6>
        server[strlen(server)-1] = 0;
    9c52:	10 82       	st	Z, r1
    }
	strcat(serverOpenCommand,server);
    9c54:	8a ef       	ldi	r24, 0xFA	; 250
    9c56:	9f e2       	ldi	r25, 0x2F	; 47
    9c58:	62 e3       	ldi	r22, 0x32	; 50
    9c5a:	7a e4       	ldi	r23, 0x4A	; 74
    9c5c:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	strcat(serverOpenCommand," ");
    9c60:	8a ef       	ldi	r24, 0xFA	; 250
    9c62:	9f e2       	ldi	r25, 0x2F	; 47
    9c64:	69 e5       	ldi	r22, 0x59	; 89
    9c66:	73 e2       	ldi	r23, 0x23	; 35
    9c68:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	strcat(serverOpenCommand,port);
    9c6c:	8a ef       	ldi	r24, 0xFA	; 250
    9c6e:	9f e2       	ldi	r25, 0x2F	; 47
    9c70:	68 e3       	ldi	r22, 0x38	; 56
    9c72:	7c e5       	ldi	r23, 0x5C	; 92
    9c74:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>

    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    9c78:	89 ec       	ldi	r24, 0xC9	; 201
    9c7a:	9a e4       	ldi	r25, 0x4A	; 74
    9c7c:	6b e5       	ldi	r22, 0x5B	; 91
    9c7e:	73 e2       	ldi	r23, 0x23	; 35
    9c80:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9c84:	00 97       	sbiw	r24, 0x00	; 0
    9c86:	49 f0       	breq	.+18     	; 0x9c9a <Read_config_file+0x3ec>
    9c88:	80 91 fe 32 	lds	r24, 0x32FE
    9c8c:	88 23       	and	r24, r24
    9c8e:	29 f0       	breq	.+10     	; 0x9c9a <Read_config_file+0x3ec>
       timeZoneShift--;
    9c90:	80 91 ff 32 	lds	r24, 0x32FF
    9c94:	81 50       	subi	r24, 0x01	; 1
    9c96:	80 93 ff 32 	sts	0x32FF, r24
    }
    if((strstr(uploaderToUse,"true") != 0)){
    9c9a:	84 e1       	ldi	r24, 0x14	; 20
    9c9c:	9a e4       	ldi	r25, 0x4A	; 74
    9c9e:	6b e5       	ldi	r22, 0x5B	; 91
    9ca0:	73 e2       	ldi	r23, 0x23	; 35
    9ca2:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9ca6:	00 97       	sbiw	r24, 0x00	; 0
    9ca8:	19 f0       	breq	.+6      	; 0x9cb0 <Read_config_file+0x402>
       useWifiForUploading = true;
    9caa:	81 e0       	ldi	r24, 0x01	; 1
    9cac:	80 93 a9 32 	sts	0x32A9, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    9cb0:	88 e2       	ldi	r24, 0x28	; 40
    9cb2:	9a e4       	ldi	r25, 0x4A	; 74
    9cb4:	6b e5       	ldi	r22, 0x5B	; 91
    9cb6:	73 e2       	ldi	r23, 0x23	; 35
    9cb8:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9cbc:	00 97       	sbiw	r24, 0x00	; 0
    9cbe:	19 f0       	breq	.+6      	; 0x9cc6 <Read_config_file+0x418>
       demoMode = true;
    9cc0:	81 e0       	ldi	r24, 0x01	; 1
    9cc2:	80 93 a8 32 	sts	0x32A8, r24
    }
    if((strstr(microphoneString,"true") != 0)){
    9cc6:	88 e8       	ldi	r24, 0x88	; 136
    9cc8:	91 e5       	ldi	r25, 0x51	; 81
    9cca:	6b e5       	ldi	r22, 0x5B	; 91
    9ccc:	73 e2       	ldi	r23, 0x23	; 35
    9cce:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    9cd2:	00 97       	sbiw	r24, 0x00	; 0
    9cd4:	19 f0       	breq	.+6      	; 0x9cdc <Read_config_file+0x42e>
       wantToRecordMicrophone = true;
    9cd6:	81 e0       	ldi	r24, 0x01	; 1
    9cd8:	80 93 f1 32 	sts	0x32F1, r24
    }
}
    9cdc:	df 91       	pop	r29
    9cde:	cf 91       	pop	r28
    9ce0:	1f 91       	pop	r17
    9ce2:	0f 91       	pop	r16
    9ce4:	08 95       	ret

00009ce6 <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    9ce6:	1f 93       	push	r17
	uint8_t resp;

	SD_MakeFileName(time);
    9ce8:	0e 94 2d 45 	call	0x8a5a	; 0x8a5a <SD_MakeFileName>
	resp = SD_Open(fileName);
    9cec:	84 e8       	ldi	r24, 0x84	; 132
    9cee:	94 e4       	ldi	r25, 0x44	; 68
    9cf0:	0e 94 28 4c 	call	0x9850	; 0x9850 <SD_Open>
    9cf4:	18 2f       	mov	r17, r24
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    9cf6:	8f ef       	ldi	r24, 0xFF	; 255
    9cf8:	9f ef       	ldi	r25, 0xFF	; 255
    9cfa:	af ef       	ldi	r26, 0xFF	; 255
    9cfc:	bf ef       	ldi	r27, 0xFF	; 255
    9cfe:	80 93 5e 57 	sts	0x575E, r24
    9d02:	90 93 5f 57 	sts	0x575F, r25
    9d06:	a0 93 60 57 	sts	0x5760, r26
    9d0a:	b0 93 61 57 	sts	0x5761, r27
	uint8_t resp;

	SD_MakeFileName(time);
	resp = SD_Open(fileName);
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    9d0e:	6c e4       	ldi	r22, 0x4C	; 76
    9d10:	74 e7       	ldi	r23, 0x74	; 116
    9d12:	8e ed       	ldi	r24, 0xDE	; 222
    9d14:	90 eb       	ldi	r25, 0xB0	; 176
    9d16:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    9d1a:	6b e3       	ldi	r22, 0x3B	; 59
    9d1c:	72 e0       	ldi	r23, 0x02	; 2
    9d1e:	80 e0       	ldi	r24, 0x00	; 0
    9d20:	90 e0       	ldi	r25, 0x00	; 0
    9d22:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    9d26:	81 e0       	ldi	r24, 0x01	; 1
    9d28:	90 e0       	ldi	r25, 0x00	; 0
    9d2a:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

														// payload
	SD_Write16(0x0100);				// protocol version
    9d2e:	80 e0       	ldi	r24, 0x00	; 0
    9d30:	91 e0       	ldi	r25, 0x01	; 1
    9d32:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>
	SD_Write8(0x02);					// time protocol
    9d36:	82 e0       	ldi	r24, 0x02	; 2
    9d38:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    9d3c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    9d40:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    9d44:	67 e4       	ldi	r22, 0x47	; 71
    9d46:	77 e4       	ldi	r23, 0x47	; 71
    9d48:	88 e0       	ldi	r24, 0x08	; 8
    9d4a:	90 e0       	ldi	r25, 0x00	; 0
    9d4c:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <SD_Write32>
	SD_Write16(0);
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	90 e0       	ldi	r25, 0x00	; 0
    9d54:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <SD_Write16>

	SD_WriteString("device_class");
    9d58:	80 e6       	ldi	r24, 0x60	; 96
    9d5a:	93 e2       	ldi	r25, 0x23	; 35
    9d5c:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    9d60:	89 e0       	ldi	r24, 0x09	; 9
    9d62:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString(DeviceClass);
    9d66:	8d e6       	ldi	r24, 0x6D	; 109
    9d68:	93 e2       	ldi	r25, 0x23	; 35
    9d6a:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    9d6e:	8a e0       	ldi	r24, 0x0A	; 10
    9d70:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
		
	SD_WriteString("device_id");
    9d74:	89 e7       	ldi	r24, 0x79	; 121
    9d76:	93 e2       	ldi	r25, 0x23	; 35
    9d78:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    9d7c:	89 e0       	ldi	r24, 0x09	; 9
    9d7e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString(deviceID);
    9d82:	85 e6       	ldi	r24, 0x65	; 101
    9d84:	9a e4       	ldi	r25, 0x4A	; 74
    9d86:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    9d8a:	8a e0       	ldi	r24, 0x0A	; 10
    9d8c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
		
	SD_WriteString("firmware_version");
    9d90:	83 e8       	ldi	r24, 0x83	; 131
    9d92:	93 e2       	ldi	r25, 0x23	; 35
    9d94:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    9d98:	89 e0       	ldi	r24, 0x09	; 9
    9d9a:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString(FirmwareVersion);
    9d9e:	84 e9       	ldi	r24, 0x94	; 148
    9da0:	93 e2       	ldi	r25, 0x23	; 35
    9da2:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    9da6:	8a e0       	ldi	r24, 0x0A	; 10
    9da8:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
		
	SD_WriteString("hardware_version");
    9dac:	89 e9       	ldi	r24, 0x99	; 153
    9dae:	93 e2       	ldi	r25, 0x23	; 35
    9db0:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    9db4:	89 e0       	ldi	r24, 0x09	; 9
    9db6:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString(HardwareVersion);
    9dba:	8a ea       	ldi	r24, 0xAA	; 170
    9dbc:	93 e2       	ldi	r25, 0x23	; 35
    9dbe:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    9dc2:	8a e0       	ldi	r24, 0x0A	; 10
    9dc4:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	SD_WriteString("channel_specs");
    9dc8:	8c ea       	ldi	r24, 0xAC	; 172
    9dca:	93 e2       	ldi	r25, 0x23	; 35
    9dcc:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x09);
    9dd0:	89 e0       	ldi	r24, 0x09	; 9
    9dd2:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    9dd6:	8a eb       	ldi	r24, 0xBA	; 186
    9dd8:	93 e2       	ldi	r25, 0x23	; 35
    9dda:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    9dde:	8b ee       	ldi	r24, 0xEB	; 235
    9de0:	93 e2       	ldi	r25, 0x23	; 35
    9de2:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    9de6:	84 e1       	ldi	r24, 0x14	; 20
    9de8:	94 e2       	ldi	r25, 0x24	; 36
    9dea:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    9dee:	8d e3       	ldi	r24, 0x3D	; 61
    9df0:	94 e2       	ldi	r25, 0x24	; 36
    9df2:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    9df6:	8a e6       	ldi	r24, 0x6A	; 106
    9df8:	94 e2       	ldi	r25, 0x24	; 36
    9dfa:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    9dfe:	85 e9       	ldi	r24, 0x95	; 149
    9e00:	94 e2       	ldi	r25, 0x24	; 36
    9e02:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    9e06:	81 ec       	ldi	r24, 0xC1	; 193
    9e08:	94 e2       	ldi	r25, 0x24	; 36
    9e0a:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    9e0e:	8e ee       	ldi	r24, 0xEE	; 238
    9e10:	94 e2       	ldi	r25, 0x24	; 36
    9e12:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    9e16:	8f e1       	ldi	r24, 0x1F	; 31
    9e18:	95 e2       	ldi	r25, 0x25	; 37
    9e1a:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    9e1e:	80 e5       	ldi	r24, 0x50	; 80
    9e20:	95 e2       	ldi	r25, 0x25	; 37
    9e22:	0e 94 22 3c 	call	0x7844	; 0x7844 <SD_WriteString>
	SD_Write8(0x0A);
    9e26:	8a e0       	ldi	r24, 0x0A	; 10
    9e28:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>
	
	SD_Write8(0x00);
    9e2c:	80 e0       	ldi	r24, 0x00	; 0
    9e2e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <SD_Write8>

	SD_WriteCRC();			// CRC			
    9e32:	0e 94 11 2c 	call	0x5822	; 0x5822 <SD_WriteCRC>


	f_sync(&Log_File);
    9e36:	88 e6       	ldi	r24, 0x68	; 104
    9e38:	9f e4       	ldi	r25, 0x4F	; 79
    9e3a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>

	return resp;
}
    9e3e:	81 2f       	mov	r24, r17
    9e40:	1f 91       	pop	r17
    9e42:	08 95       	ret

00009e44 <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(TCE1_OVF_vect)
{
    9e44:	1f 92       	push	r1
    9e46:	0f 92       	push	r0
    9e48:	0f b6       	in	r0, 0x3f	; 63
    9e4a:	0f 92       	push	r0
    9e4c:	0b b6       	in	r0, 0x3b	; 59
    9e4e:	0f 92       	push	r0
    9e50:	11 24       	eor	r1, r1
    9e52:	ef 92       	push	r14
    9e54:	ff 92       	push	r15
    9e56:	0f 93       	push	r16
    9e58:	1f 93       	push	r17
    9e5a:	2f 93       	push	r18
    9e5c:	3f 93       	push	r19
    9e5e:	4f 93       	push	r20
    9e60:	5f 93       	push	r21
    9e62:	6f 93       	push	r22
    9e64:	7f 93       	push	r23
    9e66:	8f 93       	push	r24
    9e68:	9f 93       	push	r25
    9e6a:	af 93       	push	r26
    9e6c:	bf 93       	push	r27
    9e6e:	ef 93       	push	r30
    9e70:	ff 93       	push	r31
    9e72:	df 93       	push	r29
    9e74:	cf 93       	push	r28
    9e76:	0f 92       	push	r0
    9e78:	0f 92       	push	r0
    9e7a:	cd b7       	in	r28, 0x3d	; 61
    9e7c:	de b7       	in	r29, 0x3e	; 62

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    9e7e:	80 91 e8 32 	lds	r24, 0x32E8
    9e82:	88 23       	and	r24, r24
    9e84:	71 f0       	breq	.+28     	; 0x9ea2 <__vector_53+0x5e>
    9e86:	80 91 dd 32 	lds	r24, 0x32DD
    9e8a:	88 23       	and	r24, r24
    9e8c:	51 f0       	breq	.+20     	; 0x9ea2 <__vector_53+0x5e>
    9e8e:	80 91 19 33 	lds	r24, 0x3319
    9e92:	88 23       	and	r24, r24
    9e94:	31 f4       	brne	.+12     	; 0x9ea2 <__vector_53+0x5e>
		SD_WriteMicrophoneBuffer(1);
    9e96:	81 e0       	ldi	r24, 0x01	; 1
    9e98:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    9e9c:	10 92 e8 32 	sts	0x32E8, r1
    9ea0:	11 c0       	rjmp	.+34     	; 0x9ec4 <__vector_53+0x80>
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    9ea2:	80 91 e9 32 	lds	r24, 0x32E9
    9ea6:	88 23       	and	r24, r24
    9ea8:	69 f0       	breq	.+26     	; 0x9ec4 <__vector_53+0x80>
    9eaa:	80 91 dd 32 	lds	r24, 0x32DD
    9eae:	88 23       	and	r24, r24
    9eb0:	49 f0       	breq	.+18     	; 0x9ec4 <__vector_53+0x80>
    9eb2:	80 91 19 33 	lds	r24, 0x3319
    9eb6:	88 23       	and	r24, r24
    9eb8:	29 f4       	brne	.+10     	; 0x9ec4 <__vector_53+0x80>
		SD_WriteMicrophoneBuffer(2);
    9eba:	82 e0       	ldi	r24, 0x02	; 2
    9ebc:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    9ec0:	10 92 e9 32 	sts	0x32E9, r1
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    9ec4:	80 91 df 32 	lds	r24, 0x32DF
    9ec8:	88 23       	and	r24, r24
    9eca:	71 f0       	breq	.+28     	; 0x9ee8 <__vector_53+0xa4>
    9ecc:	80 91 dd 32 	lds	r24, 0x32DD
    9ed0:	88 23       	and	r24, r24
    9ed2:	51 f0       	breq	.+20     	; 0x9ee8 <__vector_53+0xa4>
    9ed4:	80 91 19 33 	lds	r24, 0x3319
    9ed8:	88 23       	and	r24, r24
    9eda:	31 f4       	brne	.+12     	; 0x9ee8 <__vector_53+0xa4>
		SD_WriteTemperatureBuffer(1);
    9edc:	81 e0       	ldi	r24, 0x01	; 1
    9ede:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    9ee2:	10 92 df 32 	sts	0x32DF, r1
    9ee6:	11 c0       	rjmp	.+34     	; 0x9f0a <__vector_53+0xc6>
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    9ee8:	80 91 e0 32 	lds	r24, 0x32E0
    9eec:	88 23       	and	r24, r24
    9eee:	69 f0       	breq	.+26     	; 0x9f0a <__vector_53+0xc6>
    9ef0:	80 91 dd 32 	lds	r24, 0x32DD
    9ef4:	88 23       	and	r24, r24
    9ef6:	49 f0       	breq	.+18     	; 0x9f0a <__vector_53+0xc6>
    9ef8:	80 91 19 33 	lds	r24, 0x3319
    9efc:	88 23       	and	r24, r24
    9efe:	29 f4       	brne	.+10     	; 0x9f0a <__vector_53+0xc6>
		SD_WriteTemperatureBuffer(2);
    9f00:	82 e0       	ldi	r24, 0x02	; 2
    9f02:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    9f06:	10 92 e0 32 	sts	0x32E0, r1
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    9f0a:	80 91 e5 32 	lds	r24, 0x32E5
    9f0e:	88 23       	and	r24, r24
    9f10:	71 f0       	breq	.+28     	; 0x9f2e <__vector_53+0xea>
    9f12:	80 91 dd 32 	lds	r24, 0x32DD
    9f16:	88 23       	and	r24, r24
    9f18:	51 f0       	breq	.+20     	; 0x9f2e <__vector_53+0xea>
    9f1a:	80 91 19 33 	lds	r24, 0x3319
    9f1e:	88 23       	and	r24, r24
    9f20:	31 f4       	brne	.+12     	; 0x9f2e <__vector_53+0xea>
		SD_WriteHumidityBuffer(1);
    9f22:	81 e0       	ldi	r24, 0x01	; 1
    9f24:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    9f28:	10 92 e5 32 	sts	0x32E5, r1
    9f2c:	11 c0       	rjmp	.+34     	; 0x9f50 <__vector_53+0x10c>
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    9f2e:	80 91 e6 32 	lds	r24, 0x32E6
    9f32:	88 23       	and	r24, r24
    9f34:	69 f0       	breq	.+26     	; 0x9f50 <__vector_53+0x10c>
    9f36:	80 91 dd 32 	lds	r24, 0x32DD
    9f3a:	88 23       	and	r24, r24
    9f3c:	49 f0       	breq	.+18     	; 0x9f50 <__vector_53+0x10c>
    9f3e:	80 91 19 33 	lds	r24, 0x3319
    9f42:	88 23       	and	r24, r24
    9f44:	29 f4       	brne	.+10     	; 0x9f50 <__vector_53+0x10c>
		SD_WriteHumidityBuffer(2);
    9f46:	82 e0       	ldi	r24, 0x02	; 2
    9f48:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    9f4c:	10 92 e6 32 	sts	0x32E6, r1
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    9f50:	80 91 e2 32 	lds	r24, 0x32E2
    9f54:	88 23       	and	r24, r24
    9f56:	71 f0       	breq	.+28     	; 0x9f74 <__vector_53+0x130>
    9f58:	80 91 dd 32 	lds	r24, 0x32DD
    9f5c:	88 23       	and	r24, r24
    9f5e:	51 f0       	breq	.+20     	; 0x9f74 <__vector_53+0x130>
    9f60:	80 91 19 33 	lds	r24, 0x3319
    9f64:	88 23       	and	r24, r24
    9f66:	31 f4       	brne	.+12     	; 0x9f74 <__vector_53+0x130>
		SD_WritePressureBuffer(1);
    9f68:	81 e0       	ldi	r24, 0x01	; 1
    9f6a:	0e 94 f1 3d 	call	0x7be2	; 0x7be2 <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    9f6e:	10 92 e2 32 	sts	0x32E2, r1
    9f72:	11 c0       	rjmp	.+34     	; 0x9f96 <__vector_53+0x152>
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    9f74:	80 91 e3 32 	lds	r24, 0x32E3
    9f78:	88 23       	and	r24, r24
    9f7a:	69 f0       	breq	.+26     	; 0x9f96 <__vector_53+0x152>
    9f7c:	80 91 dd 32 	lds	r24, 0x32DD
    9f80:	88 23       	and	r24, r24
    9f82:	49 f0       	breq	.+18     	; 0x9f96 <__vector_53+0x152>
    9f84:	80 91 19 33 	lds	r24, 0x3319
    9f88:	88 23       	and	r24, r24
    9f8a:	29 f4       	brne	.+10     	; 0x9f96 <__vector_53+0x152>
		SD_WritePressureBuffer(2);
    9f8c:	82 e0       	ldi	r24, 0x02	; 2
    9f8e:	0e 94 f1 3d 	call	0x7be2	; 0x7be2 <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    9f92:	10 92 e3 32 	sts	0x32E3, r1
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    9f96:	80 91 ec 32 	lds	r24, 0x32EC
    9f9a:	88 23       	and	r24, r24
    9f9c:	71 f0       	breq	.+28     	; 0x9fba <__vector_53+0x176>
    9f9e:	80 91 dd 32 	lds	r24, 0x32DD
    9fa2:	88 23       	and	r24, r24
    9fa4:	51 f0       	breq	.+20     	; 0x9fba <__vector_53+0x176>
    9fa6:	80 91 19 33 	lds	r24, 0x3319
    9faa:	88 23       	and	r24, r24
    9fac:	31 f4       	brne	.+12     	; 0x9fba <__vector_53+0x176>
		SD_WriteLightBuffer(1);
    9fae:	81 e0       	ldi	r24, 0x01	; 1
    9fb0:	0e 94 ed 3c 	call	0x79da	; 0x79da <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    9fb4:	10 92 ec 32 	sts	0x32EC, r1
    9fb8:	11 c0       	rjmp	.+34     	; 0x9fdc <__vector_53+0x198>
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    9fba:	80 91 ed 32 	lds	r24, 0x32ED
    9fbe:	88 23       	and	r24, r24
    9fc0:	69 f0       	breq	.+26     	; 0x9fdc <__vector_53+0x198>
    9fc2:	80 91 dd 32 	lds	r24, 0x32DD
    9fc6:	88 23       	and	r24, r24
    9fc8:	49 f0       	breq	.+18     	; 0x9fdc <__vector_53+0x198>
    9fca:	80 91 19 33 	lds	r24, 0x3319
    9fce:	88 23       	and	r24, r24
    9fd0:	29 f4       	brne	.+10     	; 0x9fdc <__vector_53+0x198>
		SD_WriteLightBuffer(2);
    9fd2:	82 e0       	ldi	r24, 0x02	; 2
    9fd4:	0e 94 ed 3c 	call	0x79da	; 0x79da <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    9fd8:	10 92 ed 32 	sts	0x32ED, r1
	}

	if(okToSendAirQuality && rs232Recording && !restartingFile){
    9fdc:	80 91 c9 32 	lds	r24, 0x32C9
    9fe0:	88 23       	and	r24, r24
    9fe2:	09 f4       	brne	.+2      	; 0x9fe6 <__vector_53+0x1a2>
    9fe4:	66 c0       	rjmp	.+204    	; 0xa0b2 <__vector_53+0x26e>
    9fe6:	80 91 d2 32 	lds	r24, 0x32D2
    9fea:	88 23       	and	r24, r24
    9fec:	09 f4       	brne	.+2      	; 0x9ff0 <__vector_53+0x1ac>
    9fee:	61 c0       	rjmp	.+194    	; 0xa0b2 <__vector_53+0x26e>
    9ff0:	80 91 19 33 	lds	r24, 0x3319
    9ff4:	88 23       	and	r24, r24
    9ff6:	09 f0       	breq	.+2      	; 0x9ffa <__vector_53+0x1b6>
    9ff8:	5c c0       	rjmp	.+184    	; 0xa0b2 <__vector_53+0x26e>
    9ffa:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    9ffc:	20 91 c7 32 	lds	r18, 0x32C7
    a000:	30 91 c8 32 	lds	r19, 0x32C8
    a004:	80 91 c5 32 	lds	r24, 0x32C5
    a008:	90 91 c6 32 	lds	r25, 0x32C6
    a00c:	28 17       	cp	r18, r24
    a00e:	39 07       	cpc	r19, r25
    a010:	09 f0       	breq	.+2      	; 0xa014 <__vector_53+0x1d0>
    a012:	55 c3       	rjmp	.+1706   	; 0xa6be <__vector_53+0x87a>
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
			counter++;
		}
		if(strstr(airQualityString,"Dylos") == NULL){
    a014:	82 ee       	ldi	r24, 0xE2	; 226
    a016:	99 e4       	ldi	r25, 0x49	; 73
    a018:	6c e7       	ldi	r22, 0x7C	; 124
    a01a:	75 e2       	ldi	r23, 0x25	; 37
    a01c:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    a020:	00 97       	sbiw	r24, 0x00	; 0
    a022:	09 f0       	breq	.+2      	; 0xa026 <__vector_53+0x1e2>
    a024:	42 c0       	rjmp	.+132    	; 0xa0aa <__vector_53+0x266>
			airSampleTime = Time_Get32BitTimer();
    a026:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    a02a:	60 93 a0 32 	sts	0x32A0, r22
    a02e:	70 93 a1 32 	sts	0x32A1, r23
    a032:	80 93 a2 32 	sts	0x32A2, r24
    a036:	90 93 a3 32 	sts	0x32A3, r25
			smallCount = atol(strtok(airQualityString,","));
    a03a:	82 ee       	ldi	r24, 0xE2	; 226
    a03c:	99 e4       	ldi	r25, 0x49	; 73
    a03e:	62 e8       	ldi	r22, 0x82	; 130
    a040:	75 e2       	ldi	r23, 0x25	; 37
    a042:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    a046:	0e 94 03 61 	call	0xc206	; 0xc206 <atol>
    a04a:	60 93 ee 3b 	sts	0x3BEE, r22
    a04e:	70 93 ef 3b 	sts	0x3BEF, r23
    a052:	80 93 f0 3b 	sts	0x3BF0, r24
    a056:	90 93 f1 3b 	sts	0x3BF1, r25
			largeCount = atol(strtok(NULL,","));
    a05a:	80 e0       	ldi	r24, 0x00	; 0
    a05c:	90 e0       	ldi	r25, 0x00	; 0
    a05e:	62 e8       	ldi	r22, 0x82	; 130
    a060:	75 e2       	ldi	r23, 0x25	; 37
    a062:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    a066:	0e 94 03 61 	call	0xc206	; 0xc206 <atol>
    a06a:	60 93 34 5c 	sts	0x5C34, r22
    a06e:	70 93 35 5c 	sts	0x5C35, r23
    a072:	80 93 36 5c 	sts	0x5C36, r24
    a076:	90 93 37 5c 	sts	0x5C37, r25

			quickSmall = smallCount;
    a07a:	20 91 ee 3b 	lds	r18, 0x3BEE
    a07e:	30 91 ef 3b 	lds	r19, 0x3BEF
    a082:	40 91 f0 3b 	lds	r20, 0x3BF0
    a086:	50 91 f1 3b 	lds	r21, 0x3BF1
    a08a:	20 93 ca 32 	sts	0x32CA, r18
    a08e:	30 93 cb 32 	sts	0x32CB, r19
    a092:	40 93 cc 32 	sts	0x32CC, r20
    a096:	50 93 cd 32 	sts	0x32CD, r21
			quickLarge = largeCount;
    a09a:	60 93 ce 32 	sts	0x32CE, r22
    a09e:	70 93 cf 32 	sts	0x32CF, r23
    a0a2:	80 93 d0 32 	sts	0x32D0, r24
    a0a6:	90 93 d1 32 	sts	0x32D1, r25
        }
        SD_WriteAirSample();
    a0aa:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <SD_WriteAirSample>
		okToSendAirQuality = false;
    a0ae:	10 92 c9 32 	sts	0x32C9, r1
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    a0b2:	80 91 08 33 	lds	r24, 0x3308
    a0b6:	88 23       	and	r24, r24
    a0b8:	09 f4       	brne	.+2      	; 0xa0bc <__vector_53+0x278>
    a0ba:	69 c0       	rjmp	.+210    	; 0xa18e <__vector_53+0x34a>
    a0bc:	80 91 43 33 	lds	r24, 0x3343
    a0c0:	90 91 44 33 	lds	r25, 0x3344
    a0c4:	a0 91 45 33 	lds	r26, 0x3345
    a0c8:	b0 91 46 33 	lds	r27, 0x3346
    a0cc:	86 5b       	subi	r24, 0xB6	; 182
    a0ce:	93 40       	sbci	r25, 0x03	; 3
    a0d0:	a0 40       	sbci	r26, 0x00	; 0
    a0d2:	b0 40       	sbci	r27, 0x00	; 0
    a0d4:	08 f0       	brcs	.+2      	; 0xa0d8 <__vector_53+0x294>
    a0d6:	5b c0       	rjmp	.+182    	; 0xa18e <__vector_53+0x34a>
		SD_StartLogFile(UNIX_time);								// open file
    a0d8:	60 91 d8 32 	lds	r22, 0x32D8
    a0dc:	70 91 d9 32 	lds	r23, 0x32D9
    a0e0:	80 91 da 32 	lds	r24, 0x32DA
    a0e4:	90 91 db 32 	lds	r25, 0x32DB
    a0e8:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <SD_StartLogFile>
    a0ec:	88 ee       	ldi	r24, 0xE8	; 232
    a0ee:	93 e0       	ldi	r25, 0x03	; 3
    a0f0:	20 e7       	ldi	r18, 0x70	; 112
    a0f2:	31 e0       	ldi	r19, 0x01	; 1
    a0f4:	f9 01       	movw	r30, r18
    a0f6:	31 97       	sbiw	r30, 0x01	; 1
    a0f8:	f1 f7       	brne	.-4      	; 0xa0f6 <__vector_53+0x2b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a0fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0fc:	d9 f7       	brne	.-10     	; 0xa0f4 <__vector_53+0x2b0>
		_delay_ms(100);

        timeToStopRecording = UNIX_time + 900;
    a0fe:	80 91 d8 32 	lds	r24, 0x32D8
    a102:	90 91 d9 32 	lds	r25, 0x32D9
    a106:	a0 91 da 32 	lds	r26, 0x32DA
    a10a:	b0 91 db 32 	lds	r27, 0x32DB
    a10e:	8c 57       	subi	r24, 0x7C	; 124
    a110:	9c 4f       	sbci	r25, 0xFC	; 252
    a112:	af 4f       	sbci	r26, 0xFF	; 255
    a114:	bf 4f       	sbci	r27, 0xFF	; 255
    a116:	80 93 2e 33 	sts	0x332E, r24
    a11a:	90 93 2f 33 	sts	0x332F, r25
    a11e:	a0 93 30 33 	sts	0x3330, r26
    a122:	b0 93 31 33 	sts	0x3331, r27
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a126:	e0 e2       	ldi	r30, 0x20	; 32
    a128:	f6 e0       	ldi	r31, 0x06	; 6
    a12a:	11 e0       	ldi	r17, 0x01	; 1
    a12c:	16 83       	std	Z+6, r17	; 0x06

		Leds_Clear(sd_Green);
		Leds_Clear(wifi_Green);
		timeRecordingStarted = UNIX_time;
    a12e:	80 e4       	ldi	r24, 0x40	; 64
    a130:	86 83       	std	Z+6, r24	; 0x06
    a132:	80 91 d8 32 	lds	r24, 0x32D8
    a136:	90 91 d9 32 	lds	r25, 0x32D9
    a13a:	a0 91 da 32 	lds	r26, 0x32DA
    a13e:	b0 91 db 32 	lds	r27, 0x32DB
    a142:	80 93 a4 32 	sts	0x32A4, r24
    a146:	90 93 a5 32 	sts	0x32A5, r25
    a14a:	a0 93 a6 32 	sts	0x32A6, r26
    a14e:	b0 93 a7 32 	sts	0x32A7, r27
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    a152:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    a156:	20 91 d8 32 	lds	r18, 0x32D8
    a15a:	30 91 d9 32 	lds	r19, 0x32D9
    a15e:	40 91 da 32 	lds	r20, 0x32DA
    a162:	50 91 db 32 	lds	r21, 0x32DB
    a166:	0e 94 75 3a 	call	0x74ea	; 0x74ea <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    a16a:	80 91 c7 32 	lds	r24, 0x32C7
    a16e:	90 91 c8 32 	lds	r25, 0x32C8
    a172:	80 93 c5 32 	sts	0x32C5, r24
    a176:	90 93 c6 32 	sts	0x32C6, r25

		Rs232_ClearBuffer();
		rs232Recording = true;
    a17a:	10 93 d2 32 	sts	0x32D2, r17
		recording = true;
    a17e:	10 93 dd 32 	sts	0x32DD, r17
		okToOpenLogFile = false;
    a182:	10 92 08 33 	sts	0x3308, r1
		directoryOpened = false;
    a186:	10 92 0e 33 	sts	0x330E, r1
		okToReopenDirectory = true;
    a18a:	10 93 0d 33 	sts	0x330D, r17
	}

	if(okToCloseLogFile){
    a18e:	80 91 0a 33 	lds	r24, 0x330A
    a192:	88 23       	and	r24, r24
    a194:	49 f0       	breq	.+18     	; 0xa1a8 <__vector_53+0x364>
		SD_Close();
    a196:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <SD_Close>
		okToCloseLogFile = false;
    a19a:	10 92 0a 33 	sts	0x330A, r1
		directoryOpened = false;
    a19e:	10 92 0e 33 	sts	0x330E, r1
		okToReopenDirectory = true;
    a1a2:	81 e0       	ldi	r24, 0x01	; 1
    a1a4:	80 93 0d 33 	sts	0x330D, r24
	}

	if(okToSendRTCBlock && recording){
    a1a8:	80 91 ef 32 	lds	r24, 0x32EF
    a1ac:	88 23       	and	r24, r24
    a1ae:	91 f0       	breq	.+36     	; 0xa1d4 <__vector_53+0x390>
    a1b0:	80 91 dd 32 	lds	r24, 0x32DD
    a1b4:	88 23       	and	r24, r24
    a1b6:	71 f0       	breq	.+28     	; 0xa1d4 <__vector_53+0x390>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    a1b8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <Time_Get32BitTimer>
    a1bc:	20 91 d8 32 	lds	r18, 0x32D8
    a1c0:	30 91 d9 32 	lds	r19, 0x32D9
    a1c4:	40 91 da 32 	lds	r20, 0x32DA
    a1c8:	50 91 db 32 	lds	r21, 0x32DB
    a1cc:	0e 94 75 3a 	call	0x74ea	; 0x74ea <SD_WriteRTCBlock>
		okToSendRTCBlock = false;
    a1d0:	10 92 ef 32 	sts	0x32EF, r1
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    a1d4:	80 91 0c 33 	lds	r24, 0x330C
    a1d8:	88 23       	and	r24, r24
    a1da:	09 f4       	brne	.+2      	; 0xa1de <__vector_53+0x39a>
    a1dc:	63 c0       	rjmp	.+198    	; 0xa2a4 <__vector_53+0x460>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    a1de:	80 91 a8 06 	lds	r24, 0x06A8
    a1e2:	80 fd       	sbrc	r24, 0
    a1e4:	5f c0       	rjmp	.+190    	; 0xa2a4 <__vector_53+0x460>
    a1e6:	75 c2       	rjmp	.+1258   	; 0xa6d2 <__vector_53+0x88e>
		if(okToReopenDirectory){
    a1e8:	80 91 0d 33 	lds	r24, 0x330D
    a1ec:	88 23       	and	r24, r24
    a1ee:	69 f0       	breq	.+26     	; 0xa20a <__vector_53+0x3c6>
			if(f_opendir(&dir, "/") == FR_OK){
    a1f0:	86 ea       	ldi	r24, 0xA6	; 166
    a1f2:	91 e5       	ldi	r25, 0x51	; 81
    a1f4:	64 e8       	ldi	r22, 0x84	; 132
    a1f6:	75 e2       	ldi	r23, 0x25	; 37
    a1f8:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <f_opendir>
    a1fc:	88 23       	and	r24, r24
    a1fe:	29 f4       	brne	.+10     	; 0xa20a <__vector_53+0x3c6>
				directoryOpened = true;
    a200:	81 e0       	ldi	r24, 0x01	; 1
    a202:	80 93 0e 33 	sts	0x330E, r24
				okToReopenDirectory = false;
    a206:	10 92 0d 33 	sts	0x330D, r1
			}
		}

		if(directoryOpened){
    a20a:	80 91 0e 33 	lds	r24, 0x330E
    a20e:	88 23       	and	r24, r24
    a210:	09 f4       	brne	.+2      	; 0xa214 <__vector_53+0x3d0>
    a212:	48 c0       	rjmp	.+144    	; 0xa2a4 <__vector_53+0x460>
			if((f_readdir(&dir, &fno) == FR_OK)){
    a214:	86 ea       	ldi	r24, 0xA6	; 166
    a216:	91 e5       	ldi	r25, 0x51	; 81
    a218:	6c e6       	ldi	r22, 0x6C	; 108
    a21a:	74 e4       	ldi	r23, 0x44	; 68
    a21c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <f_readdir>
    a220:	88 23       	and	r24, r24
    a222:	09 f0       	breq	.+2      	; 0xa226 <__vector_53+0x3e2>
    a224:	3f c0       	rjmp	.+126    	; 0xa2a4 <__vector_53+0x460>
				if(fno.fname[0] == 0){
    a226:	80 91 75 44 	lds	r24, 0x4475
    a22a:	88 23       	and	r24, r24
    a22c:	31 f4       	brne	.+12     	; 0xa23a <__vector_53+0x3f6>
					directoryOpened = false;
    a22e:	10 92 0e 33 	sts	0x330E, r1
					okToReopenDirectory = true;
    a232:	81 e0       	ldi	r24, 0x01	; 1
    a234:	80 93 0d 33 	sts	0x330D, r24
    a238:	35 c0       	rjmp	.+106    	; 0xa2a4 <__vector_53+0x460>
				} else {
					if(recording){
    a23a:	80 91 dd 32 	lds	r24, 0x32DD
    a23e:	88 23       	and	r24, r24
    a240:	c1 f0       	breq	.+48     	; 0xa272 <__vector_53+0x42e>
						if((strcasecmp(currentLogFile,fno.fname)) > 0){		// file is NOT the current file
    a242:	8c e3       	ldi	r24, 0x3C	; 60
    a244:	9c e3       	ldi	r25, 0x3C	; 60
    a246:	65 e7       	ldi	r22, 0x75	; 117
    a248:	74 e4       	ldi	r23, 0x44	; 68
    a24a:	0e 94 41 61 	call	0xc282	; 0xc282 <strcasecmp>
    a24e:	18 16       	cp	r1, r24
    a250:	19 06       	cpc	r1, r25
    a252:	44 f5       	brge	.+80     	; 0xa2a4 <__vector_53+0x460>
							if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    a254:	85 e7       	ldi	r24, 0x75	; 117
    a256:	94 e4       	ldi	r25, 0x44	; 68
    a258:	66 e8       	ldi	r22, 0x86	; 134
    a25a:	75 e2       	ldi	r23, 0x25	; 37
    a25c:	0e 94 54 61 	call	0xc2a8	; 0xc2a8 <strcasestr>
    a260:	89 2b       	or	r24, r25
    a262:	01 f1       	breq	.+64     	; 0xa2a4 <__vector_53+0x460>
								if(strcasestr(fno.fname,".BTU") == NULL){
    a264:	85 e7       	ldi	r24, 0x75	; 117
    a266:	94 e4       	ldi	r25, 0x44	; 68
    a268:	6a e8       	ldi	r22, 0x8A	; 138
    a26a:	75 e2       	ldi	r23, 0x25	; 37
    a26c:	0e 94 54 61 	call	0xc2a8	; 0xc2a8 <strcasestr>
    a270:	0e c0       	rjmp	.+28     	; 0xa28e <__vector_53+0x44a>
									okToUpload= true;
								}
							}
						}
					} else {
						if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    a272:	85 e7       	ldi	r24, 0x75	; 117
    a274:	94 e4       	ldi	r25, 0x44	; 68
    a276:	66 e8       	ldi	r22, 0x86	; 134
    a278:	75 e2       	ldi	r23, 0x25	; 37
    a27a:	0e 94 54 61 	call	0xc2a8	; 0xc2a8 <strcasestr>
    a27e:	89 2b       	or	r24, r25
    a280:	89 f0       	breq	.+34     	; 0xa2a4 <__vector_53+0x460>
							if(strcasestr(fno.fname,".BTU") == NULL){
    a282:	85 e7       	ldi	r24, 0x75	; 117
    a284:	94 e4       	ldi	r25, 0x44	; 68
    a286:	6a e8       	ldi	r22, 0x8A	; 138
    a288:	75 e2       	ldi	r23, 0x25	; 37
    a28a:	0e 94 54 61 	call	0xc2a8	; 0xc2a8 <strcasestr>
    a28e:	89 2b       	or	r24, r25
    a290:	49 f4       	brne	.+18     	; 0xa2a4 <__vector_53+0x460>
								strcpy(fileToUpload,fno.fname);
    a292:	85 ed       	ldi	r24, 0xD5	; 213
    a294:	9b e3       	ldi	r25, 0x3B	; 59
    a296:	65 e7       	ldi	r22, 0x75	; 117
    a298:	74 e4       	ldi	r23, 0x44	; 68
    a29a:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
								okToUpload = true;
    a29e:	81 e0       	ldi	r24, 0x01	; 1
    a2a0:	80 93 13 33 	sts	0x3313, r24
				}
			}
		}
	}

	if(okToOpenFileToUpload){
    a2a4:	80 91 16 33 	lds	r24, 0x3316
    a2a8:	88 23       	and	r24, r24
    a2aa:	51 f1       	breq	.+84     	; 0xa300 <__vector_53+0x4bc>
	   f_stat(fileToUpload,&fno);
    a2ac:	85 ed       	ldi	r24, 0xD5	; 213
    a2ae:	9b e3       	ldi	r25, 0x3B	; 59
    a2b0:	6c e6       	ldi	r22, 0x6C	; 108
    a2b2:	74 e4       	ldi	r23, 0x44	; 68
    a2b4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <f_stat>
	   uploadFileSize = fno.fsize;
    a2b8:	80 91 6c 44 	lds	r24, 0x446C
    a2bc:	90 91 6d 44 	lds	r25, 0x446D
    a2c0:	a0 91 6e 44 	lds	r26, 0x446E
    a2c4:	b0 91 6f 44 	lds	r27, 0x446F
    a2c8:	80 93 1d 33 	sts	0x331D, r24
    a2cc:	90 93 1e 33 	sts	0x331E, r25
    a2d0:	a0 93 1f 33 	sts	0x331F, r26
    a2d4:	b0 93 20 33 	sts	0x3320, r27
	   f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a2d8:	8c eb       	ldi	r24, 0xBC	; 188
    a2da:	91 e5       	ldi	r25, 0x51	; 81
    a2dc:	65 ed       	ldi	r22, 0xD5	; 213
    a2de:	7b e3       	ldi	r23, 0x3B	; 59
    a2e0:	43 e1       	ldi	r20, 0x13	; 19
    a2e2:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <f_open>
	   f_lseek(&Upload_File, 0);
    a2e6:	8c eb       	ldi	r24, 0xBC	; 188
    a2e8:	91 e5       	ldi	r25, 0x51	; 81
    a2ea:	40 e0       	ldi	r20, 0x00	; 0
    a2ec:	50 e0       	ldi	r21, 0x00	; 0
    a2ee:	60 e0       	ldi	r22, 0x00	; 0
    a2f0:	70 e0       	ldi	r23, 0x00	; 0
    a2f2:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <f_lseek>
	   uploadFileOpened = true;
    a2f6:	81 e0       	ldi	r24, 0x01	; 1
    a2f8:	80 93 40 30 	sts	0x3040, r24
	   okToOpenFileToUpload = false;
    a2fc:	10 92 16 33 	sts	0x3316, r1
	}

    if(okToFillUploadFileBuffer){
    a300:	80 91 17 33 	lds	r24, 0x3317
    a304:	88 23       	and	r24, r24
    a306:	81 f0       	breq	.+32     	; 0xa328 <__vector_53+0x4e4>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    a308:	8c eb       	ldi	r24, 0xBC	; 188
    a30a:	91 e5       	ldi	r25, 0x51	; 81
    a30c:	65 ee       	ldi	r22, 0xE5	; 229
    a30e:	77 e3       	ldi	r23, 0x37	; 55
    a310:	48 ee       	ldi	r20, 0xE8	; 232
    a312:	53 e0       	ldi	r21, 0x03	; 3
    a314:	9e 01       	movw	r18, r28
    a316:	2f 5f       	subi	r18, 0xFF	; 255
    a318:	3f 4f       	sbci	r19, 0xFF	; 255
    a31a:	0e 94 1d 18 	call	0x303a	; 0x303a <f_read>
        okToFillUploadFileBuffer = false;
    a31e:	10 92 17 33 	sts	0x3317, r1
        uploadFileBufferFull = true;
    a322:	81 e0       	ldi	r24, 0x01	; 1
    a324:	80 93 18 33 	sts	0x3318, r24
    }


	if(okToCloseUploadFile){
    a328:	80 91 10 33 	lds	r24, 0x3310
    a32c:	88 23       	and	r24, r24
    a32e:	51 f0       	breq	.+20     	; 0xa344 <__vector_53+0x500>
	    f_sync(&Upload_File);
    a330:	8c eb       	ldi	r24, 0xBC	; 188
    a332:	91 e5       	ldi	r25, 0x51	; 81
    a334:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>
	    f_close(&Upload_File);
    a338:	8c eb       	ldi	r24, 0xBC	; 188
    a33a:	91 e5       	ldi	r25, 0x51	; 81
    a33c:	0e 94 cf 1c 	call	0x399e	; 0x399e <f_close>
		okToCloseUploadFile = false;
    a340:	10 92 10 33 	sts	0x3310, r1
	}

	if(okToRenameUploadFile){
    a344:	80 91 11 33 	lds	r24, 0x3311
    a348:	88 23       	and	r24, r24
    a34a:	c1 f0       	breq	.+48     	; 0xa37c <__vector_53+0x538>
	    strcpy(newFileName, fileToUpload);
    a34c:	8f e4       	ldi	r24, 0x4F	; 79
    a34e:	97 e5       	ldi	r25, 0x57	; 87
    a350:	65 ed       	ldi	r22, 0xD5	; 213
    a352:	7b e3       	ldi	r23, 0x3B	; 59
    a354:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
        strcat(newFileName, "U");
    a358:	8f e4       	ldi	r24, 0x4F	; 79
    a35a:	97 e5       	ldi	r25, 0x57	; 87
    a35c:	6f e8       	ldi	r22, 0x8F	; 143
    a35e:	75 e2       	ldi	r23, 0x25	; 37
    a360:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	    f_rename(fileToUpload,newFileName);
    a364:	85 ed       	ldi	r24, 0xD5	; 213
    a366:	9b e3       	ldi	r25, 0x3B	; 59
    a368:	6f e4       	ldi	r22, 0x4F	; 79
    a36a:	77 e5       	ldi	r23, 0x57	; 87
    a36c:	0e 94 4e 24 	call	0x489c	; 0x489c <f_rename>
	    okToRenameUploadFile = false;
    a370:	10 92 11 33 	sts	0x3311, r1
	    f_sync(&Upload_File);
    a374:	8c eb       	ldi	r24, 0xBC	; 188
    a376:	91 e5       	ldi	r25, 0x51	; 81
    a378:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>
	}




	if(okToWriteUploaderLogFile){
    a37c:	80 91 3a 33 	lds	r24, 0x333A
    a380:	88 23       	and	r24, r24
    a382:	09 f4       	brne	.+2      	; 0xa386 <__vector_53+0x542>
    a384:	e0 c0       	rjmp	.+448    	; 0xa546 <__vector_53+0x702>

        if(useWifiForUploading){
    a386:	80 91 a9 32 	lds	r24, 0x32A9
    a38a:	88 23       	and	r24, r24
    a38c:	29 f0       	breq	.+10     	; 0xa398 <__vector_53+0x554>
            Debug_SendString("Updating uploadLg File",true);
    a38e:	81 e9       	ldi	r24, 0x91	; 145
    a390:	95 e2       	ldi	r25, 0x25	; 37
    a392:	61 e0       	ldi	r22, 0x01	; 1
    a394:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    a398:	88 ea       	ldi	r24, 0xA8	; 168
    a39a:	95 e2       	ldi	r25, 0x25	; 37
    a39c:	62 eb       	ldi	r22, 0xB2	; 178
    a39e:	7a e4       	ldi	r23, 0x4A	; 74
    a3a0:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a3a4:	8c eb       	ldi	r24, 0xBC	; 188
    a3a6:	91 e5       	ldi	r25, 0x51	; 81
    a3a8:	68 ea       	ldi	r22, 0xA8	; 168
    a3aa:	75 e2       	ldi	r23, 0x25	; 37
    a3ac:	43 e1       	ldi	r20, 0x13	; 19
    a3ae:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <f_open>

        if(fno2.fsize > 0){
    a3b2:	40 91 b2 4a 	lds	r20, 0x4AB2
    a3b6:	50 91 b3 4a 	lds	r21, 0x4AB3
    a3ba:	60 91 b4 4a 	lds	r22, 0x4AB4
    a3be:	70 91 b5 4a 	lds	r23, 0x4AB5
    a3c2:	41 15       	cp	r20, r1
    a3c4:	51 05       	cpc	r21, r1
    a3c6:	61 05       	cpc	r22, r1
    a3c8:	71 05       	cpc	r23, r1
    a3ca:	21 f0       	breq	.+8      	; 0xa3d4 <__vector_53+0x590>
           f_lseek(&Upload_File, fno2.fsize);
    a3cc:	8c eb       	ldi	r24, 0xBC	; 188
    a3ce:	91 e5       	ldi	r25, 0x51	; 81
    a3d0:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    a3d4:	86 eb       	ldi	r24, 0xB6	; 182
    a3d6:	95 e2       	ldi	r25, 0x25	; 37
    a3d8:	6c eb       	ldi	r22, 0xBC	; 188
    a3da:	71 e5       	ldi	r23, 0x51	; 81
    a3dc:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    a3e0:	85 ed       	ldi	r24, 0xD5	; 213
    a3e2:	9b e3       	ldi	r25, 0x3B	; 59
    a3e4:	6c eb       	ldi	r22, 0xBC	; 188
    a3e6:	71 e5       	ldi	r23, 0x51	; 81
    a3e8:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(", Size: ",&Upload_File);
    a3ec:	82 ec       	ldi	r24, 0xC2	; 194
    a3ee:	95 e2       	ldi	r25, 0x25	; 37
    a3f0:	6c eb       	ldi	r22, 0xBC	; 188
    a3f2:	71 e5       	ldi	r23, 0x51	; 81
    a3f4:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    a3f8:	60 91 1d 33 	lds	r22, 0x331D
    a3fc:	70 91 1e 33 	lds	r23, 0x331E
    a400:	80 91 1f 33 	lds	r24, 0x331F
    a404:	90 91 20 33 	lds	r25, 0x3320
    a408:	42 e0       	ldi	r20, 0x02	; 2
    a40a:	5c e5       	ldi	r21, 0x5C	; 92
    a40c:	2a e0       	ldi	r18, 0x0A	; 10
    a40e:	30 e0       	ldi	r19, 0x00	; 0
    a410:	0e 94 df 61 	call	0xc3be	; 0xc3be <ltoa>
    a414:	6c eb       	ldi	r22, 0xBC	; 188
    a416:	71 e5       	ldi	r23, 0x51	; 81
    a418:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(" bytes, Response: ",&Upload_File);
    a41c:	8b ec       	ldi	r24, 0xCB	; 203
    a41e:	95 e2       	ldi	r25, 0x25	; 37
    a420:	6c eb       	ldi	r22, 0xBC	; 188
    a422:	71 e5       	ldi	r23, 0x51	; 81
    a424:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(httpResponse,&Upload_File);
    a428:	84 e1       	ldi	r24, 0x14	; 20
    a42a:	94 e5       	ldi	r25, 0x54	; 84
    a42c:	6c eb       	ldi	r22, 0xBC	; 188
    a42e:	71 e5       	ldi	r23, 0x51	; 81
    a430:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(", Successful Records: ",&Upload_File);
    a434:	8e ed       	ldi	r24, 0xDE	; 222
    a436:	95 e2       	ldi	r25, 0x25	; 37
    a438:	6c eb       	ldi	r22, 0xBC	; 188
    a43a:	71 e5       	ldi	r23, 0x51	; 81
    a43c:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(successfulBinaryRecordsString,&Upload_File);
    a440:	81 ef       	ldi	r24, 0xF1	; 241
    a442:	9a e4       	ldi	r25, 0x4A	; 74
    a444:	6c eb       	ldi	r22, 0xBC	; 188
    a446:	71 e5       	ldi	r23, 0x51	; 81
    a448:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(", Failed Records: ",&Upload_File);
    a44c:	85 ef       	ldi	r24, 0xF5	; 245
    a44e:	95 e2       	ldi	r25, 0x25	; 37
    a450:	6c eb       	ldi	r22, 0xBC	; 188
    a452:	71 e5       	ldi	r23, 0x51	; 81
    a454:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(failedBinaryRecordsString,&Upload_File);
    a458:	8c e9       	ldi	r24, 0x9C	; 156
    a45a:	9c e5       	ldi	r25, 0x5C	; 92
    a45c:	6c eb       	ldi	r22, 0xBC	; 188
    a45e:	71 e5       	ldi	r23, 0x51	; 81
    a460:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(", Time to upload: ",&Upload_File);
    a464:	88 e0       	ldi	r24, 0x08	; 8
    a466:	96 e2       	ldi	r25, 0x26	; 38
    a468:	6c eb       	ldi	r22, 0xBC	; 188
    a46a:	71 e5       	ldi	r23, 0x51	; 81
    a46c:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(ltoa(uploadTimeStop - uploadTimeStart,temp3,10),&Upload_File);
    a470:	60 91 4e 3c 	lds	r22, 0x3C4E
    a474:	70 91 4f 3c 	lds	r23, 0x3C4F
    a478:	80 91 50 3c 	lds	r24, 0x3C50
    a47c:	90 91 51 3c 	lds	r25, 0x3C51
    a480:	20 91 f2 3b 	lds	r18, 0x3BF2
    a484:	30 91 f3 3b 	lds	r19, 0x3BF3
    a488:	40 91 f4 3b 	lds	r20, 0x3BF4
    a48c:	50 91 f5 3b 	lds	r21, 0x3BF5
    a490:	62 1b       	sub	r22, r18
    a492:	73 0b       	sbc	r23, r19
    a494:	84 0b       	sbc	r24, r20
    a496:	95 0b       	sbc	r25, r21
    a498:	42 e0       	ldi	r20, 0x02	; 2
    a49a:	5c e5       	ldi	r21, 0x5C	; 92
    a49c:	2a e0       	ldi	r18, 0x0A	; 10
    a49e:	30 e0       	ldi	r19, 0x00	; 0
    a4a0:	0e 94 df 61 	call	0xc3be	; 0xc3be <ltoa>
    a4a4:	6c eb       	ldi	r22, 0xBC	; 188
    a4a6:	71 e5       	ldi	r23, 0x51	; 81
    a4a8:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(" secs, Speed of upload: ",&Upload_File);
    a4ac:	8b e1       	ldi	r24, 0x1B	; 27
    a4ae:	96 e2       	ldi	r25, 0x26	; 38
    a4b0:	6c eb       	ldi	r22, 0xBC	; 188
    a4b2:	71 e5       	ldi	r23, 0x51	; 81
    a4b4:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(ltoa(uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)),temp3,10),&Upload_File);
    a4b8:	60 91 1d 33 	lds	r22, 0x331D
    a4bc:	70 91 1e 33 	lds	r23, 0x331E
    a4c0:	80 91 1f 33 	lds	r24, 0x331F
    a4c4:	90 91 20 33 	lds	r25, 0x3320
    a4c8:	20 91 4e 3c 	lds	r18, 0x3C4E
    a4cc:	30 91 4f 3c 	lds	r19, 0x3C4F
    a4d0:	40 91 50 3c 	lds	r20, 0x3C50
    a4d4:	50 91 51 3c 	lds	r21, 0x3C51
    a4d8:	e0 90 f2 3b 	lds	r14, 0x3BF2
    a4dc:	f0 90 f3 3b 	lds	r15, 0x3BF3
    a4e0:	00 91 f4 3b 	lds	r16, 0x3BF4
    a4e4:	10 91 f5 3b 	lds	r17, 0x3BF5
    a4e8:	2e 19       	sub	r18, r14
    a4ea:	3f 09       	sbc	r19, r15
    a4ec:	40 0b       	sbc	r20, r16
    a4ee:	51 0b       	sbc	r21, r17
    a4f0:	e7 e0       	ldi	r30, 0x07	; 7
    a4f2:	22 0f       	add	r18, r18
    a4f4:	33 1f       	adc	r19, r19
    a4f6:	44 1f       	adc	r20, r20
    a4f8:	55 1f       	adc	r21, r21
    a4fa:	ea 95       	dec	r30
    a4fc:	d1 f7       	brne	.-12     	; 0xa4f2 <__vector_53+0x6ae>
    a4fe:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    a502:	ca 01       	movw	r24, r20
    a504:	b9 01       	movw	r22, r18
    a506:	42 e0       	ldi	r20, 0x02	; 2
    a508:	5c e5       	ldi	r21, 0x5C	; 92
    a50a:	2a e0       	ldi	r18, 0x0A	; 10
    a50c:	30 e0       	ldi	r19, 0x00	; 0
    a50e:	0e 94 df 61 	call	0xc3be	; 0xc3be <ltoa>
    a512:	6c eb       	ldi	r22, 0xBC	; 188
    a514:	71 e5       	ldi	r23, 0x51	; 81
    a516:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>

        f_puts(" kbps",&Upload_File);
    a51a:	84 e3       	ldi	r24, 0x34	; 52
    a51c:	96 e2       	ldi	r25, 0x26	; 38
    a51e:	6c eb       	ldi	r22, 0xBC	; 188
    a520:	71 e5       	ldi	r23, 0x51	; 81
    a522:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_putc(13,&Upload_File);
    a526:	8d e0       	ldi	r24, 0x0D	; 13
    a528:	90 e0       	ldi	r25, 0x00	; 0
    a52a:	6c eb       	ldi	r22, 0xBC	; 188
    a52c:	71 e5       	ldi	r23, 0x51	; 81
    a52e:	0e 94 12 2b 	call	0x5624	; 0x5624 <f_putc>
        f_sync(&Upload_File);
    a532:	8c eb       	ldi	r24, 0xBC	; 188
    a534:	91 e5       	ldi	r25, 0x51	; 81
    a536:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>
	    f_close(&Upload_File);
    a53a:	8c eb       	ldi	r24, 0xBC	; 188
    a53c:	91 e5       	ldi	r25, 0x51	; 81
    a53e:	0e 94 cf 1c 	call	0x399e	; 0x399e <f_close>
	    okToWriteUploaderLogFile = false;
    a542:	10 92 3a 33 	sts	0x333A, r1
	}

	if(uploadFailed){
    a546:	80 91 0f 33 	lds	r24, 0x330F
    a54a:	88 23       	and	r24, r24
    a54c:	09 f4       	brne	.+2      	; 0xa550 <__vector_53+0x70c>
    a54e:	61 c0       	rjmp	.+194    	; 0xa612 <__vector_53+0x7ce>

        if(useWifiForUploading){
    a550:	80 91 a9 32 	lds	r24, 0x32A9
    a554:	88 23       	and	r24, r24
    a556:	29 f0       	breq	.+10     	; 0xa562 <__vector_53+0x71e>
            Debug_SendString("Updating uploadLg File",true);
    a558:	81 e9       	ldi	r24, 0x91	; 145
    a55a:	95 e2       	ldi	r25, 0x25	; 37
    a55c:	61 e0       	ldi	r22, 0x01	; 1
    a55e:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
        }
        f_stat("/uploadLg.txt",&fno2);
    a562:	88 ea       	ldi	r24, 0xA8	; 168
    a564:	95 e2       	ldi	r25, 0x25	; 37
    a566:	62 eb       	ldi	r22, 0xB2	; 178
    a568:	7a e4       	ldi	r23, 0x4A	; 74
    a56a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    a56e:	8c eb       	ldi	r24, 0xBC	; 188
    a570:	91 e5       	ldi	r25, 0x51	; 81
    a572:	68 ea       	ldi	r22, 0xA8	; 168
    a574:	75 e2       	ldi	r23, 0x25	; 37
    a576:	43 e1       	ldi	r20, 0x13	; 19
    a578:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <f_open>
        if(fno2.fsize > 0){
    a57c:	40 91 b2 4a 	lds	r20, 0x4AB2
    a580:	50 91 b3 4a 	lds	r21, 0x4AB3
    a584:	60 91 b4 4a 	lds	r22, 0x4AB4
    a588:	70 91 b5 4a 	lds	r23, 0x4AB5
    a58c:	41 15       	cp	r20, r1
    a58e:	51 05       	cpc	r21, r1
    a590:	61 05       	cpc	r22, r1
    a592:	71 05       	cpc	r23, r1
    a594:	21 f0       	breq	.+8      	; 0xa59e <__vector_53+0x75a>
           f_lseek(&Upload_File, fno2.fsize);
    a596:	8c eb       	ldi	r24, 0xBC	; 188
    a598:	91 e5       	ldi	r25, 0x51	; 81
    a59a:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    a59e:	86 eb       	ldi	r24, 0xB6	; 182
    a5a0:	95 e2       	ldi	r25, 0x25	; 37
    a5a2:	6c eb       	ldi	r22, 0xBC	; 188
    a5a4:	71 e5       	ldi	r23, 0x51	; 81
    a5a6:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    a5aa:	85 ed       	ldi	r24, 0xD5	; 213
    a5ac:	9b e3       	ldi	r25, 0x3B	; 59
    a5ae:	6c eb       	ldi	r22, 0xBC	; 188
    a5b0:	71 e5       	ldi	r23, 0x51	; 81
    a5b2:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(", Size: ",&Upload_File);
    a5b6:	82 ec       	ldi	r24, 0xC2	; 194
    a5b8:	95 e2       	ldi	r25, 0x25	; 37
    a5ba:	6c eb       	ldi	r22, 0xBC	; 188
    a5bc:	71 e5       	ldi	r23, 0x51	; 81
    a5be:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(ltoa(uploadFileSize,temp3,10),&Upload_File);
    a5c2:	60 91 1d 33 	lds	r22, 0x331D
    a5c6:	70 91 1e 33 	lds	r23, 0x331E
    a5ca:	80 91 1f 33 	lds	r24, 0x331F
    a5ce:	90 91 20 33 	lds	r25, 0x3320
    a5d2:	42 e0       	ldi	r20, 0x02	; 2
    a5d4:	5c e5       	ldi	r21, 0x5C	; 92
    a5d6:	2a e0       	ldi	r18, 0x0A	; 10
    a5d8:	30 e0       	ldi	r19, 0x00	; 0
    a5da:	0e 94 df 61 	call	0xc3be	; 0xc3be <ltoa>
    a5de:	6c eb       	ldi	r22, 0xBC	; 188
    a5e0:	71 e5       	ldi	r23, 0x51	; 81
    a5e2:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
        f_puts(" bytes, uploadFailed failed...",&Upload_File);
    a5e6:	8a e3       	ldi	r24, 0x3A	; 58
    a5e8:	96 e2       	ldi	r25, 0x26	; 38
    a5ea:	6c eb       	ldi	r22, 0xBC	; 188
    a5ec:	71 e5       	ldi	r23, 0x51	; 81
    a5ee:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>

        f_putc(13,&Upload_File);
    a5f2:	8d e0       	ldi	r24, 0x0D	; 13
    a5f4:	90 e0       	ldi	r25, 0x00	; 0
    a5f6:	6c eb       	ldi	r22, 0xBC	; 188
    a5f8:	71 e5       	ldi	r23, 0x51	; 81
    a5fa:	0e 94 12 2b 	call	0x5624	; 0x5624 <f_putc>
        f_sync(&Upload_File);
    a5fe:	8c eb       	ldi	r24, 0xBC	; 188
    a600:	91 e5       	ldi	r25, 0x51	; 81
    a602:	0e 94 57 1c 	call	0x38ae	; 0x38ae <f_sync>
	    f_close(&Upload_File);
    a606:	8c eb       	ldi	r24, 0xBC	; 188
    a608:	91 e5       	ldi	r25, 0x51	; 81
    a60a:	0e 94 cf 1c 	call	0x399e	; 0x399e <f_close>
	    uploadFailed = false;
    a60e:	10 92 0f 33 	sts	0x330F, r1
	}

	if(okToGetRemainingSpace){
    a612:	80 91 f0 4a 	lds	r24, 0x4AF0
    a616:	88 23       	and	r24, r24
    a618:	09 f4       	brne	.+2      	; 0xa61c <__vector_53+0x7d8>
    a61a:	46 c0       	rjmp	.+140    	; 0xa6a8 <__vector_53+0x864>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    a61c:	89 e5       	ldi	r24, 0x59	; 89
    a61e:	96 e2       	ldi	r25, 0x26	; 38
    a620:	6b e3       	ldi	r22, 0x3B	; 59
    a622:	73 e3       	ldi	r23, 0x33	; 51
    a624:	42 e8       	ldi	r20, 0x82	; 130
    a626:	54 e4       	ldi	r21, 0x44	; 68
    a628:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <f_getfree>
    a62c:	88 23       	and	r24, r24
    a62e:	41 f0       	breq	.+16     	; 0xa640 <__vector_53+0x7fc>
           spaceRemainingOnDisk = 0;
    a630:	10 92 3b 33 	sts	0x333B, r1
    a634:	10 92 3c 33 	sts	0x333C, r1
    a638:	10 92 3d 33 	sts	0x333D, r1
    a63c:	10 92 3e 33 	sts	0x333E, r1
	    }
	    totalDiskSpace = fs->max_clust;
    a640:	e0 91 82 44 	lds	r30, 0x4482
    a644:	f0 91 83 44 	lds	r31, 0x4483
    a648:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a64a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a64c:	04 8d       	ldd	r16, Z+28	; 0x1c
    a64e:	15 8d       	ldd	r17, Z+29	; 0x1d
    a650:	e0 92 3f 33 	sts	0x333F, r14
    a654:	f0 92 40 33 	sts	0x3340, r15
    a658:	00 93 41 33 	sts	0x3341, r16
    a65c:	10 93 42 33 	sts	0x3342, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
    a660:	80 91 3b 33 	lds	r24, 0x333B
    a664:	90 91 3c 33 	lds	r25, 0x333C
    a668:	a0 91 3d 33 	lds	r26, 0x333D
    a66c:	b0 91 3e 33 	lds	r27, 0x333E
    a670:	a8 01       	movw	r20, r16
    a672:	97 01       	movw	r18, r14
    a674:	28 1b       	sub	r18, r24
    a676:	39 0b       	sbc	r19, r25
    a678:	4a 0b       	sbc	r20, r26
    a67a:	5b 0b       	sbc	r21, r27
    a67c:	ca 01       	movw	r24, r20
    a67e:	b9 01       	movw	r22, r18
    a680:	28 ee       	ldi	r18, 0xE8	; 232
    a682:	33 e0       	ldi	r19, 0x03	; 3
    a684:	40 e0       	ldi	r20, 0x00	; 0
    a686:	50 e0       	ldi	r21, 0x00	; 0
    a688:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
	    percentDiskUsed /= totalDiskSpace;
    a68c:	a8 01       	movw	r20, r16
    a68e:	97 01       	movw	r18, r14
    a690:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    a694:	20 93 43 33 	sts	0x3343, r18
    a698:	30 93 44 33 	sts	0x3344, r19
    a69c:	40 93 45 33 	sts	0x3345, r20
    a6a0:	50 93 46 33 	sts	0x3346, r21

	    okToGetRemainingSpace = false;
    a6a4:	10 92 f0 4a 	sts	0x4AF0, r1
	}

	if(okToEraseFile){
    a6a8:	80 91 12 33 	lds	r24, 0x3312
    a6ac:	88 23       	and	r24, r24
    a6ae:	b9 f0       	breq	.+46     	; 0xa6de <__vector_53+0x89a>
        f_unlink(fileToErase);
    a6b0:	8c ed       	ldi	r24, 0xDC	; 220
    a6b2:	93 e5       	ldi	r25, 0x53	; 83
    a6b4:	0e 94 a9 21 	call	0x4352	; 0x4352 <f_unlink>
	    okToEraseFile = false;
    a6b8:	10 92 12 33 	sts	0x3312, r1
    a6bc:	10 c0       	rjmp	.+32     	; 0xa6de <__vector_53+0x89a>
	}

	if(okToSendAirQuality && rs232Recording && !restartingFile){
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
    a6be:	80 e0       	ldi	r24, 0x00	; 0
    a6c0:	0e 94 bf 03 	call	0x77e	; 0x77e <Rs232_GetByte>
    a6c4:	e1 2f       	mov	r30, r17
    a6c6:	f0 e0       	ldi	r31, 0x00	; 0
    a6c8:	ee 51       	subi	r30, 0x1E	; 30
    a6ca:	f6 4b       	sbci	r31, 0xB6	; 182
    a6cc:	80 83       	st	Z, r24
			counter++;
    a6ce:	1f 5f       	subi	r17, 0xFF	; 255
    a6d0:	95 cc       	rjmp	.-1750   	; 0x9ffc <__vector_53+0x1b8>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
		okToSendRTCBlock = false;
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    a6d2:	80 91 14 33 	lds	r24, 0x3314
    a6d6:	88 23       	and	r24, r24
    a6d8:	09 f4       	brne	.+2      	; 0xa6dc <__vector_53+0x898>
    a6da:	86 cd       	rjmp	.-1268   	; 0xa1e8 <__vector_53+0x3a4>
    a6dc:	e3 cd       	rjmp	.-1082   	; 0xa2a4 <__vector_53+0x460>

	if(okToEraseFile){
        f_unlink(fileToErase);
	    okToEraseFile = false;
	}
}
    a6de:	0f 90       	pop	r0
    a6e0:	0f 90       	pop	r0
    a6e2:	cf 91       	pop	r28
    a6e4:	df 91       	pop	r29
    a6e6:	ff 91       	pop	r31
    a6e8:	ef 91       	pop	r30
    a6ea:	bf 91       	pop	r27
    a6ec:	af 91       	pop	r26
    a6ee:	9f 91       	pop	r25
    a6f0:	8f 91       	pop	r24
    a6f2:	7f 91       	pop	r23
    a6f4:	6f 91       	pop	r22
    a6f6:	5f 91       	pop	r21
    a6f8:	4f 91       	pop	r20
    a6fa:	3f 91       	pop	r19
    a6fc:	2f 91       	pop	r18
    a6fe:	1f 91       	pop	r17
    a700:	0f 91       	pop	r16
    a702:	ff 90       	pop	r15
    a704:	ef 90       	pop	r14
    a706:	0f 90       	pop	r0
    a708:	0b be       	out	0x3b, r0	; 59
    a70a:	0f 90       	pop	r0
    a70c:	0f be       	out	0x3f, r0	; 63
    a70e:	0f 90       	pop	r0
    a710:	1f 90       	pop	r1
    a712:	18 95       	reti

0000a714 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    a714:	2f 92       	push	r2
    a716:	3f 92       	push	r3
    a718:	4f 92       	push	r4
    a71a:	5f 92       	push	r5
    a71c:	6f 92       	push	r6
    a71e:	7f 92       	push	r7
    a720:	8f 92       	push	r8
    a722:	9f 92       	push	r9
    a724:	af 92       	push	r10
    a726:	bf 92       	push	r11
    a728:	cf 92       	push	r12
    a72a:	df 92       	push	r13
    a72c:	ef 92       	push	r14
    a72e:	ff 92       	push	r15
    a730:	0f 93       	push	r16
    a732:	1f 93       	push	r17
    a734:	df 93       	push	r29
    a736:	cf 93       	push	r28
    a738:	cd b7       	in	r28, 0x3d	; 61
    a73a:	de b7       	in	r29, 0x3e	; 62
    a73c:	63 97       	sbiw	r28, 0x13	; 19
    a73e:	cd bf       	out	0x3d, r28	; 61
    a740:	de bf       	out	0x3e, r29	; 62
    a742:	6b a4       	ldd	r6, Y+43	; 0x2b
    a744:	7c a4       	ldd	r7, Y+44	; 0x2c
    a746:	8e 01       	movw	r16, r28
    a748:	03 5d       	subi	r16, 0xD3	; 211
    a74a:	1f 4f       	sbci	r17, 0xFF	; 255
    a74c:	19 8a       	std	Y+17, r1	; 0x11
    a74e:	1a 8a       	std	Y+18, r1	; 0x12
    a750:	20 e0       	ldi	r18, 0x00	; 0
    a752:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    a754:	d3 01       	movw	r26, r6
    a756:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    a758:	88 23       	and	r24, r24
    a75a:	09 f4       	brne	.+2      	; 0xa75e <f_printf+0x4a>
    a75c:	17 c1       	rjmp	.+558    	; 0xa98c <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    a75e:	08 94       	sec
    a760:	61 1c       	adc	r6, r1
    a762:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    a764:	85 32       	cpi	r24, 0x25	; 37
    a766:	71 f0       	breq	.+28     	; 0xa784 <f_printf+0x70>
			cc = f_putc(c, fil);
    a768:	90 e0       	ldi	r25, 0x00	; 0
    a76a:	69 a5       	ldd	r22, Y+41	; 0x29
    a76c:	7a a5       	ldd	r23, Y+42	; 0x2a
    a76e:	0e 94 12 2b 	call	0x5624	; 0x5624 <f_putc>
    a772:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    a774:	bf ef       	ldi	r27, 0xFF	; 255
    a776:	8f 3f       	cpi	r24, 0xFF	; 255
    a778:	9b 07       	cpc	r25, r27
    a77a:	11 f4       	brne	.+4      	; 0xa780 <f_printf+0x6c>
    a77c:	48 01       	movw	r8, r16
    a77e:	fa c0       	rjmp	.+500    	; 0xa974 <f_printf+0x260>
    a780:	48 01       	movw	r8, r16
    a782:	4c c0       	rjmp	.+152    	; 0xa81c <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    a784:	d3 01       	movw	r26, r6
    a786:	ed 91       	ld	r30, X+
    a788:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    a78a:	e0 33       	cpi	r30, 0x30	; 48
    a78c:	11 f0       	breq	.+4      	; 0xa792 <f_printf+0x7e>
    a78e:	1b 8a       	std	Y+19, r1	; 0x13
    a790:	04 c0       	rjmp	.+8      	; 0xa79a <f_printf+0x86>
			f = 1; c = *str++;
    a792:	ed 91       	ld	r30, X+
    a794:	3d 01       	movw	r6, r26
    a796:	b1 e0       	ldi	r27, 0x01	; 1
    a798:	bb 8b       	std	Y+19, r27	; 0x13
    a79a:	aa 24       	eor	r10, r10
    a79c:	bb 24       	eor	r11, r11
    a79e:	13 c0       	rjmp	.+38     	; 0xa7c6 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    a7a0:	c5 01       	movw	r24, r10
    a7a2:	53 e0       	ldi	r21, 0x03	; 3
    a7a4:	88 0f       	add	r24, r24
    a7a6:	99 1f       	adc	r25, r25
    a7a8:	5a 95       	dec	r21
    a7aa:	e1 f7       	brne	.-8      	; 0xa7a4 <f_printf+0x90>
    a7ac:	aa 0c       	add	r10, r10
    a7ae:	bb 1c       	adc	r11, r11
    a7b0:	a8 0e       	add	r10, r24
    a7b2:	b9 1e       	adc	r11, r25
    a7b4:	ae 0e       	add	r10, r30
    a7b6:	b1 1c       	adc	r11, r1
    a7b8:	e0 ed       	ldi	r30, 0xD0	; 208
    a7ba:	ff ef       	ldi	r31, 0xFF	; 255
    a7bc:	ae 0e       	add	r10, r30
    a7be:	bf 1e       	adc	r11, r31
			c = *str++;
    a7c0:	d3 01       	movw	r26, r6
    a7c2:	ed 91       	ld	r30, X+
    a7c4:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    a7c6:	8e 2f       	mov	r24, r30
    a7c8:	80 53       	subi	r24, 0x30	; 48
    a7ca:	8a 30       	cpi	r24, 0x0A	; 10
    a7cc:	48 f3       	brcs	.-46     	; 0xa7a0 <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    a7ce:	ec 36       	cpi	r30, 0x6C	; 108
    a7d0:	31 f4       	brne	.+12     	; 0xa7de <f_printf+0xca>
			f |= 2; c = *str++;
    a7d2:	bb 89       	ldd	r27, Y+19	; 0x13
    a7d4:	b2 60       	ori	r27, 0x02	; 2
    a7d6:	bb 8b       	std	Y+19, r27	; 0x13
    a7d8:	d3 01       	movw	r26, r6
    a7da:	ed 91       	ld	r30, X+
    a7dc:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    a7de:	e3 37       	cpi	r30, 0x73	; 115
    a7e0:	49 f4       	brne	.+18     	; 0xa7f4 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    a7e2:	82 e0       	ldi	r24, 0x02	; 2
    a7e4:	88 2e       	mov	r8, r24
    a7e6:	91 2c       	mov	r9, r1
    a7e8:	80 0e       	add	r8, r16
    a7ea:	91 1e       	adc	r9, r17
    a7ec:	f8 01       	movw	r30, r16
    a7ee:	80 81       	ld	r24, Z
    a7f0:	91 81       	ldd	r25, Z+1	; 0x01
    a7f2:	bb c0       	rjmp	.+374    	; 0xa96a <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    a7f4:	e3 36       	cpi	r30, 0x63	; 99
    a7f6:	a9 f4       	brne	.+42     	; 0xa822 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    a7f8:	b2 e0       	ldi	r27, 0x02	; 2
    a7fa:	8b 2e       	mov	r8, r27
    a7fc:	91 2c       	mov	r9, r1
    a7fe:	80 0e       	add	r8, r16
    a800:	91 1e       	adc	r9, r17
    a802:	d8 01       	movw	r26, r16
    a804:	8d 91       	ld	r24, X+
    a806:	9c 91       	ld	r25, X
    a808:	69 a5       	ldd	r22, Y+41	; 0x29
    a80a:	7a a5       	ldd	r23, Y+42	; 0x2a
    a80c:	0e 94 12 2b 	call	0x5624	; 0x5624 <f_putc>
    a810:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    a812:	bf ef       	ldi	r27, 0xFF	; 255
    a814:	8f 3f       	cpi	r24, 0xFF	; 255
    a816:	9b 07       	cpc	r25, r27
    a818:	09 f4       	brne	.+2      	; 0xa81c <f_printf+0x108>
    a81a:	ac c0       	rjmp	.+344    	; 0xa974 <f_printf+0x260>
    a81c:	21 e0       	ldi	r18, 0x01	; 1
    a81e:	30 e0       	ldi	r19, 0x00	; 0
    a820:	a9 c0       	rjmp	.+338    	; 0xa974 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    a822:	e4 36       	cpi	r30, 0x64	; 100
    a824:	39 f0       	breq	.+14     	; 0xa834 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    a826:	e5 37       	cpi	r30, 0x75	; 117
    a828:	29 f0       	breq	.+10     	; 0xa834 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    a82a:	e8 35       	cpi	r30, 0x58	; 88
    a82c:	09 f0       	breq	.+2      	; 0xa830 <f_printf+0x11c>
    a82e:	ae c0       	rjmp	.+348    	; 0xa98c <f_printf+0x278>
    a830:	20 e1       	ldi	r18, 0x10	; 16
    a832:	01 c0       	rjmp	.+2      	; 0xa836 <f_printf+0x122>
    a834:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    a836:	fb 89       	ldd	r31, Y+19	; 0x13
    a838:	f1 ff       	sbrs	r31, 1
    a83a:	0d c0       	rjmp	.+26     	; 0xa856 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    a83c:	a4 e0       	ldi	r26, 0x04	; 4
    a83e:	8a 2e       	mov	r8, r26
    a840:	91 2c       	mov	r9, r1
    a842:	80 0e       	add	r8, r16
    a844:	91 1e       	adc	r9, r17
    a846:	d8 01       	movw	r26, r16
    a848:	ed 90       	ld	r14, X+
    a84a:	fd 90       	ld	r15, X+
    a84c:	0d 91       	ld	r16, X+
    a84e:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    a850:	e4 36       	cpi	r30, 0x64	; 100
    a852:	09 f5       	brne	.+66     	; 0xa896 <f_printf+0x182>
    a854:	13 c0       	rjmp	.+38     	; 0xa87c <f_printf+0x168>
    a856:	c8 01       	movw	r24, r16
    a858:	02 96       	adiw	r24, 0x02	; 2
    a85a:	d8 01       	movw	r26, r16
    a85c:	6d 91       	ld	r22, X+
    a85e:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    a860:	e4 36       	cpi	r30, 0x64	; 100
    a862:	39 f4       	brne	.+14     	; 0xa872 <f_printf+0x15e>
    a864:	4c 01       	movw	r8, r24
    a866:	7b 01       	movw	r14, r22
    a868:	00 27       	eor	r16, r16
    a86a:	f7 fc       	sbrc	r15, 7
    a86c:	00 95       	com	r16
    a86e:	10 2f       	mov	r17, r16
    a870:	05 c0       	rjmp	.+10     	; 0xa87c <f_printf+0x168>
    a872:	4c 01       	movw	r8, r24
    a874:	7b 01       	movw	r14, r22
    a876:	00 e0       	ldi	r16, 0x00	; 0
    a878:	10 e0       	ldi	r17, 0x00	; 0
    a87a:	0d c0       	rjmp	.+26     	; 0xa896 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    a87c:	17 ff       	sbrs	r17, 7
    a87e:	0b c0       	rjmp	.+22     	; 0xa896 <f_printf+0x182>
				val = 0 - val;
    a880:	10 95       	com	r17
    a882:	00 95       	com	r16
    a884:	f0 94       	com	r15
    a886:	e0 94       	com	r14
    a888:	e1 1c       	adc	r14, r1
    a88a:	f1 1c       	adc	r15, r1
    a88c:	01 1d       	adc	r16, r1
    a88e:	11 1d       	adc	r17, r1
				f |= 4;
    a890:	bb 89       	ldd	r27, Y+19	; 0x13
    a892:	b4 60       	ori	r27, 0x04	; 4
    a894:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    a896:	18 8a       	std	Y+16, r1	; 0x10
    a898:	ff e0       	ldi	r31, 0x0F	; 15
    a89a:	cf 2e       	mov	r12, r31
    a89c:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    a89e:	22 2e       	mov	r2, r18
    a8a0:	33 24       	eor	r3, r3
    a8a2:	44 24       	eor	r4, r4
    a8a4:	55 24       	eor	r5, r5
    a8a6:	c8 01       	movw	r24, r16
    a8a8:	b7 01       	movw	r22, r14
    a8aa:	a2 01       	movw	r20, r4
    a8ac:	91 01       	movw	r18, r2
    a8ae:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    a8b2:	86 2f       	mov	r24, r22
    a8b4:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    a8b6:	8a 33       	cpi	r24, 0x3A	; 58
    a8b8:	08 f0       	brcs	.+2      	; 0xa8bc <f_printf+0x1a8>
    a8ba:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    a8bc:	08 94       	sec
    a8be:	c1 08       	sbc	r12, r1
    a8c0:	d1 08       	sbc	r13, r1
    a8c2:	e1 e0       	ldi	r30, 0x01	; 1
    a8c4:	f0 e0       	ldi	r31, 0x00	; 0
    a8c6:	ec 0f       	add	r30, r28
    a8c8:	fd 1f       	adc	r31, r29
    a8ca:	ec 0d       	add	r30, r12
    a8cc:	fd 1d       	adc	r31, r13
    a8ce:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    a8d0:	c1 14       	cp	r12, r1
    a8d2:	d1 04       	cpc	r13, r1
    a8d4:	e9 f0       	breq	.+58     	; 0xa910 <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    a8d6:	c8 01       	movw	r24, r16
    a8d8:	b7 01       	movw	r22, r14
    a8da:	a2 01       	movw	r20, r4
    a8dc:	91 01       	movw	r18, r2
    a8de:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    a8e2:	c9 01       	movw	r24, r18
    a8e4:	da 01       	movw	r26, r20
    a8e6:	7c 01       	movw	r14, r24
    a8e8:	8d 01       	movw	r16, r26
		} while (i && val);
    a8ea:	e1 14       	cp	r14, r1
    a8ec:	f1 04       	cpc	r15, r1
    a8ee:	01 05       	cpc	r16, r1
    a8f0:	11 05       	cpc	r17, r1
    a8f2:	c9 f6       	brne	.-78     	; 0xa8a6 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    a8f4:	eb 89       	ldd	r30, Y+19	; 0x13
    a8f6:	e2 ff       	sbrs	r30, 2
    a8f8:	0b c0       	rjmp	.+22     	; 0xa910 <f_printf+0x1fc>
    a8fa:	08 94       	sec
    a8fc:	c1 08       	sbc	r12, r1
    a8fe:	d1 08       	sbc	r13, r1
    a900:	e1 e0       	ldi	r30, 0x01	; 1
    a902:	f0 e0       	ldi	r31, 0x00	; 0
    a904:	ec 0f       	add	r30, r28
    a906:	fd 1f       	adc	r31, r29
    a908:	ec 0d       	add	r30, r12
    a90a:	fd 1d       	adc	r31, r13
    a90c:	4d e2       	ldi	r20, 0x2D	; 45
    a90e:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    a910:	8f e0       	ldi	r24, 0x0F	; 15
    a912:	90 e0       	ldi	r25, 0x00	; 0
    a914:	8a 19       	sub	r24, r10
    a916:	9b 09       	sbc	r25, r11
    a918:	08 94       	sec
    a91a:	c1 08       	sbc	r12, r1
    a91c:	d1 08       	sbc	r13, r1
    a91e:	e1 e0       	ldi	r30, 0x01	; 1
    a920:	f0 e0       	ldi	r31, 0x00	; 0
    a922:	ec 0f       	add	r30, r28
    a924:	fd 1f       	adc	r31, r29
    a926:	ec 0d       	add	r30, r12
    a928:	fd 1d       	adc	r31, r13
    a92a:	08 94       	sec
    a92c:	c1 1c       	adc	r12, r1
    a92e:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    a930:	ab 89       	ldd	r26, Y+19	; 0x13
    a932:	2a 2f       	mov	r18, r26
    a934:	30 e0       	ldi	r19, 0x00	; 0
    a936:	21 70       	andi	r18, 0x01	; 1
    a938:	30 70       	andi	r19, 0x00	; 0
    a93a:	0b c0       	rjmp	.+22     	; 0xa952 <f_printf+0x23e>
    a93c:	08 94       	sec
    a93e:	c1 08       	sbc	r12, r1
    a940:	d1 08       	sbc	r13, r1
    a942:	21 15       	cp	r18, r1
    a944:	31 05       	cpc	r19, r1
    a946:	11 f4       	brne	.+4      	; 0xa94c <f_printf+0x238>
    a948:	40 e2       	ldi	r20, 0x20	; 32
    a94a:	01 c0       	rjmp	.+2      	; 0xa94e <f_printf+0x23a>
    a94c:	40 e3       	ldi	r20, 0x30	; 48
    a94e:	40 83       	st	Z, r20
    a950:	31 97       	sbiw	r30, 0x01	; 1
    a952:	c1 14       	cp	r12, r1
    a954:	d1 04       	cpc	r13, r1
    a956:	19 f0       	breq	.+6      	; 0xa95e <f_printf+0x24a>
    a958:	8c 15       	cp	r24, r12
    a95a:	9d 05       	cpc	r25, r13
    a95c:	7c f3       	brlt	.-34     	; 0xa93c <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    a95e:	81 e0       	ldi	r24, 0x01	; 1
    a960:	90 e0       	ldi	r25, 0x00	; 0
    a962:	8c 0f       	add	r24, r28
    a964:	9d 1f       	adc	r25, r29
    a966:	8c 0d       	add	r24, r12
    a968:	9d 1d       	adc	r25, r13
    a96a:	69 a5       	ldd	r22, Y+41	; 0x29
    a96c:	7a a5       	ldd	r23, Y+42	; 0x2a
    a96e:	0e 94 38 2b 	call	0x5670	; 0x5670 <f_puts>
    a972:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    a974:	e9 89       	ldd	r30, Y+17	; 0x11
    a976:	fa 89       	ldd	r31, Y+18	; 0x12
    a978:	e2 0f       	add	r30, r18
    a97a:	f3 1f       	adc	r31, r19
    a97c:	e9 8b       	std	Y+17, r30	; 0x11
    a97e:	fa 8b       	std	Y+18, r31	; 0x12
    a980:	ff ef       	ldi	r31, 0xFF	; 255
    a982:	2f 3f       	cpi	r18, 0xFF	; 255
    a984:	3f 07       	cpc	r19, r31
    a986:	41 f0       	breq	.+16     	; 0xa998 <f_printf+0x284>
    a988:	84 01       	movw	r16, r8
    a98a:	e4 ce       	rjmp	.-568    	; 0xa754 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    a98c:	4f ef       	ldi	r20, 0xFF	; 255
    a98e:	2f 3f       	cpi	r18, 0xFF	; 255
    a990:	34 07       	cpc	r19, r20
    a992:	11 f0       	breq	.+4      	; 0xa998 <f_printf+0x284>
    a994:	29 89       	ldd	r18, Y+17	; 0x11
    a996:	3a 89       	ldd	r19, Y+18	; 0x12
}
    a998:	c9 01       	movw	r24, r18
    a99a:	63 96       	adiw	r28, 0x13	; 19
    a99c:	cd bf       	out	0x3d, r28	; 61
    a99e:	de bf       	out	0x3e, r29	; 62
    a9a0:	cf 91       	pop	r28
    a9a2:	df 91       	pop	r29
    a9a4:	1f 91       	pop	r17
    a9a6:	0f 91       	pop	r16
    a9a8:	ff 90       	pop	r15
    a9aa:	ef 90       	pop	r14
    a9ac:	df 90       	pop	r13
    a9ae:	cf 90       	pop	r12
    a9b0:	bf 90       	pop	r11
    a9b2:	af 90       	pop	r10
    a9b4:	9f 90       	pop	r9
    a9b6:	8f 90       	pop	r8
    a9b8:	7f 90       	pop	r7
    a9ba:	6f 90       	pop	r6
    a9bc:	5f 90       	pop	r5
    a9be:	4f 90       	pop	r4
    a9c0:	3f 90       	pop	r3
    a9c2:	2f 90       	pop	r2
    a9c4:	08 95       	ret

0000a9c6 <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    a9c6:	af 92       	push	r10
    a9c8:	bf 92       	push	r11
    a9ca:	cf 92       	push	r12
    a9cc:	df 92       	push	r13
    a9ce:	ff 92       	push	r15
    a9d0:	0f 93       	push	r16
    a9d2:	1f 93       	push	r17
    a9d4:	cf 93       	push	r28
    a9d6:	df 93       	push	r29
    a9d8:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    a9da:	8c e5       	ldi	r24, 0x5C	; 92
    a9dc:	96 e2       	ldi	r25, 0x26	; 38
    a9de:	66 e6       	ldi	r22, 0x66	; 102
    a9e0:	76 e2       	ldi	r23, 0x26	; 38
    a9e2:	ab 01       	movw	r20, r22
    a9e4:	96 01       	movw	r18, r12
    a9e6:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    a9ea:	ff 24       	eor	r15, r15
    a9ec:	c0 e0       	ldi	r28, 0x00	; 0
    a9ee:	d0 e0       	ldi	r29, 0x00	; 0
    a9f0:	66 e6       	ldi	r22, 0x66	; 102
    a9f2:	a6 2e       	mov	r10, r22
    a9f4:	6e e0       	ldi	r22, 0x0E	; 14
    a9f6:	b6 2e       	mov	r11, r22
    a9f8:	39 c0       	rjmp	.+114    	; 0xaa6c <Wifi_GetSignalStrength+0xa6>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    a9fa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    a9fe:	88 23       	and	r24, r24
    aa00:	89 f1       	breq	.+98     	; 0xaa64 <Wifi_GetSignalStrength+0x9e>
			rssi[tmp] = Wifi_GetByte(false);
    aa02:	0f 2d       	mov	r16, r15
    aa04:	10 e0       	ldi	r17, 0x00	; 0
    aa06:	80 e0       	ldi	r24, 0x00	; 0
    aa08:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    aa0c:	f8 01       	movw	r30, r16
    aa0e:	e6 5f       	subi	r30, 0xF6	; 246
    aa10:	fb 4a       	sbci	r31, 0xAB	; 171
    aa12:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    aa14:	89 32       	cpi	r24, 0x29	; 41
    aa16:	29 f5       	brne	.+74     	; 0xaa62 <Wifi_GetSignalStrength+0x9c>
				rssi[tmp] = 0;
    aa18:	10 82       	st	Z, r1
				worker = atoi(rssi);
    aa1a:	8a e0       	ldi	r24, 0x0A	; 10
    aa1c:	94 e5       	ldi	r25, 0x54	; 84
    aa1e:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <atoi>
    aa22:	aa 27       	eor	r26, r26
    aa24:	97 fd       	sbrc	r25, 7
    aa26:	a0 95       	com	r26
    aa28:	ba 2f       	mov	r27, r26
				worker*=9208;
    aa2a:	bc 01       	movw	r22, r24
    aa2c:	cd 01       	movw	r24, r26
    aa2e:	28 ef       	ldi	r18, 0xF8	; 248
    aa30:	33 e2       	ldi	r19, 0x23	; 35
    aa32:	40 e0       	ldi	r20, 0x00	; 0
    aa34:	50 e0       	ldi	r21, 0x00	; 0
    aa36:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__mulsi3>
    aa3a:	9b 01       	movw	r18, r22
    aa3c:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    aa3e:	6c e6       	ldi	r22, 0x6C	; 108
    aa40:	72 ef       	ldi	r23, 0xF2	; 242
    aa42:	8f e0       	ldi	r24, 0x0F	; 15
    aa44:	90 e0       	ldi	r25, 0x00	; 0
    aa46:	62 1b       	sub	r22, r18
    aa48:	73 0b       	sbc	r23, r19
    aa4a:	84 0b       	sbc	r24, r20
    aa4c:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    aa4e:	20 e1       	ldi	r18, 0x10	; 16
    aa50:	37 e2       	ldi	r19, 0x27	; 39
    aa52:	40 e0       	ldi	r20, 0x00	; 0
    aa54:	50 e0       	ldi	r21, 0x00	; 0
    aa56:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    aa5a:	25 36       	cpi	r18, 0x65	; 101
    aa5c:	58 f0       	brcs	.+22     	; 0xaa74 <Wifi_GetSignalStrength+0xae>
    aa5e:	24 e6       	ldi	r18, 0x64	; 100
    aa60:	09 c0       	rjmp	.+18     	; 0xaa74 <Wifi_GetSignalStrength+0xae>
                if(ss > 100){
                    ss = 100;
                }
				return ss;
			}
			tmp++;
    aa62:	f3 94       	inc	r15
    aa64:	c5 01       	movw	r24, r10
    aa66:	01 97       	sbiw	r24, 0x01	; 1
    aa68:	f1 f7       	brne	.-4      	; 0xaa66 <Wifi_GetSignalStrength+0xa0>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    aa6a:	21 96       	adiw	r28, 0x01	; 1
    aa6c:	cc 15       	cp	r28, r12
    aa6e:	dd 05       	cpc	r29, r13
    aa70:	20 f2       	brcs	.-120    	; 0xa9fa <Wifi_GetSignalStrength+0x34>
    aa72:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    aa74:	82 2f       	mov	r24, r18
    aa76:	df 91       	pop	r29
    aa78:	cf 91       	pop	r28
    aa7a:	1f 91       	pop	r17
    aa7c:	0f 91       	pop	r16
    aa7e:	ff 90       	pop	r15
    aa80:	df 90       	pop	r13
    aa82:	cf 90       	pop	r12
    aa84:	bf 90       	pop	r11
    aa86:	af 90       	pop	r10
    aa88:	08 95       	ret

0000aa8a <Config_Wifi>:
    if((strstr(microphoneString,"true") != 0)){
       wantToRecordMicrophone = true;
    }
}

void Config_Wifi(void){
    aa8a:	0f 93       	push	r16
    aa8c:	1f 93       	push	r17
    aa8e:	80 e2       	ldi	r24, 0x20	; 32
    aa90:	9e e4       	ldi	r25, 0x4E	; 78
    aa92:	20 e7       	ldi	r18, 0x70	; 112
    aa94:	31 e0       	ldi	r19, 0x01	; 1
    aa96:	f9 01       	movw	r30, r18
    aa98:	31 97       	sbiw	r30, 0x01	; 1
    aa9a:	f1 f7       	brne	.-4      	; 0xaa98 <Config_Wifi+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa9e:	d9 f7       	brne	.-10     	; 0xaa96 <Config_Wifi+0xc>



    _delay_ms(2000);

    Wifi_EnterCMDMode(1000);
    aaa0:	88 ee       	ldi	r24, 0xE8	; 232
    aaa2:	93 e0       	ldi	r25, 0x03	; 3
    aaa4:	0e 94 6e 43 	call	0x86dc	; 0x86dc <Wifi_EnterCMDMode>
    aaa8:	80 e1       	ldi	r24, 0x10	; 16
    aaaa:	97 e2       	ldi	r25, 0x27	; 39
    aaac:	20 e7       	ldi	r18, 0x70	; 112
    aaae:	31 e0       	ldi	r19, 0x01	; 1
    aab0:	f9 01       	movw	r30, r18
    aab2:	31 97       	sbiw	r30, 0x01	; 1
    aab4:	f1 f7       	brne	.-4      	; 0xaab2 <Config_Wifi+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aab6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aab8:	d9 f7       	brne	.-10     	; 0xaab0 <Config_Wifi+0x26>

	_delay_ms(1000);
	display_clearBuffer();
    aaba:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
	display_writeBufferToScreen();
    aabe:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    aac2:	8e e6       	ldi	r24, 0x6E	; 110
    aac4:	96 e2       	ldi	r25, 0x26	; 38
    aac6:	6c e7       	ldi	r22, 0x7C	; 124
    aac8:	76 e2       	ldi	r23, 0x26	; 38
    aaca:	ab 01       	movw	r20, r22
    aacc:	24 ef       	ldi	r18, 0xF4	; 244
    aace:	31 e0       	ldi	r19, 0x01	; 1
    aad0:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    aad4:	88 23       	and	r24, r24
    aad6:	19 f0       	breq	.+6      	; 0xaade <Config_Wifi+0x54>
		display_putString("reset..........OK",col,0,System5x7);
    aad8:	81 e9       	ldi	r24, 0x91	; 145
    aada:	96 e2       	ldi	r25, 0x26	; 38
    aadc:	02 c0       	rjmp	.+4      	; 0xaae2 <Config_Wifi+0x58>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    aade:	83 ea       	ldi	r24, 0xA3	; 163
    aae0:	96 e2       	ldi	r25, 0x26	; 38
    aae2:	60 e0       	ldi	r22, 0x00	; 0
    aae4:	40 e0       	ldi	r20, 0x00	; 0
    aae6:	23 e4       	ldi	r18, 0x43	; 67
    aae8:	30 e3       	ldi	r19, 0x30	; 48
    aaea:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
	}
	display_writeBufferToScreen();
    aaee:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    aaf2:	80 e1       	ldi	r24, 0x10	; 16
    aaf4:	97 e2       	ldi	r25, 0x27	; 39
    aaf6:	20 e7       	ldi	r18, 0x70	; 112
    aaf8:	31 e0       	ldi	r19, 0x01	; 1
    aafa:	f9 01       	movw	r30, r18
    aafc:	31 97       	sbiw	r30, 0x01	; 1
    aafe:	f1 f7       	brne	.-4      	; 0xaafc <Config_Wifi+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab00:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab02:	d9 f7       	brne	.-10     	; 0xaafa <Config_Wifi+0x70>

	_delay_ms(1000);



    Wifi_SendCommand("set sys iofunc 0x50","AOK","AOK",500);    // 0x10
    ab04:	85 eb       	ldi	r24, 0xB5	; 181
    ab06:	96 e2       	ldi	r25, 0x26	; 38
    ab08:	69 ec       	ldi	r22, 0xC9	; 201
    ab0a:	76 e2       	ldi	r23, 0x26	; 38
    ab0c:	ab 01       	movw	r20, r22
    ab0e:	24 ef       	ldi	r18, 0xF4	; 244
    ab10:	31 e0       	ldi	r19, 0x01	; 1
    ab12:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ab16:	80 e1       	ldi	r24, 0x10	; 16
    ab18:	97 e2       	ldi	r25, 0x27	; 39
    ab1a:	20 e7       	ldi	r18, 0x70	; 112
    ab1c:	31 e0       	ldi	r19, 0x01	; 1
    ab1e:	f9 01       	movw	r30, r18
    ab20:	31 97       	sbiw	r30, 0x01	; 1
    ab22:	f1 f7       	brne	.-4      	; 0xab20 <Config_Wifi+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab26:	d9 f7       	brne	.-10     	; 0xab1e <Config_Wifi+0x94>
    _delay_ms(1000);


    Wifi_SendCommand("set wlan join 0","AOK","AOK",500);
    ab28:	8d ec       	ldi	r24, 0xCD	; 205
    ab2a:	96 e2       	ldi	r25, 0x26	; 38
    ab2c:	69 ec       	ldi	r22, 0xC9	; 201
    ab2e:	76 e2       	ldi	r23, 0x26	; 38
    ab30:	ab 01       	movw	r20, r22
    ab32:	24 ef       	ldi	r18, 0xF4	; 244
    ab34:	31 e0       	ldi	r19, 0x01	; 1
    ab36:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ab3a:	80 e1       	ldi	r24, 0x10	; 16
    ab3c:	97 e2       	ldi	r25, 0x27	; 39
    ab3e:	20 e7       	ldi	r18, 0x70	; 112
    ab40:	31 e0       	ldi	r19, 0x01	; 1
    ab42:	f9 01       	movw	r30, r18
    ab44:	31 97       	sbiw	r30, 0x01	; 1
    ab46:	f1 f7       	brne	.-4      	; 0xab44 <Config_Wifi+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab48:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab4a:	d9 f7       	brne	.-10     	; 0xab42 <Config_Wifi+0xb8>
    _delay_ms(1000);

    Wifi_SendCommand("set uart flow 1","AOK","AOK",500);
    ab4c:	8d ed       	ldi	r24, 0xDD	; 221
    ab4e:	96 e2       	ldi	r25, 0x26	; 38
    ab50:	69 ec       	ldi	r22, 0xC9	; 201
    ab52:	76 e2       	ldi	r23, 0x26	; 38
    ab54:	ab 01       	movw	r20, r22
    ab56:	24 ef       	ldi	r18, 0xF4	; 244
    ab58:	31 e0       	ldi	r19, 0x01	; 1
    ab5a:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ab5e:	88 e8       	ldi	r24, 0x88	; 136
    ab60:	93 e1       	ldi	r25, 0x13	; 19
    ab62:	20 e7       	ldi	r18, 0x70	; 112
    ab64:	31 e0       	ldi	r19, 0x01	; 1
    ab66:	f9 01       	movw	r30, r18
    ab68:	31 97       	sbiw	r30, 0x01	; 1
    ab6a:	f1 f7       	brne	.-4      	; 0xab68 <Config_Wifi+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab6e:	d9 f7       	brne	.-10     	; 0xab66 <Config_Wifi+0xdc>
    _delay_ms(500);

    Wifi_SendCommand("set comm size 1420","AOK","AOK",500);
    ab70:	8d ee       	ldi	r24, 0xED	; 237
    ab72:	96 e2       	ldi	r25, 0x26	; 38
    ab74:	69 ec       	ldi	r22, 0xC9	; 201
    ab76:	76 e2       	ldi	r23, 0x26	; 38
    ab78:	ab 01       	movw	r20, r22
    ab7a:	24 ef       	ldi	r18, 0xF4	; 244
    ab7c:	31 e0       	ldi	r19, 0x01	; 1
    ab7e:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ab82:	88 e8       	ldi	r24, 0x88	; 136
    ab84:	93 e1       	ldi	r25, 0x13	; 19
    ab86:	20 e7       	ldi	r18, 0x70	; 112
    ab88:	31 e0       	ldi	r19, 0x01	; 1
    ab8a:	f9 01       	movw	r30, r18
    ab8c:	31 97       	sbiw	r30, 0x01	; 1
    ab8e:	f1 f7       	brne	.-4      	; 0xab8c <Config_Wifi+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab92:	d9 f7       	brne	.-10     	; 0xab8a <Config_Wifi+0x100>
	_delay_ms(500);

	Wifi_SendCommand("set comm time 10","AOK","AOK",500);
    ab94:	80 e0       	ldi	r24, 0x00	; 0
    ab96:	97 e2       	ldi	r25, 0x27	; 39
    ab98:	69 ec       	ldi	r22, 0xC9	; 201
    ab9a:	76 e2       	ldi	r23, 0x26	; 38
    ab9c:	ab 01       	movw	r20, r22
    ab9e:	24 ef       	ldi	r18, 0xF4	; 244
    aba0:	31 e0       	ldi	r19, 0x01	; 1
    aba2:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    aba6:	88 e8       	ldi	r24, 0x88	; 136
    aba8:	93 e1       	ldi	r25, 0x13	; 19
    abaa:	20 e7       	ldi	r18, 0x70	; 112
    abac:	31 e0       	ldi	r19, 0x01	; 1
    abae:	f9 01       	movw	r30, r18
    abb0:	31 97       	sbiw	r30, 0x01	; 1
    abb2:	f1 f7       	brne	.-4      	; 0xabb0 <Config_Wifi+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abb4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abb6:	d9 f7       	brne	.-10     	; 0xabae <Config_Wifi+0x124>
	_delay_ms(500);

    if(timeServerAttempts > 5){
    abb8:	80 91 47 33 	lds	r24, 0x3347
    abbc:	86 30       	cpi	r24, 0x06	; 6
    abbe:	90 f0       	brcs	.+36     	; 0xabe4 <Config_Wifi+0x15a>
        Wifi_SendCommand("set time address 195.43.74.3","AOK","AOK",500);
    abc0:	81 e1       	ldi	r24, 0x11	; 17
    abc2:	97 e2       	ldi	r25, 0x27	; 39
    abc4:	69 ec       	ldi	r22, 0xC9	; 201
    abc6:	76 e2       	ldi	r23, 0x26	; 38
    abc8:	ab 01       	movw	r20, r22
    abca:	24 ef       	ldi	r18, 0xF4	; 244
    abcc:	31 e0       	ldi	r19, 0x01	; 1
    abce:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    abd2:	88 e8       	ldi	r24, 0x88	; 136
    abd4:	93 e1       	ldi	r25, 0x13	; 19
    abd6:	20 e7       	ldi	r18, 0x70	; 112
    abd8:	31 e0       	ldi	r19, 0x01	; 1
    abda:	f9 01       	movw	r30, r18
    abdc:	31 97       	sbiw	r30, 0x01	; 1
    abde:	f1 f7       	brne	.-4      	; 0xabdc <Config_Wifi+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abe0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abe2:	d9 f7       	brne	.-10     	; 0xabda <Config_Wifi+0x150>
	    _delay_ms(500);
    } else if(timeServerAttempts > 25){
        Wifi_SendCommand("set time address 131.130.251.107","AOK","AOK",500);
	    _delay_ms(500);
	}
    timeServerAttempts++;
    abe4:	80 91 47 33 	lds	r24, 0x3347
    abe8:	8f 5f       	subi	r24, 0xFF	; 255
    abea:	80 93 47 33 	sts	0x3347, r24

    Wifi_SendCommand("save","Storing in config","Storing in config",500);
    abee:	8e e2       	ldi	r24, 0x2E	; 46
    abf0:	97 e2       	ldi	r25, 0x27	; 39
    abf2:	63 e3       	ldi	r22, 0x33	; 51
    abf4:	77 e2       	ldi	r23, 0x27	; 39
    abf6:	ab 01       	movw	r20, r22
    abf8:	24 ef       	ldi	r18, 0xF4	; 244
    abfa:	31 e0       	ldi	r19, 0x01	; 1
    abfc:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ac00:	80 e1       	ldi	r24, 0x10	; 16
    ac02:	97 e2       	ldi	r25, 0x27	; 39
    ac04:	20 e7       	ldi	r18, 0x70	; 112
    ac06:	31 e0       	ldi	r19, 0x01	; 1
    ac08:	f9 01       	movw	r30, r18
    ac0a:	31 97       	sbiw	r30, 0x01	; 1
    ac0c:	f1 f7       	brne	.-4      	; 0xac0a <Config_Wifi+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac10:	d9 f7       	brne	.-10     	; 0xac08 <Config_Wifi+0x17e>
	_delay_ms(1000);

	Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    ac12:	85 e4       	ldi	r24, 0x45	; 69
    ac14:	97 e2       	ldi	r25, 0x27	; 39
    ac16:	6c e4       	ldi	r22, 0x4C	; 76
    ac18:	77 e2       	ldi	r23, 0x27	; 39
    ac1a:	ab 01       	movw	r20, r22
    ac1c:	24 ef       	ldi	r18, 0xF4	; 244
    ac1e:	31 e0       	ldi	r19, 0x01	; 1
    ac20:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ac24:	80 e4       	ldi	r24, 0x40	; 64
    ac26:	9c e9       	ldi	r25, 0x9C	; 156
    ac28:	20 e7       	ldi	r18, 0x70	; 112
    ac2a:	31 e0       	ldi	r19, 0x01	; 1
    ac2c:	f9 01       	movw	r30, r18
    ac2e:	31 97       	sbiw	r30, 0x01	; 1
    ac30:	f1 f7       	brne	.-4      	; 0xac2e <Config_Wifi+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac34:	d9 f7       	brne	.-10     	; 0xac2c <Config_Wifi+0x1a2>
	_delay_ms(4000);


    Wifi_EnterCMDMode(1000);
    ac36:	88 ee       	ldi	r24, 0xE8	; 232
    ac38:	93 e0       	ldi	r25, 0x03	; 3
    ac3a:	0e 94 6e 43 	call	0x86dc	; 0x86dc <Wifi_EnterCMDMode>
    ac3e:	80 e1       	ldi	r24, 0x10	; 16
    ac40:	97 e2       	ldi	r25, 0x27	; 39
    ac42:	20 e7       	ldi	r18, 0x70	; 112
    ac44:	31 e0       	ldi	r19, 0x01	; 1
    ac46:	f9 01       	movw	r30, r18
    ac48:	31 97       	sbiw	r30, 0x01	; 1
    ac4a:	f1 f7       	brne	.-4      	; 0xac48 <Config_Wifi+0x1be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac4e:	d9 f7       	brne	.-10     	; 0xac46 <Config_Wifi+0x1bc>
    _delay_ms(1000);

	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    ac50:	85 e5       	ldi	r24, 0x55	; 85
    ac52:	97 e2       	ldi	r25, 0x27	; 39
    ac54:	69 ec       	ldi	r22, 0xC9	; 201
    ac56:	76 e2       	ldi	r23, 0x26	; 38
    ac58:	ab 01       	movw	r20, r22
    ac5a:	24 ef       	ldi	r18, 0xF4	; 244
    ac5c:	31 e0       	ldi	r19, 0x01	; 1
    ac5e:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ac62:	88 e8       	ldi	r24, 0x88	; 136
    ac64:	93 e1       	ldi	r25, 0x13	; 19
    ac66:	20 e7       	ldi	r18, 0x70	; 112
    ac68:	31 e0       	ldi	r19, 0x01	; 1
    ac6a:	f9 01       	movw	r30, r18
    ac6c:	31 97       	sbiw	r30, 0x01	; 1
    ac6e:	f1 f7       	brne	.-4      	; 0xac6c <Config_Wifi+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac72:	d9 f7       	brne	.-10     	; 0xac6a <Config_Wifi+0x1e0>
	_delay_ms(500);



	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    ac74:	87 e6       	ldi	r24, 0x67	; 103
    ac76:	97 e2       	ldi	r25, 0x27	; 39
    ac78:	69 ec       	ldi	r22, 0xC9	; 201
    ac7a:	76 e2       	ldi	r23, 0x26	; 38
    ac7c:	ab 01       	movw	r20, r22
    ac7e:	24 ef       	ldi	r18, 0xF4	; 244
    ac80:	31 e0       	ldi	r19, 0x01	; 1
    ac82:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ac86:	88 23       	and	r24, r24
    ac88:	19 f0       	breq	.+6      	; 0xac90 <Config_Wifi+0x206>
		display_putString("enable time....OK",col,0,System5x7);
    ac8a:	89 e7       	ldi	r24, 0x79	; 121
    ac8c:	97 e2       	ldi	r25, 0x27	; 39
    ac8e:	02 c0       	rjmp	.+4      	; 0xac94 <Config_Wifi+0x20a>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    ac90:	8b e8       	ldi	r24, 0x8B	; 139
    ac92:	97 e2       	ldi	r25, 0x27	; 39
    ac94:	61 e0       	ldi	r22, 0x01	; 1
    ac96:	40 e0       	ldi	r20, 0x00	; 0
    ac98:	23 e4       	ldi	r18, 0x43	; 67
    ac9a:	30 e3       	ldi	r19, 0x30	; 48
    ac9c:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
	}
	display_writeBufferToScreen();
    aca0:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    aca4:	88 e8       	ldi	r24, 0x88	; 136
    aca6:	93 e1       	ldi	r25, 0x13	; 19
    aca8:	20 e7       	ldi	r18, 0x70	; 112
    acaa:	31 e0       	ldi	r19, 0x01	; 1
    acac:	f9 01       	movw	r30, r18
    acae:	31 97       	sbiw	r30, 0x01	; 1
    acb0:	f1 f7       	brne	.-4      	; 0xacae <Config_Wifi+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    acb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    acb4:	d9 f7       	brne	.-10     	; 0xacac <Config_Wifi+0x222>
	_delay_ms(500);
	col++;
	
	if(authRead){
    acb6:	80 91 fa 32 	lds	r24, 0x32FA
    acba:	88 23       	and	r24, r24
    acbc:	11 f4       	brne	.+4      	; 0xacc2 <Config_Wifi+0x238>
    acbe:	12 e0       	ldi	r17, 0x02	; 2
    acc0:	2e c0       	rjmp	.+92     	; 0xad1e <Config_Wifi+0x294>
	    strcpy(temp,"set wlan auth ");
    acc2:	80 eb       	ldi	r24, 0xB0	; 176
    acc4:	99 e4       	ldi	r25, 0x49	; 73
    acc6:	6d e9       	ldi	r22, 0x9D	; 157
    acc8:	77 e2       	ldi	r23, 0x27	; 39
    acca:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	    strcat(temp,auth);
    acce:	80 eb       	ldi	r24, 0xB0	; 176
    acd0:	99 e4       	ldi	r25, 0x49	; 73
    acd2:	68 e9       	ldi	r22, 0x98	; 152
    acd4:	74 e4       	ldi	r23, 0x44	; 68
    acd6:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		if(Wifi_SendCommand(temp,"AOK","AOK",500)){
    acda:	80 eb       	ldi	r24, 0xB0	; 176
    acdc:	99 e4       	ldi	r25, 0x49	; 73
    acde:	69 ec       	ldi	r22, 0xC9	; 201
    ace0:	76 e2       	ldi	r23, 0x26	; 38
    ace2:	ab 01       	movw	r20, r22
    ace4:	24 ef       	ldi	r18, 0xF4	; 244
    ace6:	31 e0       	ldi	r19, 0x01	; 1
    ace8:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    acec:	88 23       	and	r24, r24
    acee:	19 f0       	breq	.+6      	; 0xacf6 <Config_Wifi+0x26c>
			display_putString("encryption.....OK",col,0,System5x7);
    acf0:	8c ea       	ldi	r24, 0xAC	; 172
    acf2:	97 e2       	ldi	r25, 0x27	; 39
    acf4:	02 c0       	rjmp	.+4      	; 0xacfa <Config_Wifi+0x270>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    acf6:	8e eb       	ldi	r24, 0xBE	; 190
    acf8:	97 e2       	ldi	r25, 0x27	; 39
    acfa:	62 e0       	ldi	r22, 0x02	; 2
    acfc:	40 e0       	ldi	r20, 0x00	; 0
    acfe:	23 e4       	ldi	r18, 0x43	; 67
    ad00:	30 e3       	ldi	r19, 0x30	; 48
    ad02:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		}
		display_writeBufferToScreen();
    ad06:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    ad0a:	88 e8       	ldi	r24, 0x88	; 136
    ad0c:	93 e1       	ldi	r25, 0x13	; 19
    ad0e:	20 e7       	ldi	r18, 0x70	; 112
    ad10:	31 e0       	ldi	r19, 0x01	; 1
    ad12:	f9 01       	movw	r30, r18
    ad14:	31 97       	sbiw	r30, 0x01	; 1
    ad16:	f1 f7       	brne	.-4      	; 0xad14 <Config_Wifi+0x28a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad1a:	d9 f7       	brne	.-10     	; 0xad12 <Config_Wifi+0x288>
    ad1c:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(500);
		col++;
	}
	
	if(phraseRead){
    ad1e:	80 91 fb 32 	lds	r24, 0x32FB
    ad22:	88 23       	and	r24, r24
    ad24:	71 f1       	breq	.+92     	; 0xad82 <Config_Wifi+0x2f8>
	    strcpy(temp,"set wlan phrase ");
    ad26:	80 eb       	ldi	r24, 0xB0	; 176
    ad28:	99 e4       	ldi	r25, 0x49	; 73
    ad2a:	60 ed       	ldi	r22, 0xD0	; 208
    ad2c:	77 e2       	ldi	r23, 0x27	; 39
    ad2e:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	    strcat(temp,phrase);
    ad32:	80 eb       	ldi	r24, 0xB0	; 176
    ad34:	99 e4       	ldi	r25, 0x49	; 73
    ad36:	6b ef       	ldi	r22, 0xFB	; 251
    ad38:	7a e4       	ldi	r23, 0x4A	; 74
    ad3a:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		if(Wifi_SendCommand(temp,"AOK","AOK",500)){
    ad3e:	80 eb       	ldi	r24, 0xB0	; 176
    ad40:	99 e4       	ldi	r25, 0x49	; 73
    ad42:	69 ec       	ldi	r22, 0xC9	; 201
    ad44:	76 e2       	ldi	r23, 0x26	; 38
    ad46:	ab 01       	movw	r20, r22
    ad48:	24 ef       	ldi	r18, 0xF4	; 244
    ad4a:	31 e0       	ldi	r19, 0x01	; 1
    ad4c:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ad50:	88 23       	and	r24, r24
    ad52:	19 f0       	breq	.+6      	; 0xad5a <Config_Wifi+0x2d0>
			display_putString("phrase.........OK",col,0,System5x7);
    ad54:	81 ee       	ldi	r24, 0xE1	; 225
    ad56:	97 e2       	ldi	r25, 0x27	; 39
    ad58:	02 c0       	rjmp	.+4      	; 0xad5e <Config_Wifi+0x2d4>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    ad5a:	83 ef       	ldi	r24, 0xF3	; 243
    ad5c:	97 e2       	ldi	r25, 0x27	; 39
    ad5e:	61 2f       	mov	r22, r17
    ad60:	40 e0       	ldi	r20, 0x00	; 0
    ad62:	23 e4       	ldi	r18, 0x43	; 67
    ad64:	30 e3       	ldi	r19, 0x30	; 48
    ad66:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		}
		display_writeBufferToScreen();
    ad6a:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    ad6e:	88 e8       	ldi	r24, 0x88	; 136
    ad70:	93 e1       	ldi	r25, 0x13	; 19
    ad72:	20 e7       	ldi	r18, 0x70	; 112
    ad74:	31 e0       	ldi	r19, 0x01	; 1
    ad76:	f9 01       	movw	r30, r18
    ad78:	31 97       	sbiw	r30, 0x01	; 1
    ad7a:	f1 f7       	brne	.-4      	; 0xad78 <Config_Wifi+0x2ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad7c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad7e:	d9 f7       	brne	.-10     	; 0xad76 <Config_Wifi+0x2ec>
    ad80:	31 c0       	rjmp	.+98     	; 0xade4 <Config_Wifi+0x35a>
		_delay_ms(500);
		col++;
	} else if(keyRead){
    ad82:	80 91 fc 32 	lds	r24, 0x32FC
    ad86:	88 23       	and	r24, r24
    ad88:	71 f1       	breq	.+92     	; 0xade6 <Config_Wifi+0x35c>
	    strcpy(temp,"set wlan phrase ");
    ad8a:	80 eb       	ldi	r24, 0xB0	; 176
    ad8c:	99 e4       	ldi	r25, 0x49	; 73
    ad8e:	60 ed       	ldi	r22, 0xD0	; 208
    ad90:	77 e2       	ldi	r23, 0x27	; 39
    ad92:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	    strcat(temp,key);
    ad96:	80 eb       	ldi	r24, 0xB0	; 176
    ad98:	99 e4       	ldi	r25, 0x49	; 73
    ad9a:	66 e3       	ldi	r22, 0x36	; 54
    ad9c:	7f e4       	ldi	r23, 0x4F	; 79
    ad9e:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		if(Wifi_SendCommand(temp,"AOK","AOK",500)){
    ada2:	80 eb       	ldi	r24, 0xB0	; 176
    ada4:	99 e4       	ldi	r25, 0x49	; 73
    ada6:	69 ec       	ldi	r22, 0xC9	; 201
    ada8:	76 e2       	ldi	r23, 0x26	; 38
    adaa:	ab 01       	movw	r20, r22
    adac:	24 ef       	ldi	r18, 0xF4	; 244
    adae:	31 e0       	ldi	r19, 0x01	; 1
    adb0:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    adb4:	88 23       	and	r24, r24
    adb6:	19 f0       	breq	.+6      	; 0xadbe <Config_Wifi+0x334>
			display_putString("key............OK",col,0,System5x7);
    adb8:	85 e0       	ldi	r24, 0x05	; 5
    adba:	98 e2       	ldi	r25, 0x28	; 40
    adbc:	02 c0       	rjmp	.+4      	; 0xadc2 <Config_Wifi+0x338>
		} else {
			display_putString("key..........FAIL",col,0,System5x7);
    adbe:	87 e1       	ldi	r24, 0x17	; 23
    adc0:	98 e2       	ldi	r25, 0x28	; 40
    adc2:	61 2f       	mov	r22, r17
    adc4:	40 e0       	ldi	r20, 0x00	; 0
    adc6:	23 e4       	ldi	r18, 0x43	; 67
    adc8:	30 e3       	ldi	r19, 0x30	; 48
    adca:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		}
		display_writeBufferToScreen();
    adce:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    add2:	88 e8       	ldi	r24, 0x88	; 136
    add4:	93 e1       	ldi	r25, 0x13	; 19
    add6:	20 e7       	ldi	r18, 0x70	; 112
    add8:	31 e0       	ldi	r19, 0x01	; 1
    adda:	f9 01       	movw	r30, r18
    addc:	31 97       	sbiw	r30, 0x01	; 1
    adde:	f1 f7       	brne	.-4      	; 0xaddc <Config_Wifi+0x352>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ade0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ade2:	d9 f7       	brne	.-10     	; 0xadda <Config_Wifi+0x350>
		_delay_ms(500);
		col++;
    ade4:	1f 5f       	subi	r17, 0xFF	; 255
	}

	if(ssidRead){
    ade6:	80 91 fd 32 	lds	r24, 0x32FD
    adea:	88 23       	and	r24, r24
    adec:	79 f1       	breq	.+94     	; 0xae4c <Config_Wifi+0x3c2>
	    strcpy(temp,"join ");
    adee:	80 eb       	ldi	r24, 0xB0	; 176
    adf0:	99 e4       	ldi	r25, 0x49	; 73
    adf2:	69 e2       	ldi	r22, 0x29	; 41
    adf4:	78 e2       	ldi	r23, 0x28	; 40
    adf6:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
	    strcat(temp,ssid);
    adfa:	80 eb       	ldi	r24, 0xB0	; 176
    adfc:	99 e4       	ldi	r25, 0x49	; 73
    adfe:	63 eb       	ldi	r22, 0xB3	; 179
    ae00:	77 e3       	ldi	r23, 0x37	; 55
    ae02:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
		if(Wifi_SendCommand(temp,"DeAut","Auto-",2000)){
    ae06:	80 eb       	ldi	r24, 0xB0	; 176
    ae08:	99 e4       	ldi	r25, 0x49	; 73
    ae0a:	6f e2       	ldi	r22, 0x2F	; 47
    ae0c:	78 e2       	ldi	r23, 0x28	; 40
    ae0e:	45 e3       	ldi	r20, 0x35	; 53
    ae10:	58 e2       	ldi	r21, 0x28	; 40
    ae12:	20 ed       	ldi	r18, 0xD0	; 208
    ae14:	37 e0       	ldi	r19, 0x07	; 7
    ae16:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ae1a:	88 23       	and	r24, r24
    ae1c:	19 f0       	breq	.+6      	; 0xae24 <Config_Wifi+0x39a>
			display_putString("ssid...........OK",col,0,System5x7);
    ae1e:	8b e3       	ldi	r24, 0x3B	; 59
    ae20:	98 e2       	ldi	r25, 0x28	; 40
    ae22:	02 c0       	rjmp	.+4      	; 0xae28 <Config_Wifi+0x39e>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    ae24:	8d e4       	ldi	r24, 0x4D	; 77
    ae26:	98 e2       	ldi	r25, 0x28	; 40
    ae28:	61 2f       	mov	r22, r17
    ae2a:	40 e0       	ldi	r20, 0x00	; 0
    ae2c:	23 e4       	ldi	r18, 0x43	; 67
    ae2e:	30 e3       	ldi	r19, 0x30	; 48
    ae30:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		}
		display_writeBufferToScreen();
    ae34:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    ae38:	88 e9       	ldi	r24, 0x98	; 152
    ae3a:	9a e3       	ldi	r25, 0x3A	; 58
    ae3c:	20 e7       	ldi	r18, 0x70	; 112
    ae3e:	31 e0       	ldi	r19, 0x01	; 1
    ae40:	f9 01       	movw	r30, r18
    ae42:	31 97       	sbiw	r30, 0x01	; 1
    ae44:	f1 f7       	brne	.-4      	; 0xae42 <Config_Wifi+0x3b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae48:	d9 f7       	brne	.-10     	; 0xae40 <Config_Wifi+0x3b6>
		_delay_ms(1500);
		col++;
    ae4a:	1f 5f       	subi	r17, 0xFF	; 255
	}

	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    ae4c:	8f e5       	ldi	r24, 0x5F	; 95
    ae4e:	98 e2       	ldi	r25, 0x28	; 40
    ae50:	68 e6       	ldi	r22, 0x68	; 104
    ae52:	78 e2       	ldi	r23, 0x28	; 40
    ae54:	ab 01       	movw	r20, r22
    ae56:	24 ef       	ldi	r18, 0xF4	; 244
    ae58:	31 e0       	ldi	r19, 0x01	; 1
    ae5a:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    ae5e:	88 e8       	ldi	r24, 0x88	; 136
    ae60:	93 e1       	ldi	r25, 0x13	; 19
    ae62:	20 e7       	ldi	r18, 0x70	; 112
    ae64:	31 e0       	ldi	r19, 0x01	; 1
    ae66:	f9 01       	movw	r30, r18
    ae68:	31 97       	sbiw	r30, 0x01	; 1
    ae6a:	f1 f7       	brne	.-4      	; 0xae68 <Config_Wifi+0x3de>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae6e:	d9 f7       	brne	.-10     	; 0xae66 <Config_Wifi+0x3dc>
	_delay_ms(500);

	Wifi_GetMac(1000);
    ae70:	88 ee       	ldi	r24, 0xE8	; 232
    ae72:	93 e0       	ldi	r25, 0x03	; 3
    ae74:	0e 94 df 44 	call	0x89be	; 0x89be <Wifi_GetMac>
    ae78:	88 e8       	ldi	r24, 0x88	; 136
    ae7a:	93 e1       	ldi	r25, 0x13	; 19
    ae7c:	20 e7       	ldi	r18, 0x70	; 112
    ae7e:	31 e0       	ldi	r19, 0x01	; 1
    ae80:	f9 01       	movw	r30, r18
    ae82:	31 97       	sbiw	r30, 0x01	; 1
    ae84:	f1 f7       	brne	.-4      	; 0xae82 <Config_Wifi+0x3f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae88:	d9 f7       	brne	.-10     	; 0xae80 <Config_Wifi+0x3f6>
	_delay_ms(500);
	Wifi_ExitCMDMode(500);
    ae8a:	84 ef       	ldi	r24, 0xF4	; 244
    ae8c:	91 e0       	ldi	r25, 0x01	; 1
    ae8e:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    ae92:	80 e1       	ldi	r24, 0x10	; 16
    ae94:	97 e2       	ldi	r25, 0x27	; 39
    ae96:	20 e7       	ldi	r18, 0x70	; 112
    ae98:	31 e0       	ldi	r19, 0x01	; 1
    ae9a:	f9 01       	movw	r30, r18
    ae9c:	31 97       	sbiw	r30, 0x01	; 1
    ae9e:	f1 f7       	brne	.-4      	; 0xae9c <Config_Wifi+0x412>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aea0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aea2:	d9 f7       	brne	.-10     	; 0xae9a <Config_Wifi+0x410>

	_delay_ms(1000);
	
	if(Wifi_Connected(1000)){
    aea4:	88 ee       	ldi	r24, 0xE8	; 232
    aea6:	93 e0       	ldi	r25, 0x03	; 3
    aea8:	0e 94 33 03 	call	0x666	; 0x666 <Wifi_Connected>
    aeac:	88 23       	and	r24, r24
    aeae:	61 f0       	breq	.+24     	; 0xaec8 <Config_Wifi+0x43e>
		display_putString("network........OK",col,0,System5x7);
    aeb0:	82 e7       	ldi	r24, 0x72	; 114
    aeb2:	98 e2       	ldi	r25, 0x28	; 40
    aeb4:	61 2f       	mov	r22, r17
    aeb6:	40 e0       	ldi	r20, 0x00	; 0
    aeb8:	23 e4       	ldi	r18, 0x43	; 67
    aeba:	30 e3       	ldi	r19, 0x30	; 48
    aebc:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		connected = true;
    aec0:	81 e0       	ldi	r24, 0x01	; 1
    aec2:	80 93 be 32 	sts	0x32BE, r24
    aec6:	0a c0       	rjmp	.+20     	; 0xaedc <Config_Wifi+0x452>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    aec8:	84 e8       	ldi	r24, 0x84	; 132
    aeca:	98 e2       	ldi	r25, 0x28	; 40
    aecc:	61 2f       	mov	r22, r17
    aece:	40 e0       	ldi	r20, 0x00	; 0
    aed0:	23 e4       	ldi	r18, 0x43	; 67
    aed2:	30 e3       	ldi	r19, 0x30	; 48
    aed4:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		connected = false;
    aed8:	10 92 be 32 	sts	0x32BE, r1
	}
	display_writeBufferToScreen();
    aedc:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
	col++;
    aee0:	01 2f       	mov	r16, r17
    aee2:	0f 5f       	subi	r16, 0xFF	; 255


	
	if(connected){
    aee4:	80 91 be 32 	lds	r24, 0x32BE
    aee8:	88 23       	and	r24, r24
    aeea:	09 f4       	brne	.+2      	; 0xaeee <Config_Wifi+0x464>
    aeec:	ad c0       	rjmp	.+346    	; 0xb048 <Config_Wifi+0x5be>
    aeee:	80 e1       	ldi	r24, 0x10	; 16
    aef0:	97 e2       	ldi	r25, 0x27	; 39
    aef2:	20 e7       	ldi	r18, 0x70	; 112
    aef4:	31 e0       	ldi	r19, 0x01	; 1
    aef6:	f9 01       	movw	r30, r18
    aef8:	31 97       	sbiw	r30, 0x01	; 1
    aefa:	f1 f7       	brne	.-4      	; 0xaef8 <Config_Wifi+0x46e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aefc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aefe:	d9 f7       	brne	.-10     	; 0xaef6 <Config_Wifi+0x46c>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    af00:	84 ef       	ldi	r24, 0xF4	; 244
    af02:	91 e0       	ldi	r25, 0x01	; 1
    af04:	0e 94 6e 43 	call	0x86dc	; 0x86dc <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    af08:	88 ee       	ldi	r24, 0xE8	; 232
    af0a:	93 e0       	ldi	r25, 0x03	; 3
    af0c:	0e 94 a6 4b 	call	0x974c	; 0x974c <Wifi_GetTime>
    af10:	88 23       	and	r24, r24
    af12:	09 f4       	brne	.+2      	; 0xaf16 <Config_Wifi+0x48c>
    af14:	5a c0       	rjmp	.+180    	; 0xafca <Config_Wifi+0x540>
			Time_Set(time_secs);
    af16:	80 91 b6 32 	lds	r24, 0x32B6
    af1a:	90 91 b7 32 	lds	r25, 0x32B7
    af1e:	a0 91 b8 32 	lds	r26, 0x32B8
    af22:	b0 91 b9 32 	lds	r27, 0x32B9
	
	
}

void Time_Set(uint32_t time){
  cli();
    af26:	f8 94       	cli
  UNIX_time = time;
    af28:	80 93 d8 32 	sts	0x32D8, r24
    af2c:	90 93 d9 32 	sts	0x32D9, r25
    af30:	a0 93 da 32 	sts	0x32DA, r26
    af34:	b0 93 db 32 	sts	0x32DB, r27
  sei();
    af38:	78 94       	sei
		    timeIsValid = true;
    af3a:	11 e0       	ldi	r17, 0x01	; 1
    af3c:	10 93 1a 33 	sts	0x331A, r17
			display_putString("internet.......OK",col,0,System5x7);
    af40:	86 e9       	ldi	r24, 0x96	; 150
    af42:	98 e2       	ldi	r25, 0x28	; 40
    af44:	60 2f       	mov	r22, r16
    af46:	40 e0       	ldi	r20, 0x00	; 0
    af48:	23 e4       	ldi	r18, 0x43	; 67
    af4a:	30 e3       	ldi	r19, 0x30	; 48
    af4c:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
			signalStrength = Wifi_GetSignalStrength(1000);
    af50:	88 ee       	ldi	r24, 0xE8	; 232
    af52:	93 e0       	ldi	r25, 0x03	; 3
    af54:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <Wifi_GetSignalStrength>
    af58:	80 93 04 33 	sts	0x3304, r24

	        Debug_SendString("Getting space remaining",true);
    af5c:	88 ea       	ldi	r24, 0xA8	; 168
    af5e:	98 e2       	ldi	r25, 0x28	; 40
    af60:	61 e0       	ldi	r22, 0x01	; 1
    af62:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
	        okToGetRemainingSpace = true;
    af66:	10 93 f0 4a 	sts	0x4AF0, r17
	        while(!okToGetRemainingSpace);
    af6a:	80 91 f0 4a 	lds	r24, 0x4AF0
    af6e:	88 23       	and	r24, r24
    af70:	e1 f3       	breq	.-8      	; 0xaf6a <Config_Wifi+0x4e0>
            if(!recording){
    af72:	80 91 dd 32 	lds	r24, 0x32DD
    af76:	88 23       	and	r24, r24
    af78:	31 f4       	brne	.+12     	; 0xaf86 <Config_Wifi+0x4fc>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    af7a:	e0 e2       	ldi	r30, 0x20	; 32
    af7c:	f6 e0       	ldi	r31, 0x06	; 6
    af7e:	80 e4       	ldi	r24, 0x40	; 64
    af80:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    af82:	80 e8       	ldi	r24, 0x80	; 128
    af84:	86 83       	std	Z+6, r24	; 0x06
    af86:	80 e1       	ldi	r24, 0x10	; 16
    af88:	97 e2       	ldi	r25, 0x27	; 39
    af8a:	20 e7       	ldi	r18, 0x70	; 112
    af8c:	31 e0       	ldi	r19, 0x01	; 1
    af8e:	f9 01       	movw	r30, r18
    af90:	31 97       	sbiw	r30, 0x01	; 1
    af92:	f1 f7       	brne	.-4      	; 0xaf90 <Config_Wifi+0x506>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af96:	d9 f7       	brne	.-10     	; 0xaf8e <Config_Wifi+0x504>
                Leds_Set(wifi_Green);
			    Leds_Clear(wifi_Red);
            }
			_delay_ms(1000);
            Wifi_SendCommand("set uart instant 460800","AOK","AOK",5);
    af98:	80 ec       	ldi	r24, 0xC0	; 192
    af9a:	98 e2       	ldi	r25, 0x28	; 40
    af9c:	69 ec       	ldi	r22, 0xC9	; 201
    af9e:	76 e2       	ldi	r23, 0x26	; 38
    afa0:	ab 01       	movw	r20, r22
    afa2:	25 e0       	ldi	r18, 0x05	; 5
    afa4:	30 e0       	ldi	r19, 0x00	; 0
    afa6:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
            Wifi_Init(460800);
    afaa:	60 e0       	ldi	r22, 0x00	; 0
    afac:	78 e0       	ldi	r23, 0x08	; 8
    afae:	87 e0       	ldi	r24, 0x07	; 7
    afb0:	90 e0       	ldi	r25, 0x00	; 0
    afb2:	0e 94 ac 02 	call	0x558	; 0x558 <Wifi_Init>
    afb6:	80 e3       	ldi	r24, 0x30	; 48
    afb8:	95 e7       	ldi	r25, 0x75	; 117
    afba:	20 e7       	ldi	r18, 0x70	; 112
    afbc:	31 e0       	ldi	r19, 0x01	; 1
    afbe:	f9 01       	movw	r30, r18
    afc0:	31 97       	sbiw	r30, 0x01	; 1
    afc2:	f1 f7       	brne	.-4      	; 0xafc0 <Config_Wifi+0x536>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    afc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    afc6:	d9 f7       	brne	.-10     	; 0xafbe <Config_Wifi+0x534>
    afc8:	1d c0       	rjmp	.+58     	; 0xb004 <Config_Wifi+0x57a>
	        _delay_ms(3000);
		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    afca:	88 ed       	ldi	r24, 0xD8	; 216
    afcc:	98 e2       	ldi	r25, 0x28	; 40
    afce:	60 2f       	mov	r22, r16
    afd0:	40 e0       	ldi	r20, 0x00	; 0
    afd2:	23 e4       	ldi	r18, 0x43	; 67
    afd4:	30 e3       	ldi	r19, 0x30	; 48
    afd6:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
            if(!recording){
    afda:	80 91 dd 32 	lds	r24, 0x32DD
    afde:	88 23       	and	r24, r24
    afe0:	31 f4       	brne	.+12     	; 0xafee <Config_Wifi+0x564>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    afe2:	e0 e2       	ldi	r30, 0x20	; 32
    afe4:	f6 e0       	ldi	r31, 0x06	; 6
    afe6:	80 e8       	ldi	r24, 0x80	; 128
    afe8:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    afea:	80 e4       	ldi	r24, 0x40	; 64
    afec:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
            }
			connected = false;
    afee:	10 92 be 32 	sts	0x32BE, r1
    aff2:	88 e8       	ldi	r24, 0x88	; 136
    aff4:	93 e1       	ldi	r25, 0x13	; 19
    aff6:	20 e7       	ldi	r18, 0x70	; 112
    aff8:	31 e0       	ldi	r19, 0x01	; 1
    affa:	f9 01       	movw	r30, r18
    affc:	31 97       	sbiw	r30, 0x01	; 1
    affe:	f1 f7       	brne	.-4      	; 0xaffc <Config_Wifi+0x572>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b000:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b002:	d9 f7       	brne	.-10     	; 0xaffa <Config_Wifi+0x570>
			_delay_ms(500);

		}

		display_writeBufferToScreen();
    b004:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    b008:	80 e1       	ldi	r24, 0x10	; 16
    b00a:	97 e2       	ldi	r25, 0x27	; 39
    b00c:	20 e7       	ldi	r18, 0x70	; 112
    b00e:	31 e0       	ldi	r19, 0x01	; 1
    b010:	f9 01       	movw	r30, r18
    b012:	31 97       	sbiw	r30, 0x01	; 1
    b014:	f1 f7       	brne	.-4      	; 0xb012 <Config_Wifi+0x588>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b016:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b018:	d9 f7       	brne	.-10     	; 0xb010 <Config_Wifi+0x586>
    b01a:	0d c0       	rjmp	.+26     	; 0xb036 <Config_Wifi+0x5ac>
    b01c:	80 e1       	ldi	r24, 0x10	; 16
    b01e:	97 e2       	ldi	r25, 0x27	; 39
    b020:	f8 01       	movw	r30, r16
    b022:	31 97       	sbiw	r30, 0x01	; 1
    b024:	f1 f7       	brne	.-4      	; 0xb022 <Config_Wifi+0x598>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b026:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b028:	d9 f7       	brne	.-10     	; 0xb020 <Config_Wifi+0x596>
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
    b02a:	8a ee       	ldi	r24, 0xEA	; 234
    b02c:	98 e2       	ldi	r25, 0x28	; 40
    b02e:	61 e0       	ldi	r22, 0x01	; 1
    b030:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    b034:	02 c0       	rjmp	.+4      	; 0xb03a <Config_Wifi+0x5b0>
    b036:	00 e7       	ldi	r16, 0x70	; 112
    b038:	11 e0       	ldi	r17, 0x01	; 1

		}

		display_writeBufferToScreen();
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
    b03a:	88 ee       	ldi	r24, 0xE8	; 232
    b03c:	93 e0       	ldi	r25, 0x03	; 3
    b03e:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    b042:	88 23       	and	r24, r24
    b044:	59 f3       	breq	.-42     	; 0xb01c <Config_Wifi+0x592>
    b046:	12 c0       	rjmp	.+36     	; 0xb06c <Config_Wifi+0x5e2>
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
		}

	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    b048:	88 ed       	ldi	r24, 0xD8	; 216
    b04a:	98 e2       	ldi	r25, 0x28	; 40
    b04c:	60 2f       	mov	r22, r16
    b04e:	40 e0       	ldi	r20, 0x00	; 0
    b050:	23 e4       	ldi	r18, 0x43	; 67
    b052:	30 e3       	ldi	r19, 0x30	; 48
    b054:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
		display_writeBufferToScreen();
    b058:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
        if(!recording){
    b05c:	80 91 dd 32 	lds	r24, 0x32DD
    b060:	88 23       	and	r24, r24
    b062:	21 f4       	brne	.+8      	; 0xb06c <Config_Wifi+0x5e2>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b064:	80 e8       	ldi	r24, 0x80	; 128
    b066:	e0 e2       	ldi	r30, 0x20	; 32
    b068:	f6 e0       	ldi	r31, 0x06	; 6
    b06a:	85 83       	std	Z+5, r24	; 0x05
		    Leds_Set(wifi_Red);
        }
	}


}
    b06c:	1f 91       	pop	r17
    b06e:	0f 91       	pop	r16
    b070:	08 95       	ret

0000b072 <main>:


// ********************************** Main Program *********************************


int main(void){
    b072:	2f 92       	push	r2
    b074:	3f 92       	push	r3
    b076:	5f 92       	push	r5
    b078:	6f 92       	push	r6
    b07a:	7f 92       	push	r7
    b07c:	8f 92       	push	r8
    b07e:	9f 92       	push	r9
    b080:	af 92       	push	r10
    b082:	bf 92       	push	r11
    b084:	cf 92       	push	r12
    b086:	df 92       	push	r13
    b088:	ef 92       	push	r14
    b08a:	ff 92       	push	r15
    b08c:	0f 93       	push	r16
    b08e:	1f 93       	push	r17
    b090:	df 93       	push	r29
    b092:	cf 93       	push	r28
    b094:	0f 92       	push	r0
    b096:	cd b7       	in	r28, 0x3d	; 61
    b098:	de b7       	in	r29, 0x3e	; 62
    b09a:	80 e0       	ldi	r24, 0x00	; 0
    b09c:	98 e4       	ldi	r25, 0x48	; 72
    b09e:	01 97       	sbiw	r24, 0x01	; 1
    b0a0:	f1 f7       	brne	.-4      	; 0xb09e <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    b0a2:	0e 94 da 39 	call	0x73b4	; 0x73b4 <Clock_Init>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    b0a6:	8f b7       	in	r24, 0x3f	; 63
    b0a8:	89 83       	std	Y+1, r24	; 0x01
    cli();
    b0aa:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    b0ac:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    b0ae:	21 e0       	ldi	r18, 0x01	; 1
    b0b0:	86 e9       	ldi	r24, 0x96	; 150
    b0b2:	90 e0       	ldi	r25, 0x00	; 0
    b0b4:	fc 01       	movw	r30, r24
    b0b6:	08 ed       	ldi	r16, 0xD8	; 216
    b0b8:	04 bf       	out	0x34, r16	; 52
    b0ba:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    b0bc:	89 81       	ldd	r24, Y+1	; 0x01
    b0be:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();

	getDeviceID();
    b0c0:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <getDeviceID>
	display_init();
    b0c4:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <display_init>

	Time_Init();
    b0c8:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Time_Init>
	Sensors_Init();
    b0cc:	0e 94 a4 30 	call	0x6148	; 0x6148 <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    b0d0:	80 91 21 06 	lds	r24, 0x0621
    b0d4:	83 6f       	ori	r24, 0xF3	; 243
    b0d6:	e0 e2       	ldi	r30, 0x20	; 32
    b0d8:	f6 e0       	ldi	r31, 0x06	; 6
    b0da:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    b0dc:	0e 94 4d 03 	call	0x69a	; 0x69a <Dpad_Init>


	Rs232_Init();
    b0e0:	0e 94 99 03 	call	0x732	; 0x732 <Rs232_Init>

	Light_Init(LightAddress);
    b0e4:	82 e7       	ldi	r24, 0x72	; 114
    b0e6:	0e 94 1d 33 	call	0x663a	; 0x663a <Light_Init>


	Display_BackgroundWriter_Init();
    b0ea:	0e 94 57 3a 	call	0x74ae	; 0x74ae <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    b0ee:	0e 94 66 3a 	call	0x74cc	; 0x74cc <SD_BackroundWriter_Init>
	DMA_Init();
    b0f2:	0e 94 1f 3a 	call	0x743e	; 0x743e <DMA_Init>


	display_putString("   BaseStation   ",1,0,System5x7);
    b0f6:	81 e0       	ldi	r24, 0x01	; 1
    b0f8:	99 e2       	ldi	r25, 0x29	; 41
    b0fa:	61 e0       	ldi	r22, 0x01	; 1
    b0fc:	40 e0       	ldi	r20, 0x00	; 0
    b0fe:	23 e4       	ldi	r18, 0x43	; 67
    b100:	30 e3       	ldi	r19, 0x30	; 48
    b102:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
	strcat(temp,"  Hardware: v");
    b106:	80 eb       	ldi	r24, 0xB0	; 176
    b108:	99 e4       	ldi	r25, 0x49	; 73
    b10a:	63 e1       	ldi	r22, 0x13	; 19
    b10c:	79 e2       	ldi	r23, 0x29	; 41
    b10e:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	strcat(temp,HardwareVersion);
    b112:	80 eb       	ldi	r24, 0xB0	; 176
    b114:	99 e4       	ldi	r25, 0x49	; 73
    b116:	6a ea       	ldi	r22, 0xAA	; 170
    b118:	73 e2       	ldi	r23, 0x23	; 35
    b11a:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	display_putString(temp,3,0,System5x7);
    b11e:	80 eb       	ldi	r24, 0xB0	; 176
    b120:	99 e4       	ldi	r25, 0x49	; 73
    b122:	63 e0       	ldi	r22, 0x03	; 3
    b124:	40 e0       	ldi	r20, 0x00	; 0
    b126:	23 e4       	ldi	r18, 0x43	; 67
    b128:	30 e3       	ldi	r19, 0x30	; 48
    b12a:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
	temp[0] = 0;
    b12e:	10 92 b0 49 	sts	0x49B0, r1
	strcat(temp," Firmware: v");
    b132:	80 eb       	ldi	r24, 0xB0	; 176
    b134:	99 e4       	ldi	r25, 0x49	; 73
    b136:	61 e2       	ldi	r22, 0x21	; 33
    b138:	79 e2       	ldi	r23, 0x29	; 41
    b13a:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	strcat(temp,FirmwareVersion);
    b13e:	80 eb       	ldi	r24, 0xB0	; 176
    b140:	99 e4       	ldi	r25, 0x49	; 73
    b142:	64 e9       	ldi	r22, 0x94	; 148
    b144:	73 e2       	ldi	r23, 0x23	; 35
    b146:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
	display_putString(temp,5,0,System5x7);
    b14a:	80 eb       	ldi	r24, 0xB0	; 176
    b14c:	99 e4       	ldi	r25, 0x49	; 73
    b14e:	65 e0       	ldi	r22, 0x05	; 5
    b150:	40 e0       	ldi	r20, 0x00	; 0
    b152:	23 e4       	ldi	r18, 0x43	; 67
    b154:	30 e3       	ldi	r19, 0x30	; 48
    b156:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
	display_writeBufferToScreen();
    b15a:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
    b15e:	80 e1       	ldi	r24, 0x10	; 16
    b160:	97 e2       	ldi	r25, 0x27	; 39
    b162:	20 e7       	ldi	r18, 0x70	; 112
    b164:	31 e0       	ldi	r19, 0x01	; 1
    b166:	f9 01       	movw	r30, r18
    b168:	31 97       	sbiw	r30, 0x01	; 1
    b16a:	f1 f7       	brne	.-4      	; 0xb168 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b16c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b16e:	d9 f7       	brne	.-10     	; 0xb166 <main+0xf4>
	_delay_ms(1000);


    SD_Init();
    b170:	0e 94 2f 2c 	call	0x585e	; 0x585e <SD_Init>

}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    b174:	80 91 a2 00 	lds	r24, 0x00A2
    b178:	87 60       	ori	r24, 0x07	; 7
    b17a:	e0 ea       	ldi	r30, 0xA0	; 160
    b17c:	f0 e0       	ldi	r31, 0x00	; 0
    b17e:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    b180:	78 94       	sei
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    b182:	a0 e2       	ldi	r26, 0x20	; 32
    b184:	b6 e0       	ldi	r27, 0x06	; 6
    b186:	42 e0       	ldi	r20, 0x02	; 2
    b188:	20 e7       	ldi	r18, 0x70	; 112
    b18a:	31 e0       	ldi	r19, 0x01	; 1
    b18c:	05 c0       	rjmp	.+10     	; 0xb198 <main+0x126>
    b18e:	f9 01       	movw	r30, r18
    b190:	31 97       	sbiw	r30, 0x01	; 1
    b192:	f1 f7       	brne	.-4      	; 0xb190 <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b196:	d9 f7       	brne	.-10     	; 0xb18e <main+0x11c>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    b198:	80 91 a8 06 	lds	r24, 0x06A8
    b19c:	80 ff       	sbrs	r24, 0
    b19e:	96 c7       	rjmp	.+3884   	; 0xc0cc <main+0x105a>
    b1a0:	17 96       	adiw	r26, 0x07	; 7
    b1a2:	4c 93       	st	X, r20
    b1a4:	17 97       	sbiw	r26, 0x07	; 7
    b1a6:	88 e8       	ldi	r24, 0x88	; 136
    b1a8:	93 e1       	ldi	r25, 0x13	; 19
    b1aa:	f1 cf       	rjmp	.-30     	; 0xb18e <main+0x11c>
    b1ac:	ca 01       	movw	r24, r20
    b1ae:	01 97       	sbiw	r24, 0x01	; 1
    b1b0:	f1 f7       	brne	.-4      	; 0xb1ae <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b1b2:	21 50       	subi	r18, 0x01	; 1
    b1b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1b6:	d1 f7       	brne	.-12     	; 0xb1ac <main+0x13a>
	}
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);

	Read_config_file();
    b1b8:	0e 94 57 4c 	call	0x98ae	; 0x98ae <Read_config_file>

    if(demoMode){
    b1bc:	80 91 a8 32 	lds	r24, 0x32A8
    b1c0:	88 23       	and	r24, r24
    b1c2:	19 f0       	breq	.+6      	; 0xb1ca <main+0x158>
		display_putString("    Demo Mode    ",7,0,System5x7);
    b1c4:	8e e2       	ldi	r24, 0x2E	; 46
    b1c6:	99 e2       	ldi	r25, 0x29	; 41
    b1c8:	09 c0       	rjmp	.+18     	; 0xb1dc <main+0x16a>
	} else if(useWifiForUploading) {
    b1ca:	80 91 a9 32 	lds	r24, 0x32A9
    b1ce:	88 23       	and	r24, r24
    b1d0:	19 f0       	breq	.+6      	; 0xb1d8 <main+0x166>
	    display_putString("  Uploader: Wifi ",7,0,System5x7);
    b1d2:	80 e4       	ldi	r24, 0x40	; 64
    b1d4:	99 e2       	ldi	r25, 0x29	; 41
    b1d6:	02 c0       	rjmp	.+4      	; 0xb1dc <main+0x16a>
	} else {
	    display_putString("  Uploader: USB  ",7,0,System5x7);
    b1d8:	82 e5       	ldi	r24, 0x52	; 82
    b1da:	99 e2       	ldi	r25, 0x29	; 41
    b1dc:	67 e0       	ldi	r22, 0x07	; 7
    b1de:	40 e0       	ldi	r20, 0x00	; 0
    b1e0:	23 e4       	ldi	r18, 0x43	; 67
    b1e2:	30 e3       	ldi	r19, 0x30	; 48
    b1e4:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <display_putString>
	}
    display_writeBufferToScreen();
    b1e8:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>

    if(useWifiForUploading){
    b1ec:	80 91 a9 32 	lds	r24, 0x32A9
    b1f0:	88 23       	and	r24, r24
    b1f2:	29 f0       	breq	.+10     	; 0xb1fe <main+0x18c>
	   Debug_Init(9600);
    b1f4:	60 e8       	ldi	r22, 0x80	; 128
    b1f6:	75 e2       	ldi	r23, 0x25	; 37
    b1f8:	80 e0       	ldi	r24, 0x00	; 0
    b1fa:	90 e0       	ldi	r25, 0x00	; 0
    b1fc:	04 c0       	rjmp	.+8      	; 0xb206 <main+0x194>
	} else {
	   Debug_Init(115200);
    b1fe:	60 e0       	ldi	r22, 0x00	; 0
    b200:	72 ec       	ldi	r23, 0xC2	; 194
    b202:	81 e0       	ldi	r24, 0x01	; 1
    b204:	90 e0       	ldi	r25, 0x00	; 0
    b206:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	}


    if(demoMode){                                   // go into demo mode
    b20a:	80 91 a8 32 	lds	r24, 0x32A8
    b20e:	88 23       	and	r24, r24
    b210:	91 f0       	breq	.+36     	; 0xb236 <main+0x1c4>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b212:	80 e4       	ldi	r24, 0x40	; 64
    b214:	e0 e2       	ldi	r30, 0x20	; 32
    b216:	f6 e0       	ldi	r31, 0x06	; 6
    b218:	85 83       	std	Z+5, r24	; 0x05
		Leds_Set(wifi_Green);
        display_clearBuffer();
    b21a:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
	    display_writeBufferToScreen();
    b21e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>
	    okToDisplayGUI = true;
    b222:	81 e0       	ldi	r24, 0x01	; 1
    b224:	80 93 0b 33 	sts	0x330B, r24
        okToOpenLogFile = true;
    b228:	80 93 08 33 	sts	0x3308, r24
	    while(!recording);
    b22c:	80 91 dd 32 	lds	r24, 0x32DD
    b230:	88 23       	and	r24, r24
    b232:	e1 f3       	breq	.-8      	; 0xb22c <main+0x1ba>
    b234:	ff cf       	rjmp	.-2      	; 0xb234 <main+0x1c2>
    b236:	80 e8       	ldi	r24, 0x80	; 128
    b238:	e0 e2       	ldi	r30, 0x20	; 32
    b23a:	f6 e0       	ldi	r31, 0x06	; 6
    b23c:	85 83       	std	Z+5, r24	; 0x05

                uploadTimeStart = UNIX_time;
                uploadTimedOut = false;


                memmove(temp,strtok(fileToUpload,"/"),12);
    b23e:	05 ed       	ldi	r16, 0xD5	; 213
    b240:	20 2e       	mov	r2, r16
    b242:	0b e3       	ldi	r16, 0x3B	; 59
    b244:	30 2e       	mov	r3, r16
	} else {
	    Leds_Set(wifi_Red);
	}

    Reset:
    okToFindFileToUpload = false;
    b246:	10 92 0c 33 	sts	0x330C, r1
    connected = false;
    b24a:	10 92 be 32 	sts	0x32BE, r1
    if(useWifiForUploading){                // connect to uploader  (wifi)
    b24e:	80 91 a9 32 	lds	r24, 0x32A9
    b252:	88 23       	and	r24, r24
    b254:	e9 f0       	breq	.+58     	; 0xb290 <main+0x21e>
        okToDisplayGUI = false;
    b256:	10 92 0b 33 	sts	0x330B, r1
        Wifi_Init(9600);
    b25a:	60 e8       	ldi	r22, 0x80	; 128
    b25c:	75 e2       	ldi	r23, 0x25	; 37
    b25e:	80 e0       	ldi	r24, 0x00	; 0
    b260:	90 e0       	ldi	r25, 0x00	; 0
    b262:	0e 94 ac 02 	call	0x558	; 0x558 <Wifi_Init>
    b266:	00 e7       	ldi	r16, 0x70	; 112
    b268:	11 e0       	ldi	r17, 0x01	; 1
    b26a:	09 c0       	rjmp	.+18     	; 0xb27e <main+0x20c>
        while(!connected && !demoMode){
            Config_Wifi();
    b26c:	0e 94 45 55 	call	0xaa8a	; 0xaa8a <Config_Wifi>
    b270:	88 e8       	ldi	r24, 0x88	; 136
    b272:	93 e1       	ldi	r25, 0x13	; 19
    b274:	f8 01       	movw	r30, r16
    b276:	31 97       	sbiw	r30, 0x01	; 1
    b278:	f1 f7       	brne	.-4      	; 0xb276 <main+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b27a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b27c:	d9 f7       	brne	.-10     	; 0xb274 <main+0x202>
    okToFindFileToUpload = false;
    connected = false;
    if(useWifiForUploading){                // connect to uploader  (wifi)
        okToDisplayGUI = false;
        Wifi_Init(9600);
        while(!connected && !demoMode){
    b27e:	80 91 be 32 	lds	r24, 0x32BE
    b282:	88 23       	and	r24, r24
    b284:	b1 f4       	brne	.+44     	; 0xb2b2 <main+0x240>
    b286:	80 91 a8 32 	lds	r24, 0x32A8
    b28a:	88 23       	and	r24, r24
    b28c:	79 f3       	breq	.-34     	; 0xb26c <main+0x1fa>
    b28e:	11 c0       	rjmp	.+34     	; 0xb2b2 <main+0x240>
            Config_Wifi();
       	    _delay_ms(500);
        }
    } else {                                // usb uploader
        connectToComputer();
    b290:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <connectToComputer>
    b294:	88 e8       	ldi	r24, 0x88	; 136
    b296:	93 e1       	ldi	r25, 0x13	; 19
    b298:	20 e7       	ldi	r18, 0x70	; 112
    b29a:	31 e0       	ldi	r19, 0x01	; 1
    b29c:	f9 01       	movw	r30, r18
    b29e:	31 97       	sbiw	r30, 0x01	; 1
    b2a0:	f1 f7       	brne	.-4      	; 0xb29e <main+0x22c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b2a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b2a4:	d9 f7       	brne	.-10     	; 0xb29c <main+0x22a>
       	_delay_ms(500);
       	connected = true;
    b2a6:	81 e0       	ldi	r24, 0x01	; 1
    b2a8:	80 93 be 32 	sts	0x32BE, r24
        signalStrength = 100;
    b2ac:	84 e6       	ldi	r24, 0x64	; 100
    b2ae:	80 93 04 33 	sts	0x3304, r24
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b2b2:	e0 e2       	ldi	r30, 0x20	; 32
    b2b4:	f6 e0       	ldi	r31, 0x06	; 6
    b2b6:	80 e8       	ldi	r24, 0x80	; 128
    b2b8:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b2ba:	80 e4       	ldi	r24, 0x40	; 64
    b2bc:	85 83       	std	Z+5, r24	; 0x05


  	Leds_Clear(wifi_Red);
	Leds_Set(wifi_Green);

	display_clearBuffer();
    b2be:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <display_clearBuffer>
	display_writeBufferToScreen();
    b2c2:	0e 94 de 2c 	call	0x59bc	; 0x59bc <display_writeBufferToScreen>

    okToDisplayGUI = true;
    b2c6:	91 e0       	ldi	r25, 0x01	; 1
    b2c8:	90 93 0b 33 	sts	0x330B, r25

    if((!recording) && (!uploadTimedOut) && useWifiForUploading){
    b2cc:	80 91 dd 32 	lds	r24, 0x32DD
    b2d0:	88 23       	and	r24, r24
    b2d2:	79 f4       	brne	.+30     	; 0xb2f2 <main+0x280>
    b2d4:	80 91 c4 32 	lds	r24, 0x32C4
    b2d8:	88 23       	and	r24, r24
    b2da:	59 f4       	brne	.+22     	; 0xb2f2 <main+0x280>
    b2dc:	80 91 a9 32 	lds	r24, 0x32A9
    b2e0:	88 23       	and	r24, r24
    b2e2:	39 f0       	breq	.+14     	; 0xb2f2 <main+0x280>
	    okToOpenLogFile = true;
    b2e4:	90 93 08 33 	sts	0x3308, r25
	    while(!recording);
    b2e8:	80 91 dd 32 	lds	r24, 0x32DD
    b2ec:	88 23       	and	r24, r24
    b2ee:	e1 f3       	breq	.-8      	; 0xb2e8 <main+0x276>
    b2f0:	06 c0       	rjmp	.+12     	; 0xb2fe <main+0x28c>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b2f2:	e0 e2       	ldi	r30, 0x20	; 32
    b2f4:	f6 e0       	ldi	r31, 0x06	; 6
    b2f6:	80 e4       	ldi	r24, 0x40	; 64
    b2f8:	86 83       	std	Z+6, r24	; 0x06
    b2fa:	80 e8       	ldi	r24, 0x80	; 128
    b2fc:	86 83       	std	Z+6, r24	; 0x06
    b2fe:	88 ee       	ldi	r24, 0xE8	; 232
    b300:	93 e0       	ldi	r25, 0x03	; 3
    b302:	20 e7       	ldi	r18, 0x70	; 112
    b304:	31 e0       	ldi	r19, 0x01	; 1
    b306:	f9 01       	movw	r30, r18
    b308:	31 97       	sbiw	r30, 0x01	; 1
    b30a:	f1 f7       	brne	.-4      	; 0xb308 <main+0x296>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b30c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b30e:	d9 f7       	brne	.-10     	; 0xb306 <main+0x294>
	    Leds_Clear(wifi_Red);
	}

	_delay_ms(100);

	okToReopenDirectory = true;
    b310:	81 e0       	ldi	r24, 0x01	; 1
    b312:	80 93 0d 33 	sts	0x330D, r24
	okToFindFileToUpload = true;
    b316:	80 93 0c 33 	sts	0x330C, r24
    b31a:	10 e7       	ldi	r17, 0x70	; 112
    b31c:	61 2e       	mov	r6, r17
    b31e:	11 e0       	ldi	r17, 0x01	; 1
    b320:	71 2e       	mov	r7, r17

    Main:

    while(true){
        if(!useWifiForUploading){
    b322:	80 91 a9 32 	lds	r24, 0x32A9
    b326:	88 23       	and	r24, r24
    b328:	09 f0       	breq	.+2      	; 0xb32c <main+0x2ba>
    b32a:	b1 c0       	rjmp	.+354    	; 0xb48e <main+0x41c>
            if(Debug_CharReadyToRead()){
    b32c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Debug_CharReadyToRead>
    b330:	88 23       	and	r24, r24
    b332:	09 f4       	brne	.+2      	; 0xb336 <main+0x2c4>
    b334:	96 c0       	rjmp	.+300    	; 0xb462 <main+0x3f0>

			    timeOutCounter = 0;
    b336:	10 92 c2 32 	sts	0x32C2, r1
    b33a:	10 92 c3 32 	sts	0x32C3, r1
			    command[0] = Debug_GetByte(false);
    b33e:	80 e0       	ldi	r24, 0x00	; 0
    b340:	0e 94 a8 01 	call	0x350	; 0x350 <Debug_GetByte>
    b344:	80 93 82 45 	sts	0x4582, r24

                if(command[0] == 'T'){                          // supply the time
    b348:	80 91 82 45 	lds	r24, 0x4582
    b34c:	84 35       	cpi	r24, 0x54	; 84
    b34e:	c1 f4       	brne	.+48     	; 0xb380 <main+0x30e>
            	    if(getTime()){
    b350:	0e 94 54 3b 	call	0x76a8	; 0x76a8 <getTime>
    b354:	88 23       	and	r24, r24
    b356:	89 f0       	breq	.+34     	; 0xb37a <main+0x308>
            	        timeIsValid = true;
    b358:	91 e0       	ldi	r25, 0x01	; 1
    b35a:	90 93 1a 33 	sts	0x331A, r25
                        okToDisplayGUI = true;
    b35e:	90 93 0b 33 	sts	0x330B, r25
            		    if(!recording){
    b362:	80 91 dd 32 	lds	r24, 0x32DD
    b366:	88 23       	and	r24, r24
    b368:	09 f0       	breq	.+2      	; 0xb36c <main+0x2fa>
    b36a:	7b c0       	rjmp	.+246    	; 0xb462 <main+0x3f0>
            		        okToOpenLogFile = true;
    b36c:	90 93 08 33 	sts	0x3308, r25
            	            while(!recording);
    b370:	80 91 dd 32 	lds	r24, 0x32DD
    b374:	88 23       	and	r24, r24
    b376:	e1 f3       	breq	.-8      	; 0xb370 <main+0x2fe>
    b378:	74 c0       	rjmp	.+232    	; 0xb462 <main+0x3f0>
                        }
            	    } else {
                        timeIsValid = false;
    b37a:	10 92 1a 33 	sts	0x331A, r1
    b37e:	71 c0       	rjmp	.+226    	; 0xb462 <main+0x3f0>
			        }
    			} else if(command[0] == 'S'){                          // request SSID
    b380:	80 91 82 45 	lds	r24, 0x4582
    b384:	83 35       	cpi	r24, 0x53	; 83
    b386:	19 f4       	brne	.+6      	; 0xb38e <main+0x31c>
                    sendSSID();
    b388:	0e 94 00 43 	call	0x8600	; 0x8600 <sendSSID>
    b38c:	6a c0       	rjmp	.+212    	; 0xb462 <main+0x3f0>
		        } else if(command[0] == 'A'){                          // request authorization type
    b38e:	80 91 82 45 	lds	r24, 0x4582
    b392:	81 34       	cpi	r24, 0x41	; 65
    b394:	19 f4       	brne	.+6      	; 0xb39c <main+0x32a>
                    sendAuthType();
    b396:	0e 94 bd 42 	call	0x857a	; 0x857a <sendAuthType>
    b39a:	63 c0       	rjmp	.+198    	; 0xb462 <main+0x3f0>
    			} else if(command[0] == 'K'){                          // request authorisation key
    b39c:	80 91 82 45 	lds	r24, 0x4582
    b3a0:	8b 34       	cpi	r24, 0x4B	; 75
    b3a2:	19 f4       	brne	.+6      	; 0xb3aa <main+0x338>
                    sendKey();
    b3a4:	0e 94 4e 42 	call	0x849c	; 0x849c <sendKey>
    b3a8:	5c c0       	rjmp	.+184    	; 0xb462 <main+0x3f0>
                } else if(command[0] == 'U'){                          // request user
    b3aa:	80 91 82 45 	lds	r24, 0x4582
    b3ae:	85 35       	cpi	r24, 0x55	; 85
    b3b0:	19 f4       	brne	.+6      	; 0xb3b8 <main+0x346>
			        sendUser();
    b3b2:	0e 94 23 42 	call	0x8446	; 0x8446 <sendUser>
    b3b6:	55 c0       	rjmp	.+170    	; 0xb462 <main+0x3f0>
    			} else if(command[0] == 'N'){                   // request nickname
    b3b8:	80 91 82 45 	lds	r24, 0x4582
    b3bc:	8e 34       	cpi	r24, 0x4E	; 78
    b3be:	19 f4       	brne	.+6      	; 0xb3c6 <main+0x354>
	    		    sendNickname();
    b3c0:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <sendNickname>
    b3c4:	4e c0       	rjmp	.+156    	; 0xb462 <main+0x3f0>
    			} else if(command[0] == 'D'){                   // request data from file
    b3c6:	80 91 82 45 	lds	r24, 0x4582
    b3ca:	84 34       	cpi	r24, 0x44	; 68
    b3cc:	f9 f4       	brne	.+62     	; 0xb40c <main+0x39a>
    			    if(okToUpload){
    b3ce:	80 91 13 33 	lds	r24, 0x3313
    b3d2:	88 23       	and	r24, r24
    b3d4:	c1 f0       	breq	.+48     	; 0xb406 <main+0x394>
    			        uploading = true;
    b3d6:	81 e0       	ldi	r24, 0x01	; 1
    b3d8:	80 93 14 33 	sts	0x3314, r24
    b3dc:	88 ee       	ldi	r24, 0xE8	; 232
    b3de:	93 e0       	ldi	r25, 0x03	; 3
    b3e0:	f3 01       	movw	r30, r6
    b3e2:	31 97       	sbiw	r30, 0x01	; 1
    b3e4:	f1 f7       	brne	.-4      	; 0xb3e2 <main+0x370>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3e8:	d9 f7       	brne	.-10     	; 0xb3e0 <main+0x36e>
    			        _delay_ms(100);
                        okToOpenFileToUpload = true;
    b3ea:	81 e0       	ldi	r24, 0x01	; 1
    b3ec:	80 93 16 33 	sts	0x3316, r24
                        while(!uploadFileOpened);
    b3f0:	80 91 40 30 	lds	r24, 0x3040
    b3f4:	88 23       	and	r24, r24
    b3f6:	e1 f3       	breq	.-8      	; 0xb3f0 <main+0x37e>
    b3f8:	80 e1       	ldi	r24, 0x10	; 16
    b3fa:	97 e2       	ldi	r25, 0x27	; 39
    b3fc:	f3 01       	movw	r30, r6
    b3fe:	31 97       	sbiw	r30, 0x01	; 1
    b400:	f1 f7       	brne	.-4      	; 0xb3fe <main+0x38c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b402:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b404:	d9 f7       	brne	.-10     	; 0xb3fc <main+0x38a>

    			        _delay_ms(1000);
    			    }
                    uploadFile();
    b406:	0e 94 b1 40 	call	0x8162	; 0x8162 <uploadFile>
    b40a:	2b c0       	rjmp	.+86     	; 0xb462 <main+0x3f0>
                } else if(command[0] == 'E'){                   // erase file
    b40c:	80 91 82 45 	lds	r24, 0x4582
    b410:	85 34       	cpi	r24, 0x45	; 69
    b412:	19 f4       	brne	.+6      	; 0xb41a <main+0x3a8>
                    eraseFile();
    b414:	0e 94 bb 3b 	call	0x7776	; 0x7776 <eraseFile>
    b418:	24 c0       	rjmp	.+72     	; 0xb462 <main+0x3f0>
                } else if(command[0] == 'V'){                   // request server for post
    b41a:	80 91 82 45 	lds	r24, 0x4582
    b41e:	86 35       	cpi	r24, 0x56	; 86
    b420:	19 f4       	brne	.+6      	; 0xb428 <main+0x3b6>
                    sendServer();
    b422:	0e 94 86 40 	call	0x810c	; 0x810c <sendServer>
    b426:	1d c0       	rjmp	.+58     	; 0xb462 <main+0x3f0>
                } else if(command[0] == 'O'){                   // request port for post
    b428:	80 91 82 45 	lds	r24, 0x4582
    b42c:	8f 34       	cpi	r24, 0x4F	; 79
    b42e:	19 f4       	brne	.+6      	; 0xb436 <main+0x3c4>
                    sendPort();
    b430:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <sendPort>
    b434:	16 c0       	rjmp	.+44     	; 0xb462 <main+0x3f0>
    			}  else if(command[0] == 'R'){                   // reset
    b436:	80 91 82 45 	lds	r24, 0x4582
    b43a:	82 35       	cpi	r24, 0x52	; 82
    b43c:	91 f4       	brne	.+36     	; 0xb462 <main+0x3f0>
    b43e:	80 e0       	ldi	r24, 0x00	; 0
    b440:	98 e4       	ldi	r25, 0x48	; 72
    b442:	01 97       	sbiw	r24, 0x01	; 1
    b444:	f1 f7       	brne	.-4      	; 0xb442 <main+0x3d0>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    b446:	80 91 a1 08 	lds	r24, 0x08A1
    b44a:	85 ff       	sbrs	r24, 5
    b44c:	fc cf       	rjmp	.-8      	; 0xb446 <main+0x3d4>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    b44e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    b452:	82 e5       	ldi	r24, 0x52	; 82
    b454:	80 93 a0 08 	sts	0x08A0, r24
    b458:	80 e4       	ldi	r24, 0x40	; 64
    b45a:	e0 e2       	ldi	r30, 0x20	; 32
    b45c:	f6 e0       	ldi	r31, 0x06	; 6
    b45e:	86 83       	std	Z+6, r24	; 0x06
    b460:	f2 ce       	rjmp	.-540    	; 0xb246 <main+0x1d4>
    b462:	86 e6       	ldi	r24, 0x66	; 102
    b464:	9e e0       	ldi	r25, 0x0E	; 14
    b466:	01 97       	sbiw	r24, 0x01	; 1
    b468:	f1 f7       	brne	.-4      	; 0xb466 <main+0x3f4>
		    		Leds_Clear(wifi_Green);
			    	goto Reset;
			    }
		    }
		    _delay_ms(1);
		    timeOutCounter++;
    b46a:	80 91 c2 32 	lds	r24, 0x32C2
    b46e:	90 91 c3 32 	lds	r25, 0x32C3
    b472:	01 96       	adiw	r24, 0x01	; 1
    b474:	80 93 c2 32 	sts	0x32C2, r24
    b478:	90 93 c3 32 	sts	0x32C3, r25
		    if(timeOutCounter > 30000){
    b47c:	80 91 c2 32 	lds	r24, 0x32C2
    b480:	90 91 c3 32 	lds	r25, 0x32C3
    b484:	81 53       	subi	r24, 0x31	; 49
    b486:	95 47       	sbci	r25, 0x75	; 117
    b488:	08 f4       	brcc	.+2      	; 0xb48c <main+0x41a>
    b48a:	4b cf       	rjmp	.-362    	; 0xb322 <main+0x2b0>
    b48c:	dc ce       	rjmp	.-584    	; 0xb246 <main+0x1d4>
			    goto Reset;
		    }
        } else {
    	    if(ssRefreshCounter > 9000){
    b48e:	80 91 02 33 	lds	r24, 0x3302
    b492:	90 91 03 33 	lds	r25, 0x3303
    b496:	89 52       	subi	r24, 0x29	; 41
    b498:	93 42       	sbci	r25, 0x23	; 35
    b49a:	08 f4       	brcc	.+2      	; 0xb49e <main+0x42c>
    b49c:	66 c0       	rjmp	.+204    	; 0xb56a <main+0x4f8>
	            okToGetRemainingSpace = true;
    b49e:	81 e0       	ldi	r24, 0x01	; 1
    b4a0:	80 93 f0 4a 	sts	0x4AF0, r24
	            while(!okToGetRemainingSpace);
    b4a4:	80 91 f0 4a 	lds	r24, 0x4AF0
    b4a8:	88 23       	and	r24, r24
    b4aa:	e1 f3       	breq	.-8      	; 0xb4a4 <main+0x432>

		        if(useWifiForUploading){
    b4ac:	80 91 a9 32 	lds	r24, 0x32A9
    b4b0:	88 23       	and	r24, r24
    b4b2:	09 f4       	brne	.+2      	; 0xb4b6 <main+0x444>
    b4b4:	3b c0       	rjmp	.+118    	; 0xb52c <main+0x4ba>
		            Wifi_EnterCMDMode(1000);
    b4b6:	88 ee       	ldi	r24, 0xE8	; 232
    b4b8:	93 e0       	ldi	r25, 0x03	; 3
    b4ba:	0e 94 6e 43 	call	0x86dc	; 0x86dc <Wifi_EnterCMDMode>
		            signalStrength = Wifi_GetSignalStrength(1000);
    b4be:	88 ee       	ldi	r24, 0xE8	; 232
    b4c0:	93 e0       	ldi	r25, 0x03	; 3
    b4c2:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <Wifi_GetSignalStrength>
    b4c6:	80 93 04 33 	sts	0x3304, r24
		            if(Wifi_Connected(500)){
    b4ca:	84 ef       	ldi	r24, 0xF4	; 244
    b4cc:	91 e0       	ldi	r25, 0x01	; 1
    b4ce:	0e 94 33 03 	call	0x666	; 0x666 <Wifi_Connected>
    b4d2:	88 23       	and	r24, r24
    b4d4:	31 f1       	breq	.+76     	; 0xb522 <main+0x4b0>
    b4d6:	88 e8       	ldi	r24, 0x88	; 136
    b4d8:	93 e1       	ldi	r25, 0x13	; 19
    b4da:	f3 01       	movw	r30, r6
    b4dc:	31 97       	sbiw	r30, 0x01	; 1
    b4de:	f1 f7       	brne	.-4      	; 0xb4dc <main+0x46a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b4e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b4e2:	d9 f7       	brne	.-10     	; 0xb4da <main+0x468>
		                _delay_ms(500);
	                    if(Wifi_GetTime(500)){
    b4e4:	84 ef       	ldi	r24, 0xF4	; 244
    b4e6:	91 e0       	ldi	r25, 0x01	; 1
    b4e8:	0e 94 a6 4b 	call	0x974c	; 0x974c <Wifi_GetTime>
    b4ec:	88 23       	and	r24, r24
    b4ee:	91 f0       	breq	.+36     	; 0xb514 <main+0x4a2>
		                    Time_Set(time_secs);
    b4f0:	80 91 b6 32 	lds	r24, 0x32B6
    b4f4:	90 91 b7 32 	lds	r25, 0x32B7
    b4f8:	a0 91 b8 32 	lds	r26, 0x32B8
    b4fc:	b0 91 b9 32 	lds	r27, 0x32B9
	
	
}

void Time_Set(uint32_t time){
  cli();
    b500:	f8 94       	cli
  UNIX_time = time;
    b502:	80 93 d8 32 	sts	0x32D8, r24
    b506:	90 93 d9 32 	sts	0x32D9, r25
    b50a:	a0 93 da 32 	sts	0x32DA, r26
    b50e:	b0 93 db 32 	sts	0x32DB, r27
  sei();
    b512:	78 94       	sei
    b514:	88 e8       	ldi	r24, 0x88	; 136
    b516:	93 e1       	ldi	r25, 0x13	; 19
    b518:	f3 01       	movw	r30, r6
    b51a:	31 97       	sbiw	r30, 0x01	; 1
    b51c:	f1 f7       	brne	.-4      	; 0xb51a <main+0x4a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b51e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b520:	d9 f7       	brne	.-10     	; 0xb518 <main+0x4a6>
		                }
		                _delay_ms(500);
		            }
		            Wifi_ExitCMDMode(500);
    b522:	84 ef       	ldi	r24, 0xF4	; 244
    b524:	91 e0       	ldi	r25, 0x01	; 1
    b526:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    b52a:	1b c0       	rjmp	.+54     	; 0xb562 <main+0x4f0>
    		    } else {
                    if(Debug_Connected(500)){
    b52c:	84 ef       	ldi	r24, 0xF4	; 244
    b52e:	91 e0       	ldi	r25, 0x01	; 1
    b530:	0e 94 25 02 	call	0x44a	; 0x44a <Debug_Connected>
    b534:	88 23       	and	r24, r24
    b536:	a9 f0       	breq	.+42     	; 0xb562 <main+0x4f0>
    b538:	88 e8       	ldi	r24, 0x88	; 136
    b53a:	93 e1       	ldi	r25, 0x13	; 19
    b53c:	f3 01       	movw	r30, r6
    b53e:	31 97       	sbiw	r30, 0x01	; 1
    b540:	f1 f7       	brne	.-4      	; 0xb53e <main+0x4cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b542:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b544:	d9 f7       	brne	.-10     	; 0xb53c <main+0x4ca>
                        _delay_ms(500);
		                Time_Set(Debug_GetTime(1000));
    b546:	88 ee       	ldi	r24, 0xE8	; 232
    b548:	93 e0       	ldi	r25, 0x03	; 3
    b54a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Debug_GetTime>
	
	
}

void Time_Set(uint32_t time){
  cli();
    b54e:	f8 94       	cli
  UNIX_time = time;
    b550:	60 93 d8 32 	sts	0x32D8, r22
    b554:	70 93 d9 32 	sts	0x32D9, r23
    b558:	80 93 da 32 	sts	0x32DA, r24
    b55c:	90 93 db 32 	sts	0x32DB, r25
  sei();
    b560:	78 94       	sei
		            }
		        }
		        ssRefreshCounter = 0;
    b562:	10 92 02 33 	sts	0x3302, r1
    b566:	10 92 03 33 	sts	0x3303, r1
	        }

            if(okToUpload && Wifi_Connected(500)){
    b56a:	80 91 13 33 	lds	r24, 0x3313
    b56e:	88 23       	and	r24, r24
    b570:	09 f4       	brne	.+2      	; 0xb574 <main+0x502>
    b572:	d7 ce       	rjmp	.-594    	; 0xb322 <main+0x2b0>
    b574:	84 ef       	ldi	r24, 0xF4	; 244
    b576:	91 e0       	ldi	r25, 0x01	; 1
    b578:	0e 94 33 03 	call	0x666	; 0x666 <Wifi_Connected>
    b57c:	88 23       	and	r24, r24
    b57e:	09 f4       	brne	.+2      	; 0xb582 <main+0x510>
    b580:	d0 ce       	rjmp	.-608    	; 0xb322 <main+0x2b0>
                uploading = true;
    b582:	81 e0       	ldi	r24, 0x01	; 1
    b584:	80 93 14 33 	sts	0x3314, r24
                if(fileToUpload[0] != '/'){
    b588:	80 91 d5 3b 	lds	r24, 0x3BD5
    b58c:	8f 32       	cpi	r24, 0x2F	; 47
    b58e:	91 f0       	breq	.+36     	; 0xb5b4 <main+0x542>
			        strcpy(newFileName, "/");
    b590:	8f e4       	ldi	r24, 0x4F	; 79
    b592:	97 e5       	ldi	r25, 0x57	; 87
    b594:	64 e8       	ldi	r22, 0x84	; 132
    b596:	75 e2       	ldi	r23, 0x25	; 37
    b598:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
			        strcat(newFileName, fileToUpload);
    b59c:	8f e4       	ldi	r24, 0x4F	; 79
    b59e:	97 e5       	ldi	r25, 0x57	; 87
    b5a0:	65 ed       	ldi	r22, 0xD5	; 213
    b5a2:	7b e3       	ldi	r23, 0x3B	; 59
    b5a4:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <strcat>
			        strcpy(fileToUpload, newFileName);
    b5a8:	85 ed       	ldi	r24, 0xD5	; 213
    b5aa:	9b e3       	ldi	r25, 0x3B	; 59
    b5ac:	6f e4       	ldi	r22, 0x4F	; 79
    b5ae:	77 e5       	ldi	r23, 0x57	; 87
    b5b0:	0e 94 8d 61 	call	0xc31a	; 0xc31a <strcpy>
			    }
                if(useWifiForUploading){
    b5b4:	80 91 a9 32 	lds	r24, 0x32A9
    b5b8:	88 23       	and	r24, r24
    b5ba:	a1 f0       	breq	.+40     	; 0xb5e4 <main+0x572>
			        Debug_SendString("",true);
    b5bc:	81 ec       	ldi	r24, 0xC1	; 193
    b5be:	90 e2       	ldi	r25, 0x20	; 32
    b5c0:	61 e0       	ldi	r22, 0x01	; 1
    b5c2:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                    Debug_SendString("_____________________________________________", true);
    b5c6:	84 e6       	ldi	r24, 0x64	; 100
    b5c8:	99 e2       	ldi	r25, 0x29	; 41
    b5ca:	61 e0       	ldi	r22, 0x01	; 1
    b5cc:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
			        Debug_SendString("Uploading File: ", false);
    b5d0:	82 e9       	ldi	r24, 0x92	; 146
    b5d2:	99 e2       	ldi	r25, 0x29	; 41
    b5d4:	60 e0       	ldi	r22, 0x00	; 0
    b5d6:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
			        Debug_SendString(fileToUpload, true);
    b5da:	85 ed       	ldi	r24, 0xD5	; 213
    b5dc:	9b e3       	ldi	r25, 0x3B	; 59
    b5de:	61 e0       	ldi	r22, 0x01	; 1
    b5e0:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
			    }
                okToOpenFileToUpload = true;
    b5e4:	81 e0       	ldi	r24, 0x01	; 1
    b5e6:	80 93 16 33 	sts	0x3316, r24
                while(!uploadFileOpened);
    b5ea:	80 91 40 30 	lds	r24, 0x3040
    b5ee:	88 23       	and	r24, r24
    b5f0:	e1 f3       	breq	.-8      	; 0xb5ea <main+0x578>
    b5f2:	80 e2       	ldi	r24, 0x20	; 32
    b5f4:	9e e4       	ldi	r25, 0x4E	; 78
    b5f6:	f3 01       	movw	r30, r6
    b5f8:	31 97       	sbiw	r30, 0x01	; 1
    b5fa:	f1 f7       	brne	.-4      	; 0xb5f8 <main+0x586>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b5fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b5fe:	d9 f7       	brne	.-10     	; 0xb5f6 <main+0x584>
                _delay_ms(2000);


                numberOfPacketsToUpload = uploadFileSize /  1000;
    b600:	60 91 1d 33 	lds	r22, 0x331D
    b604:	70 91 1e 33 	lds	r23, 0x331E
    b608:	80 91 1f 33 	lds	r24, 0x331F
    b60c:	90 91 20 33 	lds	r25, 0x3320
    b610:	28 ee       	ldi	r18, 0xE8	; 232
    b612:	33 e0       	ldi	r19, 0x03	; 3
    b614:	40 e0       	ldi	r20, 0x00	; 0
    b616:	50 e0       	ldi	r21, 0x00	; 0
    b618:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    b61c:	c9 01       	movw	r24, r18
    b61e:	da 01       	movw	r26, r20
    b620:	80 93 25 33 	sts	0x3325, r24
    b624:	90 93 26 33 	sts	0x3326, r25
    b628:	a0 93 27 33 	sts	0x3327, r26
    b62c:	b0 93 28 33 	sts	0x3328, r27
                leftOverBytesToUpload   = uploadFileSize %  1000;
    b630:	60 91 1d 33 	lds	r22, 0x331D
    b634:	70 91 1e 33 	lds	r23, 0x331E
    b638:	80 91 1f 33 	lds	r24, 0x331F
    b63c:	90 91 20 33 	lds	r25, 0x3320
    b640:	28 ee       	ldi	r18, 0xE8	; 232
    b642:	33 e0       	ldi	r19, 0x03	; 3
    b644:	40 e0       	ldi	r20, 0x00	; 0
    b646:	50 e0       	ldi	r21, 0x00	; 0
    b648:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    b64c:	9b 01       	movw	r18, r22
    b64e:	ac 01       	movw	r20, r24
    b650:	20 93 29 33 	sts	0x3329, r18
    b654:	30 93 2a 33 	sts	0x332A, r19
    b658:	40 93 2b 33 	sts	0x332B, r20
    b65c:	50 93 2c 33 	sts	0x332C, r21

                if(useWifiForUploading){
    b660:	80 91 a9 32 	lds	r24, 0x32A9
    b664:	88 23       	and	r24, r24
    b666:	09 f4       	brne	.+2      	; 0xb66a <main+0x5f8>
    b668:	ec c0       	rjmp	.+472    	; 0xb842 <main+0x7d0>
                    Debug_SendString("File Opened!", true);
    b66a:	83 ea       	ldi	r24, 0xA3	; 163
    b66c:	99 e2       	ldi	r25, 0x29	; 41
    b66e:	61 e0       	ldi	r22, 0x01	; 1
    b670:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                    sprintf(temp,"File Size: %lu",uploadFileSize);
    b674:	40 91 1d 33 	lds	r20, 0x331D
    b678:	50 91 1e 33 	lds	r21, 0x331E
    b67c:	60 91 1f 33 	lds	r22, 0x331F
    b680:	70 91 20 33 	lds	r23, 0x3320
    b684:	8d b7       	in	r24, 0x3d	; 61
    b686:	9e b7       	in	r25, 0x3e	; 62
    b688:	08 97       	sbiw	r24, 0x08	; 8
    b68a:	8d bf       	out	0x3d, r24	; 61
    b68c:	9e bf       	out	0x3e, r25	; 62
    b68e:	ed b7       	in	r30, 0x3d	; 61
    b690:	fe b7       	in	r31, 0x3e	; 62
    b692:	31 96       	adiw	r30, 0x01	; 1
    b694:	00 eb       	ldi	r16, 0xB0	; 176
    b696:	19 e4       	ldi	r17, 0x49	; 73
    b698:	ad b7       	in	r26, 0x3d	; 61
    b69a:	be b7       	in	r27, 0x3e	; 62
    b69c:	11 96       	adiw	r26, 0x01	; 1
    b69e:	0d 93       	st	X+, r16
    b6a0:	1c 93       	st	X, r17
    b6a2:	12 97       	sbiw	r26, 0x02	; 2
    b6a4:	20 eb       	ldi	r18, 0xB0	; 176
    b6a6:	39 e2       	ldi	r19, 0x29	; 41
    b6a8:	22 83       	std	Z+2, r18	; 0x02
    b6aa:	33 83       	std	Z+3, r19	; 0x03
    b6ac:	44 83       	std	Z+4, r20	; 0x04
    b6ae:	55 83       	std	Z+5, r21	; 0x05
    b6b0:	66 83       	std	Z+6, r22	; 0x06
    b6b2:	77 83       	std	Z+7, r23	; 0x07
    b6b4:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
                    Debug_SendString(temp, true);
    b6b8:	6d b7       	in	r22, 0x3d	; 61
    b6ba:	7e b7       	in	r23, 0x3e	; 62
    b6bc:	68 5f       	subi	r22, 0xF8	; 248
    b6be:	7f 4f       	sbci	r23, 0xFF	; 255
    b6c0:	6d bf       	out	0x3d, r22	; 61
    b6c2:	7e bf       	out	0x3e, r23	; 62
    b6c4:	c8 01       	movw	r24, r16
    b6c6:	61 e0       	ldi	r22, 0x01	; 1
    b6c8:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>

                    Open_Connection:
                    Wifi_EnterCMDMode(500);
    b6cc:	84 ef       	ldi	r24, 0xF4	; 244
    b6ce:	91 e0       	ldi	r25, 0x01	; 1
    b6d0:	0e 94 6e 43 	call	0x86dc	; 0x86dc <Wifi_EnterCMDMode>
    b6d4:	80 e1       	ldi	r24, 0x10	; 16
    b6d6:	97 e2       	ldi	r25, 0x27	; 39
    b6d8:	f3 01       	movw	r30, r6
    b6da:	31 97       	sbiw	r30, 0x01	; 1
    b6dc:	f1 f7       	brne	.-4      	; 0xb6da <main+0x668>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b6de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b6e0:	d9 f7       	brne	.-10     	; 0xb6d8 <main+0x666>
                    _delay_ms(1000);

                    if(!Wifi_SendCommand(serverOpenCommand,"Connect to","Connect to",500)){
    b6e2:	8a ef       	ldi	r24, 0xFA	; 250
    b6e4:	9f e2       	ldi	r25, 0x2F	; 47
    b6e6:	6f eb       	ldi	r22, 0xBF	; 191
    b6e8:	79 e2       	ldi	r23, 0x29	; 41
    b6ea:	ab 01       	movw	r20, r22
    b6ec:	24 ef       	ldi	r18, 0xF4	; 244
    b6ee:	31 e0       	ldi	r19, 0x01	; 1
    b6f0:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    b6f4:	88 23       	and	r24, r24
    b6f6:	99 f4       	brne	.+38     	; 0xb71e <main+0x6ac>
    b6f8:	80 e1       	ldi	r24, 0x10	; 16
    b6fa:	97 e2       	ldi	r25, 0x27	; 39
    b6fc:	f3 01       	movw	r30, r6
    b6fe:	31 97       	sbiw	r30, 0x01	; 1
    b700:	f1 f7       	brne	.-4      	; 0xb6fe <main+0x68c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b702:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b704:	d9 f7       	brne	.-10     	; 0xb6fc <main+0x68a>

                        _delay_ms(1000);
                        Wifi_ExitCMDMode(500);
    b706:	84 ef       	ldi	r24, 0xF4	; 244
    b708:	91 e0       	ldi	r25, 0x01	; 1
    b70a:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    b70e:	8f ef       	ldi	r24, 0xFF	; 255
    b710:	9f ef       	ldi	r25, 0xFF	; 255
    b712:	f3 01       	movw	r30, r6
    b714:	31 97       	sbiw	r30, 0x01	; 1
    b716:	f1 f7       	brne	.-4      	; 0xb714 <main+0x6a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b718:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b71a:	d9 f7       	brne	.-10     	; 0xb712 <main+0x6a0>
    b71c:	d7 cf       	rjmp	.-82     	; 0xb6cc <main+0x65a>
    b71e:	80 e4       	ldi	r24, 0x40	; 64
    b720:	9c e9       	ldi	r25, 0x9C	; 156
    b722:	f3 01       	movw	r30, r6
    b724:	31 97       	sbiw	r30, 0x01	; 1
    b726:	f1 f7       	brne	.-4      	; 0xb724 <main+0x6b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b728:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b72a:	d9 f7       	brne	.-10     	; 0xb722 <main+0x6b0>
    b72c:	80 e4       	ldi	r24, 0x40	; 64
    b72e:	9c e9       	ldi	r25, 0x9C	; 156
    b730:	f3 01       	movw	r30, r6
    b732:	31 97       	sbiw	r30, 0x01	; 1
    b734:	f1 f7       	brne	.-4      	; 0xb732 <main+0x6c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b736:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b738:	d9 f7       	brne	.-10     	; 0xb730 <main+0x6be>
                        goto Open_Connection;
                    }
                    _delay_ms(4000);
                    _delay_ms(4000);

                    tempStringFiller = 0;
    b73a:	10 92 f9 32 	sts	0x32F9, r1
    b73e:	12 c0       	rjmp	.+36     	; 0xb764 <main+0x6f2>
                    while(Wifi_CharReadyToRead()){
                        temp[tempStringFiller] = Wifi_GetByte(false);
    b740:	80 91 f9 32 	lds	r24, 0x32F9
    b744:	08 2f       	mov	r16, r24
    b746:	10 e0       	ldi	r17, 0x00	; 0
    b748:	80 e0       	ldi	r24, 0x00	; 0
    b74a:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    b74e:	00 55       	subi	r16, 0x50	; 80
    b750:	16 4b       	sbci	r17, 0xB6	; 182
    b752:	d8 01       	movw	r26, r16
    b754:	8c 93       	st	X, r24
                        tempStringFiller++;
    b756:	80 91 f9 32 	lds	r24, 0x32F9
    b75a:	8f 5f       	subi	r24, 0xFF	; 255
    b75c:	80 93 f9 32 	sts	0x32F9, r24
                        if(tempStringFiller == 49){
    b760:	81 33       	cpi	r24, 0x31	; 49
    b762:	21 f0       	breq	.+8      	; 0xb76c <main+0x6fa>
                    }
                    _delay_ms(4000);
                    _delay_ms(4000);

                    tempStringFiller = 0;
                    while(Wifi_CharReadyToRead()){
    b764:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    b768:	88 23       	and	r24, r24
    b76a:	51 f7       	brne	.-44     	; 0xb740 <main+0x6ce>
                        tempStringFiller++;
                        if(tempStringFiller == 49){
                            break;
                        }
                    }
                    temp[tempStringFiller] = 0;
    b76c:	e0 91 f9 32 	lds	r30, 0x32F9
    b770:	f0 e0       	ldi	r31, 0x00	; 0
    b772:	e0 55       	subi	r30, 0x50	; 80
    b774:	f6 4b       	sbci	r31, 0xB6	; 182
    b776:	10 82       	st	Z, r1


                    if(strstr(temp,"*OPEN*") != 0){                            // success
    b778:	80 eb       	ldi	r24, 0xB0	; 176
    b77a:	99 e4       	ldi	r25, 0x49	; 73
    b77c:	6a ec       	ldi	r22, 0xCA	; 202
    b77e:	79 e2       	ldi	r23, 0x29	; 41
    b780:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    b784:	00 97       	sbiw	r24, 0x00	; 0
    b786:	91 f0       	breq	.+36     	; 0xb7ac <main+0x73a>
                        Debug_SendString("Connection Open!",true);
    b788:	81 ed       	ldi	r24, 0xD1	; 209
    b78a:	99 e2       	ldi	r25, 0x29	; 41
    b78c:	61 e0       	ldi	r22, 0x01	; 1
    b78e:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    b792:	80 e1       	ldi	r24, 0x10	; 16
    b794:	97 e2       	ldi	r25, 0x27	; 39
    b796:	f3 01       	movw	r30, r6
    b798:	31 97       	sbiw	r30, 0x01	; 1
    b79a:	f1 f7       	brne	.-4      	; 0xb798 <main+0x726>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b79c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b79e:	d9 f7       	brne	.-10     	; 0xb796 <main+0x724>
                            _delay_ms(10000);
                            goto Open_Connection;
                        }
                    }

                    Debug_SendString("Sending...", true);
    b7a0:	82 ee       	ldi	r24, 0xE2	; 226
    b7a2:	99 e2       	ldi	r25, 0x29	; 41
    b7a4:	61 e0       	ldi	r22, 0x01	; 1
    b7a6:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    b7aa:	4b c0       	rjmp	.+150    	; 0xb842 <main+0x7d0>


                    if(strstr(temp,"*OPEN*") != 0){                            // success
                        Debug_SendString("Connection Open!",true);
                        _delay_ms(1000);
                    } else if (strstr(temp,"ERR:Connected!")!=0){
    b7ac:	80 eb       	ldi	r24, 0xB0	; 176
    b7ae:	99 e4       	ldi	r25, 0x49	; 73
    b7b0:	6d ee       	ldi	r22, 0xED	; 237
    b7b2:	79 e2       	ldi	r23, 0x29	; 41
    b7b4:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    b7b8:	00 97       	sbiw	r24, 0x00	; 0
    b7ba:	01 f1       	breq	.+64     	; 0xb7fc <main+0x78a>

                        if(!Wifi_Connected(500)){
    b7bc:	84 ef       	ldi	r24, 0xF4	; 244
    b7be:	91 e0       	ldi	r25, 0x01	; 1
    b7c0:	0e 94 33 03 	call	0x666	; 0x666 <Wifi_Connected>
    b7c4:	88 23       	and	r24, r24
    b7c6:	01 f1       	breq	.+64     	; 0xb808 <main+0x796>
                            Wifi_ExitCMDMode(500);
                            goto Main;
                        } else{
                            Debug_SendString("Let't retry connecting...",true);
    b7c8:	8c ef       	ldi	r24, 0xFC	; 252
    b7ca:	99 e2       	ldi	r25, 0x29	; 41
    b7cc:	61 e0       	ldi	r22, 0x01	; 1
    b7ce:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                            Wifi_SendCommand("close","*CLOS*","*CLOS*",500);
    b7d2:	86 e1       	ldi	r24, 0x16	; 22
    b7d4:	9a e2       	ldi	r25, 0x2A	; 42
    b7d6:	6c e1       	ldi	r22, 0x1C	; 28
    b7d8:	7a e2       	ldi	r23, 0x2A	; 42
    b7da:	ab 01       	movw	r20, r22
    b7dc:	24 ef       	ldi	r18, 0xF4	; 244
    b7de:	31 e0       	ldi	r19, 0x01	; 1
    b7e0:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <Wifi_SendCommand>
    b7e4:	80 e1       	ldi	r24, 0x10	; 16
    b7e6:	97 e2       	ldi	r25, 0x27	; 39
    b7e8:	f3 01       	movw	r30, r6
    b7ea:	31 97       	sbiw	r30, 0x01	; 1
    b7ec:	f1 f7       	brne	.-4      	; 0xb7ea <main+0x778>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b7ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b7f0:	d9 f7       	brne	.-10     	; 0xb7e8 <main+0x776>
                            _delay_ms(1000);
                            Wifi_ExitCMDMode(500);
    b7f2:	84 ef       	ldi	r24, 0xF4	; 244
    b7f4:	91 e0       	ldi	r25, 0x01	; 1
    b7f6:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    b7fa:	68 cf       	rjmp	.-304    	; 0xb6cc <main+0x65a>
                            goto Open_Connection;
                        }
                    } else{
                        if(!Wifi_Connected(500)){
    b7fc:	84 ef       	ldi	r24, 0xF4	; 244
    b7fe:	91 e0       	ldi	r25, 0x01	; 1
    b800:	0e 94 33 03 	call	0x666	; 0x666 <Wifi_Connected>
    b804:	88 23       	and	r24, r24
    b806:	29 f4       	brne	.+10     	; 0xb812 <main+0x7a0>
                            Wifi_ExitCMDMode(500);
    b808:	84 ef       	ldi	r24, 0xF4	; 244
    b80a:	91 e0       	ldi	r25, 0x01	; 1
    b80c:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    b810:	88 cd       	rjmp	.-1264   	; 0xb322 <main+0x2b0>
                            goto Main;
                        } else{
                            Debug_SendString("Other issues: ", true);
    b812:	83 e2       	ldi	r24, 0x23	; 35
    b814:	9a e2       	ldi	r25, 0x2A	; 42
    b816:	61 e0       	ldi	r22, 0x01	; 1
    b818:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
    b81c:	80 e1       	ldi	r24, 0x10	; 16
    b81e:	97 e2       	ldi	r25, 0x27	; 39
    b820:	f3 01       	movw	r30, r6
    b822:	31 97       	sbiw	r30, 0x01	; 1
    b824:	f1 f7       	brne	.-4      	; 0xb822 <main+0x7b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b826:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b828:	d9 f7       	brne	.-10     	; 0xb820 <main+0x7ae>
                            _delay_ms(1000);
                            Wifi_ExitCMDMode(500);
    b82a:	84 ef       	ldi	r24, 0xF4	; 244
    b82c:	91 e0       	ldi	r25, 0x01	; 1
    b82e:	0e 94 24 45 	call	0x8a48	; 0x8a48 <Wifi_ExitCMDMode>
    b832:	8f ef       	ldi	r24, 0xFF	; 255
    b834:	9f ef       	ldi	r25, 0xFF	; 255
    b836:	f3 01       	movw	r30, r6
    b838:	31 97       	sbiw	r30, 0x01	; 1
    b83a:	f1 f7       	brne	.-4      	; 0xb838 <main+0x7c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b83c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b83e:	d9 f7       	brne	.-10     	; 0xb836 <main+0x7c4>
    b840:	45 cf       	rjmp	.-374    	; 0xb6cc <main+0x65a>
                    }

                    Debug_SendString("Sending...", true);
                }

                uploadTimeStart = UNIX_time;
    b842:	80 91 d8 32 	lds	r24, 0x32D8
    b846:	90 91 d9 32 	lds	r25, 0x32D9
    b84a:	a0 91 da 32 	lds	r26, 0x32DA
    b84e:	b0 91 db 32 	lds	r27, 0x32DB
    b852:	80 93 f2 3b 	sts	0x3BF2, r24
    b856:	90 93 f3 3b 	sts	0x3BF3, r25
    b85a:	a0 93 f4 3b 	sts	0x3BF4, r26
    b85e:	b0 93 f5 3b 	sts	0x3BF5, r27
                uploadTimedOut = false;
    b862:	10 92 c4 32 	sts	0x32C4, r1


                memmove(temp,strtok(fileToUpload,"/"),12);
    b866:	85 ed       	ldi	r24, 0xD5	; 213
    b868:	9b e3       	ldi	r25, 0x3B	; 59
    b86a:	64 e8       	ldi	r22, 0x84	; 132
    b86c:	75 e2       	ldi	r23, 0x25	; 37
    b86e:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    b872:	bc 01       	movw	r22, r24
    b874:	80 eb       	ldi	r24, 0xB0	; 176
    b876:	99 e4       	ldi	r25, 0x49	; 73
    b878:	4c e0       	ldi	r20, 0x0C	; 12
    b87a:	50 e0       	ldi	r21, 0x00	; 0
    b87c:	0e 94 2f 61 	call	0xc25e	; 0xc25e <memmove>
                memmove(fileToUpload,temp,12);
    b880:	85 ed       	ldi	r24, 0xD5	; 213
    b882:	9b e3       	ldi	r25, 0x3B	; 59
    b884:	60 eb       	ldi	r22, 0xB0	; 176
    b886:	79 e4       	ldi	r23, 0x49	; 73
    b888:	4c e0       	ldi	r20, 0x0C	; 12
    b88a:	50 e0       	ldi	r21, 0x00	; 0
    b88c:	0e 94 2f 61 	call	0xc25e	; 0xc25e <memmove>

                uploadHeaderSize = 177;
    b890:	81 eb       	ldi	r24, 0xB1	; 177
    b892:	90 e0       	ldi	r25, 0x00	; 0
    b894:	a0 e0       	ldi	r26, 0x00	; 0
    b896:	b0 e0       	ldi	r27, 0x00	; 0
    b898:	80 93 21 33 	sts	0x3321, r24
    b89c:	90 93 22 33 	sts	0x3322, r25
    b8a0:	a0 93 23 33 	sts	0x3323, r26
    b8a4:	b0 93 24 33 	sts	0x3324, r27
                uploadHeaderSize += strlen(user);
    b8a8:	20 91 21 33 	lds	r18, 0x3321
    b8ac:	30 91 22 33 	lds	r19, 0x3322
    b8b0:	40 91 23 33 	lds	r20, 0x3323
    b8b4:	50 91 24 33 	lds	r21, 0x3324
    b8b8:	ee e1       	ldi	r30, 0x1E	; 30
    b8ba:	fa e4       	ldi	r31, 0x4A	; 74
    b8bc:	01 90       	ld	r0, Z+
    b8be:	00 20       	and	r0, r0
    b8c0:	e9 f7       	brne	.-6      	; 0xb8bc <main+0x84a>
    b8c2:	cf 01       	movw	r24, r30
    b8c4:	01 97       	sbiw	r24, 0x01	; 1
    b8c6:	8e 51       	subi	r24, 0x1E	; 30
    b8c8:	9a 44       	sbci	r25, 0x4A	; 74
    b8ca:	a0 e0       	ldi	r26, 0x00	; 0
    b8cc:	b0 e0       	ldi	r27, 0x00	; 0
    b8ce:	82 0f       	add	r24, r18
    b8d0:	93 1f       	adc	r25, r19
    b8d2:	a4 1f       	adc	r26, r20
    b8d4:	b5 1f       	adc	r27, r21
    b8d6:	80 93 21 33 	sts	0x3321, r24
    b8da:	90 93 22 33 	sts	0x3322, r25
    b8de:	a0 93 23 33 	sts	0x3323, r26
    b8e2:	b0 93 24 33 	sts	0x3324, r27
                uploadHeaderSize += strlen(fileToUpload);
    b8e6:	20 91 21 33 	lds	r18, 0x3321
    b8ea:	30 91 22 33 	lds	r19, 0x3322
    b8ee:	40 91 23 33 	lds	r20, 0x3323
    b8f2:	50 91 24 33 	lds	r21, 0x3324
    b8f6:	d1 01       	movw	r26, r2
    b8f8:	0d 90       	ld	r0, X+
    b8fa:	00 20       	and	r0, r0
    b8fc:	e9 f7       	brne	.-6      	; 0xb8f8 <main+0x886>
    b8fe:	cd 01       	movw	r24, r26
    b900:	01 97       	sbiw	r24, 0x01	; 1
    b902:	85 5d       	subi	r24, 0xD5	; 213
    b904:	9b 43       	sbci	r25, 0x3B	; 59
    b906:	a0 e0       	ldi	r26, 0x00	; 0
    b908:	b0 e0       	ldi	r27, 0x00	; 0
    b90a:	82 0f       	add	r24, r18
    b90c:	93 1f       	adc	r25, r19
    b90e:	a4 1f       	adc	r26, r20
    b910:	b5 1f       	adc	r27, r21
    b912:	80 93 21 33 	sts	0x3321, r24
    b916:	90 93 22 33 	sts	0x3322, r25
    b91a:	a0 93 23 33 	sts	0x3323, r26
    b91e:	b0 93 24 33 	sts	0x3324, r27
                uploadHeaderSize += strlen(nickname);
    b922:	20 91 21 33 	lds	r18, 0x3321
    b926:	30 91 22 33 	lds	r19, 0x3322
    b92a:	40 91 23 33 	lds	r20, 0x3323
    b92e:	50 91 24 33 	lds	r21, 0x3324
    b932:	ea e6       	ldi	r30, 0x6A	; 106
    b934:	fc e5       	ldi	r31, 0x5C	; 92
    b936:	01 90       	ld	r0, Z+
    b938:	00 20       	and	r0, r0
    b93a:	e9 f7       	brne	.-6      	; 0xb936 <main+0x8c4>
    b93c:	cf 01       	movw	r24, r30
    b93e:	01 97       	sbiw	r24, 0x01	; 1
    b940:	8a 56       	subi	r24, 0x6A	; 106
    b942:	9c 45       	sbci	r25, 0x5C	; 92
    b944:	a0 e0       	ldi	r26, 0x00	; 0
    b946:	b0 e0       	ldi	r27, 0x00	; 0
    b948:	82 0f       	add	r24, r18
    b94a:	93 1f       	adc	r25, r19
    b94c:	a4 1f       	adc	r26, r20
    b94e:	b5 1f       	adc	r27, r21
    b950:	80 93 21 33 	sts	0x3321, r24
    b954:	90 93 22 33 	sts	0x3322, r25
    b958:	a0 93 23 33 	sts	0x3323, r26
    b95c:	b0 93 24 33 	sts	0x3324, r27
                uploadHeaderSize += strlen(ltoa(uploadFileSize,temp,10));
    b960:	e0 90 21 33 	lds	r14, 0x3321
    b964:	f0 90 22 33 	lds	r15, 0x3322
    b968:	00 91 23 33 	lds	r16, 0x3323
    b96c:	10 91 24 33 	lds	r17, 0x3324
    b970:	60 91 1d 33 	lds	r22, 0x331D
    b974:	70 91 1e 33 	lds	r23, 0x331E
    b978:	80 91 1f 33 	lds	r24, 0x331F
    b97c:	90 91 20 33 	lds	r25, 0x3320
    b980:	40 eb       	ldi	r20, 0xB0	; 176
    b982:	59 e4       	ldi	r21, 0x49	; 73
    b984:	2a e0       	ldi	r18, 0x0A	; 10
    b986:	30 e0       	ldi	r19, 0x00	; 0
    b988:	0e 94 df 61 	call	0xc3be	; 0xc3be <ltoa>
    b98c:	fc 01       	movw	r30, r24
    b98e:	dc 01       	movw	r26, r24
    b990:	0d 90       	ld	r0, X+
    b992:	00 20       	and	r0, r0
    b994:	e9 f7       	brne	.-6      	; 0xb990 <main+0x91e>
    b996:	cd 01       	movw	r24, r26
    b998:	01 97       	sbiw	r24, 0x01	; 1
    b99a:	8e 1b       	sub	r24, r30
    b99c:	9f 0b       	sbc	r25, r31
    b99e:	a0 e0       	ldi	r26, 0x00	; 0
    b9a0:	b0 e0       	ldi	r27, 0x00	; 0
    b9a2:	8e 0d       	add	r24, r14
    b9a4:	9f 1d       	adc	r25, r15
    b9a6:	a0 1f       	adc	r26, r16
    b9a8:	b1 1f       	adc	r27, r17
    b9aa:	80 93 21 33 	sts	0x3321, r24
    b9ae:	90 93 22 33 	sts	0x3322, r25
    b9b2:	a0 93 23 33 	sts	0x3323, r26
    b9b6:	b0 93 24 33 	sts	0x3324, r27
                uploadHeaderSize += uploadFileSize;
    b9ba:	20 91 21 33 	lds	r18, 0x3321
    b9be:	30 91 22 33 	lds	r19, 0x3322
    b9c2:	40 91 23 33 	lds	r20, 0x3323
    b9c6:	50 91 24 33 	lds	r21, 0x3324
    b9ca:	80 91 1d 33 	lds	r24, 0x331D
    b9ce:	90 91 1e 33 	lds	r25, 0x331E
    b9d2:	a0 91 1f 33 	lds	r26, 0x331F
    b9d6:	b0 91 20 33 	lds	r27, 0x3320
    b9da:	82 0f       	add	r24, r18
    b9dc:	93 1f       	adc	r25, r19
    b9de:	a4 1f       	adc	r26, r20
    b9e0:	b5 1f       	adc	r27, r21
    b9e2:	80 93 21 33 	sts	0x3321, r24
    b9e6:	90 93 22 33 	sts	0x3322, r25
    b9ea:	a0 93 23 33 	sts	0x3323, r26
    b9ee:	b0 93 24 33 	sts	0x3324, r27


                if(useWifiForUploading || Debug_TriggerUpload(uploadHeaderSize, 2000)){
    b9f2:	80 91 a9 32 	lds	r24, 0x32A9
    b9f6:	88 23       	and	r24, r24
    b9f8:	79 f4       	brne	.+30     	; 0xba18 <main+0x9a6>
    b9fa:	60 91 21 33 	lds	r22, 0x3321
    b9fe:	70 91 22 33 	lds	r23, 0x3322
    ba02:	80 91 23 33 	lds	r24, 0x3323
    ba06:	90 91 24 33 	lds	r25, 0x3324
    ba0a:	40 ed       	ldi	r20, 0xD0	; 208
    ba0c:	57 e0       	ldi	r21, 0x07	; 7
    ba0e:	0e 94 37 4b 	call	0x966e	; 0x966e <Debug_TriggerUpload>
    ba12:	88 23       	and	r24, r24
    ba14:	09 f4       	brne	.+2      	; 0xba18 <main+0x9a6>
    ba16:	f9 c1       	rjmp	.+1010   	; 0xbe0a <main+0xd98>
                    Wifi_SendString("POST /users/",false);                              // 12
    ba18:	82 e3       	ldi	r24, 0x32	; 50
    ba1a:	9a e2       	ldi	r25, 0x2A	; 42
    ba1c:	60 e0       	ldi	r22, 0x00	; 0
    ba1e:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString(user,false);
    ba22:	8e e1       	ldi	r24, 0x1E	; 30
    ba24:	9a e4       	ldi	r25, 0x4A	; 74
    ba26:	60 e0       	ldi	r22, 0x00	; 0
    ba28:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString("/binupload?dev_nickname=",false);                  // 24
    ba2c:	8f e3       	ldi	r24, 0x3F	; 63
    ba2e:	9a e2       	ldi	r25, 0x2A	; 42
    ba30:	60 e0       	ldi	r22, 0x00	; 0
    ba32:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString(nickname,false);
    ba36:	8a e6       	ldi	r24, 0x6A	; 106
    ba38:	9c e5       	ldi	r25, 0x5C	; 92
    ba3a:	60 e0       	ldi	r22, 0x00	; 0
    ba3c:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString("&filename=",false);                                // 10
    ba40:	88 e5       	ldi	r24, 0x58	; 88
    ba42:	9a e2       	ldi	r25, 0x2A	; 42
    ba44:	60 e0       	ldi	r22, 0x00	; 0
    ba46:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString(fileToUpload, false);
    ba4a:	85 ed       	ldi	r24, 0xD5	; 213
    ba4c:	9b e3       	ldi	r25, 0x3B	; 59
    ba4e:	60 e0       	ldi	r22, 0x00	; 0
    ba50:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString(" HTTP/1.1",true);                                  // 11
    ba54:	83 e6       	ldi	r24, 0x63	; 99
    ba56:	9a e2       	ldi	r25, 0x2A	; 42
    ba58:	61 e0       	ldi	r22, 0x01	; 1
    ba5a:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>

                    Wifi_SendString("Host: bodytrack.org",true);                        // 21
    ba5e:	8d e6       	ldi	r24, 0x6D	; 109
    ba60:	9a e2       	ldi	r25, 0x2A	; 42
    ba62:	61 e0       	ldi	r22, 0x01	; 1
    ba64:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString("Content-Type: application/octet-stream",true);     // 40
    ba68:	81 e8       	ldi	r24, 0x81	; 129
    ba6a:	9a e2       	ldi	r25, 0x2A	; 42
    ba6c:	61 e0       	ldi	r22, 0x01	; 1
    ba6e:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendString("Content-Transfer-Encoding: binary",true);          // 35
    ba72:	88 ea       	ldi	r24, 0xA8	; 168
    ba74:	9a e2       	ldi	r25, 0x2A	; 42
    ba76:	61 e0       	ldi	r22, 0x01	; 1
    ba78:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
    ba7c:	40 91 1d 33 	lds	r20, 0x331D
    ba80:	50 91 1e 33 	lds	r21, 0x331E
    ba84:	60 91 1f 33 	lds	r22, 0x331F
    ba88:	70 91 20 33 	lds	r23, 0x3320
    ba8c:	ed b7       	in	r30, 0x3d	; 61
    ba8e:	fe b7       	in	r31, 0x3e	; 62
    ba90:	38 97       	sbiw	r30, 0x08	; 8
    ba92:	ed bf       	out	0x3d, r30	; 61
    ba94:	fe bf       	out	0x3e, r31	; 62
    ba96:	31 96       	adiw	r30, 0x01	; 1
    ba98:	00 eb       	ldi	r16, 0xB0	; 176
    ba9a:	19 e4       	ldi	r17, 0x49	; 73
    ba9c:	ad b7       	in	r26, 0x3d	; 61
    ba9e:	be b7       	in	r27, 0x3e	; 62
    baa0:	11 96       	adiw	r26, 0x01	; 1
    baa2:	0d 93       	st	X+, r16
    baa4:	1c 93       	st	X, r17
    baa6:	12 97       	sbiw	r26, 0x02	; 2
    baa8:	2a ec       	ldi	r18, 0xCA	; 202
    baaa:	3a e2       	ldi	r19, 0x2A	; 42
    baac:	22 83       	std	Z+2, r18	; 0x02
    baae:	33 83       	std	Z+3, r19	; 0x03
    bab0:	44 83       	std	Z+4, r20	; 0x04
    bab2:	55 83       	std	Z+5, r21	; 0x05
    bab4:	66 83       	std	Z+6, r22	; 0x06
    bab6:	77 83       	std	Z+7, r23	; 0x07
    bab8:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
                    Wifi_SendString(temp,true);
    babc:	6d b7       	in	r22, 0x3d	; 61
    babe:	7e b7       	in	r23, 0x3e	; 62
    bac0:	68 5f       	subi	r22, 0xF8	; 248
    bac2:	7f 4f       	sbci	r23, 0xFF	; 255
    bac4:	6d bf       	out	0x3d, r22	; 61
    bac6:	7e bf       	out	0x3e, r23	; 62
    bac8:	c8 01       	movw	r24, r16
    baca:	61 e0       	ldi	r22, 0x01	; 1
    bacc:	0e 94 43 43 	call	0x8686	; 0x8686 <Wifi_SendString>
                    Wifi_SendByte(0x0D);                                                // 1
    bad0:	8d e0       	ldi	r24, 0x0D	; 13
    bad2:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
                    Wifi_SendByte(0x0A);                                                // 1
    bad6:	8a e0       	ldi	r24, 0x0A	; 10
    bad8:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
    badc:	88 24       	eor	r8, r8
    bade:	99 24       	eor	r9, r9
    bae0:	54 01       	movw	r10, r8
    bae2:	cc 24       	eor	r12, r12
    bae4:	dd 24       	eor	r13, r13
    bae6:	76 01       	movw	r14, r12

                    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                        uploadFileBufferFull = false;
                        okToFillUploadFileBuffer = true;
    bae8:	55 24       	eor	r5, r5
    baea:	53 94       	inc	r5
    baec:	3f c0       	rjmp	.+126    	; 0xbb6c <main+0xafa>
                    Wifi_SendString(temp,true);
                    Wifi_SendByte(0x0D);                                                // 1
                    Wifi_SendByte(0x0A);                                                // 1

                    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                        uploadFileBufferFull = false;
    baee:	10 92 18 33 	sts	0x3318, r1
                        okToFillUploadFileBuffer = true;
    baf2:	50 92 17 33 	sts	0x3317, r5

                        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    baf6:	20 91 25 33 	lds	r18, 0x3325
    bafa:	30 91 26 33 	lds	r19, 0x3326
    bafe:	40 91 27 33 	lds	r20, 0x3327
    bb02:	50 91 28 33 	lds	r21, 0x3328
    bb06:	c7 01       	movw	r24, r14
    bb08:	b6 01       	movw	r22, r12
    bb0a:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    bb0e:	20 93 05 33 	sts	0x3305, r18
                        while(!uploadFileBufferFull);
    bb12:	80 91 18 33 	lds	r24, 0x3318
    bb16:	88 23       	and	r24, r24
    bb18:	e1 f3       	breq	.-8      	; 0xbb12 <main+0xaa0>
    bb1a:	05 ee       	ldi	r16, 0xE5	; 229
    bb1c:	17 e3       	ldi	r17, 0x37	; 55
                        for(uint16_t j = 0; j <  uploadChunkSize; j++){
                            Wifi_SendByte(uploadFileBuffer[j]);
    bb1e:	d8 01       	movw	r26, r16
    bb20:	8c 91       	ld	r24, X
    bb22:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>

                            if(Wifi_CharReadyToRead()){
    bb26:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    bb2a:	88 23       	and	r24, r24
    bb2c:	61 f0       	breq	.+24     	; 0xbb46 <main+0xad4>
                               Debug_SendByte(Wifi_GetByte(false));
    bb2e:	80 e0       	ldi	r24, 0x00	; 0
    bb30:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bb34:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    bb36:	80 91 a1 08 	lds	r24, 0x08A1
    bb3a:	85 ff       	sbrs	r24, 5
    bb3c:	fc cf       	rjmp	.-8      	; 0xbb36 <main+0xac4>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){
    bb3e:	80 91 68 06 	lds	r24, 0x0668
	    if(useWifiForUploading) {} break;
	}                              // Wait for RTS to be low
	Debug_Usart.DATA = data;
    bb42:	90 93 a0 08 	sts	0x08A0, r25
    bb46:	0f 5f       	subi	r16, 0xFF	; 255
    bb48:	1f 4f       	sbci	r17, 0xFF	; 255
                        uploadFileBufferFull = false;
                        okToFillUploadFileBuffer = true;

                        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
                        while(!uploadFileBufferFull);
                        for(uint16_t j = 0; j <  uploadChunkSize; j++){
    bb4a:	bb e3       	ldi	r27, 0x3B	; 59
    bb4c:	0d 3c       	cpi	r16, 0xCD	; 205
    bb4e:	1b 07       	cpc	r17, r27
    bb50:	31 f7       	brne	.-52     	; 0xbb1e <main+0xaac>
                    sprintf(temp, "Content-Length: %lu",uploadFileSize);                    // 18
                    Wifi_SendString(temp,true);
                    Wifi_SendByte(0x0D);                                                // 1
                    Wifi_SendByte(0x0A);                                                // 1

                    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    bb52:	08 94       	sec
    bb54:	81 1c       	adc	r8, r1
    bb56:	91 1c       	adc	r9, r1
    bb58:	a1 1c       	adc	r10, r1
    bb5a:	b1 1c       	adc	r11, r1
    bb5c:	64 e6       	ldi	r22, 0x64	; 100
    bb5e:	70 e0       	ldi	r23, 0x00	; 0
    bb60:	80 e0       	ldi	r24, 0x00	; 0
    bb62:	90 e0       	ldi	r25, 0x00	; 0
    bb64:	c6 0e       	add	r12, r22
    bb66:	d7 1e       	adc	r13, r23
    bb68:	e8 1e       	adc	r14, r24
    bb6a:	f9 1e       	adc	r15, r25
    bb6c:	80 91 25 33 	lds	r24, 0x3325
    bb70:	90 91 26 33 	lds	r25, 0x3326
    bb74:	a0 91 27 33 	lds	r26, 0x3327
    bb78:	b0 91 28 33 	lds	r27, 0x3328
    bb7c:	88 16       	cp	r8, r24
    bb7e:	99 06       	cpc	r9, r25
    bb80:	aa 06       	cpc	r10, r26
    bb82:	bb 06       	cpc	r11, r27
    bb84:	08 f4       	brcc	.+2      	; 0xbb88 <main+0xb16>
    bb86:	b3 cf       	rjmp	.-154    	; 0xbaee <main+0xa7c>
                            if(Wifi_CharReadyToRead()){
                               Debug_SendByte(Wifi_GetByte(false));
                            }
                        }
                    }
                    uploadFileBufferFull = false;
    bb88:	10 92 18 33 	sts	0x3318, r1
                    okToFillUploadFileBuffer = true;
    bb8c:	81 e0       	ldi	r24, 0x01	; 1
    bb8e:	80 93 17 33 	sts	0x3317, r24
                    while(!uploadFileBufferFull);
    bb92:	80 91 18 33 	lds	r24, 0x3318
    bb96:	88 23       	and	r24, r24
    bb98:	e1 f3       	breq	.-8      	; 0xbb92 <main+0xb20>
    bb9a:	b5 ee       	ldi	r27, 0xE5	; 229
    bb9c:	cb 2e       	mov	r12, r27
    bb9e:	b7 e3       	ldi	r27, 0x37	; 55
    bba0:	db 2e       	mov	r13, r27
    bba2:	20 e0       	ldi	r18, 0x00	; 0
    bba4:	30 e0       	ldi	r19, 0x00	; 0
    bba6:	40 e0       	ldi	r20, 0x00	; 0
    bba8:	50 e0       	ldi	r21, 0x00	; 0
    bbaa:	07 c0       	rjmp	.+14     	; 0xbbba <main+0xb48>
                    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
                        Wifi_SendByte(uploadFileBuffer[j]);
    bbac:	d6 01       	movw	r26, r12
    bbae:	8d 91       	ld	r24, X+
    bbb0:	6d 01       	movw	r12, r26
    bbb2:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
    bbb6:	a8 01       	movw	r20, r16
    bbb8:	97 01       	movw	r18, r14
                        }
                    }
                    uploadFileBufferFull = false;
                    okToFillUploadFileBuffer = true;
                    while(!uploadFileBufferFull);
                    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    bbba:	80 91 29 33 	lds	r24, 0x3329
    bbbe:	90 91 2a 33 	lds	r25, 0x332A
    bbc2:	a0 91 2b 33 	lds	r26, 0x332B
    bbc6:	b0 91 2c 33 	lds	r27, 0x332C
    bbca:	79 01       	movw	r14, r18
    bbcc:	8a 01       	movw	r16, r20
    bbce:	08 94       	sec
    bbd0:	e1 1c       	adc	r14, r1
    bbd2:	f1 1c       	adc	r15, r1
    bbd4:	01 1d       	adc	r16, r1
    bbd6:	11 1d       	adc	r17, r1
    bbd8:	28 17       	cp	r18, r24
    bbda:	39 07       	cpc	r19, r25
    bbdc:	4a 07       	cpc	r20, r26
    bbde:	5b 07       	cpc	r21, r27
    bbe0:	28 f3       	brcs	.-54     	; 0xbbac <main+0xb3a>
                        Wifi_SendByte(uploadFileBuffer[j]);
                    }
                    Wifi_SendByte(0x0D);                                                // 4
    bbe2:	8d e0       	ldi	r24, 0x0D	; 13
    bbe4:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
                    Wifi_SendByte(0x0A);
    bbe8:	8a e0       	ldi	r24, 0x0A	; 10
    bbea:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
                    Wifi_SendByte(0x0D);
    bbee:	8d e0       	ldi	r24, 0x0D	; 13
    bbf0:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>
                    Wifi_SendByte(0x0A);
    bbf4:	8a e0       	ldi	r24, 0x0A	; 10
    bbf6:	0e 94 1f 40 	call	0x803e	; 0x803e <Wifi_SendByte>

                    uploadPercentBS = 100;
    bbfa:	84 e6       	ldi	r24, 0x64	; 100
    bbfc:	80 93 05 33 	sts	0x3305, r24
    bc00:	80 e1       	ldi	r24, 0x10	; 16
    bc02:	97 e2       	ldi	r25, 0x27	; 39
    bc04:	f3 01       	movw	r30, r6
    bc06:	31 97       	sbiw	r30, 0x01	; 1
    bc08:	f1 f7       	brne	.-4      	; 0xbc06 <main+0xb94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bc0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bc0c:	d9 f7       	brne	.-10     	; 0xbc04 <main+0xb92>
                    _delay_ms(1000);

              //Wait_For_Close:
                    httpResponseReceived = false;
    bc0e:	10 92 34 33 	sts	0x3334, r1
                    connectionClosed = false;
    bc12:	10 92 35 33 	sts	0x3335, r1
                    if(useWifiForUploading){
    bc16:	80 91 a9 32 	lds	r24, 0x32A9
    bc1a:	88 23       	and	r24, r24
    bc1c:	29 f0       	breq	.+10     	; 0xbc28 <main+0xbb6>
                        Debug_SendString("Wait for connection to close",true);
    bc1e:	8e ed       	ldi	r24, 0xDE	; 222
    bc20:	9a e2       	ldi	r25, 0x2A	; 42
    bc22:	61 e0       	ldi	r22, 0x01	; 1
    bc24:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                    }

                    httpResponse[0] = 0;
    bc28:	10 92 14 54 	sts	0x5414, r1
                    connectionTimeoutTimer = 0;
    bc2c:	10 92 36 33 	sts	0x3336, r1
    bc30:	10 92 37 33 	sts	0x3337, r1
    bc34:	10 92 38 33 	sts	0x3338, r1
    bc38:	10 92 39 33 	sts	0x3339, r1
                    byteReceived = 0;
    bc3c:	10 92 c8 4a 	sts	0x4AC8, r1
    bc40:	a6 e6       	ldi	r26, 0x66	; 102
    bc42:	ea 2e       	mov	r14, r26
    bc44:	ae e0       	ldi	r26, 0x0E	; 14
    bc46:	fa 2e       	mov	r15, r26
    bc48:	db c0       	rjmp	.+438    	; 0xbe00 <main+0xd8e>
                    while(!connectionClosed){
                        if(Wifi_CharReadyToRead()){
    bc4a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    bc4e:	88 23       	and	r24, r24
    bc50:	29 f0       	breq	.+10     	; 0xbc5c <main+0xbea>
                            byteReceived = Wifi_GetByte(false);
    bc52:	80 e0       	ldi	r24, 0x00	; 0
    bc54:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bc58:	80 93 c8 4a 	sts	0x4AC8, r24
                        }
                        if(byteReceived == '*'){
    bc5c:	80 91 c8 4a 	lds	r24, 0x4AC8
    bc60:	8a 32       	cpi	r24, 0x2A	; 42
    bc62:	21 f5       	brne	.+72     	; 0xbcac <main+0xc3a>
                            byteReceived = Wifi_GetByte(true);
    bc64:	81 e0       	ldi	r24, 0x01	; 1
    bc66:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bc6a:	80 93 c8 4a 	sts	0x4AC8, r24
                            if(byteReceived == 'C'){
    bc6e:	83 34       	cpi	r24, 0x43	; 67
    bc70:	09 f0       	breq	.+2      	; 0xbc74 <main+0xc02>
    bc72:	a2 c0       	rjmp	.+324    	; 0xbdb8 <main+0xd46>
                                byteReceived = Wifi_GetByte(true);
    bc74:	81 e0       	ldi	r24, 0x01	; 1
    bc76:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bc7a:	80 93 c8 4a 	sts	0x4AC8, r24
                                if(byteReceived == 'L'){
    bc7e:	8c 34       	cpi	r24, 0x4C	; 76
    bc80:	09 f0       	breq	.+2      	; 0xbc84 <main+0xc12>
    bc82:	9a c0       	rjmp	.+308    	; 0xbdb8 <main+0xd46>
                                    byteReceived = Wifi_GetByte(true);
    bc84:	81 e0       	ldi	r24, 0x01	; 1
    bc86:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bc8a:	80 93 c8 4a 	sts	0x4AC8, r24
                                    if(byteReceived == 'O'){
    bc8e:	8f 34       	cpi	r24, 0x4F	; 79
    bc90:	09 f0       	breq	.+2      	; 0xbc94 <main+0xc22>
    bc92:	92 c0       	rjmp	.+292    	; 0xbdb8 <main+0xd46>
                                        byteReceived = Wifi_GetByte(true);
    bc94:	81 e0       	ldi	r24, 0x01	; 1
    bc96:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bc9a:	80 93 c8 4a 	sts	0x4AC8, r24
                                        if(byteReceived == 'S'){
    bc9e:	83 35       	cpi	r24, 0x53	; 83
    bca0:	09 f0       	breq	.+2      	; 0xbca4 <main+0xc32>
    bca2:	8a c0       	rjmp	.+276    	; 0xbdb8 <main+0xd46>
                                            connectionClosed = true;
    bca4:	81 e0       	ldi	r24, 0x01	; 1
    bca6:	80 93 35 33 	sts	0x3335, r24
    bcaa:	af c0       	rjmp	.+350    	; 0xbe0a <main+0xd98>
                                        }
                                    }
                                }
                            }

                        } else if(byteReceived == 'H'){
    bcac:	88 34       	cpi	r24, 0x48	; 72
    bcae:	09 f0       	breq	.+2      	; 0xbcb2 <main+0xc40>
    bcb0:	83 c0       	rjmp	.+262    	; 0xbdb8 <main+0xd46>
                            byteReceived = Wifi_GetByte(true);
    bcb2:	81 e0       	ldi	r24, 0x01	; 1
    bcb4:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bcb8:	80 93 c8 4a 	sts	0x4AC8, r24
                            if(byteReceived == 'T'){
    bcbc:	84 35       	cpi	r24, 0x54	; 84
    bcbe:	09 f0       	breq	.+2      	; 0xbcc2 <main+0xc50>
    bcc0:	7b c0       	rjmp	.+246    	; 0xbdb8 <main+0xd46>
                                byteReceived = Wifi_GetByte(true);
    bcc2:	81 e0       	ldi	r24, 0x01	; 1
    bcc4:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bcc8:	80 93 c8 4a 	sts	0x4AC8, r24
                                if(byteReceived == 'T'){
    bccc:	84 35       	cpi	r24, 0x54	; 84
    bcce:	09 f0       	breq	.+2      	; 0xbcd2 <main+0xc60>
    bcd0:	73 c0       	rjmp	.+230    	; 0xbdb8 <main+0xd46>
                                    byteReceived = Wifi_GetByte(true);
    bcd2:	81 e0       	ldi	r24, 0x01	; 1
    bcd4:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bcd8:	80 93 c8 4a 	sts	0x4AC8, r24
                                    if(byteReceived == 'P'){
    bcdc:	80 35       	cpi	r24, 0x50	; 80
    bcde:	09 f0       	breq	.+2      	; 0xbce2 <main+0xc70>
    bce0:	6b c0       	rjmp	.+214    	; 0xbdb8 <main+0xd46>
                                        httpResponseReceived = true;
    bce2:	81 e0       	ldi	r24, 0x01	; 1
    bce4:	80 93 34 33 	sts	0x3334, r24
    bce8:	80 e1       	ldi	r24, 0x10	; 16
    bcea:	97 e2       	ldi	r25, 0x27	; 39
    bcec:	f3 01       	movw	r30, r6
    bcee:	31 97       	sbiw	r30, 0x01	; 1
    bcf0:	f1 f7       	brne	.-4      	; 0xbcee <main+0xc7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bcf2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bcf4:	d9 f7       	brne	.-10     	; 0xbcec <main+0xc7a>
                                        _delay_ms(1000);
                                        tempStringFiller = 0;
    bcf6:	10 92 f9 32 	sts	0x32F9, r1
    bcfa:	12 c0       	rjmp	.+36     	; 0xbd20 <main+0xcae>
                                        while(Wifi_CharReadyToRead()){
                                            temp[tempStringFiller] = Wifi_GetByte(false);
    bcfc:	80 91 f9 32 	lds	r24, 0x32F9
    bd00:	08 2f       	mov	r16, r24
    bd02:	10 e0       	ldi	r17, 0x00	; 0
    bd04:	80 e0       	ldi	r24, 0x00	; 0
    bd06:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bd0a:	00 55       	subi	r16, 0x50	; 80
    bd0c:	16 4b       	sbci	r17, 0xB6	; 182
    bd0e:	f8 01       	movw	r30, r16
    bd10:	80 83       	st	Z, r24
                                            tempStringFiller++;
    bd12:	80 91 f9 32 	lds	r24, 0x32F9
    bd16:	8f 5f       	subi	r24, 0xFF	; 255
    bd18:	80 93 f9 32 	sts	0x32F9, r24
                                            if(tempStringFiller == 8){
    bd1c:	88 30       	cpi	r24, 0x08	; 8
    bd1e:	21 f0       	breq	.+8      	; 0xbd28 <main+0xcb6>
                                    byteReceived = Wifi_GetByte(true);
                                    if(byteReceived == 'P'){
                                        httpResponseReceived = true;
                                        _delay_ms(1000);
                                        tempStringFiller = 0;
                                        while(Wifi_CharReadyToRead()){
    bd20:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    bd24:	88 23       	and	r24, r24
    bd26:	51 f7       	brne	.-44     	; 0xbcfc <main+0xc8a>
                                            tempStringFiller++;
                                            if(tempStringFiller == 8){
                                                break;
                                            }
                                        }
                                        temp[tempStringFiller] = 0;
    bd28:	e0 91 f9 32 	lds	r30, 0x32F9
    bd2c:	f0 e0       	ldi	r31, 0x00	; 0
    bd2e:	e0 55       	subi	r30, 0x50	; 80
    bd30:	f6 4b       	sbci	r31, 0xB6	; 182
    bd32:	10 82       	st	Z, r1
                                        memcpy(httpResponse,temp+5,3);
    bd34:	a4 e1       	ldi	r26, 0x14	; 20
    bd36:	b4 e5       	ldi	r27, 0x54	; 84
    bd38:	e5 eb       	ldi	r30, 0xB5	; 181
    bd3a:	f9 e4       	ldi	r31, 0x49	; 73
    bd3c:	83 e0       	ldi	r24, 0x03	; 3
    bd3e:	01 90       	ld	r0, Z+
    bd40:	0d 92       	st	X+, r0
    bd42:	81 50       	subi	r24, 0x01	; 1
    bd44:	e1 f7       	brne	.-8      	; 0xbd3e <main+0xccc>
                                        lengthOfHttpResponse = 0;
    bd46:	10 92 32 33 	sts	0x3332, r1
    bd4a:	10 92 33 33 	sts	0x3333, r1
    bd4e:	80 e5       	ldi	r24, 0x50	; 80
    bd50:	93 ec       	ldi	r25, 0xC3	; 195
    bd52:	f3 01       	movw	r30, r6
    bd54:	31 97       	sbiw	r30, 0x01	; 1
    bd56:	f1 f7       	brne	.-4      	; 0xbd54 <main+0xce2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bd58:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bd5a:	d9 f7       	brne	.-10     	; 0xbd52 <main+0xce0>
    bd5c:	17 c0       	rjmp	.+46     	; 0xbd8c <main+0xd1a>
                                        _delay_ms(5000);
                                        while(Wifi_CharReadyToRead()){
                                            uploadFileBuffer[lengthOfHttpResponse] = Wifi_GetByte(false);
    bd5e:	00 91 32 33 	lds	r16, 0x3332
    bd62:	10 91 33 33 	lds	r17, 0x3333
    bd66:	80 e0       	ldi	r24, 0x00	; 0
    bd68:	0e 94 10 03 	call	0x620	; 0x620 <Wifi_GetByte>
    bd6c:	0b 51       	subi	r16, 0x1B	; 27
    bd6e:	18 4c       	sbci	r17, 0xC8	; 200
    bd70:	d8 01       	movw	r26, r16
    bd72:	8c 93       	st	X, r24
                                            lengthOfHttpResponse++;
    bd74:	80 91 32 33 	lds	r24, 0x3332
    bd78:	90 91 33 33 	lds	r25, 0x3333
    bd7c:	01 96       	adiw	r24, 0x01	; 1
    bd7e:	80 93 32 33 	sts	0x3332, r24
    bd82:	90 93 33 33 	sts	0x3333, r25
                                            if(lengthOfHttpResponse > 999){
    bd86:	88 5e       	subi	r24, 0xE8	; 232
    bd88:	93 40       	sbci	r25, 0x03	; 3
    bd8a:	20 f4       	brcc	.+8      	; 0xbd94 <main+0xd22>
                                        }
                                        temp[tempStringFiller] = 0;
                                        memcpy(httpResponse,temp+5,3);
                                        lengthOfHttpResponse = 0;
                                        _delay_ms(5000);
                                        while(Wifi_CharReadyToRead()){
    bd8c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Wifi_CharReadyToRead>
    bd90:	88 23       	and	r24, r24
    bd92:	29 f7       	brne	.-54     	; 0xbd5e <main+0xcec>
                                            lengthOfHttpResponse++;
                                            if(lengthOfHttpResponse > 999){
                                                break;
                                            }
                                        }
                                        uploadFileBuffer[lengthOfHttpResponse] = 0;
    bd94:	e0 91 32 33 	lds	r30, 0x3332
    bd98:	f0 91 33 33 	lds	r31, 0x3333
    bd9c:	eb 51       	subi	r30, 0x1B	; 27
    bd9e:	f8 4c       	sbci	r31, 0xC8	; 200
    bda0:	10 82       	st	Z, r1
                                        if(strstr(uploadFileBuffer,"*CLOS") != 0){
    bda2:	85 ee       	ldi	r24, 0xE5	; 229
    bda4:	97 e3       	ldi	r25, 0x37	; 55
    bda6:	6b ef       	ldi	r22, 0xFB	; 251
    bda8:	7a e2       	ldi	r23, 0x2A	; 42
    bdaa:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    bdae:	00 97       	sbiw	r24, 0x00	; 0
    bdb0:	19 f0       	breq	.+6      	; 0xbdb8 <main+0xd46>
                                            connectionClosed = true;
    bdb2:	81 e0       	ldi	r24, 0x01	; 1
    bdb4:	80 93 35 33 	sts	0x3335, r24
    bdb8:	c7 01       	movw	r24, r14
    bdba:	01 97       	sbiw	r24, 0x01	; 1
    bdbc:	f1 f7       	brne	.-4      	; 0xbdba <main+0xd48>
                                    }
                                }
                            }
                        }
                        _delay_ms(1);
                        connectionTimeoutTimer++;
    bdbe:	80 91 36 33 	lds	r24, 0x3336
    bdc2:	90 91 37 33 	lds	r25, 0x3337
    bdc6:	a0 91 38 33 	lds	r26, 0x3338
    bdca:	b0 91 39 33 	lds	r27, 0x3339
    bdce:	01 96       	adiw	r24, 0x01	; 1
    bdd0:	a1 1d       	adc	r26, r1
    bdd2:	b1 1d       	adc	r27, r1
    bdd4:	80 93 36 33 	sts	0x3336, r24
    bdd8:	90 93 37 33 	sts	0x3337, r25
    bddc:	a0 93 38 33 	sts	0x3338, r26
    bde0:	b0 93 39 33 	sts	0x3339, r27
                        if(connectionTimeoutTimer > 120000){
    bde4:	81 5c       	subi	r24, 0xC1	; 193
    bde6:	94 4d       	sbci	r25, 0xD4	; 212
    bde8:	a1 40       	sbci	r26, 0x01	; 1
    bdea:	b0 40       	sbci	r27, 0x00	; 0
    bdec:	48 f0       	brcs	.+18     	; 0xbe00 <main+0xd8e>
                            connectionTimeoutTimer = 0;
    bdee:	10 92 36 33 	sts	0x3336, r1
    bdf2:	10 92 37 33 	sts	0x3337, r1
    bdf6:	10 92 38 33 	sts	0x3338, r1
    bdfa:	10 92 39 33 	sts	0x3339, r1
    bdfe:	05 c0       	rjmp	.+10     	; 0xbe0a <main+0xd98>
                    }

                    httpResponse[0] = 0;
                    connectionTimeoutTimer = 0;
                    byteReceived = 0;
                    while(!connectionClosed){
    be00:	80 91 35 33 	lds	r24, 0x3335
    be04:	88 23       	and	r24, r24
    be06:	09 f4       	brne	.+2      	; 0xbe0a <main+0xd98>
    be08:	20 cf       	rjmp	.-448    	; 0xbc4a <main+0xbd8>
                            break;
                        }
                    }
                }

                if(useWifiForUploading){
    be0a:	80 91 a9 32 	lds	r24, 0x32A9
    be0e:	88 23       	and	r24, r24
    be10:	29 f0       	breq	.+10     	; 0xbe1c <main+0xdaa>
                   Debug_SendString("Connection Closed",true);
    be12:	81 e0       	ldi	r24, 0x01	; 1
    be14:	9b e2       	ldi	r25, 0x2B	; 43
    be16:	61 e0       	ldi	r22, 0x01	; 1
    be18:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                }

                uploadTimeStop = UNIX_time;
    be1c:	80 91 d8 32 	lds	r24, 0x32D8
    be20:	90 91 d9 32 	lds	r25, 0x32D9
    be24:	a0 91 da 32 	lds	r26, 0x32DA
    be28:	b0 91 db 32 	lds	r27, 0x32DB
    be2c:	80 93 4e 3c 	sts	0x3C4E, r24
    be30:	90 93 4f 3c 	sts	0x3C4F, r25
    be34:	a0 93 50 3c 	sts	0x3C50, r26
    be38:	b0 93 51 3c 	sts	0x3C51, r27


                if((httpResponseReceived) & (strstr(httpResponse,"200") != 0)){
    be3c:	10 91 34 33 	lds	r17, 0x3334
    be40:	84 e1       	ldi	r24, 0x14	; 20
    be42:	94 e5       	ldi	r25, 0x54	; 84
    be44:	63 e1       	ldi	r22, 0x13	; 19
    be46:	7b e2       	ldi	r23, 0x2B	; 43
    be48:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    be4c:	40 e0       	ldi	r20, 0x00	; 0
    be4e:	50 e0       	ldi	r21, 0x00	; 0
    be50:	00 97       	sbiw	r24, 0x00	; 0
    be52:	11 f0       	breq	.+4      	; 0xbe58 <main+0xde6>
    be54:	41 e0       	ldi	r20, 0x01	; 1
    be56:	50 e0       	ldi	r21, 0x00	; 0
    be58:	81 2f       	mov	r24, r17
    be5a:	90 e0       	ldi	r25, 0x00	; 0
    be5c:	48 23       	and	r20, r24
    be5e:	59 23       	and	r21, r25
    be60:	45 2b       	or	r20, r21
    be62:	09 f4       	brne	.+2      	; 0xbe66 <main+0xdf4>
    be64:	ec c0       	rjmp	.+472    	; 0xc03e <main+0xfcc>
                    memcpy(successfulBinaryRecordsString,strtok((strstr(uploadFileBuffer,"\"successful_binrecs\":") + 21),","),5);
    be66:	85 ee       	ldi	r24, 0xE5	; 229
    be68:	97 e3       	ldi	r25, 0x37	; 55
    be6a:	67 e1       	ldi	r22, 0x17	; 23
    be6c:	7b e2       	ldi	r23, 0x2B	; 43
    be6e:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    be72:	45 96       	adiw	r24, 0x15	; 21
    be74:	62 e8       	ldi	r22, 0x82	; 130
    be76:	75 e2       	ldi	r23, 0x25	; 37
    be78:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    be7c:	a1 ef       	ldi	r26, 0xF1	; 241
    be7e:	ba e4       	ldi	r27, 0x4A	; 74
    be80:	fc 01       	movw	r30, r24
    be82:	85 e0       	ldi	r24, 0x05	; 5
    be84:	01 90       	ld	r0, Z+
    be86:	0d 92       	st	X+, r0
    be88:	81 50       	subi	r24, 0x01	; 1
    be8a:	e1 f7       	brne	.-8      	; 0xbe84 <main+0xe12>
                    memcpy(failedBinaryRecordsString    ,strtok((strstr(uploadFileBuffer,"\"failed_binrecs\":") + 17),","),5);
    be8c:	85 ee       	ldi	r24, 0xE5	; 229
    be8e:	97 e3       	ldi	r25, 0x37	; 55
    be90:	6d e2       	ldi	r22, 0x2D	; 45
    be92:	7b e2       	ldi	r23, 0x2B	; 43
    be94:	0e 94 94 61 	call	0xc328	; 0xc328 <strstr>
    be98:	41 96       	adiw	r24, 0x11	; 17
    be9a:	62 e8       	ldi	r22, 0x82	; 130
    be9c:	75 e2       	ldi	r23, 0x25	; 37
    be9e:	0e 94 2a 61 	call	0xc254	; 0xc254 <strtok>
    bea2:	ac e9       	ldi	r26, 0x9C	; 156
    bea4:	bc e5       	ldi	r27, 0x5C	; 92
    bea6:	fc 01       	movw	r30, r24
    bea8:	85 e0       	ldi	r24, 0x05	; 5
    beaa:	01 90       	ld	r0, Z+
    beac:	0d 92       	st	X+, r0
    beae:	81 50       	subi	r24, 0x01	; 1
    beb0:	e1 f7       	brne	.-8      	; 0xbeaa <main+0xe38>

                    if(useWifiForUploading){
    beb2:	80 91 a9 32 	lds	r24, 0x32A9
    beb6:	88 23       	and	r24, r24
    beb8:	09 f4       	brne	.+2      	; 0xbebc <main+0xe4a>
    beba:	9d c0       	rjmp	.+314    	; 0xbff6 <main+0xf84>
                        Debug_SendString("Got a 200 back",true);
    bebc:	8f e3       	ldi	r24, 0x3F	; 63
    bebe:	9b e2       	ldi	r25, 0x2B	; 43
    bec0:	61 e0       	ldi	r22, 0x01	; 1
    bec2:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        Debug_SendString("Successful: ",false);
    bec6:	8e e4       	ldi	r24, 0x4E	; 78
    bec8:	9b e2       	ldi	r25, 0x2B	; 43
    beca:	60 e0       	ldi	r22, 0x00	; 0
    becc:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        Debug_SendString(successfulBinaryRecordsString,true);
    bed0:	81 ef       	ldi	r24, 0xF1	; 241
    bed2:	9a e4       	ldi	r25, 0x4A	; 74
    bed4:	61 e0       	ldi	r22, 0x01	; 1
    bed6:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        Debug_SendString("Failed: ",false);
    beda:	8b e5       	ldi	r24, 0x5B	; 91
    bedc:	9b e2       	ldi	r25, 0x2B	; 43
    bede:	60 e0       	ldi	r22, 0x00	; 0
    bee0:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        Debug_SendString(failedBinaryRecordsString,true);
    bee4:	8c e9       	ldi	r24, 0x9C	; 156
    bee6:	9c e5       	ldi	r25, 0x5C	; 92
    bee8:	61 e0       	ldi	r22, 0x01	; 1
    beea:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        sprintf(temp,"File TX took: %lu secs",uploadTimeStop - uploadTimeStart);
    beee:	80 91 4e 3c 	lds	r24, 0x3C4E
    bef2:	90 91 4f 3c 	lds	r25, 0x3C4F
    bef6:	a0 91 50 3c 	lds	r26, 0x3C50
    befa:	b0 91 51 3c 	lds	r27, 0x3C51
    befe:	20 91 f2 3b 	lds	r18, 0x3BF2
    bf02:	30 91 f3 3b 	lds	r19, 0x3BF3
    bf06:	40 91 f4 3b 	lds	r20, 0x3BF4
    bf0a:	50 91 f5 3b 	lds	r21, 0x3BF5
    bf0e:	6d b7       	in	r22, 0x3d	; 61
    bf10:	7e b7       	in	r23, 0x3e	; 62
    bf12:	68 50       	subi	r22, 0x08	; 8
    bf14:	70 40       	sbci	r23, 0x00	; 0
    bf16:	6d bf       	out	0x3d, r22	; 61
    bf18:	7e bf       	out	0x3e, r23	; 62
    bf1a:	0d b7       	in	r16, 0x3d	; 61
    bf1c:	1e b7       	in	r17, 0x3e	; 62
    bf1e:	0f 5f       	subi	r16, 0xFF	; 255
    bf20:	1f 4f       	sbci	r17, 0xFF	; 255
    bf22:	f0 eb       	ldi	r31, 0xB0	; 176
    bf24:	cf 2e       	mov	r12, r31
    bf26:	f9 e4       	ldi	r31, 0x49	; 73
    bf28:	df 2e       	mov	r13, r31
    bf2a:	ed b7       	in	r30, 0x3d	; 61
    bf2c:	fe b7       	in	r31, 0x3e	; 62
    bf2e:	c1 82       	std	Z+1, r12	; 0x01
    bf30:	d2 82       	std	Z+2, r13	; 0x02
    bf32:	64 e6       	ldi	r22, 0x64	; 100
    bf34:	7b e2       	ldi	r23, 0x2B	; 43
    bf36:	f8 01       	movw	r30, r16
    bf38:	62 83       	std	Z+2, r22	; 0x02
    bf3a:	73 83       	std	Z+3, r23	; 0x03
    bf3c:	82 1b       	sub	r24, r18
    bf3e:	93 0b       	sbc	r25, r19
    bf40:	a4 0b       	sbc	r26, r20
    bf42:	b5 0b       	sbc	r27, r21
    bf44:	84 83       	std	Z+4, r24	; 0x04
    bf46:	95 83       	std	Z+5, r25	; 0x05
    bf48:	a6 83       	std	Z+6, r26	; 0x06
    bf4a:	b7 83       	std	Z+7, r27	; 0x07
    bf4c:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
                        Debug_SendString(temp,true);
    bf50:	2d b7       	in	r18, 0x3d	; 61
    bf52:	3e b7       	in	r19, 0x3e	; 62
    bf54:	28 5f       	subi	r18, 0xF8	; 248
    bf56:	3f 4f       	sbci	r19, 0xFF	; 255
    bf58:	2d bf       	out	0x3d, r18	; 61
    bf5a:	3e bf       	out	0x3e, r19	; 62
    bf5c:	c6 01       	movw	r24, r12
    bf5e:	61 e0       	ldi	r22, 0x01	; 1
    bf60:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        sprintf(temp,"TX speed: %lu kbps", uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)));
    bf64:	60 91 1d 33 	lds	r22, 0x331D
    bf68:	70 91 1e 33 	lds	r23, 0x331E
    bf6c:	80 91 1f 33 	lds	r24, 0x331F
    bf70:	90 91 20 33 	lds	r25, 0x3320
    bf74:	20 91 4e 3c 	lds	r18, 0x3C4E
    bf78:	30 91 4f 3c 	lds	r19, 0x3C4F
    bf7c:	40 91 50 3c 	lds	r20, 0x3C50
    bf80:	50 91 51 3c 	lds	r21, 0x3C51
    bf84:	e0 90 f2 3b 	lds	r14, 0x3BF2
    bf88:	f0 90 f3 3b 	lds	r15, 0x3BF3
    bf8c:	00 91 f4 3b 	lds	r16, 0x3BF4
    bf90:	10 91 f5 3b 	lds	r17, 0x3BF5
    bf94:	ad b7       	in	r26, 0x3d	; 61
    bf96:	be b7       	in	r27, 0x3e	; 62
    bf98:	18 97       	sbiw	r26, 0x08	; 8
    bf9a:	ad bf       	out	0x3d, r26	; 61
    bf9c:	be bf       	out	0x3e, r27	; 62
    bf9e:	ad b6       	in	r10, 0x3d	; 61
    bfa0:	be b6       	in	r11, 0x3e	; 62
    bfa2:	08 94       	sec
    bfa4:	a1 1c       	adc	r10, r1
    bfa6:	b1 1c       	adc	r11, r1
    bfa8:	11 96       	adiw	r26, 0x01	; 1
    bfaa:	cd 92       	st	X+, r12
    bfac:	dc 92       	st	X, r13
    bfae:	12 97       	sbiw	r26, 0x02	; 2
    bfb0:	ab e7       	ldi	r26, 0x7B	; 123
    bfb2:	bb e2       	ldi	r27, 0x2B	; 43
    bfb4:	f5 01       	movw	r30, r10
    bfb6:	a2 83       	std	Z+2, r26	; 0x02
    bfb8:	b3 83       	std	Z+3, r27	; 0x03
    bfba:	2e 19       	sub	r18, r14
    bfbc:	3f 09       	sbc	r19, r15
    bfbe:	40 0b       	sbc	r20, r16
    bfc0:	51 0b       	sbc	r21, r17
    bfc2:	e7 e0       	ldi	r30, 0x07	; 7
    bfc4:	22 0f       	add	r18, r18
    bfc6:	33 1f       	adc	r19, r19
    bfc8:	44 1f       	adc	r20, r20
    bfca:	55 1f       	adc	r21, r21
    bfcc:	ea 95       	dec	r30
    bfce:	d1 f7       	brne	.-12     	; 0xbfc4 <main+0xf52>
    bfd0:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    bfd4:	f5 01       	movw	r30, r10
    bfd6:	24 83       	std	Z+4, r18	; 0x04
    bfd8:	35 83       	std	Z+5, r19	; 0x05
    bfda:	46 83       	std	Z+6, r20	; 0x06
    bfdc:	57 83       	std	Z+7, r21	; 0x07
    bfde:	0e 94 30 62 	call	0xc460	; 0xc460 <sprintf>
                        Debug_SendString(temp,true);
    bfe2:	2d b7       	in	r18, 0x3d	; 61
    bfe4:	3e b7       	in	r19, 0x3e	; 62
    bfe6:	28 5f       	subi	r18, 0xF8	; 248
    bfe8:	3f 4f       	sbci	r19, 0xFF	; 255
    bfea:	2d bf       	out	0x3d, r18	; 61
    bfec:	3e bf       	out	0x3e, r19	; 62
    bfee:	c6 01       	movw	r24, r12
    bff0:	61 e0       	ldi	r22, 0x01	; 1
    bff2:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>

                    }

                    okToCloseUploadFile = true;                   // flags it close file and to be to be renamed
    bff6:	81 e0       	ldi	r24, 0x01	; 1
    bff8:	80 93 10 33 	sts	0x3310, r24
    bffc:	80 e1       	ldi	r24, 0x10	; 16
    bffe:	97 e2       	ldi	r25, 0x27	; 39
    c000:	f3 01       	movw	r30, r6
    c002:	31 97       	sbiw	r30, 0x01	; 1
    c004:	f1 f7       	brne	.-4      	; 0xc002 <main+0xf90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c006:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c008:	d9 f7       	brne	.-10     	; 0xc000 <main+0xf8e>
                    _delay_ms(1000);
                    while(okToCloseUploadFile);
    c00a:	80 91 10 33 	lds	r24, 0x3310
    c00e:	88 23       	and	r24, r24
    c010:	e1 f7       	brne	.-8      	; 0xc00a <main+0xf98>
                    okToRenameUploadFile = true;
    c012:	81 e0       	ldi	r24, 0x01	; 1
    c014:	80 93 11 33 	sts	0x3311, r24
                    while(okToRenameUploadFile);
    c018:	80 91 11 33 	lds	r24, 0x3311
    c01c:	88 23       	and	r24, r24
    c01e:	e1 f7       	brne	.-8      	; 0xc018 <main+0xfa6>
    c020:	80 e1       	ldi	r24, 0x10	; 16
    c022:	97 e2       	ldi	r25, 0x27	; 39
    c024:	f3 01       	movw	r30, r6
    c026:	31 97       	sbiw	r30, 0x01	; 1
    c028:	f1 f7       	brne	.-4      	; 0xc026 <main+0xfb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c02a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c02c:	d9 f7       	brne	.-10     	; 0xc024 <main+0xfb2>
                    _delay_ms(1000);
                    okToWriteUploaderLogFile = true;               // adds entry to log file
    c02e:	81 e0       	ldi	r24, 0x01	; 1
    c030:	80 93 3a 33 	sts	0x333A, r24
                    while(okToWriteUploaderLogFile);
    c034:	80 91 3a 33 	lds	r24, 0x333A
    c038:	88 23       	and	r24, r24
    c03a:	e1 f7       	brne	.-8      	; 0xc034 <main+0xfc2>
    c03c:	34 c0       	rjmp	.+104    	; 0xc0a6 <main+0x1034>

                } else {
                    if(useWifiForUploading){
    c03e:	80 91 a9 32 	lds	r24, 0x32A9
    c042:	88 23       	and	r24, r24
    c044:	a1 f0       	breq	.+40     	; 0xc06e <main+0xffc>
                        Debug_SendString("File did not upload",true);
    c046:	8e e8       	ldi	r24, 0x8E	; 142
    c048:	9b e2       	ldi	r25, 0x2B	; 43
    c04a:	61 e0       	ldi	r22, 0x01	; 1
    c04c:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                            Debug_SendString("got: *",false);
    c050:	82 ea       	ldi	r24, 0xA2	; 162
    c052:	9b e2       	ldi	r25, 0x2B	; 43
    c054:	60 e0       	ldi	r22, 0x00	; 0
    c056:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        Debug_SendString(httpResponse,false);
    c05a:	84 e1       	ldi	r24, 0x14	; 20
    c05c:	94 e5       	ldi	r25, 0x54	; 84
    c05e:	60 e0       	ldi	r22, 0x00	; 0
    c060:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                        Debug_SendString("* back",true);
    c064:	89 ea       	ldi	r24, 0xA9	; 169
    c066:	9b e2       	ldi	r25, 0x2B	; 43
    c068:	61 e0       	ldi	r22, 0x01	; 1
    c06a:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                    }


    			    okToCloseUploadFile = true;                    // flags it close file
    c06e:	81 e0       	ldi	r24, 0x01	; 1
    c070:	80 93 10 33 	sts	0x3310, r24
    c074:	80 e1       	ldi	r24, 0x10	; 16
    c076:	97 e2       	ldi	r25, 0x27	; 39
    c078:	f3 01       	movw	r30, r6
    c07a:	31 97       	sbiw	r30, 0x01	; 1
    c07c:	f1 f7       	brne	.-4      	; 0xc07a <main+0x1008>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c07e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c080:	d9 f7       	brne	.-10     	; 0xc078 <main+0x1006>
                    _delay_ms(1000);
                    while(okToCloseUploadFile);
    c082:	80 91 10 33 	lds	r24, 0x3310
    c086:	88 23       	and	r24, r24
    c088:	e1 f7       	brne	.-8      	; 0xc082 <main+0x1010>
    c08a:	80 e1       	ldi	r24, 0x10	; 16
    c08c:	97 e2       	ldi	r25, 0x27	; 39
    c08e:	f3 01       	movw	r30, r6
    c090:	31 97       	sbiw	r30, 0x01	; 1
    c092:	f1 f7       	brne	.-4      	; 0xc090 <main+0x101e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c094:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c096:	d9 f7       	brne	.-10     	; 0xc08e <main+0x101c>
                    _delay_ms(1000);

			        uploadFailed = true;                             // adds error entry to log file
    c098:	81 e0       	ldi	r24, 0x01	; 1
    c09a:	80 93 0f 33 	sts	0x330F, r24
                    while(uploadFailed);
    c09e:	80 91 0f 33 	lds	r24, 0x330F
    c0a2:	88 23       	and	r24, r24
    c0a4:	e1 f7       	brne	.-8      	; 0xc09e <main+0x102c>
                }

                if(useWifiForUploading){
    c0a6:	80 91 a9 32 	lds	r24, 0x32A9
    c0aa:	88 23       	and	r24, r24
    c0ac:	51 f0       	breq	.+20     	; 0xc0c2 <main+0x1050>
                  Debug_SendString("Done!", true);
    c0ae:	80 eb       	ldi	r24, 0xB0	; 176
    c0b0:	9b e2       	ldi	r25, 0x2B	; 43
    c0b2:	61 e0       	ldi	r22, 0x01	; 1
    c0b4:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                  Debug_SendString("_____________________________________________", true);
    c0b8:	84 e6       	ldi	r24, 0x64	; 100
    c0ba:	99 e2       	ldi	r25, 0x29	; 41
    c0bc:	61 e0       	ldi	r22, 0x01	; 1
    c0be:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <Debug_SendString>
                }

		        uploading = false;
    c0c2:	10 92 14 33 	sts	0x3314, r1
			    okToUpload = false;
    c0c6:	10 92 13 33 	sts	0x3313, r1
    c0ca:	2b c9       	rjmp	.-3498   	; 0xb322 <main+0x2b0>
    c0cc:	e0 e2       	ldi	r30, 0x20	; 32
    c0ce:	f6 e0       	ldi	r31, 0x06	; 6
    c0d0:	82 e0       	ldi	r24, 0x02	; 2
    c0d2:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    c0d4:	81 e0       	ldi	r24, 0x01	; 1
    c0d6:	85 83       	std	Z+5, r24	; 0x05
    c0d8:	20 e1       	ldi	r18, 0x10	; 16
    c0da:	37 e2       	ldi	r19, 0x27	; 39
    c0dc:	40 e7       	ldi	r20, 0x70	; 112
    c0de:	51 e0       	ldi	r21, 0x01	; 1
    c0e0:	65 c8       	rjmp	.-3894   	; 0xb1ac <main+0x13a>

0000c0e2 <__mulsi3>:
    c0e2:	62 9f       	mul	r22, r18
    c0e4:	d0 01       	movw	r26, r0
    c0e6:	73 9f       	mul	r23, r19
    c0e8:	f0 01       	movw	r30, r0
    c0ea:	82 9f       	mul	r24, r18
    c0ec:	e0 0d       	add	r30, r0
    c0ee:	f1 1d       	adc	r31, r1
    c0f0:	64 9f       	mul	r22, r20
    c0f2:	e0 0d       	add	r30, r0
    c0f4:	f1 1d       	adc	r31, r1
    c0f6:	92 9f       	mul	r25, r18
    c0f8:	f0 0d       	add	r31, r0
    c0fa:	83 9f       	mul	r24, r19
    c0fc:	f0 0d       	add	r31, r0
    c0fe:	74 9f       	mul	r23, r20
    c100:	f0 0d       	add	r31, r0
    c102:	65 9f       	mul	r22, r21
    c104:	f0 0d       	add	r31, r0
    c106:	99 27       	eor	r25, r25
    c108:	72 9f       	mul	r23, r18
    c10a:	b0 0d       	add	r27, r0
    c10c:	e1 1d       	adc	r30, r1
    c10e:	f9 1f       	adc	r31, r25
    c110:	63 9f       	mul	r22, r19
    c112:	b0 0d       	add	r27, r0
    c114:	e1 1d       	adc	r30, r1
    c116:	f9 1f       	adc	r31, r25
    c118:	bd 01       	movw	r22, r26
    c11a:	cf 01       	movw	r24, r30
    c11c:	11 24       	eor	r1, r1
    c11e:	08 95       	ret

0000c120 <__udivmodqi4>:
    c120:	99 1b       	sub	r25, r25
    c122:	79 e0       	ldi	r23, 0x09	; 9
    c124:	04 c0       	rjmp	.+8      	; 0xc12e <__udivmodqi4_ep>

0000c126 <__udivmodqi4_loop>:
    c126:	99 1f       	adc	r25, r25
    c128:	96 17       	cp	r25, r22
    c12a:	08 f0       	brcs	.+2      	; 0xc12e <__udivmodqi4_ep>
    c12c:	96 1b       	sub	r25, r22

0000c12e <__udivmodqi4_ep>:
    c12e:	88 1f       	adc	r24, r24
    c130:	7a 95       	dec	r23
    c132:	c9 f7       	brne	.-14     	; 0xc126 <__udivmodqi4_loop>
    c134:	80 95       	com	r24
    c136:	08 95       	ret

0000c138 <__udivmodhi4>:
    c138:	aa 1b       	sub	r26, r26
    c13a:	bb 1b       	sub	r27, r27
    c13c:	51 e1       	ldi	r21, 0x11	; 17
    c13e:	07 c0       	rjmp	.+14     	; 0xc14e <__udivmodhi4_ep>

0000c140 <__udivmodhi4_loop>:
    c140:	aa 1f       	adc	r26, r26
    c142:	bb 1f       	adc	r27, r27
    c144:	a6 17       	cp	r26, r22
    c146:	b7 07       	cpc	r27, r23
    c148:	10 f0       	brcs	.+4      	; 0xc14e <__udivmodhi4_ep>
    c14a:	a6 1b       	sub	r26, r22
    c14c:	b7 0b       	sbc	r27, r23

0000c14e <__udivmodhi4_ep>:
    c14e:	88 1f       	adc	r24, r24
    c150:	99 1f       	adc	r25, r25
    c152:	5a 95       	dec	r21
    c154:	a9 f7       	brne	.-22     	; 0xc140 <__udivmodhi4_loop>
    c156:	80 95       	com	r24
    c158:	90 95       	com	r25
    c15a:	bc 01       	movw	r22, r24
    c15c:	cd 01       	movw	r24, r26
    c15e:	08 95       	ret

0000c160 <__divmodhi4>:
    c160:	97 fb       	bst	r25, 7
    c162:	09 2e       	mov	r0, r25
    c164:	07 26       	eor	r0, r23
    c166:	0a d0       	rcall	.+20     	; 0xc17c <__divmodhi4_neg1>
    c168:	77 fd       	sbrc	r23, 7
    c16a:	04 d0       	rcall	.+8      	; 0xc174 <__divmodhi4_neg2>
    c16c:	e5 df       	rcall	.-54     	; 0xc138 <__udivmodhi4>
    c16e:	06 d0       	rcall	.+12     	; 0xc17c <__divmodhi4_neg1>
    c170:	00 20       	and	r0, r0
    c172:	1a f4       	brpl	.+6      	; 0xc17a <__divmodhi4_exit>

0000c174 <__divmodhi4_neg2>:
    c174:	70 95       	com	r23
    c176:	61 95       	neg	r22
    c178:	7f 4f       	sbci	r23, 0xFF	; 255

0000c17a <__divmodhi4_exit>:
    c17a:	08 95       	ret

0000c17c <__divmodhi4_neg1>:
    c17c:	f6 f7       	brtc	.-4      	; 0xc17a <__divmodhi4_exit>
    c17e:	90 95       	com	r25
    c180:	81 95       	neg	r24
    c182:	9f 4f       	sbci	r25, 0xFF	; 255
    c184:	08 95       	ret

0000c186 <__udivmodsi4>:
    c186:	a1 e2       	ldi	r26, 0x21	; 33
    c188:	1a 2e       	mov	r1, r26
    c18a:	aa 1b       	sub	r26, r26
    c18c:	bb 1b       	sub	r27, r27
    c18e:	fd 01       	movw	r30, r26
    c190:	0d c0       	rjmp	.+26     	; 0xc1ac <__udivmodsi4_ep>

0000c192 <__udivmodsi4_loop>:
    c192:	aa 1f       	adc	r26, r26
    c194:	bb 1f       	adc	r27, r27
    c196:	ee 1f       	adc	r30, r30
    c198:	ff 1f       	adc	r31, r31
    c19a:	a2 17       	cp	r26, r18
    c19c:	b3 07       	cpc	r27, r19
    c19e:	e4 07       	cpc	r30, r20
    c1a0:	f5 07       	cpc	r31, r21
    c1a2:	20 f0       	brcs	.+8      	; 0xc1ac <__udivmodsi4_ep>
    c1a4:	a2 1b       	sub	r26, r18
    c1a6:	b3 0b       	sbc	r27, r19
    c1a8:	e4 0b       	sbc	r30, r20
    c1aa:	f5 0b       	sbc	r31, r21

0000c1ac <__udivmodsi4_ep>:
    c1ac:	66 1f       	adc	r22, r22
    c1ae:	77 1f       	adc	r23, r23
    c1b0:	88 1f       	adc	r24, r24
    c1b2:	99 1f       	adc	r25, r25
    c1b4:	1a 94       	dec	r1
    c1b6:	69 f7       	brne	.-38     	; 0xc192 <__udivmodsi4_loop>
    c1b8:	60 95       	com	r22
    c1ba:	70 95       	com	r23
    c1bc:	80 95       	com	r24
    c1be:	90 95       	com	r25
    c1c0:	9b 01       	movw	r18, r22
    c1c2:	ac 01       	movw	r20, r24
    c1c4:	bd 01       	movw	r22, r26
    c1c6:	cf 01       	movw	r24, r30
    c1c8:	08 95       	ret

0000c1ca <atoi>:
    c1ca:	fc 01       	movw	r30, r24
    c1cc:	88 27       	eor	r24, r24
    c1ce:	99 27       	eor	r25, r25
    c1d0:	e8 94       	clt
    c1d2:	21 91       	ld	r18, Z+
    c1d4:	20 32       	cpi	r18, 0x20	; 32
    c1d6:	e9 f3       	breq	.-6      	; 0xc1d2 <atoi+0x8>
    c1d8:	29 30       	cpi	r18, 0x09	; 9
    c1da:	10 f0       	brcs	.+4      	; 0xc1e0 <atoi+0x16>
    c1dc:	2e 30       	cpi	r18, 0x0E	; 14
    c1de:	c8 f3       	brcs	.-14     	; 0xc1d2 <atoi+0x8>
    c1e0:	2b 32       	cpi	r18, 0x2B	; 43
    c1e2:	41 f0       	breq	.+16     	; 0xc1f4 <atoi+0x2a>
    c1e4:	2d 32       	cpi	r18, 0x2D	; 45
    c1e6:	39 f4       	brne	.+14     	; 0xc1f6 <atoi+0x2c>
    c1e8:	68 94       	set
    c1ea:	04 c0       	rjmp	.+8      	; 0xc1f4 <atoi+0x2a>
    c1ec:	0e 94 28 62 	call	0xc450	; 0xc450 <__mulhi_const_10>
    c1f0:	82 0f       	add	r24, r18
    c1f2:	91 1d       	adc	r25, r1
    c1f4:	21 91       	ld	r18, Z+
    c1f6:	20 53       	subi	r18, 0x30	; 48
    c1f8:	2a 30       	cpi	r18, 0x0A	; 10
    c1fa:	c0 f3       	brcs	.-16     	; 0xc1ec <atoi+0x22>
    c1fc:	1e f4       	brtc	.+6      	; 0xc204 <atoi+0x3a>
    c1fe:	90 95       	com	r25
    c200:	81 95       	neg	r24
    c202:	9f 4f       	sbci	r25, 0xFF	; 255
    c204:	08 95       	ret

0000c206 <atol>:
    c206:	1f 93       	push	r17
    c208:	fc 01       	movw	r30, r24
    c20a:	99 27       	eor	r25, r25
    c20c:	88 27       	eor	r24, r24
    c20e:	bc 01       	movw	r22, r24
    c210:	e8 94       	clt
    c212:	11 91       	ld	r17, Z+
    c214:	10 32       	cpi	r17, 0x20	; 32
    c216:	e9 f3       	breq	.-6      	; 0xc212 <atol+0xc>
    c218:	19 30       	cpi	r17, 0x09	; 9
    c21a:	10 f0       	brcs	.+4      	; 0xc220 <atol+0x1a>
    c21c:	1e 30       	cpi	r17, 0x0E	; 14
    c21e:	c8 f3       	brcs	.-14     	; 0xc212 <atol+0xc>
    c220:	1b 32       	cpi	r17, 0x2B	; 43
    c222:	51 f0       	breq	.+20     	; 0xc238 <atol+0x32>
    c224:	1d 32       	cpi	r17, 0x2D	; 45
    c226:	49 f4       	brne	.+18     	; 0xc23a <atol+0x34>
    c228:	68 94       	set
    c22a:	06 c0       	rjmp	.+12     	; 0xc238 <atol+0x32>
    c22c:	0e 94 13 62 	call	0xc426	; 0xc426 <__mulsi_const_10>
    c230:	61 0f       	add	r22, r17
    c232:	71 1d       	adc	r23, r1
    c234:	81 1d       	adc	r24, r1
    c236:	91 1d       	adc	r25, r1
    c238:	11 91       	ld	r17, Z+
    c23a:	10 53       	subi	r17, 0x30	; 48
    c23c:	1a 30       	cpi	r17, 0x0A	; 10
    c23e:	b0 f3       	brcs	.-20     	; 0xc22c <atol+0x26>
    c240:	3e f4       	brtc	.+14     	; 0xc250 <atol+0x4a>
    c242:	90 95       	com	r25
    c244:	80 95       	com	r24
    c246:	70 95       	com	r23
    c248:	61 95       	neg	r22
    c24a:	7f 4f       	sbci	r23, 0xFF	; 255
    c24c:	8f 4f       	sbci	r24, 0xFF	; 255
    c24e:	9f 4f       	sbci	r25, 0xFF	; 255
    c250:	1f 91       	pop	r17
    c252:	08 95       	ret

0000c254 <strtok>:
    c254:	41 eb       	ldi	r20, 0xB1	; 177
    c256:	57 e3       	ldi	r21, 0x37	; 55
    c258:	0e 94 ae 61 	call	0xc35c	; 0xc35c <strtok_r>
    c25c:	08 95       	ret

0000c25e <memmove>:
    c25e:	68 17       	cp	r22, r24
    c260:	79 07       	cpc	r23, r25
    c262:	68 f4       	brcc	.+26     	; 0xc27e <memmove+0x20>
    c264:	fb 01       	movw	r30, r22
    c266:	dc 01       	movw	r26, r24
    c268:	e4 0f       	add	r30, r20
    c26a:	f5 1f       	adc	r31, r21
    c26c:	a4 0f       	add	r26, r20
    c26e:	b5 1f       	adc	r27, r21
    c270:	02 c0       	rjmp	.+4      	; 0xc276 <memmove+0x18>
    c272:	02 90       	ld	r0, -Z
    c274:	0e 92       	st	-X, r0
    c276:	41 50       	subi	r20, 0x01	; 1
    c278:	50 40       	sbci	r21, 0x00	; 0
    c27a:	d8 f7       	brcc	.-10     	; 0xc272 <memmove+0x14>
    c27c:	08 95       	ret
    c27e:	0c 94 66 64 	jmp	0xc8cc	; 0xc8cc <memcpy>

0000c282 <strcasecmp>:
    c282:	fb 01       	movw	r30, r22
    c284:	dc 01       	movw	r26, r24
    c286:	8d 91       	ld	r24, X+
    c288:	81 34       	cpi	r24, 0x41	; 65
    c28a:	1c f0       	brlt	.+6      	; 0xc292 <strcasecmp+0x10>
    c28c:	8b 35       	cpi	r24, 0x5B	; 91
    c28e:	0c f4       	brge	.+2      	; 0xc292 <strcasecmp+0x10>
    c290:	80 5e       	subi	r24, 0xE0	; 224
    c292:	61 91       	ld	r22, Z+
    c294:	61 34       	cpi	r22, 0x41	; 65
    c296:	1c f0       	brlt	.+6      	; 0xc29e <strcasecmp+0x1c>
    c298:	6b 35       	cpi	r22, 0x5B	; 91
    c29a:	0c f4       	brge	.+2      	; 0xc29e <strcasecmp+0x1c>
    c29c:	60 5e       	subi	r22, 0xE0	; 224
    c29e:	86 1b       	sub	r24, r22
    c2a0:	61 11       	cpse	r22, r1
    c2a2:	89 f3       	breq	.-30     	; 0xc286 <strcasecmp+0x4>
    c2a4:	99 0b       	sbc	r25, r25
    c2a6:	08 95       	ret

0000c2a8 <strcasestr>:
    c2a8:	fb 01       	movw	r30, r22
    c2aa:	51 91       	ld	r21, Z+
    c2ac:	55 23       	and	r21, r21
    c2ae:	b1 f0       	breq	.+44     	; 0xc2dc <strcasestr+0x34>
    c2b0:	bf 01       	movw	r22, r30
    c2b2:	dc 01       	movw	r26, r24
    c2b4:	05 2e       	mov	r0, r21
    c2b6:	4d 91       	ld	r20, X+
    c2b8:	44 23       	and	r20, r20
    c2ba:	69 f0       	breq	.+26     	; 0xc2d6 <strcasestr+0x2e>
    c2bc:	10 d0       	rcall	.+32     	; 0xc2de <strcasestr+0x36>
    c2be:	d9 f7       	brne	.-10     	; 0xc2b6 <strcasestr+0xe>
    c2c0:	cd 01       	movw	r24, r26
    c2c2:	01 90       	ld	r0, Z+
    c2c4:	00 20       	and	r0, r0
    c2c6:	49 f0       	breq	.+18     	; 0xc2da <strcasestr+0x32>
    c2c8:	4d 91       	ld	r20, X+
    c2ca:	41 11       	cpse	r20, r1
    c2cc:	08 d0       	rcall	.+16     	; 0xc2de <strcasestr+0x36>
    c2ce:	c9 f3       	breq	.-14     	; 0xc2c2 <strcasestr+0x1a>
    c2d0:	fb 01       	movw	r30, r22
    c2d2:	41 11       	cpse	r20, r1
    c2d4:	ee cf       	rjmp	.-36     	; 0xc2b2 <strcasestr+0xa>
    c2d6:	81 e0       	ldi	r24, 0x01	; 1
    c2d8:	90 e0       	ldi	r25, 0x00	; 0
    c2da:	01 97       	sbiw	r24, 0x01	; 1
    c2dc:	08 95       	ret
    c2de:	40 25       	eor	r20, r0
    c2e0:	39 f0       	breq	.+14     	; 0xc2f0 <strcasestr+0x48>
    c2e2:	40 32       	cpi	r20, 0x20	; 32
    c2e4:	29 f4       	brne	.+10     	; 0xc2f0 <strcasestr+0x48>
    c2e6:	40 29       	or	r20, r0
    c2e8:	4b 57       	subi	r20, 0x7B	; 123
    c2ea:	46 5e       	subi	r20, 0xE6	; 230
    c2ec:	08 f0       	brcs	.+2      	; 0xc2f0 <strcasestr+0x48>
    c2ee:	18 94       	sez
    c2f0:	08 95       	ret

0000c2f2 <strcat>:
    c2f2:	fb 01       	movw	r30, r22
    c2f4:	dc 01       	movw	r26, r24
    c2f6:	0d 90       	ld	r0, X+
    c2f8:	00 20       	and	r0, r0
    c2fa:	e9 f7       	brne	.-6      	; 0xc2f6 <strcat+0x4>
    c2fc:	11 97       	sbiw	r26, 0x01	; 1
    c2fe:	01 90       	ld	r0, Z+
    c300:	0d 92       	st	X+, r0
    c302:	00 20       	and	r0, r0
    c304:	e1 f7       	brne	.-8      	; 0xc2fe <strcat+0xc>
    c306:	08 95       	ret

0000c308 <strcmp>:
    c308:	fb 01       	movw	r30, r22
    c30a:	dc 01       	movw	r26, r24
    c30c:	8d 91       	ld	r24, X+
    c30e:	01 90       	ld	r0, Z+
    c310:	80 19       	sub	r24, r0
    c312:	01 10       	cpse	r0, r1
    c314:	d9 f3       	breq	.-10     	; 0xc30c <strcmp+0x4>
    c316:	99 0b       	sbc	r25, r25
    c318:	08 95       	ret

0000c31a <strcpy>:
    c31a:	fb 01       	movw	r30, r22
    c31c:	dc 01       	movw	r26, r24
    c31e:	01 90       	ld	r0, Z+
    c320:	0d 92       	st	X+, r0
    c322:	00 20       	and	r0, r0
    c324:	e1 f7       	brne	.-8      	; 0xc31e <strcpy+0x4>
    c326:	08 95       	ret

0000c328 <strstr>:
    c328:	fb 01       	movw	r30, r22
    c32a:	51 91       	ld	r21, Z+
    c32c:	55 23       	and	r21, r21
    c32e:	a9 f0       	breq	.+42     	; 0xc35a <strstr+0x32>
    c330:	bf 01       	movw	r22, r30
    c332:	dc 01       	movw	r26, r24
    c334:	4d 91       	ld	r20, X+
    c336:	45 17       	cp	r20, r21
    c338:	41 11       	cpse	r20, r1
    c33a:	e1 f7       	brne	.-8      	; 0xc334 <strstr+0xc>
    c33c:	59 f4       	brne	.+22     	; 0xc354 <strstr+0x2c>
    c33e:	cd 01       	movw	r24, r26
    c340:	01 90       	ld	r0, Z+
    c342:	00 20       	and	r0, r0
    c344:	49 f0       	breq	.+18     	; 0xc358 <strstr+0x30>
    c346:	4d 91       	ld	r20, X+
    c348:	40 15       	cp	r20, r0
    c34a:	41 11       	cpse	r20, r1
    c34c:	c9 f3       	breq	.-14     	; 0xc340 <strstr+0x18>
    c34e:	fb 01       	movw	r30, r22
    c350:	41 11       	cpse	r20, r1
    c352:	ef cf       	rjmp	.-34     	; 0xc332 <strstr+0xa>
    c354:	81 e0       	ldi	r24, 0x01	; 1
    c356:	90 e0       	ldi	r25, 0x00	; 0
    c358:	01 97       	sbiw	r24, 0x01	; 1
    c35a:	08 95       	ret

0000c35c <strtok_r>:
    c35c:	fa 01       	movw	r30, r20
    c35e:	a1 91       	ld	r26, Z+
    c360:	b0 81       	ld	r27, Z
    c362:	00 97       	sbiw	r24, 0x00	; 0
    c364:	19 f4       	brne	.+6      	; 0xc36c <strtok_r+0x10>
    c366:	10 97       	sbiw	r26, 0x00	; 0
    c368:	e1 f0       	breq	.+56     	; 0xc3a2 <strtok_r+0x46>
    c36a:	cd 01       	movw	r24, r26
    c36c:	dc 01       	movw	r26, r24
    c36e:	cd 01       	movw	r24, r26
    c370:	0d 90       	ld	r0, X+
    c372:	00 20       	and	r0, r0
    c374:	11 f4       	brne	.+4      	; 0xc37a <strtok_r+0x1e>
    c376:	c0 01       	movw	r24, r0
    c378:	13 c0       	rjmp	.+38     	; 0xc3a0 <strtok_r+0x44>
    c37a:	fb 01       	movw	r30, r22
    c37c:	21 91       	ld	r18, Z+
    c37e:	22 23       	and	r18, r18
    c380:	19 f0       	breq	.+6      	; 0xc388 <strtok_r+0x2c>
    c382:	20 15       	cp	r18, r0
    c384:	d9 f7       	brne	.-10     	; 0xc37c <strtok_r+0x20>
    c386:	f3 cf       	rjmp	.-26     	; 0xc36e <strtok_r+0x12>
    c388:	fb 01       	movw	r30, r22
    c38a:	21 91       	ld	r18, Z+
    c38c:	20 15       	cp	r18, r0
    c38e:	19 f4       	brne	.+6      	; 0xc396 <strtok_r+0x3a>
    c390:	1e 92       	st	-X, r1
    c392:	11 96       	adiw	r26, 0x01	; 1
    c394:	06 c0       	rjmp	.+12     	; 0xc3a2 <strtok_r+0x46>
    c396:	22 23       	and	r18, r18
    c398:	c1 f7       	brne	.-16     	; 0xc38a <strtok_r+0x2e>
    c39a:	0d 90       	ld	r0, X+
    c39c:	00 20       	and	r0, r0
    c39e:	a1 f7       	brne	.-24     	; 0xc388 <strtok_r+0x2c>
    c3a0:	d0 01       	movw	r26, r0
    c3a2:	fa 01       	movw	r30, r20
    c3a4:	a1 93       	st	Z+, r26
    c3a6:	b0 83       	st	Z, r27
    c3a8:	08 95       	ret

0000c3aa <strupr>:
    c3aa:	dc 01       	movw	r26, r24
    c3ac:	6c 91       	ld	r22, X
    c3ae:	61 56       	subi	r22, 0x61	; 97
    c3b0:	6a 31       	cpi	r22, 0x1A	; 26
    c3b2:	08 f0       	brcs	.+2      	; 0xc3b6 <strupr+0xc>
    c3b4:	60 5e       	subi	r22, 0xE0	; 224
    c3b6:	6f 5b       	subi	r22, 0xBF	; 191
    c3b8:	6d 93       	st	X+, r22
    c3ba:	c1 f7       	brne	.-16     	; 0xc3ac <strupr+0x2>
    c3bc:	08 95       	ret

0000c3be <ltoa>:
    c3be:	fa 01       	movw	r30, r20
    c3c0:	cf 93       	push	r28
    c3c2:	ff 93       	push	r31
    c3c4:	ef 93       	push	r30
    c3c6:	22 30       	cpi	r18, 0x02	; 2
    c3c8:	44 f1       	brlt	.+80     	; 0xc41a <ltoa+0x5c>
    c3ca:	25 32       	cpi	r18, 0x25	; 37
    c3cc:	34 f5       	brge	.+76     	; 0xc41a <ltoa+0x5c>
    c3ce:	c2 2f       	mov	r28, r18
    c3d0:	e8 94       	clt
    c3d2:	ca 30       	cpi	r28, 0x0A	; 10
    c3d4:	49 f4       	brne	.+18     	; 0xc3e8 <ltoa+0x2a>
    c3d6:	97 fb       	bst	r25, 7
    c3d8:	3e f4       	brtc	.+14     	; 0xc3e8 <ltoa+0x2a>
    c3da:	90 95       	com	r25
    c3dc:	80 95       	com	r24
    c3de:	70 95       	com	r23
    c3e0:	61 95       	neg	r22
    c3e2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3e4:	8f 4f       	sbci	r24, 0xFF	; 255
    c3e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c3e8:	2c 2f       	mov	r18, r28
    c3ea:	33 27       	eor	r19, r19
    c3ec:	44 27       	eor	r20, r20
    c3ee:	55 27       	eor	r21, r21
    c3f0:	ff 93       	push	r31
    c3f2:	ef 93       	push	r30
    c3f4:	0e 94 c3 60 	call	0xc186	; 0xc186 <__udivmodsi4>
    c3f8:	ef 91       	pop	r30
    c3fa:	ff 91       	pop	r31
    c3fc:	60 5d       	subi	r22, 0xD0	; 208
    c3fe:	6a 33       	cpi	r22, 0x3A	; 58
    c400:	0c f0       	brlt	.+2      	; 0xc404 <ltoa+0x46>
    c402:	69 5d       	subi	r22, 0xD9	; 217
    c404:	61 93       	st	Z+, r22
    c406:	b9 01       	movw	r22, r18
    c408:	ca 01       	movw	r24, r20
    c40a:	60 50       	subi	r22, 0x00	; 0
    c40c:	70 40       	sbci	r23, 0x00	; 0
    c40e:	80 40       	sbci	r24, 0x00	; 0
    c410:	90 40       	sbci	r25, 0x00	; 0
    c412:	51 f7       	brne	.-44     	; 0xc3e8 <ltoa+0x2a>
    c414:	16 f4       	brtc	.+4      	; 0xc41a <ltoa+0x5c>
    c416:	cd e2       	ldi	r28, 0x2D	; 45
    c418:	c1 93       	st	Z+, r28
    c41a:	10 82       	st	Z, r1
    c41c:	8f 91       	pop	r24
    c41e:	9f 91       	pop	r25
    c420:	cf 91       	pop	r28
    c422:	0c 94 7a 64 	jmp	0xc8f4	; 0xc8f4 <strrev>

0000c426 <__mulsi_const_10>:
    c426:	59 2f       	mov	r21, r25
    c428:	48 2f       	mov	r20, r24
    c42a:	37 2f       	mov	r19, r23
    c42c:	26 2f       	mov	r18, r22
    c42e:	66 0f       	add	r22, r22
    c430:	77 1f       	adc	r23, r23
    c432:	88 1f       	adc	r24, r24
    c434:	99 1f       	adc	r25, r25
    c436:	66 0f       	add	r22, r22
    c438:	77 1f       	adc	r23, r23
    c43a:	88 1f       	adc	r24, r24
    c43c:	99 1f       	adc	r25, r25
    c43e:	62 0f       	add	r22, r18
    c440:	73 1f       	adc	r23, r19
    c442:	84 1f       	adc	r24, r20
    c444:	95 1f       	adc	r25, r21
    c446:	66 0f       	add	r22, r22
    c448:	77 1f       	adc	r23, r23
    c44a:	88 1f       	adc	r24, r24
    c44c:	99 1f       	adc	r25, r25
    c44e:	08 95       	ret

0000c450 <__mulhi_const_10>:
    c450:	7a e0       	ldi	r23, 0x0A	; 10
    c452:	97 9f       	mul	r25, r23
    c454:	90 2d       	mov	r25, r0
    c456:	87 9f       	mul	r24, r23
    c458:	80 2d       	mov	r24, r0
    c45a:	91 0d       	add	r25, r1
    c45c:	11 24       	eor	r1, r1
    c45e:	08 95       	ret

0000c460 <sprintf>:
    c460:	0f 93       	push	r16
    c462:	1f 93       	push	r17
    c464:	df 93       	push	r29
    c466:	cf 93       	push	r28
    c468:	cd b7       	in	r28, 0x3d	; 61
    c46a:	de b7       	in	r29, 0x3e	; 62
    c46c:	2e 97       	sbiw	r28, 0x0e	; 14
    c46e:	cd bf       	out	0x3d, r28	; 61
    c470:	de bf       	out	0x3e, r29	; 62
    c472:	0e 89       	ldd	r16, Y+22	; 0x16
    c474:	1f 89       	ldd	r17, Y+23	; 0x17
    c476:	86 e0       	ldi	r24, 0x06	; 6
    c478:	8c 83       	std	Y+4, r24	; 0x04
    c47a:	09 83       	std	Y+1, r16	; 0x01
    c47c:	1a 83       	std	Y+2, r17	; 0x02
    c47e:	8f ef       	ldi	r24, 0xFF	; 255
    c480:	9f e7       	ldi	r25, 0x7F	; 127
    c482:	8d 83       	std	Y+5, r24	; 0x05
    c484:	9e 83       	std	Y+6, r25	; 0x06
    c486:	9e 01       	movw	r18, r28
    c488:	26 5e       	subi	r18, 0xE6	; 230
    c48a:	3f 4f       	sbci	r19, 0xFF	; 255
    c48c:	ce 01       	movw	r24, r28
    c48e:	01 96       	adiw	r24, 0x01	; 1
    c490:	68 8d       	ldd	r22, Y+24	; 0x18
    c492:	79 8d       	ldd	r23, Y+25	; 0x19
    c494:	a9 01       	movw	r20, r18
    c496:	0e 94 5b 62 	call	0xc4b6	; 0xc4b6 <vfprintf>
    c49a:	2f 81       	ldd	r18, Y+7	; 0x07
    c49c:	38 85       	ldd	r19, Y+8	; 0x08
    c49e:	02 0f       	add	r16, r18
    c4a0:	13 1f       	adc	r17, r19
    c4a2:	f8 01       	movw	r30, r16
    c4a4:	10 82       	st	Z, r1
    c4a6:	2e 96       	adiw	r28, 0x0e	; 14
    c4a8:	cd bf       	out	0x3d, r28	; 61
    c4aa:	de bf       	out	0x3e, r29	; 62
    c4ac:	cf 91       	pop	r28
    c4ae:	df 91       	pop	r29
    c4b0:	1f 91       	pop	r17
    c4b2:	0f 91       	pop	r16
    c4b4:	08 95       	ret

0000c4b6 <vfprintf>:
    c4b6:	2f 92       	push	r2
    c4b8:	3f 92       	push	r3
    c4ba:	4f 92       	push	r4
    c4bc:	5f 92       	push	r5
    c4be:	6f 92       	push	r6
    c4c0:	7f 92       	push	r7
    c4c2:	8f 92       	push	r8
    c4c4:	9f 92       	push	r9
    c4c6:	af 92       	push	r10
    c4c8:	bf 92       	push	r11
    c4ca:	cf 92       	push	r12
    c4cc:	df 92       	push	r13
    c4ce:	ef 92       	push	r14
    c4d0:	ff 92       	push	r15
    c4d2:	0f 93       	push	r16
    c4d4:	1f 93       	push	r17
    c4d6:	df 93       	push	r29
    c4d8:	cf 93       	push	r28
    c4da:	cd b7       	in	r28, 0x3d	; 61
    c4dc:	de b7       	in	r29, 0x3e	; 62
    c4de:	2b 97       	sbiw	r28, 0x0b	; 11
    c4e0:	cd bf       	out	0x3d, r28	; 61
    c4e2:	de bf       	out	0x3e, r29	; 62
    c4e4:	3c 01       	movw	r6, r24
    c4e6:	2b 01       	movw	r4, r22
    c4e8:	5a 01       	movw	r10, r20
    c4ea:	fc 01       	movw	r30, r24
    c4ec:	16 82       	std	Z+6, r1	; 0x06
    c4ee:	17 82       	std	Z+7, r1	; 0x07
    c4f0:	83 81       	ldd	r24, Z+3	; 0x03
    c4f2:	81 fd       	sbrc	r24, 1
    c4f4:	03 c0       	rjmp	.+6      	; 0xc4fc <vfprintf+0x46>
    c4f6:	6f ef       	ldi	r22, 0xFF	; 255
    c4f8:	7f ef       	ldi	r23, 0xFF	; 255
    c4fa:	c6 c1       	rjmp	.+908    	; 0xc888 <vfprintf+0x3d2>
    c4fc:	9a e0       	ldi	r25, 0x0A	; 10
    c4fe:	89 2e       	mov	r8, r25
    c500:	1e 01       	movw	r2, r28
    c502:	08 94       	sec
    c504:	21 1c       	adc	r2, r1
    c506:	31 1c       	adc	r3, r1
    c508:	f3 01       	movw	r30, r6
    c50a:	23 81       	ldd	r18, Z+3	; 0x03
    c50c:	f2 01       	movw	r30, r4
    c50e:	23 fd       	sbrc	r18, 3
    c510:	85 91       	lpm	r24, Z+
    c512:	23 ff       	sbrs	r18, 3
    c514:	81 91       	ld	r24, Z+
    c516:	2f 01       	movw	r4, r30
    c518:	88 23       	and	r24, r24
    c51a:	09 f4       	brne	.+2      	; 0xc51e <vfprintf+0x68>
    c51c:	b2 c1       	rjmp	.+868    	; 0xc882 <vfprintf+0x3cc>
    c51e:	85 32       	cpi	r24, 0x25	; 37
    c520:	39 f4       	brne	.+14     	; 0xc530 <vfprintf+0x7a>
    c522:	23 fd       	sbrc	r18, 3
    c524:	85 91       	lpm	r24, Z+
    c526:	23 ff       	sbrs	r18, 3
    c528:	81 91       	ld	r24, Z+
    c52a:	2f 01       	movw	r4, r30
    c52c:	85 32       	cpi	r24, 0x25	; 37
    c52e:	29 f4       	brne	.+10     	; 0xc53a <vfprintf+0x84>
    c530:	90 e0       	ldi	r25, 0x00	; 0
    c532:	b3 01       	movw	r22, r6
    c534:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c538:	e7 cf       	rjmp	.-50     	; 0xc508 <vfprintf+0x52>
    c53a:	98 2f       	mov	r25, r24
    c53c:	ff 24       	eor	r15, r15
    c53e:	ee 24       	eor	r14, r14
    c540:	99 24       	eor	r9, r9
    c542:	ff e1       	ldi	r31, 0x1F	; 31
    c544:	ff 15       	cp	r31, r15
    c546:	d0 f0       	brcs	.+52     	; 0xc57c <vfprintf+0xc6>
    c548:	9b 32       	cpi	r25, 0x2B	; 43
    c54a:	69 f0       	breq	.+26     	; 0xc566 <vfprintf+0xb0>
    c54c:	9c 32       	cpi	r25, 0x2C	; 44
    c54e:	28 f4       	brcc	.+10     	; 0xc55a <vfprintf+0xa4>
    c550:	90 32       	cpi	r25, 0x20	; 32
    c552:	59 f0       	breq	.+22     	; 0xc56a <vfprintf+0xb4>
    c554:	93 32       	cpi	r25, 0x23	; 35
    c556:	91 f4       	brne	.+36     	; 0xc57c <vfprintf+0xc6>
    c558:	0e c0       	rjmp	.+28     	; 0xc576 <vfprintf+0xc0>
    c55a:	9d 32       	cpi	r25, 0x2D	; 45
    c55c:	49 f0       	breq	.+18     	; 0xc570 <vfprintf+0xba>
    c55e:	90 33       	cpi	r25, 0x30	; 48
    c560:	69 f4       	brne	.+26     	; 0xc57c <vfprintf+0xc6>
    c562:	41 e0       	ldi	r20, 0x01	; 1
    c564:	24 c0       	rjmp	.+72     	; 0xc5ae <vfprintf+0xf8>
    c566:	52 e0       	ldi	r21, 0x02	; 2
    c568:	f5 2a       	or	r15, r21
    c56a:	84 e0       	ldi	r24, 0x04	; 4
    c56c:	f8 2a       	or	r15, r24
    c56e:	28 c0       	rjmp	.+80     	; 0xc5c0 <vfprintf+0x10a>
    c570:	98 e0       	ldi	r25, 0x08	; 8
    c572:	f9 2a       	or	r15, r25
    c574:	25 c0       	rjmp	.+74     	; 0xc5c0 <vfprintf+0x10a>
    c576:	e0 e1       	ldi	r30, 0x10	; 16
    c578:	fe 2a       	or	r15, r30
    c57a:	22 c0       	rjmp	.+68     	; 0xc5c0 <vfprintf+0x10a>
    c57c:	f7 fc       	sbrc	r15, 7
    c57e:	29 c0       	rjmp	.+82     	; 0xc5d2 <vfprintf+0x11c>
    c580:	89 2f       	mov	r24, r25
    c582:	80 53       	subi	r24, 0x30	; 48
    c584:	8a 30       	cpi	r24, 0x0A	; 10
    c586:	70 f4       	brcc	.+28     	; 0xc5a4 <vfprintf+0xee>
    c588:	f6 fe       	sbrs	r15, 6
    c58a:	05 c0       	rjmp	.+10     	; 0xc596 <vfprintf+0xe0>
    c58c:	98 9c       	mul	r9, r8
    c58e:	90 2c       	mov	r9, r0
    c590:	11 24       	eor	r1, r1
    c592:	98 0e       	add	r9, r24
    c594:	15 c0       	rjmp	.+42     	; 0xc5c0 <vfprintf+0x10a>
    c596:	e8 9c       	mul	r14, r8
    c598:	e0 2c       	mov	r14, r0
    c59a:	11 24       	eor	r1, r1
    c59c:	e8 0e       	add	r14, r24
    c59e:	f0 e2       	ldi	r31, 0x20	; 32
    c5a0:	ff 2a       	or	r15, r31
    c5a2:	0e c0       	rjmp	.+28     	; 0xc5c0 <vfprintf+0x10a>
    c5a4:	9e 32       	cpi	r25, 0x2E	; 46
    c5a6:	29 f4       	brne	.+10     	; 0xc5b2 <vfprintf+0xfc>
    c5a8:	f6 fc       	sbrc	r15, 6
    c5aa:	6b c1       	rjmp	.+726    	; 0xc882 <vfprintf+0x3cc>
    c5ac:	40 e4       	ldi	r20, 0x40	; 64
    c5ae:	f4 2a       	or	r15, r20
    c5b0:	07 c0       	rjmp	.+14     	; 0xc5c0 <vfprintf+0x10a>
    c5b2:	9c 36       	cpi	r25, 0x6C	; 108
    c5b4:	19 f4       	brne	.+6      	; 0xc5bc <vfprintf+0x106>
    c5b6:	50 e8       	ldi	r21, 0x80	; 128
    c5b8:	f5 2a       	or	r15, r21
    c5ba:	02 c0       	rjmp	.+4      	; 0xc5c0 <vfprintf+0x10a>
    c5bc:	98 36       	cpi	r25, 0x68	; 104
    c5be:	49 f4       	brne	.+18     	; 0xc5d2 <vfprintf+0x11c>
    c5c0:	f2 01       	movw	r30, r4
    c5c2:	23 fd       	sbrc	r18, 3
    c5c4:	95 91       	lpm	r25, Z+
    c5c6:	23 ff       	sbrs	r18, 3
    c5c8:	91 91       	ld	r25, Z+
    c5ca:	2f 01       	movw	r4, r30
    c5cc:	99 23       	and	r25, r25
    c5ce:	09 f0       	breq	.+2      	; 0xc5d2 <vfprintf+0x11c>
    c5d0:	b8 cf       	rjmp	.-144    	; 0xc542 <vfprintf+0x8c>
    c5d2:	89 2f       	mov	r24, r25
    c5d4:	85 54       	subi	r24, 0x45	; 69
    c5d6:	83 30       	cpi	r24, 0x03	; 3
    c5d8:	18 f0       	brcs	.+6      	; 0xc5e0 <vfprintf+0x12a>
    c5da:	80 52       	subi	r24, 0x20	; 32
    c5dc:	83 30       	cpi	r24, 0x03	; 3
    c5de:	38 f4       	brcc	.+14     	; 0xc5ee <vfprintf+0x138>
    c5e0:	44 e0       	ldi	r20, 0x04	; 4
    c5e2:	50 e0       	ldi	r21, 0x00	; 0
    c5e4:	a4 0e       	add	r10, r20
    c5e6:	b5 1e       	adc	r11, r21
    c5e8:	5f e3       	ldi	r21, 0x3F	; 63
    c5ea:	59 83       	std	Y+1, r21	; 0x01
    c5ec:	0f c0       	rjmp	.+30     	; 0xc60c <vfprintf+0x156>
    c5ee:	93 36       	cpi	r25, 0x63	; 99
    c5f0:	31 f0       	breq	.+12     	; 0xc5fe <vfprintf+0x148>
    c5f2:	93 37       	cpi	r25, 0x73	; 115
    c5f4:	79 f0       	breq	.+30     	; 0xc614 <vfprintf+0x15e>
    c5f6:	93 35       	cpi	r25, 0x53	; 83
    c5f8:	09 f0       	breq	.+2      	; 0xc5fc <vfprintf+0x146>
    c5fa:	56 c0       	rjmp	.+172    	; 0xc6a8 <vfprintf+0x1f2>
    c5fc:	20 c0       	rjmp	.+64     	; 0xc63e <vfprintf+0x188>
    c5fe:	f5 01       	movw	r30, r10
    c600:	80 81       	ld	r24, Z
    c602:	89 83       	std	Y+1, r24	; 0x01
    c604:	42 e0       	ldi	r20, 0x02	; 2
    c606:	50 e0       	ldi	r21, 0x00	; 0
    c608:	a4 0e       	add	r10, r20
    c60a:	b5 1e       	adc	r11, r21
    c60c:	61 01       	movw	r12, r2
    c60e:	01 e0       	ldi	r16, 0x01	; 1
    c610:	10 e0       	ldi	r17, 0x00	; 0
    c612:	12 c0       	rjmp	.+36     	; 0xc638 <vfprintf+0x182>
    c614:	f5 01       	movw	r30, r10
    c616:	c0 80       	ld	r12, Z
    c618:	d1 80       	ldd	r13, Z+1	; 0x01
    c61a:	f6 fc       	sbrc	r15, 6
    c61c:	03 c0       	rjmp	.+6      	; 0xc624 <vfprintf+0x16e>
    c61e:	6f ef       	ldi	r22, 0xFF	; 255
    c620:	7f ef       	ldi	r23, 0xFF	; 255
    c622:	02 c0       	rjmp	.+4      	; 0xc628 <vfprintf+0x172>
    c624:	69 2d       	mov	r22, r9
    c626:	70 e0       	ldi	r23, 0x00	; 0
    c628:	42 e0       	ldi	r20, 0x02	; 2
    c62a:	50 e0       	ldi	r21, 0x00	; 0
    c62c:	a4 0e       	add	r10, r20
    c62e:	b5 1e       	adc	r11, r21
    c630:	c6 01       	movw	r24, r12
    c632:	0e 94 6f 64 	call	0xc8de	; 0xc8de <strnlen>
    c636:	8c 01       	movw	r16, r24
    c638:	5f e7       	ldi	r21, 0x7F	; 127
    c63a:	f5 22       	and	r15, r21
    c63c:	14 c0       	rjmp	.+40     	; 0xc666 <vfprintf+0x1b0>
    c63e:	f5 01       	movw	r30, r10
    c640:	c0 80       	ld	r12, Z
    c642:	d1 80       	ldd	r13, Z+1	; 0x01
    c644:	f6 fc       	sbrc	r15, 6
    c646:	03 c0       	rjmp	.+6      	; 0xc64e <vfprintf+0x198>
    c648:	6f ef       	ldi	r22, 0xFF	; 255
    c64a:	7f ef       	ldi	r23, 0xFF	; 255
    c64c:	02 c0       	rjmp	.+4      	; 0xc652 <vfprintf+0x19c>
    c64e:	69 2d       	mov	r22, r9
    c650:	70 e0       	ldi	r23, 0x00	; 0
    c652:	42 e0       	ldi	r20, 0x02	; 2
    c654:	50 e0       	ldi	r21, 0x00	; 0
    c656:	a4 0e       	add	r10, r20
    c658:	b5 1e       	adc	r11, r21
    c65a:	c6 01       	movw	r24, r12
    c65c:	0e 94 5b 64 	call	0xc8b6	; 0xc8b6 <strnlen_P>
    c660:	8c 01       	movw	r16, r24
    c662:	50 e8       	ldi	r21, 0x80	; 128
    c664:	f5 2a       	or	r15, r21
    c666:	f3 fe       	sbrs	r15, 3
    c668:	07 c0       	rjmp	.+14     	; 0xc678 <vfprintf+0x1c2>
    c66a:	1a c0       	rjmp	.+52     	; 0xc6a0 <vfprintf+0x1ea>
    c66c:	80 e2       	ldi	r24, 0x20	; 32
    c66e:	90 e0       	ldi	r25, 0x00	; 0
    c670:	b3 01       	movw	r22, r6
    c672:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c676:	ea 94       	dec	r14
    c678:	8e 2d       	mov	r24, r14
    c67a:	90 e0       	ldi	r25, 0x00	; 0
    c67c:	08 17       	cp	r16, r24
    c67e:	19 07       	cpc	r17, r25
    c680:	a8 f3       	brcs	.-22     	; 0xc66c <vfprintf+0x1b6>
    c682:	0e c0       	rjmp	.+28     	; 0xc6a0 <vfprintf+0x1ea>
    c684:	f6 01       	movw	r30, r12
    c686:	f7 fc       	sbrc	r15, 7
    c688:	85 91       	lpm	r24, Z+
    c68a:	f7 fe       	sbrs	r15, 7
    c68c:	81 91       	ld	r24, Z+
    c68e:	6f 01       	movw	r12, r30
    c690:	90 e0       	ldi	r25, 0x00	; 0
    c692:	b3 01       	movw	r22, r6
    c694:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c698:	e1 10       	cpse	r14, r1
    c69a:	ea 94       	dec	r14
    c69c:	01 50       	subi	r16, 0x01	; 1
    c69e:	10 40       	sbci	r17, 0x00	; 0
    c6a0:	01 15       	cp	r16, r1
    c6a2:	11 05       	cpc	r17, r1
    c6a4:	79 f7       	brne	.-34     	; 0xc684 <vfprintf+0x1ce>
    c6a6:	ea c0       	rjmp	.+468    	; 0xc87c <vfprintf+0x3c6>
    c6a8:	94 36       	cpi	r25, 0x64	; 100
    c6aa:	11 f0       	breq	.+4      	; 0xc6b0 <vfprintf+0x1fa>
    c6ac:	99 36       	cpi	r25, 0x69	; 105
    c6ae:	69 f5       	brne	.+90     	; 0xc70a <vfprintf+0x254>
    c6b0:	f7 fe       	sbrs	r15, 7
    c6b2:	08 c0       	rjmp	.+16     	; 0xc6c4 <vfprintf+0x20e>
    c6b4:	f5 01       	movw	r30, r10
    c6b6:	20 81       	ld	r18, Z
    c6b8:	31 81       	ldd	r19, Z+1	; 0x01
    c6ba:	42 81       	ldd	r20, Z+2	; 0x02
    c6bc:	53 81       	ldd	r21, Z+3	; 0x03
    c6be:	84 e0       	ldi	r24, 0x04	; 4
    c6c0:	90 e0       	ldi	r25, 0x00	; 0
    c6c2:	0a c0       	rjmp	.+20     	; 0xc6d8 <vfprintf+0x222>
    c6c4:	f5 01       	movw	r30, r10
    c6c6:	80 81       	ld	r24, Z
    c6c8:	91 81       	ldd	r25, Z+1	; 0x01
    c6ca:	9c 01       	movw	r18, r24
    c6cc:	44 27       	eor	r20, r20
    c6ce:	37 fd       	sbrc	r19, 7
    c6d0:	40 95       	com	r20
    c6d2:	54 2f       	mov	r21, r20
    c6d4:	82 e0       	ldi	r24, 0x02	; 2
    c6d6:	90 e0       	ldi	r25, 0x00	; 0
    c6d8:	a8 0e       	add	r10, r24
    c6da:	b9 1e       	adc	r11, r25
    c6dc:	9f e6       	ldi	r25, 0x6F	; 111
    c6de:	f9 22       	and	r15, r25
    c6e0:	57 ff       	sbrs	r21, 7
    c6e2:	09 c0       	rjmp	.+18     	; 0xc6f6 <vfprintf+0x240>
    c6e4:	50 95       	com	r21
    c6e6:	40 95       	com	r20
    c6e8:	30 95       	com	r19
    c6ea:	21 95       	neg	r18
    c6ec:	3f 4f       	sbci	r19, 0xFF	; 255
    c6ee:	4f 4f       	sbci	r20, 0xFF	; 255
    c6f0:	5f 4f       	sbci	r21, 0xFF	; 255
    c6f2:	e0 e8       	ldi	r30, 0x80	; 128
    c6f4:	fe 2a       	or	r15, r30
    c6f6:	ca 01       	movw	r24, r20
    c6f8:	b9 01       	movw	r22, r18
    c6fa:	a1 01       	movw	r20, r2
    c6fc:	2a e0       	ldi	r18, 0x0A	; 10
    c6fe:	30 e0       	ldi	r19, 0x00	; 0
    c700:	0e 94 b6 64 	call	0xc96c	; 0xc96c <__ultoa_invert>
    c704:	d8 2e       	mov	r13, r24
    c706:	d2 18       	sub	r13, r2
    c708:	40 c0       	rjmp	.+128    	; 0xc78a <vfprintf+0x2d4>
    c70a:	95 37       	cpi	r25, 0x75	; 117
    c70c:	29 f4       	brne	.+10     	; 0xc718 <vfprintf+0x262>
    c70e:	1f 2d       	mov	r17, r15
    c710:	1f 7e       	andi	r17, 0xEF	; 239
    c712:	2a e0       	ldi	r18, 0x0A	; 10
    c714:	30 e0       	ldi	r19, 0x00	; 0
    c716:	1d c0       	rjmp	.+58     	; 0xc752 <vfprintf+0x29c>
    c718:	1f 2d       	mov	r17, r15
    c71a:	19 7f       	andi	r17, 0xF9	; 249
    c71c:	9f 36       	cpi	r25, 0x6F	; 111
    c71e:	61 f0       	breq	.+24     	; 0xc738 <vfprintf+0x282>
    c720:	90 37       	cpi	r25, 0x70	; 112
    c722:	20 f4       	brcc	.+8      	; 0xc72c <vfprintf+0x276>
    c724:	98 35       	cpi	r25, 0x58	; 88
    c726:	09 f0       	breq	.+2      	; 0xc72a <vfprintf+0x274>
    c728:	ac c0       	rjmp	.+344    	; 0xc882 <vfprintf+0x3cc>
    c72a:	0f c0       	rjmp	.+30     	; 0xc74a <vfprintf+0x294>
    c72c:	90 37       	cpi	r25, 0x70	; 112
    c72e:	39 f0       	breq	.+14     	; 0xc73e <vfprintf+0x288>
    c730:	98 37       	cpi	r25, 0x78	; 120
    c732:	09 f0       	breq	.+2      	; 0xc736 <vfprintf+0x280>
    c734:	a6 c0       	rjmp	.+332    	; 0xc882 <vfprintf+0x3cc>
    c736:	04 c0       	rjmp	.+8      	; 0xc740 <vfprintf+0x28a>
    c738:	28 e0       	ldi	r18, 0x08	; 8
    c73a:	30 e0       	ldi	r19, 0x00	; 0
    c73c:	0a c0       	rjmp	.+20     	; 0xc752 <vfprintf+0x29c>
    c73e:	10 61       	ori	r17, 0x10	; 16
    c740:	14 fd       	sbrc	r17, 4
    c742:	14 60       	ori	r17, 0x04	; 4
    c744:	20 e1       	ldi	r18, 0x10	; 16
    c746:	30 e0       	ldi	r19, 0x00	; 0
    c748:	04 c0       	rjmp	.+8      	; 0xc752 <vfprintf+0x29c>
    c74a:	14 fd       	sbrc	r17, 4
    c74c:	16 60       	ori	r17, 0x06	; 6
    c74e:	20 e1       	ldi	r18, 0x10	; 16
    c750:	32 e0       	ldi	r19, 0x02	; 2
    c752:	17 ff       	sbrs	r17, 7
    c754:	08 c0       	rjmp	.+16     	; 0xc766 <vfprintf+0x2b0>
    c756:	f5 01       	movw	r30, r10
    c758:	60 81       	ld	r22, Z
    c75a:	71 81       	ldd	r23, Z+1	; 0x01
    c75c:	82 81       	ldd	r24, Z+2	; 0x02
    c75e:	93 81       	ldd	r25, Z+3	; 0x03
    c760:	44 e0       	ldi	r20, 0x04	; 4
    c762:	50 e0       	ldi	r21, 0x00	; 0
    c764:	08 c0       	rjmp	.+16     	; 0xc776 <vfprintf+0x2c0>
    c766:	f5 01       	movw	r30, r10
    c768:	80 81       	ld	r24, Z
    c76a:	91 81       	ldd	r25, Z+1	; 0x01
    c76c:	bc 01       	movw	r22, r24
    c76e:	80 e0       	ldi	r24, 0x00	; 0
    c770:	90 e0       	ldi	r25, 0x00	; 0
    c772:	42 e0       	ldi	r20, 0x02	; 2
    c774:	50 e0       	ldi	r21, 0x00	; 0
    c776:	a4 0e       	add	r10, r20
    c778:	b5 1e       	adc	r11, r21
    c77a:	a1 01       	movw	r20, r2
    c77c:	0e 94 b6 64 	call	0xc96c	; 0xc96c <__ultoa_invert>
    c780:	d8 2e       	mov	r13, r24
    c782:	d2 18       	sub	r13, r2
    c784:	8f e7       	ldi	r24, 0x7F	; 127
    c786:	f8 2e       	mov	r15, r24
    c788:	f1 22       	and	r15, r17
    c78a:	f6 fe       	sbrs	r15, 6
    c78c:	0b c0       	rjmp	.+22     	; 0xc7a4 <vfprintf+0x2ee>
    c78e:	5e ef       	ldi	r21, 0xFE	; 254
    c790:	f5 22       	and	r15, r21
    c792:	d9 14       	cp	r13, r9
    c794:	38 f4       	brcc	.+14     	; 0xc7a4 <vfprintf+0x2ee>
    c796:	f4 fe       	sbrs	r15, 4
    c798:	07 c0       	rjmp	.+14     	; 0xc7a8 <vfprintf+0x2f2>
    c79a:	f2 fc       	sbrc	r15, 2
    c79c:	05 c0       	rjmp	.+10     	; 0xc7a8 <vfprintf+0x2f2>
    c79e:	8f ee       	ldi	r24, 0xEF	; 239
    c7a0:	f8 22       	and	r15, r24
    c7a2:	02 c0       	rjmp	.+4      	; 0xc7a8 <vfprintf+0x2f2>
    c7a4:	1d 2d       	mov	r17, r13
    c7a6:	01 c0       	rjmp	.+2      	; 0xc7aa <vfprintf+0x2f4>
    c7a8:	19 2d       	mov	r17, r9
    c7aa:	f4 fe       	sbrs	r15, 4
    c7ac:	0d c0       	rjmp	.+26     	; 0xc7c8 <vfprintf+0x312>
    c7ae:	fe 01       	movw	r30, r28
    c7b0:	ed 0d       	add	r30, r13
    c7b2:	f1 1d       	adc	r31, r1
    c7b4:	80 81       	ld	r24, Z
    c7b6:	80 33       	cpi	r24, 0x30	; 48
    c7b8:	19 f4       	brne	.+6      	; 0xc7c0 <vfprintf+0x30a>
    c7ba:	99 ee       	ldi	r25, 0xE9	; 233
    c7bc:	f9 22       	and	r15, r25
    c7be:	08 c0       	rjmp	.+16     	; 0xc7d0 <vfprintf+0x31a>
    c7c0:	1f 5f       	subi	r17, 0xFF	; 255
    c7c2:	f2 fe       	sbrs	r15, 2
    c7c4:	05 c0       	rjmp	.+10     	; 0xc7d0 <vfprintf+0x31a>
    c7c6:	03 c0       	rjmp	.+6      	; 0xc7ce <vfprintf+0x318>
    c7c8:	8f 2d       	mov	r24, r15
    c7ca:	86 78       	andi	r24, 0x86	; 134
    c7cc:	09 f0       	breq	.+2      	; 0xc7d0 <vfprintf+0x31a>
    c7ce:	1f 5f       	subi	r17, 0xFF	; 255
    c7d0:	0f 2d       	mov	r16, r15
    c7d2:	f3 fc       	sbrc	r15, 3
    c7d4:	14 c0       	rjmp	.+40     	; 0xc7fe <vfprintf+0x348>
    c7d6:	f0 fe       	sbrs	r15, 0
    c7d8:	0f c0       	rjmp	.+30     	; 0xc7f8 <vfprintf+0x342>
    c7da:	1e 15       	cp	r17, r14
    c7dc:	10 f0       	brcs	.+4      	; 0xc7e2 <vfprintf+0x32c>
    c7de:	9d 2c       	mov	r9, r13
    c7e0:	0b c0       	rjmp	.+22     	; 0xc7f8 <vfprintf+0x342>
    c7e2:	9d 2c       	mov	r9, r13
    c7e4:	9e 0c       	add	r9, r14
    c7e6:	91 1a       	sub	r9, r17
    c7e8:	1e 2d       	mov	r17, r14
    c7ea:	06 c0       	rjmp	.+12     	; 0xc7f8 <vfprintf+0x342>
    c7ec:	80 e2       	ldi	r24, 0x20	; 32
    c7ee:	90 e0       	ldi	r25, 0x00	; 0
    c7f0:	b3 01       	movw	r22, r6
    c7f2:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c7f6:	1f 5f       	subi	r17, 0xFF	; 255
    c7f8:	1e 15       	cp	r17, r14
    c7fa:	c0 f3       	brcs	.-16     	; 0xc7ec <vfprintf+0x336>
    c7fc:	04 c0       	rjmp	.+8      	; 0xc806 <vfprintf+0x350>
    c7fe:	1e 15       	cp	r17, r14
    c800:	10 f4       	brcc	.+4      	; 0xc806 <vfprintf+0x350>
    c802:	e1 1a       	sub	r14, r17
    c804:	01 c0       	rjmp	.+2      	; 0xc808 <vfprintf+0x352>
    c806:	ee 24       	eor	r14, r14
    c808:	04 ff       	sbrs	r16, 4
    c80a:	0f c0       	rjmp	.+30     	; 0xc82a <vfprintf+0x374>
    c80c:	80 e3       	ldi	r24, 0x30	; 48
    c80e:	90 e0       	ldi	r25, 0x00	; 0
    c810:	b3 01       	movw	r22, r6
    c812:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c816:	02 ff       	sbrs	r16, 2
    c818:	1d c0       	rjmp	.+58     	; 0xc854 <vfprintf+0x39e>
    c81a:	01 fd       	sbrc	r16, 1
    c81c:	03 c0       	rjmp	.+6      	; 0xc824 <vfprintf+0x36e>
    c81e:	88 e7       	ldi	r24, 0x78	; 120
    c820:	90 e0       	ldi	r25, 0x00	; 0
    c822:	0e c0       	rjmp	.+28     	; 0xc840 <vfprintf+0x38a>
    c824:	88 e5       	ldi	r24, 0x58	; 88
    c826:	90 e0       	ldi	r25, 0x00	; 0
    c828:	0b c0       	rjmp	.+22     	; 0xc840 <vfprintf+0x38a>
    c82a:	80 2f       	mov	r24, r16
    c82c:	86 78       	andi	r24, 0x86	; 134
    c82e:	91 f0       	breq	.+36     	; 0xc854 <vfprintf+0x39e>
    c830:	01 ff       	sbrs	r16, 1
    c832:	02 c0       	rjmp	.+4      	; 0xc838 <vfprintf+0x382>
    c834:	8b e2       	ldi	r24, 0x2B	; 43
    c836:	01 c0       	rjmp	.+2      	; 0xc83a <vfprintf+0x384>
    c838:	80 e2       	ldi	r24, 0x20	; 32
    c83a:	f7 fc       	sbrc	r15, 7
    c83c:	8d e2       	ldi	r24, 0x2D	; 45
    c83e:	90 e0       	ldi	r25, 0x00	; 0
    c840:	b3 01       	movw	r22, r6
    c842:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c846:	06 c0       	rjmp	.+12     	; 0xc854 <vfprintf+0x39e>
    c848:	80 e3       	ldi	r24, 0x30	; 48
    c84a:	90 e0       	ldi	r25, 0x00	; 0
    c84c:	b3 01       	movw	r22, r6
    c84e:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c852:	9a 94       	dec	r9
    c854:	d9 14       	cp	r13, r9
    c856:	c0 f3       	brcs	.-16     	; 0xc848 <vfprintf+0x392>
    c858:	da 94       	dec	r13
    c85a:	f1 01       	movw	r30, r2
    c85c:	ed 0d       	add	r30, r13
    c85e:	f1 1d       	adc	r31, r1
    c860:	80 81       	ld	r24, Z
    c862:	90 e0       	ldi	r25, 0x00	; 0
    c864:	b3 01       	movw	r22, r6
    c866:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c86a:	dd 20       	and	r13, r13
    c86c:	a9 f7       	brne	.-22     	; 0xc858 <vfprintf+0x3a2>
    c86e:	06 c0       	rjmp	.+12     	; 0xc87c <vfprintf+0x3c6>
    c870:	80 e2       	ldi	r24, 0x20	; 32
    c872:	90 e0       	ldi	r25, 0x00	; 0
    c874:	b3 01       	movw	r22, r6
    c876:	0e 94 8a 64 	call	0xc914	; 0xc914 <fputc>
    c87a:	ea 94       	dec	r14
    c87c:	ee 20       	and	r14, r14
    c87e:	c1 f7       	brne	.-16     	; 0xc870 <vfprintf+0x3ba>
    c880:	43 ce       	rjmp	.-890    	; 0xc508 <vfprintf+0x52>
    c882:	f3 01       	movw	r30, r6
    c884:	66 81       	ldd	r22, Z+6	; 0x06
    c886:	77 81       	ldd	r23, Z+7	; 0x07
    c888:	cb 01       	movw	r24, r22
    c88a:	2b 96       	adiw	r28, 0x0b	; 11
    c88c:	cd bf       	out	0x3d, r28	; 61
    c88e:	de bf       	out	0x3e, r29	; 62
    c890:	cf 91       	pop	r28
    c892:	df 91       	pop	r29
    c894:	1f 91       	pop	r17
    c896:	0f 91       	pop	r16
    c898:	ff 90       	pop	r15
    c89a:	ef 90       	pop	r14
    c89c:	df 90       	pop	r13
    c89e:	cf 90       	pop	r12
    c8a0:	bf 90       	pop	r11
    c8a2:	af 90       	pop	r10
    c8a4:	9f 90       	pop	r9
    c8a6:	8f 90       	pop	r8
    c8a8:	7f 90       	pop	r7
    c8aa:	6f 90       	pop	r6
    c8ac:	5f 90       	pop	r5
    c8ae:	4f 90       	pop	r4
    c8b0:	3f 90       	pop	r3
    c8b2:	2f 90       	pop	r2
    c8b4:	08 95       	ret

0000c8b6 <strnlen_P>:
    c8b6:	fc 01       	movw	r30, r24
    c8b8:	05 90       	lpm	r0, Z+
    c8ba:	61 50       	subi	r22, 0x01	; 1
    c8bc:	70 40       	sbci	r23, 0x00	; 0
    c8be:	01 10       	cpse	r0, r1
    c8c0:	d8 f7       	brcc	.-10     	; 0xc8b8 <strnlen_P+0x2>
    c8c2:	80 95       	com	r24
    c8c4:	90 95       	com	r25
    c8c6:	8e 0f       	add	r24, r30
    c8c8:	9f 1f       	adc	r25, r31
    c8ca:	08 95       	ret

0000c8cc <memcpy>:
    c8cc:	fb 01       	movw	r30, r22
    c8ce:	dc 01       	movw	r26, r24
    c8d0:	02 c0       	rjmp	.+4      	; 0xc8d6 <memcpy+0xa>
    c8d2:	01 90       	ld	r0, Z+
    c8d4:	0d 92       	st	X+, r0
    c8d6:	41 50       	subi	r20, 0x01	; 1
    c8d8:	50 40       	sbci	r21, 0x00	; 0
    c8da:	d8 f7       	brcc	.-10     	; 0xc8d2 <memcpy+0x6>
    c8dc:	08 95       	ret

0000c8de <strnlen>:
    c8de:	fc 01       	movw	r30, r24
    c8e0:	61 50       	subi	r22, 0x01	; 1
    c8e2:	70 40       	sbci	r23, 0x00	; 0
    c8e4:	01 90       	ld	r0, Z+
    c8e6:	01 10       	cpse	r0, r1
    c8e8:	d8 f7       	brcc	.-10     	; 0xc8e0 <strnlen+0x2>
    c8ea:	80 95       	com	r24
    c8ec:	90 95       	com	r25
    c8ee:	8e 0f       	add	r24, r30
    c8f0:	9f 1f       	adc	r25, r31
    c8f2:	08 95       	ret

0000c8f4 <strrev>:
    c8f4:	dc 01       	movw	r26, r24
    c8f6:	fc 01       	movw	r30, r24
    c8f8:	67 2f       	mov	r22, r23
    c8fa:	71 91       	ld	r23, Z+
    c8fc:	77 23       	and	r23, r23
    c8fe:	e1 f7       	brne	.-8      	; 0xc8f8 <strrev+0x4>
    c900:	32 97       	sbiw	r30, 0x02	; 2
    c902:	04 c0       	rjmp	.+8      	; 0xc90c <strrev+0x18>
    c904:	7c 91       	ld	r23, X
    c906:	6d 93       	st	X+, r22
    c908:	70 83       	st	Z, r23
    c90a:	62 91       	ld	r22, -Z
    c90c:	ae 17       	cp	r26, r30
    c90e:	bf 07       	cpc	r27, r31
    c910:	c8 f3       	brcs	.-14     	; 0xc904 <strrev+0x10>
    c912:	08 95       	ret

0000c914 <fputc>:
    c914:	0f 93       	push	r16
    c916:	1f 93       	push	r17
    c918:	cf 93       	push	r28
    c91a:	df 93       	push	r29
    c91c:	8c 01       	movw	r16, r24
    c91e:	eb 01       	movw	r28, r22
    c920:	8b 81       	ldd	r24, Y+3	; 0x03
    c922:	81 ff       	sbrs	r24, 1
    c924:	1b c0       	rjmp	.+54     	; 0xc95c <fputc+0x48>
    c926:	82 ff       	sbrs	r24, 2
    c928:	0d c0       	rjmp	.+26     	; 0xc944 <fputc+0x30>
    c92a:	2e 81       	ldd	r18, Y+6	; 0x06
    c92c:	3f 81       	ldd	r19, Y+7	; 0x07
    c92e:	8c 81       	ldd	r24, Y+4	; 0x04
    c930:	9d 81       	ldd	r25, Y+5	; 0x05
    c932:	28 17       	cp	r18, r24
    c934:	39 07       	cpc	r19, r25
    c936:	64 f4       	brge	.+24     	; 0xc950 <fputc+0x3c>
    c938:	e8 81       	ld	r30, Y
    c93a:	f9 81       	ldd	r31, Y+1	; 0x01
    c93c:	01 93       	st	Z+, r16
    c93e:	e8 83       	st	Y, r30
    c940:	f9 83       	std	Y+1, r31	; 0x01
    c942:	06 c0       	rjmp	.+12     	; 0xc950 <fputc+0x3c>
    c944:	e8 85       	ldd	r30, Y+8	; 0x08
    c946:	f9 85       	ldd	r31, Y+9	; 0x09
    c948:	80 2f       	mov	r24, r16
    c94a:	19 95       	eicall
    c94c:	89 2b       	or	r24, r25
    c94e:	31 f4       	brne	.+12     	; 0xc95c <fputc+0x48>
    c950:	8e 81       	ldd	r24, Y+6	; 0x06
    c952:	9f 81       	ldd	r25, Y+7	; 0x07
    c954:	01 96       	adiw	r24, 0x01	; 1
    c956:	8e 83       	std	Y+6, r24	; 0x06
    c958:	9f 83       	std	Y+7, r25	; 0x07
    c95a:	02 c0       	rjmp	.+4      	; 0xc960 <fputc+0x4c>
    c95c:	0f ef       	ldi	r16, 0xFF	; 255
    c95e:	1f ef       	ldi	r17, 0xFF	; 255
    c960:	c8 01       	movw	r24, r16
    c962:	df 91       	pop	r29
    c964:	cf 91       	pop	r28
    c966:	1f 91       	pop	r17
    c968:	0f 91       	pop	r16
    c96a:	08 95       	ret

0000c96c <__ultoa_invert>:
    c96c:	fa 01       	movw	r30, r20
    c96e:	aa 27       	eor	r26, r26
    c970:	28 30       	cpi	r18, 0x08	; 8
    c972:	51 f1       	breq	.+84     	; 0xc9c8 <__ultoa_invert+0x5c>
    c974:	20 31       	cpi	r18, 0x10	; 16
    c976:	81 f1       	breq	.+96     	; 0xc9d8 <__ultoa_invert+0x6c>
    c978:	e8 94       	clt
    c97a:	6f 93       	push	r22
    c97c:	6e 7f       	andi	r22, 0xFE	; 254
    c97e:	6e 5f       	subi	r22, 0xFE	; 254
    c980:	7f 4f       	sbci	r23, 0xFF	; 255
    c982:	8f 4f       	sbci	r24, 0xFF	; 255
    c984:	9f 4f       	sbci	r25, 0xFF	; 255
    c986:	af 4f       	sbci	r26, 0xFF	; 255
    c988:	b1 e0       	ldi	r27, 0x01	; 1
    c98a:	3e d0       	rcall	.+124    	; 0xca08 <__ultoa_invert+0x9c>
    c98c:	b4 e0       	ldi	r27, 0x04	; 4
    c98e:	3c d0       	rcall	.+120    	; 0xca08 <__ultoa_invert+0x9c>
    c990:	67 0f       	add	r22, r23
    c992:	78 1f       	adc	r23, r24
    c994:	89 1f       	adc	r24, r25
    c996:	9a 1f       	adc	r25, r26
    c998:	a1 1d       	adc	r26, r1
    c99a:	68 0f       	add	r22, r24
    c99c:	79 1f       	adc	r23, r25
    c99e:	8a 1f       	adc	r24, r26
    c9a0:	91 1d       	adc	r25, r1
    c9a2:	a1 1d       	adc	r26, r1
    c9a4:	6a 0f       	add	r22, r26
    c9a6:	71 1d       	adc	r23, r1
    c9a8:	81 1d       	adc	r24, r1
    c9aa:	91 1d       	adc	r25, r1
    c9ac:	a1 1d       	adc	r26, r1
    c9ae:	20 d0       	rcall	.+64     	; 0xc9f0 <__ultoa_invert+0x84>
    c9b0:	09 f4       	brne	.+2      	; 0xc9b4 <__ultoa_invert+0x48>
    c9b2:	68 94       	set
    c9b4:	3f 91       	pop	r19
    c9b6:	2a e0       	ldi	r18, 0x0A	; 10
    c9b8:	26 9f       	mul	r18, r22
    c9ba:	11 24       	eor	r1, r1
    c9bc:	30 19       	sub	r19, r0
    c9be:	30 5d       	subi	r19, 0xD0	; 208
    c9c0:	31 93       	st	Z+, r19
    c9c2:	de f6       	brtc	.-74     	; 0xc97a <__ultoa_invert+0xe>
    c9c4:	cf 01       	movw	r24, r30
    c9c6:	08 95       	ret
    c9c8:	46 2f       	mov	r20, r22
    c9ca:	47 70       	andi	r20, 0x07	; 7
    c9cc:	40 5d       	subi	r20, 0xD0	; 208
    c9ce:	41 93       	st	Z+, r20
    c9d0:	b3 e0       	ldi	r27, 0x03	; 3
    c9d2:	0f d0       	rcall	.+30     	; 0xc9f2 <__ultoa_invert+0x86>
    c9d4:	c9 f7       	brne	.-14     	; 0xc9c8 <__ultoa_invert+0x5c>
    c9d6:	f6 cf       	rjmp	.-20     	; 0xc9c4 <__ultoa_invert+0x58>
    c9d8:	46 2f       	mov	r20, r22
    c9da:	4f 70       	andi	r20, 0x0F	; 15
    c9dc:	40 5d       	subi	r20, 0xD0	; 208
    c9de:	4a 33       	cpi	r20, 0x3A	; 58
    c9e0:	18 f0       	brcs	.+6      	; 0xc9e8 <__ultoa_invert+0x7c>
    c9e2:	49 5d       	subi	r20, 0xD9	; 217
    c9e4:	31 fd       	sbrc	r19, 1
    c9e6:	40 52       	subi	r20, 0x20	; 32
    c9e8:	41 93       	st	Z+, r20
    c9ea:	02 d0       	rcall	.+4      	; 0xc9f0 <__ultoa_invert+0x84>
    c9ec:	a9 f7       	brne	.-22     	; 0xc9d8 <__ultoa_invert+0x6c>
    c9ee:	ea cf       	rjmp	.-44     	; 0xc9c4 <__ultoa_invert+0x58>
    c9f0:	b4 e0       	ldi	r27, 0x04	; 4
    c9f2:	a6 95       	lsr	r26
    c9f4:	97 95       	ror	r25
    c9f6:	87 95       	ror	r24
    c9f8:	77 95       	ror	r23
    c9fa:	67 95       	ror	r22
    c9fc:	ba 95       	dec	r27
    c9fe:	c9 f7       	brne	.-14     	; 0xc9f2 <__ultoa_invert+0x86>
    ca00:	00 97       	sbiw	r24, 0x00	; 0
    ca02:	61 05       	cpc	r22, r1
    ca04:	71 05       	cpc	r23, r1
    ca06:	08 95       	ret
    ca08:	9b 01       	movw	r18, r22
    ca0a:	ac 01       	movw	r20, r24
    ca0c:	0a 2e       	mov	r0, r26
    ca0e:	06 94       	lsr	r0
    ca10:	57 95       	ror	r21
    ca12:	47 95       	ror	r20
    ca14:	37 95       	ror	r19
    ca16:	27 95       	ror	r18
    ca18:	ba 95       	dec	r27
    ca1a:	c9 f7       	brne	.-14     	; 0xca0e <__ultoa_invert+0xa2>
    ca1c:	62 0f       	add	r22, r18
    ca1e:	73 1f       	adc	r23, r19
    ca20:	84 1f       	adc	r24, r20
    ca22:	95 1f       	adc	r25, r21
    ca24:	a0 1d       	adc	r26, r0
    ca26:	08 95       	ret

0000ca28 <_exit>:
    ca28:	f8 94       	cli

0000ca2a <__stop_program>:
    ca2a:	ff cf       	rjmp	.-2      	; 0xca2a <__stop_program>
