
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bacc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000013a6  00802000  0000bacc  0000bb60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028da  008033a6  008033a6  0000cf06  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  0000cf08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000ee34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000f59c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000019fb  00000000  00000000  0000f63c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000097df  00000000  00000000  00011037  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a05  00000000  00000000  0001a816  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007c78  00000000  00000000  0001b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ac0  00000000  00000000  00022e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004565  00000000  00000000  00023954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006f7d  00000000  00000000  00027eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000528  00000000  00000000  0002ee36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 5f 2b 	jmp	0x56be	; 0x56be <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 d7 47 	jmp	0x8fae	; 0x8fae <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 3f 3f 	jmp	0x7e7e	; 0x7e7e <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 a2 4d 	jmp	0x9b44	; 0x9b44 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 85 30 	jmp	0x610a	; 0x610a <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e3       	ldi	r17, 0x33	; 51
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ec ec       	ldi	r30, 0xCC	; 204
     200:	fa eb       	ldi	r31, 0xBA	; 186
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a6 3a       	cpi	r26, 0xA6	; 166
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1c e5       	ldi	r17, 0x5C	; 92
     214:	a6 ea       	ldi	r26, 0xA6	; 166
     216:	b3 e3       	ldi	r27, 0x33	; 51
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a0 38       	cpi	r26, 0x80	; 128
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 2f 52 	call	0xa45e	; 0xa45e <main>
     226:	0c 94 64 5d 	jmp	0xbac8	; 0xbac8 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;


void Debug_Init(void){
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     22e:	e0 e4       	ldi	r30, 0x40	; 64
     230:	f6 e0       	ldi	r31, 0x06	; 6
     232:	88 e0       	ldi	r24, 0x08	; 8
     234:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	82 83       	std	Z+2, r24	; 0x02
   
	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     23a:	e0 ea       	ldi	r30, 0xA0	; 160
     23c:	f8 e0       	ldi	r31, 0x08	; 8
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	85 83       	std	Z+5, r24	; 0x05
	
	Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     242:	8f e5       	ldi	r24, 0x5F	; 95
     244:	86 83       	std	Z+6, r24	; 0x06
	Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     246:	17 82       	std	Z+7, r1	; 0x07
	
	
	Debug_Usart.CTRLB |= USART_RXEN_bm;
     248:	84 81       	ldd	r24, Z+4	; 0x04
     24a:	80 61       	ori	r24, 0x10	; 16
     24c:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     24e:	84 81       	ldd	r24, Z+4	; 0x04
     250:	88 60       	ori	r24, 0x08	; 8
     252:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     254:	83 81       	ldd	r24, Z+3	; 0x03
     256:	80 62       	ori	r24, 0x20	; 32
     258:	83 83       	std	Z+3, r24	; 0x03
}
     25a:	08 95       	ret

0000025c <Debug_CharReadyToRead>:



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     25c:	20 91 d8 33 	lds	r18, 0x33D8
     260:	30 91 d9 33 	lds	r19, 0x33D9
     264:	80 91 d6 33 	lds	r24, 0x33D6
     268:	90 91 d7 33 	lds	r25, 0x33D7
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	09 f0       	breq	.+2      	; 0x276 <Debug_CharReadyToRead+0x1a>
     274:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     276:	84 2f       	mov	r24, r20
     278:	08 95       	ret

0000027a <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     27a:	88 23       	and	r24, r24
     27c:	59 f0       	breq	.+22     	; 0x294 <Debug_GetByte+0x1a>
}



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     27e:	20 91 d8 33 	lds	r18, 0x33D8
     282:	30 91 d9 33 	lds	r19, 0x33D9
     286:	80 91 d6 33 	lds	r24, 0x33D6
     28a:	90 91 d7 33 	lds	r25, 0x33D7
     28e:	28 17       	cp	r18, r24
     290:	39 07       	cpc	r19, r25
     292:	a9 f3       	breq	.-22     	; 0x27e <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     294:	e0 91 d6 33 	lds	r30, 0x33D6
     298:	f0 91 d7 33 	lds	r31, 0x33D7
     29c:	ea 5a       	subi	r30, 0xAA	; 170
     29e:	f4 4b       	sbci	r31, 0xB4	; 180
     2a0:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     2a2:	80 91 d6 33 	lds	r24, 0x33D6
     2a6:	90 91 d7 33 	lds	r25, 0x33D7
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	80 93 d6 33 	sts	0x33D6, r24
     2b0:	90 93 d7 33 	sts	0x33D7, r25
	if(Debug_readLocation >= Debug_BufferSize){
     2b4:	80 91 d6 33 	lds	r24, 0x33D6
     2b8:	90 91 d7 33 	lds	r25, 0x33D7
     2bc:	80 50       	subi	r24, 0x00	; 0
     2be:	94 40       	sbci	r25, 0x04	; 4
     2c0:	20 f0       	brcs	.+8      	; 0x2ca <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     2c2:	10 92 d6 33 	sts	0x33D6, r1
     2c6:	10 92 d7 33 	sts	0x33D7, r1
	}
	return tmp;
}
     2ca:	8e 2f       	mov	r24, r30
     2cc:	08 95       	ret

000002ce <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     2ce:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     2d0:	80 91 a1 08 	lds	r24, 0x08A1
     2d4:	85 ff       	sbrs	r24, 5
     2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <Debug_SendByte+0x2>
	Debug_Usart.DATA = data;	
     2d8:	90 93 a0 08 	sts	0x08A0, r25
}
     2dc:	08 95       	ret

000002de <__vector_25>:
		Debug_SendByte(13);
		Debug_SendByte(10);
	}
}

ISR(USARTC0_RXC_vect){
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	0b b6       	in	r0, 0x3b	; 59
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	2f 93       	push	r18
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     2f6:	e0 91 d8 33 	lds	r30, 0x33D8
     2fa:	f0 91 d9 33 	lds	r31, 0x33D9
     2fe:	80 91 a0 08 	lds	r24, 0x08A0
     302:	ea 5a       	subi	r30, 0xAA	; 170
     304:	f4 4b       	sbci	r31, 0xB4	; 180
     306:	80 83       	st	Z, r24
	Debug_writeLocation++;
     308:	80 91 d8 33 	lds	r24, 0x33D8
     30c:	90 91 d9 33 	lds	r25, 0x33D9
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	80 93 d8 33 	sts	0x33D8, r24
     316:	90 93 d9 33 	sts	0x33D9, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     31a:	80 91 d8 33 	lds	r24, 0x33D8
     31e:	90 91 d9 33 	lds	r25, 0x33D9
     322:	80 50       	subi	r24, 0x00	; 0
     324:	94 40       	sbci	r25, 0x04	; 4
     326:	20 f0       	brcs	.+8      	; 0x330 <__vector_25+0x52>
		Debug_writeLocation = 0;
     328:	10 92 d8 33 	sts	0x33D8, r1
     32c:	10 92 d9 33 	sts	0x33D9, r1
	}
}
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0b be       	out	0x3b, r0	; 59
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     348:	20 91 1d 01 	lds	r18, 0x011D
     34c:	92 2f       	mov	r25, r18
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	80 93 dc 33 	sts	0x33DC, r24
     354:	90 93 dd 33 	sts	0x33DD, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     358:	80 91 dc 33 	lds	r24, 0x33DC
     35c:	90 91 dd 33 	lds	r25, 0x33DD
     360:	20 91 1c 01 	lds	r18, 0x011C
     364:	82 0f       	add	r24, r18
     366:	91 1d       	adc	r25, r1
     368:	80 93 dc 33 	sts	0x33DC, r24
     36c:	90 93 dd 33 	sts	0x33DD, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     370:	80 91 dc 33 	lds	r24, 0x33DC
     374:	90 91 dd 33 	lds	r25, 0x33DD
     378:	80 57       	subi	r24, 0x70	; 112
     37a:	9d 43       	sbci	r25, 0x3D	; 61
     37c:	80 93 dc 33 	sts	0x33DC, r24
     380:	90 93 dd 33 	sts	0x33DD, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     384:	20 91 dc 33 	lds	r18, 0x33DC
     388:	30 91 dd 33 	lds	r19, 0x33DD
     38c:	80 91 da 33 	lds	r24, 0x33DA
     390:	90 91 db 33 	lds	r25, 0x33DB
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	28 17       	cp	r18, r24
     398:	39 07       	cpc	r19, r25
     39a:	09 f0       	breq	.+2      	; 0x39e <Wifi_CharReadyToRead+0x56>
     39c:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     39e:	84 2f       	mov	r24, r20
     3a0:	08 95       	ret

000003a2 <Wifi_ClearBuffer>:
	Wifi_ClearBuffer();

}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     3a2:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
     3a6:	88 23       	and	r24, r24
     3a8:	31 f1       	breq	.+76     	; 0x3f6 <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     3aa:	20 91 1d 01 	lds	r18, 0x011D
     3ae:	92 2f       	mov	r25, r18
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	80 93 dc 33 	sts	0x33DC, r24
     3b6:	90 93 dd 33 	sts	0x33DD, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     3ba:	80 91 dc 33 	lds	r24, 0x33DC
     3be:	90 91 dd 33 	lds	r25, 0x33DD
     3c2:	20 91 1c 01 	lds	r18, 0x011C
     3c6:	82 0f       	add	r24, r18
     3c8:	91 1d       	adc	r25, r1
     3ca:	80 93 dc 33 	sts	0x33DC, r24
     3ce:	90 93 dd 33 	sts	0x33DD, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     3d2:	80 91 dc 33 	lds	r24, 0x33DC
     3d6:	90 91 dd 33 	lds	r25, 0x33DD
     3da:	80 57       	subi	r24, 0x70	; 112
     3dc:	9d 43       	sbci	r25, 0x3D	; 61
     3de:	80 93 dc 33 	sts	0x33DC, r24
     3e2:	90 93 dd 33 	sts	0x33DD, r25
		Wifi_readLocation = Wifi_writeLocation;
     3e6:	80 91 dc 33 	lds	r24, 0x33DC
     3ea:	90 91 dd 33 	lds	r25, 0x33DD
     3ee:	80 93 da 33 	sts	0x33DA, r24
     3f2:	90 93 db 33 	sts	0x33DB, r25
     3f6:	08 95       	ret

000003f8 <Wifi_Init>:
volatile bool wifiBufferWasFull = false;

volatile uint16_t bufferDelayCounter = 0;


void Wifi_Init(uint32_t baud){
     3f8:	9b 01       	movw	r18, r22
     3fa:	ac 01       	movw	r20, r24


	Wifi_Connected_Port.DIRCLR = (1<<Wifi_Connected_pin);
     3fc:	80 e8       	ldi	r24, 0x80	; 128
     3fe:	e0 ea       	ldi	r30, 0xA0	; 160
     400:	f6 e0       	ldi	r31, 0x06	; 6
     402:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.DIRCLR = (1<<Wifi_RTS_pin);
     404:	e0 e6       	ldi	r30, 0x60	; 96
     406:	f6 e0       	ldi	r31, 0x06	; 6
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	82 83       	std	Z+2, r24	; 0x02
    Wifi_Flow_Port.Wifi_RTS_CNTL = PORT_OPC_PULLUP_gc;
     40c:	88 e1       	ldi	r24, 0x18	; 24
     40e:	81 8b       	std	Z+17, r24	; 0x11
    Wifi_Flow_Port.DIRSET = (1<<Wifi_CTS_pin);
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	91 83       	std	Z+1, r25	; 0x01
    Wifi_Flow_Port.OUTCLR = (1<<Wifi_CTS_pin);
     414:	96 83       	std	Z+6, r25	; 0x06


	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     416:	a0 ea       	ldi	r26, 0xA0	; 160
     418:	ba e0       	ldi	r27, 0x0A	; 10
     41a:	80 91 a4 0a 	lds	r24, 0x0AA4
     41e:	8f 7e       	andi	r24, 0xEF	; 239
     420:	14 96       	adiw	r26, 0x04	; 4
     422:	8c 93       	st	X, r24
     424:	14 97       	sbiw	r26, 0x04	; 4
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     426:	80 91 a4 0a 	lds	r24, 0x0AA4
     42a:	87 7f       	andi	r24, 0xF7	; 247
     42c:	14 96       	adiw	r26, 0x04	; 4
     42e:	8c 93       	st	X, r24
     430:	14 97       	sbiw	r26, 0x04	; 4
	//_delay_ms(1000);


	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     432:	e0 e8       	ldi	r30, 0x80	; 128
     434:	f6 e0       	ldi	r31, 0x06	; 6
     436:	88 e0       	ldi	r24, 0x08	; 8
     438:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	15 96       	adiw	r26, 0x05	; 5
     442:	8c 93       	st	X, r24
     444:	15 97       	sbiw	r26, 0x05	; 5
	 	    	
	if(baud == 9600){
     446:	20 38       	cpi	r18, 0x80	; 128
     448:	65 e2       	ldi	r22, 0x25	; 37
     44a:	36 07       	cpc	r19, r22
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	46 07       	cpc	r20, r22
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	56 07       	cpc	r21, r22
     454:	11 f4       	brne	.+4      	; 0x45a <Wifi_Init+0x62>
		Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     456:	8f e5       	ldi	r24, 0x5F	; 95
     458:	09 c0       	rjmp	.+18     	; 0x46c <Wifi_Init+0x74>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     45a:	20 30       	cpi	r18, 0x00	; 0
     45c:	62 ec       	ldi	r22, 0xC2	; 194
     45e:	36 07       	cpc	r19, r22
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	46 07       	cpc	r20, r22
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	56 07       	cpc	r21, r22
     468:	29 f4       	brne	.+10     	; 0x474 <Wifi_Init+0x7c>
		Wifi_Usart.BAUDCTRLA = 7 & 0xFF;
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	16 96       	adiw	r26, 0x06	; 6
     46e:	8c 93       	st	X, r24
     470:	16 97       	sbiw	r26, 0x06	; 6
     472:	1c c0       	rjmp	.+56     	; 0x4ac <Wifi_Init+0xb4>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     474:	20 30       	cpi	r18, 0x00	; 0
     476:	64 e8       	ldi	r22, 0x84	; 132
     478:	36 07       	cpc	r19, r22
     47a:	63 e0       	ldi	r22, 0x03	; 3
     47c:	46 07       	cpc	r20, r22
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	56 07       	cpc	r21, r22
     482:	a1 f3       	breq	.-24     	; 0x46c <Wifi_Init+0x74>
		Wifi_Usart.BAUDCTRLA = 3 & 0xFF;
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	} else if(baud == 460800){
     484:	20 30       	cpi	r18, 0x00	; 0
     486:	88 e0       	ldi	r24, 0x08	; 8
     488:	38 07       	cpc	r19, r24
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	48 07       	cpc	r20, r24
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	58 07       	cpc	r21, r24
     492:	21 f4       	brne	.+8      	; 0x49c <Wifi_Init+0xa4>
		Wifi_Usart.BAUDCTRLA = 1 & 0xFF;
     494:	16 96       	adiw	r26, 0x06	; 6
     496:	9c 93       	st	X, r25
     498:	16 97       	sbiw	r26, 0x06	; 6
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <Wifi_Init+0xb4>
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     49c:	20 50       	subi	r18, 0x00	; 0
     49e:	30 41       	sbci	r19, 0x10	; 16
     4a0:	4e 40       	sbci	r20, 0x0E	; 14
     4a2:	50 40       	sbci	r21, 0x00	; 0
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <Wifi_Init+0xb8>
		Wifi_Usart.BAUDCTRLA = 0 & 0xFF;
     4a6:	16 96       	adiw	r26, 0x06	; 6
     4a8:	1c 92       	st	X, r1
     4aa:	16 97       	sbiw	r26, 0x06	; 6
		Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     4ac:	17 96       	adiw	r26, 0x07	; 7
     4ae:	1c 92       	st	X, r1
	}
	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     4b0:	e0 ea       	ldi	r30, 0xA0	; 160
     4b2:	fa e0       	ldi	r31, 0x0A	; 10
     4b4:	80 91 a4 0a 	lds	r24, 0x0AA4
     4b8:	80 61       	ori	r24, 0x10	; 16
     4ba:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     4bc:	80 91 a4 0a 	lds	r24, 0x0AA4
     4c0:	88 60       	ori	r24, 0x08	; 8
     4c2:	84 83       	std	Z+4, r24	; 0x04

	Wifi_ClearBuffer();
     4c4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Wifi_ClearBuffer>

}
     4c8:	08 95       	ret

000004ca <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     4ca:	88 23       	and	r24, r24
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     4ce:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
     4d2:	88 23       	and	r24, r24
     4d4:	e1 f3       	breq	.-8      	; 0x4ce <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     4d6:	e0 91 da 33 	lds	r30, 0x33DA
     4da:	f0 91 db 33 	lds	r31, 0x33DB
     4de:	e0 59       	subi	r30, 0x90	; 144
     4e0:	f2 4c       	sbci	r31, 0xC2	; 194
     4e2:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     4e4:	80 91 da 33 	lds	r24, 0x33DA
     4e8:	90 91 db 33 	lds	r25, 0x33DB
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	80 93 da 33 	sts	0x33DA, r24
     4f2:	90 93 db 33 	sts	0x33DB, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     4f6:	80 91 da 33 	lds	r24, 0x33DA
     4fa:	90 91 db 33 	lds	r25, 0x33DB
     4fe:	80 50       	subi	r24, 0x00	; 0
     500:	94 40       	sbci	r25, 0x04	; 4
     502:	20 f0       	brcs	.+8      	; 0x50c <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     504:	10 92 da 33 	sts	0x33DA, r1
     508:	10 92 db 33 	sts	0x33DB, r1
	}
	return tmp;
}
     50c:	8e 2f       	mov	r24, r30
     50e:	08 95       	ret

00000510 <Wifi_SendByte>:


void Wifi_SendByte(uint8_t data){
     510:	98 2f       	mov	r25, r24

	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
     512:	80 91 a1 0a 	lds	r24, 0x0AA1
     516:	85 ff       	sbrs	r24, 5
     518:	fc cf       	rjmp	.-8      	; 0x512 <Wifi_SendByte+0x2>
    while(((Wifi_Flow_Port.IN)&(1<<Wifi_RTS_pin)) > 0);                              // Wait for RTS to be low
     51a:	80 91 68 06 	lds	r24, 0x0668
     51e:	81 fd       	sbrc	r24, 1
     520:	fc cf       	rjmp	.-8      	; 0x51a <Wifi_SendByte+0xa>

	Wifi_Usart.DATA = data;
     522:	90 93 a0 0a 	sts	0x0AA0, r25

}
     526:	08 95       	ret

00000528 <Wifi_Connected>:
	
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
     528:	ac 01       	movw	r20, r24
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     52e:	66 e6       	ldi	r22, 0x66	; 102
     530:	7e e0       	ldi	r23, 0x0E	; 14
     532:	0d c0       	rjmp	.+26     	; 0x54e <Wifi_Connected+0x26>
	for(uint16_t i = 0; i < timeOut; i++){
		if((Wifi_Connected_Port.IN & (1<<Wifi_Connected_pin)) >0 ){
     534:	80 91 a8 06 	lds	r24, 0x06A8
     538:	87 ff       	sbrs	r24, 7
     53a:	04 c0       	rjmp	.+8      	; 0x544 <Wifi_Connected+0x1c>
			connected = true;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 ea 33 	sts	0x33EA, r24
     542:	08 95       	ret
     544:	fb 01       	movw	r30, r22
     546:	31 97       	sbiw	r30, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <Wifi_Connected+0x1e>
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
	for(uint16_t i = 0; i < timeOut; i++){
     54a:	2f 5f       	subi	r18, 0xFF	; 255
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
     54e:	24 17       	cp	r18, r20
     550:	35 07       	cpc	r19, r21
     552:	80 f3       	brcs	.-32     	; 0x534 <Wifi_Connected+0xc>
			connected = true;
			return true;
		}
		_delay_ms(1);
	}
	connected = false;
     554:	10 92 ea 33 	sts	0x33EA, r1
     558:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     55a:	08 95       	ret

0000055c <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     55c:	e0 ea       	ldi	r30, 0xA0	; 160
     55e:	f6 e0       	ldi	r31, 0x06	; 6
     560:	88 e1       	ldi	r24, 0x18	; 24
     562:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     564:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     566:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     568:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     56a:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	8c 67       	ori	r24, 0x7C	; 124
     570:	82 83       	std	Z+2, r24	; 0x02
}
     572:	08 95       	ret

00000574 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     574:	e0 ea       	ldi	r30, 0xA0	; 160
     576:	f6 e0       	ldi	r31, 0x06	; 6
     578:	80 85       	ldd	r24, Z+8	; 0x08
}
     57a:	8c 77       	andi	r24, 0x7C	; 124
     57c:	08 95       	ret

0000057e <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     57e:	40 91 a8 06 	lds	r20, 0x06A8
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <Dpad_CheckButton+0x10>
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	8a 95       	dec	r24
     590:	e2 f7       	brpl	.-8      	; 0x58a <Dpad_CheckButton+0xc>
     592:	4c 77       	andi	r20, 0x7C	; 124
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	24 23       	and	r18, r20
     598:	35 23       	and	r19, r21
     59a:	12 16       	cp	r1, r18
     59c:	13 06       	cpc	r1, r19
     59e:	0c f0       	brlt	.+2      	; 0x5a2 <Dpad_CheckButton+0x24>
     5a0:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     5a2:	89 2f       	mov	r24, r25
     5a4:	08 95       	ret

000005a6 <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     5a6:	e0 e2       	ldi	r30, 0x20	; 32
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	83 6f       	ori	r24, 0xF3	; 243
     5ae:	81 83       	std	Z+1, r24	; 0x01
}
     5b0:	08 95       	ret

000005b2 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <Leds_Set+0xa>
     5b8:	22 0f       	add	r18, r18
     5ba:	33 1f       	adc	r19, r19
     5bc:	8a 95       	dec	r24
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <Leds_Set+0x6>
     5c0:	e0 e2       	ldi	r30, 0x20	; 32
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	25 83       	std	Z+5, r18	; 0x05
}
     5c6:	08 95       	ret

000005c8 <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <Leds_Clear+0xa>
     5ce:	22 0f       	add	r18, r18
     5d0:	33 1f       	adc	r19, r19
     5d2:	8a 95       	dec	r24
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <Leds_Clear+0x6>
     5d6:	e0 e2       	ldi	r30, 0x20	; 32
     5d8:	f6 e0       	ldi	r31, 0x06	; 6
     5da:	26 83       	std	Z+6, r18	; 0x06
}
     5dc:	08 95       	ret

000005de <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <Leds_Toggle+0xa>
     5e4:	22 0f       	add	r18, r18
     5e6:	33 1f       	adc	r19, r19
     5e8:	8a 95       	dec	r24
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <Leds_Toggle+0x6>
     5ec:	e0 e2       	ldi	r30, 0x20	; 32
     5ee:	f6 e0       	ldi	r31, 0x06	; 6
     5f0:	27 83       	std	Z+7, r18	; 0x07
}
     5f2:	08 95       	ret

000005f4 <Rs232_Init>:
uint32_t quickLarge = 0;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     5f4:	e0 e6       	ldi	r30, 0x60	; 96
     5f6:	f6 e0       	ldi	r31, 0x06	; 6
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     5fc:	84 e0       	ldi	r24, 0x04	; 4
     5fe:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     600:	e0 ea       	ldi	r30, 0xA0	; 160
     602:	f9 e0       	ldi	r31, 0x09	; 9
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     608:	8f e5       	ldi	r24, 0x5F	; 95
     60a:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     60c:	17 82       	std	Z+7, r1	; 0x07
	
	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     60e:	84 81       	ldd	r24, Z+4	; 0x04
     610:	80 61       	ori	r24, 0x10	; 16
     612:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     614:	84 81       	ldd	r24, Z+4	; 0x04
     616:	88 60       	ori	r24, 0x08	; 8
     618:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     61a:	83 81       	ldd	r24, Z+3	; 0x03
     61c:	80 62       	ori	r24, 0x20	; 32
     61e:	83 83       	std	Z+3, r24	; 0x03
}
     620:	08 95       	ret

00000622 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     622:	20 91 f0 33 	lds	r18, 0x33F0
     626:	30 91 f1 33 	lds	r19, 0x33F1
     62a:	80 91 ee 33 	lds	r24, 0x33EE
     62e:	90 91 ef 33 	lds	r25, 0x33EF
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	09 f0       	breq	.+2      	; 0x63c <Rs232_CharReadyToRead+0x1a>
     63a:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     63c:	84 2f       	mov	r24, r20
     63e:	08 95       	ret

00000640 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     640:	88 23       	and	r24, r24
     642:	59 f0       	breq	.+22     	; 0x65a <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     644:	20 91 f0 33 	lds	r18, 0x33F0
     648:	30 91 f1 33 	lds	r19, 0x33F1
     64c:	80 91 ee 33 	lds	r24, 0x33EE
     650:	90 91 ef 33 	lds	r25, 0x33EF
     654:	28 17       	cp	r18, r24
     656:	39 07       	cpc	r19, r25
     658:	a9 f3       	breq	.-22     	; 0x644 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     65a:	e0 91 ee 33 	lds	r30, 0x33EE
     65e:	f0 91 ef 33 	lds	r31, 0x33EF
     662:	e6 5c       	subi	r30, 0xC6	; 198
     664:	f8 4a       	sbci	r31, 0xA8	; 168
     666:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     668:	80 91 ee 33 	lds	r24, 0x33EE
     66c:	90 91 ef 33 	lds	r25, 0x33EF
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	80 93 ee 33 	sts	0x33EE, r24
     676:	90 93 ef 33 	sts	0x33EF, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     67a:	80 91 ee 33 	lds	r24, 0x33EE
     67e:	90 91 ef 33 	lds	r25, 0x33EF
     682:	80 50       	subi	r24, 0x00	; 0
     684:	94 40       	sbci	r25, 0x04	; 4
     686:	20 f0       	brcs	.+8      	; 0x690 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     688:	10 92 ee 33 	sts	0x33EE, r1
     68c:	10 92 ef 33 	sts	0x33EF, r1
	}
	return tmp;
}
     690:	8e 2f       	mov	r24, r30
     692:	08 95       	ret

00000694 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     694:	80 91 f0 33 	lds	r24, 0x33F0
     698:	90 91 f1 33 	lds	r25, 0x33F1
     69c:	80 93 ee 33 	sts	0x33EE, r24
     6a0:	90 93 ef 33 	sts	0x33EF, r25
}
     6a4:	08 95       	ret

000006a6 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     6a6:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     6a8:	80 91 a1 09 	lds	r24, 0x09A1
     6ac:	85 ff       	sbrs	r24, 5
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     6b0:	90 93 a0 09 	sts	0x09A0, r25
}
     6b4:	08 95       	ret

000006b6 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     6b6:	82 e3       	ldi	r24, 0x32	; 50
     6b8:	80 93 6b 34 	sts	0x346B, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	e0 ec       	ldi	r30, 0xC0	; 192
     6c0:	f9 e0       	ldi	r31, 0x09	; 9
     6c2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     6c4:	80 91 c2 09 	lds	r24, 0x09C2
     6c8:	87 ff       	sbrs	r24, 7
     6ca:	fc cf       	rjmp	.-8      	; 0x6c4 <wait_ready+0xe>
	return SD_SPI.DATA;
     6cc:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     6d0:	e0 ec       	ldi	r30, 0xC0	; 192
     6d2:	f9 e0       	ldi	r31, 0x09	; 9
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     6d8:	80 91 c2 09 	lds	r24, 0x09C2
     6dc:	87 ff       	sbrs	r24, 7
     6de:	fc cf       	rjmp	.-8      	; 0x6d8 <wait_ready+0x22>
	return SD_SPI.DATA;
     6e0:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     6e4:	9f 3f       	cpi	r25, 0xFF	; 255
     6e6:	21 f0       	breq	.+8      	; 0x6f0 <wait_ready+0x3a>
     6e8:	80 91 6b 34 	lds	r24, 0x346B
     6ec:	88 23       	and	r24, r24
     6ee:	99 f7       	brne	.-26     	; 0x6d6 <wait_ready+0x20>

	return res;
}
     6f0:	89 2f       	mov	r24, r25
     6f2:	08 95       	ret

000006f4 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
	CS_LOW();
     6fa:	c0 e6       	ldi	r28, 0x60	; 96
     6fc:	d6 e0       	ldi	r29, 0x06	; 6
     6fe:	10 e1       	ldi	r17, 0x10	; 16
     700:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     702:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <wait_ready>
     706:	8f 3f       	cpi	r24, 0xFF	; 255
     708:	11 f4       	brne	.+4      	; 0x70e <select+0x1a>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0c c0       	rjmp	.+24     	; 0x726 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     70e:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	e0 ec       	ldi	r30, 0xC0	; 192
     714:	f9 e0       	ldi	r31, 0x09	; 9
     716:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     718:	80 91 c2 09 	lds	r24, 0x09C2
     71c:	87 ff       	sbrs	r24, 7
     71e:	fc cf       	rjmp	.-8      	; 0x718 <select+0x24>
	return SD_SPI.DATA;
     720:	80 91 c3 09 	lds	r24, 0x09C3
     724:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	08 95       	ret

0000072e <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     72e:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     730:	84 e1       	ldi	r24, 0x14	; 20
     732:	80 93 6a 34 	sts	0x346A, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     736:	a0 ec       	ldi	r26, 0xC0	; 192
     738:	b9 e0       	ldi	r27, 0x09	; 9
     73a:	9f ef       	ldi	r25, 0xFF	; 255
     73c:	13 96       	adiw	r26, 0x03	; 3
     73e:	9c 93       	st	X, r25
     740:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     742:	80 91 c2 09 	lds	r24, 0x09C2
     746:	87 ff       	sbrs	r24, 7
     748:	fc cf       	rjmp	.-8      	; 0x742 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     74a:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     74e:	8f 3f       	cpi	r24, 0xFF	; 255
     750:	29 f4       	brne	.+10     	; 0x75c <rcvr_datablock+0x2e>
     752:	80 91 6a 34 	lds	r24, 0x346A
     756:	88 23       	and	r24, r24
     758:	89 f7       	brne	.-30     	; 0x73c <rcvr_datablock+0xe>
     75a:	49 c0       	rjmp	.+146    	; 0x7ee <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     75c:	8e 3f       	cpi	r24, 0xFE	; 254
     75e:	09 f0       	breq	.+2      	; 0x762 <rcvr_datablock+0x34>
     760:	46 c0       	rjmp	.+140    	; 0x7ee <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     762:	a0 ec       	ldi	r26, 0xC0	; 192
     764:	b9 e0       	ldi	r27, 0x09	; 9
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	9c 93       	st	X, r25
     76c:	13 97       	sbiw	r26, 0x03	; 3
     76e:	80 91 c2 09 	lds	r24, 0x09C2
     772:	87 ff       	sbrs	r24, 7
     774:	fc cf       	rjmp	.-8      	; 0x76e <rcvr_datablock+0x40>
     776:	80 91 c3 09 	lds	r24, 0x09C3
     77a:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	9c 93       	st	X, r25
     780:	13 97       	sbiw	r26, 0x03	; 3
     782:	80 91 c2 09 	lds	r24, 0x09C2
     786:	87 ff       	sbrs	r24, 7
     788:	fc cf       	rjmp	.-8      	; 0x782 <rcvr_datablock+0x54>
     78a:	80 91 c3 09 	lds	r24, 0x09C3
     78e:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     790:	13 96       	adiw	r26, 0x03	; 3
     792:	9c 93       	st	X, r25
     794:	13 97       	sbiw	r26, 0x03	; 3
     796:	80 91 c2 09 	lds	r24, 0x09C2
     79a:	87 ff       	sbrs	r24, 7
     79c:	fc cf       	rjmp	.-8      	; 0x796 <rcvr_datablock+0x68>
     79e:	80 91 c3 09 	lds	r24, 0x09C3
     7a2:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     7a4:	13 96       	adiw	r26, 0x03	; 3
     7a6:	9c 93       	st	X, r25
     7a8:	13 97       	sbiw	r26, 0x03	; 3
     7aa:	80 91 c2 09 	lds	r24, 0x09C2
     7ae:	87 ff       	sbrs	r24, 7
     7b0:	fc cf       	rjmp	.-8      	; 0x7aa <rcvr_datablock+0x7c>
     7b2:	80 91 c3 09 	lds	r24, 0x09C3
     7b6:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     7b8:	64 50       	subi	r22, 0x04	; 4
     7ba:	70 40       	sbci	r23, 0x00	; 0
     7bc:	11 f0       	breq	.+4      	; 0x7c2 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     7be:	34 96       	adiw	r30, 0x04	; 4
     7c0:	d3 cf       	rjmp	.-90     	; 0x768 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	e0 ec       	ldi	r30, 0xC0	; 192
     7c6:	f9 e0       	ldi	r31, 0x09	; 9
     7c8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     7ca:	80 91 c2 09 	lds	r24, 0x09C2
     7ce:	87 ff       	sbrs	r24, 7
     7d0:	fc cf       	rjmp	.-8      	; 0x7ca <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     7d2:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	e0 ec       	ldi	r30, 0xC0	; 192
     7da:	f9 e0       	ldi	r31, 0x09	; 9
     7dc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     7de:	80 91 c2 09 	lds	r24, 0x09C2
     7e2:	87 ff       	sbrs	r24, 7
     7e4:	fc cf       	rjmp	.-8      	; 0x7de <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     7e6:	80 91 c3 09 	lds	r24, 0x09C3
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     7ee:	80 e0       	ldi	r24, 0x00	; 0
}
     7f0:	08 95       	ret

000007f2 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
     7fa:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     7fc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <wait_ready>
     800:	8f 3f       	cpi	r24, 0xFF	; 255
     802:	11 f0       	breq	.+4      	; 0x808 <xmit_datablock+0x16>
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	3f c0       	rjmp	.+126    	; 0x886 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     808:	e0 ec       	ldi	r30, 0xC0	; 192
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	13 83       	std	Z+3, r17	; 0x03
     80e:	80 91 c2 09 	lds	r24, 0x09C2
     812:	87 ff       	sbrs	r24, 7
     814:	fc cf       	rjmp	.-8      	; 0x80e <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     816:	1d 3f       	cpi	r17, 0xFD	; 253
     818:	11 f4       	brne	.+4      	; 0x81e <xmit_datablock+0x2c>
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	34 c0       	rjmp	.+104    	; 0x886 <xmit_datablock+0x94>
     81e:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     820:	e0 ec       	ldi	r30, 0xC0	; 192
     822:	f9 e0       	ldi	r31, 0x09	; 9
     824:	88 81       	ld	r24, Y
     826:	83 83       	std	Z+3, r24	; 0x03
     828:	80 91 c2 09 	lds	r24, 0x09C2
     82c:	87 ff       	sbrs	r24, 7
     82e:	fc cf       	rjmp	.-8      	; 0x828 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	83 83       	std	Z+3, r24	; 0x03
     834:	80 91 c2 09 	lds	r24, 0x09C2
     838:	87 ff       	sbrs	r24, 7
     83a:	fc cf       	rjmp	.-8      	; 0x834 <xmit_datablock+0x42>
		} while (--wc);
     83c:	91 50       	subi	r25, 0x01	; 1
     83e:	11 f0       	breq	.+4      	; 0x844 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     840:	22 96       	adiw	r28, 0x02	; 2
     842:	f0 cf       	rjmp	.-32     	; 0x824 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	e0 ec       	ldi	r30, 0xC0	; 192
     848:	f9 e0       	ldi	r31, 0x09	; 9
     84a:	83 83       	std	Z+3, r24	; 0x03
     84c:	80 91 c2 09 	lds	r24, 0x09C2
     850:	87 ff       	sbrs	r24, 7
     852:	fc cf       	rjmp	.-8      	; 0x84c <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	e0 ec       	ldi	r30, 0xC0	; 192
     858:	f9 e0       	ldi	r31, 0x09	; 9
     85a:	83 83       	std	Z+3, r24	; 0x03
     85c:	80 91 c2 09 	lds	r24, 0x09C2
     860:	87 ff       	sbrs	r24, 7
     862:	fc cf       	rjmp	.-8      	; 0x85c <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	e0 ec       	ldi	r30, 0xC0	; 192
     868:	f9 e0       	ldi	r31, 0x09	; 9
     86a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     86c:	80 91 c2 09 	lds	r24, 0x09C2
     870:	87 ff       	sbrs	r24, 7
     872:	fc cf       	rjmp	.-8      	; 0x86c <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     874:	80 91 c3 09 	lds	r24, 0x09C3
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	8f 71       	andi	r24, 0x1F	; 31
     87c:	85 30       	cpi	r24, 0x05	; 5
     87e:	09 f0       	breq	.+2      	; 0x882 <xmit_datablock+0x90>
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     886:	89 2f       	mov	r24, r25
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	08 95       	ret

00000890 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	d8 2e       	mov	r13, r24
     89c:	7a 01       	movw	r14, r20
     89e:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     8a0:	87 ff       	sbrs	r24, 7
     8a2:	0c c0       	rjmp	.+24     	; 0x8bc <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     8a4:	87 e7       	ldi	r24, 0x77	; 119
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
		if (res > 1) return res;
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <send_cmd+0x28>
     8b6:	72 c0       	rjmp	.+228    	; 0x99c <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     8b8:	8f e7       	ldi	r24, 0x7F	; 127
     8ba:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     8bc:	80 e1       	ldi	r24, 0x10	; 16
     8be:	e0 e6       	ldi	r30, 0x60	; 96
     8c0:	f6 e0       	ldi	r31, 0x06	; 6
     8c2:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e0 ec       	ldi	r30, 0xC0	; 192
     8c8:	f9 e0       	ldi	r31, 0x09	; 9
     8ca:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8cc:	80 91 c2 09 	lds	r24, 0x09C2
     8d0:	87 ff       	sbrs	r24, 7
     8d2:	fc cf       	rjmp	.-8      	; 0x8cc <send_cmd+0x3c>
	return SD_SPI.DATA;
     8d4:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     8d8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <select>
     8dc:	88 23       	and	r24, r24
     8de:	11 f4       	brne	.+4      	; 0x8e4 <send_cmd+0x54>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	5c c0       	rjmp	.+184    	; 0x99c <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     8e4:	e0 ec       	ldi	r30, 0xC0	; 192
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
     8e8:	d3 82       	std	Z+3, r13	; 0x03
     8ea:	80 91 c2 09 	lds	r24, 0x09C2
     8ee:	87 ff       	sbrs	r24, 7
     8f0:	fc cf       	rjmp	.-8      	; 0x8ea <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     8f2:	81 2f       	mov	r24, r17
     8f4:	99 27       	eor	r25, r25
     8f6:	aa 27       	eor	r26, r26
     8f8:	bb 27       	eor	r27, r27
     8fa:	e0 ec       	ldi	r30, 0xC0	; 192
     8fc:	f9 e0       	ldi	r31, 0x09	; 9
     8fe:	83 83       	std	Z+3, r24	; 0x03
     900:	80 91 c2 09 	lds	r24, 0x09C2
     904:	87 ff       	sbrs	r24, 7
     906:	fc cf       	rjmp	.-8      	; 0x900 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     908:	c8 01       	movw	r24, r16
     90a:	aa 27       	eor	r26, r26
     90c:	bb 27       	eor	r27, r27
     90e:	e0 ec       	ldi	r30, 0xC0	; 192
     910:	f9 e0       	ldi	r31, 0x09	; 9
     912:	83 83       	std	Z+3, r24	; 0x03
     914:	80 91 c2 09 	lds	r24, 0x09C2
     918:	87 ff       	sbrs	r24, 7
     91a:	fc cf       	rjmp	.-8      	; 0x914 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     91c:	bb 27       	eor	r27, r27
     91e:	a1 2f       	mov	r26, r17
     920:	90 2f       	mov	r25, r16
     922:	8f 2d       	mov	r24, r15
     924:	e0 ec       	ldi	r30, 0xC0	; 192
     926:	f9 e0       	ldi	r31, 0x09	; 9
     928:	83 83       	std	Z+3, r24	; 0x03
     92a:	80 91 c2 09 	lds	r24, 0x09C2
     92e:	87 ff       	sbrs	r24, 7
     930:	fc cf       	rjmp	.-8      	; 0x92a <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     932:	e0 ec       	ldi	r30, 0xC0	; 192
     934:	f9 e0       	ldi	r31, 0x09	; 9
     936:	e3 82       	std	Z+3, r14	; 0x03
     938:	80 91 c2 09 	lds	r24, 0x09C2
     93c:	87 ff       	sbrs	r24, 7
     93e:	fc cf       	rjmp	.-8      	; 0x938 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	d8 16       	cp	r13, r24
     944:	11 f4       	brne	.+4      	; 0x94a <send_cmd+0xba>
     946:	85 e9       	ldi	r24, 0x95	; 149
     948:	06 c0       	rjmp	.+12     	; 0x956 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     94a:	88 e4       	ldi	r24, 0x48	; 72
     94c:	d8 16       	cp	r13, r24
     94e:	11 f4       	brne	.+4      	; 0x954 <send_cmd+0xc4>
     950:	87 e8       	ldi	r24, 0x87	; 135
     952:	01 c0       	rjmp	.+2      	; 0x956 <send_cmd+0xc6>
     954:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     956:	e0 ec       	ldi	r30, 0xC0	; 192
     958:	f9 e0       	ldi	r31, 0x09	; 9
     95a:	83 83       	std	Z+3, r24	; 0x03
     95c:	80 91 c2 09 	lds	r24, 0x09C2
     960:	87 ff       	sbrs	r24, 7
     962:	fc cf       	rjmp	.-8      	; 0x95c <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     964:	8c e4       	ldi	r24, 0x4C	; 76
     966:	d8 16       	cp	r13, r24
     968:	51 f4       	brne	.+20     	; 0x97e <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e0 ec       	ldi	r30, 0xC0	; 192
     96e:	f9 e0       	ldi	r31, 0x09	; 9
     970:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     972:	80 91 c2 09 	lds	r24, 0x09C2
     976:	87 ff       	sbrs	r24, 7
     978:	fc cf       	rjmp	.-8      	; 0x972 <send_cmd+0xe2>
	return SD_SPI.DATA;
     97a:	80 91 c3 09 	lds	r24, 0x09C3
     97e:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     980:	e0 ec       	ldi	r30, 0xC0	; 192
     982:	f9 e0       	ldi	r31, 0x09	; 9
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     988:	80 91 c2 09 	lds	r24, 0x09C2
     98c:	87 ff       	sbrs	r24, 7
     98e:	fc cf       	rjmp	.-8      	; 0x988 <send_cmd+0xf8>
	return SD_SPI.DATA;
     990:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     994:	87 ff       	sbrs	r24, 7
     996:	02 c0       	rjmp	.+4      	; 0x99c <send_cmd+0x10c>
     998:	91 50       	subi	r25, 0x01	; 1
     99a:	a9 f7       	brne	.-22     	; 0x986 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	08 95       	ret

000009a8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	df 93       	push	r29
     9b2:	cf 93       	push	r28
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <disk_initialize+0xe>
     9b6:	0f 92       	push	r0
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     9bc:	80 91 a4 33 	lds	r24, 0x33A4
     9c0:	81 fd       	sbrc	r24, 1
     9c2:	cc c0       	rjmp	.+408    	; 0xb5c <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     9c4:	e0 e6       	ldi	r30, 0x60	; 96
     9c6:	f6 e0       	ldi	r31, 0x06	; 6
     9c8:	80 eb       	ldi	r24, 0xB0	; 176
     9ca:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     9cc:	88 e3       	ldi	r24, 0x38	; 56
     9ce:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     9d0:	14 82       	std	Z+4, r1	; 0x04
     9d2:	8c e2       	ldi	r24, 0x2C	; 44
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	20 e7       	ldi	r18, 0x70	; 112
     9d8:	31 e0       	ldi	r19, 0x01	; 1
     9da:	f9 01       	movw	r30, r18
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e2:	d9 f7       	brne	.-10     	; 0x9da <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     9e4:	83 e5       	ldi	r24, 0x53	; 83
     9e6:	80 93 c0 09 	sts	0x09C0, r24
     9ea:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9ec:	e0 ec       	ldi	r30, 0xC0	; 192
     9ee:	f9 e0       	ldi	r31, 0x09	; 9
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9f4:	80 91 c2 09 	lds	r24, 0x09C2
     9f8:	87 ff       	sbrs	r24, 7
     9fa:	fc cf       	rjmp	.-8      	; 0x9f4 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     9fc:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     a00:	91 50       	subi	r25, 0x01	; 1
     a02:	b9 f7       	brne	.-18     	; 0x9f2 <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	09 f0       	breq	.+2      	; 0xa18 <disk_initialize+0x70>
     a16:	87 c0       	rjmp	.+270    	; 0xb26 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     a18:	84 e6       	ldi	r24, 0x64	; 100
     a1a:	80 93 6a 34 	sts	0x346A, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     a1e:	88 e4       	ldi	r24, 0x48	; 72
     a20:	4a ea       	ldi	r20, 0xAA	; 170
     a22:	51 e0       	ldi	r21, 0x01	; 1
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     a2c:	81 30       	cpi	r24, 0x01	; 1
     a2e:	09 f0       	breq	.+2      	; 0xa32 <disk_initialize+0x8a>
     a30:	53 c0       	rjmp	.+166    	; 0xad8 <disk_initialize+0x130>
     a32:	7e 01       	movw	r14, r28
     a34:	08 94       	sec
     a36:	e1 1c       	adc	r14, r1
     a38:	f1 1c       	adc	r15, r1
     a3a:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a3c:	e0 ec       	ldi	r30, 0xC0	; 192
     a3e:	f9 e0       	ldi	r31, 0x09	; 9
     a40:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     a42:	9e 01       	movw	r18, r28
     a44:	2b 5f       	subi	r18, 0xFB	; 251
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a48:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a4a:	80 91 c2 09 	lds	r24, 0x09C2
     a4e:	87 ff       	sbrs	r24, 7
     a50:	fc cf       	rjmp	.-8      	; 0xa4a <disk_initialize+0xa2>
	return SD_SPI.DATA;
     a52:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     a56:	d8 01       	movw	r26, r16
     a58:	8d 93       	st	X+, r24
     a5a:	8d 01       	movw	r16, r26
     a5c:	a2 17       	cp	r26, r18
     a5e:	b3 07       	cpc	r27, r19
     a60:	99 f7       	brne	.-26     	; 0xa48 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	09 f0       	breq	.+2      	; 0xa6a <disk_initialize+0xc2>
     a68:	5e c0       	rjmp	.+188    	; 0xb26 <disk_initialize+0x17e>
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
     a6c:	8a 3a       	cpi	r24, 0xAA	; 170
     a6e:	09 f0       	breq	.+2      	; 0xa72 <disk_initialize+0xca>
     a70:	5a c0       	rjmp	.+180    	; 0xb26 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     a72:	80 91 6a 34 	lds	r24, 0x346A
     a76:	88 23       	and	r24, r24
     a78:	49 f0       	breq	.+18     	; 0xa8c <disk_initialize+0xe4>
     a7a:	89 ee       	ldi	r24, 0xE9	; 233
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e4       	ldi	r23, 0x40	; 64
     a84:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     a88:	88 23       	and	r24, r24
     a8a:	99 f7       	brne	.-26     	; 0xa72 <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     a8c:	80 91 6a 34 	lds	r24, 0x346A
     a90:	88 23       	and	r24, r24
     a92:	09 f4       	brne	.+2      	; 0xa96 <disk_initialize+0xee>
     a94:	48 c0       	rjmp	.+144    	; 0xb26 <disk_initialize+0x17e>
     a96:	8a e7       	ldi	r24, 0x7A	; 122
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     aa4:	88 23       	and	r24, r24
     aa6:	09 f0       	breq	.+2      	; 0xaaa <disk_initialize+0x102>
     aa8:	3e c0       	rjmp	.+124    	; 0xb26 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     aaa:	e0 ec       	ldi	r30, 0xC0	; 192
     aac:	f9 e0       	ldi	r31, 0x09	; 9
     aae:	9f ef       	ldi	r25, 0xFF	; 255
     ab0:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ab2:	80 91 c2 09 	lds	r24, 0x09C2
     ab6:	87 ff       	sbrs	r24, 7
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <disk_initialize+0x10a>
	return SD_SPI.DATA;
     aba:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     abe:	d7 01       	movw	r26, r14
     ac0:	8d 93       	st	X+, r24
     ac2:	7d 01       	movw	r14, r26
     ac4:	a0 17       	cp	r26, r16
     ac6:	b1 07       	cpc	r27, r17
     ac8:	99 f7       	brne	.-26     	; 0xab0 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	86 fd       	sbrc	r24, 6
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <disk_initialize+0x12c>
     ad0:	14 e0       	ldi	r17, 0x04	; 4
     ad2:	2a c0       	rjmp	.+84     	; 0xb28 <disk_initialize+0x180>
     ad4:	1c e0       	ldi	r17, 0x0C	; 12
     ad6:	28 c0       	rjmp	.+80     	; 0xb28 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     ad8:	89 ee       	ldi	r24, 0xE9	; 233
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	18 f0       	brcs	.+6      	; 0xaf0 <disk_initialize+0x148>
     aea:	01 e4       	ldi	r16, 0x41	; 65
     aec:	11 e0       	ldi	r17, 0x01	; 1
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <disk_initialize+0x14c>
     af0:	09 ee       	ldi	r16, 0xE9	; 233
     af2:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     af4:	80 91 6a 34 	lds	r24, 0x346A
     af8:	88 23       	and	r24, r24
     afa:	49 f0       	breq	.+18     	; 0xb0e <disk_initialize+0x166>
     afc:	80 2f       	mov	r24, r16
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     b0a:	88 23       	and	r24, r24
     b0c:	99 f7       	brne	.-26     	; 0xaf4 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     b0e:	80 91 6a 34 	lds	r24, 0x346A
     b12:	88 23       	and	r24, r24
     b14:	41 f0       	breq	.+16     	; 0xb26 <disk_initialize+0x17e>
     b16:	80 e5       	ldi	r24, 0x50	; 80
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	52 e0       	ldi	r21, 0x02	; 2
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     b24:	81 11       	cpse	r24, r1
     b26:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     b28:	10 93 6c 34 	sts	0x346C, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     b2c:	80 e1       	ldi	r24, 0x10	; 16
     b2e:	e0 e6       	ldi	r30, 0x60	; 96
     b30:	f6 e0       	ldi	r31, 0x06	; 6
     b32:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	e0 ec       	ldi	r30, 0xC0	; 192
     b38:	f9 e0       	ldi	r31, 0x09	; 9
     b3a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b3c:	80 91 c2 09 	lds	r24, 0x09C2
     b40:	87 ff       	sbrs	r24, 7
     b42:	fc cf       	rjmp	.-8      	; 0xb3c <disk_initialize+0x194>
	return SD_SPI.DATA;
     b44:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     b48:	11 23       	and	r17, r17
     b4a:	41 f0       	breq	.+16     	; 0xb5c <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     b4c:	80 91 a4 33 	lds	r24, 0x33A4
     b50:	8e 7f       	andi	r24, 0xFE	; 254
     b52:	80 93 a4 33 	sts	0x33A4, r24
		FCLK_FAST();
     b56:	80 ed       	ldi	r24, 0xD0	; 208
     b58:	80 93 c0 09 	sts	0x09C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     b5c:	80 91 a4 33 	lds	r24, 0x33A4
}
     b60:	24 96       	adiw	r28, 0x04	; 4
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	08 95       	ret

00000b74 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     b74:	88 23       	and	r24, r24
     b76:	11 f0       	breq	.+4      	; 0xb7c <disk_status+0x8>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	08 95       	ret
	return Stat;
     b7c:	80 91 a4 33 	lds	r24, 0x33A4
}
     b80:	08 95       	ret

00000b82 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     b82:	0f 93       	push	r16
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     b8a:	88 23       	and	r24, r24
     b8c:	09 f0       	breq	.+2      	; 0xb90 <disk_read+0xe>
     b8e:	53 c0       	rjmp	.+166    	; 0xc36 <disk_read+0xb4>
     b90:	00 23       	and	r16, r16
     b92:	09 f4       	brne	.+2      	; 0xb96 <disk_read+0x14>
     b94:	50 c0       	rjmp	.+160    	; 0xc36 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     b96:	80 91 a4 33 	lds	r24, 0x33A4
     b9a:	80 ff       	sbrs	r24, 0
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <disk_read+0x20>
     b9e:	03 e0       	ldi	r16, 0x03	; 3
     ba0:	4b c0       	rjmp	.+150    	; 0xc38 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     ba2:	80 91 6c 34 	lds	r24, 0x346C
     ba6:	83 fd       	sbrc	r24, 3
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <disk_read+0x36>
     baa:	69 e0       	ldi	r22, 0x09	; 9
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	44 1f       	adc	r20, r20
     bb2:	55 1f       	adc	r21, r21
     bb4:	6a 95       	dec	r22
     bb6:	d1 f7       	brne	.-12     	; 0xbac <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     bb8:	01 30       	cpi	r16, 0x01	; 1
     bba:	89 f4       	brne	.+34     	; 0xbde <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     bbc:	81 e5       	ldi	r24, 0x51	; 81
     bbe:	ba 01       	movw	r22, r20
     bc0:	a9 01       	movw	r20, r18
     bc2:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     bc6:	88 23       	and	r24, r24
     bc8:	21 f5       	brne	.+72     	; 0xc12 <disk_read+0x90>
     bca:	ce 01       	movw	r24, r28
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	72 e0       	ldi	r23, 0x02	; 2
     bd0:	0e 94 97 03 	call	0x72e	; 0x72e <rcvr_datablock>
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	88 23       	and	r24, r24
     bd8:	e1 f4       	brne	.+56     	; 0xc12 <disk_read+0x90>
     bda:	01 e0       	ldi	r16, 0x01	; 1
     bdc:	1a c0       	rjmp	.+52     	; 0xc12 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     bde:	82 e5       	ldi	r24, 0x52	; 82
     be0:	ba 01       	movw	r22, r20
     be2:	a9 01       	movw	r20, r18
     be4:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     be8:	88 23       	and	r24, r24
     bea:	99 f4       	brne	.+38     	; 0xc12 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     bec:	ce 01       	movw	r24, r28
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	0e 94 97 03 	call	0x72e	; 0x72e <rcvr_datablock>
     bf6:	88 23       	and	r24, r24
     bf8:	29 f0       	breq	.+10     	; 0xc04 <disk_read+0x82>
				buff += 512;
			} while (--count);
     bfa:	01 50       	subi	r16, 0x01	; 1
     bfc:	19 f0       	breq	.+6      	; 0xc04 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     bfe:	c0 50       	subi	r28, 0x00	; 0
     c00:	de 4f       	sbci	r29, 0xFE	; 254
     c02:	f4 cf       	rjmp	.-24     	; 0xbec <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     c04:	8c e4       	ldi	r24, 0x4C	; 76
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	e0 e6       	ldi	r30, 0x60	; 96
     c16:	f6 e0       	ldi	r31, 0x06	; 6
     c18:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f9 e0       	ldi	r31, 0x09	; 9
     c20:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c22:	80 91 c2 09 	lds	r24, 0x09C2
     c26:	87 ff       	sbrs	r24, 7
     c28:	fc cf       	rjmp	.-8      	; 0xc22 <disk_read+0xa0>
	return SD_SPI.DATA;
     c2a:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     c2e:	00 23       	and	r16, r16
     c30:	19 f0       	breq	.+6      	; 0xc38 <disk_read+0xb6>
     c32:	01 e0       	ldi	r16, 0x01	; 1
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <disk_read+0xb6>
     c36:	04 e0       	ldi	r16, 0x04	; 4
}
     c38:	80 2f       	mov	r24, r16
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	eb 01       	movw	r28, r22
     c52:	69 01       	movw	r12, r18
     c54:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     c56:	88 23       	and	r24, r24
     c58:	09 f0       	breq	.+2      	; 0xc5c <disk_write+0x1a>
     c5a:	61 c0       	rjmp	.+194    	; 0xd1e <disk_write+0xdc>
     c5c:	00 23       	and	r16, r16
     c5e:	09 f4       	brne	.+2      	; 0xc62 <disk_write+0x20>
     c60:	5e c0       	rjmp	.+188    	; 0xd1e <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     c62:	80 91 a4 33 	lds	r24, 0x33A4
     c66:	80 ff       	sbrs	r24, 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <disk_write+0x2c>
     c6a:	03 e0       	ldi	r16, 0x03	; 3
     c6c:	59 c0       	rjmp	.+178    	; 0xd20 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     c6e:	80 91 a4 33 	lds	r24, 0x33A4
     c72:	82 ff       	sbrs	r24, 2
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <disk_write+0x38>
     c76:	02 e0       	ldi	r16, 0x02	; 2
     c78:	53 c0       	rjmp	.+166    	; 0xd20 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     c7a:	80 91 6c 34 	lds	r24, 0x346C
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	83 fd       	sbrc	r24, 3
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <disk_write+0x50>
     c84:	79 e0       	ldi	r23, 0x09	; 9
     c86:	cc 0c       	add	r12, r12
     c88:	dd 1c       	adc	r13, r13
     c8a:	ee 1c       	adc	r14, r14
     c8c:	ff 1c       	adc	r15, r15
     c8e:	7a 95       	dec	r23
     c90:	d1 f7       	brne	.-12     	; 0xc86 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     c92:	01 30       	cpi	r16, 0x01	; 1
     c94:	69 f4       	brne	.+26     	; 0xcb0 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     c96:	88 e5       	ldi	r24, 0x58	; 88
     c98:	b7 01       	movw	r22, r14
     c9a:	a6 01       	movw	r20, r12
     c9c:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     ca0:	88 23       	and	r24, r24
     ca2:	59 f5       	brne	.+86     	; 0xcfa <disk_write+0xb8>
     ca4:	ce 01       	movw	r24, r28
     ca6:	6e ef       	ldi	r22, 0xFE	; 254
     ca8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xmit_datablock>
     cac:	00 e0       	ldi	r16, 0x00	; 0
     cae:	22 c0       	rjmp	.+68     	; 0xcf4 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     cb0:	86 70       	andi	r24, 0x06	; 6
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	89 2b       	or	r24, r25
     cb6:	39 f0       	breq	.+14     	; 0xcc6 <disk_write+0x84>
     cb8:	40 2f       	mov	r20, r16
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	87 ed       	ldi	r24, 0xD7	; 215
     cc2:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     cc6:	89 e5       	ldi	r24, 0x59	; 89
     cc8:	b7 01       	movw	r22, r14
     cca:	a6 01       	movw	r20, r12
     ccc:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     cd0:	88 23       	and	r24, r24
     cd2:	99 f4       	brne	.+38     	; 0xcfa <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     cd4:	ce 01       	movw	r24, r28
     cd6:	6c ef       	ldi	r22, 0xFC	; 252
     cd8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xmit_datablock>
     cdc:	88 23       	and	r24, r24
     cde:	29 f0       	breq	.+10     	; 0xcea <disk_write+0xa8>
				buff += 512;
			} while (--count);
     ce0:	01 50       	subi	r16, 0x01	; 1
     ce2:	19 f0       	breq	.+6      	; 0xcea <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     ce4:	c0 50       	subi	r28, 0x00	; 0
     ce6:	de 4f       	sbci	r29, 0xFE	; 254
     ce8:	f5 cf       	rjmp	.-22     	; 0xcd4 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	6d ef       	ldi	r22, 0xFD	; 253
     cf0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xmit_datablock>
     cf4:	88 23       	and	r24, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <disk_write+0xb8>
     cf8:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     cfa:	80 e1       	ldi	r24, 0x10	; 16
     cfc:	e0 e6       	ldi	r30, 0x60	; 96
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	e0 ec       	ldi	r30, 0xC0	; 192
     d06:	f9 e0       	ldi	r31, 0x09	; 9
     d08:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d0a:	80 91 c2 09 	lds	r24, 0x09C2
     d0e:	87 ff       	sbrs	r24, 7
     d10:	fc cf       	rjmp	.-8      	; 0xd0a <disk_write+0xc8>
	return SD_SPI.DATA;
     d12:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     d16:	00 23       	and	r16, r16
     d18:	19 f0       	breq	.+6      	; 0xd20 <disk_write+0xde>
     d1a:	01 e0       	ldi	r16, 0x01	; 1
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <disk_write+0xde>
     d1e:	04 e0       	ldi	r16, 0x04	; 4
}
     d20:	80 2f       	mov	r24, r16
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	08 95       	ret

00000d32 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	60 97       	sbiw	r28, 0x10	; 16
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     d48:	88 23       	and	r24, r24
     d4a:	09 f0       	breq	.+2      	; 0xd4e <disk_ioctl+0x1c>
     d4c:	b8 c1       	rjmp	.+880    	; 0x10be <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     d4e:	64 30       	cpi	r22, 0x04	; 4
     d50:	01 f5       	brne	.+64     	; 0xd92 <disk_ioctl+0x60>
		switch (*ptr) {
     d52:	fa 01       	movw	r30, r20
     d54:	80 81       	ld	r24, Z
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	39 f0       	breq	.+14     	; 0xd68 <disk_ioctl+0x36>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <disk_ioctl+0x2e>
     d5e:	b1 c1       	rjmp	.+866    	; 0x10c2 <disk_ioctl+0x390>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	09 f0       	breq	.+2      	; 0xd66 <disk_ioctl+0x34>
     d64:	ac c1       	rjmp	.+856    	; 0x10be <disk_ioctl+0x38c>
     d66:	11 c0       	rjmp	.+34     	; 0xd8a <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     d68:	e0 e6       	ldi	r30, 0x60	; 96
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	80 eb       	ldi	r24, 0xB0	; 176
     d6e:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     d70:	88 e3       	ldi	r24, 0x38	; 56
     d72:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     d74:	14 82       	std	Z+4, r1	; 0x04
     d76:	8c e2       	ldi	r24, 0x2C	; 44
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	20 e7       	ldi	r18, 0x70	; 112
     d7c:	31 e0       	ldi	r19, 0x01	; 1
     d7e:	f9 01       	movw	r30, r18
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d86:	d9 f7       	brne	.-10     	; 0xd7e <disk_ioctl+0x4c>
     d88:	9c c1       	rjmp	.+824    	; 0x10c2 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	fa 01       	movw	r30, r20
     d8e:	81 83       	std	Z+1, r24	; 0x01
     d90:	98 c1       	rjmp	.+816    	; 0x10c2 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     d92:	80 91 a4 33 	lds	r24, 0x33A4
     d96:	80 ff       	sbrs	r24, 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <disk_ioctl+0x6c>
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	93 c1       	rjmp	.+806    	; 0x10c4 <disk_ioctl+0x392>

		switch (ctrl) {
     d9e:	6a 30       	cpi	r22, 0x0A	; 10
     da0:	09 f4       	brne	.+2      	; 0xda4 <disk_ioctl+0x72>
     da2:	2f c1       	rjmp	.+606    	; 0x1002 <disk_ioctl+0x2d0>
     da4:	6b 30       	cpi	r22, 0x0B	; 11
     da6:	50 f4       	brcc	.+20     	; 0xdbc <disk_ioctl+0x8a>
     da8:	61 30       	cpi	r22, 0x01	; 1
     daa:	51 f1       	breq	.+84     	; 0xe00 <disk_ioctl+0xce>
     dac:	61 30       	cpi	r22, 0x01	; 1
     dae:	a0 f0       	brcs	.+40     	; 0xdd8 <disk_ioctl+0xa6>
     db0:	62 30       	cpi	r22, 0x02	; 2
     db2:	09 f4       	brne	.+2      	; 0xdb6 <disk_ioctl+0x84>
     db4:	86 c0       	rjmp	.+268    	; 0xec2 <disk_ioctl+0x190>
     db6:	63 30       	cpi	r22, 0x03	; 3
     db8:	69 f4       	brne	.+26     	; 0xdd4 <disk_ioctl+0xa2>
     dba:	89 c0       	rjmp	.+274    	; 0xece <disk_ioctl+0x19c>
     dbc:	6c 30       	cpi	r22, 0x0C	; 12
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <disk_ioctl+0x90>
     dc0:	27 c1       	rjmp	.+590    	; 0x1010 <disk_ioctl+0x2de>
     dc2:	6c 30       	cpi	r22, 0x0C	; 12
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <disk_ioctl+0x96>
     dc6:	22 c1       	rjmp	.+580    	; 0x100c <disk_ioctl+0x2da>
     dc8:	6d 30       	cpi	r22, 0x0D	; 13
     dca:	09 f4       	brne	.+2      	; 0xdce <disk_ioctl+0x9c>
     dcc:	2e c1       	rjmp	.+604    	; 0x102a <disk_ioctl+0x2f8>
     dce:	6e 30       	cpi	r22, 0x0E	; 14
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <disk_ioctl+0xa2>
     dd2:	4a c1       	rjmp	.+660    	; 0x1068 <disk_ioctl+0x336>
     dd4:	94 e0       	ldi	r25, 0x04	; 4
     dd6:	64 c1       	rjmp	.+712    	; 0x10a0 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     dd8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <select>
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <disk_ioctl+0xb0>
     de0:	5e c1       	rjmp	.+700    	; 0x109e <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     de2:	80 e1       	ldi	r24, 0x10	; 16
     de4:	e0 e6       	ldi	r30, 0x60	; 96
     de6:	f6 e0       	ldi	r31, 0x06	; 6
     de8:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	e0 ec       	ldi	r30, 0xC0	; 192
     dee:	f9 e0       	ldi	r31, 0x09	; 9
     df0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     df2:	80 91 c2 09 	lds	r24, 0x09C2
     df6:	87 ff       	sbrs	r24, 7
     df8:	fc cf       	rjmp	.-8      	; 0xdf2 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     dfa:	80 91 c3 09 	lds	r24, 0x09C3
     dfe:	ff c0       	rjmp	.+510    	; 0xffe <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     e00:	89 e4       	ldi	r24, 0x49	; 73
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     e0e:	88 23       	and	r24, r24
     e10:	09 f0       	breq	.+2      	; 0xe14 <disk_ioctl+0xe2>
     e12:	45 c1       	rjmp	.+650    	; 0x109e <disk_ioctl+0x36c>
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	60 e1       	ldi	r22, 0x10	; 16
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	0e 94 97 03 	call	0x72e	; 0x72e <rcvr_datablock>
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <disk_ioctl+0xf4>
     e24:	3c c1       	rjmp	.+632    	; 0x109e <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	82 95       	swap	r24
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	83 70       	andi	r24, 0x03	; 3
     e30:	7a 85       	ldd	r23, Y+10	; 0x0a
     e32:	49 85       	ldd	r20, Y+9	; 0x09
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	89 f4       	brne	.+34     	; 0xe5a <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
     e38:	87 2f       	mov	r24, r23
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	34 2f       	mov	r19, r20
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	a0 e0       	ldi	r26, 0x00	; 0
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	2a e0       	ldi	r18, 0x0A	; 10
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	aa 1f       	adc	r26, r26
     e52:	bb 1f       	adc	r27, r27
     e54:	2a 95       	dec	r18
     e56:	d1 f7       	brne	.-12     	; 0xe4c <disk_ioctl+0x11a>
     e58:	cd c0       	rjmp	.+410    	; 0xff4 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     e5a:	42 95       	swap	r20
     e5c:	46 95       	lsr	r20
     e5e:	46 95       	lsr	r20
     e60:	43 70       	andi	r20, 0x03	; 3
     e62:	28 85       	ldd	r18, Y+8	; 0x08
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	22 0f       	add	r18, r18
     e6c:	33 1f       	adc	r19, r19
     e6e:	24 0f       	add	r18, r20
     e70:	31 1d       	adc	r19, r1
     e72:	2f 5f       	subi	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	83 70       	andi	r24, 0x03	; 3
     e7c:	90 70       	andi	r25, 0x00	; 0
     e7e:	98 2f       	mov	r25, r24
     e80:	88 27       	eor	r24, r24
     e82:	99 0f       	add	r25, r25
     e84:	99 0f       	add	r25, r25
     e86:	28 0f       	add	r18, r24
     e88:	39 1f       	adc	r19, r25
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	8e 81       	ldd	r24, Y+6	; 0x06
     e90:	8f 70       	andi	r24, 0x0F	; 15
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	66 1f       	adc	r22, r22
     e96:	66 27       	eor	r22, r22
     e98:	66 1f       	adc	r22, r22
     e9a:	86 0f       	add	r24, r22
     e9c:	8e 5f       	subi	r24, 0xFE	; 254
     e9e:	73 70       	andi	r23, 0x03	; 3
     ea0:	77 0f       	add	r23, r23
     ea2:	87 0f       	add	r24, r23
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	09 97       	sbiw	r24, 0x09	; 9
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <disk_ioctl+0x180>
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	44 1f       	adc	r20, r20
     eb0:	55 1f       	adc	r21, r21
     eb2:	8a 95       	dec	r24
     eb4:	d2 f7       	brpl	.-12     	; 0xeaa <disk_ioctl+0x178>
     eb6:	f8 01       	movw	r30, r16
     eb8:	20 83       	st	Z, r18
     eba:	31 83       	std	Z+1, r19	; 0x01
     ebc:	42 83       	std	Z+2, r20	; 0x02
     ebe:	53 83       	std	Z+3, r21	; 0x03
     ec0:	9e c0       	rjmp	.+316    	; 0xffe <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	fa 01       	movw	r30, r20
     ec8:	80 83       	st	Z, r24
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	98 c0       	rjmp	.+304    	; 0xffe <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
     ece:	80 91 6c 34 	lds	r24, 0x346C
     ed2:	f8 2e       	mov	r15, r24
     ed4:	82 ff       	sbrs	r24, 2
     ed6:	39 c0       	rjmp	.+114    	; 0xf4a <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     ed8:	8d ec       	ldi	r24, 0xCD	; 205
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     ee6:	88 23       	and	r24, r24
     ee8:	09 f0       	breq	.+2      	; 0xeec <disk_ioctl+0x1ba>
     eea:	d9 c0       	rjmp	.+434    	; 0x109e <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	e0 ec       	ldi	r30, 0xC0	; 192
     ef0:	f9 e0       	ldi	r31, 0x09	; 9
     ef2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ef4:	80 91 c2 09 	lds	r24, 0x09C2
     ef8:	87 ff       	sbrs	r24, 7
     efa:	fc cf       	rjmp	.-8      	; 0xef4 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
     efc:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	60 e1       	ldi	r22, 0x10	; 16
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	0e 94 97 03 	call	0x72e	; 0x72e <rcvr_datablock>
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <disk_ioctl+0x1e0>
     f10:	c6 c0       	rjmp	.+396    	; 0x109e <disk_ioctl+0x36c>
     f12:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     f14:	e0 ec       	ldi	r30, 0xC0	; 192
     f16:	f9 e0       	ldi	r31, 0x09	; 9
     f18:	2f ef       	ldi	r18, 0xFF	; 255
     f1a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     f1c:	80 91 c2 09 	lds	r24, 0x09C2
     f20:	87 ff       	sbrs	r24, 7
     f22:	fc cf       	rjmp	.-8      	; 0xf1c <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
     f24:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
     f28:	91 50       	subi	r25, 0x01	; 1
     f2a:	b9 f7       	brne	.-18     	; 0xf1a <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     f2c:	2b 85       	ldd	r18, Y+11	; 0x0b
     f2e:	22 95       	swap	r18
     f30:	2f 70       	andi	r18, 0x0F	; 15
     f32:	80 e1       	ldi	r24, 0x10	; 16
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <disk_ioctl+0x212>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	aa 1f       	adc	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	2a 95       	dec	r18
     f46:	d2 f7       	brpl	.-12     	; 0xf3c <disk_ioctl+0x20a>
     f48:	55 c0       	rjmp	.+170    	; 0xff4 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     f4a:	89 e4       	ldi	r24, 0x49	; 73
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
     f58:	88 23       	and	r24, r24
     f5a:	09 f0       	breq	.+2      	; 0xf5e <disk_ioctl+0x22c>
     f5c:	a0 c0       	rjmp	.+320    	; 0x109e <disk_ioctl+0x36c>
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	60 e1       	ldi	r22, 0x10	; 16
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	0e 94 97 03 	call	0x72e	; 0x72e <rcvr_datablock>
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <disk_ioctl+0x23e>
     f6e:	97 c0       	rjmp	.+302    	; 0x109e <disk_ioctl+0x36c>
     f70:	4b 85       	ldd	r20, Y+11	; 0x0b
     f72:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
     f74:	f1 fe       	sbrs	r15, 1
     f76:	1b c0       	rjmp	.+54     	; 0xfae <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     f78:	88 1f       	adc	r24, r24
     f7a:	88 27       	eor	r24, r24
     f7c:	88 1f       	adc	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	24 2f       	mov	r18, r20
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	2f 73       	andi	r18, 0x3F	; 63
     f88:	30 70       	andi	r19, 0x00	; 0
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	2e 85       	ldd	r18, Y+14	; 0x0e
     f94:	22 95       	swap	r18
     f96:	26 95       	lsr	r18
     f98:	26 95       	lsr	r18
     f9a:	23 70       	andi	r18, 0x03	; 3
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	30 40       	sbci	r19, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <disk_ioctl+0x276>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <disk_ioctl+0x272>
     fac:	21 c0       	rjmp	.+66     	; 0xff0 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	23 70       	andi	r18, 0x03	; 3
     fb4:	30 70       	andi	r19, 0x00	; 0
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	22 0f       	add	r18, r18
     fba:	33 1f       	adc	r19, r19
     fbc:	fa 95       	dec	r31
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <disk_ioctl+0x286>
     fc0:	82 95       	swap	r24
     fc2:	86 95       	lsr	r24
     fc4:	87 70       	andi	r24, 0x07	; 7
     fc6:	28 0f       	add	r18, r24
     fc8:	31 1d       	adc	r19, r1
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	84 2f       	mov	r24, r20
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	8c 77       	andi	r24, 0x7C	; 124
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	95 95       	asr	r25
     fdc:	87 95       	ror	r24
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	ac 01       	movw	r20, r24
     fe2:	24 9f       	mul	r18, r20
     fe4:	c0 01       	movw	r24, r0
     fe6:	25 9f       	mul	r18, r21
     fe8:	90 0d       	add	r25, r0
     fea:	34 9f       	mul	r19, r20
     fec:	90 0d       	add	r25, r0
     fee:	11 24       	eor	r1, r1
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 83       	st	Z, r24
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	a2 83       	std	Z+2, r26	; 0x02
     ffc:	b3 83       	std	Z+3, r27	; 0x03
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	4f c0       	rjmp	.+158    	; 0x10a0 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    1002:	80 91 6c 34 	lds	r24, 0x346C
    1006:	fa 01       	movw	r30, r20
    1008:	80 83       	st	Z, r24
    100a:	f9 cf       	rjmp	.-14     	; 0xffe <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    100c:	89 e4       	ldi	r24, 0x49	; 73
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1010:	8a e4       	ldi	r24, 0x4A	; 74
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
    101e:	88 23       	and	r24, r24
    1020:	f1 f5       	brne	.+124    	; 0x109e <disk_ioctl+0x36c>
    1022:	c8 01       	movw	r24, r16
    1024:	60 e1       	ldi	r22, 0x10	; 16
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	35 c0       	rjmp	.+106    	; 0x1094 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    102a:	8a e7       	ldi	r24, 0x7A	; 122
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
    1038:	88 23       	and	r24, r24
    103a:	89 f5       	brne	.+98     	; 0x109e <disk_ioctl+0x36c>
    103c:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    103e:	a0 ec       	ldi	r26, 0xC0	; 192
    1040:	b9 e0       	ldi	r27, 0x09	; 9
    1042:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1044:	98 01       	movw	r18, r16
    1046:	2d 5f       	subi	r18, 0xFD	; 253
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	9c 93       	st	X, r25
    104e:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1050:	80 91 c2 09 	lds	r24, 0x09C2
    1054:	87 ff       	sbrs	r24, 7
    1056:	fc cf       	rjmp	.-8      	; 0x1050 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1058:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    105c:	80 83       	st	Z, r24
    105e:	e2 17       	cp	r30, r18
    1060:	f3 07       	cpc	r31, r19
    1062:	69 f2       	breq	.-102    	; 0xffe <disk_ioctl+0x2cc>
    1064:	31 96       	adiw	r30, 0x01	; 1
    1066:	f1 cf       	rjmp	.-30     	; 0x104a <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1068:	8d ec       	ldi	r24, 0xCD	; 205
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	0e 94 48 04 	call	0x890	; 0x890 <send_cmd>
    1076:	88 23       	and	r24, r24
    1078:	91 f4       	brne	.+36     	; 0x109e <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	e0 ec       	ldi	r30, 0xC0	; 192
    107e:	f9 e0       	ldi	r31, 0x09	; 9
    1080:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1082:	80 91 c2 09 	lds	r24, 0x09C2
    1086:	87 ff       	sbrs	r24, 7
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    108a:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    108e:	c8 01       	movw	r24, r16
    1090:	60 e4       	ldi	r22, 0x40	; 64
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	0e 94 97 03 	call	0x72e	; 0x72e <rcvr_datablock>
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	88 23       	and	r24, r24
    109c:	09 f4       	brne	.+2      	; 0x10a0 <disk_ioctl+0x36e>
    109e:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    10a0:	80 e1       	ldi	r24, 0x10	; 16
    10a2:	e0 e6       	ldi	r30, 0x60	; 96
    10a4:	f6 e0       	ldi	r31, 0x06	; 6
    10a6:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	e0 ec       	ldi	r30, 0xC0	; 192
    10ac:	f9 e0       	ldi	r31, 0x09	; 9
    10ae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    10b0:	80 91 c2 09 	lds	r24, 0x09C2
    10b4:	87 ff       	sbrs	r24, 7
    10b6:	fc cf       	rjmp	.-8      	; 0x10b0 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    10b8:	80 91 c3 09 	lds	r24, 0x09C3
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <disk_ioctl+0x392>
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <disk_ioctl+0x392>
    10c2:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    10c4:	89 2f       	mov	r24, r25
    10c6:	60 96       	adiw	r28, 0x10	; 16
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	08 95       	ret

000010d8 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    10d8:	80 91 6a 34 	lds	r24, 0x346A
    if (n) Timer1 = --n;
    10dc:	88 23       	and	r24, r24
    10de:	19 f0       	breq	.+6      	; 0x10e6 <disk_timerproc+0xe>
    10e0:	81 50       	subi	r24, 0x01	; 1
    10e2:	80 93 6a 34 	sts	0x346A, r24
    n = Timer2;
    10e6:	80 91 6b 34 	lds	r24, 0x346B
    if (n) Timer2 = --n;
    10ea:	88 23       	and	r24, r24
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <disk_timerproc+0x1c>
    10ee:	81 50       	subi	r24, 0x01	; 1
    10f0:	80 93 6b 34 	sts	0x346B, r24

	s = Stat;
    10f4:	80 91 a4 33 	lds	r24, 0x33A4

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    10f8:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    10fa:	80 93 a4 33 	sts	0x33A4, r24
}
    10fe:	08 95       	ret

00001100 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	08 95       	ret

0000110a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    110a:	6f 92       	push	r6
    110c:	7f 92       	push	r7
    110e:	8f 92       	push	r8
    1110:	9f 92       	push	r9
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
    1128:	4a 01       	movw	r8, r20
    112a:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    112c:	ca a4       	ldd	r12, Y+42	; 0x2a
    112e:	db a4       	ldd	r13, Y+43	; 0x2b
    1130:	ec a4       	ldd	r14, Y+44	; 0x2c
    1132:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1134:	c4 16       	cp	r12, r20
    1136:	d5 06       	cpc	r13, r21
    1138:	e6 06       	cpc	r14, r22
    113a:	f7 06       	cpc	r15, r23
    113c:	09 f4       	brne	.+2      	; 0x1140 <move_window+0x36>
    113e:	4e c0       	rjmp	.+156    	; 0x11dc <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	88 23       	and	r24, r24
    1144:	a1 f1       	breq	.+104    	; 0x11ae <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    1146:	3e e2       	ldi	r19, 0x2E	; 46
    1148:	63 2e       	mov	r6, r19
    114a:	71 2c       	mov	r7, r1
    114c:	6c 0e       	add	r6, r28
    114e:	7d 1e       	adc	r7, r29
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	b3 01       	movw	r22, r6
    1154:	a7 01       	movw	r20, r14
    1156:	96 01       	movw	r18, r12
    1158:	01 e0       	ldi	r16, 0x01	; 1
    115a:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    115e:	88 23       	and	r24, r24
    1160:	d9 f5       	brne	.+118    	; 0x11d8 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1162:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    1164:	8e 89       	ldd	r24, Y+22	; 0x16
    1166:	9f 89       	ldd	r25, Y+23	; 0x17
    1168:	a8 8d       	ldd	r26, Y+24	; 0x18
    116a:	b9 8d       	ldd	r27, Y+25	; 0x19
    116c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    116e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1170:	48 a1       	ldd	r20, Y+32	; 0x20
    1172:	59 a1       	ldd	r21, Y+33	; 0x21
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	a4 1f       	adc	r26, r20
    117a:	b5 1f       	adc	r27, r21
    117c:	c8 16       	cp	r12, r24
    117e:	d9 06       	cpc	r13, r25
    1180:	ea 06       	cpc	r14, r26
    1182:	fb 06       	cpc	r15, r27
    1184:	a0 f4       	brcc	.+40     	; 0x11ae <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1186:	1b 81       	ldd	r17, Y+3	; 0x03
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <move_window+0xa0>
					wsect += fs->sects_fat;
    118a:	8e 89       	ldd	r24, Y+22	; 0x16
    118c:	9f 89       	ldd	r25, Y+23	; 0x17
    118e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1190:	b9 8d       	ldd	r27, Y+25	; 0x19
    1192:	c8 0e       	add	r12, r24
    1194:	d9 1e       	adc	r13, r25
    1196:	ea 1e       	adc	r14, r26
    1198:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	b3 01       	movw	r22, r6
    119e:	a7 01       	movw	r20, r14
    11a0:	96 01       	movw	r18, r12
    11a2:	01 e0       	ldi	r16, 0x01	; 1
    11a4:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    11a8:	11 50       	subi	r17, 0x01	; 1
    11aa:	12 30       	cpi	r17, 0x02	; 2
    11ac:	70 f7       	brcc	.-36     	; 0x118a <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    11ae:	81 14       	cp	r8, r1
    11b0:	91 04       	cpc	r9, r1
    11b2:	a1 04       	cpc	r10, r1
    11b4:	b1 04       	cpc	r11, r1
    11b6:	91 f0       	breq	.+36     	; 0x11dc <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    11b8:	be 01       	movw	r22, r28
    11ba:	62 5d       	subi	r22, 0xD2	; 210
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	a5 01       	movw	r20, r10
    11c2:	94 01       	movw	r18, r8
    11c4:	01 e0       	ldi	r16, 0x01	; 1
    11c6:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    11ca:	88 23       	and	r24, r24
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    11ce:	8a a6       	std	Y+42, r8	; 0x2a
    11d0:	9b a6       	std	Y+43, r9	; 0x2b
    11d2:	ac a6       	std	Y+44, r10	; 0x2c
    11d4:	bd a6       	std	Y+45, r11	; 0x2d
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <move_window+0xd4>
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	01 c0       	rjmp	.+2      	; 0x11de <move_window+0xd4>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	7f 90       	pop	r7
    11f8:	6f 90       	pop	r6
    11fa:	08 95       	ret

000011fc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    11fc:	0f 93       	push	r16
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
	if (res == FR_OK) {
    1210:	88 23       	and	r24, r24
    1212:	09 f0       	breq	.+2      	; 0x1216 <sync+0x1a>
    1214:	7e c0       	rjmp	.+252    	; 0x1312 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1216:	88 81       	ld	r24, Y
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	09 f0       	breq	.+2      	; 0x121e <sync+0x22>
    121c:	72 c0       	rjmp	.+228    	; 0x1302 <sync+0x106>
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <sync+0x2a>
    1224:	6e c0       	rjmp	.+220    	; 0x1302 <sync+0x106>
			fs->winsect = 0;
    1226:	1a a6       	std	Y+42, r1	; 0x2a
    1228:	1b a6       	std	Y+43, r1	; 0x2b
    122a:	1c a6       	std	Y+44, r1	; 0x2c
    122c:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    122e:	be 01       	movw	r22, r28
    1230:	62 5d       	subi	r22, 0xD2	; 210
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	fb 01       	movw	r30, r22
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	01 c0       	rjmp	.+2      	; 0x123e <sync+0x42>
	while (cnt--) *d++ = (char)val;
    123c:	11 92       	st	Z+, r1
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	2f ef       	ldi	r18, 0xFF	; 255
    1242:	8f 3f       	cpi	r24, 0xFF	; 255
    1244:	92 07       	cpc	r25, r18
    1246:	d1 f7       	brne	.-12     	; 0x123c <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1248:	c4 5d       	subi	r28, 0xD4	; 212
    124a:	dd 4f       	sbci	r29, 0xFD	; 253
    124c:	85 e5       	ldi	r24, 0x55	; 85
    124e:	89 93       	st	Y+, r24
    1250:	8a ea       	ldi	r24, 0xAA	; 170
    1252:	88 83       	st	Y, r24
    1254:	cd 52       	subi	r28, 0x2D	; 45
    1256:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1258:	82 e5       	ldi	r24, 0x52	; 82
    125a:	8e a7       	std	Y+46, r24	; 0x2e
    125c:	8f a7       	std	Y+47, r24	; 0x2f
    125e:	21 e6       	ldi	r18, 0x61	; 97
    1260:	28 ab       	std	Y+48, r18	; 0x30
    1262:	91 e4       	ldi	r25, 0x41	; 65
    1264:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1266:	ce 5e       	subi	r28, 0xEE	; 238
    1268:	dd 4f       	sbci	r29, 0xFD	; 253
    126a:	82 e7       	ldi	r24, 0x72	; 114
    126c:	89 93       	st	Y+, r24
    126e:	89 93       	st	Y+, r24
    1270:	99 93       	st	Y+, r25
    1272:	28 83       	st	Y, r18
    1274:	c5 51       	subi	r28, 0x15	; 21
    1276:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1278:	8e 85       	ldd	r24, Y+14	; 0x0e
    127a:	ca 5e       	subi	r28, 0xEA	; 234
    127c:	dd 4f       	sbci	r29, 0xFD	; 253
    127e:	88 83       	st	Y, r24
    1280:	c6 51       	subi	r28, 0x16	; 22
    1282:	d2 40       	sbci	r29, 0x02	; 2
    1284:	8f 85       	ldd	r24, Y+15	; 0x0f
    1286:	c9 5e       	subi	r28, 0xE9	; 233
    1288:	dd 4f       	sbci	r29, 0xFD	; 253
    128a:	88 83       	st	Y, r24
    128c:	c7 51       	subi	r28, 0x17	; 23
    128e:	d2 40       	sbci	r29, 0x02	; 2
    1290:	8e 85       	ldd	r24, Y+14	; 0x0e
    1292:	9f 85       	ldd	r25, Y+15	; 0x0f
    1294:	a8 89       	ldd	r26, Y+16	; 0x10
    1296:	b9 89       	ldd	r27, Y+17	; 0x11
    1298:	9d 01       	movw	r18, r26
    129a:	44 27       	eor	r20, r20
    129c:	55 27       	eor	r21, r21
    129e:	c8 5e       	subi	r28, 0xE8	; 232
    12a0:	dd 4f       	sbci	r29, 0xFD	; 253
    12a2:	28 83       	st	Y, r18
    12a4:	21 96       	adiw	r28, 0x01	; 1
    12a6:	8b 2f       	mov	r24, r27
    12a8:	99 27       	eor	r25, r25
    12aa:	aa 27       	eor	r26, r26
    12ac:	bb 27       	eor	r27, r27
    12ae:	88 83       	st	Y, r24
    12b0:	c9 51       	subi	r28, 0x19	; 25
    12b2:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    12b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b6:	c6 5e       	subi	r28, 0xE6	; 230
    12b8:	dd 4f       	sbci	r29, 0xFD	; 253
    12ba:	88 83       	st	Y, r24
    12bc:	ca 51       	subi	r28, 0x1A	; 26
    12be:	d2 40       	sbci	r29, 0x02	; 2
    12c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12c2:	c5 5e       	subi	r28, 0xE5	; 229
    12c4:	dd 4f       	sbci	r29, 0xFD	; 253
    12c6:	88 83       	st	Y, r24
    12c8:	cb 51       	subi	r28, 0x1B	; 27
    12ca:	d2 40       	sbci	r29, 0x02	; 2
    12cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d0:	ac 85       	ldd	r26, Y+12	; 0x0c
    12d2:	bd 85       	ldd	r27, Y+13	; 0x0d
    12d4:	9d 01       	movw	r18, r26
    12d6:	44 27       	eor	r20, r20
    12d8:	55 27       	eor	r21, r21
    12da:	c4 5e       	subi	r28, 0xE4	; 228
    12dc:	dd 4f       	sbci	r29, 0xFD	; 253
    12de:	28 83       	st	Y, r18
    12e0:	21 96       	adiw	r28, 0x01	; 1
    12e2:	8b 2f       	mov	r24, r27
    12e4:	99 27       	eor	r25, r25
    12e6:	aa 27       	eor	r26, r26
    12e8:	bb 27       	eor	r27, r27
    12ea:	88 83       	st	Y, r24
    12ec:	cd 51       	subi	r28, 0x1D	; 29
    12ee:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    12f0:	2a 89       	ldd	r18, Y+18	; 0x12
    12f2:	3b 89       	ldd	r19, Y+19	; 0x13
    12f4:	4c 89       	ldd	r20, Y+20	; 0x14
    12f6:	5d 89       	ldd	r21, Y+21	; 0x15
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	01 e0       	ldi	r16, 0x01	; 1
    12fc:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
			fs->fsi_flag = 0;
    1300:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 99 06 	call	0xd32	; 0xd32 <disk_ioctl>
    130e:	81 11       	cpse	r24, r1
    1310:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    131a:	7f 92       	push	r7
    131c:	8f 92       	push	r8
    131e:	9f 92       	push	r9
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	4c 01       	movw	r8, r24
    1336:	7a 01       	movw	r14, r20
    1338:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    133a:	42 30       	cpi	r20, 0x02	; 2
    133c:	51 05       	cpc	r21, r1
    133e:	61 05       	cpc	r22, r1
    1340:	71 05       	cpc	r23, r1
    1342:	08 f4       	brcc	.+2      	; 0x1346 <get_fat+0x2c>
    1344:	bb c0       	rjmp	.+374    	; 0x14bc <get_fat+0x1a2>
    1346:	f4 01       	movw	r30, r8
    1348:	82 8d       	ldd	r24, Z+26	; 0x1a
    134a:	93 8d       	ldd	r25, Z+27	; 0x1b
    134c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    134e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1350:	48 17       	cp	r20, r24
    1352:	59 07       	cpc	r21, r25
    1354:	6a 07       	cpc	r22, r26
    1356:	7b 07       	cpc	r23, r27
    1358:	08 f0       	brcs	.+2      	; 0x135c <get_fat+0x42>
    135a:	b0 c0       	rjmp	.+352    	; 0x14bc <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    135c:	a6 8c       	ldd	r10, Z+30	; 0x1e
    135e:	b7 8c       	ldd	r11, Z+31	; 0x1f
    1360:	c0 a0       	ldd	r12, Z+32	; 0x20
    1362:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    1364:	80 81       	ld	r24, Z
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	09 f4       	brne	.+2      	; 0x136c <get_fat+0x52>
    136a:	4d c0       	rjmp	.+154    	; 0x1406 <get_fat+0xec>
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	09 f4       	brne	.+2      	; 0x1372 <get_fat+0x58>
    1370:	68 c0       	rjmp	.+208    	; 0x1442 <get_fat+0x128>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	09 f0       	breq	.+2      	; 0x1378 <get_fat+0x5e>
    1376:	a7 c0       	rjmp	.+334    	; 0x14c6 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    1378:	ea 01       	movw	r28, r20
    137a:	d6 95       	lsr	r29
    137c:	c7 95       	ror	r28
    137e:	c4 0f       	add	r28, r20
    1380:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1382:	ae 01       	movw	r20, r28
    1384:	45 2f       	mov	r20, r21
    1386:	55 27       	eor	r21, r21
    1388:	46 95       	lsr	r20
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	4a 0d       	add	r20, r10
    1390:	5b 1d       	adc	r21, r11
    1392:	6c 1d       	adc	r22, r12
    1394:	7d 1d       	adc	r23, r13
    1396:	c4 01       	movw	r24, r8
    1398:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    139c:	88 23       	and	r24, r24
    139e:	09 f0       	breq	.+2      	; 0x13a2 <get_fat+0x88>
    13a0:	92 c0       	rjmp	.+292    	; 0x14c6 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    13a2:	fe 01       	movw	r30, r28
    13a4:	f1 70       	andi	r31, 0x01	; 1
    13a6:	e8 0d       	add	r30, r8
    13a8:	f9 1d       	adc	r31, r9
    13aa:	76 a4       	ldd	r7, Z+46	; 0x2e
    13ac:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    13ae:	ae 01       	movw	r20, r28
    13b0:	45 2f       	mov	r20, r21
    13b2:	55 27       	eor	r21, r21
    13b4:	46 95       	lsr	r20
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	4a 0d       	add	r20, r10
    13bc:	5b 1d       	adc	r21, r11
    13be:	6c 1d       	adc	r22, r12
    13c0:	7d 1d       	adc	r23, r13
    13c2:	c4 01       	movw	r24, r8
    13c4:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    13c8:	88 23       	and	r24, r24
    13ca:	09 f0       	breq	.+2      	; 0x13ce <get_fat+0xb4>
    13cc:	7c c0       	rjmp	.+248    	; 0x14c6 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    13ce:	67 2d       	mov	r22, r7
    13d0:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    13d2:	d1 70       	andi	r29, 0x01	; 1
    13d4:	c8 0d       	add	r28, r8
    13d6:	d9 1d       	adc	r29, r9
    13d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	68 2b       	or	r22, r24
    13de:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    13e0:	c7 01       	movw	r24, r14
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	89 2b       	or	r24, r25
    13e8:	39 f0       	breq	.+14     	; 0x13f8 <get_fat+0xde>
    13ea:	44 e0       	ldi	r20, 0x04	; 4
    13ec:	76 95       	lsr	r23
    13ee:	67 95       	ror	r22
    13f0:	4a 95       	dec	r20
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <get_fat+0xd2>
    13f4:	9b 01       	movw	r18, r22
    13f6:	22 c0       	rjmp	.+68     	; 0x143c <get_fat+0x122>
    13f8:	9b 01       	movw	r18, r22
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	3f 70       	andi	r19, 0x0F	; 15
    1400:	40 70       	andi	r20, 0x00	; 0
    1402:	50 70       	andi	r21, 0x00	; 0
    1404:	64 c0       	rjmp	.+200    	; 0x14ce <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    1406:	45 2f       	mov	r20, r21
    1408:	56 2f       	mov	r21, r22
    140a:	67 2f       	mov	r22, r23
    140c:	77 27       	eor	r23, r23
    140e:	4a 0d       	add	r20, r10
    1410:	5b 1d       	adc	r21, r11
    1412:	6c 1d       	adc	r22, r12
    1414:	7d 1d       	adc	r23, r13
    1416:	c4 01       	movw	r24, r8
    1418:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    141c:	88 23       	and	r24, r24
    141e:	09 f0       	breq	.+2      	; 0x1422 <get_fat+0x108>
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1422:	f7 01       	movw	r30, r14
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	f1 70       	andi	r31, 0x01	; 1
    142a:	e8 0d       	add	r30, r8
    142c:	f9 1d       	adc	r31, r9
    142e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	26 a5       	ldd	r18, Z+46	; 0x2e
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	82 2b       	or	r24, r18
    1438:	93 2b       	or	r25, r19
    143a:	9c 01       	movw	r18, r24
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	46 c0       	rjmp	.+140    	; 0x14ce <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	76 95       	lsr	r23
    1446:	67 95       	ror	r22
    1448:	57 95       	ror	r21
    144a:	47 95       	ror	r20
    144c:	9a 95       	dec	r25
    144e:	d1 f7       	brne	.-12     	; 0x1444 <get_fat+0x12a>
    1450:	4a 0d       	add	r20, r10
    1452:	5b 1d       	adc	r21, r11
    1454:	6c 1d       	adc	r22, r12
    1456:	7d 1d       	adc	r23, r13
    1458:	c4 01       	movw	r24, r8
    145a:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    145e:	88 23       	and	r24, r24
    1460:	91 f5       	brne	.+100    	; 0x14c6 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    1462:	f7 01       	movw	r30, r14
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	f1 70       	andi	r31, 0x01	; 1
    146e:	e8 0d       	add	r30, r8
    1470:	f9 1d       	adc	r31, r9
    1472:	81 a9       	ldd	r24, Z+49	; 0x31
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e0       	ldi	r26, 0x00	; 0
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	58 2f       	mov	r21, r24
    147c:	44 27       	eor	r20, r20
    147e:	33 27       	eor	r19, r19
    1480:	22 27       	eor	r18, r18
    1482:	80 a9       	ldd	r24, Z+48	; 0x30
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	dc 01       	movw	r26, r24
    148c:	99 27       	eor	r25, r25
    148e:	88 27       	eor	r24, r24
    1490:	28 2b       	or	r18, r24
    1492:	39 2b       	or	r19, r25
    1494:	4a 2b       	or	r20, r26
    1496:	5b 2b       	or	r21, r27
    1498:	86 a5       	ldd	r24, Z+46	; 0x2e
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	28 2b       	or	r18, r24
    14a2:	39 2b       	or	r19, r25
    14a4:	4a 2b       	or	r20, r26
    14a6:	5b 2b       	or	r21, r27
    14a8:	97 a5       	ldd	r25, Z+47	; 0x2f
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	28 2b       	or	r18, r24
    14b2:	39 2b       	or	r19, r25
    14b4:	4a 2b       	or	r20, r26
    14b6:	5b 2b       	or	r21, r27
    14b8:	5f 70       	andi	r21, 0x0F	; 15
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <get_fat+0x1b4>
    14bc:	21 e0       	ldi	r18, 0x01	; 1
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <get_fat+0x1b4>
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f ef       	ldi	r20, 0xFF	; 255
    14cc:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    14ce:	b9 01       	movw	r22, r18
    14d0:	ca 01       	movw	r24, r20
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	8f 90       	pop	r8
    14ea:	7f 90       	pop	r7
    14ec:	08 95       	ret

000014ee <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    14ee:	2f 92       	push	r2
    14f0:	3f 92       	push	r3
    14f2:	4f 92       	push	r4
    14f4:	5f 92       	push	r5
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	3c 01       	movw	r6, r24
    1514:	6a 01       	movw	r12, r20
    1516:	7b 01       	movw	r14, r22
    1518:	48 01       	movw	r8, r16
    151a:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    151c:	42 30       	cpi	r20, 0x02	; 2
    151e:	51 05       	cpc	r21, r1
    1520:	61 05       	cpc	r22, r1
    1522:	71 05       	cpc	r23, r1
    1524:	08 f4       	brcc	.+2      	; 0x1528 <put_fat+0x3a>
    1526:	ba c0       	rjmp	.+372    	; 0x169c <put_fat+0x1ae>
    1528:	f3 01       	movw	r30, r6
    152a:	82 8d       	ldd	r24, Z+26	; 0x1a
    152c:	93 8d       	ldd	r25, Z+27	; 0x1b
    152e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1530:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1532:	48 17       	cp	r20, r24
    1534:	59 07       	cpc	r21, r25
    1536:	6a 07       	cpc	r22, r26
    1538:	7b 07       	cpc	r23, r27
    153a:	08 f0       	brcs	.+2      	; 0x153e <put_fat+0x50>
    153c:	af c0       	rjmp	.+350    	; 0x169c <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    153e:	26 8c       	ldd	r2, Z+30	; 0x1e
    1540:	37 8c       	ldd	r3, Z+31	; 0x1f
    1542:	40 a0       	ldd	r4, Z+32	; 0x20
    1544:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    1546:	80 81       	ld	r24, Z
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	09 f4       	brne	.+2      	; 0x154e <put_fat+0x60>
    154c:	64 c0       	rjmp	.+200    	; 0x1616 <put_fat+0x128>
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	09 f4       	brne	.+2      	; 0x1554 <put_fat+0x66>
    1552:	7a c0       	rjmp	.+244    	; 0x1648 <put_fat+0x15a>
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	11 f0       	breq	.+4      	; 0x155c <put_fat+0x6e>
    1558:	22 e0       	ldi	r18, 0x02	; 2
    155a:	9c c0       	rjmp	.+312    	; 0x1694 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    155c:	ea 01       	movw	r28, r20
    155e:	d6 95       	lsr	r29
    1560:	c7 95       	ror	r28
    1562:	c4 0f       	add	r28, r20
    1564:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    1566:	ae 01       	movw	r20, r28
    1568:	45 2f       	mov	r20, r21
    156a:	55 27       	eor	r21, r21
    156c:	46 95       	lsr	r20
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	42 0d       	add	r20, r2
    1574:	53 1d       	adc	r21, r3
    1576:	64 1d       	adc	r22, r4
    1578:	75 1d       	adc	r23, r5
    157a:	c3 01       	movw	r24, r6
    157c:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    1580:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1582:	88 23       	and	r24, r24
    1584:	09 f0       	breq	.+2      	; 0x1588 <put_fat+0x9a>
    1586:	86 c0       	rjmp	.+268    	; 0x1694 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1588:	de 01       	movw	r26, r28
    158a:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    158c:	86 01       	movw	r16, r12
    158e:	01 70       	andi	r16, 0x01	; 1
    1590:	10 70       	andi	r17, 0x00	; 0
    1592:	01 15       	cp	r16, r1
    1594:	11 05       	cpc	r17, r1
    1596:	51 f0       	breq	.+20     	; 0x15ac <put_fat+0xbe>
    1598:	f3 01       	movw	r30, r6
    159a:	ea 0f       	add	r30, r26
    159c:	fb 1f       	adc	r31, r27
    159e:	86 a5       	ldd	r24, Z+46	; 0x2e
    15a0:	8f 70       	andi	r24, 0x0F	; 15
    15a2:	98 2d       	mov	r25, r8
    15a4:	92 95       	swap	r25
    15a6:	90 7f       	andi	r25, 0xF0	; 240
    15a8:	98 2b       	or	r25, r24
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <put_fat+0xc0>
    15ac:	98 2d       	mov	r25, r8
    15ae:	a6 0d       	add	r26, r6
    15b0:	b7 1d       	adc	r27, r7
    15b2:	9e 96       	adiw	r26, 0x2e	; 46
    15b4:	9c 93       	st	X, r25
			bc++;
    15b6:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	f3 01       	movw	r30, r6
    15bc:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    15be:	ae 01       	movw	r20, r28
    15c0:	45 2f       	mov	r20, r21
    15c2:	55 27       	eor	r21, r21
    15c4:	46 95       	lsr	r20
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	42 0d       	add	r20, r2
    15cc:	53 1d       	adc	r21, r3
    15ce:	64 1d       	adc	r22, r4
    15d0:	75 1d       	adc	r23, r5
    15d2:	c3 01       	movw	r24, r6
    15d4:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    15d8:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    15da:	88 23       	and	r24, r24
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <put_fat+0xf2>
    15de:	5a c0       	rjmp	.+180    	; 0x1694 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    15e0:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    15e2:	01 2b       	or	r16, r17
    15e4:	49 f0       	breq	.+18     	; 0x15f8 <put_fat+0x10a>
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	b6 94       	lsr	r11
    15ea:	a7 94       	ror	r10
    15ec:	97 94       	ror	r9
    15ee:	87 94       	ror	r8
    15f0:	6a 95       	dec	r22
    15f2:	d1 f7       	brne	.-12     	; 0x15e8 <put_fat+0xfa>
    15f4:	48 2d       	mov	r20, r8
    15f6:	0b c0       	rjmp	.+22     	; 0x160e <put_fat+0x120>
    15f8:	f3 01       	movw	r30, r6
    15fa:	ec 0f       	add	r30, r28
    15fc:	fd 1f       	adc	r31, r29
    15fe:	46 a5       	ldd	r20, Z+46	; 0x2e
    1600:	40 7f       	andi	r20, 0xF0	; 240
    1602:	bb 27       	eor	r27, r27
    1604:	ab 2d       	mov	r26, r11
    1606:	9a 2d       	mov	r25, r10
    1608:	89 2d       	mov	r24, r9
    160a:	8f 70       	andi	r24, 0x0F	; 15
    160c:	48 2b       	or	r20, r24
    160e:	c6 0d       	add	r28, r6
    1610:	d7 1d       	adc	r29, r7
    1612:	4e a7       	std	Y+46, r20	; 0x2e
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    1616:	77 27       	eor	r23, r23
    1618:	6f 2d       	mov	r22, r15
    161a:	5e 2d       	mov	r21, r14
    161c:	4d 2d       	mov	r20, r13
    161e:	42 0d       	add	r20, r2
    1620:	53 1d       	adc	r21, r3
    1622:	64 1d       	adc	r22, r4
    1624:	75 1d       	adc	r23, r5
    1626:	c3 01       	movw	r24, r6
    1628:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    162c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    162e:	88 23       	and	r24, r24
    1630:	89 f5       	brne	.+98     	; 0x1694 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    1632:	f6 01       	movw	r30, r12
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	f1 70       	andi	r31, 0x01	; 1
    163a:	e6 0d       	add	r30, r6
    163c:	f7 1d       	adc	r31, r7
    163e:	86 a6       	std	Z+46, r8	; 0x2e
    1640:	89 2d       	mov	r24, r9
    1642:	99 27       	eor	r25, r25
    1644:	87 a7       	std	Z+47, r24	; 0x2f
    1646:	26 c0       	rjmp	.+76     	; 0x1694 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    1648:	87 e0       	ldi	r24, 0x07	; 7
    164a:	76 95       	lsr	r23
    164c:	67 95       	ror	r22
    164e:	57 95       	ror	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	d1 f7       	brne	.-12     	; 0x164a <put_fat+0x15c>
    1656:	42 0d       	add	r20, r2
    1658:	53 1d       	adc	r21, r3
    165a:	64 1d       	adc	r22, r4
    165c:	75 1d       	adc	r23, r5
    165e:	c3 01       	movw	r24, r6
    1660:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    1664:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1666:	88 23       	and	r24, r24
    1668:	a9 f4       	brne	.+42     	; 0x1694 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    166a:	f6 01       	movw	r30, r12
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	f1 70       	andi	r31, 0x01	; 1
    1676:	e6 0d       	add	r30, r6
    1678:	f7 1d       	adc	r31, r7
    167a:	86 a6       	std	Z+46, r8	; 0x2e
    167c:	89 2d       	mov	r24, r9
    167e:	99 27       	eor	r25, r25
    1680:	87 a7       	std	Z+47, r24	; 0x2f
    1682:	c5 01       	movw	r24, r10
    1684:	aa 27       	eor	r26, r26
    1686:	bb 27       	eor	r27, r27
    1688:	80 ab       	std	Z+48, r24	; 0x30
    168a:	8b 2d       	mov	r24, r11
    168c:	99 27       	eor	r25, r25
    168e:	aa 27       	eor	r26, r26
    1690:	bb 27       	eor	r27, r27
    1692:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	f3 01       	movw	r30, r6
    1698:	84 83       	std	Z+4, r24	; 0x04
    169a:	01 c0       	rjmp	.+2      	; 0x169e <put_fat+0x1b0>
    169c:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    169e:	82 2f       	mov	r24, r18
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	3f 90       	pop	r3
    16c2:	2f 90       	pop	r2
    16c4:	08 95       	ret

000016c6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    16c6:	9f 92       	push	r9
    16c8:	af 92       	push	r10
    16ca:	bf 92       	push	r11
    16cc:	cf 92       	push	r12
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	7a 01       	movw	r14, r20
    16e0:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    16e2:	42 30       	cpi	r20, 0x02	; 2
    16e4:	51 05       	cpc	r21, r1
    16e6:	61 05       	cpc	r22, r1
    16e8:	71 05       	cpc	r23, r1
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <remove_chain+0x28>
    16ec:	58 c0       	rjmp	.+176    	; 0x179e <remove_chain+0xd8>
    16ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16f2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    16f4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    16f6:	48 17       	cp	r20, r24
    16f8:	59 07       	cpc	r21, r25
    16fa:	6a 07       	cpc	r22, r26
    16fc:	7b 07       	cpc	r23, r27
    16fe:	08 f4       	brcc	.+2      	; 0x1702 <remove_chain+0x3c>
    1700:	41 c0       	rjmp	.+130    	; 0x1784 <remove_chain+0xbe>
    1702:	4d c0       	rjmp	.+154    	; 0x179e <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1704:	ce 01       	movw	r24, r28
    1706:	b8 01       	movw	r22, r16
    1708:	a7 01       	movw	r20, r14
    170a:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    170e:	5b 01       	movw	r10, r22
    1710:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1712:	61 15       	cp	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	81 05       	cpc	r24, r1
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <remove_chain+0x58>
    171c:	42 c0       	rjmp	.+132    	; 0x17a2 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	a8 16       	cp	r10, r24
    1722:	b1 04       	cpc	r11, r1
    1724:	c1 04       	cpc	r12, r1
    1726:	d1 04       	cpc	r13, r1
    1728:	d1 f1       	breq	.+116    	; 0x179e <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    172a:	2f ef       	ldi	r18, 0xFF	; 255
    172c:	a2 16       	cp	r10, r18
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	b2 06       	cpc	r11, r18
    1732:	2f ef       	ldi	r18, 0xFF	; 255
    1734:	c2 06       	cpc	r12, r18
    1736:	2f ef       	ldi	r18, 0xFF	; 255
    1738:	d2 06       	cpc	r13, r18
    173a:	11 f4       	brne	.+4      	; 0x1740 <remove_chain+0x7a>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	32 c0       	rjmp	.+100    	; 0x17a4 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1740:	ce 01       	movw	r24, r28
    1742:	b8 01       	movw	r22, r16
    1744:	a7 01       	movw	r20, r14
    1746:	00 e0       	ldi	r16, 0x00	; 0
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <put_fat>
			if (res != FR_OK) break;
    1752:	88 23       	and	r24, r24
    1754:	39 f5       	brne	.+78     	; 0x17a4 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1756:	8e 85       	ldd	r24, Y+14	; 0x0e
    1758:	9f 85       	ldd	r25, Y+15	; 0x0f
    175a:	a8 89       	ldd	r26, Y+16	; 0x10
    175c:	b9 89       	ldd	r27, Y+17	; 0x11
    175e:	8f 3f       	cpi	r24, 0xFF	; 255
    1760:	2f ef       	ldi	r18, 0xFF	; 255
    1762:	92 07       	cpc	r25, r18
    1764:	2f ef       	ldi	r18, 0xFF	; 255
    1766:	a2 07       	cpc	r26, r18
    1768:	2f ef       	ldi	r18, 0xFF	; 255
    176a:	b2 07       	cpc	r27, r18
    176c:	41 f0       	breq	.+16     	; 0x177e <remove_chain+0xb8>
				fs->free_clust++;
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	a1 1d       	adc	r26, r1
    1772:	b1 1d       	adc	r27, r1
    1774:	8e 87       	std	Y+14, r24	; 0x0e
    1776:	9f 87       	std	Y+15, r25	; 0x0f
    1778:	a8 8b       	std	Y+16, r26	; 0x10
    177a:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    177c:	9d 82       	std	Y+5, r9	; 0x05
    177e:	86 01       	movw	r16, r12
    1780:	75 01       	movw	r14, r10
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <remove_chain+0xc2>
    1784:	99 24       	eor	r9, r9
    1786:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1788:	8a 8d       	ldd	r24, Y+26	; 0x1a
    178a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    178c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    178e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1790:	e8 16       	cp	r14, r24
    1792:	f9 06       	cpc	r15, r25
    1794:	0a 07       	cpc	r16, r26
    1796:	1b 07       	cpc	r17, r27
    1798:	08 f4       	brcc	.+2      	; 0x179c <remove_chain+0xd6>
    179a:	b4 cf       	rjmp	.-152    	; 0x1704 <remove_chain+0x3e>
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <remove_chain+0xdc>
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <remove_chain+0xde>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	08 95       	ret

000017bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    17bc:	2f 92       	push	r2
    17be:	3f 92       	push	r3
    17c0:	4f 92       	push	r4
    17c2:	5f 92       	push	r5
    17c4:	6f 92       	push	r6
    17c6:	7f 92       	push	r7
    17c8:	8f 92       	push	r8
    17ca:	9f 92       	push	r9
    17cc:	af 92       	push	r10
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <create_chain+0x26>
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	1c 01       	movw	r2, r24
    17ea:	2a 01       	movw	r4, r20
    17ec:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    17ee:	dc 01       	movw	r26, r24
    17f0:	5a 96       	adiw	r26, 0x1a	; 26
    17f2:	8d 91       	ld	r24, X+
    17f4:	9d 91       	ld	r25, X+
    17f6:	0d 90       	ld	r0, X+
    17f8:	bc 91       	ld	r27, X
    17fa:	a0 2d       	mov	r26, r0
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	ab 83       	std	Y+3, r26	; 0x03
    1802:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1804:	41 15       	cp	r20, r1
    1806:	51 05       	cpc	r21, r1
    1808:	61 05       	cpc	r22, r1
    180a:	71 05       	cpc	r23, r1
    180c:	81 f4       	brne	.+32     	; 0x182e <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    180e:	f1 01       	movw	r30, r2
    1810:	82 84       	ldd	r8, Z+10	; 0x0a
    1812:	93 84       	ldd	r9, Z+11	; 0x0b
    1814:	a4 84       	ldd	r10, Z+12	; 0x0c
    1816:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1818:	81 14       	cp	r8, r1
    181a:	91 04       	cpc	r9, r1
    181c:	a1 04       	cpc	r10, r1
    181e:	b1 04       	cpc	r11, r1
    1820:	11 f1       	breq	.+68     	; 0x1866 <create_chain+0xaa>
    1822:	88 16       	cp	r8, r24
    1824:	99 06       	cpc	r9, r25
    1826:	aa 06       	cpc	r10, r26
    1828:	bb 06       	cpc	r11, r27
    182a:	e8 f4       	brcc	.+58     	; 0x1866 <create_chain+0xaa>
    182c:	21 c0       	rjmp	.+66     	; 0x1870 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    182e:	c1 01       	movw	r24, r2
    1830:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    1834:	9b 01       	movw	r18, r22
    1836:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1838:	62 30       	cpi	r22, 0x02	; 2
    183a:	71 05       	cpc	r23, r1
    183c:	81 05       	cpc	r24, r1
    183e:	91 05       	cpc	r25, r1
    1840:	28 f4       	brcc	.+10     	; 0x184c <create_chain+0x90>
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	93 c0       	rjmp	.+294    	; 0x1972 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	ab 81       	ldd	r26, Y+3	; 0x03
    1852:	bc 81       	ldd	r27, Y+4	; 0x04
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	4a 07       	cpc	r20, r26
    185a:	5b 07       	cpc	r21, r27
    185c:	08 f4       	brcc	.+2      	; 0x1860 <create_chain+0xa4>
    185e:	89 c0       	rjmp	.+274    	; 0x1972 <create_chain+0x1b6>
    1860:	53 01       	movw	r10, r6
    1862:	42 01       	movw	r8, r4
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <create_chain+0xb4>
    1866:	b1 e0       	ldi	r27, 0x01	; 1
    1868:	8b 2e       	mov	r8, r27
    186a:	91 2c       	mov	r9, r1
    186c:	a1 2c       	mov	r10, r1
    186e:	b1 2c       	mov	r11, r1
    1870:	75 01       	movw	r14, r10
    1872:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1874:	08 94       	sec
    1876:	c1 1c       	adc	r12, r1
    1878:	d1 1c       	adc	r13, r1
    187a:	e1 1c       	adc	r14, r1
    187c:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	ab 81       	ldd	r26, Y+3	; 0x03
    1884:	bc 81       	ldd	r27, Y+4	; 0x04
    1886:	c8 16       	cp	r12, r24
    1888:	d9 06       	cpc	r13, r25
    188a:	ea 06       	cpc	r14, r26
    188c:	fb 06       	cpc	r15, r27
    188e:	60 f0       	brcs	.+24     	; 0x18a8 <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1890:	92 e0       	ldi	r25, 0x02	; 2
    1892:	89 16       	cp	r8, r25
    1894:	91 04       	cpc	r9, r1
    1896:	a1 04       	cpc	r10, r1
    1898:	b1 04       	cpc	r11, r1
    189a:	08 f4       	brcc	.+2      	; 0x189e <create_chain+0xe2>
    189c:	61 c0       	rjmp	.+194    	; 0x1960 <create_chain+0x1a4>
    189e:	a2 e0       	ldi	r26, 0x02	; 2
    18a0:	ca 2e       	mov	r12, r26
    18a2:	d1 2c       	mov	r13, r1
    18a4:	e1 2c       	mov	r14, r1
    18a6:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    18a8:	c1 01       	movw	r24, r2
    18aa:	b7 01       	movw	r22, r14
    18ac:	a6 01       	movw	r20, r12
    18ae:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    18b6:	61 15       	cp	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	81 05       	cpc	r24, r1
    18bc:	91 05       	cpc	r25, r1
    18be:	a9 f0       	breq	.+42     	; 0x18ea <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    18c0:	6f 3f       	cpi	r22, 0xFF	; 255
    18c2:	af ef       	ldi	r26, 0xFF	; 255
    18c4:	7a 07       	cpc	r23, r26
    18c6:	af ef       	ldi	r26, 0xFF	; 255
    18c8:	8a 07       	cpc	r24, r26
    18ca:	af ef       	ldi	r26, 0xFF	; 255
    18cc:	9a 07       	cpc	r25, r26
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <create_chain+0x116>
    18d0:	50 c0       	rjmp	.+160    	; 0x1972 <create_chain+0x1b6>
    18d2:	61 30       	cpi	r22, 0x01	; 1
    18d4:	71 05       	cpc	r23, r1
    18d6:	81 05       	cpc	r24, r1
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <create_chain+0x122>
    18dc:	4a c0       	rjmp	.+148    	; 0x1972 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    18de:	c8 14       	cp	r12, r8
    18e0:	d9 04       	cpc	r13, r9
    18e2:	ea 04       	cpc	r14, r10
    18e4:	fb 04       	cpc	r15, r11
    18e6:	31 f6       	brne	.-116    	; 0x1874 <create_chain+0xb8>
    18e8:	3b c0       	rjmp	.+118    	; 0x1960 <create_chain+0x1a4>
    18ea:	bc 2c       	mov	r11, r12
    18ec:	ad 2c       	mov	r10, r13
    18ee:	9e 2c       	mov	r9, r14
    18f0:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    18f2:	c1 01       	movw	r24, r2
    18f4:	a6 01       	movw	r20, r12
    18f6:	b7 01       	movw	r22, r14
    18f8:	0f ef       	ldi	r16, 0xFF	; 255
    18fa:	1f ef       	ldi	r17, 0xFF	; 255
    18fc:	2f ef       	ldi	r18, 0xFF	; 255
    18fe:	3f e0       	ldi	r19, 0x0F	; 15
    1900:	0e 94 77 0a 	call	0x14ee	; 0x14ee <put_fat>
    1904:	88 23       	and	r24, r24
    1906:	89 f5       	brne	.+98     	; 0x196a <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1908:	41 14       	cp	r4, r1
    190a:	51 04       	cpc	r5, r1
    190c:	61 04       	cpc	r6, r1
    190e:	71 04       	cpc	r7, r1
    1910:	49 f0       	breq	.+18     	; 0x1924 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1912:	c1 01       	movw	r24, r2
    1914:	b3 01       	movw	r22, r6
    1916:	a2 01       	movw	r20, r4
    1918:	86 01       	movw	r16, r12
    191a:	97 01       	movw	r18, r14
    191c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <put_fat>
    1920:	88 23       	and	r24, r24
    1922:	19 f5       	brne	.+70     	; 0x196a <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1924:	f1 01       	movw	r30, r2
    1926:	b2 86       	std	Z+10, r11	; 0x0a
    1928:	a3 86       	std	Z+11, r10	; 0x0b
    192a:	94 86       	std	Z+12, r9	; 0x0c
    192c:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    192e:	86 85       	ldd	r24, Z+14	; 0x0e
    1930:	97 85       	ldd	r25, Z+15	; 0x0f
    1932:	a0 89       	ldd	r26, Z+16	; 0x10
    1934:	b1 89       	ldd	r27, Z+17	; 0x11
    1936:	8f 3f       	cpi	r24, 0xFF	; 255
    1938:	ff ef       	ldi	r31, 0xFF	; 255
    193a:	9f 07       	cpc	r25, r31
    193c:	ff ef       	ldi	r31, 0xFF	; 255
    193e:	af 07       	cpc	r26, r31
    1940:	ff ef       	ldi	r31, 0xFF	; 255
    1942:	bf 07       	cpc	r27, r31
    1944:	51 f0       	breq	.+20     	; 0x195a <create_chain+0x19e>
		fs->free_clust--;
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	a1 09       	sbc	r26, r1
    194a:	b1 09       	sbc	r27, r1
    194c:	f1 01       	movw	r30, r2
    194e:	86 87       	std	Z+14, r24	; 0x0e
    1950:	97 87       	std	Z+15, r25	; 0x0f
    1952:	a0 8b       	std	Z+16, r26	; 0x10
    1954:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	85 83       	std	Z+5, r24	; 0x05
    195a:	a7 01       	movw	r20, r14
    195c:	96 01       	movw	r18, r12
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <create_chain+0x1b6>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	04 c0       	rjmp	.+8      	; 0x1972 <create_chain+0x1b6>
    196a:	2f ef       	ldi	r18, 0xFF	; 255
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f ef       	ldi	r20, 0xFF	; 255
    1970:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1972:	b9 01       	movw	r22, r18
    1974:	ca 01       	movw	r24, r20
    1976:	24 96       	adiw	r28, 0x04	; 4
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	9f 90       	pop	r9
    1992:	8f 90       	pop	r8
    1994:	7f 90       	pop	r7
    1996:	6f 90       	pop	r6
    1998:	5f 90       	pop	r5
    199a:	4f 90       	pop	r4
    199c:	3f 90       	pop	r3
    199e:	2f 90       	pop	r2
    19a0:	08 95       	ret

000019a2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	ec 01       	movw	r28, r24
    19b0:	7a 01       	movw	r14, r20
    19b2:	8b 01       	movw	r16, r22
	clst -= 2;
    19b4:	8e ef       	ldi	r24, 0xFE	; 254
    19b6:	9f ef       	ldi	r25, 0xFF	; 255
    19b8:	af ef       	ldi	r26, 0xFF	; 255
    19ba:	bf ef       	ldi	r27, 0xFF	; 255
    19bc:	e8 0e       	add	r14, r24
    19be:	f9 1e       	adc	r15, r25
    19c0:	0a 1f       	adc	r16, r26
    19c2:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    19c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19c8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    19ca:	bd 8d       	ldd	r27, Y+29	; 0x1d
    19cc:	02 97       	sbiw	r24, 0x02	; 2
    19ce:	a1 09       	sbc	r26, r1
    19d0:	b1 09       	sbc	r27, r1
    19d2:	e8 16       	cp	r14, r24
    19d4:	f9 06       	cpc	r15, r25
    19d6:	0a 07       	cpc	r16, r26
    19d8:	1b 07       	cpc	r17, r27
    19da:	28 f0       	brcs	.+10     	; 0x19e6 <clust2sect+0x44>
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	12 c0       	rjmp	.+36     	; 0x1a0a <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    19e6:	2a 81       	ldd	r18, Y+2	; 0x02
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	c8 01       	movw	r24, r16
    19f0:	b7 01       	movw	r22, r14
    19f2:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    19f6:	9b 01       	movw	r18, r22
    19f8:	ac 01       	movw	r20, r24
    19fa:	8e a1       	ldd	r24, Y+38	; 0x26
    19fc:	9f a1       	ldd	r25, Y+39	; 0x27
    19fe:	a8 a5       	ldd	r26, Y+40	; 0x28
    1a00:	b9 a5       	ldd	r27, Y+41	; 0x29
    1a02:	28 0f       	add	r18, r24
    1a04:	39 1f       	adc	r19, r25
    1a06:	4a 1f       	adc	r20, r26
    1a08:	5b 1f       	adc	r21, r27
}
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	08 95       	ret

00001a1c <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	5c 01       	movw	r10, r24
    1a32:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1a34:	dc 01       	movw	r26, r24
    1a36:	14 96       	adiw	r26, 0x04	; 4
    1a38:	6d 93       	st	X+, r22
    1a3a:	7c 93       	st	X, r23
    1a3c:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1a3e:	16 96       	adiw	r26, 0x06	; 6
    1a40:	4d 91       	ld	r20, X+
    1a42:	5d 91       	ld	r21, X+
    1a44:	6d 91       	ld	r22, X+
    1a46:	7c 91       	ld	r23, X
    1a48:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1a4a:	41 30       	cpi	r20, 0x01	; 1
    1a4c:	51 05       	cpc	r21, r1
    1a4e:	61 05       	cpc	r22, r1
    1a50:	71 05       	cpc	r23, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <dir_seek+0x3a>
    1a54:	d3 c0       	rjmp	.+422    	; 0x1bfc <dir_seek+0x1e0>
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a5e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1a60:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1a62:	48 17       	cp	r20, r24
    1a64:	59 07       	cpc	r21, r25
    1a66:	6a 07       	cpc	r22, r26
    1a68:	7b 07       	cpc	r23, r27
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <dir_seek+0x52>
    1a6c:	c7 c0       	rjmp	.+398    	; 0x1bfc <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1a6e:	41 15       	cp	r20, r1
    1a70:	51 05       	cpc	r21, r1
    1a72:	61 05       	cpc	r22, r1
    1a74:	71 05       	cpc	r23, r1
    1a76:	81 f5       	brne	.+96     	; 0x1ad8 <dir_seek+0xbc>
    1a78:	80 81       	ld	r24, Z
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	49 f4       	brne	.+18     	; 0x1a90 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1a7e:	42 a1       	ldd	r20, Z+34	; 0x22
    1a80:	53 a1       	ldd	r21, Z+35	; 0x23
    1a82:	64 a1       	ldd	r22, Z+36	; 0x24
    1a84:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1a86:	41 15       	cp	r20, r1
    1a88:	51 05       	cpc	r21, r1
    1a8a:	61 05       	cpc	r22, r1
    1a8c:	71 05       	cpc	r23, r1
    1a8e:	21 f5       	brne	.+72     	; 0x1ad8 <dir_seek+0xbc>
		dj->clust = clst;
    1a90:	f5 01       	movw	r30, r10
    1a92:	12 86       	std	Z+10, r1	; 0x0a
    1a94:	13 86       	std	Z+11, r1	; 0x0b
    1a96:	14 86       	std	Z+12, r1	; 0x0c
    1a98:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1a9a:	01 90       	ld	r0, Z+
    1a9c:	f0 81       	ld	r31, Z
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	80 85       	ldd	r24, Z+8	; 0x08
    1aa2:	91 85       	ldd	r25, Z+9	; 0x09
    1aa4:	c8 16       	cp	r12, r24
    1aa6:	d9 06       	cpc	r13, r25
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <dir_seek+0x90>
    1aaa:	a8 c0       	rjmp	.+336    	; 0x1bfc <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1aac:	c6 01       	movw	r24, r12
    1aae:	24 e0       	ldi	r18, 0x04	; 4
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	2a 95       	dec	r18
    1ab6:	e1 f7       	brne	.-8      	; 0x1ab0 <dir_seek+0x94>
    1ab8:	a0 e0       	ldi	r26, 0x00	; 0
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	22 a1       	ldd	r18, Z+34	; 0x22
    1abe:	33 a1       	ldd	r19, Z+35	; 0x23
    1ac0:	44 a1       	ldd	r20, Z+36	; 0x24
    1ac2:	55 a1       	ldd	r21, Z+37	; 0x25
    1ac4:	82 0f       	add	r24, r18
    1ac6:	93 1f       	adc	r25, r19
    1ac8:	a4 1f       	adc	r26, r20
    1aca:	b5 1f       	adc	r27, r21
    1acc:	f5 01       	movw	r30, r10
    1ace:	86 87       	std	Z+14, r24	; 0x0e
    1ad0:	97 87       	std	Z+15, r25	; 0x0f
    1ad2:	a0 8b       	std	Z+16, r26	; 0x10
    1ad4:	b1 8b       	std	Z+17, r27	; 0x11
    1ad6:	7a c0       	rjmp	.+244    	; 0x1bcc <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	08 2f       	mov	r16, r24
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	94 e0       	ldi	r25, 0x04	; 4
    1ae0:	00 0f       	add	r16, r16
    1ae2:	11 1f       	adc	r17, r17
    1ae4:	9a 95       	dec	r25
    1ae6:	e1 f7       	brne	.-8      	; 0x1ae0 <dir_seek+0xc4>
    1ae8:	24 c0       	rjmp	.+72     	; 0x1b32 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1aea:	ce 01       	movw	r24, r28
    1aec:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    1af0:	ab 01       	movw	r20, r22
    1af2:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1af4:	4f 3f       	cpi	r20, 0xFF	; 255
    1af6:	ff ef       	ldi	r31, 0xFF	; 255
    1af8:	5f 07       	cpc	r21, r31
    1afa:	ff ef       	ldi	r31, 0xFF	; 255
    1afc:	6f 07       	cpc	r22, r31
    1afe:	ff ef       	ldi	r31, 0xFF	; 255
    1b00:	7f 07       	cpc	r23, r31
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <dir_seek+0xec>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	7b c0       	rjmp	.+246    	; 0x1bfe <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1b08:	42 30       	cpi	r20, 0x02	; 2
    1b0a:	51 05       	cpc	r21, r1
    1b0c:	61 05       	cpc	r22, r1
    1b0e:	71 05       	cpc	r23, r1
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <dir_seek+0xf8>
    1b12:	74 c0       	rjmp	.+232    	; 0x1bfc <dir_seek+0x1e0>
    1b14:	d5 01       	movw	r26, r10
    1b16:	ed 91       	ld	r30, X+
    1b18:	fc 91       	ld	r31, X
    1b1a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b1c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b1e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b20:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b22:	48 17       	cp	r20, r24
    1b24:	59 07       	cpc	r21, r25
    1b26:	6a 07       	cpc	r22, r26
    1b28:	7b 07       	cpc	r23, r27
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <dir_seek+0x112>
    1b2c:	67 c0       	rjmp	.+206    	; 0x1bfc <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1b2e:	c0 1a       	sub	r12, r16
    1b30:	d1 0a       	sbc	r13, r17
    1b32:	f5 01       	movw	r30, r10
    1b34:	c0 81       	ld	r28, Z
    1b36:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1b38:	c0 16       	cp	r12, r16
    1b3a:	d1 06       	cpc	r13, r17
    1b3c:	b0 f6       	brcc	.-84     	; 0x1aea <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1b3e:	d5 01       	movw	r26, r10
    1b40:	1a 96       	adiw	r26, 0x0a	; 10
    1b42:	4d 93       	st	X+, r20
    1b44:	5d 93       	st	X+, r21
    1b46:	6d 93       	st	X+, r22
    1b48:	7c 93       	st	X, r23
    1b4a:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1b4c:	8e ef       	ldi	r24, 0xFE	; 254
    1b4e:	e8 2e       	mov	r14, r24
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	f8 2e       	mov	r15, r24
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	08 2f       	mov	r16, r24
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	18 2f       	mov	r17, r24
    1b5c:	e4 0e       	add	r14, r20
    1b5e:	f5 1e       	adc	r15, r21
    1b60:	06 1f       	adc	r16, r22
    1b62:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1b64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b66:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b68:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b6a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b6c:	02 97       	sbiw	r24, 0x02	; 2
    1b6e:	a1 09       	sbc	r26, r1
    1b70:	b1 09       	sbc	r27, r1
    1b72:	e8 16       	cp	r14, r24
    1b74:	f9 06       	cpc	r15, r25
    1b76:	0a 07       	cpc	r16, r26
    1b78:	1b 07       	cpc	r17, r27
    1b7a:	28 f0       	brcs	.+10     	; 0x1b86 <dir_seek+0x16a>
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	12 c0       	rjmp	.+36     	; 0x1baa <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1b86:	2a 81       	ldd	r18, Y+2	; 0x02
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	c8 01       	movw	r24, r16
    1b90:	b7 01       	movw	r22, r14
    1b92:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    1b96:	9b 01       	movw	r18, r22
    1b98:	ac 01       	movw	r20, r24
    1b9a:	8e a1       	ldd	r24, Y+38	; 0x26
    1b9c:	9f a1       	ldd	r25, Y+39	; 0x27
    1b9e:	a8 a5       	ldd	r26, Y+40	; 0x28
    1ba0:	b9 a5       	ldd	r27, Y+41	; 0x29
    1ba2:	28 0f       	add	r18, r24
    1ba4:	39 1f       	adc	r19, r25
    1ba6:	4a 1f       	adc	r20, r26
    1ba8:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1baa:	c6 01       	movw	r24, r12
    1bac:	04 e0       	ldi	r16, 0x04	; 4
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	0a 95       	dec	r16
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <dir_seek+0x192>
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	28 0f       	add	r18, r24
    1bbc:	39 1f       	adc	r19, r25
    1bbe:	4a 1f       	adc	r20, r26
    1bc0:	5b 1f       	adc	r21, r27
    1bc2:	f5 01       	movw	r30, r10
    1bc4:	26 87       	std	Z+14, r18	; 0x0e
    1bc6:	37 87       	std	Z+15, r19	; 0x0f
    1bc8:	40 8b       	std	Z+16, r20	; 0x10
    1bca:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1bcc:	ff e0       	ldi	r31, 0x0F	; 15
    1bce:	cf 22       	and	r12, r31
    1bd0:	dd 24       	eor	r13, r13
    1bd2:	15 e0       	ldi	r17, 0x05	; 5
    1bd4:	cc 0c       	add	r12, r12
    1bd6:	dd 1c       	adc	r13, r13
    1bd8:	1a 95       	dec	r17
    1bda:	e1 f7       	brne	.-8      	; 0x1bd4 <dir_seek+0x1b8>
    1bdc:	8e e2       	ldi	r24, 0x2E	; 46
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	c8 0e       	add	r12, r24
    1be2:	d9 1e       	adc	r13, r25
    1be4:	d5 01       	movw	r26, r10
    1be6:	8d 91       	ld	r24, X+
    1be8:	9c 91       	ld	r25, X
    1bea:	11 97       	sbiw	r26, 0x01	; 1
    1bec:	8c 0d       	add	r24, r12
    1bee:	9d 1d       	adc	r25, r13
    1bf0:	52 96       	adiw	r26, 0x12	; 18
    1bf2:	8d 93       	st	X+, r24
    1bf4:	9c 93       	st	X, r25
    1bf6:	53 97       	sbiw	r26, 0x13	; 19
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	bf 90       	pop	r11
    1c10:	af 90       	pop	r10
    1c12:	08 95       	ret

00001c14 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1c14:	4f 92       	push	r4
    1c16:	5f 92       	push	r5
    1c18:	6f 92       	push	r6
    1c1a:	7f 92       	push	r7
    1c1c:	8f 92       	push	r8
    1c1e:	9f 92       	push	r9
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
    1c36:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1c38:	6c 80       	ldd	r6, Y+4	; 0x04
    1c3a:	7d 80       	ldd	r7, Y+5	; 0x05
    1c3c:	08 94       	sec
    1c3e:	61 1c       	adc	r6, r1
    1c40:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1c42:	61 14       	cp	r6, r1
    1c44:	71 04       	cpc	r7, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <dir_next+0x36>
    1c48:	4c c1       	rjmp	.+664    	; 0x1ee2 <dir_next+0x2ce>
    1c4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c4e:	a8 89       	ldd	r26, Y+16	; 0x10
    1c50:	b9 89       	ldd	r27, Y+17	; 0x11
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	a1 05       	cpc	r26, r1
    1c56:	b1 05       	cpc	r27, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <dir_next+0x48>
    1c5a:	43 c1       	rjmp	.+646    	; 0x1ee2 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1c5c:	1f e0       	ldi	r17, 0x0F	; 15
    1c5e:	41 2e       	mov	r4, r17
    1c60:	51 2c       	mov	r5, r1
    1c62:	46 20       	and	r4, r6
    1c64:	57 20       	and	r5, r7
    1c66:	41 14       	cp	r4, r1
    1c68:	51 04       	cpc	r5, r1
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <dir_next+0x5a>
    1c6c:	27 c1       	rjmp	.+590    	; 0x1ebc <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	a1 1d       	adc	r26, r1
    1c72:	b1 1d       	adc	r27, r1
    1c74:	8e 87       	std	Y+14, r24	; 0x0e
    1c76:	9f 87       	std	Y+15, r25	; 0x0f
    1c78:	a8 8b       	std	Y+16, r26	; 0x10
    1c7a:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1c7c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c7e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c80:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c82:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c84:	e8 81       	ld	r30, Y
    1c86:	f9 81       	ldd	r31, Y+1	; 0x01
    1c88:	41 15       	cp	r20, r1
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	71 05       	cpc	r23, r1
    1c90:	39 f4       	brne	.+14     	; 0x1ca0 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1c92:	80 85       	ldd	r24, Z+8	; 0x08
    1c94:	91 85       	ldd	r25, Z+9	; 0x09
    1c96:	68 16       	cp	r6, r24
    1c98:	79 06       	cpc	r7, r25
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <dir_next+0x8a>
    1c9c:	0f c1       	rjmp	.+542    	; 0x1ebc <dir_next+0x2a8>
    1c9e:	21 c1       	rjmp	.+578    	; 0x1ee2 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	93 01       	movw	r18, r6
    1ca8:	a4 e0       	ldi	r26, 0x04	; 4
    1caa:	36 95       	lsr	r19
    1cac:	27 95       	ror	r18
    1cae:	aa 95       	dec	r26
    1cb0:	e1 f7       	brne	.-8      	; 0x1caa <dir_next+0x96>
    1cb2:	82 23       	and	r24, r18
    1cb4:	93 23       	and	r25, r19
    1cb6:	89 2b       	or	r24, r25
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <dir_next+0xa8>
    1cba:	00 c1       	rjmp	.+512    	; 0x1ebc <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1cbc:	cf 01       	movw	r24, r30
    1cbe:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    1cc2:	7b 01       	movw	r14, r22
    1cc4:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1cc6:	62 30       	cpi	r22, 0x02	; 2
    1cc8:	71 05       	cpc	r23, r1
    1cca:	81 05       	cpc	r24, r1
    1ccc:	91 05       	cpc	r25, r1
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <dir_next+0xbe>
    1cd0:	0a c1       	rjmp	.+532    	; 0x1ee6 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	e8 16       	cp	r14, r24
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	f8 06       	cpc	r15, r24
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	08 07       	cpc	r16, r24
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	18 07       	cpc	r17, r24
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <dir_next+0xd2>
    1ce4:	02 c1       	rjmp	.+516    	; 0x1eea <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1ce6:	e8 81       	ld	r30, Y
    1ce8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cea:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cec:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cee:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cf0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1cf2:	e8 16       	cp	r14, r24
    1cf4:	f9 06       	cpc	r15, r25
    1cf6:	0a 07       	cpc	r16, r26
    1cf8:	1b 07       	cpc	r17, r27
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <dir_next+0xea>
    1cfc:	a6 c0       	rjmp	.+332    	; 0x1e4a <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1cfe:	dd 20       	and	r13, r13
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <dir_next+0xf0>
    1d02:	ef c0       	rjmp	.+478    	; 0x1ee2 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1d04:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d06:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d08:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d0c:	cf 01       	movw	r24, r30
    1d0e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <create_chain>
    1d12:	7b 01       	movw	r14, r22
    1d14:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1d16:	61 15       	cp	r22, r1
    1d18:	71 05       	cpc	r23, r1
    1d1a:	81 05       	cpc	r24, r1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	11 f4       	brne	.+4      	; 0x1d24 <dir_next+0x110>
    1d20:	87 e0       	ldi	r24, 0x07	; 7
    1d22:	e4 c0       	rjmp	.+456    	; 0x1eec <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	e9 16       	cp	r14, r25
    1d28:	f1 04       	cpc	r15, r1
    1d2a:	01 05       	cpc	r16, r1
    1d2c:	11 05       	cpc	r17, r1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <dir_next+0x11e>
    1d30:	da c0       	rjmp	.+436    	; 0x1ee6 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1d32:	af ef       	ldi	r26, 0xFF	; 255
    1d34:	ea 16       	cp	r14, r26
    1d36:	af ef       	ldi	r26, 0xFF	; 255
    1d38:	fa 06       	cpc	r15, r26
    1d3a:	af ef       	ldi	r26, 0xFF	; 255
    1d3c:	0a 07       	cpc	r16, r26
    1d3e:	af ef       	ldi	r26, 0xFF	; 255
    1d40:	1a 07       	cpc	r17, r26
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <dir_next+0x132>
    1d44:	d2 c0       	rjmp	.+420    	; 0x1eea <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1d46:	88 81       	ld	r24, Y
    1d48:	99 81       	ldd	r25, Y+1	; 0x01
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    1d56:	88 23       	and	r24, r24
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <dir_next+0x148>
    1d5a:	c7 c0       	rjmp	.+398    	; 0x1eea <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1d5c:	e8 81       	ld	r30, Y
    1d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d60:	be 96       	adiw	r30, 0x2e	; 46
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	92 e0       	ldi	r25, 0x02	; 2
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1d68:	11 92       	st	Z+, r1
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	bf ef       	ldi	r27, 0xFF	; 255
    1d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d70:	9b 07       	cpc	r25, r27
    1d72:	d1 f7       	brne	.-12     	; 0x1d68 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1d74:	88 80       	ld	r8, Y
    1d76:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d78:	4e ef       	ldi	r20, 0xFE	; 254
    1d7a:	a4 2e       	mov	r10, r20
    1d7c:	4f ef       	ldi	r20, 0xFF	; 255
    1d7e:	b4 2e       	mov	r11, r20
    1d80:	4f ef       	ldi	r20, 0xFF	; 255
    1d82:	c4 2e       	mov	r12, r20
    1d84:	4f ef       	ldi	r20, 0xFF	; 255
    1d86:	d4 2e       	mov	r13, r20
    1d88:	ae 0c       	add	r10, r14
    1d8a:	bf 1c       	adc	r11, r15
    1d8c:	c0 1e       	adc	r12, r16
    1d8e:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d90:	f4 01       	movw	r30, r8
    1d92:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d94:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d96:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d98:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d9a:	02 97       	sbiw	r24, 0x02	; 2
    1d9c:	a1 09       	sbc	r26, r1
    1d9e:	b1 09       	sbc	r27, r1
    1da0:	a8 16       	cp	r10, r24
    1da2:	b9 06       	cpc	r11, r25
    1da4:	ca 06       	cpc	r12, r26
    1da6:	db 06       	cpc	r13, r27
    1da8:	28 f0       	brcs	.+10     	; 0x1db4 <dir_next+0x1a0>
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	15 c0       	rjmp	.+42     	; 0x1dde <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1db4:	d4 01       	movw	r26, r8
    1db6:	12 96       	adiw	r26, 0x02	; 2
    1db8:	2c 91       	ld	r18, X
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	c6 01       	movw	r24, r12
    1dc2:	b5 01       	movw	r22, r10
    1dc4:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    1dc8:	9b 01       	movw	r18, r22
    1dca:	ac 01       	movw	r20, r24
    1dcc:	f4 01       	movw	r30, r8
    1dce:	86 a1       	ldd	r24, Z+38	; 0x26
    1dd0:	97 a1       	ldd	r25, Z+39	; 0x27
    1dd2:	a0 a5       	ldd	r26, Z+40	; 0x28
    1dd4:	b1 a5       	ldd	r27, Z+41	; 0x29
    1dd6:	28 0f       	add	r18, r24
    1dd8:	39 1f       	adc	r19, r25
    1dda:	4a 1f       	adc	r20, r26
    1ddc:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1dde:	d4 01       	movw	r26, r8
    1de0:	9a 96       	adiw	r26, 0x2a	; 42
    1de2:	2d 93       	st	X+, r18
    1de4:	3d 93       	st	X+, r19
    1de6:	4d 93       	st	X+, r20
    1de8:	5c 93       	st	X, r21
    1dea:	9d 97       	sbiw	r26, 0x2d	; 45
    1dec:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1dee:	cc 24       	eor	r12, r12
    1df0:	c3 94       	inc	r12
    1df2:	1a c0       	rjmp	.+52     	; 0x1e28 <dir_next+0x214>
    1df4:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1df6:	88 81       	ld	r24, Y
    1df8:	99 81       	ldd	r25, Y+1	; 0x01
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <dir_next+0x1f8>
    1e0a:	6f c0       	rjmp	.+222    	; 0x1eea <dir_next+0x2d6>
						dj->fs->winsect++;
    1e0c:	e8 81       	ld	r30, Y
    1e0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e10:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e12:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e14:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1e16:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	b1 1d       	adc	r27, r1
    1e1e:	82 a7       	std	Z+42, r24	; 0x2a
    1e20:	93 a7       	std	Z+43, r25	; 0x2b
    1e22:	a4 a7       	std	Z+44, r26	; 0x2c
    1e24:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1e26:	d3 94       	inc	r13
    1e28:	e8 81       	ld	r30, Y
    1e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	d8 16       	cp	r13, r24
    1e30:	08 f3       	brcs	.-62     	; 0x1df4 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1e32:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e34:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e36:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1e38:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e3a:	8d 19       	sub	r24, r13
    1e3c:	91 09       	sbc	r25, r1
    1e3e:	a1 09       	sbc	r26, r1
    1e40:	b1 09       	sbc	r27, r1
    1e42:	82 a7       	std	Z+42, r24	; 0x2a
    1e44:	93 a7       	std	Z+43, r25	; 0x2b
    1e46:	a4 a7       	std	Z+44, r26	; 0x2c
    1e48:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1e4a:	ea 86       	std	Y+10, r14	; 0x0a
    1e4c:	fb 86       	std	Y+11, r15	; 0x0b
    1e4e:	0c 87       	std	Y+12, r16	; 0x0c
    1e50:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1e52:	c8 80       	ld	r12, Y
    1e54:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1e56:	8e ef       	ldi	r24, 0xFE	; 254
    1e58:	9f ef       	ldi	r25, 0xFF	; 255
    1e5a:	af ef       	ldi	r26, 0xFF	; 255
    1e5c:	bf ef       	ldi	r27, 0xFF	; 255
    1e5e:	e8 0e       	add	r14, r24
    1e60:	f9 1e       	adc	r15, r25
    1e62:	0a 1f       	adc	r16, r26
    1e64:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1e66:	f6 01       	movw	r30, r12
    1e68:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e6a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e6c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1e6e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1e70:	02 97       	sbiw	r24, 0x02	; 2
    1e72:	a1 09       	sbc	r26, r1
    1e74:	b1 09       	sbc	r27, r1
    1e76:	e8 16       	cp	r14, r24
    1e78:	f9 06       	cpc	r15, r25
    1e7a:	0a 07       	cpc	r16, r26
    1e7c:	1b 07       	cpc	r17, r27
    1e7e:	28 f0       	brcs	.+10     	; 0x1e8a <dir_next+0x276>
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	15 c0       	rjmp	.+42     	; 0x1eb4 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    1e8a:	d6 01       	movw	r26, r12
    1e8c:	12 96       	adiw	r26, 0x02	; 2
    1e8e:	2c 91       	ld	r18, X
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	c8 01       	movw	r24, r16
    1e98:	b7 01       	movw	r22, r14
    1e9a:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    1e9e:	9b 01       	movw	r18, r22
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	f6 01       	movw	r30, r12
    1ea4:	86 a1       	ldd	r24, Z+38	; 0x26
    1ea6:	97 a1       	ldd	r25, Z+39	; 0x27
    1ea8:	a0 a5       	ldd	r26, Z+40	; 0x28
    1eaa:	b1 a5       	ldd	r27, Z+41	; 0x29
    1eac:	28 0f       	add	r18, r24
    1eae:	39 1f       	adc	r19, r25
    1eb0:	4a 1f       	adc	r20, r26
    1eb2:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    1eb4:	2e 87       	std	Y+14, r18	; 0x0e
    1eb6:	3f 87       	std	Y+15, r19	; 0x0f
    1eb8:	48 8b       	std	Y+16, r20	; 0x10
    1eba:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    1ebc:	6c 82       	std	Y+4, r6	; 0x04
    1ebe:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1ec0:	35 e0       	ldi	r19, 0x05	; 5
    1ec2:	44 0c       	add	r4, r4
    1ec4:	55 1c       	adc	r5, r5
    1ec6:	3a 95       	dec	r19
    1ec8:	e1 f7       	brne	.-8      	; 0x1ec2 <dir_next+0x2ae>
    1eca:	8e e2       	ldi	r24, 0x2E	; 46
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	48 0e       	add	r4, r24
    1ed0:	59 1e       	adc	r5, r25
    1ed2:	88 81       	ld	r24, Y
    1ed4:	99 81       	ldd	r25, Y+1	; 0x01
    1ed6:	84 0d       	add	r24, r4
    1ed8:	95 1d       	adc	r25, r5
    1eda:	8a 8b       	std	Y+18, r24	; 0x12
    1edc:	9b 8b       	std	Y+19, r25	; 0x13
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <dir_next+0x2d8>

	return FR_OK;
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <dir_next+0x2d8>
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <dir_next+0x2d8>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	bf 90       	pop	r11
    1efe:	af 90       	pop	r10
    1f00:	9f 90       	pop	r9
    1f02:	8f 90       	pop	r8
    1f04:	7f 90       	pop	r7
    1f06:	6f 90       	pop	r6
    1f08:	5f 90       	pop	r5
    1f0a:	4f 90       	pop	r4
    1f0c:	08 95       	ret

00001f0e <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ec 01       	movw	r28, r24
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	1a c0       	rjmp	.+52     	; 0x1f4c <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    1f18:	88 81       	ld	r24, Y
    1f1a:	99 81       	ldd	r25, Y+1	; 0x01
    1f1c:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    1f20:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    1f22:	88 23       	and	r24, r24
    1f24:	f1 f4       	brne	.+60     	; 0x1f62 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1f26:	ea 89       	ldd	r30, Y+18	; 0x12
    1f28:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    1f2a:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1f2c:	88 23       	and	r24, r24
    1f2e:	09 f1       	breq	.+66     	; 0x1f72 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1f30:	85 3e       	cpi	r24, 0xE5	; 229
    1f32:	29 f0       	breq	.+10     	; 0x1f3e <dir_read+0x30>
    1f34:	8e 32       	cpi	r24, 0x2E	; 46
    1f36:	19 f0       	breq	.+6      	; 0x1f3e <dir_read+0x30>
    1f38:	83 85       	ldd	r24, Z+11	; 0x0b
    1f3a:	83 ff       	sbrs	r24, 3
    1f3c:	16 c0       	rjmp	.+44     	; 0x1f6a <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    1f3e:	ce 01       	movw	r24, r28
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <dir_next>
    1f46:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    1f48:	88 23       	and	r24, r24
    1f4a:	59 f4       	brne	.+22     	; 0x1f62 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1f4c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f4e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f50:	68 89       	ldd	r22, Y+16	; 0x10
    1f52:	79 89       	ldd	r23, Y+17	; 0x11
    1f54:	41 15       	cp	r20, r1
    1f56:	51 05       	cpc	r21, r1
    1f58:	61 05       	cpc	r22, r1
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	e9 f6       	brne	.-70     	; 0x1f18 <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1f5e:	99 23       	and	r25, r25
    1f60:	21 f0       	breq	.+8      	; 0x1f6a <dir_read+0x5c>
    1f62:	1e 86       	std	Y+14, r1	; 0x0e
    1f64:	1f 86       	std	Y+15, r1	; 0x0f
    1f66:	18 8a       	std	Y+16, r1	; 0x10
    1f68:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    1f6a:	89 2f       	mov	r24, r25
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	f6 cf       	rjmp	.-20     	; 0x1f62 <dir_read+0x54>

00001f76 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
    1f84:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    1f86:	88 23       	and	r24, r24
    1f88:	e9 f5       	brne	.+122    	; 0x2004 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1f8a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f8c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f8e:	68 89       	ldd	r22, Y+16	; 0x10
    1f90:	79 89       	ldd	r23, Y+17	; 0x11
    1f92:	88 81       	ld	r24, Y
    1f94:	99 81       	ldd	r25, Y+1	; 0x01
    1f96:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    1f9a:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    1f9c:	88 23       	and	r24, r24
    1f9e:	91 f5       	brne	.+100    	; 0x2004 <dir_register+0x8e>
			c = *dj->dir;
    1fa0:	ea 89       	ldd	r30, Y+18	; 0x12
    1fa2:	fb 89       	ldd	r31, Y+19	; 0x13
    1fa4:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    1fa6:	e5 3e       	cpi	r30, 0xE5	; 229
    1fa8:	89 f1       	breq	.+98     	; 0x200c <dir_register+0x96>
    1faa:	ee 23       	and	r30, r30
    1fac:	79 f1       	breq	.+94     	; 0x200c <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    1fae:	ce 01       	movw	r24, r28
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <dir_next>
    1fb6:	e6 cf       	rjmp	.-52     	; 0x1f84 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1fb8:	6a 89       	ldd	r22, Y+18	; 0x12
    1fba:	7b 89       	ldd	r23, Y+19	; 0x13
    1fbc:	fb 01       	movw	r30, r22
    1fbe:	80 e2       	ldi	r24, 0x20	; 32
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1fc4:	11 92       	st	Z+, r1
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	2f ef       	ldi	r18, 0xFF	; 255
    1fca:	8f 3f       	cpi	r24, 0xFF	; 255
    1fcc:	92 07       	cpc	r25, r18
    1fce:	d1 f7       	brne	.-12     	; 0x1fc4 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1fd0:	8c 89       	ldd	r24, Y+20	; 0x14
    1fd2:	9d 89       	ldd	r25, Y+21	; 0x15
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	d9 01       	movw	r26, r18
    1fd8:	fb 01       	movw	r30, r22
    1fda:	2b e0       	ldi	r18, 0x0B	; 11
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    1fe0:	8d 91       	ld	r24, X+
    1fe2:	81 93       	st	Z+, r24
    1fe4:	21 50       	subi	r18, 0x01	; 1
    1fe6:	30 40       	sbci	r19, 0x00	; 0
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	2f 3f       	cpi	r18, 0xFF	; 255
    1fec:	38 07       	cpc	r19, r24
    1fee:	c1 f7       	brne	.-16     	; 0x1fe0 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    1ff0:	ec 89       	ldd	r30, Y+20	; 0x14
    1ff2:	fd 89       	ldd	r31, Y+21	; 0x15
    1ff4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ff6:	88 71       	andi	r24, 0x18	; 24
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    1ffc:	e8 81       	ld	r30, Y
    1ffe:	f9 81       	ldd	r31, Y+1	; 0x01
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2004:	84 2f       	mov	r24, r20
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    200c:	4e 85       	ldd	r20, Y+14	; 0x0e
    200e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2010:	68 89       	ldd	r22, Y+16	; 0x10
    2012:	79 89       	ldd	r23, Y+17	; 0x11
    2014:	88 81       	ld	r24, Y
    2016:	99 81       	ldd	r25, Y+1	; 0x01
    2018:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    201c:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    201e:	88 23       	and	r24, r24
    2020:	59 f2       	breq	.-106    	; 0x1fb8 <dir_register+0x42>
    2022:	f0 cf       	rjmp	.-32     	; 0x2004 <dir_register+0x8e>

00002024 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    202a:	6c 81       	ldd	r22, Y+4	; 0x04
    202c:	7d 81       	ldd	r23, Y+5	; 0x05
    202e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
    2032:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2034:	88 23       	and	r24, r24
    2036:	99 f4       	brne	.+38     	; 0x205e <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    2038:	4e 85       	ldd	r20, Y+14	; 0x0e
    203a:	5f 85       	ldd	r21, Y+15	; 0x0f
    203c:	68 89       	ldd	r22, Y+16	; 0x10
    203e:	79 89       	ldd	r23, Y+17	; 0x11
    2040:	88 81       	ld	r24, Y
    2042:	99 81       	ldd	r25, Y+1	; 0x01
    2044:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    2048:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    204a:	88 23       	and	r24, r24
    204c:	41 f4       	brne	.+16     	; 0x205e <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    204e:	ea 89       	ldd	r30, Y+18	; 0x12
    2050:	fb 89       	ldd	r31, Y+19	; 0x13
    2052:	85 ee       	ldi	r24, 0xE5	; 229
    2054:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    2056:	e8 81       	ld	r30, Y
    2058:	f9 81       	ldd	r31, Y+1	; 0x01
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    205e:	89 2f       	mov	r24, r25
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	fc 01       	movw	r30, r24
    2074:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    2076:	eb 01       	movw	r28, r22
    2078:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    207a:	86 85       	ldd	r24, Z+14	; 0x0e
    207c:	97 85       	ldd	r25, Z+15	; 0x0f
    207e:	a0 89       	ldd	r26, Z+16	; 0x10
    2080:	b1 89       	ldd	r27, Z+17	; 0x11
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	a1 05       	cpc	r26, r1
    2086:	b1 05       	cpc	r27, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <get_fileinfo+0x26>
    208a:	71 c0       	rjmp	.+226    	; 0x216e <get_fileinfo+0x108>
		dir = dj->dir;
    208c:	62 89       	ldd	r22, Z+18	; 0x12
    208e:	73 89       	ldd	r23, Z+19	; 0x13
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2094:	fb 01       	movw	r30, r22
    2096:	e8 0f       	add	r30, r24
    2098:	f9 1f       	adc	r31, r25
    209a:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    209c:	e0 32       	cpi	r30, 0x20	; 32
    209e:	41 f0       	breq	.+16     	; 0x20b0 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    20a0:	e5 30       	cpi	r30, 0x05	; 5
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <get_fileinfo+0x40>
    20a4:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    20a6:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	88 30       	cpi	r24, 0x08	; 8
    20ac:	91 05       	cpc	r25, r1
    20ae:	91 f7       	brne	.-28     	; 0x2094 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    20b0:	db 01       	movw	r26, r22
    20b2:	18 96       	adiw	r26, 0x08	; 8
    20b4:	8c 91       	ld	r24, X
    20b6:	80 32       	cpi	r24, 0x20	; 32
    20b8:	11 f4       	brne	.+4      	; 0x20be <get_fileinfo+0x58>
    20ba:	8e 01       	movw	r16, r28
    20bc:	12 c0       	rjmp	.+36     	; 0x20e2 <get_fileinfo+0x7c>
			*p++ = '.';
    20be:	8e e2       	ldi	r24, 0x2E	; 46
    20c0:	fe 01       	movw	r30, r28
    20c2:	81 93       	st	Z+, r24
    20c4:	8f 01       	movw	r16, r30
    20c6:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    20c8:	9e 01       	movw	r18, r28
    20ca:	2c 5f       	subi	r18, 0xFC	; 252
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    20ce:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    20d0:	80 32       	cpi	r24, 0x20	; 32
    20d2:	39 f0       	breq	.+14     	; 0x20e2 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    20d4:	d8 01       	movw	r26, r16
    20d6:	8d 93       	st	X+, r24
    20d8:	8d 01       	movw	r16, r26
    20da:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    20dc:	a2 17       	cp	r26, r18
    20de:	b3 07       	cpc	r27, r19
    20e0:	b1 f7       	brne	.-20     	; 0x20ce <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    20e2:	fb 01       	movw	r30, r22
    20e4:	83 85       	ldd	r24, Z+11	; 0x0b
    20e6:	d7 01       	movw	r26, r14
    20e8:	18 96       	adiw	r26, 0x08	; 8
    20ea:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    20ec:	27 8d       	ldd	r18, Z+31	; 0x1f
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	52 2f       	mov	r21, r18
    20f6:	44 27       	eor	r20, r20
    20f8:	33 27       	eor	r19, r19
    20fa:	22 27       	eor	r18, r18
    20fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	dc 01       	movw	r26, r24
    2106:	99 27       	eor	r25, r25
    2108:	88 27       	eor	r24, r24
    210a:	28 2b       	or	r18, r24
    210c:	39 2b       	or	r19, r25
    210e:	4a 2b       	or	r20, r26
    2110:	5b 2b       	or	r21, r27
    2112:	84 8d       	ldd	r24, Z+28	; 0x1c
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	28 2b       	or	r18, r24
    211c:	39 2b       	or	r19, r25
    211e:	4a 2b       	or	r20, r26
    2120:	5b 2b       	or	r21, r27
    2122:	95 8d       	ldd	r25, Z+29	; 0x1d
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	a0 e0       	ldi	r26, 0x00	; 0
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	28 2b       	or	r18, r24
    212c:	39 2b       	or	r19, r25
    212e:	4a 2b       	or	r20, r26
    2130:	5b 2b       	or	r21, r27
    2132:	f7 01       	movw	r30, r14
    2134:	20 83       	st	Z, r18
    2136:	31 83       	std	Z+1, r19	; 0x01
    2138:	42 83       	std	Z+2, r20	; 0x02
    213a:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    213c:	db 01       	movw	r26, r22
    213e:	59 96       	adiw	r26, 0x19	; 25
    2140:	9c 91       	ld	r25, X
    2142:	59 97       	sbiw	r26, 0x19	; 25
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	58 96       	adiw	r26, 0x18	; 24
    2148:	2c 91       	ld	r18, X
    214a:	58 97       	sbiw	r26, 0x18	; 24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	82 2b       	or	r24, r18
    2150:	93 2b       	or	r25, r19
    2152:	84 83       	std	Z+4, r24	; 0x04
    2154:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2156:	57 96       	adiw	r26, 0x17	; 23
    2158:	9c 91       	ld	r25, X
    215a:	57 97       	sbiw	r26, 0x17	; 23
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	56 96       	adiw	r26, 0x16	; 22
    2160:	2c 91       	ld	r18, X
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	82 2b       	or	r24, r18
    2166:	93 2b       	or	r25, r19
    2168:	86 83       	std	Z+6, r24	; 0x06
    216a:	97 83       	std	Z+7, r25	; 0x07
    216c:	e8 01       	movw	r28, r16
	}
	*p = 0;
    216e:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	08 95       	ret

0000217e <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    217e:	5f 92       	push	r5
    2180:	6f 92       	push	r6
    2182:	7f 92       	push	r7
    2184:	8f 92       	push	r8
    2186:	9f 92       	push	r9
    2188:	af 92       	push	r10
    218a:	bf 92       	push	r11
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
    219e:	7b 01       	movw	r14, r22
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    21a2:	08 94       	sec
    21a4:	e1 1c       	adc	r14, r1
    21a6:	f1 1c       	adc	r15, r1
    21a8:	f7 01       	movw	r30, r14
    21aa:	80 81       	ld	r24, Z
    21ac:	80 32       	cpi	r24, 0x20	; 32
    21ae:	c9 f3       	breq	.-14     	; 0x21a2 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    21b0:	8f 32       	cpi	r24, 0x2F	; 47
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <follow_path+0x3a>
    21b4:	8c 35       	cpi	r24, 0x5C	; 92
    21b6:	19 f4       	brne	.+6      	; 0x21be <follow_path+0x40>
		path++;
    21b8:	08 94       	sec
    21ba:	e1 1c       	adc	r14, r1
    21bc:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    21be:	1e 82       	std	Y+6, r1	; 0x06
    21c0:	1f 82       	std	Y+7, r1	; 0x07
    21c2:	18 86       	std	Y+8, r1	; 0x08
    21c4:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    21c6:	f7 01       	movw	r30, r14
    21c8:	80 81       	ld	r24, Z
    21ca:	80 32       	cpi	r24, 0x20	; 32
    21cc:	40 f4       	brcc	.+16     	; 0x21de <follow_path+0x60>
		res = dir_seek(dj, 0);
    21ce:	ce 01       	movw	r24, r28
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
		dj->dir = NULL;
    21d8:	1a 8a       	std	Y+18, r1	; 0x12
    21da:	1b 8a       	std	Y+19, r1	; 0x13
    21dc:	13 c1       	rjmp	.+550    	; 0x2404 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    21de:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    21e0:	45 e0       	ldi	r20, 0x05	; 5
    21e2:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    21e4:	ac 89       	ldd	r26, Y+20	; 0x14
    21e6:	bd 89       	ldd	r27, Y+21	; 0x15
    21e8:	fd 01       	movw	r30, r26
    21ea:	8b e0       	ldi	r24, 0x0B	; 11
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    21f0:	01 93       	st	Z+, r16
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	2f ef       	ldi	r18, 0xFF	; 255
    21f6:	8f 3f       	cpi	r24, 0xFF	; 255
    21f8:	92 07       	cpc	r25, r18
    21fa:	d1 f7       	brne	.-12     	; 0x21f0 <follow_path+0x72>
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	cc 24       	eor	r12, r12
    2202:	dd 24       	eor	r13, r13
    2204:	38 e0       	ldi	r19, 0x08	; 8
    2206:	a3 2e       	mov	r10, r19
    2208:	b1 2c       	mov	r11, r1
    220a:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    220c:	f7 01       	movw	r30, r14
    220e:	ec 0d       	add	r30, r12
    2210:	fd 1d       	adc	r31, r13
    2212:	20 81       	ld	r18, Z
    2214:	08 94       	sec
    2216:	c1 1c       	adc	r12, r1
    2218:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    221a:	21 32       	cpi	r18, 0x21	; 33
    221c:	08 f4       	brcc	.+2      	; 0x2220 <follow_path+0xa2>
    221e:	66 c0       	rjmp	.+204    	; 0x22ec <follow_path+0x16e>
    2220:	2f 32       	cpi	r18, 0x2F	; 47
    2222:	09 f4       	brne	.+2      	; 0x2226 <follow_path+0xa8>
    2224:	ff c0       	rjmp	.+510    	; 0x2424 <follow_path+0x2a6>
    2226:	2c 35       	cpi	r18, 0x5C	; 92
    2228:	09 f4       	brne	.+2      	; 0x222c <follow_path+0xae>
    222a:	fc c0       	rjmp	.+504    	; 0x2424 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    222c:	2e 32       	cpi	r18, 0x2E	; 46
    222e:	19 f0       	breq	.+6      	; 0x2236 <follow_path+0xb8>
    2230:	4a 15       	cp	r20, r10
    2232:	5b 05       	cpc	r21, r11
    2234:	84 f0       	brlt	.+32     	; 0x2256 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2236:	88 e0       	ldi	r24, 0x08	; 8
    2238:	a8 16       	cp	r10, r24
    223a:	b1 04       	cpc	r11, r1
    223c:	09 f0       	breq	.+2      	; 0x2240 <follow_path+0xc2>
    223e:	dd c0       	rjmp	.+442    	; 0x23fa <follow_path+0x27c>
    2240:	2e 32       	cpi	r18, 0x2E	; 46
    2242:	09 f0       	breq	.+2      	; 0x2246 <follow_path+0xc8>
    2244:	da c0       	rjmp	.+436    	; 0x23fa <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    2246:	11 0f       	add	r17, r17
    2248:	11 0f       	add	r17, r17
    224a:	48 e0       	ldi	r20, 0x08	; 8
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	2b e0       	ldi	r18, 0x0B	; 11
    2250:	a2 2e       	mov	r10, r18
    2252:	b1 2c       	mov	r11, r1
    2254:	db cf       	rjmp	.-74     	; 0x220c <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    2256:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    2258:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    225a:	82 2f       	mov	r24, r18
    225c:	81 58       	subi	r24, 0x81	; 129
    225e:	8f 31       	cpi	r24, 0x1F	; 31
    2260:	18 f0       	brcs	.+6      	; 0x2268 <follow_path+0xea>
    2262:	8f 55       	subi	r24, 0x5F	; 95
    2264:	8d 31       	cpi	r24, 0x1D	; 29
    2266:	08 f5       	brcc	.+66     	; 0x22aa <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    2268:	f7 01       	movw	r30, r14
    226a:	ec 0d       	add	r30, r12
    226c:	fd 1d       	adc	r31, r13
    226e:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2270:	83 2f       	mov	r24, r19
    2272:	80 54       	subi	r24, 0x40	; 64
    2274:	8f 33       	cpi	r24, 0x3F	; 63
    2276:	20 f0       	brcs	.+8      	; 0x2280 <follow_path+0x102>
    2278:	80 54       	subi	r24, 0x40	; 64
    227a:	8d 37       	cpi	r24, 0x7D	; 125
    227c:	08 f0       	brcs	.+2      	; 0x2280 <follow_path+0x102>
    227e:	bd c0       	rjmp	.+378    	; 0x23fa <follow_path+0x27c>
    2280:	c5 01       	movw	r24, r10
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	48 17       	cp	r20, r24
    2286:	59 07       	cpc	r21, r25
    2288:	0c f0       	brlt	.+2      	; 0x228c <follow_path+0x10e>
    228a:	b7 c0       	rjmp	.+366    	; 0x23fa <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    228c:	08 94       	sec
    228e:	c1 1c       	adc	r12, r1
    2290:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2292:	fd 01       	movw	r30, r26
    2294:	e4 0f       	add	r30, r20
    2296:	f5 1f       	adc	r31, r21
    2298:	20 83       	st	Z, r18
    229a:	ca 01       	movw	r24, r20
    229c:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    229e:	fd 01       	movw	r30, r26
    22a0:	e8 0f       	add	r30, r24
    22a2:	f9 1f       	adc	r31, r25
    22a4:	30 83       	st	Z, r19
    22a6:	ac 01       	movw	r20, r24
    22a8:	1e c0       	rjmp	.+60     	; 0x22e6 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    22aa:	62 2f       	mov	r22, r18
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	e0 e0       	ldi	r30, 0x00	; 0
    22b0:	f0 e2       	ldi	r31, 0x20	; 32
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    22b4:	31 96       	adiw	r30, 0x01	; 1
    22b6:	80 81       	ld	r24, Z
    22b8:	88 23       	and	r24, r24
    22ba:	29 f0       	breq	.+10     	; 0x22c6 <follow_path+0x148>
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	86 17       	cp	r24, r22
    22c0:	97 07       	cpc	r25, r23
    22c2:	c1 f7       	brne	.-16     	; 0x22b4 <follow_path+0x136>
    22c4:	9a c0       	rjmp	.+308    	; 0x23fa <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    22c6:	82 2f       	mov	r24, r18
    22c8:	81 54       	subi	r24, 0x41	; 65
    22ca:	8a 31       	cpi	r24, 0x1A	; 26
    22cc:	10 f4       	brcc	.+4      	; 0x22d2 <follow_path+0x154>
				b |= 2;
    22ce:	12 60       	ori	r17, 0x02	; 2
    22d0:	06 c0       	rjmp	.+12     	; 0x22de <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    22d2:	82 2f       	mov	r24, r18
    22d4:	81 56       	subi	r24, 0x61	; 97
    22d6:	8a 31       	cpi	r24, 0x1A	; 26
    22d8:	10 f4       	brcc	.+4      	; 0x22de <follow_path+0x160>
					b |= 1; c -= 0x20;
    22da:	11 60       	ori	r17, 0x01	; 1
    22dc:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    22de:	fd 01       	movw	r30, r26
    22e0:	e4 0f       	add	r30, r20
    22e2:	f5 1f       	adc	r31, r21
    22e4:	20 83       	st	Z, r18
    22e6:	4f 5f       	subi	r20, 0xFF	; 255
    22e8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ea:	90 cf       	rjmp	.-224    	; 0x220c <follow_path+0x8e>
    22ec:	91 2f       	mov	r25, r17
    22ee:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    22f0:	45 2b       	or	r20, r21
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <follow_path+0x178>
    22f4:	82 c0       	rjmp	.+260    	; 0x23fa <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    22f6:	8c 91       	ld	r24, X
    22f8:	85 3e       	cpi	r24, 0xE5	; 229
    22fa:	09 f4       	brne	.+2      	; 0x22fe <follow_path+0x180>
    22fc:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    22fe:	e8 e0       	ldi	r30, 0x08	; 8
    2300:	ae 16       	cp	r10, r30
    2302:	b1 04       	cpc	r11, r1
    2304:	19 f4       	brne	.+6      	; 0x230c <follow_path+0x18e>
    2306:	91 2f       	mov	r25, r17
    2308:	99 0f       	add	r25, r25
    230a:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    230c:	29 2f       	mov	r18, r25
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	c9 01       	movw	r24, r18
    2312:	83 70       	andi	r24, 0x03	; 3
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	09 f4       	brne	.+2      	; 0x231c <follow_path+0x19e>
    231a:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    231c:	2c 70       	andi	r18, 0x0C	; 12
    231e:	30 70       	andi	r19, 0x00	; 0
    2320:	24 30       	cpi	r18, 0x04	; 4
    2322:	31 05       	cpc	r19, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <follow_path+0x1aa>
    2326:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2328:	1b 96       	adiw	r26, 0x0b	; 11
    232a:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    232c:	ce 01       	movw	r24, r28
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
    2336:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2338:	88 23       	and	r24, r24
    233a:	71 f5       	brne	.+92     	; 0x2398 <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    233c:	4e 85       	ldd	r20, Y+14	; 0x0e
    233e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2340:	68 89       	ldd	r22, Y+16	; 0x10
    2342:	79 89       	ldd	r23, Y+17	; 0x11
    2344:	88 81       	ld	r24, Y
    2346:	99 81       	ldd	r25, Y+1	; 0x01
    2348:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    234c:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    234e:	88 23       	and	r24, r24
    2350:	19 f5       	brne	.+70     	; 0x2398 <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2352:	ea 89       	ldd	r30, Y+18	; 0x12
    2354:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2356:	80 81       	ld	r24, Z
    2358:	88 23       	and	r24, r24
    235a:	11 f4       	brne	.+4      	; 0x2360 <follow_path+0x1e2>
    235c:	44 e0       	ldi	r20, 0x04	; 4
    235e:	1c c0       	rjmp	.+56     	; 0x2398 <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2360:	83 85       	ldd	r24, Z+11	; 0x0b
    2362:	83 fd       	sbrc	r24, 3
    2364:	14 c0       	rjmp	.+40     	; 0x238e <follow_path+0x210>
    2366:	df 01       	movw	r26, r30
    2368:	8c 89       	ldd	r24, Y+20	; 0x14
    236a:	9d 89       	ldd	r25, Y+21	; 0x15
    236c:	9c 01       	movw	r18, r24
    236e:	f9 01       	movw	r30, r18
    2370:	2b e0       	ldi	r18, 0x0B	; 11
    2372:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2374:	21 50       	subi	r18, 0x01	; 1
    2376:	30 40       	sbci	r19, 0x00	; 0
    2378:	8f ef       	ldi	r24, 0xFF	; 255
    237a:	2f 3f       	cpi	r18, 0xFF	; 255
    237c:	38 07       	cpc	r19, r24
    237e:	61 f0       	breq	.+24     	; 0x2398 <follow_path+0x21a>
    2380:	9c 91       	ld	r25, X
    2382:	80 81       	ld	r24, Z
    2384:	98 17       	cp	r25, r24
    2386:	19 f4       	brne	.+6      	; 0x238e <follow_path+0x210>
    2388:	11 96       	adiw	r26, 0x01	; 1
    238a:	31 96       	adiw	r30, 0x01	; 1
    238c:	f3 cf       	rjmp	.-26     	; 0x2374 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    238e:	ce 01       	movw	r24, r28
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <dir_next>
    2396:	cf cf       	rjmp	.-98     	; 0x2336 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    2398:	ec 89       	ldd	r30, Y+20	; 0x14
    239a:	fd 89       	ldd	r31, Y+21	; 0x15
    239c:	93 85       	ldd	r25, Z+11	; 0x0b
    239e:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    23a0:	44 23       	and	r20, r20
    23a2:	31 f0       	breq	.+12     	; 0x23b0 <follow_path+0x232>
    23a4:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    23a6:	44 30       	cpi	r20, 0x04	; 4
    23a8:	51 f5       	brne	.+84     	; 0x23fe <follow_path+0x280>
    23aa:	99 23       	and	r25, r25
    23ac:	51 f1       	breq	.+84     	; 0x2402 <follow_path+0x284>
    23ae:	2a c0       	rjmp	.+84     	; 0x2404 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    23b0:	99 23       	and	r25, r25
    23b2:	29 f5       	brne	.+74     	; 0x23fe <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    23b4:	ea 89       	ldd	r30, Y+18	; 0x12
    23b6:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    23b8:	83 85       	ldd	r24, Z+11	; 0x0b
    23ba:	84 ff       	sbrs	r24, 4
    23bc:	22 c0       	rjmp	.+68     	; 0x2402 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    23be:	ec 0c       	add	r14, r12
    23c0:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    23c2:	75 88       	ldd	r7, Z+21	; 0x15
    23c4:	66 24       	eor	r6, r6
    23c6:	24 89       	ldd	r18, Z+20	; 0x14
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	26 29       	or	r18, r6
    23cc:	37 29       	or	r19, r7
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	33 27       	eor	r19, r19
    23d6:	22 27       	eor	r18, r18
    23d8:	93 8c       	ldd	r9, Z+27	; 0x1b
    23da:	88 24       	eor	r8, r8
    23dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	88 29       	or	r24, r8
    23e2:	99 29       	or	r25, r9
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	28 2b       	or	r18, r24
    23ea:	39 2b       	or	r19, r25
    23ec:	4a 2b       	or	r20, r26
    23ee:	5b 2b       	or	r21, r27
    23f0:	2e 83       	std	Y+6, r18	; 0x06
    23f2:	3f 83       	std	Y+7, r19	; 0x07
    23f4:	48 87       	std	Y+8, r20	; 0x08
    23f6:	59 87       	std	Y+9, r21	; 0x09
    23f8:	f5 ce       	rjmp	.-534    	; 0x21e4 <follow_path+0x66>
		}
    23fa:	86 e0       	ldi	r24, 0x06	; 6
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <follow_path+0x286>
    23fe:	84 2f       	mov	r24, r20
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <follow_path+0x286>
    2402:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	9f 90       	pop	r9
    241a:	8f 90       	pop	r8
    241c:	7f 90       	pop	r7
    241e:	6f 90       	pop	r6
    2420:	5f 90       	pop	r5
    2422:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2424:	91 2f       	mov	r25, r17
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	63 cf       	rjmp	.-314    	; 0x22f0 <follow_path+0x172>

0000242a <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    242a:	0f 93       	push	r16
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ec 01       	movw	r28, r24
    2432:	9a 01       	movw	r18, r20
    2434:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2436:	bc 01       	movw	r22, r24
    2438:	62 5d       	subi	r22, 0xD2	; 210
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	01 e0       	ldi	r16, 0x01	; 1
    2440:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    2444:	88 23       	and	r24, r24
    2446:	11 f0       	breq	.+4      	; 0x244c <check_fs+0x22>
    2448:	63 e0       	ldi	r22, 0x03	; 3
    244a:	6d c0       	rjmp	.+218    	; 0x2526 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    244c:	c3 5d       	subi	r28, 0xD3	; 211
    244e:	dd 4f       	sbci	r29, 0xFD	; 253
    2450:	98 81       	ld	r25, Y
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	2a 91       	ld	r18, -Y
    2456:	cc 52       	subi	r28, 0x2C	; 44
    2458:	d2 40       	sbci	r29, 0x02	; 2
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	82 2b       	or	r24, r18
    245e:	93 2b       	or	r25, r19
    2460:	85 55       	subi	r24, 0x55	; 85
    2462:	9a 4a       	sbci	r25, 0xAA	; 170
    2464:	11 f0       	breq	.+4      	; 0x246a <check_fs+0x40>
    2466:	62 e0       	ldi	r22, 0x02	; 2
    2468:	5e c0       	rjmp	.+188    	; 0x2526 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    246a:	c9 59       	subi	r28, 0x99	; 153
    246c:	df 4f       	sbci	r29, 0xFF	; 255
    246e:	28 81       	ld	r18, Y
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	52 2f       	mov	r21, r18
    2478:	44 27       	eor	r20, r20
    247a:	33 27       	eor	r19, r19
    247c:	22 27       	eor	r18, r18
    247e:	8a 91       	ld	r24, -Y
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e0       	ldi	r26, 0x00	; 0
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	dc 01       	movw	r26, r24
    2488:	99 27       	eor	r25, r25
    248a:	88 27       	eor	r24, r24
    248c:	28 2b       	or	r18, r24
    248e:	39 2b       	or	r19, r25
    2490:	4a 2b       	or	r20, r26
    2492:	5b 2b       	or	r21, r27
    2494:	22 97       	sbiw	r28, 0x02	; 2
    2496:	89 91       	ld	r24, Y+
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e0       	ldi	r26, 0x00	; 0
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	28 2b       	or	r18, r24
    24a0:	39 2b       	or	r19, r25
    24a2:	4a 2b       	or	r20, r26
    24a4:	5b 2b       	or	r21, r27
    24a6:	98 81       	ld	r25, Y
    24a8:	c5 56       	subi	r28, 0x65	; 101
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	a0 e0       	ldi	r26, 0x00	; 0
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	28 2b       	or	r18, r24
    24b4:	39 2b       	or	r19, r25
    24b6:	4a 2b       	or	r20, r26
    24b8:	5b 2b       	or	r21, r27
    24ba:	50 70       	andi	r21, 0x00	; 0
    24bc:	26 54       	subi	r18, 0x46	; 70
    24be:	31 44       	sbci	r19, 0x41	; 65
    24c0:	44 45       	sbci	r20, 0x54	; 84
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	11 f4       	brne	.+4      	; 0x24ca <check_fs+0xa0>
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	2e c0       	rjmp	.+92     	; 0x2526 <check_fs+0xfc>
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	cd 57       	subi	r28, 0x7D	; 125
    24ce:	df 4f       	sbci	r29, 0xFF	; 255
    24d0:	28 81       	ld	r18, Y
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	52 2f       	mov	r21, r18
    24da:	44 27       	eor	r20, r20
    24dc:	33 27       	eor	r19, r19
    24de:	22 27       	eor	r18, r18
    24e0:	8a 91       	ld	r24, -Y
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e0       	ldi	r26, 0x00	; 0
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	dc 01       	movw	r26, r24
    24ea:	99 27       	eor	r25, r25
    24ec:	88 27       	eor	r24, r24
    24ee:	28 2b       	or	r18, r24
    24f0:	39 2b       	or	r19, r25
    24f2:	4a 2b       	or	r20, r26
    24f4:	5b 2b       	or	r21, r27
    24f6:	22 97       	sbiw	r28, 0x02	; 2
    24f8:	89 91       	ld	r24, Y+
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e0       	ldi	r26, 0x00	; 0
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	28 2b       	or	r18, r24
    2502:	39 2b       	or	r19, r25
    2504:	4a 2b       	or	r20, r26
    2506:	5b 2b       	or	r21, r27
    2508:	98 81       	ld	r25, Y
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	a0 e0       	ldi	r26, 0x00	; 0
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	28 2b       	or	r18, r24
    2512:	39 2b       	or	r19, r25
    2514:	4a 2b       	or	r20, r26
    2516:	5b 2b       	or	r21, r27
    2518:	50 70       	andi	r21, 0x00	; 0
    251a:	26 54       	subi	r18, 0x46	; 70
    251c:	31 44       	sbci	r19, 0x41	; 65
    251e:	44 45       	sbci	r20, 0x54	; 84
    2520:	50 40       	sbci	r21, 0x00	; 0
    2522:	09 f0       	breq	.+2      	; 0x2526 <check_fs+0xfc>
    2524:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2526:	86 2f       	mov	r24, r22
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2530:	6f 92       	push	r6
    2532:	7f 92       	push	r7
    2534:	8f 92       	push	r8
    2536:	9f 92       	push	r9
    2538:	af 92       	push	r10
    253a:	bf 92       	push	r11
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	fc 01       	movw	r30, r24
    254e:	9b 01       	movw	r18, r22
    2550:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2552:	a0 81       	ld	r26, Z
    2554:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2556:	8c 91       	ld	r24, X
    2558:	08 2f       	mov	r16, r24
    255a:	10 e0       	ldi	r17, 0x00	; 0
    255c:	00 53       	subi	r16, 0x30	; 48
    255e:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    2560:	0a 30       	cpi	r16, 0x0A	; 10
    2562:	11 05       	cpc	r17, r1
    2564:	68 f4       	brcc	.+26     	; 0x2580 <chk_mounted+0x50>
    2566:	11 96       	adiw	r26, 0x01	; 1
    2568:	8c 91       	ld	r24, X
    256a:	11 97       	sbiw	r26, 0x01	; 1
    256c:	8a 33       	cpi	r24, 0x3A	; 58
    256e:	41 f4       	brne	.+16     	; 0x2580 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    2570:	12 96       	adiw	r26, 0x02	; 2
    2572:	a0 83       	st	Z, r26
    2574:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2576:	02 30       	cpi	r16, 0x02	; 2
    2578:	11 05       	cpc	r17, r1
    257a:	20 f0       	brcs	.+8      	; 0x2584 <chk_mounted+0x54>
    257c:	8b e0       	ldi	r24, 0x0B	; 11
    257e:	91 c2       	rjmp	.+1314   	; 0x2aa2 <chk_mounted+0x572>
    2580:	00 e0       	ldi	r16, 0x00	; 0
    2582:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2584:	f8 01       	movw	r30, r16
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	e3 59       	subi	r30, 0x93	; 147
    258c:	fb 4c       	sbci	r31, 0xCB	; 203
    258e:	c0 81       	ld	r28, Z
    2590:	d1 81       	ldd	r29, Z+1	; 0x01
    2592:	f9 01       	movw	r30, r18
    2594:	c0 83       	st	Z, r28
    2596:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2598:	20 97       	sbiw	r28, 0x00	; 0
    259a:	11 f4       	brne	.+4      	; 0x25a0 <chk_mounted+0x70>
    259c:	8c e0       	ldi	r24, 0x0C	; 12
    259e:	81 c2       	rjmp	.+1282   	; 0x2aa2 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    25a0:	88 81       	ld	r24, Y
    25a2:	88 23       	and	r24, r24
    25a4:	79 f0       	breq	.+30     	; 0x25c4 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	88 23       	and	r24, r24
    25aa:	11 f0       	breq	.+4      	; 0x25b0 <chk_mounted+0x80>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <chk_mounted+0x84>
	return Stat;
    25b0:	80 91 a4 33 	lds	r24, 0x33A4
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    25b4:	80 fd       	sbrc	r24, 0
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    25b8:	ff 20       	and	r15, r15
    25ba:	09 f4       	brne	.+2      	; 0x25be <chk_mounted+0x8e>
    25bc:	6f c2       	rjmp	.+1246   	; 0x2a9c <chk_mounted+0x56c>
    25be:	82 fd       	sbrc	r24, 2
    25c0:	6b c2       	rjmp	.+1238   	; 0x2a98 <chk_mounted+0x568>
    25c2:	6c c2       	rjmp	.+1240   	; 0x2a9c <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    25c4:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    25c6:	f8 01       	movw	r30, r16
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	e4 5e       	subi	r30, 0xE4	; 228
    25ce:	f3 4d       	sbci	r31, 0xD3	; 211
    25d0:	80 81       	ld	r24, Z
    25d2:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    25d4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    25d8:	80 ff       	sbrs	r24, 0
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <chk_mounted+0xb0>
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	61 c2       	rjmp	.+1218   	; 0x2aa2 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    25e0:	ff 20       	and	r15, r15
    25e2:	11 f0       	breq	.+4      	; 0x25e8 <chk_mounted+0xb8>
    25e4:	82 fd       	sbrc	r24, 2
    25e6:	58 c2       	rjmp	.+1200   	; 0x2a98 <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    25e8:	ce 01       	movw	r24, r28
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	0e 94 15 12 	call	0x242a	; 0x242a <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	21 f0       	breq	.+8      	; 0x2602 <chk_mounted+0xd2>
    25fa:	aa 24       	eor	r10, r10
    25fc:	bb 24       	eor	r11, r11
    25fe:	65 01       	movw	r12, r10
    2600:	3d c0       	rjmp	.+122    	; 0x267c <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2602:	00 0f       	add	r16, r16
    2604:	11 1f       	adc	r17, r17
    2606:	04 5e       	subi	r16, 0xE4	; 228
    2608:	13 4d       	sbci	r17, 0xD3	; 211
    260a:	f8 01       	movw	r30, r16
    260c:	81 81       	ldd	r24, Z+1	; 0x01
    260e:	e8 2f       	mov	r30, r24
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	a4 e0       	ldi	r26, 0x04	; 4
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	aa 95       	dec	r26
    261a:	e1 f7       	brne	.-8      	; 0x2614 <chk_mounted+0xe4>
    261c:	e4 51       	subi	r30, 0x14	; 20
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	ec 0f       	add	r30, r28
    2622:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2624:	84 81       	ldd	r24, Z+4	; 0x04
    2626:	88 23       	and	r24, r24
    2628:	09 f4       	brne	.+2      	; 0x262c <chk_mounted+0xfc>
    262a:	3a c2       	rjmp	.+1140   	; 0x2aa0 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    262c:	83 85       	ldd	r24, Z+11	; 0x0b
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	a0 e0       	ldi	r26, 0x00	; 0
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	d8 2e       	mov	r13, r24
    2636:	cc 24       	eor	r12, r12
    2638:	bb 24       	eor	r11, r11
    263a:	aa 24       	eor	r10, r10
    263c:	82 85       	ldd	r24, Z+10	; 0x0a
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	dc 01       	movw	r26, r24
    2646:	99 27       	eor	r25, r25
    2648:	88 27       	eor	r24, r24
    264a:	a8 2a       	or	r10, r24
    264c:	b9 2a       	or	r11, r25
    264e:	ca 2a       	or	r12, r26
    2650:	db 2a       	or	r13, r27
    2652:	80 85       	ldd	r24, Z+8	; 0x08
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e0       	ldi	r26, 0x00	; 0
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	a8 2a       	or	r10, r24
    265c:	b9 2a       	or	r11, r25
    265e:	ca 2a       	or	r12, r26
    2660:	db 2a       	or	r13, r27
    2662:	91 85       	ldd	r25, Z+9	; 0x09
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	a0 e0       	ldi	r26, 0x00	; 0
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	a8 2a       	or	r10, r24
    266c:	b9 2a       	or	r11, r25
    266e:	ca 2a       	or	r12, r26
    2670:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2672:	ce 01       	movw	r24, r28
    2674:	b6 01       	movw	r22, r12
    2676:	a5 01       	movw	r20, r10
    2678:	0e 94 15 12 	call	0x242a	; 0x242a <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    267c:	83 30       	cpi	r24, 0x03	; 3
    267e:	11 f4       	brne	.+4      	; 0x2684 <chk_mounted+0x154>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	0f c2       	rjmp	.+1054   	; 0x2aa2 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2684:	88 23       	and	r24, r24
    2686:	09 f0       	breq	.+2      	; 0x268a <chk_mounted+0x15a>
    2688:	0b c2       	rjmp	.+1046   	; 0x2aa0 <chk_mounted+0x570>
    268a:	9a ad       	ldd	r25, Y+58	; 0x3a
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	29 ad       	ldd	r18, Y+57	; 0x39
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	82 2b       	or	r24, r18
    2694:	93 2b       	or	r25, r19
    2696:	80 50       	subi	r24, 0x00	; 0
    2698:	92 40       	sbci	r25, 0x02	; 2
    269a:	09 f0       	breq	.+2      	; 0x269e <chk_mounted+0x16e>
    269c:	01 c2       	rjmp	.+1026   	; 0x2aa0 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    269e:	cb 5b       	subi	r28, 0xBB	; 187
    26a0:	df 4f       	sbci	r29, 0xFF	; 255
    26a2:	98 81       	ld	r25, Y
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	2a 91       	ld	r18, -Y
    26a8:	c4 54       	subi	r28, 0x44	; 68
    26aa:	d0 40       	sbci	r29, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	82 2b       	or	r24, r18
    26b0:	93 2b       	or	r25, r19
    26b2:	7c 01       	movw	r14, r24
    26b4:	00 e0       	ldi	r16, 0x00	; 0
    26b6:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    26b8:	e1 14       	cp	r14, r1
    26ba:	f1 04       	cpc	r15, r1
    26bc:	01 05       	cpc	r16, r1
    26be:	11 05       	cpc	r17, r1
    26c0:	41 f5       	brne	.+80     	; 0x2712 <chk_mounted+0x1e2>
    26c2:	cb 5a       	subi	r28, 0xAB	; 171
    26c4:	df 4f       	sbci	r29, 0xFF	; 255
    26c6:	88 81       	ld	r24, Y
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a0 e0       	ldi	r26, 0x00	; 0
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	18 2f       	mov	r17, r24
    26d0:	00 27       	eor	r16, r16
    26d2:	ff 24       	eor	r15, r15
    26d4:	ee 24       	eor	r14, r14
    26d6:	8a 91       	ld	r24, -Y
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 e0       	ldi	r26, 0x00	; 0
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	dc 01       	movw	r26, r24
    26e0:	99 27       	eor	r25, r25
    26e2:	88 27       	eor	r24, r24
    26e4:	e8 2a       	or	r14, r24
    26e6:	f9 2a       	or	r15, r25
    26e8:	0a 2b       	or	r16, r26
    26ea:	1b 2b       	or	r17, r27
    26ec:	22 97       	sbiw	r28, 0x02	; 2
    26ee:	89 91       	ld	r24, Y+
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e8 2a       	or	r14, r24
    26f8:	f9 2a       	or	r15, r25
    26fa:	0a 2b       	or	r16, r26
    26fc:	1b 2b       	or	r17, r27
    26fe:	98 81       	ld	r25, Y
    2700:	c3 55       	subi	r28, 0x53	; 83
    2702:	d0 40       	sbci	r29, 0x00	; 0
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	a0 e0       	ldi	r26, 0x00	; 0
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e8 2a       	or	r14, r24
    270c:	f9 2a       	or	r15, r25
    270e:	0a 2b       	or	r16, r26
    2710:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    2712:	ee 8a       	std	Y+22, r14	; 0x16
    2714:	ff 8a       	std	Y+23, r15	; 0x17
    2716:	08 8f       	std	Y+24, r16	; 0x18
    2718:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    271a:	2e ad       	ldd	r18, Y+62	; 0x3e
    271c:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	c8 01       	movw	r24, r16
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    272c:	3b 01       	movw	r6, r22
    272e:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2730:	9d ad       	ldd	r25, Y+61	; 0x3d
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	2c ad       	ldd	r18, Y+60	; 0x3c
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	82 2b       	or	r24, r18
    273a:	93 2b       	or	r25, r19
    273c:	a0 e0       	ldi	r26, 0x00	; 0
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	8a 0d       	add	r24, r10
    2742:	9b 1d       	adc	r25, r11
    2744:	ac 1d       	adc	r26, r12
    2746:	bd 1d       	adc	r27, r13
    2748:	8e 8f       	std	Y+30, r24	; 0x1e
    274a:	9f 8f       	std	Y+31, r25	; 0x1f
    274c:	a8 a3       	std	Y+32, r26	; 0x20
    274e:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2750:	8b ad       	ldd	r24, Y+59	; 0x3b
    2752:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2754:	c0 5c       	subi	r28, 0xC0	; 192
    2756:	df 4f       	sbci	r29, 0xFF	; 255
    2758:	98 81       	ld	r25, Y
    275a:	c0 54       	subi	r28, 0x40	; 64
    275c:	d0 40       	sbci	r29, 0x00	; 0
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	2f ad       	ldd	r18, Y+63	; 0x3f
    2762:	42 2f       	mov	r20, r18
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	48 2b       	or	r20, r24
    2768:	59 2b       	or	r21, r25
    276a:	48 87       	std	Y+8, r20	; 0x08
    276c:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    276e:	ce 5b       	subi	r28, 0xBE	; 190
    2770:	df 4f       	sbci	r29, 0xFF	; 255
    2772:	98 81       	ld	r25, Y
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	2a 91       	ld	r18, -Y
    2778:	c1 54       	subi	r28, 0x41	; 65
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	82 2b       	or	r24, r18
    2780:	93 2b       	or	r25, r19
    2782:	7c 01       	movw	r14, r24
    2784:	00 e0       	ldi	r16, 0x00	; 0
    2786:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2788:	e1 14       	cp	r14, r1
    278a:	f1 04       	cpc	r15, r1
    278c:	01 05       	cpc	r16, r1
    278e:	11 05       	cpc	r17, r1
    2790:	41 f5       	brne	.+80     	; 0x27e2 <chk_mounted+0x2b2>
    2792:	cf 5a       	subi	r28, 0xAF	; 175
    2794:	df 4f       	sbci	r29, 0xFF	; 255
    2796:	88 81       	ld	r24, Y
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	18 2f       	mov	r17, r24
    27a0:	00 27       	eor	r16, r16
    27a2:	ff 24       	eor	r15, r15
    27a4:	ee 24       	eor	r14, r14
    27a6:	8a 91       	ld	r24, -Y
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e0       	ldi	r26, 0x00	; 0
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	dc 01       	movw	r26, r24
    27b0:	99 27       	eor	r25, r25
    27b2:	88 27       	eor	r24, r24
    27b4:	e8 2a       	or	r14, r24
    27b6:	f9 2a       	or	r15, r25
    27b8:	0a 2b       	or	r16, r26
    27ba:	1b 2b       	or	r17, r27
    27bc:	22 97       	sbiw	r28, 0x02	; 2
    27be:	89 91       	ld	r24, Y+
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e8 2a       	or	r14, r24
    27c8:	f9 2a       	or	r15, r25
    27ca:	0a 2b       	or	r16, r26
    27cc:	1b 2b       	or	r17, r27
    27ce:	98 81       	ld	r25, Y
    27d0:	cf 54       	subi	r28, 0x4F	; 79
    27d2:	d0 40       	sbci	r29, 0x00	; 0
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	a0 e0       	ldi	r26, 0x00	; 0
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e8 2a       	or	r14, r24
    27dc:	f9 2a       	or	r15, r25
    27de:	0a 2b       	or	r16, r26
    27e0:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    27e2:	9d ad       	ldd	r25, Y+61	; 0x3d
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	82 2b       	or	r24, r18
    27ec:	93 2b       	or	r25, r19
    27ee:	a0 e0       	ldi	r26, 0x00	; 0
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e8 1a       	sub	r14, r24
    27f4:	f9 0a       	sbc	r15, r25
    27f6:	0a 0b       	sbc	r16, r26
    27f8:	1b 0b       	sbc	r17, r27
    27fa:	e6 18       	sub	r14, r6
    27fc:	f7 08       	sbc	r15, r7
    27fe:	08 09       	sbc	r16, r8
    2800:	19 09       	sbc	r17, r9
    2802:	f4 e0       	ldi	r31, 0x04	; 4
    2804:	56 95       	lsr	r21
    2806:	47 95       	ror	r20
    2808:	fa 95       	dec	r31
    280a:	e1 f7       	brne	.-8      	; 0x2804 <chk_mounted+0x2d4>
    280c:	ca 01       	movw	r24, r20
    280e:	a0 e0       	ldi	r26, 0x00	; 0
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e8 1a       	sub	r14, r24
    2814:	f9 0a       	sbc	r15, r25
    2816:	0a 0b       	sbc	r16, r26
    2818:	1b 0b       	sbc	r17, r27
    281a:	2a 81       	ldd	r18, Y+2	; 0x02
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	c8 01       	movw	r24, r16
    2824:	b7 01       	movw	r22, r14
    2826:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    282a:	2e 5f       	subi	r18, 0xFE	; 254
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	4f 4f       	sbci	r20, 0xFF	; 255
    2830:	5f 4f       	sbci	r21, 0xFF	; 255
    2832:	2a 8f       	std	Y+26, r18	; 0x1a
    2834:	3b 8f       	std	Y+27, r19	; 0x1b
    2836:	4c 8f       	std	Y+28, r20	; 0x1c
    2838:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    283a:	27 3f       	cpi	r18, 0xF7	; 247
    283c:	8f e0       	ldi	r24, 0x0F	; 15
    283e:	38 07       	cpc	r19, r24
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	48 07       	cpc	r20, r24
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	58 07       	cpc	r21, r24
    2848:	10 f4       	brcc	.+4      	; 0x284e <chk_mounted+0x31e>
    284a:	11 e0       	ldi	r17, 0x01	; 1
    284c:	07 c0       	rjmp	.+14     	; 0x285c <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    284e:	27 5f       	subi	r18, 0xF7	; 247
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	40 40       	sbci	r20, 0x00	; 0
    2854:	50 40       	sbci	r21, 0x00	; 0
    2856:	08 f0       	brcs	.+2      	; 0x285a <chk_mounted+0x32a>
    2858:	33 c1       	rjmp	.+614    	; 0x2ac0 <chk_mounted+0x590>
    285a:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    285c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    285e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2860:	a8 a1       	ldd	r26, Y+32	; 0x20
    2862:	b9 a1       	ldd	r27, Y+33	; 0x21
    2864:	86 0d       	add	r24, r6
    2866:	97 1d       	adc	r25, r7
    2868:	a8 1d       	adc	r26, r8
    286a:	b9 1d       	adc	r27, r9
    286c:	8a a3       	std	Y+34, r24	; 0x22
    286e:	9b a3       	std	Y+35, r25	; 0x23
    2870:	ac a3       	std	Y+36, r26	; 0x24
    2872:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2874:	88 85       	ldd	r24, Y+8	; 0x08
    2876:	99 85       	ldd	r25, Y+9	; 0x09
    2878:	e4 e0       	ldi	r30, 0x04	; 4
    287a:	96 95       	lsr	r25
    287c:	87 95       	ror	r24
    287e:	ea 95       	dec	r30
    2880:	e1 f7       	brne	.-8      	; 0x287a <chk_mounted+0x34a>
    2882:	a0 e0       	ldi	r26, 0x00	; 0
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2888:	3f 8d       	ldd	r19, Y+31	; 0x1f
    288a:	48 a1       	ldd	r20, Y+32	; 0x20
    288c:	59 a1       	ldd	r21, Y+33	; 0x21
    288e:	82 0f       	add	r24, r18
    2890:	93 1f       	adc	r25, r19
    2892:	a4 1f       	adc	r26, r20
    2894:	b5 1f       	adc	r27, r21
    2896:	86 0d       	add	r24, r6
    2898:	97 1d       	adc	r25, r7
    289a:	a8 1d       	adc	r26, r8
    289c:	b9 1d       	adc	r27, r9
    289e:	8e a3       	std	Y+38, r24	; 0x26
    28a0:	9f a3       	std	Y+39, r25	; 0x27
    28a2:	a8 a7       	std	Y+40, r26	; 0x28
    28a4:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    28a6:	8f ef       	ldi	r24, 0xFF	; 255
    28a8:	9f ef       	ldi	r25, 0xFF	; 255
    28aa:	af ef       	ldi	r26, 0xFF	; 255
    28ac:	bf ef       	ldi	r27, 0xFF	; 255
    28ae:	8e 87       	std	Y+14, r24	; 0x0e
    28b0:	9f 87       	std	Y+15, r25	; 0x0f
    28b2:	a8 8b       	std	Y+16, r26	; 0x10
    28b4:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    28b6:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    28b8:	13 30       	cpi	r17, 0x03	; 3
    28ba:	09 f0       	breq	.+2      	; 0x28be <chk_mounted+0x38e>
    28bc:	dc c0       	rjmp	.+440    	; 0x2a76 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    28be:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    28c0:	c1 5a       	subi	r28, 0xA1	; 161
    28c2:	df 4f       	sbci	r29, 0xFF	; 255
    28c4:	38 81       	ld	r19, Y
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	8a 91       	ld	r24, -Y
    28ca:	ce 55       	subi	r28, 0x5E	; 94
    28cc:	d0 40       	sbci	r29, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	28 2b       	or	r18, r24
    28d2:	39 2b       	or	r19, r25
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	2a 0d       	add	r18, r10
    28da:	3b 1d       	adc	r19, r11
    28dc:	4c 1d       	adc	r20, r12
    28de:	5d 1d       	adc	r21, r13
    28e0:	2a 8b       	std	Y+18, r18	; 0x12
    28e2:	3b 8b       	std	Y+19, r19	; 0x13
    28e4:	4c 8b       	std	Y+20, r20	; 0x14
    28e6:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    28e8:	be 01       	movw	r22, r28
    28ea:	62 5d       	subi	r22, 0xD2	; 210
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	01 e0       	ldi	r16, 0x01	; 1
    28f2:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    28f6:	88 23       	and	r24, r24
    28f8:	09 f0       	breq	.+2      	; 0x28fc <chk_mounted+0x3cc>
    28fa:	bd c0       	rjmp	.+378    	; 0x2a76 <chk_mounted+0x546>
    28fc:	c3 5d       	subi	r28, 0xD3	; 211
    28fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2900:	98 81       	ld	r25, Y
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	2a 91       	ld	r18, -Y
    2906:	cc 52       	subi	r28, 0x2C	; 44
    2908:	d2 40       	sbci	r29, 0x02	; 2
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	82 2b       	or	r24, r18
    290e:	93 2b       	or	r25, r19
    2910:	85 55       	subi	r24, 0x55	; 85
    2912:	9a 4a       	sbci	r25, 0xAA	; 170
    2914:	09 f0       	breq	.+2      	; 0x2918 <chk_mounted+0x3e8>
    2916:	af c0       	rjmp	.+350    	; 0x2a76 <chk_mounted+0x546>
    2918:	29 a9       	ldd	r18, Y+49	; 0x31
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	52 2f       	mov	r21, r18
    2922:	44 27       	eor	r20, r20
    2924:	33 27       	eor	r19, r19
    2926:	22 27       	eor	r18, r18
    2928:	88 a9       	ldd	r24, Y+48	; 0x30
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	dc 01       	movw	r26, r24
    2932:	99 27       	eor	r25, r25
    2934:	88 27       	eor	r24, r24
    2936:	28 2b       	or	r18, r24
    2938:	39 2b       	or	r19, r25
    293a:	4a 2b       	or	r20, r26
    293c:	5b 2b       	or	r21, r27
    293e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e0       	ldi	r26, 0x00	; 0
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	28 2b       	or	r18, r24
    2948:	39 2b       	or	r19, r25
    294a:	4a 2b       	or	r20, r26
    294c:	5b 2b       	or	r21, r27
    294e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	28 2b       	or	r18, r24
    2958:	39 2b       	or	r19, r25
    295a:	4a 2b       	or	r20, r26
    295c:	5b 2b       	or	r21, r27
    295e:	22 55       	subi	r18, 0x52	; 82
    2960:	32 45       	sbci	r19, 0x52	; 82
    2962:	41 46       	sbci	r20, 0x61	; 97
    2964:	51 44       	sbci	r21, 0x41	; 65
    2966:	09 f0       	breq	.+2      	; 0x296a <chk_mounted+0x43a>
    2968:	86 c0       	rjmp	.+268    	; 0x2a76 <chk_mounted+0x546>
    296a:	cb 5e       	subi	r28, 0xEB	; 235
    296c:	dd 4f       	sbci	r29, 0xFD	; 253
    296e:	28 81       	ld	r18, Y
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	52 2f       	mov	r21, r18
    2978:	44 27       	eor	r20, r20
    297a:	33 27       	eor	r19, r19
    297c:	22 27       	eor	r18, r18
    297e:	8a 91       	ld	r24, -Y
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a0 e0       	ldi	r26, 0x00	; 0
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	dc 01       	movw	r26, r24
    2988:	99 27       	eor	r25, r25
    298a:	88 27       	eor	r24, r24
    298c:	28 2b       	or	r18, r24
    298e:	39 2b       	or	r19, r25
    2990:	4a 2b       	or	r20, r26
    2992:	5b 2b       	or	r21, r27
    2994:	22 97       	sbiw	r28, 0x02	; 2
    2996:	89 91       	ld	r24, Y+
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e0       	ldi	r26, 0x00	; 0
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	28 2b       	or	r18, r24
    29a0:	39 2b       	or	r19, r25
    29a2:	4a 2b       	or	r20, r26
    29a4:	5b 2b       	or	r21, r27
    29a6:	98 81       	ld	r25, Y
    29a8:	c3 51       	subi	r28, 0x13	; 19
    29aa:	d2 40       	sbci	r29, 0x02	; 2
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	a0 e0       	ldi	r26, 0x00	; 0
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	28 2b       	or	r18, r24
    29b4:	39 2b       	or	r19, r25
    29b6:	4a 2b       	or	r20, r26
    29b8:	5b 2b       	or	r21, r27
    29ba:	22 57       	subi	r18, 0x72	; 114
    29bc:	32 47       	sbci	r19, 0x72	; 114
    29be:	41 44       	sbci	r20, 0x41	; 65
    29c0:	51 46       	sbci	r21, 0x61	; 97
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <chk_mounted+0x496>
    29c4:	58 c0       	rjmp	.+176    	; 0x2a76 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    29c6:	c3 5e       	subi	r28, 0xE3	; 227
    29c8:	dd 4f       	sbci	r29, 0xFD	; 253
    29ca:	28 81       	ld	r18, Y
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	52 2f       	mov	r21, r18
    29d4:	44 27       	eor	r20, r20
    29d6:	33 27       	eor	r19, r19
    29d8:	22 27       	eor	r18, r18
    29da:	8a 91       	ld	r24, -Y
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a0 e0       	ldi	r26, 0x00	; 0
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	dc 01       	movw	r26, r24
    29e4:	99 27       	eor	r25, r25
    29e6:	88 27       	eor	r24, r24
    29e8:	28 2b       	or	r18, r24
    29ea:	39 2b       	or	r19, r25
    29ec:	4a 2b       	or	r20, r26
    29ee:	5b 2b       	or	r21, r27
    29f0:	22 97       	sbiw	r28, 0x02	; 2
    29f2:	89 91       	ld	r24, Y+
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	28 2b       	or	r18, r24
    29fc:	39 2b       	or	r19, r25
    29fe:	4a 2b       	or	r20, r26
    2a00:	5b 2b       	or	r21, r27
    2a02:	98 81       	ld	r25, Y
    2a04:	cb 51       	subi	r28, 0x1B	; 27
    2a06:	d2 40       	sbci	r29, 0x02	; 2
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	a0 e0       	ldi	r26, 0x00	; 0
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	28 2b       	or	r18, r24
    2a10:	39 2b       	or	r19, r25
    2a12:	4a 2b       	or	r20, r26
    2a14:	5b 2b       	or	r21, r27
    2a16:	2a 87       	std	Y+10, r18	; 0x0a
    2a18:	3b 87       	std	Y+11, r19	; 0x0b
    2a1a:	4c 87       	std	Y+12, r20	; 0x0c
    2a1c:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2a1e:	c7 5e       	subi	r28, 0xE7	; 231
    2a20:	dd 4f       	sbci	r29, 0xFD	; 253
    2a22:	28 81       	ld	r18, Y
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	52 2f       	mov	r21, r18
    2a2c:	44 27       	eor	r20, r20
    2a2e:	33 27       	eor	r19, r19
    2a30:	22 27       	eor	r18, r18
    2a32:	8a 91       	ld	r24, -Y
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 e0       	ldi	r26, 0x00	; 0
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	99 27       	eor	r25, r25
    2a3e:	88 27       	eor	r24, r24
    2a40:	28 2b       	or	r18, r24
    2a42:	39 2b       	or	r19, r25
    2a44:	4a 2b       	or	r20, r26
    2a46:	5b 2b       	or	r21, r27
    2a48:	22 97       	sbiw	r28, 0x02	; 2
    2a4a:	89 91       	ld	r24, Y+
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e0       	ldi	r26, 0x00	; 0
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	28 2b       	or	r18, r24
    2a54:	39 2b       	or	r19, r25
    2a56:	4a 2b       	or	r20, r26
    2a58:	5b 2b       	or	r21, r27
    2a5a:	98 81       	ld	r25, Y
    2a5c:	c7 51       	subi	r28, 0x17	; 23
    2a5e:	d2 40       	sbci	r29, 0x02	; 2
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	28 2b       	or	r18, r24
    2a68:	39 2b       	or	r19, r25
    2a6a:	4a 2b       	or	r20, r26
    2a6c:	5b 2b       	or	r21, r27
    2a6e:	2e 87       	std	Y+14, r18	; 0x0e
    2a70:	3f 87       	std	Y+15, r19	; 0x0f
    2a72:	48 8b       	std	Y+16, r20	; 0x10
    2a74:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2a76:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2a78:	1a a6       	std	Y+42, r1	; 0x2a
    2a7a:	1b a6       	std	Y+43, r1	; 0x2b
    2a7c:	1c a6       	std	Y+44, r1	; 0x2c
    2a7e:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2a80:	80 91 71 34 	lds	r24, 0x3471
    2a84:	90 91 72 34 	lds	r25, 0x3472
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	80 93 71 34 	sts	0x3471, r24
    2a8e:	90 93 72 34 	sts	0x3472, r25
    2a92:	8e 83       	std	Y+6, r24	; 0x06
    2a94:	9f 83       	std	Y+7, r25	; 0x07
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <chk_mounted+0x56c>

	return FR_OK;
    2a98:	8a e0       	ldi	r24, 0x0A	; 10
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <chk_mounted+0x572>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	01 c0       	rjmp	.+2      	; 0x2aa2 <chk_mounted+0x572>
    2aa0:	8d e0       	ldi	r24, 0x0D	; 13
}
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	df 90       	pop	r13
    2ab0:	cf 90       	pop	r12
    2ab2:	bf 90       	pop	r11
    2ab4:	af 90       	pop	r10
    2ab6:	9f 90       	pop	r9
    2ab8:	8f 90       	pop	r8
    2aba:	7f 90       	pop	r7
    2abc:	6f 90       	pop	r6
    2abe:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2ac0:	c3 5a       	subi	r28, 0xA3	; 163
    2ac2:	df 4f       	sbci	r29, 0xFF	; 255
    2ac4:	28 81       	ld	r18, Y
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	52 2f       	mov	r21, r18
    2ace:	44 27       	eor	r20, r20
    2ad0:	33 27       	eor	r19, r19
    2ad2:	22 27       	eor	r18, r18
    2ad4:	8a 91       	ld	r24, -Y
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e0       	ldi	r26, 0x00	; 0
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	dc 01       	movw	r26, r24
    2ade:	99 27       	eor	r25, r25
    2ae0:	88 27       	eor	r24, r24
    2ae2:	28 2b       	or	r18, r24
    2ae4:	39 2b       	or	r19, r25
    2ae6:	4a 2b       	or	r20, r26
    2ae8:	5b 2b       	or	r21, r27
    2aea:	22 97       	sbiw	r28, 0x02	; 2
    2aec:	89 91       	ld	r24, Y+
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	28 2b       	or	r18, r24
    2af6:	39 2b       	or	r19, r25
    2af8:	4a 2b       	or	r20, r26
    2afa:	5b 2b       	or	r21, r27
    2afc:	98 81       	ld	r25, Y
    2afe:	cb 55       	subi	r28, 0x5B	; 91
    2b00:	d0 40       	sbci	r29, 0x00	; 0
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	a0 e0       	ldi	r26, 0x00	; 0
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	28 2b       	or	r18, r24
    2b0a:	39 2b       	or	r19, r25
    2b0c:	4a 2b       	or	r20, r26
    2b0e:	5b 2b       	or	r21, r27
    2b10:	2a a3       	std	Y+34, r18	; 0x22
    2b12:	3b a3       	std	Y+35, r19	; 0x23
    2b14:	4c a3       	std	Y+36, r20	; 0x24
    2b16:	5d a3       	std	Y+37, r21	; 0x25
    2b18:	13 e0       	ldi	r17, 0x03	; 3
    2b1a:	ac ce       	rjmp	.-680    	; 0x2874 <chk_mounted+0x344>

00002b1c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2b1c:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	a9 f0       	breq	.+42     	; 0x2b4c <validate+0x30>
    2b22:	80 81       	ld	r24, Z
    2b24:	88 23       	and	r24, r24
    2b26:	91 f0       	breq	.+36     	; 0x2b4c <validate+0x30>
    2b28:	86 81       	ldd	r24, Z+6	; 0x06
    2b2a:	97 81       	ldd	r25, Z+7	; 0x07
    2b2c:	86 17       	cp	r24, r22
    2b2e:	97 07       	cpc	r25, r23
    2b30:	69 f4       	brne	.+26     	; 0x2b4c <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2b32:	81 81       	ldd	r24, Z+1	; 0x01
    2b34:	88 23       	and	r24, r24
    2b36:	11 f0       	breq	.+4      	; 0x2b3c <validate+0x20>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <validate+0x24>
	return Stat;
    2b3c:	80 91 a4 33 	lds	r24, 0x33A4
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2b40:	80 fd       	sbrc	r24, 0
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <validate+0x2c>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	08 95       	ret
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	08 95       	ret
    2b4c:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2b4e:	08 95       	ret

00002b50 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	10 f0       	brcs	.+4      	; 0x2b5e <f_mount+0xe>
    2b5a:	8b e0       	ldi	r24, 0x0B	; 11
    2b5c:	17 c0       	rjmp	.+46     	; 0x2b8c <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2b5e:	a8 2f       	mov	r26, r24
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	fd 01       	movw	r30, r26
    2b64:	ee 0f       	add	r30, r30
    2b66:	ff 1f       	adc	r31, r31
    2b68:	e3 59       	subi	r30, 0x93	; 147
    2b6a:	fb 4c       	sbci	r31, 0xCB	; 203
    2b6c:	01 90       	ld	r0, Z+
    2b6e:	f0 81       	ld	r31, Z
    2b70:	e0 2d       	mov	r30, r0

	if (rfs) {
    2b72:	30 97       	sbiw	r30, 0x00	; 0
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2b76:	10 82       	st	Z, r1
	}

	if (fs) {
    2b78:	20 97       	sbiw	r28, 0x00	; 0
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2b7c:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2b7e:	aa 0f       	add	r26, r26
    2b80:	bb 1f       	adc	r27, r27
    2b82:	a3 59       	subi	r26, 0x93	; 147
    2b84:	bb 4c       	sbci	r27, 0xCB	; 203
    2b86:	cd 93       	st	X+, r28
    2b88:	dc 93       	st	X, r29
    2b8a:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2b92:	5f 92       	push	r5
    2b94:	6f 92       	push	r6
    2b96:	7f 92       	push	r7
    2b98:	8f 92       	push	r8
    2b9a:	9f 92       	push	r9
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	cf 92       	push	r12
    2ba2:	df 92       	push	r13
    2ba4:	ef 92       	push	r14
    2ba6:	ff 92       	push	r15
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	a4 97       	sbiw	r28, 0x24	; 36
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	3c 01       	movw	r6, r24
    2bbc:	6b a3       	std	Y+35, r22	; 0x23
    2bbe:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	1d 92       	st	X+, r1
    2bc4:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2bc6:	3f e1       	ldi	r19, 0x1F	; 31
    2bc8:	53 2e       	mov	r5, r19
    2bca:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2bcc:	8e 01       	movw	r16, r28
    2bce:	03 5f       	subi	r16, 0xF3	; 243
    2bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd2:	4e 71       	andi	r20, 0x1E	; 30
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	83 96       	adiw	r24, 0x23	; 35
    2bd8:	b8 01       	movw	r22, r16
    2bda:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2bde:	88 23       	and	r24, r24
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <f_open+0x54>
    2be2:	28 2f       	mov	r18, r24
    2be4:	32 c1       	rjmp	.+612    	; 0x2e4a <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2be6:	ce 01       	movw	r24, r28
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	89 a3       	std	Y+33, r24	; 0x21
    2bec:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2bee:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
    2bf8:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2bfa:	45 2d       	mov	r20, r5
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	ca 01       	movw	r24, r20
    2c00:	8c 71       	andi	r24, 0x1C	; 28
    2c02:	90 70       	andi	r25, 0x00	; 0
    2c04:	89 2b       	or	r24, r25
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <f_open+0x78>
    2c08:	84 c0       	rjmp	.+264    	; 0x2d12 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2c0a:	22 23       	and	r18, r18
    2c0c:	79 f0       	breq	.+30     	; 0x2c2c <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2c0e:	24 30       	cpi	r18, 0x04	; 4
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <f_open+0x82>
    2c12:	1b c1       	rjmp	.+566    	; 0x2e4a <f_open+0x2b8>
				res = dir_register(&dj);
    2c14:	c8 01       	movw	r24, r16
    2c16:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <dir_register>
    2c1a:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2c1c:	88 23       	and	r24, r24
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <f_open+0x90>
    2c20:	14 c1       	rjmp	.+552    	; 0x2e4a <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2c22:	b8 e0       	ldi	r27, 0x08	; 8
    2c24:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2c26:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c28:	18 a1       	ldd	r17, Y+32	; 0x20
    2c2a:	5b c0       	rjmp	.+182    	; 0x2ce2 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2c2c:	52 fe       	sbrs	r5, 2
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <f_open+0xa2>
    2c30:	28 e0       	ldi	r18, 0x08	; 8
    2c32:	0b c1       	rjmp	.+534    	; 0x2e4a <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2c34:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c36:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2c38:	01 15       	cp	r16, r1
    2c3a:	11 05       	cpc	r17, r1
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <f_open+0xae>
    2c3e:	02 c1       	rjmp	.+516    	; 0x2e44 <f_open+0x2b2>
    2c40:	f8 01       	movw	r30, r16
    2c42:	83 85       	ldd	r24, Z+11	; 0x0b
    2c44:	81 71       	andi	r24, 0x11	; 17
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <f_open+0xb8>
    2c48:	fd c0       	rjmp	.+506    	; 0x2e44 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2c4a:	53 fe       	sbrs	r5, 3
    2c4c:	4a c0       	rjmp	.+148    	; 0x2ce2 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2c4e:	95 89       	ldd	r25, Z+21	; 0x15
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	24 89       	ldd	r18, Z+20	; 0x14
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	82 2b       	or	r24, r18
    2c58:	93 2b       	or	r25, r19
    2c5a:	a0 e0       	ldi	r26, 0x00	; 0
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	7c 01       	movw	r14, r24
    2c60:	dd 24       	eor	r13, r13
    2c62:	cc 24       	eor	r12, r12
    2c64:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	82 2b       	or	r24, r18
    2c6e:	93 2b       	or	r25, r19
    2c70:	a0 e0       	ldi	r26, 0x00	; 0
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	c8 2a       	or	r12, r24
    2c76:	d9 2a       	or	r13, r25
    2c78:	ea 2a       	or	r14, r26
    2c7a:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2c7c:	14 8a       	std	Z+20, r1	; 0x14
    2c7e:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2c80:	12 8e       	std	Z+26, r1	; 0x1a
    2c82:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2c84:	14 8e       	std	Z+28, r1	; 0x1c
    2c86:	15 8e       	std	Z+29, r1	; 0x1d
    2c88:	16 8e       	std	Z+30, r1	; 0x1e
    2c8a:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2c8c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c8e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2c94:	82 a4       	ldd	r8, Z+42	; 0x2a
    2c96:	93 a4       	ldd	r9, Z+43	; 0x2b
    2c98:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2c9a:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2c9c:	c1 14       	cp	r12, r1
    2c9e:	d1 04       	cpc	r13, r1
    2ca0:	e1 04       	cpc	r14, r1
    2ca2:	f1 04       	cpc	r15, r1
    2ca4:	a1 f0       	breq	.+40     	; 0x2cce <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2ca6:	cf 01       	movw	r24, r30
    2ca8:	b7 01       	movw	r22, r14
    2caa:	a6 01       	movw	r20, r12
    2cac:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <remove_chain>
    2cb0:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2cb2:	88 23       	and	r24, r24
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <f_open+0x126>
    2cb6:	c9 c0       	rjmp	.+402    	; 0x2e4a <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2cb8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cba:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cbc:	08 94       	sec
    2cbe:	c1 08       	sbc	r12, r1
    2cc0:	d1 08       	sbc	r13, r1
    2cc2:	e1 08       	sbc	r14, r1
    2cc4:	f1 08       	sbc	r15, r1
    2cc6:	c2 86       	std	Z+10, r12	; 0x0a
    2cc8:	d3 86       	std	Z+11, r13	; 0x0b
    2cca:	e4 86       	std	Z+12, r14	; 0x0c
    2ccc:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	b5 01       	movw	r22, r10
    2cd4:	a4 01       	movw	r20, r8
    2cd6:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    2cda:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2cdc:	88 23       	and	r24, r24
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <f_open+0x150>
    2ce0:	b4 c0       	rjmp	.+360    	; 0x2e4a <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2ce2:	53 fe       	sbrs	r5, 3
    2ce4:	27 c0       	rjmp	.+78     	; 0x2d34 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2ce6:	d8 01       	movw	r26, r16
    2ce8:	1b 96       	adiw	r26, 0x0b	; 11
    2cea:	1c 92       	st	X, r1
    2cec:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2cee:	1e 96       	adiw	r26, 0x0e	; 14
    2cf0:	1c 92       	st	X, r1
    2cf2:	1e 97       	sbiw	r26, 0x0e	; 14
    2cf4:	1f 96       	adiw	r26, 0x0f	; 15
    2cf6:	1c 92       	st	X, r1
    2cf8:	1f 97       	sbiw	r26, 0x0f	; 15
    2cfa:	50 96       	adiw	r26, 0x10	; 16
    2cfc:	1c 92       	st	X, r1
    2cfe:	50 97       	sbiw	r26, 0x10	; 16
    2d00:	51 96       	adiw	r26, 0x11	; 17
    2d02:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2d04:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d06:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2d0c:	b0 e2       	ldi	r27, 0x20	; 32
    2d0e:	5b 2a       	or	r5, r27
    2d10:	11 c0       	rjmp	.+34     	; 0x2d34 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2d12:	22 23       	and	r18, r18
    2d14:	09 f0       	breq	.+2      	; 0x2d18 <f_open+0x186>
    2d16:	99 c0       	rjmp	.+306    	; 0x2e4a <f_open+0x2b8>
		dir = dj.dir;
    2d18:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2d1a:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2d1c:	01 15       	cp	r16, r1
    2d1e:	11 05       	cpc	r17, r1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <f_open+0x192>
    2d22:	92 c0       	rjmp	.+292    	; 0x2e48 <f_open+0x2b6>
    2d24:	f8 01       	movw	r30, r16
    2d26:	83 85       	ldd	r24, Z+11	; 0x0b
    2d28:	84 fd       	sbrc	r24, 4
    2d2a:	8e c0       	rjmp	.+284    	; 0x2e48 <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2d2c:	51 fe       	sbrs	r5, 1
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <f_open+0x1a2>
    2d30:	80 fd       	sbrc	r24, 0
    2d32:	88 c0       	rjmp	.+272    	; 0x2e44 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2d34:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d36:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d38:	22 a5       	ldd	r18, Z+42	; 0x2a
    2d3a:	33 a5       	ldd	r19, Z+43	; 0x2b
    2d3c:	44 a5       	ldd	r20, Z+44	; 0x2c
    2d3e:	55 a5       	ldd	r21, Z+45	; 0x2d
    2d40:	d3 01       	movw	r26, r6
    2d42:	5a 96       	adiw	r26, 0x1a	; 26
    2d44:	2d 93       	st	X+, r18
    2d46:	3d 93       	st	X+, r19
    2d48:	4d 93       	st	X+, r20
    2d4a:	5c 93       	st	X, r21
    2d4c:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2d4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d50:	98 a1       	ldd	r25, Y+32	; 0x20
    2d52:	5e 96       	adiw	r26, 0x1e	; 30
    2d54:	8d 93       	st	X+, r24
    2d56:	9c 93       	st	X, r25
    2d58:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2d5a:	14 96       	adiw	r26, 0x04	; 4
    2d5c:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2d5e:	d8 01       	movw	r26, r16
    2d60:	55 96       	adiw	r26, 0x15	; 21
    2d62:	3c 91       	ld	r19, X
    2d64:	55 97       	sbiw	r26, 0x15	; 21
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	54 96       	adiw	r26, 0x14	; 20
    2d6a:	8c 91       	ld	r24, X
    2d6c:	54 97       	sbiw	r26, 0x14	; 20
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	28 2b       	or	r18, r24
    2d72:	39 2b       	or	r19, r25
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	a9 01       	movw	r20, r18
    2d7a:	33 27       	eor	r19, r19
    2d7c:	22 27       	eor	r18, r18
    2d7e:	5b 96       	adiw	r26, 0x1b	; 27
    2d80:	9c 91       	ld	r25, X
    2d82:	5b 97       	sbiw	r26, 0x1b	; 27
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	5a 96       	adiw	r26, 0x1a	; 26
    2d88:	6c 91       	ld	r22, X
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	86 2b       	or	r24, r22
    2d8e:	97 2b       	or	r25, r23
    2d90:	a0 e0       	ldi	r26, 0x00	; 0
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	28 2b       	or	r18, r24
    2d96:	39 2b       	or	r19, r25
    2d98:	4a 2b       	or	r20, r26
    2d9a:	5b 2b       	or	r21, r27
    2d9c:	d3 01       	movw	r26, r6
    2d9e:	1e 96       	adiw	r26, 0x0e	; 14
    2da0:	2d 93       	st	X+, r18
    2da2:	3d 93       	st	X+, r19
    2da4:	4d 93       	st	X+, r20
    2da6:	5c 93       	st	X, r21
    2da8:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2daa:	d8 01       	movw	r26, r16
    2dac:	5f 96       	adiw	r26, 0x1f	; 31
    2dae:	2c 91       	ld	r18, X
    2db0:	5f 97       	sbiw	r26, 0x1f	; 31
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	52 2f       	mov	r21, r18
    2dba:	44 27       	eor	r20, r20
    2dbc:	33 27       	eor	r19, r19
    2dbe:	22 27       	eor	r18, r18
    2dc0:	5e 96       	adiw	r26, 0x1e	; 30
    2dc2:	8c 91       	ld	r24, X
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a0 e0       	ldi	r26, 0x00	; 0
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	dc 01       	movw	r26, r24
    2dcc:	99 27       	eor	r25, r25
    2dce:	88 27       	eor	r24, r24
    2dd0:	28 2b       	or	r18, r24
    2dd2:	39 2b       	or	r19, r25
    2dd4:	4a 2b       	or	r20, r26
    2dd6:	5b 2b       	or	r21, r27
    2dd8:	d8 01       	movw	r26, r16
    2dda:	5c 96       	adiw	r26, 0x1c	; 28
    2ddc:	8c 91       	ld	r24, X
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	28 2b       	or	r18, r24
    2de6:	39 2b       	or	r19, r25
    2de8:	4a 2b       	or	r20, r26
    2dea:	5b 2b       	or	r21, r27
    2dec:	d8 01       	movw	r26, r16
    2dee:	5d 96       	adiw	r26, 0x1d	; 29
    2df0:	9c 91       	ld	r25, X
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	a0 e0       	ldi	r26, 0x00	; 0
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	28 2b       	or	r18, r24
    2dfa:	39 2b       	or	r19, r25
    2dfc:	4a 2b       	or	r20, r26
    2dfe:	5b 2b       	or	r21, r27
    2e00:	d3 01       	movw	r26, r6
    2e02:	1a 96       	adiw	r26, 0x0a	; 10
    2e04:	2d 93       	st	X+, r18
    2e06:	3d 93       	st	X+, r19
    2e08:	4d 93       	st	X+, r20
    2e0a:	5c 93       	st	X, r21
    2e0c:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2e0e:	16 96       	adiw	r26, 0x06	; 6
    2e10:	1d 92       	st	X+, r1
    2e12:	1d 92       	st	X+, r1
    2e14:	1d 92       	st	X+, r1
    2e16:	1c 92       	st	X, r1
    2e18:	19 97       	sbiw	r26, 0x09	; 9
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	15 96       	adiw	r26, 0x05	; 5
    2e1e:	8c 93       	st	X, r24
    2e20:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2e22:	56 96       	adiw	r26, 0x16	; 22
    2e24:	1d 92       	st	X+, r1
    2e26:	1d 92       	st	X+, r1
    2e28:	1d 92       	st	X+, r1
    2e2a:	1c 92       	st	X, r1
    2e2c:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2e2e:	ed 93       	st	X+, r30
    2e30:	fc 93       	st	X, r31
    2e32:	11 97       	sbiw	r26, 0x01	; 1
    2e34:	86 81       	ldd	r24, Z+6	; 0x06
    2e36:	97 81       	ldd	r25, Z+7	; 0x07
    2e38:	12 96       	adiw	r26, 0x02	; 2
    2e3a:	8d 93       	st	X+, r24
    2e3c:	9c 93       	st	X, r25
    2e3e:	13 97       	sbiw	r26, 0x03	; 3
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    2e44:	27 e0       	ldi	r18, 0x07	; 7
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <f_open+0x2b8>
    2e48:	24 e0       	ldi	r18, 0x04	; 4
}
    2e4a:	82 2f       	mov	r24, r18
    2e4c:	a4 96       	adiw	r28, 0x24	; 36
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	df 90       	pop	r13
    2e60:	cf 90       	pop	r12
    2e62:	bf 90       	pop	r11
    2e64:	af 90       	pop	r10
    2e66:	9f 90       	pop	r9
    2e68:	8f 90       	pop	r8
    2e6a:	7f 90       	pop	r7
    2e6c:	6f 90       	pop	r6
    2e6e:	5f 90       	pop	r5
    2e70:	08 95       	ret

00002e72 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2e72:	2f 92       	push	r2
    2e74:	3f 92       	push	r3
    2e76:	4f 92       	push	r4
    2e78:	5f 92       	push	r5
    2e7a:	6f 92       	push	r6
    2e7c:	7f 92       	push	r7
    2e7e:	8f 92       	push	r8
    2e80:	9f 92       	push	r9
    2e82:	af 92       	push	r10
    2e84:	bf 92       	push	r11
    2e86:	cf 92       	push	r12
    2e88:	df 92       	push	r13
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <f_read+0x26>
    2e98:	0f 92       	push	r0
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
    2ea0:	9c 83       	std	Y+4, r25	; 0x04
    2ea2:	16 2f       	mov	r17, r22
    2ea4:	07 2f       	mov	r16, r23
    2ea6:	4a 01       	movw	r8, r20
    2ea8:	29 83       	std	Y+1, r18	; 0x01
    2eaa:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    2eac:	d9 01       	movw	r26, r18
    2eae:	1d 92       	st	X+, r1
    2eb0:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	62 81       	ldd	r22, Z+2	; 0x02
    2eb6:	73 81       	ldd	r23, Z+3	; 0x03
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <validate>
    2ec0:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2ec2:	88 23       	and	r24, r24
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <f_read+0x56>
    2ec6:	b4 c1       	rjmp	.+872    	; 0x3230 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    2ec8:	ab 81       	ldd	r26, Y+3	; 0x03
    2eca:	bc 81       	ldd	r27, Y+4	; 0x04
    2ecc:	14 96       	adiw	r26, 0x04	; 4
    2ece:	8c 91       	ld	r24, X
    2ed0:	87 fd       	sbrc	r24, 7
    2ed2:	66 c0       	rjmp	.+204    	; 0x2fa0 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    2ed4:	80 fd       	sbrc	r24, 0
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <f_read+0x6c>
    2ed8:	a7 e0       	ldi	r26, 0x07	; 7
    2eda:	7a 2e       	mov	r7, r26
    2edc:	a9 c1       	rjmp	.+850    	; 0x3230 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2ede:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee2:	22 85       	ldd	r18, Z+10	; 0x0a
    2ee4:	33 85       	ldd	r19, Z+11	; 0x0b
    2ee6:	44 85       	ldd	r20, Z+12	; 0x0c
    2ee8:	55 85       	ldd	r21, Z+13	; 0x0d
    2eea:	86 81       	ldd	r24, Z+6	; 0x06
    2eec:	97 81       	ldd	r25, Z+7	; 0x07
    2eee:	a0 85       	ldd	r26, Z+8	; 0x08
    2ef0:	b1 85       	ldd	r27, Z+9	; 0x09
    2ef2:	28 1b       	sub	r18, r24
    2ef4:	39 0b       	sbc	r19, r25
    2ef6:	4a 0b       	sbc	r20, r26
    2ef8:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    2efa:	c4 01       	movw	r24, r8
    2efc:	a0 e0       	ldi	r26, 0x00	; 0
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	28 17       	cp	r18, r24
    2f02:	39 07       	cpc	r19, r25
    2f04:	4a 07       	cpc	r20, r26
    2f06:	5b 07       	cpc	r21, r27
    2f08:	08 f4       	brcc	.+2      	; 0x2f0c <f_read+0x9a>
    2f0a:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    2f0c:	81 2f       	mov	r24, r17
    2f0e:	90 2f       	mov	r25, r16
    2f10:	9c 01       	movw	r18, r24
    2f12:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    2f14:	f0 e2       	ldi	r31, 0x20	; 32
    2f16:	2f 2e       	mov	r2, r31
    2f18:	31 2c       	mov	r3, r1
    2f1a:	6b 81       	ldd	r22, Y+3	; 0x03
    2f1c:	7c 81       	ldd	r23, Y+4	; 0x04
    2f1e:	26 0e       	add	r2, r22
    2f20:	37 1e       	adc	r3, r23
    2f22:	82 c1       	rjmp	.+772    	; 0x3228 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2f24:	ab 81       	ldd	r26, Y+3	; 0x03
    2f26:	bc 81       	ldd	r27, Y+4	; 0x04
    2f28:	16 96       	adiw	r26, 0x06	; 6
    2f2a:	2d 91       	ld	r18, X+
    2f2c:	3d 91       	ld	r19, X+
    2f2e:	4d 91       	ld	r20, X+
    2f30:	5c 91       	ld	r21, X
    2f32:	19 97       	sbiw	r26, 0x09	; 9
    2f34:	da 01       	movw	r26, r20
    2f36:	c9 01       	movw	r24, r18
    2f38:	91 70       	andi	r25, 0x01	; 1
    2f3a:	a0 70       	andi	r26, 0x00	; 0
    2f3c:	b0 70       	andi	r27, 0x00	; 0
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	a1 05       	cpc	r26, r1
    2f42:	b1 05       	cpc	r27, r1
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <f_read+0xd6>
    2f46:	2c c1       	rjmp	.+600    	; 0x31a0 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    2f48:	ab 81       	ldd	r26, Y+3	; 0x03
    2f4a:	bc 81       	ldd	r27, Y+4	; 0x04
    2f4c:	ed 91       	ld	r30, X+
    2f4e:	fc 91       	ld	r31, X
    2f50:	11 97       	sbiw	r26, 0x01	; 1
    2f52:	15 96       	adiw	r26, 0x05	; 5
    2f54:	9c 91       	ld	r25, X
    2f56:	15 97       	sbiw	r26, 0x05	; 5
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	98 17       	cp	r25, r24
    2f5c:	a0 f1       	brcs	.+104    	; 0x2fc6 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    2f5e:	21 15       	cp	r18, r1
    2f60:	31 05       	cpc	r19, r1
    2f62:	41 05       	cpc	r20, r1
    2f64:	51 05       	cpc	r21, r1
    2f66:	39 f4       	brne	.+14     	; 0x2f76 <f_read+0x104>
    2f68:	1e 96       	adiw	r26, 0x0e	; 14
    2f6a:	6d 91       	ld	r22, X+
    2f6c:	7d 91       	ld	r23, X+
    2f6e:	8d 91       	ld	r24, X+
    2f70:	9c 91       	ld	r25, X
    2f72:	51 97       	sbiw	r26, 0x11	; 17
    2f74:	0b c0       	rjmp	.+22     	; 0x2f8c <f_read+0x11a>
    2f76:	ab 81       	ldd	r26, Y+3	; 0x03
    2f78:	bc 81       	ldd	r27, Y+4	; 0x04
    2f7a:	52 96       	adiw	r26, 0x12	; 18
    2f7c:	4d 91       	ld	r20, X+
    2f7e:	5d 91       	ld	r21, X+
    2f80:	6d 91       	ld	r22, X+
    2f82:	7c 91       	ld	r23, X
    2f84:	55 97       	sbiw	r26, 0x15	; 21
    2f86:	cf 01       	movw	r24, r30
    2f88:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    2f8c:	62 30       	cpi	r22, 0x02	; 2
    2f8e:	71 05       	cpc	r23, r1
    2f90:	81 05       	cpc	r24, r1
    2f92:	91 05       	cpc	r25, r1
    2f94:	40 f4       	brcc	.+16     	; 0x2fa6 <f_read+0x134>
    2f96:	eb 81       	ldd	r30, Y+3	; 0x03
    2f98:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9a:	84 81       	ldd	r24, Z+4	; 0x04
    2f9c:	80 68       	ori	r24, 0x80	; 128
    2f9e:	84 83       	std	Z+4, r24	; 0x04
    2fa0:	e2 e0       	ldi	r30, 0x02	; 2
    2fa2:	7e 2e       	mov	r7, r30
    2fa4:	45 c1       	rjmp	.+650    	; 0x3230 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2fa6:	6f 3f       	cpi	r22, 0xFF	; 255
    2fa8:	ff ef       	ldi	r31, 0xFF	; 255
    2faa:	7f 07       	cpc	r23, r31
    2fac:	ff ef       	ldi	r31, 0xFF	; 255
    2fae:	8f 07       	cpc	r24, r31
    2fb0:	ff ef       	ldi	r31, 0xFF	; 255
    2fb2:	9f 07       	cpc	r25, r31
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <f_read+0x146>
    2fb6:	e0 c0       	rjmp	.+448    	; 0x3178 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    2fb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fba:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbc:	62 8b       	std	Z+18, r22	; 0x12
    2fbe:	73 8b       	std	Z+19, r23	; 0x13
    2fc0:	84 8b       	std	Z+20, r24	; 0x14
    2fc2:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    2fc4:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2fc6:	ab 81       	ldd	r26, Y+3	; 0x03
    2fc8:	bc 81       	ldd	r27, Y+4	; 0x04
    2fca:	0d 91       	ld	r16, X+
    2fcc:	1c 91       	ld	r17, X
    2fce:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2fd0:	52 96       	adiw	r26, 0x12	; 18
    2fd2:	2d 91       	ld	r18, X+
    2fd4:	3d 91       	ld	r19, X+
    2fd6:	4d 91       	ld	r20, X+
    2fd8:	5c 91       	ld	r21, X
    2fda:	55 97       	sbiw	r26, 0x15	; 21
    2fdc:	22 50       	subi	r18, 0x02	; 2
    2fde:	30 40       	sbci	r19, 0x00	; 0
    2fe0:	40 40       	sbci	r20, 0x00	; 0
    2fe2:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fe8:	93 8d       	ldd	r25, Z+27	; 0x1b
    2fea:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2fec:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2fee:	02 97       	sbiw	r24, 0x02	; 2
    2ff0:	a1 09       	sbc	r26, r1
    2ff2:	b1 09       	sbc	r27, r1
    2ff4:	28 17       	cp	r18, r24
    2ff6:	39 07       	cpc	r19, r25
    2ff8:	4a 07       	cpc	r20, r26
    2ffa:	5b 07       	cpc	r21, r27
    2ffc:	b8 f4       	brcc	.+46     	; 0x302c <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    2ffe:	62 80       	ldd	r6, Z+2	; 0x02
    3000:	66 2d       	mov	r22, r6
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    300c:	9b 01       	movw	r18, r22
    300e:	ac 01       	movw	r20, r24
    3010:	f8 01       	movw	r30, r16
    3012:	86 a1       	ldd	r24, Z+38	; 0x26
    3014:	97 a1       	ldd	r25, Z+39	; 0x27
    3016:	a0 a5       	ldd	r26, Z+40	; 0x28
    3018:	b1 a5       	ldd	r27, Z+41	; 0x29
    301a:	28 0f       	add	r18, r24
    301c:	39 1f       	adc	r19, r25
    301e:	4a 1f       	adc	r20, r26
    3020:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3022:	21 15       	cp	r18, r1
    3024:	31 05       	cpc	r19, r1
    3026:	41 05       	cpc	r20, r1
    3028:	51 05       	cpc	r21, r1
    302a:	49 f4       	brne	.+18     	; 0x303e <f_read+0x1cc>
    302c:	ab 81       	ldd	r26, Y+3	; 0x03
    302e:	bc 81       	ldd	r27, Y+4	; 0x04
    3030:	14 96       	adiw	r26, 0x04	; 4
    3032:	8c 91       	ld	r24, X
    3034:	14 97       	sbiw	r26, 0x04	; 4
    3036:	80 68       	ori	r24, 0x80	; 128
    3038:	14 96       	adiw	r26, 0x04	; 4
    303a:	8c 93       	st	X, r24
    303c:	b1 cf       	rjmp	.-158    	; 0x2fa0 <f_read+0x12e>
			sect += fp->csect;
    303e:	eb 81       	ldd	r30, Y+3	; 0x03
    3040:	fc 81       	ldd	r31, Y+4	; 0x04
    3042:	85 81       	ldd	r24, Z+5	; 0x05
    3044:	59 01       	movw	r10, r18
    3046:	6a 01       	movw	r12, r20
    3048:	a8 0e       	add	r10, r24
    304a:	b1 1c       	adc	r11, r1
    304c:	c1 1c       	adc	r12, r1
    304e:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3050:	74 01       	movw	r14, r8
    3052:	ef 2c       	mov	r14, r15
    3054:	ff 24       	eor	r15, r15
    3056:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    3058:	e1 14       	cp	r14, r1
    305a:	f1 04       	cpc	r15, r1
    305c:	09 f4       	brne	.+2      	; 0x3060 <f_read+0x1ee>
    305e:	53 c0       	rjmp	.+166    	; 0x3106 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	c7 01       	movw	r24, r14
    3066:	82 0f       	add	r24, r18
    3068:	93 1f       	adc	r25, r19
    306a:	66 2d       	mov	r22, r6
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	68 17       	cp	r22, r24
    3070:	79 07       	cpc	r23, r25
    3072:	18 f4       	brcc	.+6      	; 0x307a <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3074:	7b 01       	movw	r14, r22
    3076:	e2 1a       	sub	r14, r18
    3078:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    307a:	d8 01       	movw	r26, r16
    307c:	11 96       	adiw	r26, 0x01	; 1
    307e:	8c 91       	ld	r24, X
    3080:	b2 01       	movw	r22, r4
    3082:	a6 01       	movw	r20, r12
    3084:	95 01       	movw	r18, r10
    3086:	0e 2d       	mov	r16, r14
    3088:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    308c:	eb 81       	ldd	r30, Y+3	; 0x03
    308e:	fc 81       	ldd	r31, Y+4	; 0x04
    3090:	94 81       	ldd	r25, Z+4	; 0x04
    3092:	88 23       	and	r24, r24
    3094:	19 f0       	breq	.+6      	; 0x309c <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    3096:	90 68       	ori	r25, 0x80	; 128
    3098:	94 83       	std	Z+4, r25	; 0x04
    309a:	76 c0       	rjmp	.+236    	; 0x3188 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    309c:	96 ff       	sbrs	r25, 6
    309e:	29 c0       	rjmp	.+82     	; 0x30f2 <f_read+0x280>
    30a0:	ab 81       	ldd	r26, Y+3	; 0x03
    30a2:	bc 81       	ldd	r27, Y+4	; 0x04
    30a4:	56 96       	adiw	r26, 0x16	; 22
    30a6:	2d 91       	ld	r18, X+
    30a8:	3d 91       	ld	r19, X+
    30aa:	4d 91       	ld	r20, X+
    30ac:	5c 91       	ld	r21, X
    30ae:	59 97       	sbiw	r26, 0x19	; 25
    30b0:	2a 19       	sub	r18, r10
    30b2:	3b 09       	sbc	r19, r11
    30b4:	4c 09       	sbc	r20, r12
    30b6:	5d 09       	sbc	r21, r13
    30b8:	c7 01       	movw	r24, r14
    30ba:	a0 e0       	ldi	r26, 0x00	; 0
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	28 17       	cp	r18, r24
    30c0:	39 07       	cpc	r19, r25
    30c2:	4a 07       	cpc	r20, r26
    30c4:	5b 07       	cpc	r21, r27
    30c6:	a8 f4       	brcc	.+42     	; 0x30f2 <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    30c8:	69 e0       	ldi	r22, 0x09	; 9
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	44 1f       	adc	r20, r20
    30d0:	55 1f       	adc	r21, r21
    30d2:	6a 95       	dec	r22
    30d4:	d1 f7       	brne	.-12     	; 0x30ca <f_read+0x258>
    30d6:	c2 01       	movw	r24, r4
    30d8:	82 0f       	add	r24, r18
    30da:	93 1f       	adc	r25, r19
    30dc:	d1 01       	movw	r26, r2
    30de:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    30e0:	9c 01       	movw	r18, r24
    30e2:	20 50       	subi	r18, 0x00	; 0
    30e4:	3e 4f       	sbci	r19, 0xFE	; 254
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <f_read+0x27a>
    30e8:	8d 91       	ld	r24, X+
    30ea:	81 93       	st	Z+, r24
    30ec:	e2 17       	cp	r30, r18
    30ee:	f3 07       	cpc	r31, r19
    30f0:	d9 f7       	brne	.-10     	; 0x30e8 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    30f2:	eb 81       	ldd	r30, Y+3	; 0x03
    30f4:	fc 81       	ldd	r31, Y+4	; 0x04
    30f6:	85 81       	ldd	r24, Z+5	; 0x05
    30f8:	8e 0d       	add	r24, r14
    30fa:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    30fc:	b7 01       	movw	r22, r14
    30fe:	76 2f       	mov	r23, r22
    3100:	66 27       	eor	r22, r22
    3102:	77 0f       	add	r23, r23
    3104:	74 c0       	rjmp	.+232    	; 0x31ee <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    3106:	ab 81       	ldd	r26, Y+3	; 0x03
    3108:	bc 81       	ldd	r27, Y+4	; 0x04
    310a:	14 96       	adiw	r26, 0x04	; 4
    310c:	8c 91       	ld	r24, X
    310e:	14 97       	sbiw	r26, 0x04	; 4
    3110:	86 ff       	sbrs	r24, 6
    3112:	1b c0       	rjmp	.+54     	; 0x314a <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3114:	56 96       	adiw	r26, 0x16	; 22
    3116:	2d 91       	ld	r18, X+
    3118:	3d 91       	ld	r19, X+
    311a:	4d 91       	ld	r20, X+
    311c:	5c 91       	ld	r21, X
    311e:	59 97       	sbiw	r26, 0x19	; 25
    3120:	f8 01       	movw	r30, r16
    3122:	81 81       	ldd	r24, Z+1	; 0x01
    3124:	b1 01       	movw	r22, r2
    3126:	01 e0       	ldi	r16, 0x01	; 1
    3128:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    312c:	ab 81       	ldd	r26, Y+3	; 0x03
    312e:	bc 81       	ldd	r27, Y+4	; 0x04
    3130:	14 96       	adiw	r26, 0x04	; 4
    3132:	9c 91       	ld	r25, X
    3134:	14 97       	sbiw	r26, 0x04	; 4
    3136:	88 23       	and	r24, r24
    3138:	21 f0       	breq	.+8      	; 0x3142 <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    313a:	90 68       	ori	r25, 0x80	; 128
    313c:	14 96       	adiw	r26, 0x04	; 4
    313e:	9c 93       	st	X, r25
    3140:	23 c0       	rjmp	.+70     	; 0x3188 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    3142:	9f 7b       	andi	r25, 0xBF	; 191
    3144:	eb 81       	ldd	r30, Y+3	; 0x03
    3146:	fc 81       	ldd	r31, Y+4	; 0x04
    3148:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    314a:	eb 81       	ldd	r30, Y+3	; 0x03
    314c:	fc 81       	ldd	r31, Y+4	; 0x04
    314e:	86 89       	ldd	r24, Z+22	; 0x16
    3150:	97 89       	ldd	r25, Z+23	; 0x17
    3152:	a0 8d       	ldd	r26, Z+24	; 0x18
    3154:	b1 8d       	ldd	r27, Z+25	; 0x19
    3156:	8a 15       	cp	r24, r10
    3158:	9b 05       	cpc	r25, r11
    315a:	ac 05       	cpc	r26, r12
    315c:	bd 05       	cpc	r27, r13
    315e:	b9 f0       	breq	.+46     	; 0x318e <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    3160:	01 90       	ld	r0, Z+
    3162:	f0 81       	ld	r31, Z
    3164:	e0 2d       	mov	r30, r0
    3166:	81 81       	ldd	r24, Z+1	; 0x01
    3168:	b1 01       	movw	r22, r2
    316a:	a6 01       	movw	r20, r12
    316c:	95 01       	movw	r18, r10
    316e:	01 e0       	ldi	r16, 0x01	; 1
    3170:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    3174:	88 23       	and	r24, r24
    3176:	59 f0       	breq	.+22     	; 0x318e <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    3178:	ab 81       	ldd	r26, Y+3	; 0x03
    317a:	bc 81       	ldd	r27, Y+4	; 0x04
    317c:	14 96       	adiw	r26, 0x04	; 4
    317e:	8c 91       	ld	r24, X
    3180:	14 97       	sbiw	r26, 0x04	; 4
    3182:	80 68       	ori	r24, 0x80	; 128
    3184:	14 96       	adiw	r26, 0x04	; 4
    3186:	8c 93       	st	X, r24
    3188:	77 24       	eor	r7, r7
    318a:	73 94       	inc	r7
    318c:	51 c0       	rjmp	.+162    	; 0x3230 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    318e:	eb 81       	ldd	r30, Y+3	; 0x03
    3190:	fc 81       	ldd	r31, Y+4	; 0x04
    3192:	a6 8a       	std	Z+22, r10	; 0x16
    3194:	b7 8a       	std	Z+23, r11	; 0x17
    3196:	c0 8e       	std	Z+24, r12	; 0x18
    3198:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    319a:	85 81       	ldd	r24, Z+5	; 0x05
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    31a0:	ab 81       	ldd	r26, Y+3	; 0x03
    31a2:	bc 81       	ldd	r27, Y+4	; 0x04
    31a4:	16 96       	adiw	r26, 0x06	; 6
    31a6:	2d 91       	ld	r18, X+
    31a8:	3d 91       	ld	r19, X+
    31aa:	4d 91       	ld	r20, X+
    31ac:	5c 91       	ld	r21, X
    31ae:	19 97       	sbiw	r26, 0x09	; 9
    31b0:	c9 01       	movw	r24, r18
    31b2:	91 70       	andi	r25, 0x01	; 1
    31b4:	e0 e0       	ldi	r30, 0x00	; 0
    31b6:	f2 e0       	ldi	r31, 0x02	; 2
    31b8:	e8 1b       	sub	r30, r24
    31ba:	f9 0b       	sbc	r31, r25
    31bc:	b4 01       	movw	r22, r8
    31be:	e8 15       	cp	r30, r8
    31c0:	f9 05       	cpc	r31, r9
    31c2:	08 f4       	brcc	.+2      	; 0x31c6 <f_read+0x354>
    31c4:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    31c6:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    31c8:	f9 01       	movw	r30, r18
    31ca:	f1 70       	andi	r31, 0x01	; 1
    31cc:	b0 96       	adiw	r30, 0x20	; 32
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	e8 0f       	add	r30, r24
    31d4:	f9 1f       	adc	r31, r25
    31d6:	92 01       	movw	r18, r4
    31d8:	04 c0       	rjmp	.+8      	; 0x31e2 <f_read+0x370>
	while (cnt--) *d++ = *s++;
    31da:	81 91       	ld	r24, Z+
    31dc:	d9 01       	movw	r26, r18
    31de:	8d 93       	st	X+, r24
    31e0:	9d 01       	movw	r18, r26
    31e2:	01 50       	subi	r16, 0x01	; 1
    31e4:	10 40       	sbci	r17, 0x00	; 0
    31e6:	bf ef       	ldi	r27, 0xFF	; 255
    31e8:	0f 3f       	cpi	r16, 0xFF	; 255
    31ea:	1b 07       	cpc	r17, r27
    31ec:	b1 f7       	brne	.-20     	; 0x31da <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    31ee:	46 0e       	add	r4, r22
    31f0:	57 1e       	adc	r5, r23
    31f2:	cb 01       	movw	r24, r22
    31f4:	a0 e0       	ldi	r26, 0x00	; 0
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	eb 81       	ldd	r30, Y+3	; 0x03
    31fa:	fc 81       	ldd	r31, Y+4	; 0x04
    31fc:	26 81       	ldd	r18, Z+6	; 0x06
    31fe:	37 81       	ldd	r19, Z+7	; 0x07
    3200:	40 85       	ldd	r20, Z+8	; 0x08
    3202:	51 85       	ldd	r21, Z+9	; 0x09
    3204:	28 0f       	add	r18, r24
    3206:	39 1f       	adc	r19, r25
    3208:	4a 1f       	adc	r20, r26
    320a:	5b 1f       	adc	r21, r27
    320c:	26 83       	std	Z+6, r18	; 0x06
    320e:	37 83       	std	Z+7, r19	; 0x07
    3210:	40 87       	std	Z+8, r20	; 0x08
    3212:	51 87       	std	Z+9, r21	; 0x09
    3214:	e9 81       	ldd	r30, Y+1	; 0x01
    3216:	fa 81       	ldd	r31, Y+2	; 0x02
    3218:	80 81       	ld	r24, Z
    321a:	91 81       	ldd	r25, Z+1	; 0x01
    321c:	86 0f       	add	r24, r22
    321e:	97 1f       	adc	r25, r23
    3220:	80 83       	st	Z, r24
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	86 1a       	sub	r8, r22
    3226:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    3228:	81 14       	cp	r8, r1
    322a:	91 04       	cpc	r9, r1
    322c:	09 f0       	breq	.+2      	; 0x3230 <f_read+0x3be>
    322e:	7a ce       	rjmp	.-780    	; 0x2f24 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3230:	87 2d       	mov	r24, r7
    3232:	24 96       	adiw	r28, 0x04	; 4
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	df 90       	pop	r13
    3246:	cf 90       	pop	r12
    3248:	bf 90       	pop	r11
    324a:	af 90       	pop	r10
    324c:	9f 90       	pop	r9
    324e:	8f 90       	pop	r8
    3250:	7f 90       	pop	r7
    3252:	6f 90       	pop	r6
    3254:	5f 90       	pop	r5
    3256:	4f 90       	pop	r4
    3258:	3f 90       	pop	r3
    325a:	2f 90       	pop	r2
    325c:	08 95       	ret

0000325e <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    325e:	2f 92       	push	r2
    3260:	3f 92       	push	r3
    3262:	4f 92       	push	r4
    3264:	5f 92       	push	r5
    3266:	6f 92       	push	r6
    3268:	7f 92       	push	r7
    326a:	8f 92       	push	r8
    326c:	9f 92       	push	r9
    326e:	af 92       	push	r10
    3270:	bf 92       	push	r11
    3272:	cf 92       	push	r12
    3274:	df 92       	push	r13
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <f_write+0x26>
    3284:	0f 92       	push	r0
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	8b 83       	std	Y+3, r24	; 0x03
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	16 2f       	mov	r17, r22
    3290:	07 2f       	mov	r16, r23
    3292:	4a 01       	movw	r8, r20
    3294:	29 83       	std	Y+1, r18	; 0x01
    3296:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    3298:	d9 01       	movw	r26, r18
    329a:	1d 92       	st	X+, r1
    329c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    329e:	fc 01       	movw	r30, r24
    32a0:	62 81       	ldd	r22, Z+2	; 0x02
    32a2:	73 81       	ldd	r23, Z+3	; 0x03
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <validate>
    32ac:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    32ae:	88 23       	and	r24, r24
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <f_write+0x56>
    32b2:	02 c2       	rjmp	.+1028   	; 0x36b8 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    32b4:	ab 81       	ldd	r26, Y+3	; 0x03
    32b6:	bc 81       	ldd	r27, Y+4	; 0x04
    32b8:	14 96       	adiw	r26, 0x04	; 4
    32ba:	8c 91       	ld	r24, X
    32bc:	87 fd       	sbrc	r24, 7
    32be:	7c c0       	rjmp	.+248    	; 0x33b8 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    32c0:	81 fd       	sbrc	r24, 1
    32c2:	03 c0       	rjmp	.+6      	; 0x32ca <f_write+0x6c>
    32c4:	47 e0       	ldi	r20, 0x07	; 7
    32c6:	64 2e       	mov	r6, r20
    32c8:	f7 c1       	rjmp	.+1006   	; 0x36b8 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    32ca:	eb 81       	ldd	r30, Y+3	; 0x03
    32cc:	fc 81       	ldd	r31, Y+4	; 0x04
    32ce:	22 85       	ldd	r18, Z+10	; 0x0a
    32d0:	33 85       	ldd	r19, Z+11	; 0x0b
    32d2:	44 85       	ldd	r20, Z+12	; 0x0c
    32d4:	55 85       	ldd	r21, Z+13	; 0x0d
    32d6:	c4 01       	movw	r24, r8
    32d8:	a0 e0       	ldi	r26, 0x00	; 0
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	82 0f       	add	r24, r18
    32de:	93 1f       	adc	r25, r19
    32e0:	a4 1f       	adc	r26, r20
    32e2:	b5 1f       	adc	r27, r21
    32e4:	82 17       	cp	r24, r18
    32e6:	93 07       	cpc	r25, r19
    32e8:	a4 07       	cpc	r26, r20
    32ea:	b5 07       	cpc	r27, r21
    32ec:	10 f4       	brcc	.+4      	; 0x32f2 <f_write+0x94>
    32ee:	88 24       	eor	r8, r8
    32f0:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    32f2:	81 2f       	mov	r24, r17
    32f4:	90 2f       	mov	r25, r16
    32f6:	9c 01       	movw	r18, r24
    32f8:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    32fa:	30 e2       	ldi	r19, 0x20	; 32
    32fc:	23 2e       	mov	r2, r19
    32fe:	31 2c       	mov	r3, r1
    3300:	6b 81       	ldd	r22, Y+3	; 0x03
    3302:	7c 81       	ldd	r23, Y+4	; 0x04
    3304:	26 0e       	add	r2, r22
    3306:	37 1e       	adc	r3, r23
    3308:	b2 c1       	rjmp	.+868    	; 0x366e <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    330a:	ab 81       	ldd	r26, Y+3	; 0x03
    330c:	bc 81       	ldd	r27, Y+4	; 0x04
    330e:	16 96       	adiw	r26, 0x06	; 6
    3310:	2d 91       	ld	r18, X+
    3312:	3d 91       	ld	r19, X+
    3314:	4d 91       	ld	r20, X+
    3316:	5c 91       	ld	r21, X
    3318:	19 97       	sbiw	r26, 0x09	; 9
    331a:	da 01       	movw	r26, r20
    331c:	c9 01       	movw	r24, r18
    331e:	91 70       	andi	r25, 0x01	; 1
    3320:	a0 70       	andi	r26, 0x00	; 0
    3322:	b0 70       	andi	r27, 0x00	; 0
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	a1 05       	cpc	r26, r1
    3328:	b1 05       	cpc	r27, r1
    332a:	09 f0       	breq	.+2      	; 0x332e <f_write+0xd0>
    332c:	58 c1       	rjmp	.+688    	; 0x35de <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    332e:	ab 81       	ldd	r26, Y+3	; 0x03
    3330:	bc 81       	ldd	r27, Y+4	; 0x04
    3332:	ed 91       	ld	r30, X+
    3334:	fc 91       	ld	r31, X
    3336:	11 97       	sbiw	r26, 0x01	; 1
    3338:	15 96       	adiw	r26, 0x05	; 5
    333a:	9c 91       	ld	r25, X
    333c:	15 97       	sbiw	r26, 0x05	; 5
    333e:	82 81       	ldd	r24, Z+2	; 0x02
    3340:	98 17       	cp	r25, r24
    3342:	08 f4       	brcc	.+2      	; 0x3346 <f_write+0xe8>
    3344:	54 c0       	rjmp	.+168    	; 0x33ee <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    3346:	21 15       	cp	r18, r1
    3348:	31 05       	cpc	r19, r1
    334a:	41 05       	cpc	r20, r1
    334c:	51 05       	cpc	r21, r1
    334e:	c9 f4       	brne	.+50     	; 0x3382 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3350:	1e 96       	adiw	r26, 0x0e	; 14
    3352:	6d 91       	ld	r22, X+
    3354:	7d 91       	ld	r23, X+
    3356:	8d 91       	ld	r24, X+
    3358:	9c 91       	ld	r25, X
    335a:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    335c:	61 15       	cp	r22, r1
    335e:	71 05       	cpc	r23, r1
    3360:	81 05       	cpc	r24, r1
    3362:	91 05       	cpc	r25, r1
    3364:	f9 f4       	brne	.+62     	; 0x33a4 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3366:	cf 01       	movw	r24, r30
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	70 e0       	ldi	r23, 0x00	; 0
    3370:	0e 94 de 0b 	call	0x17bc	; 0x17bc <create_chain>
    3374:	eb 81       	ldd	r30, Y+3	; 0x03
    3376:	fc 81       	ldd	r31, Y+4	; 0x04
    3378:	66 87       	std	Z+14, r22	; 0x0e
    337a:	77 87       	std	Z+15, r23	; 0x0f
    337c:	80 8b       	std	Z+16, r24	; 0x10
    337e:	91 8b       	std	Z+17, r25	; 0x11
    3380:	0b c0       	rjmp	.+22     	; 0x3398 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    3382:	ab 81       	ldd	r26, Y+3	; 0x03
    3384:	bc 81       	ldd	r27, Y+4	; 0x04
    3386:	52 96       	adiw	r26, 0x12	; 18
    3388:	4d 91       	ld	r20, X+
    338a:	5d 91       	ld	r21, X+
    338c:	6d 91       	ld	r22, X+
    338e:	7c 91       	ld	r23, X
    3390:	55 97       	sbiw	r26, 0x15	; 21
    3392:	cf 01       	movw	r24, r30
    3394:	0e 94 de 0b 	call	0x17bc	; 0x17bc <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    3398:	61 15       	cp	r22, r1
    339a:	71 05       	cpc	r23, r1
    339c:	81 05       	cpc	r24, r1
    339e:	91 05       	cpc	r25, r1
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <f_write+0x146>
    33a2:	69 c1       	rjmp	.+722    	; 0x3676 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    33a4:	61 30       	cpi	r22, 0x01	; 1
    33a6:	71 05       	cpc	r23, r1
    33a8:	81 05       	cpc	r24, r1
    33aa:	91 05       	cpc	r25, r1
    33ac:	41 f4       	brne	.+16     	; 0x33be <f_write+0x160>
    33ae:	eb 81       	ldd	r30, Y+3	; 0x03
    33b0:	fc 81       	ldd	r31, Y+4	; 0x04
    33b2:	84 81       	ldd	r24, Z+4	; 0x04
    33b4:	80 68       	ori	r24, 0x80	; 128
    33b6:	84 83       	std	Z+4, r24	; 0x04
    33b8:	22 e0       	ldi	r18, 0x02	; 2
    33ba:	62 2e       	mov	r6, r18
    33bc:	7d c1       	rjmp	.+762    	; 0x36b8 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    33be:	6f 3f       	cpi	r22, 0xFF	; 255
    33c0:	ff ef       	ldi	r31, 0xFF	; 255
    33c2:	7f 07       	cpc	r23, r31
    33c4:	ff ef       	ldi	r31, 0xFF	; 255
    33c6:	8f 07       	cpc	r24, r31
    33c8:	ff ef       	ldi	r31, 0xFF	; 255
    33ca:	9f 07       	cpc	r25, r31
    33cc:	49 f4       	brne	.+18     	; 0x33e0 <f_write+0x182>
    33ce:	ab 81       	ldd	r26, Y+3	; 0x03
    33d0:	bc 81       	ldd	r27, Y+4	; 0x04
    33d2:	14 96       	adiw	r26, 0x04	; 4
    33d4:	8c 91       	ld	r24, X
    33d6:	14 97       	sbiw	r26, 0x04	; 4
    33d8:	80 68       	ori	r24, 0x80	; 128
    33da:	14 96       	adiw	r26, 0x04	; 4
    33dc:	8c 93       	st	X, r24
    33de:	ee c0       	rjmp	.+476    	; 0x35bc <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    33e0:	eb 81       	ldd	r30, Y+3	; 0x03
    33e2:	fc 81       	ldd	r31, Y+4	; 0x04
    33e4:	62 8b       	std	Z+18, r22	; 0x12
    33e6:	73 8b       	std	Z+19, r23	; 0x13
    33e8:	84 8b       	std	Z+20, r24	; 0x14
    33ea:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    33ec:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    33ee:	ab 81       	ldd	r26, Y+3	; 0x03
    33f0:	bc 81       	ldd	r27, Y+4	; 0x04
    33f2:	14 96       	adiw	r26, 0x04	; 4
    33f4:	8c 91       	ld	r24, X
    33f6:	14 97       	sbiw	r26, 0x04	; 4
    33f8:	86 ff       	sbrs	r24, 6
    33fa:	1b c0       	rjmp	.+54     	; 0x3432 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    33fc:	ed 91       	ld	r30, X+
    33fe:	fc 91       	ld	r31, X
    3400:	11 97       	sbiw	r26, 0x01	; 1
    3402:	56 96       	adiw	r26, 0x16	; 22
    3404:	2d 91       	ld	r18, X+
    3406:	3d 91       	ld	r19, X+
    3408:	4d 91       	ld	r20, X+
    340a:	5c 91       	ld	r21, X
    340c:	59 97       	sbiw	r26, 0x19	; 25
    340e:	81 81       	ldd	r24, Z+1	; 0x01
    3410:	b1 01       	movw	r22, r2
    3412:	01 e0       	ldi	r16, 0x01	; 1
    3414:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    3418:	eb 81       	ldd	r30, Y+3	; 0x03
    341a:	fc 81       	ldd	r31, Y+4	; 0x04
    341c:	94 81       	ldd	r25, Z+4	; 0x04
    341e:	88 23       	and	r24, r24
    3420:	19 f0       	breq	.+6      	; 0x3428 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3422:	90 68       	ori	r25, 0x80	; 128
    3424:	94 83       	std	Z+4, r25	; 0x04
    3426:	ca c0       	rjmp	.+404    	; 0x35bc <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    3428:	9f 7b       	andi	r25, 0xBF	; 191
    342a:	ab 81       	ldd	r26, Y+3	; 0x03
    342c:	bc 81       	ldd	r27, Y+4	; 0x04
    342e:	14 96       	adiw	r26, 0x04	; 4
    3430:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3432:	eb 81       	ldd	r30, Y+3	; 0x03
    3434:	fc 81       	ldd	r31, Y+4	; 0x04
    3436:	00 81       	ld	r16, Z
    3438:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    343a:	22 89       	ldd	r18, Z+18	; 0x12
    343c:	33 89       	ldd	r19, Z+19	; 0x13
    343e:	44 89       	ldd	r20, Z+20	; 0x14
    3440:	55 89       	ldd	r21, Z+21	; 0x15
    3442:	22 50       	subi	r18, 0x02	; 2
    3444:	30 40       	sbci	r19, 0x00	; 0
    3446:	40 40       	sbci	r20, 0x00	; 0
    3448:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    344a:	f8 01       	movw	r30, r16
    344c:	82 8d       	ldd	r24, Z+26	; 0x1a
    344e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3450:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3452:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3454:	02 97       	sbiw	r24, 0x02	; 2
    3456:	a1 09       	sbc	r26, r1
    3458:	b1 09       	sbc	r27, r1
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	4a 07       	cpc	r20, r26
    3460:	5b 07       	cpc	r21, r27
    3462:	b8 f4       	brcc	.+46     	; 0x3492 <f_write+0x234>
	return clst * fs->csize + fs->database;
    3464:	72 80       	ldd	r7, Z+2	; 0x02
    3466:	67 2d       	mov	r22, r7
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    3472:	9b 01       	movw	r18, r22
    3474:	ac 01       	movw	r20, r24
    3476:	f8 01       	movw	r30, r16
    3478:	86 a1       	ldd	r24, Z+38	; 0x26
    347a:	97 a1       	ldd	r25, Z+39	; 0x27
    347c:	a0 a5       	ldd	r26, Z+40	; 0x28
    347e:	b1 a5       	ldd	r27, Z+41	; 0x29
    3480:	28 0f       	add	r18, r24
    3482:	39 1f       	adc	r19, r25
    3484:	4a 1f       	adc	r20, r26
    3486:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3488:	21 15       	cp	r18, r1
    348a:	31 05       	cpc	r19, r1
    348c:	41 05       	cpc	r20, r1
    348e:	51 05       	cpc	r21, r1
    3490:	49 f4       	brne	.+18     	; 0x34a4 <f_write+0x246>
    3492:	ab 81       	ldd	r26, Y+3	; 0x03
    3494:	bc 81       	ldd	r27, Y+4	; 0x04
    3496:	14 96       	adiw	r26, 0x04	; 4
    3498:	8c 91       	ld	r24, X
    349a:	14 97       	sbiw	r26, 0x04	; 4
    349c:	80 68       	ori	r24, 0x80	; 128
    349e:	14 96       	adiw	r26, 0x04	; 4
    34a0:	8c 93       	st	X, r24
    34a2:	8a cf       	rjmp	.-236    	; 0x33b8 <f_write+0x15a>
			sect += fp->csect;
    34a4:	eb 81       	ldd	r30, Y+3	; 0x03
    34a6:	fc 81       	ldd	r31, Y+4	; 0x04
    34a8:	85 81       	ldd	r24, Z+5	; 0x05
    34aa:	69 01       	movw	r12, r18
    34ac:	7a 01       	movw	r14, r20
    34ae:	c8 0e       	add	r12, r24
    34b0:	d1 1c       	adc	r13, r1
    34b2:	e1 1c       	adc	r14, r1
    34b4:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    34b6:	54 01       	movw	r10, r8
    34b8:	ab 2c       	mov	r10, r11
    34ba:	bb 24       	eor	r11, r11
    34bc:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    34be:	a1 14       	cp	r10, r1
    34c0:	b1 04       	cpc	r11, r1
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <f_write+0x268>
    34c4:	53 c0       	rjmp	.+166    	; 0x356c <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	c5 01       	movw	r24, r10
    34cc:	82 0f       	add	r24, r18
    34ce:	93 1f       	adc	r25, r19
    34d0:	67 2d       	mov	r22, r7
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	68 17       	cp	r22, r24
    34d6:	79 07       	cpc	r23, r25
    34d8:	18 f4       	brcc	.+6      	; 0x34e0 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    34da:	5b 01       	movw	r10, r22
    34dc:	a2 1a       	sub	r10, r18
    34de:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    34e0:	d8 01       	movw	r26, r16
    34e2:	11 96       	adiw	r26, 0x01	; 1
    34e4:	8c 91       	ld	r24, X
    34e6:	b2 01       	movw	r22, r4
    34e8:	a7 01       	movw	r20, r14
    34ea:	96 01       	movw	r18, r12
    34ec:	0a 2d       	mov	r16, r10
    34ee:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    34f2:	88 23       	and	r24, r24
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <f_write+0x29a>
    34f6:	5d c0       	rjmp	.+186    	; 0x35b2 <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    34f8:	ab 81       	ldd	r26, Y+3	; 0x03
    34fa:	bc 81       	ldd	r27, Y+4	; 0x04
    34fc:	56 96       	adiw	r26, 0x16	; 22
    34fe:	2d 91       	ld	r18, X+
    3500:	3d 91       	ld	r19, X+
    3502:	4d 91       	ld	r20, X+
    3504:	5c 91       	ld	r21, X
    3506:	59 97       	sbiw	r26, 0x19	; 25
    3508:	2c 19       	sub	r18, r12
    350a:	3d 09       	sbc	r19, r13
    350c:	4e 09       	sbc	r20, r14
    350e:	5f 09       	sbc	r21, r15
    3510:	c5 01       	movw	r24, r10
    3512:	a0 e0       	ldi	r26, 0x00	; 0
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	28 17       	cp	r18, r24
    3518:	39 07       	cpc	r19, r25
    351a:	4a 07       	cpc	r20, r26
    351c:	5b 07       	cpc	r21, r27
    351e:	c8 f4       	brcc	.+50     	; 0x3552 <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3520:	19 e0       	ldi	r17, 0x09	; 9
    3522:	22 0f       	add	r18, r18
    3524:	33 1f       	adc	r19, r19
    3526:	44 1f       	adc	r20, r20
    3528:	55 1f       	adc	r21, r21
    352a:	1a 95       	dec	r17
    352c:	d1 f7       	brne	.-12     	; 0x3522 <f_write+0x2c4>
    352e:	f2 01       	movw	r30, r4
    3530:	e2 0f       	add	r30, r18
    3532:	f3 1f       	adc	r31, r19
    3534:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    3536:	9f 01       	movw	r18, r30
    3538:	20 50       	subi	r18, 0x00	; 0
    353a:	3e 4f       	sbci	r19, 0xFE	; 254
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <f_write+0x2e4>
    353e:	81 91       	ld	r24, Z+
    3540:	8d 93       	st	X+, r24
    3542:	e2 17       	cp	r30, r18
    3544:	f3 07       	cpc	r31, r19
    3546:	d9 f7       	brne	.-10     	; 0x353e <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    3548:	eb 81       	ldd	r30, Y+3	; 0x03
    354a:	fc 81       	ldd	r31, Y+4	; 0x04
    354c:	84 81       	ldd	r24, Z+4	; 0x04
    354e:	8f 7b       	andi	r24, 0xBF	; 191
    3550:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3552:	ab 81       	ldd	r26, Y+3	; 0x03
    3554:	bc 81       	ldd	r27, Y+4	; 0x04
    3556:	15 96       	adiw	r26, 0x05	; 5
    3558:	8c 91       	ld	r24, X
    355a:	15 97       	sbiw	r26, 0x05	; 5
    355c:	8a 0d       	add	r24, r10
    355e:	15 96       	adiw	r26, 0x05	; 5
    3560:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3562:	b5 01       	movw	r22, r10
    3564:	76 2f       	mov	r23, r22
    3566:	66 27       	eor	r22, r22
    3568:	77 0f       	add	r23, r23
    356a:	64 c0       	rjmp	.+200    	; 0x3634 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    356c:	eb 81       	ldd	r30, Y+3	; 0x03
    356e:	fc 81       	ldd	r31, Y+4	; 0x04
    3570:	86 89       	ldd	r24, Z+22	; 0x16
    3572:	97 89       	ldd	r25, Z+23	; 0x17
    3574:	a0 8d       	ldd	r26, Z+24	; 0x18
    3576:	b1 8d       	ldd	r27, Z+25	; 0x19
    3578:	8c 15       	cp	r24, r12
    357a:	9d 05       	cpc	r25, r13
    357c:	ae 05       	cpc	r26, r14
    357e:	bf 05       	cpc	r27, r15
    3580:	01 f1       	breq	.+64     	; 0x35c2 <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    3582:	26 81       	ldd	r18, Z+6	; 0x06
    3584:	37 81       	ldd	r19, Z+7	; 0x07
    3586:	40 85       	ldd	r20, Z+8	; 0x08
    3588:	51 85       	ldd	r21, Z+9	; 0x09
    358a:	82 85       	ldd	r24, Z+10	; 0x0a
    358c:	93 85       	ldd	r25, Z+11	; 0x0b
    358e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3590:	b5 85       	ldd	r27, Z+13	; 0x0d
    3592:	28 17       	cp	r18, r24
    3594:	39 07       	cpc	r19, r25
    3596:	4a 07       	cpc	r20, r26
    3598:	5b 07       	cpc	r21, r27
    359a:	98 f4       	brcc	.+38     	; 0x35c2 <f_write+0x364>
    359c:	d8 01       	movw	r26, r16
    359e:	11 96       	adiw	r26, 0x01	; 1
    35a0:	8c 91       	ld	r24, X
    35a2:	b1 01       	movw	r22, r2
    35a4:	a7 01       	movw	r20, r14
    35a6:	96 01       	movw	r18, r12
    35a8:	01 e0       	ldi	r16, 0x01	; 1
    35aa:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    35ae:	88 23       	and	r24, r24
    35b0:	41 f0       	breq	.+16     	; 0x35c2 <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    35b2:	eb 81       	ldd	r30, Y+3	; 0x03
    35b4:	fc 81       	ldd	r31, Y+4	; 0x04
    35b6:	84 81       	ldd	r24, Z+4	; 0x04
    35b8:	80 68       	ori	r24, 0x80	; 128
    35ba:	84 83       	std	Z+4, r24	; 0x04
    35bc:	66 24       	eor	r6, r6
    35be:	63 94       	inc	r6
    35c0:	7b c0       	rjmp	.+246    	; 0x36b8 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    35c2:	ab 81       	ldd	r26, Y+3	; 0x03
    35c4:	bc 81       	ldd	r27, Y+4	; 0x04
    35c6:	56 96       	adiw	r26, 0x16	; 22
    35c8:	cd 92       	st	X+, r12
    35ca:	dd 92       	st	X+, r13
    35cc:	ed 92       	st	X+, r14
    35ce:	fc 92       	st	X, r15
    35d0:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    35d2:	15 96       	adiw	r26, 0x05	; 5
    35d4:	8c 91       	ld	r24, X
    35d6:	15 97       	sbiw	r26, 0x05	; 5
    35d8:	8f 5f       	subi	r24, 0xFF	; 255
    35da:	15 96       	adiw	r26, 0x05	; 5
    35dc:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    35de:	eb 81       	ldd	r30, Y+3	; 0x03
    35e0:	fc 81       	ldd	r31, Y+4	; 0x04
    35e2:	26 81       	ldd	r18, Z+6	; 0x06
    35e4:	37 81       	ldd	r19, Z+7	; 0x07
    35e6:	40 85       	ldd	r20, Z+8	; 0x08
    35e8:	51 85       	ldd	r21, Z+9	; 0x09
    35ea:	c9 01       	movw	r24, r18
    35ec:	91 70       	andi	r25, 0x01	; 1
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	72 e0       	ldi	r23, 0x02	; 2
    35f2:	68 1b       	sub	r22, r24
    35f4:	79 0b       	sbc	r23, r25
    35f6:	cb 01       	movw	r24, r22
    35f8:	b4 01       	movw	r22, r8
    35fa:	88 15       	cp	r24, r8
    35fc:	99 05       	cpc	r25, r9
    35fe:	08 f4       	brcc	.+2      	; 0x3602 <f_write+0x3a4>
    3600:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3602:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3604:	f9 01       	movw	r30, r18
    3606:	f1 70       	andi	r31, 0x01	; 1
    3608:	b0 96       	adiw	r30, 0x20	; 32
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	9c 81       	ldd	r25, Y+4	; 0x04
    360e:	e8 0f       	add	r30, r24
    3610:	f9 1f       	adc	r31, r25
    3612:	92 01       	movw	r18, r4
    3614:	04 c0       	rjmp	.+8      	; 0x361e <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3616:	d9 01       	movw	r26, r18
    3618:	8d 91       	ld	r24, X+
    361a:	9d 01       	movw	r18, r26
    361c:	81 93       	st	Z+, r24
    361e:	01 50       	subi	r16, 0x01	; 1
    3620:	10 40       	sbci	r17, 0x00	; 0
    3622:	bf ef       	ldi	r27, 0xFF	; 255
    3624:	0f 3f       	cpi	r16, 0xFF	; 255
    3626:	1b 07       	cpc	r17, r27
    3628:	b1 f7       	brne	.-20     	; 0x3616 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    362a:	eb 81       	ldd	r30, Y+3	; 0x03
    362c:	fc 81       	ldd	r31, Y+4	; 0x04
    362e:	84 81       	ldd	r24, Z+4	; 0x04
    3630:	80 64       	ori	r24, 0x40	; 64
    3632:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3634:	46 0e       	add	r4, r22
    3636:	57 1e       	adc	r5, r23
    3638:	cb 01       	movw	r24, r22
    363a:	a0 e0       	ldi	r26, 0x00	; 0
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	eb 81       	ldd	r30, Y+3	; 0x03
    3640:	fc 81       	ldd	r31, Y+4	; 0x04
    3642:	26 81       	ldd	r18, Z+6	; 0x06
    3644:	37 81       	ldd	r19, Z+7	; 0x07
    3646:	40 85       	ldd	r20, Z+8	; 0x08
    3648:	51 85       	ldd	r21, Z+9	; 0x09
    364a:	28 0f       	add	r18, r24
    364c:	39 1f       	adc	r19, r25
    364e:	4a 1f       	adc	r20, r26
    3650:	5b 1f       	adc	r21, r27
    3652:	26 83       	std	Z+6, r18	; 0x06
    3654:	37 83       	std	Z+7, r19	; 0x07
    3656:	40 87       	std	Z+8, r20	; 0x08
    3658:	51 87       	std	Z+9, r21	; 0x09
    365a:	e9 81       	ldd	r30, Y+1	; 0x01
    365c:	fa 81       	ldd	r31, Y+2	; 0x02
    365e:	80 81       	ld	r24, Z
    3660:	91 81       	ldd	r25, Z+1	; 0x01
    3662:	86 0f       	add	r24, r22
    3664:	97 1f       	adc	r25, r23
    3666:	80 83       	st	Z, r24
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	86 1a       	sub	r8, r22
    366c:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    366e:	81 14       	cp	r8, r1
    3670:	91 04       	cpc	r9, r1
    3672:	09 f0       	breq	.+2      	; 0x3676 <f_write+0x418>
    3674:	4a ce       	rjmp	.-876    	; 0x330a <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3676:	ab 81       	ldd	r26, Y+3	; 0x03
    3678:	bc 81       	ldd	r27, Y+4	; 0x04
    367a:	16 96       	adiw	r26, 0x06	; 6
    367c:	2d 91       	ld	r18, X+
    367e:	3d 91       	ld	r19, X+
    3680:	4d 91       	ld	r20, X+
    3682:	5c 91       	ld	r21, X
    3684:	19 97       	sbiw	r26, 0x09	; 9
    3686:	1a 96       	adiw	r26, 0x0a	; 10
    3688:	8d 91       	ld	r24, X+
    368a:	9d 91       	ld	r25, X+
    368c:	0d 90       	ld	r0, X+
    368e:	bc 91       	ld	r27, X
    3690:	a0 2d       	mov	r26, r0
    3692:	82 17       	cp	r24, r18
    3694:	93 07       	cpc	r25, r19
    3696:	a4 07       	cpc	r26, r20
    3698:	b5 07       	cpc	r27, r21
    369a:	30 f4       	brcc	.+12     	; 0x36a8 <f_write+0x44a>
    369c:	eb 81       	ldd	r30, Y+3	; 0x03
    369e:	fc 81       	ldd	r31, Y+4	; 0x04
    36a0:	22 87       	std	Z+10, r18	; 0x0a
    36a2:	33 87       	std	Z+11, r19	; 0x0b
    36a4:	44 87       	std	Z+12, r20	; 0x0c
    36a6:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    36a8:	ab 81       	ldd	r26, Y+3	; 0x03
    36aa:	bc 81       	ldd	r27, Y+4	; 0x04
    36ac:	14 96       	adiw	r26, 0x04	; 4
    36ae:	8c 91       	ld	r24, X
    36b0:	14 97       	sbiw	r26, 0x04	; 4
    36b2:	80 62       	ori	r24, 0x20	; 32
    36b4:	14 96       	adiw	r26, 0x04	; 4
    36b6:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    36b8:	86 2d       	mov	r24, r6
    36ba:	24 96       	adiw	r28, 0x04	; 4
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
    36c8:	ff 90       	pop	r15
    36ca:	ef 90       	pop	r14
    36cc:	df 90       	pop	r13
    36ce:	cf 90       	pop	r12
    36d0:	bf 90       	pop	r11
    36d2:	af 90       	pop	r10
    36d4:	9f 90       	pop	r9
    36d6:	8f 90       	pop	r8
    36d8:	7f 90       	pop	r7
    36da:	6f 90       	pop	r6
    36dc:	5f 90       	pop	r5
    36de:	4f 90       	pop	r4
    36e0:	3f 90       	pop	r3
    36e2:	2f 90       	pop	r2
    36e4:	08 95       	ret

000036e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    36e6:	0f 93       	push	r16
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    36ee:	6a 81       	ldd	r22, Y+2	; 0x02
    36f0:	7b 81       	ldd	r23, Y+3	; 0x03
    36f2:	88 81       	ld	r24, Y
    36f4:	99 81       	ldd	r25, Y+1	; 0x01
    36f6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <validate>
    36fa:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    36fc:	88 23       	and	r24, r24
    36fe:	09 f0       	breq	.+2      	; 0x3702 <f_sync+0x1c>
    3700:	65 c0       	rjmp	.+202    	; 0x37cc <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3702:	8c 81       	ldd	r24, Y+4	; 0x04
    3704:	85 ff       	sbrs	r24, 5
    3706:	62 c0       	rjmp	.+196    	; 0x37cc <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    3708:	86 ff       	sbrs	r24, 6
    370a:	14 c0       	rjmp	.+40     	; 0x3734 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    370c:	e8 81       	ld	r30, Y
    370e:	f9 81       	ldd	r31, Y+1	; 0x01
    3710:	be 01       	movw	r22, r28
    3712:	60 5e       	subi	r22, 0xE0	; 224
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	2e 89       	ldd	r18, Y+22	; 0x16
    3718:	3f 89       	ldd	r19, Y+23	; 0x17
    371a:	48 8d       	ldd	r20, Y+24	; 0x18
    371c:	59 8d       	ldd	r21, Y+25	; 0x19
    371e:	81 81       	ldd	r24, Z+1	; 0x01
    3720:	01 e0       	ldi	r16, 0x01	; 1
    3722:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    3726:	88 23       	and	r24, r24
    3728:	11 f0       	breq	.+4      	; 0x372e <f_sync+0x48>
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	4f c0       	rjmp	.+158    	; 0x37cc <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    372e:	8c 81       	ldd	r24, Y+4	; 0x04
    3730:	8f 7b       	andi	r24, 0xBF	; 191
    3732:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3734:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3736:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3738:	6c 8d       	ldd	r22, Y+28	; 0x1c
    373a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    373c:	88 81       	ld	r24, Y
    373e:	99 81       	ldd	r25, Y+1	; 0x01
    3740:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    3744:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3746:	88 23       	and	r24, r24
    3748:	09 f0       	breq	.+2      	; 0x374c <f_sync+0x66>
    374a:	40 c0       	rjmp	.+128    	; 0x37cc <f_sync+0xe6>
				dir = fp->dir_ptr;
    374c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    374e:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3750:	83 85       	ldd	r24, Z+11	; 0x0b
    3752:	80 62       	ori	r24, 0x20	; 32
    3754:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3756:	8a 85       	ldd	r24, Y+10	; 0x0a
    3758:	84 8f       	std	Z+28, r24	; 0x1c
    375a:	8b 85       	ldd	r24, Y+11	; 0x0b
    375c:	85 8f       	std	Z+29, r24	; 0x1d
    375e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3760:	9b 85       	ldd	r25, Y+11	; 0x0b
    3762:	ac 85       	ldd	r26, Y+12	; 0x0c
    3764:	bd 85       	ldd	r27, Y+13	; 0x0d
    3766:	cd 01       	movw	r24, r26
    3768:	aa 27       	eor	r26, r26
    376a:	bb 27       	eor	r27, r27
    376c:	86 8f       	std	Z+30, r24	; 0x1e
    376e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3770:	9b 85       	ldd	r25, Y+11	; 0x0b
    3772:	ac 85       	ldd	r26, Y+12	; 0x0c
    3774:	bd 85       	ldd	r27, Y+13	; 0x0d
    3776:	8b 2f       	mov	r24, r27
    3778:	99 27       	eor	r25, r25
    377a:	aa 27       	eor	r26, r26
    377c:	bb 27       	eor	r27, r27
    377e:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    3780:	8e 85       	ldd	r24, Y+14	; 0x0e
    3782:	82 8f       	std	Z+26, r24	; 0x1a
    3784:	8f 85       	ldd	r24, Y+15	; 0x0f
    3786:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    3788:	8e 85       	ldd	r24, Y+14	; 0x0e
    378a:	9f 85       	ldd	r25, Y+15	; 0x0f
    378c:	a8 89       	ldd	r26, Y+16	; 0x10
    378e:	b9 89       	ldd	r27, Y+17	; 0x11
    3790:	cd 01       	movw	r24, r26
    3792:	aa 27       	eor	r26, r26
    3794:	bb 27       	eor	r27, r27
    3796:	84 8b       	std	Z+20, r24	; 0x14
    3798:	8e 85       	ldd	r24, Y+14	; 0x0e
    379a:	9f 85       	ldd	r25, Y+15	; 0x0f
    379c:	a8 89       	ldd	r26, Y+16	; 0x10
    379e:	b9 89       	ldd	r27, Y+17	; 0x11
    37a0:	cd 01       	movw	r24, r26
    37a2:	aa 27       	eor	r26, r26
    37a4:	bb 27       	eor	r27, r27
    37a6:	89 2f       	mov	r24, r25
    37a8:	99 27       	eor	r25, r25
    37aa:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    37ac:	16 8a       	std	Z+22, r1	; 0x16
    37ae:	17 8a       	std	Z+23, r1	; 0x17
    37b0:	10 8e       	std	Z+24, r1	; 0x18
    37b2:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    37b4:	8c 81       	ldd	r24, Y+4	; 0x04
    37b6:	8f 7d       	andi	r24, 0xDF	; 223
    37b8:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    37ba:	e8 81       	ld	r30, Y
    37bc:	f9 81       	ldd	r31, Y+1	; 0x01
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    37c2:	88 81       	ld	r24, Y
    37c4:	99 81       	ldd	r25, Y+1	; 0x01
    37c6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sync>
    37ca:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    37cc:	89 2f       	mov	r24, r25
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	0f 91       	pop	r16
    37d4:	08 95       	ret

000037d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    37dc:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    37e0:	88 23       	and	r24, r24
    37e2:	11 f4       	brne	.+4      	; 0x37e8 <f_close+0x12>
    37e4:	18 82       	st	Y, r1
    37e6:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	08 95       	ret

000037ee <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    37ee:	2f 92       	push	r2
    37f0:	3f 92       	push	r3
    37f2:	4f 92       	push	r4
    37f4:	5f 92       	push	r5
    37f6:	6f 92       	push	r6
    37f8:	7f 92       	push	r7
    37fa:	8f 92       	push	r8
    37fc:	9f 92       	push	r9
    37fe:	af 92       	push	r10
    3800:	bf 92       	push	r11
    3802:	cf 92       	push	r12
    3804:	df 92       	push	r13
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	28 97       	sbiw	r28, 0x08	; 8
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	8f 83       	std	Y+7, r24	; 0x07
    381a:	98 87       	std	Y+8, r25	; 0x08
    381c:	3a 01       	movw	r6, r20
    381e:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3820:	dc 01       	movw	r26, r24
    3822:	12 96       	adiw	r26, 0x02	; 2
    3824:	6d 91       	ld	r22, X+
    3826:	7c 91       	ld	r23, X
    3828:	13 97       	sbiw	r26, 0x03	; 3
    382a:	8d 91       	ld	r24, X+
    382c:	9c 91       	ld	r25, X
    382e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <validate>
    3832:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3834:	88 23       	and	r24, r24
    3836:	09 f0       	breq	.+2      	; 0x383a <f_lseek+0x4c>
    3838:	f3 c1       	rjmp	.+998    	; 0x3c20 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    383a:	ef 81       	ldd	r30, Y+7	; 0x07
    383c:	f8 85       	ldd	r31, Y+8	; 0x08
    383e:	84 81       	ldd	r24, Z+4	; 0x04
    3840:	87 fd       	sbrc	r24, 7
    3842:	98 c0       	rjmp	.+304    	; 0x3974 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3844:	af 81       	ldd	r26, Y+7	; 0x07
    3846:	b8 85       	ldd	r27, Y+8	; 0x08
    3848:	1a 96       	adiw	r26, 0x0a	; 10
    384a:	ad 90       	ld	r10, X+
    384c:	bd 90       	ld	r11, X+
    384e:	cd 90       	ld	r12, X+
    3850:	dc 90       	ld	r13, X
    3852:	1d 97       	sbiw	r26, 0x0d	; 13
    3854:	a6 14       	cp	r10, r6
    3856:	b7 04       	cpc	r11, r7
    3858:	c8 04       	cpc	r12, r8
    385a:	d9 04       	cpc	r13, r9
    385c:	10 f4       	brcc	.+4      	; 0x3862 <f_lseek+0x74>
    385e:	81 ff       	sbrs	r24, 1
    3860:	02 c0       	rjmp	.+4      	; 0x3866 <f_lseek+0x78>
    3862:	64 01       	movw	r12, r8
    3864:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3866:	ef 81       	ldd	r30, Y+7	; 0x07
    3868:	f8 85       	ldd	r31, Y+8	; 0x08
    386a:	26 81       	ldd	r18, Z+6	; 0x06
    386c:	37 81       	ldd	r19, Z+7	; 0x07
    386e:	40 85       	ldd	r20, Z+8	; 0x08
    3870:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3872:	16 82       	std	Z+6, r1	; 0x06
    3874:	17 82       	std	Z+7, r1	; 0x07
    3876:	10 86       	std	Z+8, r1	; 0x08
    3878:	11 86       	std	Z+9, r1	; 0x09
    387a:	8f ef       	ldi	r24, 0xFF	; 255
    387c:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    387e:	a1 14       	cp	r10, r1
    3880:	b1 04       	cpc	r11, r1
    3882:	c1 04       	cpc	r12, r1
    3884:	d1 04       	cpc	r13, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <f_lseek+0x9c>
    3888:	5f c1       	rjmp	.+702    	; 0x3b48 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    388a:	01 90       	ld	r0, Z+
    388c:	f0 81       	ld	r31, Z
    388e:	e0 2d       	mov	r30, r0
    3890:	e9 83       	std	Y+1, r30	; 0x01
    3892:	fa 83       	std	Y+2, r31	; 0x02
    3894:	82 81       	ldd	r24, Z+2	; 0x02
    3896:	68 2e       	mov	r6, r24
    3898:	77 24       	eor	r7, r7
    389a:	88 24       	eor	r8, r8
    389c:	99 24       	eor	r9, r9
    389e:	89 e0       	ldi	r24, 0x09	; 9
    38a0:	66 0c       	add	r6, r6
    38a2:	77 1c       	adc	r7, r7
    38a4:	88 1c       	adc	r8, r8
    38a6:	99 1c       	adc	r9, r9
    38a8:	8a 95       	dec	r24
    38aa:	d1 f7       	brne	.-12     	; 0x38a0 <f_lseek+0xb2>
		if (ifptr > 0 &&
    38ac:	21 15       	cp	r18, r1
    38ae:	31 05       	cpc	r19, r1
    38b0:	41 05       	cpc	r20, r1
    38b2:	51 05       	cpc	r21, r1
    38b4:	f1 f1       	breq	.+124    	; 0x3932 <f_lseek+0x144>
    38b6:	19 01       	movw	r2, r18
    38b8:	2a 01       	movw	r4, r20
    38ba:	08 94       	sec
    38bc:	21 08       	sbc	r2, r1
    38be:	31 08       	sbc	r3, r1
    38c0:	41 08       	sbc	r4, r1
    38c2:	51 08       	sbc	r5, r1
    38c4:	c6 01       	movw	r24, r12
    38c6:	b5 01       	movw	r22, r10
    38c8:	61 50       	subi	r22, 0x01	; 1
    38ca:	70 40       	sbci	r23, 0x00	; 0
    38cc:	80 40       	sbci	r24, 0x00	; 0
    38ce:	90 40       	sbci	r25, 0x00	; 0
    38d0:	a4 01       	movw	r20, r8
    38d2:	93 01       	movw	r18, r6
    38d4:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    38d8:	2b 83       	std	Y+3, r18	; 0x03
    38da:	3c 83       	std	Y+4, r19	; 0x04
    38dc:	4d 83       	std	Y+5, r20	; 0x05
    38de:	5e 83       	std	Y+6, r21	; 0x06
    38e0:	c2 01       	movw	r24, r4
    38e2:	b1 01       	movw	r22, r2
    38e4:	a4 01       	movw	r20, r8
    38e6:	93 01       	movw	r18, r6
    38e8:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	ad 81       	ldd	r26, Y+5	; 0x05
    38f2:	be 81       	ldd	r27, Y+6	; 0x06
    38f4:	82 17       	cp	r24, r18
    38f6:	93 07       	cpc	r25, r19
    38f8:	a4 07       	cpc	r26, r20
    38fa:	b5 07       	cpc	r27, r21
    38fc:	d0 f0       	brcs	.+52     	; 0x3932 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    38fe:	88 27       	eor	r24, r24
    3900:	99 27       	eor	r25, r25
    3902:	dc 01       	movw	r26, r24
    3904:	86 19       	sub	r24, r6
    3906:	97 09       	sbc	r25, r7
    3908:	a8 09       	sbc	r26, r8
    390a:	b9 09       	sbc	r27, r9
    390c:	82 21       	and	r24, r2
    390e:	93 21       	and	r25, r3
    3910:	a4 21       	and	r26, r4
    3912:	b5 21       	and	r27, r5
    3914:	ef 81       	ldd	r30, Y+7	; 0x07
    3916:	f8 85       	ldd	r31, Y+8	; 0x08
    3918:	86 83       	std	Z+6, r24	; 0x06
    391a:	97 83       	std	Z+7, r25	; 0x07
    391c:	a0 87       	std	Z+8, r26	; 0x08
    391e:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3920:	a8 1a       	sub	r10, r24
    3922:	b9 0a       	sbc	r11, r25
    3924:	ca 0a       	sbc	r12, r26
    3926:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3928:	42 89       	ldd	r20, Z+18	; 0x12
    392a:	53 89       	ldd	r21, Z+19	; 0x13
    392c:	64 89       	ldd	r22, Z+20	; 0x14
    392e:	75 89       	ldd	r23, Z+21	; 0x15
    3930:	39 c0       	rjmp	.+114    	; 0x39a4 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3932:	af 81       	ldd	r26, Y+7	; 0x07
    3934:	b8 85       	ldd	r27, Y+8	; 0x08
    3936:	1e 96       	adiw	r26, 0x0e	; 14
    3938:	4d 91       	ld	r20, X+
    393a:	5d 91       	ld	r21, X+
    393c:	6d 91       	ld	r22, X+
    393e:	7c 91       	ld	r23, X
    3940:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3942:	41 15       	cp	r20, r1
    3944:	51 05       	cpc	r21, r1
    3946:	61 05       	cpc	r22, r1
    3948:	71 05       	cpc	r23, r1
    394a:	21 f5       	brne	.+72     	; 0x3994 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	0e 94 de 0b 	call	0x17bc	; 0x17bc <create_chain>
    395c:	ab 01       	movw	r20, r22
    395e:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3960:	41 30       	cpi	r20, 0x01	; 1
    3962:	51 05       	cpc	r21, r1
    3964:	61 05       	cpc	r22, r1
    3966:	71 05       	cpc	r23, r1
    3968:	39 f4       	brne	.+14     	; 0x3978 <f_lseek+0x18a>
    396a:	ef 81       	ldd	r30, Y+7	; 0x07
    396c:	f8 85       	ldd	r31, Y+8	; 0x08
    396e:	84 81       	ldd	r24, Z+4	; 0x04
    3970:	80 68       	ori	r24, 0x80	; 128
    3972:	84 83       	std	Z+4, r24	; 0x04
    3974:	12 e0       	ldi	r17, 0x02	; 2
    3976:	54 c1       	rjmp	.+680    	; 0x3c20 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3978:	4f 3f       	cpi	r20, 0xFF	; 255
    397a:	ff ef       	ldi	r31, 0xFF	; 255
    397c:	5f 07       	cpc	r21, r31
    397e:	ff ef       	ldi	r31, 0xFF	; 255
    3980:	6f 07       	cpc	r22, r31
    3982:	ff ef       	ldi	r31, 0xFF	; 255
    3984:	7f 07       	cpc	r23, r31
    3986:	b1 f1       	breq	.+108    	; 0x39f4 <f_lseek+0x206>
				fp->org_clust = clst;
    3988:	ef 81       	ldd	r30, Y+7	; 0x07
    398a:	f8 85       	ldd	r31, Y+8	; 0x08
    398c:	46 87       	std	Z+14, r20	; 0x0e
    398e:	57 87       	std	Z+15, r21	; 0x0f
    3990:	60 8b       	std	Z+16, r22	; 0x10
    3992:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3994:	af 81       	ldd	r26, Y+7	; 0x07
    3996:	b8 85       	ldd	r27, Y+8	; 0x08
    3998:	52 96       	adiw	r26, 0x12	; 18
    399a:	4d 93       	st	X+, r20
    399c:	5d 93       	st	X+, r21
    399e:	6d 93       	st	X+, r22
    39a0:	7c 93       	st	X, r23
    39a2:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    39a4:	41 15       	cp	r20, r1
    39a6:	51 05       	cpc	r21, r1
    39a8:	61 05       	cpc	r22, r1
    39aa:	71 05       	cpc	r23, r1
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <f_lseek+0x1c2>
    39ae:	58 c0       	rjmp	.+176    	; 0x3a60 <f_lseek+0x272>
    39b0:	cb c0       	rjmp	.+406    	; 0x3b48 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    39b2:	ef 81       	ldd	r30, Y+7	; 0x07
    39b4:	f8 85       	ldd	r31, Y+8	; 0x08
    39b6:	84 81       	ldd	r24, Z+4	; 0x04
    39b8:	20 81       	ld	r18, Z
    39ba:	31 81       	ldd	r19, Z+1	; 0x01
    39bc:	81 ff       	sbrs	r24, 1
    39be:	0d c0       	rjmp	.+26     	; 0x39da <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    39c0:	c9 01       	movw	r24, r18
    39c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <create_chain>
    39c6:	ab 01       	movw	r20, r22
    39c8:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    39ca:	41 15       	cp	r20, r1
    39cc:	51 05       	cpc	r21, r1
    39ce:	61 05       	cpc	r22, r1
    39d0:	71 05       	cpc	r23, r1
    39d2:	41 f4       	brne	.+16     	; 0x39e4 <f_lseek+0x1f6>
    39d4:	64 01       	movw	r12, r8
    39d6:	53 01       	movw	r10, r6
    39d8:	49 c0       	rjmp	.+146    	; 0x3a6c <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    39da:	c9 01       	movw	r24, r18
    39dc:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    39e0:	ab 01       	movw	r20, r22
    39e2:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    39e4:	4f 3f       	cpi	r20, 0xFF	; 255
    39e6:	ff ef       	ldi	r31, 0xFF	; 255
    39e8:	5f 07       	cpc	r21, r31
    39ea:	ff ef       	ldi	r31, 0xFF	; 255
    39ec:	6f 07       	cpc	r22, r31
    39ee:	ff ef       	ldi	r31, 0xFF	; 255
    39f0:	7f 07       	cpc	r23, r31
    39f2:	49 f4       	brne	.+18     	; 0x3a06 <f_lseek+0x218>
    39f4:	af 81       	ldd	r26, Y+7	; 0x07
    39f6:	b8 85       	ldd	r27, Y+8	; 0x08
    39f8:	14 96       	adiw	r26, 0x04	; 4
    39fa:	8c 91       	ld	r24, X
    39fc:	14 97       	sbiw	r26, 0x04	; 4
    39fe:	80 68       	ori	r24, 0x80	; 128
    3a00:	14 96       	adiw	r26, 0x04	; 4
    3a02:	8c 93       	st	X, r24
    3a04:	ed c0       	rjmp	.+474    	; 0x3be0 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3a06:	42 30       	cpi	r20, 0x02	; 2
    3a08:	51 05       	cpc	r21, r1
    3a0a:	61 05       	cpc	r22, r1
    3a0c:	71 05       	cpc	r23, r1
    3a0e:	08 f4       	brcc	.+2      	; 0x3a12 <f_lseek+0x224>
    3a10:	ac cf       	rjmp	.-168    	; 0x396a <f_lseek+0x17c>
    3a12:	af 81       	ldd	r26, Y+7	; 0x07
    3a14:	b8 85       	ldd	r27, Y+8	; 0x08
    3a16:	ed 91       	ld	r30, X+
    3a18:	fc 91       	ld	r31, X
    3a1a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a1c:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a1e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3a20:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3a22:	48 17       	cp	r20, r24
    3a24:	59 07       	cpc	r21, r25
    3a26:	6a 07       	cpc	r22, r26
    3a28:	7b 07       	cpc	r23, r27
    3a2a:	08 f0       	brcs	.+2      	; 0x3a2e <f_lseek+0x240>
    3a2c:	9e cf       	rjmp	.-196    	; 0x396a <f_lseek+0x17c>
				fp->curr_clust = clst;
    3a2e:	af 81       	ldd	r26, Y+7	; 0x07
    3a30:	b8 85       	ldd	r27, Y+8	; 0x08
    3a32:	52 96       	adiw	r26, 0x12	; 18
    3a34:	4d 93       	st	X+, r20
    3a36:	5d 93       	st	X+, r21
    3a38:	6d 93       	st	X+, r22
    3a3a:	7c 93       	st	X, r23
    3a3c:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3a3e:	fd 01       	movw	r30, r26
    3a40:	86 81       	ldd	r24, Z+6	; 0x06
    3a42:	97 81       	ldd	r25, Z+7	; 0x07
    3a44:	a0 85       	ldd	r26, Z+8	; 0x08
    3a46:	b1 85       	ldd	r27, Z+9	; 0x09
    3a48:	86 0d       	add	r24, r6
    3a4a:	97 1d       	adc	r25, r7
    3a4c:	a8 1d       	adc	r26, r8
    3a4e:	b9 1d       	adc	r27, r9
    3a50:	86 83       	std	Z+6, r24	; 0x06
    3a52:	97 83       	std	Z+7, r25	; 0x07
    3a54:	a0 87       	std	Z+8, r26	; 0x08
    3a56:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3a58:	a6 18       	sub	r10, r6
    3a5a:	b7 08       	sbc	r11, r7
    3a5c:	c8 08       	sbc	r12, r8
    3a5e:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3a60:	6a 14       	cp	r6, r10
    3a62:	7b 04       	cpc	r7, r11
    3a64:	8c 04       	cpc	r8, r12
    3a66:	9d 04       	cpc	r9, r13
    3a68:	08 f4       	brcc	.+2      	; 0x3a6c <f_lseek+0x27e>
    3a6a:	a3 cf       	rjmp	.-186    	; 0x39b2 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3a6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3a6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3a70:	86 81       	ldd	r24, Z+6	; 0x06
    3a72:	97 81       	ldd	r25, Z+7	; 0x07
    3a74:	a0 85       	ldd	r26, Z+8	; 0x08
    3a76:	b1 85       	ldd	r27, Z+9	; 0x09
    3a78:	8a 0d       	add	r24, r10
    3a7a:	9b 1d       	adc	r25, r11
    3a7c:	ac 1d       	adc	r26, r12
    3a7e:	bd 1d       	adc	r27, r13
    3a80:	86 83       	std	Z+6, r24	; 0x06
    3a82:	97 83       	std	Z+7, r25	; 0x07
    3a84:	a0 87       	std	Z+8, r26	; 0x08
    3a86:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3a88:	d6 01       	movw	r26, r12
    3a8a:	c5 01       	movw	r24, r10
    3a8c:	09 e0       	ldi	r16, 0x09	; 9
    3a8e:	b6 95       	lsr	r27
    3a90:	a7 95       	ror	r26
    3a92:	97 95       	ror	r25
    3a94:	87 95       	ror	r24
    3a96:	0a 95       	dec	r16
    3a98:	d1 f7       	brne	.-12     	; 0x3a8e <f_lseek+0x2a0>
    3a9a:	08 2f       	mov	r16, r24
    3a9c:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3a9e:	8f ef       	ldi	r24, 0xFF	; 255
    3aa0:	91 e0       	ldi	r25, 0x01	; 1
    3aa2:	a0 e0       	ldi	r26, 0x00	; 0
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	a8 22       	and	r10, r24
    3aa8:	b9 22       	and	r11, r25
    3aaa:	ca 22       	and	r12, r26
    3aac:	db 22       	and	r13, r27
    3aae:	a1 14       	cp	r10, r1
    3ab0:	b1 04       	cpc	r11, r1
    3ab2:	c1 04       	cpc	r12, r1
    3ab4:	d1 04       	cpc	r13, r1
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <f_lseek+0x2cc>
    3ab8:	47 c0       	rjmp	.+142    	; 0x3b48 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3aba:	80 80       	ld	r8, Z
    3abc:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3abe:	3e ef       	ldi	r19, 0xFE	; 254
    3ac0:	a3 2e       	mov	r10, r19
    3ac2:	3f ef       	ldi	r19, 0xFF	; 255
    3ac4:	b3 2e       	mov	r11, r19
    3ac6:	3f ef       	ldi	r19, 0xFF	; 255
    3ac8:	c3 2e       	mov	r12, r19
    3aca:	3f ef       	ldi	r19, 0xFF	; 255
    3acc:	d3 2e       	mov	r13, r19
    3ace:	a4 0e       	add	r10, r20
    3ad0:	b5 1e       	adc	r11, r21
    3ad2:	c6 1e       	adc	r12, r22
    3ad4:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3ad6:	f4 01       	movw	r30, r8
    3ad8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ada:	93 8d       	ldd	r25, Z+27	; 0x1b
    3adc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3ade:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3ae0:	02 97       	sbiw	r24, 0x02	; 2
    3ae2:	a1 09       	sbc	r26, r1
    3ae4:	b1 09       	sbc	r27, r1
    3ae6:	a8 16       	cp	r10, r24
    3ae8:	b9 06       	cpc	r11, r25
    3aea:	ca 06       	cpc	r12, r26
    3aec:	db 06       	cpc	r13, r27
    3aee:	c0 f4       	brcc	.+48     	; 0x3b20 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3af0:	22 81       	ldd	r18, Z+2	; 0x02
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	c6 01       	movw	r24, r12
    3afa:	b5 01       	movw	r22, r10
    3afc:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    3b00:	9b 01       	movw	r18, r22
    3b02:	ac 01       	movw	r20, r24
    3b04:	f4 01       	movw	r30, r8
    3b06:	86 a1       	ldd	r24, Z+38	; 0x26
    3b08:	97 a1       	ldd	r25, Z+39	; 0x27
    3b0a:	a0 a5       	ldd	r26, Z+40	; 0x28
    3b0c:	b1 a5       	ldd	r27, Z+41	; 0x29
    3b0e:	28 0f       	add	r18, r24
    3b10:	39 1f       	adc	r19, r25
    3b12:	4a 1f       	adc	r20, r26
    3b14:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3b16:	21 15       	cp	r18, r1
    3b18:	31 05       	cpc	r19, r1
    3b1a:	41 05       	cpc	r20, r1
    3b1c:	51 05       	cpc	r21, r1
    3b1e:	49 f4       	brne	.+18     	; 0x3b32 <f_lseek+0x344>
    3b20:	af 81       	ldd	r26, Y+7	; 0x07
    3b22:	b8 85       	ldd	r27, Y+8	; 0x08
    3b24:	14 96       	adiw	r26, 0x04	; 4
    3b26:	8c 91       	ld	r24, X
    3b28:	14 97       	sbiw	r26, 0x04	; 4
    3b2a:	80 68       	ori	r24, 0x80	; 128
    3b2c:	14 96       	adiw	r26, 0x04	; 4
    3b2e:	8c 93       	st	X, r24
    3b30:	21 cf       	rjmp	.-446    	; 0x3974 <f_lseek+0x186>
				nsect += fp->csect;
    3b32:	59 01       	movw	r10, r18
    3b34:	6a 01       	movw	r12, r20
    3b36:	a0 0e       	add	r10, r16
    3b38:	b1 1c       	adc	r11, r1
    3b3a:	c1 1c       	adc	r12, r1
    3b3c:	d1 1c       	adc	r13, r1
				fp->csect++;
    3b3e:	0f 5f       	subi	r16, 0xFF	; 255
    3b40:	ef 81       	ldd	r30, Y+7	; 0x07
    3b42:	f8 85       	ldd	r31, Y+8	; 0x08
    3b44:	05 83       	std	Z+5, r16	; 0x05
    3b46:	03 c0       	rjmp	.+6      	; 0x3b4e <f_lseek+0x360>
    3b48:	aa 24       	eor	r10, r10
    3b4a:	bb 24       	eor	r11, r11
    3b4c:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3b4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3b50:	f8 85       	ldd	r31, Y+8	; 0x08
    3b52:	86 81       	ldd	r24, Z+6	; 0x06
    3b54:	97 81       	ldd	r25, Z+7	; 0x07
    3b56:	a0 85       	ldd	r26, Z+8	; 0x08
    3b58:	b1 85       	ldd	r27, Z+9	; 0x09
    3b5a:	91 70       	andi	r25, 0x01	; 1
    3b5c:	a0 70       	andi	r26, 0x00	; 0
    3b5e:	b0 70       	andi	r27, 0x00	; 0
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	a1 05       	cpc	r26, r1
    3b64:	b1 05       	cpc	r27, r1
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <f_lseek+0x37c>
    3b68:	45 c0       	rjmp	.+138    	; 0x3bf4 <f_lseek+0x406>
    3b6a:	26 89       	ldd	r18, Z+22	; 0x16
    3b6c:	37 89       	ldd	r19, Z+23	; 0x17
    3b6e:	40 8d       	ldd	r20, Z+24	; 0x18
    3b70:	51 8d       	ldd	r21, Z+25	; 0x19
    3b72:	a2 16       	cp	r10, r18
    3b74:	b3 06       	cpc	r11, r19
    3b76:	c4 06       	cpc	r12, r20
    3b78:	d5 06       	cpc	r13, r21
    3b7a:	e1 f1       	breq	.+120    	; 0x3bf4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3b7c:	84 81       	ldd	r24, Z+4	; 0x04
    3b7e:	86 ff       	sbrs	r24, 6
    3b80:	1a c0       	rjmp	.+52     	; 0x3bb6 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3b82:	01 90       	ld	r0, Z+
    3b84:	f0 81       	ld	r31, Z
    3b86:	e0 2d       	mov	r30, r0
    3b88:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8a:	78 85       	ldd	r23, Y+8	; 0x08
    3b8c:	60 5e       	subi	r22, 0xE0	; 224
    3b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b90:	81 81       	ldd	r24, Z+1	; 0x01
    3b92:	01 e0       	ldi	r16, 0x01	; 1
    3b94:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    3b98:	af 81       	ldd	r26, Y+7	; 0x07
    3b9a:	b8 85       	ldd	r27, Y+8	; 0x08
    3b9c:	14 96       	adiw	r26, 0x04	; 4
    3b9e:	9c 91       	ld	r25, X
    3ba0:	14 97       	sbiw	r26, 0x04	; 4
    3ba2:	88 23       	and	r24, r24
    3ba4:	21 f0       	breq	.+8      	; 0x3bae <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3ba6:	90 68       	ori	r25, 0x80	; 128
    3ba8:	14 96       	adiw	r26, 0x04	; 4
    3baa:	9c 93       	st	X, r25
    3bac:	19 c0       	rjmp	.+50     	; 0x3be0 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3bae:	9f 7b       	andi	r25, 0xBF	; 191
    3bb0:	ef 81       	ldd	r30, Y+7	; 0x07
    3bb2:	f8 85       	ldd	r31, Y+8	; 0x08
    3bb4:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3bb6:	af 81       	ldd	r26, Y+7	; 0x07
    3bb8:	b8 85       	ldd	r27, Y+8	; 0x08
    3bba:	ed 91       	ld	r30, X+
    3bbc:	fc 91       	ld	r31, X
    3bbe:	11 97       	sbiw	r26, 0x01	; 1
    3bc0:	bd 01       	movw	r22, r26
    3bc2:	60 5e       	subi	r22, 0xE0	; 224
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc6:	81 81       	ldd	r24, Z+1	; 0x01
    3bc8:	a6 01       	movw	r20, r12
    3bca:	95 01       	movw	r18, r10
    3bcc:	01 e0       	ldi	r16, 0x01	; 1
    3bce:	0e 94 c1 05 	call	0xb82	; 0xb82 <disk_read>
    3bd2:	88 23       	and	r24, r24
    3bd4:	39 f0       	breq	.+14     	; 0x3be4 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3bd6:	ef 81       	ldd	r30, Y+7	; 0x07
    3bd8:	f8 85       	ldd	r31, Y+8	; 0x08
    3bda:	84 81       	ldd	r24, Z+4	; 0x04
    3bdc:	80 68       	ori	r24, 0x80	; 128
    3bde:	84 83       	std	Z+4, r24	; 0x04
    3be0:	11 e0       	ldi	r17, 0x01	; 1
    3be2:	1e c0       	rjmp	.+60     	; 0x3c20 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3be4:	af 81       	ldd	r26, Y+7	; 0x07
    3be6:	b8 85       	ldd	r27, Y+8	; 0x08
    3be8:	56 96       	adiw	r26, 0x16	; 22
    3bea:	ad 92       	st	X+, r10
    3bec:	bd 92       	st	X+, r11
    3bee:	cd 92       	st	X+, r12
    3bf0:	dc 92       	st	X, r13
    3bf2:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3bf4:	ef 81       	ldd	r30, Y+7	; 0x07
    3bf6:	f8 85       	ldd	r31, Y+8	; 0x08
    3bf8:	26 81       	ldd	r18, Z+6	; 0x06
    3bfa:	37 81       	ldd	r19, Z+7	; 0x07
    3bfc:	40 85       	ldd	r20, Z+8	; 0x08
    3bfe:	51 85       	ldd	r21, Z+9	; 0x09
    3c00:	82 85       	ldd	r24, Z+10	; 0x0a
    3c02:	93 85       	ldd	r25, Z+11	; 0x0b
    3c04:	a4 85       	ldd	r26, Z+12	; 0x0c
    3c06:	b5 85       	ldd	r27, Z+13	; 0x0d
    3c08:	82 17       	cp	r24, r18
    3c0a:	93 07       	cpc	r25, r19
    3c0c:	a4 07       	cpc	r26, r20
    3c0e:	b5 07       	cpc	r27, r21
    3c10:	38 f4       	brcc	.+14     	; 0x3c20 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3c12:	22 87       	std	Z+10, r18	; 0x0a
    3c14:	33 87       	std	Z+11, r19	; 0x0b
    3c16:	44 87       	std	Z+12, r20	; 0x0c
    3c18:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3c1a:	84 81       	ldd	r24, Z+4	; 0x04
    3c1c:	80 62       	ori	r24, 0x20	; 32
    3c1e:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3c20:	81 2f       	mov	r24, r17
    3c22:	28 96       	adiw	r28, 0x08	; 8
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	df 90       	pop	r13
    3c32:	cf 90       	pop	r12
    3c34:	bf 90       	pop	r11
    3c36:	af 90       	pop	r10
    3c38:	9f 90       	pop	r9
    3c3a:	8f 90       	pop	r8
    3c3c:	7f 90       	pop	r7
    3c3e:	6f 90       	pop	r6
    3c40:	5f 90       	pop	r5
    3c42:	4f 90       	pop	r4
    3c44:	3f 90       	pop	r3
    3c46:	2f 90       	pop	r2
    3c48:	08 95       	ret

00003c4a <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	2e 97       	sbiw	r28, 0x0e	; 14
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	8c 01       	movw	r16, r24
    3c5e:	6d 87       	std	Y+13, r22	; 0x0d
    3c60:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3c62:	ce 01       	movw	r24, r28
    3c64:	0d 96       	adiw	r24, 0x0d	; 13
    3c66:	b8 01       	movw	r22, r16
    3c68:	40 e0       	ldi	r20, 0x00	; 0
    3c6a:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
	if (res == FR_OK) {
    3c6e:	88 23       	and	r24, r24
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <f_opendir+0x2a>
    3c72:	46 c0       	rjmp	.+140    	; 0x3d00 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3c74:	ce 01       	movw	r24, r28
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	d8 01       	movw	r26, r16
    3c7a:	54 96       	adiw	r26, 0x14	; 20
    3c7c:	8d 93       	st	X+, r24
    3c7e:	9c 93       	st	X, r25
    3c80:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3c82:	6d 85       	ldd	r22, Y+13	; 0x0d
    3c84:	7e 85       	ldd	r23, Y+14	; 0x0e
    3c86:	c8 01       	movw	r24, r16
    3c88:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3c8c:	88 23       	and	r24, r24
    3c8e:	a9 f5       	brne	.+106    	; 0x3cfa <f_opendir+0xb0>
			dir = dj->dir;
    3c90:	d8 01       	movw	r26, r16
    3c92:	52 96       	adiw	r26, 0x12	; 18
    3c94:	ed 91       	ld	r30, X+
    3c96:	fc 91       	ld	r31, X
    3c98:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3c9a:	30 97       	sbiw	r30, 0x00	; 0
    3c9c:	f9 f0       	breq	.+62     	; 0x3cdc <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3c9e:	83 85       	ldd	r24, Z+11	; 0x0b
    3ca0:	84 ff       	sbrs	r24, 4
    3ca2:	2d c0       	rjmp	.+90     	; 0x3cfe <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3ca4:	35 89       	ldd	r19, Z+21	; 0x15
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	84 89       	ldd	r24, Z+20	; 0x14
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	28 2b       	or	r18, r24
    3cae:	39 2b       	or	r19, r25
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	a9 01       	movw	r20, r18
    3cb6:	33 27       	eor	r19, r19
    3cb8:	22 27       	eor	r18, r18
    3cba:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	62 8d       	ldd	r22, Z+26	; 0x1a
    3cc0:	70 e0       	ldi	r23, 0x00	; 0
    3cc2:	86 2b       	or	r24, r22
    3cc4:	97 2b       	or	r25, r23
    3cc6:	a0 e0       	ldi	r26, 0x00	; 0
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	28 2b       	or	r18, r24
    3ccc:	39 2b       	or	r19, r25
    3cce:	4a 2b       	or	r20, r26
    3cd0:	5b 2b       	or	r21, r27
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	26 83       	std	Z+6, r18	; 0x06
    3cd6:	37 83       	std	Z+7, r19	; 0x07
    3cd8:	40 87       	std	Z+8, r20	; 0x08
    3cda:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3cdc:	d8 01       	movw	r26, r16
    3cde:	ed 91       	ld	r30, X+
    3ce0:	fc 91       	ld	r31, X
    3ce2:	11 97       	sbiw	r26, 0x01	; 1
    3ce4:	86 81       	ldd	r24, Z+6	; 0x06
    3ce6:	97 81       	ldd	r25, Z+7	; 0x07
    3ce8:	12 96       	adiw	r26, 0x02	; 2
    3cea:	8d 93       	st	X+, r24
    3cec:	9c 93       	st	X, r25
    3cee:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3cf0:	c8 01       	movw	r24, r16
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3cfa:	84 30       	cpi	r24, 0x04	; 4
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <f_opendir+0xb6>
    3cfe:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3d00:	2e 96       	adiw	r28, 0x0e	; 14
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	cf 91       	pop	r28
    3d08:	df 91       	pop	r29
    3d0a:	1f 91       	pop	r17
    3d0c:	0f 91       	pop	r16
    3d0e:	08 95       	ret

00003d10 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	2c 97       	sbiw	r28, 0x0c	; 12
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	8c 01       	movw	r16, r24
    3d28:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	62 81       	ldd	r22, Z+2	; 0x02
    3d2e:	73 81       	ldd	r23, Z+3	; 0x03
    3d30:	80 81       	ld	r24, Z
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <validate>
	if (res == FR_OK) {
    3d38:	88 23       	and	r24, r24
    3d3a:	59 f5       	brne	.+86     	; 0x3d92 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3d3c:	ce 01       	movw	r24, r28
    3d3e:	01 96       	adiw	r24, 0x01	; 1
    3d40:	f8 01       	movw	r30, r16
    3d42:	84 8b       	std	Z+20, r24	; 0x14
    3d44:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3d46:	e1 14       	cp	r14, r1
    3d48:	f1 04       	cpc	r15, r1
    3d4a:	31 f4       	brne	.+12     	; 0x3d58 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3d4c:	c8 01       	movw	r24, r16
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
    3d56:	1d c0       	rjmp	.+58     	; 0x3d92 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3d58:	c8 01       	movw	r24, r16
    3d5a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <dir_read>
			if (res == FR_NO_FILE) {
    3d5e:	84 30       	cpi	r24, 0x04	; 4
    3d60:	31 f4       	brne	.+12     	; 0x3d6e <f_readdir+0x5e>
				dj->sect = 0;
    3d62:	f8 01       	movw	r30, r16
    3d64:	16 86       	std	Z+14, r1	; 0x0e
    3d66:	17 86       	std	Z+15, r1	; 0x0f
    3d68:	10 8a       	std	Z+16, r1	; 0x10
    3d6a:	11 8a       	std	Z+17, r1	; 0x11
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3d6e:	88 23       	and	r24, r24
    3d70:	81 f4       	brne	.+32     	; 0x3d92 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3d72:	c8 01       	movw	r24, r16
    3d74:	b7 01       	movw	r22, r14
    3d76:	0e 94 33 10 	call	0x2066	; 0x2066 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3d7a:	c8 01       	movw	r24, r16
    3d7c:	60 e0       	ldi	r22, 0x00	; 0
    3d7e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <dir_next>
				if (res == FR_NO_FILE) {
    3d82:	84 30       	cpi	r24, 0x04	; 4
    3d84:	31 f4       	brne	.+12     	; 0x3d92 <f_readdir+0x82>
					dj->sect = 0;
    3d86:	f8 01       	movw	r30, r16
    3d88:	16 86       	std	Z+14, r1	; 0x0e
    3d8a:	17 86       	std	Z+15, r1	; 0x0f
    3d8c:	10 8a       	std	Z+16, r1	; 0x10
    3d8e:	11 8a       	std	Z+17, r1	; 0x11
    3d90:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3d92:	2c 96       	adiw	r28, 0x0c	; 12
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	cf 91       	pop	r28
    3d9a:	df 91       	pop	r29
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	08 95       	ret

00003da6 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3da6:	cf 92       	push	r12
    3da8:	df 92       	push	r13
    3daa:	ef 92       	push	r14
    3dac:	ff 92       	push	r15
    3dae:	1f 93       	push	r17
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	a4 97       	sbiw	r28, 0x24	; 36
    3dba:	cd bf       	out	0x3d, r28	; 61
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	8b a3       	std	Y+35, r24	; 0x23
    3dc0:	9c a3       	std	Y+36, r25	; 0x24
    3dc2:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3dc4:	2d e0       	ldi	r18, 0x0D	; 13
    3dc6:	e2 2e       	mov	r14, r18
    3dc8:	f1 2c       	mov	r15, r1
    3dca:	ec 0e       	add	r14, r28
    3dcc:	fd 1e       	adc	r15, r29
    3dce:	ce 01       	movw	r24, r28
    3dd0:	83 96       	adiw	r24, 0x23	; 35
    3dd2:	b7 01       	movw	r22, r14
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
    3dda:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3ddc:	88 23       	and	r24, r24
    3dde:	b1 f4       	brne	.+44     	; 0x3e0c <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3de0:	ce 01       	movw	r24, r28
    3de2:	01 96       	adiw	r24, 0x01	; 1
    3de4:	89 a3       	std	Y+33, r24	; 0x21
    3de6:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3de8:	6b a1       	ldd	r22, Y+35	; 0x23
    3dea:	7c a1       	ldd	r23, Y+36	; 0x24
    3dec:	c7 01       	movw	r24, r14
    3dee:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
    3df2:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3df4:	88 23       	and	r24, r24
    3df6:	51 f4       	brne	.+20     	; 0x3e0c <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3df8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dfa:	98 a1       	ldd	r25, Y+32	; 0x20
    3dfc:	89 2b       	or	r24, r25
    3dfe:	11 f4       	brne	.+4      	; 0x3e04 <f_stat+0x5e>
    3e00:	16 e0       	ldi	r17, 0x06	; 6
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3e04:	c7 01       	movw	r24, r14
    3e06:	b6 01       	movw	r22, r12
    3e08:	0e 94 33 10 	call	0x2066	; 0x2066 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3e0c:	81 2f       	mov	r24, r17
    3e0e:	a4 96       	adiw	r28, 0x24	; 36
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	cf 91       	pop	r28
    3e16:	df 91       	pop	r29
    3e18:	1f 91       	pop	r17
    3e1a:	ff 90       	pop	r15
    3e1c:	ef 90       	pop	r14
    3e1e:	df 90       	pop	r13
    3e20:	cf 90       	pop	r12
    3e22:	08 95       	ret

00003e24 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3e24:	2f 92       	push	r2
    3e26:	3f 92       	push	r3
    3e28:	4f 92       	push	r4
    3e2a:	5f 92       	push	r5
    3e2c:	6f 92       	push	r6
    3e2e:	7f 92       	push	r7
    3e30:	8f 92       	push	r8
    3e32:	9f 92       	push	r9
    3e34:	af 92       	push	r10
    3e36:	bf 92       	push	r11
    3e38:	cf 92       	push	r12
    3e3a:	df 92       	push	r13
    3e3c:	ef 92       	push	r14
    3e3e:	ff 92       	push	r15
    3e40:	0f 93       	push	r16
    3e42:	1f 93       	push	r17
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
    3e4c:	29 97       	sbiw	r28, 0x09	; 9
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	de bf       	out	0x3e, r29	; 62
    3e52:	89 83       	std	Y+1, r24	; 0x01
    3e54:	9a 83       	std	Y+2, r25	; 0x02
    3e56:	6c 83       	std	Y+4, r22	; 0x04
    3e58:	7d 83       	std	Y+5, r23	; 0x05
    3e5a:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	ba 01       	movw	r22, r20
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    3e68:	88 23       	and	r24, r24
    3e6a:	09 f0       	breq	.+2      	; 0x3e6e <f_getfree+0x4a>
    3e6c:	eb c0       	rjmp	.+470    	; 0x4044 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    3e6e:	d2 01       	movw	r26, r4
    3e70:	ed 91       	ld	r30, X+
    3e72:	fc 91       	ld	r31, X
    3e74:	26 85       	ldd	r18, Z+14	; 0x0e
    3e76:	37 85       	ldd	r19, Z+15	; 0x0f
    3e78:	40 89       	ldd	r20, Z+16	; 0x10
    3e7a:	51 89       	ldd	r21, Z+17	; 0x11
    3e7c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    3e7e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    3e80:	04 8d       	ldd	r16, Z+28	; 0x1c
    3e82:	15 8d       	ldd	r17, Z+29	; 0x1d
    3e84:	d8 01       	movw	r26, r16
    3e86:	c7 01       	movw	r24, r14
    3e88:	02 97       	sbiw	r24, 0x02	; 2
    3e8a:	a1 09       	sbc	r26, r1
    3e8c:	b1 09       	sbc	r27, r1
    3e8e:	82 17       	cp	r24, r18
    3e90:	93 07       	cpc	r25, r19
    3e92:	a4 07       	cpc	r26, r20
    3e94:	b5 07       	cpc	r27, r21
    3e96:	38 f0       	brcs	.+14     	; 0x3ea6 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    3e98:	ec 81       	ldd	r30, Y+4	; 0x04
    3e9a:	fd 81       	ldd	r31, Y+5	; 0x05
    3e9c:	20 83       	st	Z, r18
    3e9e:	31 83       	std	Z+1, r19	; 0x01
    3ea0:	42 83       	std	Z+2, r20	; 0x02
    3ea2:	53 83       	std	Z+3, r21	; 0x03
    3ea4:	ce c0       	rjmp	.+412    	; 0x4042 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    3ea6:	30 80       	ld	r3, Z
    3ea8:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    3eaa:	23 2d       	mov	r18, r3
    3eac:	21 30       	cpi	r18, 0x01	; 1
    3eae:	e1 f5       	brne	.+120    	; 0x3f28 <f_getfree+0x104>
    3eb0:	aa 24       	eor	r10, r10
    3eb2:	bb 24       	eor	r11, r11
    3eb4:	65 01       	movw	r12, r10
    3eb6:	92 e0       	ldi	r25, 0x02	; 2
    3eb8:	e9 2e       	mov	r14, r25
    3eba:	f1 2c       	mov	r15, r1
    3ebc:	01 2d       	mov	r16, r1
    3ebe:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    3ec0:	d2 01       	movw	r26, r4
    3ec2:	8d 91       	ld	r24, X+
    3ec4:	9c 91       	ld	r25, X
    3ec6:	b8 01       	movw	r22, r16
    3ec8:	a7 01       	movw	r20, r14
    3eca:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    3ece:	6f 3f       	cpi	r22, 0xFF	; 255
    3ed0:	bf ef       	ldi	r27, 0xFF	; 255
    3ed2:	7b 07       	cpc	r23, r27
    3ed4:	bf ef       	ldi	r27, 0xFF	; 255
    3ed6:	8b 07       	cpc	r24, r27
    3ed8:	bf ef       	ldi	r27, 0xFF	; 255
    3eda:	9b 07       	cpc	r25, r27
    3edc:	11 f4       	brne	.+4      	; 0x3ee2 <f_getfree+0xbe>
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	b1 c0       	rjmp	.+354    	; 0x4044 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    3ee2:	61 30       	cpi	r22, 0x01	; 1
    3ee4:	71 05       	cpc	r23, r1
    3ee6:	81 05       	cpc	r24, r1
    3ee8:	91 05       	cpc	r25, r1
    3eea:	11 f4       	brne	.+4      	; 0x3ef0 <f_getfree+0xcc>
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	aa c0       	rjmp	.+340    	; 0x4044 <f_getfree+0x220>
			if (stat == 0) n++;
    3ef0:	61 15       	cp	r22, r1
    3ef2:	71 05       	cpc	r23, r1
    3ef4:	81 05       	cpc	r24, r1
    3ef6:	91 05       	cpc	r25, r1
    3ef8:	29 f4       	brne	.+10     	; 0x3f04 <f_getfree+0xe0>
    3efa:	08 94       	sec
    3efc:	a1 1c       	adc	r10, r1
    3efe:	b1 1c       	adc	r11, r1
    3f00:	c1 1c       	adc	r12, r1
    3f02:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    3f04:	08 94       	sec
    3f06:	e1 1c       	adc	r14, r1
    3f08:	f1 1c       	adc	r15, r1
    3f0a:	01 1d       	adc	r16, r1
    3f0c:	11 1d       	adc	r17, r1
    3f0e:	d2 01       	movw	r26, r4
    3f10:	ed 91       	ld	r30, X+
    3f12:	fc 91       	ld	r31, X
    3f14:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f16:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f18:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3f1a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3f1c:	e8 16       	cp	r14, r24
    3f1e:	f9 06       	cpc	r15, r25
    3f20:	0a 07       	cpc	r16, r26
    3f22:	1b 07       	cpc	r17, r27
    3f24:	68 f2       	brcs	.-102    	; 0x3ec0 <f_getfree+0x9c>
    3f26:	7b c0       	rjmp	.+246    	; 0x401e <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    3f28:	66 8c       	ldd	r6, Z+30	; 0x1e
    3f2a:	77 8c       	ldd	r7, Z+31	; 0x1f
    3f2c:	80 a0       	ldd	r8, Z+32	; 0x20
    3f2e:	91 a0       	ldd	r9, Z+33	; 0x21
    3f30:	aa 24       	eor	r10, r10
    3f32:	bb 24       	eor	r11, r11
    3f34:	65 01       	movw	r12, r10
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	e0 e0       	ldi	r30, 0x00	; 0
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    3f3e:	61 15       	cp	r22, r1
    3f40:	71 05       	cpc	r23, r1
    3f42:	a9 f4       	brne	.+42     	; 0x3f6e <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    3f44:	f2 01       	movw	r30, r4
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	b4 01       	movw	r22, r8
    3f4c:	a3 01       	movw	r20, r6
    3f4e:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
				if (res != FR_OK)
    3f52:	88 23       	and	r24, r24
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <f_getfree+0x134>
    3f56:	76 c0       	rjmp	.+236    	; 0x4044 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    3f58:	08 94       	sec
    3f5a:	61 1c       	adc	r6, r1
    3f5c:	71 1c       	adc	r7, r1
    3f5e:	81 1c       	adc	r8, r1
    3f60:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    3f62:	d2 01       	movw	r26, r4
    3f64:	ed 91       	ld	r30, X+
    3f66:	fc 91       	ld	r31, X
    3f68:	be 96       	adiw	r30, 0x2e	; 46
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	72 e0       	ldi	r23, 0x02	; 2
    3f6e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f70:	b8 87       	std	Y+8, r27	; 0x08
    3f72:	20 81       	ld	r18, Z
    3f74:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    3f76:	3b 81       	ldd	r19, Y+3	; 0x03
    3f78:	32 30       	cpi	r19, 0x02	; 2
    3f7a:	99 f4       	brne	.+38     	; 0x3fa2 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    3f7c:	bf 83       	std	Y+7, r27	; 0x07
    3f7e:	1e 82       	std	Y+6, r1	; 0x06
    3f80:	82 2f       	mov	r24, r18
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	ae 81       	ldd	r26, Y+6	; 0x06
    3f86:	bf 81       	ldd	r27, Y+7	; 0x07
    3f88:	8a 2b       	or	r24, r26
    3f8a:	9b 2b       	or	r25, r27
    3f8c:	89 2b       	or	r24, r25
    3f8e:	29 f4       	brne	.+10     	; 0x3f9a <f_getfree+0x176>
    3f90:	08 94       	sec
    3f92:	a1 1c       	adc	r10, r1
    3f94:	b1 1c       	adc	r11, r1
    3f96:	c1 1c       	adc	r12, r1
    3f98:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    3f9a:	32 96       	adiw	r30, 0x02	; 2
    3f9c:	62 50       	subi	r22, 0x02	; 2
    3f9e:	70 40       	sbci	r23, 0x00	; 0
    3fa0:	33 c0       	rjmp	.+102    	; 0x4008 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3fa2:	23 81       	ldd	r18, Z+3	; 0x03
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e0       	ldi	r20, 0x00	; 0
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	52 2f       	mov	r21, r18
    3fac:	44 27       	eor	r20, r20
    3fae:	33 27       	eor	r19, r19
    3fb0:	22 27       	eor	r18, r18
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	a0 e0       	ldi	r26, 0x00	; 0
    3fb8:	b0 e0       	ldi	r27, 0x00	; 0
    3fba:	dc 01       	movw	r26, r24
    3fbc:	99 27       	eor	r25, r25
    3fbe:	88 27       	eor	r24, r24
    3fc0:	28 2b       	or	r18, r24
    3fc2:	39 2b       	or	r19, r25
    3fc4:	4a 2b       	or	r20, r26
    3fc6:	5b 2b       	or	r21, r27
    3fc8:	39 84       	ldd	r3, Y+9	; 0x09
    3fca:	83 2d       	mov	r24, r3
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	a0 e0       	ldi	r26, 0x00	; 0
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	28 2b       	or	r18, r24
    3fd4:	39 2b       	or	r19, r25
    3fd6:	4a 2b       	or	r20, r26
    3fd8:	5b 2b       	or	r21, r27
    3fda:	38 84       	ldd	r3, Y+8	; 0x08
    3fdc:	22 24       	eor	r2, r2
    3fde:	c1 01       	movw	r24, r2
    3fe0:	a0 e0       	ldi	r26, 0x00	; 0
    3fe2:	b0 e0       	ldi	r27, 0x00	; 0
    3fe4:	28 2b       	or	r18, r24
    3fe6:	39 2b       	or	r19, r25
    3fe8:	4a 2b       	or	r20, r26
    3fea:	5b 2b       	or	r21, r27
    3fec:	5f 70       	andi	r21, 0x0F	; 15
    3fee:	21 15       	cp	r18, r1
    3ff0:	31 05       	cpc	r19, r1
    3ff2:	41 05       	cpc	r20, r1
    3ff4:	51 05       	cpc	r21, r1
    3ff6:	29 f4       	brne	.+10     	; 0x4002 <f_getfree+0x1de>
    3ff8:	08 94       	sec
    3ffa:	a1 1c       	adc	r10, r1
    3ffc:	b1 1c       	adc	r11, r1
    3ffe:	c1 1c       	adc	r12, r1
    4000:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    4002:	34 96       	adiw	r30, 0x04	; 4
    4004:	64 50       	subi	r22, 0x04	; 4
    4006:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    4008:	08 94       	sec
    400a:	e1 08       	sbc	r14, r1
    400c:	f1 08       	sbc	r15, r1
    400e:	01 09       	sbc	r16, r1
    4010:	11 09       	sbc	r17, r1
    4012:	e1 14       	cp	r14, r1
    4014:	f1 04       	cpc	r15, r1
    4016:	01 05       	cpc	r16, r1
    4018:	11 05       	cpc	r17, r1
    401a:	09 f0       	breq	.+2      	; 0x401e <f_getfree+0x1fa>
    401c:	90 cf       	rjmp	.-224    	; 0x3f3e <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    401e:	d2 01       	movw	r26, r4
    4020:	ed 91       	ld	r30, X+
    4022:	fc 91       	ld	r31, X
    4024:	a6 86       	std	Z+14, r10	; 0x0e
    4026:	b7 86       	std	Z+15, r11	; 0x0f
    4028:	c0 8a       	std	Z+16, r12	; 0x10
    402a:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    402c:	bb 81       	ldd	r27, Y+3	; 0x03
    402e:	b3 30       	cpi	r27, 0x03	; 3
    4030:	11 f4       	brne	.+4      	; 0x4036 <f_getfree+0x212>
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    4036:	ec 81       	ldd	r30, Y+4	; 0x04
    4038:	fd 81       	ldd	r31, Y+5	; 0x05
    403a:	a0 82       	st	Z, r10
    403c:	b1 82       	std	Z+1, r11	; 0x01
    403e:	c2 82       	std	Z+2, r12	; 0x02
    4040:	d3 82       	std	Z+3, r13	; 0x03
    4042:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4044:	29 96       	adiw	r28, 0x09	; 9
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	cf 91       	pop	r28
    404c:	df 91       	pop	r29
    404e:	1f 91       	pop	r17
    4050:	0f 91       	pop	r16
    4052:	ff 90       	pop	r15
    4054:	ef 90       	pop	r14
    4056:	df 90       	pop	r13
    4058:	cf 90       	pop	r12
    405a:	bf 90       	pop	r11
    405c:	af 90       	pop	r10
    405e:	9f 90       	pop	r9
    4060:	8f 90       	pop	r8
    4062:	7f 90       	pop	r7
    4064:	6f 90       	pop	r6
    4066:	5f 90       	pop	r5
    4068:	4f 90       	pop	r4
    406a:	3f 90       	pop	r3
    406c:	2f 90       	pop	r2
    406e:	08 95       	ret

00004070 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    4070:	cf 92       	push	r12
    4072:	df 92       	push	r13
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4082:	6a 81       	ldd	r22, Y+2	; 0x02
    4084:	7b 81       	ldd	r23, Y+3	; 0x03
    4086:	88 81       	ld	r24, Y
    4088:	99 81       	ldd	r25, Y+1	; 0x01
    408a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <validate>
    408e:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4090:	88 23       	and	r24, r24
    4092:	09 f0       	breq	.+2      	; 0x4096 <f_truncate+0x26>
    4094:	6e c0       	rjmp	.+220    	; 0x4172 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    4096:	6c 81       	ldd	r22, Y+4	; 0x04
    4098:	67 ff       	sbrs	r22, 7
    409a:	02 c0       	rjmp	.+4      	; 0x40a0 <f_truncate+0x30>
    409c:	12 e0       	ldi	r17, 0x02	; 2
    409e:	69 c0       	rjmp	.+210    	; 0x4172 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    40a0:	61 fd       	sbrc	r22, 1
    40a2:	02 c0       	rjmp	.+4      	; 0x40a8 <f_truncate+0x38>
    40a4:	17 e0       	ldi	r17, 0x07	; 7
    40a6:	65 c0       	rjmp	.+202    	; 0x4172 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    40a8:	2e 81       	ldd	r18, Y+6	; 0x06
    40aa:	3f 81       	ldd	r19, Y+7	; 0x07
    40ac:	48 85       	ldd	r20, Y+8	; 0x08
    40ae:	59 85       	ldd	r21, Y+9	; 0x09
    40b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    40b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    40b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    40b8:	28 17       	cp	r18, r24
    40ba:	39 07       	cpc	r19, r25
    40bc:	4a 07       	cpc	r20, r26
    40be:	5b 07       	cpc	r21, r27
    40c0:	08 f0       	brcs	.+2      	; 0x40c4 <f_truncate+0x54>
    40c2:	57 c0       	rjmp	.+174    	; 0x4172 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    40c4:	2a 87       	std	Y+10, r18	; 0x0a
    40c6:	3b 87       	std	Y+11, r19	; 0x0b
    40c8:	4c 87       	std	Y+12, r20	; 0x0c
    40ca:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    40cc:	60 62       	ori	r22, 0x20	; 32
    40ce:	6c 83       	std	Y+4, r22	; 0x04
    40d0:	88 81       	ld	r24, Y
    40d2:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    40d4:	21 15       	cp	r18, r1
    40d6:	31 05       	cpc	r19, r1
    40d8:	41 05       	cpc	r20, r1
    40da:	51 05       	cpc	r21, r1
    40dc:	61 f4       	brne	.+24     	; 0x40f6 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    40de:	4e 85       	ldd	r20, Y+14	; 0x0e
    40e0:	5f 85       	ldd	r21, Y+15	; 0x0f
    40e2:	68 89       	ldd	r22, Y+16	; 0x10
    40e4:	79 89       	ldd	r23, Y+17	; 0x11
    40e6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <remove_chain>
    40ea:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    40ec:	1e 86       	std	Y+14, r1	; 0x0e
    40ee:	1f 86       	std	Y+15, r1	; 0x0f
    40f0:	18 8a       	std	Y+16, r1	; 0x10
    40f2:	19 8a       	std	Y+17, r1	; 0x11
    40f4:	39 c0       	rjmp	.+114    	; 0x4168 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    40f6:	4a 89       	ldd	r20, Y+18	; 0x12
    40f8:	5b 89       	ldd	r21, Y+19	; 0x13
    40fa:	6c 89       	ldd	r22, Y+20	; 0x14
    40fc:	7d 89       	ldd	r23, Y+21	; 0x15
    40fe:	0e 94 8d 09 	call	0x131a	; 0x131a <get_fat>
    4102:	6b 01       	movw	r12, r22
    4104:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4106:	8f ef       	ldi	r24, 0xFF	; 255
    4108:	c8 16       	cp	r12, r24
    410a:	8f ef       	ldi	r24, 0xFF	; 255
    410c:	d8 06       	cpc	r13, r24
    410e:	8f ef       	ldi	r24, 0xFF	; 255
    4110:	e8 06       	cpc	r14, r24
    4112:	8f ef       	ldi	r24, 0xFF	; 255
    4114:	f8 06       	cpc	r15, r24
    4116:	b9 f1       	breq	.+110    	; 0x4186 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	c8 16       	cp	r12, r24
    411c:	d1 04       	cpc	r13, r1
    411e:	e1 04       	cpc	r14, r1
    4120:	f1 04       	cpc	r15, r1
    4122:	11 f4       	brne	.+4      	; 0x4128 <f_truncate+0xb8>
    4124:	12 e0       	ldi	r17, 0x02	; 2
    4126:	22 c0       	rjmp	.+68     	; 0x416c <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    4128:	e8 81       	ld	r30, Y
    412a:	f9 81       	ldd	r31, Y+1	; 0x01
    412c:	82 8d       	ldd	r24, Z+26	; 0x1a
    412e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4130:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4132:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4134:	c8 16       	cp	r12, r24
    4136:	d9 06       	cpc	r13, r25
    4138:	ea 06       	cpc	r14, r26
    413a:	fb 06       	cpc	r15, r27
    413c:	d0 f4       	brcc	.+52     	; 0x4172 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    413e:	4a 89       	ldd	r20, Y+18	; 0x12
    4140:	5b 89       	ldd	r21, Y+19	; 0x13
    4142:	6c 89       	ldd	r22, Y+20	; 0x14
    4144:	7d 89       	ldd	r23, Y+21	; 0x15
    4146:	cf 01       	movw	r24, r30
    4148:	0f ef       	ldi	r16, 0xFF	; 255
    414a:	1f ef       	ldi	r17, 0xFF	; 255
    414c:	2f ef       	ldi	r18, 0xFF	; 255
    414e:	3f e0       	ldi	r19, 0x0F	; 15
    4150:	0e 94 77 0a 	call	0x14ee	; 0x14ee <put_fat>
    4154:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4156:	88 23       	and	r24, r24
    4158:	49 f4       	brne	.+18     	; 0x416c <f_truncate+0xfc>
    415a:	88 81       	ld	r24, Y
    415c:	99 81       	ldd	r25, Y+1	; 0x01
    415e:	b7 01       	movw	r22, r14
    4160:	a6 01       	movw	r20, r12
    4162:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <remove_chain>
    4166:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4168:	11 23       	and	r17, r17
    416a:	19 f0       	breq	.+6      	; 0x4172 <f_truncate+0x102>
    416c:	8c 81       	ldd	r24, Y+4	; 0x04
    416e:	80 68       	ori	r24, 0x80	; 128
    4170:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    4172:	81 2f       	mov	r24, r17
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	df 90       	pop	r13
    4182:	cf 90       	pop	r12
    4184:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4186:	11 e0       	ldi	r17, 0x01	; 1
    4188:	f1 cf       	rjmp	.-30     	; 0x416c <f_truncate+0xfc>

0000418a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    418a:	cf 92       	push	r12
    418c:	df 92       	push	r13
    418e:	ef 92       	push	r14
    4190:	ff 92       	push	r15
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    419e:	ea 97       	sbiw	r28, 0x3a	; 58
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	89 af       	std	Y+57, r24	; 0x39
    41a6:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    41a8:	4d e0       	ldi	r20, 0x0D	; 13
    41aa:	c4 2e       	mov	r12, r20
    41ac:	d1 2c       	mov	r13, r1
    41ae:	cc 0e       	add	r12, r28
    41b0:	dd 1e       	adc	r13, r29
    41b2:	ce 01       	movw	r24, r28
    41b4:	c9 96       	adiw	r24, 0x39	; 57
    41b6:	b6 01       	movw	r22, r12
    41b8:	41 e0       	ldi	r20, 0x01	; 1
    41ba:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    41be:	88 23       	and	r24, r24
    41c0:	09 f0       	breq	.+2      	; 0x41c4 <f_unlink+0x3a>
    41c2:	71 c0       	rjmp	.+226    	; 0x42a6 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    41c4:	ce 01       	movw	r24, r28
    41c6:	01 96       	adiw	r24, 0x01	; 1
    41c8:	89 a3       	std	Y+33, r24	; 0x21
    41ca:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    41cc:	69 ad       	ldd	r22, Y+57	; 0x39
    41ce:	7a ad       	ldd	r23, Y+58	; 0x3a
    41d0:	c6 01       	movw	r24, r12
    41d2:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    41d6:	88 23       	and	r24, r24
    41d8:	09 f0       	breq	.+2      	; 0x41dc <f_unlink+0x52>
    41da:	65 c0       	rjmp	.+202    	; 0x42a6 <f_unlink+0x11c>

	dir = dj.dir;
    41dc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    41de:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    41e0:	30 97       	sbiw	r30, 0x00	; 0
    41e2:	11 f4       	brne	.+4      	; 0x41e8 <f_unlink+0x5e>
    41e4:	86 e0       	ldi	r24, 0x06	; 6
    41e6:	5f c0       	rjmp	.+190    	; 0x42a6 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    41e8:	83 85       	ldd	r24, Z+11	; 0x0b
    41ea:	48 2f       	mov	r20, r24
    41ec:	80 fd       	sbrc	r24, 0
    41ee:	5a c0       	rjmp	.+180    	; 0x42a4 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    41f0:	95 89       	ldd	r25, Z+21	; 0x15
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	24 89       	ldd	r18, Z+20	; 0x14
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	82 2b       	or	r24, r18
    41fa:	93 2b       	or	r25, r19
    41fc:	a0 e0       	ldi	r26, 0x00	; 0
    41fe:	b0 e0       	ldi	r27, 0x00	; 0
    4200:	8c 01       	movw	r16, r24
    4202:	ff 24       	eor	r15, r15
    4204:	ee 24       	eor	r14, r14
    4206:	93 8d       	ldd	r25, Z+27	; 0x1b
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	22 8d       	ldd	r18, Z+26	; 0x1a
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	82 2b       	or	r24, r18
    4210:	93 2b       	or	r25, r19
    4212:	a0 e0       	ldi	r26, 0x00	; 0
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	e8 2a       	or	r14, r24
    4218:	f9 2a       	or	r15, r25
    421a:	0a 2b       	or	r16, r26
    421c:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    421e:	44 ff       	sbrs	r20, 4
    4220:	29 c0       	rjmp	.+82     	; 0x4274 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4222:	82 e0       	ldi	r24, 0x02	; 2
    4224:	e8 16       	cp	r14, r24
    4226:	f1 04       	cpc	r15, r1
    4228:	01 05       	cpc	r16, r1
    422a:	11 05       	cpc	r17, r1
    422c:	10 f4       	brcc	.+4      	; 0x4232 <f_unlink+0xa8>
    422e:	82 e0       	ldi	r24, 0x02	; 2
    4230:	3a c0       	rjmp	.+116    	; 0x42a6 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4232:	de 01       	movw	r26, r28
    4234:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    4236:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    4238:	9d 01       	movw	r18, r26
    423a:	02 c0       	rjmp	.+4      	; 0x4240 <f_unlink+0xb6>
    423c:	81 91       	ld	r24, Z+
    423e:	8d 93       	st	X+, r24
    4240:	e2 17       	cp	r30, r18
    4242:	f3 07       	cpc	r31, r19
    4244:	d9 f7       	brne	.-10     	; 0x423c <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    4246:	e9 a6       	std	Y+41, r14	; 0x29
    4248:	fa a6       	std	Y+42, r15	; 0x2a
    424a:	0b a7       	std	Y+43, r16	; 0x2b
    424c:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    424e:	23 e2       	ldi	r18, 0x23	; 35
    4250:	c2 2e       	mov	r12, r18
    4252:	d1 2c       	mov	r13, r1
    4254:	cc 0e       	add	r12, r28
    4256:	dd 1e       	adc	r13, r29
    4258:	c6 01       	movw	r24, r12
    425a:	62 e0       	ldi	r22, 0x02	; 2
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4262:	88 23       	and	r24, r24
    4264:	01 f5       	brne	.+64     	; 0x42a6 <f_unlink+0x11c>
		res = dir_read(&sdj);
    4266:	c6 01       	movw	r24, r12
    4268:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    426c:	88 23       	and	r24, r24
    426e:	d1 f0       	breq	.+52     	; 0x42a4 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    4270:	84 30       	cpi	r24, 0x04	; 4
    4272:	c9 f4       	brne	.+50     	; 0x42a6 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    4274:	ce 01       	movw	r24, r28
    4276:	0d 96       	adiw	r24, 0x0d	; 13
    4278:	0e 94 12 10 	call	0x2024	; 0x2024 <dir_remove>
	if (res == FR_OK) {
    427c:	88 23       	and	r24, r24
    427e:	99 f4       	brne	.+38     	; 0x42a6 <f_unlink+0x11c>
		if (dclst)
    4280:	e1 14       	cp	r14, r1
    4282:	f1 04       	cpc	r15, r1
    4284:	01 05       	cpc	r16, r1
    4286:	11 05       	cpc	r17, r1
    4288:	41 f0       	breq	.+16     	; 0x429a <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    428a:	8d 85       	ldd	r24, Y+13	; 0x0d
    428c:	9e 85       	ldd	r25, Y+14	; 0x0e
    428e:	b8 01       	movw	r22, r16
    4290:	a7 01       	movw	r20, r14
    4292:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    4296:	88 23       	and	r24, r24
    4298:	31 f4       	brne	.+12     	; 0x42a6 <f_unlink+0x11c>
    429a:	8d 85       	ldd	r24, Y+13	; 0x0d
    429c:	9e 85       	ldd	r25, Y+14	; 0x0e
    429e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sync>
    42a2:	01 c0       	rjmp	.+2      	; 0x42a6 <f_unlink+0x11c>
    42a4:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    42a6:	ea 96       	adiw	r28, 0x3a	; 58
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	de bf       	out	0x3e, r29	; 62
    42ac:	cf 91       	pop	r28
    42ae:	df 91       	pop	r29
    42b0:	1f 91       	pop	r17
    42b2:	0f 91       	pop	r16
    42b4:	ff 90       	pop	r15
    42b6:	ef 90       	pop	r14
    42b8:	df 90       	pop	r13
    42ba:	cf 90       	pop	r12
    42bc:	08 95       	ret

000042be <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    42be:	2f 92       	push	r2
    42c0:	3f 92       	push	r3
    42c2:	4f 92       	push	r4
    42c4:	5f 92       	push	r5
    42c6:	6f 92       	push	r6
    42c8:	7f 92       	push	r7
    42ca:	8f 92       	push	r8
    42cc:	9f 92       	push	r9
    42ce:	af 92       	push	r10
    42d0:	bf 92       	push	r11
    42d2:	cf 92       	push	r12
    42d4:	df 92       	push	r13
    42d6:	ef 92       	push	r14
    42d8:	ff 92       	push	r15
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	df 93       	push	r29
    42e0:	cf 93       	push	r28
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	a8 97       	sbiw	r28, 0x28	; 40
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	de bf       	out	0x3e, r29	; 62
    42ec:	8b a3       	std	Y+35, r24	; 0x23
    42ee:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    42f0:	3d e0       	ldi	r19, 0x0D	; 13
    42f2:	e3 2e       	mov	r14, r19
    42f4:	f1 2c       	mov	r15, r1
    42f6:	ec 0e       	add	r14, r28
    42f8:	fd 1e       	adc	r15, r29
    42fa:	ce 01       	movw	r24, r28
    42fc:	83 96       	adiw	r24, 0x23	; 35
    42fe:	b7 01       	movw	r22, r14
    4300:	41 e0       	ldi	r20, 0x01	; 1
    4302:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
    4306:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4308:	88 23       	and	r24, r24
    430a:	09 f0       	breq	.+2      	; 0x430e <f_mkdir+0x50>
    430c:	38 c1       	rjmp	.+624    	; 0x457e <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    430e:	ce 01       	movw	r24, r28
    4310:	01 96       	adiw	r24, 0x01	; 1
    4312:	89 a3       	std	Y+33, r24	; 0x21
    4314:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4316:	6b a1       	ldd	r22, Y+35	; 0x23
    4318:	7c a1       	ldd	r23, Y+36	; 0x24
    431a:	c7 01       	movw	r24, r14
    431c:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
    4320:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4322:	88 23       	and	r24, r24
    4324:	11 f4       	brne	.+4      	; 0x432a <f_mkdir+0x6c>
    4326:	18 e0       	ldi	r17, 0x08	; 8
    4328:	2a c1       	rjmp	.+596    	; 0x457e <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    432a:	84 30       	cpi	r24, 0x04	; 4
    432c:	09 f0       	breq	.+2      	; 0x4330 <f_mkdir+0x72>
    432e:	27 c1       	rjmp	.+590    	; 0x457e <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    4330:	8d 85       	ldd	r24, Y+13	; 0x0d
    4332:	9e 85       	ldd	r25, Y+14	; 0x0e
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	70 e0       	ldi	r23, 0x00	; 0
    433c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <create_chain>
    4340:	4b 01       	movw	r8, r22
    4342:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4344:	61 15       	cp	r22, r1
    4346:	71 05       	cpc	r23, r1
    4348:	81 05       	cpc	r24, r1
    434a:	91 05       	cpc	r25, r1
    434c:	11 f4       	brne	.+4      	; 0x4352 <f_mkdir+0x94>
    434e:	17 e0       	ldi	r17, 0x07	; 7
    4350:	16 c1       	rjmp	.+556    	; 0x457e <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    4352:	61 30       	cpi	r22, 0x01	; 1
    4354:	71 05       	cpc	r23, r1
    4356:	81 05       	cpc	r24, r1
    4358:	91 05       	cpc	r25, r1
    435a:	11 f4       	brne	.+4      	; 0x4360 <f_mkdir+0xa2>
    435c:	12 e0       	ldi	r17, 0x02	; 2
    435e:	0f c1       	rjmp	.+542    	; 0x457e <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4360:	6f 3f       	cpi	r22, 0xFF	; 255
    4362:	3f ef       	ldi	r19, 0xFF	; 255
    4364:	73 07       	cpc	r23, r19
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	83 07       	cpc	r24, r19
    436a:	3f ef       	ldi	r19, 0xFF	; 255
    436c:	93 07       	cpc	r25, r19
    436e:	09 f4       	brne	.+2      	; 0x4372 <f_mkdir+0xb4>
    4370:	1d c1       	rjmp	.+570    	; 0x45ac <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    4372:	8d 85       	ldd	r24, Y+13	; 0x0d
    4374:	9e 85       	ldd	r25, Y+14	; 0x0e
    4376:	40 e0       	ldi	r20, 0x00	; 0
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	60 e0       	ldi	r22, 0x00	; 0
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    4382:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4384:	88 23       	and	r24, r24
    4386:	09 f0       	breq	.+2      	; 0x438a <f_mkdir+0xcc>
    4388:	fa c0       	rjmp	.+500    	; 0x457e <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    438a:	0d 85       	ldd	r16, Y+13	; 0x0d
    438c:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    438e:	2e ef       	ldi	r18, 0xFE	; 254
    4390:	c2 2e       	mov	r12, r18
    4392:	2f ef       	ldi	r18, 0xFF	; 255
    4394:	d2 2e       	mov	r13, r18
    4396:	2f ef       	ldi	r18, 0xFF	; 255
    4398:	e2 2e       	mov	r14, r18
    439a:	2f ef       	ldi	r18, 0xFF	; 255
    439c:	f2 2e       	mov	r15, r18
    439e:	c8 0c       	add	r12, r8
    43a0:	d9 1c       	adc	r13, r9
    43a2:	ea 1c       	adc	r14, r10
    43a4:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    43a6:	f8 01       	movw	r30, r16
    43a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    43aa:	93 8d       	ldd	r25, Z+27	; 0x1b
    43ac:	a4 8d       	ldd	r26, Z+28	; 0x1c
    43ae:	b5 8d       	ldd	r27, Z+29	; 0x1d
    43b0:	02 97       	sbiw	r24, 0x02	; 2
    43b2:	a1 09       	sbc	r26, r1
    43b4:	b1 09       	sbc	r27, r1
    43b6:	c8 16       	cp	r12, r24
    43b8:	d9 06       	cpc	r13, r25
    43ba:	ea 06       	cpc	r14, r26
    43bc:	fb 06       	cpc	r15, r27
    43be:	20 f0       	brcs	.+8      	; 0x43c8 <f_mkdir+0x10a>
    43c0:	44 24       	eor	r4, r4
    43c2:	55 24       	eor	r5, r5
    43c4:	32 01       	movw	r6, r4
    43c6:	14 c0       	rjmp	.+40     	; 0x43f0 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    43c8:	f8 01       	movw	r30, r16
    43ca:	22 81       	ldd	r18, Z+2	; 0x02
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	c7 01       	movw	r24, r14
    43d4:	b6 01       	movw	r22, r12
    43d6:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    43da:	2b 01       	movw	r4, r22
    43dc:	3c 01       	movw	r6, r24
    43de:	f8 01       	movw	r30, r16
    43e0:	86 a1       	ldd	r24, Z+38	; 0x26
    43e2:	97 a1       	ldd	r25, Z+39	; 0x27
    43e4:	a0 a5       	ldd	r26, Z+40	; 0x28
    43e6:	b1 a5       	ldd	r27, Z+41	; 0x29
    43e8:	48 0e       	add	r4, r24
    43ea:	59 1e       	adc	r5, r25
    43ec:	6a 1e       	adc	r6, r26
    43ee:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    43f0:	9e e2       	ldi	r25, 0x2E	; 46
    43f2:	29 2e       	mov	r2, r25
    43f4:	31 2c       	mov	r3, r1
    43f6:	20 0e       	add	r2, r16
    43f8:	31 1e       	adc	r3, r17
    43fa:	f1 01       	movw	r30, r2
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	92 e0       	ldi	r25, 0x02	; 2
    4400:	01 c0       	rjmp	.+2      	; 0x4404 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4402:	11 92       	st	Z+, r1
    4404:	01 97       	sbiw	r24, 0x01	; 1
    4406:	2f ef       	ldi	r18, 0xFF	; 255
    4408:	8f 3f       	cpi	r24, 0xFF	; 255
    440a:	92 07       	cpc	r25, r18
    440c:	d1 f7       	brne	.-12     	; 0x4402 <f_mkdir+0x144>
    440e:	f1 01       	movw	r30, r2
    4410:	8b e0       	ldi	r24, 0x0B	; 11
    4412:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    4414:	20 e2       	ldi	r18, 0x20	; 32
    4416:	01 c0       	rjmp	.+2      	; 0x441a <f_mkdir+0x15c>
    4418:	21 93       	st	Z+, r18
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	3f ef       	ldi	r19, 0xFF	; 255
    441e:	8f 3f       	cpi	r24, 0xFF	; 255
    4420:	93 07       	cpc	r25, r19
    4422:	d1 f7       	brne	.-12     	; 0x4418 <f_mkdir+0x15a>
    4424:	8e e2       	ldi	r24, 0x2E	; 46
    4426:	f8 01       	movw	r30, r16
    4428:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    442a:	80 e1       	ldi	r24, 0x10	; 16
    442c:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    442e:	0c 5b       	subi	r16, 0xBC	; 188
    4430:	1f 4f       	sbci	r17, 0xFF	; 255
    4432:	f8 01       	movw	r30, r16
    4434:	11 92       	st	Z+, r1
    4436:	11 92       	st	Z+, r1
    4438:	11 92       	st	Z+, r1
    443a:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    443c:	88 a6       	std	Y+40, r8	; 0x28
    443e:	81 92       	st	Z+, r8
    4440:	8f 01       	movw	r16, r30
    4442:	89 2d       	mov	r24, r9
    4444:	99 27       	eor	r25, r25
    4446:	8f a3       	std	Y+39, r24	; 0x27
    4448:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    444a:	c5 01       	movw	r24, r10
    444c:	aa 27       	eor	r26, r26
    444e:	bb 27       	eor	r27, r27
    4450:	8e a3       	std	Y+38, r24	; 0x26
    4452:	07 50       	subi	r16, 0x07	; 7
    4454:	10 40       	sbci	r17, 0x00	; 0
    4456:	f8 01       	movw	r30, r16
    4458:	81 93       	st	Z+, r24
    445a:	8f 01       	movw	r16, r30
    445c:	89 2f       	mov	r24, r25
    445e:	99 27       	eor	r25, r25
    4460:	8d a3       	std	Y+37, r24	; 0x25
    4462:	80 83       	st	Z, r24
    4464:	03 54       	subi	r16, 0x43	; 67
    4466:	10 40       	sbci	r17, 0x00	; 0
    4468:	f1 01       	movw	r30, r2
    446a:	20 e2       	ldi	r18, 0x20	; 32
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	03 c0       	rjmp	.+6      	; 0x4476 <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4470:	80 81       	ld	r24, Z
    4472:	80 a3       	std	Z+32, r24	; 0x20
    4474:	31 96       	adiw	r30, 0x01	; 1
    4476:	21 50       	subi	r18, 0x01	; 1
    4478:	30 40       	sbci	r19, 0x00	; 0
    447a:	8f ef       	ldi	r24, 0xFF	; 255
    447c:	2f 3f       	cpi	r18, 0xFF	; 255
    447e:	38 07       	cpc	r19, r24
    4480:	b9 f7       	brne	.-18     	; 0x4470 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    4482:	01 5b       	subi	r16, 0xB1	; 177
    4484:	1f 4f       	sbci	r17, 0xFF	; 255
    4486:	8e e2       	ldi	r24, 0x2E	; 46
    4488:	f8 01       	movw	r30, r16
    448a:	80 83       	st	Z, r24
    448c:	0f 54       	subi	r16, 0x4F	; 79
    448e:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4490:	2b 89       	ldd	r18, Y+19	; 0x13
    4492:	3c 89       	ldd	r19, Y+20	; 0x14
    4494:	4d 89       	ldd	r20, Y+21	; 0x15
    4496:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    4498:	ed 85       	ldd	r30, Y+13	; 0x0d
    449a:	fe 85       	ldd	r31, Y+14	; 0x0e
    449c:	80 81       	ld	r24, Z
    449e:	83 30       	cpi	r24, 0x03	; 3
    44a0:	69 f4       	brne	.+26     	; 0x44bc <f_mkdir+0x1fe>
    44a2:	82 a1       	ldd	r24, Z+34	; 0x22
    44a4:	93 a1       	ldd	r25, Z+35	; 0x23
    44a6:	a4 a1       	ldd	r26, Z+36	; 0x24
    44a8:	b5 a1       	ldd	r27, Z+37	; 0x25
    44aa:	28 17       	cp	r18, r24
    44ac:	39 07       	cpc	r19, r25
    44ae:	4a 07       	cpc	r20, r26
    44b0:	5b 07       	cpc	r21, r27
    44b2:	21 f4       	brne	.+8      	; 0x44bc <f_mkdir+0x1fe>
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 e0       	ldi	r20, 0x00	; 0
    44ba:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    44bc:	08 59       	subi	r16, 0x98	; 152
    44be:	1f 4f       	sbci	r17, 0xFF	; 255
    44c0:	f8 01       	movw	r30, r16
    44c2:	21 93       	st	Z+, r18
    44c4:	8f 01       	movw	r16, r30
    44c6:	83 2f       	mov	r24, r19
    44c8:	99 27       	eor	r25, r25
    44ca:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    44cc:	ca 01       	movw	r24, r20
    44ce:	aa 27       	eor	r26, r26
    44d0:	bb 27       	eor	r27, r27
    44d2:	07 50       	subi	r16, 0x07	; 7
    44d4:	10 40       	sbci	r17, 0x00	; 0
    44d6:	f8 01       	movw	r30, r16
    44d8:	81 93       	st	Z+, r24
    44da:	89 2f       	mov	r24, r25
    44dc:	99 27       	eor	r25, r25
    44de:	80 83       	st	Z, r24
    44e0:	73 01       	movw	r14, r6
    44e2:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    44e4:	01 e0       	ldi	r16, 0x01	; 1
    44e6:	1e c0       	rjmp	.+60     	; 0x4524 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    44e8:	c2 a6       	std	Z+42, r12	; 0x2a
    44ea:	d3 a6       	std	Z+43, r13	; 0x2b
    44ec:	e4 a6       	std	Z+44, r14	; 0x2c
    44ee:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    44f0:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    44f2:	cf 01       	movw	r24, r30
    44f4:	40 e0       	ldi	r20, 0x00	; 0
    44f6:	50 e0       	ldi	r21, 0x00	; 0
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
    4500:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    4502:	88 23       	and	r24, r24
    4504:	e1 f5       	brne	.+120    	; 0x457e <f_mkdir+0x2c0>
    4506:	f1 01       	movw	r30, r2
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	92 e0       	ldi	r25, 0x02	; 2
    450c:	01 c0       	rjmp	.+2      	; 0x4510 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    450e:	11 92       	st	Z+, r1
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	2f ef       	ldi	r18, 0xFF	; 255
    4514:	8f 3f       	cpi	r24, 0xFF	; 255
    4516:	92 07       	cpc	r25, r18
    4518:	d1 f7       	brne	.-12     	; 0x450e <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    451a:	08 94       	sec
    451c:	c1 1c       	adc	r12, r1
    451e:	d1 1c       	adc	r13, r1
    4520:	e1 1c       	adc	r14, r1
    4522:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4524:	ed 85       	ldd	r30, Y+13	; 0x0d
    4526:	fe 85       	ldd	r31, Y+14	; 0x0e
    4528:	9c 2d       	mov	r25, r12
    452a:	94 19       	sub	r25, r4
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	98 17       	cp	r25, r24
    4530:	d8 f2       	brcs	.-74     	; 0x44e8 <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    4532:	ce 01       	movw	r24, r28
    4534:	0d 96       	adiw	r24, 0x0d	; 13
    4536:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <dir_register>
    453a:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    453c:	88 23       	and	r24, r24
    453e:	39 f0       	breq	.+14     	; 0x454e <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4540:	8d 85       	ldd	r24, Y+13	; 0x0d
    4542:	9e 85       	ldd	r25, Y+14	; 0x0e
    4544:	b5 01       	movw	r22, r10
    4546:	a4 01       	movw	r20, r8
    4548:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <remove_chain>
    454c:	18 c0       	rjmp	.+48     	; 0x457e <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    454e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4550:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    4552:	80 e1       	ldi	r24, 0x10	; 16
    4554:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    4556:	16 8a       	std	Z+22, r1	; 0x16
    4558:	17 8a       	std	Z+23, r1	; 0x17
    455a:	10 8e       	std	Z+24, r1	; 0x18
    455c:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    455e:	38 a5       	ldd	r19, Y+40	; 0x28
    4560:	32 8f       	std	Z+26, r19	; 0x1a
    4562:	8f a1       	ldd	r24, Y+39	; 0x27
    4564:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4566:	2e a1       	ldd	r18, Y+38	; 0x26
    4568:	24 8b       	std	Z+20, r18	; 0x14
    456a:	3d a1       	ldd	r19, Y+37	; 0x25
    456c:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    456e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4570:	fe 85       	ldd	r31, Y+14	; 0x0e
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    4576:	cf 01       	movw	r24, r30
    4578:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sync>
    457c:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    457e:	81 2f       	mov	r24, r17
    4580:	a8 96       	adiw	r28, 0x28	; 40
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	bf 90       	pop	r11
    4598:	af 90       	pop	r10
    459a:	9f 90       	pop	r9
    459c:	8f 90       	pop	r8
    459e:	7f 90       	pop	r7
    45a0:	6f 90       	pop	r6
    45a2:	5f 90       	pop	r5
    45a4:	4f 90       	pop	r4
    45a6:	3f 90       	pop	r3
    45a8:	2f 90       	pop	r2
    45aa:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    45ac:	11 e0       	ldi	r17, 0x01	; 1
    45ae:	e7 cf       	rjmp	.-50     	; 0x457e <f_mkdir+0x2c0>

000045b0 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
    45c0:	a4 97       	sbiw	r28, 0x24	; 36
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	de bf       	out	0x3e, r29	; 62
    45c6:	8b a3       	std	Y+35, r24	; 0x23
    45c8:	9c a3       	std	Y+36, r25	; 0x24
    45ca:	e6 2e       	mov	r14, r22
    45cc:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    45ce:	8e 01       	movw	r16, r28
    45d0:	03 5f       	subi	r16, 0xF3	; 243
    45d2:	1f 4f       	sbci	r17, 0xFF	; 255
    45d4:	ce 01       	movw	r24, r28
    45d6:	83 96       	adiw	r24, 0x23	; 35
    45d8:	b8 01       	movw	r22, r16
    45da:	41 e0       	ldi	r20, 0x01	; 1
    45dc:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
	if (res == FR_OK) {
    45e0:	88 23       	and	r24, r24
    45e2:	09 f5       	brne	.+66     	; 0x4626 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    45e4:	ce 01       	movw	r24, r28
    45e6:	01 96       	adiw	r24, 0x01	; 1
    45e8:	89 a3       	std	Y+33, r24	; 0x21
    45ea:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    45ec:	6b a1       	ldd	r22, Y+35	; 0x23
    45ee:	7c a1       	ldd	r23, Y+36	; 0x24
    45f0:	c8 01       	movw	r24, r16
    45f2:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    45f6:	88 23       	and	r24, r24
    45f8:	b1 f4       	brne	.+44     	; 0x4626 <f_chmod+0x76>
			dir = dj.dir;
    45fa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    45fc:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    45fe:	30 97       	sbiw	r30, 0x00	; 0
    4600:	11 f4       	brne	.+4      	; 0x4606 <f_chmod+0x56>
    4602:	86 e0       	ldi	r24, 0x06	; 6
    4604:	10 c0       	rjmp	.+32     	; 0x4626 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4606:	9f 2d       	mov	r25, r15
    4608:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    460a:	89 2f       	mov	r24, r25
    460c:	80 95       	com	r24
    460e:	23 85       	ldd	r18, Z+11	; 0x0b
    4610:	82 23       	and	r24, r18
    4612:	9e 21       	and	r25, r14
    4614:	89 2b       	or	r24, r25
    4616:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    4618:	ed 85       	ldd	r30, Y+13	; 0x0d
    461a:	fe 85       	ldd	r31, Y+14	; 0x0e
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4620:	cf 01       	movw	r24, r30
    4622:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4626:	a4 96       	adiw	r28, 0x24	; 36
    4628:	cd bf       	out	0x3d, r28	; 61
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	cf 91       	pop	r28
    462e:	df 91       	pop	r29
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	ff 90       	pop	r15
    4636:	ef 90       	pop	r14
    4638:	08 95       	ret

0000463a <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    463a:	ef 92       	push	r14
    463c:	ff 92       	push	r15
    463e:	0f 93       	push	r16
    4640:	1f 93       	push	r17
    4642:	df 93       	push	r29
    4644:	cf 93       	push	r28
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
    464a:	a4 97       	sbiw	r28, 0x24	; 36
    464c:	cd bf       	out	0x3d, r28	; 61
    464e:	de bf       	out	0x3e, r29	; 62
    4650:	8b a3       	std	Y+35, r24	; 0x23
    4652:	9c a3       	std	Y+36, r25	; 0x24
    4654:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4656:	4d e0       	ldi	r20, 0x0D	; 13
    4658:	e4 2e       	mov	r14, r20
    465a:	f1 2c       	mov	r15, r1
    465c:	ec 0e       	add	r14, r28
    465e:	fd 1e       	adc	r15, r29
    4660:	ce 01       	movw	r24, r28
    4662:	83 96       	adiw	r24, 0x23	; 35
    4664:	b7 01       	movw	r22, r14
    4666:	41 e0       	ldi	r20, 0x01	; 1
    4668:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
	if (res == FR_OK) {
    466c:	88 23       	and	r24, r24
    466e:	41 f5       	brne	.+80     	; 0x46c0 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    4670:	ce 01       	movw	r24, r28
    4672:	01 96       	adiw	r24, 0x01	; 1
    4674:	89 a3       	std	Y+33, r24	; 0x21
    4676:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    4678:	6b a1       	ldd	r22, Y+35	; 0x23
    467a:	7c a1       	ldd	r23, Y+36	; 0x24
    467c:	c7 01       	movw	r24, r14
    467e:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4682:	88 23       	and	r24, r24
    4684:	e9 f4       	brne	.+58     	; 0x46c0 <f_utime+0x86>
			dir = dj.dir;
    4686:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4688:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    468a:	30 97       	sbiw	r30, 0x00	; 0
    468c:	11 f4       	brne	.+4      	; 0x4692 <f_utime+0x58>
    468e:	86 e0       	ldi	r24, 0x06	; 6
    4690:	17 c0       	rjmp	.+46     	; 0x46c0 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4692:	d8 01       	movw	r26, r16
    4694:	16 96       	adiw	r26, 0x06	; 6
    4696:	8c 91       	ld	r24, X
    4698:	16 97       	sbiw	r26, 0x06	; 6
    469a:	86 8b       	std	Z+22, r24	; 0x16
    469c:	17 96       	adiw	r26, 0x07	; 7
    469e:	8c 91       	ld	r24, X
    46a0:	17 97       	sbiw	r26, 0x07	; 7
    46a2:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    46a4:	14 96       	adiw	r26, 0x04	; 4
    46a6:	8c 91       	ld	r24, X
    46a8:	14 97       	sbiw	r26, 0x04	; 4
    46aa:	80 8f       	std	Z+24, r24	; 0x18
    46ac:	15 96       	adiw	r26, 0x05	; 5
    46ae:	8c 91       	ld	r24, X
    46b0:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    46b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    46b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    46b6:	81 e0       	ldi	r24, 0x01	; 1
    46b8:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    46ba:	cf 01       	movw	r24, r30
    46bc:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    46c0:	a4 96       	adiw	r28, 0x24	; 36
    46c2:	cd bf       	out	0x3d, r28	; 61
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	ef 90       	pop	r14
    46d2:	08 95       	ret

000046d4 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    46d4:	cf 92       	push	r12
    46d6:	df 92       	push	r13
    46d8:	ef 92       	push	r14
    46da:	ff 92       	push	r15
    46dc:	0f 93       	push	r16
    46de:	1f 93       	push	r17
    46e0:	df 93       	push	r29
    46e2:	cf 93       	push	r28
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
    46e8:	cf 54       	subi	r28, 0x4F	; 79
    46ea:	d0 40       	sbci	r29, 0x00	; 0
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	8e 01       	movw	r16, r28
    46f2:	02 5b       	subi	r16, 0xB2	; 178
    46f4:	1f 4f       	sbci	r17, 0xFF	; 255
    46f6:	d8 01       	movw	r26, r16
    46f8:	8d 93       	st	X+, r24
    46fa:	9c 93       	st	X, r25
    46fc:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    46fe:	ce 01       	movw	r24, r28
    4700:	01 96       	adiw	r24, 0x01	; 1
    4702:	8e ab       	std	Y+54, r24	; 0x36
    4704:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    4706:	a2 e2       	ldi	r26, 0x22	; 34
    4708:	ea 2e       	mov	r14, r26
    470a:	f1 2c       	mov	r15, r1
    470c:	ec 0e       	add	r14, r28
    470e:	fd 1e       	adc	r15, r29
    4710:	c8 01       	movw	r24, r16
    4712:	b7 01       	movw	r22, r14
    4714:	41 e0       	ldi	r20, 0x01	; 1
    4716:	0e 94 98 12 	call	0x2530	; 0x2530 <chk_mounted>
	if (res == FR_OK) {
    471a:	88 23       	and	r24, r24
    471c:	09 f0       	breq	.+2      	; 0x4720 <f_rename+0x4c>
    471e:	f4 c0       	rjmp	.+488    	; 0x4908 <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4720:	8a a1       	ldd	r24, Y+34	; 0x22
    4722:	9b a1       	ldd	r25, Y+35	; 0x23
    4724:	88 af       	std	Y+56, r24	; 0x38
    4726:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    4728:	f8 01       	movw	r30, r16
    472a:	60 81       	ld	r22, Z
    472c:	71 81       	ldd	r23, Z+1	; 0x01
    472e:	c7 01       	movw	r24, r14
    4730:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4734:	88 23       	and	r24, r24
    4736:	09 f0       	breq	.+2      	; 0x473a <f_rename+0x66>
    4738:	e7 c0       	rjmp	.+462    	; 0x4908 <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    473a:	8c a9       	ldd	r24, Y+52	; 0x34
    473c:	9d a9       	ldd	r25, Y+53	; 0x35
    473e:	00 97       	sbiw	r24, 0x00	; 0
    4740:	11 f4       	brne	.+4      	; 0x4746 <f_rename+0x72>
    4742:	84 e0       	ldi	r24, 0x04	; 4
    4744:	e1 c0       	rjmp	.+450    	; 0x4908 <f_rename+0x234>
    4746:	dc 01       	movw	r26, r24
    4748:	fe 01       	movw	r30, r28
    474a:	3d 96       	adiw	r30, 0x0d	; 13
    474c:	04 c0       	rjmp	.+8      	; 0x4756 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    474e:	1a 96       	adiw	r26, 0x0a	; 10
    4750:	8c 91       	ld	r24, X
    4752:	1a 97       	sbiw	r26, 0x0a	; 10
    4754:	81 93       	st	Z+, r24
    4756:	11 96       	adiw	r26, 0x01	; 1
    4758:	ee 15       	cp	r30, r14
    475a:	ff 05       	cpc	r31, r15
    475c:	c1 f7       	brne	.-16     	; 0x474e <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    475e:	de 01       	movw	r26, r28
    4760:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    4762:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4764:	9d 01       	movw	r18, r26
    4766:	02 c0       	rjmp	.+4      	; 0x476c <f_rename+0x98>
    4768:	81 91       	ld	r24, Z+
    476a:	8d 93       	st	X+, r24
    476c:	e2 17       	cp	r30, r18
    476e:	f3 07       	cpc	r31, r19
    4770:	d9 f7       	brne	.-10     	; 0x4768 <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    4772:	8e 01       	movw	r16, r28
    4774:	08 5c       	subi	r16, 0xC8	; 200
    4776:	1f 4f       	sbci	r17, 0xFF	; 255
    4778:	c8 01       	movw	r24, r16
    477a:	b6 01       	movw	r22, r12
    477c:	0e 94 bf 10 	call	0x217e	; 0x217e <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    4780:	88 23       	and	r24, r24
    4782:	11 f4       	brne	.+4      	; 0x4788 <f_rename+0xb4>
    4784:	88 e0       	ldi	r24, 0x08	; 8
    4786:	c0 c0       	rjmp	.+384    	; 0x4908 <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    4788:	84 30       	cpi	r24, 0x04	; 4
    478a:	09 f0       	breq	.+2      	; 0x478e <f_rename+0xba>
    478c:	bd c0       	rjmp	.+378    	; 0x4908 <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    478e:	c8 01       	movw	r24, r16
    4790:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <dir_register>
		if (res == FR_OK) {
    4794:	88 23       	and	r24, r24
    4796:	09 f0       	breq	.+2      	; 0x479a <f_rename+0xc6>
    4798:	b7 c0       	rjmp	.+366    	; 0x4908 <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    479a:	fe 01       	movw	r30, r28
    479c:	e6 5b       	subi	r30, 0xB6	; 182
    479e:	ff 4f       	sbci	r31, 0xFF	; 255
    47a0:	40 81       	ld	r20, Z
    47a2:	51 81       	ldd	r21, Z+1	; 0x01
    47a4:	da 01       	movw	r26, r20
    47a6:	fe 01       	movw	r30, r28
    47a8:	3f 96       	adiw	r30, 0x0f	; 15
    47aa:	04 c0       	rjmp	.+8      	; 0x47b4 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    47ac:	81 91       	ld	r24, Z+
    47ae:	1c 96       	adiw	r26, 0x0c	; 12
    47b0:	8c 93       	st	X, r24
    47b2:	1c 97       	sbiw	r26, 0x0c	; 12
    47b4:	11 96       	adiw	r26, 0x01	; 1
    47b6:	ee 15       	cp	r30, r14
    47b8:	ff 05       	cpc	r31, r15
    47ba:	c1 f7       	brne	.-16     	; 0x47ac <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    47bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    47be:	80 62       	ori	r24, 0x20	; 32
    47c0:	da 01       	movw	r26, r20
    47c2:	1b 96       	adiw	r26, 0x0b	; 11
    47c4:	8c 93       	st	X, r24
    47c6:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    47c8:	ea a1       	ldd	r30, Y+34	; 0x22
    47ca:	fb a1       	ldd	r31, Y+35	; 0x23
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    47d0:	1b 96       	adiw	r26, 0x0b	; 11
    47d2:	8c 91       	ld	r24, X
    47d4:	1b 97       	sbiw	r26, 0x0b	; 11
    47d6:	84 ff       	sbrs	r24, 4
    47d8:	8b c0       	rjmp	.+278    	; 0x48f0 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    47da:	c8 ac       	ldd	r12, Y+56	; 0x38
    47dc:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    47de:	5a 96       	adiw	r26, 0x1a	; 26
    47e0:	2c 91       	ld	r18, X
    47e2:	5a 97       	sbiw	r26, 0x1a	; 26
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	54 96       	adiw	r26, 0x14	; 20
    47e8:	8c 91       	ld	r24, X
    47ea:	54 97       	sbiw	r26, 0x14	; 20
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	28 2b       	or	r18, r24
    47f0:	39 2b       	or	r19, r25
    47f2:	55 96       	adiw	r26, 0x15	; 21
    47f4:	9c 91       	ld	r25, X
    47f6:	55 97       	sbiw	r26, 0x15	; 21
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	28 2b       	or	r18, r24
    47fc:	39 2b       	or	r19, r25
    47fe:	5b 96       	adiw	r26, 0x1b	; 27
    4800:	9c 91       	ld	r25, X
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	28 2b       	or	r18, r24
    4806:	39 2b       	or	r19, r25
    4808:	79 01       	movw	r14, r18
    480a:	00 e0       	ldi	r16, 0x00	; 0
    480c:	10 e0       	ldi	r17, 0x00	; 0
    480e:	8e ef       	ldi	r24, 0xFE	; 254
    4810:	9f ef       	ldi	r25, 0xFF	; 255
    4812:	af ef       	ldi	r26, 0xFF	; 255
    4814:	bf ef       	ldi	r27, 0xFF	; 255
    4816:	e8 0e       	add	r14, r24
    4818:	f9 1e       	adc	r15, r25
    481a:	0a 1f       	adc	r16, r26
    481c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    481e:	f6 01       	movw	r30, r12
    4820:	82 8d       	ldd	r24, Z+26	; 0x1a
    4822:	93 8d       	ldd	r25, Z+27	; 0x1b
    4824:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4826:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4828:	02 97       	sbiw	r24, 0x02	; 2
    482a:	a1 09       	sbc	r26, r1
    482c:	b1 09       	sbc	r27, r1
    482e:	e8 16       	cp	r14, r24
    4830:	f9 06       	cpc	r15, r25
    4832:	0a 07       	cpc	r16, r26
    4834:	1b 07       	cpc	r17, r27
    4836:	08 f0       	brcs	.+2      	; 0x483a <f_rename+0x166>
    4838:	66 c0       	rjmp	.+204    	; 0x4906 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    483a:	22 81       	ldd	r18, Z+2	; 0x02
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	50 e0       	ldi	r21, 0x00	; 0
    4842:	c8 01       	movw	r24, r16
    4844:	b7 01       	movw	r22, r14
    4846:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    484a:	ab 01       	movw	r20, r22
    484c:	bc 01       	movw	r22, r24
    484e:	f6 01       	movw	r30, r12
    4850:	86 a1       	ldd	r24, Z+38	; 0x26
    4852:	97 a1       	ldd	r25, Z+39	; 0x27
    4854:	a0 a5       	ldd	r26, Z+40	; 0x28
    4856:	b1 a5       	ldd	r27, Z+41	; 0x29
    4858:	48 0f       	add	r20, r24
    485a:	59 1f       	adc	r21, r25
    485c:	6a 1f       	adc	r22, r26
    485e:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4860:	41 15       	cp	r20, r1
    4862:	51 05       	cpc	r21, r1
    4864:	61 05       	cpc	r22, r1
    4866:	71 05       	cpc	r23, r1
    4868:	09 f4       	brne	.+2      	; 0x486c <f_rename+0x198>
    486a:	4d c0       	rjmp	.+154    	; 0x4906 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    486c:	c6 01       	movw	r24, r12
    486e:	0e 94 85 08 	call	0x110a	; 0x110a <move_window>
					dir = dj_new.fs->win+32;
    4872:	a8 ad       	ldd	r26, Y+56	; 0x38
    4874:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4876:	88 23       	and	r24, r24
    4878:	09 f0       	breq	.+2      	; 0x487c <f_rename+0x1a8>
    487a:	46 c0       	rjmp	.+140    	; 0x4908 <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    487c:	bd 01       	movw	r22, r26
    487e:	62 5b       	subi	r22, 0xB2	; 178
    4880:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4882:	fb 01       	movw	r30, r22
    4884:	81 81       	ldd	r24, Z+1	; 0x01
    4886:	8e 32       	cpi	r24, 0x2E	; 46
    4888:	99 f5       	brne	.+102    	; 0x48f0 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    488a:	8c 91       	ld	r24, X
    488c:	83 30       	cpi	r24, 0x03	; 3
    488e:	b1 f4       	brne	.+44     	; 0x48bc <f_rename+0x1e8>
    4890:	fe 01       	movw	r30, r28
    4892:	fe 96       	adiw	r30, 0x3e	; 62
    4894:	20 81       	ld	r18, Z
    4896:	31 81       	ldd	r19, Z+1	; 0x01
    4898:	42 81       	ldd	r20, Z+2	; 0x02
    489a:	53 81       	ldd	r21, Z+3	; 0x03
    489c:	92 96       	adiw	r26, 0x22	; 34
    489e:	8d 91       	ld	r24, X+
    48a0:	9d 91       	ld	r25, X+
    48a2:	0d 90       	ld	r0, X+
    48a4:	bc 91       	ld	r27, X
    48a6:	a0 2d       	mov	r26, r0
    48a8:	28 17       	cp	r18, r24
    48aa:	39 07       	cpc	r19, r25
    48ac:	4a 07       	cpc	r20, r26
    48ae:	5b 07       	cpc	r21, r27
    48b0:	29 f4       	brne	.+10     	; 0x48bc <f_rename+0x1e8>
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	30 e0       	ldi	r19, 0x00	; 0
    48b6:	40 e0       	ldi	r20, 0x00	; 0
    48b8:	50 e0       	ldi	r21, 0x00	; 0
    48ba:	06 c0       	rjmp	.+12     	; 0x48c8 <f_rename+0x1f4>
    48bc:	fe 01       	movw	r30, r28
    48be:	fe 96       	adiw	r30, 0x3e	; 62
    48c0:	20 81       	ld	r18, Z
    48c2:	31 81       	ldd	r19, Z+1	; 0x01
    48c4:	42 81       	ldd	r20, Z+2	; 0x02
    48c6:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    48c8:	db 01       	movw	r26, r22
    48ca:	5a 96       	adiw	r26, 0x1a	; 26
    48cc:	2c 93       	st	X, r18
    48ce:	5a 97       	sbiw	r26, 0x1a	; 26
    48d0:	83 2f       	mov	r24, r19
    48d2:	99 27       	eor	r25, r25
    48d4:	5b 96       	adiw	r26, 0x1b	; 27
    48d6:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    48d8:	ca 01       	movw	r24, r20
    48da:	aa 27       	eor	r26, r26
    48dc:	bb 27       	eor	r27, r27
    48de:	fb 01       	movw	r30, r22
    48e0:	84 8b       	std	Z+20, r24	; 0x14
    48e2:	89 2f       	mov	r24, r25
    48e4:	99 27       	eor	r25, r25
    48e6:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    48e8:	e8 ad       	ldd	r30, Y+56	; 0x38
    48ea:	f9 ad       	ldd	r31, Y+57	; 0x39
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    48f0:	ce 01       	movw	r24, r28
    48f2:	82 96       	adiw	r24, 0x22	; 34
    48f4:	0e 94 12 10 	call	0x2024	; 0x2024 <dir_remove>
				if (res == FR_OK)
    48f8:	88 23       	and	r24, r24
    48fa:	31 f4       	brne	.+12     	; 0x4908 <f_rename+0x234>
					res = sync(dj_old.fs);
    48fc:	8a a1       	ldd	r24, Y+34	; 0x22
    48fe:	9b a1       	ldd	r25, Y+35	; 0x23
    4900:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sync>
    4904:	01 c0       	rjmp	.+2      	; 0x4908 <f_rename+0x234>
    4906:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4908:	c1 5b       	subi	r28, 0xB1	; 177
    490a:	df 4f       	sbci	r29, 0xFF	; 255
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	df 90       	pop	r13
    491e:	cf 90       	pop	r12
    4920:	08 95       	ret

00004922 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4922:	2f 92       	push	r2
    4924:	3f 92       	push	r3
    4926:	4f 92       	push	r4
    4928:	5f 92       	push	r5
    492a:	6f 92       	push	r6
    492c:	7f 92       	push	r7
    492e:	8f 92       	push	r8
    4930:	9f 92       	push	r9
    4932:	af 92       	push	r10
    4934:	bf 92       	push	r11
    4936:	cf 92       	push	r12
    4938:	df 92       	push	r13
    493a:	ef 92       	push	r14
    493c:	ff 92       	push	r15
    493e:	0f 93       	push	r16
    4940:	1f 93       	push	r17
    4942:	df 93       	push	r29
    4944:	cf 93       	push	r28
    4946:	cd b7       	in	r28, 0x3d	; 61
    4948:	de b7       	in	r29, 0x3e	; 62
    494a:	a4 97       	sbiw	r28, 0x24	; 36
    494c:	cd bf       	out	0x3d, r28	; 61
    494e:	de bf       	out	0x3e, r29	; 62
    4950:	68 a3       	std	Y+32, r22	; 0x20
    4952:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4954:	82 30       	cpi	r24, 0x02	; 2
    4956:	10 f0       	brcs	.+4      	; 0x495c <f_mkfs+0x3a>
    4958:	8b e0       	ldi	r24, 0x0B	; 11
    495a:	e2 c4       	rjmp	.+2500   	; 0x5320 <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    495c:	28 a1       	ldd	r18, Y+32	; 0x20
    495e:	22 30       	cpi	r18, 0x02	; 2
    4960:	08 f0       	brcs	.+2      	; 0x4964 <f_mkfs+0x42>
    4962:	db c4       	rjmp	.+2486   	; 0x531a <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4964:	a8 2f       	mov	r26, r24
    4966:	b0 e0       	ldi	r27, 0x00	; 0
    4968:	aa 0f       	add	r26, r26
    496a:	bb 1f       	adc	r27, r27
    496c:	fd 01       	movw	r30, r26
    496e:	e3 59       	subi	r30, 0x93	; 147
    4970:	fb 4c       	sbci	r31, 0xCB	; 203
    4972:	c0 80       	ld	r12, Z
    4974:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4976:	c1 14       	cp	r12, r1
    4978:	d1 04       	cpc	r13, r1
    497a:	11 f4       	brne	.+4      	; 0x4980 <f_mkfs+0x5e>
    497c:	8c e0       	ldi	r24, 0x0C	; 12
    497e:	d0 c4       	rjmp	.+2464   	; 0x5320 <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4980:	f6 01       	movw	r30, r12
    4982:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4984:	a4 5e       	subi	r26, 0xE4	; 228
    4986:	b3 4d       	sbci	r27, 0xD3	; 211
    4988:	fc 91       	ld	r31, X
    498a:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    498c:	8f 2f       	mov	r24, r31
    498e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4992:	80 ff       	sbrs	r24, 0
    4994:	02 c0       	rjmp	.+4      	; 0x499a <f_mkfs+0x78>
    4996:	83 e0       	ldi	r24, 0x03	; 3
    4998:	c3 c4       	rjmp	.+2438   	; 0x5320 <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    499a:	82 ff       	sbrs	r24, 2
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <f_mkfs+0x80>
    499e:	8a e0       	ldi	r24, 0x0A	; 10
    49a0:	bf c4       	rjmp	.+2430   	; 0x5320 <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    49a2:	89 89       	ldd	r24, Y+17	; 0x11
    49a4:	61 e0       	ldi	r22, 0x01	; 1
    49a6:	ae 01       	movw	r20, r28
    49a8:	4f 5f       	subi	r20, 0xFF	; 255
    49aa:	5f 4f       	sbci	r21, 0xFF	; 255
    49ac:	0e 94 99 06 	call	0xd32	; 0xd32 <disk_ioctl>
    49b0:	88 23       	and	r24, r24
    49b2:	09 f0       	breq	.+2      	; 0x49b6 <f_mkfs+0x94>
    49b4:	b2 c4       	rjmp	.+2404   	; 0x531a <f_mkfs+0x9f8>
    49b6:	89 81       	ldd	r24, Y+1	; 0x01
    49b8:	9a 81       	ldd	r25, Y+2	; 0x02
    49ba:	ab 81       	ldd	r26, Y+3	; 0x03
    49bc:	bc 81       	ldd	r27, Y+4	; 0x04
    49be:	80 3d       	cpi	r24, 0xD0	; 208
    49c0:	27 e0       	ldi	r18, 0x07	; 7
    49c2:	92 07       	cpc	r25, r18
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	a2 07       	cpc	r26, r18
    49c8:	20 e0       	ldi	r18, 0x00	; 0
    49ca:	b2 07       	cpc	r27, r18
    49cc:	08 f4       	brcc	.+2      	; 0x49d0 <f_mkfs+0xae>
    49ce:	a5 c4       	rjmp	.+2378   	; 0x531a <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    49d0:	81 50       	subi	r24, 0x01	; 1
    49d2:	90 40       	sbci	r25, 0x00	; 0
    49d4:	a0 4d       	sbci	r26, 0xD0	; 208
    49d6:	b7 40       	sbci	r27, 0x07	; 7
    49d8:	40 f0       	brcs	.+16     	; 0x49ea <f_mkfs+0xc8>
    49da:	80 e0       	ldi	r24, 0x00	; 0
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	a0 ed       	ldi	r26, 0xD0	; 208
    49e0:	b7 e0       	ldi	r27, 0x07	; 7
    49e2:	89 83       	std	Y+1, r24	; 0x01
    49e4:	9a 83       	std	Y+2, r25	; 0x02
    49e6:	ab 83       	std	Y+3, r26	; 0x03
    49e8:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    49ea:	48 a1       	ldd	r20, Y+32	; 0x20
    49ec:	44 23       	and	r20, r20
    49ee:	29 f0       	breq	.+10     	; 0x49fa <f_mkfs+0xd8>
    49f0:	1a 8e       	std	Y+26, r1	; 0x1a
    49f2:	1b 8e       	std	Y+27, r1	; 0x1b
    49f4:	1c 8e       	std	Y+28, r1	; 0x1c
    49f6:	1d 8e       	std	Y+29, r1	; 0x1d
    49f8:	08 c0       	rjmp	.+16     	; 0x4a0a <f_mkfs+0xe8>
    49fa:	8f e3       	ldi	r24, 0x3F	; 63
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	b0 e0       	ldi	r27, 0x00	; 0
    4a02:	8a 8f       	std	Y+26, r24	; 0x1a
    4a04:	9b 8f       	std	Y+27, r25	; 0x1b
    4a06:	ac 8f       	std	Y+28, r26	; 0x1c
    4a08:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4a0a:	89 80       	ldd	r8, Y+1	; 0x01
    4a0c:	9a 80       	ldd	r9, Y+2	; 0x02
    4a0e:	ab 80       	ldd	r10, Y+3	; 0x03
    4a10:	bc 80       	ldd	r11, Y+4	; 0x04
    4a12:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4a14:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4a16:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4a18:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4a1a:	82 1a       	sub	r8, r18
    4a1c:	93 0a       	sbc	r9, r19
    4a1e:	a4 0a       	sbc	r10, r20
    4a20:	b5 0a       	sbc	r11, r21
    4a22:	89 82       	std	Y+1, r8	; 0x01
    4a24:	9a 82       	std	Y+2, r9	; 0x02
    4a26:	ab 82       	std	Y+3, r10	; 0x03
    4a28:	bc 82       	std	Y+4, r11	; 0x04
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	92 e0       	ldi	r25, 0x02	; 2
    4a2e:	a0 e0       	ldi	r26, 0x00	; 0
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	20 e0       	ldi	r18, 0x00	; 0
    4a34:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4a36:	73 01       	movw	r14, r6
    4a38:	00 e0       	ldi	r16, 0x00	; 0
    4a3a:	10 e0       	ldi	r17, 0x00	; 0
    4a3c:	09 c0       	rjmp	.+18     	; 0x4a50 <f_mkfs+0x12e>
    4a3e:	88 0f       	add	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	aa 1f       	adc	r26, r26
    4a44:	bb 1f       	adc	r27, r27
    4a46:	2f 5f       	subi	r18, 0xFF	; 255
    4a48:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4a:	27 30       	cpi	r18, 0x07	; 7
    4a4c:	31 05       	cpc	r19, r1
    4a4e:	31 f0       	breq	.+12     	; 0x4a5c <f_mkfs+0x13a>
    4a50:	8e 15       	cp	r24, r14
    4a52:	9f 05       	cpc	r25, r15
    4a54:	a0 07       	cpc	r26, r16
    4a56:	b1 07       	cpc	r27, r17
    4a58:	91 f7       	brne	.-28     	; 0x4a3e <f_mkfs+0x11c>
    4a5a:	05 c0       	rjmp	.+10     	; 0x4a66 <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4a5c:	8e 15       	cp	r24, r14
    4a5e:	9f 05       	cpc	r25, r15
    4a60:	a0 07       	cpc	r26, r16
    4a62:	b1 07       	cpc	r27, r17
    4a64:	19 f4       	brne	.+6      	; 0x4a6c <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4a66:	61 14       	cp	r6, r1
    4a68:	71 04       	cpc	r7, r1
    4a6a:	11 f5       	brne	.+68     	; 0x4ab0 <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4a6c:	e8 e7       	ldi	r30, 0x78	; 120
    4a6e:	f3 e3       	ldi	r31, 0x33	; 51
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e0       	ldi	r20, 0x00	; 0
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	81 91       	ld	r24, Z+
    4a7a:	91 91       	ld	r25, Z+
    4a7c:	a1 91       	ld	r26, Z+
    4a7e:	b1 91       	ld	r27, Z+
    4a80:	b9 01       	movw	r22, r18
    4a82:	14 2f       	mov	r17, r20
    4a84:	05 2f       	mov	r16, r21
    4a86:	2f 5f       	subi	r18, 0xFF	; 255
    4a88:	3f 4f       	sbci	r19, 0xFF	; 255
    4a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    4a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a8e:	88 16       	cp	r8, r24
    4a90:	99 06       	cpc	r9, r25
    4a92:	aa 06       	cpc	r10, r26
    4a94:	bb 06       	cpc	r11, r27
    4a96:	80 f3       	brcs	.-32     	; 0x4a78 <f_mkfs+0x156>
    4a98:	cb 01       	movw	r24, r22
    4a9a:	6d 83       	std	Y+5, r22	; 0x05
    4a9c:	9e 83       	std	Y+6, r25	; 0x06
    4a9e:	1f 83       	std	Y+7, r17	; 0x07
    4aa0:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4aa2:	fb 01       	movw	r30, r22
    4aa4:	ee 0f       	add	r30, r30
    4aa6:	ff 1f       	adc	r31, r31
    4aa8:	ee 59       	subi	r30, 0x9E	; 158
    4aaa:	fc 4c       	sbci	r31, 0xCC	; 204
    4aac:	60 80       	ld	r6, Z
    4aae:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	63 16       	cp	r6, r19
    4ab4:	32 e0       	ldi	r19, 0x02	; 2
    4ab6:	73 06       	cpc	r7, r19
    4ab8:	18 f4       	brcc	.+6      	; 0x4ac0 <f_mkfs+0x19e>
    4aba:	61 2c       	mov	r6, r1
    4abc:	f2 e0       	ldi	r31, 0x02	; 2
    4abe:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4ac0:	13 01       	movw	r2, r6
    4ac2:	23 2c       	mov	r2, r3
    4ac4:	33 24       	eor	r3, r3
    4ac6:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4ac8:	c1 01       	movw	r24, r2
    4aca:	a0 e0       	ldi	r26, 0x00	; 0
    4acc:	b0 e0       	ldi	r27, 0x00	; 0
    4ace:	8d 87       	std	Y+13, r24	; 0x0d
    4ad0:	9e 87       	std	Y+14, r25	; 0x0e
    4ad2:	af 87       	std	Y+15, r26	; 0x0f
    4ad4:	b8 8b       	std	Y+16, r27	; 0x10
    4ad6:	c5 01       	movw	r24, r10
    4ad8:	b4 01       	movw	r22, r8
    4ada:	2d 85       	ldd	r18, Y+13	; 0x0d
    4adc:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ade:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ae0:	58 89       	ldd	r21, Y+16	; 0x10
    4ae2:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    4ae6:	c9 01       	movw	r24, r18
    4ae8:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4aea:	85 3f       	cpi	r24, 0xF5	; 245
    4aec:	ef e0       	ldi	r30, 0x0F	; 15
    4aee:	9e 07       	cpc	r25, r30
    4af0:	e0 e0       	ldi	r30, 0x00	; 0
    4af2:	ae 07       	cpc	r26, r30
    4af4:	e0 e0       	ldi	r30, 0x00	; 0
    4af6:	be 07       	cpc	r27, r30
    4af8:	08 f4       	brcc	.+2      	; 0x4afc <f_mkfs+0x1da>
    4afa:	28 c4       	rjmp	.+2128   	; 0x534c <f_mkfs+0xa2a>
    4afc:	f8 a1       	ldd	r31, Y+32	; 0x20
    4afe:	2f 2f       	mov	r18, r31
    4b00:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4b02:	85 3f       	cpi	r24, 0xF5	; 245
    4b04:	4f ef       	ldi	r20, 0xFF	; 255
    4b06:	94 07       	cpc	r25, r20
    4b08:	40 e0       	ldi	r20, 0x00	; 0
    4b0a:	a4 07       	cpc	r26, r20
    4b0c:	40 e0       	ldi	r20, 0x00	; 0
    4b0e:	b4 07       	cpc	r27, r20
    4b10:	50 f5       	brcc	.+84     	; 0x4b66 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4b12:	7c 01       	movw	r14, r24
    4b14:	8d 01       	movw	r16, r26
    4b16:	ee 0c       	add	r14, r14
    4b18:	ff 1c       	adc	r15, r15
    4b1a:	00 1f       	adc	r16, r16
    4b1c:	11 1f       	adc	r17, r17
    4b1e:	83 e0       	ldi	r24, 0x03	; 3
    4b20:	92 e0       	ldi	r25, 0x02	; 2
    4b22:	a0 e0       	ldi	r26, 0x00	; 0
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	e8 0e       	add	r14, r24
    4b28:	f9 1e       	adc	r15, r25
    4b2a:	0a 1f       	adc	r16, r26
    4b2c:	1b 1f       	adc	r17, r27
    4b2e:	69 e0       	ldi	r22, 0x09	; 9
    4b30:	16 95       	lsr	r17
    4b32:	07 95       	ror	r16
    4b34:	f7 94       	ror	r15
    4b36:	e7 94       	ror	r14
    4b38:	6a 95       	dec	r22
    4b3a:	d1 f7       	brne	.-12     	; 0x4b30 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4b3c:	2f 5f       	subi	r18, 0xFF	; 255
    4b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b40:	c9 01       	movw	r24, r18
    4b42:	aa 27       	eor	r26, r26
    4b44:	97 fd       	sbrc	r25, 7
    4b46:	a0 95       	com	r26
    4b48:	ba 2f       	mov	r27, r26
    4b4a:	8e 8b       	std	Y+22, r24	; 0x16
    4b4c:	9f 8b       	std	Y+23, r25	; 0x17
    4b4e:	a8 8f       	std	Y+24, r26	; 0x18
    4b50:	b9 8f       	std	Y+25, r27	; 0x19
    4b52:	20 e2       	ldi	r18, 0x20	; 32
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	40 e0       	ldi	r20, 0x00	; 0
    4b58:	50 e0       	ldi	r21, 0x00	; 0
    4b5a:	2a 8b       	std	Y+18, r18	; 0x12
    4b5c:	3b 8b       	std	Y+19, r19	; 0x13
    4b5e:	4c 8b       	std	Y+20, r20	; 0x14
    4b60:	5d 8b       	std	Y+21, r21	; 0x15
    4b62:	32 e0       	ldi	r19, 0x02	; 2
    4b64:	2a c0       	rjmp	.+84     	; 0x4bba <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4b66:	7c 01       	movw	r14, r24
    4b68:	8d 01       	movw	r16, r26
    4b6a:	52 e0       	ldi	r21, 0x02	; 2
    4b6c:	ee 0c       	add	r14, r14
    4b6e:	ff 1c       	adc	r15, r15
    4b70:	00 1f       	adc	r16, r16
    4b72:	11 1f       	adc	r17, r17
    4b74:	5a 95       	dec	r21
    4b76:	d1 f7       	brne	.-12     	; 0x4b6c <f_mkfs+0x24a>
    4b78:	87 e0       	ldi	r24, 0x07	; 7
    4b7a:	92 e0       	ldi	r25, 0x02	; 2
    4b7c:	a0 e0       	ldi	r26, 0x00	; 0
    4b7e:	b0 e0       	ldi	r27, 0x00	; 0
    4b80:	e8 0e       	add	r14, r24
    4b82:	f9 1e       	adc	r15, r25
    4b84:	0a 1f       	adc	r16, r26
    4b86:	1b 1f       	adc	r17, r27
    4b88:	49 e0       	ldi	r20, 0x09	; 9
    4b8a:	16 95       	lsr	r17
    4b8c:	07 95       	ror	r16
    4b8e:	f7 94       	ror	r15
    4b90:	e7 94       	ror	r14
    4b92:	4a 95       	dec	r20
    4b94:	d1 f7       	brne	.-12     	; 0x4b8a <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4b96:	81 e2       	ldi	r24, 0x21	; 33
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	82 1b       	sub	r24, r18
    4b9c:	93 0b       	sbc	r25, r19
    4b9e:	9c 01       	movw	r18, r24
    4ba0:	44 27       	eor	r20, r20
    4ba2:	37 fd       	sbrc	r19, 7
    4ba4:	40 95       	com	r20
    4ba6:	54 2f       	mov	r21, r20
    4ba8:	2e 8b       	std	Y+22, r18	; 0x16
    4baa:	3f 8b       	std	Y+23, r19	; 0x17
    4bac:	48 8f       	std	Y+24, r20	; 0x18
    4bae:	59 8f       	std	Y+25, r21	; 0x19
    4bb0:	1a 8a       	std	Y+18, r1	; 0x12
    4bb2:	1b 8a       	std	Y+19, r1	; 0x13
    4bb4:	1c 8a       	std	Y+20, r1	; 0x14
    4bb6:	1d 8a       	std	Y+21, r1	; 0x15
    4bb8:	33 e0       	ldi	r19, 0x03	; 3
    4bba:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4bbc:	89 89       	ldd	r24, Y+17	; 0x11
    4bbe:	63 e0       	ldi	r22, 0x03	; 3
    4bc0:	ae 01       	movw	r20, r28
    4bc2:	4b 5f       	subi	r20, 0xFB	; 251
    4bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc6:	0e 94 99 06 	call	0xd32	; 0xd32 <disk_ioctl>
    4bca:	88 23       	and	r24, r24
    4bcc:	09 f0       	breq	.+2      	; 0x4bd0 <f_mkfs+0x2ae>
    4bce:	a5 c3       	rjmp	.+1866   	; 0x531a <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4bd0:	8e 89       	ldd	r24, Y+22	; 0x16
    4bd2:	9f 89       	ldd	r25, Y+23	; 0x17
    4bd4:	a8 8d       	ldd	r26, Y+24	; 0x18
    4bd6:	b9 8d       	ldd	r27, Y+25	; 0x19
    4bd8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4bda:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4bdc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4bde:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4be0:	82 0f       	add	r24, r18
    4be2:	93 1f       	adc	r25, r19
    4be4:	a4 1f       	adc	r26, r20
    4be6:	b5 1f       	adc	r27, r21
    4be8:	89 87       	std	Y+9, r24	; 0x09
    4bea:	9a 87       	std	Y+10, r25	; 0x0a
    4bec:	ab 87       	std	Y+11, r26	; 0x0b
    4bee:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4bf0:	2a 89       	ldd	r18, Y+18	; 0x12
    4bf2:	3b 89       	ldd	r19, Y+19	; 0x13
    4bf4:	4c 89       	ldd	r20, Y+20	; 0x14
    4bf6:	5d 89       	ldd	r21, Y+21	; 0x15
    4bf8:	2e 0d       	add	r18, r14
    4bfa:	3f 1d       	adc	r19, r15
    4bfc:	40 1f       	adc	r20, r16
    4bfe:	51 1f       	adc	r21, r17
    4c00:	28 0f       	add	r18, r24
    4c02:	39 1f       	adc	r19, r25
    4c04:	4a 1f       	adc	r20, r26
    4c06:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4c08:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c0c:	af 81       	ldd	r26, Y+7	; 0x07
    4c0e:	b8 85       	ldd	r27, Y+8	; 0x08
    4c10:	4c 01       	movw	r8, r24
    4c12:	5d 01       	movw	r10, r26
    4c14:	08 94       	sec
    4c16:	81 08       	sbc	r8, r1
    4c18:	91 08       	sbc	r9, r1
    4c1a:	a1 08       	sbc	r10, r1
    4c1c:	b1 08       	sbc	r11, r1
    4c1e:	82 0e       	add	r8, r18
    4c20:	93 1e       	adc	r9, r19
    4c22:	a4 1e       	adc	r10, r20
    4c24:	b5 1e       	adc	r11, r21
    4c26:	b0 95       	com	r27
    4c28:	a0 95       	com	r26
    4c2a:	90 95       	com	r25
    4c2c:	81 95       	neg	r24
    4c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c30:	af 4f       	sbci	r26, 0xFF	; 255
    4c32:	bf 4f       	sbci	r27, 0xFF	; 255
    4c34:	88 22       	and	r8, r24
    4c36:	99 22       	and	r9, r25
    4c38:	aa 22       	and	r10, r26
    4c3a:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4c3c:	27 01       	movw	r4, r14
    4c3e:	38 01       	movw	r6, r16
    4c40:	42 1a       	sub	r4, r18
    4c42:	53 0a       	sbc	r5, r19
    4c44:	64 0a       	sbc	r6, r20
    4c46:	75 0a       	sbc	r7, r21
    4c48:	48 0c       	add	r4, r8
    4c4a:	59 1c       	adc	r5, r9
    4c4c:	6a 1c       	adc	r6, r10
    4c4e:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4c50:	e9 80       	ldd	r14, Y+1	; 0x01
    4c52:	fa 80       	ldd	r15, Y+2	; 0x02
    4c54:	0b 81       	ldd	r16, Y+3	; 0x03
    4c56:	1c 81       	ldd	r17, Y+4	; 0x04
    4c58:	c8 01       	movw	r24, r16
    4c5a:	b7 01       	movw	r22, r14
    4c5c:	2e 89       	ldd	r18, Y+22	; 0x16
    4c5e:	3f 89       	ldd	r19, Y+23	; 0x17
    4c60:	48 8d       	ldd	r20, Y+24	; 0x18
    4c62:	59 8d       	ldd	r21, Y+25	; 0x19
    4c64:	62 1b       	sub	r22, r18
    4c66:	73 0b       	sbc	r23, r19
    4c68:	84 0b       	sbc	r24, r20
    4c6a:	95 0b       	sbc	r25, r21
    4c6c:	64 19       	sub	r22, r4
    4c6e:	75 09       	sbc	r23, r5
    4c70:	86 09       	sbc	r24, r6
    4c72:	97 09       	sbc	r25, r7
    4c74:	2a 89       	ldd	r18, Y+18	; 0x12
    4c76:	3b 89       	ldd	r19, Y+19	; 0x13
    4c78:	4c 89       	ldd	r20, Y+20	; 0x14
    4c7a:	5d 89       	ldd	r21, Y+21	; 0x15
    4c7c:	62 1b       	sub	r22, r18
    4c7e:	73 0b       	sbc	r23, r19
    4c80:	84 0b       	sbc	r24, r20
    4c82:	95 0b       	sbc	r25, r21
    4c84:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c86:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c88:	4f 85       	ldd	r20, Y+15	; 0x0f
    4c8a:	58 89       	ldd	r21, Y+16	; 0x10
    4c8c:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    4c90:	29 a3       	std	Y+33, r18	; 0x21
    4c92:	3a a3       	std	Y+34, r19	; 0x22
    4c94:	4b a3       	std	Y+35, r20	; 0x23
    4c96:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4c98:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4c9a:	32 30       	cpi	r19, 0x02	; 2
    4c9c:	51 f4       	brne	.+20     	; 0x4cb2 <f_mkfs+0x390>
    4c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    4ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ca2:	ab a1       	ldd	r26, Y+35	; 0x23
    4ca4:	bc a1       	ldd	r27, Y+36	; 0x24
    4ca6:	85 5f       	subi	r24, 0xF5	; 245
    4ca8:	9f 40       	sbci	r25, 0x0F	; 15
    4caa:	a0 40       	sbci	r26, 0x00	; 0
    4cac:	b0 40       	sbci	r27, 0x00	; 0
    4cae:	70 f4       	brcc	.+28     	; 0x4ccc <f_mkfs+0x3aa>
    4cb0:	34 c3       	rjmp	.+1640   	; 0x531a <f_mkfs+0x9f8>
    4cb2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4cb4:	f3 30       	cpi	r31, 0x03	; 3
    4cb6:	51 f4       	brne	.+20     	; 0x4ccc <f_mkfs+0x3aa>
    4cb8:	29 a1       	ldd	r18, Y+33	; 0x21
    4cba:	3a a1       	ldd	r19, Y+34	; 0x22
    4cbc:	4b a1       	ldd	r20, Y+35	; 0x23
    4cbe:	5c a1       	ldd	r21, Y+36	; 0x24
    4cc0:	25 5f       	subi	r18, 0xF5	; 245
    4cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc4:	40 40       	sbci	r20, 0x00	; 0
    4cc6:	50 40       	sbci	r21, 0x00	; 0
    4cc8:	08 f4       	brcc	.+2      	; 0x4ccc <f_mkfs+0x3aa>
    4cca:	27 c3       	rjmp	.+1614   	; 0x531a <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4ccc:	8d 82       	std	Y+5, r8	; 0x05
    4cce:	9e 82       	std	Y+6, r9	; 0x06
    4cd0:	af 82       	std	Y+7, r10	; 0x07
    4cd2:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4cd4:	98 a1       	ldd	r25, Y+32	; 0x20
    4cd6:	99 23       	and	r25, r25
    4cd8:	11 f0       	breq	.+4      	; 0x4cde <f_mkfs+0x3bc>
    4cda:	10 ef       	ldi	r17, 0xF0	; 240
    4cdc:	9c c0       	rjmp	.+312    	; 0x4e16 <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4cde:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ce0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4ce2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4ce4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4ce6:	4e 0d       	add	r20, r14
    4ce8:	5f 1d       	adc	r21, r15
    4cea:	60 1f       	adc	r22, r16
    4cec:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4cee:	3e e2       	ldi	r19, 0x2E	; 46
    4cf0:	e3 2e       	mov	r14, r19
    4cf2:	f1 2c       	mov	r15, r1
    4cf4:	ec 0c       	add	r14, r12
    4cf6:	fd 1c       	adc	r15, r13
    4cf8:	f7 01       	movw	r30, r14
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	32 e0       	ldi	r19, 0x02	; 2
    4cfe:	01 c0       	rjmp	.+2      	; 0x4d02 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4d00:	11 92       	st	Z+, r1
    4d02:	21 50       	subi	r18, 0x01	; 1
    4d04:	30 40       	sbci	r19, 0x00	; 0
    4d06:	af ef       	ldi	r26, 0xFF	; 255
    4d08:	2f 3f       	cpi	r18, 0xFF	; 255
    4d0a:	3a 07       	cpc	r19, r26
    4d0c:	c9 f7       	brne	.-14     	; 0x4d00 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4d0e:	86 01       	movw	r16, r12
    4d10:	04 51       	subi	r16, 0x14	; 20
    4d12:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4d14:	80 e8       	ldi	r24, 0x80	; 128
    4d16:	f8 01       	movw	r30, r16
    4d18:	80 83       	st	Z, r24
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	81 83       	std	Z+1, r24	; 0x01
    4d1e:	82 83       	std	Z+2, r24	; 0x02
    4d20:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4d22:	40 30       	cpi	r20, 0x00	; 0
    4d24:	f4 e0       	ldi	r31, 0x04	; 4
    4d26:	5f 07       	cpc	r21, r31
    4d28:	fb ef       	ldi	r31, 0xFB	; 251
    4d2a:	6f 07       	cpc	r22, r31
    4d2c:	f0 e0       	ldi	r31, 0x00	; 0
    4d2e:	7f 07       	cpc	r23, r31
    4d30:	b0 f4       	brcc	.+44     	; 0x4d5e <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4d32:	cb 01       	movw	r24, r22
    4d34:	ba 01       	movw	r22, r20
    4d36:	21 ec       	ldi	r18, 0xC1	; 193
    4d38:	3e e3       	ldi	r19, 0x3E	; 62
    4d3a:	40 e0       	ldi	r20, 0x00	; 0
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    4d42:	c9 01       	movw	r24, r18
    4d44:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4d46:	f8 01       	movw	r30, r16
    4d48:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4d4a:	22 e0       	ldi	r18, 0x02	; 2
    4d4c:	b6 95       	lsr	r27
    4d4e:	a7 95       	ror	r26
    4d50:	97 95       	ror	r25
    4d52:	87 95       	ror	r24
    4d54:	2a 95       	dec	r18
    4d56:	d1 f7       	brne	.-12     	; 0x4d4c <f_mkfs+0x42a>
    4d58:	8f 63       	ori	r24, 0x3F	; 63
    4d5a:	86 83       	std	Z+6, r24	; 0x06
    4d5c:	07 c0       	rjmp	.+14     	; 0x4d6c <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4d5e:	8f ef       	ldi	r24, 0xFF	; 255
    4d60:	d8 01       	movw	r26, r16
    4d62:	16 96       	adiw	r26, 0x06	; 6
    4d64:	8c 93       	st	X, r24
    4d66:	16 97       	sbiw	r26, 0x06	; 6
    4d68:	17 96       	adiw	r26, 0x07	; 7
    4d6a:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4d6c:	8e ef       	ldi	r24, 0xFE	; 254
    4d6e:	f8 01       	movw	r30, r16
    4d70:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4d72:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4d74:	f3 30       	cpi	r31, 0x03	; 3
    4d76:	81 f0       	breq	.+32     	; 0x4d98 <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4d78:	89 81       	ldd	r24, Y+1	; 0x01
    4d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7c:	ab 81       	ldd	r26, Y+3	; 0x03
    4d7e:	bc 81       	ldd	r27, Y+4	; 0x04
    4d80:	80 50       	subi	r24, 0x00	; 0
    4d82:	90 40       	sbci	r25, 0x00	; 0
    4d84:	a1 40       	sbci	r26, 0x01	; 1
    4d86:	b0 40       	sbci	r27, 0x00	; 0
    4d88:	10 f0       	brcs	.+4      	; 0x4d8e <f_mkfs+0x46c>
    4d8a:	86 e0       	ldi	r24, 0x06	; 6
    4d8c:	01 c0       	rjmp	.+2      	; 0x4d90 <f_mkfs+0x46e>
    4d8e:	84 e0       	ldi	r24, 0x04	; 4
    4d90:	d8 01       	movw	r26, r16
    4d92:	14 96       	adiw	r26, 0x04	; 4
    4d94:	8c 93       	st	X, r24
    4d96:	03 c0       	rjmp	.+6      	; 0x4d9e <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4d98:	8c e0       	ldi	r24, 0x0C	; 12
    4d9a:	f8 01       	movw	r30, r16
    4d9c:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4d9e:	8f e3       	ldi	r24, 0x3F	; 63
    4da0:	d8 01       	movw	r26, r16
    4da2:	18 96       	adiw	r26, 0x08	; 8
    4da4:	8c 93       	st	X, r24
    4da6:	18 97       	sbiw	r26, 0x08	; 8
    4da8:	19 96       	adiw	r26, 0x09	; 9
    4daa:	1c 92       	st	X, r1
    4dac:	19 97       	sbiw	r26, 0x09	; 9
    4dae:	1a 96       	adiw	r26, 0x0a	; 10
    4db0:	1c 92       	st	X, r1
    4db2:	1a 97       	sbiw	r26, 0x0a	; 10
    4db4:	1b 96       	adiw	r26, 0x0b	; 11
    4db6:	1c 92       	st	X, r1
    4db8:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	1c 96       	adiw	r26, 0x0c	; 12
    4dbe:	8c 93       	st	X, r24
    4dc0:	1c 97       	sbiw	r26, 0x0c	; 12
    4dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc4:	1d 96       	adiw	r26, 0x0d	; 13
    4dc6:	8c 93       	st	X, r24
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
    4dca:	9a 81       	ldd	r25, Y+2	; 0x02
    4dcc:	ab 81       	ldd	r26, Y+3	; 0x03
    4dce:	bc 81       	ldd	r27, Y+4	; 0x04
    4dd0:	cd 01       	movw	r24, r26
    4dd2:	aa 27       	eor	r26, r26
    4dd4:	bb 27       	eor	r27, r27
    4dd6:	f8 01       	movw	r30, r16
    4dd8:	86 87       	std	Z+14, r24	; 0x0e
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dde:	ab 81       	ldd	r26, Y+3	; 0x03
    4de0:	bc 81       	ldd	r27, Y+4	; 0x04
    4de2:	8b 2f       	mov	r24, r27
    4de4:	99 27       	eor	r25, r25
    4de6:	aa 27       	eor	r26, r26
    4de8:	bb 27       	eor	r27, r27
    4dea:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4dec:	00 5c       	subi	r16, 0xC0	; 192
    4dee:	1f 4f       	sbci	r17, 0xFF	; 255
    4df0:	85 e5       	ldi	r24, 0x55	; 85
    4df2:	d8 01       	movw	r26, r16
    4df4:	8d 93       	st	X+, r24
    4df6:	fd 01       	movw	r30, r26
    4df8:	8a ea       	ldi	r24, 0xAA	; 170
    4dfa:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    4dfc:	89 89       	ldd	r24, Y+17	; 0x11
    4dfe:	b7 01       	movw	r22, r14
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	40 e0       	ldi	r20, 0x00	; 0
    4e06:	50 e0       	ldi	r21, 0x00	; 0
    4e08:	01 e0       	ldi	r16, 0x01	; 1
    4e0a:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    4e0e:	88 23       	and	r24, r24
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <f_mkfs+0x4f2>
    4e12:	85 c2       	rjmp	.+1290   	; 0x531e <f_mkfs+0x9fc>
    4e14:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    4e16:	5e e2       	ldi	r21, 0x2E	; 46
    4e18:	e5 2e       	mov	r14, r21
    4e1a:	f1 2c       	mov	r15, r1
    4e1c:	ec 0c       	add	r14, r12
    4e1e:	fd 1c       	adc	r15, r13
    4e20:	f7 01       	movw	r30, r14
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	92 e0       	ldi	r25, 0x02	; 2
    4e26:	01 c0       	rjmp	.+2      	; 0x4e2a <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4e28:	11 92       	st	Z+, r1
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	bf ef       	ldi	r27, 0xFF	; 255
    4e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4e30:	9b 07       	cpc	r25, r27
    4e32:	d1 f7       	brne	.-12     	; 0x4e28 <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    4e34:	8b ee       	ldi	r24, 0xEB	; 235
    4e36:	f6 01       	movw	r30, r12
    4e38:	86 a7       	std	Z+46, r24	; 0x2e
    4e3a:	8e ef       	ldi	r24, 0xFE	; 254
    4e3c:	87 a7       	std	Z+47, r24	; 0x2f
    4e3e:	80 e9       	ldi	r24, 0x90	; 144
    4e40:	80 ab       	std	Z+48, r24	; 0x30
    4e42:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    4e44:	11 ae       	std	Z+57, r1	; 0x39
    4e46:	82 e0       	ldi	r24, 0x02	; 2
    4e48:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    4e4a:	2e 8e       	std	Y+30, r2	; 0x1e
    4e4c:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    4e4e:	2e 89       	ldd	r18, Y+22	; 0x16
    4e50:	24 af       	std	Z+60, r18	; 0x3c
    4e52:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    4e58:	8a 89       	ldd	r24, Y+18	; 0x12
    4e5a:	9b 89       	ldd	r25, Y+19	; 0x13
    4e5c:	ac 89       	ldd	r26, Y+20	; 0x14
    4e5e:	bd 89       	ldd	r27, Y+21	; 0x15
    4e60:	44 e0       	ldi	r20, 0x04	; 4
    4e62:	88 0f       	add	r24, r24
    4e64:	99 1f       	adc	r25, r25
    4e66:	aa 1f       	adc	r26, r26
    4e68:	bb 1f       	adc	r27, r27
    4e6a:	4a 95       	dec	r20
    4e6c:	d1 f7       	brne	.-12     	; 0x4e62 <f_mkfs+0x540>
    4e6e:	87 af       	std	Z+63, r24	; 0x3f
    4e70:	40 e4       	ldi	r20, 0x40	; 64
    4e72:	50 e0       	ldi	r21, 0x00	; 0
    4e74:	c4 0e       	add	r12, r20
    4e76:	d5 1e       	adc	r13, r21
    4e78:	89 2f       	mov	r24, r25
    4e7a:	99 27       	eor	r25, r25
    4e7c:	d6 01       	movw	r26, r12
    4e7e:	8c 93       	st	X, r24
    4e80:	e0 ec       	ldi	r30, 0xC0	; 192
    4e82:	ff ef       	ldi	r31, 0xFF	; 255
    4e84:	ce 0e       	add	r12, r30
    4e86:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    4e88:	89 81       	ldd	r24, Y+1	; 0x01
    4e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8c:	ab 81       	ldd	r26, Y+3	; 0x03
    4e8e:	bc 81       	ldd	r27, Y+4	; 0x04
    4e90:	80 30       	cpi	r24, 0x00	; 0
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	9f 07       	cpc	r25, r31
    4e96:	f1 e0       	ldi	r31, 0x01	; 1
    4e98:	af 07       	cpc	r26, r31
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	bf 07       	cpc	r27, r31
    4e9e:	60 f4       	brcc	.+24     	; 0x4eb8 <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    4ea0:	21 e4       	ldi	r18, 0x41	; 65
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	c2 0e       	add	r12, r18
    4ea6:	d3 1e       	adc	r13, r19
    4ea8:	f6 01       	movw	r30, r12
    4eaa:	81 93       	st	Z+, r24
    4eac:	6f 01       	movw	r12, r30
    4eae:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb0:	80 83       	st	Z, r24
    4eb2:	2e eb       	ldi	r18, 0xBE	; 190
    4eb4:	3f ef       	ldi	r19, 0xFF	; 255
    4eb6:	1f c0       	rjmp	.+62     	; 0x4ef6 <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    4eb8:	4e e4       	ldi	r20, 0x4E	; 78
    4eba:	50 e0       	ldi	r21, 0x00	; 0
    4ebc:	c4 0e       	add	r12, r20
    4ebe:	d5 1e       	adc	r13, r21
    4ec0:	f6 01       	movw	r30, r12
    4ec2:	81 93       	st	Z+, r24
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	df 01       	movw	r26, r30
    4ec8:	8d 93       	st	X+, r24
    4eca:	6d 01       	movw	r12, r26
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed0:	ab 81       	ldd	r26, Y+3	; 0x03
    4ed2:	bc 81       	ldd	r27, Y+4	; 0x04
    4ed4:	cd 01       	movw	r24, r26
    4ed6:	aa 27       	eor	r26, r26
    4ed8:	bb 27       	eor	r27, r27
    4eda:	f6 01       	movw	r30, r12
    4edc:	81 93       	st	Z+, r24
    4ede:	6f 01       	movw	r12, r30
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee4:	ab 81       	ldd	r26, Y+3	; 0x03
    4ee6:	bc 81       	ldd	r27, Y+4	; 0x04
    4ee8:	8b 2f       	mov	r24, r27
    4eea:	99 27       	eor	r25, r25
    4eec:	aa 27       	eor	r26, r26
    4eee:	bb 27       	eor	r27, r27
    4ef0:	80 83       	st	Z, r24
    4ef2:	2f ea       	ldi	r18, 0xAF	; 175
    4ef4:	3f ef       	ldi	r19, 0xFF	; 255
    4ef6:	c2 0e       	add	r12, r18
    4ef8:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    4efa:	43 e4       	ldi	r20, 0x43	; 67
    4efc:	50 e0       	ldi	r21, 0x00	; 0
    4efe:	c4 0e       	add	r12, r20
    4f00:	d5 1e       	adc	r13, r21
    4f02:	d6 01       	movw	r26, r12
    4f04:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    4f06:	e3 e0       	ldi	r30, 0x03	; 3
    4f08:	f0 e0       	ldi	r31, 0x00	; 0
    4f0a:	ce 0e       	add	r12, r30
    4f0c:	df 1e       	adc	r13, r31
    4f0e:	8f e3       	ldi	r24, 0x3F	; 63
    4f10:	d6 01       	movw	r26, r12
    4f12:	8d 93       	st	X+, r24
    4f14:	fd 01       	movw	r30, r26
    4f16:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    4f18:	8f ef       	ldi	r24, 0xFF	; 255
    4f1a:	df 01       	movw	r26, r30
    4f1c:	8d 93       	st	X+, r24
    4f1e:	fd 01       	movw	r30, r26
    4f20:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    4f22:	df 01       	movw	r26, r30
    4f24:	ea 8d       	ldd	r30, Y+26	; 0x1a
    4f26:	ed 93       	st	X+, r30
    4f28:	1d 92       	st	X+, r1
    4f2a:	fd 01       	movw	r30, r26
    4f2c:	11 92       	st	Z+, r1
    4f2e:	6f 01       	movw	r12, r30
    4f30:	10 82       	st	Z, r1
    4f32:	23 eb       	ldi	r18, 0xB3	; 179
    4f34:	3f ef       	ldi	r19, 0xFF	; 255
    4f36:	c2 0e       	add	r12, r18
    4f38:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    4f3a:	1d 82       	std	Y+5, r1	; 0x05
    4f3c:	1e 82       	std	Y+6, r1	; 0x06
    4f3e:	1f 82       	std	Y+7, r1	; 0x07
    4f40:	18 86       	std	Y+8, r1	; 0x08
    4f42:	b6 01       	movw	r22, r12
    4f44:	6b 5a       	subi	r22, 0xAB	; 171
    4f46:	7f 4f       	sbci	r23, 0xFF	; 255
    4f48:	85 2d       	mov	r24, r5
    4f4a:	99 27       	eor	r25, r25
    4f4c:	d6 01       	movw	r26, r12
    4f4e:	ae 5a       	subi	r26, 0xAE	; 174
    4f50:	bf 4f       	sbci	r27, 0xFF	; 255
    4f52:	96 01       	movw	r18, r12
    4f54:	2c 5a       	subi	r18, 0xAC	; 172
    4f56:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    4f58:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4f5a:	43 30       	cpi	r20, 0x03	; 3
    4f5c:	41 f1       	breq	.+80     	; 0x4fae <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    4f5e:	fb 01       	movw	r30, r22
    4f60:	10 82       	st	Z, r1
    4f62:	46 e5       	ldi	r20, 0x56	; 86
    4f64:	50 e0       	ldi	r21, 0x00	; 0
    4f66:	c4 0e       	add	r12, r20
    4f68:	d5 1e       	adc	r13, r21
    4f6a:	f6 01       	movw	r30, r12
    4f6c:	11 92       	st	Z+, r1
    4f6e:	11 92       	st	Z+, r1
    4f70:	6f 01       	movw	r12, r30
    4f72:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    4f74:	4c ee       	ldi	r20, 0xEC	; 236
    4f76:	5f ef       	ldi	r21, 0xFF	; 255
    4f78:	c4 0e       	add	r12, r20
    4f7a:	d5 1e       	adc	r13, r21
    4f7c:	f6 01       	movw	r30, r12
    4f7e:	41 92       	st	Z+, r4
    4f80:	6f 01       	movw	r12, r30
    4f82:	80 83       	st	Z, r24
    4f84:	4b eb       	ldi	r20, 0xBB	; 187
    4f86:	5f ef       	ldi	r21, 0xFF	; 255
    4f88:	c4 0e       	add	r12, r20
    4f8a:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    4f8c:	80 e8       	ldi	r24, 0x80	; 128
    4f8e:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    4f90:	89 e2       	ldi	r24, 0x29	; 41
    4f92:	d9 01       	movw	r26, r18
    4f94:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4f96:	d7 01       	movw	r26, r14
    4f98:	9b 96       	adiw	r26, 0x2b	; 43
    4f9a:	eb e0       	ldi	r30, 0x0B	; 11
    4f9c:	f0 e2       	ldi	r31, 0x20	; 32
    4f9e:	02 c0       	rjmp	.+4      	; 0x4fa4 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4fa0:	81 91       	ld	r24, Z+
    4fa2:	8d 93       	st	X+, r24
    4fa4:	20 e2       	ldi	r18, 0x20	; 32
    4fa6:	ee 31       	cpi	r30, 0x1E	; 30
    4fa8:	f2 07       	cpc	r31, r18
    4faa:	d1 f7       	brne	.-12     	; 0x4fa0 <f_mkfs+0x67e>
    4fac:	51 c0       	rjmp	.+162    	; 0x5050 <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    4fae:	41 e7       	ldi	r20, 0x71	; 113
    4fb0:	50 e0       	ldi	r21, 0x00	; 0
    4fb2:	c4 0e       	add	r12, r20
    4fb4:	d5 1e       	adc	r13, r21
    4fb6:	f6 01       	movw	r30, r12
    4fb8:	11 92       	st	Z+, r1
    4fba:	11 92       	st	Z+, r1
    4fbc:	11 92       	st	Z+, r1
    4fbe:	6f 01       	movw	r12, r30
    4fc0:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    4fc2:	4c 92       	st	X, r4
    4fc4:	4f ed       	ldi	r20, 0xDF	; 223
    4fc6:	5f ef       	ldi	r21, 0xFF	; 255
    4fc8:	c4 0e       	add	r12, r20
    4fca:	d5 1e       	adc	r13, r21
    4fcc:	d6 01       	movw	r26, r12
    4fce:	8c 93       	st	X, r24
    4fd0:	c3 01       	movw	r24, r6
    4fd2:	aa 27       	eor	r26, r26
    4fd4:	bb 27       	eor	r27, r27
    4fd6:	f9 01       	movw	r30, r18
    4fd8:	80 83       	st	Z, r24
    4fda:	87 2d       	mov	r24, r7
    4fdc:	99 27       	eor	r25, r25
    4fde:	aa 27       	eor	r26, r26
    4fe0:	bb 27       	eor	r27, r27
    4fe2:	fb 01       	movw	r30, r22
    4fe4:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    4fe6:	27 e0       	ldi	r18, 0x07	; 7
    4fe8:	30 e0       	ldi	r19, 0x00	; 0
    4fea:	c2 0e       	add	r12, r18
    4fec:	d3 1e       	adc	r13, r19
    4fee:	82 e0       	ldi	r24, 0x02	; 2
    4ff0:	d6 01       	movw	r26, r12
    4ff2:	8d 93       	st	X+, r24
    4ff4:	fd 01       	movw	r30, r26
    4ff6:	11 92       	st	Z+, r1
    4ff8:	df 01       	movw	r26, r30
    4ffa:	1d 92       	st	X+, r1
    4ffc:	fd 01       	movw	r30, r26
    4ffe:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	df 01       	movw	r26, r30
    5004:	8d 93       	st	X+, r24
    5006:	fd 01       	movw	r30, r26
    5008:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    500a:	86 e0       	ldi	r24, 0x06	; 6
    500c:	df 01       	movw	r26, r30
    500e:	8d 93       	st	X+, r24
    5010:	6d 01       	movw	r12, r26
    5012:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    5014:	ed e0       	ldi	r30, 0x0D	; 13
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	ce 0e       	add	r12, r30
    501a:	df 1e       	adc	r13, r31
    501c:	80 e8       	ldi	r24, 0x80	; 128
    501e:	d6 01       	movw	r26, r12
    5020:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    5022:	e2 e0       	ldi	r30, 0x02	; 2
    5024:	f0 e0       	ldi	r31, 0x00	; 0
    5026:	ce 0e       	add	r12, r30
    5028:	df 1e       	adc	r13, r31
    502a:	89 e2       	ldi	r24, 0x29	; 41
    502c:	d6 01       	movw	r26, r12
    502e:	8c 93       	st	X, r24
    5030:	e0 e9       	ldi	r30, 0x90	; 144
    5032:	ff ef       	ldi	r31, 0xFF	; 255
    5034:	ce 0e       	add	r12, r30
    5036:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5038:	d7 01       	movw	r26, r14
    503a:	a9 5b       	subi	r26, 0xB9	; 185
    503c:	bf 4f       	sbci	r27, 0xFF	; 255
    503e:	ef e1       	ldi	r30, 0x1F	; 31
    5040:	f0 e2       	ldi	r31, 0x20	; 32
    5042:	02 c0       	rjmp	.+4      	; 0x5048 <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5044:	81 91       	ld	r24, Z+
    5046:	8d 93       	st	X+, r24
    5048:	20 e2       	ldi	r18, 0x20	; 32
    504a:	e2 33       	cpi	r30, 0x32	; 50
    504c:	f2 07       	cpc	r31, r18
    504e:	d1 f7       	brne	.-12     	; 0x5044 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    5050:	4c e2       	ldi	r20, 0x2C	; 44
    5052:	52 e0       	ldi	r21, 0x02	; 2
    5054:	c4 0e       	add	r12, r20
    5056:	d5 1e       	adc	r13, r21
    5058:	85 e5       	ldi	r24, 0x55	; 85
    505a:	d6 01       	movw	r26, r12
    505c:	8d 93       	st	X+, r24
    505e:	6d 01       	movw	r12, r26
    5060:	8a ea       	ldi	r24, 0xAA	; 170
    5062:	8c 93       	st	X, r24
    5064:	e3 ed       	ldi	r30, 0xD3	; 211
    5066:	fd ef       	ldi	r31, 0xFD	; 253
    5068:	ce 0e       	add	r12, r30
    506a:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    506c:	89 89       	ldd	r24, Y+17	; 0x11
    506e:	b7 01       	movw	r22, r14
    5070:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5072:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5074:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5076:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5078:	01 e0       	ldi	r16, 0x01	; 1
    507a:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    507e:	88 23       	and	r24, r24
    5080:	09 f0       	breq	.+2      	; 0x5084 <f_mkfs+0x762>
    5082:	4d c1       	rjmp	.+666    	; 0x531e <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    5084:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5086:	f3 30       	cpi	r31, 0x03	; 3
    5088:	61 f4       	brne	.+24     	; 0x50a2 <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    508a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    508c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    508e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5090:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5092:	2a 5f       	subi	r18, 0xFA	; 250
    5094:	3f 4f       	sbci	r19, 0xFF	; 255
    5096:	4f 4f       	sbci	r20, 0xFF	; 255
    5098:	5f 4f       	sbci	r21, 0xFF	; 255
    509a:	89 89       	ldd	r24, Y+17	; 0x11
    509c:	b7 01       	movw	r22, r14
    509e:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    50a2:	f7 01       	movw	r30, r14
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	92 e0       	ldi	r25, 0x02	; 2
    50a8:	01 c0       	rjmp	.+2      	; 0x50ac <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    50aa:	11 92       	st	Z+, r1
    50ac:	01 97       	sbiw	r24, 0x01	; 1
    50ae:	2f ef       	ldi	r18, 0xFF	; 255
    50b0:	8f 3f       	cpi	r24, 0xFF	; 255
    50b2:	92 07       	cpc	r25, r18
    50b4:	d1 f7       	brne	.-12     	; 0x50aa <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    50b6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    50b8:	33 30       	cpi	r19, 0x03	; 3
    50ba:	31 f1       	breq	.+76     	; 0x5108 <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    50bc:	31 30       	cpi	r19, 0x01	; 1
    50be:	29 f0       	breq	.+10     	; 0x50ca <f_mkfs+0x7a8>
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	3f ef       	ldi	r19, 0xFF	; 255
    50c4:	4f ef       	ldi	r20, 0xFF	; 255
    50c6:	5f ef       	ldi	r21, 0xFF	; 255
    50c8:	04 c0       	rjmp	.+8      	; 0x50d2 <f_mkfs+0x7b0>
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	3f ef       	ldi	r19, 0xFF	; 255
    50ce:	4f ef       	ldi	r20, 0xFF	; 255
    50d0:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    50d2:	81 2f       	mov	r24, r17
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	a0 e0       	ldi	r26, 0x00	; 0
    50d8:	b0 e0       	ldi	r27, 0x00	; 0
    50da:	82 2b       	or	r24, r18
    50dc:	93 2b       	or	r25, r19
    50de:	a4 2b       	or	r26, r20
    50e0:	b5 2b       	or	r27, r21
    50e2:	8d 83       	std	Y+5, r24	; 0x05
    50e4:	9e 83       	std	Y+6, r25	; 0x06
    50e6:	af 83       	std	Y+7, r26	; 0x07
    50e8:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    50ea:	f6 01       	movw	r30, r12
    50ec:	86 a7       	std	Z+46, r24	; 0x2e
    50ee:	29 2f       	mov	r18, r25
    50f0:	33 27       	eor	r19, r19
    50f2:	27 a7       	std	Z+47, r18	; 0x2f
    50f4:	9d 01       	movw	r18, r26
    50f6:	44 27       	eor	r20, r20
    50f8:	55 27       	eor	r21, r21
    50fa:	20 ab       	std	Z+48, r18	; 0x30
    50fc:	8b 2f       	mov	r24, r27
    50fe:	99 27       	eor	r25, r25
    5100:	aa 27       	eor	r26, r26
    5102:	bb 27       	eor	r27, r27
    5104:	81 ab       	std	Z+49, r24	; 0x31
    5106:	27 c0       	rjmp	.+78     	; 0x5156 <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    5108:	88 ef       	ldi	r24, 0xF8	; 248
    510a:	d6 01       	movw	r26, r12
    510c:	9e 96       	adiw	r26, 0x2e	; 46
    510e:	8c 93       	st	X, r24
    5110:	9e 97       	sbiw	r26, 0x2e	; 46
    5112:	8f ef       	ldi	r24, 0xFF	; 255
    5114:	9f 96       	adiw	r26, 0x2f	; 47
    5116:	8c 93       	st	X, r24
    5118:	9f 97       	sbiw	r26, 0x2f	; 47
    511a:	d0 96       	adiw	r26, 0x30	; 48
    511c:	8c 93       	st	X, r24
    511e:	d0 97       	sbiw	r26, 0x30	; 48
    5120:	d1 96       	adiw	r26, 0x31	; 49
    5122:	8c 93       	st	X, r24
    5124:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5126:	d2 96       	adiw	r26, 0x32	; 50
    5128:	8c 93       	st	X, r24
    512a:	d2 97       	sbiw	r26, 0x32	; 50
    512c:	d3 96       	adiw	r26, 0x33	; 51
    512e:	8c 93       	st	X, r24
    5130:	d3 97       	sbiw	r26, 0x33	; 51
    5132:	d4 96       	adiw	r26, 0x34	; 52
    5134:	8c 93       	st	X, r24
    5136:	d4 97       	sbiw	r26, 0x34	; 52
    5138:	d5 96       	adiw	r26, 0x35	; 53
    513a:	8c 93       	st	X, r24
    513c:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    513e:	d6 96       	adiw	r26, 0x36	; 54
    5140:	8c 93       	st	X, r24
    5142:	d6 97       	sbiw	r26, 0x36	; 54
    5144:	d7 96       	adiw	r26, 0x37	; 55
    5146:	8c 93       	st	X, r24
    5148:	d7 97       	sbiw	r26, 0x37	; 55
    514a:	d8 96       	adiw	r26, 0x38	; 56
    514c:	8c 93       	st	X, r24
    514e:	d8 97       	sbiw	r26, 0x38	; 56
    5150:	8f e0       	ldi	r24, 0x0F	; 15
    5152:	d9 96       	adiw	r26, 0x39	; 57
    5154:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5156:	89 89       	ldd	r24, Y+17	; 0x11
    5158:	b7 01       	movw	r22, r14
    515a:	29 85       	ldd	r18, Y+9	; 0x09
    515c:	3a 85       	ldd	r19, Y+10	; 0x0a
    515e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5160:	5c 85       	ldd	r21, Y+12	; 0x0c
    5162:	01 e0       	ldi	r16, 0x01	; 1
    5164:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    5168:	88 23       	and	r24, r24
    516a:	09 f0       	breq	.+2      	; 0x516e <f_mkfs+0x84c>
    516c:	d8 c0       	rjmp	.+432    	; 0x531e <f_mkfs+0x9fc>
    516e:	f7 01       	movw	r30, r14
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	92 e0       	ldi	r25, 0x02	; 2
    5174:	01 c0       	rjmp	.+2      	; 0x5178 <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5176:	11 92       	st	Z+, r1
    5178:	01 97       	sbiw	r24, 0x01	; 1
    517a:	bf ef       	ldi	r27, 0xFF	; 255
    517c:	8f 3f       	cpi	r24, 0xFF	; 255
    517e:	9b 07       	cpc	r25, r27
    5180:	d1 f7       	brne	.-12     	; 0x5176 <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5182:	89 84       	ldd	r8, Y+9	; 0x09
    5184:	9a 84       	ldd	r9, Y+10	; 0x0a
    5186:	ab 84       	ldd	r10, Y+11	; 0x0b
    5188:	bc 84       	ldd	r11, Y+12	; 0x0c
    518a:	08 94       	sec
    518c:	81 1c       	adc	r8, r1
    518e:	91 1c       	adc	r9, r1
    5190:	a1 1c       	adc	r10, r1
    5192:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	a0 e0       	ldi	r26, 0x00	; 0
    519a:	b0 e0       	ldi	r27, 0x00	; 0
    519c:	16 c0       	rjmp	.+44     	; 0x51ca <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    519e:	89 89       	ldd	r24, Y+17	; 0x11
    51a0:	b7 01       	movw	r22, r14
    51a2:	a5 01       	movw	r20, r10
    51a4:	94 01       	movw	r18, r8
    51a6:	01 e0       	ldi	r16, 0x01	; 1
    51a8:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    51ac:	88 23       	and	r24, r24
    51ae:	09 f0       	breq	.+2      	; 0x51b2 <f_mkfs+0x890>
    51b0:	b6 c0       	rjmp	.+364    	; 0x531e <f_mkfs+0x9fc>
    51b2:	08 94       	sec
    51b4:	81 1c       	adc	r8, r1
    51b6:	91 1c       	adc	r9, r1
    51b8:	a1 1c       	adc	r10, r1
    51ba:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    51bc:	8d 81       	ldd	r24, Y+5	; 0x05
    51be:	9e 81       	ldd	r25, Y+6	; 0x06
    51c0:	af 81       	ldd	r26, Y+7	; 0x07
    51c2:	b8 85       	ldd	r27, Y+8	; 0x08
    51c4:	01 96       	adiw	r24, 0x01	; 1
    51c6:	a1 1d       	adc	r26, r1
    51c8:	b1 1d       	adc	r27, r1
    51ca:	8d 83       	std	Y+5, r24	; 0x05
    51cc:	9e 83       	std	Y+6, r25	; 0x06
    51ce:	af 83       	std	Y+7, r26	; 0x07
    51d0:	b8 87       	std	Y+8, r27	; 0x08
    51d2:	8d 81       	ldd	r24, Y+5	; 0x05
    51d4:	9e 81       	ldd	r25, Y+6	; 0x06
    51d6:	af 81       	ldd	r26, Y+7	; 0x07
    51d8:	b8 85       	ldd	r27, Y+8	; 0x08
    51da:	84 15       	cp	r24, r4
    51dc:	95 05       	cpc	r25, r5
    51de:	a6 05       	cpc	r26, r6
    51e0:	b7 05       	cpc	r27, r7
    51e2:	e8 f2       	brcs	.-70     	; 0x519e <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    51e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    51e6:	e3 30       	cpi	r30, 0x03	; 3
    51e8:	11 f0       	breq	.+4      	; 0x51ee <f_mkfs+0x8cc>
    51ea:	fa 89       	ldd	r31, Y+18	; 0x12
    51ec:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    51ee:	24 01       	movw	r4, r8
    51f0:	35 01       	movw	r6, r10
    51f2:	08 94       	sec
    51f4:	41 1c       	adc	r4, r1
    51f6:	51 1c       	adc	r5, r1
    51f8:	61 1c       	adc	r6, r1
    51fa:	71 1c       	adc	r7, r1
    51fc:	89 89       	ldd	r24, Y+17	; 0x11
    51fe:	b7 01       	movw	r22, r14
    5200:	a5 01       	movw	r20, r10
    5202:	94 01       	movw	r18, r8
    5204:	01 e0       	ldi	r16, 0x01	; 1
    5206:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
    520a:	88 23       	and	r24, r24
    520c:	09 f0       	breq	.+2      	; 0x5210 <f_mkfs+0x8ee>
    520e:	87 c0       	rjmp	.+270    	; 0x531e <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    5210:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5212:	21 50       	subi	r18, 0x01	; 1
    5214:	2e 8f       	std	Y+30, r18	; 0x1e
    5216:	22 23       	and	r18, r18
    5218:	19 f0       	breq	.+6      	; 0x5220 <f_mkfs+0x8fe>
    521a:	53 01       	movw	r10, r6
    521c:	42 01       	movw	r8, r4
    521e:	e7 cf       	rjmp	.-50     	; 0x51ee <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    5220:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5222:	33 30       	cpi	r19, 0x03	; 3
    5224:	09 f0       	breq	.+2      	; 0x5228 <f_mkfs+0x906>
    5226:	70 c0       	rjmp	.+224    	; 0x5308 <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    5228:	4c e2       	ldi	r20, 0x2C	; 44
    522a:	52 e0       	ldi	r21, 0x02	; 2
    522c:	c4 0e       	add	r12, r20
    522e:	d5 1e       	adc	r13, r21
    5230:	85 e5       	ldi	r24, 0x55	; 85
    5232:	d6 01       	movw	r26, r12
    5234:	8d 93       	st	X+, r24
    5236:	6d 01       	movw	r12, r26
    5238:	8a ea       	ldi	r24, 0xAA	; 170
    523a:	8c 93       	st	X, r24
    523c:	e3 ed       	ldi	r30, 0xD3	; 211
    523e:	fd ef       	ldi	r31, 0xFD	; 253
    5240:	ce 0e       	add	r12, r30
    5242:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5244:	82 e5       	ldi	r24, 0x52	; 82
    5246:	d6 01       	movw	r26, r12
    5248:	9e 96       	adiw	r26, 0x2e	; 46
    524a:	8c 93       	st	X, r24
    524c:	9e 97       	sbiw	r26, 0x2e	; 46
    524e:	9f 96       	adiw	r26, 0x2f	; 47
    5250:	8c 93       	st	X, r24
    5252:	9f 97       	sbiw	r26, 0x2f	; 47
    5254:	21 e6       	ldi	r18, 0x61	; 97
    5256:	d0 96       	adiw	r26, 0x30	; 48
    5258:	2c 93       	st	X, r18
    525a:	d0 97       	sbiw	r26, 0x30	; 48
    525c:	91 e4       	ldi	r25, 0x41	; 65
    525e:	d1 96       	adiw	r26, 0x31	; 49
    5260:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    5262:	e2 e1       	ldi	r30, 0x12	; 18
    5264:	f2 e0       	ldi	r31, 0x02	; 2
    5266:	ce 0e       	add	r12, r30
    5268:	df 1e       	adc	r13, r31
    526a:	82 e7       	ldi	r24, 0x72	; 114
    526c:	d6 01       	movw	r26, r12
    526e:	8d 93       	st	X+, r24
    5270:	fd 01       	movw	r30, r26
    5272:	81 93       	st	Z+, r24
    5274:	df 01       	movw	r26, r30
    5276:	9d 93       	st	X+, r25
    5278:	fd 01       	movw	r30, r26
    527a:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    527c:	89 a1       	ldd	r24, Y+33	; 0x21
    527e:	81 50       	subi	r24, 0x01	; 1
    5280:	df 01       	movw	r26, r30
    5282:	8d 93       	st	X+, r24
    5284:	89 a1       	ldd	r24, Y+33	; 0x21
    5286:	9a a1       	ldd	r25, Y+34	; 0x22
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	fd 01       	movw	r30, r26
    528c:	91 93       	st	Z+, r25
    528e:	89 a1       	ldd	r24, Y+33	; 0x21
    5290:	9a a1       	ldd	r25, Y+34	; 0x22
    5292:	ab a1       	ldd	r26, Y+35	; 0x23
    5294:	bc a1       	ldd	r27, Y+36	; 0x24
    5296:	01 97       	sbiw	r24, 0x01	; 1
    5298:	a1 09       	sbc	r26, r1
    529a:	b1 09       	sbc	r27, r1
    529c:	9d 01       	movw	r18, r26
    529e:	44 27       	eor	r20, r20
    52a0:	55 27       	eor	r21, r21
    52a2:	21 93       	st	Z+, r18
    52a4:	8b 2f       	mov	r24, r27
    52a6:	99 27       	eor	r25, r25
    52a8:	aa 27       	eor	r26, r26
    52aa:	bb 27       	eor	r27, r27
    52ac:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    52ae:	8f ef       	ldi	r24, 0xFF	; 255
    52b0:	df 01       	movw	r26, r30
    52b2:	8d 93       	st	X+, r24
    52b4:	fd 01       	movw	r30, r26
    52b6:	81 93       	st	Z+, r24
    52b8:	df 01       	movw	r26, r30
    52ba:	8d 93       	st	X+, r24
    52bc:	fd 01       	movw	r30, r26
    52be:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    52c0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    52c2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    52c4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    52c6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    52c8:	2f 5f       	subi	r18, 0xFF	; 255
    52ca:	3f 4f       	sbci	r19, 0xFF	; 255
    52cc:	4f 4f       	sbci	r20, 0xFF	; 255
    52ce:	5f 4f       	sbci	r21, 0xFF	; 255
    52d0:	2a 8f       	std	Y+26, r18	; 0x1a
    52d2:	3b 8f       	std	Y+27, r19	; 0x1b
    52d4:	4c 8f       	std	Y+28, r20	; 0x1c
    52d6:	5d 8f       	std	Y+29, r21	; 0x1d
    52d8:	89 89       	ldd	r24, Y+17	; 0x11
    52da:	b7 01       	movw	r22, r14
    52dc:	01 e0       	ldi	r16, 0x01	; 1
    52de:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    52e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    52e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    52e6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    52e8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    52ea:	06 96       	adiw	r24, 0x06	; 6
    52ec:	a1 1d       	adc	r26, r1
    52ee:	b1 1d       	adc	r27, r1
    52f0:	8a 8f       	std	Y+26, r24	; 0x1a
    52f2:	9b 8f       	std	Y+27, r25	; 0x1b
    52f4:	ac 8f       	std	Y+28, r26	; 0x1c
    52f6:	bd 8f       	std	Y+29, r27	; 0x1d
    52f8:	89 89       	ldd	r24, Y+17	; 0x11
    52fa:	b7 01       	movw	r22, r14
    52fc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    52fe:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5300:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5302:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5304:	0e 94 21 06 	call	0xc42	; 0xc42 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    5308:	89 89       	ldd	r24, Y+17	; 0x11
    530a:	60 e0       	ldi	r22, 0x00	; 0
    530c:	40 e0       	ldi	r20, 0x00	; 0
    530e:	50 e0       	ldi	r21, 0x00	; 0
    5310:	0e 94 99 06 	call	0xd32	; 0xd32 <disk_ioctl>
    5314:	88 23       	and	r24, r24
    5316:	21 f0       	breq	.+8      	; 0x5320 <f_mkfs+0x9fe>
    5318:	02 c0       	rjmp	.+4      	; 0x531e <f_mkfs+0x9fc>
    531a:	8e e0       	ldi	r24, 0x0E	; 14
    531c:	01 c0       	rjmp	.+2      	; 0x5320 <f_mkfs+0x9fe>
    531e:	81 e0       	ldi	r24, 0x01	; 1
}
    5320:	a4 96       	adiw	r28, 0x24	; 36
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	cf 91       	pop	r28
    5328:	df 91       	pop	r29
    532a:	1f 91       	pop	r17
    532c:	0f 91       	pop	r16
    532e:	ff 90       	pop	r15
    5330:	ef 90       	pop	r14
    5332:	df 90       	pop	r13
    5334:	cf 90       	pop	r12
    5336:	bf 90       	pop	r11
    5338:	af 90       	pop	r10
    533a:	9f 90       	pop	r9
    533c:	8f 90       	pop	r8
    533e:	7f 90       	pop	r7
    5340:	6f 90       	pop	r6
    5342:	5f 90       	pop	r5
    5344:	4f 90       	pop	r4
    5346:	3f 90       	pop	r3
    5348:	2f 90       	pop	r2
    534a:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    534c:	7c 01       	movw	r14, r24
    534e:	8d 01       	movw	r16, r26
    5350:	ee 0c       	add	r14, r14
    5352:	ff 1c       	adc	r15, r15
    5354:	00 1f       	adc	r16, r16
    5356:	11 1f       	adc	r17, r17
    5358:	e8 0e       	add	r14, r24
    535a:	f9 1e       	adc	r15, r25
    535c:	0a 1f       	adc	r16, r26
    535e:	1b 1f       	adc	r17, r27
    5360:	08 94       	sec
    5362:	e1 1c       	adc	r14, r1
    5364:	f1 1c       	adc	r15, r1
    5366:	01 1d       	adc	r16, r1
    5368:	11 1d       	adc	r17, r1
    536a:	16 95       	lsr	r17
    536c:	07 95       	ror	r16
    536e:	f7 94       	ror	r15
    5370:	e7 94       	ror	r14
    5372:	22 e0       	ldi	r18, 0x02	; 2
    5374:	32 e0       	ldi	r19, 0x02	; 2
    5376:	40 e0       	ldi	r20, 0x00	; 0
    5378:	50 e0       	ldi	r21, 0x00	; 0
    537a:	e2 0e       	add	r14, r18
    537c:	f3 1e       	adc	r15, r19
    537e:	04 1f       	adc	r16, r20
    5380:	15 1f       	adc	r17, r21
    5382:	b9 e0       	ldi	r27, 0x09	; 9
    5384:	16 95       	lsr	r17
    5386:	07 95       	ror	r16
    5388:	f7 94       	ror	r15
    538a:	e7 94       	ror	r14
    538c:	ba 95       	dec	r27
    538e:	d1 f7       	brne	.-12     	; 0x5384 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    5390:	38 a1       	ldd	r19, Y+32	; 0x20
    5392:	83 2f       	mov	r24, r19
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	01 96       	adiw	r24, 0x01	; 1
    5398:	9c 01       	movw	r18, r24
    539a:	44 27       	eor	r20, r20
    539c:	37 fd       	sbrc	r19, 7
    539e:	40 95       	com	r20
    53a0:	54 2f       	mov	r21, r20
    53a2:	2e 8b       	std	Y+22, r18	; 0x16
    53a4:	3f 8b       	std	Y+23, r19	; 0x17
    53a6:	48 8f       	std	Y+24, r20	; 0x18
    53a8:	59 8f       	std	Y+25, r21	; 0x19
    53aa:	80 e2       	ldi	r24, 0x20	; 32
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	a0 e0       	ldi	r26, 0x00	; 0
    53b0:	b0 e0       	ldi	r27, 0x00	; 0
    53b2:	8a 8b       	std	Y+18, r24	; 0x12
    53b4:	9b 8b       	std	Y+19, r25	; 0x13
    53b6:	ac 8b       	std	Y+20, r26	; 0x14
    53b8:	bd 8b       	std	Y+21, r27	; 0x15
    53ba:	91 e0       	ldi	r25, 0x01	; 1
    53bc:	9f 8f       	std	Y+31, r25	; 0x1f
    53be:	fe cb       	rjmp	.-2052   	; 0x4bbc <f_mkfs+0x29a>

000053c0 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    53c0:	6f 92       	push	r6
    53c2:	7f 92       	push	r7
    53c4:	8f 92       	push	r8
    53c6:	9f 92       	push	r9
    53c8:	af 92       	push	r10
    53ca:	bf 92       	push	r11
    53cc:	cf 92       	push	r12
    53ce:	df 92       	push	r13
    53d0:	ef 92       	push	r14
    53d2:	ff 92       	push	r15
    53d4:	0f 93       	push	r16
    53d6:	1f 93       	push	r17
    53d8:	df 93       	push	r29
    53da:	cf 93       	push	r28
    53dc:	0f 92       	push	r0
    53de:	0f 92       	push	r0
    53e0:	cd b7       	in	r28, 0x3d	; 61
    53e2:	de b7       	in	r29, 0x3e	; 62
    53e4:	5c 01       	movw	r10, r24
    53e6:	6b 01       	movw	r12, r22
    53e8:	4a 01       	movw	r8, r20
    53ea:	8c 01       	movw	r16, r24
    53ec:	ee 24       	eor	r14, r14
    53ee:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    53f0:	08 94       	sec
    53f2:	c1 08       	sbc	r12, r1
    53f4:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    53f6:	3e 01       	movw	r6, r28
    53f8:	08 94       	sec
    53fa:	61 1c       	adc	r6, r1
    53fc:	71 1c       	adc	r7, r1
    53fe:	13 c0       	rjmp	.+38     	; 0x5426 <f_gets+0x66>
    5400:	c4 01       	movw	r24, r8
    5402:	b8 01       	movw	r22, r16
    5404:	41 e0       	ldi	r20, 0x01	; 1
    5406:	50 e0       	ldi	r21, 0x00	; 0
    5408:	93 01       	movw	r18, r6
    540a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    540e:	89 81       	ldd	r24, Y+1	; 0x01
    5410:	9a 81       	ldd	r25, Y+2	; 0x02
    5412:	01 97       	sbiw	r24, 0x01	; 1
    5414:	59 f4       	brne	.+22     	; 0x542c <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    5416:	08 94       	sec
    5418:	e1 1c       	adc	r14, r1
    541a:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    541c:	f8 01       	movw	r30, r16
    541e:	81 91       	ld	r24, Z+
    5420:	8f 01       	movw	r16, r30
    5422:	8a 30       	cpi	r24, 0x0A	; 10
    5424:	19 f0       	breq	.+6      	; 0x542c <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5426:	ec 14       	cp	r14, r12
    5428:	fd 04       	cpc	r15, r13
    542a:	54 f3       	brlt	.-44     	; 0x5400 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    542c:	f8 01       	movw	r30, r16
    542e:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    5430:	ef 28       	or	r14, r15
    5432:	11 f4       	brne	.+4      	; 0x5438 <f_gets+0x78>
    5434:	aa 24       	eor	r10, r10
    5436:	bb 24       	eor	r11, r11
}
    5438:	c5 01       	movw	r24, r10
    543a:	0f 90       	pop	r0
    543c:	0f 90       	pop	r0
    543e:	cf 91       	pop	r28
    5440:	df 91       	pop	r29
    5442:	1f 91       	pop	r17
    5444:	0f 91       	pop	r16
    5446:	ff 90       	pop	r15
    5448:	ef 90       	pop	r14
    544a:	df 90       	pop	r13
    544c:	cf 90       	pop	r12
    544e:	bf 90       	pop	r11
    5450:	af 90       	pop	r10
    5452:	9f 90       	pop	r9
    5454:	8f 90       	pop	r8
    5456:	7f 90       	pop	r7
    5458:	6f 90       	pop	r6
    545a:	08 95       	ret

0000545c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    545c:	0f 93       	push	r16
    545e:	1f 93       	push	r17
    5460:	df 93       	push	r29
    5462:	cf 93       	push	r28
    5464:	00 d0       	rcall	.+0      	; 0x5466 <f_putc+0xa>
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
    546a:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    546c:	61 15       	cp	r22, r1
    546e:	71 05       	cpc	r23, r1
    5470:	91 f0       	breq	.+36     	; 0x5496 <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    5472:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    5474:	cb 01       	movw	r24, r22
    5476:	be 01       	movw	r22, r28
    5478:	6f 5f       	subi	r22, 0xFF	; 255
    547a:	7f 4f       	sbci	r23, 0xFF	; 255
    547c:	41 e0       	ldi	r20, 0x01	; 1
    547e:	50 e0       	ldi	r21, 0x00	; 0
    5480:	9e 01       	movw	r18, r28
    5482:	2e 5f       	subi	r18, 0xFE	; 254
    5484:	3f 4f       	sbci	r19, 0xFF	; 255
    5486:	0e 94 2f 19 	call	0x325e	; 0x325e <f_write>
	return bw ? chr : EOF;		/* Return the result */
    548a:	8a 81       	ldd	r24, Y+2	; 0x02
    548c:	9b 81       	ldd	r25, Y+3	; 0x03
    548e:	89 2b       	or	r24, r25
    5490:	11 f4       	brne	.+4      	; 0x5496 <f_putc+0x3a>
    5492:	0f ef       	ldi	r16, 0xFF	; 255
    5494:	1f ef       	ldi	r17, 0xFF	; 255
}
    5496:	c8 01       	movw	r24, r16
    5498:	23 96       	adiw	r28, 0x03	; 3
    549a:	cd bf       	out	0x3d, r28	; 61
    549c:	de bf       	out	0x3e, r29	; 62
    549e:	cf 91       	pop	r28
    54a0:	df 91       	pop	r29
    54a2:	1f 91       	pop	r17
    54a4:	0f 91       	pop	r16
    54a6:	08 95       	ret

000054a8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    54a8:	ef 92       	push	r14
    54aa:	ff 92       	push	r15
    54ac:	0f 93       	push	r16
    54ae:	1f 93       	push	r17
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
    54b4:	8c 01       	movw	r16, r24
    54b6:	7b 01       	movw	r14, r22
    54b8:	c0 e0       	ldi	r28, 0x00	; 0
    54ba:	d0 e0       	ldi	r29, 0x00	; 0
    54bc:	0d c0       	rjmp	.+26     	; 0x54d8 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	b7 01       	movw	r22, r14
    54c2:	0e 94 2e 2a 	call	0x545c	; 0x545c <f_putc>
    54c6:	8f 5f       	subi	r24, 0xFF	; 255
    54c8:	9f 4f       	sbci	r25, 0xFF	; 255
    54ca:	19 f4       	brne	.+6      	; 0x54d2 <f_puts+0x2a>
    54cc:	cf ef       	ldi	r28, 0xFF	; 255
    54ce:	df ef       	ldi	r29, 0xFF	; 255
    54d0:	07 c0       	rjmp	.+14     	; 0x54e0 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    54d2:	0f 5f       	subi	r16, 0xFF	; 255
    54d4:	1f 4f       	sbci	r17, 0xFF	; 255
    54d6:	21 96       	adiw	r28, 0x01	; 1
    54d8:	f8 01       	movw	r30, r16
    54da:	80 81       	ld	r24, Z
    54dc:	88 23       	and	r24, r24
    54de:	79 f7       	brne	.-34     	; 0x54be <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    54e0:	ce 01       	movw	r24, r28
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	1f 91       	pop	r17
    54e8:	0f 91       	pop	r16
    54ea:	ff 90       	pop	r15
    54ec:	ef 90       	pop	r14
    54ee:	08 95       	ret

000054f0 <SD_Inserted>:
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    54f0:	80 91 a8 06 	lds	r24, 0x06A8
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	80 ff       	sbrs	r24, 0
    54f8:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    54fa:	89 2f       	mov	r24, r25
    54fc:	08 95       	ret

000054fe <SD2_Inserted>:

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    54fe:	e0 ea       	ldi	r30, 0xA0	; 160
    5500:	f6 e0       	ldi	r31, 0x06	; 6
    5502:	80 85       	ldd	r24, Z+8	; 0x08
    5504:	86 95       	lsr	r24
    5506:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
    5508:	81 70       	andi	r24, 0x01	; 1
    550a:	08 95       	ret

0000550c <SD_WriteBuffer>:
      CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }

}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    550c:	af 92       	push	r10
    550e:	bf 92       	push	r11
    5510:	cf 92       	push	r12
    5512:	df 92       	push	r13
    5514:	ef 92       	push	r14
    5516:	ff 92       	push	r15
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	df 93       	push	r29
    551e:	cf 93       	push	r28
    5520:	0f 92       	push	r0
    5522:	0f 92       	push	r0
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
    5528:	5c 01       	movw	r10, r24
    552a:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    552c:	8e e5       	ldi	r24, 0x5E	; 94
    552e:	9f e4       	ldi	r25, 0x4F	; 79
    5530:	b5 01       	movw	r22, r10
    5532:	a6 01       	movw	r20, r12
    5534:	9e 01       	movw	r18, r28
    5536:	2f 5f       	subi	r18, 0xFF	; 255
    5538:	3f 4f       	sbci	r19, 0xFF	; 255
    553a:	0e 94 2f 19 	call	0x325e	; 0x325e <f_write>
    553e:	60 e0       	ldi	r22, 0x00	; 0
    5540:	70 e0       	ldi	r23, 0x00	; 0
    5542:	3b c0       	rjmp	.+118    	; 0x55ba <SD_WriteBuffer+0xae>




   for (uint16_t i=0; i<length; i++){
      CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    5544:	e0 90 36 57 	lds	r14, 0x5736
    5548:	f0 90 37 57 	lds	r15, 0x5737
    554c:	00 91 38 57 	lds	r16, 0x5738
    5550:	10 91 39 57 	lds	r17, 0x5739
    5554:	20 91 36 57 	lds	r18, 0x5736
    5558:	30 91 37 57 	lds	r19, 0x5737
    555c:	40 91 38 57 	lds	r20, 0x5738
    5560:	50 91 39 57 	lds	r21, 0x5739
    5564:	30 70       	andi	r19, 0x00	; 0
    5566:	40 70       	andi	r20, 0x00	; 0
    5568:	50 70       	andi	r21, 0x00	; 0
    556a:	f5 01       	movw	r30, r10
    556c:	e6 0f       	add	r30, r22
    556e:	f7 1f       	adc	r31, r23
    5570:	80 81       	ld	r24, Z
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	a0 e0       	ldi	r26, 0x00	; 0
    5576:	b0 e0       	ldi	r27, 0x00	; 0
    5578:	28 27       	eor	r18, r24
    557a:	39 27       	eor	r19, r25
    557c:	4a 27       	eor	r20, r26
    557e:	5b 27       	eor	r21, r27
    5580:	22 0f       	add	r18, r18
    5582:	33 1f       	adc	r19, r19
    5584:	22 0f       	add	r18, r18
    5586:	33 1f       	adc	r19, r19
    5588:	20 5e       	subi	r18, 0xE0	; 224
    558a:	33 4d       	sbci	r19, 0xD3	; 211
    558c:	ef 2c       	mov	r14, r15
    558e:	f0 2e       	mov	r15, r16
    5590:	01 2f       	mov	r16, r17
    5592:	11 27       	eor	r17, r17
    5594:	f9 01       	movw	r30, r18
    5596:	80 81       	ld	r24, Z
    5598:	91 81       	ldd	r25, Z+1	; 0x01
    559a:	a2 81       	ldd	r26, Z+2	; 0x02
    559c:	b3 81       	ldd	r27, Z+3	; 0x03
    559e:	e8 26       	eor	r14, r24
    55a0:	f9 26       	eor	r15, r25
    55a2:	0a 27       	eor	r16, r26
    55a4:	1b 27       	eor	r17, r27
    55a6:	e0 92 36 57 	sts	0x5736, r14
    55aa:	f0 92 37 57 	sts	0x5737, r15
    55ae:	00 93 38 57 	sts	0x5738, r16
    55b2:	10 93 39 57 	sts	0x5739, r17





   for (uint16_t i=0; i<length; i++){
    55b6:	6f 5f       	subi	r22, 0xFF	; 255
    55b8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ba:	6c 15       	cp	r22, r12
    55bc:	7d 05       	cpc	r23, r13
    55be:	10 f2       	brcs	.-124    	; 0x5544 <SD_WriteBuffer+0x38>





}
    55c0:	0f 90       	pop	r0
    55c2:	0f 90       	pop	r0
    55c4:	cf 91       	pop	r28
    55c6:	df 91       	pop	r29
    55c8:	1f 91       	pop	r17
    55ca:	0f 91       	pop	r16
    55cc:	ff 90       	pop	r15
    55ce:	ef 90       	pop	r14
    55d0:	df 90       	pop	r13
    55d2:	cf 90       	pop	r12
    55d4:	bf 90       	pop	r11
    55d6:	af 90       	pop	r10
    55d8:	08 95       	ret

000055da <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    55da:	60 93 98 45 	sts	0x4598, r22
	tmp32[1] = (uint8_t)(var >> 8);
    55de:	27 2f       	mov	r18, r23
    55e0:	38 2f       	mov	r19, r24
    55e2:	49 2f       	mov	r20, r25
    55e4:	55 27       	eor	r21, r21
    55e6:	20 93 99 45 	sts	0x4599, r18
	tmp32[2] = (uint8_t)(var >> 16);
    55ea:	9c 01       	movw	r18, r24
    55ec:	44 27       	eor	r20, r20
    55ee:	55 27       	eor	r21, r21
    55f0:	20 93 9a 45 	sts	0x459A, r18
	tmp32[3] = (uint8_t)(var >> 24);
    55f4:	69 2f       	mov	r22, r25
    55f6:	77 27       	eor	r23, r23
    55f8:	88 27       	eor	r24, r24
    55fa:	99 27       	eor	r25, r25
    55fc:	60 93 9b 45 	sts	0x459B, r22
	SD_WriteBuffer(tmp32,4);
    5600:	88 e9       	ldi	r24, 0x98	; 152
    5602:	95 e4       	ldi	r25, 0x45	; 69
    5604:	64 e0       	ldi	r22, 0x04	; 4
    5606:	70 e0       	ldi	r23, 0x00	; 0
    5608:	0e 94 86 2a 	call	0x550c	; 0x550c <SD_WriteBuffer>
}
    560c:	08 95       	ret

0000560e <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    560e:	80 93 7e 5c 	sts	0x5C7E, r24
	tmp16[1] = (uint8_t)(var >> 8);
    5612:	90 93 7f 5c 	sts	0x5C7F, r25
	SD_WriteBuffer(tmp16,2);
    5616:	8e e7       	ldi	r24, 0x7E	; 126
    5618:	9c e5       	ldi	r25, 0x5C	; 92
    561a:	62 e0       	ldi	r22, 0x02	; 2
    561c:	70 e0       	ldi	r23, 0x00	; 0
    561e:	0e 94 86 2a 	call	0x550c	; 0x550c <SD_WriteBuffer>
}
    5622:	08 95       	ret

00005624 <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    5624:	80 93 49 4b 	sts	0x4B49, r24
	SD_WriteBuffer(tmp8,1);
    5628:	89 e4       	ldi	r24, 0x49	; 73
    562a:	9b e4       	ldi	r25, 0x4B	; 75
    562c:	61 e0       	ldi	r22, 0x01	; 1
    562e:	70 e0       	ldi	r23, 0x00	; 0
    5630:	0e 94 86 2a 	call	0x550c	; 0x550c <SD_WriteBuffer>
}
    5634:	08 95       	ret

00005636 <SD_ClearCRC>:


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5636:	8f ef       	ldi	r24, 0xFF	; 255
    5638:	9f ef       	ldi	r25, 0xFF	; 255
    563a:	af ef       	ldi	r26, 0xFF	; 255
    563c:	bf ef       	ldi	r27, 0xFF	; 255
    563e:	80 93 36 57 	sts	0x5736, r24
    5642:	90 93 37 57 	sts	0x5737, r25
    5646:	a0 93 38 57 	sts	0x5738, r26
    564a:	b0 93 39 57 	sts	0x5739, r27
}
    564e:	08 95       	ret

00005650 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    5650:	60 91 36 57 	lds	r22, 0x5736
    5654:	70 91 37 57 	lds	r23, 0x5737
    5658:	80 91 38 57 	lds	r24, 0x5738
    565c:	90 91 39 57 	lds	r25, 0x5739
    5660:	60 95       	com	r22
    5662:	70 95       	com	r23
    5664:	80 95       	com	r24
    5666:	90 95       	com	r25
    5668:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
}
    566c:	08 95       	ret

0000566e <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    566e:	e0 e0       	ldi	r30, 0x00	; 0
    5670:	fa e0       	ldi	r31, 0x0A	; 10
    5672:	80 e4       	ldi	r24, 0x40	; 64
    5674:	92 e0       	ldi	r25, 0x02	; 2
    5676:	86 a3       	std	Z+38, r24	; 0x26
    5678:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    567a:	80 81       	ld	r24, Z
    567c:	80 7f       	andi	r24, 0xF0	; 240
    567e:	86 60       	ori	r24, 0x06	; 6
    5680:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5682:	86 81       	ldd	r24, Z+6	; 0x06
    5684:	8c 7f       	andi	r24, 0xFC	; 252
    5686:	82 60       	ori	r24, 0x02	; 2
    5688:	86 83       	std	Z+6, r24	; 0x06
	
}
    568a:	08 95       	ret

0000568c <SD_Init>:
0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
};


uint8_t SD_Init(void){
    568c:	1f 93       	push	r17
	uint8_t tmp;
	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    568e:	e0 ea       	ldi	r30, 0xA0	; 160
    5690:	f6 e0       	ldi	r31, 0x06	; 6
    5692:	88 e1       	ldi	r24, 0x18	; 24
    5694:	80 8b       	std	Z+16, r24	; 0x10
	SD_CD_Port.SD_CD2_CNTL = PORT_OPC_PULLUP_gc;
    5696:	81 8b       	std	Z+17, r24	; 0x11
	SD_Timer_Init();
    5698:	0e 94 37 2b 	call	0x566e	; 0x566e <SD_Timer_Init>
	tmp = disk_initialize(0);
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <disk_initialize>
    56a2:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    56a4:	80 e0       	ldi	r24, 0x00	; 0
    56a6:	63 e7       	ldi	r22, 0x73	; 115
    56a8:	74 e3       	ldi	r23, 0x34	; 52
    56aa:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <f_mount>
	f_mount(1, &fso1);
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	61 ea       	ldi	r22, 0xA1	; 161
    56b2:	76 e3       	ldi	r23, 0x36	; 54
    56b4:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <f_mount>



	return tmp;
}
    56b8:	81 2f       	mov	r24, r17
    56ba:	1f 91       	pop	r17
    56bc:	08 95       	ret

000056be <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    56be:	1f 92       	push	r1
    56c0:	0f 92       	push	r0
    56c2:	0f b6       	in	r0, 0x3f	; 63
    56c4:	0f 92       	push	r0
    56c6:	0b b6       	in	r0, 0x3b	; 59
    56c8:	0f 92       	push	r0
    56ca:	11 24       	eor	r1, r1
    56cc:	2f 93       	push	r18
    56ce:	3f 93       	push	r19
    56d0:	4f 93       	push	r20
    56d2:	5f 93       	push	r21
    56d4:	6f 93       	push	r22
    56d6:	7f 93       	push	r23
    56d8:	8f 93       	push	r24
    56da:	9f 93       	push	r25
    56dc:	af 93       	push	r26
    56de:	bf 93       	push	r27
    56e0:	ef 93       	push	r30
    56e2:	ff 93       	push	r31
	disk_timerproc();
    56e4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <disk_timerproc>


	if(okToCharge){
    56e8:	80 91 00 34 	lds	r24, 0x3400
    56ec:	88 23       	and	r24, r24
    56ee:	a9 f0       	breq	.+42     	; 0x571a <__vector_47+0x5c>
		chargeCounter++;
    56f0:	80 91 fd 33 	lds	r24, 0x33FD
    56f4:	90 91 fe 33 	lds	r25, 0x33FE
    56f8:	01 96       	adiw	r24, 0x01	; 1
    56fa:	80 93 fd 33 	sts	0x33FD, r24
    56fe:	90 93 fe 33 	sts	0x33FE, r25
		if(chargeCounter >= 16200){
    5702:	88 54       	subi	r24, 0x48	; 72
    5704:	9f 43       	sbci	r25, 0x3F	; 63
    5706:	48 f0       	brcs	.+18     	; 0x571a <__vector_47+0x5c>
			chargeCounter=0;
    5708:	10 92 fd 33 	sts	0x33FD, r1
    570c:	10 92 fe 33 	sts	0x33FE, r1
			chargePercent++;
    5710:	80 91 fc 33 	lds	r24, 0x33FC
    5714:	8f 5f       	subi	r24, 0xFF	; 255
    5716:	80 93 fc 33 	sts	0x33FC, r24
		}
	}
}
    571a:	ff 91       	pop	r31
    571c:	ef 91       	pop	r30
    571e:	bf 91       	pop	r27
    5720:	af 91       	pop	r26
    5722:	9f 91       	pop	r25
    5724:	8f 91       	pop	r24
    5726:	7f 91       	pop	r23
    5728:	6f 91       	pop	r22
    572a:	5f 91       	pop	r21
    572c:	4f 91       	pop	r20
    572e:	3f 91       	pop	r19
    5730:	2f 91       	pop	r18
    5732:	0f 90       	pop	r0
    5734:	0b be       	out	0x3b, r0	; 59
    5736:	0f 90       	pop	r0
    5738:	0f be       	out	0x3f, r0	; 63
    573a:	0f 90       	pop	r0
    573c:	1f 90       	pop	r1
    573e:	18 95       	reti

00005740 <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    5740:	0f 93       	push	r16
    5742:	df 93       	push	r29
    5744:	cf 93       	push	r28
    5746:	0f 92       	push	r0
    5748:	cd b7       	in	r28, 0x3d	; 61
    574a:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    574c:	2f b7       	in	r18, 0x3f	; 63
    574e:	29 83       	std	Y+1, r18	; 0x01
    cli();
    5750:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    5752:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    5754:	fc 01       	movw	r30, r24
    5756:	08 ed       	ldi	r16, 0xD8	; 216
    5758:	04 bf       	out	0x34, r16	; 52
    575a:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    575c:	89 81       	ldd	r24, Y+1	; 0x01
    575e:	8f bf       	out	0x3f, r24	; 63
}
    5760:	0f 90       	pop	r0
    5762:	cf 91       	pop	r28
    5764:	df 91       	pop	r29
    5766:	0f 91       	pop	r16
    5768:	08 95       	ret

0000576a <display_sendCommand>:

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    576a:	94 e0       	ldi	r25, 0x04	; 4
    576c:	e0 e2       	ldi	r30, 0x20	; 32
    576e:	f6 e0       	ldi	r31, 0x06	; 6
    5770:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5772:	e0 ec       	ldi	r30, 0xC0	; 192
    5774:	f8 e0       	ldi	r31, 0x08	; 8
    5776:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5778:	80 91 c2 08 	lds	r24, 0x08C2
    577c:	87 ff       	sbrs	r24, 7
    577e:	fc cf       	rjmp	.-8      	; 0x5778 <display_sendCommand+0xe>
}
    5780:	08 95       	ret

00005782 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5782:	94 e0       	ldi	r25, 0x04	; 4
    5784:	e0 e2       	ldi	r30, 0x20	; 32
    5786:	f6 e0       	ldi	r31, 0x06	; 6
    5788:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    578a:	e0 ec       	ldi	r30, 0xC0	; 192
    578c:	f8 e0       	ldi	r31, 0x08	; 8
    578e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5790:	80 91 c2 08 	lds	r24, 0x08C2
    5794:	87 ff       	sbrs	r24, 7
    5796:	fc cf       	rjmp	.-8      	; 0x5790 <display_sendData+0xe>
}
    5798:	08 95       	ret

0000579a <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    579a:	80 6b       	ori	r24, 0xB0	; 176

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    579c:	94 e0       	ldi	r25, 0x04	; 4
    579e:	e0 e2       	ldi	r30, 0x20	; 32
    57a0:	f6 e0       	ldi	r31, 0x06	; 6
    57a2:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    57a4:	e0 ec       	ldi	r30, 0xC0	; 192
    57a6:	f8 e0       	ldi	r31, 0x08	; 8
    57a8:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    57aa:	80 91 c2 08 	lds	r24, 0x08C2
    57ae:	87 ff       	sbrs	r24, 7
    57b0:	fc cf       	rjmp	.-8      	; 0x57aa <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    57b2:	96 2f       	mov	r25, r22
    57b4:	9f 70       	andi	r25, 0x0F	; 15

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    57b6:	84 e0       	ldi	r24, 0x04	; 4
    57b8:	e0 e2       	ldi	r30, 0x20	; 32
    57ba:	f6 e0       	ldi	r31, 0x06	; 6
    57bc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    57be:	e0 ec       	ldi	r30, 0xC0	; 192
    57c0:	f8 e0       	ldi	r31, 0x08	; 8
    57c2:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    57c4:	80 91 c2 08 	lds	r24, 0x08C2
    57c8:	87 ff       	sbrs	r24, 7
    57ca:	fc cf       	rjmp	.-8      	; 0x57c4 <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    57cc:	62 95       	swap	r22
    57ce:	6f 70       	andi	r22, 0x0F	; 15
    57d0:	60 61       	ori	r22, 0x10	; 16

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    57d2:	84 e0       	ldi	r24, 0x04	; 4
    57d4:	e0 e2       	ldi	r30, 0x20	; 32
    57d6:	f6 e0       	ldi	r31, 0x06	; 6
    57d8:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    57da:	e0 ec       	ldi	r30, 0xC0	; 192
    57dc:	f8 e0       	ldi	r31, 0x08	; 8
    57de:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    57e0:	80 91 c2 08 	lds	r24, 0x08C2
    57e4:	87 ff       	sbrs	r24, 7
    57e6:	fc cf       	rjmp	.-8      	; 0x57e0 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    57e8:	08 95       	ret

000057ea <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    57ea:	bf 92       	push	r11
    57ec:	cf 92       	push	r12
    57ee:	df 92       	push	r13
    57f0:	ef 92       	push	r14
    57f2:	ff 92       	push	r15
    57f4:	0f 93       	push	r16
    57f6:	1f 93       	push	r17
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	c0 e0       	ldi	r28, 0x00	; 0
    57fe:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    5800:	56 e6       	ldi	r21, 0x66	; 102
    5802:	c5 2e       	mov	r12, r21
    5804:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5806:	40 e2       	ldi	r20, 0x20	; 32
    5808:	e4 2e       	mov	r14, r20
    580a:	46 e0       	ldi	r20, 0x06	; 6
    580c:	f4 2e       	mov	r15, r20
    580e:	34 e0       	ldi	r19, 0x04	; 4
    5810:	b3 2e       	mov	r11, r19
	Display_SPI.DATA = dataByte;
    5812:	00 ec       	ldi	r16, 0xC0	; 192
    5814:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    5816:	8c 2f       	mov	r24, r28
    5818:	60 e0       	ldi	r22, 0x00	; 0
    581a:	0e 94 cd 2b 	call	0x579a	; 0x579a <display_setCursor>
    581e:	20 e0       	ldi	r18, 0x00	; 0
    5820:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    5822:	cc 9d       	mul	r28, r12
    5824:	a0 01       	movw	r20, r0
    5826:	cd 9d       	mul	r28, r13
    5828:	50 0d       	add	r21, r0
    582a:	dc 9d       	mul	r29, r12
    582c:	50 0d       	add	r21, r0
    582e:	11 24       	eor	r1, r1
    5830:	fa 01       	movw	r30, r20
    5832:	e2 0f       	add	r30, r18
    5834:	f3 1f       	adc	r31, r19
    5836:	e9 50       	subi	r30, 0x09	; 9
    5838:	fc 4a       	sbci	r31, 0xAC	; 172
    583a:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    583c:	f7 01       	movw	r30, r14
    583e:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    5840:	f8 01       	movw	r30, r16
    5842:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5844:	80 91 c2 08 	lds	r24, 0x08C2
    5848:	87 ff       	sbrs	r24, 7
    584a:	fc cf       	rjmp	.-8      	; 0x5844 <display_writeBufferToScreen+0x5a>
    584c:	2f 5f       	subi	r18, 0xFF	; 255
    584e:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    5850:	26 36       	cpi	r18, 0x66	; 102
    5852:	31 05       	cpc	r19, r1
    5854:	69 f7       	brne	.-38     	; 0x5830 <display_writeBufferToScreen+0x46>
    5856:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5858:	c8 30       	cpi	r28, 0x08	; 8
    585a:	d1 05       	cpc	r29, r1
    585c:	e1 f6       	brne	.-72     	; 0x5816 <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    585e:	df 91       	pop	r29
    5860:	cf 91       	pop	r28
    5862:	1f 91       	pop	r17
    5864:	0f 91       	pop	r16
    5866:	ff 90       	pop	r15
    5868:	ef 90       	pop	r14
    586a:	df 90       	pop	r13
    586c:	cf 90       	pop	r12
    586e:	bf 90       	pop	r11
    5870:	08 95       	ret

00005872 <display_clearPage>:


void display_clearPage(uint8_t page) {
    5872:	40 e0       	ldi	r20, 0x00	; 0
    5874:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	26 e6       	ldi	r18, 0x66	; 102
    587a:	30 e0       	ldi	r19, 0x00	; 0
    587c:	82 9f       	mul	r24, r18
    587e:	b0 01       	movw	r22, r0
    5880:	83 9f       	mul	r24, r19
    5882:	70 0d       	add	r23, r0
    5884:	92 9f       	mul	r25, r18
    5886:	70 0d       	add	r23, r0
    5888:	11 24       	eor	r1, r1
    588a:	8a e0       	ldi	r24, 0x0A	; 10
    588c:	fb 01       	movw	r30, r22
    588e:	e4 0f       	add	r30, r20
    5890:	f5 1f       	adc	r31, r21
    5892:	e9 50       	subi	r30, 0x09	; 9
    5894:	fc 4a       	sbci	r31, 0xAC	; 172
    5896:	80 83       	st	Z, r24
    5898:	4f 5f       	subi	r20, 0xFF	; 255
    589a:	5f 4f       	sbci	r21, 0xFF	; 255
    589c:	46 36       	cpi	r20, 0x66	; 102
    589e:	51 05       	cpc	r21, r1
    58a0:	a9 f7       	brne	.-22     	; 0x588c <display_clearPage+0x1a>
}
    58a2:	08 95       	ret

000058a4 <display_clearBuffer>:


void display_clearBuffer() {
    58a4:	20 e0       	ldi	r18, 0x00	; 0
    58a6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    58a8:	66 e6       	ldi	r22, 0x66	; 102
    58aa:	70 e0       	ldi	r23, 0x00	; 0
    58ac:	0f c0       	rjmp	.+30     	; 0x58cc <display_clearBuffer+0x28>
    58ae:	fa 01       	movw	r30, r20
    58b0:	e8 0f       	add	r30, r24
    58b2:	f9 1f       	adc	r31, r25
    58b4:	e9 50       	subi	r30, 0x09	; 9
    58b6:	fc 4a       	sbci	r31, 0xAC	; 172
    58b8:	10 82       	st	Z, r1
    58ba:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    58bc:	86 36       	cpi	r24, 0x66	; 102
    58be:	91 05       	cpc	r25, r1
    58c0:	b1 f7       	brne	.-20     	; 0x58ae <display_clearBuffer+0xa>
    58c2:	2f 5f       	subi	r18, 0xFF	; 255
    58c4:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    58c6:	28 30       	cpi	r18, 0x08	; 8
    58c8:	31 05       	cpc	r19, r1
    58ca:	51 f0       	breq	.+20     	; 0x58e0 <display_clearBuffer+0x3c>
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    58d0:	26 9f       	mul	r18, r22
    58d2:	a0 01       	movw	r20, r0
    58d4:	27 9f       	mul	r18, r23
    58d6:	50 0d       	add	r21, r0
    58d8:	36 9f       	mul	r19, r22
    58da:	50 0d       	add	r21, r0
    58dc:	11 24       	eor	r1, r1
    58de:	e7 cf       	rjmp	.-50     	; 0x58ae <display_clearBuffer+0xa>
    58e0:	08 95       	ret

000058e2 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    58e2:	cf 93       	push	r28
    58e4:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    58e6:	a0 e4       	ldi	r26, 0x40	; 64
    58e8:	b6 e0       	ldi	r27, 0x06	; 6
    58ea:	88 e3       	ldi	r24, 0x38	; 56
    58ec:	54 96       	adiw	r26, 0x14	; 20
    58ee:	8c 93       	st	X, r24
    58f0:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    58f2:	40 e2       	ldi	r20, 0x20	; 32
    58f4:	56 e0       	ldi	r21, 0x06	; 6
    58f6:	fa 01       	movw	r30, r20
    58f8:	83 8b       	std	Z+19, r24	; 0x13
	Display_Port.OUTSET = Display_SS_bm;
    58fa:	30 e1       	ldi	r19, 0x10	; 16
    58fc:	15 96       	adiw	r26, 0x05	; 5
    58fe:	3c 93       	st	X, r19
    5900:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5902:	e0 e6       	ldi	r30, 0x60	; 96
    5904:	f6 e0       	ldi	r31, 0x06	; 6
    5906:	21 e0       	ldi	r18, 0x01	; 1
    5908:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    590a:	25 83       	std	Z+5, r18	; 0x05
    590c:	80 e0       	ldi	r24, 0x00	; 0
    590e:	90 e9       	ldi	r25, 0x90	; 144
    5910:	ec 01       	movw	r28, r24
    5912:	21 97       	sbiw	r28, 0x01	; 1
    5914:	f1 f7       	brne	.-4      	; 0x5912 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5916:	26 83       	std	Z+6, r18	; 0x06
    5918:	ec 01       	movw	r28, r24
    591a:	21 97       	sbiw	r28, 0x01	; 1
    591c:	f1 f7       	brne	.-4      	; 0x591a <display_init+0x38>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    591e:	25 83       	std	Z+5, r18	; 0x05
    5920:	01 97       	sbiw	r24, 0x01	; 1
    5922:	f1 f7       	brne	.-4      	; 0x5920 <display_init+0x3e>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5924:	8d ed       	ldi	r24, 0xDD	; 221
    5926:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    592a:	80 eb       	ldi	r24, 0xB0	; 176
    592c:	11 96       	adiw	r26, 0x01	; 1
    592e:	8c 93       	st	X, r24
    5930:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5932:	84 e0       	ldi	r24, 0x04	; 4
    5934:	fa 01       	movw	r30, r20
    5936:	81 83       	std	Z+1, r24	; 0x01



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5938:	16 96       	adiw	r26, 0x06	; 6
    593a:	3c 93       	st	X, r19

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    593c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    593e:	82 ee       	ldi	r24, 0xE2	; 226
    5940:	e0 ec       	ldi	r30, 0xC0	; 192
    5942:	f8 e0       	ldi	r31, 0x08	; 8
    5944:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5946:	80 91 c2 08 	lds	r24, 0x08C2
    594a:	87 ff       	sbrs	r24, 7
    594c:	fc cf       	rjmp	.-8      	; 0x5946 <display_init+0x64>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    594e:	84 e0       	ldi	r24, 0x04	; 4
    5950:	e0 e2       	ldi	r30, 0x20	; 32
    5952:	f6 e0       	ldi	r31, 0x06	; 6
    5954:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5956:	80 e4       	ldi	r24, 0x40	; 64
    5958:	e0 ec       	ldi	r30, 0xC0	; 192
    595a:	f8 e0       	ldi	r31, 0x08	; 8
    595c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    595e:	80 91 c2 08 	lds	r24, 0x08C2
    5962:	87 ff       	sbrs	r24, 7
    5964:	fc cf       	rjmp	.-8      	; 0x595e <display_init+0x7c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5966:	84 e0       	ldi	r24, 0x04	; 4
    5968:	e0 e2       	ldi	r30, 0x20	; 32
    596a:	f6 e0       	ldi	r31, 0x06	; 6
    596c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    596e:	81 ea       	ldi	r24, 0xA1	; 161
    5970:	e0 ec       	ldi	r30, 0xC0	; 192
    5972:	f8 e0       	ldi	r31, 0x08	; 8
    5974:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5976:	80 91 c2 08 	lds	r24, 0x08C2
    597a:	87 ff       	sbrs	r24, 7
    597c:	fc cf       	rjmp	.-8      	; 0x5976 <display_init+0x94>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    597e:	84 e0       	ldi	r24, 0x04	; 4
    5980:	e0 e2       	ldi	r30, 0x20	; 32
    5982:	f6 e0       	ldi	r31, 0x06	; 6
    5984:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5986:	80 ec       	ldi	r24, 0xC0	; 192
    5988:	e0 ec       	ldi	r30, 0xC0	; 192
    598a:	f8 e0       	ldi	r31, 0x08	; 8
    598c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    598e:	80 91 c2 08 	lds	r24, 0x08C2
    5992:	87 ff       	sbrs	r24, 7
    5994:	fc cf       	rjmp	.-8      	; 0x598e <display_init+0xac>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5996:	84 e0       	ldi	r24, 0x04	; 4
    5998:	e0 e2       	ldi	r30, 0x20	; 32
    599a:	f6 e0       	ldi	r31, 0x06	; 6
    599c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    599e:	84 ea       	ldi	r24, 0xA4	; 164
    59a0:	e0 ec       	ldi	r30, 0xC0	; 192
    59a2:	f8 e0       	ldi	r31, 0x08	; 8
    59a4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59a6:	80 91 c2 08 	lds	r24, 0x08C2
    59aa:	87 ff       	sbrs	r24, 7
    59ac:	fc cf       	rjmp	.-8      	; 0x59a6 <display_init+0xc4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59ae:	84 e0       	ldi	r24, 0x04	; 4
    59b0:	e0 e2       	ldi	r30, 0x20	; 32
    59b2:	f6 e0       	ldi	r31, 0x06	; 6
    59b4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59b6:	86 ea       	ldi	r24, 0xA6	; 166
    59b8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ba:	f8 e0       	ldi	r31, 0x08	; 8
    59bc:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59be:	80 91 c2 08 	lds	r24, 0x08C2
    59c2:	87 ff       	sbrs	r24, 7
    59c4:	fc cf       	rjmp	.-8      	; 0x59be <display_init+0xdc>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59c6:	84 e0       	ldi	r24, 0x04	; 4
    59c8:	e0 e2       	ldi	r30, 0x20	; 32
    59ca:	f6 e0       	ldi	r31, 0x06	; 6
    59cc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59ce:	8f e2       	ldi	r24, 0x2F	; 47
    59d0:	e0 ec       	ldi	r30, 0xC0	; 192
    59d2:	f8 e0       	ldi	r31, 0x08	; 8
    59d4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59d6:	80 91 c2 08 	lds	r24, 0x08C2
    59da:	87 ff       	sbrs	r24, 7
    59dc:	fc cf       	rjmp	.-8      	; 0x59d6 <display_init+0xf4>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59de:	84 e0       	ldi	r24, 0x04	; 4
    59e0:	e0 e2       	ldi	r30, 0x20	; 32
    59e2:	f6 e0       	ldi	r31, 0x06	; 6
    59e4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59e6:	87 e2       	ldi	r24, 0x27	; 39
    59e8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ea:	f8 e0       	ldi	r31, 0x08	; 8
    59ec:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59ee:	80 91 c2 08 	lds	r24, 0x08C2
    59f2:	87 ff       	sbrs	r24, 7
    59f4:	fc cf       	rjmp	.-8      	; 0x59ee <display_init+0x10c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59f6:	84 e0       	ldi	r24, 0x04	; 4
    59f8:	e0 e2       	ldi	r30, 0x20	; 32
    59fa:	f6 e0       	ldi	r31, 0x06	; 6
    59fc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59fe:	8a ef       	ldi	r24, 0xFA	; 250
    5a00:	e0 ec       	ldi	r30, 0xC0	; 192
    5a02:	f8 e0       	ldi	r31, 0x08	; 8
    5a04:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a06:	80 91 c2 08 	lds	r24, 0x08C2
    5a0a:	87 ff       	sbrs	r24, 7
    5a0c:	fc cf       	rjmp	.-8      	; 0x5a06 <display_init+0x124>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a0e:	84 e0       	ldi	r24, 0x04	; 4
    5a10:	e0 e2       	ldi	r30, 0x20	; 32
    5a12:	f6 e0       	ldi	r31, 0x06	; 6
    5a14:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5a16:	80 e9       	ldi	r24, 0x90	; 144
    5a18:	e0 ec       	ldi	r30, 0xC0	; 192
    5a1a:	f8 e0       	ldi	r31, 0x08	; 8
    5a1c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a1e:	80 91 c2 08 	lds	r24, 0x08C2
    5a22:	87 ff       	sbrs	r24, 7
    5a24:	fc cf       	rjmp	.-8      	; 0x5a1e <display_init+0x13c>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a26:	84 e0       	ldi	r24, 0x04	; 4
    5a28:	e0 e2       	ldi	r30, 0x20	; 32
    5a2a:	f6 e0       	ldi	r31, 0x06	; 6
    5a2c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5a2e:	80 e4       	ldi	r24, 0x40	; 64
    5a30:	e0 ec       	ldi	r30, 0xC0	; 192
    5a32:	f8 e0       	ldi	r31, 0x08	; 8
    5a34:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a36:	80 91 c2 08 	lds	r24, 0x08C2
    5a3a:	87 ff       	sbrs	r24, 7
    5a3c:	fc cf       	rjmp	.-8      	; 0x5a36 <display_init+0x154>
    5a3e:	8c ed       	ldi	r24, 0xDC	; 220
    5a40:	95 e0       	ldi	r25, 0x05	; 5
    5a42:	20 e7       	ldi	r18, 0x70	; 112
    5a44:	31 e0       	ldi	r19, 0x01	; 1
    5a46:	f9 01       	movw	r30, r18
    5a48:	31 97       	sbiw	r30, 0x01	; 1
    5a4a:	f1 f7       	brne	.-4      	; 0x5a48 <display_init+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a4e:	d9 f7       	brne	.-10     	; 0x5a46 <display_init+0x164>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a50:	84 e0       	ldi	r24, 0x04	; 4
    5a52:	e0 e2       	ldi	r30, 0x20	; 32
    5a54:	f6 e0       	ldi	r31, 0x06	; 6
    5a56:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5a58:	82 ea       	ldi	r24, 0xA2	; 162
    5a5a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a5c:	f8 e0       	ldi	r31, 0x08	; 8
    5a5e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a60:	80 91 c2 08 	lds	r24, 0x08C2
    5a64:	87 ff       	sbrs	r24, 7
    5a66:	fc cf       	rjmp	.-8      	; 0x5a60 <display_init+0x17e>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a68:	84 e0       	ldi	r24, 0x04	; 4
    5a6a:	e0 e2       	ldi	r30, 0x20	; 32
    5a6c:	f6 e0       	ldi	r31, 0x06	; 6
    5a6e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5a70:	81 e8       	ldi	r24, 0x81	; 129
    5a72:	e0 ec       	ldi	r30, 0xC0	; 192
    5a74:	f8 e0       	ldi	r31, 0x08	; 8
    5a76:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a78:	80 91 c2 08 	lds	r24, 0x08C2
    5a7c:	87 ff       	sbrs	r24, 7
    5a7e:	fc cf       	rjmp	.-8      	; 0x5a78 <display_init+0x196>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a80:	84 e0       	ldi	r24, 0x04	; 4
    5a82:	e0 e2       	ldi	r30, 0x20	; 32
    5a84:	f6 e0       	ldi	r31, 0x06	; 6
    5a86:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5a88:	88 e0       	ldi	r24, 0x08	; 8
    5a8a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a8c:	f8 e0       	ldi	r31, 0x08	; 8
    5a8e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a90:	80 91 c2 08 	lds	r24, 0x08C2
    5a94:	87 ff       	sbrs	r24, 7
    5a96:	fc cf       	rjmp	.-8      	; 0x5a90 <display_init+0x1ae>

}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5a98:	84 e0       	ldi	r24, 0x04	; 4
    5a9a:	e0 e2       	ldi	r30, 0x20	; 32
    5a9c:	f6 e0       	ldi	r31, 0x06	; 6
    5a9e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5aa0:	8f ea       	ldi	r24, 0xAF	; 175
    5aa2:	e0 ec       	ldi	r30, 0xC0	; 192
    5aa4:	f8 e0       	ldi	r31, 0x08	; 8
    5aa6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5aa8:	80 91 c2 08 	lds	r24, 0x08C2
    5aac:	87 ff       	sbrs	r24, 7
    5aae:	fc cf       	rjmp	.-8      	; 0x5aa8 <display_init+0x1c6>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearBuffer();
    5ab0:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <display_clearBuffer>
	display_writeBufferToScreen();
    5ab4:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>

}
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	08 95       	ret

00005abe <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5abe:	2f 92       	push	r2
    5ac0:	3f 92       	push	r3
    5ac2:	4f 92       	push	r4
    5ac4:	5f 92       	push	r5
    5ac6:	6f 92       	push	r6
    5ac8:	7f 92       	push	r7
    5aca:	8f 92       	push	r8
    5acc:	9f 92       	push	r9
    5ace:	af 92       	push	r10
    5ad0:	bf 92       	push	r11
    5ad2:	cf 92       	push	r12
    5ad4:	df 92       	push	r13
    5ad6:	ef 92       	push	r14
    5ad8:	ff 92       	push	r15
    5ada:	0f 93       	push	r16
    5adc:	1f 93       	push	r17
    5ade:	df 93       	push	r29
    5ae0:	cf 93       	push	r28
    5ae2:	cd b7       	in	r28, 0x3d	; 61
    5ae4:	de b7       	in	r29, 0x3e	; 62
    5ae6:	28 97       	sbiw	r28, 0x08	; 8
    5ae8:	cd bf       	out	0x3d, r28	; 61
    5aea:	de bf       	out	0x3e, r29	; 62
    5aec:	1c 01       	movw	r2, r24
    5aee:	4c 83       	std	Y+4, r20	; 0x04
    5af0:	2f 83       	std	Y+7, r18	; 0x07
    5af2:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5af4:	d9 01       	movw	r26, r18
    5af6:	13 96       	adiw	r26, 0x03	; 3
    5af8:	bc 91       	ld	r27, X
    5afa:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5afc:	f9 01       	movw	r30, r18
    5afe:	f4 81       	ldd	r31, Z+4	; 0x04
    5b00:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5b02:	d9 01       	movw	r26, r18
    5b04:	15 96       	adiw	r26, 0x05	; 5
    5b06:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    5b08:	bb 81       	ldd	r27, Y+3	; 0x03
    5b0a:	0b 2f       	mov	r16, r27
    5b0c:	10 e0       	ldi	r17, 0x00	; 0
    5b0e:	c8 01       	movw	r24, r16
    5b10:	07 96       	adiw	r24, 0x07	; 7
    5b12:	e3 e0       	ldi	r30, 0x03	; 3
    5b14:	95 95       	asr	r25
    5b16:	87 95       	ror	r24
    5b18:	ea 95       	dec	r30
    5b1a:	e1 f7       	brne	.-8      	; 0x5b14 <display_putString+0x56>
    5b1c:	89 83       	std	Y+1, r24	; 0x01
    5b1e:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5b20:	e2 2e       	mov	r14, r18
    5b22:	ff 24       	eor	r15, r15
    5b24:	e6 e0       	ldi	r30, 0x06	; 6
    5b26:	f0 e0       	ldi	r31, 0x00	; 0
    5b28:	ee 0e       	add	r14, r30
    5b2a:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    5b2c:	46 2e       	mov	r4, r22
    5b2e:	55 24       	eor	r5, r5
    5b30:	6f c0       	rjmp	.+222    	; 0x5c10 <display_putString+0x152>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5b32:	7e 2f       	mov	r23, r30
    5b34:	fa 81       	ldd	r31, Y+2	; 0x02
    5b36:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5b38:	af 81       	ldd	r26, Y+7	; 0x07
    5b3a:	b8 85       	ldd	r27, Y+8	; 0x08
    5b3c:	8c 91       	ld	r24, X
    5b3e:	88 23       	and	r24, r24
    5b40:	39 f4       	brne	.+14     	; 0x5b50 <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5b42:	12 96       	adiw	r26, 0x02	; 2
    5b44:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5b46:	74 9f       	mul	r23, r20
    5b48:	f0 01       	movw	r30, r0
    5b4a:	11 24       	eor	r1, r1
    5b4c:	36 96       	adiw	r30, 0x06	; 6
    5b4e:	2b c0       	rjmp	.+86     	; 0x5ba6 <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5b50:	ef 81       	ldd	r30, Y+7	; 0x07
    5b52:	f8 85       	ldd	r31, Y+8	; 0x08
    5b54:	e7 0f       	add	r30, r23
    5b56:	f1 1d       	adc	r31, r1
    5b58:	46 81       	ldd	r20, Z+6	; 0x06
    5b5a:	ef 81       	ldd	r30, Y+7	; 0x07
    5b5c:	f8 85       	ldd	r31, Y+8	; 0x08
    5b5e:	ed 83       	std	Y+5, r30	; 0x05
    5b60:	fe 83       	std	Y+6, r31	; 0x06
    5b62:	50 e0       	ldi	r21, 0x00	; 0
    5b64:	a0 e0       	ldi	r26, 0x00	; 0
    5b66:	b0 e0       	ldi	r27, 0x00	; 0
    5b68:	0a c0       	rjmp	.+20     	; 0x5b7e <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5b6a:	ed 81       	ldd	r30, Y+5	; 0x05
    5b6c:	fe 81       	ldd	r31, Y+6	; 0x06
    5b6e:	85 81       	ldd	r24, Z+5	; 0x05
    5b70:	f9 81       	ldd	r31, Y+1	; 0x01
    5b72:	f8 9f       	mul	r31, r24
    5b74:	c0 01       	movw	r24, r0
    5b76:	11 24       	eor	r1, r1
    5b78:	a8 0f       	add	r26, r24
    5b7a:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5b7c:	5f 5f       	subi	r21, 0xFF	; 255
    5b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b80:	9e 81       	ldd	r25, Y+6	; 0x06
    5b82:	01 96       	adiw	r24, 0x01	; 1
    5b84:	8d 83       	std	Y+5, r24	; 0x05
    5b86:	9e 83       	std	Y+6, r25	; 0x06
    5b88:	57 17       	cp	r21, r23
    5b8a:	78 f3       	brcs	.-34     	; 0x5b6a <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5b8c:	84 2f       	mov	r24, r20
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	82 9f       	mul	r24, r18
    5b92:	f0 01       	movw	r30, r0
    5b94:	83 9f       	mul	r24, r19
    5b96:	f0 0d       	add	r31, r0
    5b98:	92 9f       	mul	r25, r18
    5b9a:	f0 0d       	add	r31, r0
    5b9c:	11 24       	eor	r1, r1
    5b9e:	ee 0d       	add	r30, r14
    5ba0:	ff 1d       	adc	r31, r15
    5ba2:	ea 0f       	add	r30, r26
    5ba4:	fb 1f       	adc	r31, r27
    5ba6:	af 81       	ldd	r26, Y+7	; 0x07
    5ba8:	b8 85       	ldd	r27, Y+8	; 0x08
    5baa:	ae 0f       	add	r26, r30
    5bac:	bf 1f       	adc	r27, r31
    5bae:	50 e0       	ldi	r21, 0x00	; 0
    5bb0:	16 c0       	rjmp	.+44     	; 0x5bde <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5bb2:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    5bb6:	99 30       	cpi	r25, 0x09	; 9
    5bb8:	50 f0       	brcs	.+20     	; 0x5bce <display_putString+0x110>
    5bba:	08 15       	cp	r16, r8
    5bbc:	19 05       	cpc	r17, r9
    5bbe:	3c f4       	brge	.+14     	; 0x5bce <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	06 2c       	mov	r0, r6
    5bc4:	02 c0       	rjmp	.+4      	; 0x5bca <display_putString+0x10c>
    5bc6:	95 95       	asr	r25
    5bc8:	87 95       	ror	r24
    5bca:	0a 94       	dec	r0
    5bcc:	e2 f7       	brpl	.-8      	; 0x5bc6 <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5bce:	f5 01       	movw	r30, r10
    5bd0:	e7 0f       	add	r30, r23
    5bd2:	f1 1d       	adc	r31, r1
    5bd4:	e9 50       	subi	r30, 0x09	; 9
    5bd6:	fc 4a       	sbci	r31, 0xAC	; 172
    5bd8:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5bda:	5f 5f       	subi	r21, 0xFF	; 255
    5bdc:	11 96       	adiw	r26, 0x01	; 1
    5bde:	75 2f       	mov	r23, r21
    5be0:	76 0f       	add	r23, r22
    5be2:	54 17       	cp	r21, r20
    5be4:	30 f3       	brcs	.-52     	; 0x5bb2 <display_putString+0xf4>
    5be6:	84 2f       	mov	r24, r20
    5be8:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5bea:	85 36       	cpi	r24, 0x65	; 101
    5bec:	31 f0       	breq	.+12     	; 0x5bfa <display_putString+0x13c>
 			displayBuffer[page+i][offset+1] = 0x00;
    5bee:	f5 01       	movw	r30, r10
    5bf0:	e8 0f       	add	r30, r24
    5bf2:	f1 1d       	adc	r31, r1
    5bf4:	e8 50       	subi	r30, 0x08	; 8
    5bf6:	fc 4a       	sbci	r31, 0xAC	; 172
    5bf8:	10 82       	st	Z, r1
 		}
		offset++;
    5bfa:	68 2f       	mov	r22, r24
    5bfc:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    5bfe:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5c00:	f1 01       	movw	r30, r2
    5c02:	ed 0d       	add	r30, r13
    5c04:	f1 1d       	adc	r31, r1
    5c06:	e0 81       	ld	r30, Z
    5c08:	ee 23       	and	r30, r30
    5c0a:	09 f0       	breq	.+2      	; 0x5c0e <display_putString+0x150>
    5c0c:	92 cf       	rjmp	.-220    	; 0x5b32 <display_putString+0x74>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5c0e:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5c10:	2c 2d       	mov	r18, r12
    5c12:	30 e0       	ldi	r19, 0x00	; 0
    5c14:	c9 01       	movw	r24, r18
    5c16:	73 e0       	ldi	r23, 0x03	; 3
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	7a 95       	dec	r23
    5c1e:	e1 f7       	brne	.-8      	; 0x5c18 <display_putString+0x15a>
    5c20:	80 17       	cp	r24, r16
    5c22:	91 07       	cpc	r25, r17
    5c24:	e4 f4       	brge	.+56     	; 0x5c5e <display_putString+0x1a0>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5c26:	2f 5f       	subi	r18, 0xFF	; 255
    5c28:	3f 4f       	sbci	r19, 0xFF	; 255
    5c2a:	49 01       	movw	r8, r18
    5c2c:	63 e0       	ldi	r22, 0x03	; 3
    5c2e:	88 0c       	add	r8, r8
    5c30:	99 1c       	adc	r9, r9
    5c32:	6a 95       	dec	r22
    5c34:	e1 f7       	brne	.-8      	; 0x5c2e <display_putString+0x170>
    5c36:	21 50       	subi	r18, 0x01	; 1
    5c38:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5c3a:	34 01       	movw	r6, r8
    5c3c:	60 1a       	sub	r6, r16
    5c3e:	71 0a       	sbc	r7, r17
    5c40:	6c 81       	ldd	r22, Y+4	; 0x04
    5c42:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    5c44:	c9 01       	movw	r24, r18
    5c46:	84 0d       	add	r24, r4
    5c48:	95 1d       	adc	r25, r5
    5c4a:	a6 e6       	ldi	r26, 0x66	; 102
    5c4c:	b0 e0       	ldi	r27, 0x00	; 0
    5c4e:	8a 9f       	mul	r24, r26
    5c50:	50 01       	movw	r10, r0
    5c52:	8b 9f       	mul	r24, r27
    5c54:	b0 0c       	add	r11, r0
    5c56:	9a 9f       	mul	r25, r26
    5c58:	b0 0c       	add	r11, r0
    5c5a:	11 24       	eor	r1, r1
    5c5c:	d1 cf       	rjmp	.-94     	; 0x5c00 <display_putString+0x142>
 		j++;
 	} 	
 	i++;
 }

}
    5c5e:	28 96       	adiw	r28, 0x08	; 8
    5c60:	cd bf       	out	0x3d, r28	; 61
    5c62:	de bf       	out	0x3e, r29	; 62
    5c64:	cf 91       	pop	r28
    5c66:	df 91       	pop	r29
    5c68:	1f 91       	pop	r17
    5c6a:	0f 91       	pop	r16
    5c6c:	ff 90       	pop	r15
    5c6e:	ef 90       	pop	r14
    5c70:	df 90       	pop	r13
    5c72:	cf 90       	pop	r12
    5c74:	bf 90       	pop	r11
    5c76:	af 90       	pop	r10
    5c78:	9f 90       	pop	r9
    5c7a:	8f 90       	pop	r8
    5c7c:	7f 90       	pop	r7
    5c7e:	6f 90       	pop	r6
    5c80:	5f 90       	pop	r5
    5c82:	4f 90       	pop	r4
    5c84:	3f 90       	pop	r3
    5c86:	2f 90       	pop	r2
    5c88:	08 95       	ret

00005c8a <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    5c8a:	28 2f       	mov	r18, r24
    5c8c:	26 95       	lsr	r18
    5c8e:	26 95       	lsr	r18
    5c90:	26 95       	lsr	r18
    5c92:	70 e0       	ldi	r23, 0x00	; 0
    5c94:	a8 2f       	mov	r26, r24
    5c96:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    5c98:	44 23       	and	r20, r20
    5c9a:	d9 f0       	breq	.+54     	; 0x5cd2 <display_drawPixel+0x48>
    5c9c:	30 e0       	ldi	r19, 0x00	; 0
    5c9e:	86 e6       	ldi	r24, 0x66	; 102
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	28 9f       	mul	r18, r24
    5ca4:	f0 01       	movw	r30, r0
    5ca6:	29 9f       	mul	r18, r25
    5ca8:	f0 0d       	add	r31, r0
    5caa:	38 9f       	mul	r19, r24
    5cac:	f0 0d       	add	r31, r0
    5cae:	11 24       	eor	r1, r1
    5cb0:	e6 0f       	add	r30, r22
    5cb2:	f7 1f       	adc	r31, r23
    5cb4:	e9 50       	subi	r30, 0x09	; 9
    5cb6:	fc 4a       	sbci	r31, 0xAC	; 172
    5cb8:	20 81       	ld	r18, Z
    5cba:	a7 70       	andi	r26, 0x07	; 7
    5cbc:	b0 70       	andi	r27, 0x00	; 0
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	02 c0       	rjmp	.+4      	; 0x5cc8 <display_drawPixel+0x3e>
    5cc4:	88 0f       	add	r24, r24
    5cc6:	99 1f       	adc	r25, r25
    5cc8:	aa 95       	dec	r26
    5cca:	e2 f7       	brpl	.-8      	; 0x5cc4 <display_drawPixel+0x3a>
    5ccc:	28 2b       	or	r18, r24
    5cce:	20 83       	st	Z, r18
    5cd0:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5cd2:	30 e0       	ldi	r19, 0x00	; 0
    5cd4:	86 e6       	ldi	r24, 0x66	; 102
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	28 9f       	mul	r18, r24
    5cda:	f0 01       	movw	r30, r0
    5cdc:	29 9f       	mul	r18, r25
    5cde:	f0 0d       	add	r31, r0
    5ce0:	38 9f       	mul	r19, r24
    5ce2:	f0 0d       	add	r31, r0
    5ce4:	11 24       	eor	r1, r1
    5ce6:	e6 0f       	add	r30, r22
    5ce8:	f7 1f       	adc	r31, r23
    5cea:	e9 50       	subi	r30, 0x09	; 9
    5cec:	fc 4a       	sbci	r31, 0xAC	; 172
    5cee:	20 81       	ld	r18, Z
    5cf0:	a7 70       	andi	r26, 0x07	; 7
    5cf2:	b0 70       	andi	r27, 0x00	; 0
    5cf4:	81 e0       	ldi	r24, 0x01	; 1
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	02 c0       	rjmp	.+4      	; 0x5cfe <display_drawPixel+0x74>
    5cfa:	88 0f       	add	r24, r24
    5cfc:	99 1f       	adc	r25, r25
    5cfe:	aa 95       	dec	r26
    5d00:	e2 f7       	brpl	.-8      	; 0x5cfa <display_drawPixel+0x70>
    5d02:	80 95       	com	r24
    5d04:	82 23       	and	r24, r18
    5d06:	80 83       	st	Z, r24
    5d08:	08 95       	ret

00005d0a <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5d0a:	dc 01       	movw	r26, r24
    5d0c:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    5d0e:	90 81       	ld	r25, Z
	*val2 = *val1;
    5d10:	8c 91       	ld	r24, X
    5d12:	80 83       	st	Z, r24
	*val1 = tempVal;
    5d14:	9c 93       	st	X, r25
}
    5d16:	08 95       	ret

00005d18 <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5d18:	df 92       	push	r13
    5d1a:	ef 92       	push	r14
    5d1c:	ff 92       	push	r15
    5d1e:	0f 93       	push	r16
    5d20:	1f 93       	push	r17
    5d22:	cf 93       	push	r28
    5d24:	df 93       	push	r29
    5d26:	f8 2e       	mov	r15, r24
    5d28:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5d2a:	84 17       	cp	r24, r20
    5d2c:	d9 f4       	brne	.+54     	; 0x5d64 <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    5d2e:	26 17       	cp	r18, r22
    5d30:	18 f4       	brcc	.+6      	; 0x5d38 <display_drawLine+0x20>
    5d32:	dd 24       	eor	r13, r13
    5d34:	da 94       	dec	r13
    5d36:	02 c0       	rjmp	.+4      	; 0x5d3c <display_drawLine+0x24>
    5d38:	dd 24       	eor	r13, r13
    5d3a:	d3 94       	inc	r13
		j = column1;
    5d3c:	1e 2d       	mov	r17, r14
		while (j != column2) {
    5d3e:	c2 2f       	mov	r28, r18
    5d40:	d0 e0       	ldi	r29, 0x00	; 0
    5d42:	06 c0       	rjmp	.+12     	; 0x5d50 <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    5d44:	8f 2d       	mov	r24, r15
    5d46:	61 2f       	mov	r22, r17
    5d48:	40 2f       	mov	r20, r16
    5d4a:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
    5d4e:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    5d50:	81 2f       	mov	r24, r17
    5d52:	99 27       	eor	r25, r25
    5d54:	87 fd       	sbrc	r24, 7
    5d56:	90 95       	com	r25
    5d58:	8c 17       	cp	r24, r28
    5d5a:	9d 07       	cpc	r25, r29
    5d5c:	99 f7       	brne	.-26     	; 0x5d44 <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    5d5e:	8f 2d       	mov	r24, r15
    5d60:	61 2f       	mov	r22, r17
    5d62:	1c c0       	rjmp	.+56     	; 0x5d9c <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    5d64:	62 17       	cp	r22, r18
    5d66:	e9 f4       	brne	.+58     	; 0x5da2 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    5d68:	48 17       	cp	r20, r24
    5d6a:	18 f4       	brcc	.+6      	; 0x5d72 <display_drawLine+0x5a>
    5d6c:	dd 24       	eor	r13, r13
    5d6e:	da 94       	dec	r13
    5d70:	02 c0       	rjmp	.+4      	; 0x5d76 <display_drawLine+0x5e>
    5d72:	dd 24       	eor	r13, r13
    5d74:	d3 94       	inc	r13
		i = row1;
    5d76:	1f 2d       	mov	r17, r15
		while(i != row2) {
    5d78:	c4 2f       	mov	r28, r20
    5d7a:	d0 e0       	ldi	r29, 0x00	; 0
    5d7c:	06 c0       	rjmp	.+12     	; 0x5d8a <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    5d7e:	81 2f       	mov	r24, r17
    5d80:	6e 2d       	mov	r22, r14
    5d82:	40 2f       	mov	r20, r16
    5d84:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
    5d88:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    5d8a:	81 2f       	mov	r24, r17
    5d8c:	99 27       	eor	r25, r25
    5d8e:	87 fd       	sbrc	r24, 7
    5d90:	90 95       	com	r25
    5d92:	8c 17       	cp	r24, r28
    5d94:	9d 07       	cpc	r25, r29
    5d96:	99 f7       	brne	.-26     	; 0x5d7e <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    5d98:	81 2f       	mov	r24, r17
    5d9a:	6e 2d       	mov	r22, r14
    5d9c:	40 2f       	mov	r20, r16
    5d9e:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
			
			
		}
		*/
	}
}
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	df 90       	pop	r13
    5db0:	08 95       	ret

00005db2 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5db2:	6f 92       	push	r6
    5db4:	7f 92       	push	r7
    5db6:	8f 92       	push	r8
    5db8:	9f 92       	push	r9
    5dba:	bf 92       	push	r11
    5dbc:	cf 92       	push	r12
    5dbe:	df 92       	push	r13
    5dc0:	ef 92       	push	r14
    5dc2:	ff 92       	push	r15
    5dc4:	0f 93       	push	r16
    5dc6:	1f 93       	push	r17
    5dc8:	cf 93       	push	r28
    5dca:	df 93       	push	r29
    5dcc:	18 2f       	mov	r17, r24
    5dce:	b6 2e       	mov	r11, r22
    5dd0:	d2 2e       	mov	r13, r18
    5dd2:	d6 0e       	add	r13, r22
    5dd4:	f4 2e       	mov	r15, r20
    5dd6:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5dd8:	00 23       	and	r16, r16
    5dda:	c1 f4       	brne	.+48     	; 0x5e0c <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    5ddc:	41 2f       	mov	r20, r17
    5dde:	2d 2d       	mov	r18, r13
    5de0:	0c 2d       	mov	r16, r12
    5de2:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5de6:	8f 2d       	mov	r24, r15
    5de8:	6b 2d       	mov	r22, r11
    5dea:	4f 2d       	mov	r20, r15
    5dec:	2d 2d       	mov	r18, r13
    5dee:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5df2:	81 2f       	mov	r24, r17
    5df4:	6b 2d       	mov	r22, r11
    5df6:	4f 2d       	mov	r20, r15
    5df8:	2b 2d       	mov	r18, r11
    5dfa:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    5dfe:	81 2f       	mov	r24, r17
    5e00:	6d 2d       	mov	r22, r13
    5e02:	4f 2d       	mov	r20, r15
    5e04:	2d 2d       	mov	r18, r13
    5e06:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
    5e0a:	63 c0       	rjmp	.+198    	; 0x5ed2 <display_drawRectangle+0x120>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    5e0c:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    5e0e:	08 2f       	mov	r16, r24
    5e10:	10 e0       	ldi	r17, 0x00	; 0
    5e12:	04 0f       	add	r16, r20
    5e14:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    5e16:	cf 2d       	mov	r28, r15
    5e18:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5e1a:	a7 e0       	ldi	r26, 0x07	; 7
    5e1c:	b0 e0       	ldi	r27, 0x00	; 0
    5e1e:	ac 1b       	sub	r26, r28
    5e20:	bd 0b       	sbc	r27, r29
    5e22:	2f ef       	ldi	r18, 0xFF	; 255
    5e24:	82 2e       	mov	r8, r18
    5e26:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5e28:	96 e6       	ldi	r25, 0x66	; 102
    5e2a:	69 2e       	mov	r6, r25
    5e2c:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    5e2e:	88 e0       	ldi	r24, 0x08	; 8
    5e30:	c8 2e       	mov	r12, r24
    5e32:	49 c0       	rjmp	.+146    	; 0x5ec6 <display_drawRectangle+0x114>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    5e34:	f7 e0       	ldi	r31, 0x07	; 7
    5e36:	ff 2e       	mov	r15, r31
    5e38:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    5e3a:	6f 2d       	mov	r22, r15
    5e3c:	70 e0       	ldi	r23, 0x00	; 0
    5e3e:	c9 01       	movw	r24, r18
    5e40:	07 96       	adiw	r24, 0x07	; 7
    5e42:	86 1b       	sub	r24, r22
    5e44:	97 0b       	sbc	r25, r23
    5e46:	c8 17       	cp	r28, r24
    5e48:	d9 07       	cpc	r29, r25
    5e4a:	44 f0       	brlt	.+16     	; 0x5e5c <display_drawRectangle+0xaa>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    5e4c:	c4 01       	movw	r24, r8
    5e4e:	0f 2c       	mov	r0, r15
    5e50:	02 c0       	rjmp	.+4      	; 0x5e56 <display_drawRectangle+0xa4>
    5e52:	88 0f       	add	r24, r24
    5e54:	99 1f       	adc	r25, r25
    5e56:	0a 94       	dec	r0
    5e58:	e2 f7       	brpl	.-8      	; 0x5e52 <display_drawRectangle+0xa0>
    5e5a:	08 c0       	rjmp	.+16     	; 0x5e6c <display_drawRectangle+0xba>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5e5c:	2a 0f       	add	r18, r26
    5e5e:	3b 1f       	adc	r19, r27
    5e60:	c4 01       	movw	r24, r8
    5e62:	02 c0       	rjmp	.+4      	; 0x5e68 <display_drawRectangle+0xb6>
    5e64:	95 95       	asr	r25
    5e66:	87 95       	ror	r24
    5e68:	2a 95       	dec	r18
    5e6a:	e2 f7       	brpl	.-8      	; 0x5e64 <display_drawRectangle+0xb2>
    5e6c:	28 2f       	mov	r18, r24
			}
			page = i/8;
    5e6e:	85 2f       	mov	r24, r21
    5e70:	86 95       	lsr	r24
    5e72:	86 95       	lsr	r24
    5e74:	86 95       	lsr	r24
    5e76:	3b 2d       	mov	r19, r11
    5e78:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5e7a:	86 9d       	mul	r24, r6
    5e7c:	b0 01       	movw	r22, r0
    5e7e:	87 9d       	mul	r24, r7
    5e80:	70 0d       	add	r23, r0
    5e82:	96 9d       	mul	r25, r6
    5e84:	70 0d       	add	r23, r0
    5e86:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    5e88:	42 2f       	mov	r20, r18
    5e8a:	40 95       	com	r20
    5e8c:	17 c0       	rjmp	.+46     	; 0x5ebc <display_drawRectangle+0x10a>
    5e8e:	e3 2f       	mov	r30, r19
    5e90:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    5e92:	ee 20       	and	r14, r14
    5e94:	69 f0       	breq	.+26     	; 0x5eb0 <display_drawRectangle+0xfe>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    5e96:	e6 0f       	add	r30, r22
    5e98:	f7 1f       	adc	r31, r23
    5e9a:	e9 50       	subi	r30, 0x09	; 9
    5e9c:	fc 4a       	sbci	r31, 0xAC	; 172
    5e9e:	80 81       	ld	r24, Z
    5ea0:	90 81       	ld	r25, Z
    5ea2:	82 23       	and	r24, r18
    5ea4:	80 95       	com	r24
    5ea6:	82 23       	and	r24, r18
    5ea8:	94 23       	and	r25, r20
    5eaa:	89 2b       	or	r24, r25
    5eac:	80 83       	st	Z, r24
    5eae:	05 c0       	rjmp	.+10     	; 0x5eba <display_drawRectangle+0x108>
				} else {
					displayBuffer[page][j] = byteOut;	
    5eb0:	e6 0f       	add	r30, r22
    5eb2:	f7 1f       	adc	r31, r23
    5eb4:	e9 50       	subi	r30, 0x09	; 9
    5eb6:	fc 4a       	sbci	r31, 0xAC	; 172
    5eb8:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    5eba:	3f 5f       	subi	r19, 0xFF	; 255
    5ebc:	d3 16       	cp	r13, r19
    5ebe:	38 f7       	brcc	.-50     	; 0x5e8e <display_drawRectangle+0xdc>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    5ec0:	8c 2d       	mov	r24, r12
    5ec2:	8f 19       	sub	r24, r15
    5ec4:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    5ec6:	25 2f       	mov	r18, r21
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	02 17       	cp	r16, r18
    5ecc:	13 07       	cpc	r17, r19
    5ece:	0c f0       	brlt	.+2      	; 0x5ed2 <display_drawRectangle+0x120>
    5ed0:	b1 cf       	rjmp	.-158    	; 0x5e34 <display_drawRectangle+0x82>
			i += (8 - remainder);	
		}
	
	}
			
}
    5ed2:	df 91       	pop	r29
    5ed4:	cf 91       	pop	r28
    5ed6:	1f 91       	pop	r17
    5ed8:	0f 91       	pop	r16
    5eda:	ff 90       	pop	r15
    5edc:	ef 90       	pop	r14
    5ede:	df 90       	pop	r13
    5ee0:	cf 90       	pop	r12
    5ee2:	bf 90       	pop	r11
    5ee4:	9f 90       	pop	r9
    5ee6:	8f 90       	pop	r8
    5ee8:	7f 90       	pop	r7
    5eea:	6f 90       	pop	r6
    5eec:	08 95       	ret

00005eee <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    5eee:	88 e0       	ldi	r24, 0x08	; 8
    5ef0:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    5ef4:	80 ec       	ldi	r24, 0xC0	; 192
    5ef6:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    5efa:	e0 e0       	ldi	r30, 0x00	; 0
    5efc:	f8 e0       	ldi	r31, 0x08	; 8
    5efe:	8f ef       	ldi	r24, 0xFF	; 255
    5f00:	9f ef       	ldi	r25, 0xFF	; 255
    5f02:	86 a3       	std	Z+38, r24	; 0x26
    5f04:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    5f06:	80 81       	ld	r24, Z
    5f08:	80 7f       	andi	r24, 0xF0	; 240
    5f0a:	84 60       	ori	r24, 0x04	; 4
    5f0c:	80 83       	st	Z, r24
  
	
	
}
    5f0e:	08 95       	ret

00005f10 <Time_Set>:

void Time_Set(uint32_t time){
  cli();
    5f10:	f8 94       	cli
  UNIX_time = time;
    5f12:	60 93 01 34 	sts	0x3401, r22
    5f16:	70 93 02 34 	sts	0x3402, r23
    5f1a:	80 93 03 34 	sts	0x3403, r24
    5f1e:	90 93 04 34 	sts	0x3404, r25
  sei();
    5f22:	78 94       	sei
}
    5f24:	08 95       	ret

00005f26 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    5f26:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    5f28:	20 91 60 08 	lds	r18, 0x0860
    5f2c:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    5f30:	60 91 20 08 	lds	r22, 0x0820
    5f34:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    5f38:	80 91 60 08 	lds	r24, 0x0860
    5f3c:	90 91 61 08 	lds	r25, 0x0861
    5f40:	28 17       	cp	r18, r24
    5f42:	39 07       	cpc	r19, r25
    5f44:	41 f0       	breq	.+16     	; 0x5f56 <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    5f46:	20 91 60 08 	lds	r18, 0x0860
    5f4a:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    5f4e:	60 91 20 08 	lds	r22, 0x0820
    5f52:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    5f56:	78 94       	sei
    5f58:	40 e0       	ldi	r20, 0x00	; 0
    5f5a:	50 e0       	ldi	r21, 0x00	; 0
    5f5c:	a9 01       	movw	r20, r18
    5f5e:	33 27       	eor	r19, r19
    5f60:	22 27       	eor	r18, r18
    5f62:	cb 01       	movw	r24, r22
    5f64:	a0 e0       	ldi	r26, 0x00	; 0
    5f66:	b0 e0       	ldi	r27, 0x00	; 0
    5f68:	28 0f       	add	r18, r24
    5f6a:	39 1f       	adc	r19, r25
    5f6c:	4a 1f       	adc	r20, r26
    5f6e:	5b 1f       	adc	r21, r27
  return result;
}
    5f70:	b9 01       	movw	r22, r18
    5f72:	ca 01       	movw	r24, r20
    5f74:	08 95       	ret

00005f76 <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5f76:	e0 e0       	ldi	r30, 0x00	; 0
    5f78:	f2 e0       	ldi	r31, 0x02	; 2
    5f7a:	92 e0       	ldi	r25, 0x02	; 2
    5f7c:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    5f7e:	8a e2       	ldi	r24, 0x2A	; 42
    5f80:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5f82:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    5f84:	83 e2       	ldi	r24, 0x23	; 35
    5f86:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5f88:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    5f8a:	88 e3       	ldi	r24, 0x38	; 56
    5f8c:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5f8e:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    5f90:	81 e3       	ldi	r24, 0x31	; 49
    5f92:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    5f94:	84 81       	ldd	r24, Z+4	; 0x04
    5f96:	88 7f       	andi	r24, 0xF8	; 248
    5f98:	84 60       	ori	r24, 0x04	; 4
    5f9a:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    5f9c:	80 e1       	ldi	r24, 0x10	; 16
    5f9e:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    5fa0:	83 81       	ldd	r24, Z+3	; 0x03
    5fa2:	80 6c       	ori	r24, 0xC0	; 192
    5fa4:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    5fa6:	81 81       	ldd	r24, Z+1	; 0x01
    5fa8:	88 61       	ori	r24, 0x18	; 24
    5faa:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    5fac:	80 a1       	ldd	r24, Z+32	; 0x20
    5fae:	80 68       	ori	r24, 0x80	; 128
    5fb0:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    5fb2:	80 a5       	ldd	r24, Z+40	; 0x28
    5fb4:	80 68       	ori	r24, 0x80	; 128
    5fb6:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    5fb8:	80 ad       	ldd	r24, Z+56	; 0x38
    5fba:	80 68       	ori	r24, 0x80	; 128
    5fbc:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    5fbe:	80 a9       	ldd	r24, Z+48	; 0x30
    5fc0:	80 68       	ori	r24, 0x80	; 128
    5fc2:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    5fc8:	e0 e4       	ldi	r30, 0x40	; 64
    5fca:	f9 e0       	ldi	r31, 0x09	; 9
    5fcc:	80 e4       	ldi	r24, 0x40	; 64
    5fce:	98 e3       	ldi	r25, 0x38	; 56
    5fd0:	86 a3       	std	Z+38, r24	; 0x26
    5fd2:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    5fd4:	80 81       	ld	r24, Z
    5fd6:	80 7f       	andi	r24, 0xF0	; 240
    5fd8:	87 60       	ori	r24, 0x07	; 7
    5fda:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    5fdc:	86 81       	ldd	r24, Z+6	; 0x06
    5fde:	83 60       	ori	r24, 0x03	; 3
    5fe0:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    5fe2:	e0 e0       	ldi	r30, 0x00	; 0
    5fe4:	fb e0       	ldi	r31, 0x0B	; 11
    5fe6:	80 e0       	ldi	r24, 0x00	; 0
    5fe8:	91 e0       	ldi	r25, 0x01	; 1
    5fea:	86 a3       	std	Z+38, r24	; 0x26
    5fec:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    5fee:	80 81       	ld	r24, Z
    5ff0:	80 7f       	andi	r24, 0xF0	; 240
    5ff2:	84 60       	ori	r24, 0x04	; 4
    5ff4:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    5ff6:	86 81       	ldd	r24, Z+6	; 0x06
    5ff8:	83 60       	ori	r24, 0x03	; 3
    5ffa:	86 83       	std	Z+6, r24	; 0x06

}
    5ffc:	08 95       	ret

00005ffe <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    5ffe:	e0 e0       	ldi	r30, 0x00	; 0
    6000:	f2 e0       	ldi	r31, 0x02	; 2
    6002:	60 89       	ldd	r22, Z+16	; 0x10
    6004:	71 89       	ldd	r23, Z+17	; 0x11
    6006:	80 e0       	ldi	r24, 0x00	; 0
    6008:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    600a:	2a ea       	ldi	r18, 0xAA	; 170
    600c:	35 e2       	ldi	r19, 0x25	; 37
    600e:	43 e0       	ldi	r20, 0x03	; 3
    6010:	50 e0       	ldi	r21, 0x00	; 0
    6012:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6016:	67 5f       	subi	r22, 0xF7	; 247
    6018:	7a 40       	sbci	r23, 0x0A	; 10
    601a:	88 4e       	sbci	r24, 0xE8	; 232
    601c:	91 40       	sbci	r25, 0x01	; 1
    601e:	21 e5       	ldi	r18, 0x51	; 81
    6020:	37 e7       	ldi	r19, 0x77	; 119
    6022:	45 e0       	ldi	r20, 0x05	; 5
    6024:	50 e0       	ldi	r21, 0x00	; 0
    6026:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    602a:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    602c:	08 95       	ret

0000602e <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    602e:	e0 e0       	ldi	r30, 0x00	; 0
    6030:	f2 e0       	ldi	r31, 0x02	; 2
    6032:	62 89       	ldd	r22, Z+18	; 0x12
    6034:	73 89       	ldd	r23, Z+19	; 0x13
    6036:	80 e0       	ldi	r24, 0x00	; 0
    6038:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    603a:	27 ec       	ldi	r18, 0xC7	; 199
    603c:	3d e1       	ldi	r19, 0x1D	; 29
    603e:	40 e0       	ldi	r20, 0x00	; 0
    6040:	50 e0       	ldi	r21, 0x00	; 0
    6042:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6046:	6c 59       	subi	r22, 0x9C	; 156
    6048:	7c 41       	sbci	r23, 0x1C	; 28
    604a:	8b 41       	sbci	r24, 0x1B	; 27
    604c:	90 40       	sbci	r25, 0x00	; 0
    604e:	28 ed       	ldi	r18, 0xD8	; 216
    6050:	3f e3       	ldi	r19, 0x3F	; 63
    6052:	41 e0       	ldi	r20, 0x01	; 1
    6054:	50 e0       	ldi	r21, 0x00	; 0
    6056:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    605a:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    605c:	08 95       	ret

0000605e <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    605e:	e0 e0       	ldi	r30, 0x00	; 0
    6060:	f2 e0       	ldi	r31, 0x02	; 2
    6062:	86 89       	ldd	r24, Z+22	; 0x16
    6064:	97 89       	ldd	r25, Z+23	; 0x17
    6066:	f4 e0       	ldi	r31, 0x04	; 4
    6068:	96 95       	lsr	r25
    606a:	87 95       	ror	r24
    606c:	fa 95       	dec	r31
    606e:	e1 f7       	brne	.-8      	; 0x6068 <Sensors_ReadMicrophone+0xa>
}
    6070:	08 95       	ret

00006072 <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    6072:	e0 e0       	ldi	r30, 0x00	; 0
    6074:	f2 e0       	ldi	r31, 0x02	; 2
    6076:	64 89       	ldd	r22, Z+20	; 0x14
    6078:	75 89       	ldd	r23, Z+21	; 0x15
    607a:	80 e0       	ldi	r24, 0x00	; 0
    607c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    607e:	22 e2       	ldi	r18, 0x22	; 34
    6080:	31 ea       	ldi	r19, 0xA1	; 161
    6082:	40 e0       	ldi	r20, 0x00	; 0
    6084:	50 e0       	ldi	r21, 0x00	; 0
    6086:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    608a:	6f 53       	subi	r22, 0x3F	; 63
    608c:	74 41       	sbci	r23, 0x14	; 20
    608e:	8e 49       	sbci	r24, 0x9E	; 158
    6090:	9f 4f       	sbci	r25, 0xFF	; 255
    6092:	27 ed       	ldi	r18, 0xD7	; 215
    6094:	36 e4       	ldi	r19, 0x46	; 70
    6096:	49 e0       	ldi	r20, 0x09	; 9
    6098:	50 e0       	ldi	r21, 0x00	; 0
    609a:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    609e:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    60a0:	08 95       	ret

000060a2 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    60a2:	10 92 0a 34 	sts	0x340A, r1
  	temperatureBufferToWriteTo = 1;
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	80 93 56 30 	sts	0x3056, r24
	okToSendTemperatureBuffer1 = false;
    60ac:	10 92 08 34 	sts	0x3408, r1
	okToSendTemperatureBuffer2 = false;
    60b0:	10 92 09 34 	sts	0x3409, r1
}
    60b4:	08 95       	ret

000060b6 <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    60b6:	10 92 0d 34 	sts	0x340D, r1
	pressureBufferToWriteTo = 1;
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	80 93 57 30 	sts	0x3057, r24
	okToSendPressureBuffer1 = false;
    60c0:	10 92 0b 34 	sts	0x340B, r1
	okToSendPressureBuffer2 = false;
    60c4:	10 92 0c 34 	sts	0x340C, r1
}
    60c8:	08 95       	ret

000060ca <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    60ca:	10 92 10 34 	sts	0x3410, r1
	humidityBufferToWriteTo = 1;
    60ce:	81 e0       	ldi	r24, 0x01	; 1
    60d0:	80 93 58 30 	sts	0x3058, r24
	okToSendHumidityBuffer1 = false;
    60d4:	10 92 0e 34 	sts	0x340E, r1
	okToSendHumidityBuffer2 = false;
    60d8:	10 92 0f 34 	sts	0x340F, r1
}
    60dc:	08 95       	ret

000060de <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    60de:	10 92 13 34 	sts	0x3413, r1
    60e2:	10 92 14 34 	sts	0x3414, r1
	microphoneBufferToWriteTo = 1;
    60e6:	81 e0       	ldi	r24, 0x01	; 1
    60e8:	80 93 59 30 	sts	0x3059, r24
	okToSendMicrophoneBuffer1 = false;
    60ec:	10 92 11 34 	sts	0x3411, r1
	okToSendMicrophoneBuffer2 = false;
    60f0:	10 92 12 34 	sts	0x3412, r1
}
    60f4:	08 95       	ret

000060f6 <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    60f6:	10 92 17 34 	sts	0x3417, r1
	lightBufferToWriteTo = 1;
    60fa:	81 e0       	ldi	r24, 0x01	; 1
    60fc:	80 93 5a 30 	sts	0x305A, r24
	okToSendLightBuffer1 = false;
    6100:	10 92 15 34 	sts	0x3415, r1
	okToSendLightBuffer2 = false;
    6104:	10 92 16 34 	sts	0x3416, r1
}
    6108:	08 95       	ret

0000610a <__vector_108>:


}

ISR(TCF0_OVF_vect)
{
    610a:	1f 92       	push	r1
    610c:	0f 92       	push	r0
    610e:	0f b6       	in	r0, 0x3f	; 63
    6110:	0f 92       	push	r0
    6112:	0b b6       	in	r0, 0x3b	; 59
    6114:	0f 92       	push	r0
    6116:	11 24       	eor	r1, r1
    6118:	0f 93       	push	r16
    611a:	1f 93       	push	r17
    611c:	2f 93       	push	r18
    611e:	3f 93       	push	r19
    6120:	4f 93       	push	r20
    6122:	5f 93       	push	r21
    6124:	6f 93       	push	r22
    6126:	7f 93       	push	r23
    6128:	8f 93       	push	r24
    612a:	9f 93       	push	r25
    612c:	af 93       	push	r26
    612e:	bf 93       	push	r27
    6130:	ef 93       	push	r30
    6132:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    6134:	80 91 06 34 	lds	r24, 0x3406
    6138:	88 23       	and	r24, r24
    613a:	09 f4       	brne	.+2      	; 0x613e <__vector_108+0x34>
    613c:	91 c0       	rjmp	.+290    	; 0x6260 <__vector_108+0x156>
    613e:	80 91 1a 34 	lds	r24, 0x341A
    6142:	88 23       	and	r24, r24
    6144:	09 f4       	brne	.+2      	; 0x6148 <__vector_108+0x3e>
    6146:	8c c0       	rjmp	.+280    	; 0x6260 <__vector_108+0x156>
	  if(microphoneBufferToWriteTo == 1){
    6148:	80 91 59 30 	lds	r24, 0x3059
    614c:	81 30       	cpi	r24, 0x01	; 1
    614e:	09 f0       	breq	.+2      	; 0x6152 <__vector_108+0x48>
    6150:	43 c0       	rjmp	.+134    	; 0x61d8 <__vector_108+0xce>
	    if(microphoneBufferCounter == 0){
    6152:	80 91 13 34 	lds	r24, 0x3413
    6156:	90 91 14 34 	lds	r25, 0x3414
    615a:	89 2b       	or	r24, r25
    615c:	51 f4       	brne	.+20     	; 0x6172 <__vector_108+0x68>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    615e:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    6162:	60 93 be 33 	sts	0x33BE, r22
    6166:	70 93 bf 33 	sts	0x33BF, r23
    616a:	80 93 c0 33 	sts	0x33C0, r24
    616e:	90 93 c1 33 	sts	0x33C1, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6172:	00 91 13 34 	lds	r16, 0x3413
    6176:	10 91 14 34 	lds	r17, 0x3414
    617a:	0e 94 2f 30 	call	0x605e	; 0x605e <Sensors_ReadMicrophone>
    617e:	02 59       	subi	r16, 0x92	; 146
    6180:	19 4b       	sbci	r17, 0xB9	; 185
    6182:	f8 01       	movw	r30, r16
    6184:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6186:	80 91 21 34 	lds	r24, 0x3421
    618a:	88 23       	and	r24, r24
    618c:	49 f4       	brne	.+18     	; 0x61a0 <__vector_108+0x96>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    618e:	e0 91 13 34 	lds	r30, 0x3413
    6192:	f0 91 14 34 	lds	r31, 0x3414
    6196:	e2 59       	subi	r30, 0x92	; 146
    6198:	f9 4b       	sbci	r31, 0xB9	; 185
    619a:	80 81       	ld	r24, Z
    619c:	80 93 20 34 	sts	0x3420, r24
	    }
	    microphoneBufferCounter++;
    61a0:	80 91 13 34 	lds	r24, 0x3413
    61a4:	90 91 14 34 	lds	r25, 0x3414
    61a8:	01 96       	adiw	r24, 0x01	; 1
    61aa:	80 93 13 34 	sts	0x3413, r24
    61ae:	90 93 14 34 	sts	0x3414, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    61b2:	88 5e       	subi	r24, 0xE8	; 232
    61b4:	93 40       	sbci	r25, 0x03	; 3
    61b6:	09 f0       	breq	.+2      	; 0x61ba <__vector_108+0xb0>
    61b8:	5b c0       	rjmp	.+182    	; 0x6270 <__vector_108+0x166>
	    	quickMic = microphoneBuffer1[0];
    61ba:	80 91 6e 46 	lds	r24, 0x466E
    61be:	80 93 20 34 	sts	0x3420, r24
	    	microphoneBufferCounter=0;
    61c2:	10 92 13 34 	sts	0x3413, r1
    61c6:	10 92 14 34 	sts	0x3414, r1
	    	microphoneBufferToWriteTo = 2;
    61ca:	82 e0       	ldi	r24, 0x02	; 2
    61cc:	80 93 59 30 	sts	0x3059, r24
	    	okToSendMicrophoneBuffer1 = true;
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	80 93 11 34 	sts	0x3411, r24
    61d6:	4c c0       	rjmp	.+152    	; 0x6270 <__vector_108+0x166>
	    }
	  } else if (microphoneBufferToWriteTo == 2){
    61d8:	82 30       	cpi	r24, 0x02	; 2
    61da:	09 f0       	breq	.+2      	; 0x61de <__vector_108+0xd4>
    61dc:	49 c0       	rjmp	.+146    	; 0x6270 <__vector_108+0x166>
	    if(microphoneBufferCounter == 0){
    61de:	80 91 13 34 	lds	r24, 0x3413
    61e2:	90 91 14 34 	lds	r25, 0x3414
    61e6:	89 2b       	or	r24, r25
    61e8:	51 f4       	brne	.+20     	; 0x61fe <__vector_108+0xf4>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    61ea:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    61ee:	60 93 c2 33 	sts	0x33C2, r22
    61f2:	70 93 c3 33 	sts	0x33C3, r23
    61f6:	80 93 c4 33 	sts	0x33C4, r24
    61fa:	90 93 c5 33 	sts	0x33C5, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    61fe:	00 91 13 34 	lds	r16, 0x3413
    6202:	10 91 14 34 	lds	r17, 0x3414
    6206:	0e 94 2f 30 	call	0x605e	; 0x605e <Sensors_ReadMicrophone>
    620a:	00 59       	subi	r16, 0x90	; 144
    620c:	1e 4b       	sbci	r17, 0xBE	; 190
    620e:	f8 01       	movw	r30, r16
    6210:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6212:	80 91 21 34 	lds	r24, 0x3421
    6216:	88 23       	and	r24, r24
    6218:	49 f4       	brne	.+18     	; 0x622c <__vector_108+0x122>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    621a:	e0 91 13 34 	lds	r30, 0x3413
    621e:	f0 91 14 34 	lds	r31, 0x3414
    6222:	e0 59       	subi	r30, 0x90	; 144
    6224:	fe 4b       	sbci	r31, 0xBE	; 190
    6226:	80 81       	ld	r24, Z
    6228:	80 93 20 34 	sts	0x3420, r24
	    }

	    microphoneBufferCounter++;
    622c:	80 91 13 34 	lds	r24, 0x3413
    6230:	90 91 14 34 	lds	r25, 0x3414
    6234:	01 96       	adiw	r24, 0x01	; 1
    6236:	80 93 13 34 	sts	0x3413, r24
    623a:	90 93 14 34 	sts	0x3414, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    623e:	88 5e       	subi	r24, 0xE8	; 232
    6240:	93 40       	sbci	r25, 0x03	; 3
    6242:	b1 f4       	brne	.+44     	; 0x6270 <__vector_108+0x166>
	    	quickMic = microphoneBuffer2[0];
    6244:	80 91 70 41 	lds	r24, 0x4170
    6248:	80 93 20 34 	sts	0x3420, r24
	    	microphoneBufferCounter=0;
    624c:	10 92 13 34 	sts	0x3413, r1
    6250:	10 92 14 34 	sts	0x3414, r1
	    	microphoneBufferToWriteTo = 1;
    6254:	81 e0       	ldi	r24, 0x01	; 1
    6256:	80 93 59 30 	sts	0x3059, r24
	    	okToSendMicrophoneBuffer2 = true;
    625a:	80 93 12 34 	sts	0x3412, r24
    625e:	08 c0       	rjmp	.+16     	; 0x6270 <__vector_108+0x166>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    6260:	80 91 21 34 	lds	r24, 0x3421
    6264:	88 23       	and	r24, r24
    6266:	21 f4       	brne	.+8      	; 0x6270 <__vector_108+0x166>
			quickMic = Sensors_ReadMicrophone();
    6268:	0e 94 2f 30 	call	0x605e	; 0x605e <Sensors_ReadMicrophone>
    626c:	80 93 20 34 	sts	0x3420, r24
		}
	}
	micSampleCounter++;
    6270:	80 91 21 34 	lds	r24, 0x3421
    6274:	8f 5f       	subi	r24, 0xFF	; 255
    6276:	80 93 21 34 	sts	0x3421, r24
}
    627a:	ff 91       	pop	r31
    627c:	ef 91       	pop	r30
    627e:	bf 91       	pop	r27
    6280:	af 91       	pop	r26
    6282:	9f 91       	pop	r25
    6284:	8f 91       	pop	r24
    6286:	7f 91       	pop	r23
    6288:	6f 91       	pop	r22
    628a:	5f 91       	pop	r21
    628c:	4f 91       	pop	r20
    628e:	3f 91       	pop	r19
    6290:	2f 91       	pop	r18
    6292:	1f 91       	pop	r17
    6294:	0f 91       	pop	r16
    6296:	0f 90       	pop	r0
    6298:	0b be       	out	0x3b, r0	; 59
    629a:	0f 90       	pop	r0
    629c:	0f be       	out	0x3f, r0	; 63
    629e:	0f 90       	pop	r0
    62a0:	1f 90       	pop	r1
    62a2:	18 95       	reti

000062a4 <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    62a4:	30 91 55 4b 	lds	r19, 0x4B55
    62a8:	93 2f       	mov	r25, r19
    62aa:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    62ac:	28 2f       	mov	r18, r24
    62ae:	20 68       	ori	r18, 0x80	; 128
    62b0:	20 93 f6 53 	sts	0x53F6, r18


	LightPort.MASTER.ADDR = writeAddress;
    62b4:	e0 e8       	ldi	r30, 0x80	; 128
    62b6:	f4 e0       	ldi	r31, 0x04	; 4
    62b8:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    62ba:	80 91 84 04 	lds	r24, 0x0484
    62be:	86 ff       	sbrs	r24, 6
    62c0:	fc cf       	rjmp	.-8      	; 0x62ba <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    62c2:	e0 e8       	ldi	r30, 0x80	; 128
    62c4:	f4 e0       	ldi	r31, 0x04	; 4
    62c6:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    62c8:	80 91 84 04 	lds	r24, 0x0484
    62cc:	86 ff       	sbrs	r24, 6
    62ce:	fc cf       	rjmp	.-8      	; 0x62c8 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    62d0:	83 2f       	mov	r24, r19
    62d2:	81 60       	ori	r24, 0x01	; 1
    62d4:	80 93 d8 4a 	sts	0x4AD8, r24
	LightPort.MASTER.ADDR = writeAddress;
    62d8:	e0 e8       	ldi	r30, 0x80	; 128
    62da:	f4 e0       	ldi	r31, 0x04	; 4
    62dc:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    62de:	80 91 84 04 	lds	r24, 0x0484
    62e2:	87 ff       	sbrs	r24, 7
    62e4:	fc cf       	rjmp	.-8      	; 0x62de <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    62e6:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    62ea:	97 e0       	ldi	r25, 0x07	; 7
    62ec:	e0 e8       	ldi	r30, 0x80	; 128
    62ee:	f4 e0       	ldi	r31, 0x04	; 4
    62f0:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    62f2:	08 95       	ret

000062f4 <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    62f4:	80 e0       	ldi	r24, 0x00	; 0
    62f6:	0e 94 52 31 	call	0x62a4	; 0x62a4 <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    62fa:	20 91 55 4b 	lds	r18, 0x4B55
    62fe:	92 2f       	mov	r25, r18
    6300:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    6302:	80 e9       	ldi	r24, 0x90	; 144
    6304:	80 93 f6 53 	sts	0x53F6, r24

	LightPort.MASTER.ADDR = writeAddress;
    6308:	e0 e8       	ldi	r30, 0x80	; 128
    630a:	f4 e0       	ldi	r31, 0x04	; 4
    630c:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    630e:	80 91 84 04 	lds	r24, 0x0484
    6312:	86 ff       	sbrs	r24, 6
    6314:	fc cf       	rjmp	.-8      	; 0x630e <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6316:	80 e9       	ldi	r24, 0x90	; 144
    6318:	e0 e8       	ldi	r30, 0x80	; 128
    631a:	f4 e0       	ldi	r31, 0x04	; 4
    631c:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    631e:	80 91 84 04 	lds	r24, 0x0484
    6322:	86 ff       	sbrs	r24, 6
    6324:	fc cf       	rjmp	.-8      	; 0x631e <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    6326:	82 2f       	mov	r24, r18
    6328:	81 60       	ori	r24, 0x01	; 1
    632a:	80 93 d8 4a 	sts	0x4AD8, r24
	LightPort.MASTER.ADDR = writeAddress;
    632e:	e0 e8       	ldi	r30, 0x80	; 128
    6330:	f4 e0       	ldi	r31, 0x04	; 4
    6332:	86 83       	std	Z+6, r24	; 0x06
    6334:	ed e2       	ldi	r30, 0x2D	; 45
    6336:	fb e4       	ldi	r31, 0x4B	; 75
    6338:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    633a:	a0 e8       	ldi	r26, 0x80	; 128
    633c:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    633e:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6340:	80 91 84 04 	lds	r24, 0x0484
    6344:	87 ff       	sbrs	r24, 7
    6346:	fc cf       	rjmp	.-8      	; 0x6340 <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    6348:	80 91 87 04 	lds	r24, 0x0487
    634c:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    634e:	97 30       	cpi	r25, 0x07	; 7
    6350:	19 f0       	breq	.+6      	; 0x6358 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6352:	13 96       	adiw	r26, 0x03	; 3
    6354:	2c 93       	st	X, r18
    6356:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    6358:	9f 5f       	subi	r25, 0xFF	; 255
    635a:	31 96       	adiw	r30, 0x01	; 1
    635c:	98 30       	cpi	r25, 0x08	; 8
    635e:	81 f7       	brne	.-32     	; 0x6340 <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6360:	87 e0       	ldi	r24, 0x07	; 7
    6362:	e0 e8       	ldi	r30, 0x80	; 128
    6364:	f4 e0       	ldi	r31, 0x04	; 4
    6366:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    6368:	90 91 2e 4b 	lds	r25, 0x4B2E
    636c:	80 e0       	ldi	r24, 0x00	; 0
    636e:	20 91 2d 4b 	lds	r18, 0x4B2D
    6372:	82 0f       	add	r24, r18
    6374:	91 1d       	adc	r25, r1
    6376:	80 93 b9 3c 	sts	0x3CB9, r24
    637a:	90 93 ba 3c 	sts	0x3CBA, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    637e:	90 91 30 4b 	lds	r25, 0x4B30
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	20 91 2f 4b 	lds	r18, 0x4B2F
    6388:	82 0f       	add	r24, r18
    638a:	91 1d       	adc	r25, r1
    638c:	80 93 bb 3c 	sts	0x3CBB, r24
    6390:	90 93 bc 3c 	sts	0x3CBC, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    6394:	90 91 32 4b 	lds	r25, 0x4B32
    6398:	80 e0       	ldi	r24, 0x00	; 0
    639a:	20 91 31 4b 	lds	r18, 0x4B31
    639e:	82 0f       	add	r24, r18
    63a0:	91 1d       	adc	r25, r1
    63a2:	80 93 bd 3c 	sts	0x3CBD, r24
    63a6:	90 93 be 3c 	sts	0x3CBE, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    63aa:	90 91 34 4b 	lds	r25, 0x4B34
    63ae:	80 e0       	ldi	r24, 0x00	; 0
    63b0:	20 91 33 4b 	lds	r18, 0x4B33
    63b4:	82 0f       	add	r24, r18
    63b6:	91 1d       	adc	r25, r1
    63b8:	80 93 bf 3c 	sts	0x3CBF, r24
    63bc:	90 93 c0 3c 	sts	0x3CC0, r25
}
    63c0:	08 95       	ret

000063c2 <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    63c2:	e8 2f       	mov	r30, r24
    63c4:	f0 e0       	ldi	r31, 0x00	; 0
    63c6:	ee 0f       	add	r30, r30
    63c8:	ff 1f       	adc	r31, r31
    63ca:	e7 54       	subi	r30, 0x47	; 71
    63cc:	f3 4c       	sbci	r31, 0xC3	; 195
	return colors[color];
}
    63ce:	80 81       	ld	r24, Z
    63d0:	91 81       	ldd	r25, Z+1	; 0x01
    63d2:	08 95       	ret

000063d4 <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    63d4:	90 91 55 4b 	lds	r25, 0x4B55
    63d8:	9e 7f       	andi	r25, 0xFE	; 254
    63da:	90 93 d8 4a 	sts	0x4AD8, r25
	commandCode = 0b10000000 | location;
    63de:	28 2f       	mov	r18, r24
    63e0:	20 68       	ori	r18, 0x80	; 128
    63e2:	20 93 f6 53 	sts	0x53F6, r18

	LightPort.MASTER.ADDR = writeAddress;
    63e6:	e0 e8       	ldi	r30, 0x80	; 128
    63e8:	f4 e0       	ldi	r31, 0x04	; 4
    63ea:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    63ec:	80 91 84 04 	lds	r24, 0x0484
    63f0:	86 ff       	sbrs	r24, 6
    63f2:	fc cf       	rjmp	.-8      	; 0x63ec <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    63f4:	e0 e8       	ldi	r30, 0x80	; 128
    63f6:	f4 e0       	ldi	r31, 0x04	; 4
    63f8:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    63fa:	80 91 84 04 	lds	r24, 0x0484
    63fe:	86 ff       	sbrs	r24, 6
    6400:	fc cf       	rjmp	.-8      	; 0x63fa <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    6402:	e0 e8       	ldi	r30, 0x80	; 128
    6404:	f4 e0       	ldi	r31, 0x04	; 4
    6406:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6408:	80 91 84 04 	lds	r24, 0x0484
    640c:	86 ff       	sbrs	r24, 6
    640e:	fc cf       	rjmp	.-8      	; 0x6408 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6410:	87 e0       	ldi	r24, 0x07	; 7
    6412:	e0 e8       	ldi	r30, 0x80	; 128
    6414:	f4 e0       	ldi	r31, 0x04	; 4
    6416:	83 83       	std	Z+3, r24	; 0x03

}
    6418:	08 95       	ret

0000641a <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    641a:	80 e0       	ldi	r24, 0x00	; 0
    641c:	61 e0       	ldi	r22, 0x01	; 1
    641e:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    6422:	80 91 05 34 	lds	r24, 0x3405
    6426:	e0 e2       	ldi	r30, 0x20	; 32
    6428:	f0 e3       	ldi	r31, 0x30	; 48
    642a:	e8 0f       	add	r30, r24
    642c:	f1 1d       	adc	r31, r1
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	60 81       	ld	r22, Z
    6432:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    6436:	80 91 05 34 	lds	r24, 0x3405
    643a:	e9 e2       	ldi	r30, 0x29	; 41
    643c:	f0 e3       	ldi	r31, 0x30	; 48
    643e:	e8 0f       	add	r30, r24
    6440:	f1 1d       	adc	r31, r1
    6442:	87 e0       	ldi	r24, 0x07	; 7
    6444:	60 81       	ld	r22, Z
    6446:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    644a:	80 e0       	ldi	r24, 0x00	; 0
    644c:	63 e0       	ldi	r22, 0x03	; 3
    644e:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <Light_writeByte>
}
    6452:	08 95       	ret

00006454 <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    6454:	80 93 55 4b 	sts	0x4B55, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6458:	e0 e8       	ldi	r30, 0x80	; 128
    645a:	f4 e0       	ldi	r31, 0x04	; 4
    645c:	88 e0       	ldi	r24, 0x08	; 8
    645e:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6460:	84 e0       	ldi	r24, 0x04	; 4
    6462:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    6464:	8d e0       	ldi	r24, 0x0D	; 13
    6466:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6468:	81 e0       	ldi	r24, 0x01	; 1
    646a:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    646c:	10 92 05 34 	sts	0x3405, r1
	Light_setGain();
    6470:	0e 94 0d 32 	call	0x641a	; 0x641a <Light_setGain>
}
    6474:	08 95       	ret

00006476 <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    6476:	1f 92       	push	r1
    6478:	0f 92       	push	r0
    647a:	0f b6       	in	r0, 0x3f	; 63
    647c:	0f 92       	push	r0
    647e:	0b b6       	in	r0, 0x3b	; 59
    6480:	0f 92       	push	r0
    6482:	11 24       	eor	r1, r1
    6484:	6f 92       	push	r6
    6486:	7f 92       	push	r7
    6488:	8f 92       	push	r8
    648a:	9f 92       	push	r9
    648c:	af 92       	push	r10
    648e:	bf 92       	push	r11
    6490:	cf 92       	push	r12
    6492:	df 92       	push	r13
    6494:	ef 92       	push	r14
    6496:	ff 92       	push	r15
    6498:	0f 93       	push	r16
    649a:	1f 93       	push	r17
    649c:	2f 93       	push	r18
    649e:	3f 93       	push	r19
    64a0:	4f 93       	push	r20
    64a2:	5f 93       	push	r21
    64a4:	6f 93       	push	r22
    64a6:	7f 93       	push	r23
    64a8:	8f 93       	push	r24
    64aa:	9f 93       	push	r25
    64ac:	af 93       	push	r26
    64ae:	bf 93       	push	r27
    64b0:	cf 93       	push	r28
    64b2:	df 93       	push	r29
    64b4:	ef 93       	push	r30
    64b6:	ff 93       	push	r31
    UNIX_time++;
    64b8:	80 91 01 34 	lds	r24, 0x3401
    64bc:	90 91 02 34 	lds	r25, 0x3402
    64c0:	a0 91 03 34 	lds	r26, 0x3403
    64c4:	b0 91 04 34 	lds	r27, 0x3404
    64c8:	01 96       	adiw	r24, 0x01	; 1
    64ca:	a1 1d       	adc	r26, r1
    64cc:	b1 1d       	adc	r27, r1
    64ce:	80 93 01 34 	sts	0x3401, r24
    64d2:	90 93 02 34 	sts	0x3402, r25
    64d6:	a0 93 03 34 	sts	0x3403, r26
    64da:	b0 93 04 34 	sts	0x3404, r27
	if(recording){
    64de:	80 91 06 34 	lds	r24, 0x3406
    64e2:	88 23       	and	r24, r24
    64e4:	09 f4       	brne	.+2      	; 0x64e8 <__vector_83+0x72>
    64e6:	a0 c2       	rjmp	.+1344   	; 0x6a28 <__vector_83+0x5b2>
	  rtcBlockCounter++;
    64e8:	80 91 19 34 	lds	r24, 0x3419
    64ec:	8f 5f       	subi	r24, 0xFF	; 255
    64ee:	80 93 19 34 	sts	0x3419, r24
	  if(rtcBlockCounter == 0){
    64f2:	88 23       	and	r24, r24
    64f4:	19 f4       	brne	.+6      	; 0x64fc <__vector_83+0x86>
	    okToSendRTCBlock = true;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	80 93 18 34 	sts	0x3418, r24
	  }

	  if(wantToRecordTemperature){
    64fc:	80 91 5b 30 	lds	r24, 0x305B
    6500:	88 23       	and	r24, r24
    6502:	09 f4       	brne	.+2      	; 0x6506 <__vector_83+0x90>
    6504:	75 c0       	rjmp	.+234    	; 0x65f0 <__vector_83+0x17a>
		  if(temperatureBufferToWriteTo == 1){
    6506:	80 91 56 30 	lds	r24, 0x3056
    650a:	81 30       	cpi	r24, 0x01	; 1
    650c:	c9 f5       	brne	.+114    	; 0x6580 <__vector_83+0x10a>
			  if(temperatureBufferCounter == 0){
    650e:	80 91 0a 34 	lds	r24, 0x340A
    6512:	88 23       	and	r24, r24
    6514:	51 f4       	brne	.+20     	; 0x652a <__vector_83+0xb4>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    6516:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    651a:	60 93 a6 33 	sts	0x33A6, r22
    651e:	70 93 a7 33 	sts	0x33A7, r23
    6522:	80 93 a8 33 	sts	0x33A8, r24
    6526:	90 93 a9 33 	sts	0x33A9, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    652a:	80 91 0a 34 	lds	r24, 0x340A
    652e:	c8 2f       	mov	r28, r24
    6530:	d0 e0       	ldi	r29, 0x00	; 0
    6532:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <Sensors_ReadTemperature>
    6536:	cc 0f       	add	r28, r28
    6538:	dd 1f       	adc	r29, r29
    653a:	ca 5a       	subi	r28, 0xAA	; 170
    653c:	d5 4b       	sbci	r29, 0xB5	; 181
    653e:	88 83       	st	Y, r24
    6540:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    6542:	20 91 0a 34 	lds	r18, 0x340A
    6546:	e2 2f       	mov	r30, r18
    6548:	f0 e0       	ldi	r31, 0x00	; 0
    654a:	ee 0f       	add	r30, r30
    654c:	ff 1f       	adc	r31, r31
    654e:	ea 5a       	subi	r30, 0xAA	; 170
    6550:	f5 4b       	sbci	r31, 0xB5	; 181
    6552:	80 81       	ld	r24, Z
    6554:	91 81       	ldd	r25, Z+1	; 0x01
    6556:	6a e0       	ldi	r22, 0x0A	; 10
    6558:	70 e0       	ldi	r23, 0x00	; 0
    655a:	0e 94 ec 58 	call	0xb1d8	; 0xb1d8 <__udivmodhi4>
    655e:	60 93 1b 34 	sts	0x341B, r22
			  temperatureBufferCounter++;
    6562:	2f 5f       	subi	r18, 0xFF	; 255
    6564:	20 93 0a 34 	sts	0x340A, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    6568:	2a 30       	cpi	r18, 0x0A	; 10
    656a:	09 f0       	breq	.+2      	; 0x656e <__vector_83+0xf8>
    656c:	41 c0       	rjmp	.+130    	; 0x65f0 <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    656e:	10 92 0a 34 	sts	0x340A, r1
				  temperatureBufferToWriteTo = 2;
    6572:	82 e0       	ldi	r24, 0x02	; 2
    6574:	80 93 56 30 	sts	0x3056, r24
				  okToSendTemperatureBuffer1 = true;
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	80 93 08 34 	sts	0x3408, r24
    657e:	38 c0       	rjmp	.+112    	; 0x65f0 <__vector_83+0x17a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    6580:	82 30       	cpi	r24, 0x02	; 2
    6582:	b1 f5       	brne	.+108    	; 0x65f0 <__vector_83+0x17a>
			  if(temperatureBufferCounter == 0){
    6584:	80 91 0a 34 	lds	r24, 0x340A
    6588:	88 23       	and	r24, r24
    658a:	51 f4       	brne	.+20     	; 0x65a0 <__vector_83+0x12a>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    658c:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    6590:	60 93 aa 33 	sts	0x33AA, r22
    6594:	70 93 ab 33 	sts	0x33AB, r23
    6598:	80 93 ac 33 	sts	0x33AC, r24
    659c:	90 93 ad 33 	sts	0x33AD, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    65a0:	80 91 0a 34 	lds	r24, 0x340A
    65a4:	c8 2f       	mov	r28, r24
    65a6:	d0 e0       	ldi	r29, 0x00	; 0
    65a8:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <Sensors_ReadTemperature>
    65ac:	cc 0f       	add	r28, r28
    65ae:	dd 1f       	adc	r29, r29
    65b0:	c7 52       	subi	r28, 0x27	; 39
    65b2:	d5 4b       	sbci	r29, 0xB5	; 181
    65b4:	88 83       	st	Y, r24
    65b6:	99 83       	std	Y+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    65b8:	20 91 0a 34 	lds	r18, 0x340A
    65bc:	e2 2f       	mov	r30, r18
    65be:	f0 e0       	ldi	r31, 0x00	; 0
    65c0:	ee 0f       	add	r30, r30
    65c2:	ff 1f       	adc	r31, r31
    65c4:	e7 52       	subi	r30, 0x27	; 39
    65c6:	f5 4b       	sbci	r31, 0xB5	; 181
    65c8:	80 81       	ld	r24, Z
    65ca:	91 81       	ldd	r25, Z+1	; 0x01
    65cc:	6a e0       	ldi	r22, 0x0A	; 10
    65ce:	70 e0       	ldi	r23, 0x00	; 0
    65d0:	0e 94 ec 58 	call	0xb1d8	; 0xb1d8 <__udivmodhi4>
    65d4:	60 93 1b 34 	sts	0x341B, r22
			  temperatureBufferCounter++;
    65d8:	2f 5f       	subi	r18, 0xFF	; 255
    65da:	20 93 0a 34 	sts	0x340A, r18
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    65de:	2a 30       	cpi	r18, 0x0A	; 10
    65e0:	39 f4       	brne	.+14     	; 0x65f0 <__vector_83+0x17a>
				  temperatureBufferCounter=0;
    65e2:	10 92 0a 34 	sts	0x340A, r1
				  temperatureBufferToWriteTo = 1;
    65e6:	81 e0       	ldi	r24, 0x01	; 1
    65e8:	80 93 56 30 	sts	0x3056, r24
				  okToSendTemperatureBuffer2 = true;
    65ec:	80 93 09 34 	sts	0x3409, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    65f0:	80 91 5d 30 	lds	r24, 0x305D
    65f4:	88 23       	and	r24, r24
    65f6:	09 f4       	brne	.+2      	; 0x65fa <__vector_83+0x184>
    65f8:	60 c0       	rjmp	.+192    	; 0x66ba <__vector_83+0x244>
		  if(humidityBufferToWriteTo == 1){
    65fa:	80 91 58 30 	lds	r24, 0x3058
    65fe:	81 30       	cpi	r24, 0x01	; 1
    6600:	71 f5       	brne	.+92     	; 0x665e <__vector_83+0x1e8>
			  if(humidityBufferCounter == 0){
    6602:	80 91 10 34 	lds	r24, 0x3410
    6606:	88 23       	and	r24, r24
    6608:	51 f4       	brne	.+20     	; 0x661e <__vector_83+0x1a8>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    660a:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    660e:	60 93 ae 33 	sts	0x33AE, r22
    6612:	70 93 af 33 	sts	0x33AF, r23
    6616:	80 93 b0 33 	sts	0x33B0, r24
    661a:	90 93 b1 33 	sts	0x33B1, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    661e:	80 91 10 34 	lds	r24, 0x3410
    6622:	c8 2f       	mov	r28, r24
    6624:	d0 e0       	ldi	r29, 0x00	; 0
    6626:	0e 94 17 30 	call	0x602e	; 0x602e <Sensors_ReadHumidity>
    662a:	c1 5c       	subi	r28, 0xC1	; 193
    662c:	d4 4b       	sbci	r29, 0xB4	; 180
    662e:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer1[humidityBufferCounter];
    6630:	90 91 10 34 	lds	r25, 0x3410
    6634:	e9 2f       	mov	r30, r25
    6636:	f0 e0       	ldi	r31, 0x00	; 0
    6638:	e1 5c       	subi	r30, 0xC1	; 193
    663a:	f4 4b       	sbci	r31, 0xB4	; 180
    663c:	80 81       	ld	r24, Z
    663e:	80 93 1c 34 	sts	0x341C, r24
			  humidityBufferCounter++;
    6642:	9f 5f       	subi	r25, 0xFF	; 255
    6644:	90 93 10 34 	sts	0x3410, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    6648:	9a 30       	cpi	r25, 0x0A	; 10
    664a:	b9 f5       	brne	.+110    	; 0x66ba <__vector_83+0x244>
				  humidityBufferCounter=0;
    664c:	10 92 10 34 	sts	0x3410, r1
				  humidityBufferToWriteTo = 2;
    6650:	82 e0       	ldi	r24, 0x02	; 2
    6652:	80 93 58 30 	sts	0x3058, r24
				  okToSendHumidityBuffer1 = true;
    6656:	81 e0       	ldi	r24, 0x01	; 1
    6658:	80 93 0e 34 	sts	0x340E, r24
    665c:	2e c0       	rjmp	.+92     	; 0x66ba <__vector_83+0x244>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    665e:	82 30       	cpi	r24, 0x02	; 2
    6660:	61 f5       	brne	.+88     	; 0x66ba <__vector_83+0x244>
			  if(humidityBufferCounter == 0){
    6662:	80 91 10 34 	lds	r24, 0x3410
    6666:	88 23       	and	r24, r24
    6668:	51 f4       	brne	.+20     	; 0x667e <__vector_83+0x208>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    666a:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    666e:	60 93 b2 33 	sts	0x33B2, r22
    6672:	70 93 b3 33 	sts	0x33B3, r23
    6676:	80 93 b4 33 	sts	0x33B4, r24
    667a:	90 93 b5 33 	sts	0x33B5, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    667e:	80 91 10 34 	lds	r24, 0x3410
    6682:	c8 2f       	mov	r28, r24
    6684:	d0 e0       	ldi	r29, 0x00	; 0
    6686:	0e 94 17 30 	call	0x602e	; 0x602e <Sensors_ReadHumidity>
    668a:	c8 52       	subi	r28, 0x28	; 40
    668c:	dc 4a       	sbci	r29, 0xAC	; 172
    668e:	88 83       	st	Y, r24
			  quickHumidity = humidityBuffer2[humidityBufferCounter];
    6690:	90 91 10 34 	lds	r25, 0x3410
    6694:	e9 2f       	mov	r30, r25
    6696:	f0 e0       	ldi	r31, 0x00	; 0
    6698:	e8 52       	subi	r30, 0x28	; 40
    669a:	fc 4a       	sbci	r31, 0xAC	; 172
    669c:	80 81       	ld	r24, Z
    669e:	80 93 1c 34 	sts	0x341C, r24
			  humidityBufferCounter++;
    66a2:	9f 5f       	subi	r25, 0xFF	; 255
    66a4:	90 93 10 34 	sts	0x3410, r25
			  if(humidityBufferCounter == humidityNumberOfSamples){
    66a8:	9a 30       	cpi	r25, 0x0A	; 10
    66aa:	39 f4       	brne	.+14     	; 0x66ba <__vector_83+0x244>
				  humidityBufferCounter=0;
    66ac:	10 92 10 34 	sts	0x3410, r1
				  humidityBufferToWriteTo = 1;
    66b0:	81 e0       	ldi	r24, 0x01	; 1
    66b2:	80 93 58 30 	sts	0x3058, r24
				  okToSendHumidityBuffer2 = true;
    66b6:	80 93 0f 34 	sts	0x340F, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    66ba:	80 91 5c 30 	lds	r24, 0x305C
    66be:	88 23       	and	r24, r24
    66c0:	09 f4       	brne	.+2      	; 0x66c4 <__vector_83+0x24e>
    66c2:	60 c0       	rjmp	.+192    	; 0x6784 <__vector_83+0x30e>
		  if(pressureBufferToWriteTo == 1){
    66c4:	80 91 57 30 	lds	r24, 0x3057
    66c8:	81 30       	cpi	r24, 0x01	; 1
    66ca:	71 f5       	brne	.+92     	; 0x6728 <__vector_83+0x2b2>
			  if(pressureBufferCounter == 0){
    66cc:	80 91 0d 34 	lds	r24, 0x340D
    66d0:	88 23       	and	r24, r24
    66d2:	51 f4       	brne	.+20     	; 0x66e8 <__vector_83+0x272>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    66d4:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    66d8:	60 93 b6 33 	sts	0x33B6, r22
    66dc:	70 93 b7 33 	sts	0x33B7, r23
    66e0:	80 93 b8 33 	sts	0x33B8, r24
    66e4:	90 93 b9 33 	sts	0x33B9, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    66e8:	80 91 0d 34 	lds	r24, 0x340D
    66ec:	c8 2f       	mov	r28, r24
    66ee:	d0 e0       	ldi	r29, 0x00	; 0
    66f0:	0e 94 39 30 	call	0x6072	; 0x6072 <Sensors_ReadPressure>
    66f4:	c0 53       	subi	r28, 0x30	; 48
    66f6:	d3 4c       	sbci	r29, 0xC3	; 195
    66f8:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer1[pressureBufferCounter];
    66fa:	90 91 0d 34 	lds	r25, 0x340D
    66fe:	e9 2f       	mov	r30, r25
    6700:	f0 e0       	ldi	r31, 0x00	; 0
    6702:	e0 53       	subi	r30, 0x30	; 48
    6704:	f3 4c       	sbci	r31, 0xC3	; 195
    6706:	80 81       	ld	r24, Z
    6708:	80 93 1d 34 	sts	0x341D, r24

			  pressureBufferCounter++;
    670c:	9f 5f       	subi	r25, 0xFF	; 255
    670e:	90 93 0d 34 	sts	0x340D, r25
			  if(pressureBufferCounter == pressureNumberOfSamples){
    6712:	9a 30       	cpi	r25, 0x0A	; 10
    6714:	b9 f5       	brne	.+110    	; 0x6784 <__vector_83+0x30e>
				  pressureBufferCounter=0;
    6716:	10 92 0d 34 	sts	0x340D, r1
				  pressureBufferToWriteTo = 2;
    671a:	82 e0       	ldi	r24, 0x02	; 2
    671c:	80 93 57 30 	sts	0x3057, r24
				  okToSendPressureBuffer1 = true;
    6720:	81 e0       	ldi	r24, 0x01	; 1
    6722:	80 93 0b 34 	sts	0x340B, r24
    6726:	2e c0       	rjmp	.+92     	; 0x6784 <__vector_83+0x30e>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    6728:	82 30       	cpi	r24, 0x02	; 2
    672a:	61 f5       	brne	.+88     	; 0x6784 <__vector_83+0x30e>
			  if(pressureBufferCounter == 0){
    672c:	80 91 0d 34 	lds	r24, 0x340D
    6730:	88 23       	and	r24, r24
    6732:	51 f4       	brne	.+20     	; 0x6748 <__vector_83+0x2d2>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    6734:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    6738:	60 93 ba 33 	sts	0x33BA, r22
    673c:	70 93 bb 33 	sts	0x33BB, r23
    6740:	80 93 bc 33 	sts	0x33BC, r24
    6744:	90 93 bd 33 	sts	0x33BD, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    6748:	80 91 0d 34 	lds	r24, 0x340D
    674c:	c8 2f       	mov	r28, r24
    674e:	d0 e0       	ldi	r29, 0x00	; 0
    6750:	0e 94 39 30 	call	0x6072	; 0x6072 <Sensors_ReadPressure>
    6754:	c9 5e       	subi	r28, 0xE9	; 233
    6756:	d4 4b       	sbci	r29, 0xB4	; 180
    6758:	88 83       	st	Y, r24
			  quickPressure = pressureBuffer2[pressureBufferCounter];
    675a:	90 91 0d 34 	lds	r25, 0x340D
    675e:	e9 2f       	mov	r30, r25
    6760:	f0 e0       	ldi	r31, 0x00	; 0
    6762:	e9 5e       	subi	r30, 0xE9	; 233
    6764:	f4 4b       	sbci	r31, 0xB4	; 180
    6766:	80 81       	ld	r24, Z
    6768:	80 93 1d 34 	sts	0x341D, r24
			  pressureBufferCounter++;
    676c:	9f 5f       	subi	r25, 0xFF	; 255
    676e:	90 93 0d 34 	sts	0x340D, r25
			if(pressureBufferCounter == pressureNumberOfSamples){
    6772:	9a 30       	cpi	r25, 0x0A	; 10
    6774:	39 f4       	brne	.+14     	; 0x6784 <__vector_83+0x30e>
				pressureBufferCounter=0;
    6776:	10 92 0d 34 	sts	0x340D, r1
				pressureBufferToWriteTo = 1;
    677a:	81 e0       	ldi	r24, 0x01	; 1
    677c:	80 93 57 30 	sts	0x3057, r24
				okToSendPressureBuffer2 = true;
    6780:	80 93 0c 34 	sts	0x340C, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    6784:	80 91 5e 30 	lds	r24, 0x305E
    6788:	88 23       	and	r24, r24
    678a:	09 f4       	brne	.+2      	; 0x678e <__vector_83+0x318>
    678c:	67 c1       	rjmp	.+718    	; 0x6a5c <__vector_83+0x5e6>

		  Light_readColors();
    678e:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <Light_readColors>
		  Light_readColors();
    6792:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <Light_readColors>
		  Light_readColors();
    6796:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <Light_readColors>

		  quickLight = Light_returnColor(clear);
    679a:	80 91 bf 3c 	lds	r24, 0x3CBF
    679e:	90 91 c0 3c 	lds	r25, 0x3CC0
    67a2:	80 93 1e 34 	sts	0x341E, r24
    67a6:	90 93 1f 34 	sts	0x341F, r25

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    67aa:	e0 91 05 34 	lds	r30, 0x3405
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	ee 0f       	add	r30, r30
    67b2:	ff 1f       	adc	r31, r31
    67b4:	ee 0f       	add	r30, r30
    67b6:	ff 1f       	adc	r31, r31
    67b8:	ee 5c       	subi	r30, 0xCE	; 206
    67ba:	ff 4c       	sbci	r31, 0xCF	; 207
    67bc:	a0 80       	ld	r10, Z
    67be:	b1 80       	ldd	r11, Z+1	; 0x01
    67c0:	c2 80       	ldd	r12, Z+2	; 0x02
    67c2:	d3 80       	ldd	r13, Z+3	; 0x03
    67c4:	e8 ec       	ldi	r30, 0xC8	; 200
    67c6:	f3 e5       	ldi	r31, 0x53	; 83
    67c8:	c9 eb       	ldi	r28, 0xB9	; 185
    67ca:	dc e3       	ldi	r29, 0x3C	; 60
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    67cc:	10 82       	st	Z, r1
    67ce:	11 82       	std	Z+1, r1	; 0x01
    67d0:	12 82       	std	Z+2, r1	; 0x02
    67d2:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    67d4:	88 81       	ld	r24, Y
    67d6:	99 81       	ldd	r25, Y+1	; 0x01
    67d8:	3c 01       	movw	r6, r24
    67da:	88 24       	eor	r8, r8
    67dc:	99 24       	eor	r9, r9
    67de:	ee 24       	eor	r14, r14
    67e0:	ff 24       	eor	r15, r15
    67e2:	87 01       	movw	r16, r14
    67e4:	a6 01       	movw	r20, r12
    67e6:	95 01       	movw	r18, r10
    67e8:	e6 0c       	add	r14, r6
    67ea:	f7 1c       	adc	r15, r7
    67ec:	08 1d       	adc	r16, r8
    67ee:	19 1d       	adc	r17, r9
    67f0:	2a 0d       	add	r18, r10
    67f2:	3b 1d       	adc	r19, r11
    67f4:	4c 1d       	adc	r20, r12
    67f6:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    67f8:	da 01       	movw	r26, r20
    67fa:	c9 01       	movw	r24, r18
    67fc:	8a 19       	sub	r24, r10
    67fe:	9b 09       	sbc	r25, r11
    6800:	ac 09       	sbc	r26, r12
    6802:	bd 09       	sbc	r27, r13
    6804:	80 50       	subi	r24, 0x00	; 0
    6806:	9c 42       	sbci	r25, 0x2C	; 44
    6808:	a1 40       	sbci	r26, 0x01	; 1
    680a:	b0 40       	sbci	r27, 0x00	; 0
    680c:	68 f3       	brcs	.-38     	; 0x67e8 <__vector_83+0x372>
    680e:	e1 92       	st	Z+, r14
    6810:	f1 92       	st	Z+, r15
    6812:	01 93       	st	Z+, r16
    6814:	11 93       	st	Z+, r17
    6816:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    6818:	83 e5       	ldi	r24, 0x53	; 83
    681a:	e8 3d       	cpi	r30, 0xD8	; 216
    681c:	f8 07       	cpc	r31, r24
    681e:	b1 f6       	brne	.-84     	; 0x67cc <__vector_83+0x356>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    6820:	80 91 5a 30 	lds	r24, 0x305A
    6824:	81 30       	cpi	r24, 0x01	; 1
    6826:	09 f0       	breq	.+2      	; 0x682a <__vector_83+0x3b4>
    6828:	72 c0       	rjmp	.+228    	; 0x690e <__vector_83+0x498>
			  if(lightBufferCounter == 0){
    682a:	80 91 17 34 	lds	r24, 0x3417
    682e:	88 23       	and	r24, r24
    6830:	51 f4       	brne	.+20     	; 0x6846 <__vector_83+0x3d0>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    6832:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    6836:	60 93 c6 33 	sts	0x33C6, r22
    683a:	70 93 c7 33 	sts	0x33C7, r23
    683e:	80 93 c8 33 	sts	0x33C8, r24
    6842:	90 93 c9 33 	sts	0x33C9, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    6846:	20 91 17 34 	lds	r18, 0x3417
    684a:	e2 2f       	mov	r30, r18
    684c:	f0 e0       	ldi	r31, 0x00	; 0
    684e:	ee 0f       	add	r30, r30
    6850:	ff 1f       	adc	r31, r31
    6852:	ee 0f       	add	r30, r30
    6854:	ff 1f       	adc	r31, r31
    6856:	e6 5c       	subi	r30, 0xC6	; 198
    6858:	f4 4a       	sbci	r31, 0xA4	; 164
    685a:	80 91 c8 53 	lds	r24, 0x53C8
    685e:	90 91 c9 53 	lds	r25, 0x53C9
    6862:	a0 91 ca 53 	lds	r26, 0x53CA
    6866:	b0 91 cb 53 	lds	r27, 0x53CB
    686a:	80 83       	st	Z, r24
    686c:	91 83       	std	Z+1, r25	; 0x01
    686e:	a2 83       	std	Z+2, r26	; 0x02
    6870:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6872:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    6874:	e2 2f       	mov	r30, r18
    6876:	f0 e0       	ldi	r31, 0x00	; 0
    6878:	ee 0f       	add	r30, r30
    687a:	ff 1f       	adc	r31, r31
    687c:	ee 0f       	add	r30, r30
    687e:	ff 1f       	adc	r31, r31
    6880:	e6 5c       	subi	r30, 0xC6	; 198
    6882:	f4 4a       	sbci	r31, 0xA4	; 164
    6884:	80 91 cc 53 	lds	r24, 0x53CC
    6888:	90 91 cd 53 	lds	r25, 0x53CD
    688c:	a0 91 ce 53 	lds	r26, 0x53CE
    6890:	b0 91 cf 53 	lds	r27, 0x53CF
    6894:	80 83       	st	Z, r24
    6896:	91 83       	std	Z+1, r25	; 0x01
    6898:	a2 83       	std	Z+2, r26	; 0x02
    689a:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    689c:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    689e:	e2 2f       	mov	r30, r18
    68a0:	f0 e0       	ldi	r31, 0x00	; 0
    68a2:	ee 0f       	add	r30, r30
    68a4:	ff 1f       	adc	r31, r31
    68a6:	ee 0f       	add	r30, r30
    68a8:	ff 1f       	adc	r31, r31
    68aa:	e6 5c       	subi	r30, 0xC6	; 198
    68ac:	f4 4a       	sbci	r31, 0xA4	; 164
    68ae:	80 91 d0 53 	lds	r24, 0x53D0
    68b2:	90 91 d1 53 	lds	r25, 0x53D1
    68b6:	a0 91 d2 53 	lds	r26, 0x53D2
    68ba:	b0 91 d3 53 	lds	r27, 0x53D3
    68be:	80 83       	st	Z, r24
    68c0:	91 83       	std	Z+1, r25	; 0x01
    68c2:	a2 83       	std	Z+2, r26	; 0x02
    68c4:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    68c6:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    68c8:	e2 2f       	mov	r30, r18
    68ca:	f0 e0       	ldi	r31, 0x00	; 0
    68cc:	ee 0f       	add	r30, r30
    68ce:	ff 1f       	adc	r31, r31
    68d0:	ee 0f       	add	r30, r30
    68d2:	ff 1f       	adc	r31, r31
    68d4:	e6 5c       	subi	r30, 0xC6	; 198
    68d6:	f4 4a       	sbci	r31, 0xA4	; 164
    68d8:	80 91 d4 53 	lds	r24, 0x53D4
    68dc:	90 91 d5 53 	lds	r25, 0x53D5
    68e0:	a0 91 d6 53 	lds	r26, 0x53D6
    68e4:	b0 91 d7 53 	lds	r27, 0x53D7
    68e8:	80 83       	st	Z, r24
    68ea:	91 83       	std	Z+1, r25	; 0x01
    68ec:	a2 83       	std	Z+2, r26	; 0x02
    68ee:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    68f0:	2f 5f       	subi	r18, 0xFF	; 255
    68f2:	20 93 17 34 	sts	0x3417, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    68f6:	28 32       	cpi	r18, 0x28	; 40
    68f8:	09 f0       	breq	.+2      	; 0x68fc <__vector_83+0x486>
    68fa:	7b c0       	rjmp	.+246    	; 0x69f2 <__vector_83+0x57c>
				  lightBufferCounter=0;
    68fc:	10 92 17 34 	sts	0x3417, r1
				  lightBufferToWriteTo = 2;
    6900:	82 e0       	ldi	r24, 0x02	; 2
    6902:	80 93 5a 30 	sts	0x305A, r24
				  okToSendLightBuffer1 = true;
    6906:	81 e0       	ldi	r24, 0x01	; 1
    6908:	80 93 15 34 	sts	0x3415, r24
    690c:	72 c0       	rjmp	.+228    	; 0x69f2 <__vector_83+0x57c>
			  }
		  } else if (lightBufferToWriteTo == 2){
    690e:	82 30       	cpi	r24, 0x02	; 2
    6910:	09 f0       	breq	.+2      	; 0x6914 <__vector_83+0x49e>
    6912:	6f c0       	rjmp	.+222    	; 0x69f2 <__vector_83+0x57c>
			  if(lightBufferCounter == 0){
    6914:	80 91 17 34 	lds	r24, 0x3417
    6918:	88 23       	and	r24, r24
    691a:	51 f4       	brne	.+20     	; 0x6930 <__vector_83+0x4ba>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    691c:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    6920:	60 93 ca 33 	sts	0x33CA, r22
    6924:	70 93 cb 33 	sts	0x33CB, r23
    6928:	80 93 cc 33 	sts	0x33CC, r24
    692c:	90 93 cd 33 	sts	0x33CD, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    6930:	20 91 17 34 	lds	r18, 0x3417
    6934:	e2 2f       	mov	r30, r18
    6936:	f0 e0       	ldi	r31, 0x00	; 0
    6938:	ee 0f       	add	r30, r30
    693a:	ff 1f       	adc	r31, r31
    693c:	ee 0f       	add	r30, r30
    693e:	ff 1f       	adc	r31, r31
    6940:	e4 56       	subi	r30, 0x64	; 100
    6942:	fa 4b       	sbci	r31, 0xBA	; 186
    6944:	80 91 c8 53 	lds	r24, 0x53C8
    6948:	90 91 c9 53 	lds	r25, 0x53C9
    694c:	a0 91 ca 53 	lds	r26, 0x53CA
    6950:	b0 91 cb 53 	lds	r27, 0x53CB
    6954:	80 83       	st	Z, r24
    6956:	91 83       	std	Z+1, r25	; 0x01
    6958:	a2 83       	std	Z+2, r26	; 0x02
    695a:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    695c:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    695e:	e2 2f       	mov	r30, r18
    6960:	f0 e0       	ldi	r31, 0x00	; 0
    6962:	ee 0f       	add	r30, r30
    6964:	ff 1f       	adc	r31, r31
    6966:	ee 0f       	add	r30, r30
    6968:	ff 1f       	adc	r31, r31
    696a:	e4 56       	subi	r30, 0x64	; 100
    696c:	fa 4b       	sbci	r31, 0xBA	; 186
    696e:	80 91 cc 53 	lds	r24, 0x53CC
    6972:	90 91 cd 53 	lds	r25, 0x53CD
    6976:	a0 91 ce 53 	lds	r26, 0x53CE
    697a:	b0 91 cf 53 	lds	r27, 0x53CF
    697e:	80 83       	st	Z, r24
    6980:	91 83       	std	Z+1, r25	; 0x01
    6982:	a2 83       	std	Z+2, r26	; 0x02
    6984:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6986:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    6988:	e2 2f       	mov	r30, r18
    698a:	f0 e0       	ldi	r31, 0x00	; 0
    698c:	ee 0f       	add	r30, r30
    698e:	ff 1f       	adc	r31, r31
    6990:	ee 0f       	add	r30, r30
    6992:	ff 1f       	adc	r31, r31
    6994:	e4 56       	subi	r30, 0x64	; 100
    6996:	fa 4b       	sbci	r31, 0xBA	; 186
    6998:	80 91 d0 53 	lds	r24, 0x53D0
    699c:	90 91 d1 53 	lds	r25, 0x53D1
    69a0:	a0 91 d2 53 	lds	r26, 0x53D2
    69a4:	b0 91 d3 53 	lds	r27, 0x53D3
    69a8:	80 83       	st	Z, r24
    69aa:	91 83       	std	Z+1, r25	; 0x01
    69ac:	a2 83       	std	Z+2, r26	; 0x02
    69ae:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    69b0:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    69b2:	e2 2f       	mov	r30, r18
    69b4:	f0 e0       	ldi	r31, 0x00	; 0
    69b6:	ee 0f       	add	r30, r30
    69b8:	ff 1f       	adc	r31, r31
    69ba:	ee 0f       	add	r30, r30
    69bc:	ff 1f       	adc	r31, r31
    69be:	e4 56       	subi	r30, 0x64	; 100
    69c0:	fa 4b       	sbci	r31, 0xBA	; 186
    69c2:	80 91 d4 53 	lds	r24, 0x53D4
    69c6:	90 91 d5 53 	lds	r25, 0x53D5
    69ca:	a0 91 d6 53 	lds	r26, 0x53D6
    69ce:	b0 91 d7 53 	lds	r27, 0x53D7
    69d2:	80 83       	st	Z, r24
    69d4:	91 83       	std	Z+1, r25	; 0x01
    69d6:	a2 83       	std	Z+2, r26	; 0x02
    69d8:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    69da:	2f 5f       	subi	r18, 0xFF	; 255
    69dc:	20 93 17 34 	sts	0x3417, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    69e0:	28 32       	cpi	r18, 0x28	; 40
    69e2:	39 f4       	brne	.+14     	; 0x69f2 <__vector_83+0x57c>
				  lightBufferCounter=0;
    69e4:	10 92 17 34 	sts	0x3417, r1
				  lightBufferToWriteTo = 1;
    69e8:	81 e0       	ldi	r24, 0x01	; 1
    69ea:	80 93 5a 30 	sts	0x305A, r24
				  okToSendLightBuffer2 = true;
    69ee:	80 93 16 34 	sts	0x3416, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    69f2:	20 91 bf 3c 	lds	r18, 0x3CBF
    69f6:	30 91 c0 3c 	lds	r19, 0x3CC0
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    69fa:	6f eb       	ldi	r22, 0xBF	; 191
    69fc:	29 36       	cpi	r18, 0x69	; 105
    69fe:	36 07       	cpc	r19, r22
    6a00:	30 f0       	brcs	.+12     	; 0x6a0e <__vector_83+0x598>
    6a02:	80 91 05 34 	lds	r24, 0x3405
    6a06:	88 23       	and	r24, r24
    6a08:	11 f0       	breq	.+4      	; 0x6a0e <__vector_83+0x598>
			  gainSelector--;
    6a0a:	81 50       	subi	r24, 0x01	; 1
    6a0c:	08 c0       	rjmp	.+16     	; 0x6a1e <__vector_83+0x5a8>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6a0e:	20 58       	subi	r18, 0x80	; 128
    6a10:	3e 43       	sbci	r19, 0x3E	; 62
    6a12:	20 f5       	brcc	.+72     	; 0x6a5c <__vector_83+0x5e6>
    6a14:	80 91 05 34 	lds	r24, 0x3405
    6a18:	88 30       	cpi	r24, 0x08	; 8
    6a1a:	01 f1       	breq	.+64     	; 0x6a5c <__vector_83+0x5e6>
			  gainSelector++;
    6a1c:	8f 5f       	subi	r24, 0xFF	; 255
    6a1e:	80 93 05 34 	sts	0x3405, r24
			  Light_setGain();
    6a22:	0e 94 0d 32 	call	0x641a	; 0x641a <Light_setGain>
    6a26:	1a c0       	rjmp	.+52     	; 0x6a5c <__vector_83+0x5e6>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6a28:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <Sensors_ReadTemperature>
    6a2c:	6a e0       	ldi	r22, 0x0A	; 10
    6a2e:	70 e0       	ldi	r23, 0x00	; 0
    6a30:	0e 94 ec 58 	call	0xb1d8	; 0xb1d8 <__udivmodhi4>
    6a34:	60 93 1b 34 	sts	0x341B, r22
		quickHumidity = Sensors_ReadHumidity();
    6a38:	0e 94 17 30 	call	0x602e	; 0x602e <Sensors_ReadHumidity>
    6a3c:	80 93 1c 34 	sts	0x341C, r24
		quickPressure = Sensors_ReadPressure();
    6a40:	0e 94 39 30 	call	0x6072	; 0x6072 <Sensors_ReadPressure>
    6a44:	80 93 1d 34 	sts	0x341D, r24
		Light_readColors();
    6a48:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <Light_readColors>
		quickLight = Light_returnColor(clear);
    6a4c:	80 91 bf 3c 	lds	r24, 0x3CBF
    6a50:	90 91 c0 3c 	lds	r25, 0x3CC0
    6a54:	80 93 1e 34 	sts	0x341E, r24
    6a58:	90 93 1f 34 	sts	0x341F, r25
	}




}
    6a5c:	ff 91       	pop	r31
    6a5e:	ef 91       	pop	r30
    6a60:	df 91       	pop	r29
    6a62:	cf 91       	pop	r28
    6a64:	bf 91       	pop	r27
    6a66:	af 91       	pop	r26
    6a68:	9f 91       	pop	r25
    6a6a:	8f 91       	pop	r24
    6a6c:	7f 91       	pop	r23
    6a6e:	6f 91       	pop	r22
    6a70:	5f 91       	pop	r21
    6a72:	4f 91       	pop	r20
    6a74:	3f 91       	pop	r19
    6a76:	2f 91       	pop	r18
    6a78:	1f 91       	pop	r17
    6a7a:	0f 91       	pop	r16
    6a7c:	ff 90       	pop	r15
    6a7e:	ef 90       	pop	r14
    6a80:	df 90       	pop	r13
    6a82:	cf 90       	pop	r12
    6a84:	bf 90       	pop	r11
    6a86:	af 90       	pop	r10
    6a88:	9f 90       	pop	r9
    6a8a:	8f 90       	pop	r8
    6a8c:	7f 90       	pop	r7
    6a8e:	6f 90       	pop	r6
    6a90:	0f 90       	pop	r0
    6a92:	0b be       	out	0x3b, r0	; 59
    6a94:	0f 90       	pop	r0
    6a96:	0f be       	out	0x3f, r0	; 63
    6a98:	0f 90       	pop	r0
    6a9a:	1f 90       	pop	r1
    6a9c:	18 95       	reti

00006a9e <RTC_init>:
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6a9e:	e0 ea       	ldi	r30, 0xA0	; 160
    6aa0:	f4 e0       	ldi	r31, 0x04	; 4
    6aa2:	88 e0       	ldi	r24, 0x08	; 8
    6aa4:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6aa6:	84 e0       	ldi	r24, 0x04	; 4
    6aa8:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    6aaa:	8f e0       	ldi	r24, 0x0F	; 15
    6aac:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	84 83       	std	Z+4, r24	; 0x04


}
    6ab2:	08 95       	ret

00006ab4 <RTC_UTCSecsToTime>:

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    6ab4:	8f 92       	push	r8
    6ab6:	9f 92       	push	r9
    6ab8:	af 92       	push	r10
    6aba:	bf 92       	push	r11
    6abc:	cf 92       	push	r12
    6abe:	df 92       	push	r13
    6ac0:	ef 92       	push	r14
    6ac2:	ff 92       	push	r15
    6ac4:	0f 93       	push	r16
    6ac6:	1f 93       	push	r17
    6ac8:	cf 93       	push	r28
    6aca:	df 93       	push	r29
    6acc:	7b 01       	movw	r14, r22
    6ace:	8c 01       	movw	r16, r24
    6ad0:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    6ad2:	2c e3       	ldi	r18, 0x3C	; 60
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	40 e0       	ldi	r20, 0x00	; 0
    6ad8:	50 e0       	ldi	r21, 0x00	; 0
    6ada:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6ade:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    6ae0:	c8 01       	movw	r24, r16
    6ae2:	b7 01       	movw	r22, r14
    6ae4:	2c e3       	ldi	r18, 0x3C	; 60
    6ae6:	30 e0       	ldi	r19, 0x00	; 0
    6ae8:	40 e0       	ldi	r20, 0x00	; 0
    6aea:	50 e0       	ldi	r21, 0x00	; 0
    6aec:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6af0:	12 2f       	mov	r17, r18
    6af2:	03 2f       	mov	r16, r19
    6af4:	f4 2e       	mov	r15, r20
    6af6:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    6af8:	62 2f       	mov	r22, r18
    6afa:	73 2f       	mov	r23, r19
    6afc:	84 2f       	mov	r24, r20
    6afe:	95 2f       	mov	r25, r21
    6b00:	2c e3       	ldi	r18, 0x3C	; 60
    6b02:	30 e0       	ldi	r19, 0x00	; 0
    6b04:	40 e0       	ldi	r20, 0x00	; 0
    6b06:	50 e0       	ldi	r21, 0x00	; 0
    6b08:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6b0c:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    6b0e:	61 2f       	mov	r22, r17
    6b10:	70 2f       	mov	r23, r16
    6b12:	8f 2d       	mov	r24, r15
    6b14:	9e 2d       	mov	r25, r14
    6b16:	2c e3       	ldi	r18, 0x3C	; 60
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	40 e0       	ldi	r20, 0x00	; 0
    6b1c:	50 e0       	ldi	r21, 0x00	; 0
    6b1e:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6b22:	12 2f       	mov	r17, r18
    6b24:	03 2f       	mov	r16, r19
    6b26:	f4 2e       	mov	r15, r20
    6b28:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    6b2a:	62 2f       	mov	r22, r18
    6b2c:	73 2f       	mov	r23, r19
    6b2e:	84 2f       	mov	r24, r20
    6b30:	95 2f       	mov	r25, r21
    6b32:	28 e1       	ldi	r18, 0x18	; 24
    6b34:	30 e0       	ldi	r19, 0x00	; 0
    6b36:	40 e0       	ldi	r20, 0x00	; 0
    6b38:	50 e0       	ldi	r21, 0x00	; 0
    6b3a:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6b3e:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    6b40:	61 2f       	mov	r22, r17
    6b42:	70 2f       	mov	r23, r16
    6b44:	8f 2d       	mov	r24, r15
    6b46:	9e 2d       	mov	r25, r14
    6b48:	28 e1       	ldi	r18, 0x18	; 24
    6b4a:	30 e0       	ldi	r19, 0x00	; 0
    6b4c:	40 e0       	ldi	r20, 0x00	; 0
    6b4e:	50 e0       	ldi	r21, 0x00	; 0
    6b50:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6b54:	79 01       	movw	r14, r18
    6b56:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    6b58:	c8 01       	movw	r24, r16
    6b5a:	b7 01       	movw	r22, r14
    6b5c:	6c 5f       	subi	r22, 0xFC	; 252
    6b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b60:	8f 4f       	sbci	r24, 0xFF	; 255
    6b62:	9f 4f       	sbci	r25, 0xFF	; 255
    6b64:	27 e0       	ldi	r18, 0x07	; 7
    6b66:	30 e0       	ldi	r19, 0x00	; 0
    6b68:	40 e0       	ldi	r20, 0x00	; 0
    6b6a:	50 e0       	ldi	r21, 0x00	; 0
    6b6c:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    6b70:	6f 5f       	subi	r22, 0xFF	; 255
    6b72:	6c 83       	std	Y+4, r22	; 0x04
    6b74:	20 e0       	ldi	r18, 0x00	; 0
    6b76:	aa 24       	eor	r10, r10
    6b78:	bb 24       	eor	r11, r11
    6b7a:	65 01       	movw	r12, r10
    6b7c:	01 c0       	rjmp	.+2      	; 0x6b80 <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    6b7e:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    6b80:	82 2e       	mov	r8, r18
    6b82:	99 24       	eor	r9, r9
    6b84:	f4 01       	movw	r30, r8
    6b86:	ee 54       	subi	r30, 0x4E	; 78
    6b88:	f8 4f       	sbci	r31, 0xF8	; 248
    6b8a:	cf 01       	movw	r24, r30
    6b8c:	83 70       	andi	r24, 0x03	; 3
    6b8e:	90 70       	andi	r25, 0x00	; 0
    6b90:	89 2b       	or	r24, r25
    6b92:	99 f4       	brne	.+38     	; 0x6bba <RTC_UTCSecsToTime+0x106>
    6b94:	cf 01       	movw	r24, r30
    6b96:	64 e6       	ldi	r22, 0x64	; 100
    6b98:	70 e0       	ldi	r23, 0x00	; 0
    6b9a:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6b9e:	89 2b       	or	r24, r25
    6ba0:	39 f4       	brne	.+14     	; 0x6bb0 <RTC_UTCSecsToTime+0xfc>
    6ba2:	cf 01       	movw	r24, r30
    6ba4:	60 e9       	ldi	r22, 0x90	; 144
    6ba6:	71 e0       	ldi	r23, 0x01	; 1
    6ba8:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6bac:	89 2b       	or	r24, r25
    6bae:	29 f4       	brne	.+10     	; 0x6bba <RTC_UTCSecsToTime+0x106>
    6bb0:	8e e6       	ldi	r24, 0x6E	; 110
    6bb2:	91 e0       	ldi	r25, 0x01	; 1
    6bb4:	a0 e0       	ldi	r26, 0x00	; 0
    6bb6:	b0 e0       	ldi	r27, 0x00	; 0
    6bb8:	04 c0       	rjmp	.+8      	; 0x6bc2 <RTC_UTCSecsToTime+0x10e>
    6bba:	8d e6       	ldi	r24, 0x6D	; 109
    6bbc:	91 e0       	ldi	r25, 0x01	; 1
    6bbe:	a0 e0       	ldi	r26, 0x00	; 0
    6bc0:	b0 e0       	ldi	r27, 0x00	; 0
    6bc2:	a8 0e       	add	r10, r24
    6bc4:	b9 1e       	adc	r11, r25
    6bc6:	ca 1e       	adc	r12, r26
    6bc8:	db 1e       	adc	r13, r27
    6bca:	c5 01       	movw	r24, r10
    6bcc:	a0 e0       	ldi	r26, 0x00	; 0
    6bce:	b0 e0       	ldi	r27, 0x00	; 0
    6bd0:	e8 16       	cp	r14, r24
    6bd2:	f9 06       	cpc	r15, r25
    6bd4:	0a 07       	cpc	r16, r26
    6bd6:	1b 07       	cpc	r17, r27
    6bd8:	90 f6       	brcc	.-92     	; 0x6b7e <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    6bda:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    6bdc:	f4 01       	movw	r30, r8
    6bde:	ee 54       	subi	r30, 0x4E	; 78
    6be0:	f8 4f       	sbci	r31, 0xF8	; 248
    6be2:	83 e0       	ldi	r24, 0x03	; 3
    6be4:	88 2e       	mov	r8, r24
    6be6:	91 2c       	mov	r9, r1
    6be8:	8e 22       	and	r8, r30
    6bea:	9f 22       	and	r9, r31
    6bec:	81 14       	cp	r8, r1
    6bee:	91 04       	cpc	r9, r1
    6bf0:	99 f4       	brne	.+38     	; 0x6c18 <RTC_UTCSecsToTime+0x164>
    6bf2:	cf 01       	movw	r24, r30
    6bf4:	64 e6       	ldi	r22, 0x64	; 100
    6bf6:	70 e0       	ldi	r23, 0x00	; 0
    6bf8:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6bfc:	89 2b       	or	r24, r25
    6bfe:	39 f4       	brne	.+14     	; 0x6c0e <RTC_UTCSecsToTime+0x15a>
    6c00:	cf 01       	movw	r24, r30
    6c02:	60 e9       	ldi	r22, 0x90	; 144
    6c04:	71 e0       	ldi	r23, 0x01	; 1
    6c06:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6c0a:	89 2b       	or	r24, r25
    6c0c:	29 f4       	brne	.+10     	; 0x6c18 <RTC_UTCSecsToTime+0x164>
    6c0e:	8e e6       	ldi	r24, 0x6E	; 110
    6c10:	91 e0       	ldi	r25, 0x01	; 1
    6c12:	a0 e0       	ldi	r26, 0x00	; 0
    6c14:	b0 e0       	ldi	r27, 0x00	; 0
    6c16:	04 c0       	rjmp	.+8      	; 0x6c20 <RTC_UTCSecsToTime+0x16c>
    6c18:	8d e6       	ldi	r24, 0x6D	; 109
    6c1a:	91 e0       	ldi	r25, 0x01	; 1
    6c1c:	a0 e0       	ldi	r26, 0x00	; 0
    6c1e:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    6c20:	a8 1a       	sub	r10, r24
    6c22:	b9 0a       	sbc	r11, r25
    6c24:	ca 0a       	sbc	r12, r26
    6c26:	db 0a       	sbc	r13, r27
    6c28:	98 01       	movw	r18, r16
    6c2a:	87 01       	movw	r16, r14
    6c2c:	0a 19       	sub	r16, r10
    6c2e:	1b 09       	sbc	r17, r11
    6c30:	2c 09       	sbc	r18, r12
    6c32:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    6c34:	cf 01       	movw	r24, r30
    6c36:	64 e6       	ldi	r22, 0x64	; 100
    6c38:	70 e0       	ldi	r23, 0x00	; 0
    6c3a:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6c3e:	7c 01       	movw	r14, r24
    6c40:	cf 01       	movw	r24, r30
    6c42:	60 e9       	ldi	r22, 0x90	; 144
    6c44:	71 e0       	ldi	r23, 0x01	; 1
    6c46:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6c4a:	ac 01       	movw	r20, r24
    6c4c:	e6 e5       	ldi	r30, 0x56	; 86
    6c4e:	f3 e3       	ldi	r31, 0x33	; 51
    6c50:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    6c52:	61 30       	cpi	r22, 0x01	; 1
    6c54:	51 f4       	brne	.+20     	; 0x6c6a <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    6c56:	81 14       	cp	r8, r1
    6c58:	91 04       	cpc	r9, r1
    6c5a:	49 f4       	brne	.+18     	; 0x6c6e <RTC_UTCSecsToTime+0x1ba>
    6c5c:	e1 14       	cp	r14, r1
    6c5e:	f1 04       	cpc	r15, r1
    6c60:	41 f4       	brne	.+16     	; 0x6c72 <RTC_UTCSecsToTime+0x1be>
    6c62:	41 15       	cp	r20, r1
    6c64:	51 05       	cpc	r21, r1
    6c66:	29 f0       	breq	.+10     	; 0x6c72 <RTC_UTCSecsToTime+0x1be>
    6c68:	02 c0       	rjmp	.+4      	; 0x6c6e <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    6c6a:	80 81       	ld	r24, Z
    6c6c:	03 c0       	rjmp	.+6      	; 0x6c74 <RTC_UTCSecsToTime+0x1c0>
    6c6e:	8c e1       	ldi	r24, 0x1C	; 28
    6c70:	01 c0       	rjmp	.+2      	; 0x6c74 <RTC_UTCSecsToTime+0x1c0>
    6c72:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	a0 e0       	ldi	r26, 0x00	; 0
    6c78:	b0 e0       	ldi	r27, 0x00	; 0
    6c7a:	08 17       	cp	r16, r24
    6c7c:	19 07       	cpc	r17, r25
    6c7e:	2a 07       	cpc	r18, r26
    6c80:	3b 07       	cpc	r19, r27
    6c82:	40 f0       	brcs	.+16     	; 0x6c94 <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    6c84:	08 1b       	sub	r16, r24
    6c86:	19 0b       	sbc	r17, r25
    6c88:	2a 0b       	sbc	r18, r26
    6c8a:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    6c8c:	6f 5f       	subi	r22, 0xFF	; 255
    6c8e:	31 96       	adiw	r30, 0x01	; 1
    6c90:	6c 30       	cpi	r22, 0x0C	; 12
    6c92:	f9 f6       	brne	.-66     	; 0x6c52 <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    6c94:	6f 5f       	subi	r22, 0xFF	; 255
    6c96:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    6c98:	80 2f       	mov	r24, r16
    6c9a:	8f 5f       	subi	r24, 0xFF	; 255
    6c9c:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6c9e:	ce 01       	movw	r24, r28
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	1f 91       	pop	r17
    6ca6:	0f 91       	pop	r16
    6ca8:	ff 90       	pop	r15
    6caa:	ef 90       	pop	r14
    6cac:	df 90       	pop	r13
    6cae:	cf 90       	pop	r12
    6cb0:	bf 90       	pop	r11
    6cb2:	af 90       	pop	r10
    6cb4:	9f 90       	pop	r9
    6cb6:	8f 90       	pop	r8
    6cb8:	08 95       	ret

00006cba <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6cba:	4f 92       	push	r4
    6cbc:	5f 92       	push	r5
    6cbe:	6f 92       	push	r6
    6cc0:	7f 92       	push	r7
    6cc2:	8f 92       	push	r8
    6cc4:	9f 92       	push	r9
    6cc6:	af 92       	push	r10
    6cc8:	bf 92       	push	r11
    6cca:	cf 92       	push	r12
    6ccc:	df 92       	push	r13
    6cce:	ef 92       	push	r14
    6cd0:	ff 92       	push	r15
    6cd2:	0f 93       	push	r16
    6cd4:	1f 93       	push	r17
    6cd6:	cf 93       	push	r28
    6cd8:	df 93       	push	r29
    6cda:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6cdc:	dc 01       	movw	r26, r24
    6cde:	17 96       	adiw	r26, 0x07	; 7
    6ce0:	1c 91       	ld	r17, X
    6ce2:	61 2f       	mov	r22, r17
    6ce4:	70 e0       	ldi	r23, 0x00	; 0
    6ce6:	80 e0       	ldi	r24, 0x00	; 0
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	20 e8       	ldi	r18, 0x80	; 128
    6cec:	33 e3       	ldi	r19, 0x33	; 51
    6cee:	41 ee       	ldi	r20, 0xE1	; 225
    6cf0:	51 e0       	ldi	r21, 0x01	; 1
    6cf2:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6cf6:	5b 01       	movw	r10, r22
    6cf8:	6c 01       	movw	r12, r24
    6cfa:	22 eb       	ldi	r18, 0xB2	; 178
    6cfc:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6cfe:	e1 2f       	mov	r30, r17
    6d00:	f0 e0       	ldi	r31, 0x00	; 0
    6d02:	ee 54       	subi	r30, 0x4E	; 78
    6d04:	f8 4f       	sbci	r31, 0xF8	; 248
    6d06:	1d c0       	rjmp	.+58     	; 0x6d42 <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    6d08:	c9 01       	movw	r24, r18
    6d0a:	83 70       	andi	r24, 0x03	; 3
    6d0c:	90 70       	andi	r25, 0x00	; 0
    6d0e:	89 2b       	or	r24, r25
    6d10:	b1 f4       	brne	.+44     	; 0x6d3e <RTC_TimeToUTCSecs+0x84>
    6d12:	c9 01       	movw	r24, r18
    6d14:	64 e6       	ldi	r22, 0x64	; 100
    6d16:	70 e0       	ldi	r23, 0x00	; 0
    6d18:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6d1c:	89 2b       	or	r24, r25
    6d1e:	39 f4       	brne	.+14     	; 0x6d2e <RTC_TimeToUTCSecs+0x74>
    6d20:	c9 01       	movw	r24, r18
    6d22:	60 e9       	ldi	r22, 0x90	; 144
    6d24:	71 e0       	ldi	r23, 0x01	; 1
    6d26:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6d2a:	89 2b       	or	r24, r25
    6d2c:	41 f4       	brne	.+16     	; 0x6d3e <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6d2e:	80 e8       	ldi	r24, 0x80	; 128
    6d30:	91 e5       	ldi	r25, 0x51	; 81
    6d32:	a1 e0       	ldi	r26, 0x01	; 1
    6d34:	b0 e0       	ldi	r27, 0x00	; 0
    6d36:	a8 0e       	add	r10, r24
    6d38:	b9 1e       	adc	r11, r25
    6d3a:	ca 1e       	adc	r12, r26
    6d3c:	db 1e       	adc	r13, r27
    6d3e:	2f 5f       	subi	r18, 0xFF	; 255
    6d40:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    6d42:	2e 17       	cp	r18, r30
    6d44:	3f 07       	cpc	r19, r31
    6d46:	01 f7       	brne	.-64     	; 0x6d08 <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6d48:	d4 01       	movw	r26, r8
    6d4a:	16 96       	adiw	r26, 0x06	; 6
    6d4c:	8c 91       	ld	r24, X
    6d4e:	48 2e       	mov	r4, r24
    6d50:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    6d52:	c9 01       	movw	r24, r18
    6d54:	64 e6       	ldi	r22, 0x64	; 100
    6d56:	70 e0       	ldi	r23, 0x00	; 0
    6d58:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6d5c:	7c 01       	movw	r14, r24
    6d5e:	c9 01       	movw	r24, r18
    6d60:	60 e9       	ldi	r22, 0x90	; 144
    6d62:	71 e0       	ldi	r23, 0x01	; 1
    6d64:	0e 94 00 59 	call	0xb200	; 0xb200 <__divmodhi4>
    6d68:	8c 01       	movw	r16, r24
    6d6a:	c1 e0       	ldi	r28, 0x01	; 1
    6d6c:	d0 e0       	ldi	r29, 0x00	; 0
    6d6e:	93 e0       	ldi	r25, 0x03	; 3
    6d70:	69 2e       	mov	r6, r25
    6d72:	71 2c       	mov	r7, r1
    6d74:	62 22       	and	r6, r18
    6d76:	73 22       	and	r7, r19
    6d78:	27 c0       	rjmp	.+78     	; 0x6dc8 <RTC_TimeToUTCSecs+0x10e>
    6d7a:	c2 30       	cpi	r28, 0x02	; 2
    6d7c:	d1 05       	cpc	r29, r1
    6d7e:	91 f4       	brne	.+36     	; 0x6da4 <RTC_TimeToUTCSecs+0xea>
    6d80:	61 14       	cp	r6, r1
    6d82:	71 04       	cpc	r7, r1
    6d84:	79 f4       	brne	.+30     	; 0x6da4 <RTC_TimeToUTCSecs+0xea>
    6d86:	e1 14       	cp	r14, r1
    6d88:	f1 04       	cpc	r15, r1
    6d8a:	19 f4       	brne	.+6      	; 0x6d92 <RTC_TimeToUTCSecs+0xd8>
    6d8c:	01 15       	cp	r16, r1
    6d8e:	11 05       	cpc	r17, r1
    6d90:	49 f4       	brne	.+18     	; 0x6da4 <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    6d92:	80 e8       	ldi	r24, 0x80	; 128
    6d94:	9b e3       	ldi	r25, 0x3B	; 59
    6d96:	a6 e2       	ldi	r26, 0x26	; 38
    6d98:	b0 e0       	ldi	r27, 0x00	; 0
    6d9a:	a8 0e       	add	r10, r24
    6d9c:	b9 1e       	adc	r11, r25
    6d9e:	ca 1e       	adc	r12, r26
    6da0:	db 1e       	adc	r13, r27
    6da2:	11 c0       	rjmp	.+34     	; 0x6dc6 <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    6da4:	fe 01       	movw	r30, r28
    6da6:	eb 5a       	subi	r30, 0xAB	; 171
    6da8:	fc 4c       	sbci	r31, 0xCC	; 204
    6daa:	60 81       	ld	r22, Z
    6dac:	70 e0       	ldi	r23, 0x00	; 0
    6dae:	80 e0       	ldi	r24, 0x00	; 0
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	20 e8       	ldi	r18, 0x80	; 128
    6db4:	31 e5       	ldi	r19, 0x51	; 81
    6db6:	41 e0       	ldi	r20, 0x01	; 1
    6db8:	50 e0       	ldi	r21, 0x00	; 0
    6dba:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6dbe:	a6 0e       	add	r10, r22
    6dc0:	b7 1e       	adc	r11, r23
    6dc2:	c8 1e       	adc	r12, r24
    6dc4:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    6dc6:	21 96       	adiw	r28, 0x01	; 1
    6dc8:	c4 15       	cp	r28, r4
    6dca:	d5 05       	cpc	r29, r5
    6dcc:	b4 f2       	brlt	.-84     	; 0x6d7a <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6dce:	d4 01       	movw	r26, r8
    6dd0:	13 96       	adiw	r26, 0x03	; 3
    6dd2:	6c 91       	ld	r22, X
    6dd4:	70 e0       	ldi	r23, 0x00	; 0
    6dd6:	80 e0       	ldi	r24, 0x00	; 0
    6dd8:	90 e0       	ldi	r25, 0x00	; 0
    6dda:	20 e1       	ldi	r18, 0x10	; 16
    6ddc:	3e e0       	ldi	r19, 0x0E	; 14
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	50 e0       	ldi	r21, 0x00	; 0
    6de2:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6de6:	7b 01       	movw	r14, r22
    6de8:	8c 01       	movw	r16, r24
    6dea:	f4 01       	movw	r30, r8
    6dec:	62 81       	ldd	r22, Z+2	; 0x02
    6dee:	70 e0       	ldi	r23, 0x00	; 0
    6df0:	80 e0       	ldi	r24, 0x00	; 0
    6df2:	90 e0       	ldi	r25, 0x00	; 0
    6df4:	2c e3       	ldi	r18, 0x3C	; 60
    6df6:	30 e0       	ldi	r19, 0x00	; 0
    6df8:	40 e0       	ldi	r20, 0x00	; 0
    6dfa:	50 e0       	ldi	r21, 0x00	; 0
    6dfc:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6e00:	e6 0e       	add	r14, r22
    6e02:	f7 1e       	adc	r15, r23
    6e04:	08 1f       	adc	r16, r24
    6e06:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    6e08:	d4 01       	movw	r26, r8
    6e0a:	11 96       	adiw	r26, 0x01	; 1
    6e0c:	8c 91       	ld	r24, X
    6e0e:	11 97       	sbiw	r26, 0x01	; 1
    6e10:	e8 0e       	add	r14, r24
    6e12:	f1 1c       	adc	r15, r1
    6e14:	01 1d       	adc	r16, r1
    6e16:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    6e18:	15 96       	adiw	r26, 0x05	; 5
    6e1a:	6c 91       	ld	r22, X
    6e1c:	70 e0       	ldi	r23, 0x00	; 0
    6e1e:	61 50       	subi	r22, 0x01	; 1
    6e20:	70 40       	sbci	r23, 0x00	; 0
    6e22:	88 27       	eor	r24, r24
    6e24:	77 fd       	sbrc	r23, 7
    6e26:	80 95       	com	r24
    6e28:	98 2f       	mov	r25, r24
    6e2a:	20 e8       	ldi	r18, 0x80	; 128
    6e2c:	31 e5       	ldi	r19, 0x51	; 81
    6e2e:	41 e0       	ldi	r20, 0x01	; 1
    6e30:	50 e0       	ldi	r21, 0x00	; 0
    6e32:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    6e36:	e6 0e       	add	r14, r22
    6e38:	f7 1e       	adc	r15, r23
    6e3a:	08 1f       	adc	r16, r24
    6e3c:	19 1f       	adc	r17, r25
    6e3e:	ea 0c       	add	r14, r10
    6e40:	fb 1c       	adc	r15, r11
    6e42:	0c 1d       	adc	r16, r12
    6e44:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    6e46:	b7 01       	movw	r22, r14
    6e48:	c8 01       	movw	r24, r16
    6e4a:	df 91       	pop	r29
    6e4c:	cf 91       	pop	r28
    6e4e:	1f 91       	pop	r17
    6e50:	0f 91       	pop	r16
    6e52:	ff 90       	pop	r15
    6e54:	ef 90       	pop	r14
    6e56:	df 90       	pop	r13
    6e58:	cf 90       	pop	r12
    6e5a:	bf 90       	pop	r11
    6e5c:	af 90       	pop	r10
    6e5e:	9f 90       	pop	r9
    6e60:	8f 90       	pop	r8
    6e62:	7f 90       	pop	r7
    6e64:	6f 90       	pop	r6
    6e66:	5f 90       	pop	r5
    6e68:	4f 90       	pop	r4
    6e6a:	08 95       	ret

00006e6c <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    6e6c:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    6e6e:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    6e70:	e0 ea       	ldi	r30, 0xA0	; 160
    6e72:	f4 e0       	ldi	r31, 0x04	; 4
    6e74:	46 83       	std	Z+6, r20	; 0x06
    6e76:	fb 01       	movw	r30, r22
    6e78:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6e7a:	a0 ea       	ldi	r26, 0xA0	; 160
    6e7c:	b4 e0       	ldi	r27, 0x04	; 4
    6e7e:	0d c0       	rjmp	.+26     	; 0x6e9a <RTC_sendBytes+0x2e>
    6e80:	80 91 a4 04 	lds	r24, 0x04A4
    6e84:	86 ff       	sbrs	r24, 6
    6e86:	fc cf       	rjmp	.-8      	; 0x6e80 <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    6e88:	80 91 a4 04 	lds	r24, 0x04A4
    6e8c:	84 fd       	sbrc	r24, 4
    6e8e:	07 c0       	rjmp	.+14     	; 0x6e9e <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    6e90:	81 91       	ld	r24, Z+
    6e92:	17 96       	adiw	r26, 0x07	; 7
    6e94:	8c 93       	st	X, r24
    6e96:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    6e98:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    6e9a:	95 17       	cp	r25, r21
    6e9c:	88 f3       	brcs	.-30     	; 0x6e80 <RTC_sendBytes+0x14>
    6e9e:	08 95       	ret

00006ea0 <RTC_setTime>:



} 

void RTC_setTime(void) {
    6ea0:	df 93       	push	r29
    6ea2:	cf 93       	push	r28
    6ea4:	cd b7       	in	r28, 0x3d	; 61
    6ea6:	de b7       	in	r29, 0x3e	; 62
    6ea8:	29 97       	sbiw	r28, 0x09	; 9
    6eaa:	cd bf       	out	0x3d, r28	; 61
    6eac:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    6eae:	50 91 5d 4f 	lds	r21, 0x4F5D
    6eb2:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    6eb4:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    6eb6:	40 91 56 4f 	lds	r20, 0x4F56
    6eba:	84 2f       	mov	r24, r20
    6ebc:	6a e0       	ldi	r22, 0x0A	; 10
    6ebe:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6ec2:	28 2f       	mov	r18, r24
    6ec4:	30 e0       	ldi	r19, 0x00	; 0
    6ec6:	b4 e0       	ldi	r27, 0x04	; 4
    6ec8:	22 0f       	add	r18, r18
    6eca:	33 1f       	adc	r19, r19
    6ecc:	ba 95       	dec	r27
    6ece:	e1 f7       	brne	.-8      	; 0x6ec8 <RTC_setTime+0x28>
    6ed0:	84 2f       	mov	r24, r20
    6ed2:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6ed6:	92 2b       	or	r25, r18
    6ed8:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    6eda:	40 91 57 4f 	lds	r20, 0x4F57
    6ede:	84 2f       	mov	r24, r20
    6ee0:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6ee4:	28 2f       	mov	r18, r24
    6ee6:	30 e0       	ldi	r19, 0x00	; 0
    6ee8:	a4 e0       	ldi	r26, 0x04	; 4
    6eea:	22 0f       	add	r18, r18
    6eec:	33 1f       	adc	r19, r19
    6eee:	aa 95       	dec	r26
    6ef0:	e1 f7       	brne	.-8      	; 0x6eea <RTC_setTime+0x4a>
    6ef2:	84 2f       	mov	r24, r20
    6ef4:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6ef8:	92 2b       	or	r25, r18
    6efa:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    6efc:	40 91 58 4f 	lds	r20, 0x4F58
    6f00:	84 2f       	mov	r24, r20
    6f02:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f06:	28 2f       	mov	r18, r24
    6f08:	30 e0       	ldi	r19, 0x00	; 0
    6f0a:	f4 e0       	ldi	r31, 0x04	; 4
    6f0c:	22 0f       	add	r18, r18
    6f0e:	33 1f       	adc	r19, r19
    6f10:	fa 95       	dec	r31
    6f12:	e1 f7       	brne	.-8      	; 0x6f0c <RTC_setTime+0x6c>
    6f14:	84 2f       	mov	r24, r20
    6f16:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f1a:	92 2b       	or	r25, r18
    6f1c:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    6f1e:	30 91 59 4f 	lds	r19, 0x4F59
    6f22:	83 2f       	mov	r24, r19
    6f24:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f28:	29 2f       	mov	r18, r25
    6f2a:	20 68       	ori	r18, 0x80	; 128
    6f2c:	83 2f       	mov	r24, r19
    6f2e:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f32:	82 95       	swap	r24
    6f34:	80 7f       	andi	r24, 0xF0	; 240
    6f36:	28 2b       	or	r18, r24
    6f38:	85 2f       	mov	r24, r21
    6f3a:	64 e6       	ldi	r22, 0x64	; 100
    6f3c:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f40:	82 95       	swap	r24
    6f42:	88 0f       	add	r24, r24
    6f44:	88 0f       	add	r24, r24
    6f46:	80 7c       	andi	r24, 0xC0	; 192
    6f48:	28 2b       	or	r18, r24
    6f4a:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    6f4c:	80 91 5a 4f 	lds	r24, 0x4F5A
    6f50:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    6f52:	40 91 5b 4f 	lds	r20, 0x4F5B
    6f56:	84 2f       	mov	r24, r20
    6f58:	6a e0       	ldi	r22, 0x0A	; 10
    6f5a:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f5e:	28 2f       	mov	r18, r24
    6f60:	30 e0       	ldi	r19, 0x00	; 0
    6f62:	e4 e0       	ldi	r30, 0x04	; 4
    6f64:	22 0f       	add	r18, r18
    6f66:	33 1f       	adc	r19, r19
    6f68:	ea 95       	dec	r30
    6f6a:	e1 f7       	brne	.-8      	; 0x6f64 <RTC_setTime+0xc4>
    6f6c:	84 2f       	mov	r24, r20
    6f6e:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f72:	92 2b       	or	r25, r18
    6f74:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    6f76:	40 91 5c 4f 	lds	r20, 0x4F5C
    6f7a:	84 2f       	mov	r24, r20
    6f7c:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f80:	28 2f       	mov	r18, r24
    6f82:	30 e0       	ldi	r19, 0x00	; 0
    6f84:	74 e0       	ldi	r23, 0x04	; 4
    6f86:	22 0f       	add	r18, r18
    6f88:	33 1f       	adc	r19, r19
    6f8a:	7a 95       	dec	r23
    6f8c:	e1 f7       	brne	.-8      	; 0x6f86 <RTC_setTime+0xe6>
    6f8e:	84 2f       	mov	r24, r20
    6f90:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f94:	92 2b       	or	r25, r18
    6f96:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    6f98:	85 2f       	mov	r24, r21
    6f9a:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6f9e:	28 2f       	mov	r18, r24
    6fa0:	30 e0       	ldi	r19, 0x00	; 0
    6fa2:	44 e0       	ldi	r20, 0x04	; 4
    6fa4:	22 0f       	add	r18, r18
    6fa6:	33 1f       	adc	r19, r19
    6fa8:	4a 95       	dec	r20
    6faa:	e1 f7       	brne	.-8      	; 0x6fa4 <RTC_setTime+0x104>
    6fac:	85 2f       	mov	r24, r21
    6fae:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    6fb2:	92 2b       	or	r25, r18
    6fb4:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    6fb6:	89 e0       	ldi	r24, 0x09	; 9
    6fb8:	be 01       	movw	r22, r28
    6fba:	6f 5f       	subi	r22, 0xFF	; 255
    6fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    6fbe:	40 ed       	ldi	r20, 0xD0	; 208
    6fc0:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <RTC_sendBytes>
}
    6fc4:	29 96       	adiw	r28, 0x09	; 9
    6fc6:	cd bf       	out	0x3d, r28	; 61
    6fc8:	de bf       	out	0x3e, r29	; 62
    6fca:	cf 91       	pop	r28
    6fcc:	df 91       	pop	r29
    6fce:	08 95       	ret

00006fd0 <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    6fd0:	46 e5       	ldi	r20, 0x56	; 86
    6fd2:	5f e4       	ldi	r21, 0x4F	; 79
    6fd4:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <RTC_UTCSecsToTime>
	RTC_setTime();
    6fd8:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <RTC_setTime>
}
    6fdc:	08 95       	ret

00006fde <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    6fde:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    6fe0:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    6fe2:	e0 ea       	ldi	r30, 0xA0	; 160
    6fe4:	f4 e0       	ldi	r31, 0x04	; 4
    6fe6:	46 83       	std	Z+6, r20	; 0x06
    6fe8:	fb 01       	movw	r30, r22
    6fea:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6fec:	a0 ea       	ldi	r26, 0xA0	; 160
    6fee:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6ff0:	22 e0       	ldi	r18, 0x02	; 2
    6ff2:	0b c0       	rjmp	.+22     	; 0x700a <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    6ff4:	80 91 a4 04 	lds	r24, 0x04A4
    6ff8:	87 ff       	sbrs	r24, 7
    6ffa:	fc cf       	rjmp	.-8      	; 0x6ff4 <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    6ffc:	80 91 a7 04 	lds	r24, 0x04A7
    7000:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    7002:	13 96       	adiw	r26, 0x03	; 3
    7004:	2c 93       	st	X, r18
    7006:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    7008:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    700a:	95 17       	cp	r25, r21
    700c:	98 f3       	brcs	.-26     	; 0x6ff4 <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    700e:	87 e0       	ldi	r24, 0x07	; 7
    7010:	e0 ea       	ldi	r30, 0xA0	; 160
    7012:	f4 e0       	ldi	r31, 0x04	; 4
    7014:	83 83       	std	Z+3, r24	; 0x03

}
    7016:	08 95       	ret

00007018 <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    7018:	0f 93       	push	r16
    701a:	1f 93       	push	r17
    701c:	df 93       	push	r29
    701e:	cf 93       	push	r28
    7020:	cd b7       	in	r28, 0x3d	; 61
    7022:	de b7       	in	r29, 0x3e	; 62
    7024:	28 97       	sbiw	r28, 0x08	; 8
    7026:	cd bf       	out	0x3d, r28	; 61
    7028:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    702a:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    702c:	81 e0       	ldi	r24, 0x01	; 1
    702e:	8e 01       	movw	r16, r28
    7030:	0f 5f       	subi	r16, 0xFF	; 255
    7032:	1f 4f       	sbci	r17, 0xFF	; 255
    7034:	b8 01       	movw	r22, r16
    7036:	40 ed       	ldi	r20, 0xD0	; 208
    7038:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    703c:	88 e0       	ldi	r24, 0x08	; 8
    703e:	b8 01       	movw	r22, r16
    7040:	40 ed       	ldi	r20, 0xD0	; 208
    7042:	0e 94 ef 37 	call	0x6fde	; 0x6fde <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    7046:	49 81       	ldd	r20, Y+1	; 0x01
    7048:	84 2f       	mov	r24, r20
    704a:	82 95       	swap	r24
    704c:	8f 70       	andi	r24, 0x0F	; 15
    704e:	90 e0       	ldi	r25, 0x00	; 0
    7050:	9c 01       	movw	r18, r24
    7052:	63 e0       	ldi	r22, 0x03	; 3
    7054:	22 0f       	add	r18, r18
    7056:	33 1f       	adc	r19, r19
    7058:	6a 95       	dec	r22
    705a:	e1 f7       	brne	.-8      	; 0x7054 <RTC_getTime+0x3c>
    705c:	88 0f       	add	r24, r24
    705e:	99 1f       	adc	r25, r25
    7060:	28 0f       	add	r18, r24
    7062:	39 1f       	adc	r19, r25
    7064:	4f 70       	andi	r20, 0x0F	; 15
    7066:	42 0f       	add	r20, r18
    7068:	40 93 56 4f 	sts	0x4F56, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    706c:	4a 81       	ldd	r20, Y+2	; 0x02
    706e:	84 2f       	mov	r24, r20
    7070:	90 e0       	ldi	r25, 0x00	; 0
    7072:	80 77       	andi	r24, 0x70	; 112
    7074:	90 70       	andi	r25, 0x00	; 0
    7076:	24 e0       	ldi	r18, 0x04	; 4
    7078:	95 95       	asr	r25
    707a:	87 95       	ror	r24
    707c:	2a 95       	dec	r18
    707e:	e1 f7       	brne	.-8      	; 0x7078 <RTC_getTime+0x60>
    7080:	9c 01       	movw	r18, r24
    7082:	03 e0       	ldi	r16, 0x03	; 3
    7084:	22 0f       	add	r18, r18
    7086:	33 1f       	adc	r19, r19
    7088:	0a 95       	dec	r16
    708a:	e1 f7       	brne	.-8      	; 0x7084 <RTC_getTime+0x6c>
    708c:	88 0f       	add	r24, r24
    708e:	99 1f       	adc	r25, r25
    7090:	28 0f       	add	r18, r24
    7092:	39 1f       	adc	r19, r25
    7094:	4f 70       	andi	r20, 0x0F	; 15
    7096:	42 0f       	add	r20, r18
    7098:	40 93 57 4f 	sts	0x4F57, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    709c:	4b 81       	ldd	r20, Y+3	; 0x03
    709e:	84 2f       	mov	r24, r20
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	80 77       	andi	r24, 0x70	; 112
    70a4:	90 70       	andi	r25, 0x00	; 0
    70a6:	b4 e0       	ldi	r27, 0x04	; 4
    70a8:	95 95       	asr	r25
    70aa:	87 95       	ror	r24
    70ac:	ba 95       	dec	r27
    70ae:	e1 f7       	brne	.-8      	; 0x70a8 <RTC_getTime+0x90>
    70b0:	9c 01       	movw	r18, r24
    70b2:	a3 e0       	ldi	r26, 0x03	; 3
    70b4:	22 0f       	add	r18, r18
    70b6:	33 1f       	adc	r19, r19
    70b8:	aa 95       	dec	r26
    70ba:	e1 f7       	brne	.-8      	; 0x70b4 <RTC_getTime+0x9c>
    70bc:	88 0f       	add	r24, r24
    70be:	99 1f       	adc	r25, r25
    70c0:	28 0f       	add	r18, r24
    70c2:	39 1f       	adc	r19, r25
    70c4:	4f 70       	andi	r20, 0x0F	; 15
    70c6:	42 0f       	add	r20, r18
    70c8:	40 93 58 4f 	sts	0x4F58, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    70cc:	4c 81       	ldd	r20, Y+4	; 0x04
    70ce:	64 2f       	mov	r22, r20
    70d0:	70 e0       	ldi	r23, 0x00	; 0
    70d2:	cb 01       	movw	r24, r22
    70d4:	80 73       	andi	r24, 0x30	; 48
    70d6:	90 70       	andi	r25, 0x00	; 0
    70d8:	e4 e0       	ldi	r30, 0x04	; 4
    70da:	95 95       	asr	r25
    70dc:	87 95       	ror	r24
    70de:	ea 95       	dec	r30
    70e0:	e1 f7       	brne	.-8      	; 0x70da <RTC_getTime+0xc2>
    70e2:	9c 01       	movw	r18, r24
    70e4:	53 e0       	ldi	r21, 0x03	; 3
    70e6:	22 0f       	add	r18, r18
    70e8:	33 1f       	adc	r19, r19
    70ea:	5a 95       	dec	r21
    70ec:	e1 f7       	brne	.-8      	; 0x70e6 <RTC_getTime+0xce>
    70ee:	88 0f       	add	r24, r24
    70f0:	99 1f       	adc	r25, r25
    70f2:	28 0f       	add	r18, r24
    70f4:	39 1f       	adc	r19, r25
    70f6:	4f 70       	andi	r20, 0x0F	; 15
    70f8:	42 0f       	add	r20, r18
    70fa:	40 93 59 4f 	sts	0x4F59, r20
	time.Wday = timeData[4];
    70fe:	8d 81       	ldd	r24, Y+5	; 0x05
    7100:	80 93 5a 4f 	sts	0x4F5A, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    7104:	4e 81       	ldd	r20, Y+6	; 0x06
    7106:	84 2f       	mov	r24, r20
    7108:	90 e0       	ldi	r25, 0x00	; 0
    710a:	80 73       	andi	r24, 0x30	; 48
    710c:	90 70       	andi	r25, 0x00	; 0
    710e:	14 e0       	ldi	r17, 0x04	; 4
    7110:	95 95       	asr	r25
    7112:	87 95       	ror	r24
    7114:	1a 95       	dec	r17
    7116:	e1 f7       	brne	.-8      	; 0x7110 <RTC_getTime+0xf8>
    7118:	9c 01       	movw	r18, r24
    711a:	b3 e0       	ldi	r27, 0x03	; 3
    711c:	22 0f       	add	r18, r18
    711e:	33 1f       	adc	r19, r19
    7120:	ba 95       	dec	r27
    7122:	e1 f7       	brne	.-8      	; 0x711c <RTC_getTime+0x104>
    7124:	88 0f       	add	r24, r24
    7126:	99 1f       	adc	r25, r25
    7128:	28 0f       	add	r18, r24
    712a:	39 1f       	adc	r19, r25
    712c:	4f 70       	andi	r20, 0x0F	; 15
    712e:	42 0f       	add	r20, r18
    7130:	40 93 5b 4f 	sts	0x4F5B, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    7134:	4f 81       	ldd	r20, Y+7	; 0x07
    7136:	84 2f       	mov	r24, r20
    7138:	90 e0       	ldi	r25, 0x00	; 0
    713a:	80 71       	andi	r24, 0x10	; 16
    713c:	90 70       	andi	r25, 0x00	; 0
    713e:	f4 e0       	ldi	r31, 0x04	; 4
    7140:	95 95       	asr	r25
    7142:	87 95       	ror	r24
    7144:	fa 95       	dec	r31
    7146:	e1 f7       	brne	.-8      	; 0x7140 <RTC_getTime+0x128>
    7148:	9c 01       	movw	r18, r24
    714a:	e3 e0       	ldi	r30, 0x03	; 3
    714c:	22 0f       	add	r18, r18
    714e:	33 1f       	adc	r19, r19
    7150:	ea 95       	dec	r30
    7152:	e1 f7       	brne	.-8      	; 0x714c <RTC_getTime+0x134>
    7154:	88 0f       	add	r24, r24
    7156:	99 1f       	adc	r25, r25
    7158:	28 0f       	add	r18, r24
    715a:	39 1f       	adc	r19, r25
    715c:	4f 70       	andi	r20, 0x0F	; 15
    715e:	42 0f       	add	r20, r18
    7160:	40 93 5c 4f 	sts	0x4F5C, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    7164:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    7166:	42 2f       	mov	r20, r18
    7168:	4f 70       	andi	r20, 0x0F	; 15
    716a:	42 5e       	subi	r20, 0xE2	; 226
    716c:	60 75       	andi	r22, 0x50	; 80
    716e:	70 70       	andi	r23, 0x00	; 0
    7170:	86 e0       	ldi	r24, 0x06	; 6
    7172:	75 95       	asr	r23
    7174:	67 95       	ror	r22
    7176:	8a 95       	dec	r24
    7178:	e1 f7       	brne	.-8      	; 0x7172 <RTC_getTime+0x15a>
    717a:	84 e6       	ldi	r24, 0x64	; 100
    717c:	90 e0       	ldi	r25, 0x00	; 0
    717e:	fc 01       	movw	r30, r24
    7180:	6e 9f       	mul	r22, r30
    7182:	c0 01       	movw	r24, r0
    7184:	6f 9f       	mul	r22, r31
    7186:	90 0d       	add	r25, r0
    7188:	7e 9f       	mul	r23, r30
    718a:	90 0d       	add	r25, r0
    718c:	11 24       	eor	r1, r1
    718e:	48 0f       	add	r20, r24
    7190:	22 95       	swap	r18
    7192:	2f 70       	andi	r18, 0x0F	; 15
    7194:	30 e0       	ldi	r19, 0x00	; 0
    7196:	c9 01       	movw	r24, r18
    7198:	03 e0       	ldi	r16, 0x03	; 3
    719a:	88 0f       	add	r24, r24
    719c:	99 1f       	adc	r25, r25
    719e:	0a 95       	dec	r16
    71a0:	e1 f7       	brne	.-8      	; 0x719a <RTC_getTime+0x182>
    71a2:	22 0f       	add	r18, r18
    71a4:	33 1f       	adc	r19, r19
    71a6:	82 0f       	add	r24, r18
    71a8:	93 1f       	adc	r25, r19
    71aa:	48 0f       	add	r20, r24
    71ac:	40 93 5d 4f 	sts	0x4F5D, r20




} 
    71b0:	28 96       	adiw	r28, 0x08	; 8
    71b2:	cd bf       	out	0x3d, r28	; 61
    71b4:	de bf       	out	0x3e, r29	; 62
    71b6:	cf 91       	pop	r28
    71b8:	df 91       	pop	r29
    71ba:	1f 91       	pop	r17
    71bc:	0f 91       	pop	r16
    71be:	08 95       	ret

000071c0 <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    71c0:	0e 94 0c 38 	call	0x7018	; 0x7018 <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    71c4:	86 e5       	ldi	r24, 0x56	; 86
    71c6:	9f e4       	ldi	r25, 0x4F	; 79
    71c8:	0e 94 5d 36 	call	0x6cba	; 0x6cba <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    71cc:	08 95       	ret

000071ce <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    71ce:	0f 93       	push	r16
    71d0:	df 93       	push	r29
    71d2:	cf 93       	push	r28
    71d4:	0f 92       	push	r0
    71d6:	cd b7       	in	r28, 0x3d	; 61
    71d8:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    71da:	80 ec       	ldi	r24, 0xC0	; 192
    71dc:	e0 e5       	ldi	r30, 0x50	; 80
    71de:	f0 e0       	ldi	r31, 0x00	; 0
    71e0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    71e2:	80 91 50 00 	lds	r24, 0x0050
    71e6:	88 60       	ori	r24, 0x08	; 8
    71e8:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    71ec:	80 91 51 00 	lds	r24, 0x0051
    71f0:	83 ff       	sbrs	r24, 3
    71f2:	fc cf       	rjmp	.-8      	; 0x71ec <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    71f4:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    71f8:	8f b7       	in	r24, 0x3f	; 63
    71fa:	89 83       	std	Y+1, r24	; 0x01
    cli();
    71fc:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    71fe:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7200:	28 7f       	andi	r18, 0xF8	; 248
    7202:	23 60       	ori	r18, 0x03	; 3
    7204:	80 e4       	ldi	r24, 0x40	; 64
    7206:	90 e0       	ldi	r25, 0x00	; 0
    7208:	fc 01       	movw	r30, r24
    720a:	08 ed       	ldi	r16, 0xD8	; 216
    720c:	04 bf       	out	0x34, r16	; 52
    720e:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    7210:	89 81       	ldd	r24, Y+1	; 0x01
    7212:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    7214:	80 91 50 00 	lds	r24, 0x0050
    7218:	8e 7f       	andi	r24, 0xFE	; 254
    721a:	80 93 50 00 	sts	0x0050, r24
}
    721e:	0f 90       	pop	r0
    7220:	cf 91       	pop	r28
    7222:	df 91       	pop	r29
    7224:	0f 91       	pop	r16
    7226:	08 95       	ret

00007228 <Disable_JTAG>:

void Disable_JTAG(void){
    7228:	0f 93       	push	r16
    722a:	df 93       	push	r29
    722c:	cf 93       	push	r28
    722e:	0f 92       	push	r0
    7230:	cd b7       	in	r28, 0x3d	; 61
    7232:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    7234:	8f b7       	in	r24, 0x3f	; 63
    7236:	89 83       	std	Y+1, r24	; 0x01
    cli();
    7238:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    723a:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    723c:	21 e0       	ldi	r18, 0x01	; 1
    723e:	86 e9       	ldi	r24, 0x96	; 150
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	fc 01       	movw	r30, r24
    7244:	08 ed       	ldi	r16, 0xD8	; 216
    7246:	04 bf       	out	0x34, r16	; 52
    7248:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    724a:	89 81       	ldd	r24, Y+1	; 0x01
    724c:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    724e:	0f 90       	pop	r0
    7250:	cf 91       	pop	r28
    7252:	df 91       	pop	r29
    7254:	0f 91       	pop	r16
    7256:	08 95       	ret

00007258 <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    7258:	e0 e0       	ldi	r30, 0x00	; 0
    725a:	f1 e0       	ldi	r31, 0x01	; 1
    725c:	80 81       	ld	r24, Z
    725e:	80 68       	ori	r24, 0x80	; 128
    7260:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;							
    7262:	82 89       	ldd	r24, Z+18	; 0x12
    7264:	85 60       	ori	r24, 0x05	; 5
    7266:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    7268:	8b e8       	ldi	r24, 0x8B	; 139
    726a:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    726c:	80 e0       	ldi	r24, 0x00	; 0
    726e:	94 e0       	ldi	r25, 0x04	; 4
    7270:	84 8b       	std	Z+20, r24	; 0x14
    7272:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    7274:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    7276:	80 ea       	ldi	r24, 0xA0	; 160
    7278:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    727a:	8a e0       	ldi	r24, 0x0A	; 10
    727c:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    727e:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    7280:	80 e7       	ldi	r24, 0x70	; 112
    7282:	9d e3       	ldi	r25, 0x3D	; 61
    7284:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    7286:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    7288:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    728a:	80 89       	ldd	r24, Z+16	; 0x10
    728c:	84 6a       	ori	r24, 0xA4	; 164
    728e:	80 8b       	std	Z+16, r24	; 0x10
		
}
    7290:	08 95       	ret

00007292 <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    7292:	e0 ea       	ldi	r30, 0xA0	; 160
    7294:	f0 e0       	ldi	r31, 0x00	; 0
    7296:	82 81       	ldd	r24, Z+2	; 0x02
    7298:	87 60       	ori	r24, 0x07	; 7
    729a:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    729c:	78 94       	sei
}
    729e:	08 95       	ret

000072a0 <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 14400
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	TCD0.PER = 1440;
    72a0:	e0 e0       	ldi	r30, 0x00	; 0
    72a2:	f9 e0       	ldi	r31, 0x09	; 9
    72a4:	80 ea       	ldi	r24, 0xA0	; 160
    72a6:	95 e0       	ldi	r25, 0x05	; 5
    72a8:	86 a3       	std	Z+38, r24	; 0x26
    72aa:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    72ac:	80 81       	ld	r24, Z
    72ae:	80 7f       	andi	r24, 0xF0	; 240
    72b0:	87 60       	ori	r24, 0x07	; 7
    72b2:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    72b4:	86 81       	ldd	r24, Z+6	; 0x06
    72b6:	8c 7f       	andi	r24, 0xFC	; 252
    72b8:	81 60       	ori	r24, 0x01	; 1
    72ba:	86 83       	std	Z+6, r24	; 0x06
}
    72bc:	08 95       	ret

000072be <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    72be:	e0 e4       	ldi	r30, 0x40	; 64
    72c0:	fa e0       	ldi	r31, 0x0A	; 10
    72c2:	80 e0       	ldi	r24, 0x00	; 0
    72c4:	99 e0       	ldi	r25, 0x09	; 9
    72c6:	86 a3       	std	Z+38, r24	; 0x26
    72c8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    72ca:	80 81       	ld	r24, Z
    72cc:	80 7f       	andi	r24, 0xF0	; 240
    72ce:	85 60       	ori	r24, 0x05	; 5
    72d0:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    72d2:	86 81       	ldd	r24, Z+6	; 0x06
    72d4:	8c 7f       	andi	r24, 0xFC	; 252
    72d6:	82 60       	ori	r24, 0x02	; 2
    72d8:	86 83       	std	Z+6, r24	; 0x06

}
    72da:	08 95       	ret

000072dc <SD_WriteRTCBlock>:
	    okToGetRemainingSpace = false;
	}
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    72dc:	af 92       	push	r10
    72de:	bf 92       	push	r11
    72e0:	cf 92       	push	r12
    72e2:	df 92       	push	r13
    72e4:	ef 92       	push	r14
    72e6:	ff 92       	push	r15
    72e8:	0f 93       	push	r16
    72ea:	1f 93       	push	r17
    72ec:	7b 01       	movw	r14, r22
    72ee:	8c 01       	movw	r16, r24
    72f0:	59 01       	movw	r10, r18
    72f2:	6a 01       	movw	r12, r20


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    72f4:	8f ef       	ldi	r24, 0xFF	; 255
    72f6:	9f ef       	ldi	r25, 0xFF	; 255
    72f8:	af ef       	ldi	r26, 0xFF	; 255
    72fa:	bf ef       	ldi	r27, 0xFF	; 255
    72fc:	80 93 36 57 	sts	0x5736, r24
    7300:	90 93 37 57 	sts	0x5737, r25
    7304:	a0 93 38 57 	sts	0x5738, r26
    7308:	b0 93 39 57 	sts	0x5739, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    730c:	6c e4       	ldi	r22, 0x4C	; 76
    730e:	74 e7       	ldi	r23, 0x74	; 116
    7310:	8e ed       	ldi	r24, 0xDE	; 222
    7312:	90 eb       	ldi	r25, 0xB0	; 176
    7314:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(27);				// record size  
    7318:	6b e1       	ldi	r22, 0x1B	; 27
    731a:	70 e0       	ldi	r23, 0x00	; 0
    731c:	80 e0       	ldi	r24, 0x00	; 0
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(2); 		// record type  
    7324:	82 e0       	ldi	r24, 0x02	; 2
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    732c:	c8 01       	movw	r24, r16
    732e:	b7 01       	movw	r22, r14
    7330:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    7334:	c6 01       	movw	r24, r12
    7336:	b5 01       	movw	r22, r10
    7338:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write8(0);
    733c:	80 e0       	ldi	r24, 0x00	; 0
    733e:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    7342:	60 e0       	ldi	r22, 0x00	; 0
    7344:	70 e0       	ldi	r23, 0x00	; 0
    7346:	80 e0       	ldi	r24, 0x00	; 0
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_WriteCRC();			      // CRC			
    734e:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7352:	8e e5       	ldi	r24, 0x5E	; 94
    7354:	9f e4       	ldi	r25, 0x4F	; 79
    7356:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    735a:	1f 91       	pop	r17
    735c:	0f 91       	pop	r16
    735e:	ff 90       	pop	r15
    7360:	ef 90       	pop	r14
    7362:	df 90       	pop	r13
    7364:	cf 90       	pop	r12
    7366:	bf 90       	pop	r11
    7368:	af 90       	pop	r10
    736a:	08 95       	ret

0000736c <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    736c:	20 91 f0 33 	lds	r18, 0x33F0
    7370:	30 91 f1 33 	lds	r19, 0x33F1
    7374:	80 91 ee 33 	lds	r24, 0x33EE
    7378:	90 91 ef 33 	lds	r25, 0x33EF
    737c:	28 17       	cp	r18, r24
    737e:	39 07       	cpc	r19, r25
    7380:	41 f4       	brne	.+16     	; 0x7392 <Rs232_To_Debug+0x26>
    7382:	f4 cf       	rjmp	.-24     	; 0x736c <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7384:	80 91 a1 08 	lds	r24, 0x08A1
    7388:	85 ff       	sbrs	r24, 5
    738a:	fc cf       	rjmp	.-8      	; 0x7384 <Rs232_To_Debug+0x18>
	Debug_Usart.DATA = data;	
    738c:	90 93 a0 08 	sts	0x08A0, r25
    7390:	ed cf       	rjmp	.-38     	; 0x736c <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	0e 94 20 03 	call	0x640	; 0x640 <Rs232_GetByte>
    7398:	98 2f       	mov	r25, r24
    739a:	f4 cf       	rjmp	.-24     	; 0x7384 <Rs232_To_Debug+0x18>

0000739c <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    739c:	ef 92       	push	r14
    739e:	ff 92       	push	r15
    73a0:	0f 93       	push	r16
    73a2:	1f 93       	push	r17
    73a4:	cf 93       	push	r28
    73a6:	df 93       	push	r29
    73a8:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    73aa:	6e e5       	ldi	r22, 0x5E	; 94
    73ac:	7f e4       	ldi	r23, 0x4F	; 79
    73ae:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
    73b2:	60 e0       	ldi	r22, 0x00	; 0
    73b4:	70 e0       	ldi	r23, 0x00	; 0
    73b6:	3b c0       	rjmp	.+118    	; 0x742e <SD_WriteString+0x92>
         } 
     }*/


    for (uint16_t i=0; i<strlen(string); i++){
      CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    73b8:	e0 90 36 57 	lds	r14, 0x5736
    73bc:	f0 90 37 57 	lds	r15, 0x5737
    73c0:	00 91 38 57 	lds	r16, 0x5738
    73c4:	10 91 39 57 	lds	r17, 0x5739
    73c8:	20 91 36 57 	lds	r18, 0x5736
    73cc:	30 91 37 57 	lds	r19, 0x5737
    73d0:	40 91 38 57 	lds	r20, 0x5738
    73d4:	50 91 39 57 	lds	r21, 0x5739
    73d8:	30 70       	andi	r19, 0x00	; 0
    73da:	40 70       	andi	r20, 0x00	; 0
    73dc:	50 70       	andi	r21, 0x00	; 0
    73de:	fe 01       	movw	r30, r28
    73e0:	e6 0f       	add	r30, r22
    73e2:	f7 1f       	adc	r31, r23
    73e4:	80 81       	ld	r24, Z
    73e6:	90 e0       	ldi	r25, 0x00	; 0
    73e8:	a0 e0       	ldi	r26, 0x00	; 0
    73ea:	b0 e0       	ldi	r27, 0x00	; 0
    73ec:	28 27       	eor	r18, r24
    73ee:	39 27       	eor	r19, r25
    73f0:	4a 27       	eor	r20, r26
    73f2:	5b 27       	eor	r21, r27
    73f4:	22 0f       	add	r18, r18
    73f6:	33 1f       	adc	r19, r19
    73f8:	22 0f       	add	r18, r18
    73fa:	33 1f       	adc	r19, r19
    73fc:	20 5e       	subi	r18, 0xE0	; 224
    73fe:	33 4d       	sbci	r19, 0xD3	; 211
    7400:	ef 2c       	mov	r14, r15
    7402:	f0 2e       	mov	r15, r16
    7404:	01 2f       	mov	r16, r17
    7406:	11 27       	eor	r17, r17
    7408:	f9 01       	movw	r30, r18
    740a:	80 81       	ld	r24, Z
    740c:	91 81       	ldd	r25, Z+1	; 0x01
    740e:	a2 81       	ldd	r26, Z+2	; 0x02
    7410:	b3 81       	ldd	r27, Z+3	; 0x03
    7412:	e8 26       	eor	r14, r24
    7414:	f9 26       	eor	r15, r25
    7416:	0a 27       	eor	r16, r26
    7418:	1b 27       	eor	r17, r27
    741a:	e0 92 36 57 	sts	0x5736, r14
    741e:	f0 92 37 57 	sts	0x5737, r15
    7422:	00 93 38 57 	sts	0x5738, r16
    7426:	10 93 39 57 	sts	0x5739, r17
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     }*/


    for (uint16_t i=0; i<strlen(string); i++){
    742a:	6f 5f       	subi	r22, 0xFF	; 255
    742c:	7f 4f       	sbci	r23, 0xFF	; 255
    742e:	fe 01       	movw	r30, r28
    7430:	01 90       	ld	r0, Z+
    7432:	00 20       	and	r0, r0
    7434:	e9 f7       	brne	.-6      	; 0x7430 <SD_WriteString+0x94>
    7436:	31 97       	sbiw	r30, 0x01	; 1
    7438:	ec 1b       	sub	r30, r28
    743a:	fd 0b       	sbc	r31, r29
    743c:	6e 17       	cp	r22, r30
    743e:	7f 07       	cpc	r23, r31
    7440:	08 f4       	brcc	.+2      	; 0x7444 <SD_WriteString+0xa8>
    7442:	ba cf       	rjmp	.-140    	; 0x73b8 <SD_WriteString+0x1c>
      CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }

}
    7444:	df 91       	pop	r29
    7446:	cf 91       	pop	r28
    7448:	1f 91       	pop	r17
    744a:	0f 91       	pop	r16
    744c:	ff 90       	pop	r15
    744e:	ef 90       	pop	r14
    7450:	08 95       	ret

00007452 <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    7452:	0f 93       	push	r16
    7454:	1f 93       	push	r17


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7456:	8f ef       	ldi	r24, 0xFF	; 255
    7458:	9f ef       	ldi	r25, 0xFF	; 255
    745a:	af ef       	ldi	r26, 0xFF	; 255
    745c:	bf ef       	ldi	r27, 0xFF	; 255
    745e:	80 93 36 57 	sts	0x5736, r24
    7462:	90 93 37 57 	sts	0x5737, r25
    7466:	a0 93 38 57 	sts	0x5738, r26
    746a:	b0 93 39 57 	sts	0x5739, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    746e:	6c e4       	ldi	r22, 0x4C	; 76
    7470:	74 e7       	ldi	r23, 0x74	; 116
    7472:	8e ed       	ldi	r24, 0xDE	; 222
    7474:	90 eb       	ldi	r25, 0xB0	; 176
    7476:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(61);				// record size
    747a:	6d e3       	ldi	r22, 0x3D	; 61
    747c:	70 e0       	ldi	r23, 0x00	; 0
    747e:	80 e0       	ldi	r24, 0x00	; 0
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(3); 		// record type
    7486:	83 e0       	ldi	r24, 0x03	; 3
    7488:	90 e0       	ldi	r25, 0x00	; 0
    748a:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    748e:	60 91 ce 33 	lds	r22, 0x33CE
    7492:	70 91 cf 33 	lds	r23, 0x33CF
    7496:	80 91 d0 33 	lds	r24, 0x33D0
    749a:	90 91 d1 33 	lds	r25, 0x33D1
    749e:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    74a2:	60 e0       	ldi	r22, 0x00	; 0
    74a4:	70 e8       	ldi	r23, 0x80	; 128
    74a6:	87 e9       	ldi	r24, 0x97	; 151
    74a8:	96 e0       	ldi	r25, 0x06	; 6
    74aa:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(1);												// number of samples
    74ae:	61 e0       	ldi	r22, 0x01	; 1
    74b0:	70 e0       	ldi	r23, 0x00	; 0
    74b2:	80 e0       	ldi	r24, 0x00	; 0
    74b4:	90 e0       	ldi	r25, 0x00	; 0
    74b6:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_WriteString("Air_Small");
    74ba:	83 e3       	ldi	r24, 0x33	; 51
    74bc:	90 e2       	ldi	r25, 0x20	; 32
    74be:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    74c2:	89 e0       	ldi	r24, 0x09	; 9
    74c4:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("32");
    74c8:	0d e3       	ldi	r16, 0x3D	; 61
    74ca:	10 e2       	ldi	r17, 0x20	; 32
    74cc:	c8 01       	movw	r24, r16
    74ce:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    74d2:	8a e0       	ldi	r24, 0x0A	; 10
    74d4:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("Air_Large");
    74d8:	80 e4       	ldi	r24, 0x40	; 64
    74da:	90 e2       	ldi	r25, 0x20	; 32
    74dc:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    74e0:	89 e0       	ldi	r24, 0x09	; 9
    74e2:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("32");
    74e6:	c8 01       	movw	r24, r16
    74e8:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    74ec:	8a e0       	ldi	r24, 0x0A	; 10
    74ee:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	SD_Write8(0x00);
    74f2:	80 e0       	ldi	r24, 0x00	; 0
    74f4:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	SD_Write32(smallCount);
    74f8:	60 91 da 3c 	lds	r22, 0x3CDA
    74fc:	70 91 db 3c 	lds	r23, 0x3CDB
    7500:	80 91 dc 3c 	lds	r24, 0x3CDC
    7504:	90 91 dd 3c 	lds	r25, 0x3CDD
    7508:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(largeCount);
    750c:	60 91 0c 5c 	lds	r22, 0x5C0C
    7510:	70 91 0d 5c 	lds	r23, 0x5C0D
    7514:	80 91 0e 5c 	lds	r24, 0x5C0E
    7518:	90 91 0f 5c 	lds	r25, 0x5C0F
    751c:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_WriteCRC();			// CRC
    7520:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>

	f_sync(&Log_File);
    7524:	8e e5       	ldi	r24, 0x5E	; 94
    7526:	9f e4       	ldi	r25, 0x4F	; 79
    7528:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    752c:	1f 91       	pop	r17
    752e:	0f 91       	pop	r16
    7530:	08 95       	ret

00007532 <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    7532:	1f 93       	push	r17
    7534:	cf 93       	push	r28
    7536:	df 93       	push	r29
    7538:	18 2f       	mov	r17, r24
    753a:	8f ef       	ldi	r24, 0xFF	; 255
    753c:	9f ef       	ldi	r25, 0xFF	; 255
    753e:	af ef       	ldi	r26, 0xFF	; 255
    7540:	bf ef       	ldi	r27, 0xFF	; 255
    7542:	80 93 36 57 	sts	0x5736, r24
    7546:	90 93 37 57 	sts	0x5737, r25
    754a:	a0 93 38 57 	sts	0x5738, r26
    754e:	b0 93 39 57 	sts	0x5739, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7552:	6c e4       	ldi	r22, 0x4C	; 76
    7554:	74 e7       	ldi	r23, 0x74	; 116
    7556:	8e ed       	ldi	r24, 0xDE	; 222
    7558:	90 eb       	ldi	r25, 0xB0	; 176
    755a:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(244);				// record size
    755e:	64 ef       	ldi	r22, 0xF4	; 244
    7560:	70 e0       	ldi	r23, 0x00	; 0
    7562:	80 e0       	ldi	r24, 0x00	; 0
    7564:	90 e0       	ldi	r25, 0x00	; 0
    7566:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(3); 		// record type
    756a:	83 e0       	ldi	r24, 0x03	; 3
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

														// payload
	if(bufferNumber == 1){
    7572:	11 30       	cpi	r17, 0x01	; 1
    7574:	49 f4       	brne	.+18     	; 0x7588 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    7576:	60 91 c6 33 	lds	r22, 0x33C6
    757a:	70 91 c7 33 	lds	r23, 0x33C7
    757e:	80 91 c8 33 	lds	r24, 0x33C8
    7582:	90 91 c9 33 	lds	r25, 0x33C9
    7586:	08 c0       	rjmp	.+16     	; 0x7598 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    7588:	60 91 ca 33 	lds	r22, 0x33CA
    758c:	70 91 cb 33 	lds	r23, 0x33CB
    7590:	80 91 cc 33 	lds	r24, 0x33CC
    7594:	90 91 cd 33 	lds	r25, 0x33CD
    7598:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    759c:	60 e0       	ldi	r22, 0x00	; 0
    759e:	70 e2       	ldi	r23, 0x20	; 32
    75a0:	8c e1       	ldi	r24, 0x1C	; 28
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(10);												// number of samples
    75a8:	6a e0       	ldi	r22, 0x0A	; 10
    75aa:	70 e0       	ldi	r23, 0x00	; 0
    75ac:	80 e0       	ldi	r24, 0x00	; 0
    75ae:	90 e0       	ldi	r25, 0x00	; 0
    75b0:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_WriteString("Light_Green");
    75b4:	8a e4       	ldi	r24, 0x4A	; 74
    75b6:	90 e2       	ldi	r25, 0x20	; 32
    75b8:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    75bc:	89 e0       	ldi	r24, 0x09	; 9
    75be:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("32");
    75c2:	8d e3       	ldi	r24, 0x3D	; 61
    75c4:	90 e2       	ldi	r25, 0x20	; 32
    75c6:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    75ca:	8a e0       	ldi	r24, 0x0A	; 10
    75cc:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("Light_Red");
    75d0:	86 e5       	ldi	r24, 0x56	; 86
    75d2:	90 e2       	ldi	r25, 0x20	; 32
    75d4:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    75d8:	89 e0       	ldi	r24, 0x09	; 9
    75da:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("32");
    75de:	8d e3       	ldi	r24, 0x3D	; 61
    75e0:	90 e2       	ldi	r25, 0x20	; 32
    75e2:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    75e6:	8a e0       	ldi	r24, 0x0A	; 10
    75e8:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("Light_Blue");
    75ec:	80 e6       	ldi	r24, 0x60	; 96
    75ee:	90 e2       	ldi	r25, 0x20	; 32
    75f0:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    75f4:	89 e0       	ldi	r24, 0x09	; 9
    75f6:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("32");
    75fa:	8d e3       	ldi	r24, 0x3D	; 61
    75fc:	90 e2       	ldi	r25, 0x20	; 32
    75fe:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    7602:	8a e0       	ldi	r24, 0x0A	; 10
    7604:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("Light_Clear");
    7608:	8b e6       	ldi	r24, 0x6B	; 107
    760a:	90 e2       	ldi	r25, 0x20	; 32
    760c:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    7610:	89 e0       	ldi	r24, 0x09	; 9
    7612:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("32");
    7616:	8d e3       	ldi	r24, 0x3D	; 61
    7618:	90 e2       	ldi	r25, 0x20	; 32
    761a:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    761e:	8a e0       	ldi	r24, 0x0A	; 10
    7620:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	SD_Write8(0x00);
    7624:	80 e0       	ldi	r24, 0x00	; 0
    7626:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	if(bufferNumber == 1){
    762a:	11 30       	cpi	r17, 0x01	; 1
    762c:	69 f4       	brne	.+26     	; 0x7648 <SD_WriteLightBuffer+0x116>
    762e:	ca e3       	ldi	r28, 0x3A	; 58
    7630:	db e5       	ldi	r29, 0x5B	; 91
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    7632:	69 91       	ld	r22, Y+
    7634:	79 91       	ld	r23, Y+
    7636:	89 91       	ld	r24, Y+
    7638:	99 91       	ld	r25, Y+
    763a:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    763e:	8b e5       	ldi	r24, 0x5B	; 91
    7640:	ca 3d       	cpi	r28, 0xDA	; 218
    7642:	d8 07       	cpc	r29, r24
    7644:	b1 f7       	brne	.-20     	; 0x7632 <SD_WriteLightBuffer+0x100>
    7646:	0c c0       	rjmp	.+24     	; 0x7660 <SD_WriteLightBuffer+0x12e>
    7648:	cc e9       	ldi	r28, 0x9C	; 156
    764a:	d5 e4       	ldi	r29, 0x45	; 69
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    764c:	69 91       	ld	r22, Y+
    764e:	79 91       	ld	r23, Y+
    7650:	89 91       	ld	r24, Y+
    7652:	99 91       	ld	r25, Y+
    7654:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    7658:	86 e4       	ldi	r24, 0x46	; 70
    765a:	cc 33       	cpi	r28, 0x3C	; 60
    765c:	d8 07       	cpc	r29, r24
    765e:	b1 f7       	brne	.-20     	; 0x764c <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7660:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>

	f_sync(&Log_File);
    7664:	8e e5       	ldi	r24, 0x5E	; 94
    7666:	9f e4       	ldi	r25, 0x4F	; 79
    7668:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    766c:	df 91       	pop	r29
    766e:	cf 91       	pop	r28
    7670:	1f 91       	pop	r17
    7672:	08 95       	ret

00007674 <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    7674:	1f 93       	push	r17
    7676:	18 2f       	mov	r17, r24
    7678:	8f ef       	ldi	r24, 0xFF	; 255
    767a:	9f ef       	ldi	r25, 0xFF	; 255
    767c:	af ef       	ldi	r26, 0xFF	; 255
    767e:	bf ef       	ldi	r27, 0xFF	; 255
    7680:	80 93 36 57 	sts	0x5736, r24
    7684:	90 93 37 57 	sts	0x5737, r25
    7688:	a0 93 38 57 	sts	0x5738, r26
    768c:	b0 93 39 57 	sts	0x5739, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7690:	6c e4       	ldi	r22, 0x4C	; 76
    7692:	74 e7       	ldi	r23, 0x74	; 116
    7694:	8e ed       	ldi	r24, 0xDE	; 222
    7696:	90 eb       	ldi	r25, 0xB0	; 176
    7698:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    769c:	60 e1       	ldi	r22, 0x10	; 16
    769e:	74 e0       	ldi	r23, 0x04	; 4
    76a0:	80 e0       	ldi	r24, 0x00	; 0
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(3); 									// record type
    76a8:	83 e0       	ldi	r24, 0x03	; 3
    76aa:	90 e0       	ldi	r25, 0x00	; 0
    76ac:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

														// payload
	if(bufferNumber == 1){
    76b0:	11 30       	cpi	r17, 0x01	; 1
    76b2:	49 f4       	brne	.+18     	; 0x76c6 <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    76b4:	60 91 be 33 	lds	r22, 0x33BE
    76b8:	70 91 bf 33 	lds	r23, 0x33BF
    76bc:	80 91 c0 33 	lds	r24, 0x33C0
    76c0:	90 91 c1 33 	lds	r25, 0x33C1
    76c4:	08 c0       	rjmp	.+16     	; 0x76d6 <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    76c6:	60 91 c2 33 	lds	r22, 0x33C2
    76ca:	70 91 c3 33 	lds	r23, 0x33C3
    76ce:	80 91 c4 33 	lds	r24, 0x33C4
    76d2:	90 91 c5 33 	lds	r25, 0x33C5
    76d6:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    76da:	60 e0       	ldi	r22, 0x00	; 0
    76dc:	71 e0       	ldi	r23, 0x01	; 1
    76de:	80 e0       	ldi	r24, 0x00	; 0
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    76e6:	68 ee       	ldi	r22, 0xE8	; 232
    76e8:	73 e0       	ldi	r23, 0x03	; 3
    76ea:	80 e0       	ldi	r24, 0x00	; 0
    76ec:	90 e0       	ldi	r25, 0x00	; 0
    76ee:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_WriteString("Microphone");
    76f2:	87 e7       	ldi	r24, 0x77	; 119
    76f4:	90 e2       	ldi	r25, 0x20	; 32
    76f6:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    76fa:	89 e0       	ldi	r24, 0x09	; 9
    76fc:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("8");
    7700:	82 e8       	ldi	r24, 0x82	; 130
    7702:	90 e2       	ldi	r25, 0x20	; 32
    7704:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    7708:	8a e0       	ldi	r24, 0x0A	; 10
    770a:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_Write8(0x00);
    770e:	80 e0       	ldi	r24, 0x00	; 0
    7710:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	if(bufferNumber == 1){
    7714:	11 30       	cpi	r17, 0x01	; 1
    7716:	19 f4       	brne	.+6      	; 0x771e <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    7718:	8e e6       	ldi	r24, 0x6E	; 110
    771a:	96 e4       	ldi	r25, 0x46	; 70
    771c:	02 c0       	rjmp	.+4      	; 0x7722 <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    771e:	80 e7       	ldi	r24, 0x70	; 112
    7720:	91 e4       	ldi	r25, 0x41	; 65
    7722:	68 ee       	ldi	r22, 0xE8	; 232
    7724:	73 e0       	ldi	r23, 0x03	; 3
    7726:	0e 94 86 2a 	call	0x550c	; 0x550c <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    772a:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>

	f_sync(&Log_File);
    772e:	8e e5       	ldi	r24, 0x5E	; 94
    7730:	9f e4       	ldi	r25, 0x4F	; 79
    7732:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    7736:	1f 91       	pop	r17
    7738:	08 95       	ret

0000773a <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    773a:	1f 93       	push	r17
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	18 2f       	mov	r17, r24
    7742:	8f ef       	ldi	r24, 0xFF	; 255
    7744:	9f ef       	ldi	r25, 0xFF	; 255
    7746:	af ef       	ldi	r26, 0xFF	; 255
    7748:	bf ef       	ldi	r27, 0xFF	; 255
    774a:	80 93 36 57 	sts	0x5736, r24
    774e:	90 93 37 57 	sts	0x5737, r25
    7752:	a0 93 38 57 	sts	0x5738, r26
    7756:	b0 93 39 57 	sts	0x5739, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    775a:	6c e4       	ldi	r22, 0x4C	; 76
    775c:	74 e7       	ldi	r23, 0x74	; 116
    775e:	8e ed       	ldi	r24, 0xDE	; 222
    7760:	90 eb       	ldi	r25, 0xB0	; 176
    7762:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(48);				// record size
    7766:	60 e3       	ldi	r22, 0x30	; 48
    7768:	70 e0       	ldi	r23, 0x00	; 0
    776a:	80 e0       	ldi	r24, 0x00	; 0
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(3); 		// record type
    7772:	83 e0       	ldi	r24, 0x03	; 3
    7774:	90 e0       	ldi	r25, 0x00	; 0
    7776:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

											// payload
	if(bufferNumber == 1){
    777a:	11 30       	cpi	r17, 0x01	; 1
    777c:	49 f4       	brne	.+18     	; 0x7790 <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    777e:	60 91 b6 33 	lds	r22, 0x33B6
    7782:	70 91 b7 33 	lds	r23, 0x33B7
    7786:	80 91 b8 33 	lds	r24, 0x33B8
    778a:	90 91 b9 33 	lds	r25, 0x33B9
    778e:	08 c0       	rjmp	.+16     	; 0x77a0 <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    7790:	60 91 ba 33 	lds	r22, 0x33BA
    7794:	70 91 bb 33 	lds	r23, 0x33BB
    7798:	80 91 bc 33 	lds	r24, 0x33BC
    779c:	90 91 bd 33 	lds	r25, 0x33BD
    77a0:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    77a4:	60 e0       	ldi	r22, 0x00	; 0
    77a6:	70 e2       	ldi	r23, 0x20	; 32
    77a8:	8c e1       	ldi	r24, 0x1C	; 28
    77aa:	90 e0       	ldi	r25, 0x00	; 0
    77ac:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(10);												// number of samples
    77b0:	6a e0       	ldi	r22, 0x0A	; 10
    77b2:	70 e0       	ldi	r23, 0x00	; 0
    77b4:	80 e0       	ldi	r24, 0x00	; 0
    77b6:	90 e0       	ldi	r25, 0x00	; 0
    77b8:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_WriteString("Pressure");
    77bc:	84 e8       	ldi	r24, 0x84	; 132
    77be:	90 e2       	ldi	r25, 0x20	; 32
    77c0:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    77c4:	89 e0       	ldi	r24, 0x09	; 9
    77c6:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("8");
    77ca:	82 e8       	ldi	r24, 0x82	; 130
    77cc:	90 e2       	ldi	r25, 0x20	; 32
    77ce:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    77d2:	8a e0       	ldi	r24, 0x0A	; 10
    77d4:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_Write8(0x00);
    77d8:	80 e0       	ldi	r24, 0x00	; 0
    77da:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	if(bufferNumber == 1){
    77de:	11 30       	cpi	r17, 0x01	; 1
    77e0:	51 f4       	brne	.+20     	; 0x77f6 <SD_WritePressureBuffer+0xbc>
    77e2:	c0 ed       	ldi	r28, 0xD0	; 208
    77e4:	dc e3       	ldi	r29, 0x3C	; 60
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    77e6:	89 91       	ld	r24, Y+
    77e8:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    77ec:	8c e3       	ldi	r24, 0x3C	; 60
    77ee:	ca 3d       	cpi	r28, 0xDA	; 218
    77f0:	d8 07       	cpc	r29, r24
    77f2:	c9 f7       	brne	.-14     	; 0x77e6 <SD_WritePressureBuffer+0xac>
    77f4:	09 c0       	rjmp	.+18     	; 0x7808 <SD_WritePressureBuffer+0xce>
    77f6:	c7 e1       	ldi	r28, 0x17	; 23
    77f8:	db e4       	ldi	r29, 0x4B	; 75
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    77fa:	89 91       	ld	r24, Y+
    77fc:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    7800:	8b e4       	ldi	r24, 0x4B	; 75
    7802:	c1 32       	cpi	r28, 0x21	; 33
    7804:	d8 07       	cpc	r29, r24
    7806:	c9 f7       	brne	.-14     	; 0x77fa <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    7808:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>

	f_sync(&Log_File);
    780c:	8e e5       	ldi	r24, 0x5E	; 94
    780e:	9f e4       	ldi	r25, 0x4F	; 79
    7810:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    7814:	df 91       	pop	r29
    7816:	cf 91       	pop	r28
    7818:	1f 91       	pop	r17
    781a:	08 95       	ret

0000781c <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    781c:	1f 93       	push	r17
    781e:	cf 93       	push	r28
    7820:	df 93       	push	r29
    7822:	18 2f       	mov	r17, r24
    7824:	8f ef       	ldi	r24, 0xFF	; 255
    7826:	9f ef       	ldi	r25, 0xFF	; 255
    7828:	af ef       	ldi	r26, 0xFF	; 255
    782a:	bf ef       	ldi	r27, 0xFF	; 255
    782c:	80 93 36 57 	sts	0x5736, r24
    7830:	90 93 37 57 	sts	0x5737, r25
    7834:	a0 93 38 57 	sts	0x5738, r26
    7838:	b0 93 39 57 	sts	0x5739, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    783c:	6c e4       	ldi	r22, 0x4C	; 76
    783e:	74 e7       	ldi	r23, 0x74	; 116
    7840:	8e ed       	ldi	r24, 0xDE	; 222
    7842:	90 eb       	ldi	r25, 0xB0	; 176
    7844:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(48);				// record size
    7848:	60 e3       	ldi	r22, 0x30	; 48
    784a:	70 e0       	ldi	r23, 0x00	; 0
    784c:	80 e0       	ldi	r24, 0x00	; 0
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(3); 		// record type
    7854:	83 e0       	ldi	r24, 0x03	; 3
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

											// payload
	if(bufferNumber == 1){
    785c:	11 30       	cpi	r17, 0x01	; 1
    785e:	49 f4       	brne	.+18     	; 0x7872 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    7860:	60 91 ae 33 	lds	r22, 0x33AE
    7864:	70 91 af 33 	lds	r23, 0x33AF
    7868:	80 91 b0 33 	lds	r24, 0x33B0
    786c:	90 91 b1 33 	lds	r25, 0x33B1
    7870:	08 c0       	rjmp	.+16     	; 0x7882 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    7872:	60 91 b2 33 	lds	r22, 0x33B2
    7876:	70 91 b3 33 	lds	r23, 0x33B3
    787a:	80 91 b4 33 	lds	r24, 0x33B4
    787e:	90 91 b5 33 	lds	r25, 0x33B5
    7882:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7886:	60 e0       	ldi	r22, 0x00	; 0
    7888:	70 e2       	ldi	r23, 0x20	; 32
    788a:	8c e1       	ldi	r24, 0x1C	; 28
    788c:	90 e0       	ldi	r25, 0x00	; 0
    788e:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(10);												// number of samples
    7892:	6a e0       	ldi	r22, 0x0A	; 10
    7894:	70 e0       	ldi	r23, 0x00	; 0
    7896:	80 e0       	ldi	r24, 0x00	; 0
    7898:	90 e0       	ldi	r25, 0x00	; 0
    789a:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>

	SD_WriteString("Humidity");
    789e:	8d e8       	ldi	r24, 0x8D	; 141
    78a0:	90 e2       	ldi	r25, 0x20	; 32
    78a2:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    78a6:	89 e0       	ldi	r24, 0x09	; 9
    78a8:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("8");
    78ac:	82 e8       	ldi	r24, 0x82	; 130
    78ae:	90 e2       	ldi	r25, 0x20	; 32
    78b0:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    78b4:	8a e0       	ldi	r24, 0x0A	; 10
    78b6:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_Write8(0x00);
    78ba:	80 e0       	ldi	r24, 0x00	; 0
    78bc:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	if(bufferNumber == 1){
    78c0:	11 30       	cpi	r17, 0x01	; 1
    78c2:	51 f4       	brne	.+20     	; 0x78d8 <SD_WriteHumidityBuffer+0xbc>
    78c4:	cf e3       	ldi	r28, 0x3F	; 63
    78c6:	db e4       	ldi	r29, 0x4B	; 75
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    78c8:	89 91       	ld	r24, Y+
    78ca:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    78ce:	8b e4       	ldi	r24, 0x4B	; 75
    78d0:	c9 34       	cpi	r28, 0x49	; 73
    78d2:	d8 07       	cpc	r29, r24
    78d4:	c9 f7       	brne	.-14     	; 0x78c8 <SD_WriteHumidityBuffer+0xac>
    78d6:	09 c0       	rjmp	.+18     	; 0x78ea <SD_WriteHumidityBuffer+0xce>
    78d8:	c8 ed       	ldi	r28, 0xD8	; 216
    78da:	d3 e5       	ldi	r29, 0x53	; 83
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    78dc:	89 91       	ld	r24, Y+
    78de:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    78e2:	83 e5       	ldi	r24, 0x53	; 83
    78e4:	c2 3e       	cpi	r28, 0xE2	; 226
    78e6:	d8 07       	cpc	r29, r24
    78e8:	c9 f7       	brne	.-14     	; 0x78dc <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    78ea:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>

	f_sync(&Log_File);
    78ee:	8e e5       	ldi	r24, 0x5E	; 94
    78f0:	9f e4       	ldi	r25, 0x4F	; 79
    78f2:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    78f6:	df 91       	pop	r29
    78f8:	cf 91       	pop	r28
    78fa:	1f 91       	pop	r17
    78fc:	08 95       	ret

000078fe <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    78fe:	1f 93       	push	r17
    7900:	cf 93       	push	r28
    7902:	df 93       	push	r29
    7904:	18 2f       	mov	r17, r24
    7906:	8f ef       	ldi	r24, 0xFF	; 255
    7908:	9f ef       	ldi	r25, 0xFF	; 255
    790a:	af ef       	ldi	r26, 0xFF	; 255
    790c:	bf ef       	ldi	r27, 0xFF	; 255
    790e:	80 93 36 57 	sts	0x5736, r24
    7912:	90 93 37 57 	sts	0x5737, r25
    7916:	a0 93 38 57 	sts	0x5738, r26
    791a:	b0 93 39 57 	sts	0x5739, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    791e:	6c e4       	ldi	r22, 0x4C	; 76
    7920:	74 e7       	ldi	r23, 0x74	; 116
    7922:	8e ed       	ldi	r24, 0xDE	; 222
    7924:	90 eb       	ldi	r25, 0xB0	; 176
    7926:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(62);				// record size  
    792a:	6e e3       	ldi	r22, 0x3E	; 62
    792c:	70 e0       	ldi	r23, 0x00	; 0
    792e:	80 e0       	ldi	r24, 0x00	; 0
    7930:	90 e0       	ldi	r25, 0x00	; 0
    7932:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(3); 		// record type  
    7936:	83 e0       	ldi	r24, 0x03	; 3
    7938:	90 e0       	ldi	r25, 0x00	; 0
    793a:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    793e:	11 30       	cpi	r17, 0x01	; 1
    7940:	49 f4       	brne	.+18     	; 0x7954 <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    7942:	60 91 a6 33 	lds	r22, 0x33A6
    7946:	70 91 a7 33 	lds	r23, 0x33A7
    794a:	80 91 a8 33 	lds	r24, 0x33A8
    794e:	90 91 a9 33 	lds	r25, 0x33A9
    7952:	08 c0       	rjmp	.+16     	; 0x7964 <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    7954:	60 91 aa 33 	lds	r22, 0x33AA
    7958:	70 91 ab 33 	lds	r23, 0x33AB
    795c:	80 91 ac 33 	lds	r24, 0x33AC
    7960:	90 91 ad 33 	lds	r25, 0x33AD
    7964:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    7968:	60 e0       	ldi	r22, 0x00	; 0
    796a:	70 e2       	ldi	r23, 0x20	; 32
    796c:	8c e1       	ldi	r24, 0x1C	; 28
    796e:	90 e0       	ldi	r25, 0x00	; 0
    7970:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(10);												// number of samples
    7974:	6a e0       	ldi	r22, 0x0A	; 10
    7976:	70 e0       	ldi	r23, 0x00	; 0
    7978:	80 e0       	ldi	r24, 0x00	; 0
    797a:	90 e0       	ldi	r25, 0x00	; 0
    797c:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
		
	SD_WriteString("Temperature");
    7980:	86 e9       	ldi	r24, 0x96	; 150
    7982:	90 e2       	ldi	r25, 0x20	; 32
    7984:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    7988:	89 e0       	ldi	r24, 0x09	; 9
    798a:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("16");
    798e:	82 ea       	ldi	r24, 0xA2	; 162
    7990:	90 e2       	ldi	r25, 0x20	; 32
    7992:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    7996:	8a e0       	ldi	r24, 0x0A	; 10
    7998:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_Write8(0x00);
    799c:	80 e0       	ldi	r24, 0x00	; 0
    799e:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	
	if(bufferNumber == 1){
    79a2:	11 30       	cpi	r17, 0x01	; 1
    79a4:	59 f4       	brne	.+22     	; 0x79bc <SD_WriteTemperatureBuffer+0xbe>
    79a6:	c6 e5       	ldi	r28, 0x56	; 86
    79a8:	da e4       	ldi	r29, 0x4A	; 74
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    79aa:	89 91       	ld	r24, Y+
    79ac:	99 91       	ld	r25, Y+
    79ae:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    79b2:	8a e4       	ldi	r24, 0x4A	; 74
    79b4:	ca 36       	cpi	r28, 0x6A	; 106
    79b6:	d8 07       	cpc	r29, r24
    79b8:	c1 f7       	brne	.-16     	; 0x79aa <SD_WriteTemperatureBuffer+0xac>
    79ba:	0a c0       	rjmp	.+20     	; 0x79d0 <SD_WriteTemperatureBuffer+0xd2>
    79bc:	c9 ed       	ldi	r28, 0xD9	; 217
    79be:	da e4       	ldi	r29, 0x4A	; 74
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    79c0:	89 91       	ld	r24, Y+
    79c2:	99 91       	ld	r25, Y+
    79c4:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    79c8:	8a e4       	ldi	r24, 0x4A	; 74
    79ca:	cd 3e       	cpi	r28, 0xED	; 237
    79cc:	d8 07       	cpc	r29, r24
    79ce:	c1 f7       	brne	.-16     	; 0x79c0 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    79d0:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>
		
	f_sync(&Log_File);
    79d4:	8e e5       	ldi	r24, 0x5E	; 94
    79d6:	9f e4       	ldi	r25, 0x4F	; 79
    79d8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

}
    79dc:	df 91       	pop	r29
    79de:	cf 91       	pop	r28
    79e0:	1f 91       	pop	r17
    79e2:	08 95       	ret

000079e4 <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    79e4:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    79e6:	dc 01       	movw	r26, r24
    79e8:	0d 90       	ld	r0, X+
    79ea:	00 20       	and	r0, r0
    79ec:	e9 f7       	brne	.-6      	; 0x79e8 <Rs232_SendString+0x4>
    79ee:	11 97       	sbiw	r26, 0x01	; 1
    79f0:	a8 1b       	sub	r26, r24
    79f2:	b9 0b       	sbc	r27, r25
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	0a c0       	rjmp	.+20     	; 0x7a0c <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    79f8:	e2 0f       	add	r30, r18
    79fa:	f3 1f       	adc	r31, r19
    79fc:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    79fe:	80 91 a1 09 	lds	r24, 0x09A1
    7a02:	85 ff       	sbrs	r24, 5
    7a04:	fc cf       	rjmp	.-8      	; 0x79fe <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    7a06:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7a0a:	9f 5f       	subi	r25, 0xFF	; 255
    7a0c:	e9 2f       	mov	r30, r25
    7a0e:	f0 e0       	ldi	r31, 0x00	; 0
    7a10:	ea 17       	cp	r30, r26
    7a12:	fb 07       	cpc	r31, r27
    7a14:	88 f3       	brcs	.-30     	; 0x79f8 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    7a16:	66 23       	and	r22, r22
    7a18:	71 f0       	breq	.+28     	; 0x7a36 <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7a1a:	80 91 a1 09 	lds	r24, 0x09A1
    7a1e:	85 ff       	sbrs	r24, 5
    7a20:	fc cf       	rjmp	.-8      	; 0x7a1a <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    7a22:	8d e0       	ldi	r24, 0x0D	; 13
    7a24:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    7a28:	80 91 a1 09 	lds	r24, 0x09A1
    7a2c:	85 ff       	sbrs	r24, 5
    7a2e:	fc cf       	rjmp	.-8      	; 0x7a28 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    7a30:	8a e0       	ldi	r24, 0x0A	; 10
    7a32:	80 93 a0 09 	sts	0x09A0, r24
    7a36:	08 95       	ret

00007a38 <Wifi_SendString>:

	Wifi_Usart.DATA = data;

}

void Wifi_SendString(char string [],bool CR){
    7a38:	ef 92       	push	r14
    7a3a:	ff 92       	push	r15
    7a3c:	0f 93       	push	r16
    7a3e:	1f 93       	push	r17
    7a40:	cf 93       	push	r28
    7a42:	df 93       	push	r29
    7a44:	8c 01       	movw	r16, r24
    7a46:	e6 2e       	mov	r14, r22
    7a48:	ff 24       	eor	r15, r15
    7a4a:	06 c0       	rjmp	.+12     	; 0x7a58 <Wifi_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Wifi_SendByte(string[i]);
    7a4c:	c0 0f       	add	r28, r16
    7a4e:	d1 1f       	adc	r29, r17
    7a50:	88 81       	ld	r24, Y
    7a52:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
	Wifi_Usart.DATA = data;

}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7a56:	f3 94       	inc	r15
    7a58:	cf 2d       	mov	r28, r15
    7a5a:	d0 e0       	ldi	r29, 0x00	; 0
    7a5c:	f8 01       	movw	r30, r16
    7a5e:	01 90       	ld	r0, Z+
    7a60:	00 20       	and	r0, r0
    7a62:	e9 f7       	brne	.-6      	; 0x7a5e <Wifi_SendString+0x26>
    7a64:	31 97       	sbiw	r30, 0x01	; 1
    7a66:	e0 1b       	sub	r30, r16
    7a68:	f1 0b       	sbc	r31, r17
    7a6a:	ce 17       	cp	r28, r30
    7a6c:	df 07       	cpc	r29, r31
    7a6e:	70 f3       	brcs	.-36     	; 0x7a4c <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

    if(CR){
    7a70:	ee 20       	and	r14, r14
    7a72:	31 f0       	breq	.+12     	; 0x7a80 <Wifi_SendString+0x48>
		Wifi_SendByte(13);
    7a74:	8d e0       	ldi	r24, 0x0D	; 13
    7a76:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
		Wifi_SendByte(10);
    7a7a:	8a e0       	ldi	r24, 0x0A	; 10
    7a7c:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
	}
}
    7a80:	df 91       	pop	r29
    7a82:	cf 91       	pop	r28
    7a84:	1f 91       	pop	r17
    7a86:	0f 91       	pop	r16
    7a88:	ff 90       	pop	r15
    7a8a:	ef 90       	pop	r14
    7a8c:	08 95       	ret

00007a8e <Wifi_EnterCMDMode>:

bool Wifi_EnterCMDMode(uint16_t timeOut){
    7a8e:	8f 92       	push	r8
    7a90:	9f 92       	push	r9
    7a92:	af 92       	push	r10
    7a94:	bf 92       	push	r11
    7a96:	cf 92       	push	r12
    7a98:	df 92       	push	r13
    7a9a:	ff 92       	push	r15
    7a9c:	0f 93       	push	r16
    7a9e:	1f 93       	push	r17
    7aa0:	df 93       	push	r29
    7aa2:	cf 93       	push	r28
    7aa4:	00 d0       	rcall	.+0      	; 0x7aa6 <Wifi_EnterCMDMode+0x18>
    7aa6:	00 d0       	rcall	.+0      	; 0x7aa8 <Wifi_EnterCMDMode+0x1a>
    7aa8:	cd b7       	in	r28, 0x3d	; 61
    7aaa:	de b7       	in	r29, 0x3e	; 62
    7aac:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    7aae:	de 01       	movw	r26, r28
    7ab0:	14 96       	adiw	r26, 0x04	; 4
    7ab2:	e9 ea       	ldi	r30, 0xA9	; 169
    7ab4:	f0 e2       	ldi	r31, 0x20	; 32
    7ab6:	83 e0       	ldi	r24, 0x03	; 3
    7ab8:	01 90       	ld	r0, Z+
    7aba:	0d 92       	st	X+, r0
    7abc:	81 50       	subi	r24, 0x01	; 1
    7abe:	e1 f7       	brne	.-8      	; 0x7ab8 <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    7ac0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    7ac4:	85 ea       	ldi	r24, 0xA5	; 165
    7ac6:	90 e2       	ldi	r25, 0x20	; 32
    7ac8:	60 e0       	ldi	r22, 0x00	; 0
    7aca:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
    7ace:	ff 24       	eor	r15, r15
    7ad0:	00 e0       	ldi	r16, 0x00	; 0
    7ad2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    7ad4:	4e 01       	movw	r8, r28
    7ad6:	08 94       	sec
    7ad8:	81 1c       	adc	r8, r1
    7ada:	91 1c       	adc	r9, r1
    7adc:	a6 e6       	ldi	r26, 0x66	; 102
    7ade:	aa 2e       	mov	r10, r26
    7ae0:	ae e0       	ldi	r26, 0x0E	; 14
    7ae2:	ba 2e       	mov	r11, r26
    7ae4:	23 c0       	rjmp	.+70     	; 0x7b2c <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    7ae6:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    7aea:	88 23       	and	r24, r24
    7aec:	d1 f0       	breq	.+52     	; 0x7b22 <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    7aee:	80 e0       	ldi	r24, 0x00	; 0
    7af0:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    7af4:	f4 01       	movw	r30, r8
    7af6:	ef 0d       	add	r30, r15
    7af8:	f1 1d       	adc	r31, r1
    7afa:	80 83       	st	Z, r24
			j++;
    7afc:	f3 94       	inc	r15
			if(j > 2){
    7afe:	82 e0       	ldi	r24, 0x02	; 2
    7b00:	8f 15       	cp	r24, r15
    7b02:	78 f4       	brcc	.+30     	; 0x7b22 <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    7b04:	99 81       	ldd	r25, Y+1	; 0x01
    7b06:	8c 81       	ldd	r24, Y+4	; 0x04
    7b08:	98 17       	cp	r25, r24
    7b0a:	99 f4       	brne	.+38     	; 0x7b32 <Wifi_EnterCMDMode+0xa4>
    7b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    7b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    7b10:	98 17       	cp	r25, r24
    7b12:	79 f4       	brne	.+30     	; 0x7b32 <Wifi_EnterCMDMode+0xa4>
    7b14:	20 e0       	ldi	r18, 0x00	; 0
    7b16:	9b 81       	ldd	r25, Y+3	; 0x03
    7b18:	8e 81       	ldd	r24, Y+6	; 0x06
    7b1a:	98 17       	cp	r25, r24
    7b1c:	59 f4       	brne	.+22     	; 0x7b34 <Wifi_EnterCMDMode+0xa6>
    7b1e:	21 e0       	ldi	r18, 0x01	; 1
    7b20:	09 c0       	rjmp	.+18     	; 0x7b34 <Wifi_EnterCMDMode+0xa6>
    7b22:	c5 01       	movw	r24, r10
    7b24:	01 97       	sbiw	r24, 0x01	; 1
    7b26:	f1 f7       	brne	.-4      	; 0x7b24 <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    7b28:	0f 5f       	subi	r16, 0xFF	; 255
    7b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    7b2c:	0c 15       	cp	r16, r12
    7b2e:	1d 05       	cpc	r17, r13
    7b30:	d0 f2       	brcs	.-76     	; 0x7ae6 <Wifi_EnterCMDMode+0x58>
    7b32:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7b34:	82 2f       	mov	r24, r18
    7b36:	26 96       	adiw	r28, 0x06	; 6
    7b38:	cd bf       	out	0x3d, r28	; 61
    7b3a:	de bf       	out	0x3e, r29	; 62
    7b3c:	cf 91       	pop	r28
    7b3e:	df 91       	pop	r29
    7b40:	1f 91       	pop	r17
    7b42:	0f 91       	pop	r16
    7b44:	ff 90       	pop	r15
    7b46:	df 90       	pop	r13
    7b48:	cf 90       	pop	r12
    7b4a:	bf 90       	pop	r11
    7b4c:	af 90       	pop	r10
    7b4e:	9f 90       	pop	r9
    7b50:	8f 90       	pop	r8
    7b52:	08 95       	ret

00007b54 <Debug_SendString>:
}

void Debug_SendString(char string [],bool CR){
    7b54:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    7b56:	dc 01       	movw	r26, r24
    7b58:	0d 90       	ld	r0, X+
    7b5a:	00 20       	and	r0, r0
    7b5c:	e9 f7       	brne	.-6      	; 0x7b58 <Debug_SendString+0x4>
    7b5e:	11 97       	sbiw	r26, 0x01	; 1
    7b60:	a8 1b       	sub	r26, r24
    7b62:	b9 0b       	sbc	r27, r25
    7b64:	90 e0       	ldi	r25, 0x00	; 0
    7b66:	0a c0       	rjmp	.+20     	; 0x7b7c <Debug_SendString+0x28>
		Debug_SendByte(string[i]);
    7b68:	e2 0f       	add	r30, r18
    7b6a:	f3 1f       	adc	r31, r19
    7b6c:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7b6e:	80 91 a1 08 	lds	r24, 0x08A1
    7b72:	85 ff       	sbrs	r24, 5
    7b74:	fc cf       	rjmp	.-8      	; 0x7b6e <Debug_SendString+0x1a>
	Debug_Usart.DATA = data;	
    7b76:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    7b7a:	9f 5f       	subi	r25, 0xFF	; 255
    7b7c:	e9 2f       	mov	r30, r25
    7b7e:	f0 e0       	ldi	r31, 0x00	; 0
    7b80:	ea 17       	cp	r30, r26
    7b82:	fb 07       	cpc	r31, r27
    7b84:	88 f3       	brcs	.-30     	; 0x7b68 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    7b86:	66 23       	and	r22, r22
    7b88:	71 f0       	breq	.+28     	; 0x7ba6 <Debug_SendString+0x52>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7b8a:	80 91 a1 08 	lds	r24, 0x08A1
    7b8e:	85 ff       	sbrs	r24, 5
    7b90:	fc cf       	rjmp	.-8      	; 0x7b8a <Debug_SendString+0x36>
	Debug_Usart.DATA = data;	
    7b92:	8d e0       	ldi	r24, 0x0D	; 13
    7b94:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7b98:	80 91 a1 08 	lds	r24, 0x08A1
    7b9c:	85 ff       	sbrs	r24, 5
    7b9e:	fc cf       	rjmp	.-8      	; 0x7b98 <Debug_SendString+0x44>
	Debug_Usart.DATA = data;	
    7ba0:	8a e0       	ldi	r24, 0x0A	; 10
    7ba2:	80 93 a0 08 	sts	0x08A0, r24
    7ba6:	08 95       	ret

00007ba8 <Debug_To_Wifi>:
	}
}


void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
    7ba8:	8d ea       	ldi	r24, 0xAD	; 173
    7baa:	90 e2       	ldi	r25, 0x20	; 32
    7bac:	61 e0       	ldi	r22, 0x01	; 1
    7bae:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
}



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    7bb2:	20 91 d8 33 	lds	r18, 0x33D8
    7bb6:	30 91 d9 33 	lds	r19, 0x33D9
    7bba:	80 91 d6 33 	lds	r24, 0x33D6
    7bbe:	90 91 d7 33 	lds	r25, 0x33D7
    7bc2:	28 17       	cp	r18, r24
    7bc4:	39 07       	cpc	r19, r25
    7bc6:	79 f4       	brne	.+30     	; 0x7be6 <Debug_To_Wifi+0x3e>
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
		}
		if(Wifi_CharReadyToRead()){
    7bc8:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    7bcc:	88 23       	and	r24, r24
    7bce:	89 f3       	breq	.-30     	; 0x7bb2 <Debug_To_Wifi+0xa>
			Debug_SendByte(Wifi_GetByte(true));
    7bd0:	81 e0       	ldi	r24, 0x01	; 1
    7bd2:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    7bd6:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7bd8:	80 91 a1 08 	lds	r24, 0x08A1
    7bdc:	85 ff       	sbrs	r24, 5
    7bde:	fc cf       	rjmp	.-8      	; 0x7bd8 <Debug_To_Wifi+0x30>
	Debug_Usart.DATA = data;	
    7be0:	90 93 a0 08 	sts	0x08A0, r25
    7be4:	e6 cf       	rjmp	.-52     	; 0x7bb2 <Debug_To_Wifi+0xa>

void Debug_To_Wifi(void){
    Debug_SendString("Debug To Wifi", true);
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
    7be6:	81 e0       	ldi	r24, 0x01	; 1
    7be8:	0e 94 3d 01 	call	0x27a	; 0x27a <Debug_GetByte>
    7bec:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
    7bf0:	eb cf       	rjmp	.-42     	; 0x7bc8 <Debug_To_Wifi+0x20>

00007bf2 <SD_Close>:
	currentLogFile[strlen(currentLogFile) - 1] = 0;
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
}

void SD_Close(void){
	Debug_SendString("Closing File",true);
    7bf2:	8b eb       	ldi	r24, 0xBB	; 187
    7bf4:	90 e2       	ldi	r25, 0x20	; 32
    7bf6:	61 e0       	ldi	r22, 0x01	; 1
    7bf8:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	f_close(&Log_File);
    7bfc:	8e e5       	ldi	r24, 0x5E	; 94
    7bfe:	9f e4       	ldi	r25, 0x4F	; 79
    7c00:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <f_close>
}
    7c04:	08 95       	ret

00007c06 <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    7c06:	6f 92       	push	r6
    7c08:	7f 92       	push	r7
    7c0a:	8f 92       	push	r8
    7c0c:	9f 92       	push	r9
    7c0e:	af 92       	push	r10
    7c10:	bf 92       	push	r11
    7c12:	cf 92       	push	r12
    7c14:	df 92       	push	r13
    7c16:	ef 92       	push	r14
    7c18:	ff 92       	push	r15
    7c1a:	0f 93       	push	r16
    7c1c:	1f 93       	push	r17
    7c1e:	cf 93       	push	r28
    7c20:	df 93       	push	r29
    7c22:	7c 01       	movw	r14, r24
    7c24:	6b 01       	movw	r12, r22
    7c26:	5a 01       	movw	r10, r20
    7c28:	39 01       	movw	r6, r18
	respLen = 0;
    7c2a:	10 92 de 33 	sts	0x33DE, r1
	toSendLen = strlen(toSend);
    7c2e:	fc 01       	movw	r30, r24
    7c30:	01 90       	ld	r0, Z+
    7c32:	00 20       	and	r0, r0
    7c34:	e9 f7       	brne	.-6      	; 0x7c30 <Wifi_SendCommand+0x2a>
    7c36:	31 97       	sbiw	r30, 0x01	; 1
    7c38:	e8 1b       	sub	r30, r24
    7c3a:	f9 0b       	sbc	r31, r25
    7c3c:	e0 93 df 33 	sts	0x33DF, r30
	if(strlen(ok) > strlen(ok2)){
    7c40:	eb 01       	movw	r28, r22
    7c42:	09 90       	ld	r0, Y+
    7c44:	00 20       	and	r0, r0
    7c46:	e9 f7       	brne	.-6      	; 0x7c42 <Wifi_SendCommand+0x3c>
    7c48:	21 97       	sbiw	r28, 0x01	; 1
    7c4a:	c6 1b       	sub	r28, r22
    7c4c:	d7 0b       	sbc	r29, r23
    7c4e:	da 01       	movw	r26, r20
    7c50:	0d 90       	ld	r0, X+
    7c52:	00 20       	and	r0, r0
    7c54:	e9 f7       	brne	.-6      	; 0x7c50 <Wifi_SendCommand+0x4a>
    7c56:	11 97       	sbiw	r26, 0x01	; 1
    7c58:	a4 1b       	sub	r26, r20
    7c5a:	b5 0b       	sbc	r27, r21
    7c5c:	ac 17       	cp	r26, r28
    7c5e:	bd 07       	cpc	r27, r29
    7c60:	18 f4       	brcc	.+6      	; 0x7c68 <Wifi_SendCommand+0x62>
		okLen = strlen(ok2);
    7c62:	a0 93 e0 33 	sts	0x33E0, r26
    7c66:	02 c0       	rjmp	.+4      	; 0x7c6c <Wifi_SendCommand+0x66>
	} else {
		okLen = strlen(ok);
    7c68:	c0 93 e0 33 	sts	0x33E0, r28
	}

	Debug_SendString("-----------------",true);
    7c6c:	88 ec       	ldi	r24, 0xC8	; 200
    7c6e:	90 e2       	ldi	r25, 0x20	; 32
    7c70:	61 e0       	ldi	r22, 0x01	; 1
    7c72:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	Debug_SendString("Command: ",false);
    7c76:	8a ed       	ldi	r24, 0xDA	; 218
    7c78:	90 e2       	ldi	r25, 0x20	; 32
    7c7a:	60 e0       	ldi	r22, 0x00	; 0
    7c7c:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	Debug_SendString(toSend,true);
    7c80:	c7 01       	movw	r24, r14
    7c82:	61 e0       	ldi	r22, 0x01	; 1
    7c84:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	Wifi_ClearBuffer();
    7c88:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    7c8c:	c7 01       	movw	r24, r14
    7c8e:	61 e0       	ldi	r22, 0x01	; 1
    7c90:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
    7c94:	00 e0       	ldi	r16, 0x00	; 0
    7c96:	10 e0       	ldi	r17, 0x00	; 0
    7c98:	b6 e6       	ldi	r27, 0x66	; 102
    7c9a:	8b 2e       	mov	r8, r27
    7c9c:	be e0       	ldi	r27, 0x0E	; 14
    7c9e:	9b 2e       	mov	r9, r27
    7ca0:	8c c0       	rjmp	.+280    	; 0x7dba <Wifi_SendCommand+0x1b4>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    7ca2:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    7ca6:	88 23       	and	r24, r24
    7ca8:	09 f4       	brne	.+2      	; 0x7cac <Wifi_SendCommand+0xa6>
    7caa:	82 c0       	rjmp	.+260    	; 0x7db0 <Wifi_SendCommand+0x1aa>
			resp[respLen] = Wifi_GetByte(false);
    7cac:	80 91 de 33 	lds	r24, 0x33DE
    7cb0:	c8 2f       	mov	r28, r24
    7cb2:	d0 e0       	ldi	r29, 0x00	; 0
    7cb4:	80 e0       	ldi	r24, 0x00	; 0
    7cb6:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    7cba:	ca 50       	subi	r28, 0x0A	; 10
    7cbc:	d3 4c       	sbci	r29, 0xC3	; 195
    7cbe:	88 83       	st	Y, r24
			respLen++;
    7cc0:	80 91 de 33 	lds	r24, 0x33DE
    7cc4:	8f 5f       	subi	r24, 0xFF	; 255
    7cc6:	80 93 de 33 	sts	0x33DE, r24
			if(respLen == okLen + toSendLen + 3){		
    7cca:	20 91 de 33 	lds	r18, 0x33DE
    7cce:	40 91 e0 33 	lds	r20, 0x33E0
    7cd2:	80 91 df 33 	lds	r24, 0x33DF
    7cd6:	30 e0       	ldi	r19, 0x00	; 0
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	84 0f       	add	r24, r20
    7cdc:	91 1d       	adc	r25, r1
    7cde:	03 96       	adiw	r24, 0x03	; 3
    7ce0:	28 17       	cp	r18, r24
    7ce2:	39 07       	cpc	r19, r25
    7ce4:	09 f0       	breq	.+2      	; 0x7ce8 <Wifi_SendCommand+0xe2>
    7ce6:	64 c0       	rjmp	.+200    	; 0x7db0 <Wifi_SendCommand+0x1aa>
				
				Debug_SendString("Response: ",false);
    7ce8:	84 ee       	ldi	r24, 0xE4	; 228
    7cea:	90 e2       	ldi	r25, 0x20	; 32
    7cec:	60 e0       	ldi	r22, 0x00	; 0
    7cee:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    7cf2:	90 e0       	ldi	r25, 0x00	; 0
    7cf4:	0c c0       	rjmp	.+24     	; 0x7d0e <Wifi_SendCommand+0x108>
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(resp[j]);
    7cf6:	e9 2f       	mov	r30, r25
    7cf8:	f0 e0       	ldi	r31, 0x00	; 0
    7cfa:	ea 50       	subi	r30, 0x0A	; 10
    7cfc:	f3 4c       	sbci	r31, 0xC3	; 195
    7cfe:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7d00:	80 91 a1 08 	lds	r24, 0x08A1
    7d04:	85 ff       	sbrs	r24, 5
    7d06:	fc cf       	rjmp	.-8      	; 0x7d00 <Wifi_SendCommand+0xfa>
	Debug_Usart.DATA = data;	
    7d08:	e0 93 a0 08 	sts	0x08A0, r30
			resp[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Response: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    7d0c:	9f 5f       	subi	r25, 0xFF	; 255
    7d0e:	80 91 de 33 	lds	r24, 0x33DE
    7d12:	98 17       	cp	r25, r24
    7d14:	80 f3       	brcs	.-32     	; 0x7cf6 <Wifi_SendCommand+0xf0>
					Debug_SendByte(resp[j]);
				}
				Debug_SendString(",want: ",false);
    7d16:	8f ee       	ldi	r24, 0xEF	; 239
    7d18:	90 e2       	ldi	r25, 0x20	; 32
    7d1a:	60 e0       	ldi	r22, 0x00	; 0
    7d1c:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
				Debug_SendString(ok,true);
    7d20:	c6 01       	movw	r24, r12
    7d22:	61 e0       	ldi	r22, 0x01	; 1
    7d24:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    7d28:	20 e0       	ldi	r18, 0x00	; 0
    7d2a:	0d c0       	rjmp	.+26     	; 0x7d46 <Wifi_SendCommand+0x140>
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
    7d2c:	e2 2f       	mov	r30, r18
    7d2e:	f0 e0       	ldi	r31, 0x00	; 0
    7d30:	df 01       	movw	r26, r30
    7d32:	aa 50       	subi	r26, 0x0A	; 10
    7d34:	b3 4c       	sbci	r27, 0xC3	; 195
    7d36:	9c 91       	ld	r25, X
    7d38:	ee 0d       	add	r30, r14
    7d3a:	ff 1d       	adc	r31, r15
    7d3c:	80 81       	ld	r24, Z
    7d3e:	98 17       	cp	r25, r24
    7d40:	09 f0       	breq	.+2      	; 0x7d44 <Wifi_SendCommand+0x13e>
    7d42:	3f c0       	rjmp	.+126    	; 0x7dc2 <Wifi_SendCommand+0x1bc>
				}
				Debug_SendString(",want: ",false);
				Debug_SendString(ok,true);
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
    7d44:	2f 5f       	subi	r18, 0xFF	; 255
    7d46:	80 91 df 33 	lds	r24, 0x33DF
    7d4a:	28 17       	cp	r18, r24
    7d4c:	78 f3       	brcs	.-34     	; 0x7d2c <Wifi_SendCommand+0x126>
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7d4e:	20 91 df 33 	lds	r18, 0x33DF
    7d52:	2d 5f       	subi	r18, 0xFD	; 253
    7d54:	1b c0       	rjmp	.+54     	; 0x7d8c <Wifi_SendCommand+0x186>
					if(resp[l] != ok[l-toSendLen-3]){
    7d56:	ed 01       	movw	r28, r26
    7d58:	ca 50       	subi	r28, 0x0A	; 10
    7d5a:	d3 4c       	sbci	r29, 0xC3	; 195
    7d5c:	98 81       	ld	r25, Y
    7d5e:	80 91 df 33 	lds	r24, 0x33DF
    7d62:	fd 01       	movw	r30, r26
    7d64:	e8 1b       	sub	r30, r24
    7d66:	f1 09       	sbc	r31, r1
    7d68:	ec 0d       	add	r30, r12
    7d6a:	fd 1d       	adc	r31, r13
    7d6c:	33 97       	sbiw	r30, 0x03	; 3
    7d6e:	80 81       	ld	r24, Z
    7d70:	98 17       	cp	r25, r24
    7d72:	59 f0       	breq	.+22     	; 0x7d8a <Wifi_SendCommand+0x184>
						if(resp[l] != ok2[l-toSendLen-3]){
    7d74:	88 81       	ld	r24, Y
    7d76:	90 91 df 33 	lds	r25, 0x33DF
    7d7a:	a9 1b       	sub	r26, r25
    7d7c:	b1 09       	sbc	r27, r1
    7d7e:	aa 0d       	add	r26, r10
    7d80:	bb 1d       	adc	r27, r11
    7d82:	13 97       	sbiw	r26, 0x03	; 3
    7d84:	9c 91       	ld	r25, X
    7d86:	89 17       	cp	r24, r25
    7d88:	e1 f4       	brne	.+56     	; 0x7dc2 <Wifi_SendCommand+0x1bc>
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7d8a:	2f 5f       	subi	r18, 0xFF	; 255
    7d8c:	a2 2f       	mov	r26, r18
    7d8e:	b0 e0       	ldi	r27, 0x00	; 0
    7d90:	80 91 de 33 	lds	r24, 0x33DE
    7d94:	90 e0       	ldi	r25, 0x00	; 0
    7d96:	03 97       	sbiw	r24, 0x03	; 3
    7d98:	a8 17       	cp	r26, r24
    7d9a:	b9 07       	cpc	r27, r25
    7d9c:	e4 f2       	brlt	.-72     	; 0x7d56 <Wifi_SendCommand+0x150>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7d9e:	80 91 a1 08 	lds	r24, 0x08A1
    7da2:	85 ff       	sbrs	r24, 5
    7da4:	fc cf       	rjmp	.-8      	; 0x7d9e <Wifi_SendCommand+0x198>
	Debug_Usart.DATA = data;	
    7da6:	8d e0       	ldi	r24, 0x0D	; 13
    7da8:	80 93 a0 08 	sts	0x08A0, r24
    7dac:	81 e0       	ldi	r24, 0x01	; 1
    7dae:	0a c0       	rjmp	.+20     	; 0x7dc4 <Wifi_SendCommand+0x1be>
    7db0:	c4 01       	movw	r24, r8
    7db2:	01 97       	sbiw	r24, 0x01	; 1
    7db4:	f1 f7       	brne	.-4      	; 0x7db2 <Wifi_SendCommand+0x1ac>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    7db6:	0f 5f       	subi	r16, 0xFF	; 255
    7db8:	1f 4f       	sbci	r17, 0xFF	; 255
    7dba:	06 15       	cp	r16, r6
    7dbc:	17 05       	cpc	r17, r7
    7dbe:	08 f4       	brcc	.+2      	; 0x7dc2 <Wifi_SendCommand+0x1bc>
    7dc0:	70 cf       	rjmp	.-288    	; 0x7ca2 <Wifi_SendCommand+0x9c>
    7dc2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7dc4:	df 91       	pop	r29
    7dc6:	cf 91       	pop	r28
    7dc8:	1f 91       	pop	r17
    7dca:	0f 91       	pop	r16
    7dcc:	ff 90       	pop	r15
    7dce:	ef 90       	pop	r14
    7dd0:	df 90       	pop	r13
    7dd2:	cf 90       	pop	r12
    7dd4:	bf 90       	pop	r11
    7dd6:	af 90       	pop	r10
    7dd8:	9f 90       	pop	r9
    7dda:	8f 90       	pop	r8
    7ddc:	7f 90       	pop	r7
    7dde:	6f 90       	pop	r6
    7de0:	08 95       	ret

00007de2 <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){
    7de2:	cf 92       	push	r12
    7de4:	df 92       	push	r13
    7de6:	ef 92       	push	r14
    7de8:	ff 92       	push	r15
    7dea:	1f 93       	push	r17
    7dec:	cf 93       	push	r28
    7dee:	df 93       	push	r29
    7df0:	7c 01       	movw	r14, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    7df2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    7df6:	87 ef       	ldi	r24, 0xF7	; 247
    7df8:	90 e2       	ldi	r25, 0x20	; 32
    7dfa:	6f ef       	ldi	r22, 0xFF	; 255
    7dfc:	70 e2       	ldi	r23, 0x20	; 32
    7dfe:	ab 01       	movw	r20, r22
    7e00:	97 01       	movw	r18, r14
    7e02:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    7e06:	10 e0       	ldi	r17, 0x00	; 0
    7e08:	c0 e0       	ldi	r28, 0x00	; 0
    7e0a:	d0 e0       	ldi	r29, 0x00	; 0
    7e0c:	86 e6       	ldi	r24, 0x66	; 102
    7e0e:	c8 2e       	mov	r12, r24
    7e10:	8e e0       	ldi	r24, 0x0E	; 14
    7e12:	d8 2e       	mov	r13, r24
    7e14:	1f c0       	rjmp	.+62     	; 0x7e54 <Wifi_GetMac+0x72>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    7e16:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    7e1a:	88 23       	and	r24, r24
    7e1c:	b9 f0       	breq	.+46     	; 0x7e4c <Wifi_GetMac+0x6a>
			macAddr[tmp] = Wifi_GetByte(false);
    7e1e:	80 e0       	ldi	r24, 0x00	; 0
    7e20:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    7e24:	e1 2f       	mov	r30, r17
    7e26:	f0 e0       	ldi	r31, 0x00	; 0
    7e28:	ec 57       	subi	r30, 0x7C	; 124
    7e2a:	fa 4b       	sbci	r31, 0xBA	; 186
    7e2c:	80 83       	st	Z, r24
			tmp++;
    7e2e:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    7e30:	11 31       	cpi	r17, 0x11	; 17
    7e32:	61 f4       	brne	.+24     	; 0x7e4c <Wifi_GetMac+0x6a>
				Debug_SendString("Got Mac=",false);
    7e34:	89 e0       	ldi	r24, 0x09	; 9
    7e36:	91 e2       	ldi	r25, 0x21	; 33
    7e38:	60 e0       	ldi	r22, 0x00	; 0
    7e3a:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
				Debug_SendString(macAddr,true);
    7e3e:	84 e8       	ldi	r24, 0x84	; 132
    7e40:	95 e4       	ldi	r25, 0x45	; 69
    7e42:	61 e0       	ldi	r22, 0x01	; 1
    7e44:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    7e48:	81 e0       	ldi	r24, 0x01	; 1
    7e4a:	08 c0       	rjmp	.+16     	; 0x7e5c <Wifi_GetMac+0x7a>
    7e4c:	c6 01       	movw	r24, r12
    7e4e:	01 97       	sbiw	r24, 0x01	; 1
    7e50:	f1 f7       	brne	.-4      	; 0x7e4e <Wifi_GetMac+0x6c>

bool Wifi_GetMac(uint16_t timeOut){
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    7e52:	21 96       	adiw	r28, 0x01	; 1
    7e54:	ce 15       	cp	r28, r14
    7e56:	df 05       	cpc	r29, r15
    7e58:	f0 f2       	brcs	.-68     	; 0x7e16 <Wifi_GetMac+0x34>
    7e5a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	1f 91       	pop	r17
    7e62:	ff 90       	pop	r15
    7e64:	ef 90       	pop	r14
    7e66:	df 90       	pop	r13
    7e68:	cf 90       	pop	r12
    7e6a:	08 95       	ret

00007e6c <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    7e6c:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    7e6e:	47 e1       	ldi	r20, 0x17	; 23
    7e70:	51 e2       	ldi	r21, 0x21	; 33
    7e72:	82 e1       	ldi	r24, 0x12	; 18
    7e74:	91 e2       	ldi	r25, 0x21	; 33
    7e76:	ba 01       	movw	r22, r20
    7e78:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    7e7c:	08 95       	ret

00007e7e <__vector_77>:

	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(TCD0_OVF_vect){
    7e7e:	1f 92       	push	r1
    7e80:	0f 92       	push	r0
    7e82:	0f b6       	in	r0, 0x3f	; 63
    7e84:	0f 92       	push	r0
    7e86:	0b b6       	in	r0, 0x3b	; 59
    7e88:	0f 92       	push	r0
    7e8a:	11 24       	eor	r1, r1
    7e8c:	cf 92       	push	r12
    7e8e:	ef 92       	push	r14
    7e90:	ff 92       	push	r15
    7e92:	0f 93       	push	r16
    7e94:	1f 93       	push	r17
    7e96:	2f 93       	push	r18
    7e98:	3f 93       	push	r19
    7e9a:	4f 93       	push	r20
    7e9c:	5f 93       	push	r21
    7e9e:	6f 93       	push	r22
    7ea0:	7f 93       	push	r23
    7ea2:	8f 93       	push	r24
    7ea4:	9f 93       	push	r25
    7ea6:	af 93       	push	r26
    7ea8:	bf 93       	push	r27
    7eaa:	ef 93       	push	r30
    7eac:	ff 93       	push	r31

if(okToDisplayGUI){
    7eae:	80 91 35 34 	lds	r24, 0x3435
    7eb2:	88 23       	and	r24, r24
    7eb4:	09 f4       	brne	.+2      	; 0x7eb8 <__vector_77+0x3a>
    7eb6:	5f c5       	rjmp	.+2750   	; 0x8976 <__vector_77+0xaf8>

    ssRefreshCounter++;
    7eb8:	80 91 2c 34 	lds	r24, 0x342C
    7ebc:	90 91 2d 34 	lds	r25, 0x342D
    7ec0:	01 96       	adiw	r24, 0x01	; 1
    7ec2:	80 93 2c 34 	sts	0x342C, r24
    7ec6:	90 93 2d 34 	sts	0x342D, r25

    if(recording){
    7eca:	80 91 06 34 	lds	r24, 0x3406
    7ece:	88 23       	and	r24, r24
    7ed0:	51 f1       	breq	.+84     	; 0x7f26 <__vector_77+0xa8>
	    if(recordFileRestartCounter > 9000){    // 15 mins  = 9000
    7ed2:	80 91 52 34 	lds	r24, 0x3452
    7ed6:	90 91 53 34 	lds	r25, 0x3453
    7eda:	89 52       	subi	r24, 0x29	; 41
    7edc:	93 42       	sbci	r25, 0x23	; 35
    7ede:	d0 f0       	brcs	.+52     	; 0x7f14 <__vector_77+0x96>
	        restartingFile = true;
    7ee0:	81 e0       	ldi	r24, 0x01	; 1
    7ee2:	80 93 42 34 	sts	0x3442, r24
	         recordFileRestartCounter = 0;
    7ee6:	10 92 52 34 	sts	0x3452, r1
    7eea:	10 92 53 34 	sts	0x3453, r1
		    rs232Recording = false;
    7eee:	10 92 fb 33 	sts	0x33FB, r1
            recording = false;
    7ef2:	10 92 06 34 	sts	0x3406, r1
	        okToCloseLogFile = true;
    7ef6:	80 93 34 34 	sts	0x3434, r24
	        while(okToCloseLogFile);
    7efa:	80 91 34 34 	lds	r24, 0x3434
    7efe:	88 23       	and	r24, r24
    7f00:	e1 f7       	brne	.-8      	; 0x7efa <__vector_77+0x7c>
	        okToOpenLogFile = true;
    7f02:	81 e0       	ldi	r24, 0x01	; 1
    7f04:	80 93 32 34 	sts	0x3432, r24
	        while(!recording);
    7f08:	80 91 06 34 	lds	r24, 0x3406
    7f0c:	88 23       	and	r24, r24
    7f0e:	e1 f3       	breq	.-8      	; 0x7f08 <__vector_77+0x8a>
	        restartingFile = false;
    7f10:	10 92 42 34 	sts	0x3442, r1
	    }
	    recordFileRestartCounter++;
    7f14:	80 91 52 34 	lds	r24, 0x3452
    7f18:	90 91 53 34 	lds	r25, 0x3453
    7f1c:	01 96       	adiw	r24, 0x01	; 1
    7f1e:	80 93 52 34 	sts	0x3452, r24
    7f22:	90 93 53 34 	sts	0x3453, r25


	// controls


    if(currentMode == recordMode && Dpad_CheckButton(Down)){											// go to sensorMode
    7f26:	80 91 2b 34 	lds	r24, 0x342B
    7f2a:	88 23       	and	r24, r24
    7f2c:	29 f4       	brne	.+10     	; 0x7f38 <__vector_77+0xba>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    7f2e:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    7f32:	8c 77       	andi	r24, 0x7C	; 124
    7f34:	83 ff       	sbrs	r24, 3
    7f36:	d4 c4       	rjmp	.+2472   	; 0x88e0 <__vector_77+0xa62>

		currentMode = sensorMode;
		display_clearBuffer();
		display_writeBufferToScreen();
	} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){											// go to recordMode
    7f38:	80 91 2b 34 	lds	r24, 0x342B
    7f3c:	81 30       	cpi	r24, 0x01	; 1
    7f3e:	69 f4       	brne	.+26     	; 0x7f5a <__vector_77+0xdc>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    7f40:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    7f44:	8c 77       	andi	r24, 0x7C	; 124
    7f46:	82 fd       	sbrc	r24, 2
    7f48:	08 c0       	rjmp	.+16     	; 0x7f5a <__vector_77+0xdc>
    7f4a:	d2 c4       	rjmp	.+2468   	; 0x88f0 <__vector_77+0xa72>
    7f4c:	ca 01       	movw	r24, r20
    7f4e:	01 97       	sbiw	r24, 0x01	; 1
    7f50:	f1 f7       	brne	.-4      	; 0x7f4e <__vector_77+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f52:	21 50       	subi	r18, 0x01	; 1
    7f54:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f56:	d1 f7       	brne	.-12     	; 0x7f4c <__vector_77+0xce>
    7f58:	09 c1       	rjmp	.+530    	; 0x816c <__vector_77+0x2ee>

		currentMode = recordMode;
		display_clearBuffer();
		display_writeBufferToScreen();
		_delay_ms(400);
	} else if(currentMode == recordMode && !recording && SD_Inserted() && !Dpad_CheckButton(Up) && !restartingFile){					// waiting to start recording
    7f5a:	80 91 2b 34 	lds	r24, 0x342B
    7f5e:	88 23       	and	r24, r24
    7f60:	a1 f4       	brne	.+40     	; 0x7f8a <__vector_77+0x10c>
    7f62:	80 91 06 34 	lds	r24, 0x3406
    7f66:	88 23       	and	r24, r24
    7f68:	81 f4       	brne	.+32     	; 0x7f8a <__vector_77+0x10c>

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    7f6a:	80 91 a8 06 	lds	r24, 0x06A8
    7f6e:	80 fd       	sbrc	r24, 0
    7f70:	0c c0       	rjmp	.+24     	; 0x7f8a <__vector_77+0x10c>
    7f72:	c9 c4       	rjmp	.+2450   	; 0x8906 <__vector_77+0xa88>
    7f74:	80 91 42 34 	lds	r24, 0x3442
    7f78:	88 23       	and	r24, r24
    7f7a:	39 f4       	brne	.+14     	; 0x7f8a <__vector_77+0x10c>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    7f7c:	e0 e2       	ldi	r30, 0x20	; 32
    7f7e:	f6 e0       	ldi	r31, 0x06	; 6
    7f80:	82 e0       	ldi	r24, 0x02	; 2
    7f82:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    7f84:	81 e0       	ldi	r24, 0x01	; 1
    7f86:	85 83       	std	Z+5, r24	; 0x05
    7f88:	f1 c0       	rjmp	.+482    	; 0x816c <__vector_77+0x2ee>
		Leds_Clear(sd_Red);
		Leds_Set(sd_Green);
	} else if(currentMode == recordMode && !recording && !SD_Inserted()){									// dont allow to start recording
    7f8a:	80 91 2b 34 	lds	r24, 0x342B
    7f8e:	88 23       	and	r24, r24
    7f90:	79 f4       	brne	.+30     	; 0x7fb0 <__vector_77+0x132>
    7f92:	80 91 06 34 	lds	r24, 0x3406
    7f96:	88 23       	and	r24, r24
    7f98:	59 f4       	brne	.+22     	; 0x7fb0 <__vector_77+0x132>
    7f9a:	80 91 a8 06 	lds	r24, 0x06A8
    7f9e:	80 ff       	sbrs	r24, 0
    7fa0:	07 c0       	rjmp	.+14     	; 0x7fb0 <__vector_77+0x132>
    7fa2:	e0 e2       	ldi	r30, 0x20	; 32
    7fa4:	f6 e0       	ldi	r31, 0x06	; 6
    7fa6:	82 e0       	ldi	r24, 0x02	; 2
    7fa8:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    7faa:	81 e0       	ldi	r24, 0x01	; 1
    7fac:	86 83       	std	Z+6, r24	; 0x06
    7fae:	de c0       	rjmp	.+444    	; 0x816c <__vector_77+0x2ee>
		Leds_Set(sd_Red);
		Leds_Clear(sd_Green);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    7fb0:	80 91 2b 34 	lds	r24, 0x342B
    7fb4:	88 23       	and	r24, r24
    7fb6:	09 f0       	breq	.+2      	; 0x7fba <__vector_77+0x13c>
    7fb8:	4c c0       	rjmp	.+152    	; 0x8052 <__vector_77+0x1d4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    7fba:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    7fbe:	8c 77       	andi	r24, 0x7C	; 124
    7fc0:	82 fd       	sbrc	r24, 2
    7fc2:	47 c0       	rjmp	.+142    	; 0x8052 <__vector_77+0x1d4>
    7fc4:	a6 c4       	rjmp	.+2380   	; 0x8912 <__vector_77+0xa94>

		display_putString("Recording      0m",0,0,System5x7);
    7fc6:	8c e1       	ldi	r24, 0x1C	; 28
    7fc8:	91 e2       	ldi	r25, 0x21	; 33
    7fca:	60 e0       	ldi	r22, 0x00	; 0
    7fcc:	40 e0       	ldi	r20, 0x00	; 0
    7fce:	20 e7       	ldi	r18, 0x70	; 112
    7fd0:	31 e3       	ldi	r19, 0x31	; 49
    7fd2:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		display_drawLine(1,60,7,60,true);		// up arrow
    7fd6:	81 e0       	ldi	r24, 0x01	; 1
    7fd8:	6c e3       	ldi	r22, 0x3C	; 60
    7fda:	47 e0       	ldi	r20, 0x07	; 7
    7fdc:	2c e3       	ldi	r18, 0x3C	; 60
    7fde:	01 e0       	ldi	r16, 0x01	; 1
    7fe0:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawPixel(2,59,true);
    7fe4:	82 e0       	ldi	r24, 0x02	; 2
    7fe6:	6b e3       	ldi	r22, 0x3B	; 59
    7fe8:	41 e0       	ldi	r20, 0x01	; 1
    7fea:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,58,true);
    7fee:	83 e0       	ldi	r24, 0x03	; 3
    7ff0:	6a e3       	ldi	r22, 0x3A	; 58
    7ff2:	41 e0       	ldi	r20, 0x01	; 1
    7ff4:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(2,61,true);
    7ff8:	82 e0       	ldi	r24, 0x02	; 2
    7ffa:	6d e3       	ldi	r22, 0x3D	; 61
    7ffc:	41 e0       	ldi	r20, 0x01	; 1
    7ffe:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,62,true);
    8002:	83 e0       	ldi	r24, 0x03	; 3
    8004:	6e e3       	ldi	r22, 0x3E	; 62
    8006:	41 e0       	ldi	r20, 0x01	; 1
    8008:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_writeBufferToScreen();
    800c:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>

        okToGetRemainingSpace = true;
    8010:	81 e0       	ldi	r24, 0x01	; 1
    8012:	80 93 4a 4b 	sts	0x4B4A, r24
	    while(!okToGetRemainingSpace);
    8016:	80 91 4a 4b 	lds	r24, 0x4B4A
    801a:	88 23       	and	r24, r24
    801c:	e1 f3       	breq	.-8      	; 0x8016 <__vector_77+0x198>
    801e:	e0 e2       	ldi	r30, 0x20	; 32
    8020:	f6 e0       	ldi	r31, 0x06	; 6
    8022:	91 e0       	ldi	r25, 0x01	; 1
    8024:	96 83       	std	Z+6, r25	; 0x06
		Leds_Clear(wifi_Green);
		Leds_Clear(wifi_Red);
		Leds_Clear(ext_Green);
		Leds_Clear(ext_Red);

		okToOpenLogFile = true;
    8026:	82 e0       	ldi	r24, 0x02	; 2
    8028:	86 83       	std	Z+6, r24	; 0x06
    802a:	80 e4       	ldi	r24, 0x40	; 64
    802c:	86 83       	std	Z+6, r24	; 0x06
    802e:	80 e8       	ldi	r24, 0x80	; 128
    8030:	86 83       	std	Z+6, r24	; 0x06
    8032:	80 e1       	ldi	r24, 0x10	; 16
    8034:	86 83       	std	Z+6, r24	; 0x06
    8036:	80 e2       	ldi	r24, 0x20	; 32
    8038:	86 83       	std	Z+6, r24	; 0x06
    803a:	90 93 32 34 	sts	0x3432, r25
    803e:	84 ef       	ldi	r24, 0xF4	; 244
    8040:	91 e0       	ldi	r25, 0x01	; 1
    8042:	20 e7       	ldi	r18, 0x70	; 112
    8044:	31 e0       	ldi	r19, 0x01	; 1
    8046:	f9 01       	movw	r30, r18
    8048:	31 97       	sbiw	r30, 0x01	; 1
    804a:	f1 f7       	brne	.-4      	; 0x8048 <__vector_77+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    804c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    804e:	d9 f7       	brne	.-10     	; 0x8046 <__vector_77+0x1c8>
    8050:	8d c0       	rjmp	.+282    	; 0x816c <__vector_77+0x2ee>
		_delay_ms(50);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){								// pause recording
    8052:	80 91 2b 34 	lds	r24, 0x342B
    8056:	88 23       	and	r24, r24
    8058:	09 f0       	breq	.+2      	; 0x805c <__vector_77+0x1de>
    805a:	88 c0       	rjmp	.+272    	; 0x816c <__vector_77+0x2ee>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    805c:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8060:	8c 77       	andi	r24, 0x7C	; 124
    8062:	82 fd       	sbrc	r24, 2
    8064:	83 c0       	rjmp	.+262    	; 0x816c <__vector_77+0x2ee>
    8066:	5b c4       	rjmp	.+2230   	; 0x891e <__vector_77+0xaa0>
		rs232Recording = false;
    8068:	10 92 fb 33 	sts	0x33FB, r1
		recording = false;
    806c:	10 92 06 34 	sts	0x3406, r1

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    8070:	10 92 0a 34 	sts	0x340A, r1
  	temperatureBufferToWriteTo = 1;
    8074:	81 e0       	ldi	r24, 0x01	; 1
    8076:	80 93 56 30 	sts	0x3056, r24
	okToSendTemperatureBuffer1 = false;
    807a:	10 92 08 34 	sts	0x3408, r1
	okToSendTemperatureBuffer2 = false;
    807e:	10 92 09 34 	sts	0x3409, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    8082:	10 92 10 34 	sts	0x3410, r1
	humidityBufferToWriteTo = 1;
    8086:	80 93 58 30 	sts	0x3058, r24
	okToSendHumidityBuffer1 = false;
    808a:	10 92 0e 34 	sts	0x340E, r1
	okToSendHumidityBuffer2 = false;
    808e:	10 92 0f 34 	sts	0x340F, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    8092:	10 92 0d 34 	sts	0x340D, r1
	pressureBufferToWriteTo = 1;
    8096:	80 93 57 30 	sts	0x3057, r24
	okToSendPressureBuffer1 = false;
    809a:	10 92 0b 34 	sts	0x340B, r1
	okToSendPressureBuffer2 = false;
    809e:	10 92 0c 34 	sts	0x340C, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    80a2:	10 92 13 34 	sts	0x3413, r1
    80a6:	10 92 14 34 	sts	0x3414, r1
	microphoneBufferToWriteTo = 1;
    80aa:	80 93 59 30 	sts	0x3059, r24
	okToSendMicrophoneBuffer1 = false;
    80ae:	10 92 11 34 	sts	0x3411, r1
	okToSendMicrophoneBuffer2 = false;
    80b2:	10 92 12 34 	sts	0x3412, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    80b6:	10 92 17 34 	sts	0x3417, r1
	lightBufferToWriteTo = 1;
    80ba:	80 93 5a 30 	sts	0x305A, r24
	okToSendLightBuffer1 = false;
    80be:	10 92 15 34 	sts	0x3415, r1
	okToSendLightBuffer2 = false;
    80c2:	10 92 16 34 	sts	0x3416, r1
		Sensors_ResetTemperatureBuffers();
		Sensors_ResetHumidityBuffers();
		Sensors_ResetPressureBuffers();
		Sensors_ResetMicrophoneBuffers();
		Sensors_ResetLightBuffers();
		okToCloseLogFile = true;
    80c6:	80 93 34 34 	sts	0x3434, r24

		display_putString("Paused           ",0,0,System5x7);
    80ca:	8e e2       	ldi	r24, 0x2E	; 46
    80cc:	91 e2       	ldi	r25, 0x21	; 33
    80ce:	60 e0       	ldi	r22, 0x00	; 0
    80d0:	40 e0       	ldi	r20, 0x00	; 0
    80d2:	20 e7       	ldi	r18, 0x70	; 112
    80d4:	31 e3       	ldi	r19, 0x31	; 49
    80d6:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		display_drawLine(1,60,7,60,true);		// up arrow
    80da:	81 e0       	ldi	r24, 0x01	; 1
    80dc:	6c e3       	ldi	r22, 0x3C	; 60
    80de:	47 e0       	ldi	r20, 0x07	; 7
    80e0:	2c e3       	ldi	r18, 0x3C	; 60
    80e2:	01 e0       	ldi	r16, 0x01	; 1
    80e4:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawPixel(2,59,true);
    80e8:	82 e0       	ldi	r24, 0x02	; 2
    80ea:	6b e3       	ldi	r22, 0x3B	; 59
    80ec:	41 e0       	ldi	r20, 0x01	; 1
    80ee:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,58,true);
    80f2:	83 e0       	ldi	r24, 0x03	; 3
    80f4:	6a e3       	ldi	r22, 0x3A	; 58
    80f6:	41 e0       	ldi	r20, 0x01	; 1
    80f8:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(2,61,true);
    80fc:	82 e0       	ldi	r24, 0x02	; 2
    80fe:	6d e3       	ldi	r22, 0x3D	; 61
    8100:	41 e0       	ldi	r20, 0x01	; 1
    8102:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,62,true);
    8106:	83 e0       	ldi	r24, 0x03	; 3
    8108:	6e e3       	ldi	r22, 0x3E	; 62
    810a:	41 e0       	ldi	r20, 0x01	; 1
    810c:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_writeBufferToScreen();
    8110:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>

        if(timeIsValid || demoMode){
    8114:	80 91 43 34 	lds	r24, 0x3443
    8118:	88 23       	and	r24, r24
    811a:	21 f4       	brne	.+8      	; 0x8124 <__vector_77+0x2a6>
    811c:	80 91 69 34 	lds	r24, 0x3469
    8120:	88 23       	and	r24, r24
    8122:	11 f0       	breq	.+4      	; 0x8128 <__vector_77+0x2aa>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8124:	80 e4       	ldi	r24, 0x40	; 64
    8126:	01 c0       	rjmp	.+2      	; 0x812a <__vector_77+0x2ac>
    8128:	80 e8       	ldi	r24, 0x80	; 128
    812a:	e0 e2       	ldi	r30, 0x20	; 32
    812c:	f6 e0       	ldi	r31, 0x06	; 6
    812e:	85 83       	std	Z+5, r24	; 0x05
    8130:	80 91 a8 06 	lds	r24, 0x06A8
    8134:	80 ff       	sbrs	r24, 0
    8136:	f9 c3       	rjmp	.+2034   	; 0x892a <__vector_77+0xaac>
    8138:	82 e0       	ldi	r24, 0x02	; 2
    813a:	e0 e2       	ldi	r30, 0x20	; 32
    813c:	f6 e0       	ldi	r31, 0x06	; 6
    813e:	85 83       	std	Z+5, r24	; 0x05
		if(SD_Inserted()){
			Leds_Set(sd_Green);
		} else {
			Leds_Set(sd_Red);
		}
		if(!chargeComplete && SD2_Inserted()){
    8140:	80 91 ff 33 	lds	r24, 0x33FF
    8144:	88 23       	and	r24, r24
    8146:	29 f4       	brne	.+10     	; 0x8152 <__vector_77+0x2d4>
		return true;
	}
}

bool SD2_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD2)) > 0 ){
    8148:	80 91 a8 06 	lds	r24, 0x06A8
    814c:	81 fd       	sbrc	r24, 1
    814e:	05 c0       	rjmp	.+10     	; 0x815a <__vector_77+0x2dc>
    8150:	ee c3       	rjmp	.+2012   	; 0x892e <__vector_77+0xab0>
    8152:	80 91 a8 06 	lds	r24, 0x06A8
    8156:	81 ff       	sbrs	r24, 1
    8158:	ef c3       	rjmp	.+2014   	; 0x8938 <__vector_77+0xaba>
    815a:	88 e8       	ldi	r24, 0x88	; 136
    815c:	93 e1       	ldi	r25, 0x13	; 19
    815e:	20 e7       	ldi	r18, 0x70	; 112
    8160:	31 e0       	ldi	r19, 0x01	; 1
    8162:	f9 01       	movw	r30, r18
    8164:	31 97       	sbiw	r30, 0x01	; 1
    8166:	f1 f7       	brne	.-4      	; 0x8164 <__vector_77+0x2e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    816a:	d9 f7       	brne	.-10     	; 0x8162 <__vector_77+0x2e4>
		_delay_ms(500);
	}

	// load displays

	if(currentMode == recordMode){																		// show record screen
    816c:	80 91 2b 34 	lds	r24, 0x342B
    8170:	88 23       	and	r24, r24
    8172:	09 f0       	breq	.+2      	; 0x8176 <__vector_77+0x2f8>
    8174:	4e c2       	rjmp	.+1180   	; 0x8612 <__vector_77+0x794>

		if(recording){
    8176:	80 91 06 34 	lds	r24, 0x3406
    817a:	88 23       	and	r24, r24
    817c:	09 f4       	brne	.+2      	; 0x8180 <__vector_77+0x302>
    817e:	40 c0       	rjmp	.+128    	; 0x8200 <__vector_77+0x382>
			sprintf(temp, "Recording   %4lum", (UNIX_time - timeRecordingStarted)/60);		// load recording screen
    8180:	60 91 01 34 	lds	r22, 0x3401
    8184:	70 91 02 34 	lds	r23, 0x3402
    8188:	80 91 03 34 	lds	r24, 0x3403
    818c:	90 91 04 34 	lds	r25, 0x3404
    8190:	ad b7       	in	r26, 0x3d	; 61
    8192:	be b7       	in	r27, 0x3e	; 62
    8194:	18 97       	sbiw	r26, 0x08	; 8
    8196:	ad bf       	out	0x3d, r26	; 61
    8198:	be bf       	out	0x3e, r27	; 62
    819a:	0d b7       	in	r16, 0x3d	; 61
    819c:	1e b7       	in	r17, 0x3e	; 62
    819e:	0f 5f       	subi	r16, 0xFF	; 255
    81a0:	1f 4f       	sbci	r17, 0xFF	; 255
    81a2:	2a e6       	ldi	r18, 0x6A	; 106
    81a4:	e2 2e       	mov	r14, r18
    81a6:	2a e4       	ldi	r18, 0x4A	; 74
    81a8:	f2 2e       	mov	r15, r18
    81aa:	11 96       	adiw	r26, 0x01	; 1
    81ac:	ed 92       	st	X+, r14
    81ae:	fc 92       	st	X, r15
    81b0:	12 97       	sbiw	r26, 0x02	; 2
    81b2:	20 e4       	ldi	r18, 0x40	; 64
    81b4:	31 e2       	ldi	r19, 0x21	; 33
    81b6:	f8 01       	movw	r30, r16
    81b8:	22 83       	std	Z+2, r18	; 0x02
    81ba:	33 83       	std	Z+3, r19	; 0x03
    81bc:	20 91 d2 33 	lds	r18, 0x33D2
    81c0:	30 91 d3 33 	lds	r19, 0x33D3
    81c4:	40 91 d4 33 	lds	r20, 0x33D4
    81c8:	50 91 d5 33 	lds	r21, 0x33D5
    81cc:	62 1b       	sub	r22, r18
    81ce:	73 0b       	sbc	r23, r19
    81d0:	84 0b       	sbc	r24, r20
    81d2:	95 0b       	sbc	r25, r21
    81d4:	2c e3       	ldi	r18, 0x3C	; 60
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	40 e0       	ldi	r20, 0x00	; 0
    81da:	50 e0       	ldi	r21, 0x00	; 0
    81dc:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    81e0:	d8 01       	movw	r26, r16
    81e2:	14 96       	adiw	r26, 0x04	; 4
    81e4:	2d 93       	st	X+, r18
    81e6:	3d 93       	st	X+, r19
    81e8:	4d 93       	st	X+, r20
    81ea:	5c 93       	st	X, r21
    81ec:	17 97       	sbiw	r26, 0x07	; 7
    81ee:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
			display_putString(temp,0,0,System5x7);
    81f2:	ed b7       	in	r30, 0x3d	; 61
    81f4:	fe b7       	in	r31, 0x3e	; 62
    81f6:	38 96       	adiw	r30, 0x08	; 8
    81f8:	ed bf       	out	0x3d, r30	; 61
    81fa:	fe bf       	out	0x3e, r31	; 62
    81fc:	c7 01       	movw	r24, r14
    81fe:	02 c0       	rjmp	.+4      	; 0x8204 <__vector_77+0x386>
		} else {
			display_putString("Paused           ",0,0,System5x7);
    8200:	8e e2       	ldi	r24, 0x2E	; 46
    8202:	91 e2       	ldi	r25, 0x21	; 33
    8204:	60 e0       	ldi	r22, 0x00	; 0
    8206:	40 e0       	ldi	r20, 0x00	; 0
    8208:	20 e7       	ldi	r18, 0x70	; 112
    820a:	31 e3       	ldi	r19, 0x31	; 49
    820c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		}

		display_drawLine(1,60,7,60,true);		// up arrow
    8210:	81 e0       	ldi	r24, 0x01	; 1
    8212:	6c e3       	ldi	r22, 0x3C	; 60
    8214:	47 e0       	ldi	r20, 0x07	; 7
    8216:	2c e3       	ldi	r18, 0x3C	; 60
    8218:	01 e0       	ldi	r16, 0x01	; 1
    821a:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawPixel(2,59,true);
    821e:	82 e0       	ldi	r24, 0x02	; 2
    8220:	6b e3       	ldi	r22, 0x3B	; 59
    8222:	41 e0       	ldi	r20, 0x01	; 1
    8224:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,58,true);
    8228:	83 e0       	ldi	r24, 0x03	; 3
    822a:	6a e3       	ldi	r22, 0x3A	; 58
    822c:	41 e0       	ldi	r20, 0x01	; 1
    822e:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(2,61,true);
    8232:	82 e0       	ldi	r24, 0x02	; 2
    8234:	6d e3       	ldi	r22, 0x3D	; 61
    8236:	41 e0       	ldi	r20, 0x01	; 1
    8238:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,62,true);
    823c:	83 e0       	ldi	r24, 0x03	; 3
    823e:	6e e3       	ldi	r22, 0x3E	; 62
    8240:	41 e0       	ldi	r20, 0x01	; 1
    8242:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>

		sprintf(temp, "Uploading    %3u", uploadPercentBS);
    8246:	00 d0       	rcall	.+0      	; 0x8248 <__vector_77+0x3ca>
    8248:	00 d0       	rcall	.+0      	; 0x824a <__vector_77+0x3cc>
    824a:	ed b7       	in	r30, 0x3d	; 61
    824c:	fe b7       	in	r31, 0x3e	; 62
    824e:	31 96       	adiw	r30, 0x01	; 1
    8250:	0a e6       	ldi	r16, 0x6A	; 106
    8252:	1a e4       	ldi	r17, 0x4A	; 74
    8254:	ad b7       	in	r26, 0x3d	; 61
    8256:	be b7       	in	r27, 0x3e	; 62
    8258:	11 96       	adiw	r26, 0x01	; 1
    825a:	0d 93       	st	X+, r16
    825c:	1c 93       	st	X, r17
    825e:	12 97       	sbiw	r26, 0x02	; 2
    8260:	82 e5       	ldi	r24, 0x52	; 82
    8262:	91 e2       	ldi	r25, 0x21	; 33
    8264:	82 83       	std	Z+2, r24	; 0x02
    8266:	93 83       	std	Z+3, r25	; 0x03
    8268:	80 91 2f 34 	lds	r24, 0x342F
    826c:	84 83       	std	Z+4, r24	; 0x04
    826e:	15 82       	std	Z+5, r1	; 0x05
    8270:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		strcat(temp,"%");
    8274:	ed b7       	in	r30, 0x3d	; 61
    8276:	fe b7       	in	r31, 0x3e	; 62
    8278:	36 96       	adiw	r30, 0x06	; 6
    827a:	ed bf       	out	0x3d, r30	; 61
    827c:	fe bf       	out	0x3e, r31	; 62
    827e:	c8 01       	movw	r24, r16
    8280:	63 e6       	ldi	r22, 0x63	; 99
    8282:	71 e2       	ldi	r23, 0x21	; 33
    8284:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
		display_putString(temp,1,0,System5x7);
    8288:	c8 01       	movw	r24, r16
    828a:	61 e0       	ldi	r22, 0x01	; 1
    828c:	40 e0       	ldi	r20, 0x00	; 0
    828e:	20 e7       	ldi	r18, 0x70	; 112
    8290:	31 e3       	ldi	r19, 0x31	; 49
    8292:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>

        sprintf(temp, "Disk Used: %3u.%1u", ((uint8_t)percentDiskUsed)/10,((uint8_t)percentDiskUsed)%10);
    8296:	20 91 65 34 	lds	r18, 0x3465
    829a:	8d b7       	in	r24, 0x3d	; 61
    829c:	9e b7       	in	r25, 0x3e	; 62
    829e:	08 97       	sbiw	r24, 0x08	; 8
    82a0:	8d bf       	out	0x3d, r24	; 61
    82a2:	9e bf       	out	0x3e, r25	; 62
    82a4:	ed b7       	in	r30, 0x3d	; 61
    82a6:	fe b7       	in	r31, 0x3e	; 62
    82a8:	31 96       	adiw	r30, 0x01	; 1
    82aa:	ad b7       	in	r26, 0x3d	; 61
    82ac:	be b7       	in	r27, 0x3e	; 62
    82ae:	11 96       	adiw	r26, 0x01	; 1
    82b0:	0d 93       	st	X+, r16
    82b2:	1c 93       	st	X, r17
    82b4:	12 97       	sbiw	r26, 0x02	; 2
    82b6:	85 e6       	ldi	r24, 0x65	; 101
    82b8:	91 e2       	ldi	r25, 0x21	; 33
    82ba:	82 83       	std	Z+2, r24	; 0x02
    82bc:	93 83       	std	Z+3, r25	; 0x03
    82be:	82 2f       	mov	r24, r18
    82c0:	6a e0       	ldi	r22, 0x0A	; 10
    82c2:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    82c6:	84 83       	std	Z+4, r24	; 0x04
    82c8:	15 82       	std	Z+5, r1	; 0x05
    82ca:	82 2f       	mov	r24, r18
    82cc:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    82d0:	96 83       	std	Z+6, r25	; 0x06
    82d2:	17 82       	std	Z+7, r1	; 0x07
    82d4:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		strcat(temp,"%");
    82d8:	ed b7       	in	r30, 0x3d	; 61
    82da:	fe b7       	in	r31, 0x3e	; 62
    82dc:	38 96       	adiw	r30, 0x08	; 8
    82de:	ed bf       	out	0x3d, r30	; 61
    82e0:	fe bf       	out	0x3e, r31	; 62
    82e2:	c8 01       	movw	r24, r16
    82e4:	63 e6       	ldi	r22, 0x63	; 99
    82e6:	71 e2       	ldi	r23, 0x21	; 33
    82e8:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
		display_putString(temp,2,0,System5x7);
    82ec:	c8 01       	movw	r24, r16
    82ee:	62 e0       	ldi	r22, 0x02	; 2
    82f0:	40 e0       	ldi	r20, 0x00	; 0
    82f2:	20 e7       	ldi	r18, 0x70	; 112
    82f4:	31 e3       	ldi	r19, 0x31	; 49
    82f6:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>




		if(chargePercent == 100){
    82fa:	80 91 fc 33 	lds	r24, 0x33FC
    82fe:	84 36       	cpi	r24, 0x64	; 100
    8300:	29 f4       	brne	.+10     	; 0x830c <__vector_77+0x48e>
			chargeComplete = true;
    8302:	81 e0       	ldi	r24, 0x01	; 1
    8304:	80 93 ff 33 	sts	0x33FF, r24
			okToCharge  = false;
    8308:	10 92 00 34 	sts	0x3400, r1
    830c:	80 91 a8 06 	lds	r24, 0x06A8
    8310:	81 fd       	sbrc	r24, 1
    8312:	13 c0       	rjmp	.+38     	; 0x833a <__vector_77+0x4bc>
    8314:	18 c3       	rjmp	.+1584   	; 0x8946 <__vector_77+0xac8>
		}


		if(SD2_Inserted() && chargeComplete){
			display_putString("Ext Charged      ",3,0,System5x7);
    8316:	88 e7       	ldi	r24, 0x78	; 120
    8318:	91 e2       	ldi	r25, 0x21	; 33
    831a:	63 e0       	ldi	r22, 0x03	; 3
    831c:	40 e0       	ldi	r20, 0x00	; 0
    831e:	20 e7       	ldi	r18, 0x70	; 112
    8320:	31 e3       	ldi	r19, 0x31	; 49
    8322:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
			if(!recording){
    8326:	80 91 06 34 	lds	r24, 0x3406
    832a:	88 23       	and	r24, r24
    832c:	09 f0       	breq	.+2      	; 0x8330 <__vector_77+0x4b2>
    832e:	85 c0       	rjmp	.+266    	; 0x843a <__vector_77+0x5bc>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8330:	e0 e2       	ldi	r30, 0x20	; 32
    8332:	f6 e0       	ldi	r31, 0x06	; 6
    8334:	80 e2       	ldi	r24, 0x20	; 32
    8336:	86 83       	std	Z+6, r24	; 0x06
    8338:	69 c0       	rjmp	.+210    	; 0x840c <__vector_77+0x58e>
    833a:	80 91 a8 06 	lds	r24, 0x06A8
    833e:	81 fd       	sbrc	r24, 1
    8340:	68 c0       	rjmp	.+208    	; 0x8412 <__vector_77+0x594>
    8342:	07 c3       	rjmp	.+1550   	; 0x8952 <__vector_77+0xad4>
				Leds_Clear(ext_Red);
				Leds_Set(ext_Green);
			}
		} else if(SD2_Inserted() && !chargeComplete){
			sprintf(temp, "Ext Charging  %2u",chargePercent);
    8344:	00 d0       	rcall	.+0      	; 0x8346 <__vector_77+0x4c8>
    8346:	00 d0       	rcall	.+0      	; 0x8348 <__vector_77+0x4ca>
    8348:	ed b7       	in	r30, 0x3d	; 61
    834a:	fe b7       	in	r31, 0x3e	; 62
    834c:	31 96       	adiw	r30, 0x01	; 1
    834e:	0a e6       	ldi	r16, 0x6A	; 106
    8350:	1a e4       	ldi	r17, 0x4A	; 74
    8352:	ad b7       	in	r26, 0x3d	; 61
    8354:	be b7       	in	r27, 0x3e	; 62
    8356:	11 96       	adiw	r26, 0x01	; 1
    8358:	0d 93       	st	X+, r16
    835a:	1c 93       	st	X, r17
    835c:	12 97       	sbiw	r26, 0x02	; 2
    835e:	8a e8       	ldi	r24, 0x8A	; 138
    8360:	91 e2       	ldi	r25, 0x21	; 33
    8362:	82 83       	std	Z+2, r24	; 0x02
    8364:	93 83       	std	Z+3, r25	; 0x03
    8366:	80 91 fc 33 	lds	r24, 0x33FC
    836a:	84 83       	std	Z+4, r24	; 0x04
    836c:	15 82       	std	Z+5, r1	; 0x05
    836e:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
			strcat(temp,"%");
    8372:	ed b7       	in	r30, 0x3d	; 61
    8374:	fe b7       	in	r31, 0x3e	; 62
    8376:	36 96       	adiw	r30, 0x06	; 6
    8378:	ed bf       	out	0x3d, r30	; 61
    837a:	fe bf       	out	0x3e, r31	; 62
    837c:	c8 01       	movw	r24, r16
    837e:	63 e6       	ldi	r22, 0x63	; 99
    8380:	71 e2       	ldi	r23, 0x21	; 33
    8382:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
			display_putString(temp,3,0,System5x7);
    8386:	c8 01       	movw	r24, r16
    8388:	63 e0       	ldi	r22, 0x03	; 3
    838a:	40 e0       	ldi	r20, 0x00	; 0
    838c:	20 e7       	ldi	r18, 0x70	; 112
    838e:	31 e3       	ldi	r19, 0x31	; 49
    8390:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
			okToCharge = true;
    8394:	81 e0       	ldi	r24, 0x01	; 1
    8396:	80 93 00 34 	sts	0x3400, r24
			if(!rtcSynced){
    839a:	80 91 31 34 	lds	r24, 0x3431
    839e:	88 23       	and	r24, r24
    83a0:	69 f5       	brne	.+90     	; 0x83fc <__vector_77+0x57e>
    83a2:	88 e8       	ldi	r24, 0x88	; 136
    83a4:	93 e1       	ldi	r25, 0x13	; 19
    83a6:	20 e7       	ldi	r18, 0x70	; 112
    83a8:	31 e0       	ldi	r19, 0x01	; 1
    83aa:	f9 01       	movw	r30, r18
    83ac:	31 97       	sbiw	r30, 0x01	; 1
    83ae:	f1 f7       	brne	.-4      	; 0x83ac <__vector_77+0x52e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83b2:	d9 f7       	brne	.-10     	; 0x83aa <__vector_77+0x52c>
			    _delay_ms(500);
				Debug_SendString("Syncing RTC", true);
    83b4:	8c e9       	ldi	r24, 0x9C	; 156
    83b6:	91 e2       	ldi	r25, 0x21	; 33
    83b8:	61 e0       	ldi	r22, 0x01	; 1
    83ba:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    83be:	e0 ea       	ldi	r30, 0xA0	; 160
    83c0:	f4 e0       	ldi	r31, 0x04	; 4
    83c2:	88 e0       	ldi	r24, 0x08	; 8
    83c4:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    83c6:	84 e0       	ldi	r24, 0x04	; 4
    83c8:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    83ca:	8f e0       	ldi	r24, 0x0F	; 15
    83cc:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    83ce:	11 e0       	ldi	r17, 0x01	; 1
    83d0:	14 83       	std	Z+4, r17	; 0x04
				RTC_init();

				RTC_setUTCSecs(UNIX_time+5);
    83d2:	60 91 01 34 	lds	r22, 0x3401
    83d6:	70 91 02 34 	lds	r23, 0x3402
    83da:	80 91 03 34 	lds	r24, 0x3403
    83de:	90 91 04 34 	lds	r25, 0x3404
    83e2:	6b 5f       	subi	r22, 0xFB	; 251
    83e4:	7f 4f       	sbci	r23, 0xFF	; 255
    83e6:	8f 4f       	sbci	r24, 0xFF	; 255
    83e8:	9f 4f       	sbci	r25, 0xFF	; 255
    83ea:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <RTC_setUTCSecs>
				rtcSynced = true;
    83ee:	10 93 31 34 	sts	0x3431, r17
				Debug_SendString("RTC synced", true);
    83f2:	88 ea       	ldi	r24, 0xA8	; 168
    83f4:	91 e2       	ldi	r25, 0x21	; 33
    83f6:	61 e0       	ldi	r22, 0x01	; 1
    83f8:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
			}
			if(!recording){
    83fc:	80 91 06 34 	lds	r24, 0x3406
    8400:	88 23       	and	r24, r24
    8402:	d9 f4       	brne	.+54     	; 0x843a <__vector_77+0x5bc>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8404:	e0 e2       	ldi	r30, 0x20	; 32
    8406:	f6 e0       	ldi	r31, 0x06	; 6
    8408:	80 e2       	ldi	r24, 0x20	; 32
    840a:	85 83       	std	Z+5, r24	; 0x05
				Leds_Set(ext_Red);
				Leds_Set(ext_Green);
			}
		}else{
			display_putString("Ext Removed      ",3,0,System5x7);
    840c:	80 e1       	ldi	r24, 0x10	; 16
    840e:	85 83       	std	Z+5, r24	; 0x05
    8410:	14 c0       	rjmp	.+40     	; 0x843a <__vector_77+0x5bc>
    8412:	83 eb       	ldi	r24, 0xB3	; 179
    8414:	91 e2       	ldi	r25, 0x21	; 33
    8416:	63 e0       	ldi	r22, 0x03	; 3
    8418:	40 e0       	ldi	r20, 0x00	; 0
    841a:	20 e7       	ldi	r18, 0x70	; 112
    841c:	31 e3       	ldi	r19, 0x31	; 49
    841e:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
			chargePercent = 0;
    8422:	10 92 fc 33 	sts	0x33FC, r1
			chargeComplete = false;
    8426:	10 92 ff 33 	sts	0x33FF, r1
			rtcSynced = false;
    842a:	10 92 31 34 	sts	0x3431, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    842e:	e0 e2       	ldi	r30, 0x20	; 32
    8430:	f6 e0       	ldi	r31, 0x06	; 6
    8432:	80 e2       	ldi	r24, 0x20	; 32
    8434:	86 83       	std	Z+6, r24	; 0x06
			Leds_Clear(ext_Red);
			Leds_Clear(ext_Green);
		}


		sprintf(temp, "Uploading    %3u", uploadPercentEXT);
    8436:	80 e1       	ldi	r24, 0x10	; 16
    8438:	86 83       	std	Z+6, r24	; 0x06
    843a:	00 d0       	rcall	.+0      	; 0x843c <__vector_77+0x5be>
    843c:	00 d0       	rcall	.+0      	; 0x843e <__vector_77+0x5c0>
    843e:	ed b7       	in	r30, 0x3d	; 61
    8440:	fe b7       	in	r31, 0x3e	; 62
    8442:	31 96       	adiw	r30, 0x01	; 1
    8444:	0a e6       	ldi	r16, 0x6A	; 106
    8446:	1a e4       	ldi	r17, 0x4A	; 74
    8448:	ad b7       	in	r26, 0x3d	; 61
    844a:	be b7       	in	r27, 0x3e	; 62
    844c:	11 96       	adiw	r26, 0x01	; 1
    844e:	0d 93       	st	X+, r16
    8450:	1c 93       	st	X, r17
    8452:	12 97       	sbiw	r26, 0x02	; 2
    8454:	82 e5       	ldi	r24, 0x52	; 82
    8456:	91 e2       	ldi	r25, 0x21	; 33
    8458:	82 83       	std	Z+2, r24	; 0x02
    845a:	93 83       	std	Z+3, r25	; 0x03
    845c:	80 91 30 34 	lds	r24, 0x3430
    8460:	84 83       	std	Z+4, r24	; 0x04
    8462:	15 82       	std	Z+5, r1	; 0x05
    8464:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		strcat(temp,"%");
    8468:	ed b7       	in	r30, 0x3d	; 61
    846a:	fe b7       	in	r31, 0x3e	; 62
    846c:	36 96       	adiw	r30, 0x06	; 6
    846e:	ed bf       	out	0x3d, r30	; 61
    8470:	fe bf       	out	0x3e, r31	; 62
    8472:	c8 01       	movw	r24, r16
    8474:	63 e6       	ldi	r22, 0x63	; 99
    8476:	71 e2       	ldi	r23, 0x21	; 33
    8478:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
		display_putString(temp,4,0,System5x7);
    847c:	c8 01       	movw	r24, r16
    847e:	64 e0       	ldi	r22, 0x04	; 4
    8480:	40 e0       	ldi	r20, 0x00	; 0
    8482:	20 e7       	ldi	r18, 0x70	; 112
    8484:	31 e3       	ldi	r19, 0x31	; 49
    8486:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>

		RTC_UTCSecsToTime(UNIX_time,&time);
    848a:	60 91 01 34 	lds	r22, 0x3401
    848e:	70 91 02 34 	lds	r23, 0x3402
    8492:	80 91 03 34 	lds	r24, 0x3403
    8496:	90 91 04 34 	lds	r25, 0x3404
    849a:	46 e5       	ldi	r20, 0x56	; 86
    849c:	5f e4       	ldi	r21, 0x4F	; 79
    849e:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <RTC_UTCSecsToTime>
		clockHour = time.Hour + 24;
		clockHour -= timeZoneShift;
    84a2:	90 91 59 4f 	lds	r25, 0x4F59
    84a6:	98 5e       	subi	r25, 0xE8	; 232
    84a8:	80 91 29 34 	lds	r24, 0x3429
    84ac:	98 1b       	sub	r25, r24
    84ae:	90 93 2a 34 	sts	0x342A, r25
		if(clockHour > 24){
    84b2:	99 31       	cpi	r25, 0x19	; 25
    84b4:	18 f0       	brcs	.+6      	; 0x84bc <__vector_77+0x63e>
			clockHour -= 24;
    84b6:	98 51       	subi	r25, 0x18	; 24
    84b8:	90 93 2a 34 	sts	0x342A, r25
		}

        if(clockHour == 0){
    84bc:	90 91 2a 34 	lds	r25, 0x342A
    84c0:	99 23       	and	r25, r25
    84c2:	49 f4       	brne	.+18     	; 0x84d6 <__vector_77+0x658>
            displayAM = true;
    84c4:	81 e0       	ldi	r24, 0x01	; 1
    84c6:	80 93 44 34 	sts	0x3444, r24
            displayPM = false;
    84ca:	10 92 45 34 	sts	0x3445, r1
            clockHour += 12;
    84ce:	8c e0       	ldi	r24, 0x0C	; 12
    84d0:	80 93 2a 34 	sts	0x342A, r24
    84d4:	18 c0       	rjmp	.+48     	; 0x8506 <__vector_77+0x688>
        } else if(clockHour == 12){
    84d6:	9c 30       	cpi	r25, 0x0C	; 12
    84d8:	31 f4       	brne	.+12     	; 0x84e6 <__vector_77+0x668>
           displayAM = false;
    84da:	10 92 44 34 	sts	0x3444, r1
           displayPM = true;
    84de:	81 e0       	ldi	r24, 0x01	; 1
    84e0:	80 93 45 34 	sts	0x3445, r24
    84e4:	10 c0       	rjmp	.+32     	; 0x8506 <__vector_77+0x688>
        } else if(clockHour > 12){
    84e6:	9d 30       	cpi	r25, 0x0D	; 13
    84e8:	48 f0       	brcs	.+18     	; 0x84fc <__vector_77+0x67e>
           displayAM = false;
    84ea:	10 92 44 34 	sts	0x3444, r1
           displayPM = true;
    84ee:	81 e0       	ldi	r24, 0x01	; 1
    84f0:	80 93 45 34 	sts	0x3445, r24
           clockHour -= 12;
    84f4:	9c 50       	subi	r25, 0x0C	; 12
    84f6:	90 93 2a 34 	sts	0x342A, r25
    84fa:	05 c0       	rjmp	.+10     	; 0x8506 <__vector_77+0x688>
        }  else {
           displayAM = true;
    84fc:	81 e0       	ldi	r24, 0x01	; 1
    84fe:	80 93 44 34 	sts	0x3444, r24
           displayPM = false;
    8502:	10 92 45 34 	sts	0x3445, r1
        }

        sprintf(temp,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    8506:	2d b7       	in	r18, 0x3d	; 61
    8508:	3e b7       	in	r19, 0x3e	; 62
    850a:	2a 50       	subi	r18, 0x0A	; 10
    850c:	30 40       	sbci	r19, 0x00	; 0
    850e:	2d bf       	out	0x3d, r18	; 61
    8510:	3e bf       	out	0x3e, r19	; 62
    8512:	ed b7       	in	r30, 0x3d	; 61
    8514:	fe b7       	in	r31, 0x3e	; 62
    8516:	31 96       	adiw	r30, 0x01	; 1
    8518:	0a e6       	ldi	r16, 0x6A	; 106
    851a:	1a e4       	ldi	r17, 0x4A	; 74
    851c:	ad b7       	in	r26, 0x3d	; 61
    851e:	be b7       	in	r27, 0x3e	; 62
    8520:	11 96       	adiw	r26, 0x01	; 1
    8522:	0d 93       	st	X+, r16
    8524:	1c 93       	st	X, r17
    8526:	12 97       	sbiw	r26, 0x02	; 2
    8528:	85 ec       	ldi	r24, 0xC5	; 197
    852a:	91 e2       	ldi	r25, 0x21	; 33
    852c:	82 83       	std	Z+2, r24	; 0x02
    852e:	93 83       	std	Z+3, r25	; 0x03
    8530:	80 91 2a 34 	lds	r24, 0x342A
    8534:	84 83       	std	Z+4, r24	; 0x04
    8536:	15 82       	std	Z+5, r1	; 0x05
    8538:	80 91 58 4f 	lds	r24, 0x4F58
    853c:	86 83       	std	Z+6, r24	; 0x06
    853e:	17 82       	std	Z+7, r1	; 0x07
    8540:	80 91 57 4f 	lds	r24, 0x4F57
    8544:	80 87       	std	Z+8, r24	; 0x08
    8546:	11 86       	std	Z+9, r1	; 0x09
    8548:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
        if(displayAM){
    854c:	80 91 44 34 	lds	r24, 0x3444
    8550:	ed b7       	in	r30, 0x3d	; 61
    8552:	fe b7       	in	r31, 0x3e	; 62
    8554:	3a 96       	adiw	r30, 0x0a	; 10
    8556:	ed bf       	out	0x3d, r30	; 61
    8558:	fe bf       	out	0x3e, r31	; 62
    855a:	88 23       	and	r24, r24
    855c:	21 f0       	breq	.+8      	; 0x8566 <__vector_77+0x6e8>
          strcat(temp,am);
    855e:	c8 01       	movw	r24, r16
    8560:	64 e6       	ldi	r22, 0x64	; 100
    8562:	71 e3       	ldi	r23, 0x31	; 49
    8564:	07 c0       	rjmp	.+14     	; 0x8574 <__vector_77+0x6f6>
        } else if(displayPM){
    8566:	80 91 45 34 	lds	r24, 0x3445
    856a:	88 23       	and	r24, r24
    856c:	29 f0       	breq	.+10     	; 0x8578 <__vector_77+0x6fa>
          strcat(temp,pm);
    856e:	c8 01       	movw	r24, r16
    8570:	69 e6       	ldi	r22, 0x69	; 105
    8572:	71 e3       	ldi	r23, 0x31	; 49
    8574:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
        }
		display_putString(temp,6,0,System5x7);
    8578:	0a e6       	ldi	r16, 0x6A	; 106
    857a:	1a e4       	ldi	r17, 0x4A	; 74
    857c:	c8 01       	movw	r24, r16
    857e:	66 e0       	ldi	r22, 0x06	; 6
    8580:	40 e0       	ldi	r20, 0x00	; 0
    8582:	20 e7       	ldi	r18, 0x70	; 112
    8584:	31 e3       	ldi	r19, 0x31	; 49
    8586:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>

		sprintf(temp, "Wifi %3u",signalStrength);
    858a:	00 d0       	rcall	.+0      	; 0x858c <__vector_77+0x70e>
    858c:	00 d0       	rcall	.+0      	; 0x858e <__vector_77+0x710>
    858e:	ed b7       	in	r30, 0x3d	; 61
    8590:	fe b7       	in	r31, 0x3e	; 62
    8592:	31 96       	adiw	r30, 0x01	; 1
    8594:	ad b7       	in	r26, 0x3d	; 61
    8596:	be b7       	in	r27, 0x3e	; 62
    8598:	11 96       	adiw	r26, 0x01	; 1
    859a:	0d 93       	st	X+, r16
    859c:	1c 93       	st	X, r17
    859e:	12 97       	sbiw	r26, 0x02	; 2
    85a0:	89 ed       	ldi	r24, 0xD9	; 217
    85a2:	91 e2       	ldi	r25, 0x21	; 33
    85a4:	82 83       	std	Z+2, r24	; 0x02
    85a6:	93 83       	std	Z+3, r25	; 0x03
    85a8:	80 91 2e 34 	lds	r24, 0x342E
    85ac:	84 83       	std	Z+4, r24	; 0x04
    85ae:	15 82       	std	Z+5, r1	; 0x05
    85b0:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		strcat(temp,"%   more");
    85b4:	ed b7       	in	r30, 0x3d	; 61
    85b6:	fe b7       	in	r31, 0x3e	; 62
    85b8:	36 96       	adiw	r30, 0x06	; 6
    85ba:	ed bf       	out	0x3d, r30	; 61
    85bc:	fe bf       	out	0x3e, r31	; 62
    85be:	c8 01       	movw	r24, r16
    85c0:	62 ee       	ldi	r22, 0xE2	; 226
    85c2:	71 e2       	ldi	r23, 0x21	; 33
    85c4:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
		display_putString(temp,7,0,System5x7);
    85c8:	c8 01       	movw	r24, r16
    85ca:	67 e0       	ldi	r22, 0x07	; 7
    85cc:	40 e0       	ldi	r20, 0x00	; 0
    85ce:	20 e7       	ldi	r18, 0x70	; 112
    85d0:	31 e3       	ldi	r19, 0x31	; 49
    85d2:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>


		display_drawLine(56,98,63,98,true);		// down arrow
    85d6:	88 e3       	ldi	r24, 0x38	; 56
    85d8:	62 e6       	ldi	r22, 0x62	; 98
    85da:	4f e3       	ldi	r20, 0x3F	; 63
    85dc:	22 e6       	ldi	r18, 0x62	; 98
    85de:	01 e0       	ldi	r16, 0x01	; 1
    85e0:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawPixel(62,97,true);
    85e4:	8e e3       	ldi	r24, 0x3E	; 62
    85e6:	61 e6       	ldi	r22, 0x61	; 97
    85e8:	41 e0       	ldi	r20, 0x01	; 1
    85ea:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(61,96,true);
    85ee:	8d e3       	ldi	r24, 0x3D	; 61
    85f0:	60 e6       	ldi	r22, 0x60	; 96
    85f2:	41 e0       	ldi	r20, 0x01	; 1
    85f4:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(62,99,true);
    85f8:	8e e3       	ldi	r24, 0x3E	; 62
    85fa:	63 e6       	ldi	r22, 0x63	; 99
    85fc:	41 e0       	ldi	r20, 0x01	; 1
    85fe:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(61,100,true);
    8602:	8d e3       	ldi	r24, 0x3D	; 61
    8604:	64 e6       	ldi	r22, 0x64	; 100
    8606:	41 e0       	ldi	r20, 0x01	; 1
    8608:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>

		display_writeBufferToScreen();
    860c:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    8610:	b2 c1       	rjmp	.+868    	; 0x8976 <__vector_77+0xaf8>



	} else if(currentMode == sensorMode){																// show sensor screen
    8612:	f0 90 2b 34 	lds	r15, 0x342B
    8616:	f1 e0       	ldi	r31, 0x01	; 1
    8618:	ff 16       	cp	r15, r31
    861a:	09 f0       	breq	.+2      	; 0x861e <__vector_77+0x7a0>
    861c:	ac c1       	rjmp	.+856    	; 0x8976 <__vector_77+0xaf8>

		display_clearBuffer();
    861e:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <display_clearBuffer>
		display_putString("   Sensors  back",0,0,System5x7);
    8622:	8b ee       	ldi	r24, 0xEB	; 235
    8624:	91 e2       	ldi	r25, 0x21	; 33
    8626:	60 e0       	ldi	r22, 0x00	; 0
    8628:	40 e0       	ldi	r20, 0x00	; 0
    862a:	20 e7       	ldi	r18, 0x70	; 112
    862c:	31 e3       	ldi	r19, 0x31	; 49
    862e:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		display_drawLine(8, 15, 8,61,true);
    8632:	88 e0       	ldi	r24, 0x08	; 8
    8634:	6f e0       	ldi	r22, 0x0F	; 15
    8636:	48 e0       	ldi	r20, 0x08	; 8
    8638:	2d e3       	ldi	r18, 0x3D	; 61
    863a:	01 e0       	ldi	r16, 0x01	; 1
    863c:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>

		display_drawLine(1,99,7,99,true);		// up arrow
    8640:	81 e0       	ldi	r24, 0x01	; 1
    8642:	63 e6       	ldi	r22, 0x63	; 99
    8644:	47 e0       	ldi	r20, 0x07	; 7
    8646:	23 e6       	ldi	r18, 0x63	; 99
    8648:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <display_drawLine>
		display_drawPixel(2,98,true);
    864c:	82 e0       	ldi	r24, 0x02	; 2
    864e:	62 e6       	ldi	r22, 0x62	; 98
    8650:	41 e0       	ldi	r20, 0x01	; 1
    8652:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,97,true);
    8656:	83 e0       	ldi	r24, 0x03	; 3
    8658:	61 e6       	ldi	r22, 0x61	; 97
    865a:	41 e0       	ldi	r20, 0x01	; 1
    865c:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(2,100,true);
    8660:	82 e0       	ldi	r24, 0x02	; 2
    8662:	64 e6       	ldi	r22, 0x64	; 100
    8664:	41 e0       	ldi	r20, 0x01	; 1
    8666:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>
		display_drawPixel(3,101,true);
    866a:	83 e0       	ldi	r24, 0x03	; 3
    866c:	65 e6       	ldi	r22, 0x65	; 101
    866e:	41 e0       	ldi	r20, 0x01	; 1
    8670:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <display_drawPixel>

		sprintf(temp,"Temperature: %3uC", quickTemperature);
    8674:	00 d0       	rcall	.+0      	; 0x8676 <__vector_77+0x7f8>
    8676:	00 d0       	rcall	.+0      	; 0x8678 <__vector_77+0x7fa>
    8678:	ed b7       	in	r30, 0x3d	; 61
    867a:	fe b7       	in	r31, 0x3e	; 62
    867c:	31 96       	adiw	r30, 0x01	; 1
    867e:	0a e6       	ldi	r16, 0x6A	; 106
    8680:	1a e4       	ldi	r17, 0x4A	; 74
    8682:	ad b7       	in	r26, 0x3d	; 61
    8684:	be b7       	in	r27, 0x3e	; 62
    8686:	11 96       	adiw	r26, 0x01	; 1
    8688:	0d 93       	st	X+, r16
    868a:	1c 93       	st	X, r17
    868c:	12 97       	sbiw	r26, 0x02	; 2
    868e:	8c ef       	ldi	r24, 0xFC	; 252
    8690:	91 e2       	ldi	r25, 0x21	; 33
    8692:	82 83       	std	Z+2, r24	; 0x02
    8694:	93 83       	std	Z+3, r25	; 0x03
    8696:	80 91 1b 34 	lds	r24, 0x341B
    869a:	84 83       	std	Z+4, r24	; 0x04
    869c:	15 82       	std	Z+5, r1	; 0x05
    869e:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		display_putString(temp,2,0,System5x7);
    86a2:	ed b7       	in	r30, 0x3d	; 61
    86a4:	fe b7       	in	r31, 0x3e	; 62
    86a6:	36 96       	adiw	r30, 0x06	; 6
    86a8:	ed bf       	out	0x3d, r30	; 61
    86aa:	fe bf       	out	0x3e, r31	; 62
    86ac:	c8 01       	movw	r24, r16
    86ae:	62 e0       	ldi	r22, 0x02	; 2
    86b0:	40 e0       	ldi	r20, 0x00	; 0
    86b2:	20 e7       	ldi	r18, 0x70	; 112
    86b4:	31 e3       	ldi	r19, 0x31	; 49
    86b6:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		sprintf(temp,"Humidity:  %3u", quickHumidity);
    86ba:	00 d0       	rcall	.+0      	; 0x86bc <__vector_77+0x83e>
    86bc:	00 d0       	rcall	.+0      	; 0x86be <__vector_77+0x840>
    86be:	ed b7       	in	r30, 0x3d	; 61
    86c0:	fe b7       	in	r31, 0x3e	; 62
    86c2:	31 96       	adiw	r30, 0x01	; 1
    86c4:	ad b7       	in	r26, 0x3d	; 61
    86c6:	be b7       	in	r27, 0x3e	; 62
    86c8:	11 96       	adiw	r26, 0x01	; 1
    86ca:	0d 93       	st	X+, r16
    86cc:	1c 93       	st	X, r17
    86ce:	12 97       	sbiw	r26, 0x02	; 2
    86d0:	8e e0       	ldi	r24, 0x0E	; 14
    86d2:	92 e2       	ldi	r25, 0x22	; 34
    86d4:	82 83       	std	Z+2, r24	; 0x02
    86d6:	93 83       	std	Z+3, r25	; 0x03
    86d8:	80 91 1c 34 	lds	r24, 0x341C
    86dc:	84 83       	std	Z+4, r24	; 0x04
    86de:	15 82       	std	Z+5, r1	; 0x05
    86e0:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		strcat(temp, "%RH");
    86e4:	ed b7       	in	r30, 0x3d	; 61
    86e6:	fe b7       	in	r31, 0x3e	; 62
    86e8:	36 96       	adiw	r30, 0x06	; 6
    86ea:	ed bf       	out	0x3d, r30	; 61
    86ec:	fe bf       	out	0x3e, r31	; 62
    86ee:	c8 01       	movw	r24, r16
    86f0:	6d e1       	ldi	r22, 0x1D	; 29
    86f2:	72 e2       	ldi	r23, 0x22	; 34
    86f4:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
		display_putString(temp,3,0,System5x7);
    86f8:	c8 01       	movw	r24, r16
    86fa:	63 e0       	ldi	r22, 0x03	; 3
    86fc:	40 e0       	ldi	r20, 0x00	; 0
    86fe:	20 e7       	ldi	r18, 0x70	; 112
    8700:	31 e3       	ldi	r19, 0x31	; 49
    8702:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		sprintf(temp,"Pressure:  %3ukPa", quickPressure);
    8706:	00 d0       	rcall	.+0      	; 0x8708 <__vector_77+0x88a>
    8708:	00 d0       	rcall	.+0      	; 0x870a <__vector_77+0x88c>
    870a:	ed b7       	in	r30, 0x3d	; 61
    870c:	fe b7       	in	r31, 0x3e	; 62
    870e:	31 96       	adiw	r30, 0x01	; 1
    8710:	ad b7       	in	r26, 0x3d	; 61
    8712:	be b7       	in	r27, 0x3e	; 62
    8714:	11 96       	adiw	r26, 0x01	; 1
    8716:	0d 93       	st	X+, r16
    8718:	1c 93       	st	X, r17
    871a:	12 97       	sbiw	r26, 0x02	; 2
    871c:	81 e2       	ldi	r24, 0x21	; 33
    871e:	92 e2       	ldi	r25, 0x22	; 34
    8720:	82 83       	std	Z+2, r24	; 0x02
    8722:	93 83       	std	Z+3, r25	; 0x03
    8724:	80 91 1d 34 	lds	r24, 0x341D
    8728:	84 83       	std	Z+4, r24	; 0x04
    872a:	15 82       	std	Z+5, r1	; 0x05
    872c:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		display_putString(temp,4,0,System5x7);
    8730:	ed b7       	in	r30, 0x3d	; 61
    8732:	fe b7       	in	r31, 0x3e	; 62
    8734:	36 96       	adiw	r30, 0x06	; 6
    8736:	ed bf       	out	0x3d, r30	; 61
    8738:	fe bf       	out	0x3e, r31	; 62
    873a:	c8 01       	movw	r24, r16
    873c:	64 e0       	ldi	r22, 0x04	; 4
    873e:	40 e0       	ldi	r20, 0x00	; 0
    8740:	20 e7       	ldi	r18, 0x70	; 112
    8742:	31 e3       	ldi	r19, 0x31	; 49
    8744:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		sprintf(temp,"Light:      %5u", quickLight);
    8748:	00 d0       	rcall	.+0      	; 0x874a <__vector_77+0x8cc>
    874a:	00 d0       	rcall	.+0      	; 0x874c <__vector_77+0x8ce>
    874c:	ed b7       	in	r30, 0x3d	; 61
    874e:	fe b7       	in	r31, 0x3e	; 62
    8750:	31 96       	adiw	r30, 0x01	; 1
    8752:	ad b7       	in	r26, 0x3d	; 61
    8754:	be b7       	in	r27, 0x3e	; 62
    8756:	11 96       	adiw	r26, 0x01	; 1
    8758:	0d 93       	st	X+, r16
    875a:	1c 93       	st	X, r17
    875c:	12 97       	sbiw	r26, 0x02	; 2
    875e:	83 e3       	ldi	r24, 0x33	; 51
    8760:	92 e2       	ldi	r25, 0x22	; 34
    8762:	82 83       	std	Z+2, r24	; 0x02
    8764:	93 83       	std	Z+3, r25	; 0x03
    8766:	80 91 1e 34 	lds	r24, 0x341E
    876a:	90 91 1f 34 	lds	r25, 0x341F
    876e:	84 83       	std	Z+4, r24	; 0x04
    8770:	95 83       	std	Z+5, r25	; 0x05
    8772:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		display_putString(temp,5,0,System5x7);
    8776:	ed b7       	in	r30, 0x3d	; 61
    8778:	fe b7       	in	r31, 0x3e	; 62
    877a:	36 96       	adiw	r30, 0x06	; 6
    877c:	ed bf       	out	0x3d, r30	; 61
    877e:	fe bf       	out	0x3e, r31	; 62
    8780:	c8 01       	movw	r24, r16
    8782:	65 e0       	ldi	r22, 0x05	; 5
    8784:	40 e0       	ldi	r20, 0x00	; 0
    8786:	20 e7       	ldi	r18, 0x70	; 112
    8788:	31 e3       	ldi	r19, 0x31	; 49
    878a:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		sprintf(temp,"Air: %5lu, %5lu", quickSmall, quickLarge);
    878e:	2d b7       	in	r18, 0x3d	; 61
    8790:	3e b7       	in	r19, 0x3e	; 62
    8792:	2c 50       	subi	r18, 0x0C	; 12
    8794:	30 40       	sbci	r19, 0x00	; 0
    8796:	2d bf       	out	0x3d, r18	; 61
    8798:	3e bf       	out	0x3e, r19	; 62
    879a:	ed b7       	in	r30, 0x3d	; 61
    879c:	fe b7       	in	r31, 0x3e	; 62
    879e:	31 96       	adiw	r30, 0x01	; 1
    87a0:	ad b7       	in	r26, 0x3d	; 61
    87a2:	be b7       	in	r27, 0x3e	; 62
    87a4:	11 96       	adiw	r26, 0x01	; 1
    87a6:	0d 93       	st	X+, r16
    87a8:	1c 93       	st	X, r17
    87aa:	12 97       	sbiw	r26, 0x02	; 2
    87ac:	83 e4       	ldi	r24, 0x43	; 67
    87ae:	92 e2       	ldi	r25, 0x22	; 34
    87b0:	82 83       	std	Z+2, r24	; 0x02
    87b2:	93 83       	std	Z+3, r25	; 0x03
    87b4:	80 91 f3 33 	lds	r24, 0x33F3
    87b8:	90 91 f4 33 	lds	r25, 0x33F4
    87bc:	a0 91 f5 33 	lds	r26, 0x33F5
    87c0:	b0 91 f6 33 	lds	r27, 0x33F6
    87c4:	84 83       	std	Z+4, r24	; 0x04
    87c6:	95 83       	std	Z+5, r25	; 0x05
    87c8:	a6 83       	std	Z+6, r26	; 0x06
    87ca:	b7 83       	std	Z+7, r27	; 0x07
    87cc:	80 91 f7 33 	lds	r24, 0x33F7
    87d0:	90 91 f8 33 	lds	r25, 0x33F8
    87d4:	a0 91 f9 33 	lds	r26, 0x33F9
    87d8:	b0 91 fa 33 	lds	r27, 0x33FA
    87dc:	80 87       	std	Z+8, r24	; 0x08
    87de:	91 87       	std	Z+9, r25	; 0x09
    87e0:	a2 87       	std	Z+10, r26	; 0x0a
    87e2:	b3 87       	std	Z+11, r27	; 0x0b
    87e4:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
		display_putString(temp,6,0,System5x7);
    87e8:	ed b7       	in	r30, 0x3d	; 61
    87ea:	fe b7       	in	r31, 0x3e	; 62
    87ec:	3c 96       	adiw	r30, 0x0c	; 12
    87ee:	ed bf       	out	0x3d, r30	; 61
    87f0:	fe bf       	out	0x3e, r31	; 62
    87f2:	c8 01       	movw	r24, r16
    87f4:	66 e0       	ldi	r22, 0x06	; 6
    87f6:	40 e0       	ldi	r20, 0x00	; 0
    87f8:	20 e7       	ldi	r18, 0x70	; 112
    87fa:	31 e3       	ldi	r19, 0x31	; 49
    87fc:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		display_putString("Sound:           ",7,0,System5x7);
    8800:	83 e5       	ldi	r24, 0x53	; 83
    8802:	92 e2       	ldi	r25, 0x22	; 34
    8804:	67 e0       	ldi	r22, 0x07	; 7
    8806:	40 e0       	ldi	r20, 0x00	; 0
    8808:	20 e7       	ldi	r18, 0x70	; 112
    880a:	31 e3       	ldi	r19, 0x31	; 49
    880c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		display_drawRectangle(57,50,7,quickMic/2,true,false,true);
    8810:	20 91 20 34 	lds	r18, 0x3420
    8814:	26 95       	lsr	r18
    8816:	89 e3       	ldi	r24, 0x39	; 57
    8818:	62 e3       	ldi	r22, 0x32	; 50
    881a:	47 e0       	ldi	r20, 0x07	; 7
    881c:	01 e0       	ldi	r16, 0x01	; 1
    881e:	ee 24       	eor	r14, r14
    8820:	cc 24       	eor	r12, r12
    8822:	c3 94       	inc	r12
    8824:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <display_drawRectangle>
		display_writeBufferToScreen();
    8828:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>

		if(chargePercent == 100){
    882c:	80 91 fc 33 	lds	r24, 0x33FC
    8830:	84 36       	cpi	r24, 0x64	; 100
    8832:	21 f4       	brne	.+8      	; 0x883c <__vector_77+0x9be>
			chargeComplete = true;
    8834:	f0 92 ff 33 	sts	0x33FF, r15
			okToCharge  = false;
    8838:	10 92 00 34 	sts	0x3400, r1
    883c:	80 91 a8 06 	lds	r24, 0x06A8
    8840:	81 fd       	sbrc	r24, 1
    8842:	0a c0       	rjmp	.+20     	; 0x8858 <__vector_77+0x9da>
    8844:	8c c0       	rjmp	.+280    	; 0x895e <__vector_77+0xae0>
		}

		if(SD2_Inserted() && chargeComplete && !recording){
    8846:	80 91 06 34 	lds	r24, 0x3406
    884a:	88 23       	and	r24, r24
    884c:	29 f4       	brne	.+10     	; 0x8858 <__vector_77+0x9da>
    884e:	e0 e2       	ldi	r30, 0x20	; 32
    8850:	f6 e0       	ldi	r31, 0x06	; 6
    8852:	80 e2       	ldi	r24, 0x20	; 32
    8854:	86 83       	std	Z+6, r24	; 0x06
    8856:	34 c0       	rjmp	.+104    	; 0x88c0 <__vector_77+0xa42>
    8858:	80 91 a8 06 	lds	r24, 0x06A8
    885c:	81 fd       	sbrc	r24, 1
    885e:	33 c0       	rjmp	.+102    	; 0x88c6 <__vector_77+0xa48>
    8860:	84 c0       	rjmp	.+264    	; 0x896a <__vector_77+0xaec>
			Leds_Clear(ext_Red);
			Leds_Set(ext_Green);
		} else if(SD2_Inserted() && !chargeComplete){
			okToCharge = true;
    8862:	11 e0       	ldi	r17, 0x01	; 1
    8864:	10 93 00 34 	sts	0x3400, r17
			if(!rtcSynced){
    8868:	80 91 31 34 	lds	r24, 0x3431
    886c:	88 23       	and	r24, r24
    886e:	f9 f4       	brne	.+62     	; 0x88ae <__vector_77+0xa30>
				Debug_SendString("Syncing RTC", true);
    8870:	8c e9       	ldi	r24, 0x9C	; 156
    8872:	91 e2       	ldi	r25, 0x21	; 33
    8874:	61 e0       	ldi	r22, 0x01	; 1
    8876:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
				if(!demoMode){
    887a:	80 91 69 34 	lds	r24, 0x3469
    887e:	88 23       	and	r24, r24
    8880:	99 f4       	brne	.+38     	; 0x88a8 <__vector_77+0xa2a>
time_t time;

uint8_t initialRTCRegisters [17];

void RTC_init(void) {
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    8882:	e0 ea       	ldi	r30, 0xA0	; 160
    8884:	f4 e0       	ldi	r31, 0x04	; 4
    8886:	88 e0       	ldi	r24, 0x08	; 8
    8888:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    888a:	84 e0       	ldi	r24, 0x04	; 4
    888c:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    888e:	8f e0       	ldi	r24, 0x0F	; 15
    8890:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    8892:	14 83       	std	Z+4, r17	; 0x04
					RTC_init();
					RTC_setUTCSecs(UNIX_time);
    8894:	60 91 01 34 	lds	r22, 0x3401
    8898:	70 91 02 34 	lds	r23, 0x3402
    889c:	80 91 03 34 	lds	r24, 0x3403
    88a0:	90 91 04 34 	lds	r25, 0x3404
    88a4:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <RTC_setUTCSecs>
				}
				rtcSynced = true;
    88a8:	81 e0       	ldi	r24, 0x01	; 1
    88aa:	80 93 31 34 	sts	0x3431, r24
			}
			if(!recording){
    88ae:	80 91 06 34 	lds	r24, 0x3406
    88b2:	88 23       	and	r24, r24
    88b4:	09 f0       	breq	.+2      	; 0x88b8 <__vector_77+0xa3a>
    88b6:	5f c0       	rjmp	.+190    	; 0x8976 <__vector_77+0xaf8>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    88b8:	e0 e2       	ldi	r30, 0x20	; 32
    88ba:	f6 e0       	ldi	r31, 0x06	; 6
    88bc:	80 e2       	ldi	r24, 0x20	; 32
    88be:	85 83       	std	Z+5, r24	; 0x05
				Leds_Set(ext_Red);
				Leds_Set(ext_Green);
			}

		}else{
			chargePercent = 0;
    88c0:	80 e1       	ldi	r24, 0x10	; 16
    88c2:	85 83       	std	Z+5, r24	; 0x05
    88c4:	58 c0       	rjmp	.+176    	; 0x8976 <__vector_77+0xaf8>
    88c6:	10 92 fc 33 	sts	0x33FC, r1
			chargeComplete = false;
    88ca:	10 92 ff 33 	sts	0x33FF, r1
			rtcSynced = false;
    88ce:	10 92 31 34 	sts	0x3431, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    88d2:	e0 e2       	ldi	r30, 0x20	; 32
    88d4:	f6 e0       	ldi	r31, 0x06	; 6
    88d6:	80 e2       	ldi	r24, 0x20	; 32
    88d8:	86 83       	std	Z+6, r24	; 0x06
	// controls


    if(currentMode == recordMode && Dpad_CheckButton(Down)){											// go to sensorMode

		currentMode = sensorMode;
    88da:	80 e1       	ldi	r24, 0x10	; 16
    88dc:	86 83       	std	Z+6, r24	; 0x06
    88de:	4b c0       	rjmp	.+150    	; 0x8976 <__vector_77+0xaf8>
    88e0:	81 e0       	ldi	r24, 0x01	; 1
    88e2:	80 93 2b 34 	sts	0x342B, r24
		display_clearBuffer();
    88e6:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <display_clearBuffer>
		display_writeBufferToScreen();
    88ea:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    88ee:	3e cc       	rjmp	.-1924   	; 0x816c <__vector_77+0x2ee>
	} else if(currentMode == sensorMode && Dpad_CheckButton(Up)){											// go to recordMode

		currentMode = recordMode;
    88f0:	10 92 2b 34 	sts	0x342B, r1
		display_clearBuffer();
    88f4:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <display_clearBuffer>
		display_writeBufferToScreen();
    88f8:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    88fc:	20 ea       	ldi	r18, 0xA0	; 160
    88fe:	3f e0       	ldi	r19, 0x0F	; 15
    8900:	40 e7       	ldi	r20, 0x70	; 112
    8902:	51 e0       	ldi	r21, 0x01	; 1
    8904:	23 cb       	rjmp	.-2490   	; 0x7f4c <__vector_77+0xce>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8906:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    890a:	8c 77       	andi	r24, 0x7C	; 124
    890c:	82 fd       	sbrc	r24, 2
    890e:	32 cb       	rjmp	.-2460   	; 0x7f74 <__vector_77+0xf6>
    8910:	3c cb       	rjmp	.-2440   	; 0x7f8a <__vector_77+0x10c>
		Leds_Clear(sd_Red);
		Leds_Set(sd_Green);
	} else if(currentMode == recordMode && !recording && !SD_Inserted()){									// dont allow to start recording
		Leds_Set(sd_Red);
		Leds_Clear(sd_Green);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && !recording){								// start recording
    8912:	80 91 06 34 	lds	r24, 0x3406
    8916:	88 23       	and	r24, r24
    8918:	09 f0       	breq	.+2      	; 0x891c <__vector_77+0xa9e>
    891a:	9b cb       	rjmp	.-2250   	; 0x8052 <__vector_77+0x1d4>
    891c:	54 cb       	rjmp	.-2392   	; 0x7fc6 <__vector_77+0x148>
		Leds_Clear(ext_Green);
		Leds_Clear(ext_Red);

		okToOpenLogFile = true;
		_delay_ms(50);
	} else if(currentMode == recordMode && Dpad_CheckButton(Up) && recording){								// pause recording
    891e:	80 91 06 34 	lds	r24, 0x3406
    8922:	88 23       	and	r24, r24
    8924:	09 f4       	brne	.+2      	; 0x8928 <__vector_77+0xaaa>
    8926:	22 cc       	rjmp	.-1980   	; 0x816c <__vector_77+0x2ee>
    8928:	9f cb       	rjmp	.-2242   	; 0x8068 <__vector_77+0x1ea>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    892a:	81 e0       	ldi	r24, 0x01	; 1
    892c:	06 cc       	rjmp	.-2036   	; 0x813a <__vector_77+0x2bc>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    892e:	e0 e2       	ldi	r30, 0x20	; 32
    8930:	f6 e0       	ldi	r31, 0x06	; 6
    8932:	80 e2       	ldi	r24, 0x20	; 32
    8934:	85 83       	std	Z+5, r24	; 0x05
    8936:	04 c0       	rjmp	.+8      	; 0x8940 <__vector_77+0xac2>
    8938:	e0 e2       	ldi	r30, 0x20	; 32
    893a:	f6 e0       	ldi	r31, 0x06	; 6
    893c:	80 e2       	ldi	r24, 0x20	; 32
    893e:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8940:	80 e1       	ldi	r24, 0x10	; 16
    8942:	85 83       	std	Z+5, r24	; 0x05
    8944:	0a cc       	rjmp	.-2028   	; 0x815a <__vector_77+0x2dc>
			chargeComplete = true;
			okToCharge  = false;
		}


		if(SD2_Inserted() && chargeComplete){
    8946:	80 91 ff 33 	lds	r24, 0x33FF
    894a:	88 23       	and	r24, r24
    894c:	09 f4       	brne	.+2      	; 0x8950 <__vector_77+0xad2>
    894e:	f5 cc       	rjmp	.-1558   	; 0x833a <__vector_77+0x4bc>
    8950:	e2 cc       	rjmp	.-1596   	; 0x8316 <__vector_77+0x498>
			display_putString("Ext Charged      ",3,0,System5x7);
			if(!recording){
				Leds_Clear(ext_Red);
				Leds_Set(ext_Green);
			}
		} else if(SD2_Inserted() && !chargeComplete){
    8952:	80 91 ff 33 	lds	r24, 0x33FF
    8956:	88 23       	and	r24, r24
    8958:	09 f0       	breq	.+2      	; 0x895c <__vector_77+0xade>
    895a:	5b cd       	rjmp	.-1354   	; 0x8412 <__vector_77+0x594>
    895c:	f3 cc       	rjmp	.-1562   	; 0x8344 <__vector_77+0x4c6>
		if(chargePercent == 100){
			chargeComplete = true;
			okToCharge  = false;
		}

		if(SD2_Inserted() && chargeComplete && !recording){
    895e:	80 91 ff 33 	lds	r24, 0x33FF
    8962:	88 23       	and	r24, r24
    8964:	09 f4       	brne	.+2      	; 0x8968 <__vector_77+0xaea>
    8966:	78 cf       	rjmp	.-272    	; 0x8858 <__vector_77+0x9da>
    8968:	6e cf       	rjmp	.-292    	; 0x8846 <__vector_77+0x9c8>
			Leds_Clear(ext_Red);
			Leds_Set(ext_Green);
		} else if(SD2_Inserted() && !chargeComplete){
    896a:	80 91 ff 33 	lds	r24, 0x33FF
    896e:	88 23       	and	r24, r24
    8970:	09 f0       	breq	.+2      	; 0x8974 <__vector_77+0xaf6>
    8972:	a9 cf       	rjmp	.-174    	; 0x88c6 <__vector_77+0xa48>
    8974:	76 cf       	rjmp	.-276    	; 0x8862 <__vector_77+0x9e4>


}


}
    8976:	ff 91       	pop	r31
    8978:	ef 91       	pop	r30
    897a:	bf 91       	pop	r27
    897c:	af 91       	pop	r26
    897e:	9f 91       	pop	r25
    8980:	8f 91       	pop	r24
    8982:	7f 91       	pop	r23
    8984:	6f 91       	pop	r22
    8986:	5f 91       	pop	r21
    8988:	4f 91       	pop	r20
    898a:	3f 91       	pop	r19
    898c:	2f 91       	pop	r18
    898e:	1f 91       	pop	r17
    8990:	0f 91       	pop	r16
    8992:	ff 90       	pop	r15
    8994:	ef 90       	pop	r14
    8996:	cf 90       	pop	r12
    8998:	0f 90       	pop	r0
    899a:	0b be       	out	0x3b, r0	; 59
    899c:	0f 90       	pop	r0
    899e:	0f be       	out	0x3f, r0	; 63
    89a0:	0f 90       	pop	r0
    89a2:	1f 90       	pop	r1
    89a4:	18 95       	reti

000089a6 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    89a6:	0f 93       	push	r16
    89a8:	1f 93       	push	r17
	fileName[0] = '/';
    89aa:	00 e7       	ldi	r16, 0x70	; 112
    89ac:	15 e4       	ldi	r17, 0x45	; 69
    89ae:	2f e2       	ldi	r18, 0x2F	; 47
    89b0:	20 93 70 45 	sts	0x4570, r18
	ltoa(var, fileName+1, 16);
    89b4:	a8 01       	movw	r20, r16
    89b6:	4f 5f       	subi	r20, 0xFF	; 255
    89b8:	5f 4f       	sbci	r21, 0xFF	; 255
    89ba:	20 e1       	ldi	r18, 0x10	; 16
    89bc:	30 e0       	ldi	r19, 0x00	; 0
    89be:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
	strcat(fileName, ".bt");
    89c2:	c8 01       	movw	r24, r16
    89c4:	65 e6       	ldi	r22, 0x65	; 101
    89c6:	72 e2       	ldi	r23, 0x22	; 34
    89c8:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
}
    89cc:	1f 91       	pop	r17
    89ce:	0f 91       	pop	r16
    89d0:	08 95       	ret

000089d2 <SD_Open>:

	return tmp;
}


uint8_t SD_Open(char string []){
    89d2:	cf 93       	push	r28
    89d4:	df 93       	push	r29
    89d6:	ec 01       	movw	r28, r24
	Debug_SendString("File Name= ",false);
    89d8:	89 e6       	ldi	r24, 0x69	; 105
    89da:	92 e2       	ldi	r25, 0x22	; 34
    89dc:	60 e0       	ldi	r22, 0x00	; 0
    89de:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	Debug_SendString(string,true);
    89e2:	ce 01       	movw	r24, r28
    89e4:	61 e0       	ldi	r22, 0x01	; 1
    89e6:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	strcpy(currentLogFile,string);
    89ea:	88 e2       	ldi	r24, 0x28	; 40
    89ec:	9d e3       	ldi	r25, 0x3D	; 61
    89ee:	be 01       	movw	r22, r28
    89f0:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
	strupr(currentLogFile);
    89f4:	88 e2       	ldi	r24, 0x28	; 40
    89f6:	9d e3       	ldi	r25, 0x3D	; 61
    89f8:	0e 94 25 5a 	call	0xb44a	; 0xb44a <strupr>
    89fc:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    89fe:	a8 e2       	ldi	r26, 0x28	; 40
    8a00:	bd e3       	ldi	r27, 0x3D	; 61
    8a02:	07 c0       	rjmp	.+14     	; 0x8a12 <SD_Open+0x40>
		currentLogFile[i-1] = currentLogFile[i];
    8a04:	fc 01       	movw	r30, r24
    8a06:	e8 5d       	subi	r30, 0xD8	; 216
    8a08:	f2 4c       	sbci	r31, 0xC2	; 194
    8a0a:	80 81       	ld	r24, Z
    8a0c:	31 97       	sbiw	r30, 0x01	; 1
    8a0e:	80 83       	st	Z, r24
uint8_t SD_Open(char string []){
	Debug_SendString("File Name= ",false);
	Debug_SendString(string,true);
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    8a10:	2f 5f       	subi	r18, 0xFF	; 255
    8a12:	fd 01       	movw	r30, r26
    8a14:	01 90       	ld	r0, Z+
    8a16:	00 20       	and	r0, r0
    8a18:	e9 f7       	brne	.-6      	; 0x8a14 <SD_Open+0x42>
    8a1a:	31 97       	sbiw	r30, 0x01	; 1
    8a1c:	e8 52       	subi	r30, 0x28	; 40
    8a1e:	fd 43       	sbci	r31, 0x3D	; 61
    8a20:	82 2f       	mov	r24, r18
    8a22:	90 e0       	ldi	r25, 0x00	; 0
    8a24:	8e 17       	cp	r24, r30
    8a26:	9f 07       	cpc	r25, r31
    8a28:	68 f3       	brcs	.-38     	; 0x8a04 <SD_Open+0x32>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    8a2a:	e9 5d       	subi	r30, 0xD9	; 217
    8a2c:	f2 4c       	sbci	r31, 0xC2	; 194
    8a2e:	10 82       	st	Z, r1
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
    8a30:	8e e5       	ldi	r24, 0x5E	; 94
    8a32:	9f e4       	ldi	r25, 0x4F	; 79
    8a34:	be 01       	movw	r22, r28
    8a36:	43 e1       	ldi	r20, 0x13	; 19
    8a38:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <f_open>
}
    8a3c:	df 91       	pop	r29
    8a3e:	cf 91       	pop	r28
    8a40:	08 95       	ret

00008a42 <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    8a42:	0f 93       	push	r16
    8a44:	1f 93       	push	r17
    8a46:	cf 93       	push	r28
    8a48:	df 93       	push	r29

	SD_Open("/config.txt");
    8a4a:	85 e7       	ldi	r24, 0x75	; 117
    8a4c:	92 e2       	ldi	r25, 0x22	; 34
    8a4e:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <SD_Open>
          }
	      Debug_SendString("User: ",false);
	      Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
    8a52:	c2 e4       	ldi	r28, 0x42	; 66
    8a54:	dc e5       	ldi	r29, 0x5C	; 92
	      strtok(temp,"=");
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
    8a56:	0e ec       	ldi	r16, 0xCE	; 206
    8a58:	1a e4       	ldi	r17, 0x4A	; 74
void Read_config_file(void){

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    8a5a:	8a e6       	ldi	r24, 0x6A	; 106
    8a5c:	9a e4       	ldi	r25, 0x4A	; 74
    8a5e:	62 e3       	ldi	r22, 0x32	; 50
    8a60:	70 e0       	ldi	r23, 0x00	; 0
    8a62:	4e e5       	ldi	r20, 0x5E	; 94
    8a64:	5f e4       	ldi	r21, 0x4F	; 79
    8a66:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <f_gets>
	  if(temp[0] != 0){
    8a6a:	80 91 6a 4a 	lds	r24, 0x4A6A
    8a6e:	88 23       	and	r24, r24
    8a70:	09 f4       	brne	.+2      	; 0x8a74 <Read_config_file+0x32>
    8a72:	89 c1       	rjmp	.+786    	; 0x8d86 <Read_config_file+0x344>
	    if(strstr(temp,"ssid") != 0){
    8a74:	8a e6       	ldi	r24, 0x6A	; 106
    8a76:	9a e4       	ldi	r25, 0x4A	; 74
    8a78:	61 e8       	ldi	r22, 0x81	; 129
    8a7a:	72 e2       	ldi	r23, 0x22	; 34
    8a7c:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8a80:	00 97       	sbiw	r24, 0x00	; 0
    8a82:	a9 f0       	breq	.+42     	; 0x8aae <Read_config_file+0x6c>
	      strtok(temp,"=");
    8a84:	8a e6       	ldi	r24, 0x6A	; 106
    8a86:	9a e4       	ldi	r25, 0x4A	; 74
    8a88:	66 e8       	ldi	r22, 0x86	; 134
    8a8a:	72 e2       	ldi	r23, 0x22	; 34
    8a8c:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcat(ssid,strtok(NULL,"="));
    8a90:	80 e0       	ldi	r24, 0x00	; 0
    8a92:	90 e0       	ldi	r25, 0x00	; 0
    8a94:	66 e8       	ldi	r22, 0x86	; 134
    8a96:	72 e2       	ldi	r23, 0x22	; 34
    8a98:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8a9c:	bc 01       	movw	r22, r24
    8a9e:	86 ef       	ldi	r24, 0xF6	; 246
    8aa0:	90 e3       	ldi	r25, 0x30	; 48
    8aa2:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	      ssidRead = true;
    8aa6:	81 e0       	ldi	r24, 0x01	; 1
    8aa8:	80 93 27 34 	sts	0x3427, r24
    8aac:	d6 cf       	rjmp	.-84     	; 0x8a5a <Read_config_file+0x18>
	    } else if(strstr(temp,"phrase") != 0){
    8aae:	8a e6       	ldi	r24, 0x6A	; 106
    8ab0:	9a e4       	ldi	r25, 0x4A	; 74
    8ab2:	68 e8       	ldi	r22, 0x88	; 136
    8ab4:	72 e2       	ldi	r23, 0x22	; 34
    8ab6:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8aba:	00 97       	sbiw	r24, 0x00	; 0
    8abc:	a9 f0       	breq	.+42     	; 0x8ae8 <Read_config_file+0xa6>
	      strtok(temp,"=");
    8abe:	8a e6       	ldi	r24, 0x6A	; 106
    8ac0:	9a e4       	ldi	r25, 0x4A	; 74
    8ac2:	66 e8       	ldi	r22, 0x86	; 134
    8ac4:	72 e2       	ldi	r23, 0x22	; 34
    8ac6:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcat(phrase,strtok(NULL,"="));
    8aca:	80 e0       	ldi	r24, 0x00	; 0
    8acc:	90 e0       	ldi	r25, 0x00	; 0
    8ace:	66 e8       	ldi	r22, 0x86	; 134
    8ad0:	72 e2       	ldi	r23, 0x22	; 34
    8ad2:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8ad6:	bc 01       	movw	r22, r24
    8ad8:	82 e9       	ldi	r24, 0x92	; 146
    8ada:	90 e3       	ldi	r25, 0x30	; 48
    8adc:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	      phraseRead = true;
    8ae0:	81 e0       	ldi	r24, 0x01	; 1
    8ae2:	80 93 24 34 	sts	0x3424, r24
    8ae6:	b9 cf       	rjmp	.-142    	; 0x8a5a <Read_config_file+0x18>
	    } else if(strstr(temp,"key") != 0){
    8ae8:	8a e6       	ldi	r24, 0x6A	; 106
    8aea:	9a e4       	ldi	r25, 0x4A	; 74
    8aec:	6f e8       	ldi	r22, 0x8F	; 143
    8aee:	72 e2       	ldi	r23, 0x22	; 34
    8af0:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8af4:	00 97       	sbiw	r24, 0x00	; 0
    8af6:	a9 f0       	breq	.+42     	; 0x8b22 <Read_config_file+0xe0>
	      strtok(temp,"=");
    8af8:	8a e6       	ldi	r24, 0x6A	; 106
    8afa:	9a e4       	ldi	r25, 0x4A	; 74
    8afc:	66 e8       	ldi	r22, 0x86	; 134
    8afe:	72 e2       	ldi	r23, 0x22	; 34
    8b00:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcat(key,strtok(NULL,"="));
    8b04:	80 e0       	ldi	r24, 0x00	; 0
    8b06:	90 e0       	ldi	r25, 0x00	; 0
    8b08:	66 e8       	ldi	r22, 0x86	; 134
    8b0a:	72 e2       	ldi	r23, 0x22	; 34
    8b0c:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8b10:	bc 01       	movw	r22, r24
    8b12:	84 ec       	ldi	r24, 0xC4	; 196
    8b14:	90 e3       	ldi	r25, 0x30	; 48
    8b16:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	      keyRead = true;
    8b1a:	81 e0       	ldi	r24, 0x01	; 1
    8b1c:	80 93 25 34 	sts	0x3425, r24
    8b20:	9c cf       	rjmp	.-200    	; 0x8a5a <Read_config_file+0x18>
	    } else if(strstr(temp,"port") != 0){
    8b22:	8a e6       	ldi	r24, 0x6A	; 106
    8b24:	9a e4       	ldi	r25, 0x4A	; 74
    8b26:	63 e9       	ldi	r22, 0x93	; 147
    8b28:	72 e2       	ldi	r23, 0x22	; 34
    8b2a:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8b2e:	00 97       	sbiw	r24, 0x00	; 0
    8b30:	a9 f0       	breq	.+42     	; 0x8b5c <Read_config_file+0x11a>
	      strtok(temp,"=");
    8b32:	8a e6       	ldi	r24, 0x6A	; 106
    8b34:	9a e4       	ldi	r25, 0x4A	; 74
    8b36:	66 e8       	ldi	r22, 0x86	; 134
    8b38:	72 e2       	ldi	r23, 0x22	; 34
    8b3a:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcpy(port,strtok(NULL,"="));
    8b3e:	80 e0       	ldi	r24, 0x00	; 0
    8b40:	90 e0       	ldi	r25, 0x00	; 0
    8b42:	66 e8       	ldi	r22, 0x86	; 134
    8b44:	72 e2       	ldi	r23, 0x22	; 34
    8b46:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8b4a:	bc 01       	movw	r22, r24
    8b4c:	80 e1       	ldi	r24, 0x10	; 16
    8b4e:	9c e5       	ldi	r25, 0x5C	; 92
    8b50:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
	      portRead = true;
    8b54:	81 e0       	ldi	r24, 0x01	; 1
    8b56:	80 93 26 34 	sts	0x3426, r24
    8b5a:	7f cf       	rjmp	.-258    	; 0x8a5a <Read_config_file+0x18>
	    } else if(strstr(temp,"auth") != 0){
    8b5c:	8a e6       	ldi	r24, 0x6A	; 106
    8b5e:	9a e4       	ldi	r25, 0x4A	; 74
    8b60:	68 e9       	ldi	r22, 0x98	; 152
    8b62:	72 e2       	ldi	r23, 0x22	; 34
    8b64:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8b68:	00 97       	sbiw	r24, 0x00	; 0
    8b6a:	a9 f0       	breq	.+42     	; 0x8b96 <Read_config_file+0x154>
	      strtok(temp,"=");
    8b6c:	8a e6       	ldi	r24, 0x6A	; 106
    8b6e:	9a e4       	ldi	r25, 0x4A	; 74
    8b70:	66 e8       	ldi	r22, 0x86	; 134
    8b72:	72 e2       	ldi	r23, 0x22	; 34
    8b74:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcat(auth,strtok(NULL,"="));
    8b78:	80 e0       	ldi	r24, 0x00	; 0
    8b7a:	90 e0       	ldi	r25, 0x00	; 0
    8b7c:	66 e8       	ldi	r22, 0x86	; 134
    8b7e:	72 e2       	ldi	r23, 0x22	; 34
    8b80:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8b84:	bc 01       	movw	r22, r24
    8b86:	80 e6       	ldi	r24, 0x60	; 96
    8b88:	90 e3       	ldi	r25, 0x30	; 48
    8b8a:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	      authRead = true;
    8b8e:	81 e0       	ldi	r24, 0x01	; 1
    8b90:	80 93 23 34 	sts	0x3423, r24
    8b94:	62 cf       	rjmp	.-316    	; 0x8a5a <Read_config_file+0x18>
	     }else if(strstr(temp,"user") != 0){
    8b96:	8a e6       	ldi	r24, 0x6A	; 106
    8b98:	9a e4       	ldi	r25, 0x4A	; 74
    8b9a:	6d e9       	ldi	r22, 0x9D	; 157
    8b9c:	72 e2       	ldi	r23, 0x22	; 34
    8b9e:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8ba2:	00 97       	sbiw	r24, 0x00	; 0
    8ba4:	81 f1       	breq	.+96     	; 0x8c06 <Read_config_file+0x1c4>
	      strtok(temp,"=");
    8ba6:	8a e6       	ldi	r24, 0x6A	; 106
    8ba8:	9a e4       	ldi	r25, 0x4A	; 74
    8baa:	66 e8       	ldi	r22, 0x86	; 134
    8bac:	72 e2       	ldi	r23, 0x22	; 34
    8bae:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcpy(user,strtok(NULL,"="));
    8bb2:	80 e0       	ldi	r24, 0x00	; 0
    8bb4:	90 e0       	ldi	r25, 0x00	; 0
    8bb6:	66 e8       	ldi	r22, 0x86	; 134
    8bb8:	72 e2       	ldi	r23, 0x22	; 34
    8bba:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8bbe:	bc 01       	movw	r22, r24
    8bc0:	8e ec       	ldi	r24, 0xCE	; 206
    8bc2:	9a e4       	ldi	r25, 0x4A	; 74
    8bc4:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
	      for(uint8_t i = 0; i < strlen(user); i++){
    8bc8:	f8 01       	movw	r30, r16
    8bca:	01 90       	ld	r0, Z+
    8bcc:	00 20       	and	r0, r0
    8bce:	e9 f7       	brne	.-6      	; 0x8bca <Read_config_file+0x188>
    8bd0:	31 97       	sbiw	r30, 0x01	; 1
    8bd2:	ee 5c       	subi	r30, 0xCE	; 206
    8bd4:	fa 44       	sbci	r31, 0x4A	; 74
    8bd6:	20 e0       	ldi	r18, 0x00	; 0
    8bd8:	09 c0       	rjmp	.+18     	; 0x8bec <Read_config_file+0x1aa>
            if(user[i] < ' '){
    8bda:	dc 01       	movw	r26, r24
    8bdc:	a2 53       	subi	r26, 0x32	; 50
    8bde:	b5 4b       	sbci	r27, 0xB5	; 181
    8be0:	8c 91       	ld	r24, X
    8be2:	80 32       	cpi	r24, 0x20	; 32
    8be4:	10 f4       	brcc	.+4      	; 0x8bea <Read_config_file+0x1a8>
               user[i] = 0;
    8be6:	1c 92       	st	X, r1
    8be8:	06 c0       	rjmp	.+12     	; 0x8bf6 <Read_config_file+0x1b4>
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
	     }else if(strstr(temp,"user") != 0){
	      strtok(temp,"=");
	      strcpy(user,strtok(NULL,"="));
	      for(uint8_t i = 0; i < strlen(user); i++){
    8bea:	2f 5f       	subi	r18, 0xFF	; 255
    8bec:	82 2f       	mov	r24, r18
    8bee:	90 e0       	ldi	r25, 0x00	; 0
    8bf0:	8e 17       	cp	r24, r30
    8bf2:	9f 07       	cpc	r25, r31
    8bf4:	90 f3       	brcs	.-28     	; 0x8bda <Read_config_file+0x198>
            if(user[i] < ' '){
               user[i] = 0;
               break;
            }
          }
	      Debug_SendString("User: ",false);
    8bf6:	82 ea       	ldi	r24, 0xA2	; 162
    8bf8:	92 e2       	ldi	r25, 0x22	; 34
    8bfa:	60 e0       	ldi	r22, 0x00	; 0
    8bfc:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	      Debug_SendString(user,true);
    8c00:	8e ec       	ldi	r24, 0xCE	; 206
    8c02:	9a e4       	ldi	r25, 0x4A	; 74
    8c04:	37 c0       	rjmp	.+110    	; 0x8c74 <Read_config_file+0x232>
	    } else if(strstr(temp,"nickname") != 0){
    8c06:	8a e6       	ldi	r24, 0x6A	; 106
    8c08:	9a e4       	ldi	r25, 0x4A	; 74
    8c0a:	69 ea       	ldi	r22, 0xA9	; 169
    8c0c:	72 e2       	ldi	r23, 0x22	; 34
    8c0e:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8c12:	00 97       	sbiw	r24, 0x00	; 0
    8c14:	99 f1       	breq	.+102    	; 0x8c7c <Read_config_file+0x23a>
	      strtok(temp,"=");
    8c16:	8a e6       	ldi	r24, 0x6A	; 106
    8c18:	9a e4       	ldi	r25, 0x4A	; 74
    8c1a:	66 e8       	ldi	r22, 0x86	; 134
    8c1c:	72 e2       	ldi	r23, 0x22	; 34
    8c1e:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcpy(nickname,strtok(NULL,"="));
    8c22:	80 e0       	ldi	r24, 0x00	; 0
    8c24:	90 e0       	ldi	r25, 0x00	; 0
    8c26:	66 e8       	ldi	r22, 0x86	; 134
    8c28:	72 e2       	ldi	r23, 0x22	; 34
    8c2a:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8c2e:	bc 01       	movw	r22, r24
    8c30:	82 e4       	ldi	r24, 0x42	; 66
    8c32:	9c e5       	ldi	r25, 0x5C	; 92
    8c34:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
          for(uint8_t i = 0; i < strlen(nickname); i++){
    8c38:	fe 01       	movw	r30, r28
    8c3a:	01 90       	ld	r0, Z+
    8c3c:	00 20       	and	r0, r0
    8c3e:	e9 f7       	brne	.-6      	; 0x8c3a <Read_config_file+0x1f8>
    8c40:	31 97       	sbiw	r30, 0x01	; 1
    8c42:	e2 54       	subi	r30, 0x42	; 66
    8c44:	fc 45       	sbci	r31, 0x5C	; 92
    8c46:	20 e0       	ldi	r18, 0x00	; 0
    8c48:	09 c0       	rjmp	.+18     	; 0x8c5c <Read_config_file+0x21a>
            if(nickname[i] < ' '){
    8c4a:	dc 01       	movw	r26, r24
    8c4c:	ae 5b       	subi	r26, 0xBE	; 190
    8c4e:	b3 4a       	sbci	r27, 0xA3	; 163
    8c50:	8c 91       	ld	r24, X
    8c52:	80 32       	cpi	r24, 0x20	; 32
    8c54:	10 f4       	brcc	.+4      	; 0x8c5a <Read_config_file+0x218>
               nickname[i] = 0;
    8c56:	1c 92       	st	X, r1
    8c58:	06 c0       	rjmp	.+12     	; 0x8c66 <Read_config_file+0x224>
	      Debug_SendString("User: ",false);
	      Debug_SendString(user,true);
	    } else if(strstr(temp,"nickname") != 0){
	      strtok(temp,"=");
	      strcpy(nickname,strtok(NULL,"="));
          for(uint8_t i = 0; i < strlen(nickname); i++){
    8c5a:	2f 5f       	subi	r18, 0xFF	; 255
    8c5c:	82 2f       	mov	r24, r18
    8c5e:	90 e0       	ldi	r25, 0x00	; 0
    8c60:	8e 17       	cp	r24, r30
    8c62:	9f 07       	cpc	r25, r31
    8c64:	90 f3       	brcs	.-28     	; 0x8c4a <Read_config_file+0x208>
               nickname[i] = 0;
               break;
            }
          }

          Debug_SendString("Nickname: ",false);
    8c66:	82 eb       	ldi	r24, 0xB2	; 178
    8c68:	92 e2       	ldi	r25, 0x22	; 34
    8c6a:	60 e0       	ldi	r22, 0x00	; 0
    8c6c:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
          Debug_SendString(nickname,true);
    8c70:	82 e4       	ldi	r24, 0x42	; 66
    8c72:	9c e5       	ldi	r25, 0x5C	; 92
    8c74:	61 e0       	ldi	r22, 0x01	; 1
    8c76:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    8c7a:	ef ce       	rjmp	.-546    	; 0x8a5a <Read_config_file+0x18>
	    } else if(strstr(temp,"server") != 0){
    8c7c:	8a e6       	ldi	r24, 0x6A	; 106
    8c7e:	9a e4       	ldi	r25, 0x4A	; 74
    8c80:	6d eb       	ldi	r22, 0xBD	; 189
    8c82:	72 e2       	ldi	r23, 0x22	; 34
    8c84:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8c88:	00 97       	sbiw	r24, 0x00	; 0
    8c8a:	91 f0       	breq	.+36     	; 0x8cb0 <Read_config_file+0x26e>
	      strtok(temp,"=");
    8c8c:	8a e6       	ldi	r24, 0x6A	; 106
    8c8e:	9a e4       	ldi	r25, 0x4A	; 74
    8c90:	66 e8       	ldi	r22, 0x86	; 134
    8c92:	72 e2       	ldi	r23, 0x22	; 34
    8c94:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcat(serverOpenCommand,strtok(NULL,"="));
    8c98:	80 e0       	ldi	r24, 0x00	; 0
    8c9a:	90 e0       	ldi	r25, 0x00	; 0
    8c9c:	66 e8       	ldi	r22, 0x86	; 134
    8c9e:	72 e2       	ldi	r23, 0x22	; 34
    8ca0:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8ca4:	bc 01       	movw	r22, r24
    8ca6:	88 e2       	ldi	r24, 0x28	; 40
    8ca8:	91 e3       	ldi	r25, 0x31	; 49
    8caa:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
    8cae:	d5 ce       	rjmp	.-598    	; 0x8a5a <Read_config_file+0x18>
        } else if(strstr(temp,"daylightTime") != 0){
    8cb0:	8a e6       	ldi	r24, 0x6A	; 106
    8cb2:	9a e4       	ldi	r25, 0x4A	; 74
    8cb4:	64 ec       	ldi	r22, 0xC4	; 196
    8cb6:	72 e2       	ldi	r23, 0x22	; 34
    8cb8:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8cbc:	00 97       	sbiw	r24, 0x00	; 0
    8cbe:	c9 f0       	breq	.+50     	; 0x8cf2 <Read_config_file+0x2b0>
	      strtok(temp,"=");
    8cc0:	8a e6       	ldi	r24, 0x6A	; 106
    8cc2:	9a e4       	ldi	r25, 0x4A	; 74
    8cc4:	66 e8       	ldi	r22, 0x86	; 134
    8cc6:	72 e2       	ldi	r23, 0x22	; 34
    8cc8:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	      strcpy(daylightTime,strtok(NULL,"="));
    8ccc:	80 e0       	ldi	r24, 0x00	; 0
    8cce:	90 e0       	ldi	r25, 0x00	; 0
    8cd0:	66 e8       	ldi	r22, 0x86	; 134
    8cd2:	72 e2       	ldi	r23, 0x22	; 34
    8cd4:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8cd8:	bc 01       	movw	r22, r24
    8cda:	83 e2       	ldi	r24, 0x23	; 35
    8cdc:	9b e4       	ldi	r25, 0x4B	; 75
    8cde:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>

	      Debug_SendString("Day light savings: ", false);
    8ce2:	81 ed       	ldi	r24, 0xD1	; 209
    8ce4:	92 e2       	ldi	r25, 0x22	; 34
    8ce6:	60 e0       	ldi	r22, 0x00	; 0
    8ce8:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	      Debug_SendString(daylightTime, true);
    8cec:	83 e2       	ldi	r24, 0x23	; 35
    8cee:	9b e4       	ldi	r25, 0x4B	; 75
    8cf0:	c1 cf       	rjmp	.-126    	; 0x8c74 <Read_config_file+0x232>

	    } else if(strstr(temp,"zone") != 0){
    8cf2:	8a e6       	ldi	r24, 0x6A	; 106
    8cf4:	9a e4       	ldi	r25, 0x4A	; 74
    8cf6:	65 ee       	ldi	r22, 0xE5	; 229
    8cf8:	72 e2       	ldi	r23, 0x22	; 34
    8cfa:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8cfe:	00 97       	sbiw	r24, 0x00	; 0
    8d00:	09 f4       	brne	.+2      	; 0x8d04 <Read_config_file+0x2c2>
    8d02:	ab ce       	rjmp	.-682    	; 0x8a5a <Read_config_file+0x18>
	      strtok(temp,"=");
    8d04:	8a e6       	ldi	r24, 0x6A	; 106
    8d06:	9a e4       	ldi	r25, 0x4A	; 74
    8d08:	66 e8       	ldi	r22, 0x86	; 134
    8d0a:	72 e2       	ldi	r23, 0x22	; 34
    8d0c:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
          memmove(zone,strtok(NULL,"="),3);
    8d10:	80 e0       	ldi	r24, 0x00	; 0
    8d12:	90 e0       	ldi	r25, 0x00	; 0
    8d14:	66 e8       	ldi	r22, 0x86	; 134
    8d16:	72 e2       	ldi	r23, 0x22	; 34
    8d18:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    8d1c:	bc 01       	movw	r22, r24
    8d1e:	8a e5       	ldi	r24, 0x5A	; 90
    8d20:	91 e3       	ldi	r25, 0x31	; 49
    8d22:	43 e0       	ldi	r20, 0x03	; 3
    8d24:	50 e0       	ldi	r21, 0x00	; 0
    8d26:	0e 94 7f 59 	call	0xb2fe	; 0xb2fe <memmove>
	      if(strcmp(zone,"EST") == 0){
    8d2a:	8a e5       	ldi	r24, 0x5A	; 90
    8d2c:	91 e3       	ldi	r25, 0x31	; 49
    8d2e:	6a ee       	ldi	r22, 0xEA	; 234
    8d30:	72 e2       	ldi	r23, 0x22	; 34
    8d32:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <strcmp>
    8d36:	00 97       	sbiw	r24, 0x00	; 0
    8d38:	11 f4       	brne	.+4      	; 0x8d3e <Read_config_file+0x2fc>
	    	  timeZoneShift = 5;
    8d3a:	85 e0       	ldi	r24, 0x05	; 5
    8d3c:	1e c0       	rjmp	.+60     	; 0x8d7a <Read_config_file+0x338>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"CST") == 0){
    8d3e:	8a e5       	ldi	r24, 0x5A	; 90
    8d40:	91 e3       	ldi	r25, 0x31	; 49
    8d42:	6e ee       	ldi	r22, 0xEE	; 238
    8d44:	72 e2       	ldi	r23, 0x22	; 34
    8d46:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <strcmp>
    8d4a:	00 97       	sbiw	r24, 0x00	; 0
    8d4c:	11 f4       	brne	.+4      	; 0x8d52 <Read_config_file+0x310>
	    	  timeZoneShift = 6;
    8d4e:	86 e0       	ldi	r24, 0x06	; 6
    8d50:	14 c0       	rjmp	.+40     	; 0x8d7a <Read_config_file+0x338>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"MST") == 0){
    8d52:	8a e5       	ldi	r24, 0x5A	; 90
    8d54:	91 e3       	ldi	r25, 0x31	; 49
    8d56:	62 ef       	ldi	r22, 0xF2	; 242
    8d58:	72 e2       	ldi	r23, 0x22	; 34
    8d5a:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <strcmp>
    8d5e:	00 97       	sbiw	r24, 0x00	; 0
    8d60:	11 f4       	brne	.+4      	; 0x8d66 <Read_config_file+0x324>
	    	  timeZoneShift = 7;
    8d62:	87 e0       	ldi	r24, 0x07	; 7
    8d64:	0a c0       	rjmp	.+20     	; 0x8d7a <Read_config_file+0x338>
	    	  zoneChanged = true;
	      } else if(strcmp(zone,"PST") == 0){
    8d66:	8a e5       	ldi	r24, 0x5A	; 90
    8d68:	91 e3       	ldi	r25, 0x31	; 49
    8d6a:	66 ef       	ldi	r22, 0xF6	; 246
    8d6c:	72 e2       	ldi	r23, 0x22	; 34
    8d6e:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <strcmp>
    8d72:	00 97       	sbiw	r24, 0x00	; 0
    8d74:	09 f0       	breq	.+2      	; 0x8d78 <Read_config_file+0x336>
    8d76:	71 ce       	rjmp	.-798    	; 0x8a5a <Read_config_file+0x18>
	    	  timeZoneShift = 8;
    8d78:	88 e0       	ldi	r24, 0x08	; 8
    8d7a:	80 93 29 34 	sts	0x3429, r24
	    	  zoneChanged = true;
    8d7e:	81 e0       	ldi	r24, 0x01	; 1
    8d80:	80 93 28 34 	sts	0x3428, r24
    8d84:	6a ce       	rjmp	.-812    	; 0x8a5a <Read_config_file+0x18>

	  } else {
	    break;
	  }
	}
    serverOpenCommand[strlen(serverOpenCommand)-1] = 0;
    8d86:	08 e2       	ldi	r16, 0x28	; 40
    8d88:	11 e3       	ldi	r17, 0x31	; 49
    8d8a:	f8 01       	movw	r30, r16
    8d8c:	01 90       	ld	r0, Z+
    8d8e:	00 20       	and	r0, r0
    8d90:	e9 f7       	brne	.-6      	; 0x8d8c <Read_config_file+0x34a>
    8d92:	32 97       	sbiw	r30, 0x02	; 2
    8d94:	10 82       	st	Z, r1
	strcat(serverOpenCommand," ");
    8d96:	c8 01       	movw	r24, r16
    8d98:	6a ef       	ldi	r22, 0xFA	; 250
    8d9a:	72 e2       	ldi	r23, 0x22	; 34
    8d9c:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
    strcat(serverOpenCommand,port);
    8da0:	c8 01       	movw	r24, r16
    8da2:	60 e1       	ldi	r22, 0x10	; 16
    8da4:	7c e5       	ldi	r23, 0x5C	; 92
    8da6:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    8daa:	83 e2       	ldi	r24, 0x23	; 35
    8dac:	9b e4       	ldi	r25, 0x4B	; 75
    8dae:	6c ef       	ldi	r22, 0xFC	; 252
    8db0:	72 e2       	ldi	r23, 0x22	; 34
    8db2:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    8db6:	00 97       	sbiw	r24, 0x00	; 0
    8db8:	49 f0       	breq	.+18     	; 0x8dcc <Read_config_file+0x38a>
    8dba:	80 91 28 34 	lds	r24, 0x3428
    8dbe:	88 23       	and	r24, r24
    8dc0:	29 f0       	breq	.+10     	; 0x8dcc <Read_config_file+0x38a>
       timeZoneShift--;
    8dc2:	80 91 29 34 	lds	r24, 0x3429
    8dc6:	81 50       	subi	r24, 0x01	; 1
    8dc8:	80 93 29 34 	sts	0x3429, r24
    }
    if(zoneChanged){
    8dcc:	80 91 28 34 	lds	r24, 0x3428
    8dd0:	88 23       	and	r24, r24
    8dd2:	51 f1       	breq	.+84     	; 0x8e28 <Read_config_file+0x3e6>
        Debug_SendString("Time Zone changed to: ",false);
    8dd4:	81 e0       	ldi	r24, 0x01	; 1
    8dd6:	93 e2       	ldi	r25, 0x23	; 35
    8dd8:	60 e0       	ldi	r22, 0x00	; 0
    8dda:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	    Debug_SendString(zone,true);
    8dde:	8a e5       	ldi	r24, 0x5A	; 90
    8de0:	91 e3       	ldi	r25, 0x31	; 49
    8de2:	61 e0       	ldi	r22, 0x01	; 1
    8de4:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
        sprintf(temp,"shifted by %u",timeZoneShift);
    8de8:	00 d0       	rcall	.+0      	; 0x8dea <Read_config_file+0x3a8>
    8dea:	00 d0       	rcall	.+0      	; 0x8dec <Read_config_file+0x3aa>
    8dec:	ed b7       	in	r30, 0x3d	; 61
    8dee:	fe b7       	in	r31, 0x3e	; 62
    8df0:	31 96       	adiw	r30, 0x01	; 1
    8df2:	0a e6       	ldi	r16, 0x6A	; 106
    8df4:	1a e4       	ldi	r17, 0x4A	; 74
    8df6:	ad b7       	in	r26, 0x3d	; 61
    8df8:	be b7       	in	r27, 0x3e	; 62
    8dfa:	11 96       	adiw	r26, 0x01	; 1
    8dfc:	0d 93       	st	X+, r16
    8dfe:	1c 93       	st	X, r17
    8e00:	12 97       	sbiw	r26, 0x02	; 2
    8e02:	88 e1       	ldi	r24, 0x18	; 24
    8e04:	93 e2       	ldi	r25, 0x23	; 35
    8e06:	82 83       	std	Z+2, r24	; 0x02
    8e08:	93 83       	std	Z+3, r25	; 0x03
    8e0a:	80 91 29 34 	lds	r24, 0x3429
    8e0e:	84 83       	std	Z+4, r24	; 0x04
    8e10:	15 82       	std	Z+5, r1	; 0x05
    8e12:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
	    Debug_SendString(temp,true);
    8e16:	8d b7       	in	r24, 0x3d	; 61
    8e18:	9e b7       	in	r25, 0x3e	; 62
    8e1a:	06 96       	adiw	r24, 0x06	; 6
    8e1c:	8d bf       	out	0x3d, r24	; 61
    8e1e:	9e bf       	out	0x3e, r25	; 62
    8e20:	c8 01       	movw	r24, r16
    8e22:	61 e0       	ldi	r22, 0x01	; 1
    8e24:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    }
}
    8e28:	df 91       	pop	r29
    8e2a:	cf 91       	pop	r28
    8e2c:	1f 91       	pop	r17
    8e2e:	0f 91       	pop	r16
    8e30:	08 95       	ret

00008e32 <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    8e32:	ef 92       	push	r14
    8e34:	ff 92       	push	r15
    8e36:	0f 93       	push	r16
    8e38:	1f 93       	push	r17
    8e3a:	7b 01       	movw	r14, r22
    8e3c:	8c 01       	movw	r16, r24
	uint8_t resp;

	Debug_SendString("Opening Log File",true);
    8e3e:	86 e2       	ldi	r24, 0x26	; 38
    8e40:	93 e2       	ldi	r25, 0x23	; 35
    8e42:	61 e0       	ldi	r22, 0x01	; 1
    8e44:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

	SD_MakeFileName(time);
    8e48:	c8 01       	movw	r24, r16
    8e4a:	b7 01       	movw	r22, r14
    8e4c:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <SD_MakeFileName>
	resp = SD_Open(fileName);
    8e50:	80 e7       	ldi	r24, 0x70	; 112
    8e52:	95 e4       	ldi	r25, 0x45	; 69
    8e54:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <SD_Open>
    8e58:	18 2f       	mov	r17, r24


}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    8e5a:	8f ef       	ldi	r24, 0xFF	; 255
    8e5c:	9f ef       	ldi	r25, 0xFF	; 255
    8e5e:	af ef       	ldi	r26, 0xFF	; 255
    8e60:	bf ef       	ldi	r27, 0xFF	; 255
    8e62:	80 93 36 57 	sts	0x5736, r24
    8e66:	90 93 37 57 	sts	0x5737, r25
    8e6a:	a0 93 38 57 	sts	0x5738, r26
    8e6e:	b0 93 39 57 	sts	0x5739, r27
	Debug_SendString("Opening Log File",true);

	SD_MakeFileName(time);
	resp = SD_Open(fileName);
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    8e72:	6c e4       	ldi	r22, 0x4C	; 76
    8e74:	74 e7       	ldi	r23, 0x74	; 116
    8e76:	8e ed       	ldi	r24, 0xDE	; 222
    8e78:	90 eb       	ldi	r25, 0xB0	; 176
    8e7a:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    8e7e:	61 e4       	ldi	r22, 0x41	; 65
    8e80:	72 e0       	ldi	r23, 0x02	; 2
    8e82:	80 e0       	ldi	r24, 0x00	; 0
    8e84:	90 e0       	ldi	r25, 0x00	; 0
    8e86:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    8e8a:	81 e0       	ldi	r24, 0x01	; 1
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

														// payload
	SD_Write16(0x0100);				// protocol version
    8e92:	80 e0       	ldi	r24, 0x00	; 0
    8e94:	91 e0       	ldi	r25, 0x01	; 1
    8e96:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>
	SD_Write8(0x02);					// time protocol
    8e9a:	82 e0       	ldi	r24, 0x02	; 2
    8e9c:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    8ea0:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    8ea4:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write32(542535);			// picoseconds per tick (48bit) (truly is 542534.722)
    8ea8:	67 e4       	ldi	r22, 0x47	; 71
    8eaa:	77 e4       	ldi	r23, 0x47	; 71
    8eac:	88 e0       	ldi	r24, 0x08	; 8
    8eae:	90 e0       	ldi	r25, 0x00	; 0
    8eb0:	0e 94 ed 2a 	call	0x55da	; 0x55da <SD_Write32>
	SD_Write16(0);
    8eb4:	80 e0       	ldi	r24, 0x00	; 0
    8eb6:	90 e0       	ldi	r25, 0x00	; 0
    8eb8:	0e 94 07 2b 	call	0x560e	; 0x560e <SD_Write16>

	SD_WriteString("device_class");
    8ebc:	87 e3       	ldi	r24, 0x37	; 55
    8ebe:	93 e2       	ldi	r25, 0x23	; 35
    8ec0:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    8ec4:	89 e0       	ldi	r24, 0x09	; 9
    8ec6:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString(DeviceClass);
    8eca:	84 e4       	ldi	r24, 0x44	; 68
    8ecc:	93 e2       	ldi	r25, 0x23	; 35
    8ece:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    8ed2:	8a e0       	ldi	r24, 0x0A	; 10
    8ed4:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
		
	SD_WriteString("device_id");
    8ed8:	80 e5       	ldi	r24, 0x50	; 80
    8eda:	93 e2       	ldi	r25, 0x23	; 35
    8edc:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    8ee0:	89 e0       	ldi	r24, 0x09	; 9
    8ee2:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString(macAddr);
    8ee6:	84 e8       	ldi	r24, 0x84	; 132
    8ee8:	95 e4       	ldi	r25, 0x45	; 69
    8eea:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    8eee:	8a e0       	ldi	r24, 0x0A	; 10
    8ef0:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
		
	SD_WriteString("firmware_version");
    8ef4:	8a e5       	ldi	r24, 0x5A	; 90
    8ef6:	93 e2       	ldi	r25, 0x23	; 35
    8ef8:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    8efc:	89 e0       	ldi	r24, 0x09	; 9
    8efe:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString(FirmwareVersion);
    8f02:	8b e6       	ldi	r24, 0x6B	; 107
    8f04:	93 e2       	ldi	r25, 0x23	; 35
    8f06:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    8f0a:	8a e0       	ldi	r24, 0x0A	; 10
    8f0c:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
		
	SD_WriteString("hardware_version");
    8f10:	80 e7       	ldi	r24, 0x70	; 112
    8f12:	93 e2       	ldi	r25, 0x23	; 35
    8f14:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    8f18:	89 e0       	ldi	r24, 0x09	; 9
    8f1a:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString(HardwareVersion);
    8f1e:	81 e8       	ldi	r24, 0x81	; 129
    8f20:	93 e2       	ldi	r25, 0x23	; 35
    8f22:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    8f26:	8a e0       	ldi	r24, 0x0A	; 10
    8f28:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	SD_WriteString("channel_specs");
    8f2c:	83 e8       	ldi	r24, 0x83	; 131
    8f2e:	93 e2       	ldi	r25, 0x23	; 35
    8f30:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x09);
    8f34:	89 e0       	ldi	r24, 0x09	; 9
    8f36:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    8f3a:	81 e9       	ldi	r24, 0x91	; 145
    8f3c:	93 e2       	ldi	r25, 0x23	; 35
    8f3e:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    8f42:	82 ec       	ldi	r24, 0xC2	; 194
    8f44:	93 e2       	ldi	r25, 0x23	; 35
    8f46:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    8f4a:	8b ee       	ldi	r24, 0xEB	; 235
    8f4c:	93 e2       	ldi	r25, 0x23	; 35
    8f4e:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    8f52:	84 e1       	ldi	r24, 0x14	; 20
    8f54:	94 e2       	ldi	r25, 0x24	; 36
    8f56:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    8f5a:	81 e4       	ldi	r24, 0x41	; 65
    8f5c:	94 e2       	ldi	r25, 0x24	; 36
    8f5e:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    8f62:	8c e6       	ldi	r24, 0x6C	; 108
    8f64:	94 e2       	ldi	r25, 0x24	; 36
    8f66:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    8f6a:	88 e9       	ldi	r24, 0x98	; 152
    8f6c:	94 e2       	ldi	r25, 0x24	; 36
    8f6e:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    8f72:	85 ec       	ldi	r24, 0xC5	; 197
    8f74:	94 e2       	ldi	r25, 0x24	; 36
    8f76:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    8f7a:	86 ef       	ldi	r24, 0xF6	; 246
    8f7c:	94 e2       	ldi	r25, 0x24	; 36
    8f7e:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    8f82:	87 e2       	ldi	r24, 0x27	; 39
    8f84:	95 e2       	ldi	r25, 0x25	; 37
    8f86:	0e 94 ce 39 	call	0x739c	; 0x739c <SD_WriteString>
	SD_Write8(0x0A);
    8f8a:	8a e0       	ldi	r24, 0x0A	; 10
    8f8c:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>
	
	SD_Write8(0x00);
    8f90:	80 e0       	ldi	r24, 0x00	; 0
    8f92:	0e 94 12 2b 	call	0x5624	; 0x5624 <SD_Write8>

	SD_WriteCRC();			// CRC			
    8f96:	0e 94 28 2b 	call	0x5650	; 0x5650 <SD_WriteCRC>


	f_sync(&Log_File);
    8f9a:	8e e5       	ldi	r24, 0x5E	; 94
    8f9c:	9f e4       	ldi	r25, 0x4F	; 79
    8f9e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>

	return resp;
}
    8fa2:	81 2f       	mov	r24, r17
    8fa4:	1f 91       	pop	r17
    8fa6:	0f 91       	pop	r16
    8fa8:	ff 90       	pop	r15
    8faa:	ef 90       	pop	r14
    8fac:	08 95       	ret

00008fae <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(TCE1_OVF_vect)
{
    8fae:	1f 92       	push	r1
    8fb0:	0f 92       	push	r0
    8fb2:	0f b6       	in	r0, 0x3f	; 63
    8fb4:	0f 92       	push	r0
    8fb6:	0b b6       	in	r0, 0x3b	; 59
    8fb8:	0f 92       	push	r0
    8fba:	11 24       	eor	r1, r1
    8fbc:	af 92       	push	r10
    8fbe:	bf 92       	push	r11
    8fc0:	cf 92       	push	r12
    8fc2:	df 92       	push	r13
    8fc4:	ef 92       	push	r14
    8fc6:	ff 92       	push	r15
    8fc8:	0f 93       	push	r16
    8fca:	1f 93       	push	r17
    8fcc:	2f 93       	push	r18
    8fce:	3f 93       	push	r19
    8fd0:	4f 93       	push	r20
    8fd2:	5f 93       	push	r21
    8fd4:	6f 93       	push	r22
    8fd6:	7f 93       	push	r23
    8fd8:	8f 93       	push	r24
    8fda:	9f 93       	push	r25
    8fdc:	af 93       	push	r26
    8fde:	bf 93       	push	r27
    8fe0:	ef 93       	push	r30
    8fe2:	ff 93       	push	r31
    8fe4:	df 93       	push	r29
    8fe6:	cf 93       	push	r28
    8fe8:	0f 92       	push	r0
    8fea:	0f 92       	push	r0
    8fec:	cd b7       	in	r28, 0x3d	; 61
    8fee:	de b7       	in	r29, 0x3e	; 62

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    8ff0:	80 91 11 34 	lds	r24, 0x3411
    8ff4:	88 23       	and	r24, r24
    8ff6:	71 f0       	breq	.+28     	; 0x9014 <__vector_53+0x66>
    8ff8:	80 91 06 34 	lds	r24, 0x3406
    8ffc:	88 23       	and	r24, r24
    8ffe:	51 f0       	breq	.+20     	; 0x9014 <__vector_53+0x66>
    9000:	80 91 42 34 	lds	r24, 0x3442
    9004:	88 23       	and	r24, r24
    9006:	31 f4       	brne	.+12     	; 0x9014 <__vector_53+0x66>
		SD_WriteMicrophoneBuffer(1);
    9008:	81 e0       	ldi	r24, 0x01	; 1
    900a:	0e 94 3a 3b 	call	0x7674	; 0x7674 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    900e:	10 92 11 34 	sts	0x3411, r1
    9012:	11 c0       	rjmp	.+34     	; 0x9036 <__vector_53+0x88>
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    9014:	80 91 12 34 	lds	r24, 0x3412
    9018:	88 23       	and	r24, r24
    901a:	69 f0       	breq	.+26     	; 0x9036 <__vector_53+0x88>
    901c:	80 91 06 34 	lds	r24, 0x3406
    9020:	88 23       	and	r24, r24
    9022:	49 f0       	breq	.+18     	; 0x9036 <__vector_53+0x88>
    9024:	80 91 42 34 	lds	r24, 0x3442
    9028:	88 23       	and	r24, r24
    902a:	29 f4       	brne	.+10     	; 0x9036 <__vector_53+0x88>
		SD_WriteMicrophoneBuffer(2);
    902c:	82 e0       	ldi	r24, 0x02	; 2
    902e:	0e 94 3a 3b 	call	0x7674	; 0x7674 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    9032:	10 92 12 34 	sts	0x3412, r1
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    9036:	80 91 08 34 	lds	r24, 0x3408
    903a:	88 23       	and	r24, r24
    903c:	71 f0       	breq	.+28     	; 0x905a <__vector_53+0xac>
    903e:	80 91 06 34 	lds	r24, 0x3406
    9042:	88 23       	and	r24, r24
    9044:	51 f0       	breq	.+20     	; 0x905a <__vector_53+0xac>
    9046:	80 91 42 34 	lds	r24, 0x3442
    904a:	88 23       	and	r24, r24
    904c:	31 f4       	brne	.+12     	; 0x905a <__vector_53+0xac>
		//Debug_SendString("T Buffer1",true);
		SD_WriteTemperatureBuffer(1);
    904e:	81 e0       	ldi	r24, 0x01	; 1
    9050:	0e 94 7f 3c 	call	0x78fe	; 0x78fe <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    9054:	10 92 08 34 	sts	0x3408, r1
    9058:	11 c0       	rjmp	.+34     	; 0x907c <__vector_53+0xce>
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    905a:	80 91 09 34 	lds	r24, 0x3409
    905e:	88 23       	and	r24, r24
    9060:	69 f0       	breq	.+26     	; 0x907c <__vector_53+0xce>
    9062:	80 91 06 34 	lds	r24, 0x3406
    9066:	88 23       	and	r24, r24
    9068:	49 f0       	breq	.+18     	; 0x907c <__vector_53+0xce>
    906a:	80 91 42 34 	lds	r24, 0x3442
    906e:	88 23       	and	r24, r24
    9070:	29 f4       	brne	.+10     	; 0x907c <__vector_53+0xce>
		//Debug_SendString("T Buffer2",true);
		SD_WriteTemperatureBuffer(2);
    9072:	82 e0       	ldi	r24, 0x02	; 2
    9074:	0e 94 7f 3c 	call	0x78fe	; 0x78fe <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    9078:	10 92 09 34 	sts	0x3409, r1
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    907c:	80 91 0e 34 	lds	r24, 0x340E
    9080:	88 23       	and	r24, r24
    9082:	71 f0       	breq	.+28     	; 0x90a0 <__vector_53+0xf2>
    9084:	80 91 06 34 	lds	r24, 0x3406
    9088:	88 23       	and	r24, r24
    908a:	51 f0       	breq	.+20     	; 0x90a0 <__vector_53+0xf2>
    908c:	80 91 42 34 	lds	r24, 0x3442
    9090:	88 23       	and	r24, r24
    9092:	31 f4       	brne	.+12     	; 0x90a0 <__vector_53+0xf2>
		//Debug_SendString("H Buffer1",true);
		SD_WriteHumidityBuffer(1);
    9094:	81 e0       	ldi	r24, 0x01	; 1
    9096:	0e 94 0e 3c 	call	0x781c	; 0x781c <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    909a:	10 92 0e 34 	sts	0x340E, r1
    909e:	11 c0       	rjmp	.+34     	; 0x90c2 <__vector_53+0x114>
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    90a0:	80 91 0f 34 	lds	r24, 0x340F
    90a4:	88 23       	and	r24, r24
    90a6:	69 f0       	breq	.+26     	; 0x90c2 <__vector_53+0x114>
    90a8:	80 91 06 34 	lds	r24, 0x3406
    90ac:	88 23       	and	r24, r24
    90ae:	49 f0       	breq	.+18     	; 0x90c2 <__vector_53+0x114>
    90b0:	80 91 42 34 	lds	r24, 0x3442
    90b4:	88 23       	and	r24, r24
    90b6:	29 f4       	brne	.+10     	; 0x90c2 <__vector_53+0x114>
		//Debug_SendString("H Buffer2",true);
		SD_WriteHumidityBuffer(2);
    90b8:	82 e0       	ldi	r24, 0x02	; 2
    90ba:	0e 94 0e 3c 	call	0x781c	; 0x781c <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    90be:	10 92 0f 34 	sts	0x340F, r1
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    90c2:	80 91 0b 34 	lds	r24, 0x340B
    90c6:	88 23       	and	r24, r24
    90c8:	71 f0       	breq	.+28     	; 0x90e6 <__vector_53+0x138>
    90ca:	80 91 06 34 	lds	r24, 0x3406
    90ce:	88 23       	and	r24, r24
    90d0:	51 f0       	breq	.+20     	; 0x90e6 <__vector_53+0x138>
    90d2:	80 91 42 34 	lds	r24, 0x3442
    90d6:	88 23       	and	r24, r24
    90d8:	31 f4       	brne	.+12     	; 0x90e6 <__vector_53+0x138>
		//Debug_SendString("P Buffer1",true);
		SD_WritePressureBuffer(1);
    90da:	81 e0       	ldi	r24, 0x01	; 1
    90dc:	0e 94 9d 3b 	call	0x773a	; 0x773a <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    90e0:	10 92 0b 34 	sts	0x340B, r1
    90e4:	11 c0       	rjmp	.+34     	; 0x9108 <__vector_53+0x15a>
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    90e6:	80 91 0c 34 	lds	r24, 0x340C
    90ea:	88 23       	and	r24, r24
    90ec:	69 f0       	breq	.+26     	; 0x9108 <__vector_53+0x15a>
    90ee:	80 91 06 34 	lds	r24, 0x3406
    90f2:	88 23       	and	r24, r24
    90f4:	49 f0       	breq	.+18     	; 0x9108 <__vector_53+0x15a>
    90f6:	80 91 42 34 	lds	r24, 0x3442
    90fa:	88 23       	and	r24, r24
    90fc:	29 f4       	brne	.+10     	; 0x9108 <__vector_53+0x15a>
		//Debug_SendString("P Buffer2",true);
		SD_WritePressureBuffer(2);
    90fe:	82 e0       	ldi	r24, 0x02	; 2
    9100:	0e 94 9d 3b 	call	0x773a	; 0x773a <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    9104:	10 92 0c 34 	sts	0x340C, r1
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    9108:	80 91 15 34 	lds	r24, 0x3415
    910c:	88 23       	and	r24, r24
    910e:	71 f0       	breq	.+28     	; 0x912c <__vector_53+0x17e>
    9110:	80 91 06 34 	lds	r24, 0x3406
    9114:	88 23       	and	r24, r24
    9116:	51 f0       	breq	.+20     	; 0x912c <__vector_53+0x17e>
    9118:	80 91 42 34 	lds	r24, 0x3442
    911c:	88 23       	and	r24, r24
    911e:	31 f4       	brne	.+12     	; 0x912c <__vector_53+0x17e>
		//Debug_SendString("L Buffer1",true);
		SD_WriteLightBuffer(1);
    9120:	81 e0       	ldi	r24, 0x01	; 1
    9122:	0e 94 99 3a 	call	0x7532	; 0x7532 <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    9126:	10 92 15 34 	sts	0x3415, r1
    912a:	11 c0       	rjmp	.+34     	; 0x914e <__vector_53+0x1a0>
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    912c:	80 91 16 34 	lds	r24, 0x3416
    9130:	88 23       	and	r24, r24
    9132:	69 f0       	breq	.+26     	; 0x914e <__vector_53+0x1a0>
    9134:	80 91 06 34 	lds	r24, 0x3406
    9138:	88 23       	and	r24, r24
    913a:	49 f0       	breq	.+18     	; 0x914e <__vector_53+0x1a0>
    913c:	80 91 42 34 	lds	r24, 0x3442
    9140:	88 23       	and	r24, r24
    9142:	29 f4       	brne	.+10     	; 0x914e <__vector_53+0x1a0>
		//Debug_SendString("L Buffer2",true);
		SD_WriteLightBuffer(2);
    9144:	82 e0       	ldi	r24, 0x02	; 2
    9146:	0e 94 99 3a 	call	0x7532	; 0x7532 <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    914a:	10 92 16 34 	sts	0x3416, r1
	}

	if(okToSendAirQuality && recording && !restartingFile){
    914e:	80 91 f2 33 	lds	r24, 0x33F2
    9152:	88 23       	and	r24, r24
    9154:	61 f0       	breq	.+24     	; 0x916e <__vector_53+0x1c0>
    9156:	80 91 06 34 	lds	r24, 0x3406
    915a:	88 23       	and	r24, r24
    915c:	41 f0       	breq	.+16     	; 0x916e <__vector_53+0x1c0>
    915e:	80 91 42 34 	lds	r24, 0x3442
    9162:	88 23       	and	r24, r24
    9164:	21 f4       	brne	.+8      	; 0x916e <__vector_53+0x1c0>
		//Debug_SendString("A Buffer",true);
		SD_WriteAirSample();
    9166:	0e 94 29 3a 	call	0x7452	; 0x7452 <SD_WriteAirSample>
		okToSendAirQuality = false;
    916a:	10 92 f2 33 	sts	0x33F2, r1
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    916e:	80 91 32 34 	lds	r24, 0x3432
    9172:	88 23       	and	r24, r24
    9174:	09 f4       	brne	.+2      	; 0x9178 <__vector_53+0x1ca>
    9176:	81 c0       	rjmp	.+258    	; 0x927a <__vector_53+0x2cc>
    9178:	80 91 65 34 	lds	r24, 0x3465
    917c:	90 91 66 34 	lds	r25, 0x3466
    9180:	a0 91 67 34 	lds	r26, 0x3467
    9184:	b0 91 68 34 	lds	r27, 0x3468
    9188:	86 5b       	subi	r24, 0xB6	; 182
    918a:	93 40       	sbci	r25, 0x03	; 3
    918c:	a0 40       	sbci	r26, 0x00	; 0
    918e:	b0 40       	sbci	r27, 0x00	; 0
    9190:	08 f0       	brcs	.+2      	; 0x9194 <__vector_53+0x1e6>
    9192:	73 c0       	rjmp	.+230    	; 0x927a <__vector_53+0x2cc>
		SD_Init();
    9194:	0e 94 46 2b 	call	0x568c	; 0x568c <SD_Init>
		SD_StartLogFile(UNIX_time);								// open file
    9198:	60 91 01 34 	lds	r22, 0x3401
    919c:	70 91 02 34 	lds	r23, 0x3402
    91a0:	80 91 03 34 	lds	r24, 0x3403
    91a4:	90 91 04 34 	lds	r25, 0x3404
    91a8:	0e 94 19 47 	call	0x8e32	; 0x8e32 <SD_StartLogFile>
    91ac:	88 ee       	ldi	r24, 0xE8	; 232
    91ae:	93 e0       	ldi	r25, 0x03	; 3
    91b0:	20 e7       	ldi	r18, 0x70	; 112
    91b2:	31 e0       	ldi	r19, 0x01	; 1
    91b4:	f9 01       	movw	r30, r18
    91b6:	31 97       	sbiw	r30, 0x01	; 1
    91b8:	f1 f7       	brne	.-4      	; 0x91b6 <__vector_53+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    91ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    91bc:	d9 f7       	brne	.-10     	; 0x91b4 <__vector_53+0x206>
		_delay_ms(100);

        recordFileRestartCounter = 0;
    91be:	10 92 52 34 	sts	0x3452, r1
    91c2:	10 92 53 34 	sts	0x3453, r1
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    91c6:	e0 e2       	ldi	r30, 0x20	; 32
    91c8:	f6 e0       	ldi	r31, 0x06	; 6
    91ca:	11 e0       	ldi	r17, 0x01	; 1
    91cc:	16 83       	std	Z+6, r17	; 0x06

		Leds_Clear(sd_Green);
		Leds_Clear(wifi_Green);
		timeRecordingStarted = UNIX_time;
    91ce:	80 e4       	ldi	r24, 0x40	; 64
    91d0:	86 83       	std	Z+6, r24	; 0x06
    91d2:	80 91 01 34 	lds	r24, 0x3401
    91d6:	90 91 02 34 	lds	r25, 0x3402
    91da:	a0 91 03 34 	lds	r26, 0x3403
    91de:	b0 91 04 34 	lds	r27, 0x3404
    91e2:	80 93 d2 33 	sts	0x33D2, r24
    91e6:	90 93 d3 33 	sts	0x33D3, r25
    91ea:	a0 93 d4 33 	sts	0x33D4, r26
    91ee:	b0 93 d5 33 	sts	0x33D5, r27

		Debug_SendString("RTC Block: ",false);							// send rtc block
    91f2:	83 e5       	ldi	r24, 0x53	; 83
    91f4:	95 e2       	ldi	r25, 0x25	; 37
    91f6:	60 e0       	ldi	r22, 0x00	; 0
    91f8:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    91fc:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    9200:	20 91 01 34 	lds	r18, 0x3401
    9204:	30 91 02 34 	lds	r19, 0x3402
    9208:	40 91 03 34 	lds	r20, 0x3403
    920c:	50 91 04 34 	lds	r21, 0x3404
    9210:	0e 94 6e 39 	call	0x72dc	; 0x72dc <SD_WriteRTCBlock>
		Debug_SendString(ltoa(UNIX_time,temp,10),false);
    9214:	60 91 01 34 	lds	r22, 0x3401
    9218:	70 91 02 34 	lds	r23, 0x3402
    921c:	80 91 03 34 	lds	r24, 0x3403
    9220:	90 91 04 34 	lds	r25, 0x3404
    9224:	4a e6       	ldi	r20, 0x6A	; 106
    9226:	5a e4       	ldi	r21, 0x4A	; 74
    9228:	2a e0       	ldi	r18, 0x0A	; 10
    922a:	30 e0       	ldi	r19, 0x00	; 0
    922c:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
    9230:	60 e0       	ldi	r22, 0x00	; 0
    9232:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
		Debug_SendString(", ",false);
    9236:	8f e5       	ldi	r24, 0x5F	; 95
    9238:	95 e2       	ldi	r25, 0x25	; 37
    923a:	60 e0       	ldi	r22, 0x00	; 0
    923c:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
		Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);
    9240:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    9244:	4a e6       	ldi	r20, 0x6A	; 106
    9246:	5a e4       	ldi	r21, 0x4A	; 74
    9248:	2a e0       	ldi	r18, 0x0A	; 10
    924a:	30 e0       	ldi	r19, 0x00	; 0
    924c:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
    9250:	61 e0       	ldi	r22, 0x01	; 1
    9252:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    9256:	80 91 f0 33 	lds	r24, 0x33F0
    925a:	90 91 f1 33 	lds	r25, 0x33F1
    925e:	80 93 ee 33 	sts	0x33EE, r24
    9262:	90 93 ef 33 	sts	0x33EF, r25

		Rs232_ClearBuffer();
		rs232Recording = true;
    9266:	10 93 fb 33 	sts	0x33FB, r17
		recording = true;
    926a:	10 93 06 34 	sts	0x3406, r17
		okToOpenLogFile = false;
    926e:	10 92 32 34 	sts	0x3432, r1
		directoryOpened = false;
    9272:	10 92 38 34 	sts	0x3438, r1
		okToReopenDirectory = true;
    9276:	10 93 37 34 	sts	0x3437, r17
	}

	if(okToCloseLogFile){
    927a:	80 91 34 34 	lds	r24, 0x3434
    927e:	88 23       	and	r24, r24
    9280:	49 f0       	breq	.+18     	; 0x9294 <__vector_53+0x2e6>
		SD_Close();
    9282:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <SD_Close>
		okToCloseLogFile = false;
    9286:	10 92 34 34 	sts	0x3434, r1
		directoryOpened = false;
    928a:	10 92 38 34 	sts	0x3438, r1
		okToReopenDirectory = true;
    928e:	81 e0       	ldi	r24, 0x01	; 1
    9290:	80 93 37 34 	sts	0x3437, r24
	}

	if(okToSendRTCBlock && recording){
    9294:	80 91 18 34 	lds	r24, 0x3418
    9298:	88 23       	and	r24, r24
    929a:	91 f0       	breq	.+36     	; 0x92c0 <__vector_53+0x312>
    929c:	80 91 06 34 	lds	r24, 0x3406
    92a0:	88 23       	and	r24, r24
    92a2:	71 f0       	breq	.+28     	; 0x92c0 <__vector_53+0x312>
		//Debug_SendString("RTC Block: ",false);
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    92a4:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    92a8:	20 91 01 34 	lds	r18, 0x3401
    92ac:	30 91 02 34 	lds	r19, 0x3402
    92b0:	40 91 03 34 	lds	r20, 0x3403
    92b4:	50 91 04 34 	lds	r21, 0x3404
    92b8:	0e 94 6e 39 	call	0x72dc	; 0x72dc <SD_WriteRTCBlock>
		//Debug_SendString(ltoa(UNIX_time,temp,10),false);
		//Debug_SendString(", ",false);
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);
		okToSendRTCBlock = false;
    92bc:	10 92 18 34 	sts	0x3418, r1
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    92c0:	80 91 36 34 	lds	r24, 0x3436
    92c4:	88 23       	and	r24, r24
    92c6:	09 f4       	brne	.+2      	; 0x92ca <__vector_53+0x31c>
    92c8:	63 c0       	rjmp	.+198    	; 0x9390 <__vector_53+0x3e2>
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    92ca:	80 91 a8 06 	lds	r24, 0x06A8
    92ce:	80 fd       	sbrc	r24, 0
    92d0:	5f c0       	rjmp	.+190    	; 0x9390 <__vector_53+0x3e2>
    92d2:	ba c2       	rjmp	.+1396   	; 0x9848 <__vector_53+0x89a>
		if(okToReopenDirectory){
    92d4:	80 91 37 34 	lds	r24, 0x3437
    92d8:	88 23       	and	r24, r24
    92da:	69 f0       	breq	.+26     	; 0x92f6 <__vector_53+0x348>
			if(f_opendir(&dir, "/") == FR_OK){
    92dc:	82 e9       	ldi	r24, 0x92	; 146
    92de:	91 e5       	ldi	r25, 0x51	; 81
    92e0:	62 e6       	ldi	r22, 0x62	; 98
    92e2:	75 e2       	ldi	r23, 0x25	; 37
    92e4:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <f_opendir>
    92e8:	88 23       	and	r24, r24
    92ea:	29 f4       	brne	.+10     	; 0x92f6 <__vector_53+0x348>
				directoryOpened = true;
    92ec:	81 e0       	ldi	r24, 0x01	; 1
    92ee:	80 93 38 34 	sts	0x3438, r24
				okToReopenDirectory = false;
    92f2:	10 92 37 34 	sts	0x3437, r1
			}
		}

		if(directoryOpened){
    92f6:	80 91 38 34 	lds	r24, 0x3438
    92fa:	88 23       	and	r24, r24
    92fc:	09 f4       	brne	.+2      	; 0x9300 <__vector_53+0x352>
    92fe:	48 c0       	rjmp	.+144    	; 0x9390 <__vector_53+0x3e2>
			if((f_readdir(&dir, &fno) == FR_OK)){
    9300:	82 e9       	ldi	r24, 0x92	; 146
    9302:	91 e5       	ldi	r25, 0x51	; 81
    9304:	68 e5       	ldi	r22, 0x58	; 88
    9306:	75 e4       	ldi	r23, 0x45	; 69
    9308:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <f_readdir>
    930c:	88 23       	and	r24, r24
    930e:	09 f0       	breq	.+2      	; 0x9312 <__vector_53+0x364>
    9310:	3f c0       	rjmp	.+126    	; 0x9390 <__vector_53+0x3e2>
				if(fno.fname[0] == 0){
    9312:	80 91 61 45 	lds	r24, 0x4561
    9316:	88 23       	and	r24, r24
    9318:	31 f4       	brne	.+12     	; 0x9326 <__vector_53+0x378>
					directoryOpened = false;
    931a:	10 92 38 34 	sts	0x3438, r1
					okToReopenDirectory = true;
    931e:	81 e0       	ldi	r24, 0x01	; 1
    9320:	80 93 37 34 	sts	0x3437, r24
    9324:	35 c0       	rjmp	.+106    	; 0x9390 <__vector_53+0x3e2>
				} else {
					if(recording){
    9326:	80 91 06 34 	lds	r24, 0x3406
    932a:	88 23       	and	r24, r24
    932c:	c1 f0       	breq	.+48     	; 0x935e <__vector_53+0x3b0>
						if((strcasecmp(currentLogFile,fno.fname)) > 0){		// file is NOT the current file
    932e:	88 e2       	ldi	r24, 0x28	; 40
    9330:	9d e3       	ldi	r25, 0x3D	; 61
    9332:	61 e6       	ldi	r22, 0x61	; 97
    9334:	75 e4       	ldi	r23, 0x45	; 69
    9336:	0e 94 91 59 	call	0xb322	; 0xb322 <strcasecmp>
    933a:	18 16       	cp	r1, r24
    933c:	19 06       	cpc	r1, r25
    933e:	44 f5       	brge	.+80     	; 0x9390 <__vector_53+0x3e2>
							if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    9340:	81 e6       	ldi	r24, 0x61	; 97
    9342:	95 e4       	ldi	r25, 0x45	; 69
    9344:	64 e6       	ldi	r22, 0x64	; 100
    9346:	75 e2       	ldi	r23, 0x25	; 37
    9348:	0e 94 a4 59 	call	0xb348	; 0xb348 <strcasestr>
    934c:	89 2b       	or	r24, r25
    934e:	01 f1       	breq	.+64     	; 0x9390 <__vector_53+0x3e2>
								if(strcasestr(fno.fname,".BTU") == NULL){
    9350:	81 e6       	ldi	r24, 0x61	; 97
    9352:	95 e4       	ldi	r25, 0x45	; 69
    9354:	68 e6       	ldi	r22, 0x68	; 104
    9356:	75 e2       	ldi	r23, 0x25	; 37
    9358:	0e 94 a4 59 	call	0xb348	; 0xb348 <strcasestr>
    935c:	0e c0       	rjmp	.+28     	; 0x937a <__vector_53+0x3cc>
									okToUpload= true;
								}
							}
						}
					} else {
						if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    935e:	81 e6       	ldi	r24, 0x61	; 97
    9360:	95 e4       	ldi	r25, 0x45	; 69
    9362:	64 e6       	ldi	r22, 0x64	; 100
    9364:	75 e2       	ldi	r23, 0x25	; 37
    9366:	0e 94 a4 59 	call	0xb348	; 0xb348 <strcasestr>
    936a:	89 2b       	or	r24, r25
    936c:	89 f0       	breq	.+34     	; 0x9390 <__vector_53+0x3e2>
							if(strcasestr(fno.fname,".BTU") == NULL){
    936e:	81 e6       	ldi	r24, 0x61	; 97
    9370:	95 e4       	ldi	r25, 0x45	; 69
    9372:	68 e6       	ldi	r22, 0x68	; 104
    9374:	75 e2       	ldi	r23, 0x25	; 37
    9376:	0e 94 a4 59 	call	0xb348	; 0xb348 <strcasestr>
    937a:	89 2b       	or	r24, r25
    937c:	49 f4       	brne	.+18     	; 0x9390 <__vector_53+0x3e2>
								strcpy(fileToUpload,fno.fname);
    937e:	81 ec       	ldi	r24, 0xC1	; 193
    9380:	9c e3       	ldi	r25, 0x3C	; 60
    9382:	61 e6       	ldi	r22, 0x61	; 97
    9384:	75 e4       	ldi	r23, 0x45	; 69
    9386:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
								okToUpload = true;
    938a:	81 e0       	ldi	r24, 0x01	; 1
    938c:	80 93 3c 34 	sts	0x343C, r24
				}
			}
		}
	}

	if(okToOpenFileToUpload){
    9390:	80 91 3f 34 	lds	r24, 0x343F
    9394:	88 23       	and	r24, r24
    9396:	51 f1       	breq	.+84     	; 0x93ec <__vector_53+0x43e>
	   f_stat(fileToUpload,&fno);
    9398:	81 ec       	ldi	r24, 0xC1	; 193
    939a:	9c e3       	ldi	r25, 0x3C	; 60
    939c:	68 e5       	ldi	r22, 0x58	; 88
    939e:	75 e4       	ldi	r23, 0x45	; 69
    93a0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <f_stat>
	   uploadFileSize = fno.fsize;
    93a4:	80 91 58 45 	lds	r24, 0x4558
    93a8:	90 91 59 45 	lds	r25, 0x4559
    93ac:	a0 91 5a 45 	lds	r26, 0x455A
    93b0:	b0 91 5b 45 	lds	r27, 0x455B
    93b4:	80 93 46 34 	sts	0x3446, r24
    93b8:	90 93 47 34 	sts	0x3447, r25
    93bc:	a0 93 48 34 	sts	0x3448, r26
    93c0:	b0 93 49 34 	sts	0x3449, r27
	   f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    93c4:	88 ea       	ldi	r24, 0xA8	; 168
    93c6:	91 e5       	ldi	r25, 0x51	; 81
    93c8:	61 ec       	ldi	r22, 0xC1	; 193
    93ca:	7c e3       	ldi	r23, 0x3C	; 60
    93cc:	43 e1       	ldi	r20, 0x13	; 19
    93ce:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <f_open>
	   f_lseek(&Upload_File, 0);
    93d2:	88 ea       	ldi	r24, 0xA8	; 168
    93d4:	91 e5       	ldi	r25, 0x51	; 81
    93d6:	40 e0       	ldi	r20, 0x00	; 0
    93d8:	50 e0       	ldi	r21, 0x00	; 0
    93da:	60 e0       	ldi	r22, 0x00	; 0
    93dc:	70 e0       	ldi	r23, 0x00	; 0
    93de:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <f_lseek>
	   uploadFileOpened = true;
    93e2:	81 e0       	ldi	r24, 0x01	; 1
    93e4:	80 93 6e 31 	sts	0x316E, r24
	   okToOpenFileToUpload = false;
    93e8:	10 92 3f 34 	sts	0x343F, r1
	}

    if(okToFillUploadFileBuffer){
    93ec:	80 91 40 34 	lds	r24, 0x3440
    93f0:	88 23       	and	r24, r24
    93f2:	81 f0       	breq	.+32     	; 0x9414 <__vector_53+0x466>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    93f4:	88 ea       	ldi	r24, 0xA8	; 168
    93f6:	91 e5       	ldi	r25, 0x51	; 81
    93f8:	61 ed       	ldi	r22, 0xD1	; 209
    93fa:	78 e3       	ldi	r23, 0x38	; 56
    93fc:	48 ee       	ldi	r20, 0xE8	; 232
    93fe:	53 e0       	ldi	r21, 0x03	; 3
    9400:	9e 01       	movw	r18, r28
    9402:	2f 5f       	subi	r18, 0xFF	; 255
    9404:	3f 4f       	sbci	r19, 0xFF	; 255
    9406:	0e 94 39 17 	call	0x2e72	; 0x2e72 <f_read>
        okToFillUploadFileBuffer = false;
    940a:	10 92 40 34 	sts	0x3440, r1
        uploadFileBufferFull = true;
    940e:	81 e0       	ldi	r24, 0x01	; 1
    9410:	80 93 41 34 	sts	0x3441, r24
    }


	if(okToCloseUploadFile){
    9414:	80 91 3a 34 	lds	r24, 0x343A
    9418:	88 23       	and	r24, r24
    941a:	b9 f0       	breq	.+46     	; 0x944a <__vector_53+0x49c>
	    f_close(&Upload_File);
    941c:	88 ea       	ldi	r24, 0xA8	; 168
    941e:	91 e5       	ldi	r25, 0x51	; 81
    9420:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <f_close>
	    if(okToRenameUploadFile){
    9424:	80 91 3b 34 	lds	r24, 0x343B
    9428:	88 23       	and	r24, r24
    942a:	69 f0       	breq	.+26     	; 0x9446 <__vector_53+0x498>
	       f_rename(fileToUpload,newFileName);
    942c:	81 ec       	ldi	r24, 0xC1	; 193
    942e:	9c e3       	ldi	r25, 0x3C	; 60
    9430:	67 e2       	ldi	r22, 0x27	; 39
    9432:	77 e5       	ldi	r23, 0x57	; 87
    9434:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <f_rename>
	       Debug_SendString("Renaming File",true);
    9438:	8d e6       	ldi	r24, 0x6D	; 109
    943a:	95 e2       	ldi	r25, 0x25	; 37
    943c:	61 e0       	ldi	r22, 0x01	; 1
    943e:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	       okToRenameUploadFile = false;
    9442:	10 92 3b 34 	sts	0x343B, r1
	    }
		okToCloseUploadFile = false;
    9446:	10 92 3a 34 	sts	0x343A, r1
	}




	if(okToWriteUploaderLogFile){
    944a:	80 91 5c 34 	lds	r24, 0x345C
    944e:	88 23       	and	r24, r24
    9450:	09 f4       	brne	.+2      	; 0x9454 <__vector_53+0x4a6>
    9452:	d7 c0       	rjmp	.+430    	; 0x9602 <__vector_53+0x654>
        Debug_SendString("Updating uploadLg File",true);
    9454:	8b e7       	ldi	r24, 0x7B	; 123
    9456:	95 e2       	ldi	r25, 0x25	; 37
    9458:	61 e0       	ldi	r22, 0x01	; 1
    945a:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
        f_stat("/uploadLg.txt",&fno);
    945e:	82 e9       	ldi	r24, 0x92	; 146
    9460:	95 e2       	ldi	r25, 0x25	; 37
    9462:	68 e5       	ldi	r22, 0x58	; 88
    9464:	75 e4       	ldi	r23, 0x45	; 69
    9466:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    946a:	88 ea       	ldi	r24, 0xA8	; 168
    946c:	91 e5       	ldi	r25, 0x51	; 81
    946e:	62 e9       	ldi	r22, 0x92	; 146
    9470:	75 e2       	ldi	r23, 0x25	; 37
    9472:	43 e1       	ldi	r20, 0x13	; 19
    9474:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <f_open>
        f_lseek(&Upload_File, fno.fsize);
    9478:	40 91 58 45 	lds	r20, 0x4558
    947c:	50 91 59 45 	lds	r21, 0x4559
    9480:	60 91 5a 45 	lds	r22, 0x455A
    9484:	70 91 5b 45 	lds	r23, 0x455B
    9488:	88 ea       	ldi	r24, 0xA8	; 168
    948a:	91 e5       	ldi	r25, 0x51	; 81
    948c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <f_lseek>
        f_puts("File Name: ",&Upload_File);
    9490:	80 ea       	ldi	r24, 0xA0	; 160
    9492:	95 e2       	ldi	r25, 0x25	; 37
    9494:	68 ea       	ldi	r22, 0xA8	; 168
    9496:	71 e5       	ldi	r23, 0x51	; 81
    9498:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    949c:	81 ec       	ldi	r24, 0xC1	; 193
    949e:	9c e3       	ldi	r25, 0x3C	; 60
    94a0:	68 ea       	ldi	r22, 0xA8	; 168
    94a2:	71 e5       	ldi	r23, 0x51	; 81
    94a4:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(", Size: ",&Upload_File);
    94a8:	8c ea       	ldi	r24, 0xAC	; 172
    94aa:	95 e2       	ldi	r25, 0x25	; 37
    94ac:	68 ea       	ldi	r22, 0xA8	; 168
    94ae:	71 e5       	ldi	r23, 0x51	; 81
    94b0:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(ltoa(uploadFileSize,temp,10),&Upload_File);
    94b4:	60 91 46 34 	lds	r22, 0x3446
    94b8:	70 91 47 34 	lds	r23, 0x3447
    94bc:	80 91 48 34 	lds	r24, 0x3448
    94c0:	90 91 49 34 	lds	r25, 0x3449
    94c4:	4a e6       	ldi	r20, 0x6A	; 106
    94c6:	5a e4       	ldi	r21, 0x4A	; 74
    94c8:	2a e0       	ldi	r18, 0x0A	; 10
    94ca:	30 e0       	ldi	r19, 0x00	; 0
    94cc:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
    94d0:	68 ea       	ldi	r22, 0xA8	; 168
    94d2:	71 e5       	ldi	r23, 0x51	; 81
    94d4:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(" bytes, Response: ",&Upload_File);
    94d8:	85 eb       	ldi	r24, 0xB5	; 181
    94da:	95 e2       	ldi	r25, 0x25	; 37
    94dc:	68 ea       	ldi	r22, 0xA8	; 168
    94de:	71 e5       	ldi	r23, 0x51	; 81
    94e0:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(httpResponse,&Upload_File);
    94e4:	8c ee       	ldi	r24, 0xEC	; 236
    94e6:	93 e5       	ldi	r25, 0x53	; 83
    94e8:	68 ea       	ldi	r22, 0xA8	; 168
    94ea:	71 e5       	ldi	r23, 0x51	; 81
    94ec:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(", Successful Records: ",&Upload_File);
    94f0:	88 ec       	ldi	r24, 0xC8	; 200
    94f2:	95 e2       	ldi	r25, 0x25	; 37
    94f4:	68 ea       	ldi	r22, 0xA8	; 168
    94f6:	71 e5       	ldi	r23, 0x51	; 81
    94f8:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(successfulBinaryRecordsString,&Upload_File);
    94fc:	8b e4       	ldi	r24, 0x4B	; 75
    94fe:	9b e4       	ldi	r25, 0x4B	; 75
    9500:	68 ea       	ldi	r22, 0xA8	; 168
    9502:	71 e5       	ldi	r23, 0x51	; 81
    9504:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(", Failed Records: ",&Upload_File);
    9508:	8f ed       	ldi	r24, 0xDF	; 223
    950a:	95 e2       	ldi	r25, 0x25	; 37
    950c:	68 ea       	ldi	r22, 0xA8	; 168
    950e:	71 e5       	ldi	r23, 0x51	; 81
    9510:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(failedBinaryRecordsString,&Upload_File);
    9514:	84 e7       	ldi	r24, 0x74	; 116
    9516:	9c e5       	ldi	r25, 0x5C	; 92
    9518:	68 ea       	ldi	r22, 0xA8	; 168
    951a:	71 e5       	ldi	r23, 0x51	; 81
    951c:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(", Time to upload: ",&Upload_File);
    9520:	82 ef       	ldi	r24, 0xF2	; 242
    9522:	95 e2       	ldi	r25, 0x25	; 37
    9524:	68 ea       	ldi	r22, 0xA8	; 168
    9526:	71 e5       	ldi	r23, 0x51	; 81
    9528:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(ltoa(uploadTimeStop - uploadTimeStart,temp,10),&Upload_File);
    952c:	60 91 3a 3d 	lds	r22, 0x3D3A
    9530:	70 91 3b 3d 	lds	r23, 0x3D3B
    9534:	80 91 3c 3d 	lds	r24, 0x3D3C
    9538:	90 91 3d 3d 	lds	r25, 0x3D3D
    953c:	20 91 de 3c 	lds	r18, 0x3CDE
    9540:	30 91 df 3c 	lds	r19, 0x3CDF
    9544:	40 91 e0 3c 	lds	r20, 0x3CE0
    9548:	50 91 e1 3c 	lds	r21, 0x3CE1
    954c:	62 1b       	sub	r22, r18
    954e:	73 0b       	sbc	r23, r19
    9550:	84 0b       	sbc	r24, r20
    9552:	95 0b       	sbc	r25, r21
    9554:	4a e6       	ldi	r20, 0x6A	; 106
    9556:	5a e4       	ldi	r21, 0x4A	; 74
    9558:	2a e0       	ldi	r18, 0x0A	; 10
    955a:	30 e0       	ldi	r19, 0x00	; 0
    955c:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
    9560:	68 ea       	ldi	r22, 0xA8	; 168
    9562:	71 e5       	ldi	r23, 0x51	; 81
    9564:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(" secs, Speed of upload: ",&Upload_File);
    9568:	85 e0       	ldi	r24, 0x05	; 5
    956a:	96 e2       	ldi	r25, 0x26	; 38
    956c:	68 ea       	ldi	r22, 0xA8	; 168
    956e:	71 e5       	ldi	r23, 0x51	; 81
    9570:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(ltoa(uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)),temp,10),&Upload_File);
    9574:	60 91 46 34 	lds	r22, 0x3446
    9578:	70 91 47 34 	lds	r23, 0x3447
    957c:	80 91 48 34 	lds	r24, 0x3448
    9580:	90 91 49 34 	lds	r25, 0x3449
    9584:	20 91 3a 3d 	lds	r18, 0x3D3A
    9588:	30 91 3b 3d 	lds	r19, 0x3D3B
    958c:	40 91 3c 3d 	lds	r20, 0x3D3C
    9590:	50 91 3d 3d 	lds	r21, 0x3D3D
    9594:	e0 90 de 3c 	lds	r14, 0x3CDE
    9598:	f0 90 df 3c 	lds	r15, 0x3CDF
    959c:	00 91 e0 3c 	lds	r16, 0x3CE0
    95a0:	10 91 e1 3c 	lds	r17, 0x3CE1
    95a4:	2e 19       	sub	r18, r14
    95a6:	3f 09       	sbc	r19, r15
    95a8:	40 0b       	sbc	r20, r16
    95aa:	51 0b       	sbc	r21, r17
    95ac:	e7 e0       	ldi	r30, 0x07	; 7
    95ae:	22 0f       	add	r18, r18
    95b0:	33 1f       	adc	r19, r19
    95b2:	44 1f       	adc	r20, r20
    95b4:	55 1f       	adc	r21, r21
    95b6:	ea 95       	dec	r30
    95b8:	d1 f7       	brne	.-12     	; 0x95ae <__vector_53+0x600>
    95ba:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    95be:	ca 01       	movw	r24, r20
    95c0:	b9 01       	movw	r22, r18
    95c2:	4a e6       	ldi	r20, 0x6A	; 106
    95c4:	5a e4       	ldi	r21, 0x4A	; 74
    95c6:	2a e0       	ldi	r18, 0x0A	; 10
    95c8:	30 e0       	ldi	r19, 0x00	; 0
    95ca:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
    95ce:	68 ea       	ldi	r22, 0xA8	; 168
    95d0:	71 e5       	ldi	r23, 0x51	; 81
    95d2:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>

        f_puts(" kbps",&Upload_File);
    95d6:	8e e1       	ldi	r24, 0x1E	; 30
    95d8:	96 e2       	ldi	r25, 0x26	; 38
    95da:	68 ea       	ldi	r22, 0xA8	; 168
    95dc:	71 e5       	ldi	r23, 0x51	; 81
    95de:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_putc(13,&Upload_File);
    95e2:	8d e0       	ldi	r24, 0x0D	; 13
    95e4:	90 e0       	ldi	r25, 0x00	; 0
    95e6:	68 ea       	ldi	r22, 0xA8	; 168
    95e8:	71 e5       	ldi	r23, 0x51	; 81
    95ea:	0e 94 2e 2a 	call	0x545c	; 0x545c <f_putc>
        f_sync(&Upload_File);
    95ee:	88 ea       	ldi	r24, 0xA8	; 168
    95f0:	91 e5       	ldi	r25, 0x51	; 81
    95f2:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>
	    f_close(&Upload_File);
    95f6:	88 ea       	ldi	r24, 0xA8	; 168
    95f8:	91 e5       	ldi	r25, 0x51	; 81
    95fa:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <f_close>
	    okToWriteUploaderLogFile = false;
    95fe:	10 92 5c 34 	sts	0x345C, r1
	}

	if(uploadFailed){
    9602:	80 91 39 34 	lds	r24, 0x3439
    9606:	88 23       	and	r24, r24
    9608:	09 f4       	brne	.+2      	; 0x960c <__vector_53+0x65e>
    960a:	5d c0       	rjmp	.+186    	; 0x96c6 <__vector_53+0x718>
        Debug_SendString("Updating uploadLg File",true);
    960c:	8b e7       	ldi	r24, 0x7B	; 123
    960e:	95 e2       	ldi	r25, 0x25	; 37
    9610:	61 e0       	ldi	r22, 0x01	; 1
    9612:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
        f_stat("/uploadLg.txt",&fno);
    9616:	82 e9       	ldi	r24, 0x92	; 146
    9618:	95 e2       	ldi	r25, 0x25	; 37
    961a:	68 e5       	ldi	r22, 0x58	; 88
    961c:	75 e4       	ldi	r23, 0x45	; 69
    961e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <f_stat>
        f_open(&Upload_File, "/uploadLg.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9622:	88 ea       	ldi	r24, 0xA8	; 168
    9624:	91 e5       	ldi	r25, 0x51	; 81
    9626:	62 e9       	ldi	r22, 0x92	; 146
    9628:	75 e2       	ldi	r23, 0x25	; 37
    962a:	43 e1       	ldi	r20, 0x13	; 19
    962c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <f_open>
        if(fno.fsize > 0){
    9630:	40 91 58 45 	lds	r20, 0x4558
    9634:	50 91 59 45 	lds	r21, 0x4559
    9638:	60 91 5a 45 	lds	r22, 0x455A
    963c:	70 91 5b 45 	lds	r23, 0x455B
    9640:	41 15       	cp	r20, r1
    9642:	51 05       	cpc	r21, r1
    9644:	61 05       	cpc	r22, r1
    9646:	71 05       	cpc	r23, r1
    9648:	21 f0       	breq	.+8      	; 0x9652 <__vector_53+0x6a4>
           f_lseek(&Upload_File, fno.fsize);
    964a:	88 ea       	ldi	r24, 0xA8	; 168
    964c:	91 e5       	ldi	r25, 0x51	; 81
    964e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <f_lseek>
        }
        f_puts("File Name: ",&Upload_File);
    9652:	80 ea       	ldi	r24, 0xA0	; 160
    9654:	95 e2       	ldi	r25, 0x25	; 37
    9656:	68 ea       	ldi	r22, 0xA8	; 168
    9658:	71 e5       	ldi	r23, 0x51	; 81
    965a:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(fileToUpload,&Upload_File);
    965e:	81 ec       	ldi	r24, 0xC1	; 193
    9660:	9c e3       	ldi	r25, 0x3C	; 60
    9662:	68 ea       	ldi	r22, 0xA8	; 168
    9664:	71 e5       	ldi	r23, 0x51	; 81
    9666:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(", Size: ",&Upload_File);
    966a:	8c ea       	ldi	r24, 0xAC	; 172
    966c:	95 e2       	ldi	r25, 0x25	; 37
    966e:	68 ea       	ldi	r22, 0xA8	; 168
    9670:	71 e5       	ldi	r23, 0x51	; 81
    9672:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(ltoa(uploadFileSize,temp,10),&Upload_File);
    9676:	60 91 46 34 	lds	r22, 0x3446
    967a:	70 91 47 34 	lds	r23, 0x3447
    967e:	80 91 48 34 	lds	r24, 0x3448
    9682:	90 91 49 34 	lds	r25, 0x3449
    9686:	4a e6       	ldi	r20, 0x6A	; 106
    9688:	5a e4       	ldi	r21, 0x4A	; 74
    968a:	2a e0       	ldi	r18, 0x0A	; 10
    968c:	30 e0       	ldi	r19, 0x00	; 0
    968e:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <ltoa>
    9692:	68 ea       	ldi	r22, 0xA8	; 168
    9694:	71 e5       	ldi	r23, 0x51	; 81
    9696:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
        f_puts(" bytes, uploadFailed failed...",&Upload_File);
    969a:	84 e2       	ldi	r24, 0x24	; 36
    969c:	96 e2       	ldi	r25, 0x26	; 38
    969e:	68 ea       	ldi	r22, 0xA8	; 168
    96a0:	71 e5       	ldi	r23, 0x51	; 81
    96a2:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>

        f_putc(13,&Upload_File);
    96a6:	8d e0       	ldi	r24, 0x0D	; 13
    96a8:	90 e0       	ldi	r25, 0x00	; 0
    96aa:	68 ea       	ldi	r22, 0xA8	; 168
    96ac:	71 e5       	ldi	r23, 0x51	; 81
    96ae:	0e 94 2e 2a 	call	0x545c	; 0x545c <f_putc>
        f_sync(&Upload_File);
    96b2:	88 ea       	ldi	r24, 0xA8	; 168
    96b4:	91 e5       	ldi	r25, 0x51	; 81
    96b6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <f_sync>
	    f_close(&Upload_File);
    96ba:	88 ea       	ldi	r24, 0xA8	; 168
    96bc:	91 e5       	ldi	r25, 0x51	; 81
    96be:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <f_close>
	    uploadFailed = false;
    96c2:	10 92 39 34 	sts	0x3439, r1
	}

	if(okToGetRemainingSpace){
    96c6:	80 91 4a 4b 	lds	r24, 0x4B4A
    96ca:	88 23       	and	r24, r24
    96cc:	09 f4       	brne	.+2      	; 0x96d0 <__vector_53+0x722>
    96ce:	c2 c0       	rjmp	.+388    	; 0x9854 <__vector_53+0x8a6>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    96d0:	83 e4       	ldi	r24, 0x43	; 67
    96d2:	96 e2       	ldi	r25, 0x26	; 38
    96d4:	6d e5       	ldi	r22, 0x5D	; 93
    96d6:	74 e3       	ldi	r23, 0x34	; 52
    96d8:	4e e6       	ldi	r20, 0x6E	; 110
    96da:	55 e4       	ldi	r21, 0x45	; 69
    96dc:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <f_getfree>
    96e0:	88 23       	and	r24, r24
    96e2:	41 f0       	breq	.+16     	; 0x96f4 <__vector_53+0x746>
           spaceRemainingOnDisk = 0;
    96e4:	10 92 5d 34 	sts	0x345D, r1
    96e8:	10 92 5e 34 	sts	0x345E, r1
    96ec:	10 92 5f 34 	sts	0x345F, r1
    96f0:	10 92 60 34 	sts	0x3460, r1
	    }
	    totalDiskSpace = fs->max_clust;
    96f4:	e0 91 6e 45 	lds	r30, 0x456E
    96f8:	f0 91 6f 45 	lds	r31, 0x456F
    96fc:	e2 8c       	ldd	r14, Z+26	; 0x1a
    96fe:	f3 8c       	ldd	r15, Z+27	; 0x1b
    9700:	04 8d       	ldd	r16, Z+28	; 0x1c
    9702:	15 8d       	ldd	r17, Z+29	; 0x1d
    9704:	e0 92 61 34 	sts	0x3461, r14
    9708:	f0 92 62 34 	sts	0x3462, r15
    970c:	00 93 63 34 	sts	0x3463, r16
    9710:	10 93 64 34 	sts	0x3464, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
    9714:	a0 90 5d 34 	lds	r10, 0x345D
    9718:	b0 90 5e 34 	lds	r11, 0x345E
    971c:	c0 90 5f 34 	lds	r12, 0x345F
    9720:	d0 90 60 34 	lds	r13, 0x3460
	    percentDiskUsed *= 1000;
	    percentDiskUsed /= totalDiskSpace;
    9724:	c8 01       	movw	r24, r16
    9726:	b7 01       	movw	r22, r14
    9728:	6a 19       	sub	r22, r10
    972a:	7b 09       	sbc	r23, r11
    972c:	8c 09       	sbc	r24, r12
    972e:	9d 09       	sbc	r25, r13
    9730:	28 ee       	ldi	r18, 0xE8	; 232
    9732:	33 e0       	ldi	r19, 0x03	; 3
    9734:	40 e0       	ldi	r20, 0x00	; 0
    9736:	50 e0       	ldi	r21, 0x00	; 0
    9738:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    973c:	a8 01       	movw	r20, r16
    973e:	97 01       	movw	r18, r14
    9740:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    9744:	20 93 65 34 	sts	0x3465, r18
    9748:	30 93 66 34 	sts	0x3466, r19
    974c:	40 93 67 34 	sts	0x3467, r20
    9750:	50 93 68 34 	sts	0x3468, r21

	    sprintf(temp,"Disk Remaining: %lu",spaceRemainingOnDisk);
    9754:	8d b7       	in	r24, 0x3d	; 61
    9756:	9e b7       	in	r25, 0x3e	; 62
    9758:	08 97       	sbiw	r24, 0x08	; 8
    975a:	8d bf       	out	0x3d, r24	; 61
    975c:	9e bf       	out	0x3e, r25	; 62
    975e:	ed b7       	in	r30, 0x3d	; 61
    9760:	fe b7       	in	r31, 0x3e	; 62
    9762:	31 96       	adiw	r30, 0x01	; 1
    9764:	0a e6       	ldi	r16, 0x6A	; 106
    9766:	1a e4       	ldi	r17, 0x4A	; 74
    9768:	ad b7       	in	r26, 0x3d	; 61
    976a:	be b7       	in	r27, 0x3e	; 62
    976c:	11 96       	adiw	r26, 0x01	; 1
    976e:	0d 93       	st	X+, r16
    9770:	1c 93       	st	X, r17
    9772:	12 97       	sbiw	r26, 0x02	; 2
    9774:	86 e4       	ldi	r24, 0x46	; 70
    9776:	96 e2       	ldi	r25, 0x26	; 38
    9778:	82 83       	std	Z+2, r24	; 0x02
    977a:	93 83       	std	Z+3, r25	; 0x03
    977c:	a4 82       	std	Z+4, r10	; 0x04
    977e:	b5 82       	std	Z+5, r11	; 0x05
    9780:	c6 82       	std	Z+6, r12	; 0x06
    9782:	d7 82       	std	Z+7, r13	; 0x07
    9784:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
	    Debug_SendString(temp,true);
    9788:	8d b7       	in	r24, 0x3d	; 61
    978a:	9e b7       	in	r25, 0x3e	; 62
    978c:	08 96       	adiw	r24, 0x08	; 8
    978e:	8d bf       	out	0x3d, r24	; 61
    9790:	9e bf       	out	0x3e, r25	; 62
    9792:	c8 01       	movw	r24, r16
    9794:	61 e0       	ldi	r22, 0x01	; 1
    9796:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	    sprintf(temp,"Disk Total    : %lu",totalDiskSpace);
    979a:	ad b7       	in	r26, 0x3d	; 61
    979c:	be b7       	in	r27, 0x3e	; 62
    979e:	18 97       	sbiw	r26, 0x08	; 8
    97a0:	ad bf       	out	0x3d, r26	; 61
    97a2:	be bf       	out	0x3e, r27	; 62
    97a4:	ed b7       	in	r30, 0x3d	; 61
    97a6:	fe b7       	in	r31, 0x3e	; 62
    97a8:	31 96       	adiw	r30, 0x01	; 1
    97aa:	11 96       	adiw	r26, 0x01	; 1
    97ac:	0d 93       	st	X+, r16
    97ae:	1c 93       	st	X, r17
    97b0:	12 97       	sbiw	r26, 0x02	; 2
    97b2:	8a e5       	ldi	r24, 0x5A	; 90
    97b4:	96 e2       	ldi	r25, 0x26	; 38
    97b6:	82 83       	std	Z+2, r24	; 0x02
    97b8:	93 83       	std	Z+3, r25	; 0x03
    97ba:	80 91 61 34 	lds	r24, 0x3461
    97be:	90 91 62 34 	lds	r25, 0x3462
    97c2:	a0 91 63 34 	lds	r26, 0x3463
    97c6:	b0 91 64 34 	lds	r27, 0x3464
    97ca:	84 83       	std	Z+4, r24	; 0x04
    97cc:	95 83       	std	Z+5, r25	; 0x05
    97ce:	a6 83       	std	Z+6, r26	; 0x06
    97d0:	b7 83       	std	Z+7, r27	; 0x07
    97d2:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
	    Debug_SendString(temp,true);
    97d6:	8d b7       	in	r24, 0x3d	; 61
    97d8:	9e b7       	in	r25, 0x3e	; 62
    97da:	08 96       	adiw	r24, 0x08	; 8
    97dc:	8d bf       	out	0x3d, r24	; 61
    97de:	9e bf       	out	0x3e, r25	; 62
    97e0:	c8 01       	movw	r24, r16
    97e2:	61 e0       	ldi	r22, 0x01	; 1
    97e4:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
        sprintf(temp,"Percent Used  : %u.%u",((uint8_t)percentDiskUsed)/10,((uint8_t)percentDiskUsed)%10);
    97e8:	20 91 65 34 	lds	r18, 0x3465
    97ec:	ad b7       	in	r26, 0x3d	; 61
    97ee:	be b7       	in	r27, 0x3e	; 62
    97f0:	18 97       	sbiw	r26, 0x08	; 8
    97f2:	ad bf       	out	0x3d, r26	; 61
    97f4:	be bf       	out	0x3e, r27	; 62
    97f6:	ed b7       	in	r30, 0x3d	; 61
    97f8:	fe b7       	in	r31, 0x3e	; 62
    97fa:	31 96       	adiw	r30, 0x01	; 1
    97fc:	11 96       	adiw	r26, 0x01	; 1
    97fe:	0d 93       	st	X+, r16
    9800:	1c 93       	st	X, r17
    9802:	12 97       	sbiw	r26, 0x02	; 2
    9804:	8e e6       	ldi	r24, 0x6E	; 110
    9806:	96 e2       	ldi	r25, 0x26	; 38
    9808:	82 83       	std	Z+2, r24	; 0x02
    980a:	93 83       	std	Z+3, r25	; 0x03
    980c:	82 2f       	mov	r24, r18
    980e:	6a e0       	ldi	r22, 0x0A	; 10
    9810:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    9814:	84 83       	std	Z+4, r24	; 0x04
    9816:	15 82       	std	Z+5, r1	; 0x05
    9818:	82 2f       	mov	r24, r18
    981a:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__udivmodqi4>
    981e:	96 83       	std	Z+6, r25	; 0x06
    9820:	17 82       	std	Z+7, r1	; 0x07
    9822:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
        Debug_SendString(temp,false);
    9826:	8d b7       	in	r24, 0x3d	; 61
    9828:	9e b7       	in	r25, 0x3e	; 62
    982a:	08 96       	adiw	r24, 0x08	; 8
    982c:	8d bf       	out	0x3d, r24	; 61
    982e:	9e bf       	out	0x3e, r25	; 62
    9830:	c8 01       	movw	r24, r16
    9832:	60 e0       	ldi	r22, 0x00	; 0
    9834:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
        Debug_SendString("%",true);
    9838:	83 e6       	ldi	r24, 0x63	; 99
    983a:	91 e2       	ldi	r25, 0x21	; 33
    983c:	61 e0       	ldi	r22, 0x01	; 1
    983e:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

	    okToGetRemainingSpace = false;
    9842:	10 92 4a 4b 	sts	0x4B4A, r1
    9846:	06 c0       	rjmp	.+12     	; 0x9854 <__vector_53+0x8a6>
		//Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);
		okToSendRTCBlock = false;
	}


	if(okToFindFileToUpload && SD_Inserted() && !uploading){
    9848:	80 91 3d 34 	lds	r24, 0x343D
    984c:	88 23       	and	r24, r24
    984e:	09 f4       	brne	.+2      	; 0x9852 <__vector_53+0x8a4>
    9850:	41 cd       	rjmp	.-1406   	; 0x92d4 <__vector_53+0x326>
    9852:	9e cd       	rjmp	.-1220   	; 0x9390 <__vector_53+0x3e2>
        Debug_SendString(temp,false);
        Debug_SendString("%",true);

	    okToGetRemainingSpace = false;
	}
}
    9854:	0f 90       	pop	r0
    9856:	0f 90       	pop	r0
    9858:	cf 91       	pop	r28
    985a:	df 91       	pop	r29
    985c:	ff 91       	pop	r31
    985e:	ef 91       	pop	r30
    9860:	bf 91       	pop	r27
    9862:	af 91       	pop	r26
    9864:	9f 91       	pop	r25
    9866:	8f 91       	pop	r24
    9868:	7f 91       	pop	r23
    986a:	6f 91       	pop	r22
    986c:	5f 91       	pop	r21
    986e:	4f 91       	pop	r20
    9870:	3f 91       	pop	r19
    9872:	2f 91       	pop	r18
    9874:	1f 91       	pop	r17
    9876:	0f 91       	pop	r16
    9878:	ff 90       	pop	r15
    987a:	ef 90       	pop	r14
    987c:	df 90       	pop	r13
    987e:	cf 90       	pop	r12
    9880:	bf 90       	pop	r11
    9882:	af 90       	pop	r10
    9884:	0f 90       	pop	r0
    9886:	0b be       	out	0x3b, r0	; 59
    9888:	0f 90       	pop	r0
    988a:	0f be       	out	0x3f, r0	; 63
    988c:	0f 90       	pop	r0
    988e:	1f 90       	pop	r1
    9890:	18 95       	reti

00009892 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9892:	2f 92       	push	r2
    9894:	3f 92       	push	r3
    9896:	4f 92       	push	r4
    9898:	5f 92       	push	r5
    989a:	6f 92       	push	r6
    989c:	7f 92       	push	r7
    989e:	8f 92       	push	r8
    98a0:	9f 92       	push	r9
    98a2:	af 92       	push	r10
    98a4:	bf 92       	push	r11
    98a6:	cf 92       	push	r12
    98a8:	df 92       	push	r13
    98aa:	ef 92       	push	r14
    98ac:	ff 92       	push	r15
    98ae:	0f 93       	push	r16
    98b0:	1f 93       	push	r17
    98b2:	df 93       	push	r29
    98b4:	cf 93       	push	r28
    98b6:	cd b7       	in	r28, 0x3d	; 61
    98b8:	de b7       	in	r29, 0x3e	; 62
    98ba:	63 97       	sbiw	r28, 0x13	; 19
    98bc:	cd bf       	out	0x3d, r28	; 61
    98be:	de bf       	out	0x3e, r29	; 62
    98c0:	6b a4       	ldd	r6, Y+43	; 0x2b
    98c2:	7c a4       	ldd	r7, Y+44	; 0x2c
    98c4:	8e 01       	movw	r16, r28
    98c6:	03 5d       	subi	r16, 0xD3	; 211
    98c8:	1f 4f       	sbci	r17, 0xFF	; 255
    98ca:	19 8a       	std	Y+17, r1	; 0x11
    98cc:	1a 8a       	std	Y+18, r1	; 0x12
    98ce:	20 e0       	ldi	r18, 0x00	; 0
    98d0:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    98d2:	d3 01       	movw	r26, r6
    98d4:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    98d6:	88 23       	and	r24, r24
    98d8:	09 f4       	brne	.+2      	; 0x98dc <f_printf+0x4a>
    98da:	17 c1       	rjmp	.+558    	; 0x9b0a <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    98dc:	08 94       	sec
    98de:	61 1c       	adc	r6, r1
    98e0:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    98e2:	85 32       	cpi	r24, 0x25	; 37
    98e4:	71 f0       	breq	.+28     	; 0x9902 <f_printf+0x70>
			cc = f_putc(c, fil);
    98e6:	90 e0       	ldi	r25, 0x00	; 0
    98e8:	69 a5       	ldd	r22, Y+41	; 0x29
    98ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    98ec:	0e 94 2e 2a 	call	0x545c	; 0x545c <f_putc>
    98f0:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    98f2:	bf ef       	ldi	r27, 0xFF	; 255
    98f4:	8f 3f       	cpi	r24, 0xFF	; 255
    98f6:	9b 07       	cpc	r25, r27
    98f8:	11 f4       	brne	.+4      	; 0x98fe <f_printf+0x6c>
    98fa:	48 01       	movw	r8, r16
    98fc:	fa c0       	rjmp	.+500    	; 0x9af2 <f_printf+0x260>
    98fe:	48 01       	movw	r8, r16
    9900:	4c c0       	rjmp	.+152    	; 0x999a <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    9902:	d3 01       	movw	r26, r6
    9904:	ed 91       	ld	r30, X+
    9906:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9908:	e0 33       	cpi	r30, 0x30	; 48
    990a:	11 f0       	breq	.+4      	; 0x9910 <f_printf+0x7e>
    990c:	1b 8a       	std	Y+19, r1	; 0x13
    990e:	04 c0       	rjmp	.+8      	; 0x9918 <f_printf+0x86>
			f = 1; c = *str++;
    9910:	ed 91       	ld	r30, X+
    9912:	3d 01       	movw	r6, r26
    9914:	b1 e0       	ldi	r27, 0x01	; 1
    9916:	bb 8b       	std	Y+19, r27	; 0x13
    9918:	aa 24       	eor	r10, r10
    991a:	bb 24       	eor	r11, r11
    991c:	13 c0       	rjmp	.+38     	; 0x9944 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    991e:	c5 01       	movw	r24, r10
    9920:	53 e0       	ldi	r21, 0x03	; 3
    9922:	88 0f       	add	r24, r24
    9924:	99 1f       	adc	r25, r25
    9926:	5a 95       	dec	r21
    9928:	e1 f7       	brne	.-8      	; 0x9922 <f_printf+0x90>
    992a:	aa 0c       	add	r10, r10
    992c:	bb 1c       	adc	r11, r11
    992e:	a8 0e       	add	r10, r24
    9930:	b9 1e       	adc	r11, r25
    9932:	ae 0e       	add	r10, r30
    9934:	b1 1c       	adc	r11, r1
    9936:	e0 ed       	ldi	r30, 0xD0	; 208
    9938:	ff ef       	ldi	r31, 0xFF	; 255
    993a:	ae 0e       	add	r10, r30
    993c:	bf 1e       	adc	r11, r31
			c = *str++;
    993e:	d3 01       	movw	r26, r6
    9940:	ed 91       	ld	r30, X+
    9942:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9944:	8e 2f       	mov	r24, r30
    9946:	80 53       	subi	r24, 0x30	; 48
    9948:	8a 30       	cpi	r24, 0x0A	; 10
    994a:	48 f3       	brcs	.-46     	; 0x991e <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    994c:	ec 36       	cpi	r30, 0x6C	; 108
    994e:	31 f4       	brne	.+12     	; 0x995c <f_printf+0xca>
			f |= 2; c = *str++;
    9950:	bb 89       	ldd	r27, Y+19	; 0x13
    9952:	b2 60       	ori	r27, 0x02	; 2
    9954:	bb 8b       	std	Y+19, r27	; 0x13
    9956:	d3 01       	movw	r26, r6
    9958:	ed 91       	ld	r30, X+
    995a:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    995c:	e3 37       	cpi	r30, 0x73	; 115
    995e:	49 f4       	brne	.+18     	; 0x9972 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    9960:	82 e0       	ldi	r24, 0x02	; 2
    9962:	88 2e       	mov	r8, r24
    9964:	91 2c       	mov	r9, r1
    9966:	80 0e       	add	r8, r16
    9968:	91 1e       	adc	r9, r17
    996a:	f8 01       	movw	r30, r16
    996c:	80 81       	ld	r24, Z
    996e:	91 81       	ldd	r25, Z+1	; 0x01
    9970:	bb c0       	rjmp	.+374    	; 0x9ae8 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9972:	e3 36       	cpi	r30, 0x63	; 99
    9974:	a9 f4       	brne	.+42     	; 0x99a0 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    9976:	b2 e0       	ldi	r27, 0x02	; 2
    9978:	8b 2e       	mov	r8, r27
    997a:	91 2c       	mov	r9, r1
    997c:	80 0e       	add	r8, r16
    997e:	91 1e       	adc	r9, r17
    9980:	d8 01       	movw	r26, r16
    9982:	8d 91       	ld	r24, X+
    9984:	9c 91       	ld	r25, X
    9986:	69 a5       	ldd	r22, Y+41	; 0x29
    9988:	7a a5       	ldd	r23, Y+42	; 0x2a
    998a:	0e 94 2e 2a 	call	0x545c	; 0x545c <f_putc>
    998e:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9990:	bf ef       	ldi	r27, 0xFF	; 255
    9992:	8f 3f       	cpi	r24, 0xFF	; 255
    9994:	9b 07       	cpc	r25, r27
    9996:	09 f4       	brne	.+2      	; 0x999a <f_printf+0x108>
    9998:	ac c0       	rjmp	.+344    	; 0x9af2 <f_printf+0x260>
    999a:	21 e0       	ldi	r18, 0x01	; 1
    999c:	30 e0       	ldi	r19, 0x00	; 0
    999e:	a9 c0       	rjmp	.+338    	; 0x9af2 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    99a0:	e4 36       	cpi	r30, 0x64	; 100
    99a2:	39 f0       	breq	.+14     	; 0x99b2 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    99a4:	e5 37       	cpi	r30, 0x75	; 117
    99a6:	29 f0       	breq	.+10     	; 0x99b2 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    99a8:	e8 35       	cpi	r30, 0x58	; 88
    99aa:	09 f0       	breq	.+2      	; 0x99ae <f_printf+0x11c>
    99ac:	ae c0       	rjmp	.+348    	; 0x9b0a <f_printf+0x278>
    99ae:	20 e1       	ldi	r18, 0x10	; 16
    99b0:	01 c0       	rjmp	.+2      	; 0x99b4 <f_printf+0x122>
    99b2:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    99b4:	fb 89       	ldd	r31, Y+19	; 0x13
    99b6:	f1 ff       	sbrs	r31, 1
    99b8:	0d c0       	rjmp	.+26     	; 0x99d4 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    99ba:	a4 e0       	ldi	r26, 0x04	; 4
    99bc:	8a 2e       	mov	r8, r26
    99be:	91 2c       	mov	r9, r1
    99c0:	80 0e       	add	r8, r16
    99c2:	91 1e       	adc	r9, r17
    99c4:	d8 01       	movw	r26, r16
    99c6:	ed 90       	ld	r14, X+
    99c8:	fd 90       	ld	r15, X+
    99ca:	0d 91       	ld	r16, X+
    99cc:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    99ce:	e4 36       	cpi	r30, 0x64	; 100
    99d0:	09 f5       	brne	.+66     	; 0x9a14 <f_printf+0x182>
    99d2:	13 c0       	rjmp	.+38     	; 0x99fa <f_printf+0x168>
    99d4:	c8 01       	movw	r24, r16
    99d6:	02 96       	adiw	r24, 0x02	; 2
    99d8:	d8 01       	movw	r26, r16
    99da:	6d 91       	ld	r22, X+
    99dc:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    99de:	e4 36       	cpi	r30, 0x64	; 100
    99e0:	39 f4       	brne	.+14     	; 0x99f0 <f_printf+0x15e>
    99e2:	4c 01       	movw	r8, r24
    99e4:	7b 01       	movw	r14, r22
    99e6:	00 27       	eor	r16, r16
    99e8:	f7 fc       	sbrc	r15, 7
    99ea:	00 95       	com	r16
    99ec:	10 2f       	mov	r17, r16
    99ee:	05 c0       	rjmp	.+10     	; 0x99fa <f_printf+0x168>
    99f0:	4c 01       	movw	r8, r24
    99f2:	7b 01       	movw	r14, r22
    99f4:	00 e0       	ldi	r16, 0x00	; 0
    99f6:	10 e0       	ldi	r17, 0x00	; 0
    99f8:	0d c0       	rjmp	.+26     	; 0x9a14 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    99fa:	17 ff       	sbrs	r17, 7
    99fc:	0b c0       	rjmp	.+22     	; 0x9a14 <f_printf+0x182>
				val = 0 - val;
    99fe:	10 95       	com	r17
    9a00:	00 95       	com	r16
    9a02:	f0 94       	com	r15
    9a04:	e0 94       	com	r14
    9a06:	e1 1c       	adc	r14, r1
    9a08:	f1 1c       	adc	r15, r1
    9a0a:	01 1d       	adc	r16, r1
    9a0c:	11 1d       	adc	r17, r1
				f |= 4;
    9a0e:	bb 89       	ldd	r27, Y+19	; 0x13
    9a10:	b4 60       	ori	r27, 0x04	; 4
    9a12:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9a14:	18 8a       	std	Y+16, r1	; 0x10
    9a16:	ff e0       	ldi	r31, 0x0F	; 15
    9a18:	cf 2e       	mov	r12, r31
    9a1a:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9a1c:	22 2e       	mov	r2, r18
    9a1e:	33 24       	eor	r3, r3
    9a20:	44 24       	eor	r4, r4
    9a22:	55 24       	eor	r5, r5
    9a24:	c8 01       	movw	r24, r16
    9a26:	b7 01       	movw	r22, r14
    9a28:	a2 01       	movw	r20, r4
    9a2a:	91 01       	movw	r18, r2
    9a2c:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    9a30:	86 2f       	mov	r24, r22
    9a32:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9a34:	8a 33       	cpi	r24, 0x3A	; 58
    9a36:	08 f0       	brcs	.+2      	; 0x9a3a <f_printf+0x1a8>
    9a38:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9a3a:	08 94       	sec
    9a3c:	c1 08       	sbc	r12, r1
    9a3e:	d1 08       	sbc	r13, r1
    9a40:	e1 e0       	ldi	r30, 0x01	; 1
    9a42:	f0 e0       	ldi	r31, 0x00	; 0
    9a44:	ec 0f       	add	r30, r28
    9a46:	fd 1f       	adc	r31, r29
    9a48:	ec 0d       	add	r30, r12
    9a4a:	fd 1d       	adc	r31, r13
    9a4c:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9a4e:	c1 14       	cp	r12, r1
    9a50:	d1 04       	cpc	r13, r1
    9a52:	e9 f0       	breq	.+58     	; 0x9a8e <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9a54:	c8 01       	movw	r24, r16
    9a56:	b7 01       	movw	r22, r14
    9a58:	a2 01       	movw	r20, r4
    9a5a:	91 01       	movw	r18, r2
    9a5c:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    9a60:	c9 01       	movw	r24, r18
    9a62:	da 01       	movw	r26, r20
    9a64:	7c 01       	movw	r14, r24
    9a66:	8d 01       	movw	r16, r26
		} while (i && val);
    9a68:	e1 14       	cp	r14, r1
    9a6a:	f1 04       	cpc	r15, r1
    9a6c:	01 05       	cpc	r16, r1
    9a6e:	11 05       	cpc	r17, r1
    9a70:	c9 f6       	brne	.-78     	; 0x9a24 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    9a72:	eb 89       	ldd	r30, Y+19	; 0x13
    9a74:	e2 ff       	sbrs	r30, 2
    9a76:	0b c0       	rjmp	.+22     	; 0x9a8e <f_printf+0x1fc>
    9a78:	08 94       	sec
    9a7a:	c1 08       	sbc	r12, r1
    9a7c:	d1 08       	sbc	r13, r1
    9a7e:	e1 e0       	ldi	r30, 0x01	; 1
    9a80:	f0 e0       	ldi	r31, 0x00	; 0
    9a82:	ec 0f       	add	r30, r28
    9a84:	fd 1f       	adc	r31, r29
    9a86:	ec 0d       	add	r30, r12
    9a88:	fd 1d       	adc	r31, r13
    9a8a:	4d e2       	ldi	r20, 0x2D	; 45
    9a8c:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9a8e:	8f e0       	ldi	r24, 0x0F	; 15
    9a90:	90 e0       	ldi	r25, 0x00	; 0
    9a92:	8a 19       	sub	r24, r10
    9a94:	9b 09       	sbc	r25, r11
    9a96:	08 94       	sec
    9a98:	c1 08       	sbc	r12, r1
    9a9a:	d1 08       	sbc	r13, r1
    9a9c:	e1 e0       	ldi	r30, 0x01	; 1
    9a9e:	f0 e0       	ldi	r31, 0x00	; 0
    9aa0:	ec 0f       	add	r30, r28
    9aa2:	fd 1f       	adc	r31, r29
    9aa4:	ec 0d       	add	r30, r12
    9aa6:	fd 1d       	adc	r31, r13
    9aa8:	08 94       	sec
    9aaa:	c1 1c       	adc	r12, r1
    9aac:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    9aae:	ab 89       	ldd	r26, Y+19	; 0x13
    9ab0:	2a 2f       	mov	r18, r26
    9ab2:	30 e0       	ldi	r19, 0x00	; 0
    9ab4:	21 70       	andi	r18, 0x01	; 1
    9ab6:	30 70       	andi	r19, 0x00	; 0
    9ab8:	0b c0       	rjmp	.+22     	; 0x9ad0 <f_printf+0x23e>
    9aba:	08 94       	sec
    9abc:	c1 08       	sbc	r12, r1
    9abe:	d1 08       	sbc	r13, r1
    9ac0:	21 15       	cp	r18, r1
    9ac2:	31 05       	cpc	r19, r1
    9ac4:	11 f4       	brne	.+4      	; 0x9aca <f_printf+0x238>
    9ac6:	40 e2       	ldi	r20, 0x20	; 32
    9ac8:	01 c0       	rjmp	.+2      	; 0x9acc <f_printf+0x23a>
    9aca:	40 e3       	ldi	r20, 0x30	; 48
    9acc:	40 83       	st	Z, r20
    9ace:	31 97       	sbiw	r30, 0x01	; 1
    9ad0:	c1 14       	cp	r12, r1
    9ad2:	d1 04       	cpc	r13, r1
    9ad4:	19 f0       	breq	.+6      	; 0x9adc <f_printf+0x24a>
    9ad6:	8c 15       	cp	r24, r12
    9ad8:	9d 05       	cpc	r25, r13
    9ada:	7c f3       	brlt	.-34     	; 0x9aba <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    9adc:	81 e0       	ldi	r24, 0x01	; 1
    9ade:	90 e0       	ldi	r25, 0x00	; 0
    9ae0:	8c 0f       	add	r24, r28
    9ae2:	9d 1f       	adc	r25, r29
    9ae4:	8c 0d       	add	r24, r12
    9ae6:	9d 1d       	adc	r25, r13
    9ae8:	69 a5       	ldd	r22, Y+41	; 0x29
    9aea:	7a a5       	ldd	r23, Y+42	; 0x2a
    9aec:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <f_puts>
    9af0:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9af2:	e9 89       	ldd	r30, Y+17	; 0x11
    9af4:	fa 89       	ldd	r31, Y+18	; 0x12
    9af6:	e2 0f       	add	r30, r18
    9af8:	f3 1f       	adc	r31, r19
    9afa:	e9 8b       	std	Y+17, r30	; 0x11
    9afc:	fa 8b       	std	Y+18, r31	; 0x12
    9afe:	ff ef       	ldi	r31, 0xFF	; 255
    9b00:	2f 3f       	cpi	r18, 0xFF	; 255
    9b02:	3f 07       	cpc	r19, r31
    9b04:	41 f0       	breq	.+16     	; 0x9b16 <f_printf+0x284>
    9b06:	84 01       	movw	r16, r8
    9b08:	e4 ce       	rjmp	.-568    	; 0x98d2 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    9b0a:	4f ef       	ldi	r20, 0xFF	; 255
    9b0c:	2f 3f       	cpi	r18, 0xFF	; 255
    9b0e:	34 07       	cpc	r19, r20
    9b10:	11 f0       	breq	.+4      	; 0x9b16 <f_printf+0x284>
    9b12:	29 89       	ldd	r18, Y+17	; 0x11
    9b14:	3a 89       	ldd	r19, Y+18	; 0x12
}
    9b16:	c9 01       	movw	r24, r18
    9b18:	63 96       	adiw	r28, 0x13	; 19
    9b1a:	cd bf       	out	0x3d, r28	; 61
    9b1c:	de bf       	out	0x3e, r29	; 62
    9b1e:	cf 91       	pop	r28
    9b20:	df 91       	pop	r29
    9b22:	1f 91       	pop	r17
    9b24:	0f 91       	pop	r16
    9b26:	ff 90       	pop	r15
    9b28:	ef 90       	pop	r14
    9b2a:	df 90       	pop	r13
    9b2c:	cf 90       	pop	r12
    9b2e:	bf 90       	pop	r11
    9b30:	af 90       	pop	r10
    9b32:	9f 90       	pop	r9
    9b34:	8f 90       	pop	r8
    9b36:	7f 90       	pop	r7
    9b38:	6f 90       	pop	r6
    9b3a:	5f 90       	pop	r5
    9b3c:	4f 90       	pop	r4
    9b3e:	3f 90       	pop	r3
    9b40:	2f 90       	pop	r2
    9b42:	08 95       	ret

00009b44 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
    9b44:	1f 92       	push	r1
    9b46:	0f 92       	push	r0
    9b48:	0f b6       	in	r0, 0x3f	; 63
    9b4a:	0f 92       	push	r0
    9b4c:	0b b6       	in	r0, 0x3b	; 59
    9b4e:	0f 92       	push	r0
    9b50:	11 24       	eor	r1, r1
    9b52:	1f 93       	push	r17
    9b54:	2f 93       	push	r18
    9b56:	3f 93       	push	r19
    9b58:	4f 93       	push	r20
    9b5a:	5f 93       	push	r21
    9b5c:	6f 93       	push	r22
    9b5e:	7f 93       	push	r23
    9b60:	8f 93       	push	r24
    9b62:	9f 93       	push	r25
    9b64:	af 93       	push	r26
    9b66:	bf 93       	push	r27
    9b68:	ef 93       	push	r30
    9b6a:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
    9b6c:	e0 91 f0 33 	lds	r30, 0x33F0
    9b70:	f0 91 f1 33 	lds	r31, 0x33F1
    9b74:	80 91 a0 09 	lds	r24, 0x09A0
    9b78:	e6 5c       	subi	r30, 0xC6	; 198
    9b7a:	f8 4a       	sbci	r31, 0xA8	; 168
    9b7c:	80 83       	st	Z, r24

	if(rs232Recording){
    9b7e:	80 91 fb 33 	lds	r24, 0x33FB
    9b82:	88 23       	and	r24, r24
    9b84:	09 f4       	brne	.+2      	; 0x9b88 <__vector_88+0x44>
    9b86:	65 c0       	rjmp	.+202    	; 0x9c52 <__vector_88+0x10e>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
    9b88:	e0 91 f0 33 	lds	r30, 0x33F0
    9b8c:	f0 91 f1 33 	lds	r31, 0x33F1
    9b90:	e6 5c       	subi	r30, 0xC6	; 198
    9b92:	f8 4a       	sbci	r31, 0xA8	; 168
    9b94:	80 81       	ld	r24, Z
    9b96:	8a 30       	cpi	r24, 0x0A	; 10
    9b98:	09 f0       	breq	.+2      	; 0x9b9c <__vector_88+0x58>
    9b9a:	5b c0       	rjmp	.+182    	; 0x9c52 <__vector_88+0x10e>
    9b9c:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    9b9e:	20 91 f0 33 	lds	r18, 0x33F0
    9ba2:	30 91 f1 33 	lds	r19, 0x33F1
    9ba6:	80 91 ee 33 	lds	r24, 0x33EE
    9baa:	90 91 ef 33 	lds	r25, 0x33EF
    9bae:	28 17       	cp	r18, r24
    9bb0:	39 07       	cpc	r19, r25
    9bb2:	09 f0       	breq	.+2      	; 0x9bb6 <__vector_88+0x72>
    9bb4:	63 c0       	rjmp	.+198    	; 0x9c7c <__vector_88+0x138>
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
				counter++;
			}
			if(strstr(airQualityString,"Dylos") == NULL){
    9bb6:	8c e9       	ldi	r24, 0x9C	; 156
    9bb8:	9a e4       	ldi	r25, 0x4A	; 74
    9bba:	64 e8       	ldi	r22, 0x84	; 132
    9bbc:	76 e2       	ldi	r23, 0x26	; 38
    9bbe:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    9bc2:	00 97       	sbiw	r24, 0x00	; 0
    9bc4:	09 f0       	breq	.+2      	; 0x9bc8 <__vector_88+0x84>
    9bc6:	45 c0       	rjmp	.+138    	; 0x9c52 <__vector_88+0x10e>
				airSampleTime = Time_Get32BitTimer();
    9bc8:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <Time_Get32BitTimer>
    9bcc:	60 93 ce 33 	sts	0x33CE, r22
    9bd0:	70 93 cf 33 	sts	0x33CF, r23
    9bd4:	80 93 d0 33 	sts	0x33D0, r24
    9bd8:	90 93 d1 33 	sts	0x33D1, r25
				smallCount = atol(strtok(airQualityString,","));
    9bdc:	8c e9       	ldi	r24, 0x9C	; 156
    9bde:	9a e4       	ldi	r25, 0x4A	; 74
    9be0:	6a e8       	ldi	r22, 0x8A	; 138
    9be2:	76 e2       	ldi	r23, 0x26	; 38
    9be4:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    9be8:	0e 94 53 59 	call	0xb2a6	; 0xb2a6 <atol>
    9bec:	60 93 da 3c 	sts	0x3CDA, r22
    9bf0:	70 93 db 3c 	sts	0x3CDB, r23
    9bf4:	80 93 dc 3c 	sts	0x3CDC, r24
    9bf8:	90 93 dd 3c 	sts	0x3CDD, r25
				largeCount = atol(strtok(NULL,","));
    9bfc:	80 e0       	ldi	r24, 0x00	; 0
    9bfe:	90 e0       	ldi	r25, 0x00	; 0
    9c00:	6a e8       	ldi	r22, 0x8A	; 138
    9c02:	76 e2       	ldi	r23, 0x26	; 38
    9c04:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    9c08:	0e 94 53 59 	call	0xb2a6	; 0xb2a6 <atol>
    9c0c:	60 93 0c 5c 	sts	0x5C0C, r22
    9c10:	70 93 0d 5c 	sts	0x5C0D, r23
    9c14:	80 93 0e 5c 	sts	0x5C0E, r24
    9c18:	90 93 0f 5c 	sts	0x5C0F, r25

				quickSmall = smallCount;
    9c1c:	20 91 da 3c 	lds	r18, 0x3CDA
    9c20:	30 91 db 3c 	lds	r19, 0x3CDB
    9c24:	40 91 dc 3c 	lds	r20, 0x3CDC
    9c28:	50 91 dd 3c 	lds	r21, 0x3CDD
    9c2c:	20 93 f3 33 	sts	0x33F3, r18
    9c30:	30 93 f4 33 	sts	0x33F4, r19
    9c34:	40 93 f5 33 	sts	0x33F5, r20
    9c38:	50 93 f6 33 	sts	0x33F6, r21
				quickLarge = largeCount;
    9c3c:	60 93 f7 33 	sts	0x33F7, r22
    9c40:	70 93 f8 33 	sts	0x33F8, r23
    9c44:	80 93 f9 33 	sts	0x33F9, r24
    9c48:	90 93 fa 33 	sts	0x33FA, r25


				okToSendAirQuality = true;
    9c4c:	81 e0       	ldi	r24, 0x01	; 1
    9c4e:	80 93 f2 33 	sts	0x33F2, r24
			}

		}
	}
	Rs232_writeLocation++;
    9c52:	80 91 f0 33 	lds	r24, 0x33F0
    9c56:	90 91 f1 33 	lds	r25, 0x33F1
    9c5a:	01 96       	adiw	r24, 0x01	; 1
    9c5c:	80 93 f0 33 	sts	0x33F0, r24
    9c60:	90 93 f1 33 	sts	0x33F1, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
    9c64:	80 91 f0 33 	lds	r24, 0x33F0
    9c68:	90 91 f1 33 	lds	r25, 0x33F1
    9c6c:	80 50       	subi	r24, 0x00	; 0
    9c6e:	94 40       	sbci	r25, 0x04	; 4
    9c70:	78 f0       	brcs	.+30     	; 0x9c90 <__vector_88+0x14c>
		Rs232_writeLocation = 0;
    9c72:	10 92 f0 33 	sts	0x33F0, r1
    9c76:	10 92 f1 33 	sts	0x33F1, r1
    9c7a:	0a c0       	rjmp	.+20     	; 0x9c90 <__vector_88+0x14c>

	if(rs232Recording){
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
    9c7c:	80 e0       	ldi	r24, 0x00	; 0
    9c7e:	0e 94 20 03 	call	0x640	; 0x640 <Rs232_GetByte>
    9c82:	e1 2f       	mov	r30, r17
    9c84:	f0 e0       	ldi	r31, 0x00	; 0
    9c86:	e4 56       	subi	r30, 0x64	; 100
    9c88:	f5 4b       	sbci	r31, 0xB5	; 181
    9c8a:	80 83       	st	Z, r24
				counter++;
    9c8c:	1f 5f       	subi	r17, 0xFF	; 255
    9c8e:	87 cf       	rjmp	.-242    	; 0x9b9e <__vector_88+0x5a>
	}
	Rs232_writeLocation++;
	if(Rs232_writeLocation >= Rs232_BufferSize){
		Rs232_writeLocation = 0;
	}
}
    9c90:	ff 91       	pop	r31
    9c92:	ef 91       	pop	r30
    9c94:	bf 91       	pop	r27
    9c96:	af 91       	pop	r26
    9c98:	9f 91       	pop	r25
    9c9a:	8f 91       	pop	r24
    9c9c:	7f 91       	pop	r23
    9c9e:	6f 91       	pop	r22
    9ca0:	5f 91       	pop	r21
    9ca2:	4f 91       	pop	r20
    9ca4:	3f 91       	pop	r19
    9ca6:	2f 91       	pop	r18
    9ca8:	1f 91       	pop	r17
    9caa:	0f 90       	pop	r0
    9cac:	0b be       	out	0x3b, r0	; 59
    9cae:	0f 90       	pop	r0
    9cb0:	0f be       	out	0x3f, r0	; 63
    9cb2:	0f 90       	pop	r0
    9cb4:	1f 90       	pop	r1
    9cb6:	18 95       	reti

00009cb8 <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    9cb8:	ef 92       	push	r14
    9cba:	ff 92       	push	r15
    9cbc:	0f 93       	push	r16
    9cbe:	1f 93       	push	r17
    9cc0:	cf 93       	push	r28
    9cc2:	df 93       	push	r29
	uint8_t tmp=0;
	uint32_t tmp32 = 0;
	
	Wifi_ClearBuffer();
    9cc4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Wifi_ClearBuffer>
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
    9cc8:	8c e8       	ldi	r24, 0x8C	; 140
    9cca:	96 e2       	ldi	r25, 0x26	; 38
    9ccc:	65 e9       	ldi	r22, 0x95	; 149
    9cce:	76 e2       	ldi	r23, 0x26	; 38
    9cd0:	ab 01       	movw	r20, r22
    9cd2:	24 ef       	ldi	r18, 0xF4	; 244
    9cd4:	31 e0       	ldi	r19, 0x01	; 1
    9cd6:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9cda:	88 23       	and	r24, r24
    9cdc:	09 f4       	brne	.+2      	; 0x9ce0 <Wifi_GetTime+0x28>
    9cde:	97 c0       	rjmp	.+302    	; 0x9e0e <Wifi_GetTime+0x156>
    9ce0:	88 ee       	ldi	r24, 0xE8	; 232
    9ce2:	93 e0       	ldi	r25, 0x03	; 3
    9ce4:	20 e7       	ldi	r18, 0x70	; 112
    9ce6:	31 e0       	ldi	r19, 0x01	; 1
    9ce8:	f9 01       	movw	r30, r18
    9cea:	31 97       	sbiw	r30, 0x01	; 1
    9cec:	f1 f7       	brne	.-4      	; 0x9cea <Wifi_GetTime+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9cee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9cf0:	d9 f7       	brne	.-10     	; 0x9ce8 <Wifi_GetTime+0x30>
    9cf2:	cc e3       	ldi	r28, 0x3C	; 60
    9cf4:	d6 e4       	ldi	r29, 0x46	; 70
    9cf6:	10 e0       	ldi	r17, 0x00	; 0
    9cf8:	07 c0       	rjmp	.+14     	; 0x9d08 <Wifi_GetTime+0x50>
	    return false;
	}
	_delay_ms(100);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 50){
    9cfa:	12 33       	cpi	r17, 0x32	; 50
    9cfc:	61 f0       	breq	.+24     	; 0x9d16 <Wifi_GetTime+0x5e>
			string[tmp] = Wifi_GetByte(false);
    9cfe:	80 e0       	ldi	r24, 0x00	; 0
    9d00:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    9d04:	89 93       	st	Y+, r24
			tmp++;
    9d06:	1f 5f       	subi	r17, 0xFF	; 255
	if(!Wifi_SendCommand("show t t","Time=","Time=",500)){
	    return false;
	}
	_delay_ms(100);
	
	while(Wifi_CharReadyToRead()){
    9d08:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    9d0c:	88 23       	and	r24, r24
    9d0e:	a9 f7       	brne	.-22     	; 0x9cfa <Wifi_GetTime+0x42>
			break;
		}
	}

	
	if(tmp < 4){
    9d10:	14 30       	cpi	r17, 0x04	; 4
    9d12:	08 f4       	brcc	.+2      	; 0x9d16 <Wifi_GetTime+0x5e>
    9d14:	7c c0       	rjmp	.+248    	; 0x9e0e <Wifi_GetTime+0x156>
		return false;
	}
	
	if(strstr(string,"NOT SET") != 0){
    9d16:	8c e3       	ldi	r24, 0x3C	; 60
    9d18:	96 e4       	ldi	r25, 0x46	; 70
    9d1a:	6b e9       	ldi	r22, 0x9B	; 155
    9d1c:	76 e2       	ldi	r23, 0x26	; 38
    9d1e:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    9d22:	00 97       	sbiw	r24, 0x00	; 0
    9d24:	31 f0       	breq	.+12     	; 0x9d32 <Wifi_GetTime+0x7a>
	    Debug_SendString("Time is not set",true);
    9d26:	83 ea       	ldi	r24, 0xA3	; 163
    9d28:	96 e2       	ldi	r25, 0x26	; 38
    9d2a:	61 e0       	ldi	r22, 0x01	; 1
    9d2c:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    9d30:	6e c0       	rjmp	.+220    	; 0x9e0e <Wifi_GetTime+0x156>
		return false;
	}

	strtok(string,"=");
    9d32:	8c e3       	ldi	r24, 0x3C	; 60
    9d34:	96 e4       	ldi	r25, 0x46	; 70
    9d36:	66 e8       	ldi	r22, 0x86	; 134
    9d38:	72 e2       	ldi	r23, 0x22	; 34
    9d3a:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	strtok(NULL,"=");
    9d3e:	80 e0       	ldi	r24, 0x00	; 0
    9d40:	90 e0       	ldi	r25, 0x00	; 0
    9d42:	66 e8       	ldi	r22, 0x86	; 134
    9d44:	72 e2       	ldi	r23, 0x22	; 34
    9d46:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
	strcpy(timeString,strtok(NULL," "));
    9d4a:	80 e0       	ldi	r24, 0x00	; 0
    9d4c:	90 e0       	ldi	r25, 0x00	; 0
    9d4e:	6a ef       	ldi	r22, 0xFA	; 250
    9d50:	72 e2       	ldi	r23, 0x22	; 34
    9d52:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    9d56:	bc 01       	movw	r22, r24
    9d58:	8d ee       	ldi	r24, 0xED	; 237
    9d5a:	9a e4       	ldi	r25, 0x4A	; 74
    9d5c:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
    9d60:	20 e0       	ldi	r18, 0x00	; 0
    9d62:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
    9d64:	f9 01       	movw	r30, r18
    9d66:	eb 5c       	subi	r30, 0xCB	; 203
    9d68:	f4 4b       	sbci	r31, 0xB4	; 180
    9d6a:	d9 01       	movw	r26, r18
    9d6c:	a3 51       	subi	r26, 0x13	; 19
    9d6e:	b5 4b       	sbci	r27, 0xB5	; 181
    9d70:	8c 91       	ld	r24, X
    9d72:	80 83       	st	Z, r24
    9d74:	2f 5f       	subi	r18, 0xFF	; 255
    9d76:	3f 4f       	sbci	r19, 0xFF	; 255

	strtok(string,"=");
	strtok(NULL,"=");
	strcpy(timeString,strtok(NULL," "));
		
	for(uint8_t i = 0; i < 8; i++){
    9d78:	28 30       	cpi	r18, 0x08	; 8
    9d7a:	31 05       	cpc	r19, r1
    9d7c:	99 f7       	brne	.-26     	; 0x9d64 <Wifi_GetTime+0xac>
    9d7e:	a5 ef       	ldi	r26, 0xF5	; 245
    9d80:	ba e4       	ldi	r27, 0x4A	; 74
    9d82:	20 e0       	ldi	r18, 0x00	; 0
    9d84:	30 e0       	ldi	r19, 0x00	; 0
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
		timeLower[i] = timeString[tmp];
    9d86:	8d 91       	ld	r24, X+
    9d88:	f9 01       	movw	r30, r18
    9d8a:	e4 50       	subi	r30, 0x04	; 4
    9d8c:	f5 4b       	sbci	r31, 0xB5	; 181
    9d8e:	80 83       	st	Z, r24
    9d90:	2f 5f       	subi	r18, 0xFF	; 255
    9d92:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
    9d94:	25 30       	cpi	r18, 0x05	; 5
    9d96:	31 05       	cpc	r19, r1
    9d98:	b1 f7       	brne	.-20     	; 0x9d86 <Wifi_GetTime+0xce>
		timeLower[i] = timeString[tmp];
		tmp++;
	}

	tmp32 = atol(timeUpper);
    9d9a:	85 e3       	ldi	r24, 0x35	; 53
    9d9c:	9b e4       	ldi	r25, 0x4B	; 75
    9d9e:	0e 94 53 59 	call	0xb2a6	; 0xb2a6 <atol>
    9da2:	9b 01       	movw	r18, r22
    9da4:	ac 01       	movw	r20, r24
	tmp32 -= 22089888;
    9da6:	20 5a       	subi	r18, 0xA0	; 160
    9da8:	30 41       	sbci	r19, 0x10	; 16
    9daa:	41 45       	sbci	r20, 0x51	; 81
    9dac:	51 40       	sbci	r21, 0x01	; 1
	tmp32 *= 100;
    9dae:	ca 01       	movw	r24, r20
    9db0:	b9 01       	movw	r22, r18
    9db2:	24 e6       	ldi	r18, 0x64	; 100
    9db4:	30 e0       	ldi	r19, 0x00	; 0
    9db6:	40 e0       	ldi	r20, 0x00	; 0
    9db8:	50 e0       	ldi	r21, 0x00	; 0
    9dba:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
	tmp32 += ((timeLower[0]-'0')* 10);
    9dbe:	e0 91 fc 4a 	lds	r30, 0x4AFC
	tmp32 += ((timeLower[1]-'0'));
    9dc2:	20 91 fd 4a 	lds	r18, 0x4AFD
	}

	tmp32 = atol(timeUpper);
	tmp32 -= 22089888;
	tmp32 *= 100;
	tmp32 += ((timeLower[0]-'0')* 10);
    9dc6:	30 e0       	ldi	r19, 0x00	; 0
    9dc8:	20 53       	subi	r18, 0x30	; 48
    9dca:	30 40       	sbci	r19, 0x00	; 0
    9dcc:	44 27       	eor	r20, r20
    9dce:	37 fd       	sbrc	r19, 7
    9dd0:	40 95       	com	r20
    9dd2:	54 2f       	mov	r21, r20
    9dd4:	26 0f       	add	r18, r22
    9dd6:	37 1f       	adc	r19, r23
    9dd8:	48 1f       	adc	r20, r24
    9dda:	59 1f       	adc	r21, r25
	tmp32 += ((timeLower[1]-'0'));
    9ddc:	8a e0       	ldi	r24, 0x0A	; 10
    9dde:	e8 9f       	mul	r30, r24
    9de0:	c0 01       	movw	r24, r0
    9de2:	11 24       	eor	r1, r1
    9de4:	80 5e       	subi	r24, 0xE0	; 224
    9de6:	91 40       	sbci	r25, 0x01	; 1
    9de8:	7c 01       	movw	r14, r24
    9dea:	00 27       	eor	r16, r16
    9dec:	f7 fc       	sbrc	r15, 7
    9dee:	00 95       	com	r16
    9df0:	10 2f       	mov	r17, r16
    9df2:	2e 0d       	add	r18, r14
    9df4:	3f 1d       	adc	r19, r15
    9df6:	40 1f       	adc	r20, r16
    9df8:	51 1f       	adc	r21, r17
	
	time_secs = tmp32;
    9dfa:	20 93 e2 33 	sts	0x33E2, r18
    9dfe:	30 93 e3 33 	sts	0x33E3, r19
    9e02:	40 93 e4 33 	sts	0x33E4, r20
    9e06:	50 93 e5 33 	sts	0x33E5, r21
    9e0a:	81 e0       	ldi	r24, 0x01	; 1
    9e0c:	01 c0       	rjmp	.+2      	; 0x9e10 <Wifi_GetTime+0x158>
	return true;
    9e0e:	80 e0       	ldi	r24, 0x00	; 0
}
    9e10:	df 91       	pop	r29
    9e12:	cf 91       	pop	r28
    9e14:	1f 91       	pop	r17
    9e16:	0f 91       	pop	r16
    9e18:	ff 90       	pop	r15
    9e1a:	ef 90       	pop	r14
    9e1c:	08 95       	ret

00009e1e <Wifi_GetSignalStrength>:
		_delay_ms(1);
	}
	return false;
}

uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
    9e1e:	af 92       	push	r10
    9e20:	bf 92       	push	r11
    9e22:	cf 92       	push	r12
    9e24:	df 92       	push	r13
    9e26:	ff 92       	push	r15
    9e28:	0f 93       	push	r16
    9e2a:	1f 93       	push	r17
    9e2c:	cf 93       	push	r28
    9e2e:	df 93       	push	r29
    9e30:	6c 01       	movw	r12, r24
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
    9e32:	83 eb       	ldi	r24, 0xB3	; 179
    9e34:	96 e2       	ldi	r25, 0x26	; 38
    9e36:	6d eb       	ldi	r22, 0xBD	; 189
    9e38:	76 e2       	ldi	r23, 0x26	; 38
    9e3a:	ab 01       	movw	r20, r22
    9e3c:	96 01       	movw	r18, r12
    9e3e:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9e42:	ff 24       	eor	r15, r15
    9e44:	c0 e0       	ldi	r28, 0x00	; 0
    9e46:	d0 e0       	ldi	r29, 0x00	; 0
    9e48:	66 e6       	ldi	r22, 0x66	; 102
    9e4a:	a6 2e       	mov	r10, r22
    9e4c:	6e e0       	ldi	r22, 0x0E	; 14
    9e4e:	b6 2e       	mov	r11, r22
    9e50:	39 c0       	rjmp	.+114    	; 0x9ec4 <Wifi_GetSignalStrength+0xa6>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    9e52:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    9e56:	88 23       	and	r24, r24
    9e58:	89 f1       	breq	.+98     	; 0x9ebc <Wifi_GetSignalStrength+0x9e>
			rssi[tmp] = Wifi_GetByte(false);
    9e5a:	0f 2d       	mov	r16, r15
    9e5c:	10 e0       	ldi	r17, 0x00	; 0
    9e5e:	80 e0       	ldi	r24, 0x00	; 0
    9e60:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    9e64:	f8 01       	movw	r30, r16
    9e66:	ee 51       	subi	r30, 0x1E	; 30
    9e68:	fc 4a       	sbci	r31, 0xAC	; 172
    9e6a:	80 83       	st	Z, r24
			if(rssi[tmp] == ')'){
    9e6c:	89 32       	cpi	r24, 0x29	; 41
    9e6e:	29 f5       	brne	.+74     	; 0x9eba <Wifi_GetSignalStrength+0x9c>
				rssi[tmp] = 0;
    9e70:	10 82       	st	Z, r1
				//Debug_SendString("rssi: ", false);
				//Debug_SendString(rssi, true);
				worker = atoi(rssi);
    9e72:	82 ee       	ldi	r24, 0xE2	; 226
    9e74:	93 e5       	ldi	r25, 0x53	; 83
    9e76:	0e 94 35 59 	call	0xb26a	; 0xb26a <atoi>
    9e7a:	aa 27       	eor	r26, r26
    9e7c:	97 fd       	sbrc	r25, 7
    9e7e:	a0 95       	com	r26
    9e80:	ba 2f       	mov	r27, r26
				worker*=9208;
    9e82:	bc 01       	movw	r22, r24
    9e84:	cd 01       	movw	r24, r26
    9e86:	28 ef       	ldi	r18, 0xF8	; 248
    9e88:	33 e2       	ldi	r19, 0x23	; 35
    9e8a:	40 e0       	ldi	r20, 0x00	; 0
    9e8c:	50 e0       	ldi	r21, 0x00	; 0
    9e8e:	0e 94 c1 58 	call	0xb182	; 0xb182 <__mulsi3>
    9e92:	9b 01       	movw	r18, r22
    9e94:	ac 01       	movw	r20, r24
				worker = 1045100 - worker;
    9e96:	6c e6       	ldi	r22, 0x6C	; 108
    9e98:	72 ef       	ldi	r23, 0xF2	; 242
    9e9a:	8f e0       	ldi	r24, 0x0F	; 15
    9e9c:	90 e0       	ldi	r25, 0x00	; 0
    9e9e:	62 1b       	sub	r22, r18
    9ea0:	73 0b       	sbc	r23, r19
    9ea2:	84 0b       	sbc	r24, r20
    9ea4:	95 0b       	sbc	r25, r21
				worker /= 10000;
				ss = worker & 0xFF;
    9ea6:	20 e1       	ldi	r18, 0x10	; 16
    9ea8:	37 e2       	ldi	r19, 0x27	; 39
    9eaa:	40 e0       	ldi	r20, 0x00	; 0
    9eac:	50 e0       	ldi	r21, 0x00	; 0
    9eae:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    9eb2:	25 36       	cpi	r18, 0x65	; 101
    9eb4:	58 f0       	brcs	.+22     	; 0x9ecc <Wifi_GetSignalStrength+0xae>
    9eb6:	24 e6       	ldi	r18, 0x64	; 100
    9eb8:	09 c0       	rjmp	.+18     	; 0x9ecc <Wifi_GetSignalStrength+0xae>
				//sprintf(string, "strength: %u %",ss);
				//Debug_SendString(string,true);

				return ss;
			}
			tmp++;
    9eba:	f3 94       	inc	r15
    9ebc:	c5 01       	movw	r24, r10
    9ebe:	01 97       	sbiw	r24, 0x01	; 1
    9ec0:	f1 f7       	brne	.-4      	; 0x9ebe <Wifi_GetSignalStrength+0xa0>
uint8_t Wifi_GetSignalStrength(uint16_t timeOut){
	uint8_t tmp = 0;
	uint8_t ss = 0;
	uint32_t worker = 0;
	Wifi_SendCommand("show rssi","RSSI=(-","RSSI=(-",timeOut);
	for(uint16_t i = 0; i < timeOut; i++){
    9ec2:	21 96       	adiw	r28, 0x01	; 1
    9ec4:	cc 15       	cp	r28, r12
    9ec6:	dd 05       	cpc	r29, r13
    9ec8:	20 f2       	brcs	.-120    	; 0x9e52 <Wifi_GetSignalStrength+0x34>
    9eca:	20 e0       	ldi	r18, 0x00	; 0
		_delay_ms(1);
	}
	return 0;


}
    9ecc:	82 2f       	mov	r24, r18
    9ece:	df 91       	pop	r29
    9ed0:	cf 91       	pop	r28
    9ed2:	1f 91       	pop	r17
    9ed4:	0f 91       	pop	r16
    9ed6:	ff 90       	pop	r15
    9ed8:	df 90       	pop	r13
    9eda:	cf 90       	pop	r12
    9edc:	bf 90       	pop	r11
    9ede:	af 90       	pop	r10
    9ee0:	08 95       	ret

00009ee2 <Config_Wifi>:
        sprintf(temp,"shifted by %u",timeZoneShift);
	    Debug_SendString(temp,true);
    }
}

void Config_Wifi(void){
    9ee2:	1f 93       	push	r17
    9ee4:	cf 93       	push	r28
    9ee6:	df 93       	push	r29
    9ee8:	80 e2       	ldi	r24, 0x20	; 32
    9eea:	9e e4       	ldi	r25, 0x4E	; 78
    9eec:	20 e7       	ldi	r18, 0x70	; 112
    9eee:	31 e0       	ldi	r19, 0x01	; 1
    9ef0:	f9 01       	movw	r30, r18
    9ef2:	31 97       	sbiw	r30, 0x01	; 1
    9ef4:	f1 f7       	brne	.-4      	; 0x9ef2 <Config_Wifi+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9ef6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9ef8:	d9 f7       	brne	.-10     	; 0x9ef0 <Config_Wifi+0xe>



    _delay_ms(2000);

    Wifi_EnterCMDMode(1000);
    9efa:	88 ee       	ldi	r24, 0xE8	; 232
    9efc:	93 e0       	ldi	r25, 0x03	; 3
    9efe:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <Wifi_EnterCMDMode>
    9f02:	80 e1       	ldi	r24, 0x10	; 16
    9f04:	97 e2       	ldi	r25, 0x27	; 39
    9f06:	20 e7       	ldi	r18, 0x70	; 112
    9f08:	31 e0       	ldi	r19, 0x01	; 1
    9f0a:	f9 01       	movw	r30, r18
    9f0c:	31 97       	sbiw	r30, 0x01	; 1
    9f0e:	f1 f7       	brne	.-4      	; 0x9f0c <Config_Wifi+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f10:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f12:	d9 f7       	brne	.-10     	; 0x9f0a <Config_Wifi+0x28>

	_delay_ms(1000);
	display_clearBuffer();
    9f14:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <display_clearBuffer>
	display_writeBufferToScreen();
    9f18:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    9f1c:	85 ec       	ldi	r24, 0xC5	; 197
    9f1e:	96 e2       	ldi	r25, 0x26	; 38
    9f20:	63 ed       	ldi	r22, 0xD3	; 211
    9f22:	76 e2       	ldi	r23, 0x26	; 38
    9f24:	ab 01       	movw	r20, r22
    9f26:	24 ef       	ldi	r18, 0xF4	; 244
    9f28:	31 e0       	ldi	r19, 0x01	; 1
    9f2a:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9f2e:	88 23       	and	r24, r24
    9f30:	19 f0       	breq	.+6      	; 0x9f38 <Config_Wifi+0x56>
		display_putString("reset..........OK",col,0,System5x7);
    9f32:	88 ee       	ldi	r24, 0xE8	; 232
    9f34:	96 e2       	ldi	r25, 0x26	; 38
    9f36:	02 c0       	rjmp	.+4      	; 0x9f3c <Config_Wifi+0x5a>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    9f38:	8a ef       	ldi	r24, 0xFA	; 250
    9f3a:	96 e2       	ldi	r25, 0x26	; 38
    9f3c:	60 e0       	ldi	r22, 0x00	; 0
    9f3e:	40 e0       	ldi	r20, 0x00	; 0
    9f40:	20 e7       	ldi	r18, 0x70	; 112
    9f42:	31 e3       	ldi	r19, 0x31	; 49
    9f44:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	}
	display_writeBufferToScreen();
    9f48:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    9f4c:	80 e1       	ldi	r24, 0x10	; 16
    9f4e:	97 e2       	ldi	r25, 0x27	; 39
    9f50:	20 e7       	ldi	r18, 0x70	; 112
    9f52:	31 e0       	ldi	r19, 0x01	; 1
    9f54:	f9 01       	movw	r30, r18
    9f56:	31 97       	sbiw	r30, 0x01	; 1
    9f58:	f1 f7       	brne	.-4      	; 0x9f56 <Config_Wifi+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f5c:	d9 f7       	brne	.-10     	; 0x9f54 <Config_Wifi+0x72>

	_delay_ms(1000);



    Wifi_SendCommand("set sys iofunc 0x10","AOK","AOK",500);
    9f5e:	8c e0       	ldi	r24, 0x0C	; 12
    9f60:	97 e2       	ldi	r25, 0x27	; 39
    9f62:	60 e2       	ldi	r22, 0x20	; 32
    9f64:	77 e2       	ldi	r23, 0x27	; 39
    9f66:	ab 01       	movw	r20, r22
    9f68:	24 ef       	ldi	r18, 0xF4	; 244
    9f6a:	31 e0       	ldi	r19, 0x01	; 1
    9f6c:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9f70:	80 e1       	ldi	r24, 0x10	; 16
    9f72:	97 e2       	ldi	r25, 0x27	; 39
    9f74:	20 e7       	ldi	r18, 0x70	; 112
    9f76:	31 e0       	ldi	r19, 0x01	; 1
    9f78:	f9 01       	movw	r30, r18
    9f7a:	31 97       	sbiw	r30, 0x01	; 1
    9f7c:	f1 f7       	brne	.-4      	; 0x9f7a <Config_Wifi+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f80:	d9 f7       	brne	.-10     	; 0x9f78 <Config_Wifi+0x96>
    _delay_ms(1000);


    Wifi_SendCommand("set wlan join 0","AOK","AOK",500);
    9f82:	84 e2       	ldi	r24, 0x24	; 36
    9f84:	97 e2       	ldi	r25, 0x27	; 39
    9f86:	60 e2       	ldi	r22, 0x20	; 32
    9f88:	77 e2       	ldi	r23, 0x27	; 39
    9f8a:	ab 01       	movw	r20, r22
    9f8c:	24 ef       	ldi	r18, 0xF4	; 244
    9f8e:	31 e0       	ldi	r19, 0x01	; 1
    9f90:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9f94:	80 e1       	ldi	r24, 0x10	; 16
    9f96:	97 e2       	ldi	r25, 0x27	; 39
    9f98:	20 e7       	ldi	r18, 0x70	; 112
    9f9a:	31 e0       	ldi	r19, 0x01	; 1
    9f9c:	f9 01       	movw	r30, r18
    9f9e:	31 97       	sbiw	r30, 0x01	; 1
    9fa0:	f1 f7       	brne	.-4      	; 0x9f9e <Config_Wifi+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9fa2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9fa4:	d9 f7       	brne	.-10     	; 0x9f9c <Config_Wifi+0xba>
    _delay_ms(1000);

    Wifi_SendCommand("set uart flow 1","AOK","AOK",500);
    9fa6:	84 e3       	ldi	r24, 0x34	; 52
    9fa8:	97 e2       	ldi	r25, 0x27	; 39
    9faa:	60 e2       	ldi	r22, 0x20	; 32
    9fac:	77 e2       	ldi	r23, 0x27	; 39
    9fae:	ab 01       	movw	r20, r22
    9fb0:	24 ef       	ldi	r18, 0xF4	; 244
    9fb2:	31 e0       	ldi	r19, 0x01	; 1
    9fb4:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
   // _delay_ms(500);

    Wifi_SendCommand("set comm size 1420","AOK","AOK",500);
    9fb8:	84 e4       	ldi	r24, 0x44	; 68
    9fba:	97 e2       	ldi	r25, 0x27	; 39
    9fbc:	60 e2       	ldi	r22, 0x20	; 32
    9fbe:	77 e2       	ldi	r23, 0x27	; 39
    9fc0:	ab 01       	movw	r20, r22
    9fc2:	24 ef       	ldi	r18, 0xF4	; 244
    9fc4:	31 e0       	ldi	r19, 0x01	; 1
    9fc6:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9fca:	88 e8       	ldi	r24, 0x88	; 136
    9fcc:	93 e1       	ldi	r25, 0x13	; 19
    9fce:	20 e7       	ldi	r18, 0x70	; 112
    9fd0:	31 e0       	ldi	r19, 0x01	; 1
    9fd2:	f9 01       	movw	r30, r18
    9fd4:	31 97       	sbiw	r30, 0x01	; 1
    9fd6:	f1 f7       	brne	.-4      	; 0x9fd4 <Config_Wifi+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9fd8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9fda:	d9 f7       	brne	.-10     	; 0x9fd2 <Config_Wifi+0xf0>
	_delay_ms(500);

	Wifi_SendCommand("set comm time 1000","AOK","AOK",500);
    9fdc:	87 e5       	ldi	r24, 0x57	; 87
    9fde:	97 e2       	ldi	r25, 0x27	; 39
    9fe0:	60 e2       	ldi	r22, 0x20	; 32
    9fe2:	77 e2       	ldi	r23, 0x27	; 39
    9fe4:	ab 01       	movw	r20, r22
    9fe6:	24 ef       	ldi	r18, 0xF4	; 244
    9fe8:	31 e0       	ldi	r19, 0x01	; 1
    9fea:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    9fee:	88 e8       	ldi	r24, 0x88	; 136
    9ff0:	93 e1       	ldi	r25, 0x13	; 19
    9ff2:	20 e7       	ldi	r18, 0x70	; 112
    9ff4:	31 e0       	ldi	r19, 0x01	; 1
    9ff6:	f9 01       	movw	r30, r18
    9ff8:	31 97       	sbiw	r30, 0x01	; 1
    9ffa:	f1 f7       	brne	.-4      	; 0x9ff8 <Config_Wifi+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9ffc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9ffe:	d9 f7       	brne	.-10     	; 0x9ff6 <Config_Wifi+0x114>
	_delay_ms(500);

    Wifi_SendCommand("set time address 195.43.74.3","AOK","AOK",500);
    a000:	8a e6       	ldi	r24, 0x6A	; 106
    a002:	97 e2       	ldi	r25, 0x27	; 39
    a004:	60 e2       	ldi	r22, 0x20	; 32
    a006:	77 e2       	ldi	r23, 0x27	; 39
    a008:	ab 01       	movw	r20, r22
    a00a:	24 ef       	ldi	r18, 0xF4	; 244
    a00c:	31 e0       	ldi	r19, 0x01	; 1
    a00e:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a012:	88 e8       	ldi	r24, 0x88	; 136
    a014:	93 e1       	ldi	r25, 0x13	; 19
    a016:	20 e7       	ldi	r18, 0x70	; 112
    a018:	31 e0       	ldi	r19, 0x01	; 1
    a01a:	f9 01       	movw	r30, r18
    a01c:	31 97       	sbiw	r30, 0x01	; 1
    a01e:	f1 f7       	brne	.-4      	; 0xa01c <Config_Wifi+0x13a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a020:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a022:	d9 f7       	brne	.-10     	; 0xa01a <Config_Wifi+0x138>
	_delay_ms(500);

    Wifi_SendCommand("save","Storing in config","Storing in config",500);
    a024:	87 e8       	ldi	r24, 0x87	; 135
    a026:	97 e2       	ldi	r25, 0x27	; 39
    a028:	6c e8       	ldi	r22, 0x8C	; 140
    a02a:	77 e2       	ldi	r23, 0x27	; 39
    a02c:	ab 01       	movw	r20, r22
    a02e:	24 ef       	ldi	r18, 0xF4	; 244
    a030:	31 e0       	ldi	r19, 0x01	; 1
    a032:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a036:	80 e1       	ldi	r24, 0x10	; 16
    a038:	97 e2       	ldi	r25, 0x27	; 39
    a03a:	20 e7       	ldi	r18, 0x70	; 112
    a03c:	31 e0       	ldi	r19, 0x01	; 1
    a03e:	f9 01       	movw	r30, r18
    a040:	31 97       	sbiw	r30, 0x01	; 1
    a042:	f1 f7       	brne	.-4      	; 0xa040 <Config_Wifi+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a044:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a046:	d9 f7       	brne	.-10     	; 0xa03e <Config_Wifi+0x15c>
	_delay_ms(1000);

	Wifi_SendCommand("reboot","*Reboot*","*Reboot*",500);
    a048:	8e e9       	ldi	r24, 0x9E	; 158
    a04a:	97 e2       	ldi	r25, 0x27	; 39
    a04c:	65 ea       	ldi	r22, 0xA5	; 165
    a04e:	77 e2       	ldi	r23, 0x27	; 39
    a050:	ab 01       	movw	r20, r22
    a052:	24 ef       	ldi	r18, 0xF4	; 244
    a054:	31 e0       	ldi	r19, 0x01	; 1
    a056:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a05a:	80 e4       	ldi	r24, 0x40	; 64
    a05c:	9c e9       	ldi	r25, 0x9C	; 156
    a05e:	20 e7       	ldi	r18, 0x70	; 112
    a060:	31 e0       	ldi	r19, 0x01	; 1
    a062:	f9 01       	movw	r30, r18
    a064:	31 97       	sbiw	r30, 0x01	; 1
    a066:	f1 f7       	brne	.-4      	; 0xa064 <Config_Wifi+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a068:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a06a:	d9 f7       	brne	.-10     	; 0xa062 <Config_Wifi+0x180>
	_delay_ms(4000);


    Wifi_EnterCMDMode(1000);
    a06c:	88 ee       	ldi	r24, 0xE8	; 232
    a06e:	93 e0       	ldi	r25, 0x03	; 3
    a070:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <Wifi_EnterCMDMode>
    a074:	80 e1       	ldi	r24, 0x10	; 16
    a076:	97 e2       	ldi	r25, 0x27	; 39
    a078:	20 e7       	ldi	r18, 0x70	; 112
    a07a:	31 e0       	ldi	r19, 0x01	; 1
    a07c:	f9 01       	movw	r30, r18
    a07e:	31 97       	sbiw	r30, 0x01	; 1
    a080:	f1 f7       	brne	.-4      	; 0xa07e <Config_Wifi+0x19c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a082:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a084:	d9 f7       	brne	.-10     	; 0xa07c <Config_Wifi+0x19a>
    _delay_ms(1000);

	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    a086:	8e ea       	ldi	r24, 0xAE	; 174
    a088:	97 e2       	ldi	r25, 0x27	; 39
    a08a:	60 e2       	ldi	r22, 0x20	; 32
    a08c:	77 e2       	ldi	r23, 0x27	; 39
    a08e:	ab 01       	movw	r20, r22
    a090:	24 ef       	ldi	r18, 0xF4	; 244
    a092:	31 e0       	ldi	r19, 0x01	; 1
    a094:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a098:	88 e8       	ldi	r24, 0x88	; 136
    a09a:	93 e1       	ldi	r25, 0x13	; 19
    a09c:	20 e7       	ldi	r18, 0x70	; 112
    a09e:	31 e0       	ldi	r19, 0x01	; 1
    a0a0:	f9 01       	movw	r30, r18
    a0a2:	31 97       	sbiw	r30, 0x01	; 1
    a0a4:	f1 f7       	brne	.-4      	; 0xa0a2 <Config_Wifi+0x1c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a0a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0a8:	d9 f7       	brne	.-10     	; 0xa0a0 <Config_Wifi+0x1be>
	_delay_ms(500);



	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    a0aa:	80 ec       	ldi	r24, 0xC0	; 192
    a0ac:	97 e2       	ldi	r25, 0x27	; 39
    a0ae:	60 e2       	ldi	r22, 0x20	; 32
    a0b0:	77 e2       	ldi	r23, 0x27	; 39
    a0b2:	ab 01       	movw	r20, r22
    a0b4:	24 ef       	ldi	r18, 0xF4	; 244
    a0b6:	31 e0       	ldi	r19, 0x01	; 1
    a0b8:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a0bc:	88 23       	and	r24, r24
    a0be:	19 f0       	breq	.+6      	; 0xa0c6 <Config_Wifi+0x1e4>
		display_putString("enable time....OK",col,0,System5x7);
    a0c0:	82 ed       	ldi	r24, 0xD2	; 210
    a0c2:	97 e2       	ldi	r25, 0x27	; 39
    a0c4:	02 c0       	rjmp	.+4      	; 0xa0ca <Config_Wifi+0x1e8>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    a0c6:	84 ee       	ldi	r24, 0xE4	; 228
    a0c8:	97 e2       	ldi	r25, 0x27	; 39
    a0ca:	61 e0       	ldi	r22, 0x01	; 1
    a0cc:	40 e0       	ldi	r20, 0x00	; 0
    a0ce:	20 e7       	ldi	r18, 0x70	; 112
    a0d0:	31 e3       	ldi	r19, 0x31	; 49
    a0d2:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	}
	display_writeBufferToScreen();
    a0d6:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a0da:	88 e8       	ldi	r24, 0x88	; 136
    a0dc:	93 e1       	ldi	r25, 0x13	; 19
    a0de:	20 e7       	ldi	r18, 0x70	; 112
    a0e0:	31 e0       	ldi	r19, 0x01	; 1
    a0e2:	f9 01       	movw	r30, r18
    a0e4:	31 97       	sbiw	r30, 0x01	; 1
    a0e6:	f1 f7       	brne	.-4      	; 0xa0e4 <Config_Wifi+0x202>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a0e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0ea:	d9 f7       	brne	.-10     	; 0xa0e2 <Config_Wifi+0x200>
	_delay_ms(500);
	col++;
	
	if(authRead){
    a0ec:	80 91 23 34 	lds	r24, 0x3423
    a0f0:	88 23       	and	r24, r24
    a0f2:	11 f4       	brne	.+4      	; 0xa0f8 <Config_Wifi+0x216>
    a0f4:	12 e0       	ldi	r17, 0x02	; 2
    a0f6:	22 c0       	rjmp	.+68     	; 0xa13c <Config_Wifi+0x25a>
		if(Wifi_SendCommand(auth,"AOK","AOK",500)){
    a0f8:	80 e6       	ldi	r24, 0x60	; 96
    a0fa:	90 e3       	ldi	r25, 0x30	; 48
    a0fc:	60 e2       	ldi	r22, 0x20	; 32
    a0fe:	77 e2       	ldi	r23, 0x27	; 39
    a100:	ab 01       	movw	r20, r22
    a102:	24 ef       	ldi	r18, 0xF4	; 244
    a104:	31 e0       	ldi	r19, 0x01	; 1
    a106:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a10a:	88 23       	and	r24, r24
    a10c:	19 f0       	breq	.+6      	; 0xa114 <Config_Wifi+0x232>
			display_putString("encryption.....OK",col,0,System5x7);
    a10e:	86 ef       	ldi	r24, 0xF6	; 246
    a110:	97 e2       	ldi	r25, 0x27	; 39
    a112:	02 c0       	rjmp	.+4      	; 0xa118 <Config_Wifi+0x236>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    a114:	88 e0       	ldi	r24, 0x08	; 8
    a116:	98 e2       	ldi	r25, 0x28	; 40
    a118:	62 e0       	ldi	r22, 0x02	; 2
    a11a:	40 e0       	ldi	r20, 0x00	; 0
    a11c:	20 e7       	ldi	r18, 0x70	; 112
    a11e:	31 e3       	ldi	r19, 0x31	; 49
    a120:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		}
		display_writeBufferToScreen();
    a124:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a128:	88 e8       	ldi	r24, 0x88	; 136
    a12a:	93 e1       	ldi	r25, 0x13	; 19
    a12c:	20 e7       	ldi	r18, 0x70	; 112
    a12e:	31 e0       	ldi	r19, 0x01	; 1
    a130:	f9 01       	movw	r30, r18
    a132:	31 97       	sbiw	r30, 0x01	; 1
    a134:	f1 f7       	brne	.-4      	; 0xa132 <Config_Wifi+0x250>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a136:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a138:	d9 f7       	brne	.-10     	; 0xa130 <Config_Wifi+0x24e>
    a13a:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(500);
		col++;
	}
	
	if(phraseRead){
    a13c:	80 91 24 34 	lds	r24, 0x3424
    a140:	88 23       	and	r24, r24
    a142:	11 f1       	breq	.+68     	; 0xa188 <Config_Wifi+0x2a6>
		if(Wifi_SendCommand(phrase,"AOK","AOK",500)){
    a144:	82 e9       	ldi	r24, 0x92	; 146
    a146:	90 e3       	ldi	r25, 0x30	; 48
    a148:	60 e2       	ldi	r22, 0x20	; 32
    a14a:	77 e2       	ldi	r23, 0x27	; 39
    a14c:	ab 01       	movw	r20, r22
    a14e:	24 ef       	ldi	r18, 0xF4	; 244
    a150:	31 e0       	ldi	r19, 0x01	; 1
    a152:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a156:	88 23       	and	r24, r24
    a158:	19 f0       	breq	.+6      	; 0xa160 <Config_Wifi+0x27e>
			display_putString("phrase.........OK",col,0,System5x7);
    a15a:	8a e1       	ldi	r24, 0x1A	; 26
    a15c:	98 e2       	ldi	r25, 0x28	; 40
    a15e:	02 c0       	rjmp	.+4      	; 0xa164 <Config_Wifi+0x282>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    a160:	8c e2       	ldi	r24, 0x2C	; 44
    a162:	98 e2       	ldi	r25, 0x28	; 40
    a164:	61 2f       	mov	r22, r17
    a166:	40 e0       	ldi	r20, 0x00	; 0
    a168:	20 e7       	ldi	r18, 0x70	; 112
    a16a:	31 e3       	ldi	r19, 0x31	; 49
    a16c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		}
		display_writeBufferToScreen();
    a170:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a174:	88 e8       	ldi	r24, 0x88	; 136
    a176:	93 e1       	ldi	r25, 0x13	; 19
    a178:	20 e7       	ldi	r18, 0x70	; 112
    a17a:	31 e0       	ldi	r19, 0x01	; 1
    a17c:	f9 01       	movw	r30, r18
    a17e:	31 97       	sbiw	r30, 0x01	; 1
    a180:	f1 f7       	brne	.-4      	; 0xa17e <Config_Wifi+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a184:	d9 f7       	brne	.-10     	; 0xa17c <Config_Wifi+0x29a>
    a186:	25 c0       	rjmp	.+74     	; 0xa1d2 <Config_Wifi+0x2f0>
		_delay_ms(500);
		col++;
	} else if(keyRead){
    a188:	80 91 25 34 	lds	r24, 0x3425
    a18c:	88 23       	and	r24, r24
    a18e:	11 f1       	breq	.+68     	; 0xa1d4 <Config_Wifi+0x2f2>
		if(Wifi_SendCommand(key,"AOK","AOK",500)){
    a190:	84 ec       	ldi	r24, 0xC4	; 196
    a192:	90 e3       	ldi	r25, 0x30	; 48
    a194:	60 e2       	ldi	r22, 0x20	; 32
    a196:	77 e2       	ldi	r23, 0x27	; 39
    a198:	ab 01       	movw	r20, r22
    a19a:	24 ef       	ldi	r18, 0xF4	; 244
    a19c:	31 e0       	ldi	r19, 0x01	; 1
    a19e:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a1a2:	88 23       	and	r24, r24
    a1a4:	19 f0       	breq	.+6      	; 0xa1ac <Config_Wifi+0x2ca>
			display_putString("key............OK",col,0,System5x7);
    a1a6:	8e e3       	ldi	r24, 0x3E	; 62
    a1a8:	98 e2       	ldi	r25, 0x28	; 40
    a1aa:	02 c0       	rjmp	.+4      	; 0xa1b0 <Config_Wifi+0x2ce>
		} else {
			display_putString("key..........FAIL",col,0,System5x7);
    a1ac:	80 e5       	ldi	r24, 0x50	; 80
    a1ae:	98 e2       	ldi	r25, 0x28	; 40
    a1b0:	61 2f       	mov	r22, r17
    a1b2:	40 e0       	ldi	r20, 0x00	; 0
    a1b4:	20 e7       	ldi	r18, 0x70	; 112
    a1b6:	31 e3       	ldi	r19, 0x31	; 49
    a1b8:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		}
		display_writeBufferToScreen();
    a1bc:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a1c0:	88 e8       	ldi	r24, 0x88	; 136
    a1c2:	93 e1       	ldi	r25, 0x13	; 19
    a1c4:	20 e7       	ldi	r18, 0x70	; 112
    a1c6:	31 e0       	ldi	r19, 0x01	; 1
    a1c8:	f9 01       	movw	r30, r18
    a1ca:	31 97       	sbiw	r30, 0x01	; 1
    a1cc:	f1 f7       	brne	.-4      	; 0xa1ca <Config_Wifi+0x2e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a1ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a1d0:	d9 f7       	brne	.-10     	; 0xa1c8 <Config_Wifi+0x2e6>
		_delay_ms(500);
		col++;
    a1d2:	1f 5f       	subi	r17, 0xFF	; 255
	}

	if(ssidRead){
    a1d4:	80 91 27 34 	lds	r24, 0x3427
    a1d8:	88 23       	and	r24, r24
    a1da:	19 f1       	breq	.+70     	; 0xa222 <Config_Wifi+0x340>
		if(Wifi_SendCommand(ssid,"DeAut","Auto+",2000)){
    a1dc:	86 ef       	ldi	r24, 0xF6	; 246
    a1de:	90 e3       	ldi	r25, 0x30	; 48
    a1e0:	62 e6       	ldi	r22, 0x62	; 98
    a1e2:	78 e2       	ldi	r23, 0x28	; 40
    a1e4:	48 e6       	ldi	r20, 0x68	; 104
    a1e6:	58 e2       	ldi	r21, 0x28	; 40
    a1e8:	20 ed       	ldi	r18, 0xD0	; 208
    a1ea:	37 e0       	ldi	r19, 0x07	; 7
    a1ec:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a1f0:	88 23       	and	r24, r24
    a1f2:	19 f0       	breq	.+6      	; 0xa1fa <Config_Wifi+0x318>
			display_putString("ssid...........OK",col,0,System5x7);
    a1f4:	8e e6       	ldi	r24, 0x6E	; 110
    a1f6:	98 e2       	ldi	r25, 0x28	; 40
    a1f8:	02 c0       	rjmp	.+4      	; 0xa1fe <Config_Wifi+0x31c>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    a1fa:	80 e8       	ldi	r24, 0x80	; 128
    a1fc:	98 e2       	ldi	r25, 0x28	; 40
    a1fe:	61 2f       	mov	r22, r17
    a200:	40 e0       	ldi	r20, 0x00	; 0
    a202:	20 e7       	ldi	r18, 0x70	; 112
    a204:	31 e3       	ldi	r19, 0x31	; 49
    a206:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		}
		display_writeBufferToScreen();
    a20a:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a20e:	88 e9       	ldi	r24, 0x98	; 152
    a210:	9a e3       	ldi	r25, 0x3A	; 58
    a212:	20 e7       	ldi	r18, 0x70	; 112
    a214:	31 e0       	ldi	r19, 0x01	; 1
    a216:	f9 01       	movw	r30, r18
    a218:	31 97       	sbiw	r30, 0x01	; 1
    a21a:	f1 f7       	brne	.-4      	; 0xa218 <Config_Wifi+0x336>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a21c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a21e:	d9 f7       	brne	.-10     	; 0xa216 <Config_Wifi+0x334>
		_delay_ms(1500);
		col++;
    a220:	1f 5f       	subi	r17, 0xFF	; 255
	}

	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    a222:	82 e9       	ldi	r24, 0x92	; 146
    a224:	98 e2       	ldi	r25, 0x28	; 40
    a226:	6b e9       	ldi	r22, 0x9B	; 155
    a228:	78 e2       	ldi	r23, 0x28	; 40
    a22a:	ab 01       	movw	r20, r22
    a22c:	24 ef       	ldi	r18, 0xF4	; 244
    a22e:	31 e0       	ldi	r19, 0x01	; 1
    a230:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a234:	88 e8       	ldi	r24, 0x88	; 136
    a236:	93 e1       	ldi	r25, 0x13	; 19
    a238:	20 e7       	ldi	r18, 0x70	; 112
    a23a:	31 e0       	ldi	r19, 0x01	; 1
    a23c:	f9 01       	movw	r30, r18
    a23e:	31 97       	sbiw	r30, 0x01	; 1
    a240:	f1 f7       	brne	.-4      	; 0xa23e <Config_Wifi+0x35c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a244:	d9 f7       	brne	.-10     	; 0xa23c <Config_Wifi+0x35a>
	_delay_ms(500);

	Wifi_GetMac(1000);
    a246:	88 ee       	ldi	r24, 0xE8	; 232
    a248:	93 e0       	ldi	r25, 0x03	; 3
    a24a:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <Wifi_GetMac>
    a24e:	88 e8       	ldi	r24, 0x88	; 136
    a250:	93 e1       	ldi	r25, 0x13	; 19
    a252:	20 e7       	ldi	r18, 0x70	; 112
    a254:	31 e0       	ldi	r19, 0x01	; 1
    a256:	f9 01       	movw	r30, r18
    a258:	31 97       	sbiw	r30, 0x01	; 1
    a25a:	f1 f7       	brne	.-4      	; 0xa258 <Config_Wifi+0x376>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a25c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a25e:	d9 f7       	brne	.-10     	; 0xa256 <Config_Wifi+0x374>
	_delay_ms(500);
	Wifi_ExitCMDMode(500);
    a260:	84 ef       	ldi	r24, 0xF4	; 244
    a262:	91 e0       	ldi	r25, 0x01	; 1
    a264:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <Wifi_ExitCMDMode>
    a268:	80 e1       	ldi	r24, 0x10	; 16
    a26a:	97 e2       	ldi	r25, 0x27	; 39
    a26c:	20 e7       	ldi	r18, 0x70	; 112
    a26e:	31 e0       	ldi	r19, 0x01	; 1
    a270:	f9 01       	movw	r30, r18
    a272:	31 97       	sbiw	r30, 0x01	; 1
    a274:	f1 f7       	brne	.-4      	; 0xa272 <Config_Wifi+0x390>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a276:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a278:	d9 f7       	brne	.-10     	; 0xa270 <Config_Wifi+0x38e>

	_delay_ms(1000);
	
	if(Wifi_Connected(1000)){
    a27a:	88 ee       	ldi	r24, 0xE8	; 232
    a27c:	93 e0       	ldi	r25, 0x03	; 3
    a27e:	0e 94 94 02 	call	0x528	; 0x528 <Wifi_Connected>
    a282:	88 23       	and	r24, r24
    a284:	61 f0       	breq	.+24     	; 0xa29e <Config_Wifi+0x3bc>
		display_putString("network........OK",col,0,System5x7);
    a286:	85 ea       	ldi	r24, 0xA5	; 165
    a288:	98 e2       	ldi	r25, 0x28	; 40
    a28a:	61 2f       	mov	r22, r17
    a28c:	40 e0       	ldi	r20, 0x00	; 0
    a28e:	20 e7       	ldi	r18, 0x70	; 112
    a290:	31 e3       	ldi	r19, 0x31	; 49
    a292:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		connected = true;
    a296:	81 e0       	ldi	r24, 0x01	; 1
    a298:	80 93 ea 33 	sts	0x33EA, r24
    a29c:	0a c0       	rjmp	.+20     	; 0xa2b2 <Config_Wifi+0x3d0>
	} else {
		display_putString("network......FAIL",col,0,System5x7);
    a29e:	87 eb       	ldi	r24, 0xB7	; 183
    a2a0:	98 e2       	ldi	r25, 0x28	; 40
    a2a2:	61 2f       	mov	r22, r17
    a2a4:	40 e0       	ldi	r20, 0x00	; 0
    a2a6:	20 e7       	ldi	r18, 0x70	; 112
    a2a8:	31 e3       	ldi	r19, 0x31	; 49
    a2aa:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		connected = false;
    a2ae:	10 92 ea 33 	sts	0x33EA, r1
	}
	display_writeBufferToScreen();
    a2b2:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
	col++;
    a2b6:	1f 5f       	subi	r17, 0xFF	; 255


	
	if(connected){
    a2b8:	80 91 ea 33 	lds	r24, 0x33EA
    a2bc:	88 23       	and	r24, r24
    a2be:	09 f4       	brne	.+2      	; 0xa2c2 <Config_Wifi+0x3e0>
    a2c0:	bc c0       	rjmp	.+376    	; 0xa43a <Config_Wifi+0x558>
    a2c2:	80 e1       	ldi	r24, 0x10	; 16
    a2c4:	97 e2       	ldi	r25, 0x27	; 39
    a2c6:	20 e7       	ldi	r18, 0x70	; 112
    a2c8:	31 e0       	ldi	r19, 0x01	; 1
    a2ca:	f9 01       	movw	r30, r18
    a2cc:	31 97       	sbiw	r30, 0x01	; 1
    a2ce:	f1 f7       	brne	.-4      	; 0xa2cc <Config_Wifi+0x3ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a2d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a2d2:	d9 f7       	brne	.-10     	; 0xa2ca <Config_Wifi+0x3e8>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    a2d4:	84 ef       	ldi	r24, 0xF4	; 244
    a2d6:	91 e0       	ldi	r25, 0x01	; 1
    a2d8:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    a2dc:	88 ee       	ldi	r24, 0xE8	; 232
    a2de:	93 e0       	ldi	r25, 0x03	; 3
    a2e0:	0e 94 5c 4e 	call	0x9cb8	; 0x9cb8 <Wifi_GetTime>
    a2e4:	88 23       	and	r24, r24
    a2e6:	09 f4       	brne	.+2      	; 0xa2ea <Config_Wifi+0x408>
    a2e8:	6d c0       	rjmp	.+218    	; 0xa3c4 <Config_Wifi+0x4e2>
		    timeIsValid = true;
    a2ea:	81 e0       	ldi	r24, 0x01	; 1
    a2ec:	80 93 43 34 	sts	0x3443, r24
			display_putString("internet.......OK",col,0,System5x7);
    a2f0:	89 ec       	ldi	r24, 0xC9	; 201
    a2f2:	98 e2       	ldi	r25, 0x28	; 40
    a2f4:	61 2f       	mov	r22, r17
    a2f6:	40 e0       	ldi	r20, 0x00	; 0
    a2f8:	20 e7       	ldi	r18, 0x70	; 112
    a2fa:	31 e3       	ldi	r19, 0x31	; 49
    a2fc:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
			Time_Set(time_secs);
    a300:	80 91 e2 33 	lds	r24, 0x33E2
    a304:	90 91 e3 33 	lds	r25, 0x33E3
    a308:	a0 91 e4 33 	lds	r26, 0x33E4
    a30c:	b0 91 e5 33 	lds	r27, 0x33E5
	
	
}

void Time_Set(uint32_t time){
  cli();
    a310:	f8 94       	cli
  UNIX_time = time;
    a312:	80 93 01 34 	sts	0x3401, r24
    a316:	90 93 02 34 	sts	0x3402, r25
    a31a:	a0 93 03 34 	sts	0x3403, r26
    a31e:	b0 93 04 34 	sts	0x3404, r27
  sei();
    a322:	78 94       	sei
			signalStrength = Wifi_GetSignalStrength(1000);
    a324:	88 ee       	ldi	r24, 0xE8	; 232
    a326:	93 e0       	ldi	r25, 0x03	; 3
    a328:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <Wifi_GetSignalStrength>
    a32c:	80 93 2e 34 	sts	0x342E, r24

	        Debug_SendString("Getting space remaining",true);
    a330:	8b ed       	ldi	r24, 0xDB	; 219
    a332:	98 e2       	ldi	r25, 0x28	; 40
    a334:	61 e0       	ldi	r22, 0x01	; 1
    a336:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
	        okToGetRemainingSpace = true;
    a33a:	81 e0       	ldi	r24, 0x01	; 1
    a33c:	80 93 4a 4b 	sts	0x4B4A, r24
	        while(!okToGetRemainingSpace);
    a340:	80 91 4a 4b 	lds	r24, 0x4B4A
    a344:	88 23       	and	r24, r24
    a346:	e1 f3       	breq	.-8      	; 0xa340 <Config_Wifi+0x45e>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a348:	e0 e2       	ldi	r30, 0x20	; 32
    a34a:	f6 e0       	ldi	r31, 0x06	; 6
    a34c:	80 e4       	ldi	r24, 0x40	; 64
    a34e:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a350:	80 e8       	ldi	r24, 0x80	; 128
    a352:	86 83       	std	Z+6, r24	; 0x06
    a354:	80 e1       	ldi	r24, 0x10	; 16
    a356:	97 e2       	ldi	r25, 0x27	; 39
    a358:	20 e7       	ldi	r18, 0x70	; 112
    a35a:	31 e0       	ldi	r19, 0x01	; 1
    a35c:	f9 01       	movw	r30, r18
    a35e:	31 97       	sbiw	r30, 0x01	; 1
    a360:	f1 f7       	brne	.-4      	; 0xa35e <Config_Wifi+0x47c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a364:	d9 f7       	brne	.-10     	; 0xa35c <Config_Wifi+0x47a>


			Leds_Set(wifi_Green);
			Leds_Clear(wifi_Red);
			_delay_ms(1000);
            Wifi_SendCommand("set uart instant 460800","AOK","AOK",5);
    a366:	83 ef       	ldi	r24, 0xF3	; 243
    a368:	98 e2       	ldi	r25, 0x28	; 40
    a36a:	60 e2       	ldi	r22, 0x20	; 32
    a36c:	77 e2       	ldi	r23, 0x27	; 39
    a36e:	ab 01       	movw	r20, r22
    a370:	25 e0       	ldi	r18, 0x05	; 5
    a372:	30 e0       	ldi	r19, 0x00	; 0
    a374:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
            Wifi_Init(460800);
    a378:	60 e0       	ldi	r22, 0x00	; 0
    a37a:	78 e0       	ldi	r23, 0x08	; 8
    a37c:	87 e0       	ldi	r24, 0x07	; 7
    a37e:	90 e0       	ldi	r25, 0x00	; 0
    a380:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Wifi_Init>
    a384:	80 e3       	ldi	r24, 0x30	; 48
    a386:	95 e7       	ldi	r25, 0x75	; 117
    a388:	20 e7       	ldi	r18, 0x70	; 112
    a38a:	31 e0       	ldi	r19, 0x01	; 1
    a38c:	f9 01       	movw	r30, r18
    a38e:	31 97       	sbiw	r30, 0x01	; 1
    a390:	f1 f7       	brne	.-4      	; 0xa38e <Config_Wifi+0x4ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a392:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a394:	d9 f7       	brne	.-10     	; 0xa38c <Config_Wifi+0x4aa>
    a396:	0d c0       	rjmp	.+26     	; 0xa3b2 <Config_Wifi+0x4d0>
    a398:	80 e1       	ldi	r24, 0x10	; 16
    a39a:	97 e2       	ldi	r25, 0x27	; 39
    a39c:	fe 01       	movw	r30, r28
    a39e:	31 97       	sbiw	r30, 0x01	; 1
    a3a0:	f1 f7       	brne	.-4      	; 0xa39e <Config_Wifi+0x4bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3a4:	d9 f7       	brne	.-10     	; 0xa39c <Config_Wifi+0x4ba>
            //Wifi_SendCommand("set uart instant 115200","AOK","AOK",5);
            //Wifi_Init(115200);
	        _delay_ms(3000);
			while(!Wifi_EnterCMDMode(500)){
			    _delay_ms(1000);
			    Debug_SendString("Retrying CMD Mode",true);
    a3a6:	8b e0       	ldi	r24, 0x0B	; 11
    a3a8:	99 e2       	ldi	r25, 0x29	; 41
    a3aa:	61 e0       	ldi	r22, 0x01	; 1
    a3ac:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    a3b0:	02 c0       	rjmp	.+4      	; 0xa3b6 <Config_Wifi+0x4d4>
    a3b2:	c0 e7       	ldi	r28, 0x70	; 112
    a3b4:	d1 e0       	ldi	r29, 0x01	; 1
            Wifi_SendCommand("set uart instant 460800","AOK","AOK",5);
            Wifi_Init(460800);
            //Wifi_SendCommand("set uart instant 115200","AOK","AOK",5);
            //Wifi_Init(115200);
	        _delay_ms(3000);
			while(!Wifi_EnterCMDMode(500)){
    a3b6:	84 ef       	ldi	r24, 0xF4	; 244
    a3b8:	91 e0       	ldi	r25, 0x01	; 1
    a3ba:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <Wifi_EnterCMDMode>
    a3be:	88 23       	and	r24, r24
    a3c0:	59 f3       	breq	.-42     	; 0xa398 <Config_Wifi+0x4b6>
    a3c2:	19 c0       	rjmp	.+50     	; 0xa3f6 <Config_Wifi+0x514>
			    _delay_ms(1000);
			    Debug_SendString("Retrying CMD Mode",true);
			}
		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    a3c4:	8d e1       	ldi	r24, 0x1D	; 29
    a3c6:	99 e2       	ldi	r25, 0x29	; 41
    a3c8:	61 2f       	mov	r22, r17
    a3ca:	40 e0       	ldi	r20, 0x00	; 0
    a3cc:	20 e7       	ldi	r18, 0x70	; 112
    a3ce:	31 e3       	ldi	r19, 0x31	; 49
    a3d0:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a3d4:	e0 e2       	ldi	r30, 0x20	; 32
    a3d6:	f6 e0       	ldi	r31, 0x06	; 6
    a3d8:	80 e8       	ldi	r24, 0x80	; 128
    a3da:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    a3dc:	80 e4       	ldi	r24, 0x40	; 64
    a3de:	86 83       	std	Z+6, r24	; 0x06
			Leds_Set(wifi_Red);
			Leds_Clear(wifi_Green);
			connected = false;
    a3e0:	10 92 ea 33 	sts	0x33EA, r1
    a3e4:	88 e8       	ldi	r24, 0x88	; 136
    a3e6:	93 e1       	ldi	r25, 0x13	; 19
    a3e8:	20 e7       	ldi	r18, 0x70	; 112
    a3ea:	31 e0       	ldi	r19, 0x01	; 1
    a3ec:	f9 01       	movw	r30, r18
    a3ee:	31 97       	sbiw	r30, 0x01	; 1
    a3f0:	f1 f7       	brne	.-4      	; 0xa3ee <Config_Wifi+0x50c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3f4:	d9 f7       	brne	.-10     	; 0xa3ec <Config_Wifi+0x50a>
			_delay_ms(500);

		}

		display_writeBufferToScreen();
    a3f6:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a3fa:	80 e1       	ldi	r24, 0x10	; 16
    a3fc:	97 e2       	ldi	r25, 0x27	; 39
    a3fe:	20 e7       	ldi	r18, 0x70	; 112
    a400:	31 e0       	ldi	r19, 0x01	; 1
    a402:	f9 01       	movw	r30, r18
    a404:	31 97       	sbiw	r30, 0x01	; 1
    a406:	f1 f7       	brne	.-4      	; 0xa404 <Config_Wifi+0x522>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a408:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a40a:	d9 f7       	brne	.-10     	; 0xa402 <Config_Wifi+0x520>
    a40c:	0d c0       	rjmp	.+26     	; 0xa428 <Config_Wifi+0x546>
    a40e:	80 e1       	ldi	r24, 0x10	; 16
    a410:	97 e2       	ldi	r25, 0x27	; 39
    a412:	fe 01       	movw	r30, r28
    a414:	31 97       	sbiw	r30, 0x01	; 1
    a416:	f1 f7       	brne	.-4      	; 0xa414 <Config_Wifi+0x532>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a418:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a41a:	d9 f7       	brne	.-10     	; 0xa412 <Config_Wifi+0x530>
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
		   _delay_ms(1000);
		    Debug_SendString("Retrying EXIT CMD Mode",true);
    a41c:	8f e2       	ldi	r24, 0x2F	; 47
    a41e:	99 e2       	ldi	r25, 0x29	; 41
    a420:	61 e0       	ldi	r22, 0x01	; 1
    a422:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    a426:	02 c0       	rjmp	.+4      	; 0xa42c <Config_Wifi+0x54a>
    a428:	c0 e7       	ldi	r28, 0x70	; 112
    a42a:	d1 e0       	ldi	r29, 0x01	; 1

		}

		display_writeBufferToScreen();
        _delay_ms(1000);
		while(!Wifi_ExitCMDMode(1000)){
    a42c:	88 ee       	ldi	r24, 0xE8	; 232
    a42e:	93 e0       	ldi	r25, 0x03	; 3
    a430:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <Wifi_ExitCMDMode>
    a434:	88 23       	and	r24, r24
    a436:	59 f3       	breq	.-42     	; 0xa40e <Config_Wifi+0x52c>
    a438:	0e c0       	rjmp	.+28     	; 0xa456 <Config_Wifi+0x574>
		    Debug_SendString("Retrying EXIT CMD Mode",true);
		}


	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    a43a:	8d e1       	ldi	r24, 0x1D	; 29
    a43c:	99 e2       	ldi	r25, 0x29	; 41
    a43e:	61 2f       	mov	r22, r17
    a440:	40 e0       	ldi	r20, 0x00	; 0
    a442:	20 e7       	ldi	r18, 0x70	; 112
    a444:	31 e3       	ldi	r19, 0x31	; 49
    a446:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
		display_writeBufferToScreen();
    a44a:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a44e:	80 e8       	ldi	r24, 0x80	; 128
    a450:	e0 e2       	ldi	r30, 0x20	; 32
    a452:	f6 e0       	ldi	r31, 0x06	; 6
    a454:	85 83       	std	Z+5, r24	; 0x05
		Leds_Set(wifi_Red);
	}


}
    a456:	df 91       	pop	r29
    a458:	cf 91       	pop	r28
    a45a:	1f 91       	pop	r17
    a45c:	08 95       	ret

0000a45e <main>:


// ********************************** Main Program *********************************


int main(void){
    a45e:	3f 92       	push	r3
    a460:	4f 92       	push	r4
    a462:	5f 92       	push	r5
    a464:	6f 92       	push	r6
    a466:	7f 92       	push	r7
    a468:	8f 92       	push	r8
    a46a:	9f 92       	push	r9
    a46c:	af 92       	push	r10
    a46e:	bf 92       	push	r11
    a470:	cf 92       	push	r12
    a472:	df 92       	push	r13
    a474:	ef 92       	push	r14
    a476:	ff 92       	push	r15
    a478:	0f 93       	push	r16
    a47a:	1f 93       	push	r17
    a47c:	df 93       	push	r29
    a47e:	cf 93       	push	r28
    a480:	0f 92       	push	r0
    a482:	cd b7       	in	r28, 0x3d	; 61
    a484:	de b7       	in	r29, 0x3e	; 62
    a486:	80 e0       	ldi	r24, 0x00	; 0
    a488:	98 e4       	ldi	r25, 0x48	; 72
    a48a:	01 97       	sbiw	r24, 0x01	; 1
    a48c:	f1 f7       	brne	.-4      	; 0xa48a <main+0x2c>
	_delay_ms(5);


	Clock_Init();
    a48e:	0e 94 e7 38 	call	0x71ce	; 0x71ce <Clock_Init>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    a492:	8f b7       	in	r24, 0x3f	; 63
    a494:	89 83       	std	Y+1, r24	; 0x01
    cli();
    a496:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    a498:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    a49a:	21 e0       	ldi	r18, 0x01	; 1
    a49c:	86 e9       	ldi	r24, 0x96	; 150
    a49e:	90 e0       	ldi	r25, 0x00	; 0
    a4a0:	fc 01       	movw	r30, r24
    a4a2:	08 ed       	ldi	r16, 0xD8	; 216
    a4a4:	04 bf       	out	0x34, r16	; 52
    a4a6:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    a4a8:	89 81       	ldd	r24, Y+1	; 0x01
    a4aa:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();
	display_init();
    a4ac:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <display_init>

	Time_Init();
    a4b0:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Time_Init>
	Sensors_Init();
    a4b4:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    a4b8:	80 91 21 06 	lds	r24, 0x0621
    a4bc:	83 6f       	ori	r24, 0xF3	; 243
    a4be:	e0 e2       	ldi	r30, 0x20	; 32
    a4c0:	f6 e0       	ldi	r31, 0x06	; 6
    a4c2:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    a4c4:	0e 94 ae 02 	call	0x55c	; 0x55c <Dpad_Init>
	Debug_Init();
    a4c8:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	Rs232_Init();
    a4cc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Rs232_Init>

	Light_Init(LightAddress);
    a4d0:	82 e7       	ldi	r24, 0x72	; 114
    a4d2:	0e 94 2a 32 	call	0x6454	; 0x6454 <Light_Init>


	Display_BackgroundWriter_Init();
    a4d6:	0e 94 50 39 	call	0x72a0	; 0x72a0 <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    a4da:	0e 94 5f 39 	call	0x72be	; 0x72be <SD_BackroundWriter_Init>
	DMA_Init();
    a4de:	0e 94 2c 39 	call	0x7258	; 0x7258 <DMA_Init>


	Debug_SendString("booting up...",true);
    a4e2:	86 e4       	ldi	r24, 0x46	; 70
    a4e4:	99 e2       	ldi	r25, 0x29	; 41
    a4e6:	61 e0       	ldi	r22, 0x01	; 1
    a4e8:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

	display_putString("   BaseStation   ",1,0,System5x7);
    a4ec:	84 e5       	ldi	r24, 0x54	; 84
    a4ee:	99 e2       	ldi	r25, 0x29	; 41
    a4f0:	61 e0       	ldi	r22, 0x01	; 1
    a4f2:	40 e0       	ldi	r20, 0x00	; 0
    a4f4:	20 e7       	ldi	r18, 0x70	; 112
    a4f6:	31 e3       	ldi	r19, 0x31	; 49
    a4f8:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	strcat(temp,"  Hardware: v");
    a4fc:	8a e6       	ldi	r24, 0x6A	; 106
    a4fe:	9a e4       	ldi	r25, 0x4A	; 74
    a500:	66 e6       	ldi	r22, 0x66	; 102
    a502:	79 e2       	ldi	r23, 0x29	; 41
    a504:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	strcat(temp,HardwareVersion);
    a508:	8a e6       	ldi	r24, 0x6A	; 106
    a50a:	9a e4       	ldi	r25, 0x4A	; 74
    a50c:	61 e8       	ldi	r22, 0x81	; 129
    a50e:	73 e2       	ldi	r23, 0x23	; 35
    a510:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	display_putString(temp,3,0,System5x7);
    a514:	8a e6       	ldi	r24, 0x6A	; 106
    a516:	9a e4       	ldi	r25, 0x4A	; 74
    a518:	63 e0       	ldi	r22, 0x03	; 3
    a51a:	40 e0       	ldi	r20, 0x00	; 0
    a51c:	20 e7       	ldi	r18, 0x70	; 112
    a51e:	31 e3       	ldi	r19, 0x31	; 49
    a520:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	temp[0] = 0;
    a524:	10 92 6a 4a 	sts	0x4A6A, r1
	strcat(temp," Firmware: v");
    a528:	8a e6       	ldi	r24, 0x6A	; 106
    a52a:	9a e4       	ldi	r25, 0x4A	; 74
    a52c:	64 e7       	ldi	r22, 0x74	; 116
    a52e:	79 e2       	ldi	r23, 0x29	; 41
    a530:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	strcat(temp,FirmwareVersion);
    a534:	8a e6       	ldi	r24, 0x6A	; 106
    a536:	9a e4       	ldi	r25, 0x4A	; 74
    a538:	6b e6       	ldi	r22, 0x6B	; 107
    a53a:	73 e2       	ldi	r23, 0x23	; 35
    a53c:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
	display_putString(temp,5,0,System5x7);
    a540:	8a e6       	ldi	r24, 0x6A	; 106
    a542:	9a e4       	ldi	r25, 0x4A	; 74
    a544:	65 e0       	ldi	r22, 0x05	; 5
    a546:	40 e0       	ldi	r20, 0x00	; 0
    a548:	20 e7       	ldi	r18, 0x70	; 112
    a54a:	31 e3       	ldi	r19, 0x31	; 49
    a54c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	display_writeBufferToScreen();
    a550:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
	if(demoMode){
    a554:	80 91 69 34 	lds	r24, 0x3469
    a558:	88 23       	and	r24, r24
    a55a:	41 f0       	breq	.+16     	; 0xa56c <main+0x10e>
		display_putString("    Demo Mode    ",7,0,System5x7);
    a55c:	81 e8       	ldi	r24, 0x81	; 129
    a55e:	99 e2       	ldi	r25, 0x29	; 41
    a560:	67 e0       	ldi	r22, 0x07	; 7
    a562:	40 e0       	ldi	r20, 0x00	; 0
    a564:	20 e7       	ldi	r18, 0x70	; 112
    a566:	31 e3       	ldi	r19, 0x31	; 49
    a568:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <display_putString>
	}
	display_writeBufferToScreen();
    a56c:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>
    a570:	80 e2       	ldi	r24, 0x20	; 32
    a572:	9e e4       	ldi	r25, 0x4E	; 78
    a574:	20 e7       	ldi	r18, 0x70	; 112
    a576:	31 e0       	ldi	r19, 0x01	; 1
    a578:	f9 01       	movw	r30, r18
    a57a:	31 97       	sbiw	r30, 0x01	; 1
    a57c:	f1 f7       	brne	.-4      	; 0xa57a <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a57e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a580:	d9 f7       	brne	.-10     	; 0xa578 <main+0x11a>
	_delay_ms(2000);


    SD_Init();
    a582:	0e 94 46 2b 	call	0x568c	; 0x568c <SD_Init>
		
}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    a586:	80 91 a2 00 	lds	r24, 0x00A2
    a58a:	87 60       	ori	r24, 0x07	; 7
    a58c:	e0 ea       	ldi	r30, 0xA0	; 160
    a58e:	f0 e0       	ldi	r31, 0x00	; 0
    a590:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    a592:	78 94       	sei
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    a594:	80 e2       	ldi	r24, 0x20	; 32
    a596:	e8 2e       	mov	r14, r24
    a598:	86 e0       	ldi	r24, 0x06	; 6
    a59a:	f8 2e       	mov	r15, r24
    a59c:	02 e0       	ldi	r16, 0x02	; 2
    a59e:	d0 2e       	mov	r13, r16
    a5a0:	00 e7       	ldi	r16, 0x70	; 112
    a5a2:	11 e0       	ldi	r17, 0x01	; 1
    a5a4:	05 c0       	rjmp	.+10     	; 0xa5b0 <main+0x152>
    a5a6:	f8 01       	movw	r30, r16
    a5a8:	31 97       	sbiw	r30, 0x01	; 1
    a5aa:	f1 f7       	brne	.-4      	; 0xa5a8 <main+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5ae:	d9 f7       	brne	.-10     	; 0xa5a6 <main+0x148>
	Debug_SendString("Closing File",true);
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    a5b0:	80 91 a8 06 	lds	r24, 0x06A8
    a5b4:	80 ff       	sbrs	r24, 0
    a5b6:	d9 c5       	rjmp	.+2994   	; 0xb16a <main+0xd0c>

    SD_Init();
    Interrupt_Init();

	while(!SD_Inserted()){
		Debug_SendString("SD?", true);
    a5b8:	83 e9       	ldi	r24, 0x93	; 147
    a5ba:	99 e2       	ldi	r25, 0x29	; 41
    a5bc:	61 e0       	ldi	r22, 0x01	; 1
    a5be:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    a5c2:	d7 01       	movw	r26, r14
    a5c4:	17 96       	adiw	r26, 0x07	; 7
    a5c6:	dc 92       	st	X, r13
    a5c8:	88 e8       	ldi	r24, 0x88	; 136
    a5ca:	93 e1       	ldi	r25, 0x13	; 19
    a5cc:	ec cf       	rjmp	.-40     	; 0xa5a6 <main+0x148>
    a5ce:	ca 01       	movw	r24, r20
    a5d0:	01 97       	sbiw	r24, 0x01	; 1
    a5d2:	f1 f7       	brne	.-4      	; 0xa5d0 <main+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5d4:	21 50       	subi	r18, 0x01	; 1
    a5d6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5d8:	d1 f7       	brne	.-12     	; 0xa5ce <main+0x170>
	}
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);

	Read_config_file();
    a5da:	0e 94 21 45 	call	0x8a42	; 0x8a42 <Read_config_file>


    Wifi_Init(9600);
    a5de:	60 e8       	ldi	r22, 0x80	; 128
    a5e0:	75 e2       	ldi	r23, 0x25	; 37
    a5e2:	80 e0       	ldi	r24, 0x00	; 0
    a5e4:	90 e0       	ldi	r25, 0x00	; 0
    a5e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Wifi_Init>
    needToChangeBaud = true;
    a5ea:	81 e0       	ldi	r24, 0x01	; 1
    a5ec:	80 93 22 4b 	sts	0x4B22, r24
    a5f0:	00 e7       	ldi	r16, 0x70	; 112
    a5f2:	11 e0       	ldi	r17, 0x01	; 1
    a5f4:	09 c0       	rjmp	.+18     	; 0xa608 <main+0x1aa>
	while(!connected && !demoMode){
		Config_Wifi();
    a5f6:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <Config_Wifi>
    a5fa:	88 e8       	ldi	r24, 0x88	; 136
    a5fc:	93 e1       	ldi	r25, 0x13	; 19
    a5fe:	f8 01       	movw	r30, r16
    a600:	31 97       	sbiw	r30, 0x01	; 1
    a602:	f1 f7       	brne	.-4      	; 0xa600 <main+0x1a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a604:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a606:	d9 f7       	brne	.-10     	; 0xa5fe <main+0x1a0>
	Read_config_file();


    Wifi_Init(9600);
    needToChangeBaud = true;
	while(!connected && !demoMode){
    a608:	80 91 ea 33 	lds	r24, 0x33EA
    a60c:	88 23       	and	r24, r24
    a60e:	21 f4       	brne	.+8      	; 0xa618 <main+0x1ba>
    a610:	80 91 69 34 	lds	r24, 0x3469
    a614:	88 23       	and	r24, r24
    a616:	79 f3       	breq	.-34     	; 0xa5f6 <main+0x198>
		Config_Wifi();
		_delay_ms(500);
	}
	
	if(demoMode){
    a618:	80 91 69 34 	lds	r24, 0x3469
    a61c:	88 23       	and	r24, r24
    a61e:	21 f0       	breq	.+8      	; 0xa628 <main+0x1ca>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    a620:	80 e4       	ldi	r24, 0x40	; 64
    a622:	e0 e2       	ldi	r30, 0x20	; 32
    a624:	f6 e0       	ldi	r31, 0x06	; 6
    a626:	85 83       	std	Z+5, r24	; 0x05
    a628:	88 e8       	ldi	r24, 0x88	; 136
    a62a:	93 e1       	ldi	r25, 0x13	; 19
    a62c:	20 e7       	ldi	r18, 0x70	; 112
    a62e:	31 e0       	ldi	r19, 0x01	; 1
    a630:	f9 01       	movw	r30, r18
    a632:	31 97       	sbiw	r30, 0x01	; 1
    a634:	f1 f7       	brne	.-4      	; 0xa632 <main+0x1d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a636:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a638:	d9 f7       	brne	.-10     	; 0xa630 <main+0x1d2>


	_delay_ms(500);

	
	display_clearBuffer();
    a63a:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <display_clearBuffer>
	display_writeBufferToScreen();
    a63e:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <display_writeBufferToScreen>




	okToOpenLogFile = true;
    a642:	81 e0       	ldi	r24, 0x01	; 1
    a644:	80 93 32 34 	sts	0x3432, r24
	while(!recording);
    a648:	80 91 06 34 	lds	r24, 0x3406
    a64c:	88 23       	and	r24, r24
    a64e:	e1 f3       	breq	.-8      	; 0xa648 <main+0x1ea>

	okToDisplayGUI = true;
    a650:	81 e0       	ldi	r24, 0x01	; 1
    a652:	80 93 35 34 	sts	0x3435, r24
    a656:	88 ee       	ldi	r24, 0xE8	; 232
    a658:	93 e0       	ldi	r25, 0x03	; 3
    a65a:	20 e7       	ldi	r18, 0x70	; 112
    a65c:	31 e0       	ldi	r19, 0x01	; 1
    a65e:	f9 01       	movw	r30, r18
    a660:	31 97       	sbiw	r30, 0x01	; 1
    a662:	f1 f7       	brne	.-4      	; 0xa660 <main+0x202>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a664:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a666:	d9 f7       	brne	.-10     	; 0xa65e <main+0x200>

	_delay_ms(100);

	okToReopenDirectory = true;
    a668:	81 e0       	ldi	r24, 0x01	; 1
    a66a:	80 93 37 34 	sts	0x3437, r24
	okToFindFileToUpload = true;
    a66e:	80 93 36 34 	sts	0x3436, r24

    while(demoMode);
    a672:	80 91 69 34 	lds	r24, 0x3469
    a676:	88 23       	and	r24, r24
    a678:	09 f0       	breq	.+2      	; 0xa67c <main+0x21e>
    a67a:	82 c5       	rjmp	.+2820   	; 0xb180 <main+0xd22>
    a67c:	10 e7       	ldi	r17, 0x70	; 112
    a67e:	61 2e       	mov	r6, r17
    a680:	11 e0       	ldi	r17, 0x01	; 1
    a682:	71 2e       	mov	r7, r17
			}
			Debug_SendString(fileToUpload, true);
            okToOpenFileToUpload = true;
            while(!uploadFileOpened);
            Debug_SendString("File Opened!", true);
            sprintf(temp2,"File Size: %lu",uploadFileSize);
    a684:	be e3       	ldi	r27, 0x3E	; 62
    a686:	4b 2e       	mov	r4, r27
    a688:	bd e3       	ldi	r27, 0x3D	; 61
    a68a:	5b 2e       	mov	r5, r27
    while(demoMode);


	while(true){

	    if(ssRefreshCounter > 5000){
    a68c:	80 91 2c 34 	lds	r24, 0x342C
    a690:	90 91 2d 34 	lds	r25, 0x342D
    a694:	89 58       	subi	r24, 0x89	; 137
    a696:	93 41       	sbci	r25, 0x13	; 19
    a698:	08 f4       	brcc	.+2      	; 0xa69c <main+0x23e>
    a69a:	80 c0       	rjmp	.+256    	; 0xa79c <main+0x33e>
	       okToGetRemainingSpace = true;
    a69c:	81 e0       	ldi	r24, 0x01	; 1
    a69e:	80 93 4a 4b 	sts	0x4B4A, r24
	       while(!okToGetRemainingSpace);
    a6a2:	80 91 4a 4b 	lds	r24, 0x4B4A
    a6a6:	88 23       	and	r24, r24
    a6a8:	e1 f3       	breq	.-8      	; 0xa6a2 <main+0x244>

		   Wifi_EnterCMDMode(1000);
    a6aa:	88 ee       	ldi	r24, 0xE8	; 232
    a6ac:	93 e0       	ldi	r25, 0x03	; 3
    a6ae:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <Wifi_EnterCMDMode>
		   signalStrength = Wifi_GetSignalStrength(1000);
    a6b2:	88 ee       	ldi	r24, 0xE8	; 232
    a6b4:	93 e0       	ldi	r25, 0x03	; 3
    a6b6:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <Wifi_GetSignalStrength>
    a6ba:	80 93 2e 34 	sts	0x342E, r24
		   if(Wifi_Connected(500)){
    a6be:	84 ef       	ldi	r24, 0xF4	; 244
    a6c0:	91 e0       	ldi	r25, 0x01	; 1
    a6c2:	0e 94 94 02 	call	0x528	; 0x528 <Wifi_Connected>
    a6c6:	88 23       	and	r24, r24
    a6c8:	09 f4       	brne	.+2      	; 0xa6cc <main+0x26e>
    a6ca:	60 c0       	rjmp	.+192    	; 0xa78c <main+0x32e>
    a6cc:	88 e8       	ldi	r24, 0x88	; 136
    a6ce:	93 e1       	ldi	r25, 0x13	; 19
    a6d0:	f3 01       	movw	r30, r6
    a6d2:	31 97       	sbiw	r30, 0x01	; 1
    a6d4:	f1 f7       	brne	.-4      	; 0xa6d2 <main+0x274>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a6d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a6d8:	d9 f7       	brne	.-10     	; 0xa6d0 <main+0x272>
		        _delay_ms(500);
	            if(Wifi_GetTime(500)){
    a6da:	84 ef       	ldi	r24, 0xF4	; 244
    a6dc:	91 e0       	ldi	r25, 0x01	; 1
    a6de:	0e 94 5c 4e 	call	0x9cb8	; 0x9cb8 <Wifi_GetTime>
    a6e2:	88 23       	and	r24, r24
    a6e4:	09 f4       	brne	.+2      	; 0xa6e8 <main+0x28a>
    a6e6:	4a c0       	rjmp	.+148    	; 0xa77c <main+0x31e>
	                if((time_secs - UNIX_time < 100)||(UNIX_time - time_secs < 100)){
    a6e8:	80 91 e2 33 	lds	r24, 0x33E2
    a6ec:	90 91 e3 33 	lds	r25, 0x33E3
    a6f0:	a0 91 e4 33 	lds	r26, 0x33E4
    a6f4:	b0 91 e5 33 	lds	r27, 0x33E5
    a6f8:	20 91 01 34 	lds	r18, 0x3401
    a6fc:	30 91 02 34 	lds	r19, 0x3402
    a700:	40 91 03 34 	lds	r20, 0x3403
    a704:	50 91 04 34 	lds	r21, 0x3404
    a708:	82 1b       	sub	r24, r18
    a70a:	93 0b       	sbc	r25, r19
    a70c:	a4 0b       	sbc	r26, r20
    a70e:	b5 0b       	sbc	r27, r21
    a710:	84 36       	cpi	r24, 0x64	; 100
    a712:	91 05       	cpc	r25, r1
    a714:	a1 05       	cpc	r26, r1
    a716:	b1 05       	cpc	r27, r1
    a718:	c8 f0       	brcs	.+50     	; 0xa74c <main+0x2ee>
    a71a:	80 91 01 34 	lds	r24, 0x3401
    a71e:	90 91 02 34 	lds	r25, 0x3402
    a722:	a0 91 03 34 	lds	r26, 0x3403
    a726:	b0 91 04 34 	lds	r27, 0x3404
    a72a:	20 91 e2 33 	lds	r18, 0x33E2
    a72e:	30 91 e3 33 	lds	r19, 0x33E3
    a732:	40 91 e4 33 	lds	r20, 0x33E4
    a736:	50 91 e5 33 	lds	r21, 0x33E5
    a73a:	82 1b       	sub	r24, r18
    a73c:	93 0b       	sbc	r25, r19
    a73e:	a4 0b       	sbc	r26, r20
    a740:	b5 0b       	sbc	r27, r21
    a742:	84 36       	cpi	r24, 0x64	; 100
    a744:	91 05       	cpc	r25, r1
    a746:	a1 05       	cpc	r26, r1
    a748:	b1 05       	cpc	r27, r1
    a74a:	c0 f4       	brcc	.+48     	; 0xa77c <main+0x31e>
		                Time_Set(time_secs);
    a74c:	80 91 e2 33 	lds	r24, 0x33E2
    a750:	90 91 e3 33 	lds	r25, 0x33E3
    a754:	a0 91 e4 33 	lds	r26, 0x33E4
    a758:	b0 91 e5 33 	lds	r27, 0x33E5
	
	
}

void Time_Set(uint32_t time){
  cli();
    a75c:	f8 94       	cli
  UNIX_time = time;
    a75e:	80 93 01 34 	sts	0x3401, r24
    a762:	90 93 02 34 	sts	0x3402, r25
    a766:	a0 93 03 34 	sts	0x3403, r26
    a76a:	b0 93 04 34 	sts	0x3404, r27
  sei();
    a76e:	78 94       	sei
		                timeIsValid = true;
    a770:	81 e0       	ldi	r24, 0x01	; 1
    a772:	80 93 43 34 	sts	0x3443, r24
    a776:	88 e8       	ldi	r24, 0x88	; 136
    a778:	93 e1       	ldi	r25, 0x13	; 19
    a77a:	03 c0       	rjmp	.+6      	; 0xa782 <main+0x324>
		            } else {
		                timeIsValid = false;
		            }
		        } else {
		            timeIsValid = false;
    a77c:	10 92 43 34 	sts	0x3443, r1
    a780:	fa cf       	rjmp	.-12     	; 0xa776 <main+0x318>
    a782:	f3 01       	movw	r30, r6
    a784:	31 97       	sbiw	r30, 0x01	; 1
    a786:	f1 f7       	brne	.-4      	; 0xa784 <main+0x326>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a788:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a78a:	d9 f7       	brne	.-10     	; 0xa782 <main+0x324>
		        }
		        _delay_ms(500);
		    }
		    Wifi_ExitCMDMode(500);
    a78c:	84 ef       	ldi	r24, 0xF4	; 244
    a78e:	91 e0       	ldi	r25, 0x01	; 1
    a790:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <Wifi_ExitCMDMode>

		    ssRefreshCounter = 0;
    a794:	10 92 2c 34 	sts	0x342C, r1
    a798:	10 92 2d 34 	sts	0x342D, r1
    a79c:	80 e5       	ldi	r24, 0x50	; 80
    a79e:	93 ec       	ldi	r25, 0xC3	; 195
    a7a0:	f3 01       	movw	r30, r6
    a7a2:	31 97       	sbiw	r30, 0x01	; 1
    a7a4:	f1 f7       	brne	.-4      	; 0xa7a2 <main+0x344>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7a8:	d9 f7       	brne	.-10     	; 0xa7a0 <main+0x342>
	    }



        _delay_ms(5000);
        if(okToUpload && Wifi_Connected(500)){
    a7aa:	80 91 3c 34 	lds	r24, 0x343C
    a7ae:	88 23       	and	r24, r24
    a7b0:	09 f4       	brne	.+2      	; 0xa7b4 <main+0x356>
    a7b2:	6c cf       	rjmp	.-296    	; 0xa68c <main+0x22e>
    a7b4:	84 ef       	ldi	r24, 0xF4	; 244
    a7b6:	91 e0       	ldi	r25, 0x01	; 1
    a7b8:	0e 94 94 02 	call	0x528	; 0x528 <Wifi_Connected>
    a7bc:	88 23       	and	r24, r24
    a7be:	09 f4       	brne	.+2      	; 0xa7c2 <main+0x364>
    a7c0:	65 cf       	rjmp	.-310    	; 0xa68c <main+0x22e>

            uploading = true;
    a7c2:	81 e0       	ldi	r24, 0x01	; 1
    a7c4:	80 93 3d 34 	sts	0x343D, r24
			Debug_SendString("",true);
    a7c8:	87 e9       	ldi	r24, 0x97	; 151
    a7ca:	99 e2       	ldi	r25, 0x29	; 41
    a7cc:	61 e0       	ldi	r22, 0x01	; 1
    a7ce:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
            Debug_SendString("_____________________________________________", true);
    a7d2:	88 e9       	ldi	r24, 0x98	; 152
    a7d4:	99 e2       	ldi	r25, 0x29	; 41
    a7d6:	61 e0       	ldi	r22, 0x01	; 1
    a7d8:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
			Debug_SendString("Uploading File: ", false);
    a7dc:	86 ec       	ldi	r24, 0xC6	; 198
    a7de:	99 e2       	ldi	r25, 0x29	; 41
    a7e0:	60 e0       	ldi	r22, 0x00	; 0
    a7e2:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
			if(fileToUpload[0] != '/'){
    a7e6:	80 91 c1 3c 	lds	r24, 0x3CC1
    a7ea:	8f 32       	cpi	r24, 0x2F	; 47
    a7ec:	91 f0       	breq	.+36     	; 0xa812 <main+0x3b4>
			    strcpy(newFileName, "/");
    a7ee:	87 e2       	ldi	r24, 0x27	; 39
    a7f0:	97 e5       	ldi	r25, 0x57	; 87
    a7f2:	62 e6       	ldi	r22, 0x62	; 98
    a7f4:	75 e2       	ldi	r23, 0x25	; 37
    a7f6:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
			    strcat(newFileName, fileToUpload);
    a7fa:	87 e2       	ldi	r24, 0x27	; 39
    a7fc:	97 e5       	ldi	r25, 0x57	; 87
    a7fe:	61 ec       	ldi	r22, 0xC1	; 193
    a800:	7c e3       	ldi	r23, 0x3C	; 60
    a802:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>
			    strcpy(fileToUpload, newFileName);
    a806:	81 ec       	ldi	r24, 0xC1	; 193
    a808:	9c e3       	ldi	r25, 0x3C	; 60
    a80a:	67 e2       	ldi	r22, 0x27	; 39
    a80c:	77 e5       	ldi	r23, 0x57	; 87
    a80e:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
			}
			Debug_SendString(fileToUpload, true);
    a812:	81 ec       	ldi	r24, 0xC1	; 193
    a814:	9c e3       	ldi	r25, 0x3C	; 60
    a816:	61 e0       	ldi	r22, 0x01	; 1
    a818:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
            okToOpenFileToUpload = true;
    a81c:	81 e0       	ldi	r24, 0x01	; 1
    a81e:	80 93 3f 34 	sts	0x343F, r24
            while(!uploadFileOpened);
    a822:	80 91 6e 31 	lds	r24, 0x316E
    a826:	88 23       	and	r24, r24
    a828:	e1 f3       	breq	.-8      	; 0xa822 <main+0x3c4>
            Debug_SendString("File Opened!", true);
    a82a:	87 ed       	ldi	r24, 0xD7	; 215
    a82c:	99 e2       	ldi	r25, 0x29	; 41
    a82e:	61 e0       	ldi	r22, 0x01	; 1
    a830:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
            sprintf(temp2,"File Size: %lu",uploadFileSize);
    a834:	40 91 46 34 	lds	r20, 0x3446
    a838:	50 91 47 34 	lds	r21, 0x3447
    a83c:	60 91 48 34 	lds	r22, 0x3448
    a840:	70 91 49 34 	lds	r23, 0x3449
    a844:	ed b7       	in	r30, 0x3d	; 61
    a846:	fe b7       	in	r31, 0x3e	; 62
    a848:	38 97       	sbiw	r30, 0x08	; 8
    a84a:	ed bf       	out	0x3d, r30	; 61
    a84c:	fe bf       	out	0x3e, r31	; 62
    a84e:	31 96       	adiw	r30, 0x01	; 1
    a850:	ad b7       	in	r26, 0x3d	; 61
    a852:	be b7       	in	r27, 0x3e	; 62
    a854:	11 96       	adiw	r26, 0x01	; 1
    a856:	4d 92       	st	X+, r4
    a858:	5c 92       	st	X, r5
    a85a:	12 97       	sbiw	r26, 0x02	; 2
    a85c:	24 ee       	ldi	r18, 0xE4	; 228
    a85e:	39 e2       	ldi	r19, 0x29	; 41
    a860:	22 83       	std	Z+2, r18	; 0x02
    a862:	33 83       	std	Z+3, r19	; 0x03
    a864:	44 83       	std	Z+4, r20	; 0x04
    a866:	55 83       	std	Z+5, r21	; 0x05
    a868:	66 83       	std	Z+6, r22	; 0x06
    a86a:	77 83       	std	Z+7, r23	; 0x07
    a86c:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
            Debug_SendString(temp2, true);
    a870:	6d b7       	in	r22, 0x3d	; 61
    a872:	7e b7       	in	r23, 0x3e	; 62
    a874:	68 5f       	subi	r22, 0xF8	; 248
    a876:	7f 4f       	sbci	r23, 0xFF	; 255
    a878:	6d bf       	out	0x3d, r22	; 61
    a87a:	7e bf       	out	0x3e, r23	; 62
    a87c:	c2 01       	movw	r24, r4
    a87e:	61 e0       	ldi	r22, 0x01	; 1
    a880:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

            numberOfPacketsToUpload = uploadFileSize /  uploadChunkSize;
    a884:	60 91 46 34 	lds	r22, 0x3446
    a888:	70 91 47 34 	lds	r23, 0x3447
    a88c:	80 91 48 34 	lds	r24, 0x3448
    a890:	90 91 49 34 	lds	r25, 0x3449
    a894:	28 ee       	ldi	r18, 0xE8	; 232
    a896:	33 e0       	ldi	r19, 0x03	; 3
    a898:	40 e0       	ldi	r20, 0x00	; 0
    a89a:	50 e0       	ldi	r21, 0x00	; 0
    a89c:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    a8a0:	20 93 4a 34 	sts	0x344A, r18
    a8a4:	30 93 4b 34 	sts	0x344B, r19
    a8a8:	40 93 4c 34 	sts	0x344C, r20
    a8ac:	50 93 4d 34 	sts	0x344D, r21
            leftOverBytesToUpload   = uploadFileSize %  uploadChunkSize;
    a8b0:	60 91 46 34 	lds	r22, 0x3446
    a8b4:	70 91 47 34 	lds	r23, 0x3447
    a8b8:	80 91 48 34 	lds	r24, 0x3448
    a8bc:	90 91 49 34 	lds	r25, 0x3449
    a8c0:	28 ee       	ldi	r18, 0xE8	; 232
    a8c2:	33 e0       	ldi	r19, 0x03	; 3
    a8c4:	40 e0       	ldi	r20, 0x00	; 0
    a8c6:	50 e0       	ldi	r21, 0x00	; 0
    a8c8:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    a8cc:	60 93 4e 34 	sts	0x344E, r22
    a8d0:	70 93 4f 34 	sts	0x344F, r23
    a8d4:	80 93 50 34 	sts	0x3450, r24
    a8d8:	90 93 51 34 	sts	0x3451, r25

            sprintf(temp2,"Packets: %lu",numberOfPacketsToUpload);
    a8dc:	8d b7       	in	r24, 0x3d	; 61
    a8de:	9e b7       	in	r25, 0x3e	; 62
    a8e0:	08 97       	sbiw	r24, 0x08	; 8
    a8e2:	8d bf       	out	0x3d, r24	; 61
    a8e4:	9e bf       	out	0x3e, r25	; 62
    a8e6:	ed b7       	in	r30, 0x3d	; 61
    a8e8:	fe b7       	in	r31, 0x3e	; 62
    a8ea:	31 96       	adiw	r30, 0x01	; 1
    a8ec:	ad b7       	in	r26, 0x3d	; 61
    a8ee:	be b7       	in	r27, 0x3e	; 62
    a8f0:	11 96       	adiw	r26, 0x01	; 1
    a8f2:	4d 92       	st	X+, r4
    a8f4:	5c 92       	st	X, r5
    a8f6:	12 97       	sbiw	r26, 0x02	; 2
    a8f8:	23 ef       	ldi	r18, 0xF3	; 243
    a8fa:	39 e2       	ldi	r19, 0x29	; 41
    a8fc:	22 83       	std	Z+2, r18	; 0x02
    a8fe:	33 83       	std	Z+3, r19	; 0x03
    a900:	80 91 4a 34 	lds	r24, 0x344A
    a904:	90 91 4b 34 	lds	r25, 0x344B
    a908:	a0 91 4c 34 	lds	r26, 0x344C
    a90c:	b0 91 4d 34 	lds	r27, 0x344D
    a910:	84 83       	std	Z+4, r24	; 0x04
    a912:	95 83       	std	Z+5, r25	; 0x05
    a914:	a6 83       	std	Z+6, r26	; 0x06
    a916:	b7 83       	std	Z+7, r27	; 0x07
    a918:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
            Debug_SendString(temp2, true);
    a91c:	6d b7       	in	r22, 0x3d	; 61
    a91e:	7e b7       	in	r23, 0x3e	; 62
    a920:	68 5f       	subi	r22, 0xF8	; 248
    a922:	7f 4f       	sbci	r23, 0xFF	; 255
    a924:	6d bf       	out	0x3d, r22	; 61
    a926:	7e bf       	out	0x3e, r23	; 62
    a928:	c2 01       	movw	r24, r4
    a92a:	61 e0       	ldi	r22, 0x01	; 1
    a92c:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
            sprintf(temp2,"Overflow: %lu",leftOverBytesToUpload);
    a930:	8d b7       	in	r24, 0x3d	; 61
    a932:	9e b7       	in	r25, 0x3e	; 62
    a934:	08 97       	sbiw	r24, 0x08	; 8
    a936:	8d bf       	out	0x3d, r24	; 61
    a938:	9e bf       	out	0x3e, r25	; 62
    a93a:	ed b7       	in	r30, 0x3d	; 61
    a93c:	fe b7       	in	r31, 0x3e	; 62
    a93e:	31 96       	adiw	r30, 0x01	; 1
    a940:	ad b7       	in	r26, 0x3d	; 61
    a942:	be b7       	in	r27, 0x3e	; 62
    a944:	11 96       	adiw	r26, 0x01	; 1
    a946:	4d 92       	st	X+, r4
    a948:	5c 92       	st	X, r5
    a94a:	12 97       	sbiw	r26, 0x02	; 2
    a94c:	20 e0       	ldi	r18, 0x00	; 0
    a94e:	3a e2       	ldi	r19, 0x2A	; 42
    a950:	22 83       	std	Z+2, r18	; 0x02
    a952:	33 83       	std	Z+3, r19	; 0x03
    a954:	80 91 4e 34 	lds	r24, 0x344E
    a958:	90 91 4f 34 	lds	r25, 0x344F
    a95c:	a0 91 50 34 	lds	r26, 0x3450
    a960:	b0 91 51 34 	lds	r27, 0x3451
    a964:	84 83       	std	Z+4, r24	; 0x04
    a966:	95 83       	std	Z+5, r25	; 0x05
    a968:	a6 83       	std	Z+6, r26	; 0x06
    a96a:	b7 83       	std	Z+7, r27	; 0x07
    a96c:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
            Debug_SendString(temp2, true);
    a970:	6d b7       	in	r22, 0x3d	; 61
    a972:	7e b7       	in	r23, 0x3e	; 62
    a974:	68 5f       	subi	r22, 0xF8	; 248
    a976:	7f 4f       	sbci	r23, 0xFF	; 255
    a978:	6d bf       	out	0x3d, r22	; 61
    a97a:	7e bf       	out	0x3e, r23	; 62
    a97c:	c2 01       	movw	r24, r4
    a97e:	61 e0       	ldi	r22, 0x01	; 1
    a980:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>




         Open_Connection:
            Wifi_EnterCMDMode(500);
    a984:	84 ef       	ldi	r24, 0xF4	; 244
    a986:	91 e0       	ldi	r25, 0x01	; 1
    a988:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <Wifi_EnterCMDMode>
    a98c:	80 e1       	ldi	r24, 0x10	; 16
    a98e:	97 e2       	ldi	r25, 0x27	; 39
    a990:	f3 01       	movw	r30, r6
    a992:	31 97       	sbiw	r30, 0x01	; 1
    a994:	f1 f7       	brne	.-4      	; 0xa992 <main+0x534>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a996:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a998:	d9 f7       	brne	.-10     	; 0xa990 <main+0x532>
            _delay_ms(1000);


            if(!Wifi_SendCommand(serverOpenCommand,"Connect to","Connect to",500)){
    a99a:	88 e2       	ldi	r24, 0x28	; 40
    a99c:	91 e3       	ldi	r25, 0x31	; 49
    a99e:	6e e0       	ldi	r22, 0x0E	; 14
    a9a0:	7a e2       	ldi	r23, 0x2A	; 42
    a9a2:	ab 01       	movw	r20, r22
    a9a4:	24 ef       	ldi	r18, 0xF4	; 244
    a9a6:	31 e0       	ldi	r19, 0x01	; 1
    a9a8:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    a9ac:	88 23       	and	r24, r24
    a9ae:	99 f4       	brne	.+38     	; 0xa9d6 <main+0x578>
    a9b0:	80 e1       	ldi	r24, 0x10	; 16
    a9b2:	97 e2       	ldi	r25, 0x27	; 39
    a9b4:	f3 01       	movw	r30, r6
    a9b6:	31 97       	sbiw	r30, 0x01	; 1
    a9b8:	f1 f7       	brne	.-4      	; 0xa9b6 <main+0x558>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9bc:	d9 f7       	brne	.-10     	; 0xa9b4 <main+0x556>

                _delay_ms(1000);
                Wifi_ExitCMDMode(500);
    a9be:	84 ef       	ldi	r24, 0xF4	; 244
    a9c0:	91 e0       	ldi	r25, 0x01	; 1
    a9c2:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <Wifi_ExitCMDMode>
    a9c6:	8f ef       	ldi	r24, 0xFF	; 255
    a9c8:	9f ef       	ldi	r25, 0xFF	; 255
    a9ca:	f3 01       	movw	r30, r6
    a9cc:	31 97       	sbiw	r30, 0x01	; 1
    a9ce:	f1 f7       	brne	.-4      	; 0xa9cc <main+0x56e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9d2:	d9 f7       	brne	.-10     	; 0xa9ca <main+0x56c>
    a9d4:	d7 cf       	rjmp	.-82     	; 0xa984 <main+0x526>
    a9d6:	80 e4       	ldi	r24, 0x40	; 64
    a9d8:	9c e9       	ldi	r25, 0x9C	; 156
    a9da:	f3 01       	movw	r30, r6
    a9dc:	31 97       	sbiw	r30, 0x01	; 1
    a9de:	f1 f7       	brne	.-4      	; 0xa9dc <main+0x57e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9e2:	d9 f7       	brne	.-10     	; 0xa9da <main+0x57c>
    a9e4:	80 e4       	ldi	r24, 0x40	; 64
    a9e6:	9c e9       	ldi	r25, 0x9C	; 156
    a9e8:	f3 01       	movw	r30, r6
    a9ea:	31 97       	sbiw	r30, 0x01	; 1
    a9ec:	f1 f7       	brne	.-4      	; 0xa9ea <main+0x58c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9f0:	d9 f7       	brne	.-10     	; 0xa9e8 <main+0x58a>
                goto Open_Connection;
            }
            _delay_ms(4000);
            _delay_ms(4000);

            tempStringFiller = 0;
    a9f2:	10 92 22 34 	sts	0x3422, r1
    a9f6:	12 c0       	rjmp	.+36     	; 0xaa1c <main+0x5be>
            while(Wifi_CharReadyToRead()){
                temp2[tempStringFiller] = Wifi_GetByte(false);
    a9f8:	80 91 22 34 	lds	r24, 0x3422
    a9fc:	08 2f       	mov	r16, r24
    a9fe:	10 e0       	ldi	r17, 0x00	; 0
    aa00:	80 e0       	ldi	r24, 0x00	; 0
    aa02:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    aa06:	02 5c       	subi	r16, 0xC2	; 194
    aa08:	12 4c       	sbci	r17, 0xC2	; 194
    aa0a:	d8 01       	movw	r26, r16
    aa0c:	8c 93       	st	X, r24
                tempStringFiller++;
    aa0e:	80 91 22 34 	lds	r24, 0x3422
    aa12:	8f 5f       	subi	r24, 0xFF	; 255
    aa14:	80 93 22 34 	sts	0x3422, r24
                if(tempStringFiller == 49){
    aa18:	81 33       	cpi	r24, 0x31	; 49
    aa1a:	21 f0       	breq	.+8      	; 0xaa24 <main+0x5c6>
            }
            _delay_ms(4000);
            _delay_ms(4000);

            tempStringFiller = 0;
            while(Wifi_CharReadyToRead()){
    aa1c:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    aa20:	88 23       	and	r24, r24
    aa22:	51 f7       	brne	.-44     	; 0xa9f8 <main+0x59a>
                tempStringFiller++;
                if(tempStringFiller == 49){
                    break;
                }
            }
            temp2[tempStringFiller] = 0;
    aa24:	e0 91 22 34 	lds	r30, 0x3422
    aa28:	f0 e0       	ldi	r31, 0x00	; 0
    aa2a:	e2 5c       	subi	r30, 0xC2	; 194
    aa2c:	f2 4c       	sbci	r31, 0xC2	; 194
    aa2e:	10 82       	st	Z, r1


            if(strstr(temp2,"*OPEN*") != 0){                            // success
    aa30:	8e e3       	ldi	r24, 0x3E	; 62
    aa32:	9d e3       	ldi	r25, 0x3D	; 61
    aa34:	69 e1       	ldi	r22, 0x19	; 25
    aa36:	7a e2       	ldi	r23, 0x2A	; 42
    aa38:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    aa3c:	00 97       	sbiw	r24, 0x00	; 0
    aa3e:	09 f4       	brne	.+2      	; 0xaa42 <main+0x5e4>
    aa40:	97 c0       	rjmp	.+302    	; 0xab70 <main+0x712>
                 Debug_SendString("Connection Open!",true);
    aa42:	80 e2       	ldi	r24, 0x20	; 32
    aa44:	9a e2       	ldi	r25, 0x2A	; 42
    aa46:	61 e0       	ldi	r22, 0x01	; 1
    aa48:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    aa4c:	80 e1       	ldi	r24, 0x10	; 16
    aa4e:	97 e2       	ldi	r25, 0x27	; 39
    aa50:	f3 01       	movw	r30, r6
    aa52:	31 97       	sbiw	r30, 0x01	; 1
    aa54:	f1 f7       	brne	.-4      	; 0xaa52 <main+0x5f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa58:	d9 f7       	brne	.-10     	; 0xaa50 <main+0x5f2>
                Wifi_ExitCMDMode(500);
                _delay_ms(10000);
                goto Open_Connection;
            }

            uploadTimeStart = UNIX_time;
    aa5a:	80 91 01 34 	lds	r24, 0x3401
    aa5e:	90 91 02 34 	lds	r25, 0x3402
    aa62:	a0 91 03 34 	lds	r26, 0x3403
    aa66:	b0 91 04 34 	lds	r27, 0x3404
    aa6a:	80 93 de 3c 	sts	0x3CDE, r24
    aa6e:	90 93 df 3c 	sts	0x3CDF, r25
    aa72:	a0 93 e0 3c 	sts	0x3CE0, r26
    aa76:	b0 93 e1 3c 	sts	0x3CE1, r27
            Debug_SendString("Sending...", true);
    aa7a:	81 e3       	ldi	r24, 0x31	; 49
    aa7c:	9a e2       	ldi	r25, 0x2A	; 42
    aa7e:	61 e0       	ldi	r22, 0x01	; 1
    aa80:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>


            memmove(temp2,strtok(fileToUpload,"/"),12);
    aa84:	81 ec       	ldi	r24, 0xC1	; 193
    aa86:	9c e3       	ldi	r25, 0x3C	; 60
    aa88:	62 e6       	ldi	r22, 0x62	; 98
    aa8a:	75 e2       	ldi	r23, 0x25	; 37
    aa8c:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    aa90:	bc 01       	movw	r22, r24
    aa92:	8e e3       	ldi	r24, 0x3E	; 62
    aa94:	9d e3       	ldi	r25, 0x3D	; 61
    aa96:	4c e0       	ldi	r20, 0x0C	; 12
    aa98:	50 e0       	ldi	r21, 0x00	; 0
    aa9a:	0e 94 7f 59 	call	0xb2fe	; 0xb2fe <memmove>


            Wifi_SendString("POST /users/",false);
    aa9e:	8c e3       	ldi	r24, 0x3C	; 60
    aaa0:	9a e2       	ldi	r25, 0x2A	; 42
    aaa2:	60 e0       	ldi	r22, 0x00	; 0
    aaa4:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString(user,false);
    aaa8:	8e ec       	ldi	r24, 0xCE	; 206
    aaaa:	9a e4       	ldi	r25, 0x4A	; 74
    aaac:	60 e0       	ldi	r22, 0x00	; 0
    aaae:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString("/binupload?dev_nickname=",false);
    aab2:	89 e4       	ldi	r24, 0x49	; 73
    aab4:	9a e2       	ldi	r25, 0x2A	; 42
    aab6:	60 e0       	ldi	r22, 0x00	; 0
    aab8:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString(nickname,false);
    aabc:	82 e4       	ldi	r24, 0x42	; 66
    aabe:	9c e5       	ldi	r25, 0x5C	; 92
    aac0:	60 e0       	ldi	r22, 0x00	; 0
    aac2:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString("&filename=",false);
    aac6:	82 e6       	ldi	r24, 0x62	; 98
    aac8:	9a e2       	ldi	r25, 0x2A	; 42
    aaca:	60 e0       	ldi	r22, 0x00	; 0
    aacc:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString(temp2, false);
    aad0:	8e e3       	ldi	r24, 0x3E	; 62
    aad2:	9d e3       	ldi	r25, 0x3D	; 61
    aad4:	60 e0       	ldi	r22, 0x00	; 0
    aad6:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString(" HTTP/1.1",true);
    aada:	8d e6       	ldi	r24, 0x6D	; 109
    aadc:	9a e2       	ldi	r25, 0x2A	; 42
    aade:	61 e0       	ldi	r22, 0x01	; 1
    aae0:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>

            Wifi_SendString("Host: bodytrack.org",true);
    aae4:	87 e7       	ldi	r24, 0x77	; 119
    aae6:	9a e2       	ldi	r25, 0x2A	; 42
    aae8:	61 e0       	ldi	r22, 0x01	; 1
    aaea:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString("Content-Type: application/octet-stream",true);
    aaee:	8b e8       	ldi	r24, 0x8B	; 139
    aaf0:	9a e2       	ldi	r25, 0x2A	; 42
    aaf2:	61 e0       	ldi	r22, 0x01	; 1
    aaf4:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendString("Content-Transfer-Encoding: binary",true);
    aaf8:	82 eb       	ldi	r24, 0xB2	; 178
    aafa:	9a e2       	ldi	r25, 0x2A	; 42
    aafc:	61 e0       	ldi	r22, 0x01	; 1
    aafe:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            sprintf(temp2, "Content-Length: %lu",uploadFileSize);
    ab02:	40 91 46 34 	lds	r20, 0x3446
    ab06:	50 91 47 34 	lds	r21, 0x3447
    ab0a:	60 91 48 34 	lds	r22, 0x3448
    ab0e:	70 91 49 34 	lds	r23, 0x3449
    ab12:	ed b7       	in	r30, 0x3d	; 61
    ab14:	fe b7       	in	r31, 0x3e	; 62
    ab16:	38 97       	sbiw	r30, 0x08	; 8
    ab18:	ed bf       	out	0x3d, r30	; 61
    ab1a:	fe bf       	out	0x3e, r31	; 62
    ab1c:	31 96       	adiw	r30, 0x01	; 1
    ab1e:	ad b7       	in	r26, 0x3d	; 61
    ab20:	be b7       	in	r27, 0x3e	; 62
    ab22:	11 96       	adiw	r26, 0x01	; 1
    ab24:	4d 92       	st	X+, r4
    ab26:	5c 92       	st	X, r5
    ab28:	12 97       	sbiw	r26, 0x02	; 2
    ab2a:	24 ed       	ldi	r18, 0xD4	; 212
    ab2c:	3a e2       	ldi	r19, 0x2A	; 42
    ab2e:	22 83       	std	Z+2, r18	; 0x02
    ab30:	33 83       	std	Z+3, r19	; 0x03
    ab32:	44 83       	std	Z+4, r20	; 0x04
    ab34:	55 83       	std	Z+5, r21	; 0x05
    ab36:	66 83       	std	Z+6, r22	; 0x06
    ab38:	77 83       	std	Z+7, r23	; 0x07
    ab3a:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
            Wifi_SendString(temp2,true);
    ab3e:	6d b7       	in	r22, 0x3d	; 61
    ab40:	7e b7       	in	r23, 0x3e	; 62
    ab42:	68 5f       	subi	r22, 0xF8	; 248
    ab44:	7f 4f       	sbci	r23, 0xFF	; 255
    ab46:	6d bf       	out	0x3d, r22	; 61
    ab48:	7e bf       	out	0x3e, r23	; 62
    ab4a:	c2 01       	movw	r24, r4
    ab4c:	61 e0       	ldi	r22, 0x01	; 1
    ab4e:	0e 94 1c 3d 	call	0x7a38	; 0x7a38 <Wifi_SendString>
            Wifi_SendByte(0x0D);
    ab52:	8d e0       	ldi	r24, 0x0D	; 13
    ab54:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
            Wifi_SendByte(0x0A);
    ab58:	8a e0       	ldi	r24, 0x0A	; 10
    ab5a:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
    ab5e:	88 24       	eor	r8, r8
    ab60:	99 24       	eor	r9, r9
    ab62:	54 01       	movw	r10, r8
    ab64:	cc 24       	eor	r12, r12
    ab66:	dd 24       	eor	r13, r13
    ab68:	76 01       	movw	r14, r12

            for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;
    ab6a:	33 24       	eor	r3, r3
    ab6c:	33 94       	inc	r3
    ab6e:	60 c0       	rjmp	.+192    	; 0xac30 <main+0x7d2>
            if(strstr(temp2,"*OPEN*") != 0){                            // success
                 Debug_SendString("Connection Open!",true);
                _delay_ms(1000);


            } else if (strstr(temp2,"ERR:Connected!")!=0){
    ab70:	8e e3       	ldi	r24, 0x3E	; 62
    ab72:	9d e3       	ldi	r25, 0x3D	; 61
    ab74:	68 ee       	ldi	r22, 0xE8	; 232
    ab76:	7a e2       	ldi	r23, 0x2A	; 42
    ab78:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    ab7c:	00 97       	sbiw	r24, 0x00	; 0
    ab7e:	d1 f0       	breq	.+52     	; 0xabb4 <main+0x756>
                Debug_SendString("Let's retry connecting...",true);
    ab80:	87 ef       	ldi	r24, 0xF7	; 247
    ab82:	9a e2       	ldi	r25, 0x2A	; 42
    ab84:	61 e0       	ldi	r22, 0x01	; 1
    ab86:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
               Wifi_SendCommand("close","*CLOS*","*CLOS*",500);
    ab8a:	81 e1       	ldi	r24, 0x11	; 17
    ab8c:	9b e2       	ldi	r25, 0x2B	; 43
    ab8e:	67 e1       	ldi	r22, 0x17	; 23
    ab90:	7b e2       	ldi	r23, 0x2B	; 43
    ab92:	ab 01       	movw	r20, r22
    ab94:	24 ef       	ldi	r18, 0xF4	; 244
    ab96:	31 e0       	ldi	r19, 0x01	; 1
    ab98:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <Wifi_SendCommand>
    ab9c:	80 e1       	ldi	r24, 0x10	; 16
    ab9e:	97 e2       	ldi	r25, 0x27	; 39
    aba0:	f3 01       	movw	r30, r6
    aba2:	31 97       	sbiw	r30, 0x01	; 1
    aba4:	f1 f7       	brne	.-4      	; 0xaba2 <main+0x744>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aba6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aba8:	d9 f7       	brne	.-10     	; 0xaba0 <main+0x742>
               _delay_ms(1000);
               Wifi_ExitCMDMode(500);
    abaa:	84 ef       	ldi	r24, 0xF4	; 244
    abac:	91 e0       	ldi	r25, 0x01	; 1
    abae:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <Wifi_ExitCMDMode>
    abb2:	e8 ce       	rjmp	.-560    	; 0xa984 <main+0x526>
               goto Open_Connection;
            } else{
                Debug_SendString("Other issues: ", true);
    abb4:	8e e1       	ldi	r24, 0x1E	; 30
    abb6:	9b e2       	ldi	r25, 0x2B	; 43
    abb8:	61 e0       	ldi	r22, 0x01	; 1
    abba:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    abbe:	80 e1       	ldi	r24, 0x10	; 16
    abc0:	97 e2       	ldi	r25, 0x27	; 39
    abc2:	f3 01       	movw	r30, r6
    abc4:	31 97       	sbiw	r30, 0x01	; 1
    abc6:	f1 f7       	brne	.-4      	; 0xabc4 <main+0x766>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abca:	d9 f7       	brne	.-10     	; 0xabc2 <main+0x764>
                _delay_ms(1000);
                Wifi_ExitCMDMode(500);
    abcc:	84 ef       	ldi	r24, 0xF4	; 244
    abce:	91 e0       	ldi	r25, 0x01	; 1
    abd0:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <Wifi_ExitCMDMode>
    abd4:	8f ef       	ldi	r24, 0xFF	; 255
    abd6:	9f ef       	ldi	r25, 0xFF	; 255
    abd8:	f3 01       	movw	r30, r6
    abda:	31 97       	sbiw	r30, 0x01	; 1
    abdc:	f1 f7       	brne	.-4      	; 0xabda <main+0x77c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abe0:	d9 f7       	brne	.-10     	; 0xabd8 <main+0x77a>
    abe2:	d0 ce       	rjmp	.-608    	; 0xa984 <main+0x526>
            Wifi_SendString(temp2,true);
            Wifi_SendByte(0x0D);
            Wifi_SendByte(0x0A);

            for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
                uploadFileBufferFull = false;
    abe4:	10 92 41 34 	sts	0x3441, r1
                okToFillUploadFileBuffer = true;
    abe8:	30 92 40 34 	sts	0x3440, r3

                uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    abec:	c7 01       	movw	r24, r14
    abee:	b6 01       	movw	r22, r12
    abf0:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    abf4:	20 93 2f 34 	sts	0x342F, r18
                while(!uploadFileBufferFull);
    abf8:	80 91 41 34 	lds	r24, 0x3441
    abfc:	88 23       	and	r24, r24
    abfe:	e1 f3       	breq	.-8      	; 0xabf8 <main+0x79a>
    ac00:	01 ed       	ldi	r16, 0xD1	; 209
    ac02:	18 e3       	ldi	r17, 0x38	; 56
                for(uint16_t j = 0; j <  uploadChunkSize; j++){
                    Wifi_SendByte(uploadFileBuffer[j]);
    ac04:	d8 01       	movw	r26, r16
    ac06:	8d 91       	ld	r24, X+
    ac08:	8d 01       	movw	r16, r26
    ac0a:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
                uploadFileBufferFull = false;
                okToFillUploadFileBuffer = true;

                uploadPercentBS = (z*100)/numberOfPacketsToUpload;
                while(!uploadFileBufferFull);
                for(uint16_t j = 0; j <  uploadChunkSize; j++){
    ac0e:	bc e3       	ldi	r27, 0x3C	; 60
    ac10:	09 3b       	cpi	r16, 0xB9	; 185
    ac12:	1b 07       	cpc	r17, r27
    ac14:	b9 f7       	brne	.-18     	; 0xac04 <main+0x7a6>
            sprintf(temp2, "Content-Length: %lu",uploadFileSize);
            Wifi_SendString(temp2,true);
            Wifi_SendByte(0x0D);
            Wifi_SendByte(0x0A);

            for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    ac16:	08 94       	sec
    ac18:	81 1c       	adc	r8, r1
    ac1a:	91 1c       	adc	r9, r1
    ac1c:	a1 1c       	adc	r10, r1
    ac1e:	b1 1c       	adc	r11, r1
    ac20:	64 e6       	ldi	r22, 0x64	; 100
    ac22:	70 e0       	ldi	r23, 0x00	; 0
    ac24:	80 e0       	ldi	r24, 0x00	; 0
    ac26:	90 e0       	ldi	r25, 0x00	; 0
    ac28:	c6 0e       	add	r12, r22
    ac2a:	d7 1e       	adc	r13, r23
    ac2c:	e8 1e       	adc	r14, r24
    ac2e:	f9 1e       	adc	r15, r25
    ac30:	20 91 4a 34 	lds	r18, 0x344A
    ac34:	30 91 4b 34 	lds	r19, 0x344B
    ac38:	40 91 4c 34 	lds	r20, 0x344C
    ac3c:	50 91 4d 34 	lds	r21, 0x344D
    ac40:	82 16       	cp	r8, r18
    ac42:	93 06       	cpc	r9, r19
    ac44:	a4 06       	cpc	r10, r20
    ac46:	b5 06       	cpc	r11, r21
    ac48:	68 f2       	brcs	.-102    	; 0xabe4 <main+0x786>
                for(uint16_t j = 0; j <  uploadChunkSize; j++){
                    Wifi_SendByte(uploadFileBuffer[j]);
                }
            }

            uploadFileBufferFull = false;
    ac4a:	10 92 41 34 	sts	0x3441, r1
            okToFillUploadFileBuffer = true;
    ac4e:	81 e0       	ldi	r24, 0x01	; 1
    ac50:	80 93 40 34 	sts	0x3440, r24
            while(!uploadFileBufferFull);
    ac54:	80 91 41 34 	lds	r24, 0x3441
    ac58:	88 23       	and	r24, r24
    ac5a:	e1 f3       	breq	.-8      	; 0xac54 <main+0x7f6>
    ac5c:	a1 ed       	ldi	r26, 0xD1	; 209
    ac5e:	ca 2e       	mov	r12, r26
    ac60:	a8 e3       	ldi	r26, 0x38	; 56
    ac62:	da 2e       	mov	r13, r26
    ac64:	20 e0       	ldi	r18, 0x00	; 0
    ac66:	30 e0       	ldi	r19, 0x00	; 0
    ac68:	40 e0       	ldi	r20, 0x00	; 0
    ac6a:	50 e0       	ldi	r21, 0x00	; 0
    ac6c:	07 c0       	rjmp	.+14     	; 0xac7c <main+0x81e>

            for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
                Wifi_SendByte(uploadFileBuffer[j]);
    ac6e:	d6 01       	movw	r26, r12
    ac70:	8d 91       	ld	r24, X+
    ac72:	6d 01       	movw	r12, r26
    ac74:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
    ac78:	a8 01       	movw	r20, r16
    ac7a:	97 01       	movw	r18, r14
    ac7c:	79 01       	movw	r14, r18
    ac7e:	8a 01       	movw	r16, r20
    ac80:	08 94       	sec
    ac82:	e1 1c       	adc	r14, r1
    ac84:	f1 1c       	adc	r15, r1
    ac86:	01 1d       	adc	r16, r1
    ac88:	11 1d       	adc	r17, r1

            uploadFileBufferFull = false;
            okToFillUploadFileBuffer = true;
            while(!uploadFileBufferFull);

            for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    ac8a:	80 91 4e 34 	lds	r24, 0x344E
    ac8e:	90 91 4f 34 	lds	r25, 0x344F
    ac92:	a0 91 50 34 	lds	r26, 0x3450
    ac96:	b0 91 51 34 	lds	r27, 0x3451
    ac9a:	28 17       	cp	r18, r24
    ac9c:	39 07       	cpc	r19, r25
    ac9e:	4a 07       	cpc	r20, r26
    aca0:	5b 07       	cpc	r21, r27
    aca2:	28 f3       	brcs	.-54     	; 0xac6e <main+0x810>
                Wifi_SendByte(uploadFileBuffer[j]);

            }


            Wifi_SendByte(0x0D);
    aca4:	8d e0       	ldi	r24, 0x0D	; 13
    aca6:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
            Wifi_SendByte(0x0A);
    acaa:	8a e0       	ldi	r24, 0x0A	; 10
    acac:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
            Wifi_SendByte(0x0D);
    acb0:	8d e0       	ldi	r24, 0x0D	; 13
    acb2:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>
            Wifi_SendByte(0x0A);
    acb6:	8a e0       	ldi	r24, 0x0A	; 10
    acb8:	0e 94 88 02 	call	0x510	; 0x510 <Wifi_SendByte>


            uploadPercentBS = 100;
    acbc:	84 e6       	ldi	r24, 0x64	; 100
    acbe:	80 93 2f 34 	sts	0x342F, r24



              //Wait_For_Close:
            httpResponseReceived = false;
    acc2:	10 92 56 34 	sts	0x3456, r1
            connectionClosed = false;
    acc6:	10 92 57 34 	sts	0x3457, r1
            Debug_SendString("Wait for connection to close",true);
    acca:	8d e2       	ldi	r24, 0x2D	; 45
    accc:	9b e2       	ldi	r25, 0x2B	; 43
    acce:	61 e0       	ldi	r22, 0x01	; 1
    acd0:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
            httpResponse[0] = 0;
    acd4:	10 92 ec 53 	sts	0x53EC, r1
            connectionTimeoutTimer = 0;
    acd8:	10 92 58 34 	sts	0x3458, r1
    acdc:	10 92 59 34 	sts	0x3459, r1
    ace0:	10 92 5a 34 	sts	0x345A, r1
    ace4:	10 92 5b 34 	sts	0x345B, r1
            byteReceived = 0;
    ace8:	10 92 21 4b 	sts	0x4B21, r1
    acec:	f6 e6       	ldi	r31, 0x66	; 102
    acee:	ef 2e       	mov	r14, r31
    acf0:	fe e0       	ldi	r31, 0x0E	; 14
    acf2:	ff 2e       	mov	r15, r31
    acf4:	e0 c0       	rjmp	.+448    	; 0xaeb6 <main+0xa58>
            while(!connectionClosed){
                if(Wifi_CharReadyToRead()){
    acf6:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    acfa:	88 23       	and	r24, r24
    acfc:	29 f0       	breq	.+10     	; 0xad08 <main+0x8aa>
                  byteReceived = Wifi_GetByte(false);
    acfe:	80 e0       	ldi	r24, 0x00	; 0
    ad00:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad04:	80 93 21 4b 	sts	0x4B21, r24
                }
                if(byteReceived == '*'){
    ad08:	80 91 21 4b 	lds	r24, 0x4B21
    ad0c:	8a 32       	cpi	r24, 0x2A	; 42
    ad0e:	21 f5       	brne	.+72     	; 0xad58 <main+0x8fa>
                  byteReceived = Wifi_GetByte(true);
    ad10:	81 e0       	ldi	r24, 0x01	; 1
    ad12:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad16:	80 93 21 4b 	sts	0x4B21, r24
                  if(byteReceived == 'C'){
    ad1a:	83 34       	cpi	r24, 0x43	; 67
    ad1c:	09 f0       	breq	.+2      	; 0xad20 <main+0x8c2>
    ad1e:	a2 c0       	rjmp	.+324    	; 0xae64 <main+0xa06>
                     byteReceived = Wifi_GetByte(true);
    ad20:	81 e0       	ldi	r24, 0x01	; 1
    ad22:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad26:	80 93 21 4b 	sts	0x4B21, r24
                     if(byteReceived == 'L'){
    ad2a:	8c 34       	cpi	r24, 0x4C	; 76
    ad2c:	09 f0       	breq	.+2      	; 0xad30 <main+0x8d2>
    ad2e:	9a c0       	rjmp	.+308    	; 0xae64 <main+0xa06>
                        byteReceived = Wifi_GetByte(true);
    ad30:	81 e0       	ldi	r24, 0x01	; 1
    ad32:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad36:	80 93 21 4b 	sts	0x4B21, r24
                        if(byteReceived == 'O'){
    ad3a:	8f 34       	cpi	r24, 0x4F	; 79
    ad3c:	09 f0       	breq	.+2      	; 0xad40 <main+0x8e2>
    ad3e:	92 c0       	rjmp	.+292    	; 0xae64 <main+0xa06>
                           byteReceived = Wifi_GetByte(true);
    ad40:	81 e0       	ldi	r24, 0x01	; 1
    ad42:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad46:	80 93 21 4b 	sts	0x4B21, r24
                           if(byteReceived == 'S'){
    ad4a:	83 35       	cpi	r24, 0x53	; 83
    ad4c:	09 f0       	breq	.+2      	; 0xad50 <main+0x8f2>
    ad4e:	8a c0       	rjmp	.+276    	; 0xae64 <main+0xa06>
                               connectionClosed = true;
    ad50:	81 e0       	ldi	r24, 0x01	; 1
    ad52:	80 93 57 34 	sts	0x3457, r24
    ad56:	b4 c0       	rjmp	.+360    	; 0xaec0 <main+0xa62>
                               break;
                           }
                        }
                     }
                  }
                } else if(byteReceived == 'H'){
    ad58:	88 34       	cpi	r24, 0x48	; 72
    ad5a:	09 f0       	breq	.+2      	; 0xad5e <main+0x900>
    ad5c:	83 c0       	rjmp	.+262    	; 0xae64 <main+0xa06>
                  byteReceived = Wifi_GetByte(true);
    ad5e:	81 e0       	ldi	r24, 0x01	; 1
    ad60:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad64:	80 93 21 4b 	sts	0x4B21, r24
                  if(byteReceived == 'T'){
    ad68:	84 35       	cpi	r24, 0x54	; 84
    ad6a:	09 f0       	breq	.+2      	; 0xad6e <main+0x910>
    ad6c:	7b c0       	rjmp	.+246    	; 0xae64 <main+0xa06>
                     byteReceived = Wifi_GetByte(true);
    ad6e:	81 e0       	ldi	r24, 0x01	; 1
    ad70:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad74:	80 93 21 4b 	sts	0x4B21, r24
                     if(byteReceived == 'T'){
    ad78:	84 35       	cpi	r24, 0x54	; 84
    ad7a:	09 f0       	breq	.+2      	; 0xad7e <main+0x920>
    ad7c:	73 c0       	rjmp	.+230    	; 0xae64 <main+0xa06>
                        byteReceived = Wifi_GetByte(true);
    ad7e:	81 e0       	ldi	r24, 0x01	; 1
    ad80:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ad84:	80 93 21 4b 	sts	0x4B21, r24
                        if(byteReceived == 'P'){
    ad88:	80 35       	cpi	r24, 0x50	; 80
    ad8a:	09 f0       	breq	.+2      	; 0xad8e <main+0x930>
    ad8c:	6b c0       	rjmp	.+214    	; 0xae64 <main+0xa06>

                          httpResponseReceived = true;
    ad8e:	81 e0       	ldi	r24, 0x01	; 1
    ad90:	80 93 56 34 	sts	0x3456, r24
    ad94:	80 e1       	ldi	r24, 0x10	; 16
    ad96:	97 e2       	ldi	r25, 0x27	; 39
    ad98:	f3 01       	movw	r30, r6
    ad9a:	31 97       	sbiw	r30, 0x01	; 1
    ad9c:	f1 f7       	brne	.-4      	; 0xad9a <main+0x93c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ada0:	d9 f7       	brne	.-10     	; 0xad98 <main+0x93a>
                          _delay_ms(1000);
                          tempStringFiller = 0;
    ada2:	10 92 22 34 	sts	0x3422, r1
    ada6:	12 c0       	rjmp	.+36     	; 0xadcc <main+0x96e>
                          while(Wifi_CharReadyToRead()){
                              temp2[tempStringFiller] = Wifi_GetByte(false);
    ada8:	80 91 22 34 	lds	r24, 0x3422
    adac:	08 2f       	mov	r16, r24
    adae:	10 e0       	ldi	r17, 0x00	; 0
    adb0:	80 e0       	ldi	r24, 0x00	; 0
    adb2:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    adb6:	02 5c       	subi	r16, 0xC2	; 194
    adb8:	12 4c       	sbci	r17, 0xC2	; 194
    adba:	f8 01       	movw	r30, r16
    adbc:	80 83       	st	Z, r24
                              tempStringFiller++;
    adbe:	80 91 22 34 	lds	r24, 0x3422
    adc2:	8f 5f       	subi	r24, 0xFF	; 255
    adc4:	80 93 22 34 	sts	0x3422, r24
                              if(tempStringFiller == 8){
    adc8:	88 30       	cpi	r24, 0x08	; 8
    adca:	21 f0       	breq	.+8      	; 0xadd4 <main+0x976>
                        if(byteReceived == 'P'){

                          httpResponseReceived = true;
                          _delay_ms(1000);
                          tempStringFiller = 0;
                          while(Wifi_CharReadyToRead()){
    adcc:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    add0:	88 23       	and	r24, r24
    add2:	51 f7       	brne	.-44     	; 0xada8 <main+0x94a>
                              tempStringFiller++;
                              if(tempStringFiller == 8){
                                  break;
                              }
                          }
                          temp2[tempStringFiller] = 0;
    add4:	e0 91 22 34 	lds	r30, 0x3422
    add8:	f0 e0       	ldi	r31, 0x00	; 0
    adda:	e2 5c       	subi	r30, 0xC2	; 194
    addc:	f2 4c       	sbci	r31, 0xC2	; 194
    adde:	10 82       	st	Z, r1
                          memcpy(httpResponse,temp2+5,3);
    ade0:	ac ee       	ldi	r26, 0xEC	; 236
    ade2:	b3 e5       	ldi	r27, 0x53	; 83
    ade4:	e3 e4       	ldi	r30, 0x43	; 67
    ade6:	fd e3       	ldi	r31, 0x3D	; 61
    ade8:	83 e0       	ldi	r24, 0x03	; 3
    adea:	01 90       	ld	r0, Z+
    adec:	0d 92       	st	X+, r0
    adee:	81 50       	subi	r24, 0x01	; 1
    adf0:	e1 f7       	brne	.-8      	; 0xadea <main+0x98c>
                          lengthOfHttpResponse = 0;
    adf2:	10 92 54 34 	sts	0x3454, r1
    adf6:	10 92 55 34 	sts	0x3455, r1
    adfa:	80 e5       	ldi	r24, 0x50	; 80
    adfc:	93 ec       	ldi	r25, 0xC3	; 195
    adfe:	f3 01       	movw	r30, r6
    ae00:	31 97       	sbiw	r30, 0x01	; 1
    ae02:	f1 f7       	brne	.-4      	; 0xae00 <main+0x9a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae04:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae06:	d9 f7       	brne	.-10     	; 0xadfe <main+0x9a0>
    ae08:	17 c0       	rjmp	.+46     	; 0xae38 <main+0x9da>
                          _delay_ms(5000);
                          while(Wifi_CharReadyToRead()){
                             uploadFileBuffer[lengthOfHttpResponse] = Wifi_GetByte(false);
    ae0a:	00 91 54 34 	lds	r16, 0x3454
    ae0e:	10 91 55 34 	lds	r17, 0x3455
    ae12:	80 e0       	ldi	r24, 0x00	; 0
    ae14:	0e 94 65 02 	call	0x4ca	; 0x4ca <Wifi_GetByte>
    ae18:	0f 52       	subi	r16, 0x2F	; 47
    ae1a:	17 4c       	sbci	r17, 0xC7	; 199
    ae1c:	d8 01       	movw	r26, r16
    ae1e:	8c 93       	st	X, r24
                             lengthOfHttpResponse++;
    ae20:	80 91 54 34 	lds	r24, 0x3454
    ae24:	90 91 55 34 	lds	r25, 0x3455
    ae28:	01 96       	adiw	r24, 0x01	; 1
    ae2a:	80 93 54 34 	sts	0x3454, r24
    ae2e:	90 93 55 34 	sts	0x3455, r25
                             if(lengthOfHttpResponse > 999){
    ae32:	88 5e       	subi	r24, 0xE8	; 232
    ae34:	93 40       	sbci	r25, 0x03	; 3
    ae36:	20 f4       	brcc	.+8      	; 0xae40 <main+0x9e2>
                          }
                          temp2[tempStringFiller] = 0;
                          memcpy(httpResponse,temp2+5,3);
                          lengthOfHttpResponse = 0;
                          _delay_ms(5000);
                          while(Wifi_CharReadyToRead()){
    ae38:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_CharReadyToRead>
    ae3c:	88 23       	and	r24, r24
    ae3e:	29 f7       	brne	.-54     	; 0xae0a <main+0x9ac>
                             lengthOfHttpResponse++;
                             if(lengthOfHttpResponse > 999){
                                break;
                             }
                          }
                          uploadFileBuffer[lengthOfHttpResponse] = 0;
    ae40:	e0 91 54 34 	lds	r30, 0x3454
    ae44:	f0 91 55 34 	lds	r31, 0x3455
    ae48:	ef 52       	subi	r30, 0x2F	; 47
    ae4a:	f7 4c       	sbci	r31, 0xC7	; 199
    ae4c:	10 82       	st	Z, r1
                          if(strstr(uploadFileBuffer,"*CLOS") != 0){
    ae4e:	81 ed       	ldi	r24, 0xD1	; 209
    ae50:	98 e3       	ldi	r25, 0x38	; 56
    ae52:	6a e4       	ldi	r22, 0x4A	; 74
    ae54:	7b e2       	ldi	r23, 0x2B	; 43
    ae56:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    ae5a:	00 97       	sbiw	r24, 0x00	; 0
    ae5c:	19 f0       	breq	.+6      	; 0xae64 <main+0xa06>
                             connectionClosed = true;
    ae5e:	81 e0       	ldi	r24, 0x01	; 1
    ae60:	80 93 57 34 	sts	0x3457, r24
    ae64:	c7 01       	movw	r24, r14
    ae66:	01 97       	sbiw	r24, 0x01	; 1
    ae68:	f1 f7       	brne	.-4      	; 0xae66 <main+0xa08>
                        }
                     }
                  }
                }
                _delay_ms(1);
                connectionTimeoutTimer++;
    ae6a:	80 91 58 34 	lds	r24, 0x3458
    ae6e:	90 91 59 34 	lds	r25, 0x3459
    ae72:	a0 91 5a 34 	lds	r26, 0x345A
    ae76:	b0 91 5b 34 	lds	r27, 0x345B
    ae7a:	01 96       	adiw	r24, 0x01	; 1
    ae7c:	a1 1d       	adc	r26, r1
    ae7e:	b1 1d       	adc	r27, r1
    ae80:	80 93 58 34 	sts	0x3458, r24
    ae84:	90 93 59 34 	sts	0x3459, r25
    ae88:	a0 93 5a 34 	sts	0x345A, r26
    ae8c:	b0 93 5b 34 	sts	0x345B, r27
                if(connectionTimeoutTimer > 120000){
    ae90:	81 5c       	subi	r24, 0xC1	; 193
    ae92:	94 4d       	sbci	r25, 0xD4	; 212
    ae94:	a1 40       	sbci	r26, 0x01	; 1
    ae96:	b0 40       	sbci	r27, 0x00	; 0
    ae98:	70 f0       	brcs	.+28     	; 0xaeb6 <main+0xa58>
                    Debug_SendString("Connection Timed Out",true);
    ae9a:	80 e5       	ldi	r24, 0x50	; 80
    ae9c:	9b e2       	ldi	r25, 0x2B	; 43
    ae9e:	61 e0       	ldi	r22, 0x01	; 1
    aea0:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
                    connectionTimeoutTimer = 0;
    aea4:	10 92 58 34 	sts	0x3458, r1
    aea8:	10 92 59 34 	sts	0x3459, r1
    aeac:	10 92 5a 34 	sts	0x345A, r1
    aeb0:	10 92 5b 34 	sts	0x345B, r1
    aeb4:	05 c0       	rjmp	.+10     	; 0xaec0 <main+0xa62>
            connectionClosed = false;
            Debug_SendString("Wait for connection to close",true);
            httpResponse[0] = 0;
            connectionTimeoutTimer = 0;
            byteReceived = 0;
            while(!connectionClosed){
    aeb6:	80 91 57 34 	lds	r24, 0x3457
    aeba:	88 23       	and	r24, r24
    aebc:	09 f4       	brne	.+2      	; 0xaec0 <main+0xa62>
    aebe:	1b cf       	rjmp	.-458    	; 0xacf6 <main+0x898>
                    Debug_SendString("Connection Timed Out",true);
                    connectionTimeoutTimer = 0;
                    break;
                }
            }
            Debug_SendString("Connection Closed",true);
    aec0:	85 e6       	ldi	r24, 0x65	; 101
    aec2:	9b e2       	ldi	r25, 0x2B	; 43
    aec4:	61 e0       	ldi	r22, 0x01	; 1
    aec6:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

            uploadTimeStop = UNIX_time;
    aeca:	80 91 01 34 	lds	r24, 0x3401
    aece:	90 91 02 34 	lds	r25, 0x3402
    aed2:	a0 91 03 34 	lds	r26, 0x3403
    aed6:	b0 91 04 34 	lds	r27, 0x3404
    aeda:	80 93 3a 3d 	sts	0x3D3A, r24
    aede:	90 93 3b 3d 	sts	0x3D3B, r25
    aee2:	a0 93 3c 3d 	sts	0x3D3C, r26
    aee6:	b0 93 3d 3d 	sts	0x3D3D, r27


            if((httpResponseReceived) & (strstr(httpResponse,"200") != 0)){
    aeea:	10 91 56 34 	lds	r17, 0x3456
    aeee:	8c ee       	ldi	r24, 0xEC	; 236
    aef0:	93 e5       	ldi	r25, 0x53	; 83
    aef2:	67 e7       	ldi	r22, 0x77	; 119
    aef4:	7b e2       	ldi	r23, 0x2B	; 43
    aef6:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    aefa:	40 e0       	ldi	r20, 0x00	; 0
    aefc:	50 e0       	ldi	r21, 0x00	; 0
    aefe:	00 97       	sbiw	r24, 0x00	; 0
    af00:	11 f0       	breq	.+4      	; 0xaf06 <main+0xaa8>
    af02:	41 e0       	ldi	r20, 0x01	; 1
    af04:	50 e0       	ldi	r21, 0x00	; 0
    af06:	81 2f       	mov	r24, r17
    af08:	90 e0       	ldi	r25, 0x00	; 0
    af0a:	48 23       	and	r20, r24
    af0c:	59 23       	and	r21, r25
    af0e:	45 2b       	or	r20, r21
    af10:	09 f4       	brne	.+2      	; 0xaf14 <main+0xab6>
    af12:	ec c0       	rjmp	.+472    	; 0xb0ec <main+0xc8e>


                Debug_SendString("Got a 200 back",true);
    af14:	8b e7       	ldi	r24, 0x7B	; 123
    af16:	9b e2       	ldi	r25, 0x2B	; 43
    af18:	61 e0       	ldi	r22, 0x01	; 1
    af1a:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

                Debug_SendString("Successful: ",false);
    af1e:	8a e8       	ldi	r24, 0x8A	; 138
    af20:	9b e2       	ldi	r25, 0x2B	; 43
    af22:	60 e0       	ldi	r22, 0x00	; 0
    af24:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

                memcpy(successfulBinaryRecordsString,strtok((strstr(uploadFileBuffer,"\"successful_binrecs\":") + 21),","),5);
    af28:	81 ed       	ldi	r24, 0xD1	; 209
    af2a:	98 e3       	ldi	r25, 0x38	; 56
    af2c:	67 e9       	ldi	r22, 0x97	; 151
    af2e:	7b e2       	ldi	r23, 0x2B	; 43
    af30:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    af34:	45 96       	adiw	r24, 0x15	; 21
    af36:	6a e8       	ldi	r22, 0x8A	; 138
    af38:	76 e2       	ldi	r23, 0x26	; 38
    af3a:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    af3e:	ab e4       	ldi	r26, 0x4B	; 75
    af40:	bb e4       	ldi	r27, 0x4B	; 75
    af42:	fc 01       	movw	r30, r24
    af44:	85 e0       	ldi	r24, 0x05	; 5
    af46:	01 90       	ld	r0, Z+
    af48:	0d 92       	st	X+, r0
    af4a:	81 50       	subi	r24, 0x01	; 1
    af4c:	e1 f7       	brne	.-8      	; 0xaf46 <main+0xae8>
                Debug_SendString(successfulBinaryRecordsString,true);
    af4e:	8b e4       	ldi	r24, 0x4B	; 75
    af50:	9b e4       	ldi	r25, 0x4B	; 75
    af52:	61 e0       	ldi	r22, 0x01	; 1
    af54:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

                Debug_SendString("Failed: ",false);
    af58:	8d ea       	ldi	r24, 0xAD	; 173
    af5a:	9b e2       	ldi	r25, 0x2B	; 43
    af5c:	60 e0       	ldi	r22, 0x00	; 0
    af5e:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

                memcpy(failedBinaryRecordsString    ,strtok((strstr(uploadFileBuffer,"\"failed_binrecs\":") + 17),","),5);
    af62:	81 ed       	ldi	r24, 0xD1	; 209
    af64:	98 e3       	ldi	r25, 0x38	; 56
    af66:	66 eb       	ldi	r22, 0xB6	; 182
    af68:	7b e2       	ldi	r23, 0x2B	; 43
    af6a:	0e 94 e4 59 	call	0xb3c8	; 0xb3c8 <strstr>
    af6e:	41 96       	adiw	r24, 0x11	; 17
    af70:	6a e8       	ldi	r22, 0x8A	; 138
    af72:	76 e2       	ldi	r23, 0x26	; 38
    af74:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <strtok>
    af78:	a4 e7       	ldi	r26, 0x74	; 116
    af7a:	bc e5       	ldi	r27, 0x5C	; 92
    af7c:	fc 01       	movw	r30, r24
    af7e:	85 e0       	ldi	r24, 0x05	; 5
    af80:	01 90       	ld	r0, Z+
    af82:	0d 92       	st	X+, r0
    af84:	81 50       	subi	r24, 0x01	; 1
    af86:	e1 f7       	brne	.-8      	; 0xaf80 <main+0xb22>
                Debug_SendString(failedBinaryRecordsString,true);
    af88:	84 e7       	ldi	r24, 0x74	; 116
    af8a:	9c e5       	ldi	r25, 0x5C	; 92
    af8c:	61 e0       	ldi	r22, 0x01	; 1
    af8e:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>


                strcpy(newFileName, fileToUpload);
    af92:	87 e2       	ldi	r24, 0x27	; 39
    af94:	97 e5       	ldi	r25, 0x57	; 87
    af96:	61 ec       	ldi	r22, 0xC1	; 193
    af98:	7c e3       	ldi	r23, 0x3C	; 60
    af9a:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <strcpy>
			    strcat(newFileName, "U");
    af9e:	87 e2       	ldi	r24, 0x27	; 39
    afa0:	97 e5       	ldi	r25, 0x57	; 87
    afa2:	68 ec       	ldi	r22, 0xC8	; 200
    afa4:	7b e2       	ldi	r23, 0x2B	; 43
    afa6:	0e 94 c9 59 	call	0xb392	; 0xb392 <strcat>


                sprintf(temp2,"File TX took: %lu secs",uploadTimeStop - uploadTimeStart);
    afaa:	80 91 3a 3d 	lds	r24, 0x3D3A
    afae:	90 91 3b 3d 	lds	r25, 0x3D3B
    afb2:	a0 91 3c 3d 	lds	r26, 0x3D3C
    afb6:	b0 91 3d 3d 	lds	r27, 0x3D3D
    afba:	20 91 de 3c 	lds	r18, 0x3CDE
    afbe:	30 91 df 3c 	lds	r19, 0x3CDF
    afc2:	40 91 e0 3c 	lds	r20, 0x3CE0
    afc6:	50 91 e1 3c 	lds	r21, 0x3CE1
    afca:	6d b7       	in	r22, 0x3d	; 61
    afcc:	7e b7       	in	r23, 0x3e	; 62
    afce:	68 50       	subi	r22, 0x08	; 8
    afd0:	70 40       	sbci	r23, 0x00	; 0
    afd2:	6d bf       	out	0x3d, r22	; 61
    afd4:	7e bf       	out	0x3e, r23	; 62
    afd6:	0d b7       	in	r16, 0x3d	; 61
    afd8:	1e b7       	in	r17, 0x3e	; 62
    afda:	0f 5f       	subi	r16, 0xFF	; 255
    afdc:	1f 4f       	sbci	r17, 0xFF	; 255
    afde:	ed b7       	in	r30, 0x3d	; 61
    afe0:	fe b7       	in	r31, 0x3e	; 62
    afe2:	41 82       	std	Z+1, r4	; 0x01
    afe4:	52 82       	std	Z+2, r5	; 0x02
    afe6:	6a ec       	ldi	r22, 0xCA	; 202
    afe8:	7b e2       	ldi	r23, 0x2B	; 43
    afea:	f8 01       	movw	r30, r16
    afec:	62 83       	std	Z+2, r22	; 0x02
    afee:	73 83       	std	Z+3, r23	; 0x03
    aff0:	82 1b       	sub	r24, r18
    aff2:	93 0b       	sbc	r25, r19
    aff4:	a4 0b       	sbc	r26, r20
    aff6:	b5 0b       	sbc	r27, r21
    aff8:	84 83       	std	Z+4, r24	; 0x04
    affa:	95 83       	std	Z+5, r25	; 0x05
    affc:	a6 83       	std	Z+6, r26	; 0x06
    affe:	b7 83       	std	Z+7, r27	; 0x07
    b000:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
                Debug_SendString(temp2,true);
    b004:	2d b7       	in	r18, 0x3d	; 61
    b006:	3e b7       	in	r19, 0x3e	; 62
    b008:	28 5f       	subi	r18, 0xF8	; 248
    b00a:	3f 4f       	sbci	r19, 0xFF	; 255
    b00c:	2d bf       	out	0x3d, r18	; 61
    b00e:	3e bf       	out	0x3e, r19	; 62
    b010:	c2 01       	movw	r24, r4
    b012:	61 e0       	ldi	r22, 0x01	; 1
    b014:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
                sprintf(temp2,"TX speed: %lu kbps", uploadFileSize/(128*(uploadTimeStop - uploadTimeStart)));
    b018:	60 91 46 34 	lds	r22, 0x3446
    b01c:	70 91 47 34 	lds	r23, 0x3447
    b020:	80 91 48 34 	lds	r24, 0x3448
    b024:	90 91 49 34 	lds	r25, 0x3449
    b028:	20 91 3a 3d 	lds	r18, 0x3D3A
    b02c:	30 91 3b 3d 	lds	r19, 0x3D3B
    b030:	40 91 3c 3d 	lds	r20, 0x3D3C
    b034:	50 91 3d 3d 	lds	r21, 0x3D3D
    b038:	e0 90 de 3c 	lds	r14, 0x3CDE
    b03c:	f0 90 df 3c 	lds	r15, 0x3CDF
    b040:	00 91 e0 3c 	lds	r16, 0x3CE0
    b044:	10 91 e1 3c 	lds	r17, 0x3CE1
    b048:	ad b7       	in	r26, 0x3d	; 61
    b04a:	be b7       	in	r27, 0x3e	; 62
    b04c:	18 97       	sbiw	r26, 0x08	; 8
    b04e:	ad bf       	out	0x3d, r26	; 61
    b050:	be bf       	out	0x3e, r27	; 62
    b052:	cd b6       	in	r12, 0x3d	; 61
    b054:	de b6       	in	r13, 0x3e	; 62
    b056:	08 94       	sec
    b058:	c1 1c       	adc	r12, r1
    b05a:	d1 1c       	adc	r13, r1
    b05c:	11 96       	adiw	r26, 0x01	; 1
    b05e:	4d 92       	st	X+, r4
    b060:	5c 92       	st	X, r5
    b062:	12 97       	sbiw	r26, 0x02	; 2
    b064:	e1 ee       	ldi	r30, 0xE1	; 225
    b066:	fb e2       	ldi	r31, 0x2B	; 43
    b068:	d6 01       	movw	r26, r12
    b06a:	12 96       	adiw	r26, 0x02	; 2
    b06c:	ed 93       	st	X+, r30
    b06e:	fc 93       	st	X, r31
    b070:	13 97       	sbiw	r26, 0x03	; 3
    b072:	2e 19       	sub	r18, r14
    b074:	3f 09       	sbc	r19, r15
    b076:	40 0b       	sbc	r20, r16
    b078:	51 0b       	sbc	r21, r17
    b07a:	e7 e0       	ldi	r30, 0x07	; 7
    b07c:	22 0f       	add	r18, r18
    b07e:	33 1f       	adc	r19, r19
    b080:	44 1f       	adc	r20, r20
    b082:	55 1f       	adc	r21, r21
    b084:	ea 95       	dec	r30
    b086:	d1 f7       	brne	.-12     	; 0xb07c <main+0xc1e>
    b088:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    b08c:	f6 01       	movw	r30, r12
    b08e:	24 83       	std	Z+4, r18	; 0x04
    b090:	35 83       	std	Z+5, r19	; 0x05
    b092:	46 83       	std	Z+6, r20	; 0x06
    b094:	57 83       	std	Z+7, r21	; 0x07
    b096:	0e 94 80 5a 	call	0xb500	; 0xb500 <sprintf>
                Debug_SendString(temp2,true);
    b09a:	2d b7       	in	r18, 0x3d	; 61
    b09c:	3e b7       	in	r19, 0x3e	; 62
    b09e:	28 5f       	subi	r18, 0xF8	; 248
    b0a0:	3f 4f       	sbci	r19, 0xFF	; 255
    b0a2:	2d bf       	out	0x3d, r18	; 61
    b0a4:	3e bf       	out	0x3e, r19	; 62
    b0a6:	c2 01       	movw	r24, r4
    b0a8:	61 e0       	ldi	r22, 0x01	; 1
    b0aa:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

                okToRenameUploadFile = true;
    b0ae:	81 e0       	ldi	r24, 0x01	; 1
    b0b0:	80 93 3b 34 	sts	0x343B, r24
                okToCloseUploadFile = true;                   // flags it close file and to be to be renamed
    b0b4:	80 93 3a 34 	sts	0x343A, r24
    b0b8:	80 e1       	ldi	r24, 0x10	; 16
    b0ba:	97 e2       	ldi	r25, 0x27	; 39
    b0bc:	f3 01       	movw	r30, r6
    b0be:	31 97       	sbiw	r30, 0x01	; 1
    b0c0:	f1 f7       	brne	.-4      	; 0xb0be <main+0xc60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b0c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b0c4:	d9 f7       	brne	.-10     	; 0xb0bc <main+0xc5e>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    b0c6:	80 91 3a 34 	lds	r24, 0x343A
    b0ca:	88 23       	and	r24, r24
    b0cc:	e1 f7       	brne	.-8      	; 0xb0c6 <main+0xc68>
    b0ce:	80 e1       	ldi	r24, 0x10	; 16
    b0d0:	97 e2       	ldi	r25, 0x27	; 39
    b0d2:	f3 01       	movw	r30, r6
    b0d4:	31 97       	sbiw	r30, 0x01	; 1
    b0d6:	f1 f7       	brne	.-4      	; 0xb0d4 <main+0xc76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b0d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b0da:	d9 f7       	brne	.-10     	; 0xb0d2 <main+0xc74>
                _delay_ms(1000);
                okToWriteUploaderLogFile = true;               // adds entry to log file
    b0dc:	81 e0       	ldi	r24, 0x01	; 1
    b0de:	80 93 5c 34 	sts	0x345C, r24
                while(okToWriteUploaderLogFile);
    b0e2:	80 91 5c 34 	lds	r24, 0x345C
    b0e6:	88 23       	and	r24, r24
    b0e8:	e1 f7       	brne	.-8      	; 0xb0e2 <main+0xc84>
    b0ea:	30 c0       	rjmp	.+96     	; 0xb14c <main+0xcee>

            } else {
               Debug_SendString("File did not upload",true);
    b0ec:	84 ef       	ldi	r24, 0xF4	; 244
    b0ee:	9b e2       	ldi	r25, 0x2B	; 43
    b0f0:	61 e0       	ldi	r22, 0x01	; 1
    b0f2:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

               Debug_SendString("got: *",false);
    b0f6:	88 e0       	ldi	r24, 0x08	; 8
    b0f8:	9c e2       	ldi	r25, 0x2C	; 44
    b0fa:	60 e0       	ldi	r22, 0x00	; 0
    b0fc:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
               Debug_SendString(httpResponse,false);
    b100:	8c ee       	ldi	r24, 0xEC	; 236
    b102:	93 e5       	ldi	r25, 0x53	; 83
    b104:	60 e0       	ldi	r22, 0x00	; 0
    b106:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
               Debug_SendString("* back",true);
    b10a:	8f e0       	ldi	r24, 0x0F	; 15
    b10c:	9c e2       	ldi	r25, 0x2C	; 44
    b10e:	61 e0       	ldi	r22, 0x01	; 1
    b110:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>

			   okToCloseUploadFile = true;                    // flags it close file
    b114:	81 e0       	ldi	r24, 0x01	; 1
    b116:	80 93 3a 34 	sts	0x343A, r24
    b11a:	80 e1       	ldi	r24, 0x10	; 16
    b11c:	97 e2       	ldi	r25, 0x27	; 39
    b11e:	f3 01       	movw	r30, r6
    b120:	31 97       	sbiw	r30, 0x01	; 1
    b122:	f1 f7       	brne	.-4      	; 0xb120 <main+0xcc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b126:	d9 f7       	brne	.-10     	; 0xb11e <main+0xcc0>
                _delay_ms(1000);
                while(okToCloseUploadFile);
    b128:	80 91 3a 34 	lds	r24, 0x343A
    b12c:	88 23       	and	r24, r24
    b12e:	e1 f7       	brne	.-8      	; 0xb128 <main+0xcca>
    b130:	80 e1       	ldi	r24, 0x10	; 16
    b132:	97 e2       	ldi	r25, 0x27	; 39
    b134:	f3 01       	movw	r30, r6
    b136:	31 97       	sbiw	r30, 0x01	; 1
    b138:	f1 f7       	brne	.-4      	; 0xb136 <main+0xcd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b13c:	d9 f7       	brne	.-10     	; 0xb134 <main+0xcd6>
                _delay_ms(1000);

			   uploadFailed = true;                             // adds error entry to log file
    b13e:	81 e0       	ldi	r24, 0x01	; 1
    b140:	80 93 39 34 	sts	0x3439, r24
               while(uploadFailed);
    b144:	80 91 39 34 	lds	r24, 0x3439
    b148:	88 23       	and	r24, r24
    b14a:	e1 f7       	brne	.-8      	; 0xb144 <main+0xce6>





		    uploading = false;
    b14c:	10 92 3d 34 	sts	0x343D, r1
			Debug_SendString("Done!", true);
    b150:	86 e1       	ldi	r24, 0x16	; 22
    b152:	9c e2       	ldi	r25, 0x2C	; 44
    b154:	61 e0       	ldi	r22, 0x01	; 1
    b156:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
			okToUpload = false;
    b15a:	10 92 3c 34 	sts	0x343C, r1

            Debug_SendString("_____________________________________________", true);
    b15e:	88 e9       	ldi	r24, 0x98	; 152
    b160:	99 e2       	ldi	r25, 0x29	; 41
    b162:	61 e0       	ldi	r22, 0x01	; 1
    b164:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <Debug_SendString>
    b168:	91 ca       	rjmp	.-2782   	; 0xa68c <main+0x22e>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    b16a:	e0 e2       	ldi	r30, 0x20	; 32
    b16c:	f6 e0       	ldi	r31, 0x06	; 6
    b16e:	82 e0       	ldi	r24, 0x02	; 2
    b170:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    b172:	81 e0       	ldi	r24, 0x01	; 1
    b174:	85 83       	std	Z+5, r24	; 0x05
    b176:	20 e1       	ldi	r18, 0x10	; 16
    b178:	37 e2       	ldi	r19, 0x27	; 39
    b17a:	40 e7       	ldi	r20, 0x70	; 112
    b17c:	51 e0       	ldi	r21, 0x01	; 1
    b17e:	27 ca       	rjmp	.-2994   	; 0xa5ce <main+0x170>
    b180:	ff cf       	rjmp	.-2      	; 0xb180 <main+0xd22>

0000b182 <__mulsi3>:
    b182:	62 9f       	mul	r22, r18
    b184:	d0 01       	movw	r26, r0
    b186:	73 9f       	mul	r23, r19
    b188:	f0 01       	movw	r30, r0
    b18a:	82 9f       	mul	r24, r18
    b18c:	e0 0d       	add	r30, r0
    b18e:	f1 1d       	adc	r31, r1
    b190:	64 9f       	mul	r22, r20
    b192:	e0 0d       	add	r30, r0
    b194:	f1 1d       	adc	r31, r1
    b196:	92 9f       	mul	r25, r18
    b198:	f0 0d       	add	r31, r0
    b19a:	83 9f       	mul	r24, r19
    b19c:	f0 0d       	add	r31, r0
    b19e:	74 9f       	mul	r23, r20
    b1a0:	f0 0d       	add	r31, r0
    b1a2:	65 9f       	mul	r22, r21
    b1a4:	f0 0d       	add	r31, r0
    b1a6:	99 27       	eor	r25, r25
    b1a8:	72 9f       	mul	r23, r18
    b1aa:	b0 0d       	add	r27, r0
    b1ac:	e1 1d       	adc	r30, r1
    b1ae:	f9 1f       	adc	r31, r25
    b1b0:	63 9f       	mul	r22, r19
    b1b2:	b0 0d       	add	r27, r0
    b1b4:	e1 1d       	adc	r30, r1
    b1b6:	f9 1f       	adc	r31, r25
    b1b8:	bd 01       	movw	r22, r26
    b1ba:	cf 01       	movw	r24, r30
    b1bc:	11 24       	eor	r1, r1
    b1be:	08 95       	ret

0000b1c0 <__udivmodqi4>:
    b1c0:	99 1b       	sub	r25, r25
    b1c2:	79 e0       	ldi	r23, 0x09	; 9
    b1c4:	04 c0       	rjmp	.+8      	; 0xb1ce <__udivmodqi4_ep>

0000b1c6 <__udivmodqi4_loop>:
    b1c6:	99 1f       	adc	r25, r25
    b1c8:	96 17       	cp	r25, r22
    b1ca:	08 f0       	brcs	.+2      	; 0xb1ce <__udivmodqi4_ep>
    b1cc:	96 1b       	sub	r25, r22

0000b1ce <__udivmodqi4_ep>:
    b1ce:	88 1f       	adc	r24, r24
    b1d0:	7a 95       	dec	r23
    b1d2:	c9 f7       	brne	.-14     	; 0xb1c6 <__udivmodqi4_loop>
    b1d4:	80 95       	com	r24
    b1d6:	08 95       	ret

0000b1d8 <__udivmodhi4>:
    b1d8:	aa 1b       	sub	r26, r26
    b1da:	bb 1b       	sub	r27, r27
    b1dc:	51 e1       	ldi	r21, 0x11	; 17
    b1de:	07 c0       	rjmp	.+14     	; 0xb1ee <__udivmodhi4_ep>

0000b1e0 <__udivmodhi4_loop>:
    b1e0:	aa 1f       	adc	r26, r26
    b1e2:	bb 1f       	adc	r27, r27
    b1e4:	a6 17       	cp	r26, r22
    b1e6:	b7 07       	cpc	r27, r23
    b1e8:	10 f0       	brcs	.+4      	; 0xb1ee <__udivmodhi4_ep>
    b1ea:	a6 1b       	sub	r26, r22
    b1ec:	b7 0b       	sbc	r27, r23

0000b1ee <__udivmodhi4_ep>:
    b1ee:	88 1f       	adc	r24, r24
    b1f0:	99 1f       	adc	r25, r25
    b1f2:	5a 95       	dec	r21
    b1f4:	a9 f7       	brne	.-22     	; 0xb1e0 <__udivmodhi4_loop>
    b1f6:	80 95       	com	r24
    b1f8:	90 95       	com	r25
    b1fa:	bc 01       	movw	r22, r24
    b1fc:	cd 01       	movw	r24, r26
    b1fe:	08 95       	ret

0000b200 <__divmodhi4>:
    b200:	97 fb       	bst	r25, 7
    b202:	09 2e       	mov	r0, r25
    b204:	07 26       	eor	r0, r23
    b206:	0a d0       	rcall	.+20     	; 0xb21c <__divmodhi4_neg1>
    b208:	77 fd       	sbrc	r23, 7
    b20a:	04 d0       	rcall	.+8      	; 0xb214 <__divmodhi4_neg2>
    b20c:	e5 df       	rcall	.-54     	; 0xb1d8 <__udivmodhi4>
    b20e:	06 d0       	rcall	.+12     	; 0xb21c <__divmodhi4_neg1>
    b210:	00 20       	and	r0, r0
    b212:	1a f4       	brpl	.+6      	; 0xb21a <__divmodhi4_exit>

0000b214 <__divmodhi4_neg2>:
    b214:	70 95       	com	r23
    b216:	61 95       	neg	r22
    b218:	7f 4f       	sbci	r23, 0xFF	; 255

0000b21a <__divmodhi4_exit>:
    b21a:	08 95       	ret

0000b21c <__divmodhi4_neg1>:
    b21c:	f6 f7       	brtc	.-4      	; 0xb21a <__divmodhi4_exit>
    b21e:	90 95       	com	r25
    b220:	81 95       	neg	r24
    b222:	9f 4f       	sbci	r25, 0xFF	; 255
    b224:	08 95       	ret

0000b226 <__udivmodsi4>:
    b226:	a1 e2       	ldi	r26, 0x21	; 33
    b228:	1a 2e       	mov	r1, r26
    b22a:	aa 1b       	sub	r26, r26
    b22c:	bb 1b       	sub	r27, r27
    b22e:	fd 01       	movw	r30, r26
    b230:	0d c0       	rjmp	.+26     	; 0xb24c <__udivmodsi4_ep>

0000b232 <__udivmodsi4_loop>:
    b232:	aa 1f       	adc	r26, r26
    b234:	bb 1f       	adc	r27, r27
    b236:	ee 1f       	adc	r30, r30
    b238:	ff 1f       	adc	r31, r31
    b23a:	a2 17       	cp	r26, r18
    b23c:	b3 07       	cpc	r27, r19
    b23e:	e4 07       	cpc	r30, r20
    b240:	f5 07       	cpc	r31, r21
    b242:	20 f0       	brcs	.+8      	; 0xb24c <__udivmodsi4_ep>
    b244:	a2 1b       	sub	r26, r18
    b246:	b3 0b       	sbc	r27, r19
    b248:	e4 0b       	sbc	r30, r20
    b24a:	f5 0b       	sbc	r31, r21

0000b24c <__udivmodsi4_ep>:
    b24c:	66 1f       	adc	r22, r22
    b24e:	77 1f       	adc	r23, r23
    b250:	88 1f       	adc	r24, r24
    b252:	99 1f       	adc	r25, r25
    b254:	1a 94       	dec	r1
    b256:	69 f7       	brne	.-38     	; 0xb232 <__udivmodsi4_loop>
    b258:	60 95       	com	r22
    b25a:	70 95       	com	r23
    b25c:	80 95       	com	r24
    b25e:	90 95       	com	r25
    b260:	9b 01       	movw	r18, r22
    b262:	ac 01       	movw	r20, r24
    b264:	bd 01       	movw	r22, r26
    b266:	cf 01       	movw	r24, r30
    b268:	08 95       	ret

0000b26a <atoi>:
    b26a:	fc 01       	movw	r30, r24
    b26c:	88 27       	eor	r24, r24
    b26e:	99 27       	eor	r25, r25
    b270:	e8 94       	clt
    b272:	21 91       	ld	r18, Z+
    b274:	20 32       	cpi	r18, 0x20	; 32
    b276:	e9 f3       	breq	.-6      	; 0xb272 <atoi+0x8>
    b278:	29 30       	cpi	r18, 0x09	; 9
    b27a:	10 f0       	brcs	.+4      	; 0xb280 <atoi+0x16>
    b27c:	2e 30       	cpi	r18, 0x0E	; 14
    b27e:	c8 f3       	brcs	.-14     	; 0xb272 <atoi+0x8>
    b280:	2b 32       	cpi	r18, 0x2B	; 43
    b282:	41 f0       	breq	.+16     	; 0xb294 <atoi+0x2a>
    b284:	2d 32       	cpi	r18, 0x2D	; 45
    b286:	39 f4       	brne	.+14     	; 0xb296 <atoi+0x2c>
    b288:	68 94       	set
    b28a:	04 c0       	rjmp	.+8      	; 0xb294 <atoi+0x2a>
    b28c:	0e 94 78 5a 	call	0xb4f0	; 0xb4f0 <__mulhi_const_10>
    b290:	82 0f       	add	r24, r18
    b292:	91 1d       	adc	r25, r1
    b294:	21 91       	ld	r18, Z+
    b296:	20 53       	subi	r18, 0x30	; 48
    b298:	2a 30       	cpi	r18, 0x0A	; 10
    b29a:	c0 f3       	brcs	.-16     	; 0xb28c <atoi+0x22>
    b29c:	1e f4       	brtc	.+6      	; 0xb2a4 <atoi+0x3a>
    b29e:	90 95       	com	r25
    b2a0:	81 95       	neg	r24
    b2a2:	9f 4f       	sbci	r25, 0xFF	; 255
    b2a4:	08 95       	ret

0000b2a6 <atol>:
    b2a6:	1f 93       	push	r17
    b2a8:	fc 01       	movw	r30, r24
    b2aa:	99 27       	eor	r25, r25
    b2ac:	88 27       	eor	r24, r24
    b2ae:	bc 01       	movw	r22, r24
    b2b0:	e8 94       	clt
    b2b2:	11 91       	ld	r17, Z+
    b2b4:	10 32       	cpi	r17, 0x20	; 32
    b2b6:	e9 f3       	breq	.-6      	; 0xb2b2 <atol+0xc>
    b2b8:	19 30       	cpi	r17, 0x09	; 9
    b2ba:	10 f0       	brcs	.+4      	; 0xb2c0 <atol+0x1a>
    b2bc:	1e 30       	cpi	r17, 0x0E	; 14
    b2be:	c8 f3       	brcs	.-14     	; 0xb2b2 <atol+0xc>
    b2c0:	1b 32       	cpi	r17, 0x2B	; 43
    b2c2:	51 f0       	breq	.+20     	; 0xb2d8 <atol+0x32>
    b2c4:	1d 32       	cpi	r17, 0x2D	; 45
    b2c6:	49 f4       	brne	.+18     	; 0xb2da <atol+0x34>
    b2c8:	68 94       	set
    b2ca:	06 c0       	rjmp	.+12     	; 0xb2d8 <atol+0x32>
    b2cc:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__mulsi_const_10>
    b2d0:	61 0f       	add	r22, r17
    b2d2:	71 1d       	adc	r23, r1
    b2d4:	81 1d       	adc	r24, r1
    b2d6:	91 1d       	adc	r25, r1
    b2d8:	11 91       	ld	r17, Z+
    b2da:	10 53       	subi	r17, 0x30	; 48
    b2dc:	1a 30       	cpi	r17, 0x0A	; 10
    b2de:	b0 f3       	brcs	.-20     	; 0xb2cc <atol+0x26>
    b2e0:	3e f4       	brtc	.+14     	; 0xb2f0 <atol+0x4a>
    b2e2:	90 95       	com	r25
    b2e4:	80 95       	com	r24
    b2e6:	70 95       	com	r23
    b2e8:	61 95       	neg	r22
    b2ea:	7f 4f       	sbci	r23, 0xFF	; 255
    b2ec:	8f 4f       	sbci	r24, 0xFF	; 255
    b2ee:	9f 4f       	sbci	r25, 0xFF	; 255
    b2f0:	1f 91       	pop	r17
    b2f2:	08 95       	ret

0000b2f4 <strtok>:
    b2f4:	4f ec       	ldi	r20, 0xCF	; 207
    b2f6:	58 e3       	ldi	r21, 0x38	; 56
    b2f8:	0e 94 fe 59 	call	0xb3fc	; 0xb3fc <strtok_r>
    b2fc:	08 95       	ret

0000b2fe <memmove>:
    b2fe:	68 17       	cp	r22, r24
    b300:	79 07       	cpc	r23, r25
    b302:	68 f4       	brcc	.+26     	; 0xb31e <memmove+0x20>
    b304:	fb 01       	movw	r30, r22
    b306:	dc 01       	movw	r26, r24
    b308:	e4 0f       	add	r30, r20
    b30a:	f5 1f       	adc	r31, r21
    b30c:	a4 0f       	add	r26, r20
    b30e:	b5 1f       	adc	r27, r21
    b310:	02 c0       	rjmp	.+4      	; 0xb316 <memmove+0x18>
    b312:	02 90       	ld	r0, -Z
    b314:	0e 92       	st	-X, r0
    b316:	41 50       	subi	r20, 0x01	; 1
    b318:	50 40       	sbci	r21, 0x00	; 0
    b31a:	d8 f7       	brcc	.-10     	; 0xb312 <memmove+0x14>
    b31c:	08 95       	ret
    b31e:	0c 94 b6 5c 	jmp	0xb96c	; 0xb96c <memcpy>

0000b322 <strcasecmp>:
    b322:	fb 01       	movw	r30, r22
    b324:	dc 01       	movw	r26, r24
    b326:	8d 91       	ld	r24, X+
    b328:	81 34       	cpi	r24, 0x41	; 65
    b32a:	1c f0       	brlt	.+6      	; 0xb332 <strcasecmp+0x10>
    b32c:	8b 35       	cpi	r24, 0x5B	; 91
    b32e:	0c f4       	brge	.+2      	; 0xb332 <strcasecmp+0x10>
    b330:	80 5e       	subi	r24, 0xE0	; 224
    b332:	61 91       	ld	r22, Z+
    b334:	61 34       	cpi	r22, 0x41	; 65
    b336:	1c f0       	brlt	.+6      	; 0xb33e <strcasecmp+0x1c>
    b338:	6b 35       	cpi	r22, 0x5B	; 91
    b33a:	0c f4       	brge	.+2      	; 0xb33e <strcasecmp+0x1c>
    b33c:	60 5e       	subi	r22, 0xE0	; 224
    b33e:	86 1b       	sub	r24, r22
    b340:	61 11       	cpse	r22, r1
    b342:	89 f3       	breq	.-30     	; 0xb326 <strcasecmp+0x4>
    b344:	99 0b       	sbc	r25, r25
    b346:	08 95       	ret

0000b348 <strcasestr>:
    b348:	fb 01       	movw	r30, r22
    b34a:	51 91       	ld	r21, Z+
    b34c:	55 23       	and	r21, r21
    b34e:	b1 f0       	breq	.+44     	; 0xb37c <strcasestr+0x34>
    b350:	bf 01       	movw	r22, r30
    b352:	dc 01       	movw	r26, r24
    b354:	05 2e       	mov	r0, r21
    b356:	4d 91       	ld	r20, X+
    b358:	44 23       	and	r20, r20
    b35a:	69 f0       	breq	.+26     	; 0xb376 <strcasestr+0x2e>
    b35c:	10 d0       	rcall	.+32     	; 0xb37e <strcasestr+0x36>
    b35e:	d9 f7       	brne	.-10     	; 0xb356 <strcasestr+0xe>
    b360:	cd 01       	movw	r24, r26
    b362:	01 90       	ld	r0, Z+
    b364:	00 20       	and	r0, r0
    b366:	49 f0       	breq	.+18     	; 0xb37a <strcasestr+0x32>
    b368:	4d 91       	ld	r20, X+
    b36a:	41 11       	cpse	r20, r1
    b36c:	08 d0       	rcall	.+16     	; 0xb37e <strcasestr+0x36>
    b36e:	c9 f3       	breq	.-14     	; 0xb362 <strcasestr+0x1a>
    b370:	fb 01       	movw	r30, r22
    b372:	41 11       	cpse	r20, r1
    b374:	ee cf       	rjmp	.-36     	; 0xb352 <strcasestr+0xa>
    b376:	81 e0       	ldi	r24, 0x01	; 1
    b378:	90 e0       	ldi	r25, 0x00	; 0
    b37a:	01 97       	sbiw	r24, 0x01	; 1
    b37c:	08 95       	ret
    b37e:	40 25       	eor	r20, r0
    b380:	39 f0       	breq	.+14     	; 0xb390 <strcasestr+0x48>
    b382:	40 32       	cpi	r20, 0x20	; 32
    b384:	29 f4       	brne	.+10     	; 0xb390 <strcasestr+0x48>
    b386:	40 29       	or	r20, r0
    b388:	4b 57       	subi	r20, 0x7B	; 123
    b38a:	46 5e       	subi	r20, 0xE6	; 230
    b38c:	08 f0       	brcs	.+2      	; 0xb390 <strcasestr+0x48>
    b38e:	18 94       	sez
    b390:	08 95       	ret

0000b392 <strcat>:
    b392:	fb 01       	movw	r30, r22
    b394:	dc 01       	movw	r26, r24
    b396:	0d 90       	ld	r0, X+
    b398:	00 20       	and	r0, r0
    b39a:	e9 f7       	brne	.-6      	; 0xb396 <strcat+0x4>
    b39c:	11 97       	sbiw	r26, 0x01	; 1
    b39e:	01 90       	ld	r0, Z+
    b3a0:	0d 92       	st	X+, r0
    b3a2:	00 20       	and	r0, r0
    b3a4:	e1 f7       	brne	.-8      	; 0xb39e <strcat+0xc>
    b3a6:	08 95       	ret

0000b3a8 <strcmp>:
    b3a8:	fb 01       	movw	r30, r22
    b3aa:	dc 01       	movw	r26, r24
    b3ac:	8d 91       	ld	r24, X+
    b3ae:	01 90       	ld	r0, Z+
    b3b0:	80 19       	sub	r24, r0
    b3b2:	01 10       	cpse	r0, r1
    b3b4:	d9 f3       	breq	.-10     	; 0xb3ac <strcmp+0x4>
    b3b6:	99 0b       	sbc	r25, r25
    b3b8:	08 95       	ret

0000b3ba <strcpy>:
    b3ba:	fb 01       	movw	r30, r22
    b3bc:	dc 01       	movw	r26, r24
    b3be:	01 90       	ld	r0, Z+
    b3c0:	0d 92       	st	X+, r0
    b3c2:	00 20       	and	r0, r0
    b3c4:	e1 f7       	brne	.-8      	; 0xb3be <strcpy+0x4>
    b3c6:	08 95       	ret

0000b3c8 <strstr>:
    b3c8:	fb 01       	movw	r30, r22
    b3ca:	51 91       	ld	r21, Z+
    b3cc:	55 23       	and	r21, r21
    b3ce:	a9 f0       	breq	.+42     	; 0xb3fa <strstr+0x32>
    b3d0:	bf 01       	movw	r22, r30
    b3d2:	dc 01       	movw	r26, r24
    b3d4:	4d 91       	ld	r20, X+
    b3d6:	45 17       	cp	r20, r21
    b3d8:	41 11       	cpse	r20, r1
    b3da:	e1 f7       	brne	.-8      	; 0xb3d4 <strstr+0xc>
    b3dc:	59 f4       	brne	.+22     	; 0xb3f4 <strstr+0x2c>
    b3de:	cd 01       	movw	r24, r26
    b3e0:	01 90       	ld	r0, Z+
    b3e2:	00 20       	and	r0, r0
    b3e4:	49 f0       	breq	.+18     	; 0xb3f8 <strstr+0x30>
    b3e6:	4d 91       	ld	r20, X+
    b3e8:	40 15       	cp	r20, r0
    b3ea:	41 11       	cpse	r20, r1
    b3ec:	c9 f3       	breq	.-14     	; 0xb3e0 <strstr+0x18>
    b3ee:	fb 01       	movw	r30, r22
    b3f0:	41 11       	cpse	r20, r1
    b3f2:	ef cf       	rjmp	.-34     	; 0xb3d2 <strstr+0xa>
    b3f4:	81 e0       	ldi	r24, 0x01	; 1
    b3f6:	90 e0       	ldi	r25, 0x00	; 0
    b3f8:	01 97       	sbiw	r24, 0x01	; 1
    b3fa:	08 95       	ret

0000b3fc <strtok_r>:
    b3fc:	fa 01       	movw	r30, r20
    b3fe:	a1 91       	ld	r26, Z+
    b400:	b0 81       	ld	r27, Z
    b402:	00 97       	sbiw	r24, 0x00	; 0
    b404:	19 f4       	brne	.+6      	; 0xb40c <strtok_r+0x10>
    b406:	10 97       	sbiw	r26, 0x00	; 0
    b408:	e1 f0       	breq	.+56     	; 0xb442 <strtok_r+0x46>
    b40a:	cd 01       	movw	r24, r26
    b40c:	dc 01       	movw	r26, r24
    b40e:	cd 01       	movw	r24, r26
    b410:	0d 90       	ld	r0, X+
    b412:	00 20       	and	r0, r0
    b414:	11 f4       	brne	.+4      	; 0xb41a <strtok_r+0x1e>
    b416:	c0 01       	movw	r24, r0
    b418:	13 c0       	rjmp	.+38     	; 0xb440 <strtok_r+0x44>
    b41a:	fb 01       	movw	r30, r22
    b41c:	21 91       	ld	r18, Z+
    b41e:	22 23       	and	r18, r18
    b420:	19 f0       	breq	.+6      	; 0xb428 <strtok_r+0x2c>
    b422:	20 15       	cp	r18, r0
    b424:	d9 f7       	brne	.-10     	; 0xb41c <strtok_r+0x20>
    b426:	f3 cf       	rjmp	.-26     	; 0xb40e <strtok_r+0x12>
    b428:	fb 01       	movw	r30, r22
    b42a:	21 91       	ld	r18, Z+
    b42c:	20 15       	cp	r18, r0
    b42e:	19 f4       	brne	.+6      	; 0xb436 <strtok_r+0x3a>
    b430:	1e 92       	st	-X, r1
    b432:	11 96       	adiw	r26, 0x01	; 1
    b434:	06 c0       	rjmp	.+12     	; 0xb442 <strtok_r+0x46>
    b436:	22 23       	and	r18, r18
    b438:	c1 f7       	brne	.-16     	; 0xb42a <strtok_r+0x2e>
    b43a:	0d 90       	ld	r0, X+
    b43c:	00 20       	and	r0, r0
    b43e:	a1 f7       	brne	.-24     	; 0xb428 <strtok_r+0x2c>
    b440:	d0 01       	movw	r26, r0
    b442:	fa 01       	movw	r30, r20
    b444:	a1 93       	st	Z+, r26
    b446:	b0 83       	st	Z, r27
    b448:	08 95       	ret

0000b44a <strupr>:
    b44a:	dc 01       	movw	r26, r24
    b44c:	6c 91       	ld	r22, X
    b44e:	61 56       	subi	r22, 0x61	; 97
    b450:	6a 31       	cpi	r22, 0x1A	; 26
    b452:	08 f0       	brcs	.+2      	; 0xb456 <strupr+0xc>
    b454:	60 5e       	subi	r22, 0xE0	; 224
    b456:	6f 5b       	subi	r22, 0xBF	; 191
    b458:	6d 93       	st	X+, r22
    b45a:	c1 f7       	brne	.-16     	; 0xb44c <strupr+0x2>
    b45c:	08 95       	ret

0000b45e <ltoa>:
    b45e:	fa 01       	movw	r30, r20
    b460:	cf 93       	push	r28
    b462:	ff 93       	push	r31
    b464:	ef 93       	push	r30
    b466:	22 30       	cpi	r18, 0x02	; 2
    b468:	44 f1       	brlt	.+80     	; 0xb4ba <ltoa+0x5c>
    b46a:	25 32       	cpi	r18, 0x25	; 37
    b46c:	34 f5       	brge	.+76     	; 0xb4ba <ltoa+0x5c>
    b46e:	c2 2f       	mov	r28, r18
    b470:	e8 94       	clt
    b472:	ca 30       	cpi	r28, 0x0A	; 10
    b474:	49 f4       	brne	.+18     	; 0xb488 <ltoa+0x2a>
    b476:	97 fb       	bst	r25, 7
    b478:	3e f4       	brtc	.+14     	; 0xb488 <ltoa+0x2a>
    b47a:	90 95       	com	r25
    b47c:	80 95       	com	r24
    b47e:	70 95       	com	r23
    b480:	61 95       	neg	r22
    b482:	7f 4f       	sbci	r23, 0xFF	; 255
    b484:	8f 4f       	sbci	r24, 0xFF	; 255
    b486:	9f 4f       	sbci	r25, 0xFF	; 255
    b488:	2c 2f       	mov	r18, r28
    b48a:	33 27       	eor	r19, r19
    b48c:	44 27       	eor	r20, r20
    b48e:	55 27       	eor	r21, r21
    b490:	ff 93       	push	r31
    b492:	ef 93       	push	r30
    b494:	0e 94 13 59 	call	0xb226	; 0xb226 <__udivmodsi4>
    b498:	ef 91       	pop	r30
    b49a:	ff 91       	pop	r31
    b49c:	60 5d       	subi	r22, 0xD0	; 208
    b49e:	6a 33       	cpi	r22, 0x3A	; 58
    b4a0:	0c f0       	brlt	.+2      	; 0xb4a4 <ltoa+0x46>
    b4a2:	69 5d       	subi	r22, 0xD9	; 217
    b4a4:	61 93       	st	Z+, r22
    b4a6:	b9 01       	movw	r22, r18
    b4a8:	ca 01       	movw	r24, r20
    b4aa:	60 50       	subi	r22, 0x00	; 0
    b4ac:	70 40       	sbci	r23, 0x00	; 0
    b4ae:	80 40       	sbci	r24, 0x00	; 0
    b4b0:	90 40       	sbci	r25, 0x00	; 0
    b4b2:	51 f7       	brne	.-44     	; 0xb488 <ltoa+0x2a>
    b4b4:	16 f4       	brtc	.+4      	; 0xb4ba <ltoa+0x5c>
    b4b6:	cd e2       	ldi	r28, 0x2D	; 45
    b4b8:	c1 93       	st	Z+, r28
    b4ba:	10 82       	st	Z, r1
    b4bc:	8f 91       	pop	r24
    b4be:	9f 91       	pop	r25
    b4c0:	cf 91       	pop	r28
    b4c2:	0c 94 ca 5c 	jmp	0xb994	; 0xb994 <strrev>

0000b4c6 <__mulsi_const_10>:
    b4c6:	59 2f       	mov	r21, r25
    b4c8:	48 2f       	mov	r20, r24
    b4ca:	37 2f       	mov	r19, r23
    b4cc:	26 2f       	mov	r18, r22
    b4ce:	66 0f       	add	r22, r22
    b4d0:	77 1f       	adc	r23, r23
    b4d2:	88 1f       	adc	r24, r24
    b4d4:	99 1f       	adc	r25, r25
    b4d6:	66 0f       	add	r22, r22
    b4d8:	77 1f       	adc	r23, r23
    b4da:	88 1f       	adc	r24, r24
    b4dc:	99 1f       	adc	r25, r25
    b4de:	62 0f       	add	r22, r18
    b4e0:	73 1f       	adc	r23, r19
    b4e2:	84 1f       	adc	r24, r20
    b4e4:	95 1f       	adc	r25, r21
    b4e6:	66 0f       	add	r22, r22
    b4e8:	77 1f       	adc	r23, r23
    b4ea:	88 1f       	adc	r24, r24
    b4ec:	99 1f       	adc	r25, r25
    b4ee:	08 95       	ret

0000b4f0 <__mulhi_const_10>:
    b4f0:	7a e0       	ldi	r23, 0x0A	; 10
    b4f2:	97 9f       	mul	r25, r23
    b4f4:	90 2d       	mov	r25, r0
    b4f6:	87 9f       	mul	r24, r23
    b4f8:	80 2d       	mov	r24, r0
    b4fa:	91 0d       	add	r25, r1
    b4fc:	11 24       	eor	r1, r1
    b4fe:	08 95       	ret

0000b500 <sprintf>:
    b500:	0f 93       	push	r16
    b502:	1f 93       	push	r17
    b504:	df 93       	push	r29
    b506:	cf 93       	push	r28
    b508:	cd b7       	in	r28, 0x3d	; 61
    b50a:	de b7       	in	r29, 0x3e	; 62
    b50c:	2e 97       	sbiw	r28, 0x0e	; 14
    b50e:	cd bf       	out	0x3d, r28	; 61
    b510:	de bf       	out	0x3e, r29	; 62
    b512:	0e 89       	ldd	r16, Y+22	; 0x16
    b514:	1f 89       	ldd	r17, Y+23	; 0x17
    b516:	86 e0       	ldi	r24, 0x06	; 6
    b518:	8c 83       	std	Y+4, r24	; 0x04
    b51a:	09 83       	std	Y+1, r16	; 0x01
    b51c:	1a 83       	std	Y+2, r17	; 0x02
    b51e:	8f ef       	ldi	r24, 0xFF	; 255
    b520:	9f e7       	ldi	r25, 0x7F	; 127
    b522:	8d 83       	std	Y+5, r24	; 0x05
    b524:	9e 83       	std	Y+6, r25	; 0x06
    b526:	9e 01       	movw	r18, r28
    b528:	26 5e       	subi	r18, 0xE6	; 230
    b52a:	3f 4f       	sbci	r19, 0xFF	; 255
    b52c:	ce 01       	movw	r24, r28
    b52e:	01 96       	adiw	r24, 0x01	; 1
    b530:	68 8d       	ldd	r22, Y+24	; 0x18
    b532:	79 8d       	ldd	r23, Y+25	; 0x19
    b534:	a9 01       	movw	r20, r18
    b536:	0e 94 ab 5a 	call	0xb556	; 0xb556 <vfprintf>
    b53a:	2f 81       	ldd	r18, Y+7	; 0x07
    b53c:	38 85       	ldd	r19, Y+8	; 0x08
    b53e:	02 0f       	add	r16, r18
    b540:	13 1f       	adc	r17, r19
    b542:	f8 01       	movw	r30, r16
    b544:	10 82       	st	Z, r1
    b546:	2e 96       	adiw	r28, 0x0e	; 14
    b548:	cd bf       	out	0x3d, r28	; 61
    b54a:	de bf       	out	0x3e, r29	; 62
    b54c:	cf 91       	pop	r28
    b54e:	df 91       	pop	r29
    b550:	1f 91       	pop	r17
    b552:	0f 91       	pop	r16
    b554:	08 95       	ret

0000b556 <vfprintf>:
    b556:	2f 92       	push	r2
    b558:	3f 92       	push	r3
    b55a:	4f 92       	push	r4
    b55c:	5f 92       	push	r5
    b55e:	6f 92       	push	r6
    b560:	7f 92       	push	r7
    b562:	8f 92       	push	r8
    b564:	9f 92       	push	r9
    b566:	af 92       	push	r10
    b568:	bf 92       	push	r11
    b56a:	cf 92       	push	r12
    b56c:	df 92       	push	r13
    b56e:	ef 92       	push	r14
    b570:	ff 92       	push	r15
    b572:	0f 93       	push	r16
    b574:	1f 93       	push	r17
    b576:	df 93       	push	r29
    b578:	cf 93       	push	r28
    b57a:	cd b7       	in	r28, 0x3d	; 61
    b57c:	de b7       	in	r29, 0x3e	; 62
    b57e:	2b 97       	sbiw	r28, 0x0b	; 11
    b580:	cd bf       	out	0x3d, r28	; 61
    b582:	de bf       	out	0x3e, r29	; 62
    b584:	3c 01       	movw	r6, r24
    b586:	2b 01       	movw	r4, r22
    b588:	5a 01       	movw	r10, r20
    b58a:	fc 01       	movw	r30, r24
    b58c:	16 82       	std	Z+6, r1	; 0x06
    b58e:	17 82       	std	Z+7, r1	; 0x07
    b590:	83 81       	ldd	r24, Z+3	; 0x03
    b592:	81 fd       	sbrc	r24, 1
    b594:	03 c0       	rjmp	.+6      	; 0xb59c <vfprintf+0x46>
    b596:	6f ef       	ldi	r22, 0xFF	; 255
    b598:	7f ef       	ldi	r23, 0xFF	; 255
    b59a:	c6 c1       	rjmp	.+908    	; 0xb928 <vfprintf+0x3d2>
    b59c:	9a e0       	ldi	r25, 0x0A	; 10
    b59e:	89 2e       	mov	r8, r25
    b5a0:	1e 01       	movw	r2, r28
    b5a2:	08 94       	sec
    b5a4:	21 1c       	adc	r2, r1
    b5a6:	31 1c       	adc	r3, r1
    b5a8:	f3 01       	movw	r30, r6
    b5aa:	23 81       	ldd	r18, Z+3	; 0x03
    b5ac:	f2 01       	movw	r30, r4
    b5ae:	23 fd       	sbrc	r18, 3
    b5b0:	85 91       	lpm	r24, Z+
    b5b2:	23 ff       	sbrs	r18, 3
    b5b4:	81 91       	ld	r24, Z+
    b5b6:	2f 01       	movw	r4, r30
    b5b8:	88 23       	and	r24, r24
    b5ba:	09 f4       	brne	.+2      	; 0xb5be <vfprintf+0x68>
    b5bc:	b2 c1       	rjmp	.+868    	; 0xb922 <vfprintf+0x3cc>
    b5be:	85 32       	cpi	r24, 0x25	; 37
    b5c0:	39 f4       	brne	.+14     	; 0xb5d0 <vfprintf+0x7a>
    b5c2:	23 fd       	sbrc	r18, 3
    b5c4:	85 91       	lpm	r24, Z+
    b5c6:	23 ff       	sbrs	r18, 3
    b5c8:	81 91       	ld	r24, Z+
    b5ca:	2f 01       	movw	r4, r30
    b5cc:	85 32       	cpi	r24, 0x25	; 37
    b5ce:	29 f4       	brne	.+10     	; 0xb5da <vfprintf+0x84>
    b5d0:	90 e0       	ldi	r25, 0x00	; 0
    b5d2:	b3 01       	movw	r22, r6
    b5d4:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b5d8:	e7 cf       	rjmp	.-50     	; 0xb5a8 <vfprintf+0x52>
    b5da:	98 2f       	mov	r25, r24
    b5dc:	ff 24       	eor	r15, r15
    b5de:	ee 24       	eor	r14, r14
    b5e0:	99 24       	eor	r9, r9
    b5e2:	ff e1       	ldi	r31, 0x1F	; 31
    b5e4:	ff 15       	cp	r31, r15
    b5e6:	d0 f0       	brcs	.+52     	; 0xb61c <vfprintf+0xc6>
    b5e8:	9b 32       	cpi	r25, 0x2B	; 43
    b5ea:	69 f0       	breq	.+26     	; 0xb606 <vfprintf+0xb0>
    b5ec:	9c 32       	cpi	r25, 0x2C	; 44
    b5ee:	28 f4       	brcc	.+10     	; 0xb5fa <vfprintf+0xa4>
    b5f0:	90 32       	cpi	r25, 0x20	; 32
    b5f2:	59 f0       	breq	.+22     	; 0xb60a <vfprintf+0xb4>
    b5f4:	93 32       	cpi	r25, 0x23	; 35
    b5f6:	91 f4       	brne	.+36     	; 0xb61c <vfprintf+0xc6>
    b5f8:	0e c0       	rjmp	.+28     	; 0xb616 <vfprintf+0xc0>
    b5fa:	9d 32       	cpi	r25, 0x2D	; 45
    b5fc:	49 f0       	breq	.+18     	; 0xb610 <vfprintf+0xba>
    b5fe:	90 33       	cpi	r25, 0x30	; 48
    b600:	69 f4       	brne	.+26     	; 0xb61c <vfprintf+0xc6>
    b602:	41 e0       	ldi	r20, 0x01	; 1
    b604:	24 c0       	rjmp	.+72     	; 0xb64e <vfprintf+0xf8>
    b606:	52 e0       	ldi	r21, 0x02	; 2
    b608:	f5 2a       	or	r15, r21
    b60a:	84 e0       	ldi	r24, 0x04	; 4
    b60c:	f8 2a       	or	r15, r24
    b60e:	28 c0       	rjmp	.+80     	; 0xb660 <vfprintf+0x10a>
    b610:	98 e0       	ldi	r25, 0x08	; 8
    b612:	f9 2a       	or	r15, r25
    b614:	25 c0       	rjmp	.+74     	; 0xb660 <vfprintf+0x10a>
    b616:	e0 e1       	ldi	r30, 0x10	; 16
    b618:	fe 2a       	or	r15, r30
    b61a:	22 c0       	rjmp	.+68     	; 0xb660 <vfprintf+0x10a>
    b61c:	f7 fc       	sbrc	r15, 7
    b61e:	29 c0       	rjmp	.+82     	; 0xb672 <vfprintf+0x11c>
    b620:	89 2f       	mov	r24, r25
    b622:	80 53       	subi	r24, 0x30	; 48
    b624:	8a 30       	cpi	r24, 0x0A	; 10
    b626:	70 f4       	brcc	.+28     	; 0xb644 <vfprintf+0xee>
    b628:	f6 fe       	sbrs	r15, 6
    b62a:	05 c0       	rjmp	.+10     	; 0xb636 <vfprintf+0xe0>
    b62c:	98 9c       	mul	r9, r8
    b62e:	90 2c       	mov	r9, r0
    b630:	11 24       	eor	r1, r1
    b632:	98 0e       	add	r9, r24
    b634:	15 c0       	rjmp	.+42     	; 0xb660 <vfprintf+0x10a>
    b636:	e8 9c       	mul	r14, r8
    b638:	e0 2c       	mov	r14, r0
    b63a:	11 24       	eor	r1, r1
    b63c:	e8 0e       	add	r14, r24
    b63e:	f0 e2       	ldi	r31, 0x20	; 32
    b640:	ff 2a       	or	r15, r31
    b642:	0e c0       	rjmp	.+28     	; 0xb660 <vfprintf+0x10a>
    b644:	9e 32       	cpi	r25, 0x2E	; 46
    b646:	29 f4       	brne	.+10     	; 0xb652 <vfprintf+0xfc>
    b648:	f6 fc       	sbrc	r15, 6
    b64a:	6b c1       	rjmp	.+726    	; 0xb922 <vfprintf+0x3cc>
    b64c:	40 e4       	ldi	r20, 0x40	; 64
    b64e:	f4 2a       	or	r15, r20
    b650:	07 c0       	rjmp	.+14     	; 0xb660 <vfprintf+0x10a>
    b652:	9c 36       	cpi	r25, 0x6C	; 108
    b654:	19 f4       	brne	.+6      	; 0xb65c <vfprintf+0x106>
    b656:	50 e8       	ldi	r21, 0x80	; 128
    b658:	f5 2a       	or	r15, r21
    b65a:	02 c0       	rjmp	.+4      	; 0xb660 <vfprintf+0x10a>
    b65c:	98 36       	cpi	r25, 0x68	; 104
    b65e:	49 f4       	brne	.+18     	; 0xb672 <vfprintf+0x11c>
    b660:	f2 01       	movw	r30, r4
    b662:	23 fd       	sbrc	r18, 3
    b664:	95 91       	lpm	r25, Z+
    b666:	23 ff       	sbrs	r18, 3
    b668:	91 91       	ld	r25, Z+
    b66a:	2f 01       	movw	r4, r30
    b66c:	99 23       	and	r25, r25
    b66e:	09 f0       	breq	.+2      	; 0xb672 <vfprintf+0x11c>
    b670:	b8 cf       	rjmp	.-144    	; 0xb5e2 <vfprintf+0x8c>
    b672:	89 2f       	mov	r24, r25
    b674:	85 54       	subi	r24, 0x45	; 69
    b676:	83 30       	cpi	r24, 0x03	; 3
    b678:	18 f0       	brcs	.+6      	; 0xb680 <vfprintf+0x12a>
    b67a:	80 52       	subi	r24, 0x20	; 32
    b67c:	83 30       	cpi	r24, 0x03	; 3
    b67e:	38 f4       	brcc	.+14     	; 0xb68e <vfprintf+0x138>
    b680:	44 e0       	ldi	r20, 0x04	; 4
    b682:	50 e0       	ldi	r21, 0x00	; 0
    b684:	a4 0e       	add	r10, r20
    b686:	b5 1e       	adc	r11, r21
    b688:	5f e3       	ldi	r21, 0x3F	; 63
    b68a:	59 83       	std	Y+1, r21	; 0x01
    b68c:	0f c0       	rjmp	.+30     	; 0xb6ac <vfprintf+0x156>
    b68e:	93 36       	cpi	r25, 0x63	; 99
    b690:	31 f0       	breq	.+12     	; 0xb69e <vfprintf+0x148>
    b692:	93 37       	cpi	r25, 0x73	; 115
    b694:	79 f0       	breq	.+30     	; 0xb6b4 <vfprintf+0x15e>
    b696:	93 35       	cpi	r25, 0x53	; 83
    b698:	09 f0       	breq	.+2      	; 0xb69c <vfprintf+0x146>
    b69a:	56 c0       	rjmp	.+172    	; 0xb748 <vfprintf+0x1f2>
    b69c:	20 c0       	rjmp	.+64     	; 0xb6de <vfprintf+0x188>
    b69e:	f5 01       	movw	r30, r10
    b6a0:	80 81       	ld	r24, Z
    b6a2:	89 83       	std	Y+1, r24	; 0x01
    b6a4:	42 e0       	ldi	r20, 0x02	; 2
    b6a6:	50 e0       	ldi	r21, 0x00	; 0
    b6a8:	a4 0e       	add	r10, r20
    b6aa:	b5 1e       	adc	r11, r21
    b6ac:	61 01       	movw	r12, r2
    b6ae:	01 e0       	ldi	r16, 0x01	; 1
    b6b0:	10 e0       	ldi	r17, 0x00	; 0
    b6b2:	12 c0       	rjmp	.+36     	; 0xb6d8 <vfprintf+0x182>
    b6b4:	f5 01       	movw	r30, r10
    b6b6:	c0 80       	ld	r12, Z
    b6b8:	d1 80       	ldd	r13, Z+1	; 0x01
    b6ba:	f6 fc       	sbrc	r15, 6
    b6bc:	03 c0       	rjmp	.+6      	; 0xb6c4 <vfprintf+0x16e>
    b6be:	6f ef       	ldi	r22, 0xFF	; 255
    b6c0:	7f ef       	ldi	r23, 0xFF	; 255
    b6c2:	02 c0       	rjmp	.+4      	; 0xb6c8 <vfprintf+0x172>
    b6c4:	69 2d       	mov	r22, r9
    b6c6:	70 e0       	ldi	r23, 0x00	; 0
    b6c8:	42 e0       	ldi	r20, 0x02	; 2
    b6ca:	50 e0       	ldi	r21, 0x00	; 0
    b6cc:	a4 0e       	add	r10, r20
    b6ce:	b5 1e       	adc	r11, r21
    b6d0:	c6 01       	movw	r24, r12
    b6d2:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <strnlen>
    b6d6:	8c 01       	movw	r16, r24
    b6d8:	5f e7       	ldi	r21, 0x7F	; 127
    b6da:	f5 22       	and	r15, r21
    b6dc:	14 c0       	rjmp	.+40     	; 0xb706 <vfprintf+0x1b0>
    b6de:	f5 01       	movw	r30, r10
    b6e0:	c0 80       	ld	r12, Z
    b6e2:	d1 80       	ldd	r13, Z+1	; 0x01
    b6e4:	f6 fc       	sbrc	r15, 6
    b6e6:	03 c0       	rjmp	.+6      	; 0xb6ee <vfprintf+0x198>
    b6e8:	6f ef       	ldi	r22, 0xFF	; 255
    b6ea:	7f ef       	ldi	r23, 0xFF	; 255
    b6ec:	02 c0       	rjmp	.+4      	; 0xb6f2 <vfprintf+0x19c>
    b6ee:	69 2d       	mov	r22, r9
    b6f0:	70 e0       	ldi	r23, 0x00	; 0
    b6f2:	42 e0       	ldi	r20, 0x02	; 2
    b6f4:	50 e0       	ldi	r21, 0x00	; 0
    b6f6:	a4 0e       	add	r10, r20
    b6f8:	b5 1e       	adc	r11, r21
    b6fa:	c6 01       	movw	r24, r12
    b6fc:	0e 94 ab 5c 	call	0xb956	; 0xb956 <strnlen_P>
    b700:	8c 01       	movw	r16, r24
    b702:	50 e8       	ldi	r21, 0x80	; 128
    b704:	f5 2a       	or	r15, r21
    b706:	f3 fe       	sbrs	r15, 3
    b708:	07 c0       	rjmp	.+14     	; 0xb718 <vfprintf+0x1c2>
    b70a:	1a c0       	rjmp	.+52     	; 0xb740 <vfprintf+0x1ea>
    b70c:	80 e2       	ldi	r24, 0x20	; 32
    b70e:	90 e0       	ldi	r25, 0x00	; 0
    b710:	b3 01       	movw	r22, r6
    b712:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b716:	ea 94       	dec	r14
    b718:	8e 2d       	mov	r24, r14
    b71a:	90 e0       	ldi	r25, 0x00	; 0
    b71c:	08 17       	cp	r16, r24
    b71e:	19 07       	cpc	r17, r25
    b720:	a8 f3       	brcs	.-22     	; 0xb70c <vfprintf+0x1b6>
    b722:	0e c0       	rjmp	.+28     	; 0xb740 <vfprintf+0x1ea>
    b724:	f6 01       	movw	r30, r12
    b726:	f7 fc       	sbrc	r15, 7
    b728:	85 91       	lpm	r24, Z+
    b72a:	f7 fe       	sbrs	r15, 7
    b72c:	81 91       	ld	r24, Z+
    b72e:	6f 01       	movw	r12, r30
    b730:	90 e0       	ldi	r25, 0x00	; 0
    b732:	b3 01       	movw	r22, r6
    b734:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b738:	e1 10       	cpse	r14, r1
    b73a:	ea 94       	dec	r14
    b73c:	01 50       	subi	r16, 0x01	; 1
    b73e:	10 40       	sbci	r17, 0x00	; 0
    b740:	01 15       	cp	r16, r1
    b742:	11 05       	cpc	r17, r1
    b744:	79 f7       	brne	.-34     	; 0xb724 <vfprintf+0x1ce>
    b746:	ea c0       	rjmp	.+468    	; 0xb91c <vfprintf+0x3c6>
    b748:	94 36       	cpi	r25, 0x64	; 100
    b74a:	11 f0       	breq	.+4      	; 0xb750 <vfprintf+0x1fa>
    b74c:	99 36       	cpi	r25, 0x69	; 105
    b74e:	69 f5       	brne	.+90     	; 0xb7aa <vfprintf+0x254>
    b750:	f7 fe       	sbrs	r15, 7
    b752:	08 c0       	rjmp	.+16     	; 0xb764 <vfprintf+0x20e>
    b754:	f5 01       	movw	r30, r10
    b756:	20 81       	ld	r18, Z
    b758:	31 81       	ldd	r19, Z+1	; 0x01
    b75a:	42 81       	ldd	r20, Z+2	; 0x02
    b75c:	53 81       	ldd	r21, Z+3	; 0x03
    b75e:	84 e0       	ldi	r24, 0x04	; 4
    b760:	90 e0       	ldi	r25, 0x00	; 0
    b762:	0a c0       	rjmp	.+20     	; 0xb778 <vfprintf+0x222>
    b764:	f5 01       	movw	r30, r10
    b766:	80 81       	ld	r24, Z
    b768:	91 81       	ldd	r25, Z+1	; 0x01
    b76a:	9c 01       	movw	r18, r24
    b76c:	44 27       	eor	r20, r20
    b76e:	37 fd       	sbrc	r19, 7
    b770:	40 95       	com	r20
    b772:	54 2f       	mov	r21, r20
    b774:	82 e0       	ldi	r24, 0x02	; 2
    b776:	90 e0       	ldi	r25, 0x00	; 0
    b778:	a8 0e       	add	r10, r24
    b77a:	b9 1e       	adc	r11, r25
    b77c:	9f e6       	ldi	r25, 0x6F	; 111
    b77e:	f9 22       	and	r15, r25
    b780:	57 ff       	sbrs	r21, 7
    b782:	09 c0       	rjmp	.+18     	; 0xb796 <vfprintf+0x240>
    b784:	50 95       	com	r21
    b786:	40 95       	com	r20
    b788:	30 95       	com	r19
    b78a:	21 95       	neg	r18
    b78c:	3f 4f       	sbci	r19, 0xFF	; 255
    b78e:	4f 4f       	sbci	r20, 0xFF	; 255
    b790:	5f 4f       	sbci	r21, 0xFF	; 255
    b792:	e0 e8       	ldi	r30, 0x80	; 128
    b794:	fe 2a       	or	r15, r30
    b796:	ca 01       	movw	r24, r20
    b798:	b9 01       	movw	r22, r18
    b79a:	a1 01       	movw	r20, r2
    b79c:	2a e0       	ldi	r18, 0x0A	; 10
    b79e:	30 e0       	ldi	r19, 0x00	; 0
    b7a0:	0e 94 06 5d 	call	0xba0c	; 0xba0c <__ultoa_invert>
    b7a4:	d8 2e       	mov	r13, r24
    b7a6:	d2 18       	sub	r13, r2
    b7a8:	40 c0       	rjmp	.+128    	; 0xb82a <vfprintf+0x2d4>
    b7aa:	95 37       	cpi	r25, 0x75	; 117
    b7ac:	29 f4       	brne	.+10     	; 0xb7b8 <vfprintf+0x262>
    b7ae:	1f 2d       	mov	r17, r15
    b7b0:	1f 7e       	andi	r17, 0xEF	; 239
    b7b2:	2a e0       	ldi	r18, 0x0A	; 10
    b7b4:	30 e0       	ldi	r19, 0x00	; 0
    b7b6:	1d c0       	rjmp	.+58     	; 0xb7f2 <vfprintf+0x29c>
    b7b8:	1f 2d       	mov	r17, r15
    b7ba:	19 7f       	andi	r17, 0xF9	; 249
    b7bc:	9f 36       	cpi	r25, 0x6F	; 111
    b7be:	61 f0       	breq	.+24     	; 0xb7d8 <vfprintf+0x282>
    b7c0:	90 37       	cpi	r25, 0x70	; 112
    b7c2:	20 f4       	brcc	.+8      	; 0xb7cc <vfprintf+0x276>
    b7c4:	98 35       	cpi	r25, 0x58	; 88
    b7c6:	09 f0       	breq	.+2      	; 0xb7ca <vfprintf+0x274>
    b7c8:	ac c0       	rjmp	.+344    	; 0xb922 <vfprintf+0x3cc>
    b7ca:	0f c0       	rjmp	.+30     	; 0xb7ea <vfprintf+0x294>
    b7cc:	90 37       	cpi	r25, 0x70	; 112
    b7ce:	39 f0       	breq	.+14     	; 0xb7de <vfprintf+0x288>
    b7d0:	98 37       	cpi	r25, 0x78	; 120
    b7d2:	09 f0       	breq	.+2      	; 0xb7d6 <vfprintf+0x280>
    b7d4:	a6 c0       	rjmp	.+332    	; 0xb922 <vfprintf+0x3cc>
    b7d6:	04 c0       	rjmp	.+8      	; 0xb7e0 <vfprintf+0x28a>
    b7d8:	28 e0       	ldi	r18, 0x08	; 8
    b7da:	30 e0       	ldi	r19, 0x00	; 0
    b7dc:	0a c0       	rjmp	.+20     	; 0xb7f2 <vfprintf+0x29c>
    b7de:	10 61       	ori	r17, 0x10	; 16
    b7e0:	14 fd       	sbrc	r17, 4
    b7e2:	14 60       	ori	r17, 0x04	; 4
    b7e4:	20 e1       	ldi	r18, 0x10	; 16
    b7e6:	30 e0       	ldi	r19, 0x00	; 0
    b7e8:	04 c0       	rjmp	.+8      	; 0xb7f2 <vfprintf+0x29c>
    b7ea:	14 fd       	sbrc	r17, 4
    b7ec:	16 60       	ori	r17, 0x06	; 6
    b7ee:	20 e1       	ldi	r18, 0x10	; 16
    b7f0:	32 e0       	ldi	r19, 0x02	; 2
    b7f2:	17 ff       	sbrs	r17, 7
    b7f4:	08 c0       	rjmp	.+16     	; 0xb806 <vfprintf+0x2b0>
    b7f6:	f5 01       	movw	r30, r10
    b7f8:	60 81       	ld	r22, Z
    b7fa:	71 81       	ldd	r23, Z+1	; 0x01
    b7fc:	82 81       	ldd	r24, Z+2	; 0x02
    b7fe:	93 81       	ldd	r25, Z+3	; 0x03
    b800:	44 e0       	ldi	r20, 0x04	; 4
    b802:	50 e0       	ldi	r21, 0x00	; 0
    b804:	08 c0       	rjmp	.+16     	; 0xb816 <vfprintf+0x2c0>
    b806:	f5 01       	movw	r30, r10
    b808:	80 81       	ld	r24, Z
    b80a:	91 81       	ldd	r25, Z+1	; 0x01
    b80c:	bc 01       	movw	r22, r24
    b80e:	80 e0       	ldi	r24, 0x00	; 0
    b810:	90 e0       	ldi	r25, 0x00	; 0
    b812:	42 e0       	ldi	r20, 0x02	; 2
    b814:	50 e0       	ldi	r21, 0x00	; 0
    b816:	a4 0e       	add	r10, r20
    b818:	b5 1e       	adc	r11, r21
    b81a:	a1 01       	movw	r20, r2
    b81c:	0e 94 06 5d 	call	0xba0c	; 0xba0c <__ultoa_invert>
    b820:	d8 2e       	mov	r13, r24
    b822:	d2 18       	sub	r13, r2
    b824:	8f e7       	ldi	r24, 0x7F	; 127
    b826:	f8 2e       	mov	r15, r24
    b828:	f1 22       	and	r15, r17
    b82a:	f6 fe       	sbrs	r15, 6
    b82c:	0b c0       	rjmp	.+22     	; 0xb844 <vfprintf+0x2ee>
    b82e:	5e ef       	ldi	r21, 0xFE	; 254
    b830:	f5 22       	and	r15, r21
    b832:	d9 14       	cp	r13, r9
    b834:	38 f4       	brcc	.+14     	; 0xb844 <vfprintf+0x2ee>
    b836:	f4 fe       	sbrs	r15, 4
    b838:	07 c0       	rjmp	.+14     	; 0xb848 <vfprintf+0x2f2>
    b83a:	f2 fc       	sbrc	r15, 2
    b83c:	05 c0       	rjmp	.+10     	; 0xb848 <vfprintf+0x2f2>
    b83e:	8f ee       	ldi	r24, 0xEF	; 239
    b840:	f8 22       	and	r15, r24
    b842:	02 c0       	rjmp	.+4      	; 0xb848 <vfprintf+0x2f2>
    b844:	1d 2d       	mov	r17, r13
    b846:	01 c0       	rjmp	.+2      	; 0xb84a <vfprintf+0x2f4>
    b848:	19 2d       	mov	r17, r9
    b84a:	f4 fe       	sbrs	r15, 4
    b84c:	0d c0       	rjmp	.+26     	; 0xb868 <vfprintf+0x312>
    b84e:	fe 01       	movw	r30, r28
    b850:	ed 0d       	add	r30, r13
    b852:	f1 1d       	adc	r31, r1
    b854:	80 81       	ld	r24, Z
    b856:	80 33       	cpi	r24, 0x30	; 48
    b858:	19 f4       	brne	.+6      	; 0xb860 <vfprintf+0x30a>
    b85a:	99 ee       	ldi	r25, 0xE9	; 233
    b85c:	f9 22       	and	r15, r25
    b85e:	08 c0       	rjmp	.+16     	; 0xb870 <vfprintf+0x31a>
    b860:	1f 5f       	subi	r17, 0xFF	; 255
    b862:	f2 fe       	sbrs	r15, 2
    b864:	05 c0       	rjmp	.+10     	; 0xb870 <vfprintf+0x31a>
    b866:	03 c0       	rjmp	.+6      	; 0xb86e <vfprintf+0x318>
    b868:	8f 2d       	mov	r24, r15
    b86a:	86 78       	andi	r24, 0x86	; 134
    b86c:	09 f0       	breq	.+2      	; 0xb870 <vfprintf+0x31a>
    b86e:	1f 5f       	subi	r17, 0xFF	; 255
    b870:	0f 2d       	mov	r16, r15
    b872:	f3 fc       	sbrc	r15, 3
    b874:	14 c0       	rjmp	.+40     	; 0xb89e <vfprintf+0x348>
    b876:	f0 fe       	sbrs	r15, 0
    b878:	0f c0       	rjmp	.+30     	; 0xb898 <vfprintf+0x342>
    b87a:	1e 15       	cp	r17, r14
    b87c:	10 f0       	brcs	.+4      	; 0xb882 <vfprintf+0x32c>
    b87e:	9d 2c       	mov	r9, r13
    b880:	0b c0       	rjmp	.+22     	; 0xb898 <vfprintf+0x342>
    b882:	9d 2c       	mov	r9, r13
    b884:	9e 0c       	add	r9, r14
    b886:	91 1a       	sub	r9, r17
    b888:	1e 2d       	mov	r17, r14
    b88a:	06 c0       	rjmp	.+12     	; 0xb898 <vfprintf+0x342>
    b88c:	80 e2       	ldi	r24, 0x20	; 32
    b88e:	90 e0       	ldi	r25, 0x00	; 0
    b890:	b3 01       	movw	r22, r6
    b892:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b896:	1f 5f       	subi	r17, 0xFF	; 255
    b898:	1e 15       	cp	r17, r14
    b89a:	c0 f3       	brcs	.-16     	; 0xb88c <vfprintf+0x336>
    b89c:	04 c0       	rjmp	.+8      	; 0xb8a6 <vfprintf+0x350>
    b89e:	1e 15       	cp	r17, r14
    b8a0:	10 f4       	brcc	.+4      	; 0xb8a6 <vfprintf+0x350>
    b8a2:	e1 1a       	sub	r14, r17
    b8a4:	01 c0       	rjmp	.+2      	; 0xb8a8 <vfprintf+0x352>
    b8a6:	ee 24       	eor	r14, r14
    b8a8:	04 ff       	sbrs	r16, 4
    b8aa:	0f c0       	rjmp	.+30     	; 0xb8ca <vfprintf+0x374>
    b8ac:	80 e3       	ldi	r24, 0x30	; 48
    b8ae:	90 e0       	ldi	r25, 0x00	; 0
    b8b0:	b3 01       	movw	r22, r6
    b8b2:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b8b6:	02 ff       	sbrs	r16, 2
    b8b8:	1d c0       	rjmp	.+58     	; 0xb8f4 <vfprintf+0x39e>
    b8ba:	01 fd       	sbrc	r16, 1
    b8bc:	03 c0       	rjmp	.+6      	; 0xb8c4 <vfprintf+0x36e>
    b8be:	88 e7       	ldi	r24, 0x78	; 120
    b8c0:	90 e0       	ldi	r25, 0x00	; 0
    b8c2:	0e c0       	rjmp	.+28     	; 0xb8e0 <vfprintf+0x38a>
    b8c4:	88 e5       	ldi	r24, 0x58	; 88
    b8c6:	90 e0       	ldi	r25, 0x00	; 0
    b8c8:	0b c0       	rjmp	.+22     	; 0xb8e0 <vfprintf+0x38a>
    b8ca:	80 2f       	mov	r24, r16
    b8cc:	86 78       	andi	r24, 0x86	; 134
    b8ce:	91 f0       	breq	.+36     	; 0xb8f4 <vfprintf+0x39e>
    b8d0:	01 ff       	sbrs	r16, 1
    b8d2:	02 c0       	rjmp	.+4      	; 0xb8d8 <vfprintf+0x382>
    b8d4:	8b e2       	ldi	r24, 0x2B	; 43
    b8d6:	01 c0       	rjmp	.+2      	; 0xb8da <vfprintf+0x384>
    b8d8:	80 e2       	ldi	r24, 0x20	; 32
    b8da:	f7 fc       	sbrc	r15, 7
    b8dc:	8d e2       	ldi	r24, 0x2D	; 45
    b8de:	90 e0       	ldi	r25, 0x00	; 0
    b8e0:	b3 01       	movw	r22, r6
    b8e2:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b8e6:	06 c0       	rjmp	.+12     	; 0xb8f4 <vfprintf+0x39e>
    b8e8:	80 e3       	ldi	r24, 0x30	; 48
    b8ea:	90 e0       	ldi	r25, 0x00	; 0
    b8ec:	b3 01       	movw	r22, r6
    b8ee:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b8f2:	9a 94       	dec	r9
    b8f4:	d9 14       	cp	r13, r9
    b8f6:	c0 f3       	brcs	.-16     	; 0xb8e8 <vfprintf+0x392>
    b8f8:	da 94       	dec	r13
    b8fa:	f1 01       	movw	r30, r2
    b8fc:	ed 0d       	add	r30, r13
    b8fe:	f1 1d       	adc	r31, r1
    b900:	80 81       	ld	r24, Z
    b902:	90 e0       	ldi	r25, 0x00	; 0
    b904:	b3 01       	movw	r22, r6
    b906:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b90a:	dd 20       	and	r13, r13
    b90c:	a9 f7       	brne	.-22     	; 0xb8f8 <vfprintf+0x3a2>
    b90e:	06 c0       	rjmp	.+12     	; 0xb91c <vfprintf+0x3c6>
    b910:	80 e2       	ldi	r24, 0x20	; 32
    b912:	90 e0       	ldi	r25, 0x00	; 0
    b914:	b3 01       	movw	r22, r6
    b916:	0e 94 da 5c 	call	0xb9b4	; 0xb9b4 <fputc>
    b91a:	ea 94       	dec	r14
    b91c:	ee 20       	and	r14, r14
    b91e:	c1 f7       	brne	.-16     	; 0xb910 <vfprintf+0x3ba>
    b920:	43 ce       	rjmp	.-890    	; 0xb5a8 <vfprintf+0x52>
    b922:	f3 01       	movw	r30, r6
    b924:	66 81       	ldd	r22, Z+6	; 0x06
    b926:	77 81       	ldd	r23, Z+7	; 0x07
    b928:	cb 01       	movw	r24, r22
    b92a:	2b 96       	adiw	r28, 0x0b	; 11
    b92c:	cd bf       	out	0x3d, r28	; 61
    b92e:	de bf       	out	0x3e, r29	; 62
    b930:	cf 91       	pop	r28
    b932:	df 91       	pop	r29
    b934:	1f 91       	pop	r17
    b936:	0f 91       	pop	r16
    b938:	ff 90       	pop	r15
    b93a:	ef 90       	pop	r14
    b93c:	df 90       	pop	r13
    b93e:	cf 90       	pop	r12
    b940:	bf 90       	pop	r11
    b942:	af 90       	pop	r10
    b944:	9f 90       	pop	r9
    b946:	8f 90       	pop	r8
    b948:	7f 90       	pop	r7
    b94a:	6f 90       	pop	r6
    b94c:	5f 90       	pop	r5
    b94e:	4f 90       	pop	r4
    b950:	3f 90       	pop	r3
    b952:	2f 90       	pop	r2
    b954:	08 95       	ret

0000b956 <strnlen_P>:
    b956:	fc 01       	movw	r30, r24
    b958:	05 90       	lpm	r0, Z+
    b95a:	61 50       	subi	r22, 0x01	; 1
    b95c:	70 40       	sbci	r23, 0x00	; 0
    b95e:	01 10       	cpse	r0, r1
    b960:	d8 f7       	brcc	.-10     	; 0xb958 <strnlen_P+0x2>
    b962:	80 95       	com	r24
    b964:	90 95       	com	r25
    b966:	8e 0f       	add	r24, r30
    b968:	9f 1f       	adc	r25, r31
    b96a:	08 95       	ret

0000b96c <memcpy>:
    b96c:	fb 01       	movw	r30, r22
    b96e:	dc 01       	movw	r26, r24
    b970:	02 c0       	rjmp	.+4      	; 0xb976 <memcpy+0xa>
    b972:	01 90       	ld	r0, Z+
    b974:	0d 92       	st	X+, r0
    b976:	41 50       	subi	r20, 0x01	; 1
    b978:	50 40       	sbci	r21, 0x00	; 0
    b97a:	d8 f7       	brcc	.-10     	; 0xb972 <memcpy+0x6>
    b97c:	08 95       	ret

0000b97e <strnlen>:
    b97e:	fc 01       	movw	r30, r24
    b980:	61 50       	subi	r22, 0x01	; 1
    b982:	70 40       	sbci	r23, 0x00	; 0
    b984:	01 90       	ld	r0, Z+
    b986:	01 10       	cpse	r0, r1
    b988:	d8 f7       	brcc	.-10     	; 0xb980 <strnlen+0x2>
    b98a:	80 95       	com	r24
    b98c:	90 95       	com	r25
    b98e:	8e 0f       	add	r24, r30
    b990:	9f 1f       	adc	r25, r31
    b992:	08 95       	ret

0000b994 <strrev>:
    b994:	dc 01       	movw	r26, r24
    b996:	fc 01       	movw	r30, r24
    b998:	67 2f       	mov	r22, r23
    b99a:	71 91       	ld	r23, Z+
    b99c:	77 23       	and	r23, r23
    b99e:	e1 f7       	brne	.-8      	; 0xb998 <strrev+0x4>
    b9a0:	32 97       	sbiw	r30, 0x02	; 2
    b9a2:	04 c0       	rjmp	.+8      	; 0xb9ac <strrev+0x18>
    b9a4:	7c 91       	ld	r23, X
    b9a6:	6d 93       	st	X+, r22
    b9a8:	70 83       	st	Z, r23
    b9aa:	62 91       	ld	r22, -Z
    b9ac:	ae 17       	cp	r26, r30
    b9ae:	bf 07       	cpc	r27, r31
    b9b0:	c8 f3       	brcs	.-14     	; 0xb9a4 <strrev+0x10>
    b9b2:	08 95       	ret

0000b9b4 <fputc>:
    b9b4:	0f 93       	push	r16
    b9b6:	1f 93       	push	r17
    b9b8:	cf 93       	push	r28
    b9ba:	df 93       	push	r29
    b9bc:	8c 01       	movw	r16, r24
    b9be:	eb 01       	movw	r28, r22
    b9c0:	8b 81       	ldd	r24, Y+3	; 0x03
    b9c2:	81 ff       	sbrs	r24, 1
    b9c4:	1b c0       	rjmp	.+54     	; 0xb9fc <fputc+0x48>
    b9c6:	82 ff       	sbrs	r24, 2
    b9c8:	0d c0       	rjmp	.+26     	; 0xb9e4 <fputc+0x30>
    b9ca:	2e 81       	ldd	r18, Y+6	; 0x06
    b9cc:	3f 81       	ldd	r19, Y+7	; 0x07
    b9ce:	8c 81       	ldd	r24, Y+4	; 0x04
    b9d0:	9d 81       	ldd	r25, Y+5	; 0x05
    b9d2:	28 17       	cp	r18, r24
    b9d4:	39 07       	cpc	r19, r25
    b9d6:	64 f4       	brge	.+24     	; 0xb9f0 <fputc+0x3c>
    b9d8:	e8 81       	ld	r30, Y
    b9da:	f9 81       	ldd	r31, Y+1	; 0x01
    b9dc:	01 93       	st	Z+, r16
    b9de:	e8 83       	st	Y, r30
    b9e0:	f9 83       	std	Y+1, r31	; 0x01
    b9e2:	06 c0       	rjmp	.+12     	; 0xb9f0 <fputc+0x3c>
    b9e4:	e8 85       	ldd	r30, Y+8	; 0x08
    b9e6:	f9 85       	ldd	r31, Y+9	; 0x09
    b9e8:	80 2f       	mov	r24, r16
    b9ea:	19 95       	eicall
    b9ec:	89 2b       	or	r24, r25
    b9ee:	31 f4       	brne	.+12     	; 0xb9fc <fputc+0x48>
    b9f0:	8e 81       	ldd	r24, Y+6	; 0x06
    b9f2:	9f 81       	ldd	r25, Y+7	; 0x07
    b9f4:	01 96       	adiw	r24, 0x01	; 1
    b9f6:	8e 83       	std	Y+6, r24	; 0x06
    b9f8:	9f 83       	std	Y+7, r25	; 0x07
    b9fa:	02 c0       	rjmp	.+4      	; 0xba00 <fputc+0x4c>
    b9fc:	0f ef       	ldi	r16, 0xFF	; 255
    b9fe:	1f ef       	ldi	r17, 0xFF	; 255
    ba00:	c8 01       	movw	r24, r16
    ba02:	df 91       	pop	r29
    ba04:	cf 91       	pop	r28
    ba06:	1f 91       	pop	r17
    ba08:	0f 91       	pop	r16
    ba0a:	08 95       	ret

0000ba0c <__ultoa_invert>:
    ba0c:	fa 01       	movw	r30, r20
    ba0e:	aa 27       	eor	r26, r26
    ba10:	28 30       	cpi	r18, 0x08	; 8
    ba12:	51 f1       	breq	.+84     	; 0xba68 <__ultoa_invert+0x5c>
    ba14:	20 31       	cpi	r18, 0x10	; 16
    ba16:	81 f1       	breq	.+96     	; 0xba78 <__ultoa_invert+0x6c>
    ba18:	e8 94       	clt
    ba1a:	6f 93       	push	r22
    ba1c:	6e 7f       	andi	r22, 0xFE	; 254
    ba1e:	6e 5f       	subi	r22, 0xFE	; 254
    ba20:	7f 4f       	sbci	r23, 0xFF	; 255
    ba22:	8f 4f       	sbci	r24, 0xFF	; 255
    ba24:	9f 4f       	sbci	r25, 0xFF	; 255
    ba26:	af 4f       	sbci	r26, 0xFF	; 255
    ba28:	b1 e0       	ldi	r27, 0x01	; 1
    ba2a:	3e d0       	rcall	.+124    	; 0xbaa8 <__ultoa_invert+0x9c>
    ba2c:	b4 e0       	ldi	r27, 0x04	; 4
    ba2e:	3c d0       	rcall	.+120    	; 0xbaa8 <__ultoa_invert+0x9c>
    ba30:	67 0f       	add	r22, r23
    ba32:	78 1f       	adc	r23, r24
    ba34:	89 1f       	adc	r24, r25
    ba36:	9a 1f       	adc	r25, r26
    ba38:	a1 1d       	adc	r26, r1
    ba3a:	68 0f       	add	r22, r24
    ba3c:	79 1f       	adc	r23, r25
    ba3e:	8a 1f       	adc	r24, r26
    ba40:	91 1d       	adc	r25, r1
    ba42:	a1 1d       	adc	r26, r1
    ba44:	6a 0f       	add	r22, r26
    ba46:	71 1d       	adc	r23, r1
    ba48:	81 1d       	adc	r24, r1
    ba4a:	91 1d       	adc	r25, r1
    ba4c:	a1 1d       	adc	r26, r1
    ba4e:	20 d0       	rcall	.+64     	; 0xba90 <__ultoa_invert+0x84>
    ba50:	09 f4       	brne	.+2      	; 0xba54 <__ultoa_invert+0x48>
    ba52:	68 94       	set
    ba54:	3f 91       	pop	r19
    ba56:	2a e0       	ldi	r18, 0x0A	; 10
    ba58:	26 9f       	mul	r18, r22
    ba5a:	11 24       	eor	r1, r1
    ba5c:	30 19       	sub	r19, r0
    ba5e:	30 5d       	subi	r19, 0xD0	; 208
    ba60:	31 93       	st	Z+, r19
    ba62:	de f6       	brtc	.-74     	; 0xba1a <__ultoa_invert+0xe>
    ba64:	cf 01       	movw	r24, r30
    ba66:	08 95       	ret
    ba68:	46 2f       	mov	r20, r22
    ba6a:	47 70       	andi	r20, 0x07	; 7
    ba6c:	40 5d       	subi	r20, 0xD0	; 208
    ba6e:	41 93       	st	Z+, r20
    ba70:	b3 e0       	ldi	r27, 0x03	; 3
    ba72:	0f d0       	rcall	.+30     	; 0xba92 <__ultoa_invert+0x86>
    ba74:	c9 f7       	brne	.-14     	; 0xba68 <__ultoa_invert+0x5c>
    ba76:	f6 cf       	rjmp	.-20     	; 0xba64 <__ultoa_invert+0x58>
    ba78:	46 2f       	mov	r20, r22
    ba7a:	4f 70       	andi	r20, 0x0F	; 15
    ba7c:	40 5d       	subi	r20, 0xD0	; 208
    ba7e:	4a 33       	cpi	r20, 0x3A	; 58
    ba80:	18 f0       	brcs	.+6      	; 0xba88 <__ultoa_invert+0x7c>
    ba82:	49 5d       	subi	r20, 0xD9	; 217
    ba84:	31 fd       	sbrc	r19, 1
    ba86:	40 52       	subi	r20, 0x20	; 32
    ba88:	41 93       	st	Z+, r20
    ba8a:	02 d0       	rcall	.+4      	; 0xba90 <__ultoa_invert+0x84>
    ba8c:	a9 f7       	brne	.-22     	; 0xba78 <__ultoa_invert+0x6c>
    ba8e:	ea cf       	rjmp	.-44     	; 0xba64 <__ultoa_invert+0x58>
    ba90:	b4 e0       	ldi	r27, 0x04	; 4
    ba92:	a6 95       	lsr	r26
    ba94:	97 95       	ror	r25
    ba96:	87 95       	ror	r24
    ba98:	77 95       	ror	r23
    ba9a:	67 95       	ror	r22
    ba9c:	ba 95       	dec	r27
    ba9e:	c9 f7       	brne	.-14     	; 0xba92 <__ultoa_invert+0x86>
    baa0:	00 97       	sbiw	r24, 0x00	; 0
    baa2:	61 05       	cpc	r22, r1
    baa4:	71 05       	cpc	r23, r1
    baa6:	08 95       	ret
    baa8:	9b 01       	movw	r18, r22
    baaa:	ac 01       	movw	r20, r24
    baac:	0a 2e       	mov	r0, r26
    baae:	06 94       	lsr	r0
    bab0:	57 95       	ror	r21
    bab2:	47 95       	ror	r20
    bab4:	37 95       	ror	r19
    bab6:	27 95       	ror	r18
    bab8:	ba 95       	dec	r27
    baba:	c9 f7       	brne	.-14     	; 0xbaae <__ultoa_invert+0xa2>
    babc:	62 0f       	add	r22, r18
    babe:	73 1f       	adc	r23, r19
    bac0:	84 1f       	adc	r24, r20
    bac2:	95 1f       	adc	r25, r21
    bac4:	a0 1d       	adc	r26, r0
    bac6:	08 95       	ret

0000bac8 <_exit>:
    bac8:	f8 94       	cli

0000baca <__stop_program>:
    baca:	ff cf       	rjmp	.-2      	; 0xbaca <__stop_program>
